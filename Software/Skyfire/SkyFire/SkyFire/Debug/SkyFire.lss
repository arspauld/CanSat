
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005db4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00802000  00005db4  00005e48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000154  008020a8  008020a8  00005ef0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c0  00000000  00000000  00005f90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001bbb1  00000000  00000000  00006750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005965  00000000  00000000  00022301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cce1  00000000  00000000  00027c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020f0  00000000  00000000  00034948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000391b4  00000000  00000000  00036a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000075b8  00000000  00000000  0006fbec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  000771a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e587  00000000  00000000  000778d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_13>
      38:	f2 c3       	rjmp	.+2020   	; 0x81e <__vector_14>
      3a:	00 00       	nop
      3c:	28 c4       	rjmp	.+2128   	; 0x88e <__vector_15>
      3e:	00 00       	nop
      40:	5e c4       	rjmp	.+2236   	; 0x8fe <__vector_16>
      42:	00 00       	nop
      44:	94 c4       	rjmp	.+2344   	; 0x96e <__vector_17>
      46:	00 00       	nop
      48:	ca c4       	rjmp	.+2452   	; 0x9de <__vector_18>
      4a:	00 00       	nop
      4c:	00 c5       	rjmp	.+2560   	; 0xa4e <__vector_19>
      4e:	00 00       	nop
      50:	36 c5       	rjmp	.+2668   	; 0xabe <__vector_20>
      52:	00 00       	nop
      54:	6c c5       	rjmp	.+2776   	; 0xb2e <__vector_21>
      56:	00 00       	nop
      58:	a2 c5       	rjmp	.+2884   	; 0xb9e <__vector_22>
      5a:	00 00       	nop
      5c:	d8 c5       	rjmp	.+2992   	; 0xc0e <__vector_23>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	35 c1       	rjmp	.+618    	; 0x2fc <__bad_interrupt>
      92:	00 00       	nop
      94:	33 c1       	rjmp	.+614    	; 0x2fc <__bad_interrupt>
      96:	00 00       	nop
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2f c1       	rjmp	.+606    	; 0x2fc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_46>
      bc:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__vector_47>
      c0:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_48>
      c4:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_49>
      c8:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_50>
      cc:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_51>
      d0:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_52>
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	11 c1       	rjmp	.+546    	; 0x2fc <__bad_interrupt>
      da:	00 00       	nop
      dc:	0f c1       	rjmp	.+542    	; 0x2fc <__bad_interrupt>
      de:	00 00       	nop
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b c1       	rjmp	.+534    	; 0x2fc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__vector_58>
      ec:	07 c1       	rjmp	.+526    	; 0x2fc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	05 c1       	rjmp	.+522    	; 0x2fc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	03 c1       	rjmp	.+518    	; 0x2fc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	01 c1       	rjmp	.+514    	; 0x2fc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ff c0       	rjmp	.+510    	; 0x2fc <__bad_interrupt>
      fe:	00 00       	nop
     100:	fd c0       	rjmp	.+506    	; 0x2fc <__bad_interrupt>
     102:	00 00       	nop
     104:	fb c0       	rjmp	.+502    	; 0x2fc <__bad_interrupt>
     106:	00 00       	nop
     108:	f9 c0       	rjmp	.+498    	; 0x2fc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f7 c0       	rjmp	.+494    	; 0x2fc <__bad_interrupt>
     10e:	00 00       	nop
     110:	21 c1       	rjmp	.+578    	; 0x354 <__vector_68>
     112:	00 00       	nop
     114:	65 c1       	rjmp	.+714    	; 0x3e0 <__vector_69>
     116:	00 00       	nop
     118:	a9 c1       	rjmp	.+850    	; 0x46c <__vector_70>
     11a:	00 00       	nop
     11c:	8c c2       	rjmp	.+1304   	; 0x636 <__vector_71>
     11e:	00 00       	nop
     120:	c7 c2       	rjmp	.+1422   	; 0x6b0 <__vector_72>
     122:	00 00       	nop
     124:	02 c3       	rjmp	.+1540   	; 0x72a <__vector_73>
     126:	00 00       	nop
     128:	3d c3       	rjmp	.+1658   	; 0x7a4 <__vector_74>
     12a:	00 00       	nop
     12c:	e7 c0       	rjmp	.+462    	; 0x2fc <__bad_interrupt>
     12e:	00 00       	nop
     130:	e5 c0       	rjmp	.+458    	; 0x2fc <__bad_interrupt>
     132:	00 00       	nop
     134:	a4 c5       	rjmp	.+2888   	; 0xc7e <__vector_77>
     136:	00 00       	nop
     138:	da c5       	rjmp	.+2996   	; 0xcee <__vector_78>
     13a:	00 00       	nop
     13c:	10 c6       	rjmp	.+3104   	; 0xd5e <__vector_79>
     13e:	00 00       	nop
     140:	46 c6       	rjmp	.+3212   	; 0xdce <__vector_80>
     142:	00 00       	nop
     144:	7c c6       	rjmp	.+3320   	; 0xe3e <__vector_81>
     146:	00 00       	nop
     148:	b2 c6       	rjmp	.+3428   	; 0xeae <__vector_82>
     14a:	00 00       	nop
     14c:	e8 c6       	rjmp	.+3536   	; 0xf1e <__vector_83>
     14e:	00 00       	nop
     150:	1e c7       	rjmp	.+3644   	; 0xf8e <__vector_84>
     152:	00 00       	nop
     154:	54 c7       	rjmp	.+3752   	; 0xffe <__vector_85>
     156:	00 00       	nop
     158:	8a c7       	rjmp	.+3860   	; 0x106e <__vector_86>
     15a:	00 00       	nop
     15c:	cf c0       	rjmp	.+414    	; 0x2fc <__bad_interrupt>
     15e:	00 00       	nop
     160:	cd c0       	rjmp	.+410    	; 0x2fc <__bad_interrupt>
     162:	00 00       	nop
     164:	cb c0       	rjmp	.+406    	; 0x2fc <__bad_interrupt>
     166:	00 00       	nop
     168:	c9 c0       	rjmp	.+402    	; 0x2fc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <__vector_91>
     170:	c5 c0       	rjmp	.+394    	; 0x2fc <__bad_interrupt>
     172:	00 00       	nop
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__bad_interrupt>
     176:	00 00       	nop
     178:	c1 c0       	rjmp	.+386    	; 0x2fc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bf c0       	rjmp	.+382    	; 0x2fc <__bad_interrupt>
     17e:	00 00       	nop
     180:	bd c0       	rjmp	.+378    	; 0x2fc <__bad_interrupt>
     182:	00 00       	nop
     184:	bb c0       	rjmp	.+374    	; 0x2fc <__bad_interrupt>
     186:	00 00       	nop
     188:	b9 c0       	rjmp	.+370    	; 0x2fc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b7 c0       	rjmp	.+366    	; 0x2fc <__bad_interrupt>
     18e:	00 00       	nop
     190:	b5 c0       	rjmp	.+362    	; 0x2fc <__bad_interrupt>
     192:	00 00       	nop
     194:	b3 c0       	rjmp	.+358    	; 0x2fc <__bad_interrupt>
     196:	00 00       	nop
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	af c0       	rjmp	.+350    	; 0x2fc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ad c0       	rjmp	.+346    	; 0x2fc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ab c0       	rjmp	.+342    	; 0x2fc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a9 c0       	rjmp	.+338    	; 0x2fc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a7 c0       	rjmp	.+334    	; 0x2fc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a5 c0       	rjmp	.+330    	; 0x2fc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	a3 c0       	rjmp	.+326    	; 0x2fc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	a1 c0       	rjmp	.+322    	; 0x2fc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9f c0       	rjmp	.+318    	; 0x2fc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	9d c0       	rjmp	.+314    	; 0x2fc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	9b c0       	rjmp	.+310    	; 0x2fc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	99 c0       	rjmp	.+306    	; 0x2fc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	97 c0       	rjmp	.+302    	; 0x2fc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	95 c0       	rjmp	.+298    	; 0x2fc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	93 c0       	rjmp	.+294    	; 0x2fc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	91 c0       	rjmp	.+290    	; 0x2fc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8f c0       	rjmp	.+286    	; 0x2fc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8d c0       	rjmp	.+282    	; 0x2fc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8b c0       	rjmp	.+278    	; 0x2fc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	89 c0       	rjmp	.+274    	; 0x2fc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	87 c0       	rjmp	.+270    	; 0x2fc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	83 c0       	rjmp	.+262    	; 0x2fc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	81 c0       	rjmp	.+258    	; 0x2fc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	86 1c       	adc	r8, r6
     1fe:	84 1c       	adc	r8, r4
     200:	82 1c       	adc	r8, r2
     202:	8a 1c       	adc	r8, r10
     204:	80 1c       	adc	r8, r0
     206:	7e 1c       	adc	r7, r14
     208:	8b 1c       	adc	r8, r11
     20a:	8b 1c       	adc	r8, r11
     20c:	8b 1c       	adc	r8, r11
     20e:	8b 1c       	adc	r8, r11
     210:	8b 1c       	adc	r8, r11
     212:	8b 1c       	adc	r8, r11
     214:	8b 1c       	adc	r8, r11
     216:	8b 1c       	adc	r8, r11
     218:	8b 1c       	adc	r8, r11
     21a:	8b 1c       	adc	r8, r11
     21c:	8b 1c       	adc	r8, r11
     21e:	8b 1c       	adc	r8, r11
     220:	88 1c       	adc	r8, r8
     222:	07 63       	ori	r16, 0x37	; 55
     224:	42 36       	cpi	r20, 0x62	; 98
     226:	b7 9b       	sbis	0x16, 7	; 22
     228:	d8 a7       	std	Y+40, r29	; 0x28
     22a:	1a 39       	cpi	r17, 0x9A	; 154
     22c:	68 56       	subi	r22, 0x68	; 104
     22e:	18 ae       	std	Y+56, r1	; 0x38
     230:	ba ab       	std	Y+50, r27	; 0x32
     232:	55 8c       	ldd	r5, Z+29	; 0x1d
     234:	1d 3c       	cpi	r17, 0xCD	; 205
     236:	b7 cc       	rjmp	.-1682   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     238:	57 63       	ori	r21, 0x37	; 55
     23a:	bd 6d       	ori	r27, 0xDD	; 221
     23c:	ed fd       	.word	0xfded	; ????
     23e:	75 3e       	cpi	r23, 0xE5	; 229
     240:	f6 17       	cp	r31, r22
     242:	72 31       	cpi	r23, 0x12	; 18
     244:	bf 00       	.word	0x00bf	; ????
     246:	00 00       	nop
     248:	80 3f       	cpi	r24, 0xF0	; 240
     24a:	08 00       	.word	0x0008	; ????
     24c:	00 00       	nop
     24e:	be 92       	st	-X, r11
     250:	24 49       	sbci	r18, 0x94	; 148
     252:	12 3e       	cpi	r17, 0xE2	; 226
     254:	ab aa       	std	Y+51, r10	; 0x33
     256:	aa 2a       	or	r10, r26
     258:	be cd       	rjmp	.-1156   	; 0xfffffdd6 <__eeprom_end+0xff7efdd6>
     25a:	cc cc       	rjmp	.-1640   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
     25c:	4c 3e       	cpi	r20, 0xEC	; 236
     25e:	00 00       	nop
     260:	00 80       	ld	r0, Z
     262:	be ab       	std	Y+54, r27	; 0x36
     264:	aa aa       	std	Y+50, r10	; 0x32
     266:	aa 3e       	cpi	r26, 0xEA	; 234
     268:	00 00       	nop
     26a:	00 00       	nop
     26c:	bf 00       	.word	0x00bf	; ????
     26e:	00 00       	nop
     270:	80 3f       	cpi	r24, 0xF0	; 240
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 08       	sbc	r0, r0
     278:	41 78       	andi	r20, 0x81	; 129
     27a:	d3 bb       	out	0x13, r29	; 19
     27c:	43 87       	std	Z+11, r20	; 0x0b
     27e:	d1 13       	cpse	r29, r17
     280:	3d 19       	sub	r19, r13
     282:	0e 3c       	cpi	r16, 0xCE	; 206
     284:	c3 bd       	out	0x23, r28	; 35
     286:	42 82       	std	Z+2, r4	; 0x02
     288:	ad 2b       	or	r26, r29
     28a:	3e 68       	ori	r19, 0x8E	; 142
     28c:	ec 82       	std	Y+4, r14	; 0x04
     28e:	76 be       	out	0x36, r7	; 54
     290:	d9 8f       	std	Y+25, r29	; 0x19
     292:	e1 a9       	ldd	r30, Z+49	; 0x31
     294:	3e 4c       	sbci	r19, 0xCE	; 206
     296:	80 ef       	ldi	r24, 0xF0	; 240
     298:	ff be       	out	0x3f, r15	; 63
     29a:	01 c4       	rjmp	.+2050   	; 0xa9e <__vector_19+0x50>
     29c:	ff 7f       	andi	r31, 0xFF	; 255
     29e:	3f 00       	.word	0x003f	; ????
     2a0:	00 00       	nop
	...

000002a4 <__trampolines_end>:
     2a4:	63 64       	ori	r22, 0x43	; 67
     2a6:	69 6e       	ori	r22, 0xE9	; 233
     2a8:	6f 70       	andi	r22, 0x0F	; 15
     2aa:	73 75       	andi	r23, 0x53	; 83
     2ac:	78 58       	subi	r23, 0x88	; 136
     2ae:	5b 00       	.word	0x005b	; ????

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df e3       	ldi	r29, 0x3F	; 63
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60
     2c0:	18 be       	out	0x38, r1	; 56
     2c2:	19 be       	out	0x39, r1	; 57
     2c4:	1a be       	out	0x3a, r1	; 58
     2c6:	1b be       	out	0x3b, r1	; 59

000002c8 <__do_copy_data>:
     2c8:	10 e2       	ldi	r17, 0x20	; 32
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e2       	ldi	r27, 0x20	; 32
     2ce:	e4 eb       	ldi	r30, 0xB4	; 180
     2d0:	fd e5       	ldi	r31, 0x5D	; 93
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0b bf       	out	0x3b, r16	; 59
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x14>
     2d8:	07 90       	elpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	a8 3a       	cpi	r26, 0xA8	; 168
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0x10>
     2e2:	1b be       	out	0x3b, r1	; 59

000002e4 <__do_clear_bss>:
     2e4:	21 e2       	ldi	r18, 0x21	; 33
     2e6:	a8 ea       	ldi	r26, 0xA8	; 168
     2e8:	b0 e2       	ldi	r27, 0x20	; 32
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	ac 3f       	cpi	r26, 0xFC	; 252
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 8c 1c 	call	0x3918	; 0x3918 <main>
     2f8:	0c 94 d8 2e 	jmp	0x5db0	; 0x5db0 <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     308:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <stdio_base>
     30c:	90 91 4c 21 	lds	r25, 0x214C	; 0x80214c <stdio_base+0x1>
     310:	e0 91 47 21 	lds	r30, 0x2147	; 0x802147 <ptr_get>
     314:	f0 91 48 21 	lds	r31, 0x2148	; 0x802148 <ptr_get+0x1>
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	19 95       	eicall
	return c;
     320:	89 81       	ldd	r24, Y+1	; 0x01
}
     322:	08 2e       	mov	r0, r24
     324:	00 0c       	add	r0, r0
     326:	99 0b       	sbc	r25, r25
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     330:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     332:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <stdio_base>
     336:	90 91 4c 21 	lds	r25, 0x214C	; 0x80214c <stdio_base+0x1>
     33a:	e0 91 49 21 	lds	r30, 0x2149	; 0x802149 <ptr_put>
     33e:	f0 91 4a 21 	lds	r31, 0x214A	; 0x80214a <ptr_put+0x1>
     342:	19 95       	eicall
     344:	99 23       	and	r25, r25
     346:	1c f0       	brlt	.+6      	; 0x34e <_write+0x1e>
		return -1;
	}
	return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     352:	08 95       	ret

00000354 <__vector_68>:
		cpu_irq_restore(iflags);
		return;
	}

	cpu_irq_restore(iflags);
}
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	08 b6       	in	r0, 0x38	; 56
     360:	0f 92       	push	r0
     362:	18 be       	out	0x38, r1	; 56
     364:	09 b6       	in	r0, 0x39	; 57
     366:	0f 92       	push	r0
     368:	19 be       	out	0x39, r1	; 57
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	1b be       	out	0x3b, r1	; 59
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
     388:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <ac_aca_callback>
     38c:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <ac_aca_callback+0x1>
     390:	30 97       	sbiw	r30, 0x00	; 0
     392:	79 f0       	breq	.+30     	; 0x3b2 <__vector_68+0x5e>
     394:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <__vector_68+0x54>
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	19 95       	eicall
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__vector_68+0x5e>
     3a8:	40 e8       	ldi	r20, 0x80	; 128
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	19 95       	eicall
     3b2:	ff 91       	pop	r31
     3b4:	ef 91       	pop	r30
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	7f 91       	pop	r23
     3c0:	6f 91       	pop	r22
     3c2:	5f 91       	pop	r21
     3c4:	4f 91       	pop	r20
     3c6:	3f 91       	pop	r19
     3c8:	2f 91       	pop	r18
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	09 be       	out	0x39, r0	; 57
     3d2:	0f 90       	pop	r0
     3d4:	08 be       	out	0x38, r0	; 56
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_69>:
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	08 b6       	in	r0, 0x38	; 56
     3ec:	0f 92       	push	r0
     3ee:	18 be       	out	0x38, r1	; 56
     3f0:	09 b6       	in	r0, 0x39	; 57
     3f2:	0f 92       	push	r0
     3f4:	19 be       	out	0x39, r1	; 57
     3f6:	0b b6       	in	r0, 0x3b	; 59
     3f8:	0f 92       	push	r0
     3fa:	1b be       	out	0x3b, r1	; 59
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
     414:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <ac_aca_callback>
     418:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <ac_aca_callback+0x1>
     41c:	30 97       	sbiw	r30, 0x00	; 0
     41e:	79 f0       	breq	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     420:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     424:	85 ff       	sbrs	r24, 5
     426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 e8       	ldi	r24, 0x80	; 128
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	19 95       	eicall
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e8       	ldi	r24, 0x80	; 128
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	19 95       	eicall
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	09 be       	out	0x39, r0	; 57
     45e:	0f 90       	pop	r0
     460:	08 be       	out	0x38, r0	; 56
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_70>:
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	08 b6       	in	r0, 0x38	; 56
     478:	0f 92       	push	r0
     47a:	18 be       	out	0x38, r1	; 56
     47c:	09 b6       	in	r0, 0x39	; 57
     47e:	0f 92       	push	r0
     480:	19 be       	out	0x39, r1	; 57
     482:	0b b6       	in	r0, 0x3b	; 59
     484:	0f 92       	push	r0
     486:	1b be       	out	0x3b, r1	; 59
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
     4a0:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <ac_aca_callback>
     4a4:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <ac_aca_callback+0x1>
     4a8:	30 97       	sbiw	r30, 0x00	; 0
     4aa:	39 f0       	breq	.+14     	; 0x4ba <__vector_70+0x4e>
     4ac:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     4b0:	40 7c       	andi	r20, 0xC0	; 192
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	80 e8       	ldi	r24, 0x80	; 128
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	19 95       	eicall
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0b be       	out	0x3b, r0	; 59
     4d6:	0f 90       	pop	r0
     4d8:	09 be       	out	0x39, r0	; 57
     4da:	0f 90       	pop	r0
     4dc:	08 be       	out	0x38, r0	; 56
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <ac_write_config>:
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	2f b7       	in	r18, 0x3f	; 63
     500:	29 83       	std	Y+1, r18	; 0x01
     502:	f8 94       	cli
     504:	c9 80       	ldd	r12, Y+1	; 0x01
     506:	80 38       	cpi	r24, 0x80	; 128
     508:	23 e0       	ldi	r18, 0x03	; 3
     50a:	92 07       	cpc	r25, r18
     50c:	d9 f4       	brne	.+54     	; 0x544 <ac_write_config+0x5c>
     50e:	7a 01       	movw	r14, r20
     510:	d6 2e       	mov	r13, r22
     512:	8c 01       	movw	r16, r24
     514:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <__data_end>
     518:	81 11       	cpse	r24, r1
     51a:	04 c0       	rjmp	.+8      	; 0x524 <ac_write_config+0x3c>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <sysclk_enable_module>
     524:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <__data_end>
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <__data_end>
     52e:	f7 01       	movw	r30, r14
     530:	82 81       	ldd	r24, Z+2	; 0x02
     532:	f8 01       	movw	r30, r16
     534:	85 83       	std	Z+5, r24	; 0x05
     536:	f7 01       	movw	r30, r14
     538:	83 81       	ldd	r24, Z+3	; 0x03
     53a:	f8 01       	movw	r30, r16
     53c:	86 83       	std	Z+6, r24	; 0x06
     53e:	dd 20       	and	r13, r13
     540:	19 f0       	breq	.+6      	; 0x548 <ac_write_config+0x60>
     542:	0b c0       	rjmp	.+22     	; 0x55a <ac_write_config+0x72>
     544:	cf be       	out	0x3f, r12	; 63
     546:	1d c0       	rjmp	.+58     	; 0x582 <ac_write_config+0x9a>
     548:	f7 01       	movw	r30, r14
     54a:	81 81       	ldd	r24, Z+1	; 0x01
     54c:	f8 01       	movw	r30, r16
     54e:	82 83       	std	Z+2, r24	; 0x02
     550:	f7 01       	movw	r30, r14
     552:	80 81       	ld	r24, Z
     554:	f8 01       	movw	r30, r16
     556:	80 83       	st	Z, r24
     558:	08 c0       	rjmp	.+16     	; 0x56a <ac_write_config+0x82>
     55a:	f7 01       	movw	r30, r14
     55c:	81 81       	ldd	r24, Z+1	; 0x01
     55e:	f8 01       	movw	r30, r16
     560:	83 83       	std	Z+3, r24	; 0x03
     562:	f7 01       	movw	r30, r14
     564:	80 81       	ld	r24, Z
     566:	f8 01       	movw	r30, r16
     568:	81 83       	std	Z+1, r24	; 0x01
     56a:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <__data_end>
     56e:	81 50       	subi	r24, 0x01	; 1
     570:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <__data_end>
     574:	81 11       	cpse	r24, r1
     576:	04 c0       	rjmp	.+8      	; 0x580 <ac_write_config+0x98>
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <sysclk_disable_module>
     580:	cf be       	out	0x3f, r12	; 63
     582:	0f 90       	pop	r0
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	08 95       	ret

00000596 <ac_enable>:
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	1f 92       	push	r1
     5a4:	1f 92       	push	r1
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	2f b7       	in	r18, 0x3f	; 63
     5ac:	2a 83       	std	Y+2, r18	; 0x02
     5ae:	f8 94       	cli
     5b0:	ea 80       	ldd	r14, Y+2	; 0x02
     5b2:	80 38       	cpi	r24, 0x80	; 128
     5b4:	23 e0       	ldi	r18, 0x03	; 3
     5b6:	92 07       	cpc	r25, r18
     5b8:	09 f5       	brne	.+66     	; 0x5fc <ac_enable+0x66>
     5ba:	f6 2e       	mov	r15, r22
     5bc:	8c 01       	movw	r16, r24
     5be:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <__data_end>
     5c2:	81 11       	cpse	r24, r1
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <ac_enable+0x38>
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <sysclk_enable_module>
     5ce:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <__data_end>
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <__data_end>
     5d8:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <sleepmgr_locks+0x1>
     5dc:	8f 3f       	cpi	r24, 0xFF	; 255
     5de:	09 f4       	brne	.+2      	; 0x5e2 <ac_enable+0x4c>
     5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <ac_enable+0x4a>
     5e2:	8f b7       	in	r24, 0x3f	; 63
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	f8 94       	cli
     5e8:	99 81       	ldd	r25, Y+1	; 0x01
     5ea:	e1 e4       	ldi	r30, 0x41	; 65
     5ec:	f1 e2       	ldi	r31, 0x21	; 33
     5ee:	81 81       	ldd	r24, Z+1	; 0x01
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	81 83       	std	Z+1, r24	; 0x01
     5f4:	9f bf       	out	0x3f, r25	; 63
     5f6:	ff 20       	and	r15, r15
     5f8:	19 f0       	breq	.+6      	; 0x600 <ac_enable+0x6a>
     5fa:	07 c0       	rjmp	.+14     	; 0x60a <ac_enable+0x74>
     5fc:	ef be       	out	0x3f, r14	; 63
     5fe:	0a c0       	rjmp	.+20     	; 0x614 <ac_enable+0x7e>
     600:	f8 01       	movw	r30, r16
     602:	80 81       	ld	r24, Z
     604:	81 60       	ori	r24, 0x01	; 1
     606:	80 83       	st	Z, r24
     608:	04 c0       	rjmp	.+8      	; 0x612 <ac_enable+0x7c>
     60a:	f8 01       	movw	r30, r16
     60c:	81 81       	ldd	r24, Z+1	; 0x01
     60e:	81 60       	ori	r24, 0x01	; 1
     610:	81 83       	std	Z+1, r24	; 0x01
     612:	ef be       	out	0x3f, r14	; 63
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	08 95       	ret

00000626 <ac_set_interrupt_callback>:
 * \param callback Reference to a callback function
 */
void ac_set_interrupt_callback(AC_t *ac, ac_callback_t callback)
{
#ifdef ACA
	if (ac == &ACA) {
     626:	80 38       	cpi	r24, 0x80	; 128
     628:	93 40       	sbci	r25, 0x03	; 3
     62a:	21 f4       	brne	.+8      	; 0x634 <ac_set_interrupt_callback+0xe>
		ac_aca_callback = callback;
     62c:	60 93 a9 20 	sts	0x20A9, r22	; 0x8020a9 <ac_aca_callback>
     630:	70 93 aa 20 	sts	0x20AA, r23	; 0x8020aa <ac_aca_callback+0x1>
     634:	08 95       	ret

00000636 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	08 b6       	in	r0, 0x38	; 56
     642:	0f 92       	push	r0
     644:	18 be       	out	0x38, r1	; 56
     646:	09 b6       	in	r0, 0x39	; 57
     648:	0f 92       	push	r0
     64a:	19 be       	out	0x39, r1	; 57
     64c:	0b b6       	in	r0, 0x3b	; 59
     64e:	0f 92       	push	r0
     650:	1b be       	out	0x3b, r1	; 59
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     66a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     66e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     672:	e0 91 4d 21 	lds	r30, 0x214D	; 0x80214d <adca_callback>
     676:	f0 91 4e 21 	lds	r31, 0x214E	; 0x80214e <adca_callback+0x1>
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	19 95       	eicall
}
     682:	ff 91       	pop	r31
     684:	ef 91       	pop	r30
     686:	bf 91       	pop	r27
     688:	af 91       	pop	r26
     68a:	9f 91       	pop	r25
     68c:	8f 91       	pop	r24
     68e:	7f 91       	pop	r23
     690:	6f 91       	pop	r22
     692:	5f 91       	pop	r21
     694:	4f 91       	pop	r20
     696:	3f 91       	pop	r19
     698:	2f 91       	pop	r18
     69a:	0f 90       	pop	r0
     69c:	0b be       	out	0x3b, r0	; 59
     69e:	0f 90       	pop	r0
     6a0:	09 be       	out	0x39, r0	; 57
     6a2:	0f 90       	pop	r0
     6a4:	08 be       	out	0x38, r0	; 56
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	08 b6       	in	r0, 0x38	; 56
     6bc:	0f 92       	push	r0
     6be:	18 be       	out	0x38, r1	; 56
     6c0:	09 b6       	in	r0, 0x39	; 57
     6c2:	0f 92       	push	r0
     6c4:	19 be       	out	0x39, r1	; 57
     6c6:	0b b6       	in	r0, 0x3b	; 59
     6c8:	0f 92       	push	r0
     6ca:	1b be       	out	0x3b, r1	; 59
     6cc:	2f 93       	push	r18
     6ce:	3f 93       	push	r19
     6d0:	4f 93       	push	r20
     6d2:	5f 93       	push	r21
     6d4:	6f 93       	push	r22
     6d6:	7f 93       	push	r23
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     6e4:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     6e8:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     6ec:	e0 91 4d 21 	lds	r30, 0x214D	; 0x80214d <adca_callback>
     6f0:	f0 91 4e 21 	lds	r31, 0x214E	; 0x80214e <adca_callback+0x1>
     6f4:	62 e0       	ldi	r22, 0x02	; 2
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	19 95       	eicall
}
     6fc:	ff 91       	pop	r31
     6fe:	ef 91       	pop	r30
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	09 be       	out	0x39, r0	; 57
     71c:	0f 90       	pop	r0
     71e:	08 be       	out	0x38, r0	; 56
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	08 b6       	in	r0, 0x38	; 56
     736:	0f 92       	push	r0
     738:	18 be       	out	0x38, r1	; 56
     73a:	09 b6       	in	r0, 0x39	; 57
     73c:	0f 92       	push	r0
     73e:	19 be       	out	0x39, r1	; 57
     740:	0b b6       	in	r0, 0x3b	; 59
     742:	0f 92       	push	r0
     744:	1b be       	out	0x3b, r1	; 59
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     75e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     762:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     766:	e0 91 4d 21 	lds	r30, 0x214D	; 0x80214d <adca_callback>
     76a:	f0 91 4e 21 	lds	r31, 0x214E	; 0x80214e <adca_callback+0x1>
     76e:	64 e0       	ldi	r22, 0x04	; 4
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	19 95       	eicall
}
     776:	ff 91       	pop	r31
     778:	ef 91       	pop	r30
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	7f 91       	pop	r23
     784:	6f 91       	pop	r22
     786:	5f 91       	pop	r21
     788:	4f 91       	pop	r20
     78a:	3f 91       	pop	r19
     78c:	2f 91       	pop	r18
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	09 be       	out	0x39, r0	; 57
     796:	0f 90       	pop	r0
     798:	08 be       	out	0x38, r0	; 56
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	08 b6       	in	r0, 0x38	; 56
     7b0:	0f 92       	push	r0
     7b2:	18 be       	out	0x38, r1	; 56
     7b4:	09 b6       	in	r0, 0x39	; 57
     7b6:	0f 92       	push	r0
     7b8:	19 be       	out	0x39, r1	; 57
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	1b be       	out	0x3b, r1	; 59
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     7d8:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     7dc:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     7e0:	e0 91 4d 21 	lds	r30, 0x214D	; 0x80214d <adca_callback>
     7e4:	f0 91 4e 21 	lds	r31, 0x214E	; 0x80214e <adca_callback+0x1>
     7e8:	68 e0       	ldi	r22, 0x08	; 8
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	19 95       	eicall
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0b be       	out	0x3b, r0	; 59
     80c:	0f 90       	pop	r0
     80e:	09 be       	out	0x39, r0	; 57
     810:	0f 90       	pop	r0
     812:	08 be       	out	0x38, r0	; 56
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	08 b6       	in	r0, 0x38	; 56
     82a:	0f 92       	push	r0
     82c:	18 be       	out	0x38, r1	; 56
     82e:	09 b6       	in	r0, 0x39	; 57
     830:	0f 92       	push	r0
     832:	19 be       	out	0x39, r1	; 57
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	1b be       	out	0x3b, r1	; 59
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     852:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <tc_tcc0_ovf_callback>
     856:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <tc_tcc0_ovf_callback+0x1>
     85a:	30 97       	sbiw	r30, 0x00	; 0
     85c:	09 f0       	breq	.+2      	; 0x860 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     85e:	19 95       	eicall
	}
}
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0b be       	out	0x3b, r0	; 59
     87c:	0f 90       	pop	r0
     87e:	09 be       	out	0x39, r0	; 57
     880:	0f 90       	pop	r0
     882:	08 be       	out	0x38, r0	; 56
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	08 b6       	in	r0, 0x38	; 56
     89a:	0f 92       	push	r0
     89c:	18 be       	out	0x38, r1	; 56
     89e:	09 b6       	in	r0, 0x39	; 57
     8a0:	0f 92       	push	r0
     8a2:	19 be       	out	0x39, r1	; 57
     8a4:	0b b6       	in	r0, 0x3b	; 59
     8a6:	0f 92       	push	r0
     8a8:	1b be       	out	0x3b, r1	; 59
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     8c2:	e0 91 d9 20 	lds	r30, 0x20D9	; 0x8020d9 <tc_tcc0_err_callback>
     8c6:	f0 91 da 20 	lds	r31, 0x20DA	; 0x8020da <tc_tcc0_err_callback+0x1>
     8ca:	30 97       	sbiw	r30, 0x00	; 0
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <__vector_15+0x42>
		tc_tcc0_err_callback();
     8ce:	19 95       	eicall
	}
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	bf 91       	pop	r27
     8d6:	af 91       	pop	r26
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	7f 91       	pop	r23
     8de:	6f 91       	pop	r22
     8e0:	5f 91       	pop	r21
     8e2:	4f 91       	pop	r20
     8e4:	3f 91       	pop	r19
     8e6:	2f 91       	pop	r18
     8e8:	0f 90       	pop	r0
     8ea:	0b be       	out	0x3b, r0	; 59
     8ec:	0f 90       	pop	r0
     8ee:	09 be       	out	0x39, r0	; 57
     8f0:	0f 90       	pop	r0
     8f2:	08 be       	out	0x38, r0	; 56
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	08 b6       	in	r0, 0x38	; 56
     90a:	0f 92       	push	r0
     90c:	18 be       	out	0x38, r1	; 56
     90e:	09 b6       	in	r0, 0x39	; 57
     910:	0f 92       	push	r0
     912:	19 be       	out	0x39, r1	; 57
     914:	0b b6       	in	r0, 0x3b	; 59
     916:	0f 92       	push	r0
     918:	1b be       	out	0x3b, r1	; 59
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     932:	e0 91 d7 20 	lds	r30, 0x20D7	; 0x8020d7 <tc_tcc0_cca_callback>
     936:	f0 91 d8 20 	lds	r31, 0x20D8	; 0x8020d8 <tc_tcc0_cca_callback+0x1>
     93a:	30 97       	sbiw	r30, 0x00	; 0
     93c:	09 f0       	breq	.+2      	; 0x940 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     93e:	19 95       	eicall
	}
}
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0b be       	out	0x3b, r0	; 59
     95c:	0f 90       	pop	r0
     95e:	09 be       	out	0x39, r0	; 57
     960:	0f 90       	pop	r0
     962:	08 be       	out	0x38, r0	; 56
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     96e:	1f 92       	push	r1
     970:	0f 92       	push	r0
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	0f 92       	push	r0
     976:	11 24       	eor	r1, r1
     978:	08 b6       	in	r0, 0x38	; 56
     97a:	0f 92       	push	r0
     97c:	18 be       	out	0x38, r1	; 56
     97e:	09 b6       	in	r0, 0x39	; 57
     980:	0f 92       	push	r0
     982:	19 be       	out	0x39, r1	; 57
     984:	0b b6       	in	r0, 0x3b	; 59
     986:	0f 92       	push	r0
     988:	1b be       	out	0x3b, r1	; 59
     98a:	2f 93       	push	r18
     98c:	3f 93       	push	r19
     98e:	4f 93       	push	r20
     990:	5f 93       	push	r21
     992:	6f 93       	push	r22
     994:	7f 93       	push	r23
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	ef 93       	push	r30
     9a0:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     9a2:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <tc_tcc0_ccb_callback>
     9a6:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <tc_tcc0_ccb_callback+0x1>
     9aa:	30 97       	sbiw	r30, 0x00	; 0
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     9ae:	19 95       	eicall
	}
}
     9b0:	ff 91       	pop	r31
     9b2:	ef 91       	pop	r30
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	0f 90       	pop	r0
     9ca:	0b be       	out	0x3b, r0	; 59
     9cc:	0f 90       	pop	r0
     9ce:	09 be       	out	0x39, r0	; 57
     9d0:	0f 90       	pop	r0
     9d2:	08 be       	out	0x38, r0	; 56
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	08 b6       	in	r0, 0x38	; 56
     9ea:	0f 92       	push	r0
     9ec:	18 be       	out	0x38, r1	; 56
     9ee:	09 b6       	in	r0, 0x39	; 57
     9f0:	0f 92       	push	r0
     9f2:	19 be       	out	0x39, r1	; 57
     9f4:	0b b6       	in	r0, 0x3b	; 59
     9f6:	0f 92       	push	r0
     9f8:	1b be       	out	0x3b, r1	; 59
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     a12:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <tc_tcc0_ccc_callback>
     a16:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <tc_tcc0_ccc_callback+0x1>
     a1a:	30 97       	sbiw	r30, 0x00	; 0
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     a1e:	19 95       	eicall
	}
}
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0b be       	out	0x3b, r0	; 59
     a3c:	0f 90       	pop	r0
     a3e:	09 be       	out	0x39, r0	; 57
     a40:	0f 90       	pop	r0
     a42:	08 be       	out	0x38, r0	; 56
     a44:	0f 90       	pop	r0
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	08 b6       	in	r0, 0x38	; 56
     a5a:	0f 92       	push	r0
     a5c:	18 be       	out	0x38, r1	; 56
     a5e:	09 b6       	in	r0, 0x39	; 57
     a60:	0f 92       	push	r0
     a62:	19 be       	out	0x39, r1	; 57
     a64:	0b b6       	in	r0, 0x3b	; 59
     a66:	0f 92       	push	r0
     a68:	1b be       	out	0x3b, r1	; 59
     a6a:	2f 93       	push	r18
     a6c:	3f 93       	push	r19
     a6e:	4f 93       	push	r20
     a70:	5f 93       	push	r21
     a72:	6f 93       	push	r22
     a74:	7f 93       	push	r23
     a76:	8f 93       	push	r24
     a78:	9f 93       	push	r25
     a7a:	af 93       	push	r26
     a7c:	bf 93       	push	r27
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     a82:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <tc_tcc0_ccd_callback>
     a86:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <tc_tcc0_ccd_callback+0x1>
     a8a:	30 97       	sbiw	r30, 0x00	; 0
     a8c:	09 f0       	breq	.+2      	; 0xa90 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     a8e:	19 95       	eicall
	}
}
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	bf 91       	pop	r27
     a96:	af 91       	pop	r26
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	7f 91       	pop	r23
     a9e:	6f 91       	pop	r22
     aa0:	5f 91       	pop	r21
     aa2:	4f 91       	pop	r20
     aa4:	3f 91       	pop	r19
     aa6:	2f 91       	pop	r18
     aa8:	0f 90       	pop	r0
     aaa:	0b be       	out	0x3b, r0	; 59
     aac:	0f 90       	pop	r0
     aae:	09 be       	out	0x39, r0	; 57
     ab0:	0f 90       	pop	r0
     ab2:	08 be       	out	0x38, r0	; 56
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	08 b6       	in	r0, 0x38	; 56
     aca:	0f 92       	push	r0
     acc:	18 be       	out	0x38, r1	; 56
     ace:	09 b6       	in	r0, 0x39	; 57
     ad0:	0f 92       	push	r0
     ad2:	19 be       	out	0x39, r1	; 57
     ad4:	0b b6       	in	r0, 0x3b	; 59
     ad6:	0f 92       	push	r0
     ad8:	1b be       	out	0x3b, r1	; 59
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     af2:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <tc_tcc1_ovf_callback>
     af6:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <tc_tcc1_ovf_callback+0x1>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     afe:	19 95       	eicall
	}
}
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	bf 91       	pop	r27
     b06:	af 91       	pop	r26
     b08:	9f 91       	pop	r25
     b0a:	8f 91       	pop	r24
     b0c:	7f 91       	pop	r23
     b0e:	6f 91       	pop	r22
     b10:	5f 91       	pop	r21
     b12:	4f 91       	pop	r20
     b14:	3f 91       	pop	r19
     b16:	2f 91       	pop	r18
     b18:	0f 90       	pop	r0
     b1a:	0b be       	out	0x3b, r0	; 59
     b1c:	0f 90       	pop	r0
     b1e:	09 be       	out	0x39, r0	; 57
     b20:	0f 90       	pop	r0
     b22:	08 be       	out	0x38, r0	; 56
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	08 b6       	in	r0, 0x38	; 56
     b3a:	0f 92       	push	r0
     b3c:	18 be       	out	0x38, r1	; 56
     b3e:	09 b6       	in	r0, 0x39	; 57
     b40:	0f 92       	push	r0
     b42:	19 be       	out	0x39, r1	; 57
     b44:	0b b6       	in	r0, 0x3b	; 59
     b46:	0f 92       	push	r0
     b48:	1b be       	out	0x3b, r1	; 59
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     b62:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <tc_tcc1_err_callback>
     b66:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <tc_tcc1_err_callback+0x1>
     b6a:	30 97       	sbiw	r30, 0x00	; 0
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__vector_21+0x42>
		tc_tcc1_err_callback();
     b6e:	19 95       	eicall
	}
}
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	0f 90       	pop	r0
     b8a:	0b be       	out	0x3b, r0	; 59
     b8c:	0f 90       	pop	r0
     b8e:	09 be       	out	0x39, r0	; 57
     b90:	0f 90       	pop	r0
     b92:	08 be       	out	0x38, r0	; 56
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	08 b6       	in	r0, 0x38	; 56
     baa:	0f 92       	push	r0
     bac:	18 be       	out	0x38, r1	; 56
     bae:	09 b6       	in	r0, 0x39	; 57
     bb0:	0f 92       	push	r0
     bb2:	19 be       	out	0x39, r1	; 57
     bb4:	0b b6       	in	r0, 0x3b	; 59
     bb6:	0f 92       	push	r0
     bb8:	1b be       	out	0x3b, r1	; 59
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     bd2:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <tc_tcc1_cca_callback>
     bd6:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <tc_tcc1_cca_callback+0x1>
     bda:	30 97       	sbiw	r30, 0x00	; 0
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     bde:	19 95       	eicall
	}
}
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0b be       	out	0x3b, r0	; 59
     bfc:	0f 90       	pop	r0
     bfe:	09 be       	out	0x39, r0	; 57
     c00:	0f 90       	pop	r0
     c02:	08 be       	out	0x38, r0	; 56
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	08 b6       	in	r0, 0x38	; 56
     c1a:	0f 92       	push	r0
     c1c:	18 be       	out	0x38, r1	; 56
     c1e:	09 b6       	in	r0, 0x39	; 57
     c20:	0f 92       	push	r0
     c22:	19 be       	out	0x39, r1	; 57
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	1b be       	out	0x3b, r1	; 59
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     c42:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <tc_tcc1_ccb_callback>
     c46:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <tc_tcc1_ccb_callback+0x1>
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     c4e:	19 95       	eicall
	}
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	09 be       	out	0x39, r0	; 57
     c70:	0f 90       	pop	r0
     c72:	08 be       	out	0x38, r0	; 56
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	08 b6       	in	r0, 0x38	; 56
     c8a:	0f 92       	push	r0
     c8c:	18 be       	out	0x38, r1	; 56
     c8e:	09 b6       	in	r0, 0x39	; 57
     c90:	0f 92       	push	r0
     c92:	19 be       	out	0x39, r1	; 57
     c94:	0b b6       	in	r0, 0x3b	; 59
     c96:	0f 92       	push	r0
     c98:	1b be       	out	0x3b, r1	; 59
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     cb2:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <tc_tcd0_ovf_callback>
     cb6:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <tc_tcd0_ovf_callback+0x1>
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     cbe:	19 95       	eicall
	}
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	09 be       	out	0x39, r0	; 57
     ce0:	0f 90       	pop	r0
     ce2:	08 be       	out	0x38, r0	; 56
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	08 b6       	in	r0, 0x38	; 56
     cfa:	0f 92       	push	r0
     cfc:	18 be       	out	0x38, r1	; 56
     cfe:	09 b6       	in	r0, 0x39	; 57
     d00:	0f 92       	push	r0
     d02:	19 be       	out	0x39, r1	; 57
     d04:	0b b6       	in	r0, 0x3b	; 59
     d06:	0f 92       	push	r0
     d08:	1b be       	out	0x3b, r1	; 59
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     d22:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <tc_tcd0_err_callback>
     d26:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <tc_tcd0_err_callback+0x1>
     d2a:	30 97       	sbiw	r30, 0x00	; 0
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_78+0x42>
		tc_tcd0_err_callback();
     d2e:	19 95       	eicall
	}
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	09 be       	out	0x39, r0	; 57
     d50:	0f 90       	pop	r0
     d52:	08 be       	out	0x38, r0	; 56
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	08 b6       	in	r0, 0x38	; 56
     d6a:	0f 92       	push	r0
     d6c:	18 be       	out	0x38, r1	; 56
     d6e:	09 b6       	in	r0, 0x39	; 57
     d70:	0f 92       	push	r0
     d72:	19 be       	out	0x39, r1	; 57
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	1b be       	out	0x3b, r1	; 59
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     d92:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <tc_tcd0_cca_callback>
     d96:	f0 91 c4 20 	lds	r31, 0x20C4	; 0x8020c4 <tc_tcd0_cca_callback+0x1>
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     d9e:	19 95       	eicall
	}
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	09 be       	out	0x39, r0	; 57
     dc0:	0f 90       	pop	r0
     dc2:	08 be       	out	0x38, r0	; 56
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	08 b6       	in	r0, 0x38	; 56
     dda:	0f 92       	push	r0
     ddc:	18 be       	out	0x38, r1	; 56
     dde:	09 b6       	in	r0, 0x39	; 57
     de0:	0f 92       	push	r0
     de2:	19 be       	out	0x39, r1	; 57
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	1b be       	out	0x3b, r1	; 59
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e02:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <tc_tcd0_ccb_callback>
     e06:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <tc_tcd0_ccb_callback+0x1>
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     e0e:	19 95       	eicall
	}
}
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	09 be       	out	0x39, r0	; 57
     e30:	0f 90       	pop	r0
     e32:	08 be       	out	0x38, r0	; 56
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	08 b6       	in	r0, 0x38	; 56
     e4a:	0f 92       	push	r0
     e4c:	18 be       	out	0x38, r1	; 56
     e4e:	09 b6       	in	r0, 0x39	; 57
     e50:	0f 92       	push	r0
     e52:	19 be       	out	0x39, r1	; 57
     e54:	0b b6       	in	r0, 0x3b	; 59
     e56:	0f 92       	push	r0
     e58:	1b be       	out	0x3b, r1	; 59
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     e72:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <tc_tcd0_ccc_callback>
     e76:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <tc_tcd0_ccc_callback+0x1>
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     e7e:	19 95       	eicall
	}
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	09 be       	out	0x39, r0	; 57
     ea0:	0f 90       	pop	r0
     ea2:	08 be       	out	0x38, r0	; 56
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	08 b6       	in	r0, 0x38	; 56
     eba:	0f 92       	push	r0
     ebc:	18 be       	out	0x38, r1	; 56
     ebe:	09 b6       	in	r0, 0x39	; 57
     ec0:	0f 92       	push	r0
     ec2:	19 be       	out	0x39, r1	; 57
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	1b be       	out	0x3b, r1	; 59
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     ee2:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <tc_tcd0_ccd_callback>
     ee6:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <tc_tcd0_ccd_callback+0x1>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     eee:	19 95       	eicall
	}
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	09 be       	out	0x39, r0	; 57
     f10:	0f 90       	pop	r0
     f12:	08 be       	out	0x38, r0	; 56
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	08 b6       	in	r0, 0x38	; 56
     f2a:	0f 92       	push	r0
     f2c:	18 be       	out	0x38, r1	; 56
     f2e:	09 b6       	in	r0, 0x39	; 57
     f30:	0f 92       	push	r0
     f32:	19 be       	out	0x39, r1	; 57
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	1b be       	out	0x3b, r1	; 59
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     f52:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <tc_tcd1_ovf_callback>
     f56:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <tc_tcd1_ovf_callback+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     f5e:	19 95       	eicall
	}
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	09 be       	out	0x39, r0	; 57
     f80:	0f 90       	pop	r0
     f82:	08 be       	out	0x38, r0	; 56
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	08 b6       	in	r0, 0x38	; 56
     f9a:	0f 92       	push	r0
     f9c:	18 be       	out	0x38, r1	; 56
     f9e:	09 b6       	in	r0, 0x39	; 57
     fa0:	0f 92       	push	r0
     fa2:	19 be       	out	0x39, r1	; 57
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	1b be       	out	0x3b, r1	; 59
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     fc2:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <tc_tcd1_err_callback>
     fc6:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <tc_tcd1_err_callback+0x1>
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__vector_84+0x42>
		tc_tcd1_err_callback();
     fce:	19 95       	eicall
	}
}
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	09 be       	out	0x39, r0	; 57
     ff0:	0f 90       	pop	r0
     ff2:	08 be       	out	0x38, r0	; 56
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	08 b6       	in	r0, 0x38	; 56
    100a:	0f 92       	push	r0
    100c:	18 be       	out	0x38, r1	; 56
    100e:	09 b6       	in	r0, 0x39	; 57
    1010:	0f 92       	push	r0
    1012:	19 be       	out	0x39, r1	; 57
    1014:	0b b6       	in	r0, 0x3b	; 59
    1016:	0f 92       	push	r0
    1018:	1b be       	out	0x3b, r1	; 59
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1032:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <tc_tcd1_cca_callback>
    1036:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <tc_tcd1_cca_callback+0x1>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    103e:	19 95       	eicall
	}
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0b be       	out	0x3b, r0	; 59
    105c:	0f 90       	pop	r0
    105e:	09 be       	out	0x39, r0	; 57
    1060:	0f 90       	pop	r0
    1062:	08 be       	out	0x38, r0	; 56
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	08 b6       	in	r0, 0x38	; 56
    107a:	0f 92       	push	r0
    107c:	18 be       	out	0x38, r1	; 56
    107e:	09 b6       	in	r0, 0x39	; 57
    1080:	0f 92       	push	r0
    1082:	19 be       	out	0x39, r1	; 57
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	1b be       	out	0x3b, r1	; 59
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    10a2:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <tc_tcd1_ccb_callback>
    10a6:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <tc_tcd1_ccb_callback+0x1>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    10ae:	19 95       	eicall
	}
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	09 be       	out	0x39, r0	; 57
    10d0:	0f 90       	pop	r0
    10d2:	08 be       	out	0x38, r0	; 56
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	08 b6       	in	r0, 0x38	; 56
    10ea:	0f 92       	push	r0
    10ec:	18 be       	out	0x38, r1	; 56
    10ee:	09 b6       	in	r0, 0x39	; 57
    10f0:	0f 92       	push	r0
    10f2:	19 be       	out	0x39, r1	; 57
    10f4:	0b b6       	in	r0, 0x3b	; 59
    10f6:	0f 92       	push	r0
    10f8:	1b be       	out	0x3b, r1	; 59
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1112:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <tc_tce0_err_callback>
    1116:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <tc_tce0_err_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_48+0x42>
		tc_tce0_err_callback();
    111e:	19 95       	eicall
	}
}
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	09 be       	out	0x39, r0	; 57
    1140:	0f 90       	pop	r0
    1142:	08 be       	out	0x38, r0	; 56
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	08 b6       	in	r0, 0x38	; 56
    115a:	0f 92       	push	r0
    115c:	18 be       	out	0x38, r1	; 56
    115e:	09 b6       	in	r0, 0x39	; 57
    1160:	0f 92       	push	r0
    1162:	19 be       	out	0x39, r1	; 57
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	1b be       	out	0x3b, r1	; 59
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1182:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <tc_tce0_cca_callback>
    1186:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <tc_tce0_cca_callback+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_49+0x42>
		tc_tce0_cca_callback();
    118e:	19 95       	eicall
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    11f2:	e0 91 af 20 	lds	r30, 0x20AF	; 0x8020af <tc_tce0_ccb_callback>
    11f6:	f0 91 b0 20 	lds	r31, 0x20B0	; 0x8020b0 <tc_tce0_ccb_callback+0x1>
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    11fe:	19 95       	eicall
	}
}
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0b be       	out	0x3b, r0	; 59
    121c:	0f 90       	pop	r0
    121e:	09 be       	out	0x39, r0	; 57
    1220:	0f 90       	pop	r0
    1222:	08 be       	out	0x38, r0	; 56
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	08 b6       	in	r0, 0x38	; 56
    123a:	0f 92       	push	r0
    123c:	18 be       	out	0x38, r1	; 56
    123e:	09 b6       	in	r0, 0x39	; 57
    1240:	0f 92       	push	r0
    1242:	19 be       	out	0x39, r1	; 57
    1244:	0b b6       	in	r0, 0x3b	; 59
    1246:	0f 92       	push	r0
    1248:	1b be       	out	0x3b, r1	; 59
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1262:	e0 91 ad 20 	lds	r30, 0x20AD	; 0x8020ad <tc_tce0_ccc_callback>
    1266:	f0 91 ae 20 	lds	r31, 0x20AE	; 0x8020ae <tc_tce0_ccc_callback+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    126e:	19 95       	eicall
	}
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	09 be       	out	0x39, r0	; 57
    1290:	0f 90       	pop	r0
    1292:	08 be       	out	0x38, r0	; 56
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	08 b6       	in	r0, 0x38	; 56
    12aa:	0f 92       	push	r0
    12ac:	18 be       	out	0x38, r1	; 56
    12ae:	09 b6       	in	r0, 0x39	; 57
    12b0:	0f 92       	push	r0
    12b2:	19 be       	out	0x39, r1	; 57
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	1b be       	out	0x3b, r1	; 59
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    12d2:	e0 91 ab 20 	lds	r30, 0x20AB	; 0x8020ab <tc_tce0_ccd_callback>
    12d6:	f0 91 ac 20 	lds	r31, 0x20AC	; 0x8020ac <tc_tce0_ccd_callback+0x1>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    12de:	19 95       	eicall
	}
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0b be       	out	0x3b, r0	; 59
    12fc:	0f 90       	pop	r0
    12fe:	09 be       	out	0x39, r0	; 57
    1300:	0f 90       	pop	r0
    1302:	08 be       	out	0x38, r0	; 56
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1312:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <transfer>
    1316:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <transfer+0x1>
    131a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    131c:	83 ff       	sbrs	r24, 3
    131e:	08 c0       	rjmp	.+16     	; 0x1330 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1320:	88 60       	ori	r24, 0x08	; 8
    1322:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1328:	86 ef       	ldi	r24, 0xF6	; 246
    132a:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <transfer+0xa>
    132e:	83 c0       	rjmp	.+262    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1330:	98 2f       	mov	r25, r24
    1332:	94 71       	andi	r25, 0x14	; 20
    1334:	31 f0       	breq	.+12     	; 0x1342 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <transfer+0xa>
    1340:	7a c0       	rjmp	.+244    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1342:	86 ff       	sbrs	r24, 6
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1346:	cd ed       	ldi	r28, 0xDD	; 221
    1348:	d0 e2       	ldi	r29, 0x20	; 32
    134a:	aa 81       	ldd	r26, Y+2	; 0x02
    134c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	14 96       	adiw	r26, 0x04	; 4
    1354:	2d 91       	ld	r18, X+
    1356:	3c 91       	ld	r19, X
    1358:	15 97       	sbiw	r26, 0x05	; 5
    135a:	82 17       	cp	r24, r18
    135c:	93 07       	cpc	r25, r19
    135e:	6c f4       	brge	.+26     	; 0x137a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1360:	9c 01       	movw	r18, r24
    1362:	2f 5f       	subi	r18, 0xFF	; 255
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	20 93 e1 20 	sts	0x20E1, r18	; 0x8020e1 <transfer+0x4>
    136a:	30 93 e2 20 	sts	0x20E2, r19	; 0x8020e2 <transfer+0x5>
    136e:	a8 0f       	add	r26, r24
    1370:	b9 1f       	adc	r27, r25
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	8c 91       	ld	r24, X
    1376:	87 83       	std	Z+7, r24	; 0x07
    1378:	5e c0       	rjmp	.+188    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    137a:	80 91 e3 20 	lds	r24, 0x20E3	; 0x8020e3 <transfer+0x6>
    137e:	90 91 e4 20 	lds	r25, 0x20E4	; 0x8020e4 <transfer+0x7>
    1382:	18 96       	adiw	r26, 0x08	; 8
    1384:	2d 91       	ld	r18, X+
    1386:	3c 91       	ld	r19, X
    1388:	19 97       	sbiw	r26, 0x09	; 9
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	c8 f4       	brcc	.+50     	; 0x13c2 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1390:	20 91 e5 20 	lds	r18, 0x20E5	; 0x8020e5 <transfer+0x8>
    1394:	22 23       	and	r18, r18
    1396:	21 f0       	breq	.+8      	; 0x13a0 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1398:	86 81       	ldd	r24, Z+6	; 0x06
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	86 83       	std	Z+6, r24	; 0x06
    139e:	4b c0       	rjmp	.+150    	; 0x1436 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2d 91       	ld	r18, X+
    13a4:	3c 91       	ld	r19, X
    13a6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    13a8:	ac 01       	movw	r20, r24
    13aa:	4f 5f       	subi	r20, 0xFF	; 255
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	40 93 e3 20 	sts	0x20E3, r20	; 0x8020e3 <transfer+0x6>
    13b2:	50 93 e4 20 	sts	0x20E4, r21	; 0x8020e4 <transfer+0x7>
    13b6:	d9 01       	movw	r26, r18
    13b8:	a8 0f       	add	r26, r24
    13ba:	b9 1f       	adc	r27, r25
    13bc:	8c 91       	ld	r24, X
    13be:	87 83       	std	Z+7, r24	; 0x07
    13c0:	3a c0       	rjmp	.+116    	; 0x1436 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    13c6:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <transfer+0xa>
    13ca:	35 c0       	rjmp	.+106    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    13cc:	88 23       	and	r24, r24
    13ce:	84 f5       	brge	.+96     	; 0x1430 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    13d0:	ad ed       	ldi	r26, 0xDD	; 221
    13d2:	b0 e2       	ldi	r27, 0x20	; 32
    13d4:	12 96       	adiw	r26, 0x02	; 2
    13d6:	cd 91       	ld	r28, X+
    13d8:	dc 91       	ld	r29, X
    13da:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    13dc:	16 96       	adiw	r26, 0x06	; 6
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	17 97       	sbiw	r26, 0x07	; 7
    13e4:	28 85       	ldd	r18, Y+8	; 0x08
    13e6:	39 85       	ldd	r19, Y+9	; 0x09
    13e8:	82 17       	cp	r24, r18
    13ea:	93 07       	cpc	r25, r19
    13ec:	d8 f4       	brcc	.+54     	; 0x1424 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    13ee:	6e 81       	ldd	r22, Y+6	; 0x06
    13f0:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    13f2:	9c 01       	movw	r18, r24
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	20 93 e3 20 	sts	0x20E3, r18	; 0x8020e3 <transfer+0x6>
    13fc:	30 93 e4 20 	sts	0x20E4, r19	; 0x8020e4 <transfer+0x7>
    1400:	47 81       	ldd	r20, Z+7	; 0x07
    1402:	db 01       	movw	r26, r22
    1404:	a8 0f       	add	r26, r24
    1406:	b9 1f       	adc	r27, r25
    1408:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    140a:	88 85       	ldd	r24, Y+8	; 0x08
    140c:	99 85       	ldd	r25, Y+9	; 0x09
    140e:	28 17       	cp	r18, r24
    1410:	39 07       	cpc	r19, r25
    1412:	18 f4       	brcc	.+6      	; 0x141a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	83 83       	std	Z+3, r24	; 0x03
    1418:	0e c0       	rjmp	.+28     	; 0x1436 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    141a:	87 e0       	ldi	r24, 0x07	; 7
    141c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    141e:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <transfer+0xa>
    1422:	09 c0       	rjmp	.+18     	; 0x1436 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1428:	89 ef       	ldi	r24, 0xF9	; 249
    142a:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <transfer+0xa>
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1430:	8b ef       	ldi	r24, 0xFB	; 251
    1432:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <transfer+0xa>
	}
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	08 b6       	in	r0, 0x38	; 56
    1448:	0f 92       	push	r0
    144a:	18 be       	out	0x38, r1	; 56
    144c:	09 b6       	in	r0, 0x39	; 57
    144e:	0f 92       	push	r0
    1450:	19 be       	out	0x39, r1	; 57
    1452:	0b b6       	in	r0, 0x3b	; 59
    1454:	0f 92       	push	r0
    1456:	1b be       	out	0x3b, r1	; 59
    1458:	2f 93       	push	r18
    145a:	3f 93       	push	r19
    145c:	4f 93       	push	r20
    145e:	5f 93       	push	r21
    1460:	6f 93       	push	r22
    1462:	7f 93       	push	r23
    1464:	8f 93       	push	r24
    1466:	9f 93       	push	r25
    1468:	af 93       	push	r26
    146a:	bf 93       	push	r27
    146c:	ef 93       	push	r30
    146e:	ff 93       	push	r31
    1470:	4e df       	rcall	.-356    	; 0x130e <twim_interrupt_handler>
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0b be       	out	0x3b, r0	; 59
    148e:	0f 90       	pop	r0
    1490:	09 be       	out	0x39, r0	; 57
    1492:	0f 90       	pop	r0
    1494:	08 be       	out	0x38, r0	; 56
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	08 b6       	in	r0, 0x38	; 56
    14ac:	0f 92       	push	r0
    14ae:	18 be       	out	0x38, r1	; 56
    14b0:	09 b6       	in	r0, 0x39	; 57
    14b2:	0f 92       	push	r0
    14b4:	19 be       	out	0x39, r1	; 57
    14b6:	0b b6       	in	r0, 0x3b	; 59
    14b8:	0f 92       	push	r0
    14ba:	1b be       	out	0x3b, r1	; 59
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
    14d4:	1c df       	rcall	.-456    	; 0x130e <twim_interrupt_handler>
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0b be       	out	0x3b, r0	; 59
    14f2:	0f 90       	pop	r0
    14f4:	09 be       	out	0x39, r0	; 57
    14f6:	0f 90       	pop	r0
    14f8:	08 be       	out	0x38, r0	; 56
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1504:	fc 01       	movw	r30, r24
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	95 ff       	sbrs	r25, 5
    150a:	fd cf       	rjmp	.-6      	; 0x1506 <usart_putchar+0x2>
    150c:	60 83       	st	Z, r22
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	08 95       	ret

00001514 <usart_getchar>:
    1514:	fc 01       	movw	r30, r24
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	99 23       	and	r25, r25
    151a:	ec f7       	brge	.-6      	; 0x1516 <usart_getchar+0x2>
    151c:	80 81       	ld	r24, Z
    151e:	08 95       	ret

00001520 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1520:	4f 92       	push	r4
    1522:	5f 92       	push	r5
    1524:	6f 92       	push	r6
    1526:	7f 92       	push	r7
    1528:	8f 92       	push	r8
    152a:	9f 92       	push	r9
    152c:	af 92       	push	r10
    152e:	bf 92       	push	r11
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	7c 01       	movw	r14, r24
    153c:	4a 01       	movw	r8, r20
    153e:	5b 01       	movw	r10, r22
    1540:	28 01       	movw	r4, r16
    1542:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1544:	fc 01       	movw	r30, r24
    1546:	84 81       	ldd	r24, Z+4	; 0x04
    1548:	82 ff       	sbrs	r24, 2
    154a:	16 c0       	rjmp	.+44     	; 0x1578 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    154c:	d9 01       	movw	r26, r18
    154e:	c8 01       	movw	r24, r16
    1550:	68 94       	set
    1552:	12 f8       	bld	r1, 2
    1554:	b6 95       	lsr	r27
    1556:	a7 95       	ror	r26
    1558:	97 95       	ror	r25
    155a:	87 95       	ror	r24
    155c:	16 94       	lsr	r1
    155e:	d1 f7       	brne	.-12     	; 0x1554 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1560:	b9 01       	movw	r22, r18
    1562:	a8 01       	movw	r20, r16
    1564:	03 2e       	mov	r0, r19
    1566:	36 e1       	ldi	r19, 0x16	; 22
    1568:	76 95       	lsr	r23
    156a:	67 95       	ror	r22
    156c:	57 95       	ror	r21
    156e:	47 95       	ror	r20
    1570:	3a 95       	dec	r19
    1572:	d1 f7       	brne	.-12     	; 0x1568 <usart_set_baudrate+0x48>
    1574:	30 2d       	mov	r19, r0
    1576:	15 c0       	rjmp	.+42     	; 0x15a2 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1578:	d9 01       	movw	r26, r18
    157a:	c8 01       	movw	r24, r16
    157c:	68 94       	set
    157e:	13 f8       	bld	r1, 3
    1580:	b6 95       	lsr	r27
    1582:	a7 95       	ror	r26
    1584:	97 95       	ror	r25
    1586:	87 95       	ror	r24
    1588:	16 94       	lsr	r1
    158a:	d1 f7       	brne	.-12     	; 0x1580 <usart_set_baudrate+0x60>
		min_rate /= 2;
    158c:	b9 01       	movw	r22, r18
    158e:	a8 01       	movw	r20, r16
    1590:	03 2e       	mov	r0, r19
    1592:	37 e1       	ldi	r19, 0x17	; 23
    1594:	76 95       	lsr	r23
    1596:	67 95       	ror	r22
    1598:	57 95       	ror	r21
    159a:	47 95       	ror	r20
    159c:	3a 95       	dec	r19
    159e:	d1 f7       	brne	.-12     	; 0x1594 <usart_set_baudrate+0x74>
    15a0:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    15a2:	88 15       	cp	r24, r8
    15a4:	99 05       	cpc	r25, r9
    15a6:	aa 05       	cpc	r26, r10
    15a8:	bb 05       	cpc	r27, r11
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <usart_set_baudrate+0x8e>
    15ac:	a6 c0       	rjmp	.+332    	; 0x16fa <usart_set_baudrate+0x1da>
    15ae:	84 16       	cp	r8, r20
    15b0:	95 06       	cpc	r9, r21
    15b2:	a6 06       	cpc	r10, r22
    15b4:	b7 06       	cpc	r11, r23
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <usart_set_baudrate+0x9a>
    15b8:	a2 c0       	rjmp	.+324    	; 0x16fe <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    15ba:	f7 01       	movw	r30, r14
    15bc:	84 81       	ldd	r24, Z+4	; 0x04
    15be:	82 fd       	sbrc	r24, 2
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <usart_set_baudrate+0xaa>
		baud *= 2;
    15c2:	88 0c       	add	r8, r8
    15c4:	99 1c       	adc	r9, r9
    15c6:	aa 1c       	adc	r10, r10
    15c8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    15ca:	c3 01       	movw	r24, r6
    15cc:	b2 01       	movw	r22, r4
    15ce:	a5 01       	movw	r20, r10
    15d0:	94 01       	movw	r18, r8
    15d2:	0e 94 88 26 	call	0x4d10	; 0x4d10 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    15d6:	2f 3f       	cpi	r18, 0xFF	; 255
    15d8:	31 05       	cpc	r19, r1
    15da:	41 05       	cpc	r20, r1
    15dc:	51 05       	cpc	r21, r1
    15de:	08 f4       	brcc	.+2      	; 0x15e2 <usart_set_baudrate+0xc2>
    15e0:	90 c0       	rjmp	.+288    	; 0x1702 <usart_set_baudrate+0x1e2>
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a0 e0       	ldi	r26, 0x00	; 0
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	c9 ef       	ldi	r28, 0xF9	; 249
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <usart_set_baudrate+0xd8>
    15ee:	28 17       	cp	r18, r24
    15f0:	39 07       	cpc	r19, r25
    15f2:	4a 07       	cpc	r20, r26
    15f4:	5b 07       	cpc	r21, r27
    15f6:	58 f0       	brcs	.+22     	; 0x160e <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	aa 1f       	adc	r26, r26
    15fe:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1600:	cd 3f       	cpi	r28, 0xFD	; 253
    1602:	0c f4       	brge	.+2      	; 0x1606 <usart_set_baudrate+0xe6>
			limit |= 1;
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1608:	c7 30       	cpi	r28, 0x07	; 7
    160a:	89 f7       	brne	.-30     	; 0x15ee <usart_set_baudrate+0xce>
    160c:	4f c0       	rjmp	.+158    	; 0x16ac <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    160e:	cc 23       	and	r28, r28
    1610:	0c f0       	brlt	.+2      	; 0x1614 <usart_set_baudrate+0xf4>
    1612:	4c c0       	rjmp	.+152    	; 0x16ac <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1614:	d5 01       	movw	r26, r10
    1616:	c4 01       	movw	r24, r8
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	aa 1f       	adc	r26, r26
    161e:	bb 1f       	adc	r27, r27
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	aa 1f       	adc	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	48 1a       	sub	r4, r24
    1632:	59 0a       	sbc	r5, r25
    1634:	6a 0a       	sbc	r6, r26
    1636:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1638:	ce 3f       	cpi	r28, 0xFE	; 254
    163a:	f4 f4       	brge	.+60     	; 0x1678 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    163c:	8d ef       	ldi	r24, 0xFD	; 253
    163e:	9f ef       	ldi	r25, 0xFF	; 255
    1640:	8c 1b       	sub	r24, r28
    1642:	91 09       	sbc	r25, r1
    1644:	c7 fd       	sbrc	r28, 7
    1646:	93 95       	inc	r25
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <usart_set_baudrate+0x132>
    164a:	44 0c       	add	r4, r4
    164c:	55 1c       	adc	r5, r5
    164e:	66 1c       	adc	r6, r6
    1650:	77 1c       	adc	r7, r7
    1652:	8a 95       	dec	r24
    1654:	d2 f7       	brpl	.-12     	; 0x164a <usart_set_baudrate+0x12a>
    1656:	d5 01       	movw	r26, r10
    1658:	c4 01       	movw	r24, r8
    165a:	b6 95       	lsr	r27
    165c:	a7 95       	ror	r26
    165e:	97 95       	ror	r25
    1660:	87 95       	ror	r24
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	64 0d       	add	r22, r4
    1668:	75 1d       	adc	r23, r5
    166a:	86 1d       	adc	r24, r6
    166c:	97 1d       	adc	r25, r7
    166e:	a5 01       	movw	r20, r10
    1670:	94 01       	movw	r18, r8
    1672:	0e 94 88 26 	call	0x4d10	; 0x4d10 <__udivmodsi4>
    1676:	37 c0       	rjmp	.+110    	; 0x16e6 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	8c 0f       	add	r24, r28
    167c:	a5 01       	movw	r20, r10
    167e:	94 01       	movw	r18, r8
    1680:	04 c0       	rjmp	.+8      	; 0x168a <usart_set_baudrate+0x16a>
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	44 1f       	adc	r20, r20
    1688:	55 1f       	adc	r21, r21
    168a:	8a 95       	dec	r24
    168c:	d2 f7       	brpl	.-12     	; 0x1682 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    168e:	da 01       	movw	r26, r20
    1690:	c9 01       	movw	r24, r18
    1692:	b6 95       	lsr	r27
    1694:	a7 95       	ror	r26
    1696:	97 95       	ror	r25
    1698:	87 95       	ror	r24
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	64 0d       	add	r22, r4
    16a0:	75 1d       	adc	r23, r5
    16a2:	86 1d       	adc	r24, r6
    16a4:	97 1d       	adc	r25, r7
    16a6:	0e 94 88 26 	call	0x4d10	; 0x4d10 <__udivmodsi4>
    16aa:	1d c0       	rjmp	.+58     	; 0x16e6 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	8c 0f       	add	r24, r28
    16b0:	a5 01       	movw	r20, r10
    16b2:	94 01       	movw	r18, r8
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <usart_set_baudrate+0x19e>
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	44 1f       	adc	r20, r20
    16bc:	55 1f       	adc	r21, r21
    16be:	8a 95       	dec	r24
    16c0:	d2 f7       	brpl	.-12     	; 0x16b6 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    16c2:	da 01       	movw	r26, r20
    16c4:	c9 01       	movw	r24, r18
    16c6:	b6 95       	lsr	r27
    16c8:	a7 95       	ror	r26
    16ca:	97 95       	ror	r25
    16cc:	87 95       	ror	r24
    16ce:	bc 01       	movw	r22, r24
    16d0:	cd 01       	movw	r24, r26
    16d2:	64 0d       	add	r22, r4
    16d4:	75 1d       	adc	r23, r5
    16d6:	86 1d       	adc	r24, r6
    16d8:	97 1d       	adc	r25, r7
    16da:	0e 94 88 26 	call	0x4d10	; 0x4d10 <__udivmodsi4>
    16de:	21 50       	subi	r18, 0x01	; 1
    16e0:	31 09       	sbc	r19, r1
    16e2:	41 09       	sbc	r20, r1
    16e4:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    16e6:	83 2f       	mov	r24, r19
    16e8:	8f 70       	andi	r24, 0x0F	; 15
    16ea:	c2 95       	swap	r28
    16ec:	c0 7f       	andi	r28, 0xF0	; 240
    16ee:	c8 2b       	or	r28, r24
    16f0:	f7 01       	movw	r30, r14
    16f2:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    16f4:	26 83       	std	Z+6, r18	; 0x06

	return true;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	18 c0       	rjmp	.+48     	; 0x172a <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	16 c0       	rjmp	.+44     	; 0x172a <usart_set_baudrate+0x20a>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	14 c0       	rjmp	.+40     	; 0x172a <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1702:	d5 01       	movw	r26, r10
    1704:	c4 01       	movw	r24, r8
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	aa 1f       	adc	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	aa 1f       	adc	r26, r26
    1714:	bb 1f       	adc	r27, r27
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	aa 1f       	adc	r26, r26
    171c:	bb 1f       	adc	r27, r27
    171e:	48 1a       	sub	r4, r24
    1720:	59 0a       	sbc	r5, r25
    1722:	6a 0a       	sbc	r6, r26
    1724:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1726:	c9 ef       	ldi	r28, 0xF9	; 249
    1728:	89 cf       	rjmp	.-238    	; 0x163c <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	bf 90       	pop	r11
    1736:	af 90       	pop	r10
    1738:	9f 90       	pop	r9
    173a:	8f 90       	pop	r8
    173c:	7f 90       	pop	r7
    173e:	6f 90       	pop	r6
    1740:	5f 90       	pop	r5
    1742:	4f 90       	pop	r4
    1744:	08 95       	ret

00001746 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	ec 01       	movw	r28, r24
    1750:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	09 f4       	brne	.+2      	; 0x1758 <usart_init_rs232+0x12>
    1756:	be c0       	rjmp	.+380    	; 0x18d4 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1758:	80 3c       	cpi	r24, 0xC0	; 192
    175a:	91 05       	cpc	r25, r1
    175c:	21 f4       	brne	.+8      	; 0x1766 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    175e:	60 e1       	ldi	r22, 0x10	; 16
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	e8 d3       	rcall	.+2000   	; 0x1f34 <sysclk_enable_module>
    1764:	b7 c0       	rjmp	.+366    	; 0x18d4 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1766:	c1 15       	cp	r28, r1
    1768:	84 e0       	ldi	r24, 0x04	; 4
    176a:	d8 07       	cpc	r29, r24
    176c:	21 f4       	brne	.+8      	; 0x1776 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    176e:	64 e0       	ldi	r22, 0x04	; 4
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	e0 d3       	rcall	.+1984   	; 0x1f34 <sysclk_enable_module>
    1774:	af c0       	rjmp	.+350    	; 0x18d4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1776:	c0 38       	cpi	r28, 0x80	; 128
    1778:	e1 e0       	ldi	r30, 0x01	; 1
    177a:	de 07       	cpc	r29, r30
    177c:	21 f4       	brne	.+8      	; 0x1786 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    177e:	62 e0       	ldi	r22, 0x02	; 2
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	d8 d3       	rcall	.+1968   	; 0x1f34 <sysclk_enable_module>
    1784:	a7 c0       	rjmp	.+334    	; 0x18d4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1786:	c1 15       	cp	r28, r1
    1788:	f1 e0       	ldi	r31, 0x01	; 1
    178a:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    178c:	21 f4       	brne	.+8      	; 0x1796 <usart_init_rs232+0x50>
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	d0 d3       	rcall	.+1952   	; 0x1f34 <sysclk_enable_module>
    1794:	9f c0       	rjmp	.+318    	; 0x18d4 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1796:	c0 38       	cpi	r28, 0x80	; 128
    1798:	83 e0       	ldi	r24, 0x03	; 3
    179a:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    179c:	21 f4       	brne	.+8      	; 0x17a6 <usart_init_rs232+0x60>
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	c8 d3       	rcall	.+1936   	; 0x1f34 <sysclk_enable_module>
    17a4:	97 c0       	rjmp	.+302    	; 0x18d4 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    17a6:	c1 15       	cp	r28, r1
    17a8:	e2 e0       	ldi	r30, 0x02	; 2
    17aa:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <usart_init_rs232+0x70>
    17ae:	62 e0       	ldi	r22, 0x02	; 2
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	c0 d3       	rcall	.+1920   	; 0x1f34 <sysclk_enable_module>
    17b4:	8f c0       	rjmp	.+286    	; 0x18d4 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    17b6:	c0 32       	cpi	r28, 0x20	; 32
    17b8:	f3 e0       	ldi	r31, 0x03	; 3
    17ba:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    17bc:	21 f4       	brne	.+8      	; 0x17c6 <usart_init_rs232+0x80>
    17be:	64 e0       	ldi	r22, 0x04	; 4
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	b8 d3       	rcall	.+1904   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    17c4:	87 c0       	rjmp	.+270    	; 0x18d4 <usart_init_rs232+0x18e>
    17c6:	c1 15       	cp	r28, r1
    17c8:	88 e0       	ldi	r24, 0x08	; 8
    17ca:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    17cc:	21 f4       	brne	.+8      	; 0x17d6 <usart_init_rs232+0x90>
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	83 e0       	ldi	r24, 0x03	; 3
    17d2:	b0 d3       	rcall	.+1888   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    17d4:	7f c0       	rjmp	.+254    	; 0x18d4 <usart_init_rs232+0x18e>
    17d6:	c1 15       	cp	r28, r1
    17d8:	e9 e0       	ldi	r30, 0x09	; 9
    17da:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    17dc:	21 f4       	brne	.+8      	; 0x17e6 <usart_init_rs232+0xa0>
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	84 e0       	ldi	r24, 0x04	; 4
    17e2:	a8 d3       	rcall	.+1872   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    17e4:	77 c0       	rjmp	.+238    	; 0x18d4 <usart_init_rs232+0x18e>
    17e6:	c1 15       	cp	r28, r1
    17e8:	fa e0       	ldi	r31, 0x0A	; 10
    17ea:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    17ec:	21 f4       	brne	.+8      	; 0x17f6 <usart_init_rs232+0xb0>
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	85 e0       	ldi	r24, 0x05	; 5
    17f2:	a0 d3       	rcall	.+1856   	; 0x1f34 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    17f4:	6f c0       	rjmp	.+222    	; 0x18d4 <usart_init_rs232+0x18e>
    17f6:	c0 34       	cpi	r28, 0x40	; 64
    17f8:	88 e0       	ldi	r24, 0x08	; 8
    17fa:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    17fc:	21 f4       	brne	.+8      	; 0x1806 <usart_init_rs232+0xc0>
    17fe:	62 e0       	ldi	r22, 0x02	; 2
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	98 d3       	rcall	.+1840   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1804:	67 c0       	rjmp	.+206    	; 0x18d4 <usart_init_rs232+0x18e>
    1806:	c0 34       	cpi	r28, 0x40	; 64
    1808:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    180a:	de 07       	cpc	r29, r30
    180c:	21 f4       	brne	.+8      	; 0x1816 <usart_init_rs232+0xd0>
    180e:	62 e0       	ldi	r22, 0x02	; 2
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	90 d3       	rcall	.+1824   	; 0x1f34 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1814:	5f c0       	rjmp	.+190    	; 0x18d4 <usart_init_rs232+0x18e>
    1816:	c0 39       	cpi	r28, 0x90	; 144
    1818:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    181a:	df 07       	cpc	r29, r31
    181c:	21 f4       	brne	.+8      	; 0x1826 <usart_init_rs232+0xe0>
    181e:	64 e0       	ldi	r22, 0x04	; 4
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	88 d3       	rcall	.+1808   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1824:	57 c0       	rjmp	.+174    	; 0x18d4 <usart_init_rs232+0x18e>
    1826:	c0 39       	cpi	r28, 0x90	; 144
    1828:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    182a:	d8 07       	cpc	r29, r24
    182c:	21 f4       	brne	.+8      	; 0x1836 <usart_init_rs232+0xf0>
    182e:	64 e0       	ldi	r22, 0x04	; 4
    1830:	84 e0       	ldi	r24, 0x04	; 4
    1832:	80 d3       	rcall	.+1792   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1834:	4f c0       	rjmp	.+158    	; 0x18d4 <usart_init_rs232+0x18e>
    1836:	c0 39       	cpi	r28, 0x90	; 144
    1838:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    183a:	de 07       	cpc	r29, r30
    183c:	21 f4       	brne	.+8      	; 0x1846 <usart_init_rs232+0x100>
    183e:	64 e0       	ldi	r22, 0x04	; 4
    1840:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1842:	78 d3       	rcall	.+1776   	; 0x1f34 <sysclk_enable_module>
    1844:	47 c0       	rjmp	.+142    	; 0x18d4 <usart_init_rs232+0x18e>
    1846:	c0 3c       	cpi	r28, 0xC0	; 192
    1848:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    184a:	df 07       	cpc	r29, r31
    184c:	21 f4       	brne	.+8      	; 0x1856 <usart_init_rs232+0x110>
    184e:	68 e0       	ldi	r22, 0x08	; 8
    1850:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1852:	70 d3       	rcall	.+1760   	; 0x1f34 <sysclk_enable_module>
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <usart_init_rs232+0x18e>
    1856:	c0 3c       	cpi	r28, 0xC0	; 192
    1858:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    185a:	d8 07       	cpc	r29, r24
    185c:	21 f4       	brne	.+8      	; 0x1866 <usart_init_rs232+0x120>
    185e:	68 e0       	ldi	r22, 0x08	; 8
    1860:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1862:	68 d3       	rcall	.+1744   	; 0x1f34 <sysclk_enable_module>
    1864:	37 c0       	rjmp	.+110    	; 0x18d4 <usart_init_rs232+0x18e>
    1866:	c0 3a       	cpi	r28, 0xA0	; 160
    1868:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    186a:	de 07       	cpc	r29, r30
    186c:	21 f4       	brne	.+8      	; 0x1876 <usart_init_rs232+0x130>
    186e:	60 e1       	ldi	r22, 0x10	; 16
    1870:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1872:	60 d3       	rcall	.+1728   	; 0x1f34 <sysclk_enable_module>
    1874:	2f c0       	rjmp	.+94     	; 0x18d4 <usart_init_rs232+0x18e>
    1876:	c0 3a       	cpi	r28, 0xA0	; 160
    1878:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    187a:	df 07       	cpc	r29, r31
    187c:	21 f4       	brne	.+8      	; 0x1886 <usart_init_rs232+0x140>
    187e:	60 e1       	ldi	r22, 0x10	; 16
    1880:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1882:	58 d3       	rcall	.+1712   	; 0x1f34 <sysclk_enable_module>
    1884:	27 c0       	rjmp	.+78     	; 0x18d4 <usart_init_rs232+0x18e>
    1886:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1888:	8a e0       	ldi	r24, 0x0A	; 10
    188a:	d8 07       	cpc	r29, r24
    188c:	21 f4       	brne	.+8      	; 0x1896 <usart_init_rs232+0x150>
    188e:	60 e1       	ldi	r22, 0x10	; 16
    1890:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1892:	50 d3       	rcall	.+1696   	; 0x1f34 <sysclk_enable_module>
    1894:	1f c0       	rjmp	.+62     	; 0x18d4 <usart_init_rs232+0x18e>
    1896:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1898:	e8 e0       	ldi	r30, 0x08	; 8
    189a:	de 07       	cpc	r29, r30
    189c:	21 f4       	brne	.+8      	; 0x18a6 <usart_init_rs232+0x160>
    189e:	60 e2       	ldi	r22, 0x20	; 32
    18a0:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    18a2:	48 d3       	rcall	.+1680   	; 0x1f34 <sysclk_enable_module>
    18a4:	17 c0       	rjmp	.+46     	; 0x18d4 <usart_init_rs232+0x18e>
    18a6:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    18a8:	f9 e0       	ldi	r31, 0x09	; 9
    18aa:	df 07       	cpc	r29, r31
    18ac:	21 f4       	brne	.+8      	; 0x18b6 <usart_init_rs232+0x170>
    18ae:	60 e2       	ldi	r22, 0x20	; 32
    18b0:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    18b2:	40 d3       	rcall	.+1664   	; 0x1f34 <sysclk_enable_module>
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <usart_init_rs232+0x18e>
    18b6:	c0 38       	cpi	r28, 0x80	; 128
    18b8:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    18ba:	d8 07       	cpc	r29, r24
    18bc:	21 f4       	brne	.+8      	; 0x18c6 <usart_init_rs232+0x180>
    18be:	60 e4       	ldi	r22, 0x40	; 64
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	38 d3       	rcall	.+1648   	; 0x1f34 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    18c4:	07 c0       	rjmp	.+14     	; 0x18d4 <usart_init_rs232+0x18e>
    18c6:	c0 3a       	cpi	r28, 0xA0	; 160
    18c8:	e4 e0       	ldi	r30, 0x04	; 4
    18ca:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    18cc:	19 f4       	brne	.+6      	; 0x18d4 <usart_init_rs232+0x18e>
    18ce:	60 e4       	ldi	r22, 0x40	; 64
    18d0:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    18d2:	30 d3       	rcall	.+1632   	; 0x1f34 <sysclk_enable_module>
    18d4:	8d 81       	ldd	r24, Y+5	; 0x05
    18d6:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    18d8:	8d 83       	std	Y+5, r24	; 0x05
    18da:	f8 01       	movw	r30, r16
    18dc:	95 81       	ldd	r25, Z+5	; 0x05
    18de:	84 81       	ldd	r24, Z+4	; 0x04
    18e0:	89 2b       	or	r24, r25
    18e2:	96 81       	ldd	r25, Z+6	; 0x06
    18e4:	91 11       	cpse	r25, r1
    18e6:	98 e0       	ldi	r25, 0x08	; 8
    18e8:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	f8 01       	movw	r30, r16
    18ee:	40 81       	ld	r20, Z
    18f0:	51 81       	ldd	r21, Z+1	; 0x01
    18f2:	62 81       	ldd	r22, Z+2	; 0x02
    18f4:	73 81       	ldd	r23, Z+3	; 0x03
    18f6:	00 e0       	ldi	r16, 0x00	; 0
    18f8:	18 e4       	ldi	r17, 0x48	; 72
    18fa:	28 ee       	ldi	r18, 0xE8	; 232
    18fc:	31 e0       	ldi	r19, 0x01	; 1
    18fe:	ce 01       	movw	r24, r28
    1900:	0f de       	rcall	.-994    	; 0x1520 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	98 60       	ori	r25, 0x08	; 8
    1906:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	90 61       	ori	r25, 0x10	; 16
    190c:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	08 95       	ret

00001918 <imu_heading>:
	return bno055_euler.p;
}

double imu_heading()
{
	return bno055_euler.h;
    1918:	60 91 6a 21 	lds	r22, 0x216A	; 0x80216a <bno055_euler>
    191c:	70 91 6b 21 	lds	r23, 0x216B	; 0x80216b <bno055_euler+0x1>
    1920:	80 91 6c 21 	lds	r24, 0x216C	; 0x80216c <bno055_euler+0x2>
    1924:	90 91 6d 21 	lds	r25, 0x216D	; 0x80216d <bno055_euler+0x3>
}
    1928:	08 95       	ret

0000192a <cam_switch>:
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
	cam_switch();
}

void cam_switch(void){
	PORTA.OUT ^= PIN3_bm; // Changes A3 from high to low or vice-versa
    192a:	e0 e0       	ldi	r30, 0x00	; 0
    192c:	f6 e0       	ldi	r31, 0x06	; 6
    192e:	94 81       	ldd	r25, Z+4	; 0x04
    1930:	88 e0       	ldi	r24, 0x08	; 8
    1932:	89 27       	eor	r24, r25
    1934:	84 83       	std	Z+4, r24	; 0x04
    1936:	08 95       	ret

00001938 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
    1938:	e0 e0       	ldi	r30, 0x00	; 0
    193a:	f6 e0       	ldi	r31, 0x06	; 6
    193c:	80 81       	ld	r24, Z
    193e:	88 60       	ori	r24, 0x08	; 8
    1940:	80 83       	st	Z, r24
	cam_switch();
    1942:	f3 cf       	rjmp	.-26     	; 0x192a <cam_switch>
    1944:	08 95       	ret

00001946 <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1950:	62 e0       	ldi	r22, 0x02	; 2
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	ef d2       	rcall	.+1502   	; 0x1f34 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
    1956:	c0 e0       	ldi	r28, 0x00	; 0
    1958:	d2 e0       	ldi	r29, 0x02	; 2
    195a:	ff 24       	eor	r15, r15
    195c:	f3 94       	inc	r15
    195e:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    1960:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    1962:	80 e1       	ldi	r24, 0x10	; 16
    1964:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    1966:	85 e0       	ldi	r24, 0x05	; 5
    1968:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    196a:	61 e2       	ldi	r22, 0x21	; 33
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	0c d3       	rcall	.+1560   	; 0x1f8a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1972:	08 2f       	mov	r16, r24
    1974:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    1976:	10 2f       	mov	r17, r16
    1978:	00 27       	eor	r16, r16
    197a:	60 e2       	ldi	r22, 0x20	; 32
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	04 d3       	rcall	.+1544   	; 0x1f8a <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    1982:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    1984:	0c 87       	std	Y+12, r16	; 0x0c
    1986:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
    1988:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 0	
    198a:	19 a2       	std	Y+33, r1	; 0x21
}
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	08 95       	ret

00001998 <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	27 97       	sbiw	r28, 0x07	; 7
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    19a6:	60 e2       	ldi	r22, 0x20	; 32
    19a8:	84 e0       	ldi	r24, 0x04	; 4
    19aa:	c4 d2       	rcall	.+1416   	; 0x1f34 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
    19ac:	e0 e6       	ldi	r30, 0x60	; 96
    19ae:	f6 e0       	ldi	r31, 0x06	; 6
    19b0:	80 81       	ld	r24, Z
    19b2:	80 68       	ori	r24, 0x80	; 128
    19b4:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    19b6:	e6 e0       	ldi	r30, 0x06	; 6
    19b8:	f0 e2       	ldi	r31, 0x20	; 32
    19ba:	84 81       	ldd	r24, Z+4	; 0x04
    19bc:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    19be:	85 81       	ldd	r24, Z+5	; 0x05
    19c0:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    19c2:	86 81       	ldd	r24, Z+6	; 0x06
    19c4:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	a2 81       	ldd	r26, Z+2	; 0x02
    19cc:	b3 81       	ldd	r27, Z+3	; 0x03
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	ab 83       	std	Y+3, r26	; 0x03
    19d4:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    19d6:	60 e2       	ldi	r22, 0x20	; 32
    19d8:	84 e0       	ldi	r24, 0x04	; 4
    19da:	ac d2       	rcall	.+1368   	; 0x1f34 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    19dc:	be 01       	movw	r22, r28
    19de:	6f 5f       	subi	r22, 0xFF	; 255
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	80 eb       	ldi	r24, 0xB0	; 176
    19e4:	99 e0       	ldi	r25, 0x09	; 9
    19e6:	af de       	rcall	.-674    	; 0x1746 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
    19e8:	27 96       	adiw	r28, 0x07	; 7
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    19f6:	61 50       	subi	r22, 0x01	; 1
    19f8:	71 09       	sbc	r23, r1
    19fa:	81 09       	sbc	r24, r1
    19fc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    19fe:	61 15       	cp	r22, r1
    1a00:	71 05       	cpc	r23, r1
    1a02:	81 05       	cpc	r24, r1
    1a04:	91 05       	cpc	r25, r1
    1a06:	b9 f7       	brne	.-18     	; 0x19f6 <__portable_avr_delay_cycles+0x2>
    1a08:	08 95       	ret

00001a0a <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
    1a0a:	e0 e4       	ldi	r30, 0x40	; 64
    1a0c:	f6 e0       	ldi	r31, 0x06	; 6
    1a0e:	94 81       	ldd	r25, Z+4	; 0x04
    1a10:	80 e1       	ldi	r24, 0x10	; 16
    1a12:	89 27       	eor	r24, r25
    1a14:	84 83       	std	Z+4, r24	; 0x04
    1a16:	08 95       	ret

00001a18 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    1a18:	e0 e4       	ldi	r30, 0x40	; 64
    1a1a:	f6 e0       	ldi	r31, 0x06	; 6
    1a1c:	84 81       	ldd	r24, Z+4	; 0x04
    1a1e:	80 61       	ori	r24, 0x10	; 16
    1a20:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
    1a22:	f3 df       	rcall	.-26     	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
    1a24:	8e e1       	ldi	r24, 0x1E	; 30
    1a26:	b9 d0       	rcall	.+370    	; 0x1b9a <spi_write>
	delay_ms(3);
    1a28:	60 e8       	ldi	r22, 0x80	; 128
    1a2a:	7e e3       	ldi	r23, 0x3E	; 62
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    1a30:	e1 df       	rcall	.-62     	; 0x19f4 <__portable_avr_delay_cycles>
    1a32:	eb df       	rcall	.-42     	; 0x1a0a <flip_ms5607>
	delay_ms(2);
    1a34:	6b ea       	ldi	r22, 0xAB	; 171
    1a36:	79 e2       	ldi	r23, 0x29	; 41
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	db cf       	rjmp	.-74     	; 0x19f4 <__portable_avr_delay_cycles>
    1a3e:	08 95       	ret

00001a40 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
    1a46:	e1 df       	rcall	.-62     	; 0x1a0a <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
    1a48:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
    1a4a:	a7 d0       	rcall	.+334    	; 0x1b9a <spi_write>
    1a4c:	97 d0       	rcall	.+302    	; 0x1b7c <spi_read>
    1a4e:	c8 2f       	mov	r28, r24
    1a50:	d0 e0       	ldi	r29, 0x00	; 0
    1a52:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
    1a54:	cc 27       	eor	r28, r28
    1a56:	92 d0       	rcall	.+292    	; 0x1b7c <spi_read>
    1a58:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
    1a5a:	d7 df       	rcall	.-82     	; 0x1a0a <flip_ms5607>
    1a5c:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <ms5607_convert_d1>:
    1a64:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
    1a66:	df 93       	push	r29
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <ms5607_convert_d1+0x6>
    1a6a:	1f 92       	push	r1
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    1a70:	19 82       	std	Y+1, r1	; 0x01
    1a72:	1a 82       	std	Y+2, r1	; 0x02
    1a74:	1b 82       	std	Y+3, r1	; 0x03
    1a76:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
    1a78:	c8 df       	rcall	.-112    	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
    1a7a:	88 e4       	ldi	r24, 0x48	; 72
    1a7c:	8e d0       	rcall	.+284    	; 0x1b9a <spi_write>
	delay_ms(10);
    1a7e:	66 e5       	ldi	r22, 0x56	; 86
    1a80:	70 ed       	ldi	r23, 0xD0	; 208
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    1a86:	b6 df       	rcall	.-148    	; 0x19f4 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    1a88:	c0 df       	rcall	.-128    	; 0x1a0a <flip_ms5607>
    1a8a:	bf df       	rcall	.-130    	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	85 d0       	rcall	.+266    	; 0x1b9a <spi_write>
    1a90:	75 d0       	rcall	.+234    	; 0x1b7c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	dc 01       	movw	r26, r24
    1a9a:	99 27       	eor	r25, r25
    1a9c:	88 27       	eor	r24, r24
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	ab 83       	std	Y+3, r26	; 0x03
    1aa4:	bc 83       	std	Y+4, r27	; 0x04
    1aa6:	6a d0       	rcall	.+212    	; 0x1b7c <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    1aa8:	49 81       	ldd	r20, Y+1	; 0x01
    1aaa:	5a 81       	ldd	r21, Y+2	; 0x02
    1aac:	6b 81       	ldd	r22, Y+3	; 0x03
    1aae:	7c 81       	ldd	r23, Y+4	; 0x04
    1ab0:	58 2b       	or	r21, r24
    1ab2:	49 83       	std	Y+1, r20	; 0x01
    1ab4:	5a 83       	std	Y+2, r21	; 0x02
    1ab6:	6b 83       	std	Y+3, r22	; 0x03
    1ab8:	7c 83       	std	Y+4, r23	; 0x04
    1aba:	60 d0       	rcall	.+192    	; 0x1b7c <spi_read>
	rx_data |= spi_read();
    1abc:	49 81       	ldd	r20, Y+1	; 0x01
    1abe:	5a 81       	ldd	r21, Y+2	; 0x02
    1ac0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ac2:	7c 81       	ldd	r23, Y+4	; 0x04
    1ac4:	48 2b       	or	r20, r24
    1ac6:	49 83       	std	Y+1, r20	; 0x01
    1ac8:	5a 83       	std	Y+2, r21	; 0x02
    1aca:	6b 83       	std	Y+3, r22	; 0x03
    1acc:	7c 83       	std	Y+4, r23	; 0x04
    1ace:	9d df       	rcall	.-198    	; 0x1a0a <flip_ms5607>
	flip_ms5607();
    1ad0:	69 81       	ldd	r22, Y+1	; 0x01
    1ad2:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	24 96       	adiw	r28, 0x04	; 4
    1ada:	cd bf       	out	0x3d, r28	; 61
}
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <ms5607_convert_d2>:
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <ms5607_convert_d2+0x6>
    1aea:	1f 92       	push	r1
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    1af0:	19 82       	std	Y+1, r1	; 0x01
    1af2:	1a 82       	std	Y+2, r1	; 0x02
    1af4:	1b 82       	std	Y+3, r1	; 0x03
    1af6:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
    1af8:	88 df       	rcall	.-240    	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
    1afa:	88 e5       	ldi	r24, 0x58	; 88
    1afc:	4e d0       	rcall	.+156    	; 0x1b9a <spi_write>
	delay_ms(10);
    1afe:	66 e5       	ldi	r22, 0x56	; 86
    1b00:	70 ed       	ldi	r23, 0xD0	; 208
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    1b06:	76 df       	rcall	.-276    	; 0x19f4 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    1b08:	80 df       	rcall	.-256    	; 0x1a0a <flip_ms5607>
    1b0a:	7f df       	rcall	.-258    	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	45 d0       	rcall	.+138    	; 0x1b9a <spi_write>
    1b10:	35 d0       	rcall	.+106    	; 0x1b7c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	dc 01       	movw	r26, r24
    1b1a:	99 27       	eor	r25, r25
    1b1c:	88 27       	eor	r24, r24
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	ab 83       	std	Y+3, r26	; 0x03
    1b24:	bc 83       	std	Y+4, r27	; 0x04
    1b26:	2a d0       	rcall	.+84     	; 0x1b7c <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    1b28:	49 81       	ldd	r20, Y+1	; 0x01
    1b2a:	5a 81       	ldd	r21, Y+2	; 0x02
    1b2c:	6b 81       	ldd	r22, Y+3	; 0x03
    1b2e:	7c 81       	ldd	r23, Y+4	; 0x04
    1b30:	58 2b       	or	r21, r24
    1b32:	49 83       	std	Y+1, r20	; 0x01
    1b34:	5a 83       	std	Y+2, r21	; 0x02
    1b36:	6b 83       	std	Y+3, r22	; 0x03
    1b38:	7c 83       	std	Y+4, r23	; 0x04
    1b3a:	20 d0       	rcall	.+64     	; 0x1b7c <spi_read>
	rx_data |= spi_read();
    1b3c:	49 81       	ldd	r20, Y+1	; 0x01
    1b3e:	5a 81       	ldd	r21, Y+2	; 0x02
    1b40:	6b 81       	ldd	r22, Y+3	; 0x03
    1b42:	7c 81       	ldd	r23, Y+4	; 0x04
    1b44:	48 2b       	or	r20, r24
    1b46:	49 83       	std	Y+1, r20	; 0x01
    1b48:	5a 83       	std	Y+2, r21	; 0x02
    1b4a:	6b 83       	std	Y+3, r22	; 0x03
    1b4c:	7c 83       	std	Y+4, r23	; 0x04
    1b4e:	5d df       	rcall	.-326    	; 0x1a0a <flip_ms5607>
	flip_ms5607();
    1b50:	69 81       	ldd	r22, Y+1	; 0x01
    1b52:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	24 96       	adiw	r28, 0x04	; 4
    1b5a:	cd bf       	out	0x3d, r28	; 61
}
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <spi_init>:
    1b64:	e0 e4       	ldi	r30, 0x40	; 64
    1b66:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
    1b68:	80 81       	ld	r24, Z
    1b6a:	80 6b       	ori	r24, 0xB0	; 176
    1b6c:	80 83       	st	Z, r24
    1b6e:	68 e0       	ldi	r22, 0x08	; 8
    1b70:	83 e0       	ldi	r24, 0x03	; 3
    1b72:	e0 d1       	rcall	.+960    	; 0x1f34 <sysclk_enable_module>
    1b74:	8c e5       	ldi	r24, 0x5C	; 92
    1b76:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    1b7a:	08 95       	ret

00001b7c <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
    1b7c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1b7e:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    1b86:	e0 ec       	ldi	r30, 0xC0	; 192
    1b88:	f8 e0       	ldi	r31, 0x08	; 8
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	88 23       	and	r24, r24
    1b8e:	ec f7       	brge	.-6      	; 0x1b8a <spi_read+0xe>
	sei();
    1b90:	78 94       	sei
	SREG=oldInterruptState;
    1b92:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
    1b94:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    1b98:	08 95       	ret

00001b9a <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
    1b9a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1b9c:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
    1b9e:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
    1ba2:	e0 ec       	ldi	r30, 0xC0	; 192
    1ba4:	f8 e0       	ldi	r31, 0x08	; 8
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	88 23       	and	r24, r24
    1baa:	ec f7       	brge	.-6      	; 0x1ba6 <spi_write+0xc>
	sei();
    1bac:	78 94       	sei
	SREG=oldInterruptState;
    1bae:	9f bf       	out	0x3f, r25	; 63
    1bb0:	08 95       	ret

00001bb2 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1bb8:	ad dc       	rcall	.-1702   	; 0x1514 <usart_getchar>
    1bba:	88 83       	st	Y, r24
}
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1bc2:	a0 cc       	rjmp	.-1728   	; 0x1504 <usart_putchar>
}
    1bc4:	08 95       	ret

00001bc6 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	27 97       	sbiw	r28, 0x07	; 7
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1bd4:	60 e1       	ldi	r22, 0x10	; 16
    1bd6:	85 e0       	ldi	r24, 0x05	; 5
    1bd8:	ad d1       	rcall	.+858    	; 0x1f34 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    1bda:	e0 e8       	ldi	r30, 0x80	; 128
    1bdc:	f6 e0       	ldi	r31, 0x06	; 6
    1bde:	80 81       	ld	r24, Z
    1be0:	88 60       	ori	r24, 0x08	; 8
    1be2:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1be4:	80 ea       	ldi	r24, 0xA0	; 160
    1be6:	9a e0       	ldi	r25, 0x0A	; 10
    1be8:	80 93 4b 21 	sts	0x214B, r24	; 0x80214b <stdio_base>
    1bec:	90 93 4c 21 	sts	0x214C, r25	; 0x80214c <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1bf0:	81 ee       	ldi	r24, 0xE1	; 225
    1bf2:	9d e0       	ldi	r25, 0x0D	; 13
    1bf4:	80 93 49 21 	sts	0x2149, r24	; 0x802149 <ptr_put>
    1bf8:	90 93 4a 21 	sts	0x214A, r25	; 0x80214a <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1bfc:	89 ed       	ldi	r24, 0xD9	; 217
    1bfe:	9d e0       	ldi	r25, 0x0D	; 13
    1c00:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <ptr_get>
    1c04:	90 93 48 21 	sts	0x2148, r25	; 0x802148 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1c08:	ed e0       	ldi	r30, 0x0D	; 13
    1c0a:	f0 e2       	ldi	r31, 0x20	; 32
    1c0c:	84 81       	ldd	r24, Z+4	; 0x04
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1c10:	85 81       	ldd	r24, Z+5	; 0x05
    1c12:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1c14:	86 81       	ldd	r24, Z+6	; 0x06
    1c16:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1c18:	80 81       	ld	r24, Z
    1c1a:	91 81       	ldd	r25, Z+1	; 0x01
    1c1c:	a2 81       	ldd	r26, Z+2	; 0x02
    1c1e:	b3 81       	ldd	r27, Z+3	; 0x03
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	ab 83       	std	Y+3, r26	; 0x03
    1c26:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1c28:	60 e1       	ldi	r22, 0x10	; 16
    1c2a:	85 e0       	ldi	r24, 0x05	; 5
    1c2c:	83 d1       	rcall	.+774    	; 0x1f34 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1c2e:	be 01       	movw	r22, r28
    1c30:	6f 5f       	subi	r22, 0xFF	; 255
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	80 ea       	ldi	r24, 0xA0	; 160
    1c36:	9a e0       	ldi	r25, 0x0A	; 10
    1c38:	86 dd       	rcall	.-1268   	; 0x1746 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1c3a:	6f e7       	ldi	r22, 0x7F	; 127
    1c3c:	71 e0       	ldi	r23, 0x01	; 1
    1c3e:	88 e9       	ldi	r24, 0x98	; 152
    1c40:	91 e0       	ldi	r25, 0x01	; 1
    1c42:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
    1c46:	27 96       	adiw	r28, 0x07	; 7
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	08 95       	ret

00001c52 <voltage_init>:
#include "voltage.h"
#include <asf.h>


void voltage_init(void)
{
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	69 d1       	rcall	.+722    	; 0x1f34 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&VOLTAGE_SERIAL);
	VOLTAGE_SERIAL.CTRLA = 0x01; // enable the ADC
    1c62:	c0 e0       	ldi	r28, 0x00	; 0
    1c64:	d2 e0       	ldi	r29, 0x02	; 2
    1c66:	ff 24       	eor	r15, r15
    1c68:	f3 94       	inc	r15
    1c6a:	f8 82       	st	Y, r15
	VOLTAGE_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    1c6c:	19 82       	std	Y+1, r1	; 0x01
	VOLTAGE_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    1c6e:	80 e1       	ldi	r24, 0x10	; 16
    1c70:	8a 83       	std	Y+2, r24	; 0x02
	VOLTAGE_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    1c72:	85 e0       	ldi	r24, 0x05	; 5
    1c74:	8c 83       	std	Y+4, r24	; 0x04
    1c76:	61 e2       	ldi	r22, 0x21	; 33
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	86 d1       	rcall	.+780    	; 0x1f8a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1c7e:	08 2f       	mov	r16, r24
    1c80:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    1c82:	10 2f       	mov	r17, r16
    1c84:	00 27       	eor	r16, r16
    1c86:	60 e2       	ldi	r22, 0x20	; 32
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	7e d1       	rcall	.+764    	; 0x1f8a <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    1c8e:	08 2b       	or	r16, r24
	VOLTAGE_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    1c90:	0c 87       	std	Y+12, r16	; 0x0c
    1c92:	1d 87       	std	Y+13, r17	; 0x0d
	
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL = 0x01; // single ended input
    1c94:	f8 a6       	std	Y+40, r15	; 0x28
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
    1c96:	19 a6       	std	Y+41, r1	; 0x29
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	08 95       	ret

00001ca4 <voltage_read>:

uint16_t voltage_read(void)
{
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
    1ca4:	e0 e0       	ldi	r30, 0x00	; 0
    1ca6:	f2 e0       	ldi	r31, 0x02	; 2
    1ca8:	80 a5       	ldd	r24, Z+40	; 0x28
    1caa:	80 68       	ori	r24, 0x80	; 128
    1cac:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_SERIAL.VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
    1cae:	83 a5       	ldd	r24, Z+43	; 0x2b
    1cb0:	88 23       	and	r24, r24
    1cb2:	e9 f3       	breq	.-6      	; 0x1cae <voltage_read+0xa>
	return VOLTAGE_SERIAL.VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
    1cb4:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    1cb8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    1cbc:	08 95       	ret

00001cbe <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	41 15       	cp	r20, r1
    1cc6:	51 05       	cpc	r21, r1
    1cc8:	b1 f1       	breq	.+108    	; 0x1d36 <rb16_write+0x78>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	db 01       	movw	r26, r22
    1cd6:	a8 0f       	add	r26, r24
    1cd8:	b9 1f       	adc	r27, r25
    1cda:	8d 91       	ld	r24, X+
    1cdc:	9c 91       	ld	r25, X
    1cde:	a2 81       	ldd	r26, Z+2	; 0x02
    1ce0:	b3 81       	ldd	r27, Z+3	; 0x03
    1ce2:	aa 0f       	add	r26, r26
    1ce4:	bb 1f       	adc	r27, r27
    1ce6:	c6 81       	ldd	r28, Z+6	; 0x06
    1ce8:	d7 81       	ldd	r29, Z+7	; 0x07
    1cea:	ac 0f       	add	r26, r28
    1cec:	bd 1f       	adc	r27, r29
    1cee:	8d 93       	st	X+, r24
    1cf0:	9c 93       	st	X, r25
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	82 83       	std	Z+2, r24	; 0x02
    1cfa:	93 83       	std	Z+3, r25	; 0x03
    1cfc:	a0 81       	ld	r26, Z
    1cfe:	b1 81       	ldd	r27, Z+1	; 0x01
    1d00:	8a 17       	cp	r24, r26
    1d02:	9b 07       	cpc	r25, r27
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <rb16_write+0x4c>
    1d06:	12 82       	std	Z+2, r1	; 0x02
    1d08:	13 82       	std	Z+3, r1	; 0x03
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	c4 81       	ldd	r28, Z+4	; 0x04
    1d10:	d5 81       	ldd	r29, Z+5	; 0x05
    1d12:	8c 17       	cp	r24, r28
    1d14:	9d 07       	cpc	r25, r29
    1d16:	49 f4       	brne	.+18     	; 0x1d2a <rb16_write+0x6c>
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	a8 17       	cp	r26, r24
    1d1c:	b9 07       	cpc	r27, r25
    1d1e:	19 f0       	breq	.+6      	; 0x1d26 <rb16_write+0x68>
    1d20:	84 83       	std	Z+4, r24	; 0x04
    1d22:	95 83       	std	Z+5, r25	; 0x05
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <rb16_write+0x6c>
    1d26:	14 82       	std	Z+4, r1	; 0x04
    1d28:	15 82       	std	Z+5, r1	; 0x05
    1d2a:	2f 5f       	subi	r18, 0xFF	; 255
    1d2c:	82 2f       	mov	r24, r18
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	84 17       	cp	r24, r20
    1d32:	95 07       	cpc	r25, r21
    1d34:	68 f2       	brcs	.-102    	; 0x1cd0 <rb16_write+0x12>
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <rb16_init>:
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	12 82       	std	Z+2, r1	; 0x02
    1d40:	13 82       	std	Z+3, r1	; 0x03
    1d42:	14 82       	std	Z+4, r1	; 0x04
    1d44:	15 82       	std	Z+5, r1	; 0x05
    1d46:	66 83       	std	Z+6, r22	; 0x06
    1d48:	77 83       	std	Z+7, r23	; 0x07
    1d4a:	40 83       	st	Z, r20
    1d4c:	51 83       	std	Z+1, r21	; 0x01
    1d4e:	08 95       	ret

00001d50 <rb16_get_nth>:
    1d50:	dc 01       	movw	r26, r24
    1d52:	12 96       	adiw	r26, 0x02	; 2
    1d54:	ed 91       	ld	r30, X+
    1d56:	fc 91       	ld	r31, X
    1d58:	13 97       	sbiw	r26, 0x03	; 3
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	e8 17       	cp	r30, r24
    1d60:	f9 07       	cpc	r31, r25
    1d62:	78 f0       	brcs	.+30     	; 0x1d82 <rb16_get_nth+0x32>
    1d64:	e1 50       	subi	r30, 0x01	; 1
    1d66:	f0 48       	sbci	r31, 0x80	; 128
    1d68:	e6 1b       	sub	r30, r22
    1d6a:	f7 0b       	sbc	r31, r23
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	16 96       	adiw	r26, 0x06	; 6
    1d72:	8d 91       	ld	r24, X+
    1d74:	9c 91       	ld	r25, X
    1d76:	17 97       	sbiw	r26, 0x07	; 7
    1d78:	e8 0f       	add	r30, r24
    1d7a:	f9 1f       	adc	r31, r25
    1d7c:	80 81       	ld	r24, Z
    1d7e:	91 81       	ldd	r25, Z+1	; 0x01
    1d80:	08 95       	ret
    1d82:	2d 91       	ld	r18, X+
    1d84:	3c 91       	ld	r19, X
    1d86:	11 97       	sbiw	r26, 0x01	; 1
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	e1 50       	subi	r30, 0x01	; 1
    1d8e:	f0 48       	sbci	r31, 0x80	; 128
    1d90:	e6 1b       	sub	r30, r22
    1d92:	f7 0b       	sbc	r31, r23
    1d94:	ee 0f       	add	r30, r30
    1d96:	ff 1f       	adc	r31, r31
    1d98:	16 96       	adiw	r26, 0x06	; 6
    1d9a:	8d 91       	ld	r24, X+
    1d9c:	9c 91       	ld	r25, X
    1d9e:	17 97       	sbiw	r26, 0x07	; 7
    1da0:	e8 0f       	add	r30, r24
    1da2:	f9 1f       	adc	r31, r25
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	08 95       	ret

00001daa <rb32_write>:
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	fc 01       	movw	r30, r24
    1db8:	41 15       	cp	r20, r1
    1dba:	51 05       	cpc	r21, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <rb32_write+0x16>
    1dbe:	3f c0       	rjmp	.+126    	; 0x1e3e <rb32_write+0x94>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	db 01       	movw	r26, r22
    1dd0:	a8 0f       	add	r26, r24
    1dd2:	b9 1f       	adc	r27, r25
    1dd4:	cd 90       	ld	r12, X+
    1dd6:	dd 90       	ld	r13, X+
    1dd8:	ed 90       	ld	r14, X+
    1dda:	fc 90       	ld	r15, X
    1ddc:	a2 81       	ldd	r26, Z+2	; 0x02
    1dde:	b3 81       	ldd	r27, Z+3	; 0x03
    1de0:	aa 0f       	add	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	aa 0f       	add	r26, r26
    1de6:	bb 1f       	adc	r27, r27
    1de8:	86 81       	ldd	r24, Z+6	; 0x06
    1dea:	97 81       	ldd	r25, Z+7	; 0x07
    1dec:	a8 0f       	add	r26, r24
    1dee:	b9 1f       	adc	r27, r25
    1df0:	cd 92       	st	X+, r12
    1df2:	dd 92       	st	X+, r13
    1df4:	ed 92       	st	X+, r14
    1df6:	fc 92       	st	X, r15
    1df8:	13 97       	sbiw	r26, 0x03	; 3
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	82 83       	std	Z+2, r24	; 0x02
    1e02:	93 83       	std	Z+3, r25	; 0x03
    1e04:	a0 81       	ld	r26, Z
    1e06:	b1 81       	ldd	r27, Z+1	; 0x01
    1e08:	8a 17       	cp	r24, r26
    1e0a:	9b 07       	cpc	r25, r27
    1e0c:	11 f4       	brne	.+4      	; 0x1e12 <rb32_write+0x68>
    1e0e:	12 82       	std	Z+2, r1	; 0x02
    1e10:	13 82       	std	Z+3, r1	; 0x03
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	c4 81       	ldd	r28, Z+4	; 0x04
    1e18:	d5 81       	ldd	r29, Z+5	; 0x05
    1e1a:	8c 17       	cp	r24, r28
    1e1c:	9d 07       	cpc	r25, r29
    1e1e:	49 f4       	brne	.+18     	; 0x1e32 <rb32_write+0x88>
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	a8 17       	cp	r26, r24
    1e24:	b9 07       	cpc	r27, r25
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <rb32_write+0x84>
    1e28:	84 83       	std	Z+4, r24	; 0x04
    1e2a:	95 83       	std	Z+5, r25	; 0x05
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <rb32_write+0x88>
    1e2e:	14 82       	std	Z+4, r1	; 0x04
    1e30:	15 82       	std	Z+5, r1	; 0x05
    1e32:	2f 5f       	subi	r18, 0xFF	; 255
    1e34:	82 2f       	mov	r24, r18
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	84 17       	cp	r24, r20
    1e3a:	95 07       	cpc	r25, r21
    1e3c:	20 f2       	brcs	.-120    	; 0x1dc6 <rb32_write+0x1c>
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	ff 90       	pop	r15
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	cf 90       	pop	r12
    1e4a:	08 95       	ret

00001e4c <rb32_init>:
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	12 82       	std	Z+2, r1	; 0x02
    1e50:	13 82       	std	Z+3, r1	; 0x03
    1e52:	14 82       	std	Z+4, r1	; 0x04
    1e54:	15 82       	std	Z+5, r1	; 0x05
    1e56:	66 83       	std	Z+6, r22	; 0x06
    1e58:	77 83       	std	Z+7, r23	; 0x07
    1e5a:	40 83       	st	Z, r20
    1e5c:	51 83       	std	Z+1, r21	; 0x01
    1e5e:	08 95       	ret

00001e60 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    1e60:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    1e62:	12 96       	adiw	r26, 0x02	; 2
    1e64:	ed 91       	ld	r30, X+
    1e66:	fc 91       	ld	r31, X
    1e68:	13 97       	sbiw	r26, 0x03	; 3
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	e8 17       	cp	r30, r24
    1e70:	f9 07       	cpc	r31, r25
    1e72:	98 f0       	brcs	.+38     	; 0x1e9a <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    1e74:	e1 50       	subi	r30, 0x01	; 1
    1e76:	f0 4c       	sbci	r31, 0xC0	; 192
    1e78:	e6 1b       	sub	r30, r22
    1e7a:	f7 0b       	sbc	r31, r23
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	16 96       	adiw	r26, 0x06	; 6
    1e86:	8d 91       	ld	r24, X+
    1e88:	9c 91       	ld	r25, X
    1e8a:	17 97       	sbiw	r26, 0x07	; 7
    1e8c:	e8 0f       	add	r30, r24
    1e8e:	f9 1f       	adc	r31, r25
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    1e9a:	2d 91       	ld	r18, X+
    1e9c:	3c 91       	ld	r19, X
    1e9e:	11 97       	sbiw	r26, 0x01	; 1
    1ea0:	e2 0f       	add	r30, r18
    1ea2:	f3 1f       	adc	r31, r19
    1ea4:	e1 50       	subi	r30, 0x01	; 1
    1ea6:	f0 4c       	sbci	r31, 0xC0	; 192
    1ea8:	e6 1b       	sub	r30, r22
    1eaa:	f7 0b       	sbc	r31, r23
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	16 96       	adiw	r26, 0x06	; 6
    1eb6:	8d 91       	ld	r24, X+
    1eb8:	9c 91       	ld	r25, X
    1eba:	17 97       	sbiw	r26, 0x07	; 7
    1ebc:	e8 0f       	add	r30, r24
    1ebe:	f9 1f       	adc	r31, r25
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
}
    1ec8:	08 95       	ret

00001eca <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	1f 92       	push	r1
    1ed0:	1f 92       	push	r1
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1ed6:	8f ef       	ldi	r24, 0xFF	; 255
    1ed8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1edc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1ee0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1ee4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1ee8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1eec:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1ef0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ef4:	8f b7       	in	r24, 0x3f	; 63
    1ef6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1ef8:	f8 94       	cli
	return flags;
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1efc:	e0 e5       	ldi	r30, 0x50	; 80
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	82 60       	ori	r24, 0x02	; 2
    1f04:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f06:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1f08:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1f0a:	81 ff       	sbrs	r24, 1
    1f0c:	fd cf       	rjmp	.-6      	; 0x1f08 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1f0e:	61 e0       	ldi	r22, 0x01	; 1
    1f10:	80 e4       	ldi	r24, 0x40	; 64
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	44 d0       	rcall	.+136    	; 0x1f9e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f16:	8f b7       	in	r24, 0x3f	; 63
    1f18:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1f1a:	f8 94       	cli
	return flags;
    1f1c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1f1e:	e0 e5       	ldi	r30, 0x50	; 80
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8e 7f       	andi	r24, 0xFE	; 254
    1f26:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f28:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	08 95       	ret

00001f34 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	1f 92       	push	r1
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f3e:	9f b7       	in	r25, 0x3f	; 63
    1f40:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1f42:	f8 94       	cli
	return flags;
    1f44:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1f46:	e8 2f       	mov	r30, r24
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	e0 59       	subi	r30, 0x90	; 144
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	60 95       	com	r22
    1f50:	80 81       	ld	r24, Z
    1f52:	68 23       	and	r22, r24
    1f54:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f56:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1f58:	0f 90       	pop	r0
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	08 95       	ret

00001f60 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	1f 92       	push	r1
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f6a:	9f b7       	in	r25, 0x3f	; 63
    1f6c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1f6e:	f8 94       	cli
	return flags;
    1f70:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1f72:	e8 2f       	mov	r30, r24
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	e0 59       	subi	r30, 0x90	; 144
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 81       	ld	r24, Z
    1f7c:	68 2b       	or	r22, r24
    1f7e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f80:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1f82:	0f 90       	pop	r0
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	08 95       	ret

00001f8a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1f8a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1f8e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1f90:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1f92:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1f96:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1f98:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1f9c:	08 95       	ret

00001f9e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1f9e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1fa0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1fa2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1fa4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1fa6:	60 83       	st	Z, r22
	ret                             // Return to caller
    1fa8:	08 95       	ret

00001faa <__portable_avr_delay_cycles>:
	ac_enable(&ACA, 0);

}

void release(void){
	servo_release();
    1faa:	04 c0       	rjmp	.+8      	; 0x1fb4 <__portable_avr_delay_cycles+0xa>
    1fac:	61 50       	subi	r22, 0x01	; 1
    1fae:	71 09       	sbc	r23, r1
    1fb0:	81 09       	sbc	r24, r1
    1fb2:	91 09       	sbc	r25, r1
    1fb4:	61 15       	cp	r22, r1
    1fb6:	71 05       	cpc	r23, r1
    1fb8:	81 05       	cpc	r24, r1
    1fba:	91 05       	cpc	r25, r1
    1fbc:	b9 f7       	brne	.-18     	; 0x1fac <__portable_avr_delay_cycles+0x2>
    1fbe:	08 95       	ret

00001fc0 <hall_sensor_measure>:
    1fc0:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <ticks_per_sec>
    1fc4:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <ticks_per_sec+0x1>
    1fc8:	01 96       	adiw	r24, 0x01	; 1
    1fca:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <ticks_per_sec>
    1fce:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <ticks_per_sec+0x1>
    1fd2:	08 95       	ret

00001fd4 <pressure_init>:
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	1f dd       	rcall	.-1474   	; 0x1a18 <ms5607_init>
    1fda:	82 ea       	ldi	r24, 0xA2	; 162
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	30 dd       	rcall	.-1440   	; 0x1a40 <ms5607_read>
    1fe0:	c1 e3       	ldi	r28, 0x31	; 49
    1fe2:	d1 e2       	ldi	r29, 0x21	; 33
    1fe4:	88 83       	st	Y, r24
    1fe6:	99 83       	std	Y+1, r25	; 0x01
    1fe8:	84 ea       	ldi	r24, 0xA4	; 164
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	29 dd       	rcall	.-1454   	; 0x1a40 <ms5607_read>
    1fee:	8a 83       	std	Y+2, r24	; 0x02
    1ff0:	9b 83       	std	Y+3, r25	; 0x03
    1ff2:	86 ea       	ldi	r24, 0xA6	; 166
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	24 dd       	rcall	.-1464   	; 0x1a40 <ms5607_read>
    1ff8:	8c 83       	std	Y+4, r24	; 0x04
    1ffa:	9d 83       	std	Y+5, r25	; 0x05
    1ffc:	88 ea       	ldi	r24, 0xA8	; 168
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	1f dd       	rcall	.-1474   	; 0x1a40 <ms5607_read>
    2002:	8e 83       	std	Y+6, r24	; 0x06
    2004:	9f 83       	std	Y+7, r25	; 0x07
    2006:	8a ea       	ldi	r24, 0xAA	; 170
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	1a dd       	rcall	.-1484   	; 0x1a40 <ms5607_read>
    200c:	88 87       	std	Y+8, r24	; 0x08
    200e:	99 87       	std	Y+9, r25	; 0x09
    2010:	8c ea       	ldi	r24, 0xAC	; 172
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	15 dd       	rcall	.-1494   	; 0x1a40 <ms5607_read>
    2016:	8a 87       	std	Y+10, r24	; 0x0a
    2018:	9b 87       	std	Y+11, r25	; 0x0b
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	08 95       	ret

00002020 <gps_init>:
    2020:	bb dc       	rcall	.-1674   	; 0x1998 <gps_uart_init>
    2022:	6b ea       	ldi	r22, 0xAB	; 171
    2024:	79 e2       	ldi	r23, 0x29	; 41
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	bf df       	rcall	.-130    	; 0x1faa <__portable_avr_delay_cycles>
    202c:	80 e3       	ldi	r24, 0x30	; 48
    202e:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    2032:	08 95       	ret

00002034 <hall_sensor_init>:
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	00 d0       	rcall	.+0      	; 0x203a <hall_sensor_init+0x6>
    203a:	1f 92       	push	r1
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	fe 01       	movw	r30, r28
    2042:	31 96       	adiw	r30, 0x01	; 1
    2044:	84 e0       	ldi	r24, 0x04	; 4
    2046:	df 01       	movw	r26, r30
    2048:	1d 92       	st	X+, r1
    204a:	8a 95       	dec	r24
    204c:	e9 f7       	brne	.-6      	; 0x2048 <hall_sensor_init+0x14>
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	8e e3       	ldi	r24, 0x3E	; 62
    2054:	8b 83       	std	Y+3, r24	; 0x03
    2056:	8f e2       	ldi	r24, 0x2F	; 47
    2058:	8a 83       	std	Y+2, r24	; 0x02
    205a:	60 ee       	ldi	r22, 0xE0	; 224
    205c:	7f e0       	ldi	r23, 0x0F	; 15
    205e:	80 e8       	ldi	r24, 0x80	; 128
    2060:	93 e0       	ldi	r25, 0x03	; 3
    2062:	0e 94 13 03 	call	0x626	; 0x626 <ac_set_interrupt_callback>
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	98 2f       	mov	r25, r24
    206a:	90 6c       	ori	r25, 0xC0	; 192
    206c:	99 83       	std	Y+1, r25	; 0x01
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	29 2f       	mov	r18, r25
    2072:	20 73       	andi	r18, 0x30	; 48
    2074:	21 f0       	breq	.+8      	; 0x207e <hall_sensor_init+0x4a>
    2076:	9c 7f       	andi	r25, 0xFC	; 252
    2078:	92 60       	ori	r25, 0x02	; 2
    207a:	9c 83       	std	Y+4, r25	; 0x04
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <hall_sensor_init+0x50>
    207e:	8f 70       	andi	r24, 0x0F	; 15
    2080:	80 6e       	ori	r24, 0xE0	; 224
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	ae 01       	movw	r20, r28
    2086:	4f 5f       	subi	r20, 0xFF	; 255
    2088:	5f 4f       	sbci	r21, 0xFF	; 255
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	80 e8       	ldi	r24, 0x80	; 128
    208e:	93 e0       	ldi	r25, 0x03	; 3
    2090:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ac_write_config>
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	80 e8       	ldi	r24, 0x80	; 128
    2098:	93 e0       	ldi	r25, 0x03	; 3
    209a:	0e 94 cb 02 	call	0x596	; 0x596 <ac_enable>
    209e:	24 96       	adiw	r28, 0x04	; 4
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	08 95       	ret

000020aa <get_pressure>:
    20aa:	4f 92       	push	r4
    20ac:	5f 92       	push	r5
    20ae:	6f 92       	push	r6
    20b0:	7f 92       	push	r7
    20b2:	8f 92       	push	r8
    20b4:	9f 92       	push	r9
    20b6:	af 92       	push	r10
    20b8:	bf 92       	push	r11
    20ba:	cf 92       	push	r12
    20bc:	df 92       	push	r13
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	ce dc       	rcall	.-1636   	; 0x1a64 <ms5607_convert_d1>
    20c8:	6b 01       	movw	r12, r22
    20ca:	7c 01       	movw	r14, r24
    20cc:	0b dd       	rcall	.-1514   	; 0x1ae4 <ms5607_convert_d2>
    20ce:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    20d2:	4b 01       	movw	r8, r22
    20d4:	5c 01       	movw	r10, r24
    20d6:	c1 e3       	ldi	r28, 0x31	; 49
    20d8:	d1 e2       	ldi	r29, 0x21	; 33
    20da:	68 85       	ldd	r22, Y+8	; 0x08
    20dc:	79 85       	ldd	r23, Y+9	; 0x09
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e8       	ldi	r20, 0x80	; 128
    20ec:	53 e4       	ldi	r21, 0x43	; 67
    20ee:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    20f2:	9b 01       	movw	r18, r22
    20f4:	ac 01       	movw	r20, r24
    20f6:	c5 01       	movw	r24, r10
    20f8:	b4 01       	movw	r22, r8
    20fa:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <__subsf3>
    20fe:	4b 01       	movw	r8, r22
    2100:	5c 01       	movw	r10, r24
    2102:	6c 81       	ldd	r22, Y+4	; 0x04
    2104:	7d 81       	ldd	r23, Y+5	; 0x05
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    210e:	a5 01       	movw	r20, r10
    2110:	94 01       	movw	r18, r8
    2112:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	5c e3       	ldi	r21, 0x3C	; 60
    211e:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2122:	2b 01       	movw	r4, r22
    2124:	3c 01       	movw	r6, r24
    2126:	68 81       	ld	r22, Y
    2128:	79 81       	ldd	r23, Y+1	; 0x01
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    213e:	9b 01       	movw	r18, r22
    2140:	ac 01       	movw	r20, r24
    2142:	c3 01       	movw	r24, r6
    2144:	b2 01       	movw	r22, r4
    2146:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    214a:	2b 01       	movw	r4, r22
    214c:	3c 01       	movw	r6, r24
    214e:	c7 01       	movw	r24, r14
    2150:	b6 01       	movw	r22, r12
    2152:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    2156:	9b 01       	movw	r18, r22
    2158:	ac 01       	movw	r20, r24
    215a:	c3 01       	movw	r24, r6
    215c:	b2 01       	movw	r22, r4
    215e:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	55 e3       	ldi	r21, 0x35	; 53
    216a:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    216e:	6b 01       	movw	r12, r22
    2170:	7c 01       	movw	r14, r24
    2172:	6e 81       	ldd	r22, Y+6	; 0x06
    2174:	7f 81       	ldd	r23, Y+7	; 0x07
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    217e:	a5 01       	movw	r20, r10
    2180:	94 01       	movw	r18, r8
    2182:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e8       	ldi	r20, 0x80	; 128
    218c:	5c e3       	ldi	r21, 0x3C	; 60
    218e:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2192:	4b 01       	movw	r8, r22
    2194:	5c 01       	movw	r10, r24
    2196:	6a 81       	ldd	r22, Y+2	; 0x02
    2198:	7b 81       	ldd	r23, Y+3	; 0x03
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	58 e4       	ldi	r21, 0x48	; 72
    21aa:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    21ae:	9b 01       	movw	r18, r22
    21b0:	ac 01       	movw	r20, r24
    21b2:	c5 01       	movw	r24, r10
    21b4:	b4 01       	movw	r22, r8
    21b6:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    21ba:	9b 01       	movw	r18, r22
    21bc:	ac 01       	movw	r20, r24
    21be:	c7 01       	movw	r24, r14
    21c0:	b6 01       	movw	r22, r12
    21c2:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <__subsf3>
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	58 e3       	ldi	r21, 0x38	; 56
    21ce:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	bf 90       	pop	r11
    21e0:	af 90       	pop	r10
    21e2:	9f 90       	pop	r9
    21e4:	8f 90       	pop	r8
    21e6:	7f 90       	pop	r7
    21e8:	6f 90       	pop	r6
    21ea:	5f 90       	pop	r5
    21ec:	4f 90       	pop	r4
    21ee:	08 95       	ret

000021f0 <get_altitude>:
    21f0:	4f 92       	push	r4
    21f2:	5f 92       	push	r5
    21f4:	6f 92       	push	r6
    21f6:	7f 92       	push	r7
    21f8:	8f 92       	push	r8
    21fa:	9f 92       	push	r9
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	2b 01       	movw	r4, r22
    220a:	3c 01       	movw	r6, r24
    220c:	c0 90 1f 20 	lds	r12, 0x201F	; 0x80201f <L>
    2210:	d0 90 20 20 	lds	r13, 0x2020	; 0x802020 <L+0x1>
    2214:	e0 90 21 20 	lds	r14, 0x2021	; 0x802021 <L+0x2>
    2218:	f0 90 22 20 	lds	r15, 0x2022	; 0x802022 <L+0x3>
    221c:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <R>
    2220:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <R+0x1>
    2224:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <R+0x2>
    2228:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <R+0x3>
    222c:	c7 01       	movw	r24, r14
    222e:	b6 01       	movw	r22, r12
    2230:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2234:	20 91 1b 20 	lds	r18, 0x201B	; 0x80201b <g_0>
    2238:	30 91 1c 20 	lds	r19, 0x201C	; 0x80201c <g_0+0x1>
    223c:	40 91 1d 20 	lds	r20, 0x201D	; 0x80201d <g_0+0x2>
    2240:	50 91 1e 20 	lds	r21, 0x201E	; 0x80201e <g_0+0x3>
    2244:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    2248:	4b 01       	movw	r8, r22
    224a:	5c 01       	movw	r10, r24
    224c:	a3 01       	movw	r20, r6
    224e:	92 01       	movw	r18, r4
    2250:	60 91 2b 20 	lds	r22, 0x202B	; 0x80202b <ground_p>
    2254:	70 91 2c 20 	lds	r23, 0x202C	; 0x80202c <ground_p+0x1>
    2258:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <ground_p+0x2>
    225c:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <ground_p+0x3>
    2260:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    2264:	a5 01       	movw	r20, r10
    2266:	94 01       	movw	r18, r8
    2268:	0e 94 ed 24 	call	0x49da	; 0x49da <pow>
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <__subsf3>
    2278:	20 91 27 20 	lds	r18, 0x2027	; 0x802027 <ground_t>
    227c:	30 91 28 20 	lds	r19, 0x2028	; 0x802028 <ground_t+0x1>
    2280:	40 91 29 20 	lds	r20, 0x2029	; 0x802029 <ground_t+0x2>
    2284:	50 91 2a 20 	lds	r21, 0x202A	; 0x80202a <ground_t+0x3>
    2288:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    228c:	a7 01       	movw	r20, r14
    228e:	96 01       	movw	r18, r12
    2290:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	df 90       	pop	r13
    229a:	cf 90       	pop	r12
    229c:	bf 90       	pop	r11
    229e:	af 90       	pop	r10
    22a0:	9f 90       	pop	r9
    22a2:	8f 90       	pop	r8
    22a4:	7f 90       	pop	r7
    22a6:	6f 90       	pop	r6
    22a8:	5f 90       	pop	r5
    22aa:	4f 90       	pop	r4
    22ac:	08 95       	ret

000022ae <get_voltage>:
    22ae:	cf 92       	push	r12
    22b0:	df 92       	push	r13
    22b2:	ef 92       	push	r14
    22b4:	ff 92       	push	r15
    22b6:	f6 dc       	rcall	.-1556   	; 0x1ca4 <voltage_read>
    22b8:	bc 01       	movw	r22, r24
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    22c2:	23 e4       	ldi	r18, 0x43	; 67
    22c4:	3e e2       	ldi	r19, 0x2E	; 46
    22c6:	42 e0       	ldi	r20, 0x02	; 2
    22c8:	5a e3       	ldi	r21, 0x3A	; 58
    22ca:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    22ce:	24 ee       	ldi	r18, 0xE4	; 228
    22d0:	3a e5       	ldi	r19, 0x5A	; 90
    22d2:	45 ec       	ldi	r20, 0xC5	; 197
    22d4:	5d e3       	ldi	r21, 0x3D	; 61
    22d6:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <__subsf3>
    22da:	6b 01       	movw	r12, r22
    22dc:	7c 01       	movw	r14, r24
    22de:	2b e2       	ldi	r18, 0x2B	; 43
    22e0:	35 eb       	ldi	r19, 0xB5	; 181
    22e2:	42 e1       	ldi	r20, 0x12	; 18
    22e4:	50 e4       	ldi	r21, 0x40	; 64
    22e6:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    22ea:	9b 01       	movw	r18, r22
    22ec:	ac 01       	movw	r20, r24
    22ee:	c7 01       	movw	r24, r14
    22f0:	b6 01       	movw	r22, r12
    22f2:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	08 95       	ret

00002300 <diff>:
    2300:	2f 92       	push	r2
    2302:	3f 92       	push	r3
    2304:	4f 92       	push	r4
    2306:	5f 92       	push	r5
    2308:	6f 92       	push	r6
    230a:	7f 92       	push	r7
    230c:	8f 92       	push	r8
    230e:	9f 92       	push	r9
    2310:	af 92       	push	r10
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	00 d0       	rcall	.+0      	; 0x2326 <diff+0x26>
    2326:	00 d0       	rcall	.+0      	; 0x2328 <diff+0x28>
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	6c 01       	movw	r12, r24
    232e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    2332:	88 23       	and	r24, r24
    2334:	09 f4       	brne	.+2      	; 0x2338 <diff+0x38>
    2336:	6c c0       	rjmp	.+216    	; 0x2410 <diff+0x110>
    2338:	00 e0       	ldi	r16, 0x00	; 0
    233a:	10 e0       	ldi	r17, 0x00	; 0
    233c:	41 2c       	mov	r4, r1
    233e:	51 2c       	mov	r5, r1
    2340:	32 01       	movw	r6, r4
    2342:	86 2e       	mov	r8, r22
    2344:	91 2c       	mov	r9, r1
    2346:	a1 2c       	mov	r10, r1
    2348:	b1 2c       	mov	r11, r1
    234a:	89 82       	std	Y+1, r8	; 0x01
    234c:	9a 82       	std	Y+2, r9	; 0x02
    234e:	ab 82       	std	Y+3, r10	; 0x03
    2350:	bc 82       	std	Y+4, r11	; 0x04
    2352:	b8 01       	movw	r22, r16
    2354:	c6 01       	movw	r24, r12
    2356:	fc dc       	rcall	.-1544   	; 0x1d50 <rb16_get_nth>
    2358:	5c 01       	movw	r10, r24
    235a:	18 01       	movw	r2, r16
    235c:	2f ef       	ldi	r18, 0xFF	; 255
    235e:	22 1a       	sub	r2, r18
    2360:	32 0a       	sbc	r3, r18
    2362:	b1 01       	movw	r22, r2
    2364:	c6 01       	movw	r24, r12
    2366:	f4 dc       	rcall	.-1560   	; 0x1d50 <rb16_get_nth>
    2368:	7c 01       	movw	r14, r24
    236a:	b8 01       	movw	r22, r16
    236c:	6e 5f       	subi	r22, 0xFE	; 254
    236e:	7f 4f       	sbci	r23, 0xFF	; 255
    2370:	c6 01       	movw	r24, r12
    2372:	ee dc       	rcall	.-1572   	; 0x1d50 <rb16_get_nth>
    2374:	a5 01       	movw	r20, r10
    2376:	bb 0c       	add	r11, r11
    2378:	66 0b       	sbc	r22, r22
    237a:	77 0b       	sbc	r23, r23
    237c:	8a 01       	movw	r16, r20
    237e:	9b 01       	movw	r18, r22
    2380:	00 0f       	add	r16, r16
    2382:	11 1f       	adc	r17, r17
    2384:	22 1f       	adc	r18, r18
    2386:	33 1f       	adc	r19, r19
    2388:	40 0f       	add	r20, r16
    238a:	51 1f       	adc	r21, r17
    238c:	62 1f       	adc	r22, r18
    238e:	73 1f       	adc	r23, r19
    2390:	87 01       	movw	r16, r14
    2392:	ff 0c       	add	r15, r15
    2394:	22 0b       	sbc	r18, r18
    2396:	33 0b       	sbc	r19, r19
    2398:	78 01       	movw	r14, r16
    239a:	89 01       	movw	r16, r18
    239c:	ee 0c       	add	r14, r14
    239e:	ff 1c       	adc	r15, r15
    23a0:	00 1f       	adc	r16, r16
    23a2:	11 1f       	adc	r17, r17
    23a4:	ee 0c       	add	r14, r14
    23a6:	ff 1c       	adc	r15, r15
    23a8:	00 1f       	adc	r16, r16
    23aa:	11 1f       	adc	r17, r17
    23ac:	4a 01       	movw	r8, r20
    23ae:	5b 01       	movw	r10, r22
    23b0:	8e 18       	sub	r8, r14
    23b2:	9f 08       	sbc	r9, r15
    23b4:	a0 0a       	sbc	r10, r16
    23b6:	b1 0a       	sbc	r11, r17
    23b8:	ac 01       	movw	r20, r24
    23ba:	99 0f       	add	r25, r25
    23bc:	66 0b       	sbc	r22, r22
    23be:	77 0b       	sbc	r23, r23
    23c0:	d5 01       	movw	r26, r10
    23c2:	c4 01       	movw	r24, r8
    23c4:	84 0f       	add	r24, r20
    23c6:	95 1f       	adc	r25, r21
    23c8:	a6 1f       	adc	r26, r22
    23ca:	b7 1f       	adc	r27, r23
    23cc:	9c 01       	movw	r18, r24
    23ce:	ad 01       	movw	r20, r26
    23d0:	69 81       	ldd	r22, Y+1	; 0x01
    23d2:	7a 81       	ldd	r23, Y+2	; 0x02
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <__mulsi3>
    23dc:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__floatsisf>
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    23ec:	9b 01       	movw	r18, r22
    23ee:	ac 01       	movw	r20, r24
    23f0:	c3 01       	movw	r24, r6
    23f2:	b2 01       	movw	r22, r4
    23f4:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    23f8:	2b 01       	movw	r4, r22
    23fa:	3c 01       	movw	r6, r24
    23fc:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    2400:	81 01       	movw	r16, r2
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	22 16       	cp	r2, r18
    2408:	33 06       	cpc	r3, r19
    240a:	08 f4       	brcc	.+2      	; 0x240e <diff+0x10e>
    240c:	a2 cf       	rjmp	.-188    	; 0x2352 <diff+0x52>
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <diff+0x116>
    2410:	41 2c       	mov	r4, r1
    2412:	51 2c       	mov	r5, r1
    2414:	32 01       	movw	r6, r4
    2416:	68 2f       	mov	r22, r24
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__floatsisf>
    2422:	9b 01       	movw	r18, r22
    2424:	ac 01       	movw	r20, r24
    2426:	c3 01       	movw	r24, r6
    2428:	b2 01       	movw	r22, r4
    242a:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	48 ec       	ldi	r20, 0xC8	; 200
    2434:	52 e4       	ldi	r21, 0x42	; 66
    2436:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    243a:	26 96       	adiw	r28, 0x06	; 6
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	ff 90       	pop	r15
    244a:	ef 90       	pop	r14
    244c:	df 90       	pop	r13
    244e:	cf 90       	pop	r12
    2450:	bf 90       	pop	r11
    2452:	af 90       	pop	r10
    2454:	9f 90       	pop	r9
    2456:	8f 90       	pop	r8
    2458:	7f 90       	pop	r7
    245a:	6f 90       	pop	r6
    245c:	5f 90       	pop	r5
    245e:	4f 90       	pop	r4
    2460:	3f 90       	pop	r3
    2462:	2f 90       	pop	r2
    2464:	08 95       	ret

00002466 <data_check>:
    2466:	3f 92       	push	r3
    2468:	4f 92       	push	r4
    246a:	5f 92       	push	r5
    246c:	6f 92       	push	r6
    246e:	7f 92       	push	r7
    2470:	8f 92       	push	r8
    2472:	9f 92       	push	r9
    2474:	af 92       	push	r10
    2476:	bf 92       	push	r11
    2478:	cf 92       	push	r12
    247a:	df 92       	push	r13
    247c:	ef 92       	push	r14
    247e:	ff 92       	push	r15
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	00 d0       	rcall	.+0      	; 0x248a <data_check+0x24>
    248a:	00 d0       	rcall	.+0      	; 0x248c <data_check+0x26>
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	8c 01       	movw	r16, r24
    2492:	19 82       	std	Y+1, r1	; 0x01
    2494:	1a 82       	std	Y+2, r1	; 0x02
    2496:	c1 2c       	mov	r12, r1
    2498:	d1 2c       	mov	r13, r1
    249a:	76 01       	movw	r14, r12
    249c:	69 81       	ldd	r22, Y+1	; 0x01
    249e:	7a 81       	ldd	r23, Y+2	; 0x02
    24a0:	c8 01       	movw	r24, r16
    24a2:	de dc       	rcall	.-1604   	; 0x1e60 <rb32_get_nth>
    24a4:	4b 01       	movw	r8, r22
    24a6:	5c 01       	movw	r10, r24
    24a8:	21 e6       	ldi	r18, 0x61	; 97
    24aa:	82 1a       	sub	r8, r18
    24ac:	2e ea       	ldi	r18, 0xAE	; 174
    24ae:	92 0a       	sbc	r9, r18
    24b0:	2a e0       	ldi	r18, 0x0A	; 10
    24b2:	a2 0a       	sbc	r10, r18
    24b4:	b1 08       	sbc	r11, r1
    24b6:	2f e7       	ldi	r18, 0x7F	; 127
    24b8:	82 16       	cp	r8, r18
    24ba:	2a e1       	ldi	r18, 0x1A	; 26
    24bc:	92 06       	cpc	r9, r18
    24be:	26 e0       	ldi	r18, 0x06	; 6
    24c0:	a2 06       	cpc	r10, r18
    24c2:	b1 04       	cpc	r11, r1
    24c4:	80 f4       	brcc	.+32     	; 0x24e6 <data_check+0x80>
    24c6:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__floatsisf>
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 ea       	ldi	r20, 0xA0	; 160
    24d0:	50 e4       	ldi	r21, 0x40	; 64
    24d2:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    24d6:	9b 01       	movw	r18, r22
    24d8:	ac 01       	movw	r20, r24
    24da:	c7 01       	movw	r24, r14
    24dc:	b6 01       	movw	r22, r12
    24de:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    24e2:	6b 01       	movw	r12, r22
    24e4:	7c 01       	movw	r14, r24
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	05 97       	sbiw	r24, 0x05	; 5
    24f2:	a1 f6       	brne	.-88     	; 0x249c <data_check+0x36>
    24f4:	19 82       	std	Y+1, r1	; 0x01
    24f6:	1a 82       	std	Y+2, r1	; 0x02
    24f8:	81 2c       	mov	r8, r1
    24fa:	91 2c       	mov	r9, r1
    24fc:	54 01       	movw	r10, r8
    24fe:	69 81       	ldd	r22, Y+1	; 0x01
    2500:	7a 81       	ldd	r23, Y+2	; 0x02
    2502:	c8 01       	movw	r24, r16
    2504:	ad dc       	rcall	.-1702   	; 0x1e60 <rb32_get_nth>
    2506:	2b 01       	movw	r4, r22
    2508:	3c 01       	movw	r6, r24
    250a:	21 e6       	ldi	r18, 0x61	; 97
    250c:	42 1a       	sub	r4, r18
    250e:	2e ea       	ldi	r18, 0xAE	; 174
    2510:	52 0a       	sbc	r5, r18
    2512:	2a e0       	ldi	r18, 0x0A	; 10
    2514:	62 0a       	sbc	r6, r18
    2516:	71 08       	sbc	r7, r1
    2518:	2f e7       	ldi	r18, 0x7F	; 127
    251a:	42 16       	cp	r4, r18
    251c:	2a e1       	ldi	r18, 0x1A	; 26
    251e:	52 06       	cpc	r5, r18
    2520:	26 e0       	ldi	r18, 0x06	; 6
    2522:	62 06       	cpc	r6, r18
    2524:	71 04       	cpc	r7, r1
    2526:	90 f4       	brcc	.+36     	; 0x254c <data_check+0xe6>
    2528:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__floatsisf>
    252c:	a7 01       	movw	r20, r14
    252e:	96 01       	movw	r18, r12
    2530:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <__subsf3>
    2534:	9b 01       	movw	r18, r22
    2536:	ac 01       	movw	r20, r24
    2538:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    253c:	9b 01       	movw	r18, r22
    253e:	ac 01       	movw	r20, r24
    2540:	c5 01       	movw	r24, r10
    2542:	b4 01       	movw	r22, r8
    2544:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    2548:	4b 01       	movw	r8, r22
    254a:	5c 01       	movw	r10, r24
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	05 97       	sbiw	r24, 0x05	; 5
    2558:	91 f6       	brne	.-92     	; 0x24fe <data_check+0x98>
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e8       	ldi	r20, 0x80	; 128
    2560:	5e e3       	ldi	r21, 0x3E	; 62
    2562:	c5 01       	movw	r24, r10
    2564:	b4 01       	movw	r22, r8
    2566:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    256a:	69 83       	std	Y+1, r22	; 0x01
    256c:	7a 83       	std	Y+2, r23	; 0x02
    256e:	8b 83       	std	Y+3, r24	; 0x03
    2570:	9c 83       	std	Y+4, r25	; 0x04
    2572:	1d 82       	std	Y+5, r1	; 0x05
    2574:	1e 82       	std	Y+6, r1	; 0x06
    2576:	31 2c       	mov	r3, r1
    2578:	41 2c       	mov	r4, r1
    257a:	51 2c       	mov	r5, r1
    257c:	32 01       	movw	r6, r4
    257e:	6d 81       	ldd	r22, Y+5	; 0x05
    2580:	7e 81       	ldd	r23, Y+6	; 0x06
    2582:	c8 01       	movw	r24, r16
    2584:	6d dc       	rcall	.-1830   	; 0x1e60 <rb32_get_nth>
    2586:	4b 01       	movw	r8, r22
    2588:	5c 01       	movw	r10, r24
    258a:	21 e6       	ldi	r18, 0x61	; 97
    258c:	82 1a       	sub	r8, r18
    258e:	2e ea       	ldi	r18, 0xAE	; 174
    2590:	92 0a       	sbc	r9, r18
    2592:	2a e0       	ldi	r18, 0x0A	; 10
    2594:	a2 0a       	sbc	r10, r18
    2596:	b1 08       	sbc	r11, r1
    2598:	2f e7       	ldi	r18, 0x7F	; 127
    259a:	82 16       	cp	r8, r18
    259c:	2a e1       	ldi	r18, 0x1A	; 26
    259e:	92 06       	cpc	r9, r18
    25a0:	26 e0       	ldi	r18, 0x06	; 6
    25a2:	a2 06       	cpc	r10, r18
    25a4:	b1 04       	cpc	r11, r1
    25a6:	50 f5       	brcc	.+84     	; 0x25fc <data_check+0x196>
    25a8:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__floatsisf>
    25ac:	4b 01       	movw	r8, r22
    25ae:	5c 01       	movw	r10, r24
    25b0:	a7 01       	movw	r20, r14
    25b2:	96 01       	movw	r18, r12
    25b4:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <__subsf3>
    25b8:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    25bc:	9b 01       	movw	r18, r22
    25be:	77 23       	and	r23, r23
    25c0:	24 f4       	brge	.+8      	; 0x25ca <data_check+0x164>
    25c2:	22 27       	eor	r18, r18
    25c4:	33 27       	eor	r19, r19
    25c6:	26 1b       	sub	r18, r22
    25c8:	37 0b       	sbc	r19, r23
    25ca:	b9 01       	movw	r22, r18
    25cc:	33 0f       	add	r19, r19
    25ce:	88 0b       	sbc	r24, r24
    25d0:	99 0b       	sbc	r25, r25
    25d2:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__floatsisf>
    25d6:	9b 01       	movw	r18, r22
    25d8:	ac 01       	movw	r20, r24
    25da:	69 81       	ldd	r22, Y+1	; 0x01
    25dc:	7a 81       	ldd	r23, Y+2	; 0x02
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	0e 94 86 24 	call	0x490c	; 0x490c <__gesf2>
    25e6:	88 23       	and	r24, r24
    25e8:	4c f0       	brlt	.+18     	; 0x25fc <data_check+0x196>
    25ea:	a5 01       	movw	r20, r10
    25ec:	94 01       	movw	r18, r8
    25ee:	c3 01       	movw	r24, r6
    25f0:	b2 01       	movw	r22, r4
    25f2:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    25f6:	2b 01       	movw	r4, r22
    25f8:	3c 01       	movw	r6, r24
    25fa:	33 94       	inc	r3
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2600:	01 96       	adiw	r24, 0x01	; 1
    2602:	8d 83       	std	Y+5, r24	; 0x05
    2604:	9e 83       	std	Y+6, r25	; 0x06
    2606:	05 97       	sbiw	r24, 0x05	; 5
    2608:	09 f0       	breq	.+2      	; 0x260c <data_check+0x1a6>
    260a:	b9 cf       	rjmp	.-142    	; 0x257e <data_check+0x118>
    260c:	33 20       	and	r3, r3
    260e:	69 f0       	breq	.+26     	; 0x262a <data_check+0x1c4>
    2610:	63 2d       	mov	r22, r3
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    261c:	9b 01       	movw	r18, r22
    261e:	ac 01       	movw	r20, r24
    2620:	c3 01       	movw	r24, r6
    2622:	b2 01       	movw	r22, r4
    2624:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    2628:	04 c0       	rjmp	.+8      	; 0x2632 <data_check+0x1cc>
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	80 e8       	ldi	r24, 0x80	; 128
    2630:	9f eb       	ldi	r25, 0xBF	; 191
    2632:	26 96       	adiw	r28, 0x06	; 6
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	ff 90       	pop	r15
    2642:	ef 90       	pop	r14
    2644:	df 90       	pop	r13
    2646:	cf 90       	pop	r12
    2648:	bf 90       	pop	r11
    264a:	af 90       	pop	r10
    264c:	9f 90       	pop	r9
    264e:	8f 90       	pop	r8
    2650:	7f 90       	pop	r7
    2652:	6f 90       	pop	r6
    2654:	5f 90       	pop	r5
    2656:	4f 90       	pop	r4
    2658:	3f 90       	pop	r3
    265a:	08 95       	ret

0000265c <data_collect>:
    265c:	af 92       	push	r10
    265e:	bf 92       	push	r11
    2660:	cf 92       	push	r12
    2662:	df 92       	push	r13
    2664:	ef 92       	push	r14
    2666:	ff 92       	push	r15
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	00 d0       	rcall	.+0      	; 0x2672 <data_collect+0x16>
    2672:	00 d0       	rcall	.+0      	; 0x2674 <data_collect+0x18>
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	5c 01       	movw	r10, r24
    267a:	8b 01       	movw	r16, r22
    267c:	16 dd       	rcall	.-1492   	; 0x20aa <get_pressure>
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e2       	ldi	r20, 0x20	; 32
    2684:	51 e4       	ldi	r21, 0x41	; 65
    2686:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    268a:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    268e:	69 83       	std	Y+1, r22	; 0x01
    2690:	7a 83       	std	Y+2, r23	; 0x02
    2692:	8b 83       	std	Y+3, r24	; 0x03
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	be 01       	movw	r22, r28
    269c:	6f 5f       	subi	r22, 0xFF	; 255
    269e:	7f 4f       	sbci	r23, 0xFF	; 255
    26a0:	c8 01       	movw	r24, r16
    26a2:	83 db       	rcall	.-2298   	; 0x1daa <rb32_write>
    26a4:	c8 01       	movw	r24, r16
    26a6:	df de       	rcall	.-578    	; 0x2466 <data_check>
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    26b4:	6b 01       	movw	r12, r22
    26b6:	7c 01       	movw	r14, r24
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e8       	ldi	r20, 0x80	; 128
    26be:	5f eb       	ldi	r21, 0xBF	; 191
    26c0:	0e 94 37 23 	call	0x466e	; 0x466e <__cmpsf2>
    26c4:	88 23       	and	r24, r24
    26c6:	d1 f1       	breq	.+116    	; 0x273c <data_collect+0xe0>
    26c8:	c0 92 1a 21 	sts	0x211A, r12	; 0x80211a <press>
    26cc:	d0 92 1b 21 	sts	0x211B, r13	; 0x80211b <press+0x1>
    26d0:	e0 92 1c 21 	sts	0x211C, r14	; 0x80211c <press+0x2>
    26d4:	f0 92 1d 21 	sts	0x211D, r15	; 0x80211d <press+0x3>
    26d8:	c7 01       	movw	r24, r14
    26da:	b6 01       	movw	r22, r12
    26dc:	89 dd       	rcall	.-1262   	; 0x21f0 <get_altitude>
    26de:	60 93 12 21 	sts	0x2112, r22	; 0x802112 <alt>
    26e2:	70 93 13 21 	sts	0x2113, r23	; 0x802113 <alt+0x1>
    26e6:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <alt+0x2>
    26ea:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <alt+0x3>
    26ee:	60 91 12 21 	lds	r22, 0x2112	; 0x802112 <alt>
    26f2:	70 91 13 21 	lds	r23, 0x2113	; 0x802113 <alt+0x1>
    26f6:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <alt+0x2>
    26fa:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <alt+0x3>
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	48 ec       	ldi	r20, 0xC8	; 200
    2704:	52 e4       	ldi	r21, 0x42	; 66
    2706:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    270a:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    270e:	6d 83       	std	Y+5, r22	; 0x05
    2710:	7e 83       	std	Y+6, r23	; 0x06
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	be 01       	movw	r22, r28
    2718:	6b 5f       	subi	r22, 0xFB	; 251
    271a:	7f 4f       	sbci	r23, 0xFF	; 255
    271c:	c5 01       	movw	r24, r10
    271e:	cf da       	rcall	.-2658   	; 0x1cbe <rb16_write>
    2720:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    2724:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    2728:	c5 01       	movw	r24, r10
    272a:	ea dd       	rcall	.-1068   	; 0x2300 <diff>
    272c:	60 93 0a 21 	sts	0x210A, r22	; 0x80210a <velocity>
    2730:	70 93 0b 21 	sts	0x210B, r23	; 0x80210b <velocity+0x1>
    2734:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <velocity+0x2>
    2738:	90 93 0d 21 	sts	0x210D, r25	; 0x80210d <velocity+0x3>
    273c:	83 e3       	ldi	r24, 0x33	; 51
    273e:	93 e1       	ldi	r25, 0x13	; 19
    2740:	a5 e9       	ldi	r26, 0x95	; 149
    2742:	b3 e4       	ldi	r27, 0x43	; 67
    2744:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <temp>
    2748:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <temp+0x1>
    274c:	a0 93 18 21 	sts	0x2118, r26	; 0x802118 <temp+0x2>
    2750:	b0 93 19 21 	sts	0x2119, r27	; 0x802119 <temp+0x3>
    2754:	ac dd       	rcall	.-1192   	; 0x22ae <get_voltage>
    2756:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <volt>
    275a:	70 93 0f 21 	sts	0x210F, r23	; 0x80210f <volt+0x1>
    275e:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <volt+0x2>
    2762:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <volt+0x3>
    2766:	26 96       	adiw	r28, 0x06	; 6
    2768:	cd bf       	out	0x3d, r28	; 61
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	df 90       	pop	r13
    277a:	cf 90       	pop	r12
    277c:	bf 90       	pop	r11
    277e:	af 90       	pop	r10
    2780:	08 95       	ret

00002782 <state_check>:
    2782:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <state>
    2786:	81 30       	cpi	r24, 0x01	; 1
    2788:	81 f1       	breq	.+96     	; 0x27ea <state_check+0x68>
    278a:	38 f0       	brcs	.+14     	; 0x279a <state_check+0x18>
    278c:	82 30       	cpi	r24, 0x02	; 2
    278e:	09 f4       	brne	.+2      	; 0x2792 <state_check+0x10>
    2790:	55 c0       	rjmp	.+170    	; 0x283c <state_check+0xba>
    2792:	83 30       	cpi	r24, 0x03	; 3
    2794:	09 f4       	brne	.+2      	; 0x2798 <state_check+0x16>
    2796:	fc c0       	rjmp	.+504    	; 0x2990 <state_check+0x20e>
    2798:	7c c0       	rjmp	.+248    	; 0x2892 <state_check+0x110>
    279a:	60 91 0a 21 	lds	r22, 0x210A	; 0x80210a <velocity>
    279e:	70 91 0b 21 	lds	r23, 0x210B	; 0x80210b <velocity+0x1>
    27a2:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <velocity+0x2>
    27a6:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <velocity+0x3>
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e4       	ldi	r20, 0x40	; 64
    27b0:	50 e4       	ldi	r21, 0x40	; 64
    27b2:	0e 94 37 23 	call	0x466e	; 0x466e <__cmpsf2>
    27b6:	88 23       	and	r24, r24
    27b8:	0c f0       	brlt	.+2      	; 0x27bc <state_check+0x3a>
    27ba:	ea c0       	rjmp	.+468    	; 0x2990 <state_check+0x20e>
    27bc:	60 91 12 21 	lds	r22, 0x2112	; 0x802112 <alt>
    27c0:	70 91 13 21 	lds	r23, 0x2113	; 0x802113 <alt+0x1>
    27c4:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <alt+0x2>
    27c8:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <alt+0x3>
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	41 ee       	ldi	r20, 0xE1	; 225
    27d2:	53 e4       	ldi	r21, 0x43	; 67
    27d4:	0e 94 86 24 	call	0x490c	; 0x490c <__gesf2>
    27d8:	18 16       	cp	r1, r24
    27da:	0c f0       	brlt	.+2      	; 0x27de <state_check+0x5c>
    27dc:	d9 c0       	rjmp	.+434    	; 0x2990 <state_check+0x20e>
    27de:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <state>
    27e2:	8f 5f       	subi	r24, 0xFF	; 255
    27e4:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <state>
    27e8:	08 95       	ret
    27ea:	60 91 0a 21 	lds	r22, 0x210A	; 0x80210a <velocity>
    27ee:	70 91 0b 21 	lds	r23, 0x210B	; 0x80210b <velocity+0x1>
    27f2:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <velocity+0x2>
    27f6:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <velocity+0x3>
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e4       	ldi	r20, 0x40	; 64
    2800:	50 e4       	ldi	r21, 0x40	; 64
    2802:	0e 94 37 23 	call	0x466e	; 0x466e <__cmpsf2>
    2806:	88 23       	and	r24, r24
    2808:	84 f4       	brge	.+32     	; 0x282a <state_check+0xa8>
    280a:	60 91 12 21 	lds	r22, 0x2112	; 0x802112 <alt>
    280e:	70 91 13 21 	lds	r23, 0x2113	; 0x802113 <alt+0x1>
    2812:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <alt+0x2>
    2816:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <alt+0x3>
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	41 ee       	ldi	r20, 0xE1	; 225
    2820:	53 e4       	ldi	r21, 0x43	; 67
    2822:	0e 94 37 23 	call	0x466e	; 0x466e <__cmpsf2>
    2826:	88 23       	and	r24, r24
    2828:	1c f0       	brlt	.+6      	; 0x2830 <state_check+0xae>
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <released>
    2830:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <state>
    2834:	8f 5f       	subi	r24, 0xFF	; 255
    2836:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <state>
    283a:	08 95       	ret
    283c:	60 91 0a 21 	lds	r22, 0x210A	; 0x80210a <velocity>
    2840:	70 91 0b 21 	lds	r23, 0x210B	; 0x80210b <velocity+0x1>
    2844:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <velocity+0x2>
    2848:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <velocity+0x3>
    284c:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2850:	9b 01       	movw	r18, r22
    2852:	77 23       	and	r23, r23
    2854:	24 f4       	brge	.+8      	; 0x285e <state_check+0xdc>
    2856:	22 27       	eor	r18, r18
    2858:	33 27       	eor	r19, r19
    285a:	26 1b       	sub	r18, r22
    285c:	37 0b       	sbc	r19, r23
    285e:	23 30       	cpi	r18, 0x03	; 3
    2860:	31 05       	cpc	r19, r1
    2862:	8c f0       	brlt	.+34     	; 0x2886 <state_check+0x104>
    2864:	60 91 12 21 	lds	r22, 0x2112	; 0x802112 <alt>
    2868:	70 91 13 21 	lds	r23, 0x2113	; 0x802113 <alt+0x1>
    286c:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <alt+0x2>
    2870:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <alt+0x3>
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 37 23 	call	0x466e	; 0x466e <__cmpsf2>
    2880:	88 23       	and	r24, r24
    2882:	0c f0       	brlt	.+2      	; 0x2886 <state_check+0x104>
    2884:	85 c0       	rjmp	.+266    	; 0x2990 <state_check+0x20e>
    2886:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <state>
    288a:	8f 5f       	subi	r24, 0xFF	; 255
    288c:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <state>
    2890:	08 95       	ret
    2892:	60 91 0a 21 	lds	r22, 0x210A	; 0x80210a <velocity>
    2896:	70 91 0b 21 	lds	r23, 0x210B	; 0x80210b <velocity+0x1>
    289a:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <velocity+0x2>
    289e:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <velocity+0x3>
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e4       	ldi	r20, 0x40	; 64
    28a8:	50 e4       	ldi	r21, 0x40	; 64
    28aa:	0e 94 86 24 	call	0x490c	; 0x490c <__gesf2>
    28ae:	18 16       	cp	r1, r24
    28b0:	14 f4       	brge	.+4      	; 0x28b6 <state_check+0x134>
    28b2:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <state>
    28b6:	60 91 12 21 	lds	r22, 0x2112	; 0x802112 <alt>
    28ba:	70 91 13 21 	lds	r23, 0x2113	; 0x802113 <alt+0x1>
    28be:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <alt+0x2>
    28c2:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <alt+0x3>
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	41 ee       	ldi	r20, 0xE1	; 225
    28cc:	53 e4       	ldi	r21, 0x43	; 67
    28ce:	0e 94 86 24 	call	0x490c	; 0x490c <__gesf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	9c f4       	brge	.+38     	; 0x28fc <state_check+0x17a>
    28d6:	60 91 0a 21 	lds	r22, 0x210A	; 0x80210a <velocity>
    28da:	70 91 0b 21 	lds	r23, 0x210B	; 0x80210b <velocity+0x1>
    28de:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <velocity+0x2>
    28e2:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <velocity+0x3>
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	40 e4       	ldi	r20, 0x40	; 64
    28ec:	50 e4       	ldi	r21, 0x40	; 64
    28ee:	0e 94 37 23 	call	0x466e	; 0x466e <__cmpsf2>
    28f2:	88 23       	and	r24, r24
    28f4:	1c f4       	brge	.+6      	; 0x28fc <state_check+0x17a>
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <state>
    28fc:	60 91 12 21 	lds	r22, 0x2112	; 0x802112 <alt>
    2900:	70 91 13 21 	lds	r23, 0x2113	; 0x802113 <alt+0x1>
    2904:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <alt+0x2>
    2908:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <alt+0x3>
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	41 ee       	ldi	r20, 0xE1	; 225
    2912:	53 e4       	ldi	r21, 0x43	; 67
    2914:	0e 94 37 23 	call	0x466e	; 0x466e <__cmpsf2>
    2918:	88 23       	and	r24, r24
    291a:	9c f4       	brge	.+38     	; 0x2942 <state_check+0x1c0>
    291c:	60 91 0a 21 	lds	r22, 0x210A	; 0x80210a <velocity>
    2920:	70 91 0b 21 	lds	r23, 0x210B	; 0x80210b <velocity+0x1>
    2924:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <velocity+0x2>
    2928:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <velocity+0x3>
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e4       	ldi	r20, 0x40	; 64
    2932:	50 e4       	ldi	r21, 0x40	; 64
    2934:	0e 94 37 23 	call	0x466e	; 0x466e <__cmpsf2>
    2938:	88 23       	and	r24, r24
    293a:	1c f4       	brge	.+6      	; 0x2942 <state_check+0x1c0>
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <state>
    2942:	60 91 0a 21 	lds	r22, 0x210A	; 0x80210a <velocity>
    2946:	70 91 0b 21 	lds	r23, 0x210B	; 0x80210b <velocity+0x1>
    294a:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <velocity+0x2>
    294e:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <velocity+0x3>
    2952:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2956:	9b 01       	movw	r18, r22
    2958:	77 23       	and	r23, r23
    295a:	24 f4       	brge	.+8      	; 0x2964 <state_check+0x1e2>
    295c:	22 27       	eor	r18, r18
    295e:	33 27       	eor	r19, r19
    2960:	26 1b       	sub	r18, r22
    2962:	37 0b       	sbc	r19, r23
    2964:	23 30       	cpi	r18, 0x03	; 3
    2966:	31 05       	cpc	r19, r1
    2968:	9c f4       	brge	.+38     	; 0x2990 <state_check+0x20e>
    296a:	60 91 12 21 	lds	r22, 0x2112	; 0x802112 <alt>
    296e:	70 91 13 21 	lds	r23, 0x2113	; 0x802113 <alt+0x1>
    2972:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <alt+0x2>
    2976:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <alt+0x3>
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e2       	ldi	r20, 0x20	; 32
    2980:	51 e4       	ldi	r21, 0x41	; 65
    2982:	0e 94 37 23 	call	0x466e	; 0x466e <__cmpsf2>
    2986:	88 23       	and	r24, r24
    2988:	1c f4       	brge	.+6      	; 0x2990 <state_check+0x20e>
    298a:	83 e0       	ldi	r24, 0x03	; 3
    298c:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <state>
    2990:	08 95       	ret

00002992 <release_servo_init>:
    2992:	61 e0       	ldi	r22, 0x01	; 1
    2994:	84 e0       	ldi	r24, 0x04	; 4
    2996:	ce da       	rcall	.-2660   	; 0x1f34 <sysclk_enable_module>
    2998:	64 e0       	ldi	r22, 0x04	; 4
    299a:	84 e0       	ldi	r24, 0x04	; 4
    299c:	cb da       	rcall	.-2666   	; 0x1f34 <sysclk_enable_module>
    299e:	e0 e6       	ldi	r30, 0x60	; 96
    29a0:	f6 e0       	ldi	r31, 0x06	; 6
    29a2:	80 81       	ld	r24, Z
    29a4:	87 60       	ori	r24, 0x07	; 7
    29a6:	80 83       	st	Z, r24
    29a8:	e0 e0       	ldi	r30, 0x00	; 0
    29aa:	f9 e0       	ldi	r31, 0x09	; 9
    29ac:	85 e0       	ldi	r24, 0x05	; 5
    29ae:	80 83       	st	Z, r24
    29b0:	83 e1       	ldi	r24, 0x13	; 19
    29b2:	81 83       	std	Z+1, r24	; 0x01
    29b4:	80 e1       	ldi	r24, 0x10	; 16
    29b6:	97 e2       	ldi	r25, 0x27	; 39
    29b8:	86 a3       	std	Z+38, r24	; 0x26
    29ba:	97 a3       	std	Z+39, r25	; 0x27
    29bc:	86 a1       	ldd	r24, Z+38	; 0x26
    29be:	97 a1       	ldd	r25, Z+39	; 0x27
    29c0:	88 55       	subi	r24, 0x58	; 88
    29c2:	92 40       	sbci	r25, 0x02	; 2
    29c4:	80 a7       	std	Z+40, r24	; 0x28
    29c6:	91 a7       	std	Z+41, r25	; 0x29
    29c8:	08 95       	ret

000029ca <servo_pid>:
    29ca:	8f 92       	push	r8
    29cc:	9f 92       	push	r9
    29ce:	af 92       	push	r10
    29d0:	bf 92       	push	r11
    29d2:	cf 92       	push	r12
    29d4:	df 92       	push	r13
    29d6:	ef 92       	push	r14
    29d8:	ff 92       	push	r15
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	7c 01       	movw	r14, r24
    29e4:	c0 e0       	ldi	r28, 0x00	; 0
    29e6:	d0 e0       	ldi	r29, 0x00	; 0
    29e8:	00 e0       	ldi	r16, 0x00	; 0
    29ea:	10 e0       	ldi	r17, 0x00	; 0
    29ec:	be 01       	movw	r22, r28
    29ee:	c7 01       	movw	r24, r14
    29f0:	af d9       	rcall	.-3234   	; 0x1d50 <rb16_get_nth>
    29f2:	08 0f       	add	r16, r24
    29f4:	19 1f       	adc	r17, r25
    29f6:	21 96       	adiw	r28, 0x01	; 1
    29f8:	ca 30       	cpi	r28, 0x0A	; 10
    29fa:	d1 05       	cpc	r29, r1
    29fc:	b9 f7       	brne	.-18     	; 0x29ec <servo_pid+0x22>
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	c7 01       	movw	r24, r14
    2a04:	a5 d9       	rcall	.-3254   	; 0x1d50 <rb16_get_nth>
    2a06:	ec 01       	movw	r28, r24
    2a08:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    2a0c:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    2a10:	c7 01       	movw	r24, r14
    2a12:	76 dc       	rcall	.-1812   	; 0x2300 <diff>
    2a14:	6b 01       	movw	r12, r22
    2a16:	7c 01       	movw	r14, r24
    2a18:	be 01       	movw	r22, r28
    2a1a:	dd 0f       	add	r29, r29
    2a1c:	88 0b       	sbc	r24, r24
    2a1e:	99 0b       	sbc	r25, r25
    2a20:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__floatsisf>
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	a9 01       	movw	r20, r18
    2a2a:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	48 ec       	ldi	r20, 0xC8	; 200
    2a34:	52 e4       	ldi	r21, 0x42	; 66
    2a36:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    2a3a:	4b 01       	movw	r8, r22
    2a3c:	5c 01       	movw	r10, r24
    2a3e:	b8 01       	movw	r22, r16
    2a40:	11 0f       	add	r17, r17
    2a42:	88 0b       	sbc	r24, r24
    2a44:	99 0b       	sbc	r25, r25
    2a46:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__floatsisf>
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	a9 01       	movw	r20, r18
    2a50:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	48 ec       	ldi	r20, 0xC8	; 200
    2a5a:	52 e4       	ldi	r21, 0x42	; 66
    2a5c:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    2a60:	9b 01       	movw	r18, r22
    2a62:	ac 01       	movw	r20, r24
    2a64:	c5 01       	movw	r24, r10
    2a66:	b4 01       	movw	r22, r8
    2a68:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    2a6c:	4b 01       	movw	r8, r22
    2a6e:	5c 01       	movw	r10, r24
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	a9 01       	movw	r20, r18
    2a76:	c7 01       	movw	r24, r14
    2a78:	b6 01       	movw	r22, r12
    2a7a:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2a7e:	9b 01       	movw	r18, r22
    2a80:	ac 01       	movw	r20, r24
    2a82:	c5 01       	movw	r24, r10
    2a84:	b4 01       	movw	r22, r8
    2a86:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e8       	ldi	r19, 0x80	; 128
    2a8e:	4b eb       	ldi	r20, 0xBB	; 187
    2a90:	54 e4       	ldi	r21, 0x44	; 68
    2a92:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    2a96:	0e 94 a8 23 	call	0x4750	; 0x4750 <__fixunssfsi>
    2a9a:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <servo_pulse>
    2a9e:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <servo_pulse+0x1>
    2aa2:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <servo_pulse>
    2aa6:	70 91 1a 20 	lds	r23, 0x201A	; 0x80201a <servo_pulse+0x1>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	4a e7       	ldi	r20, 0x7A	; 122
    2ab8:	54 e4       	ldi	r21, 0x44	; 68
    2aba:	0e 94 3b 23 	call	0x4676	; 0x4676 <__divsf3>
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	4a ef       	ldi	r20, 0xFA	; 250
    2ac4:	53 e4       	ldi	r21, 0x43	; 67
    2ac6:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2aca:	0e 94 a8 23 	call	0x4750	; 0x4750 <__fixunssfsi>
    2ace:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    2ad2:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	ff 90       	pop	r15
    2ae0:	ef 90       	pop	r14
    2ae2:	df 90       	pop	r13
    2ae4:	cf 90       	pop	r12
    2ae6:	bf 90       	pop	r11
    2ae8:	af 90       	pop	r10
    2aea:	9f 90       	pop	r9
    2aec:	8f 90       	pop	r8
    2aee:	08 95       	ret

00002af0 <clock_init>:
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	85 e0       	ldi	r24, 0x05	; 5
    2af4:	1f da       	rcall	.-3010   	; 0x1f34 <sysclk_enable_module>
    2af6:	e0 e0       	ldi	r30, 0x00	; 0
    2af8:	fa e0       	ldi	r31, 0x0A	; 10
    2afa:	87 e0       	ldi	r24, 0x07	; 7
    2afc:	80 83       	st	Z, r24
    2afe:	84 e3       	ldi	r24, 0x34	; 52
    2b00:	9c e0       	ldi	r25, 0x0C	; 12
    2b02:	86 a3       	std	Z+38, r24	; 0x26
    2b04:	97 a3       	std	Z+39, r25	; 0x27
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	86 83       	std	Z+6, r24	; 0x06
    2b0a:	08 95       	ret

00002b0c <calc_rpm>:
    2b0c:	cf 92       	push	r12
    2b0e:	df 92       	push	r13
    2b10:	ef 92       	push	r14
    2b12:	ff 92       	push	r15
    2b14:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <ticks_per_sec>
    2b18:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <ticks_per_sec+0x1>
    2b1c:	c0 90 ec 20 	lds	r12, 0x20EC	; 0x8020ec <rpm>
    2b20:	d0 90 ed 20 	lds	r13, 0x20ED	; 0x8020ed <rpm+0x1>
    2b24:	e0 90 ee 20 	lds	r14, 0x20EE	; 0x8020ee <rpm+0x2>
    2b28:	f0 90 ef 20 	lds	r15, 0x20EF	; 0x8020ef <rpm+0x3>
    2b2c:	2c e3       	ldi	r18, 0x3C	; 60
    2b2e:	28 9f       	mul	r18, r24
    2b30:	b0 01       	movw	r22, r0
    2b32:	29 9f       	mul	r18, r25
    2b34:	70 0d       	add	r23, r0
    2b36:	11 24       	eor	r1, r1
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__floatunsisf>
    2b40:	a7 01       	movw	r20, r14
    2b42:	96 01       	movw	r18, r12
    2b44:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__addsf3>
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	5f e3       	ldi	r21, 0x3F	; 63
    2b50:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2b54:	60 93 ec 20 	sts	0x20EC, r22	; 0x8020ec <rpm>
    2b58:	70 93 ed 20 	sts	0x20ED, r23	; 0x8020ed <rpm+0x1>
    2b5c:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <rpm+0x2>
    2b60:	90 93 ef 20 	sts	0x20EF, r25	; 0x8020ef <rpm+0x3>
    2b64:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <ticks_per_sec>
    2b68:	10 92 2b 21 	sts	0x212B, r1	; 0x80212b <ticks_per_sec+0x1>
    2b6c:	ff 90       	pop	r15
    2b6e:	ef 90       	pop	r14
    2b70:	df 90       	pop	r13
    2b72:	cf 90       	pop	r12
    2b74:	08 95       	ret

00002b76 <cali_alt>:
    2b76:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <press>
    2b7a:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <press+0x1>
    2b7e:	a0 91 1c 21 	lds	r26, 0x211C	; 0x80211c <press+0x2>
    2b82:	b0 91 1d 21 	lds	r27, 0x211D	; 0x80211d <press+0x3>
    2b86:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <ground_p>
    2b8a:	90 93 2c 20 	sts	0x202C, r25	; 0x80202c <ground_p+0x1>
    2b8e:	a0 93 2d 20 	sts	0x202D, r26	; 0x80202d <ground_p+0x2>
    2b92:	b0 93 2e 20 	sts	0x202E, r27	; 0x80202e <ground_p+0x3>
    2b96:	83 e3       	ldi	r24, 0x33	; 51
    2b98:	93 e1       	ldi	r25, 0x13	; 19
    2b9a:	a5 e9       	ldi	r26, 0x95	; 149
    2b9c:	b3 e4       	ldi	r27, 0x43	; 67
    2b9e:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    2ba2:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    2ba6:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    2baa:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    2bae:	08 95       	ret

00002bb0 <cali_ang>:
    2bb0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <imu_heading>
    2bb4:	60 93 2c 21 	sts	0x212C, r22	; 0x80212c <ref_yaw>
    2bb8:	70 93 2d 21 	sts	0x212D, r23	; 0x80212d <ref_yaw+0x1>
    2bbc:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <ref_yaw+0x2>
    2bc0:	90 93 2f 21 	sts	0x212F, r25	; 0x80212f <ref_yaw+0x3>
    2bc4:	08 95       	ret

00002bc6 <calibrate>:
    2bc6:	d7 df       	rcall	.-82     	; 0x2b76 <cali_alt>
    2bc8:	f3 cf       	rjmp	.-26     	; 0x2bb0 <cali_ang>
    2bca:	08 95       	ret

00002bcc <servo_release>:
    2bcc:	e0 e0       	ldi	r30, 0x00	; 0
    2bce:	f9 e0       	ldi	r31, 0x09	; 9
    2bd0:	86 a1       	ldd	r24, Z+38	; 0x26
    2bd2:	97 a1       	ldd	r25, Z+39	; 0x27
    2bd4:	88 5e       	subi	r24, 0xE8	; 232
    2bd6:	93 40       	sbci	r25, 0x03	; 3
    2bd8:	80 a7       	std	Z+40, r24	; 0x28
    2bda:	91 a7       	std	Z+41, r25	; 0x29
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <released>
    2be2:	08 95       	ret

00002be4 <servo_close>:

	released = 1;
}

void servo_close(void){
	TCD0.CCA = TCD0.PER - 600;
    2be4:	e0 e0       	ldi	r30, 0x00	; 0
    2be6:	f9 e0       	ldi	r31, 0x09	; 9
    2be8:	86 a1       	ldd	r24, Z+38	; 0x26
    2bea:	97 a1       	ldd	r25, Z+39	; 0x27
    2bec:	88 55       	subi	r24, 0x58	; 88
    2bee:	92 40       	sbci	r25, 0x02	; 2
    2bf0:	80 a7       	std	Z+40, r24	; 0x28
    2bf2:	91 a7       	std	Z+41, r25	; 0x29

	released = 0;
    2bf4:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <released>
    2bf8:	08 95       	ret

00002bfa <packet>:
}

void packet(void){
    2bfa:	2f 92       	push	r2
    2bfc:	3f 92       	push	r3
    2bfe:	4f 92       	push	r4
    2c00:	5f 92       	push	r5
    2c02:	6f 92       	push	r6
    2c04:	7f 92       	push	r7
    2c06:	8f 92       	push	r8
    2c08:	9f 92       	push	r9
    2c0a:	af 92       	push	r10
    2c0c:	bf 92       	push	r11
    2c0e:	cf 92       	push	r12
    2c10:	df 92       	push	r13
    2c12:	ef 92       	push	r14
    2c14:	ff 92       	push	r15
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	e9 97       	sbiw	r28, 0x39	; 57
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	de bf       	out	0x3e, r29	; 62
	//XBEE_spi_write(str);
	packets++;
    2c28:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <packets>
    2c2c:	90 91 1f 21 	lds	r25, 0x211F	; 0x80211f <packets+0x1>
    2c30:	01 96       	adiw	r24, 0x01	; 1
    2c32:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <packets>
    2c36:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    2c3a:	60 91 e8 20 	lds	r22, 0x20E8	; 0x8020e8 <angle>
    2c3e:	70 91 e9 20 	lds	r23, 0x20E9	; 0x8020e9 <angle+0x1>
    2c42:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <angle+0x2>
    2c46:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <angle+0x3>
    2c4a:	20 91 40 21 	lds	r18, 0x2140	; 0x802140 <state>
    2c4e:	29 83       	std	Y+1, r18	; 0x01
    2c50:	40 90 ec 20 	lds	r4, 0x20EC	; 0x8020ec <rpm>
    2c54:	50 90 ed 20 	lds	r5, 0x20ED	; 0x8020ed <rpm+0x1>
    2c58:	60 90 ee 20 	lds	r6, 0x20EE	; 0x8020ee <rpm+0x2>
    2c5c:	70 90 ef 20 	lds	r7, 0x20EF	; 0x8020ef <rpm+0x3>
    2c60:	80 90 f0 20 	lds	r8, 0x20F0	; 0x8020f0 <roll>
    2c64:	90 90 f1 20 	lds	r9, 0x20F1	; 0x8020f1 <roll+0x1>
    2c68:	a0 90 f2 20 	lds	r10, 0x20F2	; 0x8020f2 <roll+0x2>
    2c6c:	b0 90 f3 20 	lds	r11, 0x20F3	; 0x8020f3 <roll+0x3>
    2c70:	c0 90 f4 20 	lds	r12, 0x20F4	; 0x8020f4 <pitch>
    2c74:	d0 90 f5 20 	lds	r13, 0x20F5	; 0x8020f5 <pitch+0x1>
    2c78:	e0 90 f6 20 	lds	r14, 0x20F6	; 0x8020f6 <pitch+0x2>
    2c7c:	f0 90 f7 20 	lds	r15, 0x20F7	; 0x8020f7 <pitch+0x3>
    2c80:	40 91 f8 20 	lds	r20, 0x20F8	; 0x8020f8 <gps_sats>
    2c84:	50 91 f9 20 	lds	r21, 0x20F9	; 0x8020f9 <gps_sats+0x1>
    2c88:	48 af       	std	Y+56, r20	; 0x38
    2c8a:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    2c8c:	20 91 fa 20 	lds	r18, 0x20FA	; 0x8020fa <gps_alt>
    2c90:	30 91 fb 20 	lds	r19, 0x20FB	; 0x8020fb <gps_alt+0x1>
    2c94:	40 91 fc 20 	lds	r20, 0x20FC	; 0x8020fc <gps_alt+0x2>
    2c98:	50 91 fd 20 	lds	r21, 0x20FD	; 0x8020fd <gps_alt+0x3>
    2c9c:	2a 83       	std	Y+2, r18	; 0x02
    2c9e:	3b 83       	std	Y+3, r19	; 0x03
    2ca0:	4c 83       	std	Y+4, r20	; 0x04
    2ca2:	5d 83       	std	Y+5, r21	; 0x05
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2ca4:	20 91 fa 20 	lds	r18, 0x20FA	; 0x8020fa <gps_alt>
    2ca8:	30 91 fb 20 	lds	r19, 0x20FB	; 0x8020fb <gps_alt+0x1>
    2cac:	40 91 fc 20 	lds	r20, 0x20FC	; 0x8020fc <gps_alt+0x2>
    2cb0:	50 91 fd 20 	lds	r21, 0x20FD	; 0x8020fd <gps_alt+0x3>
    2cb4:	2e 83       	std	Y+6, r18	; 0x06
    2cb6:	3f 83       	std	Y+7, r19	; 0x07
    2cb8:	48 87       	std	Y+8, r20	; 0x08
    2cba:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2cbc:	20 91 fe 20 	lds	r18, 0x20FE	; 0x8020fe <gps_long>
    2cc0:	30 91 ff 20 	lds	r19, 0x20FF	; 0x8020ff <gps_long+0x1>
    2cc4:	40 91 00 21 	lds	r20, 0x2100	; 0x802100 <gps_long+0x2>
    2cc8:	50 91 01 21 	lds	r21, 0x2101	; 0x802101 <gps_long+0x3>
    2ccc:	2a 87       	std	Y+10, r18	; 0x0a
    2cce:	3b 87       	std	Y+11, r19	; 0x0b
    2cd0:	4c 87       	std	Y+12, r20	; 0x0c
    2cd2:	5d 87       	std	Y+13, r21	; 0x0d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2cd4:	20 91 fe 20 	lds	r18, 0x20FE	; 0x8020fe <gps_long>
    2cd8:	30 91 ff 20 	lds	r19, 0x20FF	; 0x8020ff <gps_long+0x1>
    2cdc:	40 91 00 21 	lds	r20, 0x2100	; 0x802100 <gps_long+0x2>
    2ce0:	50 91 01 21 	lds	r21, 0x2101	; 0x802101 <gps_long+0x3>
    2ce4:	2e 87       	std	Y+14, r18	; 0x0e
    2ce6:	3f 87       	std	Y+15, r19	; 0x0f
    2ce8:	48 8b       	std	Y+16, r20	; 0x10
    2cea:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2cec:	20 91 02 21 	lds	r18, 0x2102	; 0x802102 <gps_lat>
    2cf0:	30 91 03 21 	lds	r19, 0x2103	; 0x802103 <gps_lat+0x1>
    2cf4:	40 91 04 21 	lds	r20, 0x2104	; 0x802104 <gps_lat+0x2>
    2cf8:	50 91 05 21 	lds	r21, 0x2105	; 0x802105 <gps_lat+0x3>
    2cfc:	2a 8b       	std	Y+18, r18	; 0x12
    2cfe:	3b 8b       	std	Y+19, r19	; 0x13
    2d00:	4c 8b       	std	Y+20, r20	; 0x14
    2d02:	5d 8b       	std	Y+21, r21	; 0x15
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2d04:	20 91 02 21 	lds	r18, 0x2102	; 0x802102 <gps_lat>
    2d08:	30 91 03 21 	lds	r19, 0x2103	; 0x802103 <gps_lat+0x1>
    2d0c:	40 91 04 21 	lds	r20, 0x2104	; 0x802104 <gps_lat+0x2>
    2d10:	50 91 05 21 	lds	r21, 0x2105	; 0x802105 <gps_lat+0x3>
    2d14:	2e 8b       	std	Y+22, r18	; 0x16
    2d16:	3f 8b       	std	Y+23, r19	; 0x17
    2d18:	48 8f       	std	Y+24, r20	; 0x18
    2d1a:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    2d1c:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_t>
    2d20:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_t+0x1>
    2d24:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_t+0x2>
    2d28:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_t+0x3>
    2d2c:	2a 8f       	std	Y+26, r18	; 0x1a
    2d2e:	3b 8f       	std	Y+27, r19	; 0x1b
    2d30:	4c 8f       	std	Y+28, r20	; 0x1c
    2d32:	5d 8f       	std	Y+29, r21	; 0x1d
    2d34:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_t>
    2d38:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_t+0x1>
    2d3c:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_t+0x2>
    2d40:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_t+0x3>
    2d44:	2e 8f       	std	Y+30, r18	; 0x1e
    2d46:	3f 8f       	std	Y+31, r19	; 0x1f
    2d48:	48 a3       	std	Y+32, r20	; 0x20
    2d4a:	59 a3       	std	Y+33, r21	; 0x21
    2d4c:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_t>
    2d50:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_t+0x1>
    2d54:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_t+0x2>
    2d58:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_t+0x3>
    2d5c:	2a a3       	std	Y+34, r18	; 0x22
    2d5e:	3b a3       	std	Y+35, r19	; 0x23
    2d60:	4c a3       	std	Y+36, r20	; 0x24
    2d62:	5d a3       	std	Y+37, r21	; 0x25
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2d64:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <volt>
    2d68:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <volt+0x1>
    2d6c:	40 91 10 21 	lds	r20, 0x2110	; 0x802110 <volt+0x2>
    2d70:	50 91 11 21 	lds	r21, 0x2111	; 0x802111 <volt+0x3>
    2d74:	2e a3       	std	Y+38, r18	; 0x26
    2d76:	3f a3       	std	Y+39, r19	; 0x27
    2d78:	48 a7       	std	Y+40, r20	; 0x28
    2d7a:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    2d7c:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <temp>
    2d80:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <temp+0x1>
    2d84:	40 91 18 21 	lds	r20, 0x2118	; 0x802118 <temp+0x2>
    2d88:	50 91 19 21 	lds	r21, 0x2119	; 0x802119 <temp+0x3>
    2d8c:	2a a7       	std	Y+42, r18	; 0x2a
    2d8e:	3b a7       	std	Y+43, r19	; 0x2b
    2d90:	4c a7       	std	Y+44, r20	; 0x2c
    2d92:	5d a7       	std	Y+45, r21	; 0x2d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2d94:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <press>
    2d98:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <press+0x1>
    2d9c:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <press+0x2>
    2da0:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <press+0x3>
    2da4:	2e a7       	std	Y+46, r18	; 0x2e
    2da6:	3f a7       	std	Y+47, r19	; 0x2f
    2da8:	48 ab       	std	Y+48, r20	; 0x30
    2daa:	59 ab       	std	Y+49, r21	; 0x31
    2dac:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <alt>
    2db0:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <alt+0x1>
    2db4:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <alt+0x2>
    2db8:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <alt+0x3>
    2dbc:	2a ab       	std	Y+50, r18	; 0x32
    2dbe:	3b ab       	std	Y+51, r19	; 0x33
    2dc0:	4c ab       	std	Y+52, r20	; 0x34
    2dc2:	5d ab       	std	Y+53, r21	; 0x35
    2dc4:	00 91 1e 21 	lds	r16, 0x211E	; 0x80211e <packets>
    2dc8:	10 91 1f 21 	lds	r17, 0x211F	; 0x80211f <packets+0x1>
    2dcc:	20 90 22 21 	lds	r2, 0x2122	; 0x802122 <timer>
    2dd0:	30 90 23 21 	lds	r3, 0x2123	; 0x802123 <timer+0x1>
    2dd4:	40 91 22 21 	lds	r20, 0x2122	; 0x802122 <timer>
    2dd8:	50 91 23 21 	lds	r21, 0x2123	; 0x802123 <timer+0x1>
    2ddc:	4e ab       	std	Y+54, r20	; 0x36
    2dde:	5f ab       	std	Y+55, r21	; 0x37
    2de0:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2de4:	7f 93       	push	r23
    2de6:	6f 93       	push	r22
    2de8:	1f 92       	push	r1
    2dea:	59 81       	ldd	r21, Y+1	; 0x01
    2dec:	5f 93       	push	r21
    2dee:	c3 01       	movw	r24, r6
    2df0:	b2 01       	movw	r22, r4
    2df2:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2df6:	7f 93       	push	r23
    2df8:	6f 93       	push	r22
    2dfa:	c5 01       	movw	r24, r10
    2dfc:	b4 01       	movw	r22, r8
    2dfe:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2e02:	7f 93       	push	r23
    2e04:	6f 93       	push	r22
    2e06:	c7 01       	movw	r24, r14
    2e08:	b6 01       	movw	r22, r12
    2e0a:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2e0e:	7f 93       	push	r23
    2e10:	6f 93       	push	r22
    2e12:	89 ad       	ldd	r24, Y+57	; 0x39
    2e14:	8f 93       	push	r24
    2e16:	98 ad       	ldd	r25, Y+56	; 0x38
    2e18:	9f 93       	push	r25
    2e1a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e1c:	7b 81       	ldd	r23, Y+3	; 0x03
    2e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e20:	9d 81       	ldd	r25, Y+5	; 0x05
    2e22:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2e26:	9b 01       	movw	r18, r22
    2e28:	22 0f       	add	r18, r18
    2e2a:	33 1f       	adc	r19, r19
    2e2c:	66 0f       	add	r22, r22
    2e2e:	77 1f       	adc	r23, r23
    2e30:	66 0f       	add	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	66 0f       	add	r22, r22
    2e36:	77 1f       	adc	r23, r23
    2e38:	c9 01       	movw	r24, r18
    2e3a:	86 0f       	add	r24, r22
    2e3c:	97 1f       	adc	r25, r23
    2e3e:	6a e0       	ldi	r22, 0x0A	; 10
    2e40:	70 e0       	ldi	r23, 0x00	; 0
    2e42:	0e 94 75 26 	call	0x4cea	; 0x4cea <__divmodhi4>
    2e46:	9f 93       	push	r25
    2e48:	8f 93       	push	r24
    2e4a:	6e 81       	ldd	r22, Y+6	; 0x06
    2e4c:	7f 81       	ldd	r23, Y+7	; 0x07
    2e4e:	88 85       	ldd	r24, Y+8	; 0x08
    2e50:	99 85       	ldd	r25, Y+9	; 0x09
    2e52:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2e56:	7f 93       	push	r23
    2e58:	6f 93       	push	r22
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	34 e2       	ldi	r19, 0x24	; 36
    2e5e:	44 e7       	ldi	r20, 0x74	; 116
    2e60:	59 e4       	ldi	r21, 0x49	; 73
    2e62:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e64:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e66:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e68:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e6a:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2e6e:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2e72:	20 e4       	ldi	r18, 0x40	; 64
    2e74:	32 e4       	ldi	r19, 0x42	; 66
    2e76:	4f e0       	ldi	r20, 0x0F	; 15
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__divmodsi4>
    2e7e:	9b 01       	movw	r18, r22
    2e80:	77 23       	and	r23, r23
    2e82:	24 f4       	brge	.+8      	; 0x2e8c <packet+0x292>
    2e84:	22 27       	eor	r18, r18
    2e86:	33 27       	eor	r19, r19
    2e88:	26 1b       	sub	r18, r22
    2e8a:	37 0b       	sbc	r19, r23
    2e8c:	c9 01       	movw	r24, r18
    2e8e:	33 0f       	add	r19, r19
    2e90:	aa 0b       	sbc	r26, r26
    2e92:	bb 0b       	sbc	r27, r27
    2e94:	bf 93       	push	r27
    2e96:	af 93       	push	r26
    2e98:	9f 93       	push	r25
    2e9a:	8f 93       	push	r24
    2e9c:	6e 85       	ldd	r22, Y+14	; 0x0e
    2e9e:	7f 85       	ldd	r23, Y+15	; 0x0f
    2ea0:	88 89       	ldd	r24, Y+16	; 0x10
    2ea2:	99 89       	ldd	r25, Y+17	; 0x11
    2ea4:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2ea8:	7f 93       	push	r23
    2eaa:	6f 93       	push	r22
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	34 e2       	ldi	r19, 0x24	; 36
    2eb0:	44 e7       	ldi	r20, 0x74	; 116
    2eb2:	59 e4       	ldi	r21, 0x49	; 73
    2eb4:	6a 89       	ldd	r22, Y+18	; 0x12
    2eb6:	7b 89       	ldd	r23, Y+19	; 0x13
    2eb8:	8c 89       	ldd	r24, Y+20	; 0x14
    2eba:	9d 89       	ldd	r25, Y+21	; 0x15
    2ebc:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
    2ec0:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2ec4:	20 e4       	ldi	r18, 0x40	; 64
    2ec6:	32 e4       	ldi	r19, 0x42	; 66
    2ec8:	4f e0       	ldi	r20, 0x0F	; 15
    2eca:	50 e0       	ldi	r21, 0x00	; 0
    2ecc:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__divmodsi4>
    2ed0:	9f 93       	push	r25
    2ed2:	8f 93       	push	r24
    2ed4:	7f 93       	push	r23
    2ed6:	6f 93       	push	r22
    2ed8:	6e 89       	ldd	r22, Y+22	; 0x16
    2eda:	7f 89       	ldd	r23, Y+23	; 0x17
    2edc:	88 8d       	ldd	r24, Y+24	; 0x18
    2ede:	99 8d       	ldd	r25, Y+25	; 0x19
    2ee0:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2ee4:	7f 93       	push	r23
    2ee6:	6f 93       	push	r22
    2ee8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2eea:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2eec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2eee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ef0:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2ef4:	0f 2e       	mov	r0, r31
    2ef6:	f4 e6       	ldi	r31, 0x64	; 100
    2ef8:	cf 2e       	mov	r12, r31
    2efa:	d1 2c       	mov	r13, r1
    2efc:	e1 2c       	mov	r14, r1
    2efe:	f1 2c       	mov	r15, r1
    2f00:	f0 2d       	mov	r31, r0
    2f02:	a7 01       	movw	r20, r14
    2f04:	96 01       	movw	r18, r12
    2f06:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__divmodsi4>
    2f0a:	7f 93       	push	r23
    2f0c:	6f 93       	push	r22
    2f0e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2f10:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2f12:	88 a1       	ldd	r24, Y+32	; 0x20
    2f14:	99 a1       	ldd	r25, Y+33	; 0x21
    2f16:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2f1a:	0f 2e       	mov	r0, r31
    2f1c:	f0 e1       	ldi	r31, 0x10	; 16
    2f1e:	8f 2e       	mov	r8, r31
    2f20:	f7 e2       	ldi	r31, 0x27	; 39
    2f22:	9f 2e       	mov	r9, r31
    2f24:	a1 2c       	mov	r10, r1
    2f26:	b1 2c       	mov	r11, r1
    2f28:	f0 2d       	mov	r31, r0
    2f2a:	a5 01       	movw	r20, r10
    2f2c:	94 01       	movw	r18, r8
    2f2e:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__divmodsi4>
    2f32:	a7 01       	movw	r20, r14
    2f34:	96 01       	movw	r18, r12
    2f36:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__divmodsi4>
    2f3a:	3f 93       	push	r19
    2f3c:	2f 93       	push	r18
    2f3e:	6a a1       	ldd	r22, Y+34	; 0x22
    2f40:	7b a1       	ldd	r23, Y+35	; 0x23
    2f42:	8c a1       	ldd	r24, Y+36	; 0x24
    2f44:	9d a1       	ldd	r25, Y+37	; 0x25
    2f46:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2f4a:	a5 01       	movw	r20, r10
    2f4c:	94 01       	movw	r18, r8
    2f4e:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__divmodsi4>
    2f52:	3f 93       	push	r19
    2f54:	2f 93       	push	r18
    2f56:	6e a1       	ldd	r22, Y+38	; 0x26
    2f58:	7f a1       	ldd	r23, Y+39	; 0x27
    2f5a:	88 a5       	ldd	r24, Y+40	; 0x28
    2f5c:	99 a5       	ldd	r25, Y+41	; 0x29
    2f5e:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2f62:	7f 93       	push	r23
    2f64:	6f 93       	push	r22
    2f66:	23 e3       	ldi	r18, 0x33	; 51
    2f68:	33 e9       	ldi	r19, 0x93	; 147
    2f6a:	48 e8       	ldi	r20, 0x88	; 136
    2f6c:	53 e4       	ldi	r21, 0x43	; 67
    2f6e:	6a a5       	ldd	r22, Y+42	; 0x2a
    2f70:	7b a5       	ldd	r23, Y+43	; 0x2b
    2f72:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f74:	9d a5       	ldd	r25, Y+45	; 0x2d
    2f76:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <__subsf3>
    2f7a:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2f7e:	7f 93       	push	r23
    2f80:	6f 93       	push	r22
    2f82:	6e a5       	ldd	r22, Y+46	; 0x2e
    2f84:	7f a5       	ldd	r23, Y+47	; 0x2f
    2f86:	88 a9       	ldd	r24, Y+48	; 0x30
    2f88:	99 a9       	ldd	r25, Y+49	; 0x31
    2f8a:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2f8e:	9f 93       	push	r25
    2f90:	8f 93       	push	r24
    2f92:	7f 93       	push	r23
    2f94:	6f 93       	push	r22
    2f96:	6a a9       	ldd	r22, Y+50	; 0x32
    2f98:	7b a9       	ldd	r23, Y+51	; 0x33
    2f9a:	8c a9       	ldd	r24, Y+52	; 0x34
    2f9c:	9d a9       	ldd	r25, Y+53	; 0x35
    2f9e:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    2fa2:	7f 93       	push	r23
    2fa4:	6f 93       	push	r22
    2fa6:	1f 93       	push	r17
    2fa8:	0f 93       	push	r16
    2faa:	91 01       	movw	r18, r2
    2fac:	ad ec       	ldi	r26, 0xCD	; 205
    2fae:	bc ec       	ldi	r27, 0xCC	; 204
    2fb0:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <__umulhisi3>
    2fb4:	96 95       	lsr	r25
    2fb6:	87 95       	ror	r24
    2fb8:	96 95       	lsr	r25
    2fba:	87 95       	ror	r24
    2fbc:	96 95       	lsr	r25
    2fbe:	87 95       	ror	r24
    2fc0:	9c 01       	movw	r18, r24
    2fc2:	22 0f       	add	r18, r18
    2fc4:	33 1f       	adc	r19, r19
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	82 0f       	add	r24, r18
    2fd4:	93 1f       	adc	r25, r19
    2fd6:	28 1a       	sub	r2, r24
    2fd8:	39 0a       	sbc	r3, r25
    2fda:	3f 92       	push	r3
    2fdc:	2f 92       	push	r2
    2fde:	2e a9       	ldd	r18, Y+54	; 0x36
    2fe0:	3f a9       	ldd	r19, Y+55	; 0x37
    2fe2:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <__umulhisi3>
    2fe6:	96 95       	lsr	r25
    2fe8:	87 95       	ror	r24
    2fea:	96 95       	lsr	r25
    2fec:	87 95       	ror	r24
    2fee:	96 95       	lsr	r25
    2ff0:	87 95       	ror	r24
    2ff2:	9f 93       	push	r25
    2ff4:	8f 93       	push	r24
    2ff6:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    2ffa:	8f 93       	push	r24
    2ffc:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    3000:	8f 93       	push	r24
    3002:	2e e8       	ldi	r18, 0x8E	; 142
    3004:	31 e2       	ldi	r19, 0x21	; 33
    3006:	3f 93       	push	r19
    3008:	2f 93       	push	r18
    300a:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	2e e8       	ldi	r18, 0x8E	; 142
    3014:	31 e2       	ldi	r19, 0x21	; 33
    3016:	3f 93       	push	r19
    3018:	2f 93       	push	r18
    301a:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <printf>
}
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	e9 96       	adiw	r28, 0x39	; 57
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	1f 91       	pop	r17
    302e:	0f 91       	pop	r16
    3030:	ff 90       	pop	r15
    3032:	ef 90       	pop	r14
    3034:	df 90       	pop	r13
    3036:	cf 90       	pop	r12
    3038:	bf 90       	pop	r11
    303a:	af 90       	pop	r10
    303c:	9f 90       	pop	r9
    303e:	8f 90       	pop	r8
    3040:	7f 90       	pop	r7
    3042:	6f 90       	pop	r6
    3044:	5f 90       	pop	r5
    3046:	4f 90       	pop	r4
    3048:	3f 90       	pop	r3
    304a:	2f 90       	pop	r2
    304c:	08 95       	ret

0000304e <eeprom_write_const>:

void eeprom_write_const(void){
    304e:	4f 92       	push	r4
    3050:	5f 92       	push	r5
    3052:	6f 92       	push	r6
    3054:	7f 92       	push	r7
    3056:	8f 92       	push	r8
    3058:	9f 92       	push	r9
    305a:	af 92       	push	r10
    305c:	bf 92       	push	r11
    305e:	cf 92       	push	r12
    3060:	df 92       	push	r13
    3062:	ef 92       	push	r14
    3064:	ff 92       	push	r15
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	a0 97       	sbiw	r28, 0x20	; 32
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	de bf       	out	0x3e, r29	; 62
	uint64_t p = 0;
	uint64_t t = 0;

	memcpy(&p, &ground_p, 8);
    3078:	ab e2       	ldi	r26, 0x2B	; 43
    307a:	b0 e2       	ldi	r27, 0x20	; 32
    307c:	fc 91       	ld	r31, X
    307e:	11 96       	adiw	r26, 0x01	; 1
    3080:	5c 90       	ld	r5, X
    3082:	11 97       	sbiw	r26, 0x01	; 1
    3084:	12 96       	adiw	r26, 0x02	; 2
    3086:	6c 90       	ld	r6, X
    3088:	12 97       	sbiw	r26, 0x02	; 2
    308a:	13 96       	adiw	r26, 0x03	; 3
    308c:	7c 90       	ld	r7, X
    308e:	13 97       	sbiw	r26, 0x03	; 3
    3090:	14 96       	adiw	r26, 0x04	; 4
    3092:	8c 90       	ld	r8, X
    3094:	14 97       	sbiw	r26, 0x04	; 4
    3096:	15 96       	adiw	r26, 0x05	; 5
    3098:	9c 90       	ld	r9, X
    309a:	15 97       	sbiw	r26, 0x05	; 5
    309c:	16 96       	adiw	r26, 0x06	; 6
    309e:	ac 90       	ld	r10, X
    30a0:	16 97       	sbiw	r26, 0x06	; 6
    30a2:	17 96       	adiw	r26, 0x07	; 7
    30a4:	4c 90       	ld	r4, X
	memcpy(&t, &ground_t, 8);
    30a6:	a7 e2       	ldi	r26, 0x27	; 39
    30a8:	b0 e2       	ldi	r27, 0x20	; 32
    30aa:	ec 91       	ld	r30, X
    30ac:	11 96       	adiw	r26, 0x01	; 1
    30ae:	bc 90       	ld	r11, X
    30b0:	11 97       	sbiw	r26, 0x01	; 1
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	cc 90       	ld	r12, X
    30b6:	12 97       	sbiw	r26, 0x02	; 2
    30b8:	13 96       	adiw	r26, 0x03	; 3
    30ba:	dc 90       	ld	r13, X
    30bc:	13 97       	sbiw	r26, 0x03	; 3
    30be:	14 96       	adiw	r26, 0x04	; 4
    30c0:	ec 90       	ld	r14, X
    30c2:	14 97       	sbiw	r26, 0x04	; 4
    30c4:	15 96       	adiw	r26, 0x05	; 5
    30c6:	fc 90       	ld	r15, X
    30c8:	15 97       	sbiw	r26, 0x05	; 5
    30ca:	16 96       	adiw	r26, 0x06	; 6
    30cc:	1c 91       	ld	r17, X
    30ce:	16 97       	sbiw	r26, 0x06	; 6
    30d0:	17 96       	adiw	r26, 0x07	; 7
    30d2:	ac 91       	ld	r26, X

	uint8_t data[] = {p & 0xFF, (p >> 8) & 0xFF, (p >> 16) & 0xFF, (p >> 24) & 0xFF, (p >> 32) & 0xFF, (p >> 40) & 0xFF, (p >> 48) & 0xFF, p >> 56,
    30d4:	f9 83       	std	Y+1, r31	; 0x01
    30d6:	2f 2f       	mov	r18, r31
    30d8:	35 2d       	mov	r19, r5
    30da:	46 2d       	mov	r20, r6
    30dc:	57 2d       	mov	r21, r7
    30de:	68 2d       	mov	r22, r8
    30e0:	79 2d       	mov	r23, r9
    30e2:	8a 2d       	mov	r24, r10
    30e4:	94 2d       	mov	r25, r4
    30e6:	08 e0       	ldi	r16, 0x08	; 8
    30e8:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    30ec:	2a 83       	std	Y+2, r18	; 0x02
    30ee:	2f 2f       	mov	r18, r31
    30f0:	35 2d       	mov	r19, r5
    30f2:	46 2d       	mov	r20, r6
    30f4:	57 2d       	mov	r21, r7
    30f6:	68 2d       	mov	r22, r8
    30f8:	79 2d       	mov	r23, r9
    30fa:	8a 2d       	mov	r24, r10
    30fc:	94 2d       	mov	r25, r4
    30fe:	00 e1       	ldi	r16, 0x10	; 16
    3100:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    3104:	2b 83       	std	Y+3, r18	; 0x03
    3106:	2f 2f       	mov	r18, r31
    3108:	35 2d       	mov	r19, r5
    310a:	46 2d       	mov	r20, r6
    310c:	57 2d       	mov	r21, r7
    310e:	68 2d       	mov	r22, r8
    3110:	79 2d       	mov	r23, r9
    3112:	8a 2d       	mov	r24, r10
    3114:	94 2d       	mov	r25, r4
    3116:	08 e1       	ldi	r16, 0x18	; 24
    3118:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    311c:	2c 83       	std	Y+4, r18	; 0x04
    311e:	2f 2f       	mov	r18, r31
    3120:	35 2d       	mov	r19, r5
    3122:	46 2d       	mov	r20, r6
    3124:	57 2d       	mov	r21, r7
    3126:	68 2d       	mov	r22, r8
    3128:	79 2d       	mov	r23, r9
    312a:	8a 2d       	mov	r24, r10
    312c:	94 2d       	mov	r25, r4
    312e:	00 e2       	ldi	r16, 0x20	; 32
    3130:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    3134:	2d 83       	std	Y+5, r18	; 0x05
    3136:	2f 2f       	mov	r18, r31
    3138:	35 2d       	mov	r19, r5
    313a:	46 2d       	mov	r20, r6
    313c:	57 2d       	mov	r21, r7
    313e:	68 2d       	mov	r22, r8
    3140:	79 2d       	mov	r23, r9
    3142:	8a 2d       	mov	r24, r10
    3144:	94 2d       	mov	r25, r4
    3146:	08 e2       	ldi	r16, 0x28	; 40
    3148:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    314c:	2e 83       	std	Y+6, r18	; 0x06
    314e:	2f 2f       	mov	r18, r31
    3150:	35 2d       	mov	r19, r5
    3152:	46 2d       	mov	r20, r6
    3154:	57 2d       	mov	r21, r7
    3156:	68 2d       	mov	r22, r8
    3158:	79 2d       	mov	r23, r9
    315a:	8a 2d       	mov	r24, r10
    315c:	94 2d       	mov	r25, r4
    315e:	00 e3       	ldi	r16, 0x30	; 48
    3160:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    3164:	2f 83       	std	Y+7, r18	; 0x07
    3166:	2f 2f       	mov	r18, r31
    3168:	35 2d       	mov	r19, r5
    316a:	46 2d       	mov	r20, r6
    316c:	57 2d       	mov	r21, r7
    316e:	68 2d       	mov	r22, r8
    3170:	79 2d       	mov	r23, r9
    3172:	8a 2d       	mov	r24, r10
    3174:	94 2d       	mov	r25, r4
    3176:	08 e3       	ldi	r16, 0x38	; 56
    3178:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    317c:	28 87       	std	Y+8, r18	; 0x08
    317e:	e9 87       	std	Y+9, r30	; 0x09
    3180:	2e 2f       	mov	r18, r30
    3182:	3b 2d       	mov	r19, r11
    3184:	4c 2d       	mov	r20, r12
    3186:	5d 2d       	mov	r21, r13
    3188:	6e 2d       	mov	r22, r14
    318a:	7f 2d       	mov	r23, r15
    318c:	81 2f       	mov	r24, r17
    318e:	9a 2f       	mov	r25, r26
    3190:	08 e0       	ldi	r16, 0x08	; 8
    3192:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    3196:	2a 87       	std	Y+10, r18	; 0x0a
    3198:	2e 2f       	mov	r18, r30
    319a:	3b 2d       	mov	r19, r11
    319c:	4c 2d       	mov	r20, r12
    319e:	5d 2d       	mov	r21, r13
    31a0:	6e 2d       	mov	r22, r14
    31a2:	7f 2d       	mov	r23, r15
    31a4:	81 2f       	mov	r24, r17
    31a6:	9a 2f       	mov	r25, r26
    31a8:	00 e1       	ldi	r16, 0x10	; 16
    31aa:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    31ae:	2b 87       	std	Y+11, r18	; 0x0b
    31b0:	2e 2f       	mov	r18, r30
    31b2:	3b 2d       	mov	r19, r11
    31b4:	4c 2d       	mov	r20, r12
    31b6:	5d 2d       	mov	r21, r13
    31b8:	6e 2d       	mov	r22, r14
    31ba:	7f 2d       	mov	r23, r15
    31bc:	81 2f       	mov	r24, r17
    31be:	9a 2f       	mov	r25, r26
    31c0:	08 e1       	ldi	r16, 0x18	; 24
    31c2:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    31c6:	2c 87       	std	Y+12, r18	; 0x0c
    31c8:	2e 2f       	mov	r18, r30
    31ca:	3b 2d       	mov	r19, r11
    31cc:	4c 2d       	mov	r20, r12
    31ce:	5d 2d       	mov	r21, r13
    31d0:	6e 2d       	mov	r22, r14
    31d2:	7f 2d       	mov	r23, r15
    31d4:	81 2f       	mov	r24, r17
    31d6:	9a 2f       	mov	r25, r26
    31d8:	00 e2       	ldi	r16, 0x20	; 32
    31da:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    31de:	2d 87       	std	Y+13, r18	; 0x0d
    31e0:	2e 2f       	mov	r18, r30
    31e2:	3b 2d       	mov	r19, r11
    31e4:	4c 2d       	mov	r20, r12
    31e6:	5d 2d       	mov	r21, r13
    31e8:	6e 2d       	mov	r22, r14
    31ea:	7f 2d       	mov	r23, r15
    31ec:	81 2f       	mov	r24, r17
    31ee:	9a 2f       	mov	r25, r26
    31f0:	08 e2       	ldi	r16, 0x28	; 40
    31f2:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    31f6:	2e 87       	std	Y+14, r18	; 0x0e
    31f8:	2e 2f       	mov	r18, r30
    31fa:	3b 2d       	mov	r19, r11
    31fc:	4c 2d       	mov	r20, r12
    31fe:	5d 2d       	mov	r21, r13
    3200:	6e 2d       	mov	r22, r14
    3202:	7f 2d       	mov	r23, r15
    3204:	81 2f       	mov	r24, r17
    3206:	9a 2f       	mov	r25, r26
    3208:	00 e3       	ldi	r16, 0x30	; 48
    320a:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    320e:	2f 87       	std	Y+15, r18	; 0x0f
    3210:	2e 2f       	mov	r18, r30
    3212:	3b 2d       	mov	r19, r11
    3214:	4c 2d       	mov	r20, r12
    3216:	5d 2d       	mov	r21, r13
    3218:	6e 2d       	mov	r22, r14
    321a:	7f 2d       	mov	r23, r15
    321c:	81 2f       	mov	r24, r17
    321e:	9a 2f       	mov	r25, r26
    3220:	08 e3       	ldi	r16, 0x38	; 56
    3222:	0e 94 03 27 	call	0x4e06	; 0x4e06 <__lshrdi3>
    3226:	28 8b       	std	Y+16, r18	; 0x10
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
    3228:	80 e1       	ldi	r24, 0x10	; 16
    322a:	ef e2       	ldi	r30, 0x2F	; 47
    322c:	f0 e2       	ldi	r31, 0x20	; 32
    322e:	de 01       	movw	r26, r28
    3230:	51 96       	adiw	r26, 0x11	; 17
    3232:	01 90       	ld	r0, Z+
    3234:	0d 92       	st	X+, r0
    3236:	8a 95       	dec	r24
    3238:	e1 f7       	brne	.-8      	; 0x3232 <eeprom_write_const+0x1e4>
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
    323a:	83 e3       	ldi	r24, 0x33	; 51
    323c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    3240:	fe 01       	movw	r30, r28
    3242:	71 96       	adiw	r30, 0x11	; 17
    3244:	ce 01       	movw	r24, r28
    3246:	01 96       	adiw	r24, 0x01	; 1
    3248:	ae 01       	movw	r20, r28
    324a:	4f 5d       	subi	r20, 0xDF	; 223
    324c:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 16; i++){
		NVM.ADDR0 = addresses[i];
    324e:	60 ec       	ldi	r22, 0xC0	; 192
    3250:	71 e0       	ldi	r23, 0x01	; 1
    3252:	21 91       	ld	r18, Z+
    3254:	db 01       	movw	r26, r22
    3256:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    3258:	dc 01       	movw	r26, r24
    325a:	2d 91       	ld	r18, X+
    325c:	cd 01       	movw	r24, r26
    325e:	db 01       	movw	r26, r22
    3260:	14 96       	adiw	r26, 0x04	; 4
    3262:	2c 93       	st	X, r18
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 16; i++){
    3264:	e4 17       	cp	r30, r20
    3266:	f5 07       	cpc	r31, r21
    3268:	a1 f7       	brne	.-24     	; 0x3252 <eeprom_write_const+0x204>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    326a:	e0 ec       	ldi	r30, 0xC0	; 192
    326c:	f1 e0       	ldi	r31, 0x01	; 1
    326e:	85 e3       	ldi	r24, 0x35	; 53
    3270:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    3272:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    3274:	80 e1       	ldi	r24, 0x10	; 16
    3276:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    3278:	88 ed       	ldi	r24, 0xD8	; 216
    327a:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3280:	87 85       	ldd	r24, Z+15	; 0x0f
    3282:	88 23       	and	r24, r24
    3284:	ec f3       	brlt	.-6      	; 0x3280 <eeprom_write_const+0x232>
}
    3286:	a0 96       	adiw	r28, 0x20	; 32
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	ff 90       	pop	r15
    3296:	ef 90       	pop	r14
    3298:	df 90       	pop	r13
    329a:	cf 90       	pop	r12
    329c:	bf 90       	pop	r11
    329e:	af 90       	pop	r10
    32a0:	9f 90       	pop	r9
    32a2:	8f 90       	pop	r8
    32a4:	7f 90       	pop	r7
    32a6:	6f 90       	pop	r6
    32a8:	5f 90       	pop	r5
    32aa:	4f 90       	pop	r4
    32ac:	08 95       	ret

000032ae <eeprom_write>:

void eeprom_write(void){
    32ae:	0f 93       	push	r16
    32b0:	1f 93       	push	r17
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	a1 97       	sbiw	r28, 0x21	; 33
    32bc:	cd bf       	out	0x3d, r28	; 61
    32be:	de bf       	out	0x3e, r29	; 62
	uint16_t a = (uint16_t) ((int16_t) alt); // creates an unsigned int of the altitude
    32c0:	60 91 12 21 	lds	r22, 0x2112	; 0x802112 <alt>
    32c4:	70 91 13 21 	lds	r23, 0x2113	; 0x802113 <alt+0x1>
    32c8:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <alt+0x2>
    32cc:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <alt+0x3>
    32d0:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    32d4:	16 2f       	mov	r17, r22
    32d6:	07 2f       	mov	r16, r23
	uint16_t v = (uint16_t) ((int16_t) velocity);
    32d8:	60 91 0a 21 	lds	r22, 0x210A	; 0x80210a <velocity>
    32dc:	70 91 0b 21 	lds	r23, 0x210B	; 0x80210b <velocity+0x1>
    32e0:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <velocity+0x2>
    32e4:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <velocity+0x3>
    32e8:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fixsfsi>
    32ec:	26 2f       	mov	r18, r22
    32ee:	37 2f       	mov	r19, r23

	check_write = (check_write + 1) % 100;
    32f0:	80 91 24 21 	lds	r24, 0x2124	; 0x802124 <check_write>
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	01 96       	adiw	r24, 0x01	; 1
    32f8:	64 e6       	ldi	r22, 0x64	; 100
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	0e 94 75 26 	call	0x4cea	; 0x4cea <__divmodhi4>
    3300:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <check_write>

	// saves data and addresses in array
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
    3304:	a0 91 1e 21 	lds	r26, 0x211E	; 0x80211e <packets>
    3308:	b0 91 1f 21 	lds	r27, 0x211F	; 0x80211f <packets+0x1>
    330c:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <packets>
    3310:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <packets+0x1>
    3314:	60 91 22 21 	lds	r22, 0x2122	; 0x802122 <timer>
    3318:	70 91 23 21 	lds	r23, 0x2123	; 0x802123 <timer+0x1>
    331c:	40 91 22 21 	lds	r20, 0x2122	; 0x802122 <timer>
    3320:	50 91 23 21 	lds	r21, 0x2123	; 0x802123 <timer+0x1>
    3324:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <state>
    3328:	09 83       	std	Y+1, r16	; 0x01
    332a:	1a 83       	std	Y+2, r17	; 0x02
    332c:	bb 83       	std	Y+3, r27	; 0x03
    332e:	ec 83       	std	Y+4, r30	; 0x04
    3330:	7d 83       	std	Y+5, r23	; 0x05
    3332:	4e 83       	std	Y+6, r20	; 0x06
    3334:	3f 83       	std	Y+7, r19	; 0x07
    3336:	28 87       	std	Y+8, r18	; 0x08
    3338:	89 87       	std	Y+9, r24	; 0x09
    333a:	8a 87       	std	Y+10, r24	; 0x0a
    333c:	9b 87       	std	Y+11, r25	; 0x0b
    333e:	8b e0       	ldi	r24, 0x0B	; 11
    3340:	fe 01       	movw	r30, r28
    3342:	31 96       	adiw	r30, 0x01	; 1
    3344:	de 01       	movw	r26, r28
    3346:	1c 96       	adiw	r26, 0x0c	; 12
    3348:	01 90       	ld	r0, Z+
    334a:	0d 92       	st	X+, r0
    334c:	8a 95       	dec	r24
    334e:	e1 f7       	brne	.-8      	; 0x3348 <eeprom_write+0x9a>
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};
    3350:	8b e0       	ldi	r24, 0x0B	; 11
    3352:	ef e3       	ldi	r30, 0x3F	; 63
    3354:	f0 e2       	ldi	r31, 0x20	; 32
    3356:	de 01       	movw	r26, r28
    3358:	57 96       	adiw	r26, 0x17	; 23
    335a:	01 90       	ld	r0, Z+
    335c:	0d 92       	st	X+, r0
    335e:	8a 95       	dec	r24
    3360:	e1 f7       	brne	.-8      	; 0x335a <eeprom_write+0xac>

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
    3362:	83 e3       	ldi	r24, 0x33	; 51
    3364:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < 10; i++){
		NVM.ADDR0 = addresses[i];
    336c:	e0 ec       	ldi	r30, 0xC0	; 192
    336e:	f1 e0       	ldi	r31, 0x01	; 1
    3370:	a7 e1       	ldi	r26, 0x17	; 23
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	ac 0f       	add	r26, r28
    3376:	bd 1f       	adc	r27, r29
    3378:	a8 0f       	add	r26, r24
    337a:	b9 1f       	adc	r27, r25
    337c:	2c 91       	ld	r18, X
    337e:	20 83       	st	Z, r18
		NVM.DATA0 = data[i];
    3380:	ac e0       	ldi	r26, 0x0C	; 12
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	ac 0f       	add	r26, r28
    3386:	bd 1f       	adc	r27, r29
    3388:	a8 0f       	add	r26, r24
    338a:	b9 1f       	adc	r27, r25
    338c:	2c 91       	ld	r18, X
    338e:	24 83       	std	Z+4, r18	; 0x04
    3390:	01 96       	adiw	r24, 0x01	; 1
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 10; i++){
    3392:	8a 30       	cpi	r24, 0x0A	; 10
    3394:	91 05       	cpc	r25, r1
    3396:	61 f7       	brne	.-40     	; 0x3370 <eeprom_write+0xc2>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    3398:	e0 ec       	ldi	r30, 0xC0	; 192
    339a:	f1 e0       	ldi	r31, 0x01	; 1
    339c:	85 e3       	ldi	r24, 0x35	; 53
    339e:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    33a0:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    33a2:	80 e1       	ldi	r24, 0x10	; 16
    33a4:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    33a6:	88 ed       	ldi	r24, 0xD8	; 216
    33a8:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    33ae:	87 85       	ldd	r24, Z+15	; 0x0f
    33b0:	88 23       	and	r24, r24
    33b2:	ec f3       	brlt	.-6      	; 0x33ae <eeprom_write+0x100>
}
    33b4:	a1 96       	adiw	r28, 0x21	; 33
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	08 95       	ret

000033c4 <time_update>:

void time_update(void){
	//packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);
	eeprom_write();
    33c4:	74 df       	rcall	.-280    	; 0x32ae <eeprom_write>

	time_flag = 0;
    33c6:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <time_flag>
    33ca:	08 95       	ret

000033cc <eeprom_read>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

uint8_t	eeprom_read(uint16_t address){
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
	NVM.CMD = READ_EEPROM;
    33d0:	c0 ec       	ldi	r28, 0xC0	; 192
    33d2:	d1 e0       	ldi	r29, 0x01	; 1
    33d4:	26 e0       	ldi	r18, 0x06	; 6
    33d6:	2a 87       	std	Y+10, r18	; 0x0a
	NVM.ADDR0 = address & 0xFF;
    33d8:	88 83       	st	Y, r24
	NVM.ADDR1 = address >> 8;
    33da:	99 83       	std	Y+1, r25	; 0x01
	CCP = CCP_IOREG_MODE;
    33dc:	88 ed       	ldi	r24, 0xD8	; 216
    33de:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	8b 87       	std	Y+11, r24	; 0x0b
	delay_ms(1);
    33e4:	66 ed       	ldi	r22, 0xD6	; 214
    33e6:	74 e1       	ldi	r23, 0x14	; 20
    33e8:	80 e0       	ldi	r24, 0x00	; 0
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__portable_avr_delay_cycles>
	uint8_t byte = NVM.DATA0;
    33f0:	8c 81       	ldd	r24, Y+4	; 0x04
	return byte;
}
    33f2:	df 91       	pop	r29
    33f4:	cf 91       	pop	r28
    33f6:	08 95       	ret

000033f8 <system_init>:
	}
}


// Sensor functions
void system_init(void){
    33f8:	2f 92       	push	r2
    33fa:	3f 92       	push	r3
    33fc:	4f 92       	push	r4
    33fe:	5f 92       	push	r5
    3400:	6f 92       	push	r6
    3402:	7f 92       	push	r7
    3404:	8f 92       	push	r8
    3406:	9f 92       	push	r9
    3408:	af 92       	push	r10
    340a:	bf 92       	push	r11
    340c:	cf 92       	push	r12
    340e:	df 92       	push	r13
    3410:	ef 92       	push	r14
    3412:	ff 92       	push	r15
    3414:	0f 93       	push	r16
    3416:	1f 93       	push	r17
    3418:	cf 93       	push	r28
    341a:	df 93       	push	r29
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	27 97       	sbiw	r28, 0x07	; 7
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	de bf       	out	0x3e, r29	; 62
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    3426:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    342a:	6b ea       	ldi	r22, 0xAB	; 171
    342c:	79 e2       	ldi	r23, 0x29	; 41
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__portable_avr_delay_cycles>
	sei();
    3436:	78 94       	sei

	// Initialization of pins
	PORTC.DIR = 0xBC; // makes Port C have pins, 7, 5, 4, 3, and 2 be output (0b10111100)
    3438:	8c eb       	ldi	r24, 0xBC	; 188
    343a:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // enables lo level interrupts
    343e:	87 e0       	ldi	r24, 0x07	; 7
    3440:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// Driver Initialization
	cam_init();
    3444:	0e 94 9c 0c 	call	0x1938	; 0x1938 <cam_init>
	data_terminal_init();
    3448:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <data_terminal_init>
	delay_ms(500);
    344c:	6b ea       	ldi	r22, 0xAB	; 171
    344e:	70 eb       	ldi	r23, 0xB0	; 176
    3450:	88 e2       	ldi	r24, 0x28	; 40
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__portable_avr_delay_cycles>

	(*GPS_TERMINAL_SERIAL).CTRLA = USART_RXCINTLVL_HI_gc;
}

void xbee_init(void){
	USARTE0.CTRLA = USART_RXCINTLVL_MED_gc;
    3458:	80 e2       	ldi	r24, 0x20	; 32
    345a:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	// Driver Initialization
	cam_init();
	data_terminal_init();
	delay_ms(500);
	xbee_init();
	gps_init();
    345e:	0e 94 10 10 	call	0x2020	; 0x2020 <gps_init>
	//buzzer_init();
	//delay_ms(100);

	hall_sensor_init();
    3462:	0e 94 1a 10 	call	0x2034	; 0x2034 <hall_sensor_init>
	thermistor_init();
    3466:	0e 94 a3 0c 	call	0x1946	; 0x1946 <thermistor_init>
	voltage_init();
    346a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <voltage_init>
	spi_init();
    346e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <spi_init>
	pressure_init();
    3472:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <pressure_init>
	//bno_init();
	cam_switch();
    3476:	0e 94 95 0c 	call	0x192a	; 0x192a <cam_switch>
	clock_init();
    347a:	3a db       	rcall	.-2444   	; 0x2af0 <clock_init>

	release_servo_init();
    347c:	8a da       	rcall	.-2796   	; 0x2992 <release_servo_init>
    347e:	82 e0       	ldi	r24, 0x02	; 2
	//servo_timer_init();

	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
    3480:	90 e1       	ldi	r25, 0x10	; 16
    3482:	a4 df       	rcall	.-184    	; 0x33cc <eeprom_read>
    3484:	89 83       	std	Y+1, r24	; 0x01
    3486:	8f e1       	ldi	r24, 0x1F	; 31
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);
    3488:	90 e1       	ldi	r25, 0x10	; 16
    348a:	a0 df       	rcall	.-192    	; 0x33cc <eeprom_read>
    348c:	8a 83       	std	Y+2, r24	; 0x02
    348e:	99 81       	ldd	r25, Y+1	; 0x01
    3490:	8a 81       	ldd	r24, Y+2	; 0x02

	if((b1 == b2) && (b1 != 0xFF)){
    3492:	98 13       	cpse	r25, r24
    3494:	d3 c1       	rjmp	.+934    	; 0x383c <system_init+0x444>
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	8f 3f       	cpi	r24, 0xFF	; 255
    349a:	09 f4       	brne	.+2      	; 0x349e <system_init+0xa6>
    349c:	cf c1       	rjmp	.+926    	; 0x383c <system_init+0x444>
    349e:	80 e1       	ldi	r24, 0x10	; 16
		//printf("Reading EEPROM\n");
		uint64_t p =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    34a0:	90 e1       	ldi	r25, 0x10	; 16
    34a2:	94 df       	rcall	.-216    	; 0x33cc <eeprom_read>
    34a4:	18 2f       	mov	r17, r24
    34a6:	8f e0       	ldi	r24, 0x0F	; 15
    34a8:	90 e1       	ldi	r25, 0x10	; 16
    34aa:	90 df       	rcall	.-224    	; 0x33cc <eeprom_read>
    34ac:	b8 2f       	mov	r27, r24
    34ae:	21 2f       	mov	r18, r17
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e0       	ldi	r20, 0x00	; 0
    34b4:	50 e0       	ldi	r21, 0x00	; 0
    34b6:	60 e0       	ldi	r22, 0x00	; 0
    34b8:	70 e0       	ldi	r23, 0x00	; 0
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	08 e3       	ldi	r16, 0x38	; 56
    34c0:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    34c4:	12 2f       	mov	r17, r18
    34c6:	c3 2e       	mov	r12, r19
    34c8:	f4 2e       	mov	r15, r20
    34ca:	a5 2f       	mov	r26, r21
    34cc:	f6 2f       	mov	r31, r22
    34ce:	e7 2f       	mov	r30, r23
    34d0:	d8 2e       	mov	r13, r24
    34d2:	e9 2e       	mov	r14, r25
    34d4:	2b 2f       	mov	r18, r27
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e0       	ldi	r20, 0x00	; 0
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	70 e0       	ldi	r23, 0x00	; 0
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	00 e3       	ldi	r16, 0x30	; 48
    34e6:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    34ea:	12 2b       	or	r17, r18
    34ec:	c3 2a       	or	r12, r19
    34ee:	f4 2a       	or	r15, r20
    34f0:	9a 2e       	mov	r9, r26
    34f2:	95 2a       	or	r9, r21
    34f4:	af 2e       	mov	r10, r31
    34f6:	a6 2a       	or	r10, r22
    34f8:	be 2e       	mov	r11, r30
    34fa:	b7 2a       	or	r11, r23
    34fc:	d8 2a       	or	r13, r24
    34fe:	e9 2a       	or	r14, r25
    3500:	8e e0       	ldi	r24, 0x0E	; 14
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    3502:	90 e1       	ldi	r25, 0x10	; 16
    3504:	63 df       	rcall	.-314    	; 0x33cc <eeprom_read>
    3506:	08 2f       	mov	r16, r24
    3508:	8d e0       	ldi	r24, 0x0D	; 13
    350a:	90 e1       	ldi	r25, 0x10	; 16
    350c:	5f df       	rcall	.-322    	; 0x33cc <eeprom_read>
    350e:	28 2e       	mov	r2, r24
    3510:	8c e0       	ldi	r24, 0x0C	; 12
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    3512:	90 e1       	ldi	r25, 0x10	; 16
    3514:	5b df       	rcall	.-330    	; 0x33cc <eeprom_read>
    3516:	38 2e       	mov	r3, r24
    3518:	8b e0       	ldi	r24, 0x0B	; 11
    351a:	90 e1       	ldi	r25, 0x10	; 16
    351c:	57 df       	rcall	.-338    	; 0x33cc <eeprom_read>
    351e:	48 2e       	mov	r4, r24
    3520:	8a e0       	ldi	r24, 0x0A	; 10
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0));
    3522:	90 e1       	ldi	r25, 0x10	; 16
    3524:	53 df       	rcall	.-346    	; 0x33cc <eeprom_read>
    3526:	58 2e       	mov	r5, r24
    3528:	89 e0       	ldi	r24, 0x09	; 9
    352a:	90 e1       	ldi	r25, 0x10	; 16
    352c:	4f df       	rcall	.-354    	; 0x33cc <eeprom_read>
    352e:	68 2e       	mov	r6, r24
    3530:	20 2f       	mov	r18, r16
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	08 e2       	ldi	r16, 0x28	; 40
    3542:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    3546:	16 29       	or	r17, r6
    3548:	12 2b       	or	r17, r18
    354a:	c3 2a       	or	r12, r19
    354c:	f4 2a       	or	r15, r20
    354e:	a5 2f       	mov	r26, r21
    3550:	a9 29       	or	r26, r9
    3552:	f6 2f       	mov	r31, r22
    3554:	fa 29       	or	r31, r10
    3556:	e7 2f       	mov	r30, r23
    3558:	eb 29       	or	r30, r11
    355a:	d8 2a       	or	r13, r24
    355c:	e9 2a       	or	r14, r25
    355e:	22 2d       	mov	r18, r2
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e0       	ldi	r20, 0x00	; 0
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	60 e0       	ldi	r22, 0x00	; 0
    3568:	70 e0       	ldi	r23, 0x00	; 0
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	00 e2       	ldi	r16, 0x20	; 32
    3570:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    3574:	12 2b       	or	r17, r18
    3576:	c3 2a       	or	r12, r19
    3578:	f4 2a       	or	r15, r20
    357a:	a5 2b       	or	r26, r21
    357c:	f6 2b       	or	r31, r22
    357e:	e7 2b       	or	r30, r23
    3580:	d8 2a       	or	r13, r24
    3582:	e9 2a       	or	r14, r25
    3584:	23 2d       	mov	r18, r3
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e0       	ldi	r20, 0x00	; 0
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	08 e1       	ldi	r16, 0x18	; 24
    3596:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    359a:	12 2b       	or	r17, r18
    359c:	c3 2a       	or	r12, r19
    359e:	f4 2a       	or	r15, r20
    35a0:	a5 2b       	or	r26, r21
    35a2:	f6 2b       	or	r31, r22
    35a4:	e7 2b       	or	r30, r23
    35a6:	d8 2a       	or	r13, r24
    35a8:	e9 2a       	or	r14, r25
    35aa:	24 2d       	mov	r18, r4
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	00 e1       	ldi	r16, 0x10	; 16
    35bc:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    35c0:	12 2b       	or	r17, r18
    35c2:	c3 2a       	or	r12, r19
    35c4:	f4 2a       	or	r15, r20
    35c6:	a5 2b       	or	r26, r21
    35c8:	f6 2b       	or	r31, r22
    35ca:	e7 2b       	or	r30, r23
    35cc:	d8 2a       	or	r13, r24
    35ce:	e9 2a       	or	r14, r25
    35d0:	25 2d       	mov	r18, r5
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	70 e0       	ldi	r23, 0x00	; 0
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	08 e0       	ldi	r16, 0x08	; 8
    35e2:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    35e6:	61 2e       	mov	r6, r17
    35e8:	62 2a       	or	r6, r18
    35ea:	7c 2c       	mov	r7, r12
    35ec:	73 2a       	or	r7, r19
    35ee:	8f 2c       	mov	r8, r15
    35f0:	84 2a       	or	r8, r20
    35f2:	9a 2e       	mov	r9, r26
    35f4:	95 2a       	or	r9, r21
    35f6:	af 2e       	mov	r10, r31
    35f8:	a6 2a       	or	r10, r22
    35fa:	be 2e       	mov	r11, r30
    35fc:	b7 2a       	or	r11, r23
    35fe:	d8 2a       	or	r13, r24
    3600:	e9 2a       	or	r14, r25
    3602:	89 e1       	ldi	r24, 0x19	; 25
		uint64_t t =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    3604:	90 e1       	ldi	r25, 0x10	; 16
    3606:	e2 de       	rcall	.-572    	; 0x33cc <eeprom_read>
    3608:	18 2f       	mov	r17, r24
    360a:	88 e1       	ldi	r24, 0x18	; 24
    360c:	90 e1       	ldi	r25, 0x10	; 16
    360e:	de de       	rcall	.-580    	; 0x33cc <eeprom_read>
    3610:	48 2e       	mov	r4, r24
    3612:	21 2f       	mov	r18, r17
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	40 e0       	ldi	r20, 0x00	; 0
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	60 e0       	ldi	r22, 0x00	; 0
    361c:	70 e0       	ldi	r23, 0x00	; 0
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	08 e3       	ldi	r16, 0x38	; 56
    3624:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    3628:	c2 2e       	mov	r12, r18
    362a:	53 2e       	mov	r5, r19
    362c:	b4 2f       	mov	r27, r20
    362e:	a5 2f       	mov	r26, r21
    3630:	f6 2f       	mov	r31, r22
    3632:	e7 2f       	mov	r30, r23
    3634:	f8 2e       	mov	r15, r24
    3636:	19 2f       	mov	r17, r25
    3638:	24 2d       	mov	r18, r4
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e0       	ldi	r20, 0x00	; 0
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	00 e3       	ldi	r16, 0x30	; 48
    364a:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    364e:	c2 2a       	or	r12, r18
    3650:	53 2a       	or	r5, r19
    3652:	5f 82       	std	Y+7, r5	; 0x07
    3654:	2b 2e       	mov	r2, r27
    3656:	24 2a       	or	r2, r20
    3658:	3a 2e       	mov	r3, r26
    365a:	35 2a       	or	r3, r21
    365c:	4f 2e       	mov	r4, r31
    365e:	46 2a       	or	r4, r22
    3660:	5e 2e       	mov	r5, r30
    3662:	57 2a       	or	r5, r23
    3664:	f8 2a       	or	r15, r24
    3666:	19 2b       	or	r17, r25
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    3668:	87 e1       	ldi	r24, 0x17	; 23
    366a:	90 e1       	ldi	r25, 0x10	; 16
    366c:	af de       	rcall	.-674    	; 0x33cc <eeprom_read>
    366e:	08 2f       	mov	r16, r24
    3670:	86 e1       	ldi	r24, 0x16	; 22
    3672:	90 e1       	ldi	r25, 0x10	; 16
    3674:	ab de       	rcall	.-682    	; 0x33cc <eeprom_read>
    3676:	8b 83       	std	Y+3, r24	; 0x03
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    3678:	85 e1       	ldi	r24, 0x15	; 21
    367a:	90 e1       	ldi	r25, 0x10	; 16
    367c:	a7 de       	rcall	.-690    	; 0x33cc <eeprom_read>
    367e:	8c 83       	std	Y+4, r24	; 0x04
    3680:	84 e1       	ldi	r24, 0x14	; 20
    3682:	90 e1       	ldi	r25, 0x10	; 16
    3684:	a3 de       	rcall	.-698    	; 0x33cc <eeprom_read>
    3686:	8d 83       	std	Y+5, r24	; 0x05
    3688:	83 e1       	ldi	r24, 0x13	; 19
    368a:	90 e1       	ldi	r25, 0x10	; 16
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8   | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0));
    368c:	9f de       	rcall	.-706    	; 0x33cc <eeprom_read>
    368e:	8e 83       	std	Y+6, r24	; 0x06
    3690:	82 e1       	ldi	r24, 0x12	; 18
    3692:	90 e1       	ldi	r25, 0x10	; 16
    3694:	9b de       	rcall	.-714    	; 0x33cc <eeprom_read>
    3696:	e8 2f       	mov	r30, r24
    3698:	ab e2       	ldi	r26, 0x2B	; 43
    369a:	b0 e2       	ldi	r27, 0x20	; 32
    369c:	6c 92       	st	X, r6
    369e:	11 96       	adiw	r26, 0x01	; 1
		memcpy(&ground_p, &p, 8);
    36a0:	7c 92       	st	X, r7
    36a2:	11 97       	sbiw	r26, 0x01	; 1
    36a4:	12 96       	adiw	r26, 0x02	; 2
    36a6:	8c 92       	st	X, r8
    36a8:	12 97       	sbiw	r26, 0x02	; 2
    36aa:	13 96       	adiw	r26, 0x03	; 3
    36ac:	9c 92       	st	X, r9
    36ae:	13 97       	sbiw	r26, 0x03	; 3
    36b0:	14 96       	adiw	r26, 0x04	; 4
    36b2:	ac 92       	st	X, r10
    36b4:	14 97       	sbiw	r26, 0x04	; 4
    36b6:	15 96       	adiw	r26, 0x05	; 5
    36b8:	bc 92       	st	X, r11
    36ba:	15 97       	sbiw	r26, 0x05	; 5
    36bc:	16 96       	adiw	r26, 0x06	; 6
    36be:	dc 92       	st	X, r13
    36c0:	16 97       	sbiw	r26, 0x06	; 6
    36c2:	17 96       	adiw	r26, 0x07	; 7
    36c4:	ec 92       	st	X, r14
    36c6:	a7 e2       	ldi	r26, 0x27	; 39
    36c8:	b0 e2       	ldi	r27, 0x20	; 32
    36ca:	20 2f       	mov	r18, r16
    36cc:	30 e0       	ldi	r19, 0x00	; 0
		memcpy(&ground_t, &t, 8);
    36ce:	40 e0       	ldi	r20, 0x00	; 0
    36d0:	50 e0       	ldi	r21, 0x00	; 0
    36d2:	60 e0       	ldi	r22, 0x00	; 0
    36d4:	70 e0       	ldi	r23, 0x00	; 0
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	08 e2       	ldi	r16, 0x28	; 40
    36dc:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    36e0:	ce 2a       	or	r12, r30
    36e2:	c2 2a       	or	r12, r18
    36e4:	bf 80       	ldd	r11, Y+7	; 0x07
    36e6:	b3 2a       	or	r11, r19
    36e8:	d4 2e       	mov	r13, r20
    36ea:	d2 28       	or	r13, r2
    36ec:	e5 2e       	mov	r14, r21
    36ee:	e3 28       	or	r14, r3
    36f0:	f6 2f       	mov	r31, r22
    36f2:	f4 29       	or	r31, r4
    36f4:	e7 2f       	mov	r30, r23
    36f6:	e5 29       	or	r30, r5
    36f8:	f8 2a       	or	r15, r24
    36fa:	19 2b       	or	r17, r25
    36fc:	2b 81       	ldd	r18, Y+3	; 0x03
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	00 e2       	ldi	r16, 0x20	; 32
    370e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    3712:	c2 2a       	or	r12, r18
    3714:	b3 2a       	or	r11, r19
    3716:	d4 2a       	or	r13, r20
    3718:	e5 2a       	or	r14, r21
    371a:	f6 2b       	or	r31, r22
    371c:	e7 2b       	or	r30, r23
    371e:	f8 2a       	or	r15, r24
    3720:	19 2b       	or	r17, r25
    3722:	2c 81       	ldd	r18, Y+4	; 0x04
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e0       	ldi	r20, 0x00	; 0
    3728:	50 e0       	ldi	r21, 0x00	; 0
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	70 e0       	ldi	r23, 0x00	; 0
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	08 e1       	ldi	r16, 0x18	; 24
    3734:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    3738:	c2 2a       	or	r12, r18
    373a:	b3 2a       	or	r11, r19
    373c:	d4 2a       	or	r13, r20
    373e:	e5 2a       	or	r14, r21
    3740:	f6 2b       	or	r31, r22
    3742:	e7 2b       	or	r30, r23
    3744:	f8 2a       	or	r15, r24
    3746:	19 2b       	or	r17, r25
    3748:	2d 81       	ldd	r18, Y+5	; 0x05
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	70 e0       	ldi	r23, 0x00	; 0
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	00 e1       	ldi	r16, 0x10	; 16
    375a:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    375e:	c2 2a       	or	r12, r18
    3760:	b3 2a       	or	r11, r19
    3762:	d4 2a       	or	r13, r20
    3764:	e5 2a       	or	r14, r21
    3766:	f6 2b       	or	r31, r22
    3768:	e7 2b       	or	r30, r23
    376a:	f8 2a       	or	r15, r24
    376c:	19 2b       	or	r17, r25
    376e:	2e 81       	ldd	r18, Y+6	; 0x06
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	40 e0       	ldi	r20, 0x00	; 0
    3774:	50 e0       	ldi	r21, 0x00	; 0
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	08 e0       	ldi	r16, 0x08	; 8
    3780:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__ashldi3>
    3784:	2c 29       	or	r18, r12
    3786:	2c 93       	st	X, r18
    3788:	3b 29       	or	r19, r11
    378a:	11 96       	adiw	r26, 0x01	; 1
    378c:	3c 93       	st	X, r19
    378e:	11 97       	sbiw	r26, 0x01	; 1
    3790:	4d 29       	or	r20, r13
    3792:	12 96       	adiw	r26, 0x02	; 2
    3794:	4c 93       	st	X, r20
    3796:	12 97       	sbiw	r26, 0x02	; 2
    3798:	5e 29       	or	r21, r14
    379a:	13 96       	adiw	r26, 0x03	; 3
    379c:	5c 93       	st	X, r21
    379e:	13 97       	sbiw	r26, 0x03	; 3
    37a0:	6f 2b       	or	r22, r31
    37a2:	14 96       	adiw	r26, 0x04	; 4
    37a4:	6c 93       	st	X, r22
    37a6:	14 97       	sbiw	r26, 0x04	; 4
    37a8:	7e 2b       	or	r23, r30
    37aa:	15 96       	adiw	r26, 0x05	; 5
    37ac:	7c 93       	st	X, r23
    37ae:	15 97       	sbiw	r26, 0x05	; 5
    37b0:	8f 29       	or	r24, r15
    37b2:	16 96       	adiw	r26, 0x06	; 6
    37b4:	8c 93       	st	X, r24
    37b6:	16 97       	sbiw	r26, 0x06	; 6
    37b8:	91 2b       	or	r25, r17
    37ba:	17 96       	adiw	r26, 0x07	; 7
    37bc:	9c 93       	st	X, r25
    37be:	81 e0       	ldi	r24, 0x01	; 1

		alt = (double) ((int16_t) (eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE0)));
    37c0:	90 e1       	ldi	r25, 0x10	; 16
    37c2:	04 de       	rcall	.-1016   	; 0x33cc <eeprom_read>
    37c4:	18 2f       	mov	r17, r24
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e1       	ldi	r25, 0x10	; 16
    37ca:	00 de       	rcall	.-1024   	; 0x33cc <eeprom_read>
    37cc:	61 2f       	mov	r22, r17
    37ce:	70 e0       	ldi	r23, 0x00	; 0
    37d0:	76 2f       	mov	r23, r22
    37d2:	66 27       	eor	r22, r22
    37d4:	68 2b       	or	r22, r24
    37d6:	07 2e       	mov	r0, r23
    37d8:	00 0c       	add	r0, r0
    37da:	88 0b       	sbc	r24, r24
    37dc:	99 0b       	sbc	r25, r25
    37de:	e6 d7       	rcall	.+4044   	; 0x47ac <__floatsisf>
    37e0:	60 93 12 21 	sts	0x2112, r22	; 0x802112 <alt>
    37e4:	70 93 13 21 	sts	0x2113, r23	; 0x802113 <alt+0x1>
    37e8:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <alt+0x2>
    37ec:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <alt+0x3>
    37f0:	87 e0       	ldi	r24, 0x07	; 7
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
    37f2:	90 e1       	ldi	r25, 0x10	; 16
    37f4:	eb dd       	rcall	.-1066   	; 0x33cc <eeprom_read>
    37f6:	18 2f       	mov	r17, r24
    37f8:	86 e0       	ldi	r24, 0x06	; 6
    37fa:	90 e1       	ldi	r25, 0x10	; 16
    37fc:	e7 dd       	rcall	.-1074   	; 0x33cc <eeprom_read>
    37fe:	21 2f       	mov	r18, r17
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	32 2f       	mov	r19, r18
    3804:	22 27       	eor	r18, r18
    3806:	28 2b       	or	r18, r24
    3808:	20 93 22 21 	sts	0x2122, r18	; 0x802122 <timer>
    380c:	30 93 23 21 	sts	0x2123, r19	; 0x802123 <timer+0x1>
    3810:	84 e0       	ldi	r24, 0x04	; 4
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
    3812:	90 e1       	ldi	r25, 0x10	; 16
    3814:	db dd       	rcall	.-1098   	; 0x33cc <eeprom_read>
    3816:	18 2f       	mov	r17, r24
    3818:	83 e0       	ldi	r24, 0x03	; 3
    381a:	90 e1       	ldi	r25, 0x10	; 16
    381c:	d7 dd       	rcall	.-1106   	; 0x33cc <eeprom_read>
    381e:	21 2f       	mov	r18, r17
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	32 2f       	mov	r19, r18
    3824:	22 27       	eor	r18, r18
    3826:	28 2b       	or	r18, r24
    3828:	20 93 1e 21 	sts	0x211E, r18	; 0x80211e <packets>
    382c:	30 93 1f 21 	sts	0x211F, r19	; 0x80211f <packets+0x1>
    3830:	85 e0       	ldi	r24, 0x05	; 5
    3832:	90 e1       	ldi	r25, 0x10	; 16
    3834:	cb dd       	rcall	.-1130   	; 0x33cc <eeprom_read>
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
    3836:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <state>
    383a:	19 c0       	rjmp	.+50     	; 0x386e <system_init+0x476>
    383c:	0e 94 55 10 	call	0x20aa	; 0x20aa <get_pressure>
	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);

	if((b1 == b2) && (b1 != 0xFF)){
    3840:	60 93 2b 20 	sts	0x202B, r22	; 0x80202b <ground_p>
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
		//printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
	}
	else{
		// Initialization of variables
		ground_p = get_pressure();
    3844:	70 93 2c 20 	sts	0x202C, r23	; 0x80202c <ground_p+0x1>
    3848:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p+0x2>
    384c:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x3>
    3850:	83 e3       	ldi	r24, 0x33	; 51
    3852:	93 e1       	ldi	r25, 0x13	; 19
    3854:	a5 e9       	ldi	r26, 0x95	; 149
		ground_t = get_temperature();
    3856:	b3 e4       	ldi	r27, 0x43	; 67
    3858:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    385c:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    3860:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    3864:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    3868:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <state>
    386c:	f0 db       	rcall	.-2080   	; 0x304e <eeprom_write_const>
		state = 0;
    386e:	0e 94 c1 13 	call	0x2782	; 0x2782 <state_check>
		eeprom_write_const();
    3872:	27 96       	adiw	r28, 0x07	; 7
    3874:	cd bf       	out	0x3d, r28	; 61
	}

	state_check();
    3876:	de bf       	out	0x3e, r29	; 62
    3878:	df 91       	pop	r29
}
    387a:	cf 91       	pop	r28
    387c:	1f 91       	pop	r17
    387e:	0f 91       	pop	r16
    3880:	ff 90       	pop	r15
    3882:	ef 90       	pop	r14
    3884:	df 90       	pop	r13
    3886:	cf 90       	pop	r12
    3888:	bf 90       	pop	r11
    388a:	af 90       	pop	r10
    388c:	9f 90       	pop	r9
    388e:	8f 90       	pop	r8
    3890:	7f 90       	pop	r7
    3892:	6f 90       	pop	r6
    3894:	5f 90       	pop	r5
    3896:	4f 90       	pop	r4
    3898:	3f 90       	pop	r3
    389a:	2f 90       	pop	r2
    389c:	08 95       	ret

0000389e <eeprom_erase>:
    389e:	83 e3       	ldi	r24, 0x33	; 51
    38a0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    38a4:	80 e0       	ldi	r24, 0x00	; 0
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    38a6:	e0 ec       	ldi	r30, 0xC0	; 192
    38a8:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    38aa:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    38ac:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    38ae:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    38b0:	8f 5f       	subi	r24, 0xFF	; 255
    38b2:	80 32       	cpi	r24, 0x20	; 32
    38b4:	d9 f7       	brne	.-10     	; 0x38ac <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}

	NVM.CMD = ERASE_EEPROM;
    38b6:	e0 ec       	ldi	r30, 0xC0	; 192
    38b8:	f1 e0       	ldi	r31, 0x01	; 1
    38ba:	80 e3       	ldi	r24, 0x30	; 48
    38bc:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    38be:	88 ed       	ldi	r24, 0xD8	; 216
    38c0:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    38c6:	87 85       	ldd	r24, Z+15	; 0x0f
    38c8:	88 23       	and	r24, r24
    38ca:	ec f3       	brlt	.-6      	; 0x38c6 <eeprom_erase+0x28>
}
    38cc:	08 95       	ret

000038ce <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    38ce:	e7 df       	rcall	.-50     	; 0x389e <eeprom_erase>

	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    38d0:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    38d2:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    38d4:	98 ed       	ldi	r25, 0xD8	; 216
    38d6:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    38d8:	91 e0       	ldi	r25, 0x01	; 1
    38da:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    38de:	8f bf       	out	0x3f, r24	; 63
    38e0:	08 95       	ret

000038e2 <command>:
static void hall_sensor_measure(AC_t *ac, uint8_t channel, enum ac_status_t status){
	ticks_per_sec++;
}

void command(uint8_t c){
	switch(c){
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	fc 01       	movw	r30, r24
    38e6:	e1 56       	subi	r30, 0x61	; 97
    38e8:	f1 09       	sbc	r31, r1
    38ea:	e3 31       	cpi	r30, 0x13	; 19
    38ec:	f1 05       	cpc	r31, r1
    38ee:	98 f4       	brcc	.+38     	; 0x3916 <command+0x34>
    38f0:	88 27       	eor	r24, r24
    38f2:	e2 50       	subi	r30, 0x02	; 2
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	8f 4f       	sbci	r24, 0xFF	; 255
    38f8:	0c 94 c6 26 	jmp	0x4d8c	; 0x4d8c <__tablejump2__>
		case RESET:
			reset();
    38fc:	e8 cf       	rjmp	.-48     	; 0x38ce <reset>
			break;
		case CALIBRATE:
			calibrate();
    38fe:	08 95       	ret
			break;
    3900:	62 c9       	rjmp	.-3388   	; 0x2bc6 <calibrate>
		case CALIBRATE_ALTITUDE:
			cali_alt();
    3902:	08 95       	ret
			break;
		case CALIBRATE_ANGLE:
			cali_ang();
    3904:	38 c9       	rjmp	.-3472   	; 0x2b76 <cali_alt>
			break;
    3906:	08 95       	ret
		case SERVO_RELEASE:
			servo_release();
    3908:	53 c9       	rjmp	.-3418   	; 0x2bb0 <cali_ang>
			break;
    390a:	08 95       	ret
		case SERVO_CLOSE:
			servo_close();
    390c:	5f c9       	rjmp	.-3394   	; 0x2bcc <servo_release>
    390e:	08 95       	ret
			break;
    3910:	69 c9       	rjmp	.-3374   	; 0x2be4 <servo_close>
		case PACKET:
			packet();
    3912:	08 95       	ret
    3914:	72 c9       	rjmp	.-3356   	; 0x2bfa <packet>
    3916:	08 95       	ret

00003918 <main>:

char* format = "5343,%i.%i,%i,%i,%li,%i.%i,%i.%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n";


////////////////////////////// Functions ///////////////////////////////
int main(void){
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
    3920:	c8 56       	subi	r28, 0x68	; 104
    3922:	d1 09       	sbc	r29, r1
    3924:	cd bf       	out	0x3d, r28	; 61
    3926:	de bf       	out	0x3e, r29	; 62
	system_init();
    3928:	67 dd       	rcall	.-1330   	; 0x33f8 <system_init>
	//delay_ms(100);

	PORTD.DIR |= PIN3_bm;
    392a:	e0 e6       	ldi	r30, 0x60	; 96
    392c:	f6 e0       	ldi	r31, 0x06	; 6
    392e:	80 81       	ld	r24, Z
    3930:	88 60       	ori	r24, 0x08	; 8
    3932:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    3934:	84 81       	ldd	r24, Z+4	; 0x04
    3936:	88 60       	ori	r24, 0x08	; 8
    3938:	84 83       	std	Z+4, r24	; 0x04

	//printf("Initialized\n");
	//buzzer_init();

	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    393a:	14 e1       	ldi	r17, 0x14	; 20
    393c:	be 01       	movw	r22, r28
    393e:	6f 5f       	subi	r22, 0xFF	; 255
    3940:	7f 4f       	sbci	r23, 0xFF	; 255
    3942:	fb 01       	movw	r30, r22
    3944:	81 2f       	mov	r24, r17
    3946:	11 92       	st	Z+, r1
    3948:	8a 95       	dec	r24
    394a:	e9 f7       	brne	.-6      	; 0x3946 <main+0x2e>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    394c:	4a e0       	ldi	r20, 0x0A	; 10
    394e:	50 e0       	ldi	r21, 0x00	; 0
    3950:	ce 01       	movw	r24, r28
    3952:	45 96       	adiw	r24, 0x15	; 21
    3954:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <rb16_init>

	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    3958:	be 01       	movw	r22, r28
    395a:	63 5e       	subi	r22, 0xE3	; 227
    395c:	7f 4f       	sbci	r23, 0xFF	; 255
    395e:	88 e2       	ldi	r24, 0x28	; 40
    3960:	fb 01       	movw	r30, r22
    3962:	11 92       	st	Z+, r1
    3964:	8a 95       	dec	r24
    3966:	e9 f7       	brne	.-6      	; 0x3962 <main+0x4a>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    3968:	4a e0       	ldi	r20, 0x0A	; 10
    396a:	50 e0       	ldi	r21, 0x00	; 0
    396c:	ce 01       	movw	r24, r28
    396e:	8b 5b       	subi	r24, 0xBB	; 187
    3970:	9f 4f       	sbci	r25, 0xFF	; 255
    3972:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <rb32_init>

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    3976:	be 01       	movw	r22, r28
    3978:	63 5b       	subi	r22, 0xB3	; 179
    397a:	7f 4f       	sbci	r23, 0xFF	; 255
    397c:	fb 01       	movw	r30, r22
    397e:	11 92       	st	Z+, r1
    3980:	1a 95       	dec	r17
    3982:	e9 f7       	brne	.-6      	; 0x397e <main+0x66>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    3984:	4a e0       	ldi	r20, 0x0A	; 10
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	ce 01       	movw	r24, r28
    398a:	8f 59       	subi	r24, 0x9F	; 159
    398c:	9f 4f       	sbci	r25, 0xFF	; 255
    398e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <rb16_init>

	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    3992:	00 e0       	ldi	r16, 0x00	; 0

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	uint8_t cam_initialized = 0;
    3994:	10 e0       	ldi	r17, 0x00	; 0


	while(1){
		//printf("In Loop\n");
		// Check Sensors
		data_collect(&altitudes,&pressures);
    3996:	be 01       	movw	r22, r28
    3998:	6b 5b       	subi	r22, 0xBB	; 187
    399a:	7f 4f       	sbci	r23, 0xFF	; 255
    399c:	ce 01       	movw	r24, r28
    399e:	45 96       	adiw	r24, 0x15	; 21
    39a0:	0e 94 2e 13 	call	0x265c	; 0x265c <data_collect>

		state_check();
    39a4:	0e 94 c1 13 	call	0x2782	; 0x2782 <state_check>

		// IMU Check
		//imu_read();

		//Gives each flight state their unique tasks
		switch(state){
    39a8:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <state>
    39ac:	81 30       	cpi	r24, 0x01	; 1
    39ae:	31 f0       	breq	.+12     	; 0x39bc <main+0xa4>
    39b0:	c0 f1       	brcs	.+112    	; 0x3a22 <main+0x10a>
    39b2:	82 30       	cpi	r24, 0x02	; 2
    39b4:	39 f0       	breq	.+14     	; 0x39c4 <main+0xac>
    39b6:	83 30       	cpi	r24, 0x03	; 3
    39b8:	71 f1       	breq	.+92     	; 0x3a16 <main+0xfe>
    39ba:	31 c0       	rjmp	.+98     	; 0x3a1e <main+0x106>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    39bc:	11 11       	cpse	r17, r1
    39be:	31 c0       	rjmp	.+98     	; 0x3a22 <main+0x10a>
					cam_initialized = 1;
    39c0:	11 e0       	ldi	r17, 0x01	; 1
    39c2:	2f c0       	rjmp	.+94     	; 0x3a22 <main+0x10a>
					//cam_switch();
				}
				break;
			case 2:
				if(!cam_initialized){
    39c4:	11 11       	cpse	r17, r1
    39c6:	01 c0       	rjmp	.+2      	; 0x39ca <main+0xb2>
					cam_initialized = 1;
    39c8:	11 e0       	ldi	r17, 0x01	; 1
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
    39ca:	60 91 12 21 	lds	r22, 0x2112	; 0x802112 <alt>
    39ce:	70 91 13 21 	lds	r23, 0x2113	; 0x802113 <alt+0x1>
    39d2:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <alt+0x2>
    39d6:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <alt+0x3>
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	41 ee       	ldi	r20, 0xE1	; 225
    39e0:	53 e4       	ldi	r21, 0x43	; 67
    39e2:	e0 d5       	rcall	.+3008   	; 0x45a4 <__subsf3>
    39e4:	b0 d6       	rcall	.+3424   	; 0x4746 <__fixsfsi>
    39e6:	9b 01       	movw	r18, r22
    39e8:	77 23       	and	r23, r23
    39ea:	24 f4       	brge	.+8      	; 0x39f4 <main+0xdc>
    39ec:	22 27       	eor	r18, r18
    39ee:	33 27       	eor	r19, r19
    39f0:	26 1b       	sub	r18, r22
    39f2:	37 0b       	sbc	r19, r23
    39f4:	2a 30       	cpi	r18, 0x0A	; 10
    39f6:	31 05       	cpc	r19, r1
	ac_enable(&ACA, 0);

}

void release(void){
	servo_release();
    39f8:	24 f4       	brge	.+8      	; 0x3a02 <main+0xea>
    39fa:	e8 d8       	rcall	.-3632   	; 0x2bcc <servo_release>
					cam_initialized = 1;
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
					release();				// Releases the payload
					hall_sensor_init();		// Starts hall effect sensor to read rpm
    39fc:	0e 94 1a 10 	call	0x2034	; 0x2034 <hall_sensor_init>
    3a00:	10 c0       	rjmp	.+32     	; 0x3a22 <main+0x10a>
				}
				else if(released){
    3a02:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <released>
    3a06:	88 23       	and	r24, r24
    3a08:	61 f0       	breq	.+24     	; 0x3a22 <main+0x10a>
					servo_pid(&directions);	// Updates the PID
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	8f 59       	subi	r24, 0x9F	; 159
    3a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a10:	0e 94 e5 14 	call	0x29ca	; 0x29ca <servo_pid>
    3a14:	06 c0       	rjmp	.+12     	; 0x3a22 <main+0x10a>
				}
				break;
			case 3:
				if(!buzzer_initialized){
    3a16:	01 11       	cpse	r16, r1
    3a18:	04 c0       	rjmp	.+8      	; 0x3a22 <main+0x10a>
					//buzzer_init();
					buzzer_initialized = 1;
    3a1a:	01 e0       	ldi	r16, 0x01	; 1
    3a1c:	02 c0       	rjmp	.+4      	; 0x3a22 <main+0x10a>
				}
				break;
			default:
				state_check();
    3a1e:	0e 94 c1 13 	call	0x2782	; 0x2782 <state_check>
				break;
		}

		if(time_flag){
    3a22:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <time_flag>
			calc_rpm();
    3a26:	88 23       	and	r24, r24
    3a28:	21 f0       	breq	.+8      	; 0x3a32 <main+0x11a>
			time_update();
    3a2a:	70 d8       	rcall	.-3872   	; 0x2b0c <calc_rpm>
    3a2c:	cb dc       	rcall	.-1642   	; 0x33c4 <time_update>
			time_flag = 0;
    3a2e:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <time_flag>
		}
		if(xbee_flag){
    3a32:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <xbee_flag>
    3a36:	88 23       	and	r24, r24
			command(xbee_comm);
    3a38:	39 f0       	breq	.+14     	; 0x3a48 <main+0x130>
    3a3a:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <xbee_comm>
    3a3e:	51 df       	rcall	.-350    	; 0x38e2 <command>
			xbee_comm = 0;
    3a40:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <xbee_comm>
			xbee_flag = 0;
    3a44:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <xbee_flag>
		}

		data_packets++;
    3a48:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <data_packets>
    3a4c:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <data_packets+0x1>
    3a50:	01 96       	adiw	r24, 0x01	; 1
    3a52:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <data_packets>
    3a56:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <data_packets+0x1>
		if(timer != 0){
    3a5a:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <timer>
    3a5e:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <timer+0x1>
    3a62:	89 2b       	or	r24, r25
    3a64:	09 f4       	brne	.+2      	; 0x3a68 <main+0x150>
    3a66:	97 cf       	rjmp	.-210    	; 0x3996 <main+0x7e>
			rate = data_packets / timer;
    3a68:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <data_packets>
    3a6c:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <data_packets+0x1>
    3a70:	60 91 22 21 	lds	r22, 0x2122	; 0x802122 <timer>
    3a74:	70 91 23 21 	lds	r23, 0x2123	; 0x802123 <timer+0x1>
    3a78:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__udivmodhi4>
    3a7c:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <rate>
    3a80:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <rate+0x1>
    3a84:	88 cf       	rjmp	.-240    	; 0x3996 <main+0x7e>

00003a86 <__vector_47>:
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}


ISR(TCE0_OVF_vect){
    3a86:	1f 92       	push	r1
    3a88:	0f 92       	push	r0
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	0f 92       	push	r0
    3a8e:	11 24       	eor	r1, r1
    3a90:	08 b6       	in	r0, 0x38	; 56
    3a92:	0f 92       	push	r0
    3a94:	18 be       	out	0x38, r1	; 56
    3a96:	09 b6       	in	r0, 0x39	; 57
    3a98:	0f 92       	push	r0
    3a9a:	19 be       	out	0x39, r1	; 57
    3a9c:	0a b6       	in	r0, 0x3a	; 58
    3a9e:	0f 92       	push	r0
    3aa0:	1a be       	out	0x3a, r1	; 58
    3aa2:	0b b6       	in	r0, 0x3b	; 59
    3aa4:	0f 92       	push	r0
    3aa6:	1b be       	out	0x3b, r1	; 59
    3aa8:	2f 92       	push	r2
    3aaa:	3f 92       	push	r3
    3aac:	4f 92       	push	r4
    3aae:	5f 92       	push	r5
    3ab0:	6f 92       	push	r6
    3ab2:	7f 92       	push	r7
    3ab4:	8f 92       	push	r8
    3ab6:	9f 92       	push	r9
    3ab8:	af 92       	push	r10
    3aba:	bf 92       	push	r11
    3abc:	cf 92       	push	r12
    3abe:	df 92       	push	r13
    3ac0:	ef 92       	push	r14
    3ac2:	ff 92       	push	r15
    3ac4:	0f 93       	push	r16
    3ac6:	1f 93       	push	r17
    3ac8:	2f 93       	push	r18
    3aca:	3f 93       	push	r19
    3acc:	4f 93       	push	r20
    3ace:	5f 93       	push	r21
    3ad0:	6f 93       	push	r22
    3ad2:	7f 93       	push	r23
    3ad4:	8f 93       	push	r24
    3ad6:	9f 93       	push	r25
    3ad8:	af 93       	push	r26
    3ada:	bf 93       	push	r27
    3adc:	ef 93       	push	r30
    3ade:	ff 93       	push	r31
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    3ae8:	e9 97       	sbiw	r28, 0x39	; 57
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	de bf       	out	0x3e, r29	; 62
	timer++;
    3aee:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <timer>
    3af2:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <timer+0x1>
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <timer>
    3afc:	90 93 23 21 	sts	0x2123, r25	; 0x802123 <timer+0x1>
	packets++;
    3b00:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <packets>
    3b04:	90 91 1f 21 	lds	r25, 0x211F	; 0x80211f <packets+0x1>
    3b08:	01 96       	adiw	r24, 0x01	; 1
    3b0a:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <packets>
    3b0e:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    3b12:	60 91 e8 20 	lds	r22, 0x20E8	; 0x8020e8 <angle>
    3b16:	70 91 e9 20 	lds	r23, 0x20E9	; 0x8020e9 <angle+0x1>
    3b1a:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <angle+0x2>
    3b1e:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <angle+0x3>
    3b22:	20 91 40 21 	lds	r18, 0x2140	; 0x802140 <state>
    3b26:	29 83       	std	Y+1, r18	; 0x01
    3b28:	40 90 ec 20 	lds	r4, 0x20EC	; 0x8020ec <rpm>
    3b2c:	50 90 ed 20 	lds	r5, 0x20ED	; 0x8020ed <rpm+0x1>
    3b30:	60 90 ee 20 	lds	r6, 0x20EE	; 0x8020ee <rpm+0x2>
    3b34:	70 90 ef 20 	lds	r7, 0x20EF	; 0x8020ef <rpm+0x3>
    3b38:	80 90 f0 20 	lds	r8, 0x20F0	; 0x8020f0 <roll>
    3b3c:	90 90 f1 20 	lds	r9, 0x20F1	; 0x8020f1 <roll+0x1>
    3b40:	a0 90 f2 20 	lds	r10, 0x20F2	; 0x8020f2 <roll+0x2>
    3b44:	b0 90 f3 20 	lds	r11, 0x20F3	; 0x8020f3 <roll+0x3>
    3b48:	c0 90 f4 20 	lds	r12, 0x20F4	; 0x8020f4 <pitch>
    3b4c:	d0 90 f5 20 	lds	r13, 0x20F5	; 0x8020f5 <pitch+0x1>
    3b50:	e0 90 f6 20 	lds	r14, 0x20F6	; 0x8020f6 <pitch+0x2>
    3b54:	f0 90 f7 20 	lds	r15, 0x20F7	; 0x8020f7 <pitch+0x3>
    3b58:	40 91 f8 20 	lds	r20, 0x20F8	; 0x8020f8 <gps_sats>
    3b5c:	50 91 f9 20 	lds	r21, 0x20F9	; 0x8020f9 <gps_sats+0x1>
    3b60:	48 af       	std	Y+56, r20	; 0x38
    3b62:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    3b64:	20 91 fa 20 	lds	r18, 0x20FA	; 0x8020fa <gps_alt>
    3b68:	30 91 fb 20 	lds	r19, 0x20FB	; 0x8020fb <gps_alt+0x1>
    3b6c:	40 91 fc 20 	lds	r20, 0x20FC	; 0x8020fc <gps_alt+0x2>
    3b70:	50 91 fd 20 	lds	r21, 0x20FD	; 0x8020fd <gps_alt+0x3>
    3b74:	2a 83       	std	Y+2, r18	; 0x02
    3b76:	3b 83       	std	Y+3, r19	; 0x03
    3b78:	4c 83       	std	Y+4, r20	; 0x04
    3b7a:	5d 83       	std	Y+5, r21	; 0x05


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3b7c:	20 91 fa 20 	lds	r18, 0x20FA	; 0x8020fa <gps_alt>
    3b80:	30 91 fb 20 	lds	r19, 0x20FB	; 0x8020fb <gps_alt+0x1>
    3b84:	40 91 fc 20 	lds	r20, 0x20FC	; 0x8020fc <gps_alt+0x2>
    3b88:	50 91 fd 20 	lds	r21, 0x20FD	; 0x8020fd <gps_alt+0x3>
    3b8c:	2e 83       	std	Y+6, r18	; 0x06
    3b8e:	3f 83       	std	Y+7, r19	; 0x07
    3b90:	48 87       	std	Y+8, r20	; 0x08
    3b92:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    3b94:	20 91 fe 20 	lds	r18, 0x20FE	; 0x8020fe <gps_long>
    3b98:	30 91 ff 20 	lds	r19, 0x20FF	; 0x8020ff <gps_long+0x1>
    3b9c:	40 91 00 21 	lds	r20, 0x2100	; 0x802100 <gps_long+0x2>
    3ba0:	50 91 01 21 	lds	r21, 0x2101	; 0x802101 <gps_long+0x3>
    3ba4:	2a 87       	std	Y+10, r18	; 0x0a
    3ba6:	3b 87       	std	Y+11, r19	; 0x0b
    3ba8:	4c 87       	std	Y+12, r20	; 0x0c
    3baa:	5d 87       	std	Y+13, r21	; 0x0d


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3bac:	20 91 fe 20 	lds	r18, 0x20FE	; 0x8020fe <gps_long>
    3bb0:	30 91 ff 20 	lds	r19, 0x20FF	; 0x8020ff <gps_long+0x1>
    3bb4:	40 91 00 21 	lds	r20, 0x2100	; 0x802100 <gps_long+0x2>
    3bb8:	50 91 01 21 	lds	r21, 0x2101	; 0x802101 <gps_long+0x3>
    3bbc:	2e 87       	std	Y+14, r18	; 0x0e
    3bbe:	3f 87       	std	Y+15, r19	; 0x0f
    3bc0:	48 8b       	std	Y+16, r20	; 0x10
    3bc2:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    3bc4:	20 91 02 21 	lds	r18, 0x2102	; 0x802102 <gps_lat>
    3bc8:	30 91 03 21 	lds	r19, 0x2103	; 0x802103 <gps_lat+0x1>
    3bcc:	40 91 04 21 	lds	r20, 0x2104	; 0x802104 <gps_lat+0x2>
    3bd0:	50 91 05 21 	lds	r21, 0x2105	; 0x802105 <gps_lat+0x3>
    3bd4:	2a 8b       	std	Y+18, r18	; 0x12
    3bd6:	3b 8b       	std	Y+19, r19	; 0x13
    3bd8:	4c 8b       	std	Y+20, r20	; 0x14
    3bda:	5d 8b       	std	Y+21, r21	; 0x15


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3bdc:	20 91 02 21 	lds	r18, 0x2102	; 0x802102 <gps_lat>
    3be0:	30 91 03 21 	lds	r19, 0x2103	; 0x802103 <gps_lat+0x1>
    3be4:	40 91 04 21 	lds	r20, 0x2104	; 0x802104 <gps_lat+0x2>
    3be8:	50 91 05 21 	lds	r21, 0x2105	; 0x802105 <gps_lat+0x3>
    3bec:	2e 8b       	std	Y+22, r18	; 0x16
    3bee:	3f 8b       	std	Y+23, r19	; 0x17
    3bf0:	48 8f       	std	Y+24, r20	; 0x18
    3bf2:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    3bf4:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_t>
    3bf8:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_t+0x1>
    3bfc:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_t+0x2>
    3c00:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_t+0x3>
    3c04:	2a 8f       	std	Y+26, r18	; 0x1a
    3c06:	3b 8f       	std	Y+27, r19	; 0x1b
    3c08:	4c 8f       	std	Y+28, r20	; 0x1c
    3c0a:	5d 8f       	std	Y+29, r21	; 0x1d
    3c0c:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_t>
    3c10:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_t+0x1>
    3c14:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_t+0x2>
    3c18:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_t+0x3>
    3c1c:	2e 8f       	std	Y+30, r18	; 0x1e
    3c1e:	3f 8f       	std	Y+31, r19	; 0x1f
    3c20:	48 a3       	std	Y+32, r20	; 0x20
    3c22:	59 a3       	std	Y+33, r21	; 0x21
    3c24:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_t>
    3c28:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_t+0x1>
    3c2c:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_t+0x2>
    3c30:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_t+0x3>
    3c34:	2a a3       	std	Y+34, r18	; 0x22
    3c36:	3b a3       	std	Y+35, r19	; 0x23
    3c38:	4c a3       	std	Y+36, r20	; 0x24
    3c3a:	5d a3       	std	Y+37, r21	; 0x25


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3c3c:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <volt>
    3c40:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <volt+0x1>
    3c44:	40 91 10 21 	lds	r20, 0x2110	; 0x802110 <volt+0x2>
    3c48:	50 91 11 21 	lds	r21, 0x2111	; 0x802111 <volt+0x3>
    3c4c:	2e a3       	std	Y+38, r18	; 0x26
    3c4e:	3f a3       	std	Y+39, r19	; 0x27
    3c50:	48 a7       	std	Y+40, r20	; 0x28
    3c52:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    3c54:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <temp>
    3c58:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <temp+0x1>
    3c5c:	40 91 18 21 	lds	r20, 0x2118	; 0x802118 <temp+0x2>
    3c60:	50 91 19 21 	lds	r21, 0x2119	; 0x802119 <temp+0x3>
    3c64:	2a a7       	std	Y+42, r18	; 0x2a
    3c66:	3b a7       	std	Y+43, r19	; 0x2b
    3c68:	4c a7       	std	Y+44, r20	; 0x2c
    3c6a:	5d a7       	std	Y+45, r21	; 0x2d


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3c6c:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <press>
    3c70:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <press+0x1>
    3c74:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <press+0x2>
    3c78:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <press+0x3>
    3c7c:	2e a7       	std	Y+46, r18	; 0x2e
    3c7e:	3f a7       	std	Y+47, r19	; 0x2f
    3c80:	48 ab       	std	Y+48, r20	; 0x30
    3c82:	59 ab       	std	Y+49, r21	; 0x31
    3c84:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <alt>
    3c88:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <alt+0x1>
    3c8c:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <alt+0x2>
    3c90:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <alt+0x3>
    3c94:	2a ab       	std	Y+50, r18	; 0x32
    3c96:	3b ab       	std	Y+51, r19	; 0x33
    3c98:	4c ab       	std	Y+52, r20	; 0x34
    3c9a:	5d ab       	std	Y+53, r21	; 0x35
    3c9c:	00 91 1e 21 	lds	r16, 0x211E	; 0x80211e <packets>
    3ca0:	10 91 1f 21 	lds	r17, 0x211F	; 0x80211f <packets+0x1>
    3ca4:	20 90 22 21 	lds	r2, 0x2122	; 0x802122 <timer>
    3ca8:	30 90 23 21 	lds	r3, 0x2123	; 0x802123 <timer+0x1>
    3cac:	40 91 22 21 	lds	r20, 0x2122	; 0x802122 <timer>
    3cb0:	50 91 23 21 	lds	r21, 0x2123	; 0x802123 <timer+0x1>
    3cb4:	4e ab       	std	Y+54, r20	; 0x36
    3cb6:	5f ab       	std	Y+55, r21	; 0x37
    3cb8:	46 d5       	rcall	.+2700   	; 0x4746 <__fixsfsi>
    3cba:	7f 93       	push	r23
    3cbc:	6f 93       	push	r22
    3cbe:	1f 92       	push	r1
    3cc0:	59 81       	ldd	r21, Y+1	; 0x01
    3cc2:	5f 93       	push	r21
    3cc4:	c3 01       	movw	r24, r6
    3cc6:	b2 01       	movw	r22, r4
    3cc8:	3e d5       	rcall	.+2684   	; 0x4746 <__fixsfsi>
    3cca:	7f 93       	push	r23
    3ccc:	6f 93       	push	r22
    3cce:	c5 01       	movw	r24, r10
    3cd0:	b4 01       	movw	r22, r8
    3cd2:	39 d5       	rcall	.+2674   	; 0x4746 <__fixsfsi>
    3cd4:	7f 93       	push	r23
    3cd6:	6f 93       	push	r22
    3cd8:	c7 01       	movw	r24, r14
    3cda:	b6 01       	movw	r22, r12
    3cdc:	34 d5       	rcall	.+2664   	; 0x4746 <__fixsfsi>
    3cde:	7f 93       	push	r23
    3ce0:	6f 93       	push	r22
    3ce2:	89 ad       	ldd	r24, Y+57	; 0x39
    3ce4:	8f 93       	push	r24
    3ce6:	98 ad       	ldd	r25, Y+56	; 0x38
    3ce8:	9f 93       	push	r25
    3cea:	6a 81       	ldd	r22, Y+2	; 0x02
    3cec:	7b 81       	ldd	r23, Y+3	; 0x03
    3cee:	8c 81       	ldd	r24, Y+4	; 0x04
    3cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    3cf2:	29 d5       	rcall	.+2642   	; 0x4746 <__fixsfsi>
    3cf4:	9b 01       	movw	r18, r22
    3cf6:	22 0f       	add	r18, r18
    3cf8:	33 1f       	adc	r19, r19
    3cfa:	66 0f       	add	r22, r22
    3cfc:	77 1f       	adc	r23, r23
    3cfe:	66 0f       	add	r22, r22
    3d00:	77 1f       	adc	r23, r23
    3d02:	66 0f       	add	r22, r22
    3d04:	77 1f       	adc	r23, r23
    3d06:	c9 01       	movw	r24, r18
    3d08:	86 0f       	add	r24, r22
    3d0a:	97 1f       	adc	r25, r23
    3d0c:	6a e0       	ldi	r22, 0x0A	; 10
    3d0e:	70 e0       	ldi	r23, 0x00	; 0
    3d10:	ec d7       	rcall	.+4056   	; 0x4cea <__divmodhi4>
    3d12:	9f 93       	push	r25
    3d14:	8f 93       	push	r24
    3d16:	6e 81       	ldd	r22, Y+6	; 0x06
    3d18:	7f 81       	ldd	r23, Y+7	; 0x07
    3d1a:	88 85       	ldd	r24, Y+8	; 0x08
    3d1c:	99 85       	ldd	r25, Y+9	; 0x09
    3d1e:	13 d5       	rcall	.+2598   	; 0x4746 <__fixsfsi>
    3d20:	7f 93       	push	r23
    3d22:	6f 93       	push	r22
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	34 e2       	ldi	r19, 0x24	; 36
    3d28:	44 e7       	ldi	r20, 0x74	; 116
    3d2a:	59 e4       	ldi	r21, 0x49	; 73
    3d2c:	6a 85       	ldd	r22, Y+10	; 0x0a
    3d2e:	7b 85       	ldd	r23, Y+11	; 0x0b
    3d30:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d32:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d34:	ef d5       	rcall	.+3038   	; 0x4914 <__mulsf3>
    3d36:	07 d5       	rcall	.+2574   	; 0x4746 <__fixsfsi>
    3d38:	20 e4       	ldi	r18, 0x40	; 64
    3d3a:	32 e4       	ldi	r19, 0x42	; 66
    3d3c:	4f e0       	ldi	r20, 0x0F	; 15
    3d3e:	50 e0       	ldi	r21, 0x00	; 0
    3d40:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__divmodsi4>
    3d44:	9b 01       	movw	r18, r22
    3d46:	77 23       	and	r23, r23
    3d48:	24 f4       	brge	.+8      	; 0x3d52 <__vector_47+0x2cc>
    3d4a:	22 27       	eor	r18, r18
    3d4c:	33 27       	eor	r19, r19
    3d4e:	26 1b       	sub	r18, r22
    3d50:	37 0b       	sbc	r19, r23
    3d52:	c9 01       	movw	r24, r18
    3d54:	33 0f       	add	r19, r19
    3d56:	aa 0b       	sbc	r26, r26
    3d58:	bb 0b       	sbc	r27, r27
    3d5a:	bf 93       	push	r27
    3d5c:	af 93       	push	r26
    3d5e:	9f 93       	push	r25
    3d60:	8f 93       	push	r24
    3d62:	6e 85       	ldd	r22, Y+14	; 0x0e
    3d64:	7f 85       	ldd	r23, Y+15	; 0x0f
    3d66:	88 89       	ldd	r24, Y+16	; 0x10
    3d68:	99 89       	ldd	r25, Y+17	; 0x11
    3d6a:	ed d4       	rcall	.+2522   	; 0x4746 <__fixsfsi>
    3d6c:	7f 93       	push	r23
    3d6e:	6f 93       	push	r22
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	34 e2       	ldi	r19, 0x24	; 36
    3d74:	44 e7       	ldi	r20, 0x74	; 116
    3d76:	59 e4       	ldi	r21, 0x49	; 73
    3d78:	6a 89       	ldd	r22, Y+18	; 0x12
    3d7a:	7b 89       	ldd	r23, Y+19	; 0x13
    3d7c:	8c 89       	ldd	r24, Y+20	; 0x14
    3d7e:	9d 89       	ldd	r25, Y+21	; 0x15
    3d80:	c9 d5       	rcall	.+2962   	; 0x4914 <__mulsf3>
    3d82:	e1 d4       	rcall	.+2498   	; 0x4746 <__fixsfsi>
    3d84:	20 e4       	ldi	r18, 0x40	; 64
    3d86:	32 e4       	ldi	r19, 0x42	; 66
    3d88:	4f e0       	ldi	r20, 0x0F	; 15
    3d8a:	50 e0       	ldi	r21, 0x00	; 0
    3d8c:	e3 d7       	rcall	.+4038   	; 0x4d54 <__divmodsi4>
    3d8e:	9f 93       	push	r25
    3d90:	8f 93       	push	r24
    3d92:	7f 93       	push	r23
    3d94:	6f 93       	push	r22
    3d96:	6e 89       	ldd	r22, Y+22	; 0x16
    3d98:	7f 89       	ldd	r23, Y+23	; 0x17
    3d9a:	88 8d       	ldd	r24, Y+24	; 0x18
    3d9c:	99 8d       	ldd	r25, Y+25	; 0x19
    3d9e:	d3 d4       	rcall	.+2470   	; 0x4746 <__fixsfsi>
    3da0:	7f 93       	push	r23
    3da2:	6f 93       	push	r22
    3da4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3da6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3da8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3daa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3dac:	cc d4       	rcall	.+2456   	; 0x4746 <__fixsfsi>
    3dae:	0f 2e       	mov	r0, r31
    3db0:	f4 e6       	ldi	r31, 0x64	; 100
    3db2:	cf 2e       	mov	r12, r31
    3db4:	d1 2c       	mov	r13, r1
    3db6:	e1 2c       	mov	r14, r1
    3db8:	f1 2c       	mov	r15, r1
    3dba:	f0 2d       	mov	r31, r0
    3dbc:	a7 01       	movw	r20, r14
    3dbe:	96 01       	movw	r18, r12
    3dc0:	c9 d7       	rcall	.+3986   	; 0x4d54 <__divmodsi4>
    3dc2:	7f 93       	push	r23
    3dc4:	6f 93       	push	r22
    3dc6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3dc8:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3dca:	88 a1       	ldd	r24, Y+32	; 0x20
    3dcc:	99 a1       	ldd	r25, Y+33	; 0x21
    3dce:	bb d4       	rcall	.+2422   	; 0x4746 <__fixsfsi>
    3dd0:	0f 2e       	mov	r0, r31
    3dd2:	f0 e1       	ldi	r31, 0x10	; 16
    3dd4:	8f 2e       	mov	r8, r31
    3dd6:	f7 e2       	ldi	r31, 0x27	; 39
    3dd8:	9f 2e       	mov	r9, r31
    3dda:	a1 2c       	mov	r10, r1
    3ddc:	b1 2c       	mov	r11, r1
    3dde:	f0 2d       	mov	r31, r0
    3de0:	a5 01       	movw	r20, r10
    3de2:	94 01       	movw	r18, r8
    3de4:	b7 d7       	rcall	.+3950   	; 0x4d54 <__divmodsi4>
    3de6:	a7 01       	movw	r20, r14
    3de8:	96 01       	movw	r18, r12
    3dea:	b4 d7       	rcall	.+3944   	; 0x4d54 <__divmodsi4>
    3dec:	3f 93       	push	r19
    3dee:	2f 93       	push	r18
    3df0:	6a a1       	ldd	r22, Y+34	; 0x22
    3df2:	7b a1       	ldd	r23, Y+35	; 0x23
    3df4:	8c a1       	ldd	r24, Y+36	; 0x24
    3df6:	9d a1       	ldd	r25, Y+37	; 0x25
    3df8:	a6 d4       	rcall	.+2380   	; 0x4746 <__fixsfsi>
    3dfa:	a5 01       	movw	r20, r10
    3dfc:	94 01       	movw	r18, r8
    3dfe:	aa d7       	rcall	.+3924   	; 0x4d54 <__divmodsi4>
    3e00:	3f 93       	push	r19
    3e02:	2f 93       	push	r18
    3e04:	6e a1       	ldd	r22, Y+38	; 0x26
    3e06:	7f a1       	ldd	r23, Y+39	; 0x27
    3e08:	88 a5       	ldd	r24, Y+40	; 0x28
    3e0a:	99 a5       	ldd	r25, Y+41	; 0x29
    3e0c:	9c d4       	rcall	.+2360   	; 0x4746 <__fixsfsi>
    3e0e:	7f 93       	push	r23
    3e10:	6f 93       	push	r22
    3e12:	23 e3       	ldi	r18, 0x33	; 51
    3e14:	33 e9       	ldi	r19, 0x93	; 147
    3e16:	48 e8       	ldi	r20, 0x88	; 136
    3e18:	53 e4       	ldi	r21, 0x43	; 67
    3e1a:	6a a5       	ldd	r22, Y+42	; 0x2a
    3e1c:	7b a5       	ldd	r23, Y+43	; 0x2b
    3e1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e20:	9d a5       	ldd	r25, Y+45	; 0x2d
    3e22:	c0 d3       	rcall	.+1920   	; 0x45a4 <__subsf3>
    3e24:	90 d4       	rcall	.+2336   	; 0x4746 <__fixsfsi>
    3e26:	7f 93       	push	r23
    3e28:	6f 93       	push	r22
    3e2a:	6e a5       	ldd	r22, Y+46	; 0x2e
    3e2c:	7f a5       	ldd	r23, Y+47	; 0x2f
    3e2e:	88 a9       	ldd	r24, Y+48	; 0x30
    3e30:	99 a9       	ldd	r25, Y+49	; 0x31
    3e32:	89 d4       	rcall	.+2322   	; 0x4746 <__fixsfsi>
    3e34:	9f 93       	push	r25
    3e36:	8f 93       	push	r24
    3e38:	7f 93       	push	r23
    3e3a:	6f 93       	push	r22
    3e3c:	6a a9       	ldd	r22, Y+50	; 0x32
    3e3e:	7b a9       	ldd	r23, Y+51	; 0x33
    3e40:	8c a9       	ldd	r24, Y+52	; 0x34
    3e42:	9d a9       	ldd	r25, Y+53	; 0x35
    3e44:	80 d4       	rcall	.+2304   	; 0x4746 <__fixsfsi>
    3e46:	7f 93       	push	r23
    3e48:	6f 93       	push	r22
    3e4a:	1f 93       	push	r17
    3e4c:	0f 93       	push	r16
    3e4e:	91 01       	movw	r18, r2
    3e50:	ad ec       	ldi	r26, 0xCD	; 205
    3e52:	bc ec       	ldi	r27, 0xCC	; 204
    3e54:	a4 d7       	rcall	.+3912   	; 0x4d9e <__umulhisi3>
    3e56:	96 95       	lsr	r25
    3e58:	87 95       	ror	r24
    3e5a:	96 95       	lsr	r25
    3e5c:	87 95       	ror	r24
    3e5e:	96 95       	lsr	r25
    3e60:	87 95       	ror	r24
    3e62:	9c 01       	movw	r18, r24
    3e64:	22 0f       	add	r18, r18
    3e66:	33 1f       	adc	r19, r19
    3e68:	88 0f       	add	r24, r24
    3e6a:	99 1f       	adc	r25, r25
    3e6c:	88 0f       	add	r24, r24
    3e6e:	99 1f       	adc	r25, r25
    3e70:	88 0f       	add	r24, r24
    3e72:	99 1f       	adc	r25, r25
    3e74:	82 0f       	add	r24, r18
    3e76:	93 1f       	adc	r25, r19
    3e78:	28 1a       	sub	r2, r24
    3e7a:	39 0a       	sbc	r3, r25
    3e7c:	3f 92       	push	r3
    3e7e:	2f 92       	push	r2
    3e80:	2e a9       	ldd	r18, Y+54	; 0x36
    3e82:	3f a9       	ldd	r19, Y+55	; 0x37
    3e84:	8c d7       	rcall	.+3864   	; 0x4d9e <__umulhisi3>
    3e86:	96 95       	lsr	r25
    3e88:	87 95       	ror	r24
    3e8a:	96 95       	lsr	r25
    3e8c:	87 95       	ror	r24
    3e8e:	96 95       	lsr	r25
    3e90:	87 95       	ror	r24
    3e92:	9f 93       	push	r25
    3e94:	8f 93       	push	r24
    3e96:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    3e9a:	8f 93       	push	r24
    3e9c:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    3ea0:	8f 93       	push	r24
    3ea2:	2e e8       	ldi	r18, 0x8E	; 142
    3ea4:	31 e2       	ldi	r19, 0x21	; 33
    3ea6:	3f 93       	push	r19
    3ea8:	2f 93       	push	r18
    3eaa:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    3eae:	cd bf       	out	0x3d, r28	; 61
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	2e e8       	ldi	r18, 0x8E	; 142
    3eb4:	31 e2       	ldi	r19, 0x21	; 33
    3eb6:	3f 93       	push	r19
    3eb8:	2f 93       	push	r18
    3eba:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <printf>
	time_flag = 1;
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <time_flag>
}
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	e9 96       	adiw	r28, 0x39	; 57
    3eca:	cd bf       	out	0x3d, r28	; 61
    3ecc:	de bf       	out	0x3e, r29	; 62
    3ece:	df 91       	pop	r29
    3ed0:	cf 91       	pop	r28
    3ed2:	ff 91       	pop	r31
    3ed4:	ef 91       	pop	r30
    3ed6:	bf 91       	pop	r27
    3ed8:	af 91       	pop	r26
    3eda:	9f 91       	pop	r25
    3edc:	8f 91       	pop	r24
    3ede:	7f 91       	pop	r23
    3ee0:	6f 91       	pop	r22
    3ee2:	5f 91       	pop	r21
    3ee4:	4f 91       	pop	r20
    3ee6:	3f 91       	pop	r19
    3ee8:	2f 91       	pop	r18
    3eea:	1f 91       	pop	r17
    3eec:	0f 91       	pop	r16
    3eee:	ff 90       	pop	r15
    3ef0:	ef 90       	pop	r14
    3ef2:	df 90       	pop	r13
    3ef4:	cf 90       	pop	r12
    3ef6:	bf 90       	pop	r11
    3ef8:	af 90       	pop	r10
    3efa:	9f 90       	pop	r9
    3efc:	8f 90       	pop	r8
    3efe:	7f 90       	pop	r7
    3f00:	6f 90       	pop	r6
    3f02:	5f 90       	pop	r5
    3f04:	4f 90       	pop	r4
    3f06:	3f 90       	pop	r3
    3f08:	2f 90       	pop	r2
    3f0a:	0f 90       	pop	r0
    3f0c:	0b be       	out	0x3b, r0	; 59
    3f0e:	0f 90       	pop	r0
    3f10:	0a be       	out	0x3a, r0	; 58
    3f12:	0f 90       	pop	r0
    3f14:	09 be       	out	0x39, r0	; 57
    3f16:	0f 90       	pop	r0
    3f18:	08 be       	out	0x38, r0	; 56
    3f1a:	0f 90       	pop	r0
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	0f 90       	pop	r0
    3f20:	1f 90       	pop	r1
    3f22:	18 95       	reti

00003f24 <__vector_58>:


ISR(USARTE0_RXC_vect){
    3f24:	1f 92       	push	r1
    3f26:	0f 92       	push	r0
    3f28:	0f b6       	in	r0, 0x3f	; 63
    3f2a:	0f 92       	push	r0
    3f2c:	11 24       	eor	r1, r1
    3f2e:	08 b6       	in	r0, 0x38	; 56
    3f30:	0f 92       	push	r0
    3f32:	18 be       	out	0x38, r1	; 56
    3f34:	09 b6       	in	r0, 0x39	; 57
    3f36:	0f 92       	push	r0
    3f38:	19 be       	out	0x39, r1	; 57
    3f3a:	0b b6       	in	r0, 0x3b	; 59
    3f3c:	0f 92       	push	r0
    3f3e:	1b be       	out	0x3b, r1	; 59
    3f40:	2f 93       	push	r18
    3f42:	3f 93       	push	r19
    3f44:	4f 93       	push	r20
    3f46:	5f 93       	push	r21
    3f48:	6f 93       	push	r22
    3f4a:	7f 93       	push	r23
    3f4c:	8f 93       	push	r24
    3f4e:	9f 93       	push	r25
    3f50:	af 93       	push	r26
    3f52:	bf 93       	push	r27
    3f54:	ef 93       	push	r30
    3f56:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    3f58:	80 ea       	ldi	r24, 0xA0	; 160
    3f5a:	9a e0       	ldi	r25, 0x0A	; 10
    3f5c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <usart_getchar>
    3f60:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <xbee_comm>
	xbee_flag = 1;
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <xbee_flag>
}
    3f6a:	ff 91       	pop	r31
    3f6c:	ef 91       	pop	r30
    3f6e:	bf 91       	pop	r27
    3f70:	af 91       	pop	r26
    3f72:	9f 91       	pop	r25
    3f74:	8f 91       	pop	r24
    3f76:	7f 91       	pop	r23
    3f78:	6f 91       	pop	r22
    3f7a:	5f 91       	pop	r21
    3f7c:	4f 91       	pop	r20
    3f7e:	3f 91       	pop	r19
    3f80:	2f 91       	pop	r18
    3f82:	0f 90       	pop	r0
    3f84:	0b be       	out	0x3b, r0	; 59
    3f86:	0f 90       	pop	r0
    3f88:	09 be       	out	0x39, r0	; 57
    3f8a:	0f 90       	pop	r0
    3f8c:	08 be       	out	0x38, r0	; 56
    3f8e:	0f 90       	pop	r0
    3f90:	0f be       	out	0x3f, r0	; 63
    3f92:	0f 90       	pop	r0
    3f94:	1f 90       	pop	r1
    3f96:	18 95       	reti

00003f98 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    3f98:	1f 92       	push	r1
    3f9a:	0f 92       	push	r0
    3f9c:	0f b6       	in	r0, 0x3f	; 63
    3f9e:	0f 92       	push	r0
    3fa0:	11 24       	eor	r1, r1
    3fa2:	08 b6       	in	r0, 0x38	; 56
    3fa4:	0f 92       	push	r0
    3fa6:	18 be       	out	0x38, r1	; 56
    3fa8:	09 b6       	in	r0, 0x39	; 57
    3faa:	0f 92       	push	r0
    3fac:	19 be       	out	0x39, r1	; 57
    3fae:	0a b6       	in	r0, 0x3a	; 58
    3fb0:	0f 92       	push	r0
    3fb2:	1a be       	out	0x3a, r1	; 58
    3fb4:	0b b6       	in	r0, 0x3b	; 59
    3fb6:	0f 92       	push	r0
    3fb8:	1b be       	out	0x3b, r1	; 59
    3fba:	8f 92       	push	r8
    3fbc:	9f 92       	push	r9
    3fbe:	af 92       	push	r10
    3fc0:	bf 92       	push	r11
    3fc2:	cf 92       	push	r12
    3fc4:	df 92       	push	r13
    3fc6:	ef 92       	push	r14
    3fc8:	ff 92       	push	r15
    3fca:	1f 93       	push	r17
    3fcc:	2f 93       	push	r18
    3fce:	3f 93       	push	r19
    3fd0:	4f 93       	push	r20
    3fd2:	5f 93       	push	r21
    3fd4:	6f 93       	push	r22
    3fd6:	7f 93       	push	r23
    3fd8:	8f 93       	push	r24
    3fda:	9f 93       	push	r25
    3fdc:	af 93       	push	r26
    3fde:	bf 93       	push	r27
    3fe0:	ef 93       	push	r30
    3fe2:	ff 93       	push	r31
    3fe4:	cf 93       	push	r28
    3fe6:	df 93       	push	r29
    3fe8:	00 d0       	rcall	.+0      	; 0x3fea <__vector_91+0x52>
    3fea:	00 d0       	rcall	.+0      	; 0x3fec <__vector_91+0x54>
    3fec:	cd b7       	in	r28, 0x3d	; 61
    3fee:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    3ff0:	80 eb       	ldi	r24, 0xB0	; 176
    3ff2:	99 e0       	ldi	r25, 0x09	; 9
    3ff4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <usart_getchar>
    3ff8:	18 2f       	mov	r17, r24
	//printf("%c",c);

	if(c == (uint8_t) '$'){
    3ffa:	84 32       	cpi	r24, 0x24	; 36
    3ffc:	51 f4       	brne	.+20     	; 0x4012 <__stack+0x13>
		writing = 1;
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <writing>
		pos = 0;
    4004:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <pos>
		word_pos = 0;
    4008:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <word_pos>
		commas = 0;
    400c:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <commas>
    4010:	5a c2       	rjmp	.+1204   	; 0x44c6 <__stack+0x4c7>
	}
	else if(c == (uint8_t) '*'){
    4012:	8a 32       	cpi	r24, 0x2A	; 42
    4014:	29 f4       	brne	.+10     	; 0x4020 <__stack+0x21>
		commas = 0;
    4016:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <commas>
		writing = 0;
    401a:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <writing>
    401e:	53 c2       	rjmp	.+1190   	; 0x44c6 <__stack+0x4c7>
	}
	else if(c == (uint8_t) ','){
    4020:	8c 32       	cpi	r24, 0x2C	; 44
    4022:	09 f0       	breq	.+2      	; 0x4026 <__stack+0x27>
    4024:	50 c2       	rjmp	.+1184   	; 0x44c6 <__stack+0x4c7>
		gps[0] = 32;
    4026:	ea e7       	ldi	r30, 0x7A	; 122
    4028:	f1 e2       	ldi	r31, 0x21	; 33
    402a:	80 e2       	ldi	r24, 0x20	; 32
    402c:	80 83       	st	Z, r24
		if(gps[1] == 32){
    402e:	81 81       	ldd	r24, Z+1	; 0x01
    4030:	80 32       	cpi	r24, 0x20	; 32
    4032:	09 f0       	breq	.+2      	; 0x4036 <__stack+0x37>
    4034:	77 c2       	rjmp	.+1262   	; 0x4524 <__stack+0x525>
			gps[0] = '0';
    4036:	80 e3       	ldi	r24, 0x30	; 48
    4038:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <gps>
    403c:	73 c2       	rjmp	.+1254   	; 0x4524 <__stack+0x525>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    403e:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <gps>
    4042:	8e 32       	cpi	r24, 0x2E	; 46
    4044:	09 f0       	breq	.+2      	; 0x4048 <__stack+0x49>
    4046:	a3 c1       	rjmp	.+838    	; 0x438e <__stack+0x38f>
    4048:	a9 c1       	rjmp	.+850    	; 0x439c <__stack+0x39d>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    404a:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <gps>
    404e:	8e 32       	cpi	r24, 0x2E	; 46
    4050:	09 f0       	breq	.+2      	; 0x4054 <__stack+0x55>
    4052:	ef c0       	rjmp	.+478    	; 0x4232 <__stack+0x233>
    4054:	f5 c0       	rjmp	.+490    	; 0x4240 <__stack+0x241>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4056:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <gps>
    405a:	8e 32       	cpi	r24, 0x2E	; 46
    405c:	09 f0       	breq	.+2      	; 0x4060 <__stack+0x61>
    405e:	52 c0       	rjmp	.+164    	; 0x4104 <__stack+0x105>
    4060:	58 c0       	rjmp	.+176    	; 0x4112 <__stack+0x113>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4062:	91 91       	ld	r25, Z+
    4064:	9e 32       	cpi	r25, 0x2E	; 46
    4066:	29 f4       	brne	.+10     	; 0x4072 <__stack+0x73>
    4068:	01 c0       	rjmp	.+2      	; 0x406c <__stack+0x6d>
    406a:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    406c:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <idx>
						break;
    4070:	03 c0       	rjmp	.+6      	; 0x4078 <__stack+0x79>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    4072:	8f 5f       	subi	r24, 0xFF	; 255
    4074:	8f 30       	cpi	r24, 0x0F	; 15
    4076:	a9 f7       	brne	.-22     	; 0x4062 <__stack+0x63>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4078:	e0 91 25 21 	lds	r30, 0x2125	; 0x802125 <idx>
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	e6 58       	subi	r30, 0x86	; 134
    4080:	fe 4d       	sbci	r31, 0xDE	; 222
    4082:	80 e2       	ldi	r24, 0x20	; 32
    4084:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    4086:	20 91 25 21 	lds	r18, 0x2125	; 0x802125 <idx>
    408a:	2f 5f       	subi	r18, 0xFF	; 255
    408c:	2f 30       	cpi	r18, 0x0F	; 15
    408e:	c8 f4       	brcc	.+50     	; 0x40c2 <__stack+0xc3>
					if(gps[i] == 32){
    4090:	82 2f       	mov	r24, r18
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	fc 01       	movw	r30, r24
    4096:	e6 58       	subi	r30, 0x86	; 134
    4098:	fe 4d       	sbci	r31, 0xDE	; 222
    409a:	30 81       	ld	r19, Z
    409c:	30 32       	cpi	r19, 0x20	; 32
    409e:	89 f0       	breq	.+34     	; 0x40c2 <__stack+0xc3>
						break;
					}
					gps[i] = 32;
    40a0:	40 e2       	ldi	r20, 0x20	; 32
    40a2:	08 c0       	rjmp	.+16     	; 0x40b4 <__stack+0xb5>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    40a4:	82 2f       	mov	r24, r18
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	fc 01       	movw	r30, r24
    40aa:	e6 58       	subi	r30, 0x86	; 134
    40ac:	fe 4d       	sbci	r31, 0xDE	; 222
    40ae:	30 81       	ld	r19, Z
    40b0:	30 32       	cpi	r19, 0x20	; 32
    40b2:	39 f0       	breq	.+14     	; 0x40c2 <__stack+0xc3>
						break;
					}
					gps[i] = 32;
    40b4:	fc 01       	movw	r30, r24
    40b6:	e6 58       	subi	r30, 0x86	; 134
    40b8:	fe 4d       	sbci	r31, 0xDE	; 222
    40ba:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    40bc:	2f 5f       	subi	r18, 0xFF	; 255
    40be:	2f 30       	cpi	r18, 0x0F	; 15
    40c0:	89 f7       	brne	.-30     	; 0x40a4 <__stack+0xa5>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    40c2:	ce 01       	movw	r24, r28
    40c4:	01 96       	adiw	r24, 0x01	; 1
    40c6:	9f 93       	push	r25
    40c8:	8f 93       	push	r24
    40ca:	8a e4       	ldi	r24, 0x4A	; 74
    40cc:	90 e2       	ldi	r25, 0x20	; 32
    40ce:	9f 93       	push	r25
    40d0:	8f 93       	push	r24
    40d2:	8a e7       	ldi	r24, 0x7A	; 122
    40d4:	91 e2       	ldi	r25, 0x21	; 33
    40d6:	9f 93       	push	r25
    40d8:	8f 93       	push	r24
    40da:	36 d7       	rcall	.+3692   	; 0x4f48 <sscanf>
				gps_t = (double) val;
    40dc:	69 81       	ldd	r22, Y+1	; 0x01
    40de:	7a 81       	ldd	r23, Y+2	; 0x02
    40e0:	8b 81       	ldd	r24, Y+3	; 0x03
    40e2:	9c 81       	ldd	r25, Y+4	; 0x04
    40e4:	63 d3       	rcall	.+1734   	; 0x47ac <__floatsisf>
    40e6:	60 93 06 21 	sts	0x2106, r22	; 0x802106 <gps_t>
    40ea:	70 93 07 21 	sts	0x2107, r23	; 0x802107 <gps_t+0x1>
    40ee:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <gps_t+0x2>
    40f2:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <gps_t+0x3>
				break;
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	0f 90       	pop	r0
    40fc:	0f 90       	pop	r0
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	c3 c1       	rjmp	.+902    	; 0x448a <__stack+0x48b>
    4104:	eb e7       	ldi	r30, 0x7B	; 123
    4106:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    4108:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    410a:	91 91       	ld	r25, Z+
    410c:	9e 32       	cpi	r25, 0x2E	; 46
    410e:	29 f4       	brne	.+10     	; 0x411a <__stack+0x11b>
    4110:	01 c0       	rjmp	.+2      	; 0x4114 <__stack+0x115>
    4112:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    4114:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <idx>
						break;
    4118:	03 c0       	rjmp	.+6      	; 0x4120 <__stack+0x121>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    411a:	8f 5f       	subi	r24, 0xFF	; 255
    411c:	8f 30       	cpi	r24, 0x0F	; 15
    411e:	a9 f7       	brne	.-22     	; 0x410a <__stack+0x10b>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4120:	e0 91 25 21 	lds	r30, 0x2125	; 0x802125 <idx>
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	e6 58       	subi	r30, 0x86	; 134
    4128:	fe 4d       	sbci	r31, 0xDE	; 222
    412a:	80 e2       	ldi	r24, 0x20	; 32
    412c:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    412e:	20 91 25 21 	lds	r18, 0x2125	; 0x802125 <idx>
    4132:	2f 5f       	subi	r18, 0xFF	; 255
    4134:	2f 30       	cpi	r18, 0x0F	; 15
    4136:	08 f5       	brcc	.+66     	; 0x417a <__stack+0x17b>
					if(gps[i] == 32){
    4138:	82 2f       	mov	r24, r18
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	fc 01       	movw	r30, r24
    413e:	e6 58       	subi	r30, 0x86	; 134
    4140:	fe 4d       	sbci	r31, 0xDE	; 222
    4142:	30 81       	ld	r19, Z
    4144:	30 32       	cpi	r19, 0x20	; 32
    4146:	c9 f0       	breq	.+50     	; 0x417a <__stack+0x17b>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4148:	50 e2       	ldi	r21, 0x20	; 32
    414a:	08 c0       	rjmp	.+16     	; 0x415c <__stack+0x15d>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    414c:	82 2f       	mov	r24, r18
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	fc 01       	movw	r30, r24
    4152:	e6 58       	subi	r30, 0x86	; 134
    4154:	fe 4d       	sbci	r31, 0xDE	; 222
    4156:	30 81       	ld	r19, Z
    4158:	30 32       	cpi	r19, 0x20	; 32
    415a:	79 f0       	breq	.+30     	; 0x417a <__stack+0x17b>
						break;
					}
					dec[i-idx-1] = gps[i];
    415c:	40 91 25 21 	lds	r20, 0x2125	; 0x802125 <idx>
    4160:	fc 01       	movw	r30, r24
    4162:	e4 1b       	sub	r30, r20
    4164:	f1 09       	sbc	r31, r1
    4166:	e8 57       	subi	r30, 0x78	; 120
    4168:	fe 4d       	sbci	r31, 0xDE	; 222
    416a:	30 83       	st	Z, r19
					gps[i] = 32;
    416c:	fc 01       	movw	r30, r24
    416e:	e6 58       	subi	r30, 0x86	; 134
    4170:	fe 4d       	sbci	r31, 0xDE	; 222
    4172:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4174:	2f 5f       	subi	r18, 0xFF	; 255
    4176:	2f 30       	cpi	r18, 0x0F	; 15
    4178:	49 f7       	brne	.-46     	; 0x414c <__stack+0x14d>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    417a:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <dec>
    417e:	80 32       	cpi	r24, 0x20	; 32
    4180:	19 f4       	brne	.+6      	; 0x4188 <__stack+0x189>
					dec[0] = '0';
    4182:	80 e3       	ldi	r24, 0x30	; 48
    4184:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <dec>
				}
				sscanf(gps,"%ld",&val);
    4188:	ce 01       	movw	r24, r28
    418a:	01 96       	adiw	r24, 0x01	; 1
    418c:	9f 93       	push	r25
    418e:	8f 93       	push	r24
    4190:	8a e4       	ldi	r24, 0x4A	; 74
    4192:	90 e2       	ldi	r25, 0x20	; 32
    4194:	9f 93       	push	r25
    4196:	8f 93       	push	r24
    4198:	8a e7       	ldi	r24, 0x7A	; 122
    419a:	91 e2       	ldi	r25, 0x21	; 33
    419c:	9f 93       	push	r25
    419e:	8f 93       	push	r24
    41a0:	d3 d6       	rcall	.+3494   	; 0x4f48 <sscanf>
				sscanf(dec,"%d",&val2);
    41a2:	ce 01       	movw	r24, r28
    41a4:	05 96       	adiw	r24, 0x05	; 5
    41a6:	9f 93       	push	r25
    41a8:	8f 93       	push	r24
    41aa:	8e e4       	ldi	r24, 0x4E	; 78
    41ac:	90 e2       	ldi	r25, 0x20	; 32
    41ae:	9f 93       	push	r25
    41b0:	8f 93       	push	r24
    41b2:	89 e8       	ldi	r24, 0x89	; 137
    41b4:	91 e2       	ldi	r25, 0x21	; 33
    41b6:	9f 93       	push	r25
    41b8:	8f 93       	push	r24
    41ba:	c6 d6       	rcall	.+3468   	; 0x4f48 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    41bc:	89 80       	ldd	r8, Y+1	; 0x01
    41be:	9a 80       	ldd	r9, Y+2	; 0x02
    41c0:	ab 80       	ldd	r10, Y+3	; 0x03
    41c2:	bc 80       	ldd	r11, Y+4	; 0x04
    41c4:	6d 81       	ldd	r22, Y+5	; 0x05
    41c6:	7e 81       	ldd	r23, Y+6	; 0x06
    41c8:	07 2e       	mov	r0, r23
    41ca:	00 0c       	add	r0, r0
    41cc:	88 0b       	sbc	r24, r24
    41ce:	99 0b       	sbc	r25, r25
    41d0:	ed d2       	rcall	.+1498   	; 0x47ac <__floatsisf>
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e4       	ldi	r19, 0x40	; 64
    41d6:	4c e1       	ldi	r20, 0x1C	; 28
    41d8:	56 e4       	ldi	r21, 0x46	; 70
    41da:	4d d2       	rcall	.+1178   	; 0x4676 <__divsf3>
    41dc:	6b 01       	movw	r12, r22
    41de:	7c 01       	movw	r14, r24
    41e0:	c5 01       	movw	r24, r10
    41e2:	b4 01       	movw	r22, r8
    41e4:	24 e6       	ldi	r18, 0x64	; 100
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	40 e0       	ldi	r20, 0x00	; 0
    41ea:	50 e0       	ldi	r21, 0x00	; 0
    41ec:	b3 d5       	rcall	.+2918   	; 0x4d54 <__divmodsi4>
    41ee:	49 01       	movw	r8, r18
    41f0:	5a 01       	movw	r10, r20
    41f2:	dc d2       	rcall	.+1464   	; 0x47ac <__floatsisf>
    41f4:	9b 01       	movw	r18, r22
    41f6:	ac 01       	movw	r20, r24
    41f8:	c7 01       	movw	r24, r14
    41fa:	b6 01       	movw	r22, r12
    41fc:	d4 d1       	rcall	.+936    	; 0x45a6 <__addsf3>
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	40 e7       	ldi	r20, 0x70	; 112
    4204:	52 e4       	ldi	r21, 0x42	; 66
    4206:	37 d2       	rcall	.+1134   	; 0x4676 <__divsf3>
    4208:	6b 01       	movw	r12, r22
    420a:	7c 01       	movw	r14, r24
    420c:	c5 01       	movw	r24, r10
    420e:	b4 01       	movw	r22, r8
    4210:	cd d2       	rcall	.+1434   	; 0x47ac <__floatsisf>
    4212:	9b 01       	movw	r18, r22
    4214:	ac 01       	movw	r20, r24
    4216:	c7 01       	movw	r24, r14
    4218:	b6 01       	movw	r22, r12
    421a:	c5 d1       	rcall	.+906    	; 0x45a6 <__addsf3>
    421c:	60 93 02 21 	sts	0x2102, r22	; 0x802102 <gps_lat>
    4220:	70 93 03 21 	sts	0x2103, r23	; 0x802103 <gps_lat+0x1>
    4224:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <gps_lat+0x2>
    4228:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <gps_lat+0x3>
				break;
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	2c c1       	rjmp	.+600    	; 0x448a <__stack+0x48b>
    4232:	eb e7       	ldi	r30, 0x7B	; 123
    4234:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    4236:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    4238:	91 91       	ld	r25, Z+
    423a:	9e 32       	cpi	r25, 0x2E	; 46
    423c:	29 f4       	brne	.+10     	; 0x4248 <__stack+0x249>
    423e:	01 c0       	rjmp	.+2      	; 0x4242 <__stack+0x243>
    4240:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    4242:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <idx>
						break;
    4246:	03 c0       	rjmp	.+6      	; 0x424e <__stack+0x24f>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    4248:	8f 5f       	subi	r24, 0xFF	; 255
    424a:	8f 30       	cpi	r24, 0x0F	; 15
    424c:	a9 f7       	brne	.-22     	; 0x4238 <__stack+0x239>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    424e:	e0 91 25 21 	lds	r30, 0x2125	; 0x802125 <idx>
    4252:	f0 e0       	ldi	r31, 0x00	; 0
    4254:	e6 58       	subi	r30, 0x86	; 134
    4256:	fe 4d       	sbci	r31, 0xDE	; 222
    4258:	80 e2       	ldi	r24, 0x20	; 32
    425a:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    425c:	20 91 25 21 	lds	r18, 0x2125	; 0x802125 <idx>
    4260:	2f 5f       	subi	r18, 0xFF	; 255
    4262:	2f 30       	cpi	r18, 0x0F	; 15
    4264:	08 f5       	brcc	.+66     	; 0x42a8 <__stack+0x2a9>
					if(gps[i] == 32){
    4266:	82 2f       	mov	r24, r18
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	fc 01       	movw	r30, r24
    426c:	e6 58       	subi	r30, 0x86	; 134
    426e:	fe 4d       	sbci	r31, 0xDE	; 222
    4270:	30 81       	ld	r19, Z
    4272:	30 32       	cpi	r19, 0x20	; 32
    4274:	c9 f0       	breq	.+50     	; 0x42a8 <__stack+0x2a9>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4276:	50 e2       	ldi	r21, 0x20	; 32
    4278:	08 c0       	rjmp	.+16     	; 0x428a <__stack+0x28b>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    427a:	82 2f       	mov	r24, r18
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	fc 01       	movw	r30, r24
    4280:	e6 58       	subi	r30, 0x86	; 134
    4282:	fe 4d       	sbci	r31, 0xDE	; 222
    4284:	30 81       	ld	r19, Z
    4286:	30 32       	cpi	r19, 0x20	; 32
    4288:	79 f0       	breq	.+30     	; 0x42a8 <__stack+0x2a9>
						break;
					}
					dec[i-idx-1] = gps[i];
    428a:	40 91 25 21 	lds	r20, 0x2125	; 0x802125 <idx>
    428e:	fc 01       	movw	r30, r24
    4290:	e4 1b       	sub	r30, r20
    4292:	f1 09       	sbc	r31, r1
    4294:	e8 57       	subi	r30, 0x78	; 120
    4296:	fe 4d       	sbci	r31, 0xDE	; 222
    4298:	30 83       	st	Z, r19
					gps[i] = 32;
    429a:	fc 01       	movw	r30, r24
    429c:	e6 58       	subi	r30, 0x86	; 134
    429e:	fe 4d       	sbci	r31, 0xDE	; 222
    42a0:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    42a2:	2f 5f       	subi	r18, 0xFF	; 255
    42a4:	2f 30       	cpi	r18, 0x0F	; 15
    42a6:	49 f7       	brne	.-46     	; 0x427a <__stack+0x27b>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    42a8:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <dec>
    42ac:	80 32       	cpi	r24, 0x20	; 32
    42ae:	19 f4       	brne	.+6      	; 0x42b6 <__stack+0x2b7>
					dec[0] = '0';
    42b0:	80 e3       	ldi	r24, 0x30	; 48
    42b2:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <dec>
				}
				sscanf(gps,"%ld",&val);
    42b6:	ce 01       	movw	r24, r28
    42b8:	01 96       	adiw	r24, 0x01	; 1
    42ba:	9f 93       	push	r25
    42bc:	8f 93       	push	r24
    42be:	8a e4       	ldi	r24, 0x4A	; 74
    42c0:	90 e2       	ldi	r25, 0x20	; 32
    42c2:	9f 93       	push	r25
    42c4:	8f 93       	push	r24
    42c6:	8a e7       	ldi	r24, 0x7A	; 122
    42c8:	91 e2       	ldi	r25, 0x21	; 33
    42ca:	9f 93       	push	r25
    42cc:	8f 93       	push	r24
    42ce:	3c d6       	rcall	.+3192   	; 0x4f48 <sscanf>
				sscanf(dec,"%d",&val2);
    42d0:	ce 01       	movw	r24, r28
    42d2:	05 96       	adiw	r24, 0x05	; 5
    42d4:	9f 93       	push	r25
    42d6:	8f 93       	push	r24
    42d8:	8e e4       	ldi	r24, 0x4E	; 78
    42da:	90 e2       	ldi	r25, 0x20	; 32
    42dc:	9f 93       	push	r25
    42de:	8f 93       	push	r24
    42e0:	89 e8       	ldi	r24, 0x89	; 137
    42e2:	91 e2       	ldi	r25, 0x21	; 33
    42e4:	9f 93       	push	r25
    42e6:	8f 93       	push	r24
    42e8:	2f d6       	rcall	.+3166   	; 0x4f48 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    42ea:	89 80       	ldd	r8, Y+1	; 0x01
    42ec:	9a 80       	ldd	r9, Y+2	; 0x02
    42ee:	ab 80       	ldd	r10, Y+3	; 0x03
    42f0:	bc 80       	ldd	r11, Y+4	; 0x04
    42f2:	6d 81       	ldd	r22, Y+5	; 0x05
    42f4:	7e 81       	ldd	r23, Y+6	; 0x06
    42f6:	07 2e       	mov	r0, r23
    42f8:	00 0c       	add	r0, r0
    42fa:	88 0b       	sbc	r24, r24
    42fc:	99 0b       	sbc	r25, r25
    42fe:	56 d2       	rcall	.+1196   	; 0x47ac <__floatsisf>
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e4       	ldi	r19, 0x40	; 64
    4304:	4c e1       	ldi	r20, 0x1C	; 28
    4306:	56 e4       	ldi	r21, 0x46	; 70
    4308:	b6 d1       	rcall	.+876    	; 0x4676 <__divsf3>
    430a:	6b 01       	movw	r12, r22
    430c:	7c 01       	movw	r14, r24
    430e:	c5 01       	movw	r24, r10
    4310:	b4 01       	movw	r22, r8
    4312:	24 e6       	ldi	r18, 0x64	; 100
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	40 e0       	ldi	r20, 0x00	; 0
    4318:	50 e0       	ldi	r21, 0x00	; 0
    431a:	1c d5       	rcall	.+2616   	; 0x4d54 <__divmodsi4>
    431c:	49 01       	movw	r8, r18
    431e:	5a 01       	movw	r10, r20
    4320:	45 d2       	rcall	.+1162   	; 0x47ac <__floatsisf>
    4322:	9b 01       	movw	r18, r22
    4324:	ac 01       	movw	r20, r24
    4326:	c7 01       	movw	r24, r14
    4328:	b6 01       	movw	r22, r12
    432a:	3d d1       	rcall	.+634    	; 0x45a6 <__addsf3>
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	40 e7       	ldi	r20, 0x70	; 112
    4332:	52 e4       	ldi	r21, 0x42	; 66
    4334:	a0 d1       	rcall	.+832    	; 0x4676 <__divsf3>
    4336:	6b 01       	movw	r12, r22
    4338:	7c 01       	movw	r14, r24
    433a:	c5 01       	movw	r24, r10
    433c:	b4 01       	movw	r22, r8
    433e:	36 d2       	rcall	.+1132   	; 0x47ac <__floatsisf>
    4340:	9b 01       	movw	r18, r22
    4342:	ac 01       	movw	r20, r24
    4344:	c7 01       	movw	r24, r14
    4346:	b6 01       	movw	r22, r12
    4348:	2e d1       	rcall	.+604    	; 0x45a6 <__addsf3>
    434a:	dc 01       	movw	r26, r24
    434c:	cb 01       	movw	r24, r22
    434e:	b0 58       	subi	r27, 0x80	; 128
    4350:	80 93 fe 20 	sts	0x20FE, r24	; 0x8020fe <gps_long>
    4354:	90 93 ff 20 	sts	0x20FF, r25	; 0x8020ff <gps_long+0x1>
    4358:	a0 93 00 21 	sts	0x2100, r26	; 0x802100 <gps_long+0x2>
    435c:	b0 93 01 21 	sts	0x2101, r27	; 0x802101 <gps_long+0x3>
    4360:	cd bf       	out	0x3d, r28	; 61
				break;
    4362:	de bf       	out	0x3e, r29	; 62
    4364:	92 c0       	rjmp	.+292    	; 0x448a <__stack+0x48b>
    4366:	88 ef       	ldi	r24, 0xF8	; 248
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    4368:	90 e2       	ldi	r25, 0x20	; 32
    436a:	9f 93       	push	r25
    436c:	8f 93       	push	r24
    436e:	8e e4       	ldi	r24, 0x4E	; 78
    4370:	90 e2       	ldi	r25, 0x20	; 32
    4372:	9f 93       	push	r25
    4374:	8f 93       	push	r24
    4376:	8a e7       	ldi	r24, 0x7A	; 122
    4378:	91 e2       	ldi	r25, 0x21	; 33
    437a:	9f 93       	push	r25
    437c:	8f 93       	push	r24
    437e:	e4 d5       	rcall	.+3016   	; 0x4f48 <sscanf>
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
				break;
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	0f 90       	pop	r0
    438c:	7e c0       	rjmp	.+252    	; 0x448a <__stack+0x48b>
    438e:	eb e7       	ldi	r30, 0x7B	; 123
    4390:	f1 e2       	ldi	r31, 0x21	; 33
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4396:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    4398:	29 f4       	brne	.+10     	; 0x43a4 <__stack+0x3a5>
    439a:	01 c0       	rjmp	.+2      	; 0x439e <__stack+0x39f>
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <idx>
						idx = i;
    43a2:	03 c0       	rjmp	.+6      	; 0x43aa <__stack+0x3ab>
    43a4:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    43a6:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    43a8:	a9 f7       	brne	.-22     	; 0x4394 <__stack+0x395>
    43aa:	e0 91 25 21 	lds	r30, 0x2125	; 0x802125 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	e6 58       	subi	r30, 0x86	; 134
    43b2:	fe 4d       	sbci	r31, 0xDE	; 222
    43b4:	80 e2       	ldi	r24, 0x20	; 32
    43b6:	80 83       	st	Z, r24
    43b8:	20 91 25 21 	lds	r18, 0x2125	; 0x802125 <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    43bc:	2f 5f       	subi	r18, 0xFF	; 255
    43be:	2f 30       	cpi	r18, 0x0F	; 15
    43c0:	08 f5       	brcc	.+66     	; 0x4404 <__stack+0x405>
    43c2:	82 2f       	mov	r24, r18
    43c4:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    43c6:	fc 01       	movw	r30, r24
    43c8:	e6 58       	subi	r30, 0x86	; 134
    43ca:	fe 4d       	sbci	r31, 0xDE	; 222
    43cc:	30 81       	ld	r19, Z
    43ce:	30 32       	cpi	r19, 0x20	; 32
    43d0:	c9 f0       	breq	.+50     	; 0x4404 <__stack+0x405>
    43d2:	50 e2       	ldi	r21, 0x20	; 32
    43d4:	08 c0       	rjmp	.+16     	; 0x43e6 <__stack+0x3e7>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    43d6:	82 2f       	mov	r24, r18
    43d8:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    43da:	fc 01       	movw	r30, r24
    43dc:	e6 58       	subi	r30, 0x86	; 134
    43de:	fe 4d       	sbci	r31, 0xDE	; 222
    43e0:	30 81       	ld	r19, Z
    43e2:	30 32       	cpi	r19, 0x20	; 32
    43e4:	79 f0       	breq	.+30     	; 0x4404 <__stack+0x405>
    43e6:	40 91 25 21 	lds	r20, 0x2125	; 0x802125 <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    43ea:	fc 01       	movw	r30, r24
    43ec:	e4 1b       	sub	r30, r20
    43ee:	f1 09       	sbc	r31, r1
    43f0:	e8 57       	subi	r30, 0x78	; 120
    43f2:	fe 4d       	sbci	r31, 0xDE	; 222
    43f4:	30 83       	st	Z, r19
    43f6:	fc 01       	movw	r30, r24
    43f8:	e6 58       	subi	r30, 0x86	; 134
					gps[i] = 32;
    43fa:	fe 4d       	sbci	r31, 0xDE	; 222
    43fc:	50 83       	st	Z, r21
    43fe:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4400:	2f 30       	cpi	r18, 0x0F	; 15
    4402:	49 f7       	brne	.-46     	; 0x43d6 <__stack+0x3d7>
    4404:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    4408:	80 32       	cpi	r24, 0x20	; 32
    440a:	19 f4       	brne	.+6      	; 0x4412 <__stack+0x413>
    440c:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    440e:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <dec>
    4412:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    4414:	01 96       	adiw	r24, 0x01	; 1
    4416:	9f 93       	push	r25
    4418:	8f 93       	push	r24
    441a:	8a e4       	ldi	r24, 0x4A	; 74
    441c:	90 e2       	ldi	r25, 0x20	; 32
    441e:	9f 93       	push	r25
    4420:	8f 93       	push	r24
    4422:	8a e7       	ldi	r24, 0x7A	; 122
    4424:	91 e2       	ldi	r25, 0x21	; 33
    4426:	9f 93       	push	r25
    4428:	8f 93       	push	r24
    442a:	8e d5       	rcall	.+2844   	; 0x4f48 <sscanf>
				sscanf(dec,"%d",&val2);
    442c:	ce 01       	movw	r24, r28
    442e:	05 96       	adiw	r24, 0x05	; 5
    4430:	9f 93       	push	r25
    4432:	8f 93       	push	r24
    4434:	8e e4       	ldi	r24, 0x4E	; 78
    4436:	90 e2       	ldi	r25, 0x20	; 32
    4438:	9f 93       	push	r25
    443a:	8f 93       	push	r24
    443c:	89 e8       	ldi	r24, 0x89	; 137
    443e:	91 e2       	ldi	r25, 0x21	; 33
    4440:	9f 93       	push	r25
    4442:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    4444:	81 d5       	rcall	.+2818   	; 0x4f48 <sscanf>
    4446:	69 81       	ldd	r22, Y+1	; 0x01
    4448:	7a 81       	ldd	r23, Y+2	; 0x02
    444a:	8b 81       	ldd	r24, Y+3	; 0x03
    444c:	9c 81       	ldd	r25, Y+4	; 0x04
    444e:	ae d1       	rcall	.+860    	; 0x47ac <__floatsisf>
    4450:	6b 01       	movw	r12, r22
    4452:	7c 01       	movw	r14, r24
    4454:	6d 81       	ldd	r22, Y+5	; 0x05
    4456:	7e 81       	ldd	r23, Y+6	; 0x06
    4458:	07 2e       	mov	r0, r23
    445a:	00 0c       	add	r0, r0
    445c:	88 0b       	sbc	r24, r24
    445e:	99 0b       	sbc	r25, r25
    4460:	a5 d1       	rcall	.+842    	; 0x47ac <__floatsisf>
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	40 e2       	ldi	r20, 0x20	; 32
    4468:	51 e4       	ldi	r21, 0x41	; 65
    446a:	05 d1       	rcall	.+522    	; 0x4676 <__divsf3>
    446c:	9b 01       	movw	r18, r22
    446e:	ac 01       	movw	r20, r24
    4470:	c7 01       	movw	r24, r14
    4472:	b6 01       	movw	r22, r12
    4474:	98 d0       	rcall	.+304    	; 0x45a6 <__addsf3>
    4476:	60 93 fa 20 	sts	0x20FA, r22	; 0x8020fa <gps_alt>
    447a:	70 93 fb 20 	sts	0x20FB, r23	; 0x8020fb <gps_alt+0x1>
    447e:	80 93 fc 20 	sts	0x20FC, r24	; 0x8020fc <gps_alt+0x2>
    4482:	90 93 fd 20 	sts	0x20FD, r25	; 0x8020fd <gps_alt+0x3>
    4486:	cd bf       	out	0x3d, r28	; 61
    4488:	de bf       	out	0x3e, r29	; 62
    448a:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <writing>
				break;
    448e:	88 23       	and	r24, r24
		}

		if(writing){
    4490:	d1 f0       	breq	.+52     	; 0x44c6 <__stack+0x4c7>
    4492:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <idx>
    4496:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <commas>
			idx = 0;
    449a:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    449c:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <commas>
    44a0:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <word_pos>
    44a4:	ea e7       	ldi	r30, 0x7A	; 122
			word_pos = 0;
    44a6:	f1 e2       	ldi	r31, 0x21	; 33
    44a8:	29 e8       	ldi	r18, 0x89	; 137
    44aa:	31 e2       	ldi	r19, 0x21	; 33
    44ac:	80 e2       	ldi	r24, 0x20	; 32
    44ae:	81 93       	st	Z+, r24
    44b0:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    44b2:	3f 07       	cpc	r19, r31
    44b4:	e1 f7       	brne	.-8      	; 0x44ae <__stack+0x4af>

		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    44b6:	e9 e8       	ldi	r30, 0x89	; 137
    44b8:	f1 e2       	ldi	r31, 0x21	; 33
    44ba:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    44bc:	80 83       	st	Z, r24
    44be:	81 83       	std	Z+1, r24	; 0x01
    44c0:	82 83       	std	Z+2, r24	; 0x02
    44c2:	83 83       	std	Z+3, r24	; 0x03
    44c4:	84 83       	std	Z+4, r24	; 0x04
    44c6:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <writing>
    44ca:	88 23       	and	r24, r24
			}
		}
	}

	if(writing){
    44cc:	09 f4       	brne	.+2      	; 0x44d0 <__stack+0x4d1>
    44ce:	43 c0       	rjmp	.+134    	; 0x4556 <__stack+0x557>
    44d0:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <pos>
    44d4:	83 30       	cpi	r24, 0x03	; 3
		switch(pos){
    44d6:	19 f0       	breq	.+6      	; 0x44de <__stack+0x4df>
    44d8:	84 30       	cpi	r24, 0x04	; 4
    44da:	31 f0       	breq	.+12     	; 0x44e8 <__stack+0x4e9>
    44dc:	09 c0       	rjmp	.+18     	; 0x44f0 <__stack+0x4f1>
    44de:	17 34       	cpi	r17, 0x47	; 71
    44e0:	39 f0       	breq	.+14     	; 0x44f0 <__stack+0x4f1>
    44e2:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <writing>
			case 3:
				if(c != 'G'){
    44e6:	04 c0       	rjmp	.+8      	; 0x44f0 <__stack+0x4f1>
					writing = 0;
    44e8:	17 34       	cpi	r17, 0x47	; 71
    44ea:	11 f0       	breq	.+4      	; 0x44f0 <__stack+0x4f1>
    44ec:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <writing>
				}
				break;

			case 4:
				if(c != 'G'){
    44f0:	e0 91 27 21 	lds	r30, 0x2127	; 0x802127 <word_pos>
					writing = 0;
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
				}
				break;
		}
		gps[word_pos] = c;
    44f6:	e6 58       	subi	r30, 0x86	; 134
    44f8:	fe 4d       	sbci	r31, 0xDE	; 222
    44fa:	10 83       	st	Z, r17
    44fc:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <word_pos>
    4500:	8f 5f       	subi	r24, 0xFF	; 255
		word_pos++;
    4502:	80 93 27 21 	sts	0x2127, r24	; 0x802127 <word_pos>
    4506:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <pos>
    450a:	8f 5f       	subi	r24, 0xFF	; 255
		pos++;
    450c:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <pos>
    4510:	22 c0       	rjmp	.+68     	; 0x4556 <__stack+0x557>
    4512:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <gps>
	}
    4516:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4518:	09 f4       	brne	.+2      	; 0x451c <__stack+0x51d>
    451a:	a7 cd       	rjmp	.-1202   	; 0x406a <__stack+0x6b>
    451c:	eb e7       	ldi	r30, 0x7B	; 123
    451e:	f1 e2       	ldi	r31, 0x21	; 33
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	9f cd       	rjmp	.-1218   	; 0x4062 <__stack+0x63>
    4524:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    4526:	1a 82       	std	Y+2, r1	; 0x02
    4528:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    452a:	1c 82       	std	Y+4, r1	; 0x04
    452c:	1d 82       	std	Y+5, r1	; 0x05
    452e:	1e 82       	std	Y+6, r1	; 0x06
    4530:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <commas>
		int16_t val2 = 0;
    4534:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    4536:	09 f4       	brne	.+2      	; 0x453a <__stack+0x53b>
    4538:	88 cd       	rjmp	.-1264   	; 0x404a <__stack+0x4b>
    453a:	30 f4       	brcc	.+12     	; 0x4548 <__stack+0x549>
    453c:	81 30       	cpi	r24, 0x01	; 1
    453e:	49 f3       	breq	.-46     	; 0x4512 <__stack+0x513>
    4540:	82 30       	cpi	r24, 0x02	; 2
    4542:	09 f4       	brne	.+2      	; 0x4546 <__stack+0x547>
    4544:	88 cd       	rjmp	.-1264   	; 0x4056 <__stack+0x57>
    4546:	a1 cf       	rjmp	.-190    	; 0x448a <__stack+0x48b>
    4548:	87 30       	cpi	r24, 0x07	; 7
    454a:	09 f4       	brne	.+2      	; 0x454e <__stack+0x54f>
    454c:	0c cf       	rjmp	.-488    	; 0x4366 <__stack+0x367>
    454e:	89 30       	cpi	r24, 0x09	; 9
    4550:	09 f4       	brne	.+2      	; 0x4554 <__stack+0x555>
    4552:	75 cd       	rjmp	.-1302   	; 0x403e <__stack+0x3f>
    4554:	9a cf       	rjmp	.-204    	; 0x448a <__stack+0x48b>
    4556:	26 96       	adiw	r28, 0x06	; 6
    4558:	cd bf       	out	0x3d, r28	; 61
    455a:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	ff 91       	pop	r31
    4562:	ef 91       	pop	r30
    4564:	bf 91       	pop	r27
    4566:	af 91       	pop	r26
    4568:	9f 91       	pop	r25
    456a:	8f 91       	pop	r24
    456c:	7f 91       	pop	r23
    456e:	6f 91       	pop	r22
    4570:	5f 91       	pop	r21
    4572:	4f 91       	pop	r20
    4574:	3f 91       	pop	r19
    4576:	2f 91       	pop	r18
    4578:	1f 91       	pop	r17
    457a:	ff 90       	pop	r15
    457c:	ef 90       	pop	r14
    457e:	df 90       	pop	r13
    4580:	cf 90       	pop	r12
    4582:	bf 90       	pop	r11
    4584:	af 90       	pop	r10
    4586:	9f 90       	pop	r9
    4588:	8f 90       	pop	r8
    458a:	0f 90       	pop	r0
    458c:	0b be       	out	0x3b, r0	; 59
    458e:	0f 90       	pop	r0
    4590:	0a be       	out	0x3a, r0	; 58
    4592:	0f 90       	pop	r0
    4594:	09 be       	out	0x39, r0	; 57
    4596:	0f 90       	pop	r0
    4598:	08 be       	out	0x38, r0	; 56
    459a:	0f 90       	pop	r0
    459c:	0f be       	out	0x3f, r0	; 63
    459e:	0f 90       	pop	r0
    45a0:	1f 90       	pop	r1
    45a2:	18 95       	reti

000045a4 <__subsf3>:
    45a4:	50 58       	subi	r21, 0x80	; 128

000045a6 <__addsf3>:
    45a6:	bb 27       	eor	r27, r27
    45a8:	aa 27       	eor	r26, r26
    45aa:	0e d0       	rcall	.+28     	; 0x45c8 <__addsf3x>
    45ac:	75 c1       	rjmp	.+746    	; 0x4898 <__fp_round>
    45ae:	66 d1       	rcall	.+716    	; 0x487c <__fp_pscA>
    45b0:	30 f0       	brcs	.+12     	; 0x45be <__addsf3+0x18>
    45b2:	6b d1       	rcall	.+726    	; 0x488a <__fp_pscB>
    45b4:	20 f0       	brcs	.+8      	; 0x45be <__addsf3+0x18>
    45b6:	31 f4       	brne	.+12     	; 0x45c4 <__addsf3+0x1e>
    45b8:	9f 3f       	cpi	r25, 0xFF	; 255
    45ba:	11 f4       	brne	.+4      	; 0x45c0 <__addsf3+0x1a>
    45bc:	1e f4       	brtc	.+6      	; 0x45c4 <__addsf3+0x1e>
    45be:	5b c1       	rjmp	.+694    	; 0x4876 <__fp_nan>
    45c0:	0e f4       	brtc	.+2      	; 0x45c4 <__addsf3+0x1e>
    45c2:	e0 95       	com	r30
    45c4:	e7 fb       	bst	r30, 7
    45c6:	51 c1       	rjmp	.+674    	; 0x486a <__fp_inf>

000045c8 <__addsf3x>:
    45c8:	e9 2f       	mov	r30, r25
    45ca:	77 d1       	rcall	.+750    	; 0x48ba <__fp_split3>
    45cc:	80 f3       	brcs	.-32     	; 0x45ae <__addsf3+0x8>
    45ce:	ba 17       	cp	r27, r26
    45d0:	62 07       	cpc	r22, r18
    45d2:	73 07       	cpc	r23, r19
    45d4:	84 07       	cpc	r24, r20
    45d6:	95 07       	cpc	r25, r21
    45d8:	18 f0       	brcs	.+6      	; 0x45e0 <__addsf3x+0x18>
    45da:	71 f4       	brne	.+28     	; 0x45f8 <__addsf3x+0x30>
    45dc:	9e f5       	brtc	.+102    	; 0x4644 <__addsf3x+0x7c>
    45de:	8f c1       	rjmp	.+798    	; 0x48fe <__fp_zero>
    45e0:	0e f4       	brtc	.+2      	; 0x45e4 <__addsf3x+0x1c>
    45e2:	e0 95       	com	r30
    45e4:	0b 2e       	mov	r0, r27
    45e6:	ba 2f       	mov	r27, r26
    45e8:	a0 2d       	mov	r26, r0
    45ea:	0b 01       	movw	r0, r22
    45ec:	b9 01       	movw	r22, r18
    45ee:	90 01       	movw	r18, r0
    45f0:	0c 01       	movw	r0, r24
    45f2:	ca 01       	movw	r24, r20
    45f4:	a0 01       	movw	r20, r0
    45f6:	11 24       	eor	r1, r1
    45f8:	ff 27       	eor	r31, r31
    45fa:	59 1b       	sub	r21, r25
    45fc:	99 f0       	breq	.+38     	; 0x4624 <__addsf3x+0x5c>
    45fe:	59 3f       	cpi	r21, 0xF9	; 249
    4600:	50 f4       	brcc	.+20     	; 0x4616 <__addsf3x+0x4e>
    4602:	50 3e       	cpi	r21, 0xE0	; 224
    4604:	68 f1       	brcs	.+90     	; 0x4660 <__addsf3x+0x98>
    4606:	1a 16       	cp	r1, r26
    4608:	f0 40       	sbci	r31, 0x00	; 0
    460a:	a2 2f       	mov	r26, r18
    460c:	23 2f       	mov	r18, r19
    460e:	34 2f       	mov	r19, r20
    4610:	44 27       	eor	r20, r20
    4612:	58 5f       	subi	r21, 0xF8	; 248
    4614:	f3 cf       	rjmp	.-26     	; 0x45fc <__addsf3x+0x34>
    4616:	46 95       	lsr	r20
    4618:	37 95       	ror	r19
    461a:	27 95       	ror	r18
    461c:	a7 95       	ror	r26
    461e:	f0 40       	sbci	r31, 0x00	; 0
    4620:	53 95       	inc	r21
    4622:	c9 f7       	brne	.-14     	; 0x4616 <__addsf3x+0x4e>
    4624:	7e f4       	brtc	.+30     	; 0x4644 <__addsf3x+0x7c>
    4626:	1f 16       	cp	r1, r31
    4628:	ba 0b       	sbc	r27, r26
    462a:	62 0b       	sbc	r22, r18
    462c:	73 0b       	sbc	r23, r19
    462e:	84 0b       	sbc	r24, r20
    4630:	ba f0       	brmi	.+46     	; 0x4660 <__addsf3x+0x98>
    4632:	91 50       	subi	r25, 0x01	; 1
    4634:	a1 f0       	breq	.+40     	; 0x465e <__addsf3x+0x96>
    4636:	ff 0f       	add	r31, r31
    4638:	bb 1f       	adc	r27, r27
    463a:	66 1f       	adc	r22, r22
    463c:	77 1f       	adc	r23, r23
    463e:	88 1f       	adc	r24, r24
    4640:	c2 f7       	brpl	.-16     	; 0x4632 <__addsf3x+0x6a>
    4642:	0e c0       	rjmp	.+28     	; 0x4660 <__addsf3x+0x98>
    4644:	ba 0f       	add	r27, r26
    4646:	62 1f       	adc	r22, r18
    4648:	73 1f       	adc	r23, r19
    464a:	84 1f       	adc	r24, r20
    464c:	48 f4       	brcc	.+18     	; 0x4660 <__addsf3x+0x98>
    464e:	87 95       	ror	r24
    4650:	77 95       	ror	r23
    4652:	67 95       	ror	r22
    4654:	b7 95       	ror	r27
    4656:	f7 95       	ror	r31
    4658:	9e 3f       	cpi	r25, 0xFE	; 254
    465a:	08 f0       	brcs	.+2      	; 0x465e <__addsf3x+0x96>
    465c:	b3 cf       	rjmp	.-154    	; 0x45c4 <__addsf3+0x1e>
    465e:	93 95       	inc	r25
    4660:	88 0f       	add	r24, r24
    4662:	08 f0       	brcs	.+2      	; 0x4666 <__addsf3x+0x9e>
    4664:	99 27       	eor	r25, r25
    4666:	ee 0f       	add	r30, r30
    4668:	97 95       	ror	r25
    466a:	87 95       	ror	r24
    466c:	08 95       	ret

0000466e <__cmpsf2>:
    466e:	d9 d0       	rcall	.+434    	; 0x4822 <__fp_cmp>
    4670:	08 f4       	brcc	.+2      	; 0x4674 <__cmpsf2+0x6>
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	08 95       	ret

00004676 <__divsf3>:
    4676:	0c d0       	rcall	.+24     	; 0x4690 <__divsf3x>
    4678:	0f c1       	rjmp	.+542    	; 0x4898 <__fp_round>
    467a:	07 d1       	rcall	.+526    	; 0x488a <__fp_pscB>
    467c:	40 f0       	brcs	.+16     	; 0x468e <__divsf3+0x18>
    467e:	fe d0       	rcall	.+508    	; 0x487c <__fp_pscA>
    4680:	30 f0       	brcs	.+12     	; 0x468e <__divsf3+0x18>
    4682:	21 f4       	brne	.+8      	; 0x468c <__divsf3+0x16>
    4684:	5f 3f       	cpi	r21, 0xFF	; 255
    4686:	19 f0       	breq	.+6      	; 0x468e <__divsf3+0x18>
    4688:	f0 c0       	rjmp	.+480    	; 0x486a <__fp_inf>
    468a:	51 11       	cpse	r21, r1
    468c:	39 c1       	rjmp	.+626    	; 0x4900 <__fp_szero>
    468e:	f3 c0       	rjmp	.+486    	; 0x4876 <__fp_nan>

00004690 <__divsf3x>:
    4690:	14 d1       	rcall	.+552    	; 0x48ba <__fp_split3>
    4692:	98 f3       	brcs	.-26     	; 0x467a <__divsf3+0x4>

00004694 <__divsf3_pse>:
    4694:	99 23       	and	r25, r25
    4696:	c9 f3       	breq	.-14     	; 0x468a <__divsf3+0x14>
    4698:	55 23       	and	r21, r21
    469a:	b1 f3       	breq	.-20     	; 0x4688 <__divsf3+0x12>
    469c:	95 1b       	sub	r25, r21
    469e:	55 0b       	sbc	r21, r21
    46a0:	bb 27       	eor	r27, r27
    46a2:	aa 27       	eor	r26, r26
    46a4:	62 17       	cp	r22, r18
    46a6:	73 07       	cpc	r23, r19
    46a8:	84 07       	cpc	r24, r20
    46aa:	38 f0       	brcs	.+14     	; 0x46ba <__divsf3_pse+0x26>
    46ac:	9f 5f       	subi	r25, 0xFF	; 255
    46ae:	5f 4f       	sbci	r21, 0xFF	; 255
    46b0:	22 0f       	add	r18, r18
    46b2:	33 1f       	adc	r19, r19
    46b4:	44 1f       	adc	r20, r20
    46b6:	aa 1f       	adc	r26, r26
    46b8:	a9 f3       	breq	.-22     	; 0x46a4 <__divsf3_pse+0x10>
    46ba:	33 d0       	rcall	.+102    	; 0x4722 <__divsf3_pse+0x8e>
    46bc:	0e 2e       	mov	r0, r30
    46be:	3a f0       	brmi	.+14     	; 0x46ce <__divsf3_pse+0x3a>
    46c0:	e0 e8       	ldi	r30, 0x80	; 128
    46c2:	30 d0       	rcall	.+96     	; 0x4724 <__divsf3_pse+0x90>
    46c4:	91 50       	subi	r25, 0x01	; 1
    46c6:	50 40       	sbci	r21, 0x00	; 0
    46c8:	e6 95       	lsr	r30
    46ca:	00 1c       	adc	r0, r0
    46cc:	ca f7       	brpl	.-14     	; 0x46c0 <__divsf3_pse+0x2c>
    46ce:	29 d0       	rcall	.+82     	; 0x4722 <__divsf3_pse+0x8e>
    46d0:	fe 2f       	mov	r31, r30
    46d2:	27 d0       	rcall	.+78     	; 0x4722 <__divsf3_pse+0x8e>
    46d4:	66 0f       	add	r22, r22
    46d6:	77 1f       	adc	r23, r23
    46d8:	88 1f       	adc	r24, r24
    46da:	bb 1f       	adc	r27, r27
    46dc:	26 17       	cp	r18, r22
    46de:	37 07       	cpc	r19, r23
    46e0:	48 07       	cpc	r20, r24
    46e2:	ab 07       	cpc	r26, r27
    46e4:	b0 e8       	ldi	r27, 0x80	; 128
    46e6:	09 f0       	breq	.+2      	; 0x46ea <__divsf3_pse+0x56>
    46e8:	bb 0b       	sbc	r27, r27
    46ea:	80 2d       	mov	r24, r0
    46ec:	bf 01       	movw	r22, r30
    46ee:	ff 27       	eor	r31, r31
    46f0:	93 58       	subi	r25, 0x83	; 131
    46f2:	5f 4f       	sbci	r21, 0xFF	; 255
    46f4:	2a f0       	brmi	.+10     	; 0x4700 <__divsf3_pse+0x6c>
    46f6:	9e 3f       	cpi	r25, 0xFE	; 254
    46f8:	51 05       	cpc	r21, r1
    46fa:	68 f0       	brcs	.+26     	; 0x4716 <__divsf3_pse+0x82>
    46fc:	b6 c0       	rjmp	.+364    	; 0x486a <__fp_inf>
    46fe:	00 c1       	rjmp	.+512    	; 0x4900 <__fp_szero>
    4700:	5f 3f       	cpi	r21, 0xFF	; 255
    4702:	ec f3       	brlt	.-6      	; 0x46fe <__divsf3_pse+0x6a>
    4704:	98 3e       	cpi	r25, 0xE8	; 232
    4706:	dc f3       	brlt	.-10     	; 0x46fe <__divsf3_pse+0x6a>
    4708:	86 95       	lsr	r24
    470a:	77 95       	ror	r23
    470c:	67 95       	ror	r22
    470e:	b7 95       	ror	r27
    4710:	f7 95       	ror	r31
    4712:	9f 5f       	subi	r25, 0xFF	; 255
    4714:	c9 f7       	brne	.-14     	; 0x4708 <__divsf3_pse+0x74>
    4716:	88 0f       	add	r24, r24
    4718:	91 1d       	adc	r25, r1
    471a:	96 95       	lsr	r25
    471c:	87 95       	ror	r24
    471e:	97 f9       	bld	r25, 7
    4720:	08 95       	ret
    4722:	e1 e0       	ldi	r30, 0x01	; 1
    4724:	66 0f       	add	r22, r22
    4726:	77 1f       	adc	r23, r23
    4728:	88 1f       	adc	r24, r24
    472a:	bb 1f       	adc	r27, r27
    472c:	62 17       	cp	r22, r18
    472e:	73 07       	cpc	r23, r19
    4730:	84 07       	cpc	r24, r20
    4732:	ba 07       	cpc	r27, r26
    4734:	20 f0       	brcs	.+8      	; 0x473e <__divsf3_pse+0xaa>
    4736:	62 1b       	sub	r22, r18
    4738:	73 0b       	sbc	r23, r19
    473a:	84 0b       	sbc	r24, r20
    473c:	ba 0b       	sbc	r27, r26
    473e:	ee 1f       	adc	r30, r30
    4740:	88 f7       	brcc	.-30     	; 0x4724 <__divsf3_pse+0x90>
    4742:	e0 95       	com	r30
    4744:	08 95       	ret

00004746 <__fixsfsi>:
    4746:	04 d0       	rcall	.+8      	; 0x4750 <__fixunssfsi>
    4748:	68 94       	set
    474a:	b1 11       	cpse	r27, r1
    474c:	d9 c0       	rjmp	.+434    	; 0x4900 <__fp_szero>
    474e:	08 95       	ret

00004750 <__fixunssfsi>:
    4750:	bc d0       	rcall	.+376    	; 0x48ca <__fp_splitA>
    4752:	88 f0       	brcs	.+34     	; 0x4776 <__fixunssfsi+0x26>
    4754:	9f 57       	subi	r25, 0x7F	; 127
    4756:	90 f0       	brcs	.+36     	; 0x477c <__fixunssfsi+0x2c>
    4758:	b9 2f       	mov	r27, r25
    475a:	99 27       	eor	r25, r25
    475c:	b7 51       	subi	r27, 0x17	; 23
    475e:	a0 f0       	brcs	.+40     	; 0x4788 <__fixunssfsi+0x38>
    4760:	d1 f0       	breq	.+52     	; 0x4796 <__fixunssfsi+0x46>
    4762:	66 0f       	add	r22, r22
    4764:	77 1f       	adc	r23, r23
    4766:	88 1f       	adc	r24, r24
    4768:	99 1f       	adc	r25, r25
    476a:	1a f0       	brmi	.+6      	; 0x4772 <__fixunssfsi+0x22>
    476c:	ba 95       	dec	r27
    476e:	c9 f7       	brne	.-14     	; 0x4762 <__fixunssfsi+0x12>
    4770:	12 c0       	rjmp	.+36     	; 0x4796 <__fixunssfsi+0x46>
    4772:	b1 30       	cpi	r27, 0x01	; 1
    4774:	81 f0       	breq	.+32     	; 0x4796 <__fixunssfsi+0x46>
    4776:	c3 d0       	rcall	.+390    	; 0x48fe <__fp_zero>
    4778:	b1 e0       	ldi	r27, 0x01	; 1
    477a:	08 95       	ret
    477c:	c0 c0       	rjmp	.+384    	; 0x48fe <__fp_zero>
    477e:	67 2f       	mov	r22, r23
    4780:	78 2f       	mov	r23, r24
    4782:	88 27       	eor	r24, r24
    4784:	b8 5f       	subi	r27, 0xF8	; 248
    4786:	39 f0       	breq	.+14     	; 0x4796 <__fixunssfsi+0x46>
    4788:	b9 3f       	cpi	r27, 0xF9	; 249
    478a:	cc f3       	brlt	.-14     	; 0x477e <__fixunssfsi+0x2e>
    478c:	86 95       	lsr	r24
    478e:	77 95       	ror	r23
    4790:	67 95       	ror	r22
    4792:	b3 95       	inc	r27
    4794:	d9 f7       	brne	.-10     	; 0x478c <__fixunssfsi+0x3c>
    4796:	3e f4       	brtc	.+14     	; 0x47a6 <__fixunssfsi+0x56>
    4798:	90 95       	com	r25
    479a:	80 95       	com	r24
    479c:	70 95       	com	r23
    479e:	61 95       	neg	r22
    47a0:	7f 4f       	sbci	r23, 0xFF	; 255
    47a2:	8f 4f       	sbci	r24, 0xFF	; 255
    47a4:	9f 4f       	sbci	r25, 0xFF	; 255
    47a6:	08 95       	ret

000047a8 <__floatunsisf>:
    47a8:	e8 94       	clt
    47aa:	09 c0       	rjmp	.+18     	; 0x47be <__floatsisf+0x12>

000047ac <__floatsisf>:
    47ac:	97 fb       	bst	r25, 7
    47ae:	3e f4       	brtc	.+14     	; 0x47be <__floatsisf+0x12>
    47b0:	90 95       	com	r25
    47b2:	80 95       	com	r24
    47b4:	70 95       	com	r23
    47b6:	61 95       	neg	r22
    47b8:	7f 4f       	sbci	r23, 0xFF	; 255
    47ba:	8f 4f       	sbci	r24, 0xFF	; 255
    47bc:	9f 4f       	sbci	r25, 0xFF	; 255
    47be:	99 23       	and	r25, r25
    47c0:	a9 f0       	breq	.+42     	; 0x47ec <__floatsisf+0x40>
    47c2:	f9 2f       	mov	r31, r25
    47c4:	96 e9       	ldi	r25, 0x96	; 150
    47c6:	bb 27       	eor	r27, r27
    47c8:	93 95       	inc	r25
    47ca:	f6 95       	lsr	r31
    47cc:	87 95       	ror	r24
    47ce:	77 95       	ror	r23
    47d0:	67 95       	ror	r22
    47d2:	b7 95       	ror	r27
    47d4:	f1 11       	cpse	r31, r1
    47d6:	f8 cf       	rjmp	.-16     	; 0x47c8 <__floatsisf+0x1c>
    47d8:	fa f4       	brpl	.+62     	; 0x4818 <__floatsisf+0x6c>
    47da:	bb 0f       	add	r27, r27
    47dc:	11 f4       	brne	.+4      	; 0x47e2 <__floatsisf+0x36>
    47de:	60 ff       	sbrs	r22, 0
    47e0:	1b c0       	rjmp	.+54     	; 0x4818 <__floatsisf+0x6c>
    47e2:	6f 5f       	subi	r22, 0xFF	; 255
    47e4:	7f 4f       	sbci	r23, 0xFF	; 255
    47e6:	8f 4f       	sbci	r24, 0xFF	; 255
    47e8:	9f 4f       	sbci	r25, 0xFF	; 255
    47ea:	16 c0       	rjmp	.+44     	; 0x4818 <__floatsisf+0x6c>
    47ec:	88 23       	and	r24, r24
    47ee:	11 f0       	breq	.+4      	; 0x47f4 <__floatsisf+0x48>
    47f0:	96 e9       	ldi	r25, 0x96	; 150
    47f2:	11 c0       	rjmp	.+34     	; 0x4816 <__floatsisf+0x6a>
    47f4:	77 23       	and	r23, r23
    47f6:	21 f0       	breq	.+8      	; 0x4800 <__floatsisf+0x54>
    47f8:	9e e8       	ldi	r25, 0x8E	; 142
    47fa:	87 2f       	mov	r24, r23
    47fc:	76 2f       	mov	r23, r22
    47fe:	05 c0       	rjmp	.+10     	; 0x480a <__floatsisf+0x5e>
    4800:	66 23       	and	r22, r22
    4802:	71 f0       	breq	.+28     	; 0x4820 <__floatsisf+0x74>
    4804:	96 e8       	ldi	r25, 0x86	; 134
    4806:	86 2f       	mov	r24, r22
    4808:	70 e0       	ldi	r23, 0x00	; 0
    480a:	60 e0       	ldi	r22, 0x00	; 0
    480c:	2a f0       	brmi	.+10     	; 0x4818 <__floatsisf+0x6c>
    480e:	9a 95       	dec	r25
    4810:	66 0f       	add	r22, r22
    4812:	77 1f       	adc	r23, r23
    4814:	88 1f       	adc	r24, r24
    4816:	da f7       	brpl	.-10     	; 0x480e <__floatsisf+0x62>
    4818:	88 0f       	add	r24, r24
    481a:	96 95       	lsr	r25
    481c:	87 95       	ror	r24
    481e:	97 f9       	bld	r25, 7
    4820:	08 95       	ret

00004822 <__fp_cmp>:
    4822:	99 0f       	add	r25, r25
    4824:	00 08       	sbc	r0, r0
    4826:	55 0f       	add	r21, r21
    4828:	aa 0b       	sbc	r26, r26
    482a:	e0 e8       	ldi	r30, 0x80	; 128
    482c:	fe ef       	ldi	r31, 0xFE	; 254
    482e:	16 16       	cp	r1, r22
    4830:	17 06       	cpc	r1, r23
    4832:	e8 07       	cpc	r30, r24
    4834:	f9 07       	cpc	r31, r25
    4836:	c0 f0       	brcs	.+48     	; 0x4868 <__fp_cmp+0x46>
    4838:	12 16       	cp	r1, r18
    483a:	13 06       	cpc	r1, r19
    483c:	e4 07       	cpc	r30, r20
    483e:	f5 07       	cpc	r31, r21
    4840:	98 f0       	brcs	.+38     	; 0x4868 <__fp_cmp+0x46>
    4842:	62 1b       	sub	r22, r18
    4844:	73 0b       	sbc	r23, r19
    4846:	84 0b       	sbc	r24, r20
    4848:	95 0b       	sbc	r25, r21
    484a:	39 f4       	brne	.+14     	; 0x485a <__fp_cmp+0x38>
    484c:	0a 26       	eor	r0, r26
    484e:	61 f0       	breq	.+24     	; 0x4868 <__fp_cmp+0x46>
    4850:	23 2b       	or	r18, r19
    4852:	24 2b       	or	r18, r20
    4854:	25 2b       	or	r18, r21
    4856:	21 f4       	brne	.+8      	; 0x4860 <__fp_cmp+0x3e>
    4858:	08 95       	ret
    485a:	0a 26       	eor	r0, r26
    485c:	09 f4       	brne	.+2      	; 0x4860 <__fp_cmp+0x3e>
    485e:	a1 40       	sbci	r26, 0x01	; 1
    4860:	a6 95       	lsr	r26
    4862:	8f ef       	ldi	r24, 0xFF	; 255
    4864:	81 1d       	adc	r24, r1
    4866:	81 1d       	adc	r24, r1
    4868:	08 95       	ret

0000486a <__fp_inf>:
    486a:	97 f9       	bld	r25, 7
    486c:	9f 67       	ori	r25, 0x7F	; 127
    486e:	80 e8       	ldi	r24, 0x80	; 128
    4870:	70 e0       	ldi	r23, 0x00	; 0
    4872:	60 e0       	ldi	r22, 0x00	; 0
    4874:	08 95       	ret

00004876 <__fp_nan>:
    4876:	9f ef       	ldi	r25, 0xFF	; 255
    4878:	80 ec       	ldi	r24, 0xC0	; 192
    487a:	08 95       	ret

0000487c <__fp_pscA>:
    487c:	00 24       	eor	r0, r0
    487e:	0a 94       	dec	r0
    4880:	16 16       	cp	r1, r22
    4882:	17 06       	cpc	r1, r23
    4884:	18 06       	cpc	r1, r24
    4886:	09 06       	cpc	r0, r25
    4888:	08 95       	ret

0000488a <__fp_pscB>:
    488a:	00 24       	eor	r0, r0
    488c:	0a 94       	dec	r0
    488e:	12 16       	cp	r1, r18
    4890:	13 06       	cpc	r1, r19
    4892:	14 06       	cpc	r1, r20
    4894:	05 06       	cpc	r0, r21
    4896:	08 95       	ret

00004898 <__fp_round>:
    4898:	09 2e       	mov	r0, r25
    489a:	03 94       	inc	r0
    489c:	00 0c       	add	r0, r0
    489e:	11 f4       	brne	.+4      	; 0x48a4 <__fp_round+0xc>
    48a0:	88 23       	and	r24, r24
    48a2:	52 f0       	brmi	.+20     	; 0x48b8 <__fp_round+0x20>
    48a4:	bb 0f       	add	r27, r27
    48a6:	40 f4       	brcc	.+16     	; 0x48b8 <__fp_round+0x20>
    48a8:	bf 2b       	or	r27, r31
    48aa:	11 f4       	brne	.+4      	; 0x48b0 <__fp_round+0x18>
    48ac:	60 ff       	sbrs	r22, 0
    48ae:	04 c0       	rjmp	.+8      	; 0x48b8 <__fp_round+0x20>
    48b0:	6f 5f       	subi	r22, 0xFF	; 255
    48b2:	7f 4f       	sbci	r23, 0xFF	; 255
    48b4:	8f 4f       	sbci	r24, 0xFF	; 255
    48b6:	9f 4f       	sbci	r25, 0xFF	; 255
    48b8:	08 95       	ret

000048ba <__fp_split3>:
    48ba:	57 fd       	sbrc	r21, 7
    48bc:	90 58       	subi	r25, 0x80	; 128
    48be:	44 0f       	add	r20, r20
    48c0:	55 1f       	adc	r21, r21
    48c2:	59 f0       	breq	.+22     	; 0x48da <__fp_splitA+0x10>
    48c4:	5f 3f       	cpi	r21, 0xFF	; 255
    48c6:	71 f0       	breq	.+28     	; 0x48e4 <__fp_splitA+0x1a>
    48c8:	47 95       	ror	r20

000048ca <__fp_splitA>:
    48ca:	88 0f       	add	r24, r24
    48cc:	97 fb       	bst	r25, 7
    48ce:	99 1f       	adc	r25, r25
    48d0:	61 f0       	breq	.+24     	; 0x48ea <__fp_splitA+0x20>
    48d2:	9f 3f       	cpi	r25, 0xFF	; 255
    48d4:	79 f0       	breq	.+30     	; 0x48f4 <__fp_splitA+0x2a>
    48d6:	87 95       	ror	r24
    48d8:	08 95       	ret
    48da:	12 16       	cp	r1, r18
    48dc:	13 06       	cpc	r1, r19
    48de:	14 06       	cpc	r1, r20
    48e0:	55 1f       	adc	r21, r21
    48e2:	f2 cf       	rjmp	.-28     	; 0x48c8 <__fp_split3+0xe>
    48e4:	46 95       	lsr	r20
    48e6:	f1 df       	rcall	.-30     	; 0x48ca <__fp_splitA>
    48e8:	08 c0       	rjmp	.+16     	; 0x48fa <__fp_splitA+0x30>
    48ea:	16 16       	cp	r1, r22
    48ec:	17 06       	cpc	r1, r23
    48ee:	18 06       	cpc	r1, r24
    48f0:	99 1f       	adc	r25, r25
    48f2:	f1 cf       	rjmp	.-30     	; 0x48d6 <__fp_splitA+0xc>
    48f4:	86 95       	lsr	r24
    48f6:	71 05       	cpc	r23, r1
    48f8:	61 05       	cpc	r22, r1
    48fa:	08 94       	sec
    48fc:	08 95       	ret

000048fe <__fp_zero>:
    48fe:	e8 94       	clt

00004900 <__fp_szero>:
    4900:	bb 27       	eor	r27, r27
    4902:	66 27       	eor	r22, r22
    4904:	77 27       	eor	r23, r23
    4906:	cb 01       	movw	r24, r22
    4908:	97 f9       	bld	r25, 7
    490a:	08 95       	ret

0000490c <__gesf2>:
    490c:	8a df       	rcall	.-236    	; 0x4822 <__fp_cmp>
    490e:	08 f4       	brcc	.+2      	; 0x4912 <__gesf2+0x6>
    4910:	8f ef       	ldi	r24, 0xFF	; 255
    4912:	08 95       	ret

00004914 <__mulsf3>:
    4914:	0b d0       	rcall	.+22     	; 0x492c <__mulsf3x>
    4916:	c0 cf       	rjmp	.-128    	; 0x4898 <__fp_round>
    4918:	b1 df       	rcall	.-158    	; 0x487c <__fp_pscA>
    491a:	28 f0       	brcs	.+10     	; 0x4926 <__mulsf3+0x12>
    491c:	b6 df       	rcall	.-148    	; 0x488a <__fp_pscB>
    491e:	18 f0       	brcs	.+6      	; 0x4926 <__mulsf3+0x12>
    4920:	95 23       	and	r25, r21
    4922:	09 f0       	breq	.+2      	; 0x4926 <__mulsf3+0x12>
    4924:	a2 cf       	rjmp	.-188    	; 0x486a <__fp_inf>
    4926:	a7 cf       	rjmp	.-178    	; 0x4876 <__fp_nan>
    4928:	11 24       	eor	r1, r1
    492a:	ea cf       	rjmp	.-44     	; 0x4900 <__fp_szero>

0000492c <__mulsf3x>:
    492c:	c6 df       	rcall	.-116    	; 0x48ba <__fp_split3>
    492e:	a0 f3       	brcs	.-24     	; 0x4918 <__mulsf3+0x4>

00004930 <__mulsf3_pse>:
    4930:	95 9f       	mul	r25, r21
    4932:	d1 f3       	breq	.-12     	; 0x4928 <__mulsf3+0x14>
    4934:	95 0f       	add	r25, r21
    4936:	50 e0       	ldi	r21, 0x00	; 0
    4938:	55 1f       	adc	r21, r21
    493a:	62 9f       	mul	r22, r18
    493c:	f0 01       	movw	r30, r0
    493e:	72 9f       	mul	r23, r18
    4940:	bb 27       	eor	r27, r27
    4942:	f0 0d       	add	r31, r0
    4944:	b1 1d       	adc	r27, r1
    4946:	63 9f       	mul	r22, r19
    4948:	aa 27       	eor	r26, r26
    494a:	f0 0d       	add	r31, r0
    494c:	b1 1d       	adc	r27, r1
    494e:	aa 1f       	adc	r26, r26
    4950:	64 9f       	mul	r22, r20
    4952:	66 27       	eor	r22, r22
    4954:	b0 0d       	add	r27, r0
    4956:	a1 1d       	adc	r26, r1
    4958:	66 1f       	adc	r22, r22
    495a:	82 9f       	mul	r24, r18
    495c:	22 27       	eor	r18, r18
    495e:	b0 0d       	add	r27, r0
    4960:	a1 1d       	adc	r26, r1
    4962:	62 1f       	adc	r22, r18
    4964:	73 9f       	mul	r23, r19
    4966:	b0 0d       	add	r27, r0
    4968:	a1 1d       	adc	r26, r1
    496a:	62 1f       	adc	r22, r18
    496c:	83 9f       	mul	r24, r19
    496e:	a0 0d       	add	r26, r0
    4970:	61 1d       	adc	r22, r1
    4972:	22 1f       	adc	r18, r18
    4974:	74 9f       	mul	r23, r20
    4976:	33 27       	eor	r19, r19
    4978:	a0 0d       	add	r26, r0
    497a:	61 1d       	adc	r22, r1
    497c:	23 1f       	adc	r18, r19
    497e:	84 9f       	mul	r24, r20
    4980:	60 0d       	add	r22, r0
    4982:	21 1d       	adc	r18, r1
    4984:	82 2f       	mov	r24, r18
    4986:	76 2f       	mov	r23, r22
    4988:	6a 2f       	mov	r22, r26
    498a:	11 24       	eor	r1, r1
    498c:	9f 57       	subi	r25, 0x7F	; 127
    498e:	50 40       	sbci	r21, 0x00	; 0
    4990:	8a f0       	brmi	.+34     	; 0x49b4 <__mulsf3_pse+0x84>
    4992:	e1 f0       	breq	.+56     	; 0x49cc <__mulsf3_pse+0x9c>
    4994:	88 23       	and	r24, r24
    4996:	4a f0       	brmi	.+18     	; 0x49aa <__mulsf3_pse+0x7a>
    4998:	ee 0f       	add	r30, r30
    499a:	ff 1f       	adc	r31, r31
    499c:	bb 1f       	adc	r27, r27
    499e:	66 1f       	adc	r22, r22
    49a0:	77 1f       	adc	r23, r23
    49a2:	88 1f       	adc	r24, r24
    49a4:	91 50       	subi	r25, 0x01	; 1
    49a6:	50 40       	sbci	r21, 0x00	; 0
    49a8:	a9 f7       	brne	.-22     	; 0x4994 <__mulsf3_pse+0x64>
    49aa:	9e 3f       	cpi	r25, 0xFE	; 254
    49ac:	51 05       	cpc	r21, r1
    49ae:	70 f0       	brcs	.+28     	; 0x49cc <__mulsf3_pse+0x9c>
    49b0:	5c cf       	rjmp	.-328    	; 0x486a <__fp_inf>
    49b2:	a6 cf       	rjmp	.-180    	; 0x4900 <__fp_szero>
    49b4:	5f 3f       	cpi	r21, 0xFF	; 255
    49b6:	ec f3       	brlt	.-6      	; 0x49b2 <__mulsf3_pse+0x82>
    49b8:	98 3e       	cpi	r25, 0xE8	; 232
    49ba:	dc f3       	brlt	.-10     	; 0x49b2 <__mulsf3_pse+0x82>
    49bc:	86 95       	lsr	r24
    49be:	77 95       	ror	r23
    49c0:	67 95       	ror	r22
    49c2:	b7 95       	ror	r27
    49c4:	f7 95       	ror	r31
    49c6:	e7 95       	ror	r30
    49c8:	9f 5f       	subi	r25, 0xFF	; 255
    49ca:	c1 f7       	brne	.-16     	; 0x49bc <__mulsf3_pse+0x8c>
    49cc:	fe 2b       	or	r31, r30
    49ce:	88 0f       	add	r24, r24
    49d0:	91 1d       	adc	r25, r1
    49d2:	96 95       	lsr	r25
    49d4:	87 95       	ror	r24
    49d6:	97 f9       	bld	r25, 7
    49d8:	08 95       	ret

000049da <pow>:
    49da:	fa 01       	movw	r30, r20
    49dc:	ee 0f       	add	r30, r30
    49de:	ff 1f       	adc	r31, r31
    49e0:	30 96       	adiw	r30, 0x00	; 0
    49e2:	21 05       	cpc	r18, r1
    49e4:	31 05       	cpc	r19, r1
    49e6:	99 f1       	breq	.+102    	; 0x4a4e <pow+0x74>
    49e8:	61 15       	cp	r22, r1
    49ea:	71 05       	cpc	r23, r1
    49ec:	61 f4       	brne	.+24     	; 0x4a06 <pow+0x2c>
    49ee:	80 38       	cpi	r24, 0x80	; 128
    49f0:	bf e3       	ldi	r27, 0x3F	; 63
    49f2:	9b 07       	cpc	r25, r27
    49f4:	49 f1       	breq	.+82     	; 0x4a48 <pow+0x6e>
    49f6:	68 94       	set
    49f8:	90 38       	cpi	r25, 0x80	; 128
    49fa:	81 05       	cpc	r24, r1
    49fc:	61 f0       	breq	.+24     	; 0x4a16 <pow+0x3c>
    49fe:	80 38       	cpi	r24, 0x80	; 128
    4a00:	bf ef       	ldi	r27, 0xFF	; 255
    4a02:	9b 07       	cpc	r25, r27
    4a04:	41 f0       	breq	.+16     	; 0x4a16 <pow+0x3c>
    4a06:	99 23       	and	r25, r25
    4a08:	42 f5       	brpl	.+80     	; 0x4a5a <pow+0x80>
    4a0a:	ff 3f       	cpi	r31, 0xFF	; 255
    4a0c:	e1 05       	cpc	r30, r1
    4a0e:	31 05       	cpc	r19, r1
    4a10:	21 05       	cpc	r18, r1
    4a12:	11 f1       	breq	.+68     	; 0x4a58 <pow+0x7e>
    4a14:	e8 94       	clt
    4a16:	08 94       	sec
    4a18:	e7 95       	ror	r30
    4a1a:	d9 01       	movw	r26, r18
    4a1c:	aa 23       	and	r26, r26
    4a1e:	29 f4       	brne	.+10     	; 0x4a2a <pow+0x50>
    4a20:	ab 2f       	mov	r26, r27
    4a22:	be 2f       	mov	r27, r30
    4a24:	f8 5f       	subi	r31, 0xF8	; 248
    4a26:	d0 f3       	brcs	.-12     	; 0x4a1c <pow+0x42>
    4a28:	10 c0       	rjmp	.+32     	; 0x4a4a <pow+0x70>
    4a2a:	ff 5f       	subi	r31, 0xFF	; 255
    4a2c:	70 f4       	brcc	.+28     	; 0x4a4a <pow+0x70>
    4a2e:	a6 95       	lsr	r26
    4a30:	e0 f7       	brcc	.-8      	; 0x4a2a <pow+0x50>
    4a32:	f7 39       	cpi	r31, 0x97	; 151
    4a34:	50 f0       	brcs	.+20     	; 0x4a4a <pow+0x70>
    4a36:	19 f0       	breq	.+6      	; 0x4a3e <pow+0x64>
    4a38:	ff 3a       	cpi	r31, 0xAF	; 175
    4a3a:	38 f4       	brcc	.+14     	; 0x4a4a <pow+0x70>
    4a3c:	9f 77       	andi	r25, 0x7F	; 127
    4a3e:	9f 93       	push	r25
    4a40:	0c d0       	rcall	.+24     	; 0x4a5a <pow+0x80>
    4a42:	0f 90       	pop	r0
    4a44:	07 fc       	sbrc	r0, 7
    4a46:	90 58       	subi	r25, 0x80	; 128
    4a48:	08 95       	ret
    4a4a:	3e f0       	brts	.+14     	; 0x4a5a <pow+0x80>
    4a4c:	14 cf       	rjmp	.-472    	; 0x4876 <__fp_nan>
    4a4e:	60 e0       	ldi	r22, 0x00	; 0
    4a50:	70 e0       	ldi	r23, 0x00	; 0
    4a52:	80 e8       	ldi	r24, 0x80	; 128
    4a54:	9f e3       	ldi	r25, 0x3F	; 63
    4a56:	08 95       	ret
    4a58:	4f e7       	ldi	r20, 0x7F	; 127
    4a5a:	9f 77       	andi	r25, 0x7F	; 127
    4a5c:	5f 93       	push	r21
    4a5e:	4f 93       	push	r20
    4a60:	3f 93       	push	r19
    4a62:	2f 93       	push	r18
    4a64:	9e d0       	rcall	.+316    	; 0x4ba2 <log>
    4a66:	2f 91       	pop	r18
    4a68:	3f 91       	pop	r19
    4a6a:	4f 91       	pop	r20
    4a6c:	5f 91       	pop	r21
    4a6e:	52 df       	rcall	.-348    	; 0x4914 <__mulsf3>
    4a70:	05 c0       	rjmp	.+10     	; 0x4a7c <exp>
    4a72:	19 f4       	brne	.+6      	; 0x4a7a <pow+0xa0>
    4a74:	0e f0       	brts	.+2      	; 0x4a78 <pow+0x9e>
    4a76:	f9 ce       	rjmp	.-526    	; 0x486a <__fp_inf>
    4a78:	42 cf       	rjmp	.-380    	; 0x48fe <__fp_zero>
    4a7a:	fd ce       	rjmp	.-518    	; 0x4876 <__fp_nan>

00004a7c <exp>:
    4a7c:	26 df       	rcall	.-436    	; 0x48ca <__fp_splitA>
    4a7e:	c8 f3       	brcs	.-14     	; 0x4a72 <pow+0x98>
    4a80:	96 38       	cpi	r25, 0x86	; 134
    4a82:	c0 f7       	brcc	.-16     	; 0x4a74 <pow+0x9a>
    4a84:	07 f8       	bld	r0, 7
    4a86:	0f 92       	push	r0
    4a88:	e8 94       	clt
    4a8a:	2b e3       	ldi	r18, 0x3B	; 59
    4a8c:	3a ea       	ldi	r19, 0xAA	; 170
    4a8e:	48 eb       	ldi	r20, 0xB8	; 184
    4a90:	5f e7       	ldi	r21, 0x7F	; 127
    4a92:	4e df       	rcall	.-356    	; 0x4930 <__mulsf3_pse>
    4a94:	0f 92       	push	r0
    4a96:	0f 92       	push	r0
    4a98:	0f 92       	push	r0
    4a9a:	4d b7       	in	r20, 0x3d	; 61
    4a9c:	5e b7       	in	r21, 0x3e	; 62
    4a9e:	0f 92       	push	r0
    4aa0:	c0 d0       	rcall	.+384    	; 0x4c22 <modf>
    4aa2:	e2 e2       	ldi	r30, 0x22	; 34
    4aa4:	f2 e0       	ldi	r31, 0x02	; 2
    4aa6:	16 d0       	rcall	.+44     	; 0x4ad4 <__fp_powser>
    4aa8:	4f 91       	pop	r20
    4aaa:	5f 91       	pop	r21
    4aac:	ef 91       	pop	r30
    4aae:	ff 91       	pop	r31
    4ab0:	e5 95       	asr	r30
    4ab2:	ee 1f       	adc	r30, r30
    4ab4:	ff 1f       	adc	r31, r31
    4ab6:	49 f0       	breq	.+18     	; 0x4aca <exp+0x4e>
    4ab8:	fe 57       	subi	r31, 0x7E	; 126
    4aba:	e0 68       	ori	r30, 0x80	; 128
    4abc:	44 27       	eor	r20, r20
    4abe:	ee 0f       	add	r30, r30
    4ac0:	44 1f       	adc	r20, r20
    4ac2:	fa 95       	dec	r31
    4ac4:	e1 f7       	brne	.-8      	; 0x4abe <exp+0x42>
    4ac6:	41 95       	neg	r20
    4ac8:	55 0b       	sbc	r21, r21
    4aca:	32 d0       	rcall	.+100    	; 0x4b30 <ldexp>
    4acc:	0f 90       	pop	r0
    4ace:	07 fe       	sbrs	r0, 7
    4ad0:	26 c0       	rjmp	.+76     	; 0x4b1e <inverse>
    4ad2:	08 95       	ret

00004ad4 <__fp_powser>:
    4ad4:	df 93       	push	r29
    4ad6:	cf 93       	push	r28
    4ad8:	1f 93       	push	r17
    4ada:	0f 93       	push	r16
    4adc:	ff 92       	push	r15
    4ade:	ef 92       	push	r14
    4ae0:	df 92       	push	r13
    4ae2:	7b 01       	movw	r14, r22
    4ae4:	8c 01       	movw	r16, r24
    4ae6:	68 94       	set
    4ae8:	05 c0       	rjmp	.+10     	; 0x4af4 <__fp_powser+0x20>
    4aea:	da 2e       	mov	r13, r26
    4aec:	ef 01       	movw	r28, r30
    4aee:	1e df       	rcall	.-452    	; 0x492c <__mulsf3x>
    4af0:	fe 01       	movw	r30, r28
    4af2:	e8 94       	clt
    4af4:	a5 91       	lpm	r26, Z+
    4af6:	25 91       	lpm	r18, Z+
    4af8:	35 91       	lpm	r19, Z+
    4afa:	45 91       	lpm	r20, Z+
    4afc:	55 91       	lpm	r21, Z+
    4afe:	ae f3       	brts	.-22     	; 0x4aea <__fp_powser+0x16>
    4b00:	ef 01       	movw	r28, r30
    4b02:	62 dd       	rcall	.-1340   	; 0x45c8 <__addsf3x>
    4b04:	fe 01       	movw	r30, r28
    4b06:	97 01       	movw	r18, r14
    4b08:	a8 01       	movw	r20, r16
    4b0a:	da 94       	dec	r13
    4b0c:	79 f7       	brne	.-34     	; 0x4aec <__fp_powser+0x18>
    4b0e:	df 90       	pop	r13
    4b10:	ef 90       	pop	r14
    4b12:	ff 90       	pop	r15
    4b14:	0f 91       	pop	r16
    4b16:	1f 91       	pop	r17
    4b18:	cf 91       	pop	r28
    4b1a:	df 91       	pop	r29
    4b1c:	08 95       	ret

00004b1e <inverse>:
    4b1e:	9b 01       	movw	r18, r22
    4b20:	ac 01       	movw	r20, r24
    4b22:	60 e0       	ldi	r22, 0x00	; 0
    4b24:	70 e0       	ldi	r23, 0x00	; 0
    4b26:	80 e8       	ldi	r24, 0x80	; 128
    4b28:	9f e3       	ldi	r25, 0x3F	; 63
    4b2a:	a5 cd       	rjmp	.-1206   	; 0x4676 <__divsf3>
    4b2c:	9e ce       	rjmp	.-708    	; 0x486a <__fp_inf>
    4b2e:	ac c0       	rjmp	.+344    	; 0x4c88 <__fp_mpack>

00004b30 <ldexp>:
    4b30:	cc de       	rcall	.-616    	; 0x48ca <__fp_splitA>
    4b32:	e8 f3       	brcs	.-6      	; 0x4b2e <inverse+0x10>
    4b34:	99 23       	and	r25, r25
    4b36:	d9 f3       	breq	.-10     	; 0x4b2e <inverse+0x10>
    4b38:	94 0f       	add	r25, r20
    4b3a:	51 1d       	adc	r21, r1
    4b3c:	bb f3       	brvs	.-18     	; 0x4b2c <inverse+0xe>
    4b3e:	91 50       	subi	r25, 0x01	; 1
    4b40:	50 40       	sbci	r21, 0x00	; 0
    4b42:	94 f0       	brlt	.+36     	; 0x4b68 <ldexp+0x38>
    4b44:	59 f0       	breq	.+22     	; 0x4b5c <ldexp+0x2c>
    4b46:	88 23       	and	r24, r24
    4b48:	32 f0       	brmi	.+12     	; 0x4b56 <ldexp+0x26>
    4b4a:	66 0f       	add	r22, r22
    4b4c:	77 1f       	adc	r23, r23
    4b4e:	88 1f       	adc	r24, r24
    4b50:	91 50       	subi	r25, 0x01	; 1
    4b52:	50 40       	sbci	r21, 0x00	; 0
    4b54:	c1 f7       	brne	.-16     	; 0x4b46 <ldexp+0x16>
    4b56:	9e 3f       	cpi	r25, 0xFE	; 254
    4b58:	51 05       	cpc	r21, r1
    4b5a:	44 f7       	brge	.-48     	; 0x4b2c <inverse+0xe>
    4b5c:	88 0f       	add	r24, r24
    4b5e:	91 1d       	adc	r25, r1
    4b60:	96 95       	lsr	r25
    4b62:	87 95       	ror	r24
    4b64:	97 f9       	bld	r25, 7
    4b66:	08 95       	ret
    4b68:	5f 3f       	cpi	r21, 0xFF	; 255
    4b6a:	ac f0       	brlt	.+42     	; 0x4b96 <ldexp+0x66>
    4b6c:	98 3e       	cpi	r25, 0xE8	; 232
    4b6e:	9c f0       	brlt	.+38     	; 0x4b96 <ldexp+0x66>
    4b70:	bb 27       	eor	r27, r27
    4b72:	86 95       	lsr	r24
    4b74:	77 95       	ror	r23
    4b76:	67 95       	ror	r22
    4b78:	b7 95       	ror	r27
    4b7a:	08 f4       	brcc	.+2      	; 0x4b7e <ldexp+0x4e>
    4b7c:	b1 60       	ori	r27, 0x01	; 1
    4b7e:	93 95       	inc	r25
    4b80:	c1 f7       	brne	.-16     	; 0x4b72 <ldexp+0x42>
    4b82:	bb 0f       	add	r27, r27
    4b84:	58 f7       	brcc	.-42     	; 0x4b5c <ldexp+0x2c>
    4b86:	11 f4       	brne	.+4      	; 0x4b8c <ldexp+0x5c>
    4b88:	60 ff       	sbrs	r22, 0
    4b8a:	e8 cf       	rjmp	.-48     	; 0x4b5c <ldexp+0x2c>
    4b8c:	6f 5f       	subi	r22, 0xFF	; 255
    4b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b90:	8f 4f       	sbci	r24, 0xFF	; 255
    4b92:	9f 4f       	sbci	r25, 0xFF	; 255
    4b94:	e3 cf       	rjmp	.-58     	; 0x4b5c <ldexp+0x2c>
    4b96:	b4 ce       	rjmp	.-664    	; 0x4900 <__fp_szero>
    4b98:	0e f0       	brts	.+2      	; 0x4b9c <ldexp+0x6c>
    4b9a:	76 c0       	rjmp	.+236    	; 0x4c88 <__fp_mpack>
    4b9c:	6c ce       	rjmp	.-808    	; 0x4876 <__fp_nan>
    4b9e:	68 94       	set
    4ba0:	64 ce       	rjmp	.-824    	; 0x486a <__fp_inf>

00004ba2 <log>:
    4ba2:	93 de       	rcall	.-730    	; 0x48ca <__fp_splitA>
    4ba4:	c8 f3       	brcs	.-14     	; 0x4b98 <ldexp+0x68>
    4ba6:	99 23       	and	r25, r25
    4ba8:	d1 f3       	breq	.-12     	; 0x4b9e <ldexp+0x6e>
    4baa:	c6 f3       	brts	.-16     	; 0x4b9c <ldexp+0x6c>
    4bac:	df 93       	push	r29
    4bae:	cf 93       	push	r28
    4bb0:	1f 93       	push	r17
    4bb2:	0f 93       	push	r16
    4bb4:	ff 92       	push	r15
    4bb6:	c9 2f       	mov	r28, r25
    4bb8:	dd 27       	eor	r29, r29
    4bba:	88 23       	and	r24, r24
    4bbc:	2a f0       	brmi	.+10     	; 0x4bc8 <log+0x26>
    4bbe:	21 97       	sbiw	r28, 0x01	; 1
    4bc0:	66 0f       	add	r22, r22
    4bc2:	77 1f       	adc	r23, r23
    4bc4:	88 1f       	adc	r24, r24
    4bc6:	da f7       	brpl	.-10     	; 0x4bbe <log+0x1c>
    4bc8:	20 e0       	ldi	r18, 0x00	; 0
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	40 e8       	ldi	r20, 0x80	; 128
    4bce:	5f eb       	ldi	r21, 0xBF	; 191
    4bd0:	9f e3       	ldi	r25, 0x3F	; 63
    4bd2:	88 39       	cpi	r24, 0x98	; 152
    4bd4:	20 f0       	brcs	.+8      	; 0x4bde <log+0x3c>
    4bd6:	80 3e       	cpi	r24, 0xE0	; 224
    4bd8:	30 f0       	brcs	.+12     	; 0x4be6 <log+0x44>
    4bda:	21 96       	adiw	r28, 0x01	; 1
    4bdc:	8f 77       	andi	r24, 0x7F	; 127
    4bde:	e3 dc       	rcall	.-1594   	; 0x45a6 <__addsf3>
    4be0:	ea e4       	ldi	r30, 0x4A	; 74
    4be2:	f2 e0       	ldi	r31, 0x02	; 2
    4be4:	03 c0       	rjmp	.+6      	; 0x4bec <log+0x4a>
    4be6:	df dc       	rcall	.-1602   	; 0x45a6 <__addsf3>
    4be8:	e7 e7       	ldi	r30, 0x77	; 119
    4bea:	f2 e0       	ldi	r31, 0x02	; 2
    4bec:	73 df       	rcall	.-282    	; 0x4ad4 <__fp_powser>
    4bee:	8b 01       	movw	r16, r22
    4bf0:	be 01       	movw	r22, r28
    4bf2:	ec 01       	movw	r28, r24
    4bf4:	fb 2e       	mov	r15, r27
    4bf6:	6f 57       	subi	r22, 0x7F	; 127
    4bf8:	71 09       	sbc	r23, r1
    4bfa:	75 95       	asr	r23
    4bfc:	77 1f       	adc	r23, r23
    4bfe:	88 0b       	sbc	r24, r24
    4c00:	99 0b       	sbc	r25, r25
    4c02:	d4 dd       	rcall	.-1112   	; 0x47ac <__floatsisf>
    4c04:	28 e1       	ldi	r18, 0x18	; 24
    4c06:	32 e7       	ldi	r19, 0x72	; 114
    4c08:	41 e3       	ldi	r20, 0x31	; 49
    4c0a:	5f e3       	ldi	r21, 0x3F	; 63
    4c0c:	8f de       	rcall	.-738    	; 0x492c <__mulsf3x>
    4c0e:	af 2d       	mov	r26, r15
    4c10:	98 01       	movw	r18, r16
    4c12:	ae 01       	movw	r20, r28
    4c14:	ff 90       	pop	r15
    4c16:	0f 91       	pop	r16
    4c18:	1f 91       	pop	r17
    4c1a:	cf 91       	pop	r28
    4c1c:	df 91       	pop	r29
    4c1e:	d4 dc       	rcall	.-1624   	; 0x45c8 <__addsf3x>
    4c20:	3b ce       	rjmp	.-906    	; 0x4898 <__fp_round>

00004c22 <modf>:
    4c22:	fa 01       	movw	r30, r20
    4c24:	dc 01       	movw	r26, r24
    4c26:	aa 0f       	add	r26, r26
    4c28:	bb 1f       	adc	r27, r27
    4c2a:	9b 01       	movw	r18, r22
    4c2c:	ac 01       	movw	r20, r24
    4c2e:	bf 57       	subi	r27, 0x7F	; 127
    4c30:	28 f4       	brcc	.+10     	; 0x4c3c <modf+0x1a>
    4c32:	22 27       	eor	r18, r18
    4c34:	33 27       	eor	r19, r19
    4c36:	44 27       	eor	r20, r20
    4c38:	50 78       	andi	r21, 0x80	; 128
    4c3a:	1f c0       	rjmp	.+62     	; 0x4c7a <modf+0x58>
    4c3c:	b7 51       	subi	r27, 0x17	; 23
    4c3e:	88 f4       	brcc	.+34     	; 0x4c62 <modf+0x40>
    4c40:	ab 2f       	mov	r26, r27
    4c42:	00 24       	eor	r0, r0
    4c44:	46 95       	lsr	r20
    4c46:	37 95       	ror	r19
    4c48:	27 95       	ror	r18
    4c4a:	01 1c       	adc	r0, r1
    4c4c:	a3 95       	inc	r26
    4c4e:	d2 f3       	brmi	.-12     	; 0x4c44 <modf+0x22>
    4c50:	00 20       	and	r0, r0
    4c52:	69 f0       	breq	.+26     	; 0x4c6e <modf+0x4c>
    4c54:	22 0f       	add	r18, r18
    4c56:	33 1f       	adc	r19, r19
    4c58:	44 1f       	adc	r20, r20
    4c5a:	b3 95       	inc	r27
    4c5c:	da f3       	brmi	.-10     	; 0x4c54 <modf+0x32>
    4c5e:	0d d0       	rcall	.+26     	; 0x4c7a <modf+0x58>
    4c60:	a1 cc       	rjmp	.-1726   	; 0x45a4 <__subsf3>
    4c62:	61 30       	cpi	r22, 0x01	; 1
    4c64:	71 05       	cpc	r23, r1
    4c66:	a0 e8       	ldi	r26, 0x80	; 128
    4c68:	8a 07       	cpc	r24, r26
    4c6a:	b9 46       	sbci	r27, 0x69	; 105
    4c6c:	30 f4       	brcc	.+12     	; 0x4c7a <modf+0x58>
    4c6e:	9b 01       	movw	r18, r22
    4c70:	ac 01       	movw	r20, r24
    4c72:	66 27       	eor	r22, r22
    4c74:	77 27       	eor	r23, r23
    4c76:	88 27       	eor	r24, r24
    4c78:	90 78       	andi	r25, 0x80	; 128
    4c7a:	30 96       	adiw	r30, 0x00	; 0
    4c7c:	21 f0       	breq	.+8      	; 0x4c86 <modf+0x64>
    4c7e:	20 83       	st	Z, r18
    4c80:	31 83       	std	Z+1, r19	; 0x01
    4c82:	42 83       	std	Z+2, r20	; 0x02
    4c84:	53 83       	std	Z+3, r21	; 0x03
    4c86:	08 95       	ret

00004c88 <__fp_mpack>:
    4c88:	9f 3f       	cpi	r25, 0xFF	; 255
    4c8a:	31 f0       	breq	.+12     	; 0x4c98 <__fp_mpack_finite+0xc>

00004c8c <__fp_mpack_finite>:
    4c8c:	91 50       	subi	r25, 0x01	; 1
    4c8e:	20 f4       	brcc	.+8      	; 0x4c98 <__fp_mpack_finite+0xc>
    4c90:	87 95       	ror	r24
    4c92:	77 95       	ror	r23
    4c94:	67 95       	ror	r22
    4c96:	b7 95       	ror	r27
    4c98:	88 0f       	add	r24, r24
    4c9a:	91 1d       	adc	r25, r1
    4c9c:	96 95       	lsr	r25
    4c9e:	87 95       	ror	r24
    4ca0:	97 f9       	bld	r25, 7
    4ca2:	08 95       	ret

00004ca4 <__mulsi3>:
    4ca4:	db 01       	movw	r26, r22
    4ca6:	8f 93       	push	r24
    4ca8:	9f 93       	push	r25
    4caa:	88 d0       	rcall	.+272    	; 0x4dbc <__muluhisi3>
    4cac:	bf 91       	pop	r27
    4cae:	af 91       	pop	r26
    4cb0:	a2 9f       	mul	r26, r18
    4cb2:	80 0d       	add	r24, r0
    4cb4:	91 1d       	adc	r25, r1
    4cb6:	a3 9f       	mul	r26, r19
    4cb8:	90 0d       	add	r25, r0
    4cba:	b2 9f       	mul	r27, r18
    4cbc:	90 0d       	add	r25, r0
    4cbe:	11 24       	eor	r1, r1
    4cc0:	08 95       	ret

00004cc2 <__udivmodhi4>:
    4cc2:	aa 1b       	sub	r26, r26
    4cc4:	bb 1b       	sub	r27, r27
    4cc6:	51 e1       	ldi	r21, 0x11	; 17
    4cc8:	07 c0       	rjmp	.+14     	; 0x4cd8 <__udivmodhi4_ep>

00004cca <__udivmodhi4_loop>:
    4cca:	aa 1f       	adc	r26, r26
    4ccc:	bb 1f       	adc	r27, r27
    4cce:	a6 17       	cp	r26, r22
    4cd0:	b7 07       	cpc	r27, r23
    4cd2:	10 f0       	brcs	.+4      	; 0x4cd8 <__udivmodhi4_ep>
    4cd4:	a6 1b       	sub	r26, r22
    4cd6:	b7 0b       	sbc	r27, r23

00004cd8 <__udivmodhi4_ep>:
    4cd8:	88 1f       	adc	r24, r24
    4cda:	99 1f       	adc	r25, r25
    4cdc:	5a 95       	dec	r21
    4cde:	a9 f7       	brne	.-22     	; 0x4cca <__udivmodhi4_loop>
    4ce0:	80 95       	com	r24
    4ce2:	90 95       	com	r25
    4ce4:	bc 01       	movw	r22, r24
    4ce6:	cd 01       	movw	r24, r26
    4ce8:	08 95       	ret

00004cea <__divmodhi4>:
    4cea:	97 fb       	bst	r25, 7
    4cec:	07 2e       	mov	r0, r23
    4cee:	16 f4       	brtc	.+4      	; 0x4cf4 <__divmodhi4+0xa>
    4cf0:	00 94       	com	r0
    4cf2:	06 d0       	rcall	.+12     	; 0x4d00 <__divmodhi4_neg1>
    4cf4:	77 fd       	sbrc	r23, 7
    4cf6:	08 d0       	rcall	.+16     	; 0x4d08 <__divmodhi4_neg2>
    4cf8:	e4 df       	rcall	.-56     	; 0x4cc2 <__udivmodhi4>
    4cfa:	07 fc       	sbrc	r0, 7
    4cfc:	05 d0       	rcall	.+10     	; 0x4d08 <__divmodhi4_neg2>
    4cfe:	3e f4       	brtc	.+14     	; 0x4d0e <__divmodhi4_exit>

00004d00 <__divmodhi4_neg1>:
    4d00:	90 95       	com	r25
    4d02:	81 95       	neg	r24
    4d04:	9f 4f       	sbci	r25, 0xFF	; 255
    4d06:	08 95       	ret

00004d08 <__divmodhi4_neg2>:
    4d08:	70 95       	com	r23
    4d0a:	61 95       	neg	r22
    4d0c:	7f 4f       	sbci	r23, 0xFF	; 255

00004d0e <__divmodhi4_exit>:
    4d0e:	08 95       	ret

00004d10 <__udivmodsi4>:
    4d10:	a1 e2       	ldi	r26, 0x21	; 33
    4d12:	1a 2e       	mov	r1, r26
    4d14:	aa 1b       	sub	r26, r26
    4d16:	bb 1b       	sub	r27, r27
    4d18:	fd 01       	movw	r30, r26
    4d1a:	0d c0       	rjmp	.+26     	; 0x4d36 <__udivmodsi4_ep>

00004d1c <__udivmodsi4_loop>:
    4d1c:	aa 1f       	adc	r26, r26
    4d1e:	bb 1f       	adc	r27, r27
    4d20:	ee 1f       	adc	r30, r30
    4d22:	ff 1f       	adc	r31, r31
    4d24:	a2 17       	cp	r26, r18
    4d26:	b3 07       	cpc	r27, r19
    4d28:	e4 07       	cpc	r30, r20
    4d2a:	f5 07       	cpc	r31, r21
    4d2c:	20 f0       	brcs	.+8      	; 0x4d36 <__udivmodsi4_ep>
    4d2e:	a2 1b       	sub	r26, r18
    4d30:	b3 0b       	sbc	r27, r19
    4d32:	e4 0b       	sbc	r30, r20
    4d34:	f5 0b       	sbc	r31, r21

00004d36 <__udivmodsi4_ep>:
    4d36:	66 1f       	adc	r22, r22
    4d38:	77 1f       	adc	r23, r23
    4d3a:	88 1f       	adc	r24, r24
    4d3c:	99 1f       	adc	r25, r25
    4d3e:	1a 94       	dec	r1
    4d40:	69 f7       	brne	.-38     	; 0x4d1c <__udivmodsi4_loop>
    4d42:	60 95       	com	r22
    4d44:	70 95       	com	r23
    4d46:	80 95       	com	r24
    4d48:	90 95       	com	r25
    4d4a:	9b 01       	movw	r18, r22
    4d4c:	ac 01       	movw	r20, r24
    4d4e:	bd 01       	movw	r22, r26
    4d50:	cf 01       	movw	r24, r30
    4d52:	08 95       	ret

00004d54 <__divmodsi4>:
    4d54:	05 2e       	mov	r0, r21
    4d56:	97 fb       	bst	r25, 7
    4d58:	16 f4       	brtc	.+4      	; 0x4d5e <__divmodsi4+0xa>
    4d5a:	00 94       	com	r0
    4d5c:	0f d0       	rcall	.+30     	; 0x4d7c <__negsi2>
    4d5e:	57 fd       	sbrc	r21, 7
    4d60:	05 d0       	rcall	.+10     	; 0x4d6c <__divmodsi4_neg2>
    4d62:	d6 df       	rcall	.-84     	; 0x4d10 <__udivmodsi4>
    4d64:	07 fc       	sbrc	r0, 7
    4d66:	02 d0       	rcall	.+4      	; 0x4d6c <__divmodsi4_neg2>
    4d68:	46 f4       	brtc	.+16     	; 0x4d7a <__divmodsi4_exit>
    4d6a:	08 c0       	rjmp	.+16     	; 0x4d7c <__negsi2>

00004d6c <__divmodsi4_neg2>:
    4d6c:	50 95       	com	r21
    4d6e:	40 95       	com	r20
    4d70:	30 95       	com	r19
    4d72:	21 95       	neg	r18
    4d74:	3f 4f       	sbci	r19, 0xFF	; 255
    4d76:	4f 4f       	sbci	r20, 0xFF	; 255
    4d78:	5f 4f       	sbci	r21, 0xFF	; 255

00004d7a <__divmodsi4_exit>:
    4d7a:	08 95       	ret

00004d7c <__negsi2>:
    4d7c:	90 95       	com	r25
    4d7e:	80 95       	com	r24
    4d80:	70 95       	com	r23
    4d82:	61 95       	neg	r22
    4d84:	7f 4f       	sbci	r23, 0xFF	; 255
    4d86:	8f 4f       	sbci	r24, 0xFF	; 255
    4d88:	9f 4f       	sbci	r25, 0xFF	; 255
    4d8a:	08 95       	ret

00004d8c <__tablejump2__>:
    4d8c:	ee 0f       	add	r30, r30
    4d8e:	ff 1f       	adc	r31, r31
    4d90:	88 1f       	adc	r24, r24
    4d92:	8b bf       	out	0x3b, r24	; 59
    4d94:	07 90       	elpm	r0, Z+
    4d96:	f6 91       	elpm	r31, Z
    4d98:	e0 2d       	mov	r30, r0
    4d9a:	1b be       	out	0x3b, r1	; 59
    4d9c:	19 94       	eijmp

00004d9e <__umulhisi3>:
    4d9e:	a2 9f       	mul	r26, r18
    4da0:	b0 01       	movw	r22, r0
    4da2:	b3 9f       	mul	r27, r19
    4da4:	c0 01       	movw	r24, r0
    4da6:	a3 9f       	mul	r26, r19
    4da8:	70 0d       	add	r23, r0
    4daa:	81 1d       	adc	r24, r1
    4dac:	11 24       	eor	r1, r1
    4dae:	91 1d       	adc	r25, r1
    4db0:	b2 9f       	mul	r27, r18
    4db2:	70 0d       	add	r23, r0
    4db4:	81 1d       	adc	r24, r1
    4db6:	11 24       	eor	r1, r1
    4db8:	91 1d       	adc	r25, r1
    4dba:	08 95       	ret

00004dbc <__muluhisi3>:
    4dbc:	f0 df       	rcall	.-32     	; 0x4d9e <__umulhisi3>
    4dbe:	a5 9f       	mul	r26, r21
    4dc0:	90 0d       	add	r25, r0
    4dc2:	b4 9f       	mul	r27, r20
    4dc4:	90 0d       	add	r25, r0
    4dc6:	a4 9f       	mul	r26, r20
    4dc8:	80 0d       	add	r24, r0
    4dca:	91 1d       	adc	r25, r1
    4dcc:	11 24       	eor	r1, r1
    4dce:	08 95       	ret

00004dd0 <__ashldi3>:
    4dd0:	0f 93       	push	r16
    4dd2:	08 30       	cpi	r16, 0x08	; 8
    4dd4:	90 f0       	brcs	.+36     	; 0x4dfa <__ashldi3+0x2a>
    4dd6:	98 2f       	mov	r25, r24
    4dd8:	87 2f       	mov	r24, r23
    4dda:	76 2f       	mov	r23, r22
    4ddc:	65 2f       	mov	r22, r21
    4dde:	54 2f       	mov	r21, r20
    4de0:	43 2f       	mov	r20, r19
    4de2:	32 2f       	mov	r19, r18
    4de4:	22 27       	eor	r18, r18
    4de6:	08 50       	subi	r16, 0x08	; 8
    4de8:	f4 cf       	rjmp	.-24     	; 0x4dd2 <__ashldi3+0x2>
    4dea:	22 0f       	add	r18, r18
    4dec:	33 1f       	adc	r19, r19
    4dee:	44 1f       	adc	r20, r20
    4df0:	55 1f       	adc	r21, r21
    4df2:	66 1f       	adc	r22, r22
    4df4:	77 1f       	adc	r23, r23
    4df6:	88 1f       	adc	r24, r24
    4df8:	99 1f       	adc	r25, r25
    4dfa:	0a 95       	dec	r16
    4dfc:	b2 f7       	brpl	.-20     	; 0x4dea <__ashldi3+0x1a>
    4dfe:	0f 91       	pop	r16
    4e00:	08 95       	ret

00004e02 <__ashrdi3>:
    4e02:	97 fb       	bst	r25, 7
    4e04:	10 f8       	bld	r1, 0

00004e06 <__lshrdi3>:
    4e06:	16 94       	lsr	r1
    4e08:	00 08       	sbc	r0, r0
    4e0a:	0f 93       	push	r16
    4e0c:	08 30       	cpi	r16, 0x08	; 8
    4e0e:	98 f0       	brcs	.+38     	; 0x4e36 <__lshrdi3+0x30>
    4e10:	08 50       	subi	r16, 0x08	; 8
    4e12:	23 2f       	mov	r18, r19
    4e14:	34 2f       	mov	r19, r20
    4e16:	45 2f       	mov	r20, r21
    4e18:	56 2f       	mov	r21, r22
    4e1a:	67 2f       	mov	r22, r23
    4e1c:	78 2f       	mov	r23, r24
    4e1e:	89 2f       	mov	r24, r25
    4e20:	90 2d       	mov	r25, r0
    4e22:	f4 cf       	rjmp	.-24     	; 0x4e0c <__lshrdi3+0x6>
    4e24:	05 94       	asr	r0
    4e26:	97 95       	ror	r25
    4e28:	87 95       	ror	r24
    4e2a:	77 95       	ror	r23
    4e2c:	67 95       	ror	r22
    4e2e:	57 95       	ror	r21
    4e30:	47 95       	ror	r20
    4e32:	37 95       	ror	r19
    4e34:	27 95       	ror	r18
    4e36:	0a 95       	dec	r16
    4e38:	aa f7       	brpl	.-22     	; 0x4e24 <__lshrdi3+0x1e>
    4e3a:	0f 91       	pop	r16
    4e3c:	08 95       	ret

00004e3e <fdevopen>:
    4e3e:	0f 93       	push	r16
    4e40:	1f 93       	push	r17
    4e42:	cf 93       	push	r28
    4e44:	df 93       	push	r29
    4e46:	00 97       	sbiw	r24, 0x00	; 0
    4e48:	31 f4       	brne	.+12     	; 0x4e56 <fdevopen+0x18>
    4e4a:	61 15       	cp	r22, r1
    4e4c:	71 05       	cpc	r23, r1
    4e4e:	19 f4       	brne	.+6      	; 0x4e56 <fdevopen+0x18>
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	39 c0       	rjmp	.+114    	; 0x4ec8 <fdevopen+0x8a>
    4e56:	8b 01       	movw	r16, r22
    4e58:	ec 01       	movw	r28, r24
    4e5a:	6e e0       	ldi	r22, 0x0E	; 14
    4e5c:	70 e0       	ldi	r23, 0x00	; 0
    4e5e:	81 e0       	ldi	r24, 0x01	; 1
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	47 d5       	rcall	.+2702   	; 0x58f2 <calloc>
    4e64:	fc 01       	movw	r30, r24
    4e66:	89 2b       	or	r24, r25
    4e68:	99 f3       	breq	.-26     	; 0x4e50 <fdevopen+0x12>
    4e6a:	80 e8       	ldi	r24, 0x80	; 128
    4e6c:	83 83       	std	Z+3, r24	; 0x03
    4e6e:	01 15       	cp	r16, r1
    4e70:	11 05       	cpc	r17, r1
    4e72:	71 f0       	breq	.+28     	; 0x4e90 <fdevopen+0x52>
    4e74:	02 87       	std	Z+10, r16	; 0x0a
    4e76:	13 87       	std	Z+11, r17	; 0x0b
    4e78:	81 e8       	ldi	r24, 0x81	; 129
    4e7a:	83 83       	std	Z+3, r24	; 0x03
    4e7c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__iob>
    4e80:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__iob+0x1>
    4e84:	89 2b       	or	r24, r25
    4e86:	21 f4       	brne	.+8      	; 0x4e90 <fdevopen+0x52>
    4e88:	e0 93 f2 21 	sts	0x21F2, r30	; 0x8021f2 <__iob>
    4e8c:	f0 93 f3 21 	sts	0x21F3, r31	; 0x8021f3 <__iob+0x1>
    4e90:	20 97       	sbiw	r28, 0x00	; 0
    4e92:	c9 f0       	breq	.+50     	; 0x4ec6 <fdevopen+0x88>
    4e94:	c0 87       	std	Z+8, r28	; 0x08
    4e96:	d1 87       	std	Z+9, r29	; 0x09
    4e98:	83 81       	ldd	r24, Z+3	; 0x03
    4e9a:	82 60       	ori	r24, 0x02	; 2
    4e9c:	83 83       	std	Z+3, r24	; 0x03
    4e9e:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <__iob+0x2>
    4ea2:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <__iob+0x3>
    4ea6:	89 2b       	or	r24, r25
    4ea8:	71 f4       	brne	.+28     	; 0x4ec6 <fdevopen+0x88>
    4eaa:	e0 93 f4 21 	sts	0x21F4, r30	; 0x8021f4 <__iob+0x2>
    4eae:	f0 93 f5 21 	sts	0x21F5, r31	; 0x8021f5 <__iob+0x3>
    4eb2:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <__iob+0x4>
    4eb6:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <__iob+0x5>
    4eba:	89 2b       	or	r24, r25
    4ebc:	21 f4       	brne	.+8      	; 0x4ec6 <fdevopen+0x88>
    4ebe:	e0 93 f6 21 	sts	0x21F6, r30	; 0x8021f6 <__iob+0x4>
    4ec2:	f0 93 f7 21 	sts	0x21F7, r31	; 0x8021f7 <__iob+0x5>
    4ec6:	cf 01       	movw	r24, r30
    4ec8:	df 91       	pop	r29
    4eca:	cf 91       	pop	r28
    4ecc:	1f 91       	pop	r17
    4ece:	0f 91       	pop	r16
    4ed0:	08 95       	ret

00004ed2 <printf>:
    4ed2:	cf 93       	push	r28
    4ed4:	df 93       	push	r29
    4ed6:	cd b7       	in	r28, 0x3d	; 61
    4ed8:	de b7       	in	r29, 0x3e	; 62
    4eda:	ae 01       	movw	r20, r28
    4edc:	4a 5f       	subi	r20, 0xFA	; 250
    4ede:	5f 4f       	sbci	r21, 0xFF	; 255
    4ee0:	fa 01       	movw	r30, r20
    4ee2:	61 91       	ld	r22, Z+
    4ee4:	71 91       	ld	r23, Z+
    4ee6:	af 01       	movw	r20, r30
    4ee8:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <__iob+0x2>
    4eec:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <__iob+0x3>
    4ef0:	46 d0       	rcall	.+140    	; 0x4f7e <vfprintf>
    4ef2:	df 91       	pop	r29
    4ef4:	cf 91       	pop	r28
    4ef6:	08 95       	ret

00004ef8 <sprintf>:
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
    4f00:	cd b7       	in	r28, 0x3d	; 61
    4f02:	de b7       	in	r29, 0x3e	; 62
    4f04:	2e 97       	sbiw	r28, 0x0e	; 14
    4f06:	cd bf       	out	0x3d, r28	; 61
    4f08:	de bf       	out	0x3e, r29	; 62
    4f0a:	0e 89       	ldd	r16, Y+22	; 0x16
    4f0c:	1f 89       	ldd	r17, Y+23	; 0x17
    4f0e:	86 e0       	ldi	r24, 0x06	; 6
    4f10:	8c 83       	std	Y+4, r24	; 0x04
    4f12:	09 83       	std	Y+1, r16	; 0x01
    4f14:	1a 83       	std	Y+2, r17	; 0x02
    4f16:	8f ef       	ldi	r24, 0xFF	; 255
    4f18:	9f e7       	ldi	r25, 0x7F	; 127
    4f1a:	8d 83       	std	Y+5, r24	; 0x05
    4f1c:	9e 83       	std	Y+6, r25	; 0x06
    4f1e:	ae 01       	movw	r20, r28
    4f20:	46 5e       	subi	r20, 0xE6	; 230
    4f22:	5f 4f       	sbci	r21, 0xFF	; 255
    4f24:	68 8d       	ldd	r22, Y+24	; 0x18
    4f26:	79 8d       	ldd	r23, Y+25	; 0x19
    4f28:	ce 01       	movw	r24, r28
    4f2a:	01 96       	adiw	r24, 0x01	; 1
    4f2c:	28 d0       	rcall	.+80     	; 0x4f7e <vfprintf>
    4f2e:	ef 81       	ldd	r30, Y+7	; 0x07
    4f30:	f8 85       	ldd	r31, Y+8	; 0x08
    4f32:	e0 0f       	add	r30, r16
    4f34:	f1 1f       	adc	r31, r17
    4f36:	10 82       	st	Z, r1
    4f38:	2e 96       	adiw	r28, 0x0e	; 14
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	de bf       	out	0x3e, r29	; 62
    4f3e:	df 91       	pop	r29
    4f40:	cf 91       	pop	r28
    4f42:	1f 91       	pop	r17
    4f44:	0f 91       	pop	r16
    4f46:	08 95       	ret

00004f48 <sscanf>:
    4f48:	cf 93       	push	r28
    4f4a:	df 93       	push	r29
    4f4c:	cd b7       	in	r28, 0x3d	; 61
    4f4e:	de b7       	in	r29, 0x3e	; 62
    4f50:	2e 97       	sbiw	r28, 0x0e	; 14
    4f52:	cd bf       	out	0x3d, r28	; 61
    4f54:	de bf       	out	0x3e, r29	; 62
    4f56:	85 e0       	ldi	r24, 0x05	; 5
    4f58:	8c 83       	std	Y+4, r24	; 0x04
    4f5a:	8c 89       	ldd	r24, Y+20	; 0x14
    4f5c:	9d 89       	ldd	r25, Y+21	; 0x15
    4f5e:	89 83       	std	Y+1, r24	; 0x01
    4f60:	9a 83       	std	Y+2, r25	; 0x02
    4f62:	ae 01       	movw	r20, r28
    4f64:	48 5e       	subi	r20, 0xE8	; 232
    4f66:	5f 4f       	sbci	r21, 0xFF	; 255
    4f68:	6e 89       	ldd	r22, Y+22	; 0x16
    4f6a:	7f 89       	ldd	r23, Y+23	; 0x17
    4f6c:	ce 01       	movw	r24, r28
    4f6e:	01 96       	adiw	r24, 0x01	; 1
    4f70:	a9 d3       	rcall	.+1874   	; 0x56c4 <vfscanf>
    4f72:	2e 96       	adiw	r28, 0x0e	; 14
    4f74:	cd bf       	out	0x3d, r28	; 61
    4f76:	de bf       	out	0x3e, r29	; 62
    4f78:	df 91       	pop	r29
    4f7a:	cf 91       	pop	r28
    4f7c:	08 95       	ret

00004f7e <vfprintf>:
    4f7e:	2f 92       	push	r2
    4f80:	3f 92       	push	r3
    4f82:	4f 92       	push	r4
    4f84:	5f 92       	push	r5
    4f86:	6f 92       	push	r6
    4f88:	7f 92       	push	r7
    4f8a:	8f 92       	push	r8
    4f8c:	9f 92       	push	r9
    4f8e:	af 92       	push	r10
    4f90:	bf 92       	push	r11
    4f92:	cf 92       	push	r12
    4f94:	df 92       	push	r13
    4f96:	ef 92       	push	r14
    4f98:	ff 92       	push	r15
    4f9a:	0f 93       	push	r16
    4f9c:	1f 93       	push	r17
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
    4fa2:	cd b7       	in	r28, 0x3d	; 61
    4fa4:	de b7       	in	r29, 0x3e	; 62
    4fa6:	2b 97       	sbiw	r28, 0x0b	; 11
    4fa8:	cd bf       	out	0x3d, r28	; 61
    4faa:	de bf       	out	0x3e, r29	; 62
    4fac:	6c 01       	movw	r12, r24
    4fae:	7b 01       	movw	r14, r22
    4fb0:	8a 01       	movw	r16, r20
    4fb2:	fc 01       	movw	r30, r24
    4fb4:	16 82       	std	Z+6, r1	; 0x06
    4fb6:	17 82       	std	Z+7, r1	; 0x07
    4fb8:	83 81       	ldd	r24, Z+3	; 0x03
    4fba:	81 ff       	sbrs	r24, 1
    4fbc:	bf c1       	rjmp	.+894    	; 0x533c <vfprintf+0x3be>
    4fbe:	ce 01       	movw	r24, r28
    4fc0:	01 96       	adiw	r24, 0x01	; 1
    4fc2:	3c 01       	movw	r6, r24
    4fc4:	f6 01       	movw	r30, r12
    4fc6:	93 81       	ldd	r25, Z+3	; 0x03
    4fc8:	f7 01       	movw	r30, r14
    4fca:	93 fd       	sbrc	r25, 3
    4fcc:	85 91       	lpm	r24, Z+
    4fce:	93 ff       	sbrs	r25, 3
    4fd0:	81 91       	ld	r24, Z+
    4fd2:	7f 01       	movw	r14, r30
    4fd4:	88 23       	and	r24, r24
    4fd6:	09 f4       	brne	.+2      	; 0x4fda <vfprintf+0x5c>
    4fd8:	ad c1       	rjmp	.+858    	; 0x5334 <vfprintf+0x3b6>
    4fda:	85 32       	cpi	r24, 0x25	; 37
    4fdc:	39 f4       	brne	.+14     	; 0x4fec <vfprintf+0x6e>
    4fde:	93 fd       	sbrc	r25, 3
    4fe0:	85 91       	lpm	r24, Z+
    4fe2:	93 ff       	sbrs	r25, 3
    4fe4:	81 91       	ld	r24, Z+
    4fe6:	7f 01       	movw	r14, r30
    4fe8:	85 32       	cpi	r24, 0x25	; 37
    4fea:	21 f4       	brne	.+8      	; 0x4ff4 <vfprintf+0x76>
    4fec:	b6 01       	movw	r22, r12
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	29 d6       	rcall	.+3154   	; 0x5c44 <fputc>
    4ff2:	e8 cf       	rjmp	.-48     	; 0x4fc4 <vfprintf+0x46>
    4ff4:	91 2c       	mov	r9, r1
    4ff6:	21 2c       	mov	r2, r1
    4ff8:	31 2c       	mov	r3, r1
    4ffa:	ff e1       	ldi	r31, 0x1F	; 31
    4ffc:	f3 15       	cp	r31, r3
    4ffe:	d8 f0       	brcs	.+54     	; 0x5036 <vfprintf+0xb8>
    5000:	8b 32       	cpi	r24, 0x2B	; 43
    5002:	79 f0       	breq	.+30     	; 0x5022 <vfprintf+0xa4>
    5004:	38 f4       	brcc	.+14     	; 0x5014 <vfprintf+0x96>
    5006:	80 32       	cpi	r24, 0x20	; 32
    5008:	79 f0       	breq	.+30     	; 0x5028 <vfprintf+0xaa>
    500a:	83 32       	cpi	r24, 0x23	; 35
    500c:	a1 f4       	brne	.+40     	; 0x5036 <vfprintf+0xb8>
    500e:	23 2d       	mov	r18, r3
    5010:	20 61       	ori	r18, 0x10	; 16
    5012:	1d c0       	rjmp	.+58     	; 0x504e <vfprintf+0xd0>
    5014:	8d 32       	cpi	r24, 0x2D	; 45
    5016:	61 f0       	breq	.+24     	; 0x5030 <vfprintf+0xb2>
    5018:	80 33       	cpi	r24, 0x30	; 48
    501a:	69 f4       	brne	.+26     	; 0x5036 <vfprintf+0xb8>
    501c:	23 2d       	mov	r18, r3
    501e:	21 60       	ori	r18, 0x01	; 1
    5020:	16 c0       	rjmp	.+44     	; 0x504e <vfprintf+0xd0>
    5022:	83 2d       	mov	r24, r3
    5024:	82 60       	ori	r24, 0x02	; 2
    5026:	38 2e       	mov	r3, r24
    5028:	e3 2d       	mov	r30, r3
    502a:	e4 60       	ori	r30, 0x04	; 4
    502c:	3e 2e       	mov	r3, r30
    502e:	2a c0       	rjmp	.+84     	; 0x5084 <vfprintf+0x106>
    5030:	f3 2d       	mov	r31, r3
    5032:	f8 60       	ori	r31, 0x08	; 8
    5034:	1d c0       	rjmp	.+58     	; 0x5070 <vfprintf+0xf2>
    5036:	37 fc       	sbrc	r3, 7
    5038:	2d c0       	rjmp	.+90     	; 0x5094 <vfprintf+0x116>
    503a:	20 ed       	ldi	r18, 0xD0	; 208
    503c:	28 0f       	add	r18, r24
    503e:	2a 30       	cpi	r18, 0x0A	; 10
    5040:	40 f0       	brcs	.+16     	; 0x5052 <vfprintf+0xd4>
    5042:	8e 32       	cpi	r24, 0x2E	; 46
    5044:	b9 f4       	brne	.+46     	; 0x5074 <vfprintf+0xf6>
    5046:	36 fc       	sbrc	r3, 6
    5048:	75 c1       	rjmp	.+746    	; 0x5334 <vfprintf+0x3b6>
    504a:	23 2d       	mov	r18, r3
    504c:	20 64       	ori	r18, 0x40	; 64
    504e:	32 2e       	mov	r3, r18
    5050:	19 c0       	rjmp	.+50     	; 0x5084 <vfprintf+0x106>
    5052:	36 fe       	sbrs	r3, 6
    5054:	06 c0       	rjmp	.+12     	; 0x5062 <vfprintf+0xe4>
    5056:	8a e0       	ldi	r24, 0x0A	; 10
    5058:	98 9e       	mul	r9, r24
    505a:	20 0d       	add	r18, r0
    505c:	11 24       	eor	r1, r1
    505e:	92 2e       	mov	r9, r18
    5060:	11 c0       	rjmp	.+34     	; 0x5084 <vfprintf+0x106>
    5062:	ea e0       	ldi	r30, 0x0A	; 10
    5064:	2e 9e       	mul	r2, r30
    5066:	20 0d       	add	r18, r0
    5068:	11 24       	eor	r1, r1
    506a:	22 2e       	mov	r2, r18
    506c:	f3 2d       	mov	r31, r3
    506e:	f0 62       	ori	r31, 0x20	; 32
    5070:	3f 2e       	mov	r3, r31
    5072:	08 c0       	rjmp	.+16     	; 0x5084 <vfprintf+0x106>
    5074:	8c 36       	cpi	r24, 0x6C	; 108
    5076:	21 f4       	brne	.+8      	; 0x5080 <vfprintf+0x102>
    5078:	83 2d       	mov	r24, r3
    507a:	80 68       	ori	r24, 0x80	; 128
    507c:	38 2e       	mov	r3, r24
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <vfprintf+0x106>
    5080:	88 36       	cpi	r24, 0x68	; 104
    5082:	41 f4       	brne	.+16     	; 0x5094 <vfprintf+0x116>
    5084:	f7 01       	movw	r30, r14
    5086:	93 fd       	sbrc	r25, 3
    5088:	85 91       	lpm	r24, Z+
    508a:	93 ff       	sbrs	r25, 3
    508c:	81 91       	ld	r24, Z+
    508e:	7f 01       	movw	r14, r30
    5090:	81 11       	cpse	r24, r1
    5092:	b3 cf       	rjmp	.-154    	; 0x4ffa <vfprintf+0x7c>
    5094:	98 2f       	mov	r25, r24
    5096:	9f 7d       	andi	r25, 0xDF	; 223
    5098:	95 54       	subi	r25, 0x45	; 69
    509a:	93 30       	cpi	r25, 0x03	; 3
    509c:	28 f4       	brcc	.+10     	; 0x50a8 <vfprintf+0x12a>
    509e:	0c 5f       	subi	r16, 0xFC	; 252
    50a0:	1f 4f       	sbci	r17, 0xFF	; 255
    50a2:	9f e3       	ldi	r25, 0x3F	; 63
    50a4:	99 83       	std	Y+1, r25	; 0x01
    50a6:	0d c0       	rjmp	.+26     	; 0x50c2 <vfprintf+0x144>
    50a8:	83 36       	cpi	r24, 0x63	; 99
    50aa:	31 f0       	breq	.+12     	; 0x50b8 <vfprintf+0x13a>
    50ac:	83 37       	cpi	r24, 0x73	; 115
    50ae:	71 f0       	breq	.+28     	; 0x50cc <vfprintf+0x14e>
    50b0:	83 35       	cpi	r24, 0x53	; 83
    50b2:	09 f0       	breq	.+2      	; 0x50b6 <vfprintf+0x138>
    50b4:	55 c0       	rjmp	.+170    	; 0x5160 <vfprintf+0x1e2>
    50b6:	20 c0       	rjmp	.+64     	; 0x50f8 <vfprintf+0x17a>
    50b8:	f8 01       	movw	r30, r16
    50ba:	80 81       	ld	r24, Z
    50bc:	89 83       	std	Y+1, r24	; 0x01
    50be:	0e 5f       	subi	r16, 0xFE	; 254
    50c0:	1f 4f       	sbci	r17, 0xFF	; 255
    50c2:	88 24       	eor	r8, r8
    50c4:	83 94       	inc	r8
    50c6:	91 2c       	mov	r9, r1
    50c8:	53 01       	movw	r10, r6
    50ca:	12 c0       	rjmp	.+36     	; 0x50f0 <vfprintf+0x172>
    50cc:	28 01       	movw	r4, r16
    50ce:	f2 e0       	ldi	r31, 0x02	; 2
    50d0:	4f 0e       	add	r4, r31
    50d2:	51 1c       	adc	r5, r1
    50d4:	f8 01       	movw	r30, r16
    50d6:	a0 80       	ld	r10, Z
    50d8:	b1 80       	ldd	r11, Z+1	; 0x01
    50da:	36 fe       	sbrs	r3, 6
    50dc:	03 c0       	rjmp	.+6      	; 0x50e4 <vfprintf+0x166>
    50de:	69 2d       	mov	r22, r9
    50e0:	70 e0       	ldi	r23, 0x00	; 0
    50e2:	02 c0       	rjmp	.+4      	; 0x50e8 <vfprintf+0x16a>
    50e4:	6f ef       	ldi	r22, 0xFF	; 255
    50e6:	7f ef       	ldi	r23, 0xFF	; 255
    50e8:	c5 01       	movw	r24, r10
    50ea:	63 d5       	rcall	.+2758   	; 0x5bb2 <strnlen>
    50ec:	4c 01       	movw	r8, r24
    50ee:	82 01       	movw	r16, r4
    50f0:	f3 2d       	mov	r31, r3
    50f2:	ff 77       	andi	r31, 0x7F	; 127
    50f4:	3f 2e       	mov	r3, r31
    50f6:	15 c0       	rjmp	.+42     	; 0x5122 <vfprintf+0x1a4>
    50f8:	28 01       	movw	r4, r16
    50fa:	22 e0       	ldi	r18, 0x02	; 2
    50fc:	42 0e       	add	r4, r18
    50fe:	51 1c       	adc	r5, r1
    5100:	f8 01       	movw	r30, r16
    5102:	a0 80       	ld	r10, Z
    5104:	b1 80       	ldd	r11, Z+1	; 0x01
    5106:	36 fe       	sbrs	r3, 6
    5108:	03 c0       	rjmp	.+6      	; 0x5110 <vfprintf+0x192>
    510a:	69 2d       	mov	r22, r9
    510c:	70 e0       	ldi	r23, 0x00	; 0
    510e:	02 c0       	rjmp	.+4      	; 0x5114 <vfprintf+0x196>
    5110:	6f ef       	ldi	r22, 0xFF	; 255
    5112:	7f ef       	ldi	r23, 0xFF	; 255
    5114:	c5 01       	movw	r24, r10
    5116:	3b d5       	rcall	.+2678   	; 0x5b8e <strnlen_P>
    5118:	4c 01       	movw	r8, r24
    511a:	f3 2d       	mov	r31, r3
    511c:	f0 68       	ori	r31, 0x80	; 128
    511e:	3f 2e       	mov	r3, r31
    5120:	82 01       	movw	r16, r4
    5122:	33 fc       	sbrc	r3, 3
    5124:	19 c0       	rjmp	.+50     	; 0x5158 <vfprintf+0x1da>
    5126:	82 2d       	mov	r24, r2
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	88 16       	cp	r8, r24
    512c:	99 06       	cpc	r9, r25
    512e:	a0 f4       	brcc	.+40     	; 0x5158 <vfprintf+0x1da>
    5130:	b6 01       	movw	r22, r12
    5132:	80 e2       	ldi	r24, 0x20	; 32
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	86 d5       	rcall	.+2828   	; 0x5c44 <fputc>
    5138:	2a 94       	dec	r2
    513a:	f5 cf       	rjmp	.-22     	; 0x5126 <vfprintf+0x1a8>
    513c:	f5 01       	movw	r30, r10
    513e:	37 fc       	sbrc	r3, 7
    5140:	85 91       	lpm	r24, Z+
    5142:	37 fe       	sbrs	r3, 7
    5144:	81 91       	ld	r24, Z+
    5146:	5f 01       	movw	r10, r30
    5148:	b6 01       	movw	r22, r12
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	7b d5       	rcall	.+2806   	; 0x5c44 <fputc>
    514e:	21 10       	cpse	r2, r1
    5150:	2a 94       	dec	r2
    5152:	21 e0       	ldi	r18, 0x01	; 1
    5154:	82 1a       	sub	r8, r18
    5156:	91 08       	sbc	r9, r1
    5158:	81 14       	cp	r8, r1
    515a:	91 04       	cpc	r9, r1
    515c:	79 f7       	brne	.-34     	; 0x513c <vfprintf+0x1be>
    515e:	e1 c0       	rjmp	.+450    	; 0x5322 <vfprintf+0x3a4>
    5160:	84 36       	cpi	r24, 0x64	; 100
    5162:	11 f0       	breq	.+4      	; 0x5168 <vfprintf+0x1ea>
    5164:	89 36       	cpi	r24, 0x69	; 105
    5166:	39 f5       	brne	.+78     	; 0x51b6 <vfprintf+0x238>
    5168:	f8 01       	movw	r30, r16
    516a:	37 fe       	sbrs	r3, 7
    516c:	07 c0       	rjmp	.+14     	; 0x517c <vfprintf+0x1fe>
    516e:	60 81       	ld	r22, Z
    5170:	71 81       	ldd	r23, Z+1	; 0x01
    5172:	82 81       	ldd	r24, Z+2	; 0x02
    5174:	93 81       	ldd	r25, Z+3	; 0x03
    5176:	0c 5f       	subi	r16, 0xFC	; 252
    5178:	1f 4f       	sbci	r17, 0xFF	; 255
    517a:	08 c0       	rjmp	.+16     	; 0x518c <vfprintf+0x20e>
    517c:	60 81       	ld	r22, Z
    517e:	71 81       	ldd	r23, Z+1	; 0x01
    5180:	07 2e       	mov	r0, r23
    5182:	00 0c       	add	r0, r0
    5184:	88 0b       	sbc	r24, r24
    5186:	99 0b       	sbc	r25, r25
    5188:	0e 5f       	subi	r16, 0xFE	; 254
    518a:	1f 4f       	sbci	r17, 0xFF	; 255
    518c:	f3 2d       	mov	r31, r3
    518e:	ff 76       	andi	r31, 0x6F	; 111
    5190:	3f 2e       	mov	r3, r31
    5192:	97 ff       	sbrs	r25, 7
    5194:	09 c0       	rjmp	.+18     	; 0x51a8 <vfprintf+0x22a>
    5196:	90 95       	com	r25
    5198:	80 95       	com	r24
    519a:	70 95       	com	r23
    519c:	61 95       	neg	r22
    519e:	7f 4f       	sbci	r23, 0xFF	; 255
    51a0:	8f 4f       	sbci	r24, 0xFF	; 255
    51a2:	9f 4f       	sbci	r25, 0xFF	; 255
    51a4:	f0 68       	ori	r31, 0x80	; 128
    51a6:	3f 2e       	mov	r3, r31
    51a8:	2a e0       	ldi	r18, 0x0A	; 10
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	a3 01       	movw	r20, r6
    51ae:	9f d5       	rcall	.+2878   	; 0x5cee <__ultoa_invert>
    51b0:	88 2e       	mov	r8, r24
    51b2:	86 18       	sub	r8, r6
    51b4:	44 c0       	rjmp	.+136    	; 0x523e <vfprintf+0x2c0>
    51b6:	85 37       	cpi	r24, 0x75	; 117
    51b8:	31 f4       	brne	.+12     	; 0x51c6 <vfprintf+0x248>
    51ba:	23 2d       	mov	r18, r3
    51bc:	2f 7e       	andi	r18, 0xEF	; 239
    51be:	b2 2e       	mov	r11, r18
    51c0:	2a e0       	ldi	r18, 0x0A	; 10
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	25 c0       	rjmp	.+74     	; 0x5210 <vfprintf+0x292>
    51c6:	93 2d       	mov	r25, r3
    51c8:	99 7f       	andi	r25, 0xF9	; 249
    51ca:	b9 2e       	mov	r11, r25
    51cc:	8f 36       	cpi	r24, 0x6F	; 111
    51ce:	c1 f0       	breq	.+48     	; 0x5200 <vfprintf+0x282>
    51d0:	18 f4       	brcc	.+6      	; 0x51d8 <vfprintf+0x25a>
    51d2:	88 35       	cpi	r24, 0x58	; 88
    51d4:	79 f0       	breq	.+30     	; 0x51f4 <vfprintf+0x276>
    51d6:	ae c0       	rjmp	.+348    	; 0x5334 <vfprintf+0x3b6>
    51d8:	80 37       	cpi	r24, 0x70	; 112
    51da:	19 f0       	breq	.+6      	; 0x51e2 <vfprintf+0x264>
    51dc:	88 37       	cpi	r24, 0x78	; 120
    51de:	21 f0       	breq	.+8      	; 0x51e8 <vfprintf+0x26a>
    51e0:	a9 c0       	rjmp	.+338    	; 0x5334 <vfprintf+0x3b6>
    51e2:	e9 2f       	mov	r30, r25
    51e4:	e0 61       	ori	r30, 0x10	; 16
    51e6:	be 2e       	mov	r11, r30
    51e8:	b4 fe       	sbrs	r11, 4
    51ea:	0d c0       	rjmp	.+26     	; 0x5206 <vfprintf+0x288>
    51ec:	fb 2d       	mov	r31, r11
    51ee:	f4 60       	ori	r31, 0x04	; 4
    51f0:	bf 2e       	mov	r11, r31
    51f2:	09 c0       	rjmp	.+18     	; 0x5206 <vfprintf+0x288>
    51f4:	34 fe       	sbrs	r3, 4
    51f6:	0a c0       	rjmp	.+20     	; 0x520c <vfprintf+0x28e>
    51f8:	29 2f       	mov	r18, r25
    51fa:	26 60       	ori	r18, 0x06	; 6
    51fc:	b2 2e       	mov	r11, r18
    51fe:	06 c0       	rjmp	.+12     	; 0x520c <vfprintf+0x28e>
    5200:	28 e0       	ldi	r18, 0x08	; 8
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	05 c0       	rjmp	.+10     	; 0x5210 <vfprintf+0x292>
    5206:	20 e1       	ldi	r18, 0x10	; 16
    5208:	30 e0       	ldi	r19, 0x00	; 0
    520a:	02 c0       	rjmp	.+4      	; 0x5210 <vfprintf+0x292>
    520c:	20 e1       	ldi	r18, 0x10	; 16
    520e:	32 e0       	ldi	r19, 0x02	; 2
    5210:	f8 01       	movw	r30, r16
    5212:	b7 fe       	sbrs	r11, 7
    5214:	07 c0       	rjmp	.+14     	; 0x5224 <vfprintf+0x2a6>
    5216:	60 81       	ld	r22, Z
    5218:	71 81       	ldd	r23, Z+1	; 0x01
    521a:	82 81       	ldd	r24, Z+2	; 0x02
    521c:	93 81       	ldd	r25, Z+3	; 0x03
    521e:	0c 5f       	subi	r16, 0xFC	; 252
    5220:	1f 4f       	sbci	r17, 0xFF	; 255
    5222:	06 c0       	rjmp	.+12     	; 0x5230 <vfprintf+0x2b2>
    5224:	60 81       	ld	r22, Z
    5226:	71 81       	ldd	r23, Z+1	; 0x01
    5228:	80 e0       	ldi	r24, 0x00	; 0
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	0e 5f       	subi	r16, 0xFE	; 254
    522e:	1f 4f       	sbci	r17, 0xFF	; 255
    5230:	a3 01       	movw	r20, r6
    5232:	5d d5       	rcall	.+2746   	; 0x5cee <__ultoa_invert>
    5234:	88 2e       	mov	r8, r24
    5236:	86 18       	sub	r8, r6
    5238:	fb 2d       	mov	r31, r11
    523a:	ff 77       	andi	r31, 0x7F	; 127
    523c:	3f 2e       	mov	r3, r31
    523e:	36 fe       	sbrs	r3, 6
    5240:	0d c0       	rjmp	.+26     	; 0x525c <vfprintf+0x2de>
    5242:	23 2d       	mov	r18, r3
    5244:	2e 7f       	andi	r18, 0xFE	; 254
    5246:	a2 2e       	mov	r10, r18
    5248:	89 14       	cp	r8, r9
    524a:	58 f4       	brcc	.+22     	; 0x5262 <vfprintf+0x2e4>
    524c:	34 fe       	sbrs	r3, 4
    524e:	0b c0       	rjmp	.+22     	; 0x5266 <vfprintf+0x2e8>
    5250:	32 fc       	sbrc	r3, 2
    5252:	09 c0       	rjmp	.+18     	; 0x5266 <vfprintf+0x2e8>
    5254:	83 2d       	mov	r24, r3
    5256:	8e 7e       	andi	r24, 0xEE	; 238
    5258:	a8 2e       	mov	r10, r24
    525a:	05 c0       	rjmp	.+10     	; 0x5266 <vfprintf+0x2e8>
    525c:	b8 2c       	mov	r11, r8
    525e:	a3 2c       	mov	r10, r3
    5260:	03 c0       	rjmp	.+6      	; 0x5268 <vfprintf+0x2ea>
    5262:	b8 2c       	mov	r11, r8
    5264:	01 c0       	rjmp	.+2      	; 0x5268 <vfprintf+0x2ea>
    5266:	b9 2c       	mov	r11, r9
    5268:	a4 fe       	sbrs	r10, 4
    526a:	0f c0       	rjmp	.+30     	; 0x528a <vfprintf+0x30c>
    526c:	fe 01       	movw	r30, r28
    526e:	e8 0d       	add	r30, r8
    5270:	f1 1d       	adc	r31, r1
    5272:	80 81       	ld	r24, Z
    5274:	80 33       	cpi	r24, 0x30	; 48
    5276:	21 f4       	brne	.+8      	; 0x5280 <vfprintf+0x302>
    5278:	9a 2d       	mov	r25, r10
    527a:	99 7e       	andi	r25, 0xE9	; 233
    527c:	a9 2e       	mov	r10, r25
    527e:	09 c0       	rjmp	.+18     	; 0x5292 <vfprintf+0x314>
    5280:	a2 fe       	sbrs	r10, 2
    5282:	06 c0       	rjmp	.+12     	; 0x5290 <vfprintf+0x312>
    5284:	b3 94       	inc	r11
    5286:	b3 94       	inc	r11
    5288:	04 c0       	rjmp	.+8      	; 0x5292 <vfprintf+0x314>
    528a:	8a 2d       	mov	r24, r10
    528c:	86 78       	andi	r24, 0x86	; 134
    528e:	09 f0       	breq	.+2      	; 0x5292 <vfprintf+0x314>
    5290:	b3 94       	inc	r11
    5292:	a3 fc       	sbrc	r10, 3
    5294:	10 c0       	rjmp	.+32     	; 0x52b6 <vfprintf+0x338>
    5296:	a0 fe       	sbrs	r10, 0
    5298:	06 c0       	rjmp	.+12     	; 0x52a6 <vfprintf+0x328>
    529a:	b2 14       	cp	r11, r2
    529c:	80 f4       	brcc	.+32     	; 0x52be <vfprintf+0x340>
    529e:	28 0c       	add	r2, r8
    52a0:	92 2c       	mov	r9, r2
    52a2:	9b 18       	sub	r9, r11
    52a4:	0d c0       	rjmp	.+26     	; 0x52c0 <vfprintf+0x342>
    52a6:	b2 14       	cp	r11, r2
    52a8:	58 f4       	brcc	.+22     	; 0x52c0 <vfprintf+0x342>
    52aa:	b6 01       	movw	r22, r12
    52ac:	80 e2       	ldi	r24, 0x20	; 32
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	c9 d4       	rcall	.+2450   	; 0x5c44 <fputc>
    52b2:	b3 94       	inc	r11
    52b4:	f8 cf       	rjmp	.-16     	; 0x52a6 <vfprintf+0x328>
    52b6:	b2 14       	cp	r11, r2
    52b8:	18 f4       	brcc	.+6      	; 0x52c0 <vfprintf+0x342>
    52ba:	2b 18       	sub	r2, r11
    52bc:	02 c0       	rjmp	.+4      	; 0x52c2 <vfprintf+0x344>
    52be:	98 2c       	mov	r9, r8
    52c0:	21 2c       	mov	r2, r1
    52c2:	a4 fe       	sbrs	r10, 4
    52c4:	0f c0       	rjmp	.+30     	; 0x52e4 <vfprintf+0x366>
    52c6:	b6 01       	movw	r22, r12
    52c8:	80 e3       	ldi	r24, 0x30	; 48
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	bb d4       	rcall	.+2422   	; 0x5c44 <fputc>
    52ce:	a2 fe       	sbrs	r10, 2
    52d0:	16 c0       	rjmp	.+44     	; 0x52fe <vfprintf+0x380>
    52d2:	a1 fc       	sbrc	r10, 1
    52d4:	03 c0       	rjmp	.+6      	; 0x52dc <vfprintf+0x35e>
    52d6:	88 e7       	ldi	r24, 0x78	; 120
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	02 c0       	rjmp	.+4      	; 0x52e0 <vfprintf+0x362>
    52dc:	88 e5       	ldi	r24, 0x58	; 88
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	b6 01       	movw	r22, r12
    52e2:	0c c0       	rjmp	.+24     	; 0x52fc <vfprintf+0x37e>
    52e4:	8a 2d       	mov	r24, r10
    52e6:	86 78       	andi	r24, 0x86	; 134
    52e8:	51 f0       	breq	.+20     	; 0x52fe <vfprintf+0x380>
    52ea:	a1 fe       	sbrs	r10, 1
    52ec:	02 c0       	rjmp	.+4      	; 0x52f2 <vfprintf+0x374>
    52ee:	8b e2       	ldi	r24, 0x2B	; 43
    52f0:	01 c0       	rjmp	.+2      	; 0x52f4 <vfprintf+0x376>
    52f2:	80 e2       	ldi	r24, 0x20	; 32
    52f4:	a7 fc       	sbrc	r10, 7
    52f6:	8d e2       	ldi	r24, 0x2D	; 45
    52f8:	b6 01       	movw	r22, r12
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	a3 d4       	rcall	.+2374   	; 0x5c44 <fputc>
    52fe:	89 14       	cp	r8, r9
    5300:	30 f4       	brcc	.+12     	; 0x530e <vfprintf+0x390>
    5302:	b6 01       	movw	r22, r12
    5304:	80 e3       	ldi	r24, 0x30	; 48
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	9d d4       	rcall	.+2362   	; 0x5c44 <fputc>
    530a:	9a 94       	dec	r9
    530c:	f8 cf       	rjmp	.-16     	; 0x52fe <vfprintf+0x380>
    530e:	8a 94       	dec	r8
    5310:	f3 01       	movw	r30, r6
    5312:	e8 0d       	add	r30, r8
    5314:	f1 1d       	adc	r31, r1
    5316:	80 81       	ld	r24, Z
    5318:	b6 01       	movw	r22, r12
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	93 d4       	rcall	.+2342   	; 0x5c44 <fputc>
    531e:	81 10       	cpse	r8, r1
    5320:	f6 cf       	rjmp	.-20     	; 0x530e <vfprintf+0x390>
    5322:	22 20       	and	r2, r2
    5324:	09 f4       	brne	.+2      	; 0x5328 <vfprintf+0x3aa>
    5326:	4e ce       	rjmp	.-868    	; 0x4fc4 <vfprintf+0x46>
    5328:	b6 01       	movw	r22, r12
    532a:	80 e2       	ldi	r24, 0x20	; 32
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	8a d4       	rcall	.+2324   	; 0x5c44 <fputc>
    5330:	2a 94       	dec	r2
    5332:	f7 cf       	rjmp	.-18     	; 0x5322 <vfprintf+0x3a4>
    5334:	f6 01       	movw	r30, r12
    5336:	86 81       	ldd	r24, Z+6	; 0x06
    5338:	97 81       	ldd	r25, Z+7	; 0x07
    533a:	02 c0       	rjmp	.+4      	; 0x5340 <vfprintf+0x3c2>
    533c:	8f ef       	ldi	r24, 0xFF	; 255
    533e:	9f ef       	ldi	r25, 0xFF	; 255
    5340:	2b 96       	adiw	r28, 0x0b	; 11
    5342:	cd bf       	out	0x3d, r28	; 61
    5344:	de bf       	out	0x3e, r29	; 62
    5346:	df 91       	pop	r29
    5348:	cf 91       	pop	r28
    534a:	1f 91       	pop	r17
    534c:	0f 91       	pop	r16
    534e:	ff 90       	pop	r15
    5350:	ef 90       	pop	r14
    5352:	df 90       	pop	r13
    5354:	cf 90       	pop	r12
    5356:	bf 90       	pop	r11
    5358:	af 90       	pop	r10
    535a:	9f 90       	pop	r9
    535c:	8f 90       	pop	r8
    535e:	7f 90       	pop	r7
    5360:	6f 90       	pop	r6
    5362:	5f 90       	pop	r5
    5364:	4f 90       	pop	r4
    5366:	3f 90       	pop	r3
    5368:	2f 90       	pop	r2
    536a:	08 95       	ret

0000536c <putval>:
    536c:	20 fd       	sbrc	r18, 0
    536e:	09 c0       	rjmp	.+18     	; 0x5382 <putval+0x16>
    5370:	fc 01       	movw	r30, r24
    5372:	23 fd       	sbrc	r18, 3
    5374:	05 c0       	rjmp	.+10     	; 0x5380 <putval+0x14>
    5376:	22 ff       	sbrs	r18, 2
    5378:	02 c0       	rjmp	.+4      	; 0x537e <putval+0x12>
    537a:	73 83       	std	Z+3, r23	; 0x03
    537c:	62 83       	std	Z+2, r22	; 0x02
    537e:	51 83       	std	Z+1, r21	; 0x01
    5380:	40 83       	st	Z, r20
    5382:	08 95       	ret

00005384 <mulacc>:
    5384:	44 fd       	sbrc	r20, 4
    5386:	17 c0       	rjmp	.+46     	; 0x53b6 <mulacc+0x32>
    5388:	46 fd       	sbrc	r20, 6
    538a:	17 c0       	rjmp	.+46     	; 0x53ba <mulacc+0x36>
    538c:	ab 01       	movw	r20, r22
    538e:	bc 01       	movw	r22, r24
    5390:	da 01       	movw	r26, r20
    5392:	fb 01       	movw	r30, r22
    5394:	aa 0f       	add	r26, r26
    5396:	bb 1f       	adc	r27, r27
    5398:	ee 1f       	adc	r30, r30
    539a:	ff 1f       	adc	r31, r31
    539c:	10 94       	com	r1
    539e:	d1 f7       	brne	.-12     	; 0x5394 <mulacc+0x10>
    53a0:	4a 0f       	add	r20, r26
    53a2:	5b 1f       	adc	r21, r27
    53a4:	6e 1f       	adc	r22, r30
    53a6:	7f 1f       	adc	r23, r31
    53a8:	cb 01       	movw	r24, r22
    53aa:	ba 01       	movw	r22, r20
    53ac:	66 0f       	add	r22, r22
    53ae:	77 1f       	adc	r23, r23
    53b0:	88 1f       	adc	r24, r24
    53b2:	99 1f       	adc	r25, r25
    53b4:	09 c0       	rjmp	.+18     	; 0x53c8 <mulacc+0x44>
    53b6:	33 e0       	ldi	r19, 0x03	; 3
    53b8:	01 c0       	rjmp	.+2      	; 0x53bc <mulacc+0x38>
    53ba:	34 e0       	ldi	r19, 0x04	; 4
    53bc:	66 0f       	add	r22, r22
    53be:	77 1f       	adc	r23, r23
    53c0:	88 1f       	adc	r24, r24
    53c2:	99 1f       	adc	r25, r25
    53c4:	31 50       	subi	r19, 0x01	; 1
    53c6:	d1 f7       	brne	.-12     	; 0x53bc <mulacc+0x38>
    53c8:	62 0f       	add	r22, r18
    53ca:	71 1d       	adc	r23, r1
    53cc:	81 1d       	adc	r24, r1
    53ce:	91 1d       	adc	r25, r1
    53d0:	08 95       	ret

000053d2 <skip_spaces>:
    53d2:	0f 93       	push	r16
    53d4:	1f 93       	push	r17
    53d6:	cf 93       	push	r28
    53d8:	df 93       	push	r29
    53da:	8c 01       	movw	r16, r24
    53dc:	c8 01       	movw	r24, r16
    53de:	f4 d3       	rcall	.+2024   	; 0x5bc8 <fgetc>
    53e0:	ec 01       	movw	r28, r24
    53e2:	97 fd       	sbrc	r25, 7
    53e4:	06 c0       	rjmp	.+12     	; 0x53f2 <skip_spaces+0x20>
    53e6:	c0 d3       	rcall	.+1920   	; 0x5b68 <isspace>
    53e8:	89 2b       	or	r24, r25
    53ea:	c1 f7       	brne	.-16     	; 0x53dc <skip_spaces+0xa>
    53ec:	b8 01       	movw	r22, r16
    53ee:	ce 01       	movw	r24, r28
    53f0:	65 d4       	rcall	.+2250   	; 0x5cbc <ungetc>
    53f2:	ce 01       	movw	r24, r28
    53f4:	df 91       	pop	r29
    53f6:	cf 91       	pop	r28
    53f8:	1f 91       	pop	r17
    53fa:	0f 91       	pop	r16
    53fc:	08 95       	ret

000053fe <conv_int>:
    53fe:	8f 92       	push	r8
    5400:	9f 92       	push	r9
    5402:	af 92       	push	r10
    5404:	bf 92       	push	r11
    5406:	ef 92       	push	r14
    5408:	ff 92       	push	r15
    540a:	0f 93       	push	r16
    540c:	1f 93       	push	r17
    540e:	cf 93       	push	r28
    5410:	df 93       	push	r29
    5412:	8c 01       	movw	r16, r24
    5414:	d6 2f       	mov	r29, r22
    5416:	7a 01       	movw	r14, r20
    5418:	b2 2e       	mov	r11, r18
    541a:	d6 d3       	rcall	.+1964   	; 0x5bc8 <fgetc>
    541c:	9c 01       	movw	r18, r24
    541e:	33 27       	eor	r19, r19
    5420:	2b 32       	cpi	r18, 0x2B	; 43
    5422:	31 05       	cpc	r19, r1
    5424:	31 f0       	breq	.+12     	; 0x5432 <conv_int+0x34>
    5426:	2d 32       	cpi	r18, 0x2D	; 45
    5428:	31 05       	cpc	r19, r1
    542a:	59 f4       	brne	.+22     	; 0x5442 <conv_int+0x44>
    542c:	8b 2d       	mov	r24, r11
    542e:	80 68       	ori	r24, 0x80	; 128
    5430:	b8 2e       	mov	r11, r24
    5432:	d1 50       	subi	r29, 0x01	; 1
    5434:	11 f4       	brne	.+4      	; 0x543a <conv_int+0x3c>
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	61 c0       	rjmp	.+194    	; 0x54fc <conv_int+0xfe>
    543a:	c8 01       	movw	r24, r16
    543c:	c5 d3       	rcall	.+1930   	; 0x5bc8 <fgetc>
    543e:	97 fd       	sbrc	r25, 7
    5440:	fa cf       	rjmp	.-12     	; 0x5436 <conv_int+0x38>
    5442:	cb 2d       	mov	r28, r11
    5444:	cd 7f       	andi	r28, 0xFD	; 253
    5446:	2b 2d       	mov	r18, r11
    5448:	20 73       	andi	r18, 0x30	; 48
    544a:	f9 f4       	brne	.+62     	; 0x548a <conv_int+0x8c>
    544c:	80 33       	cpi	r24, 0x30	; 48
    544e:	e9 f4       	brne	.+58     	; 0x548a <conv_int+0x8c>
    5450:	aa 24       	eor	r10, r10
    5452:	aa 94       	dec	r10
    5454:	ad 0e       	add	r10, r29
    5456:	09 f4       	brne	.+2      	; 0x545a <conv_int+0x5c>
    5458:	3e c0       	rjmp	.+124    	; 0x54d6 <conv_int+0xd8>
    545a:	c8 01       	movw	r24, r16
    545c:	b5 d3       	rcall	.+1898   	; 0x5bc8 <fgetc>
    545e:	97 fd       	sbrc	r25, 7
    5460:	3a c0       	rjmp	.+116    	; 0x54d6 <conv_int+0xd8>
    5462:	9c 01       	movw	r18, r24
    5464:	2f 7d       	andi	r18, 0xDF	; 223
    5466:	33 27       	eor	r19, r19
    5468:	28 35       	cpi	r18, 0x58	; 88
    546a:	31 05       	cpc	r19, r1
    546c:	41 f4       	brne	.+16     	; 0x547e <conv_int+0x80>
    546e:	c2 64       	ori	r28, 0x42	; 66
    5470:	d2 50       	subi	r29, 0x02	; 2
    5472:	89 f1       	breq	.+98     	; 0x54d6 <conv_int+0xd8>
    5474:	c8 01       	movw	r24, r16
    5476:	a8 d3       	rcall	.+1872   	; 0x5bc8 <fgetc>
    5478:	97 ff       	sbrs	r25, 7
    547a:	07 c0       	rjmp	.+14     	; 0x548a <conv_int+0x8c>
    547c:	2c c0       	rjmp	.+88     	; 0x54d6 <conv_int+0xd8>
    547e:	b6 fe       	sbrs	r11, 6
    5480:	02 c0       	rjmp	.+4      	; 0x5486 <conv_int+0x88>
    5482:	c2 60       	ori	r28, 0x02	; 2
    5484:	01 c0       	rjmp	.+2      	; 0x5488 <conv_int+0x8a>
    5486:	c2 61       	ori	r28, 0x12	; 18
    5488:	da 2d       	mov	r29, r10
    548a:	81 2c       	mov	r8, r1
    548c:	91 2c       	mov	r9, r1
    548e:	54 01       	movw	r10, r8
    5490:	20 ed       	ldi	r18, 0xD0	; 208
    5492:	28 0f       	add	r18, r24
    5494:	28 30       	cpi	r18, 0x08	; 8
    5496:	78 f0       	brcs	.+30     	; 0x54b6 <conv_int+0xb8>
    5498:	c4 ff       	sbrs	r28, 4
    549a:	03 c0       	rjmp	.+6      	; 0x54a2 <conv_int+0xa4>
    549c:	b8 01       	movw	r22, r16
    549e:	0e d4       	rcall	.+2076   	; 0x5cbc <ungetc>
    54a0:	17 c0       	rjmp	.+46     	; 0x54d0 <conv_int+0xd2>
    54a2:	2a 30       	cpi	r18, 0x0A	; 10
    54a4:	40 f0       	brcs	.+16     	; 0x54b6 <conv_int+0xb8>
    54a6:	c6 ff       	sbrs	r28, 6
    54a8:	f9 cf       	rjmp	.-14     	; 0x549c <conv_int+0x9e>
    54aa:	2f 7d       	andi	r18, 0xDF	; 223
    54ac:	3f ee       	ldi	r19, 0xEF	; 239
    54ae:	32 0f       	add	r19, r18
    54b0:	36 30       	cpi	r19, 0x06	; 6
    54b2:	a0 f7       	brcc	.-24     	; 0x549c <conv_int+0x9e>
    54b4:	27 50       	subi	r18, 0x07	; 7
    54b6:	4c 2f       	mov	r20, r28
    54b8:	c5 01       	movw	r24, r10
    54ba:	b4 01       	movw	r22, r8
    54bc:	63 df       	rcall	.-314    	; 0x5384 <mulacc>
    54be:	4b 01       	movw	r8, r22
    54c0:	5c 01       	movw	r10, r24
    54c2:	c2 60       	ori	r28, 0x02	; 2
    54c4:	d1 50       	subi	r29, 0x01	; 1
    54c6:	51 f0       	breq	.+20     	; 0x54dc <conv_int+0xde>
    54c8:	c8 01       	movw	r24, r16
    54ca:	7e d3       	rcall	.+1788   	; 0x5bc8 <fgetc>
    54cc:	97 ff       	sbrs	r25, 7
    54ce:	e0 cf       	rjmp	.-64     	; 0x5490 <conv_int+0x92>
    54d0:	c1 fd       	sbrc	r28, 1
    54d2:	04 c0       	rjmp	.+8      	; 0x54dc <conv_int+0xde>
    54d4:	b0 cf       	rjmp	.-160    	; 0x5436 <conv_int+0x38>
    54d6:	81 2c       	mov	r8, r1
    54d8:	91 2c       	mov	r9, r1
    54da:	54 01       	movw	r10, r8
    54dc:	c7 ff       	sbrs	r28, 7
    54de:	08 c0       	rjmp	.+16     	; 0x54f0 <conv_int+0xf2>
    54e0:	b0 94       	com	r11
    54e2:	a0 94       	com	r10
    54e4:	90 94       	com	r9
    54e6:	80 94       	com	r8
    54e8:	81 1c       	adc	r8, r1
    54ea:	91 1c       	adc	r9, r1
    54ec:	a1 1c       	adc	r10, r1
    54ee:	b1 1c       	adc	r11, r1
    54f0:	2c 2f       	mov	r18, r28
    54f2:	b5 01       	movw	r22, r10
    54f4:	a4 01       	movw	r20, r8
    54f6:	c7 01       	movw	r24, r14
    54f8:	39 df       	rcall	.-398    	; 0x536c <putval>
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	df 91       	pop	r29
    54fe:	cf 91       	pop	r28
    5500:	1f 91       	pop	r17
    5502:	0f 91       	pop	r16
    5504:	ff 90       	pop	r15
    5506:	ef 90       	pop	r14
    5508:	bf 90       	pop	r11
    550a:	af 90       	pop	r10
    550c:	9f 90       	pop	r9
    550e:	8f 90       	pop	r8
    5510:	08 95       	ret

00005512 <conv_brk>:
    5512:	5f 92       	push	r5
    5514:	6f 92       	push	r6
    5516:	7f 92       	push	r7
    5518:	8f 92       	push	r8
    551a:	9f 92       	push	r9
    551c:	af 92       	push	r10
    551e:	bf 92       	push	r11
    5520:	cf 92       	push	r12
    5522:	df 92       	push	r13
    5524:	ef 92       	push	r14
    5526:	ff 92       	push	r15
    5528:	0f 93       	push	r16
    552a:	1f 93       	push	r17
    552c:	cf 93       	push	r28
    552e:	df 93       	push	r29
    5530:	cd b7       	in	r28, 0x3d	; 61
    5532:	de b7       	in	r29, 0x3e	; 62
    5534:	a0 97       	sbiw	r28, 0x20	; 32
    5536:	cd bf       	out	0x3d, r28	; 61
    5538:	de bf       	out	0x3e, r29	; 62
    553a:	5c 01       	movw	r10, r24
    553c:	96 2e       	mov	r9, r22
    553e:	7a 01       	movw	r14, r20
    5540:	f9 01       	movw	r30, r18
    5542:	8e 01       	movw	r16, r28
    5544:	0f 5f       	subi	r16, 0xFF	; 255
    5546:	1f 4f       	sbci	r17, 0xFF	; 255
    5548:	68 01       	movw	r12, r16
    554a:	80 e2       	ldi	r24, 0x20	; 32
    554c:	d8 01       	movw	r26, r16
    554e:	1d 92       	st	X+, r1
    5550:	8a 95       	dec	r24
    5552:	e9 f7       	brne	.-6      	; 0x554e <conv_brk+0x3c>
    5554:	d5 01       	movw	r26, r10
    5556:	13 96       	adiw	r26, 0x03	; 3
    5558:	8c 90       	ld	r8, X
    555a:	80 e0       	ldi	r24, 0x00	; 0
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	61 2c       	mov	r6, r1
    5560:	71 2c       	mov	r7, r1
    5562:	30 e0       	ldi	r19, 0x00	; 0
    5564:	61 e0       	ldi	r22, 0x01	; 1
    5566:	70 e0       	ldi	r23, 0x00	; 0
    5568:	83 fc       	sbrc	r8, 3
    556a:	25 91       	lpm	r18, Z+
    556c:	83 fe       	sbrs	r8, 3
    556e:	21 91       	ld	r18, Z+
    5570:	8f 01       	movw	r16, r30
    5572:	52 2e       	mov	r5, r18
    5574:	21 11       	cpse	r18, r1
    5576:	03 c0       	rjmp	.+6      	; 0x557e <conv_brk+0x6c>
    5578:	80 e0       	ldi	r24, 0x00	; 0
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	90 c0       	rjmp	.+288    	; 0x569e <conv_brk+0x18c>
    557e:	2e 35       	cpi	r18, 0x5E	; 94
    5580:	11 f4       	brne	.+4      	; 0x5586 <conv_brk+0x74>
    5582:	00 97       	sbiw	r24, 0x00	; 0
    5584:	51 f1       	breq	.+84     	; 0x55da <conv_brk+0xc8>
    5586:	43 2f       	mov	r20, r19
    5588:	50 e0       	ldi	r21, 0x00	; 0
    558a:	48 17       	cp	r20, r24
    558c:	59 07       	cpc	r21, r25
    558e:	3c f4       	brge	.+14     	; 0x559e <conv_brk+0x8c>
    5590:	2d 35       	cpi	r18, 0x5D	; 93
    5592:	59 f1       	breq	.+86     	; 0x55ea <conv_brk+0xd8>
    5594:	2d 32       	cpi	r18, 0x2D	; 45
    5596:	19 f4       	brne	.+6      	; 0x559e <conv_brk+0x8c>
    5598:	77 20       	and	r7, r7
    559a:	09 f1       	breq	.+66     	; 0x55de <conv_brk+0xcc>
    559c:	03 c0       	rjmp	.+6      	; 0x55a4 <conv_brk+0x92>
    559e:	77 20       	and	r7, r7
    55a0:	09 f4       	brne	.+2      	; 0x55a4 <conv_brk+0x92>
    55a2:	68 c0       	rjmp	.+208    	; 0x5674 <conv_brk+0x162>
    55a4:	45 2d       	mov	r20, r5
    55a6:	46 95       	lsr	r20
    55a8:	46 95       	lsr	r20
    55aa:	46 95       	lsr	r20
    55ac:	d6 01       	movw	r26, r12
    55ae:	a4 0f       	add	r26, r20
    55b0:	b1 1d       	adc	r27, r1
    55b2:	45 2d       	mov	r20, r5
    55b4:	47 70       	andi	r20, 0x07	; 7
    55b6:	8b 01       	movw	r16, r22
    55b8:	02 c0       	rjmp	.+4      	; 0x55be <conv_brk+0xac>
    55ba:	00 0f       	add	r16, r16
    55bc:	11 1f       	adc	r17, r17
    55be:	4a 95       	dec	r20
    55c0:	e2 f7       	brpl	.-8      	; 0x55ba <conv_brk+0xa8>
    55c2:	a8 01       	movw	r20, r16
    55c4:	5c 91       	ld	r21, X
    55c6:	45 2b       	or	r20, r21
    55c8:	4c 93       	st	X, r20
    55ca:	65 14       	cp	r6, r5
    55cc:	59 f0       	breq	.+22     	; 0x55e4 <conv_brk+0xd2>
    55ce:	56 14       	cp	r5, r6
    55d0:	10 f4       	brcc	.+4      	; 0x55d6 <conv_brk+0xc4>
    55d2:	53 94       	inc	r5
    55d4:	e7 cf       	rjmp	.-50     	; 0x55a4 <conv_brk+0x92>
    55d6:	5a 94       	dec	r5
    55d8:	e5 cf       	rjmp	.-54     	; 0x55a4 <conv_brk+0x92>
    55da:	31 e0       	ldi	r19, 0x01	; 1
    55dc:	04 c0       	rjmp	.+8      	; 0x55e6 <conv_brk+0xd4>
    55de:	77 24       	eor	r7, r7
    55e0:	73 94       	inc	r7
    55e2:	01 c0       	rjmp	.+2      	; 0x55e6 <conv_brk+0xd4>
    55e4:	71 2c       	mov	r7, r1
    55e6:	01 96       	adiw	r24, 0x01	; 1
    55e8:	bf cf       	rjmp	.-130    	; 0x5568 <conv_brk+0x56>
    55ea:	77 20       	and	r7, r7
    55ec:	19 f0       	breq	.+6      	; 0x55f4 <conv_brk+0xe2>
    55ee:	8e 81       	ldd	r24, Y+6	; 0x06
    55f0:	80 62       	ori	r24, 0x20	; 32
    55f2:	8e 83       	std	Y+6, r24	; 0x06
    55f4:	31 11       	cpse	r19, r1
    55f6:	03 c0       	rjmp	.+6      	; 0x55fe <conv_brk+0xec>
    55f8:	88 24       	eor	r8, r8
    55fa:	83 94       	inc	r8
    55fc:	17 c0       	rjmp	.+46     	; 0x562c <conv_brk+0x11a>
    55fe:	f6 01       	movw	r30, r12
    5600:	9e 01       	movw	r18, r28
    5602:	2f 5d       	subi	r18, 0xDF	; 223
    5604:	3f 4f       	sbci	r19, 0xFF	; 255
    5606:	80 81       	ld	r24, Z
    5608:	80 95       	com	r24
    560a:	81 93       	st	Z+, r24
    560c:	2e 17       	cp	r18, r30
    560e:	3f 07       	cpc	r19, r31
    5610:	d1 f7       	brne	.-12     	; 0x5606 <conv_brk+0xf4>
    5612:	f2 cf       	rjmp	.-28     	; 0x55f8 <conv_brk+0xe6>
    5614:	e1 14       	cp	r14, r1
    5616:	f1 04       	cpc	r15, r1
    5618:	29 f0       	breq	.+10     	; 0x5624 <conv_brk+0x112>
    561a:	d7 01       	movw	r26, r14
    561c:	8c 93       	st	X, r24
    561e:	f7 01       	movw	r30, r14
    5620:	31 96       	adiw	r30, 0x01	; 1
    5622:	7f 01       	movw	r14, r30
    5624:	9a 94       	dec	r9
    5626:	81 2c       	mov	r8, r1
    5628:	99 20       	and	r9, r9
    562a:	e9 f0       	breq	.+58     	; 0x5666 <conv_brk+0x154>
    562c:	c5 01       	movw	r24, r10
    562e:	cc d2       	rcall	.+1432   	; 0x5bc8 <fgetc>
    5630:	97 fd       	sbrc	r25, 7
    5632:	17 c0       	rjmp	.+46     	; 0x5662 <conv_brk+0x150>
    5634:	fc 01       	movw	r30, r24
    5636:	ff 27       	eor	r31, r31
    5638:	23 e0       	ldi	r18, 0x03	; 3
    563a:	f5 95       	asr	r31
    563c:	e7 95       	ror	r30
    563e:	2a 95       	dec	r18
    5640:	e1 f7       	brne	.-8      	; 0x563a <conv_brk+0x128>
    5642:	ec 0d       	add	r30, r12
    5644:	fd 1d       	adc	r31, r13
    5646:	20 81       	ld	r18, Z
    5648:	30 e0       	ldi	r19, 0x00	; 0
    564a:	ac 01       	movw	r20, r24
    564c:	47 70       	andi	r20, 0x07	; 7
    564e:	55 27       	eor	r21, r21
    5650:	02 c0       	rjmp	.+4      	; 0x5656 <conv_brk+0x144>
    5652:	35 95       	asr	r19
    5654:	27 95       	ror	r18
    5656:	4a 95       	dec	r20
    5658:	e2 f7       	brpl	.-8      	; 0x5652 <conv_brk+0x140>
    565a:	20 fd       	sbrc	r18, 0
    565c:	db cf       	rjmp	.-74     	; 0x5614 <conv_brk+0x102>
    565e:	b5 01       	movw	r22, r10
    5660:	2d d3       	rcall	.+1626   	; 0x5cbc <ungetc>
    5662:	81 10       	cpse	r8, r1
    5664:	89 cf       	rjmp	.-238    	; 0x5578 <conv_brk+0x66>
    5666:	e1 14       	cp	r14, r1
    5668:	f1 04       	cpc	r15, r1
    566a:	11 f0       	breq	.+4      	; 0x5670 <conv_brk+0x15e>
    566c:	d7 01       	movw	r26, r14
    566e:	1c 92       	st	X, r1
    5670:	c8 01       	movw	r24, r16
    5672:	15 c0       	rjmp	.+42     	; 0x569e <conv_brk+0x18c>
    5674:	42 2f       	mov	r20, r18
    5676:	46 95       	lsr	r20
    5678:	46 95       	lsr	r20
    567a:	46 95       	lsr	r20
    567c:	d6 01       	movw	r26, r12
    567e:	a4 0f       	add	r26, r20
    5680:	b1 1d       	adc	r27, r1
    5682:	42 2f       	mov	r20, r18
    5684:	47 70       	andi	r20, 0x07	; 7
    5686:	8b 01       	movw	r16, r22
    5688:	02 c0       	rjmp	.+4      	; 0x568e <conv_brk+0x17c>
    568a:	00 0f       	add	r16, r16
    568c:	11 1f       	adc	r17, r17
    568e:	4a 95       	dec	r20
    5690:	e2 f7       	brpl	.-8      	; 0x568a <conv_brk+0x178>
    5692:	a8 01       	movw	r20, r16
    5694:	5c 91       	ld	r21, X
    5696:	45 2b       	or	r20, r21
    5698:	4c 93       	st	X, r20
    569a:	62 2e       	mov	r6, r18
    569c:	a4 cf       	rjmp	.-184    	; 0x55e6 <conv_brk+0xd4>
    569e:	a0 96       	adiw	r28, 0x20	; 32
    56a0:	cd bf       	out	0x3d, r28	; 61
    56a2:	de bf       	out	0x3e, r29	; 62
    56a4:	df 91       	pop	r29
    56a6:	cf 91       	pop	r28
    56a8:	1f 91       	pop	r17
    56aa:	0f 91       	pop	r16
    56ac:	ff 90       	pop	r15
    56ae:	ef 90       	pop	r14
    56b0:	df 90       	pop	r13
    56b2:	cf 90       	pop	r12
    56b4:	bf 90       	pop	r11
    56b6:	af 90       	pop	r10
    56b8:	9f 90       	pop	r9
    56ba:	8f 90       	pop	r8
    56bc:	7f 90       	pop	r7
    56be:	6f 90       	pop	r6
    56c0:	5f 90       	pop	r5
    56c2:	08 95       	ret

000056c4 <vfscanf>:
    56c4:	5f 92       	push	r5
    56c6:	6f 92       	push	r6
    56c8:	7f 92       	push	r7
    56ca:	8f 92       	push	r8
    56cc:	9f 92       	push	r9
    56ce:	af 92       	push	r10
    56d0:	bf 92       	push	r11
    56d2:	cf 92       	push	r12
    56d4:	df 92       	push	r13
    56d6:	ef 92       	push	r14
    56d8:	ff 92       	push	r15
    56da:	0f 93       	push	r16
    56dc:	1f 93       	push	r17
    56de:	cf 93       	push	r28
    56e0:	df 93       	push	r29
    56e2:	6c 01       	movw	r12, r24
    56e4:	eb 01       	movw	r28, r22
    56e6:	5a 01       	movw	r10, r20
    56e8:	fc 01       	movw	r30, r24
    56ea:	16 82       	std	Z+6, r1	; 0x06
    56ec:	17 82       	std	Z+7, r1	; 0x07
    56ee:	51 2c       	mov	r5, r1
    56f0:	f6 01       	movw	r30, r12
    56f2:	e3 80       	ldd	r14, Z+3	; 0x03
    56f4:	fe 01       	movw	r30, r28
    56f6:	e3 fc       	sbrc	r14, 3
    56f8:	85 91       	lpm	r24, Z+
    56fa:	e3 fe       	sbrs	r14, 3
    56fc:	81 91       	ld	r24, Z+
    56fe:	18 2f       	mov	r17, r24
    5700:	ef 01       	movw	r28, r30
    5702:	88 23       	and	r24, r24
    5704:	09 f4       	brne	.+2      	; 0x5708 <vfscanf+0x44>
    5706:	e0 c0       	rjmp	.+448    	; 0x58c8 <vfscanf+0x204>
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	2e d2       	rcall	.+1116   	; 0x5b68 <isspace>
    570c:	89 2b       	or	r24, r25
    570e:	19 f0       	breq	.+6      	; 0x5716 <vfscanf+0x52>
    5710:	c6 01       	movw	r24, r12
    5712:	5f de       	rcall	.-834    	; 0x53d2 <skip_spaces>
    5714:	ed cf       	rjmp	.-38     	; 0x56f0 <vfscanf+0x2c>
    5716:	15 32       	cpi	r17, 0x25	; 37
    5718:	41 f4       	brne	.+16     	; 0x572a <vfscanf+0x66>
    571a:	fe 01       	movw	r30, r28
    571c:	e3 fc       	sbrc	r14, 3
    571e:	15 91       	lpm	r17, Z+
    5720:	e3 fe       	sbrs	r14, 3
    5722:	11 91       	ld	r17, Z+
    5724:	ef 01       	movw	r28, r30
    5726:	15 32       	cpi	r17, 0x25	; 37
    5728:	71 f4       	brne	.+28     	; 0x5746 <vfscanf+0x82>
    572a:	c6 01       	movw	r24, r12
    572c:	4d d2       	rcall	.+1178   	; 0x5bc8 <fgetc>
    572e:	97 fd       	sbrc	r25, 7
    5730:	c9 c0       	rjmp	.+402    	; 0x58c4 <vfscanf+0x200>
    5732:	41 2f       	mov	r20, r17
    5734:	50 e0       	ldi	r21, 0x00	; 0
    5736:	9c 01       	movw	r18, r24
    5738:	33 27       	eor	r19, r19
    573a:	24 17       	cp	r18, r20
    573c:	35 07       	cpc	r19, r21
    573e:	c1 f2       	breq	.-80     	; 0x56f0 <vfscanf+0x2c>
    5740:	b6 01       	movw	r22, r12
    5742:	bc d2       	rcall	.+1400   	; 0x5cbc <ungetc>
    5744:	c1 c0       	rjmp	.+386    	; 0x58c8 <vfscanf+0x204>
    5746:	1a 32       	cpi	r17, 0x2A	; 42
    5748:	39 f4       	brne	.+14     	; 0x5758 <vfscanf+0x94>
    574a:	e3 fc       	sbrc	r14, 3
    574c:	15 91       	lpm	r17, Z+
    574e:	e3 fe       	sbrs	r14, 3
    5750:	11 91       	ld	r17, Z+
    5752:	ef 01       	movw	r28, r30
    5754:	01 e0       	ldi	r16, 0x01	; 1
    5756:	01 c0       	rjmp	.+2      	; 0x575a <vfscanf+0x96>
    5758:	00 e0       	ldi	r16, 0x00	; 0
    575a:	f1 2c       	mov	r15, r1
    575c:	20 ed       	ldi	r18, 0xD0	; 208
    575e:	21 0f       	add	r18, r17
    5760:	2a 30       	cpi	r18, 0x0A	; 10
    5762:	78 f4       	brcc	.+30     	; 0x5782 <vfscanf+0xbe>
    5764:	02 60       	ori	r16, 0x02	; 2
    5766:	6f 2d       	mov	r22, r15
    5768:	70 e0       	ldi	r23, 0x00	; 0
    576a:	80 e0       	ldi	r24, 0x00	; 0
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	40 e2       	ldi	r20, 0x20	; 32
    5770:	09 de       	rcall	.-1006   	; 0x5384 <mulacc>
    5772:	f6 2e       	mov	r15, r22
    5774:	fe 01       	movw	r30, r28
    5776:	e3 fc       	sbrc	r14, 3
    5778:	15 91       	lpm	r17, Z+
    577a:	e3 fe       	sbrs	r14, 3
    577c:	11 91       	ld	r17, Z+
    577e:	ef 01       	movw	r28, r30
    5780:	ed cf       	rjmp	.-38     	; 0x575c <vfscanf+0x98>
    5782:	01 ff       	sbrs	r16, 1
    5784:	03 c0       	rjmp	.+6      	; 0x578c <vfscanf+0xc8>
    5786:	f1 10       	cpse	r15, r1
    5788:	03 c0       	rjmp	.+6      	; 0x5790 <vfscanf+0xcc>
    578a:	9e c0       	rjmp	.+316    	; 0x58c8 <vfscanf+0x204>
    578c:	ff 24       	eor	r15, r15
    578e:	fa 94       	dec	r15
    5790:	18 36       	cpi	r17, 0x68	; 104
    5792:	19 f0       	breq	.+6      	; 0x579a <vfscanf+0xd6>
    5794:	1c 36       	cpi	r17, 0x6C	; 108
    5796:	51 f0       	breq	.+20     	; 0x57ac <vfscanf+0xe8>
    5798:	10 c0       	rjmp	.+32     	; 0x57ba <vfscanf+0xf6>
    579a:	fe 01       	movw	r30, r28
    579c:	e3 fc       	sbrc	r14, 3
    579e:	15 91       	lpm	r17, Z+
    57a0:	e3 fe       	sbrs	r14, 3
    57a2:	11 91       	ld	r17, Z+
    57a4:	ef 01       	movw	r28, r30
    57a6:	18 36       	cpi	r17, 0x68	; 104
    57a8:	41 f4       	brne	.+16     	; 0x57ba <vfscanf+0xf6>
    57aa:	08 60       	ori	r16, 0x08	; 8
    57ac:	04 60       	ori	r16, 0x04	; 4
    57ae:	fe 01       	movw	r30, r28
    57b0:	e3 fc       	sbrc	r14, 3
    57b2:	15 91       	lpm	r17, Z+
    57b4:	e3 fe       	sbrs	r14, 3
    57b6:	11 91       	ld	r17, Z+
    57b8:	ef 01       	movw	r28, r30
    57ba:	11 23       	and	r17, r17
    57bc:	09 f4       	brne	.+2      	; 0x57c0 <vfscanf+0xfc>
    57be:	84 c0       	rjmp	.+264    	; 0x58c8 <vfscanf+0x204>
    57c0:	61 2f       	mov	r22, r17
    57c2:	70 e0       	ldi	r23, 0x00	; 0
    57c4:	84 ea       	ldi	r24, 0xA4	; 164
    57c6:	92 e0       	ldi	r25, 0x02	; 2
    57c8:	d7 d1       	rcall	.+942    	; 0x5b78 <strchr_P>
    57ca:	89 2b       	or	r24, r25
    57cc:	09 f4       	brne	.+2      	; 0x57d0 <vfscanf+0x10c>
    57ce:	7c c0       	rjmp	.+248    	; 0x58c8 <vfscanf+0x204>
    57d0:	00 fd       	sbrc	r16, 0
    57d2:	07 c0       	rjmp	.+14     	; 0x57e2 <vfscanf+0x11e>
    57d4:	f5 01       	movw	r30, r10
    57d6:	80 80       	ld	r8, Z
    57d8:	91 80       	ldd	r9, Z+1	; 0x01
    57da:	c5 01       	movw	r24, r10
    57dc:	02 96       	adiw	r24, 0x02	; 2
    57de:	5c 01       	movw	r10, r24
    57e0:	02 c0       	rjmp	.+4      	; 0x57e6 <vfscanf+0x122>
    57e2:	81 2c       	mov	r8, r1
    57e4:	91 2c       	mov	r9, r1
    57e6:	1e 36       	cpi	r17, 0x6E	; 110
    57e8:	49 f4       	brne	.+18     	; 0x57fc <vfscanf+0x138>
    57ea:	f6 01       	movw	r30, r12
    57ec:	46 81       	ldd	r20, Z+6	; 0x06
    57ee:	57 81       	ldd	r21, Z+7	; 0x07
    57f0:	60 e0       	ldi	r22, 0x00	; 0
    57f2:	70 e0       	ldi	r23, 0x00	; 0
    57f4:	20 2f       	mov	r18, r16
    57f6:	c4 01       	movw	r24, r8
    57f8:	b9 dd       	rcall	.-1166   	; 0x536c <putval>
    57fa:	7a cf       	rjmp	.-268    	; 0x56f0 <vfscanf+0x2c>
    57fc:	13 36       	cpi	r17, 0x63	; 99
    57fe:	a1 f4       	brne	.+40     	; 0x5828 <vfscanf+0x164>
    5800:	01 fd       	sbrc	r16, 1
    5802:	02 c0       	rjmp	.+4      	; 0x5808 <vfscanf+0x144>
    5804:	ff 24       	eor	r15, r15
    5806:	f3 94       	inc	r15
    5808:	c6 01       	movw	r24, r12
    580a:	de d1       	rcall	.+956    	; 0x5bc8 <fgetc>
    580c:	97 fd       	sbrc	r25, 7
    580e:	5a c0       	rjmp	.+180    	; 0x58c4 <vfscanf+0x200>
    5810:	81 14       	cp	r8, r1
    5812:	91 04       	cpc	r9, r1
    5814:	29 f0       	breq	.+10     	; 0x5820 <vfscanf+0x15c>
    5816:	f4 01       	movw	r30, r8
    5818:	80 83       	st	Z, r24
    581a:	c4 01       	movw	r24, r8
    581c:	01 96       	adiw	r24, 0x01	; 1
    581e:	4c 01       	movw	r8, r24
    5820:	fa 94       	dec	r15
    5822:	f1 10       	cpse	r15, r1
    5824:	f1 cf       	rjmp	.-30     	; 0x5808 <vfscanf+0x144>
    5826:	4a c0       	rjmp	.+148    	; 0x58bc <vfscanf+0x1f8>
    5828:	1b 35       	cpi	r17, 0x5B	; 91
    582a:	51 f4       	brne	.+20     	; 0x5840 <vfscanf+0x17c>
    582c:	9e 01       	movw	r18, r28
    582e:	a4 01       	movw	r20, r8
    5830:	6f 2d       	mov	r22, r15
    5832:	c6 01       	movw	r24, r12
    5834:	6e de       	rcall	.-804    	; 0x5512 <conv_brk>
    5836:	ec 01       	movw	r28, r24
    5838:	89 2b       	or	r24, r25
    583a:	09 f0       	breq	.+2      	; 0x583e <vfscanf+0x17a>
    583c:	3f c0       	rjmp	.+126    	; 0x58bc <vfscanf+0x1f8>
    583e:	39 c0       	rjmp	.+114    	; 0x58b2 <vfscanf+0x1ee>
    5840:	c6 01       	movw	r24, r12
    5842:	c7 dd       	rcall	.-1138   	; 0x53d2 <skip_spaces>
    5844:	97 fd       	sbrc	r25, 7
    5846:	3e c0       	rjmp	.+124    	; 0x58c4 <vfscanf+0x200>
    5848:	1f 36       	cpi	r17, 0x6F	; 111
    584a:	49 f1       	breq	.+82     	; 0x589e <vfscanf+0x1da>
    584c:	28 f4       	brcc	.+10     	; 0x5858 <vfscanf+0x194>
    584e:	14 36       	cpi	r17, 0x64	; 100
    5850:	21 f1       	breq	.+72     	; 0x589a <vfscanf+0x1d6>
    5852:	19 36       	cpi	r17, 0x69	; 105
    5854:	39 f1       	breq	.+78     	; 0x58a4 <vfscanf+0x1e0>
    5856:	25 c0       	rjmp	.+74     	; 0x58a2 <vfscanf+0x1de>
    5858:	13 37       	cpi	r17, 0x73	; 115
    585a:	71 f0       	breq	.+28     	; 0x5878 <vfscanf+0x1b4>
    585c:	15 37       	cpi	r17, 0x75	; 117
    585e:	e9 f0       	breq	.+58     	; 0x589a <vfscanf+0x1d6>
    5860:	20 c0       	rjmp	.+64     	; 0x58a2 <vfscanf+0x1de>
    5862:	81 14       	cp	r8, r1
    5864:	91 04       	cpc	r9, r1
    5866:	29 f0       	breq	.+10     	; 0x5872 <vfscanf+0x1ae>
    5868:	f4 01       	movw	r30, r8
    586a:	60 82       	st	Z, r6
    586c:	c4 01       	movw	r24, r8
    586e:	01 96       	adiw	r24, 0x01	; 1
    5870:	4c 01       	movw	r8, r24
    5872:	fa 94       	dec	r15
    5874:	ff 20       	and	r15, r15
    5876:	59 f0       	breq	.+22     	; 0x588e <vfscanf+0x1ca>
    5878:	c6 01       	movw	r24, r12
    587a:	a6 d1       	rcall	.+844    	; 0x5bc8 <fgetc>
    587c:	3c 01       	movw	r6, r24
    587e:	97 fd       	sbrc	r25, 7
    5880:	06 c0       	rjmp	.+12     	; 0x588e <vfscanf+0x1ca>
    5882:	72 d1       	rcall	.+740    	; 0x5b68 <isspace>
    5884:	89 2b       	or	r24, r25
    5886:	69 f3       	breq	.-38     	; 0x5862 <vfscanf+0x19e>
    5888:	b6 01       	movw	r22, r12
    588a:	c3 01       	movw	r24, r6
    588c:	17 d2       	rcall	.+1070   	; 0x5cbc <ungetc>
    588e:	81 14       	cp	r8, r1
    5890:	91 04       	cpc	r9, r1
    5892:	a1 f0       	breq	.+40     	; 0x58bc <vfscanf+0x1f8>
    5894:	f4 01       	movw	r30, r8
    5896:	10 82       	st	Z, r1
    5898:	11 c0       	rjmp	.+34     	; 0x58bc <vfscanf+0x1f8>
    589a:	00 62       	ori	r16, 0x20	; 32
    589c:	03 c0       	rjmp	.+6      	; 0x58a4 <vfscanf+0x1e0>
    589e:	00 61       	ori	r16, 0x10	; 16
    58a0:	01 c0       	rjmp	.+2      	; 0x58a4 <vfscanf+0x1e0>
    58a2:	00 64       	ori	r16, 0x40	; 64
    58a4:	20 2f       	mov	r18, r16
    58a6:	a4 01       	movw	r20, r8
    58a8:	6f 2d       	mov	r22, r15
    58aa:	c6 01       	movw	r24, r12
    58ac:	a8 dd       	rcall	.-1200   	; 0x53fe <conv_int>
    58ae:	81 11       	cpse	r24, r1
    58b0:	05 c0       	rjmp	.+10     	; 0x58bc <vfscanf+0x1f8>
    58b2:	f6 01       	movw	r30, r12
    58b4:	83 81       	ldd	r24, Z+3	; 0x03
    58b6:	80 73       	andi	r24, 0x30	; 48
    58b8:	29 f4       	brne	.+10     	; 0x58c4 <vfscanf+0x200>
    58ba:	06 c0       	rjmp	.+12     	; 0x58c8 <vfscanf+0x204>
    58bc:	00 fd       	sbrc	r16, 0
    58be:	18 cf       	rjmp	.-464    	; 0x56f0 <vfscanf+0x2c>
    58c0:	53 94       	inc	r5
    58c2:	16 cf       	rjmp	.-468    	; 0x56f0 <vfscanf+0x2c>
    58c4:	55 20       	and	r5, r5
    58c6:	19 f0       	breq	.+6      	; 0x58ce <vfscanf+0x20a>
    58c8:	85 2d       	mov	r24, r5
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	02 c0       	rjmp	.+4      	; 0x58d2 <vfscanf+0x20e>
    58ce:	8f ef       	ldi	r24, 0xFF	; 255
    58d0:	9f ef       	ldi	r25, 0xFF	; 255
    58d2:	df 91       	pop	r29
    58d4:	cf 91       	pop	r28
    58d6:	1f 91       	pop	r17
    58d8:	0f 91       	pop	r16
    58da:	ff 90       	pop	r15
    58dc:	ef 90       	pop	r14
    58de:	df 90       	pop	r13
    58e0:	cf 90       	pop	r12
    58e2:	bf 90       	pop	r11
    58e4:	af 90       	pop	r10
    58e6:	9f 90       	pop	r9
    58e8:	8f 90       	pop	r8
    58ea:	7f 90       	pop	r7
    58ec:	6f 90       	pop	r6
    58ee:	5f 90       	pop	r5
    58f0:	08 95       	ret

000058f2 <calloc>:
    58f2:	0f 93       	push	r16
    58f4:	1f 93       	push	r17
    58f6:	cf 93       	push	r28
    58f8:	df 93       	push	r29
    58fa:	86 9f       	mul	r24, r22
    58fc:	80 01       	movw	r16, r0
    58fe:	87 9f       	mul	r24, r23
    5900:	10 0d       	add	r17, r0
    5902:	96 9f       	mul	r25, r22
    5904:	10 0d       	add	r17, r0
    5906:	11 24       	eor	r1, r1
    5908:	c8 01       	movw	r24, r16
    590a:	0d d0       	rcall	.+26     	; 0x5926 <malloc>
    590c:	ec 01       	movw	r28, r24
    590e:	00 97       	sbiw	r24, 0x00	; 0
    5910:	21 f0       	breq	.+8      	; 0x591a <calloc+0x28>
    5912:	a8 01       	movw	r20, r16
    5914:	60 e0       	ldi	r22, 0x00	; 0
    5916:	70 e0       	ldi	r23, 0x00	; 0
    5918:	45 d1       	rcall	.+650    	; 0x5ba4 <memset>
    591a:	ce 01       	movw	r24, r28
    591c:	df 91       	pop	r29
    591e:	cf 91       	pop	r28
    5920:	1f 91       	pop	r17
    5922:	0f 91       	pop	r16
    5924:	08 95       	ret

00005926 <malloc>:
    5926:	0f 93       	push	r16
    5928:	1f 93       	push	r17
    592a:	cf 93       	push	r28
    592c:	df 93       	push	r29
    592e:	82 30       	cpi	r24, 0x02	; 2
    5930:	91 05       	cpc	r25, r1
    5932:	10 f4       	brcc	.+4      	; 0x5938 <malloc+0x12>
    5934:	82 e0       	ldi	r24, 0x02	; 2
    5936:	90 e0       	ldi	r25, 0x00	; 0
    5938:	e0 91 fa 21 	lds	r30, 0x21FA	; 0x8021fa <__flp>
    593c:	f0 91 fb 21 	lds	r31, 0x21FB	; 0x8021fb <__flp+0x1>
    5940:	20 e0       	ldi	r18, 0x00	; 0
    5942:	30 e0       	ldi	r19, 0x00	; 0
    5944:	a0 e0       	ldi	r26, 0x00	; 0
    5946:	b0 e0       	ldi	r27, 0x00	; 0
    5948:	30 97       	sbiw	r30, 0x00	; 0
    594a:	19 f1       	breq	.+70     	; 0x5992 <malloc+0x6c>
    594c:	40 81       	ld	r20, Z
    594e:	51 81       	ldd	r21, Z+1	; 0x01
    5950:	02 81       	ldd	r16, Z+2	; 0x02
    5952:	13 81       	ldd	r17, Z+3	; 0x03
    5954:	48 17       	cp	r20, r24
    5956:	59 07       	cpc	r21, r25
    5958:	c8 f0       	brcs	.+50     	; 0x598c <malloc+0x66>
    595a:	84 17       	cp	r24, r20
    595c:	95 07       	cpc	r25, r21
    595e:	69 f4       	brne	.+26     	; 0x597a <malloc+0x54>
    5960:	10 97       	sbiw	r26, 0x00	; 0
    5962:	31 f0       	breq	.+12     	; 0x5970 <malloc+0x4a>
    5964:	12 96       	adiw	r26, 0x02	; 2
    5966:	0c 93       	st	X, r16
    5968:	12 97       	sbiw	r26, 0x02	; 2
    596a:	13 96       	adiw	r26, 0x03	; 3
    596c:	1c 93       	st	X, r17
    596e:	27 c0       	rjmp	.+78     	; 0x59be <malloc+0x98>
    5970:	00 93 fa 21 	sts	0x21FA, r16	; 0x8021fa <__flp>
    5974:	10 93 fb 21 	sts	0x21FB, r17	; 0x8021fb <__flp+0x1>
    5978:	22 c0       	rjmp	.+68     	; 0x59be <malloc+0x98>
    597a:	21 15       	cp	r18, r1
    597c:	31 05       	cpc	r19, r1
    597e:	19 f0       	breq	.+6      	; 0x5986 <malloc+0x60>
    5980:	42 17       	cp	r20, r18
    5982:	53 07       	cpc	r21, r19
    5984:	18 f4       	brcc	.+6      	; 0x598c <malloc+0x66>
    5986:	9a 01       	movw	r18, r20
    5988:	bd 01       	movw	r22, r26
    598a:	ef 01       	movw	r28, r30
    598c:	df 01       	movw	r26, r30
    598e:	f8 01       	movw	r30, r16
    5990:	db cf       	rjmp	.-74     	; 0x5948 <malloc+0x22>
    5992:	21 15       	cp	r18, r1
    5994:	31 05       	cpc	r19, r1
    5996:	f9 f0       	breq	.+62     	; 0x59d6 <malloc+0xb0>
    5998:	28 1b       	sub	r18, r24
    599a:	39 0b       	sbc	r19, r25
    599c:	24 30       	cpi	r18, 0x04	; 4
    599e:	31 05       	cpc	r19, r1
    59a0:	80 f4       	brcc	.+32     	; 0x59c2 <malloc+0x9c>
    59a2:	8a 81       	ldd	r24, Y+2	; 0x02
    59a4:	9b 81       	ldd	r25, Y+3	; 0x03
    59a6:	61 15       	cp	r22, r1
    59a8:	71 05       	cpc	r23, r1
    59aa:	21 f0       	breq	.+8      	; 0x59b4 <malloc+0x8e>
    59ac:	fb 01       	movw	r30, r22
    59ae:	82 83       	std	Z+2, r24	; 0x02
    59b0:	93 83       	std	Z+3, r25	; 0x03
    59b2:	04 c0       	rjmp	.+8      	; 0x59bc <malloc+0x96>
    59b4:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <__flp>
    59b8:	90 93 fb 21 	sts	0x21FB, r25	; 0x8021fb <__flp+0x1>
    59bc:	fe 01       	movw	r30, r28
    59be:	32 96       	adiw	r30, 0x02	; 2
    59c0:	44 c0       	rjmp	.+136    	; 0x5a4a <malloc+0x124>
    59c2:	fe 01       	movw	r30, r28
    59c4:	e2 0f       	add	r30, r18
    59c6:	f3 1f       	adc	r31, r19
    59c8:	81 93       	st	Z+, r24
    59ca:	91 93       	st	Z+, r25
    59cc:	22 50       	subi	r18, 0x02	; 2
    59ce:	31 09       	sbc	r19, r1
    59d0:	28 83       	st	Y, r18
    59d2:	39 83       	std	Y+1, r19	; 0x01
    59d4:	3a c0       	rjmp	.+116    	; 0x5a4a <malloc+0x124>
    59d6:	20 91 f8 21 	lds	r18, 0x21F8	; 0x8021f8 <__brkval>
    59da:	30 91 f9 21 	lds	r19, 0x21F9	; 0x8021f9 <__brkval+0x1>
    59de:	23 2b       	or	r18, r19
    59e0:	41 f4       	brne	.+16     	; 0x59f2 <malloc+0xcc>
    59e2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    59e6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    59ea:	20 93 f8 21 	sts	0x21F8, r18	; 0x8021f8 <__brkval>
    59ee:	30 93 f9 21 	sts	0x21F9, r19	; 0x8021f9 <__brkval+0x1>
    59f2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    59f6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    59fa:	21 15       	cp	r18, r1
    59fc:	31 05       	cpc	r19, r1
    59fe:	41 f4       	brne	.+16     	; 0x5a10 <malloc+0xea>
    5a00:	2d b7       	in	r18, 0x3d	; 61
    5a02:	3e b7       	in	r19, 0x3e	; 62
    5a04:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5a08:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5a0c:	24 1b       	sub	r18, r20
    5a0e:	35 0b       	sbc	r19, r21
    5a10:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <__brkval>
    5a14:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <__brkval+0x1>
    5a18:	e2 17       	cp	r30, r18
    5a1a:	f3 07       	cpc	r31, r19
    5a1c:	a0 f4       	brcc	.+40     	; 0x5a46 <malloc+0x120>
    5a1e:	2e 1b       	sub	r18, r30
    5a20:	3f 0b       	sbc	r19, r31
    5a22:	28 17       	cp	r18, r24
    5a24:	39 07       	cpc	r19, r25
    5a26:	78 f0       	brcs	.+30     	; 0x5a46 <malloc+0x120>
    5a28:	ac 01       	movw	r20, r24
    5a2a:	4e 5f       	subi	r20, 0xFE	; 254
    5a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a2e:	24 17       	cp	r18, r20
    5a30:	35 07       	cpc	r19, r21
    5a32:	48 f0       	brcs	.+18     	; 0x5a46 <malloc+0x120>
    5a34:	4e 0f       	add	r20, r30
    5a36:	5f 1f       	adc	r21, r31
    5a38:	40 93 f8 21 	sts	0x21F8, r20	; 0x8021f8 <__brkval>
    5a3c:	50 93 f9 21 	sts	0x21F9, r21	; 0x8021f9 <__brkval+0x1>
    5a40:	81 93       	st	Z+, r24
    5a42:	91 93       	st	Z+, r25
    5a44:	02 c0       	rjmp	.+4      	; 0x5a4a <malloc+0x124>
    5a46:	e0 e0       	ldi	r30, 0x00	; 0
    5a48:	f0 e0       	ldi	r31, 0x00	; 0
    5a4a:	cf 01       	movw	r24, r30
    5a4c:	df 91       	pop	r29
    5a4e:	cf 91       	pop	r28
    5a50:	1f 91       	pop	r17
    5a52:	0f 91       	pop	r16
    5a54:	08 95       	ret

00005a56 <free>:
    5a56:	cf 93       	push	r28
    5a58:	df 93       	push	r29
    5a5a:	00 97       	sbiw	r24, 0x00	; 0
    5a5c:	09 f4       	brne	.+2      	; 0x5a60 <free+0xa>
    5a5e:	81 c0       	rjmp	.+258    	; 0x5b62 <free+0x10c>
    5a60:	fc 01       	movw	r30, r24
    5a62:	32 97       	sbiw	r30, 0x02	; 2
    5a64:	12 82       	std	Z+2, r1	; 0x02
    5a66:	13 82       	std	Z+3, r1	; 0x03
    5a68:	a0 91 fa 21 	lds	r26, 0x21FA	; 0x8021fa <__flp>
    5a6c:	b0 91 fb 21 	lds	r27, 0x21FB	; 0x8021fb <__flp+0x1>
    5a70:	10 97       	sbiw	r26, 0x00	; 0
    5a72:	81 f4       	brne	.+32     	; 0x5a94 <free+0x3e>
    5a74:	20 81       	ld	r18, Z
    5a76:	31 81       	ldd	r19, Z+1	; 0x01
    5a78:	82 0f       	add	r24, r18
    5a7a:	93 1f       	adc	r25, r19
    5a7c:	20 91 f8 21 	lds	r18, 0x21F8	; 0x8021f8 <__brkval>
    5a80:	30 91 f9 21 	lds	r19, 0x21F9	; 0x8021f9 <__brkval+0x1>
    5a84:	28 17       	cp	r18, r24
    5a86:	39 07       	cpc	r19, r25
    5a88:	51 f5       	brne	.+84     	; 0x5ade <free+0x88>
    5a8a:	e0 93 f8 21 	sts	0x21F8, r30	; 0x8021f8 <__brkval>
    5a8e:	f0 93 f9 21 	sts	0x21F9, r31	; 0x8021f9 <__brkval+0x1>
    5a92:	67 c0       	rjmp	.+206    	; 0x5b62 <free+0x10c>
    5a94:	ed 01       	movw	r28, r26
    5a96:	20 e0       	ldi	r18, 0x00	; 0
    5a98:	30 e0       	ldi	r19, 0x00	; 0
    5a9a:	ce 17       	cp	r28, r30
    5a9c:	df 07       	cpc	r29, r31
    5a9e:	40 f4       	brcc	.+16     	; 0x5ab0 <free+0x5a>
    5aa0:	4a 81       	ldd	r20, Y+2	; 0x02
    5aa2:	5b 81       	ldd	r21, Y+3	; 0x03
    5aa4:	9e 01       	movw	r18, r28
    5aa6:	41 15       	cp	r20, r1
    5aa8:	51 05       	cpc	r21, r1
    5aaa:	f1 f0       	breq	.+60     	; 0x5ae8 <free+0x92>
    5aac:	ea 01       	movw	r28, r20
    5aae:	f5 cf       	rjmp	.-22     	; 0x5a9a <free+0x44>
    5ab0:	c2 83       	std	Z+2, r28	; 0x02
    5ab2:	d3 83       	std	Z+3, r29	; 0x03
    5ab4:	40 81       	ld	r20, Z
    5ab6:	51 81       	ldd	r21, Z+1	; 0x01
    5ab8:	84 0f       	add	r24, r20
    5aba:	95 1f       	adc	r25, r21
    5abc:	c8 17       	cp	r28, r24
    5abe:	d9 07       	cpc	r29, r25
    5ac0:	59 f4       	brne	.+22     	; 0x5ad8 <free+0x82>
    5ac2:	88 81       	ld	r24, Y
    5ac4:	99 81       	ldd	r25, Y+1	; 0x01
    5ac6:	84 0f       	add	r24, r20
    5ac8:	95 1f       	adc	r25, r21
    5aca:	02 96       	adiw	r24, 0x02	; 2
    5acc:	80 83       	st	Z, r24
    5ace:	91 83       	std	Z+1, r25	; 0x01
    5ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ad4:	82 83       	std	Z+2, r24	; 0x02
    5ad6:	93 83       	std	Z+3, r25	; 0x03
    5ad8:	21 15       	cp	r18, r1
    5ada:	31 05       	cpc	r19, r1
    5adc:	29 f4       	brne	.+10     	; 0x5ae8 <free+0x92>
    5ade:	e0 93 fa 21 	sts	0x21FA, r30	; 0x8021fa <__flp>
    5ae2:	f0 93 fb 21 	sts	0x21FB, r31	; 0x8021fb <__flp+0x1>
    5ae6:	3d c0       	rjmp	.+122    	; 0x5b62 <free+0x10c>
    5ae8:	e9 01       	movw	r28, r18
    5aea:	ea 83       	std	Y+2, r30	; 0x02
    5aec:	fb 83       	std	Y+3, r31	; 0x03
    5aee:	49 91       	ld	r20, Y+
    5af0:	59 91       	ld	r21, Y+
    5af2:	c4 0f       	add	r28, r20
    5af4:	d5 1f       	adc	r29, r21
    5af6:	ec 17       	cp	r30, r28
    5af8:	fd 07       	cpc	r31, r29
    5afa:	61 f4       	brne	.+24     	; 0x5b14 <free+0xbe>
    5afc:	80 81       	ld	r24, Z
    5afe:	91 81       	ldd	r25, Z+1	; 0x01
    5b00:	84 0f       	add	r24, r20
    5b02:	95 1f       	adc	r25, r21
    5b04:	02 96       	adiw	r24, 0x02	; 2
    5b06:	e9 01       	movw	r28, r18
    5b08:	88 83       	st	Y, r24
    5b0a:	99 83       	std	Y+1, r25	; 0x01
    5b0c:	82 81       	ldd	r24, Z+2	; 0x02
    5b0e:	93 81       	ldd	r25, Z+3	; 0x03
    5b10:	8a 83       	std	Y+2, r24	; 0x02
    5b12:	9b 83       	std	Y+3, r25	; 0x03
    5b14:	e0 e0       	ldi	r30, 0x00	; 0
    5b16:	f0 e0       	ldi	r31, 0x00	; 0
    5b18:	12 96       	adiw	r26, 0x02	; 2
    5b1a:	8d 91       	ld	r24, X+
    5b1c:	9c 91       	ld	r25, X
    5b1e:	13 97       	sbiw	r26, 0x03	; 3
    5b20:	00 97       	sbiw	r24, 0x00	; 0
    5b22:	19 f0       	breq	.+6      	; 0x5b2a <free+0xd4>
    5b24:	fd 01       	movw	r30, r26
    5b26:	dc 01       	movw	r26, r24
    5b28:	f7 cf       	rjmp	.-18     	; 0x5b18 <free+0xc2>
    5b2a:	8d 91       	ld	r24, X+
    5b2c:	9c 91       	ld	r25, X
    5b2e:	11 97       	sbiw	r26, 0x01	; 1
    5b30:	9d 01       	movw	r18, r26
    5b32:	2e 5f       	subi	r18, 0xFE	; 254
    5b34:	3f 4f       	sbci	r19, 0xFF	; 255
    5b36:	82 0f       	add	r24, r18
    5b38:	93 1f       	adc	r25, r19
    5b3a:	20 91 f8 21 	lds	r18, 0x21F8	; 0x8021f8 <__brkval>
    5b3e:	30 91 f9 21 	lds	r19, 0x21F9	; 0x8021f9 <__brkval+0x1>
    5b42:	28 17       	cp	r18, r24
    5b44:	39 07       	cpc	r19, r25
    5b46:	69 f4       	brne	.+26     	; 0x5b62 <free+0x10c>
    5b48:	30 97       	sbiw	r30, 0x00	; 0
    5b4a:	29 f4       	brne	.+10     	; 0x5b56 <free+0x100>
    5b4c:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <__flp>
    5b50:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <__flp+0x1>
    5b54:	02 c0       	rjmp	.+4      	; 0x5b5a <free+0x104>
    5b56:	12 82       	std	Z+2, r1	; 0x02
    5b58:	13 82       	std	Z+3, r1	; 0x03
    5b5a:	a0 93 f8 21 	sts	0x21F8, r26	; 0x8021f8 <__brkval>
    5b5e:	b0 93 f9 21 	sts	0x21F9, r27	; 0x8021f9 <__brkval+0x1>
    5b62:	df 91       	pop	r29
    5b64:	cf 91       	pop	r28
    5b66:	08 95       	ret

00005b68 <isspace>:
    5b68:	91 11       	cpse	r25, r1
    5b6a:	1f c1       	rjmp	.+574    	; 0x5daa <__ctype_isfalse>
    5b6c:	80 32       	cpi	r24, 0x20	; 32
    5b6e:	19 f0       	breq	.+6      	; 0x5b76 <isspace+0xe>
    5b70:	89 50       	subi	r24, 0x09	; 9
    5b72:	85 50       	subi	r24, 0x05	; 5
    5b74:	d0 f7       	brcc	.-12     	; 0x5b6a <isspace+0x2>
    5b76:	08 95       	ret

00005b78 <strchr_P>:
    5b78:	fc 01       	movw	r30, r24
    5b7a:	05 90       	lpm	r0, Z+
    5b7c:	06 16       	cp	r0, r22
    5b7e:	21 f0       	breq	.+8      	; 0x5b88 <strchr_P+0x10>
    5b80:	00 20       	and	r0, r0
    5b82:	d9 f7       	brne	.-10     	; 0x5b7a <strchr_P+0x2>
    5b84:	c0 01       	movw	r24, r0
    5b86:	08 95       	ret
    5b88:	31 97       	sbiw	r30, 0x01	; 1
    5b8a:	cf 01       	movw	r24, r30
    5b8c:	08 95       	ret

00005b8e <strnlen_P>:
    5b8e:	fc 01       	movw	r30, r24
    5b90:	05 90       	lpm	r0, Z+
    5b92:	61 50       	subi	r22, 0x01	; 1
    5b94:	70 40       	sbci	r23, 0x00	; 0
    5b96:	01 10       	cpse	r0, r1
    5b98:	d8 f7       	brcc	.-10     	; 0x5b90 <strnlen_P+0x2>
    5b9a:	80 95       	com	r24
    5b9c:	90 95       	com	r25
    5b9e:	8e 0f       	add	r24, r30
    5ba0:	9f 1f       	adc	r25, r31
    5ba2:	08 95       	ret

00005ba4 <memset>:
    5ba4:	dc 01       	movw	r26, r24
    5ba6:	01 c0       	rjmp	.+2      	; 0x5baa <memset+0x6>
    5ba8:	6d 93       	st	X+, r22
    5baa:	41 50       	subi	r20, 0x01	; 1
    5bac:	50 40       	sbci	r21, 0x00	; 0
    5bae:	e0 f7       	brcc	.-8      	; 0x5ba8 <memset+0x4>
    5bb0:	08 95       	ret

00005bb2 <strnlen>:
    5bb2:	fc 01       	movw	r30, r24
    5bb4:	61 50       	subi	r22, 0x01	; 1
    5bb6:	70 40       	sbci	r23, 0x00	; 0
    5bb8:	01 90       	ld	r0, Z+
    5bba:	01 10       	cpse	r0, r1
    5bbc:	d8 f7       	brcc	.-10     	; 0x5bb4 <strnlen+0x2>
    5bbe:	80 95       	com	r24
    5bc0:	90 95       	com	r25
    5bc2:	8e 0f       	add	r24, r30
    5bc4:	9f 1f       	adc	r25, r31
    5bc6:	08 95       	ret

00005bc8 <fgetc>:
    5bc8:	cf 93       	push	r28
    5bca:	df 93       	push	r29
    5bcc:	ec 01       	movw	r28, r24
    5bce:	2b 81       	ldd	r18, Y+3	; 0x03
    5bd0:	20 ff       	sbrs	r18, 0
    5bd2:	33 c0       	rjmp	.+102    	; 0x5c3a <fgetc+0x72>
    5bd4:	26 ff       	sbrs	r18, 6
    5bd6:	0a c0       	rjmp	.+20     	; 0x5bec <fgetc+0x24>
    5bd8:	2f 7b       	andi	r18, 0xBF	; 191
    5bda:	2b 83       	std	Y+3, r18	; 0x03
    5bdc:	8e 81       	ldd	r24, Y+6	; 0x06
    5bde:	9f 81       	ldd	r25, Y+7	; 0x07
    5be0:	01 96       	adiw	r24, 0x01	; 1
    5be2:	8e 83       	std	Y+6, r24	; 0x06
    5be4:	9f 83       	std	Y+7, r25	; 0x07
    5be6:	8a 81       	ldd	r24, Y+2	; 0x02
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	29 c0       	rjmp	.+82     	; 0x5c3e <fgetc+0x76>
    5bec:	22 ff       	sbrs	r18, 2
    5bee:	0f c0       	rjmp	.+30     	; 0x5c0e <fgetc+0x46>
    5bf0:	e8 81       	ld	r30, Y
    5bf2:	f9 81       	ldd	r31, Y+1	; 0x01
    5bf4:	80 81       	ld	r24, Z
    5bf6:	08 2e       	mov	r0, r24
    5bf8:	00 0c       	add	r0, r0
    5bfa:	99 0b       	sbc	r25, r25
    5bfc:	00 97       	sbiw	r24, 0x00	; 0
    5bfe:	19 f4       	brne	.+6      	; 0x5c06 <fgetc+0x3e>
    5c00:	20 62       	ori	r18, 0x20	; 32
    5c02:	2b 83       	std	Y+3, r18	; 0x03
    5c04:	1a c0       	rjmp	.+52     	; 0x5c3a <fgetc+0x72>
    5c06:	31 96       	adiw	r30, 0x01	; 1
    5c08:	e8 83       	st	Y, r30
    5c0a:	f9 83       	std	Y+1, r31	; 0x01
    5c0c:	0e c0       	rjmp	.+28     	; 0x5c2a <fgetc+0x62>
    5c0e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5c10:	fb 85       	ldd	r31, Y+11	; 0x0b
    5c12:	19 95       	eicall
    5c14:	97 ff       	sbrs	r25, 7
    5c16:	09 c0       	rjmp	.+18     	; 0x5c2a <fgetc+0x62>
    5c18:	2b 81       	ldd	r18, Y+3	; 0x03
    5c1a:	01 96       	adiw	r24, 0x01	; 1
    5c1c:	11 f0       	breq	.+4      	; 0x5c22 <fgetc+0x5a>
    5c1e:	80 e2       	ldi	r24, 0x20	; 32
    5c20:	01 c0       	rjmp	.+2      	; 0x5c24 <fgetc+0x5c>
    5c22:	80 e1       	ldi	r24, 0x10	; 16
    5c24:	82 2b       	or	r24, r18
    5c26:	8b 83       	std	Y+3, r24	; 0x03
    5c28:	08 c0       	rjmp	.+16     	; 0x5c3a <fgetc+0x72>
    5c2a:	2e 81       	ldd	r18, Y+6	; 0x06
    5c2c:	3f 81       	ldd	r19, Y+7	; 0x07
    5c2e:	2f 5f       	subi	r18, 0xFF	; 255
    5c30:	3f 4f       	sbci	r19, 0xFF	; 255
    5c32:	2e 83       	std	Y+6, r18	; 0x06
    5c34:	3f 83       	std	Y+7, r19	; 0x07
    5c36:	99 27       	eor	r25, r25
    5c38:	02 c0       	rjmp	.+4      	; 0x5c3e <fgetc+0x76>
    5c3a:	8f ef       	ldi	r24, 0xFF	; 255
    5c3c:	9f ef       	ldi	r25, 0xFF	; 255
    5c3e:	df 91       	pop	r29
    5c40:	cf 91       	pop	r28
    5c42:	08 95       	ret

00005c44 <fputc>:
    5c44:	0f 93       	push	r16
    5c46:	1f 93       	push	r17
    5c48:	cf 93       	push	r28
    5c4a:	df 93       	push	r29
    5c4c:	fb 01       	movw	r30, r22
    5c4e:	23 81       	ldd	r18, Z+3	; 0x03
    5c50:	21 fd       	sbrc	r18, 1
    5c52:	03 c0       	rjmp	.+6      	; 0x5c5a <fputc+0x16>
    5c54:	8f ef       	ldi	r24, 0xFF	; 255
    5c56:	9f ef       	ldi	r25, 0xFF	; 255
    5c58:	2c c0       	rjmp	.+88     	; 0x5cb2 <fputc+0x6e>
    5c5a:	22 ff       	sbrs	r18, 2
    5c5c:	16 c0       	rjmp	.+44     	; 0x5c8a <fputc+0x46>
    5c5e:	46 81       	ldd	r20, Z+6	; 0x06
    5c60:	57 81       	ldd	r21, Z+7	; 0x07
    5c62:	24 81       	ldd	r18, Z+4	; 0x04
    5c64:	35 81       	ldd	r19, Z+5	; 0x05
    5c66:	42 17       	cp	r20, r18
    5c68:	53 07       	cpc	r21, r19
    5c6a:	44 f4       	brge	.+16     	; 0x5c7c <fputc+0x38>
    5c6c:	a0 81       	ld	r26, Z
    5c6e:	b1 81       	ldd	r27, Z+1	; 0x01
    5c70:	9d 01       	movw	r18, r26
    5c72:	2f 5f       	subi	r18, 0xFF	; 255
    5c74:	3f 4f       	sbci	r19, 0xFF	; 255
    5c76:	20 83       	st	Z, r18
    5c78:	31 83       	std	Z+1, r19	; 0x01
    5c7a:	8c 93       	st	X, r24
    5c7c:	26 81       	ldd	r18, Z+6	; 0x06
    5c7e:	37 81       	ldd	r19, Z+7	; 0x07
    5c80:	2f 5f       	subi	r18, 0xFF	; 255
    5c82:	3f 4f       	sbci	r19, 0xFF	; 255
    5c84:	26 83       	std	Z+6, r18	; 0x06
    5c86:	37 83       	std	Z+7, r19	; 0x07
    5c88:	14 c0       	rjmp	.+40     	; 0x5cb2 <fputc+0x6e>
    5c8a:	8b 01       	movw	r16, r22
    5c8c:	ec 01       	movw	r28, r24
    5c8e:	fb 01       	movw	r30, r22
    5c90:	00 84       	ldd	r0, Z+8	; 0x08
    5c92:	f1 85       	ldd	r31, Z+9	; 0x09
    5c94:	e0 2d       	mov	r30, r0
    5c96:	19 95       	eicall
    5c98:	89 2b       	or	r24, r25
    5c9a:	e1 f6       	brne	.-72     	; 0x5c54 <fputc+0x10>
    5c9c:	d8 01       	movw	r26, r16
    5c9e:	16 96       	adiw	r26, 0x06	; 6
    5ca0:	8d 91       	ld	r24, X+
    5ca2:	9c 91       	ld	r25, X
    5ca4:	17 97       	sbiw	r26, 0x07	; 7
    5ca6:	01 96       	adiw	r24, 0x01	; 1
    5ca8:	16 96       	adiw	r26, 0x06	; 6
    5caa:	8d 93       	st	X+, r24
    5cac:	9c 93       	st	X, r25
    5cae:	17 97       	sbiw	r26, 0x07	; 7
    5cb0:	ce 01       	movw	r24, r28
    5cb2:	df 91       	pop	r29
    5cb4:	cf 91       	pop	r28
    5cb6:	1f 91       	pop	r17
    5cb8:	0f 91       	pop	r16
    5cba:	08 95       	ret

00005cbc <ungetc>:
    5cbc:	fb 01       	movw	r30, r22
    5cbe:	23 81       	ldd	r18, Z+3	; 0x03
    5cc0:	20 ff       	sbrs	r18, 0
    5cc2:	12 c0       	rjmp	.+36     	; 0x5ce8 <ungetc+0x2c>
    5cc4:	26 fd       	sbrc	r18, 6
    5cc6:	10 c0       	rjmp	.+32     	; 0x5ce8 <ungetc+0x2c>
    5cc8:	8f 3f       	cpi	r24, 0xFF	; 255
    5cca:	3f ef       	ldi	r19, 0xFF	; 255
    5ccc:	93 07       	cpc	r25, r19
    5cce:	61 f0       	breq	.+24     	; 0x5ce8 <ungetc+0x2c>
    5cd0:	82 83       	std	Z+2, r24	; 0x02
    5cd2:	2f 7d       	andi	r18, 0xDF	; 223
    5cd4:	20 64       	ori	r18, 0x40	; 64
    5cd6:	23 83       	std	Z+3, r18	; 0x03
    5cd8:	26 81       	ldd	r18, Z+6	; 0x06
    5cda:	37 81       	ldd	r19, Z+7	; 0x07
    5cdc:	21 50       	subi	r18, 0x01	; 1
    5cde:	31 09       	sbc	r19, r1
    5ce0:	26 83       	std	Z+6, r18	; 0x06
    5ce2:	37 83       	std	Z+7, r19	; 0x07
    5ce4:	99 27       	eor	r25, r25
    5ce6:	08 95       	ret
    5ce8:	8f ef       	ldi	r24, 0xFF	; 255
    5cea:	9f ef       	ldi	r25, 0xFF	; 255
    5cec:	08 95       	ret

00005cee <__ultoa_invert>:
    5cee:	fa 01       	movw	r30, r20
    5cf0:	aa 27       	eor	r26, r26
    5cf2:	28 30       	cpi	r18, 0x08	; 8
    5cf4:	51 f1       	breq	.+84     	; 0x5d4a <__ultoa_invert+0x5c>
    5cf6:	20 31       	cpi	r18, 0x10	; 16
    5cf8:	81 f1       	breq	.+96     	; 0x5d5a <__ultoa_invert+0x6c>
    5cfa:	e8 94       	clt
    5cfc:	6f 93       	push	r22
    5cfe:	6e 7f       	andi	r22, 0xFE	; 254
    5d00:	6e 5f       	subi	r22, 0xFE	; 254
    5d02:	7f 4f       	sbci	r23, 0xFF	; 255
    5d04:	8f 4f       	sbci	r24, 0xFF	; 255
    5d06:	9f 4f       	sbci	r25, 0xFF	; 255
    5d08:	af 4f       	sbci	r26, 0xFF	; 255
    5d0a:	b1 e0       	ldi	r27, 0x01	; 1
    5d0c:	3e d0       	rcall	.+124    	; 0x5d8a <__ultoa_invert+0x9c>
    5d0e:	b4 e0       	ldi	r27, 0x04	; 4
    5d10:	3c d0       	rcall	.+120    	; 0x5d8a <__ultoa_invert+0x9c>
    5d12:	67 0f       	add	r22, r23
    5d14:	78 1f       	adc	r23, r24
    5d16:	89 1f       	adc	r24, r25
    5d18:	9a 1f       	adc	r25, r26
    5d1a:	a1 1d       	adc	r26, r1
    5d1c:	68 0f       	add	r22, r24
    5d1e:	79 1f       	adc	r23, r25
    5d20:	8a 1f       	adc	r24, r26
    5d22:	91 1d       	adc	r25, r1
    5d24:	a1 1d       	adc	r26, r1
    5d26:	6a 0f       	add	r22, r26
    5d28:	71 1d       	adc	r23, r1
    5d2a:	81 1d       	adc	r24, r1
    5d2c:	91 1d       	adc	r25, r1
    5d2e:	a1 1d       	adc	r26, r1
    5d30:	20 d0       	rcall	.+64     	; 0x5d72 <__ultoa_invert+0x84>
    5d32:	09 f4       	brne	.+2      	; 0x5d36 <__ultoa_invert+0x48>
    5d34:	68 94       	set
    5d36:	3f 91       	pop	r19
    5d38:	2a e0       	ldi	r18, 0x0A	; 10
    5d3a:	26 9f       	mul	r18, r22
    5d3c:	11 24       	eor	r1, r1
    5d3e:	30 19       	sub	r19, r0
    5d40:	30 5d       	subi	r19, 0xD0	; 208
    5d42:	31 93       	st	Z+, r19
    5d44:	de f6       	brtc	.-74     	; 0x5cfc <__ultoa_invert+0xe>
    5d46:	cf 01       	movw	r24, r30
    5d48:	08 95       	ret
    5d4a:	46 2f       	mov	r20, r22
    5d4c:	47 70       	andi	r20, 0x07	; 7
    5d4e:	40 5d       	subi	r20, 0xD0	; 208
    5d50:	41 93       	st	Z+, r20
    5d52:	b3 e0       	ldi	r27, 0x03	; 3
    5d54:	0f d0       	rcall	.+30     	; 0x5d74 <__ultoa_invert+0x86>
    5d56:	c9 f7       	brne	.-14     	; 0x5d4a <__ultoa_invert+0x5c>
    5d58:	f6 cf       	rjmp	.-20     	; 0x5d46 <__ultoa_invert+0x58>
    5d5a:	46 2f       	mov	r20, r22
    5d5c:	4f 70       	andi	r20, 0x0F	; 15
    5d5e:	40 5d       	subi	r20, 0xD0	; 208
    5d60:	4a 33       	cpi	r20, 0x3A	; 58
    5d62:	18 f0       	brcs	.+6      	; 0x5d6a <__ultoa_invert+0x7c>
    5d64:	49 5d       	subi	r20, 0xD9	; 217
    5d66:	31 fd       	sbrc	r19, 1
    5d68:	40 52       	subi	r20, 0x20	; 32
    5d6a:	41 93       	st	Z+, r20
    5d6c:	02 d0       	rcall	.+4      	; 0x5d72 <__ultoa_invert+0x84>
    5d6e:	a9 f7       	brne	.-22     	; 0x5d5a <__ultoa_invert+0x6c>
    5d70:	ea cf       	rjmp	.-44     	; 0x5d46 <__ultoa_invert+0x58>
    5d72:	b4 e0       	ldi	r27, 0x04	; 4
    5d74:	a6 95       	lsr	r26
    5d76:	97 95       	ror	r25
    5d78:	87 95       	ror	r24
    5d7a:	77 95       	ror	r23
    5d7c:	67 95       	ror	r22
    5d7e:	ba 95       	dec	r27
    5d80:	c9 f7       	brne	.-14     	; 0x5d74 <__ultoa_invert+0x86>
    5d82:	00 97       	sbiw	r24, 0x00	; 0
    5d84:	61 05       	cpc	r22, r1
    5d86:	71 05       	cpc	r23, r1
    5d88:	08 95       	ret
    5d8a:	9b 01       	movw	r18, r22
    5d8c:	ac 01       	movw	r20, r24
    5d8e:	0a 2e       	mov	r0, r26
    5d90:	06 94       	lsr	r0
    5d92:	57 95       	ror	r21
    5d94:	47 95       	ror	r20
    5d96:	37 95       	ror	r19
    5d98:	27 95       	ror	r18
    5d9a:	ba 95       	dec	r27
    5d9c:	c9 f7       	brne	.-14     	; 0x5d90 <__ultoa_invert+0xa2>
    5d9e:	62 0f       	add	r22, r18
    5da0:	73 1f       	adc	r23, r19
    5da2:	84 1f       	adc	r24, r20
    5da4:	95 1f       	adc	r25, r21
    5da6:	a0 1d       	adc	r26, r0
    5da8:	08 95       	ret

00005daa <__ctype_isfalse>:
    5daa:	99 27       	eor	r25, r25
    5dac:	88 27       	eor	r24, r24

00005dae <__ctype_istrue>:
    5dae:	08 95       	ret

00005db0 <_exit>:
    5db0:	f8 94       	cli

00005db2 <__stop_program>:
    5db2:	ff cf       	rjmp	.-2      	; 0x5db2 <__stop_program>
