
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00802000  00005a90  00005b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000150  008020de  008020de  00005c02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005c02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005c60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000750  00000000  00000000  00005ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ae1b  00000000  00000000  000063f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000056b8  00000000  00000000  0002120b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c6aa  00000000  00000000  000268c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e94  00000000  00000000  00032f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00038ba2  00000000  00000000  00034e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006bf2  00000000  00000000  0006d9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d8  00000000  00000000  00074598  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000062e5  00000000  00000000  00074c70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_13>
      38:	81 c2       	rjmp	.+1282   	; 0x53c <__vector_14>
      3a:	00 00       	nop
      3c:	b7 c2       	rjmp	.+1390   	; 0x5ac <__vector_15>
      3e:	00 00       	nop
      40:	ed c2       	rjmp	.+1498   	; 0x61c <__vector_16>
      42:	00 00       	nop
      44:	23 c3       	rjmp	.+1606   	; 0x68c <__vector_17>
      46:	00 00       	nop
      48:	59 c3       	rjmp	.+1714   	; 0x6fc <__vector_18>
      4a:	00 00       	nop
      4c:	8f c3       	rjmp	.+1822   	; 0x76c <__vector_19>
      4e:	00 00       	nop
      50:	c5 c3       	rjmp	.+1930   	; 0x7dc <__vector_20>
      52:	00 00       	nop
      54:	fb c3       	rjmp	.+2038   	; 0x84c <__vector_21>
      56:	00 00       	nop
      58:	31 c4       	rjmp	.+2146   	; 0x8bc <__vector_22>
      5a:	00 00       	nop
      5c:	67 c4       	rjmp	.+2254   	; 0x92c <__vector_23>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	35 c1       	rjmp	.+618    	; 0x2fc <__bad_interrupt>
      92:	00 00       	nop
      94:	33 c1       	rjmp	.+614    	; 0x2fc <__bad_interrupt>
      96:	00 00       	nop
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2f c1       	rjmp	.+606    	; 0x2fc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_46>
      bc:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__vector_47>
      c0:	9d c6       	rjmp	.+3386   	; 0xdfc <__vector_48>
      c2:	00 00       	nop
      c4:	d3 c6       	rjmp	.+3494   	; 0xe6c <__vector_49>
      c6:	00 00       	nop
      c8:	09 c7       	rjmp	.+3602   	; 0xedc <__vector_50>
      ca:	00 00       	nop
      cc:	3f c7       	rjmp	.+3710   	; 0xf4c <__vector_51>
      ce:	00 00       	nop
      d0:	75 c7       	rjmp	.+3818   	; 0xfbc <__vector_52>
      d2:	00 00       	nop
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	11 c1       	rjmp	.+546    	; 0x2fc <__bad_interrupt>
      da:	00 00       	nop
      dc:	0f c1       	rjmp	.+542    	; 0x2fc <__bad_interrupt>
      de:	00 00       	nop
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b c1       	rjmp	.+534    	; 0x2fc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__vector_58>
      ec:	07 c1       	rjmp	.+526    	; 0x2fc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	05 c1       	rjmp	.+522    	; 0x2fc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	03 c1       	rjmp	.+518    	; 0x2fc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	01 c1       	rjmp	.+514    	; 0x2fc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ff c0       	rjmp	.+510    	; 0x2fc <__bad_interrupt>
      fe:	00 00       	nop
     100:	fd c0       	rjmp	.+506    	; 0x2fc <__bad_interrupt>
     102:	00 00       	nop
     104:	fb c0       	rjmp	.+502    	; 0x2fc <__bad_interrupt>
     106:	00 00       	nop
     108:	f9 c0       	rjmp	.+498    	; 0x2fc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f7 c0       	rjmp	.+494    	; 0x2fc <__bad_interrupt>
     10e:	00 00       	nop
     110:	f5 c0       	rjmp	.+490    	; 0x2fc <__bad_interrupt>
     112:	00 00       	nop
     114:	f3 c0       	rjmp	.+486    	; 0x2fc <__bad_interrupt>
     116:	00 00       	nop
     118:	f1 c0       	rjmp	.+482    	; 0x2fc <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1b c1       	rjmp	.+566    	; 0x354 <__vector_71>
     11e:	00 00       	nop
     120:	56 c1       	rjmp	.+684    	; 0x3ce <__vector_72>
     122:	00 00       	nop
     124:	91 c1       	rjmp	.+802    	; 0x448 <__vector_73>
     126:	00 00       	nop
     128:	cc c1       	rjmp	.+920    	; 0x4c2 <__vector_74>
     12a:	00 00       	nop
     12c:	e7 c0       	rjmp	.+462    	; 0x2fc <__bad_interrupt>
     12e:	00 00       	nop
     130:	e5 c0       	rjmp	.+458    	; 0x2fc <__bad_interrupt>
     132:	00 00       	nop
     134:	33 c4       	rjmp	.+2150   	; 0x99c <__vector_77>
     136:	00 00       	nop
     138:	69 c4       	rjmp	.+2258   	; 0xa0c <__vector_78>
     13a:	00 00       	nop
     13c:	9f c4       	rjmp	.+2366   	; 0xa7c <__vector_79>
     13e:	00 00       	nop
     140:	d5 c4       	rjmp	.+2474   	; 0xaec <__vector_80>
     142:	00 00       	nop
     144:	0b c5       	rjmp	.+2582   	; 0xb5c <__vector_81>
     146:	00 00       	nop
     148:	41 c5       	rjmp	.+2690   	; 0xbcc <__vector_82>
     14a:	00 00       	nop
     14c:	77 c5       	rjmp	.+2798   	; 0xc3c <__vector_83>
     14e:	00 00       	nop
     150:	ad c5       	rjmp	.+2906   	; 0xcac <__vector_84>
     152:	00 00       	nop
     154:	e3 c5       	rjmp	.+3014   	; 0xd1c <__vector_85>
     156:	00 00       	nop
     158:	19 c6       	rjmp	.+3122   	; 0xd8c <__vector_86>
     15a:	00 00       	nop
     15c:	cf c0       	rjmp	.+414    	; 0x2fc <__bad_interrupt>
     15e:	00 00       	nop
     160:	cd c0       	rjmp	.+410    	; 0x2fc <__bad_interrupt>
     162:	00 00       	nop
     164:	cb c0       	rjmp	.+406    	; 0x2fc <__bad_interrupt>
     166:	00 00       	nop
     168:	c9 c0       	rjmp	.+402    	; 0x2fc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <__vector_91>
     170:	c5 c0       	rjmp	.+394    	; 0x2fc <__bad_interrupt>
     172:	00 00       	nop
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__bad_interrupt>
     176:	00 00       	nop
     178:	c1 c0       	rjmp	.+386    	; 0x2fc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bf c0       	rjmp	.+382    	; 0x2fc <__bad_interrupt>
     17e:	00 00       	nop
     180:	bd c0       	rjmp	.+378    	; 0x2fc <__bad_interrupt>
     182:	00 00       	nop
     184:	bb c0       	rjmp	.+374    	; 0x2fc <__bad_interrupt>
     186:	00 00       	nop
     188:	b9 c0       	rjmp	.+370    	; 0x2fc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b7 c0       	rjmp	.+366    	; 0x2fc <__bad_interrupt>
     18e:	00 00       	nop
     190:	b5 c0       	rjmp	.+362    	; 0x2fc <__bad_interrupt>
     192:	00 00       	nop
     194:	b3 c0       	rjmp	.+358    	; 0x2fc <__bad_interrupt>
     196:	00 00       	nop
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	af c0       	rjmp	.+350    	; 0x2fc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ad c0       	rjmp	.+346    	; 0x2fc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ab c0       	rjmp	.+342    	; 0x2fc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a9 c0       	rjmp	.+338    	; 0x2fc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a7 c0       	rjmp	.+334    	; 0x2fc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a5 c0       	rjmp	.+330    	; 0x2fc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	a3 c0       	rjmp	.+326    	; 0x2fc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	a1 c0       	rjmp	.+322    	; 0x2fc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9f c0       	rjmp	.+318    	; 0x2fc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	9d c0       	rjmp	.+314    	; 0x2fc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	9b c0       	rjmp	.+310    	; 0x2fc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	99 c0       	rjmp	.+306    	; 0x2fc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	97 c0       	rjmp	.+302    	; 0x2fc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	95 c0       	rjmp	.+298    	; 0x2fc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	93 c0       	rjmp	.+294    	; 0x2fc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	91 c0       	rjmp	.+290    	; 0x2fc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8f c0       	rjmp	.+286    	; 0x2fc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8d c0       	rjmp	.+282    	; 0x2fc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8b c0       	rjmp	.+278    	; 0x2fc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	89 c0       	rjmp	.+274    	; 0x2fc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	87 c0       	rjmp	.+270    	; 0x2fc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	83 c0       	rjmp	.+262    	; 0x2fc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	81 c0       	rjmp	.+258    	; 0x2fc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	f2 1c       	adc	r15, r2
     1fe:	ef 1c       	adc	r14, r15
     200:	ec 1c       	adc	r14, r12
     202:	f8 1c       	adc	r15, r8
     204:	e9 1c       	adc	r14, r9
     206:	e7 1c       	adc	r14, r7
     208:	fa 1c       	adc	r15, r10
     20a:	fa 1c       	adc	r15, r10
     20c:	fa 1c       	adc	r15, r10
     20e:	fa 1c       	adc	r15, r10
     210:	fa 1c       	adc	r15, r10
     212:	fa 1c       	adc	r15, r10
     214:	fa 1c       	adc	r15, r10
     216:	fa 1c       	adc	r15, r10
     218:	fa 1c       	adc	r15, r10
     21a:	fa 1c       	adc	r15, r10
     21c:	fa 1c       	adc	r15, r10
     21e:	fa 1c       	adc	r15, r10
     220:	f5 1c       	adc	r15, r5
     222:	07 63       	ori	r16, 0x37	; 55
     224:	42 36       	cpi	r20, 0x62	; 98
     226:	b7 9b       	sbis	0x16, 7	; 22
     228:	d8 a7       	std	Y+40, r29	; 0x28
     22a:	1a 39       	cpi	r17, 0x9A	; 154
     22c:	68 56       	subi	r22, 0x68	; 104
     22e:	18 ae       	std	Y+56, r1	; 0x38
     230:	ba ab       	std	Y+50, r27	; 0x32
     232:	55 8c       	ldd	r5, Z+29	; 0x1d
     234:	1d 3c       	cpi	r17, 0xCD	; 205
     236:	b7 cc       	rjmp	.-1682   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     238:	57 63       	ori	r21, 0x37	; 55
     23a:	bd 6d       	ori	r27, 0xDD	; 221
     23c:	ed fd       	.word	0xfded	; ????
     23e:	75 3e       	cpi	r23, 0xE5	; 229
     240:	f6 17       	cp	r31, r22
     242:	72 31       	cpi	r23, 0x12	; 18
     244:	bf 00       	.word	0x00bf	; ????
     246:	00 00       	nop
     248:	80 3f       	cpi	r24, 0xF0	; 240
     24a:	08 00       	.word	0x0008	; ????
     24c:	00 00       	nop
     24e:	be 92       	st	-X, r11
     250:	24 49       	sbci	r18, 0x94	; 148
     252:	12 3e       	cpi	r17, 0xE2	; 226
     254:	ab aa       	std	Y+51, r10	; 0x33
     256:	aa 2a       	or	r10, r26
     258:	be cd       	rjmp	.-1156   	; 0xfffffdd6 <__eeprom_end+0xff7efdd6>
     25a:	cc cc       	rjmp	.-1640   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
     25c:	4c 3e       	cpi	r20, 0xEC	; 236
     25e:	00 00       	nop
     260:	00 80       	ld	r0, Z
     262:	be ab       	std	Y+54, r27	; 0x36
     264:	aa aa       	std	Y+50, r10	; 0x32
     266:	aa 3e       	cpi	r26, 0xEA	; 234
     268:	00 00       	nop
     26a:	00 00       	nop
     26c:	bf 00       	.word	0x00bf	; ????
     26e:	00 00       	nop
     270:	80 3f       	cpi	r24, 0xF0	; 240
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 08       	sbc	r0, r0
     278:	41 78       	andi	r20, 0x81	; 129
     27a:	d3 bb       	out	0x13, r29	; 19
     27c:	43 87       	std	Z+11, r20	; 0x0b
     27e:	d1 13       	cpse	r29, r17
     280:	3d 19       	sub	r19, r13
     282:	0e 3c       	cpi	r16, 0xCE	; 206
     284:	c3 bd       	out	0x23, r28	; 35
     286:	42 82       	std	Z+2, r4	; 0x02
     288:	ad 2b       	or	r26, r29
     28a:	3e 68       	ori	r19, 0x8E	; 142
     28c:	ec 82       	std	Y+4, r14	; 0x04
     28e:	76 be       	out	0x36, r7	; 54
     290:	d9 8f       	std	Y+25, r29	; 0x19
     292:	e1 a9       	ldd	r30, Z+49	; 0x31
     294:	3e 4c       	sbci	r19, 0xCE	; 206
     296:	80 ef       	ldi	r24, 0xF0	; 240
     298:	ff be       	out	0x3f, r15	; 63
     29a:	01 c4       	rjmp	.+2050   	; 0xa9e <__vector_79+0x22>
     29c:	ff 7f       	andi	r31, 0xFF	; 255
     29e:	3f 00       	.word	0x003f	; ????
     2a0:	00 00       	nop
	...

000002a4 <__trampolines_end>:
     2a4:	63 64       	ori	r22, 0x43	; 67
     2a6:	69 6e       	ori	r22, 0xE9	; 233
     2a8:	6f 70       	andi	r22, 0x0F	; 15
     2aa:	73 75       	andi	r23, 0x53	; 83
     2ac:	78 58       	subi	r23, 0x88	; 136
     2ae:	5b 00       	.word	0x005b	; ????

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df e3       	ldi	r29, 0x3F	; 63
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60
     2c0:	18 be       	out	0x38, r1	; 56
     2c2:	19 be       	out	0x39, r1	; 57
     2c4:	1a be       	out	0x3a, r1	; 58
     2c6:	1b be       	out	0x3b, r1	; 59

000002c8 <__do_copy_data>:
     2c8:	10 e2       	ldi	r17, 0x20	; 32
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e2       	ldi	r27, 0x20	; 32
     2ce:	e0 e9       	ldi	r30, 0x90	; 144
     2d0:	fa e5       	ldi	r31, 0x5A	; 90
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0b bf       	out	0x3b, r16	; 59
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x14>
     2d8:	07 90       	elpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	ae 3d       	cpi	r26, 0xDE	; 222
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0x10>
     2e2:	1b be       	out	0x3b, r1	; 59

000002e4 <__do_clear_bss>:
     2e4:	22 e2       	ldi	r18, 0x22	; 34
     2e6:	ae ed       	ldi	r26, 0xDE	; 222
     2e8:	b0 e2       	ldi	r27, 0x20	; 32
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	ae 32       	cpi	r26, 0x2E	; 46
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <main>
     2f8:	0c 94 46 2d 	jmp	0x5a8c	; 0x5a8c <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     308:	80 91 7d 21 	lds	r24, 0x217D	; 0x80217d <stdio_base>
     30c:	90 91 7e 21 	lds	r25, 0x217E	; 0x80217e <stdio_base+0x1>
     310:	e0 91 79 21 	lds	r30, 0x2179	; 0x802179 <ptr_get>
     314:	f0 91 7a 21 	lds	r31, 0x217A	; 0x80217a <ptr_get+0x1>
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	19 95       	eicall
	return c;
     320:	89 81       	ldd	r24, Y+1	; 0x01
}
     322:	08 2e       	mov	r0, r24
     324:	00 0c       	add	r0, r0
     326:	99 0b       	sbc	r25, r25
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     330:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     332:	80 91 7d 21 	lds	r24, 0x217D	; 0x80217d <stdio_base>
     336:	90 91 7e 21 	lds	r25, 0x217E	; 0x80217e <stdio_base+0x1>
     33a:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <ptr_put>
     33e:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <ptr_put+0x1>
     342:	19 95       	eicall
     344:	99 23       	and	r25, r25
     346:	1c f0       	brlt	.+6      	; 0x34e <_write+0x1e>
		return -1;
	}
	return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     352:	08 95       	ret

00000354 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	08 b6       	in	r0, 0x38	; 56
     360:	0f 92       	push	r0
     362:	18 be       	out	0x38, r1	; 56
     364:	09 b6       	in	r0, 0x39	; 57
     366:	0f 92       	push	r0
     368:	19 be       	out	0x39, r1	; 57
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	1b be       	out	0x3b, r1	; 59
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     388:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     38c:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     390:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <adca_callback>
     394:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <adca_callback+0x1>
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	19 95       	eicall
}
     3a0:	ff 91       	pop	r31
     3a2:	ef 91       	pop	r30
     3a4:	bf 91       	pop	r27
     3a6:	af 91       	pop	r26
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	7f 91       	pop	r23
     3ae:	6f 91       	pop	r22
     3b0:	5f 91       	pop	r21
     3b2:	4f 91       	pop	r20
     3b4:	3f 91       	pop	r19
     3b6:	2f 91       	pop	r18
     3b8:	0f 90       	pop	r0
     3ba:	0b be       	out	0x3b, r0	; 59
     3bc:	0f 90       	pop	r0
     3be:	09 be       	out	0x39, r0	; 57
     3c0:	0f 90       	pop	r0
     3c2:	08 be       	out	0x38, r0	; 56
     3c4:	0f 90       	pop	r0
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	0f 90       	pop	r0
     3ca:	1f 90       	pop	r1
     3cc:	18 95       	reti

000003ce <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3ce:	1f 92       	push	r1
     3d0:	0f 92       	push	r0
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	0f 92       	push	r0
     3d6:	11 24       	eor	r1, r1
     3d8:	08 b6       	in	r0, 0x38	; 56
     3da:	0f 92       	push	r0
     3dc:	18 be       	out	0x38, r1	; 56
     3de:	09 b6       	in	r0, 0x39	; 57
     3e0:	0f 92       	push	r0
     3e2:	19 be       	out	0x39, r1	; 57
     3e4:	0b b6       	in	r0, 0x3b	; 59
     3e6:	0f 92       	push	r0
     3e8:	1b be       	out	0x3b, r1	; 59
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     402:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     406:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     40a:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <adca_callback>
     40e:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <adca_callback+0x1>
     412:	62 e0       	ldi	r22, 0x02	; 2
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	19 95       	eicall
}
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0b be       	out	0x3b, r0	; 59
     436:	0f 90       	pop	r0
     438:	09 be       	out	0x39, r0	; 57
     43a:	0f 90       	pop	r0
     43c:	08 be       	out	0x38, r0	; 56
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	08 b6       	in	r0, 0x38	; 56
     454:	0f 92       	push	r0
     456:	18 be       	out	0x38, r1	; 56
     458:	09 b6       	in	r0, 0x39	; 57
     45a:	0f 92       	push	r0
     45c:	19 be       	out	0x39, r1	; 57
     45e:	0b b6       	in	r0, 0x3b	; 59
     460:	0f 92       	push	r0
     462:	1b be       	out	0x3b, r1	; 59
     464:	2f 93       	push	r18
     466:	3f 93       	push	r19
     468:	4f 93       	push	r20
     46a:	5f 93       	push	r21
     46c:	6f 93       	push	r22
     46e:	7f 93       	push	r23
     470:	8f 93       	push	r24
     472:	9f 93       	push	r25
     474:	af 93       	push	r26
     476:	bf 93       	push	r27
     478:	ef 93       	push	r30
     47a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     47c:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     480:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     484:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <adca_callback>
     488:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <adca_callback+0x1>
     48c:	64 e0       	ldi	r22, 0x04	; 4
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	19 95       	eicall
}
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	bf 91       	pop	r27
     49a:	af 91       	pop	r26
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	7f 91       	pop	r23
     4a2:	6f 91       	pop	r22
     4a4:	5f 91       	pop	r21
     4a6:	4f 91       	pop	r20
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0b be       	out	0x3b, r0	; 59
     4b0:	0f 90       	pop	r0
     4b2:	09 be       	out	0x39, r0	; 57
     4b4:	0f 90       	pop	r0
     4b6:	08 be       	out	0x38, r0	; 56
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
     4cc:	08 b6       	in	r0, 0x38	; 56
     4ce:	0f 92       	push	r0
     4d0:	18 be       	out	0x38, r1	; 56
     4d2:	09 b6       	in	r0, 0x39	; 57
     4d4:	0f 92       	push	r0
     4d6:	19 be       	out	0x39, r1	; 57
     4d8:	0b b6       	in	r0, 0x3b	; 59
     4da:	0f 92       	push	r0
     4dc:	1b be       	out	0x3b, r1	; 59
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4f6:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4fa:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4fe:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <adca_callback>
     502:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <adca_callback+0x1>
     506:	68 e0       	ldi	r22, 0x08	; 8
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	19 95       	eicall
}
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	bf 91       	pop	r27
     514:	af 91       	pop	r26
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	7f 91       	pop	r23
     51c:	6f 91       	pop	r22
     51e:	5f 91       	pop	r21
     520:	4f 91       	pop	r20
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0b be       	out	0x3b, r0	; 59
     52a:	0f 90       	pop	r0
     52c:	09 be       	out	0x39, r0	; 57
     52e:	0f 90       	pop	r0
     530:	08 be       	out	0x38, r0	; 56
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     53c:	1f 92       	push	r1
     53e:	0f 92       	push	r0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	08 b6       	in	r0, 0x38	; 56
     548:	0f 92       	push	r0
     54a:	18 be       	out	0x38, r1	; 56
     54c:	09 b6       	in	r0, 0x39	; 57
     54e:	0f 92       	push	r0
     550:	19 be       	out	0x39, r1	; 57
     552:	0b b6       	in	r0, 0x3b	; 59
     554:	0f 92       	push	r0
     556:	1b be       	out	0x3b, r1	; 59
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     570:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <tc_tcc0_ovf_callback>
     574:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <tc_tcc0_ovf_callback+0x1>
     578:	30 97       	sbiw	r30, 0x00	; 0
     57a:	09 f0       	breq	.+2      	; 0x57e <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     57c:	19 95       	eicall
	}
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0b be       	out	0x3b, r0	; 59
     59a:	0f 90       	pop	r0
     59c:	09 be       	out	0x39, r0	; 57
     59e:	0f 90       	pop	r0
     5a0:	08 be       	out	0x38, r0	; 56
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     5ac:	1f 92       	push	r1
     5ae:	0f 92       	push	r0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	0f 92       	push	r0
     5b4:	11 24       	eor	r1, r1
     5b6:	08 b6       	in	r0, 0x38	; 56
     5b8:	0f 92       	push	r0
     5ba:	18 be       	out	0x38, r1	; 56
     5bc:	09 b6       	in	r0, 0x39	; 57
     5be:	0f 92       	push	r0
     5c0:	19 be       	out	0x39, r1	; 57
     5c2:	0b b6       	in	r0, 0x3b	; 59
     5c4:	0f 92       	push	r0
     5c6:	1b be       	out	0x3b, r1	; 59
     5c8:	2f 93       	push	r18
     5ca:	3f 93       	push	r19
     5cc:	4f 93       	push	r20
     5ce:	5f 93       	push	r21
     5d0:	6f 93       	push	r22
     5d2:	7f 93       	push	r23
     5d4:	8f 93       	push	r24
     5d6:	9f 93       	push	r25
     5d8:	af 93       	push	r26
     5da:	bf 93       	push	r27
     5dc:	ef 93       	push	r30
     5de:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     5e0:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <tc_tcc0_err_callback>
     5e4:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <tc_tcc0_err_callback+0x1>
     5e8:	30 97       	sbiw	r30, 0x00	; 0
     5ea:	09 f0       	breq	.+2      	; 0x5ee <__vector_15+0x42>
		tc_tcc0_err_callback();
     5ec:	19 95       	eicall
	}
}
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	0f 90       	pop	r0
     608:	0b be       	out	0x3b, r0	; 59
     60a:	0f 90       	pop	r0
     60c:	09 be       	out	0x39, r0	; 57
     60e:	0f 90       	pop	r0
     610:	08 be       	out	0x38, r0	; 56
     612:	0f 90       	pop	r0
     614:	0f be       	out	0x3f, r0	; 63
     616:	0f 90       	pop	r0
     618:	1f 90       	pop	r1
     61a:	18 95       	reti

0000061c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     61c:	1f 92       	push	r1
     61e:	0f 92       	push	r0
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	0f 92       	push	r0
     624:	11 24       	eor	r1, r1
     626:	08 b6       	in	r0, 0x38	; 56
     628:	0f 92       	push	r0
     62a:	18 be       	out	0x38, r1	; 56
     62c:	09 b6       	in	r0, 0x39	; 57
     62e:	0f 92       	push	r0
     630:	19 be       	out	0x39, r1	; 57
     632:	0b b6       	in	r0, 0x3b	; 59
     634:	0f 92       	push	r0
     636:	1b be       	out	0x3b, r1	; 59
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     650:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <tc_tcc0_cca_callback>
     654:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <tc_tcc0_cca_callback+0x1>
     658:	30 97       	sbiw	r30, 0x00	; 0
     65a:	09 f0       	breq	.+2      	; 0x65e <__vector_16+0x42>
		tc_tcc0_cca_callback();
     65c:	19 95       	eicall
	}
}
     65e:	ff 91       	pop	r31
     660:	ef 91       	pop	r30
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	0f 90       	pop	r0
     678:	0b be       	out	0x3b, r0	; 59
     67a:	0f 90       	pop	r0
     67c:	09 be       	out	0x39, r0	; 57
     67e:	0f 90       	pop	r0
     680:	08 be       	out	0x38, r0	; 56
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     68c:	1f 92       	push	r1
     68e:	0f 92       	push	r0
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	0f 92       	push	r0
     694:	11 24       	eor	r1, r1
     696:	08 b6       	in	r0, 0x38	; 56
     698:	0f 92       	push	r0
     69a:	18 be       	out	0x38, r1	; 56
     69c:	09 b6       	in	r0, 0x39	; 57
     69e:	0f 92       	push	r0
     6a0:	19 be       	out	0x39, r1	; 57
     6a2:	0b b6       	in	r0, 0x3b	; 59
     6a4:	0f 92       	push	r0
     6a6:	1b be       	out	0x3b, r1	; 59
     6a8:	2f 93       	push	r18
     6aa:	3f 93       	push	r19
     6ac:	4f 93       	push	r20
     6ae:	5f 93       	push	r21
     6b0:	6f 93       	push	r22
     6b2:	7f 93       	push	r23
     6b4:	8f 93       	push	r24
     6b6:	9f 93       	push	r25
     6b8:	af 93       	push	r26
     6ba:	bf 93       	push	r27
     6bc:	ef 93       	push	r30
     6be:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     6c0:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <tc_tcc0_ccb_callback>
     6c4:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <tc_tcc0_ccb_callback+0x1>
     6c8:	30 97       	sbiw	r30, 0x00	; 0
     6ca:	09 f0       	breq	.+2      	; 0x6ce <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     6cc:	19 95       	eicall
	}
}
     6ce:	ff 91       	pop	r31
     6d0:	ef 91       	pop	r30
     6d2:	bf 91       	pop	r27
     6d4:	af 91       	pop	r26
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	7f 91       	pop	r23
     6dc:	6f 91       	pop	r22
     6de:	5f 91       	pop	r21
     6e0:	4f 91       	pop	r20
     6e2:	3f 91       	pop	r19
     6e4:	2f 91       	pop	r18
     6e6:	0f 90       	pop	r0
     6e8:	0b be       	out	0x3b, r0	; 59
     6ea:	0f 90       	pop	r0
     6ec:	09 be       	out	0x39, r0	; 57
     6ee:	0f 90       	pop	r0
     6f0:	08 be       	out	0x38, r0	; 56
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	11 24       	eor	r1, r1
     706:	08 b6       	in	r0, 0x38	; 56
     708:	0f 92       	push	r0
     70a:	18 be       	out	0x38, r1	; 56
     70c:	09 b6       	in	r0, 0x39	; 57
     70e:	0f 92       	push	r0
     710:	19 be       	out	0x39, r1	; 57
     712:	0b b6       	in	r0, 0x3b	; 59
     714:	0f 92       	push	r0
     716:	1b be       	out	0x3b, r1	; 59
     718:	2f 93       	push	r18
     71a:	3f 93       	push	r19
     71c:	4f 93       	push	r20
     71e:	5f 93       	push	r21
     720:	6f 93       	push	r22
     722:	7f 93       	push	r23
     724:	8f 93       	push	r24
     726:	9f 93       	push	r25
     728:	af 93       	push	r26
     72a:	bf 93       	push	r27
     72c:	ef 93       	push	r30
     72e:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     730:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <tc_tcc0_ccc_callback>
     734:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <tc_tcc0_ccc_callback+0x1>
     738:	30 97       	sbiw	r30, 0x00	; 0
     73a:	09 f0       	breq	.+2      	; 0x73e <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     73c:	19 95       	eicall
	}
}
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	bf 91       	pop	r27
     744:	af 91       	pop	r26
     746:	9f 91       	pop	r25
     748:	8f 91       	pop	r24
     74a:	7f 91       	pop	r23
     74c:	6f 91       	pop	r22
     74e:	5f 91       	pop	r21
     750:	4f 91       	pop	r20
     752:	3f 91       	pop	r19
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0b be       	out	0x3b, r0	; 59
     75a:	0f 90       	pop	r0
     75c:	09 be       	out	0x39, r0	; 57
     75e:	0f 90       	pop	r0
     760:	08 be       	out	0x38, r0	; 56
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0
     768:	1f 90       	pop	r1
     76a:	18 95       	reti

0000076c <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     76c:	1f 92       	push	r1
     76e:	0f 92       	push	r0
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	0f 92       	push	r0
     774:	11 24       	eor	r1, r1
     776:	08 b6       	in	r0, 0x38	; 56
     778:	0f 92       	push	r0
     77a:	18 be       	out	0x38, r1	; 56
     77c:	09 b6       	in	r0, 0x39	; 57
     77e:	0f 92       	push	r0
     780:	19 be       	out	0x39, r1	; 57
     782:	0b b6       	in	r0, 0x3b	; 59
     784:	0f 92       	push	r0
     786:	1b be       	out	0x3b, r1	; 59
     788:	2f 93       	push	r18
     78a:	3f 93       	push	r19
     78c:	4f 93       	push	r20
     78e:	5f 93       	push	r21
     790:	6f 93       	push	r22
     792:	7f 93       	push	r23
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	af 93       	push	r26
     79a:	bf 93       	push	r27
     79c:	ef 93       	push	r30
     79e:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     7a0:	e0 91 04 21 	lds	r30, 0x2104	; 0x802104 <tc_tcc0_ccd_callback>
     7a4:	f0 91 05 21 	lds	r31, 0x2105	; 0x802105 <tc_tcc0_ccd_callback+0x1>
     7a8:	30 97       	sbiw	r30, 0x00	; 0
     7aa:	09 f0       	breq	.+2      	; 0x7ae <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     7ac:	19 95       	eicall
	}
}
     7ae:	ff 91       	pop	r31
     7b0:	ef 91       	pop	r30
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	7f 91       	pop	r23
     7bc:	6f 91       	pop	r22
     7be:	5f 91       	pop	r21
     7c0:	4f 91       	pop	r20
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	0b be       	out	0x3b, r0	; 59
     7ca:	0f 90       	pop	r0
     7cc:	09 be       	out	0x39, r0	; 57
     7ce:	0f 90       	pop	r0
     7d0:	08 be       	out	0x38, r0	; 56
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	08 b6       	in	r0, 0x38	; 56
     7e8:	0f 92       	push	r0
     7ea:	18 be       	out	0x38, r1	; 56
     7ec:	09 b6       	in	r0, 0x39	; 57
     7ee:	0f 92       	push	r0
     7f0:	19 be       	out	0x39, r1	; 57
     7f2:	0b b6       	in	r0, 0x3b	; 59
     7f4:	0f 92       	push	r0
     7f6:	1b be       	out	0x3b, r1	; 59
     7f8:	2f 93       	push	r18
     7fa:	3f 93       	push	r19
     7fc:	4f 93       	push	r20
     7fe:	5f 93       	push	r21
     800:	6f 93       	push	r22
     802:	7f 93       	push	r23
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	af 93       	push	r26
     80a:	bf 93       	push	r27
     80c:	ef 93       	push	r30
     80e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     810:	e0 91 02 21 	lds	r30, 0x2102	; 0x802102 <tc_tcc1_ovf_callback>
     814:	f0 91 03 21 	lds	r31, 0x2103	; 0x802103 <tc_tcc1_ovf_callback+0x1>
     818:	30 97       	sbiw	r30, 0x00	; 0
     81a:	09 f0       	breq	.+2      	; 0x81e <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     81c:	19 95       	eicall
	}
}
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0b be       	out	0x3b, r0	; 59
     83a:	0f 90       	pop	r0
     83c:	09 be       	out	0x39, r0	; 57
     83e:	0f 90       	pop	r0
     840:	08 be       	out	0x38, r0	; 56
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	08 b6       	in	r0, 0x38	; 56
     858:	0f 92       	push	r0
     85a:	18 be       	out	0x38, r1	; 56
     85c:	09 b6       	in	r0, 0x39	; 57
     85e:	0f 92       	push	r0
     860:	19 be       	out	0x39, r1	; 57
     862:	0b b6       	in	r0, 0x3b	; 59
     864:	0f 92       	push	r0
     866:	1b be       	out	0x3b, r1	; 59
     868:	2f 93       	push	r18
     86a:	3f 93       	push	r19
     86c:	4f 93       	push	r20
     86e:	5f 93       	push	r21
     870:	6f 93       	push	r22
     872:	7f 93       	push	r23
     874:	8f 93       	push	r24
     876:	9f 93       	push	r25
     878:	af 93       	push	r26
     87a:	bf 93       	push	r27
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     880:	e0 91 00 21 	lds	r30, 0x2100	; 0x802100 <tc_tcc1_err_callback>
     884:	f0 91 01 21 	lds	r31, 0x2101	; 0x802101 <tc_tcc1_err_callback+0x1>
     888:	30 97       	sbiw	r30, 0x00	; 0
     88a:	09 f0       	breq	.+2      	; 0x88e <__vector_21+0x42>
		tc_tcc1_err_callback();
     88c:	19 95       	eicall
	}
}
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	bf 91       	pop	r27
     894:	af 91       	pop	r26
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	7f 91       	pop	r23
     89c:	6f 91       	pop	r22
     89e:	5f 91       	pop	r21
     8a0:	4f 91       	pop	r20
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0b be       	out	0x3b, r0	; 59
     8aa:	0f 90       	pop	r0
     8ac:	09 be       	out	0x39, r0	; 57
     8ae:	0f 90       	pop	r0
     8b0:	08 be       	out	0x38, r0	; 56
     8b2:	0f 90       	pop	r0
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti

000008bc <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	08 b6       	in	r0, 0x38	; 56
     8c8:	0f 92       	push	r0
     8ca:	18 be       	out	0x38, r1	; 56
     8cc:	09 b6       	in	r0, 0x39	; 57
     8ce:	0f 92       	push	r0
     8d0:	19 be       	out	0x39, r1	; 57
     8d2:	0b b6       	in	r0, 0x3b	; 59
     8d4:	0f 92       	push	r0
     8d6:	1b be       	out	0x3b, r1	; 59
     8d8:	2f 93       	push	r18
     8da:	3f 93       	push	r19
     8dc:	4f 93       	push	r20
     8de:	5f 93       	push	r21
     8e0:	6f 93       	push	r22
     8e2:	7f 93       	push	r23
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     8f0:	e0 91 fe 20 	lds	r30, 0x20FE	; 0x8020fe <tc_tcc1_cca_callback>
     8f4:	f0 91 ff 20 	lds	r31, 0x20FF	; 0x8020ff <tc_tcc1_cca_callback+0x1>
     8f8:	30 97       	sbiw	r30, 0x00	; 0
     8fa:	09 f0       	breq	.+2      	; 0x8fe <__vector_22+0x42>
		tc_tcc1_cca_callback();
     8fc:	19 95       	eicall
	}
}
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	bf 91       	pop	r27
     904:	af 91       	pop	r26
     906:	9f 91       	pop	r25
     908:	8f 91       	pop	r24
     90a:	7f 91       	pop	r23
     90c:	6f 91       	pop	r22
     90e:	5f 91       	pop	r21
     910:	4f 91       	pop	r20
     912:	3f 91       	pop	r19
     914:	2f 91       	pop	r18
     916:	0f 90       	pop	r0
     918:	0b be       	out	0x3b, r0	; 59
     91a:	0f 90       	pop	r0
     91c:	09 be       	out	0x39, r0	; 57
     91e:	0f 90       	pop	r0
     920:	08 be       	out	0x38, r0	; 56
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti

0000092c <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     92c:	1f 92       	push	r1
     92e:	0f 92       	push	r0
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	0f 92       	push	r0
     934:	11 24       	eor	r1, r1
     936:	08 b6       	in	r0, 0x38	; 56
     938:	0f 92       	push	r0
     93a:	18 be       	out	0x38, r1	; 56
     93c:	09 b6       	in	r0, 0x39	; 57
     93e:	0f 92       	push	r0
     940:	19 be       	out	0x39, r1	; 57
     942:	0b b6       	in	r0, 0x3b	; 59
     944:	0f 92       	push	r0
     946:	1b be       	out	0x3b, r1	; 59
     948:	2f 93       	push	r18
     94a:	3f 93       	push	r19
     94c:	4f 93       	push	r20
     94e:	5f 93       	push	r21
     950:	6f 93       	push	r22
     952:	7f 93       	push	r23
     954:	8f 93       	push	r24
     956:	9f 93       	push	r25
     958:	af 93       	push	r26
     95a:	bf 93       	push	r27
     95c:	ef 93       	push	r30
     95e:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     960:	e0 91 fc 20 	lds	r30, 0x20FC	; 0x8020fc <tc_tcc1_ccb_callback>
     964:	f0 91 fd 20 	lds	r31, 0x20FD	; 0x8020fd <tc_tcc1_ccb_callback+0x1>
     968:	30 97       	sbiw	r30, 0x00	; 0
     96a:	09 f0       	breq	.+2      	; 0x96e <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     96c:	19 95       	eicall
	}
}
     96e:	ff 91       	pop	r31
     970:	ef 91       	pop	r30
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	7f 91       	pop	r23
     97c:	6f 91       	pop	r22
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	0f 90       	pop	r0
     988:	0b be       	out	0x3b, r0	; 59
     98a:	0f 90       	pop	r0
     98c:	09 be       	out	0x39, r0	; 57
     98e:	0f 90       	pop	r0
     990:	08 be       	out	0x38, r0	; 56
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     99c:	1f 92       	push	r1
     99e:	0f 92       	push	r0
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	0f 92       	push	r0
     9a4:	11 24       	eor	r1, r1
     9a6:	08 b6       	in	r0, 0x38	; 56
     9a8:	0f 92       	push	r0
     9aa:	18 be       	out	0x38, r1	; 56
     9ac:	09 b6       	in	r0, 0x39	; 57
     9ae:	0f 92       	push	r0
     9b0:	19 be       	out	0x39, r1	; 57
     9b2:	0b b6       	in	r0, 0x3b	; 59
     9b4:	0f 92       	push	r0
     9b6:	1b be       	out	0x3b, r1	; 59
     9b8:	2f 93       	push	r18
     9ba:	3f 93       	push	r19
     9bc:	4f 93       	push	r20
     9be:	5f 93       	push	r21
     9c0:	6f 93       	push	r22
     9c2:	7f 93       	push	r23
     9c4:	8f 93       	push	r24
     9c6:	9f 93       	push	r25
     9c8:	af 93       	push	r26
     9ca:	bf 93       	push	r27
     9cc:	ef 93       	push	r30
     9ce:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     9d0:	e0 91 fa 20 	lds	r30, 0x20FA	; 0x8020fa <tc_tcd0_ovf_callback>
     9d4:	f0 91 fb 20 	lds	r31, 0x20FB	; 0x8020fb <tc_tcd0_ovf_callback+0x1>
     9d8:	30 97       	sbiw	r30, 0x00	; 0
     9da:	09 f0       	breq	.+2      	; 0x9de <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     9dc:	19 95       	eicall
	}
}
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0b be       	out	0x3b, r0	; 59
     9fa:	0f 90       	pop	r0
     9fc:	09 be       	out	0x39, r0	; 57
     9fe:	0f 90       	pop	r0
     a00:	08 be       	out	0x38, r0	; 56
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	08 b6       	in	r0, 0x38	; 56
     a18:	0f 92       	push	r0
     a1a:	18 be       	out	0x38, r1	; 56
     a1c:	09 b6       	in	r0, 0x39	; 57
     a1e:	0f 92       	push	r0
     a20:	19 be       	out	0x39, r1	; 57
     a22:	0b b6       	in	r0, 0x3b	; 59
     a24:	0f 92       	push	r0
     a26:	1b be       	out	0x3b, r1	; 59
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     a40:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <tc_tcd0_err_callback>
     a44:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <tc_tcd0_err_callback+0x1>
     a48:	30 97       	sbiw	r30, 0x00	; 0
     a4a:	09 f0       	breq	.+2      	; 0xa4e <__vector_78+0x42>
		tc_tcd0_err_callback();
     a4c:	19 95       	eicall
	}
}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0b be       	out	0x3b, r0	; 59
     a6a:	0f 90       	pop	r0
     a6c:	09 be       	out	0x39, r0	; 57
     a6e:	0f 90       	pop	r0
     a70:	08 be       	out	0x38, r0	; 56
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     a7c:	1f 92       	push	r1
     a7e:	0f 92       	push	r0
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1
     a86:	08 b6       	in	r0, 0x38	; 56
     a88:	0f 92       	push	r0
     a8a:	18 be       	out	0x38, r1	; 56
     a8c:	09 b6       	in	r0, 0x39	; 57
     a8e:	0f 92       	push	r0
     a90:	19 be       	out	0x39, r1	; 57
     a92:	0b b6       	in	r0, 0x3b	; 59
     a94:	0f 92       	push	r0
     a96:	1b be       	out	0x3b, r1	; 59
     a98:	2f 93       	push	r18
     a9a:	3f 93       	push	r19
     a9c:	4f 93       	push	r20
     a9e:	5f 93       	push	r21
     aa0:	6f 93       	push	r22
     aa2:	7f 93       	push	r23
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	af 93       	push	r26
     aaa:	bf 93       	push	r27
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     ab0:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <tc_tcd0_cca_callback>
     ab4:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <tc_tcd0_cca_callback+0x1>
     ab8:	30 97       	sbiw	r30, 0x00	; 0
     aba:	09 f0       	breq	.+2      	; 0xabe <__vector_79+0x42>
		tc_tcd0_cca_callback();
     abc:	19 95       	eicall
	}
}
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0b be       	out	0x3b, r0	; 59
     ada:	0f 90       	pop	r0
     adc:	09 be       	out	0x39, r0	; 57
     ade:	0f 90       	pop	r0
     ae0:	08 be       	out	0x38, r0	; 56
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	08 b6       	in	r0, 0x38	; 56
     af8:	0f 92       	push	r0
     afa:	18 be       	out	0x38, r1	; 56
     afc:	09 b6       	in	r0, 0x39	; 57
     afe:	0f 92       	push	r0
     b00:	19 be       	out	0x39, r1	; 57
     b02:	0b b6       	in	r0, 0x3b	; 59
     b04:	0f 92       	push	r0
     b06:	1b be       	out	0x3b, r1	; 59
     b08:	2f 93       	push	r18
     b0a:	3f 93       	push	r19
     b0c:	4f 93       	push	r20
     b0e:	5f 93       	push	r21
     b10:	6f 93       	push	r22
     b12:	7f 93       	push	r23
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	af 93       	push	r26
     b1a:	bf 93       	push	r27
     b1c:	ef 93       	push	r30
     b1e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     b20:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <tc_tcd0_ccb_callback>
     b24:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <tc_tcd0_ccb_callback+0x1>
     b28:	30 97       	sbiw	r30, 0x00	; 0
     b2a:	09 f0       	breq	.+2      	; 0xb2e <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     b2c:	19 95       	eicall
	}
}
     b2e:	ff 91       	pop	r31
     b30:	ef 91       	pop	r30
     b32:	bf 91       	pop	r27
     b34:	af 91       	pop	r26
     b36:	9f 91       	pop	r25
     b38:	8f 91       	pop	r24
     b3a:	7f 91       	pop	r23
     b3c:	6f 91       	pop	r22
     b3e:	5f 91       	pop	r21
     b40:	4f 91       	pop	r20
     b42:	3f 91       	pop	r19
     b44:	2f 91       	pop	r18
     b46:	0f 90       	pop	r0
     b48:	0b be       	out	0x3b, r0	; 59
     b4a:	0f 90       	pop	r0
     b4c:	09 be       	out	0x39, r0	; 57
     b4e:	0f 90       	pop	r0
     b50:	08 be       	out	0x38, r0	; 56
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	08 b6       	in	r0, 0x38	; 56
     b68:	0f 92       	push	r0
     b6a:	18 be       	out	0x38, r1	; 56
     b6c:	09 b6       	in	r0, 0x39	; 57
     b6e:	0f 92       	push	r0
     b70:	19 be       	out	0x39, r1	; 57
     b72:	0b b6       	in	r0, 0x3b	; 59
     b74:	0f 92       	push	r0
     b76:	1b be       	out	0x3b, r1	; 59
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     b90:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <tc_tcd0_ccc_callback>
     b94:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <tc_tcd0_ccc_callback+0x1>
     b98:	30 97       	sbiw	r30, 0x00	; 0
     b9a:	09 f0       	breq	.+2      	; 0xb9e <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     b9c:	19 95       	eicall
	}
}
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0b be       	out	0x3b, r0	; 59
     bba:	0f 90       	pop	r0
     bbc:	09 be       	out	0x39, r0	; 57
     bbe:	0f 90       	pop	r0
     bc0:	08 be       	out	0x38, r0	; 56
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	08 b6       	in	r0, 0x38	; 56
     bd8:	0f 92       	push	r0
     bda:	18 be       	out	0x38, r1	; 56
     bdc:	09 b6       	in	r0, 0x39	; 57
     bde:	0f 92       	push	r0
     be0:	19 be       	out	0x39, r1	; 57
     be2:	0b b6       	in	r0, 0x3b	; 59
     be4:	0f 92       	push	r0
     be6:	1b be       	out	0x3b, r1	; 59
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     c00:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <tc_tcd0_ccd_callback>
     c04:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <tc_tcd0_ccd_callback+0x1>
     c08:	30 97       	sbiw	r30, 0x00	; 0
     c0a:	09 f0       	breq	.+2      	; 0xc0e <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     c0c:	19 95       	eicall
	}
}
     c0e:	ff 91       	pop	r31
     c10:	ef 91       	pop	r30
     c12:	bf 91       	pop	r27
     c14:	af 91       	pop	r26
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	7f 91       	pop	r23
     c1c:	6f 91       	pop	r22
     c1e:	5f 91       	pop	r21
     c20:	4f 91       	pop	r20
     c22:	3f 91       	pop	r19
     c24:	2f 91       	pop	r18
     c26:	0f 90       	pop	r0
     c28:	0b be       	out	0x3b, r0	; 59
     c2a:	0f 90       	pop	r0
     c2c:	09 be       	out	0x39, r0	; 57
     c2e:	0f 90       	pop	r0
     c30:	08 be       	out	0x38, r0	; 56
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	08 b6       	in	r0, 0x38	; 56
     c48:	0f 92       	push	r0
     c4a:	18 be       	out	0x38, r1	; 56
     c4c:	09 b6       	in	r0, 0x39	; 57
     c4e:	0f 92       	push	r0
     c50:	19 be       	out	0x39, r1	; 57
     c52:	0b b6       	in	r0, 0x3b	; 59
     c54:	0f 92       	push	r0
     c56:	1b be       	out	0x3b, r1	; 59
     c58:	2f 93       	push	r18
     c5a:	3f 93       	push	r19
     c5c:	4f 93       	push	r20
     c5e:	5f 93       	push	r21
     c60:	6f 93       	push	r22
     c62:	7f 93       	push	r23
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
     c68:	af 93       	push	r26
     c6a:	bf 93       	push	r27
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     c70:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <tc_tcd1_ovf_callback>
     c74:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <tc_tcd1_ovf_callback+0x1>
     c78:	30 97       	sbiw	r30, 0x00	; 0
     c7a:	09 f0       	breq	.+2      	; 0xc7e <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     c7c:	19 95       	eicall
	}
}
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	bf 91       	pop	r27
     c84:	af 91       	pop	r26
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	7f 91       	pop	r23
     c8c:	6f 91       	pop	r22
     c8e:	5f 91       	pop	r21
     c90:	4f 91       	pop	r20
     c92:	3f 91       	pop	r19
     c94:	2f 91       	pop	r18
     c96:	0f 90       	pop	r0
     c98:	0b be       	out	0x3b, r0	; 59
     c9a:	0f 90       	pop	r0
     c9c:	09 be       	out	0x39, r0	; 57
     c9e:	0f 90       	pop	r0
     ca0:	08 be       	out	0x38, r0	; 56
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	08 b6       	in	r0, 0x38	; 56
     cb8:	0f 92       	push	r0
     cba:	18 be       	out	0x38, r1	; 56
     cbc:	09 b6       	in	r0, 0x39	; 57
     cbe:	0f 92       	push	r0
     cc0:	19 be       	out	0x39, r1	; 57
     cc2:	0b b6       	in	r0, 0x3b	; 59
     cc4:	0f 92       	push	r0
     cc6:	1b be       	out	0x3b, r1	; 59
     cc8:	2f 93       	push	r18
     cca:	3f 93       	push	r19
     ccc:	4f 93       	push	r20
     cce:	5f 93       	push	r21
     cd0:	6f 93       	push	r22
     cd2:	7f 93       	push	r23
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	ef 93       	push	r30
     cde:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     ce0:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <tc_tcd1_err_callback>
     ce4:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <tc_tcd1_err_callback+0x1>
     ce8:	30 97       	sbiw	r30, 0x00	; 0
     cea:	09 f0       	breq	.+2      	; 0xcee <__vector_84+0x42>
		tc_tcd1_err_callback();
     cec:	19 95       	eicall
	}
}
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0b be       	out	0x3b, r0	; 59
     d0a:	0f 90       	pop	r0
     d0c:	09 be       	out	0x39, r0	; 57
     d0e:	0f 90       	pop	r0
     d10:	08 be       	out	0x38, r0	; 56
     d12:	0f 90       	pop	r0
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	0f 90       	pop	r0
     d18:	1f 90       	pop	r1
     d1a:	18 95       	reti

00000d1c <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	08 b6       	in	r0, 0x38	; 56
     d28:	0f 92       	push	r0
     d2a:	18 be       	out	0x38, r1	; 56
     d2c:	09 b6       	in	r0, 0x39	; 57
     d2e:	0f 92       	push	r0
     d30:	19 be       	out	0x39, r1	; 57
     d32:	0b b6       	in	r0, 0x3b	; 59
     d34:	0f 92       	push	r0
     d36:	1b be       	out	0x3b, r1	; 59
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     d50:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <tc_tcd1_cca_callback>
     d54:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <tc_tcd1_cca_callback+0x1>
     d58:	30 97       	sbiw	r30, 0x00	; 0
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__vector_85+0x42>
		tc_tcd1_cca_callback();
     d5c:	19 95       	eicall
	}
}
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0b be       	out	0x3b, r0	; 59
     d7a:	0f 90       	pop	r0
     d7c:	09 be       	out	0x39, r0	; 57
     d7e:	0f 90       	pop	r0
     d80:	08 be       	out	0x38, r0	; 56
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	08 b6       	in	r0, 0x38	; 56
     d98:	0f 92       	push	r0
     d9a:	18 be       	out	0x38, r1	; 56
     d9c:	09 b6       	in	r0, 0x39	; 57
     d9e:	0f 92       	push	r0
     da0:	19 be       	out	0x39, r1	; 57
     da2:	0b b6       	in	r0, 0x3b	; 59
     da4:	0f 92       	push	r0
     da6:	1b be       	out	0x3b, r1	; 59
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	4f 93       	push	r20
     dae:	5f 93       	push	r21
     db0:	6f 93       	push	r22
     db2:	7f 93       	push	r23
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	af 93       	push	r26
     dba:	bf 93       	push	r27
     dbc:	ef 93       	push	r30
     dbe:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     dc0:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <tc_tcd1_ccb_callback>
     dc4:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <tc_tcd1_ccb_callback+0x1>
     dc8:	30 97       	sbiw	r30, 0x00	; 0
     dca:	09 f0       	breq	.+2      	; 0xdce <__vector_86+0x42>
		tc_tcd1_ccb_callback();
     dcc:	19 95       	eicall
	}
}
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0b be       	out	0x3b, r0	; 59
     dea:	0f 90       	pop	r0
     dec:	09 be       	out	0x39, r0	; 57
     dee:	0f 90       	pop	r0
     df0:	08 be       	out	0x38, r0	; 56
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	08 b6       	in	r0, 0x38	; 56
     e08:	0f 92       	push	r0
     e0a:	18 be       	out	0x38, r1	; 56
     e0c:	09 b6       	in	r0, 0x39	; 57
     e0e:	0f 92       	push	r0
     e10:	19 be       	out	0x39, r1	; 57
     e12:	0b b6       	in	r0, 0x3b	; 59
     e14:	0f 92       	push	r0
     e16:	1b be       	out	0x3b, r1	; 59
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     e30:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <tc_tce0_err_callback>
     e34:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <tc_tce0_err_callback+0x1>
     e38:	30 97       	sbiw	r30, 0x00	; 0
     e3a:	09 f0       	breq	.+2      	; 0xe3e <__vector_48+0x42>
		tc_tce0_err_callback();
     e3c:	19 95       	eicall
	}
}
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0b be       	out	0x3b, r0	; 59
     e5a:	0f 90       	pop	r0
     e5c:	09 be       	out	0x39, r0	; 57
     e5e:	0f 90       	pop	r0
     e60:	08 be       	out	0x38, r0	; 56
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	08 b6       	in	r0, 0x38	; 56
     e78:	0f 92       	push	r0
     e7a:	18 be       	out	0x38, r1	; 56
     e7c:	09 b6       	in	r0, 0x39	; 57
     e7e:	0f 92       	push	r0
     e80:	19 be       	out	0x39, r1	; 57
     e82:	0b b6       	in	r0, 0x3b	; 59
     e84:	0f 92       	push	r0
     e86:	1b be       	out	0x3b, r1	; 59
     e88:	2f 93       	push	r18
     e8a:	3f 93       	push	r19
     e8c:	4f 93       	push	r20
     e8e:	5f 93       	push	r21
     e90:	6f 93       	push	r22
     e92:	7f 93       	push	r23
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	af 93       	push	r26
     e9a:	bf 93       	push	r27
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     ea0:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <tc_tce0_cca_callback>
     ea4:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <tc_tce0_cca_callback+0x1>
     ea8:	30 97       	sbiw	r30, 0x00	; 0
     eaa:	09 f0       	breq	.+2      	; 0xeae <__vector_49+0x42>
		tc_tce0_cca_callback();
     eac:	19 95       	eicall
	}
}
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	0f 90       	pop	r0
     ec8:	0b be       	out	0x3b, r0	; 59
     eca:	0f 90       	pop	r0
     ecc:	09 be       	out	0x39, r0	; 57
     ece:	0f 90       	pop	r0
     ed0:	08 be       	out	0x38, r0	; 56
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	08 b6       	in	r0, 0x38	; 56
     ee8:	0f 92       	push	r0
     eea:	18 be       	out	0x38, r1	; 56
     eec:	09 b6       	in	r0, 0x39	; 57
     eee:	0f 92       	push	r0
     ef0:	19 be       	out	0x39, r1	; 57
     ef2:	0b b6       	in	r0, 0x3b	; 59
     ef4:	0f 92       	push	r0
     ef6:	1b be       	out	0x3b, r1	; 59
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     f10:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <tc_tce0_ccb_callback>
     f14:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <tc_tce0_ccb_callback+0x1>
     f18:	30 97       	sbiw	r30, 0x00	; 0
     f1a:	09 f0       	breq	.+2      	; 0xf1e <__vector_50+0x42>
		tc_tce0_ccb_callback();
     f1c:	19 95       	eicall
	}
}
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0b be       	out	0x3b, r0	; 59
     f3a:	0f 90       	pop	r0
     f3c:	09 be       	out	0x39, r0	; 57
     f3e:	0f 90       	pop	r0
     f40:	08 be       	out	0x38, r0	; 56
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	08 b6       	in	r0, 0x38	; 56
     f58:	0f 92       	push	r0
     f5a:	18 be       	out	0x38, r1	; 56
     f5c:	09 b6       	in	r0, 0x39	; 57
     f5e:	0f 92       	push	r0
     f60:	19 be       	out	0x39, r1	; 57
     f62:	0b b6       	in	r0, 0x3b	; 59
     f64:	0f 92       	push	r0
     f66:	1b be       	out	0x3b, r1	; 59
     f68:	2f 93       	push	r18
     f6a:	3f 93       	push	r19
     f6c:	4f 93       	push	r20
     f6e:	5f 93       	push	r21
     f70:	6f 93       	push	r22
     f72:	7f 93       	push	r23
     f74:	8f 93       	push	r24
     f76:	9f 93       	push	r25
     f78:	af 93       	push	r26
     f7a:	bf 93       	push	r27
     f7c:	ef 93       	push	r30
     f7e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     f80:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <tc_tce0_ccc_callback>
     f84:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <tc_tce0_ccc_callback+0x1>
     f88:	30 97       	sbiw	r30, 0x00	; 0
     f8a:	09 f0       	breq	.+2      	; 0xf8e <__vector_51+0x42>
		tc_tce0_ccc_callback();
     f8c:	19 95       	eicall
	}
}
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	0b be       	out	0x3b, r0	; 59
     faa:	0f 90       	pop	r0
     fac:	09 be       	out	0x39, r0	; 57
     fae:	0f 90       	pop	r0
     fb0:	08 be       	out	0x38, r0	; 56
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     fbc:	1f 92       	push	r1
     fbe:	0f 92       	push	r0
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	08 b6       	in	r0, 0x38	; 56
     fc8:	0f 92       	push	r0
     fca:	18 be       	out	0x38, r1	; 56
     fcc:	09 b6       	in	r0, 0x39	; 57
     fce:	0f 92       	push	r0
     fd0:	19 be       	out	0x39, r1	; 57
     fd2:	0b b6       	in	r0, 0x3b	; 59
     fd4:	0f 92       	push	r0
     fd6:	1b be       	out	0x3b, r1	; 59
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	ef 93       	push	r30
     fee:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     ff0:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <__data_end>
     ff4:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <__data_end+0x1>
     ff8:	30 97       	sbiw	r30, 0x00	; 0
     ffa:	09 f0       	breq	.+2      	; 0xffe <__vector_52+0x42>
		tc_tce0_ccd_callback();
     ffc:	19 95       	eicall
	}
}
     ffe:	ff 91       	pop	r31
    1000:	ef 91       	pop	r30
    1002:	bf 91       	pop	r27
    1004:	af 91       	pop	r26
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	7f 91       	pop	r23
    100c:	6f 91       	pop	r22
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	0b be       	out	0x3b, r0	; 59
    101a:	0f 90       	pop	r0
    101c:	09 be       	out	0x39, r0	; 57
    101e:	0f 90       	pop	r0
    1020:	08 be       	out	0x38, r0	; 56
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1030:	e0 91 10 21 	lds	r30, 0x2110	; 0x802110 <transfer>
    1034:	f0 91 11 21 	lds	r31, 0x2111	; 0x802111 <transfer+0x1>
    1038:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    103a:	83 ff       	sbrs	r24, 3
    103c:	08 c0       	rjmp	.+16     	; 0x104e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    103e:	88 60       	ori	r24, 0x08	; 8
    1040:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1046:	86 ef       	ldi	r24, 0xF6	; 246
    1048:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <transfer+0xa>
    104c:	83 c0       	rjmp	.+262    	; 0x1154 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    104e:	98 2f       	mov	r25, r24
    1050:	94 71       	andi	r25, 0x14	; 20
    1052:	31 f0       	breq	.+12     	; 0x1060 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1054:	83 e0       	ldi	r24, 0x03	; 3
    1056:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <transfer+0xa>
    105e:	7a c0       	rjmp	.+244    	; 0x1154 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1060:	86 ff       	sbrs	r24, 6
    1062:	43 c0       	rjmp	.+134    	; 0x10ea <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1064:	c0 e1       	ldi	r28, 0x10	; 16
    1066:	d1 e2       	ldi	r29, 0x21	; 33
    1068:	aa 81       	ldd	r26, Y+2	; 0x02
    106a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	14 96       	adiw	r26, 0x04	; 4
    1072:	2d 91       	ld	r18, X+
    1074:	3c 91       	ld	r19, X
    1076:	15 97       	sbiw	r26, 0x05	; 5
    1078:	82 17       	cp	r24, r18
    107a:	93 07       	cpc	r25, r19
    107c:	6c f4       	brge	.+26     	; 0x1098 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    107e:	9c 01       	movw	r18, r24
    1080:	2f 5f       	subi	r18, 0xFF	; 255
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	20 93 14 21 	sts	0x2114, r18	; 0x802114 <transfer+0x4>
    1088:	30 93 15 21 	sts	0x2115, r19	; 0x802115 <transfer+0x5>
    108c:	a8 0f       	add	r26, r24
    108e:	b9 1f       	adc	r27, r25
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	8c 91       	ld	r24, X
    1094:	87 83       	std	Z+7, r24	; 0x07
    1096:	5e c0       	rjmp	.+188    	; 0x1154 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1098:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <transfer+0x6>
    109c:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <transfer+0x7>
    10a0:	18 96       	adiw	r26, 0x08	; 8
    10a2:	2d 91       	ld	r18, X+
    10a4:	3c 91       	ld	r19, X
    10a6:	19 97       	sbiw	r26, 0x09	; 9
    10a8:	82 17       	cp	r24, r18
    10aa:	93 07       	cpc	r25, r19
    10ac:	c8 f4       	brcc	.+50     	; 0x10e0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    10ae:	20 91 18 21 	lds	r18, 0x2118	; 0x802118 <transfer+0x8>
    10b2:	22 23       	and	r18, r18
    10b4:	21 f0       	breq	.+8      	; 0x10be <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    10b6:	86 81       	ldd	r24, Z+6	; 0x06
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	86 83       	std	Z+6, r24	; 0x06
    10bc:	4b c0       	rjmp	.+150    	; 0x1154 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    10be:	16 96       	adiw	r26, 0x06	; 6
    10c0:	2d 91       	ld	r18, X+
    10c2:	3c 91       	ld	r19, X
    10c4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    10c6:	ac 01       	movw	r20, r24
    10c8:	4f 5f       	subi	r20, 0xFF	; 255
    10ca:	5f 4f       	sbci	r21, 0xFF	; 255
    10cc:	40 93 16 21 	sts	0x2116, r20	; 0x802116 <transfer+0x6>
    10d0:	50 93 17 21 	sts	0x2117, r21	; 0x802117 <transfer+0x7>
    10d4:	d9 01       	movw	r26, r18
    10d6:	a8 0f       	add	r26, r24
    10d8:	b9 1f       	adc	r27, r25
    10da:	8c 91       	ld	r24, X
    10dc:	87 83       	std	Z+7, r24	; 0x07
    10de:	3a c0       	rjmp	.+116    	; 0x1154 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    10e4:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <transfer+0xa>
    10e8:	35 c0       	rjmp	.+106    	; 0x1154 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    10ea:	88 23       	and	r24, r24
    10ec:	84 f5       	brge	.+96     	; 0x114e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    10ee:	a0 e1       	ldi	r26, 0x10	; 16
    10f0:	b1 e2       	ldi	r27, 0x21	; 33
    10f2:	12 96       	adiw	r26, 0x02	; 2
    10f4:	cd 91       	ld	r28, X+
    10f6:	dc 91       	ld	r29, X
    10f8:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    10fa:	16 96       	adiw	r26, 0x06	; 6
    10fc:	8d 91       	ld	r24, X+
    10fe:	9c 91       	ld	r25, X
    1100:	17 97       	sbiw	r26, 0x07	; 7
    1102:	28 85       	ldd	r18, Y+8	; 0x08
    1104:	39 85       	ldd	r19, Y+9	; 0x09
    1106:	82 17       	cp	r24, r18
    1108:	93 07       	cpc	r25, r19
    110a:	d8 f4       	brcc	.+54     	; 0x1142 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    110c:	6e 81       	ldd	r22, Y+6	; 0x06
    110e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1110:	9c 01       	movw	r18, r24
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	20 93 16 21 	sts	0x2116, r18	; 0x802116 <transfer+0x6>
    111a:	30 93 17 21 	sts	0x2117, r19	; 0x802117 <transfer+0x7>
    111e:	47 81       	ldd	r20, Z+7	; 0x07
    1120:	db 01       	movw	r26, r22
    1122:	a8 0f       	add	r26, r24
    1124:	b9 1f       	adc	r27, r25
    1126:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1128:	88 85       	ldd	r24, Y+8	; 0x08
    112a:	99 85       	ldd	r25, Y+9	; 0x09
    112c:	28 17       	cp	r18, r24
    112e:	39 07       	cpc	r19, r25
    1130:	18 f4       	brcc	.+6      	; 0x1138 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	83 83       	std	Z+3, r24	; 0x03
    1136:	0e c0       	rjmp	.+28     	; 0x1154 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1138:	87 e0       	ldi	r24, 0x07	; 7
    113a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    113c:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <transfer+0xa>
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1146:	89 ef       	ldi	r24, 0xF9	; 249
    1148:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <transfer+0xa>
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    114e:	8b ef       	ldi	r24, 0xFB	; 251
    1150:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <transfer+0xa>
	}
}
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	08 b6       	in	r0, 0x38	; 56
    1166:	0f 92       	push	r0
    1168:	18 be       	out	0x38, r1	; 56
    116a:	09 b6       	in	r0, 0x39	; 57
    116c:	0f 92       	push	r0
    116e:	19 be       	out	0x39, r1	; 57
    1170:	0b b6       	in	r0, 0x3b	; 59
    1172:	0f 92       	push	r0
    1174:	1b be       	out	0x3b, r1	; 59
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
    118e:	4e df       	rcall	.-356    	; 0x102c <twim_interrupt_handler>
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
    11f2:	1c df       	rcall	.-456    	; 0x102c <twim_interrupt_handler>
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0b be       	out	0x3b, r0	; 59
    1210:	0f 90       	pop	r0
    1212:	09 be       	out	0x39, r0	; 57
    1214:	0f 90       	pop	r0
    1216:	08 be       	out	0x38, r0	; 56
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1222:	fc 01       	movw	r30, r24
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	95 ff       	sbrs	r25, 5
    1228:	fd cf       	rjmp	.-6      	; 0x1224 <usart_putchar+0x2>
    122a:	60 83       	st	Z, r22
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	08 95       	ret

00001232 <usart_getchar>:
    1232:	fc 01       	movw	r30, r24
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	99 23       	and	r25, r25
    1238:	ec f7       	brge	.-6      	; 0x1234 <usart_getchar+0x2>
    123a:	80 81       	ld	r24, Z
    123c:	08 95       	ret

0000123e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    123e:	4f 92       	push	r4
    1240:	5f 92       	push	r5
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	7c 01       	movw	r14, r24
    125a:	4a 01       	movw	r8, r20
    125c:	5b 01       	movw	r10, r22
    125e:	28 01       	movw	r4, r16
    1260:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1262:	fc 01       	movw	r30, r24
    1264:	84 81       	ldd	r24, Z+4	; 0x04
    1266:	82 ff       	sbrs	r24, 2
    1268:	16 c0       	rjmp	.+44     	; 0x1296 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    126a:	d9 01       	movw	r26, r18
    126c:	c8 01       	movw	r24, r16
    126e:	68 94       	set
    1270:	12 f8       	bld	r1, 2
    1272:	b6 95       	lsr	r27
    1274:	a7 95       	ror	r26
    1276:	97 95       	ror	r25
    1278:	87 95       	ror	r24
    127a:	16 94       	lsr	r1
    127c:	d1 f7       	brne	.-12     	; 0x1272 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    127e:	b9 01       	movw	r22, r18
    1280:	a8 01       	movw	r20, r16
    1282:	03 2e       	mov	r0, r19
    1284:	36 e1       	ldi	r19, 0x16	; 22
    1286:	76 95       	lsr	r23
    1288:	67 95       	ror	r22
    128a:	57 95       	ror	r21
    128c:	47 95       	ror	r20
    128e:	3a 95       	dec	r19
    1290:	d1 f7       	brne	.-12     	; 0x1286 <usart_set_baudrate+0x48>
    1292:	30 2d       	mov	r19, r0
    1294:	15 c0       	rjmp	.+42     	; 0x12c0 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1296:	d9 01       	movw	r26, r18
    1298:	c8 01       	movw	r24, r16
    129a:	68 94       	set
    129c:	13 f8       	bld	r1, 3
    129e:	b6 95       	lsr	r27
    12a0:	a7 95       	ror	r26
    12a2:	97 95       	ror	r25
    12a4:	87 95       	ror	r24
    12a6:	16 94       	lsr	r1
    12a8:	d1 f7       	brne	.-12     	; 0x129e <usart_set_baudrate+0x60>
		min_rate /= 2;
    12aa:	b9 01       	movw	r22, r18
    12ac:	a8 01       	movw	r20, r16
    12ae:	03 2e       	mov	r0, r19
    12b0:	37 e1       	ldi	r19, 0x17	; 23
    12b2:	76 95       	lsr	r23
    12b4:	67 95       	ror	r22
    12b6:	57 95       	ror	r21
    12b8:	47 95       	ror	r20
    12ba:	3a 95       	dec	r19
    12bc:	d1 f7       	brne	.-12     	; 0x12b2 <usart_set_baudrate+0x74>
    12be:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    12c0:	88 15       	cp	r24, r8
    12c2:	99 05       	cpc	r25, r9
    12c4:	aa 05       	cpc	r26, r10
    12c6:	bb 05       	cpc	r27, r11
    12c8:	08 f4       	brcc	.+2      	; 0x12cc <usart_set_baudrate+0x8e>
    12ca:	a6 c0       	rjmp	.+332    	; 0x1418 <usart_set_baudrate+0x1da>
    12cc:	84 16       	cp	r8, r20
    12ce:	95 06       	cpc	r9, r21
    12d0:	a6 06       	cpc	r10, r22
    12d2:	b7 06       	cpc	r11, r23
    12d4:	08 f4       	brcc	.+2      	; 0x12d8 <usart_set_baudrate+0x9a>
    12d6:	a2 c0       	rjmp	.+324    	; 0x141c <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    12d8:	f7 01       	movw	r30, r14
    12da:	84 81       	ldd	r24, Z+4	; 0x04
    12dc:	82 fd       	sbrc	r24, 2
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <usart_set_baudrate+0xaa>
		baud *= 2;
    12e0:	88 0c       	add	r8, r8
    12e2:	99 1c       	adc	r9, r9
    12e4:	aa 1c       	adc	r10, r10
    12e6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    12e8:	c3 01       	movw	r24, r6
    12ea:	b2 01       	movw	r22, r4
    12ec:	a5 01       	movw	r20, r10
    12ee:	94 01       	movw	r18, r8
    12f0:	0e 94 c6 24 	call	0x498c	; 0x498c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    12f4:	2f 3f       	cpi	r18, 0xFF	; 255
    12f6:	31 05       	cpc	r19, r1
    12f8:	41 05       	cpc	r20, r1
    12fa:	51 05       	cpc	r21, r1
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <usart_set_baudrate+0xc2>
    12fe:	90 c0       	rjmp	.+288    	; 0x1420 <usart_set_baudrate+0x1e2>
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	c9 ef       	ldi	r28, 0xF9	; 249
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <usart_set_baudrate+0xd8>
    130c:	28 17       	cp	r18, r24
    130e:	39 07       	cpc	r19, r25
    1310:	4a 07       	cpc	r20, r26
    1312:	5b 07       	cpc	r21, r27
    1314:	58 f0       	brcs	.+22     	; 0x132c <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	aa 1f       	adc	r26, r26
    131c:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    131e:	cd 3f       	cpi	r28, 0xFD	; 253
    1320:	0c f4       	brge	.+2      	; 0x1324 <usart_set_baudrate+0xe6>
			limit |= 1;
    1322:	81 60       	ori	r24, 0x01	; 1
    1324:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1326:	c7 30       	cpi	r28, 0x07	; 7
    1328:	89 f7       	brne	.-30     	; 0x130c <usart_set_baudrate+0xce>
    132a:	4f c0       	rjmp	.+158    	; 0x13ca <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    132c:	cc 23       	and	r28, r28
    132e:	0c f0       	brlt	.+2      	; 0x1332 <usart_set_baudrate+0xf4>
    1330:	4c c0       	rjmp	.+152    	; 0x13ca <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1332:	d5 01       	movw	r26, r10
    1334:	c4 01       	movw	r24, r8
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	aa 1f       	adc	r26, r26
    133c:	bb 1f       	adc	r27, r27
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	aa 1f       	adc	r26, r26
    1344:	bb 1f       	adc	r27, r27
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	aa 1f       	adc	r26, r26
    134c:	bb 1f       	adc	r27, r27
    134e:	48 1a       	sub	r4, r24
    1350:	59 0a       	sbc	r5, r25
    1352:	6a 0a       	sbc	r6, r26
    1354:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1356:	ce 3f       	cpi	r28, 0xFE	; 254
    1358:	f4 f4       	brge	.+60     	; 0x1396 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    135a:	8d ef       	ldi	r24, 0xFD	; 253
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	8c 1b       	sub	r24, r28
    1360:	91 09       	sbc	r25, r1
    1362:	c7 fd       	sbrc	r28, 7
    1364:	93 95       	inc	r25
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <usart_set_baudrate+0x132>
    1368:	44 0c       	add	r4, r4
    136a:	55 1c       	adc	r5, r5
    136c:	66 1c       	adc	r6, r6
    136e:	77 1c       	adc	r7, r7
    1370:	8a 95       	dec	r24
    1372:	d2 f7       	brpl	.-12     	; 0x1368 <usart_set_baudrate+0x12a>
    1374:	d5 01       	movw	r26, r10
    1376:	c4 01       	movw	r24, r8
    1378:	b6 95       	lsr	r27
    137a:	a7 95       	ror	r26
    137c:	97 95       	ror	r25
    137e:	87 95       	ror	r24
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	64 0d       	add	r22, r4
    1386:	75 1d       	adc	r23, r5
    1388:	86 1d       	adc	r24, r6
    138a:	97 1d       	adc	r25, r7
    138c:	a5 01       	movw	r20, r10
    138e:	94 01       	movw	r18, r8
    1390:	0e 94 c6 24 	call	0x498c	; 0x498c <__udivmodsi4>
    1394:	37 c0       	rjmp	.+110    	; 0x1404 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	8c 0f       	add	r24, r28
    139a:	a5 01       	movw	r20, r10
    139c:	94 01       	movw	r18, r8
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <usart_set_baudrate+0x16a>
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	44 1f       	adc	r20, r20
    13a6:	55 1f       	adc	r21, r21
    13a8:	8a 95       	dec	r24
    13aa:	d2 f7       	brpl	.-12     	; 0x13a0 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    13ac:	da 01       	movw	r26, r20
    13ae:	c9 01       	movw	r24, r18
    13b0:	b6 95       	lsr	r27
    13b2:	a7 95       	ror	r26
    13b4:	97 95       	ror	r25
    13b6:	87 95       	ror	r24
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	64 0d       	add	r22, r4
    13be:	75 1d       	adc	r23, r5
    13c0:	86 1d       	adc	r24, r6
    13c2:	97 1d       	adc	r25, r7
    13c4:	0e 94 c6 24 	call	0x498c	; 0x498c <__udivmodsi4>
    13c8:	1d c0       	rjmp	.+58     	; 0x1404 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	8c 0f       	add	r24, r28
    13ce:	a5 01       	movw	r20, r10
    13d0:	94 01       	movw	r18, r8
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <usart_set_baudrate+0x19e>
    13d4:	22 0f       	add	r18, r18
    13d6:	33 1f       	adc	r19, r19
    13d8:	44 1f       	adc	r20, r20
    13da:	55 1f       	adc	r21, r21
    13dc:	8a 95       	dec	r24
    13de:	d2 f7       	brpl	.-12     	; 0x13d4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    13e0:	da 01       	movw	r26, r20
    13e2:	c9 01       	movw	r24, r18
    13e4:	b6 95       	lsr	r27
    13e6:	a7 95       	ror	r26
    13e8:	97 95       	ror	r25
    13ea:	87 95       	ror	r24
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	64 0d       	add	r22, r4
    13f2:	75 1d       	adc	r23, r5
    13f4:	86 1d       	adc	r24, r6
    13f6:	97 1d       	adc	r25, r7
    13f8:	0e 94 c6 24 	call	0x498c	; 0x498c <__udivmodsi4>
    13fc:	21 50       	subi	r18, 0x01	; 1
    13fe:	31 09       	sbc	r19, r1
    1400:	41 09       	sbc	r20, r1
    1402:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1404:	83 2f       	mov	r24, r19
    1406:	8f 70       	andi	r24, 0x0F	; 15
    1408:	c2 95       	swap	r28
    140a:	c0 7f       	andi	r28, 0xF0	; 240
    140c:	c8 2b       	or	r28, r24
    140e:	f7 01       	movw	r30, r14
    1410:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1412:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	18 c0       	rjmp	.+48     	; 0x1448 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	16 c0       	rjmp	.+44     	; 0x1448 <usart_set_baudrate+0x20a>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	14 c0       	rjmp	.+40     	; 0x1448 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1420:	d5 01       	movw	r26, r10
    1422:	c4 01       	movw	r24, r8
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	aa 1f       	adc	r26, r26
    142a:	bb 1f       	adc	r27, r27
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	aa 1f       	adc	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	aa 1f       	adc	r26, r26
    143a:	bb 1f       	adc	r27, r27
    143c:	48 1a       	sub	r4, r24
    143e:	59 0a       	sbc	r5, r25
    1440:	6a 0a       	sbc	r6, r26
    1442:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1444:	c9 ef       	ldi	r28, 0xF9	; 249
    1446:	89 cf       	rjmp	.-238    	; 0x135a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	bf 90       	pop	r11
    1454:	af 90       	pop	r10
    1456:	9f 90       	pop	r9
    1458:	8f 90       	pop	r8
    145a:	7f 90       	pop	r7
    145c:	6f 90       	pop	r6
    145e:	5f 90       	pop	r5
    1460:	4f 90       	pop	r4
    1462:	08 95       	ret

00001464 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    146e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	09 f4       	brne	.+2      	; 0x1476 <usart_init_rs232+0x12>
    1474:	be c0       	rjmp	.+380    	; 0x15f2 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1476:	80 3c       	cpi	r24, 0xC0	; 192
    1478:	91 05       	cpc	r25, r1
    147a:	21 f4       	brne	.+8      	; 0x1484 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    147c:	60 e1       	ldi	r22, 0x10	; 16
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	fb d3       	rcall	.+2038   	; 0x1c78 <sysclk_enable_module>
    1482:	b7 c0       	rjmp	.+366    	; 0x15f2 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1484:	c1 15       	cp	r28, r1
    1486:	84 e0       	ldi	r24, 0x04	; 4
    1488:	d8 07       	cpc	r29, r24
    148a:	21 f4       	brne	.+8      	; 0x1494 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    148c:	64 e0       	ldi	r22, 0x04	; 4
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	f3 d3       	rcall	.+2022   	; 0x1c78 <sysclk_enable_module>
    1492:	af c0       	rjmp	.+350    	; 0x15f2 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1494:	c0 38       	cpi	r28, 0x80	; 128
    1496:	e1 e0       	ldi	r30, 0x01	; 1
    1498:	de 07       	cpc	r29, r30
    149a:	21 f4       	brne	.+8      	; 0x14a4 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    149c:	62 e0       	ldi	r22, 0x02	; 2
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	eb d3       	rcall	.+2006   	; 0x1c78 <sysclk_enable_module>
    14a2:	a7 c0       	rjmp	.+334    	; 0x15f2 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    14a4:	c1 15       	cp	r28, r1
    14a6:	f1 e0       	ldi	r31, 0x01	; 1
    14a8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    14aa:	21 f4       	brne	.+8      	; 0x14b4 <usart_init_rs232+0x50>
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	e3 d3       	rcall	.+1990   	; 0x1c78 <sysclk_enable_module>
    14b2:	9f c0       	rjmp	.+318    	; 0x15f2 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    14b4:	c0 38       	cpi	r28, 0x80	; 128
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <usart_init_rs232+0x60>
    14bc:	61 e0       	ldi	r22, 0x01	; 1
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	db d3       	rcall	.+1974   	; 0x1c78 <sysclk_enable_module>
    14c2:	97 c0       	rjmp	.+302    	; 0x15f2 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    14c4:	c1 15       	cp	r28, r1
    14c6:	e2 e0       	ldi	r30, 0x02	; 2
    14c8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    14ca:	21 f4       	brne	.+8      	; 0x14d4 <usart_init_rs232+0x70>
    14cc:	62 e0       	ldi	r22, 0x02	; 2
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	d3 d3       	rcall	.+1958   	; 0x1c78 <sysclk_enable_module>
    14d2:	8f c0       	rjmp	.+286    	; 0x15f2 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    14d4:	c0 32       	cpi	r28, 0x20	; 32
    14d6:	f3 e0       	ldi	r31, 0x03	; 3
    14d8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    14da:	21 f4       	brne	.+8      	; 0x14e4 <usart_init_rs232+0x80>
    14dc:	64 e0       	ldi	r22, 0x04	; 4
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	cb d3       	rcall	.+1942   	; 0x1c78 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    14e2:	87 c0       	rjmp	.+270    	; 0x15f2 <usart_init_rs232+0x18e>
    14e4:	c1 15       	cp	r28, r1
    14e6:	88 e0       	ldi	r24, 0x08	; 8
    14e8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    14ea:	21 f4       	brne	.+8      	; 0x14f4 <usart_init_rs232+0x90>
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	c3 d3       	rcall	.+1926   	; 0x1c78 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    14f2:	7f c0       	rjmp	.+254    	; 0x15f2 <usart_init_rs232+0x18e>
    14f4:	c1 15       	cp	r28, r1
    14f6:	e9 e0       	ldi	r30, 0x09	; 9
    14f8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    14fa:	21 f4       	brne	.+8      	; 0x1504 <usart_init_rs232+0xa0>
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	bb d3       	rcall	.+1910   	; 0x1c78 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1502:	77 c0       	rjmp	.+238    	; 0x15f2 <usart_init_rs232+0x18e>
    1504:	c1 15       	cp	r28, r1
    1506:	fa e0       	ldi	r31, 0x0A	; 10
    1508:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    150a:	21 f4       	brne	.+8      	; 0x1514 <usart_init_rs232+0xb0>
    150c:	61 e0       	ldi	r22, 0x01	; 1
    150e:	85 e0       	ldi	r24, 0x05	; 5
    1510:	b3 d3       	rcall	.+1894   	; 0x1c78 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1512:	6f c0       	rjmp	.+222    	; 0x15f2 <usart_init_rs232+0x18e>
    1514:	c0 34       	cpi	r28, 0x40	; 64
    1516:	88 e0       	ldi	r24, 0x08	; 8
    1518:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    151a:	21 f4       	brne	.+8      	; 0x1524 <usart_init_rs232+0xc0>
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	ab d3       	rcall	.+1878   	; 0x1c78 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1522:	67 c0       	rjmp	.+206    	; 0x15f2 <usart_init_rs232+0x18e>
    1524:	c0 34       	cpi	r28, 0x40	; 64
    1526:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1528:	de 07       	cpc	r29, r30
    152a:	21 f4       	brne	.+8      	; 0x1534 <usart_init_rs232+0xd0>
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	a3 d3       	rcall	.+1862   	; 0x1c78 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1532:	5f c0       	rjmp	.+190    	; 0x15f2 <usart_init_rs232+0x18e>
    1534:	c0 39       	cpi	r28, 0x90	; 144
    1536:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1538:	df 07       	cpc	r29, r31
    153a:	21 f4       	brne	.+8      	; 0x1544 <usart_init_rs232+0xe0>
    153c:	64 e0       	ldi	r22, 0x04	; 4
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	9b d3       	rcall	.+1846   	; 0x1c78 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1542:	57 c0       	rjmp	.+174    	; 0x15f2 <usart_init_rs232+0x18e>
    1544:	c0 39       	cpi	r28, 0x90	; 144
    1546:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1548:	d8 07       	cpc	r29, r24
    154a:	21 f4       	brne	.+8      	; 0x1554 <usart_init_rs232+0xf0>
    154c:	64 e0       	ldi	r22, 0x04	; 4
    154e:	84 e0       	ldi	r24, 0x04	; 4
    1550:	93 d3       	rcall	.+1830   	; 0x1c78 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1552:	4f c0       	rjmp	.+158    	; 0x15f2 <usart_init_rs232+0x18e>
    1554:	c0 39       	cpi	r28, 0x90	; 144
    1556:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1558:	de 07       	cpc	r29, r30
    155a:	21 f4       	brne	.+8      	; 0x1564 <usart_init_rs232+0x100>
    155c:	64 e0       	ldi	r22, 0x04	; 4
    155e:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1560:	8b d3       	rcall	.+1814   	; 0x1c78 <sysclk_enable_module>
    1562:	47 c0       	rjmp	.+142    	; 0x15f2 <usart_init_rs232+0x18e>
    1564:	c0 3c       	cpi	r28, 0xC0	; 192
    1566:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1568:	df 07       	cpc	r29, r31
    156a:	21 f4       	brne	.+8      	; 0x1574 <usart_init_rs232+0x110>
    156c:	68 e0       	ldi	r22, 0x08	; 8
    156e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1570:	83 d3       	rcall	.+1798   	; 0x1c78 <sysclk_enable_module>
    1572:	3f c0       	rjmp	.+126    	; 0x15f2 <usart_init_rs232+0x18e>
    1574:	c0 3c       	cpi	r28, 0xC0	; 192
    1576:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1578:	d8 07       	cpc	r29, r24
    157a:	21 f4       	brne	.+8      	; 0x1584 <usart_init_rs232+0x120>
    157c:	68 e0       	ldi	r22, 0x08	; 8
    157e:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1580:	7b d3       	rcall	.+1782   	; 0x1c78 <sysclk_enable_module>
    1582:	37 c0       	rjmp	.+110    	; 0x15f2 <usart_init_rs232+0x18e>
    1584:	c0 3a       	cpi	r28, 0xA0	; 160
    1586:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1588:	de 07       	cpc	r29, r30
    158a:	21 f4       	brne	.+8      	; 0x1594 <usart_init_rs232+0x130>
    158c:	60 e1       	ldi	r22, 0x10	; 16
    158e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1590:	73 d3       	rcall	.+1766   	; 0x1c78 <sysclk_enable_module>
    1592:	2f c0       	rjmp	.+94     	; 0x15f2 <usart_init_rs232+0x18e>
    1594:	c0 3a       	cpi	r28, 0xA0	; 160
    1596:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1598:	df 07       	cpc	r29, r31
    159a:	21 f4       	brne	.+8      	; 0x15a4 <usart_init_rs232+0x140>
    159c:	60 e1       	ldi	r22, 0x10	; 16
    159e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    15a0:	6b d3       	rcall	.+1750   	; 0x1c78 <sysclk_enable_module>
    15a2:	27 c0       	rjmp	.+78     	; 0x15f2 <usart_init_rs232+0x18e>
    15a4:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    15a6:	8a e0       	ldi	r24, 0x0A	; 10
    15a8:	d8 07       	cpc	r29, r24
    15aa:	21 f4       	brne	.+8      	; 0x15b4 <usart_init_rs232+0x150>
    15ac:	60 e1       	ldi	r22, 0x10	; 16
    15ae:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    15b0:	63 d3       	rcall	.+1734   	; 0x1c78 <sysclk_enable_module>
    15b2:	1f c0       	rjmp	.+62     	; 0x15f2 <usart_init_rs232+0x18e>
    15b4:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    15b6:	e8 e0       	ldi	r30, 0x08	; 8
    15b8:	de 07       	cpc	r29, r30
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <usart_init_rs232+0x160>
    15bc:	60 e2       	ldi	r22, 0x20	; 32
    15be:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    15c0:	5b d3       	rcall	.+1718   	; 0x1c78 <sysclk_enable_module>
    15c2:	17 c0       	rjmp	.+46     	; 0x15f2 <usart_init_rs232+0x18e>
    15c4:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    15c6:	f9 e0       	ldi	r31, 0x09	; 9
    15c8:	df 07       	cpc	r29, r31
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <usart_init_rs232+0x170>
    15cc:	60 e2       	ldi	r22, 0x20	; 32
    15ce:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    15d0:	53 d3       	rcall	.+1702   	; 0x1c78 <sysclk_enable_module>
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <usart_init_rs232+0x18e>
    15d4:	c0 38       	cpi	r28, 0x80	; 128
    15d6:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    15d8:	d8 07       	cpc	r29, r24
    15da:	21 f4       	brne	.+8      	; 0x15e4 <usart_init_rs232+0x180>
    15dc:	60 e4       	ldi	r22, 0x40	; 64
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	4b d3       	rcall	.+1686   	; 0x1c78 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <usart_init_rs232+0x18e>
    15e4:	c0 3a       	cpi	r28, 0xA0	; 160
    15e6:	e4 e0       	ldi	r30, 0x04	; 4
    15e8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    15ea:	19 f4       	brne	.+6      	; 0x15f2 <usart_init_rs232+0x18e>
    15ec:	60 e4       	ldi	r22, 0x40	; 64
    15ee:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    15f0:	43 d3       	rcall	.+1670   	; 0x1c78 <sysclk_enable_module>
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	f8 01       	movw	r30, r16
    15fa:	95 81       	ldd	r25, Z+5	; 0x05
    15fc:	84 81       	ldd	r24, Z+4	; 0x04
    15fe:	89 2b       	or	r24, r25
    1600:	96 81       	ldd	r25, Z+6	; 0x06
    1602:	91 11       	cpse	r25, r1
    1604:	98 e0       	ldi	r25, 0x08	; 8
    1606:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1608:	8d 83       	std	Y+5, r24	; 0x05
    160a:	f8 01       	movw	r30, r16
    160c:	40 81       	ld	r20, Z
    160e:	51 81       	ldd	r21, Z+1	; 0x01
    1610:	62 81       	ldd	r22, Z+2	; 0x02
    1612:	73 81       	ldd	r23, Z+3	; 0x03
    1614:	00 e0       	ldi	r16, 0x00	; 0
    1616:	18 e4       	ldi	r17, 0x48	; 72
    1618:	28 ee       	ldi	r18, 0xE8	; 232
    161a:	31 e0       	ldi	r19, 0x01	; 1
    161c:	ce 01       	movw	r24, r28
    161e:	0f de       	rcall	.-994    	; 0x123e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	98 60       	ori	r25, 0x08	; 8
    1624:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	90 61       	ori	r25, 0x10	; 16
    162a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	08 95       	ret

00001636 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
    1636:	08 95       	ret

00001638 <imu_roll>:



double imu_roll()
{
	return bno055_euler.r;
    1638:	60 91 a0 21 	lds	r22, 0x21A0	; 0x8021a0 <bno055_euler+0x4>
    163c:	70 91 a1 21 	lds	r23, 0x21A1	; 0x8021a1 <bno055_euler+0x5>
    1640:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <bno055_euler+0x6>
    1644:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <bno055_euler+0x7>
}
    1648:	08 95       	ret

0000164a <imu_pitch>:

double imu_pitch()
{
	return bno055_euler.p;
    164a:	60 91 a4 21 	lds	r22, 0x21A4	; 0x8021a4 <bno055_euler+0x8>
    164e:	70 91 a5 21 	lds	r23, 0x21A5	; 0x8021a5 <bno055_euler+0x9>
    1652:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <bno055_euler+0xa>
    1656:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <bno055_euler+0xb>
}
    165a:	08 95       	ret

0000165c <imu_heading>:

double imu_heading()
{
	return bno055_euler.h;
    165c:	60 91 9c 21 	lds	r22, 0x219C	; 0x80219c <bno055_euler>
    1660:	70 91 9d 21 	lds	r23, 0x219D	; 0x80219d <bno055_euler+0x1>
    1664:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <bno055_euler+0x2>
    1668:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <bno055_euler+0x3>
}
    166c:	08 95       	ret

0000166e <cam_switch>:
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
	cam_switch();
}

void cam_switch(void){
	PORTA.OUT ^= PIN3_bm; // Changes A3 from high to low or vice-versa
    166e:	e0 e0       	ldi	r30, 0x00	; 0
    1670:	f6 e0       	ldi	r31, 0x06	; 6
    1672:	94 81       	ldd	r25, Z+4	; 0x04
    1674:	88 e0       	ldi	r24, 0x08	; 8
    1676:	89 27       	eor	r24, r25
    1678:	84 83       	std	Z+4, r24	; 0x04
    167a:	08 95       	ret

0000167c <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
    167c:	e0 e0       	ldi	r30, 0x00	; 0
    167e:	f6 e0       	ldi	r31, 0x06	; 6
    1680:	80 81       	ld	r24, Z
    1682:	88 60       	ori	r24, 0x08	; 8
    1684:	80 83       	st	Z, r24
	cam_switch();
    1686:	f3 cf       	rjmp	.-26     	; 0x166e <cam_switch>
    1688:	08 95       	ret

0000168a <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1694:	62 e0       	ldi	r22, 0x02	; 2
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	ef d2       	rcall	.+1502   	; 0x1c78 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
    169a:	c0 e0       	ldi	r28, 0x00	; 0
    169c:	d2 e0       	ldi	r29, 0x02	; 2
    169e:	ff 24       	eor	r15, r15
    16a0:	f3 94       	inc	r15
    16a2:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    16a4:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    16a6:	80 e1       	ldi	r24, 0x10	; 16
    16a8:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    16aa:	85 e0       	ldi	r24, 0x05	; 5
    16ac:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    16ae:	61 e2       	ldi	r22, 0x21	; 33
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	f7 d2       	rcall	.+1518   	; 0x1ca4 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    16b6:	08 2f       	mov	r16, r24
    16b8:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    16ba:	10 2f       	mov	r17, r16
    16bc:	00 27       	eor	r16, r16
    16be:	60 e2       	ldi	r22, 0x20	; 32
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	ef d2       	rcall	.+1502   	; 0x1ca4 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    16c6:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    16c8:	0c 87       	std	Y+12, r16	; 0x0c
    16ca:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
    16cc:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 0	
    16ce:	19 a2       	std	Y+33, r1	; 0x21
}
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	08 95       	ret

000016dc <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	27 97       	sbiw	r28, 0x07	; 7
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    16ea:	60 e2       	ldi	r22, 0x20	; 32
    16ec:	84 e0       	ldi	r24, 0x04	; 4
    16ee:	c4 d2       	rcall	.+1416   	; 0x1c78 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
    16f0:	e0 e6       	ldi	r30, 0x60	; 96
    16f2:	f6 e0       	ldi	r31, 0x06	; 6
    16f4:	80 81       	ld	r24, Z
    16f6:	80 68       	ori	r24, 0x80	; 128
    16f8:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    16fa:	e6 e0       	ldi	r30, 0x06	; 6
    16fc:	f0 e2       	ldi	r31, 0x20	; 32
    16fe:	84 81       	ldd	r24, Z+4	; 0x04
    1700:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1702:	85 81       	ldd	r24, Z+5	; 0x05
    1704:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1706:	86 81       	ldd	r24, Z+6	; 0x06
    1708:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    170a:	80 81       	ld	r24, Z
    170c:	91 81       	ldd	r25, Z+1	; 0x01
    170e:	a2 81       	ldd	r26, Z+2	; 0x02
    1710:	b3 81       	ldd	r27, Z+3	; 0x03
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	ab 83       	std	Y+3, r26	; 0x03
    1718:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    171a:	60 e2       	ldi	r22, 0x20	; 32
    171c:	84 e0       	ldi	r24, 0x04	; 4
    171e:	ac d2       	rcall	.+1368   	; 0x1c78 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1720:	be 01       	movw	r22, r28
    1722:	6f 5f       	subi	r22, 0xFF	; 255
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
    1726:	80 eb       	ldi	r24, 0xB0	; 176
    1728:	99 e0       	ldi	r25, 0x09	; 9
    172a:	9c de       	rcall	.-712    	; 0x1464 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
    172c:	27 96       	adiw	r28, 0x07	; 7
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    173a:	61 50       	subi	r22, 0x01	; 1
    173c:	71 09       	sbc	r23, r1
    173e:	81 09       	sbc	r24, r1
    1740:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1742:	61 15       	cp	r22, r1
    1744:	71 05       	cpc	r23, r1
    1746:	81 05       	cpc	r24, r1
    1748:	91 05       	cpc	r25, r1
    174a:	b9 f7       	brne	.-18     	; 0x173a <__portable_avr_delay_cycles+0x2>
    174c:	08 95       	ret

0000174e <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
    174e:	e0 e4       	ldi	r30, 0x40	; 64
    1750:	f6 e0       	ldi	r31, 0x06	; 6
    1752:	94 81       	ldd	r25, Z+4	; 0x04
    1754:	80 e1       	ldi	r24, 0x10	; 16
    1756:	89 27       	eor	r24, r25
    1758:	84 83       	std	Z+4, r24	; 0x04
    175a:	08 95       	ret

0000175c <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    175c:	e0 e4       	ldi	r30, 0x40	; 64
    175e:	f6 e0       	ldi	r31, 0x06	; 6
    1760:	84 81       	ldd	r24, Z+4	; 0x04
    1762:	80 61       	ori	r24, 0x10	; 16
    1764:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
    1766:	f3 df       	rcall	.-26     	; 0x174e <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
    1768:	8e e1       	ldi	r24, 0x1E	; 30
    176a:	b9 d0       	rcall	.+370    	; 0x18de <spi_write>
	delay_ms(3);
    176c:	60 e8       	ldi	r22, 0x80	; 128
    176e:	7e e3       	ldi	r23, 0x3E	; 62
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    1774:	e1 df       	rcall	.-62     	; 0x1738 <__portable_avr_delay_cycles>
    1776:	eb df       	rcall	.-42     	; 0x174e <flip_ms5607>
	delay_ms(2);
    1778:	6b ea       	ldi	r22, 0xAB	; 171
    177a:	79 e2       	ldi	r23, 0x29	; 41
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	db cf       	rjmp	.-74     	; 0x1738 <__portable_avr_delay_cycles>
    1782:	08 95       	ret

00001784 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
    178a:	e1 df       	rcall	.-62     	; 0x174e <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
    178c:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
    178e:	a7 d0       	rcall	.+334    	; 0x18de <spi_write>
    1790:	97 d0       	rcall	.+302    	; 0x18c0 <spi_read>
    1792:	c8 2f       	mov	r28, r24
    1794:	d0 e0       	ldi	r29, 0x00	; 0
    1796:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
    1798:	cc 27       	eor	r28, r28
    179a:	92 d0       	rcall	.+292    	; 0x18c0 <spi_read>
    179c:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
    179e:	d7 df       	rcall	.-82     	; 0x174e <flip_ms5607>
    17a0:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	08 95       	ret

000017a8 <ms5607_convert_d1>:
    17a8:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
    17aa:	df 93       	push	r29
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <ms5607_convert_d1+0x6>
    17ae:	1f 92       	push	r1
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    17b4:	19 82       	std	Y+1, r1	; 0x01
    17b6:	1a 82       	std	Y+2, r1	; 0x02
    17b8:	1b 82       	std	Y+3, r1	; 0x03
    17ba:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
    17bc:	c8 df       	rcall	.-112    	; 0x174e <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
    17be:	88 e4       	ldi	r24, 0x48	; 72
    17c0:	8e d0       	rcall	.+284    	; 0x18de <spi_write>
	delay_ms(10);
    17c2:	66 e5       	ldi	r22, 0x56	; 86
    17c4:	70 ed       	ldi	r23, 0xD0	; 208
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    17ca:	b6 df       	rcall	.-148    	; 0x1738 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    17cc:	c0 df       	rcall	.-128    	; 0x174e <flip_ms5607>
    17ce:	bf df       	rcall	.-130    	; 0x174e <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	85 d0       	rcall	.+266    	; 0x18de <spi_write>
    17d4:	75 d0       	rcall	.+234    	; 0x18c0 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e0       	ldi	r26, 0x00	; 0
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	dc 01       	movw	r26, r24
    17de:	99 27       	eor	r25, r25
    17e0:	88 27       	eor	r24, r24
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	ab 83       	std	Y+3, r26	; 0x03
    17e8:	bc 83       	std	Y+4, r27	; 0x04
    17ea:	6a d0       	rcall	.+212    	; 0x18c0 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    17ec:	49 81       	ldd	r20, Y+1	; 0x01
    17ee:	5a 81       	ldd	r21, Y+2	; 0x02
    17f0:	6b 81       	ldd	r22, Y+3	; 0x03
    17f2:	7c 81       	ldd	r23, Y+4	; 0x04
    17f4:	58 2b       	or	r21, r24
    17f6:	49 83       	std	Y+1, r20	; 0x01
    17f8:	5a 83       	std	Y+2, r21	; 0x02
    17fa:	6b 83       	std	Y+3, r22	; 0x03
    17fc:	7c 83       	std	Y+4, r23	; 0x04
    17fe:	60 d0       	rcall	.+192    	; 0x18c0 <spi_read>
	rx_data |= spi_read();
    1800:	49 81       	ldd	r20, Y+1	; 0x01
    1802:	5a 81       	ldd	r21, Y+2	; 0x02
    1804:	6b 81       	ldd	r22, Y+3	; 0x03
    1806:	7c 81       	ldd	r23, Y+4	; 0x04
    1808:	48 2b       	or	r20, r24
    180a:	49 83       	std	Y+1, r20	; 0x01
    180c:	5a 83       	std	Y+2, r21	; 0x02
    180e:	6b 83       	std	Y+3, r22	; 0x03
    1810:	7c 83       	std	Y+4, r23	; 0x04
    1812:	9d df       	rcall	.-198    	; 0x174e <flip_ms5607>
	flip_ms5607();
    1814:	69 81       	ldd	r22, Y+1	; 0x01
    1816:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	24 96       	adiw	r28, 0x04	; 4
    181e:	cd bf       	out	0x3d, r28	; 61
}
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <ms5607_convert_d2>:
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
    182c:	00 d0       	rcall	.+0      	; 0x182e <ms5607_convert_d2+0x6>
    182e:	1f 92       	push	r1
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    1834:	19 82       	std	Y+1, r1	; 0x01
    1836:	1a 82       	std	Y+2, r1	; 0x02
    1838:	1b 82       	std	Y+3, r1	; 0x03
    183a:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
    183c:	88 df       	rcall	.-240    	; 0x174e <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
    183e:	88 e5       	ldi	r24, 0x58	; 88
    1840:	4e d0       	rcall	.+156    	; 0x18de <spi_write>
	delay_ms(10);
    1842:	66 e5       	ldi	r22, 0x56	; 86
    1844:	70 ed       	ldi	r23, 0xD0	; 208
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    184a:	76 df       	rcall	.-276    	; 0x1738 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    184c:	80 df       	rcall	.-256    	; 0x174e <flip_ms5607>
    184e:	7f df       	rcall	.-258    	; 0x174e <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	45 d0       	rcall	.+138    	; 0x18de <spi_write>
    1854:	35 d0       	rcall	.+106    	; 0x18c0 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	dc 01       	movw	r26, r24
    185e:	99 27       	eor	r25, r25
    1860:	88 27       	eor	r24, r24
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	ab 83       	std	Y+3, r26	; 0x03
    1868:	bc 83       	std	Y+4, r27	; 0x04
    186a:	2a d0       	rcall	.+84     	; 0x18c0 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    186c:	49 81       	ldd	r20, Y+1	; 0x01
    186e:	5a 81       	ldd	r21, Y+2	; 0x02
    1870:	6b 81       	ldd	r22, Y+3	; 0x03
    1872:	7c 81       	ldd	r23, Y+4	; 0x04
    1874:	58 2b       	or	r21, r24
    1876:	49 83       	std	Y+1, r20	; 0x01
    1878:	5a 83       	std	Y+2, r21	; 0x02
    187a:	6b 83       	std	Y+3, r22	; 0x03
    187c:	7c 83       	std	Y+4, r23	; 0x04
    187e:	20 d0       	rcall	.+64     	; 0x18c0 <spi_read>
	rx_data |= spi_read();
    1880:	49 81       	ldd	r20, Y+1	; 0x01
    1882:	5a 81       	ldd	r21, Y+2	; 0x02
    1884:	6b 81       	ldd	r22, Y+3	; 0x03
    1886:	7c 81       	ldd	r23, Y+4	; 0x04
    1888:	48 2b       	or	r20, r24
    188a:	49 83       	std	Y+1, r20	; 0x01
    188c:	5a 83       	std	Y+2, r21	; 0x02
    188e:	6b 83       	std	Y+3, r22	; 0x03
    1890:	7c 83       	std	Y+4, r23	; 0x04
    1892:	5d df       	rcall	.-326    	; 0x174e <flip_ms5607>
	flip_ms5607();
    1894:	69 81       	ldd	r22, Y+1	; 0x01
    1896:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	24 96       	adiw	r28, 0x04	; 4
    189e:	cd bf       	out	0x3d, r28	; 61
}
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <spi_init>:
    18a8:	e0 e4       	ldi	r30, 0x40	; 64
    18aa:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
    18ac:	80 81       	ld	r24, Z
    18ae:	80 6b       	ori	r24, 0xB0	; 176
    18b0:	80 83       	st	Z, r24
    18b2:	68 e0       	ldi	r22, 0x08	; 8
    18b4:	83 e0       	ldi	r24, 0x03	; 3
    18b6:	e0 d1       	rcall	.+960    	; 0x1c78 <sysclk_enable_module>
    18b8:	8c e5       	ldi	r24, 0x5C	; 92
    18ba:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    18be:	08 95       	ret

000018c0 <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
    18c0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    18c2:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
    18c6:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    18ca:	e0 ec       	ldi	r30, 0xC0	; 192
    18cc:	f8 e0       	ldi	r31, 0x08	; 8
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	88 23       	and	r24, r24
    18d2:	ec f7       	brge	.-6      	; 0x18ce <spi_read+0xe>
	sei();
    18d4:	78 94       	sei
	SREG=oldInterruptState;
    18d6:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
    18d8:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    18dc:	08 95       	ret

000018de <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
    18de:	9f b7       	in	r25, 0x3f	; 63
	cli();
    18e0:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
    18e2:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
    18e6:	e0 ec       	ldi	r30, 0xC0	; 192
    18e8:	f8 e0       	ldi	r31, 0x08	; 8
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	88 23       	and	r24, r24
    18ee:	ec f7       	brge	.-6      	; 0x18ea <spi_write+0xc>
	sei();
    18f0:	78 94       	sei
	SREG=oldInterruptState;
    18f2:	9f bf       	out	0x3f, r25	; 63
    18f4:	08 95       	ret

000018f6 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    18fc:	9a dc       	rcall	.-1740   	; 0x1232 <usart_getchar>
    18fe:	88 83       	st	Y, r24
}
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1906:	8d cc       	rjmp	.-1766   	; 0x1222 <usart_putchar>
}
    1908:	08 95       	ret

0000190a <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	27 97       	sbiw	r28, 0x07	; 7
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1918:	60 e1       	ldi	r22, 0x10	; 16
    191a:	85 e0       	ldi	r24, 0x05	; 5
    191c:	ad d1       	rcall	.+858    	; 0x1c78 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    191e:	e0 e8       	ldi	r30, 0x80	; 128
    1920:	f6 e0       	ldi	r31, 0x06	; 6
    1922:	80 81       	ld	r24, Z
    1924:	88 60       	ori	r24, 0x08	; 8
    1926:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1928:	80 ea       	ldi	r24, 0xA0	; 160
    192a:	9a e0       	ldi	r25, 0x0A	; 10
    192c:	80 93 7d 21 	sts	0x217D, r24	; 0x80217d <stdio_base>
    1930:	90 93 7e 21 	sts	0x217E, r25	; 0x80217e <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1934:	83 e8       	ldi	r24, 0x83	; 131
    1936:	9c e0       	ldi	r25, 0x0C	; 12
    1938:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <ptr_put>
    193c:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1940:	8b e7       	ldi	r24, 0x7B	; 123
    1942:	9c e0       	ldi	r25, 0x0C	; 12
    1944:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <ptr_get>
    1948:	90 93 7a 21 	sts	0x217A, r25	; 0x80217a <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    194c:	ed e0       	ldi	r30, 0x0D	; 13
    194e:	f0 e2       	ldi	r31, 0x20	; 32
    1950:	84 81       	ldd	r24, Z+4	; 0x04
    1952:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1954:	85 81       	ldd	r24, Z+5	; 0x05
    1956:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1958:	86 81       	ldd	r24, Z+6	; 0x06
    195a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	a2 81       	ldd	r26, Z+2	; 0x02
    1962:	b3 81       	ldd	r27, Z+3	; 0x03
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	ab 83       	std	Y+3, r26	; 0x03
    196a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    196c:	60 e1       	ldi	r22, 0x10	; 16
    196e:	85 e0       	ldi	r24, 0x05	; 5
    1970:	83 d1       	rcall	.+774    	; 0x1c78 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1972:	be 01       	movw	r22, r28
    1974:	6f 5f       	subi	r22, 0xFF	; 255
    1976:	7f 4f       	sbci	r23, 0xFF	; 255
    1978:	80 ea       	ldi	r24, 0xA0	; 160
    197a:	9a e0       	ldi	r25, 0x0A	; 10
    197c:	73 dd       	rcall	.-1306   	; 0x1464 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    197e:	6f e7       	ldi	r22, 0x7F	; 127
    1980:	71 e0       	ldi	r23, 0x01	; 1
    1982:	88 e9       	ldi	r24, 0x98	; 152
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	0e 94 5d 25 	call	0x4aba	; 0x4aba <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
    198a:	27 96       	adiw	r28, 0x07	; 7
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <voltage_init>:
#include "voltage.h"
#include <asf.h>


void voltage_init(void)
{
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    19a0:	62 e0       	ldi	r22, 0x02	; 2
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	69 d1       	rcall	.+722    	; 0x1c78 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&VOLTAGE_SERIAL);
	VOLTAGE_SERIAL.CTRLA = 0x01; // enable the ADC
    19a6:	c0 e0       	ldi	r28, 0x00	; 0
    19a8:	d2 e0       	ldi	r29, 0x02	; 2
    19aa:	ff 24       	eor	r15, r15
    19ac:	f3 94       	inc	r15
    19ae:	f8 82       	st	Y, r15
	VOLTAGE_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    19b0:	19 82       	std	Y+1, r1	; 0x01
	VOLTAGE_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    19b2:	80 e1       	ldi	r24, 0x10	; 16
    19b4:	8a 83       	std	Y+2, r24	; 0x02
	VOLTAGE_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	8c 83       	std	Y+4, r24	; 0x04
    19ba:	61 e2       	ldi	r22, 0x21	; 33
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	71 d1       	rcall	.+738    	; 0x1ca4 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    19c2:	08 2f       	mov	r16, r24
    19c4:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    19c6:	10 2f       	mov	r17, r16
    19c8:	00 27       	eor	r16, r16
    19ca:	60 e2       	ldi	r22, 0x20	; 32
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	69 d1       	rcall	.+722    	; 0x1ca4 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    19d2:	08 2b       	or	r16, r24
	VOLTAGE_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    19d4:	0c 87       	std	Y+12, r16	; 0x0c
    19d6:	1d 87       	std	Y+13, r17	; 0x0d
	
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL = 0x01; // single ended input
    19d8:	f8 a6       	std	Y+40, r15	; 0x28
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
    19da:	19 a6       	std	Y+41, r1	; 0x29
}
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	08 95       	ret

000019e8 <voltage_read>:

uint16_t voltage_read(void)
{
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
    19e8:	e0 e0       	ldi	r30, 0x00	; 0
    19ea:	f2 e0       	ldi	r31, 0x02	; 2
    19ec:	80 a5       	ldd	r24, Z+40	; 0x28
    19ee:	80 68       	ori	r24, 0x80	; 128
    19f0:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_SERIAL.VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
    19f2:	83 a5       	ldd	r24, Z+43	; 0x2b
    19f4:	88 23       	and	r24, r24
    19f6:	e9 f3       	breq	.-6      	; 0x19f2 <voltage_read+0xa>
	return VOLTAGE_SERIAL.VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
    19f8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    19fc:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    1a00:	08 95       	ret

00001a02 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	fc 01       	movw	r30, r24
    1a08:	41 15       	cp	r20, r1
    1a0a:	51 05       	cpc	r21, r1
    1a0c:	b1 f1       	breq	.+108    	; 0x1a7a <rb16_write+0x78>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	db 01       	movw	r26, r22
    1a1a:	a8 0f       	add	r26, r24
    1a1c:	b9 1f       	adc	r27, r25
    1a1e:	8d 91       	ld	r24, X+
    1a20:	9c 91       	ld	r25, X
    1a22:	a2 81       	ldd	r26, Z+2	; 0x02
    1a24:	b3 81       	ldd	r27, Z+3	; 0x03
    1a26:	aa 0f       	add	r26, r26
    1a28:	bb 1f       	adc	r27, r27
    1a2a:	c6 81       	ldd	r28, Z+6	; 0x06
    1a2c:	d7 81       	ldd	r29, Z+7	; 0x07
    1a2e:	ac 0f       	add	r26, r28
    1a30:	bd 1f       	adc	r27, r29
    1a32:	8d 93       	st	X+, r24
    1a34:	9c 93       	st	X, r25
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	82 83       	std	Z+2, r24	; 0x02
    1a3e:	93 83       	std	Z+3, r25	; 0x03
    1a40:	a0 81       	ld	r26, Z
    1a42:	b1 81       	ldd	r27, Z+1	; 0x01
    1a44:	8a 17       	cp	r24, r26
    1a46:	9b 07       	cpc	r25, r27
    1a48:	11 f4       	brne	.+4      	; 0x1a4e <rb16_write+0x4c>
    1a4a:	12 82       	std	Z+2, r1	; 0x02
    1a4c:	13 82       	std	Z+3, r1	; 0x03
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	c4 81       	ldd	r28, Z+4	; 0x04
    1a54:	d5 81       	ldd	r29, Z+5	; 0x05
    1a56:	8c 17       	cp	r24, r28
    1a58:	9d 07       	cpc	r25, r29
    1a5a:	49 f4       	brne	.+18     	; 0x1a6e <rb16_write+0x6c>
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	a8 17       	cp	r26, r24
    1a60:	b9 07       	cpc	r27, r25
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <rb16_write+0x68>
    1a64:	84 83       	std	Z+4, r24	; 0x04
    1a66:	95 83       	std	Z+5, r25	; 0x05
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <rb16_write+0x6c>
    1a6a:	14 82       	std	Z+4, r1	; 0x04
    1a6c:	15 82       	std	Z+5, r1	; 0x05
    1a6e:	2f 5f       	subi	r18, 0xFF	; 255
    1a70:	82 2f       	mov	r24, r18
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	84 17       	cp	r24, r20
    1a76:	95 07       	cpc	r25, r21
    1a78:	68 f2       	brcs	.-102    	; 0x1a14 <rb16_write+0x12>
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	08 95       	ret

00001a80 <rb16_init>:
    1a80:	fc 01       	movw	r30, r24
    1a82:	12 82       	std	Z+2, r1	; 0x02
    1a84:	13 82       	std	Z+3, r1	; 0x03
    1a86:	14 82       	std	Z+4, r1	; 0x04
    1a88:	15 82       	std	Z+5, r1	; 0x05
    1a8a:	66 83       	std	Z+6, r22	; 0x06
    1a8c:	77 83       	std	Z+7, r23	; 0x07
    1a8e:	40 83       	st	Z, r20
    1a90:	51 83       	std	Z+1, r21	; 0x01
    1a92:	08 95       	ret

00001a94 <rb16_get_nth>:
    1a94:	dc 01       	movw	r26, r24
    1a96:	12 96       	adiw	r26, 0x02	; 2
    1a98:	ed 91       	ld	r30, X+
    1a9a:	fc 91       	ld	r31, X
    1a9c:	13 97       	sbiw	r26, 0x03	; 3
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	e8 17       	cp	r30, r24
    1aa4:	f9 07       	cpc	r31, r25
    1aa6:	78 f0       	brcs	.+30     	; 0x1ac6 <rb16_get_nth+0x32>
    1aa8:	e1 50       	subi	r30, 0x01	; 1
    1aaa:	f0 48       	sbci	r31, 0x80	; 128
    1aac:	e6 1b       	sub	r30, r22
    1aae:	f7 0b       	sbc	r31, r23
    1ab0:	ee 0f       	add	r30, r30
    1ab2:	ff 1f       	adc	r31, r31
    1ab4:	16 96       	adiw	r26, 0x06	; 6
    1ab6:	8d 91       	ld	r24, X+
    1ab8:	9c 91       	ld	r25, X
    1aba:	17 97       	sbiw	r26, 0x07	; 7
    1abc:	e8 0f       	add	r30, r24
    1abe:	f9 1f       	adc	r31, r25
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	08 95       	ret
    1ac6:	2d 91       	ld	r18, X+
    1ac8:	3c 91       	ld	r19, X
    1aca:	11 97       	sbiw	r26, 0x01	; 1
    1acc:	e2 0f       	add	r30, r18
    1ace:	f3 1f       	adc	r31, r19
    1ad0:	e1 50       	subi	r30, 0x01	; 1
    1ad2:	f0 48       	sbci	r31, 0x80	; 128
    1ad4:	e6 1b       	sub	r30, r22
    1ad6:	f7 0b       	sbc	r31, r23
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	16 96       	adiw	r26, 0x06	; 6
    1ade:	8d 91       	ld	r24, X+
    1ae0:	9c 91       	ld	r25, X
    1ae2:	17 97       	sbiw	r26, 0x07	; 7
    1ae4:	e8 0f       	add	r30, r24
    1ae6:	f9 1f       	adc	r31, r25
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	08 95       	ret

00001aee <rb32_write>:
    1aee:	cf 92       	push	r12
    1af0:	df 92       	push	r13
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	fc 01       	movw	r30, r24
    1afc:	41 15       	cp	r20, r1
    1afe:	51 05       	cpc	r21, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <rb32_write+0x16>
    1b02:	3f c0       	rjmp	.+126    	; 0x1b82 <rb32_write+0x94>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	db 01       	movw	r26, r22
    1b14:	a8 0f       	add	r26, r24
    1b16:	b9 1f       	adc	r27, r25
    1b18:	cd 90       	ld	r12, X+
    1b1a:	dd 90       	ld	r13, X+
    1b1c:	ed 90       	ld	r14, X+
    1b1e:	fc 90       	ld	r15, X
    1b20:	a2 81       	ldd	r26, Z+2	; 0x02
    1b22:	b3 81       	ldd	r27, Z+3	; 0x03
    1b24:	aa 0f       	add	r26, r26
    1b26:	bb 1f       	adc	r27, r27
    1b28:	aa 0f       	add	r26, r26
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	86 81       	ldd	r24, Z+6	; 0x06
    1b2e:	97 81       	ldd	r25, Z+7	; 0x07
    1b30:	a8 0f       	add	r26, r24
    1b32:	b9 1f       	adc	r27, r25
    1b34:	cd 92       	st	X+, r12
    1b36:	dd 92       	st	X+, r13
    1b38:	ed 92       	st	X+, r14
    1b3a:	fc 92       	st	X, r15
    1b3c:	13 97       	sbiw	r26, 0x03	; 3
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	82 83       	std	Z+2, r24	; 0x02
    1b46:	93 83       	std	Z+3, r25	; 0x03
    1b48:	a0 81       	ld	r26, Z
    1b4a:	b1 81       	ldd	r27, Z+1	; 0x01
    1b4c:	8a 17       	cp	r24, r26
    1b4e:	9b 07       	cpc	r25, r27
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <rb32_write+0x68>
    1b52:	12 82       	std	Z+2, r1	; 0x02
    1b54:	13 82       	std	Z+3, r1	; 0x03
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	c4 81       	ldd	r28, Z+4	; 0x04
    1b5c:	d5 81       	ldd	r29, Z+5	; 0x05
    1b5e:	8c 17       	cp	r24, r28
    1b60:	9d 07       	cpc	r25, r29
    1b62:	49 f4       	brne	.+18     	; 0x1b76 <rb32_write+0x88>
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	a8 17       	cp	r26, r24
    1b68:	b9 07       	cpc	r27, r25
    1b6a:	19 f0       	breq	.+6      	; 0x1b72 <rb32_write+0x84>
    1b6c:	84 83       	std	Z+4, r24	; 0x04
    1b6e:	95 83       	std	Z+5, r25	; 0x05
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <rb32_write+0x88>
    1b72:	14 82       	std	Z+4, r1	; 0x04
    1b74:	15 82       	std	Z+5, r1	; 0x05
    1b76:	2f 5f       	subi	r18, 0xFF	; 255
    1b78:	82 2f       	mov	r24, r18
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	84 17       	cp	r24, r20
    1b7e:	95 07       	cpc	r25, r21
    1b80:	20 f2       	brcs	.-120    	; 0x1b0a <rb32_write+0x1c>
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	df 90       	pop	r13
    1b8c:	cf 90       	pop	r12
    1b8e:	08 95       	ret

00001b90 <rb32_init>:
    1b90:	fc 01       	movw	r30, r24
    1b92:	12 82       	std	Z+2, r1	; 0x02
    1b94:	13 82       	std	Z+3, r1	; 0x03
    1b96:	14 82       	std	Z+4, r1	; 0x04
    1b98:	15 82       	std	Z+5, r1	; 0x05
    1b9a:	66 83       	std	Z+6, r22	; 0x06
    1b9c:	77 83       	std	Z+7, r23	; 0x07
    1b9e:	40 83       	st	Z, r20
    1ba0:	51 83       	std	Z+1, r21	; 0x01
    1ba2:	08 95       	ret

00001ba4 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    1ba4:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    1ba6:	12 96       	adiw	r26, 0x02	; 2
    1ba8:	ed 91       	ld	r30, X+
    1baa:	fc 91       	ld	r31, X
    1bac:	13 97       	sbiw	r26, 0x03	; 3
    1bae:	cb 01       	movw	r24, r22
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	e8 17       	cp	r30, r24
    1bb4:	f9 07       	cpc	r31, r25
    1bb6:	98 f0       	brcs	.+38     	; 0x1bde <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    1bb8:	e1 50       	subi	r30, 0x01	; 1
    1bba:	f0 4c       	sbci	r31, 0xC0	; 192
    1bbc:	e6 1b       	sub	r30, r22
    1bbe:	f7 0b       	sbc	r31, r23
    1bc0:	ee 0f       	add	r30, r30
    1bc2:	ff 1f       	adc	r31, r31
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	16 96       	adiw	r26, 0x06	; 6
    1bca:	8d 91       	ld	r24, X+
    1bcc:	9c 91       	ld	r25, X
    1bce:	17 97       	sbiw	r26, 0x07	; 7
    1bd0:	e8 0f       	add	r30, r24
    1bd2:	f9 1f       	adc	r31, r25
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    1bde:	2d 91       	ld	r18, X+
    1be0:	3c 91       	ld	r19, X
    1be2:	11 97       	sbiw	r26, 0x01	; 1
    1be4:	e2 0f       	add	r30, r18
    1be6:	f3 1f       	adc	r31, r19
    1be8:	e1 50       	subi	r30, 0x01	; 1
    1bea:	f0 4c       	sbci	r31, 0xC0	; 192
    1bec:	e6 1b       	sub	r30, r22
    1bee:	f7 0b       	sbc	r31, r23
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	16 96       	adiw	r26, 0x06	; 6
    1bfa:	8d 91       	ld	r24, X+
    1bfc:	9c 91       	ld	r25, X
    1bfe:	17 97       	sbiw	r26, 0x07	; 7
    1c00:	e8 0f       	add	r30, r24
    1c02:	f9 1f       	adc	r31, r25
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
}
    1c0c:	08 95       	ret

00001c0e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	1f 92       	push	r1
    1c14:	1f 92       	push	r1
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1c20:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1c24:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1c28:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1c2c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1c30:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1c34:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c38:	8f b7       	in	r24, 0x3f	; 63
    1c3a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1c3c:	f8 94       	cli
	return flags;
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1c40:	e0 e5       	ldi	r30, 0x50	; 80
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	82 60       	ori	r24, 0x02	; 2
    1c48:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c4a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1c4c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1c4e:	81 ff       	sbrs	r24, 1
    1c50:	fd cf       	rjmp	.-6      	; 0x1c4c <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	80 e4       	ldi	r24, 0x40	; 64
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	2f d0       	rcall	.+94     	; 0x1cb8 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c5a:	8f b7       	in	r24, 0x3f	; 63
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1c5e:	f8 94       	cli
	return flags;
    1c60:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1c62:	e0 e5       	ldi	r30, 0x50	; 80
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	8e 7f       	andi	r24, 0xFE	; 254
    1c6a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c6c:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	08 95       	ret

00001c78 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	1f 92       	push	r1
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c82:	9f b7       	in	r25, 0x3f	; 63
    1c84:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1c86:	f8 94       	cli
	return flags;
    1c88:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1c8a:	e8 2f       	mov	r30, r24
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	e0 59       	subi	r30, 0x90	; 144
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	60 95       	com	r22
    1c94:	80 81       	ld	r24, Z
    1c96:	68 23       	and	r22, r24
    1c98:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c9a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1c9c:	0f 90       	pop	r0
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1ca4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1ca8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1caa:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1cac:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1cb0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1cb2:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1cb6:	08 95       	ret

00001cb8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1cb8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1cba:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1cbc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1cbe:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1cc0:	60 83       	st	Z, r22
	ret                             // Return to caller
    1cc2:	08 95       	ret

00001cc4 <__portable_avr_delay_cycles>:

	PORTD.DIR |= 0x10;
	TCD1.CTRLA = 0x05; // sets the clock's divisor to 64
	TCD1.CTRLB = 0x13; // enables CCA and Single Waveform
	TCD1.PER = 184; // 2700hz
	TCD1.CCA = 92;
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <__portable_avr_delay_cycles+0xa>
    1cc6:	61 50       	subi	r22, 0x01	; 1
    1cc8:	71 09       	sbc	r23, r1
    1cca:	81 09       	sbc	r24, r1
    1ccc:	91 09       	sbc	r25, r1
    1cce:	61 15       	cp	r22, r1
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	81 05       	cpc	r24, r1
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	b9 f7       	brne	.-18     	; 0x1cc6 <__portable_avr_delay_cycles+0x2>
    1cd8:	08 95       	ret

00001cda <pressure_init>:
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	3e dd       	rcall	.-1412   	; 0x175c <ms5607_init>
    1ce0:	82 ea       	ldi	r24, 0xA2	; 162
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	4f dd       	rcall	.-1378   	; 0x1784 <ms5607_read>
    1ce6:	c9 e6       	ldi	r28, 0x69	; 105
    1ce8:	d1 e2       	ldi	r29, 0x21	; 33
    1cea:	88 83       	st	Y, r24
    1cec:	99 83       	std	Y+1, r25	; 0x01
    1cee:	84 ea       	ldi	r24, 0xA4	; 164
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	48 dd       	rcall	.-1392   	; 0x1784 <ms5607_read>
    1cf4:	8a 83       	std	Y+2, r24	; 0x02
    1cf6:	9b 83       	std	Y+3, r25	; 0x03
    1cf8:	86 ea       	ldi	r24, 0xA6	; 166
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	43 dd       	rcall	.-1402   	; 0x1784 <ms5607_read>
    1cfe:	8c 83       	std	Y+4, r24	; 0x04
    1d00:	9d 83       	std	Y+5, r25	; 0x05
    1d02:	88 ea       	ldi	r24, 0xA8	; 168
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	3e dd       	rcall	.-1412   	; 0x1784 <ms5607_read>
    1d08:	8e 83       	std	Y+6, r24	; 0x06
    1d0a:	9f 83       	std	Y+7, r25	; 0x07
    1d0c:	8a ea       	ldi	r24, 0xAA	; 170
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	39 dd       	rcall	.-1422   	; 0x1784 <ms5607_read>
    1d12:	88 87       	std	Y+8, r24	; 0x08
    1d14:	99 87       	std	Y+9, r25	; 0x09
    1d16:	8c ea       	ldi	r24, 0xAC	; 172
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	34 dd       	rcall	.-1432   	; 0x1784 <ms5607_read>
    1d1c:	8a 87       	std	Y+10, r24	; 0x0a
    1d1e:	9b 87       	std	Y+11, r25	; 0x0b
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <gps_init>:
    1d26:	da dc       	rcall	.-1612   	; 0x16dc <gps_uart_init>
    1d28:	6b ea       	ldi	r22, 0xAB	; 171
    1d2a:	79 e2       	ldi	r23, 0x29	; 41
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	c9 df       	rcall	.-110    	; 0x1cc4 <__portable_avr_delay_cycles>
    1d32:	80 e3       	ldi	r24, 0x30	; 48
    1d34:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    1d38:	08 95       	ret

00001d3a <release>:
    1d3a:	80 eb       	ldi	r24, 0xB0	; 176
    1d3c:	94 e0       	ldi	r25, 0x04	; 4
    1d3e:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1d42:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	80 93 77 21 	sts	0x2177, r24	; 0x802177 <released>
    1d4c:	08 95       	ret

00001d4e <get_pressure>:
    1d4e:	4f 92       	push	r4
    1d50:	5f 92       	push	r5
    1d52:	6f 92       	push	r6
    1d54:	7f 92       	push	r7
    1d56:	8f 92       	push	r8
    1d58:	9f 92       	push	r9
    1d5a:	af 92       	push	r10
    1d5c:	bf 92       	push	r11
    1d5e:	cf 92       	push	r12
    1d60:	df 92       	push	r13
    1d62:	ef 92       	push	r14
    1d64:	ff 92       	push	r15
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	1e dd       	rcall	.-1476   	; 0x17a8 <ms5607_convert_d1>
    1d6c:	6b 01       	movw	r12, r22
    1d6e:	7c 01       	movw	r14, r24
    1d70:	5b dd       	rcall	.-1354   	; 0x1828 <ms5607_convert_d2>
    1d72:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    1d76:	4b 01       	movw	r8, r22
    1d78:	5c 01       	movw	r10, r24
    1d7a:	c9 e6       	ldi	r28, 0x69	; 105
    1d7c:	d1 e2       	ldi	r29, 0x21	; 33
    1d7e:	68 85       	ldd	r22, Y+8	; 0x08
    1d80:	79 85       	ldd	r23, Y+9	; 0x09
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1d96:	9b 01       	movw	r18, r22
    1d98:	ac 01       	movw	r20, r24
    1d9a:	c5 01       	movw	r24, r10
    1d9c:	b4 01       	movw	r22, r8
    1d9e:	0e 94 10 21 	call	0x4220	; 0x4220 <__subsf3>
    1da2:	4b 01       	movw	r8, r22
    1da4:	5c 01       	movw	r10, r24
    1da6:	6c 81       	ldd	r22, Y+4	; 0x04
    1da8:	7d 81       	ldd	r23, Y+5	; 0x05
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    1db2:	a5 01       	movw	r20, r10
    1db4:	94 01       	movw	r18, r8
    1db6:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	5c e3       	ldi	r21, 0x3C	; 60
    1dc2:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1dc6:	2b 01       	movw	r4, r22
    1dc8:	3c 01       	movw	r6, r24
    1dca:	68 81       	ld	r22, Y
    1dcc:	79 81       	ldd	r23, Y+1	; 0x01
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1de2:	9b 01       	movw	r18, r22
    1de4:	ac 01       	movw	r20, r24
    1de6:	c3 01       	movw	r24, r6
    1de8:	b2 01       	movw	r22, r4
    1dea:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    1dee:	2b 01       	movw	r4, r22
    1df0:	3c 01       	movw	r6, r24
    1df2:	c7 01       	movw	r24, r14
    1df4:	b6 01       	movw	r22, r12
    1df6:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    1dfa:	9b 01       	movw	r18, r22
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	c3 01       	movw	r24, r6
    1e00:	b2 01       	movw	r22, r4
    1e02:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	55 e3       	ldi	r21, 0x35	; 53
    1e0e:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1e12:	6b 01       	movw	r12, r22
    1e14:	7c 01       	movw	r14, r24
    1e16:	6e 81       	ldd	r22, Y+6	; 0x06
    1e18:	7f 81       	ldd	r23, Y+7	; 0x07
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    1e22:	a5 01       	movw	r20, r10
    1e24:	94 01       	movw	r18, r8
    1e26:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5c e3       	ldi	r21, 0x3C	; 60
    1e32:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1e36:	4b 01       	movw	r8, r22
    1e38:	5c 01       	movw	r10, r24
    1e3a:	6a 81       	ldd	r22, Y+2	; 0x02
    1e3c:	7b 81       	ldd	r23, Y+3	; 0x03
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	58 e4       	ldi	r21, 0x48	; 72
    1e4e:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1e52:	9b 01       	movw	r18, r22
    1e54:	ac 01       	movw	r20, r24
    1e56:	c5 01       	movw	r24, r10
    1e58:	b4 01       	movw	r22, r8
    1e5a:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    1e5e:	9b 01       	movw	r18, r22
    1e60:	ac 01       	movw	r20, r24
    1e62:	c7 01       	movw	r24, r14
    1e64:	b6 01       	movw	r22, r12
    1e66:	0e 94 10 21 	call	0x4220	; 0x4220 <__subsf3>
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	58 e3       	ldi	r21, 0x38	; 56
    1e72:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	bf 90       	pop	r11
    1e84:	af 90       	pop	r10
    1e86:	9f 90       	pop	r9
    1e88:	8f 90       	pop	r8
    1e8a:	7f 90       	pop	r7
    1e8c:	6f 90       	pop	r6
    1e8e:	5f 90       	pop	r5
    1e90:	4f 90       	pop	r4
    1e92:	08 95       	ret

00001e94 <get_altitude>:
    1e94:	4f 92       	push	r4
    1e96:	5f 92       	push	r5
    1e98:	6f 92       	push	r6
    1e9a:	7f 92       	push	r7
    1e9c:	8f 92       	push	r8
    1e9e:	9f 92       	push	r9
    1ea0:	af 92       	push	r10
    1ea2:	bf 92       	push	r11
    1ea4:	cf 92       	push	r12
    1ea6:	df 92       	push	r13
    1ea8:	ef 92       	push	r14
    1eaa:	ff 92       	push	r15
    1eac:	2b 01       	movw	r4, r22
    1eae:	3c 01       	movw	r6, r24
    1eb0:	c0 90 1f 20 	lds	r12, 0x201F	; 0x80201f <L>
    1eb4:	d0 90 20 20 	lds	r13, 0x2020	; 0x802020 <L+0x1>
    1eb8:	e0 90 21 20 	lds	r14, 0x2021	; 0x802021 <L+0x2>
    1ebc:	f0 90 22 20 	lds	r15, 0x2022	; 0x802022 <L+0x3>
    1ec0:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <R>
    1ec4:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <R+0x1>
    1ec8:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <R+0x2>
    1ecc:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <R+0x3>
    1ed0:	c7 01       	movw	r24, r14
    1ed2:	b6 01       	movw	r22, r12
    1ed4:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1ed8:	20 91 1b 20 	lds	r18, 0x201B	; 0x80201b <g_0>
    1edc:	30 91 1c 20 	lds	r19, 0x201C	; 0x80201c <g_0+0x1>
    1ee0:	40 91 1d 20 	lds	r20, 0x201D	; 0x80201d <g_0+0x2>
    1ee4:	50 91 1e 20 	lds	r21, 0x201E	; 0x80201e <g_0+0x3>
    1ee8:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    1eec:	4b 01       	movw	r8, r22
    1eee:	5c 01       	movw	r10, r24
    1ef0:	a3 01       	movw	r20, r6
    1ef2:	92 01       	movw	r18, r4
    1ef4:	60 91 2b 20 	lds	r22, 0x202B	; 0x80202b <ground_p>
    1ef8:	70 91 2c 20 	lds	r23, 0x202C	; 0x80202c <ground_p+0x1>
    1efc:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <ground_p+0x2>
    1f00:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <ground_p+0x3>
    1f04:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    1f08:	a5 01       	movw	r20, r10
    1f0a:	94 01       	movw	r18, r8
    1f0c:	0e 94 2b 23 	call	0x4656	; 0x4656 <pow>
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 10 21 	call	0x4220	; 0x4220 <__subsf3>
    1f1c:	20 91 27 20 	lds	r18, 0x2027	; 0x802027 <ground_t>
    1f20:	30 91 28 20 	lds	r19, 0x2028	; 0x802028 <ground_t+0x1>
    1f24:	40 91 29 20 	lds	r20, 0x2029	; 0x802029 <ground_t+0x2>
    1f28:	50 91 2a 20 	lds	r21, 0x202A	; 0x80202a <ground_t+0x3>
    1f2c:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1f30:	a7 01       	movw	r20, r14
    1f32:	96 01       	movw	r18, r12
    1f34:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	bf 90       	pop	r11
    1f42:	af 90       	pop	r10
    1f44:	9f 90       	pop	r9
    1f46:	8f 90       	pop	r8
    1f48:	7f 90       	pop	r7
    1f4a:	6f 90       	pop	r6
    1f4c:	5f 90       	pop	r5
    1f4e:	4f 90       	pop	r4
    1f50:	08 95       	ret

00001f52 <get_voltage>:
    1f52:	cf 92       	push	r12
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	46 dd       	rcall	.-1396   	; 0x19e8 <voltage_read>
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    1f66:	23 e4       	ldi	r18, 0x43	; 67
    1f68:	3e e2       	ldi	r19, 0x2E	; 46
    1f6a:	42 e0       	ldi	r20, 0x02	; 2
    1f6c:	5a e3       	ldi	r21, 0x3A	; 58
    1f6e:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1f72:	24 ee       	ldi	r18, 0xE4	; 228
    1f74:	3a e5       	ldi	r19, 0x5A	; 90
    1f76:	45 ec       	ldi	r20, 0xC5	; 197
    1f78:	5d e3       	ldi	r21, 0x3D	; 61
    1f7a:	0e 94 10 21 	call	0x4220	; 0x4220 <__subsf3>
    1f7e:	6b 01       	movw	r12, r22
    1f80:	7c 01       	movw	r14, r24
    1f82:	2b e2       	ldi	r18, 0x2B	; 43
    1f84:	35 eb       	ldi	r19, 0xB5	; 181
    1f86:	42 e1       	ldi	r20, 0x12	; 18
    1f88:	50 e4       	ldi	r21, 0x40	; 64
    1f8a:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    1f8e:	9b 01       	movw	r18, r22
    1f90:	ac 01       	movw	r20, r24
    1f92:	c7 01       	movw	r24, r14
    1f94:	b6 01       	movw	r22, r12
    1f96:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	08 95       	ret

00001fa4 <diff>:
    1fa4:	2f 92       	push	r2
    1fa6:	3f 92       	push	r3
    1fa8:	4f 92       	push	r4
    1faa:	5f 92       	push	r5
    1fac:	6f 92       	push	r6
    1fae:	7f 92       	push	r7
    1fb0:	8f 92       	push	r8
    1fb2:	9f 92       	push	r9
    1fb4:	af 92       	push	r10
    1fb6:	bf 92       	push	r11
    1fb8:	cf 92       	push	r12
    1fba:	df 92       	push	r13
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <diff+0x26>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <diff+0x28>
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	6c 01       	movw	r12, r24
    1fd2:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    1fd6:	88 23       	and	r24, r24
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <diff+0x38>
    1fda:	6c c0       	rjmp	.+216    	; 0x20b4 <diff+0x110>
    1fdc:	00 e0       	ldi	r16, 0x00	; 0
    1fde:	10 e0       	ldi	r17, 0x00	; 0
    1fe0:	41 2c       	mov	r4, r1
    1fe2:	51 2c       	mov	r5, r1
    1fe4:	32 01       	movw	r6, r4
    1fe6:	86 2e       	mov	r8, r22
    1fe8:	91 2c       	mov	r9, r1
    1fea:	a1 2c       	mov	r10, r1
    1fec:	b1 2c       	mov	r11, r1
    1fee:	89 82       	std	Y+1, r8	; 0x01
    1ff0:	9a 82       	std	Y+2, r9	; 0x02
    1ff2:	ab 82       	std	Y+3, r10	; 0x03
    1ff4:	bc 82       	std	Y+4, r11	; 0x04
    1ff6:	b8 01       	movw	r22, r16
    1ff8:	c6 01       	movw	r24, r12
    1ffa:	4c dd       	rcall	.-1384   	; 0x1a94 <rb16_get_nth>
    1ffc:	5c 01       	movw	r10, r24
    1ffe:	18 01       	movw	r2, r16
    2000:	2f ef       	ldi	r18, 0xFF	; 255
    2002:	22 1a       	sub	r2, r18
    2004:	32 0a       	sbc	r3, r18
    2006:	b1 01       	movw	r22, r2
    2008:	c6 01       	movw	r24, r12
    200a:	44 dd       	rcall	.-1400   	; 0x1a94 <rb16_get_nth>
    200c:	7c 01       	movw	r14, r24
    200e:	b8 01       	movw	r22, r16
    2010:	6e 5f       	subi	r22, 0xFE	; 254
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	c6 01       	movw	r24, r12
    2016:	3e dd       	rcall	.-1412   	; 0x1a94 <rb16_get_nth>
    2018:	a5 01       	movw	r20, r10
    201a:	bb 0c       	add	r11, r11
    201c:	66 0b       	sbc	r22, r22
    201e:	77 0b       	sbc	r23, r23
    2020:	8a 01       	movw	r16, r20
    2022:	9b 01       	movw	r18, r22
    2024:	00 0f       	add	r16, r16
    2026:	11 1f       	adc	r17, r17
    2028:	22 1f       	adc	r18, r18
    202a:	33 1f       	adc	r19, r19
    202c:	40 0f       	add	r20, r16
    202e:	51 1f       	adc	r21, r17
    2030:	62 1f       	adc	r22, r18
    2032:	73 1f       	adc	r23, r19
    2034:	87 01       	movw	r16, r14
    2036:	ff 0c       	add	r15, r15
    2038:	22 0b       	sbc	r18, r18
    203a:	33 0b       	sbc	r19, r19
    203c:	78 01       	movw	r14, r16
    203e:	89 01       	movw	r16, r18
    2040:	ee 0c       	add	r14, r14
    2042:	ff 1c       	adc	r15, r15
    2044:	00 1f       	adc	r16, r16
    2046:	11 1f       	adc	r17, r17
    2048:	ee 0c       	add	r14, r14
    204a:	ff 1c       	adc	r15, r15
    204c:	00 1f       	adc	r16, r16
    204e:	11 1f       	adc	r17, r17
    2050:	4a 01       	movw	r8, r20
    2052:	5b 01       	movw	r10, r22
    2054:	8e 18       	sub	r8, r14
    2056:	9f 08       	sbc	r9, r15
    2058:	a0 0a       	sbc	r10, r16
    205a:	b1 0a       	sbc	r11, r17
    205c:	ac 01       	movw	r20, r24
    205e:	99 0f       	add	r25, r25
    2060:	66 0b       	sbc	r22, r22
    2062:	77 0b       	sbc	r23, r23
    2064:	d5 01       	movw	r26, r10
    2066:	c4 01       	movw	r24, r8
    2068:	84 0f       	add	r24, r20
    206a:	95 1f       	adc	r25, r21
    206c:	a6 1f       	adc	r26, r22
    206e:	b7 1f       	adc	r27, r23
    2070:	9c 01       	movw	r18, r24
    2072:	ad 01       	movw	r20, r26
    2074:	69 81       	ldd	r22, Y+1	; 0x01
    2076:	7a 81       	ldd	r23, Y+2	; 0x02
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	0e 94 90 24 	call	0x4920	; 0x4920 <__mulsi3>
    2080:	0e 94 14 22 	call	0x4428	; 0x4428 <__floatsisf>
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	5f e3       	ldi	r21, 0x3F	; 63
    208c:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    2090:	9b 01       	movw	r18, r22
    2092:	ac 01       	movw	r20, r24
    2094:	c3 01       	movw	r24, r6
    2096:	b2 01       	movw	r22, r4
    2098:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    209c:	2b 01       	movw	r4, r22
    209e:	3c 01       	movw	r6, r24
    20a0:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    20a4:	81 01       	movw	r16, r2
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	22 16       	cp	r2, r18
    20ac:	33 06       	cpc	r3, r19
    20ae:	08 f4       	brcc	.+2      	; 0x20b2 <diff+0x10e>
    20b0:	a2 cf       	rjmp	.-188    	; 0x1ff6 <diff+0x52>
    20b2:	03 c0       	rjmp	.+6      	; 0x20ba <diff+0x116>
    20b4:	41 2c       	mov	r4, r1
    20b6:	51 2c       	mov	r5, r1
    20b8:	32 01       	movw	r6, r4
    20ba:	68 2f       	mov	r22, r24
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	0e 94 14 22 	call	0x4428	; 0x4428 <__floatsisf>
    20c6:	9b 01       	movw	r18, r22
    20c8:	ac 01       	movw	r20, r24
    20ca:	c3 01       	movw	r24, r6
    20cc:	b2 01       	movw	r22, r4
    20ce:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	48 ec       	ldi	r20, 0xC8	; 200
    20d8:	52 e4       	ldi	r21, 0x42	; 66
    20da:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    20de:	26 96       	adiw	r28, 0x06	; 6
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	ff 90       	pop	r15
    20ee:	ef 90       	pop	r14
    20f0:	df 90       	pop	r13
    20f2:	cf 90       	pop	r12
    20f4:	bf 90       	pop	r11
    20f6:	af 90       	pop	r10
    20f8:	9f 90       	pop	r9
    20fa:	8f 90       	pop	r8
    20fc:	7f 90       	pop	r7
    20fe:	6f 90       	pop	r6
    2100:	5f 90       	pop	r5
    2102:	4f 90       	pop	r4
    2104:	3f 90       	pop	r3
    2106:	2f 90       	pop	r2
    2108:	08 95       	ret

0000210a <data_check>:
    210a:	3f 92       	push	r3
    210c:	4f 92       	push	r4
    210e:	5f 92       	push	r5
    2110:	6f 92       	push	r6
    2112:	7f 92       	push	r7
    2114:	8f 92       	push	r8
    2116:	9f 92       	push	r9
    2118:	af 92       	push	r10
    211a:	bf 92       	push	r11
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	00 d0       	rcall	.+0      	; 0x212e <data_check+0x24>
    212e:	00 d0       	rcall	.+0      	; 0x2130 <data_check+0x26>
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	8c 01       	movw	r16, r24
    2136:	19 82       	std	Y+1, r1	; 0x01
    2138:	1a 82       	std	Y+2, r1	; 0x02
    213a:	c1 2c       	mov	r12, r1
    213c:	d1 2c       	mov	r13, r1
    213e:	76 01       	movw	r14, r12
    2140:	69 81       	ldd	r22, Y+1	; 0x01
    2142:	7a 81       	ldd	r23, Y+2	; 0x02
    2144:	c8 01       	movw	r24, r16
    2146:	2e dd       	rcall	.-1444   	; 0x1ba4 <rb32_get_nth>
    2148:	4b 01       	movw	r8, r22
    214a:	5c 01       	movw	r10, r24
    214c:	21 e6       	ldi	r18, 0x61	; 97
    214e:	82 1a       	sub	r8, r18
    2150:	2e ea       	ldi	r18, 0xAE	; 174
    2152:	92 0a       	sbc	r9, r18
    2154:	2a e0       	ldi	r18, 0x0A	; 10
    2156:	a2 0a       	sbc	r10, r18
    2158:	b1 08       	sbc	r11, r1
    215a:	2f e7       	ldi	r18, 0x7F	; 127
    215c:	82 16       	cp	r8, r18
    215e:	2a e1       	ldi	r18, 0x1A	; 26
    2160:	92 06       	cpc	r9, r18
    2162:	26 e0       	ldi	r18, 0x06	; 6
    2164:	a2 06       	cpc	r10, r18
    2166:	b1 04       	cpc	r11, r1
    2168:	80 f4       	brcc	.+32     	; 0x218a <data_check+0x80>
    216a:	0e 94 14 22 	call	0x4428	; 0x4428 <__floatsisf>
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 ea       	ldi	r20, 0xA0	; 160
    2174:	50 e4       	ldi	r21, 0x40	; 64
    2176:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    217a:	9b 01       	movw	r18, r22
    217c:	ac 01       	movw	r20, r24
    217e:	c7 01       	movw	r24, r14
    2180:	b6 01       	movw	r22, r12
    2182:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    2186:	6b 01       	movw	r12, r22
    2188:	7c 01       	movw	r14, r24
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	05 97       	sbiw	r24, 0x05	; 5
    2196:	a1 f6       	brne	.-88     	; 0x2140 <data_check+0x36>
    2198:	19 82       	std	Y+1, r1	; 0x01
    219a:	1a 82       	std	Y+2, r1	; 0x02
    219c:	81 2c       	mov	r8, r1
    219e:	91 2c       	mov	r9, r1
    21a0:	54 01       	movw	r10, r8
    21a2:	69 81       	ldd	r22, Y+1	; 0x01
    21a4:	7a 81       	ldd	r23, Y+2	; 0x02
    21a6:	c8 01       	movw	r24, r16
    21a8:	fd dc       	rcall	.-1542   	; 0x1ba4 <rb32_get_nth>
    21aa:	2b 01       	movw	r4, r22
    21ac:	3c 01       	movw	r6, r24
    21ae:	21 e6       	ldi	r18, 0x61	; 97
    21b0:	42 1a       	sub	r4, r18
    21b2:	2e ea       	ldi	r18, 0xAE	; 174
    21b4:	52 0a       	sbc	r5, r18
    21b6:	2a e0       	ldi	r18, 0x0A	; 10
    21b8:	62 0a       	sbc	r6, r18
    21ba:	71 08       	sbc	r7, r1
    21bc:	2f e7       	ldi	r18, 0x7F	; 127
    21be:	42 16       	cp	r4, r18
    21c0:	2a e1       	ldi	r18, 0x1A	; 26
    21c2:	52 06       	cpc	r5, r18
    21c4:	26 e0       	ldi	r18, 0x06	; 6
    21c6:	62 06       	cpc	r6, r18
    21c8:	71 04       	cpc	r7, r1
    21ca:	90 f4       	brcc	.+36     	; 0x21f0 <data_check+0xe6>
    21cc:	0e 94 14 22 	call	0x4428	; 0x4428 <__floatsisf>
    21d0:	a7 01       	movw	r20, r14
    21d2:	96 01       	movw	r18, r12
    21d4:	0e 94 10 21 	call	0x4220	; 0x4220 <__subsf3>
    21d8:	9b 01       	movw	r18, r22
    21da:	ac 01       	movw	r20, r24
    21dc:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	c5 01       	movw	r24, r10
    21e6:	b4 01       	movw	r22, r8
    21e8:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    21ec:	4b 01       	movw	r8, r22
    21ee:	5c 01       	movw	r10, r24
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	05 97       	sbiw	r24, 0x05	; 5
    21fc:	91 f6       	brne	.-92     	; 0x21a2 <data_check+0x98>
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5e e3       	ldi	r21, 0x3E	; 62
    2206:	c5 01       	movw	r24, r10
    2208:	b4 01       	movw	r22, r8
    220a:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    220e:	69 83       	std	Y+1, r22	; 0x01
    2210:	7a 83       	std	Y+2, r23	; 0x02
    2212:	8b 83       	std	Y+3, r24	; 0x03
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	1d 82       	std	Y+5, r1	; 0x05
    2218:	1e 82       	std	Y+6, r1	; 0x06
    221a:	31 2c       	mov	r3, r1
    221c:	41 2c       	mov	r4, r1
    221e:	51 2c       	mov	r5, r1
    2220:	32 01       	movw	r6, r4
    2222:	6d 81       	ldd	r22, Y+5	; 0x05
    2224:	7e 81       	ldd	r23, Y+6	; 0x06
    2226:	c8 01       	movw	r24, r16
    2228:	bd dc       	rcall	.-1670   	; 0x1ba4 <rb32_get_nth>
    222a:	4b 01       	movw	r8, r22
    222c:	5c 01       	movw	r10, r24
    222e:	21 e6       	ldi	r18, 0x61	; 97
    2230:	82 1a       	sub	r8, r18
    2232:	2e ea       	ldi	r18, 0xAE	; 174
    2234:	92 0a       	sbc	r9, r18
    2236:	2a e0       	ldi	r18, 0x0A	; 10
    2238:	a2 0a       	sbc	r10, r18
    223a:	b1 08       	sbc	r11, r1
    223c:	2f e7       	ldi	r18, 0x7F	; 127
    223e:	82 16       	cp	r8, r18
    2240:	2a e1       	ldi	r18, 0x1A	; 26
    2242:	92 06       	cpc	r9, r18
    2244:	26 e0       	ldi	r18, 0x06	; 6
    2246:	a2 06       	cpc	r10, r18
    2248:	b1 04       	cpc	r11, r1
    224a:	50 f5       	brcc	.+84     	; 0x22a0 <data_check+0x196>
    224c:	0e 94 14 22 	call	0x4428	; 0x4428 <__floatsisf>
    2250:	4b 01       	movw	r8, r22
    2252:	5c 01       	movw	r10, r24
    2254:	a7 01       	movw	r20, r14
    2256:	96 01       	movw	r18, r12
    2258:	0e 94 10 21 	call	0x4220	; 0x4220 <__subsf3>
    225c:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2260:	9b 01       	movw	r18, r22
    2262:	77 23       	and	r23, r23
    2264:	24 f4       	brge	.+8      	; 0x226e <data_check+0x164>
    2266:	22 27       	eor	r18, r18
    2268:	33 27       	eor	r19, r19
    226a:	26 1b       	sub	r18, r22
    226c:	37 0b       	sbc	r19, r23
    226e:	b9 01       	movw	r22, r18
    2270:	33 0f       	add	r19, r19
    2272:	88 0b       	sbc	r24, r24
    2274:	99 0b       	sbc	r25, r25
    2276:	0e 94 14 22 	call	0x4428	; 0x4428 <__floatsisf>
    227a:	9b 01       	movw	r18, r22
    227c:	ac 01       	movw	r20, r24
    227e:	69 81       	ldd	r22, Y+1	; 0x01
    2280:	7a 81       	ldd	r23, Y+2	; 0x02
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	0e 94 c4 22 	call	0x4588	; 0x4588 <__gesf2>
    228a:	88 23       	and	r24, r24
    228c:	4c f0       	brlt	.+18     	; 0x22a0 <data_check+0x196>
    228e:	a5 01       	movw	r20, r10
    2290:	94 01       	movw	r18, r8
    2292:	c3 01       	movw	r24, r6
    2294:	b2 01       	movw	r22, r4
    2296:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    229a:	2b 01       	movw	r4, r22
    229c:	3c 01       	movw	r6, r24
    229e:	33 94       	inc	r3
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	01 96       	adiw	r24, 0x01	; 1
    22a6:	8d 83       	std	Y+5, r24	; 0x05
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	05 97       	sbiw	r24, 0x05	; 5
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <data_check+0x1a6>
    22ae:	b9 cf       	rjmp	.-142    	; 0x2222 <data_check+0x118>
    22b0:	33 20       	and	r3, r3
    22b2:	69 f0       	breq	.+26     	; 0x22ce <data_check+0x1c4>
    22b4:	63 2d       	mov	r22, r3
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    22c0:	9b 01       	movw	r18, r22
    22c2:	ac 01       	movw	r20, r24
    22c4:	c3 01       	movw	r24, r6
    22c6:	b2 01       	movw	r22, r4
    22c8:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <data_check+0x1cc>
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	80 e8       	ldi	r24, 0x80	; 128
    22d4:	9f eb       	ldi	r25, 0xBF	; 191
    22d6:	26 96       	adiw	r28, 0x06	; 6
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	df 90       	pop	r13
    22ea:	cf 90       	pop	r12
    22ec:	bf 90       	pop	r11
    22ee:	af 90       	pop	r10
    22f0:	9f 90       	pop	r9
    22f2:	8f 90       	pop	r8
    22f4:	7f 90       	pop	r7
    22f6:	6f 90       	pop	r6
    22f8:	5f 90       	pop	r5
    22fa:	4f 90       	pop	r4
    22fc:	3f 90       	pop	r3
    22fe:	08 95       	ret

00002300 <data_collect>:
    2300:	af 92       	push	r10
    2302:	bf 92       	push	r11
    2304:	cf 92       	push	r12
    2306:	df 92       	push	r13
    2308:	ef 92       	push	r14
    230a:	ff 92       	push	r15
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	00 d0       	rcall	.+0      	; 0x2316 <data_collect+0x16>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <data_collect+0x18>
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	5c 01       	movw	r10, r24
    231e:	8b 01       	movw	r16, r22
    2320:	16 dd       	rcall	.-1492   	; 0x1d4e <get_pressure>
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    232e:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2332:	69 83       	std	Y+1, r22	; 0x01
    2334:	7a 83       	std	Y+2, r23	; 0x02
    2336:	8b 83       	std	Y+3, r24	; 0x03
    2338:	9c 83       	std	Y+4, r25	; 0x04
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	be 01       	movw	r22, r28
    2340:	6f 5f       	subi	r22, 0xFF	; 255
    2342:	7f 4f       	sbci	r23, 0xFF	; 255
    2344:	c8 01       	movw	r24, r16
    2346:	d3 db       	rcall	.-2138   	; 0x1aee <rb32_write>
    2348:	c8 01       	movw	r24, r16
    234a:	df de       	rcall	.-578    	; 0x210a <data_check>
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e2       	ldi	r20, 0x20	; 32
    2352:	51 e4       	ldi	r21, 0x41	; 65
    2354:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    2358:	6b 01       	movw	r12, r22
    235a:	7c 01       	movw	r14, r24
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f eb       	ldi	r21, 0xBF	; 191
    2364:	0e 94 75 21 	call	0x42ea	; 0x42ea <__cmpsf2>
    2368:	88 23       	and	r24, r24
    236a:	d1 f1       	breq	.+116    	; 0x23e0 <data_collect+0xe0>
    236c:	c0 92 4d 21 	sts	0x214D, r12	; 0x80214d <press>
    2370:	d0 92 4e 21 	sts	0x214E, r13	; 0x80214e <press+0x1>
    2374:	e0 92 4f 21 	sts	0x214F, r14	; 0x80214f <press+0x2>
    2378:	f0 92 50 21 	sts	0x2150, r15	; 0x802150 <press+0x3>
    237c:	c7 01       	movw	r24, r14
    237e:	b6 01       	movw	r22, r12
    2380:	89 dd       	rcall	.-1262   	; 0x1e94 <get_altitude>
    2382:	60 93 45 21 	sts	0x2145, r22	; 0x802145 <alt>
    2386:	70 93 46 21 	sts	0x2146, r23	; 0x802146 <alt+0x1>
    238a:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <alt+0x2>
    238e:	90 93 48 21 	sts	0x2148, r25	; 0x802148 <alt+0x3>
    2392:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <alt>
    2396:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <alt+0x1>
    239a:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <alt+0x2>
    239e:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <alt+0x3>
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	48 ec       	ldi	r20, 0xC8	; 200
    23a8:	52 e4       	ldi	r21, 0x42	; 66
    23aa:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    23ae:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    23b2:	6d 83       	std	Y+5, r22	; 0x05
    23b4:	7e 83       	std	Y+6, r23	; 0x06
    23b6:	41 e0       	ldi	r20, 0x01	; 1
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	be 01       	movw	r22, r28
    23bc:	6b 5f       	subi	r22, 0xFB	; 251
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	c5 01       	movw	r24, r10
    23c2:	1f db       	rcall	.-2498   	; 0x1a02 <rb16_write>
    23c4:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    23c8:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    23cc:	c5 01       	movw	r24, r10
    23ce:	ea dd       	rcall	.-1068   	; 0x1fa4 <diff>
    23d0:	60 93 3d 21 	sts	0x213D, r22	; 0x80213d <velocity>
    23d4:	70 93 3e 21 	sts	0x213E, r23	; 0x80213e <velocity+0x1>
    23d8:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <velocity+0x2>
    23dc:	90 93 40 21 	sts	0x2140, r25	; 0x802140 <velocity+0x3>
    23e0:	83 e3       	ldi	r24, 0x33	; 51
    23e2:	93 e1       	ldi	r25, 0x13	; 19
    23e4:	a5 e9       	ldi	r26, 0x95	; 149
    23e6:	b3 e4       	ldi	r27, 0x43	; 67
    23e8:	80 93 49 21 	sts	0x2149, r24	; 0x802149 <temp>
    23ec:	90 93 4a 21 	sts	0x214A, r25	; 0x80214a <temp+0x1>
    23f0:	a0 93 4b 21 	sts	0x214B, r26	; 0x80214b <temp+0x2>
    23f4:	b0 93 4c 21 	sts	0x214C, r27	; 0x80214c <temp+0x3>
    23f8:	ac dd       	rcall	.-1192   	; 0x1f52 <get_voltage>
    23fa:	60 93 41 21 	sts	0x2141, r22	; 0x802141 <volt>
    23fe:	70 93 42 21 	sts	0x2142, r23	; 0x802142 <volt+0x1>
    2402:	80 93 43 21 	sts	0x2143, r24	; 0x802143 <volt+0x2>
    2406:	90 93 44 21 	sts	0x2144, r25	; 0x802144 <volt+0x3>
    240a:	26 96       	adiw	r28, 0x06	; 6
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	ff 90       	pop	r15
    241a:	ef 90       	pop	r14
    241c:	df 90       	pop	r13
    241e:	cf 90       	pop	r12
    2420:	bf 90       	pop	r11
    2422:	af 90       	pop	r10
    2424:	08 95       	ret

00002426 <state_check>:
    2426:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <state>
    242a:	81 30       	cpi	r24, 0x01	; 1
    242c:	81 f1       	breq	.+96     	; 0x248e <state_check+0x68>
    242e:	38 f0       	brcs	.+14     	; 0x243e <state_check+0x18>
    2430:	82 30       	cpi	r24, 0x02	; 2
    2432:	09 f4       	brne	.+2      	; 0x2436 <state_check+0x10>
    2434:	55 c0       	rjmp	.+170    	; 0x24e0 <state_check+0xba>
    2436:	83 30       	cpi	r24, 0x03	; 3
    2438:	09 f4       	brne	.+2      	; 0x243c <state_check+0x16>
    243a:	fc c0       	rjmp	.+504    	; 0x2634 <state_check+0x20e>
    243c:	7c c0       	rjmp	.+248    	; 0x2536 <state_check+0x110>
    243e:	60 91 3d 21 	lds	r22, 0x213D	; 0x80213d <velocity>
    2442:	70 91 3e 21 	lds	r23, 0x213E	; 0x80213e <velocity+0x1>
    2446:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <velocity+0x2>
    244a:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <velocity+0x3>
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e4       	ldi	r20, 0x40	; 64
    2454:	50 e4       	ldi	r21, 0x40	; 64
    2456:	0e 94 75 21 	call	0x42ea	; 0x42ea <__cmpsf2>
    245a:	88 23       	and	r24, r24
    245c:	0c f0       	brlt	.+2      	; 0x2460 <state_check+0x3a>
    245e:	ea c0       	rjmp	.+468    	; 0x2634 <state_check+0x20e>
    2460:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <alt>
    2464:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <alt+0x1>
    2468:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <alt+0x2>
    246c:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <alt+0x3>
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	41 ee       	ldi	r20, 0xE1	; 225
    2476:	53 e4       	ldi	r21, 0x43	; 67
    2478:	0e 94 c4 22 	call	0x4588	; 0x4588 <__gesf2>
    247c:	18 16       	cp	r1, r24
    247e:	0c f0       	brlt	.+2      	; 0x2482 <state_check+0x5c>
    2480:	d9 c0       	rjmp	.+434    	; 0x2634 <state_check+0x20e>
    2482:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <state>
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <state>
    248c:	08 95       	ret
    248e:	60 91 3d 21 	lds	r22, 0x213D	; 0x80213d <velocity>
    2492:	70 91 3e 21 	lds	r23, 0x213E	; 0x80213e <velocity+0x1>
    2496:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <velocity+0x2>
    249a:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <velocity+0x3>
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e4       	ldi	r20, 0x40	; 64
    24a4:	50 e4       	ldi	r21, 0x40	; 64
    24a6:	0e 94 75 21 	call	0x42ea	; 0x42ea <__cmpsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	84 f4       	brge	.+32     	; 0x24ce <state_check+0xa8>
    24ae:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <alt>
    24b2:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <alt+0x1>
    24b6:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <alt+0x2>
    24ba:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <alt+0x3>
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	41 ee       	ldi	r20, 0xE1	; 225
    24c4:	53 e4       	ldi	r21, 0x43	; 67
    24c6:	0e 94 75 21 	call	0x42ea	; 0x42ea <__cmpsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	1c f0       	brlt	.+6      	; 0x24d4 <state_check+0xae>
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	80 93 77 21 	sts	0x2177, r24	; 0x802177 <released>
    24d4:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <state>
    24d8:	8f 5f       	subi	r24, 0xFF	; 255
    24da:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <state>
    24de:	08 95       	ret
    24e0:	60 91 3d 21 	lds	r22, 0x213D	; 0x80213d <velocity>
    24e4:	70 91 3e 21 	lds	r23, 0x213E	; 0x80213e <velocity+0x1>
    24e8:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <velocity+0x2>
    24ec:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <velocity+0x3>
    24f0:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    24f4:	9b 01       	movw	r18, r22
    24f6:	77 23       	and	r23, r23
    24f8:	24 f4       	brge	.+8      	; 0x2502 <state_check+0xdc>
    24fa:	22 27       	eor	r18, r18
    24fc:	33 27       	eor	r19, r19
    24fe:	26 1b       	sub	r18, r22
    2500:	37 0b       	sbc	r19, r23
    2502:	23 30       	cpi	r18, 0x03	; 3
    2504:	31 05       	cpc	r19, r1
    2506:	8c f0       	brlt	.+34     	; 0x252a <state_check+0x104>
    2508:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <alt>
    250c:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <alt+0x1>
    2510:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <alt+0x2>
    2514:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <alt+0x3>
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 75 21 	call	0x42ea	; 0x42ea <__cmpsf2>
    2524:	88 23       	and	r24, r24
    2526:	0c f0       	brlt	.+2      	; 0x252a <state_check+0x104>
    2528:	85 c0       	rjmp	.+266    	; 0x2634 <state_check+0x20e>
    252a:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <state>
    252e:	8f 5f       	subi	r24, 0xFF	; 255
    2530:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <state>
    2534:	08 95       	ret
    2536:	60 91 3d 21 	lds	r22, 0x213D	; 0x80213d <velocity>
    253a:	70 91 3e 21 	lds	r23, 0x213E	; 0x80213e <velocity+0x1>
    253e:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <velocity+0x2>
    2542:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <velocity+0x3>
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e4       	ldi	r20, 0x40	; 64
    254c:	50 e4       	ldi	r21, 0x40	; 64
    254e:	0e 94 c4 22 	call	0x4588	; 0x4588 <__gesf2>
    2552:	18 16       	cp	r1, r24
    2554:	14 f4       	brge	.+4      	; 0x255a <state_check+0x134>
    2556:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <state>
    255a:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <alt>
    255e:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <alt+0x1>
    2562:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <alt+0x2>
    2566:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <alt+0x3>
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	41 ee       	ldi	r20, 0xE1	; 225
    2570:	53 e4       	ldi	r21, 0x43	; 67
    2572:	0e 94 c4 22 	call	0x4588	; 0x4588 <__gesf2>
    2576:	18 16       	cp	r1, r24
    2578:	9c f4       	brge	.+38     	; 0x25a0 <state_check+0x17a>
    257a:	60 91 3d 21 	lds	r22, 0x213D	; 0x80213d <velocity>
    257e:	70 91 3e 21 	lds	r23, 0x213E	; 0x80213e <velocity+0x1>
    2582:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <velocity+0x2>
    2586:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <velocity+0x3>
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e4       	ldi	r20, 0x40	; 64
    2590:	50 e4       	ldi	r21, 0x40	; 64
    2592:	0e 94 75 21 	call	0x42ea	; 0x42ea <__cmpsf2>
    2596:	88 23       	and	r24, r24
    2598:	1c f4       	brge	.+6      	; 0x25a0 <state_check+0x17a>
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <state>
    25a0:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <alt>
    25a4:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <alt+0x1>
    25a8:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <alt+0x2>
    25ac:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <alt+0x3>
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	41 ee       	ldi	r20, 0xE1	; 225
    25b6:	53 e4       	ldi	r21, 0x43	; 67
    25b8:	0e 94 75 21 	call	0x42ea	; 0x42ea <__cmpsf2>
    25bc:	88 23       	and	r24, r24
    25be:	9c f4       	brge	.+38     	; 0x25e6 <state_check+0x1c0>
    25c0:	60 91 3d 21 	lds	r22, 0x213D	; 0x80213d <velocity>
    25c4:	70 91 3e 21 	lds	r23, 0x213E	; 0x80213e <velocity+0x1>
    25c8:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <velocity+0x2>
    25cc:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <velocity+0x3>
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e4       	ldi	r20, 0x40	; 64
    25d6:	50 e4       	ldi	r21, 0x40	; 64
    25d8:	0e 94 75 21 	call	0x42ea	; 0x42ea <__cmpsf2>
    25dc:	88 23       	and	r24, r24
    25de:	1c f4       	brge	.+6      	; 0x25e6 <state_check+0x1c0>
    25e0:	82 e0       	ldi	r24, 0x02	; 2
    25e2:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <state>
    25e6:	60 91 3d 21 	lds	r22, 0x213D	; 0x80213d <velocity>
    25ea:	70 91 3e 21 	lds	r23, 0x213E	; 0x80213e <velocity+0x1>
    25ee:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <velocity+0x2>
    25f2:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <velocity+0x3>
    25f6:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    25fa:	9b 01       	movw	r18, r22
    25fc:	77 23       	and	r23, r23
    25fe:	24 f4       	brge	.+8      	; 0x2608 <state_check+0x1e2>
    2600:	22 27       	eor	r18, r18
    2602:	33 27       	eor	r19, r19
    2604:	26 1b       	sub	r18, r22
    2606:	37 0b       	sbc	r19, r23
    2608:	23 30       	cpi	r18, 0x03	; 3
    260a:	31 05       	cpc	r19, r1
    260c:	9c f4       	brge	.+38     	; 0x2634 <state_check+0x20e>
    260e:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <alt>
    2612:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <alt+0x1>
    2616:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <alt+0x2>
    261a:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <alt+0x3>
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e2       	ldi	r20, 0x20	; 32
    2624:	51 e4       	ldi	r21, 0x41	; 65
    2626:	0e 94 75 21 	call	0x42ea	; 0x42ea <__cmpsf2>
    262a:	88 23       	and	r24, r24
    262c:	1c f4       	brge	.+6      	; 0x2634 <state_check+0x20e>
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <state>
    2634:	08 95       	ret

00002636 <release_servo_init>:
    2636:	61 e0       	ldi	r22, 0x01	; 1
    2638:	84 e0       	ldi	r24, 0x04	; 4
    263a:	1e db       	rcall	.-2500   	; 0x1c78 <sysclk_enable_module>
    263c:	64 e0       	ldi	r22, 0x04	; 4
    263e:	84 e0       	ldi	r24, 0x04	; 4
    2640:	1b db       	rcall	.-2506   	; 0x1c78 <sysclk_enable_module>
    2642:	e0 e6       	ldi	r30, 0x60	; 96
    2644:	f6 e0       	ldi	r31, 0x06	; 6
    2646:	80 81       	ld	r24, Z
    2648:	81 60       	ori	r24, 0x01	; 1
    264a:	80 83       	st	Z, r24
    264c:	e0 e0       	ldi	r30, 0x00	; 0
    264e:	f9 e0       	ldi	r31, 0x09	; 9
    2650:	85 e0       	ldi	r24, 0x05	; 5
    2652:	80 83       	st	Z, r24
    2654:	83 e1       	ldi	r24, 0x13	; 19
    2656:	81 83       	std	Z+1, r24	; 0x01
    2658:	80 e1       	ldi	r24, 0x10	; 16
    265a:	97 e2       	ldi	r25, 0x27	; 39
    265c:	86 a3       	std	Z+38, r24	; 0x26
    265e:	97 a3       	std	Z+39, r25	; 0x27
    2660:	86 a1       	ldd	r24, Z+38	; 0x26
    2662:	97 a1       	ldd	r25, Z+39	; 0x27
    2664:	8e 5e       	subi	r24, 0xEE	; 238
    2666:	92 40       	sbci	r25, 0x02	; 2
    2668:	80 a7       	std	Z+40, r24	; 0x28
    266a:	91 a7       	std	Z+41, r25	; 0x29
    266c:	08 95       	ret

0000266e <servo_pid>:
    266e:	8f 92       	push	r8
    2670:	9f 92       	push	r9
    2672:	af 92       	push	r10
    2674:	bf 92       	push	r11
    2676:	cf 92       	push	r12
    2678:	df 92       	push	r13
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	7c 01       	movw	r14, r24
    2688:	c0 e0       	ldi	r28, 0x00	; 0
    268a:	d0 e0       	ldi	r29, 0x00	; 0
    268c:	00 e0       	ldi	r16, 0x00	; 0
    268e:	10 e0       	ldi	r17, 0x00	; 0
    2690:	be 01       	movw	r22, r28
    2692:	c7 01       	movw	r24, r14
    2694:	ff d9       	rcall	.-3074   	; 0x1a94 <rb16_get_nth>
    2696:	08 0f       	add	r16, r24
    2698:	19 1f       	adc	r17, r25
    269a:	21 96       	adiw	r28, 0x01	; 1
    269c:	ca 30       	cpi	r28, 0x0A	; 10
    269e:	d1 05       	cpc	r29, r1
    26a0:	b9 f7       	brne	.-18     	; 0x2690 <servo_pid+0x22>
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	c7 01       	movw	r24, r14
    26a8:	f5 d9       	rcall	.-3094   	; 0x1a94 <rb16_get_nth>
    26aa:	ec 01       	movw	r28, r24
    26ac:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    26b0:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    26b4:	c7 01       	movw	r24, r14
    26b6:	76 dc       	rcall	.-1812   	; 0x1fa4 <diff>
    26b8:	6b 01       	movw	r12, r22
    26ba:	7c 01       	movw	r14, r24
    26bc:	be 01       	movw	r22, r28
    26be:	dd 0f       	add	r29, r29
    26c0:	88 0b       	sbc	r24, r24
    26c2:	99 0b       	sbc	r25, r25
    26c4:	0e 94 14 22 	call	0x4428	; 0x4428 <__floatsisf>
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	a9 01       	movw	r20, r18
    26ce:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	48 ec       	ldi	r20, 0xC8	; 200
    26d8:	52 e4       	ldi	r21, 0x42	; 66
    26da:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    26de:	4b 01       	movw	r8, r22
    26e0:	5c 01       	movw	r10, r24
    26e2:	b8 01       	movw	r22, r16
    26e4:	11 0f       	add	r17, r17
    26e6:	88 0b       	sbc	r24, r24
    26e8:	99 0b       	sbc	r25, r25
    26ea:	0e 94 14 22 	call	0x4428	; 0x4428 <__floatsisf>
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	a9 01       	movw	r20, r18
    26f4:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	48 ec       	ldi	r20, 0xC8	; 200
    26fe:	52 e4       	ldi	r21, 0x42	; 66
    2700:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    2704:	9b 01       	movw	r18, r22
    2706:	ac 01       	movw	r20, r24
    2708:	c5 01       	movw	r24, r10
    270a:	b4 01       	movw	r22, r8
    270c:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    2710:	4b 01       	movw	r8, r22
    2712:	5c 01       	movw	r10, r24
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	a9 01       	movw	r20, r18
    271a:	c7 01       	movw	r24, r14
    271c:	b6 01       	movw	r22, r12
    271e:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    2722:	9b 01       	movw	r18, r22
    2724:	ac 01       	movw	r20, r24
    2726:	c5 01       	movw	r24, r10
    2728:	b4 01       	movw	r22, r8
    272a:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e8       	ldi	r19, 0x80	; 128
    2732:	4b eb       	ldi	r20, 0xBB	; 187
    2734:	54 e4       	ldi	r21, 0x44	; 68
    2736:	0e 94 11 21 	call	0x4222	; 0x4222 <__addsf3>
    273a:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__fixunssfsi>
    273e:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <servo_pulse>
    2742:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <servo_pulse+0x1>
    2746:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <servo_pulse>
    274a:	70 91 1a 20 	lds	r23, 0x201A	; 0x80201a <servo_pulse+0x1>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 12 22 	call	0x4424	; 0x4424 <__floatunsisf>
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a e7       	ldi	r20, 0x7A	; 122
    275c:	54 e4       	ldi	r21, 0x44	; 68
    275e:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__divsf3>
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a ef       	ldi	r20, 0xFA	; 250
    2768:	53 e4       	ldi	r21, 0x43	; 67
    276a:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    276e:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__fixunssfsi>
    2772:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    2776:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	ff 90       	pop	r15
    2784:	ef 90       	pop	r14
    2786:	df 90       	pop	r13
    2788:	cf 90       	pop	r12
    278a:	bf 90       	pop	r11
    278c:	af 90       	pop	r10
    278e:	9f 90       	pop	r9
    2790:	8f 90       	pop	r8
    2792:	08 95       	ret

00002794 <clock_init>:
    2794:	61 e0       	ldi	r22, 0x01	; 1
    2796:	85 e0       	ldi	r24, 0x05	; 5
    2798:	6f da       	rcall	.-2850   	; 0x1c78 <sysclk_enable_module>
    279a:	e0 e0       	ldi	r30, 0x00	; 0
    279c:	fa e0       	ldi	r31, 0x0A	; 10
    279e:	87 e0       	ldi	r24, 0x07	; 7
    27a0:	80 83       	st	Z, r24
    27a2:	81 e1       	ldi	r24, 0x11	; 17
    27a4:	9a e7       	ldi	r25, 0x7A	; 122
    27a6:	86 a3       	std	Z+38, r24	; 0x26
    27a8:	97 a3       	std	Z+39, r25	; 0x27
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	86 83       	std	Z+6, r24	; 0x06
    27ae:	08 95       	ret

000027b0 <cali_alt>:
	cali_alt();
	cali_ang();
}

void cali_alt(void){
	ground_p = press;
    27b0:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <press>
    27b4:	90 91 4e 21 	lds	r25, 0x214E	; 0x80214e <press+0x1>
    27b8:	a0 91 4f 21 	lds	r26, 0x214F	; 0x80214f <press+0x2>
    27bc:	b0 91 50 21 	lds	r27, 0x2150	; 0x802150 <press+0x3>
    27c0:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <ground_p>
    27c4:	90 93 2c 20 	sts	0x202C, r25	; 0x80202c <ground_p+0x1>
    27c8:	a0 93 2d 20 	sts	0x202D, r26	; 0x80202d <ground_p+0x2>
    27cc:	b0 93 2e 20 	sts	0x202E, r27	; 0x80202e <ground_p+0x3>
	//ground_a = alt;
	ground_t = get_temperature();
    27d0:	83 e3       	ldi	r24, 0x33	; 51
    27d2:	93 e1       	ldi	r25, 0x13	; 19
    27d4:	a5 e9       	ldi	r26, 0x95	; 149
    27d6:	b3 e4       	ldi	r27, 0x43	; 67
    27d8:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    27dc:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    27e0:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    27e4:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    27e8:	08 95       	ret

000027ea <cali_ang>:
}

void cali_ang(void){
	ref_roll = imu_roll();
    27ea:	0e 94 1c 0b 	call	0x1638	; 0x1638 <imu_roll>
    27ee:	60 93 60 21 	sts	0x2160, r22	; 0x802160 <ref_roll>
    27f2:	70 93 61 21 	sts	0x2161, r23	; 0x802161 <ref_roll+0x1>
    27f6:	80 93 62 21 	sts	0x2162, r24	; 0x802162 <ref_roll+0x2>
    27fa:	90 93 63 21 	sts	0x2163, r25	; 0x802163 <ref_roll+0x3>
	ref_pitch = imu_pitch();
    27fe:	0e 94 25 0b 	call	0x164a	; 0x164a <imu_pitch>
    2802:	60 93 5c 21 	sts	0x215C, r22	; 0x80215c <ref_pitch>
    2806:	70 93 5d 21 	sts	0x215D, r23	; 0x80215d <ref_pitch+0x1>
    280a:	80 93 5e 21 	sts	0x215E, r24	; 0x80215e <ref_pitch+0x2>
    280e:	90 93 5f 21 	sts	0x215F, r25	; 0x80215f <ref_pitch+0x3>
	ref_yaw = imu_heading();
    2812:	0e 94 2e 0b 	call	0x165c	; 0x165c <imu_heading>
    2816:	60 93 64 21 	sts	0x2164, r22	; 0x802164 <ref_yaw>
    281a:	70 93 65 21 	sts	0x2165, r23	; 0x802165 <ref_yaw+0x1>
    281e:	80 93 66 21 	sts	0x2166, r24	; 0x802166 <ref_yaw+0x2>
    2822:	90 93 67 21 	sts	0x2167, r25	; 0x802167 <ref_yaw+0x3>
    2826:	08 95       	ret

00002828 <calibrate>:

	SREG=oldInterruptState;
}

void calibrate(void){
	cali_alt();
    2828:	c3 df       	rcall	.-122    	; 0x27b0 <cali_alt>
	cali_ang();
    282a:	df cf       	rjmp	.-66     	; 0x27ea <cali_ang>
    282c:	08 95       	ret

0000282e <servo_release>:
    282e:	e0 e0       	ldi	r30, 0x00	; 0
	ref_pitch = imu_pitch();
	ref_yaw = imu_heading();
}

void servo_release(void){
	TCD0.CCA = TCD0.PER - 1200;
    2830:	f9 e0       	ldi	r31, 0x09	; 9
    2832:	86 a1       	ldd	r24, Z+38	; 0x26
    2834:	97 a1       	ldd	r25, Z+39	; 0x27
    2836:	80 5b       	subi	r24, 0xB0	; 176
    2838:	94 40       	sbci	r25, 0x04	; 4
    283a:	80 a7       	std	Z+40, r24	; 0x28
    283c:	91 a7       	std	Z+41, r25	; 0x29
    283e:	08 95       	ret

00002840 <servo_close>:
}

void servo_close(void){
	TCD0.CCA = TCD0.PER - 750;
    2840:	e0 e0       	ldi	r30, 0x00	; 0
    2842:	f9 e0       	ldi	r31, 0x09	; 9
    2844:	86 a1       	ldd	r24, Z+38	; 0x26
    2846:	97 a1       	ldd	r25, Z+39	; 0x27
    2848:	8e 5e       	subi	r24, 0xEE	; 238
    284a:	92 40       	sbci	r25, 0x02	; 2
    284c:	80 a7       	std	Z+40, r24	; 0x28
    284e:	91 a7       	std	Z+41, r25	; 0x29
    2850:	08 95       	ret

00002852 <packet>:
}

void packet(void){
    2852:	2f 92       	push	r2
    2854:	3f 92       	push	r3
    2856:	4f 92       	push	r4
    2858:	5f 92       	push	r5
    285a:	6f 92       	push	r6
    285c:	7f 92       	push	r7
    285e:	8f 92       	push	r8
    2860:	9f 92       	push	r9
    2862:	af 92       	push	r10
    2864:	bf 92       	push	r11
    2866:	cf 92       	push	r12
    2868:	df 92       	push	r13
    286a:	ef 92       	push	r14
    286c:	ff 92       	push	r15
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	cf 93       	push	r28
    2874:	df 93       	push	r29
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	e9 97       	sbiw	r28, 0x39	; 57
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	de bf       	out	0x3e, r29	; 62
	//XBEE_spi_write(str);
	packets++;
    2880:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <packets>
    2884:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <packets+0x1>
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <packets>
    288e:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    2892:	60 91 1b 21 	lds	r22, 0x211B	; 0x80211b <angle>
    2896:	70 91 1c 21 	lds	r23, 0x211C	; 0x80211c <angle+0x1>
    289a:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <angle+0x2>
    289e:	90 91 1e 21 	lds	r25, 0x211E	; 0x80211e <angle+0x3>
    28a2:	20 91 78 21 	lds	r18, 0x2178	; 0x802178 <state>
    28a6:	29 83       	std	Y+1, r18	; 0x01
    28a8:	40 90 1f 21 	lds	r4, 0x211F	; 0x80211f <rpm>
    28ac:	50 90 20 21 	lds	r5, 0x2120	; 0x802120 <rpm+0x1>
    28b0:	60 90 21 21 	lds	r6, 0x2121	; 0x802121 <rpm+0x2>
    28b4:	70 90 22 21 	lds	r7, 0x2122	; 0x802122 <rpm+0x3>
    28b8:	80 90 23 21 	lds	r8, 0x2123	; 0x802123 <roll>
    28bc:	90 90 24 21 	lds	r9, 0x2124	; 0x802124 <roll+0x1>
    28c0:	a0 90 25 21 	lds	r10, 0x2125	; 0x802125 <roll+0x2>
    28c4:	b0 90 26 21 	lds	r11, 0x2126	; 0x802126 <roll+0x3>
    28c8:	c0 90 27 21 	lds	r12, 0x2127	; 0x802127 <pitch>
    28cc:	d0 90 28 21 	lds	r13, 0x2128	; 0x802128 <pitch+0x1>
    28d0:	e0 90 29 21 	lds	r14, 0x2129	; 0x802129 <pitch+0x2>
    28d4:	f0 90 2a 21 	lds	r15, 0x212A	; 0x80212a <pitch+0x3>
    28d8:	40 91 2b 21 	lds	r20, 0x212B	; 0x80212b <gps_sats>
    28dc:	50 91 2c 21 	lds	r21, 0x212C	; 0x80212c <gps_sats+0x1>
    28e0:	48 af       	std	Y+56, r20	; 0x38
    28e2:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    28e4:	20 91 2d 21 	lds	r18, 0x212D	; 0x80212d <gps_alt>
    28e8:	30 91 2e 21 	lds	r19, 0x212E	; 0x80212e <gps_alt+0x1>
    28ec:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <gps_alt+0x2>
    28f0:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <gps_alt+0x3>
    28f4:	2a 83       	std	Y+2, r18	; 0x02
    28f6:	3b 83       	std	Y+3, r19	; 0x03
    28f8:	4c 83       	std	Y+4, r20	; 0x04
    28fa:	5d 83       	std	Y+5, r21	; 0x05
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    28fc:	20 91 2d 21 	lds	r18, 0x212D	; 0x80212d <gps_alt>
    2900:	30 91 2e 21 	lds	r19, 0x212E	; 0x80212e <gps_alt+0x1>
    2904:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <gps_alt+0x2>
    2908:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <gps_alt+0x3>
    290c:	2e 83       	std	Y+6, r18	; 0x06
    290e:	3f 83       	std	Y+7, r19	; 0x07
    2910:	48 87       	std	Y+8, r20	; 0x08
    2912:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2914:	20 91 31 21 	lds	r18, 0x2131	; 0x802131 <gps_long>
    2918:	30 91 32 21 	lds	r19, 0x2132	; 0x802132 <gps_long+0x1>
    291c:	40 91 33 21 	lds	r20, 0x2133	; 0x802133 <gps_long+0x2>
    2920:	50 91 34 21 	lds	r21, 0x2134	; 0x802134 <gps_long+0x3>
    2924:	2a 87       	std	Y+10, r18	; 0x0a
    2926:	3b 87       	std	Y+11, r19	; 0x0b
    2928:	4c 87       	std	Y+12, r20	; 0x0c
    292a:	5d 87       	std	Y+13, r21	; 0x0d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    292c:	20 91 31 21 	lds	r18, 0x2131	; 0x802131 <gps_long>
    2930:	30 91 32 21 	lds	r19, 0x2132	; 0x802132 <gps_long+0x1>
    2934:	40 91 33 21 	lds	r20, 0x2133	; 0x802133 <gps_long+0x2>
    2938:	50 91 34 21 	lds	r21, 0x2134	; 0x802134 <gps_long+0x3>
    293c:	2e 87       	std	Y+14, r18	; 0x0e
    293e:	3f 87       	std	Y+15, r19	; 0x0f
    2940:	48 8b       	std	Y+16, r20	; 0x10
    2942:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2944:	20 91 35 21 	lds	r18, 0x2135	; 0x802135 <gps_lat>
    2948:	30 91 36 21 	lds	r19, 0x2136	; 0x802136 <gps_lat+0x1>
    294c:	40 91 37 21 	lds	r20, 0x2137	; 0x802137 <gps_lat+0x2>
    2950:	50 91 38 21 	lds	r21, 0x2138	; 0x802138 <gps_lat+0x3>
    2954:	2a 8b       	std	Y+18, r18	; 0x12
    2956:	3b 8b       	std	Y+19, r19	; 0x13
    2958:	4c 8b       	std	Y+20, r20	; 0x14
    295a:	5d 8b       	std	Y+21, r21	; 0x15
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    295c:	20 91 35 21 	lds	r18, 0x2135	; 0x802135 <gps_lat>
    2960:	30 91 36 21 	lds	r19, 0x2136	; 0x802136 <gps_lat+0x1>
    2964:	40 91 37 21 	lds	r20, 0x2137	; 0x802137 <gps_lat+0x2>
    2968:	50 91 38 21 	lds	r21, 0x2138	; 0x802138 <gps_lat+0x3>
    296c:	2e 8b       	std	Y+22, r18	; 0x16
    296e:	3f 8b       	std	Y+23, r19	; 0x17
    2970:	48 8f       	std	Y+24, r20	; 0x18
    2972:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    2974:	20 91 39 21 	lds	r18, 0x2139	; 0x802139 <gps_t>
    2978:	30 91 3a 21 	lds	r19, 0x213A	; 0x80213a <gps_t+0x1>
    297c:	40 91 3b 21 	lds	r20, 0x213B	; 0x80213b <gps_t+0x2>
    2980:	50 91 3c 21 	lds	r21, 0x213C	; 0x80213c <gps_t+0x3>
    2984:	2a 8f       	std	Y+26, r18	; 0x1a
    2986:	3b 8f       	std	Y+27, r19	; 0x1b
    2988:	4c 8f       	std	Y+28, r20	; 0x1c
    298a:	5d 8f       	std	Y+29, r21	; 0x1d
    298c:	20 91 39 21 	lds	r18, 0x2139	; 0x802139 <gps_t>
    2990:	30 91 3a 21 	lds	r19, 0x213A	; 0x80213a <gps_t+0x1>
    2994:	40 91 3b 21 	lds	r20, 0x213B	; 0x80213b <gps_t+0x2>
    2998:	50 91 3c 21 	lds	r21, 0x213C	; 0x80213c <gps_t+0x3>
    299c:	2e 8f       	std	Y+30, r18	; 0x1e
    299e:	3f 8f       	std	Y+31, r19	; 0x1f
    29a0:	48 a3       	std	Y+32, r20	; 0x20
    29a2:	59 a3       	std	Y+33, r21	; 0x21
    29a4:	20 91 39 21 	lds	r18, 0x2139	; 0x802139 <gps_t>
    29a8:	30 91 3a 21 	lds	r19, 0x213A	; 0x80213a <gps_t+0x1>
    29ac:	40 91 3b 21 	lds	r20, 0x213B	; 0x80213b <gps_t+0x2>
    29b0:	50 91 3c 21 	lds	r21, 0x213C	; 0x80213c <gps_t+0x3>
    29b4:	2a a3       	std	Y+34, r18	; 0x22
    29b6:	3b a3       	std	Y+35, r19	; 0x23
    29b8:	4c a3       	std	Y+36, r20	; 0x24
    29ba:	5d a3       	std	Y+37, r21	; 0x25
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    29bc:	20 91 41 21 	lds	r18, 0x2141	; 0x802141 <volt>
    29c0:	30 91 42 21 	lds	r19, 0x2142	; 0x802142 <volt+0x1>
    29c4:	40 91 43 21 	lds	r20, 0x2143	; 0x802143 <volt+0x2>
    29c8:	50 91 44 21 	lds	r21, 0x2144	; 0x802144 <volt+0x3>
    29cc:	2e a3       	std	Y+38, r18	; 0x26
    29ce:	3f a3       	std	Y+39, r19	; 0x27
    29d0:	48 a7       	std	Y+40, r20	; 0x28
    29d2:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    29d4:	20 91 49 21 	lds	r18, 0x2149	; 0x802149 <temp>
    29d8:	30 91 4a 21 	lds	r19, 0x214A	; 0x80214a <temp+0x1>
    29dc:	40 91 4b 21 	lds	r20, 0x214B	; 0x80214b <temp+0x2>
    29e0:	50 91 4c 21 	lds	r21, 0x214C	; 0x80214c <temp+0x3>
    29e4:	2a a7       	std	Y+42, r18	; 0x2a
    29e6:	3b a7       	std	Y+43, r19	; 0x2b
    29e8:	4c a7       	std	Y+44, r20	; 0x2c
    29ea:	5d a7       	std	Y+45, r21	; 0x2d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    29ec:	20 91 4d 21 	lds	r18, 0x214D	; 0x80214d <press>
    29f0:	30 91 4e 21 	lds	r19, 0x214E	; 0x80214e <press+0x1>
    29f4:	40 91 4f 21 	lds	r20, 0x214F	; 0x80214f <press+0x2>
    29f8:	50 91 50 21 	lds	r21, 0x2150	; 0x802150 <press+0x3>
    29fc:	2e a7       	std	Y+46, r18	; 0x2e
    29fe:	3f a7       	std	Y+47, r19	; 0x2f
    2a00:	48 ab       	std	Y+48, r20	; 0x30
    2a02:	59 ab       	std	Y+49, r21	; 0x31
    2a04:	20 91 45 21 	lds	r18, 0x2145	; 0x802145 <alt>
    2a08:	30 91 46 21 	lds	r19, 0x2146	; 0x802146 <alt+0x1>
    2a0c:	40 91 47 21 	lds	r20, 0x2147	; 0x802147 <alt+0x2>
    2a10:	50 91 48 21 	lds	r21, 0x2148	; 0x802148 <alt+0x3>
    2a14:	2a ab       	std	Y+50, r18	; 0x32
    2a16:	3b ab       	std	Y+51, r19	; 0x33
    2a18:	4c ab       	std	Y+52, r20	; 0x34
    2a1a:	5d ab       	std	Y+53, r21	; 0x35
    2a1c:	00 91 51 21 	lds	r16, 0x2151	; 0x802151 <packets>
    2a20:	10 91 52 21 	lds	r17, 0x2152	; 0x802152 <packets+0x1>
    2a24:	20 90 55 21 	lds	r2, 0x2155	; 0x802155 <timer>
    2a28:	30 90 56 21 	lds	r3, 0x2156	; 0x802156 <timer+0x1>
    2a2c:	40 91 55 21 	lds	r20, 0x2155	; 0x802155 <timer>
    2a30:	50 91 56 21 	lds	r21, 0x2156	; 0x802156 <timer+0x1>
    2a34:	4e ab       	std	Y+54, r20	; 0x36
    2a36:	5f ab       	std	Y+55, r21	; 0x37
    2a38:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2a3c:	7f 93       	push	r23
    2a3e:	6f 93       	push	r22
    2a40:	1f 92       	push	r1
    2a42:	59 81       	ldd	r21, Y+1	; 0x01
    2a44:	5f 93       	push	r21
    2a46:	c3 01       	movw	r24, r6
    2a48:	b2 01       	movw	r22, r4
    2a4a:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2a4e:	7f 93       	push	r23
    2a50:	6f 93       	push	r22
    2a52:	c5 01       	movw	r24, r10
    2a54:	b4 01       	movw	r22, r8
    2a56:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2a5a:	7f 93       	push	r23
    2a5c:	6f 93       	push	r22
    2a5e:	c7 01       	movw	r24, r14
    2a60:	b6 01       	movw	r22, r12
    2a62:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2a66:	7f 93       	push	r23
    2a68:	6f 93       	push	r22
    2a6a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a6c:	8f 93       	push	r24
    2a6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a70:	9f 93       	push	r25
    2a72:	6a 81       	ldd	r22, Y+2	; 0x02
    2a74:	7b 81       	ldd	r23, Y+3	; 0x03
    2a76:	8c 81       	ldd	r24, Y+4	; 0x04
    2a78:	9d 81       	ldd	r25, Y+5	; 0x05
    2a7a:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2a7e:	9b 01       	movw	r18, r22
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	66 0f       	add	r22, r22
    2a86:	77 1f       	adc	r23, r23
    2a88:	66 0f       	add	r22, r22
    2a8a:	77 1f       	adc	r23, r23
    2a8c:	66 0f       	add	r22, r22
    2a8e:	77 1f       	adc	r23, r23
    2a90:	c9 01       	movw	r24, r18
    2a92:	86 0f       	add	r24, r22
    2a94:	97 1f       	adc	r25, r23
    2a96:	6a e0       	ldi	r22, 0x0A	; 10
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	0e 94 b3 24 	call	0x4966	; 0x4966 <__divmodhi4>
    2a9e:	9f 93       	push	r25
    2aa0:	8f 93       	push	r24
    2aa2:	6e 81       	ldd	r22, Y+6	; 0x06
    2aa4:	7f 81       	ldd	r23, Y+7	; 0x07
    2aa6:	88 85       	ldd	r24, Y+8	; 0x08
    2aa8:	99 85       	ldd	r25, Y+9	; 0x09
    2aaa:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2aae:	7f 93       	push	r23
    2ab0:	6f 93       	push	r22
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	34 e2       	ldi	r19, 0x24	; 36
    2ab6:	44 e7       	ldi	r20, 0x74	; 116
    2ab8:	59 e4       	ldi	r21, 0x49	; 73
    2aba:	6a 85       	ldd	r22, Y+10	; 0x0a
    2abc:	7b 85       	ldd	r23, Y+11	; 0x0b
    2abe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ac0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ac2:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    2ac6:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2aca:	20 e4       	ldi	r18, 0x40	; 64
    2acc:	32 e4       	ldi	r19, 0x42	; 66
    2ace:	4f e0       	ldi	r20, 0x0F	; 15
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    2ad6:	9b 01       	movw	r18, r22
    2ad8:	77 23       	and	r23, r23
    2ada:	24 f4       	brge	.+8      	; 0x2ae4 <packet+0x292>
    2adc:	22 27       	eor	r18, r18
    2ade:	33 27       	eor	r19, r19
    2ae0:	26 1b       	sub	r18, r22
    2ae2:	37 0b       	sbc	r19, r23
    2ae4:	c9 01       	movw	r24, r18
    2ae6:	33 0f       	add	r19, r19
    2ae8:	aa 0b       	sbc	r26, r26
    2aea:	bb 0b       	sbc	r27, r27
    2aec:	bf 93       	push	r27
    2aee:	af 93       	push	r26
    2af0:	9f 93       	push	r25
    2af2:	8f 93       	push	r24
    2af4:	6e 85       	ldd	r22, Y+14	; 0x0e
    2af6:	7f 85       	ldd	r23, Y+15	; 0x0f
    2af8:	88 89       	ldd	r24, Y+16	; 0x10
    2afa:	99 89       	ldd	r25, Y+17	; 0x11
    2afc:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2b00:	7f 93       	push	r23
    2b02:	6f 93       	push	r22
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	34 e2       	ldi	r19, 0x24	; 36
    2b08:	44 e7       	ldi	r20, 0x74	; 116
    2b0a:	59 e4       	ldi	r21, 0x49	; 73
    2b0c:	6a 89       	ldd	r22, Y+18	; 0x12
    2b0e:	7b 89       	ldd	r23, Y+19	; 0x13
    2b10:	8c 89       	ldd	r24, Y+20	; 0x14
    2b12:	9d 89       	ldd	r25, Y+21	; 0x15
    2b14:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    2b18:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2b1c:	20 e4       	ldi	r18, 0x40	; 64
    2b1e:	32 e4       	ldi	r19, 0x42	; 66
    2b20:	4f e0       	ldi	r20, 0x0F	; 15
    2b22:	50 e0       	ldi	r21, 0x00	; 0
    2b24:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    2b28:	9f 93       	push	r25
    2b2a:	8f 93       	push	r24
    2b2c:	7f 93       	push	r23
    2b2e:	6f 93       	push	r22
    2b30:	6e 89       	ldd	r22, Y+22	; 0x16
    2b32:	7f 89       	ldd	r23, Y+23	; 0x17
    2b34:	88 8d       	ldd	r24, Y+24	; 0x18
    2b36:	99 8d       	ldd	r25, Y+25	; 0x19
    2b38:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2b3c:	7f 93       	push	r23
    2b3e:	6f 93       	push	r22
    2b40:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b42:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b46:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b48:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2b4c:	0f 2e       	mov	r0, r31
    2b4e:	f4 e6       	ldi	r31, 0x64	; 100
    2b50:	cf 2e       	mov	r12, r31
    2b52:	d1 2c       	mov	r13, r1
    2b54:	e1 2c       	mov	r14, r1
    2b56:	f1 2c       	mov	r15, r1
    2b58:	f0 2d       	mov	r31, r0
    2b5a:	a7 01       	movw	r20, r14
    2b5c:	96 01       	movw	r18, r12
    2b5e:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    2b62:	7f 93       	push	r23
    2b64:	6f 93       	push	r22
    2b66:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2b68:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2b6a:	88 a1       	ldd	r24, Y+32	; 0x20
    2b6c:	99 a1       	ldd	r25, Y+33	; 0x21
    2b6e:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2b72:	0f 2e       	mov	r0, r31
    2b74:	f0 e1       	ldi	r31, 0x10	; 16
    2b76:	8f 2e       	mov	r8, r31
    2b78:	f7 e2       	ldi	r31, 0x27	; 39
    2b7a:	9f 2e       	mov	r9, r31
    2b7c:	a1 2c       	mov	r10, r1
    2b7e:	b1 2c       	mov	r11, r1
    2b80:	f0 2d       	mov	r31, r0
    2b82:	a5 01       	movw	r20, r10
    2b84:	94 01       	movw	r18, r8
    2b86:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    2b8a:	a7 01       	movw	r20, r14
    2b8c:	96 01       	movw	r18, r12
    2b8e:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    2b92:	3f 93       	push	r19
    2b94:	2f 93       	push	r18
    2b96:	6a a1       	ldd	r22, Y+34	; 0x22
    2b98:	7b a1       	ldd	r23, Y+35	; 0x23
    2b9a:	8c a1       	ldd	r24, Y+36	; 0x24
    2b9c:	9d a1       	ldd	r25, Y+37	; 0x25
    2b9e:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2ba2:	a5 01       	movw	r20, r10
    2ba4:	94 01       	movw	r18, r8
    2ba6:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    2baa:	3f 93       	push	r19
    2bac:	2f 93       	push	r18
    2bae:	6e a1       	ldd	r22, Y+38	; 0x26
    2bb0:	7f a1       	ldd	r23, Y+39	; 0x27
    2bb2:	88 a5       	ldd	r24, Y+40	; 0x28
    2bb4:	99 a5       	ldd	r25, Y+41	; 0x29
    2bb6:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2bba:	7f 93       	push	r23
    2bbc:	6f 93       	push	r22
    2bbe:	23 e3       	ldi	r18, 0x33	; 51
    2bc0:	33 e9       	ldi	r19, 0x93	; 147
    2bc2:	48 e8       	ldi	r20, 0x88	; 136
    2bc4:	53 e4       	ldi	r21, 0x43	; 67
    2bc6:	6a a5       	ldd	r22, Y+42	; 0x2a
    2bc8:	7b a5       	ldd	r23, Y+43	; 0x2b
    2bca:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bcc:	9d a5       	ldd	r25, Y+45	; 0x2d
    2bce:	0e 94 10 21 	call	0x4220	; 0x4220 <__subsf3>
    2bd2:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2bd6:	7f 93       	push	r23
    2bd8:	6f 93       	push	r22
    2bda:	6e a5       	ldd	r22, Y+46	; 0x2e
    2bdc:	7f a5       	ldd	r23, Y+47	; 0x2f
    2bde:	88 a9       	ldd	r24, Y+48	; 0x30
    2be0:	99 a9       	ldd	r25, Y+49	; 0x31
    2be2:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2be6:	9f 93       	push	r25
    2be8:	8f 93       	push	r24
    2bea:	7f 93       	push	r23
    2bec:	6f 93       	push	r22
    2bee:	6a a9       	ldd	r22, Y+50	; 0x32
    2bf0:	7b a9       	ldd	r23, Y+51	; 0x33
    2bf2:	8c a9       	ldd	r24, Y+52	; 0x34
    2bf4:	9d a9       	ldd	r25, Y+53	; 0x35
    2bf6:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2bfa:	7f 93       	push	r23
    2bfc:	6f 93       	push	r22
    2bfe:	1f 93       	push	r17
    2c00:	0f 93       	push	r16
    2c02:	91 01       	movw	r18, r2
    2c04:	ad ec       	ldi	r26, 0xCD	; 205
    2c06:	bc ec       	ldi	r27, 0xCC	; 204
    2c08:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__umulhisi3>
    2c0c:	96 95       	lsr	r25
    2c0e:	87 95       	ror	r24
    2c10:	96 95       	lsr	r25
    2c12:	87 95       	ror	r24
    2c14:	96 95       	lsr	r25
    2c16:	87 95       	ror	r24
    2c18:	9c 01       	movw	r18, r24
    2c1a:	22 0f       	add	r18, r18
    2c1c:	33 1f       	adc	r19, r19
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	82 0f       	add	r24, r18
    2c2c:	93 1f       	adc	r25, r19
    2c2e:	28 1a       	sub	r2, r24
    2c30:	39 0a       	sbc	r3, r25
    2c32:	3f 92       	push	r3
    2c34:	2f 92       	push	r2
    2c36:	2e a9       	ldd	r18, Y+54	; 0x36
    2c38:	3f a9       	ldd	r19, Y+55	; 0x37
    2c3a:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__umulhisi3>
    2c3e:	96 95       	lsr	r25
    2c40:	87 95       	ror	r24
    2c42:	96 95       	lsr	r25
    2c44:	87 95       	ror	r24
    2c46:	96 95       	lsr	r25
    2c48:	87 95       	ror	r24
    2c4a:	9f 93       	push	r25
    2c4c:	8f 93       	push	r24
    2c4e:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    2c52:	8f 93       	push	r24
    2c54:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    2c58:	8f 93       	push	r24
    2c5a:	20 ec       	ldi	r18, 0xC0	; 192
    2c5c:	31 e2       	ldi	r19, 0x21	; 33
    2c5e:	3f 93       	push	r19
    2c60:	2f 93       	push	r18
    2c62:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	20 ec       	ldi	r18, 0xC0	; 192
    2c6c:	31 e2       	ldi	r19, 0x21	; 33
    2c6e:	3f 93       	push	r19
    2c70:	2f 93       	push	r18
    2c72:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <printf>
}
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	e9 96       	adiw	r28, 0x39	; 57
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	cf 90       	pop	r12
    2c90:	bf 90       	pop	r11
    2c92:	af 90       	pop	r10
    2c94:	9f 90       	pop	r9
    2c96:	8f 90       	pop	r8
    2c98:	7f 90       	pop	r7
    2c9a:	6f 90       	pop	r6
    2c9c:	5f 90       	pop	r5
    2c9e:	4f 90       	pop	r4
    2ca0:	3f 90       	pop	r3
    2ca2:	2f 90       	pop	r2
    2ca4:	08 95       	ret

00002ca6 <eeprom_write_const>:

void eeprom_write_const(void){
    2ca6:	4f 92       	push	r4
    2ca8:	5f 92       	push	r5
    2caa:	6f 92       	push	r6
    2cac:	7f 92       	push	r7
    2cae:	8f 92       	push	r8
    2cb0:	9f 92       	push	r9
    2cb2:	af 92       	push	r10
    2cb4:	bf 92       	push	r11
    2cb6:	cf 92       	push	r12
    2cb8:	df 92       	push	r13
    2cba:	ef 92       	push	r14
    2cbc:	ff 92       	push	r15
    2cbe:	0f 93       	push	r16
    2cc0:	1f 93       	push	r17
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	a0 97       	sbiw	r28, 0x20	; 32
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	de bf       	out	0x3e, r29	; 62
	uint64_t p = 0;
	uint64_t t = 0;
	
	memcpy(&p, &ground_p, 8);
    2cd0:	ab e2       	ldi	r26, 0x2B	; 43
    2cd2:	b0 e2       	ldi	r27, 0x20	; 32
    2cd4:	fc 91       	ld	r31, X
    2cd6:	11 96       	adiw	r26, 0x01	; 1
    2cd8:	5c 90       	ld	r5, X
    2cda:	11 97       	sbiw	r26, 0x01	; 1
    2cdc:	12 96       	adiw	r26, 0x02	; 2
    2cde:	6c 90       	ld	r6, X
    2ce0:	12 97       	sbiw	r26, 0x02	; 2
    2ce2:	13 96       	adiw	r26, 0x03	; 3
    2ce4:	7c 90       	ld	r7, X
    2ce6:	13 97       	sbiw	r26, 0x03	; 3
    2ce8:	14 96       	adiw	r26, 0x04	; 4
    2cea:	8c 90       	ld	r8, X
    2cec:	14 97       	sbiw	r26, 0x04	; 4
    2cee:	15 96       	adiw	r26, 0x05	; 5
    2cf0:	9c 90       	ld	r9, X
    2cf2:	15 97       	sbiw	r26, 0x05	; 5
    2cf4:	16 96       	adiw	r26, 0x06	; 6
    2cf6:	ac 90       	ld	r10, X
    2cf8:	16 97       	sbiw	r26, 0x06	; 6
    2cfa:	17 96       	adiw	r26, 0x07	; 7
    2cfc:	4c 90       	ld	r4, X
	memcpy(&t, &ground_t, 8);
    2cfe:	a7 e2       	ldi	r26, 0x27	; 39
    2d00:	b0 e2       	ldi	r27, 0x20	; 32
    2d02:	ec 91       	ld	r30, X
    2d04:	11 96       	adiw	r26, 0x01	; 1
    2d06:	bc 90       	ld	r11, X
    2d08:	11 97       	sbiw	r26, 0x01	; 1
    2d0a:	12 96       	adiw	r26, 0x02	; 2
    2d0c:	cc 90       	ld	r12, X
    2d0e:	12 97       	sbiw	r26, 0x02	; 2
    2d10:	13 96       	adiw	r26, 0x03	; 3
    2d12:	dc 90       	ld	r13, X
    2d14:	13 97       	sbiw	r26, 0x03	; 3
    2d16:	14 96       	adiw	r26, 0x04	; 4
    2d18:	ec 90       	ld	r14, X
    2d1a:	14 97       	sbiw	r26, 0x04	; 4
    2d1c:	15 96       	adiw	r26, 0x05	; 5
    2d1e:	fc 90       	ld	r15, X
    2d20:	15 97       	sbiw	r26, 0x05	; 5
    2d22:	16 96       	adiw	r26, 0x06	; 6
    2d24:	1c 91       	ld	r17, X
    2d26:	16 97       	sbiw	r26, 0x06	; 6
    2d28:	17 96       	adiw	r26, 0x07	; 7
    2d2a:	ac 91       	ld	r26, X

	uint8_t data[] = {p & 0xFF, (p >> 8) & 0xFF, (p >> 16) & 0xFF, (p >> 24) & 0xFF, (p >> 32) & 0xFF, (p >> 40) & 0xFF, (p >> 48) & 0xFF, p >> 56,
    2d2c:	f9 83       	std	Y+1, r31	; 0x01
    2d2e:	2f 2f       	mov	r18, r31
    2d30:	35 2d       	mov	r19, r5
    2d32:	46 2d       	mov	r20, r6
    2d34:	57 2d       	mov	r21, r7
    2d36:	68 2d       	mov	r22, r8
    2d38:	79 2d       	mov	r23, r9
    2d3a:	8a 2d       	mov	r24, r10
    2d3c:	94 2d       	mov	r25, r4
    2d3e:	08 e0       	ldi	r16, 0x08	; 8
    2d40:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2d44:	2a 83       	std	Y+2, r18	; 0x02
    2d46:	2f 2f       	mov	r18, r31
    2d48:	35 2d       	mov	r19, r5
    2d4a:	46 2d       	mov	r20, r6
    2d4c:	57 2d       	mov	r21, r7
    2d4e:	68 2d       	mov	r22, r8
    2d50:	79 2d       	mov	r23, r9
    2d52:	8a 2d       	mov	r24, r10
    2d54:	94 2d       	mov	r25, r4
    2d56:	00 e1       	ldi	r16, 0x10	; 16
    2d58:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2d5c:	2b 83       	std	Y+3, r18	; 0x03
    2d5e:	2f 2f       	mov	r18, r31
    2d60:	35 2d       	mov	r19, r5
    2d62:	46 2d       	mov	r20, r6
    2d64:	57 2d       	mov	r21, r7
    2d66:	68 2d       	mov	r22, r8
    2d68:	79 2d       	mov	r23, r9
    2d6a:	8a 2d       	mov	r24, r10
    2d6c:	94 2d       	mov	r25, r4
    2d6e:	08 e1       	ldi	r16, 0x18	; 24
    2d70:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2d74:	2c 83       	std	Y+4, r18	; 0x04
    2d76:	2f 2f       	mov	r18, r31
    2d78:	35 2d       	mov	r19, r5
    2d7a:	46 2d       	mov	r20, r6
    2d7c:	57 2d       	mov	r21, r7
    2d7e:	68 2d       	mov	r22, r8
    2d80:	79 2d       	mov	r23, r9
    2d82:	8a 2d       	mov	r24, r10
    2d84:	94 2d       	mov	r25, r4
    2d86:	00 e2       	ldi	r16, 0x20	; 32
    2d88:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2d8c:	2d 83       	std	Y+5, r18	; 0x05
    2d8e:	2f 2f       	mov	r18, r31
    2d90:	35 2d       	mov	r19, r5
    2d92:	46 2d       	mov	r20, r6
    2d94:	57 2d       	mov	r21, r7
    2d96:	68 2d       	mov	r22, r8
    2d98:	79 2d       	mov	r23, r9
    2d9a:	8a 2d       	mov	r24, r10
    2d9c:	94 2d       	mov	r25, r4
    2d9e:	08 e2       	ldi	r16, 0x28	; 40
    2da0:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2da4:	2e 83       	std	Y+6, r18	; 0x06
    2da6:	2f 2f       	mov	r18, r31
    2da8:	35 2d       	mov	r19, r5
    2daa:	46 2d       	mov	r20, r6
    2dac:	57 2d       	mov	r21, r7
    2dae:	68 2d       	mov	r22, r8
    2db0:	79 2d       	mov	r23, r9
    2db2:	8a 2d       	mov	r24, r10
    2db4:	94 2d       	mov	r25, r4
    2db6:	00 e3       	ldi	r16, 0x30	; 48
    2db8:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2dbc:	2f 83       	std	Y+7, r18	; 0x07
    2dbe:	2f 2f       	mov	r18, r31
    2dc0:	35 2d       	mov	r19, r5
    2dc2:	46 2d       	mov	r20, r6
    2dc4:	57 2d       	mov	r21, r7
    2dc6:	68 2d       	mov	r22, r8
    2dc8:	79 2d       	mov	r23, r9
    2dca:	8a 2d       	mov	r24, r10
    2dcc:	94 2d       	mov	r25, r4
    2dce:	08 e3       	ldi	r16, 0x38	; 56
    2dd0:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2dd4:	28 87       	std	Y+8, r18	; 0x08
    2dd6:	e9 87       	std	Y+9, r30	; 0x09
    2dd8:	2e 2f       	mov	r18, r30
    2dda:	3b 2d       	mov	r19, r11
    2ddc:	4c 2d       	mov	r20, r12
    2dde:	5d 2d       	mov	r21, r13
    2de0:	6e 2d       	mov	r22, r14
    2de2:	7f 2d       	mov	r23, r15
    2de4:	81 2f       	mov	r24, r17
    2de6:	9a 2f       	mov	r25, r26
    2de8:	08 e0       	ldi	r16, 0x08	; 8
    2dea:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2dee:	2a 87       	std	Y+10, r18	; 0x0a
    2df0:	2e 2f       	mov	r18, r30
    2df2:	3b 2d       	mov	r19, r11
    2df4:	4c 2d       	mov	r20, r12
    2df6:	5d 2d       	mov	r21, r13
    2df8:	6e 2d       	mov	r22, r14
    2dfa:	7f 2d       	mov	r23, r15
    2dfc:	81 2f       	mov	r24, r17
    2dfe:	9a 2f       	mov	r25, r26
    2e00:	00 e1       	ldi	r16, 0x10	; 16
    2e02:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2e06:	2b 87       	std	Y+11, r18	; 0x0b
    2e08:	2e 2f       	mov	r18, r30
    2e0a:	3b 2d       	mov	r19, r11
    2e0c:	4c 2d       	mov	r20, r12
    2e0e:	5d 2d       	mov	r21, r13
    2e10:	6e 2d       	mov	r22, r14
    2e12:	7f 2d       	mov	r23, r15
    2e14:	81 2f       	mov	r24, r17
    2e16:	9a 2f       	mov	r25, r26
    2e18:	08 e1       	ldi	r16, 0x18	; 24
    2e1a:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2e1e:	2c 87       	std	Y+12, r18	; 0x0c
    2e20:	2e 2f       	mov	r18, r30
    2e22:	3b 2d       	mov	r19, r11
    2e24:	4c 2d       	mov	r20, r12
    2e26:	5d 2d       	mov	r21, r13
    2e28:	6e 2d       	mov	r22, r14
    2e2a:	7f 2d       	mov	r23, r15
    2e2c:	81 2f       	mov	r24, r17
    2e2e:	9a 2f       	mov	r25, r26
    2e30:	00 e2       	ldi	r16, 0x20	; 32
    2e32:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2e36:	2d 87       	std	Y+13, r18	; 0x0d
    2e38:	2e 2f       	mov	r18, r30
    2e3a:	3b 2d       	mov	r19, r11
    2e3c:	4c 2d       	mov	r20, r12
    2e3e:	5d 2d       	mov	r21, r13
    2e40:	6e 2d       	mov	r22, r14
    2e42:	7f 2d       	mov	r23, r15
    2e44:	81 2f       	mov	r24, r17
    2e46:	9a 2f       	mov	r25, r26
    2e48:	08 e2       	ldi	r16, 0x28	; 40
    2e4a:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2e4e:	2e 87       	std	Y+14, r18	; 0x0e
    2e50:	2e 2f       	mov	r18, r30
    2e52:	3b 2d       	mov	r19, r11
    2e54:	4c 2d       	mov	r20, r12
    2e56:	5d 2d       	mov	r21, r13
    2e58:	6e 2d       	mov	r22, r14
    2e5a:	7f 2d       	mov	r23, r15
    2e5c:	81 2f       	mov	r24, r17
    2e5e:	9a 2f       	mov	r25, r26
    2e60:	00 e3       	ldi	r16, 0x30	; 48
    2e62:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2e66:	2f 87       	std	Y+15, r18	; 0x0f
    2e68:	2e 2f       	mov	r18, r30
    2e6a:	3b 2d       	mov	r19, r11
    2e6c:	4c 2d       	mov	r20, r12
    2e6e:	5d 2d       	mov	r21, r13
    2e70:	6e 2d       	mov	r22, r14
    2e72:	7f 2d       	mov	r23, r15
    2e74:	81 2f       	mov	r24, r17
    2e76:	9a 2f       	mov	r25, r26
    2e78:	08 e3       	ldi	r16, 0x38	; 56
    2e7a:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__lshrdi3>
    2e7e:	28 8b       	std	Y+16, r18	; 0x10
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
    2e80:	80 e1       	ldi	r24, 0x10	; 16
    2e82:	ef e2       	ldi	r30, 0x2F	; 47
    2e84:	f0 e2       	ldi	r31, 0x20	; 32
    2e86:	de 01       	movw	r26, r28
    2e88:	51 96       	adiw	r26, 0x11	; 17
    2e8a:	01 90       	ld	r0, Z+
    2e8c:	0d 92       	st	X+, r0
    2e8e:	8a 95       	dec	r24
    2e90:	e1 f7       	brne	.-8      	; 0x2e8a <eeprom_write_const+0x1e4>
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
    2e92:	83 e3       	ldi	r24, 0x33	; 51
    2e94:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    2e98:	fe 01       	movw	r30, r28
    2e9a:	71 96       	adiw	r30, 0x11	; 17
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	01 96       	adiw	r24, 0x01	; 1
    2ea0:	ae 01       	movw	r20, r28
    2ea2:	4f 5d       	subi	r20, 0xDF	; 223
    2ea4:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 16; i++){
		NVM.ADDR0 = addresses[i];
    2ea6:	60 ec       	ldi	r22, 0xC0	; 192
    2ea8:	71 e0       	ldi	r23, 0x01	; 1
    2eaa:	21 91       	ld	r18, Z+
    2eac:	db 01       	movw	r26, r22
    2eae:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	2d 91       	ld	r18, X+
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	db 01       	movw	r26, r22
    2eb8:	14 96       	adiw	r26, 0x04	; 4
    2eba:	2c 93       	st	X, r18
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 16; i++){
    2ebc:	e4 17       	cp	r30, r20
    2ebe:	f5 07       	cpc	r31, r21
    2ec0:	a1 f7       	brne	.-24     	; 0x2eaa <eeprom_write_const+0x204>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    2ec2:	e0 ec       	ldi	r30, 0xC0	; 192
    2ec4:	f1 e0       	ldi	r31, 0x01	; 1
    2ec6:	85 e3       	ldi	r24, 0x35	; 53
    2ec8:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    2eca:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    2ecc:	80 e1       	ldi	r24, 0x10	; 16
    2ece:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    2ed0:	88 ed       	ldi	r24, 0xD8	; 216
    2ed2:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    2ed8:	87 85       	ldd	r24, Z+15	; 0x0f
    2eda:	88 23       	and	r24, r24
    2edc:	ec f3       	brlt	.-6      	; 0x2ed8 <eeprom_write_const+0x232>
}
    2ede:	a0 96       	adiw	r28, 0x20	; 32
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	1f 91       	pop	r17
    2eea:	0f 91       	pop	r16
    2eec:	ff 90       	pop	r15
    2eee:	ef 90       	pop	r14
    2ef0:	df 90       	pop	r13
    2ef2:	cf 90       	pop	r12
    2ef4:	bf 90       	pop	r11
    2ef6:	af 90       	pop	r10
    2ef8:	9f 90       	pop	r9
    2efa:	8f 90       	pop	r8
    2efc:	7f 90       	pop	r7
    2efe:	6f 90       	pop	r6
    2f00:	5f 90       	pop	r5
    2f02:	4f 90       	pop	r4
    2f04:	08 95       	ret

00002f06 <eeprom_write>:

void eeprom_write(void){
    2f06:	0f 93       	push	r16
    2f08:	1f 93       	push	r17
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	60 97       	sbiw	r28, 0x10	; 16
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	de bf       	out	0x3e, r29	; 62
	uint16_t a = (uint16_t) ((int16_t) alt); // creates an unsigned int of the altitude
    2f18:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <alt>
    2f1c:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <alt+0x1>
    2f20:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <alt+0x2>
    2f24:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <alt+0x3>
    2f28:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    2f2c:	16 2f       	mov	r17, r22
    2f2e:	07 2f       	mov	r16, r23
	uint16_t v = (uint16_t) ((int16_t) velocity);
    2f30:	60 91 3d 21 	lds	r22, 0x213D	; 0x80213d <velocity>
    2f34:	70 91 3e 21 	lds	r23, 0x213E	; 0x80213e <velocity+0x1>
    2f38:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <velocity+0x2>
    2f3c:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <velocity+0x3>
    2f40:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>

	// saves data and addresses in array
	uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF};
    2f44:	09 83       	std	Y+1, r16	; 0x01
    2f46:	1a 83       	std	Y+2, r17	; 0x02
    2f48:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <packets>
    2f4c:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <packets+0x1>
    2f50:	9b 83       	std	Y+3, r25	; 0x03
    2f52:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <packets>
    2f56:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <packets+0x1>
    2f5a:	8c 83       	std	Y+4, r24	; 0x04
    2f5c:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <timer>
    2f60:	90 91 56 21 	lds	r25, 0x2156	; 0x802156 <timer+0x1>
    2f64:	9d 83       	std	Y+5, r25	; 0x05
    2f66:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <timer>
    2f6a:	90 91 56 21 	lds	r25, 0x2156	; 0x802156 <timer+0x1>
    2f6e:	8e 83       	std	Y+6, r24	; 0x06
    2f70:	7f 83       	std	Y+7, r23	; 0x07
    2f72:	68 87       	std	Y+8, r22	; 0x08
	uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0};
    2f74:	88 e0       	ldi	r24, 0x08	; 8
    2f76:	ef e3       	ldi	r30, 0x3F	; 63
    2f78:	f0 e2       	ldi	r31, 0x20	; 32
    2f7a:	de 01       	movw	r26, r28
    2f7c:	19 96       	adiw	r26, 0x09	; 9
    2f7e:	01 90       	ld	r0, Z+
    2f80:	0d 92       	st	X+, r0
    2f82:	8a 95       	dec	r24
    2f84:	e1 f7       	brne	.-8      	; 0x2f7e <eeprom_write+0x78>

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
    2f86:	83 e3       	ldi	r24, 0x33	; 51
    2f88:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	39 96       	adiw	r30, 0x09	; 9
    2f90:	ce 01       	movw	r24, r28
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	ae 01       	movw	r20, r28
    2f96:	4f 5e       	subi	r20, 0xEF	; 239
    2f98:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 8; i++){
		NVM.ADDR0 = addresses[i];
    2f9a:	60 ec       	ldi	r22, 0xC0	; 192
    2f9c:	71 e0       	ldi	r23, 0x01	; 1
    2f9e:	21 91       	ld	r18, Z+
    2fa0:	db 01       	movw	r26, r22
    2fa2:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	2d 91       	ld	r18, X+
    2fa8:	cd 01       	movw	r24, r26
    2faa:	db 01       	movw	r26, r22
    2fac:	14 96       	adiw	r26, 0x04	; 4
    2fae:	2c 93       	st	X, r18
	uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF};
	uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0};

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 8; i++){
    2fb0:	e4 17       	cp	r30, r20
    2fb2:	f5 07       	cpc	r31, r21
    2fb4:	a1 f7       	brne	.-24     	; 0x2f9e <eeprom_write+0x98>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    2fb6:	e0 ec       	ldi	r30, 0xC0	; 192
    2fb8:	f1 e0       	ldi	r31, 0x01	; 1
    2fba:	85 e3       	ldi	r24, 0x35	; 53
    2fbc:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    2fbe:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    2fc0:	80 e1       	ldi	r24, 0x10	; 16
    2fc2:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    2fc4:	88 ed       	ldi	r24, 0xD8	; 216
    2fc6:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    2fcc:	87 85       	ldd	r24, Z+15	; 0x0f
    2fce:	88 23       	and	r24, r24
    2fd0:	ec f3       	brlt	.-6      	; 0x2fcc <eeprom_write+0xc6>
}
    2fd2:	60 96       	adiw	r28, 0x10	; 16
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	08 95       	ret

00002fe2 <time_update>:
	TCE0.CTRLA = 0x07; // divisor set to 1024 0x07
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void time_update(void){
    2fe2:	2f 92       	push	r2
    2fe4:	3f 92       	push	r3
    2fe6:	4f 92       	push	r4
    2fe8:	5f 92       	push	r5
    2fea:	6f 92       	push	r6
    2fec:	7f 92       	push	r7
    2fee:	8f 92       	push	r8
    2ff0:	9f 92       	push	r9
    2ff2:	af 92       	push	r10
    2ff4:	bf 92       	push	r11
    2ff6:	cf 92       	push	r12
    2ff8:	df 92       	push	r13
    2ffa:	ef 92       	push	r14
    2ffc:	ff 92       	push	r15
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	ef 97       	sbiw	r28, 0x3f	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	de bf       	out	0x3e, r29	; 62
	packets++;
    3010:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <packets>
    3014:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <packets+0x1>
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <packets>
    301e:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <packets+0x1>

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    3022:	60 91 1b 21 	lds	r22, 0x211B	; 0x80211b <angle>
    3026:	70 91 1c 21 	lds	r23, 0x211C	; 0x80211c <angle+0x1>
    302a:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <angle+0x2>
    302e:	90 91 1e 21 	lds	r25, 0x211E	; 0x80211e <angle+0x3>
    3032:	20 91 78 21 	lds	r18, 0x2178	; 0x802178 <state>
    3036:	29 83       	std	Y+1, r18	; 0x01
    3038:	40 90 1f 21 	lds	r4, 0x211F	; 0x80211f <rpm>
    303c:	50 90 20 21 	lds	r5, 0x2120	; 0x802120 <rpm+0x1>
    3040:	60 90 21 21 	lds	r6, 0x2121	; 0x802121 <rpm+0x2>
    3044:	70 90 22 21 	lds	r7, 0x2122	; 0x802122 <rpm+0x3>
    3048:	80 90 23 21 	lds	r8, 0x2123	; 0x802123 <roll>
    304c:	90 90 24 21 	lds	r9, 0x2124	; 0x802124 <roll+0x1>
    3050:	a0 90 25 21 	lds	r10, 0x2125	; 0x802125 <roll+0x2>
    3054:	b0 90 26 21 	lds	r11, 0x2126	; 0x802126 <roll+0x3>
    3058:	c0 90 27 21 	lds	r12, 0x2127	; 0x802127 <pitch>
    305c:	d0 90 28 21 	lds	r13, 0x2128	; 0x802128 <pitch+0x1>
    3060:	e0 90 29 21 	lds	r14, 0x2129	; 0x802129 <pitch+0x2>
    3064:	f0 90 2a 21 	lds	r15, 0x212A	; 0x80212a <pitch+0x3>
    3068:	40 91 2b 21 	lds	r20, 0x212B	; 0x80212b <gps_sats>
    306c:	50 91 2c 21 	lds	r21, 0x212C	; 0x80212c <gps_sats+0x1>
    3070:	4e af       	std	Y+62, r20	; 0x3e
    3072:	5f af       	std	Y+63, r21	; 0x3f
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    3074:	20 91 2d 21 	lds	r18, 0x212D	; 0x80212d <gps_alt>
    3078:	30 91 2e 21 	lds	r19, 0x212E	; 0x80212e <gps_alt+0x1>
    307c:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <gps_alt+0x2>
    3080:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <gps_alt+0x3>
    3084:	2a 83       	std	Y+2, r18	; 0x02
    3086:	3b 83       	std	Y+3, r19	; 0x03
    3088:	4c 83       	std	Y+4, r20	; 0x04
    308a:	5d 83       	std	Y+5, r21	; 0x05
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    308c:	20 91 2d 21 	lds	r18, 0x212D	; 0x80212d <gps_alt>
    3090:	30 91 2e 21 	lds	r19, 0x212E	; 0x80212e <gps_alt+0x1>
    3094:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <gps_alt+0x2>
    3098:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <gps_alt+0x3>
    309c:	2e 83       	std	Y+6, r18	; 0x06
    309e:	3f 83       	std	Y+7, r19	; 0x07
    30a0:	48 87       	std	Y+8, r20	; 0x08
    30a2:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    30a4:	20 91 31 21 	lds	r18, 0x2131	; 0x802131 <gps_long>
    30a8:	30 91 32 21 	lds	r19, 0x2132	; 0x802132 <gps_long+0x1>
    30ac:	40 91 33 21 	lds	r20, 0x2133	; 0x802133 <gps_long+0x2>
    30b0:	50 91 34 21 	lds	r21, 0x2134	; 0x802134 <gps_long+0x3>
    30b4:	2a 87       	std	Y+10, r18	; 0x0a
    30b6:	3b 87       	std	Y+11, r19	; 0x0b
    30b8:	4c 87       	std	Y+12, r20	; 0x0c
    30ba:	5d 87       	std	Y+13, r21	; 0x0d
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    30bc:	20 91 31 21 	lds	r18, 0x2131	; 0x802131 <gps_long>
    30c0:	30 91 32 21 	lds	r19, 0x2132	; 0x802132 <gps_long+0x1>
    30c4:	40 91 33 21 	lds	r20, 0x2133	; 0x802133 <gps_long+0x2>
    30c8:	50 91 34 21 	lds	r21, 0x2134	; 0x802134 <gps_long+0x3>
    30cc:	2e 87       	std	Y+14, r18	; 0x0e
    30ce:	3f 87       	std	Y+15, r19	; 0x0f
    30d0:	48 8b       	std	Y+16, r20	; 0x10
    30d2:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    30d4:	20 91 35 21 	lds	r18, 0x2135	; 0x802135 <gps_lat>
    30d8:	30 91 36 21 	lds	r19, 0x2136	; 0x802136 <gps_lat+0x1>
    30dc:	40 91 37 21 	lds	r20, 0x2137	; 0x802137 <gps_lat+0x2>
    30e0:	50 91 38 21 	lds	r21, 0x2138	; 0x802138 <gps_lat+0x3>
    30e4:	2a 8b       	std	Y+18, r18	; 0x12
    30e6:	3b 8b       	std	Y+19, r19	; 0x13
    30e8:	4c 8b       	std	Y+20, r20	; 0x14
    30ea:	5d 8b       	std	Y+21, r21	; 0x15
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    30ec:	20 91 35 21 	lds	r18, 0x2135	; 0x802135 <gps_lat>
    30f0:	30 91 36 21 	lds	r19, 0x2136	; 0x802136 <gps_lat+0x1>
    30f4:	40 91 37 21 	lds	r20, 0x2137	; 0x802137 <gps_lat+0x2>
    30f8:	50 91 38 21 	lds	r21, 0x2138	; 0x802138 <gps_lat+0x3>
    30fc:	2e 8b       	std	Y+22, r18	; 0x16
    30fe:	3f 8b       	std	Y+23, r19	; 0x17
    3100:	48 8f       	std	Y+24, r20	; 0x18
    3102:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    3104:	20 91 39 21 	lds	r18, 0x2139	; 0x802139 <gps_t>
    3108:	30 91 3a 21 	lds	r19, 0x213A	; 0x80213a <gps_t+0x1>
    310c:	40 91 3b 21 	lds	r20, 0x213B	; 0x80213b <gps_t+0x2>
    3110:	50 91 3c 21 	lds	r21, 0x213C	; 0x80213c <gps_t+0x3>
    3114:	2a 8f       	std	Y+26, r18	; 0x1a
    3116:	3b 8f       	std	Y+27, r19	; 0x1b
    3118:	4c 8f       	std	Y+28, r20	; 0x1c
    311a:	5d 8f       	std	Y+29, r21	; 0x1d
    311c:	20 91 39 21 	lds	r18, 0x2139	; 0x802139 <gps_t>
    3120:	30 91 3a 21 	lds	r19, 0x213A	; 0x80213a <gps_t+0x1>
    3124:	40 91 3b 21 	lds	r20, 0x213B	; 0x80213b <gps_t+0x2>
    3128:	50 91 3c 21 	lds	r21, 0x213C	; 0x80213c <gps_t+0x3>
    312c:	2e 8f       	std	Y+30, r18	; 0x1e
    312e:	3f 8f       	std	Y+31, r19	; 0x1f
    3130:	48 a3       	std	Y+32, r20	; 0x20
    3132:	59 a3       	std	Y+33, r21	; 0x21
    3134:	20 91 39 21 	lds	r18, 0x2139	; 0x802139 <gps_t>
    3138:	30 91 3a 21 	lds	r19, 0x213A	; 0x80213a <gps_t+0x1>
    313c:	40 91 3b 21 	lds	r20, 0x213B	; 0x80213b <gps_t+0x2>
    3140:	50 91 3c 21 	lds	r21, 0x213C	; 0x80213c <gps_t+0x3>
    3144:	2a a3       	std	Y+34, r18	; 0x22
    3146:	3b a3       	std	Y+35, r19	; 0x23
    3148:	4c a3       	std	Y+36, r20	; 0x24
    314a:	5d a3       	std	Y+37, r21	; 0x25
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
    314c:	20 91 41 21 	lds	r18, 0x2141	; 0x802141 <volt>
    3150:	30 91 42 21 	lds	r19, 0x2142	; 0x802142 <volt+0x1>
    3154:	40 91 43 21 	lds	r20, 0x2143	; 0x802143 <volt+0x2>
    3158:	50 91 44 21 	lds	r21, 0x2144	; 0x802144 <volt+0x3>
    315c:	2e a3       	std	Y+38, r18	; 0x26
    315e:	3f a3       	std	Y+39, r19	; 0x27
    3160:	48 a7       	std	Y+40, r20	; 0x28
    3162:	59 a7       	std	Y+41, r21	; 0x29
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    3164:	20 91 41 21 	lds	r18, 0x2141	; 0x802141 <volt>
    3168:	30 91 42 21 	lds	r19, 0x2142	; 0x802142 <volt+0x1>
    316c:	40 91 43 21 	lds	r20, 0x2143	; 0x802143 <volt+0x2>
    3170:	50 91 44 21 	lds	r21, 0x2144	; 0x802144 <volt+0x3>
    3174:	2a a7       	std	Y+42, r18	; 0x2a
    3176:	3b a7       	std	Y+43, r19	; 0x2b
    3178:	4c a7       	std	Y+44, r20	; 0x2c
    317a:	5d a7       	std	Y+45, r21	; 0x2d
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
    317c:	20 91 49 21 	lds	r18, 0x2149	; 0x802149 <temp>
    3180:	30 91 4a 21 	lds	r19, 0x214A	; 0x80214a <temp+0x1>
    3184:	40 91 4b 21 	lds	r20, 0x214B	; 0x80214b <temp+0x2>
    3188:	50 91 4c 21 	lds	r21, 0x214C	; 0x80214c <temp+0x3>
    318c:	2e a7       	std	Y+46, r18	; 0x2e
    318e:	3f a7       	std	Y+47, r19	; 0x2f
    3190:	48 ab       	std	Y+48, r20	; 0x30
    3192:	59 ab       	std	Y+49, r21	; 0x31
    3194:	20 91 49 21 	lds	r18, 0x2149	; 0x802149 <temp>
    3198:	30 91 4a 21 	lds	r19, 0x214A	; 0x80214a <temp+0x1>
    319c:	40 91 4b 21 	lds	r20, 0x214B	; 0x80214b <temp+0x2>
    31a0:	50 91 4c 21 	lds	r21, 0x214C	; 0x80214c <temp+0x3>
    31a4:	2a ab       	std	Y+50, r18	; 0x32
    31a6:	3b ab       	std	Y+51, r19	; 0x33
    31a8:	4c ab       	std	Y+52, r20	; 0x34
    31aa:	5d ab       	std	Y+53, r21	; 0x35
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    31ac:	20 91 4d 21 	lds	r18, 0x214D	; 0x80214d <press>
    31b0:	30 91 4e 21 	lds	r19, 0x214E	; 0x80214e <press+0x1>
    31b4:	40 91 4f 21 	lds	r20, 0x214F	; 0x80214f <press+0x2>
    31b8:	50 91 50 21 	lds	r21, 0x2150	; 0x802150 <press+0x3>
    31bc:	2e ab       	std	Y+54, r18	; 0x36
    31be:	3f ab       	std	Y+55, r19	; 0x37
    31c0:	48 af       	std	Y+56, r20	; 0x38
    31c2:	59 af       	std	Y+57, r21	; 0x39
    31c4:	20 91 45 21 	lds	r18, 0x2145	; 0x802145 <alt>
    31c8:	30 91 46 21 	lds	r19, 0x2146	; 0x802146 <alt+0x1>
    31cc:	40 91 47 21 	lds	r20, 0x2147	; 0x802147 <alt+0x2>
    31d0:	50 91 48 21 	lds	r21, 0x2148	; 0x802148 <alt+0x3>
    31d4:	2a af       	std	Y+58, r18	; 0x3a
    31d6:	3b af       	std	Y+59, r19	; 0x3b
    31d8:	4c af       	std	Y+60, r20	; 0x3c
    31da:	5d af       	std	Y+61, r21	; 0x3d
    31dc:	20 90 51 21 	lds	r2, 0x2151	; 0x802151 <packets>
    31e0:	30 90 52 21 	lds	r3, 0x2152	; 0x802152 <packets+0x1>
    31e4:	00 91 55 21 	lds	r16, 0x2155	; 0x802155 <timer>
    31e8:	10 91 56 21 	lds	r17, 0x2156	; 0x802156 <timer+0x1>
    31ec:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    31f0:	7f 93       	push	r23
    31f2:	6f 93       	push	r22
    31f4:	1f 92       	push	r1
    31f6:	39 81       	ldd	r19, Y+1	; 0x01
    31f8:	3f 93       	push	r19
    31fa:	c3 01       	movw	r24, r6
    31fc:	b2 01       	movw	r22, r4
    31fe:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    3202:	7f 93       	push	r23
    3204:	6f 93       	push	r22
    3206:	c5 01       	movw	r24, r10
    3208:	b4 01       	movw	r22, r8
    320a:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    320e:	7f 93       	push	r23
    3210:	6f 93       	push	r22
    3212:	c7 01       	movw	r24, r14
    3214:	b6 01       	movw	r22, r12
    3216:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    321a:	7f 93       	push	r23
    321c:	6f 93       	push	r22
    321e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3220:	4f 93       	push	r20
    3222:	5e ad       	ldd	r21, Y+62	; 0x3e
    3224:	5f 93       	push	r21
    3226:	6a 81       	ldd	r22, Y+2	; 0x02
    3228:	7b 81       	ldd	r23, Y+3	; 0x03
    322a:	8c 81       	ldd	r24, Y+4	; 0x04
    322c:	9d 81       	ldd	r25, Y+5	; 0x05
    322e:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    3232:	9b 01       	movw	r18, r22
    3234:	22 0f       	add	r18, r18
    3236:	33 1f       	adc	r19, r19
    3238:	66 0f       	add	r22, r22
    323a:	77 1f       	adc	r23, r23
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	66 0f       	add	r22, r22
    3242:	77 1f       	adc	r23, r23
    3244:	c9 01       	movw	r24, r18
    3246:	86 0f       	add	r24, r22
    3248:	97 1f       	adc	r25, r23
    324a:	6a e0       	ldi	r22, 0x0A	; 10
    324c:	70 e0       	ldi	r23, 0x00	; 0
    324e:	0e 94 b3 24 	call	0x4966	; 0x4966 <__divmodhi4>
    3252:	9f 93       	push	r25
    3254:	8f 93       	push	r24
    3256:	6e 81       	ldd	r22, Y+6	; 0x06
    3258:	7f 81       	ldd	r23, Y+7	; 0x07
    325a:	88 85       	ldd	r24, Y+8	; 0x08
    325c:	99 85       	ldd	r25, Y+9	; 0x09
    325e:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    3262:	7f 93       	push	r23
    3264:	6f 93       	push	r22
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	34 e2       	ldi	r19, 0x24	; 36
    326a:	44 e7       	ldi	r20, 0x74	; 116
    326c:	59 e4       	ldi	r21, 0x49	; 73
    326e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3270:	7b 85       	ldd	r23, Y+11	; 0x0b
    3272:	8c 85       	ldd	r24, Y+12	; 0x0c
    3274:	9d 85       	ldd	r25, Y+13	; 0x0d
    3276:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    327a:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    327e:	20 e4       	ldi	r18, 0x40	; 64
    3280:	32 e4       	ldi	r19, 0x42	; 66
    3282:	4f e0       	ldi	r20, 0x0F	; 15
    3284:	50 e0       	ldi	r21, 0x00	; 0
    3286:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    328a:	9b 01       	movw	r18, r22
    328c:	77 23       	and	r23, r23
    328e:	24 f4       	brge	.+8      	; 0x3298 <time_update+0x2b6>
    3290:	22 27       	eor	r18, r18
    3292:	33 27       	eor	r19, r19
    3294:	26 1b       	sub	r18, r22
    3296:	37 0b       	sbc	r19, r23
    3298:	c9 01       	movw	r24, r18
    329a:	33 0f       	add	r19, r19
    329c:	aa 0b       	sbc	r26, r26
    329e:	bb 0b       	sbc	r27, r27
    32a0:	bf 93       	push	r27
    32a2:	af 93       	push	r26
    32a4:	9f 93       	push	r25
    32a6:	8f 93       	push	r24
    32a8:	6e 85       	ldd	r22, Y+14	; 0x0e
    32aa:	7f 85       	ldd	r23, Y+15	; 0x0f
    32ac:	88 89       	ldd	r24, Y+16	; 0x10
    32ae:	99 89       	ldd	r25, Y+17	; 0x11
    32b0:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    32b4:	7f 93       	push	r23
    32b6:	6f 93       	push	r22
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	34 e2       	ldi	r19, 0x24	; 36
    32bc:	44 e7       	ldi	r20, 0x74	; 116
    32be:	59 e4       	ldi	r21, 0x49	; 73
    32c0:	6a 89       	ldd	r22, Y+18	; 0x12
    32c2:	7b 89       	ldd	r23, Y+19	; 0x13
    32c4:	8c 89       	ldd	r24, Y+20	; 0x14
    32c6:	9d 89       	ldd	r25, Y+21	; 0x15
    32c8:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    32cc:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    32d0:	20 e4       	ldi	r18, 0x40	; 64
    32d2:	32 e4       	ldi	r19, 0x42	; 66
    32d4:	4f e0       	ldi	r20, 0x0F	; 15
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    32dc:	9f 93       	push	r25
    32de:	8f 93       	push	r24
    32e0:	7f 93       	push	r23
    32e2:	6f 93       	push	r22
    32e4:	6e 89       	ldd	r22, Y+22	; 0x16
    32e6:	7f 89       	ldd	r23, Y+23	; 0x17
    32e8:	88 8d       	ldd	r24, Y+24	; 0x18
    32ea:	99 8d       	ldd	r25, Y+25	; 0x19
    32ec:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    32f0:	7f 93       	push	r23
    32f2:	6f 93       	push	r22
    32f4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    32f6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    32f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32fc:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    3300:	0f 2e       	mov	r0, r31
    3302:	f4 e6       	ldi	r31, 0x64	; 100
    3304:	cf 2e       	mov	r12, r31
    3306:	d1 2c       	mov	r13, r1
    3308:	e1 2c       	mov	r14, r1
    330a:	f1 2c       	mov	r15, r1
    330c:	f0 2d       	mov	r31, r0
    330e:	a7 01       	movw	r20, r14
    3310:	96 01       	movw	r18, r12
    3312:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    3316:	7f 93       	push	r23
    3318:	6f 93       	push	r22
    331a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    331c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    331e:	88 a1       	ldd	r24, Y+32	; 0x20
    3320:	99 a1       	ldd	r25, Y+33	; 0x21
    3322:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    3326:	0f 2e       	mov	r0, r31
    3328:	f0 e1       	ldi	r31, 0x10	; 16
    332a:	8f 2e       	mov	r8, r31
    332c:	f7 e2       	ldi	r31, 0x27	; 39
    332e:	9f 2e       	mov	r9, r31
    3330:	a1 2c       	mov	r10, r1
    3332:	b1 2c       	mov	r11, r1
    3334:	f0 2d       	mov	r31, r0
    3336:	a5 01       	movw	r20, r10
    3338:	94 01       	movw	r18, r8
    333a:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    333e:	a7 01       	movw	r20, r14
    3340:	96 01       	movw	r18, r12
    3342:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    3346:	3f 93       	push	r19
    3348:	2f 93       	push	r18
    334a:	6a a1       	ldd	r22, Y+34	; 0x22
    334c:	7b a1       	ldd	r23, Y+35	; 0x23
    334e:	8c a1       	ldd	r24, Y+36	; 0x24
    3350:	9d a1       	ldd	r25, Y+37	; 0x25
    3352:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    3356:	a5 01       	movw	r20, r10
    3358:	94 01       	movw	r18, r8
    335a:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <__divmodsi4>
    335e:	3f 93       	push	r19
    3360:	2f 93       	push	r18
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e2       	ldi	r20, 0x20	; 32
    3368:	51 e4       	ldi	r21, 0x41	; 65
    336a:	6e a1       	ldd	r22, Y+38	; 0x26
    336c:	7f a1       	ldd	r23, Y+39	; 0x27
    336e:	88 a5       	ldd	r24, Y+40	; 0x28
    3370:	99 a5       	ldd	r25, Y+41	; 0x29
    3372:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    3376:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    337a:	cb 01       	movw	r24, r22
    337c:	6a e0       	ldi	r22, 0x0A	; 10
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	0e 94 b3 24 	call	0x4966	; 0x4966 <__divmodhi4>
    3384:	9f 93       	push	r25
    3386:	8f 93       	push	r24
    3388:	6a a5       	ldd	r22, Y+42	; 0x2a
    338a:	7b a5       	ldd	r23, Y+43	; 0x2b
    338c:	8c a5       	ldd	r24, Y+44	; 0x2c
    338e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3390:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    3394:	7f 93       	push	r23
    3396:	6f 93       	push	r22
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	40 e2       	ldi	r20, 0x20	; 32
    339e:	51 e4       	ldi	r21, 0x41	; 65
    33a0:	6e a5       	ldd	r22, Y+46	; 0x2e
    33a2:	7f a5       	ldd	r23, Y+47	; 0x2f
    33a4:	88 a9       	ldd	r24, Y+48	; 0x30
    33a6:	99 a9       	ldd	r25, Y+49	; 0x31
    33a8:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	38 eb       	ldi	r19, 0xB8	; 184
    33b0:	4a e2       	ldi	r20, 0x2A	; 42
    33b2:	55 e4       	ldi	r21, 0x45	; 69
    33b4:	35 d7       	rcall	.+3690   	; 0x4220 <__subsf3>
    33b6:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__fixsfsi>
    33ba:	cb 01       	movw	r24, r22
    33bc:	6a e0       	ldi	r22, 0x0A	; 10
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	0e 94 b3 24 	call	0x4966	; 0x4966 <__divmodhi4>
    33c4:	9f 93       	push	r25
    33c6:	8f 93       	push	r24
    33c8:	23 e3       	ldi	r18, 0x33	; 51
    33ca:	33 e9       	ldi	r19, 0x93	; 147
    33cc:	48 e8       	ldi	r20, 0x88	; 136
    33ce:	53 e4       	ldi	r21, 0x43	; 67
    33d0:	6a a9       	ldd	r22, Y+50	; 0x32
    33d2:	7b a9       	ldd	r23, Y+51	; 0x33
    33d4:	8c a9       	ldd	r24, Y+52	; 0x34
    33d6:	9d a9       	ldd	r25, Y+53	; 0x35
    33d8:	23 d7       	rcall	.+3654   	; 0x4220 <__subsf3>
    33da:	f3 d7       	rcall	.+4070   	; 0x43c2 <__fixsfsi>
    33dc:	7f 93       	push	r23
    33de:	6f 93       	push	r22
    33e0:	6e a9       	ldd	r22, Y+54	; 0x36
    33e2:	7f a9       	ldd	r23, Y+55	; 0x37
    33e4:	88 ad       	ldd	r24, Y+56	; 0x38
    33e6:	99 ad       	ldd	r25, Y+57	; 0x39
    33e8:	ec d7       	rcall	.+4056   	; 0x43c2 <__fixsfsi>
    33ea:	9f 93       	push	r25
    33ec:	8f 93       	push	r24
    33ee:	7f 93       	push	r23
    33f0:	6f 93       	push	r22
    33f2:	6a ad       	ldd	r22, Y+58	; 0x3a
    33f4:	7b ad       	ldd	r23, Y+59	; 0x3b
    33f6:	8c ad       	ldd	r24, Y+60	; 0x3c
    33f8:	9d ad       	ldd	r25, Y+61	; 0x3d
    33fa:	e3 d7       	rcall	.+4038   	; 0x43c2 <__fixsfsi>
    33fc:	7f 93       	push	r23
    33fe:	6f 93       	push	r22
    3400:	3f 92       	push	r3
    3402:	2f 92       	push	r2
    3404:	1f 93       	push	r17
    3406:	0f 93       	push	r16
    3408:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    340c:	8f 93       	push	r24
    340e:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    3412:	8f 93       	push	r24
    3414:	80 ec       	ldi	r24, 0xC0	; 192
    3416:	91 e2       	ldi	r25, 0x21	; 33
    3418:	9f 93       	push	r25
    341a:	8f 93       	push	r24
    341c:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	80 ec       	ldi	r24, 0xC0	; 192
    3426:	91 e2       	ldi	r25, 0x21	; 33
    3428:	9f 93       	push	r25
    342a:	8f 93       	push	r24
    342c:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <printf>
	eeprom_write();
    3430:	6a dd       	rcall	.-1324   	; 0x2f06 <eeprom_write>

	time_flag = 0;
    3432:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <time_flag>
}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	ef 96       	adiw	r28, 0x3f	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	df 91       	pop	r29
    3442:	cf 91       	pop	r28
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	ff 90       	pop	r15
    344a:	ef 90       	pop	r14
    344c:	df 90       	pop	r13
    344e:	cf 90       	pop	r12
    3450:	bf 90       	pop	r11
    3452:	af 90       	pop	r10
    3454:	9f 90       	pop	r9
    3456:	8f 90       	pop	r8
    3458:	7f 90       	pop	r7
    345a:	6f 90       	pop	r6
    345c:	5f 90       	pop	r5
    345e:	4f 90       	pop	r4
    3460:	3f 90       	pop	r3
    3462:	2f 90       	pop	r2
    3464:	08 95       	ret

00003466 <eeprom_read>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

uint8_t	eeprom_read(uint16_t address){
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
	NVM.CMD = READ_EEPROM;
    346a:	c0 ec       	ldi	r28, 0xC0	; 192
    346c:	d1 e0       	ldi	r29, 0x01	; 1
    346e:	26 e0       	ldi	r18, 0x06	; 6
    3470:	2a 87       	std	Y+10, r18	; 0x0a
	NVM.ADDR0 = address & 0xFF;
    3472:	88 83       	st	Y, r24
	NVM.ADDR1 = address >> 8;
    3474:	99 83       	std	Y+1, r25	; 0x01
	CCP = CCP_IOREG_MODE;
    3476:	88 ed       	ldi	r24, 0xD8	; 216
    3478:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	8b 87       	std	Y+11, r24	; 0x0b
	delay_ms(1);
    347e:	66 ed       	ldi	r22, 0xD6	; 214
    3480:	74 e1       	ldi	r23, 0x14	; 20
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__portable_avr_delay_cycles>
	uint8_t byte = NVM.DATA0;
    348a:	8c 81       	ldd	r24, Y+4	; 0x04
	return byte;
}
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	08 95       	ret

00003492 <system_init>:
	}
}


// Sensor functions
void system_init(void){
    3492:	2f 92       	push	r2
    3494:	3f 92       	push	r3
    3496:	4f 92       	push	r4
    3498:	5f 92       	push	r5
    349a:	6f 92       	push	r6
    349c:	7f 92       	push	r7
    349e:	8f 92       	push	r8
    34a0:	9f 92       	push	r9
    34a2:	af 92       	push	r10
    34a4:	bf 92       	push	r11
    34a6:	cf 92       	push	r12
    34a8:	df 92       	push	r13
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	25 97       	sbiw	r28, 0x05	; 5
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	de bf       	out	0x3e, r29	; 62
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    34c0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    34c4:	6b ea       	ldi	r22, 0xAB	; 171
    34c6:	79 e2       	ldi	r23, 0x29	; 41
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__portable_avr_delay_cycles>
	sei();
    34d0:	78 94       	sei

	// Initialization of pins
	PORTC.DIR = 0xBC; // makes Port C have pins, 7, 5, 4, 3, and 2 be output (0b10111100)
    34d2:	8c eb       	ldi	r24, 0xBC	; 188
    34d4:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // enables lo level interrupts
    34d8:	87 e0       	ldi	r24, 0x07	; 7
    34da:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// Driver Initialization
	cam_init();
    34de:	0e 94 3e 0b 	call	0x167c	; 0x167c <cam_init>
	data_terminal_init();
    34e2:	0e 94 85 0c 	call	0x190a	; 0x190a <data_terminal_init>
	delay_ms(500);
    34e6:	6b ea       	ldi	r22, 0xAB	; 171
    34e8:	70 eb       	ldi	r23, 0xB0	; 176
    34ea:	88 e2       	ldi	r24, 0x28	; 40
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__portable_avr_delay_cycles>

	(*GPS_TERMINAL_SERIAL).CTRLA = USART_RXCINTLVL_HI_gc;
}

void xbee_init(void){
	USARTE0.CTRLA = USART_RXCINTLVL_MED_gc;
    34f2:	80 e2       	ldi	r24, 0x20	; 32
    34f4:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	// Driver Initialization
	cam_init();
	data_terminal_init();
	delay_ms(500);
	xbee_init();
	gps_init();
    34f8:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <gps_init>
	//delay_ms(100);

	thermistor_init();
    34fc:	0e 94 45 0b 	call	0x168a	; 0x168a <thermistor_init>
	voltage_init();
    3500:	0e 94 cb 0c 	call	0x1996	; 0x1996 <voltage_init>
	spi_init();
    3504:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <spi_init>
	pressure_init();
    3508:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <pressure_init>
	//bno_init();
	cam_switch();
    350c:	0e 94 37 0b 	call	0x166e	; 0x166e <cam_switch>
	clock_init();
    3510:	41 d9       	rcall	.-3454   	; 0x2794 <clock_init>

	release_servo_init();
    3512:	91 d8       	rcall	.-3806   	; 0x2636 <release_servo_init>
    3514:	87 e0       	ldi	r24, 0x07	; 7

	// Check EEPROM

	if(eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)^0xFF){
    3516:	90 e1       	ldi	r25, 0x10	; 16
    3518:	a6 df       	rcall	.-180    	; 0x3466 <eeprom_read>
    351a:	8f 3f       	cpi	r24, 0xFF	; 255
    351c:	09 f4       	brne	.+2      	; 0x3520 <system_init+0x8e>
    351e:	f9 c1       	rjmp	.+1010   	; 0x3912 <system_init+0x480>
    3520:	87 e4       	ldi	r24, 0x47	; 71
		printf("Reading EEPROM\n");
    3522:	90 e2       	ldi	r25, 0x20	; 32
    3524:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <puts>
		uint64_t p =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    3528:	80 e1       	ldi	r24, 0x10	; 16
    352a:	90 e1       	ldi	r25, 0x10	; 16
    352c:	9c df       	rcall	.-200    	; 0x3466 <eeprom_read>
    352e:	89 83       	std	Y+1, r24	; 0x01
    3530:	8f e0       	ldi	r24, 0x0F	; 15
    3532:	90 e1       	ldi	r25, 0x10	; 16
    3534:	98 df       	rcall	.-208    	; 0x3466 <eeprom_read>
    3536:	f8 2f       	mov	r31, r24
    3538:	29 81       	ldd	r18, Y+1	; 0x01
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	50 e0       	ldi	r21, 0x00	; 0
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	70 e0       	ldi	r23, 0x00	; 0
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	08 e3       	ldi	r16, 0x38	; 56
    354a:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    354e:	29 83       	std	Y+1, r18	; 0x01
    3550:	c3 2e       	mov	r12, r19
    3552:	d4 2e       	mov	r13, r20
    3554:	e5 2e       	mov	r14, r21
    3556:	6a 83       	std	Y+2, r22	; 0x02
    3558:	e7 2f       	mov	r30, r23
    355a:	f8 2e       	mov	r15, r24
    355c:	19 2f       	mov	r17, r25
    355e:	2f 2f       	mov	r18, r31
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e0       	ldi	r20, 0x00	; 0
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	60 e0       	ldi	r22, 0x00	; 0
    3568:	70 e0       	ldi	r23, 0x00	; 0
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	00 e3       	ldi	r16, 0x30	; 48
    3570:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    3574:	f9 81       	ldd	r31, Y+1	; 0x01
    3576:	f2 2b       	or	r31, r18
    3578:	f9 83       	std	Y+1, r31	; 0x01
    357a:	c3 2a       	or	r12, r19
    357c:	d4 2a       	or	r13, r20
    357e:	e5 2a       	or	r14, r21
    3580:	2a 81       	ldd	r18, Y+2	; 0x02
    3582:	26 2b       	or	r18, r22
    3584:	2a 83       	std	Y+2, r18	; 0x02
    3586:	be 2e       	mov	r11, r30
    3588:	b7 2a       	or	r11, r23
    358a:	f8 2a       	or	r15, r24
    358c:	19 2b       	or	r17, r25
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    358e:	8e e0       	ldi	r24, 0x0E	; 14
    3590:	90 e1       	ldi	r25, 0x10	; 16
    3592:	69 df       	rcall	.-302    	; 0x3466 <eeprom_read>
    3594:	08 2f       	mov	r16, r24
    3596:	8d e0       	ldi	r24, 0x0D	; 13
    3598:	90 e1       	ldi	r25, 0x10	; 16
    359a:	65 df       	rcall	.-310    	; 0x3466 <eeprom_read>
    359c:	48 2e       	mov	r4, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    359e:	8c e0       	ldi	r24, 0x0C	; 12
    35a0:	90 e1       	ldi	r25, 0x10	; 16
    35a2:	61 df       	rcall	.-318    	; 0x3466 <eeprom_read>
    35a4:	58 2e       	mov	r5, r24
    35a6:	8b e0       	ldi	r24, 0x0B	; 11
    35a8:	90 e1       	ldi	r25, 0x10	; 16
    35aa:	5d df       	rcall	.-326    	; 0x3466 <eeprom_read>
    35ac:	68 2e       	mov	r6, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0));
    35ae:	8a e0       	ldi	r24, 0x0A	; 10
    35b0:	90 e1       	ldi	r25, 0x10	; 16
    35b2:	59 df       	rcall	.-334    	; 0x3466 <eeprom_read>
    35b4:	78 2e       	mov	r7, r24
    35b6:	89 e0       	ldi	r24, 0x09	; 9
    35b8:	90 e1       	ldi	r25, 0x10	; 16
    35ba:	55 df       	rcall	.-342    	; 0x3466 <eeprom_read>
    35bc:	28 2e       	mov	r2, r24
    35be:	20 2f       	mov	r18, r16
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	60 e0       	ldi	r22, 0x00	; 0
    35c8:	70 e0       	ldi	r23, 0x00	; 0
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	08 e2       	ldi	r16, 0x28	; 40
    35d0:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    35d4:	e9 81       	ldd	r30, Y+1	; 0x01
    35d6:	e2 29       	or	r30, r2
    35d8:	e2 2b       	or	r30, r18
    35da:	e9 83       	std	Y+1, r30	; 0x01
    35dc:	c3 2a       	or	r12, r19
    35de:	d4 2a       	or	r13, r20
    35e0:	e5 2a       	or	r14, r21
    35e2:	fa 81       	ldd	r31, Y+2	; 0x02
    35e4:	f6 2b       	or	r31, r22
    35e6:	fa 83       	std	Y+2, r31	; 0x02
    35e8:	e7 2f       	mov	r30, r23
    35ea:	eb 29       	or	r30, r11
    35ec:	f8 2a       	or	r15, r24
    35ee:	19 2b       	or	r17, r25
    35f0:	24 2d       	mov	r18, r4
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	50 e0       	ldi	r21, 0x00	; 0
    35f8:	60 e0       	ldi	r22, 0x00	; 0
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	00 e2       	ldi	r16, 0x20	; 32
    3602:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    3606:	f9 81       	ldd	r31, Y+1	; 0x01
    3608:	f2 2b       	or	r31, r18
    360a:	f9 83       	std	Y+1, r31	; 0x01
    360c:	c3 2a       	or	r12, r19
    360e:	d4 2a       	or	r13, r20
    3610:	e5 2a       	or	r14, r21
    3612:	fa 81       	ldd	r31, Y+2	; 0x02
    3614:	f6 2b       	or	r31, r22
    3616:	fa 83       	std	Y+2, r31	; 0x02
    3618:	e7 2b       	or	r30, r23
    361a:	f8 2a       	or	r15, r24
    361c:	19 2b       	or	r17, r25
    361e:	25 2d       	mov	r18, r5
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e0       	ldi	r20, 0x00	; 0
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	08 e1       	ldi	r16, 0x18	; 24
    3630:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    3634:	f9 81       	ldd	r31, Y+1	; 0x01
    3636:	f2 2b       	or	r31, r18
    3638:	f9 83       	std	Y+1, r31	; 0x01
    363a:	c3 2a       	or	r12, r19
    363c:	d4 2a       	or	r13, r20
    363e:	e5 2a       	or	r14, r21
    3640:	fa 81       	ldd	r31, Y+2	; 0x02
    3642:	f6 2b       	or	r31, r22
    3644:	fa 83       	std	Y+2, r31	; 0x02
    3646:	e7 2b       	or	r30, r23
    3648:	f8 2a       	or	r15, r24
    364a:	19 2b       	or	r17, r25
    364c:	26 2d       	mov	r18, r6
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	40 e0       	ldi	r20, 0x00	; 0
    3652:	50 e0       	ldi	r21, 0x00	; 0
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	70 e0       	ldi	r23, 0x00	; 0
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	00 e1       	ldi	r16, 0x10	; 16
    365e:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    3662:	f9 81       	ldd	r31, Y+1	; 0x01
    3664:	f2 2b       	or	r31, r18
    3666:	f9 83       	std	Y+1, r31	; 0x01
    3668:	c3 2a       	or	r12, r19
    366a:	d4 2a       	or	r13, r20
    366c:	e5 2a       	or	r14, r21
    366e:	fa 81       	ldd	r31, Y+2	; 0x02
    3670:	f6 2b       	or	r31, r22
    3672:	e7 2b       	or	r30, r23
    3674:	f8 2a       	or	r15, r24
    3676:	19 2b       	or	r17, r25
    3678:	27 2d       	mov	r18, r7
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	60 e0       	ldi	r22, 0x00	; 0
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	08 e0       	ldi	r16, 0x08	; 8
    368a:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    368e:	29 80       	ldd	r2, Y+1	; 0x01
    3690:	22 2a       	or	r2, r18
    3692:	3c 2c       	mov	r3, r12
    3694:	33 2a       	or	r3, r19
    3696:	8d 2c       	mov	r8, r13
    3698:	84 2a       	or	r8, r20
    369a:	9e 2c       	mov	r9, r14
    369c:	95 2a       	or	r9, r21
    369e:	af 2e       	mov	r10, r31
    36a0:	a6 2a       	or	r10, r22
    36a2:	be 2e       	mov	r11, r30
    36a4:	b7 2a       	or	r11, r23
    36a6:	f8 2a       	or	r15, r24
    36a8:	19 2b       	or	r17, r25
		uint64_t t =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    36aa:	89 e1       	ldi	r24, 0x19	; 25
    36ac:	90 e1       	ldi	r25, 0x10	; 16
    36ae:	db de       	rcall	.-586    	; 0x3466 <eeprom_read>
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	88 e1       	ldi	r24, 0x18	; 24
    36b4:	90 e1       	ldi	r25, 0x10	; 16
    36b6:	d7 de       	rcall	.-594    	; 0x3466 <eeprom_read>
    36b8:	e8 2e       	mov	r14, r24
    36ba:	29 81       	ldd	r18, Y+1	; 0x01
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	50 e0       	ldi	r21, 0x00	; 0
    36c2:	60 e0       	ldi	r22, 0x00	; 0
    36c4:	70 e0       	ldi	r23, 0x00	; 0
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	08 e3       	ldi	r16, 0x38	; 56
    36cc:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    36d0:	b2 2f       	mov	r27, r18
    36d2:	c3 2e       	mov	r12, r19
    36d4:	d4 2e       	mov	r13, r20
    36d6:	a5 2f       	mov	r26, r21
    36d8:	f6 2f       	mov	r31, r22
    36da:	e7 2f       	mov	r30, r23
    36dc:	8a 83       	std	Y+2, r24	; 0x02
    36de:	99 83       	std	Y+1, r25	; 0x01
    36e0:	2e 2d       	mov	r18, r14
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	70 e0       	ldi	r23, 0x00	; 0
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	00 e3       	ldi	r16, 0x30	; 48
    36f2:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    36f6:	eb 2e       	mov	r14, r27
    36f8:	e2 2a       	or	r14, r18
    36fa:	c3 2a       	or	r12, r19
    36fc:	d4 2a       	or	r13, r20
    36fe:	5a 2e       	mov	r5, r26
    3700:	55 2a       	or	r5, r21
    3702:	6f 2e       	mov	r6, r31
    3704:	66 2a       	or	r6, r22
    3706:	7e 2e       	mov	r7, r30
    3708:	77 2a       	or	r7, r23
    370a:	2a 81       	ldd	r18, Y+2	; 0x02
    370c:	28 2b       	or	r18, r24
    370e:	2d 83       	std	Y+5, r18	; 0x05
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	89 2b       	or	r24, r25
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    3714:	8c 83       	std	Y+4, r24	; 0x04
    3716:	87 e1       	ldi	r24, 0x17	; 23
    3718:	90 e1       	ldi	r25, 0x10	; 16
    371a:	a5 de       	rcall	.-694    	; 0x3466 <eeprom_read>
    371c:	08 2f       	mov	r16, r24
    371e:	86 e1       	ldi	r24, 0x16	; 22
    3720:	90 e1       	ldi	r25, 0x10	; 16
    3722:	a1 de       	rcall	.-702    	; 0x3466 <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    3724:	48 2e       	mov	r4, r24
    3726:	85 e1       	ldi	r24, 0x15	; 21
    3728:	90 e1       	ldi	r25, 0x10	; 16
    372a:	9d de       	rcall	.-710    	; 0x3466 <eeprom_read>
    372c:	89 83       	std	Y+1, r24	; 0x01
    372e:	84 e1       	ldi	r24, 0x14	; 20
    3730:	90 e1       	ldi	r25, 0x10	; 16
    3732:	99 de       	rcall	.-718    	; 0x3466 <eeprom_read>
    3734:	8a 83       	std	Y+2, r24	; 0x02
    3736:	83 e1       	ldi	r24, 0x13	; 19
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8   | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0));
    3738:	90 e1       	ldi	r25, 0x10	; 16
    373a:	95 de       	rcall	.-726    	; 0x3466 <eeprom_read>
    373c:	8b 83       	std	Y+3, r24	; 0x03
    373e:	82 e1       	ldi	r24, 0x12	; 18
    3740:	90 e1       	ldi	r25, 0x10	; 16
    3742:	91 de       	rcall	.-734    	; 0x3466 <eeprom_read>
    3744:	a8 2f       	mov	r26, r24
    3746:	eb e2       	ldi	r30, 0x2B	; 43
    3748:	f0 e2       	ldi	r31, 0x20	; 32
    374a:	20 82       	st	Z, r2
		memcpy(&ground_p, &p, 8);
    374c:	31 82       	std	Z+1, r3	; 0x01
    374e:	82 82       	std	Z+2, r8	; 0x02
    3750:	93 82       	std	Z+3, r9	; 0x03
    3752:	a4 82       	std	Z+4, r10	; 0x04
    3754:	b5 82       	std	Z+5, r11	; 0x05
    3756:	f6 82       	std	Z+6, r15	; 0x06
    3758:	17 83       	std	Z+7, r17	; 0x07
    375a:	e7 e2       	ldi	r30, 0x27	; 39
    375c:	f0 e2       	ldi	r31, 0x20	; 32
    375e:	20 2f       	mov	r18, r16
		memcpy(&ground_t, &t, 8);
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e0       	ldi	r20, 0x00	; 0
    3764:	50 e0       	ldi	r21, 0x00	; 0
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	70 e0       	ldi	r23, 0x00	; 0
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	08 e2       	ldi	r16, 0x28	; 40
    3770:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    3774:	ea 2a       	or	r14, r26
    3776:	e2 2a       	or	r14, r18
    3778:	c3 2a       	or	r12, r19
    377a:	d4 2a       	or	r13, r20
    377c:	f5 2e       	mov	r15, r21
    377e:	f5 28       	or	r15, r5
    3780:	16 2f       	mov	r17, r22
    3782:	16 29       	or	r17, r6
    3784:	b7 2f       	mov	r27, r23
    3786:	b7 29       	or	r27, r7
    3788:	2d 81       	ldd	r18, Y+5	; 0x05
    378a:	28 2b       	or	r18, r24
    378c:	2d 83       	std	Y+5, r18	; 0x05
    378e:	8c 81       	ldd	r24, Y+4	; 0x04
    3790:	89 2b       	or	r24, r25
    3792:	8c 83       	std	Y+4, r24	; 0x04
    3794:	24 2d       	mov	r18, r4
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	40 e0       	ldi	r20, 0x00	; 0
    379a:	50 e0       	ldi	r21, 0x00	; 0
    379c:	60 e0       	ldi	r22, 0x00	; 0
    379e:	70 e0       	ldi	r23, 0x00	; 0
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	00 e2       	ldi	r16, 0x20	; 32
    37a6:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    37aa:	e2 2a       	or	r14, r18
    37ac:	c3 2a       	or	r12, r19
    37ae:	d4 2a       	or	r13, r20
    37b0:	f5 2a       	or	r15, r21
    37b2:	16 2b       	or	r17, r22
    37b4:	b7 2b       	or	r27, r23
    37b6:	2d 81       	ldd	r18, Y+5	; 0x05
    37b8:	28 2b       	or	r18, r24
    37ba:	2d 83       	std	Y+5, r18	; 0x05
    37bc:	8c 81       	ldd	r24, Y+4	; 0x04
    37be:	89 2b       	or	r24, r25
    37c0:	8c 83       	std	Y+4, r24	; 0x04
    37c2:	29 81       	ldd	r18, Y+1	; 0x01
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	50 e0       	ldi	r21, 0x00	; 0
    37ca:	60 e0       	ldi	r22, 0x00	; 0
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	08 e1       	ldi	r16, 0x18	; 24
    37d4:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    37d8:	e2 2a       	or	r14, r18
    37da:	c3 2a       	or	r12, r19
    37dc:	d4 2a       	or	r13, r20
    37de:	f5 2a       	or	r15, r21
    37e0:	16 2b       	or	r17, r22
    37e2:	b7 2b       	or	r27, r23
    37e4:	2d 81       	ldd	r18, Y+5	; 0x05
    37e6:	28 2b       	or	r18, r24
    37e8:	2d 83       	std	Y+5, r18	; 0x05
    37ea:	8c 81       	ldd	r24, Y+4	; 0x04
    37ec:	89 2b       	or	r24, r25
    37ee:	89 83       	std	Y+1, r24	; 0x01
    37f0:	2a 81       	ldd	r18, Y+2	; 0x02
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e0       	ldi	r20, 0x00	; 0
    37f6:	50 e0       	ldi	r21, 0x00	; 0
    37f8:	60 e0       	ldi	r22, 0x00	; 0
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	00 e1       	ldi	r16, 0x10	; 16
    3802:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    3806:	e2 2a       	or	r14, r18
    3808:	c3 2a       	or	r12, r19
    380a:	d4 2a       	or	r13, r20
    380c:	f5 2a       	or	r15, r21
    380e:	16 2b       	or	r17, r22
    3810:	b7 2b       	or	r27, r23
    3812:	2d 81       	ldd	r18, Y+5	; 0x05
    3814:	28 2b       	or	r18, r24
    3816:	2a 83       	std	Y+2, r18	; 0x02
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	89 2b       	or	r24, r25
    381c:	89 83       	std	Y+1, r24	; 0x01
    381e:	2b 81       	ldd	r18, Y+3	; 0x03
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e0       	ldi	r20, 0x00	; 0
    3824:	50 e0       	ldi	r21, 0x00	; 0
    3826:	60 e0       	ldi	r22, 0x00	; 0
    3828:	70 e0       	ldi	r23, 0x00	; 0
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	08 e0       	ldi	r16, 0x08	; 8
    3830:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__ashldi3>
    3834:	2e 29       	or	r18, r14
    3836:	20 83       	st	Z, r18
    3838:	3c 29       	or	r19, r12
    383a:	31 83       	std	Z+1, r19	; 0x01
    383c:	4d 29       	or	r20, r13
    383e:	42 83       	std	Z+2, r20	; 0x02
    3840:	5f 29       	or	r21, r15
    3842:	53 83       	std	Z+3, r21	; 0x03
    3844:	61 2b       	or	r22, r17
    3846:	64 83       	std	Z+4, r22	; 0x04
    3848:	7b 2b       	or	r23, r27
    384a:	75 83       	std	Z+5, r23	; 0x05
    384c:	2a 81       	ldd	r18, Y+2	; 0x02
    384e:	82 2b       	or	r24, r18
    3850:	86 83       	std	Z+6, r24	; 0x06
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	98 2b       	or	r25, r24
    3856:	97 83       	std	Z+7, r25	; 0x07
    3858:	81 e0       	ldi	r24, 0x01	; 1
		
		alt = (double) ((int16_t) (eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE0)));
    385a:	90 e1       	ldi	r25, 0x10	; 16
    385c:	04 de       	rcall	.-1016   	; 0x3466 <eeprom_read>
    385e:	89 83       	std	Y+1, r24	; 0x01
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e1       	ldi	r25, 0x10	; 16
    3864:	00 de       	rcall	.-1024   	; 0x3466 <eeprom_read>
    3866:	99 81       	ldd	r25, Y+1	; 0x01
    3868:	69 2f       	mov	r22, r25
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	76 2f       	mov	r23, r22
    386e:	66 27       	eor	r22, r22
    3870:	68 2b       	or	r22, r24
    3872:	07 2e       	mov	r0, r23
    3874:	00 0c       	add	r0, r0
    3876:	88 0b       	sbc	r24, r24
    3878:	99 0b       	sbc	r25, r25
    387a:	d6 d5       	rcall	.+2988   	; 0x4428 <__floatsisf>
    387c:	60 93 45 21 	sts	0x2145, r22	; 0x802145 <alt>
    3880:	70 93 46 21 	sts	0x2146, r23	; 0x802146 <alt+0x1>
    3884:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <alt+0x2>
    3888:	90 93 48 21 	sts	0x2148, r25	; 0x802148 <alt+0x3>
    388c:	87 e0       	ldi	r24, 0x07	; 7
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
    388e:	90 e1       	ldi	r25, 0x10	; 16
    3890:	ea dd       	rcall	.-1068   	; 0x3466 <eeprom_read>
    3892:	89 83       	std	Y+1, r24	; 0x01
    3894:	86 e0       	ldi	r24, 0x06	; 6
    3896:	90 e1       	ldi	r25, 0x10	; 16
    3898:	e6 dd       	rcall	.-1076   	; 0x3466 <eeprom_read>
    389a:	e9 81       	ldd	r30, Y+1	; 0x01
    389c:	2e 2f       	mov	r18, r30
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	32 2f       	mov	r19, r18
    38a2:	22 27       	eor	r18, r18
    38a4:	28 2b       	or	r18, r24
    38a6:	20 93 55 21 	sts	0x2155, r18	; 0x802155 <timer>
    38aa:	30 93 56 21 	sts	0x2156, r19	; 0x802156 <timer+0x1>
    38ae:	84 e0       	ldi	r24, 0x04	; 4
    38b0:	90 e1       	ldi	r25, 0x10	; 16
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
    38b2:	d9 dd       	rcall	.-1102   	; 0x3466 <eeprom_read>
    38b4:	89 83       	std	Y+1, r24	; 0x01
    38b6:	83 e0       	ldi	r24, 0x03	; 3
    38b8:	90 e1       	ldi	r25, 0x10	; 16
    38ba:	d5 dd       	rcall	.-1110   	; 0x3466 <eeprom_read>
    38bc:	f9 81       	ldd	r31, Y+1	; 0x01
    38be:	2f 2f       	mov	r18, r31
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	32 2f       	mov	r19, r18
    38c4:	22 27       	eor	r18, r18
    38c6:	28 2b       	or	r18, r24
    38c8:	20 93 51 21 	sts	0x2151, r18	; 0x802151 <packets>
    38cc:	30 93 52 21 	sts	0x2152, r19	; 0x802152 <packets+0x1>
    38d0:	60 91 27 20 	lds	r22, 0x2027	; 0x802027 <ground_t>

		printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
    38d4:	70 91 28 20 	lds	r23, 0x2028	; 0x802028 <ground_t+0x1>
    38d8:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <ground_t+0x2>
    38dc:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <ground_t+0x3>
    38e0:	70 d5       	rcall	.+2784   	; 0x43c2 <__fixsfsi>
    38e2:	7f 93       	push	r23
    38e4:	6f 93       	push	r22
    38e6:	60 91 2b 20 	lds	r22, 0x202B	; 0x80202b <ground_p>
    38ea:	70 91 2c 20 	lds	r23, 0x202C	; 0x80202c <ground_p+0x1>
    38ee:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <ground_p+0x2>
    38f2:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <ground_p+0x3>
    38f6:	65 d5       	rcall	.+2762   	; 0x43c2 <__fixsfsi>
    38f8:	9f 93       	push	r25
    38fa:	8f 93       	push	r24
    38fc:	7f 93       	push	r23
    38fe:	6f 93       	push	r22
    3900:	86 e5       	ldi	r24, 0x56	; 86
    3902:	90 e2       	ldi	r25, 0x20	; 32
    3904:	9f 93       	push	r25
    3906:	8f 93       	push	r24
    3908:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <printf>
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	17 c0       	rjmp	.+46     	; 0x3940 <system_init+0x4ae>
    3912:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <get_pressure>
    3916:	60 93 2b 20 	sts	0x202B, r22	; 0x80202b <ground_p>
	}
	else{
		// Initialization of variables
		ground_p = get_pressure();
    391a:	70 93 2c 20 	sts	0x202C, r23	; 0x80202c <ground_p+0x1>
    391e:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p+0x2>
    3922:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x3>
    3926:	83 e3       	ldi	r24, 0x33	; 51
    3928:	93 e1       	ldi	r25, 0x13	; 19
    392a:	a5 e9       	ldi	r26, 0x95	; 149
		ground_t = get_temperature();
    392c:	b3 e4       	ldi	r27, 0x43	; 67
    392e:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    3932:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    3936:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    393a:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    393e:	b3 d9       	rcall	.-3226   	; 0x2ca6 <eeprom_write_const>
    3940:	0e 94 13 12 	call	0x2426	; 0x2426 <state_check>

		eeprom_write_const();
    3944:	25 96       	adiw	r28, 0x05	; 5
    3946:	cd bf       	out	0x3d, r28	; 61
	}

	state_check();
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	df 91       	pop	r29
}
    394c:	cf 91       	pop	r28
    394e:	1f 91       	pop	r17
    3950:	0f 91       	pop	r16
    3952:	ff 90       	pop	r15
    3954:	ef 90       	pop	r14
    3956:	df 90       	pop	r13
    3958:	cf 90       	pop	r12
    395a:	bf 90       	pop	r11
    395c:	af 90       	pop	r10
    395e:	9f 90       	pop	r9
    3960:	8f 90       	pop	r8
    3962:	7f 90       	pop	r7
    3964:	6f 90       	pop	r6
    3966:	5f 90       	pop	r5
    3968:	4f 90       	pop	r4
    396a:	3f 90       	pop	r3
    396c:	2f 90       	pop	r2
    396e:	08 95       	ret

00003970 <eeprom_erase>:
    3970:	83 e3       	ldi	r24, 0x33	; 51
    3972:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    3976:	80 e0       	ldi	r24, 0x00	; 0
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    3978:	e0 ec       	ldi	r30, 0xC0	; 192
    397a:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    397c:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    397e:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    3980:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    3982:	8f 5f       	subi	r24, 0xFF	; 255
    3984:	80 32       	cpi	r24, 0x20	; 32
    3986:	d9 f7       	brne	.-10     	; 0x397e <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}

	NVM.CMD = ERASE_EEPROM;
    3988:	e0 ec       	ldi	r30, 0xC0	; 192
    398a:	f1 e0       	ldi	r31, 0x01	; 1
    398c:	80 e3       	ldi	r24, 0x30	; 48
    398e:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    3990:	88 ed       	ldi	r24, 0xD8	; 216
    3992:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3998:	87 85       	ldd	r24, Z+15	; 0x0f
    399a:	88 23       	and	r24, r24
    399c:	ec f3       	brlt	.-6      	; 0x3998 <eeprom_erase+0x28>
}
    399e:	08 95       	ret

000039a0 <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    39a0:	e7 df       	rcall	.-50     	; 0x3970 <eeprom_erase>

	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    39a2:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    39a4:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    39a6:	98 ed       	ldi	r25, 0xD8	; 216
    39a8:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    39b0:	8f bf       	out	0x3f, r24	; 63
    39b2:	08 95       	ret

000039b4 <command>:
	TCD1.PER = 184; // 2700hz
	TCD1.CCA = 92;
}

void command(uint8_t c){
	switch(c){
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	fc 01       	movw	r30, r24
    39b8:	e1 56       	subi	r30, 0x61	; 97
    39ba:	f1 09       	sbc	r31, r1
    39bc:	e3 31       	cpi	r30, 0x13	; 19
    39be:	f1 05       	cpc	r31, r1
    39c0:	c8 f4       	brcc	.+50     	; 0x39f4 <command+0x40>
    39c2:	88 27       	eor	r24, r24
    39c4:	e2 50       	subi	r30, 0x02	; 2
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	8f 4f       	sbci	r24, 0xFF	; 255
    39ca:	0c 94 04 25 	jmp	0x4a08	; 0x4a08 <__tablejump2__>
		case RESET:
			reset();
    39ce:	e8 cf       	rjmp	.-48     	; 0x39a0 <reset>
			break;
    39d0:	08 95       	ret
		case CALIBRATE:
			calibrate();
    39d2:	0c 94 14 14 	jmp	0x2828	; 0x2828 <calibrate>
			break;
    39d6:	08 95       	ret
		case CALIBRATE_ALTITUDE:
			cali_alt();
    39d8:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <cali_alt>
			break;
    39dc:	08 95       	ret
		case CALIBRATE_ANGLE:
			cali_ang();
    39de:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <cali_ang>
			break;
    39e2:	08 95       	ret
		case SERVO_RELEASE:
			servo_release();
    39e4:	0c 94 17 14 	jmp	0x282e	; 0x282e <servo_release>
			break;
    39e8:	08 95       	ret
		case SERVO_CLOSE:
			servo_close();
    39ea:	0c 94 20 14 	jmp	0x2840	; 0x2840 <servo_close>
			break;
    39ee:	08 95       	ret
		case PACKET:
			packet();
    39f0:	0c 94 29 14 	jmp	0x2852	; 0x2852 <packet>
    39f4:	08 95       	ret

000039f6 <main>:

char* format = "5343,%i,%i,%i,%li,%i.%i,%i.%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n";


////////////////////////////// Functions ///////////////////////////////
int main(void){
    39f6:	cf 93       	push	r28
    39f8:	df 93       	push	r29
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	c8 56       	subi	r28, 0x68	; 104
    3a00:	d1 09       	sbc	r29, r1
    3a02:	cd bf       	out	0x3d, r28	; 61
    3a04:	de bf       	out	0x3e, r29	; 62
	system_init();
    3a06:	45 dd       	rcall	.-1398   	; 0x3492 <system_init>
	//delay_ms(100);

	PORTD.DIR |= PIN3_bm;
    3a08:	e0 e6       	ldi	r30, 0x60	; 96
    3a0a:	f6 e0       	ldi	r31, 0x06	; 6
    3a0c:	80 81       	ld	r24, Z
    3a0e:	88 60       	ori	r24, 0x08	; 8
    3a10:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    3a12:	84 81       	ldd	r24, Z+4	; 0x04
    3a14:	88 60       	ori	r24, 0x08	; 8
    3a16:	84 83       	std	Z+4, r24	; 0x04

	//printf("Initialized\n");
	//buzzer_init();

	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    3a18:	14 e1       	ldi	r17, 0x14	; 20
    3a1a:	be 01       	movw	r22, r28
    3a1c:	6f 5f       	subi	r22, 0xFF	; 255
    3a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a20:	fb 01       	movw	r30, r22
    3a22:	81 2f       	mov	r24, r17
    3a24:	11 92       	st	Z+, r1
    3a26:	8a 95       	dec	r24
    3a28:	e9 f7       	brne	.-6      	; 0x3a24 <main+0x2e>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    3a2a:	4a e0       	ldi	r20, 0x0A	; 10
    3a2c:	50 e0       	ldi	r21, 0x00	; 0
    3a2e:	ce 01       	movw	r24, r28
    3a30:	45 96       	adiw	r24, 0x15	; 21
    3a32:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <rb16_init>

	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    3a36:	be 01       	movw	r22, r28
    3a38:	63 5e       	subi	r22, 0xE3	; 227
    3a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3c:	88 e2       	ldi	r24, 0x28	; 40
    3a3e:	fb 01       	movw	r30, r22
    3a40:	11 92       	st	Z+, r1
    3a42:	8a 95       	dec	r24
    3a44:	e9 f7       	brne	.-6      	; 0x3a40 <main+0x4a>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    3a46:	4a e0       	ldi	r20, 0x0A	; 10
    3a48:	50 e0       	ldi	r21, 0x00	; 0
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	8b 5b       	subi	r24, 0xBB	; 187
    3a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a50:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <rb32_init>

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    3a54:	be 01       	movw	r22, r28
    3a56:	63 5b       	subi	r22, 0xB3	; 179
    3a58:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5a:	fb 01       	movw	r30, r22
    3a5c:	11 92       	st	Z+, r1
    3a5e:	1a 95       	dec	r17
    3a60:	e9 f7       	brne	.-6      	; 0x3a5c <main+0x66>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    3a62:	4a e0       	ldi	r20, 0x0A	; 10
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	ce 01       	movw	r24, r28
    3a68:	8f 59       	subi	r24, 0x9F	; 159
    3a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <rb16_init>

	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    3a70:	00 e0       	ldi	r16, 0x00	; 0

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	uint8_t cam_initialized = 0;
    3a72:	10 e0       	ldi	r17, 0x00	; 0


	while(1){
		//printf("In Loop\n");
		// Check Sensors
		data_collect(&altitudes,&pressures);
    3a74:	be 01       	movw	r22, r28
    3a76:	6b 5b       	subi	r22, 0xBB	; 187
    3a78:	7f 4f       	sbci	r23, 0xFF	; 255
    3a7a:	ce 01       	movw	r24, r28
    3a7c:	45 96       	adiw	r24, 0x15	; 21
    3a7e:	0e 94 80 11 	call	0x2300	; 0x2300 <data_collect>

		state_check();
    3a82:	0e 94 13 12 	call	0x2426	; 0x2426 <state_check>

		// IMU Check
		//imu_read();

		//Gives each flight state their unique tasks
		switch(state){
    3a86:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <state>
    3a8a:	81 30       	cpi	r24, 0x01	; 1
    3a8c:	31 f0       	breq	.+12     	; 0x3a9a <main+0xa4>
    3a8e:	c8 f1       	brcs	.+114    	; 0x3b02 <main+0x10c>
    3a90:	82 30       	cpi	r24, 0x02	; 2
    3a92:	39 f0       	breq	.+14     	; 0x3aa2 <main+0xac>
    3a94:	83 30       	cpi	r24, 0x03	; 3
    3a96:	79 f1       	breq	.+94     	; 0x3af6 <main+0x100>
    3a98:	32 c0       	rjmp	.+100    	; 0x3afe <main+0x108>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    3a9a:	11 11       	cpse	r17, r1
    3a9c:	32 c0       	rjmp	.+100    	; 0x3b02 <main+0x10c>
					cam_initialized = 1;
    3a9e:	11 e0       	ldi	r17, 0x01	; 1
    3aa0:	30 c0       	rjmp	.+96     	; 0x3b02 <main+0x10c>
					//cam_switch();
				}
				break;
			case 2:
				if(!cam_initialized){
    3aa2:	11 11       	cpse	r17, r1
    3aa4:	01 c0       	rjmp	.+2      	; 0x3aa8 <main+0xb2>
					cam_initialized = 1;
    3aa6:	11 e0       	ldi	r17, 0x01	; 1
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
    3aa8:	60 91 45 21 	lds	r22, 0x2145	; 0x802145 <alt>
    3aac:	70 91 46 21 	lds	r23, 0x2146	; 0x802146 <alt+0x1>
    3ab0:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <alt+0x2>
    3ab4:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <alt+0x3>
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	41 ee       	ldi	r20, 0xE1	; 225
    3abe:	53 e4       	ldi	r21, 0x43	; 67
    3ac0:	af d3       	rcall	.+1886   	; 0x4220 <__subsf3>
    3ac2:	7f d4       	rcall	.+2302   	; 0x43c2 <__fixsfsi>
    3ac4:	9b 01       	movw	r18, r22
    3ac6:	77 23       	and	r23, r23
    3ac8:	24 f4       	brge	.+8      	; 0x3ad2 <main+0xdc>
    3aca:	22 27       	eor	r18, r18
    3acc:	33 27       	eor	r19, r19
    3ace:	26 1b       	sub	r18, r22
    3ad0:	37 0b       	sbc	r19, r23
    3ad2:	2a 30       	cpi	r18, 0x0A	; 10
    3ad4:	31 05       	cpc	r19, r1
    3ad6:	2c f4       	brge	.+10     	; 0x3ae2 <main+0xec>
					release();				// Releases the payload
    3ad8:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <release>
					hall_sensor_init();		// Starts hall effect sensor to read rpm
    3adc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <hall_sensor_init>
    3ae0:	10 c0       	rjmp	.+32     	; 0x3b02 <main+0x10c>
				}
				else if(released){
    3ae2:	80 91 77 21 	lds	r24, 0x2177	; 0x802177 <released>
    3ae6:	88 23       	and	r24, r24
    3ae8:	61 f0       	breq	.+24     	; 0x3b02 <main+0x10c>
					servo_pid(&directions);	// Updates the PID
    3aea:	ce 01       	movw	r24, r28
    3aec:	8f 59       	subi	r24, 0x9F	; 159
    3aee:	9f 4f       	sbci	r25, 0xFF	; 255
    3af0:	0e 94 37 13 	call	0x266e	; 0x266e <servo_pid>
    3af4:	06 c0       	rjmp	.+12     	; 0x3b02 <main+0x10c>
				}
				break;
			case 3:
				if(!buzzer_initialized){
    3af6:	01 11       	cpse	r16, r1
    3af8:	04 c0       	rjmp	.+8      	; 0x3b02 <main+0x10c>
					//buzzer_init();
					buzzer_initialized = 1;
    3afa:	01 e0       	ldi	r16, 0x01	; 1
    3afc:	02 c0       	rjmp	.+4      	; 0x3b02 <main+0x10c>
				}
				break;
			default:
				state_check();
    3afe:	0e 94 13 12 	call	0x2426	; 0x2426 <state_check>
				break;
		}

		if(time_flag){
    3b02:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <time_flag>
    3b06:	88 23       	and	r24, r24
			time_update();
    3b08:	19 f0       	breq	.+6      	; 0x3b10 <main+0x11a>
    3b0a:	6b da       	rcall	.-2858   	; 0x2fe2 <time_update>
			time_flag = 0;
    3b0c:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <time_flag>
		}
		if(xbee_flag){
    3b10:	80 91 75 21 	lds	r24, 0x2175	; 0x802175 <xbee_flag>
    3b14:	88 23       	and	r24, r24
			command(xbee_comm);
    3b16:	39 f0       	breq	.+14     	; 0x3b26 <main+0x130>
    3b18:	80 91 68 21 	lds	r24, 0x2168	; 0x802168 <xbee_comm>
    3b1c:	4b df       	rcall	.-362    	; 0x39b4 <command>
			xbee_comm = 0;
    3b1e:	10 92 68 21 	sts	0x2168, r1	; 0x802168 <xbee_comm>
			xbee_flag = 0;
    3b22:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <xbee_flag>
		}

		data_packets++;
    3b26:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <data_packets>
    3b2a:	90 91 54 21 	lds	r25, 0x2154	; 0x802154 <data_packets+0x1>
    3b2e:	01 96       	adiw	r24, 0x01	; 1
    3b30:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <data_packets>
    3b34:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <data_packets+0x1>
		if(timer != 0){
    3b38:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <timer>
    3b3c:	90 91 56 21 	lds	r25, 0x2156	; 0x802156 <timer+0x1>
    3b40:	89 2b       	or	r24, r25
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <main+0x150>
    3b44:	97 cf       	rjmp	.-210    	; 0x3a74 <main+0x7e>
			rate = data_packets / timer;
    3b46:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <data_packets>
    3b4a:	90 91 54 21 	lds	r25, 0x2154	; 0x802154 <data_packets+0x1>
    3b4e:	60 91 55 21 	lds	r22, 0x2155	; 0x802155 <timer>
    3b52:	70 91 56 21 	lds	r23, 0x2156	; 0x802156 <timer+0x1>
    3b56:	f3 d6       	rcall	.+3558   	; 0x493e <__udivmodhi4>
    3b58:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <rate>
    3b5c:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <rate+0x1>
    3b60:	89 cf       	rjmp	.-238    	; 0x3a74 <main+0x7e>

00003b62 <__vector_47>:
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}


ISR(TCE0_OVF_vect){
    3b62:	1f 92       	push	r1
    3b64:	0f 92       	push	r0
    3b66:	0f b6       	in	r0, 0x3f	; 63
    3b68:	0f 92       	push	r0
    3b6a:	11 24       	eor	r1, r1
    3b6c:	08 b6       	in	r0, 0x38	; 56
    3b6e:	0f 92       	push	r0
    3b70:	18 be       	out	0x38, r1	; 56
    3b72:	8f 93       	push	r24
    3b74:	9f 93       	push	r25
	timer++;
    3b76:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <timer>
    3b7a:	90 91 56 21 	lds	r25, 0x2156	; 0x802156 <timer+0x1>
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <timer>
    3b84:	90 93 56 21 	sts	0x2156, r25	; 0x802156 <timer+0x1>
	time_flag = 1;
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	80 93 76 21 	sts	0x2176, r24	; 0x802176 <time_flag>
}
    3b8e:	9f 91       	pop	r25
    3b90:	8f 91       	pop	r24
    3b92:	0f 90       	pop	r0
    3b94:	08 be       	out	0x38, r0	; 56
    3b96:	0f 90       	pop	r0
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	0f 90       	pop	r0
    3b9c:	1f 90       	pop	r1
    3b9e:	18 95       	reti

00003ba0 <__vector_58>:


ISR(USARTE0_RXC_vect){
    3ba0:	1f 92       	push	r1
    3ba2:	0f 92       	push	r0
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	0f 92       	push	r0
    3ba8:	11 24       	eor	r1, r1
    3baa:	08 b6       	in	r0, 0x38	; 56
    3bac:	0f 92       	push	r0
    3bae:	18 be       	out	0x38, r1	; 56
    3bb0:	09 b6       	in	r0, 0x39	; 57
    3bb2:	0f 92       	push	r0
    3bb4:	19 be       	out	0x39, r1	; 57
    3bb6:	0b b6       	in	r0, 0x3b	; 59
    3bb8:	0f 92       	push	r0
    3bba:	1b be       	out	0x3b, r1	; 59
    3bbc:	2f 93       	push	r18
    3bbe:	3f 93       	push	r19
    3bc0:	4f 93       	push	r20
    3bc2:	5f 93       	push	r21
    3bc4:	6f 93       	push	r22
    3bc6:	7f 93       	push	r23
    3bc8:	8f 93       	push	r24
    3bca:	9f 93       	push	r25
    3bcc:	af 93       	push	r26
    3bce:	bf 93       	push	r27
    3bd0:	ef 93       	push	r30
    3bd2:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    3bd4:	80 ea       	ldi	r24, 0xA0	; 160
    3bd6:	9a e0       	ldi	r25, 0x0A	; 10
    3bd8:	0e 94 19 09 	call	0x1232	; 0x1232 <usart_getchar>
    3bdc:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <xbee_comm>
	xbee_flag = 1;
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <xbee_flag>
}
    3be6:	ff 91       	pop	r31
    3be8:	ef 91       	pop	r30
    3bea:	bf 91       	pop	r27
    3bec:	af 91       	pop	r26
    3bee:	9f 91       	pop	r25
    3bf0:	8f 91       	pop	r24
    3bf2:	7f 91       	pop	r23
    3bf4:	6f 91       	pop	r22
    3bf6:	5f 91       	pop	r21
    3bf8:	4f 91       	pop	r20
    3bfa:	3f 91       	pop	r19
    3bfc:	2f 91       	pop	r18
    3bfe:	0f 90       	pop	r0
    3c00:	0b be       	out	0x3b, r0	; 59
    3c02:	0f 90       	pop	r0
    3c04:	09 be       	out	0x39, r0	; 57
    3c06:	0f 90       	pop	r0
    3c08:	08 be       	out	0x38, r0	; 56
    3c0a:	0f 90       	pop	r0
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	0f 90       	pop	r0
    3c10:	1f 90       	pop	r1
    3c12:	18 95       	reti

00003c14 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    3c14:	1f 92       	push	r1
    3c16:	0f 92       	push	r0
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	0f 92       	push	r0
    3c1c:	11 24       	eor	r1, r1
    3c1e:	08 b6       	in	r0, 0x38	; 56
    3c20:	0f 92       	push	r0
    3c22:	18 be       	out	0x38, r1	; 56
    3c24:	09 b6       	in	r0, 0x39	; 57
    3c26:	0f 92       	push	r0
    3c28:	19 be       	out	0x39, r1	; 57
    3c2a:	0a b6       	in	r0, 0x3a	; 58
    3c2c:	0f 92       	push	r0
    3c2e:	1a be       	out	0x3a, r1	; 58
    3c30:	0b b6       	in	r0, 0x3b	; 59
    3c32:	0f 92       	push	r0
    3c34:	1b be       	out	0x3b, r1	; 59
    3c36:	8f 92       	push	r8
    3c38:	9f 92       	push	r9
    3c3a:	af 92       	push	r10
    3c3c:	bf 92       	push	r11
    3c3e:	cf 92       	push	r12
    3c40:	df 92       	push	r13
    3c42:	ef 92       	push	r14
    3c44:	ff 92       	push	r15
    3c46:	1f 93       	push	r17
    3c48:	2f 93       	push	r18
    3c4a:	3f 93       	push	r19
    3c4c:	4f 93       	push	r20
    3c4e:	5f 93       	push	r21
    3c50:	6f 93       	push	r22
    3c52:	7f 93       	push	r23
    3c54:	8f 93       	push	r24
    3c56:	9f 93       	push	r25
    3c58:	af 93       	push	r26
    3c5a:	bf 93       	push	r27
    3c5c:	ef 93       	push	r30
    3c5e:	ff 93       	push	r31
    3c60:	cf 93       	push	r28
    3c62:	df 93       	push	r29
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <__vector_91+0x52>
    3c66:	00 d0       	rcall	.+0      	; 0x3c68 <__vector_91+0x54>
    3c68:	cd b7       	in	r28, 0x3d	; 61
    3c6a:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    3c6c:	80 eb       	ldi	r24, 0xB0	; 176
    3c6e:	99 e0       	ldi	r25, 0x09	; 9
    3c70:	0e 94 19 09 	call	0x1232	; 0x1232 <usart_getchar>
    3c74:	18 2f       	mov	r17, r24
	//printf("%c",c);

	if(c == (uint8_t) '$'){
    3c76:	84 32       	cpi	r24, 0x24	; 36
    3c78:	51 f4       	brne	.+20     	; 0x3c8e <__vector_91+0x7a>
		writing = 1;
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <writing>
		pos = 0;
    3c80:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <pos>
		word_pos = 0;
    3c84:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <word_pos>
		commas = 0;
    3c88:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <commas>
    3c8c:	5a c2       	rjmp	.+1204   	; 0x4142 <__stack+0x143>
	}
	else if(c == (uint8_t) '*'){
    3c8e:	8a 32       	cpi	r24, 0x2A	; 42
    3c90:	29 f4       	brne	.+10     	; 0x3c9c <__vector_91+0x88>
		commas = 0;
    3c92:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <commas>
		writing = 0;
    3c96:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <writing>
    3c9a:	53 c2       	rjmp	.+1190   	; 0x4142 <__stack+0x143>
	}
	else if(c == (uint8_t) ','){
    3c9c:	8c 32       	cpi	r24, 0x2C	; 44
    3c9e:	09 f0       	breq	.+2      	; 0x3ca2 <__vector_91+0x8e>
    3ca0:	50 c2       	rjmp	.+1184   	; 0x4142 <__stack+0x143>
		gps[0] = 32;
    3ca2:	ec ea       	ldi	r30, 0xAC	; 172
    3ca4:	f1 e2       	ldi	r31, 0x21	; 33
    3ca6:	80 e2       	ldi	r24, 0x20	; 32
    3ca8:	80 83       	st	Z, r24
		if(gps[1] == 32){
    3caa:	81 81       	ldd	r24, Z+1	; 0x01
    3cac:	80 32       	cpi	r24, 0x20	; 32
    3cae:	09 f0       	breq	.+2      	; 0x3cb2 <__vector_91+0x9e>
    3cb0:	77 c2       	rjmp	.+1262   	; 0x41a0 <__stack+0x1a1>
			gps[0] = '0';
    3cb2:	80 e3       	ldi	r24, 0x30	; 48
    3cb4:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <gps>
    3cb8:	73 c2       	rjmp	.+1254   	; 0x41a0 <__stack+0x1a1>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    3cba:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <gps>
    3cbe:	8e 32       	cpi	r24, 0x2E	; 46
    3cc0:	09 f0       	breq	.+2      	; 0x3cc4 <__vector_91+0xb0>
    3cc2:	a3 c1       	rjmp	.+838    	; 0x400a <__stack+0xb>
    3cc4:	a9 c1       	rjmp	.+850    	; 0x4018 <__stack+0x19>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    3cc6:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <gps>
    3cca:	8e 32       	cpi	r24, 0x2E	; 46
    3ccc:	09 f0       	breq	.+2      	; 0x3cd0 <__vector_91+0xbc>
    3cce:	ef c0       	rjmp	.+478    	; 0x3eae <__vector_91+0x29a>
    3cd0:	f5 c0       	rjmp	.+490    	; 0x3ebc <__vector_91+0x2a8>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    3cd2:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <gps>
    3cd6:	8e 32       	cpi	r24, 0x2E	; 46
    3cd8:	09 f0       	breq	.+2      	; 0x3cdc <__vector_91+0xc8>
    3cda:	52 c0       	rjmp	.+164    	; 0x3d80 <__vector_91+0x16c>
    3cdc:	58 c0       	rjmp	.+176    	; 0x3d8e <__vector_91+0x17a>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    3cde:	91 91       	ld	r25, Z+
    3ce0:	9e 32       	cpi	r25, 0x2E	; 46
    3ce2:	29 f4       	brne	.+10     	; 0x3cee <__vector_91+0xda>
    3ce4:	01 c0       	rjmp	.+2      	; 0x3ce8 <__vector_91+0xd4>
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    3ce8:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <idx>
						break;
    3cec:	03 c0       	rjmp	.+6      	; 0x3cf4 <__vector_91+0xe0>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    3cee:	8f 5f       	subi	r24, 0xFF	; 255
    3cf0:	8f 30       	cpi	r24, 0x0F	; 15
    3cf2:	a9 f7       	brne	.-22     	; 0x3cde <__vector_91+0xca>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    3cf4:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <idx>
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	e4 55       	subi	r30, 0x54	; 84
    3cfc:	fe 4d       	sbci	r31, 0xDE	; 222
    3cfe:	80 e2       	ldi	r24, 0x20	; 32
    3d00:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    3d02:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <idx>
    3d06:	2f 5f       	subi	r18, 0xFF	; 255
    3d08:	2f 30       	cpi	r18, 0x0F	; 15
    3d0a:	c8 f4       	brcc	.+50     	; 0x3d3e <__vector_91+0x12a>
					if(gps[i] == 32){
    3d0c:	82 2f       	mov	r24, r18
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	fc 01       	movw	r30, r24
    3d12:	e4 55       	subi	r30, 0x54	; 84
    3d14:	fe 4d       	sbci	r31, 0xDE	; 222
    3d16:	30 81       	ld	r19, Z
    3d18:	30 32       	cpi	r19, 0x20	; 32
    3d1a:	89 f0       	breq	.+34     	; 0x3d3e <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    3d1c:	40 e2       	ldi	r20, 0x20	; 32
    3d1e:	08 c0       	rjmp	.+16     	; 0x3d30 <__vector_91+0x11c>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    3d20:	82 2f       	mov	r24, r18
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	fc 01       	movw	r30, r24
    3d26:	e4 55       	subi	r30, 0x54	; 84
    3d28:	fe 4d       	sbci	r31, 0xDE	; 222
    3d2a:	30 81       	ld	r19, Z
    3d2c:	30 32       	cpi	r19, 0x20	; 32
    3d2e:	39 f0       	breq	.+14     	; 0x3d3e <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    3d30:	fc 01       	movw	r30, r24
    3d32:	e4 55       	subi	r30, 0x54	; 84
    3d34:	fe 4d       	sbci	r31, 0xDE	; 222
    3d36:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    3d38:	2f 5f       	subi	r18, 0xFF	; 255
    3d3a:	2f 30       	cpi	r18, 0x0F	; 15
    3d3c:	89 f7       	brne	.-30     	; 0x3d20 <__vector_91+0x10c>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    3d3e:	ce 01       	movw	r24, r28
    3d40:	01 96       	adiw	r24, 0x01	; 1
    3d42:	9f 93       	push	r25
    3d44:	8f 93       	push	r24
    3d46:	83 e8       	ldi	r24, 0x83	; 131
    3d48:	90 e2       	ldi	r25, 0x20	; 32
    3d4a:	9f 93       	push	r25
    3d4c:	8f 93       	push	r24
    3d4e:	8c ea       	ldi	r24, 0xAC	; 172
    3d50:	91 e2       	ldi	r25, 0x21	; 33
    3d52:	9f 93       	push	r25
    3d54:	8f 93       	push	r24
    3d56:	66 d7       	rcall	.+3788   	; 0x4c24 <sscanf>
				gps_t = (double) val;
    3d58:	69 81       	ldd	r22, Y+1	; 0x01
    3d5a:	7a 81       	ldd	r23, Y+2	; 0x02
    3d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d60:	63 d3       	rcall	.+1734   	; 0x4428 <__floatsisf>
    3d62:	60 93 39 21 	sts	0x2139, r22	; 0x802139 <gps_t>
    3d66:	70 93 3a 21 	sts	0x213A, r23	; 0x80213a <gps_t+0x1>
    3d6a:	80 93 3b 21 	sts	0x213B, r24	; 0x80213b <gps_t+0x2>
    3d6e:	90 93 3c 21 	sts	0x213C, r25	; 0x80213c <gps_t+0x3>
				break;
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	c3 c1       	rjmp	.+902    	; 0x4106 <__stack+0x107>
    3d80:	ed ea       	ldi	r30, 0xAD	; 173
    3d82:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    3d84:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    3d86:	91 91       	ld	r25, Z+
    3d88:	9e 32       	cpi	r25, 0x2E	; 46
    3d8a:	29 f4       	brne	.+10     	; 0x3d96 <__vector_91+0x182>
    3d8c:	01 c0       	rjmp	.+2      	; 0x3d90 <__vector_91+0x17c>
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    3d90:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <idx>
						break;
    3d94:	03 c0       	rjmp	.+6      	; 0x3d9c <__vector_91+0x188>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    3d96:	8f 5f       	subi	r24, 0xFF	; 255
    3d98:	8f 30       	cpi	r24, 0x0F	; 15
    3d9a:	a9 f7       	brne	.-22     	; 0x3d86 <__vector_91+0x172>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    3d9c:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <idx>
    3da0:	f0 e0       	ldi	r31, 0x00	; 0
    3da2:	e4 55       	subi	r30, 0x54	; 84
    3da4:	fe 4d       	sbci	r31, 0xDE	; 222
    3da6:	80 e2       	ldi	r24, 0x20	; 32
    3da8:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    3daa:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <idx>
    3dae:	2f 5f       	subi	r18, 0xFF	; 255
    3db0:	2f 30       	cpi	r18, 0x0F	; 15
    3db2:	08 f5       	brcc	.+66     	; 0x3df6 <__vector_91+0x1e2>
					if(gps[i] == 32){
    3db4:	82 2f       	mov	r24, r18
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	fc 01       	movw	r30, r24
    3dba:	e4 55       	subi	r30, 0x54	; 84
    3dbc:	fe 4d       	sbci	r31, 0xDE	; 222
    3dbe:	30 81       	ld	r19, Z
    3dc0:	30 32       	cpi	r19, 0x20	; 32
    3dc2:	c9 f0       	breq	.+50     	; 0x3df6 <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    3dc4:	50 e2       	ldi	r21, 0x20	; 32
    3dc6:	08 c0       	rjmp	.+16     	; 0x3dd8 <__vector_91+0x1c4>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    3dc8:	82 2f       	mov	r24, r18
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	fc 01       	movw	r30, r24
    3dce:	e4 55       	subi	r30, 0x54	; 84
    3dd0:	fe 4d       	sbci	r31, 0xDE	; 222
    3dd2:	30 81       	ld	r19, Z
    3dd4:	30 32       	cpi	r19, 0x20	; 32
    3dd6:	79 f0       	breq	.+30     	; 0x3df6 <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
    3dd8:	40 91 57 21 	lds	r20, 0x2157	; 0x802157 <idx>
    3ddc:	fc 01       	movw	r30, r24
    3dde:	e4 1b       	sub	r30, r20
    3de0:	f1 09       	sbc	r31, r1
    3de2:	e6 54       	subi	r30, 0x46	; 70
    3de4:	fe 4d       	sbci	r31, 0xDE	; 222
    3de6:	30 83       	st	Z, r19
					gps[i] = 32;
    3de8:	fc 01       	movw	r30, r24
    3dea:	e4 55       	subi	r30, 0x54	; 84
    3dec:	fe 4d       	sbci	r31, 0xDE	; 222
    3dee:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    3df0:	2f 5f       	subi	r18, 0xFF	; 255
    3df2:	2f 30       	cpi	r18, 0x0F	; 15
    3df4:	49 f7       	brne	.-46     	; 0x3dc8 <__vector_91+0x1b4>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    3df6:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <dec>
    3dfa:	80 32       	cpi	r24, 0x20	; 32
    3dfc:	19 f4       	brne	.+6      	; 0x3e04 <__vector_91+0x1f0>
					dec[0] = '0';
    3dfe:	80 e3       	ldi	r24, 0x30	; 48
    3e00:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <dec>
				}
				sscanf(gps,"%ld",&val);
    3e04:	ce 01       	movw	r24, r28
    3e06:	01 96       	adiw	r24, 0x01	; 1
    3e08:	9f 93       	push	r25
    3e0a:	8f 93       	push	r24
    3e0c:	83 e8       	ldi	r24, 0x83	; 131
    3e0e:	90 e2       	ldi	r25, 0x20	; 32
    3e10:	9f 93       	push	r25
    3e12:	8f 93       	push	r24
    3e14:	8c ea       	ldi	r24, 0xAC	; 172
    3e16:	91 e2       	ldi	r25, 0x21	; 33
    3e18:	9f 93       	push	r25
    3e1a:	8f 93       	push	r24
    3e1c:	03 d7       	rcall	.+3590   	; 0x4c24 <sscanf>
				sscanf(dec,"%d",&val2);
    3e1e:	ce 01       	movw	r24, r28
    3e20:	05 96       	adiw	r24, 0x05	; 5
    3e22:	9f 93       	push	r25
    3e24:	8f 93       	push	r24
    3e26:	87 e8       	ldi	r24, 0x87	; 135
    3e28:	90 e2       	ldi	r25, 0x20	; 32
    3e2a:	9f 93       	push	r25
    3e2c:	8f 93       	push	r24
    3e2e:	8b eb       	ldi	r24, 0xBB	; 187
    3e30:	91 e2       	ldi	r25, 0x21	; 33
    3e32:	9f 93       	push	r25
    3e34:	8f 93       	push	r24
    3e36:	f6 d6       	rcall	.+3564   	; 0x4c24 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    3e38:	89 80       	ldd	r8, Y+1	; 0x01
    3e3a:	9a 80       	ldd	r9, Y+2	; 0x02
    3e3c:	ab 80       	ldd	r10, Y+3	; 0x03
    3e3e:	bc 80       	ldd	r11, Y+4	; 0x04
    3e40:	6d 81       	ldd	r22, Y+5	; 0x05
    3e42:	7e 81       	ldd	r23, Y+6	; 0x06
    3e44:	07 2e       	mov	r0, r23
    3e46:	00 0c       	add	r0, r0
    3e48:	88 0b       	sbc	r24, r24
    3e4a:	99 0b       	sbc	r25, r25
    3e4c:	ed d2       	rcall	.+1498   	; 0x4428 <__floatsisf>
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e4       	ldi	r19, 0x40	; 64
    3e52:	4c e1       	ldi	r20, 0x1C	; 28
    3e54:	56 e4       	ldi	r21, 0x46	; 70
    3e56:	4d d2       	rcall	.+1178   	; 0x42f2 <__divsf3>
    3e58:	6b 01       	movw	r12, r22
    3e5a:	7c 01       	movw	r14, r24
    3e5c:	c5 01       	movw	r24, r10
    3e5e:	b4 01       	movw	r22, r8
    3e60:	24 e6       	ldi	r18, 0x64	; 100
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	40 e0       	ldi	r20, 0x00	; 0
    3e66:	50 e0       	ldi	r21, 0x00	; 0
    3e68:	b3 d5       	rcall	.+2918   	; 0x49d0 <__divmodsi4>
    3e6a:	49 01       	movw	r8, r18
    3e6c:	5a 01       	movw	r10, r20
    3e6e:	dc d2       	rcall	.+1464   	; 0x4428 <__floatsisf>
    3e70:	9b 01       	movw	r18, r22
    3e72:	ac 01       	movw	r20, r24
    3e74:	c7 01       	movw	r24, r14
    3e76:	b6 01       	movw	r22, r12
    3e78:	d4 d1       	rcall	.+936    	; 0x4222 <__addsf3>
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	40 e7       	ldi	r20, 0x70	; 112
    3e80:	52 e4       	ldi	r21, 0x42	; 66
    3e82:	37 d2       	rcall	.+1134   	; 0x42f2 <__divsf3>
    3e84:	6b 01       	movw	r12, r22
    3e86:	7c 01       	movw	r14, r24
    3e88:	c5 01       	movw	r24, r10
    3e8a:	b4 01       	movw	r22, r8
    3e8c:	cd d2       	rcall	.+1434   	; 0x4428 <__floatsisf>
    3e8e:	9b 01       	movw	r18, r22
    3e90:	ac 01       	movw	r20, r24
    3e92:	c7 01       	movw	r24, r14
    3e94:	b6 01       	movw	r22, r12
    3e96:	c5 d1       	rcall	.+906    	; 0x4222 <__addsf3>
    3e98:	60 93 35 21 	sts	0x2135, r22	; 0x802135 <gps_lat>
    3e9c:	70 93 36 21 	sts	0x2136, r23	; 0x802136 <gps_lat+0x1>
    3ea0:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <gps_lat+0x2>
    3ea4:	90 93 38 21 	sts	0x2138, r25	; 0x802138 <gps_lat+0x3>
				break;
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	2c c1       	rjmp	.+600    	; 0x4106 <__stack+0x107>
    3eae:	ed ea       	ldi	r30, 0xAD	; 173
    3eb0:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    3eb4:	91 91       	ld	r25, Z+
    3eb6:	9e 32       	cpi	r25, 0x2E	; 46
    3eb8:	29 f4       	brne	.+10     	; 0x3ec4 <__vector_91+0x2b0>
    3eba:	01 c0       	rjmp	.+2      	; 0x3ebe <__vector_91+0x2aa>
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    3ebe:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <idx>
						break;
    3ec2:	03 c0       	rjmp	.+6      	; 0x3eca <__vector_91+0x2b6>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    3ec4:	8f 5f       	subi	r24, 0xFF	; 255
    3ec6:	8f 30       	cpi	r24, 0x0F	; 15
    3ec8:	a9 f7       	brne	.-22     	; 0x3eb4 <__vector_91+0x2a0>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    3eca:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <idx>
    3ece:	f0 e0       	ldi	r31, 0x00	; 0
    3ed0:	e4 55       	subi	r30, 0x54	; 84
    3ed2:	fe 4d       	sbci	r31, 0xDE	; 222
    3ed4:	80 e2       	ldi	r24, 0x20	; 32
    3ed6:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    3ed8:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <idx>
    3edc:	2f 5f       	subi	r18, 0xFF	; 255
    3ede:	2f 30       	cpi	r18, 0x0F	; 15
    3ee0:	08 f5       	brcc	.+66     	; 0x3f24 <__vector_91+0x310>
					if(gps[i] == 32){
    3ee2:	82 2f       	mov	r24, r18
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	fc 01       	movw	r30, r24
    3ee8:	e4 55       	subi	r30, 0x54	; 84
    3eea:	fe 4d       	sbci	r31, 0xDE	; 222
    3eec:	30 81       	ld	r19, Z
    3eee:	30 32       	cpi	r19, 0x20	; 32
    3ef0:	c9 f0       	breq	.+50     	; 0x3f24 <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    3ef2:	50 e2       	ldi	r21, 0x20	; 32
    3ef4:	08 c0       	rjmp	.+16     	; 0x3f06 <__vector_91+0x2f2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    3ef6:	82 2f       	mov	r24, r18
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	fc 01       	movw	r30, r24
    3efc:	e4 55       	subi	r30, 0x54	; 84
    3efe:	fe 4d       	sbci	r31, 0xDE	; 222
    3f00:	30 81       	ld	r19, Z
    3f02:	30 32       	cpi	r19, 0x20	; 32
    3f04:	79 f0       	breq	.+30     	; 0x3f24 <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
    3f06:	40 91 57 21 	lds	r20, 0x2157	; 0x802157 <idx>
    3f0a:	fc 01       	movw	r30, r24
    3f0c:	e4 1b       	sub	r30, r20
    3f0e:	f1 09       	sbc	r31, r1
    3f10:	e6 54       	subi	r30, 0x46	; 70
    3f12:	fe 4d       	sbci	r31, 0xDE	; 222
    3f14:	30 83       	st	Z, r19
					gps[i] = 32;
    3f16:	fc 01       	movw	r30, r24
    3f18:	e4 55       	subi	r30, 0x54	; 84
    3f1a:	fe 4d       	sbci	r31, 0xDE	; 222
    3f1c:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    3f1e:	2f 5f       	subi	r18, 0xFF	; 255
    3f20:	2f 30       	cpi	r18, 0x0F	; 15
    3f22:	49 f7       	brne	.-46     	; 0x3ef6 <__vector_91+0x2e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    3f24:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <dec>
    3f28:	80 32       	cpi	r24, 0x20	; 32
    3f2a:	19 f4       	brne	.+6      	; 0x3f32 <__vector_91+0x31e>
					dec[0] = '0';
    3f2c:	80 e3       	ldi	r24, 0x30	; 48
    3f2e:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <dec>
				}
				sscanf(gps,"%ld",&val);
    3f32:	ce 01       	movw	r24, r28
    3f34:	01 96       	adiw	r24, 0x01	; 1
    3f36:	9f 93       	push	r25
    3f38:	8f 93       	push	r24
    3f3a:	83 e8       	ldi	r24, 0x83	; 131
    3f3c:	90 e2       	ldi	r25, 0x20	; 32
    3f3e:	9f 93       	push	r25
    3f40:	8f 93       	push	r24
    3f42:	8c ea       	ldi	r24, 0xAC	; 172
    3f44:	91 e2       	ldi	r25, 0x21	; 33
    3f46:	9f 93       	push	r25
    3f48:	8f 93       	push	r24
    3f4a:	6c d6       	rcall	.+3288   	; 0x4c24 <sscanf>
				sscanf(dec,"%d",&val2);
    3f4c:	ce 01       	movw	r24, r28
    3f4e:	05 96       	adiw	r24, 0x05	; 5
    3f50:	9f 93       	push	r25
    3f52:	8f 93       	push	r24
    3f54:	87 e8       	ldi	r24, 0x87	; 135
    3f56:	90 e2       	ldi	r25, 0x20	; 32
    3f58:	9f 93       	push	r25
    3f5a:	8f 93       	push	r24
    3f5c:	8b eb       	ldi	r24, 0xBB	; 187
    3f5e:	91 e2       	ldi	r25, 0x21	; 33
    3f60:	9f 93       	push	r25
    3f62:	8f 93       	push	r24
    3f64:	5f d6       	rcall	.+3262   	; 0x4c24 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    3f66:	89 80       	ldd	r8, Y+1	; 0x01
    3f68:	9a 80       	ldd	r9, Y+2	; 0x02
    3f6a:	ab 80       	ldd	r10, Y+3	; 0x03
    3f6c:	bc 80       	ldd	r11, Y+4	; 0x04
    3f6e:	6d 81       	ldd	r22, Y+5	; 0x05
    3f70:	7e 81       	ldd	r23, Y+6	; 0x06
    3f72:	07 2e       	mov	r0, r23
    3f74:	00 0c       	add	r0, r0
    3f76:	88 0b       	sbc	r24, r24
    3f78:	99 0b       	sbc	r25, r25
    3f7a:	56 d2       	rcall	.+1196   	; 0x4428 <__floatsisf>
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e4       	ldi	r19, 0x40	; 64
    3f80:	4c e1       	ldi	r20, 0x1C	; 28
    3f82:	56 e4       	ldi	r21, 0x46	; 70
    3f84:	b6 d1       	rcall	.+876    	; 0x42f2 <__divsf3>
    3f86:	6b 01       	movw	r12, r22
    3f88:	7c 01       	movw	r14, r24
    3f8a:	c5 01       	movw	r24, r10
    3f8c:	b4 01       	movw	r22, r8
    3f8e:	24 e6       	ldi	r18, 0x64	; 100
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	40 e0       	ldi	r20, 0x00	; 0
    3f94:	50 e0       	ldi	r21, 0x00	; 0
    3f96:	1c d5       	rcall	.+2616   	; 0x49d0 <__divmodsi4>
    3f98:	49 01       	movw	r8, r18
    3f9a:	5a 01       	movw	r10, r20
    3f9c:	45 d2       	rcall	.+1162   	; 0x4428 <__floatsisf>
    3f9e:	9b 01       	movw	r18, r22
    3fa0:	ac 01       	movw	r20, r24
    3fa2:	c7 01       	movw	r24, r14
    3fa4:	b6 01       	movw	r22, r12
    3fa6:	3d d1       	rcall	.+634    	; 0x4222 <__addsf3>
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	40 e7       	ldi	r20, 0x70	; 112
    3fae:	52 e4       	ldi	r21, 0x42	; 66
    3fb0:	a0 d1       	rcall	.+832    	; 0x42f2 <__divsf3>
    3fb2:	6b 01       	movw	r12, r22
    3fb4:	7c 01       	movw	r14, r24
    3fb6:	c5 01       	movw	r24, r10
    3fb8:	b4 01       	movw	r22, r8
    3fba:	36 d2       	rcall	.+1132   	; 0x4428 <__floatsisf>
    3fbc:	9b 01       	movw	r18, r22
    3fbe:	ac 01       	movw	r20, r24
    3fc0:	c7 01       	movw	r24, r14
    3fc2:	b6 01       	movw	r22, r12
    3fc4:	2e d1       	rcall	.+604    	; 0x4222 <__addsf3>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	b0 58       	subi	r27, 0x80	; 128
    3fcc:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <gps_long>
    3fd0:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <gps_long+0x1>
    3fd4:	a0 93 33 21 	sts	0x2133, r26	; 0x802133 <gps_long+0x2>
    3fd8:	b0 93 34 21 	sts	0x2134, r27	; 0x802134 <gps_long+0x3>
    3fdc:	cd bf       	out	0x3d, r28	; 61
				break;
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	92 c0       	rjmp	.+292    	; 0x4106 <__stack+0x107>
    3fe2:	8b e2       	ldi	r24, 0x2B	; 43
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    3fe4:	91 e2       	ldi	r25, 0x21	; 33
    3fe6:	9f 93       	push	r25
    3fe8:	8f 93       	push	r24
    3fea:	87 e8       	ldi	r24, 0x87	; 135
    3fec:	90 e2       	ldi	r25, 0x20	; 32
    3fee:	9f 93       	push	r25
    3ff0:	8f 93       	push	r24
    3ff2:	8c ea       	ldi	r24, 0xAC	; 172
    3ff4:	91 e2       	ldi	r25, 0x21	; 33
    3ff6:	9f 93       	push	r25
    3ff8:	8f 93       	push	r24
    3ffa:	14 d6       	rcall	.+3112   	; 0x4c24 <sscanf>
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
				break;
    4000:	0f 90       	pop	r0
    4002:	0f 90       	pop	r0
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
    4008:	7e c0       	rjmp	.+252    	; 0x4106 <__stack+0x107>
    400a:	ed ea       	ldi	r30, 0xAD	; 173
    400c:	f1 e2       	ldi	r31, 0x21	; 33
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4012:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    4014:	29 f4       	brne	.+10     	; 0x4020 <__stack+0x21>
    4016:	01 c0       	rjmp	.+2      	; 0x401a <__stack+0x1b>
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <idx>
						idx = i;
    401e:	03 c0       	rjmp	.+6      	; 0x4026 <__stack+0x27>
    4020:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    4022:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4024:	a9 f7       	brne	.-22     	; 0x4010 <__stack+0x11>
    4026:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    402a:	f0 e0       	ldi	r31, 0x00	; 0
    402c:	e4 55       	subi	r30, 0x54	; 84
    402e:	fe 4d       	sbci	r31, 0xDE	; 222
    4030:	80 e2       	ldi	r24, 0x20	; 32
    4032:	80 83       	st	Z, r24
    4034:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    4038:	2f 5f       	subi	r18, 0xFF	; 255
    403a:	2f 30       	cpi	r18, 0x0F	; 15
    403c:	08 f5       	brcc	.+66     	; 0x4080 <__stack+0x81>
    403e:	82 2f       	mov	r24, r18
    4040:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    4042:	fc 01       	movw	r30, r24
    4044:	e4 55       	subi	r30, 0x54	; 84
    4046:	fe 4d       	sbci	r31, 0xDE	; 222
    4048:	30 81       	ld	r19, Z
    404a:	30 32       	cpi	r19, 0x20	; 32
    404c:	c9 f0       	breq	.+50     	; 0x4080 <__stack+0x81>
    404e:	50 e2       	ldi	r21, 0x20	; 32
    4050:	08 c0       	rjmp	.+16     	; 0x4062 <__stack+0x63>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4052:	82 2f       	mov	r24, r18
    4054:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4056:	fc 01       	movw	r30, r24
    4058:	e4 55       	subi	r30, 0x54	; 84
    405a:	fe 4d       	sbci	r31, 0xDE	; 222
    405c:	30 81       	ld	r19, Z
    405e:	30 32       	cpi	r19, 0x20	; 32
    4060:	79 f0       	breq	.+30     	; 0x4080 <__stack+0x81>
    4062:	40 91 57 21 	lds	r20, 0x2157	; 0x802157 <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    4066:	fc 01       	movw	r30, r24
    4068:	e4 1b       	sub	r30, r20
    406a:	f1 09       	sbc	r31, r1
    406c:	e6 54       	subi	r30, 0x46	; 70
    406e:	fe 4d       	sbci	r31, 0xDE	; 222
    4070:	30 83       	st	Z, r19
    4072:	fc 01       	movw	r30, r24
    4074:	e4 55       	subi	r30, 0x54	; 84
					gps[i] = 32;
    4076:	fe 4d       	sbci	r31, 0xDE	; 222
    4078:	50 83       	st	Z, r21
    407a:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    407c:	2f 30       	cpi	r18, 0x0F	; 15
    407e:	49 f7       	brne	.-46     	; 0x4052 <__stack+0x53>
    4080:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    4084:	80 32       	cpi	r24, 0x20	; 32
    4086:	19 f4       	brne	.+6      	; 0x408e <__stack+0x8f>
    4088:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    408a:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <dec>
    408e:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    4090:	01 96       	adiw	r24, 0x01	; 1
    4092:	9f 93       	push	r25
    4094:	8f 93       	push	r24
    4096:	83 e8       	ldi	r24, 0x83	; 131
    4098:	90 e2       	ldi	r25, 0x20	; 32
    409a:	9f 93       	push	r25
    409c:	8f 93       	push	r24
    409e:	8c ea       	ldi	r24, 0xAC	; 172
    40a0:	91 e2       	ldi	r25, 0x21	; 33
    40a2:	9f 93       	push	r25
    40a4:	8f 93       	push	r24
    40a6:	be d5       	rcall	.+2940   	; 0x4c24 <sscanf>
				sscanf(dec,"%d",&val2);
    40a8:	ce 01       	movw	r24, r28
    40aa:	05 96       	adiw	r24, 0x05	; 5
    40ac:	9f 93       	push	r25
    40ae:	8f 93       	push	r24
    40b0:	87 e8       	ldi	r24, 0x87	; 135
    40b2:	90 e2       	ldi	r25, 0x20	; 32
    40b4:	9f 93       	push	r25
    40b6:	8f 93       	push	r24
    40b8:	8b eb       	ldi	r24, 0xBB	; 187
    40ba:	91 e2       	ldi	r25, 0x21	; 33
    40bc:	9f 93       	push	r25
    40be:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    40c0:	b1 d5       	rcall	.+2914   	; 0x4c24 <sscanf>
    40c2:	69 81       	ldd	r22, Y+1	; 0x01
    40c4:	7a 81       	ldd	r23, Y+2	; 0x02
    40c6:	8b 81       	ldd	r24, Y+3	; 0x03
    40c8:	9c 81       	ldd	r25, Y+4	; 0x04
    40ca:	ae d1       	rcall	.+860    	; 0x4428 <__floatsisf>
    40cc:	6b 01       	movw	r12, r22
    40ce:	7c 01       	movw	r14, r24
    40d0:	6d 81       	ldd	r22, Y+5	; 0x05
    40d2:	7e 81       	ldd	r23, Y+6	; 0x06
    40d4:	07 2e       	mov	r0, r23
    40d6:	00 0c       	add	r0, r0
    40d8:	88 0b       	sbc	r24, r24
    40da:	99 0b       	sbc	r25, r25
    40dc:	a5 d1       	rcall	.+842    	; 0x4428 <__floatsisf>
    40de:	20 e0       	ldi	r18, 0x00	; 0
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	40 e2       	ldi	r20, 0x20	; 32
    40e4:	51 e4       	ldi	r21, 0x41	; 65
    40e6:	05 d1       	rcall	.+522    	; 0x42f2 <__divsf3>
    40e8:	9b 01       	movw	r18, r22
    40ea:	ac 01       	movw	r20, r24
    40ec:	c7 01       	movw	r24, r14
    40ee:	b6 01       	movw	r22, r12
    40f0:	98 d0       	rcall	.+304    	; 0x4222 <__addsf3>
    40f2:	60 93 2d 21 	sts	0x212D, r22	; 0x80212d <gps_alt>
    40f6:	70 93 2e 21 	sts	0x212E, r23	; 0x80212e <gps_alt+0x1>
    40fa:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <gps_alt+0x2>
    40fe:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <gps_alt+0x3>
    4102:	cd bf       	out	0x3d, r28	; 61
    4104:	de bf       	out	0x3e, r29	; 62
    4106:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <writing>
				break;
    410a:	88 23       	and	r24, r24
		}

		if(writing){
    410c:	d1 f0       	breq	.+52     	; 0x4142 <__stack+0x143>
    410e:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <idx>
    4112:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <commas>
			idx = 0;
    4116:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    4118:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <commas>
    411c:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <word_pos>
    4120:	ec ea       	ldi	r30, 0xAC	; 172
			word_pos = 0;
    4122:	f1 e2       	ldi	r31, 0x21	; 33
    4124:	2b eb       	ldi	r18, 0xBB	; 187
    4126:	31 e2       	ldi	r19, 0x21	; 33
    4128:	80 e2       	ldi	r24, 0x20	; 32
    412a:	81 93       	st	Z+, r24
    412c:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    412e:	3f 07       	cpc	r19, r31
    4130:	e1 f7       	brne	.-8      	; 0x412a <__stack+0x12b>

		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    4132:	eb eb       	ldi	r30, 0xBB	; 187
    4134:	f1 e2       	ldi	r31, 0x21	; 33
    4136:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    4138:	80 83       	st	Z, r24
    413a:	81 83       	std	Z+1, r24	; 0x01
    413c:	82 83       	std	Z+2, r24	; 0x02
    413e:	83 83       	std	Z+3, r24	; 0x03
    4140:	84 83       	std	Z+4, r24	; 0x04
    4142:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <writing>
    4146:	88 23       	and	r24, r24
			}
		}
	}

	if(writing){
    4148:	09 f4       	brne	.+2      	; 0x414c <__stack+0x14d>
    414a:	43 c0       	rjmp	.+134    	; 0x41d2 <__stack+0x1d3>
    414c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <pos>
    4150:	83 30       	cpi	r24, 0x03	; 3
		switch(pos){
    4152:	19 f0       	breq	.+6      	; 0x415a <__stack+0x15b>
    4154:	84 30       	cpi	r24, 0x04	; 4
    4156:	31 f0       	breq	.+12     	; 0x4164 <__stack+0x165>
    4158:	09 c0       	rjmp	.+18     	; 0x416c <__stack+0x16d>
    415a:	17 34       	cpi	r17, 0x47	; 71
    415c:	39 f0       	breq	.+14     	; 0x416c <__stack+0x16d>
    415e:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <writing>
			case 3:
				if(c != 'G'){
    4162:	04 c0       	rjmp	.+8      	; 0x416c <__stack+0x16d>
					writing = 0;
    4164:	17 34       	cpi	r17, 0x47	; 71
    4166:	11 f0       	breq	.+4      	; 0x416c <__stack+0x16d>
    4168:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <writing>
				}
				break;

			case 4:
				if(c != 'G'){
    416c:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <word_pos>
					writing = 0;
    4170:	f0 e0       	ldi	r31, 0x00	; 0
				}
				break;
		}
		gps[word_pos] = c;
    4172:	e4 55       	subi	r30, 0x54	; 84
    4174:	fe 4d       	sbci	r31, 0xDE	; 222
    4176:	10 83       	st	Z, r17
    4178:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <word_pos>
    417c:	8f 5f       	subi	r24, 0xFF	; 255
		word_pos++;
    417e:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <word_pos>
    4182:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <pos>
    4186:	8f 5f       	subi	r24, 0xFF	; 255
		pos++;
    4188:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <pos>
    418c:	22 c0       	rjmp	.+68     	; 0x41d2 <__stack+0x1d3>
    418e:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <gps>
	}
}
    4192:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4194:	09 f4       	brne	.+2      	; 0x4198 <__stack+0x199>
    4196:	a7 cd       	rjmp	.-1202   	; 0x3ce6 <__vector_91+0xd2>
    4198:	ed ea       	ldi	r30, 0xAD	; 173
    419a:	f1 e2       	ldi	r31, 0x21	; 33
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	9f cd       	rjmp	.-1218   	; 0x3cde <__vector_91+0xca>
    41a0:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    41a2:	1a 82       	std	Y+2, r1	; 0x02
    41a4:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    41a6:	1c 82       	std	Y+4, r1	; 0x04
    41a8:	1d 82       	std	Y+5, r1	; 0x05
    41aa:	1e 82       	std	Y+6, r1	; 0x06
    41ac:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <commas>
		int16_t val2 = 0;
    41b0:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    41b2:	09 f4       	brne	.+2      	; 0x41b6 <__stack+0x1b7>
    41b4:	88 cd       	rjmp	.-1264   	; 0x3cc6 <__vector_91+0xb2>
    41b6:	30 f4       	brcc	.+12     	; 0x41c4 <__stack+0x1c5>
    41b8:	81 30       	cpi	r24, 0x01	; 1
    41ba:	49 f3       	breq	.-46     	; 0x418e <__stack+0x18f>
    41bc:	82 30       	cpi	r24, 0x02	; 2
    41be:	09 f4       	brne	.+2      	; 0x41c2 <__stack+0x1c3>
    41c0:	88 cd       	rjmp	.-1264   	; 0x3cd2 <__vector_91+0xbe>
    41c2:	a1 cf       	rjmp	.-190    	; 0x4106 <__stack+0x107>
    41c4:	87 30       	cpi	r24, 0x07	; 7
    41c6:	09 f4       	brne	.+2      	; 0x41ca <__stack+0x1cb>
    41c8:	0c cf       	rjmp	.-488    	; 0x3fe2 <__vector_91+0x3ce>
    41ca:	89 30       	cpi	r24, 0x09	; 9
    41cc:	09 f4       	brne	.+2      	; 0x41d0 <__stack+0x1d1>
    41ce:	75 cd       	rjmp	.-1302   	; 0x3cba <__vector_91+0xa6>
    41d0:	9a cf       	rjmp	.-204    	; 0x4106 <__stack+0x107>
    41d2:	26 96       	adiw	r28, 0x06	; 6
    41d4:	cd bf       	out	0x3d, r28	; 61
    41d6:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	ff 91       	pop	r31
    41de:	ef 91       	pop	r30
    41e0:	bf 91       	pop	r27
    41e2:	af 91       	pop	r26
    41e4:	9f 91       	pop	r25
    41e6:	8f 91       	pop	r24
    41e8:	7f 91       	pop	r23
    41ea:	6f 91       	pop	r22
    41ec:	5f 91       	pop	r21
    41ee:	4f 91       	pop	r20
    41f0:	3f 91       	pop	r19
    41f2:	2f 91       	pop	r18
    41f4:	1f 91       	pop	r17
    41f6:	ff 90       	pop	r15
    41f8:	ef 90       	pop	r14
    41fa:	df 90       	pop	r13
    41fc:	cf 90       	pop	r12
    41fe:	bf 90       	pop	r11
    4200:	af 90       	pop	r10
    4202:	9f 90       	pop	r9
    4204:	8f 90       	pop	r8
    4206:	0f 90       	pop	r0
    4208:	0b be       	out	0x3b, r0	; 59
    420a:	0f 90       	pop	r0
    420c:	0a be       	out	0x3a, r0	; 58
    420e:	0f 90       	pop	r0
    4210:	09 be       	out	0x39, r0	; 57
    4212:	0f 90       	pop	r0
    4214:	08 be       	out	0x38, r0	; 56
    4216:	0f 90       	pop	r0
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	0f 90       	pop	r0
    421c:	1f 90       	pop	r1
    421e:	18 95       	reti

00004220 <__subsf3>:
    4220:	50 58       	subi	r21, 0x80	; 128

00004222 <__addsf3>:
    4222:	bb 27       	eor	r27, r27
    4224:	aa 27       	eor	r26, r26
    4226:	0e d0       	rcall	.+28     	; 0x4244 <__addsf3x>
    4228:	75 c1       	rjmp	.+746    	; 0x4514 <__fp_round>
    422a:	66 d1       	rcall	.+716    	; 0x44f8 <__fp_pscA>
    422c:	30 f0       	brcs	.+12     	; 0x423a <__addsf3+0x18>
    422e:	6b d1       	rcall	.+726    	; 0x4506 <__fp_pscB>
    4230:	20 f0       	brcs	.+8      	; 0x423a <__addsf3+0x18>
    4232:	31 f4       	brne	.+12     	; 0x4240 <__addsf3+0x1e>
    4234:	9f 3f       	cpi	r25, 0xFF	; 255
    4236:	11 f4       	brne	.+4      	; 0x423c <__addsf3+0x1a>
    4238:	1e f4       	brtc	.+6      	; 0x4240 <__addsf3+0x1e>
    423a:	5b c1       	rjmp	.+694    	; 0x44f2 <__fp_nan>
    423c:	0e f4       	brtc	.+2      	; 0x4240 <__addsf3+0x1e>
    423e:	e0 95       	com	r30
    4240:	e7 fb       	bst	r30, 7
    4242:	51 c1       	rjmp	.+674    	; 0x44e6 <__fp_inf>

00004244 <__addsf3x>:
    4244:	e9 2f       	mov	r30, r25
    4246:	77 d1       	rcall	.+750    	; 0x4536 <__fp_split3>
    4248:	80 f3       	brcs	.-32     	; 0x422a <__addsf3+0x8>
    424a:	ba 17       	cp	r27, r26
    424c:	62 07       	cpc	r22, r18
    424e:	73 07       	cpc	r23, r19
    4250:	84 07       	cpc	r24, r20
    4252:	95 07       	cpc	r25, r21
    4254:	18 f0       	brcs	.+6      	; 0x425c <__addsf3x+0x18>
    4256:	71 f4       	brne	.+28     	; 0x4274 <__addsf3x+0x30>
    4258:	9e f5       	brtc	.+102    	; 0x42c0 <__addsf3x+0x7c>
    425a:	8f c1       	rjmp	.+798    	; 0x457a <__fp_zero>
    425c:	0e f4       	brtc	.+2      	; 0x4260 <__addsf3x+0x1c>
    425e:	e0 95       	com	r30
    4260:	0b 2e       	mov	r0, r27
    4262:	ba 2f       	mov	r27, r26
    4264:	a0 2d       	mov	r26, r0
    4266:	0b 01       	movw	r0, r22
    4268:	b9 01       	movw	r22, r18
    426a:	90 01       	movw	r18, r0
    426c:	0c 01       	movw	r0, r24
    426e:	ca 01       	movw	r24, r20
    4270:	a0 01       	movw	r20, r0
    4272:	11 24       	eor	r1, r1
    4274:	ff 27       	eor	r31, r31
    4276:	59 1b       	sub	r21, r25
    4278:	99 f0       	breq	.+38     	; 0x42a0 <__addsf3x+0x5c>
    427a:	59 3f       	cpi	r21, 0xF9	; 249
    427c:	50 f4       	brcc	.+20     	; 0x4292 <__addsf3x+0x4e>
    427e:	50 3e       	cpi	r21, 0xE0	; 224
    4280:	68 f1       	brcs	.+90     	; 0x42dc <__addsf3x+0x98>
    4282:	1a 16       	cp	r1, r26
    4284:	f0 40       	sbci	r31, 0x00	; 0
    4286:	a2 2f       	mov	r26, r18
    4288:	23 2f       	mov	r18, r19
    428a:	34 2f       	mov	r19, r20
    428c:	44 27       	eor	r20, r20
    428e:	58 5f       	subi	r21, 0xF8	; 248
    4290:	f3 cf       	rjmp	.-26     	; 0x4278 <__addsf3x+0x34>
    4292:	46 95       	lsr	r20
    4294:	37 95       	ror	r19
    4296:	27 95       	ror	r18
    4298:	a7 95       	ror	r26
    429a:	f0 40       	sbci	r31, 0x00	; 0
    429c:	53 95       	inc	r21
    429e:	c9 f7       	brne	.-14     	; 0x4292 <__addsf3x+0x4e>
    42a0:	7e f4       	brtc	.+30     	; 0x42c0 <__addsf3x+0x7c>
    42a2:	1f 16       	cp	r1, r31
    42a4:	ba 0b       	sbc	r27, r26
    42a6:	62 0b       	sbc	r22, r18
    42a8:	73 0b       	sbc	r23, r19
    42aa:	84 0b       	sbc	r24, r20
    42ac:	ba f0       	brmi	.+46     	; 0x42dc <__addsf3x+0x98>
    42ae:	91 50       	subi	r25, 0x01	; 1
    42b0:	a1 f0       	breq	.+40     	; 0x42da <__addsf3x+0x96>
    42b2:	ff 0f       	add	r31, r31
    42b4:	bb 1f       	adc	r27, r27
    42b6:	66 1f       	adc	r22, r22
    42b8:	77 1f       	adc	r23, r23
    42ba:	88 1f       	adc	r24, r24
    42bc:	c2 f7       	brpl	.-16     	; 0x42ae <__addsf3x+0x6a>
    42be:	0e c0       	rjmp	.+28     	; 0x42dc <__addsf3x+0x98>
    42c0:	ba 0f       	add	r27, r26
    42c2:	62 1f       	adc	r22, r18
    42c4:	73 1f       	adc	r23, r19
    42c6:	84 1f       	adc	r24, r20
    42c8:	48 f4       	brcc	.+18     	; 0x42dc <__addsf3x+0x98>
    42ca:	87 95       	ror	r24
    42cc:	77 95       	ror	r23
    42ce:	67 95       	ror	r22
    42d0:	b7 95       	ror	r27
    42d2:	f7 95       	ror	r31
    42d4:	9e 3f       	cpi	r25, 0xFE	; 254
    42d6:	08 f0       	brcs	.+2      	; 0x42da <__addsf3x+0x96>
    42d8:	b3 cf       	rjmp	.-154    	; 0x4240 <__addsf3+0x1e>
    42da:	93 95       	inc	r25
    42dc:	88 0f       	add	r24, r24
    42de:	08 f0       	brcs	.+2      	; 0x42e2 <__addsf3x+0x9e>
    42e0:	99 27       	eor	r25, r25
    42e2:	ee 0f       	add	r30, r30
    42e4:	97 95       	ror	r25
    42e6:	87 95       	ror	r24
    42e8:	08 95       	ret

000042ea <__cmpsf2>:
    42ea:	d9 d0       	rcall	.+434    	; 0x449e <__fp_cmp>
    42ec:	08 f4       	brcc	.+2      	; 0x42f0 <__cmpsf2+0x6>
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	08 95       	ret

000042f2 <__divsf3>:
    42f2:	0c d0       	rcall	.+24     	; 0x430c <__divsf3x>
    42f4:	0f c1       	rjmp	.+542    	; 0x4514 <__fp_round>
    42f6:	07 d1       	rcall	.+526    	; 0x4506 <__fp_pscB>
    42f8:	40 f0       	brcs	.+16     	; 0x430a <__divsf3+0x18>
    42fa:	fe d0       	rcall	.+508    	; 0x44f8 <__fp_pscA>
    42fc:	30 f0       	brcs	.+12     	; 0x430a <__divsf3+0x18>
    42fe:	21 f4       	brne	.+8      	; 0x4308 <__divsf3+0x16>
    4300:	5f 3f       	cpi	r21, 0xFF	; 255
    4302:	19 f0       	breq	.+6      	; 0x430a <__divsf3+0x18>
    4304:	f0 c0       	rjmp	.+480    	; 0x44e6 <__fp_inf>
    4306:	51 11       	cpse	r21, r1
    4308:	39 c1       	rjmp	.+626    	; 0x457c <__fp_szero>
    430a:	f3 c0       	rjmp	.+486    	; 0x44f2 <__fp_nan>

0000430c <__divsf3x>:
    430c:	14 d1       	rcall	.+552    	; 0x4536 <__fp_split3>
    430e:	98 f3       	brcs	.-26     	; 0x42f6 <__divsf3+0x4>

00004310 <__divsf3_pse>:
    4310:	99 23       	and	r25, r25
    4312:	c9 f3       	breq	.-14     	; 0x4306 <__divsf3+0x14>
    4314:	55 23       	and	r21, r21
    4316:	b1 f3       	breq	.-20     	; 0x4304 <__divsf3+0x12>
    4318:	95 1b       	sub	r25, r21
    431a:	55 0b       	sbc	r21, r21
    431c:	bb 27       	eor	r27, r27
    431e:	aa 27       	eor	r26, r26
    4320:	62 17       	cp	r22, r18
    4322:	73 07       	cpc	r23, r19
    4324:	84 07       	cpc	r24, r20
    4326:	38 f0       	brcs	.+14     	; 0x4336 <__divsf3_pse+0x26>
    4328:	9f 5f       	subi	r25, 0xFF	; 255
    432a:	5f 4f       	sbci	r21, 0xFF	; 255
    432c:	22 0f       	add	r18, r18
    432e:	33 1f       	adc	r19, r19
    4330:	44 1f       	adc	r20, r20
    4332:	aa 1f       	adc	r26, r26
    4334:	a9 f3       	breq	.-22     	; 0x4320 <__divsf3_pse+0x10>
    4336:	33 d0       	rcall	.+102    	; 0x439e <__divsf3_pse+0x8e>
    4338:	0e 2e       	mov	r0, r30
    433a:	3a f0       	brmi	.+14     	; 0x434a <__divsf3_pse+0x3a>
    433c:	e0 e8       	ldi	r30, 0x80	; 128
    433e:	30 d0       	rcall	.+96     	; 0x43a0 <__divsf3_pse+0x90>
    4340:	91 50       	subi	r25, 0x01	; 1
    4342:	50 40       	sbci	r21, 0x00	; 0
    4344:	e6 95       	lsr	r30
    4346:	00 1c       	adc	r0, r0
    4348:	ca f7       	brpl	.-14     	; 0x433c <__divsf3_pse+0x2c>
    434a:	29 d0       	rcall	.+82     	; 0x439e <__divsf3_pse+0x8e>
    434c:	fe 2f       	mov	r31, r30
    434e:	27 d0       	rcall	.+78     	; 0x439e <__divsf3_pse+0x8e>
    4350:	66 0f       	add	r22, r22
    4352:	77 1f       	adc	r23, r23
    4354:	88 1f       	adc	r24, r24
    4356:	bb 1f       	adc	r27, r27
    4358:	26 17       	cp	r18, r22
    435a:	37 07       	cpc	r19, r23
    435c:	48 07       	cpc	r20, r24
    435e:	ab 07       	cpc	r26, r27
    4360:	b0 e8       	ldi	r27, 0x80	; 128
    4362:	09 f0       	breq	.+2      	; 0x4366 <__divsf3_pse+0x56>
    4364:	bb 0b       	sbc	r27, r27
    4366:	80 2d       	mov	r24, r0
    4368:	bf 01       	movw	r22, r30
    436a:	ff 27       	eor	r31, r31
    436c:	93 58       	subi	r25, 0x83	; 131
    436e:	5f 4f       	sbci	r21, 0xFF	; 255
    4370:	2a f0       	brmi	.+10     	; 0x437c <__divsf3_pse+0x6c>
    4372:	9e 3f       	cpi	r25, 0xFE	; 254
    4374:	51 05       	cpc	r21, r1
    4376:	68 f0       	brcs	.+26     	; 0x4392 <__divsf3_pse+0x82>
    4378:	b6 c0       	rjmp	.+364    	; 0x44e6 <__fp_inf>
    437a:	00 c1       	rjmp	.+512    	; 0x457c <__fp_szero>
    437c:	5f 3f       	cpi	r21, 0xFF	; 255
    437e:	ec f3       	brlt	.-6      	; 0x437a <__divsf3_pse+0x6a>
    4380:	98 3e       	cpi	r25, 0xE8	; 232
    4382:	dc f3       	brlt	.-10     	; 0x437a <__divsf3_pse+0x6a>
    4384:	86 95       	lsr	r24
    4386:	77 95       	ror	r23
    4388:	67 95       	ror	r22
    438a:	b7 95       	ror	r27
    438c:	f7 95       	ror	r31
    438e:	9f 5f       	subi	r25, 0xFF	; 255
    4390:	c9 f7       	brne	.-14     	; 0x4384 <__divsf3_pse+0x74>
    4392:	88 0f       	add	r24, r24
    4394:	91 1d       	adc	r25, r1
    4396:	96 95       	lsr	r25
    4398:	87 95       	ror	r24
    439a:	97 f9       	bld	r25, 7
    439c:	08 95       	ret
    439e:	e1 e0       	ldi	r30, 0x01	; 1
    43a0:	66 0f       	add	r22, r22
    43a2:	77 1f       	adc	r23, r23
    43a4:	88 1f       	adc	r24, r24
    43a6:	bb 1f       	adc	r27, r27
    43a8:	62 17       	cp	r22, r18
    43aa:	73 07       	cpc	r23, r19
    43ac:	84 07       	cpc	r24, r20
    43ae:	ba 07       	cpc	r27, r26
    43b0:	20 f0       	brcs	.+8      	; 0x43ba <__divsf3_pse+0xaa>
    43b2:	62 1b       	sub	r22, r18
    43b4:	73 0b       	sbc	r23, r19
    43b6:	84 0b       	sbc	r24, r20
    43b8:	ba 0b       	sbc	r27, r26
    43ba:	ee 1f       	adc	r30, r30
    43bc:	88 f7       	brcc	.-30     	; 0x43a0 <__divsf3_pse+0x90>
    43be:	e0 95       	com	r30
    43c0:	08 95       	ret

000043c2 <__fixsfsi>:
    43c2:	04 d0       	rcall	.+8      	; 0x43cc <__fixunssfsi>
    43c4:	68 94       	set
    43c6:	b1 11       	cpse	r27, r1
    43c8:	d9 c0       	rjmp	.+434    	; 0x457c <__fp_szero>
    43ca:	08 95       	ret

000043cc <__fixunssfsi>:
    43cc:	bc d0       	rcall	.+376    	; 0x4546 <__fp_splitA>
    43ce:	88 f0       	brcs	.+34     	; 0x43f2 <__fixunssfsi+0x26>
    43d0:	9f 57       	subi	r25, 0x7F	; 127
    43d2:	90 f0       	brcs	.+36     	; 0x43f8 <__fixunssfsi+0x2c>
    43d4:	b9 2f       	mov	r27, r25
    43d6:	99 27       	eor	r25, r25
    43d8:	b7 51       	subi	r27, 0x17	; 23
    43da:	a0 f0       	brcs	.+40     	; 0x4404 <__fixunssfsi+0x38>
    43dc:	d1 f0       	breq	.+52     	; 0x4412 <__fixunssfsi+0x46>
    43de:	66 0f       	add	r22, r22
    43e0:	77 1f       	adc	r23, r23
    43e2:	88 1f       	adc	r24, r24
    43e4:	99 1f       	adc	r25, r25
    43e6:	1a f0       	brmi	.+6      	; 0x43ee <__fixunssfsi+0x22>
    43e8:	ba 95       	dec	r27
    43ea:	c9 f7       	brne	.-14     	; 0x43de <__fixunssfsi+0x12>
    43ec:	12 c0       	rjmp	.+36     	; 0x4412 <__fixunssfsi+0x46>
    43ee:	b1 30       	cpi	r27, 0x01	; 1
    43f0:	81 f0       	breq	.+32     	; 0x4412 <__fixunssfsi+0x46>
    43f2:	c3 d0       	rcall	.+390    	; 0x457a <__fp_zero>
    43f4:	b1 e0       	ldi	r27, 0x01	; 1
    43f6:	08 95       	ret
    43f8:	c0 c0       	rjmp	.+384    	; 0x457a <__fp_zero>
    43fa:	67 2f       	mov	r22, r23
    43fc:	78 2f       	mov	r23, r24
    43fe:	88 27       	eor	r24, r24
    4400:	b8 5f       	subi	r27, 0xF8	; 248
    4402:	39 f0       	breq	.+14     	; 0x4412 <__fixunssfsi+0x46>
    4404:	b9 3f       	cpi	r27, 0xF9	; 249
    4406:	cc f3       	brlt	.-14     	; 0x43fa <__fixunssfsi+0x2e>
    4408:	86 95       	lsr	r24
    440a:	77 95       	ror	r23
    440c:	67 95       	ror	r22
    440e:	b3 95       	inc	r27
    4410:	d9 f7       	brne	.-10     	; 0x4408 <__fixunssfsi+0x3c>
    4412:	3e f4       	brtc	.+14     	; 0x4422 <__fixunssfsi+0x56>
    4414:	90 95       	com	r25
    4416:	80 95       	com	r24
    4418:	70 95       	com	r23
    441a:	61 95       	neg	r22
    441c:	7f 4f       	sbci	r23, 0xFF	; 255
    441e:	8f 4f       	sbci	r24, 0xFF	; 255
    4420:	9f 4f       	sbci	r25, 0xFF	; 255
    4422:	08 95       	ret

00004424 <__floatunsisf>:
    4424:	e8 94       	clt
    4426:	09 c0       	rjmp	.+18     	; 0x443a <__floatsisf+0x12>

00004428 <__floatsisf>:
    4428:	97 fb       	bst	r25, 7
    442a:	3e f4       	brtc	.+14     	; 0x443a <__floatsisf+0x12>
    442c:	90 95       	com	r25
    442e:	80 95       	com	r24
    4430:	70 95       	com	r23
    4432:	61 95       	neg	r22
    4434:	7f 4f       	sbci	r23, 0xFF	; 255
    4436:	8f 4f       	sbci	r24, 0xFF	; 255
    4438:	9f 4f       	sbci	r25, 0xFF	; 255
    443a:	99 23       	and	r25, r25
    443c:	a9 f0       	breq	.+42     	; 0x4468 <__floatsisf+0x40>
    443e:	f9 2f       	mov	r31, r25
    4440:	96 e9       	ldi	r25, 0x96	; 150
    4442:	bb 27       	eor	r27, r27
    4444:	93 95       	inc	r25
    4446:	f6 95       	lsr	r31
    4448:	87 95       	ror	r24
    444a:	77 95       	ror	r23
    444c:	67 95       	ror	r22
    444e:	b7 95       	ror	r27
    4450:	f1 11       	cpse	r31, r1
    4452:	f8 cf       	rjmp	.-16     	; 0x4444 <__floatsisf+0x1c>
    4454:	fa f4       	brpl	.+62     	; 0x4494 <__floatsisf+0x6c>
    4456:	bb 0f       	add	r27, r27
    4458:	11 f4       	brne	.+4      	; 0x445e <__floatsisf+0x36>
    445a:	60 ff       	sbrs	r22, 0
    445c:	1b c0       	rjmp	.+54     	; 0x4494 <__floatsisf+0x6c>
    445e:	6f 5f       	subi	r22, 0xFF	; 255
    4460:	7f 4f       	sbci	r23, 0xFF	; 255
    4462:	8f 4f       	sbci	r24, 0xFF	; 255
    4464:	9f 4f       	sbci	r25, 0xFF	; 255
    4466:	16 c0       	rjmp	.+44     	; 0x4494 <__floatsisf+0x6c>
    4468:	88 23       	and	r24, r24
    446a:	11 f0       	breq	.+4      	; 0x4470 <__floatsisf+0x48>
    446c:	96 e9       	ldi	r25, 0x96	; 150
    446e:	11 c0       	rjmp	.+34     	; 0x4492 <__floatsisf+0x6a>
    4470:	77 23       	and	r23, r23
    4472:	21 f0       	breq	.+8      	; 0x447c <__floatsisf+0x54>
    4474:	9e e8       	ldi	r25, 0x8E	; 142
    4476:	87 2f       	mov	r24, r23
    4478:	76 2f       	mov	r23, r22
    447a:	05 c0       	rjmp	.+10     	; 0x4486 <__floatsisf+0x5e>
    447c:	66 23       	and	r22, r22
    447e:	71 f0       	breq	.+28     	; 0x449c <__floatsisf+0x74>
    4480:	96 e8       	ldi	r25, 0x86	; 134
    4482:	86 2f       	mov	r24, r22
    4484:	70 e0       	ldi	r23, 0x00	; 0
    4486:	60 e0       	ldi	r22, 0x00	; 0
    4488:	2a f0       	brmi	.+10     	; 0x4494 <__floatsisf+0x6c>
    448a:	9a 95       	dec	r25
    448c:	66 0f       	add	r22, r22
    448e:	77 1f       	adc	r23, r23
    4490:	88 1f       	adc	r24, r24
    4492:	da f7       	brpl	.-10     	; 0x448a <__floatsisf+0x62>
    4494:	88 0f       	add	r24, r24
    4496:	96 95       	lsr	r25
    4498:	87 95       	ror	r24
    449a:	97 f9       	bld	r25, 7
    449c:	08 95       	ret

0000449e <__fp_cmp>:
    449e:	99 0f       	add	r25, r25
    44a0:	00 08       	sbc	r0, r0
    44a2:	55 0f       	add	r21, r21
    44a4:	aa 0b       	sbc	r26, r26
    44a6:	e0 e8       	ldi	r30, 0x80	; 128
    44a8:	fe ef       	ldi	r31, 0xFE	; 254
    44aa:	16 16       	cp	r1, r22
    44ac:	17 06       	cpc	r1, r23
    44ae:	e8 07       	cpc	r30, r24
    44b0:	f9 07       	cpc	r31, r25
    44b2:	c0 f0       	brcs	.+48     	; 0x44e4 <__fp_cmp+0x46>
    44b4:	12 16       	cp	r1, r18
    44b6:	13 06       	cpc	r1, r19
    44b8:	e4 07       	cpc	r30, r20
    44ba:	f5 07       	cpc	r31, r21
    44bc:	98 f0       	brcs	.+38     	; 0x44e4 <__fp_cmp+0x46>
    44be:	62 1b       	sub	r22, r18
    44c0:	73 0b       	sbc	r23, r19
    44c2:	84 0b       	sbc	r24, r20
    44c4:	95 0b       	sbc	r25, r21
    44c6:	39 f4       	brne	.+14     	; 0x44d6 <__fp_cmp+0x38>
    44c8:	0a 26       	eor	r0, r26
    44ca:	61 f0       	breq	.+24     	; 0x44e4 <__fp_cmp+0x46>
    44cc:	23 2b       	or	r18, r19
    44ce:	24 2b       	or	r18, r20
    44d0:	25 2b       	or	r18, r21
    44d2:	21 f4       	brne	.+8      	; 0x44dc <__fp_cmp+0x3e>
    44d4:	08 95       	ret
    44d6:	0a 26       	eor	r0, r26
    44d8:	09 f4       	brne	.+2      	; 0x44dc <__fp_cmp+0x3e>
    44da:	a1 40       	sbci	r26, 0x01	; 1
    44dc:	a6 95       	lsr	r26
    44de:	8f ef       	ldi	r24, 0xFF	; 255
    44e0:	81 1d       	adc	r24, r1
    44e2:	81 1d       	adc	r24, r1
    44e4:	08 95       	ret

000044e6 <__fp_inf>:
    44e6:	97 f9       	bld	r25, 7
    44e8:	9f 67       	ori	r25, 0x7F	; 127
    44ea:	80 e8       	ldi	r24, 0x80	; 128
    44ec:	70 e0       	ldi	r23, 0x00	; 0
    44ee:	60 e0       	ldi	r22, 0x00	; 0
    44f0:	08 95       	ret

000044f2 <__fp_nan>:
    44f2:	9f ef       	ldi	r25, 0xFF	; 255
    44f4:	80 ec       	ldi	r24, 0xC0	; 192
    44f6:	08 95       	ret

000044f8 <__fp_pscA>:
    44f8:	00 24       	eor	r0, r0
    44fa:	0a 94       	dec	r0
    44fc:	16 16       	cp	r1, r22
    44fe:	17 06       	cpc	r1, r23
    4500:	18 06       	cpc	r1, r24
    4502:	09 06       	cpc	r0, r25
    4504:	08 95       	ret

00004506 <__fp_pscB>:
    4506:	00 24       	eor	r0, r0
    4508:	0a 94       	dec	r0
    450a:	12 16       	cp	r1, r18
    450c:	13 06       	cpc	r1, r19
    450e:	14 06       	cpc	r1, r20
    4510:	05 06       	cpc	r0, r21
    4512:	08 95       	ret

00004514 <__fp_round>:
    4514:	09 2e       	mov	r0, r25
    4516:	03 94       	inc	r0
    4518:	00 0c       	add	r0, r0
    451a:	11 f4       	brne	.+4      	; 0x4520 <__fp_round+0xc>
    451c:	88 23       	and	r24, r24
    451e:	52 f0       	brmi	.+20     	; 0x4534 <__fp_round+0x20>
    4520:	bb 0f       	add	r27, r27
    4522:	40 f4       	brcc	.+16     	; 0x4534 <__fp_round+0x20>
    4524:	bf 2b       	or	r27, r31
    4526:	11 f4       	brne	.+4      	; 0x452c <__fp_round+0x18>
    4528:	60 ff       	sbrs	r22, 0
    452a:	04 c0       	rjmp	.+8      	; 0x4534 <__fp_round+0x20>
    452c:	6f 5f       	subi	r22, 0xFF	; 255
    452e:	7f 4f       	sbci	r23, 0xFF	; 255
    4530:	8f 4f       	sbci	r24, 0xFF	; 255
    4532:	9f 4f       	sbci	r25, 0xFF	; 255
    4534:	08 95       	ret

00004536 <__fp_split3>:
    4536:	57 fd       	sbrc	r21, 7
    4538:	90 58       	subi	r25, 0x80	; 128
    453a:	44 0f       	add	r20, r20
    453c:	55 1f       	adc	r21, r21
    453e:	59 f0       	breq	.+22     	; 0x4556 <__fp_splitA+0x10>
    4540:	5f 3f       	cpi	r21, 0xFF	; 255
    4542:	71 f0       	breq	.+28     	; 0x4560 <__fp_splitA+0x1a>
    4544:	47 95       	ror	r20

00004546 <__fp_splitA>:
    4546:	88 0f       	add	r24, r24
    4548:	97 fb       	bst	r25, 7
    454a:	99 1f       	adc	r25, r25
    454c:	61 f0       	breq	.+24     	; 0x4566 <__fp_splitA+0x20>
    454e:	9f 3f       	cpi	r25, 0xFF	; 255
    4550:	79 f0       	breq	.+30     	; 0x4570 <__fp_splitA+0x2a>
    4552:	87 95       	ror	r24
    4554:	08 95       	ret
    4556:	12 16       	cp	r1, r18
    4558:	13 06       	cpc	r1, r19
    455a:	14 06       	cpc	r1, r20
    455c:	55 1f       	adc	r21, r21
    455e:	f2 cf       	rjmp	.-28     	; 0x4544 <__fp_split3+0xe>
    4560:	46 95       	lsr	r20
    4562:	f1 df       	rcall	.-30     	; 0x4546 <__fp_splitA>
    4564:	08 c0       	rjmp	.+16     	; 0x4576 <__fp_splitA+0x30>
    4566:	16 16       	cp	r1, r22
    4568:	17 06       	cpc	r1, r23
    456a:	18 06       	cpc	r1, r24
    456c:	99 1f       	adc	r25, r25
    456e:	f1 cf       	rjmp	.-30     	; 0x4552 <__fp_splitA+0xc>
    4570:	86 95       	lsr	r24
    4572:	71 05       	cpc	r23, r1
    4574:	61 05       	cpc	r22, r1
    4576:	08 94       	sec
    4578:	08 95       	ret

0000457a <__fp_zero>:
    457a:	e8 94       	clt

0000457c <__fp_szero>:
    457c:	bb 27       	eor	r27, r27
    457e:	66 27       	eor	r22, r22
    4580:	77 27       	eor	r23, r23
    4582:	cb 01       	movw	r24, r22
    4584:	97 f9       	bld	r25, 7
    4586:	08 95       	ret

00004588 <__gesf2>:
    4588:	8a df       	rcall	.-236    	; 0x449e <__fp_cmp>
    458a:	08 f4       	brcc	.+2      	; 0x458e <__gesf2+0x6>
    458c:	8f ef       	ldi	r24, 0xFF	; 255
    458e:	08 95       	ret

00004590 <__mulsf3>:
    4590:	0b d0       	rcall	.+22     	; 0x45a8 <__mulsf3x>
    4592:	c0 cf       	rjmp	.-128    	; 0x4514 <__fp_round>
    4594:	b1 df       	rcall	.-158    	; 0x44f8 <__fp_pscA>
    4596:	28 f0       	brcs	.+10     	; 0x45a2 <__mulsf3+0x12>
    4598:	b6 df       	rcall	.-148    	; 0x4506 <__fp_pscB>
    459a:	18 f0       	brcs	.+6      	; 0x45a2 <__mulsf3+0x12>
    459c:	95 23       	and	r25, r21
    459e:	09 f0       	breq	.+2      	; 0x45a2 <__mulsf3+0x12>
    45a0:	a2 cf       	rjmp	.-188    	; 0x44e6 <__fp_inf>
    45a2:	a7 cf       	rjmp	.-178    	; 0x44f2 <__fp_nan>
    45a4:	11 24       	eor	r1, r1
    45a6:	ea cf       	rjmp	.-44     	; 0x457c <__fp_szero>

000045a8 <__mulsf3x>:
    45a8:	c6 df       	rcall	.-116    	; 0x4536 <__fp_split3>
    45aa:	a0 f3       	brcs	.-24     	; 0x4594 <__mulsf3+0x4>

000045ac <__mulsf3_pse>:
    45ac:	95 9f       	mul	r25, r21
    45ae:	d1 f3       	breq	.-12     	; 0x45a4 <__mulsf3+0x14>
    45b0:	95 0f       	add	r25, r21
    45b2:	50 e0       	ldi	r21, 0x00	; 0
    45b4:	55 1f       	adc	r21, r21
    45b6:	62 9f       	mul	r22, r18
    45b8:	f0 01       	movw	r30, r0
    45ba:	72 9f       	mul	r23, r18
    45bc:	bb 27       	eor	r27, r27
    45be:	f0 0d       	add	r31, r0
    45c0:	b1 1d       	adc	r27, r1
    45c2:	63 9f       	mul	r22, r19
    45c4:	aa 27       	eor	r26, r26
    45c6:	f0 0d       	add	r31, r0
    45c8:	b1 1d       	adc	r27, r1
    45ca:	aa 1f       	adc	r26, r26
    45cc:	64 9f       	mul	r22, r20
    45ce:	66 27       	eor	r22, r22
    45d0:	b0 0d       	add	r27, r0
    45d2:	a1 1d       	adc	r26, r1
    45d4:	66 1f       	adc	r22, r22
    45d6:	82 9f       	mul	r24, r18
    45d8:	22 27       	eor	r18, r18
    45da:	b0 0d       	add	r27, r0
    45dc:	a1 1d       	adc	r26, r1
    45de:	62 1f       	adc	r22, r18
    45e0:	73 9f       	mul	r23, r19
    45e2:	b0 0d       	add	r27, r0
    45e4:	a1 1d       	adc	r26, r1
    45e6:	62 1f       	adc	r22, r18
    45e8:	83 9f       	mul	r24, r19
    45ea:	a0 0d       	add	r26, r0
    45ec:	61 1d       	adc	r22, r1
    45ee:	22 1f       	adc	r18, r18
    45f0:	74 9f       	mul	r23, r20
    45f2:	33 27       	eor	r19, r19
    45f4:	a0 0d       	add	r26, r0
    45f6:	61 1d       	adc	r22, r1
    45f8:	23 1f       	adc	r18, r19
    45fa:	84 9f       	mul	r24, r20
    45fc:	60 0d       	add	r22, r0
    45fe:	21 1d       	adc	r18, r1
    4600:	82 2f       	mov	r24, r18
    4602:	76 2f       	mov	r23, r22
    4604:	6a 2f       	mov	r22, r26
    4606:	11 24       	eor	r1, r1
    4608:	9f 57       	subi	r25, 0x7F	; 127
    460a:	50 40       	sbci	r21, 0x00	; 0
    460c:	8a f0       	brmi	.+34     	; 0x4630 <__mulsf3_pse+0x84>
    460e:	e1 f0       	breq	.+56     	; 0x4648 <__mulsf3_pse+0x9c>
    4610:	88 23       	and	r24, r24
    4612:	4a f0       	brmi	.+18     	; 0x4626 <__mulsf3_pse+0x7a>
    4614:	ee 0f       	add	r30, r30
    4616:	ff 1f       	adc	r31, r31
    4618:	bb 1f       	adc	r27, r27
    461a:	66 1f       	adc	r22, r22
    461c:	77 1f       	adc	r23, r23
    461e:	88 1f       	adc	r24, r24
    4620:	91 50       	subi	r25, 0x01	; 1
    4622:	50 40       	sbci	r21, 0x00	; 0
    4624:	a9 f7       	brne	.-22     	; 0x4610 <__mulsf3_pse+0x64>
    4626:	9e 3f       	cpi	r25, 0xFE	; 254
    4628:	51 05       	cpc	r21, r1
    462a:	70 f0       	brcs	.+28     	; 0x4648 <__mulsf3_pse+0x9c>
    462c:	5c cf       	rjmp	.-328    	; 0x44e6 <__fp_inf>
    462e:	a6 cf       	rjmp	.-180    	; 0x457c <__fp_szero>
    4630:	5f 3f       	cpi	r21, 0xFF	; 255
    4632:	ec f3       	brlt	.-6      	; 0x462e <__mulsf3_pse+0x82>
    4634:	98 3e       	cpi	r25, 0xE8	; 232
    4636:	dc f3       	brlt	.-10     	; 0x462e <__mulsf3_pse+0x82>
    4638:	86 95       	lsr	r24
    463a:	77 95       	ror	r23
    463c:	67 95       	ror	r22
    463e:	b7 95       	ror	r27
    4640:	f7 95       	ror	r31
    4642:	e7 95       	ror	r30
    4644:	9f 5f       	subi	r25, 0xFF	; 255
    4646:	c1 f7       	brne	.-16     	; 0x4638 <__mulsf3_pse+0x8c>
    4648:	fe 2b       	or	r31, r30
    464a:	88 0f       	add	r24, r24
    464c:	91 1d       	adc	r25, r1
    464e:	96 95       	lsr	r25
    4650:	87 95       	ror	r24
    4652:	97 f9       	bld	r25, 7
    4654:	08 95       	ret

00004656 <pow>:
    4656:	fa 01       	movw	r30, r20
    4658:	ee 0f       	add	r30, r30
    465a:	ff 1f       	adc	r31, r31
    465c:	30 96       	adiw	r30, 0x00	; 0
    465e:	21 05       	cpc	r18, r1
    4660:	31 05       	cpc	r19, r1
    4662:	99 f1       	breq	.+102    	; 0x46ca <pow+0x74>
    4664:	61 15       	cp	r22, r1
    4666:	71 05       	cpc	r23, r1
    4668:	61 f4       	brne	.+24     	; 0x4682 <pow+0x2c>
    466a:	80 38       	cpi	r24, 0x80	; 128
    466c:	bf e3       	ldi	r27, 0x3F	; 63
    466e:	9b 07       	cpc	r25, r27
    4670:	49 f1       	breq	.+82     	; 0x46c4 <pow+0x6e>
    4672:	68 94       	set
    4674:	90 38       	cpi	r25, 0x80	; 128
    4676:	81 05       	cpc	r24, r1
    4678:	61 f0       	breq	.+24     	; 0x4692 <pow+0x3c>
    467a:	80 38       	cpi	r24, 0x80	; 128
    467c:	bf ef       	ldi	r27, 0xFF	; 255
    467e:	9b 07       	cpc	r25, r27
    4680:	41 f0       	breq	.+16     	; 0x4692 <pow+0x3c>
    4682:	99 23       	and	r25, r25
    4684:	42 f5       	brpl	.+80     	; 0x46d6 <pow+0x80>
    4686:	ff 3f       	cpi	r31, 0xFF	; 255
    4688:	e1 05       	cpc	r30, r1
    468a:	31 05       	cpc	r19, r1
    468c:	21 05       	cpc	r18, r1
    468e:	11 f1       	breq	.+68     	; 0x46d4 <pow+0x7e>
    4690:	e8 94       	clt
    4692:	08 94       	sec
    4694:	e7 95       	ror	r30
    4696:	d9 01       	movw	r26, r18
    4698:	aa 23       	and	r26, r26
    469a:	29 f4       	brne	.+10     	; 0x46a6 <pow+0x50>
    469c:	ab 2f       	mov	r26, r27
    469e:	be 2f       	mov	r27, r30
    46a0:	f8 5f       	subi	r31, 0xF8	; 248
    46a2:	d0 f3       	brcs	.-12     	; 0x4698 <pow+0x42>
    46a4:	10 c0       	rjmp	.+32     	; 0x46c6 <pow+0x70>
    46a6:	ff 5f       	subi	r31, 0xFF	; 255
    46a8:	70 f4       	brcc	.+28     	; 0x46c6 <pow+0x70>
    46aa:	a6 95       	lsr	r26
    46ac:	e0 f7       	brcc	.-8      	; 0x46a6 <pow+0x50>
    46ae:	f7 39       	cpi	r31, 0x97	; 151
    46b0:	50 f0       	brcs	.+20     	; 0x46c6 <pow+0x70>
    46b2:	19 f0       	breq	.+6      	; 0x46ba <pow+0x64>
    46b4:	ff 3a       	cpi	r31, 0xAF	; 175
    46b6:	38 f4       	brcc	.+14     	; 0x46c6 <pow+0x70>
    46b8:	9f 77       	andi	r25, 0x7F	; 127
    46ba:	9f 93       	push	r25
    46bc:	0c d0       	rcall	.+24     	; 0x46d6 <pow+0x80>
    46be:	0f 90       	pop	r0
    46c0:	07 fc       	sbrc	r0, 7
    46c2:	90 58       	subi	r25, 0x80	; 128
    46c4:	08 95       	ret
    46c6:	3e f0       	brts	.+14     	; 0x46d6 <pow+0x80>
    46c8:	14 cf       	rjmp	.-472    	; 0x44f2 <__fp_nan>
    46ca:	60 e0       	ldi	r22, 0x00	; 0
    46cc:	70 e0       	ldi	r23, 0x00	; 0
    46ce:	80 e8       	ldi	r24, 0x80	; 128
    46d0:	9f e3       	ldi	r25, 0x3F	; 63
    46d2:	08 95       	ret
    46d4:	4f e7       	ldi	r20, 0x7F	; 127
    46d6:	9f 77       	andi	r25, 0x7F	; 127
    46d8:	5f 93       	push	r21
    46da:	4f 93       	push	r20
    46dc:	3f 93       	push	r19
    46de:	2f 93       	push	r18
    46e0:	9e d0       	rcall	.+316    	; 0x481e <log>
    46e2:	2f 91       	pop	r18
    46e4:	3f 91       	pop	r19
    46e6:	4f 91       	pop	r20
    46e8:	5f 91       	pop	r21
    46ea:	52 df       	rcall	.-348    	; 0x4590 <__mulsf3>
    46ec:	05 c0       	rjmp	.+10     	; 0x46f8 <exp>
    46ee:	19 f4       	brne	.+6      	; 0x46f6 <pow+0xa0>
    46f0:	0e f0       	brts	.+2      	; 0x46f4 <pow+0x9e>
    46f2:	f9 ce       	rjmp	.-526    	; 0x44e6 <__fp_inf>
    46f4:	42 cf       	rjmp	.-380    	; 0x457a <__fp_zero>
    46f6:	fd ce       	rjmp	.-518    	; 0x44f2 <__fp_nan>

000046f8 <exp>:
    46f8:	26 df       	rcall	.-436    	; 0x4546 <__fp_splitA>
    46fa:	c8 f3       	brcs	.-14     	; 0x46ee <pow+0x98>
    46fc:	96 38       	cpi	r25, 0x86	; 134
    46fe:	c0 f7       	brcc	.-16     	; 0x46f0 <pow+0x9a>
    4700:	07 f8       	bld	r0, 7
    4702:	0f 92       	push	r0
    4704:	e8 94       	clt
    4706:	2b e3       	ldi	r18, 0x3B	; 59
    4708:	3a ea       	ldi	r19, 0xAA	; 170
    470a:	48 eb       	ldi	r20, 0xB8	; 184
    470c:	5f e7       	ldi	r21, 0x7F	; 127
    470e:	4e df       	rcall	.-356    	; 0x45ac <__mulsf3_pse>
    4710:	0f 92       	push	r0
    4712:	0f 92       	push	r0
    4714:	0f 92       	push	r0
    4716:	4d b7       	in	r20, 0x3d	; 61
    4718:	5e b7       	in	r21, 0x3e	; 62
    471a:	0f 92       	push	r0
    471c:	c0 d0       	rcall	.+384    	; 0x489e <modf>
    471e:	e2 e2       	ldi	r30, 0x22	; 34
    4720:	f2 e0       	ldi	r31, 0x02	; 2
    4722:	16 d0       	rcall	.+44     	; 0x4750 <__fp_powser>
    4724:	4f 91       	pop	r20
    4726:	5f 91       	pop	r21
    4728:	ef 91       	pop	r30
    472a:	ff 91       	pop	r31
    472c:	e5 95       	asr	r30
    472e:	ee 1f       	adc	r30, r30
    4730:	ff 1f       	adc	r31, r31
    4732:	49 f0       	breq	.+18     	; 0x4746 <exp+0x4e>
    4734:	fe 57       	subi	r31, 0x7E	; 126
    4736:	e0 68       	ori	r30, 0x80	; 128
    4738:	44 27       	eor	r20, r20
    473a:	ee 0f       	add	r30, r30
    473c:	44 1f       	adc	r20, r20
    473e:	fa 95       	dec	r31
    4740:	e1 f7       	brne	.-8      	; 0x473a <exp+0x42>
    4742:	41 95       	neg	r20
    4744:	55 0b       	sbc	r21, r21
    4746:	32 d0       	rcall	.+100    	; 0x47ac <ldexp>
    4748:	0f 90       	pop	r0
    474a:	07 fe       	sbrs	r0, 7
    474c:	26 c0       	rjmp	.+76     	; 0x479a <inverse>
    474e:	08 95       	ret

00004750 <__fp_powser>:
    4750:	df 93       	push	r29
    4752:	cf 93       	push	r28
    4754:	1f 93       	push	r17
    4756:	0f 93       	push	r16
    4758:	ff 92       	push	r15
    475a:	ef 92       	push	r14
    475c:	df 92       	push	r13
    475e:	7b 01       	movw	r14, r22
    4760:	8c 01       	movw	r16, r24
    4762:	68 94       	set
    4764:	05 c0       	rjmp	.+10     	; 0x4770 <__fp_powser+0x20>
    4766:	da 2e       	mov	r13, r26
    4768:	ef 01       	movw	r28, r30
    476a:	1e df       	rcall	.-452    	; 0x45a8 <__mulsf3x>
    476c:	fe 01       	movw	r30, r28
    476e:	e8 94       	clt
    4770:	a5 91       	lpm	r26, Z+
    4772:	25 91       	lpm	r18, Z+
    4774:	35 91       	lpm	r19, Z+
    4776:	45 91       	lpm	r20, Z+
    4778:	55 91       	lpm	r21, Z+
    477a:	ae f3       	brts	.-22     	; 0x4766 <__fp_powser+0x16>
    477c:	ef 01       	movw	r28, r30
    477e:	62 dd       	rcall	.-1340   	; 0x4244 <__addsf3x>
    4780:	fe 01       	movw	r30, r28
    4782:	97 01       	movw	r18, r14
    4784:	a8 01       	movw	r20, r16
    4786:	da 94       	dec	r13
    4788:	79 f7       	brne	.-34     	; 0x4768 <__fp_powser+0x18>
    478a:	df 90       	pop	r13
    478c:	ef 90       	pop	r14
    478e:	ff 90       	pop	r15
    4790:	0f 91       	pop	r16
    4792:	1f 91       	pop	r17
    4794:	cf 91       	pop	r28
    4796:	df 91       	pop	r29
    4798:	08 95       	ret

0000479a <inverse>:
    479a:	9b 01       	movw	r18, r22
    479c:	ac 01       	movw	r20, r24
    479e:	60 e0       	ldi	r22, 0x00	; 0
    47a0:	70 e0       	ldi	r23, 0x00	; 0
    47a2:	80 e8       	ldi	r24, 0x80	; 128
    47a4:	9f e3       	ldi	r25, 0x3F	; 63
    47a6:	a5 cd       	rjmp	.-1206   	; 0x42f2 <__divsf3>
    47a8:	9e ce       	rjmp	.-708    	; 0x44e6 <__fp_inf>
    47aa:	ac c0       	rjmp	.+344    	; 0x4904 <__fp_mpack>

000047ac <ldexp>:
    47ac:	cc de       	rcall	.-616    	; 0x4546 <__fp_splitA>
    47ae:	e8 f3       	brcs	.-6      	; 0x47aa <inverse+0x10>
    47b0:	99 23       	and	r25, r25
    47b2:	d9 f3       	breq	.-10     	; 0x47aa <inverse+0x10>
    47b4:	94 0f       	add	r25, r20
    47b6:	51 1d       	adc	r21, r1
    47b8:	bb f3       	brvs	.-18     	; 0x47a8 <inverse+0xe>
    47ba:	91 50       	subi	r25, 0x01	; 1
    47bc:	50 40       	sbci	r21, 0x00	; 0
    47be:	94 f0       	brlt	.+36     	; 0x47e4 <ldexp+0x38>
    47c0:	59 f0       	breq	.+22     	; 0x47d8 <ldexp+0x2c>
    47c2:	88 23       	and	r24, r24
    47c4:	32 f0       	brmi	.+12     	; 0x47d2 <ldexp+0x26>
    47c6:	66 0f       	add	r22, r22
    47c8:	77 1f       	adc	r23, r23
    47ca:	88 1f       	adc	r24, r24
    47cc:	91 50       	subi	r25, 0x01	; 1
    47ce:	50 40       	sbci	r21, 0x00	; 0
    47d0:	c1 f7       	brne	.-16     	; 0x47c2 <ldexp+0x16>
    47d2:	9e 3f       	cpi	r25, 0xFE	; 254
    47d4:	51 05       	cpc	r21, r1
    47d6:	44 f7       	brge	.-48     	; 0x47a8 <inverse+0xe>
    47d8:	88 0f       	add	r24, r24
    47da:	91 1d       	adc	r25, r1
    47dc:	96 95       	lsr	r25
    47de:	87 95       	ror	r24
    47e0:	97 f9       	bld	r25, 7
    47e2:	08 95       	ret
    47e4:	5f 3f       	cpi	r21, 0xFF	; 255
    47e6:	ac f0       	brlt	.+42     	; 0x4812 <ldexp+0x66>
    47e8:	98 3e       	cpi	r25, 0xE8	; 232
    47ea:	9c f0       	brlt	.+38     	; 0x4812 <ldexp+0x66>
    47ec:	bb 27       	eor	r27, r27
    47ee:	86 95       	lsr	r24
    47f0:	77 95       	ror	r23
    47f2:	67 95       	ror	r22
    47f4:	b7 95       	ror	r27
    47f6:	08 f4       	brcc	.+2      	; 0x47fa <ldexp+0x4e>
    47f8:	b1 60       	ori	r27, 0x01	; 1
    47fa:	93 95       	inc	r25
    47fc:	c1 f7       	brne	.-16     	; 0x47ee <ldexp+0x42>
    47fe:	bb 0f       	add	r27, r27
    4800:	58 f7       	brcc	.-42     	; 0x47d8 <ldexp+0x2c>
    4802:	11 f4       	brne	.+4      	; 0x4808 <ldexp+0x5c>
    4804:	60 ff       	sbrs	r22, 0
    4806:	e8 cf       	rjmp	.-48     	; 0x47d8 <ldexp+0x2c>
    4808:	6f 5f       	subi	r22, 0xFF	; 255
    480a:	7f 4f       	sbci	r23, 0xFF	; 255
    480c:	8f 4f       	sbci	r24, 0xFF	; 255
    480e:	9f 4f       	sbci	r25, 0xFF	; 255
    4810:	e3 cf       	rjmp	.-58     	; 0x47d8 <ldexp+0x2c>
    4812:	b4 ce       	rjmp	.-664    	; 0x457c <__fp_szero>
    4814:	0e f0       	brts	.+2      	; 0x4818 <ldexp+0x6c>
    4816:	76 c0       	rjmp	.+236    	; 0x4904 <__fp_mpack>
    4818:	6c ce       	rjmp	.-808    	; 0x44f2 <__fp_nan>
    481a:	68 94       	set
    481c:	64 ce       	rjmp	.-824    	; 0x44e6 <__fp_inf>

0000481e <log>:
    481e:	93 de       	rcall	.-730    	; 0x4546 <__fp_splitA>
    4820:	c8 f3       	brcs	.-14     	; 0x4814 <ldexp+0x68>
    4822:	99 23       	and	r25, r25
    4824:	d1 f3       	breq	.-12     	; 0x481a <ldexp+0x6e>
    4826:	c6 f3       	brts	.-16     	; 0x4818 <ldexp+0x6c>
    4828:	df 93       	push	r29
    482a:	cf 93       	push	r28
    482c:	1f 93       	push	r17
    482e:	0f 93       	push	r16
    4830:	ff 92       	push	r15
    4832:	c9 2f       	mov	r28, r25
    4834:	dd 27       	eor	r29, r29
    4836:	88 23       	and	r24, r24
    4838:	2a f0       	brmi	.+10     	; 0x4844 <log+0x26>
    483a:	21 97       	sbiw	r28, 0x01	; 1
    483c:	66 0f       	add	r22, r22
    483e:	77 1f       	adc	r23, r23
    4840:	88 1f       	adc	r24, r24
    4842:	da f7       	brpl	.-10     	; 0x483a <log+0x1c>
    4844:	20 e0       	ldi	r18, 0x00	; 0
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	40 e8       	ldi	r20, 0x80	; 128
    484a:	5f eb       	ldi	r21, 0xBF	; 191
    484c:	9f e3       	ldi	r25, 0x3F	; 63
    484e:	88 39       	cpi	r24, 0x98	; 152
    4850:	20 f0       	brcs	.+8      	; 0x485a <log+0x3c>
    4852:	80 3e       	cpi	r24, 0xE0	; 224
    4854:	30 f0       	brcs	.+12     	; 0x4862 <log+0x44>
    4856:	21 96       	adiw	r28, 0x01	; 1
    4858:	8f 77       	andi	r24, 0x7F	; 127
    485a:	e3 dc       	rcall	.-1594   	; 0x4222 <__addsf3>
    485c:	ea e4       	ldi	r30, 0x4A	; 74
    485e:	f2 e0       	ldi	r31, 0x02	; 2
    4860:	03 c0       	rjmp	.+6      	; 0x4868 <log+0x4a>
    4862:	df dc       	rcall	.-1602   	; 0x4222 <__addsf3>
    4864:	e7 e7       	ldi	r30, 0x77	; 119
    4866:	f2 e0       	ldi	r31, 0x02	; 2
    4868:	73 df       	rcall	.-282    	; 0x4750 <__fp_powser>
    486a:	8b 01       	movw	r16, r22
    486c:	be 01       	movw	r22, r28
    486e:	ec 01       	movw	r28, r24
    4870:	fb 2e       	mov	r15, r27
    4872:	6f 57       	subi	r22, 0x7F	; 127
    4874:	71 09       	sbc	r23, r1
    4876:	75 95       	asr	r23
    4878:	77 1f       	adc	r23, r23
    487a:	88 0b       	sbc	r24, r24
    487c:	99 0b       	sbc	r25, r25
    487e:	d4 dd       	rcall	.-1112   	; 0x4428 <__floatsisf>
    4880:	28 e1       	ldi	r18, 0x18	; 24
    4882:	32 e7       	ldi	r19, 0x72	; 114
    4884:	41 e3       	ldi	r20, 0x31	; 49
    4886:	5f e3       	ldi	r21, 0x3F	; 63
    4888:	8f de       	rcall	.-738    	; 0x45a8 <__mulsf3x>
    488a:	af 2d       	mov	r26, r15
    488c:	98 01       	movw	r18, r16
    488e:	ae 01       	movw	r20, r28
    4890:	ff 90       	pop	r15
    4892:	0f 91       	pop	r16
    4894:	1f 91       	pop	r17
    4896:	cf 91       	pop	r28
    4898:	df 91       	pop	r29
    489a:	d4 dc       	rcall	.-1624   	; 0x4244 <__addsf3x>
    489c:	3b ce       	rjmp	.-906    	; 0x4514 <__fp_round>

0000489e <modf>:
    489e:	fa 01       	movw	r30, r20
    48a0:	dc 01       	movw	r26, r24
    48a2:	aa 0f       	add	r26, r26
    48a4:	bb 1f       	adc	r27, r27
    48a6:	9b 01       	movw	r18, r22
    48a8:	ac 01       	movw	r20, r24
    48aa:	bf 57       	subi	r27, 0x7F	; 127
    48ac:	28 f4       	brcc	.+10     	; 0x48b8 <modf+0x1a>
    48ae:	22 27       	eor	r18, r18
    48b0:	33 27       	eor	r19, r19
    48b2:	44 27       	eor	r20, r20
    48b4:	50 78       	andi	r21, 0x80	; 128
    48b6:	1f c0       	rjmp	.+62     	; 0x48f6 <modf+0x58>
    48b8:	b7 51       	subi	r27, 0x17	; 23
    48ba:	88 f4       	brcc	.+34     	; 0x48de <modf+0x40>
    48bc:	ab 2f       	mov	r26, r27
    48be:	00 24       	eor	r0, r0
    48c0:	46 95       	lsr	r20
    48c2:	37 95       	ror	r19
    48c4:	27 95       	ror	r18
    48c6:	01 1c       	adc	r0, r1
    48c8:	a3 95       	inc	r26
    48ca:	d2 f3       	brmi	.-12     	; 0x48c0 <modf+0x22>
    48cc:	00 20       	and	r0, r0
    48ce:	69 f0       	breq	.+26     	; 0x48ea <modf+0x4c>
    48d0:	22 0f       	add	r18, r18
    48d2:	33 1f       	adc	r19, r19
    48d4:	44 1f       	adc	r20, r20
    48d6:	b3 95       	inc	r27
    48d8:	da f3       	brmi	.-10     	; 0x48d0 <modf+0x32>
    48da:	0d d0       	rcall	.+26     	; 0x48f6 <modf+0x58>
    48dc:	a1 cc       	rjmp	.-1726   	; 0x4220 <__subsf3>
    48de:	61 30       	cpi	r22, 0x01	; 1
    48e0:	71 05       	cpc	r23, r1
    48e2:	a0 e8       	ldi	r26, 0x80	; 128
    48e4:	8a 07       	cpc	r24, r26
    48e6:	b9 46       	sbci	r27, 0x69	; 105
    48e8:	30 f4       	brcc	.+12     	; 0x48f6 <modf+0x58>
    48ea:	9b 01       	movw	r18, r22
    48ec:	ac 01       	movw	r20, r24
    48ee:	66 27       	eor	r22, r22
    48f0:	77 27       	eor	r23, r23
    48f2:	88 27       	eor	r24, r24
    48f4:	90 78       	andi	r25, 0x80	; 128
    48f6:	30 96       	adiw	r30, 0x00	; 0
    48f8:	21 f0       	breq	.+8      	; 0x4902 <modf+0x64>
    48fa:	20 83       	st	Z, r18
    48fc:	31 83       	std	Z+1, r19	; 0x01
    48fe:	42 83       	std	Z+2, r20	; 0x02
    4900:	53 83       	std	Z+3, r21	; 0x03
    4902:	08 95       	ret

00004904 <__fp_mpack>:
    4904:	9f 3f       	cpi	r25, 0xFF	; 255
    4906:	31 f0       	breq	.+12     	; 0x4914 <__fp_mpack_finite+0xc>

00004908 <__fp_mpack_finite>:
    4908:	91 50       	subi	r25, 0x01	; 1
    490a:	20 f4       	brcc	.+8      	; 0x4914 <__fp_mpack_finite+0xc>
    490c:	87 95       	ror	r24
    490e:	77 95       	ror	r23
    4910:	67 95       	ror	r22
    4912:	b7 95       	ror	r27
    4914:	88 0f       	add	r24, r24
    4916:	91 1d       	adc	r25, r1
    4918:	96 95       	lsr	r25
    491a:	87 95       	ror	r24
    491c:	97 f9       	bld	r25, 7
    491e:	08 95       	ret

00004920 <__mulsi3>:
    4920:	db 01       	movw	r26, r22
    4922:	8f 93       	push	r24
    4924:	9f 93       	push	r25
    4926:	88 d0       	rcall	.+272    	; 0x4a38 <__muluhisi3>
    4928:	bf 91       	pop	r27
    492a:	af 91       	pop	r26
    492c:	a2 9f       	mul	r26, r18
    492e:	80 0d       	add	r24, r0
    4930:	91 1d       	adc	r25, r1
    4932:	a3 9f       	mul	r26, r19
    4934:	90 0d       	add	r25, r0
    4936:	b2 9f       	mul	r27, r18
    4938:	90 0d       	add	r25, r0
    493a:	11 24       	eor	r1, r1
    493c:	08 95       	ret

0000493e <__udivmodhi4>:
    493e:	aa 1b       	sub	r26, r26
    4940:	bb 1b       	sub	r27, r27
    4942:	51 e1       	ldi	r21, 0x11	; 17
    4944:	07 c0       	rjmp	.+14     	; 0x4954 <__udivmodhi4_ep>

00004946 <__udivmodhi4_loop>:
    4946:	aa 1f       	adc	r26, r26
    4948:	bb 1f       	adc	r27, r27
    494a:	a6 17       	cp	r26, r22
    494c:	b7 07       	cpc	r27, r23
    494e:	10 f0       	brcs	.+4      	; 0x4954 <__udivmodhi4_ep>
    4950:	a6 1b       	sub	r26, r22
    4952:	b7 0b       	sbc	r27, r23

00004954 <__udivmodhi4_ep>:
    4954:	88 1f       	adc	r24, r24
    4956:	99 1f       	adc	r25, r25
    4958:	5a 95       	dec	r21
    495a:	a9 f7       	brne	.-22     	; 0x4946 <__udivmodhi4_loop>
    495c:	80 95       	com	r24
    495e:	90 95       	com	r25
    4960:	bc 01       	movw	r22, r24
    4962:	cd 01       	movw	r24, r26
    4964:	08 95       	ret

00004966 <__divmodhi4>:
    4966:	97 fb       	bst	r25, 7
    4968:	07 2e       	mov	r0, r23
    496a:	16 f4       	brtc	.+4      	; 0x4970 <__divmodhi4+0xa>
    496c:	00 94       	com	r0
    496e:	06 d0       	rcall	.+12     	; 0x497c <__divmodhi4_neg1>
    4970:	77 fd       	sbrc	r23, 7
    4972:	08 d0       	rcall	.+16     	; 0x4984 <__divmodhi4_neg2>
    4974:	e4 df       	rcall	.-56     	; 0x493e <__udivmodhi4>
    4976:	07 fc       	sbrc	r0, 7
    4978:	05 d0       	rcall	.+10     	; 0x4984 <__divmodhi4_neg2>
    497a:	3e f4       	brtc	.+14     	; 0x498a <__divmodhi4_exit>

0000497c <__divmodhi4_neg1>:
    497c:	90 95       	com	r25
    497e:	81 95       	neg	r24
    4980:	9f 4f       	sbci	r25, 0xFF	; 255
    4982:	08 95       	ret

00004984 <__divmodhi4_neg2>:
    4984:	70 95       	com	r23
    4986:	61 95       	neg	r22
    4988:	7f 4f       	sbci	r23, 0xFF	; 255

0000498a <__divmodhi4_exit>:
    498a:	08 95       	ret

0000498c <__udivmodsi4>:
    498c:	a1 e2       	ldi	r26, 0x21	; 33
    498e:	1a 2e       	mov	r1, r26
    4990:	aa 1b       	sub	r26, r26
    4992:	bb 1b       	sub	r27, r27
    4994:	fd 01       	movw	r30, r26
    4996:	0d c0       	rjmp	.+26     	; 0x49b2 <__udivmodsi4_ep>

00004998 <__udivmodsi4_loop>:
    4998:	aa 1f       	adc	r26, r26
    499a:	bb 1f       	adc	r27, r27
    499c:	ee 1f       	adc	r30, r30
    499e:	ff 1f       	adc	r31, r31
    49a0:	a2 17       	cp	r26, r18
    49a2:	b3 07       	cpc	r27, r19
    49a4:	e4 07       	cpc	r30, r20
    49a6:	f5 07       	cpc	r31, r21
    49a8:	20 f0       	brcs	.+8      	; 0x49b2 <__udivmodsi4_ep>
    49aa:	a2 1b       	sub	r26, r18
    49ac:	b3 0b       	sbc	r27, r19
    49ae:	e4 0b       	sbc	r30, r20
    49b0:	f5 0b       	sbc	r31, r21

000049b2 <__udivmodsi4_ep>:
    49b2:	66 1f       	adc	r22, r22
    49b4:	77 1f       	adc	r23, r23
    49b6:	88 1f       	adc	r24, r24
    49b8:	99 1f       	adc	r25, r25
    49ba:	1a 94       	dec	r1
    49bc:	69 f7       	brne	.-38     	; 0x4998 <__udivmodsi4_loop>
    49be:	60 95       	com	r22
    49c0:	70 95       	com	r23
    49c2:	80 95       	com	r24
    49c4:	90 95       	com	r25
    49c6:	9b 01       	movw	r18, r22
    49c8:	ac 01       	movw	r20, r24
    49ca:	bd 01       	movw	r22, r26
    49cc:	cf 01       	movw	r24, r30
    49ce:	08 95       	ret

000049d0 <__divmodsi4>:
    49d0:	05 2e       	mov	r0, r21
    49d2:	97 fb       	bst	r25, 7
    49d4:	16 f4       	brtc	.+4      	; 0x49da <__divmodsi4+0xa>
    49d6:	00 94       	com	r0
    49d8:	0f d0       	rcall	.+30     	; 0x49f8 <__negsi2>
    49da:	57 fd       	sbrc	r21, 7
    49dc:	05 d0       	rcall	.+10     	; 0x49e8 <__divmodsi4_neg2>
    49de:	d6 df       	rcall	.-84     	; 0x498c <__udivmodsi4>
    49e0:	07 fc       	sbrc	r0, 7
    49e2:	02 d0       	rcall	.+4      	; 0x49e8 <__divmodsi4_neg2>
    49e4:	46 f4       	brtc	.+16     	; 0x49f6 <__divmodsi4_exit>
    49e6:	08 c0       	rjmp	.+16     	; 0x49f8 <__negsi2>

000049e8 <__divmodsi4_neg2>:
    49e8:	50 95       	com	r21
    49ea:	40 95       	com	r20
    49ec:	30 95       	com	r19
    49ee:	21 95       	neg	r18
    49f0:	3f 4f       	sbci	r19, 0xFF	; 255
    49f2:	4f 4f       	sbci	r20, 0xFF	; 255
    49f4:	5f 4f       	sbci	r21, 0xFF	; 255

000049f6 <__divmodsi4_exit>:
    49f6:	08 95       	ret

000049f8 <__negsi2>:
    49f8:	90 95       	com	r25
    49fa:	80 95       	com	r24
    49fc:	70 95       	com	r23
    49fe:	61 95       	neg	r22
    4a00:	7f 4f       	sbci	r23, 0xFF	; 255
    4a02:	8f 4f       	sbci	r24, 0xFF	; 255
    4a04:	9f 4f       	sbci	r25, 0xFF	; 255
    4a06:	08 95       	ret

00004a08 <__tablejump2__>:
    4a08:	ee 0f       	add	r30, r30
    4a0a:	ff 1f       	adc	r31, r31
    4a0c:	88 1f       	adc	r24, r24
    4a0e:	8b bf       	out	0x3b, r24	; 59
    4a10:	07 90       	elpm	r0, Z+
    4a12:	f6 91       	elpm	r31, Z
    4a14:	e0 2d       	mov	r30, r0
    4a16:	1b be       	out	0x3b, r1	; 59
    4a18:	19 94       	eijmp

00004a1a <__umulhisi3>:
    4a1a:	a2 9f       	mul	r26, r18
    4a1c:	b0 01       	movw	r22, r0
    4a1e:	b3 9f       	mul	r27, r19
    4a20:	c0 01       	movw	r24, r0
    4a22:	a3 9f       	mul	r26, r19
    4a24:	70 0d       	add	r23, r0
    4a26:	81 1d       	adc	r24, r1
    4a28:	11 24       	eor	r1, r1
    4a2a:	91 1d       	adc	r25, r1
    4a2c:	b2 9f       	mul	r27, r18
    4a2e:	70 0d       	add	r23, r0
    4a30:	81 1d       	adc	r24, r1
    4a32:	11 24       	eor	r1, r1
    4a34:	91 1d       	adc	r25, r1
    4a36:	08 95       	ret

00004a38 <__muluhisi3>:
    4a38:	f0 df       	rcall	.-32     	; 0x4a1a <__umulhisi3>
    4a3a:	a5 9f       	mul	r26, r21
    4a3c:	90 0d       	add	r25, r0
    4a3e:	b4 9f       	mul	r27, r20
    4a40:	90 0d       	add	r25, r0
    4a42:	a4 9f       	mul	r26, r20
    4a44:	80 0d       	add	r24, r0
    4a46:	91 1d       	adc	r25, r1
    4a48:	11 24       	eor	r1, r1
    4a4a:	08 95       	ret

00004a4c <__ashldi3>:
    4a4c:	0f 93       	push	r16
    4a4e:	08 30       	cpi	r16, 0x08	; 8
    4a50:	90 f0       	brcs	.+36     	; 0x4a76 <__ashldi3+0x2a>
    4a52:	98 2f       	mov	r25, r24
    4a54:	87 2f       	mov	r24, r23
    4a56:	76 2f       	mov	r23, r22
    4a58:	65 2f       	mov	r22, r21
    4a5a:	54 2f       	mov	r21, r20
    4a5c:	43 2f       	mov	r20, r19
    4a5e:	32 2f       	mov	r19, r18
    4a60:	22 27       	eor	r18, r18
    4a62:	08 50       	subi	r16, 0x08	; 8
    4a64:	f4 cf       	rjmp	.-24     	; 0x4a4e <__ashldi3+0x2>
    4a66:	22 0f       	add	r18, r18
    4a68:	33 1f       	adc	r19, r19
    4a6a:	44 1f       	adc	r20, r20
    4a6c:	55 1f       	adc	r21, r21
    4a6e:	66 1f       	adc	r22, r22
    4a70:	77 1f       	adc	r23, r23
    4a72:	88 1f       	adc	r24, r24
    4a74:	99 1f       	adc	r25, r25
    4a76:	0a 95       	dec	r16
    4a78:	b2 f7       	brpl	.-20     	; 0x4a66 <__ashldi3+0x1a>
    4a7a:	0f 91       	pop	r16
    4a7c:	08 95       	ret

00004a7e <__ashrdi3>:
    4a7e:	97 fb       	bst	r25, 7
    4a80:	10 f8       	bld	r1, 0

00004a82 <__lshrdi3>:
    4a82:	16 94       	lsr	r1
    4a84:	00 08       	sbc	r0, r0
    4a86:	0f 93       	push	r16
    4a88:	08 30       	cpi	r16, 0x08	; 8
    4a8a:	98 f0       	brcs	.+38     	; 0x4ab2 <__lshrdi3+0x30>
    4a8c:	08 50       	subi	r16, 0x08	; 8
    4a8e:	23 2f       	mov	r18, r19
    4a90:	34 2f       	mov	r19, r20
    4a92:	45 2f       	mov	r20, r21
    4a94:	56 2f       	mov	r21, r22
    4a96:	67 2f       	mov	r22, r23
    4a98:	78 2f       	mov	r23, r24
    4a9a:	89 2f       	mov	r24, r25
    4a9c:	90 2d       	mov	r25, r0
    4a9e:	f4 cf       	rjmp	.-24     	; 0x4a88 <__lshrdi3+0x6>
    4aa0:	05 94       	asr	r0
    4aa2:	97 95       	ror	r25
    4aa4:	87 95       	ror	r24
    4aa6:	77 95       	ror	r23
    4aa8:	67 95       	ror	r22
    4aaa:	57 95       	ror	r21
    4aac:	47 95       	ror	r20
    4aae:	37 95       	ror	r19
    4ab0:	27 95       	ror	r18
    4ab2:	0a 95       	dec	r16
    4ab4:	aa f7       	brpl	.-22     	; 0x4aa0 <__lshrdi3+0x1e>
    4ab6:	0f 91       	pop	r16
    4ab8:	08 95       	ret

00004aba <fdevopen>:
    4aba:	0f 93       	push	r16
    4abc:	1f 93       	push	r17
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	00 97       	sbiw	r24, 0x00	; 0
    4ac4:	31 f4       	brne	.+12     	; 0x4ad2 <fdevopen+0x18>
    4ac6:	61 15       	cp	r22, r1
    4ac8:	71 05       	cpc	r23, r1
    4aca:	19 f4       	brne	.+6      	; 0x4ad2 <fdevopen+0x18>
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	39 c0       	rjmp	.+114    	; 0x4b44 <fdevopen+0x8a>
    4ad2:	8b 01       	movw	r16, r22
    4ad4:	ec 01       	movw	r28, r24
    4ad6:	6e e0       	ldi	r22, 0x0E	; 14
    4ad8:	70 e0       	ldi	r23, 0x00	; 0
    4ada:	81 e0       	ldi	r24, 0x01	; 1
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	77 d5       	rcall	.+2798   	; 0x55ce <calloc>
    4ae0:	fc 01       	movw	r30, r24
    4ae2:	89 2b       	or	r24, r25
    4ae4:	99 f3       	breq	.-26     	; 0x4acc <fdevopen+0x12>
    4ae6:	80 e8       	ldi	r24, 0x80	; 128
    4ae8:	83 83       	std	Z+3, r24	; 0x03
    4aea:	01 15       	cp	r16, r1
    4aec:	11 05       	cpc	r17, r1
    4aee:	71 f0       	breq	.+28     	; 0x4b0c <fdevopen+0x52>
    4af0:	02 87       	std	Z+10, r16	; 0x0a
    4af2:	13 87       	std	Z+11, r17	; 0x0b
    4af4:	81 e8       	ldi	r24, 0x81	; 129
    4af6:	83 83       	std	Z+3, r24	; 0x03
    4af8:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <__iob>
    4afc:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <__iob+0x1>
    4b00:	89 2b       	or	r24, r25
    4b02:	21 f4       	brne	.+8      	; 0x4b0c <fdevopen+0x52>
    4b04:	e0 93 24 22 	sts	0x2224, r30	; 0x802224 <__iob>
    4b08:	f0 93 25 22 	sts	0x2225, r31	; 0x802225 <__iob+0x1>
    4b0c:	20 97       	sbiw	r28, 0x00	; 0
    4b0e:	c9 f0       	breq	.+50     	; 0x4b42 <fdevopen+0x88>
    4b10:	c0 87       	std	Z+8, r28	; 0x08
    4b12:	d1 87       	std	Z+9, r29	; 0x09
    4b14:	83 81       	ldd	r24, Z+3	; 0x03
    4b16:	82 60       	ori	r24, 0x02	; 2
    4b18:	83 83       	std	Z+3, r24	; 0x03
    4b1a:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <__iob+0x2>
    4b1e:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <__iob+0x3>
    4b22:	89 2b       	or	r24, r25
    4b24:	71 f4       	brne	.+28     	; 0x4b42 <fdevopen+0x88>
    4b26:	e0 93 26 22 	sts	0x2226, r30	; 0x802226 <__iob+0x2>
    4b2a:	f0 93 27 22 	sts	0x2227, r31	; 0x802227 <__iob+0x3>
    4b2e:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <__iob+0x4>
    4b32:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <__iob+0x5>
    4b36:	89 2b       	or	r24, r25
    4b38:	21 f4       	brne	.+8      	; 0x4b42 <fdevopen+0x88>
    4b3a:	e0 93 28 22 	sts	0x2228, r30	; 0x802228 <__iob+0x4>
    4b3e:	f0 93 29 22 	sts	0x2229, r31	; 0x802229 <__iob+0x5>
    4b42:	cf 01       	movw	r24, r30
    4b44:	df 91       	pop	r29
    4b46:	cf 91       	pop	r28
    4b48:	1f 91       	pop	r17
    4b4a:	0f 91       	pop	r16
    4b4c:	08 95       	ret

00004b4e <printf>:
    4b4e:	cf 93       	push	r28
    4b50:	df 93       	push	r29
    4b52:	cd b7       	in	r28, 0x3d	; 61
    4b54:	de b7       	in	r29, 0x3e	; 62
    4b56:	ae 01       	movw	r20, r28
    4b58:	4a 5f       	subi	r20, 0xFA	; 250
    4b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b5c:	fa 01       	movw	r30, r20
    4b5e:	61 91       	ld	r22, Z+
    4b60:	71 91       	ld	r23, Z+
    4b62:	af 01       	movw	r20, r30
    4b64:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <__iob+0x2>
    4b68:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <__iob+0x3>
    4b6c:	76 d0       	rcall	.+236    	; 0x4c5a <vfprintf>
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	08 95       	ret

00004b74 <puts>:
    4b74:	0f 93       	push	r16
    4b76:	1f 93       	push	r17
    4b78:	cf 93       	push	r28
    4b7a:	df 93       	push	r29
    4b7c:	e0 91 26 22 	lds	r30, 0x2226	; 0x802226 <__iob+0x2>
    4b80:	f0 91 27 22 	lds	r31, 0x2227	; 0x802227 <__iob+0x3>
    4b84:	23 81       	ldd	r18, Z+3	; 0x03
    4b86:	21 ff       	sbrs	r18, 1
    4b88:	1b c0       	rjmp	.+54     	; 0x4bc0 <puts+0x4c>
    4b8a:	8c 01       	movw	r16, r24
    4b8c:	d0 e0       	ldi	r29, 0x00	; 0
    4b8e:	c0 e0       	ldi	r28, 0x00	; 0
    4b90:	f8 01       	movw	r30, r16
    4b92:	81 91       	ld	r24, Z+
    4b94:	8f 01       	movw	r16, r30
    4b96:	60 91 26 22 	lds	r22, 0x2226	; 0x802226 <__iob+0x2>
    4b9a:	70 91 27 22 	lds	r23, 0x2227	; 0x802227 <__iob+0x3>
    4b9e:	db 01       	movw	r26, r22
    4ba0:	18 96       	adiw	r26, 0x08	; 8
    4ba2:	ed 91       	ld	r30, X+
    4ba4:	fc 91       	ld	r31, X
    4ba6:	19 97       	sbiw	r26, 0x09	; 9
    4ba8:	88 23       	and	r24, r24
    4baa:	31 f0       	breq	.+12     	; 0x4bb8 <puts+0x44>
    4bac:	19 95       	eicall
    4bae:	89 2b       	or	r24, r25
    4bb0:	79 f3       	breq	.-34     	; 0x4b90 <puts+0x1c>
    4bb2:	df ef       	ldi	r29, 0xFF	; 255
    4bb4:	cf ef       	ldi	r28, 0xFF	; 255
    4bb6:	ec cf       	rjmp	.-40     	; 0x4b90 <puts+0x1c>
    4bb8:	8a e0       	ldi	r24, 0x0A	; 10
    4bba:	19 95       	eicall
    4bbc:	89 2b       	or	r24, r25
    4bbe:	19 f0       	breq	.+6      	; 0x4bc6 <puts+0x52>
    4bc0:	8f ef       	ldi	r24, 0xFF	; 255
    4bc2:	9f ef       	ldi	r25, 0xFF	; 255
    4bc4:	02 c0       	rjmp	.+4      	; 0x4bca <puts+0x56>
    4bc6:	8d 2f       	mov	r24, r29
    4bc8:	9c 2f       	mov	r25, r28
    4bca:	df 91       	pop	r29
    4bcc:	cf 91       	pop	r28
    4bce:	1f 91       	pop	r17
    4bd0:	0f 91       	pop	r16
    4bd2:	08 95       	ret

00004bd4 <sprintf>:
    4bd4:	0f 93       	push	r16
    4bd6:	1f 93       	push	r17
    4bd8:	cf 93       	push	r28
    4bda:	df 93       	push	r29
    4bdc:	cd b7       	in	r28, 0x3d	; 61
    4bde:	de b7       	in	r29, 0x3e	; 62
    4be0:	2e 97       	sbiw	r28, 0x0e	; 14
    4be2:	cd bf       	out	0x3d, r28	; 61
    4be4:	de bf       	out	0x3e, r29	; 62
    4be6:	0e 89       	ldd	r16, Y+22	; 0x16
    4be8:	1f 89       	ldd	r17, Y+23	; 0x17
    4bea:	86 e0       	ldi	r24, 0x06	; 6
    4bec:	8c 83       	std	Y+4, r24	; 0x04
    4bee:	09 83       	std	Y+1, r16	; 0x01
    4bf0:	1a 83       	std	Y+2, r17	; 0x02
    4bf2:	8f ef       	ldi	r24, 0xFF	; 255
    4bf4:	9f e7       	ldi	r25, 0x7F	; 127
    4bf6:	8d 83       	std	Y+5, r24	; 0x05
    4bf8:	9e 83       	std	Y+6, r25	; 0x06
    4bfa:	ae 01       	movw	r20, r28
    4bfc:	46 5e       	subi	r20, 0xE6	; 230
    4bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    4c00:	68 8d       	ldd	r22, Y+24	; 0x18
    4c02:	79 8d       	ldd	r23, Y+25	; 0x19
    4c04:	ce 01       	movw	r24, r28
    4c06:	01 96       	adiw	r24, 0x01	; 1
    4c08:	28 d0       	rcall	.+80     	; 0x4c5a <vfprintf>
    4c0a:	ef 81       	ldd	r30, Y+7	; 0x07
    4c0c:	f8 85       	ldd	r31, Y+8	; 0x08
    4c0e:	e0 0f       	add	r30, r16
    4c10:	f1 1f       	adc	r31, r17
    4c12:	10 82       	st	Z, r1
    4c14:	2e 96       	adiw	r28, 0x0e	; 14
    4c16:	cd bf       	out	0x3d, r28	; 61
    4c18:	de bf       	out	0x3e, r29	; 62
    4c1a:	df 91       	pop	r29
    4c1c:	cf 91       	pop	r28
    4c1e:	1f 91       	pop	r17
    4c20:	0f 91       	pop	r16
    4c22:	08 95       	ret

00004c24 <sscanf>:
    4c24:	cf 93       	push	r28
    4c26:	df 93       	push	r29
    4c28:	cd b7       	in	r28, 0x3d	; 61
    4c2a:	de b7       	in	r29, 0x3e	; 62
    4c2c:	2e 97       	sbiw	r28, 0x0e	; 14
    4c2e:	cd bf       	out	0x3d, r28	; 61
    4c30:	de bf       	out	0x3e, r29	; 62
    4c32:	85 e0       	ldi	r24, 0x05	; 5
    4c34:	8c 83       	std	Y+4, r24	; 0x04
    4c36:	8c 89       	ldd	r24, Y+20	; 0x14
    4c38:	9d 89       	ldd	r25, Y+21	; 0x15
    4c3a:	89 83       	std	Y+1, r24	; 0x01
    4c3c:	9a 83       	std	Y+2, r25	; 0x02
    4c3e:	ae 01       	movw	r20, r28
    4c40:	48 5e       	subi	r20, 0xE8	; 232
    4c42:	5f 4f       	sbci	r21, 0xFF	; 255
    4c44:	6e 89       	ldd	r22, Y+22	; 0x16
    4c46:	7f 89       	ldd	r23, Y+23	; 0x17
    4c48:	ce 01       	movw	r24, r28
    4c4a:	01 96       	adiw	r24, 0x01	; 1
    4c4c:	a9 d3       	rcall	.+1874   	; 0x53a0 <vfscanf>
    4c4e:	2e 96       	adiw	r28, 0x0e	; 14
    4c50:	cd bf       	out	0x3d, r28	; 61
    4c52:	de bf       	out	0x3e, r29	; 62
    4c54:	df 91       	pop	r29
    4c56:	cf 91       	pop	r28
    4c58:	08 95       	ret

00004c5a <vfprintf>:
    4c5a:	2f 92       	push	r2
    4c5c:	3f 92       	push	r3
    4c5e:	4f 92       	push	r4
    4c60:	5f 92       	push	r5
    4c62:	6f 92       	push	r6
    4c64:	7f 92       	push	r7
    4c66:	8f 92       	push	r8
    4c68:	9f 92       	push	r9
    4c6a:	af 92       	push	r10
    4c6c:	bf 92       	push	r11
    4c6e:	cf 92       	push	r12
    4c70:	df 92       	push	r13
    4c72:	ef 92       	push	r14
    4c74:	ff 92       	push	r15
    4c76:	0f 93       	push	r16
    4c78:	1f 93       	push	r17
    4c7a:	cf 93       	push	r28
    4c7c:	df 93       	push	r29
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
    4c82:	2b 97       	sbiw	r28, 0x0b	; 11
    4c84:	cd bf       	out	0x3d, r28	; 61
    4c86:	de bf       	out	0x3e, r29	; 62
    4c88:	6c 01       	movw	r12, r24
    4c8a:	7b 01       	movw	r14, r22
    4c8c:	8a 01       	movw	r16, r20
    4c8e:	fc 01       	movw	r30, r24
    4c90:	16 82       	std	Z+6, r1	; 0x06
    4c92:	17 82       	std	Z+7, r1	; 0x07
    4c94:	83 81       	ldd	r24, Z+3	; 0x03
    4c96:	81 ff       	sbrs	r24, 1
    4c98:	bf c1       	rjmp	.+894    	; 0x5018 <vfprintf+0x3be>
    4c9a:	ce 01       	movw	r24, r28
    4c9c:	01 96       	adiw	r24, 0x01	; 1
    4c9e:	3c 01       	movw	r6, r24
    4ca0:	f6 01       	movw	r30, r12
    4ca2:	93 81       	ldd	r25, Z+3	; 0x03
    4ca4:	f7 01       	movw	r30, r14
    4ca6:	93 fd       	sbrc	r25, 3
    4ca8:	85 91       	lpm	r24, Z+
    4caa:	93 ff       	sbrs	r25, 3
    4cac:	81 91       	ld	r24, Z+
    4cae:	7f 01       	movw	r14, r30
    4cb0:	88 23       	and	r24, r24
    4cb2:	09 f4       	brne	.+2      	; 0x4cb6 <vfprintf+0x5c>
    4cb4:	ad c1       	rjmp	.+858    	; 0x5010 <vfprintf+0x3b6>
    4cb6:	85 32       	cpi	r24, 0x25	; 37
    4cb8:	39 f4       	brne	.+14     	; 0x4cc8 <vfprintf+0x6e>
    4cba:	93 fd       	sbrc	r25, 3
    4cbc:	85 91       	lpm	r24, Z+
    4cbe:	93 ff       	sbrs	r25, 3
    4cc0:	81 91       	ld	r24, Z+
    4cc2:	7f 01       	movw	r14, r30
    4cc4:	85 32       	cpi	r24, 0x25	; 37
    4cc6:	21 f4       	brne	.+8      	; 0x4cd0 <vfprintf+0x76>
    4cc8:	b6 01       	movw	r22, r12
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	29 d6       	rcall	.+3154   	; 0x5920 <fputc>
    4cce:	e8 cf       	rjmp	.-48     	; 0x4ca0 <vfprintf+0x46>
    4cd0:	91 2c       	mov	r9, r1
    4cd2:	21 2c       	mov	r2, r1
    4cd4:	31 2c       	mov	r3, r1
    4cd6:	ff e1       	ldi	r31, 0x1F	; 31
    4cd8:	f3 15       	cp	r31, r3
    4cda:	d8 f0       	brcs	.+54     	; 0x4d12 <vfprintf+0xb8>
    4cdc:	8b 32       	cpi	r24, 0x2B	; 43
    4cde:	79 f0       	breq	.+30     	; 0x4cfe <vfprintf+0xa4>
    4ce0:	38 f4       	brcc	.+14     	; 0x4cf0 <vfprintf+0x96>
    4ce2:	80 32       	cpi	r24, 0x20	; 32
    4ce4:	79 f0       	breq	.+30     	; 0x4d04 <vfprintf+0xaa>
    4ce6:	83 32       	cpi	r24, 0x23	; 35
    4ce8:	a1 f4       	brne	.+40     	; 0x4d12 <vfprintf+0xb8>
    4cea:	23 2d       	mov	r18, r3
    4cec:	20 61       	ori	r18, 0x10	; 16
    4cee:	1d c0       	rjmp	.+58     	; 0x4d2a <vfprintf+0xd0>
    4cf0:	8d 32       	cpi	r24, 0x2D	; 45
    4cf2:	61 f0       	breq	.+24     	; 0x4d0c <vfprintf+0xb2>
    4cf4:	80 33       	cpi	r24, 0x30	; 48
    4cf6:	69 f4       	brne	.+26     	; 0x4d12 <vfprintf+0xb8>
    4cf8:	23 2d       	mov	r18, r3
    4cfa:	21 60       	ori	r18, 0x01	; 1
    4cfc:	16 c0       	rjmp	.+44     	; 0x4d2a <vfprintf+0xd0>
    4cfe:	83 2d       	mov	r24, r3
    4d00:	82 60       	ori	r24, 0x02	; 2
    4d02:	38 2e       	mov	r3, r24
    4d04:	e3 2d       	mov	r30, r3
    4d06:	e4 60       	ori	r30, 0x04	; 4
    4d08:	3e 2e       	mov	r3, r30
    4d0a:	2a c0       	rjmp	.+84     	; 0x4d60 <vfprintf+0x106>
    4d0c:	f3 2d       	mov	r31, r3
    4d0e:	f8 60       	ori	r31, 0x08	; 8
    4d10:	1d c0       	rjmp	.+58     	; 0x4d4c <vfprintf+0xf2>
    4d12:	37 fc       	sbrc	r3, 7
    4d14:	2d c0       	rjmp	.+90     	; 0x4d70 <vfprintf+0x116>
    4d16:	20 ed       	ldi	r18, 0xD0	; 208
    4d18:	28 0f       	add	r18, r24
    4d1a:	2a 30       	cpi	r18, 0x0A	; 10
    4d1c:	40 f0       	brcs	.+16     	; 0x4d2e <vfprintf+0xd4>
    4d1e:	8e 32       	cpi	r24, 0x2E	; 46
    4d20:	b9 f4       	brne	.+46     	; 0x4d50 <vfprintf+0xf6>
    4d22:	36 fc       	sbrc	r3, 6
    4d24:	75 c1       	rjmp	.+746    	; 0x5010 <vfprintf+0x3b6>
    4d26:	23 2d       	mov	r18, r3
    4d28:	20 64       	ori	r18, 0x40	; 64
    4d2a:	32 2e       	mov	r3, r18
    4d2c:	19 c0       	rjmp	.+50     	; 0x4d60 <vfprintf+0x106>
    4d2e:	36 fe       	sbrs	r3, 6
    4d30:	06 c0       	rjmp	.+12     	; 0x4d3e <vfprintf+0xe4>
    4d32:	8a e0       	ldi	r24, 0x0A	; 10
    4d34:	98 9e       	mul	r9, r24
    4d36:	20 0d       	add	r18, r0
    4d38:	11 24       	eor	r1, r1
    4d3a:	92 2e       	mov	r9, r18
    4d3c:	11 c0       	rjmp	.+34     	; 0x4d60 <vfprintf+0x106>
    4d3e:	ea e0       	ldi	r30, 0x0A	; 10
    4d40:	2e 9e       	mul	r2, r30
    4d42:	20 0d       	add	r18, r0
    4d44:	11 24       	eor	r1, r1
    4d46:	22 2e       	mov	r2, r18
    4d48:	f3 2d       	mov	r31, r3
    4d4a:	f0 62       	ori	r31, 0x20	; 32
    4d4c:	3f 2e       	mov	r3, r31
    4d4e:	08 c0       	rjmp	.+16     	; 0x4d60 <vfprintf+0x106>
    4d50:	8c 36       	cpi	r24, 0x6C	; 108
    4d52:	21 f4       	brne	.+8      	; 0x4d5c <vfprintf+0x102>
    4d54:	83 2d       	mov	r24, r3
    4d56:	80 68       	ori	r24, 0x80	; 128
    4d58:	38 2e       	mov	r3, r24
    4d5a:	02 c0       	rjmp	.+4      	; 0x4d60 <vfprintf+0x106>
    4d5c:	88 36       	cpi	r24, 0x68	; 104
    4d5e:	41 f4       	brne	.+16     	; 0x4d70 <vfprintf+0x116>
    4d60:	f7 01       	movw	r30, r14
    4d62:	93 fd       	sbrc	r25, 3
    4d64:	85 91       	lpm	r24, Z+
    4d66:	93 ff       	sbrs	r25, 3
    4d68:	81 91       	ld	r24, Z+
    4d6a:	7f 01       	movw	r14, r30
    4d6c:	81 11       	cpse	r24, r1
    4d6e:	b3 cf       	rjmp	.-154    	; 0x4cd6 <vfprintf+0x7c>
    4d70:	98 2f       	mov	r25, r24
    4d72:	9f 7d       	andi	r25, 0xDF	; 223
    4d74:	95 54       	subi	r25, 0x45	; 69
    4d76:	93 30       	cpi	r25, 0x03	; 3
    4d78:	28 f4       	brcc	.+10     	; 0x4d84 <vfprintf+0x12a>
    4d7a:	0c 5f       	subi	r16, 0xFC	; 252
    4d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d7e:	9f e3       	ldi	r25, 0x3F	; 63
    4d80:	99 83       	std	Y+1, r25	; 0x01
    4d82:	0d c0       	rjmp	.+26     	; 0x4d9e <vfprintf+0x144>
    4d84:	83 36       	cpi	r24, 0x63	; 99
    4d86:	31 f0       	breq	.+12     	; 0x4d94 <vfprintf+0x13a>
    4d88:	83 37       	cpi	r24, 0x73	; 115
    4d8a:	71 f0       	breq	.+28     	; 0x4da8 <vfprintf+0x14e>
    4d8c:	83 35       	cpi	r24, 0x53	; 83
    4d8e:	09 f0       	breq	.+2      	; 0x4d92 <vfprintf+0x138>
    4d90:	55 c0       	rjmp	.+170    	; 0x4e3c <vfprintf+0x1e2>
    4d92:	20 c0       	rjmp	.+64     	; 0x4dd4 <vfprintf+0x17a>
    4d94:	f8 01       	movw	r30, r16
    4d96:	80 81       	ld	r24, Z
    4d98:	89 83       	std	Y+1, r24	; 0x01
    4d9a:	0e 5f       	subi	r16, 0xFE	; 254
    4d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d9e:	88 24       	eor	r8, r8
    4da0:	83 94       	inc	r8
    4da2:	91 2c       	mov	r9, r1
    4da4:	53 01       	movw	r10, r6
    4da6:	12 c0       	rjmp	.+36     	; 0x4dcc <vfprintf+0x172>
    4da8:	28 01       	movw	r4, r16
    4daa:	f2 e0       	ldi	r31, 0x02	; 2
    4dac:	4f 0e       	add	r4, r31
    4dae:	51 1c       	adc	r5, r1
    4db0:	f8 01       	movw	r30, r16
    4db2:	a0 80       	ld	r10, Z
    4db4:	b1 80       	ldd	r11, Z+1	; 0x01
    4db6:	36 fe       	sbrs	r3, 6
    4db8:	03 c0       	rjmp	.+6      	; 0x4dc0 <vfprintf+0x166>
    4dba:	69 2d       	mov	r22, r9
    4dbc:	70 e0       	ldi	r23, 0x00	; 0
    4dbe:	02 c0       	rjmp	.+4      	; 0x4dc4 <vfprintf+0x16a>
    4dc0:	6f ef       	ldi	r22, 0xFF	; 255
    4dc2:	7f ef       	ldi	r23, 0xFF	; 255
    4dc4:	c5 01       	movw	r24, r10
    4dc6:	63 d5       	rcall	.+2758   	; 0x588e <strnlen>
    4dc8:	4c 01       	movw	r8, r24
    4dca:	82 01       	movw	r16, r4
    4dcc:	f3 2d       	mov	r31, r3
    4dce:	ff 77       	andi	r31, 0x7F	; 127
    4dd0:	3f 2e       	mov	r3, r31
    4dd2:	15 c0       	rjmp	.+42     	; 0x4dfe <vfprintf+0x1a4>
    4dd4:	28 01       	movw	r4, r16
    4dd6:	22 e0       	ldi	r18, 0x02	; 2
    4dd8:	42 0e       	add	r4, r18
    4dda:	51 1c       	adc	r5, r1
    4ddc:	f8 01       	movw	r30, r16
    4dde:	a0 80       	ld	r10, Z
    4de0:	b1 80       	ldd	r11, Z+1	; 0x01
    4de2:	36 fe       	sbrs	r3, 6
    4de4:	03 c0       	rjmp	.+6      	; 0x4dec <vfprintf+0x192>
    4de6:	69 2d       	mov	r22, r9
    4de8:	70 e0       	ldi	r23, 0x00	; 0
    4dea:	02 c0       	rjmp	.+4      	; 0x4df0 <vfprintf+0x196>
    4dec:	6f ef       	ldi	r22, 0xFF	; 255
    4dee:	7f ef       	ldi	r23, 0xFF	; 255
    4df0:	c5 01       	movw	r24, r10
    4df2:	3b d5       	rcall	.+2678   	; 0x586a <strnlen_P>
    4df4:	4c 01       	movw	r8, r24
    4df6:	f3 2d       	mov	r31, r3
    4df8:	f0 68       	ori	r31, 0x80	; 128
    4dfa:	3f 2e       	mov	r3, r31
    4dfc:	82 01       	movw	r16, r4
    4dfe:	33 fc       	sbrc	r3, 3
    4e00:	19 c0       	rjmp	.+50     	; 0x4e34 <vfprintf+0x1da>
    4e02:	82 2d       	mov	r24, r2
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	88 16       	cp	r8, r24
    4e08:	99 06       	cpc	r9, r25
    4e0a:	a0 f4       	brcc	.+40     	; 0x4e34 <vfprintf+0x1da>
    4e0c:	b6 01       	movw	r22, r12
    4e0e:	80 e2       	ldi	r24, 0x20	; 32
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	86 d5       	rcall	.+2828   	; 0x5920 <fputc>
    4e14:	2a 94       	dec	r2
    4e16:	f5 cf       	rjmp	.-22     	; 0x4e02 <vfprintf+0x1a8>
    4e18:	f5 01       	movw	r30, r10
    4e1a:	37 fc       	sbrc	r3, 7
    4e1c:	85 91       	lpm	r24, Z+
    4e1e:	37 fe       	sbrs	r3, 7
    4e20:	81 91       	ld	r24, Z+
    4e22:	5f 01       	movw	r10, r30
    4e24:	b6 01       	movw	r22, r12
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	7b d5       	rcall	.+2806   	; 0x5920 <fputc>
    4e2a:	21 10       	cpse	r2, r1
    4e2c:	2a 94       	dec	r2
    4e2e:	21 e0       	ldi	r18, 0x01	; 1
    4e30:	82 1a       	sub	r8, r18
    4e32:	91 08       	sbc	r9, r1
    4e34:	81 14       	cp	r8, r1
    4e36:	91 04       	cpc	r9, r1
    4e38:	79 f7       	brne	.-34     	; 0x4e18 <vfprintf+0x1be>
    4e3a:	e1 c0       	rjmp	.+450    	; 0x4ffe <vfprintf+0x3a4>
    4e3c:	84 36       	cpi	r24, 0x64	; 100
    4e3e:	11 f0       	breq	.+4      	; 0x4e44 <vfprintf+0x1ea>
    4e40:	89 36       	cpi	r24, 0x69	; 105
    4e42:	39 f5       	brne	.+78     	; 0x4e92 <vfprintf+0x238>
    4e44:	f8 01       	movw	r30, r16
    4e46:	37 fe       	sbrs	r3, 7
    4e48:	07 c0       	rjmp	.+14     	; 0x4e58 <vfprintf+0x1fe>
    4e4a:	60 81       	ld	r22, Z
    4e4c:	71 81       	ldd	r23, Z+1	; 0x01
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	0c 5f       	subi	r16, 0xFC	; 252
    4e54:	1f 4f       	sbci	r17, 0xFF	; 255
    4e56:	08 c0       	rjmp	.+16     	; 0x4e68 <vfprintf+0x20e>
    4e58:	60 81       	ld	r22, Z
    4e5a:	71 81       	ldd	r23, Z+1	; 0x01
    4e5c:	07 2e       	mov	r0, r23
    4e5e:	00 0c       	add	r0, r0
    4e60:	88 0b       	sbc	r24, r24
    4e62:	99 0b       	sbc	r25, r25
    4e64:	0e 5f       	subi	r16, 0xFE	; 254
    4e66:	1f 4f       	sbci	r17, 0xFF	; 255
    4e68:	f3 2d       	mov	r31, r3
    4e6a:	ff 76       	andi	r31, 0x6F	; 111
    4e6c:	3f 2e       	mov	r3, r31
    4e6e:	97 ff       	sbrs	r25, 7
    4e70:	09 c0       	rjmp	.+18     	; 0x4e84 <vfprintf+0x22a>
    4e72:	90 95       	com	r25
    4e74:	80 95       	com	r24
    4e76:	70 95       	com	r23
    4e78:	61 95       	neg	r22
    4e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e7c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e80:	f0 68       	ori	r31, 0x80	; 128
    4e82:	3f 2e       	mov	r3, r31
    4e84:	2a e0       	ldi	r18, 0x0A	; 10
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	a3 01       	movw	r20, r6
    4e8a:	9f d5       	rcall	.+2878   	; 0x59ca <__ultoa_invert>
    4e8c:	88 2e       	mov	r8, r24
    4e8e:	86 18       	sub	r8, r6
    4e90:	44 c0       	rjmp	.+136    	; 0x4f1a <vfprintf+0x2c0>
    4e92:	85 37       	cpi	r24, 0x75	; 117
    4e94:	31 f4       	brne	.+12     	; 0x4ea2 <vfprintf+0x248>
    4e96:	23 2d       	mov	r18, r3
    4e98:	2f 7e       	andi	r18, 0xEF	; 239
    4e9a:	b2 2e       	mov	r11, r18
    4e9c:	2a e0       	ldi	r18, 0x0A	; 10
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	25 c0       	rjmp	.+74     	; 0x4eec <vfprintf+0x292>
    4ea2:	93 2d       	mov	r25, r3
    4ea4:	99 7f       	andi	r25, 0xF9	; 249
    4ea6:	b9 2e       	mov	r11, r25
    4ea8:	8f 36       	cpi	r24, 0x6F	; 111
    4eaa:	c1 f0       	breq	.+48     	; 0x4edc <vfprintf+0x282>
    4eac:	18 f4       	brcc	.+6      	; 0x4eb4 <vfprintf+0x25a>
    4eae:	88 35       	cpi	r24, 0x58	; 88
    4eb0:	79 f0       	breq	.+30     	; 0x4ed0 <vfprintf+0x276>
    4eb2:	ae c0       	rjmp	.+348    	; 0x5010 <vfprintf+0x3b6>
    4eb4:	80 37       	cpi	r24, 0x70	; 112
    4eb6:	19 f0       	breq	.+6      	; 0x4ebe <vfprintf+0x264>
    4eb8:	88 37       	cpi	r24, 0x78	; 120
    4eba:	21 f0       	breq	.+8      	; 0x4ec4 <vfprintf+0x26a>
    4ebc:	a9 c0       	rjmp	.+338    	; 0x5010 <vfprintf+0x3b6>
    4ebe:	e9 2f       	mov	r30, r25
    4ec0:	e0 61       	ori	r30, 0x10	; 16
    4ec2:	be 2e       	mov	r11, r30
    4ec4:	b4 fe       	sbrs	r11, 4
    4ec6:	0d c0       	rjmp	.+26     	; 0x4ee2 <vfprintf+0x288>
    4ec8:	fb 2d       	mov	r31, r11
    4eca:	f4 60       	ori	r31, 0x04	; 4
    4ecc:	bf 2e       	mov	r11, r31
    4ece:	09 c0       	rjmp	.+18     	; 0x4ee2 <vfprintf+0x288>
    4ed0:	34 fe       	sbrs	r3, 4
    4ed2:	0a c0       	rjmp	.+20     	; 0x4ee8 <vfprintf+0x28e>
    4ed4:	29 2f       	mov	r18, r25
    4ed6:	26 60       	ori	r18, 0x06	; 6
    4ed8:	b2 2e       	mov	r11, r18
    4eda:	06 c0       	rjmp	.+12     	; 0x4ee8 <vfprintf+0x28e>
    4edc:	28 e0       	ldi	r18, 0x08	; 8
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	05 c0       	rjmp	.+10     	; 0x4eec <vfprintf+0x292>
    4ee2:	20 e1       	ldi	r18, 0x10	; 16
    4ee4:	30 e0       	ldi	r19, 0x00	; 0
    4ee6:	02 c0       	rjmp	.+4      	; 0x4eec <vfprintf+0x292>
    4ee8:	20 e1       	ldi	r18, 0x10	; 16
    4eea:	32 e0       	ldi	r19, 0x02	; 2
    4eec:	f8 01       	movw	r30, r16
    4eee:	b7 fe       	sbrs	r11, 7
    4ef0:	07 c0       	rjmp	.+14     	; 0x4f00 <vfprintf+0x2a6>
    4ef2:	60 81       	ld	r22, Z
    4ef4:	71 81       	ldd	r23, Z+1	; 0x01
    4ef6:	82 81       	ldd	r24, Z+2	; 0x02
    4ef8:	93 81       	ldd	r25, Z+3	; 0x03
    4efa:	0c 5f       	subi	r16, 0xFC	; 252
    4efc:	1f 4f       	sbci	r17, 0xFF	; 255
    4efe:	06 c0       	rjmp	.+12     	; 0x4f0c <vfprintf+0x2b2>
    4f00:	60 81       	ld	r22, Z
    4f02:	71 81       	ldd	r23, Z+1	; 0x01
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 5f       	subi	r16, 0xFE	; 254
    4f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f0c:	a3 01       	movw	r20, r6
    4f0e:	5d d5       	rcall	.+2746   	; 0x59ca <__ultoa_invert>
    4f10:	88 2e       	mov	r8, r24
    4f12:	86 18       	sub	r8, r6
    4f14:	fb 2d       	mov	r31, r11
    4f16:	ff 77       	andi	r31, 0x7F	; 127
    4f18:	3f 2e       	mov	r3, r31
    4f1a:	36 fe       	sbrs	r3, 6
    4f1c:	0d c0       	rjmp	.+26     	; 0x4f38 <vfprintf+0x2de>
    4f1e:	23 2d       	mov	r18, r3
    4f20:	2e 7f       	andi	r18, 0xFE	; 254
    4f22:	a2 2e       	mov	r10, r18
    4f24:	89 14       	cp	r8, r9
    4f26:	58 f4       	brcc	.+22     	; 0x4f3e <vfprintf+0x2e4>
    4f28:	34 fe       	sbrs	r3, 4
    4f2a:	0b c0       	rjmp	.+22     	; 0x4f42 <vfprintf+0x2e8>
    4f2c:	32 fc       	sbrc	r3, 2
    4f2e:	09 c0       	rjmp	.+18     	; 0x4f42 <vfprintf+0x2e8>
    4f30:	83 2d       	mov	r24, r3
    4f32:	8e 7e       	andi	r24, 0xEE	; 238
    4f34:	a8 2e       	mov	r10, r24
    4f36:	05 c0       	rjmp	.+10     	; 0x4f42 <vfprintf+0x2e8>
    4f38:	b8 2c       	mov	r11, r8
    4f3a:	a3 2c       	mov	r10, r3
    4f3c:	03 c0       	rjmp	.+6      	; 0x4f44 <vfprintf+0x2ea>
    4f3e:	b8 2c       	mov	r11, r8
    4f40:	01 c0       	rjmp	.+2      	; 0x4f44 <vfprintf+0x2ea>
    4f42:	b9 2c       	mov	r11, r9
    4f44:	a4 fe       	sbrs	r10, 4
    4f46:	0f c0       	rjmp	.+30     	; 0x4f66 <vfprintf+0x30c>
    4f48:	fe 01       	movw	r30, r28
    4f4a:	e8 0d       	add	r30, r8
    4f4c:	f1 1d       	adc	r31, r1
    4f4e:	80 81       	ld	r24, Z
    4f50:	80 33       	cpi	r24, 0x30	; 48
    4f52:	21 f4       	brne	.+8      	; 0x4f5c <vfprintf+0x302>
    4f54:	9a 2d       	mov	r25, r10
    4f56:	99 7e       	andi	r25, 0xE9	; 233
    4f58:	a9 2e       	mov	r10, r25
    4f5a:	09 c0       	rjmp	.+18     	; 0x4f6e <vfprintf+0x314>
    4f5c:	a2 fe       	sbrs	r10, 2
    4f5e:	06 c0       	rjmp	.+12     	; 0x4f6c <vfprintf+0x312>
    4f60:	b3 94       	inc	r11
    4f62:	b3 94       	inc	r11
    4f64:	04 c0       	rjmp	.+8      	; 0x4f6e <vfprintf+0x314>
    4f66:	8a 2d       	mov	r24, r10
    4f68:	86 78       	andi	r24, 0x86	; 134
    4f6a:	09 f0       	breq	.+2      	; 0x4f6e <vfprintf+0x314>
    4f6c:	b3 94       	inc	r11
    4f6e:	a3 fc       	sbrc	r10, 3
    4f70:	10 c0       	rjmp	.+32     	; 0x4f92 <vfprintf+0x338>
    4f72:	a0 fe       	sbrs	r10, 0
    4f74:	06 c0       	rjmp	.+12     	; 0x4f82 <vfprintf+0x328>
    4f76:	b2 14       	cp	r11, r2
    4f78:	80 f4       	brcc	.+32     	; 0x4f9a <vfprintf+0x340>
    4f7a:	28 0c       	add	r2, r8
    4f7c:	92 2c       	mov	r9, r2
    4f7e:	9b 18       	sub	r9, r11
    4f80:	0d c0       	rjmp	.+26     	; 0x4f9c <vfprintf+0x342>
    4f82:	b2 14       	cp	r11, r2
    4f84:	58 f4       	brcc	.+22     	; 0x4f9c <vfprintf+0x342>
    4f86:	b6 01       	movw	r22, r12
    4f88:	80 e2       	ldi	r24, 0x20	; 32
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	c9 d4       	rcall	.+2450   	; 0x5920 <fputc>
    4f8e:	b3 94       	inc	r11
    4f90:	f8 cf       	rjmp	.-16     	; 0x4f82 <vfprintf+0x328>
    4f92:	b2 14       	cp	r11, r2
    4f94:	18 f4       	brcc	.+6      	; 0x4f9c <vfprintf+0x342>
    4f96:	2b 18       	sub	r2, r11
    4f98:	02 c0       	rjmp	.+4      	; 0x4f9e <vfprintf+0x344>
    4f9a:	98 2c       	mov	r9, r8
    4f9c:	21 2c       	mov	r2, r1
    4f9e:	a4 fe       	sbrs	r10, 4
    4fa0:	0f c0       	rjmp	.+30     	; 0x4fc0 <vfprintf+0x366>
    4fa2:	b6 01       	movw	r22, r12
    4fa4:	80 e3       	ldi	r24, 0x30	; 48
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	bb d4       	rcall	.+2422   	; 0x5920 <fputc>
    4faa:	a2 fe       	sbrs	r10, 2
    4fac:	16 c0       	rjmp	.+44     	; 0x4fda <vfprintf+0x380>
    4fae:	a1 fc       	sbrc	r10, 1
    4fb0:	03 c0       	rjmp	.+6      	; 0x4fb8 <vfprintf+0x35e>
    4fb2:	88 e7       	ldi	r24, 0x78	; 120
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	02 c0       	rjmp	.+4      	; 0x4fbc <vfprintf+0x362>
    4fb8:	88 e5       	ldi	r24, 0x58	; 88
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	b6 01       	movw	r22, r12
    4fbe:	0c c0       	rjmp	.+24     	; 0x4fd8 <vfprintf+0x37e>
    4fc0:	8a 2d       	mov	r24, r10
    4fc2:	86 78       	andi	r24, 0x86	; 134
    4fc4:	51 f0       	breq	.+20     	; 0x4fda <vfprintf+0x380>
    4fc6:	a1 fe       	sbrs	r10, 1
    4fc8:	02 c0       	rjmp	.+4      	; 0x4fce <vfprintf+0x374>
    4fca:	8b e2       	ldi	r24, 0x2B	; 43
    4fcc:	01 c0       	rjmp	.+2      	; 0x4fd0 <vfprintf+0x376>
    4fce:	80 e2       	ldi	r24, 0x20	; 32
    4fd0:	a7 fc       	sbrc	r10, 7
    4fd2:	8d e2       	ldi	r24, 0x2D	; 45
    4fd4:	b6 01       	movw	r22, r12
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	a3 d4       	rcall	.+2374   	; 0x5920 <fputc>
    4fda:	89 14       	cp	r8, r9
    4fdc:	30 f4       	brcc	.+12     	; 0x4fea <vfprintf+0x390>
    4fde:	b6 01       	movw	r22, r12
    4fe0:	80 e3       	ldi	r24, 0x30	; 48
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	9d d4       	rcall	.+2362   	; 0x5920 <fputc>
    4fe6:	9a 94       	dec	r9
    4fe8:	f8 cf       	rjmp	.-16     	; 0x4fda <vfprintf+0x380>
    4fea:	8a 94       	dec	r8
    4fec:	f3 01       	movw	r30, r6
    4fee:	e8 0d       	add	r30, r8
    4ff0:	f1 1d       	adc	r31, r1
    4ff2:	80 81       	ld	r24, Z
    4ff4:	b6 01       	movw	r22, r12
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	93 d4       	rcall	.+2342   	; 0x5920 <fputc>
    4ffa:	81 10       	cpse	r8, r1
    4ffc:	f6 cf       	rjmp	.-20     	; 0x4fea <vfprintf+0x390>
    4ffe:	22 20       	and	r2, r2
    5000:	09 f4       	brne	.+2      	; 0x5004 <vfprintf+0x3aa>
    5002:	4e ce       	rjmp	.-868    	; 0x4ca0 <vfprintf+0x46>
    5004:	b6 01       	movw	r22, r12
    5006:	80 e2       	ldi	r24, 0x20	; 32
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	8a d4       	rcall	.+2324   	; 0x5920 <fputc>
    500c:	2a 94       	dec	r2
    500e:	f7 cf       	rjmp	.-18     	; 0x4ffe <vfprintf+0x3a4>
    5010:	f6 01       	movw	r30, r12
    5012:	86 81       	ldd	r24, Z+6	; 0x06
    5014:	97 81       	ldd	r25, Z+7	; 0x07
    5016:	02 c0       	rjmp	.+4      	; 0x501c <vfprintf+0x3c2>
    5018:	8f ef       	ldi	r24, 0xFF	; 255
    501a:	9f ef       	ldi	r25, 0xFF	; 255
    501c:	2b 96       	adiw	r28, 0x0b	; 11
    501e:	cd bf       	out	0x3d, r28	; 61
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	df 91       	pop	r29
    5024:	cf 91       	pop	r28
    5026:	1f 91       	pop	r17
    5028:	0f 91       	pop	r16
    502a:	ff 90       	pop	r15
    502c:	ef 90       	pop	r14
    502e:	df 90       	pop	r13
    5030:	cf 90       	pop	r12
    5032:	bf 90       	pop	r11
    5034:	af 90       	pop	r10
    5036:	9f 90       	pop	r9
    5038:	8f 90       	pop	r8
    503a:	7f 90       	pop	r7
    503c:	6f 90       	pop	r6
    503e:	5f 90       	pop	r5
    5040:	4f 90       	pop	r4
    5042:	3f 90       	pop	r3
    5044:	2f 90       	pop	r2
    5046:	08 95       	ret

00005048 <putval>:
    5048:	20 fd       	sbrc	r18, 0
    504a:	09 c0       	rjmp	.+18     	; 0x505e <putval+0x16>
    504c:	fc 01       	movw	r30, r24
    504e:	23 fd       	sbrc	r18, 3
    5050:	05 c0       	rjmp	.+10     	; 0x505c <putval+0x14>
    5052:	22 ff       	sbrs	r18, 2
    5054:	02 c0       	rjmp	.+4      	; 0x505a <putval+0x12>
    5056:	73 83       	std	Z+3, r23	; 0x03
    5058:	62 83       	std	Z+2, r22	; 0x02
    505a:	51 83       	std	Z+1, r21	; 0x01
    505c:	40 83       	st	Z, r20
    505e:	08 95       	ret

00005060 <mulacc>:
    5060:	44 fd       	sbrc	r20, 4
    5062:	17 c0       	rjmp	.+46     	; 0x5092 <mulacc+0x32>
    5064:	46 fd       	sbrc	r20, 6
    5066:	17 c0       	rjmp	.+46     	; 0x5096 <mulacc+0x36>
    5068:	ab 01       	movw	r20, r22
    506a:	bc 01       	movw	r22, r24
    506c:	da 01       	movw	r26, r20
    506e:	fb 01       	movw	r30, r22
    5070:	aa 0f       	add	r26, r26
    5072:	bb 1f       	adc	r27, r27
    5074:	ee 1f       	adc	r30, r30
    5076:	ff 1f       	adc	r31, r31
    5078:	10 94       	com	r1
    507a:	d1 f7       	brne	.-12     	; 0x5070 <mulacc+0x10>
    507c:	4a 0f       	add	r20, r26
    507e:	5b 1f       	adc	r21, r27
    5080:	6e 1f       	adc	r22, r30
    5082:	7f 1f       	adc	r23, r31
    5084:	cb 01       	movw	r24, r22
    5086:	ba 01       	movw	r22, r20
    5088:	66 0f       	add	r22, r22
    508a:	77 1f       	adc	r23, r23
    508c:	88 1f       	adc	r24, r24
    508e:	99 1f       	adc	r25, r25
    5090:	09 c0       	rjmp	.+18     	; 0x50a4 <mulacc+0x44>
    5092:	33 e0       	ldi	r19, 0x03	; 3
    5094:	01 c0       	rjmp	.+2      	; 0x5098 <mulacc+0x38>
    5096:	34 e0       	ldi	r19, 0x04	; 4
    5098:	66 0f       	add	r22, r22
    509a:	77 1f       	adc	r23, r23
    509c:	88 1f       	adc	r24, r24
    509e:	99 1f       	adc	r25, r25
    50a0:	31 50       	subi	r19, 0x01	; 1
    50a2:	d1 f7       	brne	.-12     	; 0x5098 <mulacc+0x38>
    50a4:	62 0f       	add	r22, r18
    50a6:	71 1d       	adc	r23, r1
    50a8:	81 1d       	adc	r24, r1
    50aa:	91 1d       	adc	r25, r1
    50ac:	08 95       	ret

000050ae <skip_spaces>:
    50ae:	0f 93       	push	r16
    50b0:	1f 93       	push	r17
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	8c 01       	movw	r16, r24
    50b8:	c8 01       	movw	r24, r16
    50ba:	f4 d3       	rcall	.+2024   	; 0x58a4 <fgetc>
    50bc:	ec 01       	movw	r28, r24
    50be:	97 fd       	sbrc	r25, 7
    50c0:	06 c0       	rjmp	.+12     	; 0x50ce <skip_spaces+0x20>
    50c2:	c0 d3       	rcall	.+1920   	; 0x5844 <isspace>
    50c4:	89 2b       	or	r24, r25
    50c6:	c1 f7       	brne	.-16     	; 0x50b8 <skip_spaces+0xa>
    50c8:	b8 01       	movw	r22, r16
    50ca:	ce 01       	movw	r24, r28
    50cc:	65 d4       	rcall	.+2250   	; 0x5998 <ungetc>
    50ce:	ce 01       	movw	r24, r28
    50d0:	df 91       	pop	r29
    50d2:	cf 91       	pop	r28
    50d4:	1f 91       	pop	r17
    50d6:	0f 91       	pop	r16
    50d8:	08 95       	ret

000050da <conv_int>:
    50da:	8f 92       	push	r8
    50dc:	9f 92       	push	r9
    50de:	af 92       	push	r10
    50e0:	bf 92       	push	r11
    50e2:	ef 92       	push	r14
    50e4:	ff 92       	push	r15
    50e6:	0f 93       	push	r16
    50e8:	1f 93       	push	r17
    50ea:	cf 93       	push	r28
    50ec:	df 93       	push	r29
    50ee:	8c 01       	movw	r16, r24
    50f0:	d6 2f       	mov	r29, r22
    50f2:	7a 01       	movw	r14, r20
    50f4:	b2 2e       	mov	r11, r18
    50f6:	d6 d3       	rcall	.+1964   	; 0x58a4 <fgetc>
    50f8:	9c 01       	movw	r18, r24
    50fa:	33 27       	eor	r19, r19
    50fc:	2b 32       	cpi	r18, 0x2B	; 43
    50fe:	31 05       	cpc	r19, r1
    5100:	31 f0       	breq	.+12     	; 0x510e <conv_int+0x34>
    5102:	2d 32       	cpi	r18, 0x2D	; 45
    5104:	31 05       	cpc	r19, r1
    5106:	59 f4       	brne	.+22     	; 0x511e <conv_int+0x44>
    5108:	8b 2d       	mov	r24, r11
    510a:	80 68       	ori	r24, 0x80	; 128
    510c:	b8 2e       	mov	r11, r24
    510e:	d1 50       	subi	r29, 0x01	; 1
    5110:	11 f4       	brne	.+4      	; 0x5116 <conv_int+0x3c>
    5112:	80 e0       	ldi	r24, 0x00	; 0
    5114:	61 c0       	rjmp	.+194    	; 0x51d8 <conv_int+0xfe>
    5116:	c8 01       	movw	r24, r16
    5118:	c5 d3       	rcall	.+1930   	; 0x58a4 <fgetc>
    511a:	97 fd       	sbrc	r25, 7
    511c:	fa cf       	rjmp	.-12     	; 0x5112 <conv_int+0x38>
    511e:	cb 2d       	mov	r28, r11
    5120:	cd 7f       	andi	r28, 0xFD	; 253
    5122:	2b 2d       	mov	r18, r11
    5124:	20 73       	andi	r18, 0x30	; 48
    5126:	f9 f4       	brne	.+62     	; 0x5166 <conv_int+0x8c>
    5128:	80 33       	cpi	r24, 0x30	; 48
    512a:	e9 f4       	brne	.+58     	; 0x5166 <conv_int+0x8c>
    512c:	aa 24       	eor	r10, r10
    512e:	aa 94       	dec	r10
    5130:	ad 0e       	add	r10, r29
    5132:	09 f4       	brne	.+2      	; 0x5136 <conv_int+0x5c>
    5134:	3e c0       	rjmp	.+124    	; 0x51b2 <conv_int+0xd8>
    5136:	c8 01       	movw	r24, r16
    5138:	b5 d3       	rcall	.+1898   	; 0x58a4 <fgetc>
    513a:	97 fd       	sbrc	r25, 7
    513c:	3a c0       	rjmp	.+116    	; 0x51b2 <conv_int+0xd8>
    513e:	9c 01       	movw	r18, r24
    5140:	2f 7d       	andi	r18, 0xDF	; 223
    5142:	33 27       	eor	r19, r19
    5144:	28 35       	cpi	r18, 0x58	; 88
    5146:	31 05       	cpc	r19, r1
    5148:	41 f4       	brne	.+16     	; 0x515a <conv_int+0x80>
    514a:	c2 64       	ori	r28, 0x42	; 66
    514c:	d2 50       	subi	r29, 0x02	; 2
    514e:	89 f1       	breq	.+98     	; 0x51b2 <conv_int+0xd8>
    5150:	c8 01       	movw	r24, r16
    5152:	a8 d3       	rcall	.+1872   	; 0x58a4 <fgetc>
    5154:	97 ff       	sbrs	r25, 7
    5156:	07 c0       	rjmp	.+14     	; 0x5166 <conv_int+0x8c>
    5158:	2c c0       	rjmp	.+88     	; 0x51b2 <conv_int+0xd8>
    515a:	b6 fe       	sbrs	r11, 6
    515c:	02 c0       	rjmp	.+4      	; 0x5162 <conv_int+0x88>
    515e:	c2 60       	ori	r28, 0x02	; 2
    5160:	01 c0       	rjmp	.+2      	; 0x5164 <conv_int+0x8a>
    5162:	c2 61       	ori	r28, 0x12	; 18
    5164:	da 2d       	mov	r29, r10
    5166:	81 2c       	mov	r8, r1
    5168:	91 2c       	mov	r9, r1
    516a:	54 01       	movw	r10, r8
    516c:	20 ed       	ldi	r18, 0xD0	; 208
    516e:	28 0f       	add	r18, r24
    5170:	28 30       	cpi	r18, 0x08	; 8
    5172:	78 f0       	brcs	.+30     	; 0x5192 <conv_int+0xb8>
    5174:	c4 ff       	sbrs	r28, 4
    5176:	03 c0       	rjmp	.+6      	; 0x517e <conv_int+0xa4>
    5178:	b8 01       	movw	r22, r16
    517a:	0e d4       	rcall	.+2076   	; 0x5998 <ungetc>
    517c:	17 c0       	rjmp	.+46     	; 0x51ac <conv_int+0xd2>
    517e:	2a 30       	cpi	r18, 0x0A	; 10
    5180:	40 f0       	brcs	.+16     	; 0x5192 <conv_int+0xb8>
    5182:	c6 ff       	sbrs	r28, 6
    5184:	f9 cf       	rjmp	.-14     	; 0x5178 <conv_int+0x9e>
    5186:	2f 7d       	andi	r18, 0xDF	; 223
    5188:	3f ee       	ldi	r19, 0xEF	; 239
    518a:	32 0f       	add	r19, r18
    518c:	36 30       	cpi	r19, 0x06	; 6
    518e:	a0 f7       	brcc	.-24     	; 0x5178 <conv_int+0x9e>
    5190:	27 50       	subi	r18, 0x07	; 7
    5192:	4c 2f       	mov	r20, r28
    5194:	c5 01       	movw	r24, r10
    5196:	b4 01       	movw	r22, r8
    5198:	63 df       	rcall	.-314    	; 0x5060 <mulacc>
    519a:	4b 01       	movw	r8, r22
    519c:	5c 01       	movw	r10, r24
    519e:	c2 60       	ori	r28, 0x02	; 2
    51a0:	d1 50       	subi	r29, 0x01	; 1
    51a2:	51 f0       	breq	.+20     	; 0x51b8 <conv_int+0xde>
    51a4:	c8 01       	movw	r24, r16
    51a6:	7e d3       	rcall	.+1788   	; 0x58a4 <fgetc>
    51a8:	97 ff       	sbrs	r25, 7
    51aa:	e0 cf       	rjmp	.-64     	; 0x516c <conv_int+0x92>
    51ac:	c1 fd       	sbrc	r28, 1
    51ae:	04 c0       	rjmp	.+8      	; 0x51b8 <conv_int+0xde>
    51b0:	b0 cf       	rjmp	.-160    	; 0x5112 <conv_int+0x38>
    51b2:	81 2c       	mov	r8, r1
    51b4:	91 2c       	mov	r9, r1
    51b6:	54 01       	movw	r10, r8
    51b8:	c7 ff       	sbrs	r28, 7
    51ba:	08 c0       	rjmp	.+16     	; 0x51cc <conv_int+0xf2>
    51bc:	b0 94       	com	r11
    51be:	a0 94       	com	r10
    51c0:	90 94       	com	r9
    51c2:	80 94       	com	r8
    51c4:	81 1c       	adc	r8, r1
    51c6:	91 1c       	adc	r9, r1
    51c8:	a1 1c       	adc	r10, r1
    51ca:	b1 1c       	adc	r11, r1
    51cc:	2c 2f       	mov	r18, r28
    51ce:	b5 01       	movw	r22, r10
    51d0:	a4 01       	movw	r20, r8
    51d2:	c7 01       	movw	r24, r14
    51d4:	39 df       	rcall	.-398    	; 0x5048 <putval>
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	df 91       	pop	r29
    51da:	cf 91       	pop	r28
    51dc:	1f 91       	pop	r17
    51de:	0f 91       	pop	r16
    51e0:	ff 90       	pop	r15
    51e2:	ef 90       	pop	r14
    51e4:	bf 90       	pop	r11
    51e6:	af 90       	pop	r10
    51e8:	9f 90       	pop	r9
    51ea:	8f 90       	pop	r8
    51ec:	08 95       	ret

000051ee <conv_brk>:
    51ee:	5f 92       	push	r5
    51f0:	6f 92       	push	r6
    51f2:	7f 92       	push	r7
    51f4:	8f 92       	push	r8
    51f6:	9f 92       	push	r9
    51f8:	af 92       	push	r10
    51fa:	bf 92       	push	r11
    51fc:	cf 92       	push	r12
    51fe:	df 92       	push	r13
    5200:	ef 92       	push	r14
    5202:	ff 92       	push	r15
    5204:	0f 93       	push	r16
    5206:	1f 93       	push	r17
    5208:	cf 93       	push	r28
    520a:	df 93       	push	r29
    520c:	cd b7       	in	r28, 0x3d	; 61
    520e:	de b7       	in	r29, 0x3e	; 62
    5210:	a0 97       	sbiw	r28, 0x20	; 32
    5212:	cd bf       	out	0x3d, r28	; 61
    5214:	de bf       	out	0x3e, r29	; 62
    5216:	5c 01       	movw	r10, r24
    5218:	96 2e       	mov	r9, r22
    521a:	7a 01       	movw	r14, r20
    521c:	f9 01       	movw	r30, r18
    521e:	8e 01       	movw	r16, r28
    5220:	0f 5f       	subi	r16, 0xFF	; 255
    5222:	1f 4f       	sbci	r17, 0xFF	; 255
    5224:	68 01       	movw	r12, r16
    5226:	80 e2       	ldi	r24, 0x20	; 32
    5228:	d8 01       	movw	r26, r16
    522a:	1d 92       	st	X+, r1
    522c:	8a 95       	dec	r24
    522e:	e9 f7       	brne	.-6      	; 0x522a <conv_brk+0x3c>
    5230:	d5 01       	movw	r26, r10
    5232:	13 96       	adiw	r26, 0x03	; 3
    5234:	8c 90       	ld	r8, X
    5236:	80 e0       	ldi	r24, 0x00	; 0
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	61 2c       	mov	r6, r1
    523c:	71 2c       	mov	r7, r1
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	61 e0       	ldi	r22, 0x01	; 1
    5242:	70 e0       	ldi	r23, 0x00	; 0
    5244:	83 fc       	sbrc	r8, 3
    5246:	25 91       	lpm	r18, Z+
    5248:	83 fe       	sbrs	r8, 3
    524a:	21 91       	ld	r18, Z+
    524c:	8f 01       	movw	r16, r30
    524e:	52 2e       	mov	r5, r18
    5250:	21 11       	cpse	r18, r1
    5252:	03 c0       	rjmp	.+6      	; 0x525a <conv_brk+0x6c>
    5254:	80 e0       	ldi	r24, 0x00	; 0
    5256:	90 e0       	ldi	r25, 0x00	; 0
    5258:	90 c0       	rjmp	.+288    	; 0x537a <conv_brk+0x18c>
    525a:	2e 35       	cpi	r18, 0x5E	; 94
    525c:	11 f4       	brne	.+4      	; 0x5262 <conv_brk+0x74>
    525e:	00 97       	sbiw	r24, 0x00	; 0
    5260:	51 f1       	breq	.+84     	; 0x52b6 <conv_brk+0xc8>
    5262:	43 2f       	mov	r20, r19
    5264:	50 e0       	ldi	r21, 0x00	; 0
    5266:	48 17       	cp	r20, r24
    5268:	59 07       	cpc	r21, r25
    526a:	3c f4       	brge	.+14     	; 0x527a <conv_brk+0x8c>
    526c:	2d 35       	cpi	r18, 0x5D	; 93
    526e:	59 f1       	breq	.+86     	; 0x52c6 <conv_brk+0xd8>
    5270:	2d 32       	cpi	r18, 0x2D	; 45
    5272:	19 f4       	brne	.+6      	; 0x527a <conv_brk+0x8c>
    5274:	77 20       	and	r7, r7
    5276:	09 f1       	breq	.+66     	; 0x52ba <conv_brk+0xcc>
    5278:	03 c0       	rjmp	.+6      	; 0x5280 <conv_brk+0x92>
    527a:	77 20       	and	r7, r7
    527c:	09 f4       	brne	.+2      	; 0x5280 <conv_brk+0x92>
    527e:	68 c0       	rjmp	.+208    	; 0x5350 <conv_brk+0x162>
    5280:	45 2d       	mov	r20, r5
    5282:	46 95       	lsr	r20
    5284:	46 95       	lsr	r20
    5286:	46 95       	lsr	r20
    5288:	d6 01       	movw	r26, r12
    528a:	a4 0f       	add	r26, r20
    528c:	b1 1d       	adc	r27, r1
    528e:	45 2d       	mov	r20, r5
    5290:	47 70       	andi	r20, 0x07	; 7
    5292:	8b 01       	movw	r16, r22
    5294:	02 c0       	rjmp	.+4      	; 0x529a <conv_brk+0xac>
    5296:	00 0f       	add	r16, r16
    5298:	11 1f       	adc	r17, r17
    529a:	4a 95       	dec	r20
    529c:	e2 f7       	brpl	.-8      	; 0x5296 <conv_brk+0xa8>
    529e:	a8 01       	movw	r20, r16
    52a0:	5c 91       	ld	r21, X
    52a2:	45 2b       	or	r20, r21
    52a4:	4c 93       	st	X, r20
    52a6:	65 14       	cp	r6, r5
    52a8:	59 f0       	breq	.+22     	; 0x52c0 <conv_brk+0xd2>
    52aa:	56 14       	cp	r5, r6
    52ac:	10 f4       	brcc	.+4      	; 0x52b2 <conv_brk+0xc4>
    52ae:	53 94       	inc	r5
    52b0:	e7 cf       	rjmp	.-50     	; 0x5280 <conv_brk+0x92>
    52b2:	5a 94       	dec	r5
    52b4:	e5 cf       	rjmp	.-54     	; 0x5280 <conv_brk+0x92>
    52b6:	31 e0       	ldi	r19, 0x01	; 1
    52b8:	04 c0       	rjmp	.+8      	; 0x52c2 <conv_brk+0xd4>
    52ba:	77 24       	eor	r7, r7
    52bc:	73 94       	inc	r7
    52be:	01 c0       	rjmp	.+2      	; 0x52c2 <conv_brk+0xd4>
    52c0:	71 2c       	mov	r7, r1
    52c2:	01 96       	adiw	r24, 0x01	; 1
    52c4:	bf cf       	rjmp	.-130    	; 0x5244 <conv_brk+0x56>
    52c6:	77 20       	and	r7, r7
    52c8:	19 f0       	breq	.+6      	; 0x52d0 <conv_brk+0xe2>
    52ca:	8e 81       	ldd	r24, Y+6	; 0x06
    52cc:	80 62       	ori	r24, 0x20	; 32
    52ce:	8e 83       	std	Y+6, r24	; 0x06
    52d0:	31 11       	cpse	r19, r1
    52d2:	03 c0       	rjmp	.+6      	; 0x52da <conv_brk+0xec>
    52d4:	88 24       	eor	r8, r8
    52d6:	83 94       	inc	r8
    52d8:	17 c0       	rjmp	.+46     	; 0x5308 <conv_brk+0x11a>
    52da:	f6 01       	movw	r30, r12
    52dc:	9e 01       	movw	r18, r28
    52de:	2f 5d       	subi	r18, 0xDF	; 223
    52e0:	3f 4f       	sbci	r19, 0xFF	; 255
    52e2:	80 81       	ld	r24, Z
    52e4:	80 95       	com	r24
    52e6:	81 93       	st	Z+, r24
    52e8:	2e 17       	cp	r18, r30
    52ea:	3f 07       	cpc	r19, r31
    52ec:	d1 f7       	brne	.-12     	; 0x52e2 <conv_brk+0xf4>
    52ee:	f2 cf       	rjmp	.-28     	; 0x52d4 <conv_brk+0xe6>
    52f0:	e1 14       	cp	r14, r1
    52f2:	f1 04       	cpc	r15, r1
    52f4:	29 f0       	breq	.+10     	; 0x5300 <conv_brk+0x112>
    52f6:	d7 01       	movw	r26, r14
    52f8:	8c 93       	st	X, r24
    52fa:	f7 01       	movw	r30, r14
    52fc:	31 96       	adiw	r30, 0x01	; 1
    52fe:	7f 01       	movw	r14, r30
    5300:	9a 94       	dec	r9
    5302:	81 2c       	mov	r8, r1
    5304:	99 20       	and	r9, r9
    5306:	e9 f0       	breq	.+58     	; 0x5342 <conv_brk+0x154>
    5308:	c5 01       	movw	r24, r10
    530a:	cc d2       	rcall	.+1432   	; 0x58a4 <fgetc>
    530c:	97 fd       	sbrc	r25, 7
    530e:	17 c0       	rjmp	.+46     	; 0x533e <conv_brk+0x150>
    5310:	fc 01       	movw	r30, r24
    5312:	ff 27       	eor	r31, r31
    5314:	23 e0       	ldi	r18, 0x03	; 3
    5316:	f5 95       	asr	r31
    5318:	e7 95       	ror	r30
    531a:	2a 95       	dec	r18
    531c:	e1 f7       	brne	.-8      	; 0x5316 <conv_brk+0x128>
    531e:	ec 0d       	add	r30, r12
    5320:	fd 1d       	adc	r31, r13
    5322:	20 81       	ld	r18, Z
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	ac 01       	movw	r20, r24
    5328:	47 70       	andi	r20, 0x07	; 7
    532a:	55 27       	eor	r21, r21
    532c:	02 c0       	rjmp	.+4      	; 0x5332 <conv_brk+0x144>
    532e:	35 95       	asr	r19
    5330:	27 95       	ror	r18
    5332:	4a 95       	dec	r20
    5334:	e2 f7       	brpl	.-8      	; 0x532e <conv_brk+0x140>
    5336:	20 fd       	sbrc	r18, 0
    5338:	db cf       	rjmp	.-74     	; 0x52f0 <conv_brk+0x102>
    533a:	b5 01       	movw	r22, r10
    533c:	2d d3       	rcall	.+1626   	; 0x5998 <ungetc>
    533e:	81 10       	cpse	r8, r1
    5340:	89 cf       	rjmp	.-238    	; 0x5254 <conv_brk+0x66>
    5342:	e1 14       	cp	r14, r1
    5344:	f1 04       	cpc	r15, r1
    5346:	11 f0       	breq	.+4      	; 0x534c <conv_brk+0x15e>
    5348:	d7 01       	movw	r26, r14
    534a:	1c 92       	st	X, r1
    534c:	c8 01       	movw	r24, r16
    534e:	15 c0       	rjmp	.+42     	; 0x537a <conv_brk+0x18c>
    5350:	42 2f       	mov	r20, r18
    5352:	46 95       	lsr	r20
    5354:	46 95       	lsr	r20
    5356:	46 95       	lsr	r20
    5358:	d6 01       	movw	r26, r12
    535a:	a4 0f       	add	r26, r20
    535c:	b1 1d       	adc	r27, r1
    535e:	42 2f       	mov	r20, r18
    5360:	47 70       	andi	r20, 0x07	; 7
    5362:	8b 01       	movw	r16, r22
    5364:	02 c0       	rjmp	.+4      	; 0x536a <conv_brk+0x17c>
    5366:	00 0f       	add	r16, r16
    5368:	11 1f       	adc	r17, r17
    536a:	4a 95       	dec	r20
    536c:	e2 f7       	brpl	.-8      	; 0x5366 <conv_brk+0x178>
    536e:	a8 01       	movw	r20, r16
    5370:	5c 91       	ld	r21, X
    5372:	45 2b       	or	r20, r21
    5374:	4c 93       	st	X, r20
    5376:	62 2e       	mov	r6, r18
    5378:	a4 cf       	rjmp	.-184    	; 0x52c2 <conv_brk+0xd4>
    537a:	a0 96       	adiw	r28, 0x20	; 32
    537c:	cd bf       	out	0x3d, r28	; 61
    537e:	de bf       	out	0x3e, r29	; 62
    5380:	df 91       	pop	r29
    5382:	cf 91       	pop	r28
    5384:	1f 91       	pop	r17
    5386:	0f 91       	pop	r16
    5388:	ff 90       	pop	r15
    538a:	ef 90       	pop	r14
    538c:	df 90       	pop	r13
    538e:	cf 90       	pop	r12
    5390:	bf 90       	pop	r11
    5392:	af 90       	pop	r10
    5394:	9f 90       	pop	r9
    5396:	8f 90       	pop	r8
    5398:	7f 90       	pop	r7
    539a:	6f 90       	pop	r6
    539c:	5f 90       	pop	r5
    539e:	08 95       	ret

000053a0 <vfscanf>:
    53a0:	5f 92       	push	r5
    53a2:	6f 92       	push	r6
    53a4:	7f 92       	push	r7
    53a6:	8f 92       	push	r8
    53a8:	9f 92       	push	r9
    53aa:	af 92       	push	r10
    53ac:	bf 92       	push	r11
    53ae:	cf 92       	push	r12
    53b0:	df 92       	push	r13
    53b2:	ef 92       	push	r14
    53b4:	ff 92       	push	r15
    53b6:	0f 93       	push	r16
    53b8:	1f 93       	push	r17
    53ba:	cf 93       	push	r28
    53bc:	df 93       	push	r29
    53be:	6c 01       	movw	r12, r24
    53c0:	eb 01       	movw	r28, r22
    53c2:	5a 01       	movw	r10, r20
    53c4:	fc 01       	movw	r30, r24
    53c6:	16 82       	std	Z+6, r1	; 0x06
    53c8:	17 82       	std	Z+7, r1	; 0x07
    53ca:	51 2c       	mov	r5, r1
    53cc:	f6 01       	movw	r30, r12
    53ce:	e3 80       	ldd	r14, Z+3	; 0x03
    53d0:	fe 01       	movw	r30, r28
    53d2:	e3 fc       	sbrc	r14, 3
    53d4:	85 91       	lpm	r24, Z+
    53d6:	e3 fe       	sbrs	r14, 3
    53d8:	81 91       	ld	r24, Z+
    53da:	18 2f       	mov	r17, r24
    53dc:	ef 01       	movw	r28, r30
    53de:	88 23       	and	r24, r24
    53e0:	09 f4       	brne	.+2      	; 0x53e4 <vfscanf+0x44>
    53e2:	e0 c0       	rjmp	.+448    	; 0x55a4 <vfscanf+0x204>
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	2e d2       	rcall	.+1116   	; 0x5844 <isspace>
    53e8:	89 2b       	or	r24, r25
    53ea:	19 f0       	breq	.+6      	; 0x53f2 <vfscanf+0x52>
    53ec:	c6 01       	movw	r24, r12
    53ee:	5f de       	rcall	.-834    	; 0x50ae <skip_spaces>
    53f0:	ed cf       	rjmp	.-38     	; 0x53cc <vfscanf+0x2c>
    53f2:	15 32       	cpi	r17, 0x25	; 37
    53f4:	41 f4       	brne	.+16     	; 0x5406 <vfscanf+0x66>
    53f6:	fe 01       	movw	r30, r28
    53f8:	e3 fc       	sbrc	r14, 3
    53fa:	15 91       	lpm	r17, Z+
    53fc:	e3 fe       	sbrs	r14, 3
    53fe:	11 91       	ld	r17, Z+
    5400:	ef 01       	movw	r28, r30
    5402:	15 32       	cpi	r17, 0x25	; 37
    5404:	71 f4       	brne	.+28     	; 0x5422 <vfscanf+0x82>
    5406:	c6 01       	movw	r24, r12
    5408:	4d d2       	rcall	.+1178   	; 0x58a4 <fgetc>
    540a:	97 fd       	sbrc	r25, 7
    540c:	c9 c0       	rjmp	.+402    	; 0x55a0 <vfscanf+0x200>
    540e:	41 2f       	mov	r20, r17
    5410:	50 e0       	ldi	r21, 0x00	; 0
    5412:	9c 01       	movw	r18, r24
    5414:	33 27       	eor	r19, r19
    5416:	24 17       	cp	r18, r20
    5418:	35 07       	cpc	r19, r21
    541a:	c1 f2       	breq	.-80     	; 0x53cc <vfscanf+0x2c>
    541c:	b6 01       	movw	r22, r12
    541e:	bc d2       	rcall	.+1400   	; 0x5998 <ungetc>
    5420:	c1 c0       	rjmp	.+386    	; 0x55a4 <vfscanf+0x204>
    5422:	1a 32       	cpi	r17, 0x2A	; 42
    5424:	39 f4       	brne	.+14     	; 0x5434 <vfscanf+0x94>
    5426:	e3 fc       	sbrc	r14, 3
    5428:	15 91       	lpm	r17, Z+
    542a:	e3 fe       	sbrs	r14, 3
    542c:	11 91       	ld	r17, Z+
    542e:	ef 01       	movw	r28, r30
    5430:	01 e0       	ldi	r16, 0x01	; 1
    5432:	01 c0       	rjmp	.+2      	; 0x5436 <vfscanf+0x96>
    5434:	00 e0       	ldi	r16, 0x00	; 0
    5436:	f1 2c       	mov	r15, r1
    5438:	20 ed       	ldi	r18, 0xD0	; 208
    543a:	21 0f       	add	r18, r17
    543c:	2a 30       	cpi	r18, 0x0A	; 10
    543e:	78 f4       	brcc	.+30     	; 0x545e <vfscanf+0xbe>
    5440:	02 60       	ori	r16, 0x02	; 2
    5442:	6f 2d       	mov	r22, r15
    5444:	70 e0       	ldi	r23, 0x00	; 0
    5446:	80 e0       	ldi	r24, 0x00	; 0
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	40 e2       	ldi	r20, 0x20	; 32
    544c:	09 de       	rcall	.-1006   	; 0x5060 <mulacc>
    544e:	f6 2e       	mov	r15, r22
    5450:	fe 01       	movw	r30, r28
    5452:	e3 fc       	sbrc	r14, 3
    5454:	15 91       	lpm	r17, Z+
    5456:	e3 fe       	sbrs	r14, 3
    5458:	11 91       	ld	r17, Z+
    545a:	ef 01       	movw	r28, r30
    545c:	ed cf       	rjmp	.-38     	; 0x5438 <vfscanf+0x98>
    545e:	01 ff       	sbrs	r16, 1
    5460:	03 c0       	rjmp	.+6      	; 0x5468 <vfscanf+0xc8>
    5462:	f1 10       	cpse	r15, r1
    5464:	03 c0       	rjmp	.+6      	; 0x546c <vfscanf+0xcc>
    5466:	9e c0       	rjmp	.+316    	; 0x55a4 <vfscanf+0x204>
    5468:	ff 24       	eor	r15, r15
    546a:	fa 94       	dec	r15
    546c:	18 36       	cpi	r17, 0x68	; 104
    546e:	19 f0       	breq	.+6      	; 0x5476 <vfscanf+0xd6>
    5470:	1c 36       	cpi	r17, 0x6C	; 108
    5472:	51 f0       	breq	.+20     	; 0x5488 <vfscanf+0xe8>
    5474:	10 c0       	rjmp	.+32     	; 0x5496 <vfscanf+0xf6>
    5476:	fe 01       	movw	r30, r28
    5478:	e3 fc       	sbrc	r14, 3
    547a:	15 91       	lpm	r17, Z+
    547c:	e3 fe       	sbrs	r14, 3
    547e:	11 91       	ld	r17, Z+
    5480:	ef 01       	movw	r28, r30
    5482:	18 36       	cpi	r17, 0x68	; 104
    5484:	41 f4       	brne	.+16     	; 0x5496 <vfscanf+0xf6>
    5486:	08 60       	ori	r16, 0x08	; 8
    5488:	04 60       	ori	r16, 0x04	; 4
    548a:	fe 01       	movw	r30, r28
    548c:	e3 fc       	sbrc	r14, 3
    548e:	15 91       	lpm	r17, Z+
    5490:	e3 fe       	sbrs	r14, 3
    5492:	11 91       	ld	r17, Z+
    5494:	ef 01       	movw	r28, r30
    5496:	11 23       	and	r17, r17
    5498:	09 f4       	brne	.+2      	; 0x549c <vfscanf+0xfc>
    549a:	84 c0       	rjmp	.+264    	; 0x55a4 <vfscanf+0x204>
    549c:	61 2f       	mov	r22, r17
    549e:	70 e0       	ldi	r23, 0x00	; 0
    54a0:	84 ea       	ldi	r24, 0xA4	; 164
    54a2:	92 e0       	ldi	r25, 0x02	; 2
    54a4:	d7 d1       	rcall	.+942    	; 0x5854 <strchr_P>
    54a6:	89 2b       	or	r24, r25
    54a8:	09 f4       	brne	.+2      	; 0x54ac <vfscanf+0x10c>
    54aa:	7c c0       	rjmp	.+248    	; 0x55a4 <vfscanf+0x204>
    54ac:	00 fd       	sbrc	r16, 0
    54ae:	07 c0       	rjmp	.+14     	; 0x54be <vfscanf+0x11e>
    54b0:	f5 01       	movw	r30, r10
    54b2:	80 80       	ld	r8, Z
    54b4:	91 80       	ldd	r9, Z+1	; 0x01
    54b6:	c5 01       	movw	r24, r10
    54b8:	02 96       	adiw	r24, 0x02	; 2
    54ba:	5c 01       	movw	r10, r24
    54bc:	02 c0       	rjmp	.+4      	; 0x54c2 <vfscanf+0x122>
    54be:	81 2c       	mov	r8, r1
    54c0:	91 2c       	mov	r9, r1
    54c2:	1e 36       	cpi	r17, 0x6E	; 110
    54c4:	49 f4       	brne	.+18     	; 0x54d8 <vfscanf+0x138>
    54c6:	f6 01       	movw	r30, r12
    54c8:	46 81       	ldd	r20, Z+6	; 0x06
    54ca:	57 81       	ldd	r21, Z+7	; 0x07
    54cc:	60 e0       	ldi	r22, 0x00	; 0
    54ce:	70 e0       	ldi	r23, 0x00	; 0
    54d0:	20 2f       	mov	r18, r16
    54d2:	c4 01       	movw	r24, r8
    54d4:	b9 dd       	rcall	.-1166   	; 0x5048 <putval>
    54d6:	7a cf       	rjmp	.-268    	; 0x53cc <vfscanf+0x2c>
    54d8:	13 36       	cpi	r17, 0x63	; 99
    54da:	a1 f4       	brne	.+40     	; 0x5504 <vfscanf+0x164>
    54dc:	01 fd       	sbrc	r16, 1
    54de:	02 c0       	rjmp	.+4      	; 0x54e4 <vfscanf+0x144>
    54e0:	ff 24       	eor	r15, r15
    54e2:	f3 94       	inc	r15
    54e4:	c6 01       	movw	r24, r12
    54e6:	de d1       	rcall	.+956    	; 0x58a4 <fgetc>
    54e8:	97 fd       	sbrc	r25, 7
    54ea:	5a c0       	rjmp	.+180    	; 0x55a0 <vfscanf+0x200>
    54ec:	81 14       	cp	r8, r1
    54ee:	91 04       	cpc	r9, r1
    54f0:	29 f0       	breq	.+10     	; 0x54fc <vfscanf+0x15c>
    54f2:	f4 01       	movw	r30, r8
    54f4:	80 83       	st	Z, r24
    54f6:	c4 01       	movw	r24, r8
    54f8:	01 96       	adiw	r24, 0x01	; 1
    54fa:	4c 01       	movw	r8, r24
    54fc:	fa 94       	dec	r15
    54fe:	f1 10       	cpse	r15, r1
    5500:	f1 cf       	rjmp	.-30     	; 0x54e4 <vfscanf+0x144>
    5502:	4a c0       	rjmp	.+148    	; 0x5598 <vfscanf+0x1f8>
    5504:	1b 35       	cpi	r17, 0x5B	; 91
    5506:	51 f4       	brne	.+20     	; 0x551c <vfscanf+0x17c>
    5508:	9e 01       	movw	r18, r28
    550a:	a4 01       	movw	r20, r8
    550c:	6f 2d       	mov	r22, r15
    550e:	c6 01       	movw	r24, r12
    5510:	6e de       	rcall	.-804    	; 0x51ee <conv_brk>
    5512:	ec 01       	movw	r28, r24
    5514:	89 2b       	or	r24, r25
    5516:	09 f0       	breq	.+2      	; 0x551a <vfscanf+0x17a>
    5518:	3f c0       	rjmp	.+126    	; 0x5598 <vfscanf+0x1f8>
    551a:	39 c0       	rjmp	.+114    	; 0x558e <vfscanf+0x1ee>
    551c:	c6 01       	movw	r24, r12
    551e:	c7 dd       	rcall	.-1138   	; 0x50ae <skip_spaces>
    5520:	97 fd       	sbrc	r25, 7
    5522:	3e c0       	rjmp	.+124    	; 0x55a0 <vfscanf+0x200>
    5524:	1f 36       	cpi	r17, 0x6F	; 111
    5526:	49 f1       	breq	.+82     	; 0x557a <vfscanf+0x1da>
    5528:	28 f4       	brcc	.+10     	; 0x5534 <vfscanf+0x194>
    552a:	14 36       	cpi	r17, 0x64	; 100
    552c:	21 f1       	breq	.+72     	; 0x5576 <vfscanf+0x1d6>
    552e:	19 36       	cpi	r17, 0x69	; 105
    5530:	39 f1       	breq	.+78     	; 0x5580 <vfscanf+0x1e0>
    5532:	25 c0       	rjmp	.+74     	; 0x557e <vfscanf+0x1de>
    5534:	13 37       	cpi	r17, 0x73	; 115
    5536:	71 f0       	breq	.+28     	; 0x5554 <vfscanf+0x1b4>
    5538:	15 37       	cpi	r17, 0x75	; 117
    553a:	e9 f0       	breq	.+58     	; 0x5576 <vfscanf+0x1d6>
    553c:	20 c0       	rjmp	.+64     	; 0x557e <vfscanf+0x1de>
    553e:	81 14       	cp	r8, r1
    5540:	91 04       	cpc	r9, r1
    5542:	29 f0       	breq	.+10     	; 0x554e <vfscanf+0x1ae>
    5544:	f4 01       	movw	r30, r8
    5546:	60 82       	st	Z, r6
    5548:	c4 01       	movw	r24, r8
    554a:	01 96       	adiw	r24, 0x01	; 1
    554c:	4c 01       	movw	r8, r24
    554e:	fa 94       	dec	r15
    5550:	ff 20       	and	r15, r15
    5552:	59 f0       	breq	.+22     	; 0x556a <vfscanf+0x1ca>
    5554:	c6 01       	movw	r24, r12
    5556:	a6 d1       	rcall	.+844    	; 0x58a4 <fgetc>
    5558:	3c 01       	movw	r6, r24
    555a:	97 fd       	sbrc	r25, 7
    555c:	06 c0       	rjmp	.+12     	; 0x556a <vfscanf+0x1ca>
    555e:	72 d1       	rcall	.+740    	; 0x5844 <isspace>
    5560:	89 2b       	or	r24, r25
    5562:	69 f3       	breq	.-38     	; 0x553e <vfscanf+0x19e>
    5564:	b6 01       	movw	r22, r12
    5566:	c3 01       	movw	r24, r6
    5568:	17 d2       	rcall	.+1070   	; 0x5998 <ungetc>
    556a:	81 14       	cp	r8, r1
    556c:	91 04       	cpc	r9, r1
    556e:	a1 f0       	breq	.+40     	; 0x5598 <vfscanf+0x1f8>
    5570:	f4 01       	movw	r30, r8
    5572:	10 82       	st	Z, r1
    5574:	11 c0       	rjmp	.+34     	; 0x5598 <vfscanf+0x1f8>
    5576:	00 62       	ori	r16, 0x20	; 32
    5578:	03 c0       	rjmp	.+6      	; 0x5580 <vfscanf+0x1e0>
    557a:	00 61       	ori	r16, 0x10	; 16
    557c:	01 c0       	rjmp	.+2      	; 0x5580 <vfscanf+0x1e0>
    557e:	00 64       	ori	r16, 0x40	; 64
    5580:	20 2f       	mov	r18, r16
    5582:	a4 01       	movw	r20, r8
    5584:	6f 2d       	mov	r22, r15
    5586:	c6 01       	movw	r24, r12
    5588:	a8 dd       	rcall	.-1200   	; 0x50da <conv_int>
    558a:	81 11       	cpse	r24, r1
    558c:	05 c0       	rjmp	.+10     	; 0x5598 <vfscanf+0x1f8>
    558e:	f6 01       	movw	r30, r12
    5590:	83 81       	ldd	r24, Z+3	; 0x03
    5592:	80 73       	andi	r24, 0x30	; 48
    5594:	29 f4       	brne	.+10     	; 0x55a0 <vfscanf+0x200>
    5596:	06 c0       	rjmp	.+12     	; 0x55a4 <vfscanf+0x204>
    5598:	00 fd       	sbrc	r16, 0
    559a:	18 cf       	rjmp	.-464    	; 0x53cc <vfscanf+0x2c>
    559c:	53 94       	inc	r5
    559e:	16 cf       	rjmp	.-468    	; 0x53cc <vfscanf+0x2c>
    55a0:	55 20       	and	r5, r5
    55a2:	19 f0       	breq	.+6      	; 0x55aa <vfscanf+0x20a>
    55a4:	85 2d       	mov	r24, r5
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	02 c0       	rjmp	.+4      	; 0x55ae <vfscanf+0x20e>
    55aa:	8f ef       	ldi	r24, 0xFF	; 255
    55ac:	9f ef       	ldi	r25, 0xFF	; 255
    55ae:	df 91       	pop	r29
    55b0:	cf 91       	pop	r28
    55b2:	1f 91       	pop	r17
    55b4:	0f 91       	pop	r16
    55b6:	ff 90       	pop	r15
    55b8:	ef 90       	pop	r14
    55ba:	df 90       	pop	r13
    55bc:	cf 90       	pop	r12
    55be:	bf 90       	pop	r11
    55c0:	af 90       	pop	r10
    55c2:	9f 90       	pop	r9
    55c4:	8f 90       	pop	r8
    55c6:	7f 90       	pop	r7
    55c8:	6f 90       	pop	r6
    55ca:	5f 90       	pop	r5
    55cc:	08 95       	ret

000055ce <calloc>:
    55ce:	0f 93       	push	r16
    55d0:	1f 93       	push	r17
    55d2:	cf 93       	push	r28
    55d4:	df 93       	push	r29
    55d6:	86 9f       	mul	r24, r22
    55d8:	80 01       	movw	r16, r0
    55da:	87 9f       	mul	r24, r23
    55dc:	10 0d       	add	r17, r0
    55de:	96 9f       	mul	r25, r22
    55e0:	10 0d       	add	r17, r0
    55e2:	11 24       	eor	r1, r1
    55e4:	c8 01       	movw	r24, r16
    55e6:	0d d0       	rcall	.+26     	; 0x5602 <malloc>
    55e8:	ec 01       	movw	r28, r24
    55ea:	00 97       	sbiw	r24, 0x00	; 0
    55ec:	21 f0       	breq	.+8      	; 0x55f6 <calloc+0x28>
    55ee:	a8 01       	movw	r20, r16
    55f0:	60 e0       	ldi	r22, 0x00	; 0
    55f2:	70 e0       	ldi	r23, 0x00	; 0
    55f4:	45 d1       	rcall	.+650    	; 0x5880 <memset>
    55f6:	ce 01       	movw	r24, r28
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	1f 91       	pop	r17
    55fe:	0f 91       	pop	r16
    5600:	08 95       	ret

00005602 <malloc>:
    5602:	0f 93       	push	r16
    5604:	1f 93       	push	r17
    5606:	cf 93       	push	r28
    5608:	df 93       	push	r29
    560a:	82 30       	cpi	r24, 0x02	; 2
    560c:	91 05       	cpc	r25, r1
    560e:	10 f4       	brcc	.+4      	; 0x5614 <malloc+0x12>
    5610:	82 e0       	ldi	r24, 0x02	; 2
    5612:	90 e0       	ldi	r25, 0x00	; 0
    5614:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <__flp>
    5618:	f0 91 2d 22 	lds	r31, 0x222D	; 0x80222d <__flp+0x1>
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	a0 e0       	ldi	r26, 0x00	; 0
    5622:	b0 e0       	ldi	r27, 0x00	; 0
    5624:	30 97       	sbiw	r30, 0x00	; 0
    5626:	19 f1       	breq	.+70     	; 0x566e <malloc+0x6c>
    5628:	40 81       	ld	r20, Z
    562a:	51 81       	ldd	r21, Z+1	; 0x01
    562c:	02 81       	ldd	r16, Z+2	; 0x02
    562e:	13 81       	ldd	r17, Z+3	; 0x03
    5630:	48 17       	cp	r20, r24
    5632:	59 07       	cpc	r21, r25
    5634:	c8 f0       	brcs	.+50     	; 0x5668 <malloc+0x66>
    5636:	84 17       	cp	r24, r20
    5638:	95 07       	cpc	r25, r21
    563a:	69 f4       	brne	.+26     	; 0x5656 <malloc+0x54>
    563c:	10 97       	sbiw	r26, 0x00	; 0
    563e:	31 f0       	breq	.+12     	; 0x564c <malloc+0x4a>
    5640:	12 96       	adiw	r26, 0x02	; 2
    5642:	0c 93       	st	X, r16
    5644:	12 97       	sbiw	r26, 0x02	; 2
    5646:	13 96       	adiw	r26, 0x03	; 3
    5648:	1c 93       	st	X, r17
    564a:	27 c0       	rjmp	.+78     	; 0x569a <malloc+0x98>
    564c:	00 93 2c 22 	sts	0x222C, r16	; 0x80222c <__flp>
    5650:	10 93 2d 22 	sts	0x222D, r17	; 0x80222d <__flp+0x1>
    5654:	22 c0       	rjmp	.+68     	; 0x569a <malloc+0x98>
    5656:	21 15       	cp	r18, r1
    5658:	31 05       	cpc	r19, r1
    565a:	19 f0       	breq	.+6      	; 0x5662 <malloc+0x60>
    565c:	42 17       	cp	r20, r18
    565e:	53 07       	cpc	r21, r19
    5660:	18 f4       	brcc	.+6      	; 0x5668 <malloc+0x66>
    5662:	9a 01       	movw	r18, r20
    5664:	bd 01       	movw	r22, r26
    5666:	ef 01       	movw	r28, r30
    5668:	df 01       	movw	r26, r30
    566a:	f8 01       	movw	r30, r16
    566c:	db cf       	rjmp	.-74     	; 0x5624 <malloc+0x22>
    566e:	21 15       	cp	r18, r1
    5670:	31 05       	cpc	r19, r1
    5672:	f9 f0       	breq	.+62     	; 0x56b2 <malloc+0xb0>
    5674:	28 1b       	sub	r18, r24
    5676:	39 0b       	sbc	r19, r25
    5678:	24 30       	cpi	r18, 0x04	; 4
    567a:	31 05       	cpc	r19, r1
    567c:	80 f4       	brcc	.+32     	; 0x569e <malloc+0x9c>
    567e:	8a 81       	ldd	r24, Y+2	; 0x02
    5680:	9b 81       	ldd	r25, Y+3	; 0x03
    5682:	61 15       	cp	r22, r1
    5684:	71 05       	cpc	r23, r1
    5686:	21 f0       	breq	.+8      	; 0x5690 <malloc+0x8e>
    5688:	fb 01       	movw	r30, r22
    568a:	82 83       	std	Z+2, r24	; 0x02
    568c:	93 83       	std	Z+3, r25	; 0x03
    568e:	04 c0       	rjmp	.+8      	; 0x5698 <malloc+0x96>
    5690:	80 93 2c 22 	sts	0x222C, r24	; 0x80222c <__flp>
    5694:	90 93 2d 22 	sts	0x222D, r25	; 0x80222d <__flp+0x1>
    5698:	fe 01       	movw	r30, r28
    569a:	32 96       	adiw	r30, 0x02	; 2
    569c:	44 c0       	rjmp	.+136    	; 0x5726 <malloc+0x124>
    569e:	fe 01       	movw	r30, r28
    56a0:	e2 0f       	add	r30, r18
    56a2:	f3 1f       	adc	r31, r19
    56a4:	81 93       	st	Z+, r24
    56a6:	91 93       	st	Z+, r25
    56a8:	22 50       	subi	r18, 0x02	; 2
    56aa:	31 09       	sbc	r19, r1
    56ac:	28 83       	st	Y, r18
    56ae:	39 83       	std	Y+1, r19	; 0x01
    56b0:	3a c0       	rjmp	.+116    	; 0x5726 <malloc+0x124>
    56b2:	20 91 2a 22 	lds	r18, 0x222A	; 0x80222a <__brkval>
    56b6:	30 91 2b 22 	lds	r19, 0x222B	; 0x80222b <__brkval+0x1>
    56ba:	23 2b       	or	r18, r19
    56bc:	41 f4       	brne	.+16     	; 0x56ce <malloc+0xcc>
    56be:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    56c2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    56c6:	20 93 2a 22 	sts	0x222A, r18	; 0x80222a <__brkval>
    56ca:	30 93 2b 22 	sts	0x222B, r19	; 0x80222b <__brkval+0x1>
    56ce:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    56d2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    56d6:	21 15       	cp	r18, r1
    56d8:	31 05       	cpc	r19, r1
    56da:	41 f4       	brne	.+16     	; 0x56ec <malloc+0xea>
    56dc:	2d b7       	in	r18, 0x3d	; 61
    56de:	3e b7       	in	r19, 0x3e	; 62
    56e0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    56e4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    56e8:	24 1b       	sub	r18, r20
    56ea:	35 0b       	sbc	r19, r21
    56ec:	e0 91 2a 22 	lds	r30, 0x222A	; 0x80222a <__brkval>
    56f0:	f0 91 2b 22 	lds	r31, 0x222B	; 0x80222b <__brkval+0x1>
    56f4:	e2 17       	cp	r30, r18
    56f6:	f3 07       	cpc	r31, r19
    56f8:	a0 f4       	brcc	.+40     	; 0x5722 <malloc+0x120>
    56fa:	2e 1b       	sub	r18, r30
    56fc:	3f 0b       	sbc	r19, r31
    56fe:	28 17       	cp	r18, r24
    5700:	39 07       	cpc	r19, r25
    5702:	78 f0       	brcs	.+30     	; 0x5722 <malloc+0x120>
    5704:	ac 01       	movw	r20, r24
    5706:	4e 5f       	subi	r20, 0xFE	; 254
    5708:	5f 4f       	sbci	r21, 0xFF	; 255
    570a:	24 17       	cp	r18, r20
    570c:	35 07       	cpc	r19, r21
    570e:	48 f0       	brcs	.+18     	; 0x5722 <malloc+0x120>
    5710:	4e 0f       	add	r20, r30
    5712:	5f 1f       	adc	r21, r31
    5714:	40 93 2a 22 	sts	0x222A, r20	; 0x80222a <__brkval>
    5718:	50 93 2b 22 	sts	0x222B, r21	; 0x80222b <__brkval+0x1>
    571c:	81 93       	st	Z+, r24
    571e:	91 93       	st	Z+, r25
    5720:	02 c0       	rjmp	.+4      	; 0x5726 <malloc+0x124>
    5722:	e0 e0       	ldi	r30, 0x00	; 0
    5724:	f0 e0       	ldi	r31, 0x00	; 0
    5726:	cf 01       	movw	r24, r30
    5728:	df 91       	pop	r29
    572a:	cf 91       	pop	r28
    572c:	1f 91       	pop	r17
    572e:	0f 91       	pop	r16
    5730:	08 95       	ret

00005732 <free>:
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	00 97       	sbiw	r24, 0x00	; 0
    5738:	09 f4       	brne	.+2      	; 0x573c <free+0xa>
    573a:	81 c0       	rjmp	.+258    	; 0x583e <free+0x10c>
    573c:	fc 01       	movw	r30, r24
    573e:	32 97       	sbiw	r30, 0x02	; 2
    5740:	12 82       	std	Z+2, r1	; 0x02
    5742:	13 82       	std	Z+3, r1	; 0x03
    5744:	a0 91 2c 22 	lds	r26, 0x222C	; 0x80222c <__flp>
    5748:	b0 91 2d 22 	lds	r27, 0x222D	; 0x80222d <__flp+0x1>
    574c:	10 97       	sbiw	r26, 0x00	; 0
    574e:	81 f4       	brne	.+32     	; 0x5770 <free+0x3e>
    5750:	20 81       	ld	r18, Z
    5752:	31 81       	ldd	r19, Z+1	; 0x01
    5754:	82 0f       	add	r24, r18
    5756:	93 1f       	adc	r25, r19
    5758:	20 91 2a 22 	lds	r18, 0x222A	; 0x80222a <__brkval>
    575c:	30 91 2b 22 	lds	r19, 0x222B	; 0x80222b <__brkval+0x1>
    5760:	28 17       	cp	r18, r24
    5762:	39 07       	cpc	r19, r25
    5764:	51 f5       	brne	.+84     	; 0x57ba <free+0x88>
    5766:	e0 93 2a 22 	sts	0x222A, r30	; 0x80222a <__brkval>
    576a:	f0 93 2b 22 	sts	0x222B, r31	; 0x80222b <__brkval+0x1>
    576e:	67 c0       	rjmp	.+206    	; 0x583e <free+0x10c>
    5770:	ed 01       	movw	r28, r26
    5772:	20 e0       	ldi	r18, 0x00	; 0
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	ce 17       	cp	r28, r30
    5778:	df 07       	cpc	r29, r31
    577a:	40 f4       	brcc	.+16     	; 0x578c <free+0x5a>
    577c:	4a 81       	ldd	r20, Y+2	; 0x02
    577e:	5b 81       	ldd	r21, Y+3	; 0x03
    5780:	9e 01       	movw	r18, r28
    5782:	41 15       	cp	r20, r1
    5784:	51 05       	cpc	r21, r1
    5786:	f1 f0       	breq	.+60     	; 0x57c4 <free+0x92>
    5788:	ea 01       	movw	r28, r20
    578a:	f5 cf       	rjmp	.-22     	; 0x5776 <free+0x44>
    578c:	c2 83       	std	Z+2, r28	; 0x02
    578e:	d3 83       	std	Z+3, r29	; 0x03
    5790:	40 81       	ld	r20, Z
    5792:	51 81       	ldd	r21, Z+1	; 0x01
    5794:	84 0f       	add	r24, r20
    5796:	95 1f       	adc	r25, r21
    5798:	c8 17       	cp	r28, r24
    579a:	d9 07       	cpc	r29, r25
    579c:	59 f4       	brne	.+22     	; 0x57b4 <free+0x82>
    579e:	88 81       	ld	r24, Y
    57a0:	99 81       	ldd	r25, Y+1	; 0x01
    57a2:	84 0f       	add	r24, r20
    57a4:	95 1f       	adc	r25, r21
    57a6:	02 96       	adiw	r24, 0x02	; 2
    57a8:	80 83       	st	Z, r24
    57aa:	91 83       	std	Z+1, r25	; 0x01
    57ac:	8a 81       	ldd	r24, Y+2	; 0x02
    57ae:	9b 81       	ldd	r25, Y+3	; 0x03
    57b0:	82 83       	std	Z+2, r24	; 0x02
    57b2:	93 83       	std	Z+3, r25	; 0x03
    57b4:	21 15       	cp	r18, r1
    57b6:	31 05       	cpc	r19, r1
    57b8:	29 f4       	brne	.+10     	; 0x57c4 <free+0x92>
    57ba:	e0 93 2c 22 	sts	0x222C, r30	; 0x80222c <__flp>
    57be:	f0 93 2d 22 	sts	0x222D, r31	; 0x80222d <__flp+0x1>
    57c2:	3d c0       	rjmp	.+122    	; 0x583e <free+0x10c>
    57c4:	e9 01       	movw	r28, r18
    57c6:	ea 83       	std	Y+2, r30	; 0x02
    57c8:	fb 83       	std	Y+3, r31	; 0x03
    57ca:	49 91       	ld	r20, Y+
    57cc:	59 91       	ld	r21, Y+
    57ce:	c4 0f       	add	r28, r20
    57d0:	d5 1f       	adc	r29, r21
    57d2:	ec 17       	cp	r30, r28
    57d4:	fd 07       	cpc	r31, r29
    57d6:	61 f4       	brne	.+24     	; 0x57f0 <free+0xbe>
    57d8:	80 81       	ld	r24, Z
    57da:	91 81       	ldd	r25, Z+1	; 0x01
    57dc:	84 0f       	add	r24, r20
    57de:	95 1f       	adc	r25, r21
    57e0:	02 96       	adiw	r24, 0x02	; 2
    57e2:	e9 01       	movw	r28, r18
    57e4:	88 83       	st	Y, r24
    57e6:	99 83       	std	Y+1, r25	; 0x01
    57e8:	82 81       	ldd	r24, Z+2	; 0x02
    57ea:	93 81       	ldd	r25, Z+3	; 0x03
    57ec:	8a 83       	std	Y+2, r24	; 0x02
    57ee:	9b 83       	std	Y+3, r25	; 0x03
    57f0:	e0 e0       	ldi	r30, 0x00	; 0
    57f2:	f0 e0       	ldi	r31, 0x00	; 0
    57f4:	12 96       	adiw	r26, 0x02	; 2
    57f6:	8d 91       	ld	r24, X+
    57f8:	9c 91       	ld	r25, X
    57fa:	13 97       	sbiw	r26, 0x03	; 3
    57fc:	00 97       	sbiw	r24, 0x00	; 0
    57fe:	19 f0       	breq	.+6      	; 0x5806 <free+0xd4>
    5800:	fd 01       	movw	r30, r26
    5802:	dc 01       	movw	r26, r24
    5804:	f7 cf       	rjmp	.-18     	; 0x57f4 <free+0xc2>
    5806:	8d 91       	ld	r24, X+
    5808:	9c 91       	ld	r25, X
    580a:	11 97       	sbiw	r26, 0x01	; 1
    580c:	9d 01       	movw	r18, r26
    580e:	2e 5f       	subi	r18, 0xFE	; 254
    5810:	3f 4f       	sbci	r19, 0xFF	; 255
    5812:	82 0f       	add	r24, r18
    5814:	93 1f       	adc	r25, r19
    5816:	20 91 2a 22 	lds	r18, 0x222A	; 0x80222a <__brkval>
    581a:	30 91 2b 22 	lds	r19, 0x222B	; 0x80222b <__brkval+0x1>
    581e:	28 17       	cp	r18, r24
    5820:	39 07       	cpc	r19, r25
    5822:	69 f4       	brne	.+26     	; 0x583e <free+0x10c>
    5824:	30 97       	sbiw	r30, 0x00	; 0
    5826:	29 f4       	brne	.+10     	; 0x5832 <free+0x100>
    5828:	10 92 2c 22 	sts	0x222C, r1	; 0x80222c <__flp>
    582c:	10 92 2d 22 	sts	0x222D, r1	; 0x80222d <__flp+0x1>
    5830:	02 c0       	rjmp	.+4      	; 0x5836 <free+0x104>
    5832:	12 82       	std	Z+2, r1	; 0x02
    5834:	13 82       	std	Z+3, r1	; 0x03
    5836:	a0 93 2a 22 	sts	0x222A, r26	; 0x80222a <__brkval>
    583a:	b0 93 2b 22 	sts	0x222B, r27	; 0x80222b <__brkval+0x1>
    583e:	df 91       	pop	r29
    5840:	cf 91       	pop	r28
    5842:	08 95       	ret

00005844 <isspace>:
    5844:	91 11       	cpse	r25, r1
    5846:	1f c1       	rjmp	.+574    	; 0x5a86 <__ctype_isfalse>
    5848:	80 32       	cpi	r24, 0x20	; 32
    584a:	19 f0       	breq	.+6      	; 0x5852 <isspace+0xe>
    584c:	89 50       	subi	r24, 0x09	; 9
    584e:	85 50       	subi	r24, 0x05	; 5
    5850:	d0 f7       	brcc	.-12     	; 0x5846 <isspace+0x2>
    5852:	08 95       	ret

00005854 <strchr_P>:
    5854:	fc 01       	movw	r30, r24
    5856:	05 90       	lpm	r0, Z+
    5858:	06 16       	cp	r0, r22
    585a:	21 f0       	breq	.+8      	; 0x5864 <strchr_P+0x10>
    585c:	00 20       	and	r0, r0
    585e:	d9 f7       	brne	.-10     	; 0x5856 <strchr_P+0x2>
    5860:	c0 01       	movw	r24, r0
    5862:	08 95       	ret
    5864:	31 97       	sbiw	r30, 0x01	; 1
    5866:	cf 01       	movw	r24, r30
    5868:	08 95       	ret

0000586a <strnlen_P>:
    586a:	fc 01       	movw	r30, r24
    586c:	05 90       	lpm	r0, Z+
    586e:	61 50       	subi	r22, 0x01	; 1
    5870:	70 40       	sbci	r23, 0x00	; 0
    5872:	01 10       	cpse	r0, r1
    5874:	d8 f7       	brcc	.-10     	; 0x586c <strnlen_P+0x2>
    5876:	80 95       	com	r24
    5878:	90 95       	com	r25
    587a:	8e 0f       	add	r24, r30
    587c:	9f 1f       	adc	r25, r31
    587e:	08 95       	ret

00005880 <memset>:
    5880:	dc 01       	movw	r26, r24
    5882:	01 c0       	rjmp	.+2      	; 0x5886 <memset+0x6>
    5884:	6d 93       	st	X+, r22
    5886:	41 50       	subi	r20, 0x01	; 1
    5888:	50 40       	sbci	r21, 0x00	; 0
    588a:	e0 f7       	brcc	.-8      	; 0x5884 <memset+0x4>
    588c:	08 95       	ret

0000588e <strnlen>:
    588e:	fc 01       	movw	r30, r24
    5890:	61 50       	subi	r22, 0x01	; 1
    5892:	70 40       	sbci	r23, 0x00	; 0
    5894:	01 90       	ld	r0, Z+
    5896:	01 10       	cpse	r0, r1
    5898:	d8 f7       	brcc	.-10     	; 0x5890 <strnlen+0x2>
    589a:	80 95       	com	r24
    589c:	90 95       	com	r25
    589e:	8e 0f       	add	r24, r30
    58a0:	9f 1f       	adc	r25, r31
    58a2:	08 95       	ret

000058a4 <fgetc>:
    58a4:	cf 93       	push	r28
    58a6:	df 93       	push	r29
    58a8:	ec 01       	movw	r28, r24
    58aa:	2b 81       	ldd	r18, Y+3	; 0x03
    58ac:	20 ff       	sbrs	r18, 0
    58ae:	33 c0       	rjmp	.+102    	; 0x5916 <fgetc+0x72>
    58b0:	26 ff       	sbrs	r18, 6
    58b2:	0a c0       	rjmp	.+20     	; 0x58c8 <fgetc+0x24>
    58b4:	2f 7b       	andi	r18, 0xBF	; 191
    58b6:	2b 83       	std	Y+3, r18	; 0x03
    58b8:	8e 81       	ldd	r24, Y+6	; 0x06
    58ba:	9f 81       	ldd	r25, Y+7	; 0x07
    58bc:	01 96       	adiw	r24, 0x01	; 1
    58be:	8e 83       	std	Y+6, r24	; 0x06
    58c0:	9f 83       	std	Y+7, r25	; 0x07
    58c2:	8a 81       	ldd	r24, Y+2	; 0x02
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	29 c0       	rjmp	.+82     	; 0x591a <fgetc+0x76>
    58c8:	22 ff       	sbrs	r18, 2
    58ca:	0f c0       	rjmp	.+30     	; 0x58ea <fgetc+0x46>
    58cc:	e8 81       	ld	r30, Y
    58ce:	f9 81       	ldd	r31, Y+1	; 0x01
    58d0:	80 81       	ld	r24, Z
    58d2:	08 2e       	mov	r0, r24
    58d4:	00 0c       	add	r0, r0
    58d6:	99 0b       	sbc	r25, r25
    58d8:	00 97       	sbiw	r24, 0x00	; 0
    58da:	19 f4       	brne	.+6      	; 0x58e2 <fgetc+0x3e>
    58dc:	20 62       	ori	r18, 0x20	; 32
    58de:	2b 83       	std	Y+3, r18	; 0x03
    58e0:	1a c0       	rjmp	.+52     	; 0x5916 <fgetc+0x72>
    58e2:	31 96       	adiw	r30, 0x01	; 1
    58e4:	e8 83       	st	Y, r30
    58e6:	f9 83       	std	Y+1, r31	; 0x01
    58e8:	0e c0       	rjmp	.+28     	; 0x5906 <fgetc+0x62>
    58ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    58ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    58ee:	19 95       	eicall
    58f0:	97 ff       	sbrs	r25, 7
    58f2:	09 c0       	rjmp	.+18     	; 0x5906 <fgetc+0x62>
    58f4:	2b 81       	ldd	r18, Y+3	; 0x03
    58f6:	01 96       	adiw	r24, 0x01	; 1
    58f8:	11 f0       	breq	.+4      	; 0x58fe <fgetc+0x5a>
    58fa:	80 e2       	ldi	r24, 0x20	; 32
    58fc:	01 c0       	rjmp	.+2      	; 0x5900 <fgetc+0x5c>
    58fe:	80 e1       	ldi	r24, 0x10	; 16
    5900:	82 2b       	or	r24, r18
    5902:	8b 83       	std	Y+3, r24	; 0x03
    5904:	08 c0       	rjmp	.+16     	; 0x5916 <fgetc+0x72>
    5906:	2e 81       	ldd	r18, Y+6	; 0x06
    5908:	3f 81       	ldd	r19, Y+7	; 0x07
    590a:	2f 5f       	subi	r18, 0xFF	; 255
    590c:	3f 4f       	sbci	r19, 0xFF	; 255
    590e:	2e 83       	std	Y+6, r18	; 0x06
    5910:	3f 83       	std	Y+7, r19	; 0x07
    5912:	99 27       	eor	r25, r25
    5914:	02 c0       	rjmp	.+4      	; 0x591a <fgetc+0x76>
    5916:	8f ef       	ldi	r24, 0xFF	; 255
    5918:	9f ef       	ldi	r25, 0xFF	; 255
    591a:	df 91       	pop	r29
    591c:	cf 91       	pop	r28
    591e:	08 95       	ret

00005920 <fputc>:
    5920:	0f 93       	push	r16
    5922:	1f 93       	push	r17
    5924:	cf 93       	push	r28
    5926:	df 93       	push	r29
    5928:	fb 01       	movw	r30, r22
    592a:	23 81       	ldd	r18, Z+3	; 0x03
    592c:	21 fd       	sbrc	r18, 1
    592e:	03 c0       	rjmp	.+6      	; 0x5936 <fputc+0x16>
    5930:	8f ef       	ldi	r24, 0xFF	; 255
    5932:	9f ef       	ldi	r25, 0xFF	; 255
    5934:	2c c0       	rjmp	.+88     	; 0x598e <fputc+0x6e>
    5936:	22 ff       	sbrs	r18, 2
    5938:	16 c0       	rjmp	.+44     	; 0x5966 <fputc+0x46>
    593a:	46 81       	ldd	r20, Z+6	; 0x06
    593c:	57 81       	ldd	r21, Z+7	; 0x07
    593e:	24 81       	ldd	r18, Z+4	; 0x04
    5940:	35 81       	ldd	r19, Z+5	; 0x05
    5942:	42 17       	cp	r20, r18
    5944:	53 07       	cpc	r21, r19
    5946:	44 f4       	brge	.+16     	; 0x5958 <fputc+0x38>
    5948:	a0 81       	ld	r26, Z
    594a:	b1 81       	ldd	r27, Z+1	; 0x01
    594c:	9d 01       	movw	r18, r26
    594e:	2f 5f       	subi	r18, 0xFF	; 255
    5950:	3f 4f       	sbci	r19, 0xFF	; 255
    5952:	20 83       	st	Z, r18
    5954:	31 83       	std	Z+1, r19	; 0x01
    5956:	8c 93       	st	X, r24
    5958:	26 81       	ldd	r18, Z+6	; 0x06
    595a:	37 81       	ldd	r19, Z+7	; 0x07
    595c:	2f 5f       	subi	r18, 0xFF	; 255
    595e:	3f 4f       	sbci	r19, 0xFF	; 255
    5960:	26 83       	std	Z+6, r18	; 0x06
    5962:	37 83       	std	Z+7, r19	; 0x07
    5964:	14 c0       	rjmp	.+40     	; 0x598e <fputc+0x6e>
    5966:	8b 01       	movw	r16, r22
    5968:	ec 01       	movw	r28, r24
    596a:	fb 01       	movw	r30, r22
    596c:	00 84       	ldd	r0, Z+8	; 0x08
    596e:	f1 85       	ldd	r31, Z+9	; 0x09
    5970:	e0 2d       	mov	r30, r0
    5972:	19 95       	eicall
    5974:	89 2b       	or	r24, r25
    5976:	e1 f6       	brne	.-72     	; 0x5930 <fputc+0x10>
    5978:	d8 01       	movw	r26, r16
    597a:	16 96       	adiw	r26, 0x06	; 6
    597c:	8d 91       	ld	r24, X+
    597e:	9c 91       	ld	r25, X
    5980:	17 97       	sbiw	r26, 0x07	; 7
    5982:	01 96       	adiw	r24, 0x01	; 1
    5984:	16 96       	adiw	r26, 0x06	; 6
    5986:	8d 93       	st	X+, r24
    5988:	9c 93       	st	X, r25
    598a:	17 97       	sbiw	r26, 0x07	; 7
    598c:	ce 01       	movw	r24, r28
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	1f 91       	pop	r17
    5994:	0f 91       	pop	r16
    5996:	08 95       	ret

00005998 <ungetc>:
    5998:	fb 01       	movw	r30, r22
    599a:	23 81       	ldd	r18, Z+3	; 0x03
    599c:	20 ff       	sbrs	r18, 0
    599e:	12 c0       	rjmp	.+36     	; 0x59c4 <ungetc+0x2c>
    59a0:	26 fd       	sbrc	r18, 6
    59a2:	10 c0       	rjmp	.+32     	; 0x59c4 <ungetc+0x2c>
    59a4:	8f 3f       	cpi	r24, 0xFF	; 255
    59a6:	3f ef       	ldi	r19, 0xFF	; 255
    59a8:	93 07       	cpc	r25, r19
    59aa:	61 f0       	breq	.+24     	; 0x59c4 <ungetc+0x2c>
    59ac:	82 83       	std	Z+2, r24	; 0x02
    59ae:	2f 7d       	andi	r18, 0xDF	; 223
    59b0:	20 64       	ori	r18, 0x40	; 64
    59b2:	23 83       	std	Z+3, r18	; 0x03
    59b4:	26 81       	ldd	r18, Z+6	; 0x06
    59b6:	37 81       	ldd	r19, Z+7	; 0x07
    59b8:	21 50       	subi	r18, 0x01	; 1
    59ba:	31 09       	sbc	r19, r1
    59bc:	26 83       	std	Z+6, r18	; 0x06
    59be:	37 83       	std	Z+7, r19	; 0x07
    59c0:	99 27       	eor	r25, r25
    59c2:	08 95       	ret
    59c4:	8f ef       	ldi	r24, 0xFF	; 255
    59c6:	9f ef       	ldi	r25, 0xFF	; 255
    59c8:	08 95       	ret

000059ca <__ultoa_invert>:
    59ca:	fa 01       	movw	r30, r20
    59cc:	aa 27       	eor	r26, r26
    59ce:	28 30       	cpi	r18, 0x08	; 8
    59d0:	51 f1       	breq	.+84     	; 0x5a26 <__ultoa_invert+0x5c>
    59d2:	20 31       	cpi	r18, 0x10	; 16
    59d4:	81 f1       	breq	.+96     	; 0x5a36 <__ultoa_invert+0x6c>
    59d6:	e8 94       	clt
    59d8:	6f 93       	push	r22
    59da:	6e 7f       	andi	r22, 0xFE	; 254
    59dc:	6e 5f       	subi	r22, 0xFE	; 254
    59de:	7f 4f       	sbci	r23, 0xFF	; 255
    59e0:	8f 4f       	sbci	r24, 0xFF	; 255
    59e2:	9f 4f       	sbci	r25, 0xFF	; 255
    59e4:	af 4f       	sbci	r26, 0xFF	; 255
    59e6:	b1 e0       	ldi	r27, 0x01	; 1
    59e8:	3e d0       	rcall	.+124    	; 0x5a66 <__ultoa_invert+0x9c>
    59ea:	b4 e0       	ldi	r27, 0x04	; 4
    59ec:	3c d0       	rcall	.+120    	; 0x5a66 <__ultoa_invert+0x9c>
    59ee:	67 0f       	add	r22, r23
    59f0:	78 1f       	adc	r23, r24
    59f2:	89 1f       	adc	r24, r25
    59f4:	9a 1f       	adc	r25, r26
    59f6:	a1 1d       	adc	r26, r1
    59f8:	68 0f       	add	r22, r24
    59fa:	79 1f       	adc	r23, r25
    59fc:	8a 1f       	adc	r24, r26
    59fe:	91 1d       	adc	r25, r1
    5a00:	a1 1d       	adc	r26, r1
    5a02:	6a 0f       	add	r22, r26
    5a04:	71 1d       	adc	r23, r1
    5a06:	81 1d       	adc	r24, r1
    5a08:	91 1d       	adc	r25, r1
    5a0a:	a1 1d       	adc	r26, r1
    5a0c:	20 d0       	rcall	.+64     	; 0x5a4e <__ultoa_invert+0x84>
    5a0e:	09 f4       	brne	.+2      	; 0x5a12 <__ultoa_invert+0x48>
    5a10:	68 94       	set
    5a12:	3f 91       	pop	r19
    5a14:	2a e0       	ldi	r18, 0x0A	; 10
    5a16:	26 9f       	mul	r18, r22
    5a18:	11 24       	eor	r1, r1
    5a1a:	30 19       	sub	r19, r0
    5a1c:	30 5d       	subi	r19, 0xD0	; 208
    5a1e:	31 93       	st	Z+, r19
    5a20:	de f6       	brtc	.-74     	; 0x59d8 <__ultoa_invert+0xe>
    5a22:	cf 01       	movw	r24, r30
    5a24:	08 95       	ret
    5a26:	46 2f       	mov	r20, r22
    5a28:	47 70       	andi	r20, 0x07	; 7
    5a2a:	40 5d       	subi	r20, 0xD0	; 208
    5a2c:	41 93       	st	Z+, r20
    5a2e:	b3 e0       	ldi	r27, 0x03	; 3
    5a30:	0f d0       	rcall	.+30     	; 0x5a50 <__ultoa_invert+0x86>
    5a32:	c9 f7       	brne	.-14     	; 0x5a26 <__ultoa_invert+0x5c>
    5a34:	f6 cf       	rjmp	.-20     	; 0x5a22 <__ultoa_invert+0x58>
    5a36:	46 2f       	mov	r20, r22
    5a38:	4f 70       	andi	r20, 0x0F	; 15
    5a3a:	40 5d       	subi	r20, 0xD0	; 208
    5a3c:	4a 33       	cpi	r20, 0x3A	; 58
    5a3e:	18 f0       	brcs	.+6      	; 0x5a46 <__ultoa_invert+0x7c>
    5a40:	49 5d       	subi	r20, 0xD9	; 217
    5a42:	31 fd       	sbrc	r19, 1
    5a44:	40 52       	subi	r20, 0x20	; 32
    5a46:	41 93       	st	Z+, r20
    5a48:	02 d0       	rcall	.+4      	; 0x5a4e <__ultoa_invert+0x84>
    5a4a:	a9 f7       	brne	.-22     	; 0x5a36 <__ultoa_invert+0x6c>
    5a4c:	ea cf       	rjmp	.-44     	; 0x5a22 <__ultoa_invert+0x58>
    5a4e:	b4 e0       	ldi	r27, 0x04	; 4
    5a50:	a6 95       	lsr	r26
    5a52:	97 95       	ror	r25
    5a54:	87 95       	ror	r24
    5a56:	77 95       	ror	r23
    5a58:	67 95       	ror	r22
    5a5a:	ba 95       	dec	r27
    5a5c:	c9 f7       	brne	.-14     	; 0x5a50 <__ultoa_invert+0x86>
    5a5e:	00 97       	sbiw	r24, 0x00	; 0
    5a60:	61 05       	cpc	r22, r1
    5a62:	71 05       	cpc	r23, r1
    5a64:	08 95       	ret
    5a66:	9b 01       	movw	r18, r22
    5a68:	ac 01       	movw	r20, r24
    5a6a:	0a 2e       	mov	r0, r26
    5a6c:	06 94       	lsr	r0
    5a6e:	57 95       	ror	r21
    5a70:	47 95       	ror	r20
    5a72:	37 95       	ror	r19
    5a74:	27 95       	ror	r18
    5a76:	ba 95       	dec	r27
    5a78:	c9 f7       	brne	.-14     	; 0x5a6c <__ultoa_invert+0xa2>
    5a7a:	62 0f       	add	r22, r18
    5a7c:	73 1f       	adc	r23, r19
    5a7e:	84 1f       	adc	r24, r20
    5a80:	95 1f       	adc	r25, r21
    5a82:	a0 1d       	adc	r26, r0
    5a84:	08 95       	ret

00005a86 <__ctype_isfalse>:
    5a86:	99 27       	eor	r25, r25
    5a88:	88 27       	eor	r24, r24

00005a8a <__ctype_istrue>:
    5a8a:	08 95       	ret

00005a8c <_exit>:
    5a8c:	f8 94       	cli

00005a8e <__stop_program>:
    5a8e:	ff cf       	rjmp	.-2      	; 0x5a8e <__stop_program>
