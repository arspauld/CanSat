
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00802000  00006478  0000650c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016b  008020b4  008020b4  000065c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000065c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000661c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000790  00000000  00000000  00006660  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000184b6  00000000  00000000  00006df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006445  00000000  00000000  0001f2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a5aa  00000000  00000000  000256eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027a4  00000000  00000000  0002fc98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003f521  00000000  00000000  0003243c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000867b  00000000  00000000  0007195d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000760  00000000  00000000  00079fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000052fb  00000000  00000000  0007a738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__vector_13>
      38:	09 c5       	rjmp	.+2578   	; 0xa4c <__vector_14>
      3a:	00 00       	nop
      3c:	3f c5       	rjmp	.+2686   	; 0xabc <__vector_15>
      3e:	00 00       	nop
      40:	75 c5       	rjmp	.+2794   	; 0xb2c <__vector_16>
      42:	00 00       	nop
      44:	ab c5       	rjmp	.+2902   	; 0xb9c <__vector_17>
      46:	00 00       	nop
      48:	e1 c5       	rjmp	.+3010   	; 0xc0c <__vector_18>
      4a:	00 00       	nop
      4c:	17 c6       	rjmp	.+3118   	; 0xc7c <__vector_19>
      4e:	00 00       	nop
      50:	4d c6       	rjmp	.+3226   	; 0xcec <__vector_20>
      52:	00 00       	nop
      54:	83 c6       	rjmp	.+3334   	; 0xd5c <__vector_21>
      56:	00 00       	nop
      58:	b9 c6       	rjmp	.+3442   	; 0xdcc <__vector_22>
      5a:	00 00       	nop
      5c:	ef c6       	rjmp	.+3550   	; 0xe3c <__vector_23>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	2b c2       	rjmp	.+1110   	; 0x4e8 <__vector_36>
      92:	00 00       	nop
      94:	6f c2       	rjmp	.+1246   	; 0x574 <__vector_37>
      96:	00 00       	nop
      98:	b3 c2       	rjmp	.+1382   	; 0x600 <__vector_38>
      9a:	00 00       	nop
      9c:	e3 c3       	rjmp	.+1990   	; 0x864 <__vector_39>
      9e:	00 00       	nop
      a0:	1e c4       	rjmp	.+2108   	; 0x8de <__vector_40>
      a2:	00 00       	nop
      a4:	59 c4       	rjmp	.+2226   	; 0x958 <__vector_41>
      a6:	00 00       	nop
      a8:	94 c4       	rjmp	.+2344   	; 0x9d2 <__vector_42>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__vector_46>
      bc:	0c 94 a5 20 	jmp	0x414a	; 0x414a <__vector_47>
      c0:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_48>
      c4:	0c 94 be 09 	jmp	0x137c	; 0x137c <__vector_49>
      c8:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__vector_50>
      cc:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_51>
      d0:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__vector_52>
      d4:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_53>
      d8:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__vector_54>
      dc:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__vector_55>
      e0:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__vector_56>
      e4:	0b c1       	rjmp	.+534    	; 0x2fc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 f4 22 	jmp	0x45e8	; 0x45e8 <__vector_58>
      ec:	07 c1       	rjmp	.+526    	; 0x2fc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	05 c1       	rjmp	.+522    	; 0x2fc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	03 c1       	rjmp	.+518    	; 0x2fc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	01 c1       	rjmp	.+514    	; 0x2fc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ff c0       	rjmp	.+510    	; 0x2fc <__bad_interrupt>
      fe:	00 00       	nop
     100:	fd c0       	rjmp	.+506    	; 0x2fc <__bad_interrupt>
     102:	00 00       	nop
     104:	fb c0       	rjmp	.+502    	; 0x2fc <__bad_interrupt>
     106:	00 00       	nop
     108:	f9 c0       	rjmp	.+498    	; 0x2fc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f7 c0       	rjmp	.+494    	; 0x2fc <__bad_interrupt>
     10e:	00 00       	nop
     110:	21 c1       	rjmp	.+578    	; 0x354 <__vector_68>
     112:	00 00       	nop
     114:	65 c1       	rjmp	.+714    	; 0x3e0 <__vector_69>
     116:	00 00       	nop
     118:	a9 c1       	rjmp	.+850    	; 0x46c <__vector_70>
     11a:	00 00       	nop
     11c:	af c2       	rjmp	.+1374   	; 0x67c <__vector_71>
     11e:	00 00       	nop
     120:	ea c2       	rjmp	.+1492   	; 0x6f6 <__vector_72>
     122:	00 00       	nop
     124:	25 c3       	rjmp	.+1610   	; 0x770 <__vector_73>
     126:	00 00       	nop
     128:	60 c3       	rjmp	.+1728   	; 0x7ea <__vector_74>
     12a:	00 00       	nop
     12c:	e7 c0       	rjmp	.+462    	; 0x2fc <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__vector_76>
     134:	bb c6       	rjmp	.+3446   	; 0xeac <__vector_77>
     136:	00 00       	nop
     138:	f1 c6       	rjmp	.+3554   	; 0xf1c <__vector_78>
     13a:	00 00       	nop
     13c:	27 c7       	rjmp	.+3662   	; 0xf8c <__vector_79>
     13e:	00 00       	nop
     140:	5d c7       	rjmp	.+3770   	; 0xffc <__vector_80>
     142:	00 00       	nop
     144:	93 c7       	rjmp	.+3878   	; 0x106c <__vector_81>
     146:	00 00       	nop
     148:	c9 c7       	rjmp	.+3986   	; 0x10dc <__vector_82>
     14a:	00 00       	nop
     14c:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_83>
     150:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__vector_84>
     154:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_85>
     158:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_86>
     15c:	cf c0       	rjmp	.+414    	; 0x2fc <__bad_interrupt>
     15e:	00 00       	nop
     160:	cd c0       	rjmp	.+410    	; 0x2fc <__bad_interrupt>
     162:	00 00       	nop
     164:	cb c0       	rjmp	.+406    	; 0x2fc <__bad_interrupt>
     166:	00 00       	nop
     168:	c9 c0       	rjmp	.+402    	; 0x2fc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 2e 23 	jmp	0x465c	; 0x465c <__vector_91>
     170:	c5 c0       	rjmp	.+394    	; 0x2fc <__bad_interrupt>
     172:	00 00       	nop
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__bad_interrupt>
     176:	00 00       	nop
     178:	c1 c0       	rjmp	.+386    	; 0x2fc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bf c0       	rjmp	.+382    	; 0x2fc <__bad_interrupt>
     17e:	00 00       	nop
     180:	bd c0       	rjmp	.+378    	; 0x2fc <__bad_interrupt>
     182:	00 00       	nop
     184:	bb c0       	rjmp	.+374    	; 0x2fc <__bad_interrupt>
     186:	00 00       	nop
     188:	b9 c0       	rjmp	.+370    	; 0x2fc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b7 c0       	rjmp	.+366    	; 0x2fc <__bad_interrupt>
     18e:	00 00       	nop
     190:	b5 c0       	rjmp	.+362    	; 0x2fc <__bad_interrupt>
     192:	00 00       	nop
     194:	b3 c0       	rjmp	.+358    	; 0x2fc <__bad_interrupt>
     196:	00 00       	nop
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	af c0       	rjmp	.+350    	; 0x2fc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ad c0       	rjmp	.+346    	; 0x2fc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ab c0       	rjmp	.+342    	; 0x2fc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a9 c0       	rjmp	.+338    	; 0x2fc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__vector_107>
     1b0:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_108>
     1b4:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__vector_109>
     1b8:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__vector_110>
     1bc:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__vector_111>
     1c0:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <__vector_112>
     1c4:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__vector_113>
     1c8:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__vector_114>
     1cc:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__vector_115>
     1d0:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__vector_116>
     1d4:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__vector_117>
     1d8:	91 c0       	rjmp	.+290    	; 0x2fc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8f c0       	rjmp	.+286    	; 0x2fc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8d c0       	rjmp	.+282    	; 0x2fc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8b c0       	rjmp	.+278    	; 0x2fc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	89 c0       	rjmp	.+274    	; 0x2fc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	87 c0       	rjmp	.+270    	; 0x2fc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	83 c0       	rjmp	.+262    	; 0x2fc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	81 c0       	rjmp	.+258    	; 0x2fc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	ec 1f       	adc	r30, r28
     1fe:	ea 1f       	adc	r30, r26
     200:	e8 1f       	adc	r30, r24
     202:	f0 1f       	adc	r31, r16
     204:	e6 1f       	adc	r30, r22
     206:	e4 1f       	adc	r30, r20
     208:	f1 1f       	adc	r31, r17
     20a:	f1 1f       	adc	r31, r17
     20c:	f1 1f       	adc	r31, r17
     20e:	f1 1f       	adc	r31, r17
     210:	f1 1f       	adc	r31, r17
     212:	f1 1f       	adc	r31, r17
     214:	f1 1f       	adc	r31, r17
     216:	f1 1f       	adc	r31, r17
     218:	f1 1f       	adc	r31, r17
     21a:	f1 1f       	adc	r31, r17
     21c:	f1 1f       	adc	r31, r17
     21e:	f1 1f       	adc	r31, r17
     220:	ee 1f       	adc	r30, r30
     222:	07 63       	ori	r16, 0x37	; 55
     224:	42 36       	cpi	r20, 0x62	; 98
     226:	b7 9b       	sbis	0x16, 7	; 22
     228:	d8 a7       	std	Y+40, r29	; 0x28
     22a:	1a 39       	cpi	r17, 0x9A	; 154
     22c:	68 56       	subi	r22, 0x68	; 104
     22e:	18 ae       	std	Y+56, r1	; 0x38
     230:	ba ab       	std	Y+50, r27	; 0x32
     232:	55 8c       	ldd	r5, Z+29	; 0x1d
     234:	1d 3c       	cpi	r17, 0xCD	; 205
     236:	b7 cc       	rjmp	.-1682   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     238:	57 63       	ori	r21, 0x37	; 55
     23a:	bd 6d       	ori	r27, 0xDD	; 221
     23c:	ed fd       	.word	0xfded	; ????
     23e:	75 3e       	cpi	r23, 0xE5	; 229
     240:	f6 17       	cp	r31, r22
     242:	72 31       	cpi	r23, 0x12	; 18
     244:	bf 00       	.word	0x00bf	; ????
     246:	00 00       	nop
     248:	80 3f       	cpi	r24, 0xF0	; 240
     24a:	08 00       	.word	0x0008	; ????
     24c:	00 00       	nop
     24e:	be 92       	st	-X, r11
     250:	24 49       	sbci	r18, 0x94	; 148
     252:	12 3e       	cpi	r17, 0xE2	; 226
     254:	ab aa       	std	Y+51, r10	; 0x33
     256:	aa 2a       	or	r10, r26
     258:	be cd       	rjmp	.-1156   	; 0xfffffdd6 <__eeprom_end+0xff7efdd6>
     25a:	cc cc       	rjmp	.-1640   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
     25c:	4c 3e       	cpi	r20, 0xEC	; 236
     25e:	00 00       	nop
     260:	00 80       	ld	r0, Z
     262:	be ab       	std	Y+54, r27	; 0x36
     264:	aa aa       	std	Y+50, r10	; 0x32
     266:	aa 3e       	cpi	r26, 0xEA	; 234
     268:	00 00       	nop
     26a:	00 00       	nop
     26c:	bf 00       	.word	0x00bf	; ????
     26e:	00 00       	nop
     270:	80 3f       	cpi	r24, 0xF0	; 240
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 08       	sbc	r0, r0
     278:	41 78       	andi	r20, 0x81	; 129
     27a:	d3 bb       	out	0x13, r29	; 19
     27c:	43 87       	std	Z+11, r20	; 0x0b
     27e:	d1 13       	cpse	r29, r17
     280:	3d 19       	sub	r19, r13
     282:	0e 3c       	cpi	r16, 0xCE	; 206
     284:	c3 bd       	out	0x23, r28	; 35
     286:	42 82       	std	Z+2, r4	; 0x02
     288:	ad 2b       	or	r26, r29
     28a:	3e 68       	ori	r19, 0x8E	; 142
     28c:	ec 82       	std	Y+4, r14	; 0x04
     28e:	76 be       	out	0x36, r7	; 54
     290:	d9 8f       	std	Y+25, r29	; 0x19
     292:	e1 a9       	ldd	r30, Z+49	; 0x31
     294:	3e 4c       	sbci	r19, 0xCE	; 206
     296:	80 ef       	ldi	r24, 0xF0	; 240
     298:	ff be       	out	0x3f, r15	; 63
     29a:	01 c4       	rjmp	.+2050   	; 0xa9e <__vector_14+0x52>
     29c:	ff 7f       	andi	r31, 0xFF	; 255
     29e:	3f 00       	.word	0x003f	; ????
     2a0:	00 00       	nop
	...

000002a4 <__trampolines_end>:
     2a4:	63 64       	ori	r22, 0x43	; 67
     2a6:	69 6e       	ori	r22, 0xE9	; 233
     2a8:	6f 70       	andi	r22, 0x0F	; 15
     2aa:	73 75       	andi	r23, 0x53	; 83
     2ac:	78 58       	subi	r23, 0x88	; 136
     2ae:	5b 00       	.word	0x005b	; ????

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df e3       	ldi	r29, 0x3F	; 63
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60
     2c0:	18 be       	out	0x38, r1	; 56
     2c2:	19 be       	out	0x39, r1	; 57
     2c4:	1a be       	out	0x3a, r1	; 58
     2c6:	1b be       	out	0x3b, r1	; 59

000002c8 <__do_copy_data>:
     2c8:	10 e2       	ldi	r17, 0x20	; 32
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e2       	ldi	r27, 0x20	; 32
     2ce:	e8 e7       	ldi	r30, 0x78	; 120
     2d0:	f4 e6       	ldi	r31, 0x64	; 100
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0b bf       	out	0x3b, r16	; 59
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x14>
     2d8:	07 90       	elpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	a4 3b       	cpi	r26, 0xB4	; 180
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0x10>
     2e2:	1b be       	out	0x3b, r1	; 59

000002e4 <__do_clear_bss>:
     2e4:	22 e2       	ldi	r18, 0x22	; 34
     2e6:	a4 eb       	ldi	r26, 0xB4	; 180
     2e8:	b0 e2       	ldi	r27, 0x20	; 32
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	af 31       	cpi	r26, 0x1F	; 31
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <main>
     2f8:	0c 94 3a 32 	jmp	0x6474	; 0x6474 <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     308:	80 91 6c 21 	lds	r24, 0x216C	; 0x80216c <stdio_base>
     30c:	90 91 6d 21 	lds	r25, 0x216D	; 0x80216d <stdio_base+0x1>
     310:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <ptr_get>
     314:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <ptr_get+0x1>
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	19 95       	eicall
	return c;
     320:	89 81       	ldd	r24, Y+1	; 0x01
}
     322:	08 2e       	mov	r0, r24
     324:	00 0c       	add	r0, r0
     326:	99 0b       	sbc	r25, r25
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     330:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     332:	80 91 6c 21 	lds	r24, 0x216C	; 0x80216c <stdio_base>
     336:	90 91 6d 21 	lds	r25, 0x216D	; 0x80216d <stdio_base+0x1>
     33a:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <ptr_put>
     33e:	f0 91 6b 21 	lds	r31, 0x216B	; 0x80216b <ptr_put+0x1>
     342:	19 95       	eicall
     344:	99 23       	and	r25, r25
     346:	1c f0       	brlt	.+6      	; 0x34e <_write+0x1e>
		return -1;
	}
	return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     352:	08 95       	ret

00000354 <__vector_68>:
 *
 * This function will handle interrupt on analog comparator A channel 0 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC0_vect)
{
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	08 b6       	in	r0, 0x38	; 56
     360:	0f 92       	push	r0
     362:	18 be       	out	0x38, r1	; 56
     364:	09 b6       	in	r0, 0x39	; 57
     366:	0f 92       	push	r0
     368:	19 be       	out	0x39, r1	; 57
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	1b be       	out	0x3b, r1	; 59
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
	if (ac_aca_callback) {
     388:	e0 91 b6 20 	lds	r30, 0x20B6	; 0x8020b6 <ac_aca_callback>
     38c:	f0 91 b7 20 	lds	r31, 0x20B7	; 0x8020b7 <ac_aca_callback+0x1>
     390:	30 97       	sbiw	r30, 0x00	; 0
     392:	79 f0       	breq	.+30     	; 0x3b2 <__vector_68+0x5e>
		if (ACA.STATUS & AC_AC0STATE_bm) {
     394:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <__vector_68+0x54>
			ac_aca_callback(&ACA, 0, AC_STATUS_ABOVE);
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	19 95       	eicall
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__vector_68+0x5e>
		}
		else {
			ac_aca_callback(&ACA, 0, AC_STATUS_BELOW);
     3a8:	40 e8       	ldi	r20, 0x80	; 128
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	19 95       	eicall
		}
	}
}
     3b2:	ff 91       	pop	r31
     3b4:	ef 91       	pop	r30
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	7f 91       	pop	r23
     3c0:	6f 91       	pop	r22
     3c2:	5f 91       	pop	r21
     3c4:	4f 91       	pop	r20
     3c6:	3f 91       	pop	r19
     3c8:	2f 91       	pop	r18
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	09 be       	out	0x39, r0	; 57
     3d2:	0f 90       	pop	r0
     3d4:	08 be       	out	0x38, r0	; 56
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_69>:
 *
 * This function will handle interrupt on analog comparator A channel 1 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC1_vect)
{
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	08 b6       	in	r0, 0x38	; 56
     3ec:	0f 92       	push	r0
     3ee:	18 be       	out	0x38, r1	; 56
     3f0:	09 b6       	in	r0, 0x39	; 57
     3f2:	0f 92       	push	r0
     3f4:	19 be       	out	0x39, r1	; 57
     3f6:	0b b6       	in	r0, 0x3b	; 59
     3f8:	0f 92       	push	r0
     3fa:	1b be       	out	0x3b, r1	; 59
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
	if (ac_aca_callback) {
     414:	e0 91 b6 20 	lds	r30, 0x20B6	; 0x8020b6 <ac_aca_callback>
     418:	f0 91 b7 20 	lds	r31, 0x20B7	; 0x8020b7 <ac_aca_callback+0x1>
     41c:	30 97       	sbiw	r30, 0x00	; 0
     41e:	79 f0       	breq	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		if (ACA.STATUS & AC_AC1STATE_bm) {
     420:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     424:	85 ff       	sbrs	r24, 5
     426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			ac_aca_callback(&ACA, 1, AC_STATUS_ABOVE);
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 e8       	ldi	r24, 0x80	; 128
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	19 95       	eicall
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		}
		else {
			ac_aca_callback(&ACA, 1, AC_STATUS_BELOW);
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e8       	ldi	r24, 0x80	; 128
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	19 95       	eicall
		}
	}
}
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	09 be       	out	0x39, r0	; 57
     45e:	0f 90       	pop	r0
     460:	08 be       	out	0x38, r0	; 56
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_70>:
 *
 * This function will handle interrupt on analog comparator A in window mode
 * and call the analog comparator channel A callback function.
 */
ISR(ACA_ACW_vect)
{
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	08 b6       	in	r0, 0x38	; 56
     478:	0f 92       	push	r0
     47a:	18 be       	out	0x38, r1	; 56
     47c:	09 b6       	in	r0, 0x39	; 57
     47e:	0f 92       	push	r0
     480:	19 be       	out	0x39, r1	; 57
     482:	0b b6       	in	r0, 0x3b	; 59
     484:	0f 92       	push	r0
     486:	1b be       	out	0x3b, r1	; 59
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
	if (ac_aca_callback) {
     4a0:	e0 91 b6 20 	lds	r30, 0x20B6	; 0x8020b6 <ac_aca_callback>
     4a4:	f0 91 b7 20 	lds	r31, 0x20B7	; 0x8020b7 <ac_aca_callback+0x1>
     4a8:	30 97       	sbiw	r30, 0x00	; 0
     4aa:	39 f0       	breq	.+14     	; 0x4ba <__vector_70+0x4e>
		ac_aca_callback(&ACA, 0, (enum ac_status_t)(ACA.STATUS &
     4ac:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     4b0:	40 7c       	andi	r20, 0xC0	; 192
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	80 e8       	ldi	r24, 0x80	; 128
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	19 95       	eicall
					AC_WSTATE_gm));
	}
}
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0b be       	out	0x3b, r0	; 59
     4d6:	0f 90       	pop	r0
     4d8:	09 be       	out	0x39, r0	; 57
     4da:	0f 90       	pop	r0
     4dc:	08 be       	out	0x38, r0	; 56
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_36>:
 *
 * This function will handle interrupt on analog comparator B channel 0 and
 * call the analog comparator channel B callback function.
 */
ISR(ACB_AC0_vect)
{
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	08 b6       	in	r0, 0x38	; 56
     4f4:	0f 92       	push	r0
     4f6:	18 be       	out	0x38, r1	; 56
     4f8:	09 b6       	in	r0, 0x39	; 57
     4fa:	0f 92       	push	r0
     4fc:	19 be       	out	0x39, r1	; 57
     4fe:	0b b6       	in	r0, 0x3b	; 59
     500:	0f 92       	push	r0
     502:	1b be       	out	0x3b, r1	; 59
     504:	2f 93       	push	r18
     506:	3f 93       	push	r19
     508:	4f 93       	push	r20
     50a:	5f 93       	push	r21
     50c:	6f 93       	push	r22
     50e:	7f 93       	push	r23
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	af 93       	push	r26
     516:	bf 93       	push	r27
     518:	ef 93       	push	r30
     51a:	ff 93       	push	r31
	if (ac_acb_callback) {
     51c:	e0 91 b4 20 	lds	r30, 0x20B4	; 0x8020b4 <__data_end>
     520:	f0 91 b5 20 	lds	r31, 0x20B5	; 0x8020b5 <__data_end+0x1>
     524:	30 97       	sbiw	r30, 0x00	; 0
     526:	79 f0       	breq	.+30     	; 0x546 <__vector_36+0x5e>
		if (ACB.STATUS & AC_AC0STATE_bm) {
     528:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <__TEXT_REGION_LENGTH__+0x700397>
     52c:	84 ff       	sbrs	r24, 4
     52e:	06 c0       	rjmp	.+12     	; 0x53c <__vector_36+0x54>
			ac_acb_callback(&ACB, 0, AC_STATUS_ABOVE);
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	80 e9       	ldi	r24, 0x90	; 144
     536:	93 e0       	ldi	r25, 0x03	; 3
     538:	19 95       	eicall
     53a:	05 c0       	rjmp	.+10     	; 0x546 <__vector_36+0x5e>
		}
		else {
			ac_acb_callback(&ACB, 0, AC_STATUS_BELOW);
     53c:	40 e8       	ldi	r20, 0x80	; 128
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	80 e9       	ldi	r24, 0x90	; 144
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	19 95       	eicall
		}
	}
}
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0b be       	out	0x3b, r0	; 59
     562:	0f 90       	pop	r0
     564:	09 be       	out	0x39, r0	; 57
     566:	0f 90       	pop	r0
     568:	08 be       	out	0x38, r0	; 56
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_37>:
 *
 * This function will handle interrupt on analog comparator B channel 1 and
 * call the analog comparator channel B callback function.
 */
ISR(ACB_AC1_vect)
{
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	08 b6       	in	r0, 0x38	; 56
     580:	0f 92       	push	r0
     582:	18 be       	out	0x38, r1	; 56
     584:	09 b6       	in	r0, 0x39	; 57
     586:	0f 92       	push	r0
     588:	19 be       	out	0x39, r1	; 57
     58a:	0b b6       	in	r0, 0x3b	; 59
     58c:	0f 92       	push	r0
     58e:	1b be       	out	0x3b, r1	; 59
     590:	2f 93       	push	r18
     592:	3f 93       	push	r19
     594:	4f 93       	push	r20
     596:	5f 93       	push	r21
     598:	6f 93       	push	r22
     59a:	7f 93       	push	r23
     59c:	8f 93       	push	r24
     59e:	9f 93       	push	r25
     5a0:	af 93       	push	r26
     5a2:	bf 93       	push	r27
     5a4:	ef 93       	push	r30
     5a6:	ff 93       	push	r31
	if (ac_acb_callback) {
     5a8:	e0 91 b4 20 	lds	r30, 0x20B4	; 0x8020b4 <__data_end>
     5ac:	f0 91 b5 20 	lds	r31, 0x20B5	; 0x8020b5 <__data_end+0x1>
     5b0:	30 97       	sbiw	r30, 0x00	; 0
     5b2:	79 f0       	breq	.+30     	; 0x5d2 <__vector_37+0x5e>
		if (ACB.STATUS & AC_AC1STATE_bm) {
     5b4:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <__TEXT_REGION_LENGTH__+0x700397>
     5b8:	85 ff       	sbrs	r24, 5
     5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <__vector_37+0x54>
			ac_acb_callback(&ACB, 1, AC_STATUS_ABOVE);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	80 e9       	ldi	r24, 0x90	; 144
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	19 95       	eicall
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__vector_37+0x5e>
		}
		else {
			ac_acb_callback(&ACB, 1, AC_STATUS_BELOW);
     5c8:	40 e8       	ldi	r20, 0x80	; 128
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	80 e9       	ldi	r24, 0x90	; 144
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	19 95       	eicall
		}
	}
}
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	7f 91       	pop	r23
     5e0:	6f 91       	pop	r22
     5e2:	5f 91       	pop	r21
     5e4:	4f 91       	pop	r20
     5e6:	3f 91       	pop	r19
     5e8:	2f 91       	pop	r18
     5ea:	0f 90       	pop	r0
     5ec:	0b be       	out	0x3b, r0	; 59
     5ee:	0f 90       	pop	r0
     5f0:	09 be       	out	0x39, r0	; 57
     5f2:	0f 90       	pop	r0
     5f4:	08 be       	out	0x38, r0	; 56
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_38>:
 *
 * This function will handle interrupt on analog comparator B in window mode
 * and call the analog comparator channel B callback function.
 */
ISR(ACB_ACW_vect)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	08 b6       	in	r0, 0x38	; 56
     60c:	0f 92       	push	r0
     60e:	18 be       	out	0x38, r1	; 56
     610:	09 b6       	in	r0, 0x39	; 57
     612:	0f 92       	push	r0
     614:	19 be       	out	0x39, r1	; 57
     616:	0b b6       	in	r0, 0x3b	; 59
     618:	0f 92       	push	r0
     61a:	1b be       	out	0x3b, r1	; 59
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
	if (ac_acb_callback) {
     634:	e0 91 b4 20 	lds	r30, 0x20B4	; 0x8020b4 <__data_end>
     638:	f0 91 b5 20 	lds	r31, 0x20B5	; 0x8020b5 <__data_end+0x1>
     63c:	30 97       	sbiw	r30, 0x00	; 0
     63e:	39 f0       	breq	.+14     	; 0x64e <__vector_38+0x4e>
		ac_acb_callback(&ACB, 0, (enum ac_status_t)(ACB.STATUS &
     640:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <__TEXT_REGION_LENGTH__+0x700397>
     644:	40 7c       	andi	r20, 0xC0	; 192
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	80 e9       	ldi	r24, 0x90	; 144
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	19 95       	eicall
					AC_WSTATE_gm));
	}
}
     64e:	ff 91       	pop	r31
     650:	ef 91       	pop	r30
     652:	bf 91       	pop	r27
     654:	af 91       	pop	r26
     656:	9f 91       	pop	r25
     658:	8f 91       	pop	r24
     65a:	7f 91       	pop	r23
     65c:	6f 91       	pop	r22
     65e:	5f 91       	pop	r21
     660:	4f 91       	pop	r20
     662:	3f 91       	pop	r19
     664:	2f 91       	pop	r18
     666:	0f 90       	pop	r0
     668:	0b be       	out	0x3b, r0	; 59
     66a:	0f 90       	pop	r0
     66c:	09 be       	out	0x39, r0	; 57
     66e:	0f 90       	pop	r0
     670:	08 be       	out	0x38, r0	; 56
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	1f 90       	pop	r1
     67a:	18 95       	reti

0000067c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	0f 92       	push	r0
     684:	11 24       	eor	r1, r1
     686:	08 b6       	in	r0, 0x38	; 56
     688:	0f 92       	push	r0
     68a:	18 be       	out	0x38, r1	; 56
     68c:	09 b6       	in	r0, 0x39	; 57
     68e:	0f 92       	push	r0
     690:	19 be       	out	0x39, r1	; 57
     692:	0b b6       	in	r0, 0x3b	; 59
     694:	0f 92       	push	r0
     696:	1b be       	out	0x3b, r1	; 59
     698:	2f 93       	push	r18
     69a:	3f 93       	push	r19
     69c:	4f 93       	push	r20
     69e:	5f 93       	push	r21
     6a0:	6f 93       	push	r22
     6a2:	7f 93       	push	r23
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
     6ac:	ef 93       	push	r30
     6ae:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     6b0:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     6b4:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     6b8:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <adca_callback>
     6bc:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <adca_callback+0x1>
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	19 95       	eicall
}
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0b be       	out	0x3b, r0	; 59
     6e4:	0f 90       	pop	r0
     6e6:	09 be       	out	0x39, r0	; 57
     6e8:	0f 90       	pop	r0
     6ea:	08 be       	out	0x38, r0	; 56
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	08 b6       	in	r0, 0x38	; 56
     702:	0f 92       	push	r0
     704:	18 be       	out	0x38, r1	; 56
     706:	09 b6       	in	r0, 0x39	; 57
     708:	0f 92       	push	r0
     70a:	19 be       	out	0x39, r1	; 57
     70c:	0b b6       	in	r0, 0x3b	; 59
     70e:	0f 92       	push	r0
     710:	1b be       	out	0x3b, r1	; 59
     712:	2f 93       	push	r18
     714:	3f 93       	push	r19
     716:	4f 93       	push	r20
     718:	5f 93       	push	r21
     71a:	6f 93       	push	r22
     71c:	7f 93       	push	r23
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     72a:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     72e:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     732:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <adca_callback>
     736:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <adca_callback+0x1>
     73a:	62 e0       	ldi	r22, 0x02	; 2
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	19 95       	eicall
}
     742:	ff 91       	pop	r31
     744:	ef 91       	pop	r30
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	7f 91       	pop	r23
     750:	6f 91       	pop	r22
     752:	5f 91       	pop	r21
     754:	4f 91       	pop	r20
     756:	3f 91       	pop	r19
     758:	2f 91       	pop	r18
     75a:	0f 90       	pop	r0
     75c:	0b be       	out	0x3b, r0	; 59
     75e:	0f 90       	pop	r0
     760:	09 be       	out	0x39, r0	; 57
     762:	0f 90       	pop	r0
     764:	08 be       	out	0x38, r0	; 56
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	0f 90       	pop	r0
     76c:	1f 90       	pop	r1
     76e:	18 95       	reti

00000770 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	08 b6       	in	r0, 0x38	; 56
     77c:	0f 92       	push	r0
     77e:	18 be       	out	0x38, r1	; 56
     780:	09 b6       	in	r0, 0x39	; 57
     782:	0f 92       	push	r0
     784:	19 be       	out	0x39, r1	; 57
     786:	0b b6       	in	r0, 0x3b	; 59
     788:	0f 92       	push	r0
     78a:	1b be       	out	0x3b, r1	; 59
     78c:	2f 93       	push	r18
     78e:	3f 93       	push	r19
     790:	4f 93       	push	r20
     792:	5f 93       	push	r21
     794:	6f 93       	push	r22
     796:	7f 93       	push	r23
     798:	8f 93       	push	r24
     79a:	9f 93       	push	r25
     79c:	af 93       	push	r26
     79e:	bf 93       	push	r27
     7a0:	ef 93       	push	r30
     7a2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     7a4:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     7a8:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     7ac:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <adca_callback>
     7b0:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <adca_callback+0x1>
     7b4:	64 e0       	ldi	r22, 0x04	; 4
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	19 95       	eicall
}
     7bc:	ff 91       	pop	r31
     7be:	ef 91       	pop	r30
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	0f 90       	pop	r0
     7d6:	0b be       	out	0x3b, r0	; 59
     7d8:	0f 90       	pop	r0
     7da:	09 be       	out	0x39, r0	; 57
     7dc:	0f 90       	pop	r0
     7de:	08 be       	out	0x38, r0	; 56
     7e0:	0f 90       	pop	r0
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	0f 90       	pop	r0
     7e6:	1f 90       	pop	r1
     7e8:	18 95       	reti

000007ea <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	08 b6       	in	r0, 0x38	; 56
     7f6:	0f 92       	push	r0
     7f8:	18 be       	out	0x38, r1	; 56
     7fa:	09 b6       	in	r0, 0x39	; 57
     7fc:	0f 92       	push	r0
     7fe:	19 be       	out	0x39, r1	; 57
     800:	0b b6       	in	r0, 0x3b	; 59
     802:	0f 92       	push	r0
     804:	1b be       	out	0x3b, r1	; 59
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     81e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     822:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     826:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <adca_callback>
     82a:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <adca_callback+0x1>
     82e:	68 e0       	ldi	r22, 0x08	; 8
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	19 95       	eicall
}
     836:	ff 91       	pop	r31
     838:	ef 91       	pop	r30
     83a:	bf 91       	pop	r27
     83c:	af 91       	pop	r26
     83e:	9f 91       	pop	r25
     840:	8f 91       	pop	r24
     842:	7f 91       	pop	r23
     844:	6f 91       	pop	r22
     846:	5f 91       	pop	r21
     848:	4f 91       	pop	r20
     84a:	3f 91       	pop	r19
     84c:	2f 91       	pop	r18
     84e:	0f 90       	pop	r0
     850:	0b be       	out	0x3b, r0	; 59
     852:	0f 90       	pop	r0
     854:	09 be       	out	0x39, r0	; 57
     856:	0f 90       	pop	r0
     858:	08 be       	out	0x38, r0	; 56
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	1f 90       	pop	r1
     862:	18 95       	reti

00000864 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     864:	1f 92       	push	r1
     866:	0f 92       	push	r0
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	0f 92       	push	r0
     86c:	11 24       	eor	r1, r1
     86e:	08 b6       	in	r0, 0x38	; 56
     870:	0f 92       	push	r0
     872:	18 be       	out	0x38, r1	; 56
     874:	09 b6       	in	r0, 0x39	; 57
     876:	0f 92       	push	r0
     878:	19 be       	out	0x39, r1	; 57
     87a:	0b b6       	in	r0, 0x3b	; 59
     87c:	0f 92       	push	r0
     87e:	1b be       	out	0x3b, r1	; 59
     880:	2f 93       	push	r18
     882:	3f 93       	push	r19
     884:	4f 93       	push	r20
     886:	5f 93       	push	r21
     888:	6f 93       	push	r22
     88a:	7f 93       	push	r23
     88c:	8f 93       	push	r24
     88e:	9f 93       	push	r25
     890:	af 93       	push	r26
     892:	bf 93       	push	r27
     894:	ef 93       	push	r30
     896:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     898:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     89c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     8a0:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <adcb_callback>
     8a4:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <adcb_callback+0x1>
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	80 e4       	ldi	r24, 0x40	; 64
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	19 95       	eicall
}
     8b0:	ff 91       	pop	r31
     8b2:	ef 91       	pop	r30
     8b4:	bf 91       	pop	r27
     8b6:	af 91       	pop	r26
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	7f 91       	pop	r23
     8be:	6f 91       	pop	r22
     8c0:	5f 91       	pop	r21
     8c2:	4f 91       	pop	r20
     8c4:	3f 91       	pop	r19
     8c6:	2f 91       	pop	r18
     8c8:	0f 90       	pop	r0
     8ca:	0b be       	out	0x3b, r0	; 59
     8cc:	0f 90       	pop	r0
     8ce:	09 be       	out	0x39, r0	; 57
     8d0:	0f 90       	pop	r0
     8d2:	08 be       	out	0x38, r0	; 56
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	08 b6       	in	r0, 0x38	; 56
     8ea:	0f 92       	push	r0
     8ec:	18 be       	out	0x38, r1	; 56
     8ee:	09 b6       	in	r0, 0x39	; 57
     8f0:	0f 92       	push	r0
     8f2:	19 be       	out	0x39, r1	; 57
     8f4:	0b b6       	in	r0, 0x3b	; 59
     8f6:	0f 92       	push	r0
     8f8:	1b be       	out	0x3b, r1	; 59
     8fa:	2f 93       	push	r18
     8fc:	3f 93       	push	r19
     8fe:	4f 93       	push	r20
     900:	5f 93       	push	r21
     902:	6f 93       	push	r22
     904:	7f 93       	push	r23
     906:	8f 93       	push	r24
     908:	9f 93       	push	r25
     90a:	af 93       	push	r26
     90c:	bf 93       	push	r27
     90e:	ef 93       	push	r30
     910:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     912:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     916:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     91a:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <adcb_callback>
     91e:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <adcb_callback+0x1>
     922:	62 e0       	ldi	r22, 0x02	; 2
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	19 95       	eicall
}
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	bf 91       	pop	r27
     930:	af 91       	pop	r26
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	7f 91       	pop	r23
     938:	6f 91       	pop	r22
     93a:	5f 91       	pop	r21
     93c:	4f 91       	pop	r20
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0b be       	out	0x3b, r0	; 59
     946:	0f 90       	pop	r0
     948:	09 be       	out	0x39, r0	; 57
     94a:	0f 90       	pop	r0
     94c:	08 be       	out	0x38, r0	; 56
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	08 b6       	in	r0, 0x38	; 56
     964:	0f 92       	push	r0
     966:	18 be       	out	0x38, r1	; 56
     968:	09 b6       	in	r0, 0x39	; 57
     96a:	0f 92       	push	r0
     96c:	19 be       	out	0x39, r1	; 57
     96e:	0b b6       	in	r0, 0x3b	; 59
     970:	0f 92       	push	r0
     972:	1b be       	out	0x3b, r1	; 59
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	4f 93       	push	r20
     97a:	5f 93       	push	r21
     97c:	6f 93       	push	r22
     97e:	7f 93       	push	r23
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     98c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     990:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     994:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <adcb_callback>
     998:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <adcb_callback+0x1>
     99c:	64 e0       	ldi	r22, 0x04	; 4
     99e:	80 e4       	ldi	r24, 0x40	; 64
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	19 95       	eicall
}
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0b be       	out	0x3b, r0	; 59
     9c0:	0f 90       	pop	r0
     9c2:	09 be       	out	0x39, r0	; 57
     9c4:	0f 90       	pop	r0
     9c6:	08 be       	out	0x38, r0	; 56
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	08 b6       	in	r0, 0x38	; 56
     9de:	0f 92       	push	r0
     9e0:	18 be       	out	0x38, r1	; 56
     9e2:	09 b6       	in	r0, 0x39	; 57
     9e4:	0f 92       	push	r0
     9e6:	19 be       	out	0x39, r1	; 57
     9e8:	0b b6       	in	r0, 0x3b	; 59
     9ea:	0f 92       	push	r0
     9ec:	1b be       	out	0x3b, r1	; 59
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     a06:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     a0a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     a0e:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <adcb_callback>
     a12:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <adcb_callback+0x1>
     a16:	68 e0       	ldi	r22, 0x08	; 8
     a18:	80 e4       	ldi	r24, 0x40	; 64
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	19 95       	eicall
}
     a1e:	ff 91       	pop	r31
     a20:	ef 91       	pop	r30
     a22:	bf 91       	pop	r27
     a24:	af 91       	pop	r26
     a26:	9f 91       	pop	r25
     a28:	8f 91       	pop	r24
     a2a:	7f 91       	pop	r23
     a2c:	6f 91       	pop	r22
     a2e:	5f 91       	pop	r21
     a30:	4f 91       	pop	r20
     a32:	3f 91       	pop	r19
     a34:	2f 91       	pop	r18
     a36:	0f 90       	pop	r0
     a38:	0b be       	out	0x3b, r0	; 59
     a3a:	0f 90       	pop	r0
     a3c:	09 be       	out	0x39, r0	; 57
     a3e:	0f 90       	pop	r0
     a40:	08 be       	out	0x38, r0	; 56
     a42:	0f 90       	pop	r0
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	0f 90       	pop	r0
     a48:	1f 90       	pop	r1
     a4a:	18 95       	reti

00000a4c <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     a4c:	1f 92       	push	r1
     a4e:	0f 92       	push	r0
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	0f 92       	push	r0
     a54:	11 24       	eor	r1, r1
     a56:	08 b6       	in	r0, 0x38	; 56
     a58:	0f 92       	push	r0
     a5a:	18 be       	out	0x38, r1	; 56
     a5c:	09 b6       	in	r0, 0x39	; 57
     a5e:	0f 92       	push	r0
     a60:	19 be       	out	0x39, r1	; 57
     a62:	0b b6       	in	r0, 0x3b	; 59
     a64:	0f 92       	push	r0
     a66:	1b be       	out	0x3b, r1	; 59
     a68:	2f 93       	push	r18
     a6a:	3f 93       	push	r19
     a6c:	4f 93       	push	r20
     a6e:	5f 93       	push	r21
     a70:	6f 93       	push	r22
     a72:	7f 93       	push	r23
     a74:	8f 93       	push	r24
     a76:	9f 93       	push	r25
     a78:	af 93       	push	r26
     a7a:	bf 93       	push	r27
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     a80:	e0 91 04 21 	lds	r30, 0x2104	; 0x802104 <tc_tcc0_ovf_callback>
     a84:	f0 91 05 21 	lds	r31, 0x2105	; 0x802105 <tc_tcc0_ovf_callback+0x1>
     a88:	30 97       	sbiw	r30, 0x00	; 0
     a8a:	09 f0       	breq	.+2      	; 0xa8e <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     a8c:	19 95       	eicall
	}
}
     a8e:	ff 91       	pop	r31
     a90:	ef 91       	pop	r30
     a92:	bf 91       	pop	r27
     a94:	af 91       	pop	r26
     a96:	9f 91       	pop	r25
     a98:	8f 91       	pop	r24
     a9a:	7f 91       	pop	r23
     a9c:	6f 91       	pop	r22
     a9e:	5f 91       	pop	r21
     aa0:	4f 91       	pop	r20
     aa2:	3f 91       	pop	r19
     aa4:	2f 91       	pop	r18
     aa6:	0f 90       	pop	r0
     aa8:	0b be       	out	0x3b, r0	; 59
     aaa:	0f 90       	pop	r0
     aac:	09 be       	out	0x39, r0	; 57
     aae:	0f 90       	pop	r0
     ab0:	08 be       	out	0x38, r0	; 56
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     abc:	1f 92       	push	r1
     abe:	0f 92       	push	r0
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	08 b6       	in	r0, 0x38	; 56
     ac8:	0f 92       	push	r0
     aca:	18 be       	out	0x38, r1	; 56
     acc:	09 b6       	in	r0, 0x39	; 57
     ace:	0f 92       	push	r0
     ad0:	19 be       	out	0x39, r1	; 57
     ad2:	0b b6       	in	r0, 0x3b	; 59
     ad4:	0f 92       	push	r0
     ad6:	1b be       	out	0x3b, r1	; 59
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     af0:	e0 91 02 21 	lds	r30, 0x2102	; 0x802102 <tc_tcc0_err_callback>
     af4:	f0 91 03 21 	lds	r31, 0x2103	; 0x802103 <tc_tcc0_err_callback+0x1>
     af8:	30 97       	sbiw	r30, 0x00	; 0
     afa:	09 f0       	breq	.+2      	; 0xafe <__vector_15+0x42>
		tc_tcc0_err_callback();
     afc:	19 95       	eicall
	}
}
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	0f 90       	pop	r0
     b18:	0b be       	out	0x3b, r0	; 59
     b1a:	0f 90       	pop	r0
     b1c:	09 be       	out	0x39, r0	; 57
     b1e:	0f 90       	pop	r0
     b20:	08 be       	out	0x38, r0	; 56
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	08 b6       	in	r0, 0x38	; 56
     b38:	0f 92       	push	r0
     b3a:	18 be       	out	0x38, r1	; 56
     b3c:	09 b6       	in	r0, 0x39	; 57
     b3e:	0f 92       	push	r0
     b40:	19 be       	out	0x39, r1	; 57
     b42:	0b b6       	in	r0, 0x3b	; 59
     b44:	0f 92       	push	r0
     b46:	1b be       	out	0x3b, r1	; 59
     b48:	2f 93       	push	r18
     b4a:	3f 93       	push	r19
     b4c:	4f 93       	push	r20
     b4e:	5f 93       	push	r21
     b50:	6f 93       	push	r22
     b52:	7f 93       	push	r23
     b54:	8f 93       	push	r24
     b56:	9f 93       	push	r25
     b58:	af 93       	push	r26
     b5a:	bf 93       	push	r27
     b5c:	ef 93       	push	r30
     b5e:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     b60:	e0 91 00 21 	lds	r30, 0x2100	; 0x802100 <tc_tcc0_cca_callback>
     b64:	f0 91 01 21 	lds	r31, 0x2101	; 0x802101 <tc_tcc0_cca_callback+0x1>
     b68:	30 97       	sbiw	r30, 0x00	; 0
     b6a:	09 f0       	breq	.+2      	; 0xb6e <__vector_16+0x42>
		tc_tcc0_cca_callback();
     b6c:	19 95       	eicall
	}
}
     b6e:	ff 91       	pop	r31
     b70:	ef 91       	pop	r30
     b72:	bf 91       	pop	r27
     b74:	af 91       	pop	r26
     b76:	9f 91       	pop	r25
     b78:	8f 91       	pop	r24
     b7a:	7f 91       	pop	r23
     b7c:	6f 91       	pop	r22
     b7e:	5f 91       	pop	r21
     b80:	4f 91       	pop	r20
     b82:	3f 91       	pop	r19
     b84:	2f 91       	pop	r18
     b86:	0f 90       	pop	r0
     b88:	0b be       	out	0x3b, r0	; 59
     b8a:	0f 90       	pop	r0
     b8c:	09 be       	out	0x39, r0	; 57
     b8e:	0f 90       	pop	r0
     b90:	08 be       	out	0x38, r0	; 56
     b92:	0f 90       	pop	r0
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	0f 90       	pop	r0
     b98:	1f 90       	pop	r1
     b9a:	18 95       	reti

00000b9c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     b9c:	1f 92       	push	r1
     b9e:	0f 92       	push	r0
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	0f 92       	push	r0
     ba4:	11 24       	eor	r1, r1
     ba6:	08 b6       	in	r0, 0x38	; 56
     ba8:	0f 92       	push	r0
     baa:	18 be       	out	0x38, r1	; 56
     bac:	09 b6       	in	r0, 0x39	; 57
     bae:	0f 92       	push	r0
     bb0:	19 be       	out	0x39, r1	; 57
     bb2:	0b b6       	in	r0, 0x3b	; 59
     bb4:	0f 92       	push	r0
     bb6:	1b be       	out	0x3b, r1	; 59
     bb8:	2f 93       	push	r18
     bba:	3f 93       	push	r19
     bbc:	4f 93       	push	r20
     bbe:	5f 93       	push	r21
     bc0:	6f 93       	push	r22
     bc2:	7f 93       	push	r23
     bc4:	8f 93       	push	r24
     bc6:	9f 93       	push	r25
     bc8:	af 93       	push	r26
     bca:	bf 93       	push	r27
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     bd0:	e0 91 fe 20 	lds	r30, 0x20FE	; 0x8020fe <tc_tcc0_ccb_callback>
     bd4:	f0 91 ff 20 	lds	r31, 0x20FF	; 0x8020ff <tc_tcc0_ccb_callback+0x1>
     bd8:	30 97       	sbiw	r30, 0x00	; 0
     bda:	09 f0       	breq	.+2      	; 0xbde <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     bdc:	19 95       	eicall
	}
}
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	0b be       	out	0x3b, r0	; 59
     bfa:	0f 90       	pop	r0
     bfc:	09 be       	out	0x39, r0	; 57
     bfe:	0f 90       	pop	r0
     c00:	08 be       	out	0x38, r0	; 56
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	08 b6       	in	r0, 0x38	; 56
     c18:	0f 92       	push	r0
     c1a:	18 be       	out	0x38, r1	; 56
     c1c:	09 b6       	in	r0, 0x39	; 57
     c1e:	0f 92       	push	r0
     c20:	19 be       	out	0x39, r1	; 57
     c22:	0b b6       	in	r0, 0x3b	; 59
     c24:	0f 92       	push	r0
     c26:	1b be       	out	0x3b, r1	; 59
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     c40:	e0 91 fc 20 	lds	r30, 0x20FC	; 0x8020fc <tc_tcc0_ccc_callback>
     c44:	f0 91 fd 20 	lds	r31, 0x20FD	; 0x8020fd <tc_tcc0_ccc_callback+0x1>
     c48:	30 97       	sbiw	r30, 0x00	; 0
     c4a:	09 f0       	breq	.+2      	; 0xc4e <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     c4c:	19 95       	eicall
	}
}
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	bf 91       	pop	r27
     c54:	af 91       	pop	r26
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	7f 91       	pop	r23
     c5c:	6f 91       	pop	r22
     c5e:	5f 91       	pop	r21
     c60:	4f 91       	pop	r20
     c62:	3f 91       	pop	r19
     c64:	2f 91       	pop	r18
     c66:	0f 90       	pop	r0
     c68:	0b be       	out	0x3b, r0	; 59
     c6a:	0f 90       	pop	r0
     c6c:	09 be       	out	0x39, r0	; 57
     c6e:	0f 90       	pop	r0
     c70:	08 be       	out	0x38, r0	; 56
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	08 b6       	in	r0, 0x38	; 56
     c88:	0f 92       	push	r0
     c8a:	18 be       	out	0x38, r1	; 56
     c8c:	09 b6       	in	r0, 0x39	; 57
     c8e:	0f 92       	push	r0
     c90:	19 be       	out	0x39, r1	; 57
     c92:	0b b6       	in	r0, 0x3b	; 59
     c94:	0f 92       	push	r0
     c96:	1b be       	out	0x3b, r1	; 59
     c98:	2f 93       	push	r18
     c9a:	3f 93       	push	r19
     c9c:	4f 93       	push	r20
     c9e:	5f 93       	push	r21
     ca0:	6f 93       	push	r22
     ca2:	7f 93       	push	r23
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     cb0:	e0 91 fa 20 	lds	r30, 0x20FA	; 0x8020fa <tc_tcc0_ccd_callback>
     cb4:	f0 91 fb 20 	lds	r31, 0x20FB	; 0x8020fb <tc_tcc0_ccd_callback+0x1>
     cb8:	30 97       	sbiw	r30, 0x00	; 0
     cba:	09 f0       	breq	.+2      	; 0xcbe <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     cbc:	19 95       	eicall
	}
}
     cbe:	ff 91       	pop	r31
     cc0:	ef 91       	pop	r30
     cc2:	bf 91       	pop	r27
     cc4:	af 91       	pop	r26
     cc6:	9f 91       	pop	r25
     cc8:	8f 91       	pop	r24
     cca:	7f 91       	pop	r23
     ccc:	6f 91       	pop	r22
     cce:	5f 91       	pop	r21
     cd0:	4f 91       	pop	r20
     cd2:	3f 91       	pop	r19
     cd4:	2f 91       	pop	r18
     cd6:	0f 90       	pop	r0
     cd8:	0b be       	out	0x3b, r0	; 59
     cda:	0f 90       	pop	r0
     cdc:	09 be       	out	0x39, r0	; 57
     cde:	0f 90       	pop	r0
     ce0:	08 be       	out	0x38, r0	; 56
     ce2:	0f 90       	pop	r0
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	0f 90       	pop	r0
     ce8:	1f 90       	pop	r1
     cea:	18 95       	reti

00000cec <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     cec:	1f 92       	push	r1
     cee:	0f 92       	push	r0
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	0f 92       	push	r0
     cf4:	11 24       	eor	r1, r1
     cf6:	08 b6       	in	r0, 0x38	; 56
     cf8:	0f 92       	push	r0
     cfa:	18 be       	out	0x38, r1	; 56
     cfc:	09 b6       	in	r0, 0x39	; 57
     cfe:	0f 92       	push	r0
     d00:	19 be       	out	0x39, r1	; 57
     d02:	0b b6       	in	r0, 0x3b	; 59
     d04:	0f 92       	push	r0
     d06:	1b be       	out	0x3b, r1	; 59
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     d20:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <tc_tcc1_ovf_callback>
     d24:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <tc_tcc1_ovf_callback+0x1>
     d28:	30 97       	sbiw	r30, 0x00	; 0
     d2a:	09 f0       	breq	.+2      	; 0xd2e <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     d2c:	19 95       	eicall
	}
}
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0b be       	out	0x3b, r0	; 59
     d4a:	0f 90       	pop	r0
     d4c:	09 be       	out	0x39, r0	; 57
     d4e:	0f 90       	pop	r0
     d50:	08 be       	out	0x38, r0	; 56
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f 90       	pop	r0
     d58:	1f 90       	pop	r1
     d5a:	18 95       	reti

00000d5c <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	08 b6       	in	r0, 0x38	; 56
     d68:	0f 92       	push	r0
     d6a:	18 be       	out	0x38, r1	; 56
     d6c:	09 b6       	in	r0, 0x39	; 57
     d6e:	0f 92       	push	r0
     d70:	19 be       	out	0x39, r1	; 57
     d72:	0b b6       	in	r0, 0x3b	; 59
     d74:	0f 92       	push	r0
     d76:	1b be       	out	0x3b, r1	; 59
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     d90:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <tc_tcc1_err_callback>
     d94:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <tc_tcc1_err_callback+0x1>
     d98:	30 97       	sbiw	r30, 0x00	; 0
     d9a:	09 f0       	breq	.+2      	; 0xd9e <__vector_21+0x42>
		tc_tcc1_err_callback();
     d9c:	19 95       	eicall
	}
}
     d9e:	ff 91       	pop	r31
     da0:	ef 91       	pop	r30
     da2:	bf 91       	pop	r27
     da4:	af 91       	pop	r26
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	7f 91       	pop	r23
     dac:	6f 91       	pop	r22
     dae:	5f 91       	pop	r21
     db0:	4f 91       	pop	r20
     db2:	3f 91       	pop	r19
     db4:	2f 91       	pop	r18
     db6:	0f 90       	pop	r0
     db8:	0b be       	out	0x3b, r0	; 59
     dba:	0f 90       	pop	r0
     dbc:	09 be       	out	0x39, r0	; 57
     dbe:	0f 90       	pop	r0
     dc0:	08 be       	out	0x38, r0	; 56
     dc2:	0f 90       	pop	r0
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	0f 90       	pop	r0
     dc8:	1f 90       	pop	r1
     dca:	18 95       	reti

00000dcc <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     dcc:	1f 92       	push	r1
     dce:	0f 92       	push	r0
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	0f 92       	push	r0
     dd4:	11 24       	eor	r1, r1
     dd6:	08 b6       	in	r0, 0x38	; 56
     dd8:	0f 92       	push	r0
     dda:	18 be       	out	0x38, r1	; 56
     ddc:	09 b6       	in	r0, 0x39	; 57
     dde:	0f 92       	push	r0
     de0:	19 be       	out	0x39, r1	; 57
     de2:	0b b6       	in	r0, 0x3b	; 59
     de4:	0f 92       	push	r0
     de6:	1b be       	out	0x3b, r1	; 59
     de8:	2f 93       	push	r18
     dea:	3f 93       	push	r19
     dec:	4f 93       	push	r20
     dee:	5f 93       	push	r21
     df0:	6f 93       	push	r22
     df2:	7f 93       	push	r23
     df4:	8f 93       	push	r24
     df6:	9f 93       	push	r25
     df8:	af 93       	push	r26
     dfa:	bf 93       	push	r27
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     e00:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <tc_tcc1_cca_callback>
     e04:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <tc_tcc1_cca_callback+0x1>
     e08:	30 97       	sbiw	r30, 0x00	; 0
     e0a:	09 f0       	breq	.+2      	; 0xe0e <__vector_22+0x42>
		tc_tcc1_cca_callback();
     e0c:	19 95       	eicall
	}
}
     e0e:	ff 91       	pop	r31
     e10:	ef 91       	pop	r30
     e12:	bf 91       	pop	r27
     e14:	af 91       	pop	r26
     e16:	9f 91       	pop	r25
     e18:	8f 91       	pop	r24
     e1a:	7f 91       	pop	r23
     e1c:	6f 91       	pop	r22
     e1e:	5f 91       	pop	r21
     e20:	4f 91       	pop	r20
     e22:	3f 91       	pop	r19
     e24:	2f 91       	pop	r18
     e26:	0f 90       	pop	r0
     e28:	0b be       	out	0x3b, r0	; 59
     e2a:	0f 90       	pop	r0
     e2c:	09 be       	out	0x39, r0	; 57
     e2e:	0f 90       	pop	r0
     e30:	08 be       	out	0x38, r0	; 56
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	08 b6       	in	r0, 0x38	; 56
     e48:	0f 92       	push	r0
     e4a:	18 be       	out	0x38, r1	; 56
     e4c:	09 b6       	in	r0, 0x39	; 57
     e4e:	0f 92       	push	r0
     e50:	19 be       	out	0x39, r1	; 57
     e52:	0b b6       	in	r0, 0x3b	; 59
     e54:	0f 92       	push	r0
     e56:	1b be       	out	0x3b, r1	; 59
     e58:	2f 93       	push	r18
     e5a:	3f 93       	push	r19
     e5c:	4f 93       	push	r20
     e5e:	5f 93       	push	r21
     e60:	6f 93       	push	r22
     e62:	7f 93       	push	r23
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	af 93       	push	r26
     e6a:	bf 93       	push	r27
     e6c:	ef 93       	push	r30
     e6e:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     e70:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <tc_tcc1_ccb_callback>
     e74:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <tc_tcc1_ccb_callback+0x1>
     e78:	30 97       	sbiw	r30, 0x00	; 0
     e7a:	09 f0       	breq	.+2      	; 0xe7e <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     e7c:	19 95       	eicall
	}
}
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0b be       	out	0x3b, r0	; 59
     e9a:	0f 90       	pop	r0
     e9c:	09 be       	out	0x39, r0	; 57
     e9e:	0f 90       	pop	r0
     ea0:	08 be       	out	0x38, r0	; 56
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	08 b6       	in	r0, 0x38	; 56
     eb8:	0f 92       	push	r0
     eba:	18 be       	out	0x38, r1	; 56
     ebc:	09 b6       	in	r0, 0x39	; 57
     ebe:	0f 92       	push	r0
     ec0:	19 be       	out	0x39, r1	; 57
     ec2:	0b b6       	in	r0, 0x3b	; 59
     ec4:	0f 92       	push	r0
     ec6:	1b be       	out	0x3b, r1	; 59
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	5f 93       	push	r21
     ed0:	6f 93       	push	r22
     ed2:	7f 93       	push	r23
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	af 93       	push	r26
     eda:	bf 93       	push	r27
     edc:	ef 93       	push	r30
     ede:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     ee0:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <tc_tcd0_ovf_callback>
     ee4:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <tc_tcd0_ovf_callback+0x1>
     ee8:	30 97       	sbiw	r30, 0x00	; 0
     eea:	09 f0       	breq	.+2      	; 0xeee <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     eec:	19 95       	eicall
	}
}
     eee:	ff 91       	pop	r31
     ef0:	ef 91       	pop	r30
     ef2:	bf 91       	pop	r27
     ef4:	af 91       	pop	r26
     ef6:	9f 91       	pop	r25
     ef8:	8f 91       	pop	r24
     efa:	7f 91       	pop	r23
     efc:	6f 91       	pop	r22
     efe:	5f 91       	pop	r21
     f00:	4f 91       	pop	r20
     f02:	3f 91       	pop	r19
     f04:	2f 91       	pop	r18
     f06:	0f 90       	pop	r0
     f08:	0b be       	out	0x3b, r0	; 59
     f0a:	0f 90       	pop	r0
     f0c:	09 be       	out	0x39, r0	; 57
     f0e:	0f 90       	pop	r0
     f10:	08 be       	out	0x38, r0	; 56
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	08 b6       	in	r0, 0x38	; 56
     f28:	0f 92       	push	r0
     f2a:	18 be       	out	0x38, r1	; 56
     f2c:	09 b6       	in	r0, 0x39	; 57
     f2e:	0f 92       	push	r0
     f30:	19 be       	out	0x39, r1	; 57
     f32:	0b b6       	in	r0, 0x3b	; 59
     f34:	0f 92       	push	r0
     f36:	1b be       	out	0x3b, r1	; 59
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     f50:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <tc_tcd0_err_callback>
     f54:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <tc_tcd0_err_callback+0x1>
     f58:	30 97       	sbiw	r30, 0x00	; 0
     f5a:	09 f0       	breq	.+2      	; 0xf5e <__vector_78+0x42>
		tc_tcd0_err_callback();
     f5c:	19 95       	eicall
	}
}
     f5e:	ff 91       	pop	r31
     f60:	ef 91       	pop	r30
     f62:	bf 91       	pop	r27
     f64:	af 91       	pop	r26
     f66:	9f 91       	pop	r25
     f68:	8f 91       	pop	r24
     f6a:	7f 91       	pop	r23
     f6c:	6f 91       	pop	r22
     f6e:	5f 91       	pop	r21
     f70:	4f 91       	pop	r20
     f72:	3f 91       	pop	r19
     f74:	2f 91       	pop	r18
     f76:	0f 90       	pop	r0
     f78:	0b be       	out	0x3b, r0	; 59
     f7a:	0f 90       	pop	r0
     f7c:	09 be       	out	0x39, r0	; 57
     f7e:	0f 90       	pop	r0
     f80:	08 be       	out	0x38, r0	; 56
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
     f96:	08 b6       	in	r0, 0x38	; 56
     f98:	0f 92       	push	r0
     f9a:	18 be       	out	0x38, r1	; 56
     f9c:	09 b6       	in	r0, 0x39	; 57
     f9e:	0f 92       	push	r0
     fa0:	19 be       	out	0x39, r1	; 57
     fa2:	0b b6       	in	r0, 0x3b	; 59
     fa4:	0f 92       	push	r0
     fa6:	1b be       	out	0x3b, r1	; 59
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     fc0:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <tc_tcd0_cca_callback>
     fc4:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <tc_tcd0_cca_callback+0x1>
     fc8:	30 97       	sbiw	r30, 0x00	; 0
     fca:	09 f0       	breq	.+2      	; 0xfce <__vector_79+0x42>
		tc_tcd0_cca_callback();
     fcc:	19 95       	eicall
	}
}
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0b be       	out	0x3b, r0	; 59
     fea:	0f 90       	pop	r0
     fec:	09 be       	out	0x39, r0	; 57
     fee:	0f 90       	pop	r0
     ff0:	08 be       	out	0x38, r0	; 56
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	08 b6       	in	r0, 0x38	; 56
    1008:	0f 92       	push	r0
    100a:	18 be       	out	0x38, r1	; 56
    100c:	09 b6       	in	r0, 0x39	; 57
    100e:	0f 92       	push	r0
    1010:	19 be       	out	0x39, r1	; 57
    1012:	0b b6       	in	r0, 0x3b	; 59
    1014:	0f 92       	push	r0
    1016:	1b be       	out	0x3b, r1	; 59
    1018:	2f 93       	push	r18
    101a:	3f 93       	push	r19
    101c:	4f 93       	push	r20
    101e:	5f 93       	push	r21
    1020:	6f 93       	push	r22
    1022:	7f 93       	push	r23
    1024:	8f 93       	push	r24
    1026:	9f 93       	push	r25
    1028:	af 93       	push	r26
    102a:	bf 93       	push	r27
    102c:	ef 93       	push	r30
    102e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1030:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <tc_tcd0_ccb_callback>
    1034:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <tc_tcd0_ccb_callback+0x1>
    1038:	30 97       	sbiw	r30, 0x00	; 0
    103a:	09 f0       	breq	.+2      	; 0x103e <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    103c:	19 95       	eicall
	}
}
    103e:	ff 91       	pop	r31
    1040:	ef 91       	pop	r30
    1042:	bf 91       	pop	r27
    1044:	af 91       	pop	r26
    1046:	9f 91       	pop	r25
    1048:	8f 91       	pop	r24
    104a:	7f 91       	pop	r23
    104c:	6f 91       	pop	r22
    104e:	5f 91       	pop	r21
    1050:	4f 91       	pop	r20
    1052:	3f 91       	pop	r19
    1054:	2f 91       	pop	r18
    1056:	0f 90       	pop	r0
    1058:	0b be       	out	0x3b, r0	; 59
    105a:	0f 90       	pop	r0
    105c:	09 be       	out	0x39, r0	; 57
    105e:	0f 90       	pop	r0
    1060:	08 be       	out	0x38, r0	; 56
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	08 b6       	in	r0, 0x38	; 56
    1078:	0f 92       	push	r0
    107a:	18 be       	out	0x38, r1	; 56
    107c:	09 b6       	in	r0, 0x39	; 57
    107e:	0f 92       	push	r0
    1080:	19 be       	out	0x39, r1	; 57
    1082:	0b b6       	in	r0, 0x3b	; 59
    1084:	0f 92       	push	r0
    1086:	1b be       	out	0x3b, r1	; 59
    1088:	2f 93       	push	r18
    108a:	3f 93       	push	r19
    108c:	4f 93       	push	r20
    108e:	5f 93       	push	r21
    1090:	6f 93       	push	r22
    1092:	7f 93       	push	r23
    1094:	8f 93       	push	r24
    1096:	9f 93       	push	r25
    1098:	af 93       	push	r26
    109a:	bf 93       	push	r27
    109c:	ef 93       	push	r30
    109e:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    10a0:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <tc_tcd0_ccc_callback>
    10a4:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <tc_tcd0_ccc_callback+0x1>
    10a8:	30 97       	sbiw	r30, 0x00	; 0
    10aa:	09 f0       	breq	.+2      	; 0x10ae <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    10ac:	19 95       	eicall
	}
}
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0b be       	out	0x3b, r0	; 59
    10ca:	0f 90       	pop	r0
    10cc:	09 be       	out	0x39, r0	; 57
    10ce:	0f 90       	pop	r0
    10d0:	08 be       	out	0x38, r0	; 56
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	0f 90       	pop	r0
    10d8:	1f 90       	pop	r1
    10da:	18 95       	reti

000010dc <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	08 b6       	in	r0, 0x38	; 56
    10e8:	0f 92       	push	r0
    10ea:	18 be       	out	0x38, r1	; 56
    10ec:	09 b6       	in	r0, 0x39	; 57
    10ee:	0f 92       	push	r0
    10f0:	19 be       	out	0x39, r1	; 57
    10f2:	0b b6       	in	r0, 0x3b	; 59
    10f4:	0f 92       	push	r0
    10f6:	1b be       	out	0x3b, r1	; 59
    10f8:	2f 93       	push	r18
    10fa:	3f 93       	push	r19
    10fc:	4f 93       	push	r20
    10fe:	5f 93       	push	r21
    1100:	6f 93       	push	r22
    1102:	7f 93       	push	r23
    1104:	8f 93       	push	r24
    1106:	9f 93       	push	r25
    1108:	af 93       	push	r26
    110a:	bf 93       	push	r27
    110c:	ef 93       	push	r30
    110e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1110:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <tc_tcd0_ccd_callback>
    1114:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <tc_tcd0_ccd_callback+0x1>
    1118:	30 97       	sbiw	r30, 0x00	; 0
    111a:	09 f0       	breq	.+2      	; 0x111e <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    111c:	19 95       	eicall
	}
}
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0b be       	out	0x3b, r0	; 59
    113a:	0f 90       	pop	r0
    113c:	09 be       	out	0x39, r0	; 57
    113e:	0f 90       	pop	r0
    1140:	08 be       	out	0x38, r0	; 56
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	08 b6       	in	r0, 0x38	; 56
    1158:	0f 92       	push	r0
    115a:	18 be       	out	0x38, r1	; 56
    115c:	09 b6       	in	r0, 0x39	; 57
    115e:	0f 92       	push	r0
    1160:	19 be       	out	0x39, r1	; 57
    1162:	0b b6       	in	r0, 0x3b	; 59
    1164:	0f 92       	push	r0
    1166:	1b be       	out	0x3b, r1	; 59
    1168:	2f 93       	push	r18
    116a:	3f 93       	push	r19
    116c:	4f 93       	push	r20
    116e:	5f 93       	push	r21
    1170:	6f 93       	push	r22
    1172:	7f 93       	push	r23
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1180:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <tc_tcd1_ovf_callback>
    1184:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <tc_tcd1_ovf_callback+0x1>
    1188:	30 97       	sbiw	r30, 0x00	; 0
    118a:	09 f0       	breq	.+2      	; 0x118e <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    118c:	19 95       	eicall
	}
}
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0b be       	out	0x3b, r0	; 59
    11aa:	0f 90       	pop	r0
    11ac:	09 be       	out	0x39, r0	; 57
    11ae:	0f 90       	pop	r0
    11b0:	08 be       	out	0x38, r0	; 56
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	0f 92       	push	r0
    11c4:	11 24       	eor	r1, r1
    11c6:	08 b6       	in	r0, 0x38	; 56
    11c8:	0f 92       	push	r0
    11ca:	18 be       	out	0x38, r1	; 56
    11cc:	09 b6       	in	r0, 0x39	; 57
    11ce:	0f 92       	push	r0
    11d0:	19 be       	out	0x39, r1	; 57
    11d2:	0b b6       	in	r0, 0x3b	; 59
    11d4:	0f 92       	push	r0
    11d6:	1b be       	out	0x3b, r1	; 59
    11d8:	2f 93       	push	r18
    11da:	3f 93       	push	r19
    11dc:	4f 93       	push	r20
    11de:	5f 93       	push	r21
    11e0:	6f 93       	push	r22
    11e2:	7f 93       	push	r23
    11e4:	8f 93       	push	r24
    11e6:	9f 93       	push	r25
    11e8:	af 93       	push	r26
    11ea:	bf 93       	push	r27
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    11f0:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <tc_tcd1_err_callback>
    11f4:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <tc_tcd1_err_callback+0x1>
    11f8:	30 97       	sbiw	r30, 0x00	; 0
    11fa:	09 f0       	breq	.+2      	; 0x11fe <__vector_84+0x42>
		tc_tcd1_err_callback();
    11fc:	19 95       	eicall
	}
}
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	bf 91       	pop	r27
    1204:	af 91       	pop	r26
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	7f 91       	pop	r23
    120c:	6f 91       	pop	r22
    120e:	5f 91       	pop	r21
    1210:	4f 91       	pop	r20
    1212:	3f 91       	pop	r19
    1214:	2f 91       	pop	r18
    1216:	0f 90       	pop	r0
    1218:	0b be       	out	0x3b, r0	; 59
    121a:	0f 90       	pop	r0
    121c:	09 be       	out	0x39, r0	; 57
    121e:	0f 90       	pop	r0
    1220:	08 be       	out	0x38, r0	; 56
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	08 b6       	in	r0, 0x38	; 56
    1238:	0f 92       	push	r0
    123a:	18 be       	out	0x38, r1	; 56
    123c:	09 b6       	in	r0, 0x39	; 57
    123e:	0f 92       	push	r0
    1240:	19 be       	out	0x39, r1	; 57
    1242:	0b b6       	in	r0, 0x3b	; 59
    1244:	0f 92       	push	r0
    1246:	1b be       	out	0x3b, r1	; 59
    1248:	2f 93       	push	r18
    124a:	3f 93       	push	r19
    124c:	4f 93       	push	r20
    124e:	5f 93       	push	r21
    1250:	6f 93       	push	r22
    1252:	7f 93       	push	r23
    1254:	8f 93       	push	r24
    1256:	9f 93       	push	r25
    1258:	af 93       	push	r26
    125a:	bf 93       	push	r27
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1260:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <tc_tcd1_cca_callback>
    1264:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <tc_tcd1_cca_callback+0x1>
    1268:	30 97       	sbiw	r30, 0x00	; 0
    126a:	09 f0       	breq	.+2      	; 0x126e <__vector_85+0x42>
		tc_tcd1_cca_callback();
    126c:	19 95       	eicall
	}
}
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0b be       	out	0x3b, r0	; 59
    128a:	0f 90       	pop	r0
    128c:	09 be       	out	0x39, r0	; 57
    128e:	0f 90       	pop	r0
    1290:	08 be       	out	0x38, r0	; 56
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	08 b6       	in	r0, 0x38	; 56
    12a8:	0f 92       	push	r0
    12aa:	18 be       	out	0x38, r1	; 56
    12ac:	09 b6       	in	r0, 0x39	; 57
    12ae:	0f 92       	push	r0
    12b0:	19 be       	out	0x39, r1	; 57
    12b2:	0b b6       	in	r0, 0x3b	; 59
    12b4:	0f 92       	push	r0
    12b6:	1b be       	out	0x3b, r1	; 59
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    12d0:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <tc_tcd1_ccb_callback>
    12d4:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <tc_tcd1_ccb_callback+0x1>
    12d8:	30 97       	sbiw	r30, 0x00	; 0
    12da:	09 f0       	breq	.+2      	; 0x12de <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    12dc:	19 95       	eicall
	}
}
    12de:	ff 91       	pop	r31
    12e0:	ef 91       	pop	r30
    12e2:	bf 91       	pop	r27
    12e4:	af 91       	pop	r26
    12e6:	9f 91       	pop	r25
    12e8:	8f 91       	pop	r24
    12ea:	7f 91       	pop	r23
    12ec:	6f 91       	pop	r22
    12ee:	5f 91       	pop	r21
    12f0:	4f 91       	pop	r20
    12f2:	3f 91       	pop	r19
    12f4:	2f 91       	pop	r18
    12f6:	0f 90       	pop	r0
    12f8:	0b be       	out	0x3b, r0	; 59
    12fa:	0f 90       	pop	r0
    12fc:	09 be       	out	0x39, r0	; 57
    12fe:	0f 90       	pop	r0
    1300:	08 be       	out	0x38, r0	; 56
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	08 b6       	in	r0, 0x38	; 56
    1318:	0f 92       	push	r0
    131a:	18 be       	out	0x38, r1	; 56
    131c:	09 b6       	in	r0, 0x39	; 57
    131e:	0f 92       	push	r0
    1320:	19 be       	out	0x39, r1	; 57
    1322:	0b b6       	in	r0, 0x3b	; 59
    1324:	0f 92       	push	r0
    1326:	1b be       	out	0x3b, r1	; 59
    1328:	2f 93       	push	r18
    132a:	3f 93       	push	r19
    132c:	4f 93       	push	r20
    132e:	5f 93       	push	r21
    1330:	6f 93       	push	r22
    1332:	7f 93       	push	r23
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25
    1338:	af 93       	push	r26
    133a:	bf 93       	push	r27
    133c:	ef 93       	push	r30
    133e:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1340:	e0 91 dc 20 	lds	r30, 0x20DC	; 0x8020dc <tc_tce0_err_callback>
    1344:	f0 91 dd 20 	lds	r31, 0x20DD	; 0x8020dd <tc_tce0_err_callback+0x1>
    1348:	30 97       	sbiw	r30, 0x00	; 0
    134a:	09 f0       	breq	.+2      	; 0x134e <__vector_48+0x42>
		tc_tce0_err_callback();
    134c:	19 95       	eicall
	}
}
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	bf 91       	pop	r27
    1354:	af 91       	pop	r26
    1356:	9f 91       	pop	r25
    1358:	8f 91       	pop	r24
    135a:	7f 91       	pop	r23
    135c:	6f 91       	pop	r22
    135e:	5f 91       	pop	r21
    1360:	4f 91       	pop	r20
    1362:	3f 91       	pop	r19
    1364:	2f 91       	pop	r18
    1366:	0f 90       	pop	r0
    1368:	0b be       	out	0x3b, r0	; 59
    136a:	0f 90       	pop	r0
    136c:	09 be       	out	0x39, r0	; 57
    136e:	0f 90       	pop	r0
    1370:	08 be       	out	0x38, r0	; 56
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    137c:	1f 92       	push	r1
    137e:	0f 92       	push	r0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	0f 92       	push	r0
    1384:	11 24       	eor	r1, r1
    1386:	08 b6       	in	r0, 0x38	; 56
    1388:	0f 92       	push	r0
    138a:	18 be       	out	0x38, r1	; 56
    138c:	09 b6       	in	r0, 0x39	; 57
    138e:	0f 92       	push	r0
    1390:	19 be       	out	0x39, r1	; 57
    1392:	0b b6       	in	r0, 0x3b	; 59
    1394:	0f 92       	push	r0
    1396:	1b be       	out	0x3b, r1	; 59
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    13b0:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <tc_tce0_cca_callback>
    13b4:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <tc_tce0_cca_callback+0x1>
    13b8:	30 97       	sbiw	r30, 0x00	; 0
    13ba:	09 f0       	breq	.+2      	; 0x13be <__vector_49+0x42>
		tc_tce0_cca_callback();
    13bc:	19 95       	eicall
	}
}
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0b be       	out	0x3b, r0	; 59
    13da:	0f 90       	pop	r0
    13dc:	09 be       	out	0x39, r0	; 57
    13de:	0f 90       	pop	r0
    13e0:	08 be       	out	0x38, r0	; 56
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    13ec:	1f 92       	push	r1
    13ee:	0f 92       	push	r0
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	0f 92       	push	r0
    13f4:	11 24       	eor	r1, r1
    13f6:	08 b6       	in	r0, 0x38	; 56
    13f8:	0f 92       	push	r0
    13fa:	18 be       	out	0x38, r1	; 56
    13fc:	09 b6       	in	r0, 0x39	; 57
    13fe:	0f 92       	push	r0
    1400:	19 be       	out	0x39, r1	; 57
    1402:	0b b6       	in	r0, 0x3b	; 59
    1404:	0f 92       	push	r0
    1406:	1b be       	out	0x3b, r1	; 59
    1408:	2f 93       	push	r18
    140a:	3f 93       	push	r19
    140c:	4f 93       	push	r20
    140e:	5f 93       	push	r21
    1410:	6f 93       	push	r22
    1412:	7f 93       	push	r23
    1414:	8f 93       	push	r24
    1416:	9f 93       	push	r25
    1418:	af 93       	push	r26
    141a:	bf 93       	push	r27
    141c:	ef 93       	push	r30
    141e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1420:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <tc_tce0_ccb_callback>
    1424:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <tc_tce0_ccb_callback+0x1>
    1428:	30 97       	sbiw	r30, 0x00	; 0
    142a:	09 f0       	breq	.+2      	; 0x142e <__vector_50+0x42>
		tc_tce0_ccb_callback();
    142c:	19 95       	eicall
	}
}
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	bf 91       	pop	r27
    1434:	af 91       	pop	r26
    1436:	9f 91       	pop	r25
    1438:	8f 91       	pop	r24
    143a:	7f 91       	pop	r23
    143c:	6f 91       	pop	r22
    143e:	5f 91       	pop	r21
    1440:	4f 91       	pop	r20
    1442:	3f 91       	pop	r19
    1444:	2f 91       	pop	r18
    1446:	0f 90       	pop	r0
    1448:	0b be       	out	0x3b, r0	; 59
    144a:	0f 90       	pop	r0
    144c:	09 be       	out	0x39, r0	; 57
    144e:	0f 90       	pop	r0
    1450:	08 be       	out	0x38, r0	; 56
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	08 b6       	in	r0, 0x38	; 56
    1468:	0f 92       	push	r0
    146a:	18 be       	out	0x38, r1	; 56
    146c:	09 b6       	in	r0, 0x39	; 57
    146e:	0f 92       	push	r0
    1470:	19 be       	out	0x39, r1	; 57
    1472:	0b b6       	in	r0, 0x3b	; 59
    1474:	0f 92       	push	r0
    1476:	1b be       	out	0x3b, r1	; 59
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1490:	e0 91 d6 20 	lds	r30, 0x20D6	; 0x8020d6 <tc_tce0_ccc_callback>
    1494:	f0 91 d7 20 	lds	r31, 0x20D7	; 0x8020d7 <tc_tce0_ccc_callback+0x1>
    1498:	30 97       	sbiw	r30, 0x00	; 0
    149a:	09 f0       	breq	.+2      	; 0x149e <__vector_51+0x42>
		tc_tce0_ccc_callback();
    149c:	19 95       	eicall
	}
}
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0b be       	out	0x3b, r0	; 59
    14ba:	0f 90       	pop	r0
    14bc:	09 be       	out	0x39, r0	; 57
    14be:	0f 90       	pop	r0
    14c0:	08 be       	out	0x38, r0	; 56
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    14cc:	1f 92       	push	r1
    14ce:	0f 92       	push	r0
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	0f 92       	push	r0
    14d4:	11 24       	eor	r1, r1
    14d6:	08 b6       	in	r0, 0x38	; 56
    14d8:	0f 92       	push	r0
    14da:	18 be       	out	0x38, r1	; 56
    14dc:	09 b6       	in	r0, 0x39	; 57
    14de:	0f 92       	push	r0
    14e0:	19 be       	out	0x39, r1	; 57
    14e2:	0b b6       	in	r0, 0x3b	; 59
    14e4:	0f 92       	push	r0
    14e6:	1b be       	out	0x3b, r1	; 59
    14e8:	2f 93       	push	r18
    14ea:	3f 93       	push	r19
    14ec:	4f 93       	push	r20
    14ee:	5f 93       	push	r21
    14f0:	6f 93       	push	r22
    14f2:	7f 93       	push	r23
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
    14f8:	af 93       	push	r26
    14fa:	bf 93       	push	r27
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1500:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <tc_tce0_ccd_callback>
    1504:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <tc_tce0_ccd_callback+0x1>
    1508:	30 97       	sbiw	r30, 0x00	; 0
    150a:	09 f0       	breq	.+2      	; 0x150e <__vector_52+0x42>
		tc_tce0_ccd_callback();
    150c:	19 95       	eicall
	}
}
    150e:	ff 91       	pop	r31
    1510:	ef 91       	pop	r30
    1512:	bf 91       	pop	r27
    1514:	af 91       	pop	r26
    1516:	9f 91       	pop	r25
    1518:	8f 91       	pop	r24
    151a:	7f 91       	pop	r23
    151c:	6f 91       	pop	r22
    151e:	5f 91       	pop	r21
    1520:	4f 91       	pop	r20
    1522:	3f 91       	pop	r19
    1524:	2f 91       	pop	r18
    1526:	0f 90       	pop	r0
    1528:	0b be       	out	0x3b, r0	; 59
    152a:	0f 90       	pop	r0
    152c:	09 be       	out	0x39, r0	; 57
    152e:	0f 90       	pop	r0
    1530:	08 be       	out	0x38, r0	; 56
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	08 b6       	in	r0, 0x38	; 56
    1548:	0f 92       	push	r0
    154a:	18 be       	out	0x38, r1	; 56
    154c:	09 b6       	in	r0, 0x39	; 57
    154e:	0f 92       	push	r0
    1550:	19 be       	out	0x39, r1	; 57
    1552:	0b b6       	in	r0, 0x3b	; 59
    1554:	0f 92       	push	r0
    1556:	1b be       	out	0x3b, r1	; 59
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1570:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <tc_tce1_ovf_callback>
    1574:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <tc_tce1_ovf_callback+0x1>
    1578:	30 97       	sbiw	r30, 0x00	; 0
    157a:	09 f0       	breq	.+2      	; 0x157e <__vector_53+0x42>
		tc_tce1_ovf_callback();
    157c:	19 95       	eicall
	}
}
    157e:	ff 91       	pop	r31
    1580:	ef 91       	pop	r30
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	7f 91       	pop	r23
    158c:	6f 91       	pop	r22
    158e:	5f 91       	pop	r21
    1590:	4f 91       	pop	r20
    1592:	3f 91       	pop	r19
    1594:	2f 91       	pop	r18
    1596:	0f 90       	pop	r0
    1598:	0b be       	out	0x3b, r0	; 59
    159a:	0f 90       	pop	r0
    159c:	09 be       	out	0x39, r0	; 57
    159e:	0f 90       	pop	r0
    15a0:	08 be       	out	0x38, r0	; 56
    15a2:	0f 90       	pop	r0
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	0f 90       	pop	r0
    15a8:	1f 90       	pop	r1
    15aa:	18 95       	reti

000015ac <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    15ac:	1f 92       	push	r1
    15ae:	0f 92       	push	r0
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	08 b6       	in	r0, 0x38	; 56
    15b8:	0f 92       	push	r0
    15ba:	18 be       	out	0x38, r1	; 56
    15bc:	09 b6       	in	r0, 0x39	; 57
    15be:	0f 92       	push	r0
    15c0:	19 be       	out	0x39, r1	; 57
    15c2:	0b b6       	in	r0, 0x3b	; 59
    15c4:	0f 92       	push	r0
    15c6:	1b be       	out	0x3b, r1	; 59
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    15e0:	e0 91 d0 20 	lds	r30, 0x20D0	; 0x8020d0 <tc_tce1_err_callback>
    15e4:	f0 91 d1 20 	lds	r31, 0x20D1	; 0x8020d1 <tc_tce1_err_callback+0x1>
    15e8:	30 97       	sbiw	r30, 0x00	; 0
    15ea:	09 f0       	breq	.+2      	; 0x15ee <__vector_54+0x42>
		tc_tce1_err_callback();
    15ec:	19 95       	eicall
	}
}
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0b be       	out	0x3b, r0	; 59
    160a:	0f 90       	pop	r0
    160c:	09 be       	out	0x39, r0	; 57
    160e:	0f 90       	pop	r0
    1610:	08 be       	out	0x38, r0	; 56
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	0f 90       	pop	r0
    1618:	1f 90       	pop	r1
    161a:	18 95       	reti

0000161c <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    161c:	1f 92       	push	r1
    161e:	0f 92       	push	r0
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	0f 92       	push	r0
    1624:	11 24       	eor	r1, r1
    1626:	08 b6       	in	r0, 0x38	; 56
    1628:	0f 92       	push	r0
    162a:	18 be       	out	0x38, r1	; 56
    162c:	09 b6       	in	r0, 0x39	; 57
    162e:	0f 92       	push	r0
    1630:	19 be       	out	0x39, r1	; 57
    1632:	0b b6       	in	r0, 0x3b	; 59
    1634:	0f 92       	push	r0
    1636:	1b be       	out	0x3b, r1	; 59
    1638:	2f 93       	push	r18
    163a:	3f 93       	push	r19
    163c:	4f 93       	push	r20
    163e:	5f 93       	push	r21
    1640:	6f 93       	push	r22
    1642:	7f 93       	push	r23
    1644:	8f 93       	push	r24
    1646:	9f 93       	push	r25
    1648:	af 93       	push	r26
    164a:	bf 93       	push	r27
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1650:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <tc_tce1_cca_callback>
    1654:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <tc_tce1_cca_callback+0x1>
    1658:	30 97       	sbiw	r30, 0x00	; 0
    165a:	09 f0       	breq	.+2      	; 0x165e <__vector_55+0x42>
		tc_tce1_cca_callback();
    165c:	19 95       	eicall
	}
}
    165e:	ff 91       	pop	r31
    1660:	ef 91       	pop	r30
    1662:	bf 91       	pop	r27
    1664:	af 91       	pop	r26
    1666:	9f 91       	pop	r25
    1668:	8f 91       	pop	r24
    166a:	7f 91       	pop	r23
    166c:	6f 91       	pop	r22
    166e:	5f 91       	pop	r21
    1670:	4f 91       	pop	r20
    1672:	3f 91       	pop	r19
    1674:	2f 91       	pop	r18
    1676:	0f 90       	pop	r0
    1678:	0b be       	out	0x3b, r0	; 59
    167a:	0f 90       	pop	r0
    167c:	09 be       	out	0x39, r0	; 57
    167e:	0f 90       	pop	r0
    1680:	08 be       	out	0x38, r0	; 56
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	0f 90       	pop	r0
    1688:	1f 90       	pop	r1
    168a:	18 95       	reti

0000168c <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    168c:	1f 92       	push	r1
    168e:	0f 92       	push	r0
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	0f 92       	push	r0
    1694:	11 24       	eor	r1, r1
    1696:	08 b6       	in	r0, 0x38	; 56
    1698:	0f 92       	push	r0
    169a:	18 be       	out	0x38, r1	; 56
    169c:	09 b6       	in	r0, 0x39	; 57
    169e:	0f 92       	push	r0
    16a0:	19 be       	out	0x39, r1	; 57
    16a2:	0b b6       	in	r0, 0x3b	; 59
    16a4:	0f 92       	push	r0
    16a6:	1b be       	out	0x3b, r1	; 59
    16a8:	2f 93       	push	r18
    16aa:	3f 93       	push	r19
    16ac:	4f 93       	push	r20
    16ae:	5f 93       	push	r21
    16b0:	6f 93       	push	r22
    16b2:	7f 93       	push	r23
    16b4:	8f 93       	push	r24
    16b6:	9f 93       	push	r25
    16b8:	af 93       	push	r26
    16ba:	bf 93       	push	r27
    16bc:	ef 93       	push	r30
    16be:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    16c0:	e0 91 cc 20 	lds	r30, 0x20CC	; 0x8020cc <tc_tce1_ccb_callback>
    16c4:	f0 91 cd 20 	lds	r31, 0x20CD	; 0x8020cd <tc_tce1_ccb_callback+0x1>
    16c8:	30 97       	sbiw	r30, 0x00	; 0
    16ca:	09 f0       	breq	.+2      	; 0x16ce <__vector_56+0x42>
		tc_tce1_ccb_callback();
    16cc:	19 95       	eicall
	}
}
    16ce:	ff 91       	pop	r31
    16d0:	ef 91       	pop	r30
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	0f 90       	pop	r0
    16e8:	0b be       	out	0x3b, r0	; 59
    16ea:	0f 90       	pop	r0
    16ec:	09 be       	out	0x39, r0	; 57
    16ee:	0f 90       	pop	r0
    16f0:	08 be       	out	0x38, r0	; 56
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	0f 90       	pop	r0
    16f8:	1f 90       	pop	r1
    16fa:	18 95       	reti

000016fc <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    16fc:	1f 92       	push	r1
    16fe:	0f 92       	push	r0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	0f 92       	push	r0
    1704:	11 24       	eor	r1, r1
    1706:	08 b6       	in	r0, 0x38	; 56
    1708:	0f 92       	push	r0
    170a:	18 be       	out	0x38, r1	; 56
    170c:	09 b6       	in	r0, 0x39	; 57
    170e:	0f 92       	push	r0
    1710:	19 be       	out	0x39, r1	; 57
    1712:	0b b6       	in	r0, 0x3b	; 59
    1714:	0f 92       	push	r0
    1716:	1b be       	out	0x3b, r1	; 59
    1718:	2f 93       	push	r18
    171a:	3f 93       	push	r19
    171c:	4f 93       	push	r20
    171e:	5f 93       	push	r21
    1720:	6f 93       	push	r22
    1722:	7f 93       	push	r23
    1724:	8f 93       	push	r24
    1726:	9f 93       	push	r25
    1728:	af 93       	push	r26
    172a:	bf 93       	push	r27
    172c:	ef 93       	push	r30
    172e:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1730:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <tc_tcf0_ovf_callback>
    1734:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <tc_tcf0_ovf_callback+0x1>
    1738:	30 97       	sbiw	r30, 0x00	; 0
    173a:	09 f0       	breq	.+2      	; 0x173e <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    173c:	19 95       	eicall
	}
}
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	7f 91       	pop	r23
    174c:	6f 91       	pop	r22
    174e:	5f 91       	pop	r21
    1750:	4f 91       	pop	r20
    1752:	3f 91       	pop	r19
    1754:	2f 91       	pop	r18
    1756:	0f 90       	pop	r0
    1758:	0b be       	out	0x3b, r0	; 59
    175a:	0f 90       	pop	r0
    175c:	09 be       	out	0x39, r0	; 57
    175e:	0f 90       	pop	r0
    1760:	08 be       	out	0x38, r0	; 56
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    176c:	1f 92       	push	r1
    176e:	0f 92       	push	r0
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	0f 92       	push	r0
    1774:	11 24       	eor	r1, r1
    1776:	08 b6       	in	r0, 0x38	; 56
    1778:	0f 92       	push	r0
    177a:	18 be       	out	0x38, r1	; 56
    177c:	09 b6       	in	r0, 0x39	; 57
    177e:	0f 92       	push	r0
    1780:	19 be       	out	0x39, r1	; 57
    1782:	0b b6       	in	r0, 0x3b	; 59
    1784:	0f 92       	push	r0
    1786:	1b be       	out	0x3b, r1	; 59
    1788:	2f 93       	push	r18
    178a:	3f 93       	push	r19
    178c:	4f 93       	push	r20
    178e:	5f 93       	push	r21
    1790:	6f 93       	push	r22
    1792:	7f 93       	push	r23
    1794:	8f 93       	push	r24
    1796:	9f 93       	push	r25
    1798:	af 93       	push	r26
    179a:	bf 93       	push	r27
    179c:	ef 93       	push	r30
    179e:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    17a0:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <tc_tcf0_err_callback>
    17a4:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <tc_tcf0_err_callback+0x1>
    17a8:	30 97       	sbiw	r30, 0x00	; 0
    17aa:	09 f0       	breq	.+2      	; 0x17ae <__vector_109+0x42>
		tc_tcf0_err_callback();
    17ac:	19 95       	eicall
	}
}
    17ae:	ff 91       	pop	r31
    17b0:	ef 91       	pop	r30
    17b2:	bf 91       	pop	r27
    17b4:	af 91       	pop	r26
    17b6:	9f 91       	pop	r25
    17b8:	8f 91       	pop	r24
    17ba:	7f 91       	pop	r23
    17bc:	6f 91       	pop	r22
    17be:	5f 91       	pop	r21
    17c0:	4f 91       	pop	r20
    17c2:	3f 91       	pop	r19
    17c4:	2f 91       	pop	r18
    17c6:	0f 90       	pop	r0
    17c8:	0b be       	out	0x3b, r0	; 59
    17ca:	0f 90       	pop	r0
    17cc:	09 be       	out	0x39, r0	; 57
    17ce:	0f 90       	pop	r0
    17d0:	08 be       	out	0x38, r0	; 56
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	0f 90       	pop	r0
    17d8:	1f 90       	pop	r1
    17da:	18 95       	reti

000017dc <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    17dc:	1f 92       	push	r1
    17de:	0f 92       	push	r0
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	0f 92       	push	r0
    17e4:	11 24       	eor	r1, r1
    17e6:	08 b6       	in	r0, 0x38	; 56
    17e8:	0f 92       	push	r0
    17ea:	18 be       	out	0x38, r1	; 56
    17ec:	09 b6       	in	r0, 0x39	; 57
    17ee:	0f 92       	push	r0
    17f0:	19 be       	out	0x39, r1	; 57
    17f2:	0b b6       	in	r0, 0x3b	; 59
    17f4:	0f 92       	push	r0
    17f6:	1b be       	out	0x3b, r1	; 59
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	ef 93       	push	r30
    180e:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1810:	e0 91 c6 20 	lds	r30, 0x20C6	; 0x8020c6 <tc_tcf0_cca_callback>
    1814:	f0 91 c7 20 	lds	r31, 0x20C7	; 0x8020c7 <tc_tcf0_cca_callback+0x1>
    1818:	30 97       	sbiw	r30, 0x00	; 0
    181a:	09 f0       	breq	.+2      	; 0x181e <__vector_110+0x42>
		tc_tcf0_cca_callback();
    181c:	19 95       	eicall
	}
}
    181e:	ff 91       	pop	r31
    1820:	ef 91       	pop	r30
    1822:	bf 91       	pop	r27
    1824:	af 91       	pop	r26
    1826:	9f 91       	pop	r25
    1828:	8f 91       	pop	r24
    182a:	7f 91       	pop	r23
    182c:	6f 91       	pop	r22
    182e:	5f 91       	pop	r21
    1830:	4f 91       	pop	r20
    1832:	3f 91       	pop	r19
    1834:	2f 91       	pop	r18
    1836:	0f 90       	pop	r0
    1838:	0b be       	out	0x3b, r0	; 59
    183a:	0f 90       	pop	r0
    183c:	09 be       	out	0x39, r0	; 57
    183e:	0f 90       	pop	r0
    1840:	08 be       	out	0x38, r0	; 56
    1842:	0f 90       	pop	r0
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	0f 90       	pop	r0
    1848:	1f 90       	pop	r1
    184a:	18 95       	reti

0000184c <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    184c:	1f 92       	push	r1
    184e:	0f 92       	push	r0
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	0f 92       	push	r0
    1854:	11 24       	eor	r1, r1
    1856:	08 b6       	in	r0, 0x38	; 56
    1858:	0f 92       	push	r0
    185a:	18 be       	out	0x38, r1	; 56
    185c:	09 b6       	in	r0, 0x39	; 57
    185e:	0f 92       	push	r0
    1860:	19 be       	out	0x39, r1	; 57
    1862:	0b b6       	in	r0, 0x3b	; 59
    1864:	0f 92       	push	r0
    1866:	1b be       	out	0x3b, r1	; 59
    1868:	2f 93       	push	r18
    186a:	3f 93       	push	r19
    186c:	4f 93       	push	r20
    186e:	5f 93       	push	r21
    1870:	6f 93       	push	r22
    1872:	7f 93       	push	r23
    1874:	8f 93       	push	r24
    1876:	9f 93       	push	r25
    1878:	af 93       	push	r26
    187a:	bf 93       	push	r27
    187c:	ef 93       	push	r30
    187e:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1880:	e0 91 c4 20 	lds	r30, 0x20C4	; 0x8020c4 <tc_tcf0_ccb_callback>
    1884:	f0 91 c5 20 	lds	r31, 0x20C5	; 0x8020c5 <tc_tcf0_ccb_callback+0x1>
    1888:	30 97       	sbiw	r30, 0x00	; 0
    188a:	09 f0       	breq	.+2      	; 0x188e <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    188c:	19 95       	eicall
	}
}
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	7f 91       	pop	r23
    189c:	6f 91       	pop	r22
    189e:	5f 91       	pop	r21
    18a0:	4f 91       	pop	r20
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	0f 90       	pop	r0
    18a8:	0b be       	out	0x3b, r0	; 59
    18aa:	0f 90       	pop	r0
    18ac:	09 be       	out	0x39, r0	; 57
    18ae:	0f 90       	pop	r0
    18b0:	08 be       	out	0x38, r0	; 56
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	0f 90       	pop	r0
    18b8:	1f 90       	pop	r1
    18ba:	18 95       	reti

000018bc <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    18bc:	1f 92       	push	r1
    18be:	0f 92       	push	r0
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	0f 92       	push	r0
    18c4:	11 24       	eor	r1, r1
    18c6:	08 b6       	in	r0, 0x38	; 56
    18c8:	0f 92       	push	r0
    18ca:	18 be       	out	0x38, r1	; 56
    18cc:	09 b6       	in	r0, 0x39	; 57
    18ce:	0f 92       	push	r0
    18d0:	19 be       	out	0x39, r1	; 57
    18d2:	0b b6       	in	r0, 0x3b	; 59
    18d4:	0f 92       	push	r0
    18d6:	1b be       	out	0x3b, r1	; 59
    18d8:	2f 93       	push	r18
    18da:	3f 93       	push	r19
    18dc:	4f 93       	push	r20
    18de:	5f 93       	push	r21
    18e0:	6f 93       	push	r22
    18e2:	7f 93       	push	r23
    18e4:	8f 93       	push	r24
    18e6:	9f 93       	push	r25
    18e8:	af 93       	push	r26
    18ea:	bf 93       	push	r27
    18ec:	ef 93       	push	r30
    18ee:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    18f0:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <tc_tcf0_ccc_callback>
    18f4:	f0 91 c3 20 	lds	r31, 0x20C3	; 0x8020c3 <tc_tcf0_ccc_callback+0x1>
    18f8:	30 97       	sbiw	r30, 0x00	; 0
    18fa:	09 f0       	breq	.+2      	; 0x18fe <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    18fc:	19 95       	eicall
	}
}
    18fe:	ff 91       	pop	r31
    1900:	ef 91       	pop	r30
    1902:	bf 91       	pop	r27
    1904:	af 91       	pop	r26
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	7f 91       	pop	r23
    190c:	6f 91       	pop	r22
    190e:	5f 91       	pop	r21
    1910:	4f 91       	pop	r20
    1912:	3f 91       	pop	r19
    1914:	2f 91       	pop	r18
    1916:	0f 90       	pop	r0
    1918:	0b be       	out	0x3b, r0	; 59
    191a:	0f 90       	pop	r0
    191c:	09 be       	out	0x39, r0	; 57
    191e:	0f 90       	pop	r0
    1920:	08 be       	out	0x38, r0	; 56
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0
    1928:	1f 90       	pop	r1
    192a:	18 95       	reti

0000192c <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    192c:	1f 92       	push	r1
    192e:	0f 92       	push	r0
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	0f 92       	push	r0
    1934:	11 24       	eor	r1, r1
    1936:	08 b6       	in	r0, 0x38	; 56
    1938:	0f 92       	push	r0
    193a:	18 be       	out	0x38, r1	; 56
    193c:	09 b6       	in	r0, 0x39	; 57
    193e:	0f 92       	push	r0
    1940:	19 be       	out	0x39, r1	; 57
    1942:	0b b6       	in	r0, 0x3b	; 59
    1944:	0f 92       	push	r0
    1946:	1b be       	out	0x3b, r1	; 59
    1948:	2f 93       	push	r18
    194a:	3f 93       	push	r19
    194c:	4f 93       	push	r20
    194e:	5f 93       	push	r21
    1950:	6f 93       	push	r22
    1952:	7f 93       	push	r23
    1954:	8f 93       	push	r24
    1956:	9f 93       	push	r25
    1958:	af 93       	push	r26
    195a:	bf 93       	push	r27
    195c:	ef 93       	push	r30
    195e:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1960:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <tc_tcf0_ccd_callback>
    1964:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <tc_tcf0_ccd_callback+0x1>
    1968:	30 97       	sbiw	r30, 0x00	; 0
    196a:	09 f0       	breq	.+2      	; 0x196e <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    196c:	19 95       	eicall
	}
}
    196e:	ff 91       	pop	r31
    1970:	ef 91       	pop	r30
    1972:	bf 91       	pop	r27
    1974:	af 91       	pop	r26
    1976:	9f 91       	pop	r25
    1978:	8f 91       	pop	r24
    197a:	7f 91       	pop	r23
    197c:	6f 91       	pop	r22
    197e:	5f 91       	pop	r21
    1980:	4f 91       	pop	r20
    1982:	3f 91       	pop	r19
    1984:	2f 91       	pop	r18
    1986:	0f 90       	pop	r0
    1988:	0b be       	out	0x3b, r0	; 59
    198a:	0f 90       	pop	r0
    198c:	09 be       	out	0x39, r0	; 57
    198e:	0f 90       	pop	r0
    1990:	08 be       	out	0x38, r0	; 56
    1992:	0f 90       	pop	r0
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	0f 90       	pop	r0
    1998:	1f 90       	pop	r1
    199a:	18 95       	reti

0000199c <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    199c:	1f 92       	push	r1
    199e:	0f 92       	push	r0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	0f 92       	push	r0
    19a4:	11 24       	eor	r1, r1
    19a6:	08 b6       	in	r0, 0x38	; 56
    19a8:	0f 92       	push	r0
    19aa:	18 be       	out	0x38, r1	; 56
    19ac:	09 b6       	in	r0, 0x39	; 57
    19ae:	0f 92       	push	r0
    19b0:	19 be       	out	0x39, r1	; 57
    19b2:	0b b6       	in	r0, 0x3b	; 59
    19b4:	0f 92       	push	r0
    19b6:	1b be       	out	0x3b, r1	; 59
    19b8:	2f 93       	push	r18
    19ba:	3f 93       	push	r19
    19bc:	4f 93       	push	r20
    19be:	5f 93       	push	r21
    19c0:	6f 93       	push	r22
    19c2:	7f 93       	push	r23
    19c4:	8f 93       	push	r24
    19c6:	9f 93       	push	r25
    19c8:	af 93       	push	r26
    19ca:	bf 93       	push	r27
    19cc:	ef 93       	push	r30
    19ce:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    19d0:	e0 91 be 20 	lds	r30, 0x20BE	; 0x8020be <tc_tcf1_ovf_callback>
    19d4:	f0 91 bf 20 	lds	r31, 0x20BF	; 0x8020bf <tc_tcf1_ovf_callback+0x1>
    19d8:	30 97       	sbiw	r30, 0x00	; 0
    19da:	09 f0       	breq	.+2      	; 0x19de <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    19dc:	19 95       	eicall
	}
}
    19de:	ff 91       	pop	r31
    19e0:	ef 91       	pop	r30
    19e2:	bf 91       	pop	r27
    19e4:	af 91       	pop	r26
    19e6:	9f 91       	pop	r25
    19e8:	8f 91       	pop	r24
    19ea:	7f 91       	pop	r23
    19ec:	6f 91       	pop	r22
    19ee:	5f 91       	pop	r21
    19f0:	4f 91       	pop	r20
    19f2:	3f 91       	pop	r19
    19f4:	2f 91       	pop	r18
    19f6:	0f 90       	pop	r0
    19f8:	0b be       	out	0x3b, r0	; 59
    19fa:	0f 90       	pop	r0
    19fc:	09 be       	out	0x39, r0	; 57
    19fe:	0f 90       	pop	r0
    1a00:	08 be       	out	0x38, r0	; 56
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti

00001a0c <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1a0c:	1f 92       	push	r1
    1a0e:	0f 92       	push	r0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	0f 92       	push	r0
    1a14:	11 24       	eor	r1, r1
    1a16:	08 b6       	in	r0, 0x38	; 56
    1a18:	0f 92       	push	r0
    1a1a:	18 be       	out	0x38, r1	; 56
    1a1c:	09 b6       	in	r0, 0x39	; 57
    1a1e:	0f 92       	push	r0
    1a20:	19 be       	out	0x39, r1	; 57
    1a22:	0b b6       	in	r0, 0x3b	; 59
    1a24:	0f 92       	push	r0
    1a26:	1b be       	out	0x3b, r1	; 59
    1a28:	2f 93       	push	r18
    1a2a:	3f 93       	push	r19
    1a2c:	4f 93       	push	r20
    1a2e:	5f 93       	push	r21
    1a30:	6f 93       	push	r22
    1a32:	7f 93       	push	r23
    1a34:	8f 93       	push	r24
    1a36:	9f 93       	push	r25
    1a38:	af 93       	push	r26
    1a3a:	bf 93       	push	r27
    1a3c:	ef 93       	push	r30
    1a3e:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1a40:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <tc_tcf1_err_callback>
    1a44:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <tc_tcf1_err_callback+0x1>
    1a48:	30 97       	sbiw	r30, 0x00	; 0
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <__vector_115+0x42>
		tc_tcf1_err_callback();
    1a4c:	19 95       	eicall
	}
}
    1a4e:	ff 91       	pop	r31
    1a50:	ef 91       	pop	r30
    1a52:	bf 91       	pop	r27
    1a54:	af 91       	pop	r26
    1a56:	9f 91       	pop	r25
    1a58:	8f 91       	pop	r24
    1a5a:	7f 91       	pop	r23
    1a5c:	6f 91       	pop	r22
    1a5e:	5f 91       	pop	r21
    1a60:	4f 91       	pop	r20
    1a62:	3f 91       	pop	r19
    1a64:	2f 91       	pop	r18
    1a66:	0f 90       	pop	r0
    1a68:	0b be       	out	0x3b, r0	; 59
    1a6a:	0f 90       	pop	r0
    1a6c:	09 be       	out	0x39, r0	; 57
    1a6e:	0f 90       	pop	r0
    1a70:	08 be       	out	0x38, r0	; 56
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	0f 90       	pop	r0
    1a78:	1f 90       	pop	r1
    1a7a:	18 95       	reti

00001a7c <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1a7c:	1f 92       	push	r1
    1a7e:	0f 92       	push	r0
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	0f 92       	push	r0
    1a84:	11 24       	eor	r1, r1
    1a86:	08 b6       	in	r0, 0x38	; 56
    1a88:	0f 92       	push	r0
    1a8a:	18 be       	out	0x38, r1	; 56
    1a8c:	09 b6       	in	r0, 0x39	; 57
    1a8e:	0f 92       	push	r0
    1a90:	19 be       	out	0x39, r1	; 57
    1a92:	0b b6       	in	r0, 0x3b	; 59
    1a94:	0f 92       	push	r0
    1a96:	1b be       	out	0x3b, r1	; 59
    1a98:	2f 93       	push	r18
    1a9a:	3f 93       	push	r19
    1a9c:	4f 93       	push	r20
    1a9e:	5f 93       	push	r21
    1aa0:	6f 93       	push	r22
    1aa2:	7f 93       	push	r23
    1aa4:	8f 93       	push	r24
    1aa6:	9f 93       	push	r25
    1aa8:	af 93       	push	r26
    1aaa:	bf 93       	push	r27
    1aac:	ef 93       	push	r30
    1aae:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1ab0:	e0 91 ba 20 	lds	r30, 0x20BA	; 0x8020ba <tc_tcf1_cca_callback>
    1ab4:	f0 91 bb 20 	lds	r31, 0x20BB	; 0x8020bb <tc_tcf1_cca_callback+0x1>
    1ab8:	30 97       	sbiw	r30, 0x00	; 0
    1aba:	09 f0       	breq	.+2      	; 0x1abe <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1abc:	19 95       	eicall
	}
}
    1abe:	ff 91       	pop	r31
    1ac0:	ef 91       	pop	r30
    1ac2:	bf 91       	pop	r27
    1ac4:	af 91       	pop	r26
    1ac6:	9f 91       	pop	r25
    1ac8:	8f 91       	pop	r24
    1aca:	7f 91       	pop	r23
    1acc:	6f 91       	pop	r22
    1ace:	5f 91       	pop	r21
    1ad0:	4f 91       	pop	r20
    1ad2:	3f 91       	pop	r19
    1ad4:	2f 91       	pop	r18
    1ad6:	0f 90       	pop	r0
    1ad8:	0b be       	out	0x3b, r0	; 59
    1ada:	0f 90       	pop	r0
    1adc:	09 be       	out	0x39, r0	; 57
    1ade:	0f 90       	pop	r0
    1ae0:	08 be       	out	0x38, r0	; 56
    1ae2:	0f 90       	pop	r0
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	0f 90       	pop	r0
    1ae8:	1f 90       	pop	r1
    1aea:	18 95       	reti

00001aec <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1aec:	1f 92       	push	r1
    1aee:	0f 92       	push	r0
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	0f 92       	push	r0
    1af4:	11 24       	eor	r1, r1
    1af6:	08 b6       	in	r0, 0x38	; 56
    1af8:	0f 92       	push	r0
    1afa:	18 be       	out	0x38, r1	; 56
    1afc:	09 b6       	in	r0, 0x39	; 57
    1afe:	0f 92       	push	r0
    1b00:	19 be       	out	0x39, r1	; 57
    1b02:	0b b6       	in	r0, 0x3b	; 59
    1b04:	0f 92       	push	r0
    1b06:	1b be       	out	0x3b, r1	; 59
    1b08:	2f 93       	push	r18
    1b0a:	3f 93       	push	r19
    1b0c:	4f 93       	push	r20
    1b0e:	5f 93       	push	r21
    1b10:	6f 93       	push	r22
    1b12:	7f 93       	push	r23
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	af 93       	push	r26
    1b1a:	bf 93       	push	r27
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1b20:	e0 91 b8 20 	lds	r30, 0x20B8	; 0x8020b8 <tc_tcf1_ccb_callback>
    1b24:	f0 91 b9 20 	lds	r31, 0x20B9	; 0x8020b9 <tc_tcf1_ccb_callback+0x1>
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1b2c:	19 95       	eicall
	}
}
    1b2e:	ff 91       	pop	r31
    1b30:	ef 91       	pop	r30
    1b32:	bf 91       	pop	r27
    1b34:	af 91       	pop	r26
    1b36:	9f 91       	pop	r25
    1b38:	8f 91       	pop	r24
    1b3a:	7f 91       	pop	r23
    1b3c:	6f 91       	pop	r22
    1b3e:	5f 91       	pop	r21
    1b40:	4f 91       	pop	r20
    1b42:	3f 91       	pop	r19
    1b44:	2f 91       	pop	r18
    1b46:	0f 90       	pop	r0
    1b48:	0b be       	out	0x3b, r0	; 59
    1b4a:	0f 90       	pop	r0
    1b4c:	09 be       	out	0x39, r0	; 57
    1b4e:	0f 90       	pop	r0
    1b50:	08 be       	out	0x38, r0	; 56
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	0f 90       	pop	r0
    1b58:	1f 90       	pop	r1
    1b5a:	18 95       	reti

00001b5c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1b60:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <transfer>
    1b64:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <transfer+0x1>
    1b68:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1b6a:	83 ff       	sbrs	r24, 3
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1b6e:	88 60       	ori	r24, 0x08	; 8
    1b70:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1b72:	83 e0       	ldi	r24, 0x03	; 3
    1b74:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1b76:	86 ef       	ldi	r24, 0xF6	; 246
    1b78:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <transfer+0xa>
    1b7c:	83 c0       	rjmp	.+262    	; 0x1c84 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1b7e:	98 2f       	mov	r25, r24
    1b80:	94 71       	andi	r25, 0x14	; 20
    1b82:	31 f0       	breq	.+12     	; 0x1b90 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <transfer+0xa>
    1b8e:	7a c0       	rjmp	.+244    	; 0x1c84 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1b90:	86 ff       	sbrs	r24, 6
    1b92:	43 c0       	rjmp	.+134    	; 0x1c1a <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1b94:	c6 e0       	ldi	r28, 0x06	; 6
    1b96:	d1 e2       	ldi	r29, 0x21	; 33
    1b98:	aa 81       	ldd	r26, Y+2	; 0x02
    1b9a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba0:	14 96       	adiw	r26, 0x04	; 4
    1ba2:	2d 91       	ld	r18, X+
    1ba4:	3c 91       	ld	r19, X
    1ba6:	15 97       	sbiw	r26, 0x05	; 5
    1ba8:	82 17       	cp	r24, r18
    1baa:	93 07       	cpc	r25, r19
    1bac:	6c f4       	brge	.+26     	; 0x1bc8 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1bae:	9c 01       	movw	r18, r24
    1bb0:	2f 5f       	subi	r18, 0xFF	; 255
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	20 93 0a 21 	sts	0x210A, r18	; 0x80210a <transfer+0x4>
    1bb8:	30 93 0b 21 	sts	0x210B, r19	; 0x80210b <transfer+0x5>
    1bbc:	a8 0f       	add	r26, r24
    1bbe:	b9 1f       	adc	r27, r25
    1bc0:	11 96       	adiw	r26, 0x01	; 1
    1bc2:	8c 91       	ld	r24, X
    1bc4:	87 83       	std	Z+7, r24	; 0x07
    1bc6:	5e c0       	rjmp	.+188    	; 0x1c84 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1bc8:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <transfer+0x6>
    1bcc:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <transfer+0x7>
    1bd0:	18 96       	adiw	r26, 0x08	; 8
    1bd2:	2d 91       	ld	r18, X+
    1bd4:	3c 91       	ld	r19, X
    1bd6:	19 97       	sbiw	r26, 0x09	; 9
    1bd8:	82 17       	cp	r24, r18
    1bda:	93 07       	cpc	r25, r19
    1bdc:	c8 f4       	brcc	.+50     	; 0x1c10 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1bde:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <transfer+0x8>
    1be2:	22 23       	and	r18, r18
    1be4:	21 f0       	breq	.+8      	; 0x1bee <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1be6:	86 81       	ldd	r24, Z+6	; 0x06
    1be8:	81 60       	ori	r24, 0x01	; 1
    1bea:	86 83       	std	Z+6, r24	; 0x06
    1bec:	4b c0       	rjmp	.+150    	; 0x1c84 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1bee:	16 96       	adiw	r26, 0x06	; 6
    1bf0:	2d 91       	ld	r18, X+
    1bf2:	3c 91       	ld	r19, X
    1bf4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	4f 5f       	subi	r20, 0xFF	; 255
    1bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfc:	40 93 0c 21 	sts	0x210C, r20	; 0x80210c <transfer+0x6>
    1c00:	50 93 0d 21 	sts	0x210D, r21	; 0x80210d <transfer+0x7>
    1c04:	d9 01       	movw	r26, r18
    1c06:	a8 0f       	add	r26, r24
    1c08:	b9 1f       	adc	r27, r25
    1c0a:	8c 91       	ld	r24, X
    1c0c:	87 83       	std	Z+7, r24	; 0x07
    1c0e:	3a c0       	rjmp	.+116    	; 0x1c84 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1c10:	83 e0       	ldi	r24, 0x03	; 3
    1c12:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1c14:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <transfer+0xa>
    1c18:	35 c0       	rjmp	.+106    	; 0x1c84 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1c1a:	88 23       	and	r24, r24
    1c1c:	84 f5       	brge	.+96     	; 0x1c7e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1c1e:	a6 e0       	ldi	r26, 0x06	; 6
    1c20:	b1 e2       	ldi	r27, 0x21	; 33
    1c22:	12 96       	adiw	r26, 0x02	; 2
    1c24:	cd 91       	ld	r28, X+
    1c26:	dc 91       	ld	r29, X
    1c28:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1c2a:	16 96       	adiw	r26, 0x06	; 6
    1c2c:	8d 91       	ld	r24, X+
    1c2e:	9c 91       	ld	r25, X
    1c30:	17 97       	sbiw	r26, 0x07	; 7
    1c32:	28 85       	ldd	r18, Y+8	; 0x08
    1c34:	39 85       	ldd	r19, Y+9	; 0x09
    1c36:	82 17       	cp	r24, r18
    1c38:	93 07       	cpc	r25, r19
    1c3a:	d8 f4       	brcc	.+54     	; 0x1c72 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1c3c:	6e 81       	ldd	r22, Y+6	; 0x06
    1c3e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1c40:	9c 01       	movw	r18, r24
    1c42:	2f 5f       	subi	r18, 0xFF	; 255
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	20 93 0c 21 	sts	0x210C, r18	; 0x80210c <transfer+0x6>
    1c4a:	30 93 0d 21 	sts	0x210D, r19	; 0x80210d <transfer+0x7>
    1c4e:	47 81       	ldd	r20, Z+7	; 0x07
    1c50:	db 01       	movw	r26, r22
    1c52:	a8 0f       	add	r26, r24
    1c54:	b9 1f       	adc	r27, r25
    1c56:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1c58:	88 85       	ldd	r24, Y+8	; 0x08
    1c5a:	99 85       	ldd	r25, Y+9	; 0x09
    1c5c:	28 17       	cp	r18, r24
    1c5e:	39 07       	cpc	r19, r25
    1c60:	18 f4       	brcc	.+6      	; 0x1c68 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	83 83       	std	Z+3, r24	; 0x03
    1c66:	0e c0       	rjmp	.+28     	; 0x1c84 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1c68:	87 e0       	ldi	r24, 0x07	; 7
    1c6a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1c6c:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <transfer+0xa>
    1c70:	09 c0       	rjmp	.+18     	; 0x1c84 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1c76:	89 ef       	ldi	r24, 0xF9	; 249
    1c78:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <transfer+0xa>
    1c7c:	03 c0       	rjmp	.+6      	; 0x1c84 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1c7e:	8b ef       	ldi	r24, 0xFB	; 251
    1c80:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <transfer+0xa>
	}
}
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	08 95       	ret

00001c8a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1c8a:	1f 92       	push	r1
    1c8c:	0f 92       	push	r0
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	0f 92       	push	r0
    1c92:	11 24       	eor	r1, r1
    1c94:	08 b6       	in	r0, 0x38	; 56
    1c96:	0f 92       	push	r0
    1c98:	18 be       	out	0x38, r1	; 56
    1c9a:	09 b6       	in	r0, 0x39	; 57
    1c9c:	0f 92       	push	r0
    1c9e:	19 be       	out	0x39, r1	; 57
    1ca0:	0b b6       	in	r0, 0x3b	; 59
    1ca2:	0f 92       	push	r0
    1ca4:	1b be       	out	0x3b, r1	; 59
    1ca6:	2f 93       	push	r18
    1ca8:	3f 93       	push	r19
    1caa:	4f 93       	push	r20
    1cac:	5f 93       	push	r21
    1cae:	6f 93       	push	r22
    1cb0:	7f 93       	push	r23
    1cb2:	8f 93       	push	r24
    1cb4:	9f 93       	push	r25
    1cb6:	af 93       	push	r26
    1cb8:	bf 93       	push	r27
    1cba:	ef 93       	push	r30
    1cbc:	ff 93       	push	r31
    1cbe:	4e df       	rcall	.-356    	; 0x1b5c <twim_interrupt_handler>
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	0f 90       	pop	r0
    1cda:	0b be       	out	0x3b, r0	; 59
    1cdc:	0f 90       	pop	r0
    1cde:	09 be       	out	0x39, r0	; 57
    1ce0:	0f 90       	pop	r0
    1ce2:	08 be       	out	0x38, r0	; 56
    1ce4:	0f 90       	pop	r0
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	0f 90       	pop	r0
    1cea:	1f 90       	pop	r1
    1cec:	18 95       	reti

00001cee <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    1cee:	1f 92       	push	r1
    1cf0:	0f 92       	push	r0
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	0f 92       	push	r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	08 b6       	in	r0, 0x38	; 56
    1cfa:	0f 92       	push	r0
    1cfc:	18 be       	out	0x38, r1	; 56
    1cfe:	09 b6       	in	r0, 0x39	; 57
    1d00:	0f 92       	push	r0
    1d02:	19 be       	out	0x39, r1	; 57
    1d04:	0b b6       	in	r0, 0x3b	; 59
    1d06:	0f 92       	push	r0
    1d08:	1b be       	out	0x3b, r1	; 59
    1d0a:	2f 93       	push	r18
    1d0c:	3f 93       	push	r19
    1d0e:	4f 93       	push	r20
    1d10:	5f 93       	push	r21
    1d12:	6f 93       	push	r22
    1d14:	7f 93       	push	r23
    1d16:	8f 93       	push	r24
    1d18:	9f 93       	push	r25
    1d1a:	af 93       	push	r26
    1d1c:	bf 93       	push	r27
    1d1e:	ef 93       	push	r30
    1d20:	ff 93       	push	r31
    1d22:	1c df       	rcall	.-456    	; 0x1b5c <twim_interrupt_handler>
    1d24:	ff 91       	pop	r31
    1d26:	ef 91       	pop	r30
    1d28:	bf 91       	pop	r27
    1d2a:	af 91       	pop	r26
    1d2c:	9f 91       	pop	r25
    1d2e:	8f 91       	pop	r24
    1d30:	7f 91       	pop	r23
    1d32:	6f 91       	pop	r22
    1d34:	5f 91       	pop	r21
    1d36:	4f 91       	pop	r20
    1d38:	3f 91       	pop	r19
    1d3a:	2f 91       	pop	r18
    1d3c:	0f 90       	pop	r0
    1d3e:	0b be       	out	0x3b, r0	; 59
    1d40:	0f 90       	pop	r0
    1d42:	09 be       	out	0x39, r0	; 57
    1d44:	0f 90       	pop	r0
    1d46:	08 be       	out	0x38, r0	; 56
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	0f 90       	pop	r0
    1d4e:	1f 90       	pop	r1
    1d50:	18 95       	reti

00001d52 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1d52:	1f 92       	push	r1
    1d54:	0f 92       	push	r0
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	0f 92       	push	r0
    1d5a:	11 24       	eor	r1, r1
    1d5c:	08 b6       	in	r0, 0x38	; 56
    1d5e:	0f 92       	push	r0
    1d60:	18 be       	out	0x38, r1	; 56
    1d62:	09 b6       	in	r0, 0x39	; 57
    1d64:	0f 92       	push	r0
    1d66:	19 be       	out	0x39, r1	; 57
    1d68:	0b b6       	in	r0, 0x3b	; 59
    1d6a:	0f 92       	push	r0
    1d6c:	1b be       	out	0x3b, r1	; 59
    1d6e:	2f 93       	push	r18
    1d70:	3f 93       	push	r19
    1d72:	4f 93       	push	r20
    1d74:	5f 93       	push	r21
    1d76:	6f 93       	push	r22
    1d78:	7f 93       	push	r23
    1d7a:	8f 93       	push	r24
    1d7c:	9f 93       	push	r25
    1d7e:	af 93       	push	r26
    1d80:	bf 93       	push	r27
    1d82:	ef 93       	push	r30
    1d84:	ff 93       	push	r31
    1d86:	ea de       	rcall	.-556    	; 0x1b5c <twim_interrupt_handler>
    1d88:	ff 91       	pop	r31
    1d8a:	ef 91       	pop	r30
    1d8c:	bf 91       	pop	r27
    1d8e:	af 91       	pop	r26
    1d90:	9f 91       	pop	r25
    1d92:	8f 91       	pop	r24
    1d94:	7f 91       	pop	r23
    1d96:	6f 91       	pop	r22
    1d98:	5f 91       	pop	r21
    1d9a:	4f 91       	pop	r20
    1d9c:	3f 91       	pop	r19
    1d9e:	2f 91       	pop	r18
    1da0:	0f 90       	pop	r0
    1da2:	0b be       	out	0x3b, r0	; 59
    1da4:	0f 90       	pop	r0
    1da6:	09 be       	out	0x39, r0	; 57
    1da8:	0f 90       	pop	r0
    1daa:	08 be       	out	0x38, r0	; 56
    1dac:	0f 90       	pop	r0
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	0f 90       	pop	r0
    1db2:	1f 90       	pop	r1
    1db4:	18 95       	reti

00001db6 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    1db6:	1f 92       	push	r1
    1db8:	0f 92       	push	r0
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	0f 92       	push	r0
    1dbe:	11 24       	eor	r1, r1
    1dc0:	08 b6       	in	r0, 0x38	; 56
    1dc2:	0f 92       	push	r0
    1dc4:	18 be       	out	0x38, r1	; 56
    1dc6:	09 b6       	in	r0, 0x39	; 57
    1dc8:	0f 92       	push	r0
    1dca:	19 be       	out	0x39, r1	; 57
    1dcc:	0b b6       	in	r0, 0x3b	; 59
    1dce:	0f 92       	push	r0
    1dd0:	1b be       	out	0x3b, r1	; 59
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
    1dea:	b8 de       	rcall	.-656    	; 0x1b5c <twim_interrupt_handler>
    1dec:	ff 91       	pop	r31
    1dee:	ef 91       	pop	r30
    1df0:	bf 91       	pop	r27
    1df2:	af 91       	pop	r26
    1df4:	9f 91       	pop	r25
    1df6:	8f 91       	pop	r24
    1df8:	7f 91       	pop	r23
    1dfa:	6f 91       	pop	r22
    1dfc:	5f 91       	pop	r21
    1dfe:	4f 91       	pop	r20
    1e00:	3f 91       	pop	r19
    1e02:	2f 91       	pop	r18
    1e04:	0f 90       	pop	r0
    1e06:	0b be       	out	0x3b, r0	; 59
    1e08:	0f 90       	pop	r0
    1e0a:	09 be       	out	0x39, r0	; 57
    1e0c:	0f 90       	pop	r0
    1e0e:	08 be       	out	0x38, r0	; 56
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti

00001e1a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	95 ff       	sbrs	r25, 5
    1e20:	fd cf       	rjmp	.-6      	; 0x1e1c <usart_putchar+0x2>
    1e22:	60 83       	st	Z, r22
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	08 95       	ret

00001e2a <usart_getchar>:
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	99 23       	and	r25, r25
    1e30:	ec f7       	brge	.-6      	; 0x1e2c <usart_getchar+0x2>
    1e32:	80 81       	ld	r24, Z
    1e34:	08 95       	ret

00001e36 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1e36:	4f 92       	push	r4
    1e38:	5f 92       	push	r5
    1e3a:	6f 92       	push	r6
    1e3c:	7f 92       	push	r7
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	7c 01       	movw	r14, r24
    1e52:	4a 01       	movw	r8, r20
    1e54:	5b 01       	movw	r10, r22
    1e56:	28 01       	movw	r4, r16
    1e58:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	84 81       	ldd	r24, Z+4	; 0x04
    1e5e:	82 ff       	sbrs	r24, 2
    1e60:	16 c0       	rjmp	.+44     	; 0x1e8e <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1e62:	d9 01       	movw	r26, r18
    1e64:	c8 01       	movw	r24, r16
    1e66:	68 94       	set
    1e68:	12 f8       	bld	r1, 2
    1e6a:	b6 95       	lsr	r27
    1e6c:	a7 95       	ror	r26
    1e6e:	97 95       	ror	r25
    1e70:	87 95       	ror	r24
    1e72:	16 94       	lsr	r1
    1e74:	d1 f7       	brne	.-12     	; 0x1e6a <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1e76:	b9 01       	movw	r22, r18
    1e78:	a8 01       	movw	r20, r16
    1e7a:	03 2e       	mov	r0, r19
    1e7c:	36 e1       	ldi	r19, 0x16	; 22
    1e7e:	76 95       	lsr	r23
    1e80:	67 95       	ror	r22
    1e82:	57 95       	ror	r21
    1e84:	47 95       	ror	r20
    1e86:	3a 95       	dec	r19
    1e88:	d1 f7       	brne	.-12     	; 0x1e7e <usart_set_baudrate+0x48>
    1e8a:	30 2d       	mov	r19, r0
    1e8c:	15 c0       	rjmp	.+42     	; 0x1eb8 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1e8e:	d9 01       	movw	r26, r18
    1e90:	c8 01       	movw	r24, r16
    1e92:	68 94       	set
    1e94:	13 f8       	bld	r1, 3
    1e96:	b6 95       	lsr	r27
    1e98:	a7 95       	ror	r26
    1e9a:	97 95       	ror	r25
    1e9c:	87 95       	ror	r24
    1e9e:	16 94       	lsr	r1
    1ea0:	d1 f7       	brne	.-12     	; 0x1e96 <usart_set_baudrate+0x60>
		min_rate /= 2;
    1ea2:	b9 01       	movw	r22, r18
    1ea4:	a8 01       	movw	r20, r16
    1ea6:	03 2e       	mov	r0, r19
    1ea8:	37 e1       	ldi	r19, 0x17	; 23
    1eaa:	76 95       	lsr	r23
    1eac:	67 95       	ror	r22
    1eae:	57 95       	ror	r21
    1eb0:	47 95       	ror	r20
    1eb2:	3a 95       	dec	r19
    1eb4:	d1 f7       	brne	.-12     	; 0x1eaa <usart_set_baudrate+0x74>
    1eb6:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1eb8:	88 15       	cp	r24, r8
    1eba:	99 05       	cpc	r25, r9
    1ebc:	aa 05       	cpc	r26, r10
    1ebe:	bb 05       	cpc	r27, r11
    1ec0:	08 f4       	brcc	.+2      	; 0x1ec4 <usart_set_baudrate+0x8e>
    1ec2:	a6 c0       	rjmp	.+332    	; 0x2010 <usart_set_baudrate+0x1da>
    1ec4:	84 16       	cp	r8, r20
    1ec6:	95 06       	cpc	r9, r21
    1ec8:	a6 06       	cpc	r10, r22
    1eca:	b7 06       	cpc	r11, r23
    1ecc:	08 f4       	brcc	.+2      	; 0x1ed0 <usart_set_baudrate+0x9a>
    1ece:	a2 c0       	rjmp	.+324    	; 0x2014 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1ed0:	f7 01       	movw	r30, r14
    1ed2:	84 81       	ldd	r24, Z+4	; 0x04
    1ed4:	82 fd       	sbrc	r24, 2
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <usart_set_baudrate+0xaa>
		baud *= 2;
    1ed8:	88 0c       	add	r8, r8
    1eda:	99 1c       	adc	r9, r9
    1edc:	aa 1c       	adc	r10, r10
    1ede:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1ee0:	c3 01       	movw	r24, r6
    1ee2:	b2 01       	movw	r22, r4
    1ee4:	a5 01       	movw	r20, r10
    1ee6:	94 01       	movw	r18, r8
    1ee8:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1eec:	2f 3f       	cpi	r18, 0xFF	; 255
    1eee:	31 05       	cpc	r19, r1
    1ef0:	41 05       	cpc	r20, r1
    1ef2:	51 05       	cpc	r21, r1
    1ef4:	08 f4       	brcc	.+2      	; 0x1ef8 <usart_set_baudrate+0xc2>
    1ef6:	90 c0       	rjmp	.+288    	; 0x2018 <usart_set_baudrate+0x1e2>
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e0       	ldi	r26, 0x00	; 0
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	c9 ef       	ldi	r28, 0xF9	; 249
    1f02:	05 c0       	rjmp	.+10     	; 0x1f0e <usart_set_baudrate+0xd8>
    1f04:	28 17       	cp	r18, r24
    1f06:	39 07       	cpc	r19, r25
    1f08:	4a 07       	cpc	r20, r26
    1f0a:	5b 07       	cpc	r21, r27
    1f0c:	58 f0       	brcs	.+22     	; 0x1f24 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	aa 1f       	adc	r26, r26
    1f14:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1f16:	cd 3f       	cpi	r28, 0xFD	; 253
    1f18:	0c f4       	brge	.+2      	; 0x1f1c <usart_set_baudrate+0xe6>
			limit |= 1;
    1f1a:	81 60       	ori	r24, 0x01	; 1
    1f1c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1f1e:	c7 30       	cpi	r28, 0x07	; 7
    1f20:	89 f7       	brne	.-30     	; 0x1f04 <usart_set_baudrate+0xce>
    1f22:	4f c0       	rjmp	.+158    	; 0x1fc2 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1f24:	cc 23       	and	r28, r28
    1f26:	0c f0       	brlt	.+2      	; 0x1f2a <usart_set_baudrate+0xf4>
    1f28:	4c c0       	rjmp	.+152    	; 0x1fc2 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1f2a:	d5 01       	movw	r26, r10
    1f2c:	c4 01       	movw	r24, r8
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	aa 1f       	adc	r26, r26
    1f34:	bb 1f       	adc	r27, r27
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	aa 1f       	adc	r26, r26
    1f3c:	bb 1f       	adc	r27, r27
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	aa 1f       	adc	r26, r26
    1f44:	bb 1f       	adc	r27, r27
    1f46:	48 1a       	sub	r4, r24
    1f48:	59 0a       	sbc	r5, r25
    1f4a:	6a 0a       	sbc	r6, r26
    1f4c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1f4e:	ce 3f       	cpi	r28, 0xFE	; 254
    1f50:	f4 f4       	brge	.+60     	; 0x1f8e <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1f52:	8d ef       	ldi	r24, 0xFD	; 253
    1f54:	9f ef       	ldi	r25, 0xFF	; 255
    1f56:	8c 1b       	sub	r24, r28
    1f58:	91 09       	sbc	r25, r1
    1f5a:	c7 fd       	sbrc	r28, 7
    1f5c:	93 95       	inc	r25
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <usart_set_baudrate+0x132>
    1f60:	44 0c       	add	r4, r4
    1f62:	55 1c       	adc	r5, r5
    1f64:	66 1c       	adc	r6, r6
    1f66:	77 1c       	adc	r7, r7
    1f68:	8a 95       	dec	r24
    1f6a:	d2 f7       	brpl	.-12     	; 0x1f60 <usart_set_baudrate+0x12a>
    1f6c:	d5 01       	movw	r26, r10
    1f6e:	c4 01       	movw	r24, r8
    1f70:	b6 95       	lsr	r27
    1f72:	a7 95       	ror	r26
    1f74:	97 95       	ror	r25
    1f76:	87 95       	ror	r24
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	64 0d       	add	r22, r4
    1f7e:	75 1d       	adc	r23, r5
    1f80:	86 1d       	adc	r24, r6
    1f82:	97 1d       	adc	r25, r7
    1f84:	a5 01       	movw	r20, r10
    1f86:	94 01       	movw	r18, r8
    1f88:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <__udivmodsi4>
    1f8c:	37 c0       	rjmp	.+110    	; 0x1ffc <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1f8e:	83 e0       	ldi	r24, 0x03	; 3
    1f90:	8c 0f       	add	r24, r28
    1f92:	a5 01       	movw	r20, r10
    1f94:	94 01       	movw	r18, r8
    1f96:	04 c0       	rjmp	.+8      	; 0x1fa0 <usart_set_baudrate+0x16a>
    1f98:	22 0f       	add	r18, r18
    1f9a:	33 1f       	adc	r19, r19
    1f9c:	44 1f       	adc	r20, r20
    1f9e:	55 1f       	adc	r21, r21
    1fa0:	8a 95       	dec	r24
    1fa2:	d2 f7       	brpl	.-12     	; 0x1f98 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1fa4:	da 01       	movw	r26, r20
    1fa6:	c9 01       	movw	r24, r18
    1fa8:	b6 95       	lsr	r27
    1faa:	a7 95       	ror	r26
    1fac:	97 95       	ror	r25
    1fae:	87 95       	ror	r24
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	64 0d       	add	r22, r4
    1fb6:	75 1d       	adc	r23, r5
    1fb8:	86 1d       	adc	r24, r6
    1fba:	97 1d       	adc	r25, r7
    1fbc:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <__udivmodsi4>
    1fc0:	1d c0       	rjmp	.+58     	; 0x1ffc <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	8c 0f       	add	r24, r28
    1fc6:	a5 01       	movw	r20, r10
    1fc8:	94 01       	movw	r18, r8
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <usart_set_baudrate+0x19e>
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	44 1f       	adc	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	8a 95       	dec	r24
    1fd6:	d2 f7       	brpl	.-12     	; 0x1fcc <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1fd8:	da 01       	movw	r26, r20
    1fda:	c9 01       	movw	r24, r18
    1fdc:	b6 95       	lsr	r27
    1fde:	a7 95       	ror	r26
    1fe0:	97 95       	ror	r25
    1fe2:	87 95       	ror	r24
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	64 0d       	add	r22, r4
    1fea:	75 1d       	adc	r23, r5
    1fec:	86 1d       	adc	r24, r6
    1fee:	97 1d       	adc	r25, r7
    1ff0:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <__udivmodsi4>
    1ff4:	21 50       	subi	r18, 0x01	; 1
    1ff6:	31 09       	sbc	r19, r1
    1ff8:	41 09       	sbc	r20, r1
    1ffa:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1ffc:	83 2f       	mov	r24, r19
    1ffe:	8f 70       	andi	r24, 0x0F	; 15
    2000:	c2 95       	swap	r28
    2002:	c0 7f       	andi	r28, 0xF0	; 240
    2004:	c8 2b       	or	r28, r24
    2006:	f7 01       	movw	r30, r14
    2008:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    200a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	18 c0       	rjmp	.+48     	; 0x2040 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	16 c0       	rjmp	.+44     	; 0x2040 <usart_set_baudrate+0x20a>
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2018:	d5 01       	movw	r26, r10
    201a:	c4 01       	movw	r24, r8
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	aa 1f       	adc	r26, r26
    2022:	bb 1f       	adc	r27, r27
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	aa 1f       	adc	r26, r26
    202a:	bb 1f       	adc	r27, r27
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	aa 1f       	adc	r26, r26
    2032:	bb 1f       	adc	r27, r27
    2034:	48 1a       	sub	r4, r24
    2036:	59 0a       	sbc	r5, r25
    2038:	6a 0a       	sbc	r6, r26
    203a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    203c:	c9 ef       	ldi	r28, 0xF9	; 249
    203e:	89 cf       	rjmp	.-238    	; 0x1f52 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	bf 90       	pop	r11
    204c:	af 90       	pop	r10
    204e:	9f 90       	pop	r9
    2050:	8f 90       	pop	r8
    2052:	7f 90       	pop	r7
    2054:	6f 90       	pop	r6
    2056:	5f 90       	pop	r5
    2058:	4f 90       	pop	r4
    205a:	08 95       	ret

0000205c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	ec 01       	movw	r28, r24
    2066:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	09 f4       	brne	.+2      	; 0x206e <usart_init_rs232+0x12>
    206c:	36 c1       	rjmp	.+620    	; 0x22da <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    206e:	80 3c       	cpi	r24, 0xC0	; 192
    2070:	91 05       	cpc	r25, r1
    2072:	21 f4       	brne	.+8      	; 0x207c <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2074:	60 e1       	ldi	r22, 0x10	; 16
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	c5 d3       	rcall	.+1930   	; 0x2804 <sysclk_enable_module>
    207a:	2f c1       	rjmp	.+606    	; 0x22da <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    207c:	c0 34       	cpi	r28, 0x40	; 64
    207e:	84 e0       	ldi	r24, 0x04	; 4
    2080:	d8 07       	cpc	r29, r24
    2082:	21 f4       	brne	.+8      	; 0x208c <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2084:	68 e0       	ldi	r22, 0x08	; 8
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	bd d3       	rcall	.+1914   	; 0x2804 <sysclk_enable_module>
    208a:	27 c1       	rjmp	.+590    	; 0x22da <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    208c:	c1 15       	cp	r28, r1
    208e:	e4 e0       	ldi	r30, 0x04	; 4
    2090:	de 07       	cpc	r29, r30
    2092:	21 f4       	brne	.+8      	; 0x209c <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2094:	64 e0       	ldi	r22, 0x04	; 4
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	b5 d3       	rcall	.+1898   	; 0x2804 <sysclk_enable_module>
    209a:	1f c1       	rjmp	.+574    	; 0x22da <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    209c:	c0 38       	cpi	r28, 0x80	; 128
    209e:	f1 e0       	ldi	r31, 0x01	; 1
    20a0:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    20a2:	21 f4       	brne	.+8      	; 0x20ac <usart_init_rs232+0x50>
    20a4:	62 e0       	ldi	r22, 0x02	; 2
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	ad d3       	rcall	.+1882   	; 0x2804 <sysclk_enable_module>
    20aa:	17 c1       	rjmp	.+558    	; 0x22da <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    20ac:	c1 15       	cp	r28, r1
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    20b2:	21 f4       	brne	.+8      	; 0x20bc <usart_init_rs232+0x60>
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	a5 d3       	rcall	.+1866   	; 0x2804 <sysclk_enable_module>
    20ba:	0f c1       	rjmp	.+542    	; 0x22da <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    20bc:	c0 38       	cpi	r28, 0x80	; 128
    20be:	e3 e0       	ldi	r30, 0x03	; 3
    20c0:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    20c2:	21 f4       	brne	.+8      	; 0x20cc <usart_init_rs232+0x70>
    20c4:	61 e0       	ldi	r22, 0x01	; 1
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	9d d3       	rcall	.+1850   	; 0x2804 <sysclk_enable_module>
    20ca:	07 c1       	rjmp	.+526    	; 0x22da <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    20cc:	c0 39       	cpi	r28, 0x90	; 144
    20ce:	f3 e0       	ldi	r31, 0x03	; 3
    20d0:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    20d2:	21 f4       	brne	.+8      	; 0x20dc <usart_init_rs232+0x80>
    20d4:	61 e0       	ldi	r22, 0x01	; 1
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	95 d3       	rcall	.+1834   	; 0x2804 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    20da:	ff c0       	rjmp	.+510    	; 0x22da <usart_init_rs232+0x27e>
    20dc:	c1 15       	cp	r28, r1
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    20e2:	21 f4       	brne	.+8      	; 0x20ec <usart_init_rs232+0x90>
    20e4:	62 e0       	ldi	r22, 0x02	; 2
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	8d d3       	rcall	.+1818   	; 0x2804 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    20ea:	f7 c0       	rjmp	.+494    	; 0x22da <usart_init_rs232+0x27e>
    20ec:	c0 34       	cpi	r28, 0x40	; 64
    20ee:	e2 e0       	ldi	r30, 0x02	; 2
    20f0:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    20f2:	21 f4       	brne	.+8      	; 0x20fc <usart_init_rs232+0xa0>
    20f4:	62 e0       	ldi	r22, 0x02	; 2
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	85 d3       	rcall	.+1802   	; 0x2804 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    20fa:	ef c0       	rjmp	.+478    	; 0x22da <usart_init_rs232+0x27e>
    20fc:	c1 15       	cp	r28, r1
    20fe:	f3 e0       	ldi	r31, 0x03	; 3
    2100:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2102:	21 f4       	brne	.+8      	; 0x210c <usart_init_rs232+0xb0>
    2104:	64 e0       	ldi	r22, 0x04	; 4
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	7d d3       	rcall	.+1786   	; 0x2804 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    210a:	e7 c0       	rjmp	.+462    	; 0x22da <usart_init_rs232+0x27e>
    210c:	c0 32       	cpi	r28, 0x20	; 32
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2112:	21 f4       	brne	.+8      	; 0x211c <usart_init_rs232+0xc0>
    2114:	64 e0       	ldi	r22, 0x04	; 4
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	75 d3       	rcall	.+1770   	; 0x2804 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    211a:	df c0       	rjmp	.+446    	; 0x22da <usart_init_rs232+0x27e>
    211c:	c1 15       	cp	r28, r1
    211e:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2120:	de 07       	cpc	r29, r30
    2122:	21 f4       	brne	.+8      	; 0x212c <usart_init_rs232+0xd0>
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	6d d3       	rcall	.+1754   	; 0x2804 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    212a:	d7 c0       	rjmp	.+430    	; 0x22da <usart_init_rs232+0x27e>
    212c:	c1 15       	cp	r28, r1
    212e:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2130:	df 07       	cpc	r29, r31
    2132:	21 f4       	brne	.+8      	; 0x213c <usart_init_rs232+0xe0>
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	84 e0       	ldi	r24, 0x04	; 4
    2138:	65 d3       	rcall	.+1738   	; 0x2804 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    213a:	cf c0       	rjmp	.+414    	; 0x22da <usart_init_rs232+0x27e>
    213c:	c1 15       	cp	r28, r1
    213e:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2140:	d8 07       	cpc	r29, r24
    2142:	21 f4       	brne	.+8      	; 0x214c <usart_init_rs232+0xf0>
    2144:	61 e0       	ldi	r22, 0x01	; 1
    2146:	85 e0       	ldi	r24, 0x05	; 5
    2148:	5d d3       	rcall	.+1722   	; 0x2804 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    214a:	c7 c0       	rjmp	.+398    	; 0x22da <usart_init_rs232+0x27e>
    214c:	c1 15       	cp	r28, r1
    214e:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2150:	de 07       	cpc	r29, r30
    2152:	21 f4       	brne	.+8      	; 0x215c <usart_init_rs232+0x100>
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2158:	55 d3       	rcall	.+1706   	; 0x2804 <sysclk_enable_module>
    215a:	bf c0       	rjmp	.+382    	; 0x22da <usart_init_rs232+0x27e>
    215c:	c0 34       	cpi	r28, 0x40	; 64
    215e:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2160:	df 07       	cpc	r29, r31
    2162:	21 f4       	brne	.+8      	; 0x216c <usart_init_rs232+0x110>
    2164:	62 e0       	ldi	r22, 0x02	; 2
    2166:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2168:	4d d3       	rcall	.+1690   	; 0x2804 <sysclk_enable_module>
    216a:	b7 c0       	rjmp	.+366    	; 0x22da <usart_init_rs232+0x27e>
    216c:	c0 34       	cpi	r28, 0x40	; 64
    216e:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2170:	d8 07       	cpc	r29, r24
    2172:	21 f4       	brne	.+8      	; 0x217c <usart_init_rs232+0x120>
    2174:	62 e0       	ldi	r22, 0x02	; 2
    2176:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2178:	45 d3       	rcall	.+1674   	; 0x2804 <sysclk_enable_module>
    217a:	af c0       	rjmp	.+350    	; 0x22da <usart_init_rs232+0x27e>
    217c:	c0 34       	cpi	r28, 0x40	; 64
    217e:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2180:	de 07       	cpc	r29, r30
    2182:	21 f4       	brne	.+8      	; 0x218c <usart_init_rs232+0x130>
    2184:	62 e0       	ldi	r22, 0x02	; 2
    2186:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    2188:	3d d3       	rcall	.+1658   	; 0x2804 <sysclk_enable_module>
    218a:	a7 c0       	rjmp	.+334    	; 0x22da <usart_init_rs232+0x27e>
    218c:	c0 34       	cpi	r28, 0x40	; 64
    218e:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2190:	df 07       	cpc	r29, r31
    2192:	21 f4       	brne	.+8      	; 0x219c <usart_init_rs232+0x140>
    2194:	62 e0       	ldi	r22, 0x02	; 2
    2196:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2198:	35 d3       	rcall	.+1642   	; 0x2804 <sysclk_enable_module>
    219a:	9f c0       	rjmp	.+318    	; 0x22da <usart_init_rs232+0x27e>
    219c:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    219e:	88 e0       	ldi	r24, 0x08	; 8
    21a0:	d8 07       	cpc	r29, r24
    21a2:	21 f4       	brne	.+8      	; 0x21ac <usart_init_rs232+0x150>
    21a4:	64 e0       	ldi	r22, 0x04	; 4
    21a6:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    21a8:	2d d3       	rcall	.+1626   	; 0x2804 <sysclk_enable_module>
    21aa:	97 c0       	rjmp	.+302    	; 0x22da <usart_init_rs232+0x27e>
    21ac:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    21ae:	e9 e0       	ldi	r30, 0x09	; 9
    21b0:	de 07       	cpc	r29, r30
    21b2:	21 f4       	brne	.+8      	; 0x21bc <usart_init_rs232+0x160>
    21b4:	64 e0       	ldi	r22, 0x04	; 4
    21b6:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    21b8:	25 d3       	rcall	.+1610   	; 0x2804 <sysclk_enable_module>
    21ba:	8f c0       	rjmp	.+286    	; 0x22da <usart_init_rs232+0x27e>
    21bc:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    21be:	fa e0       	ldi	r31, 0x0A	; 10
    21c0:	df 07       	cpc	r29, r31
    21c2:	21 f4       	brne	.+8      	; 0x21cc <usart_init_rs232+0x170>
    21c4:	64 e0       	ldi	r22, 0x04	; 4
    21c6:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    21c8:	1d d3       	rcall	.+1594   	; 0x2804 <sysclk_enable_module>
    21ca:	87 c0       	rjmp	.+270    	; 0x22da <usart_init_rs232+0x27e>
    21cc:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    21ce:	8b e0       	ldi	r24, 0x0B	; 11
    21d0:	d8 07       	cpc	r29, r24
    21d2:	21 f4       	brne	.+8      	; 0x21dc <usart_init_rs232+0x180>
    21d4:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    21d6:	86 e0       	ldi	r24, 0x06	; 6
    21d8:	15 d3       	rcall	.+1578   	; 0x2804 <sysclk_enable_module>
    21da:	7f c0       	rjmp	.+254    	; 0x22da <usart_init_rs232+0x27e>
    21dc:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    21de:	e8 e0       	ldi	r30, 0x08	; 8
    21e0:	de 07       	cpc	r29, r30
    21e2:	21 f4       	brne	.+8      	; 0x21ec <usart_init_rs232+0x190>
    21e4:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	0d d3       	rcall	.+1562   	; 0x2804 <sysclk_enable_module>
    21ea:	77 c0       	rjmp	.+238    	; 0x22da <usart_init_rs232+0x27e>
    21ec:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    21ee:	f9 e0       	ldi	r31, 0x09	; 9
    21f0:	df 07       	cpc	r29, r31
    21f2:	21 f4       	brne	.+8      	; 0x21fc <usart_init_rs232+0x1a0>
    21f4:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    21f6:	84 e0       	ldi	r24, 0x04	; 4
    21f8:	05 d3       	rcall	.+1546   	; 0x2804 <sysclk_enable_module>
    21fa:	6f c0       	rjmp	.+222    	; 0x22da <usart_init_rs232+0x27e>
    21fc:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    21fe:	8a e0       	ldi	r24, 0x0A	; 10
    2200:	d8 07       	cpc	r29, r24
    2202:	21 f4       	brne	.+8      	; 0x220c <usart_init_rs232+0x1b0>
    2204:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2206:	85 e0       	ldi	r24, 0x05	; 5
    2208:	fd d2       	rcall	.+1530   	; 0x2804 <sysclk_enable_module>
    220a:	67 c0       	rjmp	.+206    	; 0x22da <usart_init_rs232+0x27e>
    220c:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    220e:	eb e0       	ldi	r30, 0x0B	; 11
    2210:	de 07       	cpc	r29, r30
    2212:	21 f4       	brne	.+8      	; 0x221c <usart_init_rs232+0x1c0>
    2214:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2216:	86 e0       	ldi	r24, 0x06	; 6
    2218:	f5 d2       	rcall	.+1514   	; 0x2804 <sysclk_enable_module>
    221a:	5f c0       	rjmp	.+190    	; 0x22da <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    221c:	c0 3a       	cpi	r28, 0xA0	; 160
    221e:	f8 e0       	ldi	r31, 0x08	; 8
    2220:	df 07       	cpc	r29, r31
    2222:	21 f4       	brne	.+8      	; 0x222c <usart_init_rs232+0x1d0>
    2224:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	ed d2       	rcall	.+1498   	; 0x2804 <sysclk_enable_module>
    222a:	57 c0       	rjmp	.+174    	; 0x22da <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    222c:	c0 3a       	cpi	r28, 0xA0	; 160
    222e:	89 e0       	ldi	r24, 0x09	; 9
    2230:	d8 07       	cpc	r29, r24
    2232:	21 f4       	brne	.+8      	; 0x223c <usart_init_rs232+0x1e0>
    2234:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2236:	84 e0       	ldi	r24, 0x04	; 4
    2238:	e5 d2       	rcall	.+1482   	; 0x2804 <sysclk_enable_module>
    223a:	4f c0       	rjmp	.+158    	; 0x22da <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    223c:	c0 3a       	cpi	r28, 0xA0	; 160
    223e:	ea e0       	ldi	r30, 0x0A	; 10
    2240:	de 07       	cpc	r29, r30
    2242:	21 f4       	brne	.+8      	; 0x224c <usart_init_rs232+0x1f0>
    2244:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2246:	85 e0       	ldi	r24, 0x05	; 5
    2248:	dd d2       	rcall	.+1466   	; 0x2804 <sysclk_enable_module>
    224a:	47 c0       	rjmp	.+142    	; 0x22da <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    224c:	c0 3a       	cpi	r28, 0xA0	; 160
    224e:	fb e0       	ldi	r31, 0x0B	; 11
    2250:	df 07       	cpc	r29, r31
    2252:	21 f4       	brne	.+8      	; 0x225c <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2254:	60 e1       	ldi	r22, 0x10	; 16
    2256:	86 e0       	ldi	r24, 0x06	; 6
    2258:	d5 d2       	rcall	.+1450   	; 0x2804 <sysclk_enable_module>
    225a:	3f c0       	rjmp	.+126    	; 0x22da <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    225c:	c0 3b       	cpi	r28, 0xB0	; 176
    225e:	88 e0       	ldi	r24, 0x08	; 8
    2260:	d8 07       	cpc	r29, r24
    2262:	21 f4       	brne	.+8      	; 0x226c <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2264:	60 e2       	ldi	r22, 0x20	; 32
    2266:	83 e0       	ldi	r24, 0x03	; 3
    2268:	cd d2       	rcall	.+1434   	; 0x2804 <sysclk_enable_module>
    226a:	37 c0       	rjmp	.+110    	; 0x22da <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    226c:	c0 3b       	cpi	r28, 0xB0	; 176
    226e:	e9 e0       	ldi	r30, 0x09	; 9
    2270:	de 07       	cpc	r29, r30
    2272:	21 f4       	brne	.+8      	; 0x227c <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2274:	60 e2       	ldi	r22, 0x20	; 32
    2276:	84 e0       	ldi	r24, 0x04	; 4
    2278:	c5 d2       	rcall	.+1418   	; 0x2804 <sysclk_enable_module>
    227a:	2f c0       	rjmp	.+94     	; 0x22da <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    227c:	c0 3b       	cpi	r28, 0xB0	; 176
    227e:	fa e0       	ldi	r31, 0x0A	; 10
    2280:	df 07       	cpc	r29, r31
    2282:	21 f4       	brne	.+8      	; 0x228c <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2284:	60 e2       	ldi	r22, 0x20	; 32
    2286:	85 e0       	ldi	r24, 0x05	; 5
    2288:	bd d2       	rcall	.+1402   	; 0x2804 <sysclk_enable_module>
    228a:	27 c0       	rjmp	.+78     	; 0x22da <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    228c:	c0 3b       	cpi	r28, 0xB0	; 176
    228e:	8b e0       	ldi	r24, 0x0B	; 11
    2290:	d8 07       	cpc	r29, r24
    2292:	21 f4       	brne	.+8      	; 0x229c <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2294:	60 e2       	ldi	r22, 0x20	; 32
    2296:	86 e0       	ldi	r24, 0x06	; 6
    2298:	b5 d2       	rcall	.+1386   	; 0x2804 <sysclk_enable_module>
    229a:	1f c0       	rjmp	.+62     	; 0x22da <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    229c:	c0 38       	cpi	r28, 0x80	; 128
    229e:	e4 e0       	ldi	r30, 0x04	; 4
    22a0:	de 07       	cpc	r29, r30
    22a2:	21 f4       	brne	.+8      	; 0x22ac <usart_init_rs232+0x250>
    22a4:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    22a6:	83 e0       	ldi	r24, 0x03	; 3
    22a8:	ad d2       	rcall	.+1370   	; 0x2804 <sysclk_enable_module>
    22aa:	17 c0       	rjmp	.+46     	; 0x22da <usart_init_rs232+0x27e>
    22ac:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    22ae:	f4 e0       	ldi	r31, 0x04	; 4
    22b0:	df 07       	cpc	r29, r31
    22b2:	21 f4       	brne	.+8      	; 0x22bc <usart_init_rs232+0x260>
    22b4:	60 e4       	ldi	r22, 0x40	; 64
    22b6:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    22b8:	a5 d2       	rcall	.+1354   	; 0x2804 <sysclk_enable_module>
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <usart_init_rs232+0x27e>
    22bc:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    22be:	84 e0       	ldi	r24, 0x04	; 4
    22c0:	d8 07       	cpc	r29, r24
    22c2:	21 f4       	brne	.+8      	; 0x22cc <usart_init_rs232+0x270>
    22c4:	60 e4       	ldi	r22, 0x40	; 64
    22c6:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    22c8:	9d d2       	rcall	.+1338   	; 0x2804 <sysclk_enable_module>
    22ca:	07 c0       	rjmp	.+14     	; 0x22da <usart_init_rs232+0x27e>
    22cc:	c0 3b       	cpi	r28, 0xB0	; 176
    22ce:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    22d0:	de 07       	cpc	r29, r30
    22d2:	19 f4       	brne	.+6      	; 0x22da <usart_init_rs232+0x27e>
    22d4:	60 e4       	ldi	r22, 0x40	; 64
    22d6:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    22d8:	95 d2       	rcall	.+1322   	; 0x2804 <sysclk_enable_module>
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	f8 01       	movw	r30, r16
    22e2:	95 81       	ldd	r25, Z+5	; 0x05
    22e4:	84 81       	ldd	r24, Z+4	; 0x04
    22e6:	89 2b       	or	r24, r25
    22e8:	96 81       	ldd	r25, Z+6	; 0x06
    22ea:	91 11       	cpse	r25, r1
    22ec:	98 e0       	ldi	r25, 0x08	; 8
    22ee:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	f8 01       	movw	r30, r16
    22f4:	40 81       	ld	r20, Z
    22f6:	51 81       	ldd	r21, Z+1	; 0x01
    22f8:	62 81       	ldd	r22, Z+2	; 0x02
    22fa:	73 81       	ldd	r23, Z+3	; 0x03
    22fc:	00 e0       	ldi	r16, 0x00	; 0
    22fe:	18 e4       	ldi	r17, 0x48	; 72
    2300:	28 ee       	ldi	r18, 0xE8	; 232
    2302:	31 e0       	ldi	r19, 0x01	; 1
    2304:	ce 01       	movw	r24, r28
    2306:	97 dd       	rcall	.-1234   	; 0x1e36 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	98 60       	ori	r25, 0x08	; 8
    230c:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	90 61       	ori	r25, 0x10	; 16
    2312:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	08 95       	ret

0000231e <imu_heading>:
	return bno055_euler.p;
}

double imu_heading()
{
	return bno055_euler.h;
    231e:	60 91 8d 21 	lds	r22, 0x218D	; 0x80218d <bno055_euler>
    2322:	70 91 8e 21 	lds	r23, 0x218E	; 0x80218e <bno055_euler+0x1>
    2326:	80 91 8f 21 	lds	r24, 0x218F	; 0x80218f <bno055_euler+0x2>
    232a:	90 91 90 21 	lds	r25, 0x2190	; 0x802190 <bno055_euler+0x3>
}
    232e:	08 95       	ret

00002330 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2330:	04 c0       	rjmp	.+8      	; 0x233a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2332:	61 50       	subi	r22, 0x01	; 1
    2334:	71 09       	sbc	r23, r1
    2336:	81 09       	sbc	r24, r1
    2338:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    233a:	61 15       	cp	r22, r1
    233c:	71 05       	cpc	r23, r1
    233e:	81 05       	cpc	r24, r1
    2340:	91 05       	cpc	r25, r1
    2342:	b9 f7       	brne	.-18     	; 0x2332 <__portable_avr_delay_cycles+0x2>
    2344:	08 95       	ret

00002346 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
    2346:	e0 e4       	ldi	r30, 0x40	; 64
    2348:	f6 e0       	ldi	r31, 0x06	; 6
    234a:	94 81       	ldd	r25, Z+4	; 0x04
    234c:	80 e1       	ldi	r24, 0x10	; 16
    234e:	89 27       	eor	r24, r25
    2350:	84 83       	std	Z+4, r24	; 0x04
    2352:	08 95       	ret

00002354 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    2354:	e0 e4       	ldi	r30, 0x40	; 64
    2356:	f6 e0       	ldi	r31, 0x06	; 6
    2358:	84 81       	ldd	r24, Z+4	; 0x04
    235a:	80 61       	ori	r24, 0x10	; 16
    235c:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
    235e:	f3 df       	rcall	.-26     	; 0x2346 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
    2360:	8e e1       	ldi	r24, 0x1E	; 30
    2362:	b9 d0       	rcall	.+370    	; 0x24d6 <spi_write>
	delay_ms(3);
    2364:	60 e8       	ldi	r22, 0x80	; 128
    2366:	7e e3       	ldi	r23, 0x3E	; 62
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    236c:	e1 df       	rcall	.-62     	; 0x2330 <__portable_avr_delay_cycles>
    236e:	eb df       	rcall	.-42     	; 0x2346 <flip_ms5607>
	delay_ms(2);
    2370:	6b ea       	ldi	r22, 0xAB	; 171
    2372:	79 e2       	ldi	r23, 0x29	; 41
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	db cf       	rjmp	.-74     	; 0x2330 <__portable_avr_delay_cycles>
    237a:	08 95       	ret

0000237c <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
    2382:	e1 df       	rcall	.-62     	; 0x2346 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
    2384:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
    2386:	a7 d0       	rcall	.+334    	; 0x24d6 <spi_write>
    2388:	97 d0       	rcall	.+302    	; 0x24b8 <spi_read>
    238a:	c8 2f       	mov	r28, r24
    238c:	d0 e0       	ldi	r29, 0x00	; 0
    238e:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
    2390:	cc 27       	eor	r28, r28
    2392:	92 d0       	rcall	.+292    	; 0x24b8 <spi_read>
    2394:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
    2396:	d7 df       	rcall	.-82     	; 0x2346 <flip_ms5607>
    2398:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	08 95       	ret

000023a0 <ms5607_convert_d1>:
    23a0:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
    23a2:	df 93       	push	r29
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <ms5607_convert_d1+0x6>
    23a6:	1f 92       	push	r1
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    23ac:	19 82       	std	Y+1, r1	; 0x01
    23ae:	1a 82       	std	Y+2, r1	; 0x02
    23b0:	1b 82       	std	Y+3, r1	; 0x03
    23b2:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
    23b4:	c8 df       	rcall	.-112    	; 0x2346 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
    23b6:	88 e4       	ldi	r24, 0x48	; 72
    23b8:	8e d0       	rcall	.+284    	; 0x24d6 <spi_write>
	delay_ms(10);
    23ba:	66 e5       	ldi	r22, 0x56	; 86
    23bc:	70 ed       	ldi	r23, 0xD0	; 208
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    23c2:	b6 df       	rcall	.-148    	; 0x2330 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    23c4:	c0 df       	rcall	.-128    	; 0x2346 <flip_ms5607>
    23c6:	bf df       	rcall	.-130    	; 0x2346 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	85 d0       	rcall	.+266    	; 0x24d6 <spi_write>
    23cc:	75 d0       	rcall	.+234    	; 0x24b8 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	a0 e0       	ldi	r26, 0x00	; 0
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	dc 01       	movw	r26, r24
    23d6:	99 27       	eor	r25, r25
    23d8:	88 27       	eor	r24, r24
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	ab 83       	std	Y+3, r26	; 0x03
    23e0:	bc 83       	std	Y+4, r27	; 0x04
    23e2:	6a d0       	rcall	.+212    	; 0x24b8 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    23e4:	49 81       	ldd	r20, Y+1	; 0x01
    23e6:	5a 81       	ldd	r21, Y+2	; 0x02
    23e8:	6b 81       	ldd	r22, Y+3	; 0x03
    23ea:	7c 81       	ldd	r23, Y+4	; 0x04
    23ec:	58 2b       	or	r21, r24
    23ee:	49 83       	std	Y+1, r20	; 0x01
    23f0:	5a 83       	std	Y+2, r21	; 0x02
    23f2:	6b 83       	std	Y+3, r22	; 0x03
    23f4:	7c 83       	std	Y+4, r23	; 0x04
    23f6:	60 d0       	rcall	.+192    	; 0x24b8 <spi_read>
	rx_data |= spi_read();
    23f8:	49 81       	ldd	r20, Y+1	; 0x01
    23fa:	5a 81       	ldd	r21, Y+2	; 0x02
    23fc:	6b 81       	ldd	r22, Y+3	; 0x03
    23fe:	7c 81       	ldd	r23, Y+4	; 0x04
    2400:	48 2b       	or	r20, r24
    2402:	49 83       	std	Y+1, r20	; 0x01
    2404:	5a 83       	std	Y+2, r21	; 0x02
    2406:	6b 83       	std	Y+3, r22	; 0x03
    2408:	7c 83       	std	Y+4, r23	; 0x04
    240a:	9d df       	rcall	.-198    	; 0x2346 <flip_ms5607>
	flip_ms5607();
    240c:	69 81       	ldd	r22, Y+1	; 0x01
    240e:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	24 96       	adiw	r28, 0x04	; 4
    2416:	cd bf       	out	0x3d, r28	; 61
}
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	08 95       	ret

00002420 <ms5607_convert_d2>:
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
    2424:	00 d0       	rcall	.+0      	; 0x2426 <ms5607_convert_d2+0x6>
    2426:	1f 92       	push	r1
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    242c:	19 82       	std	Y+1, r1	; 0x01
    242e:	1a 82       	std	Y+2, r1	; 0x02
    2430:	1b 82       	std	Y+3, r1	; 0x03
    2432:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
    2434:	88 df       	rcall	.-240    	; 0x2346 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
    2436:	88 e5       	ldi	r24, 0x58	; 88
    2438:	4e d0       	rcall	.+156    	; 0x24d6 <spi_write>
	delay_ms(10);
    243a:	66 e5       	ldi	r22, 0x56	; 86
    243c:	70 ed       	ldi	r23, 0xD0	; 208
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    2442:	76 df       	rcall	.-276    	; 0x2330 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    2444:	80 df       	rcall	.-256    	; 0x2346 <flip_ms5607>
    2446:	7f df       	rcall	.-258    	; 0x2346 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	45 d0       	rcall	.+138    	; 0x24d6 <spi_write>
    244c:	35 d0       	rcall	.+106    	; 0x24b8 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e0       	ldi	r26, 0x00	; 0
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	dc 01       	movw	r26, r24
    2456:	99 27       	eor	r25, r25
    2458:	88 27       	eor	r24, r24
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	9a 83       	std	Y+2, r25	; 0x02
    245e:	ab 83       	std	Y+3, r26	; 0x03
    2460:	bc 83       	std	Y+4, r27	; 0x04
    2462:	2a d0       	rcall	.+84     	; 0x24b8 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    2464:	49 81       	ldd	r20, Y+1	; 0x01
    2466:	5a 81       	ldd	r21, Y+2	; 0x02
    2468:	6b 81       	ldd	r22, Y+3	; 0x03
    246a:	7c 81       	ldd	r23, Y+4	; 0x04
    246c:	58 2b       	or	r21, r24
    246e:	49 83       	std	Y+1, r20	; 0x01
    2470:	5a 83       	std	Y+2, r21	; 0x02
    2472:	6b 83       	std	Y+3, r22	; 0x03
    2474:	7c 83       	std	Y+4, r23	; 0x04
    2476:	20 d0       	rcall	.+64     	; 0x24b8 <spi_read>
	rx_data |= spi_read();
    2478:	49 81       	ldd	r20, Y+1	; 0x01
    247a:	5a 81       	ldd	r21, Y+2	; 0x02
    247c:	6b 81       	ldd	r22, Y+3	; 0x03
    247e:	7c 81       	ldd	r23, Y+4	; 0x04
    2480:	48 2b       	or	r20, r24
    2482:	49 83       	std	Y+1, r20	; 0x01
    2484:	5a 83       	std	Y+2, r21	; 0x02
    2486:	6b 83       	std	Y+3, r22	; 0x03
    2488:	7c 83       	std	Y+4, r23	; 0x04
    248a:	5d df       	rcall	.-326    	; 0x2346 <flip_ms5607>
	flip_ms5607();
    248c:	69 81       	ldd	r22, Y+1	; 0x01
    248e:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	24 96       	adiw	r28, 0x04	; 4
    2496:	cd bf       	out	0x3d, r28	; 61
}
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	08 95       	ret

000024a0 <spi_init>:
    24a0:	e0 e4       	ldi	r30, 0x40	; 64
    24a2:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
    24a4:	80 81       	ld	r24, Z
    24a6:	80 6b       	ori	r24, 0xB0	; 176
    24a8:	80 83       	st	Z, r24
    24aa:	68 e0       	ldi	r22, 0x08	; 8
    24ac:	83 e0       	ldi	r24, 0x03	; 3
    24ae:	aa d1       	rcall	.+852    	; 0x2804 <sysclk_enable_module>
    24b0:	8c e5       	ldi	r24, 0x5C	; 92
    24b2:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    24b6:	08 95       	ret

000024b8 <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
    24b8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    24ba:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
    24bc:	8f ef       	ldi	r24, 0xFF	; 255
    24be:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    24c2:	e0 ec       	ldi	r30, 0xC0	; 192
    24c4:	f8 e0       	ldi	r31, 0x08	; 8
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	88 23       	and	r24, r24
    24ca:	ec f7       	brge	.-6      	; 0x24c6 <spi_read+0xe>
	sei();
    24cc:	78 94       	sei
	SREG=oldInterruptState;
    24ce:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
    24d0:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    24d4:	08 95       	ret

000024d6 <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
    24d6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    24d8:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
    24da:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
    24de:	e0 ec       	ldi	r30, 0xC0	; 192
    24e0:	f8 e0       	ldi	r31, 0x08	; 8
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	88 23       	and	r24, r24
    24e6:	ec f7       	brge	.-6      	; 0x24e2 <spi_write+0xc>
	sei();
    24e8:	78 94       	sei
	SREG=oldInterruptState;
    24ea:	9f bf       	out	0x3f, r25	; 63
    24ec:	08 95       	ret

000024ee <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    24f4:	9a dc       	rcall	.-1740   	; 0x1e2a <usart_getchar>
    24f6:	88 83       	st	Y, r24
}
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	08 95       	ret

000024fe <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    24fe:	8d cc       	rjmp	.-1766   	; 0x1e1a <usart_putchar>
}
    2500:	08 95       	ret

00002502 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	27 97       	sbiw	r28, 0x07	; 7
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2510:	60 e1       	ldi	r22, 0x10	; 16
    2512:	83 e0       	ldi	r24, 0x03	; 3
    2514:	77 d1       	rcall	.+750    	; 0x2804 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    2516:	e0 e4       	ldi	r30, 0x40	; 64
    2518:	f6 e0       	ldi	r31, 0x06	; 6
    251a:	80 81       	ld	r24, Z
    251c:	88 60       	ori	r24, 0x08	; 8
    251e:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2520:	80 ea       	ldi	r24, 0xA0	; 160
    2522:	98 e0       	ldi	r25, 0x08	; 8
    2524:	80 93 6c 21 	sts	0x216C, r24	; 0x80216c <stdio_base>
    2528:	90 93 6d 21 	sts	0x216D, r25	; 0x80216d <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    252c:	8f e7       	ldi	r24, 0x7F	; 127
    252e:	92 e1       	ldi	r25, 0x12	; 18
    2530:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <ptr_put>
    2534:	90 93 6b 21 	sts	0x216B, r25	; 0x80216b <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2538:	87 e7       	ldi	r24, 0x77	; 119
    253a:	92 e1       	ldi	r25, 0x12	; 18
    253c:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <ptr_get>
    2540:	90 93 69 21 	sts	0x2169, r25	; 0x802169 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    2544:	e6 e0       	ldi	r30, 0x06	; 6
    2546:	f0 e2       	ldi	r31, 0x20	; 32
    2548:	84 81       	ldd	r24, Z+4	; 0x04
    254a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    254c:	85 81       	ldd	r24, Z+5	; 0x05
    254e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2550:	86 81       	ldd	r24, Z+6	; 0x06
    2552:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	a2 81       	ldd	r26, Z+2	; 0x02
    255a:	b3 81       	ldd	r27, Z+3	; 0x03
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	ab 83       	std	Y+3, r26	; 0x03
    2562:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    2564:	60 e1       	ldi	r22, 0x10	; 16
    2566:	83 e0       	ldi	r24, 0x03	; 3
    2568:	4d d1       	rcall	.+666    	; 0x2804 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    256a:	be 01       	movw	r22, r28
    256c:	6f 5f       	subi	r22, 0xFF	; 255
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
    2570:	80 ea       	ldi	r24, 0xA0	; 160
    2572:	98 e0       	ldi	r25, 0x08	; 8
    2574:	73 dd       	rcall	.-1306   	; 0x205c <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    2576:	6f e7       	ldi	r22, 0x7F	; 127
    2578:	71 e0       	ldi	r23, 0x01	; 1
    257a:	88 e9       	ldi	r24, 0x98	; 152
    257c:	91 e0       	ldi	r25, 0x01	; 1
    257e:	0e 94 81 2a 	call	0x5502	; 0x5502 <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
    2582:	27 96       	adiw	r28, 0x07	; 7
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	08 95       	ret

0000258e <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	fc 01       	movw	r30, r24
    2594:	41 15       	cp	r20, r1
    2596:	51 05       	cpc	r21, r1
    2598:	b1 f1       	breq	.+108    	; 0x2606 <rb16_write+0x78>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	db 01       	movw	r26, r22
    25a6:	a8 0f       	add	r26, r24
    25a8:	b9 1f       	adc	r27, r25
    25aa:	8d 91       	ld	r24, X+
    25ac:	9c 91       	ld	r25, X
    25ae:	a2 81       	ldd	r26, Z+2	; 0x02
    25b0:	b3 81       	ldd	r27, Z+3	; 0x03
    25b2:	aa 0f       	add	r26, r26
    25b4:	bb 1f       	adc	r27, r27
    25b6:	c6 81       	ldd	r28, Z+6	; 0x06
    25b8:	d7 81       	ldd	r29, Z+7	; 0x07
    25ba:	ac 0f       	add	r26, r28
    25bc:	bd 1f       	adc	r27, r29
    25be:	8d 93       	st	X+, r24
    25c0:	9c 93       	st	X, r25
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	01 96       	adiw	r24, 0x01	; 1
    25c8:	82 83       	std	Z+2, r24	; 0x02
    25ca:	93 83       	std	Z+3, r25	; 0x03
    25cc:	a0 81       	ld	r26, Z
    25ce:	b1 81       	ldd	r27, Z+1	; 0x01
    25d0:	8a 17       	cp	r24, r26
    25d2:	9b 07       	cpc	r25, r27
    25d4:	11 f4       	brne	.+4      	; 0x25da <rb16_write+0x4c>
    25d6:	12 82       	std	Z+2, r1	; 0x02
    25d8:	13 82       	std	Z+3, r1	; 0x03
    25da:	82 81       	ldd	r24, Z+2	; 0x02
    25dc:	93 81       	ldd	r25, Z+3	; 0x03
    25de:	c4 81       	ldd	r28, Z+4	; 0x04
    25e0:	d5 81       	ldd	r29, Z+5	; 0x05
    25e2:	8c 17       	cp	r24, r28
    25e4:	9d 07       	cpc	r25, r29
    25e6:	49 f4       	brne	.+18     	; 0x25fa <rb16_write+0x6c>
    25e8:	01 96       	adiw	r24, 0x01	; 1
    25ea:	a8 17       	cp	r26, r24
    25ec:	b9 07       	cpc	r27, r25
    25ee:	19 f0       	breq	.+6      	; 0x25f6 <rb16_write+0x68>
    25f0:	84 83       	std	Z+4, r24	; 0x04
    25f2:	95 83       	std	Z+5, r25	; 0x05
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <rb16_write+0x6c>
    25f6:	14 82       	std	Z+4, r1	; 0x04
    25f8:	15 82       	std	Z+5, r1	; 0x05
    25fa:	2f 5f       	subi	r18, 0xFF	; 255
    25fc:	82 2f       	mov	r24, r18
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	84 17       	cp	r24, r20
    2602:	95 07       	cpc	r25, r21
    2604:	68 f2       	brcs	.-102    	; 0x25a0 <rb16_write+0x12>
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <rb16_init>:
    260c:	fc 01       	movw	r30, r24
    260e:	12 82       	std	Z+2, r1	; 0x02
    2610:	13 82       	std	Z+3, r1	; 0x03
    2612:	14 82       	std	Z+4, r1	; 0x04
    2614:	15 82       	std	Z+5, r1	; 0x05
    2616:	66 83       	std	Z+6, r22	; 0x06
    2618:	77 83       	std	Z+7, r23	; 0x07
    261a:	40 83       	st	Z, r20
    261c:	51 83       	std	Z+1, r21	; 0x01
    261e:	08 95       	ret

00002620 <rb16_get_nth>:
    2620:	dc 01       	movw	r26, r24
    2622:	12 96       	adiw	r26, 0x02	; 2
    2624:	ed 91       	ld	r30, X+
    2626:	fc 91       	ld	r31, X
    2628:	13 97       	sbiw	r26, 0x03	; 3
    262a:	cb 01       	movw	r24, r22
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	e8 17       	cp	r30, r24
    2630:	f9 07       	cpc	r31, r25
    2632:	78 f0       	brcs	.+30     	; 0x2652 <rb16_get_nth+0x32>
    2634:	e1 50       	subi	r30, 0x01	; 1
    2636:	f0 48       	sbci	r31, 0x80	; 128
    2638:	e6 1b       	sub	r30, r22
    263a:	f7 0b       	sbc	r31, r23
    263c:	ee 0f       	add	r30, r30
    263e:	ff 1f       	adc	r31, r31
    2640:	16 96       	adiw	r26, 0x06	; 6
    2642:	8d 91       	ld	r24, X+
    2644:	9c 91       	ld	r25, X
    2646:	17 97       	sbiw	r26, 0x07	; 7
    2648:	e8 0f       	add	r30, r24
    264a:	f9 1f       	adc	r31, r25
    264c:	80 81       	ld	r24, Z
    264e:	91 81       	ldd	r25, Z+1	; 0x01
    2650:	08 95       	ret
    2652:	2d 91       	ld	r18, X+
    2654:	3c 91       	ld	r19, X
    2656:	11 97       	sbiw	r26, 0x01	; 1
    2658:	e2 0f       	add	r30, r18
    265a:	f3 1f       	adc	r31, r19
    265c:	e1 50       	subi	r30, 0x01	; 1
    265e:	f0 48       	sbci	r31, 0x80	; 128
    2660:	e6 1b       	sub	r30, r22
    2662:	f7 0b       	sbc	r31, r23
    2664:	ee 0f       	add	r30, r30
    2666:	ff 1f       	adc	r31, r31
    2668:	16 96       	adiw	r26, 0x06	; 6
    266a:	8d 91       	ld	r24, X+
    266c:	9c 91       	ld	r25, X
    266e:	17 97       	sbiw	r26, 0x07	; 7
    2670:	e8 0f       	add	r30, r24
    2672:	f9 1f       	adc	r31, r25
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	08 95       	ret

0000267a <rb32_write>:
    267a:	cf 92       	push	r12
    267c:	df 92       	push	r13
    267e:	ef 92       	push	r14
    2680:	ff 92       	push	r15
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	fc 01       	movw	r30, r24
    2688:	41 15       	cp	r20, r1
    268a:	51 05       	cpc	r21, r1
    268c:	09 f4       	brne	.+2      	; 0x2690 <rb32_write+0x16>
    268e:	3f c0       	rjmp	.+126    	; 0x270e <rb32_write+0x94>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	db 01       	movw	r26, r22
    26a0:	a8 0f       	add	r26, r24
    26a2:	b9 1f       	adc	r27, r25
    26a4:	cd 90       	ld	r12, X+
    26a6:	dd 90       	ld	r13, X+
    26a8:	ed 90       	ld	r14, X+
    26aa:	fc 90       	ld	r15, X
    26ac:	a2 81       	ldd	r26, Z+2	; 0x02
    26ae:	b3 81       	ldd	r27, Z+3	; 0x03
    26b0:	aa 0f       	add	r26, r26
    26b2:	bb 1f       	adc	r27, r27
    26b4:	aa 0f       	add	r26, r26
    26b6:	bb 1f       	adc	r27, r27
    26b8:	86 81       	ldd	r24, Z+6	; 0x06
    26ba:	97 81       	ldd	r25, Z+7	; 0x07
    26bc:	a8 0f       	add	r26, r24
    26be:	b9 1f       	adc	r27, r25
    26c0:	cd 92       	st	X+, r12
    26c2:	dd 92       	st	X+, r13
    26c4:	ed 92       	st	X+, r14
    26c6:	fc 92       	st	X, r15
    26c8:	13 97       	sbiw	r26, 0x03	; 3
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	82 83       	std	Z+2, r24	; 0x02
    26d2:	93 83       	std	Z+3, r25	; 0x03
    26d4:	a0 81       	ld	r26, Z
    26d6:	b1 81       	ldd	r27, Z+1	; 0x01
    26d8:	8a 17       	cp	r24, r26
    26da:	9b 07       	cpc	r25, r27
    26dc:	11 f4       	brne	.+4      	; 0x26e2 <rb32_write+0x68>
    26de:	12 82       	std	Z+2, r1	; 0x02
    26e0:	13 82       	std	Z+3, r1	; 0x03
    26e2:	82 81       	ldd	r24, Z+2	; 0x02
    26e4:	93 81       	ldd	r25, Z+3	; 0x03
    26e6:	c4 81       	ldd	r28, Z+4	; 0x04
    26e8:	d5 81       	ldd	r29, Z+5	; 0x05
    26ea:	8c 17       	cp	r24, r28
    26ec:	9d 07       	cpc	r25, r29
    26ee:	49 f4       	brne	.+18     	; 0x2702 <rb32_write+0x88>
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	a8 17       	cp	r26, r24
    26f4:	b9 07       	cpc	r27, r25
    26f6:	19 f0       	breq	.+6      	; 0x26fe <rb32_write+0x84>
    26f8:	84 83       	std	Z+4, r24	; 0x04
    26fa:	95 83       	std	Z+5, r25	; 0x05
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <rb32_write+0x88>
    26fe:	14 82       	std	Z+4, r1	; 0x04
    2700:	15 82       	std	Z+5, r1	; 0x05
    2702:	2f 5f       	subi	r18, 0xFF	; 255
    2704:	82 2f       	mov	r24, r18
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	84 17       	cp	r24, r20
    270a:	95 07       	cpc	r25, r21
    270c:	20 f2       	brcs	.-120    	; 0x2696 <rb32_write+0x1c>
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	ff 90       	pop	r15
    2714:	ef 90       	pop	r14
    2716:	df 90       	pop	r13
    2718:	cf 90       	pop	r12
    271a:	08 95       	ret

0000271c <rb32_init>:
    271c:	fc 01       	movw	r30, r24
    271e:	12 82       	std	Z+2, r1	; 0x02
    2720:	13 82       	std	Z+3, r1	; 0x03
    2722:	14 82       	std	Z+4, r1	; 0x04
    2724:	15 82       	std	Z+5, r1	; 0x05
    2726:	66 83       	std	Z+6, r22	; 0x06
    2728:	77 83       	std	Z+7, r23	; 0x07
    272a:	40 83       	st	Z, r20
    272c:	51 83       	std	Z+1, r21	; 0x01
    272e:	08 95       	ret

00002730 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    2730:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    2732:	12 96       	adiw	r26, 0x02	; 2
    2734:	ed 91       	ld	r30, X+
    2736:	fc 91       	ld	r31, X
    2738:	13 97       	sbiw	r26, 0x03	; 3
    273a:	cb 01       	movw	r24, r22
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	e8 17       	cp	r30, r24
    2740:	f9 07       	cpc	r31, r25
    2742:	98 f0       	brcs	.+38     	; 0x276a <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    2744:	e1 50       	subi	r30, 0x01	; 1
    2746:	f0 4c       	sbci	r31, 0xC0	; 192
    2748:	e6 1b       	sub	r30, r22
    274a:	f7 0b       	sbc	r31, r23
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	16 96       	adiw	r26, 0x06	; 6
    2756:	8d 91       	ld	r24, X+
    2758:	9c 91       	ld	r25, X
    275a:	17 97       	sbiw	r26, 0x07	; 7
    275c:	e8 0f       	add	r30, r24
    275e:	f9 1f       	adc	r31, r25
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    276a:	2d 91       	ld	r18, X+
    276c:	3c 91       	ld	r19, X
    276e:	11 97       	sbiw	r26, 0x01	; 1
    2770:	e2 0f       	add	r30, r18
    2772:	f3 1f       	adc	r31, r19
    2774:	e1 50       	subi	r30, 0x01	; 1
    2776:	f0 4c       	sbci	r31, 0xC0	; 192
    2778:	e6 1b       	sub	r30, r22
    277a:	f7 0b       	sbc	r31, r23
    277c:	ee 0f       	add	r30, r30
    277e:	ff 1f       	adc	r31, r31
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	16 96       	adiw	r26, 0x06	; 6
    2786:	8d 91       	ld	r24, X+
    2788:	9c 91       	ld	r25, X
    278a:	17 97       	sbiw	r26, 0x07	; 7
    278c:	e8 0f       	add	r30, r24
    278e:	f9 1f       	adc	r31, r25
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
}
    2798:	08 95       	ret

0000279a <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	1f 92       	push	r1
    27a0:	1f 92       	push	r1
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    27ac:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    27b0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    27b4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    27b8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    27bc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    27c0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    27c4:	8f b7       	in	r24, 0x3f	; 63
    27c6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    27c8:	f8 94       	cli
	return flags;
    27ca:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    27cc:	e0 e5       	ldi	r30, 0x50	; 80
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	82 60       	ori	r24, 0x02	; 2
    27d4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    27d6:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    27d8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    27da:	81 ff       	sbrs	r24, 1
    27dc:	fd cf       	rjmp	.-6      	; 0x27d8 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	80 e4       	ldi	r24, 0x40	; 64
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	25 d0       	rcall	.+74     	; 0x2830 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    27e6:	8f b7       	in	r24, 0x3f	; 63
    27e8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    27ea:	f8 94       	cli
	return flags;
    27ec:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    27ee:	e0 e5       	ldi	r30, 0x50	; 80
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8e 7f       	andi	r24, 0xFE	; 254
    27f6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    27f8:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	08 95       	ret

00002804 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2804:	cf 93       	push	r28
    2806:	df 93       	push	r29
    2808:	1f 92       	push	r1
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    280e:	9f b7       	in	r25, 0x3f	; 63
    2810:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2812:	f8 94       	cli
	return flags;
    2814:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2816:	e8 2f       	mov	r30, r24
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	e0 59       	subi	r30, 0x90	; 144
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	60 95       	com	r22
    2820:	80 81       	ld	r24, Z
    2822:	68 23       	and	r22, r24
    2824:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2826:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2828:	0f 90       	pop	r0
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2830:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2832:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2834:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2836:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2838:	60 83       	st	Z, r22
	ret                             // Return to caller
    283a:	08 95       	ret

0000283c <__portable_avr_delay_cycles>:
	//printf("HALL SENSOR INITIALIZED\n");

}

void release(void){
	servo_release();
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <__portable_avr_delay_cycles+0xa>
    283e:	61 50       	subi	r22, 0x01	; 1
    2840:	71 09       	sbc	r23, r1
    2842:	81 09       	sbc	r24, r1
    2844:	91 09       	sbc	r25, r1
    2846:	61 15       	cp	r22, r1
    2848:	71 05       	cpc	r23, r1
    284a:	81 05       	cpc	r24, r1
    284c:	91 05       	cpc	r25, r1
    284e:	b9 f7       	brne	.-18     	; 0x283e <__portable_avr_delay_cycles+0x2>
    2850:	08 95       	ret

00002852 <pressure_init>:
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	7e dd       	rcall	.-1284   	; 0x2354 <ms5607_init>
    2858:	82 ea       	ldi	r24, 0xA2	; 162
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	8f dd       	rcall	.-1250   	; 0x237c <ms5607_read>
    285e:	c8 e5       	ldi	r28, 0x58	; 88
    2860:	d1 e2       	ldi	r29, 0x21	; 33
    2862:	88 83       	st	Y, r24
    2864:	99 83       	std	Y+1, r25	; 0x01
    2866:	84 ea       	ldi	r24, 0xA4	; 164
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	88 dd       	rcall	.-1264   	; 0x237c <ms5607_read>
    286c:	8a 83       	std	Y+2, r24	; 0x02
    286e:	9b 83       	std	Y+3, r25	; 0x03
    2870:	86 ea       	ldi	r24, 0xA6	; 166
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	83 dd       	rcall	.-1274   	; 0x237c <ms5607_read>
    2876:	8c 83       	std	Y+4, r24	; 0x04
    2878:	9d 83       	std	Y+5, r25	; 0x05
    287a:	88 ea       	ldi	r24, 0xA8	; 168
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	7e dd       	rcall	.-1284   	; 0x237c <ms5607_read>
    2880:	8e 83       	std	Y+6, r24	; 0x06
    2882:	9f 83       	std	Y+7, r25	; 0x07
    2884:	8a ea       	ldi	r24, 0xAA	; 170
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	79 dd       	rcall	.-1294   	; 0x237c <ms5607_read>
    288a:	88 87       	std	Y+8, r24	; 0x08
    288c:	99 87       	std	Y+9, r25	; 0x09
    288e:	8c ea       	ldi	r24, 0xAC	; 172
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	74 dd       	rcall	.-1304   	; 0x237c <ms5607_read>
    2894:	8a 87       	std	Y+10, r24	; 0x0a
    2896:	9b 87       	std	Y+11, r25	; 0x0b
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	08 95       	ret

0000289e <get_pressure>:
    289e:	4f 92       	push	r4
    28a0:	5f 92       	push	r5
    28a2:	6f 92       	push	r6
    28a4:	7f 92       	push	r7
    28a6:	8f 92       	push	r8
    28a8:	9f 92       	push	r9
    28aa:	af 92       	push	r10
    28ac:	bf 92       	push	r11
    28ae:	cf 92       	push	r12
    28b0:	df 92       	push	r13
    28b2:	ef 92       	push	r14
    28b4:	ff 92       	push	r15
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	72 dd       	rcall	.-1308   	; 0x23a0 <ms5607_convert_d1>
    28bc:	6b 01       	movw	r12, r22
    28be:	7c 01       	movw	r14, r24
    28c0:	af dd       	rcall	.-1186   	; 0x2420 <ms5607_convert_d2>
    28c2:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__floatunsisf>
    28c6:	4b 01       	movw	r8, r22
    28c8:	5c 01       	movw	r10, r24
    28ca:	c8 e5       	ldi	r28, 0x58	; 88
    28cc:	d1 e2       	ldi	r29, 0x21	; 33
    28ce:	68 85       	ldd	r22, Y+8	; 0x08
    28d0:	79 85       	ldd	r23, Y+9	; 0x09
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__floatunsisf>
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	53 e4       	ldi	r21, 0x43	; 67
    28e2:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    28e6:	9b 01       	movw	r18, r22
    28e8:	ac 01       	movw	r20, r24
    28ea:	c5 01       	movw	r24, r10
    28ec:	b4 01       	movw	r22, r8
    28ee:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__subsf3>
    28f2:	4b 01       	movw	r8, r22
    28f4:	5c 01       	movw	r10, r24
    28f6:	6c 81       	ldd	r22, Y+4	; 0x04
    28f8:	7d 81       	ldd	r23, Y+5	; 0x05
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__floatunsisf>
    2902:	a5 01       	movw	r20, r10
    2904:	94 01       	movw	r18, r8
    2906:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	5c e3       	ldi	r21, 0x3C	; 60
    2912:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2916:	2b 01       	movw	r4, r22
    2918:	3c 01       	movw	r6, r24
    291a:	68 81       	ld	r22, Y
    291c:	79 81       	ldd	r23, Y+1	; 0x01
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__floatunsisf>
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e8       	ldi	r20, 0x80	; 128
    292c:	57 e4       	ldi	r21, 0x47	; 71
    292e:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2932:	9b 01       	movw	r18, r22
    2934:	ac 01       	movw	r20, r24
    2936:	c3 01       	movw	r24, r6
    2938:	b2 01       	movw	r22, r4
    293a:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__addsf3>
    293e:	2b 01       	movw	r4, r22
    2940:	3c 01       	movw	r6, r24
    2942:	c7 01       	movw	r24, r14
    2944:	b6 01       	movw	r22, r12
    2946:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__floatunsisf>
    294a:	9b 01       	movw	r18, r22
    294c:	ac 01       	movw	r20, r24
    294e:	c3 01       	movw	r24, r6
    2950:	b2 01       	movw	r22, r4
    2952:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	55 e3       	ldi	r21, 0x35	; 53
    295e:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2962:	6b 01       	movw	r12, r22
    2964:	7c 01       	movw	r14, r24
    2966:	6e 81       	ldd	r22, Y+6	; 0x06
    2968:	7f 81       	ldd	r23, Y+7	; 0x07
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__floatunsisf>
    2972:	a5 01       	movw	r20, r10
    2974:	94 01       	movw	r18, r8
    2976:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5c e3       	ldi	r21, 0x3C	; 60
    2982:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2986:	4b 01       	movw	r8, r22
    2988:	5c 01       	movw	r10, r24
    298a:	6a 81       	ldd	r22, Y+2	; 0x02
    298c:	7b 81       	ldd	r23, Y+3	; 0x03
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__floatunsisf>
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	58 e4       	ldi	r21, 0x48	; 72
    299e:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    29a2:	9b 01       	movw	r18, r22
    29a4:	ac 01       	movw	r20, r24
    29a6:	c5 01       	movw	r24, r10
    29a8:	b4 01       	movw	r22, r8
    29aa:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__addsf3>
    29ae:	9b 01       	movw	r18, r22
    29b0:	ac 01       	movw	r20, r24
    29b2:	c7 01       	movw	r24, r14
    29b4:	b6 01       	movw	r22, r12
    29b6:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__subsf3>
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e0       	ldi	r20, 0x00	; 0
    29c0:	58 e3       	ldi	r21, 0x38	; 56
    29c2:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	ff 90       	pop	r15
    29cc:	ef 90       	pop	r14
    29ce:	df 90       	pop	r13
    29d0:	cf 90       	pop	r12
    29d2:	bf 90       	pop	r11
    29d4:	af 90       	pop	r10
    29d6:	9f 90       	pop	r9
    29d8:	8f 90       	pop	r8
    29da:	7f 90       	pop	r7
    29dc:	6f 90       	pop	r6
    29de:	5f 90       	pop	r5
    29e0:	4f 90       	pop	r4
    29e2:	08 95       	ret

000029e4 <get_altitude>:
    29e4:	4f 92       	push	r4
    29e6:	5f 92       	push	r5
    29e8:	6f 92       	push	r6
    29ea:	7f 92       	push	r7
    29ec:	8f 92       	push	r8
    29ee:	9f 92       	push	r9
    29f0:	af 92       	push	r10
    29f2:	bf 92       	push	r11
    29f4:	cf 92       	push	r12
    29f6:	df 92       	push	r13
    29f8:	ef 92       	push	r14
    29fa:	ff 92       	push	r15
    29fc:	2b 01       	movw	r4, r22
    29fe:	3c 01       	movw	r6, r24
    2a00:	c0 90 18 20 	lds	r12, 0x2018	; 0x802018 <L>
    2a04:	d0 90 19 20 	lds	r13, 0x2019	; 0x802019 <L+0x1>
    2a08:	e0 90 1a 20 	lds	r14, 0x201A	; 0x80201a <L+0x2>
    2a0c:	f0 90 1b 20 	lds	r15, 0x201B	; 0x80201b <L+0x3>
    2a10:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <R>
    2a14:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <R+0x1>
    2a18:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <R+0x2>
    2a1c:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <R+0x3>
    2a20:	c7 01       	movw	r24, r14
    2a22:	b6 01       	movw	r22, r12
    2a24:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2a28:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <g_0>
    2a2c:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <g_0+0x1>
    2a30:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <g_0+0x2>
    2a34:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <g_0+0x3>
    2a38:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    2a3c:	4b 01       	movw	r8, r22
    2a3e:	5c 01       	movw	r10, r24
    2a40:	a3 01       	movw	r20, r6
    2a42:	92 01       	movw	r18, r4
    2a44:	60 91 24 20 	lds	r22, 0x2024	; 0x802024 <ground_p>
    2a48:	70 91 25 20 	lds	r23, 0x2025	; 0x802025 <ground_p+0x1>
    2a4c:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <ground_p+0x2>
    2a50:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <ground_p+0x3>
    2a54:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    2a58:	a5 01       	movw	r20, r10
    2a5a:	94 01       	movw	r18, r8
    2a5c:	0e 94 4f 28 	call	0x509e	; 0x509e <pow>
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e8       	ldi	r20, 0x80	; 128
    2a66:	5f e3       	ldi	r21, 0x3F	; 63
    2a68:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__subsf3>
    2a6c:	20 91 20 20 	lds	r18, 0x2020	; 0x802020 <ground_t>
    2a70:	30 91 21 20 	lds	r19, 0x2021	; 0x802021 <ground_t+0x1>
    2a74:	40 91 22 20 	lds	r20, 0x2022	; 0x802022 <ground_t+0x2>
    2a78:	50 91 23 20 	lds	r21, 0x2023	; 0x802023 <ground_t+0x3>
    2a7c:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2a80:	a7 01       	movw	r20, r14
    2a82:	96 01       	movw	r18, r12
    2a84:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    2a88:	ff 90       	pop	r15
    2a8a:	ef 90       	pop	r14
    2a8c:	df 90       	pop	r13
    2a8e:	cf 90       	pop	r12
    2a90:	bf 90       	pop	r11
    2a92:	af 90       	pop	r10
    2a94:	9f 90       	pop	r9
    2a96:	8f 90       	pop	r8
    2a98:	7f 90       	pop	r7
    2a9a:	6f 90       	pop	r6
    2a9c:	5f 90       	pop	r5
    2a9e:	4f 90       	pop	r4
    2aa0:	08 95       	ret

00002aa2 <diff>:
    2aa2:	2f 92       	push	r2
    2aa4:	3f 92       	push	r3
    2aa6:	4f 92       	push	r4
    2aa8:	5f 92       	push	r5
    2aaa:	6f 92       	push	r6
    2aac:	7f 92       	push	r7
    2aae:	8f 92       	push	r8
    2ab0:	9f 92       	push	r9
    2ab2:	af 92       	push	r10
    2ab4:	bf 92       	push	r11
    2ab6:	cf 92       	push	r12
    2ab8:	df 92       	push	r13
    2aba:	ef 92       	push	r14
    2abc:	ff 92       	push	r15
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <diff+0x26>
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <diff+0x28>
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	6c 01       	movw	r12, r24
    2ad0:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <data_samples>
    2ad4:	88 23       	and	r24, r24
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <diff+0x38>
    2ad8:	6c c0       	rjmp	.+216    	; 0x2bb2 <diff+0x110>
    2ada:	00 e0       	ldi	r16, 0x00	; 0
    2adc:	10 e0       	ldi	r17, 0x00	; 0
    2ade:	41 2c       	mov	r4, r1
    2ae0:	51 2c       	mov	r5, r1
    2ae2:	32 01       	movw	r6, r4
    2ae4:	86 2e       	mov	r8, r22
    2ae6:	91 2c       	mov	r9, r1
    2ae8:	a1 2c       	mov	r10, r1
    2aea:	b1 2c       	mov	r11, r1
    2aec:	89 82       	std	Y+1, r8	; 0x01
    2aee:	9a 82       	std	Y+2, r9	; 0x02
    2af0:	ab 82       	std	Y+3, r10	; 0x03
    2af2:	bc 82       	std	Y+4, r11	; 0x04
    2af4:	b8 01       	movw	r22, r16
    2af6:	c6 01       	movw	r24, r12
    2af8:	93 dd       	rcall	.-1242   	; 0x2620 <rb16_get_nth>
    2afa:	5c 01       	movw	r10, r24
    2afc:	18 01       	movw	r2, r16
    2afe:	2f ef       	ldi	r18, 0xFF	; 255
    2b00:	22 1a       	sub	r2, r18
    2b02:	32 0a       	sbc	r3, r18
    2b04:	b1 01       	movw	r22, r2
    2b06:	c6 01       	movw	r24, r12
    2b08:	8b dd       	rcall	.-1258   	; 0x2620 <rb16_get_nth>
    2b0a:	7c 01       	movw	r14, r24
    2b0c:	b8 01       	movw	r22, r16
    2b0e:	6e 5f       	subi	r22, 0xFE	; 254
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	c6 01       	movw	r24, r12
    2b14:	85 dd       	rcall	.-1270   	; 0x2620 <rb16_get_nth>
    2b16:	a5 01       	movw	r20, r10
    2b18:	bb 0c       	add	r11, r11
    2b1a:	66 0b       	sbc	r22, r22
    2b1c:	77 0b       	sbc	r23, r23
    2b1e:	8a 01       	movw	r16, r20
    2b20:	9b 01       	movw	r18, r22
    2b22:	00 0f       	add	r16, r16
    2b24:	11 1f       	adc	r17, r17
    2b26:	22 1f       	adc	r18, r18
    2b28:	33 1f       	adc	r19, r19
    2b2a:	40 0f       	add	r20, r16
    2b2c:	51 1f       	adc	r21, r17
    2b2e:	62 1f       	adc	r22, r18
    2b30:	73 1f       	adc	r23, r19
    2b32:	87 01       	movw	r16, r14
    2b34:	ff 0c       	add	r15, r15
    2b36:	22 0b       	sbc	r18, r18
    2b38:	33 0b       	sbc	r19, r19
    2b3a:	78 01       	movw	r14, r16
    2b3c:	89 01       	movw	r16, r18
    2b3e:	ee 0c       	add	r14, r14
    2b40:	ff 1c       	adc	r15, r15
    2b42:	00 1f       	adc	r16, r16
    2b44:	11 1f       	adc	r17, r17
    2b46:	ee 0c       	add	r14, r14
    2b48:	ff 1c       	adc	r15, r15
    2b4a:	00 1f       	adc	r16, r16
    2b4c:	11 1f       	adc	r17, r17
    2b4e:	4a 01       	movw	r8, r20
    2b50:	5b 01       	movw	r10, r22
    2b52:	8e 18       	sub	r8, r14
    2b54:	9f 08       	sbc	r9, r15
    2b56:	a0 0a       	sbc	r10, r16
    2b58:	b1 0a       	sbc	r11, r17
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	99 0f       	add	r25, r25
    2b5e:	66 0b       	sbc	r22, r22
    2b60:	77 0b       	sbc	r23, r23
    2b62:	d5 01       	movw	r26, r10
    2b64:	c4 01       	movw	r24, r8
    2b66:	84 0f       	add	r24, r20
    2b68:	95 1f       	adc	r25, r21
    2b6a:	a6 1f       	adc	r26, r22
    2b6c:	b7 1f       	adc	r27, r23
    2b6e:	9c 01       	movw	r18, r24
    2b70:	ad 01       	movw	r20, r26
    2b72:	69 81       	ldd	r22, Y+1	; 0x01
    2b74:	7a 81       	ldd	r23, Y+2	; 0x02
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	0e 94 b4 29 	call	0x5368	; 0x5368 <__mulsi3>
    2b7e:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__floatsisf>
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e0       	ldi	r20, 0x00	; 0
    2b88:	5f e3       	ldi	r21, 0x3F	; 63
    2b8a:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2b8e:	9b 01       	movw	r18, r22
    2b90:	ac 01       	movw	r20, r24
    2b92:	c3 01       	movw	r24, r6
    2b94:	b2 01       	movw	r22, r4
    2b96:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__addsf3>
    2b9a:	2b 01       	movw	r4, r22
    2b9c:	3c 01       	movw	r6, r24
    2b9e:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <data_samples>
    2ba2:	81 01       	movw	r16, r2
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	22 16       	cp	r2, r18
    2baa:	33 06       	cpc	r3, r19
    2bac:	08 f4       	brcc	.+2      	; 0x2bb0 <diff+0x10e>
    2bae:	a2 cf       	rjmp	.-188    	; 0x2af4 <diff+0x52>
    2bb0:	03 c0       	rjmp	.+6      	; 0x2bb8 <diff+0x116>
    2bb2:	41 2c       	mov	r4, r1
    2bb4:	51 2c       	mov	r5, r1
    2bb6:	32 01       	movw	r6, r4
    2bb8:	68 2f       	mov	r22, r24
    2bba:	70 e0       	ldi	r23, 0x00	; 0
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__floatsisf>
    2bc4:	9b 01       	movw	r18, r22
    2bc6:	ac 01       	movw	r20, r24
    2bc8:	c3 01       	movw	r24, r6
    2bca:	b2 01       	movw	r22, r4
    2bcc:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	48 ec       	ldi	r20, 0xC8	; 200
    2bd6:	52 e4       	ldi	r21, 0x42	; 66
    2bd8:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    2bdc:	26 96       	adiw	r28, 0x06	; 6
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	df 90       	pop	r13
    2bf0:	cf 90       	pop	r12
    2bf2:	bf 90       	pop	r11
    2bf4:	af 90       	pop	r10
    2bf6:	9f 90       	pop	r9
    2bf8:	8f 90       	pop	r8
    2bfa:	7f 90       	pop	r7
    2bfc:	6f 90       	pop	r6
    2bfe:	5f 90       	pop	r5
    2c00:	4f 90       	pop	r4
    2c02:	3f 90       	pop	r3
    2c04:	2f 90       	pop	r2
    2c06:	08 95       	ret

00002c08 <data_check>:
    2c08:	3f 92       	push	r3
    2c0a:	4f 92       	push	r4
    2c0c:	5f 92       	push	r5
    2c0e:	6f 92       	push	r6
    2c10:	7f 92       	push	r7
    2c12:	8f 92       	push	r8
    2c14:	9f 92       	push	r9
    2c16:	af 92       	push	r10
    2c18:	bf 92       	push	r11
    2c1a:	cf 92       	push	r12
    2c1c:	df 92       	push	r13
    2c1e:	ef 92       	push	r14
    2c20:	ff 92       	push	r15
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <data_check+0x24>
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <data_check+0x26>
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	8c 01       	movw	r16, r24
    2c34:	19 82       	std	Y+1, r1	; 0x01
    2c36:	1a 82       	std	Y+2, r1	; 0x02
    2c38:	c1 2c       	mov	r12, r1
    2c3a:	d1 2c       	mov	r13, r1
    2c3c:	76 01       	movw	r14, r12
    2c3e:	69 81       	ldd	r22, Y+1	; 0x01
    2c40:	7a 81       	ldd	r23, Y+2	; 0x02
    2c42:	c8 01       	movw	r24, r16
    2c44:	75 dd       	rcall	.-1302   	; 0x2730 <rb32_get_nth>
    2c46:	4b 01       	movw	r8, r22
    2c48:	5c 01       	movw	r10, r24
    2c4a:	21 e6       	ldi	r18, 0x61	; 97
    2c4c:	82 1a       	sub	r8, r18
    2c4e:	2e ea       	ldi	r18, 0xAE	; 174
    2c50:	92 0a       	sbc	r9, r18
    2c52:	2a e0       	ldi	r18, 0x0A	; 10
    2c54:	a2 0a       	sbc	r10, r18
    2c56:	b1 08       	sbc	r11, r1
    2c58:	2f e7       	ldi	r18, 0x7F	; 127
    2c5a:	82 16       	cp	r8, r18
    2c5c:	2a e1       	ldi	r18, 0x1A	; 26
    2c5e:	92 06       	cpc	r9, r18
    2c60:	26 e0       	ldi	r18, 0x06	; 6
    2c62:	a2 06       	cpc	r10, r18
    2c64:	b1 04       	cpc	r11, r1
    2c66:	80 f4       	brcc	.+32     	; 0x2c88 <data_check+0x80>
    2c68:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__floatsisf>
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 ea       	ldi	r20, 0xA0	; 160
    2c72:	50 e4       	ldi	r21, 0x40	; 64
    2c74:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    2c78:	9b 01       	movw	r18, r22
    2c7a:	ac 01       	movw	r20, r24
    2c7c:	c7 01       	movw	r24, r14
    2c7e:	b6 01       	movw	r22, r12
    2c80:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__addsf3>
    2c84:	6b 01       	movw	r12, r22
    2c86:	7c 01       	movw	r14, r24
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	9a 83       	std	Y+2, r25	; 0x02
    2c92:	05 97       	sbiw	r24, 0x05	; 5
    2c94:	a1 f6       	brne	.-88     	; 0x2c3e <data_check+0x36>
    2c96:	19 82       	std	Y+1, r1	; 0x01
    2c98:	1a 82       	std	Y+2, r1	; 0x02
    2c9a:	81 2c       	mov	r8, r1
    2c9c:	91 2c       	mov	r9, r1
    2c9e:	54 01       	movw	r10, r8
    2ca0:	69 81       	ldd	r22, Y+1	; 0x01
    2ca2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ca4:	c8 01       	movw	r24, r16
    2ca6:	44 dd       	rcall	.-1400   	; 0x2730 <rb32_get_nth>
    2ca8:	2b 01       	movw	r4, r22
    2caa:	3c 01       	movw	r6, r24
    2cac:	21 e6       	ldi	r18, 0x61	; 97
    2cae:	42 1a       	sub	r4, r18
    2cb0:	2e ea       	ldi	r18, 0xAE	; 174
    2cb2:	52 0a       	sbc	r5, r18
    2cb4:	2a e0       	ldi	r18, 0x0A	; 10
    2cb6:	62 0a       	sbc	r6, r18
    2cb8:	71 08       	sbc	r7, r1
    2cba:	2f e7       	ldi	r18, 0x7F	; 127
    2cbc:	42 16       	cp	r4, r18
    2cbe:	2a e1       	ldi	r18, 0x1A	; 26
    2cc0:	52 06       	cpc	r5, r18
    2cc2:	26 e0       	ldi	r18, 0x06	; 6
    2cc4:	62 06       	cpc	r6, r18
    2cc6:	71 04       	cpc	r7, r1
    2cc8:	90 f4       	brcc	.+36     	; 0x2cee <data_check+0xe6>
    2cca:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__floatsisf>
    2cce:	a7 01       	movw	r20, r14
    2cd0:	96 01       	movw	r18, r12
    2cd2:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__subsf3>
    2cd6:	9b 01       	movw	r18, r22
    2cd8:	ac 01       	movw	r20, r24
    2cda:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2cde:	9b 01       	movw	r18, r22
    2ce0:	ac 01       	movw	r20, r24
    2ce2:	c5 01       	movw	r24, r10
    2ce4:	b4 01       	movw	r22, r8
    2ce6:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__addsf3>
    2cea:	4b 01       	movw	r8, r22
    2cec:	5c 01       	movw	r10, r24
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	05 97       	sbiw	r24, 0x05	; 5
    2cfa:	91 f6       	brne	.-92     	; 0x2ca0 <data_check+0x98>
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e8       	ldi	r20, 0x80	; 128
    2d02:	5e e3       	ldi	r21, 0x3E	; 62
    2d04:	c5 01       	movw	r24, r10
    2d06:	b4 01       	movw	r22, r8
    2d08:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2d0c:	69 83       	std	Y+1, r22	; 0x01
    2d0e:	7a 83       	std	Y+2, r23	; 0x02
    2d10:	8b 83       	std	Y+3, r24	; 0x03
    2d12:	9c 83       	std	Y+4, r25	; 0x04
    2d14:	1d 82       	std	Y+5, r1	; 0x05
    2d16:	1e 82       	std	Y+6, r1	; 0x06
    2d18:	31 2c       	mov	r3, r1
    2d1a:	41 2c       	mov	r4, r1
    2d1c:	51 2c       	mov	r5, r1
    2d1e:	32 01       	movw	r6, r4
    2d20:	6d 81       	ldd	r22, Y+5	; 0x05
    2d22:	7e 81       	ldd	r23, Y+6	; 0x06
    2d24:	c8 01       	movw	r24, r16
    2d26:	04 dd       	rcall	.-1528   	; 0x2730 <rb32_get_nth>
    2d28:	4b 01       	movw	r8, r22
    2d2a:	5c 01       	movw	r10, r24
    2d2c:	21 e6       	ldi	r18, 0x61	; 97
    2d2e:	82 1a       	sub	r8, r18
    2d30:	2e ea       	ldi	r18, 0xAE	; 174
    2d32:	92 0a       	sbc	r9, r18
    2d34:	2a e0       	ldi	r18, 0x0A	; 10
    2d36:	a2 0a       	sbc	r10, r18
    2d38:	b1 08       	sbc	r11, r1
    2d3a:	2f e7       	ldi	r18, 0x7F	; 127
    2d3c:	82 16       	cp	r8, r18
    2d3e:	2a e1       	ldi	r18, 0x1A	; 26
    2d40:	92 06       	cpc	r9, r18
    2d42:	26 e0       	ldi	r18, 0x06	; 6
    2d44:	a2 06       	cpc	r10, r18
    2d46:	b1 04       	cpc	r11, r1
    2d48:	50 f5       	brcc	.+84     	; 0x2d9e <data_check+0x196>
    2d4a:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__floatsisf>
    2d4e:	4b 01       	movw	r8, r22
    2d50:	5c 01       	movw	r10, r24
    2d52:	a7 01       	movw	r20, r14
    2d54:	96 01       	movw	r18, r12
    2d56:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__subsf3>
    2d5a:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    2d5e:	9b 01       	movw	r18, r22
    2d60:	77 23       	and	r23, r23
    2d62:	24 f4       	brge	.+8      	; 0x2d6c <data_check+0x164>
    2d64:	22 27       	eor	r18, r18
    2d66:	33 27       	eor	r19, r19
    2d68:	26 1b       	sub	r18, r22
    2d6a:	37 0b       	sbc	r19, r23
    2d6c:	b9 01       	movw	r22, r18
    2d6e:	33 0f       	add	r19, r19
    2d70:	88 0b       	sbc	r24, r24
    2d72:	99 0b       	sbc	r25, r25
    2d74:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__floatsisf>
    2d78:	9b 01       	movw	r18, r22
    2d7a:	ac 01       	movw	r20, r24
    2d7c:	69 81       	ldd	r22, Y+1	; 0x01
    2d7e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	9c 81       	ldd	r25, Y+4	; 0x04
    2d84:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__gesf2>
    2d88:	88 23       	and	r24, r24
    2d8a:	4c f0       	brlt	.+18     	; 0x2d9e <data_check+0x196>
    2d8c:	a5 01       	movw	r20, r10
    2d8e:	94 01       	movw	r18, r8
    2d90:	c3 01       	movw	r24, r6
    2d92:	b2 01       	movw	r22, r4
    2d94:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__addsf3>
    2d98:	2b 01       	movw	r4, r22
    2d9a:	3c 01       	movw	r6, r24
    2d9c:	33 94       	inc	r3
    2d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2da0:	9e 81       	ldd	r25, Y+6	; 0x06
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	05 97       	sbiw	r24, 0x05	; 5
    2daa:	09 f0       	breq	.+2      	; 0x2dae <data_check+0x1a6>
    2dac:	b9 cf       	rjmp	.-142    	; 0x2d20 <data_check+0x118>
    2dae:	33 20       	and	r3, r3
    2db0:	69 f0       	breq	.+26     	; 0x2dcc <data_check+0x1c4>
    2db2:	63 2d       	mov	r22, r3
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__floatunsisf>
    2dbe:	9b 01       	movw	r18, r22
    2dc0:	ac 01       	movw	r20, r24
    2dc2:	c3 01       	movw	r24, r6
    2dc4:	b2 01       	movw	r22, r4
    2dc6:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    2dca:	04 c0       	rjmp	.+8      	; 0x2dd4 <data_check+0x1cc>
    2dcc:	60 e0       	ldi	r22, 0x00	; 0
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	80 e8       	ldi	r24, 0x80	; 128
    2dd2:	9f eb       	ldi	r25, 0xBF	; 191
    2dd4:	26 96       	adiw	r28, 0x06	; 6
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	1f 91       	pop	r17
    2de0:	0f 91       	pop	r16
    2de2:	ff 90       	pop	r15
    2de4:	ef 90       	pop	r14
    2de6:	df 90       	pop	r13
    2de8:	cf 90       	pop	r12
    2dea:	bf 90       	pop	r11
    2dec:	af 90       	pop	r10
    2dee:	9f 90       	pop	r9
    2df0:	8f 90       	pop	r8
    2df2:	7f 90       	pop	r7
    2df4:	6f 90       	pop	r6
    2df6:	5f 90       	pop	r5
    2df8:	4f 90       	pop	r4
    2dfa:	3f 90       	pop	r3
    2dfc:	08 95       	ret

00002dfe <data_collect>:
    2dfe:	af 92       	push	r10
    2e00:	bf 92       	push	r11
    2e02:	cf 92       	push	r12
    2e04:	df 92       	push	r13
    2e06:	ef 92       	push	r14
    2e08:	ff 92       	push	r15
    2e0a:	0f 93       	push	r16
    2e0c:	1f 93       	push	r17
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <data_collect+0x16>
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <data_collect+0x18>
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	5c 01       	movw	r10, r24
    2e1c:	8b 01       	movw	r16, r22
    2e1e:	3f dd       	rcall	.-1410   	; 0x289e <get_pressure>
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2e2c:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    2e30:	69 83       	std	Y+1, r22	; 0x01
    2e32:	7a 83       	std	Y+2, r23	; 0x02
    2e34:	8b 83       	std	Y+3, r24	; 0x03
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	41 e0       	ldi	r20, 0x01	; 1
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	be 01       	movw	r22, r28
    2e3e:	6f 5f       	subi	r22, 0xFF	; 255
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	c8 01       	movw	r24, r16
    2e44:	1a dc       	rcall	.-1996   	; 0x267a <rb32_write>
    2e46:	c8 01       	movw	r24, r16
    2e48:	df de       	rcall	.-578    	; 0x2c08 <data_check>
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    2e56:	6b 01       	movw	r12, r22
    2e58:	7c 01       	movw	r14, r24
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e8       	ldi	r20, 0x80	; 128
    2e60:	5f eb       	ldi	r21, 0xBF	; 191
    2e62:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__cmpsf2>
    2e66:	88 23       	and	r24, r24
    2e68:	d1 f1       	breq	.+116    	; 0x2ede <data_collect+0xe0>
    2e6a:	c0 92 43 21 	sts	0x2143, r12	; 0x802143 <press>
    2e6e:	d0 92 44 21 	sts	0x2144, r13	; 0x802144 <press+0x1>
    2e72:	e0 92 45 21 	sts	0x2145, r14	; 0x802145 <press+0x2>
    2e76:	f0 92 46 21 	sts	0x2146, r15	; 0x802146 <press+0x3>
    2e7a:	c7 01       	movw	r24, r14
    2e7c:	b6 01       	movw	r22, r12
    2e7e:	b2 dd       	rcall	.-1180   	; 0x29e4 <get_altitude>
    2e80:	60 93 3b 21 	sts	0x213B, r22	; 0x80213b <alt>
    2e84:	70 93 3c 21 	sts	0x213C, r23	; 0x80213c <alt+0x1>
    2e88:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <alt+0x2>
    2e8c:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <alt+0x3>
    2e90:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <alt>
    2e94:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <alt+0x1>
    2e98:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <alt+0x2>
    2e9c:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <alt+0x3>
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	48 ec       	ldi	r20, 0xC8	; 200
    2ea6:	52 e4       	ldi	r21, 0x42	; 66
    2ea8:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    2eac:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    2eb0:	6d 83       	std	Y+5, r22	; 0x05
    2eb2:	7e 83       	std	Y+6, r23	; 0x06
    2eb4:	41 e0       	ldi	r20, 0x01	; 1
    2eb6:	50 e0       	ldi	r21, 0x00	; 0
    2eb8:	be 01       	movw	r22, r28
    2eba:	6b 5f       	subi	r22, 0xFB	; 251
    2ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ebe:	c5 01       	movw	r24, r10
    2ec0:	66 db       	rcall	.-2356   	; 0x258e <rb16_write>
    2ec2:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <rate>
    2ec6:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <rate+0x1>
    2eca:	c5 01       	movw	r24, r10
    2ecc:	ea dd       	rcall	.-1068   	; 0x2aa2 <diff>
    2ece:	60 93 33 21 	sts	0x2133, r22	; 0x802133 <velocity>
    2ed2:	70 93 34 21 	sts	0x2134, r23	; 0x802134 <velocity+0x1>
    2ed6:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <velocity+0x2>
    2eda:	90 93 36 21 	sts	0x2136, r25	; 0x802136 <velocity+0x3>
    2ede:	83 e3       	ldi	r24, 0x33	; 51
    2ee0:	93 e1       	ldi	r25, 0x13	; 19
    2ee2:	a5 e9       	ldi	r26, 0x95	; 149
    2ee4:	b3 e4       	ldi	r27, 0x43	; 67
    2ee6:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <temp>
    2eea:	90 93 40 21 	sts	0x2140, r25	; 0x802140 <temp+0x1>
    2eee:	a0 93 41 21 	sts	0x2141, r26	; 0x802141 <temp+0x2>
    2ef2:	b0 93 42 21 	sts	0x2142, r27	; 0x802142 <temp+0x3>
    2ef6:	26 96       	adiw	r28, 0x06	; 6
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	ff 90       	pop	r15
    2f06:	ef 90       	pop	r14
    2f08:	df 90       	pop	r13
    2f0a:	cf 90       	pop	r12
    2f0c:	bf 90       	pop	r11
    2f0e:	af 90       	pop	r10
    2f10:	08 95       	ret

00002f12 <state_check>:
    2f12:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <state>
    2f16:	81 30       	cpi	r24, 0x01	; 1
    2f18:	81 f1       	breq	.+96     	; 0x2f7a <state_check+0x68>
    2f1a:	38 f0       	brcs	.+14     	; 0x2f2a <state_check+0x18>
    2f1c:	82 30       	cpi	r24, 0x02	; 2
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <state_check+0x10>
    2f20:	55 c0       	rjmp	.+170    	; 0x2fcc <state_check+0xba>
    2f22:	83 30       	cpi	r24, 0x03	; 3
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <state_check+0x16>
    2f26:	fc c0       	rjmp	.+504    	; 0x3120 <state_check+0x20e>
    2f28:	7c c0       	rjmp	.+248    	; 0x3022 <state_check+0x110>
    2f2a:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <velocity>
    2f2e:	70 91 34 21 	lds	r23, 0x2134	; 0x802134 <velocity+0x1>
    2f32:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <velocity+0x2>
    2f36:	90 91 36 21 	lds	r25, 0x2136	; 0x802136 <velocity+0x3>
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	40 e4       	ldi	r20, 0x40	; 64
    2f40:	50 e4       	ldi	r21, 0x40	; 64
    2f42:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__cmpsf2>
    2f46:	88 23       	and	r24, r24
    2f48:	0c f0       	brlt	.+2      	; 0x2f4c <state_check+0x3a>
    2f4a:	ea c0       	rjmp	.+468    	; 0x3120 <state_check+0x20e>
    2f4c:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <alt>
    2f50:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <alt+0x1>
    2f54:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <alt+0x2>
    2f58:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <alt+0x3>
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	41 ee       	ldi	r20, 0xE1	; 225
    2f62:	53 e4       	ldi	r21, 0x43	; 67
    2f64:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__gesf2>
    2f68:	18 16       	cp	r1, r24
    2f6a:	0c f0       	brlt	.+2      	; 0x2f6e <state_check+0x5c>
    2f6c:	d9 c0       	rjmp	.+434    	; 0x3120 <state_check+0x20e>
    2f6e:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <state>
    2f72:	8f 5f       	subi	r24, 0xFF	; 255
    2f74:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <state>
    2f78:	08 95       	ret
    2f7a:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <velocity>
    2f7e:	70 91 34 21 	lds	r23, 0x2134	; 0x802134 <velocity+0x1>
    2f82:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <velocity+0x2>
    2f86:	90 91 36 21 	lds	r25, 0x2136	; 0x802136 <velocity+0x3>
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e4       	ldi	r20, 0x40	; 64
    2f90:	50 e4       	ldi	r21, 0x40	; 64
    2f92:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__cmpsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	84 f4       	brge	.+32     	; 0x2fba <state_check+0xa8>
    2f9a:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <alt>
    2f9e:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <alt+0x1>
    2fa2:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <alt+0x2>
    2fa6:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <alt+0x3>
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	41 ee       	ldi	r20, 0xE1	; 225
    2fb0:	53 e4       	ldi	r21, 0x43	; 67
    2fb2:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__cmpsf2>
    2fb6:	88 23       	and	r24, r24
    2fb8:	1c f0       	brlt	.+6      	; 0x2fc0 <state_check+0xae>
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	80 93 66 21 	sts	0x2166, r24	; 0x802166 <released>
    2fc0:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <state>
    2fc4:	8f 5f       	subi	r24, 0xFF	; 255
    2fc6:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <state>
    2fca:	08 95       	ret
    2fcc:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <velocity>
    2fd0:	70 91 34 21 	lds	r23, 0x2134	; 0x802134 <velocity+0x1>
    2fd4:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <velocity+0x2>
    2fd8:	90 91 36 21 	lds	r25, 0x2136	; 0x802136 <velocity+0x3>
    2fdc:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    2fe0:	9b 01       	movw	r18, r22
    2fe2:	77 23       	and	r23, r23
    2fe4:	24 f4       	brge	.+8      	; 0x2fee <state_check+0xdc>
    2fe6:	22 27       	eor	r18, r18
    2fe8:	33 27       	eor	r19, r19
    2fea:	26 1b       	sub	r18, r22
    2fec:	37 0b       	sbc	r19, r23
    2fee:	23 30       	cpi	r18, 0x03	; 3
    2ff0:	31 05       	cpc	r19, r1
    2ff2:	8c f0       	brlt	.+34     	; 0x3016 <state_check+0x104>
    2ff4:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <alt>
    2ff8:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <alt+0x1>
    2ffc:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <alt+0x2>
    3000:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <alt+0x3>
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	40 e2       	ldi	r20, 0x20	; 32
    300a:	51 e4       	ldi	r21, 0x41	; 65
    300c:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__cmpsf2>
    3010:	88 23       	and	r24, r24
    3012:	0c f0       	brlt	.+2      	; 0x3016 <state_check+0x104>
    3014:	85 c0       	rjmp	.+266    	; 0x3120 <state_check+0x20e>
    3016:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <state>
    301a:	8f 5f       	subi	r24, 0xFF	; 255
    301c:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <state>
    3020:	08 95       	ret
    3022:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <velocity>
    3026:	70 91 34 21 	lds	r23, 0x2134	; 0x802134 <velocity+0x1>
    302a:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <velocity+0x2>
    302e:	90 91 36 21 	lds	r25, 0x2136	; 0x802136 <velocity+0x3>
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e4       	ldi	r20, 0x40	; 64
    3038:	50 e4       	ldi	r21, 0x40	; 64
    303a:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__gesf2>
    303e:	18 16       	cp	r1, r24
    3040:	14 f4       	brge	.+4      	; 0x3046 <state_check+0x134>
    3042:	10 92 67 21 	sts	0x2167, r1	; 0x802167 <state>
    3046:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <alt>
    304a:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <alt+0x1>
    304e:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <alt+0x2>
    3052:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <alt+0x3>
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	41 ee       	ldi	r20, 0xE1	; 225
    305c:	53 e4       	ldi	r21, 0x43	; 67
    305e:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__gesf2>
    3062:	18 16       	cp	r1, r24
    3064:	9c f4       	brge	.+38     	; 0x308c <state_check+0x17a>
    3066:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <velocity>
    306a:	70 91 34 21 	lds	r23, 0x2134	; 0x802134 <velocity+0x1>
    306e:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <velocity+0x2>
    3072:	90 91 36 21 	lds	r25, 0x2136	; 0x802136 <velocity+0x3>
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e4       	ldi	r20, 0x40	; 64
    307c:	50 e4       	ldi	r21, 0x40	; 64
    307e:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__cmpsf2>
    3082:	88 23       	and	r24, r24
    3084:	1c f4       	brge	.+6      	; 0x308c <state_check+0x17a>
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <state>
    308c:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <alt>
    3090:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <alt+0x1>
    3094:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <alt+0x2>
    3098:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <alt+0x3>
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	41 ee       	ldi	r20, 0xE1	; 225
    30a2:	53 e4       	ldi	r21, 0x43	; 67
    30a4:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__cmpsf2>
    30a8:	88 23       	and	r24, r24
    30aa:	9c f4       	brge	.+38     	; 0x30d2 <state_check+0x1c0>
    30ac:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <velocity>
    30b0:	70 91 34 21 	lds	r23, 0x2134	; 0x802134 <velocity+0x1>
    30b4:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <velocity+0x2>
    30b8:	90 91 36 21 	lds	r25, 0x2136	; 0x802136 <velocity+0x3>
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e4       	ldi	r20, 0x40	; 64
    30c2:	50 e4       	ldi	r21, 0x40	; 64
    30c4:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__cmpsf2>
    30c8:	88 23       	and	r24, r24
    30ca:	1c f4       	brge	.+6      	; 0x30d2 <state_check+0x1c0>
    30cc:	82 e0       	ldi	r24, 0x02	; 2
    30ce:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <state>
    30d2:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <velocity>
    30d6:	70 91 34 21 	lds	r23, 0x2134	; 0x802134 <velocity+0x1>
    30da:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <velocity+0x2>
    30de:	90 91 36 21 	lds	r25, 0x2136	; 0x802136 <velocity+0x3>
    30e2:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    30e6:	9b 01       	movw	r18, r22
    30e8:	77 23       	and	r23, r23
    30ea:	24 f4       	brge	.+8      	; 0x30f4 <state_check+0x1e2>
    30ec:	22 27       	eor	r18, r18
    30ee:	33 27       	eor	r19, r19
    30f0:	26 1b       	sub	r18, r22
    30f2:	37 0b       	sbc	r19, r23
    30f4:	23 30       	cpi	r18, 0x03	; 3
    30f6:	31 05       	cpc	r19, r1
    30f8:	9c f4       	brge	.+38     	; 0x3120 <state_check+0x20e>
    30fa:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <alt>
    30fe:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <alt+0x1>
    3102:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <alt+0x2>
    3106:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <alt+0x3>
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e2       	ldi	r20, 0x20	; 32
    3110:	51 e4       	ldi	r21, 0x41	; 65
    3112:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__cmpsf2>
    3116:	88 23       	and	r24, r24
    3118:	1c f4       	brge	.+6      	; 0x3120 <state_check+0x20e>
    311a:	83 e0       	ldi	r24, 0x03	; 3
    311c:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <state>
    3120:	08 95       	ret

00003122 <servo_pid>:
    3122:	8f 92       	push	r8
    3124:	9f 92       	push	r9
    3126:	af 92       	push	r10
    3128:	bf 92       	push	r11
    312a:	cf 92       	push	r12
    312c:	df 92       	push	r13
    312e:	ef 92       	push	r14
    3130:	ff 92       	push	r15
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	7c 01       	movw	r14, r24
    313c:	c0 e0       	ldi	r28, 0x00	; 0
    313e:	d0 e0       	ldi	r29, 0x00	; 0
    3140:	00 e0       	ldi	r16, 0x00	; 0
    3142:	10 e0       	ldi	r17, 0x00	; 0
    3144:	be 01       	movw	r22, r28
    3146:	c7 01       	movw	r24, r14
    3148:	6b da       	rcall	.-2858   	; 0x2620 <rb16_get_nth>
    314a:	08 0f       	add	r16, r24
    314c:	19 1f       	adc	r17, r25
    314e:	21 96       	adiw	r28, 0x01	; 1
    3150:	ca 30       	cpi	r28, 0x0A	; 10
    3152:	d1 05       	cpc	r29, r1
    3154:	b9 f7       	brne	.-18     	; 0x3144 <servo_pid+0x22>
    3156:	60 e0       	ldi	r22, 0x00	; 0
    3158:	70 e0       	ldi	r23, 0x00	; 0
    315a:	c7 01       	movw	r24, r14
    315c:	61 da       	rcall	.-2878   	; 0x2620 <rb16_get_nth>
    315e:	ec 01       	movw	r28, r24
    3160:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <rate>
    3164:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <rate+0x1>
    3168:	c7 01       	movw	r24, r14
    316a:	9b dc       	rcall	.-1738   	; 0x2aa2 <diff>
    316c:	6b 01       	movw	r12, r22
    316e:	7c 01       	movw	r14, r24
    3170:	be 01       	movw	r22, r28
    3172:	dd 0f       	add	r29, r29
    3174:	88 0b       	sbc	r24, r24
    3176:	99 0b       	sbc	r25, r25
    3178:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__floatsisf>
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	a9 01       	movw	r20, r18
    3182:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	48 ec       	ldi	r20, 0xC8	; 200
    318c:	52 e4       	ldi	r21, 0x42	; 66
    318e:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    3192:	4b 01       	movw	r8, r22
    3194:	5c 01       	movw	r10, r24
    3196:	b8 01       	movw	r22, r16
    3198:	11 0f       	add	r17, r17
    319a:	88 0b       	sbc	r24, r24
    319c:	99 0b       	sbc	r25, r25
    319e:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__floatsisf>
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	a9 01       	movw	r20, r18
    31a8:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	48 ec       	ldi	r20, 0xC8	; 200
    31b2:	52 e4       	ldi	r21, 0x42	; 66
    31b4:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    31b8:	9b 01       	movw	r18, r22
    31ba:	ac 01       	movw	r20, r24
    31bc:	c5 01       	movw	r24, r10
    31be:	b4 01       	movw	r22, r8
    31c0:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__addsf3>
    31c4:	4b 01       	movw	r8, r22
    31c6:	5c 01       	movw	r10, r24
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	a9 01       	movw	r20, r18
    31ce:	c7 01       	movw	r24, r14
    31d0:	b6 01       	movw	r22, r12
    31d2:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    31d6:	9b 01       	movw	r18, r22
    31d8:	ac 01       	movw	r20, r24
    31da:	c5 01       	movw	r24, r10
    31dc:	b4 01       	movw	r22, r8
    31de:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__addsf3>
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e8       	ldi	r19, 0x80	; 128
    31e6:	4b eb       	ldi	r20, 0xBB	; 187
    31e8:	54 e4       	ldi	r21, 0x44	; 68
    31ea:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__addsf3>
    31ee:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__fixunssfsi>
    31f2:	60 93 12 20 	sts	0x2012, r22	; 0x802012 <servo_pulse>
    31f6:	70 93 13 20 	sts	0x2013, r23	; 0x802013 <servo_pulse+0x1>
    31fa:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <servo_pulse>
    31fe:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <servo_pulse+0x1>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__floatunsisf>
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a e7       	ldi	r20, 0x7A	; 122
    3210:	54 e4       	ldi	r21, 0x44	; 68
    3212:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__divsf3>
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	4a ef       	ldi	r20, 0xFA	; 250
    321c:	53 e4       	ldi	r21, 0x43	; 67
    321e:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    3222:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__fixunssfsi>
    3226:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    322a:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	df 90       	pop	r13
    323c:	cf 90       	pop	r12
    323e:	bf 90       	pop	r11
    3240:	af 90       	pop	r10
    3242:	9f 90       	pop	r9
    3244:	8f 90       	pop	r8
    3246:	08 95       	ret

00003248 <clock_init>:
    3248:	61 e0       	ldi	r22, 0x01	; 1
    324a:	85 e0       	ldi	r24, 0x05	; 5
    324c:	db da       	rcall	.-2634   	; 0x2804 <sysclk_enable_module>
    324e:	e0 e0       	ldi	r30, 0x00	; 0
    3250:	fa e0       	ldi	r31, 0x0A	; 10
    3252:	87 e0       	ldi	r24, 0x07	; 7
    3254:	80 83       	st	Z, r24
    3256:	84 e3       	ldi	r24, 0x34	; 52
    3258:	9c e0       	ldi	r25, 0x0C	; 12
    325a:	86 a3       	std	Z+38, r24	; 0x26
    325c:	97 a3       	std	Z+39, r25	; 0x27
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	86 83       	std	Z+6, r24	; 0x06
    3262:	08 95       	ret

00003264 <cali_alt>:
    3264:	80 91 43 21 	lds	r24, 0x2143	; 0x802143 <press>
    3268:	90 91 44 21 	lds	r25, 0x2144	; 0x802144 <press+0x1>
    326c:	a0 91 45 21 	lds	r26, 0x2145	; 0x802145 <press+0x2>
    3270:	b0 91 46 21 	lds	r27, 0x2146	; 0x802146 <press+0x3>
    3274:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <ground_p>
    3278:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <ground_p+0x1>
    327c:	a0 93 26 20 	sts	0x2026, r26	; 0x802026 <ground_p+0x2>
    3280:	b0 93 27 20 	sts	0x2027, r27	; 0x802027 <ground_p+0x3>
    3284:	83 e3       	ldi	r24, 0x33	; 51
    3286:	93 e1       	ldi	r25, 0x13	; 19
    3288:	a5 e9       	ldi	r26, 0x95	; 149
    328a:	b3 e4       	ldi	r27, 0x43	; 67
    328c:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <ground_t>
    3290:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <ground_t+0x1>
    3294:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <ground_t+0x2>
    3298:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <ground_t+0x3>
    329c:	08 95       	ret

0000329e <cali_ang>:
    329e:	3f d8       	rcall	.-3970   	; 0x231e <imu_heading>
    32a0:	60 93 53 21 	sts	0x2153, r22	; 0x802153 <ref_yaw>
    32a4:	70 93 54 21 	sts	0x2154, r23	; 0x802154 <ref_yaw+0x1>
    32a8:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <ref_yaw+0x2>
    32ac:	90 93 56 21 	sts	0x2156, r25	; 0x802156 <ref_yaw+0x3>
    32b0:	08 95       	ret

000032b2 <calibrate>:
    32b2:	d8 df       	rcall	.-80     	; 0x3264 <cali_alt>
    32b4:	f4 cf       	rjmp	.-24     	; 0x329e <cali_ang>
    32b6:	08 95       	ret

000032b8 <servo_release>:
    32b8:	e0 e0       	ldi	r30, 0x00	; 0
    32ba:	f9 e0       	ldi	r31, 0x09	; 9
    32bc:	86 a1       	ldd	r24, Z+38	; 0x26
    32be:	97 a1       	ldd	r25, Z+39	; 0x27
    32c0:	88 5e       	subi	r24, 0xE8	; 232
    32c2:	93 40       	sbci	r25, 0x03	; 3
    32c4:	80 a7       	std	Z+40, r24	; 0x28
    32c6:	91 a7       	std	Z+41, r25	; 0x29
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	80 93 66 21 	sts	0x2166, r24	; 0x802166 <released>
    32ce:	08 95       	ret

000032d0 <servo_close>:
	
	released = 1;
}

void servo_close(void){
	TCD0.CCA = TCD0.PER - 600;
    32d0:	e0 e0       	ldi	r30, 0x00	; 0
    32d2:	f9 e0       	ldi	r31, 0x09	; 9
    32d4:	86 a1       	ldd	r24, Z+38	; 0x26
    32d6:	97 a1       	ldd	r25, Z+39	; 0x27
    32d8:	88 55       	subi	r24, 0x58	; 88
    32da:	92 40       	sbci	r25, 0x02	; 2
    32dc:	80 a7       	std	Z+40, r24	; 0x28
    32de:	91 a7       	std	Z+41, r25	; 0x29
	
	released = 0;
    32e0:	10 92 66 21 	sts	0x2166, r1	; 0x802166 <released>
    32e4:	08 95       	ret

000032e6 <packet>:
}

void packet(void){
    32e6:	2f 92       	push	r2
    32e8:	3f 92       	push	r3
    32ea:	4f 92       	push	r4
    32ec:	5f 92       	push	r5
    32ee:	6f 92       	push	r6
    32f0:	7f 92       	push	r7
    32f2:	8f 92       	push	r8
    32f4:	9f 92       	push	r9
    32f6:	af 92       	push	r10
    32f8:	bf 92       	push	r11
    32fa:	cf 92       	push	r12
    32fc:	df 92       	push	r13
    32fe:	ef 92       	push	r14
    3300:	ff 92       	push	r15
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	e9 97       	sbiw	r28, 0x39	; 57
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	de bf       	out	0x3e, r29	; 62
	//XBEE_spi_write(str);
	packets++;
    3314:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <packets>
    3318:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <packets+0x1>
    331c:	01 96       	adiw	r24, 0x01	; 1
    331e:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <packets>
    3322:	90 93 48 21 	sts	0x2148, r25	; 0x802148 <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    3326:	60 91 11 21 	lds	r22, 0x2111	; 0x802111 <angle>
    332a:	70 91 12 21 	lds	r23, 0x2112	; 0x802112 <angle+0x1>
    332e:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <angle+0x2>
    3332:	90 91 14 21 	lds	r25, 0x2114	; 0x802114 <angle+0x3>
    3336:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <state>
    333a:	29 83       	std	Y+1, r18	; 0x01
    333c:	40 90 15 21 	lds	r4, 0x2115	; 0x802115 <rpm>
    3340:	50 90 16 21 	lds	r5, 0x2116	; 0x802116 <rpm+0x1>
    3344:	60 90 17 21 	lds	r6, 0x2117	; 0x802117 <rpm+0x2>
    3348:	70 90 18 21 	lds	r7, 0x2118	; 0x802118 <rpm+0x3>
    334c:	80 90 19 21 	lds	r8, 0x2119	; 0x802119 <roll>
    3350:	90 90 1a 21 	lds	r9, 0x211A	; 0x80211a <roll+0x1>
    3354:	a0 90 1b 21 	lds	r10, 0x211B	; 0x80211b <roll+0x2>
    3358:	b0 90 1c 21 	lds	r11, 0x211C	; 0x80211c <roll+0x3>
    335c:	c0 90 1d 21 	lds	r12, 0x211D	; 0x80211d <pitch>
    3360:	d0 90 1e 21 	lds	r13, 0x211E	; 0x80211e <pitch+0x1>
    3364:	e0 90 1f 21 	lds	r14, 0x211F	; 0x80211f <pitch+0x2>
    3368:	f0 90 20 21 	lds	r15, 0x2120	; 0x802120 <pitch+0x3>
    336c:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <gps_sats>
    3370:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <gps_sats+0x1>
    3374:	48 af       	std	Y+56, r20	; 0x38
    3376:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    3378:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <gps_alt>
    337c:	30 91 24 21 	lds	r19, 0x2124	; 0x802124 <gps_alt+0x1>
    3380:	40 91 25 21 	lds	r20, 0x2125	; 0x802125 <gps_alt+0x2>
    3384:	50 91 26 21 	lds	r21, 0x2126	; 0x802126 <gps_alt+0x3>
    3388:	2a 83       	std	Y+2, r18	; 0x02
    338a:	3b 83       	std	Y+3, r19	; 0x03
    338c:	4c 83       	std	Y+4, r20	; 0x04
    338e:	5d 83       	std	Y+5, r21	; 0x05
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3390:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <gps_alt>
    3394:	30 91 24 21 	lds	r19, 0x2124	; 0x802124 <gps_alt+0x1>
    3398:	40 91 25 21 	lds	r20, 0x2125	; 0x802125 <gps_alt+0x2>
    339c:	50 91 26 21 	lds	r21, 0x2126	; 0x802126 <gps_alt+0x3>
    33a0:	2e 83       	std	Y+6, r18	; 0x06
    33a2:	3f 83       	std	Y+7, r19	; 0x07
    33a4:	48 87       	std	Y+8, r20	; 0x08
    33a6:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    33a8:	20 91 27 21 	lds	r18, 0x2127	; 0x802127 <gps_long>
    33ac:	30 91 28 21 	lds	r19, 0x2128	; 0x802128 <gps_long+0x1>
    33b0:	40 91 29 21 	lds	r20, 0x2129	; 0x802129 <gps_long+0x2>
    33b4:	50 91 2a 21 	lds	r21, 0x212A	; 0x80212a <gps_long+0x3>
    33b8:	2a 87       	std	Y+10, r18	; 0x0a
    33ba:	3b 87       	std	Y+11, r19	; 0x0b
    33bc:	4c 87       	std	Y+12, r20	; 0x0c
    33be:	5d 87       	std	Y+13, r21	; 0x0d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    33c0:	20 91 27 21 	lds	r18, 0x2127	; 0x802127 <gps_long>
    33c4:	30 91 28 21 	lds	r19, 0x2128	; 0x802128 <gps_long+0x1>
    33c8:	40 91 29 21 	lds	r20, 0x2129	; 0x802129 <gps_long+0x2>
    33cc:	50 91 2a 21 	lds	r21, 0x212A	; 0x80212a <gps_long+0x3>
    33d0:	2e 87       	std	Y+14, r18	; 0x0e
    33d2:	3f 87       	std	Y+15, r19	; 0x0f
    33d4:	48 8b       	std	Y+16, r20	; 0x10
    33d6:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    33d8:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <gps_lat>
    33dc:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <gps_lat+0x1>
    33e0:	40 91 2d 21 	lds	r20, 0x212D	; 0x80212d <gps_lat+0x2>
    33e4:	50 91 2e 21 	lds	r21, 0x212E	; 0x80212e <gps_lat+0x3>
    33e8:	2a 8b       	std	Y+18, r18	; 0x12
    33ea:	3b 8b       	std	Y+19, r19	; 0x13
    33ec:	4c 8b       	std	Y+20, r20	; 0x14
    33ee:	5d 8b       	std	Y+21, r21	; 0x15
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    33f0:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <gps_lat>
    33f4:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <gps_lat+0x1>
    33f8:	40 91 2d 21 	lds	r20, 0x212D	; 0x80212d <gps_lat+0x2>
    33fc:	50 91 2e 21 	lds	r21, 0x212E	; 0x80212e <gps_lat+0x3>
    3400:	2e 8b       	std	Y+22, r18	; 0x16
    3402:	3f 8b       	std	Y+23, r19	; 0x17
    3404:	48 8f       	std	Y+24, r20	; 0x18
    3406:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    3408:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <gps_t>
    340c:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <gps_t+0x1>
    3410:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <gps_t+0x2>
    3414:	50 91 32 21 	lds	r21, 0x2132	; 0x802132 <gps_t+0x3>
    3418:	2a 8f       	std	Y+26, r18	; 0x1a
    341a:	3b 8f       	std	Y+27, r19	; 0x1b
    341c:	4c 8f       	std	Y+28, r20	; 0x1c
    341e:	5d 8f       	std	Y+29, r21	; 0x1d
    3420:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <gps_t>
    3424:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <gps_t+0x1>
    3428:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <gps_t+0x2>
    342c:	50 91 32 21 	lds	r21, 0x2132	; 0x802132 <gps_t+0x3>
    3430:	2e 8f       	std	Y+30, r18	; 0x1e
    3432:	3f 8f       	std	Y+31, r19	; 0x1f
    3434:	48 a3       	std	Y+32, r20	; 0x20
    3436:	59 a3       	std	Y+33, r21	; 0x21
    3438:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <gps_t>
    343c:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <gps_t+0x1>
    3440:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <gps_t+0x2>
    3444:	50 91 32 21 	lds	r21, 0x2132	; 0x802132 <gps_t+0x3>
    3448:	2a a3       	std	Y+34, r18	; 0x22
    344a:	3b a3       	std	Y+35, r19	; 0x23
    344c:	4c a3       	std	Y+36, r20	; 0x24
    344e:	5d a3       	std	Y+37, r21	; 0x25
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3450:	20 91 37 21 	lds	r18, 0x2137	; 0x802137 <volt>
    3454:	30 91 38 21 	lds	r19, 0x2138	; 0x802138 <volt+0x1>
    3458:	40 91 39 21 	lds	r20, 0x2139	; 0x802139 <volt+0x2>
    345c:	50 91 3a 21 	lds	r21, 0x213A	; 0x80213a <volt+0x3>
    3460:	2e a3       	std	Y+38, r18	; 0x26
    3462:	3f a3       	std	Y+39, r19	; 0x27
    3464:	48 a7       	std	Y+40, r20	; 0x28
    3466:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    3468:	20 91 3f 21 	lds	r18, 0x213F	; 0x80213f <temp>
    346c:	30 91 40 21 	lds	r19, 0x2140	; 0x802140 <temp+0x1>
    3470:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <temp+0x2>
    3474:	50 91 42 21 	lds	r21, 0x2142	; 0x802142 <temp+0x3>
    3478:	2a a7       	std	Y+42, r18	; 0x2a
    347a:	3b a7       	std	Y+43, r19	; 0x2b
    347c:	4c a7       	std	Y+44, r20	; 0x2c
    347e:	5d a7       	std	Y+45, r21	; 0x2d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3480:	20 91 43 21 	lds	r18, 0x2143	; 0x802143 <press>
    3484:	30 91 44 21 	lds	r19, 0x2144	; 0x802144 <press+0x1>
    3488:	40 91 45 21 	lds	r20, 0x2145	; 0x802145 <press+0x2>
    348c:	50 91 46 21 	lds	r21, 0x2146	; 0x802146 <press+0x3>
    3490:	2e a7       	std	Y+46, r18	; 0x2e
    3492:	3f a7       	std	Y+47, r19	; 0x2f
    3494:	48 ab       	std	Y+48, r20	; 0x30
    3496:	59 ab       	std	Y+49, r21	; 0x31
    3498:	20 91 3b 21 	lds	r18, 0x213B	; 0x80213b <alt>
    349c:	30 91 3c 21 	lds	r19, 0x213C	; 0x80213c <alt+0x1>
    34a0:	40 91 3d 21 	lds	r20, 0x213D	; 0x80213d <alt+0x2>
    34a4:	50 91 3e 21 	lds	r21, 0x213E	; 0x80213e <alt+0x3>
    34a8:	2a ab       	std	Y+50, r18	; 0x32
    34aa:	3b ab       	std	Y+51, r19	; 0x33
    34ac:	4c ab       	std	Y+52, r20	; 0x34
    34ae:	5d ab       	std	Y+53, r21	; 0x35
    34b0:	00 91 47 21 	lds	r16, 0x2147	; 0x802147 <packets>
    34b4:	10 91 48 21 	lds	r17, 0x2148	; 0x802148 <packets+0x1>
    34b8:	20 90 4b 21 	lds	r2, 0x214B	; 0x80214b <timer>
    34bc:	30 90 4c 21 	lds	r3, 0x214C	; 0x80214c <timer+0x1>
    34c0:	40 91 4b 21 	lds	r20, 0x214B	; 0x80214b <timer>
    34c4:	50 91 4c 21 	lds	r21, 0x214C	; 0x80214c <timer+0x1>
    34c8:	4e ab       	std	Y+54, r20	; 0x36
    34ca:	5f ab       	std	Y+55, r21	; 0x37
    34cc:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    34d0:	7f 93       	push	r23
    34d2:	6f 93       	push	r22
    34d4:	1f 92       	push	r1
    34d6:	59 81       	ldd	r21, Y+1	; 0x01
    34d8:	5f 93       	push	r21
    34da:	c3 01       	movw	r24, r6
    34dc:	b2 01       	movw	r22, r4
    34de:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    34e2:	7f 93       	push	r23
    34e4:	6f 93       	push	r22
    34e6:	c5 01       	movw	r24, r10
    34e8:	b4 01       	movw	r22, r8
    34ea:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    34ee:	7f 93       	push	r23
    34f0:	6f 93       	push	r22
    34f2:	c7 01       	movw	r24, r14
    34f4:	b6 01       	movw	r22, r12
    34f6:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    34fa:	7f 93       	push	r23
    34fc:	6f 93       	push	r22
    34fe:	89 ad       	ldd	r24, Y+57	; 0x39
    3500:	8f 93       	push	r24
    3502:	98 ad       	ldd	r25, Y+56	; 0x38
    3504:	9f 93       	push	r25
    3506:	6a 81       	ldd	r22, Y+2	; 0x02
    3508:	7b 81       	ldd	r23, Y+3	; 0x03
    350a:	8c 81       	ldd	r24, Y+4	; 0x04
    350c:	9d 81       	ldd	r25, Y+5	; 0x05
    350e:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    3512:	9b 01       	movw	r18, r22
    3514:	22 0f       	add	r18, r18
    3516:	33 1f       	adc	r19, r19
    3518:	66 0f       	add	r22, r22
    351a:	77 1f       	adc	r23, r23
    351c:	66 0f       	add	r22, r22
    351e:	77 1f       	adc	r23, r23
    3520:	66 0f       	add	r22, r22
    3522:	77 1f       	adc	r23, r23
    3524:	c9 01       	movw	r24, r18
    3526:	86 0f       	add	r24, r22
    3528:	97 1f       	adc	r25, r23
    352a:	6a e0       	ldi	r22, 0x0A	; 10
    352c:	70 e0       	ldi	r23, 0x00	; 0
    352e:	0e 94 d7 29 	call	0x53ae	; 0x53ae <__divmodhi4>
    3532:	9f 93       	push	r25
    3534:	8f 93       	push	r24
    3536:	6e 81       	ldd	r22, Y+6	; 0x06
    3538:	7f 81       	ldd	r23, Y+7	; 0x07
    353a:	88 85       	ldd	r24, Y+8	; 0x08
    353c:	99 85       	ldd	r25, Y+9	; 0x09
    353e:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    3542:	7f 93       	push	r23
    3544:	6f 93       	push	r22
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	34 e2       	ldi	r19, 0x24	; 36
    354a:	44 e7       	ldi	r20, 0x74	; 116
    354c:	59 e4       	ldi	r21, 0x49	; 73
    354e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3550:	7b 85       	ldd	r23, Y+11	; 0x0b
    3552:	8c 85       	ldd	r24, Y+12	; 0x0c
    3554:	9d 85       	ldd	r25, Y+13	; 0x0d
    3556:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    355a:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    355e:	20 e4       	ldi	r18, 0x40	; 64
    3560:	32 e4       	ldi	r19, 0x42	; 66
    3562:	4f e0       	ldi	r20, 0x0F	; 15
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__divmodsi4>
    356a:	9b 01       	movw	r18, r22
    356c:	77 23       	and	r23, r23
    356e:	24 f4       	brge	.+8      	; 0x3578 <packet+0x292>
    3570:	22 27       	eor	r18, r18
    3572:	33 27       	eor	r19, r19
    3574:	26 1b       	sub	r18, r22
    3576:	37 0b       	sbc	r19, r23
    3578:	c9 01       	movw	r24, r18
    357a:	33 0f       	add	r19, r19
    357c:	aa 0b       	sbc	r26, r26
    357e:	bb 0b       	sbc	r27, r27
    3580:	bf 93       	push	r27
    3582:	af 93       	push	r26
    3584:	9f 93       	push	r25
    3586:	8f 93       	push	r24
    3588:	6e 85       	ldd	r22, Y+14	; 0x0e
    358a:	7f 85       	ldd	r23, Y+15	; 0x0f
    358c:	88 89       	ldd	r24, Y+16	; 0x10
    358e:	99 89       	ldd	r25, Y+17	; 0x11
    3590:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    3594:	7f 93       	push	r23
    3596:	6f 93       	push	r22
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	34 e2       	ldi	r19, 0x24	; 36
    359c:	44 e7       	ldi	r20, 0x74	; 116
    359e:	59 e4       	ldi	r21, 0x49	; 73
    35a0:	6a 89       	ldd	r22, Y+18	; 0x12
    35a2:	7b 89       	ldd	r23, Y+19	; 0x13
    35a4:	8c 89       	ldd	r24, Y+20	; 0x14
    35a6:	9d 89       	ldd	r25, Y+21	; 0x15
    35a8:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__mulsf3>
    35ac:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    35b0:	20 e4       	ldi	r18, 0x40	; 64
    35b2:	32 e4       	ldi	r19, 0x42	; 66
    35b4:	4f e0       	ldi	r20, 0x0F	; 15
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__divmodsi4>
    35bc:	9f 93       	push	r25
    35be:	8f 93       	push	r24
    35c0:	7f 93       	push	r23
    35c2:	6f 93       	push	r22
    35c4:	6e 89       	ldd	r22, Y+22	; 0x16
    35c6:	7f 89       	ldd	r23, Y+23	; 0x17
    35c8:	88 8d       	ldd	r24, Y+24	; 0x18
    35ca:	99 8d       	ldd	r25, Y+25	; 0x19
    35cc:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    35d0:	7f 93       	push	r23
    35d2:	6f 93       	push	r22
    35d4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    35d6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    35d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    35dc:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    35e0:	0f 2e       	mov	r0, r31
    35e2:	f4 e6       	ldi	r31, 0x64	; 100
    35e4:	cf 2e       	mov	r12, r31
    35e6:	d1 2c       	mov	r13, r1
    35e8:	e1 2c       	mov	r14, r1
    35ea:	f1 2c       	mov	r15, r1
    35ec:	f0 2d       	mov	r31, r0
    35ee:	a7 01       	movw	r20, r14
    35f0:	96 01       	movw	r18, r12
    35f2:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__divmodsi4>
    35f6:	7f 93       	push	r23
    35f8:	6f 93       	push	r22
    35fa:	6e 8d       	ldd	r22, Y+30	; 0x1e
    35fc:	7f 8d       	ldd	r23, Y+31	; 0x1f
    35fe:	88 a1       	ldd	r24, Y+32	; 0x20
    3600:	99 a1       	ldd	r25, Y+33	; 0x21
    3602:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    3606:	0f 2e       	mov	r0, r31
    3608:	f0 e1       	ldi	r31, 0x10	; 16
    360a:	8f 2e       	mov	r8, r31
    360c:	f7 e2       	ldi	r31, 0x27	; 39
    360e:	9f 2e       	mov	r9, r31
    3610:	a1 2c       	mov	r10, r1
    3612:	b1 2c       	mov	r11, r1
    3614:	f0 2d       	mov	r31, r0
    3616:	a5 01       	movw	r20, r10
    3618:	94 01       	movw	r18, r8
    361a:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__divmodsi4>
    361e:	a7 01       	movw	r20, r14
    3620:	96 01       	movw	r18, r12
    3622:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__divmodsi4>
    3626:	3f 93       	push	r19
    3628:	2f 93       	push	r18
    362a:	6a a1       	ldd	r22, Y+34	; 0x22
    362c:	7b a1       	ldd	r23, Y+35	; 0x23
    362e:	8c a1       	ldd	r24, Y+36	; 0x24
    3630:	9d a1       	ldd	r25, Y+37	; 0x25
    3632:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    3636:	a5 01       	movw	r20, r10
    3638:	94 01       	movw	r18, r8
    363a:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__divmodsi4>
    363e:	3f 93       	push	r19
    3640:	2f 93       	push	r18
    3642:	6e a1       	ldd	r22, Y+38	; 0x26
    3644:	7f a1       	ldd	r23, Y+39	; 0x27
    3646:	88 a5       	ldd	r24, Y+40	; 0x28
    3648:	99 a5       	ldd	r25, Y+41	; 0x29
    364a:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    364e:	7f 93       	push	r23
    3650:	6f 93       	push	r22
    3652:	23 e3       	ldi	r18, 0x33	; 51
    3654:	33 e9       	ldi	r19, 0x93	; 147
    3656:	48 e8       	ldi	r20, 0x88	; 136
    3658:	53 e4       	ldi	r21, 0x43	; 67
    365a:	6a a5       	ldd	r22, Y+42	; 0x2a
    365c:	7b a5       	ldd	r23, Y+43	; 0x2b
    365e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3660:	9d a5       	ldd	r25, Y+45	; 0x2d
    3662:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__subsf3>
    3666:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    366a:	7f 93       	push	r23
    366c:	6f 93       	push	r22
    366e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3670:	7f a5       	ldd	r23, Y+47	; 0x2f
    3672:	88 a9       	ldd	r24, Y+48	; 0x30
    3674:	99 a9       	ldd	r25, Y+49	; 0x31
    3676:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    367a:	9f 93       	push	r25
    367c:	8f 93       	push	r24
    367e:	7f 93       	push	r23
    3680:	6f 93       	push	r22
    3682:	6a a9       	ldd	r22, Y+50	; 0x32
    3684:	7b a9       	ldd	r23, Y+51	; 0x33
    3686:	8c a9       	ldd	r24, Y+52	; 0x34
    3688:	9d a9       	ldd	r25, Y+53	; 0x35
    368a:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    368e:	7f 93       	push	r23
    3690:	6f 93       	push	r22
    3692:	1f 93       	push	r17
    3694:	0f 93       	push	r16
    3696:	91 01       	movw	r18, r2
    3698:	ad ec       	ldi	r26, 0xCD	; 205
    369a:	bc ec       	ldi	r27, 0xCC	; 204
    369c:	0e 94 31 2a 	call	0x5462	; 0x5462 <__umulhisi3>
    36a0:	96 95       	lsr	r25
    36a2:	87 95       	ror	r24
    36a4:	96 95       	lsr	r25
    36a6:	87 95       	ror	r24
    36a8:	96 95       	lsr	r25
    36aa:	87 95       	ror	r24
    36ac:	9c 01       	movw	r18, r24
    36ae:	22 0f       	add	r18, r18
    36b0:	33 1f       	adc	r19, r19
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	88 0f       	add	r24, r24
    36bc:	99 1f       	adc	r25, r25
    36be:	82 0f       	add	r24, r18
    36c0:	93 1f       	adc	r25, r19
    36c2:	28 1a       	sub	r2, r24
    36c4:	39 0a       	sbc	r3, r25
    36c6:	3f 92       	push	r3
    36c8:	2f 92       	push	r2
    36ca:	2e a9       	ldd	r18, Y+54	; 0x36
    36cc:	3f a9       	ldd	r19, Y+55	; 0x37
    36ce:	0e 94 31 2a 	call	0x5462	; 0x5462 <__umulhisi3>
    36d2:	96 95       	lsr	r25
    36d4:	87 95       	ror	r24
    36d6:	96 95       	lsr	r25
    36d8:	87 95       	ror	r24
    36da:	96 95       	lsr	r25
    36dc:	87 95       	ror	r24
    36de:	9f 93       	push	r25
    36e0:	8f 93       	push	r24
    36e2:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <format+0x1>
    36e6:	8f 93       	push	r24
    36e8:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <format>
    36ec:	8f 93       	push	r24
    36ee:	21 eb       	ldi	r18, 0xB1	; 177
    36f0:	31 e2       	ldi	r19, 0x21	; 33
    36f2:	3f 93       	push	r19
    36f4:	2f 93       	push	r18
    36f6:	0e 94 de 2a 	call	0x55bc	; 0x55bc <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	21 eb       	ldi	r18, 0xB1	; 177
    3700:	31 e2       	ldi	r19, 0x21	; 33
    3702:	3f 93       	push	r19
    3704:	2f 93       	push	r18
    3706:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
}
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	e9 96       	adiw	r28, 0x39	; 57
    3710:	cd bf       	out	0x3d, r28	; 61
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	df 91       	pop	r29
    3716:	cf 91       	pop	r28
    3718:	1f 91       	pop	r17
    371a:	0f 91       	pop	r16
    371c:	ff 90       	pop	r15
    371e:	ef 90       	pop	r14
    3720:	df 90       	pop	r13
    3722:	cf 90       	pop	r12
    3724:	bf 90       	pop	r11
    3726:	af 90       	pop	r10
    3728:	9f 90       	pop	r9
    372a:	8f 90       	pop	r8
    372c:	7f 90       	pop	r7
    372e:	6f 90       	pop	r6
    3730:	5f 90       	pop	r5
    3732:	4f 90       	pop	r4
    3734:	3f 90       	pop	r3
    3736:	2f 90       	pop	r2
    3738:	08 95       	ret

0000373a <eeprom_write_const>:

void eeprom_write_const(void){
    373a:	4f 92       	push	r4
    373c:	5f 92       	push	r5
    373e:	6f 92       	push	r6
    3740:	7f 92       	push	r7
    3742:	8f 92       	push	r8
    3744:	9f 92       	push	r9
    3746:	af 92       	push	r10
    3748:	bf 92       	push	r11
    374a:	cf 92       	push	r12
    374c:	df 92       	push	r13
    374e:	ef 92       	push	r14
    3750:	ff 92       	push	r15
    3752:	0f 93       	push	r16
    3754:	1f 93       	push	r17
    3756:	cf 93       	push	r28
    3758:	df 93       	push	r29
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	a0 97       	sbiw	r28, 0x20	; 32
    3760:	cd bf       	out	0x3d, r28	; 61
    3762:	de bf       	out	0x3e, r29	; 62
	uint64_t p = 0;
	uint64_t t = 0;
	
	memcpy(&p, &ground_p, 8);
    3764:	a4 e2       	ldi	r26, 0x24	; 36
    3766:	b0 e2       	ldi	r27, 0x20	; 32
    3768:	fc 91       	ld	r31, X
    376a:	11 96       	adiw	r26, 0x01	; 1
    376c:	5c 90       	ld	r5, X
    376e:	11 97       	sbiw	r26, 0x01	; 1
    3770:	12 96       	adiw	r26, 0x02	; 2
    3772:	6c 90       	ld	r6, X
    3774:	12 97       	sbiw	r26, 0x02	; 2
    3776:	13 96       	adiw	r26, 0x03	; 3
    3778:	7c 90       	ld	r7, X
    377a:	13 97       	sbiw	r26, 0x03	; 3
    377c:	14 96       	adiw	r26, 0x04	; 4
    377e:	8c 90       	ld	r8, X
    3780:	14 97       	sbiw	r26, 0x04	; 4
    3782:	15 96       	adiw	r26, 0x05	; 5
    3784:	9c 90       	ld	r9, X
    3786:	15 97       	sbiw	r26, 0x05	; 5
    3788:	16 96       	adiw	r26, 0x06	; 6
    378a:	ac 90       	ld	r10, X
    378c:	16 97       	sbiw	r26, 0x06	; 6
    378e:	17 96       	adiw	r26, 0x07	; 7
    3790:	4c 90       	ld	r4, X
	memcpy(&t, &ground_t, 8);
    3792:	a0 e2       	ldi	r26, 0x20	; 32
    3794:	b0 e2       	ldi	r27, 0x20	; 32
    3796:	ec 91       	ld	r30, X
    3798:	11 96       	adiw	r26, 0x01	; 1
    379a:	bc 90       	ld	r11, X
    379c:	11 97       	sbiw	r26, 0x01	; 1
    379e:	12 96       	adiw	r26, 0x02	; 2
    37a0:	cc 90       	ld	r12, X
    37a2:	12 97       	sbiw	r26, 0x02	; 2
    37a4:	13 96       	adiw	r26, 0x03	; 3
    37a6:	dc 90       	ld	r13, X
    37a8:	13 97       	sbiw	r26, 0x03	; 3
    37aa:	14 96       	adiw	r26, 0x04	; 4
    37ac:	ec 90       	ld	r14, X
    37ae:	14 97       	sbiw	r26, 0x04	; 4
    37b0:	15 96       	adiw	r26, 0x05	; 5
    37b2:	fc 90       	ld	r15, X
    37b4:	15 97       	sbiw	r26, 0x05	; 5
    37b6:	16 96       	adiw	r26, 0x06	; 6
    37b8:	1c 91       	ld	r17, X
    37ba:	16 97       	sbiw	r26, 0x06	; 6
    37bc:	17 96       	adiw	r26, 0x07	; 7
    37be:	ac 91       	ld	r26, X

	uint8_t data[] = {p & 0xFF, (p >> 8) & 0xFF, (p >> 16) & 0xFF, (p >> 24) & 0xFF, (p >> 32) & 0xFF, (p >> 40) & 0xFF, (p >> 48) & 0xFF, p >> 56,
    37c0:	f9 83       	std	Y+1, r31	; 0x01
    37c2:	2f 2f       	mov	r18, r31
    37c4:	35 2d       	mov	r19, r5
    37c6:	46 2d       	mov	r20, r6
    37c8:	57 2d       	mov	r21, r7
    37ca:	68 2d       	mov	r22, r8
    37cc:	79 2d       	mov	r23, r9
    37ce:	8a 2d       	mov	r24, r10
    37d0:	94 2d       	mov	r25, r4
    37d2:	08 e0       	ldi	r16, 0x08	; 8
    37d4:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    37d8:	2a 83       	std	Y+2, r18	; 0x02
    37da:	2f 2f       	mov	r18, r31
    37dc:	35 2d       	mov	r19, r5
    37de:	46 2d       	mov	r20, r6
    37e0:	57 2d       	mov	r21, r7
    37e2:	68 2d       	mov	r22, r8
    37e4:	79 2d       	mov	r23, r9
    37e6:	8a 2d       	mov	r24, r10
    37e8:	94 2d       	mov	r25, r4
    37ea:	00 e1       	ldi	r16, 0x10	; 16
    37ec:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    37f0:	2b 83       	std	Y+3, r18	; 0x03
    37f2:	2f 2f       	mov	r18, r31
    37f4:	35 2d       	mov	r19, r5
    37f6:	46 2d       	mov	r20, r6
    37f8:	57 2d       	mov	r21, r7
    37fa:	68 2d       	mov	r22, r8
    37fc:	79 2d       	mov	r23, r9
    37fe:	8a 2d       	mov	r24, r10
    3800:	94 2d       	mov	r25, r4
    3802:	08 e1       	ldi	r16, 0x18	; 24
    3804:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    3808:	2c 83       	std	Y+4, r18	; 0x04
    380a:	2f 2f       	mov	r18, r31
    380c:	35 2d       	mov	r19, r5
    380e:	46 2d       	mov	r20, r6
    3810:	57 2d       	mov	r21, r7
    3812:	68 2d       	mov	r22, r8
    3814:	79 2d       	mov	r23, r9
    3816:	8a 2d       	mov	r24, r10
    3818:	94 2d       	mov	r25, r4
    381a:	00 e2       	ldi	r16, 0x20	; 32
    381c:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    3820:	2d 83       	std	Y+5, r18	; 0x05
    3822:	2f 2f       	mov	r18, r31
    3824:	35 2d       	mov	r19, r5
    3826:	46 2d       	mov	r20, r6
    3828:	57 2d       	mov	r21, r7
    382a:	68 2d       	mov	r22, r8
    382c:	79 2d       	mov	r23, r9
    382e:	8a 2d       	mov	r24, r10
    3830:	94 2d       	mov	r25, r4
    3832:	08 e2       	ldi	r16, 0x28	; 40
    3834:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    3838:	2e 83       	std	Y+6, r18	; 0x06
    383a:	2f 2f       	mov	r18, r31
    383c:	35 2d       	mov	r19, r5
    383e:	46 2d       	mov	r20, r6
    3840:	57 2d       	mov	r21, r7
    3842:	68 2d       	mov	r22, r8
    3844:	79 2d       	mov	r23, r9
    3846:	8a 2d       	mov	r24, r10
    3848:	94 2d       	mov	r25, r4
    384a:	00 e3       	ldi	r16, 0x30	; 48
    384c:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    3850:	2f 83       	std	Y+7, r18	; 0x07
    3852:	2f 2f       	mov	r18, r31
    3854:	35 2d       	mov	r19, r5
    3856:	46 2d       	mov	r20, r6
    3858:	57 2d       	mov	r21, r7
    385a:	68 2d       	mov	r22, r8
    385c:	79 2d       	mov	r23, r9
    385e:	8a 2d       	mov	r24, r10
    3860:	94 2d       	mov	r25, r4
    3862:	08 e3       	ldi	r16, 0x38	; 56
    3864:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    3868:	28 87       	std	Y+8, r18	; 0x08
    386a:	e9 87       	std	Y+9, r30	; 0x09
    386c:	2e 2f       	mov	r18, r30
    386e:	3b 2d       	mov	r19, r11
    3870:	4c 2d       	mov	r20, r12
    3872:	5d 2d       	mov	r21, r13
    3874:	6e 2d       	mov	r22, r14
    3876:	7f 2d       	mov	r23, r15
    3878:	81 2f       	mov	r24, r17
    387a:	9a 2f       	mov	r25, r26
    387c:	08 e0       	ldi	r16, 0x08	; 8
    387e:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    3882:	2a 87       	std	Y+10, r18	; 0x0a
    3884:	2e 2f       	mov	r18, r30
    3886:	3b 2d       	mov	r19, r11
    3888:	4c 2d       	mov	r20, r12
    388a:	5d 2d       	mov	r21, r13
    388c:	6e 2d       	mov	r22, r14
    388e:	7f 2d       	mov	r23, r15
    3890:	81 2f       	mov	r24, r17
    3892:	9a 2f       	mov	r25, r26
    3894:	00 e1       	ldi	r16, 0x10	; 16
    3896:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    389a:	2b 87       	std	Y+11, r18	; 0x0b
    389c:	2e 2f       	mov	r18, r30
    389e:	3b 2d       	mov	r19, r11
    38a0:	4c 2d       	mov	r20, r12
    38a2:	5d 2d       	mov	r21, r13
    38a4:	6e 2d       	mov	r22, r14
    38a6:	7f 2d       	mov	r23, r15
    38a8:	81 2f       	mov	r24, r17
    38aa:	9a 2f       	mov	r25, r26
    38ac:	08 e1       	ldi	r16, 0x18	; 24
    38ae:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    38b2:	2c 87       	std	Y+12, r18	; 0x0c
    38b4:	2e 2f       	mov	r18, r30
    38b6:	3b 2d       	mov	r19, r11
    38b8:	4c 2d       	mov	r20, r12
    38ba:	5d 2d       	mov	r21, r13
    38bc:	6e 2d       	mov	r22, r14
    38be:	7f 2d       	mov	r23, r15
    38c0:	81 2f       	mov	r24, r17
    38c2:	9a 2f       	mov	r25, r26
    38c4:	00 e2       	ldi	r16, 0x20	; 32
    38c6:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    38ca:	2d 87       	std	Y+13, r18	; 0x0d
    38cc:	2e 2f       	mov	r18, r30
    38ce:	3b 2d       	mov	r19, r11
    38d0:	4c 2d       	mov	r20, r12
    38d2:	5d 2d       	mov	r21, r13
    38d4:	6e 2d       	mov	r22, r14
    38d6:	7f 2d       	mov	r23, r15
    38d8:	81 2f       	mov	r24, r17
    38da:	9a 2f       	mov	r25, r26
    38dc:	08 e2       	ldi	r16, 0x28	; 40
    38de:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    38e2:	2e 87       	std	Y+14, r18	; 0x0e
    38e4:	2e 2f       	mov	r18, r30
    38e6:	3b 2d       	mov	r19, r11
    38e8:	4c 2d       	mov	r20, r12
    38ea:	5d 2d       	mov	r21, r13
    38ec:	6e 2d       	mov	r22, r14
    38ee:	7f 2d       	mov	r23, r15
    38f0:	81 2f       	mov	r24, r17
    38f2:	9a 2f       	mov	r25, r26
    38f4:	00 e3       	ldi	r16, 0x30	; 48
    38f6:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    38fa:	2f 87       	std	Y+15, r18	; 0x0f
    38fc:	2e 2f       	mov	r18, r30
    38fe:	3b 2d       	mov	r19, r11
    3900:	4c 2d       	mov	r20, r12
    3902:	5d 2d       	mov	r21, r13
    3904:	6e 2d       	mov	r22, r14
    3906:	7f 2d       	mov	r23, r15
    3908:	81 2f       	mov	r24, r17
    390a:	9a 2f       	mov	r25, r26
    390c:	08 e3       	ldi	r16, 0x38	; 56
    390e:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__lshrdi3>
    3912:	28 8b       	std	Y+16, r18	; 0x10
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
    3914:	80 e1       	ldi	r24, 0x10	; 16
    3916:	e8 e2       	ldi	r30, 0x28	; 40
    3918:	f0 e2       	ldi	r31, 0x20	; 32
    391a:	de 01       	movw	r26, r28
    391c:	51 96       	adiw	r26, 0x11	; 17
    391e:	01 90       	ld	r0, Z+
    3920:	0d 92       	st	X+, r0
    3922:	8a 95       	dec	r24
    3924:	e1 f7       	brne	.-8      	; 0x391e <eeprom_write_const+0x1e4>
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
    3926:	83 e3       	ldi	r24, 0x33	; 51
    3928:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    392c:	fe 01       	movw	r30, r28
    392e:	71 96       	adiw	r30, 0x11	; 17
    3930:	ce 01       	movw	r24, r28
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	ae 01       	movw	r20, r28
    3936:	4f 5d       	subi	r20, 0xDF	; 223
    3938:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 16; i++){
		NVM.ADDR0 = addresses[i];
    393a:	60 ec       	ldi	r22, 0xC0	; 192
    393c:	71 e0       	ldi	r23, 0x01	; 1
    393e:	21 91       	ld	r18, Z+
    3940:	db 01       	movw	r26, r22
    3942:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    3944:	dc 01       	movw	r26, r24
    3946:	2d 91       	ld	r18, X+
    3948:	cd 01       	movw	r24, r26
    394a:	db 01       	movw	r26, r22
    394c:	14 96       	adiw	r26, 0x04	; 4
    394e:	2c 93       	st	X, r18
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 16; i++){
    3950:	e4 17       	cp	r30, r20
    3952:	f5 07       	cpc	r31, r21
    3954:	a1 f7       	brne	.-24     	; 0x393e <eeprom_write_const+0x204>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    3956:	e0 ec       	ldi	r30, 0xC0	; 192
    3958:	f1 e0       	ldi	r31, 0x01	; 1
    395a:	85 e3       	ldi	r24, 0x35	; 53
    395c:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    395e:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    3960:	80 e1       	ldi	r24, 0x10	; 16
    3962:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    3964:	88 ed       	ldi	r24, 0xD8	; 216
    3966:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    396c:	87 85       	ldd	r24, Z+15	; 0x0f
    396e:	88 23       	and	r24, r24
    3970:	ec f3       	brlt	.-6      	; 0x396c <eeprom_write_const+0x232>
}
    3972:	a0 96       	adiw	r28, 0x20	; 32
    3974:	cd bf       	out	0x3d, r28	; 61
    3976:	de bf       	out	0x3e, r29	; 62
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	1f 91       	pop	r17
    397e:	0f 91       	pop	r16
    3980:	ff 90       	pop	r15
    3982:	ef 90       	pop	r14
    3984:	df 90       	pop	r13
    3986:	cf 90       	pop	r12
    3988:	bf 90       	pop	r11
    398a:	af 90       	pop	r10
    398c:	9f 90       	pop	r9
    398e:	8f 90       	pop	r8
    3990:	7f 90       	pop	r7
    3992:	6f 90       	pop	r6
    3994:	5f 90       	pop	r5
    3996:	4f 90       	pop	r4
    3998:	08 95       	ret

0000399a <eeprom_write>:

void eeprom_write(void){
    399a:	0f 93       	push	r16
    399c:	1f 93       	push	r17
    399e:	cf 93       	push	r28
    39a0:	df 93       	push	r29
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	a1 97       	sbiw	r28, 0x21	; 33
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	de bf       	out	0x3e, r29	; 62
	uint16_t a = (uint16_t) ((int16_t) alt); // creates an unsigned int of the altitude
    39ac:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <alt>
    39b0:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <alt+0x1>
    39b4:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <alt+0x2>
    39b8:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <alt+0x3>
    39bc:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    39c0:	16 2f       	mov	r17, r22
    39c2:	07 2f       	mov	r16, r23
	uint16_t v = (uint16_t) ((int16_t) velocity);
    39c4:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <velocity>
    39c8:	70 91 34 21 	lds	r23, 0x2134	; 0x802134 <velocity+0x1>
    39cc:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <velocity+0x2>
    39d0:	90 91 36 21 	lds	r25, 0x2136	; 0x802136 <velocity+0x3>
    39d4:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fixsfsi>
    39d8:	26 2f       	mov	r18, r22
    39da:	37 2f       	mov	r19, r23

	check_write = (check_write + 1) % 100;
    39dc:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <check_write>
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	01 96       	adiw	r24, 0x01	; 1
    39e4:	64 e6       	ldi	r22, 0x64	; 100
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	0e 94 d7 29 	call	0x53ae	; 0x53ae <__divmodhi4>
    39ec:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <check_write>
	
	// saves data and addresses in array
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
    39f0:	a0 91 47 21 	lds	r26, 0x2147	; 0x802147 <packets>
    39f4:	b0 91 48 21 	lds	r27, 0x2148	; 0x802148 <packets+0x1>
    39f8:	e0 91 47 21 	lds	r30, 0x2147	; 0x802147 <packets>
    39fc:	f0 91 48 21 	lds	r31, 0x2148	; 0x802148 <packets+0x1>
    3a00:	60 91 4b 21 	lds	r22, 0x214B	; 0x80214b <timer>
    3a04:	70 91 4c 21 	lds	r23, 0x214C	; 0x80214c <timer+0x1>
    3a08:	40 91 4b 21 	lds	r20, 0x214B	; 0x80214b <timer>
    3a0c:	50 91 4c 21 	lds	r21, 0x214C	; 0x80214c <timer+0x1>
    3a10:	90 91 67 21 	lds	r25, 0x2167	; 0x802167 <state>
    3a14:	09 83       	std	Y+1, r16	; 0x01
    3a16:	1a 83       	std	Y+2, r17	; 0x02
    3a18:	bb 83       	std	Y+3, r27	; 0x03
    3a1a:	ec 83       	std	Y+4, r30	; 0x04
    3a1c:	7d 83       	std	Y+5, r23	; 0x05
    3a1e:	4e 83       	std	Y+6, r20	; 0x06
    3a20:	3f 83       	std	Y+7, r19	; 0x07
    3a22:	28 87       	std	Y+8, r18	; 0x08
    3a24:	89 87       	std	Y+9, r24	; 0x09
    3a26:	8a 87       	std	Y+10, r24	; 0x0a
    3a28:	9b 87       	std	Y+11, r25	; 0x0b
    3a2a:	8b e0       	ldi	r24, 0x0B	; 11
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	31 96       	adiw	r30, 0x01	; 1
    3a30:	de 01       	movw	r26, r28
    3a32:	1c 96       	adiw	r26, 0x0c	; 12
    3a34:	01 90       	ld	r0, Z+
    3a36:	0d 92       	st	X+, r0
    3a38:	8a 95       	dec	r24
    3a3a:	e1 f7       	brne	.-8      	; 0x3a34 <eeprom_write+0x9a>
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};
    3a3c:	8b e0       	ldi	r24, 0x0B	; 11
    3a3e:	e8 e3       	ldi	r30, 0x38	; 56
    3a40:	f0 e2       	ldi	r31, 0x20	; 32
    3a42:	de 01       	movw	r26, r28
    3a44:	57 96       	adiw	r26, 0x17	; 23
    3a46:	01 90       	ld	r0, Z+
    3a48:	0d 92       	st	X+, r0
    3a4a:	8a 95       	dec	r24
    3a4c:	e1 f7       	brne	.-8      	; 0x3a46 <eeprom_write+0xac>

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
    3a4e:	83 e3       	ldi	r24, 0x33	; 51
    3a50:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < 10; i++){
		NVM.ADDR0 = addresses[i];
    3a58:	e0 ec       	ldi	r30, 0xC0	; 192
    3a5a:	f1 e0       	ldi	r31, 0x01	; 1
    3a5c:	a7 e1       	ldi	r26, 0x17	; 23
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	ac 0f       	add	r26, r28
    3a62:	bd 1f       	adc	r27, r29
    3a64:	a8 0f       	add	r26, r24
    3a66:	b9 1f       	adc	r27, r25
    3a68:	2c 91       	ld	r18, X
    3a6a:	20 83       	st	Z, r18
		NVM.DATA0 = data[i];
    3a6c:	ac e0       	ldi	r26, 0x0C	; 12
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	ac 0f       	add	r26, r28
    3a72:	bd 1f       	adc	r27, r29
    3a74:	a8 0f       	add	r26, r24
    3a76:	b9 1f       	adc	r27, r25
    3a78:	2c 91       	ld	r18, X
    3a7a:	24 83       	std	Z+4, r18	; 0x04
    3a7c:	01 96       	adiw	r24, 0x01	; 1
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 10; i++){
    3a7e:	8a 30       	cpi	r24, 0x0A	; 10
    3a80:	91 05       	cpc	r25, r1
    3a82:	61 f7       	brne	.-40     	; 0x3a5c <eeprom_write+0xc2>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    3a84:	e0 ec       	ldi	r30, 0xC0	; 192
    3a86:	f1 e0       	ldi	r31, 0x01	; 1
    3a88:	85 e3       	ldi	r24, 0x35	; 53
    3a8a:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    3a8c:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    3a8e:	80 e1       	ldi	r24, 0x10	; 16
    3a90:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    3a92:	88 ed       	ldi	r24, 0xD8	; 216
    3a94:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3a9a:	87 85       	ldd	r24, Z+15	; 0x0f
    3a9c:	88 23       	and	r24, r24
    3a9e:	ec f3       	brlt	.-6      	; 0x3a9a <eeprom_write+0x100>
}
    3aa0:	a1 96       	adiw	r28, 0x21	; 33
    3aa2:	cd bf       	out	0x3d, r28	; 61
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	df 91       	pop	r29
    3aa8:	cf 91       	pop	r28
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	08 95       	ret

00003ab0 <time_update>:

void time_update(void){
	//packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);
	eeprom_write();
    3ab0:	74 df       	rcall	.-280    	; 0x399a <eeprom_write>

	time_flag = 0;
    3ab2:	10 92 65 21 	sts	0x2165, r1	; 0x802165 <time_flag>
    3ab6:	08 95       	ret

00003ab8 <eeprom_read>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

uint8_t	eeprom_read(uint16_t address){
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
	NVM.CMD = READ_EEPROM;
    3abc:	c0 ec       	ldi	r28, 0xC0	; 192
    3abe:	d1 e0       	ldi	r29, 0x01	; 1
    3ac0:	26 e0       	ldi	r18, 0x06	; 6
    3ac2:	2a 87       	std	Y+10, r18	; 0x0a
	NVM.ADDR0 = address & 0xFF;
    3ac4:	88 83       	st	Y, r24
	NVM.ADDR1 = address >> 8;
    3ac6:	99 83       	std	Y+1, r25	; 0x01
	CCP = CCP_IOREG_MODE;
    3ac8:	88 ed       	ldi	r24, 0xD8	; 216
    3aca:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	8b 87       	std	Y+11, r24	; 0x0b
	delay_ms(1);
    3ad0:	66 ed       	ldi	r22, 0xD6	; 214
    3ad2:	74 e1       	ldi	r23, 0x14	; 20
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	0e 94 1e 14 	call	0x283c	; 0x283c <__portable_avr_delay_cycles>
	uint8_t byte = NVM.DATA0;
    3adc:	8c 81       	ldd	r24, Y+4	; 0x04
	return byte;
}
    3ade:	df 91       	pop	r29
    3ae0:	cf 91       	pop	r28
    3ae2:	08 95       	ret

00003ae4 <system_init>:
	}
}


// Sensor functions
void system_init(void){
    3ae4:	2f 92       	push	r2
    3ae6:	3f 92       	push	r3
    3ae8:	4f 92       	push	r4
    3aea:	5f 92       	push	r5
    3aec:	6f 92       	push	r6
    3aee:	7f 92       	push	r7
    3af0:	8f 92       	push	r8
    3af2:	9f 92       	push	r9
    3af4:	af 92       	push	r10
    3af6:	bf 92       	push	r11
    3af8:	cf 92       	push	r12
    3afa:	df 92       	push	r13
    3afc:	ef 92       	push	r14
    3afe:	ff 92       	push	r15
    3b00:	0f 93       	push	r16
    3b02:	1f 93       	push	r17
    3b04:	cf 93       	push	r28
    3b06:	df 93       	push	r29
    3b08:	cd b7       	in	r28, 0x3d	; 61
    3b0a:	de b7       	in	r29, 0x3e	; 62
    3b0c:	27 97       	sbiw	r28, 0x07	; 7
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	de bf       	out	0x3e, r29	; 62
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    3b12:	0e 94 cd 13 	call	0x279a	; 0x279a <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    3b16:	6b ea       	ldi	r22, 0xAB	; 171
    3b18:	79 e2       	ldi	r23, 0x29	; 41
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	0e 94 1e 14 	call	0x283c	; 0x283c <__portable_avr_delay_cycles>
	sei();
    3b22:	78 94       	sei

	// Initialization of pins
	PORTC.DIR = 0xBC; // makes Port C have pins, 7, 5, 4, 3, and 2 be output (0b10111100)
    3b24:	8c eb       	ldi	r24, 0xBC	; 188
    3b26:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // enables lo level interrupts
    3b2a:	87 e0       	ldi	r24, 0x07	; 7
    3b2c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// Driver Initialization
	//cam_init();
	data_terminal_init();
    3b30:	0e 94 81 12 	call	0x2502	; 0x2502 <data_terminal_init>
	delay_ms(500);
    3b34:	6b ea       	ldi	r22, 0xAB	; 171
    3b36:	70 eb       	ldi	r23, 0xB0	; 176
    3b38:	88 e2       	ldi	r24, 0x28	; 40
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	0e 94 1e 14 	call	0x283c	; 0x283c <__portable_avr_delay_cycles>
	//delay_ms(100);

	//hall_sensor_init();
	//thermistor_init();
	//voltage_init();
	spi_init();
    3b40:	0e 94 50 12 	call	0x24a0	; 0x24a0 <spi_init>
	pressure_init();
    3b44:	0e 94 29 14 	call	0x2852	; 0x2852 <pressure_init>
	//bno_init();
	//cam_switch();
	clock_init();
    3b48:	7f db       	rcall	.-2306   	; 0x3248 <clock_init>
	//release_servo_init();
	//servo_timer_init();

	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
    3b4a:	82 e0       	ldi	r24, 0x02	; 2
    3b4c:	90 e1       	ldi	r25, 0x10	; 16
    3b4e:	b4 df       	rcall	.-152    	; 0x3ab8 <eeprom_read>
    3b50:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);
    3b52:	8f e1       	ldi	r24, 0x1F	; 31
    3b54:	90 e1       	ldi	r25, 0x10	; 16
    3b56:	b0 df       	rcall	.-160    	; 0x3ab8 <eeprom_read>
    3b58:	8a 83       	std	Y+2, r24	; 0x02

	if((b1 == b2) && (b1 != 0xFF)){
    3b5a:	99 81       	ldd	r25, Y+1	; 0x01
    3b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5e:	98 13       	cpse	r25, r24
    3b60:	d3 c1       	rjmp	.+934    	; 0x3f08 <system_init+0x424>
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	8f 3f       	cpi	r24, 0xFF	; 255
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <system_init+0x86>
		//printf("Reading EEPROM\n");
		uint64_t p =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    3b68:	cf c1       	rjmp	.+926    	; 0x3f08 <system_init+0x424>
    3b6a:	80 e1       	ldi	r24, 0x10	; 16
    3b6c:	90 e1       	ldi	r25, 0x10	; 16
    3b6e:	a4 df       	rcall	.-184    	; 0x3ab8 <eeprom_read>
    3b70:	18 2f       	mov	r17, r24
    3b72:	8f e0       	ldi	r24, 0x0F	; 15
    3b74:	90 e1       	ldi	r25, 0x10	; 16
    3b76:	a0 df       	rcall	.-192    	; 0x3ab8 <eeprom_read>
    3b78:	b8 2f       	mov	r27, r24
    3b7a:	21 2f       	mov	r18, r17
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	40 e0       	ldi	r20, 0x00	; 0
    3b80:	50 e0       	ldi	r21, 0x00	; 0
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	70 e0       	ldi	r23, 0x00	; 0
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	08 e3       	ldi	r16, 0x38	; 56
    3b8c:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3b90:	12 2f       	mov	r17, r18
    3b92:	c3 2e       	mov	r12, r19
    3b94:	f4 2e       	mov	r15, r20
    3b96:	a5 2f       	mov	r26, r21
    3b98:	f6 2f       	mov	r31, r22
    3b9a:	e7 2f       	mov	r30, r23
    3b9c:	d8 2e       	mov	r13, r24
    3b9e:	e9 2e       	mov	r14, r25
    3ba0:	2b 2f       	mov	r18, r27
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	50 e0       	ldi	r21, 0x00	; 0
    3ba8:	60 e0       	ldi	r22, 0x00	; 0
    3baa:	70 e0       	ldi	r23, 0x00	; 0
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	00 e3       	ldi	r16, 0x30	; 48
    3bb2:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3bb6:	12 2b       	or	r17, r18
    3bb8:	c3 2a       	or	r12, r19
    3bba:	f4 2a       	or	r15, r20
    3bbc:	9a 2e       	mov	r9, r26
    3bbe:	95 2a       	or	r9, r21
    3bc0:	af 2e       	mov	r10, r31
    3bc2:	a6 2a       	or	r10, r22
    3bc4:	be 2e       	mov	r11, r30
    3bc6:	b7 2a       	or	r11, r23
    3bc8:	d8 2a       	or	r13, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    3bca:	e9 2a       	or	r14, r25
    3bcc:	8e e0       	ldi	r24, 0x0E	; 14
    3bce:	90 e1       	ldi	r25, 0x10	; 16
    3bd0:	73 df       	rcall	.-282    	; 0x3ab8 <eeprom_read>
    3bd2:	08 2f       	mov	r16, r24
    3bd4:	8d e0       	ldi	r24, 0x0D	; 13
    3bd6:	90 e1       	ldi	r25, 0x10	; 16
    3bd8:	6f df       	rcall	.-290    	; 0x3ab8 <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    3bda:	28 2e       	mov	r2, r24
    3bdc:	8c e0       	ldi	r24, 0x0C	; 12
    3bde:	90 e1       	ldi	r25, 0x10	; 16
    3be0:	6b df       	rcall	.-298    	; 0x3ab8 <eeprom_read>
    3be2:	38 2e       	mov	r3, r24
    3be4:	8b e0       	ldi	r24, 0x0B	; 11
    3be6:	90 e1       	ldi	r25, 0x10	; 16
    3be8:	67 df       	rcall	.-306    	; 0x3ab8 <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0));
    3bea:	48 2e       	mov	r4, r24
    3bec:	8a e0       	ldi	r24, 0x0A	; 10
    3bee:	90 e1       	ldi	r25, 0x10	; 16
    3bf0:	63 df       	rcall	.-314    	; 0x3ab8 <eeprom_read>
    3bf2:	58 2e       	mov	r5, r24
    3bf4:	89 e0       	ldi	r24, 0x09	; 9
    3bf6:	90 e1       	ldi	r25, 0x10	; 16
    3bf8:	5f df       	rcall	.-322    	; 0x3ab8 <eeprom_read>
    3bfa:	68 2e       	mov	r6, r24
    3bfc:	20 2f       	mov	r18, r16
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	40 e0       	ldi	r20, 0x00	; 0
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	60 e0       	ldi	r22, 0x00	; 0
    3c06:	70 e0       	ldi	r23, 0x00	; 0
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	08 e2       	ldi	r16, 0x28	; 40
    3c0e:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3c12:	16 29       	or	r17, r6
    3c14:	12 2b       	or	r17, r18
    3c16:	c3 2a       	or	r12, r19
    3c18:	f4 2a       	or	r15, r20
    3c1a:	a5 2f       	mov	r26, r21
    3c1c:	a9 29       	or	r26, r9
    3c1e:	f6 2f       	mov	r31, r22
    3c20:	fa 29       	or	r31, r10
    3c22:	e7 2f       	mov	r30, r23
    3c24:	eb 29       	or	r30, r11
    3c26:	d8 2a       	or	r13, r24
    3c28:	e9 2a       	or	r14, r25
    3c2a:	22 2d       	mov	r18, r2
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	40 e0       	ldi	r20, 0x00	; 0
    3c30:	50 e0       	ldi	r21, 0x00	; 0
    3c32:	60 e0       	ldi	r22, 0x00	; 0
    3c34:	70 e0       	ldi	r23, 0x00	; 0
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	00 e2       	ldi	r16, 0x20	; 32
    3c3c:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3c40:	12 2b       	or	r17, r18
    3c42:	c3 2a       	or	r12, r19
    3c44:	f4 2a       	or	r15, r20
    3c46:	a5 2b       	or	r26, r21
    3c48:	f6 2b       	or	r31, r22
    3c4a:	e7 2b       	or	r30, r23
    3c4c:	d8 2a       	or	r13, r24
    3c4e:	e9 2a       	or	r14, r25
    3c50:	23 2d       	mov	r18, r3
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e0       	ldi	r20, 0x00	; 0
    3c56:	50 e0       	ldi	r21, 0x00	; 0
    3c58:	60 e0       	ldi	r22, 0x00	; 0
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	08 e1       	ldi	r16, 0x18	; 24
    3c62:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3c66:	12 2b       	or	r17, r18
    3c68:	c3 2a       	or	r12, r19
    3c6a:	f4 2a       	or	r15, r20
    3c6c:	a5 2b       	or	r26, r21
    3c6e:	f6 2b       	or	r31, r22
    3c70:	e7 2b       	or	r30, r23
    3c72:	d8 2a       	or	r13, r24
    3c74:	e9 2a       	or	r14, r25
    3c76:	24 2d       	mov	r18, r4
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	40 e0       	ldi	r20, 0x00	; 0
    3c7c:	50 e0       	ldi	r21, 0x00	; 0
    3c7e:	60 e0       	ldi	r22, 0x00	; 0
    3c80:	70 e0       	ldi	r23, 0x00	; 0
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	00 e1       	ldi	r16, 0x10	; 16
    3c88:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3c8c:	12 2b       	or	r17, r18
    3c8e:	c3 2a       	or	r12, r19
    3c90:	f4 2a       	or	r15, r20
    3c92:	a5 2b       	or	r26, r21
    3c94:	f6 2b       	or	r31, r22
    3c96:	e7 2b       	or	r30, r23
    3c98:	d8 2a       	or	r13, r24
    3c9a:	e9 2a       	or	r14, r25
    3c9c:	25 2d       	mov	r18, r5
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	40 e0       	ldi	r20, 0x00	; 0
    3ca2:	50 e0       	ldi	r21, 0x00	; 0
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	08 e0       	ldi	r16, 0x08	; 8
    3cae:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3cb2:	61 2e       	mov	r6, r17
    3cb4:	62 2a       	or	r6, r18
    3cb6:	7c 2c       	mov	r7, r12
    3cb8:	73 2a       	or	r7, r19
    3cba:	8f 2c       	mov	r8, r15
    3cbc:	84 2a       	or	r8, r20
    3cbe:	9a 2e       	mov	r9, r26
    3cc0:	95 2a       	or	r9, r21
    3cc2:	af 2e       	mov	r10, r31
    3cc4:	a6 2a       	or	r10, r22
    3cc6:	be 2e       	mov	r11, r30
    3cc8:	b7 2a       	or	r11, r23
    3cca:	d8 2a       	or	r13, r24
		uint64_t t =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    3ccc:	e9 2a       	or	r14, r25
    3cce:	89 e1       	ldi	r24, 0x19	; 25
    3cd0:	90 e1       	ldi	r25, 0x10	; 16
    3cd2:	f2 de       	rcall	.-540    	; 0x3ab8 <eeprom_read>
    3cd4:	18 2f       	mov	r17, r24
    3cd6:	88 e1       	ldi	r24, 0x18	; 24
    3cd8:	90 e1       	ldi	r25, 0x10	; 16
    3cda:	ee de       	rcall	.-548    	; 0x3ab8 <eeprom_read>
    3cdc:	48 2e       	mov	r4, r24
    3cde:	21 2f       	mov	r18, r17
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e0       	ldi	r20, 0x00	; 0
    3ce4:	50 e0       	ldi	r21, 0x00	; 0
    3ce6:	60 e0       	ldi	r22, 0x00	; 0
    3ce8:	70 e0       	ldi	r23, 0x00	; 0
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	08 e3       	ldi	r16, 0x38	; 56
    3cf0:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3cf4:	c2 2e       	mov	r12, r18
    3cf6:	53 2e       	mov	r5, r19
    3cf8:	b4 2f       	mov	r27, r20
    3cfa:	a5 2f       	mov	r26, r21
    3cfc:	f6 2f       	mov	r31, r22
    3cfe:	e7 2f       	mov	r30, r23
    3d00:	f8 2e       	mov	r15, r24
    3d02:	19 2f       	mov	r17, r25
    3d04:	24 2d       	mov	r18, r4
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	40 e0       	ldi	r20, 0x00	; 0
    3d0a:	50 e0       	ldi	r21, 0x00	; 0
    3d0c:	60 e0       	ldi	r22, 0x00	; 0
    3d0e:	70 e0       	ldi	r23, 0x00	; 0
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	00 e3       	ldi	r16, 0x30	; 48
    3d16:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3d1a:	c2 2a       	or	r12, r18
    3d1c:	53 2a       	or	r5, r19
    3d1e:	5f 82       	std	Y+7, r5	; 0x07
    3d20:	2b 2e       	mov	r2, r27
    3d22:	24 2a       	or	r2, r20
    3d24:	3a 2e       	mov	r3, r26
    3d26:	35 2a       	or	r3, r21
    3d28:	4f 2e       	mov	r4, r31
    3d2a:	46 2a       	or	r4, r22
    3d2c:	5e 2e       	mov	r5, r30
    3d2e:	57 2a       	or	r5, r23
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    3d30:	f8 2a       	or	r15, r24
    3d32:	19 2b       	or	r17, r25
    3d34:	87 e1       	ldi	r24, 0x17	; 23
    3d36:	90 e1       	ldi	r25, 0x10	; 16
    3d38:	bf de       	rcall	.-642    	; 0x3ab8 <eeprom_read>
    3d3a:	08 2f       	mov	r16, r24
    3d3c:	86 e1       	ldi	r24, 0x16	; 22
    3d3e:	90 e1       	ldi	r25, 0x10	; 16
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    3d40:	bb de       	rcall	.-650    	; 0x3ab8 <eeprom_read>
    3d42:	8b 83       	std	Y+3, r24	; 0x03
    3d44:	85 e1       	ldi	r24, 0x15	; 21
    3d46:	90 e1       	ldi	r25, 0x10	; 16
    3d48:	b7 de       	rcall	.-658    	; 0x3ab8 <eeprom_read>
    3d4a:	8c 83       	std	Y+4, r24	; 0x04
    3d4c:	84 e1       	ldi	r24, 0x14	; 20
    3d4e:	90 e1       	ldi	r25, 0x10	; 16
    3d50:	b3 de       	rcall	.-666    	; 0x3ab8 <eeprom_read>
    3d52:	8d 83       	std	Y+5, r24	; 0x05
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8   | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0));
    3d54:	83 e1       	ldi	r24, 0x13	; 19
    3d56:	90 e1       	ldi	r25, 0x10	; 16
    3d58:	af de       	rcall	.-674    	; 0x3ab8 <eeprom_read>
    3d5a:	8e 83       	std	Y+6, r24	; 0x06
    3d5c:	82 e1       	ldi	r24, 0x12	; 18
    3d5e:	90 e1       	ldi	r25, 0x10	; 16
    3d60:	ab de       	rcall	.-682    	; 0x3ab8 <eeprom_read>
    3d62:	e8 2f       	mov	r30, r24
    3d64:	a4 e2       	ldi	r26, 0x24	; 36
    3d66:	b0 e2       	ldi	r27, 0x20	; 32
		memcpy(&ground_p, &p, 8);
    3d68:	6c 92       	st	X, r6
    3d6a:	11 96       	adiw	r26, 0x01	; 1
    3d6c:	7c 92       	st	X, r7
    3d6e:	11 97       	sbiw	r26, 0x01	; 1
    3d70:	12 96       	adiw	r26, 0x02	; 2
    3d72:	8c 92       	st	X, r8
    3d74:	12 97       	sbiw	r26, 0x02	; 2
    3d76:	13 96       	adiw	r26, 0x03	; 3
    3d78:	9c 92       	st	X, r9
    3d7a:	13 97       	sbiw	r26, 0x03	; 3
    3d7c:	14 96       	adiw	r26, 0x04	; 4
    3d7e:	ac 92       	st	X, r10
    3d80:	14 97       	sbiw	r26, 0x04	; 4
    3d82:	15 96       	adiw	r26, 0x05	; 5
    3d84:	bc 92       	st	X, r11
    3d86:	15 97       	sbiw	r26, 0x05	; 5
    3d88:	16 96       	adiw	r26, 0x06	; 6
    3d8a:	dc 92       	st	X, r13
    3d8c:	16 97       	sbiw	r26, 0x06	; 6
    3d8e:	17 96       	adiw	r26, 0x07	; 7
    3d90:	ec 92       	st	X, r14
    3d92:	a0 e2       	ldi	r26, 0x20	; 32
    3d94:	b0 e2       	ldi	r27, 0x20	; 32
		memcpy(&ground_t, &t, 8);
    3d96:	20 2f       	mov	r18, r16
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	70 e0       	ldi	r23, 0x00	; 0
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	08 e2       	ldi	r16, 0x28	; 40
    3da8:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3dac:	ce 2a       	or	r12, r30
    3dae:	c2 2a       	or	r12, r18
    3db0:	bf 80       	ldd	r11, Y+7	; 0x07
    3db2:	b3 2a       	or	r11, r19
    3db4:	d4 2e       	mov	r13, r20
    3db6:	d2 28       	or	r13, r2
    3db8:	e5 2e       	mov	r14, r21
    3dba:	e3 28       	or	r14, r3
    3dbc:	f6 2f       	mov	r31, r22
    3dbe:	f4 29       	or	r31, r4
    3dc0:	e7 2f       	mov	r30, r23
    3dc2:	e5 29       	or	r30, r5
    3dc4:	f8 2a       	or	r15, r24
    3dc6:	19 2b       	or	r17, r25
    3dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	40 e0       	ldi	r20, 0x00	; 0
    3dce:	50 e0       	ldi	r21, 0x00	; 0
    3dd0:	60 e0       	ldi	r22, 0x00	; 0
    3dd2:	70 e0       	ldi	r23, 0x00	; 0
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	00 e2       	ldi	r16, 0x20	; 32
    3dda:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3dde:	c2 2a       	or	r12, r18
    3de0:	b3 2a       	or	r11, r19
    3de2:	d4 2a       	or	r13, r20
    3de4:	e5 2a       	or	r14, r21
    3de6:	f6 2b       	or	r31, r22
    3de8:	e7 2b       	or	r30, r23
    3dea:	f8 2a       	or	r15, r24
    3dec:	19 2b       	or	r17, r25
    3dee:	2c 81       	ldd	r18, Y+4	; 0x04
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	40 e0       	ldi	r20, 0x00	; 0
    3df4:	50 e0       	ldi	r21, 0x00	; 0
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	70 e0       	ldi	r23, 0x00	; 0
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	08 e1       	ldi	r16, 0x18	; 24
    3e00:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3e04:	c2 2a       	or	r12, r18
    3e06:	b3 2a       	or	r11, r19
    3e08:	d4 2a       	or	r13, r20
    3e0a:	e5 2a       	or	r14, r21
    3e0c:	f6 2b       	or	r31, r22
    3e0e:	e7 2b       	or	r30, r23
    3e10:	f8 2a       	or	r15, r24
    3e12:	19 2b       	or	r17, r25
    3e14:	2d 81       	ldd	r18, Y+5	; 0x05
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	40 e0       	ldi	r20, 0x00	; 0
    3e1a:	50 e0       	ldi	r21, 0x00	; 0
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	70 e0       	ldi	r23, 0x00	; 0
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	00 e1       	ldi	r16, 0x10	; 16
    3e26:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3e2a:	c2 2a       	or	r12, r18
    3e2c:	b3 2a       	or	r11, r19
    3e2e:	d4 2a       	or	r13, r20
    3e30:	e5 2a       	or	r14, r21
    3e32:	f6 2b       	or	r31, r22
    3e34:	e7 2b       	or	r30, r23
    3e36:	f8 2a       	or	r15, r24
    3e38:	19 2b       	or	r17, r25
    3e3a:	2e 81       	ldd	r18, Y+6	; 0x06
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	40 e0       	ldi	r20, 0x00	; 0
    3e40:	50 e0       	ldi	r21, 0x00	; 0
    3e42:	60 e0       	ldi	r22, 0x00	; 0
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	08 e0       	ldi	r16, 0x08	; 8
    3e4c:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    3e50:	2c 29       	or	r18, r12
    3e52:	2c 93       	st	X, r18
    3e54:	3b 29       	or	r19, r11
    3e56:	11 96       	adiw	r26, 0x01	; 1
    3e58:	3c 93       	st	X, r19
    3e5a:	11 97       	sbiw	r26, 0x01	; 1
    3e5c:	4d 29       	or	r20, r13
    3e5e:	12 96       	adiw	r26, 0x02	; 2
    3e60:	4c 93       	st	X, r20
    3e62:	12 97       	sbiw	r26, 0x02	; 2
    3e64:	5e 29       	or	r21, r14
    3e66:	13 96       	adiw	r26, 0x03	; 3
    3e68:	5c 93       	st	X, r21
    3e6a:	13 97       	sbiw	r26, 0x03	; 3
    3e6c:	6f 2b       	or	r22, r31
    3e6e:	14 96       	adiw	r26, 0x04	; 4
    3e70:	6c 93       	st	X, r22
    3e72:	14 97       	sbiw	r26, 0x04	; 4
    3e74:	7e 2b       	or	r23, r30
    3e76:	15 96       	adiw	r26, 0x05	; 5
    3e78:	7c 93       	st	X, r23
    3e7a:	15 97       	sbiw	r26, 0x05	; 5
    3e7c:	8f 29       	or	r24, r15
    3e7e:	16 96       	adiw	r26, 0x06	; 6
    3e80:	8c 93       	st	X, r24
    3e82:	16 97       	sbiw	r26, 0x06	; 6
    3e84:	91 2b       	or	r25, r17
    3e86:	17 96       	adiw	r26, 0x07	; 7
		
		alt = (double) ((int16_t) (eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE0)));
    3e88:	9c 93       	st	X, r25
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	90 e1       	ldi	r25, 0x10	; 16
    3e8e:	14 de       	rcall	.-984    	; 0x3ab8 <eeprom_read>
    3e90:	18 2f       	mov	r17, r24
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	90 e1       	ldi	r25, 0x10	; 16
    3e96:	10 de       	rcall	.-992    	; 0x3ab8 <eeprom_read>
    3e98:	61 2f       	mov	r22, r17
    3e9a:	70 e0       	ldi	r23, 0x00	; 0
    3e9c:	76 2f       	mov	r23, r22
    3e9e:	66 27       	eor	r22, r22
    3ea0:	68 2b       	or	r22, r24
    3ea2:	07 2e       	mov	r0, r23
    3ea4:	00 0c       	add	r0, r0
    3ea6:	88 0b       	sbc	r24, r24
    3ea8:	99 0b       	sbc	r25, r25
    3eaa:	e2 d7       	rcall	.+4036   	; 0x4e70 <__floatsisf>
    3eac:	60 93 3b 21 	sts	0x213B, r22	; 0x80213b <alt>
    3eb0:	70 93 3c 21 	sts	0x213C, r23	; 0x80213c <alt+0x1>
    3eb4:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <alt+0x2>
    3eb8:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <alt+0x3>
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
    3ebc:	87 e0       	ldi	r24, 0x07	; 7
    3ebe:	90 e1       	ldi	r25, 0x10	; 16
    3ec0:	fb dd       	rcall	.-1034   	; 0x3ab8 <eeprom_read>
    3ec2:	18 2f       	mov	r17, r24
    3ec4:	86 e0       	ldi	r24, 0x06	; 6
    3ec6:	90 e1       	ldi	r25, 0x10	; 16
    3ec8:	f7 dd       	rcall	.-1042   	; 0x3ab8 <eeprom_read>
    3eca:	21 2f       	mov	r18, r17
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	32 2f       	mov	r19, r18
    3ed0:	22 27       	eor	r18, r18
    3ed2:	28 2b       	or	r18, r24
    3ed4:	20 93 4b 21 	sts	0x214B, r18	; 0x80214b <timer>
    3ed8:	30 93 4c 21 	sts	0x214C, r19	; 0x80214c <timer+0x1>
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
    3edc:	84 e0       	ldi	r24, 0x04	; 4
    3ede:	90 e1       	ldi	r25, 0x10	; 16
    3ee0:	eb dd       	rcall	.-1066   	; 0x3ab8 <eeprom_read>
    3ee2:	18 2f       	mov	r17, r24
    3ee4:	83 e0       	ldi	r24, 0x03	; 3
    3ee6:	90 e1       	ldi	r25, 0x10	; 16
    3ee8:	e7 dd       	rcall	.-1074   	; 0x3ab8 <eeprom_read>
    3eea:	21 2f       	mov	r18, r17
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	32 2f       	mov	r19, r18
    3ef0:	22 27       	eor	r18, r18
    3ef2:	28 2b       	or	r18, r24
    3ef4:	20 93 47 21 	sts	0x2147, r18	; 0x802147 <packets>
    3ef8:	30 93 48 21 	sts	0x2148, r19	; 0x802148 <packets+0x1>
    3efc:	85 e0       	ldi	r24, 0x05	; 5
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
    3efe:	90 e1       	ldi	r25, 0x10	; 16
    3f00:	db dd       	rcall	.-1098   	; 0x3ab8 <eeprom_read>
    3f02:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <state>
    3f06:	19 c0       	rjmp	.+50     	; 0x3f3a <system_init+0x456>
	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);

	if((b1 == b2) && (b1 != 0xFF)){
    3f08:	0e 94 4f 14 	call	0x289e	; 0x289e <get_pressure>
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
		//printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
	}
	else{
		// Initialization of variables
		ground_p = get_pressure();
    3f0c:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <ground_p>
    3f10:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <ground_p+0x1>
    3f14:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <ground_p+0x2>
    3f18:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <ground_p+0x3>
    3f1c:	83 e3       	ldi	r24, 0x33	; 51
		ground_t = get_temperature();
    3f1e:	93 e1       	ldi	r25, 0x13	; 19
    3f20:	a5 e9       	ldi	r26, 0x95	; 149
    3f22:	b3 e4       	ldi	r27, 0x43	; 67
    3f24:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <ground_t>
    3f28:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <ground_t+0x1>
    3f2c:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <ground_t+0x2>
    3f30:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <ground_t+0x3>
    3f34:	10 92 67 21 	sts	0x2167, r1	; 0x802167 <state>
		state = 0;
    3f38:	00 dc       	rcall	.-2048   	; 0x373a <eeprom_write_const>
		eeprom_write_const();
    3f3a:	0e 94 89 17 	call	0x2f12	; 0x2f12 <state_check>
	}

	state_check();
    3f3e:	27 96       	adiw	r28, 0x07	; 7
    3f40:	cd bf       	out	0x3d, r28	; 61
}
    3f42:	de bf       	out	0x3e, r29	; 62
    3f44:	df 91       	pop	r29
    3f46:	cf 91       	pop	r28
    3f48:	1f 91       	pop	r17
    3f4a:	0f 91       	pop	r16
    3f4c:	ff 90       	pop	r15
    3f4e:	ef 90       	pop	r14
    3f50:	df 90       	pop	r13
    3f52:	cf 90       	pop	r12
    3f54:	bf 90       	pop	r11
    3f56:	af 90       	pop	r10
    3f58:	9f 90       	pop	r9
    3f5a:	8f 90       	pop	r8
    3f5c:	7f 90       	pop	r7
    3f5e:	6f 90       	pop	r6
    3f60:	5f 90       	pop	r5
    3f62:	4f 90       	pop	r4
    3f64:	3f 90       	pop	r3
    3f66:	2f 90       	pop	r2
    3f68:	08 95       	ret

00003f6a <eeprom_erase>:
    3f6a:	83 e3       	ldi	r24, 0x33	; 51
    3f6c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    3f70:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    3f72:	e0 ec       	ldi	r30, 0xC0	; 192
    3f74:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    3f76:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    3f78:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    3f7a:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    3f7c:	8f 5f       	subi	r24, 0xFF	; 255
    3f7e:	80 32       	cpi	r24, 0x20	; 32
    3f80:	d9 f7       	brne	.-10     	; 0x3f78 <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}

	NVM.CMD = ERASE_EEPROM;
    3f82:	e0 ec       	ldi	r30, 0xC0	; 192
    3f84:	f1 e0       	ldi	r31, 0x01	; 1
    3f86:	80 e3       	ldi	r24, 0x30	; 48
    3f88:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    3f8a:	88 ed       	ldi	r24, 0xD8	; 216
    3f8c:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3f92:	87 85       	ldd	r24, Z+15	; 0x0f
    3f94:	88 23       	and	r24, r24
    3f96:	ec f3       	brlt	.-6      	; 0x3f92 <eeprom_erase+0x28>
}
    3f98:	08 95       	ret

00003f9a <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    3f9a:	e7 df       	rcall	.-50     	; 0x3f6a <eeprom_erase>

	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    3f9c:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    3f9e:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    3fa0:	98 ed       	ldi	r25, 0xD8	; 216
    3fa2:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    3fa4:	91 e0       	ldi	r25, 0x01	; 1
    3fa6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    3faa:	8f bf       	out	0x3f, r24	; 63
    3fac:	08 95       	ret

00003fae <command>:
	ticks_per_sec++;
	printf("INTERRUPTED BITCH\n");
}

void command(uint8_t c){
	switch(c){
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	e1 56       	subi	r30, 0x61	; 97
    3fb4:	f1 09       	sbc	r31, r1
    3fb6:	e3 31       	cpi	r30, 0x13	; 19
    3fb8:	f1 05       	cpc	r31, r1
    3fba:	98 f4       	brcc	.+38     	; 0x3fe2 <command+0x34>
    3fbc:	88 27       	eor	r24, r24
    3fbe:	e2 50       	subi	r30, 0x02	; 2
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    3fc4:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__tablejump2__>
		case RESET:
			reset();
    3fc8:	e8 cf       	rjmp	.-48     	; 0x3f9a <reset>
			break;
		case CALIBRATE:
			calibrate();
    3fca:	08 95       	ret
			break;
    3fcc:	72 c9       	rjmp	.-3356   	; 0x32b2 <calibrate>
		case CALIBRATE_ALTITUDE:
			cali_alt();
    3fce:	08 95       	ret
			break;
		case CALIBRATE_ANGLE:
			cali_ang();
    3fd0:	49 c9       	rjmp	.-3438   	; 0x3264 <cali_alt>
			break;
    3fd2:	08 95       	ret
		case SERVO_RELEASE:
			servo_release();
    3fd4:	64 c9       	rjmp	.-3384   	; 0x329e <cali_ang>
			break;
    3fd6:	08 95       	ret
		case SERVO_CLOSE:
			servo_close();
    3fd8:	6f c9       	rjmp	.-3362   	; 0x32b8 <servo_release>
    3fda:	08 95       	ret
			break;
    3fdc:	79 c9       	rjmp	.-3342   	; 0x32d0 <servo_close>
		case PACKET:
			packet();
    3fde:	08 95       	ret
    3fe0:	82 c9       	rjmp	.-3324   	; 0x32e6 <packet>
    3fe2:	08 95       	ret

00003fe4 <main>:

char* format = "5343,%i.%i,%i,%i,%li,%i.%i,%i.%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n";


////////////////////////////// Functions ///////////////////////////////
int main(void){
    3fe4:	cf 93       	push	r28
    3fe6:	df 93       	push	r29
    3fe8:	cd b7       	in	r28, 0x3d	; 61
    3fea:	de b7       	in	r29, 0x3e	; 62
    3fec:	c8 56       	subi	r28, 0x68	; 104
    3fee:	d1 09       	sbc	r29, r1
    3ff0:	cd bf       	out	0x3d, r28	; 61
    3ff2:	de bf       	out	0x3e, r29	; 62
	system_init();
    3ff4:	77 dd       	rcall	.-1298   	; 0x3ae4 <system_init>
	//delay_ms(100);

	PORTD.DIR |= PIN3_bm;
    3ff6:	e0 e6       	ldi	r30, 0x60	; 96
    3ff8:	f6 e0       	ldi	r31, 0x06	; 6
    3ffa:	80 81       	ld	r24, Z
    3ffc:	88 60       	ori	r24, 0x08	; 8
    3ffe:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    4000:	84 81       	ldd	r24, Z+4	; 0x04
    4002:	88 60       	ori	r24, 0x08	; 8
    4004:	84 83       	std	Z+4, r24	; 0x04

	//printf("Initialized\n");
	//buzzer_init();

	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    4006:	14 e1       	ldi	r17, 0x14	; 20
    4008:	be 01       	movw	r22, r28
    400a:	6f 5f       	subi	r22, 0xFF	; 255
    400c:	7f 4f       	sbci	r23, 0xFF	; 255
    400e:	fb 01       	movw	r30, r22
    4010:	81 2f       	mov	r24, r17
    4012:	11 92       	st	Z+, r1
    4014:	8a 95       	dec	r24
    4016:	e9 f7       	brne	.-6      	; 0x4012 <__stack+0x13>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    4018:	4a e0       	ldi	r20, 0x0A	; 10
    401a:	50 e0       	ldi	r21, 0x00	; 0
    401c:	ce 01       	movw	r24, r28
    401e:	45 96       	adiw	r24, 0x15	; 21
    4020:	0e 94 06 13 	call	0x260c	; 0x260c <rb16_init>

	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    4024:	be 01       	movw	r22, r28
    4026:	63 5e       	subi	r22, 0xE3	; 227
    4028:	7f 4f       	sbci	r23, 0xFF	; 255
    402a:	88 e2       	ldi	r24, 0x28	; 40
    402c:	fb 01       	movw	r30, r22
    402e:	11 92       	st	Z+, r1
    4030:	8a 95       	dec	r24
    4032:	e9 f7       	brne	.-6      	; 0x402e <__stack+0x2f>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    4034:	4a e0       	ldi	r20, 0x0A	; 10
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	ce 01       	movw	r24, r28
    403a:	8b 5b       	subi	r24, 0xBB	; 187
    403c:	9f 4f       	sbci	r25, 0xFF	; 255
    403e:	0e 94 8e 13 	call	0x271c	; 0x271c <rb32_init>

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    4042:	be 01       	movw	r22, r28
    4044:	63 5b       	subi	r22, 0xB3	; 179
    4046:	7f 4f       	sbci	r23, 0xFF	; 255
    4048:	fb 01       	movw	r30, r22
    404a:	11 92       	st	Z+, r1
    404c:	1a 95       	dec	r17
    404e:	e9 f7       	brne	.-6      	; 0x404a <__stack+0x4b>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    4050:	4a e0       	ldi	r20, 0x0A	; 10
    4052:	50 e0       	ldi	r21, 0x00	; 0
    4054:	ce 01       	movw	r24, r28
    4056:	8f 59       	subi	r24, 0x9F	; 159
    4058:	9f 4f       	sbci	r25, 0xFF	; 255
    405a:	0e 94 06 13 	call	0x260c	; 0x260c <rb16_init>

	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    405e:	00 e0       	ldi	r16, 0x00	; 0

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	uint8_t cam_initialized = 0;
    4060:	10 e0       	ldi	r17, 0x00	; 0
	//printf("BEFORE LOOP\n");

	while(1){
		//printf("In Loop\n");
		// Check Sensors
		data_collect(&altitudes,&pressures);
    4062:	be 01       	movw	r22, r28
    4064:	6b 5b       	subi	r22, 0xBB	; 187
    4066:	7f 4f       	sbci	r23, 0xFF	; 255
    4068:	ce 01       	movw	r24, r28
    406a:	45 96       	adiw	r24, 0x15	; 21
    406c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <data_collect>

		state_check();
    4070:	0e 94 89 17 	call	0x2f12	; 0x2f12 <state_check>

		// IMU Check
		//imu_read();

		//Gives each flight state their unique tasks
		switch(state){
    4074:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <state>
    4078:	81 30       	cpi	r24, 0x01	; 1
    407a:	31 f0       	breq	.+12     	; 0x4088 <__stack+0x89>
    407c:	a8 f1       	brcs	.+106    	; 0x40e8 <__stack+0xe9>
    407e:	82 30       	cpi	r24, 0x02	; 2
    4080:	39 f0       	breq	.+14     	; 0x4090 <__stack+0x91>
    4082:	83 30       	cpi	r24, 0x03	; 3
    4084:	59 f1       	breq	.+86     	; 0x40dc <__stack+0xdd>
    4086:	2e c0       	rjmp	.+92     	; 0x40e4 <__stack+0xe5>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    4088:	11 11       	cpse	r17, r1
    408a:	2e c0       	rjmp	.+92     	; 0x40e8 <__stack+0xe9>
					cam_initialized = 1;
    408c:	11 e0       	ldi	r17, 0x01	; 1
    408e:	2c c0       	rjmp	.+88     	; 0x40e8 <__stack+0xe9>
					//cam_switch();
				}
				break;
			case 2:
				if(!cam_initialized){
    4090:	11 11       	cpse	r17, r1
    4092:	01 c0       	rjmp	.+2      	; 0x4096 <__stack+0x97>
					cam_initialized = 1;
    4094:	11 e0       	ldi	r17, 0x01	; 1
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
    4096:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <alt>
    409a:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <alt+0x1>
    409e:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <alt+0x2>
    40a2:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <alt+0x3>
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	41 ee       	ldi	r20, 0xE1	; 225
    40ac:	53 e4       	ldi	r21, 0x43	; 67
    40ae:	dc d5       	rcall	.+3000   	; 0x4c68 <__subsf3>
    40b0:	ac d6       	rcall	.+3416   	; 0x4e0a <__fixsfsi>
    40b2:	9b 01       	movw	r18, r22
    40b4:	77 23       	and	r23, r23
    40b6:	24 f4       	brge	.+8      	; 0x40c0 <__stack+0xc1>
    40b8:	22 27       	eor	r18, r18
    40ba:	33 27       	eor	r19, r19
    40bc:	26 1b       	sub	r18, r22
    40be:	37 0b       	sbc	r19, r23
    40c0:	2a 30       	cpi	r18, 0x0A	; 10
    40c2:	31 05       	cpc	r19, r1
	//printf("HALL SENSOR INITIALIZED\n");

}

void release(void){
	servo_release();
    40c4:	14 f4       	brge	.+4      	; 0x40ca <__stack+0xcb>
    40c6:	f8 d8       	rcall	.-3600   	; 0x32b8 <servo_release>
    40c8:	0f c0       	rjmp	.+30     	; 0x40e8 <__stack+0xe9>
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
					release();				// Releases the payload
					//hall_sensor_init();		// Starts hall effect sensor to read rpm
				}
				else if(released){
    40ca:	80 91 66 21 	lds	r24, 0x2166	; 0x802166 <released>
    40ce:	88 23       	and	r24, r24
					servo_pid(&directions);	// Updates the PID
    40d0:	59 f0       	breq	.+22     	; 0x40e8 <__stack+0xe9>
    40d2:	ce 01       	movw	r24, r28
    40d4:	8f 59       	subi	r24, 0x9F	; 159
    40d6:	9f 4f       	sbci	r25, 0xFF	; 255
    40d8:	24 d8       	rcall	.-4024   	; 0x3122 <servo_pid>
    40da:	06 c0       	rjmp	.+12     	; 0x40e8 <__stack+0xe9>
				}
				break;
			case 3:
				if(!buzzer_initialized){
    40dc:	01 11       	cpse	r16, r1
    40de:	04 c0       	rjmp	.+8      	; 0x40e8 <__stack+0xe9>
					//buzzer_init();
					buzzer_initialized = 1;
    40e0:	01 e0       	ldi	r16, 0x01	; 1
    40e2:	02 c0       	rjmp	.+4      	; 0x40e8 <__stack+0xe9>
				}
				break;
			default:
				state_check();
    40e4:	0e 94 89 17 	call	0x2f12	; 0x2f12 <state_check>
				break;
		}

		if(time_flag){
    40e8:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <time_flag>
    40ec:	88 23       	and	r24, r24
			//calc_rpm();
			time_update();
    40ee:	19 f0       	breq	.+6      	; 0x40f6 <__stack+0xf7>
    40f0:	df dc       	rcall	.-1602   	; 0x3ab0 <time_update>
			time_flag = 0;
    40f2:	10 92 65 21 	sts	0x2165, r1	; 0x802165 <time_flag>
		}
		if(xbee_flag){
    40f6:	80 91 64 21 	lds	r24, 0x2164	; 0x802164 <xbee_flag>
    40fa:	88 23       	and	r24, r24
			command(xbee_comm);
    40fc:	39 f0       	breq	.+14     	; 0x410c <__stack+0x10d>
    40fe:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <xbee_comm>
    4102:	55 df       	rcall	.-342    	; 0x3fae <command>
			xbee_comm = 0;
    4104:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <xbee_comm>
			xbee_flag = 0;
    4108:	10 92 64 21 	sts	0x2164, r1	; 0x802164 <xbee_flag>
		}

		data_packets++;
    410c:	80 91 49 21 	lds	r24, 0x2149	; 0x802149 <data_packets>
    4110:	90 91 4a 21 	lds	r25, 0x214A	; 0x80214a <data_packets+0x1>
    4114:	01 96       	adiw	r24, 0x01	; 1
    4116:	80 93 49 21 	sts	0x2149, r24	; 0x802149 <data_packets>
    411a:	90 93 4a 21 	sts	0x214A, r25	; 0x80214a <data_packets+0x1>
		if(timer != 0){
    411e:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <timer>
    4122:	90 91 4c 21 	lds	r25, 0x214C	; 0x80214c <timer+0x1>
    4126:	89 2b       	or	r24, r25
    4128:	09 f4       	brne	.+2      	; 0x412c <__stack+0x12d>
    412a:	9b cf       	rjmp	.-202    	; 0x4062 <__stack+0x63>
			rate = data_packets / timer;
    412c:	80 91 49 21 	lds	r24, 0x2149	; 0x802149 <data_packets>
    4130:	90 91 4a 21 	lds	r25, 0x214A	; 0x80214a <data_packets+0x1>
    4134:	60 91 4b 21 	lds	r22, 0x214B	; 0x80214b <timer>
    4138:	70 91 4c 21 	lds	r23, 0x214C	; 0x80214c <timer+0x1>
    413c:	0e 94 c3 29 	call	0x5386	; 0x5386 <__udivmodhi4>
    4140:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <rate>
    4144:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <rate+0x1>
    4148:	8c cf       	rjmp	.-232    	; 0x4062 <__stack+0x63>

0000414a <__vector_47>:
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}


ISR(TCE0_OVF_vect){
    414a:	1f 92       	push	r1
    414c:	0f 92       	push	r0
    414e:	0f b6       	in	r0, 0x3f	; 63
    4150:	0f 92       	push	r0
    4152:	11 24       	eor	r1, r1
    4154:	08 b6       	in	r0, 0x38	; 56
    4156:	0f 92       	push	r0
    4158:	18 be       	out	0x38, r1	; 56
    415a:	09 b6       	in	r0, 0x39	; 57
    415c:	0f 92       	push	r0
    415e:	19 be       	out	0x39, r1	; 57
    4160:	0a b6       	in	r0, 0x3a	; 58
    4162:	0f 92       	push	r0
    4164:	1a be       	out	0x3a, r1	; 58
    4166:	0b b6       	in	r0, 0x3b	; 59
    4168:	0f 92       	push	r0
    416a:	1b be       	out	0x3b, r1	; 59
    416c:	2f 92       	push	r2
    416e:	3f 92       	push	r3
    4170:	4f 92       	push	r4
    4172:	5f 92       	push	r5
    4174:	6f 92       	push	r6
    4176:	7f 92       	push	r7
    4178:	8f 92       	push	r8
    417a:	9f 92       	push	r9
    417c:	af 92       	push	r10
    417e:	bf 92       	push	r11
    4180:	cf 92       	push	r12
    4182:	df 92       	push	r13
    4184:	ef 92       	push	r14
    4186:	ff 92       	push	r15
    4188:	0f 93       	push	r16
    418a:	1f 93       	push	r17
    418c:	2f 93       	push	r18
    418e:	3f 93       	push	r19
    4190:	4f 93       	push	r20
    4192:	5f 93       	push	r21
    4194:	6f 93       	push	r22
    4196:	7f 93       	push	r23
    4198:	8f 93       	push	r24
    419a:	9f 93       	push	r25
    419c:	af 93       	push	r26
    419e:	bf 93       	push	r27
    41a0:	ef 93       	push	r30
    41a2:	ff 93       	push	r31
    41a4:	cf 93       	push	r28
    41a6:	df 93       	push	r29
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	e9 97       	sbiw	r28, 0x39	; 57
    41ae:	cd bf       	out	0x3d, r28	; 61
    41b0:	de bf       	out	0x3e, r29	; 62
	timer++;
    41b2:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <timer>
    41b6:	90 91 4c 21 	lds	r25, 0x214C	; 0x80214c <timer+0x1>
    41ba:	01 96       	adiw	r24, 0x01	; 1
    41bc:	80 93 4b 21 	sts	0x214B, r24	; 0x80214b <timer>
    41c0:	90 93 4c 21 	sts	0x214C, r25	; 0x80214c <timer+0x1>
	packets++;
    41c4:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <packets>
    41c8:	90 91 48 21 	lds	r25, 0x2148	; 0x802148 <packets+0x1>
    41cc:	01 96       	adiw	r24, 0x01	; 1
    41ce:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <packets>
    41d2:	90 93 48 21 	sts	0x2148, r25	; 0x802148 <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    41d6:	60 91 11 21 	lds	r22, 0x2111	; 0x802111 <angle>
    41da:	70 91 12 21 	lds	r23, 0x2112	; 0x802112 <angle+0x1>
    41de:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <angle+0x2>
    41e2:	90 91 14 21 	lds	r25, 0x2114	; 0x802114 <angle+0x3>
    41e6:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <state>
    41ea:	29 83       	std	Y+1, r18	; 0x01
    41ec:	40 90 15 21 	lds	r4, 0x2115	; 0x802115 <rpm>
    41f0:	50 90 16 21 	lds	r5, 0x2116	; 0x802116 <rpm+0x1>
    41f4:	60 90 17 21 	lds	r6, 0x2117	; 0x802117 <rpm+0x2>
    41f8:	70 90 18 21 	lds	r7, 0x2118	; 0x802118 <rpm+0x3>
    41fc:	80 90 19 21 	lds	r8, 0x2119	; 0x802119 <roll>
    4200:	90 90 1a 21 	lds	r9, 0x211A	; 0x80211a <roll+0x1>
    4204:	a0 90 1b 21 	lds	r10, 0x211B	; 0x80211b <roll+0x2>
    4208:	b0 90 1c 21 	lds	r11, 0x211C	; 0x80211c <roll+0x3>
    420c:	c0 90 1d 21 	lds	r12, 0x211D	; 0x80211d <pitch>
    4210:	d0 90 1e 21 	lds	r13, 0x211E	; 0x80211e <pitch+0x1>
    4214:	e0 90 1f 21 	lds	r14, 0x211F	; 0x80211f <pitch+0x2>
    4218:	f0 90 20 21 	lds	r15, 0x2120	; 0x802120 <pitch+0x3>
    421c:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <gps_sats>
    4220:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <gps_sats+0x1>
    4224:	48 af       	std	Y+56, r20	; 0x38
    4226:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    4228:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <gps_alt>
    422c:	30 91 24 21 	lds	r19, 0x2124	; 0x802124 <gps_alt+0x1>
    4230:	40 91 25 21 	lds	r20, 0x2125	; 0x802125 <gps_alt+0x2>
    4234:	50 91 26 21 	lds	r21, 0x2126	; 0x802126 <gps_alt+0x3>
    4238:	2a 83       	std	Y+2, r18	; 0x02
    423a:	3b 83       	std	Y+3, r19	; 0x03
    423c:	4c 83       	std	Y+4, r20	; 0x04
    423e:	5d 83       	std	Y+5, r21	; 0x05


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    4240:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <gps_alt>
    4244:	30 91 24 21 	lds	r19, 0x2124	; 0x802124 <gps_alt+0x1>
    4248:	40 91 25 21 	lds	r20, 0x2125	; 0x802125 <gps_alt+0x2>
    424c:	50 91 26 21 	lds	r21, 0x2126	; 0x802126 <gps_alt+0x3>
    4250:	2e 83       	std	Y+6, r18	; 0x06
    4252:	3f 83       	std	Y+7, r19	; 0x07
    4254:	48 87       	std	Y+8, r20	; 0x08
    4256:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    4258:	20 91 27 21 	lds	r18, 0x2127	; 0x802127 <gps_long>
    425c:	30 91 28 21 	lds	r19, 0x2128	; 0x802128 <gps_long+0x1>
    4260:	40 91 29 21 	lds	r20, 0x2129	; 0x802129 <gps_long+0x2>
    4264:	50 91 2a 21 	lds	r21, 0x212A	; 0x80212a <gps_long+0x3>
    4268:	2a 87       	std	Y+10, r18	; 0x0a
    426a:	3b 87       	std	Y+11, r19	; 0x0b
    426c:	4c 87       	std	Y+12, r20	; 0x0c
    426e:	5d 87       	std	Y+13, r21	; 0x0d


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    4270:	20 91 27 21 	lds	r18, 0x2127	; 0x802127 <gps_long>
    4274:	30 91 28 21 	lds	r19, 0x2128	; 0x802128 <gps_long+0x1>
    4278:	40 91 29 21 	lds	r20, 0x2129	; 0x802129 <gps_long+0x2>
    427c:	50 91 2a 21 	lds	r21, 0x212A	; 0x80212a <gps_long+0x3>
    4280:	2e 87       	std	Y+14, r18	; 0x0e
    4282:	3f 87       	std	Y+15, r19	; 0x0f
    4284:	48 8b       	std	Y+16, r20	; 0x10
    4286:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    4288:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <gps_lat>
    428c:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <gps_lat+0x1>
    4290:	40 91 2d 21 	lds	r20, 0x212D	; 0x80212d <gps_lat+0x2>
    4294:	50 91 2e 21 	lds	r21, 0x212E	; 0x80212e <gps_lat+0x3>
    4298:	2a 8b       	std	Y+18, r18	; 0x12
    429a:	3b 8b       	std	Y+19, r19	; 0x13
    429c:	4c 8b       	std	Y+20, r20	; 0x14
    429e:	5d 8b       	std	Y+21, r21	; 0x15


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    42a0:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <gps_lat>
    42a4:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <gps_lat+0x1>
    42a8:	40 91 2d 21 	lds	r20, 0x212D	; 0x80212d <gps_lat+0x2>
    42ac:	50 91 2e 21 	lds	r21, 0x212E	; 0x80212e <gps_lat+0x3>
    42b0:	2e 8b       	std	Y+22, r18	; 0x16
    42b2:	3f 8b       	std	Y+23, r19	; 0x17
    42b4:	48 8f       	std	Y+24, r20	; 0x18
    42b6:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    42b8:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <gps_t>
    42bc:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <gps_t+0x1>
    42c0:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <gps_t+0x2>
    42c4:	50 91 32 21 	lds	r21, 0x2132	; 0x802132 <gps_t+0x3>
    42c8:	2a 8f       	std	Y+26, r18	; 0x1a
    42ca:	3b 8f       	std	Y+27, r19	; 0x1b
    42cc:	4c 8f       	std	Y+28, r20	; 0x1c
    42ce:	5d 8f       	std	Y+29, r21	; 0x1d
    42d0:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <gps_t>
    42d4:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <gps_t+0x1>
    42d8:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <gps_t+0x2>
    42dc:	50 91 32 21 	lds	r21, 0x2132	; 0x802132 <gps_t+0x3>
    42e0:	2e 8f       	std	Y+30, r18	; 0x1e
    42e2:	3f 8f       	std	Y+31, r19	; 0x1f
    42e4:	48 a3       	std	Y+32, r20	; 0x20
    42e6:	59 a3       	std	Y+33, r21	; 0x21
    42e8:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <gps_t>
    42ec:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <gps_t+0x1>
    42f0:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <gps_t+0x2>
    42f4:	50 91 32 21 	lds	r21, 0x2132	; 0x802132 <gps_t+0x3>
    42f8:	2a a3       	std	Y+34, r18	; 0x22
    42fa:	3b a3       	std	Y+35, r19	; 0x23
    42fc:	4c a3       	std	Y+36, r20	; 0x24
    42fe:	5d a3       	std	Y+37, r21	; 0x25


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    4300:	20 91 37 21 	lds	r18, 0x2137	; 0x802137 <volt>
    4304:	30 91 38 21 	lds	r19, 0x2138	; 0x802138 <volt+0x1>
    4308:	40 91 39 21 	lds	r20, 0x2139	; 0x802139 <volt+0x2>
    430c:	50 91 3a 21 	lds	r21, 0x213A	; 0x80213a <volt+0x3>
    4310:	2e a3       	std	Y+38, r18	; 0x26
    4312:	3f a3       	std	Y+39, r19	; 0x27
    4314:	48 a7       	std	Y+40, r20	; 0x28
    4316:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    4318:	20 91 3f 21 	lds	r18, 0x213F	; 0x80213f <temp>
    431c:	30 91 40 21 	lds	r19, 0x2140	; 0x802140 <temp+0x1>
    4320:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <temp+0x2>
    4324:	50 91 42 21 	lds	r21, 0x2142	; 0x802142 <temp+0x3>
    4328:	2a a7       	std	Y+42, r18	; 0x2a
    432a:	3b a7       	std	Y+43, r19	; 0x2b
    432c:	4c a7       	std	Y+44, r20	; 0x2c
    432e:	5d a7       	std	Y+45, r21	; 0x2d


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    4330:	20 91 43 21 	lds	r18, 0x2143	; 0x802143 <press>
    4334:	30 91 44 21 	lds	r19, 0x2144	; 0x802144 <press+0x1>
    4338:	40 91 45 21 	lds	r20, 0x2145	; 0x802145 <press+0x2>
    433c:	50 91 46 21 	lds	r21, 0x2146	; 0x802146 <press+0x3>
    4340:	2e a7       	std	Y+46, r18	; 0x2e
    4342:	3f a7       	std	Y+47, r19	; 0x2f
    4344:	48 ab       	std	Y+48, r20	; 0x30
    4346:	59 ab       	std	Y+49, r21	; 0x31
    4348:	20 91 3b 21 	lds	r18, 0x213B	; 0x80213b <alt>
    434c:	30 91 3c 21 	lds	r19, 0x213C	; 0x80213c <alt+0x1>
    4350:	40 91 3d 21 	lds	r20, 0x213D	; 0x80213d <alt+0x2>
    4354:	50 91 3e 21 	lds	r21, 0x213E	; 0x80213e <alt+0x3>
    4358:	2a ab       	std	Y+50, r18	; 0x32
    435a:	3b ab       	std	Y+51, r19	; 0x33
    435c:	4c ab       	std	Y+52, r20	; 0x34
    435e:	5d ab       	std	Y+53, r21	; 0x35
    4360:	00 91 47 21 	lds	r16, 0x2147	; 0x802147 <packets>
    4364:	10 91 48 21 	lds	r17, 0x2148	; 0x802148 <packets+0x1>
    4368:	20 90 4b 21 	lds	r2, 0x214B	; 0x80214b <timer>
    436c:	30 90 4c 21 	lds	r3, 0x214C	; 0x80214c <timer+0x1>
    4370:	40 91 4b 21 	lds	r20, 0x214B	; 0x80214b <timer>
    4374:	50 91 4c 21 	lds	r21, 0x214C	; 0x80214c <timer+0x1>
    4378:	4e ab       	std	Y+54, r20	; 0x36
    437a:	5f ab       	std	Y+55, r21	; 0x37
    437c:	46 d5       	rcall	.+2700   	; 0x4e0a <__fixsfsi>
    437e:	7f 93       	push	r23
    4380:	6f 93       	push	r22
    4382:	1f 92       	push	r1
    4384:	59 81       	ldd	r21, Y+1	; 0x01
    4386:	5f 93       	push	r21
    4388:	c3 01       	movw	r24, r6
    438a:	b2 01       	movw	r22, r4
    438c:	3e d5       	rcall	.+2684   	; 0x4e0a <__fixsfsi>
    438e:	7f 93       	push	r23
    4390:	6f 93       	push	r22
    4392:	c5 01       	movw	r24, r10
    4394:	b4 01       	movw	r22, r8
    4396:	39 d5       	rcall	.+2674   	; 0x4e0a <__fixsfsi>
    4398:	7f 93       	push	r23
    439a:	6f 93       	push	r22
    439c:	c7 01       	movw	r24, r14
    439e:	b6 01       	movw	r22, r12
    43a0:	34 d5       	rcall	.+2664   	; 0x4e0a <__fixsfsi>
    43a2:	7f 93       	push	r23
    43a4:	6f 93       	push	r22
    43a6:	89 ad       	ldd	r24, Y+57	; 0x39
    43a8:	8f 93       	push	r24
    43aa:	98 ad       	ldd	r25, Y+56	; 0x38
    43ac:	9f 93       	push	r25
    43ae:	6a 81       	ldd	r22, Y+2	; 0x02
    43b0:	7b 81       	ldd	r23, Y+3	; 0x03
    43b2:	8c 81       	ldd	r24, Y+4	; 0x04
    43b4:	9d 81       	ldd	r25, Y+5	; 0x05
    43b6:	29 d5       	rcall	.+2642   	; 0x4e0a <__fixsfsi>
    43b8:	9b 01       	movw	r18, r22
    43ba:	22 0f       	add	r18, r18
    43bc:	33 1f       	adc	r19, r19
    43be:	66 0f       	add	r22, r22
    43c0:	77 1f       	adc	r23, r23
    43c2:	66 0f       	add	r22, r22
    43c4:	77 1f       	adc	r23, r23
    43c6:	66 0f       	add	r22, r22
    43c8:	77 1f       	adc	r23, r23
    43ca:	c9 01       	movw	r24, r18
    43cc:	86 0f       	add	r24, r22
    43ce:	97 1f       	adc	r25, r23
    43d0:	6a e0       	ldi	r22, 0x0A	; 10
    43d2:	70 e0       	ldi	r23, 0x00	; 0
    43d4:	ec d7       	rcall	.+4056   	; 0x53ae <__divmodhi4>
    43d6:	9f 93       	push	r25
    43d8:	8f 93       	push	r24
    43da:	6e 81       	ldd	r22, Y+6	; 0x06
    43dc:	7f 81       	ldd	r23, Y+7	; 0x07
    43de:	88 85       	ldd	r24, Y+8	; 0x08
    43e0:	99 85       	ldd	r25, Y+9	; 0x09
    43e2:	13 d5       	rcall	.+2598   	; 0x4e0a <__fixsfsi>
    43e4:	7f 93       	push	r23
    43e6:	6f 93       	push	r22
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	34 e2       	ldi	r19, 0x24	; 36
    43ec:	44 e7       	ldi	r20, 0x74	; 116
    43ee:	59 e4       	ldi	r21, 0x49	; 73
    43f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    43f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    43f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    43f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    43f8:	ef d5       	rcall	.+3038   	; 0x4fd8 <__mulsf3>
    43fa:	07 d5       	rcall	.+2574   	; 0x4e0a <__fixsfsi>
    43fc:	20 e4       	ldi	r18, 0x40	; 64
    43fe:	32 e4       	ldi	r19, 0x42	; 66
    4400:	4f e0       	ldi	r20, 0x0F	; 15
    4402:	50 e0       	ldi	r21, 0x00	; 0
    4404:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__divmodsi4>
    4408:	9b 01       	movw	r18, r22
    440a:	77 23       	and	r23, r23
    440c:	24 f4       	brge	.+8      	; 0x4416 <__vector_47+0x2cc>
    440e:	22 27       	eor	r18, r18
    4410:	33 27       	eor	r19, r19
    4412:	26 1b       	sub	r18, r22
    4414:	37 0b       	sbc	r19, r23
    4416:	c9 01       	movw	r24, r18
    4418:	33 0f       	add	r19, r19
    441a:	aa 0b       	sbc	r26, r26
    441c:	bb 0b       	sbc	r27, r27
    441e:	bf 93       	push	r27
    4420:	af 93       	push	r26
    4422:	9f 93       	push	r25
    4424:	8f 93       	push	r24
    4426:	6e 85       	ldd	r22, Y+14	; 0x0e
    4428:	7f 85       	ldd	r23, Y+15	; 0x0f
    442a:	88 89       	ldd	r24, Y+16	; 0x10
    442c:	99 89       	ldd	r25, Y+17	; 0x11
    442e:	ed d4       	rcall	.+2522   	; 0x4e0a <__fixsfsi>
    4430:	7f 93       	push	r23
    4432:	6f 93       	push	r22
    4434:	20 e0       	ldi	r18, 0x00	; 0
    4436:	34 e2       	ldi	r19, 0x24	; 36
    4438:	44 e7       	ldi	r20, 0x74	; 116
    443a:	59 e4       	ldi	r21, 0x49	; 73
    443c:	6a 89       	ldd	r22, Y+18	; 0x12
    443e:	7b 89       	ldd	r23, Y+19	; 0x13
    4440:	8c 89       	ldd	r24, Y+20	; 0x14
    4442:	9d 89       	ldd	r25, Y+21	; 0x15
    4444:	c9 d5       	rcall	.+2962   	; 0x4fd8 <__mulsf3>
    4446:	e1 d4       	rcall	.+2498   	; 0x4e0a <__fixsfsi>
    4448:	20 e4       	ldi	r18, 0x40	; 64
    444a:	32 e4       	ldi	r19, 0x42	; 66
    444c:	4f e0       	ldi	r20, 0x0F	; 15
    444e:	50 e0       	ldi	r21, 0x00	; 0
    4450:	e3 d7       	rcall	.+4038   	; 0x5418 <__divmodsi4>
    4452:	9f 93       	push	r25
    4454:	8f 93       	push	r24
    4456:	7f 93       	push	r23
    4458:	6f 93       	push	r22
    445a:	6e 89       	ldd	r22, Y+22	; 0x16
    445c:	7f 89       	ldd	r23, Y+23	; 0x17
    445e:	88 8d       	ldd	r24, Y+24	; 0x18
    4460:	99 8d       	ldd	r25, Y+25	; 0x19
    4462:	d3 d4       	rcall	.+2470   	; 0x4e0a <__fixsfsi>
    4464:	7f 93       	push	r23
    4466:	6f 93       	push	r22
    4468:	6a 8d       	ldd	r22, Y+26	; 0x1a
    446a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    446c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    446e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4470:	cc d4       	rcall	.+2456   	; 0x4e0a <__fixsfsi>
    4472:	0f 2e       	mov	r0, r31
    4474:	f4 e6       	ldi	r31, 0x64	; 100
    4476:	cf 2e       	mov	r12, r31
    4478:	d1 2c       	mov	r13, r1
    447a:	e1 2c       	mov	r14, r1
    447c:	f1 2c       	mov	r15, r1
    447e:	f0 2d       	mov	r31, r0
    4480:	a7 01       	movw	r20, r14
    4482:	96 01       	movw	r18, r12
    4484:	c9 d7       	rcall	.+3986   	; 0x5418 <__divmodsi4>
    4486:	7f 93       	push	r23
    4488:	6f 93       	push	r22
    448a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    448c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    448e:	88 a1       	ldd	r24, Y+32	; 0x20
    4490:	99 a1       	ldd	r25, Y+33	; 0x21
    4492:	bb d4       	rcall	.+2422   	; 0x4e0a <__fixsfsi>
    4494:	0f 2e       	mov	r0, r31
    4496:	f0 e1       	ldi	r31, 0x10	; 16
    4498:	8f 2e       	mov	r8, r31
    449a:	f7 e2       	ldi	r31, 0x27	; 39
    449c:	9f 2e       	mov	r9, r31
    449e:	a1 2c       	mov	r10, r1
    44a0:	b1 2c       	mov	r11, r1
    44a2:	f0 2d       	mov	r31, r0
    44a4:	a5 01       	movw	r20, r10
    44a6:	94 01       	movw	r18, r8
    44a8:	b7 d7       	rcall	.+3950   	; 0x5418 <__divmodsi4>
    44aa:	a7 01       	movw	r20, r14
    44ac:	96 01       	movw	r18, r12
    44ae:	b4 d7       	rcall	.+3944   	; 0x5418 <__divmodsi4>
    44b0:	3f 93       	push	r19
    44b2:	2f 93       	push	r18
    44b4:	6a a1       	ldd	r22, Y+34	; 0x22
    44b6:	7b a1       	ldd	r23, Y+35	; 0x23
    44b8:	8c a1       	ldd	r24, Y+36	; 0x24
    44ba:	9d a1       	ldd	r25, Y+37	; 0x25
    44bc:	a6 d4       	rcall	.+2380   	; 0x4e0a <__fixsfsi>
    44be:	a5 01       	movw	r20, r10
    44c0:	94 01       	movw	r18, r8
    44c2:	aa d7       	rcall	.+3924   	; 0x5418 <__divmodsi4>
    44c4:	3f 93       	push	r19
    44c6:	2f 93       	push	r18
    44c8:	6e a1       	ldd	r22, Y+38	; 0x26
    44ca:	7f a1       	ldd	r23, Y+39	; 0x27
    44cc:	88 a5       	ldd	r24, Y+40	; 0x28
    44ce:	99 a5       	ldd	r25, Y+41	; 0x29
    44d0:	9c d4       	rcall	.+2360   	; 0x4e0a <__fixsfsi>
    44d2:	7f 93       	push	r23
    44d4:	6f 93       	push	r22
    44d6:	23 e3       	ldi	r18, 0x33	; 51
    44d8:	33 e9       	ldi	r19, 0x93	; 147
    44da:	48 e8       	ldi	r20, 0x88	; 136
    44dc:	53 e4       	ldi	r21, 0x43	; 67
    44de:	6a a5       	ldd	r22, Y+42	; 0x2a
    44e0:	7b a5       	ldd	r23, Y+43	; 0x2b
    44e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    44e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    44e6:	c0 d3       	rcall	.+1920   	; 0x4c68 <__subsf3>
    44e8:	90 d4       	rcall	.+2336   	; 0x4e0a <__fixsfsi>
    44ea:	7f 93       	push	r23
    44ec:	6f 93       	push	r22
    44ee:	6e a5       	ldd	r22, Y+46	; 0x2e
    44f0:	7f a5       	ldd	r23, Y+47	; 0x2f
    44f2:	88 a9       	ldd	r24, Y+48	; 0x30
    44f4:	99 a9       	ldd	r25, Y+49	; 0x31
    44f6:	89 d4       	rcall	.+2322   	; 0x4e0a <__fixsfsi>
    44f8:	9f 93       	push	r25
    44fa:	8f 93       	push	r24
    44fc:	7f 93       	push	r23
    44fe:	6f 93       	push	r22
    4500:	6a a9       	ldd	r22, Y+50	; 0x32
    4502:	7b a9       	ldd	r23, Y+51	; 0x33
    4504:	8c a9       	ldd	r24, Y+52	; 0x34
    4506:	9d a9       	ldd	r25, Y+53	; 0x35
    4508:	80 d4       	rcall	.+2304   	; 0x4e0a <__fixsfsi>
    450a:	7f 93       	push	r23
    450c:	6f 93       	push	r22
    450e:	1f 93       	push	r17
    4510:	0f 93       	push	r16
    4512:	91 01       	movw	r18, r2
    4514:	ad ec       	ldi	r26, 0xCD	; 205
    4516:	bc ec       	ldi	r27, 0xCC	; 204
    4518:	a4 d7       	rcall	.+3912   	; 0x5462 <__umulhisi3>
    451a:	96 95       	lsr	r25
    451c:	87 95       	ror	r24
    451e:	96 95       	lsr	r25
    4520:	87 95       	ror	r24
    4522:	96 95       	lsr	r25
    4524:	87 95       	ror	r24
    4526:	9c 01       	movw	r18, r24
    4528:	22 0f       	add	r18, r18
    452a:	33 1f       	adc	r19, r19
    452c:	88 0f       	add	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	88 0f       	add	r24, r24
    4532:	99 1f       	adc	r25, r25
    4534:	88 0f       	add	r24, r24
    4536:	99 1f       	adc	r25, r25
    4538:	82 0f       	add	r24, r18
    453a:	93 1f       	adc	r25, r19
    453c:	28 1a       	sub	r2, r24
    453e:	39 0a       	sbc	r3, r25
    4540:	3f 92       	push	r3
    4542:	2f 92       	push	r2
    4544:	2e a9       	ldd	r18, Y+54	; 0x36
    4546:	3f a9       	ldd	r19, Y+55	; 0x37
    4548:	8c d7       	rcall	.+3864   	; 0x5462 <__umulhisi3>
    454a:	96 95       	lsr	r25
    454c:	87 95       	ror	r24
    454e:	96 95       	lsr	r25
    4550:	87 95       	ror	r24
    4552:	96 95       	lsr	r25
    4554:	87 95       	ror	r24
    4556:	9f 93       	push	r25
    4558:	8f 93       	push	r24
    455a:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <format+0x1>
    455e:	8f 93       	push	r24
    4560:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <format>
    4564:	8f 93       	push	r24
    4566:	21 eb       	ldi	r18, 0xB1	; 177
    4568:	31 e2       	ldi	r19, 0x21	; 33
    456a:	3f 93       	push	r19
    456c:	2f 93       	push	r18
    456e:	0e 94 de 2a 	call	0x55bc	; 0x55bc <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    4572:	cd bf       	out	0x3d, r28	; 61
    4574:	de bf       	out	0x3e, r29	; 62
    4576:	21 eb       	ldi	r18, 0xB1	; 177
    4578:	31 e2       	ldi	r19, 0x21	; 33
    457a:	3f 93       	push	r19
    457c:	2f 93       	push	r18
    457e:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
	time_flag = 1;
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <time_flag>
}
    4588:	0f 90       	pop	r0
    458a:	0f 90       	pop	r0
    458c:	e9 96       	adiw	r28, 0x39	; 57
    458e:	cd bf       	out	0x3d, r28	; 61
    4590:	de bf       	out	0x3e, r29	; 62
    4592:	df 91       	pop	r29
    4594:	cf 91       	pop	r28
    4596:	ff 91       	pop	r31
    4598:	ef 91       	pop	r30
    459a:	bf 91       	pop	r27
    459c:	af 91       	pop	r26
    459e:	9f 91       	pop	r25
    45a0:	8f 91       	pop	r24
    45a2:	7f 91       	pop	r23
    45a4:	6f 91       	pop	r22
    45a6:	5f 91       	pop	r21
    45a8:	4f 91       	pop	r20
    45aa:	3f 91       	pop	r19
    45ac:	2f 91       	pop	r18
    45ae:	1f 91       	pop	r17
    45b0:	0f 91       	pop	r16
    45b2:	ff 90       	pop	r15
    45b4:	ef 90       	pop	r14
    45b6:	df 90       	pop	r13
    45b8:	cf 90       	pop	r12
    45ba:	bf 90       	pop	r11
    45bc:	af 90       	pop	r10
    45be:	9f 90       	pop	r9
    45c0:	8f 90       	pop	r8
    45c2:	7f 90       	pop	r7
    45c4:	6f 90       	pop	r6
    45c6:	5f 90       	pop	r5
    45c8:	4f 90       	pop	r4
    45ca:	3f 90       	pop	r3
    45cc:	2f 90       	pop	r2
    45ce:	0f 90       	pop	r0
    45d0:	0b be       	out	0x3b, r0	; 59
    45d2:	0f 90       	pop	r0
    45d4:	0a be       	out	0x3a, r0	; 58
    45d6:	0f 90       	pop	r0
    45d8:	09 be       	out	0x39, r0	; 57
    45da:	0f 90       	pop	r0
    45dc:	08 be       	out	0x38, r0	; 56
    45de:	0f 90       	pop	r0
    45e0:	0f be       	out	0x3f, r0	; 63
    45e2:	0f 90       	pop	r0
    45e4:	1f 90       	pop	r1
    45e6:	18 95       	reti

000045e8 <__vector_58>:


ISR(USARTE0_RXC_vect){
    45e8:	1f 92       	push	r1
    45ea:	0f 92       	push	r0
    45ec:	0f b6       	in	r0, 0x3f	; 63
    45ee:	0f 92       	push	r0
    45f0:	11 24       	eor	r1, r1
    45f2:	08 b6       	in	r0, 0x38	; 56
    45f4:	0f 92       	push	r0
    45f6:	18 be       	out	0x38, r1	; 56
    45f8:	09 b6       	in	r0, 0x39	; 57
    45fa:	0f 92       	push	r0
    45fc:	19 be       	out	0x39, r1	; 57
    45fe:	0b b6       	in	r0, 0x3b	; 59
    4600:	0f 92       	push	r0
    4602:	1b be       	out	0x3b, r1	; 59
    4604:	2f 93       	push	r18
    4606:	3f 93       	push	r19
    4608:	4f 93       	push	r20
    460a:	5f 93       	push	r21
    460c:	6f 93       	push	r22
    460e:	7f 93       	push	r23
    4610:	8f 93       	push	r24
    4612:	9f 93       	push	r25
    4614:	af 93       	push	r26
    4616:	bf 93       	push	r27
    4618:	ef 93       	push	r30
    461a:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    461c:	80 ea       	ldi	r24, 0xA0	; 160
    461e:	98 e0       	ldi	r25, 0x08	; 8
    4620:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usart_getchar>
    4624:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <xbee_comm>
	xbee_flag = 1;
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	80 93 64 21 	sts	0x2164, r24	; 0x802164 <xbee_flag>
}
    462e:	ff 91       	pop	r31
    4630:	ef 91       	pop	r30
    4632:	bf 91       	pop	r27
    4634:	af 91       	pop	r26
    4636:	9f 91       	pop	r25
    4638:	8f 91       	pop	r24
    463a:	7f 91       	pop	r23
    463c:	6f 91       	pop	r22
    463e:	5f 91       	pop	r21
    4640:	4f 91       	pop	r20
    4642:	3f 91       	pop	r19
    4644:	2f 91       	pop	r18
    4646:	0f 90       	pop	r0
    4648:	0b be       	out	0x3b, r0	; 59
    464a:	0f 90       	pop	r0
    464c:	09 be       	out	0x39, r0	; 57
    464e:	0f 90       	pop	r0
    4650:	08 be       	out	0x38, r0	; 56
    4652:	0f 90       	pop	r0
    4654:	0f be       	out	0x3f, r0	; 63
    4656:	0f 90       	pop	r0
    4658:	1f 90       	pop	r1
    465a:	18 95       	reti

0000465c <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    465c:	1f 92       	push	r1
    465e:	0f 92       	push	r0
    4660:	0f b6       	in	r0, 0x3f	; 63
    4662:	0f 92       	push	r0
    4664:	11 24       	eor	r1, r1
    4666:	08 b6       	in	r0, 0x38	; 56
    4668:	0f 92       	push	r0
    466a:	18 be       	out	0x38, r1	; 56
    466c:	09 b6       	in	r0, 0x39	; 57
    466e:	0f 92       	push	r0
    4670:	19 be       	out	0x39, r1	; 57
    4672:	0a b6       	in	r0, 0x3a	; 58
    4674:	0f 92       	push	r0
    4676:	1a be       	out	0x3a, r1	; 58
    4678:	0b b6       	in	r0, 0x3b	; 59
    467a:	0f 92       	push	r0
    467c:	1b be       	out	0x3b, r1	; 59
    467e:	8f 92       	push	r8
    4680:	9f 92       	push	r9
    4682:	af 92       	push	r10
    4684:	bf 92       	push	r11
    4686:	cf 92       	push	r12
    4688:	df 92       	push	r13
    468a:	ef 92       	push	r14
    468c:	ff 92       	push	r15
    468e:	1f 93       	push	r17
    4690:	2f 93       	push	r18
    4692:	3f 93       	push	r19
    4694:	4f 93       	push	r20
    4696:	5f 93       	push	r21
    4698:	6f 93       	push	r22
    469a:	7f 93       	push	r23
    469c:	8f 93       	push	r24
    469e:	9f 93       	push	r25
    46a0:	af 93       	push	r26
    46a2:	bf 93       	push	r27
    46a4:	ef 93       	push	r30
    46a6:	ff 93       	push	r31
    46a8:	cf 93       	push	r28
    46aa:	df 93       	push	r29
    46ac:	00 d0       	rcall	.+0      	; 0x46ae <__vector_91+0x52>
    46ae:	00 d0       	rcall	.+0      	; 0x46b0 <__vector_91+0x54>
    46b0:	cd b7       	in	r28, 0x3d	; 61
    46b2:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    46b4:	80 eb       	ldi	r24, 0xB0	; 176
    46b6:	99 e0       	ldi	r25, 0x09	; 9
    46b8:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usart_getchar>
    46bc:	18 2f       	mov	r17, r24
	//printf("%c",c);

	if(c == (uint8_t) '$'){
    46be:	84 32       	cpi	r24, 0x24	; 36
    46c0:	51 f4       	brne	.+20     	; 0x46d6 <__vector_91+0x7a>
		writing = 1;
    46c2:	81 e0       	ldi	r24, 0x01	; 1
    46c4:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <writing>
		pos = 0;
    46c8:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <pos>
		word_pos = 0;
    46cc:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <word_pos>
		commas = 0;
    46d0:	10 92 4f 21 	sts	0x214F, r1	; 0x80214f <commas>
    46d4:	5a c2       	rjmp	.+1204   	; 0x4b8a <__vector_91+0x52e>
	}
	else if(c == (uint8_t) '*'){
    46d6:	8a 32       	cpi	r24, 0x2A	; 42
    46d8:	29 f4       	brne	.+10     	; 0x46e4 <__vector_91+0x88>
		commas = 0;
    46da:	10 92 4f 21 	sts	0x214F, r1	; 0x80214f <commas>
		writing = 0;
    46de:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <writing>
    46e2:	53 c2       	rjmp	.+1190   	; 0x4b8a <__vector_91+0x52e>
	}
	else if(c == (uint8_t) ','){
    46e4:	8c 32       	cpi	r24, 0x2C	; 44
    46e6:	09 f0       	breq	.+2      	; 0x46ea <__vector_91+0x8e>
    46e8:	50 c2       	rjmp	.+1184   	; 0x4b8a <__vector_91+0x52e>
		gps[0] = 32;
    46ea:	ed e9       	ldi	r30, 0x9D	; 157
    46ec:	f1 e2       	ldi	r31, 0x21	; 33
    46ee:	80 e2       	ldi	r24, 0x20	; 32
    46f0:	80 83       	st	Z, r24
		if(gps[1] == 32){
    46f2:	81 81       	ldd	r24, Z+1	; 0x01
    46f4:	80 32       	cpi	r24, 0x20	; 32
    46f6:	09 f0       	breq	.+2      	; 0x46fa <__vector_91+0x9e>
    46f8:	77 c2       	rjmp	.+1262   	; 0x4be8 <__vector_91+0x58c>
			gps[0] = '0';
    46fa:	80 e3       	ldi	r24, 0x30	; 48
    46fc:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <gps>
    4700:	73 c2       	rjmp	.+1254   	; 0x4be8 <__vector_91+0x58c>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4702:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <gps>
    4706:	8e 32       	cpi	r24, 0x2E	; 46
    4708:	09 f0       	breq	.+2      	; 0x470c <__vector_91+0xb0>
    470a:	a3 c1       	rjmp	.+838    	; 0x4a52 <__vector_91+0x3f6>
    470c:	a9 c1       	rjmp	.+850    	; 0x4a60 <__vector_91+0x404>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    470e:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <gps>
    4712:	8e 32       	cpi	r24, 0x2E	; 46
    4714:	09 f0       	breq	.+2      	; 0x4718 <__vector_91+0xbc>
    4716:	ef c0       	rjmp	.+478    	; 0x48f6 <__vector_91+0x29a>
    4718:	f5 c0       	rjmp	.+490    	; 0x4904 <__vector_91+0x2a8>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    471a:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <gps>
    471e:	8e 32       	cpi	r24, 0x2E	; 46
    4720:	09 f0       	breq	.+2      	; 0x4724 <__vector_91+0xc8>
    4722:	52 c0       	rjmp	.+164    	; 0x47c8 <__vector_91+0x16c>
    4724:	58 c0       	rjmp	.+176    	; 0x47d6 <__vector_91+0x17a>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4726:	91 91       	ld	r25, Z+
    4728:	9e 32       	cpi	r25, 0x2E	; 46
    472a:	29 f4       	brne	.+10     	; 0x4736 <__vector_91+0xda>
    472c:	01 c0       	rjmp	.+2      	; 0x4730 <__vector_91+0xd4>
    472e:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    4730:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <idx>
						break;
    4734:	03 c0       	rjmp	.+6      	; 0x473c <__vector_91+0xe0>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    4736:	8f 5f       	subi	r24, 0xFF	; 255
    4738:	8f 30       	cpi	r24, 0x0F	; 15
    473a:	a9 f7       	brne	.-22     	; 0x4726 <__vector_91+0xca>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    473c:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <idx>
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	e3 56       	subi	r30, 0x63	; 99
    4744:	fe 4d       	sbci	r31, 0xDE	; 222
    4746:	80 e2       	ldi	r24, 0x20	; 32
    4748:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    474a:	20 91 4e 21 	lds	r18, 0x214E	; 0x80214e <idx>
    474e:	2f 5f       	subi	r18, 0xFF	; 255
    4750:	2f 30       	cpi	r18, 0x0F	; 15
    4752:	c8 f4       	brcc	.+50     	; 0x4786 <__vector_91+0x12a>
					if(gps[i] == 32){
    4754:	82 2f       	mov	r24, r18
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	fc 01       	movw	r30, r24
    475a:	e3 56       	subi	r30, 0x63	; 99
    475c:	fe 4d       	sbci	r31, 0xDE	; 222
    475e:	30 81       	ld	r19, Z
    4760:	30 32       	cpi	r19, 0x20	; 32
    4762:	89 f0       	breq	.+34     	; 0x4786 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    4764:	40 e2       	ldi	r20, 0x20	; 32
    4766:	08 c0       	rjmp	.+16     	; 0x4778 <__vector_91+0x11c>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4768:	82 2f       	mov	r24, r18
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	fc 01       	movw	r30, r24
    476e:	e3 56       	subi	r30, 0x63	; 99
    4770:	fe 4d       	sbci	r31, 0xDE	; 222
    4772:	30 81       	ld	r19, Z
    4774:	30 32       	cpi	r19, 0x20	; 32
    4776:	39 f0       	breq	.+14     	; 0x4786 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    4778:	fc 01       	movw	r30, r24
    477a:	e3 56       	subi	r30, 0x63	; 99
    477c:	fe 4d       	sbci	r31, 0xDE	; 222
    477e:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4780:	2f 5f       	subi	r18, 0xFF	; 255
    4782:	2f 30       	cpi	r18, 0x0F	; 15
    4784:	89 f7       	brne	.-30     	; 0x4768 <__vector_91+0x10c>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    4786:	ce 01       	movw	r24, r28
    4788:	01 96       	adiw	r24, 0x01	; 1
    478a:	9f 93       	push	r25
    478c:	8f 93       	push	r24
    478e:	85 e5       	ldi	r24, 0x55	; 85
    4790:	90 e2       	ldi	r25, 0x20	; 32
    4792:	9f 93       	push	r25
    4794:	8f 93       	push	r24
    4796:	8d e9       	ldi	r24, 0x9D	; 157
    4798:	91 e2       	ldi	r25, 0x21	; 33
    479a:	9f 93       	push	r25
    479c:	8f 93       	push	r24
    479e:	36 d7       	rcall	.+3692   	; 0x560c <sscanf>
				gps_t = (double) val;
    47a0:	69 81       	ldd	r22, Y+1	; 0x01
    47a2:	7a 81       	ldd	r23, Y+2	; 0x02
    47a4:	8b 81       	ldd	r24, Y+3	; 0x03
    47a6:	9c 81       	ldd	r25, Y+4	; 0x04
    47a8:	63 d3       	rcall	.+1734   	; 0x4e70 <__floatsisf>
    47aa:	60 93 2f 21 	sts	0x212F, r22	; 0x80212f <gps_t>
    47ae:	70 93 30 21 	sts	0x2130, r23	; 0x802130 <gps_t+0x1>
    47b2:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <gps_t+0x2>
    47b6:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <gps_t+0x3>
				break;
    47ba:	0f 90       	pop	r0
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	0f 90       	pop	r0
    47c6:	c3 c1       	rjmp	.+902    	; 0x4b4e <__vector_91+0x4f2>
    47c8:	ee e9       	ldi	r30, 0x9E	; 158
    47ca:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    47cc:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    47ce:	91 91       	ld	r25, Z+
    47d0:	9e 32       	cpi	r25, 0x2E	; 46
    47d2:	29 f4       	brne	.+10     	; 0x47de <__vector_91+0x182>
    47d4:	01 c0       	rjmp	.+2      	; 0x47d8 <__vector_91+0x17c>
    47d6:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    47d8:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <idx>
						break;
    47dc:	03 c0       	rjmp	.+6      	; 0x47e4 <__vector_91+0x188>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    47de:	8f 5f       	subi	r24, 0xFF	; 255
    47e0:	8f 30       	cpi	r24, 0x0F	; 15
    47e2:	a9 f7       	brne	.-22     	; 0x47ce <__vector_91+0x172>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    47e4:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <idx>
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	e3 56       	subi	r30, 0x63	; 99
    47ec:	fe 4d       	sbci	r31, 0xDE	; 222
    47ee:	80 e2       	ldi	r24, 0x20	; 32
    47f0:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    47f2:	20 91 4e 21 	lds	r18, 0x214E	; 0x80214e <idx>
    47f6:	2f 5f       	subi	r18, 0xFF	; 255
    47f8:	2f 30       	cpi	r18, 0x0F	; 15
    47fa:	08 f5       	brcc	.+66     	; 0x483e <__vector_91+0x1e2>
					if(gps[i] == 32){
    47fc:	82 2f       	mov	r24, r18
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	fc 01       	movw	r30, r24
    4802:	e3 56       	subi	r30, 0x63	; 99
    4804:	fe 4d       	sbci	r31, 0xDE	; 222
    4806:	30 81       	ld	r19, Z
    4808:	30 32       	cpi	r19, 0x20	; 32
    480a:	c9 f0       	breq	.+50     	; 0x483e <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    480c:	50 e2       	ldi	r21, 0x20	; 32
    480e:	08 c0       	rjmp	.+16     	; 0x4820 <__vector_91+0x1c4>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4810:	82 2f       	mov	r24, r18
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	fc 01       	movw	r30, r24
    4816:	e3 56       	subi	r30, 0x63	; 99
    4818:	fe 4d       	sbci	r31, 0xDE	; 222
    481a:	30 81       	ld	r19, Z
    481c:	30 32       	cpi	r19, 0x20	; 32
    481e:	79 f0       	breq	.+30     	; 0x483e <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
    4820:	40 91 4e 21 	lds	r20, 0x214E	; 0x80214e <idx>
    4824:	fc 01       	movw	r30, r24
    4826:	e4 1b       	sub	r30, r20
    4828:	f1 09       	sbc	r31, r1
    482a:	e5 55       	subi	r30, 0x55	; 85
    482c:	fe 4d       	sbci	r31, 0xDE	; 222
    482e:	30 83       	st	Z, r19
					gps[i] = 32;
    4830:	fc 01       	movw	r30, r24
    4832:	e3 56       	subi	r30, 0x63	; 99
    4834:	fe 4d       	sbci	r31, 0xDE	; 222
    4836:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4838:	2f 5f       	subi	r18, 0xFF	; 255
    483a:	2f 30       	cpi	r18, 0x0F	; 15
    483c:	49 f7       	brne	.-46     	; 0x4810 <__vector_91+0x1b4>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    483e:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <dec>
    4842:	80 32       	cpi	r24, 0x20	; 32
    4844:	19 f4       	brne	.+6      	; 0x484c <__vector_91+0x1f0>
					dec[0] = '0';
    4846:	80 e3       	ldi	r24, 0x30	; 48
    4848:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <dec>
				}
				sscanf(gps,"%ld",&val);
    484c:	ce 01       	movw	r24, r28
    484e:	01 96       	adiw	r24, 0x01	; 1
    4850:	9f 93       	push	r25
    4852:	8f 93       	push	r24
    4854:	85 e5       	ldi	r24, 0x55	; 85
    4856:	90 e2       	ldi	r25, 0x20	; 32
    4858:	9f 93       	push	r25
    485a:	8f 93       	push	r24
    485c:	8d e9       	ldi	r24, 0x9D	; 157
    485e:	91 e2       	ldi	r25, 0x21	; 33
    4860:	9f 93       	push	r25
    4862:	8f 93       	push	r24
    4864:	d3 d6       	rcall	.+3494   	; 0x560c <sscanf>
				sscanf(dec,"%d",&val2);
    4866:	ce 01       	movw	r24, r28
    4868:	05 96       	adiw	r24, 0x05	; 5
    486a:	9f 93       	push	r25
    486c:	8f 93       	push	r24
    486e:	89 e5       	ldi	r24, 0x59	; 89
    4870:	90 e2       	ldi	r25, 0x20	; 32
    4872:	9f 93       	push	r25
    4874:	8f 93       	push	r24
    4876:	8c ea       	ldi	r24, 0xAC	; 172
    4878:	91 e2       	ldi	r25, 0x21	; 33
    487a:	9f 93       	push	r25
    487c:	8f 93       	push	r24
    487e:	c6 d6       	rcall	.+3468   	; 0x560c <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    4880:	89 80       	ldd	r8, Y+1	; 0x01
    4882:	9a 80       	ldd	r9, Y+2	; 0x02
    4884:	ab 80       	ldd	r10, Y+3	; 0x03
    4886:	bc 80       	ldd	r11, Y+4	; 0x04
    4888:	6d 81       	ldd	r22, Y+5	; 0x05
    488a:	7e 81       	ldd	r23, Y+6	; 0x06
    488c:	07 2e       	mov	r0, r23
    488e:	00 0c       	add	r0, r0
    4890:	88 0b       	sbc	r24, r24
    4892:	99 0b       	sbc	r25, r25
    4894:	ed d2       	rcall	.+1498   	; 0x4e70 <__floatsisf>
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	30 e4       	ldi	r19, 0x40	; 64
    489a:	4c e1       	ldi	r20, 0x1C	; 28
    489c:	56 e4       	ldi	r21, 0x46	; 70
    489e:	4d d2       	rcall	.+1178   	; 0x4d3a <__divsf3>
    48a0:	6b 01       	movw	r12, r22
    48a2:	7c 01       	movw	r14, r24
    48a4:	c5 01       	movw	r24, r10
    48a6:	b4 01       	movw	r22, r8
    48a8:	24 e6       	ldi	r18, 0x64	; 100
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	40 e0       	ldi	r20, 0x00	; 0
    48ae:	50 e0       	ldi	r21, 0x00	; 0
    48b0:	b3 d5       	rcall	.+2918   	; 0x5418 <__divmodsi4>
    48b2:	49 01       	movw	r8, r18
    48b4:	5a 01       	movw	r10, r20
    48b6:	dc d2       	rcall	.+1464   	; 0x4e70 <__floatsisf>
    48b8:	9b 01       	movw	r18, r22
    48ba:	ac 01       	movw	r20, r24
    48bc:	c7 01       	movw	r24, r14
    48be:	b6 01       	movw	r22, r12
    48c0:	d4 d1       	rcall	.+936    	; 0x4c6a <__addsf3>
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	40 e7       	ldi	r20, 0x70	; 112
    48c8:	52 e4       	ldi	r21, 0x42	; 66
    48ca:	37 d2       	rcall	.+1134   	; 0x4d3a <__divsf3>
    48cc:	6b 01       	movw	r12, r22
    48ce:	7c 01       	movw	r14, r24
    48d0:	c5 01       	movw	r24, r10
    48d2:	b4 01       	movw	r22, r8
    48d4:	cd d2       	rcall	.+1434   	; 0x4e70 <__floatsisf>
    48d6:	9b 01       	movw	r18, r22
    48d8:	ac 01       	movw	r20, r24
    48da:	c7 01       	movw	r24, r14
    48dc:	b6 01       	movw	r22, r12
    48de:	c5 d1       	rcall	.+906    	; 0x4c6a <__addsf3>
    48e0:	60 93 2b 21 	sts	0x212B, r22	; 0x80212b <gps_lat>
    48e4:	70 93 2c 21 	sts	0x212C, r23	; 0x80212c <gps_lat+0x1>
    48e8:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <gps_lat+0x2>
    48ec:	90 93 2e 21 	sts	0x212E, r25	; 0x80212e <gps_lat+0x3>
				break;
    48f0:	cd bf       	out	0x3d, r28	; 61
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	2c c1       	rjmp	.+600    	; 0x4b4e <__vector_91+0x4f2>
    48f6:	ee e9       	ldi	r30, 0x9E	; 158
    48f8:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    48fa:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    48fc:	91 91       	ld	r25, Z+
    48fe:	9e 32       	cpi	r25, 0x2E	; 46
    4900:	29 f4       	brne	.+10     	; 0x490c <__vector_91+0x2b0>
    4902:	01 c0       	rjmp	.+2      	; 0x4906 <__vector_91+0x2aa>
    4904:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    4906:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <idx>
						break;
    490a:	03 c0       	rjmp	.+6      	; 0x4912 <__vector_91+0x2b6>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    490c:	8f 5f       	subi	r24, 0xFF	; 255
    490e:	8f 30       	cpi	r24, 0x0F	; 15
    4910:	a9 f7       	brne	.-22     	; 0x48fc <__vector_91+0x2a0>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4912:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <idx>
    4916:	f0 e0       	ldi	r31, 0x00	; 0
    4918:	e3 56       	subi	r30, 0x63	; 99
    491a:	fe 4d       	sbci	r31, 0xDE	; 222
    491c:	80 e2       	ldi	r24, 0x20	; 32
    491e:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    4920:	20 91 4e 21 	lds	r18, 0x214E	; 0x80214e <idx>
    4924:	2f 5f       	subi	r18, 0xFF	; 255
    4926:	2f 30       	cpi	r18, 0x0F	; 15
    4928:	08 f5       	brcc	.+66     	; 0x496c <__vector_91+0x310>
					if(gps[i] == 32){
    492a:	82 2f       	mov	r24, r18
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	fc 01       	movw	r30, r24
    4930:	e3 56       	subi	r30, 0x63	; 99
    4932:	fe 4d       	sbci	r31, 0xDE	; 222
    4934:	30 81       	ld	r19, Z
    4936:	30 32       	cpi	r19, 0x20	; 32
    4938:	c9 f0       	breq	.+50     	; 0x496c <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    493a:	50 e2       	ldi	r21, 0x20	; 32
    493c:	08 c0       	rjmp	.+16     	; 0x494e <__vector_91+0x2f2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    493e:	82 2f       	mov	r24, r18
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	fc 01       	movw	r30, r24
    4944:	e3 56       	subi	r30, 0x63	; 99
    4946:	fe 4d       	sbci	r31, 0xDE	; 222
    4948:	30 81       	ld	r19, Z
    494a:	30 32       	cpi	r19, 0x20	; 32
    494c:	79 f0       	breq	.+30     	; 0x496c <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
    494e:	40 91 4e 21 	lds	r20, 0x214E	; 0x80214e <idx>
    4952:	fc 01       	movw	r30, r24
    4954:	e4 1b       	sub	r30, r20
    4956:	f1 09       	sbc	r31, r1
    4958:	e5 55       	subi	r30, 0x55	; 85
    495a:	fe 4d       	sbci	r31, 0xDE	; 222
    495c:	30 83       	st	Z, r19
					gps[i] = 32;
    495e:	fc 01       	movw	r30, r24
    4960:	e3 56       	subi	r30, 0x63	; 99
    4962:	fe 4d       	sbci	r31, 0xDE	; 222
    4964:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4966:	2f 5f       	subi	r18, 0xFF	; 255
    4968:	2f 30       	cpi	r18, 0x0F	; 15
    496a:	49 f7       	brne	.-46     	; 0x493e <__vector_91+0x2e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    496c:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <dec>
    4970:	80 32       	cpi	r24, 0x20	; 32
    4972:	19 f4       	brne	.+6      	; 0x497a <__vector_91+0x31e>
					dec[0] = '0';
    4974:	80 e3       	ldi	r24, 0x30	; 48
    4976:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <dec>
				}
				sscanf(gps,"%ld",&val);
    497a:	ce 01       	movw	r24, r28
    497c:	01 96       	adiw	r24, 0x01	; 1
    497e:	9f 93       	push	r25
    4980:	8f 93       	push	r24
    4982:	85 e5       	ldi	r24, 0x55	; 85
    4984:	90 e2       	ldi	r25, 0x20	; 32
    4986:	9f 93       	push	r25
    4988:	8f 93       	push	r24
    498a:	8d e9       	ldi	r24, 0x9D	; 157
    498c:	91 e2       	ldi	r25, 0x21	; 33
    498e:	9f 93       	push	r25
    4990:	8f 93       	push	r24
    4992:	3c d6       	rcall	.+3192   	; 0x560c <sscanf>
				sscanf(dec,"%d",&val2);
    4994:	ce 01       	movw	r24, r28
    4996:	05 96       	adiw	r24, 0x05	; 5
    4998:	9f 93       	push	r25
    499a:	8f 93       	push	r24
    499c:	89 e5       	ldi	r24, 0x59	; 89
    499e:	90 e2       	ldi	r25, 0x20	; 32
    49a0:	9f 93       	push	r25
    49a2:	8f 93       	push	r24
    49a4:	8c ea       	ldi	r24, 0xAC	; 172
    49a6:	91 e2       	ldi	r25, 0x21	; 33
    49a8:	9f 93       	push	r25
    49aa:	8f 93       	push	r24
    49ac:	2f d6       	rcall	.+3166   	; 0x560c <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    49ae:	89 80       	ldd	r8, Y+1	; 0x01
    49b0:	9a 80       	ldd	r9, Y+2	; 0x02
    49b2:	ab 80       	ldd	r10, Y+3	; 0x03
    49b4:	bc 80       	ldd	r11, Y+4	; 0x04
    49b6:	6d 81       	ldd	r22, Y+5	; 0x05
    49b8:	7e 81       	ldd	r23, Y+6	; 0x06
    49ba:	07 2e       	mov	r0, r23
    49bc:	00 0c       	add	r0, r0
    49be:	88 0b       	sbc	r24, r24
    49c0:	99 0b       	sbc	r25, r25
    49c2:	56 d2       	rcall	.+1196   	; 0x4e70 <__floatsisf>
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	30 e4       	ldi	r19, 0x40	; 64
    49c8:	4c e1       	ldi	r20, 0x1C	; 28
    49ca:	56 e4       	ldi	r21, 0x46	; 70
    49cc:	b6 d1       	rcall	.+876    	; 0x4d3a <__divsf3>
    49ce:	6b 01       	movw	r12, r22
    49d0:	7c 01       	movw	r14, r24
    49d2:	c5 01       	movw	r24, r10
    49d4:	b4 01       	movw	r22, r8
    49d6:	24 e6       	ldi	r18, 0x64	; 100
    49d8:	30 e0       	ldi	r19, 0x00	; 0
    49da:	40 e0       	ldi	r20, 0x00	; 0
    49dc:	50 e0       	ldi	r21, 0x00	; 0
    49de:	1c d5       	rcall	.+2616   	; 0x5418 <__divmodsi4>
    49e0:	49 01       	movw	r8, r18
    49e2:	5a 01       	movw	r10, r20
    49e4:	45 d2       	rcall	.+1162   	; 0x4e70 <__floatsisf>
    49e6:	9b 01       	movw	r18, r22
    49e8:	ac 01       	movw	r20, r24
    49ea:	c7 01       	movw	r24, r14
    49ec:	b6 01       	movw	r22, r12
    49ee:	3d d1       	rcall	.+634    	; 0x4c6a <__addsf3>
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	30 e0       	ldi	r19, 0x00	; 0
    49f4:	40 e7       	ldi	r20, 0x70	; 112
    49f6:	52 e4       	ldi	r21, 0x42	; 66
    49f8:	a0 d1       	rcall	.+832    	; 0x4d3a <__divsf3>
    49fa:	6b 01       	movw	r12, r22
    49fc:	7c 01       	movw	r14, r24
    49fe:	c5 01       	movw	r24, r10
    4a00:	b4 01       	movw	r22, r8
    4a02:	36 d2       	rcall	.+1132   	; 0x4e70 <__floatsisf>
    4a04:	9b 01       	movw	r18, r22
    4a06:	ac 01       	movw	r20, r24
    4a08:	c7 01       	movw	r24, r14
    4a0a:	b6 01       	movw	r22, r12
    4a0c:	2e d1       	rcall	.+604    	; 0x4c6a <__addsf3>
    4a0e:	dc 01       	movw	r26, r24
    4a10:	cb 01       	movw	r24, r22
    4a12:	b0 58       	subi	r27, 0x80	; 128
    4a14:	80 93 27 21 	sts	0x2127, r24	; 0x802127 <gps_long>
    4a18:	90 93 28 21 	sts	0x2128, r25	; 0x802128 <gps_long+0x1>
    4a1c:	a0 93 29 21 	sts	0x2129, r26	; 0x802129 <gps_long+0x2>
    4a20:	b0 93 2a 21 	sts	0x212A, r27	; 0x80212a <gps_long+0x3>
    4a24:	cd bf       	out	0x3d, r28	; 61
				break;
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	92 c0       	rjmp	.+292    	; 0x4b4e <__vector_91+0x4f2>
    4a2a:	81 e2       	ldi	r24, 0x21	; 33
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    4a2c:	91 e2       	ldi	r25, 0x21	; 33
    4a2e:	9f 93       	push	r25
    4a30:	8f 93       	push	r24
    4a32:	89 e5       	ldi	r24, 0x59	; 89
    4a34:	90 e2       	ldi	r25, 0x20	; 32
    4a36:	9f 93       	push	r25
    4a38:	8f 93       	push	r24
    4a3a:	8d e9       	ldi	r24, 0x9D	; 157
    4a3c:	91 e2       	ldi	r25, 0x21	; 33
    4a3e:	9f 93       	push	r25
    4a40:	8f 93       	push	r24
    4a42:	e4 d5       	rcall	.+3016   	; 0x560c <sscanf>
    4a44:	0f 90       	pop	r0
    4a46:	0f 90       	pop	r0
				break;
    4a48:	0f 90       	pop	r0
    4a4a:	0f 90       	pop	r0
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
    4a50:	7e c0       	rjmp	.+252    	; 0x4b4e <__vector_91+0x4f2>
    4a52:	ee e9       	ldi	r30, 0x9E	; 158
    4a54:	f1 e2       	ldi	r31, 0x21	; 33
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4a5a:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    4a5c:	29 f4       	brne	.+10     	; 0x4a68 <__vector_91+0x40c>
    4a5e:	01 c0       	rjmp	.+2      	; 0x4a62 <__vector_91+0x406>
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <idx>
						idx = i;
    4a66:	03 c0       	rjmp	.+6      	; 0x4a6e <__vector_91+0x412>
    4a68:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    4a6a:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4a6c:	a9 f7       	brne	.-22     	; 0x4a58 <__vector_91+0x3fc>
    4a6e:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4a72:	f0 e0       	ldi	r31, 0x00	; 0
    4a74:	e3 56       	subi	r30, 0x63	; 99
    4a76:	fe 4d       	sbci	r31, 0xDE	; 222
    4a78:	80 e2       	ldi	r24, 0x20	; 32
    4a7a:	80 83       	st	Z, r24
    4a7c:	20 91 4e 21 	lds	r18, 0x214E	; 0x80214e <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    4a80:	2f 5f       	subi	r18, 0xFF	; 255
    4a82:	2f 30       	cpi	r18, 0x0F	; 15
    4a84:	08 f5       	brcc	.+66     	; 0x4ac8 <__vector_91+0x46c>
    4a86:	82 2f       	mov	r24, r18
    4a88:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    4a8a:	fc 01       	movw	r30, r24
    4a8c:	e3 56       	subi	r30, 0x63	; 99
    4a8e:	fe 4d       	sbci	r31, 0xDE	; 222
    4a90:	30 81       	ld	r19, Z
    4a92:	30 32       	cpi	r19, 0x20	; 32
    4a94:	c9 f0       	breq	.+50     	; 0x4ac8 <__vector_91+0x46c>
    4a96:	50 e2       	ldi	r21, 0x20	; 32
    4a98:	08 c0       	rjmp	.+16     	; 0x4aaa <__vector_91+0x44e>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4a9a:	82 2f       	mov	r24, r18
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	e3 56       	subi	r30, 0x63	; 99
    4aa2:	fe 4d       	sbci	r31, 0xDE	; 222
    4aa4:	30 81       	ld	r19, Z
    4aa6:	30 32       	cpi	r19, 0x20	; 32
    4aa8:	79 f0       	breq	.+30     	; 0x4ac8 <__vector_91+0x46c>
    4aaa:	40 91 4e 21 	lds	r20, 0x214E	; 0x80214e <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    4aae:	fc 01       	movw	r30, r24
    4ab0:	e4 1b       	sub	r30, r20
    4ab2:	f1 09       	sbc	r31, r1
    4ab4:	e5 55       	subi	r30, 0x55	; 85
    4ab6:	fe 4d       	sbci	r31, 0xDE	; 222
    4ab8:	30 83       	st	Z, r19
    4aba:	fc 01       	movw	r30, r24
    4abc:	e3 56       	subi	r30, 0x63	; 99
					gps[i] = 32;
    4abe:	fe 4d       	sbci	r31, 0xDE	; 222
    4ac0:	50 83       	st	Z, r21
    4ac2:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4ac4:	2f 30       	cpi	r18, 0x0F	; 15
    4ac6:	49 f7       	brne	.-46     	; 0x4a9a <__vector_91+0x43e>
    4ac8:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    4acc:	80 32       	cpi	r24, 0x20	; 32
    4ace:	19 f4       	brne	.+6      	; 0x4ad6 <__vector_91+0x47a>
    4ad0:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    4ad2:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <dec>
    4ad6:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    4ad8:	01 96       	adiw	r24, 0x01	; 1
    4ada:	9f 93       	push	r25
    4adc:	8f 93       	push	r24
    4ade:	85 e5       	ldi	r24, 0x55	; 85
    4ae0:	90 e2       	ldi	r25, 0x20	; 32
    4ae2:	9f 93       	push	r25
    4ae4:	8f 93       	push	r24
    4ae6:	8d e9       	ldi	r24, 0x9D	; 157
    4ae8:	91 e2       	ldi	r25, 0x21	; 33
    4aea:	9f 93       	push	r25
    4aec:	8f 93       	push	r24
    4aee:	8e d5       	rcall	.+2844   	; 0x560c <sscanf>
				sscanf(dec,"%d",&val2);
    4af0:	ce 01       	movw	r24, r28
    4af2:	05 96       	adiw	r24, 0x05	; 5
    4af4:	9f 93       	push	r25
    4af6:	8f 93       	push	r24
    4af8:	89 e5       	ldi	r24, 0x59	; 89
    4afa:	90 e2       	ldi	r25, 0x20	; 32
    4afc:	9f 93       	push	r25
    4afe:	8f 93       	push	r24
    4b00:	8c ea       	ldi	r24, 0xAC	; 172
    4b02:	91 e2       	ldi	r25, 0x21	; 33
    4b04:	9f 93       	push	r25
    4b06:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    4b08:	81 d5       	rcall	.+2818   	; 0x560c <sscanf>
    4b0a:	69 81       	ldd	r22, Y+1	; 0x01
    4b0c:	7a 81       	ldd	r23, Y+2	; 0x02
    4b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b10:	9c 81       	ldd	r25, Y+4	; 0x04
    4b12:	ae d1       	rcall	.+860    	; 0x4e70 <__floatsisf>
    4b14:	6b 01       	movw	r12, r22
    4b16:	7c 01       	movw	r14, r24
    4b18:	6d 81       	ldd	r22, Y+5	; 0x05
    4b1a:	7e 81       	ldd	r23, Y+6	; 0x06
    4b1c:	07 2e       	mov	r0, r23
    4b1e:	00 0c       	add	r0, r0
    4b20:	88 0b       	sbc	r24, r24
    4b22:	99 0b       	sbc	r25, r25
    4b24:	a5 d1       	rcall	.+842    	; 0x4e70 <__floatsisf>
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	40 e2       	ldi	r20, 0x20	; 32
    4b2c:	51 e4       	ldi	r21, 0x41	; 65
    4b2e:	05 d1       	rcall	.+522    	; 0x4d3a <__divsf3>
    4b30:	9b 01       	movw	r18, r22
    4b32:	ac 01       	movw	r20, r24
    4b34:	c7 01       	movw	r24, r14
    4b36:	b6 01       	movw	r22, r12
    4b38:	98 d0       	rcall	.+304    	; 0x4c6a <__addsf3>
    4b3a:	60 93 23 21 	sts	0x2123, r22	; 0x802123 <gps_alt>
    4b3e:	70 93 24 21 	sts	0x2124, r23	; 0x802124 <gps_alt+0x1>
    4b42:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <gps_alt+0x2>
    4b46:	90 93 26 21 	sts	0x2126, r25	; 0x802126 <gps_alt+0x3>
    4b4a:	cd bf       	out	0x3d, r28	; 61
    4b4c:	de bf       	out	0x3e, r29	; 62
    4b4e:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <writing>
				break;
    4b52:	88 23       	and	r24, r24
		}

		if(writing){
    4b54:	d1 f0       	breq	.+52     	; 0x4b8a <__vector_91+0x52e>
    4b56:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <idx>
    4b5a:	80 91 4f 21 	lds	r24, 0x214F	; 0x80214f <commas>
			idx = 0;
    4b5e:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    4b60:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <commas>
    4b64:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <word_pos>
    4b68:	ed e9       	ldi	r30, 0x9D	; 157
			word_pos = 0;
    4b6a:	f1 e2       	ldi	r31, 0x21	; 33
    4b6c:	2c ea       	ldi	r18, 0xAC	; 172
    4b6e:	31 e2       	ldi	r19, 0x21	; 33
    4b70:	80 e2       	ldi	r24, 0x20	; 32
    4b72:	81 93       	st	Z+, r24
    4b74:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    4b76:	3f 07       	cpc	r19, r31
    4b78:	e1 f7       	brne	.-8      	; 0x4b72 <__vector_91+0x516>

		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    4b7a:	ec ea       	ldi	r30, 0xAC	; 172
    4b7c:	f1 e2       	ldi	r31, 0x21	; 33
    4b7e:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    4b80:	80 83       	st	Z, r24
    4b82:	81 83       	std	Z+1, r24	; 0x01
    4b84:	82 83       	std	Z+2, r24	; 0x02
    4b86:	83 83       	std	Z+3, r24	; 0x03
    4b88:	84 83       	std	Z+4, r24	; 0x04
    4b8a:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <writing>
    4b8e:	88 23       	and	r24, r24
			}
		}
	}

	if(writing){
    4b90:	09 f4       	brne	.+2      	; 0x4b94 <__vector_91+0x538>
    4b92:	43 c0       	rjmp	.+134    	; 0x4c1a <__vector_91+0x5be>
    4b94:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <pos>
    4b98:	83 30       	cpi	r24, 0x03	; 3
		switch(pos){
    4b9a:	19 f0       	breq	.+6      	; 0x4ba2 <__vector_91+0x546>
    4b9c:	84 30       	cpi	r24, 0x04	; 4
    4b9e:	31 f0       	breq	.+12     	; 0x4bac <__vector_91+0x550>
    4ba0:	09 c0       	rjmp	.+18     	; 0x4bb4 <__vector_91+0x558>
    4ba2:	17 34       	cpi	r17, 0x47	; 71
    4ba4:	39 f0       	breq	.+14     	; 0x4bb4 <__vector_91+0x558>
    4ba6:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <writing>
			case 3:
				if(c != 'G'){
    4baa:	04 c0       	rjmp	.+8      	; 0x4bb4 <__vector_91+0x558>
					writing = 0;
    4bac:	17 34       	cpi	r17, 0x47	; 71
    4bae:	11 f0       	breq	.+4      	; 0x4bb4 <__vector_91+0x558>
    4bb0:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <writing>
				}
				break;

			case 4:
				if(c != 'G'){
    4bb4:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <word_pos>
					writing = 0;
    4bb8:	f0 e0       	ldi	r31, 0x00	; 0
				}
				break;
		}
		gps[word_pos] = c;
    4bba:	e3 56       	subi	r30, 0x63	; 99
    4bbc:	fe 4d       	sbci	r31, 0xDE	; 222
    4bbe:	10 83       	st	Z, r17
    4bc0:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <word_pos>
    4bc4:	8f 5f       	subi	r24, 0xFF	; 255
		word_pos++;
    4bc6:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <word_pos>
    4bca:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <pos>
    4bce:	8f 5f       	subi	r24, 0xFF	; 255
		pos++;
    4bd0:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <pos>
    4bd4:	22 c0       	rjmp	.+68     	; 0x4c1a <__vector_91+0x5be>
    4bd6:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <gps>
	}
}
    4bda:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4bdc:	09 f4       	brne	.+2      	; 0x4be0 <__vector_91+0x584>
    4bde:	a7 cd       	rjmp	.-1202   	; 0x472e <__vector_91+0xd2>
    4be0:	ee e9       	ldi	r30, 0x9E	; 158
    4be2:	f1 e2       	ldi	r31, 0x21	; 33
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	9f cd       	rjmp	.-1218   	; 0x4726 <__vector_91+0xca>
    4be8:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    4bea:	1a 82       	std	Y+2, r1	; 0x02
    4bec:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    4bee:	1c 82       	std	Y+4, r1	; 0x04
    4bf0:	1d 82       	std	Y+5, r1	; 0x05
    4bf2:	1e 82       	std	Y+6, r1	; 0x06
    4bf4:	80 91 4f 21 	lds	r24, 0x214F	; 0x80214f <commas>
		int16_t val2 = 0;
    4bf8:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    4bfa:	09 f4       	brne	.+2      	; 0x4bfe <__vector_91+0x5a2>
    4bfc:	88 cd       	rjmp	.-1264   	; 0x470e <__vector_91+0xb2>
    4bfe:	30 f4       	brcc	.+12     	; 0x4c0c <__vector_91+0x5b0>
    4c00:	81 30       	cpi	r24, 0x01	; 1
    4c02:	49 f3       	breq	.-46     	; 0x4bd6 <__vector_91+0x57a>
    4c04:	82 30       	cpi	r24, 0x02	; 2
    4c06:	09 f4       	brne	.+2      	; 0x4c0a <__vector_91+0x5ae>
    4c08:	88 cd       	rjmp	.-1264   	; 0x471a <__vector_91+0xbe>
    4c0a:	a1 cf       	rjmp	.-190    	; 0x4b4e <__vector_91+0x4f2>
    4c0c:	87 30       	cpi	r24, 0x07	; 7
    4c0e:	09 f4       	brne	.+2      	; 0x4c12 <__vector_91+0x5b6>
    4c10:	0c cf       	rjmp	.-488    	; 0x4a2a <__vector_91+0x3ce>
    4c12:	89 30       	cpi	r24, 0x09	; 9
    4c14:	09 f4       	brne	.+2      	; 0x4c18 <__vector_91+0x5bc>
    4c16:	75 cd       	rjmp	.-1302   	; 0x4702 <__vector_91+0xa6>
    4c18:	9a cf       	rjmp	.-204    	; 0x4b4e <__vector_91+0x4f2>
    4c1a:	26 96       	adiw	r28, 0x06	; 6
    4c1c:	cd bf       	out	0x3d, r28	; 61
    4c1e:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	ff 91       	pop	r31
    4c26:	ef 91       	pop	r30
    4c28:	bf 91       	pop	r27
    4c2a:	af 91       	pop	r26
    4c2c:	9f 91       	pop	r25
    4c2e:	8f 91       	pop	r24
    4c30:	7f 91       	pop	r23
    4c32:	6f 91       	pop	r22
    4c34:	5f 91       	pop	r21
    4c36:	4f 91       	pop	r20
    4c38:	3f 91       	pop	r19
    4c3a:	2f 91       	pop	r18
    4c3c:	1f 91       	pop	r17
    4c3e:	ff 90       	pop	r15
    4c40:	ef 90       	pop	r14
    4c42:	df 90       	pop	r13
    4c44:	cf 90       	pop	r12
    4c46:	bf 90       	pop	r11
    4c48:	af 90       	pop	r10
    4c4a:	9f 90       	pop	r9
    4c4c:	8f 90       	pop	r8
    4c4e:	0f 90       	pop	r0
    4c50:	0b be       	out	0x3b, r0	; 59
    4c52:	0f 90       	pop	r0
    4c54:	0a be       	out	0x3a, r0	; 58
    4c56:	0f 90       	pop	r0
    4c58:	09 be       	out	0x39, r0	; 57
    4c5a:	0f 90       	pop	r0
    4c5c:	08 be       	out	0x38, r0	; 56
    4c5e:	0f 90       	pop	r0
    4c60:	0f be       	out	0x3f, r0	; 63
    4c62:	0f 90       	pop	r0
    4c64:	1f 90       	pop	r1
    4c66:	18 95       	reti

00004c68 <__subsf3>:
    4c68:	50 58       	subi	r21, 0x80	; 128

00004c6a <__addsf3>:
    4c6a:	bb 27       	eor	r27, r27
    4c6c:	aa 27       	eor	r26, r26
    4c6e:	0e d0       	rcall	.+28     	; 0x4c8c <__addsf3x>
    4c70:	75 c1       	rjmp	.+746    	; 0x4f5c <__fp_round>
    4c72:	66 d1       	rcall	.+716    	; 0x4f40 <__fp_pscA>
    4c74:	30 f0       	brcs	.+12     	; 0x4c82 <__addsf3+0x18>
    4c76:	6b d1       	rcall	.+726    	; 0x4f4e <__fp_pscB>
    4c78:	20 f0       	brcs	.+8      	; 0x4c82 <__addsf3+0x18>
    4c7a:	31 f4       	brne	.+12     	; 0x4c88 <__addsf3+0x1e>
    4c7c:	9f 3f       	cpi	r25, 0xFF	; 255
    4c7e:	11 f4       	brne	.+4      	; 0x4c84 <__addsf3+0x1a>
    4c80:	1e f4       	brtc	.+6      	; 0x4c88 <__addsf3+0x1e>
    4c82:	5b c1       	rjmp	.+694    	; 0x4f3a <__fp_nan>
    4c84:	0e f4       	brtc	.+2      	; 0x4c88 <__addsf3+0x1e>
    4c86:	e0 95       	com	r30
    4c88:	e7 fb       	bst	r30, 7
    4c8a:	51 c1       	rjmp	.+674    	; 0x4f2e <__fp_inf>

00004c8c <__addsf3x>:
    4c8c:	e9 2f       	mov	r30, r25
    4c8e:	77 d1       	rcall	.+750    	; 0x4f7e <__fp_split3>
    4c90:	80 f3       	brcs	.-32     	; 0x4c72 <__addsf3+0x8>
    4c92:	ba 17       	cp	r27, r26
    4c94:	62 07       	cpc	r22, r18
    4c96:	73 07       	cpc	r23, r19
    4c98:	84 07       	cpc	r24, r20
    4c9a:	95 07       	cpc	r25, r21
    4c9c:	18 f0       	brcs	.+6      	; 0x4ca4 <__addsf3x+0x18>
    4c9e:	71 f4       	brne	.+28     	; 0x4cbc <__addsf3x+0x30>
    4ca0:	9e f5       	brtc	.+102    	; 0x4d08 <__addsf3x+0x7c>
    4ca2:	8f c1       	rjmp	.+798    	; 0x4fc2 <__fp_zero>
    4ca4:	0e f4       	brtc	.+2      	; 0x4ca8 <__addsf3x+0x1c>
    4ca6:	e0 95       	com	r30
    4ca8:	0b 2e       	mov	r0, r27
    4caa:	ba 2f       	mov	r27, r26
    4cac:	a0 2d       	mov	r26, r0
    4cae:	0b 01       	movw	r0, r22
    4cb0:	b9 01       	movw	r22, r18
    4cb2:	90 01       	movw	r18, r0
    4cb4:	0c 01       	movw	r0, r24
    4cb6:	ca 01       	movw	r24, r20
    4cb8:	a0 01       	movw	r20, r0
    4cba:	11 24       	eor	r1, r1
    4cbc:	ff 27       	eor	r31, r31
    4cbe:	59 1b       	sub	r21, r25
    4cc0:	99 f0       	breq	.+38     	; 0x4ce8 <__addsf3x+0x5c>
    4cc2:	59 3f       	cpi	r21, 0xF9	; 249
    4cc4:	50 f4       	brcc	.+20     	; 0x4cda <__addsf3x+0x4e>
    4cc6:	50 3e       	cpi	r21, 0xE0	; 224
    4cc8:	68 f1       	brcs	.+90     	; 0x4d24 <__addsf3x+0x98>
    4cca:	1a 16       	cp	r1, r26
    4ccc:	f0 40       	sbci	r31, 0x00	; 0
    4cce:	a2 2f       	mov	r26, r18
    4cd0:	23 2f       	mov	r18, r19
    4cd2:	34 2f       	mov	r19, r20
    4cd4:	44 27       	eor	r20, r20
    4cd6:	58 5f       	subi	r21, 0xF8	; 248
    4cd8:	f3 cf       	rjmp	.-26     	; 0x4cc0 <__addsf3x+0x34>
    4cda:	46 95       	lsr	r20
    4cdc:	37 95       	ror	r19
    4cde:	27 95       	ror	r18
    4ce0:	a7 95       	ror	r26
    4ce2:	f0 40       	sbci	r31, 0x00	; 0
    4ce4:	53 95       	inc	r21
    4ce6:	c9 f7       	brne	.-14     	; 0x4cda <__addsf3x+0x4e>
    4ce8:	7e f4       	brtc	.+30     	; 0x4d08 <__addsf3x+0x7c>
    4cea:	1f 16       	cp	r1, r31
    4cec:	ba 0b       	sbc	r27, r26
    4cee:	62 0b       	sbc	r22, r18
    4cf0:	73 0b       	sbc	r23, r19
    4cf2:	84 0b       	sbc	r24, r20
    4cf4:	ba f0       	brmi	.+46     	; 0x4d24 <__addsf3x+0x98>
    4cf6:	91 50       	subi	r25, 0x01	; 1
    4cf8:	a1 f0       	breq	.+40     	; 0x4d22 <__addsf3x+0x96>
    4cfa:	ff 0f       	add	r31, r31
    4cfc:	bb 1f       	adc	r27, r27
    4cfe:	66 1f       	adc	r22, r22
    4d00:	77 1f       	adc	r23, r23
    4d02:	88 1f       	adc	r24, r24
    4d04:	c2 f7       	brpl	.-16     	; 0x4cf6 <__addsf3x+0x6a>
    4d06:	0e c0       	rjmp	.+28     	; 0x4d24 <__addsf3x+0x98>
    4d08:	ba 0f       	add	r27, r26
    4d0a:	62 1f       	adc	r22, r18
    4d0c:	73 1f       	adc	r23, r19
    4d0e:	84 1f       	adc	r24, r20
    4d10:	48 f4       	brcc	.+18     	; 0x4d24 <__addsf3x+0x98>
    4d12:	87 95       	ror	r24
    4d14:	77 95       	ror	r23
    4d16:	67 95       	ror	r22
    4d18:	b7 95       	ror	r27
    4d1a:	f7 95       	ror	r31
    4d1c:	9e 3f       	cpi	r25, 0xFE	; 254
    4d1e:	08 f0       	brcs	.+2      	; 0x4d22 <__addsf3x+0x96>
    4d20:	b3 cf       	rjmp	.-154    	; 0x4c88 <__addsf3+0x1e>
    4d22:	93 95       	inc	r25
    4d24:	88 0f       	add	r24, r24
    4d26:	08 f0       	brcs	.+2      	; 0x4d2a <__addsf3x+0x9e>
    4d28:	99 27       	eor	r25, r25
    4d2a:	ee 0f       	add	r30, r30
    4d2c:	97 95       	ror	r25
    4d2e:	87 95       	ror	r24
    4d30:	08 95       	ret

00004d32 <__cmpsf2>:
    4d32:	d9 d0       	rcall	.+434    	; 0x4ee6 <__fp_cmp>
    4d34:	08 f4       	brcc	.+2      	; 0x4d38 <__cmpsf2+0x6>
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	08 95       	ret

00004d3a <__divsf3>:
    4d3a:	0c d0       	rcall	.+24     	; 0x4d54 <__divsf3x>
    4d3c:	0f c1       	rjmp	.+542    	; 0x4f5c <__fp_round>
    4d3e:	07 d1       	rcall	.+526    	; 0x4f4e <__fp_pscB>
    4d40:	40 f0       	brcs	.+16     	; 0x4d52 <__divsf3+0x18>
    4d42:	fe d0       	rcall	.+508    	; 0x4f40 <__fp_pscA>
    4d44:	30 f0       	brcs	.+12     	; 0x4d52 <__divsf3+0x18>
    4d46:	21 f4       	brne	.+8      	; 0x4d50 <__divsf3+0x16>
    4d48:	5f 3f       	cpi	r21, 0xFF	; 255
    4d4a:	19 f0       	breq	.+6      	; 0x4d52 <__divsf3+0x18>
    4d4c:	f0 c0       	rjmp	.+480    	; 0x4f2e <__fp_inf>
    4d4e:	51 11       	cpse	r21, r1
    4d50:	39 c1       	rjmp	.+626    	; 0x4fc4 <__fp_szero>
    4d52:	f3 c0       	rjmp	.+486    	; 0x4f3a <__fp_nan>

00004d54 <__divsf3x>:
    4d54:	14 d1       	rcall	.+552    	; 0x4f7e <__fp_split3>
    4d56:	98 f3       	brcs	.-26     	; 0x4d3e <__divsf3+0x4>

00004d58 <__divsf3_pse>:
    4d58:	99 23       	and	r25, r25
    4d5a:	c9 f3       	breq	.-14     	; 0x4d4e <__divsf3+0x14>
    4d5c:	55 23       	and	r21, r21
    4d5e:	b1 f3       	breq	.-20     	; 0x4d4c <__divsf3+0x12>
    4d60:	95 1b       	sub	r25, r21
    4d62:	55 0b       	sbc	r21, r21
    4d64:	bb 27       	eor	r27, r27
    4d66:	aa 27       	eor	r26, r26
    4d68:	62 17       	cp	r22, r18
    4d6a:	73 07       	cpc	r23, r19
    4d6c:	84 07       	cpc	r24, r20
    4d6e:	38 f0       	brcs	.+14     	; 0x4d7e <__divsf3_pse+0x26>
    4d70:	9f 5f       	subi	r25, 0xFF	; 255
    4d72:	5f 4f       	sbci	r21, 0xFF	; 255
    4d74:	22 0f       	add	r18, r18
    4d76:	33 1f       	adc	r19, r19
    4d78:	44 1f       	adc	r20, r20
    4d7a:	aa 1f       	adc	r26, r26
    4d7c:	a9 f3       	breq	.-22     	; 0x4d68 <__divsf3_pse+0x10>
    4d7e:	33 d0       	rcall	.+102    	; 0x4de6 <__divsf3_pse+0x8e>
    4d80:	0e 2e       	mov	r0, r30
    4d82:	3a f0       	brmi	.+14     	; 0x4d92 <__divsf3_pse+0x3a>
    4d84:	e0 e8       	ldi	r30, 0x80	; 128
    4d86:	30 d0       	rcall	.+96     	; 0x4de8 <__divsf3_pse+0x90>
    4d88:	91 50       	subi	r25, 0x01	; 1
    4d8a:	50 40       	sbci	r21, 0x00	; 0
    4d8c:	e6 95       	lsr	r30
    4d8e:	00 1c       	adc	r0, r0
    4d90:	ca f7       	brpl	.-14     	; 0x4d84 <__divsf3_pse+0x2c>
    4d92:	29 d0       	rcall	.+82     	; 0x4de6 <__divsf3_pse+0x8e>
    4d94:	fe 2f       	mov	r31, r30
    4d96:	27 d0       	rcall	.+78     	; 0x4de6 <__divsf3_pse+0x8e>
    4d98:	66 0f       	add	r22, r22
    4d9a:	77 1f       	adc	r23, r23
    4d9c:	88 1f       	adc	r24, r24
    4d9e:	bb 1f       	adc	r27, r27
    4da0:	26 17       	cp	r18, r22
    4da2:	37 07       	cpc	r19, r23
    4da4:	48 07       	cpc	r20, r24
    4da6:	ab 07       	cpc	r26, r27
    4da8:	b0 e8       	ldi	r27, 0x80	; 128
    4daa:	09 f0       	breq	.+2      	; 0x4dae <__divsf3_pse+0x56>
    4dac:	bb 0b       	sbc	r27, r27
    4dae:	80 2d       	mov	r24, r0
    4db0:	bf 01       	movw	r22, r30
    4db2:	ff 27       	eor	r31, r31
    4db4:	93 58       	subi	r25, 0x83	; 131
    4db6:	5f 4f       	sbci	r21, 0xFF	; 255
    4db8:	2a f0       	brmi	.+10     	; 0x4dc4 <__divsf3_pse+0x6c>
    4dba:	9e 3f       	cpi	r25, 0xFE	; 254
    4dbc:	51 05       	cpc	r21, r1
    4dbe:	68 f0       	brcs	.+26     	; 0x4dda <__divsf3_pse+0x82>
    4dc0:	b6 c0       	rjmp	.+364    	; 0x4f2e <__fp_inf>
    4dc2:	00 c1       	rjmp	.+512    	; 0x4fc4 <__fp_szero>
    4dc4:	5f 3f       	cpi	r21, 0xFF	; 255
    4dc6:	ec f3       	brlt	.-6      	; 0x4dc2 <__divsf3_pse+0x6a>
    4dc8:	98 3e       	cpi	r25, 0xE8	; 232
    4dca:	dc f3       	brlt	.-10     	; 0x4dc2 <__divsf3_pse+0x6a>
    4dcc:	86 95       	lsr	r24
    4dce:	77 95       	ror	r23
    4dd0:	67 95       	ror	r22
    4dd2:	b7 95       	ror	r27
    4dd4:	f7 95       	ror	r31
    4dd6:	9f 5f       	subi	r25, 0xFF	; 255
    4dd8:	c9 f7       	brne	.-14     	; 0x4dcc <__divsf3_pse+0x74>
    4dda:	88 0f       	add	r24, r24
    4ddc:	91 1d       	adc	r25, r1
    4dde:	96 95       	lsr	r25
    4de0:	87 95       	ror	r24
    4de2:	97 f9       	bld	r25, 7
    4de4:	08 95       	ret
    4de6:	e1 e0       	ldi	r30, 0x01	; 1
    4de8:	66 0f       	add	r22, r22
    4dea:	77 1f       	adc	r23, r23
    4dec:	88 1f       	adc	r24, r24
    4dee:	bb 1f       	adc	r27, r27
    4df0:	62 17       	cp	r22, r18
    4df2:	73 07       	cpc	r23, r19
    4df4:	84 07       	cpc	r24, r20
    4df6:	ba 07       	cpc	r27, r26
    4df8:	20 f0       	brcs	.+8      	; 0x4e02 <__divsf3_pse+0xaa>
    4dfa:	62 1b       	sub	r22, r18
    4dfc:	73 0b       	sbc	r23, r19
    4dfe:	84 0b       	sbc	r24, r20
    4e00:	ba 0b       	sbc	r27, r26
    4e02:	ee 1f       	adc	r30, r30
    4e04:	88 f7       	brcc	.-30     	; 0x4de8 <__divsf3_pse+0x90>
    4e06:	e0 95       	com	r30
    4e08:	08 95       	ret

00004e0a <__fixsfsi>:
    4e0a:	04 d0       	rcall	.+8      	; 0x4e14 <__fixunssfsi>
    4e0c:	68 94       	set
    4e0e:	b1 11       	cpse	r27, r1
    4e10:	d9 c0       	rjmp	.+434    	; 0x4fc4 <__fp_szero>
    4e12:	08 95       	ret

00004e14 <__fixunssfsi>:
    4e14:	bc d0       	rcall	.+376    	; 0x4f8e <__fp_splitA>
    4e16:	88 f0       	brcs	.+34     	; 0x4e3a <__fixunssfsi+0x26>
    4e18:	9f 57       	subi	r25, 0x7F	; 127
    4e1a:	90 f0       	brcs	.+36     	; 0x4e40 <__fixunssfsi+0x2c>
    4e1c:	b9 2f       	mov	r27, r25
    4e1e:	99 27       	eor	r25, r25
    4e20:	b7 51       	subi	r27, 0x17	; 23
    4e22:	a0 f0       	brcs	.+40     	; 0x4e4c <__fixunssfsi+0x38>
    4e24:	d1 f0       	breq	.+52     	; 0x4e5a <__fixunssfsi+0x46>
    4e26:	66 0f       	add	r22, r22
    4e28:	77 1f       	adc	r23, r23
    4e2a:	88 1f       	adc	r24, r24
    4e2c:	99 1f       	adc	r25, r25
    4e2e:	1a f0       	brmi	.+6      	; 0x4e36 <__fixunssfsi+0x22>
    4e30:	ba 95       	dec	r27
    4e32:	c9 f7       	brne	.-14     	; 0x4e26 <__fixunssfsi+0x12>
    4e34:	12 c0       	rjmp	.+36     	; 0x4e5a <__fixunssfsi+0x46>
    4e36:	b1 30       	cpi	r27, 0x01	; 1
    4e38:	81 f0       	breq	.+32     	; 0x4e5a <__fixunssfsi+0x46>
    4e3a:	c3 d0       	rcall	.+390    	; 0x4fc2 <__fp_zero>
    4e3c:	b1 e0       	ldi	r27, 0x01	; 1
    4e3e:	08 95       	ret
    4e40:	c0 c0       	rjmp	.+384    	; 0x4fc2 <__fp_zero>
    4e42:	67 2f       	mov	r22, r23
    4e44:	78 2f       	mov	r23, r24
    4e46:	88 27       	eor	r24, r24
    4e48:	b8 5f       	subi	r27, 0xF8	; 248
    4e4a:	39 f0       	breq	.+14     	; 0x4e5a <__fixunssfsi+0x46>
    4e4c:	b9 3f       	cpi	r27, 0xF9	; 249
    4e4e:	cc f3       	brlt	.-14     	; 0x4e42 <__fixunssfsi+0x2e>
    4e50:	86 95       	lsr	r24
    4e52:	77 95       	ror	r23
    4e54:	67 95       	ror	r22
    4e56:	b3 95       	inc	r27
    4e58:	d9 f7       	brne	.-10     	; 0x4e50 <__fixunssfsi+0x3c>
    4e5a:	3e f4       	brtc	.+14     	; 0x4e6a <__fixunssfsi+0x56>
    4e5c:	90 95       	com	r25
    4e5e:	80 95       	com	r24
    4e60:	70 95       	com	r23
    4e62:	61 95       	neg	r22
    4e64:	7f 4f       	sbci	r23, 0xFF	; 255
    4e66:	8f 4f       	sbci	r24, 0xFF	; 255
    4e68:	9f 4f       	sbci	r25, 0xFF	; 255
    4e6a:	08 95       	ret

00004e6c <__floatunsisf>:
    4e6c:	e8 94       	clt
    4e6e:	09 c0       	rjmp	.+18     	; 0x4e82 <__floatsisf+0x12>

00004e70 <__floatsisf>:
    4e70:	97 fb       	bst	r25, 7
    4e72:	3e f4       	brtc	.+14     	; 0x4e82 <__floatsisf+0x12>
    4e74:	90 95       	com	r25
    4e76:	80 95       	com	r24
    4e78:	70 95       	com	r23
    4e7a:	61 95       	neg	r22
    4e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e80:	9f 4f       	sbci	r25, 0xFF	; 255
    4e82:	99 23       	and	r25, r25
    4e84:	a9 f0       	breq	.+42     	; 0x4eb0 <__floatsisf+0x40>
    4e86:	f9 2f       	mov	r31, r25
    4e88:	96 e9       	ldi	r25, 0x96	; 150
    4e8a:	bb 27       	eor	r27, r27
    4e8c:	93 95       	inc	r25
    4e8e:	f6 95       	lsr	r31
    4e90:	87 95       	ror	r24
    4e92:	77 95       	ror	r23
    4e94:	67 95       	ror	r22
    4e96:	b7 95       	ror	r27
    4e98:	f1 11       	cpse	r31, r1
    4e9a:	f8 cf       	rjmp	.-16     	; 0x4e8c <__floatsisf+0x1c>
    4e9c:	fa f4       	brpl	.+62     	; 0x4edc <__floatsisf+0x6c>
    4e9e:	bb 0f       	add	r27, r27
    4ea0:	11 f4       	brne	.+4      	; 0x4ea6 <__floatsisf+0x36>
    4ea2:	60 ff       	sbrs	r22, 0
    4ea4:	1b c0       	rjmp	.+54     	; 0x4edc <__floatsisf+0x6c>
    4ea6:	6f 5f       	subi	r22, 0xFF	; 255
    4ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    4eaa:	8f 4f       	sbci	r24, 0xFF	; 255
    4eac:	9f 4f       	sbci	r25, 0xFF	; 255
    4eae:	16 c0       	rjmp	.+44     	; 0x4edc <__floatsisf+0x6c>
    4eb0:	88 23       	and	r24, r24
    4eb2:	11 f0       	breq	.+4      	; 0x4eb8 <__floatsisf+0x48>
    4eb4:	96 e9       	ldi	r25, 0x96	; 150
    4eb6:	11 c0       	rjmp	.+34     	; 0x4eda <__floatsisf+0x6a>
    4eb8:	77 23       	and	r23, r23
    4eba:	21 f0       	breq	.+8      	; 0x4ec4 <__floatsisf+0x54>
    4ebc:	9e e8       	ldi	r25, 0x8E	; 142
    4ebe:	87 2f       	mov	r24, r23
    4ec0:	76 2f       	mov	r23, r22
    4ec2:	05 c0       	rjmp	.+10     	; 0x4ece <__floatsisf+0x5e>
    4ec4:	66 23       	and	r22, r22
    4ec6:	71 f0       	breq	.+28     	; 0x4ee4 <__floatsisf+0x74>
    4ec8:	96 e8       	ldi	r25, 0x86	; 134
    4eca:	86 2f       	mov	r24, r22
    4ecc:	70 e0       	ldi	r23, 0x00	; 0
    4ece:	60 e0       	ldi	r22, 0x00	; 0
    4ed0:	2a f0       	brmi	.+10     	; 0x4edc <__floatsisf+0x6c>
    4ed2:	9a 95       	dec	r25
    4ed4:	66 0f       	add	r22, r22
    4ed6:	77 1f       	adc	r23, r23
    4ed8:	88 1f       	adc	r24, r24
    4eda:	da f7       	brpl	.-10     	; 0x4ed2 <__floatsisf+0x62>
    4edc:	88 0f       	add	r24, r24
    4ede:	96 95       	lsr	r25
    4ee0:	87 95       	ror	r24
    4ee2:	97 f9       	bld	r25, 7
    4ee4:	08 95       	ret

00004ee6 <__fp_cmp>:
    4ee6:	99 0f       	add	r25, r25
    4ee8:	00 08       	sbc	r0, r0
    4eea:	55 0f       	add	r21, r21
    4eec:	aa 0b       	sbc	r26, r26
    4eee:	e0 e8       	ldi	r30, 0x80	; 128
    4ef0:	fe ef       	ldi	r31, 0xFE	; 254
    4ef2:	16 16       	cp	r1, r22
    4ef4:	17 06       	cpc	r1, r23
    4ef6:	e8 07       	cpc	r30, r24
    4ef8:	f9 07       	cpc	r31, r25
    4efa:	c0 f0       	brcs	.+48     	; 0x4f2c <__fp_cmp+0x46>
    4efc:	12 16       	cp	r1, r18
    4efe:	13 06       	cpc	r1, r19
    4f00:	e4 07       	cpc	r30, r20
    4f02:	f5 07       	cpc	r31, r21
    4f04:	98 f0       	brcs	.+38     	; 0x4f2c <__fp_cmp+0x46>
    4f06:	62 1b       	sub	r22, r18
    4f08:	73 0b       	sbc	r23, r19
    4f0a:	84 0b       	sbc	r24, r20
    4f0c:	95 0b       	sbc	r25, r21
    4f0e:	39 f4       	brne	.+14     	; 0x4f1e <__fp_cmp+0x38>
    4f10:	0a 26       	eor	r0, r26
    4f12:	61 f0       	breq	.+24     	; 0x4f2c <__fp_cmp+0x46>
    4f14:	23 2b       	or	r18, r19
    4f16:	24 2b       	or	r18, r20
    4f18:	25 2b       	or	r18, r21
    4f1a:	21 f4       	brne	.+8      	; 0x4f24 <__fp_cmp+0x3e>
    4f1c:	08 95       	ret
    4f1e:	0a 26       	eor	r0, r26
    4f20:	09 f4       	brne	.+2      	; 0x4f24 <__fp_cmp+0x3e>
    4f22:	a1 40       	sbci	r26, 0x01	; 1
    4f24:	a6 95       	lsr	r26
    4f26:	8f ef       	ldi	r24, 0xFF	; 255
    4f28:	81 1d       	adc	r24, r1
    4f2a:	81 1d       	adc	r24, r1
    4f2c:	08 95       	ret

00004f2e <__fp_inf>:
    4f2e:	97 f9       	bld	r25, 7
    4f30:	9f 67       	ori	r25, 0x7F	; 127
    4f32:	80 e8       	ldi	r24, 0x80	; 128
    4f34:	70 e0       	ldi	r23, 0x00	; 0
    4f36:	60 e0       	ldi	r22, 0x00	; 0
    4f38:	08 95       	ret

00004f3a <__fp_nan>:
    4f3a:	9f ef       	ldi	r25, 0xFF	; 255
    4f3c:	80 ec       	ldi	r24, 0xC0	; 192
    4f3e:	08 95       	ret

00004f40 <__fp_pscA>:
    4f40:	00 24       	eor	r0, r0
    4f42:	0a 94       	dec	r0
    4f44:	16 16       	cp	r1, r22
    4f46:	17 06       	cpc	r1, r23
    4f48:	18 06       	cpc	r1, r24
    4f4a:	09 06       	cpc	r0, r25
    4f4c:	08 95       	ret

00004f4e <__fp_pscB>:
    4f4e:	00 24       	eor	r0, r0
    4f50:	0a 94       	dec	r0
    4f52:	12 16       	cp	r1, r18
    4f54:	13 06       	cpc	r1, r19
    4f56:	14 06       	cpc	r1, r20
    4f58:	05 06       	cpc	r0, r21
    4f5a:	08 95       	ret

00004f5c <__fp_round>:
    4f5c:	09 2e       	mov	r0, r25
    4f5e:	03 94       	inc	r0
    4f60:	00 0c       	add	r0, r0
    4f62:	11 f4       	brne	.+4      	; 0x4f68 <__fp_round+0xc>
    4f64:	88 23       	and	r24, r24
    4f66:	52 f0       	brmi	.+20     	; 0x4f7c <__fp_round+0x20>
    4f68:	bb 0f       	add	r27, r27
    4f6a:	40 f4       	brcc	.+16     	; 0x4f7c <__fp_round+0x20>
    4f6c:	bf 2b       	or	r27, r31
    4f6e:	11 f4       	brne	.+4      	; 0x4f74 <__fp_round+0x18>
    4f70:	60 ff       	sbrs	r22, 0
    4f72:	04 c0       	rjmp	.+8      	; 0x4f7c <__fp_round+0x20>
    4f74:	6f 5f       	subi	r22, 0xFF	; 255
    4f76:	7f 4f       	sbci	r23, 0xFF	; 255
    4f78:	8f 4f       	sbci	r24, 0xFF	; 255
    4f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f7c:	08 95       	ret

00004f7e <__fp_split3>:
    4f7e:	57 fd       	sbrc	r21, 7
    4f80:	90 58       	subi	r25, 0x80	; 128
    4f82:	44 0f       	add	r20, r20
    4f84:	55 1f       	adc	r21, r21
    4f86:	59 f0       	breq	.+22     	; 0x4f9e <__fp_splitA+0x10>
    4f88:	5f 3f       	cpi	r21, 0xFF	; 255
    4f8a:	71 f0       	breq	.+28     	; 0x4fa8 <__fp_splitA+0x1a>
    4f8c:	47 95       	ror	r20

00004f8e <__fp_splitA>:
    4f8e:	88 0f       	add	r24, r24
    4f90:	97 fb       	bst	r25, 7
    4f92:	99 1f       	adc	r25, r25
    4f94:	61 f0       	breq	.+24     	; 0x4fae <__fp_splitA+0x20>
    4f96:	9f 3f       	cpi	r25, 0xFF	; 255
    4f98:	79 f0       	breq	.+30     	; 0x4fb8 <__fp_splitA+0x2a>
    4f9a:	87 95       	ror	r24
    4f9c:	08 95       	ret
    4f9e:	12 16       	cp	r1, r18
    4fa0:	13 06       	cpc	r1, r19
    4fa2:	14 06       	cpc	r1, r20
    4fa4:	55 1f       	adc	r21, r21
    4fa6:	f2 cf       	rjmp	.-28     	; 0x4f8c <__fp_split3+0xe>
    4fa8:	46 95       	lsr	r20
    4faa:	f1 df       	rcall	.-30     	; 0x4f8e <__fp_splitA>
    4fac:	08 c0       	rjmp	.+16     	; 0x4fbe <__fp_splitA+0x30>
    4fae:	16 16       	cp	r1, r22
    4fb0:	17 06       	cpc	r1, r23
    4fb2:	18 06       	cpc	r1, r24
    4fb4:	99 1f       	adc	r25, r25
    4fb6:	f1 cf       	rjmp	.-30     	; 0x4f9a <__fp_splitA+0xc>
    4fb8:	86 95       	lsr	r24
    4fba:	71 05       	cpc	r23, r1
    4fbc:	61 05       	cpc	r22, r1
    4fbe:	08 94       	sec
    4fc0:	08 95       	ret

00004fc2 <__fp_zero>:
    4fc2:	e8 94       	clt

00004fc4 <__fp_szero>:
    4fc4:	bb 27       	eor	r27, r27
    4fc6:	66 27       	eor	r22, r22
    4fc8:	77 27       	eor	r23, r23
    4fca:	cb 01       	movw	r24, r22
    4fcc:	97 f9       	bld	r25, 7
    4fce:	08 95       	ret

00004fd0 <__gesf2>:
    4fd0:	8a df       	rcall	.-236    	; 0x4ee6 <__fp_cmp>
    4fd2:	08 f4       	brcc	.+2      	; 0x4fd6 <__gesf2+0x6>
    4fd4:	8f ef       	ldi	r24, 0xFF	; 255
    4fd6:	08 95       	ret

00004fd8 <__mulsf3>:
    4fd8:	0b d0       	rcall	.+22     	; 0x4ff0 <__mulsf3x>
    4fda:	c0 cf       	rjmp	.-128    	; 0x4f5c <__fp_round>
    4fdc:	b1 df       	rcall	.-158    	; 0x4f40 <__fp_pscA>
    4fde:	28 f0       	brcs	.+10     	; 0x4fea <__mulsf3+0x12>
    4fe0:	b6 df       	rcall	.-148    	; 0x4f4e <__fp_pscB>
    4fe2:	18 f0       	brcs	.+6      	; 0x4fea <__mulsf3+0x12>
    4fe4:	95 23       	and	r25, r21
    4fe6:	09 f0       	breq	.+2      	; 0x4fea <__mulsf3+0x12>
    4fe8:	a2 cf       	rjmp	.-188    	; 0x4f2e <__fp_inf>
    4fea:	a7 cf       	rjmp	.-178    	; 0x4f3a <__fp_nan>
    4fec:	11 24       	eor	r1, r1
    4fee:	ea cf       	rjmp	.-44     	; 0x4fc4 <__fp_szero>

00004ff0 <__mulsf3x>:
    4ff0:	c6 df       	rcall	.-116    	; 0x4f7e <__fp_split3>
    4ff2:	a0 f3       	brcs	.-24     	; 0x4fdc <__mulsf3+0x4>

00004ff4 <__mulsf3_pse>:
    4ff4:	95 9f       	mul	r25, r21
    4ff6:	d1 f3       	breq	.-12     	; 0x4fec <__mulsf3+0x14>
    4ff8:	95 0f       	add	r25, r21
    4ffa:	50 e0       	ldi	r21, 0x00	; 0
    4ffc:	55 1f       	adc	r21, r21
    4ffe:	62 9f       	mul	r22, r18
    5000:	f0 01       	movw	r30, r0
    5002:	72 9f       	mul	r23, r18
    5004:	bb 27       	eor	r27, r27
    5006:	f0 0d       	add	r31, r0
    5008:	b1 1d       	adc	r27, r1
    500a:	63 9f       	mul	r22, r19
    500c:	aa 27       	eor	r26, r26
    500e:	f0 0d       	add	r31, r0
    5010:	b1 1d       	adc	r27, r1
    5012:	aa 1f       	adc	r26, r26
    5014:	64 9f       	mul	r22, r20
    5016:	66 27       	eor	r22, r22
    5018:	b0 0d       	add	r27, r0
    501a:	a1 1d       	adc	r26, r1
    501c:	66 1f       	adc	r22, r22
    501e:	82 9f       	mul	r24, r18
    5020:	22 27       	eor	r18, r18
    5022:	b0 0d       	add	r27, r0
    5024:	a1 1d       	adc	r26, r1
    5026:	62 1f       	adc	r22, r18
    5028:	73 9f       	mul	r23, r19
    502a:	b0 0d       	add	r27, r0
    502c:	a1 1d       	adc	r26, r1
    502e:	62 1f       	adc	r22, r18
    5030:	83 9f       	mul	r24, r19
    5032:	a0 0d       	add	r26, r0
    5034:	61 1d       	adc	r22, r1
    5036:	22 1f       	adc	r18, r18
    5038:	74 9f       	mul	r23, r20
    503a:	33 27       	eor	r19, r19
    503c:	a0 0d       	add	r26, r0
    503e:	61 1d       	adc	r22, r1
    5040:	23 1f       	adc	r18, r19
    5042:	84 9f       	mul	r24, r20
    5044:	60 0d       	add	r22, r0
    5046:	21 1d       	adc	r18, r1
    5048:	82 2f       	mov	r24, r18
    504a:	76 2f       	mov	r23, r22
    504c:	6a 2f       	mov	r22, r26
    504e:	11 24       	eor	r1, r1
    5050:	9f 57       	subi	r25, 0x7F	; 127
    5052:	50 40       	sbci	r21, 0x00	; 0
    5054:	8a f0       	brmi	.+34     	; 0x5078 <__mulsf3_pse+0x84>
    5056:	e1 f0       	breq	.+56     	; 0x5090 <__mulsf3_pse+0x9c>
    5058:	88 23       	and	r24, r24
    505a:	4a f0       	brmi	.+18     	; 0x506e <__mulsf3_pse+0x7a>
    505c:	ee 0f       	add	r30, r30
    505e:	ff 1f       	adc	r31, r31
    5060:	bb 1f       	adc	r27, r27
    5062:	66 1f       	adc	r22, r22
    5064:	77 1f       	adc	r23, r23
    5066:	88 1f       	adc	r24, r24
    5068:	91 50       	subi	r25, 0x01	; 1
    506a:	50 40       	sbci	r21, 0x00	; 0
    506c:	a9 f7       	brne	.-22     	; 0x5058 <__mulsf3_pse+0x64>
    506e:	9e 3f       	cpi	r25, 0xFE	; 254
    5070:	51 05       	cpc	r21, r1
    5072:	70 f0       	brcs	.+28     	; 0x5090 <__mulsf3_pse+0x9c>
    5074:	5c cf       	rjmp	.-328    	; 0x4f2e <__fp_inf>
    5076:	a6 cf       	rjmp	.-180    	; 0x4fc4 <__fp_szero>
    5078:	5f 3f       	cpi	r21, 0xFF	; 255
    507a:	ec f3       	brlt	.-6      	; 0x5076 <__mulsf3_pse+0x82>
    507c:	98 3e       	cpi	r25, 0xE8	; 232
    507e:	dc f3       	brlt	.-10     	; 0x5076 <__mulsf3_pse+0x82>
    5080:	86 95       	lsr	r24
    5082:	77 95       	ror	r23
    5084:	67 95       	ror	r22
    5086:	b7 95       	ror	r27
    5088:	f7 95       	ror	r31
    508a:	e7 95       	ror	r30
    508c:	9f 5f       	subi	r25, 0xFF	; 255
    508e:	c1 f7       	brne	.-16     	; 0x5080 <__mulsf3_pse+0x8c>
    5090:	fe 2b       	or	r31, r30
    5092:	88 0f       	add	r24, r24
    5094:	91 1d       	adc	r25, r1
    5096:	96 95       	lsr	r25
    5098:	87 95       	ror	r24
    509a:	97 f9       	bld	r25, 7
    509c:	08 95       	ret

0000509e <pow>:
    509e:	fa 01       	movw	r30, r20
    50a0:	ee 0f       	add	r30, r30
    50a2:	ff 1f       	adc	r31, r31
    50a4:	30 96       	adiw	r30, 0x00	; 0
    50a6:	21 05       	cpc	r18, r1
    50a8:	31 05       	cpc	r19, r1
    50aa:	99 f1       	breq	.+102    	; 0x5112 <pow+0x74>
    50ac:	61 15       	cp	r22, r1
    50ae:	71 05       	cpc	r23, r1
    50b0:	61 f4       	brne	.+24     	; 0x50ca <pow+0x2c>
    50b2:	80 38       	cpi	r24, 0x80	; 128
    50b4:	bf e3       	ldi	r27, 0x3F	; 63
    50b6:	9b 07       	cpc	r25, r27
    50b8:	49 f1       	breq	.+82     	; 0x510c <pow+0x6e>
    50ba:	68 94       	set
    50bc:	90 38       	cpi	r25, 0x80	; 128
    50be:	81 05       	cpc	r24, r1
    50c0:	61 f0       	breq	.+24     	; 0x50da <pow+0x3c>
    50c2:	80 38       	cpi	r24, 0x80	; 128
    50c4:	bf ef       	ldi	r27, 0xFF	; 255
    50c6:	9b 07       	cpc	r25, r27
    50c8:	41 f0       	breq	.+16     	; 0x50da <pow+0x3c>
    50ca:	99 23       	and	r25, r25
    50cc:	42 f5       	brpl	.+80     	; 0x511e <pow+0x80>
    50ce:	ff 3f       	cpi	r31, 0xFF	; 255
    50d0:	e1 05       	cpc	r30, r1
    50d2:	31 05       	cpc	r19, r1
    50d4:	21 05       	cpc	r18, r1
    50d6:	11 f1       	breq	.+68     	; 0x511c <pow+0x7e>
    50d8:	e8 94       	clt
    50da:	08 94       	sec
    50dc:	e7 95       	ror	r30
    50de:	d9 01       	movw	r26, r18
    50e0:	aa 23       	and	r26, r26
    50e2:	29 f4       	brne	.+10     	; 0x50ee <pow+0x50>
    50e4:	ab 2f       	mov	r26, r27
    50e6:	be 2f       	mov	r27, r30
    50e8:	f8 5f       	subi	r31, 0xF8	; 248
    50ea:	d0 f3       	brcs	.-12     	; 0x50e0 <pow+0x42>
    50ec:	10 c0       	rjmp	.+32     	; 0x510e <pow+0x70>
    50ee:	ff 5f       	subi	r31, 0xFF	; 255
    50f0:	70 f4       	brcc	.+28     	; 0x510e <pow+0x70>
    50f2:	a6 95       	lsr	r26
    50f4:	e0 f7       	brcc	.-8      	; 0x50ee <pow+0x50>
    50f6:	f7 39       	cpi	r31, 0x97	; 151
    50f8:	50 f0       	brcs	.+20     	; 0x510e <pow+0x70>
    50fa:	19 f0       	breq	.+6      	; 0x5102 <pow+0x64>
    50fc:	ff 3a       	cpi	r31, 0xAF	; 175
    50fe:	38 f4       	brcc	.+14     	; 0x510e <pow+0x70>
    5100:	9f 77       	andi	r25, 0x7F	; 127
    5102:	9f 93       	push	r25
    5104:	0c d0       	rcall	.+24     	; 0x511e <pow+0x80>
    5106:	0f 90       	pop	r0
    5108:	07 fc       	sbrc	r0, 7
    510a:	90 58       	subi	r25, 0x80	; 128
    510c:	08 95       	ret
    510e:	3e f0       	brts	.+14     	; 0x511e <pow+0x80>
    5110:	14 cf       	rjmp	.-472    	; 0x4f3a <__fp_nan>
    5112:	60 e0       	ldi	r22, 0x00	; 0
    5114:	70 e0       	ldi	r23, 0x00	; 0
    5116:	80 e8       	ldi	r24, 0x80	; 128
    5118:	9f e3       	ldi	r25, 0x3F	; 63
    511a:	08 95       	ret
    511c:	4f e7       	ldi	r20, 0x7F	; 127
    511e:	9f 77       	andi	r25, 0x7F	; 127
    5120:	5f 93       	push	r21
    5122:	4f 93       	push	r20
    5124:	3f 93       	push	r19
    5126:	2f 93       	push	r18
    5128:	9e d0       	rcall	.+316    	; 0x5266 <log>
    512a:	2f 91       	pop	r18
    512c:	3f 91       	pop	r19
    512e:	4f 91       	pop	r20
    5130:	5f 91       	pop	r21
    5132:	52 df       	rcall	.-348    	; 0x4fd8 <__mulsf3>
    5134:	05 c0       	rjmp	.+10     	; 0x5140 <exp>
    5136:	19 f4       	brne	.+6      	; 0x513e <pow+0xa0>
    5138:	0e f0       	brts	.+2      	; 0x513c <pow+0x9e>
    513a:	f9 ce       	rjmp	.-526    	; 0x4f2e <__fp_inf>
    513c:	42 cf       	rjmp	.-380    	; 0x4fc2 <__fp_zero>
    513e:	fd ce       	rjmp	.-518    	; 0x4f3a <__fp_nan>

00005140 <exp>:
    5140:	26 df       	rcall	.-436    	; 0x4f8e <__fp_splitA>
    5142:	c8 f3       	brcs	.-14     	; 0x5136 <pow+0x98>
    5144:	96 38       	cpi	r25, 0x86	; 134
    5146:	c0 f7       	brcc	.-16     	; 0x5138 <pow+0x9a>
    5148:	07 f8       	bld	r0, 7
    514a:	0f 92       	push	r0
    514c:	e8 94       	clt
    514e:	2b e3       	ldi	r18, 0x3B	; 59
    5150:	3a ea       	ldi	r19, 0xAA	; 170
    5152:	48 eb       	ldi	r20, 0xB8	; 184
    5154:	5f e7       	ldi	r21, 0x7F	; 127
    5156:	4e df       	rcall	.-356    	; 0x4ff4 <__mulsf3_pse>
    5158:	0f 92       	push	r0
    515a:	0f 92       	push	r0
    515c:	0f 92       	push	r0
    515e:	4d b7       	in	r20, 0x3d	; 61
    5160:	5e b7       	in	r21, 0x3e	; 62
    5162:	0f 92       	push	r0
    5164:	c0 d0       	rcall	.+384    	; 0x52e6 <modf>
    5166:	e2 e2       	ldi	r30, 0x22	; 34
    5168:	f2 e0       	ldi	r31, 0x02	; 2
    516a:	16 d0       	rcall	.+44     	; 0x5198 <__fp_powser>
    516c:	4f 91       	pop	r20
    516e:	5f 91       	pop	r21
    5170:	ef 91       	pop	r30
    5172:	ff 91       	pop	r31
    5174:	e5 95       	asr	r30
    5176:	ee 1f       	adc	r30, r30
    5178:	ff 1f       	adc	r31, r31
    517a:	49 f0       	breq	.+18     	; 0x518e <exp+0x4e>
    517c:	fe 57       	subi	r31, 0x7E	; 126
    517e:	e0 68       	ori	r30, 0x80	; 128
    5180:	44 27       	eor	r20, r20
    5182:	ee 0f       	add	r30, r30
    5184:	44 1f       	adc	r20, r20
    5186:	fa 95       	dec	r31
    5188:	e1 f7       	brne	.-8      	; 0x5182 <exp+0x42>
    518a:	41 95       	neg	r20
    518c:	55 0b       	sbc	r21, r21
    518e:	32 d0       	rcall	.+100    	; 0x51f4 <ldexp>
    5190:	0f 90       	pop	r0
    5192:	07 fe       	sbrs	r0, 7
    5194:	26 c0       	rjmp	.+76     	; 0x51e2 <inverse>
    5196:	08 95       	ret

00005198 <__fp_powser>:
    5198:	df 93       	push	r29
    519a:	cf 93       	push	r28
    519c:	1f 93       	push	r17
    519e:	0f 93       	push	r16
    51a0:	ff 92       	push	r15
    51a2:	ef 92       	push	r14
    51a4:	df 92       	push	r13
    51a6:	7b 01       	movw	r14, r22
    51a8:	8c 01       	movw	r16, r24
    51aa:	68 94       	set
    51ac:	05 c0       	rjmp	.+10     	; 0x51b8 <__fp_powser+0x20>
    51ae:	da 2e       	mov	r13, r26
    51b0:	ef 01       	movw	r28, r30
    51b2:	1e df       	rcall	.-452    	; 0x4ff0 <__mulsf3x>
    51b4:	fe 01       	movw	r30, r28
    51b6:	e8 94       	clt
    51b8:	a5 91       	lpm	r26, Z+
    51ba:	25 91       	lpm	r18, Z+
    51bc:	35 91       	lpm	r19, Z+
    51be:	45 91       	lpm	r20, Z+
    51c0:	55 91       	lpm	r21, Z+
    51c2:	ae f3       	brts	.-22     	; 0x51ae <__fp_powser+0x16>
    51c4:	ef 01       	movw	r28, r30
    51c6:	62 dd       	rcall	.-1340   	; 0x4c8c <__addsf3x>
    51c8:	fe 01       	movw	r30, r28
    51ca:	97 01       	movw	r18, r14
    51cc:	a8 01       	movw	r20, r16
    51ce:	da 94       	dec	r13
    51d0:	79 f7       	brne	.-34     	; 0x51b0 <__fp_powser+0x18>
    51d2:	df 90       	pop	r13
    51d4:	ef 90       	pop	r14
    51d6:	ff 90       	pop	r15
    51d8:	0f 91       	pop	r16
    51da:	1f 91       	pop	r17
    51dc:	cf 91       	pop	r28
    51de:	df 91       	pop	r29
    51e0:	08 95       	ret

000051e2 <inverse>:
    51e2:	9b 01       	movw	r18, r22
    51e4:	ac 01       	movw	r20, r24
    51e6:	60 e0       	ldi	r22, 0x00	; 0
    51e8:	70 e0       	ldi	r23, 0x00	; 0
    51ea:	80 e8       	ldi	r24, 0x80	; 128
    51ec:	9f e3       	ldi	r25, 0x3F	; 63
    51ee:	a5 cd       	rjmp	.-1206   	; 0x4d3a <__divsf3>
    51f0:	9e ce       	rjmp	.-708    	; 0x4f2e <__fp_inf>
    51f2:	ac c0       	rjmp	.+344    	; 0x534c <__fp_mpack>

000051f4 <ldexp>:
    51f4:	cc de       	rcall	.-616    	; 0x4f8e <__fp_splitA>
    51f6:	e8 f3       	brcs	.-6      	; 0x51f2 <inverse+0x10>
    51f8:	99 23       	and	r25, r25
    51fa:	d9 f3       	breq	.-10     	; 0x51f2 <inverse+0x10>
    51fc:	94 0f       	add	r25, r20
    51fe:	51 1d       	adc	r21, r1
    5200:	bb f3       	brvs	.-18     	; 0x51f0 <inverse+0xe>
    5202:	91 50       	subi	r25, 0x01	; 1
    5204:	50 40       	sbci	r21, 0x00	; 0
    5206:	94 f0       	brlt	.+36     	; 0x522c <ldexp+0x38>
    5208:	59 f0       	breq	.+22     	; 0x5220 <ldexp+0x2c>
    520a:	88 23       	and	r24, r24
    520c:	32 f0       	brmi	.+12     	; 0x521a <ldexp+0x26>
    520e:	66 0f       	add	r22, r22
    5210:	77 1f       	adc	r23, r23
    5212:	88 1f       	adc	r24, r24
    5214:	91 50       	subi	r25, 0x01	; 1
    5216:	50 40       	sbci	r21, 0x00	; 0
    5218:	c1 f7       	brne	.-16     	; 0x520a <ldexp+0x16>
    521a:	9e 3f       	cpi	r25, 0xFE	; 254
    521c:	51 05       	cpc	r21, r1
    521e:	44 f7       	brge	.-48     	; 0x51f0 <inverse+0xe>
    5220:	88 0f       	add	r24, r24
    5222:	91 1d       	adc	r25, r1
    5224:	96 95       	lsr	r25
    5226:	87 95       	ror	r24
    5228:	97 f9       	bld	r25, 7
    522a:	08 95       	ret
    522c:	5f 3f       	cpi	r21, 0xFF	; 255
    522e:	ac f0       	brlt	.+42     	; 0x525a <ldexp+0x66>
    5230:	98 3e       	cpi	r25, 0xE8	; 232
    5232:	9c f0       	brlt	.+38     	; 0x525a <ldexp+0x66>
    5234:	bb 27       	eor	r27, r27
    5236:	86 95       	lsr	r24
    5238:	77 95       	ror	r23
    523a:	67 95       	ror	r22
    523c:	b7 95       	ror	r27
    523e:	08 f4       	brcc	.+2      	; 0x5242 <ldexp+0x4e>
    5240:	b1 60       	ori	r27, 0x01	; 1
    5242:	93 95       	inc	r25
    5244:	c1 f7       	brne	.-16     	; 0x5236 <ldexp+0x42>
    5246:	bb 0f       	add	r27, r27
    5248:	58 f7       	brcc	.-42     	; 0x5220 <ldexp+0x2c>
    524a:	11 f4       	brne	.+4      	; 0x5250 <ldexp+0x5c>
    524c:	60 ff       	sbrs	r22, 0
    524e:	e8 cf       	rjmp	.-48     	; 0x5220 <ldexp+0x2c>
    5250:	6f 5f       	subi	r22, 0xFF	; 255
    5252:	7f 4f       	sbci	r23, 0xFF	; 255
    5254:	8f 4f       	sbci	r24, 0xFF	; 255
    5256:	9f 4f       	sbci	r25, 0xFF	; 255
    5258:	e3 cf       	rjmp	.-58     	; 0x5220 <ldexp+0x2c>
    525a:	b4 ce       	rjmp	.-664    	; 0x4fc4 <__fp_szero>
    525c:	0e f0       	brts	.+2      	; 0x5260 <ldexp+0x6c>
    525e:	76 c0       	rjmp	.+236    	; 0x534c <__fp_mpack>
    5260:	6c ce       	rjmp	.-808    	; 0x4f3a <__fp_nan>
    5262:	68 94       	set
    5264:	64 ce       	rjmp	.-824    	; 0x4f2e <__fp_inf>

00005266 <log>:
    5266:	93 de       	rcall	.-730    	; 0x4f8e <__fp_splitA>
    5268:	c8 f3       	brcs	.-14     	; 0x525c <ldexp+0x68>
    526a:	99 23       	and	r25, r25
    526c:	d1 f3       	breq	.-12     	; 0x5262 <ldexp+0x6e>
    526e:	c6 f3       	brts	.-16     	; 0x5260 <ldexp+0x6c>
    5270:	df 93       	push	r29
    5272:	cf 93       	push	r28
    5274:	1f 93       	push	r17
    5276:	0f 93       	push	r16
    5278:	ff 92       	push	r15
    527a:	c9 2f       	mov	r28, r25
    527c:	dd 27       	eor	r29, r29
    527e:	88 23       	and	r24, r24
    5280:	2a f0       	brmi	.+10     	; 0x528c <log+0x26>
    5282:	21 97       	sbiw	r28, 0x01	; 1
    5284:	66 0f       	add	r22, r22
    5286:	77 1f       	adc	r23, r23
    5288:	88 1f       	adc	r24, r24
    528a:	da f7       	brpl	.-10     	; 0x5282 <log+0x1c>
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	40 e8       	ldi	r20, 0x80	; 128
    5292:	5f eb       	ldi	r21, 0xBF	; 191
    5294:	9f e3       	ldi	r25, 0x3F	; 63
    5296:	88 39       	cpi	r24, 0x98	; 152
    5298:	20 f0       	brcs	.+8      	; 0x52a2 <log+0x3c>
    529a:	80 3e       	cpi	r24, 0xE0	; 224
    529c:	30 f0       	brcs	.+12     	; 0x52aa <log+0x44>
    529e:	21 96       	adiw	r28, 0x01	; 1
    52a0:	8f 77       	andi	r24, 0x7F	; 127
    52a2:	e3 dc       	rcall	.-1594   	; 0x4c6a <__addsf3>
    52a4:	ea e4       	ldi	r30, 0x4A	; 74
    52a6:	f2 e0       	ldi	r31, 0x02	; 2
    52a8:	03 c0       	rjmp	.+6      	; 0x52b0 <log+0x4a>
    52aa:	df dc       	rcall	.-1602   	; 0x4c6a <__addsf3>
    52ac:	e7 e7       	ldi	r30, 0x77	; 119
    52ae:	f2 e0       	ldi	r31, 0x02	; 2
    52b0:	73 df       	rcall	.-282    	; 0x5198 <__fp_powser>
    52b2:	8b 01       	movw	r16, r22
    52b4:	be 01       	movw	r22, r28
    52b6:	ec 01       	movw	r28, r24
    52b8:	fb 2e       	mov	r15, r27
    52ba:	6f 57       	subi	r22, 0x7F	; 127
    52bc:	71 09       	sbc	r23, r1
    52be:	75 95       	asr	r23
    52c0:	77 1f       	adc	r23, r23
    52c2:	88 0b       	sbc	r24, r24
    52c4:	99 0b       	sbc	r25, r25
    52c6:	d4 dd       	rcall	.-1112   	; 0x4e70 <__floatsisf>
    52c8:	28 e1       	ldi	r18, 0x18	; 24
    52ca:	32 e7       	ldi	r19, 0x72	; 114
    52cc:	41 e3       	ldi	r20, 0x31	; 49
    52ce:	5f e3       	ldi	r21, 0x3F	; 63
    52d0:	8f de       	rcall	.-738    	; 0x4ff0 <__mulsf3x>
    52d2:	af 2d       	mov	r26, r15
    52d4:	98 01       	movw	r18, r16
    52d6:	ae 01       	movw	r20, r28
    52d8:	ff 90       	pop	r15
    52da:	0f 91       	pop	r16
    52dc:	1f 91       	pop	r17
    52de:	cf 91       	pop	r28
    52e0:	df 91       	pop	r29
    52e2:	d4 dc       	rcall	.-1624   	; 0x4c8c <__addsf3x>
    52e4:	3b ce       	rjmp	.-906    	; 0x4f5c <__fp_round>

000052e6 <modf>:
    52e6:	fa 01       	movw	r30, r20
    52e8:	dc 01       	movw	r26, r24
    52ea:	aa 0f       	add	r26, r26
    52ec:	bb 1f       	adc	r27, r27
    52ee:	9b 01       	movw	r18, r22
    52f0:	ac 01       	movw	r20, r24
    52f2:	bf 57       	subi	r27, 0x7F	; 127
    52f4:	28 f4       	brcc	.+10     	; 0x5300 <modf+0x1a>
    52f6:	22 27       	eor	r18, r18
    52f8:	33 27       	eor	r19, r19
    52fa:	44 27       	eor	r20, r20
    52fc:	50 78       	andi	r21, 0x80	; 128
    52fe:	1f c0       	rjmp	.+62     	; 0x533e <modf+0x58>
    5300:	b7 51       	subi	r27, 0x17	; 23
    5302:	88 f4       	brcc	.+34     	; 0x5326 <modf+0x40>
    5304:	ab 2f       	mov	r26, r27
    5306:	00 24       	eor	r0, r0
    5308:	46 95       	lsr	r20
    530a:	37 95       	ror	r19
    530c:	27 95       	ror	r18
    530e:	01 1c       	adc	r0, r1
    5310:	a3 95       	inc	r26
    5312:	d2 f3       	brmi	.-12     	; 0x5308 <modf+0x22>
    5314:	00 20       	and	r0, r0
    5316:	69 f0       	breq	.+26     	; 0x5332 <modf+0x4c>
    5318:	22 0f       	add	r18, r18
    531a:	33 1f       	adc	r19, r19
    531c:	44 1f       	adc	r20, r20
    531e:	b3 95       	inc	r27
    5320:	da f3       	brmi	.-10     	; 0x5318 <modf+0x32>
    5322:	0d d0       	rcall	.+26     	; 0x533e <modf+0x58>
    5324:	a1 cc       	rjmp	.-1726   	; 0x4c68 <__subsf3>
    5326:	61 30       	cpi	r22, 0x01	; 1
    5328:	71 05       	cpc	r23, r1
    532a:	a0 e8       	ldi	r26, 0x80	; 128
    532c:	8a 07       	cpc	r24, r26
    532e:	b9 46       	sbci	r27, 0x69	; 105
    5330:	30 f4       	brcc	.+12     	; 0x533e <modf+0x58>
    5332:	9b 01       	movw	r18, r22
    5334:	ac 01       	movw	r20, r24
    5336:	66 27       	eor	r22, r22
    5338:	77 27       	eor	r23, r23
    533a:	88 27       	eor	r24, r24
    533c:	90 78       	andi	r25, 0x80	; 128
    533e:	30 96       	adiw	r30, 0x00	; 0
    5340:	21 f0       	breq	.+8      	; 0x534a <modf+0x64>
    5342:	20 83       	st	Z, r18
    5344:	31 83       	std	Z+1, r19	; 0x01
    5346:	42 83       	std	Z+2, r20	; 0x02
    5348:	53 83       	std	Z+3, r21	; 0x03
    534a:	08 95       	ret

0000534c <__fp_mpack>:
    534c:	9f 3f       	cpi	r25, 0xFF	; 255
    534e:	31 f0       	breq	.+12     	; 0x535c <__fp_mpack_finite+0xc>

00005350 <__fp_mpack_finite>:
    5350:	91 50       	subi	r25, 0x01	; 1
    5352:	20 f4       	brcc	.+8      	; 0x535c <__fp_mpack_finite+0xc>
    5354:	87 95       	ror	r24
    5356:	77 95       	ror	r23
    5358:	67 95       	ror	r22
    535a:	b7 95       	ror	r27
    535c:	88 0f       	add	r24, r24
    535e:	91 1d       	adc	r25, r1
    5360:	96 95       	lsr	r25
    5362:	87 95       	ror	r24
    5364:	97 f9       	bld	r25, 7
    5366:	08 95       	ret

00005368 <__mulsi3>:
    5368:	db 01       	movw	r26, r22
    536a:	8f 93       	push	r24
    536c:	9f 93       	push	r25
    536e:	88 d0       	rcall	.+272    	; 0x5480 <__muluhisi3>
    5370:	bf 91       	pop	r27
    5372:	af 91       	pop	r26
    5374:	a2 9f       	mul	r26, r18
    5376:	80 0d       	add	r24, r0
    5378:	91 1d       	adc	r25, r1
    537a:	a3 9f       	mul	r26, r19
    537c:	90 0d       	add	r25, r0
    537e:	b2 9f       	mul	r27, r18
    5380:	90 0d       	add	r25, r0
    5382:	11 24       	eor	r1, r1
    5384:	08 95       	ret

00005386 <__udivmodhi4>:
    5386:	aa 1b       	sub	r26, r26
    5388:	bb 1b       	sub	r27, r27
    538a:	51 e1       	ldi	r21, 0x11	; 17
    538c:	07 c0       	rjmp	.+14     	; 0x539c <__udivmodhi4_ep>

0000538e <__udivmodhi4_loop>:
    538e:	aa 1f       	adc	r26, r26
    5390:	bb 1f       	adc	r27, r27
    5392:	a6 17       	cp	r26, r22
    5394:	b7 07       	cpc	r27, r23
    5396:	10 f0       	brcs	.+4      	; 0x539c <__udivmodhi4_ep>
    5398:	a6 1b       	sub	r26, r22
    539a:	b7 0b       	sbc	r27, r23

0000539c <__udivmodhi4_ep>:
    539c:	88 1f       	adc	r24, r24
    539e:	99 1f       	adc	r25, r25
    53a0:	5a 95       	dec	r21
    53a2:	a9 f7       	brne	.-22     	; 0x538e <__udivmodhi4_loop>
    53a4:	80 95       	com	r24
    53a6:	90 95       	com	r25
    53a8:	bc 01       	movw	r22, r24
    53aa:	cd 01       	movw	r24, r26
    53ac:	08 95       	ret

000053ae <__divmodhi4>:
    53ae:	97 fb       	bst	r25, 7
    53b0:	07 2e       	mov	r0, r23
    53b2:	16 f4       	brtc	.+4      	; 0x53b8 <__divmodhi4+0xa>
    53b4:	00 94       	com	r0
    53b6:	06 d0       	rcall	.+12     	; 0x53c4 <__divmodhi4_neg1>
    53b8:	77 fd       	sbrc	r23, 7
    53ba:	08 d0       	rcall	.+16     	; 0x53cc <__divmodhi4_neg2>
    53bc:	e4 df       	rcall	.-56     	; 0x5386 <__udivmodhi4>
    53be:	07 fc       	sbrc	r0, 7
    53c0:	05 d0       	rcall	.+10     	; 0x53cc <__divmodhi4_neg2>
    53c2:	3e f4       	brtc	.+14     	; 0x53d2 <__divmodhi4_exit>

000053c4 <__divmodhi4_neg1>:
    53c4:	90 95       	com	r25
    53c6:	81 95       	neg	r24
    53c8:	9f 4f       	sbci	r25, 0xFF	; 255
    53ca:	08 95       	ret

000053cc <__divmodhi4_neg2>:
    53cc:	70 95       	com	r23
    53ce:	61 95       	neg	r22
    53d0:	7f 4f       	sbci	r23, 0xFF	; 255

000053d2 <__divmodhi4_exit>:
    53d2:	08 95       	ret

000053d4 <__udivmodsi4>:
    53d4:	a1 e2       	ldi	r26, 0x21	; 33
    53d6:	1a 2e       	mov	r1, r26
    53d8:	aa 1b       	sub	r26, r26
    53da:	bb 1b       	sub	r27, r27
    53dc:	fd 01       	movw	r30, r26
    53de:	0d c0       	rjmp	.+26     	; 0x53fa <__udivmodsi4_ep>

000053e0 <__udivmodsi4_loop>:
    53e0:	aa 1f       	adc	r26, r26
    53e2:	bb 1f       	adc	r27, r27
    53e4:	ee 1f       	adc	r30, r30
    53e6:	ff 1f       	adc	r31, r31
    53e8:	a2 17       	cp	r26, r18
    53ea:	b3 07       	cpc	r27, r19
    53ec:	e4 07       	cpc	r30, r20
    53ee:	f5 07       	cpc	r31, r21
    53f0:	20 f0       	brcs	.+8      	; 0x53fa <__udivmodsi4_ep>
    53f2:	a2 1b       	sub	r26, r18
    53f4:	b3 0b       	sbc	r27, r19
    53f6:	e4 0b       	sbc	r30, r20
    53f8:	f5 0b       	sbc	r31, r21

000053fa <__udivmodsi4_ep>:
    53fa:	66 1f       	adc	r22, r22
    53fc:	77 1f       	adc	r23, r23
    53fe:	88 1f       	adc	r24, r24
    5400:	99 1f       	adc	r25, r25
    5402:	1a 94       	dec	r1
    5404:	69 f7       	brne	.-38     	; 0x53e0 <__udivmodsi4_loop>
    5406:	60 95       	com	r22
    5408:	70 95       	com	r23
    540a:	80 95       	com	r24
    540c:	90 95       	com	r25
    540e:	9b 01       	movw	r18, r22
    5410:	ac 01       	movw	r20, r24
    5412:	bd 01       	movw	r22, r26
    5414:	cf 01       	movw	r24, r30
    5416:	08 95       	ret

00005418 <__divmodsi4>:
    5418:	05 2e       	mov	r0, r21
    541a:	97 fb       	bst	r25, 7
    541c:	16 f4       	brtc	.+4      	; 0x5422 <__divmodsi4+0xa>
    541e:	00 94       	com	r0
    5420:	0f d0       	rcall	.+30     	; 0x5440 <__negsi2>
    5422:	57 fd       	sbrc	r21, 7
    5424:	05 d0       	rcall	.+10     	; 0x5430 <__divmodsi4_neg2>
    5426:	d6 df       	rcall	.-84     	; 0x53d4 <__udivmodsi4>
    5428:	07 fc       	sbrc	r0, 7
    542a:	02 d0       	rcall	.+4      	; 0x5430 <__divmodsi4_neg2>
    542c:	46 f4       	brtc	.+16     	; 0x543e <__divmodsi4_exit>
    542e:	08 c0       	rjmp	.+16     	; 0x5440 <__negsi2>

00005430 <__divmodsi4_neg2>:
    5430:	50 95       	com	r21
    5432:	40 95       	com	r20
    5434:	30 95       	com	r19
    5436:	21 95       	neg	r18
    5438:	3f 4f       	sbci	r19, 0xFF	; 255
    543a:	4f 4f       	sbci	r20, 0xFF	; 255
    543c:	5f 4f       	sbci	r21, 0xFF	; 255

0000543e <__divmodsi4_exit>:
    543e:	08 95       	ret

00005440 <__negsi2>:
    5440:	90 95       	com	r25
    5442:	80 95       	com	r24
    5444:	70 95       	com	r23
    5446:	61 95       	neg	r22
    5448:	7f 4f       	sbci	r23, 0xFF	; 255
    544a:	8f 4f       	sbci	r24, 0xFF	; 255
    544c:	9f 4f       	sbci	r25, 0xFF	; 255
    544e:	08 95       	ret

00005450 <__tablejump2__>:
    5450:	ee 0f       	add	r30, r30
    5452:	ff 1f       	adc	r31, r31
    5454:	88 1f       	adc	r24, r24
    5456:	8b bf       	out	0x3b, r24	; 59
    5458:	07 90       	elpm	r0, Z+
    545a:	f6 91       	elpm	r31, Z
    545c:	e0 2d       	mov	r30, r0
    545e:	1b be       	out	0x3b, r1	; 59
    5460:	19 94       	eijmp

00005462 <__umulhisi3>:
    5462:	a2 9f       	mul	r26, r18
    5464:	b0 01       	movw	r22, r0
    5466:	b3 9f       	mul	r27, r19
    5468:	c0 01       	movw	r24, r0
    546a:	a3 9f       	mul	r26, r19
    546c:	70 0d       	add	r23, r0
    546e:	81 1d       	adc	r24, r1
    5470:	11 24       	eor	r1, r1
    5472:	91 1d       	adc	r25, r1
    5474:	b2 9f       	mul	r27, r18
    5476:	70 0d       	add	r23, r0
    5478:	81 1d       	adc	r24, r1
    547a:	11 24       	eor	r1, r1
    547c:	91 1d       	adc	r25, r1
    547e:	08 95       	ret

00005480 <__muluhisi3>:
    5480:	f0 df       	rcall	.-32     	; 0x5462 <__umulhisi3>
    5482:	a5 9f       	mul	r26, r21
    5484:	90 0d       	add	r25, r0
    5486:	b4 9f       	mul	r27, r20
    5488:	90 0d       	add	r25, r0
    548a:	a4 9f       	mul	r26, r20
    548c:	80 0d       	add	r24, r0
    548e:	91 1d       	adc	r25, r1
    5490:	11 24       	eor	r1, r1
    5492:	08 95       	ret

00005494 <__ashldi3>:
    5494:	0f 93       	push	r16
    5496:	08 30       	cpi	r16, 0x08	; 8
    5498:	90 f0       	brcs	.+36     	; 0x54be <__ashldi3+0x2a>
    549a:	98 2f       	mov	r25, r24
    549c:	87 2f       	mov	r24, r23
    549e:	76 2f       	mov	r23, r22
    54a0:	65 2f       	mov	r22, r21
    54a2:	54 2f       	mov	r21, r20
    54a4:	43 2f       	mov	r20, r19
    54a6:	32 2f       	mov	r19, r18
    54a8:	22 27       	eor	r18, r18
    54aa:	08 50       	subi	r16, 0x08	; 8
    54ac:	f4 cf       	rjmp	.-24     	; 0x5496 <__ashldi3+0x2>
    54ae:	22 0f       	add	r18, r18
    54b0:	33 1f       	adc	r19, r19
    54b2:	44 1f       	adc	r20, r20
    54b4:	55 1f       	adc	r21, r21
    54b6:	66 1f       	adc	r22, r22
    54b8:	77 1f       	adc	r23, r23
    54ba:	88 1f       	adc	r24, r24
    54bc:	99 1f       	adc	r25, r25
    54be:	0a 95       	dec	r16
    54c0:	b2 f7       	brpl	.-20     	; 0x54ae <__ashldi3+0x1a>
    54c2:	0f 91       	pop	r16
    54c4:	08 95       	ret

000054c6 <__ashrdi3>:
    54c6:	97 fb       	bst	r25, 7
    54c8:	10 f8       	bld	r1, 0

000054ca <__lshrdi3>:
    54ca:	16 94       	lsr	r1
    54cc:	00 08       	sbc	r0, r0
    54ce:	0f 93       	push	r16
    54d0:	08 30       	cpi	r16, 0x08	; 8
    54d2:	98 f0       	brcs	.+38     	; 0x54fa <__lshrdi3+0x30>
    54d4:	08 50       	subi	r16, 0x08	; 8
    54d6:	23 2f       	mov	r18, r19
    54d8:	34 2f       	mov	r19, r20
    54da:	45 2f       	mov	r20, r21
    54dc:	56 2f       	mov	r21, r22
    54de:	67 2f       	mov	r22, r23
    54e0:	78 2f       	mov	r23, r24
    54e2:	89 2f       	mov	r24, r25
    54e4:	90 2d       	mov	r25, r0
    54e6:	f4 cf       	rjmp	.-24     	; 0x54d0 <__lshrdi3+0x6>
    54e8:	05 94       	asr	r0
    54ea:	97 95       	ror	r25
    54ec:	87 95       	ror	r24
    54ee:	77 95       	ror	r23
    54f0:	67 95       	ror	r22
    54f2:	57 95       	ror	r21
    54f4:	47 95       	ror	r20
    54f6:	37 95       	ror	r19
    54f8:	27 95       	ror	r18
    54fa:	0a 95       	dec	r16
    54fc:	aa f7       	brpl	.-22     	; 0x54e8 <__lshrdi3+0x1e>
    54fe:	0f 91       	pop	r16
    5500:	08 95       	ret

00005502 <fdevopen>:
    5502:	0f 93       	push	r16
    5504:	1f 93       	push	r17
    5506:	cf 93       	push	r28
    5508:	df 93       	push	r29
    550a:	00 97       	sbiw	r24, 0x00	; 0
    550c:	31 f4       	brne	.+12     	; 0x551a <fdevopen+0x18>
    550e:	61 15       	cp	r22, r1
    5510:	71 05       	cpc	r23, r1
    5512:	19 f4       	brne	.+6      	; 0x551a <fdevopen+0x18>
    5514:	80 e0       	ldi	r24, 0x00	; 0
    5516:	90 e0       	ldi	r25, 0x00	; 0
    5518:	39 c0       	rjmp	.+114    	; 0x558c <fdevopen+0x8a>
    551a:	8b 01       	movw	r16, r22
    551c:	ec 01       	movw	r28, r24
    551e:	6e e0       	ldi	r22, 0x0E	; 14
    5520:	70 e0       	ldi	r23, 0x00	; 0
    5522:	81 e0       	ldi	r24, 0x01	; 1
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	47 d5       	rcall	.+2702   	; 0x5fb6 <calloc>
    5528:	fc 01       	movw	r30, r24
    552a:	89 2b       	or	r24, r25
    552c:	99 f3       	breq	.-26     	; 0x5514 <fdevopen+0x12>
    552e:	80 e8       	ldi	r24, 0x80	; 128
    5530:	83 83       	std	Z+3, r24	; 0x03
    5532:	01 15       	cp	r16, r1
    5534:	11 05       	cpc	r17, r1
    5536:	71 f0       	breq	.+28     	; 0x5554 <fdevopen+0x52>
    5538:	02 87       	std	Z+10, r16	; 0x0a
    553a:	13 87       	std	Z+11, r17	; 0x0b
    553c:	81 e8       	ldi	r24, 0x81	; 129
    553e:	83 83       	std	Z+3, r24	; 0x03
    5540:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <__iob>
    5544:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <__iob+0x1>
    5548:	89 2b       	or	r24, r25
    554a:	21 f4       	brne	.+8      	; 0x5554 <fdevopen+0x52>
    554c:	e0 93 15 22 	sts	0x2215, r30	; 0x802215 <__iob>
    5550:	f0 93 16 22 	sts	0x2216, r31	; 0x802216 <__iob+0x1>
    5554:	20 97       	sbiw	r28, 0x00	; 0
    5556:	c9 f0       	breq	.+50     	; 0x558a <fdevopen+0x88>
    5558:	c0 87       	std	Z+8, r28	; 0x08
    555a:	d1 87       	std	Z+9, r29	; 0x09
    555c:	83 81       	ldd	r24, Z+3	; 0x03
    555e:	82 60       	ori	r24, 0x02	; 2
    5560:	83 83       	std	Z+3, r24	; 0x03
    5562:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <__iob+0x2>
    5566:	90 91 18 22 	lds	r25, 0x2218	; 0x802218 <__iob+0x3>
    556a:	89 2b       	or	r24, r25
    556c:	71 f4       	brne	.+28     	; 0x558a <fdevopen+0x88>
    556e:	e0 93 17 22 	sts	0x2217, r30	; 0x802217 <__iob+0x2>
    5572:	f0 93 18 22 	sts	0x2218, r31	; 0x802218 <__iob+0x3>
    5576:	80 91 19 22 	lds	r24, 0x2219	; 0x802219 <__iob+0x4>
    557a:	90 91 1a 22 	lds	r25, 0x221A	; 0x80221a <__iob+0x5>
    557e:	89 2b       	or	r24, r25
    5580:	21 f4       	brne	.+8      	; 0x558a <fdevopen+0x88>
    5582:	e0 93 19 22 	sts	0x2219, r30	; 0x802219 <__iob+0x4>
    5586:	f0 93 1a 22 	sts	0x221A, r31	; 0x80221a <__iob+0x5>
    558a:	cf 01       	movw	r24, r30
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	1f 91       	pop	r17
    5592:	0f 91       	pop	r16
    5594:	08 95       	ret

00005596 <printf>:
    5596:	cf 93       	push	r28
    5598:	df 93       	push	r29
    559a:	cd b7       	in	r28, 0x3d	; 61
    559c:	de b7       	in	r29, 0x3e	; 62
    559e:	ae 01       	movw	r20, r28
    55a0:	4a 5f       	subi	r20, 0xFA	; 250
    55a2:	5f 4f       	sbci	r21, 0xFF	; 255
    55a4:	fa 01       	movw	r30, r20
    55a6:	61 91       	ld	r22, Z+
    55a8:	71 91       	ld	r23, Z+
    55aa:	af 01       	movw	r20, r30
    55ac:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <__iob+0x2>
    55b0:	90 91 18 22 	lds	r25, 0x2218	; 0x802218 <__iob+0x3>
    55b4:	46 d0       	rcall	.+140    	; 0x5642 <vfprintf>
    55b6:	df 91       	pop	r29
    55b8:	cf 91       	pop	r28
    55ba:	08 95       	ret

000055bc <sprintf>:
    55bc:	0f 93       	push	r16
    55be:	1f 93       	push	r17
    55c0:	cf 93       	push	r28
    55c2:	df 93       	push	r29
    55c4:	cd b7       	in	r28, 0x3d	; 61
    55c6:	de b7       	in	r29, 0x3e	; 62
    55c8:	2e 97       	sbiw	r28, 0x0e	; 14
    55ca:	cd bf       	out	0x3d, r28	; 61
    55cc:	de bf       	out	0x3e, r29	; 62
    55ce:	0e 89       	ldd	r16, Y+22	; 0x16
    55d0:	1f 89       	ldd	r17, Y+23	; 0x17
    55d2:	86 e0       	ldi	r24, 0x06	; 6
    55d4:	8c 83       	std	Y+4, r24	; 0x04
    55d6:	09 83       	std	Y+1, r16	; 0x01
    55d8:	1a 83       	std	Y+2, r17	; 0x02
    55da:	8f ef       	ldi	r24, 0xFF	; 255
    55dc:	9f e7       	ldi	r25, 0x7F	; 127
    55de:	8d 83       	std	Y+5, r24	; 0x05
    55e0:	9e 83       	std	Y+6, r25	; 0x06
    55e2:	ae 01       	movw	r20, r28
    55e4:	46 5e       	subi	r20, 0xE6	; 230
    55e6:	5f 4f       	sbci	r21, 0xFF	; 255
    55e8:	68 8d       	ldd	r22, Y+24	; 0x18
    55ea:	79 8d       	ldd	r23, Y+25	; 0x19
    55ec:	ce 01       	movw	r24, r28
    55ee:	01 96       	adiw	r24, 0x01	; 1
    55f0:	28 d0       	rcall	.+80     	; 0x5642 <vfprintf>
    55f2:	ef 81       	ldd	r30, Y+7	; 0x07
    55f4:	f8 85       	ldd	r31, Y+8	; 0x08
    55f6:	e0 0f       	add	r30, r16
    55f8:	f1 1f       	adc	r31, r17
    55fa:	10 82       	st	Z, r1
    55fc:	2e 96       	adiw	r28, 0x0e	; 14
    55fe:	cd bf       	out	0x3d, r28	; 61
    5600:	de bf       	out	0x3e, r29	; 62
    5602:	df 91       	pop	r29
    5604:	cf 91       	pop	r28
    5606:	1f 91       	pop	r17
    5608:	0f 91       	pop	r16
    560a:	08 95       	ret

0000560c <sscanf>:
    560c:	cf 93       	push	r28
    560e:	df 93       	push	r29
    5610:	cd b7       	in	r28, 0x3d	; 61
    5612:	de b7       	in	r29, 0x3e	; 62
    5614:	2e 97       	sbiw	r28, 0x0e	; 14
    5616:	cd bf       	out	0x3d, r28	; 61
    5618:	de bf       	out	0x3e, r29	; 62
    561a:	85 e0       	ldi	r24, 0x05	; 5
    561c:	8c 83       	std	Y+4, r24	; 0x04
    561e:	8c 89       	ldd	r24, Y+20	; 0x14
    5620:	9d 89       	ldd	r25, Y+21	; 0x15
    5622:	89 83       	std	Y+1, r24	; 0x01
    5624:	9a 83       	std	Y+2, r25	; 0x02
    5626:	ae 01       	movw	r20, r28
    5628:	48 5e       	subi	r20, 0xE8	; 232
    562a:	5f 4f       	sbci	r21, 0xFF	; 255
    562c:	6e 89       	ldd	r22, Y+22	; 0x16
    562e:	7f 89       	ldd	r23, Y+23	; 0x17
    5630:	ce 01       	movw	r24, r28
    5632:	01 96       	adiw	r24, 0x01	; 1
    5634:	a9 d3       	rcall	.+1874   	; 0x5d88 <vfscanf>
    5636:	2e 96       	adiw	r28, 0x0e	; 14
    5638:	cd bf       	out	0x3d, r28	; 61
    563a:	de bf       	out	0x3e, r29	; 62
    563c:	df 91       	pop	r29
    563e:	cf 91       	pop	r28
    5640:	08 95       	ret

00005642 <vfprintf>:
    5642:	2f 92       	push	r2
    5644:	3f 92       	push	r3
    5646:	4f 92       	push	r4
    5648:	5f 92       	push	r5
    564a:	6f 92       	push	r6
    564c:	7f 92       	push	r7
    564e:	8f 92       	push	r8
    5650:	9f 92       	push	r9
    5652:	af 92       	push	r10
    5654:	bf 92       	push	r11
    5656:	cf 92       	push	r12
    5658:	df 92       	push	r13
    565a:	ef 92       	push	r14
    565c:	ff 92       	push	r15
    565e:	0f 93       	push	r16
    5660:	1f 93       	push	r17
    5662:	cf 93       	push	r28
    5664:	df 93       	push	r29
    5666:	cd b7       	in	r28, 0x3d	; 61
    5668:	de b7       	in	r29, 0x3e	; 62
    566a:	2b 97       	sbiw	r28, 0x0b	; 11
    566c:	cd bf       	out	0x3d, r28	; 61
    566e:	de bf       	out	0x3e, r29	; 62
    5670:	6c 01       	movw	r12, r24
    5672:	7b 01       	movw	r14, r22
    5674:	8a 01       	movw	r16, r20
    5676:	fc 01       	movw	r30, r24
    5678:	16 82       	std	Z+6, r1	; 0x06
    567a:	17 82       	std	Z+7, r1	; 0x07
    567c:	83 81       	ldd	r24, Z+3	; 0x03
    567e:	81 ff       	sbrs	r24, 1
    5680:	bf c1       	rjmp	.+894    	; 0x5a00 <vfprintf+0x3be>
    5682:	ce 01       	movw	r24, r28
    5684:	01 96       	adiw	r24, 0x01	; 1
    5686:	3c 01       	movw	r6, r24
    5688:	f6 01       	movw	r30, r12
    568a:	93 81       	ldd	r25, Z+3	; 0x03
    568c:	f7 01       	movw	r30, r14
    568e:	93 fd       	sbrc	r25, 3
    5690:	85 91       	lpm	r24, Z+
    5692:	93 ff       	sbrs	r25, 3
    5694:	81 91       	ld	r24, Z+
    5696:	7f 01       	movw	r14, r30
    5698:	88 23       	and	r24, r24
    569a:	09 f4       	brne	.+2      	; 0x569e <vfprintf+0x5c>
    569c:	ad c1       	rjmp	.+858    	; 0x59f8 <vfprintf+0x3b6>
    569e:	85 32       	cpi	r24, 0x25	; 37
    56a0:	39 f4       	brne	.+14     	; 0x56b0 <vfprintf+0x6e>
    56a2:	93 fd       	sbrc	r25, 3
    56a4:	85 91       	lpm	r24, Z+
    56a6:	93 ff       	sbrs	r25, 3
    56a8:	81 91       	ld	r24, Z+
    56aa:	7f 01       	movw	r14, r30
    56ac:	85 32       	cpi	r24, 0x25	; 37
    56ae:	21 f4       	brne	.+8      	; 0x56b8 <vfprintf+0x76>
    56b0:	b6 01       	movw	r22, r12
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	29 d6       	rcall	.+3154   	; 0x6308 <fputc>
    56b6:	e8 cf       	rjmp	.-48     	; 0x5688 <vfprintf+0x46>
    56b8:	91 2c       	mov	r9, r1
    56ba:	21 2c       	mov	r2, r1
    56bc:	31 2c       	mov	r3, r1
    56be:	ff e1       	ldi	r31, 0x1F	; 31
    56c0:	f3 15       	cp	r31, r3
    56c2:	d8 f0       	brcs	.+54     	; 0x56fa <vfprintf+0xb8>
    56c4:	8b 32       	cpi	r24, 0x2B	; 43
    56c6:	79 f0       	breq	.+30     	; 0x56e6 <vfprintf+0xa4>
    56c8:	38 f4       	brcc	.+14     	; 0x56d8 <vfprintf+0x96>
    56ca:	80 32       	cpi	r24, 0x20	; 32
    56cc:	79 f0       	breq	.+30     	; 0x56ec <vfprintf+0xaa>
    56ce:	83 32       	cpi	r24, 0x23	; 35
    56d0:	a1 f4       	brne	.+40     	; 0x56fa <vfprintf+0xb8>
    56d2:	23 2d       	mov	r18, r3
    56d4:	20 61       	ori	r18, 0x10	; 16
    56d6:	1d c0       	rjmp	.+58     	; 0x5712 <vfprintf+0xd0>
    56d8:	8d 32       	cpi	r24, 0x2D	; 45
    56da:	61 f0       	breq	.+24     	; 0x56f4 <vfprintf+0xb2>
    56dc:	80 33       	cpi	r24, 0x30	; 48
    56de:	69 f4       	brne	.+26     	; 0x56fa <vfprintf+0xb8>
    56e0:	23 2d       	mov	r18, r3
    56e2:	21 60       	ori	r18, 0x01	; 1
    56e4:	16 c0       	rjmp	.+44     	; 0x5712 <vfprintf+0xd0>
    56e6:	83 2d       	mov	r24, r3
    56e8:	82 60       	ori	r24, 0x02	; 2
    56ea:	38 2e       	mov	r3, r24
    56ec:	e3 2d       	mov	r30, r3
    56ee:	e4 60       	ori	r30, 0x04	; 4
    56f0:	3e 2e       	mov	r3, r30
    56f2:	2a c0       	rjmp	.+84     	; 0x5748 <vfprintf+0x106>
    56f4:	f3 2d       	mov	r31, r3
    56f6:	f8 60       	ori	r31, 0x08	; 8
    56f8:	1d c0       	rjmp	.+58     	; 0x5734 <vfprintf+0xf2>
    56fa:	37 fc       	sbrc	r3, 7
    56fc:	2d c0       	rjmp	.+90     	; 0x5758 <vfprintf+0x116>
    56fe:	20 ed       	ldi	r18, 0xD0	; 208
    5700:	28 0f       	add	r18, r24
    5702:	2a 30       	cpi	r18, 0x0A	; 10
    5704:	40 f0       	brcs	.+16     	; 0x5716 <vfprintf+0xd4>
    5706:	8e 32       	cpi	r24, 0x2E	; 46
    5708:	b9 f4       	brne	.+46     	; 0x5738 <vfprintf+0xf6>
    570a:	36 fc       	sbrc	r3, 6
    570c:	75 c1       	rjmp	.+746    	; 0x59f8 <vfprintf+0x3b6>
    570e:	23 2d       	mov	r18, r3
    5710:	20 64       	ori	r18, 0x40	; 64
    5712:	32 2e       	mov	r3, r18
    5714:	19 c0       	rjmp	.+50     	; 0x5748 <vfprintf+0x106>
    5716:	36 fe       	sbrs	r3, 6
    5718:	06 c0       	rjmp	.+12     	; 0x5726 <vfprintf+0xe4>
    571a:	8a e0       	ldi	r24, 0x0A	; 10
    571c:	98 9e       	mul	r9, r24
    571e:	20 0d       	add	r18, r0
    5720:	11 24       	eor	r1, r1
    5722:	92 2e       	mov	r9, r18
    5724:	11 c0       	rjmp	.+34     	; 0x5748 <vfprintf+0x106>
    5726:	ea e0       	ldi	r30, 0x0A	; 10
    5728:	2e 9e       	mul	r2, r30
    572a:	20 0d       	add	r18, r0
    572c:	11 24       	eor	r1, r1
    572e:	22 2e       	mov	r2, r18
    5730:	f3 2d       	mov	r31, r3
    5732:	f0 62       	ori	r31, 0x20	; 32
    5734:	3f 2e       	mov	r3, r31
    5736:	08 c0       	rjmp	.+16     	; 0x5748 <vfprintf+0x106>
    5738:	8c 36       	cpi	r24, 0x6C	; 108
    573a:	21 f4       	brne	.+8      	; 0x5744 <vfprintf+0x102>
    573c:	83 2d       	mov	r24, r3
    573e:	80 68       	ori	r24, 0x80	; 128
    5740:	38 2e       	mov	r3, r24
    5742:	02 c0       	rjmp	.+4      	; 0x5748 <vfprintf+0x106>
    5744:	88 36       	cpi	r24, 0x68	; 104
    5746:	41 f4       	brne	.+16     	; 0x5758 <vfprintf+0x116>
    5748:	f7 01       	movw	r30, r14
    574a:	93 fd       	sbrc	r25, 3
    574c:	85 91       	lpm	r24, Z+
    574e:	93 ff       	sbrs	r25, 3
    5750:	81 91       	ld	r24, Z+
    5752:	7f 01       	movw	r14, r30
    5754:	81 11       	cpse	r24, r1
    5756:	b3 cf       	rjmp	.-154    	; 0x56be <vfprintf+0x7c>
    5758:	98 2f       	mov	r25, r24
    575a:	9f 7d       	andi	r25, 0xDF	; 223
    575c:	95 54       	subi	r25, 0x45	; 69
    575e:	93 30       	cpi	r25, 0x03	; 3
    5760:	28 f4       	brcc	.+10     	; 0x576c <vfprintf+0x12a>
    5762:	0c 5f       	subi	r16, 0xFC	; 252
    5764:	1f 4f       	sbci	r17, 0xFF	; 255
    5766:	9f e3       	ldi	r25, 0x3F	; 63
    5768:	99 83       	std	Y+1, r25	; 0x01
    576a:	0d c0       	rjmp	.+26     	; 0x5786 <vfprintf+0x144>
    576c:	83 36       	cpi	r24, 0x63	; 99
    576e:	31 f0       	breq	.+12     	; 0x577c <vfprintf+0x13a>
    5770:	83 37       	cpi	r24, 0x73	; 115
    5772:	71 f0       	breq	.+28     	; 0x5790 <vfprintf+0x14e>
    5774:	83 35       	cpi	r24, 0x53	; 83
    5776:	09 f0       	breq	.+2      	; 0x577a <vfprintf+0x138>
    5778:	55 c0       	rjmp	.+170    	; 0x5824 <vfprintf+0x1e2>
    577a:	20 c0       	rjmp	.+64     	; 0x57bc <vfprintf+0x17a>
    577c:	f8 01       	movw	r30, r16
    577e:	80 81       	ld	r24, Z
    5780:	89 83       	std	Y+1, r24	; 0x01
    5782:	0e 5f       	subi	r16, 0xFE	; 254
    5784:	1f 4f       	sbci	r17, 0xFF	; 255
    5786:	88 24       	eor	r8, r8
    5788:	83 94       	inc	r8
    578a:	91 2c       	mov	r9, r1
    578c:	53 01       	movw	r10, r6
    578e:	12 c0       	rjmp	.+36     	; 0x57b4 <vfprintf+0x172>
    5790:	28 01       	movw	r4, r16
    5792:	f2 e0       	ldi	r31, 0x02	; 2
    5794:	4f 0e       	add	r4, r31
    5796:	51 1c       	adc	r5, r1
    5798:	f8 01       	movw	r30, r16
    579a:	a0 80       	ld	r10, Z
    579c:	b1 80       	ldd	r11, Z+1	; 0x01
    579e:	36 fe       	sbrs	r3, 6
    57a0:	03 c0       	rjmp	.+6      	; 0x57a8 <vfprintf+0x166>
    57a2:	69 2d       	mov	r22, r9
    57a4:	70 e0       	ldi	r23, 0x00	; 0
    57a6:	02 c0       	rjmp	.+4      	; 0x57ac <vfprintf+0x16a>
    57a8:	6f ef       	ldi	r22, 0xFF	; 255
    57aa:	7f ef       	ldi	r23, 0xFF	; 255
    57ac:	c5 01       	movw	r24, r10
    57ae:	63 d5       	rcall	.+2758   	; 0x6276 <strnlen>
    57b0:	4c 01       	movw	r8, r24
    57b2:	82 01       	movw	r16, r4
    57b4:	f3 2d       	mov	r31, r3
    57b6:	ff 77       	andi	r31, 0x7F	; 127
    57b8:	3f 2e       	mov	r3, r31
    57ba:	15 c0       	rjmp	.+42     	; 0x57e6 <vfprintf+0x1a4>
    57bc:	28 01       	movw	r4, r16
    57be:	22 e0       	ldi	r18, 0x02	; 2
    57c0:	42 0e       	add	r4, r18
    57c2:	51 1c       	adc	r5, r1
    57c4:	f8 01       	movw	r30, r16
    57c6:	a0 80       	ld	r10, Z
    57c8:	b1 80       	ldd	r11, Z+1	; 0x01
    57ca:	36 fe       	sbrs	r3, 6
    57cc:	03 c0       	rjmp	.+6      	; 0x57d4 <vfprintf+0x192>
    57ce:	69 2d       	mov	r22, r9
    57d0:	70 e0       	ldi	r23, 0x00	; 0
    57d2:	02 c0       	rjmp	.+4      	; 0x57d8 <vfprintf+0x196>
    57d4:	6f ef       	ldi	r22, 0xFF	; 255
    57d6:	7f ef       	ldi	r23, 0xFF	; 255
    57d8:	c5 01       	movw	r24, r10
    57da:	3b d5       	rcall	.+2678   	; 0x6252 <strnlen_P>
    57dc:	4c 01       	movw	r8, r24
    57de:	f3 2d       	mov	r31, r3
    57e0:	f0 68       	ori	r31, 0x80	; 128
    57e2:	3f 2e       	mov	r3, r31
    57e4:	82 01       	movw	r16, r4
    57e6:	33 fc       	sbrc	r3, 3
    57e8:	19 c0       	rjmp	.+50     	; 0x581c <vfprintf+0x1da>
    57ea:	82 2d       	mov	r24, r2
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	88 16       	cp	r8, r24
    57f0:	99 06       	cpc	r9, r25
    57f2:	a0 f4       	brcc	.+40     	; 0x581c <vfprintf+0x1da>
    57f4:	b6 01       	movw	r22, r12
    57f6:	80 e2       	ldi	r24, 0x20	; 32
    57f8:	90 e0       	ldi	r25, 0x00	; 0
    57fa:	86 d5       	rcall	.+2828   	; 0x6308 <fputc>
    57fc:	2a 94       	dec	r2
    57fe:	f5 cf       	rjmp	.-22     	; 0x57ea <vfprintf+0x1a8>
    5800:	f5 01       	movw	r30, r10
    5802:	37 fc       	sbrc	r3, 7
    5804:	85 91       	lpm	r24, Z+
    5806:	37 fe       	sbrs	r3, 7
    5808:	81 91       	ld	r24, Z+
    580a:	5f 01       	movw	r10, r30
    580c:	b6 01       	movw	r22, r12
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	7b d5       	rcall	.+2806   	; 0x6308 <fputc>
    5812:	21 10       	cpse	r2, r1
    5814:	2a 94       	dec	r2
    5816:	21 e0       	ldi	r18, 0x01	; 1
    5818:	82 1a       	sub	r8, r18
    581a:	91 08       	sbc	r9, r1
    581c:	81 14       	cp	r8, r1
    581e:	91 04       	cpc	r9, r1
    5820:	79 f7       	brne	.-34     	; 0x5800 <vfprintf+0x1be>
    5822:	e1 c0       	rjmp	.+450    	; 0x59e6 <vfprintf+0x3a4>
    5824:	84 36       	cpi	r24, 0x64	; 100
    5826:	11 f0       	breq	.+4      	; 0x582c <vfprintf+0x1ea>
    5828:	89 36       	cpi	r24, 0x69	; 105
    582a:	39 f5       	brne	.+78     	; 0x587a <vfprintf+0x238>
    582c:	f8 01       	movw	r30, r16
    582e:	37 fe       	sbrs	r3, 7
    5830:	07 c0       	rjmp	.+14     	; 0x5840 <vfprintf+0x1fe>
    5832:	60 81       	ld	r22, Z
    5834:	71 81       	ldd	r23, Z+1	; 0x01
    5836:	82 81       	ldd	r24, Z+2	; 0x02
    5838:	93 81       	ldd	r25, Z+3	; 0x03
    583a:	0c 5f       	subi	r16, 0xFC	; 252
    583c:	1f 4f       	sbci	r17, 0xFF	; 255
    583e:	08 c0       	rjmp	.+16     	; 0x5850 <vfprintf+0x20e>
    5840:	60 81       	ld	r22, Z
    5842:	71 81       	ldd	r23, Z+1	; 0x01
    5844:	07 2e       	mov	r0, r23
    5846:	00 0c       	add	r0, r0
    5848:	88 0b       	sbc	r24, r24
    584a:	99 0b       	sbc	r25, r25
    584c:	0e 5f       	subi	r16, 0xFE	; 254
    584e:	1f 4f       	sbci	r17, 0xFF	; 255
    5850:	f3 2d       	mov	r31, r3
    5852:	ff 76       	andi	r31, 0x6F	; 111
    5854:	3f 2e       	mov	r3, r31
    5856:	97 ff       	sbrs	r25, 7
    5858:	09 c0       	rjmp	.+18     	; 0x586c <vfprintf+0x22a>
    585a:	90 95       	com	r25
    585c:	80 95       	com	r24
    585e:	70 95       	com	r23
    5860:	61 95       	neg	r22
    5862:	7f 4f       	sbci	r23, 0xFF	; 255
    5864:	8f 4f       	sbci	r24, 0xFF	; 255
    5866:	9f 4f       	sbci	r25, 0xFF	; 255
    5868:	f0 68       	ori	r31, 0x80	; 128
    586a:	3f 2e       	mov	r3, r31
    586c:	2a e0       	ldi	r18, 0x0A	; 10
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	a3 01       	movw	r20, r6
    5872:	9f d5       	rcall	.+2878   	; 0x63b2 <__ultoa_invert>
    5874:	88 2e       	mov	r8, r24
    5876:	86 18       	sub	r8, r6
    5878:	44 c0       	rjmp	.+136    	; 0x5902 <vfprintf+0x2c0>
    587a:	85 37       	cpi	r24, 0x75	; 117
    587c:	31 f4       	brne	.+12     	; 0x588a <vfprintf+0x248>
    587e:	23 2d       	mov	r18, r3
    5880:	2f 7e       	andi	r18, 0xEF	; 239
    5882:	b2 2e       	mov	r11, r18
    5884:	2a e0       	ldi	r18, 0x0A	; 10
    5886:	30 e0       	ldi	r19, 0x00	; 0
    5888:	25 c0       	rjmp	.+74     	; 0x58d4 <vfprintf+0x292>
    588a:	93 2d       	mov	r25, r3
    588c:	99 7f       	andi	r25, 0xF9	; 249
    588e:	b9 2e       	mov	r11, r25
    5890:	8f 36       	cpi	r24, 0x6F	; 111
    5892:	c1 f0       	breq	.+48     	; 0x58c4 <vfprintf+0x282>
    5894:	18 f4       	brcc	.+6      	; 0x589c <vfprintf+0x25a>
    5896:	88 35       	cpi	r24, 0x58	; 88
    5898:	79 f0       	breq	.+30     	; 0x58b8 <vfprintf+0x276>
    589a:	ae c0       	rjmp	.+348    	; 0x59f8 <vfprintf+0x3b6>
    589c:	80 37       	cpi	r24, 0x70	; 112
    589e:	19 f0       	breq	.+6      	; 0x58a6 <vfprintf+0x264>
    58a0:	88 37       	cpi	r24, 0x78	; 120
    58a2:	21 f0       	breq	.+8      	; 0x58ac <vfprintf+0x26a>
    58a4:	a9 c0       	rjmp	.+338    	; 0x59f8 <vfprintf+0x3b6>
    58a6:	e9 2f       	mov	r30, r25
    58a8:	e0 61       	ori	r30, 0x10	; 16
    58aa:	be 2e       	mov	r11, r30
    58ac:	b4 fe       	sbrs	r11, 4
    58ae:	0d c0       	rjmp	.+26     	; 0x58ca <vfprintf+0x288>
    58b0:	fb 2d       	mov	r31, r11
    58b2:	f4 60       	ori	r31, 0x04	; 4
    58b4:	bf 2e       	mov	r11, r31
    58b6:	09 c0       	rjmp	.+18     	; 0x58ca <vfprintf+0x288>
    58b8:	34 fe       	sbrs	r3, 4
    58ba:	0a c0       	rjmp	.+20     	; 0x58d0 <vfprintf+0x28e>
    58bc:	29 2f       	mov	r18, r25
    58be:	26 60       	ori	r18, 0x06	; 6
    58c0:	b2 2e       	mov	r11, r18
    58c2:	06 c0       	rjmp	.+12     	; 0x58d0 <vfprintf+0x28e>
    58c4:	28 e0       	ldi	r18, 0x08	; 8
    58c6:	30 e0       	ldi	r19, 0x00	; 0
    58c8:	05 c0       	rjmp	.+10     	; 0x58d4 <vfprintf+0x292>
    58ca:	20 e1       	ldi	r18, 0x10	; 16
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	02 c0       	rjmp	.+4      	; 0x58d4 <vfprintf+0x292>
    58d0:	20 e1       	ldi	r18, 0x10	; 16
    58d2:	32 e0       	ldi	r19, 0x02	; 2
    58d4:	f8 01       	movw	r30, r16
    58d6:	b7 fe       	sbrs	r11, 7
    58d8:	07 c0       	rjmp	.+14     	; 0x58e8 <vfprintf+0x2a6>
    58da:	60 81       	ld	r22, Z
    58dc:	71 81       	ldd	r23, Z+1	; 0x01
    58de:	82 81       	ldd	r24, Z+2	; 0x02
    58e0:	93 81       	ldd	r25, Z+3	; 0x03
    58e2:	0c 5f       	subi	r16, 0xFC	; 252
    58e4:	1f 4f       	sbci	r17, 0xFF	; 255
    58e6:	06 c0       	rjmp	.+12     	; 0x58f4 <vfprintf+0x2b2>
    58e8:	60 81       	ld	r22, Z
    58ea:	71 81       	ldd	r23, Z+1	; 0x01
    58ec:	80 e0       	ldi	r24, 0x00	; 0
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	0e 5f       	subi	r16, 0xFE	; 254
    58f2:	1f 4f       	sbci	r17, 0xFF	; 255
    58f4:	a3 01       	movw	r20, r6
    58f6:	5d d5       	rcall	.+2746   	; 0x63b2 <__ultoa_invert>
    58f8:	88 2e       	mov	r8, r24
    58fa:	86 18       	sub	r8, r6
    58fc:	fb 2d       	mov	r31, r11
    58fe:	ff 77       	andi	r31, 0x7F	; 127
    5900:	3f 2e       	mov	r3, r31
    5902:	36 fe       	sbrs	r3, 6
    5904:	0d c0       	rjmp	.+26     	; 0x5920 <vfprintf+0x2de>
    5906:	23 2d       	mov	r18, r3
    5908:	2e 7f       	andi	r18, 0xFE	; 254
    590a:	a2 2e       	mov	r10, r18
    590c:	89 14       	cp	r8, r9
    590e:	58 f4       	brcc	.+22     	; 0x5926 <vfprintf+0x2e4>
    5910:	34 fe       	sbrs	r3, 4
    5912:	0b c0       	rjmp	.+22     	; 0x592a <vfprintf+0x2e8>
    5914:	32 fc       	sbrc	r3, 2
    5916:	09 c0       	rjmp	.+18     	; 0x592a <vfprintf+0x2e8>
    5918:	83 2d       	mov	r24, r3
    591a:	8e 7e       	andi	r24, 0xEE	; 238
    591c:	a8 2e       	mov	r10, r24
    591e:	05 c0       	rjmp	.+10     	; 0x592a <vfprintf+0x2e8>
    5920:	b8 2c       	mov	r11, r8
    5922:	a3 2c       	mov	r10, r3
    5924:	03 c0       	rjmp	.+6      	; 0x592c <vfprintf+0x2ea>
    5926:	b8 2c       	mov	r11, r8
    5928:	01 c0       	rjmp	.+2      	; 0x592c <vfprintf+0x2ea>
    592a:	b9 2c       	mov	r11, r9
    592c:	a4 fe       	sbrs	r10, 4
    592e:	0f c0       	rjmp	.+30     	; 0x594e <vfprintf+0x30c>
    5930:	fe 01       	movw	r30, r28
    5932:	e8 0d       	add	r30, r8
    5934:	f1 1d       	adc	r31, r1
    5936:	80 81       	ld	r24, Z
    5938:	80 33       	cpi	r24, 0x30	; 48
    593a:	21 f4       	brne	.+8      	; 0x5944 <vfprintf+0x302>
    593c:	9a 2d       	mov	r25, r10
    593e:	99 7e       	andi	r25, 0xE9	; 233
    5940:	a9 2e       	mov	r10, r25
    5942:	09 c0       	rjmp	.+18     	; 0x5956 <vfprintf+0x314>
    5944:	a2 fe       	sbrs	r10, 2
    5946:	06 c0       	rjmp	.+12     	; 0x5954 <vfprintf+0x312>
    5948:	b3 94       	inc	r11
    594a:	b3 94       	inc	r11
    594c:	04 c0       	rjmp	.+8      	; 0x5956 <vfprintf+0x314>
    594e:	8a 2d       	mov	r24, r10
    5950:	86 78       	andi	r24, 0x86	; 134
    5952:	09 f0       	breq	.+2      	; 0x5956 <vfprintf+0x314>
    5954:	b3 94       	inc	r11
    5956:	a3 fc       	sbrc	r10, 3
    5958:	10 c0       	rjmp	.+32     	; 0x597a <vfprintf+0x338>
    595a:	a0 fe       	sbrs	r10, 0
    595c:	06 c0       	rjmp	.+12     	; 0x596a <vfprintf+0x328>
    595e:	b2 14       	cp	r11, r2
    5960:	80 f4       	brcc	.+32     	; 0x5982 <vfprintf+0x340>
    5962:	28 0c       	add	r2, r8
    5964:	92 2c       	mov	r9, r2
    5966:	9b 18       	sub	r9, r11
    5968:	0d c0       	rjmp	.+26     	; 0x5984 <vfprintf+0x342>
    596a:	b2 14       	cp	r11, r2
    596c:	58 f4       	brcc	.+22     	; 0x5984 <vfprintf+0x342>
    596e:	b6 01       	movw	r22, r12
    5970:	80 e2       	ldi	r24, 0x20	; 32
    5972:	90 e0       	ldi	r25, 0x00	; 0
    5974:	c9 d4       	rcall	.+2450   	; 0x6308 <fputc>
    5976:	b3 94       	inc	r11
    5978:	f8 cf       	rjmp	.-16     	; 0x596a <vfprintf+0x328>
    597a:	b2 14       	cp	r11, r2
    597c:	18 f4       	brcc	.+6      	; 0x5984 <vfprintf+0x342>
    597e:	2b 18       	sub	r2, r11
    5980:	02 c0       	rjmp	.+4      	; 0x5986 <vfprintf+0x344>
    5982:	98 2c       	mov	r9, r8
    5984:	21 2c       	mov	r2, r1
    5986:	a4 fe       	sbrs	r10, 4
    5988:	0f c0       	rjmp	.+30     	; 0x59a8 <vfprintf+0x366>
    598a:	b6 01       	movw	r22, r12
    598c:	80 e3       	ldi	r24, 0x30	; 48
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	bb d4       	rcall	.+2422   	; 0x6308 <fputc>
    5992:	a2 fe       	sbrs	r10, 2
    5994:	16 c0       	rjmp	.+44     	; 0x59c2 <vfprintf+0x380>
    5996:	a1 fc       	sbrc	r10, 1
    5998:	03 c0       	rjmp	.+6      	; 0x59a0 <vfprintf+0x35e>
    599a:	88 e7       	ldi	r24, 0x78	; 120
    599c:	90 e0       	ldi	r25, 0x00	; 0
    599e:	02 c0       	rjmp	.+4      	; 0x59a4 <vfprintf+0x362>
    59a0:	88 e5       	ldi	r24, 0x58	; 88
    59a2:	90 e0       	ldi	r25, 0x00	; 0
    59a4:	b6 01       	movw	r22, r12
    59a6:	0c c0       	rjmp	.+24     	; 0x59c0 <vfprintf+0x37e>
    59a8:	8a 2d       	mov	r24, r10
    59aa:	86 78       	andi	r24, 0x86	; 134
    59ac:	51 f0       	breq	.+20     	; 0x59c2 <vfprintf+0x380>
    59ae:	a1 fe       	sbrs	r10, 1
    59b0:	02 c0       	rjmp	.+4      	; 0x59b6 <vfprintf+0x374>
    59b2:	8b e2       	ldi	r24, 0x2B	; 43
    59b4:	01 c0       	rjmp	.+2      	; 0x59b8 <vfprintf+0x376>
    59b6:	80 e2       	ldi	r24, 0x20	; 32
    59b8:	a7 fc       	sbrc	r10, 7
    59ba:	8d e2       	ldi	r24, 0x2D	; 45
    59bc:	b6 01       	movw	r22, r12
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	a3 d4       	rcall	.+2374   	; 0x6308 <fputc>
    59c2:	89 14       	cp	r8, r9
    59c4:	30 f4       	brcc	.+12     	; 0x59d2 <vfprintf+0x390>
    59c6:	b6 01       	movw	r22, r12
    59c8:	80 e3       	ldi	r24, 0x30	; 48
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	9d d4       	rcall	.+2362   	; 0x6308 <fputc>
    59ce:	9a 94       	dec	r9
    59d0:	f8 cf       	rjmp	.-16     	; 0x59c2 <vfprintf+0x380>
    59d2:	8a 94       	dec	r8
    59d4:	f3 01       	movw	r30, r6
    59d6:	e8 0d       	add	r30, r8
    59d8:	f1 1d       	adc	r31, r1
    59da:	80 81       	ld	r24, Z
    59dc:	b6 01       	movw	r22, r12
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	93 d4       	rcall	.+2342   	; 0x6308 <fputc>
    59e2:	81 10       	cpse	r8, r1
    59e4:	f6 cf       	rjmp	.-20     	; 0x59d2 <vfprintf+0x390>
    59e6:	22 20       	and	r2, r2
    59e8:	09 f4       	brne	.+2      	; 0x59ec <vfprintf+0x3aa>
    59ea:	4e ce       	rjmp	.-868    	; 0x5688 <vfprintf+0x46>
    59ec:	b6 01       	movw	r22, r12
    59ee:	80 e2       	ldi	r24, 0x20	; 32
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	8a d4       	rcall	.+2324   	; 0x6308 <fputc>
    59f4:	2a 94       	dec	r2
    59f6:	f7 cf       	rjmp	.-18     	; 0x59e6 <vfprintf+0x3a4>
    59f8:	f6 01       	movw	r30, r12
    59fa:	86 81       	ldd	r24, Z+6	; 0x06
    59fc:	97 81       	ldd	r25, Z+7	; 0x07
    59fe:	02 c0       	rjmp	.+4      	; 0x5a04 <vfprintf+0x3c2>
    5a00:	8f ef       	ldi	r24, 0xFF	; 255
    5a02:	9f ef       	ldi	r25, 0xFF	; 255
    5a04:	2b 96       	adiw	r28, 0x0b	; 11
    5a06:	cd bf       	out	0x3d, r28	; 61
    5a08:	de bf       	out	0x3e, r29	; 62
    5a0a:	df 91       	pop	r29
    5a0c:	cf 91       	pop	r28
    5a0e:	1f 91       	pop	r17
    5a10:	0f 91       	pop	r16
    5a12:	ff 90       	pop	r15
    5a14:	ef 90       	pop	r14
    5a16:	df 90       	pop	r13
    5a18:	cf 90       	pop	r12
    5a1a:	bf 90       	pop	r11
    5a1c:	af 90       	pop	r10
    5a1e:	9f 90       	pop	r9
    5a20:	8f 90       	pop	r8
    5a22:	7f 90       	pop	r7
    5a24:	6f 90       	pop	r6
    5a26:	5f 90       	pop	r5
    5a28:	4f 90       	pop	r4
    5a2a:	3f 90       	pop	r3
    5a2c:	2f 90       	pop	r2
    5a2e:	08 95       	ret

00005a30 <putval>:
    5a30:	20 fd       	sbrc	r18, 0
    5a32:	09 c0       	rjmp	.+18     	; 0x5a46 <putval+0x16>
    5a34:	fc 01       	movw	r30, r24
    5a36:	23 fd       	sbrc	r18, 3
    5a38:	05 c0       	rjmp	.+10     	; 0x5a44 <putval+0x14>
    5a3a:	22 ff       	sbrs	r18, 2
    5a3c:	02 c0       	rjmp	.+4      	; 0x5a42 <putval+0x12>
    5a3e:	73 83       	std	Z+3, r23	; 0x03
    5a40:	62 83       	std	Z+2, r22	; 0x02
    5a42:	51 83       	std	Z+1, r21	; 0x01
    5a44:	40 83       	st	Z, r20
    5a46:	08 95       	ret

00005a48 <mulacc>:
    5a48:	44 fd       	sbrc	r20, 4
    5a4a:	17 c0       	rjmp	.+46     	; 0x5a7a <mulacc+0x32>
    5a4c:	46 fd       	sbrc	r20, 6
    5a4e:	17 c0       	rjmp	.+46     	; 0x5a7e <mulacc+0x36>
    5a50:	ab 01       	movw	r20, r22
    5a52:	bc 01       	movw	r22, r24
    5a54:	da 01       	movw	r26, r20
    5a56:	fb 01       	movw	r30, r22
    5a58:	aa 0f       	add	r26, r26
    5a5a:	bb 1f       	adc	r27, r27
    5a5c:	ee 1f       	adc	r30, r30
    5a5e:	ff 1f       	adc	r31, r31
    5a60:	10 94       	com	r1
    5a62:	d1 f7       	brne	.-12     	; 0x5a58 <mulacc+0x10>
    5a64:	4a 0f       	add	r20, r26
    5a66:	5b 1f       	adc	r21, r27
    5a68:	6e 1f       	adc	r22, r30
    5a6a:	7f 1f       	adc	r23, r31
    5a6c:	cb 01       	movw	r24, r22
    5a6e:	ba 01       	movw	r22, r20
    5a70:	66 0f       	add	r22, r22
    5a72:	77 1f       	adc	r23, r23
    5a74:	88 1f       	adc	r24, r24
    5a76:	99 1f       	adc	r25, r25
    5a78:	09 c0       	rjmp	.+18     	; 0x5a8c <mulacc+0x44>
    5a7a:	33 e0       	ldi	r19, 0x03	; 3
    5a7c:	01 c0       	rjmp	.+2      	; 0x5a80 <mulacc+0x38>
    5a7e:	34 e0       	ldi	r19, 0x04	; 4
    5a80:	66 0f       	add	r22, r22
    5a82:	77 1f       	adc	r23, r23
    5a84:	88 1f       	adc	r24, r24
    5a86:	99 1f       	adc	r25, r25
    5a88:	31 50       	subi	r19, 0x01	; 1
    5a8a:	d1 f7       	brne	.-12     	; 0x5a80 <mulacc+0x38>
    5a8c:	62 0f       	add	r22, r18
    5a8e:	71 1d       	adc	r23, r1
    5a90:	81 1d       	adc	r24, r1
    5a92:	91 1d       	adc	r25, r1
    5a94:	08 95       	ret

00005a96 <skip_spaces>:
    5a96:	0f 93       	push	r16
    5a98:	1f 93       	push	r17
    5a9a:	cf 93       	push	r28
    5a9c:	df 93       	push	r29
    5a9e:	8c 01       	movw	r16, r24
    5aa0:	c8 01       	movw	r24, r16
    5aa2:	f4 d3       	rcall	.+2024   	; 0x628c <fgetc>
    5aa4:	ec 01       	movw	r28, r24
    5aa6:	97 fd       	sbrc	r25, 7
    5aa8:	06 c0       	rjmp	.+12     	; 0x5ab6 <skip_spaces+0x20>
    5aaa:	c0 d3       	rcall	.+1920   	; 0x622c <isspace>
    5aac:	89 2b       	or	r24, r25
    5aae:	c1 f7       	brne	.-16     	; 0x5aa0 <skip_spaces+0xa>
    5ab0:	b8 01       	movw	r22, r16
    5ab2:	ce 01       	movw	r24, r28
    5ab4:	65 d4       	rcall	.+2250   	; 0x6380 <ungetc>
    5ab6:	ce 01       	movw	r24, r28
    5ab8:	df 91       	pop	r29
    5aba:	cf 91       	pop	r28
    5abc:	1f 91       	pop	r17
    5abe:	0f 91       	pop	r16
    5ac0:	08 95       	ret

00005ac2 <conv_int>:
    5ac2:	8f 92       	push	r8
    5ac4:	9f 92       	push	r9
    5ac6:	af 92       	push	r10
    5ac8:	bf 92       	push	r11
    5aca:	ef 92       	push	r14
    5acc:	ff 92       	push	r15
    5ace:	0f 93       	push	r16
    5ad0:	1f 93       	push	r17
    5ad2:	cf 93       	push	r28
    5ad4:	df 93       	push	r29
    5ad6:	8c 01       	movw	r16, r24
    5ad8:	d6 2f       	mov	r29, r22
    5ada:	7a 01       	movw	r14, r20
    5adc:	b2 2e       	mov	r11, r18
    5ade:	d6 d3       	rcall	.+1964   	; 0x628c <fgetc>
    5ae0:	9c 01       	movw	r18, r24
    5ae2:	33 27       	eor	r19, r19
    5ae4:	2b 32       	cpi	r18, 0x2B	; 43
    5ae6:	31 05       	cpc	r19, r1
    5ae8:	31 f0       	breq	.+12     	; 0x5af6 <conv_int+0x34>
    5aea:	2d 32       	cpi	r18, 0x2D	; 45
    5aec:	31 05       	cpc	r19, r1
    5aee:	59 f4       	brne	.+22     	; 0x5b06 <conv_int+0x44>
    5af0:	8b 2d       	mov	r24, r11
    5af2:	80 68       	ori	r24, 0x80	; 128
    5af4:	b8 2e       	mov	r11, r24
    5af6:	d1 50       	subi	r29, 0x01	; 1
    5af8:	11 f4       	brne	.+4      	; 0x5afe <conv_int+0x3c>
    5afa:	80 e0       	ldi	r24, 0x00	; 0
    5afc:	61 c0       	rjmp	.+194    	; 0x5bc0 <conv_int+0xfe>
    5afe:	c8 01       	movw	r24, r16
    5b00:	c5 d3       	rcall	.+1930   	; 0x628c <fgetc>
    5b02:	97 fd       	sbrc	r25, 7
    5b04:	fa cf       	rjmp	.-12     	; 0x5afa <conv_int+0x38>
    5b06:	cb 2d       	mov	r28, r11
    5b08:	cd 7f       	andi	r28, 0xFD	; 253
    5b0a:	2b 2d       	mov	r18, r11
    5b0c:	20 73       	andi	r18, 0x30	; 48
    5b0e:	f9 f4       	brne	.+62     	; 0x5b4e <conv_int+0x8c>
    5b10:	80 33       	cpi	r24, 0x30	; 48
    5b12:	e9 f4       	brne	.+58     	; 0x5b4e <conv_int+0x8c>
    5b14:	aa 24       	eor	r10, r10
    5b16:	aa 94       	dec	r10
    5b18:	ad 0e       	add	r10, r29
    5b1a:	09 f4       	brne	.+2      	; 0x5b1e <conv_int+0x5c>
    5b1c:	3e c0       	rjmp	.+124    	; 0x5b9a <conv_int+0xd8>
    5b1e:	c8 01       	movw	r24, r16
    5b20:	b5 d3       	rcall	.+1898   	; 0x628c <fgetc>
    5b22:	97 fd       	sbrc	r25, 7
    5b24:	3a c0       	rjmp	.+116    	; 0x5b9a <conv_int+0xd8>
    5b26:	9c 01       	movw	r18, r24
    5b28:	2f 7d       	andi	r18, 0xDF	; 223
    5b2a:	33 27       	eor	r19, r19
    5b2c:	28 35       	cpi	r18, 0x58	; 88
    5b2e:	31 05       	cpc	r19, r1
    5b30:	41 f4       	brne	.+16     	; 0x5b42 <conv_int+0x80>
    5b32:	c2 64       	ori	r28, 0x42	; 66
    5b34:	d2 50       	subi	r29, 0x02	; 2
    5b36:	89 f1       	breq	.+98     	; 0x5b9a <conv_int+0xd8>
    5b38:	c8 01       	movw	r24, r16
    5b3a:	a8 d3       	rcall	.+1872   	; 0x628c <fgetc>
    5b3c:	97 ff       	sbrs	r25, 7
    5b3e:	07 c0       	rjmp	.+14     	; 0x5b4e <conv_int+0x8c>
    5b40:	2c c0       	rjmp	.+88     	; 0x5b9a <conv_int+0xd8>
    5b42:	b6 fe       	sbrs	r11, 6
    5b44:	02 c0       	rjmp	.+4      	; 0x5b4a <conv_int+0x88>
    5b46:	c2 60       	ori	r28, 0x02	; 2
    5b48:	01 c0       	rjmp	.+2      	; 0x5b4c <conv_int+0x8a>
    5b4a:	c2 61       	ori	r28, 0x12	; 18
    5b4c:	da 2d       	mov	r29, r10
    5b4e:	81 2c       	mov	r8, r1
    5b50:	91 2c       	mov	r9, r1
    5b52:	54 01       	movw	r10, r8
    5b54:	20 ed       	ldi	r18, 0xD0	; 208
    5b56:	28 0f       	add	r18, r24
    5b58:	28 30       	cpi	r18, 0x08	; 8
    5b5a:	78 f0       	brcs	.+30     	; 0x5b7a <conv_int+0xb8>
    5b5c:	c4 ff       	sbrs	r28, 4
    5b5e:	03 c0       	rjmp	.+6      	; 0x5b66 <conv_int+0xa4>
    5b60:	b8 01       	movw	r22, r16
    5b62:	0e d4       	rcall	.+2076   	; 0x6380 <ungetc>
    5b64:	17 c0       	rjmp	.+46     	; 0x5b94 <conv_int+0xd2>
    5b66:	2a 30       	cpi	r18, 0x0A	; 10
    5b68:	40 f0       	brcs	.+16     	; 0x5b7a <conv_int+0xb8>
    5b6a:	c6 ff       	sbrs	r28, 6
    5b6c:	f9 cf       	rjmp	.-14     	; 0x5b60 <conv_int+0x9e>
    5b6e:	2f 7d       	andi	r18, 0xDF	; 223
    5b70:	3f ee       	ldi	r19, 0xEF	; 239
    5b72:	32 0f       	add	r19, r18
    5b74:	36 30       	cpi	r19, 0x06	; 6
    5b76:	a0 f7       	brcc	.-24     	; 0x5b60 <conv_int+0x9e>
    5b78:	27 50       	subi	r18, 0x07	; 7
    5b7a:	4c 2f       	mov	r20, r28
    5b7c:	c5 01       	movw	r24, r10
    5b7e:	b4 01       	movw	r22, r8
    5b80:	63 df       	rcall	.-314    	; 0x5a48 <mulacc>
    5b82:	4b 01       	movw	r8, r22
    5b84:	5c 01       	movw	r10, r24
    5b86:	c2 60       	ori	r28, 0x02	; 2
    5b88:	d1 50       	subi	r29, 0x01	; 1
    5b8a:	51 f0       	breq	.+20     	; 0x5ba0 <conv_int+0xde>
    5b8c:	c8 01       	movw	r24, r16
    5b8e:	7e d3       	rcall	.+1788   	; 0x628c <fgetc>
    5b90:	97 ff       	sbrs	r25, 7
    5b92:	e0 cf       	rjmp	.-64     	; 0x5b54 <conv_int+0x92>
    5b94:	c1 fd       	sbrc	r28, 1
    5b96:	04 c0       	rjmp	.+8      	; 0x5ba0 <conv_int+0xde>
    5b98:	b0 cf       	rjmp	.-160    	; 0x5afa <conv_int+0x38>
    5b9a:	81 2c       	mov	r8, r1
    5b9c:	91 2c       	mov	r9, r1
    5b9e:	54 01       	movw	r10, r8
    5ba0:	c7 ff       	sbrs	r28, 7
    5ba2:	08 c0       	rjmp	.+16     	; 0x5bb4 <conv_int+0xf2>
    5ba4:	b0 94       	com	r11
    5ba6:	a0 94       	com	r10
    5ba8:	90 94       	com	r9
    5baa:	80 94       	com	r8
    5bac:	81 1c       	adc	r8, r1
    5bae:	91 1c       	adc	r9, r1
    5bb0:	a1 1c       	adc	r10, r1
    5bb2:	b1 1c       	adc	r11, r1
    5bb4:	2c 2f       	mov	r18, r28
    5bb6:	b5 01       	movw	r22, r10
    5bb8:	a4 01       	movw	r20, r8
    5bba:	c7 01       	movw	r24, r14
    5bbc:	39 df       	rcall	.-398    	; 0x5a30 <putval>
    5bbe:	81 e0       	ldi	r24, 0x01	; 1
    5bc0:	df 91       	pop	r29
    5bc2:	cf 91       	pop	r28
    5bc4:	1f 91       	pop	r17
    5bc6:	0f 91       	pop	r16
    5bc8:	ff 90       	pop	r15
    5bca:	ef 90       	pop	r14
    5bcc:	bf 90       	pop	r11
    5bce:	af 90       	pop	r10
    5bd0:	9f 90       	pop	r9
    5bd2:	8f 90       	pop	r8
    5bd4:	08 95       	ret

00005bd6 <conv_brk>:
    5bd6:	5f 92       	push	r5
    5bd8:	6f 92       	push	r6
    5bda:	7f 92       	push	r7
    5bdc:	8f 92       	push	r8
    5bde:	9f 92       	push	r9
    5be0:	af 92       	push	r10
    5be2:	bf 92       	push	r11
    5be4:	cf 92       	push	r12
    5be6:	df 92       	push	r13
    5be8:	ef 92       	push	r14
    5bea:	ff 92       	push	r15
    5bec:	0f 93       	push	r16
    5bee:	1f 93       	push	r17
    5bf0:	cf 93       	push	r28
    5bf2:	df 93       	push	r29
    5bf4:	cd b7       	in	r28, 0x3d	; 61
    5bf6:	de b7       	in	r29, 0x3e	; 62
    5bf8:	a0 97       	sbiw	r28, 0x20	; 32
    5bfa:	cd bf       	out	0x3d, r28	; 61
    5bfc:	de bf       	out	0x3e, r29	; 62
    5bfe:	5c 01       	movw	r10, r24
    5c00:	96 2e       	mov	r9, r22
    5c02:	7a 01       	movw	r14, r20
    5c04:	f9 01       	movw	r30, r18
    5c06:	8e 01       	movw	r16, r28
    5c08:	0f 5f       	subi	r16, 0xFF	; 255
    5c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c0c:	68 01       	movw	r12, r16
    5c0e:	80 e2       	ldi	r24, 0x20	; 32
    5c10:	d8 01       	movw	r26, r16
    5c12:	1d 92       	st	X+, r1
    5c14:	8a 95       	dec	r24
    5c16:	e9 f7       	brne	.-6      	; 0x5c12 <conv_brk+0x3c>
    5c18:	d5 01       	movw	r26, r10
    5c1a:	13 96       	adiw	r26, 0x03	; 3
    5c1c:	8c 90       	ld	r8, X
    5c1e:	80 e0       	ldi	r24, 0x00	; 0
    5c20:	90 e0       	ldi	r25, 0x00	; 0
    5c22:	61 2c       	mov	r6, r1
    5c24:	71 2c       	mov	r7, r1
    5c26:	30 e0       	ldi	r19, 0x00	; 0
    5c28:	61 e0       	ldi	r22, 0x01	; 1
    5c2a:	70 e0       	ldi	r23, 0x00	; 0
    5c2c:	83 fc       	sbrc	r8, 3
    5c2e:	25 91       	lpm	r18, Z+
    5c30:	83 fe       	sbrs	r8, 3
    5c32:	21 91       	ld	r18, Z+
    5c34:	8f 01       	movw	r16, r30
    5c36:	52 2e       	mov	r5, r18
    5c38:	21 11       	cpse	r18, r1
    5c3a:	03 c0       	rjmp	.+6      	; 0x5c42 <conv_brk+0x6c>
    5c3c:	80 e0       	ldi	r24, 0x00	; 0
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	90 c0       	rjmp	.+288    	; 0x5d62 <conv_brk+0x18c>
    5c42:	2e 35       	cpi	r18, 0x5E	; 94
    5c44:	11 f4       	brne	.+4      	; 0x5c4a <conv_brk+0x74>
    5c46:	00 97       	sbiw	r24, 0x00	; 0
    5c48:	51 f1       	breq	.+84     	; 0x5c9e <conv_brk+0xc8>
    5c4a:	43 2f       	mov	r20, r19
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	48 17       	cp	r20, r24
    5c50:	59 07       	cpc	r21, r25
    5c52:	3c f4       	brge	.+14     	; 0x5c62 <conv_brk+0x8c>
    5c54:	2d 35       	cpi	r18, 0x5D	; 93
    5c56:	59 f1       	breq	.+86     	; 0x5cae <conv_brk+0xd8>
    5c58:	2d 32       	cpi	r18, 0x2D	; 45
    5c5a:	19 f4       	brne	.+6      	; 0x5c62 <conv_brk+0x8c>
    5c5c:	77 20       	and	r7, r7
    5c5e:	09 f1       	breq	.+66     	; 0x5ca2 <conv_brk+0xcc>
    5c60:	03 c0       	rjmp	.+6      	; 0x5c68 <conv_brk+0x92>
    5c62:	77 20       	and	r7, r7
    5c64:	09 f4       	brne	.+2      	; 0x5c68 <conv_brk+0x92>
    5c66:	68 c0       	rjmp	.+208    	; 0x5d38 <conv_brk+0x162>
    5c68:	45 2d       	mov	r20, r5
    5c6a:	46 95       	lsr	r20
    5c6c:	46 95       	lsr	r20
    5c6e:	46 95       	lsr	r20
    5c70:	d6 01       	movw	r26, r12
    5c72:	a4 0f       	add	r26, r20
    5c74:	b1 1d       	adc	r27, r1
    5c76:	45 2d       	mov	r20, r5
    5c78:	47 70       	andi	r20, 0x07	; 7
    5c7a:	8b 01       	movw	r16, r22
    5c7c:	02 c0       	rjmp	.+4      	; 0x5c82 <conv_brk+0xac>
    5c7e:	00 0f       	add	r16, r16
    5c80:	11 1f       	adc	r17, r17
    5c82:	4a 95       	dec	r20
    5c84:	e2 f7       	brpl	.-8      	; 0x5c7e <conv_brk+0xa8>
    5c86:	a8 01       	movw	r20, r16
    5c88:	5c 91       	ld	r21, X
    5c8a:	45 2b       	or	r20, r21
    5c8c:	4c 93       	st	X, r20
    5c8e:	65 14       	cp	r6, r5
    5c90:	59 f0       	breq	.+22     	; 0x5ca8 <conv_brk+0xd2>
    5c92:	56 14       	cp	r5, r6
    5c94:	10 f4       	brcc	.+4      	; 0x5c9a <conv_brk+0xc4>
    5c96:	53 94       	inc	r5
    5c98:	e7 cf       	rjmp	.-50     	; 0x5c68 <conv_brk+0x92>
    5c9a:	5a 94       	dec	r5
    5c9c:	e5 cf       	rjmp	.-54     	; 0x5c68 <conv_brk+0x92>
    5c9e:	31 e0       	ldi	r19, 0x01	; 1
    5ca0:	04 c0       	rjmp	.+8      	; 0x5caa <conv_brk+0xd4>
    5ca2:	77 24       	eor	r7, r7
    5ca4:	73 94       	inc	r7
    5ca6:	01 c0       	rjmp	.+2      	; 0x5caa <conv_brk+0xd4>
    5ca8:	71 2c       	mov	r7, r1
    5caa:	01 96       	adiw	r24, 0x01	; 1
    5cac:	bf cf       	rjmp	.-130    	; 0x5c2c <conv_brk+0x56>
    5cae:	77 20       	and	r7, r7
    5cb0:	19 f0       	breq	.+6      	; 0x5cb8 <conv_brk+0xe2>
    5cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    5cb4:	80 62       	ori	r24, 0x20	; 32
    5cb6:	8e 83       	std	Y+6, r24	; 0x06
    5cb8:	31 11       	cpse	r19, r1
    5cba:	03 c0       	rjmp	.+6      	; 0x5cc2 <conv_brk+0xec>
    5cbc:	88 24       	eor	r8, r8
    5cbe:	83 94       	inc	r8
    5cc0:	17 c0       	rjmp	.+46     	; 0x5cf0 <conv_brk+0x11a>
    5cc2:	f6 01       	movw	r30, r12
    5cc4:	9e 01       	movw	r18, r28
    5cc6:	2f 5d       	subi	r18, 0xDF	; 223
    5cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    5cca:	80 81       	ld	r24, Z
    5ccc:	80 95       	com	r24
    5cce:	81 93       	st	Z+, r24
    5cd0:	2e 17       	cp	r18, r30
    5cd2:	3f 07       	cpc	r19, r31
    5cd4:	d1 f7       	brne	.-12     	; 0x5cca <conv_brk+0xf4>
    5cd6:	f2 cf       	rjmp	.-28     	; 0x5cbc <conv_brk+0xe6>
    5cd8:	e1 14       	cp	r14, r1
    5cda:	f1 04       	cpc	r15, r1
    5cdc:	29 f0       	breq	.+10     	; 0x5ce8 <conv_brk+0x112>
    5cde:	d7 01       	movw	r26, r14
    5ce0:	8c 93       	st	X, r24
    5ce2:	f7 01       	movw	r30, r14
    5ce4:	31 96       	adiw	r30, 0x01	; 1
    5ce6:	7f 01       	movw	r14, r30
    5ce8:	9a 94       	dec	r9
    5cea:	81 2c       	mov	r8, r1
    5cec:	99 20       	and	r9, r9
    5cee:	e9 f0       	breq	.+58     	; 0x5d2a <conv_brk+0x154>
    5cf0:	c5 01       	movw	r24, r10
    5cf2:	cc d2       	rcall	.+1432   	; 0x628c <fgetc>
    5cf4:	97 fd       	sbrc	r25, 7
    5cf6:	17 c0       	rjmp	.+46     	; 0x5d26 <conv_brk+0x150>
    5cf8:	fc 01       	movw	r30, r24
    5cfa:	ff 27       	eor	r31, r31
    5cfc:	23 e0       	ldi	r18, 0x03	; 3
    5cfe:	f5 95       	asr	r31
    5d00:	e7 95       	ror	r30
    5d02:	2a 95       	dec	r18
    5d04:	e1 f7       	brne	.-8      	; 0x5cfe <conv_brk+0x128>
    5d06:	ec 0d       	add	r30, r12
    5d08:	fd 1d       	adc	r31, r13
    5d0a:	20 81       	ld	r18, Z
    5d0c:	30 e0       	ldi	r19, 0x00	; 0
    5d0e:	ac 01       	movw	r20, r24
    5d10:	47 70       	andi	r20, 0x07	; 7
    5d12:	55 27       	eor	r21, r21
    5d14:	02 c0       	rjmp	.+4      	; 0x5d1a <conv_brk+0x144>
    5d16:	35 95       	asr	r19
    5d18:	27 95       	ror	r18
    5d1a:	4a 95       	dec	r20
    5d1c:	e2 f7       	brpl	.-8      	; 0x5d16 <conv_brk+0x140>
    5d1e:	20 fd       	sbrc	r18, 0
    5d20:	db cf       	rjmp	.-74     	; 0x5cd8 <conv_brk+0x102>
    5d22:	b5 01       	movw	r22, r10
    5d24:	2d d3       	rcall	.+1626   	; 0x6380 <ungetc>
    5d26:	81 10       	cpse	r8, r1
    5d28:	89 cf       	rjmp	.-238    	; 0x5c3c <conv_brk+0x66>
    5d2a:	e1 14       	cp	r14, r1
    5d2c:	f1 04       	cpc	r15, r1
    5d2e:	11 f0       	breq	.+4      	; 0x5d34 <conv_brk+0x15e>
    5d30:	d7 01       	movw	r26, r14
    5d32:	1c 92       	st	X, r1
    5d34:	c8 01       	movw	r24, r16
    5d36:	15 c0       	rjmp	.+42     	; 0x5d62 <conv_brk+0x18c>
    5d38:	42 2f       	mov	r20, r18
    5d3a:	46 95       	lsr	r20
    5d3c:	46 95       	lsr	r20
    5d3e:	46 95       	lsr	r20
    5d40:	d6 01       	movw	r26, r12
    5d42:	a4 0f       	add	r26, r20
    5d44:	b1 1d       	adc	r27, r1
    5d46:	42 2f       	mov	r20, r18
    5d48:	47 70       	andi	r20, 0x07	; 7
    5d4a:	8b 01       	movw	r16, r22
    5d4c:	02 c0       	rjmp	.+4      	; 0x5d52 <conv_brk+0x17c>
    5d4e:	00 0f       	add	r16, r16
    5d50:	11 1f       	adc	r17, r17
    5d52:	4a 95       	dec	r20
    5d54:	e2 f7       	brpl	.-8      	; 0x5d4e <conv_brk+0x178>
    5d56:	a8 01       	movw	r20, r16
    5d58:	5c 91       	ld	r21, X
    5d5a:	45 2b       	or	r20, r21
    5d5c:	4c 93       	st	X, r20
    5d5e:	62 2e       	mov	r6, r18
    5d60:	a4 cf       	rjmp	.-184    	; 0x5caa <conv_brk+0xd4>
    5d62:	a0 96       	adiw	r28, 0x20	; 32
    5d64:	cd bf       	out	0x3d, r28	; 61
    5d66:	de bf       	out	0x3e, r29	; 62
    5d68:	df 91       	pop	r29
    5d6a:	cf 91       	pop	r28
    5d6c:	1f 91       	pop	r17
    5d6e:	0f 91       	pop	r16
    5d70:	ff 90       	pop	r15
    5d72:	ef 90       	pop	r14
    5d74:	df 90       	pop	r13
    5d76:	cf 90       	pop	r12
    5d78:	bf 90       	pop	r11
    5d7a:	af 90       	pop	r10
    5d7c:	9f 90       	pop	r9
    5d7e:	8f 90       	pop	r8
    5d80:	7f 90       	pop	r7
    5d82:	6f 90       	pop	r6
    5d84:	5f 90       	pop	r5
    5d86:	08 95       	ret

00005d88 <vfscanf>:
    5d88:	5f 92       	push	r5
    5d8a:	6f 92       	push	r6
    5d8c:	7f 92       	push	r7
    5d8e:	8f 92       	push	r8
    5d90:	9f 92       	push	r9
    5d92:	af 92       	push	r10
    5d94:	bf 92       	push	r11
    5d96:	cf 92       	push	r12
    5d98:	df 92       	push	r13
    5d9a:	ef 92       	push	r14
    5d9c:	ff 92       	push	r15
    5d9e:	0f 93       	push	r16
    5da0:	1f 93       	push	r17
    5da2:	cf 93       	push	r28
    5da4:	df 93       	push	r29
    5da6:	6c 01       	movw	r12, r24
    5da8:	eb 01       	movw	r28, r22
    5daa:	5a 01       	movw	r10, r20
    5dac:	fc 01       	movw	r30, r24
    5dae:	16 82       	std	Z+6, r1	; 0x06
    5db0:	17 82       	std	Z+7, r1	; 0x07
    5db2:	51 2c       	mov	r5, r1
    5db4:	f6 01       	movw	r30, r12
    5db6:	e3 80       	ldd	r14, Z+3	; 0x03
    5db8:	fe 01       	movw	r30, r28
    5dba:	e3 fc       	sbrc	r14, 3
    5dbc:	85 91       	lpm	r24, Z+
    5dbe:	e3 fe       	sbrs	r14, 3
    5dc0:	81 91       	ld	r24, Z+
    5dc2:	18 2f       	mov	r17, r24
    5dc4:	ef 01       	movw	r28, r30
    5dc6:	88 23       	and	r24, r24
    5dc8:	09 f4       	brne	.+2      	; 0x5dcc <vfscanf+0x44>
    5dca:	e0 c0       	rjmp	.+448    	; 0x5f8c <vfscanf+0x204>
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	2e d2       	rcall	.+1116   	; 0x622c <isspace>
    5dd0:	89 2b       	or	r24, r25
    5dd2:	19 f0       	breq	.+6      	; 0x5dda <vfscanf+0x52>
    5dd4:	c6 01       	movw	r24, r12
    5dd6:	5f de       	rcall	.-834    	; 0x5a96 <skip_spaces>
    5dd8:	ed cf       	rjmp	.-38     	; 0x5db4 <vfscanf+0x2c>
    5dda:	15 32       	cpi	r17, 0x25	; 37
    5ddc:	41 f4       	brne	.+16     	; 0x5dee <vfscanf+0x66>
    5dde:	fe 01       	movw	r30, r28
    5de0:	e3 fc       	sbrc	r14, 3
    5de2:	15 91       	lpm	r17, Z+
    5de4:	e3 fe       	sbrs	r14, 3
    5de6:	11 91       	ld	r17, Z+
    5de8:	ef 01       	movw	r28, r30
    5dea:	15 32       	cpi	r17, 0x25	; 37
    5dec:	71 f4       	brne	.+28     	; 0x5e0a <vfscanf+0x82>
    5dee:	c6 01       	movw	r24, r12
    5df0:	4d d2       	rcall	.+1178   	; 0x628c <fgetc>
    5df2:	97 fd       	sbrc	r25, 7
    5df4:	c9 c0       	rjmp	.+402    	; 0x5f88 <vfscanf+0x200>
    5df6:	41 2f       	mov	r20, r17
    5df8:	50 e0       	ldi	r21, 0x00	; 0
    5dfa:	9c 01       	movw	r18, r24
    5dfc:	33 27       	eor	r19, r19
    5dfe:	24 17       	cp	r18, r20
    5e00:	35 07       	cpc	r19, r21
    5e02:	c1 f2       	breq	.-80     	; 0x5db4 <vfscanf+0x2c>
    5e04:	b6 01       	movw	r22, r12
    5e06:	bc d2       	rcall	.+1400   	; 0x6380 <ungetc>
    5e08:	c1 c0       	rjmp	.+386    	; 0x5f8c <vfscanf+0x204>
    5e0a:	1a 32       	cpi	r17, 0x2A	; 42
    5e0c:	39 f4       	brne	.+14     	; 0x5e1c <vfscanf+0x94>
    5e0e:	e3 fc       	sbrc	r14, 3
    5e10:	15 91       	lpm	r17, Z+
    5e12:	e3 fe       	sbrs	r14, 3
    5e14:	11 91       	ld	r17, Z+
    5e16:	ef 01       	movw	r28, r30
    5e18:	01 e0       	ldi	r16, 0x01	; 1
    5e1a:	01 c0       	rjmp	.+2      	; 0x5e1e <vfscanf+0x96>
    5e1c:	00 e0       	ldi	r16, 0x00	; 0
    5e1e:	f1 2c       	mov	r15, r1
    5e20:	20 ed       	ldi	r18, 0xD0	; 208
    5e22:	21 0f       	add	r18, r17
    5e24:	2a 30       	cpi	r18, 0x0A	; 10
    5e26:	78 f4       	brcc	.+30     	; 0x5e46 <vfscanf+0xbe>
    5e28:	02 60       	ori	r16, 0x02	; 2
    5e2a:	6f 2d       	mov	r22, r15
    5e2c:	70 e0       	ldi	r23, 0x00	; 0
    5e2e:	80 e0       	ldi	r24, 0x00	; 0
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	40 e2       	ldi	r20, 0x20	; 32
    5e34:	09 de       	rcall	.-1006   	; 0x5a48 <mulacc>
    5e36:	f6 2e       	mov	r15, r22
    5e38:	fe 01       	movw	r30, r28
    5e3a:	e3 fc       	sbrc	r14, 3
    5e3c:	15 91       	lpm	r17, Z+
    5e3e:	e3 fe       	sbrs	r14, 3
    5e40:	11 91       	ld	r17, Z+
    5e42:	ef 01       	movw	r28, r30
    5e44:	ed cf       	rjmp	.-38     	; 0x5e20 <vfscanf+0x98>
    5e46:	01 ff       	sbrs	r16, 1
    5e48:	03 c0       	rjmp	.+6      	; 0x5e50 <vfscanf+0xc8>
    5e4a:	f1 10       	cpse	r15, r1
    5e4c:	03 c0       	rjmp	.+6      	; 0x5e54 <vfscanf+0xcc>
    5e4e:	9e c0       	rjmp	.+316    	; 0x5f8c <vfscanf+0x204>
    5e50:	ff 24       	eor	r15, r15
    5e52:	fa 94       	dec	r15
    5e54:	18 36       	cpi	r17, 0x68	; 104
    5e56:	19 f0       	breq	.+6      	; 0x5e5e <vfscanf+0xd6>
    5e58:	1c 36       	cpi	r17, 0x6C	; 108
    5e5a:	51 f0       	breq	.+20     	; 0x5e70 <vfscanf+0xe8>
    5e5c:	10 c0       	rjmp	.+32     	; 0x5e7e <vfscanf+0xf6>
    5e5e:	fe 01       	movw	r30, r28
    5e60:	e3 fc       	sbrc	r14, 3
    5e62:	15 91       	lpm	r17, Z+
    5e64:	e3 fe       	sbrs	r14, 3
    5e66:	11 91       	ld	r17, Z+
    5e68:	ef 01       	movw	r28, r30
    5e6a:	18 36       	cpi	r17, 0x68	; 104
    5e6c:	41 f4       	brne	.+16     	; 0x5e7e <vfscanf+0xf6>
    5e6e:	08 60       	ori	r16, 0x08	; 8
    5e70:	04 60       	ori	r16, 0x04	; 4
    5e72:	fe 01       	movw	r30, r28
    5e74:	e3 fc       	sbrc	r14, 3
    5e76:	15 91       	lpm	r17, Z+
    5e78:	e3 fe       	sbrs	r14, 3
    5e7a:	11 91       	ld	r17, Z+
    5e7c:	ef 01       	movw	r28, r30
    5e7e:	11 23       	and	r17, r17
    5e80:	09 f4       	brne	.+2      	; 0x5e84 <vfscanf+0xfc>
    5e82:	84 c0       	rjmp	.+264    	; 0x5f8c <vfscanf+0x204>
    5e84:	61 2f       	mov	r22, r17
    5e86:	70 e0       	ldi	r23, 0x00	; 0
    5e88:	84 ea       	ldi	r24, 0xA4	; 164
    5e8a:	92 e0       	ldi	r25, 0x02	; 2
    5e8c:	d7 d1       	rcall	.+942    	; 0x623c <strchr_P>
    5e8e:	89 2b       	or	r24, r25
    5e90:	09 f4       	brne	.+2      	; 0x5e94 <vfscanf+0x10c>
    5e92:	7c c0       	rjmp	.+248    	; 0x5f8c <vfscanf+0x204>
    5e94:	00 fd       	sbrc	r16, 0
    5e96:	07 c0       	rjmp	.+14     	; 0x5ea6 <vfscanf+0x11e>
    5e98:	f5 01       	movw	r30, r10
    5e9a:	80 80       	ld	r8, Z
    5e9c:	91 80       	ldd	r9, Z+1	; 0x01
    5e9e:	c5 01       	movw	r24, r10
    5ea0:	02 96       	adiw	r24, 0x02	; 2
    5ea2:	5c 01       	movw	r10, r24
    5ea4:	02 c0       	rjmp	.+4      	; 0x5eaa <vfscanf+0x122>
    5ea6:	81 2c       	mov	r8, r1
    5ea8:	91 2c       	mov	r9, r1
    5eaa:	1e 36       	cpi	r17, 0x6E	; 110
    5eac:	49 f4       	brne	.+18     	; 0x5ec0 <vfscanf+0x138>
    5eae:	f6 01       	movw	r30, r12
    5eb0:	46 81       	ldd	r20, Z+6	; 0x06
    5eb2:	57 81       	ldd	r21, Z+7	; 0x07
    5eb4:	60 e0       	ldi	r22, 0x00	; 0
    5eb6:	70 e0       	ldi	r23, 0x00	; 0
    5eb8:	20 2f       	mov	r18, r16
    5eba:	c4 01       	movw	r24, r8
    5ebc:	b9 dd       	rcall	.-1166   	; 0x5a30 <putval>
    5ebe:	7a cf       	rjmp	.-268    	; 0x5db4 <vfscanf+0x2c>
    5ec0:	13 36       	cpi	r17, 0x63	; 99
    5ec2:	a1 f4       	brne	.+40     	; 0x5eec <vfscanf+0x164>
    5ec4:	01 fd       	sbrc	r16, 1
    5ec6:	02 c0       	rjmp	.+4      	; 0x5ecc <vfscanf+0x144>
    5ec8:	ff 24       	eor	r15, r15
    5eca:	f3 94       	inc	r15
    5ecc:	c6 01       	movw	r24, r12
    5ece:	de d1       	rcall	.+956    	; 0x628c <fgetc>
    5ed0:	97 fd       	sbrc	r25, 7
    5ed2:	5a c0       	rjmp	.+180    	; 0x5f88 <vfscanf+0x200>
    5ed4:	81 14       	cp	r8, r1
    5ed6:	91 04       	cpc	r9, r1
    5ed8:	29 f0       	breq	.+10     	; 0x5ee4 <vfscanf+0x15c>
    5eda:	f4 01       	movw	r30, r8
    5edc:	80 83       	st	Z, r24
    5ede:	c4 01       	movw	r24, r8
    5ee0:	01 96       	adiw	r24, 0x01	; 1
    5ee2:	4c 01       	movw	r8, r24
    5ee4:	fa 94       	dec	r15
    5ee6:	f1 10       	cpse	r15, r1
    5ee8:	f1 cf       	rjmp	.-30     	; 0x5ecc <vfscanf+0x144>
    5eea:	4a c0       	rjmp	.+148    	; 0x5f80 <vfscanf+0x1f8>
    5eec:	1b 35       	cpi	r17, 0x5B	; 91
    5eee:	51 f4       	brne	.+20     	; 0x5f04 <vfscanf+0x17c>
    5ef0:	9e 01       	movw	r18, r28
    5ef2:	a4 01       	movw	r20, r8
    5ef4:	6f 2d       	mov	r22, r15
    5ef6:	c6 01       	movw	r24, r12
    5ef8:	6e de       	rcall	.-804    	; 0x5bd6 <conv_brk>
    5efa:	ec 01       	movw	r28, r24
    5efc:	89 2b       	or	r24, r25
    5efe:	09 f0       	breq	.+2      	; 0x5f02 <vfscanf+0x17a>
    5f00:	3f c0       	rjmp	.+126    	; 0x5f80 <vfscanf+0x1f8>
    5f02:	39 c0       	rjmp	.+114    	; 0x5f76 <vfscanf+0x1ee>
    5f04:	c6 01       	movw	r24, r12
    5f06:	c7 dd       	rcall	.-1138   	; 0x5a96 <skip_spaces>
    5f08:	97 fd       	sbrc	r25, 7
    5f0a:	3e c0       	rjmp	.+124    	; 0x5f88 <vfscanf+0x200>
    5f0c:	1f 36       	cpi	r17, 0x6F	; 111
    5f0e:	49 f1       	breq	.+82     	; 0x5f62 <vfscanf+0x1da>
    5f10:	28 f4       	brcc	.+10     	; 0x5f1c <vfscanf+0x194>
    5f12:	14 36       	cpi	r17, 0x64	; 100
    5f14:	21 f1       	breq	.+72     	; 0x5f5e <vfscanf+0x1d6>
    5f16:	19 36       	cpi	r17, 0x69	; 105
    5f18:	39 f1       	breq	.+78     	; 0x5f68 <vfscanf+0x1e0>
    5f1a:	25 c0       	rjmp	.+74     	; 0x5f66 <vfscanf+0x1de>
    5f1c:	13 37       	cpi	r17, 0x73	; 115
    5f1e:	71 f0       	breq	.+28     	; 0x5f3c <vfscanf+0x1b4>
    5f20:	15 37       	cpi	r17, 0x75	; 117
    5f22:	e9 f0       	breq	.+58     	; 0x5f5e <vfscanf+0x1d6>
    5f24:	20 c0       	rjmp	.+64     	; 0x5f66 <vfscanf+0x1de>
    5f26:	81 14       	cp	r8, r1
    5f28:	91 04       	cpc	r9, r1
    5f2a:	29 f0       	breq	.+10     	; 0x5f36 <vfscanf+0x1ae>
    5f2c:	f4 01       	movw	r30, r8
    5f2e:	60 82       	st	Z, r6
    5f30:	c4 01       	movw	r24, r8
    5f32:	01 96       	adiw	r24, 0x01	; 1
    5f34:	4c 01       	movw	r8, r24
    5f36:	fa 94       	dec	r15
    5f38:	ff 20       	and	r15, r15
    5f3a:	59 f0       	breq	.+22     	; 0x5f52 <vfscanf+0x1ca>
    5f3c:	c6 01       	movw	r24, r12
    5f3e:	a6 d1       	rcall	.+844    	; 0x628c <fgetc>
    5f40:	3c 01       	movw	r6, r24
    5f42:	97 fd       	sbrc	r25, 7
    5f44:	06 c0       	rjmp	.+12     	; 0x5f52 <vfscanf+0x1ca>
    5f46:	72 d1       	rcall	.+740    	; 0x622c <isspace>
    5f48:	89 2b       	or	r24, r25
    5f4a:	69 f3       	breq	.-38     	; 0x5f26 <vfscanf+0x19e>
    5f4c:	b6 01       	movw	r22, r12
    5f4e:	c3 01       	movw	r24, r6
    5f50:	17 d2       	rcall	.+1070   	; 0x6380 <ungetc>
    5f52:	81 14       	cp	r8, r1
    5f54:	91 04       	cpc	r9, r1
    5f56:	a1 f0       	breq	.+40     	; 0x5f80 <vfscanf+0x1f8>
    5f58:	f4 01       	movw	r30, r8
    5f5a:	10 82       	st	Z, r1
    5f5c:	11 c0       	rjmp	.+34     	; 0x5f80 <vfscanf+0x1f8>
    5f5e:	00 62       	ori	r16, 0x20	; 32
    5f60:	03 c0       	rjmp	.+6      	; 0x5f68 <vfscanf+0x1e0>
    5f62:	00 61       	ori	r16, 0x10	; 16
    5f64:	01 c0       	rjmp	.+2      	; 0x5f68 <vfscanf+0x1e0>
    5f66:	00 64       	ori	r16, 0x40	; 64
    5f68:	20 2f       	mov	r18, r16
    5f6a:	a4 01       	movw	r20, r8
    5f6c:	6f 2d       	mov	r22, r15
    5f6e:	c6 01       	movw	r24, r12
    5f70:	a8 dd       	rcall	.-1200   	; 0x5ac2 <conv_int>
    5f72:	81 11       	cpse	r24, r1
    5f74:	05 c0       	rjmp	.+10     	; 0x5f80 <vfscanf+0x1f8>
    5f76:	f6 01       	movw	r30, r12
    5f78:	83 81       	ldd	r24, Z+3	; 0x03
    5f7a:	80 73       	andi	r24, 0x30	; 48
    5f7c:	29 f4       	brne	.+10     	; 0x5f88 <vfscanf+0x200>
    5f7e:	06 c0       	rjmp	.+12     	; 0x5f8c <vfscanf+0x204>
    5f80:	00 fd       	sbrc	r16, 0
    5f82:	18 cf       	rjmp	.-464    	; 0x5db4 <vfscanf+0x2c>
    5f84:	53 94       	inc	r5
    5f86:	16 cf       	rjmp	.-468    	; 0x5db4 <vfscanf+0x2c>
    5f88:	55 20       	and	r5, r5
    5f8a:	19 f0       	breq	.+6      	; 0x5f92 <vfscanf+0x20a>
    5f8c:	85 2d       	mov	r24, r5
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	02 c0       	rjmp	.+4      	; 0x5f96 <vfscanf+0x20e>
    5f92:	8f ef       	ldi	r24, 0xFF	; 255
    5f94:	9f ef       	ldi	r25, 0xFF	; 255
    5f96:	df 91       	pop	r29
    5f98:	cf 91       	pop	r28
    5f9a:	1f 91       	pop	r17
    5f9c:	0f 91       	pop	r16
    5f9e:	ff 90       	pop	r15
    5fa0:	ef 90       	pop	r14
    5fa2:	df 90       	pop	r13
    5fa4:	cf 90       	pop	r12
    5fa6:	bf 90       	pop	r11
    5fa8:	af 90       	pop	r10
    5faa:	9f 90       	pop	r9
    5fac:	8f 90       	pop	r8
    5fae:	7f 90       	pop	r7
    5fb0:	6f 90       	pop	r6
    5fb2:	5f 90       	pop	r5
    5fb4:	08 95       	ret

00005fb6 <calloc>:
    5fb6:	0f 93       	push	r16
    5fb8:	1f 93       	push	r17
    5fba:	cf 93       	push	r28
    5fbc:	df 93       	push	r29
    5fbe:	86 9f       	mul	r24, r22
    5fc0:	80 01       	movw	r16, r0
    5fc2:	87 9f       	mul	r24, r23
    5fc4:	10 0d       	add	r17, r0
    5fc6:	96 9f       	mul	r25, r22
    5fc8:	10 0d       	add	r17, r0
    5fca:	11 24       	eor	r1, r1
    5fcc:	c8 01       	movw	r24, r16
    5fce:	0d d0       	rcall	.+26     	; 0x5fea <malloc>
    5fd0:	ec 01       	movw	r28, r24
    5fd2:	00 97       	sbiw	r24, 0x00	; 0
    5fd4:	21 f0       	breq	.+8      	; 0x5fde <calloc+0x28>
    5fd6:	a8 01       	movw	r20, r16
    5fd8:	60 e0       	ldi	r22, 0x00	; 0
    5fda:	70 e0       	ldi	r23, 0x00	; 0
    5fdc:	45 d1       	rcall	.+650    	; 0x6268 <memset>
    5fde:	ce 01       	movw	r24, r28
    5fe0:	df 91       	pop	r29
    5fe2:	cf 91       	pop	r28
    5fe4:	1f 91       	pop	r17
    5fe6:	0f 91       	pop	r16
    5fe8:	08 95       	ret

00005fea <malloc>:
    5fea:	0f 93       	push	r16
    5fec:	1f 93       	push	r17
    5fee:	cf 93       	push	r28
    5ff0:	df 93       	push	r29
    5ff2:	82 30       	cpi	r24, 0x02	; 2
    5ff4:	91 05       	cpc	r25, r1
    5ff6:	10 f4       	brcc	.+4      	; 0x5ffc <malloc+0x12>
    5ff8:	82 e0       	ldi	r24, 0x02	; 2
    5ffa:	90 e0       	ldi	r25, 0x00	; 0
    5ffc:	e0 91 1d 22 	lds	r30, 0x221D	; 0x80221d <__flp>
    6000:	f0 91 1e 22 	lds	r31, 0x221E	; 0x80221e <__flp+0x1>
    6004:	20 e0       	ldi	r18, 0x00	; 0
    6006:	30 e0       	ldi	r19, 0x00	; 0
    6008:	a0 e0       	ldi	r26, 0x00	; 0
    600a:	b0 e0       	ldi	r27, 0x00	; 0
    600c:	30 97       	sbiw	r30, 0x00	; 0
    600e:	19 f1       	breq	.+70     	; 0x6056 <malloc+0x6c>
    6010:	40 81       	ld	r20, Z
    6012:	51 81       	ldd	r21, Z+1	; 0x01
    6014:	02 81       	ldd	r16, Z+2	; 0x02
    6016:	13 81       	ldd	r17, Z+3	; 0x03
    6018:	48 17       	cp	r20, r24
    601a:	59 07       	cpc	r21, r25
    601c:	c8 f0       	brcs	.+50     	; 0x6050 <malloc+0x66>
    601e:	84 17       	cp	r24, r20
    6020:	95 07       	cpc	r25, r21
    6022:	69 f4       	brne	.+26     	; 0x603e <malloc+0x54>
    6024:	10 97       	sbiw	r26, 0x00	; 0
    6026:	31 f0       	breq	.+12     	; 0x6034 <malloc+0x4a>
    6028:	12 96       	adiw	r26, 0x02	; 2
    602a:	0c 93       	st	X, r16
    602c:	12 97       	sbiw	r26, 0x02	; 2
    602e:	13 96       	adiw	r26, 0x03	; 3
    6030:	1c 93       	st	X, r17
    6032:	27 c0       	rjmp	.+78     	; 0x6082 <malloc+0x98>
    6034:	00 93 1d 22 	sts	0x221D, r16	; 0x80221d <__flp>
    6038:	10 93 1e 22 	sts	0x221E, r17	; 0x80221e <__flp+0x1>
    603c:	22 c0       	rjmp	.+68     	; 0x6082 <malloc+0x98>
    603e:	21 15       	cp	r18, r1
    6040:	31 05       	cpc	r19, r1
    6042:	19 f0       	breq	.+6      	; 0x604a <malloc+0x60>
    6044:	42 17       	cp	r20, r18
    6046:	53 07       	cpc	r21, r19
    6048:	18 f4       	brcc	.+6      	; 0x6050 <malloc+0x66>
    604a:	9a 01       	movw	r18, r20
    604c:	bd 01       	movw	r22, r26
    604e:	ef 01       	movw	r28, r30
    6050:	df 01       	movw	r26, r30
    6052:	f8 01       	movw	r30, r16
    6054:	db cf       	rjmp	.-74     	; 0x600c <malloc+0x22>
    6056:	21 15       	cp	r18, r1
    6058:	31 05       	cpc	r19, r1
    605a:	f9 f0       	breq	.+62     	; 0x609a <malloc+0xb0>
    605c:	28 1b       	sub	r18, r24
    605e:	39 0b       	sbc	r19, r25
    6060:	24 30       	cpi	r18, 0x04	; 4
    6062:	31 05       	cpc	r19, r1
    6064:	80 f4       	brcc	.+32     	; 0x6086 <malloc+0x9c>
    6066:	8a 81       	ldd	r24, Y+2	; 0x02
    6068:	9b 81       	ldd	r25, Y+3	; 0x03
    606a:	61 15       	cp	r22, r1
    606c:	71 05       	cpc	r23, r1
    606e:	21 f0       	breq	.+8      	; 0x6078 <malloc+0x8e>
    6070:	fb 01       	movw	r30, r22
    6072:	82 83       	std	Z+2, r24	; 0x02
    6074:	93 83       	std	Z+3, r25	; 0x03
    6076:	04 c0       	rjmp	.+8      	; 0x6080 <malloc+0x96>
    6078:	80 93 1d 22 	sts	0x221D, r24	; 0x80221d <__flp>
    607c:	90 93 1e 22 	sts	0x221E, r25	; 0x80221e <__flp+0x1>
    6080:	fe 01       	movw	r30, r28
    6082:	32 96       	adiw	r30, 0x02	; 2
    6084:	44 c0       	rjmp	.+136    	; 0x610e <malloc+0x124>
    6086:	fe 01       	movw	r30, r28
    6088:	e2 0f       	add	r30, r18
    608a:	f3 1f       	adc	r31, r19
    608c:	81 93       	st	Z+, r24
    608e:	91 93       	st	Z+, r25
    6090:	22 50       	subi	r18, 0x02	; 2
    6092:	31 09       	sbc	r19, r1
    6094:	28 83       	st	Y, r18
    6096:	39 83       	std	Y+1, r19	; 0x01
    6098:	3a c0       	rjmp	.+116    	; 0x610e <malloc+0x124>
    609a:	20 91 1b 22 	lds	r18, 0x221B	; 0x80221b <__brkval>
    609e:	30 91 1c 22 	lds	r19, 0x221C	; 0x80221c <__brkval+0x1>
    60a2:	23 2b       	or	r18, r19
    60a4:	41 f4       	brne	.+16     	; 0x60b6 <malloc+0xcc>
    60a6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    60aa:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    60ae:	20 93 1b 22 	sts	0x221B, r18	; 0x80221b <__brkval>
    60b2:	30 93 1c 22 	sts	0x221C, r19	; 0x80221c <__brkval+0x1>
    60b6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    60ba:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    60be:	21 15       	cp	r18, r1
    60c0:	31 05       	cpc	r19, r1
    60c2:	41 f4       	brne	.+16     	; 0x60d4 <malloc+0xea>
    60c4:	2d b7       	in	r18, 0x3d	; 61
    60c6:	3e b7       	in	r19, 0x3e	; 62
    60c8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    60cc:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    60d0:	24 1b       	sub	r18, r20
    60d2:	35 0b       	sbc	r19, r21
    60d4:	e0 91 1b 22 	lds	r30, 0x221B	; 0x80221b <__brkval>
    60d8:	f0 91 1c 22 	lds	r31, 0x221C	; 0x80221c <__brkval+0x1>
    60dc:	e2 17       	cp	r30, r18
    60de:	f3 07       	cpc	r31, r19
    60e0:	a0 f4       	brcc	.+40     	; 0x610a <malloc+0x120>
    60e2:	2e 1b       	sub	r18, r30
    60e4:	3f 0b       	sbc	r19, r31
    60e6:	28 17       	cp	r18, r24
    60e8:	39 07       	cpc	r19, r25
    60ea:	78 f0       	brcs	.+30     	; 0x610a <malloc+0x120>
    60ec:	ac 01       	movw	r20, r24
    60ee:	4e 5f       	subi	r20, 0xFE	; 254
    60f0:	5f 4f       	sbci	r21, 0xFF	; 255
    60f2:	24 17       	cp	r18, r20
    60f4:	35 07       	cpc	r19, r21
    60f6:	48 f0       	brcs	.+18     	; 0x610a <malloc+0x120>
    60f8:	4e 0f       	add	r20, r30
    60fa:	5f 1f       	adc	r21, r31
    60fc:	40 93 1b 22 	sts	0x221B, r20	; 0x80221b <__brkval>
    6100:	50 93 1c 22 	sts	0x221C, r21	; 0x80221c <__brkval+0x1>
    6104:	81 93       	st	Z+, r24
    6106:	91 93       	st	Z+, r25
    6108:	02 c0       	rjmp	.+4      	; 0x610e <malloc+0x124>
    610a:	e0 e0       	ldi	r30, 0x00	; 0
    610c:	f0 e0       	ldi	r31, 0x00	; 0
    610e:	cf 01       	movw	r24, r30
    6110:	df 91       	pop	r29
    6112:	cf 91       	pop	r28
    6114:	1f 91       	pop	r17
    6116:	0f 91       	pop	r16
    6118:	08 95       	ret

0000611a <free>:
    611a:	cf 93       	push	r28
    611c:	df 93       	push	r29
    611e:	00 97       	sbiw	r24, 0x00	; 0
    6120:	09 f4       	brne	.+2      	; 0x6124 <free+0xa>
    6122:	81 c0       	rjmp	.+258    	; 0x6226 <free+0x10c>
    6124:	fc 01       	movw	r30, r24
    6126:	32 97       	sbiw	r30, 0x02	; 2
    6128:	12 82       	std	Z+2, r1	; 0x02
    612a:	13 82       	std	Z+3, r1	; 0x03
    612c:	a0 91 1d 22 	lds	r26, 0x221D	; 0x80221d <__flp>
    6130:	b0 91 1e 22 	lds	r27, 0x221E	; 0x80221e <__flp+0x1>
    6134:	10 97       	sbiw	r26, 0x00	; 0
    6136:	81 f4       	brne	.+32     	; 0x6158 <free+0x3e>
    6138:	20 81       	ld	r18, Z
    613a:	31 81       	ldd	r19, Z+1	; 0x01
    613c:	82 0f       	add	r24, r18
    613e:	93 1f       	adc	r25, r19
    6140:	20 91 1b 22 	lds	r18, 0x221B	; 0x80221b <__brkval>
    6144:	30 91 1c 22 	lds	r19, 0x221C	; 0x80221c <__brkval+0x1>
    6148:	28 17       	cp	r18, r24
    614a:	39 07       	cpc	r19, r25
    614c:	51 f5       	brne	.+84     	; 0x61a2 <free+0x88>
    614e:	e0 93 1b 22 	sts	0x221B, r30	; 0x80221b <__brkval>
    6152:	f0 93 1c 22 	sts	0x221C, r31	; 0x80221c <__brkval+0x1>
    6156:	67 c0       	rjmp	.+206    	; 0x6226 <free+0x10c>
    6158:	ed 01       	movw	r28, r26
    615a:	20 e0       	ldi	r18, 0x00	; 0
    615c:	30 e0       	ldi	r19, 0x00	; 0
    615e:	ce 17       	cp	r28, r30
    6160:	df 07       	cpc	r29, r31
    6162:	40 f4       	brcc	.+16     	; 0x6174 <free+0x5a>
    6164:	4a 81       	ldd	r20, Y+2	; 0x02
    6166:	5b 81       	ldd	r21, Y+3	; 0x03
    6168:	9e 01       	movw	r18, r28
    616a:	41 15       	cp	r20, r1
    616c:	51 05       	cpc	r21, r1
    616e:	f1 f0       	breq	.+60     	; 0x61ac <free+0x92>
    6170:	ea 01       	movw	r28, r20
    6172:	f5 cf       	rjmp	.-22     	; 0x615e <free+0x44>
    6174:	c2 83       	std	Z+2, r28	; 0x02
    6176:	d3 83       	std	Z+3, r29	; 0x03
    6178:	40 81       	ld	r20, Z
    617a:	51 81       	ldd	r21, Z+1	; 0x01
    617c:	84 0f       	add	r24, r20
    617e:	95 1f       	adc	r25, r21
    6180:	c8 17       	cp	r28, r24
    6182:	d9 07       	cpc	r29, r25
    6184:	59 f4       	brne	.+22     	; 0x619c <free+0x82>
    6186:	88 81       	ld	r24, Y
    6188:	99 81       	ldd	r25, Y+1	; 0x01
    618a:	84 0f       	add	r24, r20
    618c:	95 1f       	adc	r25, r21
    618e:	02 96       	adiw	r24, 0x02	; 2
    6190:	80 83       	st	Z, r24
    6192:	91 83       	std	Z+1, r25	; 0x01
    6194:	8a 81       	ldd	r24, Y+2	; 0x02
    6196:	9b 81       	ldd	r25, Y+3	; 0x03
    6198:	82 83       	std	Z+2, r24	; 0x02
    619a:	93 83       	std	Z+3, r25	; 0x03
    619c:	21 15       	cp	r18, r1
    619e:	31 05       	cpc	r19, r1
    61a0:	29 f4       	brne	.+10     	; 0x61ac <free+0x92>
    61a2:	e0 93 1d 22 	sts	0x221D, r30	; 0x80221d <__flp>
    61a6:	f0 93 1e 22 	sts	0x221E, r31	; 0x80221e <__flp+0x1>
    61aa:	3d c0       	rjmp	.+122    	; 0x6226 <free+0x10c>
    61ac:	e9 01       	movw	r28, r18
    61ae:	ea 83       	std	Y+2, r30	; 0x02
    61b0:	fb 83       	std	Y+3, r31	; 0x03
    61b2:	49 91       	ld	r20, Y+
    61b4:	59 91       	ld	r21, Y+
    61b6:	c4 0f       	add	r28, r20
    61b8:	d5 1f       	adc	r29, r21
    61ba:	ec 17       	cp	r30, r28
    61bc:	fd 07       	cpc	r31, r29
    61be:	61 f4       	brne	.+24     	; 0x61d8 <free+0xbe>
    61c0:	80 81       	ld	r24, Z
    61c2:	91 81       	ldd	r25, Z+1	; 0x01
    61c4:	84 0f       	add	r24, r20
    61c6:	95 1f       	adc	r25, r21
    61c8:	02 96       	adiw	r24, 0x02	; 2
    61ca:	e9 01       	movw	r28, r18
    61cc:	88 83       	st	Y, r24
    61ce:	99 83       	std	Y+1, r25	; 0x01
    61d0:	82 81       	ldd	r24, Z+2	; 0x02
    61d2:	93 81       	ldd	r25, Z+3	; 0x03
    61d4:	8a 83       	std	Y+2, r24	; 0x02
    61d6:	9b 83       	std	Y+3, r25	; 0x03
    61d8:	e0 e0       	ldi	r30, 0x00	; 0
    61da:	f0 e0       	ldi	r31, 0x00	; 0
    61dc:	12 96       	adiw	r26, 0x02	; 2
    61de:	8d 91       	ld	r24, X+
    61e0:	9c 91       	ld	r25, X
    61e2:	13 97       	sbiw	r26, 0x03	; 3
    61e4:	00 97       	sbiw	r24, 0x00	; 0
    61e6:	19 f0       	breq	.+6      	; 0x61ee <free+0xd4>
    61e8:	fd 01       	movw	r30, r26
    61ea:	dc 01       	movw	r26, r24
    61ec:	f7 cf       	rjmp	.-18     	; 0x61dc <free+0xc2>
    61ee:	8d 91       	ld	r24, X+
    61f0:	9c 91       	ld	r25, X
    61f2:	11 97       	sbiw	r26, 0x01	; 1
    61f4:	9d 01       	movw	r18, r26
    61f6:	2e 5f       	subi	r18, 0xFE	; 254
    61f8:	3f 4f       	sbci	r19, 0xFF	; 255
    61fa:	82 0f       	add	r24, r18
    61fc:	93 1f       	adc	r25, r19
    61fe:	20 91 1b 22 	lds	r18, 0x221B	; 0x80221b <__brkval>
    6202:	30 91 1c 22 	lds	r19, 0x221C	; 0x80221c <__brkval+0x1>
    6206:	28 17       	cp	r18, r24
    6208:	39 07       	cpc	r19, r25
    620a:	69 f4       	brne	.+26     	; 0x6226 <free+0x10c>
    620c:	30 97       	sbiw	r30, 0x00	; 0
    620e:	29 f4       	brne	.+10     	; 0x621a <free+0x100>
    6210:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <__flp>
    6214:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <__flp+0x1>
    6218:	02 c0       	rjmp	.+4      	; 0x621e <free+0x104>
    621a:	12 82       	std	Z+2, r1	; 0x02
    621c:	13 82       	std	Z+3, r1	; 0x03
    621e:	a0 93 1b 22 	sts	0x221B, r26	; 0x80221b <__brkval>
    6222:	b0 93 1c 22 	sts	0x221C, r27	; 0x80221c <__brkval+0x1>
    6226:	df 91       	pop	r29
    6228:	cf 91       	pop	r28
    622a:	08 95       	ret

0000622c <isspace>:
    622c:	91 11       	cpse	r25, r1
    622e:	1f c1       	rjmp	.+574    	; 0x646e <__ctype_isfalse>
    6230:	80 32       	cpi	r24, 0x20	; 32
    6232:	19 f0       	breq	.+6      	; 0x623a <isspace+0xe>
    6234:	89 50       	subi	r24, 0x09	; 9
    6236:	85 50       	subi	r24, 0x05	; 5
    6238:	d0 f7       	brcc	.-12     	; 0x622e <isspace+0x2>
    623a:	08 95       	ret

0000623c <strchr_P>:
    623c:	fc 01       	movw	r30, r24
    623e:	05 90       	lpm	r0, Z+
    6240:	06 16       	cp	r0, r22
    6242:	21 f0       	breq	.+8      	; 0x624c <strchr_P+0x10>
    6244:	00 20       	and	r0, r0
    6246:	d9 f7       	brne	.-10     	; 0x623e <strchr_P+0x2>
    6248:	c0 01       	movw	r24, r0
    624a:	08 95       	ret
    624c:	31 97       	sbiw	r30, 0x01	; 1
    624e:	cf 01       	movw	r24, r30
    6250:	08 95       	ret

00006252 <strnlen_P>:
    6252:	fc 01       	movw	r30, r24
    6254:	05 90       	lpm	r0, Z+
    6256:	61 50       	subi	r22, 0x01	; 1
    6258:	70 40       	sbci	r23, 0x00	; 0
    625a:	01 10       	cpse	r0, r1
    625c:	d8 f7       	brcc	.-10     	; 0x6254 <strnlen_P+0x2>
    625e:	80 95       	com	r24
    6260:	90 95       	com	r25
    6262:	8e 0f       	add	r24, r30
    6264:	9f 1f       	adc	r25, r31
    6266:	08 95       	ret

00006268 <memset>:
    6268:	dc 01       	movw	r26, r24
    626a:	01 c0       	rjmp	.+2      	; 0x626e <memset+0x6>
    626c:	6d 93       	st	X+, r22
    626e:	41 50       	subi	r20, 0x01	; 1
    6270:	50 40       	sbci	r21, 0x00	; 0
    6272:	e0 f7       	brcc	.-8      	; 0x626c <memset+0x4>
    6274:	08 95       	ret

00006276 <strnlen>:
    6276:	fc 01       	movw	r30, r24
    6278:	61 50       	subi	r22, 0x01	; 1
    627a:	70 40       	sbci	r23, 0x00	; 0
    627c:	01 90       	ld	r0, Z+
    627e:	01 10       	cpse	r0, r1
    6280:	d8 f7       	brcc	.-10     	; 0x6278 <strnlen+0x2>
    6282:	80 95       	com	r24
    6284:	90 95       	com	r25
    6286:	8e 0f       	add	r24, r30
    6288:	9f 1f       	adc	r25, r31
    628a:	08 95       	ret

0000628c <fgetc>:
    628c:	cf 93       	push	r28
    628e:	df 93       	push	r29
    6290:	ec 01       	movw	r28, r24
    6292:	2b 81       	ldd	r18, Y+3	; 0x03
    6294:	20 ff       	sbrs	r18, 0
    6296:	33 c0       	rjmp	.+102    	; 0x62fe <fgetc+0x72>
    6298:	26 ff       	sbrs	r18, 6
    629a:	0a c0       	rjmp	.+20     	; 0x62b0 <fgetc+0x24>
    629c:	2f 7b       	andi	r18, 0xBF	; 191
    629e:	2b 83       	std	Y+3, r18	; 0x03
    62a0:	8e 81       	ldd	r24, Y+6	; 0x06
    62a2:	9f 81       	ldd	r25, Y+7	; 0x07
    62a4:	01 96       	adiw	r24, 0x01	; 1
    62a6:	8e 83       	std	Y+6, r24	; 0x06
    62a8:	9f 83       	std	Y+7, r25	; 0x07
    62aa:	8a 81       	ldd	r24, Y+2	; 0x02
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	29 c0       	rjmp	.+82     	; 0x6302 <fgetc+0x76>
    62b0:	22 ff       	sbrs	r18, 2
    62b2:	0f c0       	rjmp	.+30     	; 0x62d2 <fgetc+0x46>
    62b4:	e8 81       	ld	r30, Y
    62b6:	f9 81       	ldd	r31, Y+1	; 0x01
    62b8:	80 81       	ld	r24, Z
    62ba:	08 2e       	mov	r0, r24
    62bc:	00 0c       	add	r0, r0
    62be:	99 0b       	sbc	r25, r25
    62c0:	00 97       	sbiw	r24, 0x00	; 0
    62c2:	19 f4       	brne	.+6      	; 0x62ca <fgetc+0x3e>
    62c4:	20 62       	ori	r18, 0x20	; 32
    62c6:	2b 83       	std	Y+3, r18	; 0x03
    62c8:	1a c0       	rjmp	.+52     	; 0x62fe <fgetc+0x72>
    62ca:	31 96       	adiw	r30, 0x01	; 1
    62cc:	e8 83       	st	Y, r30
    62ce:	f9 83       	std	Y+1, r31	; 0x01
    62d0:	0e c0       	rjmp	.+28     	; 0x62ee <fgetc+0x62>
    62d2:	ea 85       	ldd	r30, Y+10	; 0x0a
    62d4:	fb 85       	ldd	r31, Y+11	; 0x0b
    62d6:	19 95       	eicall
    62d8:	97 ff       	sbrs	r25, 7
    62da:	09 c0       	rjmp	.+18     	; 0x62ee <fgetc+0x62>
    62dc:	2b 81       	ldd	r18, Y+3	; 0x03
    62de:	01 96       	adiw	r24, 0x01	; 1
    62e0:	11 f0       	breq	.+4      	; 0x62e6 <fgetc+0x5a>
    62e2:	80 e2       	ldi	r24, 0x20	; 32
    62e4:	01 c0       	rjmp	.+2      	; 0x62e8 <fgetc+0x5c>
    62e6:	80 e1       	ldi	r24, 0x10	; 16
    62e8:	82 2b       	or	r24, r18
    62ea:	8b 83       	std	Y+3, r24	; 0x03
    62ec:	08 c0       	rjmp	.+16     	; 0x62fe <fgetc+0x72>
    62ee:	2e 81       	ldd	r18, Y+6	; 0x06
    62f0:	3f 81       	ldd	r19, Y+7	; 0x07
    62f2:	2f 5f       	subi	r18, 0xFF	; 255
    62f4:	3f 4f       	sbci	r19, 0xFF	; 255
    62f6:	2e 83       	std	Y+6, r18	; 0x06
    62f8:	3f 83       	std	Y+7, r19	; 0x07
    62fa:	99 27       	eor	r25, r25
    62fc:	02 c0       	rjmp	.+4      	; 0x6302 <fgetc+0x76>
    62fe:	8f ef       	ldi	r24, 0xFF	; 255
    6300:	9f ef       	ldi	r25, 0xFF	; 255
    6302:	df 91       	pop	r29
    6304:	cf 91       	pop	r28
    6306:	08 95       	ret

00006308 <fputc>:
    6308:	0f 93       	push	r16
    630a:	1f 93       	push	r17
    630c:	cf 93       	push	r28
    630e:	df 93       	push	r29
    6310:	fb 01       	movw	r30, r22
    6312:	23 81       	ldd	r18, Z+3	; 0x03
    6314:	21 fd       	sbrc	r18, 1
    6316:	03 c0       	rjmp	.+6      	; 0x631e <fputc+0x16>
    6318:	8f ef       	ldi	r24, 0xFF	; 255
    631a:	9f ef       	ldi	r25, 0xFF	; 255
    631c:	2c c0       	rjmp	.+88     	; 0x6376 <fputc+0x6e>
    631e:	22 ff       	sbrs	r18, 2
    6320:	16 c0       	rjmp	.+44     	; 0x634e <fputc+0x46>
    6322:	46 81       	ldd	r20, Z+6	; 0x06
    6324:	57 81       	ldd	r21, Z+7	; 0x07
    6326:	24 81       	ldd	r18, Z+4	; 0x04
    6328:	35 81       	ldd	r19, Z+5	; 0x05
    632a:	42 17       	cp	r20, r18
    632c:	53 07       	cpc	r21, r19
    632e:	44 f4       	brge	.+16     	; 0x6340 <fputc+0x38>
    6330:	a0 81       	ld	r26, Z
    6332:	b1 81       	ldd	r27, Z+1	; 0x01
    6334:	9d 01       	movw	r18, r26
    6336:	2f 5f       	subi	r18, 0xFF	; 255
    6338:	3f 4f       	sbci	r19, 0xFF	; 255
    633a:	20 83       	st	Z, r18
    633c:	31 83       	std	Z+1, r19	; 0x01
    633e:	8c 93       	st	X, r24
    6340:	26 81       	ldd	r18, Z+6	; 0x06
    6342:	37 81       	ldd	r19, Z+7	; 0x07
    6344:	2f 5f       	subi	r18, 0xFF	; 255
    6346:	3f 4f       	sbci	r19, 0xFF	; 255
    6348:	26 83       	std	Z+6, r18	; 0x06
    634a:	37 83       	std	Z+7, r19	; 0x07
    634c:	14 c0       	rjmp	.+40     	; 0x6376 <fputc+0x6e>
    634e:	8b 01       	movw	r16, r22
    6350:	ec 01       	movw	r28, r24
    6352:	fb 01       	movw	r30, r22
    6354:	00 84       	ldd	r0, Z+8	; 0x08
    6356:	f1 85       	ldd	r31, Z+9	; 0x09
    6358:	e0 2d       	mov	r30, r0
    635a:	19 95       	eicall
    635c:	89 2b       	or	r24, r25
    635e:	e1 f6       	brne	.-72     	; 0x6318 <fputc+0x10>
    6360:	d8 01       	movw	r26, r16
    6362:	16 96       	adiw	r26, 0x06	; 6
    6364:	8d 91       	ld	r24, X+
    6366:	9c 91       	ld	r25, X
    6368:	17 97       	sbiw	r26, 0x07	; 7
    636a:	01 96       	adiw	r24, 0x01	; 1
    636c:	16 96       	adiw	r26, 0x06	; 6
    636e:	8d 93       	st	X+, r24
    6370:	9c 93       	st	X, r25
    6372:	17 97       	sbiw	r26, 0x07	; 7
    6374:	ce 01       	movw	r24, r28
    6376:	df 91       	pop	r29
    6378:	cf 91       	pop	r28
    637a:	1f 91       	pop	r17
    637c:	0f 91       	pop	r16
    637e:	08 95       	ret

00006380 <ungetc>:
    6380:	fb 01       	movw	r30, r22
    6382:	23 81       	ldd	r18, Z+3	; 0x03
    6384:	20 ff       	sbrs	r18, 0
    6386:	12 c0       	rjmp	.+36     	; 0x63ac <ungetc+0x2c>
    6388:	26 fd       	sbrc	r18, 6
    638a:	10 c0       	rjmp	.+32     	; 0x63ac <ungetc+0x2c>
    638c:	8f 3f       	cpi	r24, 0xFF	; 255
    638e:	3f ef       	ldi	r19, 0xFF	; 255
    6390:	93 07       	cpc	r25, r19
    6392:	61 f0       	breq	.+24     	; 0x63ac <ungetc+0x2c>
    6394:	82 83       	std	Z+2, r24	; 0x02
    6396:	2f 7d       	andi	r18, 0xDF	; 223
    6398:	20 64       	ori	r18, 0x40	; 64
    639a:	23 83       	std	Z+3, r18	; 0x03
    639c:	26 81       	ldd	r18, Z+6	; 0x06
    639e:	37 81       	ldd	r19, Z+7	; 0x07
    63a0:	21 50       	subi	r18, 0x01	; 1
    63a2:	31 09       	sbc	r19, r1
    63a4:	26 83       	std	Z+6, r18	; 0x06
    63a6:	37 83       	std	Z+7, r19	; 0x07
    63a8:	99 27       	eor	r25, r25
    63aa:	08 95       	ret
    63ac:	8f ef       	ldi	r24, 0xFF	; 255
    63ae:	9f ef       	ldi	r25, 0xFF	; 255
    63b0:	08 95       	ret

000063b2 <__ultoa_invert>:
    63b2:	fa 01       	movw	r30, r20
    63b4:	aa 27       	eor	r26, r26
    63b6:	28 30       	cpi	r18, 0x08	; 8
    63b8:	51 f1       	breq	.+84     	; 0x640e <__ultoa_invert+0x5c>
    63ba:	20 31       	cpi	r18, 0x10	; 16
    63bc:	81 f1       	breq	.+96     	; 0x641e <__ultoa_invert+0x6c>
    63be:	e8 94       	clt
    63c0:	6f 93       	push	r22
    63c2:	6e 7f       	andi	r22, 0xFE	; 254
    63c4:	6e 5f       	subi	r22, 0xFE	; 254
    63c6:	7f 4f       	sbci	r23, 0xFF	; 255
    63c8:	8f 4f       	sbci	r24, 0xFF	; 255
    63ca:	9f 4f       	sbci	r25, 0xFF	; 255
    63cc:	af 4f       	sbci	r26, 0xFF	; 255
    63ce:	b1 e0       	ldi	r27, 0x01	; 1
    63d0:	3e d0       	rcall	.+124    	; 0x644e <__ultoa_invert+0x9c>
    63d2:	b4 e0       	ldi	r27, 0x04	; 4
    63d4:	3c d0       	rcall	.+120    	; 0x644e <__ultoa_invert+0x9c>
    63d6:	67 0f       	add	r22, r23
    63d8:	78 1f       	adc	r23, r24
    63da:	89 1f       	adc	r24, r25
    63dc:	9a 1f       	adc	r25, r26
    63de:	a1 1d       	adc	r26, r1
    63e0:	68 0f       	add	r22, r24
    63e2:	79 1f       	adc	r23, r25
    63e4:	8a 1f       	adc	r24, r26
    63e6:	91 1d       	adc	r25, r1
    63e8:	a1 1d       	adc	r26, r1
    63ea:	6a 0f       	add	r22, r26
    63ec:	71 1d       	adc	r23, r1
    63ee:	81 1d       	adc	r24, r1
    63f0:	91 1d       	adc	r25, r1
    63f2:	a1 1d       	adc	r26, r1
    63f4:	20 d0       	rcall	.+64     	; 0x6436 <__ultoa_invert+0x84>
    63f6:	09 f4       	brne	.+2      	; 0x63fa <__ultoa_invert+0x48>
    63f8:	68 94       	set
    63fa:	3f 91       	pop	r19
    63fc:	2a e0       	ldi	r18, 0x0A	; 10
    63fe:	26 9f       	mul	r18, r22
    6400:	11 24       	eor	r1, r1
    6402:	30 19       	sub	r19, r0
    6404:	30 5d       	subi	r19, 0xD0	; 208
    6406:	31 93       	st	Z+, r19
    6408:	de f6       	brtc	.-74     	; 0x63c0 <__ultoa_invert+0xe>
    640a:	cf 01       	movw	r24, r30
    640c:	08 95       	ret
    640e:	46 2f       	mov	r20, r22
    6410:	47 70       	andi	r20, 0x07	; 7
    6412:	40 5d       	subi	r20, 0xD0	; 208
    6414:	41 93       	st	Z+, r20
    6416:	b3 e0       	ldi	r27, 0x03	; 3
    6418:	0f d0       	rcall	.+30     	; 0x6438 <__ultoa_invert+0x86>
    641a:	c9 f7       	brne	.-14     	; 0x640e <__ultoa_invert+0x5c>
    641c:	f6 cf       	rjmp	.-20     	; 0x640a <__ultoa_invert+0x58>
    641e:	46 2f       	mov	r20, r22
    6420:	4f 70       	andi	r20, 0x0F	; 15
    6422:	40 5d       	subi	r20, 0xD0	; 208
    6424:	4a 33       	cpi	r20, 0x3A	; 58
    6426:	18 f0       	brcs	.+6      	; 0x642e <__ultoa_invert+0x7c>
    6428:	49 5d       	subi	r20, 0xD9	; 217
    642a:	31 fd       	sbrc	r19, 1
    642c:	40 52       	subi	r20, 0x20	; 32
    642e:	41 93       	st	Z+, r20
    6430:	02 d0       	rcall	.+4      	; 0x6436 <__ultoa_invert+0x84>
    6432:	a9 f7       	brne	.-22     	; 0x641e <__ultoa_invert+0x6c>
    6434:	ea cf       	rjmp	.-44     	; 0x640a <__ultoa_invert+0x58>
    6436:	b4 e0       	ldi	r27, 0x04	; 4
    6438:	a6 95       	lsr	r26
    643a:	97 95       	ror	r25
    643c:	87 95       	ror	r24
    643e:	77 95       	ror	r23
    6440:	67 95       	ror	r22
    6442:	ba 95       	dec	r27
    6444:	c9 f7       	brne	.-14     	; 0x6438 <__ultoa_invert+0x86>
    6446:	00 97       	sbiw	r24, 0x00	; 0
    6448:	61 05       	cpc	r22, r1
    644a:	71 05       	cpc	r23, r1
    644c:	08 95       	ret
    644e:	9b 01       	movw	r18, r22
    6450:	ac 01       	movw	r20, r24
    6452:	0a 2e       	mov	r0, r26
    6454:	06 94       	lsr	r0
    6456:	57 95       	ror	r21
    6458:	47 95       	ror	r20
    645a:	37 95       	ror	r19
    645c:	27 95       	ror	r18
    645e:	ba 95       	dec	r27
    6460:	c9 f7       	brne	.-14     	; 0x6454 <__ultoa_invert+0xa2>
    6462:	62 0f       	add	r22, r18
    6464:	73 1f       	adc	r23, r19
    6466:	84 1f       	adc	r24, r20
    6468:	95 1f       	adc	r25, r21
    646a:	a0 1d       	adc	r26, r0
    646c:	08 95       	ret

0000646e <__ctype_isfalse>:
    646e:	99 27       	eor	r25, r25
    6470:	88 27       	eor	r24, r24

00006472 <__ctype_istrue>:
    6472:	08 95       	ret

00006474 <_exit>:
    6474:	f8 94       	cli

00006476 <__stop_program>:
    6476:	ff cf       	rjmp	.-2      	; 0x6476 <__stop_program>
