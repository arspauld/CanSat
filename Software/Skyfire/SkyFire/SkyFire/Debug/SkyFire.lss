
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  00006e76  00006f0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015a  008020b2  008020b2  00006fbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006fbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007018  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000f48  00000000  00000000  00007058  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000274a8  00000000  00000000  00007fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005b9c  00000000  00000000  0002f448  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000142c5  00000000  00000000  00034fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004a44  00000000  00000000  000492ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003b508  00000000  00000000  0004dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a5a2  00000000  00000000  000891f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ea8  00000000  00000000  000a37a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00010753  00000000  00000000  000a4648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_13>
      38:	f2 c3       	rjmp	.+2020   	; 0x81e <__vector_14>
      3a:	00 00       	nop
      3c:	28 c4       	rjmp	.+2128   	; 0x88e <__vector_15>
      3e:	00 00       	nop
      40:	5e c4       	rjmp	.+2236   	; 0x8fe <__vector_16>
      42:	00 00       	nop
      44:	94 c4       	rjmp	.+2344   	; 0x96e <__vector_17>
      46:	00 00       	nop
      48:	ca c4       	rjmp	.+2452   	; 0x9de <__vector_18>
      4a:	00 00       	nop
      4c:	00 c5       	rjmp	.+2560   	; 0xa4e <__vector_19>
      4e:	00 00       	nop
      50:	36 c5       	rjmp	.+2668   	; 0xabe <__vector_20>
      52:	00 00       	nop
      54:	6c c5       	rjmp	.+2776   	; 0xb2e <__vector_21>
      56:	00 00       	nop
      58:	a2 c5       	rjmp	.+2884   	; 0xb9e <__vector_22>
      5a:	00 00       	nop
      5c:	d8 c5       	rjmp	.+2992   	; 0xc0e <__vector_23>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	35 c1       	rjmp	.+618    	; 0x2fc <__bad_interrupt>
      92:	00 00       	nop
      94:	33 c1       	rjmp	.+614    	; 0x2fc <__bad_interrupt>
      96:	00 00       	nop
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2f c1       	rjmp	.+606    	; 0x2fc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_46>
      bc:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <__vector_47>
      c0:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_48>
      c4:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_49>
      c8:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_50>
      cc:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_51>
      d0:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_52>
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	11 c1       	rjmp	.+546    	; 0x2fc <__bad_interrupt>
      da:	00 00       	nop
      dc:	0f c1       	rjmp	.+542    	; 0x2fc <__bad_interrupt>
      de:	00 00       	nop
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b c1       	rjmp	.+534    	; 0x2fc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 f3 27 	jmp	0x4fe6	; 0x4fe6 <__vector_58>
      ec:	07 c1       	rjmp	.+526    	; 0x2fc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	05 c1       	rjmp	.+522    	; 0x2fc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	03 c1       	rjmp	.+518    	; 0x2fc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	01 c1       	rjmp	.+514    	; 0x2fc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ff c0       	rjmp	.+510    	; 0x2fc <__bad_interrupt>
      fe:	00 00       	nop
     100:	fd c0       	rjmp	.+506    	; 0x2fc <__bad_interrupt>
     102:	00 00       	nop
     104:	fb c0       	rjmp	.+502    	; 0x2fc <__bad_interrupt>
     106:	00 00       	nop
     108:	f9 c0       	rjmp	.+498    	; 0x2fc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f7 c0       	rjmp	.+494    	; 0x2fc <__bad_interrupt>
     10e:	00 00       	nop
     110:	21 c1       	rjmp	.+578    	; 0x354 <__vector_68>
     112:	00 00       	nop
     114:	65 c1       	rjmp	.+714    	; 0x3e0 <__vector_69>
     116:	00 00       	nop
     118:	a9 c1       	rjmp	.+850    	; 0x46c <__vector_70>
     11a:	00 00       	nop
     11c:	8c c2       	rjmp	.+1304   	; 0x636 <__vector_71>
     11e:	00 00       	nop
     120:	c7 c2       	rjmp	.+1422   	; 0x6b0 <__vector_72>
     122:	00 00       	nop
     124:	02 c3       	rjmp	.+1540   	; 0x72a <__vector_73>
     126:	00 00       	nop
     128:	3d c3       	rjmp	.+1658   	; 0x7a4 <__vector_74>
     12a:	00 00       	nop
     12c:	e7 c0       	rjmp	.+462    	; 0x2fc <__bad_interrupt>
     12e:	00 00       	nop
     130:	e5 c0       	rjmp	.+458    	; 0x2fc <__bad_interrupt>
     132:	00 00       	nop
     134:	a4 c5       	rjmp	.+2888   	; 0xc7e <__vector_77>
     136:	00 00       	nop
     138:	da c5       	rjmp	.+2996   	; 0xcee <__vector_78>
     13a:	00 00       	nop
     13c:	10 c6       	rjmp	.+3104   	; 0xd5e <__vector_79>
     13e:	00 00       	nop
     140:	46 c6       	rjmp	.+3212   	; 0xdce <__vector_80>
     142:	00 00       	nop
     144:	7c c6       	rjmp	.+3320   	; 0xe3e <__vector_81>
     146:	00 00       	nop
     148:	b2 c6       	rjmp	.+3428   	; 0xeae <__vector_82>
     14a:	00 00       	nop
     14c:	e8 c6       	rjmp	.+3536   	; 0xf1e <__vector_83>
     14e:	00 00       	nop
     150:	1e c7       	rjmp	.+3644   	; 0xf8e <__vector_84>
     152:	00 00       	nop
     154:	54 c7       	rjmp	.+3752   	; 0xffe <__vector_85>
     156:	00 00       	nop
     158:	8a c7       	rjmp	.+3860   	; 0x106e <__vector_86>
     15a:	00 00       	nop
     15c:	cf c0       	rjmp	.+414    	; 0x2fc <__bad_interrupt>
     15e:	00 00       	nop
     160:	cd c0       	rjmp	.+410    	; 0x2fc <__bad_interrupt>
     162:	00 00       	nop
     164:	cb c0       	rjmp	.+406    	; 0x2fc <__bad_interrupt>
     166:	00 00       	nop
     168:	c9 c0       	rjmp	.+402    	; 0x2fc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 2d 28 	jmp	0x505a	; 0x505a <__vector_91>
     170:	c5 c0       	rjmp	.+394    	; 0x2fc <__bad_interrupt>
     172:	00 00       	nop
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__bad_interrupt>
     176:	00 00       	nop
     178:	c1 c0       	rjmp	.+386    	; 0x2fc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bf c0       	rjmp	.+382    	; 0x2fc <__bad_interrupt>
     17e:	00 00       	nop
     180:	bd c0       	rjmp	.+378    	; 0x2fc <__bad_interrupt>
     182:	00 00       	nop
     184:	bb c0       	rjmp	.+374    	; 0x2fc <__bad_interrupt>
     186:	00 00       	nop
     188:	b9 c0       	rjmp	.+370    	; 0x2fc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b7 c0       	rjmp	.+366    	; 0x2fc <__bad_interrupt>
     18e:	00 00       	nop
     190:	b5 c0       	rjmp	.+362    	; 0x2fc <__bad_interrupt>
     192:	00 00       	nop
     194:	b3 c0       	rjmp	.+358    	; 0x2fc <__bad_interrupt>
     196:	00 00       	nop
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	af c0       	rjmp	.+350    	; 0x2fc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ad c0       	rjmp	.+346    	; 0x2fc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ab c0       	rjmp	.+342    	; 0x2fc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a9 c0       	rjmp	.+338    	; 0x2fc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a7 c0       	rjmp	.+334    	; 0x2fc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a5 c0       	rjmp	.+330    	; 0x2fc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	a3 c0       	rjmp	.+326    	; 0x2fc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	a1 c0       	rjmp	.+322    	; 0x2fc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9f c0       	rjmp	.+318    	; 0x2fc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	9d c0       	rjmp	.+314    	; 0x2fc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	9b c0       	rjmp	.+310    	; 0x2fc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	99 c0       	rjmp	.+306    	; 0x2fc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	97 c0       	rjmp	.+302    	; 0x2fc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	95 c0       	rjmp	.+298    	; 0x2fc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	93 c0       	rjmp	.+294    	; 0x2fc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	91 c0       	rjmp	.+290    	; 0x2fc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8f c0       	rjmp	.+286    	; 0x2fc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8d c0       	rjmp	.+282    	; 0x2fc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8b c0       	rjmp	.+278    	; 0x2fc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	89 c0       	rjmp	.+274    	; 0x2fc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	87 c0       	rjmp	.+270    	; 0x2fc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	83 c0       	rjmp	.+262    	; 0x2fc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	81 c0       	rjmp	.+258    	; 0x2fc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	f1 26       	eor	r15, r17
     1fe:	ee 26       	eor	r14, r30
     200:	eb 26       	eor	r14, r27
     202:	f7 26       	eor	r15, r23
     204:	e8 26       	eor	r14, r24
     206:	e6 26       	eor	r14, r22
     208:	f9 26       	eor	r15, r25
     20a:	f9 26       	eor	r15, r25
     20c:	f9 26       	eor	r15, r25
     20e:	f9 26       	eor	r15, r25
     210:	f9 26       	eor	r15, r25
     212:	f9 26       	eor	r15, r25
     214:	f9 26       	eor	r15, r25
     216:	f9 26       	eor	r15, r25
     218:	f9 26       	eor	r15, r25
     21a:	f9 26       	eor	r15, r25
     21c:	f9 26       	eor	r15, r25
     21e:	f9 26       	eor	r15, r25
     220:	f4 26       	eor	r15, r20
     222:	08 00       	.word	0x0008	; ????
     224:	00 00       	nop
     226:	be 92       	st	-X, r11
     228:	24 49       	sbci	r18, 0x94	; 148
     22a:	12 3e       	cpi	r17, 0xE2	; 226
     22c:	ab aa       	std	Y+51, r10	; 0x33
     22e:	aa 2a       	or	r10, r26
     230:	be cd       	rjmp	.-1156   	; 0xfffffdae <__eeprom_end+0xff7efdae>
     232:	cc cc       	rjmp	.-1640   	; 0xfffffbcc <__eeprom_end+0xff7efbcc>
     234:	4c 3e       	cpi	r20, 0xEC	; 236
     236:	00 00       	nop
     238:	00 80       	ld	r0, Z
     23a:	be ab       	std	Y+54, r27	; 0x36
     23c:	aa aa       	std	Y+50, r10	; 0x32
     23e:	aa 3e       	cpi	r26, 0xEA	; 234
     240:	00 00       	nop
     242:	00 00       	nop
     244:	bf 00       	.word	0x00bf	; ????
     246:	00 00       	nop
     248:	80 3f       	cpi	r24, 0xF0	; 240
     24a:	00 00       	nop
     24c:	00 00       	nop
     24e:	00 08       	sbc	r0, r0
     250:	41 78       	andi	r20, 0x81	; 129
     252:	d3 bb       	out	0x13, r29	; 19
     254:	43 87       	std	Z+11, r20	; 0x0b
     256:	d1 13       	cpse	r29, r17
     258:	3d 19       	sub	r19, r13
     25a:	0e 3c       	cpi	r16, 0xCE	; 206
     25c:	c3 bd       	out	0x23, r28	; 35
     25e:	42 82       	std	Z+2, r4	; 0x02
     260:	ad 2b       	or	r26, r29
     262:	3e 68       	ori	r19, 0x8E	; 142
     264:	ec 82       	std	Y+4, r14	; 0x04
     266:	76 be       	out	0x36, r7	; 54
     268:	d9 8f       	std	Y+25, r29	; 0x19
     26a:	e1 a9       	ldd	r30, Z+49	; 0x31
     26c:	3e 4c       	sbci	r19, 0xCE	; 206
     26e:	80 ef       	ldi	r24, 0xF0	; 240
     270:	ff be       	out	0x3f, r15	; 63
     272:	01 c4       	rjmp	.+2050   	; 0xa76 <__vector_19+0x28>
     274:	ff 7f       	andi	r31, 0xFF	; 255
     276:	3f 00       	.word	0x003f	; ????
     278:	00 00       	nop
     27a:	00 00       	nop
     27c:	07 63       	ori	r16, 0x37	; 55
     27e:	42 36       	cpi	r20, 0x62	; 98
     280:	b7 9b       	sbis	0x16, 7	; 22
     282:	d8 a7       	std	Y+40, r29	; 0x28
     284:	1a 39       	cpi	r17, 0x9A	; 154
     286:	68 56       	subi	r22, 0x68	; 104
     288:	18 ae       	std	Y+56, r1	; 0x38
     28a:	ba ab       	std	Y+50, r27	; 0x32
     28c:	55 8c       	ldd	r5, Z+29	; 0x1d
     28e:	1d 3c       	cpi	r17, 0xCD	; 205
     290:	b7 cc       	rjmp	.-1682   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
     292:	57 63       	ori	r21, 0x37	; 55
     294:	bd 6d       	ori	r27, 0xDD	; 221
     296:	ed fd       	.word	0xfded	; ????
     298:	75 3e       	cpi	r23, 0xE5	; 229
     29a:	f6 17       	cp	r31, r22
     29c:	72 31       	cpi	r23, 0x12	; 18
     29e:	bf 00       	.word	0x00bf	; ????
     2a0:	00 00       	nop
     2a2:	80 3f       	cpi	r24, 0xF0	; 240

000002a4 <__trampolines_end>:
     2a4:	63 64       	ori	r22, 0x43	; 67
     2a6:	69 6e       	ori	r22, 0xE9	; 233
     2a8:	6f 70       	andi	r22, 0x0F	; 15
     2aa:	73 75       	andi	r23, 0x53	; 83
     2ac:	78 58       	subi	r23, 0x88	; 136
     2ae:	5b 00       	.word	0x005b	; ????

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df e3       	ldi	r29, 0x3F	; 63
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60
     2c0:	18 be       	out	0x38, r1	; 56
     2c2:	19 be       	out	0x39, r1	; 57
     2c4:	1a be       	out	0x3a, r1	; 58
     2c6:	1b be       	out	0x3b, r1	; 59

000002c8 <__do_copy_data>:
     2c8:	10 e2       	ldi	r17, 0x20	; 32
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e2       	ldi	r27, 0x20	; 32
     2ce:	e6 e7       	ldi	r30, 0x76	; 118
     2d0:	fe e6       	ldi	r31, 0x6E	; 110
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0b bf       	out	0x3b, r16	; 59
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x14>
     2d8:	07 90       	elpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	a2 3b       	cpi	r26, 0xB2	; 178
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0x10>
     2e2:	1b be       	out	0x3b, r1	; 59

000002e4 <__do_clear_bss>:
     2e4:	22 e2       	ldi	r18, 0x22	; 34
     2e6:	a2 eb       	ldi	r26, 0xB2	; 178
     2e8:	b0 e2       	ldi	r27, 0x20	; 32
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	ac 30       	cpi	r26, 0x0C	; 12
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <main>
     2f8:	0c 94 39 37 	jmp	0x6e72	; 0x6e72 <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     308:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <stdio_base>
     30c:	90 91 5c 21 	lds	r25, 0x215C	; 0x80215c <stdio_base+0x1>
     310:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <ptr_get>
     314:	f0 91 58 21 	lds	r31, 0x2158	; 0x802158 <ptr_get+0x1>
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	19 95       	eicall
	return c;
     320:	89 81       	ldd	r24, Y+1	; 0x01
}
     322:	08 2e       	mov	r0, r24
     324:	00 0c       	add	r0, r0
     326:	99 0b       	sbc	r25, r25
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     330:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     332:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <stdio_base>
     336:	90 91 5c 21 	lds	r25, 0x215C	; 0x80215c <stdio_base+0x1>
     33a:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <ptr_put>
     33e:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <ptr_put+0x1>
     342:	19 95       	eicall
     344:	99 23       	and	r25, r25
     346:	1c f0       	brlt	.+6      	; 0x34e <_write+0x1e>
		return -1;
	}
	return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     352:	08 95       	ret

00000354 <__vector_68>:
		cpu_irq_restore(iflags);
		return;
	}

	cpu_irq_restore(iflags);
}
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	08 b6       	in	r0, 0x38	; 56
     360:	0f 92       	push	r0
     362:	18 be       	out	0x38, r1	; 56
     364:	09 b6       	in	r0, 0x39	; 57
     366:	0f 92       	push	r0
     368:	19 be       	out	0x39, r1	; 57
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	1b be       	out	0x3b, r1	; 59
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
     388:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <ac_aca_callback>
     38c:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <ac_aca_callback+0x1>
     390:	30 97       	sbiw	r30, 0x00	; 0
     392:	79 f0       	breq	.+30     	; 0x3b2 <__vector_68+0x5e>
     394:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <__vector_68+0x54>
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	19 95       	eicall
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__vector_68+0x5e>
     3a8:	40 e8       	ldi	r20, 0x80	; 128
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	19 95       	eicall
     3b2:	ff 91       	pop	r31
     3b4:	ef 91       	pop	r30
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	7f 91       	pop	r23
     3c0:	6f 91       	pop	r22
     3c2:	5f 91       	pop	r21
     3c4:	4f 91       	pop	r20
     3c6:	3f 91       	pop	r19
     3c8:	2f 91       	pop	r18
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	09 be       	out	0x39, r0	; 57
     3d2:	0f 90       	pop	r0
     3d4:	08 be       	out	0x38, r0	; 56
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_69>:
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	08 b6       	in	r0, 0x38	; 56
     3ec:	0f 92       	push	r0
     3ee:	18 be       	out	0x38, r1	; 56
     3f0:	09 b6       	in	r0, 0x39	; 57
     3f2:	0f 92       	push	r0
     3f4:	19 be       	out	0x39, r1	; 57
     3f6:	0b b6       	in	r0, 0x3b	; 59
     3f8:	0f 92       	push	r0
     3fa:	1b be       	out	0x3b, r1	; 59
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
     414:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <ac_aca_callback>
     418:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <ac_aca_callback+0x1>
     41c:	30 97       	sbiw	r30, 0x00	; 0
     41e:	79 f0       	breq	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     420:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     424:	85 ff       	sbrs	r24, 5
     426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 e8       	ldi	r24, 0x80	; 128
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	19 95       	eicall
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e8       	ldi	r24, 0x80	; 128
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	19 95       	eicall
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	09 be       	out	0x39, r0	; 57
     45e:	0f 90       	pop	r0
     460:	08 be       	out	0x38, r0	; 56
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_70>:
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	08 b6       	in	r0, 0x38	; 56
     478:	0f 92       	push	r0
     47a:	18 be       	out	0x38, r1	; 56
     47c:	09 b6       	in	r0, 0x39	; 57
     47e:	0f 92       	push	r0
     480:	19 be       	out	0x39, r1	; 57
     482:	0b b6       	in	r0, 0x3b	; 59
     484:	0f 92       	push	r0
     486:	1b be       	out	0x3b, r1	; 59
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
     4a0:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <ac_aca_callback>
     4a4:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <ac_aca_callback+0x1>
     4a8:	30 97       	sbiw	r30, 0x00	; 0
     4aa:	39 f0       	breq	.+14     	; 0x4ba <__vector_70+0x4e>
     4ac:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     4b0:	40 7c       	andi	r20, 0xC0	; 192
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	80 e8       	ldi	r24, 0x80	; 128
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	19 95       	eicall
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0b be       	out	0x3b, r0	; 59
     4d6:	0f 90       	pop	r0
     4d8:	09 be       	out	0x39, r0	; 57
     4da:	0f 90       	pop	r0
     4dc:	08 be       	out	0x38, r0	; 56
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <ac_write_config>:
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	2f b7       	in	r18, 0x3f	; 63
     500:	29 83       	std	Y+1, r18	; 0x01
     502:	f8 94       	cli
     504:	c9 80       	ldd	r12, Y+1	; 0x01
     506:	80 38       	cpi	r24, 0x80	; 128
     508:	23 e0       	ldi	r18, 0x03	; 3
     50a:	92 07       	cpc	r25, r18
     50c:	d9 f4       	brne	.+54     	; 0x544 <ac_write_config+0x5c>
     50e:	7a 01       	movw	r14, r20
     510:	d6 2e       	mov	r13, r22
     512:	8c 01       	movw	r16, r24
     514:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     518:	81 11       	cpse	r24, r1
     51a:	04 c0       	rjmp	.+8      	; 0x524 <ac_write_config+0x3c>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
     524:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
     52e:	f7 01       	movw	r30, r14
     530:	82 81       	ldd	r24, Z+2	; 0x02
     532:	f8 01       	movw	r30, r16
     534:	85 83       	std	Z+5, r24	; 0x05
     536:	f7 01       	movw	r30, r14
     538:	83 81       	ldd	r24, Z+3	; 0x03
     53a:	f8 01       	movw	r30, r16
     53c:	86 83       	std	Z+6, r24	; 0x06
     53e:	dd 20       	and	r13, r13
     540:	19 f0       	breq	.+6      	; 0x548 <ac_write_config+0x60>
     542:	0b c0       	rjmp	.+22     	; 0x55a <ac_write_config+0x72>
     544:	cf be       	out	0x3f, r12	; 63
     546:	1d c0       	rjmp	.+58     	; 0x582 <ac_write_config+0x9a>
     548:	f7 01       	movw	r30, r14
     54a:	81 81       	ldd	r24, Z+1	; 0x01
     54c:	f8 01       	movw	r30, r16
     54e:	82 83       	std	Z+2, r24	; 0x02
     550:	f7 01       	movw	r30, r14
     552:	80 81       	ld	r24, Z
     554:	f8 01       	movw	r30, r16
     556:	80 83       	st	Z, r24
     558:	08 c0       	rjmp	.+16     	; 0x56a <ac_write_config+0x82>
     55a:	f7 01       	movw	r30, r14
     55c:	81 81       	ldd	r24, Z+1	; 0x01
     55e:	f8 01       	movw	r30, r16
     560:	83 83       	std	Z+3, r24	; 0x03
     562:	f7 01       	movw	r30, r14
     564:	80 81       	ld	r24, Z
     566:	f8 01       	movw	r30, r16
     568:	81 83       	std	Z+1, r24	; 0x01
     56a:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     56e:	81 50       	subi	r24, 0x01	; 1
     570:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
     574:	81 11       	cpse	r24, r1
     576:	04 c0       	rjmp	.+8      	; 0x580 <ac_write_config+0x98>
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <sysclk_disable_module>
     580:	cf be       	out	0x3f, r12	; 63
     582:	0f 90       	pop	r0
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	08 95       	ret

00000596 <ac_enable>:
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	1f 92       	push	r1
     5a4:	1f 92       	push	r1
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	2f b7       	in	r18, 0x3f	; 63
     5ac:	2a 83       	std	Y+2, r18	; 0x02
     5ae:	f8 94       	cli
     5b0:	ea 80       	ldd	r14, Y+2	; 0x02
     5b2:	80 38       	cpi	r24, 0x80	; 128
     5b4:	23 e0       	ldi	r18, 0x03	; 3
     5b6:	92 07       	cpc	r25, r18
     5b8:	09 f5       	brne	.+66     	; 0x5fc <ac_enable+0x66>
     5ba:	f6 2e       	mov	r15, r22
     5bc:	8c 01       	movw	r16, r24
     5be:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     5c2:	81 11       	cpse	r24, r1
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <ac_enable+0x38>
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
     5ce:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
     5d8:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <sleepmgr_locks+0x1>
     5dc:	8f 3f       	cpi	r24, 0xFF	; 255
     5de:	09 f4       	brne	.+2      	; 0x5e2 <ac_enable+0x4c>
     5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <ac_enable+0x4a>
     5e2:	8f b7       	in	r24, 0x3f	; 63
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	f8 94       	cli
     5e8:	99 81       	ldd	r25, Y+1	; 0x01
     5ea:	e1 e5       	ldi	r30, 0x51	; 81
     5ec:	f1 e2       	ldi	r31, 0x21	; 33
     5ee:	81 81       	ldd	r24, Z+1	; 0x01
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	81 83       	std	Z+1, r24	; 0x01
     5f4:	9f bf       	out	0x3f, r25	; 63
     5f6:	ff 20       	and	r15, r15
     5f8:	19 f0       	breq	.+6      	; 0x600 <ac_enable+0x6a>
     5fa:	07 c0       	rjmp	.+14     	; 0x60a <ac_enable+0x74>
     5fc:	ef be       	out	0x3f, r14	; 63
     5fe:	0a c0       	rjmp	.+20     	; 0x614 <ac_enable+0x7e>
     600:	f8 01       	movw	r30, r16
     602:	80 81       	ld	r24, Z
     604:	81 60       	ori	r24, 0x01	; 1
     606:	80 83       	st	Z, r24
     608:	04 c0       	rjmp	.+8      	; 0x612 <ac_enable+0x7c>
     60a:	f8 01       	movw	r30, r16
     60c:	81 81       	ldd	r24, Z+1	; 0x01
     60e:	81 60       	ori	r24, 0x01	; 1
     610:	81 83       	std	Z+1, r24	; 0x01
     612:	ef be       	out	0x3f, r14	; 63
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	08 95       	ret

00000626 <ac_set_interrupt_callback>:
 * \param callback Reference to a callback function
 */
void ac_set_interrupt_callback(AC_t *ac, ac_callback_t callback)
{
#ifdef ACA
	if (ac == &ACA) {
     626:	80 38       	cpi	r24, 0x80	; 128
     628:	93 40       	sbci	r25, 0x03	; 3
     62a:	21 f4       	brne	.+8      	; 0x634 <ac_set_interrupt_callback+0xe>
		ac_aca_callback = callback;
     62c:	60 93 b3 20 	sts	0x20B3, r22	; 0x8020b3 <ac_aca_callback>
     630:	70 93 b4 20 	sts	0x20B4, r23	; 0x8020b4 <ac_aca_callback+0x1>
     634:	08 95       	ret

00000636 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	08 b6       	in	r0, 0x38	; 56
     642:	0f 92       	push	r0
     644:	18 be       	out	0x38, r1	; 56
     646:	09 b6       	in	r0, 0x39	; 57
     648:	0f 92       	push	r0
     64a:	19 be       	out	0x39, r1	; 57
     64c:	0b b6       	in	r0, 0x3b	; 59
     64e:	0f 92       	push	r0
     650:	1b be       	out	0x3b, r1	; 59
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     66a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     66e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     672:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <adca_callback>
     676:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <adca_callback+0x1>
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	19 95       	eicall
}
     682:	ff 91       	pop	r31
     684:	ef 91       	pop	r30
     686:	bf 91       	pop	r27
     688:	af 91       	pop	r26
     68a:	9f 91       	pop	r25
     68c:	8f 91       	pop	r24
     68e:	7f 91       	pop	r23
     690:	6f 91       	pop	r22
     692:	5f 91       	pop	r21
     694:	4f 91       	pop	r20
     696:	3f 91       	pop	r19
     698:	2f 91       	pop	r18
     69a:	0f 90       	pop	r0
     69c:	0b be       	out	0x3b, r0	; 59
     69e:	0f 90       	pop	r0
     6a0:	09 be       	out	0x39, r0	; 57
     6a2:	0f 90       	pop	r0
     6a4:	08 be       	out	0x38, r0	; 56
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	08 b6       	in	r0, 0x38	; 56
     6bc:	0f 92       	push	r0
     6be:	18 be       	out	0x38, r1	; 56
     6c0:	09 b6       	in	r0, 0x39	; 57
     6c2:	0f 92       	push	r0
     6c4:	19 be       	out	0x39, r1	; 57
     6c6:	0b b6       	in	r0, 0x3b	; 59
     6c8:	0f 92       	push	r0
     6ca:	1b be       	out	0x3b, r1	; 59
     6cc:	2f 93       	push	r18
     6ce:	3f 93       	push	r19
     6d0:	4f 93       	push	r20
     6d2:	5f 93       	push	r21
     6d4:	6f 93       	push	r22
     6d6:	7f 93       	push	r23
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     6e4:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     6e8:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     6ec:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <adca_callback>
     6f0:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <adca_callback+0x1>
     6f4:	62 e0       	ldi	r22, 0x02	; 2
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	19 95       	eicall
}
     6fc:	ff 91       	pop	r31
     6fe:	ef 91       	pop	r30
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	09 be       	out	0x39, r0	; 57
     71c:	0f 90       	pop	r0
     71e:	08 be       	out	0x38, r0	; 56
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	08 b6       	in	r0, 0x38	; 56
     736:	0f 92       	push	r0
     738:	18 be       	out	0x38, r1	; 56
     73a:	09 b6       	in	r0, 0x39	; 57
     73c:	0f 92       	push	r0
     73e:	19 be       	out	0x39, r1	; 57
     740:	0b b6       	in	r0, 0x3b	; 59
     742:	0f 92       	push	r0
     744:	1b be       	out	0x3b, r1	; 59
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     75e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     762:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     766:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <adca_callback>
     76a:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <adca_callback+0x1>
     76e:	64 e0       	ldi	r22, 0x04	; 4
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	19 95       	eicall
}
     776:	ff 91       	pop	r31
     778:	ef 91       	pop	r30
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	7f 91       	pop	r23
     784:	6f 91       	pop	r22
     786:	5f 91       	pop	r21
     788:	4f 91       	pop	r20
     78a:	3f 91       	pop	r19
     78c:	2f 91       	pop	r18
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	09 be       	out	0x39, r0	; 57
     796:	0f 90       	pop	r0
     798:	08 be       	out	0x38, r0	; 56
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	08 b6       	in	r0, 0x38	; 56
     7b0:	0f 92       	push	r0
     7b2:	18 be       	out	0x38, r1	; 56
     7b4:	09 b6       	in	r0, 0x39	; 57
     7b6:	0f 92       	push	r0
     7b8:	19 be       	out	0x39, r1	; 57
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	1b be       	out	0x3b, r1	; 59
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     7d8:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     7dc:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     7e0:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <adca_callback>
     7e4:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <adca_callback+0x1>
     7e8:	68 e0       	ldi	r22, 0x08	; 8
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	19 95       	eicall
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0b be       	out	0x3b, r0	; 59
     80c:	0f 90       	pop	r0
     80e:	09 be       	out	0x39, r0	; 57
     810:	0f 90       	pop	r0
     812:	08 be       	out	0x38, r0	; 56
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	08 b6       	in	r0, 0x38	; 56
     82a:	0f 92       	push	r0
     82c:	18 be       	out	0x38, r1	; 56
     82e:	09 b6       	in	r0, 0x39	; 57
     830:	0f 92       	push	r0
     832:	19 be       	out	0x39, r1	; 57
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	1b be       	out	0x3b, r1	; 59
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     852:	e0 91 e5 20 	lds	r30, 0x20E5	; 0x8020e5 <tc_tcc0_ovf_callback>
     856:	f0 91 e6 20 	lds	r31, 0x20E6	; 0x8020e6 <tc_tcc0_ovf_callback+0x1>
     85a:	30 97       	sbiw	r30, 0x00	; 0
     85c:	09 f0       	breq	.+2      	; 0x860 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     85e:	19 95       	eicall
	}
}
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0b be       	out	0x3b, r0	; 59
     87c:	0f 90       	pop	r0
     87e:	09 be       	out	0x39, r0	; 57
     880:	0f 90       	pop	r0
     882:	08 be       	out	0x38, r0	; 56
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	08 b6       	in	r0, 0x38	; 56
     89a:	0f 92       	push	r0
     89c:	18 be       	out	0x38, r1	; 56
     89e:	09 b6       	in	r0, 0x39	; 57
     8a0:	0f 92       	push	r0
     8a2:	19 be       	out	0x39, r1	; 57
     8a4:	0b b6       	in	r0, 0x3b	; 59
     8a6:	0f 92       	push	r0
     8a8:	1b be       	out	0x3b, r1	; 59
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     8c2:	e0 91 e3 20 	lds	r30, 0x20E3	; 0x8020e3 <tc_tcc0_err_callback>
     8c6:	f0 91 e4 20 	lds	r31, 0x20E4	; 0x8020e4 <tc_tcc0_err_callback+0x1>
     8ca:	30 97       	sbiw	r30, 0x00	; 0
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <__vector_15+0x42>
		tc_tcc0_err_callback();
     8ce:	19 95       	eicall
	}
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	bf 91       	pop	r27
     8d6:	af 91       	pop	r26
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	7f 91       	pop	r23
     8de:	6f 91       	pop	r22
     8e0:	5f 91       	pop	r21
     8e2:	4f 91       	pop	r20
     8e4:	3f 91       	pop	r19
     8e6:	2f 91       	pop	r18
     8e8:	0f 90       	pop	r0
     8ea:	0b be       	out	0x3b, r0	; 59
     8ec:	0f 90       	pop	r0
     8ee:	09 be       	out	0x39, r0	; 57
     8f0:	0f 90       	pop	r0
     8f2:	08 be       	out	0x38, r0	; 56
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	08 b6       	in	r0, 0x38	; 56
     90a:	0f 92       	push	r0
     90c:	18 be       	out	0x38, r1	; 56
     90e:	09 b6       	in	r0, 0x39	; 57
     910:	0f 92       	push	r0
     912:	19 be       	out	0x39, r1	; 57
     914:	0b b6       	in	r0, 0x3b	; 59
     916:	0f 92       	push	r0
     918:	1b be       	out	0x3b, r1	; 59
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     932:	e0 91 e1 20 	lds	r30, 0x20E1	; 0x8020e1 <tc_tcc0_cca_callback>
     936:	f0 91 e2 20 	lds	r31, 0x20E2	; 0x8020e2 <tc_tcc0_cca_callback+0x1>
     93a:	30 97       	sbiw	r30, 0x00	; 0
     93c:	09 f0       	breq	.+2      	; 0x940 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     93e:	19 95       	eicall
	}
}
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0b be       	out	0x3b, r0	; 59
     95c:	0f 90       	pop	r0
     95e:	09 be       	out	0x39, r0	; 57
     960:	0f 90       	pop	r0
     962:	08 be       	out	0x38, r0	; 56
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     96e:	1f 92       	push	r1
     970:	0f 92       	push	r0
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	0f 92       	push	r0
     976:	11 24       	eor	r1, r1
     978:	08 b6       	in	r0, 0x38	; 56
     97a:	0f 92       	push	r0
     97c:	18 be       	out	0x38, r1	; 56
     97e:	09 b6       	in	r0, 0x39	; 57
     980:	0f 92       	push	r0
     982:	19 be       	out	0x39, r1	; 57
     984:	0b b6       	in	r0, 0x3b	; 59
     986:	0f 92       	push	r0
     988:	1b be       	out	0x3b, r1	; 59
     98a:	2f 93       	push	r18
     98c:	3f 93       	push	r19
     98e:	4f 93       	push	r20
     990:	5f 93       	push	r21
     992:	6f 93       	push	r22
     994:	7f 93       	push	r23
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	ef 93       	push	r30
     9a0:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     9a2:	e0 91 df 20 	lds	r30, 0x20DF	; 0x8020df <tc_tcc0_ccb_callback>
     9a6:	f0 91 e0 20 	lds	r31, 0x20E0	; 0x8020e0 <tc_tcc0_ccb_callback+0x1>
     9aa:	30 97       	sbiw	r30, 0x00	; 0
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     9ae:	19 95       	eicall
	}
}
     9b0:	ff 91       	pop	r31
     9b2:	ef 91       	pop	r30
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	0f 90       	pop	r0
     9ca:	0b be       	out	0x3b, r0	; 59
     9cc:	0f 90       	pop	r0
     9ce:	09 be       	out	0x39, r0	; 57
     9d0:	0f 90       	pop	r0
     9d2:	08 be       	out	0x38, r0	; 56
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	08 b6       	in	r0, 0x38	; 56
     9ea:	0f 92       	push	r0
     9ec:	18 be       	out	0x38, r1	; 56
     9ee:	09 b6       	in	r0, 0x39	; 57
     9f0:	0f 92       	push	r0
     9f2:	19 be       	out	0x39, r1	; 57
     9f4:	0b b6       	in	r0, 0x3b	; 59
     9f6:	0f 92       	push	r0
     9f8:	1b be       	out	0x3b, r1	; 59
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     a12:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <tc_tcc0_ccc_callback>
     a16:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <tc_tcc0_ccc_callback+0x1>
     a1a:	30 97       	sbiw	r30, 0x00	; 0
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     a1e:	19 95       	eicall
	}
}
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0b be       	out	0x3b, r0	; 59
     a3c:	0f 90       	pop	r0
     a3e:	09 be       	out	0x39, r0	; 57
     a40:	0f 90       	pop	r0
     a42:	08 be       	out	0x38, r0	; 56
     a44:	0f 90       	pop	r0
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	08 b6       	in	r0, 0x38	; 56
     a5a:	0f 92       	push	r0
     a5c:	18 be       	out	0x38, r1	; 56
     a5e:	09 b6       	in	r0, 0x39	; 57
     a60:	0f 92       	push	r0
     a62:	19 be       	out	0x39, r1	; 57
     a64:	0b b6       	in	r0, 0x3b	; 59
     a66:	0f 92       	push	r0
     a68:	1b be       	out	0x3b, r1	; 59
     a6a:	2f 93       	push	r18
     a6c:	3f 93       	push	r19
     a6e:	4f 93       	push	r20
     a70:	5f 93       	push	r21
     a72:	6f 93       	push	r22
     a74:	7f 93       	push	r23
     a76:	8f 93       	push	r24
     a78:	9f 93       	push	r25
     a7a:	af 93       	push	r26
     a7c:	bf 93       	push	r27
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     a82:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <tc_tcc0_ccd_callback>
     a86:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <tc_tcc0_ccd_callback+0x1>
     a8a:	30 97       	sbiw	r30, 0x00	; 0
     a8c:	09 f0       	breq	.+2      	; 0xa90 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     a8e:	19 95       	eicall
	}
}
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	bf 91       	pop	r27
     a96:	af 91       	pop	r26
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	7f 91       	pop	r23
     a9e:	6f 91       	pop	r22
     aa0:	5f 91       	pop	r21
     aa2:	4f 91       	pop	r20
     aa4:	3f 91       	pop	r19
     aa6:	2f 91       	pop	r18
     aa8:	0f 90       	pop	r0
     aaa:	0b be       	out	0x3b, r0	; 59
     aac:	0f 90       	pop	r0
     aae:	09 be       	out	0x39, r0	; 57
     ab0:	0f 90       	pop	r0
     ab2:	08 be       	out	0x38, r0	; 56
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	08 b6       	in	r0, 0x38	; 56
     aca:	0f 92       	push	r0
     acc:	18 be       	out	0x38, r1	; 56
     ace:	09 b6       	in	r0, 0x39	; 57
     ad0:	0f 92       	push	r0
     ad2:	19 be       	out	0x39, r1	; 57
     ad4:	0b b6       	in	r0, 0x3b	; 59
     ad6:	0f 92       	push	r0
     ad8:	1b be       	out	0x3b, r1	; 59
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     af2:	e0 91 d9 20 	lds	r30, 0x20D9	; 0x8020d9 <tc_tcc1_ovf_callback>
     af6:	f0 91 da 20 	lds	r31, 0x20DA	; 0x8020da <tc_tcc1_ovf_callback+0x1>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     afe:	19 95       	eicall
	}
}
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	bf 91       	pop	r27
     b06:	af 91       	pop	r26
     b08:	9f 91       	pop	r25
     b0a:	8f 91       	pop	r24
     b0c:	7f 91       	pop	r23
     b0e:	6f 91       	pop	r22
     b10:	5f 91       	pop	r21
     b12:	4f 91       	pop	r20
     b14:	3f 91       	pop	r19
     b16:	2f 91       	pop	r18
     b18:	0f 90       	pop	r0
     b1a:	0b be       	out	0x3b, r0	; 59
     b1c:	0f 90       	pop	r0
     b1e:	09 be       	out	0x39, r0	; 57
     b20:	0f 90       	pop	r0
     b22:	08 be       	out	0x38, r0	; 56
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	08 b6       	in	r0, 0x38	; 56
     b3a:	0f 92       	push	r0
     b3c:	18 be       	out	0x38, r1	; 56
     b3e:	09 b6       	in	r0, 0x39	; 57
     b40:	0f 92       	push	r0
     b42:	19 be       	out	0x39, r1	; 57
     b44:	0b b6       	in	r0, 0x3b	; 59
     b46:	0f 92       	push	r0
     b48:	1b be       	out	0x3b, r1	; 59
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     b62:	e0 91 d7 20 	lds	r30, 0x20D7	; 0x8020d7 <tc_tcc1_err_callback>
     b66:	f0 91 d8 20 	lds	r31, 0x20D8	; 0x8020d8 <tc_tcc1_err_callback+0x1>
     b6a:	30 97       	sbiw	r30, 0x00	; 0
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__vector_21+0x42>
		tc_tcc1_err_callback();
     b6e:	19 95       	eicall
	}
}
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	0f 90       	pop	r0
     b8a:	0b be       	out	0x3b, r0	; 59
     b8c:	0f 90       	pop	r0
     b8e:	09 be       	out	0x39, r0	; 57
     b90:	0f 90       	pop	r0
     b92:	08 be       	out	0x38, r0	; 56
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	08 b6       	in	r0, 0x38	; 56
     baa:	0f 92       	push	r0
     bac:	18 be       	out	0x38, r1	; 56
     bae:	09 b6       	in	r0, 0x39	; 57
     bb0:	0f 92       	push	r0
     bb2:	19 be       	out	0x39, r1	; 57
     bb4:	0b b6       	in	r0, 0x3b	; 59
     bb6:	0f 92       	push	r0
     bb8:	1b be       	out	0x3b, r1	; 59
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     bd2:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <tc_tcc1_cca_callback>
     bd6:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <tc_tcc1_cca_callback+0x1>
     bda:	30 97       	sbiw	r30, 0x00	; 0
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     bde:	19 95       	eicall
	}
}
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0b be       	out	0x3b, r0	; 59
     bfc:	0f 90       	pop	r0
     bfe:	09 be       	out	0x39, r0	; 57
     c00:	0f 90       	pop	r0
     c02:	08 be       	out	0x38, r0	; 56
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	08 b6       	in	r0, 0x38	; 56
     c1a:	0f 92       	push	r0
     c1c:	18 be       	out	0x38, r1	; 56
     c1e:	09 b6       	in	r0, 0x39	; 57
     c20:	0f 92       	push	r0
     c22:	19 be       	out	0x39, r1	; 57
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	1b be       	out	0x3b, r1	; 59
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     c42:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <tc_tcc1_ccb_callback>
     c46:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <tc_tcc1_ccb_callback+0x1>
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     c4e:	19 95       	eicall
	}
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	09 be       	out	0x39, r0	; 57
     c70:	0f 90       	pop	r0
     c72:	08 be       	out	0x38, r0	; 56
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	08 b6       	in	r0, 0x38	; 56
     c8a:	0f 92       	push	r0
     c8c:	18 be       	out	0x38, r1	; 56
     c8e:	09 b6       	in	r0, 0x39	; 57
     c90:	0f 92       	push	r0
     c92:	19 be       	out	0x39, r1	; 57
     c94:	0b b6       	in	r0, 0x3b	; 59
     c96:	0f 92       	push	r0
     c98:	1b be       	out	0x3b, r1	; 59
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     cb2:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <tc_tcd0_ovf_callback>
     cb6:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <tc_tcd0_ovf_callback+0x1>
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     cbe:	19 95       	eicall
	}
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	09 be       	out	0x39, r0	; 57
     ce0:	0f 90       	pop	r0
     ce2:	08 be       	out	0x38, r0	; 56
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	08 b6       	in	r0, 0x38	; 56
     cfa:	0f 92       	push	r0
     cfc:	18 be       	out	0x38, r1	; 56
     cfe:	09 b6       	in	r0, 0x39	; 57
     d00:	0f 92       	push	r0
     d02:	19 be       	out	0x39, r1	; 57
     d04:	0b b6       	in	r0, 0x3b	; 59
     d06:	0f 92       	push	r0
     d08:	1b be       	out	0x3b, r1	; 59
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     d22:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <tc_tcd0_err_callback>
     d26:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <tc_tcd0_err_callback+0x1>
     d2a:	30 97       	sbiw	r30, 0x00	; 0
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_78+0x42>
		tc_tcd0_err_callback();
     d2e:	19 95       	eicall
	}
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	09 be       	out	0x39, r0	; 57
     d50:	0f 90       	pop	r0
     d52:	08 be       	out	0x38, r0	; 56
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	08 b6       	in	r0, 0x38	; 56
     d6a:	0f 92       	push	r0
     d6c:	18 be       	out	0x38, r1	; 56
     d6e:	09 b6       	in	r0, 0x39	; 57
     d70:	0f 92       	push	r0
     d72:	19 be       	out	0x39, r1	; 57
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	1b be       	out	0x3b, r1	; 59
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     d92:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <tc_tcd0_cca_callback>
     d96:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <tc_tcd0_cca_callback+0x1>
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     d9e:	19 95       	eicall
	}
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	09 be       	out	0x39, r0	; 57
     dc0:	0f 90       	pop	r0
     dc2:	08 be       	out	0x38, r0	; 56
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	08 b6       	in	r0, 0x38	; 56
     dda:	0f 92       	push	r0
     ddc:	18 be       	out	0x38, r1	; 56
     dde:	09 b6       	in	r0, 0x39	; 57
     de0:	0f 92       	push	r0
     de2:	19 be       	out	0x39, r1	; 57
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	1b be       	out	0x3b, r1	; 59
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e02:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <tc_tcd0_ccb_callback>
     e06:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <tc_tcd0_ccb_callback+0x1>
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     e0e:	19 95       	eicall
	}
}
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	09 be       	out	0x39, r0	; 57
     e30:	0f 90       	pop	r0
     e32:	08 be       	out	0x38, r0	; 56
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	08 b6       	in	r0, 0x38	; 56
     e4a:	0f 92       	push	r0
     e4c:	18 be       	out	0x38, r1	; 56
     e4e:	09 b6       	in	r0, 0x39	; 57
     e50:	0f 92       	push	r0
     e52:	19 be       	out	0x39, r1	; 57
     e54:	0b b6       	in	r0, 0x3b	; 59
     e56:	0f 92       	push	r0
     e58:	1b be       	out	0x3b, r1	; 59
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     e72:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <tc_tcd0_ccc_callback>
     e76:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <tc_tcd0_ccc_callback+0x1>
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     e7e:	19 95       	eicall
	}
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	09 be       	out	0x39, r0	; 57
     ea0:	0f 90       	pop	r0
     ea2:	08 be       	out	0x38, r0	; 56
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	08 b6       	in	r0, 0x38	; 56
     eba:	0f 92       	push	r0
     ebc:	18 be       	out	0x38, r1	; 56
     ebe:	09 b6       	in	r0, 0x39	; 57
     ec0:	0f 92       	push	r0
     ec2:	19 be       	out	0x39, r1	; 57
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	1b be       	out	0x3b, r1	; 59
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     ee2:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <tc_tcd0_ccd_callback>
     ee6:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <tc_tcd0_ccd_callback+0x1>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     eee:	19 95       	eicall
	}
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	09 be       	out	0x39, r0	; 57
     f10:	0f 90       	pop	r0
     f12:	08 be       	out	0x38, r0	; 56
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	08 b6       	in	r0, 0x38	; 56
     f2a:	0f 92       	push	r0
     f2c:	18 be       	out	0x38, r1	; 56
     f2e:	09 b6       	in	r0, 0x39	; 57
     f30:	0f 92       	push	r0
     f32:	19 be       	out	0x39, r1	; 57
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	1b be       	out	0x3b, r1	; 59
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     f52:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <tc_tcd1_ovf_callback>
     f56:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <tc_tcd1_ovf_callback+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     f5e:	19 95       	eicall
	}
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	09 be       	out	0x39, r0	; 57
     f80:	0f 90       	pop	r0
     f82:	08 be       	out	0x38, r0	; 56
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	08 b6       	in	r0, 0x38	; 56
     f9a:	0f 92       	push	r0
     f9c:	18 be       	out	0x38, r1	; 56
     f9e:	09 b6       	in	r0, 0x39	; 57
     fa0:	0f 92       	push	r0
     fa2:	19 be       	out	0x39, r1	; 57
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	1b be       	out	0x3b, r1	; 59
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     fc2:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <tc_tcd1_err_callback>
     fc6:	f0 91 c4 20 	lds	r31, 0x20C4	; 0x8020c4 <tc_tcd1_err_callback+0x1>
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__vector_84+0x42>
		tc_tcd1_err_callback();
     fce:	19 95       	eicall
	}
}
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	09 be       	out	0x39, r0	; 57
     ff0:	0f 90       	pop	r0
     ff2:	08 be       	out	0x38, r0	; 56
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	08 b6       	in	r0, 0x38	; 56
    100a:	0f 92       	push	r0
    100c:	18 be       	out	0x38, r1	; 56
    100e:	09 b6       	in	r0, 0x39	; 57
    1010:	0f 92       	push	r0
    1012:	19 be       	out	0x39, r1	; 57
    1014:	0b b6       	in	r0, 0x3b	; 59
    1016:	0f 92       	push	r0
    1018:	1b be       	out	0x3b, r1	; 59
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1032:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <tc_tcd1_cca_callback>
    1036:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <tc_tcd1_cca_callback+0x1>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    103e:	19 95       	eicall
	}
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0b be       	out	0x3b, r0	; 59
    105c:	0f 90       	pop	r0
    105e:	09 be       	out	0x39, r0	; 57
    1060:	0f 90       	pop	r0
    1062:	08 be       	out	0x38, r0	; 56
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	08 b6       	in	r0, 0x38	; 56
    107a:	0f 92       	push	r0
    107c:	18 be       	out	0x38, r1	; 56
    107e:	09 b6       	in	r0, 0x39	; 57
    1080:	0f 92       	push	r0
    1082:	19 be       	out	0x39, r1	; 57
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	1b be       	out	0x3b, r1	; 59
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    10a2:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <tc_tcd1_ccb_callback>
    10a6:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <tc_tcd1_ccb_callback+0x1>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    10ae:	19 95       	eicall
	}
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	09 be       	out	0x39, r0	; 57
    10d0:	0f 90       	pop	r0
    10d2:	08 be       	out	0x38, r0	; 56
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	08 b6       	in	r0, 0x38	; 56
    10ea:	0f 92       	push	r0
    10ec:	18 be       	out	0x38, r1	; 56
    10ee:	09 b6       	in	r0, 0x39	; 57
    10f0:	0f 92       	push	r0
    10f2:	19 be       	out	0x39, r1	; 57
    10f4:	0b b6       	in	r0, 0x3b	; 59
    10f6:	0f 92       	push	r0
    10f8:	1b be       	out	0x3b, r1	; 59
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1112:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <tc_tce0_err_callback>
    1116:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <tc_tce0_err_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_48+0x42>
		tc_tce0_err_callback();
    111e:	19 95       	eicall
	}
}
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	09 be       	out	0x39, r0	; 57
    1140:	0f 90       	pop	r0
    1142:	08 be       	out	0x38, r0	; 56
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	08 b6       	in	r0, 0x38	; 56
    115a:	0f 92       	push	r0
    115c:	18 be       	out	0x38, r1	; 56
    115e:	09 b6       	in	r0, 0x39	; 57
    1160:	0f 92       	push	r0
    1162:	19 be       	out	0x39, r1	; 57
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	1b be       	out	0x3b, r1	; 59
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1182:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <tc_tce0_cca_callback>
    1186:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <tc_tce0_cca_callback+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_49+0x42>
		tc_tce0_cca_callback();
    118e:	19 95       	eicall
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    11f2:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <tc_tce0_ccb_callback>
    11f6:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <tc_tce0_ccb_callback+0x1>
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    11fe:	19 95       	eicall
	}
}
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0b be       	out	0x3b, r0	; 59
    121c:	0f 90       	pop	r0
    121e:	09 be       	out	0x39, r0	; 57
    1220:	0f 90       	pop	r0
    1222:	08 be       	out	0x38, r0	; 56
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	08 b6       	in	r0, 0x38	; 56
    123a:	0f 92       	push	r0
    123c:	18 be       	out	0x38, r1	; 56
    123e:	09 b6       	in	r0, 0x39	; 57
    1240:	0f 92       	push	r0
    1242:	19 be       	out	0x39, r1	; 57
    1244:	0b b6       	in	r0, 0x3b	; 59
    1246:	0f 92       	push	r0
    1248:	1b be       	out	0x3b, r1	; 59
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1262:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <tc_tce0_ccc_callback>
    1266:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <tc_tce0_ccc_callback+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    126e:	19 95       	eicall
	}
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	09 be       	out	0x39, r0	; 57
    1290:	0f 90       	pop	r0
    1292:	08 be       	out	0x38, r0	; 56
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	08 b6       	in	r0, 0x38	; 56
    12aa:	0f 92       	push	r0
    12ac:	18 be       	out	0x38, r1	; 56
    12ae:	09 b6       	in	r0, 0x39	; 57
    12b0:	0f 92       	push	r0
    12b2:	19 be       	out	0x39, r1	; 57
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	1b be       	out	0x3b, r1	; 59
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    12d2:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <tc_tce0_ccd_callback>
    12d6:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <tc_tce0_ccd_callback+0x1>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    12de:	19 95       	eicall
	}
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0b be       	out	0x3b, r0	; 59
    12fc:	0f 90       	pop	r0
    12fe:	09 be       	out	0x39, r0	; 57
    1300:	0f 90       	pop	r0
    1302:	08 be       	out	0x38, r0	; 56
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1312:	e0 91 e7 20 	lds	r30, 0x20E7	; 0x8020e7 <transfer>
    1316:	f0 91 e8 20 	lds	r31, 0x20E8	; 0x8020e8 <transfer+0x1>
    131a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    131c:	83 ff       	sbrs	r24, 3
    131e:	08 c0       	rjmp	.+16     	; 0x1330 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1320:	88 60       	ori	r24, 0x08	; 8
    1322:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1328:	86 ef       	ldi	r24, 0xF6	; 246
    132a:	80 93 f1 20 	sts	0x20F1, r24	; 0x8020f1 <transfer+0xa>
    132e:	83 c0       	rjmp	.+262    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1330:	98 2f       	mov	r25, r24
    1332:	94 71       	andi	r25, 0x14	; 20
    1334:	31 f0       	breq	.+12     	; 0x1342 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	80 93 f1 20 	sts	0x20F1, r24	; 0x8020f1 <transfer+0xa>
    1340:	7a c0       	rjmp	.+244    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1342:	86 ff       	sbrs	r24, 6
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1346:	c7 ee       	ldi	r28, 0xE7	; 231
    1348:	d0 e2       	ldi	r29, 0x20	; 32
    134a:	aa 81       	ldd	r26, Y+2	; 0x02
    134c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	14 96       	adiw	r26, 0x04	; 4
    1354:	2d 91       	ld	r18, X+
    1356:	3c 91       	ld	r19, X
    1358:	15 97       	sbiw	r26, 0x05	; 5
    135a:	82 17       	cp	r24, r18
    135c:	93 07       	cpc	r25, r19
    135e:	6c f4       	brge	.+26     	; 0x137a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1360:	9c 01       	movw	r18, r24
    1362:	2f 5f       	subi	r18, 0xFF	; 255
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	20 93 eb 20 	sts	0x20EB, r18	; 0x8020eb <transfer+0x4>
    136a:	30 93 ec 20 	sts	0x20EC, r19	; 0x8020ec <transfer+0x5>
    136e:	a8 0f       	add	r26, r24
    1370:	b9 1f       	adc	r27, r25
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	8c 91       	ld	r24, X
    1376:	87 83       	std	Z+7, r24	; 0x07
    1378:	5e c0       	rjmp	.+188    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    137a:	80 91 ed 20 	lds	r24, 0x20ED	; 0x8020ed <transfer+0x6>
    137e:	90 91 ee 20 	lds	r25, 0x20EE	; 0x8020ee <transfer+0x7>
    1382:	18 96       	adiw	r26, 0x08	; 8
    1384:	2d 91       	ld	r18, X+
    1386:	3c 91       	ld	r19, X
    1388:	19 97       	sbiw	r26, 0x09	; 9
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	c8 f4       	brcc	.+50     	; 0x13c2 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1390:	20 91 ef 20 	lds	r18, 0x20EF	; 0x8020ef <transfer+0x8>
    1394:	22 23       	and	r18, r18
    1396:	21 f0       	breq	.+8      	; 0x13a0 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1398:	86 81       	ldd	r24, Z+6	; 0x06
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	86 83       	std	Z+6, r24	; 0x06
    139e:	4b c0       	rjmp	.+150    	; 0x1436 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2d 91       	ld	r18, X+
    13a4:	3c 91       	ld	r19, X
    13a6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    13a8:	ac 01       	movw	r20, r24
    13aa:	4f 5f       	subi	r20, 0xFF	; 255
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	40 93 ed 20 	sts	0x20ED, r20	; 0x8020ed <transfer+0x6>
    13b2:	50 93 ee 20 	sts	0x20EE, r21	; 0x8020ee <transfer+0x7>
    13b6:	d9 01       	movw	r26, r18
    13b8:	a8 0f       	add	r26, r24
    13ba:	b9 1f       	adc	r27, r25
    13bc:	8c 91       	ld	r24, X
    13be:	87 83       	std	Z+7, r24	; 0x07
    13c0:	3a c0       	rjmp	.+116    	; 0x1436 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    13c6:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <transfer+0xa>
    13ca:	35 c0       	rjmp	.+106    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    13cc:	88 23       	and	r24, r24
    13ce:	84 f5       	brge	.+96     	; 0x1430 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    13d0:	a7 ee       	ldi	r26, 0xE7	; 231
    13d2:	b0 e2       	ldi	r27, 0x20	; 32
    13d4:	12 96       	adiw	r26, 0x02	; 2
    13d6:	cd 91       	ld	r28, X+
    13d8:	dc 91       	ld	r29, X
    13da:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    13dc:	16 96       	adiw	r26, 0x06	; 6
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	17 97       	sbiw	r26, 0x07	; 7
    13e4:	28 85       	ldd	r18, Y+8	; 0x08
    13e6:	39 85       	ldd	r19, Y+9	; 0x09
    13e8:	82 17       	cp	r24, r18
    13ea:	93 07       	cpc	r25, r19
    13ec:	d8 f4       	brcc	.+54     	; 0x1424 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    13ee:	6e 81       	ldd	r22, Y+6	; 0x06
    13f0:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    13f2:	9c 01       	movw	r18, r24
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	20 93 ed 20 	sts	0x20ED, r18	; 0x8020ed <transfer+0x6>
    13fc:	30 93 ee 20 	sts	0x20EE, r19	; 0x8020ee <transfer+0x7>
    1400:	47 81       	ldd	r20, Z+7	; 0x07
    1402:	db 01       	movw	r26, r22
    1404:	a8 0f       	add	r26, r24
    1406:	b9 1f       	adc	r27, r25
    1408:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    140a:	88 85       	ldd	r24, Y+8	; 0x08
    140c:	99 85       	ldd	r25, Y+9	; 0x09
    140e:	28 17       	cp	r18, r24
    1410:	39 07       	cpc	r19, r25
    1412:	18 f4       	brcc	.+6      	; 0x141a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	83 83       	std	Z+3, r24	; 0x03
    1418:	0e c0       	rjmp	.+28     	; 0x1436 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    141a:	87 e0       	ldi	r24, 0x07	; 7
    141c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    141e:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <transfer+0xa>
    1422:	09 c0       	rjmp	.+18     	; 0x1436 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1428:	89 ef       	ldi	r24, 0xF9	; 249
    142a:	80 93 f1 20 	sts	0x20F1, r24	; 0x8020f1 <transfer+0xa>
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1430:	8b ef       	ldi	r24, 0xFB	; 251
    1432:	80 93 f1 20 	sts	0x20F1, r24	; 0x8020f1 <transfer+0xa>
	}
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	08 b6       	in	r0, 0x38	; 56
    1448:	0f 92       	push	r0
    144a:	18 be       	out	0x38, r1	; 56
    144c:	09 b6       	in	r0, 0x39	; 57
    144e:	0f 92       	push	r0
    1450:	19 be       	out	0x39, r1	; 57
    1452:	0b b6       	in	r0, 0x3b	; 59
    1454:	0f 92       	push	r0
    1456:	1b be       	out	0x3b, r1	; 59
    1458:	2f 93       	push	r18
    145a:	3f 93       	push	r19
    145c:	4f 93       	push	r20
    145e:	5f 93       	push	r21
    1460:	6f 93       	push	r22
    1462:	7f 93       	push	r23
    1464:	8f 93       	push	r24
    1466:	9f 93       	push	r25
    1468:	af 93       	push	r26
    146a:	bf 93       	push	r27
    146c:	ef 93       	push	r30
    146e:	ff 93       	push	r31
    1470:	4e df       	rcall	.-356    	; 0x130e <twim_interrupt_handler>
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0b be       	out	0x3b, r0	; 59
    148e:	0f 90       	pop	r0
    1490:	09 be       	out	0x39, r0	; 57
    1492:	0f 90       	pop	r0
    1494:	08 be       	out	0x38, r0	; 56
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	08 b6       	in	r0, 0x38	; 56
    14ac:	0f 92       	push	r0
    14ae:	18 be       	out	0x38, r1	; 56
    14b0:	09 b6       	in	r0, 0x39	; 57
    14b2:	0f 92       	push	r0
    14b4:	19 be       	out	0x39, r1	; 57
    14b6:	0b b6       	in	r0, 0x3b	; 59
    14b8:	0f 92       	push	r0
    14ba:	1b be       	out	0x3b, r1	; 59
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
    14d4:	1c df       	rcall	.-456    	; 0x130e <twim_interrupt_handler>
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0b be       	out	0x3b, r0	; 59
    14f2:	0f 90       	pop	r0
    14f4:	09 be       	out	0x39, r0	; 57
    14f6:	0f 90       	pop	r0
    14f8:	08 be       	out	0x38, r0	; 56
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1504:	fc 01       	movw	r30, r24
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	95 ff       	sbrs	r25, 5
    150a:	fd cf       	rjmp	.-6      	; 0x1506 <usart_putchar+0x2>
    150c:	60 83       	st	Z, r22
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	08 95       	ret

00001514 <usart_getchar>:
    1514:	fc 01       	movw	r30, r24
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	99 23       	and	r25, r25
    151a:	ec f7       	brge	.-6      	; 0x1516 <usart_getchar+0x2>
    151c:	80 81       	ld	r24, Z
    151e:	08 95       	ret

00001520 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1520:	4f 92       	push	r4
    1522:	5f 92       	push	r5
    1524:	6f 92       	push	r6
    1526:	7f 92       	push	r7
    1528:	8f 92       	push	r8
    152a:	9f 92       	push	r9
    152c:	af 92       	push	r10
    152e:	bf 92       	push	r11
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	7c 01       	movw	r14, r24
    153c:	4a 01       	movw	r8, r20
    153e:	5b 01       	movw	r10, r22
    1540:	28 01       	movw	r4, r16
    1542:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1544:	fc 01       	movw	r30, r24
    1546:	84 81       	ldd	r24, Z+4	; 0x04
    1548:	82 ff       	sbrs	r24, 2
    154a:	16 c0       	rjmp	.+44     	; 0x1578 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    154c:	d9 01       	movw	r26, r18
    154e:	c8 01       	movw	r24, r16
    1550:	68 94       	set
    1552:	12 f8       	bld	r1, 2
    1554:	b6 95       	lsr	r27
    1556:	a7 95       	ror	r26
    1558:	97 95       	ror	r25
    155a:	87 95       	ror	r24
    155c:	16 94       	lsr	r1
    155e:	d1 f7       	brne	.-12     	; 0x1554 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1560:	b9 01       	movw	r22, r18
    1562:	a8 01       	movw	r20, r16
    1564:	03 2e       	mov	r0, r19
    1566:	36 e1       	ldi	r19, 0x16	; 22
    1568:	76 95       	lsr	r23
    156a:	67 95       	ror	r22
    156c:	57 95       	ror	r21
    156e:	47 95       	ror	r20
    1570:	3a 95       	dec	r19
    1572:	d1 f7       	brne	.-12     	; 0x1568 <usart_set_baudrate+0x48>
    1574:	30 2d       	mov	r19, r0
    1576:	15 c0       	rjmp	.+42     	; 0x15a2 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1578:	d9 01       	movw	r26, r18
    157a:	c8 01       	movw	r24, r16
    157c:	68 94       	set
    157e:	13 f8       	bld	r1, 3
    1580:	b6 95       	lsr	r27
    1582:	a7 95       	ror	r26
    1584:	97 95       	ror	r25
    1586:	87 95       	ror	r24
    1588:	16 94       	lsr	r1
    158a:	d1 f7       	brne	.-12     	; 0x1580 <usart_set_baudrate+0x60>
		min_rate /= 2;
    158c:	b9 01       	movw	r22, r18
    158e:	a8 01       	movw	r20, r16
    1590:	03 2e       	mov	r0, r19
    1592:	37 e1       	ldi	r19, 0x17	; 23
    1594:	76 95       	lsr	r23
    1596:	67 95       	ror	r22
    1598:	57 95       	ror	r21
    159a:	47 95       	ror	r20
    159c:	3a 95       	dec	r19
    159e:	d1 f7       	brne	.-12     	; 0x1594 <usart_set_baudrate+0x74>
    15a0:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    15a2:	88 15       	cp	r24, r8
    15a4:	99 05       	cpc	r25, r9
    15a6:	aa 05       	cpc	r26, r10
    15a8:	bb 05       	cpc	r27, r11
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <usart_set_baudrate+0x8e>
    15ac:	a6 c0       	rjmp	.+332    	; 0x16fa <usart_set_baudrate+0x1da>
    15ae:	84 16       	cp	r8, r20
    15b0:	95 06       	cpc	r9, r21
    15b2:	a6 06       	cpc	r10, r22
    15b4:	b7 06       	cpc	r11, r23
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <usart_set_baudrate+0x9a>
    15b8:	a2 c0       	rjmp	.+324    	; 0x16fe <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    15ba:	f7 01       	movw	r30, r14
    15bc:	84 81       	ldd	r24, Z+4	; 0x04
    15be:	82 fd       	sbrc	r24, 2
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <usart_set_baudrate+0xaa>
		baud *= 2;
    15c2:	88 0c       	add	r8, r8
    15c4:	99 1c       	adc	r9, r9
    15c6:	aa 1c       	adc	r10, r10
    15c8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    15ca:	c3 01       	movw	r24, r6
    15cc:	b2 01       	movw	r22, r4
    15ce:	a5 01       	movw	r20, r10
    15d0:	94 01       	movw	r18, r8
    15d2:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    15d6:	2f 3f       	cpi	r18, 0xFF	; 255
    15d8:	31 05       	cpc	r19, r1
    15da:	41 05       	cpc	r20, r1
    15dc:	51 05       	cpc	r21, r1
    15de:	08 f4       	brcc	.+2      	; 0x15e2 <usart_set_baudrate+0xc2>
    15e0:	90 c0       	rjmp	.+288    	; 0x1702 <usart_set_baudrate+0x1e2>
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a0 e0       	ldi	r26, 0x00	; 0
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	c9 ef       	ldi	r28, 0xF9	; 249
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <usart_set_baudrate+0xd8>
    15ee:	28 17       	cp	r18, r24
    15f0:	39 07       	cpc	r19, r25
    15f2:	4a 07       	cpc	r20, r26
    15f4:	5b 07       	cpc	r21, r27
    15f6:	58 f0       	brcs	.+22     	; 0x160e <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	aa 1f       	adc	r26, r26
    15fe:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1600:	cd 3f       	cpi	r28, 0xFD	; 253
    1602:	0c f4       	brge	.+2      	; 0x1606 <usart_set_baudrate+0xe6>
			limit |= 1;
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1608:	c7 30       	cpi	r28, 0x07	; 7
    160a:	89 f7       	brne	.-30     	; 0x15ee <usart_set_baudrate+0xce>
    160c:	4f c0       	rjmp	.+158    	; 0x16ac <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    160e:	cc 23       	and	r28, r28
    1610:	0c f0       	brlt	.+2      	; 0x1614 <usart_set_baudrate+0xf4>
    1612:	4c c0       	rjmp	.+152    	; 0x16ac <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1614:	d5 01       	movw	r26, r10
    1616:	c4 01       	movw	r24, r8
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	aa 1f       	adc	r26, r26
    161e:	bb 1f       	adc	r27, r27
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	aa 1f       	adc	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	48 1a       	sub	r4, r24
    1632:	59 0a       	sbc	r5, r25
    1634:	6a 0a       	sbc	r6, r26
    1636:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1638:	ce 3f       	cpi	r28, 0xFE	; 254
    163a:	f4 f4       	brge	.+60     	; 0x1678 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    163c:	8d ef       	ldi	r24, 0xFD	; 253
    163e:	9f ef       	ldi	r25, 0xFF	; 255
    1640:	8c 1b       	sub	r24, r28
    1642:	91 09       	sbc	r25, r1
    1644:	c7 fd       	sbrc	r28, 7
    1646:	93 95       	inc	r25
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <usart_set_baudrate+0x132>
    164a:	44 0c       	add	r4, r4
    164c:	55 1c       	adc	r5, r5
    164e:	66 1c       	adc	r6, r6
    1650:	77 1c       	adc	r7, r7
    1652:	8a 95       	dec	r24
    1654:	d2 f7       	brpl	.-12     	; 0x164a <usart_set_baudrate+0x12a>
    1656:	d5 01       	movw	r26, r10
    1658:	c4 01       	movw	r24, r8
    165a:	b6 95       	lsr	r27
    165c:	a7 95       	ror	r26
    165e:	97 95       	ror	r25
    1660:	87 95       	ror	r24
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	64 0d       	add	r22, r4
    1668:	75 1d       	adc	r23, r5
    166a:	86 1d       	adc	r24, r6
    166c:	97 1d       	adc	r25, r7
    166e:	a5 01       	movw	r20, r10
    1670:	94 01       	movw	r18, r8
    1672:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__udivmodsi4>
    1676:	37 c0       	rjmp	.+110    	; 0x16e6 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	8c 0f       	add	r24, r28
    167c:	a5 01       	movw	r20, r10
    167e:	94 01       	movw	r18, r8
    1680:	04 c0       	rjmp	.+8      	; 0x168a <usart_set_baudrate+0x16a>
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	44 1f       	adc	r20, r20
    1688:	55 1f       	adc	r21, r21
    168a:	8a 95       	dec	r24
    168c:	d2 f7       	brpl	.-12     	; 0x1682 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    168e:	da 01       	movw	r26, r20
    1690:	c9 01       	movw	r24, r18
    1692:	b6 95       	lsr	r27
    1694:	a7 95       	ror	r26
    1696:	97 95       	ror	r25
    1698:	87 95       	ror	r24
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	64 0d       	add	r22, r4
    16a0:	75 1d       	adc	r23, r5
    16a2:	86 1d       	adc	r24, r6
    16a4:	97 1d       	adc	r25, r7
    16a6:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__udivmodsi4>
    16aa:	1d c0       	rjmp	.+58     	; 0x16e6 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	8c 0f       	add	r24, r28
    16b0:	a5 01       	movw	r20, r10
    16b2:	94 01       	movw	r18, r8
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <usart_set_baudrate+0x19e>
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	44 1f       	adc	r20, r20
    16bc:	55 1f       	adc	r21, r21
    16be:	8a 95       	dec	r24
    16c0:	d2 f7       	brpl	.-12     	; 0x16b6 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    16c2:	da 01       	movw	r26, r20
    16c4:	c9 01       	movw	r24, r18
    16c6:	b6 95       	lsr	r27
    16c8:	a7 95       	ror	r26
    16ca:	97 95       	ror	r25
    16cc:	87 95       	ror	r24
    16ce:	bc 01       	movw	r22, r24
    16d0:	cd 01       	movw	r24, r26
    16d2:	64 0d       	add	r22, r4
    16d4:	75 1d       	adc	r23, r5
    16d6:	86 1d       	adc	r24, r6
    16d8:	97 1d       	adc	r25, r7
    16da:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__udivmodsi4>
    16de:	21 50       	subi	r18, 0x01	; 1
    16e0:	31 09       	sbc	r19, r1
    16e2:	41 09       	sbc	r20, r1
    16e4:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    16e6:	83 2f       	mov	r24, r19
    16e8:	8f 70       	andi	r24, 0x0F	; 15
    16ea:	c2 95       	swap	r28
    16ec:	c0 7f       	andi	r28, 0xF0	; 240
    16ee:	c8 2b       	or	r28, r24
    16f0:	f7 01       	movw	r30, r14
    16f2:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    16f4:	26 83       	std	Z+6, r18	; 0x06

	return true;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	18 c0       	rjmp	.+48     	; 0x172a <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	16 c0       	rjmp	.+44     	; 0x172a <usart_set_baudrate+0x20a>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	14 c0       	rjmp	.+40     	; 0x172a <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1702:	d5 01       	movw	r26, r10
    1704:	c4 01       	movw	r24, r8
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	aa 1f       	adc	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	aa 1f       	adc	r26, r26
    1714:	bb 1f       	adc	r27, r27
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	aa 1f       	adc	r26, r26
    171c:	bb 1f       	adc	r27, r27
    171e:	48 1a       	sub	r4, r24
    1720:	59 0a       	sbc	r5, r25
    1722:	6a 0a       	sbc	r6, r26
    1724:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1726:	c9 ef       	ldi	r28, 0xF9	; 249
    1728:	89 cf       	rjmp	.-238    	; 0x163c <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	bf 90       	pop	r11
    1736:	af 90       	pop	r10
    1738:	9f 90       	pop	r9
    173a:	8f 90       	pop	r8
    173c:	7f 90       	pop	r7
    173e:	6f 90       	pop	r6
    1740:	5f 90       	pop	r5
    1742:	4f 90       	pop	r4
    1744:	08 95       	ret

00001746 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	ec 01       	movw	r28, r24
    1750:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	09 f4       	brne	.+2      	; 0x1758 <usart_init_rs232+0x12>
    1756:	cf c0       	rjmp	.+414    	; 0x18f6 <usart_init_rs232+0x1b0>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1758:	80 3c       	cpi	r24, 0xC0	; 192
    175a:	91 05       	cpc	r25, r1
    175c:	29 f4       	brne	.+10     	; 0x1768 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    175e:	60 e1       	ldi	r22, 0x10	; 16
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    1766:	c7 c0       	rjmp	.+398    	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1768:	c1 15       	cp	r28, r1
    176a:	84 e0       	ldi	r24, 0x04	; 4
    176c:	d8 07       	cpc	r29, r24
    176e:	29 f4       	brne	.+10     	; 0x177a <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1770:	64 e0       	ldi	r22, 0x04	; 4
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    1778:	be c0       	rjmp	.+380    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    177a:	c0 38       	cpi	r28, 0x80	; 128
    177c:	e1 e0       	ldi	r30, 0x01	; 1
    177e:	de 07       	cpc	r29, r30
    1780:	29 f4       	brne	.+10     	; 0x178c <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    178a:	b5 c0       	rjmp	.+362    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    178c:	c1 15       	cp	r28, r1
    178e:	f1 e0       	ldi	r31, 0x01	; 1
    1790:	df 07       	cpc	r29, r31
    1792:	29 f4       	brne	.+10     	; 0x179e <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    179c:	ac c0       	rjmp	.+344    	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    179e:	c0 38       	cpi	r28, 0x80	; 128
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	d8 07       	cpc	r29, r24
    17a4:	29 f4       	brne	.+10     	; 0x17b0 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    17ae:	a3 c0       	rjmp	.+326    	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    17b0:	c1 15       	cp	r28, r1
    17b2:	e2 e0       	ldi	r30, 0x02	; 2
    17b4:	de 07       	cpc	r29, r30
    17b6:	29 f4       	brne	.+10     	; 0x17c2 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    17c0:	9a c0       	rjmp	.+308    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    17c2:	c0 32       	cpi	r28, 0x20	; 32
    17c4:	f3 e0       	ldi	r31, 0x03	; 3
    17c6:	df 07       	cpc	r29, r31
    17c8:	29 f4       	brne	.+10     	; 0x17d4 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    17ca:	64 e0       	ldi	r22, 0x04	; 4
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    17d2:	91 c0       	rjmp	.+290    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    17d4:	c1 15       	cp	r28, r1
    17d6:	88 e0       	ldi	r24, 0x08	; 8
    17d8:	d8 07       	cpc	r29, r24
    17da:	29 f4       	brne	.+10     	; 0x17e6 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	83 e0       	ldi	r24, 0x03	; 3
    17e0:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    17e4:	88 c0       	rjmp	.+272    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    17e6:	c1 15       	cp	r28, r1
    17e8:	e9 e0       	ldi	r30, 0x09	; 9
    17ea:	de 07       	cpc	r29, r30
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	84 e0       	ldi	r24, 0x04	; 4
    17f2:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    17f6:	7f c0       	rjmp	.+254    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    17f8:	c1 15       	cp	r28, r1
    17fa:	fa e0       	ldi	r31, 0x0A	; 10
    17fc:	df 07       	cpc	r29, r31
    17fe:	29 f4       	brne	.+10     	; 0x180a <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1800:	61 e0       	ldi	r22, 0x01	; 1
    1802:	85 e0       	ldi	r24, 0x05	; 5
    1804:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    1808:	76 c0       	rjmp	.+236    	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    180a:	c0 34       	cpi	r28, 0x40	; 64
    180c:	88 e0       	ldi	r24, 0x08	; 8
    180e:	d8 07       	cpc	r29, r24
    1810:	29 f4       	brne	.+10     	; 0x181c <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1812:	62 e0       	ldi	r22, 0x02	; 2
    1814:	83 e0       	ldi	r24, 0x03	; 3
    1816:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    181a:	6d c0       	rjmp	.+218    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    181c:	c0 34       	cpi	r28, 0x40	; 64
    181e:	e9 e0       	ldi	r30, 0x09	; 9
    1820:	de 07       	cpc	r29, r30
    1822:	29 f4       	brne	.+10     	; 0x182e <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1824:	62 e0       	ldi	r22, 0x02	; 2
    1826:	84 e0       	ldi	r24, 0x04	; 4
    1828:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    182c:	64 c0       	rjmp	.+200    	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    182e:	c0 39       	cpi	r28, 0x90	; 144
    1830:	f8 e0       	ldi	r31, 0x08	; 8
    1832:	df 07       	cpc	r29, r31
    1834:	29 f4       	brne	.+10     	; 0x1840 <usart_init_rs232+0xfa>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1836:	64 e0       	ldi	r22, 0x04	; 4
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    183e:	5b c0       	rjmp	.+182    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1840:	c0 39       	cpi	r28, 0x90	; 144
    1842:	89 e0       	ldi	r24, 0x09	; 9
    1844:	d8 07       	cpc	r29, r24
    1846:	29 f4       	brne	.+10     	; 0x1852 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1848:	64 e0       	ldi	r22, 0x04	; 4
    184a:	84 e0       	ldi	r24, 0x04	; 4
    184c:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    1850:	52 c0       	rjmp	.+164    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1852:	c0 39       	cpi	r28, 0x90	; 144
    1854:	ea e0       	ldi	r30, 0x0A	; 10
    1856:	de 07       	cpc	r29, r30
    1858:	29 f4       	brne	.+10     	; 0x1864 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    185a:	64 e0       	ldi	r22, 0x04	; 4
    185c:	85 e0       	ldi	r24, 0x05	; 5
    185e:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    1862:	49 c0       	rjmp	.+146    	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1864:	c0 3c       	cpi	r28, 0xC0	; 192
    1866:	f8 e0       	ldi	r31, 0x08	; 8
    1868:	df 07       	cpc	r29, r31
    186a:	29 f4       	brne	.+10     	; 0x1876 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    186c:	68 e0       	ldi	r22, 0x08	; 8
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    1874:	40 c0       	rjmp	.+128    	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1876:	c0 3c       	cpi	r28, 0xC0	; 192
    1878:	89 e0       	ldi	r24, 0x09	; 9
    187a:	d8 07       	cpc	r29, r24
    187c:	29 f4       	brne	.+10     	; 0x1888 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    187e:	68 e0       	ldi	r22, 0x08	; 8
    1880:	84 e0       	ldi	r24, 0x04	; 4
    1882:	0e 94 46 14 	call	0x288c	; 0x288c <sysclk_enable_module>
    1886:	37 c0       	rjmp	.+110    	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1888:	c0 3a       	cpi	r28, 0xA0	; 160
    188a:	e8 e0       	ldi	r30, 0x08	; 8
    188c:	de 07       	cpc	r29, r30
    188e:	21 f4       	brne	.+8      	; 0x1898 <usart_init_rs232+0x152>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1890:	60 e1       	ldi	r22, 0x10	; 16
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	fb d7       	rcall	.+4086   	; 0x288c <sysclk_enable_module>
    1896:	2f c0       	rjmp	.+94     	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1898:	c0 3a       	cpi	r28, 0xA0	; 160
    189a:	f9 e0       	ldi	r31, 0x09	; 9
    189c:	df 07       	cpc	r29, r31
    189e:	21 f4       	brne	.+8      	; 0x18a8 <usart_init_rs232+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    18a0:	60 e1       	ldi	r22, 0x10	; 16
    18a2:	84 e0       	ldi	r24, 0x04	; 4
    18a4:	f3 d7       	rcall	.+4070   	; 0x288c <sysclk_enable_module>
    18a6:	27 c0       	rjmp	.+78     	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    18a8:	c0 3a       	cpi	r28, 0xA0	; 160
    18aa:	8a e0       	ldi	r24, 0x0A	; 10
    18ac:	d8 07       	cpc	r29, r24
    18ae:	21 f4       	brne	.+8      	; 0x18b8 <usart_init_rs232+0x172>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    18b0:	60 e1       	ldi	r22, 0x10	; 16
    18b2:	85 e0       	ldi	r24, 0x05	; 5
    18b4:	eb d7       	rcall	.+4054   	; 0x288c <sysclk_enable_module>
    18b6:	1f c0       	rjmp	.+62     	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    18b8:	c0 3b       	cpi	r28, 0xB0	; 176
    18ba:	e8 e0       	ldi	r30, 0x08	; 8
    18bc:	de 07       	cpc	r29, r30
    18be:	21 f4       	brne	.+8      	; 0x18c8 <usart_init_rs232+0x182>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    18c0:	60 e2       	ldi	r22, 0x20	; 32
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	e3 d7       	rcall	.+4038   	; 0x288c <sysclk_enable_module>
    18c6:	17 c0       	rjmp	.+46     	; 0x18f6 <usart_init_rs232+0x1b0>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    18c8:	c0 3b       	cpi	r28, 0xB0	; 176
    18ca:	f9 e0       	ldi	r31, 0x09	; 9
    18cc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <usart_init_rs232+0x192>
    18d0:	60 e2       	ldi	r22, 0x20	; 32
    18d2:	84 e0       	ldi	r24, 0x04	; 4
    18d4:	db d7       	rcall	.+4022   	; 0x288c <sysclk_enable_module>
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    18d8:	c0 38       	cpi	r28, 0x80	; 128
    18da:	84 e0       	ldi	r24, 0x04	; 4
    18dc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    18de:	21 f4       	brne	.+8      	; 0x18e8 <usart_init_rs232+0x1a2>
    18e0:	60 e4       	ldi	r22, 0x40	; 64
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	d3 d7       	rcall	.+4006   	; 0x288c <sysclk_enable_module>
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <usart_init_rs232+0x1b0>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    18e8:	c0 3a       	cpi	r28, 0xA0	; 160
    18ea:	e4 e0       	ldi	r30, 0x04	; 4
    18ec:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    18ee:	19 f4       	brne	.+6      	; 0x18f6 <usart_init_rs232+0x1b0>
    18f0:	60 e4       	ldi	r22, 0x40	; 64
    18f2:	85 e0       	ldi	r24, 0x05	; 5
    18f4:	cb d7       	rcall	.+3990   	; 0x288c <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	8f 73       	andi	r24, 0x3F	; 63
    18fa:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    18fc:	f8 01       	movw	r30, r16
    18fe:	95 81       	ldd	r25, Z+5	; 0x05
    1900:	84 81       	ldd	r24, Z+4	; 0x04
    1902:	89 2b       	or	r24, r25
    1904:	96 81       	ldd	r25, Z+6	; 0x06
    1906:	91 11       	cpse	r25, r1
    1908:	98 e0       	ldi	r25, 0x08	; 8
    190a:	89 2b       	or	r24, r25
    190c:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    190e:	f8 01       	movw	r30, r16
    1910:	40 81       	ld	r20, Z
    1912:	51 81       	ldd	r21, Z+1	; 0x01
    1914:	62 81       	ldd	r22, Z+2	; 0x02
    1916:	73 81       	ldd	r23, Z+3	; 0x03
    1918:	00 e0       	ldi	r16, 0x00	; 0
    191a:	18 e4       	ldi	r17, 0x48	; 72
    191c:	28 ee       	ldi	r18, 0xE8	; 232
    191e:	31 e0       	ldi	r19, 0x01	; 1
    1920:	ce 01       	movw	r24, r28
    1922:	fe dd       	rcall	.-1028   	; 0x1520 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	98 60       	ori	r25, 0x08	; 8
    1928:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	90 61       	ori	r25, 0x10	; 16
    192e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <bno055_write_register>:
			}
		} else {
		com_rslt = BNO055_ERROR;
		}
	return com_rslt;
}
    193a:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    193e:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1942:	10 97       	sbiw	r26, 0x00	; 0
    1944:	59 f0       	breq	.+22     	; 0x195c <bno055_write_register+0x22>
    1946:	24 2f       	mov	r18, r20
    1948:	ab 01       	movw	r20, r22
    194a:	68 2f       	mov	r22, r24
    194c:	19 96       	adiw	r26, 0x09	; 9
    194e:	ed 91       	ld	r30, X+
    1950:	fc 91       	ld	r31, X
    1952:	1a 97       	sbiw	r26, 0x0a	; 10
    1954:	18 96       	adiw	r26, 0x08	; 8
    1956:	8c 91       	ld	r24, X
    1958:	19 95       	eicall
    195a:	08 95       	ret
    195c:	81 e8       	ldi	r24, 0x81	; 129
    195e:	08 95       	ret

00001960 <bno055_write_page_id>:
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	1f 92       	push	r1
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	19 82       	std	Y+1, r1	; 0x01
    196e:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1972:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1976:	10 97       	sbiw	r26, 0x00	; 0
    1978:	41 f1       	breq	.+80     	; 0x19ca <bno055_write_page_id+0x6a>
    197a:	18 2f       	mov	r17, r24
    197c:	1b 96       	adiw	r26, 0x0b	; 11
    197e:	ed 91       	ld	r30, X+
    1980:	fc 91       	ld	r31, X
    1982:	1c 97       	sbiw	r26, 0x0c	; 12
    1984:	21 e0       	ldi	r18, 0x01	; 1
    1986:	ae 01       	movw	r20, r28
    1988:	4f 5f       	subi	r20, 0xFF	; 255
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	67 e0       	ldi	r22, 0x07	; 7
    198e:	18 96       	adiw	r26, 0x08	; 8
    1990:	8c 91       	ld	r24, X
    1992:	19 95       	eicall
    1994:	81 11       	cpse	r24, r1
    1996:	1b c0       	rjmp	.+54     	; 0x19ce <bno055_write_page_id+0x6e>
    1998:	19 83       	std	Y+1, r17	; 0x01
    199a:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    199e:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    19a2:	19 96       	adiw	r26, 0x09	; 9
    19a4:	ed 91       	ld	r30, X+
    19a6:	fc 91       	ld	r31, X
    19a8:	1a 97       	sbiw	r26, 0x0a	; 10
    19aa:	21 e0       	ldi	r18, 0x01	; 1
    19ac:	ae 01       	movw	r20, r28
    19ae:	4f 5f       	subi	r20, 0xFF	; 255
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255
    19b2:	67 e0       	ldi	r22, 0x07	; 7
    19b4:	18 96       	adiw	r26, 0x08	; 8
    19b6:	8c 91       	ld	r24, X
    19b8:	19 95       	eicall
    19ba:	81 11       	cpse	r24, r1
    19bc:	09 c0       	rjmp	.+18     	; 0x19d0 <bno055_write_page_id+0x70>
    19be:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    19c2:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    19c6:	13 83       	std	Z+3, r17	; 0x03
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <bno055_write_page_id+0x70>
    19ca:	81 e8       	ldi	r24, 0x81	; 129
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <bno055_write_page_id+0x70>
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	0f 90       	pop	r0
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	08 95       	ret

000019da <bno055_read_euler_hrp>:
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <bno055_read_euler_hrp+0xa>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <bno055_read_euler_hrp+0xc>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	8c 01       	movw	r16, r24
    19ec:	fe 01       	movw	r30, r28
    19ee:	31 96       	adiw	r30, 0x01	; 1
    19f0:	96 e0       	ldi	r25, 0x06	; 6
    19f2:	df 01       	movw	r26, r30
    19f4:	1d 92       	st	X+, r1
    19f6:	9a 95       	dec	r25
    19f8:	e9 f7       	brne	.-6      	; 0x19f4 <bno055_read_euler_hrp+0x1a>
    19fa:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    19fe:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1a02:	30 97       	sbiw	r30, 0x00	; 0
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <bno055_read_euler_hrp+0x2e>
    1a06:	3e c0       	rjmp	.+124    	; 0x1a84 <bno055_read_euler_hrp+0xaa>
    1a08:	83 81       	ldd	r24, Z+3	; 0x03
    1a0a:	88 23       	and	r24, r24
    1a0c:	59 f0       	breq	.+22     	; 0x1a24 <bno055_read_euler_hrp+0x4a>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	a7 df       	rcall	.-178    	; 0x1960 <bno055_write_page_id>
    1a12:	88 23       	and	r24, r24
    1a14:	39 f0       	breq	.+14     	; 0x1a24 <bno055_read_euler_hrp+0x4a>
    1a16:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1a1a:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1a1e:	83 81       	ldd	r24, Z+3	; 0x03
    1a20:	81 11       	cpse	r24, r1
    1a22:	32 c0       	rjmp	.+100    	; 0x1a88 <bno055_read_euler_hrp+0xae>
    1a24:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1a28:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1a2c:	1b 96       	adiw	r26, 0x0b	; 11
    1a2e:	ed 91       	ld	r30, X+
    1a30:	fc 91       	ld	r31, X
    1a32:	1c 97       	sbiw	r26, 0x0c	; 12
    1a34:	26 e0       	ldi	r18, 0x06	; 6
    1a36:	ae 01       	movw	r20, r28
    1a38:	4f 5f       	subi	r20, 0xFF	; 255
    1a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3c:	6a e1       	ldi	r22, 0x1A	; 26
    1a3e:	18 96       	adiw	r26, 0x08	; 8
    1a40:	8c 91       	ld	r24, X
    1a42:	19 95       	eicall
    1a44:	2a 81       	ldd	r18, Y+2	; 0x02
    1a46:	02 2e       	mov	r0, r18
    1a48:	00 0c       	add	r0, r0
    1a4a:	33 0b       	sbc	r19, r19
    1a4c:	32 2f       	mov	r19, r18
    1a4e:	22 27       	eor	r18, r18
    1a50:	99 81       	ldd	r25, Y+1	; 0x01
    1a52:	29 2b       	or	r18, r25
    1a54:	f8 01       	movw	r30, r16
    1a56:	20 83       	st	Z, r18
    1a58:	31 83       	std	Z+1, r19	; 0x01
    1a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	00 0c       	add	r0, r0
    1a60:	33 0b       	sbc	r19, r19
    1a62:	32 2f       	mov	r19, r18
    1a64:	22 27       	eor	r18, r18
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	29 2b       	or	r18, r25
    1a6a:	22 83       	std	Z+2, r18	; 0x02
    1a6c:	33 83       	std	Z+3, r19	; 0x03
    1a6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a70:	02 2e       	mov	r0, r18
    1a72:	00 0c       	add	r0, r0
    1a74:	33 0b       	sbc	r19, r19
    1a76:	32 2f       	mov	r19, r18
    1a78:	22 27       	eor	r18, r18
    1a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7c:	29 2b       	or	r18, r25
    1a7e:	24 83       	std	Z+4, r18	; 0x04
    1a80:	35 83       	std	Z+5, r19	; 0x05
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <bno055_read_euler_hrp+0xb0>
    1a84:	81 e8       	ldi	r24, 0x81	; 129
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <bno055_read_euler_hrp+0xb0>
    1a88:	8f ef       	ldi	r24, 0xFF	; 255
    1a8a:	26 96       	adiw	r28, 0x06	; 6
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	08 95       	ret

00001a9a <bno055_read_linear_accel_xyz>:
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <bno055_read_linear_accel_xyz+0xa>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <bno055_read_linear_accel_xyz+0xc>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	8c 01       	movw	r16, r24
    1aac:	fe 01       	movw	r30, r28
    1aae:	31 96       	adiw	r30, 0x01	; 1
    1ab0:	96 e0       	ldi	r25, 0x06	; 6
    1ab2:	df 01       	movw	r26, r30
    1ab4:	1d 92       	st	X+, r1
    1ab6:	9a 95       	dec	r25
    1ab8:	e9 f7       	brne	.-6      	; 0x1ab4 <bno055_read_linear_accel_xyz+0x1a>
    1aba:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1abe:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1ac2:	30 97       	sbiw	r30, 0x00	; 0
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <bno055_read_linear_accel_xyz+0x2e>
    1ac6:	3e c0       	rjmp	.+124    	; 0x1b44 <bno055_read_linear_accel_xyz+0xaa>
    1ac8:	83 81       	ldd	r24, Z+3	; 0x03
    1aca:	88 23       	and	r24, r24
    1acc:	59 f0       	breq	.+22     	; 0x1ae4 <bno055_read_linear_accel_xyz+0x4a>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	47 df       	rcall	.-370    	; 0x1960 <bno055_write_page_id>
    1ad2:	88 23       	and	r24, r24
    1ad4:	39 f0       	breq	.+14     	; 0x1ae4 <bno055_read_linear_accel_xyz+0x4a>
    1ad6:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1ada:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1ade:	83 81       	ldd	r24, Z+3	; 0x03
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	32 c0       	rjmp	.+100    	; 0x1b48 <bno055_read_linear_accel_xyz+0xae>
    1ae4:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1ae8:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1aec:	1b 96       	adiw	r26, 0x0b	; 11
    1aee:	ed 91       	ld	r30, X+
    1af0:	fc 91       	ld	r31, X
    1af2:	1c 97       	sbiw	r26, 0x0c	; 12
    1af4:	26 e0       	ldi	r18, 0x06	; 6
    1af6:	ae 01       	movw	r20, r28
    1af8:	4f 5f       	subi	r20, 0xFF	; 255
    1afa:	5f 4f       	sbci	r21, 0xFF	; 255
    1afc:	68 e2       	ldi	r22, 0x28	; 40
    1afe:	18 96       	adiw	r26, 0x08	; 8
    1b00:	8c 91       	ld	r24, X
    1b02:	19 95       	eicall
    1b04:	2a 81       	ldd	r18, Y+2	; 0x02
    1b06:	02 2e       	mov	r0, r18
    1b08:	00 0c       	add	r0, r0
    1b0a:	33 0b       	sbc	r19, r19
    1b0c:	32 2f       	mov	r19, r18
    1b0e:	22 27       	eor	r18, r18
    1b10:	99 81       	ldd	r25, Y+1	; 0x01
    1b12:	29 2b       	or	r18, r25
    1b14:	f8 01       	movw	r30, r16
    1b16:	20 83       	st	Z, r18
    1b18:	31 83       	std	Z+1, r19	; 0x01
    1b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	00 0c       	add	r0, r0
    1b20:	33 0b       	sbc	r19, r19
    1b22:	32 2f       	mov	r19, r18
    1b24:	22 27       	eor	r18, r18
    1b26:	9b 81       	ldd	r25, Y+3	; 0x03
    1b28:	29 2b       	or	r18, r25
    1b2a:	22 83       	std	Z+2, r18	; 0x02
    1b2c:	33 83       	std	Z+3, r19	; 0x03
    1b2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b30:	02 2e       	mov	r0, r18
    1b32:	00 0c       	add	r0, r0
    1b34:	33 0b       	sbc	r19, r19
    1b36:	32 2f       	mov	r19, r18
    1b38:	22 27       	eor	r18, r18
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	29 2b       	or	r18, r25
    1b3e:	24 83       	std	Z+4, r18	; 0x04
    1b40:	35 83       	std	Z+5, r19	; 0x05
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <bno055_read_linear_accel_xyz+0xb0>
    1b44:	81 e8       	ldi	r24, 0x81	; 129
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <bno055_read_linear_accel_xyz+0xb0>
    1b48:	8f ef       	ldi	r24, 0xFF	; 255
    1b4a:	26 96       	adiw	r28, 0x06	; 6
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <bno055_convert_double_linear_accel_xyz_msq>:
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <bno055_convert_double_linear_accel_xyz_msq+0xc>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <bno055_convert_double_linear_accel_xyz_msq+0xe>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	8c 01       	movw	r16, r24
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	1a 82       	std	Y+2, r1	; 0x02
    1b72:	1b 82       	std	Y+3, r1	; 0x03
    1b74:	1c 82       	std	Y+4, r1	; 0x04
    1b76:	1d 82       	std	Y+5, r1	; 0x05
    1b78:	1e 82       	std	Y+6, r1	; 0x06
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	01 96       	adiw	r24, 0x01	; 1
    1b7e:	8d df       	rcall	.-230    	; 0x1a9a <bno055_read_linear_accel_xyz>
    1b80:	f8 2e       	mov	r15, r24
    1b82:	81 11       	cpse	r24, r1
    1b84:	3a c0       	rjmp	.+116    	; 0x1bfa <bno055_convert_double_linear_accel_xyz_msq+0xa0>
    1b86:	69 81       	ldd	r22, Y+1	; 0x01
    1b88:	7a 81       	ldd	r23, Y+2	; 0x02
    1b8a:	07 2e       	mov	r0, r23
    1b8c:	00 0c       	add	r0, r0
    1b8e:	88 0b       	sbc	r24, r24
    1b90:	99 0b       	sbc	r25, r25
    1b92:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	48 ec       	ldi	r20, 0xC8	; 200
    1b9c:	52 e4       	ldi	r21, 0x42	; 66
    1b9e:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	60 83       	st	Z, r22
    1ba6:	71 83       	std	Z+1, r23	; 0x01
    1ba8:	82 83       	std	Z+2, r24	; 0x02
    1baa:	93 83       	std	Z+3, r25	; 0x03
    1bac:	6b 81       	ldd	r22, Y+3	; 0x03
    1bae:	7c 81       	ldd	r23, Y+4	; 0x04
    1bb0:	07 2e       	mov	r0, r23
    1bb2:	00 0c       	add	r0, r0
    1bb4:	88 0b       	sbc	r24, r24
    1bb6:	99 0b       	sbc	r25, r25
    1bb8:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	48 ec       	ldi	r20, 0xC8	; 200
    1bc2:	52 e4       	ldi	r21, 0x42	; 66
    1bc4:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    1bc8:	f8 01       	movw	r30, r16
    1bca:	64 83       	std	Z+4, r22	; 0x04
    1bcc:	75 83       	std	Z+5, r23	; 0x05
    1bce:	86 83       	std	Z+6, r24	; 0x06
    1bd0:	97 83       	std	Z+7, r25	; 0x07
    1bd2:	6d 81       	ldd	r22, Y+5	; 0x05
    1bd4:	7e 81       	ldd	r23, Y+6	; 0x06
    1bd6:	07 2e       	mov	r0, r23
    1bd8:	00 0c       	add	r0, r0
    1bda:	88 0b       	sbc	r24, r24
    1bdc:	99 0b       	sbc	r25, r25
    1bde:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	48 ec       	ldi	r20, 0xC8	; 200
    1be8:	52 e4       	ldi	r21, 0x42	; 66
    1bea:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    1bee:	f8 01       	movw	r30, r16
    1bf0:	60 87       	std	Z+8, r22	; 0x08
    1bf2:	71 87       	std	Z+9, r23	; 0x09
    1bf4:	82 87       	std	Z+10, r24	; 0x0a
    1bf6:	93 87       	std	Z+11, r25	; 0x0b
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <bno055_convert_double_linear_accel_xyz_msq+0xa4>
    1bfa:	ff 24       	eor	r15, r15
    1bfc:	fa 94       	dec	r15
    1bfe:	8f 2d       	mov	r24, r15
    1c00:	26 96       	adiw	r28, 0x06	; 6
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	08 95       	ret

00001c12 <bno055_get_mag_calib_stat>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	1f 92       	push	r1
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	19 82       	std	Y+1, r1	; 0x01
    1c22:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1c26:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1c2a:	30 97       	sbiw	r30, 0x00	; 0
    1c2c:	21 f1       	breq	.+72     	; 0x1c76 <bno055_get_mag_calib_stat+0x64>
    1c2e:	8c 01       	movw	r16, r24
    1c30:	83 81       	ldd	r24, Z+3	; 0x03
    1c32:	88 23       	and	r24, r24
    1c34:	59 f0       	breq	.+22     	; 0x1c4c <bno055_get_mag_calib_stat+0x3a>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	93 de       	rcall	.-730    	; 0x1960 <bno055_write_page_id>
    1c3a:	88 23       	and	r24, r24
    1c3c:	39 f0       	breq	.+14     	; 0x1c4c <bno055_get_mag_calib_stat+0x3a>
    1c3e:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1c42:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1c46:	83 81       	ldd	r24, Z+3	; 0x03
    1c48:	81 11       	cpse	r24, r1
    1c4a:	17 c0       	rjmp	.+46     	; 0x1c7a <bno055_get_mag_calib_stat+0x68>
    1c4c:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1c50:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1c54:	1b 96       	adiw	r26, 0x0b	; 11
    1c56:	ed 91       	ld	r30, X+
    1c58:	fc 91       	ld	r31, X
    1c5a:	1c 97       	sbiw	r26, 0x0c	; 12
    1c5c:	21 e0       	ldi	r18, 0x01	; 1
    1c5e:	ae 01       	movw	r20, r28
    1c60:	4f 5f       	subi	r20, 0xFF	; 255
    1c62:	5f 4f       	sbci	r21, 0xFF	; 255
    1c64:	65 e3       	ldi	r22, 0x35	; 53
    1c66:	18 96       	adiw	r26, 0x08	; 8
    1c68:	8c 91       	ld	r24, X
    1c6a:	19 95       	eicall
    1c6c:	99 81       	ldd	r25, Y+1	; 0x01
    1c6e:	93 70       	andi	r25, 0x03	; 3
    1c70:	f8 01       	movw	r30, r16
    1c72:	90 83       	st	Z, r25
    1c74:	03 c0       	rjmp	.+6      	; 0x1c7c <bno055_get_mag_calib_stat+0x6a>
    1c76:	81 e8       	ldi	r24, 0x81	; 129
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <bno055_get_mag_calib_stat+0x6a>
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	0f 90       	pop	r0
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	08 95       	ret

00001c88 <bno055_get_accel_calib_stat>:
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	1f 92       	push	r1
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	19 82       	std	Y+1, r1	; 0x01
    1c98:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1c9c:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1ca0:	30 97       	sbiw	r30, 0x00	; 0
    1ca2:	49 f1       	breq	.+82     	; 0x1cf6 <bno055_get_accel_calib_stat+0x6e>
    1ca4:	8c 01       	movw	r16, r24
    1ca6:	83 81       	ldd	r24, Z+3	; 0x03
    1ca8:	88 23       	and	r24, r24
    1caa:	59 f0       	breq	.+22     	; 0x1cc2 <bno055_get_accel_calib_stat+0x3a>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	58 de       	rcall	.-848    	; 0x1960 <bno055_write_page_id>
    1cb0:	88 23       	and	r24, r24
    1cb2:	39 f0       	breq	.+14     	; 0x1cc2 <bno055_get_accel_calib_stat+0x3a>
    1cb4:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1cb8:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1cbc:	83 81       	ldd	r24, Z+3	; 0x03
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	1c c0       	rjmp	.+56     	; 0x1cfa <bno055_get_accel_calib_stat+0x72>
    1cc2:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1cc6:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1cca:	1b 96       	adiw	r26, 0x0b	; 11
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	1c 97       	sbiw	r26, 0x0c	; 12
    1cd2:	21 e0       	ldi	r18, 0x01	; 1
    1cd4:	ae 01       	movw	r20, r28
    1cd6:	4f 5f       	subi	r20, 0xFF	; 255
    1cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cda:	65 e3       	ldi	r22, 0x35	; 53
    1cdc:	18 96       	adiw	r26, 0x08	; 8
    1cde:	8c 91       	ld	r24, X
    1ce0:	19 95       	eicall
    1ce2:	29 81       	ldd	r18, Y+1	; 0x01
    1ce4:	2c 70       	andi	r18, 0x0C	; 12
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	35 95       	asr	r19
    1cea:	27 95       	ror	r18
    1cec:	35 95       	asr	r19
    1cee:	27 95       	ror	r18
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	20 83       	st	Z, r18
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <bno055_get_accel_calib_stat+0x74>
    1cf6:	81 e8       	ldi	r24, 0x81	; 129
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <bno055_get_accel_calib_stat+0x74>
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	0f 90       	pop	r0
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	08 95       	ret

00001d08 <bno055_get_gyro_calib_stat>:
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	1f 92       	push	r1
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	19 82       	std	Y+1, r1	; 0x01
    1d18:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1d1c:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1d20:	30 97       	sbiw	r30, 0x00	; 0
    1d22:	69 f1       	breq	.+90     	; 0x1d7e <bno055_get_gyro_calib_stat+0x76>
    1d24:	8c 01       	movw	r16, r24
    1d26:	83 81       	ldd	r24, Z+3	; 0x03
    1d28:	88 23       	and	r24, r24
    1d2a:	59 f0       	breq	.+22     	; 0x1d42 <bno055_get_gyro_calib_stat+0x3a>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	18 de       	rcall	.-976    	; 0x1960 <bno055_write_page_id>
    1d30:	88 23       	and	r24, r24
    1d32:	39 f0       	breq	.+14     	; 0x1d42 <bno055_get_gyro_calib_stat+0x3a>
    1d34:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1d38:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1d3c:	83 81       	ldd	r24, Z+3	; 0x03
    1d3e:	81 11       	cpse	r24, r1
    1d40:	20 c0       	rjmp	.+64     	; 0x1d82 <bno055_get_gyro_calib_stat+0x7a>
    1d42:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1d46:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1d4a:	1b 96       	adiw	r26, 0x0b	; 11
    1d4c:	ed 91       	ld	r30, X+
    1d4e:	fc 91       	ld	r31, X
    1d50:	1c 97       	sbiw	r26, 0x0c	; 12
    1d52:	21 e0       	ldi	r18, 0x01	; 1
    1d54:	ae 01       	movw	r20, r28
    1d56:	4f 5f       	subi	r20, 0xFF	; 255
    1d58:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5a:	65 e3       	ldi	r22, 0x35	; 53
    1d5c:	18 96       	adiw	r26, 0x08	; 8
    1d5e:	8c 91       	ld	r24, X
    1d60:	19 95       	eicall
    1d62:	29 81       	ldd	r18, Y+1	; 0x01
    1d64:	20 73       	andi	r18, 0x30	; 48
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	35 95       	asr	r19
    1d6a:	27 95       	ror	r18
    1d6c:	35 95       	asr	r19
    1d6e:	27 95       	ror	r18
    1d70:	35 95       	asr	r19
    1d72:	27 95       	ror	r18
    1d74:	35 95       	asr	r19
    1d76:	27 95       	ror	r18
    1d78:	f8 01       	movw	r30, r16
    1d7a:	20 83       	st	Z, r18
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <bno055_get_gyro_calib_stat+0x7c>
    1d7e:	81 e8       	ldi	r24, 0x81	; 129
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <bno055_get_gyro_calib_stat+0x7c>
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	0f 90       	pop	r0
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	08 95       	ret

00001d90 <bno055_get_sys_calib_stat>:
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	1f 92       	push	r1
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	19 82       	std	Y+1, r1	; 0x01
    1da0:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1da4:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1da8:	30 97       	sbiw	r30, 0x00	; 0
    1daa:	39 f1       	breq	.+78     	; 0x1dfa <bno055_get_sys_calib_stat+0x6a>
    1dac:	8c 01       	movw	r16, r24
    1dae:	83 81       	ldd	r24, Z+3	; 0x03
    1db0:	88 23       	and	r24, r24
    1db2:	59 f0       	breq	.+22     	; 0x1dca <bno055_get_sys_calib_stat+0x3a>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	d4 dd       	rcall	.-1112   	; 0x1960 <bno055_write_page_id>
    1db8:	88 23       	and	r24, r24
    1dba:	39 f0       	breq	.+14     	; 0x1dca <bno055_get_sys_calib_stat+0x3a>
    1dbc:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1dc0:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1dc4:	83 81       	ldd	r24, Z+3	; 0x03
    1dc6:	81 11       	cpse	r24, r1
    1dc8:	1a c0       	rjmp	.+52     	; 0x1dfe <bno055_get_sys_calib_stat+0x6e>
    1dca:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1dce:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1dd2:	1b 96       	adiw	r26, 0x0b	; 11
    1dd4:	ed 91       	ld	r30, X+
    1dd6:	fc 91       	ld	r31, X
    1dd8:	1c 97       	sbiw	r26, 0x0c	; 12
    1dda:	21 e0       	ldi	r18, 0x01	; 1
    1ddc:	ae 01       	movw	r20, r28
    1dde:	4f 5f       	subi	r20, 0xFF	; 255
    1de0:	5f 4f       	sbci	r21, 0xFF	; 255
    1de2:	65 e3       	ldi	r22, 0x35	; 53
    1de4:	18 96       	adiw	r26, 0x08	; 8
    1de6:	8c 91       	ld	r24, X
    1de8:	19 95       	eicall
    1dea:	99 81       	ldd	r25, Y+1	; 0x01
    1dec:	92 95       	swap	r25
    1dee:	96 95       	lsr	r25
    1df0:	96 95       	lsr	r25
    1df2:	93 70       	andi	r25, 0x03	; 3
    1df4:	f8 01       	movw	r30, r16
    1df6:	90 83       	st	Z, r25
    1df8:	03 c0       	rjmp	.+6      	; 0x1e00 <bno055_get_sys_calib_stat+0x70>
    1dfa:	81 e8       	ldi	r24, 0x81	; 129
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <bno055_get_sys_calib_stat+0x70>
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	0f 90       	pop	r0
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	08 95       	ret

00001e0c <bno055_get_euler_unit>:
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	1f 92       	push	r1
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1e20:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1e24:	30 97       	sbiw	r30, 0x00	; 0
    1e26:	31 f1       	breq	.+76     	; 0x1e74 <bno055_get_euler_unit+0x68>
    1e28:	8c 01       	movw	r16, r24
    1e2a:	83 81       	ldd	r24, Z+3	; 0x03
    1e2c:	88 23       	and	r24, r24
    1e2e:	59 f0       	breq	.+22     	; 0x1e46 <bno055_get_euler_unit+0x3a>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	96 dd       	rcall	.-1236   	; 0x1960 <bno055_write_page_id>
    1e34:	88 23       	and	r24, r24
    1e36:	39 f0       	breq	.+14     	; 0x1e46 <bno055_get_euler_unit+0x3a>
    1e38:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1e3c:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1e40:	83 81       	ldd	r24, Z+3	; 0x03
    1e42:	81 11       	cpse	r24, r1
    1e44:	19 c0       	rjmp	.+50     	; 0x1e78 <bno055_get_euler_unit+0x6c>
    1e46:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1e4a:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1e4e:	1b 96       	adiw	r26, 0x0b	; 11
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	1c 97       	sbiw	r26, 0x0c	; 12
    1e56:	21 e0       	ldi	r18, 0x01	; 1
    1e58:	ae 01       	movw	r20, r28
    1e5a:	4f 5f       	subi	r20, 0xFF	; 255
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5e:	6b e3       	ldi	r22, 0x3B	; 59
    1e60:	18 96       	adiw	r26, 0x08	; 8
    1e62:	8c 91       	ld	r24, X
    1e64:	19 95       	eicall
    1e66:	99 81       	ldd	r25, Y+1	; 0x01
    1e68:	92 fb       	bst	r25, 2
    1e6a:	99 27       	eor	r25, r25
    1e6c:	90 f9       	bld	r25, 0
    1e6e:	f8 01       	movw	r30, r16
    1e70:	90 83       	st	Z, r25
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <bno055_get_euler_unit+0x6e>
    1e74:	81 e8       	ldi	r24, 0x81	; 129
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <bno055_get_euler_unit+0x6e>
    1e78:	8f ef       	ldi	r24, 0xFF	; 255
    1e7a:	0f 90       	pop	r0
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	08 95       	ret

00001e86 <bno055_get_operation_mode>:
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	1f 92       	push	r1
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	19 82       	std	Y+1, r1	; 0x01
    1e96:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1e9a:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1e9e:	30 97       	sbiw	r30, 0x00	; 0
    1ea0:	21 f1       	breq	.+72     	; 0x1eea <bno055_get_operation_mode+0x64>
    1ea2:	8c 01       	movw	r16, r24
    1ea4:	83 81       	ldd	r24, Z+3	; 0x03
    1ea6:	88 23       	and	r24, r24
    1ea8:	59 f0       	breq	.+22     	; 0x1ec0 <bno055_get_operation_mode+0x3a>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	59 dd       	rcall	.-1358   	; 0x1960 <bno055_write_page_id>
    1eae:	88 23       	and	r24, r24
    1eb0:	39 f0       	breq	.+14     	; 0x1ec0 <bno055_get_operation_mode+0x3a>
    1eb2:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1eb6:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1eba:	83 81       	ldd	r24, Z+3	; 0x03
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	17 c0       	rjmp	.+46     	; 0x1eee <bno055_get_operation_mode+0x68>
    1ec0:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1ec4:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1ec8:	1b 96       	adiw	r26, 0x0b	; 11
    1eca:	ed 91       	ld	r30, X+
    1ecc:	fc 91       	ld	r31, X
    1ece:	1c 97       	sbiw	r26, 0x0c	; 12
    1ed0:	21 e0       	ldi	r18, 0x01	; 1
    1ed2:	ae 01       	movw	r20, r28
    1ed4:	4f 5f       	subi	r20, 0xFF	; 255
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	6d e3       	ldi	r22, 0x3D	; 61
    1eda:	18 96       	adiw	r26, 0x08	; 8
    1edc:	8c 91       	ld	r24, X
    1ede:	19 95       	eicall
    1ee0:	99 81       	ldd	r25, Y+1	; 0x01
    1ee2:	9f 70       	andi	r25, 0x0F	; 15
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	90 83       	st	Z, r25
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <bno055_get_operation_mode+0x6a>
    1eea:	81 e8       	ldi	r24, 0x81	; 129
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <bno055_get_operation_mode+0x6a>
    1eee:	8f ef       	ldi	r24, 0xFF	; 255
    1ef0:	0f 90       	pop	r0
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <bno055_set_operation_mode>:
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	1f 92       	push	r1
    1f06:	1f 92       	push	r1
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	19 82       	std	Y+1, r1	; 0x01
    1f0e:	1a 82       	std	Y+2, r1	; 0x02
    1f10:	20 91 f2 20 	lds	r18, 0x20F2	; 0x8020f2 <p_bno055>
    1f14:	30 91 f3 20 	lds	r19, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1f18:	23 2b       	or	r18, r19
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <bno055_set_operation_mode+0x22>
    1f1c:	9c c0       	rjmp	.+312    	; 0x2056 <bno055_set_operation_mode+0x15a>
    1f1e:	08 2f       	mov	r16, r24
    1f20:	ce 01       	movw	r24, r28
    1f22:	02 96       	adiw	r24, 0x02	; 2
    1f24:	b0 df       	rcall	.-160    	; 0x1e86 <bno055_get_operation_mode>
    1f26:	81 11       	cpse	r24, r1
    1f28:	98 c0       	rjmp	.+304    	; 0x205a <bno055_set_operation_mode+0x15e>
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	35 c0       	rjmp	.+106    	; 0x1f9a <bno055_set_operation_mode+0x9e>
    1f30:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1f34:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1f38:	1b 96       	adiw	r26, 0x0b	; 11
    1f3a:	ed 91       	ld	r30, X+
    1f3c:	fc 91       	ld	r31, X
    1f3e:	1c 97       	sbiw	r26, 0x0c	; 12
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	ae 01       	movw	r20, r28
    1f44:	4f 5f       	subi	r20, 0xFF	; 255
    1f46:	5f 4f       	sbci	r21, 0xFF	; 255
    1f48:	6d e3       	ldi	r22, 0x3D	; 61
    1f4a:	18 96       	adiw	r26, 0x08	; 8
    1f4c:	8c 91       	ld	r24, X
    1f4e:	19 95       	eicall
    1f50:	81 11       	cpse	r24, r1
    1f52:	85 c0       	rjmp	.+266    	; 0x205e <bno055_set_operation_mode+0x162>
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	98 2f       	mov	r25, r24
    1f58:	90 7f       	andi	r25, 0xF0	; 240
    1f5a:	80 2f       	mov	r24, r16
    1f5c:	8f 70       	andi	r24, 0x0F	; 15
    1f5e:	89 2b       	or	r24, r25
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1f66:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1f6a:	19 96       	adiw	r26, 0x09	; 9
    1f6c:	ed 91       	ld	r30, X+
    1f6e:	fc 91       	ld	r31, X
    1f70:	1a 97       	sbiw	r26, 0x0a	; 10
    1f72:	21 e0       	ldi	r18, 0x01	; 1
    1f74:	ae 01       	movw	r20, r28
    1f76:	4f 5f       	subi	r20, 0xFF	; 255
    1f78:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7a:	6d e3       	ldi	r22, 0x3D	; 61
    1f7c:	18 96       	adiw	r26, 0x08	; 8
    1f7e:	8c 91       	ld	r24, X
    1f80:	19 95       	eicall
    1f82:	18 2f       	mov	r17, r24
    1f84:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1f88:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1f8c:	05 84       	ldd	r0, Z+13	; 0x0d
    1f8e:	f6 85       	ldd	r31, Z+14	; 0x0e
    1f90:	e0 2d       	mov	r30, r0
    1f92:	88 e5       	ldi	r24, 0x58	; 88
    1f94:	92 e0       	ldi	r25, 0x02	; 2
    1f96:	19 95       	eicall
    1f98:	65 c0       	rjmp	.+202    	; 0x2064 <bno055_set_operation_mode+0x168>
    1f9a:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1f9e:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1fa2:	1b 96       	adiw	r26, 0x0b	; 11
    1fa4:	ed 91       	ld	r30, X+
    1fa6:	fc 91       	ld	r31, X
    1fa8:	1c 97       	sbiw	r26, 0x0c	; 12
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	ae 01       	movw	r20, r28
    1fae:	4f 5f       	subi	r20, 0xFF	; 255
    1fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb2:	6d e3       	ldi	r22, 0x3D	; 61
    1fb4:	18 96       	adiw	r26, 0x08	; 8
    1fb6:	8c 91       	ld	r24, X
    1fb8:	19 95       	eicall
    1fba:	18 2f       	mov	r17, r24
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	14 c0       	rjmp	.+40     	; 0x1fe8 <bno055_set_operation_mode+0xec>
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	80 7f       	andi	r24, 0xF0	; 240
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	be 01       	movw	r22, r28
    1fca:	6f 5f       	subi	r22, 0xFF	; 255
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	8d e3       	ldi	r24, 0x3D	; 61
    1fd0:	b4 dc       	rcall	.-1688   	; 0x193a <bno055_write_register>
    1fd2:	18 2f       	mov	r17, r24
    1fd4:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    1fd8:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1fdc:	05 84       	ldd	r0, Z+13	; 0x0d
    1fde:	f6 85       	ldd	r31, Z+14	; 0x0e
    1fe0:	e0 2d       	mov	r30, r0
    1fe2:	84 e1       	ldi	r24, 0x14	; 20
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	19 95       	eicall
    1fe8:	00 23       	and	r16, r16
    1fea:	e1 f1       	breq	.+120    	; 0x2064 <bno055_set_operation_mode+0x168>
    1fec:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    1ff0:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    1ff4:	1b 96       	adiw	r26, 0x0b	; 11
    1ff6:	ed 91       	ld	r30, X+
    1ff8:	fc 91       	ld	r31, X
    1ffa:	1c 97       	sbiw	r26, 0x0c	; 12
    1ffc:	21 e0       	ldi	r18, 0x01	; 1
    1ffe:	ae 01       	movw	r20, r28
    2000:	4f 5f       	subi	r20, 0xFF	; 255
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	6d e3       	ldi	r22, 0x3D	; 61
    2006:	18 96       	adiw	r26, 0x08	; 8
    2008:	8c 91       	ld	r24, X
    200a:	19 95       	eicall
    200c:	81 11       	cpse	r24, r1
    200e:	29 c0       	rjmp	.+82     	; 0x2062 <bno055_set_operation_mode+0x166>
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	98 2f       	mov	r25, r24
    2014:	90 7f       	andi	r25, 0xF0	; 240
    2016:	80 2f       	mov	r24, r16
    2018:	8f 70       	andi	r24, 0x0F	; 15
    201a:	89 2b       	or	r24, r25
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    2022:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    2026:	19 96       	adiw	r26, 0x09	; 9
    2028:	ed 91       	ld	r30, X+
    202a:	fc 91       	ld	r31, X
    202c:	1a 97       	sbiw	r26, 0x0a	; 10
    202e:	21 e0       	ldi	r18, 0x01	; 1
    2030:	ae 01       	movw	r20, r28
    2032:	4f 5f       	subi	r20, 0xFF	; 255
    2034:	5f 4f       	sbci	r21, 0xFF	; 255
    2036:	6d e3       	ldi	r22, 0x3D	; 61
    2038:	18 96       	adiw	r26, 0x08	; 8
    203a:	8c 91       	ld	r24, X
    203c:	19 95       	eicall
    203e:	18 2f       	mov	r17, r24
    2040:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <p_bno055>
    2044:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    2048:	05 84       	ldd	r0, Z+13	; 0x0d
    204a:	f6 85       	ldd	r31, Z+14	; 0x0e
    204c:	e0 2d       	mov	r30, r0
    204e:	88 e5       	ldi	r24, 0x58	; 88
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	19 95       	eicall
    2054:	07 c0       	rjmp	.+14     	; 0x2064 <bno055_set_operation_mode+0x168>
    2056:	11 e8       	ldi	r17, 0x81	; 129
    2058:	05 c0       	rjmp	.+10     	; 0x2064 <bno055_set_operation_mode+0x168>
    205a:	1f ef       	ldi	r17, 0xFF	; 255
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <bno055_set_operation_mode+0x168>
    205e:	18 2f       	mov	r17, r24
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <bno055_set_operation_mode+0x168>
    2062:	18 2f       	mov	r17, r24
    2064:	81 2f       	mov	r24, r17
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	08 95       	ret

00002074 <bno055_set_euler_unit>:
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	1f 92       	push	r1
    207e:	1f 92       	push	r1
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	19 82       	std	Y+1, r1	; 0x01
    2086:	1a 82       	std	Y+2, r1	; 0x02
    2088:	20 91 f2 20 	lds	r18, 0x20F2	; 0x8020f2 <p_bno055>
    208c:	30 91 f3 20 	lds	r19, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    2090:	23 2b       	or	r18, r19
    2092:	09 f4       	brne	.+2      	; 0x2096 <bno055_set_euler_unit+0x22>
    2094:	44 c0       	rjmp	.+136    	; 0x211e <bno055_set_euler_unit+0xaa>
    2096:	08 2f       	mov	r16, r24
    2098:	ce 01       	movw	r24, r28
    209a:	02 96       	adiw	r24, 0x02	; 2
    209c:	f4 de       	rcall	.-536    	; 0x1e86 <bno055_get_operation_mode>
    209e:	81 11       	cpse	r24, r1
    20a0:	35 c0       	rjmp	.+106    	; 0x210c <bno055_set_euler_unit+0x98>
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	88 23       	and	r24, r24
    20a6:	21 f0       	breq	.+8      	; 0x20b0 <bno055_set_euler_unit+0x3c>
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	28 df       	rcall	.-432    	; 0x1efc <bno055_set_operation_mode>
    20ac:	81 11       	cpse	r24, r1
    20ae:	30 c0       	rjmp	.+96     	; 0x2110 <bno055_set_euler_unit+0x9c>
    20b0:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    20b4:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    20b8:	1b 96       	adiw	r26, 0x0b	; 11
    20ba:	ed 91       	ld	r30, X+
    20bc:	fc 91       	ld	r31, X
    20be:	1c 97       	sbiw	r26, 0x0c	; 12
    20c0:	21 e0       	ldi	r18, 0x01	; 1
    20c2:	ae 01       	movw	r20, r28
    20c4:	4f 5f       	subi	r20, 0xFF	; 255
    20c6:	5f 4f       	sbci	r21, 0xFF	; 255
    20c8:	6b e3       	ldi	r22, 0x3B	; 59
    20ca:	18 96       	adiw	r26, 0x08	; 8
    20cc:	8c 91       	ld	r24, X
    20ce:	19 95       	eicall
    20d0:	18 2f       	mov	r17, r24
    20d2:	81 11       	cpse	r24, r1
    20d4:	1e c0       	rjmp	.+60     	; 0x2112 <bno055_set_euler_unit+0x9e>
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	98 2f       	mov	r25, r24
    20da:	9b 7f       	andi	r25, 0xFB	; 251
    20dc:	80 2f       	mov	r24, r16
    20de:	88 0f       	add	r24, r24
    20e0:	88 0f       	add	r24, r24
    20e2:	84 70       	andi	r24, 0x04	; 4
    20e4:	89 2b       	or	r24, r25
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	a0 91 f2 20 	lds	r26, 0x20F2	; 0x8020f2 <p_bno055>
    20ec:	b0 91 f3 20 	lds	r27, 0x20F3	; 0x8020f3 <p_bno055+0x1>
    20f0:	19 96       	adiw	r26, 0x09	; 9
    20f2:	ed 91       	ld	r30, X+
    20f4:	fc 91       	ld	r31, X
    20f6:	1a 97       	sbiw	r26, 0x0a	; 10
    20f8:	21 e0       	ldi	r18, 0x01	; 1
    20fa:	ae 01       	movw	r20, r28
    20fc:	4f 5f       	subi	r20, 0xFF	; 255
    20fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2100:	6b e3       	ldi	r22, 0x3B	; 59
    2102:	18 96       	adiw	r26, 0x08	; 8
    2104:	8c 91       	ld	r24, X
    2106:	19 95       	eicall
    2108:	18 2f       	mov	r17, r24
    210a:	03 c0       	rjmp	.+6      	; 0x2112 <bno055_set_euler_unit+0x9e>
    210c:	1f ef       	ldi	r17, 0xFF	; 255
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <bno055_set_euler_unit+0x9e>
    2110:	1f ef       	ldi	r17, 0xFF	; 255
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	88 23       	and	r24, r24
    2116:	29 f0       	breq	.+10     	; 0x2122 <bno055_set_euler_unit+0xae>
    2118:	f1 de       	rcall	.-542    	; 0x1efc <bno055_set_operation_mode>
    211a:	81 0f       	add	r24, r17
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <bno055_set_euler_unit+0xb0>
    211e:	81 e8       	ldi	r24, 0x81	; 129
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <bno055_set_euler_unit+0xb0>
    2122:	81 2f       	mov	r24, r17
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	08 95       	ret

00002132 <bno055_convert_double_euler_hpr_deg>:
 *
 */

BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_euler_hpr_deg(
struct bno055_euler_double_t *euler_hpr)
{
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	1f 93       	push	r17
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	27 97       	sbiw	r28, 0x07	; 7
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	7c 01       	movw	r14, r24
	/* Variable used to return value of
	communication routine*/
	BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
	struct bno055_euler_t reg_euler = {BNO055_INIT_VALUE,
    2148:	19 82       	std	Y+1, r1	; 0x01
    214a:	1a 82       	std	Y+2, r1	; 0x02
    214c:	1b 82       	std	Y+3, r1	; 0x03
    214e:	1c 82       	std	Y+4, r1	; 0x04
    2150:	1d 82       	std	Y+5, r1	; 0x05
    2152:	1e 82       	std	Y+6, r1	; 0x06
	BNO055_INIT_VALUE, BNO055_INIT_VALUE};
	u8 euler_unit_u8 = BNO055_INIT_VALUE;
    2154:	1f 82       	std	Y+7, r1	; 0x07
	/* Read the current Euler unit and set the
	unit as degree if the unit is in radians */
	com_rslt = bno055_get_euler_unit(&euler_unit_u8);
    2156:	ce 01       	movw	r24, r28
    2158:	07 96       	adiw	r24, 0x07	; 7
    215a:	58 de       	rcall	.-848    	; 0x1e0c <bno055_get_euler_unit>
    215c:	18 2f       	mov	r17, r24
	if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
    215e:	8f 81       	ldd	r24, Y+7	; 0x07
    2160:	88 23       	and	r24, r24
    2162:	19 f0       	breq	.+6      	; 0x216a <bno055_convert_double_euler_hpr_deg+0x38>
		com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	86 df       	rcall	.-244    	; 0x2074 <bno055_set_euler_unit>
    2168:	18 0f       	add	r17, r24
	if (com_rslt == BNO055_SUCCESS) {
    216a:	11 11       	cpse	r17, r1
    216c:	3f c0       	rjmp	.+126    	; 0x21ec <bno055_convert_double_euler_hpr_deg+0xba>
		/* Read Euler raw h data*/
			com_rslt += bno055_read_euler_hrp(&reg_euler);
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	33 dc       	rcall	.-1946   	; 0x19da <bno055_read_euler_hrp>
		if (com_rslt == BNO055_SUCCESS) {
    2174:	81 11       	cpse	r24, r1
    2176:	3c c0       	rjmp	.+120    	; 0x21f0 <bno055_convert_double_euler_hpr_deg+0xbe>
			/* Convert raw Euler hrp to degree*/
			euler_hpr->h =
    2178:	69 81       	ldd	r22, Y+1	; 0x01
    217a:	7a 81       	ldd	r23, Y+2	; 0x02
    217c:	07 2e       	mov	r0, r23
    217e:	00 0c       	add	r0, r0
    2180:	88 0b       	sbc	r24, r24
    2182:	99 0b       	sbc	r25, r25
    2184:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5d e3       	ldi	r21, 0x3D	; 61
    2190:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2194:	f7 01       	movw	r30, r14
    2196:	60 83       	st	Z, r22
    2198:	71 83       	std	Z+1, r23	; 0x01
    219a:	82 83       	std	Z+2, r24	; 0x02
    219c:	93 83       	std	Z+3, r25	; 0x03
			(double)(reg_euler.h/BNO055_EULER_DIV_DEG);
			euler_hpr->p =
    219e:	6d 81       	ldd	r22, Y+5	; 0x05
    21a0:	7e 81       	ldd	r23, Y+6	; 0x06
    21a2:	07 2e       	mov	r0, r23
    21a4:	00 0c       	add	r0, r0
    21a6:	88 0b       	sbc	r24, r24
    21a8:	99 0b       	sbc	r25, r25
    21aa:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e8       	ldi	r20, 0x80	; 128
    21b4:	5d e3       	ldi	r21, 0x3D	; 61
    21b6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    21ba:	f7 01       	movw	r30, r14
    21bc:	60 87       	std	Z+8, r22	; 0x08
    21be:	71 87       	std	Z+9, r23	; 0x09
    21c0:	82 87       	std	Z+10, r24	; 0x0a
    21c2:	93 87       	std	Z+11, r25	; 0x0b
			(double)(reg_euler.p/BNO055_EULER_DIV_DEG);
			euler_hpr->r =
    21c4:	6b 81       	ldd	r22, Y+3	; 0x03
    21c6:	7c 81       	ldd	r23, Y+4	; 0x04
    21c8:	07 2e       	mov	r0, r23
    21ca:	00 0c       	add	r0, r0
    21cc:	88 0b       	sbc	r24, r24
    21ce:	99 0b       	sbc	r25, r25
    21d0:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5d e3       	ldi	r21, 0x3D	; 61
    21dc:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    21e0:	f7 01       	movw	r30, r14
    21e2:	64 83       	std	Z+4, r22	; 0x04
    21e4:	75 83       	std	Z+5, r23	; 0x05
    21e6:	86 83       	std	Z+6, r24	; 0x06
    21e8:	97 83       	std	Z+7, r25	; 0x07
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <bno055_convert_double_euler_hpr_deg+0xc0>
			(double)(reg_euler.r/BNO055_EULER_DIV_DEG);
		} else {
		com_rslt = BNO055_ERROR;
		}
	} else {
	com_rslt = BNO055_ERROR;
    21ec:	1f ef       	ldi	r17, 0xFF	; 255
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <bno055_convert_double_euler_hpr_deg+0xc0>
			euler_hpr->p =
			(double)(reg_euler.p/BNO055_EULER_DIV_DEG);
			euler_hpr->r =
			(double)(reg_euler.r/BNO055_EULER_DIV_DEG);
		} else {
		com_rslt = BNO055_ERROR;
    21f0:	1f ef       	ldi	r17, 0xFF	; 255
		}
	} else {
	com_rslt = BNO055_ERROR;
	}
	return com_rslt;
}
    21f2:	81 2f       	mov	r24, r17
    21f4:	27 96       	adiw	r28, 0x07	; 7
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	1f 91       	pop	r17
    2200:	ff 90       	pop	r15
    2202:	ef 90       	pop	r14
    2204:	08 95       	ret

00002206 <imu_update>:
}

double imu_accel_z()
{
	return bno055_linear_accel.z;
}
    2206:	8e e6       	ldi	r24, 0x6E	; 110
    2208:	91 e2       	ldi	r25, 0x21	; 33
    220a:	a7 dc       	rcall	.-1714   	; 0x1b5a <bno055_convert_double_linear_accel_xyz_msq>
    220c:	8a e7       	ldi	r24, 0x7A	; 122
    220e:	91 e2       	ldi	r25, 0x21	; 33
    2210:	90 df       	rcall	.-224    	; 0x2132 <bno055_convert_double_euler_hpr_deg>
    2212:	87 e8       	ldi	r24, 0x87	; 135
    2214:	91 e2       	ldi	r25, 0x21	; 33
    2216:	38 dd       	rcall	.-1424   	; 0x1c88 <bno055_get_accel_calib_stat>
    2218:	89 e8       	ldi	r24, 0x89	; 137
    221a:	91 e2       	ldi	r25, 0x21	; 33
    221c:	75 dd       	rcall	.-1302   	; 0x1d08 <bno055_get_gyro_calib_stat>
    221e:	86 e8       	ldi	r24, 0x86	; 134
    2220:	91 e2       	ldi	r25, 0x21	; 33
    2222:	f7 dc       	rcall	.-1554   	; 0x1c12 <bno055_get_mag_calib_stat>
    2224:	88 e8       	ldi	r24, 0x88	; 136
    2226:	91 e2       	ldi	r25, 0x21	; 33
    2228:	b3 cd       	rjmp	.-1178   	; 0x1d90 <bno055_get_sys_calib_stat>
    222a:	08 95       	ret

0000222c <imu_roll>:



double imu_roll()
{
	return bno055_euler.r;
    222c:	60 91 7e 21 	lds	r22, 0x217E	; 0x80217e <bno055_euler+0x4>
    2230:	70 91 7f 21 	lds	r23, 0x217F	; 0x80217f <bno055_euler+0x5>
    2234:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <bno055_euler+0x6>
    2238:	90 91 81 21 	lds	r25, 0x2181	; 0x802181 <bno055_euler+0x7>
}
    223c:	08 95       	ret

0000223e <imu_pitch>:

double imu_pitch()
{
	return bno055_euler.p;
    223e:	60 91 82 21 	lds	r22, 0x2182	; 0x802182 <bno055_euler+0x8>
    2242:	70 91 83 21 	lds	r23, 0x2183	; 0x802183 <bno055_euler+0x9>
    2246:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <bno055_euler+0xa>
    224a:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <bno055_euler+0xb>
}
    224e:	08 95       	ret

00002250 <imu_heading>:

double imu_heading()
{
	return bno055_euler.h;
    2250:	60 91 7a 21 	lds	r22, 0x217A	; 0x80217a <bno055_euler>
    2254:	70 91 7b 21 	lds	r23, 0x217B	; 0x80217b <bno055_euler+0x1>
    2258:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <bno055_euler+0x2>
    225c:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <bno055_euler+0x3>
}
    2260:	08 95       	ret

00002262 <cam_switch>:
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
	cam_switch();
}

void cam_switch(void){
	PORTA.OUT ^= PIN3_bm; // Changes A3 from high to low or vice-versa
    2262:	e0 e0       	ldi	r30, 0x00	; 0
    2264:	f6 e0       	ldi	r31, 0x06	; 6
    2266:	94 81       	ldd	r25, Z+4	; 0x04
    2268:	88 e0       	ldi	r24, 0x08	; 8
    226a:	89 27       	eor	r24, r25
    226c:	84 83       	std	Z+4, r24	; 0x04
    226e:	08 95       	ret

00002270 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
    2270:	e0 e0       	ldi	r30, 0x00	; 0
    2272:	f6 e0       	ldi	r31, 0x06	; 6
    2274:	80 81       	ld	r24, Z
    2276:	88 60       	ori	r24, 0x08	; 8
    2278:	80 83       	st	Z, r24
	cam_switch();
    227a:	f3 cf       	rjmp	.-26     	; 0x2262 <cam_switch>
    227c:	08 95       	ret

0000227e <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2288:	62 e0       	ldi	r22, 0x02	; 2
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	ff d2       	rcall	.+1534   	; 0x288c <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
    228e:	c0 e0       	ldi	r28, 0x00	; 0
    2290:	d2 e0       	ldi	r29, 0x02	; 2
    2292:	ff 24       	eor	r15, r15
    2294:	f3 94       	inc	r15
    2296:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    2298:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    229a:	80 e1       	ldi	r24, 0x10	; 16
    229c:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    229e:	85 e0       	ldi	r24, 0x05	; 5
    22a0:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    22a2:	61 e2       	ldi	r22, 0x21	; 33
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	1c d3       	rcall	.+1592   	; 0x28e2 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    22aa:	08 2f       	mov	r16, r24
    22ac:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    22ae:	10 2f       	mov	r17, r16
    22b0:	00 27       	eor	r16, r16
    22b2:	60 e2       	ldi	r22, 0x20	; 32
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	14 d3       	rcall	.+1576   	; 0x28e2 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    22ba:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    22bc:	0c 87       	std	Y+12, r16	; 0x0c
    22be:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
    22c0:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 6	
    22c2:	80 e3       	ldi	r24, 0x30	; 48
    22c4:	89 a3       	std	Y+33, r24	; 0x21
}
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	ff 90       	pop	r15
    22d0:	08 95       	ret

000022d2 <thermistor_read>:

uint16_t thermistor_read(void)
{
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL |= 0x80; // start the conversion
    22d2:	e0 e0       	ldi	r30, 0x00	; 0
    22d4:	f2 e0       	ldi	r31, 0x02	; 2
    22d6:	80 a1       	ldd	r24, Z+32	; 0x20
    22d8:	80 68       	ori	r24, 0x80	; 128
    22da:	80 a3       	std	Z+32, r24	; 0x20
	while(!(THERMISTOR_SERIAL.THERMISTOR_CHANNEL.INTFLAGS)); // wait until the conversion is done
    22dc:	83 a1       	ldd	r24, Z+35	; 0x23
    22de:	88 23       	and	r24, r24
    22e0:	e9 f3       	breq	.-6      	; 0x22dc <thermistor_read+0xa>
	return THERMISTOR_SERIAL.THERMISTOR_CHANNEL.RES; // return the 12-bit result as a uint16_t
    22e2:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    22e6:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    22ea:	08 95       	ret

000022ec <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	27 97       	sbiw	r28, 0x07	; 7
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    22fa:	60 e2       	ldi	r22, 0x20	; 32
    22fc:	84 e0       	ldi	r24, 0x04	; 4
    22fe:	c6 d2       	rcall	.+1420   	; 0x288c <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
    2300:	e0 e6       	ldi	r30, 0x60	; 96
    2302:	f6 e0       	ldi	r31, 0x06	; 6
    2304:	80 81       	ld	r24, Z
    2306:	80 68       	ori	r24, 0x80	; 128
    2308:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    230a:	e6 e0       	ldi	r30, 0x06	; 6
    230c:	f0 e2       	ldi	r31, 0x20	; 32
    230e:	84 81       	ldd	r24, Z+4	; 0x04
    2310:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2312:	85 81       	ldd	r24, Z+5	; 0x05
    2314:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2316:	86 81       	ldd	r24, Z+6	; 0x06
    2318:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	a2 81       	ldd	r26, Z+2	; 0x02
    2320:	b3 81       	ldd	r27, Z+3	; 0x03
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	9a 83       	std	Y+2, r25	; 0x02
    2326:	ab 83       	std	Y+3, r26	; 0x03
    2328:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    232a:	60 e2       	ldi	r22, 0x20	; 32
    232c:	84 e0       	ldi	r24, 0x04	; 4
    232e:	ae d2       	rcall	.+1372   	; 0x288c <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2330:	be 01       	movw	r22, r28
    2332:	6f 5f       	subi	r22, 0xFF	; 255
    2334:	7f 4f       	sbci	r23, 0xFF	; 255
    2336:	80 eb       	ldi	r24, 0xB0	; 176
    2338:	99 e0       	ldi	r25, 0x09	; 9
    233a:	05 da       	rcall	.-3062   	; 0x1746 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
    233c:	27 96       	adiw	r28, 0x07	; 7
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    234a:	61 50       	subi	r22, 0x01	; 1
    234c:	71 09       	sbc	r23, r1
    234e:	81 09       	sbc	r24, r1
    2350:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2352:	61 15       	cp	r22, r1
    2354:	71 05       	cpc	r23, r1
    2356:	81 05       	cpc	r24, r1
    2358:	91 05       	cpc	r25, r1
    235a:	b9 f7       	brne	.-18     	; 0x234a <__portable_avr_delay_cycles+0x2>
    235c:	08 95       	ret

0000235e <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
    235e:	e0 e4       	ldi	r30, 0x40	; 64
    2360:	f6 e0       	ldi	r31, 0x06	; 6
    2362:	94 81       	ldd	r25, Z+4	; 0x04
    2364:	80 e1       	ldi	r24, 0x10	; 16
    2366:	89 27       	eor	r24, r25
    2368:	84 83       	std	Z+4, r24	; 0x04
    236a:	08 95       	ret

0000236c <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    236c:	e0 e4       	ldi	r30, 0x40	; 64
    236e:	f6 e0       	ldi	r31, 0x06	; 6
    2370:	84 81       	ldd	r24, Z+4	; 0x04
    2372:	80 61       	ori	r24, 0x10	; 16
    2374:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
    2376:	f3 df       	rcall	.-26     	; 0x235e <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
    2378:	8e e1       	ldi	r24, 0x1E	; 30
    237a:	b9 d0       	rcall	.+370    	; 0x24ee <spi_write>
	delay_ms(3);
    237c:	60 e8       	ldi	r22, 0x80	; 128
    237e:	7e e3       	ldi	r23, 0x3E	; 62
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    2384:	e1 df       	rcall	.-62     	; 0x2348 <__portable_avr_delay_cycles>
    2386:	eb df       	rcall	.-42     	; 0x235e <flip_ms5607>
	delay_ms(2);
    2388:	6b ea       	ldi	r22, 0xAB	; 171
    238a:	79 e2       	ldi	r23, 0x29	; 41
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	db cf       	rjmp	.-74     	; 0x2348 <__portable_avr_delay_cycles>
    2392:	08 95       	ret

00002394 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
    239a:	e1 df       	rcall	.-62     	; 0x235e <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
    239c:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
    239e:	a7 d0       	rcall	.+334    	; 0x24ee <spi_write>
    23a0:	97 d0       	rcall	.+302    	; 0x24d0 <spi_read>
    23a2:	c8 2f       	mov	r28, r24
    23a4:	d0 e0       	ldi	r29, 0x00	; 0
    23a6:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
    23a8:	cc 27       	eor	r28, r28
    23aa:	92 d0       	rcall	.+292    	; 0x24d0 <spi_read>
    23ac:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
    23ae:	d7 df       	rcall	.-82     	; 0x235e <flip_ms5607>
    23b0:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <ms5607_convert_d1>:
    23b8:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
    23ba:	df 93       	push	r29
    23bc:	00 d0       	rcall	.+0      	; 0x23be <ms5607_convert_d1+0x6>
    23be:	1f 92       	push	r1
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    23c4:	19 82       	std	Y+1, r1	; 0x01
    23c6:	1a 82       	std	Y+2, r1	; 0x02
    23c8:	1b 82       	std	Y+3, r1	; 0x03
    23ca:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
    23cc:	c8 df       	rcall	.-112    	; 0x235e <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
    23ce:	88 e4       	ldi	r24, 0x48	; 72
    23d0:	8e d0       	rcall	.+284    	; 0x24ee <spi_write>
	delay_ms(10);
    23d2:	66 e5       	ldi	r22, 0x56	; 86
    23d4:	70 ed       	ldi	r23, 0xD0	; 208
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    23da:	b6 df       	rcall	.-148    	; 0x2348 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    23dc:	c0 df       	rcall	.-128    	; 0x235e <flip_ms5607>
    23de:	bf df       	rcall	.-130    	; 0x235e <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	85 d0       	rcall	.+266    	; 0x24ee <spi_write>
    23e4:	75 d0       	rcall	.+234    	; 0x24d0 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	a0 e0       	ldi	r26, 0x00	; 0
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	dc 01       	movw	r26, r24
    23ee:	99 27       	eor	r25, r25
    23f0:	88 27       	eor	r24, r24
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	ab 83       	std	Y+3, r26	; 0x03
    23f8:	bc 83       	std	Y+4, r27	; 0x04
    23fa:	6a d0       	rcall	.+212    	; 0x24d0 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    23fc:	49 81       	ldd	r20, Y+1	; 0x01
    23fe:	5a 81       	ldd	r21, Y+2	; 0x02
    2400:	6b 81       	ldd	r22, Y+3	; 0x03
    2402:	7c 81       	ldd	r23, Y+4	; 0x04
    2404:	58 2b       	or	r21, r24
    2406:	49 83       	std	Y+1, r20	; 0x01
    2408:	5a 83       	std	Y+2, r21	; 0x02
    240a:	6b 83       	std	Y+3, r22	; 0x03
    240c:	7c 83       	std	Y+4, r23	; 0x04
    240e:	60 d0       	rcall	.+192    	; 0x24d0 <spi_read>
	rx_data |= spi_read();
    2410:	49 81       	ldd	r20, Y+1	; 0x01
    2412:	5a 81       	ldd	r21, Y+2	; 0x02
    2414:	6b 81       	ldd	r22, Y+3	; 0x03
    2416:	7c 81       	ldd	r23, Y+4	; 0x04
    2418:	48 2b       	or	r20, r24
    241a:	49 83       	std	Y+1, r20	; 0x01
    241c:	5a 83       	std	Y+2, r21	; 0x02
    241e:	6b 83       	std	Y+3, r22	; 0x03
    2420:	7c 83       	std	Y+4, r23	; 0x04
    2422:	9d df       	rcall	.-198    	; 0x235e <flip_ms5607>
	flip_ms5607();
    2424:	69 81       	ldd	r22, Y+1	; 0x01
    2426:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	24 96       	adiw	r28, 0x04	; 4
    242e:	cd bf       	out	0x3d, r28	; 61
}
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	08 95       	ret

00002438 <ms5607_convert_d2>:
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
    243c:	00 d0       	rcall	.+0      	; 0x243e <ms5607_convert_d2+0x6>
    243e:	1f 92       	push	r1
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    2444:	19 82       	std	Y+1, r1	; 0x01
    2446:	1a 82       	std	Y+2, r1	; 0x02
    2448:	1b 82       	std	Y+3, r1	; 0x03
    244a:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
    244c:	88 df       	rcall	.-240    	; 0x235e <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
    244e:	88 e5       	ldi	r24, 0x58	; 88
    2450:	4e d0       	rcall	.+156    	; 0x24ee <spi_write>
	delay_ms(10);
    2452:	66 e5       	ldi	r22, 0x56	; 86
    2454:	70 ed       	ldi	r23, 0xD0	; 208
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    245a:	76 df       	rcall	.-276    	; 0x2348 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    245c:	80 df       	rcall	.-256    	; 0x235e <flip_ms5607>
    245e:	7f df       	rcall	.-258    	; 0x235e <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	45 d0       	rcall	.+138    	; 0x24ee <spi_write>
    2464:	35 d0       	rcall	.+106    	; 0x24d0 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a0 e0       	ldi	r26, 0x00	; 0
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	dc 01       	movw	r26, r24
    246e:	99 27       	eor	r25, r25
    2470:	88 27       	eor	r24, r24
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	ab 83       	std	Y+3, r26	; 0x03
    2478:	bc 83       	std	Y+4, r27	; 0x04
    247a:	2a d0       	rcall	.+84     	; 0x24d0 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    247c:	49 81       	ldd	r20, Y+1	; 0x01
    247e:	5a 81       	ldd	r21, Y+2	; 0x02
    2480:	6b 81       	ldd	r22, Y+3	; 0x03
    2482:	7c 81       	ldd	r23, Y+4	; 0x04
    2484:	58 2b       	or	r21, r24
    2486:	49 83       	std	Y+1, r20	; 0x01
    2488:	5a 83       	std	Y+2, r21	; 0x02
    248a:	6b 83       	std	Y+3, r22	; 0x03
    248c:	7c 83       	std	Y+4, r23	; 0x04
    248e:	20 d0       	rcall	.+64     	; 0x24d0 <spi_read>
	rx_data |= spi_read();
    2490:	49 81       	ldd	r20, Y+1	; 0x01
    2492:	5a 81       	ldd	r21, Y+2	; 0x02
    2494:	6b 81       	ldd	r22, Y+3	; 0x03
    2496:	7c 81       	ldd	r23, Y+4	; 0x04
    2498:	48 2b       	or	r20, r24
    249a:	49 83       	std	Y+1, r20	; 0x01
    249c:	5a 83       	std	Y+2, r21	; 0x02
    249e:	6b 83       	std	Y+3, r22	; 0x03
    24a0:	7c 83       	std	Y+4, r23	; 0x04
    24a2:	5d df       	rcall	.-326    	; 0x235e <flip_ms5607>
	flip_ms5607();
    24a4:	69 81       	ldd	r22, Y+1	; 0x01
    24a6:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	9c 81       	ldd	r25, Y+4	; 0x04
    24ac:	24 96       	adiw	r28, 0x04	; 4
    24ae:	cd bf       	out	0x3d, r28	; 61
}
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	08 95       	ret

000024b8 <spi_init>:
    24b8:	e0 e4       	ldi	r30, 0x40	; 64
    24ba:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x50; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
    24bc:	80 81       	ld	r24, Z
    24be:	80 6b       	ori	r24, 0xB0	; 176
    24c0:	80 83       	st	Z, r24
    24c2:	68 e0       	ldi	r22, 0x08	; 8
    24c4:	83 e0       	ldi	r24, 0x03	; 3
    24c6:	e2 d1       	rcall	.+964    	; 0x288c <sysclk_enable_module>
    24c8:	80 e5       	ldi	r24, 0x50	; 80
    24ca:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    24ce:	08 95       	ret

000024d0 <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
    24d0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    24d2:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
    24d4:	8f ef       	ldi	r24, 0xFF	; 255
    24d6:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    24da:	e0 ec       	ldi	r30, 0xC0	; 192
    24dc:	f8 e0       	ldi	r31, 0x08	; 8
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	88 23       	and	r24, r24
    24e2:	ec f7       	brge	.-6      	; 0x24de <spi_read+0xe>
	sei();
    24e4:	78 94       	sei
	SREG=oldInterruptState;
    24e6:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
    24e8:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    24ec:	08 95       	ret

000024ee <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
    24ee:	9f b7       	in	r25, 0x3f	; 63
	cli();
    24f0:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
    24f2:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
    24f6:	e0 ec       	ldi	r30, 0xC0	; 192
    24f8:	f8 e0       	ldi	r31, 0x08	; 8
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	88 23       	and	r24, r24
    24fe:	ec f7       	brge	.-6      	; 0x24fa <spi_write+0xc>
	sei();
    2500:	78 94       	sei
	SREG=oldInterruptState;
    2502:	9f bf       	out	0x3f, r25	; 63
    2504:	08 95       	ret

00002506 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    250c:	03 d8       	rcall	.-4090   	; 0x1514 <usart_getchar>
    250e:	88 83       	st	Y, r24
}
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	08 95       	ret

00002516 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    2516:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <usart_putchar>
}
    251a:	08 95       	ret

0000251c <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
    251c:	cf 93       	push	r28
    251e:	df 93       	push	r29
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	27 97       	sbiw	r28, 0x07	; 7
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    252a:	60 e1       	ldi	r22, 0x10	; 16
    252c:	85 e0       	ldi	r24, 0x05	; 5
    252e:	ae d1       	rcall	.+860    	; 0x288c <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    2530:	e0 e8       	ldi	r30, 0x80	; 128
    2532:	f6 e0       	ldi	r31, 0x06	; 6
    2534:	80 81       	ld	r24, Z
    2536:	88 60       	ori	r24, 0x08	; 8
    2538:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    253a:	80 ea       	ldi	r24, 0xA0	; 160
    253c:	9a e0       	ldi	r25, 0x0A	; 10
    253e:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <stdio_base>
    2542:	90 93 5c 21 	sts	0x215C, r25	; 0x80215c <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2546:	8b e8       	ldi	r24, 0x8B	; 139
    2548:	92 e1       	ldi	r25, 0x12	; 18
    254a:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <ptr_put>
    254e:	90 93 5a 21 	sts	0x215A, r25	; 0x80215a <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2552:	83 e8       	ldi	r24, 0x83	; 131
    2554:	92 e1       	ldi	r25, 0x12	; 18
    2556:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <ptr_get>
    255a:	90 93 58 21 	sts	0x2158, r25	; 0x802158 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    255e:	ed e0       	ldi	r30, 0x0D	; 13
    2560:	f0 e2       	ldi	r31, 0x20	; 32
    2562:	84 81       	ldd	r24, Z+4	; 0x04
    2564:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2566:	85 81       	ldd	r24, Z+5	; 0x05
    2568:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    256a:	86 81       	ldd	r24, Z+6	; 0x06
    256c:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	a2 81       	ldd	r26, Z+2	; 0x02
    2574:	b3 81       	ldd	r27, Z+3	; 0x03
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	ab 83       	std	Y+3, r26	; 0x03
    257c:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    257e:	60 e1       	ldi	r22, 0x10	; 16
    2580:	85 e0       	ldi	r24, 0x05	; 5
    2582:	84 d1       	rcall	.+776    	; 0x288c <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2584:	be 01       	movw	r22, r28
    2586:	6f 5f       	subi	r22, 0xFF	; 255
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	80 ea       	ldi	r24, 0xA0	; 160
    258c:	9a e0       	ldi	r25, 0x0A	; 10
    258e:	db d8       	rcall	.-3658   	; 0x1746 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    2590:	6f e7       	ldi	r22, 0x7F	; 127
    2592:	71 e0       	ldi	r23, 0x01	; 1
    2594:	88 e9       	ldi	r24, 0x98	; 152
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
    259c:	27 96       	adiw	r28, 0x07	; 7
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	08 95       	ret

000025a8 <voltage_init>:
#include "voltage.h"
#include <asf.h>


void voltage_init(void)
{
    25a8:	ff 92       	push	r15
    25aa:	0f 93       	push	r16
    25ac:	1f 93       	push	r17
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    25b2:	62 e0       	ldi	r22, 0x02	; 2
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	6a d1       	rcall	.+724    	; 0x288c <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&VOLTAGE_SERIAL);
	VOLTAGE_SERIAL.CTRLA = 0x01; // enable the ADC
    25b8:	c0 e0       	ldi	r28, 0x00	; 0
    25ba:	d2 e0       	ldi	r29, 0x02	; 2
    25bc:	ff 24       	eor	r15, r15
    25be:	f3 94       	inc	r15
    25c0:	f8 82       	st	Y, r15
	VOLTAGE_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    25c2:	19 82       	std	Y+1, r1	; 0x01
	VOLTAGE_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    25c4:	80 e1       	ldi	r24, 0x10	; 16
    25c6:	8a 83       	std	Y+2, r24	; 0x02
	VOLTAGE_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    25c8:	85 e0       	ldi	r24, 0x05	; 5
    25ca:	8c 83       	std	Y+4, r24	; 0x04
    25cc:	61 e2       	ldi	r22, 0x21	; 33
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	82 e0       	ldi	r24, 0x02	; 2
    25d2:	87 d1       	rcall	.+782    	; 0x28e2 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    25d4:	08 2f       	mov	r16, r24
    25d6:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    25d8:	10 2f       	mov	r17, r16
    25da:	00 27       	eor	r16, r16
    25dc:	60 e2       	ldi	r22, 0x20	; 32
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	82 e0       	ldi	r24, 0x02	; 2
    25e2:	7f d1       	rcall	.+766    	; 0x28e2 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    25e4:	08 2b       	or	r16, r24
	VOLTAGE_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    25e6:	0c 87       	std	Y+12, r16	; 0x0c
    25e8:	1d 87       	std	Y+13, r17	; 0x0d
	
	VOLTAGE_CHANNEL.CTRL = 0x01; // single ended input
    25ea:	f8 a6       	std	Y+40, r15	; 0x28
	VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
    25ec:	88 e3       	ldi	r24, 0x38	; 56
    25ee:	89 a7       	std	Y+41, r24	; 0x29
}
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	ff 90       	pop	r15
    25fa:	08 95       	ret

000025fc <voltage_read>:

uint16_t voltage_read(void)
{
	VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
    25fc:	e0 e0       	ldi	r30, 0x00	; 0
    25fe:	f2 e0       	ldi	r31, 0x02	; 2
    2600:	80 a5       	ldd	r24, Z+40	; 0x28
    2602:	80 68       	ori	r24, 0x80	; 128
    2604:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
    2606:	83 a5       	ldd	r24, Z+43	; 0x2b
    2608:	88 23       	and	r24, r24
    260a:	e9 f3       	breq	.-6      	; 0x2606 <voltage_read+0xa>
	return VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
    260c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    2610:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    2614:	08 95       	ret

00002616 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	fc 01       	movw	r30, r24
    261c:	41 15       	cp	r20, r1
    261e:	51 05       	cpc	r21, r1
    2620:	b1 f1       	breq	.+108    	; 0x268e <rb16_write+0x78>
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	db 01       	movw	r26, r22
    262e:	a8 0f       	add	r26, r24
    2630:	b9 1f       	adc	r27, r25
    2632:	8d 91       	ld	r24, X+
    2634:	9c 91       	ld	r25, X
    2636:	a2 81       	ldd	r26, Z+2	; 0x02
    2638:	b3 81       	ldd	r27, Z+3	; 0x03
    263a:	aa 0f       	add	r26, r26
    263c:	bb 1f       	adc	r27, r27
    263e:	c6 81       	ldd	r28, Z+6	; 0x06
    2640:	d7 81       	ldd	r29, Z+7	; 0x07
    2642:	ac 0f       	add	r26, r28
    2644:	bd 1f       	adc	r27, r29
    2646:	8d 93       	st	X+, r24
    2648:	9c 93       	st	X, r25
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	82 83       	std	Z+2, r24	; 0x02
    2652:	93 83       	std	Z+3, r25	; 0x03
    2654:	a0 81       	ld	r26, Z
    2656:	b1 81       	ldd	r27, Z+1	; 0x01
    2658:	8a 17       	cp	r24, r26
    265a:	9b 07       	cpc	r25, r27
    265c:	11 f4       	brne	.+4      	; 0x2662 <rb16_write+0x4c>
    265e:	12 82       	std	Z+2, r1	; 0x02
    2660:	13 82       	std	Z+3, r1	; 0x03
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	c4 81       	ldd	r28, Z+4	; 0x04
    2668:	d5 81       	ldd	r29, Z+5	; 0x05
    266a:	8c 17       	cp	r24, r28
    266c:	9d 07       	cpc	r25, r29
    266e:	49 f4       	brne	.+18     	; 0x2682 <rb16_write+0x6c>
    2670:	01 96       	adiw	r24, 0x01	; 1
    2672:	a8 17       	cp	r26, r24
    2674:	b9 07       	cpc	r27, r25
    2676:	19 f0       	breq	.+6      	; 0x267e <rb16_write+0x68>
    2678:	84 83       	std	Z+4, r24	; 0x04
    267a:	95 83       	std	Z+5, r25	; 0x05
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <rb16_write+0x6c>
    267e:	14 82       	std	Z+4, r1	; 0x04
    2680:	15 82       	std	Z+5, r1	; 0x05
    2682:	2f 5f       	subi	r18, 0xFF	; 255
    2684:	82 2f       	mov	r24, r18
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	84 17       	cp	r24, r20
    268a:	95 07       	cpc	r25, r21
    268c:	68 f2       	brcs	.-102    	; 0x2628 <rb16_write+0x12>
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <rb16_init>:
    2694:	fc 01       	movw	r30, r24
    2696:	12 82       	std	Z+2, r1	; 0x02
    2698:	13 82       	std	Z+3, r1	; 0x03
    269a:	14 82       	std	Z+4, r1	; 0x04
    269c:	15 82       	std	Z+5, r1	; 0x05
    269e:	66 83       	std	Z+6, r22	; 0x06
    26a0:	77 83       	std	Z+7, r23	; 0x07
    26a2:	40 83       	st	Z, r20
    26a4:	51 83       	std	Z+1, r21	; 0x01
    26a6:	08 95       	ret

000026a8 <rb16_get_nth>:
    26a8:	dc 01       	movw	r26, r24
    26aa:	12 96       	adiw	r26, 0x02	; 2
    26ac:	ed 91       	ld	r30, X+
    26ae:	fc 91       	ld	r31, X
    26b0:	13 97       	sbiw	r26, 0x03	; 3
    26b2:	cb 01       	movw	r24, r22
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	e8 17       	cp	r30, r24
    26b8:	f9 07       	cpc	r31, r25
    26ba:	78 f0       	brcs	.+30     	; 0x26da <rb16_get_nth+0x32>
    26bc:	e1 50       	subi	r30, 0x01	; 1
    26be:	f0 48       	sbci	r31, 0x80	; 128
    26c0:	e6 1b       	sub	r30, r22
    26c2:	f7 0b       	sbc	r31, r23
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	16 96       	adiw	r26, 0x06	; 6
    26ca:	8d 91       	ld	r24, X+
    26cc:	9c 91       	ld	r25, X
    26ce:	17 97       	sbiw	r26, 0x07	; 7
    26d0:	e8 0f       	add	r30, r24
    26d2:	f9 1f       	adc	r31, r25
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	08 95       	ret
    26da:	2d 91       	ld	r18, X+
    26dc:	3c 91       	ld	r19, X
    26de:	11 97       	sbiw	r26, 0x01	; 1
    26e0:	e2 0f       	add	r30, r18
    26e2:	f3 1f       	adc	r31, r19
    26e4:	e1 50       	subi	r30, 0x01	; 1
    26e6:	f0 48       	sbci	r31, 0x80	; 128
    26e8:	e6 1b       	sub	r30, r22
    26ea:	f7 0b       	sbc	r31, r23
    26ec:	ee 0f       	add	r30, r30
    26ee:	ff 1f       	adc	r31, r31
    26f0:	16 96       	adiw	r26, 0x06	; 6
    26f2:	8d 91       	ld	r24, X+
    26f4:	9c 91       	ld	r25, X
    26f6:	17 97       	sbiw	r26, 0x07	; 7
    26f8:	e8 0f       	add	r30, r24
    26fa:	f9 1f       	adc	r31, r25
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	08 95       	ret

00002702 <rb32_write>:
    2702:	cf 92       	push	r12
    2704:	df 92       	push	r13
    2706:	ef 92       	push	r14
    2708:	ff 92       	push	r15
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	fc 01       	movw	r30, r24
    2710:	41 15       	cp	r20, r1
    2712:	51 05       	cpc	r21, r1
    2714:	09 f4       	brne	.+2      	; 0x2718 <rb32_write+0x16>
    2716:	3f c0       	rjmp	.+126    	; 0x2796 <rb32_write+0x94>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	db 01       	movw	r26, r22
    2728:	a8 0f       	add	r26, r24
    272a:	b9 1f       	adc	r27, r25
    272c:	cd 90       	ld	r12, X+
    272e:	dd 90       	ld	r13, X+
    2730:	ed 90       	ld	r14, X+
    2732:	fc 90       	ld	r15, X
    2734:	a2 81       	ldd	r26, Z+2	; 0x02
    2736:	b3 81       	ldd	r27, Z+3	; 0x03
    2738:	aa 0f       	add	r26, r26
    273a:	bb 1f       	adc	r27, r27
    273c:	aa 0f       	add	r26, r26
    273e:	bb 1f       	adc	r27, r27
    2740:	86 81       	ldd	r24, Z+6	; 0x06
    2742:	97 81       	ldd	r25, Z+7	; 0x07
    2744:	a8 0f       	add	r26, r24
    2746:	b9 1f       	adc	r27, r25
    2748:	cd 92       	st	X+, r12
    274a:	dd 92       	st	X+, r13
    274c:	ed 92       	st	X+, r14
    274e:	fc 92       	st	X, r15
    2750:	13 97       	sbiw	r26, 0x03	; 3
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	82 83       	std	Z+2, r24	; 0x02
    275a:	93 83       	std	Z+3, r25	; 0x03
    275c:	a0 81       	ld	r26, Z
    275e:	b1 81       	ldd	r27, Z+1	; 0x01
    2760:	8a 17       	cp	r24, r26
    2762:	9b 07       	cpc	r25, r27
    2764:	11 f4       	brne	.+4      	; 0x276a <rb32_write+0x68>
    2766:	12 82       	std	Z+2, r1	; 0x02
    2768:	13 82       	std	Z+3, r1	; 0x03
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	c4 81       	ldd	r28, Z+4	; 0x04
    2770:	d5 81       	ldd	r29, Z+5	; 0x05
    2772:	8c 17       	cp	r24, r28
    2774:	9d 07       	cpc	r25, r29
    2776:	49 f4       	brne	.+18     	; 0x278a <rb32_write+0x88>
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	a8 17       	cp	r26, r24
    277c:	b9 07       	cpc	r27, r25
    277e:	19 f0       	breq	.+6      	; 0x2786 <rb32_write+0x84>
    2780:	84 83       	std	Z+4, r24	; 0x04
    2782:	95 83       	std	Z+5, r25	; 0x05
    2784:	02 c0       	rjmp	.+4      	; 0x278a <rb32_write+0x88>
    2786:	14 82       	std	Z+4, r1	; 0x04
    2788:	15 82       	std	Z+5, r1	; 0x05
    278a:	2f 5f       	subi	r18, 0xFF	; 255
    278c:	82 2f       	mov	r24, r18
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	84 17       	cp	r24, r20
    2792:	95 07       	cpc	r25, r21
    2794:	20 f2       	brcs	.-120    	; 0x271e <rb32_write+0x1c>
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	ff 90       	pop	r15
    279c:	ef 90       	pop	r14
    279e:	df 90       	pop	r13
    27a0:	cf 90       	pop	r12
    27a2:	08 95       	ret

000027a4 <rb32_init>:
    27a4:	fc 01       	movw	r30, r24
    27a6:	12 82       	std	Z+2, r1	; 0x02
    27a8:	13 82       	std	Z+3, r1	; 0x03
    27aa:	14 82       	std	Z+4, r1	; 0x04
    27ac:	15 82       	std	Z+5, r1	; 0x05
    27ae:	66 83       	std	Z+6, r22	; 0x06
    27b0:	77 83       	std	Z+7, r23	; 0x07
    27b2:	40 83       	st	Z, r20
    27b4:	51 83       	std	Z+1, r21	; 0x01
    27b6:	08 95       	ret

000027b8 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    27b8:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    27ba:	12 96       	adiw	r26, 0x02	; 2
    27bc:	ed 91       	ld	r30, X+
    27be:	fc 91       	ld	r31, X
    27c0:	13 97       	sbiw	r26, 0x03	; 3
    27c2:	cb 01       	movw	r24, r22
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	e8 17       	cp	r30, r24
    27c8:	f9 07       	cpc	r31, r25
    27ca:	98 f0       	brcs	.+38     	; 0x27f2 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    27cc:	e1 50       	subi	r30, 0x01	; 1
    27ce:	f0 4c       	sbci	r31, 0xC0	; 192
    27d0:	e6 1b       	sub	r30, r22
    27d2:	f7 0b       	sbc	r31, r23
    27d4:	ee 0f       	add	r30, r30
    27d6:	ff 1f       	adc	r31, r31
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	16 96       	adiw	r26, 0x06	; 6
    27de:	8d 91       	ld	r24, X+
    27e0:	9c 91       	ld	r25, X
    27e2:	17 97       	sbiw	r26, 0x07	; 7
    27e4:	e8 0f       	add	r30, r24
    27e6:	f9 1f       	adc	r31, r25
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    27f2:	2d 91       	ld	r18, X+
    27f4:	3c 91       	ld	r19, X
    27f6:	11 97       	sbiw	r26, 0x01	; 1
    27f8:	e2 0f       	add	r30, r18
    27fa:	f3 1f       	adc	r31, r19
    27fc:	e1 50       	subi	r30, 0x01	; 1
    27fe:	f0 4c       	sbci	r31, 0xC0	; 192
    2800:	e6 1b       	sub	r30, r22
    2802:	f7 0b       	sbc	r31, r23
    2804:	ee 0f       	add	r30, r30
    2806:	ff 1f       	adc	r31, r31
    2808:	ee 0f       	add	r30, r30
    280a:	ff 1f       	adc	r31, r31
    280c:	16 96       	adiw	r26, 0x06	; 6
    280e:	8d 91       	ld	r24, X+
    2810:	9c 91       	ld	r25, X
    2812:	17 97       	sbiw	r26, 0x07	; 7
    2814:	e8 0f       	add	r30, r24
    2816:	f9 1f       	adc	r31, r25
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
}
    2820:	08 95       	ret

00002822 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	1f 92       	push	r1
    2828:	1f 92       	push	r1
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    282e:	8f ef       	ldi	r24, 0xFF	; 255
    2830:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2834:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2838:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    283c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2840:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2844:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2848:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    284c:	8f b7       	in	r24, 0x3f	; 63
    284e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2850:	f8 94       	cli
	return flags;
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2854:	e0 e5       	ldi	r30, 0x50	; 80
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	82 60       	ori	r24, 0x02	; 2
    285c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    285e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2860:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2862:	81 ff       	sbrs	r24, 1
    2864:	fd cf       	rjmp	.-6      	; 0x2860 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2866:	61 e0       	ldi	r22, 0x01	; 1
    2868:	80 e4       	ldi	r24, 0x40	; 64
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	44 d0       	rcall	.+136    	; 0x28f6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    286e:	8f b7       	in	r24, 0x3f	; 63
    2870:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2872:	f8 94       	cli
	return flags;
    2874:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2876:	e0 e5       	ldi	r30, 0x50	; 80
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	8e 7f       	andi	r24, 0xFE	; 254
    287e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2880:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	08 95       	ret

0000288c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	1f 92       	push	r1
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2896:	9f b7       	in	r25, 0x3f	; 63
    2898:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    289a:	f8 94       	cli
	return flags;
    289c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    289e:	e8 2f       	mov	r30, r24
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	e0 59       	subi	r30, 0x90	; 144
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	60 95       	com	r22
    28a8:	80 81       	ld	r24, Z
    28aa:	68 23       	and	r22, r24
    28ac:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28ae:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    28b0:	0f 90       	pop	r0
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	08 95       	ret

000028b8 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	1f 92       	push	r1
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    28c2:	9f b7       	in	r25, 0x3f	; 63
    28c4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    28c6:	f8 94       	cli
	return flags;
    28c8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    28ca:	e8 2f       	mov	r30, r24
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	e0 59       	subi	r30, 0x90	; 144
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	68 2b       	or	r22, r24
    28d6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28d8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    28da:	0f 90       	pop	r0
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	08 95       	ret

000028e2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    28e2:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    28e6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    28e8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    28ea:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    28ee:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    28f0:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    28f4:	08 95       	ret

000028f6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    28f6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    28f8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    28fa:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    28fc:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    28fe:	60 83       	st	Z, r22
	ret                             // Return to caller
    2900:	08 95       	ret

00002902 <__portable_avr_delay_cycles>:
	ac_enable(&ACA, 0);

}

void release(void){
	servo_release();
    2902:	04 c0       	rjmp	.+8      	; 0x290c <__portable_avr_delay_cycles+0xa>
    2904:	61 50       	subi	r22, 0x01	; 1
    2906:	71 09       	sbc	r23, r1
    2908:	81 09       	sbc	r24, r1
    290a:	91 09       	sbc	r25, r1
    290c:	61 15       	cp	r22, r1
    290e:	71 05       	cpc	r23, r1
    2910:	81 05       	cpc	r24, r1
    2912:	91 05       	cpc	r25, r1
    2914:	b9 f7       	brne	.-18     	; 0x2904 <__portable_avr_delay_cycles+0x2>
    2916:	08 95       	ret

00002918 <hall_sensor_measure>:
    2918:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <ticks_per_sec>
    291c:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <ticks_per_sec+0x1>
    2920:	01 96       	adiw	r24, 0x01	; 1
    2922:	80 93 36 21 	sts	0x2136, r24	; 0x802136 <ticks_per_sec>
    2926:	90 93 37 21 	sts	0x2137, r25	; 0x802137 <ticks_per_sec+0x1>
    292a:	08 95       	ret

0000292c <pressure_init>:
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	1d dd       	rcall	.-1478   	; 0x236c <ms5607_init>
    2932:	82 ea       	ldi	r24, 0xA2	; 162
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	2e dd       	rcall	.-1444   	; 0x2394 <ms5607_read>
    2938:	c1 e4       	ldi	r28, 0x41	; 65
    293a:	d1 e2       	ldi	r29, 0x21	; 33
    293c:	88 83       	st	Y, r24
    293e:	99 83       	std	Y+1, r25	; 0x01
    2940:	84 ea       	ldi	r24, 0xA4	; 164
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	27 dd       	rcall	.-1458   	; 0x2394 <ms5607_read>
    2946:	8a 83       	std	Y+2, r24	; 0x02
    2948:	9b 83       	std	Y+3, r25	; 0x03
    294a:	86 ea       	ldi	r24, 0xA6	; 166
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	22 dd       	rcall	.-1468   	; 0x2394 <ms5607_read>
    2950:	8c 83       	std	Y+4, r24	; 0x04
    2952:	9d 83       	std	Y+5, r25	; 0x05
    2954:	88 ea       	ldi	r24, 0xA8	; 168
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	1d dd       	rcall	.-1478   	; 0x2394 <ms5607_read>
    295a:	8e 83       	std	Y+6, r24	; 0x06
    295c:	9f 83       	std	Y+7, r25	; 0x07
    295e:	8a ea       	ldi	r24, 0xAA	; 170
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	18 dd       	rcall	.-1488   	; 0x2394 <ms5607_read>
    2964:	88 87       	std	Y+8, r24	; 0x08
    2966:	99 87       	std	Y+9, r25	; 0x09
    2968:	8c ea       	ldi	r24, 0xAC	; 172
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	13 dd       	rcall	.-1498   	; 0x2394 <ms5607_read>
    296e:	8a 87       	std	Y+10, r24	; 0x0a
    2970:	9b 87       	std	Y+11, r25	; 0x0b
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	08 95       	ret

00002978 <gps_init>:
    2978:	b9 dc       	rcall	.-1678   	; 0x22ec <gps_uart_init>
    297a:	6b ea       	ldi	r22, 0xAB	; 171
    297c:	79 e2       	ldi	r23, 0x29	; 41
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	bf df       	rcall	.-130    	; 0x2902 <__portable_avr_delay_cycles>
    2984:	80 e3       	ldi	r24, 0x30	; 48
    2986:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    298a:	08 95       	ret

0000298c <hall_sensor_init>:
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	00 d0       	rcall	.+0      	; 0x2992 <hall_sensor_init+0x6>
    2992:	1f 92       	push	r1
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	84 e0       	ldi	r24, 0x04	; 4
    299a:	fe 01       	movw	r30, r28
    299c:	31 96       	adiw	r30, 0x01	; 1
    299e:	df 01       	movw	r26, r30
    29a0:	98 2f       	mov	r25, r24
    29a2:	1d 92       	st	X+, r1
    29a4:	9a 95       	dec	r25
    29a6:	e9 f7       	brne	.-6      	; 0x29a2 <hall_sensor_init+0x16>
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	8d e2       	ldi	r24, 0x2D	; 45
    29ac:	8b 83       	std	Y+3, r24	; 0x03
    29ae:	8f e2       	ldi	r24, 0x2F	; 47
    29b0:	8a 83       	std	Y+2, r24	; 0x02
    29b2:	6c e8       	ldi	r22, 0x8C	; 140
    29b4:	74 e1       	ldi	r23, 0x14	; 20
    29b6:	80 e8       	ldi	r24, 0x80	; 128
    29b8:	93 e0       	ldi	r25, 0x03	; 3
    29ba:	0e 94 13 03 	call	0x626	; 0x626 <ac_set_interrupt_callback>
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	98 2f       	mov	r25, r24
    29c2:	90 6c       	ori	r25, 0xC0	; 192
    29c4:	99 83       	std	Y+1, r25	; 0x01
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	29 2f       	mov	r18, r25
    29ca:	20 73       	andi	r18, 0x30	; 48
    29cc:	21 f0       	breq	.+8      	; 0x29d6 <hall_sensor_init+0x4a>
    29ce:	9c 7f       	andi	r25, 0xFC	; 252
    29d0:	92 60       	ori	r25, 0x02	; 2
    29d2:	9c 83       	std	Y+4, r25	; 0x04
    29d4:	03 c0       	rjmp	.+6      	; 0x29dc <hall_sensor_init+0x50>
    29d6:	8f 70       	andi	r24, 0x0F	; 15
    29d8:	80 6e       	ori	r24, 0xE0	; 224
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	ae 01       	movw	r20, r28
    29de:	4f 5f       	subi	r20, 0xFF	; 255
    29e0:	5f 4f       	sbci	r21, 0xFF	; 255
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	80 e8       	ldi	r24, 0x80	; 128
    29e6:	93 e0       	ldi	r25, 0x03	; 3
    29e8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ac_write_config>
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	80 e8       	ldi	r24, 0x80	; 128
    29f0:	93 e0       	ldi	r25, 0x03	; 3
    29f2:	0e 94 cb 02 	call	0x596	; 0x596 <ac_enable>
    29f6:	24 96       	adiw	r28, 0x04	; 4
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	08 95       	ret

00002a02 <get_pressure>:
    2a02:	4f 92       	push	r4
    2a04:	5f 92       	push	r5
    2a06:	6f 92       	push	r6
    2a08:	7f 92       	push	r7
    2a0a:	8f 92       	push	r8
    2a0c:	9f 92       	push	r9
    2a0e:	af 92       	push	r10
    2a10:	bf 92       	push	r11
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	cc dc       	rcall	.-1640   	; 0x23b8 <ms5607_convert_d1>
    2a20:	6b 01       	movw	r12, r22
    2a22:	7c 01       	movw	r14, r24
    2a24:	09 dd       	rcall	.-1518   	; 0x2438 <ms5607_convert_d2>
    2a26:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    2a2a:	4b 01       	movw	r8, r22
    2a2c:	5c 01       	movw	r10, r24
    2a2e:	c1 e4       	ldi	r28, 0x41	; 65
    2a30:	d1 e2       	ldi	r29, 0x21	; 33
    2a32:	68 85       	ldd	r22, Y+8	; 0x08
    2a34:	79 85       	ldd	r23, Y+9	; 0x09
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e8       	ldi	r20, 0x80	; 128
    2a44:	53 e4       	ldi	r21, 0x43	; 67
    2a46:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2a4a:	9b 01       	movw	r18, r22
    2a4c:	ac 01       	movw	r20, r24
    2a4e:	c5 01       	movw	r24, r10
    2a50:	b4 01       	movw	r22, r8
    2a52:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    2a56:	4b 01       	movw	r8, r22
    2a58:	5c 01       	movw	r10, r24
    2a5a:	6c 81       	ldd	r22, Y+4	; 0x04
    2a5c:	7d 81       	ldd	r23, Y+5	; 0x05
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    2a66:	a5 01       	movw	r20, r10
    2a68:	94 01       	movw	r18, r8
    2a6a:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	5c e3       	ldi	r21, 0x3C	; 60
    2a76:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2a7a:	2b 01       	movw	r4, r22
    2a7c:	3c 01       	movw	r6, r24
    2a7e:	68 81       	ld	r22, Y
    2a80:	79 81       	ldd	r23, Y+1	; 0x01
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	57 e4       	ldi	r21, 0x47	; 71
    2a92:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2a96:	9b 01       	movw	r18, r22
    2a98:	ac 01       	movw	r20, r24
    2a9a:	c3 01       	movw	r24, r6
    2a9c:	b2 01       	movw	r22, r4
    2a9e:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2aa2:	2b 01       	movw	r4, r22
    2aa4:	3c 01       	movw	r6, r24
    2aa6:	c7 01       	movw	r24, r14
    2aa8:	b6 01       	movw	r22, r12
    2aaa:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    2aae:	9b 01       	movw	r18, r22
    2ab0:	ac 01       	movw	r20, r24
    2ab2:	c3 01       	movw	r24, r6
    2ab4:	b2 01       	movw	r22, r4
    2ab6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	55 e3       	ldi	r21, 0x35	; 53
    2ac2:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2ac6:	6b 01       	movw	r12, r22
    2ac8:	7c 01       	movw	r14, r24
    2aca:	6e 81       	ldd	r22, Y+6	; 0x06
    2acc:	7f 81       	ldd	r23, Y+7	; 0x07
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    2ad6:	a5 01       	movw	r20, r10
    2ad8:	94 01       	movw	r18, r8
    2ada:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e8       	ldi	r20, 0x80	; 128
    2ae4:	5c e3       	ldi	r21, 0x3C	; 60
    2ae6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2aea:	4b 01       	movw	r8, r22
    2aec:	5c 01       	movw	r10, r24
    2aee:	6a 81       	ldd	r22, Y+2	; 0x02
    2af0:	7b 81       	ldd	r23, Y+3	; 0x03
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	58 e4       	ldi	r21, 0x48	; 72
    2b02:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2b06:	9b 01       	movw	r18, r22
    2b08:	ac 01       	movw	r20, r24
    2b0a:	c5 01       	movw	r24, r10
    2b0c:	b4 01       	movw	r22, r8
    2b0e:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2b12:	9b 01       	movw	r18, r22
    2b14:	ac 01       	movw	r20, r24
    2b16:	c7 01       	movw	r24, r14
    2b18:	b6 01       	movw	r22, r12
    2b1a:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	58 e3       	ldi	r21, 0x38	; 56
    2b26:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	df 90       	pop	r13
    2b34:	cf 90       	pop	r12
    2b36:	bf 90       	pop	r11
    2b38:	af 90       	pop	r10
    2b3a:	9f 90       	pop	r9
    2b3c:	8f 90       	pop	r8
    2b3e:	7f 90       	pop	r7
    2b40:	6f 90       	pop	r6
    2b42:	5f 90       	pop	r5
    2b44:	4f 90       	pop	r4
    2b46:	08 95       	ret

00002b48 <get_temperature>:
    2b48:	4f 92       	push	r4
    2b4a:	5f 92       	push	r5
    2b4c:	6f 92       	push	r6
    2b4e:	7f 92       	push	r7
    2b50:	8f 92       	push	r8
    2b52:	9f 92       	push	r9
    2b54:	af 92       	push	r10
    2b56:	bf 92       	push	r11
    2b58:	cf 92       	push	r12
    2b5a:	df 92       	push	r13
    2b5c:	ef 92       	push	r14
    2b5e:	ff 92       	push	r15
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	1f 92       	push	r1
    2b66:	1f 92       	push	r1
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	b2 db       	rcall	.-2204   	; 0x22d2 <thermistor_read>
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	9a 83       	std	Y+2, r25	; 0x02
    2b72:	69 81       	ldd	r22, Y+1	; 0x01
    2b74:	7a 81       	ldd	r23, Y+2	; 0x02
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    2b7e:	20 91 19 20 	lds	r18, 0x2019	; 0x802019 <m>
    2b82:	30 91 1a 20 	lds	r19, 0x201A	; 0x80201a <m+0x1>
    2b86:	40 91 1b 20 	lds	r20, 0x201B	; 0x80201b <m+0x2>
    2b8a:	50 91 1c 20 	lds	r21, 0x201C	; 0x80201c <m+0x3>
    2b8e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2b92:	20 91 15 20 	lds	r18, 0x2015	; 0x802015 <b>
    2b96:	30 91 16 20 	lds	r19, 0x2016	; 0x802016 <b+0x1>
    2b9a:	40 91 17 20 	lds	r20, 0x2017	; 0x802017 <b+0x2>
    2b9e:	50 91 18 20 	lds	r21, 0x2018	; 0x802018 <b+0x3>
    2ba2:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2ba6:	6b 01       	movw	r12, r22
    2ba8:	7c 01       	movw	r14, r24
    2baa:	9b 01       	movw	r18, r22
    2bac:	ac 01       	movw	r20, r24
    2bae:	63 e3       	ldi	r22, 0x33	; 51
    2bb0:	73 e3       	ldi	r23, 0x33	; 51
    2bb2:	83 e5       	ldi	r24, 0x53	; 83
    2bb4:	90 e4       	ldi	r25, 0x40	; 64
    2bb6:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e4       	ldi	r19, 0x40	; 64
    2bbe:	4e e4       	ldi	r20, 0x4E	; 78
    2bc0:	55 e4       	ldi	r21, 0x45	; 69
    2bc2:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2bc6:	a7 01       	movw	r20, r14
    2bc8:	96 01       	movw	r18, r12
    2bca:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e4       	ldi	r19, 0x40	; 64
    2bd2:	4c e1       	ldi	r20, 0x1C	; 28
    2bd4:	56 e4       	ldi	r21, 0x46	; 70
    2bd6:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    2bda:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <log>
    2bde:	6b 01       	movw	r12, r22
    2be0:	7c 01       	movw	r14, r24
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e4       	ldi	r20, 0x40	; 64
    2be8:	50 e4       	ldi	r21, 0x40	; 64
    2bea:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <pow>
    2bee:	4b 01       	movw	r8, r22
    2bf0:	5c 01       	movw	r10, r24
    2bf2:	21 ef       	ldi	r18, 0xF1	; 241
    2bf4:	3b eb       	ldi	r19, 0xBB	; 187
    2bf6:	46 e8       	ldi	r20, 0x86	; 134
    2bf8:	59 e3       	ldi	r21, 0x39	; 57
    2bfa:	c7 01       	movw	r24, r14
    2bfc:	b6 01       	movw	r22, r12
    2bfe:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2c02:	2d e0       	ldi	r18, 0x0D	; 13
    2c04:	3f ec       	ldi	r19, 0xCF	; 207
    2c06:	4b e5       	ldi	r20, 0x5B	; 91
    2c08:	5b e3       	ldi	r21, 0x3B	; 59
    2c0a:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2c0e:	2b 01       	movw	r4, r22
    2c10:	3c 01       	movw	r6, r24
    2c12:	a7 01       	movw	r20, r14
    2c14:	96 01       	movw	r18, r12
    2c16:	c7 01       	movw	r24, r14
    2c18:	b6 01       	movw	r22, r12
    2c1a:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2c1e:	22 e8       	ldi	r18, 0x82	; 130
    2c20:	35 ed       	ldi	r19, 0xD5	; 213
    2c22:	4f e2       	ldi	r20, 0x2F	; 47
    2c24:	56 e3       	ldi	r21, 0x36	; 54
    2c26:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2c2a:	9b 01       	movw	r18, r22
    2c2c:	ac 01       	movw	r20, r24
    2c2e:	c3 01       	movw	r24, r6
    2c30:	b2 01       	movw	r22, r4
    2c32:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2c36:	6b 01       	movw	r12, r22
    2c38:	7c 01       	movw	r14, r24
    2c3a:	2a e6       	ldi	r18, 0x6A	; 106
    2c3c:	33 e1       	ldi	r19, 0x13	; 19
    2c3e:	49 e8       	ldi	r20, 0x89	; 137
    2c40:	53 e3       	ldi	r21, 0x33	; 51
    2c42:	c5 01       	movw	r24, r10
    2c44:	b4 01       	movw	r22, r8
    2c46:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2c4a:	9b 01       	movw	r18, r22
    2c4c:	ac 01       	movw	r20, r24
    2c4e:	c7 01       	movw	r24, r14
    2c50:	b6 01       	movw	r22, r12
    2c52:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2c56:	9b 01       	movw	r18, r22
    2c58:	ac 01       	movw	r20, r24
    2c5a:	60 e0       	ldi	r22, 0x00	; 0
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	80 e8       	ldi	r24, 0x80	; 128
    2c60:	9f e3       	ldi	r25, 0x3F	; 63
    2c62:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	bf 90       	pop	r11
    2c78:	af 90       	pop	r10
    2c7a:	9f 90       	pop	r9
    2c7c:	8f 90       	pop	r8
    2c7e:	7f 90       	pop	r7
    2c80:	6f 90       	pop	r6
    2c82:	5f 90       	pop	r5
    2c84:	4f 90       	pop	r4
    2c86:	08 95       	ret

00002c88 <get_altitude>:
    2c88:	4f 92       	push	r4
    2c8a:	5f 92       	push	r5
    2c8c:	6f 92       	push	r6
    2c8e:	7f 92       	push	r7
    2c90:	8f 92       	push	r8
    2c92:	9f 92       	push	r9
    2c94:	af 92       	push	r10
    2c96:	bf 92       	push	r11
    2c98:	cf 92       	push	r12
    2c9a:	df 92       	push	r13
    2c9c:	ef 92       	push	r14
    2c9e:	ff 92       	push	r15
    2ca0:	2b 01       	movw	r4, r22
    2ca2:	3c 01       	movw	r6, r24
    2ca4:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <L>
    2ca8:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <L+0x1>
    2cac:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <L+0x2>
    2cb0:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <L+0x3>
    2cb4:	20 91 2f 20 	lds	r18, 0x202F	; 0x80202f <R>
    2cb8:	30 91 30 20 	lds	r19, 0x2030	; 0x802030 <R+0x1>
    2cbc:	40 91 31 20 	lds	r20, 0x2031	; 0x802031 <R+0x2>
    2cc0:	50 91 32 20 	lds	r21, 0x2032	; 0x802032 <R+0x3>
    2cc4:	c7 01       	movw	r24, r14
    2cc6:	b6 01       	movw	r22, r12
    2cc8:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2ccc:	20 91 27 20 	lds	r18, 0x2027	; 0x802027 <g_0>
    2cd0:	30 91 28 20 	lds	r19, 0x2028	; 0x802028 <g_0+0x1>
    2cd4:	40 91 29 20 	lds	r20, 0x2029	; 0x802029 <g_0+0x2>
    2cd8:	50 91 2a 20 	lds	r21, 0x202A	; 0x80202a <g_0+0x3>
    2cdc:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    2ce0:	4b 01       	movw	r8, r22
    2ce2:	5c 01       	movw	r10, r24
    2ce4:	a3 01       	movw	r20, r6
    2ce6:	92 01       	movw	r18, r4
    2ce8:	60 91 37 20 	lds	r22, 0x2037	; 0x802037 <ground_p>
    2cec:	70 91 38 20 	lds	r23, 0x2038	; 0x802038 <ground_p+0x1>
    2cf0:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <ground_p+0x2>
    2cf4:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <ground_p+0x3>
    2cf8:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    2cfc:	a5 01       	movw	r20, r10
    2cfe:	94 01       	movw	r18, r8
    2d00:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <pow>
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e8       	ldi	r20, 0x80	; 128
    2d0a:	5f e3       	ldi	r21, 0x3F	; 63
    2d0c:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    2d10:	20 91 33 20 	lds	r18, 0x2033	; 0x802033 <ground_t>
    2d14:	30 91 34 20 	lds	r19, 0x2034	; 0x802034 <ground_t+0x1>
    2d18:	40 91 35 20 	lds	r20, 0x2035	; 0x802035 <ground_t+0x2>
    2d1c:	50 91 36 20 	lds	r21, 0x2036	; 0x802036 <ground_t+0x3>
    2d20:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2d24:	a7 01       	movw	r20, r14
    2d26:	96 01       	movw	r18, r12
    2d28:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	df 90       	pop	r13
    2d32:	cf 90       	pop	r12
    2d34:	bf 90       	pop	r11
    2d36:	af 90       	pop	r10
    2d38:	9f 90       	pop	r9
    2d3a:	8f 90       	pop	r8
    2d3c:	7f 90       	pop	r7
    2d3e:	6f 90       	pop	r6
    2d40:	5f 90       	pop	r5
    2d42:	4f 90       	pop	r4
    2d44:	08 95       	ret

00002d46 <get_voltage>:
    2d46:	cf 92       	push	r12
    2d48:	df 92       	push	r13
    2d4a:	ef 92       	push	r14
    2d4c:	ff 92       	push	r15
    2d4e:	56 dc       	rcall	.-1876   	; 0x25fc <voltage_read>
    2d50:	bc 01       	movw	r22, r24
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    2d5a:	20 91 19 20 	lds	r18, 0x2019	; 0x802019 <m>
    2d5e:	30 91 1a 20 	lds	r19, 0x201A	; 0x80201a <m+0x1>
    2d62:	40 91 1b 20 	lds	r20, 0x201B	; 0x80201b <m+0x2>
    2d66:	50 91 1c 20 	lds	r21, 0x201C	; 0x80201c <m+0x3>
    2d6a:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2d6e:	20 91 15 20 	lds	r18, 0x2015	; 0x802015 <b>
    2d72:	30 91 16 20 	lds	r19, 0x2016	; 0x802016 <b+0x1>
    2d76:	40 91 17 20 	lds	r20, 0x2017	; 0x802017 <b+0x2>
    2d7a:	50 91 18 20 	lds	r21, 0x2018	; 0x802018 <b+0x3>
    2d7e:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2d82:	6b 01       	movw	r12, r22
    2d84:	7c 01       	movw	r14, r24
    2d86:	2b e2       	ldi	r18, 0x2B	; 43
    2d88:	35 eb       	ldi	r19, 0xB5	; 181
    2d8a:	42 e1       	ldi	r20, 0x12	; 18
    2d8c:	50 e4       	ldi	r21, 0x40	; 64
    2d8e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2d92:	9b 01       	movw	r18, r22
    2d94:	ac 01       	movw	r20, r24
    2d96:	c7 01       	movw	r24, r14
    2d98:	b6 01       	movw	r22, r12
    2d9a:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2d9e:	ff 90       	pop	r15
    2da0:	ef 90       	pop	r14
    2da2:	df 90       	pop	r13
    2da4:	cf 90       	pop	r12
    2da6:	08 95       	ret

00002da8 <diff>:
    2da8:	2f 92       	push	r2
    2daa:	3f 92       	push	r3
    2dac:	4f 92       	push	r4
    2dae:	5f 92       	push	r5
    2db0:	6f 92       	push	r6
    2db2:	7f 92       	push	r7
    2db4:	8f 92       	push	r8
    2db6:	9f 92       	push	r9
    2db8:	af 92       	push	r10
    2dba:	bf 92       	push	r11
    2dbc:	cf 92       	push	r12
    2dbe:	df 92       	push	r13
    2dc0:	ef 92       	push	r14
    2dc2:	ff 92       	push	r15
    2dc4:	0f 93       	push	r16
    2dc6:	1f 93       	push	r17
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <diff+0x26>
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <diff+0x28>
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	6c 01       	movw	r12, r24
    2dd6:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    2dda:	88 23       	and	r24, r24
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <diff+0x38>
    2dde:	6c c0       	rjmp	.+216    	; 0x2eb8 <diff+0x110>
    2de0:	00 e0       	ldi	r16, 0x00	; 0
    2de2:	10 e0       	ldi	r17, 0x00	; 0
    2de4:	41 2c       	mov	r4, r1
    2de6:	51 2c       	mov	r5, r1
    2de8:	32 01       	movw	r6, r4
    2dea:	86 2e       	mov	r8, r22
    2dec:	91 2c       	mov	r9, r1
    2dee:	a1 2c       	mov	r10, r1
    2df0:	b1 2c       	mov	r11, r1
    2df2:	89 82       	std	Y+1, r8	; 0x01
    2df4:	9a 82       	std	Y+2, r9	; 0x02
    2df6:	ab 82       	std	Y+3, r10	; 0x03
    2df8:	bc 82       	std	Y+4, r11	; 0x04
    2dfa:	b8 01       	movw	r22, r16
    2dfc:	c6 01       	movw	r24, r12
    2dfe:	54 dc       	rcall	.-1880   	; 0x26a8 <rb16_get_nth>
    2e00:	5c 01       	movw	r10, r24
    2e02:	18 01       	movw	r2, r16
    2e04:	2f ef       	ldi	r18, 0xFF	; 255
    2e06:	22 1a       	sub	r2, r18
    2e08:	32 0a       	sbc	r3, r18
    2e0a:	b1 01       	movw	r22, r2
    2e0c:	c6 01       	movw	r24, r12
    2e0e:	4c dc       	rcall	.-1896   	; 0x26a8 <rb16_get_nth>
    2e10:	7c 01       	movw	r14, r24
    2e12:	b8 01       	movw	r22, r16
    2e14:	6e 5f       	subi	r22, 0xFE	; 254
    2e16:	7f 4f       	sbci	r23, 0xFF	; 255
    2e18:	c6 01       	movw	r24, r12
    2e1a:	46 dc       	rcall	.-1908   	; 0x26a8 <rb16_get_nth>
    2e1c:	a5 01       	movw	r20, r10
    2e1e:	bb 0c       	add	r11, r11
    2e20:	66 0b       	sbc	r22, r22
    2e22:	77 0b       	sbc	r23, r23
    2e24:	8a 01       	movw	r16, r20
    2e26:	9b 01       	movw	r18, r22
    2e28:	00 0f       	add	r16, r16
    2e2a:	11 1f       	adc	r17, r17
    2e2c:	22 1f       	adc	r18, r18
    2e2e:	33 1f       	adc	r19, r19
    2e30:	40 0f       	add	r20, r16
    2e32:	51 1f       	adc	r21, r17
    2e34:	62 1f       	adc	r22, r18
    2e36:	73 1f       	adc	r23, r19
    2e38:	87 01       	movw	r16, r14
    2e3a:	ff 0c       	add	r15, r15
    2e3c:	22 0b       	sbc	r18, r18
    2e3e:	33 0b       	sbc	r19, r19
    2e40:	78 01       	movw	r14, r16
    2e42:	89 01       	movw	r16, r18
    2e44:	ee 0c       	add	r14, r14
    2e46:	ff 1c       	adc	r15, r15
    2e48:	00 1f       	adc	r16, r16
    2e4a:	11 1f       	adc	r17, r17
    2e4c:	ee 0c       	add	r14, r14
    2e4e:	ff 1c       	adc	r15, r15
    2e50:	00 1f       	adc	r16, r16
    2e52:	11 1f       	adc	r17, r17
    2e54:	4a 01       	movw	r8, r20
    2e56:	5b 01       	movw	r10, r22
    2e58:	8e 18       	sub	r8, r14
    2e5a:	9f 08       	sbc	r9, r15
    2e5c:	a0 0a       	sbc	r10, r16
    2e5e:	b1 0a       	sbc	r11, r17
    2e60:	ac 01       	movw	r20, r24
    2e62:	99 0f       	add	r25, r25
    2e64:	66 0b       	sbc	r22, r22
    2e66:	77 0b       	sbc	r23, r23
    2e68:	d5 01       	movw	r26, r10
    2e6a:	c4 01       	movw	r24, r8
    2e6c:	84 0f       	add	r24, r20
    2e6e:	95 1f       	adc	r25, r21
    2e70:	a6 1f       	adc	r26, r22
    2e72:	b7 1f       	adc	r27, r23
    2e74:	9c 01       	movw	r18, r24
    2e76:	ad 01       	movw	r20, r26
    2e78:	69 81       	ldd	r22, Y+1	; 0x01
    2e7a:	7a 81       	ldd	r23, Y+2	; 0x02
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e80:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <__mulsi3>
    2e84:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	5f e3       	ldi	r21, 0x3F	; 63
    2e90:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2e94:	9b 01       	movw	r18, r22
    2e96:	ac 01       	movw	r20, r24
    2e98:	c3 01       	movw	r24, r6
    2e9a:	b2 01       	movw	r22, r4
    2e9c:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2ea0:	2b 01       	movw	r4, r22
    2ea2:	3c 01       	movw	r6, r24
    2ea4:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    2ea8:	81 01       	movw	r16, r2
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	22 16       	cp	r2, r18
    2eb0:	33 06       	cpc	r3, r19
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <diff+0x10e>
    2eb4:	a2 cf       	rjmp	.-188    	; 0x2dfa <diff+0x52>
    2eb6:	03 c0       	rjmp	.+6      	; 0x2ebe <diff+0x116>
    2eb8:	41 2c       	mov	r4, r1
    2eba:	51 2c       	mov	r5, r1
    2ebc:	32 01       	movw	r6, r4
    2ebe:	68 2f       	mov	r22, r24
    2ec0:	70 e0       	ldi	r23, 0x00	; 0
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    2eca:	9b 01       	movw	r18, r22
    2ecc:	ac 01       	movw	r20, r24
    2ece:	c3 01       	movw	r24, r6
    2ed0:	b2 01       	movw	r22, r4
    2ed2:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	48 ec       	ldi	r20, 0xC8	; 200
    2edc:	52 e4       	ldi	r21, 0x42	; 66
    2ede:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    2ee2:	26 96       	adiw	r28, 0x06	; 6
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	ff 90       	pop	r15
    2ef2:	ef 90       	pop	r14
    2ef4:	df 90       	pop	r13
    2ef6:	cf 90       	pop	r12
    2ef8:	bf 90       	pop	r11
    2efa:	af 90       	pop	r10
    2efc:	9f 90       	pop	r9
    2efe:	8f 90       	pop	r8
    2f00:	7f 90       	pop	r7
    2f02:	6f 90       	pop	r6
    2f04:	5f 90       	pop	r5
    2f06:	4f 90       	pop	r4
    2f08:	3f 90       	pop	r3
    2f0a:	2f 90       	pop	r2
    2f0c:	08 95       	ret

00002f0e <data_check>:
    2f0e:	3f 92       	push	r3
    2f10:	4f 92       	push	r4
    2f12:	5f 92       	push	r5
    2f14:	6f 92       	push	r6
    2f16:	7f 92       	push	r7
    2f18:	8f 92       	push	r8
    2f1a:	9f 92       	push	r9
    2f1c:	af 92       	push	r10
    2f1e:	bf 92       	push	r11
    2f20:	cf 92       	push	r12
    2f22:	df 92       	push	r13
    2f24:	ef 92       	push	r14
    2f26:	ff 92       	push	r15
    2f28:	0f 93       	push	r16
    2f2a:	1f 93       	push	r17
    2f2c:	cf 93       	push	r28
    2f2e:	df 93       	push	r29
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <data_check+0x24>
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <data_check+0x26>
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	8c 01       	movw	r16, r24
    2f3a:	19 82       	std	Y+1, r1	; 0x01
    2f3c:	1a 82       	std	Y+2, r1	; 0x02
    2f3e:	c1 2c       	mov	r12, r1
    2f40:	d1 2c       	mov	r13, r1
    2f42:	76 01       	movw	r14, r12
    2f44:	69 81       	ldd	r22, Y+1	; 0x01
    2f46:	7a 81       	ldd	r23, Y+2	; 0x02
    2f48:	c8 01       	movw	r24, r16
    2f4a:	36 dc       	rcall	.-1940   	; 0x27b8 <rb32_get_nth>
    2f4c:	4b 01       	movw	r8, r22
    2f4e:	5c 01       	movw	r10, r24
    2f50:	21 e6       	ldi	r18, 0x61	; 97
    2f52:	82 1a       	sub	r8, r18
    2f54:	2e ea       	ldi	r18, 0xAE	; 174
    2f56:	92 0a       	sbc	r9, r18
    2f58:	2a e0       	ldi	r18, 0x0A	; 10
    2f5a:	a2 0a       	sbc	r10, r18
    2f5c:	b1 08       	sbc	r11, r1
    2f5e:	2f e7       	ldi	r18, 0x7F	; 127
    2f60:	82 16       	cp	r8, r18
    2f62:	2a e1       	ldi	r18, 0x1A	; 26
    2f64:	92 06       	cpc	r9, r18
    2f66:	26 e0       	ldi	r18, 0x06	; 6
    2f68:	a2 06       	cpc	r10, r18
    2f6a:	b1 04       	cpc	r11, r1
    2f6c:	80 f4       	brcc	.+32     	; 0x2f8e <data_check+0x80>
    2f6e:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 ea       	ldi	r20, 0xA0	; 160
    2f78:	50 e4       	ldi	r21, 0x40	; 64
    2f7a:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    2f7e:	9b 01       	movw	r18, r22
    2f80:	ac 01       	movw	r20, r24
    2f82:	c7 01       	movw	r24, r14
    2f84:	b6 01       	movw	r22, r12
    2f86:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2f8a:	6b 01       	movw	r12, r22
    2f8c:	7c 01       	movw	r14, r24
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	9a 83       	std	Y+2, r25	; 0x02
    2f98:	05 97       	sbiw	r24, 0x05	; 5
    2f9a:	a1 f6       	brne	.-88     	; 0x2f44 <data_check+0x36>
    2f9c:	19 82       	std	Y+1, r1	; 0x01
    2f9e:	1a 82       	std	Y+2, r1	; 0x02
    2fa0:	81 2c       	mov	r8, r1
    2fa2:	91 2c       	mov	r9, r1
    2fa4:	54 01       	movw	r10, r8
    2fa6:	69 81       	ldd	r22, Y+1	; 0x01
    2fa8:	7a 81       	ldd	r23, Y+2	; 0x02
    2faa:	c8 01       	movw	r24, r16
    2fac:	05 dc       	rcall	.-2038   	; 0x27b8 <rb32_get_nth>
    2fae:	2b 01       	movw	r4, r22
    2fb0:	3c 01       	movw	r6, r24
    2fb2:	21 e6       	ldi	r18, 0x61	; 97
    2fb4:	42 1a       	sub	r4, r18
    2fb6:	2e ea       	ldi	r18, 0xAE	; 174
    2fb8:	52 0a       	sbc	r5, r18
    2fba:	2a e0       	ldi	r18, 0x0A	; 10
    2fbc:	62 0a       	sbc	r6, r18
    2fbe:	71 08       	sbc	r7, r1
    2fc0:	2f e7       	ldi	r18, 0x7F	; 127
    2fc2:	42 16       	cp	r4, r18
    2fc4:	2a e1       	ldi	r18, 0x1A	; 26
    2fc6:	52 06       	cpc	r5, r18
    2fc8:	26 e0       	ldi	r18, 0x06	; 6
    2fca:	62 06       	cpc	r6, r18
    2fcc:	71 04       	cpc	r7, r1
    2fce:	90 f4       	brcc	.+36     	; 0x2ff4 <data_check+0xe6>
    2fd0:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    2fd4:	a7 01       	movw	r20, r14
    2fd6:	96 01       	movw	r18, r12
    2fd8:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    2fdc:	9b 01       	movw	r18, r22
    2fde:	ac 01       	movw	r20, r24
    2fe0:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    2fe4:	9b 01       	movw	r18, r22
    2fe6:	ac 01       	movw	r20, r24
    2fe8:	c5 01       	movw	r24, r10
    2fea:	b4 01       	movw	r22, r8
    2fec:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    2ff0:	4b 01       	movw	r8, r22
    2ff2:	5c 01       	movw	r10, r24
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	01 96       	adiw	r24, 0x01	; 1
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	9a 83       	std	Y+2, r25	; 0x02
    2ffe:	05 97       	sbiw	r24, 0x05	; 5
    3000:	91 f6       	brne	.-92     	; 0x2fa6 <data_check+0x98>
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e8       	ldi	r20, 0x80	; 128
    3008:	5e e3       	ldi	r21, 0x3E	; 62
    300a:	c5 01       	movw	r24, r10
    300c:	b4 01       	movw	r22, r8
    300e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    3012:	69 83       	std	Y+1, r22	; 0x01
    3014:	7a 83       	std	Y+2, r23	; 0x02
    3016:	8b 83       	std	Y+3, r24	; 0x03
    3018:	9c 83       	std	Y+4, r25	; 0x04
    301a:	1d 82       	std	Y+5, r1	; 0x05
    301c:	1e 82       	std	Y+6, r1	; 0x06
    301e:	31 2c       	mov	r3, r1
    3020:	41 2c       	mov	r4, r1
    3022:	51 2c       	mov	r5, r1
    3024:	32 01       	movw	r6, r4
    3026:	6d 81       	ldd	r22, Y+5	; 0x05
    3028:	7e 81       	ldd	r23, Y+6	; 0x06
    302a:	c8 01       	movw	r24, r16
    302c:	c5 db       	rcall	.-2166   	; 0x27b8 <rb32_get_nth>
    302e:	4b 01       	movw	r8, r22
    3030:	5c 01       	movw	r10, r24
    3032:	21 e6       	ldi	r18, 0x61	; 97
    3034:	82 1a       	sub	r8, r18
    3036:	2e ea       	ldi	r18, 0xAE	; 174
    3038:	92 0a       	sbc	r9, r18
    303a:	2a e0       	ldi	r18, 0x0A	; 10
    303c:	a2 0a       	sbc	r10, r18
    303e:	b1 08       	sbc	r11, r1
    3040:	2f e7       	ldi	r18, 0x7F	; 127
    3042:	82 16       	cp	r8, r18
    3044:	2a e1       	ldi	r18, 0x1A	; 26
    3046:	92 06       	cpc	r9, r18
    3048:	26 e0       	ldi	r18, 0x06	; 6
    304a:	a2 06       	cpc	r10, r18
    304c:	b1 04       	cpc	r11, r1
    304e:	50 f5       	brcc	.+84     	; 0x30a4 <data_check+0x196>
    3050:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    3054:	4b 01       	movw	r8, r22
    3056:	5c 01       	movw	r10, r24
    3058:	a7 01       	movw	r20, r14
    305a:	96 01       	movw	r18, r12
    305c:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    3060:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3064:	9b 01       	movw	r18, r22
    3066:	77 23       	and	r23, r23
    3068:	24 f4       	brge	.+8      	; 0x3072 <data_check+0x164>
    306a:	22 27       	eor	r18, r18
    306c:	33 27       	eor	r19, r19
    306e:	26 1b       	sub	r18, r22
    3070:	37 0b       	sbc	r19, r23
    3072:	b9 01       	movw	r22, r18
    3074:	33 0f       	add	r19, r19
    3076:	88 0b       	sbc	r24, r24
    3078:	99 0b       	sbc	r25, r25
    307a:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    307e:	9b 01       	movw	r18, r22
    3080:	ac 01       	movw	r20, r24
    3082:	69 81       	ldd	r22, Y+1	; 0x01
    3084:	7a 81       	ldd	r23, Y+2	; 0x02
    3086:	8b 81       	ldd	r24, Y+3	; 0x03
    3088:	9c 81       	ldd	r25, Y+4	; 0x04
    308a:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <__gesf2>
    308e:	88 23       	and	r24, r24
    3090:	4c f0       	brlt	.+18     	; 0x30a4 <data_check+0x196>
    3092:	a5 01       	movw	r20, r10
    3094:	94 01       	movw	r18, r8
    3096:	c3 01       	movw	r24, r6
    3098:	b2 01       	movw	r22, r4
    309a:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    309e:	2b 01       	movw	r4, r22
    30a0:	3c 01       	movw	r6, r24
    30a2:	33 94       	inc	r3
    30a4:	8d 81       	ldd	r24, Y+5	; 0x05
    30a6:	9e 81       	ldd	r25, Y+6	; 0x06
    30a8:	01 96       	adiw	r24, 0x01	; 1
    30aa:	8d 83       	std	Y+5, r24	; 0x05
    30ac:	9e 83       	std	Y+6, r25	; 0x06
    30ae:	05 97       	sbiw	r24, 0x05	; 5
    30b0:	09 f0       	breq	.+2      	; 0x30b4 <data_check+0x1a6>
    30b2:	b9 cf       	rjmp	.-142    	; 0x3026 <data_check+0x118>
    30b4:	33 20       	and	r3, r3
    30b6:	69 f0       	breq	.+26     	; 0x30d2 <data_check+0x1c4>
    30b8:	63 2d       	mov	r22, r3
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    30c4:	9b 01       	movw	r18, r22
    30c6:	ac 01       	movw	r20, r24
    30c8:	c3 01       	movw	r24, r6
    30ca:	b2 01       	movw	r22, r4
    30cc:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    30d0:	04 c0       	rjmp	.+8      	; 0x30da <data_check+0x1cc>
    30d2:	60 e0       	ldi	r22, 0x00	; 0
    30d4:	70 e0       	ldi	r23, 0x00	; 0
    30d6:	80 e8       	ldi	r24, 0x80	; 128
    30d8:	9f eb       	ldi	r25, 0xBF	; 191
    30da:	26 96       	adiw	r28, 0x06	; 6
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	1f 91       	pop	r17
    30e6:	0f 91       	pop	r16
    30e8:	ff 90       	pop	r15
    30ea:	ef 90       	pop	r14
    30ec:	df 90       	pop	r13
    30ee:	cf 90       	pop	r12
    30f0:	bf 90       	pop	r11
    30f2:	af 90       	pop	r10
    30f4:	9f 90       	pop	r9
    30f6:	8f 90       	pop	r8
    30f8:	7f 90       	pop	r7
    30fa:	6f 90       	pop	r6
    30fc:	5f 90       	pop	r5
    30fe:	4f 90       	pop	r4
    3100:	3f 90       	pop	r3
    3102:	08 95       	ret

00003104 <data_collect>:
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	00 d0       	rcall	.+0      	; 0x311a <data_collect+0x16>
    311a:	00 d0       	rcall	.+0      	; 0x311c <data_collect+0x18>
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	5c 01       	movw	r10, r24
    3122:	8b 01       	movw	r16, r22
    3124:	6e dc       	rcall	.-1828   	; 0x2a02 <get_pressure>
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    3132:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3136:	69 83       	std	Y+1, r22	; 0x01
    3138:	7a 83       	std	Y+2, r23	; 0x02
    313a:	8b 83       	std	Y+3, r24	; 0x03
    313c:	9c 83       	std	Y+4, r25	; 0x04
    313e:	41 e0       	ldi	r20, 0x01	; 1
    3140:	50 e0       	ldi	r21, 0x00	; 0
    3142:	be 01       	movw	r22, r28
    3144:	6f 5f       	subi	r22, 0xFF	; 255
    3146:	7f 4f       	sbci	r23, 0xFF	; 255
    3148:	c8 01       	movw	r24, r16
    314a:	db da       	rcall	.-2634   	; 0x2702 <rb32_write>
    314c:	c8 01       	movw	r24, r16
    314e:	df de       	rcall	.-578    	; 0x2f0e <data_check>
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	40 e2       	ldi	r20, 0x20	; 32
    3156:	51 e4       	ldi	r21, 0x41	; 65
    3158:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    315c:	6b 01       	movw	r12, r22
    315e:	7c 01       	movw	r14, r24
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e8       	ldi	r20, 0x80	; 128
    3166:	5f eb       	ldi	r21, 0xBF	; 191
    3168:	0e 94 98 2b 	call	0x5730	; 0x5730 <__cmpsf2>
    316c:	88 23       	and	r24, r24
    316e:	d1 f1       	breq	.+116    	; 0x31e4 <data_collect+0xe0>
    3170:	c0 92 26 21 	sts	0x2126, r12	; 0x802126 <press>
    3174:	d0 92 27 21 	sts	0x2127, r13	; 0x802127 <press+0x1>
    3178:	e0 92 28 21 	sts	0x2128, r14	; 0x802128 <press+0x2>
    317c:	f0 92 29 21 	sts	0x2129, r15	; 0x802129 <press+0x3>
    3180:	c7 01       	movw	r24, r14
    3182:	b6 01       	movw	r22, r12
    3184:	81 dd       	rcall	.-1278   	; 0x2c88 <get_altitude>
    3186:	60 93 1e 21 	sts	0x211E, r22	; 0x80211e <alt>
    318a:	70 93 1f 21 	sts	0x211F, r23	; 0x80211f <alt+0x1>
    318e:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <alt+0x2>
    3192:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <alt+0x3>
    3196:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <alt>
    319a:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <alt+0x1>
    319e:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <alt+0x2>
    31a2:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <alt+0x3>
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	48 ec       	ldi	r20, 0xC8	; 200
    31ac:	52 e4       	ldi	r21, 0x42	; 66
    31ae:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    31b2:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    31b6:	6d 83       	std	Y+5, r22	; 0x05
    31b8:	7e 83       	std	Y+6, r23	; 0x06
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	50 e0       	ldi	r21, 0x00	; 0
    31be:	be 01       	movw	r22, r28
    31c0:	6b 5f       	subi	r22, 0xFB	; 251
    31c2:	7f 4f       	sbci	r23, 0xFF	; 255
    31c4:	c5 01       	movw	r24, r10
    31c6:	27 da       	rcall	.-2994   	; 0x2616 <rb16_write>
    31c8:	60 91 1f 20 	lds	r22, 0x201F	; 0x80201f <rate>
    31cc:	70 91 20 20 	lds	r23, 0x2020	; 0x802020 <rate+0x1>
    31d0:	c5 01       	movw	r24, r10
    31d2:	ea dd       	rcall	.-1068   	; 0x2da8 <diff>
    31d4:	60 93 16 21 	sts	0x2116, r22	; 0x802116 <velocity>
    31d8:	70 93 17 21 	sts	0x2117, r23	; 0x802117 <velocity+0x1>
    31dc:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <velocity+0x2>
    31e0:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <velocity+0x3>
    31e4:	b1 dc       	rcall	.-1694   	; 0x2b48 <get_temperature>
    31e6:	60 93 22 21 	sts	0x2122, r22	; 0x802122 <temp>
    31ea:	70 93 23 21 	sts	0x2123, r23	; 0x802123 <temp+0x1>
    31ee:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <temp+0x2>
    31f2:	90 93 25 21 	sts	0x2125, r25	; 0x802125 <temp+0x3>
    31f6:	a7 dd       	rcall	.-1202   	; 0x2d46 <get_voltage>
    31f8:	60 93 1a 21 	sts	0x211A, r22	; 0x80211a <volt>
    31fc:	70 93 1b 21 	sts	0x211B, r23	; 0x80211b <volt+0x1>
    3200:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <volt+0x2>
    3204:	90 93 1d 21 	sts	0x211D, r25	; 0x80211d <volt+0x3>
    3208:	26 96       	adiw	r28, 0x06	; 6
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	1f 91       	pop	r17
    3214:	0f 91       	pop	r16
    3216:	ff 90       	pop	r15
    3218:	ef 90       	pop	r14
    321a:	df 90       	pop	r13
    321c:	cf 90       	pop	r12
    321e:	bf 90       	pop	r11
    3220:	af 90       	pop	r10
    3222:	08 95       	ret

00003224 <imu_read>:
    3224:	4f 92       	push	r4
    3226:	5f 92       	push	r5
    3228:	6f 92       	push	r6
    322a:	7f 92       	push	r7
    322c:	8f 92       	push	r8
    322e:	9f 92       	push	r9
    3230:	af 92       	push	r10
    3232:	bf 92       	push	r11
    3234:	cf 92       	push	r12
    3236:	df 92       	push	r13
    3238:	ef 92       	push	r14
    323a:	ff 92       	push	r15
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	00 d0       	rcall	.+0      	; 0x3242 <imu_read+0x1e>
    3242:	00 d0       	rcall	.+0      	; 0x3244 <imu_read+0x20>
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	0e 94 03 11 	call	0x2206	; 0x2206 <imu_update>
    324c:	0e 94 16 11 	call	0x222c	; 0x222c <imu_roll>
    3250:	20 91 38 21 	lds	r18, 0x2138	; 0x802138 <ref_roll>
    3254:	30 91 39 21 	lds	r19, 0x2139	; 0x802139 <ref_roll+0x1>
    3258:	40 91 3a 21 	lds	r20, 0x213A	; 0x80213a <ref_roll+0x2>
    325c:	50 91 3b 21 	lds	r21, 0x213B	; 0x80213b <ref_roll+0x3>
    3260:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    3264:	6b 01       	movw	r12, r22
    3266:	7c 01       	movw	r14, r24
    3268:	0e 94 1f 11 	call	0x223e	; 0x223e <imu_pitch>
    326c:	20 91 21 20 	lds	r18, 0x2021	; 0x802021 <ref_pitch>
    3270:	30 91 22 20 	lds	r19, 0x2022	; 0x802022 <ref_pitch+0x1>
    3274:	40 91 23 20 	lds	r20, 0x2023	; 0x802023 <ref_pitch+0x2>
    3278:	50 91 24 20 	lds	r21, 0x2024	; 0x802024 <ref_pitch+0x3>
    327c:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    3280:	4b 01       	movw	r8, r22
    3282:	5c 01       	movw	r10, r24
    3284:	0e 94 28 11 	call	0x2250	; 0x2250 <imu_heading>
    3288:	20 91 3c 21 	lds	r18, 0x213C	; 0x80213c <ref_yaw>
    328c:	30 91 3d 21 	lds	r19, 0x213D	; 0x80213d <ref_yaw+0x1>
    3290:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <ref_yaw+0x2>
    3294:	50 91 3f 21 	lds	r21, 0x213F	; 0x80213f <ref_yaw+0x3>
    3298:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    329c:	2b 01       	movw	r4, r22
    329e:	3c 01       	movw	r6, r24
    32a0:	c7 01       	movw	r24, r14
    32a2:	b6 01       	movw	r22, r12
    32a4:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    32a8:	6d 83       	std	Y+5, r22	; 0x05
    32aa:	7e 83       	std	Y+6, r23	; 0x06
    32ac:	77 23       	and	r23, r23
    32ae:	34 f4       	brge	.+12     	; 0x32bc <imu_read+0x98>
    32b0:	22 27       	eor	r18, r18
    32b2:	33 27       	eor	r19, r19
    32b4:	26 1b       	sub	r18, r22
    32b6:	37 0b       	sbc	r19, r23
    32b8:	2d 83       	std	Y+5, r18	; 0x05
    32ba:	3e 83       	std	Y+6, r19	; 0x06
    32bc:	8d 81       	ldd	r24, Y+5	; 0x05
    32be:	9e 81       	ldd	r25, Y+6	; 0x06
    32c0:	85 3b       	cpi	r24, 0xB5	; 181
    32c2:	91 05       	cpc	r25, r1
    32c4:	24 f1       	brlt	.+72     	; 0x330e <imu_read+0xea>
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	44 eb       	ldi	r20, 0xB4	; 180
    32cc:	53 e4       	ldi	r21, 0x43	; 67
    32ce:	c7 01       	movw	r24, r14
    32d0:	b6 01       	movw	r22, r12
    32d2:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    32d6:	69 83       	std	Y+1, r22	; 0x01
    32d8:	7a 83       	std	Y+2, r23	; 0x02
    32da:	8b 83       	std	Y+3, r24	; 0x03
    32dc:	9c 83       	std	Y+4, r25	; 0x04
    32de:	2d 81       	ldd	r18, Y+5	; 0x05
    32e0:	3e 81       	ldd	r19, Y+6	; 0x06
    32e2:	b9 01       	movw	r22, r18
    32e4:	33 0f       	add	r19, r19
    32e6:	88 0b       	sbc	r24, r24
    32e8:	99 0b       	sbc	r25, r25
    32ea:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    32ee:	9b 01       	movw	r18, r22
    32f0:	ac 01       	movw	r20, r24
    32f2:	69 81       	ldd	r22, Y+1	; 0x01
    32f4:	7a 81       	ldd	r23, Y+2	; 0x02
    32f6:	8b 81       	ldd	r24, Y+3	; 0x03
    32f8:	9c 81       	ldd	r25, Y+4	; 0x04
    32fa:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    32fe:	9b 01       	movw	r18, r22
    3300:	ac 01       	movw	r20, r24
    3302:	c7 01       	movw	r24, r14
    3304:	b6 01       	movw	r22, r12
    3306:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    330a:	6b 01       	movw	r12, r22
    330c:	7c 01       	movw	r14, r24
    330e:	c5 01       	movw	r24, r10
    3310:	b4 01       	movw	r22, r8
    3312:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3316:	6d 83       	std	Y+5, r22	; 0x05
    3318:	7e 83       	std	Y+6, r23	; 0x06
    331a:	77 23       	and	r23, r23
    331c:	34 f4       	brge	.+12     	; 0x332a <imu_read+0x106>
    331e:	22 27       	eor	r18, r18
    3320:	33 27       	eor	r19, r19
    3322:	26 1b       	sub	r18, r22
    3324:	37 0b       	sbc	r19, r23
    3326:	2d 83       	std	Y+5, r18	; 0x05
    3328:	3e 83       	std	Y+6, r19	; 0x06
    332a:	8d 81       	ldd	r24, Y+5	; 0x05
    332c:	9e 81       	ldd	r25, Y+6	; 0x06
    332e:	8b 35       	cpi	r24, 0x5B	; 91
    3330:	91 05       	cpc	r25, r1
    3332:	24 f1       	brlt	.+72     	; 0x337c <imu_read+0x158>
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	44 e3       	ldi	r20, 0x34	; 52
    333a:	53 e4       	ldi	r21, 0x43	; 67
    333c:	c5 01       	movw	r24, r10
    333e:	b4 01       	movw	r22, r8
    3340:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    3344:	69 83       	std	Y+1, r22	; 0x01
    3346:	7a 83       	std	Y+2, r23	; 0x02
    3348:	8b 83       	std	Y+3, r24	; 0x03
    334a:	9c 83       	std	Y+4, r25	; 0x04
    334c:	2d 81       	ldd	r18, Y+5	; 0x05
    334e:	3e 81       	ldd	r19, Y+6	; 0x06
    3350:	b9 01       	movw	r22, r18
    3352:	33 0f       	add	r19, r19
    3354:	88 0b       	sbc	r24, r24
    3356:	99 0b       	sbc	r25, r25
    3358:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    335c:	9b 01       	movw	r18, r22
    335e:	ac 01       	movw	r20, r24
    3360:	69 81       	ldd	r22, Y+1	; 0x01
    3362:	7a 81       	ldd	r23, Y+2	; 0x02
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	9c 81       	ldd	r25, Y+4	; 0x04
    3368:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    336c:	9b 01       	movw	r18, r22
    336e:	ac 01       	movw	r20, r24
    3370:	c5 01       	movw	r24, r10
    3372:	b4 01       	movw	r22, r8
    3374:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    3378:	4b 01       	movw	r8, r22
    337a:	5c 01       	movw	r10, r24
    337c:	c3 01       	movw	r24, r6
    337e:	b2 01       	movw	r22, r4
    3380:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3384:	6d 83       	std	Y+5, r22	; 0x05
    3386:	7e 83       	std	Y+6, r23	; 0x06
    3388:	77 23       	and	r23, r23
    338a:	34 f4       	brge	.+12     	; 0x3398 <imu_read+0x174>
    338c:	22 27       	eor	r18, r18
    338e:	33 27       	eor	r19, r19
    3390:	26 1b       	sub	r18, r22
    3392:	37 0b       	sbc	r19, r23
    3394:	2d 83       	std	Y+5, r18	; 0x05
    3396:	3e 83       	std	Y+6, r19	; 0x06
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	85 3b       	cpi	r24, 0xB5	; 181
    339e:	91 05       	cpc	r25, r1
    33a0:	24 f1       	brlt	.+72     	; 0x33ea <imu_read+0x1c6>
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	44 eb       	ldi	r20, 0xB4	; 180
    33a8:	53 e4       	ldi	r21, 0x43	; 67
    33aa:	c3 01       	movw	r24, r6
    33ac:	b2 01       	movw	r22, r4
    33ae:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    33b2:	69 83       	std	Y+1, r22	; 0x01
    33b4:	7a 83       	std	Y+2, r23	; 0x02
    33b6:	8b 83       	std	Y+3, r24	; 0x03
    33b8:	9c 83       	std	Y+4, r25	; 0x04
    33ba:	2d 81       	ldd	r18, Y+5	; 0x05
    33bc:	3e 81       	ldd	r19, Y+6	; 0x06
    33be:	b9 01       	movw	r22, r18
    33c0:	33 0f       	add	r19, r19
    33c2:	88 0b       	sbc	r24, r24
    33c4:	99 0b       	sbc	r25, r25
    33c6:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    33ca:	9b 01       	movw	r18, r22
    33cc:	ac 01       	movw	r20, r24
    33ce:	69 81       	ldd	r22, Y+1	; 0x01
    33d0:	7a 81       	ldd	r23, Y+2	; 0x02
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	9c 81       	ldd	r25, Y+4	; 0x04
    33d6:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    33da:	9b 01       	movw	r18, r22
    33dc:	ac 01       	movw	r20, r24
    33de:	c3 01       	movw	r24, r6
    33e0:	b2 01       	movw	r22, r4
    33e2:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    33e6:	2b 01       	movw	r4, r22
    33e8:	3c 01       	movw	r6, r24
    33ea:	c7 01       	movw	r24, r14
    33ec:	b6 01       	movw	r22, r12
    33ee:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    33f2:	6d 54       	subi	r22, 0x4D	; 77
    33f4:	7f 4f       	sbci	r23, 0xFF	; 255
    33f6:	67 36       	cpi	r22, 0x67	; 103
    33f8:	71 40       	sbci	r23, 0x01	; 1
    33fa:	50 f5       	brcc	.+84     	; 0x3450 <imu_read+0x22c>
    33fc:	c5 01       	movw	r24, r10
    33fe:	b4 01       	movw	r22, r8
    3400:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3404:	67 5a       	subi	r22, 0xA7	; 167
    3406:	7f 4f       	sbci	r23, 0xFF	; 255
    3408:	63 3b       	cpi	r22, 0xB3	; 179
    340a:	71 05       	cpc	r23, r1
    340c:	08 f5       	brcc	.+66     	; 0x3450 <imu_read+0x22c>
    340e:	c3 01       	movw	r24, r6
    3410:	b2 01       	movw	r22, r4
    3412:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3416:	6d 54       	subi	r22, 0x4D	; 77
    3418:	7f 4f       	sbci	r23, 0xFF	; 255
    341a:	67 36       	cpi	r22, 0x67	; 103
    341c:	71 40       	sbci	r23, 0x01	; 1
    341e:	c0 f4       	brcc	.+48     	; 0x3450 <imu_read+0x22c>
    3420:	c0 92 fc 20 	sts	0x20FC, r12	; 0x8020fc <roll>
    3424:	d0 92 fd 20 	sts	0x20FD, r13	; 0x8020fd <roll+0x1>
    3428:	e0 92 fe 20 	sts	0x20FE, r14	; 0x8020fe <roll+0x2>
    342c:	f0 92 ff 20 	sts	0x20FF, r15	; 0x8020ff <roll+0x3>
    3430:	80 92 00 21 	sts	0x2100, r8	; 0x802100 <pitch>
    3434:	90 92 01 21 	sts	0x2101, r9	; 0x802101 <pitch+0x1>
    3438:	a0 92 02 21 	sts	0x2102, r10	; 0x802102 <pitch+0x2>
    343c:	b0 92 03 21 	sts	0x2103, r11	; 0x802103 <pitch+0x3>
    3440:	40 92 f4 20 	sts	0x20F4, r4	; 0x8020f4 <angle>
    3444:	50 92 f5 20 	sts	0x20F5, r5	; 0x8020f5 <angle+0x1>
    3448:	60 92 f6 20 	sts	0x20F6, r6	; 0x8020f6 <angle+0x2>
    344c:	70 92 f7 20 	sts	0x20F7, r7	; 0x8020f7 <angle+0x3>
    3450:	26 96       	adiw	r28, 0x06	; 6
    3452:	cd bf       	out	0x3d, r28	; 61
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	ff 90       	pop	r15
    345c:	ef 90       	pop	r14
    345e:	df 90       	pop	r13
    3460:	cf 90       	pop	r12
    3462:	bf 90       	pop	r11
    3464:	af 90       	pop	r10
    3466:	9f 90       	pop	r9
    3468:	8f 90       	pop	r8
    346a:	7f 90       	pop	r7
    346c:	6f 90       	pop	r6
    346e:	5f 90       	pop	r5
    3470:	4f 90       	pop	r4
    3472:	08 95       	ret

00003474 <state_check>:
    3474:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <state>
    3478:	81 30       	cpi	r24, 0x01	; 1
    347a:	81 f1       	breq	.+96     	; 0x34dc <state_check+0x68>
    347c:	38 f0       	brcs	.+14     	; 0x348c <state_check+0x18>
    347e:	82 30       	cpi	r24, 0x02	; 2
    3480:	09 f4       	brne	.+2      	; 0x3484 <state_check+0x10>
    3482:	55 c0       	rjmp	.+170    	; 0x352e <state_check+0xba>
    3484:	83 30       	cpi	r24, 0x03	; 3
    3486:	09 f4       	brne	.+2      	; 0x348a <state_check+0x16>
    3488:	f4 c0       	rjmp	.+488    	; 0x3672 <state_check+0x1fe>
    348a:	7c c0       	rjmp	.+248    	; 0x3584 <state_check+0x110>
    348c:	60 91 16 21 	lds	r22, 0x2116	; 0x802116 <velocity>
    3490:	70 91 17 21 	lds	r23, 0x2117	; 0x802117 <velocity+0x1>
    3494:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <velocity+0x2>
    3498:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <velocity+0x3>
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	40 ea       	ldi	r20, 0xA0	; 160
    34a2:	50 e4       	ldi	r21, 0x40	; 64
    34a4:	0e 94 98 2b 	call	0x5730	; 0x5730 <__cmpsf2>
    34a8:	88 23       	and	r24, r24
    34aa:	0c f0       	brlt	.+2      	; 0x34ae <state_check+0x3a>
    34ac:	e2 c0       	rjmp	.+452    	; 0x3672 <state_check+0x1fe>
    34ae:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <alt>
    34b2:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <alt+0x1>
    34b6:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <alt+0x2>
    34ba:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <alt+0x3>
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	41 ee       	ldi	r20, 0xE1	; 225
    34c4:	53 e4       	ldi	r21, 0x43	; 67
    34c6:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <__gesf2>
    34ca:	18 16       	cp	r1, r24
    34cc:	0c f0       	brlt	.+2      	; 0x34d0 <state_check+0x5c>
    34ce:	d1 c0       	rjmp	.+418    	; 0x3672 <state_check+0x1fe>
    34d0:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <state>
    34d4:	8f 5f       	subi	r24, 0xFF	; 255
    34d6:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <state>
    34da:	08 95       	ret
    34dc:	60 91 16 21 	lds	r22, 0x2116	; 0x802116 <velocity>
    34e0:	70 91 17 21 	lds	r23, 0x2117	; 0x802117 <velocity+0x1>
    34e4:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <velocity+0x2>
    34e8:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <velocity+0x3>
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	40 ea       	ldi	r20, 0xA0	; 160
    34f2:	50 e4       	ldi	r21, 0x40	; 64
    34f4:	0e 94 98 2b 	call	0x5730	; 0x5730 <__cmpsf2>
    34f8:	88 23       	and	r24, r24
    34fa:	84 f4       	brge	.+32     	; 0x351c <state_check+0xa8>
    34fc:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <alt>
    3500:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <alt+0x1>
    3504:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <alt+0x2>
    3508:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <alt+0x3>
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	41 ee       	ldi	r20, 0xE1	; 225
    3512:	53 e4       	ldi	r21, 0x43	; 67
    3514:	0e 94 98 2b 	call	0x5730	; 0x5730 <__cmpsf2>
    3518:	88 23       	and	r24, r24
    351a:	1c f0       	brlt	.+6      	; 0x3522 <state_check+0xae>
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <released>
    3522:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <state>
    3526:	8f 5f       	subi	r24, 0xFF	; 255
    3528:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <state>
    352c:	08 95       	ret
    352e:	60 91 16 21 	lds	r22, 0x2116	; 0x802116 <velocity>
    3532:	70 91 17 21 	lds	r23, 0x2117	; 0x802117 <velocity+0x1>
    3536:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <velocity+0x2>
    353a:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <velocity+0x3>
    353e:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3542:	9b 01       	movw	r18, r22
    3544:	77 23       	and	r23, r23
    3546:	24 f4       	brge	.+8      	; 0x3550 <state_check+0xdc>
    3548:	22 27       	eor	r18, r18
    354a:	33 27       	eor	r19, r19
    354c:	26 1b       	sub	r18, r22
    354e:	37 0b       	sbc	r19, r23
    3550:	25 30       	cpi	r18, 0x05	; 5
    3552:	31 05       	cpc	r19, r1
    3554:	8c f0       	brlt	.+34     	; 0x3578 <state_check+0x104>
    3556:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <alt>
    355a:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <alt+0x1>
    355e:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <alt+0x2>
    3562:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <alt+0x3>
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 98 2b 	call	0x5730	; 0x5730 <__cmpsf2>
    3572:	88 23       	and	r24, r24
    3574:	0c f0       	brlt	.+2      	; 0x3578 <state_check+0x104>
    3576:	7d c0       	rjmp	.+250    	; 0x3672 <state_check+0x1fe>
    3578:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <state>
    357c:	8f 5f       	subi	r24, 0xFF	; 255
    357e:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <state>
    3582:	08 95       	ret
    3584:	60 91 16 21 	lds	r22, 0x2116	; 0x802116 <velocity>
    3588:	70 91 17 21 	lds	r23, 0x2117	; 0x802117 <velocity+0x1>
    358c:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <velocity+0x2>
    3590:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <velocity+0x3>
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	40 ea       	ldi	r20, 0xA0	; 160
    359a:	50 e4       	ldi	r21, 0x40	; 64
    359c:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <__gesf2>
    35a0:	18 16       	cp	r1, r24
    35a2:	14 f4       	brge	.+4      	; 0x35a8 <state_check+0x134>
    35a4:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <state>
    35a8:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <alt>
    35ac:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <alt+0x1>
    35b0:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <alt+0x2>
    35b4:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <alt+0x3>
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	41 ee       	ldi	r20, 0xE1	; 225
    35be:	53 e4       	ldi	r21, 0x43	; 67
    35c0:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <__gesf2>
    35c4:	18 16       	cp	r1, r24
    35c6:	9c f4       	brge	.+38     	; 0x35ee <state_check+0x17a>
    35c8:	60 91 16 21 	lds	r22, 0x2116	; 0x802116 <velocity>
    35cc:	70 91 17 21 	lds	r23, 0x2117	; 0x802117 <velocity+0x1>
    35d0:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <velocity+0x2>
    35d4:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <velocity+0x3>
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 ea       	ldi	r20, 0xA0	; 160
    35de:	50 e4       	ldi	r21, 0x40	; 64
    35e0:	0e 94 98 2b 	call	0x5730	; 0x5730 <__cmpsf2>
    35e4:	88 23       	and	r24, r24
    35e6:	1c f4       	brge	.+6      	; 0x35ee <state_check+0x17a>
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <state>
    35ee:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <alt>
    35f2:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <alt+0x1>
    35f6:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <alt+0x2>
    35fa:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <alt+0x3>
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	41 ee       	ldi	r20, 0xE1	; 225
    3604:	53 e4       	ldi	r21, 0x43	; 67
    3606:	0e 94 98 2b 	call	0x5730	; 0x5730 <__cmpsf2>
    360a:	88 23       	and	r24, r24
    360c:	3c f4       	brge	.+14     	; 0x361c <state_check+0x1a8>
    360e:	80 91 4f 21 	lds	r24, 0x214F	; 0x80214f <released>
    3612:	88 23       	and	r24, r24
    3614:	19 f0       	breq	.+6      	; 0x361c <state_check+0x1a8>
    3616:	82 e0       	ldi	r24, 0x02	; 2
    3618:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <state>
    361c:	60 91 16 21 	lds	r22, 0x2116	; 0x802116 <velocity>
    3620:	70 91 17 21 	lds	r23, 0x2117	; 0x802117 <velocity+0x1>
    3624:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <velocity+0x2>
    3628:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <velocity+0x3>
    362c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3630:	9b 01       	movw	r18, r22
    3632:	77 23       	and	r23, r23
    3634:	24 f4       	brge	.+8      	; 0x363e <state_check+0x1ca>
    3636:	22 27       	eor	r18, r18
    3638:	33 27       	eor	r19, r19
    363a:	26 1b       	sub	r18, r22
    363c:	37 0b       	sbc	r19, r23
    363e:	25 30       	cpi	r18, 0x05	; 5
    3640:	31 05       	cpc	r19, r1
    3642:	bc f4       	brge	.+46     	; 0x3672 <state_check+0x1fe>
    3644:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <alt>
    3648:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <alt+0x1>
    364c:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <alt+0x2>
    3650:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <alt+0x3>
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	40 e2       	ldi	r20, 0x20	; 32
    365a:	51 e4       	ldi	r21, 0x41	; 65
    365c:	0e 94 98 2b 	call	0x5730	; 0x5730 <__cmpsf2>
    3660:	88 23       	and	r24, r24
    3662:	3c f4       	brge	.+14     	; 0x3672 <state_check+0x1fe>
    3664:	80 91 4f 21 	lds	r24, 0x214F	; 0x80214f <released>
    3668:	88 23       	and	r24, r24
    366a:	19 f0       	breq	.+6      	; 0x3672 <state_check+0x1fe>
    366c:	83 e0       	ldi	r24, 0x03	; 3
    366e:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <state>
    3672:	08 95       	ret

00003674 <release_servo_init>:
    3674:	61 e0       	ldi	r22, 0x01	; 1
    3676:	84 e0       	ldi	r24, 0x04	; 4
    3678:	09 d9       	rcall	.-3566   	; 0x288c <sysclk_enable_module>
    367a:	64 e0       	ldi	r22, 0x04	; 4
    367c:	84 e0       	ldi	r24, 0x04	; 4
    367e:	06 d9       	rcall	.-3572   	; 0x288c <sysclk_enable_module>
    3680:	e0 e6       	ldi	r30, 0x60	; 96
    3682:	f6 e0       	ldi	r31, 0x06	; 6
    3684:	80 81       	ld	r24, Z
    3686:	87 60       	ori	r24, 0x07	; 7
    3688:	80 83       	st	Z, r24
    368a:	e0 e0       	ldi	r30, 0x00	; 0
    368c:	f9 e0       	ldi	r31, 0x09	; 9
    368e:	85 e0       	ldi	r24, 0x05	; 5
    3690:	80 83       	st	Z, r24
    3692:	83 e1       	ldi	r24, 0x13	; 19
    3694:	81 83       	std	Z+1, r24	; 0x01
    3696:	80 e1       	ldi	r24, 0x10	; 16
    3698:	97 e2       	ldi	r25, 0x27	; 39
    369a:	86 a3       	std	Z+38, r24	; 0x26
    369c:	97 a3       	std	Z+39, r25	; 0x27
    369e:	86 a1       	ldd	r24, Z+38	; 0x26
    36a0:	97 a1       	ldd	r25, Z+39	; 0x27
    36a2:	88 55       	subi	r24, 0x58	; 88
    36a4:	92 40       	sbci	r25, 0x02	; 2
    36a6:	80 a7       	std	Z+40, r24	; 0x28
    36a8:	91 a7       	std	Z+41, r25	; 0x29
    36aa:	08 95       	ret

000036ac <servo_timer_init>:
    36ac:	e0 e0       	ldi	r30, 0x00	; 0
    36ae:	f6 e0       	ldi	r31, 0x06	; 6
    36b0:	80 81       	ld	r24, Z
    36b2:	84 60       	ori	r24, 0x04	; 4
    36b4:	80 83       	st	Z, r24
    36b6:	84 81       	ldd	r24, Z+4	; 0x04
    36b8:	84 60       	ori	r24, 0x04	; 4
    36ba:	84 83       	std	Z+4, r24	; 0x04
    36bc:	e0 e0       	ldi	r30, 0x00	; 0
    36be:	f9 e0       	ldi	r31, 0x09	; 9
    36c0:	86 a1       	ldd	r24, Z+38	; 0x26
    36c2:	97 a1       	ldd	r25, Z+39	; 0x27
    36c4:	8e 5e       	subi	r24, 0xEE	; 238
    36c6:	92 40       	sbci	r25, 0x02	; 2
    36c8:	82 a7       	std	Z+42, r24	; 0x2a
    36ca:	93 a7       	std	Z+43, r25	; 0x2b
    36cc:	86 a1       	ldd	r24, Z+38	; 0x26
    36ce:	97 a1       	ldd	r25, Z+39	; 0x27
    36d0:	8e 5e       	subi	r24, 0xEE	; 238
    36d2:	92 40       	sbci	r25, 0x02	; 2
    36d4:	84 a7       	std	Z+44, r24	; 0x2c
    36d6:	95 a7       	std	Z+45, r25	; 0x2d
    36d8:	08 95       	ret

000036da <servo_pid>:
    36da:	8f 92       	push	r8
    36dc:	9f 92       	push	r9
    36de:	af 92       	push	r10
    36e0:	bf 92       	push	r11
    36e2:	cf 92       	push	r12
    36e4:	df 92       	push	r13
    36e6:	ef 92       	push	r14
    36e8:	ff 92       	push	r15
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	7c 01       	movw	r14, r24
    36f4:	c0 e0       	ldi	r28, 0x00	; 0
    36f6:	d0 e0       	ldi	r29, 0x00	; 0
    36f8:	00 e0       	ldi	r16, 0x00	; 0
    36fa:	10 e0       	ldi	r17, 0x00	; 0
    36fc:	be 01       	movw	r22, r28
    36fe:	c7 01       	movw	r24, r14
    3700:	0e 94 54 13 	call	0x26a8	; 0x26a8 <rb16_get_nth>
    3704:	08 0f       	add	r16, r24
    3706:	19 1f       	adc	r17, r25
    3708:	21 96       	adiw	r28, 0x01	; 1
    370a:	ca 30       	cpi	r28, 0x0A	; 10
    370c:	d1 05       	cpc	r29, r1
    370e:	b1 f7       	brne	.-20     	; 0x36fc <servo_pid+0x22>
    3710:	60 e0       	ldi	r22, 0x00	; 0
    3712:	70 e0       	ldi	r23, 0x00	; 0
    3714:	c7 01       	movw	r24, r14
    3716:	0e 94 54 13 	call	0x26a8	; 0x26a8 <rb16_get_nth>
    371a:	ec 01       	movw	r28, r24
    371c:	60 91 1f 20 	lds	r22, 0x201F	; 0x80201f <rate>
    3720:	70 91 20 20 	lds	r23, 0x2020	; 0x802020 <rate+0x1>
    3724:	c7 01       	movw	r24, r14
    3726:	40 db       	rcall	.-2432   	; 0x2da8 <diff>
    3728:	6b 01       	movw	r12, r22
    372a:	7c 01       	movw	r14, r24
    372c:	be 01       	movw	r22, r28
    372e:	dd 0f       	add	r29, r29
    3730:	88 0b       	sbc	r24, r24
    3732:	99 0b       	sbc	r25, r25
    3734:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	a9 01       	movw	r20, r18
    373e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	48 ec       	ldi	r20, 0xC8	; 200
    3748:	52 e4       	ldi	r21, 0x42	; 66
    374a:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    374e:	4b 01       	movw	r8, r22
    3750:	5c 01       	movw	r10, r24
    3752:	b8 01       	movw	r22, r16
    3754:	11 0f       	add	r17, r17
    3756:	88 0b       	sbc	r24, r24
    3758:	99 0b       	sbc	r25, r25
    375a:	0e 94 37 2c 	call	0x586e	; 0x586e <__floatsisf>
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	a9 01       	movw	r20, r18
    3764:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	48 ec       	ldi	r20, 0xC8	; 200
    376e:	52 e4       	ldi	r21, 0x42	; 66
    3770:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    3774:	9b 01       	movw	r18, r22
    3776:	ac 01       	movw	r20, r24
    3778:	c5 01       	movw	r24, r10
    377a:	b4 01       	movw	r22, r8
    377c:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    3780:	4b 01       	movw	r8, r22
    3782:	5c 01       	movw	r10, r24
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	a9 01       	movw	r20, r18
    378a:	c7 01       	movw	r24, r14
    378c:	b6 01       	movw	r22, r12
    378e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    3792:	9b 01       	movw	r18, r22
    3794:	ac 01       	movw	r20, r24
    3796:	c5 01       	movw	r24, r10
    3798:	b4 01       	movw	r22, r8
    379a:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e8       	ldi	r19, 0x80	; 128
    37a2:	4b eb       	ldi	r20, 0xBB	; 187
    37a4:	54 e4       	ldi	r21, 0x44	; 68
    37a6:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    37aa:	0e 94 09 2c 	call	0x5812	; 0x5812 <__fixunssfsi>
    37ae:	60 93 25 20 	sts	0x2025, r22	; 0x802025 <servo_pulse>
    37b2:	70 93 26 20 	sts	0x2026, r23	; 0x802026 <servo_pulse+0x1>
    37b6:	60 91 25 20 	lds	r22, 0x2025	; 0x802025 <servo_pulse>
    37ba:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <servo_pulse+0x1>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	4a e7       	ldi	r20, 0x7A	; 122
    37cc:	54 e4       	ldi	r21, 0x44	; 68
    37ce:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divsf3>
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	4a ef       	ldi	r20, 0xFA	; 250
    37d8:	53 e4       	ldi	r21, 0x43	; 67
    37da:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    37de:	0e 94 09 2c 	call	0x5812	; 0x5812 <__fixunssfsi>
    37e2:	e0 e0       	ldi	r30, 0x00	; 0
    37e4:	f9 e0       	ldi	r31, 0x09	; 9
    37e6:	62 a7       	std	Z+42, r22	; 0x2a
    37e8:	73 a7       	std	Z+43, r23	; 0x2b
    37ea:	64 a7       	std	Z+44, r22	; 0x2c
    37ec:	75 a7       	std	Z+45, r23	; 0x2d
    37ee:	df 91       	pop	r29
    37f0:	cf 91       	pop	r28
    37f2:	1f 91       	pop	r17
    37f4:	0f 91       	pop	r16
    37f6:	ff 90       	pop	r15
    37f8:	ef 90       	pop	r14
    37fa:	df 90       	pop	r13
    37fc:	cf 90       	pop	r12
    37fe:	bf 90       	pop	r11
    3800:	af 90       	pop	r10
    3802:	9f 90       	pop	r9
    3804:	8f 90       	pop	r8
    3806:	08 95       	ret

00003808 <clock_init>:
    3808:	61 e0       	ldi	r22, 0x01	; 1
    380a:	85 e0       	ldi	r24, 0x05	; 5
    380c:	3f d8       	rcall	.-3970   	; 0x288c <sysclk_enable_module>
    380e:	e0 e0       	ldi	r30, 0x00	; 0
    3810:	fa e0       	ldi	r31, 0x0A	; 10
    3812:	87 e0       	ldi	r24, 0x07	; 7
    3814:	80 83       	st	Z, r24
    3816:	81 e1       	ldi	r24, 0x11	; 17
    3818:	9a e7       	ldi	r25, 0x7A	; 122
    381a:	86 a3       	std	Z+38, r24	; 0x26
    381c:	97 a3       	std	Z+39, r25	; 0x27
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	86 83       	std	Z+6, r24	; 0x06
    3822:	08 95       	ret

00003824 <buzzer_init>:
    3824:	62 e0       	ldi	r22, 0x02	; 2
    3826:	84 e0       	ldi	r24, 0x04	; 4
    3828:	31 d8       	rcall	.-3998   	; 0x288c <sysclk_enable_module>
    382a:	64 e0       	ldi	r22, 0x04	; 4
    382c:	84 e0       	ldi	r24, 0x04	; 4
    382e:	2e d8       	rcall	.-4004   	; 0x288c <sysclk_enable_module>
    3830:	e0 e6       	ldi	r30, 0x60	; 96
    3832:	f6 e0       	ldi	r31, 0x06	; 6
    3834:	80 81       	ld	r24, Z
    3836:	80 61       	ori	r24, 0x10	; 16
    3838:	80 83       	st	Z, r24
    383a:	e0 e4       	ldi	r30, 0x40	; 64
    383c:	f9 e0       	ldi	r31, 0x09	; 9
    383e:	85 e0       	ldi	r24, 0x05	; 5
    3840:	80 83       	st	Z, r24
    3842:	83 e1       	ldi	r24, 0x13	; 19
    3844:	81 83       	std	Z+1, r24	; 0x01
    3846:	88 eb       	ldi	r24, 0xB8	; 184
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	86 a3       	std	Z+38, r24	; 0x26
    384c:	97 a3       	std	Z+39, r25	; 0x27
    384e:	8c e5       	ldi	r24, 0x5C	; 92
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	80 a7       	std	Z+40, r24	; 0x28
    3854:	91 a7       	std	Z+41, r25	; 0x29
    3856:	08 95       	ret

00003858 <buzzer_stop>:
    3858:	e0 e4       	ldi	r30, 0x40	; 64
    385a:	f9 e0       	ldi	r31, 0x09	; 9
    385c:	16 a2       	std	Z+38, r1	; 0x26
    385e:	17 a2       	std	Z+39, r1	; 0x27
    3860:	10 a6       	std	Z+40, r1	; 0x28
    3862:	11 a6       	std	Z+41, r1	; 0x29
    3864:	08 95       	ret

00003866 <calc_rpm>:
    3866:	cf 92       	push	r12
    3868:	df 92       	push	r13
    386a:	ef 92       	push	r14
    386c:	ff 92       	push	r15
    386e:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <ticks_per_sec>
    3872:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <ticks_per_sec+0x1>
    3876:	c0 90 f8 20 	lds	r12, 0x20F8	; 0x8020f8 <rpm>
    387a:	d0 90 f9 20 	lds	r13, 0x20F9	; 0x8020f9 <rpm+0x1>
    387e:	e0 90 fa 20 	lds	r14, 0x20FA	; 0x8020fa <rpm+0x2>
    3882:	f0 90 fb 20 	lds	r15, 0x20FB	; 0x8020fb <rpm+0x3>
    3886:	2c e3       	ldi	r18, 0x3C	; 60
    3888:	28 9f       	mul	r18, r24
    388a:	b0 01       	movw	r22, r0
    388c:	29 9f       	mul	r18, r25
    388e:	70 0d       	add	r23, r0
    3890:	11 24       	eor	r1, r1
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	0e 94 35 2c 	call	0x586a	; 0x586a <__floatunsisf>
    389a:	a7 01       	movw	r20, r14
    389c:	96 01       	movw	r18, r12
    389e:	0e 94 34 2b 	call	0x5668	; 0x5668 <__addsf3>
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	5f e3       	ldi	r21, 0x3F	; 63
    38aa:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    38ae:	60 93 f8 20 	sts	0x20F8, r22	; 0x8020f8 <rpm>
    38b2:	70 93 f9 20 	sts	0x20F9, r23	; 0x8020f9 <rpm+0x1>
    38b6:	80 93 fa 20 	sts	0x20FA, r24	; 0x8020fa <rpm+0x2>
    38ba:	90 93 fb 20 	sts	0x20FB, r25	; 0x8020fb <rpm+0x3>
    38be:	10 92 36 21 	sts	0x2136, r1	; 0x802136 <ticks_per_sec>
    38c2:	10 92 37 21 	sts	0x2137, r1	; 0x802137 <ticks_per_sec+0x1>
    38c6:	ff 90       	pop	r15
    38c8:	ef 90       	pop	r14
    38ca:	df 90       	pop	r13
    38cc:	cf 90       	pop	r12
    38ce:	08 95       	ret

000038d0 <cali_alt>:
    38d0:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <press>
    38d4:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <press+0x1>
    38d8:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <press+0x2>
    38dc:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <press+0x3>
    38e0:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <ground_p>
    38e4:	90 93 38 20 	sts	0x2038, r25	; 0x802038 <ground_p+0x1>
    38e8:	a0 93 39 20 	sts	0x2039, r26	; 0x802039 <ground_p+0x2>
    38ec:	b0 93 3a 20 	sts	0x203A, r27	; 0x80203a <ground_p+0x3>
    38f0:	2b d9       	rcall	.-3498   	; 0x2b48 <get_temperature>
    38f2:	60 93 33 20 	sts	0x2033, r22	; 0x802033 <ground_t>
    38f6:	70 93 34 20 	sts	0x2034, r23	; 0x802034 <ground_t+0x1>
    38fa:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <ground_t+0x2>
    38fe:	90 93 36 20 	sts	0x2036, r25	; 0x802036 <ground_t+0x3>
    3902:	08 95       	ret

00003904 <cali_ang>:
    3904:	0e 94 16 11 	call	0x222c	; 0x222c <imu_roll>
    3908:	60 93 38 21 	sts	0x2138, r22	; 0x802138 <ref_roll>
    390c:	70 93 39 21 	sts	0x2139, r23	; 0x802139 <ref_roll+0x1>
    3910:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <ref_roll+0x2>
    3914:	90 93 3b 21 	sts	0x213B, r25	; 0x80213b <ref_roll+0x3>
    3918:	0e 94 1f 11 	call	0x223e	; 0x223e <imu_pitch>
    391c:	60 93 21 20 	sts	0x2021, r22	; 0x802021 <ref_pitch>
    3920:	70 93 22 20 	sts	0x2022, r23	; 0x802022 <ref_pitch+0x1>
    3924:	80 93 23 20 	sts	0x2023, r24	; 0x802023 <ref_pitch+0x2>
    3928:	90 93 24 20 	sts	0x2024, r25	; 0x802024 <ref_pitch+0x3>
    392c:	0e 94 28 11 	call	0x2250	; 0x2250 <imu_heading>
    3930:	60 93 3c 21 	sts	0x213C, r22	; 0x80213c <ref_yaw>
    3934:	70 93 3d 21 	sts	0x213D, r23	; 0x80213d <ref_yaw+0x1>
    3938:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <ref_yaw+0x2>
    393c:	90 93 3f 21 	sts	0x213F, r25	; 0x80213f <ref_yaw+0x3>
    3940:	08 95       	ret

00003942 <calibrate>:
    3942:	c6 df       	rcall	.-116    	; 0x38d0 <cali_alt>
    3944:	df cf       	rjmp	.-66     	; 0x3904 <cali_ang>
    3946:	08 95       	ret

00003948 <servo_release>:
    3948:	e0 e0       	ldi	r30, 0x00	; 0
    394a:	f9 e0       	ldi	r31, 0x09	; 9
    394c:	86 a1       	ldd	r24, Z+38	; 0x26
    394e:	97 a1       	ldd	r25, Z+39	; 0x27
    3950:	88 5e       	subi	r24, 0xE8	; 232
    3952:	93 40       	sbci	r25, 0x03	; 3
    3954:	80 a7       	std	Z+40, r24	; 0x28
    3956:	91 a7       	std	Z+41, r25	; 0x29
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <released>
    395e:	08 95       	ret

00003960 <servo_close>:

	released = 1;
}

void servo_close(void){
	TCD0.CCA = TCD0.PER - 600;
    3960:	e0 e0       	ldi	r30, 0x00	; 0
    3962:	f9 e0       	ldi	r31, 0x09	; 9
    3964:	86 a1       	ldd	r24, Z+38	; 0x26
    3966:	97 a1       	ldd	r25, Z+39	; 0x27
    3968:	88 55       	subi	r24, 0x58	; 88
    396a:	92 40       	sbci	r25, 0x02	; 2
    396c:	80 a7       	std	Z+40, r24	; 0x28
    396e:	91 a7       	std	Z+41, r25	; 0x29

	released = 0;
    3970:	10 92 4f 21 	sts	0x214F, r1	; 0x80214f <released>
    3974:	08 95       	ret

00003976 <packet>:
}

void packet(void){
    3976:	2f 92       	push	r2
    3978:	3f 92       	push	r3
    397a:	4f 92       	push	r4
    397c:	5f 92       	push	r5
    397e:	6f 92       	push	r6
    3980:	7f 92       	push	r7
    3982:	8f 92       	push	r8
    3984:	9f 92       	push	r9
    3986:	af 92       	push	r10
    3988:	bf 92       	push	r11
    398a:	cf 92       	push	r12
    398c:	df 92       	push	r13
    398e:	ef 92       	push	r14
    3990:	ff 92       	push	r15
    3992:	0f 93       	push	r16
    3994:	1f 93       	push	r17
    3996:	cf 93       	push	r28
    3998:	df 93       	push	r29
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
    399e:	e9 97       	sbiw	r28, 0x39	; 57
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	de bf       	out	0x3e, r29	; 62
	//XBEE_spi_write(str);
	packets++;
    39a4:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <packets>
    39a8:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <packets+0x1>
    39ac:	01 96       	adiw	r24, 0x01	; 1
    39ae:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <packets>
    39b2:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    39b6:	60 91 f4 20 	lds	r22, 0x20F4	; 0x8020f4 <angle>
    39ba:	70 91 f5 20 	lds	r23, 0x20F5	; 0x8020f5 <angle+0x1>
    39be:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <angle+0x2>
    39c2:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <angle+0x3>
    39c6:	20 91 50 21 	lds	r18, 0x2150	; 0x802150 <state>
    39ca:	29 83       	std	Y+1, r18	; 0x01
    39cc:	40 90 f8 20 	lds	r4, 0x20F8	; 0x8020f8 <rpm>
    39d0:	50 90 f9 20 	lds	r5, 0x20F9	; 0x8020f9 <rpm+0x1>
    39d4:	60 90 fa 20 	lds	r6, 0x20FA	; 0x8020fa <rpm+0x2>
    39d8:	70 90 fb 20 	lds	r7, 0x20FB	; 0x8020fb <rpm+0x3>
    39dc:	80 90 fc 20 	lds	r8, 0x20FC	; 0x8020fc <roll>
    39e0:	90 90 fd 20 	lds	r9, 0x20FD	; 0x8020fd <roll+0x1>
    39e4:	a0 90 fe 20 	lds	r10, 0x20FE	; 0x8020fe <roll+0x2>
    39e8:	b0 90 ff 20 	lds	r11, 0x20FF	; 0x8020ff <roll+0x3>
    39ec:	c0 90 00 21 	lds	r12, 0x2100	; 0x802100 <pitch>
    39f0:	d0 90 01 21 	lds	r13, 0x2101	; 0x802101 <pitch+0x1>
    39f4:	e0 90 02 21 	lds	r14, 0x2102	; 0x802102 <pitch+0x2>
    39f8:	f0 90 03 21 	lds	r15, 0x2103	; 0x802103 <pitch+0x3>
    39fc:	40 91 04 21 	lds	r20, 0x2104	; 0x802104 <gps_sats>
    3a00:	50 91 05 21 	lds	r21, 0x2105	; 0x802105 <gps_sats+0x1>
    3a04:	48 af       	std	Y+56, r20	; 0x38
    3a06:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    3a08:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_alt>
    3a0c:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_alt+0x1>
    3a10:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_alt+0x2>
    3a14:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_alt+0x3>
    3a18:	2a 83       	std	Y+2, r18	; 0x02
    3a1a:	3b 83       	std	Y+3, r19	; 0x03
    3a1c:	4c 83       	std	Y+4, r20	; 0x04
    3a1e:	5d 83       	std	Y+5, r21	; 0x05
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3a20:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_alt>
    3a24:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_alt+0x1>
    3a28:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_alt+0x2>
    3a2c:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_alt+0x3>
    3a30:	2e 83       	std	Y+6, r18	; 0x06
    3a32:	3f 83       	std	Y+7, r19	; 0x07
    3a34:	48 87       	std	Y+8, r20	; 0x08
    3a36:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    3a38:	20 91 0a 21 	lds	r18, 0x210A	; 0x80210a <gps_long>
    3a3c:	30 91 0b 21 	lds	r19, 0x210B	; 0x80210b <gps_long+0x1>
    3a40:	40 91 0c 21 	lds	r20, 0x210C	; 0x80210c <gps_long+0x2>
    3a44:	50 91 0d 21 	lds	r21, 0x210D	; 0x80210d <gps_long+0x3>
    3a48:	2a 87       	std	Y+10, r18	; 0x0a
    3a4a:	3b 87       	std	Y+11, r19	; 0x0b
    3a4c:	4c 87       	std	Y+12, r20	; 0x0c
    3a4e:	5d 87       	std	Y+13, r21	; 0x0d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3a50:	20 91 0a 21 	lds	r18, 0x210A	; 0x80210a <gps_long>
    3a54:	30 91 0b 21 	lds	r19, 0x210B	; 0x80210b <gps_long+0x1>
    3a58:	40 91 0c 21 	lds	r20, 0x210C	; 0x80210c <gps_long+0x2>
    3a5c:	50 91 0d 21 	lds	r21, 0x210D	; 0x80210d <gps_long+0x3>
    3a60:	2e 87       	std	Y+14, r18	; 0x0e
    3a62:	3f 87       	std	Y+15, r19	; 0x0f
    3a64:	48 8b       	std	Y+16, r20	; 0x10
    3a66:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    3a68:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <gps_lat>
    3a6c:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <gps_lat+0x1>
    3a70:	40 91 10 21 	lds	r20, 0x2110	; 0x802110 <gps_lat+0x2>
    3a74:	50 91 11 21 	lds	r21, 0x2111	; 0x802111 <gps_lat+0x3>
    3a78:	2a 8b       	std	Y+18, r18	; 0x12
    3a7a:	3b 8b       	std	Y+19, r19	; 0x13
    3a7c:	4c 8b       	std	Y+20, r20	; 0x14
    3a7e:	5d 8b       	std	Y+21, r21	; 0x15
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3a80:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <gps_lat>
    3a84:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <gps_lat+0x1>
    3a88:	40 91 10 21 	lds	r20, 0x2110	; 0x802110 <gps_lat+0x2>
    3a8c:	50 91 11 21 	lds	r21, 0x2111	; 0x802111 <gps_lat+0x3>
    3a90:	2e 8b       	std	Y+22, r18	; 0x16
    3a92:	3f 8b       	std	Y+23, r19	; 0x17
    3a94:	48 8f       	std	Y+24, r20	; 0x18
    3a96:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    3a98:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <gps_t>
    3a9c:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <gps_t+0x1>
    3aa0:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <gps_t+0x2>
    3aa4:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <gps_t+0x3>
    3aa8:	2a 8f       	std	Y+26, r18	; 0x1a
    3aaa:	3b 8f       	std	Y+27, r19	; 0x1b
    3aac:	4c 8f       	std	Y+28, r20	; 0x1c
    3aae:	5d 8f       	std	Y+29, r21	; 0x1d
    3ab0:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <gps_t>
    3ab4:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <gps_t+0x1>
    3ab8:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <gps_t+0x2>
    3abc:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <gps_t+0x3>
    3ac0:	2e 8f       	std	Y+30, r18	; 0x1e
    3ac2:	3f 8f       	std	Y+31, r19	; 0x1f
    3ac4:	48 a3       	std	Y+32, r20	; 0x20
    3ac6:	59 a3       	std	Y+33, r21	; 0x21
    3ac8:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <gps_t>
    3acc:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <gps_t+0x1>
    3ad0:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <gps_t+0x2>
    3ad4:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <gps_t+0x3>
    3ad8:	2a a3       	std	Y+34, r18	; 0x22
    3ada:	3b a3       	std	Y+35, r19	; 0x23
    3adc:	4c a3       	std	Y+36, r20	; 0x24
    3ade:	5d a3       	std	Y+37, r21	; 0x25
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3ae0:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <volt>
    3ae4:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <volt+0x1>
    3ae8:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <volt+0x2>
    3aec:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <volt+0x3>
    3af0:	2e a3       	std	Y+38, r18	; 0x26
    3af2:	3f a3       	std	Y+39, r19	; 0x27
    3af4:	48 a7       	std	Y+40, r20	; 0x28
    3af6:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    3af8:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <temp>
    3afc:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <temp+0x1>
    3b00:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <temp+0x2>
    3b04:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <temp+0x3>
    3b08:	2a a7       	std	Y+42, r18	; 0x2a
    3b0a:	3b a7       	std	Y+43, r19	; 0x2b
    3b0c:	4c a7       	std	Y+44, r20	; 0x2c
    3b0e:	5d a7       	std	Y+45, r21	; 0x2d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3b10:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <press>
    3b14:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <press+0x1>
    3b18:	40 91 28 21 	lds	r20, 0x2128	; 0x802128 <press+0x2>
    3b1c:	50 91 29 21 	lds	r21, 0x2129	; 0x802129 <press+0x3>
    3b20:	2e a7       	std	Y+46, r18	; 0x2e
    3b22:	3f a7       	std	Y+47, r19	; 0x2f
    3b24:	48 ab       	std	Y+48, r20	; 0x30
    3b26:	59 ab       	std	Y+49, r21	; 0x31
    3b28:	20 91 1e 21 	lds	r18, 0x211E	; 0x80211e <alt>
    3b2c:	30 91 1f 21 	lds	r19, 0x211F	; 0x80211f <alt+0x1>
    3b30:	40 91 20 21 	lds	r20, 0x2120	; 0x802120 <alt+0x2>
    3b34:	50 91 21 21 	lds	r21, 0x2121	; 0x802121 <alt+0x3>
    3b38:	2a ab       	std	Y+50, r18	; 0x32
    3b3a:	3b ab       	std	Y+51, r19	; 0x33
    3b3c:	4c ab       	std	Y+52, r20	; 0x34
    3b3e:	5d ab       	std	Y+53, r21	; 0x35
    3b40:	00 91 2a 21 	lds	r16, 0x212A	; 0x80212a <packets>
    3b44:	10 91 2b 21 	lds	r17, 0x212B	; 0x80212b <packets+0x1>
    3b48:	20 90 2e 21 	lds	r2, 0x212E	; 0x80212e <timer>
    3b4c:	30 90 2f 21 	lds	r3, 0x212F	; 0x80212f <timer+0x1>
    3b50:	40 91 2e 21 	lds	r20, 0x212E	; 0x80212e <timer>
    3b54:	50 91 2f 21 	lds	r21, 0x212F	; 0x80212f <timer+0x1>
    3b58:	4e ab       	std	Y+54, r20	; 0x36
    3b5a:	5f ab       	std	Y+55, r21	; 0x37
    3b5c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3b60:	7f 93       	push	r23
    3b62:	6f 93       	push	r22
    3b64:	1f 92       	push	r1
    3b66:	59 81       	ldd	r21, Y+1	; 0x01
    3b68:	5f 93       	push	r21
    3b6a:	c3 01       	movw	r24, r6
    3b6c:	b2 01       	movw	r22, r4
    3b6e:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3b72:	7f 93       	push	r23
    3b74:	6f 93       	push	r22
    3b76:	c5 01       	movw	r24, r10
    3b78:	b4 01       	movw	r22, r8
    3b7a:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3b7e:	7f 93       	push	r23
    3b80:	6f 93       	push	r22
    3b82:	c7 01       	movw	r24, r14
    3b84:	b6 01       	movw	r22, r12
    3b86:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3b8a:	7f 93       	push	r23
    3b8c:	6f 93       	push	r22
    3b8e:	89 ad       	ldd	r24, Y+57	; 0x39
    3b90:	8f 93       	push	r24
    3b92:	98 ad       	ldd	r25, Y+56	; 0x38
    3b94:	9f 93       	push	r25
    3b96:	6a 81       	ldd	r22, Y+2	; 0x02
    3b98:	7b 81       	ldd	r23, Y+3	; 0x03
    3b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b9e:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3ba2:	9b 01       	movw	r18, r22
    3ba4:	22 0f       	add	r18, r18
    3ba6:	33 1f       	adc	r19, r19
    3ba8:	66 0f       	add	r22, r22
    3baa:	77 1f       	adc	r23, r23
    3bac:	66 0f       	add	r22, r22
    3bae:	77 1f       	adc	r23, r23
    3bb0:	66 0f       	add	r22, r22
    3bb2:	77 1f       	adc	r23, r23
    3bb4:	c9 01       	movw	r24, r18
    3bb6:	86 0f       	add	r24, r22
    3bb8:	97 1f       	adc	r25, r23
    3bba:	6a e0       	ldi	r22, 0x0A	; 10
    3bbc:	70 e0       	ldi	r23, 0x00	; 0
    3bbe:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <__divmodhi4>
    3bc2:	9f 93       	push	r25
    3bc4:	8f 93       	push	r24
    3bc6:	6e 81       	ldd	r22, Y+6	; 0x06
    3bc8:	7f 81       	ldd	r23, Y+7	; 0x07
    3bca:	88 85       	ldd	r24, Y+8	; 0x08
    3bcc:	99 85       	ldd	r25, Y+9	; 0x09
    3bce:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3bd2:	7f 93       	push	r23
    3bd4:	6f 93       	push	r22
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	34 e2       	ldi	r19, 0x24	; 36
    3bda:	44 e7       	ldi	r20, 0x74	; 116
    3bdc:	59 e4       	ldi	r21, 0x49	; 73
    3bde:	6a 85       	ldd	r22, Y+10	; 0x0a
    3be0:	7b 85       	ldd	r23, Y+11	; 0x0b
    3be2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3be4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3be6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    3bea:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3bee:	20 e4       	ldi	r18, 0x40	; 64
    3bf0:	32 e4       	ldi	r19, 0x42	; 66
    3bf2:	4f e0       	ldi	r20, 0x0F	; 15
    3bf4:	50 e0       	ldi	r21, 0x00	; 0
    3bf6:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    3bfa:	9b 01       	movw	r18, r22
    3bfc:	77 23       	and	r23, r23
    3bfe:	24 f4       	brge	.+8      	; 0x3c08 <packet+0x292>
    3c00:	22 27       	eor	r18, r18
    3c02:	33 27       	eor	r19, r19
    3c04:	26 1b       	sub	r18, r22
    3c06:	37 0b       	sbc	r19, r23
    3c08:	c9 01       	movw	r24, r18
    3c0a:	33 0f       	add	r19, r19
    3c0c:	aa 0b       	sbc	r26, r26
    3c0e:	bb 0b       	sbc	r27, r27
    3c10:	bf 93       	push	r27
    3c12:	af 93       	push	r26
    3c14:	9f 93       	push	r25
    3c16:	8f 93       	push	r24
    3c18:	6e 85       	ldd	r22, Y+14	; 0x0e
    3c1a:	7f 85       	ldd	r23, Y+15	; 0x0f
    3c1c:	88 89       	ldd	r24, Y+16	; 0x10
    3c1e:	99 89       	ldd	r25, Y+17	; 0x11
    3c20:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3c24:	7f 93       	push	r23
    3c26:	6f 93       	push	r22
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	34 e2       	ldi	r19, 0x24	; 36
    3c2c:	44 e7       	ldi	r20, 0x74	; 116
    3c2e:	59 e4       	ldi	r21, 0x49	; 73
    3c30:	6a 89       	ldd	r22, Y+18	; 0x12
    3c32:	7b 89       	ldd	r23, Y+19	; 0x13
    3c34:	8c 89       	ldd	r24, Y+20	; 0x14
    3c36:	9d 89       	ldd	r25, Y+21	; 0x15
    3c38:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    3c3c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3c40:	20 e4       	ldi	r18, 0x40	; 64
    3c42:	32 e4       	ldi	r19, 0x42	; 66
    3c44:	4f e0       	ldi	r20, 0x0F	; 15
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    3c4c:	9f 93       	push	r25
    3c4e:	8f 93       	push	r24
    3c50:	7f 93       	push	r23
    3c52:	6f 93       	push	r22
    3c54:	6e 89       	ldd	r22, Y+22	; 0x16
    3c56:	7f 89       	ldd	r23, Y+23	; 0x17
    3c58:	88 8d       	ldd	r24, Y+24	; 0x18
    3c5a:	99 8d       	ldd	r25, Y+25	; 0x19
    3c5c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3c60:	7f 93       	push	r23
    3c62:	6f 93       	push	r22
    3c64:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3c66:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3c68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c6c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3c70:	0f 2e       	mov	r0, r31
    3c72:	f4 e6       	ldi	r31, 0x64	; 100
    3c74:	cf 2e       	mov	r12, r31
    3c76:	d1 2c       	mov	r13, r1
    3c78:	e1 2c       	mov	r14, r1
    3c7a:	f1 2c       	mov	r15, r1
    3c7c:	f0 2d       	mov	r31, r0
    3c7e:	a7 01       	movw	r20, r14
    3c80:	96 01       	movw	r18, r12
    3c82:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    3c86:	7f 93       	push	r23
    3c88:	6f 93       	push	r22
    3c8a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3c8c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3c8e:	88 a1       	ldd	r24, Y+32	; 0x20
    3c90:	99 a1       	ldd	r25, Y+33	; 0x21
    3c92:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3c96:	0f 2e       	mov	r0, r31
    3c98:	f0 e1       	ldi	r31, 0x10	; 16
    3c9a:	8f 2e       	mov	r8, r31
    3c9c:	f7 e2       	ldi	r31, 0x27	; 39
    3c9e:	9f 2e       	mov	r9, r31
    3ca0:	a1 2c       	mov	r10, r1
    3ca2:	b1 2c       	mov	r11, r1
    3ca4:	f0 2d       	mov	r31, r0
    3ca6:	a5 01       	movw	r20, r10
    3ca8:	94 01       	movw	r18, r8
    3caa:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    3cae:	a7 01       	movw	r20, r14
    3cb0:	96 01       	movw	r18, r12
    3cb2:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    3cb6:	3f 93       	push	r19
    3cb8:	2f 93       	push	r18
    3cba:	6a a1       	ldd	r22, Y+34	; 0x22
    3cbc:	7b a1       	ldd	r23, Y+35	; 0x23
    3cbe:	8c a1       	ldd	r24, Y+36	; 0x24
    3cc0:	9d a1       	ldd	r25, Y+37	; 0x25
    3cc2:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3cc6:	a5 01       	movw	r20, r10
    3cc8:	94 01       	movw	r18, r8
    3cca:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    3cce:	3f 93       	push	r19
    3cd0:	2f 93       	push	r18
    3cd2:	6e a1       	ldd	r22, Y+38	; 0x26
    3cd4:	7f a1       	ldd	r23, Y+39	; 0x27
    3cd6:	88 a5       	ldd	r24, Y+40	; 0x28
    3cd8:	99 a5       	ldd	r25, Y+41	; 0x29
    3cda:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3cde:	7f 93       	push	r23
    3ce0:	6f 93       	push	r22
    3ce2:	23 e3       	ldi	r18, 0x33	; 51
    3ce4:	33 e9       	ldi	r19, 0x93	; 147
    3ce6:	48 e8       	ldi	r20, 0x88	; 136
    3ce8:	53 e4       	ldi	r21, 0x43	; 67
    3cea:	6a a5       	ldd	r22, Y+42	; 0x2a
    3cec:	7b a5       	ldd	r23, Y+43	; 0x2b
    3cee:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cf0:	9d a5       	ldd	r25, Y+45	; 0x2d
    3cf2:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    3cf6:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3cfa:	7f 93       	push	r23
    3cfc:	6f 93       	push	r22
    3cfe:	6e a5       	ldd	r22, Y+46	; 0x2e
    3d00:	7f a5       	ldd	r23, Y+47	; 0x2f
    3d02:	88 a9       	ldd	r24, Y+48	; 0x30
    3d04:	99 a9       	ldd	r25, Y+49	; 0x31
    3d06:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3d0a:	9f 93       	push	r25
    3d0c:	8f 93       	push	r24
    3d0e:	7f 93       	push	r23
    3d10:	6f 93       	push	r22
    3d12:	6a a9       	ldd	r22, Y+50	; 0x32
    3d14:	7b a9       	ldd	r23, Y+51	; 0x33
    3d16:	8c a9       	ldd	r24, Y+52	; 0x34
    3d18:	9d a9       	ldd	r25, Y+53	; 0x35
    3d1a:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    3d1e:	7f 93       	push	r23
    3d20:	6f 93       	push	r22
    3d22:	1f 93       	push	r17
    3d24:	0f 93       	push	r16
    3d26:	91 01       	movw	r18, r2
    3d28:	ad ec       	ldi	r26, 0xCD	; 205
    3d2a:	bc ec       	ldi	r27, 0xCC	; 204
    3d2c:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <__umulhisi3>
    3d30:	96 95       	lsr	r25
    3d32:	87 95       	ror	r24
    3d34:	96 95       	lsr	r25
    3d36:	87 95       	ror	r24
    3d38:	96 95       	lsr	r25
    3d3a:	87 95       	ror	r24
    3d3c:	9c 01       	movw	r18, r24
    3d3e:	22 0f       	add	r18, r18
    3d40:	33 1f       	adc	r19, r19
    3d42:	88 0f       	add	r24, r24
    3d44:	99 1f       	adc	r25, r25
    3d46:	88 0f       	add	r24, r24
    3d48:	99 1f       	adc	r25, r25
    3d4a:	88 0f       	add	r24, r24
    3d4c:	99 1f       	adc	r25, r25
    3d4e:	82 0f       	add	r24, r18
    3d50:	93 1f       	adc	r25, r19
    3d52:	28 1a       	sub	r2, r24
    3d54:	39 0a       	sbc	r3, r25
    3d56:	3f 92       	push	r3
    3d58:	2f 92       	push	r2
    3d5a:	2e a9       	ldd	r18, Y+54	; 0x36
    3d5c:	3f a9       	ldd	r19, Y+55	; 0x37
    3d5e:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <__umulhisi3>
    3d62:	96 95       	lsr	r25
    3d64:	87 95       	ror	r24
    3d66:	96 95       	lsr	r25
    3d68:	87 95       	ror	r24
    3d6a:	96 95       	lsr	r25
    3d6c:	87 95       	ror	r24
    3d6e:	9f 93       	push	r25
    3d70:	8f 93       	push	r24
    3d72:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <format+0x1>
    3d76:	8f 93       	push	r24
    3d78:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <format>
    3d7c:	8f 93       	push	r24
    3d7e:	2e e9       	ldi	r18, 0x9E	; 158
    3d80:	31 e2       	ldi	r19, 0x21	; 33
    3d82:	3f 93       	push	r19
    3d84:	2f 93       	push	r18
    3d86:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	de bf       	out	0x3e, r29	; 62
    3d8e:	2e e9       	ldi	r18, 0x9E	; 158
    3d90:	31 e2       	ldi	r19, 0x21	; 33
    3d92:	3f 93       	push	r19
    3d94:	2f 93       	push	r18
    3d96:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <printf>
}
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	e9 96       	adiw	r28, 0x39	; 57
    3da0:	cd bf       	out	0x3d, r28	; 61
    3da2:	de bf       	out	0x3e, r29	; 62
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	1f 91       	pop	r17
    3daa:	0f 91       	pop	r16
    3dac:	ff 90       	pop	r15
    3dae:	ef 90       	pop	r14
    3db0:	df 90       	pop	r13
    3db2:	cf 90       	pop	r12
    3db4:	bf 90       	pop	r11
    3db6:	af 90       	pop	r10
    3db8:	9f 90       	pop	r9
    3dba:	8f 90       	pop	r8
    3dbc:	7f 90       	pop	r7
    3dbe:	6f 90       	pop	r6
    3dc0:	5f 90       	pop	r5
    3dc2:	4f 90       	pop	r4
    3dc4:	3f 90       	pop	r3
    3dc6:	2f 90       	pop	r2
    3dc8:	08 95       	ret

00003dca <eeprom_write_const>:

void eeprom_write_const(void){
    3dca:	4f 92       	push	r4
    3dcc:	5f 92       	push	r5
    3dce:	6f 92       	push	r6
    3dd0:	7f 92       	push	r7
    3dd2:	8f 92       	push	r8
    3dd4:	9f 92       	push	r9
    3dd6:	af 92       	push	r10
    3dd8:	bf 92       	push	r11
    3dda:	cf 92       	push	r12
    3ddc:	df 92       	push	r13
    3dde:	ef 92       	push	r14
    3de0:	ff 92       	push	r15
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	cd b7       	in	r28, 0x3d	; 61
    3dec:	de b7       	in	r29, 0x3e	; 62
    3dee:	a0 97       	sbiw	r28, 0x20	; 32
    3df0:	cd bf       	out	0x3d, r28	; 61
    3df2:	de bf       	out	0x3e, r29	; 62
	uint64_t p = 0;
	uint64_t t = 0;

	memcpy(&p, &ground_p, 8);
    3df4:	a7 e3       	ldi	r26, 0x37	; 55
    3df6:	b0 e2       	ldi	r27, 0x20	; 32
    3df8:	fc 91       	ld	r31, X
    3dfa:	11 96       	adiw	r26, 0x01	; 1
    3dfc:	5c 90       	ld	r5, X
    3dfe:	11 97       	sbiw	r26, 0x01	; 1
    3e00:	12 96       	adiw	r26, 0x02	; 2
    3e02:	6c 90       	ld	r6, X
    3e04:	12 97       	sbiw	r26, 0x02	; 2
    3e06:	13 96       	adiw	r26, 0x03	; 3
    3e08:	7c 90       	ld	r7, X
    3e0a:	13 97       	sbiw	r26, 0x03	; 3
    3e0c:	14 96       	adiw	r26, 0x04	; 4
    3e0e:	8c 90       	ld	r8, X
    3e10:	14 97       	sbiw	r26, 0x04	; 4
    3e12:	15 96       	adiw	r26, 0x05	; 5
    3e14:	9c 90       	ld	r9, X
    3e16:	15 97       	sbiw	r26, 0x05	; 5
    3e18:	16 96       	adiw	r26, 0x06	; 6
    3e1a:	ac 90       	ld	r10, X
    3e1c:	16 97       	sbiw	r26, 0x06	; 6
    3e1e:	17 96       	adiw	r26, 0x07	; 7
    3e20:	4c 90       	ld	r4, X
	memcpy(&t, &ground_t, 8);
    3e22:	a3 e3       	ldi	r26, 0x33	; 51
    3e24:	b0 e2       	ldi	r27, 0x20	; 32
    3e26:	ec 91       	ld	r30, X
    3e28:	11 96       	adiw	r26, 0x01	; 1
    3e2a:	bc 90       	ld	r11, X
    3e2c:	11 97       	sbiw	r26, 0x01	; 1
    3e2e:	12 96       	adiw	r26, 0x02	; 2
    3e30:	cc 90       	ld	r12, X
    3e32:	12 97       	sbiw	r26, 0x02	; 2
    3e34:	13 96       	adiw	r26, 0x03	; 3
    3e36:	dc 90       	ld	r13, X
    3e38:	13 97       	sbiw	r26, 0x03	; 3
    3e3a:	14 96       	adiw	r26, 0x04	; 4
    3e3c:	ec 90       	ld	r14, X
    3e3e:	14 97       	sbiw	r26, 0x04	; 4
    3e40:	15 96       	adiw	r26, 0x05	; 5
    3e42:	fc 90       	ld	r15, X
    3e44:	15 97       	sbiw	r26, 0x05	; 5
    3e46:	16 96       	adiw	r26, 0x06	; 6
    3e48:	1c 91       	ld	r17, X
    3e4a:	16 97       	sbiw	r26, 0x06	; 6
    3e4c:	17 96       	adiw	r26, 0x07	; 7
    3e4e:	ac 91       	ld	r26, X

	uint8_t data[] = {p & 0xFF, (p >> 8) & 0xFF, (p >> 16) & 0xFF, (p >> 24) & 0xFF, (p >> 32) & 0xFF, (p >> 40) & 0xFF, (p >> 48) & 0xFF, p >> 56,
    3e50:	f9 83       	std	Y+1, r31	; 0x01
    3e52:	2f 2f       	mov	r18, r31
    3e54:	35 2d       	mov	r19, r5
    3e56:	46 2d       	mov	r20, r6
    3e58:	57 2d       	mov	r21, r7
    3e5a:	68 2d       	mov	r22, r8
    3e5c:	79 2d       	mov	r23, r9
    3e5e:	8a 2d       	mov	r24, r10
    3e60:	94 2d       	mov	r25, r4
    3e62:	08 e0       	ldi	r16, 0x08	; 8
    3e64:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3e68:	2a 83       	std	Y+2, r18	; 0x02
    3e6a:	2f 2f       	mov	r18, r31
    3e6c:	35 2d       	mov	r19, r5
    3e6e:	46 2d       	mov	r20, r6
    3e70:	57 2d       	mov	r21, r7
    3e72:	68 2d       	mov	r22, r8
    3e74:	79 2d       	mov	r23, r9
    3e76:	8a 2d       	mov	r24, r10
    3e78:	94 2d       	mov	r25, r4
    3e7a:	00 e1       	ldi	r16, 0x10	; 16
    3e7c:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3e80:	2b 83       	std	Y+3, r18	; 0x03
    3e82:	2f 2f       	mov	r18, r31
    3e84:	35 2d       	mov	r19, r5
    3e86:	46 2d       	mov	r20, r6
    3e88:	57 2d       	mov	r21, r7
    3e8a:	68 2d       	mov	r22, r8
    3e8c:	79 2d       	mov	r23, r9
    3e8e:	8a 2d       	mov	r24, r10
    3e90:	94 2d       	mov	r25, r4
    3e92:	08 e1       	ldi	r16, 0x18	; 24
    3e94:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3e98:	2c 83       	std	Y+4, r18	; 0x04
    3e9a:	2f 2f       	mov	r18, r31
    3e9c:	35 2d       	mov	r19, r5
    3e9e:	46 2d       	mov	r20, r6
    3ea0:	57 2d       	mov	r21, r7
    3ea2:	68 2d       	mov	r22, r8
    3ea4:	79 2d       	mov	r23, r9
    3ea6:	8a 2d       	mov	r24, r10
    3ea8:	94 2d       	mov	r25, r4
    3eaa:	00 e2       	ldi	r16, 0x20	; 32
    3eac:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3eb0:	2d 83       	std	Y+5, r18	; 0x05
    3eb2:	2f 2f       	mov	r18, r31
    3eb4:	35 2d       	mov	r19, r5
    3eb6:	46 2d       	mov	r20, r6
    3eb8:	57 2d       	mov	r21, r7
    3eba:	68 2d       	mov	r22, r8
    3ebc:	79 2d       	mov	r23, r9
    3ebe:	8a 2d       	mov	r24, r10
    3ec0:	94 2d       	mov	r25, r4
    3ec2:	08 e2       	ldi	r16, 0x28	; 40
    3ec4:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3ec8:	2e 83       	std	Y+6, r18	; 0x06
    3eca:	2f 2f       	mov	r18, r31
    3ecc:	35 2d       	mov	r19, r5
    3ece:	46 2d       	mov	r20, r6
    3ed0:	57 2d       	mov	r21, r7
    3ed2:	68 2d       	mov	r22, r8
    3ed4:	79 2d       	mov	r23, r9
    3ed6:	8a 2d       	mov	r24, r10
    3ed8:	94 2d       	mov	r25, r4
    3eda:	00 e3       	ldi	r16, 0x30	; 48
    3edc:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3ee0:	2f 83       	std	Y+7, r18	; 0x07
    3ee2:	2f 2f       	mov	r18, r31
    3ee4:	35 2d       	mov	r19, r5
    3ee6:	46 2d       	mov	r20, r6
    3ee8:	57 2d       	mov	r21, r7
    3eea:	68 2d       	mov	r22, r8
    3eec:	79 2d       	mov	r23, r9
    3eee:	8a 2d       	mov	r24, r10
    3ef0:	94 2d       	mov	r25, r4
    3ef2:	08 e3       	ldi	r16, 0x38	; 56
    3ef4:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3ef8:	28 87       	std	Y+8, r18	; 0x08
    3efa:	e9 87       	std	Y+9, r30	; 0x09
    3efc:	2e 2f       	mov	r18, r30
    3efe:	3b 2d       	mov	r19, r11
    3f00:	4c 2d       	mov	r20, r12
    3f02:	5d 2d       	mov	r21, r13
    3f04:	6e 2d       	mov	r22, r14
    3f06:	7f 2d       	mov	r23, r15
    3f08:	81 2f       	mov	r24, r17
    3f0a:	9a 2f       	mov	r25, r26
    3f0c:	08 e0       	ldi	r16, 0x08	; 8
    3f0e:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3f12:	2a 87       	std	Y+10, r18	; 0x0a
    3f14:	2e 2f       	mov	r18, r30
    3f16:	3b 2d       	mov	r19, r11
    3f18:	4c 2d       	mov	r20, r12
    3f1a:	5d 2d       	mov	r21, r13
    3f1c:	6e 2d       	mov	r22, r14
    3f1e:	7f 2d       	mov	r23, r15
    3f20:	81 2f       	mov	r24, r17
    3f22:	9a 2f       	mov	r25, r26
    3f24:	00 e1       	ldi	r16, 0x10	; 16
    3f26:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3f2a:	2b 87       	std	Y+11, r18	; 0x0b
    3f2c:	2e 2f       	mov	r18, r30
    3f2e:	3b 2d       	mov	r19, r11
    3f30:	4c 2d       	mov	r20, r12
    3f32:	5d 2d       	mov	r21, r13
    3f34:	6e 2d       	mov	r22, r14
    3f36:	7f 2d       	mov	r23, r15
    3f38:	81 2f       	mov	r24, r17
    3f3a:	9a 2f       	mov	r25, r26
    3f3c:	08 e1       	ldi	r16, 0x18	; 24
    3f3e:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3f42:	2c 87       	std	Y+12, r18	; 0x0c
    3f44:	2e 2f       	mov	r18, r30
    3f46:	3b 2d       	mov	r19, r11
    3f48:	4c 2d       	mov	r20, r12
    3f4a:	5d 2d       	mov	r21, r13
    3f4c:	6e 2d       	mov	r22, r14
    3f4e:	7f 2d       	mov	r23, r15
    3f50:	81 2f       	mov	r24, r17
    3f52:	9a 2f       	mov	r25, r26
    3f54:	00 e2       	ldi	r16, 0x20	; 32
    3f56:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3f5a:	2d 87       	std	Y+13, r18	; 0x0d
    3f5c:	2e 2f       	mov	r18, r30
    3f5e:	3b 2d       	mov	r19, r11
    3f60:	4c 2d       	mov	r20, r12
    3f62:	5d 2d       	mov	r21, r13
    3f64:	6e 2d       	mov	r22, r14
    3f66:	7f 2d       	mov	r23, r15
    3f68:	81 2f       	mov	r24, r17
    3f6a:	9a 2f       	mov	r25, r26
    3f6c:	08 e2       	ldi	r16, 0x28	; 40
    3f6e:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3f72:	2e 87       	std	Y+14, r18	; 0x0e
    3f74:	2e 2f       	mov	r18, r30
    3f76:	3b 2d       	mov	r19, r11
    3f78:	4c 2d       	mov	r20, r12
    3f7a:	5d 2d       	mov	r21, r13
    3f7c:	6e 2d       	mov	r22, r14
    3f7e:	7f 2d       	mov	r23, r15
    3f80:	81 2f       	mov	r24, r17
    3f82:	9a 2f       	mov	r25, r26
    3f84:	00 e3       	ldi	r16, 0x30	; 48
    3f86:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3f8a:	2f 87       	std	Y+15, r18	; 0x0f
    3f8c:	2e 2f       	mov	r18, r30
    3f8e:	3b 2d       	mov	r19, r11
    3f90:	4c 2d       	mov	r20, r12
    3f92:	5d 2d       	mov	r21, r13
    3f94:	6e 2d       	mov	r22, r14
    3f96:	7f 2d       	mov	r23, r15
    3f98:	81 2f       	mov	r24, r17
    3f9a:	9a 2f       	mov	r25, r26
    3f9c:	08 e3       	ldi	r16, 0x38	; 56
    3f9e:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__lshrdi3>
    3fa2:	28 8b       	std	Y+16, r18	; 0x10
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
    3fa4:	80 e1       	ldi	r24, 0x10	; 16
    3fa6:	eb e3       	ldi	r30, 0x3B	; 59
    3fa8:	f0 e2       	ldi	r31, 0x20	; 32
    3faa:	de 01       	movw	r26, r28
    3fac:	51 96       	adiw	r26, 0x11	; 17
    3fae:	01 90       	ld	r0, Z+
    3fb0:	0d 92       	st	X+, r0
    3fb2:	8a 95       	dec	r24
    3fb4:	e1 f7       	brne	.-8      	; 0x3fae <eeprom_write_const+0x1e4>
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
    3fb6:	83 e3       	ldi	r24, 0x33	; 51
    3fb8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	71 96       	adiw	r30, 0x11	; 17
    3fc0:	ce 01       	movw	r24, r28
    3fc2:	01 96       	adiw	r24, 0x01	; 1
    3fc4:	ae 01       	movw	r20, r28
    3fc6:	4f 5d       	subi	r20, 0xDF	; 223
    3fc8:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 16; i++){
		NVM.ADDR0 = addresses[i];
    3fca:	60 ec       	ldi	r22, 0xC0	; 192
    3fcc:	71 e0       	ldi	r23, 0x01	; 1
    3fce:	21 91       	ld	r18, Z+
    3fd0:	db 01       	movw	r26, r22
    3fd2:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	2d 91       	ld	r18, X+
    3fd8:	cd 01       	movw	r24, r26
    3fda:	db 01       	movw	r26, r22
    3fdc:	14 96       	adiw	r26, 0x04	; 4
    3fde:	2c 93       	st	X, r18
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 16; i++){
    3fe0:	e4 17       	cp	r30, r20
    3fe2:	f5 07       	cpc	r31, r21
    3fe4:	a1 f7       	brne	.-24     	; 0x3fce <eeprom_write_const+0x204>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    3fe6:	e0 ec       	ldi	r30, 0xC0	; 192
    3fe8:	f1 e0       	ldi	r31, 0x01	; 1
    3fea:	85 e3       	ldi	r24, 0x35	; 53
    3fec:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    3fee:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    3ff0:	80 e1       	ldi	r24, 0x10	; 16
    3ff2:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    3ff4:	88 ed       	ldi	r24, 0xD8	; 216
    3ff6:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3ffc:	87 85       	ldd	r24, Z+15	; 0x0f
    3ffe:	88 23       	and	r24, r24
    4000:	ec f3       	brlt	.-6      	; 0x3ffc <eeprom_write_const+0x232>
}
    4002:	a0 96       	adiw	r28, 0x20	; 32
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	1f 91       	pop	r17
    400e:	0f 91       	pop	r16
    4010:	ff 90       	pop	r15
    4012:	ef 90       	pop	r14
    4014:	df 90       	pop	r13
    4016:	cf 90       	pop	r12
    4018:	bf 90       	pop	r11
    401a:	af 90       	pop	r10
    401c:	9f 90       	pop	r9
    401e:	8f 90       	pop	r8
    4020:	7f 90       	pop	r7
    4022:	6f 90       	pop	r6
    4024:	5f 90       	pop	r5
    4026:	4f 90       	pop	r4
    4028:	08 95       	ret

0000402a <eeprom_write>:

void eeprom_write(void){
    402a:	0f 93       	push	r16
    402c:	1f 93       	push	r17
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	a1 97       	sbiw	r28, 0x21	; 33
    4038:	cd bf       	out	0x3d, r28	; 61
    403a:	de bf       	out	0x3e, r29	; 62
	uint16_t a = (uint16_t) ((int16_t) alt); // creates an unsigned int of the altitude
    403c:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <alt>
    4040:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <alt+0x1>
    4044:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <alt+0x2>
    4048:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <alt+0x3>
    404c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4050:	16 2f       	mov	r17, r22
    4052:	07 2f       	mov	r16, r23
	uint16_t v = (uint16_t) ((int16_t) velocity);
    4054:	60 91 16 21 	lds	r22, 0x2116	; 0x802116 <velocity>
    4058:	70 91 17 21 	lds	r23, 0x2117	; 0x802117 <velocity+0x1>
    405c:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <velocity+0x2>
    4060:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <velocity+0x3>
    4064:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4068:	26 2f       	mov	r18, r22
    406a:	37 2f       	mov	r19, r23

	check_write = (check_write + 1) % 100;
    406c:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <check_write>
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	01 96       	adiw	r24, 0x01	; 1
    4074:	64 e6       	ldi	r22, 0x64	; 100
    4076:	70 e0       	ldi	r23, 0x00	; 0
    4078:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <__divmodhi4>
    407c:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <check_write>

	// saves data and addresses in array
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
    4080:	a0 91 2a 21 	lds	r26, 0x212A	; 0x80212a <packets>
    4084:	b0 91 2b 21 	lds	r27, 0x212B	; 0x80212b <packets+0x1>
    4088:	e0 91 2a 21 	lds	r30, 0x212A	; 0x80212a <packets>
    408c:	f0 91 2b 21 	lds	r31, 0x212B	; 0x80212b <packets+0x1>
    4090:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <timer>
    4094:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <timer+0x1>
    4098:	40 91 2e 21 	lds	r20, 0x212E	; 0x80212e <timer>
    409c:	50 91 2f 21 	lds	r21, 0x212F	; 0x80212f <timer+0x1>
    40a0:	90 91 50 21 	lds	r25, 0x2150	; 0x802150 <state>
    40a4:	09 83       	std	Y+1, r16	; 0x01
    40a6:	1a 83       	std	Y+2, r17	; 0x02
    40a8:	bb 83       	std	Y+3, r27	; 0x03
    40aa:	ec 83       	std	Y+4, r30	; 0x04
    40ac:	7d 83       	std	Y+5, r23	; 0x05
    40ae:	4e 83       	std	Y+6, r20	; 0x06
    40b0:	3f 83       	std	Y+7, r19	; 0x07
    40b2:	28 87       	std	Y+8, r18	; 0x08
    40b4:	89 87       	std	Y+9, r24	; 0x09
    40b6:	8a 87       	std	Y+10, r24	; 0x0a
    40b8:	9b 87       	std	Y+11, r25	; 0x0b
    40ba:	8b e0       	ldi	r24, 0x0B	; 11
    40bc:	fe 01       	movw	r30, r28
    40be:	31 96       	adiw	r30, 0x01	; 1
    40c0:	de 01       	movw	r26, r28
    40c2:	1c 96       	adiw	r26, 0x0c	; 12
    40c4:	01 90       	ld	r0, Z+
    40c6:	0d 92       	st	X+, r0
    40c8:	8a 95       	dec	r24
    40ca:	e1 f7       	brne	.-8      	; 0x40c4 <eeprom_write+0x9a>
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};
    40cc:	8b e0       	ldi	r24, 0x0B	; 11
    40ce:	eb e4       	ldi	r30, 0x4B	; 75
    40d0:	f0 e2       	ldi	r31, 0x20	; 32
    40d2:	de 01       	movw	r26, r28
    40d4:	57 96       	adiw	r26, 0x17	; 23
    40d6:	01 90       	ld	r0, Z+
    40d8:	0d 92       	st	X+, r0
    40da:	8a 95       	dec	r24
    40dc:	e1 f7       	brne	.-8      	; 0x40d6 <eeprom_write+0xac>

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
    40de:	83 e3       	ldi	r24, 0x33	; 51
    40e0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < 10; i++){
		NVM.ADDR0 = addresses[i];
    40e8:	e0 ec       	ldi	r30, 0xC0	; 192
    40ea:	f1 e0       	ldi	r31, 0x01	; 1
    40ec:	a7 e1       	ldi	r26, 0x17	; 23
    40ee:	b0 e0       	ldi	r27, 0x00	; 0
    40f0:	ac 0f       	add	r26, r28
    40f2:	bd 1f       	adc	r27, r29
    40f4:	a8 0f       	add	r26, r24
    40f6:	b9 1f       	adc	r27, r25
    40f8:	2c 91       	ld	r18, X
    40fa:	20 83       	st	Z, r18
		NVM.DATA0 = data[i];
    40fc:	ac e0       	ldi	r26, 0x0C	; 12
    40fe:	b0 e0       	ldi	r27, 0x00	; 0
    4100:	ac 0f       	add	r26, r28
    4102:	bd 1f       	adc	r27, r29
    4104:	a8 0f       	add	r26, r24
    4106:	b9 1f       	adc	r27, r25
    4108:	2c 91       	ld	r18, X
    410a:	24 83       	std	Z+4, r18	; 0x04
    410c:	01 96       	adiw	r24, 0x01	; 1
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 10; i++){
    410e:	8a 30       	cpi	r24, 0x0A	; 10
    4110:	91 05       	cpc	r25, r1
    4112:	61 f7       	brne	.-40     	; 0x40ec <eeprom_write+0xc2>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    4114:	e0 ec       	ldi	r30, 0xC0	; 192
    4116:	f1 e0       	ldi	r31, 0x01	; 1
    4118:	85 e3       	ldi	r24, 0x35	; 53
    411a:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    411c:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    411e:	80 e1       	ldi	r24, 0x10	; 16
    4120:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    4122:	88 ed       	ldi	r24, 0xD8	; 216
    4124:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    412a:	87 85       	ldd	r24, Z+15	; 0x0f
    412c:	88 23       	and	r24, r24
    412e:	ec f3       	brlt	.-6      	; 0x412a <eeprom_write+0x100>
}
    4130:	a1 96       	adiw	r28, 0x21	; 33
    4132:	cd bf       	out	0x3d, r28	; 61
    4134:	de bf       	out	0x3e, r29	; 62
    4136:	df 91       	pop	r29
    4138:	cf 91       	pop	r28
    413a:	1f 91       	pop	r17
    413c:	0f 91       	pop	r16
    413e:	08 95       	ret

00004140 <time_update>:
	TCE0.CTRLA = 0x07; // divisor set to 1024 0x07
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void time_update(void){
    4140:	2f 92       	push	r2
    4142:	3f 92       	push	r3
    4144:	4f 92       	push	r4
    4146:	5f 92       	push	r5
    4148:	6f 92       	push	r6
    414a:	7f 92       	push	r7
    414c:	8f 92       	push	r8
    414e:	9f 92       	push	r9
    4150:	af 92       	push	r10
    4152:	bf 92       	push	r11
    4154:	cf 92       	push	r12
    4156:	df 92       	push	r13
    4158:	ef 92       	push	r14
    415a:	ff 92       	push	r15
    415c:	0f 93       	push	r16
    415e:	1f 93       	push	r17
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	cd b7       	in	r28, 0x3d	; 61
    4166:	de b7       	in	r29, 0x3e	; 62
    4168:	ef 97       	sbiw	r28, 0x3f	; 63
    416a:	cd bf       	out	0x3d, r28	; 61
    416c:	de bf       	out	0x3e, r29	; 62
	//packets++;
	
	packets++;
    416e:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <packets>
    4172:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <packets+0x1>
    4176:	01 96       	adiw	r24, 0x01	; 1
    4178:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <packets>
    417c:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <packets+0x1>
	sprintf(str,format,timer,packets,
    4180:	60 91 f4 20 	lds	r22, 0x20F4	; 0x8020f4 <angle>
    4184:	70 91 f5 20 	lds	r23, 0x20F5	; 0x8020f5 <angle+0x1>
    4188:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <angle+0x2>
    418c:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <angle+0x3>
    4190:	20 91 50 21 	lds	r18, 0x2150	; 0x802150 <state>
    4194:	29 83       	std	Y+1, r18	; 0x01
    4196:	40 90 f8 20 	lds	r4, 0x20F8	; 0x8020f8 <rpm>
    419a:	50 90 f9 20 	lds	r5, 0x20F9	; 0x8020f9 <rpm+0x1>
    419e:	60 90 fa 20 	lds	r6, 0x20FA	; 0x8020fa <rpm+0x2>
    41a2:	70 90 fb 20 	lds	r7, 0x20FB	; 0x8020fb <rpm+0x3>
    41a6:	80 90 fc 20 	lds	r8, 0x20FC	; 0x8020fc <roll>
    41aa:	90 90 fd 20 	lds	r9, 0x20FD	; 0x8020fd <roll+0x1>
    41ae:	a0 90 fe 20 	lds	r10, 0x20FE	; 0x8020fe <roll+0x2>
    41b2:	b0 90 ff 20 	lds	r11, 0x20FF	; 0x8020ff <roll+0x3>
    41b6:	c0 90 00 21 	lds	r12, 0x2100	; 0x802100 <pitch>
    41ba:	d0 90 01 21 	lds	r13, 0x2101	; 0x802101 <pitch+0x1>
    41be:	e0 90 02 21 	lds	r14, 0x2102	; 0x802102 <pitch+0x2>
    41c2:	f0 90 03 21 	lds	r15, 0x2103	; 0x802103 <pitch+0x3>
    41c6:	40 91 04 21 	lds	r20, 0x2104	; 0x802104 <gps_sats>
    41ca:	50 91 05 21 	lds	r21, 0x2105	; 0x802105 <gps_sats+0x1>
    41ce:	4e af       	std	Y+62, r20	; 0x3e
    41d0:	5f af       	std	Y+63, r21	; 0x3f
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10, 		(int16_t)volt, ((int16_t) (volt *10)) %10, 
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    41d2:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_alt>
    41d6:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_alt+0x1>
    41da:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_alt+0x2>
    41de:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_alt+0x3>
    41e2:	2a 83       	std	Y+2, r18	; 0x02
    41e4:	3b 83       	std	Y+3, r19	; 0x03
    41e6:	4c 83       	std	Y+4, r20	; 0x04
    41e8:	5d 83       	std	Y+5, r21	; 0x05

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,format,timer,packets,
    41ea:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <gps_alt>
    41ee:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <gps_alt+0x1>
    41f2:	40 91 08 21 	lds	r20, 0x2108	; 0x802108 <gps_alt+0x2>
    41f6:	50 91 09 21 	lds	r21, 0x2109	; 0x802109 <gps_alt+0x3>
    41fa:	2e 83       	std	Y+6, r18	; 0x06
    41fc:	3f 83       	std	Y+7, r19	; 0x07
    41fe:	48 87       	std	Y+8, r20	; 0x08
    4200:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10, 		(int16_t)volt, ((int16_t) (volt *10)) %10, 
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    4202:	20 91 0a 21 	lds	r18, 0x210A	; 0x80210a <gps_long>
    4206:	30 91 0b 21 	lds	r19, 0x210B	; 0x80210b <gps_long+0x1>
    420a:	40 91 0c 21 	lds	r20, 0x210C	; 0x80210c <gps_long+0x2>
    420e:	50 91 0d 21 	lds	r21, 0x210D	; 0x80210d <gps_long+0x3>
    4212:	2a 87       	std	Y+10, r18	; 0x0a
    4214:	3b 87       	std	Y+11, r19	; 0x0b
    4216:	4c 87       	std	Y+12, r20	; 0x0c
    4218:	5d 87       	std	Y+13, r21	; 0x0d

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,format,timer,packets,
    421a:	20 91 0a 21 	lds	r18, 0x210A	; 0x80210a <gps_long>
    421e:	30 91 0b 21 	lds	r19, 0x210B	; 0x80210b <gps_long+0x1>
    4222:	40 91 0c 21 	lds	r20, 0x210C	; 0x80210c <gps_long+0x2>
    4226:	50 91 0d 21 	lds	r21, 0x210D	; 0x80210d <gps_long+0x3>
    422a:	2e 87       	std	Y+14, r18	; 0x0e
    422c:	3f 87       	std	Y+15, r19	; 0x0f
    422e:	48 8b       	std	Y+16, r20	; 0x10
    4230:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10, 		(int16_t)volt, ((int16_t) (volt *10)) %10, 
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    4232:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <gps_lat>
    4236:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <gps_lat+0x1>
    423a:	40 91 10 21 	lds	r20, 0x2110	; 0x802110 <gps_lat+0x2>
    423e:	50 91 11 21 	lds	r21, 0x2111	; 0x802111 <gps_lat+0x3>
    4242:	2a 8b       	std	Y+18, r18	; 0x12
    4244:	3b 8b       	std	Y+19, r19	; 0x13
    4246:	4c 8b       	std	Y+20, r20	; 0x14
    4248:	5d 8b       	std	Y+21, r21	; 0x15

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,format,timer,packets,
    424a:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <gps_lat>
    424e:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <gps_lat+0x1>
    4252:	40 91 10 21 	lds	r20, 0x2110	; 0x802110 <gps_lat+0x2>
    4256:	50 91 11 21 	lds	r21, 0x2111	; 0x802111 <gps_lat+0x3>
    425a:	2e 8b       	std	Y+22, r18	; 0x16
    425c:	3f 8b       	std	Y+23, r19	; 0x17
    425e:	48 8f       	std	Y+24, r20	; 0x18
    4260:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10, 		(int16_t)volt, ((int16_t) (volt *10)) %10, 
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    4262:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <gps_t>
    4266:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <gps_t+0x1>
    426a:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <gps_t+0x2>
    426e:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <gps_t+0x3>
    4272:	2a 8f       	std	Y+26, r18	; 0x1a
    4274:	3b 8f       	std	Y+27, r19	; 0x1b
    4276:	4c 8f       	std	Y+28, r20	; 0x1c
    4278:	5d 8f       	std	Y+29, r21	; 0x1d
    427a:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <gps_t>
    427e:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <gps_t+0x1>
    4282:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <gps_t+0x2>
    4286:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <gps_t+0x3>
    428a:	2e 8f       	std	Y+30, r18	; 0x1e
    428c:	3f 8f       	std	Y+31, r19	; 0x1f
    428e:	48 a3       	std	Y+32, r20	; 0x20
    4290:	59 a3       	std	Y+33, r21	; 0x21
    4292:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <gps_t>
    4296:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <gps_t+0x1>
    429a:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <gps_t+0x2>
    429e:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <gps_t+0x3>
    42a2:	2a a3       	std	Y+34, r18	; 0x22
    42a4:	3b a3       	std	Y+35, r19	; 0x23
    42a6:	4c a3       	std	Y+36, r20	; 0x24
    42a8:	5d a3       	std	Y+37, r21	; 0x25
void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10, 		(int16_t)volt, ((int16_t) (volt *10)) %10, 
    42aa:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <volt>
    42ae:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <volt+0x1>
    42b2:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <volt+0x2>
    42b6:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <volt+0x3>
    42ba:	2e a3       	std	Y+38, r18	; 0x26
    42bc:	3f a3       	std	Y+39, r19	; 0x27
    42be:	48 a7       	std	Y+40, r20	; 0x28
    42c0:	59 a7       	std	Y+41, r21	; 0x29

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,format,timer,packets,
    42c2:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <volt>
    42c6:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <volt+0x1>
    42ca:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <volt+0x2>
    42ce:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <volt+0x3>
    42d2:	2a a7       	std	Y+42, r18	; 0x2a
    42d4:	3b a7       	std	Y+43, r19	; 0x2b
    42d6:	4c a7       	std	Y+44, r20	; 0x2c
    42d8:	5d a7       	std	Y+45, r21	; 0x2d
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10, 		(int16_t)volt, ((int16_t) (volt *10)) %10, 
    42da:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <temp>
    42de:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <temp+0x1>
    42e2:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <temp+0x2>
    42e6:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <temp+0x3>
    42ea:	2e a7       	std	Y+46, r18	; 0x2e
    42ec:	3f a7       	std	Y+47, r19	; 0x2f
    42ee:	48 ab       	std	Y+48, r20	; 0x30
    42f0:	59 ab       	std	Y+49, r21	; 0x31
    42f2:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <temp>
    42f6:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <temp+0x1>
    42fa:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <temp+0x2>
    42fe:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <temp+0x3>
    4302:	2a ab       	std	Y+50, r18	; 0x32
    4304:	3b ab       	std	Y+51, r19	; 0x33
    4306:	4c ab       	std	Y+52, r20	; 0x34
    4308:	5d ab       	std	Y+53, r21	; 0x35

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,format,timer,packets,
    430a:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <press>
    430e:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <press+0x1>
    4312:	40 91 28 21 	lds	r20, 0x2128	; 0x802128 <press+0x2>
    4316:	50 91 29 21 	lds	r21, 0x2129	; 0x802129 <press+0x3>
    431a:	2e ab       	std	Y+54, r18	; 0x36
    431c:	3f ab       	std	Y+55, r19	; 0x37
    431e:	48 af       	std	Y+56, r20	; 0x38
    4320:	59 af       	std	Y+57, r21	; 0x39
    4322:	20 91 1e 21 	lds	r18, 0x211E	; 0x80211e <alt>
    4326:	30 91 1f 21 	lds	r19, 0x211F	; 0x80211f <alt+0x1>
    432a:	40 91 20 21 	lds	r20, 0x2120	; 0x802120 <alt+0x2>
    432e:	50 91 21 21 	lds	r21, 0x2121	; 0x802121 <alt+0x3>
    4332:	2a af       	std	Y+58, r18	; 0x3a
    4334:	3b af       	std	Y+59, r19	; 0x3b
    4336:	4c af       	std	Y+60, r20	; 0x3c
    4338:	5d af       	std	Y+61, r21	; 0x3d
    433a:	20 90 2a 21 	lds	r2, 0x212A	; 0x80212a <packets>
    433e:	30 90 2b 21 	lds	r3, 0x212B	; 0x80212b <packets+0x1>
    4342:	00 91 2e 21 	lds	r16, 0x212E	; 0x80212e <timer>
    4346:	10 91 2f 21 	lds	r17, 0x212F	; 0x80212f <timer+0x1>
    434a:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    434e:	7f 93       	push	r23
    4350:	6f 93       	push	r22
    4352:	1f 92       	push	r1
    4354:	39 81       	ldd	r19, Y+1	; 0x01
    4356:	3f 93       	push	r19
    4358:	c3 01       	movw	r24, r6
    435a:	b2 01       	movw	r22, r4
    435c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4360:	7f 93       	push	r23
    4362:	6f 93       	push	r22
    4364:	c5 01       	movw	r24, r10
    4366:	b4 01       	movw	r22, r8
    4368:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    436c:	7f 93       	push	r23
    436e:	6f 93       	push	r22
    4370:	c7 01       	movw	r24, r14
    4372:	b6 01       	movw	r22, r12
    4374:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4378:	7f 93       	push	r23
    437a:	6f 93       	push	r22
    437c:	4f ad       	ldd	r20, Y+63	; 0x3f
    437e:	4f 93       	push	r20
    4380:	5e ad       	ldd	r21, Y+62	; 0x3e
    4382:	5f 93       	push	r21
    4384:	6a 81       	ldd	r22, Y+2	; 0x02
    4386:	7b 81       	ldd	r23, Y+3	; 0x03
    4388:	8c 81       	ldd	r24, Y+4	; 0x04
    438a:	9d 81       	ldd	r25, Y+5	; 0x05
    438c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4390:	9b 01       	movw	r18, r22
    4392:	22 0f       	add	r18, r18
    4394:	33 1f       	adc	r19, r19
    4396:	66 0f       	add	r22, r22
    4398:	77 1f       	adc	r23, r23
    439a:	66 0f       	add	r22, r22
    439c:	77 1f       	adc	r23, r23
    439e:	66 0f       	add	r22, r22
    43a0:	77 1f       	adc	r23, r23
    43a2:	c9 01       	movw	r24, r18
    43a4:	86 0f       	add	r24, r22
    43a6:	97 1f       	adc	r25, r23
    43a8:	6a e0       	ldi	r22, 0x0A	; 10
    43aa:	70 e0       	ldi	r23, 0x00	; 0
    43ac:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <__divmodhi4>
    43b0:	9f 93       	push	r25
    43b2:	8f 93       	push	r24
    43b4:	6e 81       	ldd	r22, Y+6	; 0x06
    43b6:	7f 81       	ldd	r23, Y+7	; 0x07
    43b8:	88 85       	ldd	r24, Y+8	; 0x08
    43ba:	99 85       	ldd	r25, Y+9	; 0x09
    43bc:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    43c0:	7f 93       	push	r23
    43c2:	6f 93       	push	r22
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	34 e2       	ldi	r19, 0x24	; 36
    43c8:	44 e7       	ldi	r20, 0x74	; 116
    43ca:	59 e4       	ldi	r21, 0x49	; 73
    43cc:	6a 85       	ldd	r22, Y+10	; 0x0a
    43ce:	7b 85       	ldd	r23, Y+11	; 0x0b
    43d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    43d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    43d4:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    43d8:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    43dc:	20 e4       	ldi	r18, 0x40	; 64
    43de:	32 e4       	ldi	r19, 0x42	; 66
    43e0:	4f e0       	ldi	r20, 0x0F	; 15
    43e2:	50 e0       	ldi	r21, 0x00	; 0
    43e4:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    43e8:	9b 01       	movw	r18, r22
    43ea:	77 23       	and	r23, r23
    43ec:	24 f4       	brge	.+8      	; 0x43f6 <time_update+0x2b6>
    43ee:	22 27       	eor	r18, r18
    43f0:	33 27       	eor	r19, r19
    43f2:	26 1b       	sub	r18, r22
    43f4:	37 0b       	sbc	r19, r23
    43f6:	c9 01       	movw	r24, r18
    43f8:	33 0f       	add	r19, r19
    43fa:	aa 0b       	sbc	r26, r26
    43fc:	bb 0b       	sbc	r27, r27
    43fe:	bf 93       	push	r27
    4400:	af 93       	push	r26
    4402:	9f 93       	push	r25
    4404:	8f 93       	push	r24
    4406:	6e 85       	ldd	r22, Y+14	; 0x0e
    4408:	7f 85       	ldd	r23, Y+15	; 0x0f
    440a:	88 89       	ldd	r24, Y+16	; 0x10
    440c:	99 89       	ldd	r25, Y+17	; 0x11
    440e:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4412:	7f 93       	push	r23
    4414:	6f 93       	push	r22
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	34 e2       	ldi	r19, 0x24	; 36
    441a:	44 e7       	ldi	r20, 0x74	; 116
    441c:	59 e4       	ldi	r21, 0x49	; 73
    441e:	6a 89       	ldd	r22, Y+18	; 0x12
    4420:	7b 89       	ldd	r23, Y+19	; 0x13
    4422:	8c 89       	ldd	r24, Y+20	; 0x14
    4424:	9d 89       	ldd	r25, Y+21	; 0x15
    4426:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    442a:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    442e:	20 e4       	ldi	r18, 0x40	; 64
    4430:	32 e4       	ldi	r19, 0x42	; 66
    4432:	4f e0       	ldi	r20, 0x0F	; 15
    4434:	50 e0       	ldi	r21, 0x00	; 0
    4436:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    443a:	9f 93       	push	r25
    443c:	8f 93       	push	r24
    443e:	7f 93       	push	r23
    4440:	6f 93       	push	r22
    4442:	6e 89       	ldd	r22, Y+22	; 0x16
    4444:	7f 89       	ldd	r23, Y+23	; 0x17
    4446:	88 8d       	ldd	r24, Y+24	; 0x18
    4448:	99 8d       	ldd	r25, Y+25	; 0x19
    444a:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    444e:	7f 93       	push	r23
    4450:	6f 93       	push	r22
    4452:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4454:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4456:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4458:	9d 8d       	ldd	r25, Y+29	; 0x1d
    445a:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    445e:	0f 2e       	mov	r0, r31
    4460:	f4 e6       	ldi	r31, 0x64	; 100
    4462:	cf 2e       	mov	r12, r31
    4464:	d1 2c       	mov	r13, r1
    4466:	e1 2c       	mov	r14, r1
    4468:	f1 2c       	mov	r15, r1
    446a:	f0 2d       	mov	r31, r0
    446c:	a7 01       	movw	r20, r14
    446e:	96 01       	movw	r18, r12
    4470:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    4474:	7f 93       	push	r23
    4476:	6f 93       	push	r22
    4478:	6e 8d       	ldd	r22, Y+30	; 0x1e
    447a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    447c:	88 a1       	ldd	r24, Y+32	; 0x20
    447e:	99 a1       	ldd	r25, Y+33	; 0x21
    4480:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4484:	0f 2e       	mov	r0, r31
    4486:	f0 e1       	ldi	r31, 0x10	; 16
    4488:	8f 2e       	mov	r8, r31
    448a:	f7 e2       	ldi	r31, 0x27	; 39
    448c:	9f 2e       	mov	r9, r31
    448e:	a1 2c       	mov	r10, r1
    4490:	b1 2c       	mov	r11, r1
    4492:	f0 2d       	mov	r31, r0
    4494:	a5 01       	movw	r20, r10
    4496:	94 01       	movw	r18, r8
    4498:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    449c:	a7 01       	movw	r20, r14
    449e:	96 01       	movw	r18, r12
    44a0:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    44a4:	3f 93       	push	r19
    44a6:	2f 93       	push	r18
    44a8:	6a a1       	ldd	r22, Y+34	; 0x22
    44aa:	7b a1       	ldd	r23, Y+35	; 0x23
    44ac:	8c a1       	ldd	r24, Y+36	; 0x24
    44ae:	9d a1       	ldd	r25, Y+37	; 0x25
    44b0:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    44b4:	a5 01       	movw	r20, r10
    44b6:	94 01       	movw	r18, r8
    44b8:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <__divmodsi4>
    44bc:	3f 93       	push	r19
    44be:	2f 93       	push	r18
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	40 e2       	ldi	r20, 0x20	; 32
    44c6:	51 e4       	ldi	r21, 0x41	; 65
    44c8:	6e a1       	ldd	r22, Y+38	; 0x26
    44ca:	7f a1       	ldd	r23, Y+39	; 0x27
    44cc:	88 a5       	ldd	r24, Y+40	; 0x28
    44ce:	99 a5       	ldd	r25, Y+41	; 0x29
    44d0:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    44d4:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    44d8:	cb 01       	movw	r24, r22
    44da:	6a e0       	ldi	r22, 0x0A	; 10
    44dc:	70 e0       	ldi	r23, 0x00	; 0
    44de:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <__divmodhi4>
    44e2:	9f 93       	push	r25
    44e4:	8f 93       	push	r24
    44e6:	6a a5       	ldd	r22, Y+42	; 0x2a
    44e8:	7b a5       	ldd	r23, Y+43	; 0x2b
    44ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    44ec:	9d a5       	ldd	r25, Y+45	; 0x2d
    44ee:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    44f2:	7f 93       	push	r23
    44f4:	6f 93       	push	r22
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	40 e2       	ldi	r20, 0x20	; 32
    44fc:	51 e4       	ldi	r21, 0x41	; 65
    44fe:	6e a5       	ldd	r22, Y+46	; 0x2e
    4500:	7f a5       	ldd	r23, Y+47	; 0x2f
    4502:	88 a9       	ldd	r24, Y+48	; 0x30
    4504:	99 a9       	ldd	r25, Y+49	; 0x31
    4506:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsf3>
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	38 eb       	ldi	r19, 0xB8	; 184
    450e:	4a e2       	ldi	r20, 0x2A	; 42
    4510:	55 e4       	ldi	r21, 0x45	; 69
    4512:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    4516:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    451a:	cb 01       	movw	r24, r22
    451c:	6a e0       	ldi	r22, 0x0A	; 10
    451e:	70 e0       	ldi	r23, 0x00	; 0
    4520:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <__divmodhi4>
    4524:	9f 93       	push	r25
    4526:	8f 93       	push	r24
    4528:	23 e3       	ldi	r18, 0x33	; 51
    452a:	33 e9       	ldi	r19, 0x93	; 147
    452c:	48 e8       	ldi	r20, 0x88	; 136
    452e:	53 e4       	ldi	r21, 0x43	; 67
    4530:	6a a9       	ldd	r22, Y+50	; 0x32
    4532:	7b a9       	ldd	r23, Y+51	; 0x33
    4534:	8c a9       	ldd	r24, Y+52	; 0x34
    4536:	9d a9       	ldd	r25, Y+53	; 0x35
    4538:	0e 94 33 2b 	call	0x5666	; 0x5666 <__subsf3>
    453c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4540:	7f 93       	push	r23
    4542:	6f 93       	push	r22
    4544:	6e a9       	ldd	r22, Y+54	; 0x36
    4546:	7f a9       	ldd	r23, Y+55	; 0x37
    4548:	88 ad       	ldd	r24, Y+56	; 0x38
    454a:	99 ad       	ldd	r25, Y+57	; 0x39
    454c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4550:	9f 93       	push	r25
    4552:	8f 93       	push	r24
    4554:	7f 93       	push	r23
    4556:	6f 93       	push	r22
    4558:	6a ad       	ldd	r22, Y+58	; 0x3a
    455a:	7b ad       	ldd	r23, Y+59	; 0x3b
    455c:	8c ad       	ldd	r24, Y+60	; 0x3c
    455e:	9d ad       	ldd	r25, Y+61	; 0x3d
    4560:	0e 94 04 2c 	call	0x5808	; 0x5808 <__fixsfsi>
    4564:	7f 93       	push	r23
    4566:	6f 93       	push	r22
    4568:	3f 92       	push	r3
    456a:	2f 92       	push	r2
    456c:	1f 93       	push	r17
    456e:	0f 93       	push	r16
    4570:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <format+0x1>
    4574:	8f 93       	push	r24
    4576:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <format>
    457a:	8f 93       	push	r24
    457c:	8e e9       	ldi	r24, 0x9E	; 158
    457e:	91 e2       	ldi	r25, 0x21	; 33
    4580:	9f 93       	push	r25
    4582:	8f 93       	push	r24
    4584:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    4588:	cd bf       	out	0x3d, r28	; 61
    458a:	de bf       	out	0x3e, r29	; 62
    458c:	8e e9       	ldi	r24, 0x9E	; 158
    458e:	91 e2       	ldi	r25, 0x21	; 33
    4590:	9f 93       	push	r25
    4592:	8f 93       	push	r24
    4594:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <printf>
	
	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);
	eeprom_write();
    4598:	48 dd       	rcall	.-1392   	; 0x402a <eeprom_write>

	time_flag = 0;
    459a:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <time_flag>
}
    459e:	0f 90       	pop	r0
    45a0:	0f 90       	pop	r0
    45a2:	ef 96       	adiw	r28, 0x3f	; 63
    45a4:	cd bf       	out	0x3d, r28	; 61
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	df 91       	pop	r29
    45aa:	cf 91       	pop	r28
    45ac:	1f 91       	pop	r17
    45ae:	0f 91       	pop	r16
    45b0:	ff 90       	pop	r15
    45b2:	ef 90       	pop	r14
    45b4:	df 90       	pop	r13
    45b6:	cf 90       	pop	r12
    45b8:	bf 90       	pop	r11
    45ba:	af 90       	pop	r10
    45bc:	9f 90       	pop	r9
    45be:	8f 90       	pop	r8
    45c0:	7f 90       	pop	r7
    45c2:	6f 90       	pop	r6
    45c4:	5f 90       	pop	r5
    45c6:	4f 90       	pop	r4
    45c8:	3f 90       	pop	r3
    45ca:	2f 90       	pop	r2
    45cc:	08 95       	ret

000045ce <eeprom_read>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

uint8_t	eeprom_read(uint16_t address){
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
	NVM.CMD = READ_EEPROM;
    45d2:	c0 ec       	ldi	r28, 0xC0	; 192
    45d4:	d1 e0       	ldi	r29, 0x01	; 1
    45d6:	26 e0       	ldi	r18, 0x06	; 6
    45d8:	2a 87       	std	Y+10, r18	; 0x0a
	NVM.ADDR0 = address & 0xFF;
    45da:	88 83       	st	Y, r24
	NVM.ADDR1 = address >> 8;
    45dc:	99 83       	std	Y+1, r25	; 0x01
	CCP = CCP_IOREG_MODE;
    45de:	88 ed       	ldi	r24, 0xD8	; 216
    45e0:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	8b 87       	std	Y+11, r24	; 0x0b
	delay_ms(1);
    45e6:	66 ed       	ldi	r22, 0xD6	; 214
    45e8:	74 e1       	ldi	r23, 0x14	; 20
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	0e 94 81 14 	call	0x2902	; 0x2902 <__portable_avr_delay_cycles>
	uint8_t byte = NVM.DATA0;
    45f2:	8c 81       	ldd	r24, Y+4	; 0x04
	return byte;
}
    45f4:	df 91       	pop	r29
    45f6:	cf 91       	pop	r28
    45f8:	08 95       	ret

000045fa <system_init>:
	}
}


// Sensor functions
void system_init(void){
    45fa:	2f 92       	push	r2
    45fc:	3f 92       	push	r3
    45fe:	4f 92       	push	r4
    4600:	5f 92       	push	r5
    4602:	6f 92       	push	r6
    4604:	7f 92       	push	r7
    4606:	8f 92       	push	r8
    4608:	9f 92       	push	r9
    460a:	af 92       	push	r10
    460c:	bf 92       	push	r11
    460e:	cf 92       	push	r12
    4610:	df 92       	push	r13
    4612:	ef 92       	push	r14
    4614:	ff 92       	push	r15
    4616:	0f 93       	push	r16
    4618:	1f 93       	push	r17
    461a:	cf 93       	push	r28
    461c:	df 93       	push	r29
    461e:	cd b7       	in	r28, 0x3d	; 61
    4620:	de b7       	in	r29, 0x3e	; 62
    4622:	27 97       	sbiw	r28, 0x07	; 7
    4624:	cd bf       	out	0x3d, r28	; 61
    4626:	de bf       	out	0x3e, r29	; 62
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    4628:	0e 94 11 14 	call	0x2822	; 0x2822 <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    462c:	6b ea       	ldi	r22, 0xAB	; 171
    462e:	79 e2       	ldi	r23, 0x29	; 41
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	0e 94 81 14 	call	0x2902	; 0x2902 <__portable_avr_delay_cycles>
	sei();	// Enables global interrupts
    4638:	78 94       	sei

	// Initialization of pins
	PORTC.DIR = 0xBC; // makes Port C have pins, 7, 5, 4, 3, and 2 be output (0b10111100)
    463a:	8c eb       	ldi	r24, 0xBC	; 188
    463c:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // enables all level interrupts
    4640:	87 e0       	ldi	r24, 0x07	; 7
    4642:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// Driver Initialization
	cam_init();				// Initializes the Camera
    4646:	0e 94 38 11 	call	0x2270	; 0x2270 <cam_init>
	data_terminal_init();	// Initializes the OpenLog
    464a:	0e 94 8e 12 	call	0x251c	; 0x251c <data_terminal_init>
	delay_ms(500);			// Delay to ensure clean writing
    464e:	6b ea       	ldi	r22, 0xAB	; 171
    4650:	70 eb       	ldi	r23, 0xB0	; 176
    4652:	88 e2       	ldi	r24, 0x28	; 40
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	0e 94 81 14 	call	0x2902	; 0x2902 <__portable_avr_delay_cycles>

	(*GPS_TERMINAL_SERIAL).CTRLA = USART_RXCINTLVL_HI_gc;
}

void xbee_init(void){
	USARTE0.CTRLA = USART_RXCINTLVL_MED_gc;
    465a:	80 e2       	ldi	r24, 0x20	; 32
    465c:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	// Driver Initialization
	cam_init();				// Initializes the Camera
	data_terminal_init();	// Initializes the OpenLog
	delay_ms(500);			// Delay to ensure clean writing
	xbee_init();			// Sets up XBEE command interrupt
	gps_init();				// Starts the GPS interrupt
    4660:	0e 94 bc 14 	call	0x2978	; 0x2978 <gps_init>
	//buzzer_init();		// Starts the buzzer (used here for debugging)
	//delay_ms(100);

	hall_sensor_init();		// Initializes the hall effect sensor (used here for debugging)
    4664:	0e 94 c6 14 	call	0x298c	; 0x298c <hall_sensor_init>
	thermistor_init();		// Initializes the thermistor
    4668:	0e 94 3f 11 	call	0x227e	; 0x227e <thermistor_init>
	voltage_init();			// Initializes the voltage reader
    466c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <voltage_init>
	spi_init();				// Initializes the SPI communication
    4670:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <spi_init>
	pressure_init();		// Initializes the pressure sensor
    4674:	0e 94 96 14 	call	0x292c	; 0x292c <pressure_init>
	//bno_init();				// Initializes the IMU
	cam_switch();			// Starts the camera (used for debugging)
    4678:	0e 94 31 11 	call	0x2262	; 0x2262 <cam_switch>
	clock_init();			// Starts the clock for data transmission
    467c:	c5 d8       	rcall	.-3702   	; 0x3808 <clock_init>

	release_servo_init();	// Initializes the release servo
    467e:	0e 94 3a 1b 	call	0x3674	; 0x3674 <release_servo_init>
	servo_timer_init();		// Initializes the timer for the servo
    4682:	14 d8       	rcall	.-4056   	; 0x36ac <servo_timer_init>

	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
    4684:	82 e0       	ldi	r24, 0x02	; 2
    4686:	90 e1       	ldi	r25, 0x10	; 16
    4688:	a2 df       	rcall	.-188    	; 0x45ce <eeprom_read>
    468a:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);
    468c:	8f e1       	ldi	r24, 0x1F	; 31
    468e:	90 e1       	ldi	r25, 0x10	; 16
    4690:	9e df       	rcall	.-196    	; 0x45ce <eeprom_read>
    4692:	8a 83       	std	Y+2, r24	; 0x02

	if((b1 == b2) && (b1 != 0xFF)){
    4694:	99 81       	ldd	r25, Y+1	; 0x01
    4696:	8a 81       	ldd	r24, Y+2	; 0x02
    4698:	98 13       	cpse	r25, r24
    469a:	bc c1       	rjmp	.+888    	; 0x4a14 <system_init+0x41a>
    469c:	89 81       	ldd	r24, Y+1	; 0x01
    469e:	8f 3f       	cpi	r24, 0xFF	; 255
    46a0:	09 f4       	brne	.+2      	; 0x46a4 <system_init+0xaa>
		//printf("Reading EEPROM\n");
		uint64_t p =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    46a2:	b8 c1       	rjmp	.+880    	; 0x4a14 <system_init+0x41a>
    46a4:	80 e1       	ldi	r24, 0x10	; 16
    46a6:	90 e1       	ldi	r25, 0x10	; 16
    46a8:	92 df       	rcall	.-220    	; 0x45ce <eeprom_read>
    46aa:	18 2f       	mov	r17, r24
    46ac:	8f e0       	ldi	r24, 0x0F	; 15
    46ae:	90 e1       	ldi	r25, 0x10	; 16
    46b0:	8e df       	rcall	.-228    	; 0x45ce <eeprom_read>
    46b2:	b8 2f       	mov	r27, r24
    46b4:	21 2f       	mov	r18, r17
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	40 e0       	ldi	r20, 0x00	; 0
    46ba:	50 e0       	ldi	r21, 0x00	; 0
    46bc:	60 e0       	ldi	r22, 0x00	; 0
    46be:	70 e0       	ldi	r23, 0x00	; 0
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	08 e3       	ldi	r16, 0x38	; 56
    46c6:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    46ca:	f2 2e       	mov	r15, r18
    46cc:	c3 2e       	mov	r12, r19
    46ce:	d4 2e       	mov	r13, r20
    46d0:	a5 2f       	mov	r26, r21
    46d2:	f6 2f       	mov	r31, r22
    46d4:	e7 2f       	mov	r30, r23
    46d6:	e8 2e       	mov	r14, r24
    46d8:	19 2f       	mov	r17, r25
    46da:	2b 2f       	mov	r18, r27
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	40 e0       	ldi	r20, 0x00	; 0
    46e0:	50 e0       	ldi	r21, 0x00	; 0
    46e2:	60 e0       	ldi	r22, 0x00	; 0
    46e4:	70 e0       	ldi	r23, 0x00	; 0
    46e6:	80 e0       	ldi	r24, 0x00	; 0
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	00 e3       	ldi	r16, 0x30	; 48
    46ec:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    46f0:	f2 2a       	or	r15, r18
    46f2:	c3 2a       	or	r12, r19
    46f4:	d4 2a       	or	r13, r20
    46f6:	9a 2e       	mov	r9, r26
    46f8:	95 2a       	or	r9, r21
    46fa:	af 2e       	mov	r10, r31
    46fc:	a6 2a       	or	r10, r22
    46fe:	be 2e       	mov	r11, r30
    4700:	b7 2a       	or	r11, r23
    4702:	e8 2a       	or	r14, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    4704:	19 2b       	or	r17, r25
    4706:	8e e0       	ldi	r24, 0x0E	; 14
    4708:	90 e1       	ldi	r25, 0x10	; 16
    470a:	61 df       	rcall	.-318    	; 0x45ce <eeprom_read>
    470c:	08 2f       	mov	r16, r24
    470e:	8d e0       	ldi	r24, 0x0D	; 13
    4710:	90 e1       	ldi	r25, 0x10	; 16
    4712:	5d df       	rcall	.-326    	; 0x45ce <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    4714:	28 2e       	mov	r2, r24
    4716:	8c e0       	ldi	r24, 0x0C	; 12
    4718:	90 e1       	ldi	r25, 0x10	; 16
    471a:	59 df       	rcall	.-334    	; 0x45ce <eeprom_read>
    471c:	38 2e       	mov	r3, r24
    471e:	8b e0       	ldi	r24, 0x0B	; 11
    4720:	90 e1       	ldi	r25, 0x10	; 16
    4722:	55 df       	rcall	.-342    	; 0x45ce <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0));
    4724:	48 2e       	mov	r4, r24
    4726:	8a e0       	ldi	r24, 0x0A	; 10
    4728:	90 e1       	ldi	r25, 0x10	; 16
    472a:	51 df       	rcall	.-350    	; 0x45ce <eeprom_read>
    472c:	58 2e       	mov	r5, r24
    472e:	89 e0       	ldi	r24, 0x09	; 9
    4730:	90 e1       	ldi	r25, 0x10	; 16
    4732:	4d df       	rcall	.-358    	; 0x45ce <eeprom_read>
    4734:	e8 2f       	mov	r30, r24
    4736:	20 2f       	mov	r18, r16
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	50 e0       	ldi	r21, 0x00	; 0
    473e:	60 e0       	ldi	r22, 0x00	; 0
    4740:	70 e0       	ldi	r23, 0x00	; 0
    4742:	80 e0       	ldi	r24, 0x00	; 0
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	08 e2       	ldi	r16, 0x28	; 40
    4748:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    474c:	fe 2a       	or	r15, r30
    474e:	f2 2a       	or	r15, r18
    4750:	c3 2a       	or	r12, r19
    4752:	d4 2a       	or	r13, r20
    4754:	a5 2f       	mov	r26, r21
    4756:	a9 29       	or	r26, r9
    4758:	f6 2f       	mov	r31, r22
    475a:	fa 29       	or	r31, r10
    475c:	e7 2f       	mov	r30, r23
    475e:	eb 29       	or	r30, r11
    4760:	b8 2f       	mov	r27, r24
    4762:	be 29       	or	r27, r14
    4764:	e9 2e       	mov	r14, r25
    4766:	e1 2a       	or	r14, r17
    4768:	22 2d       	mov	r18, r2
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	40 e0       	ldi	r20, 0x00	; 0
    476e:	50 e0       	ldi	r21, 0x00	; 0
    4770:	60 e0       	ldi	r22, 0x00	; 0
    4772:	70 e0       	ldi	r23, 0x00	; 0
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	00 e2       	ldi	r16, 0x20	; 32
    477a:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    477e:	f2 2a       	or	r15, r18
    4780:	c3 2a       	or	r12, r19
    4782:	d4 2a       	or	r13, r20
    4784:	a5 2b       	or	r26, r21
    4786:	f6 2b       	or	r31, r22
    4788:	e7 2b       	or	r30, r23
    478a:	b8 2b       	or	r27, r24
    478c:	e9 2a       	or	r14, r25
    478e:	23 2d       	mov	r18, r3
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	40 e0       	ldi	r20, 0x00	; 0
    4794:	50 e0       	ldi	r21, 0x00	; 0
    4796:	60 e0       	ldi	r22, 0x00	; 0
    4798:	70 e0       	ldi	r23, 0x00	; 0
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	08 e1       	ldi	r16, 0x18	; 24
    47a0:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    47a4:	f2 2a       	or	r15, r18
    47a6:	c3 2a       	or	r12, r19
    47a8:	8d 2c       	mov	r8, r13
    47aa:	84 2a       	or	r8, r20
    47ac:	a5 2b       	or	r26, r21
    47ae:	f6 2b       	or	r31, r22
    47b0:	e7 2b       	or	r30, r23
    47b2:	db 2e       	mov	r13, r27
    47b4:	d8 2a       	or	r13, r24
    47b6:	e9 2a       	or	r14, r25
    47b8:	24 2d       	mov	r18, r4
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	40 e0       	ldi	r20, 0x00	; 0
    47be:	50 e0       	ldi	r21, 0x00	; 0
    47c0:	60 e0       	ldi	r22, 0x00	; 0
    47c2:	70 e0       	ldi	r23, 0x00	; 0
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	00 e1       	ldi	r16, 0x10	; 16
    47ca:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    47ce:	f2 2a       	or	r15, r18
    47d0:	c3 2a       	or	r12, r19
    47d2:	84 2a       	or	r8, r20
    47d4:	a5 2b       	or	r26, r21
    47d6:	f6 2b       	or	r31, r22
    47d8:	e7 2b       	or	r30, r23
    47da:	d8 2a       	or	r13, r24
    47dc:	e9 2a       	or	r14, r25
    47de:	25 2d       	mov	r18, r5
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	40 e0       	ldi	r20, 0x00	; 0
    47e4:	50 e0       	ldi	r21, 0x00	; 0
    47e6:	60 e0       	ldi	r22, 0x00	; 0
    47e8:	70 e0       	ldi	r23, 0x00	; 0
    47ea:	80 e0       	ldi	r24, 0x00	; 0
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	08 e0       	ldi	r16, 0x08	; 8
    47f0:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    47f4:	6f 2c       	mov	r6, r15
    47f6:	62 2a       	or	r6, r18
    47f8:	7c 2c       	mov	r7, r12
    47fa:	73 2a       	or	r7, r19
    47fc:	84 2a       	or	r8, r20
    47fe:	9a 2e       	mov	r9, r26
    4800:	95 2a       	or	r9, r21
    4802:	af 2e       	mov	r10, r31
    4804:	a6 2a       	or	r10, r22
    4806:	be 2e       	mov	r11, r30
    4808:	b7 2a       	or	r11, r23
    480a:	d8 2a       	or	r13, r24
		uint64_t t =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    480c:	e9 2a       	or	r14, r25
    480e:	89 e1       	ldi	r24, 0x19	; 25
    4810:	90 e1       	ldi	r25, 0x10	; 16
    4812:	dd de       	rcall	.-582    	; 0x45ce <eeprom_read>
    4814:	18 2f       	mov	r17, r24
    4816:	88 e1       	ldi	r24, 0x18	; 24
    4818:	90 e1       	ldi	r25, 0x10	; 16
    481a:	d9 de       	rcall	.-590    	; 0x45ce <eeprom_read>
    481c:	48 2e       	mov	r4, r24
    481e:	21 2f       	mov	r18, r17
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	40 e0       	ldi	r20, 0x00	; 0
    4824:	50 e0       	ldi	r21, 0x00	; 0
    4826:	60 e0       	ldi	r22, 0x00	; 0
    4828:	70 e0       	ldi	r23, 0x00	; 0
    482a:	80 e0       	ldi	r24, 0x00	; 0
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	08 e3       	ldi	r16, 0x38	; 56
    4830:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4834:	c2 2e       	mov	r12, r18
    4836:	53 2e       	mov	r5, r19
    4838:	b4 2f       	mov	r27, r20
    483a:	a5 2f       	mov	r26, r21
    483c:	f6 2f       	mov	r31, r22
    483e:	e7 2f       	mov	r30, r23
    4840:	f8 2e       	mov	r15, r24
    4842:	19 2f       	mov	r17, r25
    4844:	24 2d       	mov	r18, r4
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	40 e0       	ldi	r20, 0x00	; 0
    484a:	50 e0       	ldi	r21, 0x00	; 0
    484c:	60 e0       	ldi	r22, 0x00	; 0
    484e:	70 e0       	ldi	r23, 0x00	; 0
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	00 e3       	ldi	r16, 0x30	; 48
    4856:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    485a:	c2 2a       	or	r12, r18
    485c:	53 2a       	or	r5, r19
    485e:	5f 82       	std	Y+7, r5	; 0x07
    4860:	2b 2e       	mov	r2, r27
    4862:	24 2a       	or	r2, r20
    4864:	3a 2e       	mov	r3, r26
    4866:	35 2a       	or	r3, r21
    4868:	4f 2e       	mov	r4, r31
    486a:	46 2a       	or	r4, r22
    486c:	5e 2e       	mov	r5, r30
    486e:	57 2a       	or	r5, r23
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    4870:	f8 2a       	or	r15, r24
    4872:	19 2b       	or	r17, r25
    4874:	87 e1       	ldi	r24, 0x17	; 23
    4876:	90 e1       	ldi	r25, 0x10	; 16
    4878:	aa de       	rcall	.-684    	; 0x45ce <eeprom_read>
    487a:	08 2f       	mov	r16, r24
    487c:	86 e1       	ldi	r24, 0x16	; 22
    487e:	90 e1       	ldi	r25, 0x10	; 16
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    4880:	a6 de       	rcall	.-692    	; 0x45ce <eeprom_read>
    4882:	8b 83       	std	Y+3, r24	; 0x03
    4884:	85 e1       	ldi	r24, 0x15	; 21
    4886:	90 e1       	ldi	r25, 0x10	; 16
    4888:	a2 de       	rcall	.-700    	; 0x45ce <eeprom_read>
    488a:	8c 83       	std	Y+4, r24	; 0x04
    488c:	84 e1       	ldi	r24, 0x14	; 20
    488e:	90 e1       	ldi	r25, 0x10	; 16
    4890:	9e de       	rcall	.-708    	; 0x45ce <eeprom_read>
    4892:	8d 83       	std	Y+5, r24	; 0x05
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8   | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0));
    4894:	83 e1       	ldi	r24, 0x13	; 19
    4896:	90 e1       	ldi	r25, 0x10	; 16
    4898:	9a de       	rcall	.-716    	; 0x45ce <eeprom_read>
    489a:	8e 83       	std	Y+6, r24	; 0x06
    489c:	82 e1       	ldi	r24, 0x12	; 18
    489e:	90 e1       	ldi	r25, 0x10	; 16
    48a0:	96 de       	rcall	.-724    	; 0x45ce <eeprom_read>
    48a2:	a8 2f       	mov	r26, r24
    48a4:	e7 e3       	ldi	r30, 0x37	; 55
    48a6:	f0 e2       	ldi	r31, 0x20	; 32
		memcpy(&ground_p, &p, 8);
    48a8:	60 82       	st	Z, r6
    48aa:	71 82       	std	Z+1, r7	; 0x01
    48ac:	82 82       	std	Z+2, r8	; 0x02
    48ae:	93 82       	std	Z+3, r9	; 0x03
    48b0:	a4 82       	std	Z+4, r10	; 0x04
    48b2:	b5 82       	std	Z+5, r11	; 0x05
    48b4:	d6 82       	std	Z+6, r13	; 0x06
    48b6:	e7 82       	std	Z+7, r14	; 0x07
    48b8:	e3 e3       	ldi	r30, 0x33	; 51
    48ba:	f0 e2       	ldi	r31, 0x20	; 32
		memcpy(&ground_t, &t, 8);
    48bc:	20 2f       	mov	r18, r16
    48be:	30 e0       	ldi	r19, 0x00	; 0
    48c0:	40 e0       	ldi	r20, 0x00	; 0
    48c2:	50 e0       	ldi	r21, 0x00	; 0
    48c4:	60 e0       	ldi	r22, 0x00	; 0
    48c6:	70 e0       	ldi	r23, 0x00	; 0
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	08 e2       	ldi	r16, 0x28	; 40
    48ce:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    48d2:	ca 2a       	or	r12, r26
    48d4:	c2 2a       	or	r12, r18
    48d6:	af 80       	ldd	r10, Y+7	; 0x07
    48d8:	a3 2a       	or	r10, r19
    48da:	b4 2e       	mov	r11, r20
    48dc:	b2 28       	or	r11, r2
    48de:	d5 2e       	mov	r13, r21
    48e0:	d3 28       	or	r13, r3
    48e2:	e6 2e       	mov	r14, r22
    48e4:	e4 28       	or	r14, r4
    48e6:	b7 2f       	mov	r27, r23
    48e8:	b5 29       	or	r27, r5
    48ea:	f8 2a       	or	r15, r24
    48ec:	19 2b       	or	r17, r25
    48ee:	2b 81       	ldd	r18, Y+3	; 0x03
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	40 e0       	ldi	r20, 0x00	; 0
    48f4:	50 e0       	ldi	r21, 0x00	; 0
    48f6:	60 e0       	ldi	r22, 0x00	; 0
    48f8:	70 e0       	ldi	r23, 0x00	; 0
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	00 e2       	ldi	r16, 0x20	; 32
    4900:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4904:	c2 2a       	or	r12, r18
    4906:	a3 2a       	or	r10, r19
    4908:	b4 2a       	or	r11, r20
    490a:	d5 2a       	or	r13, r21
    490c:	e6 2a       	or	r14, r22
    490e:	b7 2b       	or	r27, r23
    4910:	f8 2a       	or	r15, r24
    4912:	19 2b       	or	r17, r25
    4914:	2c 81       	ldd	r18, Y+4	; 0x04
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	40 e0       	ldi	r20, 0x00	; 0
    491a:	50 e0       	ldi	r21, 0x00	; 0
    491c:	60 e0       	ldi	r22, 0x00	; 0
    491e:	70 e0       	ldi	r23, 0x00	; 0
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	08 e1       	ldi	r16, 0x18	; 24
    4926:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    492a:	c2 2a       	or	r12, r18
    492c:	a3 2a       	or	r10, r19
    492e:	b4 2a       	or	r11, r20
    4930:	d5 2a       	or	r13, r21
    4932:	e6 2a       	or	r14, r22
    4934:	b7 2b       	or	r27, r23
    4936:	f8 2a       	or	r15, r24
    4938:	19 2b       	or	r17, r25
    493a:	2d 81       	ldd	r18, Y+5	; 0x05
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	40 e0       	ldi	r20, 0x00	; 0
    4940:	50 e0       	ldi	r21, 0x00	; 0
    4942:	60 e0       	ldi	r22, 0x00	; 0
    4944:	70 e0       	ldi	r23, 0x00	; 0
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	00 e1       	ldi	r16, 0x10	; 16
    494c:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4950:	c2 2a       	or	r12, r18
    4952:	a3 2a       	or	r10, r19
    4954:	b4 2a       	or	r11, r20
    4956:	d5 2a       	or	r13, r21
    4958:	e6 2a       	or	r14, r22
    495a:	b7 2b       	or	r27, r23
    495c:	f8 2a       	or	r15, r24
    495e:	19 2b       	or	r17, r25
    4960:	2e 81       	ldd	r18, Y+6	; 0x06
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	40 e0       	ldi	r20, 0x00	; 0
    4966:	50 e0       	ldi	r21, 0x00	; 0
    4968:	60 e0       	ldi	r22, 0x00	; 0
    496a:	70 e0       	ldi	r23, 0x00	; 0
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	08 e0       	ldi	r16, 0x08	; 8
    4972:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4976:	2c 29       	or	r18, r12
    4978:	20 83       	st	Z, r18
    497a:	3a 29       	or	r19, r10
    497c:	31 83       	std	Z+1, r19	; 0x01
    497e:	4b 29       	or	r20, r11
    4980:	42 83       	std	Z+2, r20	; 0x02
    4982:	5d 29       	or	r21, r13
    4984:	53 83       	std	Z+3, r21	; 0x03
    4986:	6e 29       	or	r22, r14
    4988:	64 83       	std	Z+4, r22	; 0x04
    498a:	7b 2b       	or	r23, r27
    498c:	75 83       	std	Z+5, r23	; 0x05
    498e:	8f 29       	or	r24, r15
    4990:	86 83       	std	Z+6, r24	; 0x06
    4992:	91 2b       	or	r25, r17

		alt = (double) ((int16_t) (eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE0)));
    4994:	97 83       	std	Z+7, r25	; 0x07
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	90 e1       	ldi	r25, 0x10	; 16
    499a:	19 de       	rcall	.-974    	; 0x45ce <eeprom_read>
    499c:	18 2f       	mov	r17, r24
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	90 e1       	ldi	r25, 0x10	; 16
    49a2:	15 de       	rcall	.-982    	; 0x45ce <eeprom_read>
    49a4:	61 2f       	mov	r22, r17
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	76 2f       	mov	r23, r22
    49aa:	66 27       	eor	r22, r22
    49ac:	68 2b       	or	r22, r24
    49ae:	07 2e       	mov	r0, r23
    49b0:	00 0c       	add	r0, r0
    49b2:	88 0b       	sbc	r24, r24
    49b4:	99 0b       	sbc	r25, r25
    49b6:	5b d7       	rcall	.+3766   	; 0x586e <__floatsisf>
    49b8:	60 93 1e 21 	sts	0x211E, r22	; 0x80211e <alt>
    49bc:	70 93 1f 21 	sts	0x211F, r23	; 0x80211f <alt+0x1>
    49c0:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <alt+0x2>
    49c4:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <alt+0x3>
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
    49c8:	87 e0       	ldi	r24, 0x07	; 7
    49ca:	90 e1       	ldi	r25, 0x10	; 16
    49cc:	00 de       	rcall	.-1024   	; 0x45ce <eeprom_read>
    49ce:	18 2f       	mov	r17, r24
    49d0:	86 e0       	ldi	r24, 0x06	; 6
    49d2:	90 e1       	ldi	r25, 0x10	; 16
    49d4:	fc dd       	rcall	.-1032   	; 0x45ce <eeprom_read>
    49d6:	21 2f       	mov	r18, r17
    49d8:	30 e0       	ldi	r19, 0x00	; 0
    49da:	32 2f       	mov	r19, r18
    49dc:	22 27       	eor	r18, r18
    49de:	28 2b       	or	r18, r24
    49e0:	20 93 2e 21 	sts	0x212E, r18	; 0x80212e <timer>
    49e4:	30 93 2f 21 	sts	0x212F, r19	; 0x80212f <timer+0x1>
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
    49e8:	84 e0       	ldi	r24, 0x04	; 4
    49ea:	90 e1       	ldi	r25, 0x10	; 16
    49ec:	f0 dd       	rcall	.-1056   	; 0x45ce <eeprom_read>
    49ee:	18 2f       	mov	r17, r24
    49f0:	83 e0       	ldi	r24, 0x03	; 3
    49f2:	90 e1       	ldi	r25, 0x10	; 16
    49f4:	ec dd       	rcall	.-1064   	; 0x45ce <eeprom_read>
    49f6:	21 2f       	mov	r18, r17
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	32 2f       	mov	r19, r18
    49fc:	22 27       	eor	r18, r18
    49fe:	28 2b       	or	r18, r24
    4a00:	20 93 2a 21 	sts	0x212A, r18	; 0x80212a <packets>
    4a04:	30 93 2b 21 	sts	0x212B, r19	; 0x80212b <packets+0x1>
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
    4a08:	85 e0       	ldi	r24, 0x05	; 5
    4a0a:	90 e1       	ldi	r25, 0x10	; 16
    4a0c:	e0 dd       	rcall	.-1088   	; 0x45ce <eeprom_read>
    4a0e:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <state>
	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);

	if((b1 == b2) && (b1 != 0xFF)){
    4a12:	95 c1       	rjmp	.+810    	; 0x4d3e <system_init+0x744>
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
		//printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
	}
	else if(b1 != 0xFF){
    4a14:	89 81       	ldd	r24, Y+1	; 0x01
    4a16:	8f 3f       	cpi	r24, 0xFF	; 255
    4a18:	09 f4       	brne	.+2      	; 0x4a1c <system_init+0x422>
    4a1a:	7a c1       	rjmp	.+756    	; 0x4d10 <system_init+0x716>
		state = -1;
    4a1c:	8f ef       	ldi	r24, 0xFF	; 255
    4a1e:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <state>
		uint64_t p =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    4a22:	80 e1       	ldi	r24, 0x10	; 16
    4a24:	90 e1       	ldi	r25, 0x10	; 16
    4a26:	d3 dd       	rcall	.-1114   	; 0x45ce <eeprom_read>
    4a28:	18 2f       	mov	r17, r24
    4a2a:	8f e0       	ldi	r24, 0x0F	; 15
    4a2c:	90 e1       	ldi	r25, 0x10	; 16
    4a2e:	cf dd       	rcall	.-1122   	; 0x45ce <eeprom_read>
    4a30:	b8 2f       	mov	r27, r24
    4a32:	21 2f       	mov	r18, r17
    4a34:	30 e0       	ldi	r19, 0x00	; 0
    4a36:	40 e0       	ldi	r20, 0x00	; 0
    4a38:	50 e0       	ldi	r21, 0x00	; 0
    4a3a:	60 e0       	ldi	r22, 0x00	; 0
    4a3c:	70 e0       	ldi	r23, 0x00	; 0
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	08 e3       	ldi	r16, 0x38	; 56
    4a44:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4a48:	12 2f       	mov	r17, r18
    4a4a:	c3 2e       	mov	r12, r19
    4a4c:	f4 2e       	mov	r15, r20
    4a4e:	a5 2f       	mov	r26, r21
    4a50:	f6 2f       	mov	r31, r22
    4a52:	e7 2f       	mov	r30, r23
    4a54:	d8 2e       	mov	r13, r24
    4a56:	e9 2e       	mov	r14, r25
    4a58:	2b 2f       	mov	r18, r27
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	40 e0       	ldi	r20, 0x00	; 0
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	60 e0       	ldi	r22, 0x00	; 0
    4a62:	70 e0       	ldi	r23, 0x00	; 0
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	00 e3       	ldi	r16, 0x30	; 48
    4a6a:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4a6e:	12 2b       	or	r17, r18
    4a70:	c3 2a       	or	r12, r19
    4a72:	f4 2a       	or	r15, r20
    4a74:	9a 2e       	mov	r9, r26
    4a76:	95 2a       	or	r9, r21
    4a78:	af 2e       	mov	r10, r31
    4a7a:	a6 2a       	or	r10, r22
		(uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    4a7c:	be 2e       	mov	r11, r30
    4a7e:	b7 2a       	or	r11, r23
    4a80:	d8 2a       	or	r13, r24
    4a82:	e9 2a       	or	r14, r25
    4a84:	8e e0       	ldi	r24, 0x0E	; 14
    4a86:	90 e1       	ldi	r25, 0x10	; 16
    4a88:	a2 dd       	rcall	.-1212   	; 0x45ce <eeprom_read>
    4a8a:	08 2f       	mov	r16, r24
    4a8c:	8d e0       	ldi	r24, 0x0D	; 13
    4a8e:	90 e1       	ldi	r25, 0x10	; 16
		(uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    4a90:	9e dd       	rcall	.-1220   	; 0x45ce <eeprom_read>
    4a92:	28 2e       	mov	r2, r24
    4a94:	8c e0       	ldi	r24, 0x0C	; 12
    4a96:	90 e1       	ldi	r25, 0x10	; 16
    4a98:	9a dd       	rcall	.-1228   	; 0x45ce <eeprom_read>
    4a9a:	38 2e       	mov	r3, r24
    4a9c:	8b e0       	ldi	r24, 0x0B	; 11
    4a9e:	90 e1       	ldi	r25, 0x10	; 16
    4aa0:	96 dd       	rcall	.-1236   	; 0x45ce <eeprom_read>
    4aa2:	48 2e       	mov	r4, r24
		(uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0));
    4aa4:	8a e0       	ldi	r24, 0x0A	; 10
    4aa6:	90 e1       	ldi	r25, 0x10	; 16
    4aa8:	92 dd       	rcall	.-1244   	; 0x45ce <eeprom_read>
    4aaa:	58 2e       	mov	r5, r24
    4aac:	89 e0       	ldi	r24, 0x09	; 9
    4aae:	90 e1       	ldi	r25, 0x10	; 16
    4ab0:	8e dd       	rcall	.-1252   	; 0x45ce <eeprom_read>
    4ab2:	68 2e       	mov	r6, r24
    4ab4:	20 2f       	mov	r18, r16
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	40 e0       	ldi	r20, 0x00	; 0
    4aba:	50 e0       	ldi	r21, 0x00	; 0
    4abc:	60 e0       	ldi	r22, 0x00	; 0
    4abe:	70 e0       	ldi	r23, 0x00	; 0
    4ac0:	80 e0       	ldi	r24, 0x00	; 0
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	08 e2       	ldi	r16, 0x28	; 40
    4ac6:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4aca:	16 29       	or	r17, r6
    4acc:	12 2b       	or	r17, r18
    4ace:	c3 2a       	or	r12, r19
    4ad0:	f4 2a       	or	r15, r20
    4ad2:	a5 2f       	mov	r26, r21
    4ad4:	a9 29       	or	r26, r9
    4ad6:	f6 2f       	mov	r31, r22
    4ad8:	fa 29       	or	r31, r10
    4ada:	e7 2f       	mov	r30, r23
    4adc:	eb 29       	or	r30, r11
    4ade:	d8 2a       	or	r13, r24
    4ae0:	e9 2a       	or	r14, r25
    4ae2:	22 2d       	mov	r18, r2
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	40 e0       	ldi	r20, 0x00	; 0
    4ae8:	50 e0       	ldi	r21, 0x00	; 0
    4aea:	60 e0       	ldi	r22, 0x00	; 0
    4aec:	70 e0       	ldi	r23, 0x00	; 0
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	00 e2       	ldi	r16, 0x20	; 32
    4af4:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4af8:	12 2b       	or	r17, r18
    4afa:	c3 2a       	or	r12, r19
    4afc:	f4 2a       	or	r15, r20
    4afe:	a5 2b       	or	r26, r21
    4b00:	f6 2b       	or	r31, r22
    4b02:	e7 2b       	or	r30, r23
    4b04:	d8 2a       	or	r13, r24
    4b06:	e9 2a       	or	r14, r25
    4b08:	23 2d       	mov	r18, r3
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
    4b0c:	40 e0       	ldi	r20, 0x00	; 0
    4b0e:	50 e0       	ldi	r21, 0x00	; 0
    4b10:	60 e0       	ldi	r22, 0x00	; 0
    4b12:	70 e0       	ldi	r23, 0x00	; 0
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	08 e1       	ldi	r16, 0x18	; 24
    4b1a:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4b1e:	12 2b       	or	r17, r18
    4b20:	c3 2a       	or	r12, r19
    4b22:	f4 2a       	or	r15, r20
    4b24:	a5 2b       	or	r26, r21
    4b26:	f6 2b       	or	r31, r22
    4b28:	e7 2b       	or	r30, r23
    4b2a:	d8 2a       	or	r13, r24
    4b2c:	e9 2a       	or	r14, r25
    4b2e:	24 2d       	mov	r18, r4
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	40 e0       	ldi	r20, 0x00	; 0
    4b34:	50 e0       	ldi	r21, 0x00	; 0
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	00 e1       	ldi	r16, 0x10	; 16
    4b40:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4b44:	12 2b       	or	r17, r18
    4b46:	c3 2a       	or	r12, r19
    4b48:	f4 2a       	or	r15, r20
    4b4a:	a5 2b       	or	r26, r21
    4b4c:	f6 2b       	or	r31, r22
    4b4e:	e7 2b       	or	r30, r23
    4b50:	d8 2a       	or	r13, r24
    4b52:	e9 2a       	or	r14, r25
    4b54:	25 2d       	mov	r18, r5
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	40 e0       	ldi	r20, 0x00	; 0
    4b5a:	50 e0       	ldi	r21, 0x00	; 0
    4b5c:	60 e0       	ldi	r22, 0x00	; 0
    4b5e:	70 e0       	ldi	r23, 0x00	; 0
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	08 e0       	ldi	r16, 0x08	; 8
    4b66:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4b6a:	61 2e       	mov	r6, r17
    4b6c:	62 2a       	or	r6, r18
    4b6e:	7c 2c       	mov	r7, r12
    4b70:	73 2a       	or	r7, r19
    4b72:	8f 2c       	mov	r8, r15
    4b74:	84 2a       	or	r8, r20
    4b76:	9a 2e       	mov	r9, r26
    4b78:	95 2a       	or	r9, r21
    4b7a:	af 2e       	mov	r10, r31
    4b7c:	a6 2a       	or	r10, r22
    4b7e:	be 2e       	mov	r11, r30
    4b80:	b7 2a       	or	r11, r23
    4b82:	d8 2a       	or	r13, r24
    4b84:	e9 2a       	or	r14, r25
		uint64_t t =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    4b86:	89 e1       	ldi	r24, 0x19	; 25
    4b88:	90 e1       	ldi	r25, 0x10	; 16
    4b8a:	21 dd       	rcall	.-1470   	; 0x45ce <eeprom_read>
    4b8c:	18 2f       	mov	r17, r24
    4b8e:	88 e1       	ldi	r24, 0x18	; 24
    4b90:	90 e1       	ldi	r25, 0x10	; 16
    4b92:	1d dd       	rcall	.-1478   	; 0x45ce <eeprom_read>
    4b94:	48 2e       	mov	r4, r24
    4b96:	21 2f       	mov	r18, r17
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	40 e0       	ldi	r20, 0x00	; 0
    4b9c:	50 e0       	ldi	r21, 0x00	; 0
    4b9e:	60 e0       	ldi	r22, 0x00	; 0
    4ba0:	70 e0       	ldi	r23, 0x00	; 0
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	08 e3       	ldi	r16, 0x38	; 56
    4ba8:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4bac:	c2 2e       	mov	r12, r18
    4bae:	53 2e       	mov	r5, r19
    4bb0:	b4 2f       	mov	r27, r20
    4bb2:	a5 2f       	mov	r26, r21
    4bb4:	f6 2f       	mov	r31, r22
    4bb6:	e7 2f       	mov	r30, r23
    4bb8:	f8 2e       	mov	r15, r24
    4bba:	19 2f       	mov	r17, r25
    4bbc:	24 2d       	mov	r18, r4
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	40 e0       	ldi	r20, 0x00	; 0
    4bc2:	50 e0       	ldi	r21, 0x00	; 0
    4bc4:	60 e0       	ldi	r22, 0x00	; 0
    4bc6:	70 e0       	ldi	r23, 0x00	; 0
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	00 e3       	ldi	r16, 0x30	; 48
    4bce:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4bd2:	c2 2a       	or	r12, r18
    4bd4:	53 2a       	or	r5, r19
    4bd6:	5f 82       	std	Y+7, r5	; 0x07
    4bd8:	2b 2e       	mov	r2, r27
    4bda:	24 2a       	or	r2, r20
    4bdc:	3a 2e       	mov	r3, r26
    4bde:	35 2a       	or	r3, r21
    4be0:	4f 2e       	mov	r4, r31
    4be2:	46 2a       	or	r4, r22
		(uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    4be4:	5e 2e       	mov	r5, r30
    4be6:	57 2a       	or	r5, r23
    4be8:	f8 2a       	or	r15, r24
    4bea:	19 2b       	or	r17, r25
    4bec:	87 e1       	ldi	r24, 0x17	; 23
    4bee:	90 e1       	ldi	r25, 0x10	; 16
    4bf0:	ee dc       	rcall	.-1572   	; 0x45ce <eeprom_read>
    4bf2:	08 2f       	mov	r16, r24
    4bf4:	86 e1       	ldi	r24, 0x16	; 22
    4bf6:	90 e1       	ldi	r25, 0x10	; 16
		(uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    4bf8:	ea dc       	rcall	.-1580   	; 0x45ce <eeprom_read>
    4bfa:	8b 83       	std	Y+3, r24	; 0x03
    4bfc:	85 e1       	ldi	r24, 0x15	; 21
    4bfe:	90 e1       	ldi	r25, 0x10	; 16
    4c00:	e6 dc       	rcall	.-1588   	; 0x45ce <eeprom_read>
    4c02:	8c 83       	std	Y+4, r24	; 0x04
    4c04:	84 e1       	ldi	r24, 0x14	; 20
    4c06:	90 e1       	ldi	r25, 0x10	; 16
    4c08:	e2 dc       	rcall	.-1596   	; 0x45ce <eeprom_read>
    4c0a:	8d 83       	std	Y+5, r24	; 0x05
		(uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8   | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0));
    4c0c:	83 e1       	ldi	r24, 0x13	; 19
    4c0e:	90 e1       	ldi	r25, 0x10	; 16
    4c10:	de dc       	rcall	.-1604   	; 0x45ce <eeprom_read>
    4c12:	8e 83       	std	Y+6, r24	; 0x06
    4c14:	82 e1       	ldi	r24, 0x12	; 18
    4c16:	90 e1       	ldi	r25, 0x10	; 16
    4c18:	da dc       	rcall	.-1612   	; 0x45ce <eeprom_read>
    4c1a:	a8 2f       	mov	r26, r24
    4c1c:	e7 e3       	ldi	r30, 0x37	; 55
    4c1e:	f0 e2       	ldi	r31, 0x20	; 32
		memcpy(&ground_p, &p, 8);
    4c20:	60 82       	st	Z, r6
    4c22:	71 82       	std	Z+1, r7	; 0x01
    4c24:	82 82       	std	Z+2, r8	; 0x02
    4c26:	93 82       	std	Z+3, r9	; 0x03
    4c28:	a4 82       	std	Z+4, r10	; 0x04
    4c2a:	b5 82       	std	Z+5, r11	; 0x05
    4c2c:	d6 82       	std	Z+6, r13	; 0x06
    4c2e:	e7 82       	std	Z+7, r14	; 0x07
    4c30:	e3 e3       	ldi	r30, 0x33	; 51
    4c32:	f0 e2       	ldi	r31, 0x20	; 32
		memcpy(&ground_t, &t, 8);		
    4c34:	20 2f       	mov	r18, r16
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	40 e0       	ldi	r20, 0x00	; 0
    4c3a:	50 e0       	ldi	r21, 0x00	; 0
    4c3c:	60 e0       	ldi	r22, 0x00	; 0
    4c3e:	70 e0       	ldi	r23, 0x00	; 0
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	08 e2       	ldi	r16, 0x28	; 40
    4c46:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4c4a:	ca 2a       	or	r12, r26
    4c4c:	c2 2a       	or	r12, r18
    4c4e:	af 80       	ldd	r10, Y+7	; 0x07
    4c50:	a3 2a       	or	r10, r19
    4c52:	b4 2e       	mov	r11, r20
    4c54:	b2 28       	or	r11, r2
    4c56:	d5 2e       	mov	r13, r21
    4c58:	d3 28       	or	r13, r3
    4c5a:	e6 2e       	mov	r14, r22
    4c5c:	e4 28       	or	r14, r4
    4c5e:	b7 2f       	mov	r27, r23
    4c60:	b5 29       	or	r27, r5
    4c62:	f8 2a       	or	r15, r24
    4c64:	19 2b       	or	r17, r25
    4c66:	2b 81       	ldd	r18, Y+3	; 0x03
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	40 e0       	ldi	r20, 0x00	; 0
    4c6c:	50 e0       	ldi	r21, 0x00	; 0
    4c6e:	60 e0       	ldi	r22, 0x00	; 0
    4c70:	70 e0       	ldi	r23, 0x00	; 0
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	00 e2       	ldi	r16, 0x20	; 32
    4c78:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4c7c:	c2 2a       	or	r12, r18
    4c7e:	a3 2a       	or	r10, r19
    4c80:	b4 2a       	or	r11, r20
    4c82:	d5 2a       	or	r13, r21
    4c84:	e6 2a       	or	r14, r22
    4c86:	b7 2b       	or	r27, r23
    4c88:	f8 2a       	or	r15, r24
    4c8a:	19 2b       	or	r17, r25
    4c8c:	2c 81       	ldd	r18, Y+4	; 0x04
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	40 e0       	ldi	r20, 0x00	; 0
    4c92:	50 e0       	ldi	r21, 0x00	; 0
    4c94:	60 e0       	ldi	r22, 0x00	; 0
    4c96:	70 e0       	ldi	r23, 0x00	; 0
    4c98:	80 e0       	ldi	r24, 0x00	; 0
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	08 e1       	ldi	r16, 0x18	; 24
    4c9e:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4ca2:	c2 2a       	or	r12, r18
    4ca4:	a3 2a       	or	r10, r19
    4ca6:	b4 2a       	or	r11, r20
    4ca8:	d5 2a       	or	r13, r21
    4caa:	e6 2a       	or	r14, r22
    4cac:	b7 2b       	or	r27, r23
    4cae:	f8 2a       	or	r15, r24
    4cb0:	19 2b       	or	r17, r25
    4cb2:	2d 81       	ldd	r18, Y+5	; 0x05
    4cb4:	30 e0       	ldi	r19, 0x00	; 0
    4cb6:	40 e0       	ldi	r20, 0x00	; 0
    4cb8:	50 e0       	ldi	r21, 0x00	; 0
    4cba:	60 e0       	ldi	r22, 0x00	; 0
    4cbc:	70 e0       	ldi	r23, 0x00	; 0
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	00 e1       	ldi	r16, 0x10	; 16
    4cc4:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4cc8:	c2 2a       	or	r12, r18
    4cca:	a3 2a       	or	r10, r19
    4ccc:	b4 2a       	or	r11, r20
    4cce:	d5 2a       	or	r13, r21
    4cd0:	e6 2a       	or	r14, r22
    4cd2:	b7 2b       	or	r27, r23
    4cd4:	f8 2a       	or	r15, r24
    4cd6:	19 2b       	or	r17, r25
    4cd8:	2e 81       	ldd	r18, Y+6	; 0x06
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	40 e0       	ldi	r20, 0x00	; 0
    4cde:	50 e0       	ldi	r21, 0x00	; 0
    4ce0:	60 e0       	ldi	r22, 0x00	; 0
    4ce2:	70 e0       	ldi	r23, 0x00	; 0
    4ce4:	80 e0       	ldi	r24, 0x00	; 0
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	08 e0       	ldi	r16, 0x08	; 8
    4cea:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__ashldi3>
    4cee:	2c 29       	or	r18, r12
    4cf0:	20 83       	st	Z, r18
    4cf2:	3a 29       	or	r19, r10
    4cf4:	31 83       	std	Z+1, r19	; 0x01
    4cf6:	4b 29       	or	r20, r11
    4cf8:	42 83       	std	Z+2, r20	; 0x02
    4cfa:	5d 29       	or	r21, r13
    4cfc:	53 83       	std	Z+3, r21	; 0x03
    4cfe:	6e 29       	or	r22, r14
    4d00:	64 83       	std	Z+4, r22	; 0x04
    4d02:	7b 2b       	or	r23, r27
    4d04:	75 83       	std	Z+5, r23	; 0x05
    4d06:	8f 29       	or	r24, r15
    4d08:	86 83       	std	Z+6, r24	; 0x06
    4d0a:	91 2b       	or	r25, r17
    4d0c:	97 83       	std	Z+7, r25	; 0x07
    4d0e:	17 c0       	rjmp	.+46     	; 0x4d3e <system_init+0x744>
    4d10:	0e 94 01 15 	call	0x2a02	; 0x2a02 <get_pressure>
	}
	else{
		// Initialization of variables
		ground_p = get_pressure();
    4d14:	60 93 37 20 	sts	0x2037, r22	; 0x802037 <ground_p>
    4d18:	70 93 38 20 	sts	0x2038, r23	; 0x802038 <ground_p+0x1>
    4d1c:	80 93 39 20 	sts	0x2039, r24	; 0x802039 <ground_p+0x2>
    4d20:	90 93 3a 20 	sts	0x203A, r25	; 0x80203a <ground_p+0x3>
    4d24:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <get_temperature>
		ground_t = get_temperature();
    4d28:	60 93 33 20 	sts	0x2033, r22	; 0x802033 <ground_t>
    4d2c:	70 93 34 20 	sts	0x2034, r23	; 0x802034 <ground_t+0x1>
    4d30:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <ground_t+0x2>
    4d34:	90 93 36 20 	sts	0x2036, r25	; 0x802036 <ground_t+0x3>
    4d38:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <state>
		state = 0;
    4d3c:	46 d8       	rcall	.-3956   	; 0x3dca <eeprom_write_const>
		eeprom_write_const();
    4d3e:	0e 94 3a 1a 	call	0x3474	; 0x3474 <state_check>
	}

	state_check();
    4d42:	27 96       	adiw	r28, 0x07	; 7
    4d44:	cd bf       	out	0x3d, r28	; 61
}
    4d46:	de bf       	out	0x3e, r29	; 62
    4d48:	df 91       	pop	r29
    4d4a:	cf 91       	pop	r28
    4d4c:	1f 91       	pop	r17
    4d4e:	0f 91       	pop	r16
    4d50:	ff 90       	pop	r15
    4d52:	ef 90       	pop	r14
    4d54:	df 90       	pop	r13
    4d56:	cf 90       	pop	r12
    4d58:	bf 90       	pop	r11
    4d5a:	af 90       	pop	r10
    4d5c:	9f 90       	pop	r9
    4d5e:	8f 90       	pop	r8
    4d60:	7f 90       	pop	r7
    4d62:	6f 90       	pop	r6
    4d64:	5f 90       	pop	r5
    4d66:	4f 90       	pop	r4
    4d68:	3f 90       	pop	r3
    4d6a:	2f 90       	pop	r2
    4d6c:	08 95       	ret

00004d6e <eeprom_erase>:
    4d6e:	83 e3       	ldi	r24, 0x33	; 51
    4d70:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    4d74:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    4d76:	e0 ec       	ldi	r30, 0xC0	; 192
    4d78:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    4d7a:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    4d7c:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    4d7e:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    4d80:	8f 5f       	subi	r24, 0xFF	; 255
    4d82:	80 32       	cpi	r24, 0x20	; 32
    4d84:	d9 f7       	brne	.-10     	; 0x4d7c <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}

	NVM.CMD = ERASE_EEPROM;
    4d86:	e0 ec       	ldi	r30, 0xC0	; 192
    4d88:	f1 e0       	ldi	r31, 0x01	; 1
    4d8a:	80 e3       	ldi	r24, 0x30	; 48
    4d8c:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    4d8e:	88 ed       	ldi	r24, 0xD8	; 216
    4d90:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    4d92:	81 e0       	ldi	r24, 0x01	; 1
    4d94:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    4d96:	87 85       	ldd	r24, Z+15	; 0x0f
    4d98:	88 23       	and	r24, r24
    4d9a:	ec f3       	brlt	.-6      	; 0x4d96 <eeprom_erase+0x28>
}
    4d9c:	08 95       	ret

00004d9e <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    4d9e:	e7 df       	rcall	.-50     	; 0x4d6e <eeprom_erase>

	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    4da0:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    4da2:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO register write
    4da4:	98 ed       	ldi	r25, 0xD8	; 216
    4da6:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    4da8:	91 e0       	ldi	r25, 0x01	; 1
    4daa:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    4dae:	8f bf       	out	0x3f, r24	; 63
    4db0:	08 95       	ret

00004db2 <command>:
static void hall_sensor_measure(AC_t *ac, uint8_t channel, enum ac_status_t status){
	ticks_per_sec++;
}

void command(uint8_t c){
	switch(c){
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	fc 01       	movw	r30, r24
    4db6:	e1 56       	subi	r30, 0x61	; 97
    4db8:	f1 09       	sbc	r31, r1
    4dba:	e3 31       	cpi	r30, 0x13	; 19
    4dbc:	f1 05       	cpc	r31, r1
    4dbe:	c8 f4       	brcc	.+50     	; 0x4df2 <command+0x40>
    4dc0:	88 27       	eor	r24, r24
    4dc2:	e2 50       	subi	r30, 0x02	; 2
    4dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc8:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__tablejump2__>
		case RESET:
			reset();
    4dcc:	e8 cf       	rjmp	.-48     	; 0x4d9e <reset>
			break;
    4dce:	08 95       	ret
		case CALIBRATE:
			calibrate();
    4dd0:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <calibrate>
			break;
    4dd4:	08 95       	ret
		case CALIBRATE_ALTITUDE:
			cali_alt();
    4dd6:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <cali_alt>
			break;
    4dda:	08 95       	ret
		case CALIBRATE_ANGLE:
			cali_ang();
    4ddc:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <cali_ang>
			break;
    4de0:	08 95       	ret
		case SERVO_RELEASE:
			servo_release();
    4de2:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <servo_release>
			break;
    4de6:	08 95       	ret
		case SERVO_CLOSE:
			servo_close();
    4de8:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <servo_close>
			break;
    4dec:	08 95       	ret
		case PACKET:
			packet();
    4dee:	0c 94 bb 1c 	jmp	0x3976	; 0x3976 <packet>
    4df2:	08 95       	ret

00004df4 <main>:

char* format = "5343,%i,%i,%i,%li,%i.%i,%i.%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n"; // Format for output string


////////////////////////////// Functions ///////////////////////////////
int main(void){
    4df4:	cf 93       	push	r28
    4df6:	df 93       	push	r29
    4df8:	cd b7       	in	r28, 0x3d	; 61
    4dfa:	de b7       	in	r29, 0x3e	; 62
    4dfc:	c8 56       	subi	r28, 0x68	; 104
    4dfe:	d1 09       	sbc	r29, r1
    4e00:	cd bf       	out	0x3d, r28	; 61
    4e02:	de bf       	out	0x3e, r29	; 62
	system_init();
    4e04:	fa db       	rcall	.-2060   	; 0x45fa <system_init>
	//delay_ms(100);

	// Turns on status LED
	PORTD.DIR |= PIN3_bm;
    4e06:	e0 e6       	ldi	r30, 0x60	; 96
    4e08:	f6 e0       	ldi	r31, 0x06	; 6
    4e0a:	80 81       	ld	r24, Z
    4e0c:	88 60       	ori	r24, 0x08	; 8
    4e0e:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    4e10:	84 81       	ldd	r24, Z+4	; 0x04
    4e12:	88 60       	ori	r24, 0x08	; 8
    4e14:	84 83       	std	Z+4, r24	; 0x04
	buzzer_init();
    4e16:	0e 94 12 1c 	call	0x3824	; 0x3824 <buzzer_init>
	delay_ms(125);
    4e1a:	6b e2       	ldi	r22, 0x2B	; 43
    4e1c:	7c e2       	ldi	r23, 0x2C	; 44
    4e1e:	8a e0       	ldi	r24, 0x0A	; 10
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	0e 94 81 14 	call	0x2902	; 0x2902 <__portable_avr_delay_cycles>
	buzzer_stop();
    4e26:	0e 94 2c 1c 	call	0x3858	; 0x3858 <buzzer_stop>

	// Integer ring buffer for storing multiple older values
	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    4e2a:	14 e1       	ldi	r17, 0x14	; 20
    4e2c:	be 01       	movw	r22, r28
    4e2e:	6f 5f       	subi	r22, 0xFF	; 255
    4e30:	7f 4f       	sbci	r23, 0xFF	; 255
    4e32:	fb 01       	movw	r30, r22
    4e34:	81 2f       	mov	r24, r17
    4e36:	11 92       	st	Z+, r1
    4e38:	8a 95       	dec	r24
    4e3a:	e9 f7       	brne	.-6      	; 0x4e36 <main+0x42>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    4e3c:	4a e0       	ldi	r20, 0x0A	; 10
    4e3e:	50 e0       	ldi	r21, 0x00	; 0
    4e40:	ce 01       	movw	r24, r28
    4e42:	45 96       	adiw	r24, 0x15	; 21
    4e44:	0e 94 4a 13 	call	0x2694	; 0x2694 <rb16_init>

	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    4e48:	be 01       	movw	r22, r28
    4e4a:	63 5e       	subi	r22, 0xE3	; 227
    4e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e4e:	88 e2       	ldi	r24, 0x28	; 40
    4e50:	fb 01       	movw	r30, r22
    4e52:	11 92       	st	Z+, r1
    4e54:	8a 95       	dec	r24
    4e56:	e9 f7       	brne	.-6      	; 0x4e52 <main+0x5e>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    4e58:	4a e0       	ldi	r20, 0x0A	; 10
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	ce 01       	movw	r24, r28
    4e5e:	8b 5b       	subi	r24, 0xBB	; 187
    4e60:	9f 4f       	sbci	r25, 0xFF	; 255
    4e62:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <rb32_init>

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    4e66:	be 01       	movw	r22, r28
    4e68:	63 5b       	subi	r22, 0xB3	; 179
    4e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6c:	fb 01       	movw	r30, r22
    4e6e:	11 92       	st	Z+, r1
    4e70:	1a 95       	dec	r17
    4e72:	e9 f7       	brne	.-6      	; 0x4e6e <main+0x7a>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    4e74:	4a e0       	ldi	r20, 0x0A	; 10
    4e76:	50 e0       	ldi	r21, 0x00	; 0
    4e78:	ce 01       	movw	r24, r28
    4e7a:	8f 59       	subi	r24, 0x9F	; 159
    4e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e7e:	0e 94 4a 13 	call	0x2694	; 0x2694 <rb16_init>

	// Boolean values of the state of the camera and buzzer
	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    4e82:	00 e0       	ldi	r16, 0x00	; 0
	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	// Boolean values of the state of the camera and buzzer
	uint8_t cam_initialized = 0;
    4e84:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t buzzer_initialized = 0;


	while(1){
		// Check Sensors
		data_collect(&altitudes,&pressures);
    4e86:	be 01       	movw	r22, r28
    4e88:	6b 5b       	subi	r22, 0xBB	; 187
    4e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	45 96       	adiw	r24, 0x15	; 21
    4e90:	0e 94 82 18 	call	0x3104	; 0x3104 <data_collect>

		// Checks the Flight State
		state_check();
    4e94:	0e 94 3a 1a 	call	0x3474	; 0x3474 <state_check>

		// IMU Check
		//imu_read();

		//Gives each flight state their unique tasks
		switch(state){
    4e98:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <state>
    4e9c:	81 30       	cpi	r24, 0x01	; 1
    4e9e:	41 f0       	breq	.+16     	; 0x4eb0 <main+0xbc>
    4ea0:	08 f4       	brcc	.+2      	; 0x4ea4 <main+0xb0>
    4ea2:	50 c0       	rjmp	.+160    	; 0x4f44 <main+0x150>
    4ea4:	82 30       	cpi	r24, 0x02	; 2
    4ea6:	51 f0       	breq	.+20     	; 0x4ebc <main+0xc8>
    4ea8:	83 30       	cpi	r24, 0x03	; 3
    4eaa:	09 f4       	brne	.+2      	; 0x4eae <main+0xba>
    4eac:	45 c0       	rjmp	.+138    	; 0x4f38 <main+0x144>
    4eae:	48 c0       	rjmp	.+144    	; 0x4f40 <main+0x14c>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    4eb0:	11 11       	cpse	r17, r1
    4eb2:	48 c0       	rjmp	.+144    	; 0x4f44 <main+0x150>
					cam_initialized = 1;
					cam_switch();	//	Turns on Camera
    4eb4:	0e 94 31 11 	call	0x2262	; 0x2262 <cam_switch>
		switch(state){
			case 0:
				break;
			case 1:
				if(!cam_initialized){
					cam_initialized = 1;
    4eb8:	11 e0       	ldi	r17, 0x01	; 1
    4eba:	44 c0       	rjmp	.+136    	; 0x4f44 <main+0x150>
					cam_switch();	//	Turns on Camera
				}
				break;
			case 2:
				if(abs(alt-450)<EPSILON_ALTITUDE){
    4ebc:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <alt>
    4ec0:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <alt+0x1>
    4ec4:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <alt+0x2>
    4ec8:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <alt+0x3>
    4ecc:	20 e0       	ldi	r18, 0x00	; 0
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	41 ee       	ldi	r20, 0xE1	; 225
    4ed2:	53 e4       	ldi	r21, 0x43	; 67
    4ed4:	c8 d3       	rcall	.+1936   	; 0x5666 <__subsf3>
    4ed6:	98 d4       	rcall	.+2352   	; 0x5808 <__fixsfsi>
    4ed8:	9b 01       	movw	r18, r22
    4eda:	77 23       	and	r23, r23
    4edc:	24 f4       	brge	.+8      	; 0x4ee6 <main+0xf2>
    4ede:	22 27       	eor	r18, r18
    4ee0:	33 27       	eor	r19, r19
    4ee2:	26 1b       	sub	r18, r22
    4ee4:	37 0b       	sbc	r19, r23
    4ee6:	2a 30       	cpi	r18, 0x0A	; 10
    4ee8:	31 05       	cpc	r19, r1
    4eea:	bc f4       	brge	.+46     	; 0x4f1a <main+0x126>
	ac_enable(&ACA, 0);

}

void release(void){
	servo_release();
    4eec:	0e 94 a4 1c 	call	0x3948	; 0x3948 <servo_release>
				}
				break;
			case 2:
				if(abs(alt-450)<EPSILON_ALTITUDE){
					release();				// Releases the payload
					hall_sensor_init();		// Starts hall effect sensor to read rpm
    4ef0:	0e 94 c6 14 	call	0x298c	; 0x298c <hall_sensor_init>
					imu_read();
    4ef4:	0e 94 12 19 	call	0x3224	; 0x3224 <imu_read>
					ref_yaw = angle;
    4ef8:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <angle>
    4efc:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <angle+0x1>
    4f00:	a0 91 f6 20 	lds	r26, 0x20F6	; 0x8020f6 <angle+0x2>
    4f04:	b0 91 f7 20 	lds	r27, 0x20F7	; 0x8020f7 <angle+0x3>
    4f08:	80 93 3c 21 	sts	0x213C, r24	; 0x80213c <ref_yaw>
    4f0c:	90 93 3d 21 	sts	0x213D, r25	; 0x80213d <ref_yaw+0x1>
    4f10:	a0 93 3e 21 	sts	0x213E, r26	; 0x80213e <ref_yaw+0x2>
    4f14:	b0 93 3f 21 	sts	0x213F, r27	; 0x80213f <ref_yaw+0x3>
    4f18:	09 c0       	rjmp	.+18     	; 0x4f2c <main+0x138>
				}
				else if(released){
    4f1a:	80 91 4f 21 	lds	r24, 0x214F	; 0x80214f <released>
    4f1e:	88 23       	and	r24, r24
    4f20:	29 f0       	breq	.+10     	; 0x4f2c <main+0x138>
					servo_pid(&directions);	// Updates the PID
    4f22:	ce 01       	movw	r24, r28
    4f24:	8f 59       	subi	r24, 0x9F	; 159
    4f26:	9f 4f       	sbci	r25, 0xFF	; 255
    4f28:	0e 94 6d 1b 	call	0x36da	; 0x36da <servo_pid>
				}
				if(!cam_initialized){
    4f2c:	11 11       	cpse	r17, r1
    4f2e:	0a c0       	rjmp	.+20     	; 0x4f44 <main+0x150>
					cam_initialized = 1;
					cam_switch();
    4f30:	0e 94 31 11 	call	0x2262	; 0x2262 <cam_switch>
				}
				else if(released){
					servo_pid(&directions);	// Updates the PID
				}
				if(!cam_initialized){
					cam_initialized = 1;
    4f34:	11 e0       	ldi	r17, 0x01	; 1
    4f36:	06 c0       	rjmp	.+12     	; 0x4f44 <main+0x150>
					cam_switch();
				}
				break;
			case 3:
				if(!buzzer_initialized){
    4f38:	01 11       	cpse	r16, r1
    4f3a:	04 c0       	rjmp	.+8      	; 0x4f44 <main+0x150>
					//buzzer_init();			//UNCOMMENT BEFORE FLIGHT
					buzzer_initialized = 1;
    4f3c:	01 e0       	ldi	r16, 0x01	; 1
    4f3e:	02 c0       	rjmp	.+4      	; 0x4f44 <main+0x150>
				}
				break;
			default:
				state_check();
    4f40:	0e 94 3a 1a 	call	0x3474	; 0x3474 <state_check>
				break;
		}

		// 1 Hz timer interrupt function
		if(time_flag){
    4f44:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <time_flag>
    4f48:	88 23       	and	r24, r24
			calc_rpm();	// Resets the tick counter and averages it with the new values
    4f4a:	29 f0       	breq	.+10     	; 0x4f56 <main+0x162>
    4f4c:	0e 94 33 1c 	call	0x3866	; 0x3866 <calc_rpm>
			time_update();	// Transmits the data packet and writes the EEPROM
    4f50:	f7 d8       	rcall	.-3602   	; 0x4140 <time_update>
			time_flag = 0;
    4f52:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <time_flag>
		}
		// XBEE command received
		if(xbee_flag){
    4f56:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <xbee_flag>
    4f5a:	88 23       	and	r24, r24
			command(xbee_comm);
    4f5c:	39 f0       	breq	.+14     	; 0x4f6c <main+0x178>
    4f5e:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <xbee_comm>
    4f62:	27 df       	rcall	.-434    	; 0x4db2 <command>
			xbee_comm = 0;
    4f64:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <xbee_comm>
			xbee_flag = 0;
    4f68:	10 92 4d 21 	sts	0x214D, r1	; 0x80214d <xbee_flag>
		}

		// Recalculates the data writing rate
		data_packets++;
    4f6c:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <data_packets>
    4f70:	90 91 2d 21 	lds	r25, 0x212D	; 0x80212d <data_packets+0x1>
    4f74:	01 96       	adiw	r24, 0x01	; 1
    4f76:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <data_packets>
    4f7a:	90 93 2d 21 	sts	0x212D, r25	; 0x80212d <data_packets+0x1>
		if(timer != 0){
    4f7e:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <timer>
    4f82:	90 91 2f 21 	lds	r25, 0x212F	; 0x80212f <timer+0x1>
    4f86:	89 2b       	or	r24, r25
    4f88:	09 f4       	brne	.+2      	; 0x4f8c <main+0x198>
    4f8a:	7d cf       	rjmp	.-262    	; 0x4e86 <main+0x92>
			rate = data_packets / timer;
    4f8c:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <data_packets>
    4f90:	90 91 2d 21 	lds	r25, 0x212D	; 0x80212d <data_packets+0x1>
    4f94:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <timer>
    4f98:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <timer+0x1>
    4f9c:	f3 d6       	rcall	.+3558   	; 0x5d84 <__udivmodhi4>
    4f9e:	60 93 1f 20 	sts	0x201F, r22	; 0x80201f <rate>
    4fa2:	70 93 20 20 	sts	0x2020, r23	; 0x802020 <rate+0x1>
    4fa6:	6f cf       	rjmp	.-290    	; 0x4e86 <main+0x92>

00004fa8 <__vector_47>:
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}


ISR(TCE0_OVF_vect){
    4fa8:	1f 92       	push	r1
    4faa:	0f 92       	push	r0
    4fac:	0f b6       	in	r0, 0x3f	; 63
    4fae:	0f 92       	push	r0
    4fb0:	11 24       	eor	r1, r1
    4fb2:	08 b6       	in	r0, 0x38	; 56
    4fb4:	0f 92       	push	r0
    4fb6:	18 be       	out	0x38, r1	; 56
    4fb8:	8f 93       	push	r24
    4fba:	9f 93       	push	r25
	timer++;
    4fbc:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <timer>
    4fc0:	90 91 2f 21 	lds	r25, 0x212F	; 0x80212f <timer+0x1>
    4fc4:	01 96       	adiw	r24, 0x01	; 1
    4fc6:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <timer>
    4fca:	90 93 2f 21 	sts	0x212F, r25	; 0x80212f <timer+0x1>
	time_flag = 1;
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <time_flag>
}
    4fd4:	9f 91       	pop	r25
    4fd6:	8f 91       	pop	r24
    4fd8:	0f 90       	pop	r0
    4fda:	08 be       	out	0x38, r0	; 56
    4fdc:	0f 90       	pop	r0
    4fde:	0f be       	out	0x3f, r0	; 63
    4fe0:	0f 90       	pop	r0
    4fe2:	1f 90       	pop	r1
    4fe4:	18 95       	reti

00004fe6 <__vector_58>:


ISR(USARTE0_RXC_vect){
    4fe6:	1f 92       	push	r1
    4fe8:	0f 92       	push	r0
    4fea:	0f b6       	in	r0, 0x3f	; 63
    4fec:	0f 92       	push	r0
    4fee:	11 24       	eor	r1, r1
    4ff0:	08 b6       	in	r0, 0x38	; 56
    4ff2:	0f 92       	push	r0
    4ff4:	18 be       	out	0x38, r1	; 56
    4ff6:	09 b6       	in	r0, 0x39	; 57
    4ff8:	0f 92       	push	r0
    4ffa:	19 be       	out	0x39, r1	; 57
    4ffc:	0b b6       	in	r0, 0x3b	; 59
    4ffe:	0f 92       	push	r0
    5000:	1b be       	out	0x3b, r1	; 59
    5002:	2f 93       	push	r18
    5004:	3f 93       	push	r19
    5006:	4f 93       	push	r20
    5008:	5f 93       	push	r21
    500a:	6f 93       	push	r22
    500c:	7f 93       	push	r23
    500e:	8f 93       	push	r24
    5010:	9f 93       	push	r25
    5012:	af 93       	push	r26
    5014:	bf 93       	push	r27
    5016:	ef 93       	push	r30
    5018:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    501a:	80 ea       	ldi	r24, 0xA0	; 160
    501c:	9a e0       	ldi	r25, 0x0A	; 10
    501e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <usart_getchar>
    5022:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <xbee_comm>
	//printf("%c\n", xbee_comm);
	xbee_flag = 1;
    5026:	81 e0       	ldi	r24, 0x01	; 1
    5028:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <xbee_flag>
}
    502c:	ff 91       	pop	r31
    502e:	ef 91       	pop	r30
    5030:	bf 91       	pop	r27
    5032:	af 91       	pop	r26
    5034:	9f 91       	pop	r25
    5036:	8f 91       	pop	r24
    5038:	7f 91       	pop	r23
    503a:	6f 91       	pop	r22
    503c:	5f 91       	pop	r21
    503e:	4f 91       	pop	r20
    5040:	3f 91       	pop	r19
    5042:	2f 91       	pop	r18
    5044:	0f 90       	pop	r0
    5046:	0b be       	out	0x3b, r0	; 59
    5048:	0f 90       	pop	r0
    504a:	09 be       	out	0x39, r0	; 57
    504c:	0f 90       	pop	r0
    504e:	08 be       	out	0x38, r0	; 56
    5050:	0f 90       	pop	r0
    5052:	0f be       	out	0x3f, r0	; 63
    5054:	0f 90       	pop	r0
    5056:	1f 90       	pop	r1
    5058:	18 95       	reti

0000505a <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    505a:	1f 92       	push	r1
    505c:	0f 92       	push	r0
    505e:	0f b6       	in	r0, 0x3f	; 63
    5060:	0f 92       	push	r0
    5062:	11 24       	eor	r1, r1
    5064:	08 b6       	in	r0, 0x38	; 56
    5066:	0f 92       	push	r0
    5068:	18 be       	out	0x38, r1	; 56
    506a:	09 b6       	in	r0, 0x39	; 57
    506c:	0f 92       	push	r0
    506e:	19 be       	out	0x39, r1	; 57
    5070:	0a b6       	in	r0, 0x3a	; 58
    5072:	0f 92       	push	r0
    5074:	1a be       	out	0x3a, r1	; 58
    5076:	0b b6       	in	r0, 0x3b	; 59
    5078:	0f 92       	push	r0
    507a:	1b be       	out	0x3b, r1	; 59
    507c:	8f 92       	push	r8
    507e:	9f 92       	push	r9
    5080:	af 92       	push	r10
    5082:	bf 92       	push	r11
    5084:	cf 92       	push	r12
    5086:	df 92       	push	r13
    5088:	ef 92       	push	r14
    508a:	ff 92       	push	r15
    508c:	1f 93       	push	r17
    508e:	2f 93       	push	r18
    5090:	3f 93       	push	r19
    5092:	4f 93       	push	r20
    5094:	5f 93       	push	r21
    5096:	6f 93       	push	r22
    5098:	7f 93       	push	r23
    509a:	8f 93       	push	r24
    509c:	9f 93       	push	r25
    509e:	af 93       	push	r26
    50a0:	bf 93       	push	r27
    50a2:	ef 93       	push	r30
    50a4:	ff 93       	push	r31
    50a6:	cf 93       	push	r28
    50a8:	df 93       	push	r29
    50aa:	00 d0       	rcall	.+0      	; 0x50ac <__vector_91+0x52>
    50ac:	00 d0       	rcall	.+0      	; 0x50ae <__vector_91+0x54>
    50ae:	cd b7       	in	r28, 0x3d	; 61
    50b0:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    50b2:	80 eb       	ldi	r24, 0xB0	; 176
    50b4:	99 e0       	ldi	r25, 0x09	; 9
    50b6:	0e 94 8a 0a 	call	0x1514	; 0x1514 <usart_getchar>
    50ba:	18 2f       	mov	r17, r24
	//printf("%c",c);

	if(c == (uint8_t) '$'){
    50bc:	84 32       	cpi	r24, 0x24	; 36
    50be:	51 f4       	brne	.+20     	; 0x50d4 <__vector_91+0x7a>
		writing = 1;
    50c0:	81 e0       	ldi	r24, 0x01	; 1
    50c2:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <writing>
		pos = 0;
    50c6:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <pos>
		word_pos = 0;
    50ca:	10 92 33 21 	sts	0x2133, r1	; 0x802133 <word_pos>
		commas = 0;
    50ce:	10 92 32 21 	sts	0x2132, r1	; 0x802132 <commas>
    50d2:	5a c2       	rjmp	.+1204   	; 0x5588 <__vector_91+0x52e>
	}
	else if(c == (uint8_t) '*'){
    50d4:	8a 32       	cpi	r24, 0x2A	; 42
    50d6:	29 f4       	brne	.+10     	; 0x50e2 <__vector_91+0x88>
		commas = 0;
    50d8:	10 92 32 21 	sts	0x2132, r1	; 0x802132 <commas>
		writing = 0;
    50dc:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <writing>
    50e0:	53 c2       	rjmp	.+1190   	; 0x5588 <__vector_91+0x52e>
	}
	else if(c == (uint8_t) ','){
    50e2:	8c 32       	cpi	r24, 0x2C	; 44
    50e4:	09 f0       	breq	.+2      	; 0x50e8 <__vector_91+0x8e>
    50e6:	50 c2       	rjmp	.+1184   	; 0x5588 <__vector_91+0x52e>
		gps[0] = 32;
    50e8:	ea e8       	ldi	r30, 0x8A	; 138
    50ea:	f1 e2       	ldi	r31, 0x21	; 33
    50ec:	80 e2       	ldi	r24, 0x20	; 32
    50ee:	80 83       	st	Z, r24
		if(gps[1] == 32){
    50f0:	81 81       	ldd	r24, Z+1	; 0x01
    50f2:	80 32       	cpi	r24, 0x20	; 32
    50f4:	09 f0       	breq	.+2      	; 0x50f8 <__vector_91+0x9e>
    50f6:	77 c2       	rjmp	.+1262   	; 0x55e6 <__vector_91+0x58c>
			gps[0] = '0';
    50f8:	80 e3       	ldi	r24, 0x30	; 48
    50fa:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <gps>
    50fe:	73 c2       	rjmp	.+1254   	; 0x55e6 <__vector_91+0x58c>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    5100:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <gps>
    5104:	8e 32       	cpi	r24, 0x2E	; 46
    5106:	09 f0       	breq	.+2      	; 0x510a <__vector_91+0xb0>
    5108:	a3 c1       	rjmp	.+838    	; 0x5450 <__vector_91+0x3f6>
    510a:	a9 c1       	rjmp	.+850    	; 0x545e <__vector_91+0x404>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    510c:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <gps>
    5110:	8e 32       	cpi	r24, 0x2E	; 46
    5112:	09 f0       	breq	.+2      	; 0x5116 <__vector_91+0xbc>
    5114:	ef c0       	rjmp	.+478    	; 0x52f4 <__vector_91+0x29a>
    5116:	f5 c0       	rjmp	.+490    	; 0x5302 <__vector_91+0x2a8>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    5118:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <gps>
    511c:	8e 32       	cpi	r24, 0x2E	; 46
    511e:	09 f0       	breq	.+2      	; 0x5122 <__vector_91+0xc8>
    5120:	52 c0       	rjmp	.+164    	; 0x51c6 <__vector_91+0x16c>
    5122:	58 c0       	rjmp	.+176    	; 0x51d4 <__vector_91+0x17a>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    5124:	91 91       	ld	r25, Z+
    5126:	9e 32       	cpi	r25, 0x2E	; 46
    5128:	29 f4       	brne	.+10     	; 0x5134 <__vector_91+0xda>
    512a:	01 c0       	rjmp	.+2      	; 0x512e <__vector_91+0xd4>
    512c:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    512e:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <idx>
						break;
    5132:	03 c0       	rjmp	.+6      	; 0x513a <__vector_91+0xe0>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    5134:	8f 5f       	subi	r24, 0xFF	; 255
    5136:	8f 30       	cpi	r24, 0x0F	; 15
    5138:	a9 f7       	brne	.-22     	; 0x5124 <__vector_91+0xca>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    513a:	e0 91 31 21 	lds	r30, 0x2131	; 0x802131 <idx>
    513e:	f0 e0       	ldi	r31, 0x00	; 0
    5140:	e6 57       	subi	r30, 0x76	; 118
    5142:	fe 4d       	sbci	r31, 0xDE	; 222
    5144:	80 e2       	ldi	r24, 0x20	; 32
    5146:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    5148:	20 91 31 21 	lds	r18, 0x2131	; 0x802131 <idx>
    514c:	2f 5f       	subi	r18, 0xFF	; 255
    514e:	2f 30       	cpi	r18, 0x0F	; 15
    5150:	c8 f4       	brcc	.+50     	; 0x5184 <__vector_91+0x12a>
					if(gps[i] == 32){
    5152:	82 2f       	mov	r24, r18
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	fc 01       	movw	r30, r24
    5158:	e6 57       	subi	r30, 0x76	; 118
    515a:	fe 4d       	sbci	r31, 0xDE	; 222
    515c:	30 81       	ld	r19, Z
    515e:	30 32       	cpi	r19, 0x20	; 32
    5160:	89 f0       	breq	.+34     	; 0x5184 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    5162:	40 e2       	ldi	r20, 0x20	; 32
    5164:	08 c0       	rjmp	.+16     	; 0x5176 <__vector_91+0x11c>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    5166:	82 2f       	mov	r24, r18
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	fc 01       	movw	r30, r24
    516c:	e6 57       	subi	r30, 0x76	; 118
    516e:	fe 4d       	sbci	r31, 0xDE	; 222
    5170:	30 81       	ld	r19, Z
    5172:	30 32       	cpi	r19, 0x20	; 32
    5174:	39 f0       	breq	.+14     	; 0x5184 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    5176:	fc 01       	movw	r30, r24
    5178:	e6 57       	subi	r30, 0x76	; 118
    517a:	fe 4d       	sbci	r31, 0xDE	; 222
    517c:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    517e:	2f 5f       	subi	r18, 0xFF	; 255
    5180:	2f 30       	cpi	r18, 0x0F	; 15
    5182:	89 f7       	brne	.-30     	; 0x5166 <__vector_91+0x10c>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    5184:	ce 01       	movw	r24, r28
    5186:	01 96       	adiw	r24, 0x01	; 1
    5188:	9f 93       	push	r25
    518a:	8f 93       	push	r24
    518c:	86 e5       	ldi	r24, 0x56	; 86
    518e:	90 e2       	ldi	r25, 0x20	; 32
    5190:	9f 93       	push	r25
    5192:	8f 93       	push	r24
    5194:	8a e8       	ldi	r24, 0x8A	; 138
    5196:	91 e2       	ldi	r25, 0x21	; 33
    5198:	9f 93       	push	r25
    519a:	8f 93       	push	r24
    519c:	36 d7       	rcall	.+3692   	; 0x600a <sscanf>
				gps_t = (double) val;
    519e:	69 81       	ldd	r22, Y+1	; 0x01
    51a0:	7a 81       	ldd	r23, Y+2	; 0x02
    51a2:	8b 81       	ldd	r24, Y+3	; 0x03
    51a4:	9c 81       	ldd	r25, Y+4	; 0x04
    51a6:	63 d3       	rcall	.+1734   	; 0x586e <__floatsisf>
    51a8:	60 93 12 21 	sts	0x2112, r22	; 0x802112 <gps_t>
    51ac:	70 93 13 21 	sts	0x2113, r23	; 0x802113 <gps_t+0x1>
    51b0:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <gps_t+0x2>
    51b4:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <gps_t+0x3>
				break;
    51b8:	0f 90       	pop	r0
    51ba:	0f 90       	pop	r0
    51bc:	0f 90       	pop	r0
    51be:	0f 90       	pop	r0
    51c0:	0f 90       	pop	r0
    51c2:	0f 90       	pop	r0
    51c4:	c3 c1       	rjmp	.+902    	; 0x554c <__vector_91+0x4f2>
    51c6:	eb e8       	ldi	r30, 0x8B	; 139
    51c8:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    51ca:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    51cc:	91 91       	ld	r25, Z+
    51ce:	9e 32       	cpi	r25, 0x2E	; 46
    51d0:	29 f4       	brne	.+10     	; 0x51dc <__vector_91+0x182>
    51d2:	01 c0       	rjmp	.+2      	; 0x51d6 <__vector_91+0x17c>
    51d4:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    51d6:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <idx>
						break;
    51da:	03 c0       	rjmp	.+6      	; 0x51e2 <__vector_91+0x188>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    51dc:	8f 5f       	subi	r24, 0xFF	; 255
    51de:	8f 30       	cpi	r24, 0x0F	; 15
    51e0:	a9 f7       	brne	.-22     	; 0x51cc <__vector_91+0x172>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    51e2:	e0 91 31 21 	lds	r30, 0x2131	; 0x802131 <idx>
    51e6:	f0 e0       	ldi	r31, 0x00	; 0
    51e8:	e6 57       	subi	r30, 0x76	; 118
    51ea:	fe 4d       	sbci	r31, 0xDE	; 222
    51ec:	80 e2       	ldi	r24, 0x20	; 32
    51ee:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    51f0:	20 91 31 21 	lds	r18, 0x2131	; 0x802131 <idx>
    51f4:	2f 5f       	subi	r18, 0xFF	; 255
    51f6:	2f 30       	cpi	r18, 0x0F	; 15
    51f8:	08 f5       	brcc	.+66     	; 0x523c <__vector_91+0x1e2>
					if(gps[i] == 32){
    51fa:	82 2f       	mov	r24, r18
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	fc 01       	movw	r30, r24
    5200:	e6 57       	subi	r30, 0x76	; 118
    5202:	fe 4d       	sbci	r31, 0xDE	; 222
    5204:	30 81       	ld	r19, Z
    5206:	30 32       	cpi	r19, 0x20	; 32
    5208:	c9 f0       	breq	.+50     	; 0x523c <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    520a:	50 e2       	ldi	r21, 0x20	; 32
    520c:	08 c0       	rjmp	.+16     	; 0x521e <__vector_91+0x1c4>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    520e:	82 2f       	mov	r24, r18
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	fc 01       	movw	r30, r24
    5214:	e6 57       	subi	r30, 0x76	; 118
    5216:	fe 4d       	sbci	r31, 0xDE	; 222
    5218:	30 81       	ld	r19, Z
    521a:	30 32       	cpi	r19, 0x20	; 32
    521c:	79 f0       	breq	.+30     	; 0x523c <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
    521e:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <idx>
    5222:	fc 01       	movw	r30, r24
    5224:	e4 1b       	sub	r30, r20
    5226:	f1 09       	sbc	r31, r1
    5228:	e8 56       	subi	r30, 0x68	; 104
    522a:	fe 4d       	sbci	r31, 0xDE	; 222
    522c:	30 83       	st	Z, r19
					gps[i] = 32;
    522e:	fc 01       	movw	r30, r24
    5230:	e6 57       	subi	r30, 0x76	; 118
    5232:	fe 4d       	sbci	r31, 0xDE	; 222
    5234:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    5236:	2f 5f       	subi	r18, 0xFF	; 255
    5238:	2f 30       	cpi	r18, 0x0F	; 15
    523a:	49 f7       	brne	.-46     	; 0x520e <__vector_91+0x1b4>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    523c:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <dec>
    5240:	80 32       	cpi	r24, 0x20	; 32
    5242:	19 f4       	brne	.+6      	; 0x524a <__vector_91+0x1f0>
					dec[0] = '0';
    5244:	80 e3       	ldi	r24, 0x30	; 48
    5246:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <dec>
				}
				sscanf(gps,"%ld",&val);
    524a:	ce 01       	movw	r24, r28
    524c:	01 96       	adiw	r24, 0x01	; 1
    524e:	9f 93       	push	r25
    5250:	8f 93       	push	r24
    5252:	86 e5       	ldi	r24, 0x56	; 86
    5254:	90 e2       	ldi	r25, 0x20	; 32
    5256:	9f 93       	push	r25
    5258:	8f 93       	push	r24
    525a:	8a e8       	ldi	r24, 0x8A	; 138
    525c:	91 e2       	ldi	r25, 0x21	; 33
    525e:	9f 93       	push	r25
    5260:	8f 93       	push	r24
    5262:	d3 d6       	rcall	.+3494   	; 0x600a <sscanf>
				sscanf(dec,"%d",&val2);
    5264:	ce 01       	movw	r24, r28
    5266:	05 96       	adiw	r24, 0x05	; 5
    5268:	9f 93       	push	r25
    526a:	8f 93       	push	r24
    526c:	8a e5       	ldi	r24, 0x5A	; 90
    526e:	90 e2       	ldi	r25, 0x20	; 32
    5270:	9f 93       	push	r25
    5272:	8f 93       	push	r24
    5274:	89 e9       	ldi	r24, 0x99	; 153
    5276:	91 e2       	ldi	r25, 0x21	; 33
    5278:	9f 93       	push	r25
    527a:	8f 93       	push	r24
    527c:	c6 d6       	rcall	.+3468   	; 0x600a <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    527e:	89 80       	ldd	r8, Y+1	; 0x01
    5280:	9a 80       	ldd	r9, Y+2	; 0x02
    5282:	ab 80       	ldd	r10, Y+3	; 0x03
    5284:	bc 80       	ldd	r11, Y+4	; 0x04
    5286:	6d 81       	ldd	r22, Y+5	; 0x05
    5288:	7e 81       	ldd	r23, Y+6	; 0x06
    528a:	07 2e       	mov	r0, r23
    528c:	00 0c       	add	r0, r0
    528e:	88 0b       	sbc	r24, r24
    5290:	99 0b       	sbc	r25, r25
    5292:	ed d2       	rcall	.+1498   	; 0x586e <__floatsisf>
    5294:	20 e0       	ldi	r18, 0x00	; 0
    5296:	30 e4       	ldi	r19, 0x40	; 64
    5298:	4c e1       	ldi	r20, 0x1C	; 28
    529a:	56 e4       	ldi	r21, 0x46	; 70
    529c:	4d d2       	rcall	.+1178   	; 0x5738 <__divsf3>
    529e:	6b 01       	movw	r12, r22
    52a0:	7c 01       	movw	r14, r24
    52a2:	c5 01       	movw	r24, r10
    52a4:	b4 01       	movw	r22, r8
    52a6:	24 e6       	ldi	r18, 0x64	; 100
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	40 e0       	ldi	r20, 0x00	; 0
    52ac:	50 e0       	ldi	r21, 0x00	; 0
    52ae:	b3 d5       	rcall	.+2918   	; 0x5e16 <__divmodsi4>
    52b0:	49 01       	movw	r8, r18
    52b2:	5a 01       	movw	r10, r20
    52b4:	dc d2       	rcall	.+1464   	; 0x586e <__floatsisf>
    52b6:	9b 01       	movw	r18, r22
    52b8:	ac 01       	movw	r20, r24
    52ba:	c7 01       	movw	r24, r14
    52bc:	b6 01       	movw	r22, r12
    52be:	d4 d1       	rcall	.+936    	; 0x5668 <__addsf3>
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	40 e7       	ldi	r20, 0x70	; 112
    52c6:	52 e4       	ldi	r21, 0x42	; 66
    52c8:	37 d2       	rcall	.+1134   	; 0x5738 <__divsf3>
    52ca:	6b 01       	movw	r12, r22
    52cc:	7c 01       	movw	r14, r24
    52ce:	c5 01       	movw	r24, r10
    52d0:	b4 01       	movw	r22, r8
    52d2:	cd d2       	rcall	.+1434   	; 0x586e <__floatsisf>
    52d4:	9b 01       	movw	r18, r22
    52d6:	ac 01       	movw	r20, r24
    52d8:	c7 01       	movw	r24, r14
    52da:	b6 01       	movw	r22, r12
    52dc:	c5 d1       	rcall	.+906    	; 0x5668 <__addsf3>
    52de:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <gps_lat>
    52e2:	70 93 0f 21 	sts	0x210F, r23	; 0x80210f <gps_lat+0x1>
    52e6:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <gps_lat+0x2>
    52ea:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <gps_lat+0x3>
				break;
    52ee:	cd bf       	out	0x3d, r28	; 61
    52f0:	de bf       	out	0x3e, r29	; 62
    52f2:	2c c1       	rjmp	.+600    	; 0x554c <__vector_91+0x4f2>
    52f4:	eb e8       	ldi	r30, 0x8B	; 139
    52f6:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    52f8:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    52fa:	91 91       	ld	r25, Z+
    52fc:	9e 32       	cpi	r25, 0x2E	; 46
    52fe:	29 f4       	brne	.+10     	; 0x530a <__vector_91+0x2b0>
    5300:	01 c0       	rjmp	.+2      	; 0x5304 <__vector_91+0x2aa>
    5302:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    5304:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <idx>
						break;
    5308:	03 c0       	rjmp	.+6      	; 0x5310 <__vector_91+0x2b6>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    530a:	8f 5f       	subi	r24, 0xFF	; 255
    530c:	8f 30       	cpi	r24, 0x0F	; 15
    530e:	a9 f7       	brne	.-22     	; 0x52fa <__vector_91+0x2a0>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    5310:	e0 91 31 21 	lds	r30, 0x2131	; 0x802131 <idx>
    5314:	f0 e0       	ldi	r31, 0x00	; 0
    5316:	e6 57       	subi	r30, 0x76	; 118
    5318:	fe 4d       	sbci	r31, 0xDE	; 222
    531a:	80 e2       	ldi	r24, 0x20	; 32
    531c:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    531e:	20 91 31 21 	lds	r18, 0x2131	; 0x802131 <idx>
    5322:	2f 5f       	subi	r18, 0xFF	; 255
    5324:	2f 30       	cpi	r18, 0x0F	; 15
    5326:	08 f5       	brcc	.+66     	; 0x536a <__vector_91+0x310>
					if(gps[i] == 32){
    5328:	82 2f       	mov	r24, r18
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	fc 01       	movw	r30, r24
    532e:	e6 57       	subi	r30, 0x76	; 118
    5330:	fe 4d       	sbci	r31, 0xDE	; 222
    5332:	30 81       	ld	r19, Z
    5334:	30 32       	cpi	r19, 0x20	; 32
    5336:	c9 f0       	breq	.+50     	; 0x536a <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    5338:	50 e2       	ldi	r21, 0x20	; 32
    533a:	08 c0       	rjmp	.+16     	; 0x534c <__vector_91+0x2f2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    533c:	82 2f       	mov	r24, r18
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	fc 01       	movw	r30, r24
    5342:	e6 57       	subi	r30, 0x76	; 118
    5344:	fe 4d       	sbci	r31, 0xDE	; 222
    5346:	30 81       	ld	r19, Z
    5348:	30 32       	cpi	r19, 0x20	; 32
    534a:	79 f0       	breq	.+30     	; 0x536a <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
    534c:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <idx>
    5350:	fc 01       	movw	r30, r24
    5352:	e4 1b       	sub	r30, r20
    5354:	f1 09       	sbc	r31, r1
    5356:	e8 56       	subi	r30, 0x68	; 104
    5358:	fe 4d       	sbci	r31, 0xDE	; 222
    535a:	30 83       	st	Z, r19
					gps[i] = 32;
    535c:	fc 01       	movw	r30, r24
    535e:	e6 57       	subi	r30, 0x76	; 118
    5360:	fe 4d       	sbci	r31, 0xDE	; 222
    5362:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    5364:	2f 5f       	subi	r18, 0xFF	; 255
    5366:	2f 30       	cpi	r18, 0x0F	; 15
    5368:	49 f7       	brne	.-46     	; 0x533c <__vector_91+0x2e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    536a:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <dec>
    536e:	80 32       	cpi	r24, 0x20	; 32
    5370:	19 f4       	brne	.+6      	; 0x5378 <__vector_91+0x31e>
					dec[0] = '0';
    5372:	80 e3       	ldi	r24, 0x30	; 48
    5374:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <dec>
				}
				sscanf(gps,"%ld",&val);
    5378:	ce 01       	movw	r24, r28
    537a:	01 96       	adiw	r24, 0x01	; 1
    537c:	9f 93       	push	r25
    537e:	8f 93       	push	r24
    5380:	86 e5       	ldi	r24, 0x56	; 86
    5382:	90 e2       	ldi	r25, 0x20	; 32
    5384:	9f 93       	push	r25
    5386:	8f 93       	push	r24
    5388:	8a e8       	ldi	r24, 0x8A	; 138
    538a:	91 e2       	ldi	r25, 0x21	; 33
    538c:	9f 93       	push	r25
    538e:	8f 93       	push	r24
    5390:	3c d6       	rcall	.+3192   	; 0x600a <sscanf>
				sscanf(dec,"%d",&val2);
    5392:	ce 01       	movw	r24, r28
    5394:	05 96       	adiw	r24, 0x05	; 5
    5396:	9f 93       	push	r25
    5398:	8f 93       	push	r24
    539a:	8a e5       	ldi	r24, 0x5A	; 90
    539c:	90 e2       	ldi	r25, 0x20	; 32
    539e:	9f 93       	push	r25
    53a0:	8f 93       	push	r24
    53a2:	89 e9       	ldi	r24, 0x99	; 153
    53a4:	91 e2       	ldi	r25, 0x21	; 33
    53a6:	9f 93       	push	r25
    53a8:	8f 93       	push	r24
    53aa:	2f d6       	rcall	.+3166   	; 0x600a <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    53ac:	89 80       	ldd	r8, Y+1	; 0x01
    53ae:	9a 80       	ldd	r9, Y+2	; 0x02
    53b0:	ab 80       	ldd	r10, Y+3	; 0x03
    53b2:	bc 80       	ldd	r11, Y+4	; 0x04
    53b4:	6d 81       	ldd	r22, Y+5	; 0x05
    53b6:	7e 81       	ldd	r23, Y+6	; 0x06
    53b8:	07 2e       	mov	r0, r23
    53ba:	00 0c       	add	r0, r0
    53bc:	88 0b       	sbc	r24, r24
    53be:	99 0b       	sbc	r25, r25
    53c0:	56 d2       	rcall	.+1196   	; 0x586e <__floatsisf>
    53c2:	20 e0       	ldi	r18, 0x00	; 0
    53c4:	30 e4       	ldi	r19, 0x40	; 64
    53c6:	4c e1       	ldi	r20, 0x1C	; 28
    53c8:	56 e4       	ldi	r21, 0x46	; 70
    53ca:	b6 d1       	rcall	.+876    	; 0x5738 <__divsf3>
    53cc:	6b 01       	movw	r12, r22
    53ce:	7c 01       	movw	r14, r24
    53d0:	c5 01       	movw	r24, r10
    53d2:	b4 01       	movw	r22, r8
    53d4:	24 e6       	ldi	r18, 0x64	; 100
    53d6:	30 e0       	ldi	r19, 0x00	; 0
    53d8:	40 e0       	ldi	r20, 0x00	; 0
    53da:	50 e0       	ldi	r21, 0x00	; 0
    53dc:	1c d5       	rcall	.+2616   	; 0x5e16 <__divmodsi4>
    53de:	49 01       	movw	r8, r18
    53e0:	5a 01       	movw	r10, r20
    53e2:	45 d2       	rcall	.+1162   	; 0x586e <__floatsisf>
    53e4:	9b 01       	movw	r18, r22
    53e6:	ac 01       	movw	r20, r24
    53e8:	c7 01       	movw	r24, r14
    53ea:	b6 01       	movw	r22, r12
    53ec:	3d d1       	rcall	.+634    	; 0x5668 <__addsf3>
    53ee:	20 e0       	ldi	r18, 0x00	; 0
    53f0:	30 e0       	ldi	r19, 0x00	; 0
    53f2:	40 e7       	ldi	r20, 0x70	; 112
    53f4:	52 e4       	ldi	r21, 0x42	; 66
    53f6:	a0 d1       	rcall	.+832    	; 0x5738 <__divsf3>
    53f8:	6b 01       	movw	r12, r22
    53fa:	7c 01       	movw	r14, r24
    53fc:	c5 01       	movw	r24, r10
    53fe:	b4 01       	movw	r22, r8
    5400:	36 d2       	rcall	.+1132   	; 0x586e <__floatsisf>
    5402:	9b 01       	movw	r18, r22
    5404:	ac 01       	movw	r20, r24
    5406:	c7 01       	movw	r24, r14
    5408:	b6 01       	movw	r22, r12
    540a:	2e d1       	rcall	.+604    	; 0x5668 <__addsf3>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	b0 58       	subi	r27, 0x80	; 128
    5412:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <gps_long>
    5416:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <gps_long+0x1>
    541a:	a0 93 0c 21 	sts	0x210C, r26	; 0x80210c <gps_long+0x2>
    541e:	b0 93 0d 21 	sts	0x210D, r27	; 0x80210d <gps_long+0x3>
    5422:	cd bf       	out	0x3d, r28	; 61
				break;
    5424:	de bf       	out	0x3e, r29	; 62
    5426:	92 c0       	rjmp	.+292    	; 0x554c <__vector_91+0x4f2>
    5428:	84 e0       	ldi	r24, 0x04	; 4
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    542a:	91 e2       	ldi	r25, 0x21	; 33
    542c:	9f 93       	push	r25
    542e:	8f 93       	push	r24
    5430:	8a e5       	ldi	r24, 0x5A	; 90
    5432:	90 e2       	ldi	r25, 0x20	; 32
    5434:	9f 93       	push	r25
    5436:	8f 93       	push	r24
    5438:	8a e8       	ldi	r24, 0x8A	; 138
    543a:	91 e2       	ldi	r25, 0x21	; 33
    543c:	9f 93       	push	r25
    543e:	8f 93       	push	r24
    5440:	e4 d5       	rcall	.+3016   	; 0x600a <sscanf>
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
				break;
    5446:	0f 90       	pop	r0
    5448:	0f 90       	pop	r0
    544a:	0f 90       	pop	r0
    544c:	0f 90       	pop	r0
    544e:	7e c0       	rjmp	.+252    	; 0x554c <__vector_91+0x4f2>
    5450:	eb e8       	ldi	r30, 0x8B	; 139
    5452:	f1 e2       	ldi	r31, 0x21	; 33
    5454:	81 e0       	ldi	r24, 0x01	; 1
    5456:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    5458:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    545a:	29 f4       	brne	.+10     	; 0x5466 <__vector_91+0x40c>
    545c:	01 c0       	rjmp	.+2      	; 0x5460 <__vector_91+0x406>
    545e:	80 e0       	ldi	r24, 0x00	; 0
    5460:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <idx>
						idx = i;
    5464:	03 c0       	rjmp	.+6      	; 0x546c <__vector_91+0x412>
    5466:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    5468:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    546a:	a9 f7       	brne	.-22     	; 0x5456 <__vector_91+0x3fc>
    546c:	e0 91 31 21 	lds	r30, 0x2131	; 0x802131 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    5470:	f0 e0       	ldi	r31, 0x00	; 0
    5472:	e6 57       	subi	r30, 0x76	; 118
    5474:	fe 4d       	sbci	r31, 0xDE	; 222
    5476:	80 e2       	ldi	r24, 0x20	; 32
    5478:	80 83       	st	Z, r24
    547a:	20 91 31 21 	lds	r18, 0x2131	; 0x802131 <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    547e:	2f 5f       	subi	r18, 0xFF	; 255
    5480:	2f 30       	cpi	r18, 0x0F	; 15
    5482:	08 f5       	brcc	.+66     	; 0x54c6 <__vector_91+0x46c>
    5484:	82 2f       	mov	r24, r18
    5486:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    5488:	fc 01       	movw	r30, r24
    548a:	e6 57       	subi	r30, 0x76	; 118
    548c:	fe 4d       	sbci	r31, 0xDE	; 222
    548e:	30 81       	ld	r19, Z
    5490:	30 32       	cpi	r19, 0x20	; 32
    5492:	c9 f0       	breq	.+50     	; 0x54c6 <__vector_91+0x46c>
    5494:	50 e2       	ldi	r21, 0x20	; 32
    5496:	08 c0       	rjmp	.+16     	; 0x54a8 <__vector_91+0x44e>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    5498:	82 2f       	mov	r24, r18
    549a:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    549c:	fc 01       	movw	r30, r24
    549e:	e6 57       	subi	r30, 0x76	; 118
    54a0:	fe 4d       	sbci	r31, 0xDE	; 222
    54a2:	30 81       	ld	r19, Z
    54a4:	30 32       	cpi	r19, 0x20	; 32
    54a6:	79 f0       	breq	.+30     	; 0x54c6 <__vector_91+0x46c>
    54a8:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    54ac:	fc 01       	movw	r30, r24
    54ae:	e4 1b       	sub	r30, r20
    54b0:	f1 09       	sbc	r31, r1
    54b2:	e8 56       	subi	r30, 0x68	; 104
    54b4:	fe 4d       	sbci	r31, 0xDE	; 222
    54b6:	30 83       	st	Z, r19
    54b8:	fc 01       	movw	r30, r24
    54ba:	e6 57       	subi	r30, 0x76	; 118
					gps[i] = 32;
    54bc:	fe 4d       	sbci	r31, 0xDE	; 222
    54be:	50 83       	st	Z, r21
    54c0:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    54c2:	2f 30       	cpi	r18, 0x0F	; 15
    54c4:	49 f7       	brne	.-46     	; 0x5498 <__vector_91+0x43e>
    54c6:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    54ca:	80 32       	cpi	r24, 0x20	; 32
    54cc:	19 f4       	brne	.+6      	; 0x54d4 <__vector_91+0x47a>
    54ce:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    54d0:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <dec>
    54d4:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    54d6:	01 96       	adiw	r24, 0x01	; 1
    54d8:	9f 93       	push	r25
    54da:	8f 93       	push	r24
    54dc:	86 e5       	ldi	r24, 0x56	; 86
    54de:	90 e2       	ldi	r25, 0x20	; 32
    54e0:	9f 93       	push	r25
    54e2:	8f 93       	push	r24
    54e4:	8a e8       	ldi	r24, 0x8A	; 138
    54e6:	91 e2       	ldi	r25, 0x21	; 33
    54e8:	9f 93       	push	r25
    54ea:	8f 93       	push	r24
    54ec:	8e d5       	rcall	.+2844   	; 0x600a <sscanf>
				sscanf(dec,"%d",&val2);
    54ee:	ce 01       	movw	r24, r28
    54f0:	05 96       	adiw	r24, 0x05	; 5
    54f2:	9f 93       	push	r25
    54f4:	8f 93       	push	r24
    54f6:	8a e5       	ldi	r24, 0x5A	; 90
    54f8:	90 e2       	ldi	r25, 0x20	; 32
    54fa:	9f 93       	push	r25
    54fc:	8f 93       	push	r24
    54fe:	89 e9       	ldi	r24, 0x99	; 153
    5500:	91 e2       	ldi	r25, 0x21	; 33
    5502:	9f 93       	push	r25
    5504:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    5506:	81 d5       	rcall	.+2818   	; 0x600a <sscanf>
    5508:	69 81       	ldd	r22, Y+1	; 0x01
    550a:	7a 81       	ldd	r23, Y+2	; 0x02
    550c:	8b 81       	ldd	r24, Y+3	; 0x03
    550e:	9c 81       	ldd	r25, Y+4	; 0x04
    5510:	ae d1       	rcall	.+860    	; 0x586e <__floatsisf>
    5512:	6b 01       	movw	r12, r22
    5514:	7c 01       	movw	r14, r24
    5516:	6d 81       	ldd	r22, Y+5	; 0x05
    5518:	7e 81       	ldd	r23, Y+6	; 0x06
    551a:	07 2e       	mov	r0, r23
    551c:	00 0c       	add	r0, r0
    551e:	88 0b       	sbc	r24, r24
    5520:	99 0b       	sbc	r25, r25
    5522:	a5 d1       	rcall	.+842    	; 0x586e <__floatsisf>
    5524:	20 e0       	ldi	r18, 0x00	; 0
    5526:	30 e0       	ldi	r19, 0x00	; 0
    5528:	40 e2       	ldi	r20, 0x20	; 32
    552a:	51 e4       	ldi	r21, 0x41	; 65
    552c:	05 d1       	rcall	.+522    	; 0x5738 <__divsf3>
    552e:	9b 01       	movw	r18, r22
    5530:	ac 01       	movw	r20, r24
    5532:	c7 01       	movw	r24, r14
    5534:	b6 01       	movw	r22, r12
    5536:	98 d0       	rcall	.+304    	; 0x5668 <__addsf3>
    5538:	60 93 06 21 	sts	0x2106, r22	; 0x802106 <gps_alt>
    553c:	70 93 07 21 	sts	0x2107, r23	; 0x802107 <gps_alt+0x1>
    5540:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <gps_alt+0x2>
    5544:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <gps_alt+0x3>
    5548:	cd bf       	out	0x3d, r28	; 61
    554a:	de bf       	out	0x3e, r29	; 62
    554c:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <writing>
				break;
    5550:	88 23       	and	r24, r24
		}

		if(writing){
    5552:	d1 f0       	breq	.+52     	; 0x5588 <__vector_91+0x52e>
    5554:	10 92 31 21 	sts	0x2131, r1	; 0x802131 <idx>
    5558:	80 91 32 21 	lds	r24, 0x2132	; 0x802132 <commas>
			idx = 0;
    555c:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    555e:	80 93 32 21 	sts	0x2132, r24	; 0x802132 <commas>
    5562:	10 92 33 21 	sts	0x2133, r1	; 0x802133 <word_pos>
    5566:	ea e8       	ldi	r30, 0x8A	; 138
			word_pos = 0;
    5568:	f1 e2       	ldi	r31, 0x21	; 33
    556a:	29 e9       	ldi	r18, 0x99	; 153
    556c:	31 e2       	ldi	r19, 0x21	; 33
    556e:	80 e2       	ldi	r24, 0x20	; 32
    5570:	81 93       	st	Z+, r24
    5572:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    5574:	3f 07       	cpc	r19, r31
    5576:	e1 f7       	brne	.-8      	; 0x5570 <__vector_91+0x516>

		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    5578:	e9 e9       	ldi	r30, 0x99	; 153
    557a:	f1 e2       	ldi	r31, 0x21	; 33
    557c:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    557e:	80 83       	st	Z, r24
    5580:	81 83       	std	Z+1, r24	; 0x01
    5582:	82 83       	std	Z+2, r24	; 0x02
    5584:	83 83       	std	Z+3, r24	; 0x03
    5586:	84 83       	std	Z+4, r24	; 0x04
    5588:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <writing>
    558c:	88 23       	and	r24, r24
			}
		}
	}

	if(writing){
    558e:	09 f4       	brne	.+2      	; 0x5592 <__vector_91+0x538>
    5590:	43 c0       	rjmp	.+134    	; 0x5618 <__vector_91+0x5be>
    5592:	80 91 34 21 	lds	r24, 0x2134	; 0x802134 <pos>
    5596:	83 30       	cpi	r24, 0x03	; 3
		switch(pos){
    5598:	19 f0       	breq	.+6      	; 0x55a0 <__vector_91+0x546>
    559a:	84 30       	cpi	r24, 0x04	; 4
    559c:	31 f0       	breq	.+12     	; 0x55aa <__vector_91+0x550>
    559e:	09 c0       	rjmp	.+18     	; 0x55b2 <__vector_91+0x558>
    55a0:	17 34       	cpi	r17, 0x47	; 71
    55a2:	39 f0       	breq	.+14     	; 0x55b2 <__vector_91+0x558>
    55a4:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <writing>
			case 3:
				if(c != 'G'){
    55a8:	04 c0       	rjmp	.+8      	; 0x55b2 <__vector_91+0x558>
					writing = 0;
    55aa:	17 34       	cpi	r17, 0x47	; 71
    55ac:	11 f0       	breq	.+4      	; 0x55b2 <__vector_91+0x558>
    55ae:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <writing>
				}
				break;

			case 4:
				if(c != 'G'){
    55b2:	e0 91 33 21 	lds	r30, 0x2133	; 0x802133 <word_pos>
					writing = 0;
    55b6:	f0 e0       	ldi	r31, 0x00	; 0
				}
				break;
		}
		gps[word_pos] = c;
    55b8:	e6 57       	subi	r30, 0x76	; 118
    55ba:	fe 4d       	sbci	r31, 0xDE	; 222
    55bc:	10 83       	st	Z, r17
    55be:	80 91 33 21 	lds	r24, 0x2133	; 0x802133 <word_pos>
    55c2:	8f 5f       	subi	r24, 0xFF	; 255
		word_pos++;
    55c4:	80 93 33 21 	sts	0x2133, r24	; 0x802133 <word_pos>
    55c8:	80 91 34 21 	lds	r24, 0x2134	; 0x802134 <pos>
    55cc:	8f 5f       	subi	r24, 0xFF	; 255
		pos++;
    55ce:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <pos>
    55d2:	22 c0       	rjmp	.+68     	; 0x5618 <__vector_91+0x5be>
    55d4:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <gps>
	}
    55d8:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    55da:	09 f4       	brne	.+2      	; 0x55de <__vector_91+0x584>
    55dc:	a7 cd       	rjmp	.-1202   	; 0x512c <__vector_91+0xd2>
    55de:	eb e8       	ldi	r30, 0x8B	; 139
    55e0:	f1 e2       	ldi	r31, 0x21	; 33
    55e2:	81 e0       	ldi	r24, 0x01	; 1
    55e4:	9f cd       	rjmp	.-1218   	; 0x5124 <__vector_91+0xca>
    55e6:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    55e8:	1a 82       	std	Y+2, r1	; 0x02
    55ea:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    55ec:	1c 82       	std	Y+4, r1	; 0x04
    55ee:	1d 82       	std	Y+5, r1	; 0x05
    55f0:	1e 82       	std	Y+6, r1	; 0x06
    55f2:	80 91 32 21 	lds	r24, 0x2132	; 0x802132 <commas>
		int16_t val2 = 0;
    55f6:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    55f8:	09 f4       	brne	.+2      	; 0x55fc <__vector_91+0x5a2>
    55fa:	88 cd       	rjmp	.-1264   	; 0x510c <__vector_91+0xb2>
    55fc:	30 f4       	brcc	.+12     	; 0x560a <__vector_91+0x5b0>
    55fe:	81 30       	cpi	r24, 0x01	; 1
    5600:	49 f3       	breq	.-46     	; 0x55d4 <__vector_91+0x57a>
    5602:	82 30       	cpi	r24, 0x02	; 2
    5604:	09 f4       	brne	.+2      	; 0x5608 <__vector_91+0x5ae>
    5606:	88 cd       	rjmp	.-1264   	; 0x5118 <__vector_91+0xbe>
    5608:	a1 cf       	rjmp	.-190    	; 0x554c <__vector_91+0x4f2>
    560a:	87 30       	cpi	r24, 0x07	; 7
    560c:	09 f4       	brne	.+2      	; 0x5610 <__vector_91+0x5b6>
    560e:	0c cf       	rjmp	.-488    	; 0x5428 <__vector_91+0x3ce>
    5610:	89 30       	cpi	r24, 0x09	; 9
    5612:	09 f4       	brne	.+2      	; 0x5616 <__vector_91+0x5bc>
    5614:	75 cd       	rjmp	.-1302   	; 0x5100 <__vector_91+0xa6>
    5616:	9a cf       	rjmp	.-204    	; 0x554c <__vector_91+0x4f2>
    5618:	26 96       	adiw	r28, 0x06	; 6
    561a:	cd bf       	out	0x3d, r28	; 61
    561c:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
    561e:	df 91       	pop	r29
    5620:	cf 91       	pop	r28
    5622:	ff 91       	pop	r31
    5624:	ef 91       	pop	r30
    5626:	bf 91       	pop	r27
    5628:	af 91       	pop	r26
    562a:	9f 91       	pop	r25
    562c:	8f 91       	pop	r24
    562e:	7f 91       	pop	r23
    5630:	6f 91       	pop	r22
    5632:	5f 91       	pop	r21
    5634:	4f 91       	pop	r20
    5636:	3f 91       	pop	r19
    5638:	2f 91       	pop	r18
    563a:	1f 91       	pop	r17
    563c:	ff 90       	pop	r15
    563e:	ef 90       	pop	r14
    5640:	df 90       	pop	r13
    5642:	cf 90       	pop	r12
    5644:	bf 90       	pop	r11
    5646:	af 90       	pop	r10
    5648:	9f 90       	pop	r9
    564a:	8f 90       	pop	r8
    564c:	0f 90       	pop	r0
    564e:	0b be       	out	0x3b, r0	; 59
    5650:	0f 90       	pop	r0
    5652:	0a be       	out	0x3a, r0	; 58
    5654:	0f 90       	pop	r0
    5656:	09 be       	out	0x39, r0	; 57
    5658:	0f 90       	pop	r0
    565a:	08 be       	out	0x38, r0	; 56
    565c:	0f 90       	pop	r0
    565e:	0f be       	out	0x3f, r0	; 63
    5660:	0f 90       	pop	r0
    5662:	1f 90       	pop	r1
    5664:	18 95       	reti

00005666 <__subsf3>:
    5666:	50 58       	subi	r21, 0x80	; 128

00005668 <__addsf3>:
    5668:	bb 27       	eor	r27, r27
    566a:	aa 27       	eor	r26, r26
    566c:	0e d0       	rcall	.+28     	; 0x568a <__addsf3x>
    566e:	75 c1       	rjmp	.+746    	; 0x595a <__fp_round>
    5670:	66 d1       	rcall	.+716    	; 0x593e <__fp_pscA>
    5672:	30 f0       	brcs	.+12     	; 0x5680 <__addsf3+0x18>
    5674:	6b d1       	rcall	.+726    	; 0x594c <__fp_pscB>
    5676:	20 f0       	brcs	.+8      	; 0x5680 <__addsf3+0x18>
    5678:	31 f4       	brne	.+12     	; 0x5686 <__addsf3+0x1e>
    567a:	9f 3f       	cpi	r25, 0xFF	; 255
    567c:	11 f4       	brne	.+4      	; 0x5682 <__addsf3+0x1a>
    567e:	1e f4       	brtc	.+6      	; 0x5686 <__addsf3+0x1e>
    5680:	5b c1       	rjmp	.+694    	; 0x5938 <__fp_nan>
    5682:	0e f4       	brtc	.+2      	; 0x5686 <__addsf3+0x1e>
    5684:	e0 95       	com	r30
    5686:	e7 fb       	bst	r30, 7
    5688:	51 c1       	rjmp	.+674    	; 0x592c <__fp_inf>

0000568a <__addsf3x>:
    568a:	e9 2f       	mov	r30, r25
    568c:	77 d1       	rcall	.+750    	; 0x597c <__fp_split3>
    568e:	80 f3       	brcs	.-32     	; 0x5670 <__addsf3+0x8>
    5690:	ba 17       	cp	r27, r26
    5692:	62 07       	cpc	r22, r18
    5694:	73 07       	cpc	r23, r19
    5696:	84 07       	cpc	r24, r20
    5698:	95 07       	cpc	r25, r21
    569a:	18 f0       	brcs	.+6      	; 0x56a2 <__addsf3x+0x18>
    569c:	71 f4       	brne	.+28     	; 0x56ba <__addsf3x+0x30>
    569e:	9e f5       	brtc	.+102    	; 0x5706 <__addsf3x+0x7c>
    56a0:	8f c1       	rjmp	.+798    	; 0x59c0 <__fp_zero>
    56a2:	0e f4       	brtc	.+2      	; 0x56a6 <__addsf3x+0x1c>
    56a4:	e0 95       	com	r30
    56a6:	0b 2e       	mov	r0, r27
    56a8:	ba 2f       	mov	r27, r26
    56aa:	a0 2d       	mov	r26, r0
    56ac:	0b 01       	movw	r0, r22
    56ae:	b9 01       	movw	r22, r18
    56b0:	90 01       	movw	r18, r0
    56b2:	0c 01       	movw	r0, r24
    56b4:	ca 01       	movw	r24, r20
    56b6:	a0 01       	movw	r20, r0
    56b8:	11 24       	eor	r1, r1
    56ba:	ff 27       	eor	r31, r31
    56bc:	59 1b       	sub	r21, r25
    56be:	99 f0       	breq	.+38     	; 0x56e6 <__addsf3x+0x5c>
    56c0:	59 3f       	cpi	r21, 0xF9	; 249
    56c2:	50 f4       	brcc	.+20     	; 0x56d8 <__addsf3x+0x4e>
    56c4:	50 3e       	cpi	r21, 0xE0	; 224
    56c6:	68 f1       	brcs	.+90     	; 0x5722 <__addsf3x+0x98>
    56c8:	1a 16       	cp	r1, r26
    56ca:	f0 40       	sbci	r31, 0x00	; 0
    56cc:	a2 2f       	mov	r26, r18
    56ce:	23 2f       	mov	r18, r19
    56d0:	34 2f       	mov	r19, r20
    56d2:	44 27       	eor	r20, r20
    56d4:	58 5f       	subi	r21, 0xF8	; 248
    56d6:	f3 cf       	rjmp	.-26     	; 0x56be <__addsf3x+0x34>
    56d8:	46 95       	lsr	r20
    56da:	37 95       	ror	r19
    56dc:	27 95       	ror	r18
    56de:	a7 95       	ror	r26
    56e0:	f0 40       	sbci	r31, 0x00	; 0
    56e2:	53 95       	inc	r21
    56e4:	c9 f7       	brne	.-14     	; 0x56d8 <__addsf3x+0x4e>
    56e6:	7e f4       	brtc	.+30     	; 0x5706 <__addsf3x+0x7c>
    56e8:	1f 16       	cp	r1, r31
    56ea:	ba 0b       	sbc	r27, r26
    56ec:	62 0b       	sbc	r22, r18
    56ee:	73 0b       	sbc	r23, r19
    56f0:	84 0b       	sbc	r24, r20
    56f2:	ba f0       	brmi	.+46     	; 0x5722 <__addsf3x+0x98>
    56f4:	91 50       	subi	r25, 0x01	; 1
    56f6:	a1 f0       	breq	.+40     	; 0x5720 <__addsf3x+0x96>
    56f8:	ff 0f       	add	r31, r31
    56fa:	bb 1f       	adc	r27, r27
    56fc:	66 1f       	adc	r22, r22
    56fe:	77 1f       	adc	r23, r23
    5700:	88 1f       	adc	r24, r24
    5702:	c2 f7       	brpl	.-16     	; 0x56f4 <__addsf3x+0x6a>
    5704:	0e c0       	rjmp	.+28     	; 0x5722 <__addsf3x+0x98>
    5706:	ba 0f       	add	r27, r26
    5708:	62 1f       	adc	r22, r18
    570a:	73 1f       	adc	r23, r19
    570c:	84 1f       	adc	r24, r20
    570e:	48 f4       	brcc	.+18     	; 0x5722 <__addsf3x+0x98>
    5710:	87 95       	ror	r24
    5712:	77 95       	ror	r23
    5714:	67 95       	ror	r22
    5716:	b7 95       	ror	r27
    5718:	f7 95       	ror	r31
    571a:	9e 3f       	cpi	r25, 0xFE	; 254
    571c:	08 f0       	brcs	.+2      	; 0x5720 <__addsf3x+0x96>
    571e:	b3 cf       	rjmp	.-154    	; 0x5686 <__addsf3+0x1e>
    5720:	93 95       	inc	r25
    5722:	88 0f       	add	r24, r24
    5724:	08 f0       	brcs	.+2      	; 0x5728 <__addsf3x+0x9e>
    5726:	99 27       	eor	r25, r25
    5728:	ee 0f       	add	r30, r30
    572a:	97 95       	ror	r25
    572c:	87 95       	ror	r24
    572e:	08 95       	ret

00005730 <__cmpsf2>:
    5730:	d9 d0       	rcall	.+434    	; 0x58e4 <__fp_cmp>
    5732:	08 f4       	brcc	.+2      	; 0x5736 <__cmpsf2+0x6>
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	08 95       	ret

00005738 <__divsf3>:
    5738:	0c d0       	rcall	.+24     	; 0x5752 <__divsf3x>
    573a:	0f c1       	rjmp	.+542    	; 0x595a <__fp_round>
    573c:	07 d1       	rcall	.+526    	; 0x594c <__fp_pscB>
    573e:	40 f0       	brcs	.+16     	; 0x5750 <__divsf3+0x18>
    5740:	fe d0       	rcall	.+508    	; 0x593e <__fp_pscA>
    5742:	30 f0       	brcs	.+12     	; 0x5750 <__divsf3+0x18>
    5744:	21 f4       	brne	.+8      	; 0x574e <__divsf3+0x16>
    5746:	5f 3f       	cpi	r21, 0xFF	; 255
    5748:	19 f0       	breq	.+6      	; 0x5750 <__divsf3+0x18>
    574a:	f0 c0       	rjmp	.+480    	; 0x592c <__fp_inf>
    574c:	51 11       	cpse	r21, r1
    574e:	39 c1       	rjmp	.+626    	; 0x59c2 <__fp_szero>
    5750:	f3 c0       	rjmp	.+486    	; 0x5938 <__fp_nan>

00005752 <__divsf3x>:
    5752:	14 d1       	rcall	.+552    	; 0x597c <__fp_split3>
    5754:	98 f3       	brcs	.-26     	; 0x573c <__divsf3+0x4>

00005756 <__divsf3_pse>:
    5756:	99 23       	and	r25, r25
    5758:	c9 f3       	breq	.-14     	; 0x574c <__divsf3+0x14>
    575a:	55 23       	and	r21, r21
    575c:	b1 f3       	breq	.-20     	; 0x574a <__divsf3+0x12>
    575e:	95 1b       	sub	r25, r21
    5760:	55 0b       	sbc	r21, r21
    5762:	bb 27       	eor	r27, r27
    5764:	aa 27       	eor	r26, r26
    5766:	62 17       	cp	r22, r18
    5768:	73 07       	cpc	r23, r19
    576a:	84 07       	cpc	r24, r20
    576c:	38 f0       	brcs	.+14     	; 0x577c <__divsf3_pse+0x26>
    576e:	9f 5f       	subi	r25, 0xFF	; 255
    5770:	5f 4f       	sbci	r21, 0xFF	; 255
    5772:	22 0f       	add	r18, r18
    5774:	33 1f       	adc	r19, r19
    5776:	44 1f       	adc	r20, r20
    5778:	aa 1f       	adc	r26, r26
    577a:	a9 f3       	breq	.-22     	; 0x5766 <__divsf3_pse+0x10>
    577c:	33 d0       	rcall	.+102    	; 0x57e4 <__divsf3_pse+0x8e>
    577e:	0e 2e       	mov	r0, r30
    5780:	3a f0       	brmi	.+14     	; 0x5790 <__divsf3_pse+0x3a>
    5782:	e0 e8       	ldi	r30, 0x80	; 128
    5784:	30 d0       	rcall	.+96     	; 0x57e6 <__divsf3_pse+0x90>
    5786:	91 50       	subi	r25, 0x01	; 1
    5788:	50 40       	sbci	r21, 0x00	; 0
    578a:	e6 95       	lsr	r30
    578c:	00 1c       	adc	r0, r0
    578e:	ca f7       	brpl	.-14     	; 0x5782 <__divsf3_pse+0x2c>
    5790:	29 d0       	rcall	.+82     	; 0x57e4 <__divsf3_pse+0x8e>
    5792:	fe 2f       	mov	r31, r30
    5794:	27 d0       	rcall	.+78     	; 0x57e4 <__divsf3_pse+0x8e>
    5796:	66 0f       	add	r22, r22
    5798:	77 1f       	adc	r23, r23
    579a:	88 1f       	adc	r24, r24
    579c:	bb 1f       	adc	r27, r27
    579e:	26 17       	cp	r18, r22
    57a0:	37 07       	cpc	r19, r23
    57a2:	48 07       	cpc	r20, r24
    57a4:	ab 07       	cpc	r26, r27
    57a6:	b0 e8       	ldi	r27, 0x80	; 128
    57a8:	09 f0       	breq	.+2      	; 0x57ac <__divsf3_pse+0x56>
    57aa:	bb 0b       	sbc	r27, r27
    57ac:	80 2d       	mov	r24, r0
    57ae:	bf 01       	movw	r22, r30
    57b0:	ff 27       	eor	r31, r31
    57b2:	93 58       	subi	r25, 0x83	; 131
    57b4:	5f 4f       	sbci	r21, 0xFF	; 255
    57b6:	2a f0       	brmi	.+10     	; 0x57c2 <__divsf3_pse+0x6c>
    57b8:	9e 3f       	cpi	r25, 0xFE	; 254
    57ba:	51 05       	cpc	r21, r1
    57bc:	68 f0       	brcs	.+26     	; 0x57d8 <__divsf3_pse+0x82>
    57be:	b6 c0       	rjmp	.+364    	; 0x592c <__fp_inf>
    57c0:	00 c1       	rjmp	.+512    	; 0x59c2 <__fp_szero>
    57c2:	5f 3f       	cpi	r21, 0xFF	; 255
    57c4:	ec f3       	brlt	.-6      	; 0x57c0 <__divsf3_pse+0x6a>
    57c6:	98 3e       	cpi	r25, 0xE8	; 232
    57c8:	dc f3       	brlt	.-10     	; 0x57c0 <__divsf3_pse+0x6a>
    57ca:	86 95       	lsr	r24
    57cc:	77 95       	ror	r23
    57ce:	67 95       	ror	r22
    57d0:	b7 95       	ror	r27
    57d2:	f7 95       	ror	r31
    57d4:	9f 5f       	subi	r25, 0xFF	; 255
    57d6:	c9 f7       	brne	.-14     	; 0x57ca <__divsf3_pse+0x74>
    57d8:	88 0f       	add	r24, r24
    57da:	91 1d       	adc	r25, r1
    57dc:	96 95       	lsr	r25
    57de:	87 95       	ror	r24
    57e0:	97 f9       	bld	r25, 7
    57e2:	08 95       	ret
    57e4:	e1 e0       	ldi	r30, 0x01	; 1
    57e6:	66 0f       	add	r22, r22
    57e8:	77 1f       	adc	r23, r23
    57ea:	88 1f       	adc	r24, r24
    57ec:	bb 1f       	adc	r27, r27
    57ee:	62 17       	cp	r22, r18
    57f0:	73 07       	cpc	r23, r19
    57f2:	84 07       	cpc	r24, r20
    57f4:	ba 07       	cpc	r27, r26
    57f6:	20 f0       	brcs	.+8      	; 0x5800 <__divsf3_pse+0xaa>
    57f8:	62 1b       	sub	r22, r18
    57fa:	73 0b       	sbc	r23, r19
    57fc:	84 0b       	sbc	r24, r20
    57fe:	ba 0b       	sbc	r27, r26
    5800:	ee 1f       	adc	r30, r30
    5802:	88 f7       	brcc	.-30     	; 0x57e6 <__divsf3_pse+0x90>
    5804:	e0 95       	com	r30
    5806:	08 95       	ret

00005808 <__fixsfsi>:
    5808:	04 d0       	rcall	.+8      	; 0x5812 <__fixunssfsi>
    580a:	68 94       	set
    580c:	b1 11       	cpse	r27, r1
    580e:	d9 c0       	rjmp	.+434    	; 0x59c2 <__fp_szero>
    5810:	08 95       	ret

00005812 <__fixunssfsi>:
    5812:	bc d0       	rcall	.+376    	; 0x598c <__fp_splitA>
    5814:	88 f0       	brcs	.+34     	; 0x5838 <__fixunssfsi+0x26>
    5816:	9f 57       	subi	r25, 0x7F	; 127
    5818:	90 f0       	brcs	.+36     	; 0x583e <__fixunssfsi+0x2c>
    581a:	b9 2f       	mov	r27, r25
    581c:	99 27       	eor	r25, r25
    581e:	b7 51       	subi	r27, 0x17	; 23
    5820:	a0 f0       	brcs	.+40     	; 0x584a <__fixunssfsi+0x38>
    5822:	d1 f0       	breq	.+52     	; 0x5858 <__fixunssfsi+0x46>
    5824:	66 0f       	add	r22, r22
    5826:	77 1f       	adc	r23, r23
    5828:	88 1f       	adc	r24, r24
    582a:	99 1f       	adc	r25, r25
    582c:	1a f0       	brmi	.+6      	; 0x5834 <__fixunssfsi+0x22>
    582e:	ba 95       	dec	r27
    5830:	c9 f7       	brne	.-14     	; 0x5824 <__fixunssfsi+0x12>
    5832:	12 c0       	rjmp	.+36     	; 0x5858 <__fixunssfsi+0x46>
    5834:	b1 30       	cpi	r27, 0x01	; 1
    5836:	81 f0       	breq	.+32     	; 0x5858 <__fixunssfsi+0x46>
    5838:	c3 d0       	rcall	.+390    	; 0x59c0 <__fp_zero>
    583a:	b1 e0       	ldi	r27, 0x01	; 1
    583c:	08 95       	ret
    583e:	c0 c0       	rjmp	.+384    	; 0x59c0 <__fp_zero>
    5840:	67 2f       	mov	r22, r23
    5842:	78 2f       	mov	r23, r24
    5844:	88 27       	eor	r24, r24
    5846:	b8 5f       	subi	r27, 0xF8	; 248
    5848:	39 f0       	breq	.+14     	; 0x5858 <__fixunssfsi+0x46>
    584a:	b9 3f       	cpi	r27, 0xF9	; 249
    584c:	cc f3       	brlt	.-14     	; 0x5840 <__fixunssfsi+0x2e>
    584e:	86 95       	lsr	r24
    5850:	77 95       	ror	r23
    5852:	67 95       	ror	r22
    5854:	b3 95       	inc	r27
    5856:	d9 f7       	brne	.-10     	; 0x584e <__fixunssfsi+0x3c>
    5858:	3e f4       	brtc	.+14     	; 0x5868 <__fixunssfsi+0x56>
    585a:	90 95       	com	r25
    585c:	80 95       	com	r24
    585e:	70 95       	com	r23
    5860:	61 95       	neg	r22
    5862:	7f 4f       	sbci	r23, 0xFF	; 255
    5864:	8f 4f       	sbci	r24, 0xFF	; 255
    5866:	9f 4f       	sbci	r25, 0xFF	; 255
    5868:	08 95       	ret

0000586a <__floatunsisf>:
    586a:	e8 94       	clt
    586c:	09 c0       	rjmp	.+18     	; 0x5880 <__floatsisf+0x12>

0000586e <__floatsisf>:
    586e:	97 fb       	bst	r25, 7
    5870:	3e f4       	brtc	.+14     	; 0x5880 <__floatsisf+0x12>
    5872:	90 95       	com	r25
    5874:	80 95       	com	r24
    5876:	70 95       	com	r23
    5878:	61 95       	neg	r22
    587a:	7f 4f       	sbci	r23, 0xFF	; 255
    587c:	8f 4f       	sbci	r24, 0xFF	; 255
    587e:	9f 4f       	sbci	r25, 0xFF	; 255
    5880:	99 23       	and	r25, r25
    5882:	a9 f0       	breq	.+42     	; 0x58ae <__floatsisf+0x40>
    5884:	f9 2f       	mov	r31, r25
    5886:	96 e9       	ldi	r25, 0x96	; 150
    5888:	bb 27       	eor	r27, r27
    588a:	93 95       	inc	r25
    588c:	f6 95       	lsr	r31
    588e:	87 95       	ror	r24
    5890:	77 95       	ror	r23
    5892:	67 95       	ror	r22
    5894:	b7 95       	ror	r27
    5896:	f1 11       	cpse	r31, r1
    5898:	f8 cf       	rjmp	.-16     	; 0x588a <__floatsisf+0x1c>
    589a:	fa f4       	brpl	.+62     	; 0x58da <__floatsisf+0x6c>
    589c:	bb 0f       	add	r27, r27
    589e:	11 f4       	brne	.+4      	; 0x58a4 <__floatsisf+0x36>
    58a0:	60 ff       	sbrs	r22, 0
    58a2:	1b c0       	rjmp	.+54     	; 0x58da <__floatsisf+0x6c>
    58a4:	6f 5f       	subi	r22, 0xFF	; 255
    58a6:	7f 4f       	sbci	r23, 0xFF	; 255
    58a8:	8f 4f       	sbci	r24, 0xFF	; 255
    58aa:	9f 4f       	sbci	r25, 0xFF	; 255
    58ac:	16 c0       	rjmp	.+44     	; 0x58da <__floatsisf+0x6c>
    58ae:	88 23       	and	r24, r24
    58b0:	11 f0       	breq	.+4      	; 0x58b6 <__floatsisf+0x48>
    58b2:	96 e9       	ldi	r25, 0x96	; 150
    58b4:	11 c0       	rjmp	.+34     	; 0x58d8 <__floatsisf+0x6a>
    58b6:	77 23       	and	r23, r23
    58b8:	21 f0       	breq	.+8      	; 0x58c2 <__floatsisf+0x54>
    58ba:	9e e8       	ldi	r25, 0x8E	; 142
    58bc:	87 2f       	mov	r24, r23
    58be:	76 2f       	mov	r23, r22
    58c0:	05 c0       	rjmp	.+10     	; 0x58cc <__floatsisf+0x5e>
    58c2:	66 23       	and	r22, r22
    58c4:	71 f0       	breq	.+28     	; 0x58e2 <__floatsisf+0x74>
    58c6:	96 e8       	ldi	r25, 0x86	; 134
    58c8:	86 2f       	mov	r24, r22
    58ca:	70 e0       	ldi	r23, 0x00	; 0
    58cc:	60 e0       	ldi	r22, 0x00	; 0
    58ce:	2a f0       	brmi	.+10     	; 0x58da <__floatsisf+0x6c>
    58d0:	9a 95       	dec	r25
    58d2:	66 0f       	add	r22, r22
    58d4:	77 1f       	adc	r23, r23
    58d6:	88 1f       	adc	r24, r24
    58d8:	da f7       	brpl	.-10     	; 0x58d0 <__floatsisf+0x62>
    58da:	88 0f       	add	r24, r24
    58dc:	96 95       	lsr	r25
    58de:	87 95       	ror	r24
    58e0:	97 f9       	bld	r25, 7
    58e2:	08 95       	ret

000058e4 <__fp_cmp>:
    58e4:	99 0f       	add	r25, r25
    58e6:	00 08       	sbc	r0, r0
    58e8:	55 0f       	add	r21, r21
    58ea:	aa 0b       	sbc	r26, r26
    58ec:	e0 e8       	ldi	r30, 0x80	; 128
    58ee:	fe ef       	ldi	r31, 0xFE	; 254
    58f0:	16 16       	cp	r1, r22
    58f2:	17 06       	cpc	r1, r23
    58f4:	e8 07       	cpc	r30, r24
    58f6:	f9 07       	cpc	r31, r25
    58f8:	c0 f0       	brcs	.+48     	; 0x592a <__fp_cmp+0x46>
    58fa:	12 16       	cp	r1, r18
    58fc:	13 06       	cpc	r1, r19
    58fe:	e4 07       	cpc	r30, r20
    5900:	f5 07       	cpc	r31, r21
    5902:	98 f0       	brcs	.+38     	; 0x592a <__fp_cmp+0x46>
    5904:	62 1b       	sub	r22, r18
    5906:	73 0b       	sbc	r23, r19
    5908:	84 0b       	sbc	r24, r20
    590a:	95 0b       	sbc	r25, r21
    590c:	39 f4       	brne	.+14     	; 0x591c <__fp_cmp+0x38>
    590e:	0a 26       	eor	r0, r26
    5910:	61 f0       	breq	.+24     	; 0x592a <__fp_cmp+0x46>
    5912:	23 2b       	or	r18, r19
    5914:	24 2b       	or	r18, r20
    5916:	25 2b       	or	r18, r21
    5918:	21 f4       	brne	.+8      	; 0x5922 <__fp_cmp+0x3e>
    591a:	08 95       	ret
    591c:	0a 26       	eor	r0, r26
    591e:	09 f4       	brne	.+2      	; 0x5922 <__fp_cmp+0x3e>
    5920:	a1 40       	sbci	r26, 0x01	; 1
    5922:	a6 95       	lsr	r26
    5924:	8f ef       	ldi	r24, 0xFF	; 255
    5926:	81 1d       	adc	r24, r1
    5928:	81 1d       	adc	r24, r1
    592a:	08 95       	ret

0000592c <__fp_inf>:
    592c:	97 f9       	bld	r25, 7
    592e:	9f 67       	ori	r25, 0x7F	; 127
    5930:	80 e8       	ldi	r24, 0x80	; 128
    5932:	70 e0       	ldi	r23, 0x00	; 0
    5934:	60 e0       	ldi	r22, 0x00	; 0
    5936:	08 95       	ret

00005938 <__fp_nan>:
    5938:	9f ef       	ldi	r25, 0xFF	; 255
    593a:	80 ec       	ldi	r24, 0xC0	; 192
    593c:	08 95       	ret

0000593e <__fp_pscA>:
    593e:	00 24       	eor	r0, r0
    5940:	0a 94       	dec	r0
    5942:	16 16       	cp	r1, r22
    5944:	17 06       	cpc	r1, r23
    5946:	18 06       	cpc	r1, r24
    5948:	09 06       	cpc	r0, r25
    594a:	08 95       	ret

0000594c <__fp_pscB>:
    594c:	00 24       	eor	r0, r0
    594e:	0a 94       	dec	r0
    5950:	12 16       	cp	r1, r18
    5952:	13 06       	cpc	r1, r19
    5954:	14 06       	cpc	r1, r20
    5956:	05 06       	cpc	r0, r21
    5958:	08 95       	ret

0000595a <__fp_round>:
    595a:	09 2e       	mov	r0, r25
    595c:	03 94       	inc	r0
    595e:	00 0c       	add	r0, r0
    5960:	11 f4       	brne	.+4      	; 0x5966 <__fp_round+0xc>
    5962:	88 23       	and	r24, r24
    5964:	52 f0       	brmi	.+20     	; 0x597a <__fp_round+0x20>
    5966:	bb 0f       	add	r27, r27
    5968:	40 f4       	brcc	.+16     	; 0x597a <__fp_round+0x20>
    596a:	bf 2b       	or	r27, r31
    596c:	11 f4       	brne	.+4      	; 0x5972 <__fp_round+0x18>
    596e:	60 ff       	sbrs	r22, 0
    5970:	04 c0       	rjmp	.+8      	; 0x597a <__fp_round+0x20>
    5972:	6f 5f       	subi	r22, 0xFF	; 255
    5974:	7f 4f       	sbci	r23, 0xFF	; 255
    5976:	8f 4f       	sbci	r24, 0xFF	; 255
    5978:	9f 4f       	sbci	r25, 0xFF	; 255
    597a:	08 95       	ret

0000597c <__fp_split3>:
    597c:	57 fd       	sbrc	r21, 7
    597e:	90 58       	subi	r25, 0x80	; 128
    5980:	44 0f       	add	r20, r20
    5982:	55 1f       	adc	r21, r21
    5984:	59 f0       	breq	.+22     	; 0x599c <__fp_splitA+0x10>
    5986:	5f 3f       	cpi	r21, 0xFF	; 255
    5988:	71 f0       	breq	.+28     	; 0x59a6 <__fp_splitA+0x1a>
    598a:	47 95       	ror	r20

0000598c <__fp_splitA>:
    598c:	88 0f       	add	r24, r24
    598e:	97 fb       	bst	r25, 7
    5990:	99 1f       	adc	r25, r25
    5992:	61 f0       	breq	.+24     	; 0x59ac <__fp_splitA+0x20>
    5994:	9f 3f       	cpi	r25, 0xFF	; 255
    5996:	79 f0       	breq	.+30     	; 0x59b6 <__fp_splitA+0x2a>
    5998:	87 95       	ror	r24
    599a:	08 95       	ret
    599c:	12 16       	cp	r1, r18
    599e:	13 06       	cpc	r1, r19
    59a0:	14 06       	cpc	r1, r20
    59a2:	55 1f       	adc	r21, r21
    59a4:	f2 cf       	rjmp	.-28     	; 0x598a <__fp_split3+0xe>
    59a6:	46 95       	lsr	r20
    59a8:	f1 df       	rcall	.-30     	; 0x598c <__fp_splitA>
    59aa:	08 c0       	rjmp	.+16     	; 0x59bc <__fp_splitA+0x30>
    59ac:	16 16       	cp	r1, r22
    59ae:	17 06       	cpc	r1, r23
    59b0:	18 06       	cpc	r1, r24
    59b2:	99 1f       	adc	r25, r25
    59b4:	f1 cf       	rjmp	.-30     	; 0x5998 <__fp_splitA+0xc>
    59b6:	86 95       	lsr	r24
    59b8:	71 05       	cpc	r23, r1
    59ba:	61 05       	cpc	r22, r1
    59bc:	08 94       	sec
    59be:	08 95       	ret

000059c0 <__fp_zero>:
    59c0:	e8 94       	clt

000059c2 <__fp_szero>:
    59c2:	bb 27       	eor	r27, r27
    59c4:	66 27       	eor	r22, r22
    59c6:	77 27       	eor	r23, r23
    59c8:	cb 01       	movw	r24, r22
    59ca:	97 f9       	bld	r25, 7
    59cc:	08 95       	ret

000059ce <__gesf2>:
    59ce:	8a df       	rcall	.-236    	; 0x58e4 <__fp_cmp>
    59d0:	08 f4       	brcc	.+2      	; 0x59d4 <__gesf2+0x6>
    59d2:	8f ef       	ldi	r24, 0xFF	; 255
    59d4:	08 95       	ret
    59d6:	0e f0       	brts	.+2      	; 0x59da <__gesf2+0xc>
    59d8:	23 c1       	rjmp	.+582    	; 0x5c20 <__fp_mpack>
    59da:	ae cf       	rjmp	.-164    	; 0x5938 <__fp_nan>
    59dc:	68 94       	set
    59de:	a6 cf       	rjmp	.-180    	; 0x592c <__fp_inf>

000059e0 <log>:
    59e0:	d5 df       	rcall	.-86     	; 0x598c <__fp_splitA>
    59e2:	c8 f3       	brcs	.-14     	; 0x59d6 <__gesf2+0x8>
    59e4:	99 23       	and	r25, r25
    59e6:	d1 f3       	breq	.-12     	; 0x59dc <__gesf2+0xe>
    59e8:	c6 f3       	brts	.-16     	; 0x59da <__gesf2+0xc>
    59ea:	df 93       	push	r29
    59ec:	cf 93       	push	r28
    59ee:	1f 93       	push	r17
    59f0:	0f 93       	push	r16
    59f2:	ff 92       	push	r15
    59f4:	c9 2f       	mov	r28, r25
    59f6:	dd 27       	eor	r29, r29
    59f8:	88 23       	and	r24, r24
    59fa:	2a f0       	brmi	.+10     	; 0x5a06 <log+0x26>
    59fc:	21 97       	sbiw	r28, 0x01	; 1
    59fe:	66 0f       	add	r22, r22
    5a00:	77 1f       	adc	r23, r23
    5a02:	88 1f       	adc	r24, r24
    5a04:	da f7       	brpl	.-10     	; 0x59fc <log+0x1c>
    5a06:	20 e0       	ldi	r18, 0x00	; 0
    5a08:	30 e0       	ldi	r19, 0x00	; 0
    5a0a:	40 e8       	ldi	r20, 0x80	; 128
    5a0c:	5f eb       	ldi	r21, 0xBF	; 191
    5a0e:	9f e3       	ldi	r25, 0x3F	; 63
    5a10:	88 39       	cpi	r24, 0x98	; 152
    5a12:	20 f0       	brcs	.+8      	; 0x5a1c <log+0x3c>
    5a14:	80 3e       	cpi	r24, 0xE0	; 224
    5a16:	30 f0       	brcs	.+12     	; 0x5a24 <log+0x44>
    5a18:	21 96       	adiw	r28, 0x01	; 1
    5a1a:	8f 77       	andi	r24, 0x7F	; 127
    5a1c:	25 de       	rcall	.-950    	; 0x5668 <__addsf3>
    5a1e:	e2 e2       	ldi	r30, 0x22	; 34
    5a20:	f2 e0       	ldi	r31, 0x02	; 2
    5a22:	03 c0       	rjmp	.+6      	; 0x5a2a <log+0x4a>
    5a24:	21 de       	rcall	.-958    	; 0x5668 <__addsf3>
    5a26:	ef e4       	ldi	r30, 0x4F	; 79
    5a28:	f2 e0       	ldi	r31, 0x02	; 2
    5a2a:	08 d1       	rcall	.+528    	; 0x5c3c <__fp_powser>
    5a2c:	8b 01       	movw	r16, r22
    5a2e:	be 01       	movw	r22, r28
    5a30:	ec 01       	movw	r28, r24
    5a32:	fb 2e       	mov	r15, r27
    5a34:	6f 57       	subi	r22, 0x7F	; 127
    5a36:	71 09       	sbc	r23, r1
    5a38:	75 95       	asr	r23
    5a3a:	77 1f       	adc	r23, r23
    5a3c:	88 0b       	sbc	r24, r24
    5a3e:	99 0b       	sbc	r25, r25
    5a40:	16 df       	rcall	.-468    	; 0x586e <__floatsisf>
    5a42:	28 e1       	ldi	r18, 0x18	; 24
    5a44:	32 e7       	ldi	r19, 0x72	; 114
    5a46:	41 e3       	ldi	r20, 0x31	; 49
    5a48:	5f e3       	ldi	r21, 0x3F	; 63
    5a4a:	16 d0       	rcall	.+44     	; 0x5a78 <__mulsf3x>
    5a4c:	af 2d       	mov	r26, r15
    5a4e:	98 01       	movw	r18, r16
    5a50:	ae 01       	movw	r20, r28
    5a52:	ff 90       	pop	r15
    5a54:	0f 91       	pop	r16
    5a56:	1f 91       	pop	r17
    5a58:	cf 91       	pop	r28
    5a5a:	df 91       	pop	r29
    5a5c:	16 de       	rcall	.-980    	; 0x568a <__addsf3x>
    5a5e:	7d cf       	rjmp	.-262    	; 0x595a <__fp_round>

00005a60 <__mulsf3>:
    5a60:	0b d0       	rcall	.+22     	; 0x5a78 <__mulsf3x>
    5a62:	7b cf       	rjmp	.-266    	; 0x595a <__fp_round>
    5a64:	6c df       	rcall	.-296    	; 0x593e <__fp_pscA>
    5a66:	28 f0       	brcs	.+10     	; 0x5a72 <__mulsf3+0x12>
    5a68:	71 df       	rcall	.-286    	; 0x594c <__fp_pscB>
    5a6a:	18 f0       	brcs	.+6      	; 0x5a72 <__mulsf3+0x12>
    5a6c:	95 23       	and	r25, r21
    5a6e:	09 f0       	breq	.+2      	; 0x5a72 <__mulsf3+0x12>
    5a70:	5d cf       	rjmp	.-326    	; 0x592c <__fp_inf>
    5a72:	62 cf       	rjmp	.-316    	; 0x5938 <__fp_nan>
    5a74:	11 24       	eor	r1, r1
    5a76:	a5 cf       	rjmp	.-182    	; 0x59c2 <__fp_szero>

00005a78 <__mulsf3x>:
    5a78:	81 df       	rcall	.-254    	; 0x597c <__fp_split3>
    5a7a:	a0 f3       	brcs	.-24     	; 0x5a64 <__mulsf3+0x4>

00005a7c <__mulsf3_pse>:
    5a7c:	95 9f       	mul	r25, r21
    5a7e:	d1 f3       	breq	.-12     	; 0x5a74 <__mulsf3+0x14>
    5a80:	95 0f       	add	r25, r21
    5a82:	50 e0       	ldi	r21, 0x00	; 0
    5a84:	55 1f       	adc	r21, r21
    5a86:	62 9f       	mul	r22, r18
    5a88:	f0 01       	movw	r30, r0
    5a8a:	72 9f       	mul	r23, r18
    5a8c:	bb 27       	eor	r27, r27
    5a8e:	f0 0d       	add	r31, r0
    5a90:	b1 1d       	adc	r27, r1
    5a92:	63 9f       	mul	r22, r19
    5a94:	aa 27       	eor	r26, r26
    5a96:	f0 0d       	add	r31, r0
    5a98:	b1 1d       	adc	r27, r1
    5a9a:	aa 1f       	adc	r26, r26
    5a9c:	64 9f       	mul	r22, r20
    5a9e:	66 27       	eor	r22, r22
    5aa0:	b0 0d       	add	r27, r0
    5aa2:	a1 1d       	adc	r26, r1
    5aa4:	66 1f       	adc	r22, r22
    5aa6:	82 9f       	mul	r24, r18
    5aa8:	22 27       	eor	r18, r18
    5aaa:	b0 0d       	add	r27, r0
    5aac:	a1 1d       	adc	r26, r1
    5aae:	62 1f       	adc	r22, r18
    5ab0:	73 9f       	mul	r23, r19
    5ab2:	b0 0d       	add	r27, r0
    5ab4:	a1 1d       	adc	r26, r1
    5ab6:	62 1f       	adc	r22, r18
    5ab8:	83 9f       	mul	r24, r19
    5aba:	a0 0d       	add	r26, r0
    5abc:	61 1d       	adc	r22, r1
    5abe:	22 1f       	adc	r18, r18
    5ac0:	74 9f       	mul	r23, r20
    5ac2:	33 27       	eor	r19, r19
    5ac4:	a0 0d       	add	r26, r0
    5ac6:	61 1d       	adc	r22, r1
    5ac8:	23 1f       	adc	r18, r19
    5aca:	84 9f       	mul	r24, r20
    5acc:	60 0d       	add	r22, r0
    5ace:	21 1d       	adc	r18, r1
    5ad0:	82 2f       	mov	r24, r18
    5ad2:	76 2f       	mov	r23, r22
    5ad4:	6a 2f       	mov	r22, r26
    5ad6:	11 24       	eor	r1, r1
    5ad8:	9f 57       	subi	r25, 0x7F	; 127
    5ada:	50 40       	sbci	r21, 0x00	; 0
    5adc:	8a f0       	brmi	.+34     	; 0x5b00 <__mulsf3_pse+0x84>
    5ade:	e1 f0       	breq	.+56     	; 0x5b18 <__mulsf3_pse+0x9c>
    5ae0:	88 23       	and	r24, r24
    5ae2:	4a f0       	brmi	.+18     	; 0x5af6 <__mulsf3_pse+0x7a>
    5ae4:	ee 0f       	add	r30, r30
    5ae6:	ff 1f       	adc	r31, r31
    5ae8:	bb 1f       	adc	r27, r27
    5aea:	66 1f       	adc	r22, r22
    5aec:	77 1f       	adc	r23, r23
    5aee:	88 1f       	adc	r24, r24
    5af0:	91 50       	subi	r25, 0x01	; 1
    5af2:	50 40       	sbci	r21, 0x00	; 0
    5af4:	a9 f7       	brne	.-22     	; 0x5ae0 <__mulsf3_pse+0x64>
    5af6:	9e 3f       	cpi	r25, 0xFE	; 254
    5af8:	51 05       	cpc	r21, r1
    5afa:	70 f0       	brcs	.+28     	; 0x5b18 <__mulsf3_pse+0x9c>
    5afc:	17 cf       	rjmp	.-466    	; 0x592c <__fp_inf>
    5afe:	61 cf       	rjmp	.-318    	; 0x59c2 <__fp_szero>
    5b00:	5f 3f       	cpi	r21, 0xFF	; 255
    5b02:	ec f3       	brlt	.-6      	; 0x5afe <__mulsf3_pse+0x82>
    5b04:	98 3e       	cpi	r25, 0xE8	; 232
    5b06:	dc f3       	brlt	.-10     	; 0x5afe <__mulsf3_pse+0x82>
    5b08:	86 95       	lsr	r24
    5b0a:	77 95       	ror	r23
    5b0c:	67 95       	ror	r22
    5b0e:	b7 95       	ror	r27
    5b10:	f7 95       	ror	r31
    5b12:	e7 95       	ror	r30
    5b14:	9f 5f       	subi	r25, 0xFF	; 255
    5b16:	c1 f7       	brne	.-16     	; 0x5b08 <__mulsf3_pse+0x8c>
    5b18:	fe 2b       	or	r31, r30
    5b1a:	88 0f       	add	r24, r24
    5b1c:	91 1d       	adc	r25, r1
    5b1e:	96 95       	lsr	r25
    5b20:	87 95       	ror	r24
    5b22:	97 f9       	bld	r25, 7
    5b24:	08 95       	ret

00005b26 <pow>:
    5b26:	fa 01       	movw	r30, r20
    5b28:	ee 0f       	add	r30, r30
    5b2a:	ff 1f       	adc	r31, r31
    5b2c:	30 96       	adiw	r30, 0x00	; 0
    5b2e:	21 05       	cpc	r18, r1
    5b30:	31 05       	cpc	r19, r1
    5b32:	99 f1       	breq	.+102    	; 0x5b9a <pow+0x74>
    5b34:	61 15       	cp	r22, r1
    5b36:	71 05       	cpc	r23, r1
    5b38:	61 f4       	brne	.+24     	; 0x5b52 <pow+0x2c>
    5b3a:	80 38       	cpi	r24, 0x80	; 128
    5b3c:	bf e3       	ldi	r27, 0x3F	; 63
    5b3e:	9b 07       	cpc	r25, r27
    5b40:	49 f1       	breq	.+82     	; 0x5b94 <pow+0x6e>
    5b42:	68 94       	set
    5b44:	90 38       	cpi	r25, 0x80	; 128
    5b46:	81 05       	cpc	r24, r1
    5b48:	61 f0       	breq	.+24     	; 0x5b62 <pow+0x3c>
    5b4a:	80 38       	cpi	r24, 0x80	; 128
    5b4c:	bf ef       	ldi	r27, 0xFF	; 255
    5b4e:	9b 07       	cpc	r25, r27
    5b50:	41 f0       	breq	.+16     	; 0x5b62 <pow+0x3c>
    5b52:	99 23       	and	r25, r25
    5b54:	42 f5       	brpl	.+80     	; 0x5ba6 <pow+0x80>
    5b56:	ff 3f       	cpi	r31, 0xFF	; 255
    5b58:	e1 05       	cpc	r30, r1
    5b5a:	31 05       	cpc	r19, r1
    5b5c:	21 05       	cpc	r18, r1
    5b5e:	11 f1       	breq	.+68     	; 0x5ba4 <pow+0x7e>
    5b60:	e8 94       	clt
    5b62:	08 94       	sec
    5b64:	e7 95       	ror	r30
    5b66:	d9 01       	movw	r26, r18
    5b68:	aa 23       	and	r26, r26
    5b6a:	29 f4       	brne	.+10     	; 0x5b76 <pow+0x50>
    5b6c:	ab 2f       	mov	r26, r27
    5b6e:	be 2f       	mov	r27, r30
    5b70:	f8 5f       	subi	r31, 0xF8	; 248
    5b72:	d0 f3       	brcs	.-12     	; 0x5b68 <pow+0x42>
    5b74:	10 c0       	rjmp	.+32     	; 0x5b96 <pow+0x70>
    5b76:	ff 5f       	subi	r31, 0xFF	; 255
    5b78:	70 f4       	brcc	.+28     	; 0x5b96 <pow+0x70>
    5b7a:	a6 95       	lsr	r26
    5b7c:	e0 f7       	brcc	.-8      	; 0x5b76 <pow+0x50>
    5b7e:	f7 39       	cpi	r31, 0x97	; 151
    5b80:	50 f0       	brcs	.+20     	; 0x5b96 <pow+0x70>
    5b82:	19 f0       	breq	.+6      	; 0x5b8a <pow+0x64>
    5b84:	ff 3a       	cpi	r31, 0xAF	; 175
    5b86:	38 f4       	brcc	.+14     	; 0x5b96 <pow+0x70>
    5b88:	9f 77       	andi	r25, 0x7F	; 127
    5b8a:	9f 93       	push	r25
    5b8c:	0c d0       	rcall	.+24     	; 0x5ba6 <pow+0x80>
    5b8e:	0f 90       	pop	r0
    5b90:	07 fc       	sbrc	r0, 7
    5b92:	90 58       	subi	r25, 0x80	; 128
    5b94:	08 95       	ret
    5b96:	3e f0       	brts	.+14     	; 0x5ba6 <pow+0x80>
    5b98:	cf ce       	rjmp	.-610    	; 0x5938 <__fp_nan>
    5b9a:	60 e0       	ldi	r22, 0x00	; 0
    5b9c:	70 e0       	ldi	r23, 0x00	; 0
    5b9e:	80 e8       	ldi	r24, 0x80	; 128
    5ba0:	9f e3       	ldi	r25, 0x3F	; 63
    5ba2:	08 95       	ret
    5ba4:	4f e7       	ldi	r20, 0x7F	; 127
    5ba6:	9f 77       	andi	r25, 0x7F	; 127
    5ba8:	5f 93       	push	r21
    5baa:	4f 93       	push	r20
    5bac:	3f 93       	push	r19
    5bae:	2f 93       	push	r18
    5bb0:	17 df       	rcall	.-466    	; 0x59e0 <log>
    5bb2:	2f 91       	pop	r18
    5bb4:	3f 91       	pop	r19
    5bb6:	4f 91       	pop	r20
    5bb8:	5f 91       	pop	r21
    5bba:	52 df       	rcall	.-348    	; 0x5a60 <__mulsf3>
    5bbc:	05 c0       	rjmp	.+10     	; 0x5bc8 <exp>
    5bbe:	19 f4       	brne	.+6      	; 0x5bc6 <pow+0xa0>
    5bc0:	0e f0       	brts	.+2      	; 0x5bc4 <pow+0x9e>
    5bc2:	b4 ce       	rjmp	.-664    	; 0x592c <__fp_inf>
    5bc4:	fd ce       	rjmp	.-518    	; 0x59c0 <__fp_zero>
    5bc6:	b8 ce       	rjmp	.-656    	; 0x5938 <__fp_nan>

00005bc8 <exp>:
    5bc8:	e1 de       	rcall	.-574    	; 0x598c <__fp_splitA>
    5bca:	c8 f3       	brcs	.-14     	; 0x5bbe <pow+0x98>
    5bcc:	96 38       	cpi	r25, 0x86	; 134
    5bce:	c0 f7       	brcc	.-16     	; 0x5bc0 <pow+0x9a>
    5bd0:	07 f8       	bld	r0, 7
    5bd2:	0f 92       	push	r0
    5bd4:	e8 94       	clt
    5bd6:	2b e3       	ldi	r18, 0x3B	; 59
    5bd8:	3a ea       	ldi	r19, 0xAA	; 170
    5bda:	48 eb       	ldi	r20, 0xB8	; 184
    5bdc:	5f e7       	ldi	r21, 0x7F	; 127
    5bde:	4e df       	rcall	.-356    	; 0x5a7c <__mulsf3_pse>
    5be0:	0f 92       	push	r0
    5be2:	0f 92       	push	r0
    5be4:	0f 92       	push	r0
    5be6:	4d b7       	in	r20, 0x3d	; 61
    5be8:	5e b7       	in	r21, 0x3e	; 62
    5bea:	0f 92       	push	r0
    5bec:	89 d0       	rcall	.+274    	; 0x5d00 <modf>
    5bee:	ec e7       	ldi	r30, 0x7C	; 124
    5bf0:	f2 e0       	ldi	r31, 0x02	; 2
    5bf2:	24 d0       	rcall	.+72     	; 0x5c3c <__fp_powser>
    5bf4:	4f 91       	pop	r20
    5bf6:	5f 91       	pop	r21
    5bf8:	ef 91       	pop	r30
    5bfa:	ff 91       	pop	r31
    5bfc:	e5 95       	asr	r30
    5bfe:	ee 1f       	adc	r30, r30
    5c00:	ff 1f       	adc	r31, r31
    5c02:	49 f0       	breq	.+18     	; 0x5c16 <exp+0x4e>
    5c04:	fe 57       	subi	r31, 0x7E	; 126
    5c06:	e0 68       	ori	r30, 0x80	; 128
    5c08:	44 27       	eor	r20, r20
    5c0a:	ee 0f       	add	r30, r30
    5c0c:	44 1f       	adc	r20, r20
    5c0e:	fa 95       	dec	r31
    5c10:	e1 f7       	brne	.-8      	; 0x5c0a <exp+0x42>
    5c12:	41 95       	neg	r20
    5c14:	55 0b       	sbc	r21, r21
    5c16:	40 d0       	rcall	.+128    	; 0x5c98 <ldexp>
    5c18:	0f 90       	pop	r0
    5c1a:	07 fe       	sbrs	r0, 7
    5c1c:	34 c0       	rjmp	.+104    	; 0x5c86 <inverse>
    5c1e:	08 95       	ret

00005c20 <__fp_mpack>:
    5c20:	9f 3f       	cpi	r25, 0xFF	; 255
    5c22:	31 f0       	breq	.+12     	; 0x5c30 <__fp_mpack_finite+0xc>

00005c24 <__fp_mpack_finite>:
    5c24:	91 50       	subi	r25, 0x01	; 1
    5c26:	20 f4       	brcc	.+8      	; 0x5c30 <__fp_mpack_finite+0xc>
    5c28:	87 95       	ror	r24
    5c2a:	77 95       	ror	r23
    5c2c:	67 95       	ror	r22
    5c2e:	b7 95       	ror	r27
    5c30:	88 0f       	add	r24, r24
    5c32:	91 1d       	adc	r25, r1
    5c34:	96 95       	lsr	r25
    5c36:	87 95       	ror	r24
    5c38:	97 f9       	bld	r25, 7
    5c3a:	08 95       	ret

00005c3c <__fp_powser>:
    5c3c:	df 93       	push	r29
    5c3e:	cf 93       	push	r28
    5c40:	1f 93       	push	r17
    5c42:	0f 93       	push	r16
    5c44:	ff 92       	push	r15
    5c46:	ef 92       	push	r14
    5c48:	df 92       	push	r13
    5c4a:	7b 01       	movw	r14, r22
    5c4c:	8c 01       	movw	r16, r24
    5c4e:	68 94       	set
    5c50:	05 c0       	rjmp	.+10     	; 0x5c5c <__fp_powser+0x20>
    5c52:	da 2e       	mov	r13, r26
    5c54:	ef 01       	movw	r28, r30
    5c56:	10 df       	rcall	.-480    	; 0x5a78 <__mulsf3x>
    5c58:	fe 01       	movw	r30, r28
    5c5a:	e8 94       	clt
    5c5c:	a5 91       	lpm	r26, Z+
    5c5e:	25 91       	lpm	r18, Z+
    5c60:	35 91       	lpm	r19, Z+
    5c62:	45 91       	lpm	r20, Z+
    5c64:	55 91       	lpm	r21, Z+
    5c66:	ae f3       	brts	.-22     	; 0x5c52 <__fp_powser+0x16>
    5c68:	ef 01       	movw	r28, r30
    5c6a:	0f dd       	rcall	.-1506   	; 0x568a <__addsf3x>
    5c6c:	fe 01       	movw	r30, r28
    5c6e:	97 01       	movw	r18, r14
    5c70:	a8 01       	movw	r20, r16
    5c72:	da 94       	dec	r13
    5c74:	79 f7       	brne	.-34     	; 0x5c54 <__fp_powser+0x18>
    5c76:	df 90       	pop	r13
    5c78:	ef 90       	pop	r14
    5c7a:	ff 90       	pop	r15
    5c7c:	0f 91       	pop	r16
    5c7e:	1f 91       	pop	r17
    5c80:	cf 91       	pop	r28
    5c82:	df 91       	pop	r29
    5c84:	08 95       	ret

00005c86 <inverse>:
    5c86:	9b 01       	movw	r18, r22
    5c88:	ac 01       	movw	r20, r24
    5c8a:	60 e0       	ldi	r22, 0x00	; 0
    5c8c:	70 e0       	ldi	r23, 0x00	; 0
    5c8e:	80 e8       	ldi	r24, 0x80	; 128
    5c90:	9f e3       	ldi	r25, 0x3F	; 63
    5c92:	52 cd       	rjmp	.-1372   	; 0x5738 <__divsf3>
    5c94:	4b ce       	rjmp	.-874    	; 0x592c <__fp_inf>
    5c96:	c4 cf       	rjmp	.-120    	; 0x5c20 <__fp_mpack>

00005c98 <ldexp>:
    5c98:	79 de       	rcall	.-782    	; 0x598c <__fp_splitA>
    5c9a:	e8 f3       	brcs	.-6      	; 0x5c96 <inverse+0x10>
    5c9c:	99 23       	and	r25, r25
    5c9e:	d9 f3       	breq	.-10     	; 0x5c96 <inverse+0x10>
    5ca0:	94 0f       	add	r25, r20
    5ca2:	51 1d       	adc	r21, r1
    5ca4:	bb f3       	brvs	.-18     	; 0x5c94 <inverse+0xe>
    5ca6:	91 50       	subi	r25, 0x01	; 1
    5ca8:	50 40       	sbci	r21, 0x00	; 0
    5caa:	94 f0       	brlt	.+36     	; 0x5cd0 <ldexp+0x38>
    5cac:	59 f0       	breq	.+22     	; 0x5cc4 <ldexp+0x2c>
    5cae:	88 23       	and	r24, r24
    5cb0:	32 f0       	brmi	.+12     	; 0x5cbe <ldexp+0x26>
    5cb2:	66 0f       	add	r22, r22
    5cb4:	77 1f       	adc	r23, r23
    5cb6:	88 1f       	adc	r24, r24
    5cb8:	91 50       	subi	r25, 0x01	; 1
    5cba:	50 40       	sbci	r21, 0x00	; 0
    5cbc:	c1 f7       	brne	.-16     	; 0x5cae <ldexp+0x16>
    5cbe:	9e 3f       	cpi	r25, 0xFE	; 254
    5cc0:	51 05       	cpc	r21, r1
    5cc2:	44 f7       	brge	.-48     	; 0x5c94 <inverse+0xe>
    5cc4:	88 0f       	add	r24, r24
    5cc6:	91 1d       	adc	r25, r1
    5cc8:	96 95       	lsr	r25
    5cca:	87 95       	ror	r24
    5ccc:	97 f9       	bld	r25, 7
    5cce:	08 95       	ret
    5cd0:	5f 3f       	cpi	r21, 0xFF	; 255
    5cd2:	ac f0       	brlt	.+42     	; 0x5cfe <ldexp+0x66>
    5cd4:	98 3e       	cpi	r25, 0xE8	; 232
    5cd6:	9c f0       	brlt	.+38     	; 0x5cfe <ldexp+0x66>
    5cd8:	bb 27       	eor	r27, r27
    5cda:	86 95       	lsr	r24
    5cdc:	77 95       	ror	r23
    5cde:	67 95       	ror	r22
    5ce0:	b7 95       	ror	r27
    5ce2:	08 f4       	brcc	.+2      	; 0x5ce6 <ldexp+0x4e>
    5ce4:	b1 60       	ori	r27, 0x01	; 1
    5ce6:	93 95       	inc	r25
    5ce8:	c1 f7       	brne	.-16     	; 0x5cda <ldexp+0x42>
    5cea:	bb 0f       	add	r27, r27
    5cec:	58 f7       	brcc	.-42     	; 0x5cc4 <ldexp+0x2c>
    5cee:	11 f4       	brne	.+4      	; 0x5cf4 <ldexp+0x5c>
    5cf0:	60 ff       	sbrs	r22, 0
    5cf2:	e8 cf       	rjmp	.-48     	; 0x5cc4 <ldexp+0x2c>
    5cf4:	6f 5f       	subi	r22, 0xFF	; 255
    5cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    5cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    5cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfc:	e3 cf       	rjmp	.-58     	; 0x5cc4 <ldexp+0x2c>
    5cfe:	61 ce       	rjmp	.-830    	; 0x59c2 <__fp_szero>

00005d00 <modf>:
    5d00:	fa 01       	movw	r30, r20
    5d02:	dc 01       	movw	r26, r24
    5d04:	aa 0f       	add	r26, r26
    5d06:	bb 1f       	adc	r27, r27
    5d08:	9b 01       	movw	r18, r22
    5d0a:	ac 01       	movw	r20, r24
    5d0c:	bf 57       	subi	r27, 0x7F	; 127
    5d0e:	28 f4       	brcc	.+10     	; 0x5d1a <modf+0x1a>
    5d10:	22 27       	eor	r18, r18
    5d12:	33 27       	eor	r19, r19
    5d14:	44 27       	eor	r20, r20
    5d16:	50 78       	andi	r21, 0x80	; 128
    5d18:	1f c0       	rjmp	.+62     	; 0x5d58 <modf+0x58>
    5d1a:	b7 51       	subi	r27, 0x17	; 23
    5d1c:	88 f4       	brcc	.+34     	; 0x5d40 <modf+0x40>
    5d1e:	ab 2f       	mov	r26, r27
    5d20:	00 24       	eor	r0, r0
    5d22:	46 95       	lsr	r20
    5d24:	37 95       	ror	r19
    5d26:	27 95       	ror	r18
    5d28:	01 1c       	adc	r0, r1
    5d2a:	a3 95       	inc	r26
    5d2c:	d2 f3       	brmi	.-12     	; 0x5d22 <modf+0x22>
    5d2e:	00 20       	and	r0, r0
    5d30:	69 f0       	breq	.+26     	; 0x5d4c <modf+0x4c>
    5d32:	22 0f       	add	r18, r18
    5d34:	33 1f       	adc	r19, r19
    5d36:	44 1f       	adc	r20, r20
    5d38:	b3 95       	inc	r27
    5d3a:	da f3       	brmi	.-10     	; 0x5d32 <modf+0x32>
    5d3c:	0d d0       	rcall	.+26     	; 0x5d58 <modf+0x58>
    5d3e:	93 cc       	rjmp	.-1754   	; 0x5666 <__subsf3>
    5d40:	61 30       	cpi	r22, 0x01	; 1
    5d42:	71 05       	cpc	r23, r1
    5d44:	a0 e8       	ldi	r26, 0x80	; 128
    5d46:	8a 07       	cpc	r24, r26
    5d48:	b9 46       	sbci	r27, 0x69	; 105
    5d4a:	30 f4       	brcc	.+12     	; 0x5d58 <modf+0x58>
    5d4c:	9b 01       	movw	r18, r22
    5d4e:	ac 01       	movw	r20, r24
    5d50:	66 27       	eor	r22, r22
    5d52:	77 27       	eor	r23, r23
    5d54:	88 27       	eor	r24, r24
    5d56:	90 78       	andi	r25, 0x80	; 128
    5d58:	30 96       	adiw	r30, 0x00	; 0
    5d5a:	21 f0       	breq	.+8      	; 0x5d64 <modf+0x64>
    5d5c:	20 83       	st	Z, r18
    5d5e:	31 83       	std	Z+1, r19	; 0x01
    5d60:	42 83       	std	Z+2, r20	; 0x02
    5d62:	53 83       	std	Z+3, r21	; 0x03
    5d64:	08 95       	ret

00005d66 <__mulsi3>:
    5d66:	db 01       	movw	r26, r22
    5d68:	8f 93       	push	r24
    5d6a:	9f 93       	push	r25
    5d6c:	88 d0       	rcall	.+272    	; 0x5e7e <__muluhisi3>
    5d6e:	bf 91       	pop	r27
    5d70:	af 91       	pop	r26
    5d72:	a2 9f       	mul	r26, r18
    5d74:	80 0d       	add	r24, r0
    5d76:	91 1d       	adc	r25, r1
    5d78:	a3 9f       	mul	r26, r19
    5d7a:	90 0d       	add	r25, r0
    5d7c:	b2 9f       	mul	r27, r18
    5d7e:	90 0d       	add	r25, r0
    5d80:	11 24       	eor	r1, r1
    5d82:	08 95       	ret

00005d84 <__udivmodhi4>:
    5d84:	aa 1b       	sub	r26, r26
    5d86:	bb 1b       	sub	r27, r27
    5d88:	51 e1       	ldi	r21, 0x11	; 17
    5d8a:	07 c0       	rjmp	.+14     	; 0x5d9a <__udivmodhi4_ep>

00005d8c <__udivmodhi4_loop>:
    5d8c:	aa 1f       	adc	r26, r26
    5d8e:	bb 1f       	adc	r27, r27
    5d90:	a6 17       	cp	r26, r22
    5d92:	b7 07       	cpc	r27, r23
    5d94:	10 f0       	brcs	.+4      	; 0x5d9a <__udivmodhi4_ep>
    5d96:	a6 1b       	sub	r26, r22
    5d98:	b7 0b       	sbc	r27, r23

00005d9a <__udivmodhi4_ep>:
    5d9a:	88 1f       	adc	r24, r24
    5d9c:	99 1f       	adc	r25, r25
    5d9e:	5a 95       	dec	r21
    5da0:	a9 f7       	brne	.-22     	; 0x5d8c <__udivmodhi4_loop>
    5da2:	80 95       	com	r24
    5da4:	90 95       	com	r25
    5da6:	bc 01       	movw	r22, r24
    5da8:	cd 01       	movw	r24, r26
    5daa:	08 95       	ret

00005dac <__divmodhi4>:
    5dac:	97 fb       	bst	r25, 7
    5dae:	07 2e       	mov	r0, r23
    5db0:	16 f4       	brtc	.+4      	; 0x5db6 <__divmodhi4+0xa>
    5db2:	00 94       	com	r0
    5db4:	06 d0       	rcall	.+12     	; 0x5dc2 <__divmodhi4_neg1>
    5db6:	77 fd       	sbrc	r23, 7
    5db8:	08 d0       	rcall	.+16     	; 0x5dca <__divmodhi4_neg2>
    5dba:	e4 df       	rcall	.-56     	; 0x5d84 <__udivmodhi4>
    5dbc:	07 fc       	sbrc	r0, 7
    5dbe:	05 d0       	rcall	.+10     	; 0x5dca <__divmodhi4_neg2>
    5dc0:	3e f4       	brtc	.+14     	; 0x5dd0 <__divmodhi4_exit>

00005dc2 <__divmodhi4_neg1>:
    5dc2:	90 95       	com	r25
    5dc4:	81 95       	neg	r24
    5dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc8:	08 95       	ret

00005dca <__divmodhi4_neg2>:
    5dca:	70 95       	com	r23
    5dcc:	61 95       	neg	r22
    5dce:	7f 4f       	sbci	r23, 0xFF	; 255

00005dd0 <__divmodhi4_exit>:
    5dd0:	08 95       	ret

00005dd2 <__udivmodsi4>:
    5dd2:	a1 e2       	ldi	r26, 0x21	; 33
    5dd4:	1a 2e       	mov	r1, r26
    5dd6:	aa 1b       	sub	r26, r26
    5dd8:	bb 1b       	sub	r27, r27
    5dda:	fd 01       	movw	r30, r26
    5ddc:	0d c0       	rjmp	.+26     	; 0x5df8 <__udivmodsi4_ep>

00005dde <__udivmodsi4_loop>:
    5dde:	aa 1f       	adc	r26, r26
    5de0:	bb 1f       	adc	r27, r27
    5de2:	ee 1f       	adc	r30, r30
    5de4:	ff 1f       	adc	r31, r31
    5de6:	a2 17       	cp	r26, r18
    5de8:	b3 07       	cpc	r27, r19
    5dea:	e4 07       	cpc	r30, r20
    5dec:	f5 07       	cpc	r31, r21
    5dee:	20 f0       	brcs	.+8      	; 0x5df8 <__udivmodsi4_ep>
    5df0:	a2 1b       	sub	r26, r18
    5df2:	b3 0b       	sbc	r27, r19
    5df4:	e4 0b       	sbc	r30, r20
    5df6:	f5 0b       	sbc	r31, r21

00005df8 <__udivmodsi4_ep>:
    5df8:	66 1f       	adc	r22, r22
    5dfa:	77 1f       	adc	r23, r23
    5dfc:	88 1f       	adc	r24, r24
    5dfe:	99 1f       	adc	r25, r25
    5e00:	1a 94       	dec	r1
    5e02:	69 f7       	brne	.-38     	; 0x5dde <__udivmodsi4_loop>
    5e04:	60 95       	com	r22
    5e06:	70 95       	com	r23
    5e08:	80 95       	com	r24
    5e0a:	90 95       	com	r25
    5e0c:	9b 01       	movw	r18, r22
    5e0e:	ac 01       	movw	r20, r24
    5e10:	bd 01       	movw	r22, r26
    5e12:	cf 01       	movw	r24, r30
    5e14:	08 95       	ret

00005e16 <__divmodsi4>:
    5e16:	05 2e       	mov	r0, r21
    5e18:	97 fb       	bst	r25, 7
    5e1a:	16 f4       	brtc	.+4      	; 0x5e20 <__divmodsi4+0xa>
    5e1c:	00 94       	com	r0
    5e1e:	0f d0       	rcall	.+30     	; 0x5e3e <__negsi2>
    5e20:	57 fd       	sbrc	r21, 7
    5e22:	05 d0       	rcall	.+10     	; 0x5e2e <__divmodsi4_neg2>
    5e24:	d6 df       	rcall	.-84     	; 0x5dd2 <__udivmodsi4>
    5e26:	07 fc       	sbrc	r0, 7
    5e28:	02 d0       	rcall	.+4      	; 0x5e2e <__divmodsi4_neg2>
    5e2a:	46 f4       	brtc	.+16     	; 0x5e3c <__divmodsi4_exit>
    5e2c:	08 c0       	rjmp	.+16     	; 0x5e3e <__negsi2>

00005e2e <__divmodsi4_neg2>:
    5e2e:	50 95       	com	r21
    5e30:	40 95       	com	r20
    5e32:	30 95       	com	r19
    5e34:	21 95       	neg	r18
    5e36:	3f 4f       	sbci	r19, 0xFF	; 255
    5e38:	4f 4f       	sbci	r20, 0xFF	; 255
    5e3a:	5f 4f       	sbci	r21, 0xFF	; 255

00005e3c <__divmodsi4_exit>:
    5e3c:	08 95       	ret

00005e3e <__negsi2>:
    5e3e:	90 95       	com	r25
    5e40:	80 95       	com	r24
    5e42:	70 95       	com	r23
    5e44:	61 95       	neg	r22
    5e46:	7f 4f       	sbci	r23, 0xFF	; 255
    5e48:	8f 4f       	sbci	r24, 0xFF	; 255
    5e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e4c:	08 95       	ret

00005e4e <__tablejump2__>:
    5e4e:	ee 0f       	add	r30, r30
    5e50:	ff 1f       	adc	r31, r31
    5e52:	88 1f       	adc	r24, r24
    5e54:	8b bf       	out	0x3b, r24	; 59
    5e56:	07 90       	elpm	r0, Z+
    5e58:	f6 91       	elpm	r31, Z
    5e5a:	e0 2d       	mov	r30, r0
    5e5c:	1b be       	out	0x3b, r1	; 59
    5e5e:	19 94       	eijmp

00005e60 <__umulhisi3>:
    5e60:	a2 9f       	mul	r26, r18
    5e62:	b0 01       	movw	r22, r0
    5e64:	b3 9f       	mul	r27, r19
    5e66:	c0 01       	movw	r24, r0
    5e68:	a3 9f       	mul	r26, r19
    5e6a:	70 0d       	add	r23, r0
    5e6c:	81 1d       	adc	r24, r1
    5e6e:	11 24       	eor	r1, r1
    5e70:	91 1d       	adc	r25, r1
    5e72:	b2 9f       	mul	r27, r18
    5e74:	70 0d       	add	r23, r0
    5e76:	81 1d       	adc	r24, r1
    5e78:	11 24       	eor	r1, r1
    5e7a:	91 1d       	adc	r25, r1
    5e7c:	08 95       	ret

00005e7e <__muluhisi3>:
    5e7e:	f0 df       	rcall	.-32     	; 0x5e60 <__umulhisi3>
    5e80:	a5 9f       	mul	r26, r21
    5e82:	90 0d       	add	r25, r0
    5e84:	b4 9f       	mul	r27, r20
    5e86:	90 0d       	add	r25, r0
    5e88:	a4 9f       	mul	r26, r20
    5e8a:	80 0d       	add	r24, r0
    5e8c:	91 1d       	adc	r25, r1
    5e8e:	11 24       	eor	r1, r1
    5e90:	08 95       	ret

00005e92 <__ashldi3>:
    5e92:	0f 93       	push	r16
    5e94:	08 30       	cpi	r16, 0x08	; 8
    5e96:	90 f0       	brcs	.+36     	; 0x5ebc <__ashldi3+0x2a>
    5e98:	98 2f       	mov	r25, r24
    5e9a:	87 2f       	mov	r24, r23
    5e9c:	76 2f       	mov	r23, r22
    5e9e:	65 2f       	mov	r22, r21
    5ea0:	54 2f       	mov	r21, r20
    5ea2:	43 2f       	mov	r20, r19
    5ea4:	32 2f       	mov	r19, r18
    5ea6:	22 27       	eor	r18, r18
    5ea8:	08 50       	subi	r16, 0x08	; 8
    5eaa:	f4 cf       	rjmp	.-24     	; 0x5e94 <__ashldi3+0x2>
    5eac:	22 0f       	add	r18, r18
    5eae:	33 1f       	adc	r19, r19
    5eb0:	44 1f       	adc	r20, r20
    5eb2:	55 1f       	adc	r21, r21
    5eb4:	66 1f       	adc	r22, r22
    5eb6:	77 1f       	adc	r23, r23
    5eb8:	88 1f       	adc	r24, r24
    5eba:	99 1f       	adc	r25, r25
    5ebc:	0a 95       	dec	r16
    5ebe:	b2 f7       	brpl	.-20     	; 0x5eac <__ashldi3+0x1a>
    5ec0:	0f 91       	pop	r16
    5ec2:	08 95       	ret

00005ec4 <__ashrdi3>:
    5ec4:	97 fb       	bst	r25, 7
    5ec6:	10 f8       	bld	r1, 0

00005ec8 <__lshrdi3>:
    5ec8:	16 94       	lsr	r1
    5eca:	00 08       	sbc	r0, r0
    5ecc:	0f 93       	push	r16
    5ece:	08 30       	cpi	r16, 0x08	; 8
    5ed0:	98 f0       	brcs	.+38     	; 0x5ef8 <__lshrdi3+0x30>
    5ed2:	08 50       	subi	r16, 0x08	; 8
    5ed4:	23 2f       	mov	r18, r19
    5ed6:	34 2f       	mov	r19, r20
    5ed8:	45 2f       	mov	r20, r21
    5eda:	56 2f       	mov	r21, r22
    5edc:	67 2f       	mov	r22, r23
    5ede:	78 2f       	mov	r23, r24
    5ee0:	89 2f       	mov	r24, r25
    5ee2:	90 2d       	mov	r25, r0
    5ee4:	f4 cf       	rjmp	.-24     	; 0x5ece <__lshrdi3+0x6>
    5ee6:	05 94       	asr	r0
    5ee8:	97 95       	ror	r25
    5eea:	87 95       	ror	r24
    5eec:	77 95       	ror	r23
    5eee:	67 95       	ror	r22
    5ef0:	57 95       	ror	r21
    5ef2:	47 95       	ror	r20
    5ef4:	37 95       	ror	r19
    5ef6:	27 95       	ror	r18
    5ef8:	0a 95       	dec	r16
    5efa:	aa f7       	brpl	.-22     	; 0x5ee6 <__lshrdi3+0x1e>
    5efc:	0f 91       	pop	r16
    5efe:	08 95       	ret

00005f00 <fdevopen>:
    5f00:	0f 93       	push	r16
    5f02:	1f 93       	push	r17
    5f04:	cf 93       	push	r28
    5f06:	df 93       	push	r29
    5f08:	00 97       	sbiw	r24, 0x00	; 0
    5f0a:	31 f4       	brne	.+12     	; 0x5f18 <fdevopen+0x18>
    5f0c:	61 15       	cp	r22, r1
    5f0e:	71 05       	cpc	r23, r1
    5f10:	19 f4       	brne	.+6      	; 0x5f18 <fdevopen+0x18>
    5f12:	80 e0       	ldi	r24, 0x00	; 0
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	39 c0       	rjmp	.+114    	; 0x5f8a <fdevopen+0x8a>
    5f18:	8b 01       	movw	r16, r22
    5f1a:	ec 01       	movw	r28, r24
    5f1c:	6e e0       	ldi	r22, 0x0E	; 14
    5f1e:	70 e0       	ldi	r23, 0x00	; 0
    5f20:	81 e0       	ldi	r24, 0x01	; 1
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	47 d5       	rcall	.+2702   	; 0x69b4 <calloc>
    5f26:	fc 01       	movw	r30, r24
    5f28:	89 2b       	or	r24, r25
    5f2a:	99 f3       	breq	.-26     	; 0x5f12 <fdevopen+0x12>
    5f2c:	80 e8       	ldi	r24, 0x80	; 128
    5f2e:	83 83       	std	Z+3, r24	; 0x03
    5f30:	01 15       	cp	r16, r1
    5f32:	11 05       	cpc	r17, r1
    5f34:	71 f0       	breq	.+28     	; 0x5f52 <fdevopen+0x52>
    5f36:	02 87       	std	Z+10, r16	; 0x0a
    5f38:	13 87       	std	Z+11, r17	; 0x0b
    5f3a:	81 e8       	ldi	r24, 0x81	; 129
    5f3c:	83 83       	std	Z+3, r24	; 0x03
    5f3e:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <__iob>
    5f42:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <__iob+0x1>
    5f46:	89 2b       	or	r24, r25
    5f48:	21 f4       	brne	.+8      	; 0x5f52 <fdevopen+0x52>
    5f4a:	e0 93 02 22 	sts	0x2202, r30	; 0x802202 <__iob>
    5f4e:	f0 93 03 22 	sts	0x2203, r31	; 0x802203 <__iob+0x1>
    5f52:	20 97       	sbiw	r28, 0x00	; 0
    5f54:	c9 f0       	breq	.+50     	; 0x5f88 <fdevopen+0x88>
    5f56:	c0 87       	std	Z+8, r28	; 0x08
    5f58:	d1 87       	std	Z+9, r29	; 0x09
    5f5a:	83 81       	ldd	r24, Z+3	; 0x03
    5f5c:	82 60       	ori	r24, 0x02	; 2
    5f5e:	83 83       	std	Z+3, r24	; 0x03
    5f60:	80 91 04 22 	lds	r24, 0x2204	; 0x802204 <__iob+0x2>
    5f64:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <__iob+0x3>
    5f68:	89 2b       	or	r24, r25
    5f6a:	71 f4       	brne	.+28     	; 0x5f88 <fdevopen+0x88>
    5f6c:	e0 93 04 22 	sts	0x2204, r30	; 0x802204 <__iob+0x2>
    5f70:	f0 93 05 22 	sts	0x2205, r31	; 0x802205 <__iob+0x3>
    5f74:	80 91 06 22 	lds	r24, 0x2206	; 0x802206 <__iob+0x4>
    5f78:	90 91 07 22 	lds	r25, 0x2207	; 0x802207 <__iob+0x5>
    5f7c:	89 2b       	or	r24, r25
    5f7e:	21 f4       	brne	.+8      	; 0x5f88 <fdevopen+0x88>
    5f80:	e0 93 06 22 	sts	0x2206, r30	; 0x802206 <__iob+0x4>
    5f84:	f0 93 07 22 	sts	0x2207, r31	; 0x802207 <__iob+0x5>
    5f88:	cf 01       	movw	r24, r30
    5f8a:	df 91       	pop	r29
    5f8c:	cf 91       	pop	r28
    5f8e:	1f 91       	pop	r17
    5f90:	0f 91       	pop	r16
    5f92:	08 95       	ret

00005f94 <printf>:
    5f94:	cf 93       	push	r28
    5f96:	df 93       	push	r29
    5f98:	cd b7       	in	r28, 0x3d	; 61
    5f9a:	de b7       	in	r29, 0x3e	; 62
    5f9c:	ae 01       	movw	r20, r28
    5f9e:	4a 5f       	subi	r20, 0xFA	; 250
    5fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fa2:	fa 01       	movw	r30, r20
    5fa4:	61 91       	ld	r22, Z+
    5fa6:	71 91       	ld	r23, Z+
    5fa8:	af 01       	movw	r20, r30
    5faa:	80 91 04 22 	lds	r24, 0x2204	; 0x802204 <__iob+0x2>
    5fae:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <__iob+0x3>
    5fb2:	46 d0       	rcall	.+140    	; 0x6040 <vfprintf>
    5fb4:	df 91       	pop	r29
    5fb6:	cf 91       	pop	r28
    5fb8:	08 95       	ret

00005fba <sprintf>:
    5fba:	0f 93       	push	r16
    5fbc:	1f 93       	push	r17
    5fbe:	cf 93       	push	r28
    5fc0:	df 93       	push	r29
    5fc2:	cd b7       	in	r28, 0x3d	; 61
    5fc4:	de b7       	in	r29, 0x3e	; 62
    5fc6:	2e 97       	sbiw	r28, 0x0e	; 14
    5fc8:	cd bf       	out	0x3d, r28	; 61
    5fca:	de bf       	out	0x3e, r29	; 62
    5fcc:	0e 89       	ldd	r16, Y+22	; 0x16
    5fce:	1f 89       	ldd	r17, Y+23	; 0x17
    5fd0:	86 e0       	ldi	r24, 0x06	; 6
    5fd2:	8c 83       	std	Y+4, r24	; 0x04
    5fd4:	09 83       	std	Y+1, r16	; 0x01
    5fd6:	1a 83       	std	Y+2, r17	; 0x02
    5fd8:	8f ef       	ldi	r24, 0xFF	; 255
    5fda:	9f e7       	ldi	r25, 0x7F	; 127
    5fdc:	8d 83       	std	Y+5, r24	; 0x05
    5fde:	9e 83       	std	Y+6, r25	; 0x06
    5fe0:	ae 01       	movw	r20, r28
    5fe2:	46 5e       	subi	r20, 0xE6	; 230
    5fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    5fe6:	68 8d       	ldd	r22, Y+24	; 0x18
    5fe8:	79 8d       	ldd	r23, Y+25	; 0x19
    5fea:	ce 01       	movw	r24, r28
    5fec:	01 96       	adiw	r24, 0x01	; 1
    5fee:	28 d0       	rcall	.+80     	; 0x6040 <vfprintf>
    5ff0:	ef 81       	ldd	r30, Y+7	; 0x07
    5ff2:	f8 85       	ldd	r31, Y+8	; 0x08
    5ff4:	e0 0f       	add	r30, r16
    5ff6:	f1 1f       	adc	r31, r17
    5ff8:	10 82       	st	Z, r1
    5ffa:	2e 96       	adiw	r28, 0x0e	; 14
    5ffc:	cd bf       	out	0x3d, r28	; 61
    5ffe:	de bf       	out	0x3e, r29	; 62
    6000:	df 91       	pop	r29
    6002:	cf 91       	pop	r28
    6004:	1f 91       	pop	r17
    6006:	0f 91       	pop	r16
    6008:	08 95       	ret

0000600a <sscanf>:
    600a:	cf 93       	push	r28
    600c:	df 93       	push	r29
    600e:	cd b7       	in	r28, 0x3d	; 61
    6010:	de b7       	in	r29, 0x3e	; 62
    6012:	2e 97       	sbiw	r28, 0x0e	; 14
    6014:	cd bf       	out	0x3d, r28	; 61
    6016:	de bf       	out	0x3e, r29	; 62
    6018:	85 e0       	ldi	r24, 0x05	; 5
    601a:	8c 83       	std	Y+4, r24	; 0x04
    601c:	8c 89       	ldd	r24, Y+20	; 0x14
    601e:	9d 89       	ldd	r25, Y+21	; 0x15
    6020:	89 83       	std	Y+1, r24	; 0x01
    6022:	9a 83       	std	Y+2, r25	; 0x02
    6024:	ae 01       	movw	r20, r28
    6026:	48 5e       	subi	r20, 0xE8	; 232
    6028:	5f 4f       	sbci	r21, 0xFF	; 255
    602a:	6e 89       	ldd	r22, Y+22	; 0x16
    602c:	7f 89       	ldd	r23, Y+23	; 0x17
    602e:	ce 01       	movw	r24, r28
    6030:	01 96       	adiw	r24, 0x01	; 1
    6032:	a9 d3       	rcall	.+1874   	; 0x6786 <vfscanf>
    6034:	2e 96       	adiw	r28, 0x0e	; 14
    6036:	cd bf       	out	0x3d, r28	; 61
    6038:	de bf       	out	0x3e, r29	; 62
    603a:	df 91       	pop	r29
    603c:	cf 91       	pop	r28
    603e:	08 95       	ret

00006040 <vfprintf>:
    6040:	2f 92       	push	r2
    6042:	3f 92       	push	r3
    6044:	4f 92       	push	r4
    6046:	5f 92       	push	r5
    6048:	6f 92       	push	r6
    604a:	7f 92       	push	r7
    604c:	8f 92       	push	r8
    604e:	9f 92       	push	r9
    6050:	af 92       	push	r10
    6052:	bf 92       	push	r11
    6054:	cf 92       	push	r12
    6056:	df 92       	push	r13
    6058:	ef 92       	push	r14
    605a:	ff 92       	push	r15
    605c:	0f 93       	push	r16
    605e:	1f 93       	push	r17
    6060:	cf 93       	push	r28
    6062:	df 93       	push	r29
    6064:	cd b7       	in	r28, 0x3d	; 61
    6066:	de b7       	in	r29, 0x3e	; 62
    6068:	2b 97       	sbiw	r28, 0x0b	; 11
    606a:	cd bf       	out	0x3d, r28	; 61
    606c:	de bf       	out	0x3e, r29	; 62
    606e:	6c 01       	movw	r12, r24
    6070:	7b 01       	movw	r14, r22
    6072:	8a 01       	movw	r16, r20
    6074:	fc 01       	movw	r30, r24
    6076:	16 82       	std	Z+6, r1	; 0x06
    6078:	17 82       	std	Z+7, r1	; 0x07
    607a:	83 81       	ldd	r24, Z+3	; 0x03
    607c:	81 ff       	sbrs	r24, 1
    607e:	bf c1       	rjmp	.+894    	; 0x63fe <vfprintf+0x3be>
    6080:	ce 01       	movw	r24, r28
    6082:	01 96       	adiw	r24, 0x01	; 1
    6084:	3c 01       	movw	r6, r24
    6086:	f6 01       	movw	r30, r12
    6088:	93 81       	ldd	r25, Z+3	; 0x03
    608a:	f7 01       	movw	r30, r14
    608c:	93 fd       	sbrc	r25, 3
    608e:	85 91       	lpm	r24, Z+
    6090:	93 ff       	sbrs	r25, 3
    6092:	81 91       	ld	r24, Z+
    6094:	7f 01       	movw	r14, r30
    6096:	88 23       	and	r24, r24
    6098:	09 f4       	brne	.+2      	; 0x609c <vfprintf+0x5c>
    609a:	ad c1       	rjmp	.+858    	; 0x63f6 <vfprintf+0x3b6>
    609c:	85 32       	cpi	r24, 0x25	; 37
    609e:	39 f4       	brne	.+14     	; 0x60ae <vfprintf+0x6e>
    60a0:	93 fd       	sbrc	r25, 3
    60a2:	85 91       	lpm	r24, Z+
    60a4:	93 ff       	sbrs	r25, 3
    60a6:	81 91       	ld	r24, Z+
    60a8:	7f 01       	movw	r14, r30
    60aa:	85 32       	cpi	r24, 0x25	; 37
    60ac:	21 f4       	brne	.+8      	; 0x60b6 <vfprintf+0x76>
    60ae:	b6 01       	movw	r22, r12
    60b0:	90 e0       	ldi	r25, 0x00	; 0
    60b2:	29 d6       	rcall	.+3154   	; 0x6d06 <fputc>
    60b4:	e8 cf       	rjmp	.-48     	; 0x6086 <vfprintf+0x46>
    60b6:	91 2c       	mov	r9, r1
    60b8:	21 2c       	mov	r2, r1
    60ba:	31 2c       	mov	r3, r1
    60bc:	ff e1       	ldi	r31, 0x1F	; 31
    60be:	f3 15       	cp	r31, r3
    60c0:	d8 f0       	brcs	.+54     	; 0x60f8 <vfprintf+0xb8>
    60c2:	8b 32       	cpi	r24, 0x2B	; 43
    60c4:	79 f0       	breq	.+30     	; 0x60e4 <vfprintf+0xa4>
    60c6:	38 f4       	brcc	.+14     	; 0x60d6 <vfprintf+0x96>
    60c8:	80 32       	cpi	r24, 0x20	; 32
    60ca:	79 f0       	breq	.+30     	; 0x60ea <vfprintf+0xaa>
    60cc:	83 32       	cpi	r24, 0x23	; 35
    60ce:	a1 f4       	brne	.+40     	; 0x60f8 <vfprintf+0xb8>
    60d0:	23 2d       	mov	r18, r3
    60d2:	20 61       	ori	r18, 0x10	; 16
    60d4:	1d c0       	rjmp	.+58     	; 0x6110 <vfprintf+0xd0>
    60d6:	8d 32       	cpi	r24, 0x2D	; 45
    60d8:	61 f0       	breq	.+24     	; 0x60f2 <vfprintf+0xb2>
    60da:	80 33       	cpi	r24, 0x30	; 48
    60dc:	69 f4       	brne	.+26     	; 0x60f8 <vfprintf+0xb8>
    60de:	23 2d       	mov	r18, r3
    60e0:	21 60       	ori	r18, 0x01	; 1
    60e2:	16 c0       	rjmp	.+44     	; 0x6110 <vfprintf+0xd0>
    60e4:	83 2d       	mov	r24, r3
    60e6:	82 60       	ori	r24, 0x02	; 2
    60e8:	38 2e       	mov	r3, r24
    60ea:	e3 2d       	mov	r30, r3
    60ec:	e4 60       	ori	r30, 0x04	; 4
    60ee:	3e 2e       	mov	r3, r30
    60f0:	2a c0       	rjmp	.+84     	; 0x6146 <vfprintf+0x106>
    60f2:	f3 2d       	mov	r31, r3
    60f4:	f8 60       	ori	r31, 0x08	; 8
    60f6:	1d c0       	rjmp	.+58     	; 0x6132 <vfprintf+0xf2>
    60f8:	37 fc       	sbrc	r3, 7
    60fa:	2d c0       	rjmp	.+90     	; 0x6156 <vfprintf+0x116>
    60fc:	20 ed       	ldi	r18, 0xD0	; 208
    60fe:	28 0f       	add	r18, r24
    6100:	2a 30       	cpi	r18, 0x0A	; 10
    6102:	40 f0       	brcs	.+16     	; 0x6114 <vfprintf+0xd4>
    6104:	8e 32       	cpi	r24, 0x2E	; 46
    6106:	b9 f4       	brne	.+46     	; 0x6136 <vfprintf+0xf6>
    6108:	36 fc       	sbrc	r3, 6
    610a:	75 c1       	rjmp	.+746    	; 0x63f6 <vfprintf+0x3b6>
    610c:	23 2d       	mov	r18, r3
    610e:	20 64       	ori	r18, 0x40	; 64
    6110:	32 2e       	mov	r3, r18
    6112:	19 c0       	rjmp	.+50     	; 0x6146 <vfprintf+0x106>
    6114:	36 fe       	sbrs	r3, 6
    6116:	06 c0       	rjmp	.+12     	; 0x6124 <vfprintf+0xe4>
    6118:	8a e0       	ldi	r24, 0x0A	; 10
    611a:	98 9e       	mul	r9, r24
    611c:	20 0d       	add	r18, r0
    611e:	11 24       	eor	r1, r1
    6120:	92 2e       	mov	r9, r18
    6122:	11 c0       	rjmp	.+34     	; 0x6146 <vfprintf+0x106>
    6124:	ea e0       	ldi	r30, 0x0A	; 10
    6126:	2e 9e       	mul	r2, r30
    6128:	20 0d       	add	r18, r0
    612a:	11 24       	eor	r1, r1
    612c:	22 2e       	mov	r2, r18
    612e:	f3 2d       	mov	r31, r3
    6130:	f0 62       	ori	r31, 0x20	; 32
    6132:	3f 2e       	mov	r3, r31
    6134:	08 c0       	rjmp	.+16     	; 0x6146 <vfprintf+0x106>
    6136:	8c 36       	cpi	r24, 0x6C	; 108
    6138:	21 f4       	brne	.+8      	; 0x6142 <vfprintf+0x102>
    613a:	83 2d       	mov	r24, r3
    613c:	80 68       	ori	r24, 0x80	; 128
    613e:	38 2e       	mov	r3, r24
    6140:	02 c0       	rjmp	.+4      	; 0x6146 <vfprintf+0x106>
    6142:	88 36       	cpi	r24, 0x68	; 104
    6144:	41 f4       	brne	.+16     	; 0x6156 <vfprintf+0x116>
    6146:	f7 01       	movw	r30, r14
    6148:	93 fd       	sbrc	r25, 3
    614a:	85 91       	lpm	r24, Z+
    614c:	93 ff       	sbrs	r25, 3
    614e:	81 91       	ld	r24, Z+
    6150:	7f 01       	movw	r14, r30
    6152:	81 11       	cpse	r24, r1
    6154:	b3 cf       	rjmp	.-154    	; 0x60bc <vfprintf+0x7c>
    6156:	98 2f       	mov	r25, r24
    6158:	9f 7d       	andi	r25, 0xDF	; 223
    615a:	95 54       	subi	r25, 0x45	; 69
    615c:	93 30       	cpi	r25, 0x03	; 3
    615e:	28 f4       	brcc	.+10     	; 0x616a <vfprintf+0x12a>
    6160:	0c 5f       	subi	r16, 0xFC	; 252
    6162:	1f 4f       	sbci	r17, 0xFF	; 255
    6164:	9f e3       	ldi	r25, 0x3F	; 63
    6166:	99 83       	std	Y+1, r25	; 0x01
    6168:	0d c0       	rjmp	.+26     	; 0x6184 <vfprintf+0x144>
    616a:	83 36       	cpi	r24, 0x63	; 99
    616c:	31 f0       	breq	.+12     	; 0x617a <vfprintf+0x13a>
    616e:	83 37       	cpi	r24, 0x73	; 115
    6170:	71 f0       	breq	.+28     	; 0x618e <vfprintf+0x14e>
    6172:	83 35       	cpi	r24, 0x53	; 83
    6174:	09 f0       	breq	.+2      	; 0x6178 <vfprintf+0x138>
    6176:	55 c0       	rjmp	.+170    	; 0x6222 <vfprintf+0x1e2>
    6178:	20 c0       	rjmp	.+64     	; 0x61ba <vfprintf+0x17a>
    617a:	f8 01       	movw	r30, r16
    617c:	80 81       	ld	r24, Z
    617e:	89 83       	std	Y+1, r24	; 0x01
    6180:	0e 5f       	subi	r16, 0xFE	; 254
    6182:	1f 4f       	sbci	r17, 0xFF	; 255
    6184:	88 24       	eor	r8, r8
    6186:	83 94       	inc	r8
    6188:	91 2c       	mov	r9, r1
    618a:	53 01       	movw	r10, r6
    618c:	12 c0       	rjmp	.+36     	; 0x61b2 <vfprintf+0x172>
    618e:	28 01       	movw	r4, r16
    6190:	f2 e0       	ldi	r31, 0x02	; 2
    6192:	4f 0e       	add	r4, r31
    6194:	51 1c       	adc	r5, r1
    6196:	f8 01       	movw	r30, r16
    6198:	a0 80       	ld	r10, Z
    619a:	b1 80       	ldd	r11, Z+1	; 0x01
    619c:	36 fe       	sbrs	r3, 6
    619e:	03 c0       	rjmp	.+6      	; 0x61a6 <vfprintf+0x166>
    61a0:	69 2d       	mov	r22, r9
    61a2:	70 e0       	ldi	r23, 0x00	; 0
    61a4:	02 c0       	rjmp	.+4      	; 0x61aa <vfprintf+0x16a>
    61a6:	6f ef       	ldi	r22, 0xFF	; 255
    61a8:	7f ef       	ldi	r23, 0xFF	; 255
    61aa:	c5 01       	movw	r24, r10
    61ac:	63 d5       	rcall	.+2758   	; 0x6c74 <strnlen>
    61ae:	4c 01       	movw	r8, r24
    61b0:	82 01       	movw	r16, r4
    61b2:	f3 2d       	mov	r31, r3
    61b4:	ff 77       	andi	r31, 0x7F	; 127
    61b6:	3f 2e       	mov	r3, r31
    61b8:	15 c0       	rjmp	.+42     	; 0x61e4 <vfprintf+0x1a4>
    61ba:	28 01       	movw	r4, r16
    61bc:	22 e0       	ldi	r18, 0x02	; 2
    61be:	42 0e       	add	r4, r18
    61c0:	51 1c       	adc	r5, r1
    61c2:	f8 01       	movw	r30, r16
    61c4:	a0 80       	ld	r10, Z
    61c6:	b1 80       	ldd	r11, Z+1	; 0x01
    61c8:	36 fe       	sbrs	r3, 6
    61ca:	03 c0       	rjmp	.+6      	; 0x61d2 <vfprintf+0x192>
    61cc:	69 2d       	mov	r22, r9
    61ce:	70 e0       	ldi	r23, 0x00	; 0
    61d0:	02 c0       	rjmp	.+4      	; 0x61d6 <vfprintf+0x196>
    61d2:	6f ef       	ldi	r22, 0xFF	; 255
    61d4:	7f ef       	ldi	r23, 0xFF	; 255
    61d6:	c5 01       	movw	r24, r10
    61d8:	3b d5       	rcall	.+2678   	; 0x6c50 <strnlen_P>
    61da:	4c 01       	movw	r8, r24
    61dc:	f3 2d       	mov	r31, r3
    61de:	f0 68       	ori	r31, 0x80	; 128
    61e0:	3f 2e       	mov	r3, r31
    61e2:	82 01       	movw	r16, r4
    61e4:	33 fc       	sbrc	r3, 3
    61e6:	19 c0       	rjmp	.+50     	; 0x621a <vfprintf+0x1da>
    61e8:	82 2d       	mov	r24, r2
    61ea:	90 e0       	ldi	r25, 0x00	; 0
    61ec:	88 16       	cp	r8, r24
    61ee:	99 06       	cpc	r9, r25
    61f0:	a0 f4       	brcc	.+40     	; 0x621a <vfprintf+0x1da>
    61f2:	b6 01       	movw	r22, r12
    61f4:	80 e2       	ldi	r24, 0x20	; 32
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	86 d5       	rcall	.+2828   	; 0x6d06 <fputc>
    61fa:	2a 94       	dec	r2
    61fc:	f5 cf       	rjmp	.-22     	; 0x61e8 <vfprintf+0x1a8>
    61fe:	f5 01       	movw	r30, r10
    6200:	37 fc       	sbrc	r3, 7
    6202:	85 91       	lpm	r24, Z+
    6204:	37 fe       	sbrs	r3, 7
    6206:	81 91       	ld	r24, Z+
    6208:	5f 01       	movw	r10, r30
    620a:	b6 01       	movw	r22, r12
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	7b d5       	rcall	.+2806   	; 0x6d06 <fputc>
    6210:	21 10       	cpse	r2, r1
    6212:	2a 94       	dec	r2
    6214:	21 e0       	ldi	r18, 0x01	; 1
    6216:	82 1a       	sub	r8, r18
    6218:	91 08       	sbc	r9, r1
    621a:	81 14       	cp	r8, r1
    621c:	91 04       	cpc	r9, r1
    621e:	79 f7       	brne	.-34     	; 0x61fe <vfprintf+0x1be>
    6220:	e1 c0       	rjmp	.+450    	; 0x63e4 <vfprintf+0x3a4>
    6222:	84 36       	cpi	r24, 0x64	; 100
    6224:	11 f0       	breq	.+4      	; 0x622a <vfprintf+0x1ea>
    6226:	89 36       	cpi	r24, 0x69	; 105
    6228:	39 f5       	brne	.+78     	; 0x6278 <vfprintf+0x238>
    622a:	f8 01       	movw	r30, r16
    622c:	37 fe       	sbrs	r3, 7
    622e:	07 c0       	rjmp	.+14     	; 0x623e <vfprintf+0x1fe>
    6230:	60 81       	ld	r22, Z
    6232:	71 81       	ldd	r23, Z+1	; 0x01
    6234:	82 81       	ldd	r24, Z+2	; 0x02
    6236:	93 81       	ldd	r25, Z+3	; 0x03
    6238:	0c 5f       	subi	r16, 0xFC	; 252
    623a:	1f 4f       	sbci	r17, 0xFF	; 255
    623c:	08 c0       	rjmp	.+16     	; 0x624e <vfprintf+0x20e>
    623e:	60 81       	ld	r22, Z
    6240:	71 81       	ldd	r23, Z+1	; 0x01
    6242:	07 2e       	mov	r0, r23
    6244:	00 0c       	add	r0, r0
    6246:	88 0b       	sbc	r24, r24
    6248:	99 0b       	sbc	r25, r25
    624a:	0e 5f       	subi	r16, 0xFE	; 254
    624c:	1f 4f       	sbci	r17, 0xFF	; 255
    624e:	f3 2d       	mov	r31, r3
    6250:	ff 76       	andi	r31, 0x6F	; 111
    6252:	3f 2e       	mov	r3, r31
    6254:	97 ff       	sbrs	r25, 7
    6256:	09 c0       	rjmp	.+18     	; 0x626a <vfprintf+0x22a>
    6258:	90 95       	com	r25
    625a:	80 95       	com	r24
    625c:	70 95       	com	r23
    625e:	61 95       	neg	r22
    6260:	7f 4f       	sbci	r23, 0xFF	; 255
    6262:	8f 4f       	sbci	r24, 0xFF	; 255
    6264:	9f 4f       	sbci	r25, 0xFF	; 255
    6266:	f0 68       	ori	r31, 0x80	; 128
    6268:	3f 2e       	mov	r3, r31
    626a:	2a e0       	ldi	r18, 0x0A	; 10
    626c:	30 e0       	ldi	r19, 0x00	; 0
    626e:	a3 01       	movw	r20, r6
    6270:	9f d5       	rcall	.+2878   	; 0x6db0 <__ultoa_invert>
    6272:	88 2e       	mov	r8, r24
    6274:	86 18       	sub	r8, r6
    6276:	44 c0       	rjmp	.+136    	; 0x6300 <vfprintf+0x2c0>
    6278:	85 37       	cpi	r24, 0x75	; 117
    627a:	31 f4       	brne	.+12     	; 0x6288 <vfprintf+0x248>
    627c:	23 2d       	mov	r18, r3
    627e:	2f 7e       	andi	r18, 0xEF	; 239
    6280:	b2 2e       	mov	r11, r18
    6282:	2a e0       	ldi	r18, 0x0A	; 10
    6284:	30 e0       	ldi	r19, 0x00	; 0
    6286:	25 c0       	rjmp	.+74     	; 0x62d2 <vfprintf+0x292>
    6288:	93 2d       	mov	r25, r3
    628a:	99 7f       	andi	r25, 0xF9	; 249
    628c:	b9 2e       	mov	r11, r25
    628e:	8f 36       	cpi	r24, 0x6F	; 111
    6290:	c1 f0       	breq	.+48     	; 0x62c2 <vfprintf+0x282>
    6292:	18 f4       	brcc	.+6      	; 0x629a <vfprintf+0x25a>
    6294:	88 35       	cpi	r24, 0x58	; 88
    6296:	79 f0       	breq	.+30     	; 0x62b6 <vfprintf+0x276>
    6298:	ae c0       	rjmp	.+348    	; 0x63f6 <vfprintf+0x3b6>
    629a:	80 37       	cpi	r24, 0x70	; 112
    629c:	19 f0       	breq	.+6      	; 0x62a4 <vfprintf+0x264>
    629e:	88 37       	cpi	r24, 0x78	; 120
    62a0:	21 f0       	breq	.+8      	; 0x62aa <vfprintf+0x26a>
    62a2:	a9 c0       	rjmp	.+338    	; 0x63f6 <vfprintf+0x3b6>
    62a4:	e9 2f       	mov	r30, r25
    62a6:	e0 61       	ori	r30, 0x10	; 16
    62a8:	be 2e       	mov	r11, r30
    62aa:	b4 fe       	sbrs	r11, 4
    62ac:	0d c0       	rjmp	.+26     	; 0x62c8 <vfprintf+0x288>
    62ae:	fb 2d       	mov	r31, r11
    62b0:	f4 60       	ori	r31, 0x04	; 4
    62b2:	bf 2e       	mov	r11, r31
    62b4:	09 c0       	rjmp	.+18     	; 0x62c8 <vfprintf+0x288>
    62b6:	34 fe       	sbrs	r3, 4
    62b8:	0a c0       	rjmp	.+20     	; 0x62ce <vfprintf+0x28e>
    62ba:	29 2f       	mov	r18, r25
    62bc:	26 60       	ori	r18, 0x06	; 6
    62be:	b2 2e       	mov	r11, r18
    62c0:	06 c0       	rjmp	.+12     	; 0x62ce <vfprintf+0x28e>
    62c2:	28 e0       	ldi	r18, 0x08	; 8
    62c4:	30 e0       	ldi	r19, 0x00	; 0
    62c6:	05 c0       	rjmp	.+10     	; 0x62d2 <vfprintf+0x292>
    62c8:	20 e1       	ldi	r18, 0x10	; 16
    62ca:	30 e0       	ldi	r19, 0x00	; 0
    62cc:	02 c0       	rjmp	.+4      	; 0x62d2 <vfprintf+0x292>
    62ce:	20 e1       	ldi	r18, 0x10	; 16
    62d0:	32 e0       	ldi	r19, 0x02	; 2
    62d2:	f8 01       	movw	r30, r16
    62d4:	b7 fe       	sbrs	r11, 7
    62d6:	07 c0       	rjmp	.+14     	; 0x62e6 <vfprintf+0x2a6>
    62d8:	60 81       	ld	r22, Z
    62da:	71 81       	ldd	r23, Z+1	; 0x01
    62dc:	82 81       	ldd	r24, Z+2	; 0x02
    62de:	93 81       	ldd	r25, Z+3	; 0x03
    62e0:	0c 5f       	subi	r16, 0xFC	; 252
    62e2:	1f 4f       	sbci	r17, 0xFF	; 255
    62e4:	06 c0       	rjmp	.+12     	; 0x62f2 <vfprintf+0x2b2>
    62e6:	60 81       	ld	r22, Z
    62e8:	71 81       	ldd	r23, Z+1	; 0x01
    62ea:	80 e0       	ldi	r24, 0x00	; 0
    62ec:	90 e0       	ldi	r25, 0x00	; 0
    62ee:	0e 5f       	subi	r16, 0xFE	; 254
    62f0:	1f 4f       	sbci	r17, 0xFF	; 255
    62f2:	a3 01       	movw	r20, r6
    62f4:	5d d5       	rcall	.+2746   	; 0x6db0 <__ultoa_invert>
    62f6:	88 2e       	mov	r8, r24
    62f8:	86 18       	sub	r8, r6
    62fa:	fb 2d       	mov	r31, r11
    62fc:	ff 77       	andi	r31, 0x7F	; 127
    62fe:	3f 2e       	mov	r3, r31
    6300:	36 fe       	sbrs	r3, 6
    6302:	0d c0       	rjmp	.+26     	; 0x631e <vfprintf+0x2de>
    6304:	23 2d       	mov	r18, r3
    6306:	2e 7f       	andi	r18, 0xFE	; 254
    6308:	a2 2e       	mov	r10, r18
    630a:	89 14       	cp	r8, r9
    630c:	58 f4       	brcc	.+22     	; 0x6324 <vfprintf+0x2e4>
    630e:	34 fe       	sbrs	r3, 4
    6310:	0b c0       	rjmp	.+22     	; 0x6328 <vfprintf+0x2e8>
    6312:	32 fc       	sbrc	r3, 2
    6314:	09 c0       	rjmp	.+18     	; 0x6328 <vfprintf+0x2e8>
    6316:	83 2d       	mov	r24, r3
    6318:	8e 7e       	andi	r24, 0xEE	; 238
    631a:	a8 2e       	mov	r10, r24
    631c:	05 c0       	rjmp	.+10     	; 0x6328 <vfprintf+0x2e8>
    631e:	b8 2c       	mov	r11, r8
    6320:	a3 2c       	mov	r10, r3
    6322:	03 c0       	rjmp	.+6      	; 0x632a <vfprintf+0x2ea>
    6324:	b8 2c       	mov	r11, r8
    6326:	01 c0       	rjmp	.+2      	; 0x632a <vfprintf+0x2ea>
    6328:	b9 2c       	mov	r11, r9
    632a:	a4 fe       	sbrs	r10, 4
    632c:	0f c0       	rjmp	.+30     	; 0x634c <vfprintf+0x30c>
    632e:	fe 01       	movw	r30, r28
    6330:	e8 0d       	add	r30, r8
    6332:	f1 1d       	adc	r31, r1
    6334:	80 81       	ld	r24, Z
    6336:	80 33       	cpi	r24, 0x30	; 48
    6338:	21 f4       	brne	.+8      	; 0x6342 <vfprintf+0x302>
    633a:	9a 2d       	mov	r25, r10
    633c:	99 7e       	andi	r25, 0xE9	; 233
    633e:	a9 2e       	mov	r10, r25
    6340:	09 c0       	rjmp	.+18     	; 0x6354 <vfprintf+0x314>
    6342:	a2 fe       	sbrs	r10, 2
    6344:	06 c0       	rjmp	.+12     	; 0x6352 <vfprintf+0x312>
    6346:	b3 94       	inc	r11
    6348:	b3 94       	inc	r11
    634a:	04 c0       	rjmp	.+8      	; 0x6354 <vfprintf+0x314>
    634c:	8a 2d       	mov	r24, r10
    634e:	86 78       	andi	r24, 0x86	; 134
    6350:	09 f0       	breq	.+2      	; 0x6354 <vfprintf+0x314>
    6352:	b3 94       	inc	r11
    6354:	a3 fc       	sbrc	r10, 3
    6356:	10 c0       	rjmp	.+32     	; 0x6378 <vfprintf+0x338>
    6358:	a0 fe       	sbrs	r10, 0
    635a:	06 c0       	rjmp	.+12     	; 0x6368 <vfprintf+0x328>
    635c:	b2 14       	cp	r11, r2
    635e:	80 f4       	brcc	.+32     	; 0x6380 <vfprintf+0x340>
    6360:	28 0c       	add	r2, r8
    6362:	92 2c       	mov	r9, r2
    6364:	9b 18       	sub	r9, r11
    6366:	0d c0       	rjmp	.+26     	; 0x6382 <vfprintf+0x342>
    6368:	b2 14       	cp	r11, r2
    636a:	58 f4       	brcc	.+22     	; 0x6382 <vfprintf+0x342>
    636c:	b6 01       	movw	r22, r12
    636e:	80 e2       	ldi	r24, 0x20	; 32
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	c9 d4       	rcall	.+2450   	; 0x6d06 <fputc>
    6374:	b3 94       	inc	r11
    6376:	f8 cf       	rjmp	.-16     	; 0x6368 <vfprintf+0x328>
    6378:	b2 14       	cp	r11, r2
    637a:	18 f4       	brcc	.+6      	; 0x6382 <vfprintf+0x342>
    637c:	2b 18       	sub	r2, r11
    637e:	02 c0       	rjmp	.+4      	; 0x6384 <vfprintf+0x344>
    6380:	98 2c       	mov	r9, r8
    6382:	21 2c       	mov	r2, r1
    6384:	a4 fe       	sbrs	r10, 4
    6386:	0f c0       	rjmp	.+30     	; 0x63a6 <vfprintf+0x366>
    6388:	b6 01       	movw	r22, r12
    638a:	80 e3       	ldi	r24, 0x30	; 48
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	bb d4       	rcall	.+2422   	; 0x6d06 <fputc>
    6390:	a2 fe       	sbrs	r10, 2
    6392:	16 c0       	rjmp	.+44     	; 0x63c0 <vfprintf+0x380>
    6394:	a1 fc       	sbrc	r10, 1
    6396:	03 c0       	rjmp	.+6      	; 0x639e <vfprintf+0x35e>
    6398:	88 e7       	ldi	r24, 0x78	; 120
    639a:	90 e0       	ldi	r25, 0x00	; 0
    639c:	02 c0       	rjmp	.+4      	; 0x63a2 <vfprintf+0x362>
    639e:	88 e5       	ldi	r24, 0x58	; 88
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	b6 01       	movw	r22, r12
    63a4:	0c c0       	rjmp	.+24     	; 0x63be <vfprintf+0x37e>
    63a6:	8a 2d       	mov	r24, r10
    63a8:	86 78       	andi	r24, 0x86	; 134
    63aa:	51 f0       	breq	.+20     	; 0x63c0 <vfprintf+0x380>
    63ac:	a1 fe       	sbrs	r10, 1
    63ae:	02 c0       	rjmp	.+4      	; 0x63b4 <vfprintf+0x374>
    63b0:	8b e2       	ldi	r24, 0x2B	; 43
    63b2:	01 c0       	rjmp	.+2      	; 0x63b6 <vfprintf+0x376>
    63b4:	80 e2       	ldi	r24, 0x20	; 32
    63b6:	a7 fc       	sbrc	r10, 7
    63b8:	8d e2       	ldi	r24, 0x2D	; 45
    63ba:	b6 01       	movw	r22, r12
    63bc:	90 e0       	ldi	r25, 0x00	; 0
    63be:	a3 d4       	rcall	.+2374   	; 0x6d06 <fputc>
    63c0:	89 14       	cp	r8, r9
    63c2:	30 f4       	brcc	.+12     	; 0x63d0 <vfprintf+0x390>
    63c4:	b6 01       	movw	r22, r12
    63c6:	80 e3       	ldi	r24, 0x30	; 48
    63c8:	90 e0       	ldi	r25, 0x00	; 0
    63ca:	9d d4       	rcall	.+2362   	; 0x6d06 <fputc>
    63cc:	9a 94       	dec	r9
    63ce:	f8 cf       	rjmp	.-16     	; 0x63c0 <vfprintf+0x380>
    63d0:	8a 94       	dec	r8
    63d2:	f3 01       	movw	r30, r6
    63d4:	e8 0d       	add	r30, r8
    63d6:	f1 1d       	adc	r31, r1
    63d8:	80 81       	ld	r24, Z
    63da:	b6 01       	movw	r22, r12
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	93 d4       	rcall	.+2342   	; 0x6d06 <fputc>
    63e0:	81 10       	cpse	r8, r1
    63e2:	f6 cf       	rjmp	.-20     	; 0x63d0 <vfprintf+0x390>
    63e4:	22 20       	and	r2, r2
    63e6:	09 f4       	brne	.+2      	; 0x63ea <vfprintf+0x3aa>
    63e8:	4e ce       	rjmp	.-868    	; 0x6086 <vfprintf+0x46>
    63ea:	b6 01       	movw	r22, r12
    63ec:	80 e2       	ldi	r24, 0x20	; 32
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	8a d4       	rcall	.+2324   	; 0x6d06 <fputc>
    63f2:	2a 94       	dec	r2
    63f4:	f7 cf       	rjmp	.-18     	; 0x63e4 <vfprintf+0x3a4>
    63f6:	f6 01       	movw	r30, r12
    63f8:	86 81       	ldd	r24, Z+6	; 0x06
    63fa:	97 81       	ldd	r25, Z+7	; 0x07
    63fc:	02 c0       	rjmp	.+4      	; 0x6402 <vfprintf+0x3c2>
    63fe:	8f ef       	ldi	r24, 0xFF	; 255
    6400:	9f ef       	ldi	r25, 0xFF	; 255
    6402:	2b 96       	adiw	r28, 0x0b	; 11
    6404:	cd bf       	out	0x3d, r28	; 61
    6406:	de bf       	out	0x3e, r29	; 62
    6408:	df 91       	pop	r29
    640a:	cf 91       	pop	r28
    640c:	1f 91       	pop	r17
    640e:	0f 91       	pop	r16
    6410:	ff 90       	pop	r15
    6412:	ef 90       	pop	r14
    6414:	df 90       	pop	r13
    6416:	cf 90       	pop	r12
    6418:	bf 90       	pop	r11
    641a:	af 90       	pop	r10
    641c:	9f 90       	pop	r9
    641e:	8f 90       	pop	r8
    6420:	7f 90       	pop	r7
    6422:	6f 90       	pop	r6
    6424:	5f 90       	pop	r5
    6426:	4f 90       	pop	r4
    6428:	3f 90       	pop	r3
    642a:	2f 90       	pop	r2
    642c:	08 95       	ret

0000642e <putval>:
    642e:	20 fd       	sbrc	r18, 0
    6430:	09 c0       	rjmp	.+18     	; 0x6444 <putval+0x16>
    6432:	fc 01       	movw	r30, r24
    6434:	23 fd       	sbrc	r18, 3
    6436:	05 c0       	rjmp	.+10     	; 0x6442 <putval+0x14>
    6438:	22 ff       	sbrs	r18, 2
    643a:	02 c0       	rjmp	.+4      	; 0x6440 <putval+0x12>
    643c:	73 83       	std	Z+3, r23	; 0x03
    643e:	62 83       	std	Z+2, r22	; 0x02
    6440:	51 83       	std	Z+1, r21	; 0x01
    6442:	40 83       	st	Z, r20
    6444:	08 95       	ret

00006446 <mulacc>:
    6446:	44 fd       	sbrc	r20, 4
    6448:	17 c0       	rjmp	.+46     	; 0x6478 <mulacc+0x32>
    644a:	46 fd       	sbrc	r20, 6
    644c:	17 c0       	rjmp	.+46     	; 0x647c <mulacc+0x36>
    644e:	ab 01       	movw	r20, r22
    6450:	bc 01       	movw	r22, r24
    6452:	da 01       	movw	r26, r20
    6454:	fb 01       	movw	r30, r22
    6456:	aa 0f       	add	r26, r26
    6458:	bb 1f       	adc	r27, r27
    645a:	ee 1f       	adc	r30, r30
    645c:	ff 1f       	adc	r31, r31
    645e:	10 94       	com	r1
    6460:	d1 f7       	brne	.-12     	; 0x6456 <mulacc+0x10>
    6462:	4a 0f       	add	r20, r26
    6464:	5b 1f       	adc	r21, r27
    6466:	6e 1f       	adc	r22, r30
    6468:	7f 1f       	adc	r23, r31
    646a:	cb 01       	movw	r24, r22
    646c:	ba 01       	movw	r22, r20
    646e:	66 0f       	add	r22, r22
    6470:	77 1f       	adc	r23, r23
    6472:	88 1f       	adc	r24, r24
    6474:	99 1f       	adc	r25, r25
    6476:	09 c0       	rjmp	.+18     	; 0x648a <mulacc+0x44>
    6478:	33 e0       	ldi	r19, 0x03	; 3
    647a:	01 c0       	rjmp	.+2      	; 0x647e <mulacc+0x38>
    647c:	34 e0       	ldi	r19, 0x04	; 4
    647e:	66 0f       	add	r22, r22
    6480:	77 1f       	adc	r23, r23
    6482:	88 1f       	adc	r24, r24
    6484:	99 1f       	adc	r25, r25
    6486:	31 50       	subi	r19, 0x01	; 1
    6488:	d1 f7       	brne	.-12     	; 0x647e <mulacc+0x38>
    648a:	62 0f       	add	r22, r18
    648c:	71 1d       	adc	r23, r1
    648e:	81 1d       	adc	r24, r1
    6490:	91 1d       	adc	r25, r1
    6492:	08 95       	ret

00006494 <skip_spaces>:
    6494:	0f 93       	push	r16
    6496:	1f 93       	push	r17
    6498:	cf 93       	push	r28
    649a:	df 93       	push	r29
    649c:	8c 01       	movw	r16, r24
    649e:	c8 01       	movw	r24, r16
    64a0:	f4 d3       	rcall	.+2024   	; 0x6c8a <fgetc>
    64a2:	ec 01       	movw	r28, r24
    64a4:	97 fd       	sbrc	r25, 7
    64a6:	06 c0       	rjmp	.+12     	; 0x64b4 <skip_spaces+0x20>
    64a8:	c0 d3       	rcall	.+1920   	; 0x6c2a <isspace>
    64aa:	89 2b       	or	r24, r25
    64ac:	c1 f7       	brne	.-16     	; 0x649e <skip_spaces+0xa>
    64ae:	b8 01       	movw	r22, r16
    64b0:	ce 01       	movw	r24, r28
    64b2:	65 d4       	rcall	.+2250   	; 0x6d7e <ungetc>
    64b4:	ce 01       	movw	r24, r28
    64b6:	df 91       	pop	r29
    64b8:	cf 91       	pop	r28
    64ba:	1f 91       	pop	r17
    64bc:	0f 91       	pop	r16
    64be:	08 95       	ret

000064c0 <conv_int>:
    64c0:	8f 92       	push	r8
    64c2:	9f 92       	push	r9
    64c4:	af 92       	push	r10
    64c6:	bf 92       	push	r11
    64c8:	ef 92       	push	r14
    64ca:	ff 92       	push	r15
    64cc:	0f 93       	push	r16
    64ce:	1f 93       	push	r17
    64d0:	cf 93       	push	r28
    64d2:	df 93       	push	r29
    64d4:	8c 01       	movw	r16, r24
    64d6:	d6 2f       	mov	r29, r22
    64d8:	7a 01       	movw	r14, r20
    64da:	b2 2e       	mov	r11, r18
    64dc:	d6 d3       	rcall	.+1964   	; 0x6c8a <fgetc>
    64de:	9c 01       	movw	r18, r24
    64e0:	33 27       	eor	r19, r19
    64e2:	2b 32       	cpi	r18, 0x2B	; 43
    64e4:	31 05       	cpc	r19, r1
    64e6:	31 f0       	breq	.+12     	; 0x64f4 <conv_int+0x34>
    64e8:	2d 32       	cpi	r18, 0x2D	; 45
    64ea:	31 05       	cpc	r19, r1
    64ec:	59 f4       	brne	.+22     	; 0x6504 <conv_int+0x44>
    64ee:	8b 2d       	mov	r24, r11
    64f0:	80 68       	ori	r24, 0x80	; 128
    64f2:	b8 2e       	mov	r11, r24
    64f4:	d1 50       	subi	r29, 0x01	; 1
    64f6:	11 f4       	brne	.+4      	; 0x64fc <conv_int+0x3c>
    64f8:	80 e0       	ldi	r24, 0x00	; 0
    64fa:	61 c0       	rjmp	.+194    	; 0x65be <conv_int+0xfe>
    64fc:	c8 01       	movw	r24, r16
    64fe:	c5 d3       	rcall	.+1930   	; 0x6c8a <fgetc>
    6500:	97 fd       	sbrc	r25, 7
    6502:	fa cf       	rjmp	.-12     	; 0x64f8 <conv_int+0x38>
    6504:	cb 2d       	mov	r28, r11
    6506:	cd 7f       	andi	r28, 0xFD	; 253
    6508:	2b 2d       	mov	r18, r11
    650a:	20 73       	andi	r18, 0x30	; 48
    650c:	f9 f4       	brne	.+62     	; 0x654c <conv_int+0x8c>
    650e:	80 33       	cpi	r24, 0x30	; 48
    6510:	e9 f4       	brne	.+58     	; 0x654c <conv_int+0x8c>
    6512:	aa 24       	eor	r10, r10
    6514:	aa 94       	dec	r10
    6516:	ad 0e       	add	r10, r29
    6518:	09 f4       	brne	.+2      	; 0x651c <conv_int+0x5c>
    651a:	3e c0       	rjmp	.+124    	; 0x6598 <conv_int+0xd8>
    651c:	c8 01       	movw	r24, r16
    651e:	b5 d3       	rcall	.+1898   	; 0x6c8a <fgetc>
    6520:	97 fd       	sbrc	r25, 7
    6522:	3a c0       	rjmp	.+116    	; 0x6598 <conv_int+0xd8>
    6524:	9c 01       	movw	r18, r24
    6526:	2f 7d       	andi	r18, 0xDF	; 223
    6528:	33 27       	eor	r19, r19
    652a:	28 35       	cpi	r18, 0x58	; 88
    652c:	31 05       	cpc	r19, r1
    652e:	41 f4       	brne	.+16     	; 0x6540 <conv_int+0x80>
    6530:	c2 64       	ori	r28, 0x42	; 66
    6532:	d2 50       	subi	r29, 0x02	; 2
    6534:	89 f1       	breq	.+98     	; 0x6598 <conv_int+0xd8>
    6536:	c8 01       	movw	r24, r16
    6538:	a8 d3       	rcall	.+1872   	; 0x6c8a <fgetc>
    653a:	97 ff       	sbrs	r25, 7
    653c:	07 c0       	rjmp	.+14     	; 0x654c <conv_int+0x8c>
    653e:	2c c0       	rjmp	.+88     	; 0x6598 <conv_int+0xd8>
    6540:	b6 fe       	sbrs	r11, 6
    6542:	02 c0       	rjmp	.+4      	; 0x6548 <conv_int+0x88>
    6544:	c2 60       	ori	r28, 0x02	; 2
    6546:	01 c0       	rjmp	.+2      	; 0x654a <conv_int+0x8a>
    6548:	c2 61       	ori	r28, 0x12	; 18
    654a:	da 2d       	mov	r29, r10
    654c:	81 2c       	mov	r8, r1
    654e:	91 2c       	mov	r9, r1
    6550:	54 01       	movw	r10, r8
    6552:	20 ed       	ldi	r18, 0xD0	; 208
    6554:	28 0f       	add	r18, r24
    6556:	28 30       	cpi	r18, 0x08	; 8
    6558:	78 f0       	brcs	.+30     	; 0x6578 <conv_int+0xb8>
    655a:	c4 ff       	sbrs	r28, 4
    655c:	03 c0       	rjmp	.+6      	; 0x6564 <conv_int+0xa4>
    655e:	b8 01       	movw	r22, r16
    6560:	0e d4       	rcall	.+2076   	; 0x6d7e <ungetc>
    6562:	17 c0       	rjmp	.+46     	; 0x6592 <conv_int+0xd2>
    6564:	2a 30       	cpi	r18, 0x0A	; 10
    6566:	40 f0       	brcs	.+16     	; 0x6578 <conv_int+0xb8>
    6568:	c6 ff       	sbrs	r28, 6
    656a:	f9 cf       	rjmp	.-14     	; 0x655e <conv_int+0x9e>
    656c:	2f 7d       	andi	r18, 0xDF	; 223
    656e:	3f ee       	ldi	r19, 0xEF	; 239
    6570:	32 0f       	add	r19, r18
    6572:	36 30       	cpi	r19, 0x06	; 6
    6574:	a0 f7       	brcc	.-24     	; 0x655e <conv_int+0x9e>
    6576:	27 50       	subi	r18, 0x07	; 7
    6578:	4c 2f       	mov	r20, r28
    657a:	c5 01       	movw	r24, r10
    657c:	b4 01       	movw	r22, r8
    657e:	63 df       	rcall	.-314    	; 0x6446 <mulacc>
    6580:	4b 01       	movw	r8, r22
    6582:	5c 01       	movw	r10, r24
    6584:	c2 60       	ori	r28, 0x02	; 2
    6586:	d1 50       	subi	r29, 0x01	; 1
    6588:	51 f0       	breq	.+20     	; 0x659e <conv_int+0xde>
    658a:	c8 01       	movw	r24, r16
    658c:	7e d3       	rcall	.+1788   	; 0x6c8a <fgetc>
    658e:	97 ff       	sbrs	r25, 7
    6590:	e0 cf       	rjmp	.-64     	; 0x6552 <conv_int+0x92>
    6592:	c1 fd       	sbrc	r28, 1
    6594:	04 c0       	rjmp	.+8      	; 0x659e <conv_int+0xde>
    6596:	b0 cf       	rjmp	.-160    	; 0x64f8 <conv_int+0x38>
    6598:	81 2c       	mov	r8, r1
    659a:	91 2c       	mov	r9, r1
    659c:	54 01       	movw	r10, r8
    659e:	c7 ff       	sbrs	r28, 7
    65a0:	08 c0       	rjmp	.+16     	; 0x65b2 <conv_int+0xf2>
    65a2:	b0 94       	com	r11
    65a4:	a0 94       	com	r10
    65a6:	90 94       	com	r9
    65a8:	80 94       	com	r8
    65aa:	81 1c       	adc	r8, r1
    65ac:	91 1c       	adc	r9, r1
    65ae:	a1 1c       	adc	r10, r1
    65b0:	b1 1c       	adc	r11, r1
    65b2:	2c 2f       	mov	r18, r28
    65b4:	b5 01       	movw	r22, r10
    65b6:	a4 01       	movw	r20, r8
    65b8:	c7 01       	movw	r24, r14
    65ba:	39 df       	rcall	.-398    	; 0x642e <putval>
    65bc:	81 e0       	ldi	r24, 0x01	; 1
    65be:	df 91       	pop	r29
    65c0:	cf 91       	pop	r28
    65c2:	1f 91       	pop	r17
    65c4:	0f 91       	pop	r16
    65c6:	ff 90       	pop	r15
    65c8:	ef 90       	pop	r14
    65ca:	bf 90       	pop	r11
    65cc:	af 90       	pop	r10
    65ce:	9f 90       	pop	r9
    65d0:	8f 90       	pop	r8
    65d2:	08 95       	ret

000065d4 <conv_brk>:
    65d4:	5f 92       	push	r5
    65d6:	6f 92       	push	r6
    65d8:	7f 92       	push	r7
    65da:	8f 92       	push	r8
    65dc:	9f 92       	push	r9
    65de:	af 92       	push	r10
    65e0:	bf 92       	push	r11
    65e2:	cf 92       	push	r12
    65e4:	df 92       	push	r13
    65e6:	ef 92       	push	r14
    65e8:	ff 92       	push	r15
    65ea:	0f 93       	push	r16
    65ec:	1f 93       	push	r17
    65ee:	cf 93       	push	r28
    65f0:	df 93       	push	r29
    65f2:	cd b7       	in	r28, 0x3d	; 61
    65f4:	de b7       	in	r29, 0x3e	; 62
    65f6:	a0 97       	sbiw	r28, 0x20	; 32
    65f8:	cd bf       	out	0x3d, r28	; 61
    65fa:	de bf       	out	0x3e, r29	; 62
    65fc:	5c 01       	movw	r10, r24
    65fe:	96 2e       	mov	r9, r22
    6600:	7a 01       	movw	r14, r20
    6602:	f9 01       	movw	r30, r18
    6604:	8e 01       	movw	r16, r28
    6606:	0f 5f       	subi	r16, 0xFF	; 255
    6608:	1f 4f       	sbci	r17, 0xFF	; 255
    660a:	68 01       	movw	r12, r16
    660c:	80 e2       	ldi	r24, 0x20	; 32
    660e:	d8 01       	movw	r26, r16
    6610:	1d 92       	st	X+, r1
    6612:	8a 95       	dec	r24
    6614:	e9 f7       	brne	.-6      	; 0x6610 <conv_brk+0x3c>
    6616:	d5 01       	movw	r26, r10
    6618:	13 96       	adiw	r26, 0x03	; 3
    661a:	8c 90       	ld	r8, X
    661c:	80 e0       	ldi	r24, 0x00	; 0
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	61 2c       	mov	r6, r1
    6622:	71 2c       	mov	r7, r1
    6624:	30 e0       	ldi	r19, 0x00	; 0
    6626:	61 e0       	ldi	r22, 0x01	; 1
    6628:	70 e0       	ldi	r23, 0x00	; 0
    662a:	83 fc       	sbrc	r8, 3
    662c:	25 91       	lpm	r18, Z+
    662e:	83 fe       	sbrs	r8, 3
    6630:	21 91       	ld	r18, Z+
    6632:	8f 01       	movw	r16, r30
    6634:	52 2e       	mov	r5, r18
    6636:	21 11       	cpse	r18, r1
    6638:	03 c0       	rjmp	.+6      	; 0x6640 <conv_brk+0x6c>
    663a:	80 e0       	ldi	r24, 0x00	; 0
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	90 c0       	rjmp	.+288    	; 0x6760 <conv_brk+0x18c>
    6640:	2e 35       	cpi	r18, 0x5E	; 94
    6642:	11 f4       	brne	.+4      	; 0x6648 <conv_brk+0x74>
    6644:	00 97       	sbiw	r24, 0x00	; 0
    6646:	51 f1       	breq	.+84     	; 0x669c <conv_brk+0xc8>
    6648:	43 2f       	mov	r20, r19
    664a:	50 e0       	ldi	r21, 0x00	; 0
    664c:	48 17       	cp	r20, r24
    664e:	59 07       	cpc	r21, r25
    6650:	3c f4       	brge	.+14     	; 0x6660 <conv_brk+0x8c>
    6652:	2d 35       	cpi	r18, 0x5D	; 93
    6654:	59 f1       	breq	.+86     	; 0x66ac <conv_brk+0xd8>
    6656:	2d 32       	cpi	r18, 0x2D	; 45
    6658:	19 f4       	brne	.+6      	; 0x6660 <conv_brk+0x8c>
    665a:	77 20       	and	r7, r7
    665c:	09 f1       	breq	.+66     	; 0x66a0 <conv_brk+0xcc>
    665e:	03 c0       	rjmp	.+6      	; 0x6666 <conv_brk+0x92>
    6660:	77 20       	and	r7, r7
    6662:	09 f4       	brne	.+2      	; 0x6666 <conv_brk+0x92>
    6664:	68 c0       	rjmp	.+208    	; 0x6736 <conv_brk+0x162>
    6666:	45 2d       	mov	r20, r5
    6668:	46 95       	lsr	r20
    666a:	46 95       	lsr	r20
    666c:	46 95       	lsr	r20
    666e:	d6 01       	movw	r26, r12
    6670:	a4 0f       	add	r26, r20
    6672:	b1 1d       	adc	r27, r1
    6674:	45 2d       	mov	r20, r5
    6676:	47 70       	andi	r20, 0x07	; 7
    6678:	8b 01       	movw	r16, r22
    667a:	02 c0       	rjmp	.+4      	; 0x6680 <conv_brk+0xac>
    667c:	00 0f       	add	r16, r16
    667e:	11 1f       	adc	r17, r17
    6680:	4a 95       	dec	r20
    6682:	e2 f7       	brpl	.-8      	; 0x667c <conv_brk+0xa8>
    6684:	a8 01       	movw	r20, r16
    6686:	5c 91       	ld	r21, X
    6688:	45 2b       	or	r20, r21
    668a:	4c 93       	st	X, r20
    668c:	65 14       	cp	r6, r5
    668e:	59 f0       	breq	.+22     	; 0x66a6 <conv_brk+0xd2>
    6690:	56 14       	cp	r5, r6
    6692:	10 f4       	brcc	.+4      	; 0x6698 <conv_brk+0xc4>
    6694:	53 94       	inc	r5
    6696:	e7 cf       	rjmp	.-50     	; 0x6666 <conv_brk+0x92>
    6698:	5a 94       	dec	r5
    669a:	e5 cf       	rjmp	.-54     	; 0x6666 <conv_brk+0x92>
    669c:	31 e0       	ldi	r19, 0x01	; 1
    669e:	04 c0       	rjmp	.+8      	; 0x66a8 <conv_brk+0xd4>
    66a0:	77 24       	eor	r7, r7
    66a2:	73 94       	inc	r7
    66a4:	01 c0       	rjmp	.+2      	; 0x66a8 <conv_brk+0xd4>
    66a6:	71 2c       	mov	r7, r1
    66a8:	01 96       	adiw	r24, 0x01	; 1
    66aa:	bf cf       	rjmp	.-130    	; 0x662a <conv_brk+0x56>
    66ac:	77 20       	and	r7, r7
    66ae:	19 f0       	breq	.+6      	; 0x66b6 <conv_brk+0xe2>
    66b0:	8e 81       	ldd	r24, Y+6	; 0x06
    66b2:	80 62       	ori	r24, 0x20	; 32
    66b4:	8e 83       	std	Y+6, r24	; 0x06
    66b6:	31 11       	cpse	r19, r1
    66b8:	03 c0       	rjmp	.+6      	; 0x66c0 <conv_brk+0xec>
    66ba:	88 24       	eor	r8, r8
    66bc:	83 94       	inc	r8
    66be:	17 c0       	rjmp	.+46     	; 0x66ee <conv_brk+0x11a>
    66c0:	f6 01       	movw	r30, r12
    66c2:	9e 01       	movw	r18, r28
    66c4:	2f 5d       	subi	r18, 0xDF	; 223
    66c6:	3f 4f       	sbci	r19, 0xFF	; 255
    66c8:	80 81       	ld	r24, Z
    66ca:	80 95       	com	r24
    66cc:	81 93       	st	Z+, r24
    66ce:	2e 17       	cp	r18, r30
    66d0:	3f 07       	cpc	r19, r31
    66d2:	d1 f7       	brne	.-12     	; 0x66c8 <conv_brk+0xf4>
    66d4:	f2 cf       	rjmp	.-28     	; 0x66ba <conv_brk+0xe6>
    66d6:	e1 14       	cp	r14, r1
    66d8:	f1 04       	cpc	r15, r1
    66da:	29 f0       	breq	.+10     	; 0x66e6 <conv_brk+0x112>
    66dc:	d7 01       	movw	r26, r14
    66de:	8c 93       	st	X, r24
    66e0:	f7 01       	movw	r30, r14
    66e2:	31 96       	adiw	r30, 0x01	; 1
    66e4:	7f 01       	movw	r14, r30
    66e6:	9a 94       	dec	r9
    66e8:	81 2c       	mov	r8, r1
    66ea:	99 20       	and	r9, r9
    66ec:	e9 f0       	breq	.+58     	; 0x6728 <conv_brk+0x154>
    66ee:	c5 01       	movw	r24, r10
    66f0:	cc d2       	rcall	.+1432   	; 0x6c8a <fgetc>
    66f2:	97 fd       	sbrc	r25, 7
    66f4:	17 c0       	rjmp	.+46     	; 0x6724 <conv_brk+0x150>
    66f6:	fc 01       	movw	r30, r24
    66f8:	ff 27       	eor	r31, r31
    66fa:	23 e0       	ldi	r18, 0x03	; 3
    66fc:	f5 95       	asr	r31
    66fe:	e7 95       	ror	r30
    6700:	2a 95       	dec	r18
    6702:	e1 f7       	brne	.-8      	; 0x66fc <conv_brk+0x128>
    6704:	ec 0d       	add	r30, r12
    6706:	fd 1d       	adc	r31, r13
    6708:	20 81       	ld	r18, Z
    670a:	30 e0       	ldi	r19, 0x00	; 0
    670c:	ac 01       	movw	r20, r24
    670e:	47 70       	andi	r20, 0x07	; 7
    6710:	55 27       	eor	r21, r21
    6712:	02 c0       	rjmp	.+4      	; 0x6718 <conv_brk+0x144>
    6714:	35 95       	asr	r19
    6716:	27 95       	ror	r18
    6718:	4a 95       	dec	r20
    671a:	e2 f7       	brpl	.-8      	; 0x6714 <conv_brk+0x140>
    671c:	20 fd       	sbrc	r18, 0
    671e:	db cf       	rjmp	.-74     	; 0x66d6 <conv_brk+0x102>
    6720:	b5 01       	movw	r22, r10
    6722:	2d d3       	rcall	.+1626   	; 0x6d7e <ungetc>
    6724:	81 10       	cpse	r8, r1
    6726:	89 cf       	rjmp	.-238    	; 0x663a <conv_brk+0x66>
    6728:	e1 14       	cp	r14, r1
    672a:	f1 04       	cpc	r15, r1
    672c:	11 f0       	breq	.+4      	; 0x6732 <conv_brk+0x15e>
    672e:	d7 01       	movw	r26, r14
    6730:	1c 92       	st	X, r1
    6732:	c8 01       	movw	r24, r16
    6734:	15 c0       	rjmp	.+42     	; 0x6760 <conv_brk+0x18c>
    6736:	42 2f       	mov	r20, r18
    6738:	46 95       	lsr	r20
    673a:	46 95       	lsr	r20
    673c:	46 95       	lsr	r20
    673e:	d6 01       	movw	r26, r12
    6740:	a4 0f       	add	r26, r20
    6742:	b1 1d       	adc	r27, r1
    6744:	42 2f       	mov	r20, r18
    6746:	47 70       	andi	r20, 0x07	; 7
    6748:	8b 01       	movw	r16, r22
    674a:	02 c0       	rjmp	.+4      	; 0x6750 <conv_brk+0x17c>
    674c:	00 0f       	add	r16, r16
    674e:	11 1f       	adc	r17, r17
    6750:	4a 95       	dec	r20
    6752:	e2 f7       	brpl	.-8      	; 0x674c <conv_brk+0x178>
    6754:	a8 01       	movw	r20, r16
    6756:	5c 91       	ld	r21, X
    6758:	45 2b       	or	r20, r21
    675a:	4c 93       	st	X, r20
    675c:	62 2e       	mov	r6, r18
    675e:	a4 cf       	rjmp	.-184    	; 0x66a8 <conv_brk+0xd4>
    6760:	a0 96       	adiw	r28, 0x20	; 32
    6762:	cd bf       	out	0x3d, r28	; 61
    6764:	de bf       	out	0x3e, r29	; 62
    6766:	df 91       	pop	r29
    6768:	cf 91       	pop	r28
    676a:	1f 91       	pop	r17
    676c:	0f 91       	pop	r16
    676e:	ff 90       	pop	r15
    6770:	ef 90       	pop	r14
    6772:	df 90       	pop	r13
    6774:	cf 90       	pop	r12
    6776:	bf 90       	pop	r11
    6778:	af 90       	pop	r10
    677a:	9f 90       	pop	r9
    677c:	8f 90       	pop	r8
    677e:	7f 90       	pop	r7
    6780:	6f 90       	pop	r6
    6782:	5f 90       	pop	r5
    6784:	08 95       	ret

00006786 <vfscanf>:
    6786:	5f 92       	push	r5
    6788:	6f 92       	push	r6
    678a:	7f 92       	push	r7
    678c:	8f 92       	push	r8
    678e:	9f 92       	push	r9
    6790:	af 92       	push	r10
    6792:	bf 92       	push	r11
    6794:	cf 92       	push	r12
    6796:	df 92       	push	r13
    6798:	ef 92       	push	r14
    679a:	ff 92       	push	r15
    679c:	0f 93       	push	r16
    679e:	1f 93       	push	r17
    67a0:	cf 93       	push	r28
    67a2:	df 93       	push	r29
    67a4:	6c 01       	movw	r12, r24
    67a6:	eb 01       	movw	r28, r22
    67a8:	5a 01       	movw	r10, r20
    67aa:	fc 01       	movw	r30, r24
    67ac:	16 82       	std	Z+6, r1	; 0x06
    67ae:	17 82       	std	Z+7, r1	; 0x07
    67b0:	51 2c       	mov	r5, r1
    67b2:	f6 01       	movw	r30, r12
    67b4:	e3 80       	ldd	r14, Z+3	; 0x03
    67b6:	fe 01       	movw	r30, r28
    67b8:	e3 fc       	sbrc	r14, 3
    67ba:	85 91       	lpm	r24, Z+
    67bc:	e3 fe       	sbrs	r14, 3
    67be:	81 91       	ld	r24, Z+
    67c0:	18 2f       	mov	r17, r24
    67c2:	ef 01       	movw	r28, r30
    67c4:	88 23       	and	r24, r24
    67c6:	09 f4       	brne	.+2      	; 0x67ca <vfscanf+0x44>
    67c8:	e0 c0       	rjmp	.+448    	; 0x698a <vfscanf+0x204>
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	2e d2       	rcall	.+1116   	; 0x6c2a <isspace>
    67ce:	89 2b       	or	r24, r25
    67d0:	19 f0       	breq	.+6      	; 0x67d8 <vfscanf+0x52>
    67d2:	c6 01       	movw	r24, r12
    67d4:	5f de       	rcall	.-834    	; 0x6494 <skip_spaces>
    67d6:	ed cf       	rjmp	.-38     	; 0x67b2 <vfscanf+0x2c>
    67d8:	15 32       	cpi	r17, 0x25	; 37
    67da:	41 f4       	brne	.+16     	; 0x67ec <vfscanf+0x66>
    67dc:	fe 01       	movw	r30, r28
    67de:	e3 fc       	sbrc	r14, 3
    67e0:	15 91       	lpm	r17, Z+
    67e2:	e3 fe       	sbrs	r14, 3
    67e4:	11 91       	ld	r17, Z+
    67e6:	ef 01       	movw	r28, r30
    67e8:	15 32       	cpi	r17, 0x25	; 37
    67ea:	71 f4       	brne	.+28     	; 0x6808 <vfscanf+0x82>
    67ec:	c6 01       	movw	r24, r12
    67ee:	4d d2       	rcall	.+1178   	; 0x6c8a <fgetc>
    67f0:	97 fd       	sbrc	r25, 7
    67f2:	c9 c0       	rjmp	.+402    	; 0x6986 <vfscanf+0x200>
    67f4:	41 2f       	mov	r20, r17
    67f6:	50 e0       	ldi	r21, 0x00	; 0
    67f8:	9c 01       	movw	r18, r24
    67fa:	33 27       	eor	r19, r19
    67fc:	24 17       	cp	r18, r20
    67fe:	35 07       	cpc	r19, r21
    6800:	c1 f2       	breq	.-80     	; 0x67b2 <vfscanf+0x2c>
    6802:	b6 01       	movw	r22, r12
    6804:	bc d2       	rcall	.+1400   	; 0x6d7e <ungetc>
    6806:	c1 c0       	rjmp	.+386    	; 0x698a <vfscanf+0x204>
    6808:	1a 32       	cpi	r17, 0x2A	; 42
    680a:	39 f4       	brne	.+14     	; 0x681a <vfscanf+0x94>
    680c:	e3 fc       	sbrc	r14, 3
    680e:	15 91       	lpm	r17, Z+
    6810:	e3 fe       	sbrs	r14, 3
    6812:	11 91       	ld	r17, Z+
    6814:	ef 01       	movw	r28, r30
    6816:	01 e0       	ldi	r16, 0x01	; 1
    6818:	01 c0       	rjmp	.+2      	; 0x681c <vfscanf+0x96>
    681a:	00 e0       	ldi	r16, 0x00	; 0
    681c:	f1 2c       	mov	r15, r1
    681e:	20 ed       	ldi	r18, 0xD0	; 208
    6820:	21 0f       	add	r18, r17
    6822:	2a 30       	cpi	r18, 0x0A	; 10
    6824:	78 f4       	brcc	.+30     	; 0x6844 <vfscanf+0xbe>
    6826:	02 60       	ori	r16, 0x02	; 2
    6828:	6f 2d       	mov	r22, r15
    682a:	70 e0       	ldi	r23, 0x00	; 0
    682c:	80 e0       	ldi	r24, 0x00	; 0
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	40 e2       	ldi	r20, 0x20	; 32
    6832:	09 de       	rcall	.-1006   	; 0x6446 <mulacc>
    6834:	f6 2e       	mov	r15, r22
    6836:	fe 01       	movw	r30, r28
    6838:	e3 fc       	sbrc	r14, 3
    683a:	15 91       	lpm	r17, Z+
    683c:	e3 fe       	sbrs	r14, 3
    683e:	11 91       	ld	r17, Z+
    6840:	ef 01       	movw	r28, r30
    6842:	ed cf       	rjmp	.-38     	; 0x681e <vfscanf+0x98>
    6844:	01 ff       	sbrs	r16, 1
    6846:	03 c0       	rjmp	.+6      	; 0x684e <vfscanf+0xc8>
    6848:	f1 10       	cpse	r15, r1
    684a:	03 c0       	rjmp	.+6      	; 0x6852 <vfscanf+0xcc>
    684c:	9e c0       	rjmp	.+316    	; 0x698a <vfscanf+0x204>
    684e:	ff 24       	eor	r15, r15
    6850:	fa 94       	dec	r15
    6852:	18 36       	cpi	r17, 0x68	; 104
    6854:	19 f0       	breq	.+6      	; 0x685c <vfscanf+0xd6>
    6856:	1c 36       	cpi	r17, 0x6C	; 108
    6858:	51 f0       	breq	.+20     	; 0x686e <vfscanf+0xe8>
    685a:	10 c0       	rjmp	.+32     	; 0x687c <vfscanf+0xf6>
    685c:	fe 01       	movw	r30, r28
    685e:	e3 fc       	sbrc	r14, 3
    6860:	15 91       	lpm	r17, Z+
    6862:	e3 fe       	sbrs	r14, 3
    6864:	11 91       	ld	r17, Z+
    6866:	ef 01       	movw	r28, r30
    6868:	18 36       	cpi	r17, 0x68	; 104
    686a:	41 f4       	brne	.+16     	; 0x687c <vfscanf+0xf6>
    686c:	08 60       	ori	r16, 0x08	; 8
    686e:	04 60       	ori	r16, 0x04	; 4
    6870:	fe 01       	movw	r30, r28
    6872:	e3 fc       	sbrc	r14, 3
    6874:	15 91       	lpm	r17, Z+
    6876:	e3 fe       	sbrs	r14, 3
    6878:	11 91       	ld	r17, Z+
    687a:	ef 01       	movw	r28, r30
    687c:	11 23       	and	r17, r17
    687e:	09 f4       	brne	.+2      	; 0x6882 <vfscanf+0xfc>
    6880:	84 c0       	rjmp	.+264    	; 0x698a <vfscanf+0x204>
    6882:	61 2f       	mov	r22, r17
    6884:	70 e0       	ldi	r23, 0x00	; 0
    6886:	84 ea       	ldi	r24, 0xA4	; 164
    6888:	92 e0       	ldi	r25, 0x02	; 2
    688a:	d7 d1       	rcall	.+942    	; 0x6c3a <strchr_P>
    688c:	89 2b       	or	r24, r25
    688e:	09 f4       	brne	.+2      	; 0x6892 <vfscanf+0x10c>
    6890:	7c c0       	rjmp	.+248    	; 0x698a <vfscanf+0x204>
    6892:	00 fd       	sbrc	r16, 0
    6894:	07 c0       	rjmp	.+14     	; 0x68a4 <vfscanf+0x11e>
    6896:	f5 01       	movw	r30, r10
    6898:	80 80       	ld	r8, Z
    689a:	91 80       	ldd	r9, Z+1	; 0x01
    689c:	c5 01       	movw	r24, r10
    689e:	02 96       	adiw	r24, 0x02	; 2
    68a0:	5c 01       	movw	r10, r24
    68a2:	02 c0       	rjmp	.+4      	; 0x68a8 <vfscanf+0x122>
    68a4:	81 2c       	mov	r8, r1
    68a6:	91 2c       	mov	r9, r1
    68a8:	1e 36       	cpi	r17, 0x6E	; 110
    68aa:	49 f4       	brne	.+18     	; 0x68be <vfscanf+0x138>
    68ac:	f6 01       	movw	r30, r12
    68ae:	46 81       	ldd	r20, Z+6	; 0x06
    68b0:	57 81       	ldd	r21, Z+7	; 0x07
    68b2:	60 e0       	ldi	r22, 0x00	; 0
    68b4:	70 e0       	ldi	r23, 0x00	; 0
    68b6:	20 2f       	mov	r18, r16
    68b8:	c4 01       	movw	r24, r8
    68ba:	b9 dd       	rcall	.-1166   	; 0x642e <putval>
    68bc:	7a cf       	rjmp	.-268    	; 0x67b2 <vfscanf+0x2c>
    68be:	13 36       	cpi	r17, 0x63	; 99
    68c0:	a1 f4       	brne	.+40     	; 0x68ea <vfscanf+0x164>
    68c2:	01 fd       	sbrc	r16, 1
    68c4:	02 c0       	rjmp	.+4      	; 0x68ca <vfscanf+0x144>
    68c6:	ff 24       	eor	r15, r15
    68c8:	f3 94       	inc	r15
    68ca:	c6 01       	movw	r24, r12
    68cc:	de d1       	rcall	.+956    	; 0x6c8a <fgetc>
    68ce:	97 fd       	sbrc	r25, 7
    68d0:	5a c0       	rjmp	.+180    	; 0x6986 <vfscanf+0x200>
    68d2:	81 14       	cp	r8, r1
    68d4:	91 04       	cpc	r9, r1
    68d6:	29 f0       	breq	.+10     	; 0x68e2 <vfscanf+0x15c>
    68d8:	f4 01       	movw	r30, r8
    68da:	80 83       	st	Z, r24
    68dc:	c4 01       	movw	r24, r8
    68de:	01 96       	adiw	r24, 0x01	; 1
    68e0:	4c 01       	movw	r8, r24
    68e2:	fa 94       	dec	r15
    68e4:	f1 10       	cpse	r15, r1
    68e6:	f1 cf       	rjmp	.-30     	; 0x68ca <vfscanf+0x144>
    68e8:	4a c0       	rjmp	.+148    	; 0x697e <vfscanf+0x1f8>
    68ea:	1b 35       	cpi	r17, 0x5B	; 91
    68ec:	51 f4       	brne	.+20     	; 0x6902 <vfscanf+0x17c>
    68ee:	9e 01       	movw	r18, r28
    68f0:	a4 01       	movw	r20, r8
    68f2:	6f 2d       	mov	r22, r15
    68f4:	c6 01       	movw	r24, r12
    68f6:	6e de       	rcall	.-804    	; 0x65d4 <conv_brk>
    68f8:	ec 01       	movw	r28, r24
    68fa:	89 2b       	or	r24, r25
    68fc:	09 f0       	breq	.+2      	; 0x6900 <vfscanf+0x17a>
    68fe:	3f c0       	rjmp	.+126    	; 0x697e <vfscanf+0x1f8>
    6900:	39 c0       	rjmp	.+114    	; 0x6974 <vfscanf+0x1ee>
    6902:	c6 01       	movw	r24, r12
    6904:	c7 dd       	rcall	.-1138   	; 0x6494 <skip_spaces>
    6906:	97 fd       	sbrc	r25, 7
    6908:	3e c0       	rjmp	.+124    	; 0x6986 <vfscanf+0x200>
    690a:	1f 36       	cpi	r17, 0x6F	; 111
    690c:	49 f1       	breq	.+82     	; 0x6960 <vfscanf+0x1da>
    690e:	28 f4       	brcc	.+10     	; 0x691a <vfscanf+0x194>
    6910:	14 36       	cpi	r17, 0x64	; 100
    6912:	21 f1       	breq	.+72     	; 0x695c <vfscanf+0x1d6>
    6914:	19 36       	cpi	r17, 0x69	; 105
    6916:	39 f1       	breq	.+78     	; 0x6966 <vfscanf+0x1e0>
    6918:	25 c0       	rjmp	.+74     	; 0x6964 <vfscanf+0x1de>
    691a:	13 37       	cpi	r17, 0x73	; 115
    691c:	71 f0       	breq	.+28     	; 0x693a <vfscanf+0x1b4>
    691e:	15 37       	cpi	r17, 0x75	; 117
    6920:	e9 f0       	breq	.+58     	; 0x695c <vfscanf+0x1d6>
    6922:	20 c0       	rjmp	.+64     	; 0x6964 <vfscanf+0x1de>
    6924:	81 14       	cp	r8, r1
    6926:	91 04       	cpc	r9, r1
    6928:	29 f0       	breq	.+10     	; 0x6934 <vfscanf+0x1ae>
    692a:	f4 01       	movw	r30, r8
    692c:	60 82       	st	Z, r6
    692e:	c4 01       	movw	r24, r8
    6930:	01 96       	adiw	r24, 0x01	; 1
    6932:	4c 01       	movw	r8, r24
    6934:	fa 94       	dec	r15
    6936:	ff 20       	and	r15, r15
    6938:	59 f0       	breq	.+22     	; 0x6950 <vfscanf+0x1ca>
    693a:	c6 01       	movw	r24, r12
    693c:	a6 d1       	rcall	.+844    	; 0x6c8a <fgetc>
    693e:	3c 01       	movw	r6, r24
    6940:	97 fd       	sbrc	r25, 7
    6942:	06 c0       	rjmp	.+12     	; 0x6950 <vfscanf+0x1ca>
    6944:	72 d1       	rcall	.+740    	; 0x6c2a <isspace>
    6946:	89 2b       	or	r24, r25
    6948:	69 f3       	breq	.-38     	; 0x6924 <vfscanf+0x19e>
    694a:	b6 01       	movw	r22, r12
    694c:	c3 01       	movw	r24, r6
    694e:	17 d2       	rcall	.+1070   	; 0x6d7e <ungetc>
    6950:	81 14       	cp	r8, r1
    6952:	91 04       	cpc	r9, r1
    6954:	a1 f0       	breq	.+40     	; 0x697e <vfscanf+0x1f8>
    6956:	f4 01       	movw	r30, r8
    6958:	10 82       	st	Z, r1
    695a:	11 c0       	rjmp	.+34     	; 0x697e <vfscanf+0x1f8>
    695c:	00 62       	ori	r16, 0x20	; 32
    695e:	03 c0       	rjmp	.+6      	; 0x6966 <vfscanf+0x1e0>
    6960:	00 61       	ori	r16, 0x10	; 16
    6962:	01 c0       	rjmp	.+2      	; 0x6966 <vfscanf+0x1e0>
    6964:	00 64       	ori	r16, 0x40	; 64
    6966:	20 2f       	mov	r18, r16
    6968:	a4 01       	movw	r20, r8
    696a:	6f 2d       	mov	r22, r15
    696c:	c6 01       	movw	r24, r12
    696e:	a8 dd       	rcall	.-1200   	; 0x64c0 <conv_int>
    6970:	81 11       	cpse	r24, r1
    6972:	05 c0       	rjmp	.+10     	; 0x697e <vfscanf+0x1f8>
    6974:	f6 01       	movw	r30, r12
    6976:	83 81       	ldd	r24, Z+3	; 0x03
    6978:	80 73       	andi	r24, 0x30	; 48
    697a:	29 f4       	brne	.+10     	; 0x6986 <vfscanf+0x200>
    697c:	06 c0       	rjmp	.+12     	; 0x698a <vfscanf+0x204>
    697e:	00 fd       	sbrc	r16, 0
    6980:	18 cf       	rjmp	.-464    	; 0x67b2 <vfscanf+0x2c>
    6982:	53 94       	inc	r5
    6984:	16 cf       	rjmp	.-468    	; 0x67b2 <vfscanf+0x2c>
    6986:	55 20       	and	r5, r5
    6988:	19 f0       	breq	.+6      	; 0x6990 <vfscanf+0x20a>
    698a:	85 2d       	mov	r24, r5
    698c:	90 e0       	ldi	r25, 0x00	; 0
    698e:	02 c0       	rjmp	.+4      	; 0x6994 <vfscanf+0x20e>
    6990:	8f ef       	ldi	r24, 0xFF	; 255
    6992:	9f ef       	ldi	r25, 0xFF	; 255
    6994:	df 91       	pop	r29
    6996:	cf 91       	pop	r28
    6998:	1f 91       	pop	r17
    699a:	0f 91       	pop	r16
    699c:	ff 90       	pop	r15
    699e:	ef 90       	pop	r14
    69a0:	df 90       	pop	r13
    69a2:	cf 90       	pop	r12
    69a4:	bf 90       	pop	r11
    69a6:	af 90       	pop	r10
    69a8:	9f 90       	pop	r9
    69aa:	8f 90       	pop	r8
    69ac:	7f 90       	pop	r7
    69ae:	6f 90       	pop	r6
    69b0:	5f 90       	pop	r5
    69b2:	08 95       	ret

000069b4 <calloc>:
    69b4:	0f 93       	push	r16
    69b6:	1f 93       	push	r17
    69b8:	cf 93       	push	r28
    69ba:	df 93       	push	r29
    69bc:	86 9f       	mul	r24, r22
    69be:	80 01       	movw	r16, r0
    69c0:	87 9f       	mul	r24, r23
    69c2:	10 0d       	add	r17, r0
    69c4:	96 9f       	mul	r25, r22
    69c6:	10 0d       	add	r17, r0
    69c8:	11 24       	eor	r1, r1
    69ca:	c8 01       	movw	r24, r16
    69cc:	0d d0       	rcall	.+26     	; 0x69e8 <malloc>
    69ce:	ec 01       	movw	r28, r24
    69d0:	00 97       	sbiw	r24, 0x00	; 0
    69d2:	21 f0       	breq	.+8      	; 0x69dc <calloc+0x28>
    69d4:	a8 01       	movw	r20, r16
    69d6:	60 e0       	ldi	r22, 0x00	; 0
    69d8:	70 e0       	ldi	r23, 0x00	; 0
    69da:	45 d1       	rcall	.+650    	; 0x6c66 <memset>
    69dc:	ce 01       	movw	r24, r28
    69de:	df 91       	pop	r29
    69e0:	cf 91       	pop	r28
    69e2:	1f 91       	pop	r17
    69e4:	0f 91       	pop	r16
    69e6:	08 95       	ret

000069e8 <malloc>:
    69e8:	0f 93       	push	r16
    69ea:	1f 93       	push	r17
    69ec:	cf 93       	push	r28
    69ee:	df 93       	push	r29
    69f0:	82 30       	cpi	r24, 0x02	; 2
    69f2:	91 05       	cpc	r25, r1
    69f4:	10 f4       	brcc	.+4      	; 0x69fa <malloc+0x12>
    69f6:	82 e0       	ldi	r24, 0x02	; 2
    69f8:	90 e0       	ldi	r25, 0x00	; 0
    69fa:	e0 91 0a 22 	lds	r30, 0x220A	; 0x80220a <__flp>
    69fe:	f0 91 0b 22 	lds	r31, 0x220B	; 0x80220b <__flp+0x1>
    6a02:	20 e0       	ldi	r18, 0x00	; 0
    6a04:	30 e0       	ldi	r19, 0x00	; 0
    6a06:	a0 e0       	ldi	r26, 0x00	; 0
    6a08:	b0 e0       	ldi	r27, 0x00	; 0
    6a0a:	30 97       	sbiw	r30, 0x00	; 0
    6a0c:	19 f1       	breq	.+70     	; 0x6a54 <malloc+0x6c>
    6a0e:	40 81       	ld	r20, Z
    6a10:	51 81       	ldd	r21, Z+1	; 0x01
    6a12:	02 81       	ldd	r16, Z+2	; 0x02
    6a14:	13 81       	ldd	r17, Z+3	; 0x03
    6a16:	48 17       	cp	r20, r24
    6a18:	59 07       	cpc	r21, r25
    6a1a:	c8 f0       	brcs	.+50     	; 0x6a4e <malloc+0x66>
    6a1c:	84 17       	cp	r24, r20
    6a1e:	95 07       	cpc	r25, r21
    6a20:	69 f4       	brne	.+26     	; 0x6a3c <malloc+0x54>
    6a22:	10 97       	sbiw	r26, 0x00	; 0
    6a24:	31 f0       	breq	.+12     	; 0x6a32 <malloc+0x4a>
    6a26:	12 96       	adiw	r26, 0x02	; 2
    6a28:	0c 93       	st	X, r16
    6a2a:	12 97       	sbiw	r26, 0x02	; 2
    6a2c:	13 96       	adiw	r26, 0x03	; 3
    6a2e:	1c 93       	st	X, r17
    6a30:	27 c0       	rjmp	.+78     	; 0x6a80 <malloc+0x98>
    6a32:	00 93 0a 22 	sts	0x220A, r16	; 0x80220a <__flp>
    6a36:	10 93 0b 22 	sts	0x220B, r17	; 0x80220b <__flp+0x1>
    6a3a:	22 c0       	rjmp	.+68     	; 0x6a80 <malloc+0x98>
    6a3c:	21 15       	cp	r18, r1
    6a3e:	31 05       	cpc	r19, r1
    6a40:	19 f0       	breq	.+6      	; 0x6a48 <malloc+0x60>
    6a42:	42 17       	cp	r20, r18
    6a44:	53 07       	cpc	r21, r19
    6a46:	18 f4       	brcc	.+6      	; 0x6a4e <malloc+0x66>
    6a48:	9a 01       	movw	r18, r20
    6a4a:	bd 01       	movw	r22, r26
    6a4c:	ef 01       	movw	r28, r30
    6a4e:	df 01       	movw	r26, r30
    6a50:	f8 01       	movw	r30, r16
    6a52:	db cf       	rjmp	.-74     	; 0x6a0a <malloc+0x22>
    6a54:	21 15       	cp	r18, r1
    6a56:	31 05       	cpc	r19, r1
    6a58:	f9 f0       	breq	.+62     	; 0x6a98 <malloc+0xb0>
    6a5a:	28 1b       	sub	r18, r24
    6a5c:	39 0b       	sbc	r19, r25
    6a5e:	24 30       	cpi	r18, 0x04	; 4
    6a60:	31 05       	cpc	r19, r1
    6a62:	80 f4       	brcc	.+32     	; 0x6a84 <malloc+0x9c>
    6a64:	8a 81       	ldd	r24, Y+2	; 0x02
    6a66:	9b 81       	ldd	r25, Y+3	; 0x03
    6a68:	61 15       	cp	r22, r1
    6a6a:	71 05       	cpc	r23, r1
    6a6c:	21 f0       	breq	.+8      	; 0x6a76 <malloc+0x8e>
    6a6e:	fb 01       	movw	r30, r22
    6a70:	82 83       	std	Z+2, r24	; 0x02
    6a72:	93 83       	std	Z+3, r25	; 0x03
    6a74:	04 c0       	rjmp	.+8      	; 0x6a7e <malloc+0x96>
    6a76:	80 93 0a 22 	sts	0x220A, r24	; 0x80220a <__flp>
    6a7a:	90 93 0b 22 	sts	0x220B, r25	; 0x80220b <__flp+0x1>
    6a7e:	fe 01       	movw	r30, r28
    6a80:	32 96       	adiw	r30, 0x02	; 2
    6a82:	44 c0       	rjmp	.+136    	; 0x6b0c <malloc+0x124>
    6a84:	fe 01       	movw	r30, r28
    6a86:	e2 0f       	add	r30, r18
    6a88:	f3 1f       	adc	r31, r19
    6a8a:	81 93       	st	Z+, r24
    6a8c:	91 93       	st	Z+, r25
    6a8e:	22 50       	subi	r18, 0x02	; 2
    6a90:	31 09       	sbc	r19, r1
    6a92:	28 83       	st	Y, r18
    6a94:	39 83       	std	Y+1, r19	; 0x01
    6a96:	3a c0       	rjmp	.+116    	; 0x6b0c <malloc+0x124>
    6a98:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <__brkval>
    6a9c:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <__brkval+0x1>
    6aa0:	23 2b       	or	r18, r19
    6aa2:	41 f4       	brne	.+16     	; 0x6ab4 <malloc+0xcc>
    6aa4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    6aa8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6aac:	20 93 08 22 	sts	0x2208, r18	; 0x802208 <__brkval>
    6ab0:	30 93 09 22 	sts	0x2209, r19	; 0x802209 <__brkval+0x1>
    6ab4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    6ab8:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6abc:	21 15       	cp	r18, r1
    6abe:	31 05       	cpc	r19, r1
    6ac0:	41 f4       	brne	.+16     	; 0x6ad2 <malloc+0xea>
    6ac2:	2d b7       	in	r18, 0x3d	; 61
    6ac4:	3e b7       	in	r19, 0x3e	; 62
    6ac6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6aca:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6ace:	24 1b       	sub	r18, r20
    6ad0:	35 0b       	sbc	r19, r21
    6ad2:	e0 91 08 22 	lds	r30, 0x2208	; 0x802208 <__brkval>
    6ad6:	f0 91 09 22 	lds	r31, 0x2209	; 0x802209 <__brkval+0x1>
    6ada:	e2 17       	cp	r30, r18
    6adc:	f3 07       	cpc	r31, r19
    6ade:	a0 f4       	brcc	.+40     	; 0x6b08 <malloc+0x120>
    6ae0:	2e 1b       	sub	r18, r30
    6ae2:	3f 0b       	sbc	r19, r31
    6ae4:	28 17       	cp	r18, r24
    6ae6:	39 07       	cpc	r19, r25
    6ae8:	78 f0       	brcs	.+30     	; 0x6b08 <malloc+0x120>
    6aea:	ac 01       	movw	r20, r24
    6aec:	4e 5f       	subi	r20, 0xFE	; 254
    6aee:	5f 4f       	sbci	r21, 0xFF	; 255
    6af0:	24 17       	cp	r18, r20
    6af2:	35 07       	cpc	r19, r21
    6af4:	48 f0       	brcs	.+18     	; 0x6b08 <malloc+0x120>
    6af6:	4e 0f       	add	r20, r30
    6af8:	5f 1f       	adc	r21, r31
    6afa:	40 93 08 22 	sts	0x2208, r20	; 0x802208 <__brkval>
    6afe:	50 93 09 22 	sts	0x2209, r21	; 0x802209 <__brkval+0x1>
    6b02:	81 93       	st	Z+, r24
    6b04:	91 93       	st	Z+, r25
    6b06:	02 c0       	rjmp	.+4      	; 0x6b0c <malloc+0x124>
    6b08:	e0 e0       	ldi	r30, 0x00	; 0
    6b0a:	f0 e0       	ldi	r31, 0x00	; 0
    6b0c:	cf 01       	movw	r24, r30
    6b0e:	df 91       	pop	r29
    6b10:	cf 91       	pop	r28
    6b12:	1f 91       	pop	r17
    6b14:	0f 91       	pop	r16
    6b16:	08 95       	ret

00006b18 <free>:
    6b18:	cf 93       	push	r28
    6b1a:	df 93       	push	r29
    6b1c:	00 97       	sbiw	r24, 0x00	; 0
    6b1e:	09 f4       	brne	.+2      	; 0x6b22 <free+0xa>
    6b20:	81 c0       	rjmp	.+258    	; 0x6c24 <free+0x10c>
    6b22:	fc 01       	movw	r30, r24
    6b24:	32 97       	sbiw	r30, 0x02	; 2
    6b26:	12 82       	std	Z+2, r1	; 0x02
    6b28:	13 82       	std	Z+3, r1	; 0x03
    6b2a:	a0 91 0a 22 	lds	r26, 0x220A	; 0x80220a <__flp>
    6b2e:	b0 91 0b 22 	lds	r27, 0x220B	; 0x80220b <__flp+0x1>
    6b32:	10 97       	sbiw	r26, 0x00	; 0
    6b34:	81 f4       	brne	.+32     	; 0x6b56 <free+0x3e>
    6b36:	20 81       	ld	r18, Z
    6b38:	31 81       	ldd	r19, Z+1	; 0x01
    6b3a:	82 0f       	add	r24, r18
    6b3c:	93 1f       	adc	r25, r19
    6b3e:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <__brkval>
    6b42:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <__brkval+0x1>
    6b46:	28 17       	cp	r18, r24
    6b48:	39 07       	cpc	r19, r25
    6b4a:	51 f5       	brne	.+84     	; 0x6ba0 <free+0x88>
    6b4c:	e0 93 08 22 	sts	0x2208, r30	; 0x802208 <__brkval>
    6b50:	f0 93 09 22 	sts	0x2209, r31	; 0x802209 <__brkval+0x1>
    6b54:	67 c0       	rjmp	.+206    	; 0x6c24 <free+0x10c>
    6b56:	ed 01       	movw	r28, r26
    6b58:	20 e0       	ldi	r18, 0x00	; 0
    6b5a:	30 e0       	ldi	r19, 0x00	; 0
    6b5c:	ce 17       	cp	r28, r30
    6b5e:	df 07       	cpc	r29, r31
    6b60:	40 f4       	brcc	.+16     	; 0x6b72 <free+0x5a>
    6b62:	4a 81       	ldd	r20, Y+2	; 0x02
    6b64:	5b 81       	ldd	r21, Y+3	; 0x03
    6b66:	9e 01       	movw	r18, r28
    6b68:	41 15       	cp	r20, r1
    6b6a:	51 05       	cpc	r21, r1
    6b6c:	f1 f0       	breq	.+60     	; 0x6baa <free+0x92>
    6b6e:	ea 01       	movw	r28, r20
    6b70:	f5 cf       	rjmp	.-22     	; 0x6b5c <free+0x44>
    6b72:	c2 83       	std	Z+2, r28	; 0x02
    6b74:	d3 83       	std	Z+3, r29	; 0x03
    6b76:	40 81       	ld	r20, Z
    6b78:	51 81       	ldd	r21, Z+1	; 0x01
    6b7a:	84 0f       	add	r24, r20
    6b7c:	95 1f       	adc	r25, r21
    6b7e:	c8 17       	cp	r28, r24
    6b80:	d9 07       	cpc	r29, r25
    6b82:	59 f4       	brne	.+22     	; 0x6b9a <free+0x82>
    6b84:	88 81       	ld	r24, Y
    6b86:	99 81       	ldd	r25, Y+1	; 0x01
    6b88:	84 0f       	add	r24, r20
    6b8a:	95 1f       	adc	r25, r21
    6b8c:	02 96       	adiw	r24, 0x02	; 2
    6b8e:	80 83       	st	Z, r24
    6b90:	91 83       	std	Z+1, r25	; 0x01
    6b92:	8a 81       	ldd	r24, Y+2	; 0x02
    6b94:	9b 81       	ldd	r25, Y+3	; 0x03
    6b96:	82 83       	std	Z+2, r24	; 0x02
    6b98:	93 83       	std	Z+3, r25	; 0x03
    6b9a:	21 15       	cp	r18, r1
    6b9c:	31 05       	cpc	r19, r1
    6b9e:	29 f4       	brne	.+10     	; 0x6baa <free+0x92>
    6ba0:	e0 93 0a 22 	sts	0x220A, r30	; 0x80220a <__flp>
    6ba4:	f0 93 0b 22 	sts	0x220B, r31	; 0x80220b <__flp+0x1>
    6ba8:	3d c0       	rjmp	.+122    	; 0x6c24 <free+0x10c>
    6baa:	e9 01       	movw	r28, r18
    6bac:	ea 83       	std	Y+2, r30	; 0x02
    6bae:	fb 83       	std	Y+3, r31	; 0x03
    6bb0:	49 91       	ld	r20, Y+
    6bb2:	59 91       	ld	r21, Y+
    6bb4:	c4 0f       	add	r28, r20
    6bb6:	d5 1f       	adc	r29, r21
    6bb8:	ec 17       	cp	r30, r28
    6bba:	fd 07       	cpc	r31, r29
    6bbc:	61 f4       	brne	.+24     	; 0x6bd6 <free+0xbe>
    6bbe:	80 81       	ld	r24, Z
    6bc0:	91 81       	ldd	r25, Z+1	; 0x01
    6bc2:	84 0f       	add	r24, r20
    6bc4:	95 1f       	adc	r25, r21
    6bc6:	02 96       	adiw	r24, 0x02	; 2
    6bc8:	e9 01       	movw	r28, r18
    6bca:	88 83       	st	Y, r24
    6bcc:	99 83       	std	Y+1, r25	; 0x01
    6bce:	82 81       	ldd	r24, Z+2	; 0x02
    6bd0:	93 81       	ldd	r25, Z+3	; 0x03
    6bd2:	8a 83       	std	Y+2, r24	; 0x02
    6bd4:	9b 83       	std	Y+3, r25	; 0x03
    6bd6:	e0 e0       	ldi	r30, 0x00	; 0
    6bd8:	f0 e0       	ldi	r31, 0x00	; 0
    6bda:	12 96       	adiw	r26, 0x02	; 2
    6bdc:	8d 91       	ld	r24, X+
    6bde:	9c 91       	ld	r25, X
    6be0:	13 97       	sbiw	r26, 0x03	; 3
    6be2:	00 97       	sbiw	r24, 0x00	; 0
    6be4:	19 f0       	breq	.+6      	; 0x6bec <free+0xd4>
    6be6:	fd 01       	movw	r30, r26
    6be8:	dc 01       	movw	r26, r24
    6bea:	f7 cf       	rjmp	.-18     	; 0x6bda <free+0xc2>
    6bec:	8d 91       	ld	r24, X+
    6bee:	9c 91       	ld	r25, X
    6bf0:	11 97       	sbiw	r26, 0x01	; 1
    6bf2:	9d 01       	movw	r18, r26
    6bf4:	2e 5f       	subi	r18, 0xFE	; 254
    6bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    6bf8:	82 0f       	add	r24, r18
    6bfa:	93 1f       	adc	r25, r19
    6bfc:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <__brkval>
    6c00:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <__brkval+0x1>
    6c04:	28 17       	cp	r18, r24
    6c06:	39 07       	cpc	r19, r25
    6c08:	69 f4       	brne	.+26     	; 0x6c24 <free+0x10c>
    6c0a:	30 97       	sbiw	r30, 0x00	; 0
    6c0c:	29 f4       	brne	.+10     	; 0x6c18 <free+0x100>
    6c0e:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <__flp>
    6c12:	10 92 0b 22 	sts	0x220B, r1	; 0x80220b <__flp+0x1>
    6c16:	02 c0       	rjmp	.+4      	; 0x6c1c <free+0x104>
    6c18:	12 82       	std	Z+2, r1	; 0x02
    6c1a:	13 82       	std	Z+3, r1	; 0x03
    6c1c:	a0 93 08 22 	sts	0x2208, r26	; 0x802208 <__brkval>
    6c20:	b0 93 09 22 	sts	0x2209, r27	; 0x802209 <__brkval+0x1>
    6c24:	df 91       	pop	r29
    6c26:	cf 91       	pop	r28
    6c28:	08 95       	ret

00006c2a <isspace>:
    6c2a:	91 11       	cpse	r25, r1
    6c2c:	1f c1       	rjmp	.+574    	; 0x6e6c <__ctype_isfalse>
    6c2e:	80 32       	cpi	r24, 0x20	; 32
    6c30:	19 f0       	breq	.+6      	; 0x6c38 <isspace+0xe>
    6c32:	89 50       	subi	r24, 0x09	; 9
    6c34:	85 50       	subi	r24, 0x05	; 5
    6c36:	d0 f7       	brcc	.-12     	; 0x6c2c <isspace+0x2>
    6c38:	08 95       	ret

00006c3a <strchr_P>:
    6c3a:	fc 01       	movw	r30, r24
    6c3c:	05 90       	lpm	r0, Z+
    6c3e:	06 16       	cp	r0, r22
    6c40:	21 f0       	breq	.+8      	; 0x6c4a <strchr_P+0x10>
    6c42:	00 20       	and	r0, r0
    6c44:	d9 f7       	brne	.-10     	; 0x6c3c <strchr_P+0x2>
    6c46:	c0 01       	movw	r24, r0
    6c48:	08 95       	ret
    6c4a:	31 97       	sbiw	r30, 0x01	; 1
    6c4c:	cf 01       	movw	r24, r30
    6c4e:	08 95       	ret

00006c50 <strnlen_P>:
    6c50:	fc 01       	movw	r30, r24
    6c52:	05 90       	lpm	r0, Z+
    6c54:	61 50       	subi	r22, 0x01	; 1
    6c56:	70 40       	sbci	r23, 0x00	; 0
    6c58:	01 10       	cpse	r0, r1
    6c5a:	d8 f7       	brcc	.-10     	; 0x6c52 <strnlen_P+0x2>
    6c5c:	80 95       	com	r24
    6c5e:	90 95       	com	r25
    6c60:	8e 0f       	add	r24, r30
    6c62:	9f 1f       	adc	r25, r31
    6c64:	08 95       	ret

00006c66 <memset>:
    6c66:	dc 01       	movw	r26, r24
    6c68:	01 c0       	rjmp	.+2      	; 0x6c6c <memset+0x6>
    6c6a:	6d 93       	st	X+, r22
    6c6c:	41 50       	subi	r20, 0x01	; 1
    6c6e:	50 40       	sbci	r21, 0x00	; 0
    6c70:	e0 f7       	brcc	.-8      	; 0x6c6a <memset+0x4>
    6c72:	08 95       	ret

00006c74 <strnlen>:
    6c74:	fc 01       	movw	r30, r24
    6c76:	61 50       	subi	r22, 0x01	; 1
    6c78:	70 40       	sbci	r23, 0x00	; 0
    6c7a:	01 90       	ld	r0, Z+
    6c7c:	01 10       	cpse	r0, r1
    6c7e:	d8 f7       	brcc	.-10     	; 0x6c76 <strnlen+0x2>
    6c80:	80 95       	com	r24
    6c82:	90 95       	com	r25
    6c84:	8e 0f       	add	r24, r30
    6c86:	9f 1f       	adc	r25, r31
    6c88:	08 95       	ret

00006c8a <fgetc>:
    6c8a:	cf 93       	push	r28
    6c8c:	df 93       	push	r29
    6c8e:	ec 01       	movw	r28, r24
    6c90:	2b 81       	ldd	r18, Y+3	; 0x03
    6c92:	20 ff       	sbrs	r18, 0
    6c94:	33 c0       	rjmp	.+102    	; 0x6cfc <fgetc+0x72>
    6c96:	26 ff       	sbrs	r18, 6
    6c98:	0a c0       	rjmp	.+20     	; 0x6cae <fgetc+0x24>
    6c9a:	2f 7b       	andi	r18, 0xBF	; 191
    6c9c:	2b 83       	std	Y+3, r18	; 0x03
    6c9e:	8e 81       	ldd	r24, Y+6	; 0x06
    6ca0:	9f 81       	ldd	r25, Y+7	; 0x07
    6ca2:	01 96       	adiw	r24, 0x01	; 1
    6ca4:	8e 83       	std	Y+6, r24	; 0x06
    6ca6:	9f 83       	std	Y+7, r25	; 0x07
    6ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    6caa:	90 e0       	ldi	r25, 0x00	; 0
    6cac:	29 c0       	rjmp	.+82     	; 0x6d00 <fgetc+0x76>
    6cae:	22 ff       	sbrs	r18, 2
    6cb0:	0f c0       	rjmp	.+30     	; 0x6cd0 <fgetc+0x46>
    6cb2:	e8 81       	ld	r30, Y
    6cb4:	f9 81       	ldd	r31, Y+1	; 0x01
    6cb6:	80 81       	ld	r24, Z
    6cb8:	08 2e       	mov	r0, r24
    6cba:	00 0c       	add	r0, r0
    6cbc:	99 0b       	sbc	r25, r25
    6cbe:	00 97       	sbiw	r24, 0x00	; 0
    6cc0:	19 f4       	brne	.+6      	; 0x6cc8 <fgetc+0x3e>
    6cc2:	20 62       	ori	r18, 0x20	; 32
    6cc4:	2b 83       	std	Y+3, r18	; 0x03
    6cc6:	1a c0       	rjmp	.+52     	; 0x6cfc <fgetc+0x72>
    6cc8:	31 96       	adiw	r30, 0x01	; 1
    6cca:	e8 83       	st	Y, r30
    6ccc:	f9 83       	std	Y+1, r31	; 0x01
    6cce:	0e c0       	rjmp	.+28     	; 0x6cec <fgetc+0x62>
    6cd0:	ea 85       	ldd	r30, Y+10	; 0x0a
    6cd2:	fb 85       	ldd	r31, Y+11	; 0x0b
    6cd4:	19 95       	eicall
    6cd6:	97 ff       	sbrs	r25, 7
    6cd8:	09 c0       	rjmp	.+18     	; 0x6cec <fgetc+0x62>
    6cda:	2b 81       	ldd	r18, Y+3	; 0x03
    6cdc:	01 96       	adiw	r24, 0x01	; 1
    6cde:	11 f0       	breq	.+4      	; 0x6ce4 <fgetc+0x5a>
    6ce0:	80 e2       	ldi	r24, 0x20	; 32
    6ce2:	01 c0       	rjmp	.+2      	; 0x6ce6 <fgetc+0x5c>
    6ce4:	80 e1       	ldi	r24, 0x10	; 16
    6ce6:	82 2b       	or	r24, r18
    6ce8:	8b 83       	std	Y+3, r24	; 0x03
    6cea:	08 c0       	rjmp	.+16     	; 0x6cfc <fgetc+0x72>
    6cec:	2e 81       	ldd	r18, Y+6	; 0x06
    6cee:	3f 81       	ldd	r19, Y+7	; 0x07
    6cf0:	2f 5f       	subi	r18, 0xFF	; 255
    6cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    6cf4:	2e 83       	std	Y+6, r18	; 0x06
    6cf6:	3f 83       	std	Y+7, r19	; 0x07
    6cf8:	99 27       	eor	r25, r25
    6cfa:	02 c0       	rjmp	.+4      	; 0x6d00 <fgetc+0x76>
    6cfc:	8f ef       	ldi	r24, 0xFF	; 255
    6cfe:	9f ef       	ldi	r25, 0xFF	; 255
    6d00:	df 91       	pop	r29
    6d02:	cf 91       	pop	r28
    6d04:	08 95       	ret

00006d06 <fputc>:
    6d06:	0f 93       	push	r16
    6d08:	1f 93       	push	r17
    6d0a:	cf 93       	push	r28
    6d0c:	df 93       	push	r29
    6d0e:	fb 01       	movw	r30, r22
    6d10:	23 81       	ldd	r18, Z+3	; 0x03
    6d12:	21 fd       	sbrc	r18, 1
    6d14:	03 c0       	rjmp	.+6      	; 0x6d1c <fputc+0x16>
    6d16:	8f ef       	ldi	r24, 0xFF	; 255
    6d18:	9f ef       	ldi	r25, 0xFF	; 255
    6d1a:	2c c0       	rjmp	.+88     	; 0x6d74 <fputc+0x6e>
    6d1c:	22 ff       	sbrs	r18, 2
    6d1e:	16 c0       	rjmp	.+44     	; 0x6d4c <fputc+0x46>
    6d20:	46 81       	ldd	r20, Z+6	; 0x06
    6d22:	57 81       	ldd	r21, Z+7	; 0x07
    6d24:	24 81       	ldd	r18, Z+4	; 0x04
    6d26:	35 81       	ldd	r19, Z+5	; 0x05
    6d28:	42 17       	cp	r20, r18
    6d2a:	53 07       	cpc	r21, r19
    6d2c:	44 f4       	brge	.+16     	; 0x6d3e <fputc+0x38>
    6d2e:	a0 81       	ld	r26, Z
    6d30:	b1 81       	ldd	r27, Z+1	; 0x01
    6d32:	9d 01       	movw	r18, r26
    6d34:	2f 5f       	subi	r18, 0xFF	; 255
    6d36:	3f 4f       	sbci	r19, 0xFF	; 255
    6d38:	20 83       	st	Z, r18
    6d3a:	31 83       	std	Z+1, r19	; 0x01
    6d3c:	8c 93       	st	X, r24
    6d3e:	26 81       	ldd	r18, Z+6	; 0x06
    6d40:	37 81       	ldd	r19, Z+7	; 0x07
    6d42:	2f 5f       	subi	r18, 0xFF	; 255
    6d44:	3f 4f       	sbci	r19, 0xFF	; 255
    6d46:	26 83       	std	Z+6, r18	; 0x06
    6d48:	37 83       	std	Z+7, r19	; 0x07
    6d4a:	14 c0       	rjmp	.+40     	; 0x6d74 <fputc+0x6e>
    6d4c:	8b 01       	movw	r16, r22
    6d4e:	ec 01       	movw	r28, r24
    6d50:	fb 01       	movw	r30, r22
    6d52:	00 84       	ldd	r0, Z+8	; 0x08
    6d54:	f1 85       	ldd	r31, Z+9	; 0x09
    6d56:	e0 2d       	mov	r30, r0
    6d58:	19 95       	eicall
    6d5a:	89 2b       	or	r24, r25
    6d5c:	e1 f6       	brne	.-72     	; 0x6d16 <fputc+0x10>
    6d5e:	d8 01       	movw	r26, r16
    6d60:	16 96       	adiw	r26, 0x06	; 6
    6d62:	8d 91       	ld	r24, X+
    6d64:	9c 91       	ld	r25, X
    6d66:	17 97       	sbiw	r26, 0x07	; 7
    6d68:	01 96       	adiw	r24, 0x01	; 1
    6d6a:	16 96       	adiw	r26, 0x06	; 6
    6d6c:	8d 93       	st	X+, r24
    6d6e:	9c 93       	st	X, r25
    6d70:	17 97       	sbiw	r26, 0x07	; 7
    6d72:	ce 01       	movw	r24, r28
    6d74:	df 91       	pop	r29
    6d76:	cf 91       	pop	r28
    6d78:	1f 91       	pop	r17
    6d7a:	0f 91       	pop	r16
    6d7c:	08 95       	ret

00006d7e <ungetc>:
    6d7e:	fb 01       	movw	r30, r22
    6d80:	23 81       	ldd	r18, Z+3	; 0x03
    6d82:	20 ff       	sbrs	r18, 0
    6d84:	12 c0       	rjmp	.+36     	; 0x6daa <ungetc+0x2c>
    6d86:	26 fd       	sbrc	r18, 6
    6d88:	10 c0       	rjmp	.+32     	; 0x6daa <ungetc+0x2c>
    6d8a:	8f 3f       	cpi	r24, 0xFF	; 255
    6d8c:	3f ef       	ldi	r19, 0xFF	; 255
    6d8e:	93 07       	cpc	r25, r19
    6d90:	61 f0       	breq	.+24     	; 0x6daa <ungetc+0x2c>
    6d92:	82 83       	std	Z+2, r24	; 0x02
    6d94:	2f 7d       	andi	r18, 0xDF	; 223
    6d96:	20 64       	ori	r18, 0x40	; 64
    6d98:	23 83       	std	Z+3, r18	; 0x03
    6d9a:	26 81       	ldd	r18, Z+6	; 0x06
    6d9c:	37 81       	ldd	r19, Z+7	; 0x07
    6d9e:	21 50       	subi	r18, 0x01	; 1
    6da0:	31 09       	sbc	r19, r1
    6da2:	26 83       	std	Z+6, r18	; 0x06
    6da4:	37 83       	std	Z+7, r19	; 0x07
    6da6:	99 27       	eor	r25, r25
    6da8:	08 95       	ret
    6daa:	8f ef       	ldi	r24, 0xFF	; 255
    6dac:	9f ef       	ldi	r25, 0xFF	; 255
    6dae:	08 95       	ret

00006db0 <__ultoa_invert>:
    6db0:	fa 01       	movw	r30, r20
    6db2:	aa 27       	eor	r26, r26
    6db4:	28 30       	cpi	r18, 0x08	; 8
    6db6:	51 f1       	breq	.+84     	; 0x6e0c <__ultoa_invert+0x5c>
    6db8:	20 31       	cpi	r18, 0x10	; 16
    6dba:	81 f1       	breq	.+96     	; 0x6e1c <__ultoa_invert+0x6c>
    6dbc:	e8 94       	clt
    6dbe:	6f 93       	push	r22
    6dc0:	6e 7f       	andi	r22, 0xFE	; 254
    6dc2:	6e 5f       	subi	r22, 0xFE	; 254
    6dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    6dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    6dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    6dca:	af 4f       	sbci	r26, 0xFF	; 255
    6dcc:	b1 e0       	ldi	r27, 0x01	; 1
    6dce:	3e d0       	rcall	.+124    	; 0x6e4c <__ultoa_invert+0x9c>
    6dd0:	b4 e0       	ldi	r27, 0x04	; 4
    6dd2:	3c d0       	rcall	.+120    	; 0x6e4c <__ultoa_invert+0x9c>
    6dd4:	67 0f       	add	r22, r23
    6dd6:	78 1f       	adc	r23, r24
    6dd8:	89 1f       	adc	r24, r25
    6dda:	9a 1f       	adc	r25, r26
    6ddc:	a1 1d       	adc	r26, r1
    6dde:	68 0f       	add	r22, r24
    6de0:	79 1f       	adc	r23, r25
    6de2:	8a 1f       	adc	r24, r26
    6de4:	91 1d       	adc	r25, r1
    6de6:	a1 1d       	adc	r26, r1
    6de8:	6a 0f       	add	r22, r26
    6dea:	71 1d       	adc	r23, r1
    6dec:	81 1d       	adc	r24, r1
    6dee:	91 1d       	adc	r25, r1
    6df0:	a1 1d       	adc	r26, r1
    6df2:	20 d0       	rcall	.+64     	; 0x6e34 <__ultoa_invert+0x84>
    6df4:	09 f4       	brne	.+2      	; 0x6df8 <__ultoa_invert+0x48>
    6df6:	68 94       	set
    6df8:	3f 91       	pop	r19
    6dfa:	2a e0       	ldi	r18, 0x0A	; 10
    6dfc:	26 9f       	mul	r18, r22
    6dfe:	11 24       	eor	r1, r1
    6e00:	30 19       	sub	r19, r0
    6e02:	30 5d       	subi	r19, 0xD0	; 208
    6e04:	31 93       	st	Z+, r19
    6e06:	de f6       	brtc	.-74     	; 0x6dbe <__ultoa_invert+0xe>
    6e08:	cf 01       	movw	r24, r30
    6e0a:	08 95       	ret
    6e0c:	46 2f       	mov	r20, r22
    6e0e:	47 70       	andi	r20, 0x07	; 7
    6e10:	40 5d       	subi	r20, 0xD0	; 208
    6e12:	41 93       	st	Z+, r20
    6e14:	b3 e0       	ldi	r27, 0x03	; 3
    6e16:	0f d0       	rcall	.+30     	; 0x6e36 <__ultoa_invert+0x86>
    6e18:	c9 f7       	brne	.-14     	; 0x6e0c <__ultoa_invert+0x5c>
    6e1a:	f6 cf       	rjmp	.-20     	; 0x6e08 <__ultoa_invert+0x58>
    6e1c:	46 2f       	mov	r20, r22
    6e1e:	4f 70       	andi	r20, 0x0F	; 15
    6e20:	40 5d       	subi	r20, 0xD0	; 208
    6e22:	4a 33       	cpi	r20, 0x3A	; 58
    6e24:	18 f0       	brcs	.+6      	; 0x6e2c <__ultoa_invert+0x7c>
    6e26:	49 5d       	subi	r20, 0xD9	; 217
    6e28:	31 fd       	sbrc	r19, 1
    6e2a:	40 52       	subi	r20, 0x20	; 32
    6e2c:	41 93       	st	Z+, r20
    6e2e:	02 d0       	rcall	.+4      	; 0x6e34 <__ultoa_invert+0x84>
    6e30:	a9 f7       	brne	.-22     	; 0x6e1c <__ultoa_invert+0x6c>
    6e32:	ea cf       	rjmp	.-44     	; 0x6e08 <__ultoa_invert+0x58>
    6e34:	b4 e0       	ldi	r27, 0x04	; 4
    6e36:	a6 95       	lsr	r26
    6e38:	97 95       	ror	r25
    6e3a:	87 95       	ror	r24
    6e3c:	77 95       	ror	r23
    6e3e:	67 95       	ror	r22
    6e40:	ba 95       	dec	r27
    6e42:	c9 f7       	brne	.-14     	; 0x6e36 <__ultoa_invert+0x86>
    6e44:	00 97       	sbiw	r24, 0x00	; 0
    6e46:	61 05       	cpc	r22, r1
    6e48:	71 05       	cpc	r23, r1
    6e4a:	08 95       	ret
    6e4c:	9b 01       	movw	r18, r22
    6e4e:	ac 01       	movw	r20, r24
    6e50:	0a 2e       	mov	r0, r26
    6e52:	06 94       	lsr	r0
    6e54:	57 95       	ror	r21
    6e56:	47 95       	ror	r20
    6e58:	37 95       	ror	r19
    6e5a:	27 95       	ror	r18
    6e5c:	ba 95       	dec	r27
    6e5e:	c9 f7       	brne	.-14     	; 0x6e52 <__ultoa_invert+0xa2>
    6e60:	62 0f       	add	r22, r18
    6e62:	73 1f       	adc	r23, r19
    6e64:	84 1f       	adc	r24, r20
    6e66:	95 1f       	adc	r25, r21
    6e68:	a0 1d       	adc	r26, r0
    6e6a:	08 95       	ret

00006e6c <__ctype_isfalse>:
    6e6c:	99 27       	eor	r25, r25
    6e6e:	88 27       	eor	r24, r24

00006e70 <__ctype_istrue>:
    6e70:	08 95       	ret

00006e72 <_exit>:
    6e72:	f8 94       	cli

00006e74 <__stop_program>:
    6e74:	ff cf       	rjmp	.-2      	; 0x6e74 <__stop_program>
