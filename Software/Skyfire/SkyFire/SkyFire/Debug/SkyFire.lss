
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00802000  00006782  00006816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000175  008020a2  008020a2  000068b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000068b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007d0  00000000  00000000  00006958  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a5e4  00000000  00000000  00007128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006775  00000000  00000000  0002170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b41b  00000000  00000000  00027e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027f4  00000000  00000000  0003329c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003f56d  00000000  00000000  00035a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000086fb  00000000  00000000  00074ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000778  00000000  00000000  0007d6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ef57  00000000  00000000  0007de70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__vector_13>
      38:	f2 c5       	rjmp	.+3044   	; 0xc1e <__vector_14>
      3a:	00 00       	nop
      3c:	28 c6       	rjmp	.+3152   	; 0xc8e <__vector_15>
      3e:	00 00       	nop
      40:	5e c6       	rjmp	.+3260   	; 0xcfe <__vector_16>
      42:	00 00       	nop
      44:	94 c6       	rjmp	.+3368   	; 0xd6e <__vector_17>
      46:	00 00       	nop
      48:	ca c6       	rjmp	.+3476   	; 0xdde <__vector_18>
      4a:	00 00       	nop
      4c:	00 c7       	rjmp	.+3584   	; 0xe4e <__vector_19>
      4e:	00 00       	nop
      50:	36 c7       	rjmp	.+3692   	; 0xebe <__vector_20>
      52:	00 00       	nop
      54:	6c c7       	rjmp	.+3800   	; 0xf2e <__vector_21>
      56:	00 00       	nop
      58:	a2 c7       	rjmp	.+3908   	; 0xf9e <__vector_22>
      5a:	00 00       	nop
      5c:	d8 c7       	rjmp	.+4016   	; 0x100e <__vector_23>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	2b c2       	rjmp	.+1110   	; 0x4e8 <__vector_36>
      92:	00 00       	nop
      94:	6f c2       	rjmp	.+1246   	; 0x574 <__vector_37>
      96:	00 00       	nop
      98:	b3 c2       	rjmp	.+1382   	; 0x600 <__vector_38>
      9a:	00 00       	nop
      9c:	cc c4       	rjmp	.+2456   	; 0xa36 <__vector_39>
      9e:	00 00       	nop
      a0:	07 c5       	rjmp	.+2574   	; 0xab0 <__vector_40>
      a2:	00 00       	nop
      a4:	42 c5       	rjmp	.+2692   	; 0xb2a <__vector_41>
      a6:	00 00       	nop
      a8:	7d c5       	rjmp	.+2810   	; 0xba4 <__vector_42>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__vector_46>
      bc:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <__vector_47>
      c0:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_48>
      c4:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_49>
      c8:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_50>
      cc:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_51>
      d0:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_52>
      d4:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__vector_53>
      d8:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__vector_54>
      dc:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_55>
      e0:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__vector_56>
      e4:	0b c1       	rjmp	.+534    	; 0x2fc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 79 24 	jmp	0x48f2	; 0x48f2 <__vector_58>
      ec:	07 c1       	rjmp	.+526    	; 0x2fc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	05 c1       	rjmp	.+522    	; 0x2fc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	03 c1       	rjmp	.+518    	; 0x2fc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	01 c1       	rjmp	.+514    	; 0x2fc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ff c0       	rjmp	.+510    	; 0x2fc <__bad_interrupt>
      fe:	00 00       	nop
     100:	fd c0       	rjmp	.+506    	; 0x2fc <__bad_interrupt>
     102:	00 00       	nop
     104:	fb c0       	rjmp	.+502    	; 0x2fc <__bad_interrupt>
     106:	00 00       	nop
     108:	f9 c0       	rjmp	.+498    	; 0x2fc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f7 c0       	rjmp	.+494    	; 0x2fc <__bad_interrupt>
     10e:	00 00       	nop
     110:	21 c1       	rjmp	.+578    	; 0x354 <__vector_68>
     112:	00 00       	nop
     114:	65 c1       	rjmp	.+714    	; 0x3e0 <__vector_69>
     116:	00 00       	nop
     118:	a9 c1       	rjmp	.+850    	; 0x46c <__vector_70>
     11a:	00 00       	nop
     11c:	98 c3       	rjmp	.+1840   	; 0x84e <__vector_71>
     11e:	00 00       	nop
     120:	d3 c3       	rjmp	.+1958   	; 0x8c8 <__vector_72>
     122:	00 00       	nop
     124:	0e c4       	rjmp	.+2076   	; 0x942 <__vector_73>
     126:	00 00       	nop
     128:	49 c4       	rjmp	.+2194   	; 0x9bc <__vector_74>
     12a:	00 00       	nop
     12c:	e7 c0       	rjmp	.+462    	; 0x2fc <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__vector_76>
     134:	a4 c7       	rjmp	.+3912   	; 0x107e <__vector_77>
     136:	00 00       	nop
     138:	da c7       	rjmp	.+4020   	; 0x10ee <__vector_78>
     13a:	00 00       	nop
     13c:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_79>
     140:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_80>
     144:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__vector_81>
     148:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_82>
     14c:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__vector_83>
     150:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_84>
     154:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__vector_85>
     158:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_86>
     15c:	cf c0       	rjmp	.+414    	; 0x2fc <__bad_interrupt>
     15e:	00 00       	nop
     160:	cd c0       	rjmp	.+410    	; 0x2fc <__bad_interrupt>
     162:	00 00       	nop
     164:	cb c0       	rjmp	.+406    	; 0x2fc <__bad_interrupt>
     166:	00 00       	nop
     168:	c9 c0       	rjmp	.+402    	; 0x2fc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <__vector_91>
     170:	c5 c0       	rjmp	.+394    	; 0x2fc <__bad_interrupt>
     172:	00 00       	nop
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__bad_interrupt>
     176:	00 00       	nop
     178:	c1 c0       	rjmp	.+386    	; 0x2fc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bf c0       	rjmp	.+382    	; 0x2fc <__bad_interrupt>
     17e:	00 00       	nop
     180:	bd c0       	rjmp	.+378    	; 0x2fc <__bad_interrupt>
     182:	00 00       	nop
     184:	bb c0       	rjmp	.+374    	; 0x2fc <__bad_interrupt>
     186:	00 00       	nop
     188:	b9 c0       	rjmp	.+370    	; 0x2fc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b7 c0       	rjmp	.+366    	; 0x2fc <__bad_interrupt>
     18e:	00 00       	nop
     190:	b5 c0       	rjmp	.+362    	; 0x2fc <__bad_interrupt>
     192:	00 00       	nop
     194:	b3 c0       	rjmp	.+358    	; 0x2fc <__bad_interrupt>
     196:	00 00       	nop
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	af c0       	rjmp	.+350    	; 0x2fc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ad c0       	rjmp	.+346    	; 0x2fc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ab c0       	rjmp	.+342    	; 0x2fc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a9 c0       	rjmp	.+338    	; 0x2fc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__vector_107>
     1b0:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_108>
     1b4:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__vector_109>
     1b8:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__vector_110>
     1bc:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__vector_111>
     1c0:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__vector_112>
     1c4:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__vector_113>
     1c8:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__vector_114>
     1cc:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__vector_115>
     1d0:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__vector_116>
     1d4:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_117>
     1d8:	91 c0       	rjmp	.+290    	; 0x2fc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8f c0       	rjmp	.+286    	; 0x2fc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8d c0       	rjmp	.+282    	; 0x2fc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8b c0       	rjmp	.+278    	; 0x2fc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	89 c0       	rjmp	.+274    	; 0x2fc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	87 c0       	rjmp	.+270    	; 0x2fc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	83 c0       	rjmp	.+262    	; 0x2fc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	81 c0       	rjmp	.+258    	; 0x2fc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	6f 21       	and	r22, r15
     1fe:	6d 21       	and	r22, r13
     200:	6b 21       	and	r22, r11
     202:	73 21       	and	r23, r3
     204:	69 21       	and	r22, r9
     206:	67 21       	and	r22, r7
     208:	74 21       	and	r23, r4
     20a:	74 21       	and	r23, r4
     20c:	74 21       	and	r23, r4
     20e:	74 21       	and	r23, r4
     210:	74 21       	and	r23, r4
     212:	74 21       	and	r23, r4
     214:	74 21       	and	r23, r4
     216:	74 21       	and	r23, r4
     218:	74 21       	and	r23, r4
     21a:	74 21       	and	r23, r4
     21c:	74 21       	and	r23, r4
     21e:	74 21       	and	r23, r4
     220:	71 21       	and	r23, r1
     222:	07 63       	ori	r16, 0x37	; 55
     224:	42 36       	cpi	r20, 0x62	; 98
     226:	b7 9b       	sbis	0x16, 7	; 22
     228:	d8 a7       	std	Y+40, r29	; 0x28
     22a:	1a 39       	cpi	r17, 0x9A	; 154
     22c:	68 56       	subi	r22, 0x68	; 104
     22e:	18 ae       	std	Y+56, r1	; 0x38
     230:	ba ab       	std	Y+50, r27	; 0x32
     232:	55 8c       	ldd	r5, Z+29	; 0x1d
     234:	1d 3c       	cpi	r17, 0xCD	; 205
     236:	b7 cc       	rjmp	.-1682   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     238:	57 63       	ori	r21, 0x37	; 55
     23a:	bd 6d       	ori	r27, 0xDD	; 221
     23c:	ed fd       	.word	0xfded	; ????
     23e:	75 3e       	cpi	r23, 0xE5	; 229
     240:	f6 17       	cp	r31, r22
     242:	72 31       	cpi	r23, 0x12	; 18
     244:	bf 00       	.word	0x00bf	; ????
     246:	00 00       	nop
     248:	80 3f       	cpi	r24, 0xF0	; 240
     24a:	08 00       	.word	0x0008	; ????
     24c:	00 00       	nop
     24e:	be 92       	st	-X, r11
     250:	24 49       	sbci	r18, 0x94	; 148
     252:	12 3e       	cpi	r17, 0xE2	; 226
     254:	ab aa       	std	Y+51, r10	; 0x33
     256:	aa 2a       	or	r10, r26
     258:	be cd       	rjmp	.-1156   	; 0xfffffdd6 <__eeprom_end+0xff7efdd6>
     25a:	cc cc       	rjmp	.-1640   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
     25c:	4c 3e       	cpi	r20, 0xEC	; 236
     25e:	00 00       	nop
     260:	00 80       	ld	r0, Z
     262:	be ab       	std	Y+54, r27	; 0x36
     264:	aa aa       	std	Y+50, r10	; 0x32
     266:	aa 3e       	cpi	r26, 0xEA	; 234
     268:	00 00       	nop
     26a:	00 00       	nop
     26c:	bf 00       	.word	0x00bf	; ????
     26e:	00 00       	nop
     270:	80 3f       	cpi	r24, 0xF0	; 240
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 08       	sbc	r0, r0
     278:	41 78       	andi	r20, 0x81	; 129
     27a:	d3 bb       	out	0x13, r29	; 19
     27c:	43 87       	std	Z+11, r20	; 0x0b
     27e:	d1 13       	cpse	r29, r17
     280:	3d 19       	sub	r19, r13
     282:	0e 3c       	cpi	r16, 0xCE	; 206
     284:	c3 bd       	out	0x23, r28	; 35
     286:	42 82       	std	Z+2, r4	; 0x02
     288:	ad 2b       	or	r26, r29
     28a:	3e 68       	ori	r19, 0x8E	; 142
     28c:	ec 82       	std	Y+4, r14	; 0x04
     28e:	76 be       	out	0x36, r7	; 54
     290:	d9 8f       	std	Y+25, r29	; 0x19
     292:	e1 a9       	ldd	r30, Z+49	; 0x31
     294:	3e 4c       	sbci	r19, 0xCE	; 206
     296:	80 ef       	ldi	r24, 0xF0	; 240
     298:	ff be       	out	0x3f, r15	; 63
     29a:	01 c4       	rjmp	.+2050   	; 0xa9e <__vector_39+0x68>
     29c:	ff 7f       	andi	r31, 0xFF	; 255
     29e:	3f 00       	.word	0x003f	; ????
     2a0:	00 00       	nop
	...

000002a4 <__trampolines_end>:
     2a4:	63 64       	ori	r22, 0x43	; 67
     2a6:	69 6e       	ori	r22, 0xE9	; 233
     2a8:	6f 70       	andi	r22, 0x0F	; 15
     2aa:	73 75       	andi	r23, 0x53	; 83
     2ac:	78 58       	subi	r23, 0x88	; 136
     2ae:	5b 00       	.word	0x005b	; ????

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df e3       	ldi	r29, 0x3F	; 63
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60
     2c0:	18 be       	out	0x38, r1	; 56
     2c2:	19 be       	out	0x39, r1	; 57
     2c4:	1a be       	out	0x3a, r1	; 58
     2c6:	1b be       	out	0x3b, r1	; 59

000002c8 <__do_copy_data>:
     2c8:	10 e2       	ldi	r17, 0x20	; 32
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e2       	ldi	r27, 0x20	; 32
     2ce:	e2 e8       	ldi	r30, 0x82	; 130
     2d0:	f7 e6       	ldi	r31, 0x67	; 103
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0b bf       	out	0x3b, r16	; 59
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x14>
     2d8:	07 90       	elpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	a2 3a       	cpi	r26, 0xA2	; 162
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0x10>
     2e2:	1b be       	out	0x3b, r1	; 59

000002e4 <__do_clear_bss>:
     2e4:	22 e2       	ldi	r18, 0x22	; 34
     2e6:	a2 ea       	ldi	r26, 0xA2	; 162
     2e8:	b0 e2       	ldi	r27, 0x20	; 32
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	a7 31       	cpi	r26, 0x17	; 23
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 75 21 	call	0x42ea	; 0x42ea <main>
     2f8:	0c 94 bf 33 	jmp	0x677e	; 0x677e <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     308:	80 91 64 21 	lds	r24, 0x2164	; 0x802164 <stdio_base>
     30c:	90 91 65 21 	lds	r25, 0x2165	; 0x802165 <stdio_base+0x1>
     310:	e0 91 60 21 	lds	r30, 0x2160	; 0x802160 <ptr_get>
     314:	f0 91 61 21 	lds	r31, 0x2161	; 0x802161 <ptr_get+0x1>
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	19 95       	eicall
	return c;
     320:	89 81       	ldd	r24, Y+1	; 0x01
}
     322:	08 2e       	mov	r0, r24
     324:	00 0c       	add	r0, r0
     326:	99 0b       	sbc	r25, r25
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     330:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     332:	80 91 64 21 	lds	r24, 0x2164	; 0x802164 <stdio_base>
     336:	90 91 65 21 	lds	r25, 0x2165	; 0x802165 <stdio_base+0x1>
     33a:	e0 91 62 21 	lds	r30, 0x2162	; 0x802162 <ptr_put>
     33e:	f0 91 63 21 	lds	r31, 0x2163	; 0x802163 <ptr_put+0x1>
     342:	19 95       	eicall
     344:	99 23       	and	r25, r25
     346:	1c f0       	brlt	.+6      	; 0x34e <_write+0x1e>
		return -1;
	}
	return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     352:	08 95       	ret

00000354 <__vector_68>:
		cpu_irq_restore(iflags);
		return;
	}

	cpu_irq_restore(iflags);
}
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	08 b6       	in	r0, 0x38	; 56
     360:	0f 92       	push	r0
     362:	18 be       	out	0x38, r1	; 56
     364:	09 b6       	in	r0, 0x39	; 57
     366:	0f 92       	push	r0
     368:	19 be       	out	0x39, r1	; 57
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	1b be       	out	0x3b, r1	; 59
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
     388:	e0 91 a6 20 	lds	r30, 0x20A6	; 0x8020a6 <ac_aca_callback>
     38c:	f0 91 a7 20 	lds	r31, 0x20A7	; 0x8020a7 <ac_aca_callback+0x1>
     390:	30 97       	sbiw	r30, 0x00	; 0
     392:	79 f0       	breq	.+30     	; 0x3b2 <__vector_68+0x5e>
     394:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <__vector_68+0x54>
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	19 95       	eicall
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__vector_68+0x5e>
     3a8:	40 e8       	ldi	r20, 0x80	; 128
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	19 95       	eicall
     3b2:	ff 91       	pop	r31
     3b4:	ef 91       	pop	r30
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	7f 91       	pop	r23
     3c0:	6f 91       	pop	r22
     3c2:	5f 91       	pop	r21
     3c4:	4f 91       	pop	r20
     3c6:	3f 91       	pop	r19
     3c8:	2f 91       	pop	r18
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	09 be       	out	0x39, r0	; 57
     3d2:	0f 90       	pop	r0
     3d4:	08 be       	out	0x38, r0	; 56
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_69>:
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	08 b6       	in	r0, 0x38	; 56
     3ec:	0f 92       	push	r0
     3ee:	18 be       	out	0x38, r1	; 56
     3f0:	09 b6       	in	r0, 0x39	; 57
     3f2:	0f 92       	push	r0
     3f4:	19 be       	out	0x39, r1	; 57
     3f6:	0b b6       	in	r0, 0x3b	; 59
     3f8:	0f 92       	push	r0
     3fa:	1b be       	out	0x3b, r1	; 59
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
     414:	e0 91 a6 20 	lds	r30, 0x20A6	; 0x8020a6 <ac_aca_callback>
     418:	f0 91 a7 20 	lds	r31, 0x20A7	; 0x8020a7 <ac_aca_callback+0x1>
     41c:	30 97       	sbiw	r30, 0x00	; 0
     41e:	79 f0       	breq	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     420:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     424:	85 ff       	sbrs	r24, 5
     426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 e8       	ldi	r24, 0x80	; 128
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	19 95       	eicall
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e8       	ldi	r24, 0x80	; 128
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	19 95       	eicall
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	09 be       	out	0x39, r0	; 57
     45e:	0f 90       	pop	r0
     460:	08 be       	out	0x38, r0	; 56
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_70>:
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	08 b6       	in	r0, 0x38	; 56
     478:	0f 92       	push	r0
     47a:	18 be       	out	0x38, r1	; 56
     47c:	09 b6       	in	r0, 0x39	; 57
     47e:	0f 92       	push	r0
     480:	19 be       	out	0x39, r1	; 57
     482:	0b b6       	in	r0, 0x3b	; 59
     484:	0f 92       	push	r0
     486:	1b be       	out	0x3b, r1	; 59
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
     4a0:	e0 91 a6 20 	lds	r30, 0x20A6	; 0x8020a6 <ac_aca_callback>
     4a4:	f0 91 a7 20 	lds	r31, 0x20A7	; 0x8020a7 <ac_aca_callback+0x1>
     4a8:	30 97       	sbiw	r30, 0x00	; 0
     4aa:	39 f0       	breq	.+14     	; 0x4ba <__vector_70+0x4e>
     4ac:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     4b0:	40 7c       	andi	r20, 0xC0	; 192
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	80 e8       	ldi	r24, 0x80	; 128
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	19 95       	eicall
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0b be       	out	0x3b, r0	; 59
     4d6:	0f 90       	pop	r0
     4d8:	09 be       	out	0x39, r0	; 57
     4da:	0f 90       	pop	r0
     4dc:	08 be       	out	0x38, r0	; 56
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_36>:
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	08 b6       	in	r0, 0x38	; 56
     4f4:	0f 92       	push	r0
     4f6:	18 be       	out	0x38, r1	; 56
     4f8:	09 b6       	in	r0, 0x39	; 57
     4fa:	0f 92       	push	r0
     4fc:	19 be       	out	0x39, r1	; 57
     4fe:	0b b6       	in	r0, 0x3b	; 59
     500:	0f 92       	push	r0
     502:	1b be       	out	0x3b, r1	; 59
     504:	2f 93       	push	r18
     506:	3f 93       	push	r19
     508:	4f 93       	push	r20
     50a:	5f 93       	push	r21
     50c:	6f 93       	push	r22
     50e:	7f 93       	push	r23
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	af 93       	push	r26
     516:	bf 93       	push	r27
     518:	ef 93       	push	r30
     51a:	ff 93       	push	r31
     51c:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <ac_acb_callback>
     520:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <ac_acb_callback+0x1>
     524:	30 97       	sbiw	r30, 0x00	; 0
     526:	79 f0       	breq	.+30     	; 0x546 <__vector_36+0x5e>
     528:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <__TEXT_REGION_LENGTH__+0x700397>
     52c:	84 ff       	sbrs	r24, 4
     52e:	06 c0       	rjmp	.+12     	; 0x53c <__vector_36+0x54>
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	80 e9       	ldi	r24, 0x90	; 144
     536:	93 e0       	ldi	r25, 0x03	; 3
     538:	19 95       	eicall
     53a:	05 c0       	rjmp	.+10     	; 0x546 <__vector_36+0x5e>
     53c:	40 e8       	ldi	r20, 0x80	; 128
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	80 e9       	ldi	r24, 0x90	; 144
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	19 95       	eicall
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0b be       	out	0x3b, r0	; 59
     562:	0f 90       	pop	r0
     564:	09 be       	out	0x39, r0	; 57
     566:	0f 90       	pop	r0
     568:	08 be       	out	0x38, r0	; 56
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_37>:
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	08 b6       	in	r0, 0x38	; 56
     580:	0f 92       	push	r0
     582:	18 be       	out	0x38, r1	; 56
     584:	09 b6       	in	r0, 0x39	; 57
     586:	0f 92       	push	r0
     588:	19 be       	out	0x39, r1	; 57
     58a:	0b b6       	in	r0, 0x3b	; 59
     58c:	0f 92       	push	r0
     58e:	1b be       	out	0x3b, r1	; 59
     590:	2f 93       	push	r18
     592:	3f 93       	push	r19
     594:	4f 93       	push	r20
     596:	5f 93       	push	r21
     598:	6f 93       	push	r22
     59a:	7f 93       	push	r23
     59c:	8f 93       	push	r24
     59e:	9f 93       	push	r25
     5a0:	af 93       	push	r26
     5a2:	bf 93       	push	r27
     5a4:	ef 93       	push	r30
     5a6:	ff 93       	push	r31
     5a8:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <ac_acb_callback>
     5ac:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <ac_acb_callback+0x1>
     5b0:	30 97       	sbiw	r30, 0x00	; 0
     5b2:	79 f0       	breq	.+30     	; 0x5d2 <__vector_37+0x5e>
     5b4:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <__TEXT_REGION_LENGTH__+0x700397>
     5b8:	85 ff       	sbrs	r24, 5
     5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <__vector_37+0x54>
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	80 e9       	ldi	r24, 0x90	; 144
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	19 95       	eicall
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__vector_37+0x5e>
     5c8:	40 e8       	ldi	r20, 0x80	; 128
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	80 e9       	ldi	r24, 0x90	; 144
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	19 95       	eicall
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	7f 91       	pop	r23
     5e0:	6f 91       	pop	r22
     5e2:	5f 91       	pop	r21
     5e4:	4f 91       	pop	r20
     5e6:	3f 91       	pop	r19
     5e8:	2f 91       	pop	r18
     5ea:	0f 90       	pop	r0
     5ec:	0b be       	out	0x3b, r0	; 59
     5ee:	0f 90       	pop	r0
     5f0:	09 be       	out	0x39, r0	; 57
     5f2:	0f 90       	pop	r0
     5f4:	08 be       	out	0x38, r0	; 56
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_38>:
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	08 b6       	in	r0, 0x38	; 56
     60c:	0f 92       	push	r0
     60e:	18 be       	out	0x38, r1	; 56
     610:	09 b6       	in	r0, 0x39	; 57
     612:	0f 92       	push	r0
     614:	19 be       	out	0x39, r1	; 57
     616:	0b b6       	in	r0, 0x3b	; 59
     618:	0f 92       	push	r0
     61a:	1b be       	out	0x3b, r1	; 59
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
     634:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <ac_acb_callback>
     638:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <ac_acb_callback+0x1>
     63c:	30 97       	sbiw	r30, 0x00	; 0
     63e:	39 f0       	breq	.+14     	; 0x64e <__vector_38+0x4e>
     640:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <__TEXT_REGION_LENGTH__+0x700397>
     644:	40 7c       	andi	r20, 0xC0	; 192
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	80 e9       	ldi	r24, 0x90	; 144
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	19 95       	eicall
     64e:	ff 91       	pop	r31
     650:	ef 91       	pop	r30
     652:	bf 91       	pop	r27
     654:	af 91       	pop	r26
     656:	9f 91       	pop	r25
     658:	8f 91       	pop	r24
     65a:	7f 91       	pop	r23
     65c:	6f 91       	pop	r22
     65e:	5f 91       	pop	r21
     660:	4f 91       	pop	r20
     662:	3f 91       	pop	r19
     664:	2f 91       	pop	r18
     666:	0f 90       	pop	r0
     668:	0b be       	out	0x3b, r0	; 59
     66a:	0f 90       	pop	r0
     66c:	09 be       	out	0x39, r0	; 57
     66e:	0f 90       	pop	r0
     670:	08 be       	out	0x38, r0	; 56
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	1f 90       	pop	r1
     67a:	18 95       	reti

0000067c <ac_write_config>:
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	1f 92       	push	r1
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	8c 01       	movw	r16, r24
     694:	c6 2e       	mov	r12, r22
     696:	7a 01       	movw	r14, r20
     698:	8f b7       	in	r24, 0x3f	; 63
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	f8 94       	cli
     69e:	d9 80       	ldd	r13, Y+1	; 0x01
     6a0:	00 38       	cpi	r16, 0x80	; 128
     6a2:	23 e0       	ldi	r18, 0x03	; 3
     6a4:	12 07       	cpc	r17, r18
     6a6:	79 f4       	brne	.+30     	; 0x6c6 <ac_write_config+0x4a>
     6a8:	80 91 a5 20 	lds	r24, 0x20A5	; 0x8020a5 <ac_aca_opened>
     6ac:	81 11       	cpse	r24, r1
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <ac_write_config+0x3c>
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <sysclk_enable_module>
     6b8:	80 91 a5 20 	lds	r24, 0x20A5	; 0x8020a5 <ac_aca_opened>
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	80 93 a5 20 	sts	0x20A5, r24	; 0x8020a5 <ac_aca_opened>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	15 c0       	rjmp	.+42     	; 0x6f0 <ac_write_config+0x74>
     6c6:	00 39       	cpi	r16, 0x90	; 144
     6c8:	e3 e0       	ldi	r30, 0x03	; 3
     6ca:	1e 07       	cpc	r17, r30
     6cc:	79 f4       	brne	.+30     	; 0x6ec <ac_write_config+0x70>
     6ce:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <__data_end>
     6d2:	81 11       	cpse	r24, r1
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <ac_write_config+0x62>
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <sysclk_enable_module>
     6de:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <__data_end>
     6e2:	8f 5f       	subi	r24, 0xFF	; 255
     6e4:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <__data_end>
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <ac_write_config+0x74>
     6ec:	df be       	out	0x3f, r13	; 63
     6ee:	3a c0       	rjmp	.+116    	; 0x764 <ac_write_config+0xe8>
     6f0:	f7 01       	movw	r30, r14
     6f2:	92 81       	ldd	r25, Z+2	; 0x02
     6f4:	f8 01       	movw	r30, r16
     6f6:	95 83       	std	Z+5, r25	; 0x05
     6f8:	f7 01       	movw	r30, r14
     6fa:	93 81       	ldd	r25, Z+3	; 0x03
     6fc:	f8 01       	movw	r30, r16
     6fe:	96 83       	std	Z+6, r25	; 0x06
     700:	c1 10       	cpse	r12, r1
     702:	09 c0       	rjmp	.+18     	; 0x716 <ac_write_config+0x9a>
     704:	f7 01       	movw	r30, r14
     706:	91 81       	ldd	r25, Z+1	; 0x01
     708:	f8 01       	movw	r30, r16
     70a:	92 83       	std	Z+2, r25	; 0x02
     70c:	f7 01       	movw	r30, r14
     70e:	90 81       	ld	r25, Z
     710:	f8 01       	movw	r30, r16
     712:	90 83       	st	Z, r25
     714:	08 c0       	rjmp	.+16     	; 0x726 <ac_write_config+0xaa>
     716:	f7 01       	movw	r30, r14
     718:	91 81       	ldd	r25, Z+1	; 0x01
     71a:	f8 01       	movw	r30, r16
     71c:	93 83       	std	Z+3, r25	; 0x03
     71e:	f7 01       	movw	r30, r14
     720:	90 81       	ld	r25, Z
     722:	f8 01       	movw	r30, r16
     724:	91 83       	std	Z+1, r25	; 0x01
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	61 f4       	brne	.+24     	; 0x742 <ac_write_config+0xc6>
     72a:	80 91 a5 20 	lds	r24, 0x20A5	; 0x8020a5 <ac_aca_opened>
     72e:	81 50       	subi	r24, 0x01	; 1
     730:	80 93 a5 20 	sts	0x20A5, r24	; 0x8020a5 <ac_aca_opened>
     734:	81 11       	cpse	r24, r1
     736:	15 c0       	rjmp	.+42     	; 0x762 <ac_write_config+0xe6>
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <sysclk_disable_module>
     740:	10 c0       	rjmp	.+32     	; 0x762 <ac_write_config+0xe6>
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	61 f4       	brne	.+24     	; 0x75e <ac_write_config+0xe2>
     746:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <__data_end>
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <__data_end>
     750:	81 11       	cpse	r24, r1
     752:	07 c0       	rjmp	.+14     	; 0x762 <ac_write_config+0xe6>
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <sysclk_disable_module>
     75c:	02 c0       	rjmp	.+4      	; 0x762 <ac_write_config+0xe6>
     75e:	df be       	out	0x3f, r13	; 63
     760:	01 c0       	rjmp	.+2      	; 0x764 <ac_write_config+0xe8>
     762:	df be       	out	0x3f, r13	; 63
     764:	0f 90       	pop	r0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	08 95       	ret

00000778 <ac_enable>:
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	1f 92       	push	r1
     786:	1f 92       	push	r1
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	8c 01       	movw	r16, r24
     78e:	e6 2e       	mov	r14, r22
     790:	8f b7       	in	r24, 0x3f	; 63
     792:	8a 83       	std	Y+2, r24	; 0x02
     794:	f8 94       	cli
     796:	fa 80       	ldd	r15, Y+2	; 0x02
     798:	00 38       	cpi	r16, 0x80	; 128
     79a:	23 e0       	ldi	r18, 0x03	; 3
     79c:	12 07       	cpc	r17, r18
     79e:	71 f4       	brne	.+28     	; 0x7bc <ac_enable+0x44>
     7a0:	80 91 a5 20 	lds	r24, 0x20A5	; 0x8020a5 <ac_aca_opened>
     7a4:	81 11       	cpse	r24, r1
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <ac_enable+0x38>
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <sysclk_enable_module>
     7b0:	80 91 a5 20 	lds	r24, 0x20A5	; 0x8020a5 <ac_aca_opened>
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	80 93 a5 20 	sts	0x20A5, r24	; 0x8020a5 <ac_aca_opened>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <ac_enable+0x6c>
     7bc:	00 39       	cpi	r16, 0x90	; 144
     7be:	e3 e0       	ldi	r30, 0x03	; 3
     7c0:	1e 07       	cpc	r17, r30
     7c2:	71 f4       	brne	.+28     	; 0x7e0 <ac_enable+0x68>
     7c4:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <__data_end>
     7c8:	81 11       	cpse	r24, r1
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <ac_enable+0x5c>
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <sysclk_enable_module>
     7d4:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <__data_end>
     7d8:	8f 5f       	subi	r24, 0xFF	; 255
     7da:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <__data_end>
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <ac_enable+0x6c>
     7e0:	ff be       	out	0x3f, r15	; 63
     7e2:	1b c0       	rjmp	.+54     	; 0x81a <ac_enable+0xa2>
     7e4:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <sleepmgr_locks+0x1>
     7e8:	8f 3f       	cpi	r24, 0xFF	; 255
     7ea:	09 f4       	brne	.+2      	; 0x7ee <ac_enable+0x76>
     7ec:	ff cf       	rjmp	.-2      	; 0x7ec <ac_enable+0x74>
     7ee:	8f b7       	in	r24, 0x3f	; 63
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	f8 94       	cli
     7f4:	99 81       	ldd	r25, Y+1	; 0x01
     7f6:	ea e5       	ldi	r30, 0x5A	; 90
     7f8:	f1 e2       	ldi	r31, 0x21	; 33
     7fa:	81 81       	ldd	r24, Z+1	; 0x01
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	81 83       	std	Z+1, r24	; 0x01
     800:	9f bf       	out	0x3f, r25	; 63
     802:	e1 10       	cpse	r14, r1
     804:	05 c0       	rjmp	.+10     	; 0x810 <ac_enable+0x98>
     806:	f8 01       	movw	r30, r16
     808:	80 81       	ld	r24, Z
     80a:	81 60       	ori	r24, 0x01	; 1
     80c:	80 83       	st	Z, r24
     80e:	04 c0       	rjmp	.+8      	; 0x818 <ac_enable+0xa0>
     810:	f8 01       	movw	r30, r16
     812:	81 81       	ldd	r24, Z+1	; 0x01
     814:	81 60       	ori	r24, 0x01	; 1
     816:	81 83       	std	Z+1, r24	; 0x01
     818:	ff be       	out	0x3f, r15	; 63
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	08 95       	ret

0000082c <ac_set_interrupt_callback>:
 * \param callback Reference to a callback function
 */
void ac_set_interrupt_callback(AC_t *ac, ac_callback_t callback)
{
#ifdef ACA
	if (ac == &ACA) {
     82c:	80 38       	cpi	r24, 0x80	; 128
     82e:	23 e0       	ldi	r18, 0x03	; 3
     830:	92 07       	cpc	r25, r18
     832:	29 f4       	brne	.+10     	; 0x83e <ac_set_interrupt_callback+0x12>
		ac_aca_callback = callback;
     834:	60 93 a6 20 	sts	0x20A6, r22	; 0x8020a6 <ac_aca_callback>
     838:	70 93 a7 20 	sts	0x20A7, r23	; 0x8020a7 <ac_aca_callback+0x1>
     83c:	08 95       	ret
	}
#endif
#ifdef ACB
	if (ac == &ACB) {
     83e:	80 39       	cpi	r24, 0x90	; 144
     840:	93 40       	sbci	r25, 0x03	; 3
     842:	21 f4       	brne	.+8      	; 0x84c <ac_set_interrupt_callback+0x20>
		ac_acb_callback = callback;
     844:	60 93 a3 20 	sts	0x20A3, r22	; 0x8020a3 <ac_acb_callback>
     848:	70 93 a4 20 	sts	0x20A4, r23	; 0x8020a4 <ac_acb_callback+0x1>
     84c:	08 95       	ret

0000084e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	08 b6       	in	r0, 0x38	; 56
     85a:	0f 92       	push	r0
     85c:	18 be       	out	0x38, r1	; 56
     85e:	09 b6       	in	r0, 0x39	; 57
     860:	0f 92       	push	r0
     862:	19 be       	out	0x39, r1	; 57
     864:	0b b6       	in	r0, 0x3b	; 59
     866:	0f 92       	push	r0
     868:	1b be       	out	0x3b, r1	; 59
     86a:	2f 93       	push	r18
     86c:	3f 93       	push	r19
     86e:	4f 93       	push	r20
     870:	5f 93       	push	r21
     872:	6f 93       	push	r22
     874:	7f 93       	push	r23
     876:	8f 93       	push	r24
     878:	9f 93       	push	r25
     87a:	af 93       	push	r26
     87c:	bf 93       	push	r27
     87e:	ef 93       	push	r30
     880:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     882:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     886:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     88a:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <adca_callback>
     88e:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <adca_callback+0x1>
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	19 95       	eicall
}
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	bf 91       	pop	r27
     8a0:	af 91       	pop	r26
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	7f 91       	pop	r23
     8a8:	6f 91       	pop	r22
     8aa:	5f 91       	pop	r21
     8ac:	4f 91       	pop	r20
     8ae:	3f 91       	pop	r19
     8b0:	2f 91       	pop	r18
     8b2:	0f 90       	pop	r0
     8b4:	0b be       	out	0x3b, r0	; 59
     8b6:	0f 90       	pop	r0
     8b8:	09 be       	out	0x39, r0	; 57
     8ba:	0f 90       	pop	r0
     8bc:	08 be       	out	0x38, r0	; 56
     8be:	0f 90       	pop	r0
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	0f 90       	pop	r0
     8c4:	1f 90       	pop	r1
     8c6:	18 95       	reti

000008c8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     8c8:	1f 92       	push	r1
     8ca:	0f 92       	push	r0
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	0f 92       	push	r0
     8d0:	11 24       	eor	r1, r1
     8d2:	08 b6       	in	r0, 0x38	; 56
     8d4:	0f 92       	push	r0
     8d6:	18 be       	out	0x38, r1	; 56
     8d8:	09 b6       	in	r0, 0x39	; 57
     8da:	0f 92       	push	r0
     8dc:	19 be       	out	0x39, r1	; 57
     8de:	0b b6       	in	r0, 0x3b	; 59
     8e0:	0f 92       	push	r0
     8e2:	1b be       	out	0x3b, r1	; 59
     8e4:	2f 93       	push	r18
     8e6:	3f 93       	push	r19
     8e8:	4f 93       	push	r20
     8ea:	5f 93       	push	r21
     8ec:	6f 93       	push	r22
     8ee:	7f 93       	push	r23
     8f0:	8f 93       	push	r24
     8f2:	9f 93       	push	r25
     8f4:	af 93       	push	r26
     8f6:	bf 93       	push	r27
     8f8:	ef 93       	push	r30
     8fa:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     8fc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     900:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     904:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <adca_callback>
     908:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <adca_callback+0x1>
     90c:	62 e0       	ldi	r22, 0x02	; 2
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	19 95       	eicall
}
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	bf 91       	pop	r27
     91a:	af 91       	pop	r26
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	7f 91       	pop	r23
     922:	6f 91       	pop	r22
     924:	5f 91       	pop	r21
     926:	4f 91       	pop	r20
     928:	3f 91       	pop	r19
     92a:	2f 91       	pop	r18
     92c:	0f 90       	pop	r0
     92e:	0b be       	out	0x3b, r0	; 59
     930:	0f 90       	pop	r0
     932:	09 be       	out	0x39, r0	; 57
     934:	0f 90       	pop	r0
     936:	08 be       	out	0x38, r0	; 56
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	0f 92       	push	r0
     94a:	11 24       	eor	r1, r1
     94c:	08 b6       	in	r0, 0x38	; 56
     94e:	0f 92       	push	r0
     950:	18 be       	out	0x38, r1	; 56
     952:	09 b6       	in	r0, 0x39	; 57
     954:	0f 92       	push	r0
     956:	19 be       	out	0x39, r1	; 57
     958:	0b b6       	in	r0, 0x3b	; 59
     95a:	0f 92       	push	r0
     95c:	1b be       	out	0x3b, r1	; 59
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     976:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     97a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     97e:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <adca_callback>
     982:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <adca_callback+0x1>
     986:	64 e0       	ldi	r22, 0x04	; 4
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	19 95       	eicall
}
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0b be       	out	0x3b, r0	; 59
     9aa:	0f 90       	pop	r0
     9ac:	09 be       	out	0x39, r0	; 57
     9ae:	0f 90       	pop	r0
     9b0:	08 be       	out	0x38, r0	; 56
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	08 b6       	in	r0, 0x38	; 56
     9c8:	0f 92       	push	r0
     9ca:	18 be       	out	0x38, r1	; 56
     9cc:	09 b6       	in	r0, 0x39	; 57
     9ce:	0f 92       	push	r0
     9d0:	19 be       	out	0x39, r1	; 57
     9d2:	0b b6       	in	r0, 0x3b	; 59
     9d4:	0f 92       	push	r0
     9d6:	1b be       	out	0x3b, r1	; 59
     9d8:	2f 93       	push	r18
     9da:	3f 93       	push	r19
     9dc:	4f 93       	push	r20
     9de:	5f 93       	push	r21
     9e0:	6f 93       	push	r22
     9e2:	7f 93       	push	r23
     9e4:	8f 93       	push	r24
     9e6:	9f 93       	push	r25
     9e8:	af 93       	push	r26
     9ea:	bf 93       	push	r27
     9ec:	ef 93       	push	r30
     9ee:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     9f0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     9f4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     9f8:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <adca_callback>
     9fc:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <adca_callback+0x1>
     a00:	68 e0       	ldi	r22, 0x08	; 8
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	19 95       	eicall
}
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	0f 90       	pop	r0
     a22:	0b be       	out	0x3b, r0	; 59
     a24:	0f 90       	pop	r0
     a26:	09 be       	out	0x39, r0	; 57
     a28:	0f 90       	pop	r0
     a2a:	08 be       	out	0x38, r0	; 56
     a2c:	0f 90       	pop	r0
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     a36:	1f 92       	push	r1
     a38:	0f 92       	push	r0
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	0f 92       	push	r0
     a3e:	11 24       	eor	r1, r1
     a40:	08 b6       	in	r0, 0x38	; 56
     a42:	0f 92       	push	r0
     a44:	18 be       	out	0x38, r1	; 56
     a46:	09 b6       	in	r0, 0x39	; 57
     a48:	0f 92       	push	r0
     a4a:	19 be       	out	0x39, r1	; 57
     a4c:	0b b6       	in	r0, 0x3b	; 59
     a4e:	0f 92       	push	r0
     a50:	1b be       	out	0x3b, r1	; 59
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     a6a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     a6e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     a72:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <adcb_callback>
     a76:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <adcb_callback+0x1>
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	19 95       	eicall
}
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	7f 91       	pop	r23
     a90:	6f 91       	pop	r22
     a92:	5f 91       	pop	r21
     a94:	4f 91       	pop	r20
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	0f 90       	pop	r0
     a9c:	0b be       	out	0x3b, r0	; 59
     a9e:	0f 90       	pop	r0
     aa0:	09 be       	out	0x39, r0	; 57
     aa2:	0f 90       	pop	r0
     aa4:	08 be       	out	0x38, r0	; 56
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0
     aac:	1f 90       	pop	r1
     aae:	18 95       	reti

00000ab0 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
     aba:	08 b6       	in	r0, 0x38	; 56
     abc:	0f 92       	push	r0
     abe:	18 be       	out	0x38, r1	; 56
     ac0:	09 b6       	in	r0, 0x39	; 57
     ac2:	0f 92       	push	r0
     ac4:	19 be       	out	0x39, r1	; 57
     ac6:	0b b6       	in	r0, 0x3b	; 59
     ac8:	0f 92       	push	r0
     aca:	1b be       	out	0x3b, r1	; 59
     acc:	2f 93       	push	r18
     ace:	3f 93       	push	r19
     ad0:	4f 93       	push	r20
     ad2:	5f 93       	push	r21
     ad4:	6f 93       	push	r22
     ad6:	7f 93       	push	r23
     ad8:	8f 93       	push	r24
     ada:	9f 93       	push	r25
     adc:	af 93       	push	r26
     ade:	bf 93       	push	r27
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     ae4:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     ae8:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     aec:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <adcb_callback>
     af0:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <adcb_callback+0x1>
     af4:	62 e0       	ldi	r22, 0x02	; 2
     af6:	80 e4       	ldi	r24, 0x40	; 64
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	19 95       	eicall
}
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	0b be       	out	0x3b, r0	; 59
     b18:	0f 90       	pop	r0
     b1a:	09 be       	out	0x39, r0	; 57
     b1c:	0f 90       	pop	r0
     b1e:	08 be       	out	0x38, r0	; 56
     b20:	0f 90       	pop	r0
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	0f 90       	pop	r0
     b26:	1f 90       	pop	r1
     b28:	18 95       	reti

00000b2a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	08 b6       	in	r0, 0x38	; 56
     b36:	0f 92       	push	r0
     b38:	18 be       	out	0x38, r1	; 56
     b3a:	09 b6       	in	r0, 0x39	; 57
     b3c:	0f 92       	push	r0
     b3e:	19 be       	out	0x39, r1	; 57
     b40:	0b b6       	in	r0, 0x3b	; 59
     b42:	0f 92       	push	r0
     b44:	1b be       	out	0x3b, r1	; 59
     b46:	2f 93       	push	r18
     b48:	3f 93       	push	r19
     b4a:	4f 93       	push	r20
     b4c:	5f 93       	push	r21
     b4e:	6f 93       	push	r22
     b50:	7f 93       	push	r23
     b52:	8f 93       	push	r24
     b54:	9f 93       	push	r25
     b56:	af 93       	push	r26
     b58:	bf 93       	push	r27
     b5a:	ef 93       	push	r30
     b5c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     b5e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     b62:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     b66:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <adcb_callback>
     b6a:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <adcb_callback+0x1>
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	80 e4       	ldi	r24, 0x40	; 64
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	19 95       	eicall
}
     b76:	ff 91       	pop	r31
     b78:	ef 91       	pop	r30
     b7a:	bf 91       	pop	r27
     b7c:	af 91       	pop	r26
     b7e:	9f 91       	pop	r25
     b80:	8f 91       	pop	r24
     b82:	7f 91       	pop	r23
     b84:	6f 91       	pop	r22
     b86:	5f 91       	pop	r21
     b88:	4f 91       	pop	r20
     b8a:	3f 91       	pop	r19
     b8c:	2f 91       	pop	r18
     b8e:	0f 90       	pop	r0
     b90:	0b be       	out	0x3b, r0	; 59
     b92:	0f 90       	pop	r0
     b94:	09 be       	out	0x39, r0	; 57
     b96:	0f 90       	pop	r0
     b98:	08 be       	out	0x38, r0	; 56
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     ba4:	1f 92       	push	r1
     ba6:	0f 92       	push	r0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	08 b6       	in	r0, 0x38	; 56
     bb0:	0f 92       	push	r0
     bb2:	18 be       	out	0x38, r1	; 56
     bb4:	09 b6       	in	r0, 0x39	; 57
     bb6:	0f 92       	push	r0
     bb8:	19 be       	out	0x39, r1	; 57
     bba:	0b b6       	in	r0, 0x3b	; 59
     bbc:	0f 92       	push	r0
     bbe:	1b be       	out	0x3b, r1	; 59
     bc0:	2f 93       	push	r18
     bc2:	3f 93       	push	r19
     bc4:	4f 93       	push	r20
     bc6:	5f 93       	push	r21
     bc8:	6f 93       	push	r22
     bca:	7f 93       	push	r23
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     bd8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     bdc:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     be0:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <adcb_callback>
     be4:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <adcb_callback+0x1>
     be8:	68 e0       	ldi	r22, 0x08	; 8
     bea:	80 e4       	ldi	r24, 0x40	; 64
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	19 95       	eicall
}
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0b be       	out	0x3b, r0	; 59
     c0c:	0f 90       	pop	r0
     c0e:	09 be       	out	0x39, r0	; 57
     c10:	0f 90       	pop	r0
     c12:	08 be       	out	0x38, r0	; 56
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	08 b6       	in	r0, 0x38	; 56
     c2a:	0f 92       	push	r0
     c2c:	18 be       	out	0x38, r1	; 56
     c2e:	09 b6       	in	r0, 0x39	; 57
     c30:	0f 92       	push	r0
     c32:	19 be       	out	0x39, r1	; 57
     c34:	0b b6       	in	r0, 0x3b	; 59
     c36:	0f 92       	push	r0
     c38:	1b be       	out	0x3b, r1	; 59
     c3a:	2f 93       	push	r18
     c3c:	3f 93       	push	r19
     c3e:	4f 93       	push	r20
     c40:	5f 93       	push	r21
     c42:	6f 93       	push	r22
     c44:	7f 93       	push	r23
     c46:	8f 93       	push	r24
     c48:	9f 93       	push	r25
     c4a:	af 93       	push	r26
     c4c:	bf 93       	push	r27
     c4e:	ef 93       	push	r30
     c50:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     c52:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <tc_tcc0_ovf_callback>
     c56:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <tc_tcc0_ovf_callback+0x1>
     c5a:	30 97       	sbiw	r30, 0x00	; 0
     c5c:	09 f0       	breq	.+2      	; 0xc60 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     c5e:	19 95       	eicall
	}
}
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	0f 90       	pop	r0
     c7a:	0b be       	out	0x3b, r0	; 59
     c7c:	0f 90       	pop	r0
     c7e:	09 be       	out	0x39, r0	; 57
     c80:	0f 90       	pop	r0
     c82:	08 be       	out	0x38, r0	; 56
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	08 b6       	in	r0, 0x38	; 56
     c9a:	0f 92       	push	r0
     c9c:	18 be       	out	0x38, r1	; 56
     c9e:	09 b6       	in	r0, 0x39	; 57
     ca0:	0f 92       	push	r0
     ca2:	19 be       	out	0x39, r1	; 57
     ca4:	0b b6       	in	r0, 0x3b	; 59
     ca6:	0f 92       	push	r0
     ca8:	1b be       	out	0x3b, r1	; 59
     caa:	2f 93       	push	r18
     cac:	3f 93       	push	r19
     cae:	4f 93       	push	r20
     cb0:	5f 93       	push	r21
     cb2:	6f 93       	push	r22
     cb4:	7f 93       	push	r23
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	af 93       	push	r26
     cbc:	bf 93       	push	r27
     cbe:	ef 93       	push	r30
     cc0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     cc2:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <tc_tcc0_err_callback>
     cc6:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <tc_tcc0_err_callback+0x1>
     cca:	30 97       	sbiw	r30, 0x00	; 0
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <__vector_15+0x42>
		tc_tcc0_err_callback();
     cce:	19 95       	eicall
	}
}
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	7f 91       	pop	r23
     cde:	6f 91       	pop	r22
     ce0:	5f 91       	pop	r21
     ce2:	4f 91       	pop	r20
     ce4:	3f 91       	pop	r19
     ce6:	2f 91       	pop	r18
     ce8:	0f 90       	pop	r0
     cea:	0b be       	out	0x3b, r0	; 59
     cec:	0f 90       	pop	r0
     cee:	09 be       	out	0x39, r0	; 57
     cf0:	0f 90       	pop	r0
     cf2:	08 be       	out	0x38, r0	; 56
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	08 b6       	in	r0, 0x38	; 56
     d0a:	0f 92       	push	r0
     d0c:	18 be       	out	0x38, r1	; 56
     d0e:	09 b6       	in	r0, 0x39	; 57
     d10:	0f 92       	push	r0
     d12:	19 be       	out	0x39, r1	; 57
     d14:	0b b6       	in	r0, 0x3b	; 59
     d16:	0f 92       	push	r0
     d18:	1b be       	out	0x3b, r1	; 59
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     d32:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <tc_tcc0_cca_callback>
     d36:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <tc_tcc0_cca_callback+0x1>
     d3a:	30 97       	sbiw	r30, 0x00	; 0
     d3c:	09 f0       	breq	.+2      	; 0xd40 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     d3e:	19 95       	eicall
	}
}
     d40:	ff 91       	pop	r31
     d42:	ef 91       	pop	r30
     d44:	bf 91       	pop	r27
     d46:	af 91       	pop	r26
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	7f 91       	pop	r23
     d4e:	6f 91       	pop	r22
     d50:	5f 91       	pop	r21
     d52:	4f 91       	pop	r20
     d54:	3f 91       	pop	r19
     d56:	2f 91       	pop	r18
     d58:	0f 90       	pop	r0
     d5a:	0b be       	out	0x3b, r0	; 59
     d5c:	0f 90       	pop	r0
     d5e:	09 be       	out	0x39, r0	; 57
     d60:	0f 90       	pop	r0
     d62:	08 be       	out	0x38, r0	; 56
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	08 b6       	in	r0, 0x38	; 56
     d7a:	0f 92       	push	r0
     d7c:	18 be       	out	0x38, r1	; 56
     d7e:	09 b6       	in	r0, 0x39	; 57
     d80:	0f 92       	push	r0
     d82:	19 be       	out	0x39, r1	; 57
     d84:	0b b6       	in	r0, 0x3b	; 59
     d86:	0f 92       	push	r0
     d88:	1b be       	out	0x3b, r1	; 59
     d8a:	2f 93       	push	r18
     d8c:	3f 93       	push	r19
     d8e:	4f 93       	push	r20
     d90:	5f 93       	push	r21
     d92:	6f 93       	push	r22
     d94:	7f 93       	push	r23
     d96:	8f 93       	push	r24
     d98:	9f 93       	push	r25
     d9a:	af 93       	push	r26
     d9c:	bf 93       	push	r27
     d9e:	ef 93       	push	r30
     da0:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     da2:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <tc_tcc0_ccb_callback>
     da6:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <tc_tcc0_ccb_callback+0x1>
     daa:	30 97       	sbiw	r30, 0x00	; 0
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     dae:	19 95       	eicall
	}
}
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0b be       	out	0x3b, r0	; 59
     dcc:	0f 90       	pop	r0
     dce:	09 be       	out	0x39, r0	; 57
     dd0:	0f 90       	pop	r0
     dd2:	08 be       	out	0x38, r0	; 56
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	08 b6       	in	r0, 0x38	; 56
     dea:	0f 92       	push	r0
     dec:	18 be       	out	0x38, r1	; 56
     dee:	09 b6       	in	r0, 0x39	; 57
     df0:	0f 92       	push	r0
     df2:	19 be       	out	0x39, r1	; 57
     df4:	0b b6       	in	r0, 0x3b	; 59
     df6:	0f 92       	push	r0
     df8:	1b be       	out	0x3b, r1	; 59
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	4f 93       	push	r20
     e00:	5f 93       	push	r21
     e02:	6f 93       	push	r22
     e04:	7f 93       	push	r23
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	ef 93       	push	r30
     e10:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     e12:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <tc_tcc0_ccc_callback>
     e16:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <tc_tcc0_ccc_callback+0x1>
     e1a:	30 97       	sbiw	r30, 0x00	; 0
     e1c:	09 f0       	breq	.+2      	; 0xe20 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     e1e:	19 95       	eicall
	}
}
     e20:	ff 91       	pop	r31
     e22:	ef 91       	pop	r30
     e24:	bf 91       	pop	r27
     e26:	af 91       	pop	r26
     e28:	9f 91       	pop	r25
     e2a:	8f 91       	pop	r24
     e2c:	7f 91       	pop	r23
     e2e:	6f 91       	pop	r22
     e30:	5f 91       	pop	r21
     e32:	4f 91       	pop	r20
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	0f 90       	pop	r0
     e3a:	0b be       	out	0x3b, r0	; 59
     e3c:	0f 90       	pop	r0
     e3e:	09 be       	out	0x39, r0	; 57
     e40:	0f 90       	pop	r0
     e42:	08 be       	out	0x38, r0	; 56
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	08 b6       	in	r0, 0x38	; 56
     e5a:	0f 92       	push	r0
     e5c:	18 be       	out	0x38, r1	; 56
     e5e:	09 b6       	in	r0, 0x39	; 57
     e60:	0f 92       	push	r0
     e62:	19 be       	out	0x39, r1	; 57
     e64:	0b b6       	in	r0, 0x3b	; 59
     e66:	0f 92       	push	r0
     e68:	1b be       	out	0x3b, r1	; 59
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     e82:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <tc_tcc0_ccd_callback>
     e86:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <tc_tcc0_ccd_callback+0x1>
     e8a:	30 97       	sbiw	r30, 0x00	; 0
     e8c:	09 f0       	breq	.+2      	; 0xe90 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     e8e:	19 95       	eicall
	}
}
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	bf 91       	pop	r27
     e96:	af 91       	pop	r26
     e98:	9f 91       	pop	r25
     e9a:	8f 91       	pop	r24
     e9c:	7f 91       	pop	r23
     e9e:	6f 91       	pop	r22
     ea0:	5f 91       	pop	r21
     ea2:	4f 91       	pop	r20
     ea4:	3f 91       	pop	r19
     ea6:	2f 91       	pop	r18
     ea8:	0f 90       	pop	r0
     eaa:	0b be       	out	0x3b, r0	; 59
     eac:	0f 90       	pop	r0
     eae:	09 be       	out	0x39, r0	; 57
     eb0:	0f 90       	pop	r0
     eb2:	08 be       	out	0x38, r0	; 56
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	08 b6       	in	r0, 0x38	; 56
     eca:	0f 92       	push	r0
     ecc:	18 be       	out	0x38, r1	; 56
     ece:	09 b6       	in	r0, 0x39	; 57
     ed0:	0f 92       	push	r0
     ed2:	19 be       	out	0x39, r1	; 57
     ed4:	0b b6       	in	r0, 0x3b	; 59
     ed6:	0f 92       	push	r0
     ed8:	1b be       	out	0x3b, r1	; 59
     eda:	2f 93       	push	r18
     edc:	3f 93       	push	r19
     ede:	4f 93       	push	r20
     ee0:	5f 93       	push	r21
     ee2:	6f 93       	push	r22
     ee4:	7f 93       	push	r23
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	af 93       	push	r26
     eec:	bf 93       	push	r27
     eee:	ef 93       	push	r30
     ef0:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     ef2:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <tc_tcc1_ovf_callback>
     ef6:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <tc_tcc1_ovf_callback+0x1>
     efa:	30 97       	sbiw	r30, 0x00	; 0
     efc:	09 f0       	breq	.+2      	; 0xf00 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     efe:	19 95       	eicall
	}
}
     f00:	ff 91       	pop	r31
     f02:	ef 91       	pop	r30
     f04:	bf 91       	pop	r27
     f06:	af 91       	pop	r26
     f08:	9f 91       	pop	r25
     f0a:	8f 91       	pop	r24
     f0c:	7f 91       	pop	r23
     f0e:	6f 91       	pop	r22
     f10:	5f 91       	pop	r21
     f12:	4f 91       	pop	r20
     f14:	3f 91       	pop	r19
     f16:	2f 91       	pop	r18
     f18:	0f 90       	pop	r0
     f1a:	0b be       	out	0x3b, r0	; 59
     f1c:	0f 90       	pop	r0
     f1e:	09 be       	out	0x39, r0	; 57
     f20:	0f 90       	pop	r0
     f22:	08 be       	out	0x38, r0	; 56
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	08 b6       	in	r0, 0x38	; 56
     f3a:	0f 92       	push	r0
     f3c:	18 be       	out	0x38, r1	; 56
     f3e:	09 b6       	in	r0, 0x39	; 57
     f40:	0f 92       	push	r0
     f42:	19 be       	out	0x39, r1	; 57
     f44:	0b b6       	in	r0, 0x3b	; 59
     f46:	0f 92       	push	r0
     f48:	1b be       	out	0x3b, r1	; 59
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     f62:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <tc_tcc1_err_callback>
     f66:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <tc_tcc1_err_callback+0x1>
     f6a:	30 97       	sbiw	r30, 0x00	; 0
     f6c:	09 f0       	breq	.+2      	; 0xf70 <__vector_21+0x42>
		tc_tcc1_err_callback();
     f6e:	19 95       	eicall
	}
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0b be       	out	0x3b, r0	; 59
     f8c:	0f 90       	pop	r0
     f8e:	09 be       	out	0x39, r0	; 57
     f90:	0f 90       	pop	r0
     f92:	08 be       	out	0x38, r0	; 56
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	08 b6       	in	r0, 0x38	; 56
     faa:	0f 92       	push	r0
     fac:	18 be       	out	0x38, r1	; 56
     fae:	09 b6       	in	r0, 0x39	; 57
     fb0:	0f 92       	push	r0
     fb2:	19 be       	out	0x39, r1	; 57
     fb4:	0b b6       	in	r0, 0x3b	; 59
     fb6:	0f 92       	push	r0
     fb8:	1b be       	out	0x3b, r1	; 59
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	4f 93       	push	r20
     fc0:	5f 93       	push	r21
     fc2:	6f 93       	push	r22
     fc4:	7f 93       	push	r23
     fc6:	8f 93       	push	r24
     fc8:	9f 93       	push	r25
     fca:	af 93       	push	r26
     fcc:	bf 93       	push	r27
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     fd2:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <tc_tcc1_cca_callback>
     fd6:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <tc_tcc1_cca_callback+0x1>
     fda:	30 97       	sbiw	r30, 0x00	; 0
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     fde:	19 95       	eicall
	}
}
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0b be       	out	0x3b, r0	; 59
     ffc:	0f 90       	pop	r0
     ffe:	09 be       	out	0x39, r0	; 57
    1000:	0f 90       	pop	r0
    1002:	08 be       	out	0x38, r0	; 56
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    100e:	1f 92       	push	r1
    1010:	0f 92       	push	r0
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	0f 92       	push	r0
    1016:	11 24       	eor	r1, r1
    1018:	08 b6       	in	r0, 0x38	; 56
    101a:	0f 92       	push	r0
    101c:	18 be       	out	0x38, r1	; 56
    101e:	09 b6       	in	r0, 0x39	; 57
    1020:	0f 92       	push	r0
    1022:	19 be       	out	0x39, r1	; 57
    1024:	0b b6       	in	r0, 0x3b	; 59
    1026:	0f 92       	push	r0
    1028:	1b be       	out	0x3b, r1	; 59
    102a:	2f 93       	push	r18
    102c:	3f 93       	push	r19
    102e:	4f 93       	push	r20
    1030:	5f 93       	push	r21
    1032:	6f 93       	push	r22
    1034:	7f 93       	push	r23
    1036:	8f 93       	push	r24
    1038:	9f 93       	push	r25
    103a:	af 93       	push	r26
    103c:	bf 93       	push	r27
    103e:	ef 93       	push	r30
    1040:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1042:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <tc_tcc1_ccb_callback>
    1046:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <tc_tcc1_ccb_callback+0x1>
    104a:	30 97       	sbiw	r30, 0x00	; 0
    104c:	09 f0       	breq	.+2      	; 0x1050 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    104e:	19 95       	eicall
	}
}
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	0f 90       	pop	r0
    106a:	0b be       	out	0x3b, r0	; 59
    106c:	0f 90       	pop	r0
    106e:	09 be       	out	0x39, r0	; 57
    1070:	0f 90       	pop	r0
    1072:	08 be       	out	0x38, r0	; 56
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    107e:	1f 92       	push	r1
    1080:	0f 92       	push	r0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	08 b6       	in	r0, 0x38	; 56
    108a:	0f 92       	push	r0
    108c:	18 be       	out	0x38, r1	; 56
    108e:	09 b6       	in	r0, 0x39	; 57
    1090:	0f 92       	push	r0
    1092:	19 be       	out	0x39, r1	; 57
    1094:	0b b6       	in	r0, 0x3b	; 59
    1096:	0f 92       	push	r0
    1098:	1b be       	out	0x3b, r1	; 59
    109a:	2f 93       	push	r18
    109c:	3f 93       	push	r19
    109e:	4f 93       	push	r20
    10a0:	5f 93       	push	r21
    10a2:	6f 93       	push	r22
    10a4:	7f 93       	push	r23
    10a6:	8f 93       	push	r24
    10a8:	9f 93       	push	r25
    10aa:	af 93       	push	r26
    10ac:	bf 93       	push	r27
    10ae:	ef 93       	push	r30
    10b0:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    10b2:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <tc_tcd0_ovf_callback>
    10b6:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <tc_tcd0_ovf_callback+0x1>
    10ba:	30 97       	sbiw	r30, 0x00	; 0
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    10be:	19 95       	eicall
	}
}
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0b be       	out	0x3b, r0	; 59
    10dc:	0f 90       	pop	r0
    10de:	09 be       	out	0x39, r0	; 57
    10e0:	0f 90       	pop	r0
    10e2:	08 be       	out	0x38, r0	; 56
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	08 b6       	in	r0, 0x38	; 56
    10fa:	0f 92       	push	r0
    10fc:	18 be       	out	0x38, r1	; 56
    10fe:	09 b6       	in	r0, 0x39	; 57
    1100:	0f 92       	push	r0
    1102:	19 be       	out	0x39, r1	; 57
    1104:	0b b6       	in	r0, 0x3b	; 59
    1106:	0f 92       	push	r0
    1108:	1b be       	out	0x3b, r1	; 59
    110a:	2f 93       	push	r18
    110c:	3f 93       	push	r19
    110e:	4f 93       	push	r20
    1110:	5f 93       	push	r21
    1112:	6f 93       	push	r22
    1114:	7f 93       	push	r23
    1116:	8f 93       	push	r24
    1118:	9f 93       	push	r25
    111a:	af 93       	push	r26
    111c:	bf 93       	push	r27
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1122:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <tc_tcd0_err_callback>
    1126:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <tc_tcd0_err_callback+0x1>
    112a:	30 97       	sbiw	r30, 0x00	; 0
    112c:	09 f0       	breq	.+2      	; 0x1130 <__vector_78+0x42>
		tc_tcd0_err_callback();
    112e:	19 95       	eicall
	}
}
    1130:	ff 91       	pop	r31
    1132:	ef 91       	pop	r30
    1134:	bf 91       	pop	r27
    1136:	af 91       	pop	r26
    1138:	9f 91       	pop	r25
    113a:	8f 91       	pop	r24
    113c:	7f 91       	pop	r23
    113e:	6f 91       	pop	r22
    1140:	5f 91       	pop	r21
    1142:	4f 91       	pop	r20
    1144:	3f 91       	pop	r19
    1146:	2f 91       	pop	r18
    1148:	0f 90       	pop	r0
    114a:	0b be       	out	0x3b, r0	; 59
    114c:	0f 90       	pop	r0
    114e:	09 be       	out	0x39, r0	; 57
    1150:	0f 90       	pop	r0
    1152:	08 be       	out	0x38, r0	; 56
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	08 b6       	in	r0, 0x38	; 56
    116a:	0f 92       	push	r0
    116c:	18 be       	out	0x38, r1	; 56
    116e:	09 b6       	in	r0, 0x39	; 57
    1170:	0f 92       	push	r0
    1172:	19 be       	out	0x39, r1	; 57
    1174:	0b b6       	in	r0, 0x3b	; 59
    1176:	0f 92       	push	r0
    1178:	1b be       	out	0x3b, r1	; 59
    117a:	2f 93       	push	r18
    117c:	3f 93       	push	r19
    117e:	4f 93       	push	r20
    1180:	5f 93       	push	r21
    1182:	6f 93       	push	r22
    1184:	7f 93       	push	r23
    1186:	8f 93       	push	r24
    1188:	9f 93       	push	r25
    118a:	af 93       	push	r26
    118c:	bf 93       	push	r27
    118e:	ef 93       	push	r30
    1190:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1192:	e0 91 dc 20 	lds	r30, 0x20DC	; 0x8020dc <tc_tcd0_cca_callback>
    1196:	f0 91 dd 20 	lds	r31, 0x20DD	; 0x8020dd <tc_tcd0_cca_callback+0x1>
    119a:	30 97       	sbiw	r30, 0x00	; 0
    119c:	09 f0       	breq	.+2      	; 0x11a0 <__vector_79+0x42>
		tc_tcd0_cca_callback();
    119e:	19 95       	eicall
	}
}
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	bf 91       	pop	r27
    11a6:	af 91       	pop	r26
    11a8:	9f 91       	pop	r25
    11aa:	8f 91       	pop	r24
    11ac:	7f 91       	pop	r23
    11ae:	6f 91       	pop	r22
    11b0:	5f 91       	pop	r21
    11b2:	4f 91       	pop	r20
    11b4:	3f 91       	pop	r19
    11b6:	2f 91       	pop	r18
    11b8:	0f 90       	pop	r0
    11ba:	0b be       	out	0x3b, r0	; 59
    11bc:	0f 90       	pop	r0
    11be:	09 be       	out	0x39, r0	; 57
    11c0:	0f 90       	pop	r0
    11c2:	08 be       	out	0x38, r0	; 56
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	11 24       	eor	r1, r1
    11d8:	08 b6       	in	r0, 0x38	; 56
    11da:	0f 92       	push	r0
    11dc:	18 be       	out	0x38, r1	; 56
    11de:	09 b6       	in	r0, 0x39	; 57
    11e0:	0f 92       	push	r0
    11e2:	19 be       	out	0x39, r1	; 57
    11e4:	0b b6       	in	r0, 0x3b	; 59
    11e6:	0f 92       	push	r0
    11e8:	1b be       	out	0x3b, r1	; 59
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1202:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <tc_tcd0_ccb_callback>
    1206:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <tc_tcd0_ccb_callback+0x1>
    120a:	30 97       	sbiw	r30, 0x00	; 0
    120c:	09 f0       	breq	.+2      	; 0x1210 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    120e:	19 95       	eicall
	}
}
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0b be       	out	0x3b, r0	; 59
    122c:	0f 90       	pop	r0
    122e:	09 be       	out	0x39, r0	; 57
    1230:	0f 90       	pop	r0
    1232:	08 be       	out	0x38, r0	; 56
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    123e:	1f 92       	push	r1
    1240:	0f 92       	push	r0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	0f 92       	push	r0
    1246:	11 24       	eor	r1, r1
    1248:	08 b6       	in	r0, 0x38	; 56
    124a:	0f 92       	push	r0
    124c:	18 be       	out	0x38, r1	; 56
    124e:	09 b6       	in	r0, 0x39	; 57
    1250:	0f 92       	push	r0
    1252:	19 be       	out	0x39, r1	; 57
    1254:	0b b6       	in	r0, 0x3b	; 59
    1256:	0f 92       	push	r0
    1258:	1b be       	out	0x3b, r1	; 59
    125a:	2f 93       	push	r18
    125c:	3f 93       	push	r19
    125e:	4f 93       	push	r20
    1260:	5f 93       	push	r21
    1262:	6f 93       	push	r22
    1264:	7f 93       	push	r23
    1266:	8f 93       	push	r24
    1268:	9f 93       	push	r25
    126a:	af 93       	push	r26
    126c:	bf 93       	push	r27
    126e:	ef 93       	push	r30
    1270:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1272:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <tc_tcd0_ccc_callback>
    1276:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <tc_tcd0_ccc_callback+0x1>
    127a:	30 97       	sbiw	r30, 0x00	; 0
    127c:	09 f0       	breq	.+2      	; 0x1280 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    127e:	19 95       	eicall
	}
}
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0b be       	out	0x3b, r0	; 59
    129c:	0f 90       	pop	r0
    129e:	09 be       	out	0x39, r0	; 57
    12a0:	0f 90       	pop	r0
    12a2:	08 be       	out	0x38, r0	; 56
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	08 b6       	in	r0, 0x38	; 56
    12ba:	0f 92       	push	r0
    12bc:	18 be       	out	0x38, r1	; 56
    12be:	09 b6       	in	r0, 0x39	; 57
    12c0:	0f 92       	push	r0
    12c2:	19 be       	out	0x39, r1	; 57
    12c4:	0b b6       	in	r0, 0x3b	; 59
    12c6:	0f 92       	push	r0
    12c8:	1b be       	out	0x3b, r1	; 59
    12ca:	2f 93       	push	r18
    12cc:	3f 93       	push	r19
    12ce:	4f 93       	push	r20
    12d0:	5f 93       	push	r21
    12d2:	6f 93       	push	r22
    12d4:	7f 93       	push	r23
    12d6:	8f 93       	push	r24
    12d8:	9f 93       	push	r25
    12da:	af 93       	push	r26
    12dc:	bf 93       	push	r27
    12de:	ef 93       	push	r30
    12e0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    12e2:	e0 91 d6 20 	lds	r30, 0x20D6	; 0x8020d6 <tc_tcd0_ccd_callback>
    12e6:	f0 91 d7 20 	lds	r31, 0x20D7	; 0x8020d7 <tc_tcd0_ccd_callback+0x1>
    12ea:	30 97       	sbiw	r30, 0x00	; 0
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    12ee:	19 95       	eicall
	}
}
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	bf 91       	pop	r27
    12f6:	af 91       	pop	r26
    12f8:	9f 91       	pop	r25
    12fa:	8f 91       	pop	r24
    12fc:	7f 91       	pop	r23
    12fe:	6f 91       	pop	r22
    1300:	5f 91       	pop	r21
    1302:	4f 91       	pop	r20
    1304:	3f 91       	pop	r19
    1306:	2f 91       	pop	r18
    1308:	0f 90       	pop	r0
    130a:	0b be       	out	0x3b, r0	; 59
    130c:	0f 90       	pop	r0
    130e:	09 be       	out	0x39, r0	; 57
    1310:	0f 90       	pop	r0
    1312:	08 be       	out	0x38, r0	; 56
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	0f 90       	pop	r0
    131a:	1f 90       	pop	r1
    131c:	18 95       	reti

0000131e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    131e:	1f 92       	push	r1
    1320:	0f 92       	push	r0
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	0f 92       	push	r0
    1326:	11 24       	eor	r1, r1
    1328:	08 b6       	in	r0, 0x38	; 56
    132a:	0f 92       	push	r0
    132c:	18 be       	out	0x38, r1	; 56
    132e:	09 b6       	in	r0, 0x39	; 57
    1330:	0f 92       	push	r0
    1332:	19 be       	out	0x39, r1	; 57
    1334:	0b b6       	in	r0, 0x3b	; 59
    1336:	0f 92       	push	r0
    1338:	1b be       	out	0x3b, r1	; 59
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1352:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <tc_tcd1_ovf_callback>
    1356:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <tc_tcd1_ovf_callback+0x1>
    135a:	30 97       	sbiw	r30, 0x00	; 0
    135c:	09 f0       	breq	.+2      	; 0x1360 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    135e:	19 95       	eicall
	}
}
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0b be       	out	0x3b, r0	; 59
    137c:	0f 90       	pop	r0
    137e:	09 be       	out	0x39, r0	; 57
    1380:	0f 90       	pop	r0
    1382:	08 be       	out	0x38, r0	; 56
    1384:	0f 90       	pop	r0
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	0f 90       	pop	r0
    138a:	1f 90       	pop	r1
    138c:	18 95       	reti

0000138e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	08 b6       	in	r0, 0x38	; 56
    139a:	0f 92       	push	r0
    139c:	18 be       	out	0x38, r1	; 56
    139e:	09 b6       	in	r0, 0x39	; 57
    13a0:	0f 92       	push	r0
    13a2:	19 be       	out	0x39, r1	; 57
    13a4:	0b b6       	in	r0, 0x3b	; 59
    13a6:	0f 92       	push	r0
    13a8:	1b be       	out	0x3b, r1	; 59
    13aa:	2f 93       	push	r18
    13ac:	3f 93       	push	r19
    13ae:	4f 93       	push	r20
    13b0:	5f 93       	push	r21
    13b2:	6f 93       	push	r22
    13b4:	7f 93       	push	r23
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    13c2:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <tc_tcd1_err_callback>
    13c6:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <tc_tcd1_err_callback+0x1>
    13ca:	30 97       	sbiw	r30, 0x00	; 0
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <__vector_84+0x42>
		tc_tcd1_err_callback();
    13ce:	19 95       	eicall
	}
}
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	7f 91       	pop	r23
    13de:	6f 91       	pop	r22
    13e0:	5f 91       	pop	r21
    13e2:	4f 91       	pop	r20
    13e4:	3f 91       	pop	r19
    13e6:	2f 91       	pop	r18
    13e8:	0f 90       	pop	r0
    13ea:	0b be       	out	0x3b, r0	; 59
    13ec:	0f 90       	pop	r0
    13ee:	09 be       	out	0x39, r0	; 57
    13f0:	0f 90       	pop	r0
    13f2:	08 be       	out	0x38, r0	; 56
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0f 90       	pop	r0
    13fa:	1f 90       	pop	r1
    13fc:	18 95       	reti

000013fe <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    13fe:	1f 92       	push	r1
    1400:	0f 92       	push	r0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	0f 92       	push	r0
    1406:	11 24       	eor	r1, r1
    1408:	08 b6       	in	r0, 0x38	; 56
    140a:	0f 92       	push	r0
    140c:	18 be       	out	0x38, r1	; 56
    140e:	09 b6       	in	r0, 0x39	; 57
    1410:	0f 92       	push	r0
    1412:	19 be       	out	0x39, r1	; 57
    1414:	0b b6       	in	r0, 0x3b	; 59
    1416:	0f 92       	push	r0
    1418:	1b be       	out	0x3b, r1	; 59
    141a:	2f 93       	push	r18
    141c:	3f 93       	push	r19
    141e:	4f 93       	push	r20
    1420:	5f 93       	push	r21
    1422:	6f 93       	push	r22
    1424:	7f 93       	push	r23
    1426:	8f 93       	push	r24
    1428:	9f 93       	push	r25
    142a:	af 93       	push	r26
    142c:	bf 93       	push	r27
    142e:	ef 93       	push	r30
    1430:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1432:	e0 91 d0 20 	lds	r30, 0x20D0	; 0x8020d0 <tc_tcd1_cca_callback>
    1436:	f0 91 d1 20 	lds	r31, 0x20D1	; 0x8020d1 <tc_tcd1_cca_callback+0x1>
    143a:	30 97       	sbiw	r30, 0x00	; 0
    143c:	09 f0       	breq	.+2      	; 0x1440 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    143e:	19 95       	eicall
	}
}
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	7f 91       	pop	r23
    144e:	6f 91       	pop	r22
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0b be       	out	0x3b, r0	; 59
    145c:	0f 90       	pop	r0
    145e:	09 be       	out	0x39, r0	; 57
    1460:	0f 90       	pop	r0
    1462:	08 be       	out	0x38, r0	; 56
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	0f 90       	pop	r0
    146a:	1f 90       	pop	r1
    146c:	18 95       	reti

0000146e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	08 b6       	in	r0, 0x38	; 56
    147a:	0f 92       	push	r0
    147c:	18 be       	out	0x38, r1	; 56
    147e:	09 b6       	in	r0, 0x39	; 57
    1480:	0f 92       	push	r0
    1482:	19 be       	out	0x39, r1	; 57
    1484:	0b b6       	in	r0, 0x3b	; 59
    1486:	0f 92       	push	r0
    1488:	1b be       	out	0x3b, r1	; 59
    148a:	2f 93       	push	r18
    148c:	3f 93       	push	r19
    148e:	4f 93       	push	r20
    1490:	5f 93       	push	r21
    1492:	6f 93       	push	r22
    1494:	7f 93       	push	r23
    1496:	8f 93       	push	r24
    1498:	9f 93       	push	r25
    149a:	af 93       	push	r26
    149c:	bf 93       	push	r27
    149e:	ef 93       	push	r30
    14a0:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    14a2:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <tc_tcd1_ccb_callback>
    14a6:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <tc_tcd1_ccb_callback+0x1>
    14aa:	30 97       	sbiw	r30, 0x00	; 0
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    14ae:	19 95       	eicall
	}
}
    14b0:	ff 91       	pop	r31
    14b2:	ef 91       	pop	r30
    14b4:	bf 91       	pop	r27
    14b6:	af 91       	pop	r26
    14b8:	9f 91       	pop	r25
    14ba:	8f 91       	pop	r24
    14bc:	7f 91       	pop	r23
    14be:	6f 91       	pop	r22
    14c0:	5f 91       	pop	r21
    14c2:	4f 91       	pop	r20
    14c4:	3f 91       	pop	r19
    14c6:	2f 91       	pop	r18
    14c8:	0f 90       	pop	r0
    14ca:	0b be       	out	0x3b, r0	; 59
    14cc:	0f 90       	pop	r0
    14ce:	09 be       	out	0x39, r0	; 57
    14d0:	0f 90       	pop	r0
    14d2:	08 be       	out	0x38, r0	; 56
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0f 90       	pop	r0
    14da:	1f 90       	pop	r1
    14dc:	18 95       	reti

000014de <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
    14e8:	08 b6       	in	r0, 0x38	; 56
    14ea:	0f 92       	push	r0
    14ec:	18 be       	out	0x38, r1	; 56
    14ee:	09 b6       	in	r0, 0x39	; 57
    14f0:	0f 92       	push	r0
    14f2:	19 be       	out	0x39, r1	; 57
    14f4:	0b b6       	in	r0, 0x3b	; 59
    14f6:	0f 92       	push	r0
    14f8:	1b be       	out	0x3b, r1	; 59
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1512:	e0 91 cc 20 	lds	r30, 0x20CC	; 0x8020cc <tc_tce0_err_callback>
    1516:	f0 91 cd 20 	lds	r31, 0x20CD	; 0x8020cd <tc_tce0_err_callback+0x1>
    151a:	30 97       	sbiw	r30, 0x00	; 0
    151c:	09 f0       	breq	.+2      	; 0x1520 <__vector_48+0x42>
		tc_tce0_err_callback();
    151e:	19 95       	eicall
	}
}
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0b be       	out	0x3b, r0	; 59
    153c:	0f 90       	pop	r0
    153e:	09 be       	out	0x39, r0	; 57
    1540:	0f 90       	pop	r0
    1542:	08 be       	out	0x38, r0	; 56
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	08 b6       	in	r0, 0x38	; 56
    155a:	0f 92       	push	r0
    155c:	18 be       	out	0x38, r1	; 56
    155e:	09 b6       	in	r0, 0x39	; 57
    1560:	0f 92       	push	r0
    1562:	19 be       	out	0x39, r1	; 57
    1564:	0b b6       	in	r0, 0x3b	; 59
    1566:	0f 92       	push	r0
    1568:	1b be       	out	0x3b, r1	; 59
    156a:	2f 93       	push	r18
    156c:	3f 93       	push	r19
    156e:	4f 93       	push	r20
    1570:	5f 93       	push	r21
    1572:	6f 93       	push	r22
    1574:	7f 93       	push	r23
    1576:	8f 93       	push	r24
    1578:	9f 93       	push	r25
    157a:	af 93       	push	r26
    157c:	bf 93       	push	r27
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1582:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <tc_tce0_cca_callback>
    1586:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <tc_tce0_cca_callback+0x1>
    158a:	30 97       	sbiw	r30, 0x00	; 0
    158c:	09 f0       	breq	.+2      	; 0x1590 <__vector_49+0x42>
		tc_tce0_cca_callback();
    158e:	19 95       	eicall
	}
}
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0b be       	out	0x3b, r0	; 59
    15ac:	0f 90       	pop	r0
    15ae:	09 be       	out	0x39, r0	; 57
    15b0:	0f 90       	pop	r0
    15b2:	08 be       	out	0x38, r0	; 56
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	08 b6       	in	r0, 0x38	; 56
    15ca:	0f 92       	push	r0
    15cc:	18 be       	out	0x38, r1	; 56
    15ce:	09 b6       	in	r0, 0x39	; 57
    15d0:	0f 92       	push	r0
    15d2:	19 be       	out	0x39, r1	; 57
    15d4:	0b b6       	in	r0, 0x3b	; 59
    15d6:	0f 92       	push	r0
    15d8:	1b be       	out	0x3b, r1	; 59
    15da:	2f 93       	push	r18
    15dc:	3f 93       	push	r19
    15de:	4f 93       	push	r20
    15e0:	5f 93       	push	r21
    15e2:	6f 93       	push	r22
    15e4:	7f 93       	push	r23
    15e6:	8f 93       	push	r24
    15e8:	9f 93       	push	r25
    15ea:	af 93       	push	r26
    15ec:	bf 93       	push	r27
    15ee:	ef 93       	push	r30
    15f0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    15f2:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <tc_tce0_ccb_callback>
    15f6:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <tc_tce0_ccb_callback+0x1>
    15fa:	30 97       	sbiw	r30, 0x00	; 0
    15fc:	09 f0       	breq	.+2      	; 0x1600 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    15fe:	19 95       	eicall
	}
}
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	7f 91       	pop	r23
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0b be       	out	0x3b, r0	; 59
    161c:	0f 90       	pop	r0
    161e:	09 be       	out	0x39, r0	; 57
    1620:	0f 90       	pop	r0
    1622:	08 be       	out	0x38, r0	; 56
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0
    162a:	1f 90       	pop	r1
    162c:	18 95       	reti

0000162e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	08 b6       	in	r0, 0x38	; 56
    163a:	0f 92       	push	r0
    163c:	18 be       	out	0x38, r1	; 56
    163e:	09 b6       	in	r0, 0x39	; 57
    1640:	0f 92       	push	r0
    1642:	19 be       	out	0x39, r1	; 57
    1644:	0b b6       	in	r0, 0x3b	; 59
    1646:	0f 92       	push	r0
    1648:	1b be       	out	0x3b, r1	; 59
    164a:	2f 93       	push	r18
    164c:	3f 93       	push	r19
    164e:	4f 93       	push	r20
    1650:	5f 93       	push	r21
    1652:	6f 93       	push	r22
    1654:	7f 93       	push	r23
    1656:	8f 93       	push	r24
    1658:	9f 93       	push	r25
    165a:	af 93       	push	r26
    165c:	bf 93       	push	r27
    165e:	ef 93       	push	r30
    1660:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1662:	e0 91 c6 20 	lds	r30, 0x20C6	; 0x8020c6 <tc_tce0_ccc_callback>
    1666:	f0 91 c7 20 	lds	r31, 0x20C7	; 0x8020c7 <tc_tce0_ccc_callback+0x1>
    166a:	30 97       	sbiw	r30, 0x00	; 0
    166c:	09 f0       	breq	.+2      	; 0x1670 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    166e:	19 95       	eicall
	}
}
    1670:	ff 91       	pop	r31
    1672:	ef 91       	pop	r30
    1674:	bf 91       	pop	r27
    1676:	af 91       	pop	r26
    1678:	9f 91       	pop	r25
    167a:	8f 91       	pop	r24
    167c:	7f 91       	pop	r23
    167e:	6f 91       	pop	r22
    1680:	5f 91       	pop	r21
    1682:	4f 91       	pop	r20
    1684:	3f 91       	pop	r19
    1686:	2f 91       	pop	r18
    1688:	0f 90       	pop	r0
    168a:	0b be       	out	0x3b, r0	; 59
    168c:	0f 90       	pop	r0
    168e:	09 be       	out	0x39, r0	; 57
    1690:	0f 90       	pop	r0
    1692:	08 be       	out	0x38, r0	; 56
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	11 24       	eor	r1, r1
    16a8:	08 b6       	in	r0, 0x38	; 56
    16aa:	0f 92       	push	r0
    16ac:	18 be       	out	0x38, r1	; 56
    16ae:	09 b6       	in	r0, 0x39	; 57
    16b0:	0f 92       	push	r0
    16b2:	19 be       	out	0x39, r1	; 57
    16b4:	0b b6       	in	r0, 0x3b	; 59
    16b6:	0f 92       	push	r0
    16b8:	1b be       	out	0x3b, r1	; 59
    16ba:	2f 93       	push	r18
    16bc:	3f 93       	push	r19
    16be:	4f 93       	push	r20
    16c0:	5f 93       	push	r21
    16c2:	6f 93       	push	r22
    16c4:	7f 93       	push	r23
    16c6:	8f 93       	push	r24
    16c8:	9f 93       	push	r25
    16ca:	af 93       	push	r26
    16cc:	bf 93       	push	r27
    16ce:	ef 93       	push	r30
    16d0:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    16d2:	e0 91 c4 20 	lds	r30, 0x20C4	; 0x8020c4 <tc_tce0_ccd_callback>
    16d6:	f0 91 c5 20 	lds	r31, 0x20C5	; 0x8020c5 <tc_tce0_ccd_callback+0x1>
    16da:	30 97       	sbiw	r30, 0x00	; 0
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    16de:	19 95       	eicall
	}
}
    16e0:	ff 91       	pop	r31
    16e2:	ef 91       	pop	r30
    16e4:	bf 91       	pop	r27
    16e6:	af 91       	pop	r26
    16e8:	9f 91       	pop	r25
    16ea:	8f 91       	pop	r24
    16ec:	7f 91       	pop	r23
    16ee:	6f 91       	pop	r22
    16f0:	5f 91       	pop	r21
    16f2:	4f 91       	pop	r20
    16f4:	3f 91       	pop	r19
    16f6:	2f 91       	pop	r18
    16f8:	0f 90       	pop	r0
    16fa:	0b be       	out	0x3b, r0	; 59
    16fc:	0f 90       	pop	r0
    16fe:	09 be       	out	0x39, r0	; 57
    1700:	0f 90       	pop	r0
    1702:	08 be       	out	0x38, r0	; 56
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	0f 90       	pop	r0
    170a:	1f 90       	pop	r1
    170c:	18 95       	reti

0000170e <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    170e:	1f 92       	push	r1
    1710:	0f 92       	push	r0
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	0f 92       	push	r0
    1716:	11 24       	eor	r1, r1
    1718:	08 b6       	in	r0, 0x38	; 56
    171a:	0f 92       	push	r0
    171c:	18 be       	out	0x38, r1	; 56
    171e:	09 b6       	in	r0, 0x39	; 57
    1720:	0f 92       	push	r0
    1722:	19 be       	out	0x39, r1	; 57
    1724:	0b b6       	in	r0, 0x3b	; 59
    1726:	0f 92       	push	r0
    1728:	1b be       	out	0x3b, r1	; 59
    172a:	2f 93       	push	r18
    172c:	3f 93       	push	r19
    172e:	4f 93       	push	r20
    1730:	5f 93       	push	r21
    1732:	6f 93       	push	r22
    1734:	7f 93       	push	r23
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	af 93       	push	r26
    173c:	bf 93       	push	r27
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1742:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <tc_tce1_ovf_callback>
    1746:	f0 91 c3 20 	lds	r31, 0x20C3	; 0x8020c3 <tc_tce1_ovf_callback+0x1>
    174a:	30 97       	sbiw	r30, 0x00	; 0
    174c:	09 f0       	breq	.+2      	; 0x1750 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    174e:	19 95       	eicall
	}
}
    1750:	ff 91       	pop	r31
    1752:	ef 91       	pop	r30
    1754:	bf 91       	pop	r27
    1756:	af 91       	pop	r26
    1758:	9f 91       	pop	r25
    175a:	8f 91       	pop	r24
    175c:	7f 91       	pop	r23
    175e:	6f 91       	pop	r22
    1760:	5f 91       	pop	r21
    1762:	4f 91       	pop	r20
    1764:	3f 91       	pop	r19
    1766:	2f 91       	pop	r18
    1768:	0f 90       	pop	r0
    176a:	0b be       	out	0x3b, r0	; 59
    176c:	0f 90       	pop	r0
    176e:	09 be       	out	0x39, r0	; 57
    1770:	0f 90       	pop	r0
    1772:	08 be       	out	0x38, r0	; 56
    1774:	0f 90       	pop	r0
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	0f 90       	pop	r0
    177a:	1f 90       	pop	r1
    177c:	18 95       	reti

0000177e <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    177e:	1f 92       	push	r1
    1780:	0f 92       	push	r0
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	0f 92       	push	r0
    1786:	11 24       	eor	r1, r1
    1788:	08 b6       	in	r0, 0x38	; 56
    178a:	0f 92       	push	r0
    178c:	18 be       	out	0x38, r1	; 56
    178e:	09 b6       	in	r0, 0x39	; 57
    1790:	0f 92       	push	r0
    1792:	19 be       	out	0x39, r1	; 57
    1794:	0b b6       	in	r0, 0x3b	; 59
    1796:	0f 92       	push	r0
    1798:	1b be       	out	0x3b, r1	; 59
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	ef 93       	push	r30
    17b0:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    17b2:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <tc_tce1_err_callback>
    17b6:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <tc_tce1_err_callback+0x1>
    17ba:	30 97       	sbiw	r30, 0x00	; 0
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <__vector_54+0x42>
		tc_tce1_err_callback();
    17be:	19 95       	eicall
	}
}
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	0b be       	out	0x3b, r0	; 59
    17dc:	0f 90       	pop	r0
    17de:	09 be       	out	0x39, r0	; 57
    17e0:	0f 90       	pop	r0
    17e2:	08 be       	out	0x38, r0	; 56
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	08 b6       	in	r0, 0x38	; 56
    17fa:	0f 92       	push	r0
    17fc:	18 be       	out	0x38, r1	; 56
    17fe:	09 b6       	in	r0, 0x39	; 57
    1800:	0f 92       	push	r0
    1802:	19 be       	out	0x39, r1	; 57
    1804:	0b b6       	in	r0, 0x3b	; 59
    1806:	0f 92       	push	r0
    1808:	1b be       	out	0x3b, r1	; 59
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1822:	e0 91 be 20 	lds	r30, 0x20BE	; 0x8020be <tc_tce1_cca_callback>
    1826:	f0 91 bf 20 	lds	r31, 0x20BF	; 0x8020bf <tc_tce1_cca_callback+0x1>
    182a:	30 97       	sbiw	r30, 0x00	; 0
    182c:	09 f0       	breq	.+2      	; 0x1830 <__vector_55+0x42>
		tc_tce1_cca_callback();
    182e:	19 95       	eicall
	}
}
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	bf 91       	pop	r27
    1836:	af 91       	pop	r26
    1838:	9f 91       	pop	r25
    183a:	8f 91       	pop	r24
    183c:	7f 91       	pop	r23
    183e:	6f 91       	pop	r22
    1840:	5f 91       	pop	r21
    1842:	4f 91       	pop	r20
    1844:	3f 91       	pop	r19
    1846:	2f 91       	pop	r18
    1848:	0f 90       	pop	r0
    184a:	0b be       	out	0x3b, r0	; 59
    184c:	0f 90       	pop	r0
    184e:	09 be       	out	0x39, r0	; 57
    1850:	0f 90       	pop	r0
    1852:	08 be       	out	0x38, r0	; 56
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    185e:	1f 92       	push	r1
    1860:	0f 92       	push	r0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	0f 92       	push	r0
    1866:	11 24       	eor	r1, r1
    1868:	08 b6       	in	r0, 0x38	; 56
    186a:	0f 92       	push	r0
    186c:	18 be       	out	0x38, r1	; 56
    186e:	09 b6       	in	r0, 0x39	; 57
    1870:	0f 92       	push	r0
    1872:	19 be       	out	0x39, r1	; 57
    1874:	0b b6       	in	r0, 0x3b	; 59
    1876:	0f 92       	push	r0
    1878:	1b be       	out	0x3b, r1	; 59
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1892:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <tc_tce1_ccb_callback>
    1896:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <tc_tce1_ccb_callback+0x1>
    189a:	30 97       	sbiw	r30, 0x00	; 0
    189c:	09 f0       	breq	.+2      	; 0x18a0 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    189e:	19 95       	eicall
	}
}
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	0b be       	out	0x3b, r0	; 59
    18bc:	0f 90       	pop	r0
    18be:	09 be       	out	0x39, r0	; 57
    18c0:	0f 90       	pop	r0
    18c2:	08 be       	out	0x38, r0	; 56
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	0f 92       	push	r0
    18d6:	11 24       	eor	r1, r1
    18d8:	08 b6       	in	r0, 0x38	; 56
    18da:	0f 92       	push	r0
    18dc:	18 be       	out	0x38, r1	; 56
    18de:	09 b6       	in	r0, 0x39	; 57
    18e0:	0f 92       	push	r0
    18e2:	19 be       	out	0x39, r1	; 57
    18e4:	0b b6       	in	r0, 0x3b	; 59
    18e6:	0f 92       	push	r0
    18e8:	1b be       	out	0x3b, r1	; 59
    18ea:	2f 93       	push	r18
    18ec:	3f 93       	push	r19
    18ee:	4f 93       	push	r20
    18f0:	5f 93       	push	r21
    18f2:	6f 93       	push	r22
    18f4:	7f 93       	push	r23
    18f6:	8f 93       	push	r24
    18f8:	9f 93       	push	r25
    18fa:	af 93       	push	r26
    18fc:	bf 93       	push	r27
    18fe:	ef 93       	push	r30
    1900:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1902:	e0 91 ba 20 	lds	r30, 0x20BA	; 0x8020ba <tc_tcf0_ovf_callback>
    1906:	f0 91 bb 20 	lds	r31, 0x20BB	; 0x8020bb <tc_tcf0_ovf_callback+0x1>
    190a:	30 97       	sbiw	r30, 0x00	; 0
    190c:	09 f0       	breq	.+2      	; 0x1910 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    190e:	19 95       	eicall
	}
}
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	bf 91       	pop	r27
    1916:	af 91       	pop	r26
    1918:	9f 91       	pop	r25
    191a:	8f 91       	pop	r24
    191c:	7f 91       	pop	r23
    191e:	6f 91       	pop	r22
    1920:	5f 91       	pop	r21
    1922:	4f 91       	pop	r20
    1924:	3f 91       	pop	r19
    1926:	2f 91       	pop	r18
    1928:	0f 90       	pop	r0
    192a:	0b be       	out	0x3b, r0	; 59
    192c:	0f 90       	pop	r0
    192e:	09 be       	out	0x39, r0	; 57
    1930:	0f 90       	pop	r0
    1932:	08 be       	out	0x38, r0	; 56
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    193e:	1f 92       	push	r1
    1940:	0f 92       	push	r0
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	0f 92       	push	r0
    1946:	11 24       	eor	r1, r1
    1948:	08 b6       	in	r0, 0x38	; 56
    194a:	0f 92       	push	r0
    194c:	18 be       	out	0x38, r1	; 56
    194e:	09 b6       	in	r0, 0x39	; 57
    1950:	0f 92       	push	r0
    1952:	19 be       	out	0x39, r1	; 57
    1954:	0b b6       	in	r0, 0x3b	; 59
    1956:	0f 92       	push	r0
    1958:	1b be       	out	0x3b, r1	; 59
    195a:	2f 93       	push	r18
    195c:	3f 93       	push	r19
    195e:	4f 93       	push	r20
    1960:	5f 93       	push	r21
    1962:	6f 93       	push	r22
    1964:	7f 93       	push	r23
    1966:	8f 93       	push	r24
    1968:	9f 93       	push	r25
    196a:	af 93       	push	r26
    196c:	bf 93       	push	r27
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1972:	e0 91 b8 20 	lds	r30, 0x20B8	; 0x8020b8 <tc_tcf0_err_callback>
    1976:	f0 91 b9 20 	lds	r31, 0x20B9	; 0x8020b9 <tc_tcf0_err_callback+0x1>
    197a:	30 97       	sbiw	r30, 0x00	; 0
    197c:	09 f0       	breq	.+2      	; 0x1980 <__vector_109+0x42>
		tc_tcf0_err_callback();
    197e:	19 95       	eicall
	}
}
    1980:	ff 91       	pop	r31
    1982:	ef 91       	pop	r30
    1984:	bf 91       	pop	r27
    1986:	af 91       	pop	r26
    1988:	9f 91       	pop	r25
    198a:	8f 91       	pop	r24
    198c:	7f 91       	pop	r23
    198e:	6f 91       	pop	r22
    1990:	5f 91       	pop	r21
    1992:	4f 91       	pop	r20
    1994:	3f 91       	pop	r19
    1996:	2f 91       	pop	r18
    1998:	0f 90       	pop	r0
    199a:	0b be       	out	0x3b, r0	; 59
    199c:	0f 90       	pop	r0
    199e:	09 be       	out	0x39, r0	; 57
    19a0:	0f 90       	pop	r0
    19a2:	08 be       	out	0x38, r0	; 56
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	0f 90       	pop	r0
    19aa:	1f 90       	pop	r1
    19ac:	18 95       	reti

000019ae <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    19ae:	1f 92       	push	r1
    19b0:	0f 92       	push	r0
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	0f 92       	push	r0
    19b6:	11 24       	eor	r1, r1
    19b8:	08 b6       	in	r0, 0x38	; 56
    19ba:	0f 92       	push	r0
    19bc:	18 be       	out	0x38, r1	; 56
    19be:	09 b6       	in	r0, 0x39	; 57
    19c0:	0f 92       	push	r0
    19c2:	19 be       	out	0x39, r1	; 57
    19c4:	0b b6       	in	r0, 0x3b	; 59
    19c6:	0f 92       	push	r0
    19c8:	1b be       	out	0x3b, r1	; 59
    19ca:	2f 93       	push	r18
    19cc:	3f 93       	push	r19
    19ce:	4f 93       	push	r20
    19d0:	5f 93       	push	r21
    19d2:	6f 93       	push	r22
    19d4:	7f 93       	push	r23
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	af 93       	push	r26
    19dc:	bf 93       	push	r27
    19de:	ef 93       	push	r30
    19e0:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    19e2:	e0 91 b6 20 	lds	r30, 0x20B6	; 0x8020b6 <tc_tcf0_cca_callback>
    19e6:	f0 91 b7 20 	lds	r31, 0x20B7	; 0x8020b7 <tc_tcf0_cca_callback+0x1>
    19ea:	30 97       	sbiw	r30, 0x00	; 0
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    19ee:	19 95       	eicall
	}
}
    19f0:	ff 91       	pop	r31
    19f2:	ef 91       	pop	r30
    19f4:	bf 91       	pop	r27
    19f6:	af 91       	pop	r26
    19f8:	9f 91       	pop	r25
    19fa:	8f 91       	pop	r24
    19fc:	7f 91       	pop	r23
    19fe:	6f 91       	pop	r22
    1a00:	5f 91       	pop	r21
    1a02:	4f 91       	pop	r20
    1a04:	3f 91       	pop	r19
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0b be       	out	0x3b, r0	; 59
    1a0c:	0f 90       	pop	r0
    1a0e:	09 be       	out	0x39, r0	; 57
    1a10:	0f 90       	pop	r0
    1a12:	08 be       	out	0x38, r0	; 56
    1a14:	0f 90       	pop	r0
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	0f 90       	pop	r0
    1a1a:	1f 90       	pop	r1
    1a1c:	18 95       	reti

00001a1e <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1a1e:	1f 92       	push	r1
    1a20:	0f 92       	push	r0
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	0f 92       	push	r0
    1a26:	11 24       	eor	r1, r1
    1a28:	08 b6       	in	r0, 0x38	; 56
    1a2a:	0f 92       	push	r0
    1a2c:	18 be       	out	0x38, r1	; 56
    1a2e:	09 b6       	in	r0, 0x39	; 57
    1a30:	0f 92       	push	r0
    1a32:	19 be       	out	0x39, r1	; 57
    1a34:	0b b6       	in	r0, 0x3b	; 59
    1a36:	0f 92       	push	r0
    1a38:	1b be       	out	0x3b, r1	; 59
    1a3a:	2f 93       	push	r18
    1a3c:	3f 93       	push	r19
    1a3e:	4f 93       	push	r20
    1a40:	5f 93       	push	r21
    1a42:	6f 93       	push	r22
    1a44:	7f 93       	push	r23
    1a46:	8f 93       	push	r24
    1a48:	9f 93       	push	r25
    1a4a:	af 93       	push	r26
    1a4c:	bf 93       	push	r27
    1a4e:	ef 93       	push	r30
    1a50:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1a52:	e0 91 b4 20 	lds	r30, 0x20B4	; 0x8020b4 <tc_tcf0_ccb_callback>
    1a56:	f0 91 b5 20 	lds	r31, 0x20B5	; 0x8020b5 <tc_tcf0_ccb_callback+0x1>
    1a5a:	30 97       	sbiw	r30, 0x00	; 0
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1a5e:	19 95       	eicall
	}
}
    1a60:	ff 91       	pop	r31
    1a62:	ef 91       	pop	r30
    1a64:	bf 91       	pop	r27
    1a66:	af 91       	pop	r26
    1a68:	9f 91       	pop	r25
    1a6a:	8f 91       	pop	r24
    1a6c:	7f 91       	pop	r23
    1a6e:	6f 91       	pop	r22
    1a70:	5f 91       	pop	r21
    1a72:	4f 91       	pop	r20
    1a74:	3f 91       	pop	r19
    1a76:	2f 91       	pop	r18
    1a78:	0f 90       	pop	r0
    1a7a:	0b be       	out	0x3b, r0	; 59
    1a7c:	0f 90       	pop	r0
    1a7e:	09 be       	out	0x39, r0	; 57
    1a80:	0f 90       	pop	r0
    1a82:	08 be       	out	0x38, r0	; 56
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	0f 90       	pop	r0
    1a8a:	1f 90       	pop	r1
    1a8c:	18 95       	reti

00001a8e <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1a8e:	1f 92       	push	r1
    1a90:	0f 92       	push	r0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	0f 92       	push	r0
    1a96:	11 24       	eor	r1, r1
    1a98:	08 b6       	in	r0, 0x38	; 56
    1a9a:	0f 92       	push	r0
    1a9c:	18 be       	out	0x38, r1	; 56
    1a9e:	09 b6       	in	r0, 0x39	; 57
    1aa0:	0f 92       	push	r0
    1aa2:	19 be       	out	0x39, r1	; 57
    1aa4:	0b b6       	in	r0, 0x3b	; 59
    1aa6:	0f 92       	push	r0
    1aa8:	1b be       	out	0x3b, r1	; 59
    1aaa:	2f 93       	push	r18
    1aac:	3f 93       	push	r19
    1aae:	4f 93       	push	r20
    1ab0:	5f 93       	push	r21
    1ab2:	6f 93       	push	r22
    1ab4:	7f 93       	push	r23
    1ab6:	8f 93       	push	r24
    1ab8:	9f 93       	push	r25
    1aba:	af 93       	push	r26
    1abc:	bf 93       	push	r27
    1abe:	ef 93       	push	r30
    1ac0:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1ac2:	e0 91 b2 20 	lds	r30, 0x20B2	; 0x8020b2 <tc_tcf0_ccc_callback>
    1ac6:	f0 91 b3 20 	lds	r31, 0x20B3	; 0x8020b3 <tc_tcf0_ccc_callback+0x1>
    1aca:	30 97       	sbiw	r30, 0x00	; 0
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1ace:	19 95       	eicall
	}
}
    1ad0:	ff 91       	pop	r31
    1ad2:	ef 91       	pop	r30
    1ad4:	bf 91       	pop	r27
    1ad6:	af 91       	pop	r26
    1ad8:	9f 91       	pop	r25
    1ada:	8f 91       	pop	r24
    1adc:	7f 91       	pop	r23
    1ade:	6f 91       	pop	r22
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	0f 90       	pop	r0
    1aea:	0b be       	out	0x3b, r0	; 59
    1aec:	0f 90       	pop	r0
    1aee:	09 be       	out	0x39, r0	; 57
    1af0:	0f 90       	pop	r0
    1af2:	08 be       	out	0x38, r0	; 56
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	0f 90       	pop	r0
    1afa:	1f 90       	pop	r1
    1afc:	18 95       	reti

00001afe <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1afe:	1f 92       	push	r1
    1b00:	0f 92       	push	r0
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	0f 92       	push	r0
    1b06:	11 24       	eor	r1, r1
    1b08:	08 b6       	in	r0, 0x38	; 56
    1b0a:	0f 92       	push	r0
    1b0c:	18 be       	out	0x38, r1	; 56
    1b0e:	09 b6       	in	r0, 0x39	; 57
    1b10:	0f 92       	push	r0
    1b12:	19 be       	out	0x39, r1	; 57
    1b14:	0b b6       	in	r0, 0x3b	; 59
    1b16:	0f 92       	push	r0
    1b18:	1b be       	out	0x3b, r1	; 59
    1b1a:	2f 93       	push	r18
    1b1c:	3f 93       	push	r19
    1b1e:	4f 93       	push	r20
    1b20:	5f 93       	push	r21
    1b22:	6f 93       	push	r22
    1b24:	7f 93       	push	r23
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	af 93       	push	r26
    1b2c:	bf 93       	push	r27
    1b2e:	ef 93       	push	r30
    1b30:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1b32:	e0 91 b0 20 	lds	r30, 0x20B0	; 0x8020b0 <tc_tcf0_ccd_callback>
    1b36:	f0 91 b1 20 	lds	r31, 0x20B1	; 0x8020b1 <tc_tcf0_ccd_callback+0x1>
    1b3a:	30 97       	sbiw	r30, 0x00	; 0
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1b3e:	19 95       	eicall
	}
}
    1b40:	ff 91       	pop	r31
    1b42:	ef 91       	pop	r30
    1b44:	bf 91       	pop	r27
    1b46:	af 91       	pop	r26
    1b48:	9f 91       	pop	r25
    1b4a:	8f 91       	pop	r24
    1b4c:	7f 91       	pop	r23
    1b4e:	6f 91       	pop	r22
    1b50:	5f 91       	pop	r21
    1b52:	4f 91       	pop	r20
    1b54:	3f 91       	pop	r19
    1b56:	2f 91       	pop	r18
    1b58:	0f 90       	pop	r0
    1b5a:	0b be       	out	0x3b, r0	; 59
    1b5c:	0f 90       	pop	r0
    1b5e:	09 be       	out	0x39, r0	; 57
    1b60:	0f 90       	pop	r0
    1b62:	08 be       	out	0x38, r0	; 56
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	0f 90       	pop	r0
    1b6a:	1f 90       	pop	r1
    1b6c:	18 95       	reti

00001b6e <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1b6e:	1f 92       	push	r1
    1b70:	0f 92       	push	r0
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	0f 92       	push	r0
    1b76:	11 24       	eor	r1, r1
    1b78:	08 b6       	in	r0, 0x38	; 56
    1b7a:	0f 92       	push	r0
    1b7c:	18 be       	out	0x38, r1	; 56
    1b7e:	09 b6       	in	r0, 0x39	; 57
    1b80:	0f 92       	push	r0
    1b82:	19 be       	out	0x39, r1	; 57
    1b84:	0b b6       	in	r0, 0x3b	; 59
    1b86:	0f 92       	push	r0
    1b88:	1b be       	out	0x3b, r1	; 59
    1b8a:	2f 93       	push	r18
    1b8c:	3f 93       	push	r19
    1b8e:	4f 93       	push	r20
    1b90:	5f 93       	push	r21
    1b92:	6f 93       	push	r22
    1b94:	7f 93       	push	r23
    1b96:	8f 93       	push	r24
    1b98:	9f 93       	push	r25
    1b9a:	af 93       	push	r26
    1b9c:	bf 93       	push	r27
    1b9e:	ef 93       	push	r30
    1ba0:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1ba2:	e0 91 ae 20 	lds	r30, 0x20AE	; 0x8020ae <tc_tcf1_ovf_callback>
    1ba6:	f0 91 af 20 	lds	r31, 0x20AF	; 0x8020af <tc_tcf1_ovf_callback+0x1>
    1baa:	30 97       	sbiw	r30, 0x00	; 0
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1bae:	19 95       	eicall
	}
}
    1bb0:	ff 91       	pop	r31
    1bb2:	ef 91       	pop	r30
    1bb4:	bf 91       	pop	r27
    1bb6:	af 91       	pop	r26
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	7f 91       	pop	r23
    1bbe:	6f 91       	pop	r22
    1bc0:	5f 91       	pop	r21
    1bc2:	4f 91       	pop	r20
    1bc4:	3f 91       	pop	r19
    1bc6:	2f 91       	pop	r18
    1bc8:	0f 90       	pop	r0
    1bca:	0b be       	out	0x3b, r0	; 59
    1bcc:	0f 90       	pop	r0
    1bce:	09 be       	out	0x39, r0	; 57
    1bd0:	0f 90       	pop	r0
    1bd2:	08 be       	out	0x38, r0	; 56
    1bd4:	0f 90       	pop	r0
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	0f 90       	pop	r0
    1bda:	1f 90       	pop	r1
    1bdc:	18 95       	reti

00001bde <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1bde:	1f 92       	push	r1
    1be0:	0f 92       	push	r0
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	0f 92       	push	r0
    1be6:	11 24       	eor	r1, r1
    1be8:	08 b6       	in	r0, 0x38	; 56
    1bea:	0f 92       	push	r0
    1bec:	18 be       	out	0x38, r1	; 56
    1bee:	09 b6       	in	r0, 0x39	; 57
    1bf0:	0f 92       	push	r0
    1bf2:	19 be       	out	0x39, r1	; 57
    1bf4:	0b b6       	in	r0, 0x3b	; 59
    1bf6:	0f 92       	push	r0
    1bf8:	1b be       	out	0x3b, r1	; 59
    1bfa:	2f 93       	push	r18
    1bfc:	3f 93       	push	r19
    1bfe:	4f 93       	push	r20
    1c00:	5f 93       	push	r21
    1c02:	6f 93       	push	r22
    1c04:	7f 93       	push	r23
    1c06:	8f 93       	push	r24
    1c08:	9f 93       	push	r25
    1c0a:	af 93       	push	r26
    1c0c:	bf 93       	push	r27
    1c0e:	ef 93       	push	r30
    1c10:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1c12:	e0 91 ac 20 	lds	r30, 0x20AC	; 0x8020ac <tc_tcf1_err_callback>
    1c16:	f0 91 ad 20 	lds	r31, 0x20AD	; 0x8020ad <tc_tcf1_err_callback+0x1>
    1c1a:	30 97       	sbiw	r30, 0x00	; 0
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <__vector_115+0x42>
		tc_tcf1_err_callback();
    1c1e:	19 95       	eicall
	}
}
    1c20:	ff 91       	pop	r31
    1c22:	ef 91       	pop	r30
    1c24:	bf 91       	pop	r27
    1c26:	af 91       	pop	r26
    1c28:	9f 91       	pop	r25
    1c2a:	8f 91       	pop	r24
    1c2c:	7f 91       	pop	r23
    1c2e:	6f 91       	pop	r22
    1c30:	5f 91       	pop	r21
    1c32:	4f 91       	pop	r20
    1c34:	3f 91       	pop	r19
    1c36:	2f 91       	pop	r18
    1c38:	0f 90       	pop	r0
    1c3a:	0b be       	out	0x3b, r0	; 59
    1c3c:	0f 90       	pop	r0
    1c3e:	09 be       	out	0x39, r0	; 57
    1c40:	0f 90       	pop	r0
    1c42:	08 be       	out	0x38, r0	; 56
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	0f 90       	pop	r0
    1c4a:	1f 90       	pop	r1
    1c4c:	18 95       	reti

00001c4e <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1c4e:	1f 92       	push	r1
    1c50:	0f 92       	push	r0
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	0f 92       	push	r0
    1c56:	11 24       	eor	r1, r1
    1c58:	08 b6       	in	r0, 0x38	; 56
    1c5a:	0f 92       	push	r0
    1c5c:	18 be       	out	0x38, r1	; 56
    1c5e:	09 b6       	in	r0, 0x39	; 57
    1c60:	0f 92       	push	r0
    1c62:	19 be       	out	0x39, r1	; 57
    1c64:	0b b6       	in	r0, 0x3b	; 59
    1c66:	0f 92       	push	r0
    1c68:	1b be       	out	0x3b, r1	; 59
    1c6a:	2f 93       	push	r18
    1c6c:	3f 93       	push	r19
    1c6e:	4f 93       	push	r20
    1c70:	5f 93       	push	r21
    1c72:	6f 93       	push	r22
    1c74:	7f 93       	push	r23
    1c76:	8f 93       	push	r24
    1c78:	9f 93       	push	r25
    1c7a:	af 93       	push	r26
    1c7c:	bf 93       	push	r27
    1c7e:	ef 93       	push	r30
    1c80:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1c82:	e0 91 aa 20 	lds	r30, 0x20AA	; 0x8020aa <tc_tcf1_cca_callback>
    1c86:	f0 91 ab 20 	lds	r31, 0x20AB	; 0x8020ab <tc_tcf1_cca_callback+0x1>
    1c8a:	30 97       	sbiw	r30, 0x00	; 0
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1c8e:	19 95       	eicall
	}
}
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	bf 91       	pop	r27
    1c96:	af 91       	pop	r26
    1c98:	9f 91       	pop	r25
    1c9a:	8f 91       	pop	r24
    1c9c:	7f 91       	pop	r23
    1c9e:	6f 91       	pop	r22
    1ca0:	5f 91       	pop	r21
    1ca2:	4f 91       	pop	r20
    1ca4:	3f 91       	pop	r19
    1ca6:	2f 91       	pop	r18
    1ca8:	0f 90       	pop	r0
    1caa:	0b be       	out	0x3b, r0	; 59
    1cac:	0f 90       	pop	r0
    1cae:	09 be       	out	0x39, r0	; 57
    1cb0:	0f 90       	pop	r0
    1cb2:	08 be       	out	0x38, r0	; 56
    1cb4:	0f 90       	pop	r0
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	0f 90       	pop	r0
    1cba:	1f 90       	pop	r1
    1cbc:	18 95       	reti

00001cbe <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	0f 92       	push	r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	08 b6       	in	r0, 0x38	; 56
    1cca:	0f 92       	push	r0
    1ccc:	18 be       	out	0x38, r1	; 56
    1cce:	09 b6       	in	r0, 0x39	; 57
    1cd0:	0f 92       	push	r0
    1cd2:	19 be       	out	0x39, r1	; 57
    1cd4:	0b b6       	in	r0, 0x3b	; 59
    1cd6:	0f 92       	push	r0
    1cd8:	1b be       	out	0x3b, r1	; 59
    1cda:	2f 93       	push	r18
    1cdc:	3f 93       	push	r19
    1cde:	4f 93       	push	r20
    1ce0:	5f 93       	push	r21
    1ce2:	6f 93       	push	r22
    1ce4:	7f 93       	push	r23
    1ce6:	8f 93       	push	r24
    1ce8:	9f 93       	push	r25
    1cea:	af 93       	push	r26
    1cec:	bf 93       	push	r27
    1cee:	ef 93       	push	r30
    1cf0:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1cf2:	e0 91 a8 20 	lds	r30, 0x20A8	; 0x8020a8 <tc_tcf1_ccb_callback>
    1cf6:	f0 91 a9 20 	lds	r31, 0x20A9	; 0x8020a9 <tc_tcf1_ccb_callback+0x1>
    1cfa:	30 97       	sbiw	r30, 0x00	; 0
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1cfe:	19 95       	eicall
	}
}
    1d00:	ff 91       	pop	r31
    1d02:	ef 91       	pop	r30
    1d04:	bf 91       	pop	r27
    1d06:	af 91       	pop	r26
    1d08:	9f 91       	pop	r25
    1d0a:	8f 91       	pop	r24
    1d0c:	7f 91       	pop	r23
    1d0e:	6f 91       	pop	r22
    1d10:	5f 91       	pop	r21
    1d12:	4f 91       	pop	r20
    1d14:	3f 91       	pop	r19
    1d16:	2f 91       	pop	r18
    1d18:	0f 90       	pop	r0
    1d1a:	0b be       	out	0x3b, r0	; 59
    1d1c:	0f 90       	pop	r0
    1d1e:	09 be       	out	0x39, r0	; 57
    1d20:	0f 90       	pop	r0
    1d22:	08 be       	out	0x38, r0	; 56
    1d24:	0f 90       	pop	r0
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	0f 90       	pop	r0
    1d2a:	1f 90       	pop	r1
    1d2c:	18 95       	reti

00001d2e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1d32:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <transfer>
    1d36:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <transfer+0x1>
    1d3a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1d3c:	83 ff       	sbrs	r24, 3
    1d3e:	08 c0       	rjmp	.+16     	; 0x1d50 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1d40:	88 60       	ori	r24, 0x08	; 8
    1d42:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1d48:	86 ef       	ldi	r24, 0xF6	; 246
    1d4a:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <transfer+0xa>
    1d4e:	83 c0       	rjmp	.+262    	; 0x1e56 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1d50:	98 2f       	mov	r25, r24
    1d52:	94 71       	andi	r25, 0x14	; 20
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1d56:	83 e0       	ldi	r24, 0x03	; 3
    1d58:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <transfer+0xa>
    1d60:	7a c0       	rjmp	.+244    	; 0x1e56 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1d62:	86 ff       	sbrs	r24, 6
    1d64:	43 c0       	rjmp	.+134    	; 0x1dec <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1d66:	c6 ef       	ldi	r28, 0xF6	; 246
    1d68:	d0 e2       	ldi	r29, 0x20	; 32
    1d6a:	aa 81       	ldd	r26, Y+2	; 0x02
    1d6c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	14 96       	adiw	r26, 0x04	; 4
    1d74:	2d 91       	ld	r18, X+
    1d76:	3c 91       	ld	r19, X
    1d78:	15 97       	sbiw	r26, 0x05	; 5
    1d7a:	82 17       	cp	r24, r18
    1d7c:	93 07       	cpc	r25, r19
    1d7e:	6c f4       	brge	.+26     	; 0x1d9a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1d80:	9c 01       	movw	r18, r24
    1d82:	2f 5f       	subi	r18, 0xFF	; 255
    1d84:	3f 4f       	sbci	r19, 0xFF	; 255
    1d86:	20 93 fa 20 	sts	0x20FA, r18	; 0x8020fa <transfer+0x4>
    1d8a:	30 93 fb 20 	sts	0x20FB, r19	; 0x8020fb <transfer+0x5>
    1d8e:	a8 0f       	add	r26, r24
    1d90:	b9 1f       	adc	r27, r25
    1d92:	11 96       	adiw	r26, 0x01	; 1
    1d94:	8c 91       	ld	r24, X
    1d96:	87 83       	std	Z+7, r24	; 0x07
    1d98:	5e c0       	rjmp	.+188    	; 0x1e56 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1d9a:	80 91 fc 20 	lds	r24, 0x20FC	; 0x8020fc <transfer+0x6>
    1d9e:	90 91 fd 20 	lds	r25, 0x20FD	; 0x8020fd <transfer+0x7>
    1da2:	18 96       	adiw	r26, 0x08	; 8
    1da4:	2d 91       	ld	r18, X+
    1da6:	3c 91       	ld	r19, X
    1da8:	19 97       	sbiw	r26, 0x09	; 9
    1daa:	82 17       	cp	r24, r18
    1dac:	93 07       	cpc	r25, r19
    1dae:	c8 f4       	brcc	.+50     	; 0x1de2 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1db0:	20 91 fe 20 	lds	r18, 0x20FE	; 0x8020fe <transfer+0x8>
    1db4:	22 23       	and	r18, r18
    1db6:	21 f0       	breq	.+8      	; 0x1dc0 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1db8:	86 81       	ldd	r24, Z+6	; 0x06
    1dba:	81 60       	ori	r24, 0x01	; 1
    1dbc:	86 83       	std	Z+6, r24	; 0x06
    1dbe:	4b c0       	rjmp	.+150    	; 0x1e56 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1dc0:	16 96       	adiw	r26, 0x06	; 6
    1dc2:	2d 91       	ld	r18, X+
    1dc4:	3c 91       	ld	r19, X
    1dc6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1dc8:	ac 01       	movw	r20, r24
    1dca:	4f 5f       	subi	r20, 0xFF	; 255
    1dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dce:	40 93 fc 20 	sts	0x20FC, r20	; 0x8020fc <transfer+0x6>
    1dd2:	50 93 fd 20 	sts	0x20FD, r21	; 0x8020fd <transfer+0x7>
    1dd6:	d9 01       	movw	r26, r18
    1dd8:	a8 0f       	add	r26, r24
    1dda:	b9 1f       	adc	r27, r25
    1ddc:	8c 91       	ld	r24, X
    1dde:	87 83       	std	Z+7, r24	; 0x07
    1de0:	3a c0       	rjmp	.+116    	; 0x1e56 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1de6:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <transfer+0xa>
    1dea:	35 c0       	rjmp	.+106    	; 0x1e56 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1dec:	88 23       	and	r24, r24
    1dee:	84 f5       	brge	.+96     	; 0x1e50 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1df0:	a6 ef       	ldi	r26, 0xF6	; 246
    1df2:	b0 e2       	ldi	r27, 0x20	; 32
    1df4:	12 96       	adiw	r26, 0x02	; 2
    1df6:	cd 91       	ld	r28, X+
    1df8:	dc 91       	ld	r29, X
    1dfa:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1dfc:	16 96       	adiw	r26, 0x06	; 6
    1dfe:	8d 91       	ld	r24, X+
    1e00:	9c 91       	ld	r25, X
    1e02:	17 97       	sbiw	r26, 0x07	; 7
    1e04:	28 85       	ldd	r18, Y+8	; 0x08
    1e06:	39 85       	ldd	r19, Y+9	; 0x09
    1e08:	82 17       	cp	r24, r18
    1e0a:	93 07       	cpc	r25, r19
    1e0c:	d8 f4       	brcc	.+54     	; 0x1e44 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1e0e:	6e 81       	ldd	r22, Y+6	; 0x06
    1e10:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1e12:	9c 01       	movw	r18, r24
    1e14:	2f 5f       	subi	r18, 0xFF	; 255
    1e16:	3f 4f       	sbci	r19, 0xFF	; 255
    1e18:	20 93 fc 20 	sts	0x20FC, r18	; 0x8020fc <transfer+0x6>
    1e1c:	30 93 fd 20 	sts	0x20FD, r19	; 0x8020fd <transfer+0x7>
    1e20:	47 81       	ldd	r20, Z+7	; 0x07
    1e22:	db 01       	movw	r26, r22
    1e24:	a8 0f       	add	r26, r24
    1e26:	b9 1f       	adc	r27, r25
    1e28:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1e2a:	88 85       	ldd	r24, Y+8	; 0x08
    1e2c:	99 85       	ldd	r25, Y+9	; 0x09
    1e2e:	28 17       	cp	r18, r24
    1e30:	39 07       	cpc	r19, r25
    1e32:	18 f4       	brcc	.+6      	; 0x1e3a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	83 83       	std	Z+3, r24	; 0x03
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1e3a:	87 e0       	ldi	r24, 0x07	; 7
    1e3c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1e3e:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <transfer+0xa>
    1e42:	09 c0       	rjmp	.+18     	; 0x1e56 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1e48:	89 ef       	ldi	r24, 0xF9	; 249
    1e4a:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <transfer+0xa>
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1e50:	8b ef       	ldi	r24, 0xFB	; 251
    1e52:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <transfer+0xa>
	}
}
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1e5c:	1f 92       	push	r1
    1e5e:	0f 92       	push	r0
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	0f 92       	push	r0
    1e64:	11 24       	eor	r1, r1
    1e66:	08 b6       	in	r0, 0x38	; 56
    1e68:	0f 92       	push	r0
    1e6a:	18 be       	out	0x38, r1	; 56
    1e6c:	09 b6       	in	r0, 0x39	; 57
    1e6e:	0f 92       	push	r0
    1e70:	19 be       	out	0x39, r1	; 57
    1e72:	0b b6       	in	r0, 0x3b	; 59
    1e74:	0f 92       	push	r0
    1e76:	1b be       	out	0x3b, r1	; 59
    1e78:	2f 93       	push	r18
    1e7a:	3f 93       	push	r19
    1e7c:	4f 93       	push	r20
    1e7e:	5f 93       	push	r21
    1e80:	6f 93       	push	r22
    1e82:	7f 93       	push	r23
    1e84:	8f 93       	push	r24
    1e86:	9f 93       	push	r25
    1e88:	af 93       	push	r26
    1e8a:	bf 93       	push	r27
    1e8c:	ef 93       	push	r30
    1e8e:	ff 93       	push	r31
    1e90:	4e df       	rcall	.-356    	; 0x1d2e <twim_interrupt_handler>
    1e92:	ff 91       	pop	r31
    1e94:	ef 91       	pop	r30
    1e96:	bf 91       	pop	r27
    1e98:	af 91       	pop	r26
    1e9a:	9f 91       	pop	r25
    1e9c:	8f 91       	pop	r24
    1e9e:	7f 91       	pop	r23
    1ea0:	6f 91       	pop	r22
    1ea2:	5f 91       	pop	r21
    1ea4:	4f 91       	pop	r20
    1ea6:	3f 91       	pop	r19
    1ea8:	2f 91       	pop	r18
    1eaa:	0f 90       	pop	r0
    1eac:	0b be       	out	0x3b, r0	; 59
    1eae:	0f 90       	pop	r0
    1eb0:	09 be       	out	0x39, r0	; 57
    1eb2:	0f 90       	pop	r0
    1eb4:	08 be       	out	0x38, r0	; 56
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	0f 90       	pop	r0
    1ebc:	1f 90       	pop	r1
    1ebe:	18 95       	reti

00001ec0 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    1ec0:	1f 92       	push	r1
    1ec2:	0f 92       	push	r0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	0f 92       	push	r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	08 b6       	in	r0, 0x38	; 56
    1ecc:	0f 92       	push	r0
    1ece:	18 be       	out	0x38, r1	; 56
    1ed0:	09 b6       	in	r0, 0x39	; 57
    1ed2:	0f 92       	push	r0
    1ed4:	19 be       	out	0x39, r1	; 57
    1ed6:	0b b6       	in	r0, 0x3b	; 59
    1ed8:	0f 92       	push	r0
    1eda:	1b be       	out	0x3b, r1	; 59
    1edc:	2f 93       	push	r18
    1ede:	3f 93       	push	r19
    1ee0:	4f 93       	push	r20
    1ee2:	5f 93       	push	r21
    1ee4:	6f 93       	push	r22
    1ee6:	7f 93       	push	r23
    1ee8:	8f 93       	push	r24
    1eea:	9f 93       	push	r25
    1eec:	af 93       	push	r26
    1eee:	bf 93       	push	r27
    1ef0:	ef 93       	push	r30
    1ef2:	ff 93       	push	r31
    1ef4:	1c df       	rcall	.-456    	; 0x1d2e <twim_interrupt_handler>
    1ef6:	ff 91       	pop	r31
    1ef8:	ef 91       	pop	r30
    1efa:	bf 91       	pop	r27
    1efc:	af 91       	pop	r26
    1efe:	9f 91       	pop	r25
    1f00:	8f 91       	pop	r24
    1f02:	7f 91       	pop	r23
    1f04:	6f 91       	pop	r22
    1f06:	5f 91       	pop	r21
    1f08:	4f 91       	pop	r20
    1f0a:	3f 91       	pop	r19
    1f0c:	2f 91       	pop	r18
    1f0e:	0f 90       	pop	r0
    1f10:	0b be       	out	0x3b, r0	; 59
    1f12:	0f 90       	pop	r0
    1f14:	09 be       	out	0x39, r0	; 57
    1f16:	0f 90       	pop	r0
    1f18:	08 be       	out	0x38, r0	; 56
    1f1a:	0f 90       	pop	r0
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	0f 90       	pop	r0
    1f20:	1f 90       	pop	r1
    1f22:	18 95       	reti

00001f24 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1f24:	1f 92       	push	r1
    1f26:	0f 92       	push	r0
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	0f 92       	push	r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	08 b6       	in	r0, 0x38	; 56
    1f30:	0f 92       	push	r0
    1f32:	18 be       	out	0x38, r1	; 56
    1f34:	09 b6       	in	r0, 0x39	; 57
    1f36:	0f 92       	push	r0
    1f38:	19 be       	out	0x39, r1	; 57
    1f3a:	0b b6       	in	r0, 0x3b	; 59
    1f3c:	0f 92       	push	r0
    1f3e:	1b be       	out	0x3b, r1	; 59
    1f40:	2f 93       	push	r18
    1f42:	3f 93       	push	r19
    1f44:	4f 93       	push	r20
    1f46:	5f 93       	push	r21
    1f48:	6f 93       	push	r22
    1f4a:	7f 93       	push	r23
    1f4c:	8f 93       	push	r24
    1f4e:	9f 93       	push	r25
    1f50:	af 93       	push	r26
    1f52:	bf 93       	push	r27
    1f54:	ef 93       	push	r30
    1f56:	ff 93       	push	r31
    1f58:	ea de       	rcall	.-556    	; 0x1d2e <twim_interrupt_handler>
    1f5a:	ff 91       	pop	r31
    1f5c:	ef 91       	pop	r30
    1f5e:	bf 91       	pop	r27
    1f60:	af 91       	pop	r26
    1f62:	9f 91       	pop	r25
    1f64:	8f 91       	pop	r24
    1f66:	7f 91       	pop	r23
    1f68:	6f 91       	pop	r22
    1f6a:	5f 91       	pop	r21
    1f6c:	4f 91       	pop	r20
    1f6e:	3f 91       	pop	r19
    1f70:	2f 91       	pop	r18
    1f72:	0f 90       	pop	r0
    1f74:	0b be       	out	0x3b, r0	; 59
    1f76:	0f 90       	pop	r0
    1f78:	09 be       	out	0x39, r0	; 57
    1f7a:	0f 90       	pop	r0
    1f7c:	08 be       	out	0x38, r0	; 56
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	0f 90       	pop	r0
    1f84:	1f 90       	pop	r1
    1f86:	18 95       	reti

00001f88 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    1f88:	1f 92       	push	r1
    1f8a:	0f 92       	push	r0
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	0f 92       	push	r0
    1f90:	11 24       	eor	r1, r1
    1f92:	08 b6       	in	r0, 0x38	; 56
    1f94:	0f 92       	push	r0
    1f96:	18 be       	out	0x38, r1	; 56
    1f98:	09 b6       	in	r0, 0x39	; 57
    1f9a:	0f 92       	push	r0
    1f9c:	19 be       	out	0x39, r1	; 57
    1f9e:	0b b6       	in	r0, 0x3b	; 59
    1fa0:	0f 92       	push	r0
    1fa2:	1b be       	out	0x3b, r1	; 59
    1fa4:	2f 93       	push	r18
    1fa6:	3f 93       	push	r19
    1fa8:	4f 93       	push	r20
    1faa:	5f 93       	push	r21
    1fac:	6f 93       	push	r22
    1fae:	7f 93       	push	r23
    1fb0:	8f 93       	push	r24
    1fb2:	9f 93       	push	r25
    1fb4:	af 93       	push	r26
    1fb6:	bf 93       	push	r27
    1fb8:	ef 93       	push	r30
    1fba:	ff 93       	push	r31
    1fbc:	b8 de       	rcall	.-656    	; 0x1d2e <twim_interrupt_handler>
    1fbe:	ff 91       	pop	r31
    1fc0:	ef 91       	pop	r30
    1fc2:	bf 91       	pop	r27
    1fc4:	af 91       	pop	r26
    1fc6:	9f 91       	pop	r25
    1fc8:	8f 91       	pop	r24
    1fca:	7f 91       	pop	r23
    1fcc:	6f 91       	pop	r22
    1fce:	5f 91       	pop	r21
    1fd0:	4f 91       	pop	r20
    1fd2:	3f 91       	pop	r19
    1fd4:	2f 91       	pop	r18
    1fd6:	0f 90       	pop	r0
    1fd8:	0b be       	out	0x3b, r0	; 59
    1fda:	0f 90       	pop	r0
    1fdc:	09 be       	out	0x39, r0	; 57
    1fde:	0f 90       	pop	r0
    1fe0:	08 be       	out	0x38, r0	; 56
    1fe2:	0f 90       	pop	r0
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	0f 90       	pop	r0
    1fe8:	1f 90       	pop	r1
    1fea:	18 95       	reti

00001fec <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1fec:	fc 01       	movw	r30, r24
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	95 ff       	sbrs	r25, 5
    1ff2:	fd cf       	rjmp	.-6      	; 0x1fee <usart_putchar+0x2>
    1ff4:	60 83       	st	Z, r22
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	08 95       	ret

00001ffc <usart_getchar>:
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	99 23       	and	r25, r25
    2002:	ec f7       	brge	.-6      	; 0x1ffe <usart_getchar+0x2>
    2004:	80 81       	ld	r24, Z
    2006:	08 95       	ret

00002008 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2008:	4f 92       	push	r4
    200a:	5f 92       	push	r5
    200c:	6f 92       	push	r6
    200e:	7f 92       	push	r7
    2010:	8f 92       	push	r8
    2012:	9f 92       	push	r9
    2014:	af 92       	push	r10
    2016:	bf 92       	push	r11
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	7c 01       	movw	r14, r24
    2024:	4a 01       	movw	r8, r20
    2026:	5b 01       	movw	r10, r22
    2028:	28 01       	movw	r4, r16
    202a:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    202c:	fc 01       	movw	r30, r24
    202e:	84 81       	ldd	r24, Z+4	; 0x04
    2030:	82 ff       	sbrs	r24, 2
    2032:	16 c0       	rjmp	.+44     	; 0x2060 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2034:	d9 01       	movw	r26, r18
    2036:	c8 01       	movw	r24, r16
    2038:	68 94       	set
    203a:	12 f8       	bld	r1, 2
    203c:	b6 95       	lsr	r27
    203e:	a7 95       	ror	r26
    2040:	97 95       	ror	r25
    2042:	87 95       	ror	r24
    2044:	16 94       	lsr	r1
    2046:	d1 f7       	brne	.-12     	; 0x203c <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    2048:	b9 01       	movw	r22, r18
    204a:	a8 01       	movw	r20, r16
    204c:	03 2e       	mov	r0, r19
    204e:	36 e1       	ldi	r19, 0x16	; 22
    2050:	76 95       	lsr	r23
    2052:	67 95       	ror	r22
    2054:	57 95       	ror	r21
    2056:	47 95       	ror	r20
    2058:	3a 95       	dec	r19
    205a:	d1 f7       	brne	.-12     	; 0x2050 <usart_set_baudrate+0x48>
    205c:	30 2d       	mov	r19, r0
    205e:	15 c0       	rjmp	.+42     	; 0x208a <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    2060:	d9 01       	movw	r26, r18
    2062:	c8 01       	movw	r24, r16
    2064:	68 94       	set
    2066:	13 f8       	bld	r1, 3
    2068:	b6 95       	lsr	r27
    206a:	a7 95       	ror	r26
    206c:	97 95       	ror	r25
    206e:	87 95       	ror	r24
    2070:	16 94       	lsr	r1
    2072:	d1 f7       	brne	.-12     	; 0x2068 <usart_set_baudrate+0x60>
		min_rate /= 2;
    2074:	b9 01       	movw	r22, r18
    2076:	a8 01       	movw	r20, r16
    2078:	03 2e       	mov	r0, r19
    207a:	37 e1       	ldi	r19, 0x17	; 23
    207c:	76 95       	lsr	r23
    207e:	67 95       	ror	r22
    2080:	57 95       	ror	r21
    2082:	47 95       	ror	r20
    2084:	3a 95       	dec	r19
    2086:	d1 f7       	brne	.-12     	; 0x207c <usart_set_baudrate+0x74>
    2088:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    208a:	88 15       	cp	r24, r8
    208c:	99 05       	cpc	r25, r9
    208e:	aa 05       	cpc	r26, r10
    2090:	bb 05       	cpc	r27, r11
    2092:	08 f4       	brcc	.+2      	; 0x2096 <usart_set_baudrate+0x8e>
    2094:	a6 c0       	rjmp	.+332    	; 0x21e2 <usart_set_baudrate+0x1da>
    2096:	84 16       	cp	r8, r20
    2098:	95 06       	cpc	r9, r21
    209a:	a6 06       	cpc	r10, r22
    209c:	b7 06       	cpc	r11, r23
    209e:	08 f4       	brcc	.+2      	; 0x20a2 <usart_set_baudrate+0x9a>
    20a0:	a2 c0       	rjmp	.+324    	; 0x21e6 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    20a2:	f7 01       	movw	r30, r14
    20a4:	84 81       	ldd	r24, Z+4	; 0x04
    20a6:	82 fd       	sbrc	r24, 2
    20a8:	04 c0       	rjmp	.+8      	; 0x20b2 <usart_set_baudrate+0xaa>
		baud *= 2;
    20aa:	88 0c       	add	r8, r8
    20ac:	99 1c       	adc	r9, r9
    20ae:	aa 1c       	adc	r10, r10
    20b0:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    20b2:	c3 01       	movw	r24, r6
    20b4:	b2 01       	movw	r22, r4
    20b6:	a5 01       	movw	r20, r10
    20b8:	94 01       	movw	r18, r8
    20ba:	0e 94 6f 2b 	call	0x56de	; 0x56de <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    20be:	2f 3f       	cpi	r18, 0xFF	; 255
    20c0:	31 05       	cpc	r19, r1
    20c2:	41 05       	cpc	r20, r1
    20c4:	51 05       	cpc	r21, r1
    20c6:	08 f4       	brcc	.+2      	; 0x20ca <usart_set_baudrate+0xc2>
    20c8:	90 c0       	rjmp	.+288    	; 0x21ea <usart_set_baudrate+0x1e2>
    20ca:	8f ef       	ldi	r24, 0xFF	; 255
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	c9 ef       	ldi	r28, 0xF9	; 249
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <usart_set_baudrate+0xd8>
    20d6:	28 17       	cp	r18, r24
    20d8:	39 07       	cpc	r19, r25
    20da:	4a 07       	cpc	r20, r26
    20dc:	5b 07       	cpc	r21, r27
    20de:	58 f0       	brcs	.+22     	; 0x20f6 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	aa 1f       	adc	r26, r26
    20e6:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    20e8:	cd 3f       	cpi	r28, 0xFD	; 253
    20ea:	0c f4       	brge	.+2      	; 0x20ee <usart_set_baudrate+0xe6>
			limit |= 1;
    20ec:	81 60       	ori	r24, 0x01	; 1
    20ee:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    20f0:	c7 30       	cpi	r28, 0x07	; 7
    20f2:	89 f7       	brne	.-30     	; 0x20d6 <usart_set_baudrate+0xce>
    20f4:	4f c0       	rjmp	.+158    	; 0x2194 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    20f6:	cc 23       	and	r28, r28
    20f8:	0c f0       	brlt	.+2      	; 0x20fc <usart_set_baudrate+0xf4>
    20fa:	4c c0       	rjmp	.+152    	; 0x2194 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    20fc:	d5 01       	movw	r26, r10
    20fe:	c4 01       	movw	r24, r8
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	aa 1f       	adc	r26, r26
    2106:	bb 1f       	adc	r27, r27
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	aa 1f       	adc	r26, r26
    210e:	bb 1f       	adc	r27, r27
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	aa 1f       	adc	r26, r26
    2116:	bb 1f       	adc	r27, r27
    2118:	48 1a       	sub	r4, r24
    211a:	59 0a       	sbc	r5, r25
    211c:	6a 0a       	sbc	r6, r26
    211e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    2120:	ce 3f       	cpi	r28, 0xFE	; 254
    2122:	f4 f4       	brge	.+60     	; 0x2160 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    2124:	8d ef       	ldi	r24, 0xFD	; 253
    2126:	9f ef       	ldi	r25, 0xFF	; 255
    2128:	8c 1b       	sub	r24, r28
    212a:	91 09       	sbc	r25, r1
    212c:	c7 fd       	sbrc	r28, 7
    212e:	93 95       	inc	r25
    2130:	04 c0       	rjmp	.+8      	; 0x213a <usart_set_baudrate+0x132>
    2132:	44 0c       	add	r4, r4
    2134:	55 1c       	adc	r5, r5
    2136:	66 1c       	adc	r6, r6
    2138:	77 1c       	adc	r7, r7
    213a:	8a 95       	dec	r24
    213c:	d2 f7       	brpl	.-12     	; 0x2132 <usart_set_baudrate+0x12a>
    213e:	d5 01       	movw	r26, r10
    2140:	c4 01       	movw	r24, r8
    2142:	b6 95       	lsr	r27
    2144:	a7 95       	ror	r26
    2146:	97 95       	ror	r25
    2148:	87 95       	ror	r24
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	64 0d       	add	r22, r4
    2150:	75 1d       	adc	r23, r5
    2152:	86 1d       	adc	r24, r6
    2154:	97 1d       	adc	r25, r7
    2156:	a5 01       	movw	r20, r10
    2158:	94 01       	movw	r18, r8
    215a:	0e 94 6f 2b 	call	0x56de	; 0x56de <__udivmodsi4>
    215e:	37 c0       	rjmp	.+110    	; 0x21ce <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	8c 0f       	add	r24, r28
    2164:	a5 01       	movw	r20, r10
    2166:	94 01       	movw	r18, r8
    2168:	04 c0       	rjmp	.+8      	; 0x2172 <usart_set_baudrate+0x16a>
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	44 1f       	adc	r20, r20
    2170:	55 1f       	adc	r21, r21
    2172:	8a 95       	dec	r24
    2174:	d2 f7       	brpl	.-12     	; 0x216a <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    2176:	da 01       	movw	r26, r20
    2178:	c9 01       	movw	r24, r18
    217a:	b6 95       	lsr	r27
    217c:	a7 95       	ror	r26
    217e:	97 95       	ror	r25
    2180:	87 95       	ror	r24
    2182:	bc 01       	movw	r22, r24
    2184:	cd 01       	movw	r24, r26
    2186:	64 0d       	add	r22, r4
    2188:	75 1d       	adc	r23, r5
    218a:	86 1d       	adc	r24, r6
    218c:	97 1d       	adc	r25, r7
    218e:	0e 94 6f 2b 	call	0x56de	; 0x56de <__udivmodsi4>
    2192:	1d c0       	rjmp	.+58     	; 0x21ce <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    2194:	83 e0       	ldi	r24, 0x03	; 3
    2196:	8c 0f       	add	r24, r28
    2198:	a5 01       	movw	r20, r10
    219a:	94 01       	movw	r18, r8
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <usart_set_baudrate+0x19e>
    219e:	22 0f       	add	r18, r18
    21a0:	33 1f       	adc	r19, r19
    21a2:	44 1f       	adc	r20, r20
    21a4:	55 1f       	adc	r21, r21
    21a6:	8a 95       	dec	r24
    21a8:	d2 f7       	brpl	.-12     	; 0x219e <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    21aa:	da 01       	movw	r26, r20
    21ac:	c9 01       	movw	r24, r18
    21ae:	b6 95       	lsr	r27
    21b0:	a7 95       	ror	r26
    21b2:	97 95       	ror	r25
    21b4:	87 95       	ror	r24
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	64 0d       	add	r22, r4
    21bc:	75 1d       	adc	r23, r5
    21be:	86 1d       	adc	r24, r6
    21c0:	97 1d       	adc	r25, r7
    21c2:	0e 94 6f 2b 	call	0x56de	; 0x56de <__udivmodsi4>
    21c6:	21 50       	subi	r18, 0x01	; 1
    21c8:	31 09       	sbc	r19, r1
    21ca:	41 09       	sbc	r20, r1
    21cc:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    21ce:	83 2f       	mov	r24, r19
    21d0:	8f 70       	andi	r24, 0x0F	; 15
    21d2:	c2 95       	swap	r28
    21d4:	c0 7f       	andi	r28, 0xF0	; 240
    21d6:	c8 2b       	or	r28, r24
    21d8:	f7 01       	movw	r30, r14
    21da:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    21dc:	26 83       	std	Z+6, r18	; 0x06

	return true;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	18 c0       	rjmp	.+48     	; 0x2212 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	16 c0       	rjmp	.+44     	; 0x2212 <usart_set_baudrate+0x20a>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    21ea:	d5 01       	movw	r26, r10
    21ec:	c4 01       	movw	r24, r8
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	aa 1f       	adc	r26, r26
    21f4:	bb 1f       	adc	r27, r27
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	aa 1f       	adc	r26, r26
    21fc:	bb 1f       	adc	r27, r27
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	aa 1f       	adc	r26, r26
    2204:	bb 1f       	adc	r27, r27
    2206:	48 1a       	sub	r4, r24
    2208:	59 0a       	sbc	r5, r25
    220a:	6a 0a       	sbc	r6, r26
    220c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    220e:	c9 ef       	ldi	r28, 0xF9	; 249
    2210:	89 cf       	rjmp	.-238    	; 0x2124 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    2212:	cf 91       	pop	r28
    2214:	1f 91       	pop	r17
    2216:	0f 91       	pop	r16
    2218:	ff 90       	pop	r15
    221a:	ef 90       	pop	r14
    221c:	bf 90       	pop	r11
    221e:	af 90       	pop	r10
    2220:	9f 90       	pop	r9
    2222:	8f 90       	pop	r8
    2224:	7f 90       	pop	r7
    2226:	6f 90       	pop	r6
    2228:	5f 90       	pop	r5
    222a:	4f 90       	pop	r4
    222c:	08 95       	ret

0000222e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	ec 01       	movw	r28, r24
    2238:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	09 f4       	brne	.+2      	; 0x2240 <usart_init_rs232+0x12>
    223e:	36 c1       	rjmp	.+620    	; 0x24ac <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2240:	80 3c       	cpi	r24, 0xC0	; 192
    2242:	91 05       	cpc	r25, r1
    2244:	21 f4       	brne	.+8      	; 0x224e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2246:	60 e1       	ldi	r22, 0x10	; 16
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	d2 d3       	rcall	.+1956   	; 0x29f0 <sysclk_enable_module>
    224c:	2f c1       	rjmp	.+606    	; 0x24ac <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    224e:	c0 34       	cpi	r28, 0x40	; 64
    2250:	84 e0       	ldi	r24, 0x04	; 4
    2252:	d8 07       	cpc	r29, r24
    2254:	21 f4       	brne	.+8      	; 0x225e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2256:	68 e0       	ldi	r22, 0x08	; 8
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	ca d3       	rcall	.+1940   	; 0x29f0 <sysclk_enable_module>
    225c:	27 c1       	rjmp	.+590    	; 0x24ac <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    225e:	c1 15       	cp	r28, r1
    2260:	e4 e0       	ldi	r30, 0x04	; 4
    2262:	de 07       	cpc	r29, r30
    2264:	21 f4       	brne	.+8      	; 0x226e <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2266:	64 e0       	ldi	r22, 0x04	; 4
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	c2 d3       	rcall	.+1924   	; 0x29f0 <sysclk_enable_module>
    226c:	1f c1       	rjmp	.+574    	; 0x24ac <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    226e:	c0 38       	cpi	r28, 0x80	; 128
    2270:	f1 e0       	ldi	r31, 0x01	; 1
    2272:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2274:	21 f4       	brne	.+8      	; 0x227e <usart_init_rs232+0x50>
    2276:	62 e0       	ldi	r22, 0x02	; 2
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	ba d3       	rcall	.+1908   	; 0x29f0 <sysclk_enable_module>
    227c:	17 c1       	rjmp	.+558    	; 0x24ac <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    227e:	c1 15       	cp	r28, r1
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2284:	21 f4       	brne	.+8      	; 0x228e <usart_init_rs232+0x60>
    2286:	61 e0       	ldi	r22, 0x01	; 1
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	b2 d3       	rcall	.+1892   	; 0x29f0 <sysclk_enable_module>
    228c:	0f c1       	rjmp	.+542    	; 0x24ac <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    228e:	c0 38       	cpi	r28, 0x80	; 128
    2290:	e3 e0       	ldi	r30, 0x03	; 3
    2292:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2294:	21 f4       	brne	.+8      	; 0x229e <usart_init_rs232+0x70>
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	aa d3       	rcall	.+1876   	; 0x29f0 <sysclk_enable_module>
    229c:	07 c1       	rjmp	.+526    	; 0x24ac <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    229e:	c0 39       	cpi	r28, 0x90	; 144
    22a0:	f3 e0       	ldi	r31, 0x03	; 3
    22a2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    22a4:	21 f4       	brne	.+8      	; 0x22ae <usart_init_rs232+0x80>
    22a6:	61 e0       	ldi	r22, 0x01	; 1
    22a8:	82 e0       	ldi	r24, 0x02	; 2
    22aa:	a2 d3       	rcall	.+1860   	; 0x29f0 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    22ac:	ff c0       	rjmp	.+510    	; 0x24ac <usart_init_rs232+0x27e>
    22ae:	c1 15       	cp	r28, r1
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    22b4:	21 f4       	brne	.+8      	; 0x22be <usart_init_rs232+0x90>
    22b6:	62 e0       	ldi	r22, 0x02	; 2
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	9a d3       	rcall	.+1844   	; 0x29f0 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    22bc:	f7 c0       	rjmp	.+494    	; 0x24ac <usart_init_rs232+0x27e>
    22be:	c0 34       	cpi	r28, 0x40	; 64
    22c0:	e2 e0       	ldi	r30, 0x02	; 2
    22c2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    22c4:	21 f4       	brne	.+8      	; 0x22ce <usart_init_rs232+0xa0>
    22c6:	62 e0       	ldi	r22, 0x02	; 2
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	92 d3       	rcall	.+1828   	; 0x29f0 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    22cc:	ef c0       	rjmp	.+478    	; 0x24ac <usart_init_rs232+0x27e>
    22ce:	c1 15       	cp	r28, r1
    22d0:	f3 e0       	ldi	r31, 0x03	; 3
    22d2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    22d4:	21 f4       	brne	.+8      	; 0x22de <usart_init_rs232+0xb0>
    22d6:	64 e0       	ldi	r22, 0x04	; 4
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	8a d3       	rcall	.+1812   	; 0x29f0 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    22dc:	e7 c0       	rjmp	.+462    	; 0x24ac <usart_init_rs232+0x27e>
    22de:	c0 32       	cpi	r28, 0x20	; 32
    22e0:	83 e0       	ldi	r24, 0x03	; 3
    22e2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    22e4:	21 f4       	brne	.+8      	; 0x22ee <usart_init_rs232+0xc0>
    22e6:	64 e0       	ldi	r22, 0x04	; 4
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	82 d3       	rcall	.+1796   	; 0x29f0 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    22ec:	df c0       	rjmp	.+446    	; 0x24ac <usart_init_rs232+0x27e>
    22ee:	c1 15       	cp	r28, r1
    22f0:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    22f2:	de 07       	cpc	r29, r30
    22f4:	21 f4       	brne	.+8      	; 0x22fe <usart_init_rs232+0xd0>
    22f6:	61 e0       	ldi	r22, 0x01	; 1
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	7a d3       	rcall	.+1780   	; 0x29f0 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    22fc:	d7 c0       	rjmp	.+430    	; 0x24ac <usart_init_rs232+0x27e>
    22fe:	c1 15       	cp	r28, r1
    2300:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2302:	df 07       	cpc	r29, r31
    2304:	21 f4       	brne	.+8      	; 0x230e <usart_init_rs232+0xe0>
    2306:	61 e0       	ldi	r22, 0x01	; 1
    2308:	84 e0       	ldi	r24, 0x04	; 4
    230a:	72 d3       	rcall	.+1764   	; 0x29f0 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    230c:	cf c0       	rjmp	.+414    	; 0x24ac <usart_init_rs232+0x27e>
    230e:	c1 15       	cp	r28, r1
    2310:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2312:	d8 07       	cpc	r29, r24
    2314:	21 f4       	brne	.+8      	; 0x231e <usart_init_rs232+0xf0>
    2316:	61 e0       	ldi	r22, 0x01	; 1
    2318:	85 e0       	ldi	r24, 0x05	; 5
    231a:	6a d3       	rcall	.+1748   	; 0x29f0 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    231c:	c7 c0       	rjmp	.+398    	; 0x24ac <usart_init_rs232+0x27e>
    231e:	c1 15       	cp	r28, r1
    2320:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2322:	de 07       	cpc	r29, r30
    2324:	21 f4       	brne	.+8      	; 0x232e <usart_init_rs232+0x100>
    2326:	61 e0       	ldi	r22, 0x01	; 1
    2328:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    232a:	62 d3       	rcall	.+1732   	; 0x29f0 <sysclk_enable_module>
    232c:	bf c0       	rjmp	.+382    	; 0x24ac <usart_init_rs232+0x27e>
    232e:	c0 34       	cpi	r28, 0x40	; 64
    2330:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2332:	df 07       	cpc	r29, r31
    2334:	21 f4       	brne	.+8      	; 0x233e <usart_init_rs232+0x110>
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    233a:	5a d3       	rcall	.+1716   	; 0x29f0 <sysclk_enable_module>
    233c:	b7 c0       	rjmp	.+366    	; 0x24ac <usart_init_rs232+0x27e>
    233e:	c0 34       	cpi	r28, 0x40	; 64
    2340:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2342:	d8 07       	cpc	r29, r24
    2344:	21 f4       	brne	.+8      	; 0x234e <usart_init_rs232+0x120>
    2346:	62 e0       	ldi	r22, 0x02	; 2
    2348:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    234a:	52 d3       	rcall	.+1700   	; 0x29f0 <sysclk_enable_module>
    234c:	af c0       	rjmp	.+350    	; 0x24ac <usart_init_rs232+0x27e>
    234e:	c0 34       	cpi	r28, 0x40	; 64
    2350:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2352:	de 07       	cpc	r29, r30
    2354:	21 f4       	brne	.+8      	; 0x235e <usart_init_rs232+0x130>
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    235a:	4a d3       	rcall	.+1684   	; 0x29f0 <sysclk_enable_module>
    235c:	a7 c0       	rjmp	.+334    	; 0x24ac <usart_init_rs232+0x27e>
    235e:	c0 34       	cpi	r28, 0x40	; 64
    2360:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2362:	df 07       	cpc	r29, r31
    2364:	21 f4       	brne	.+8      	; 0x236e <usart_init_rs232+0x140>
    2366:	62 e0       	ldi	r22, 0x02	; 2
    2368:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    236a:	42 d3       	rcall	.+1668   	; 0x29f0 <sysclk_enable_module>
    236c:	9f c0       	rjmp	.+318    	; 0x24ac <usart_init_rs232+0x27e>
    236e:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2370:	88 e0       	ldi	r24, 0x08	; 8
    2372:	d8 07       	cpc	r29, r24
    2374:	21 f4       	brne	.+8      	; 0x237e <usart_init_rs232+0x150>
    2376:	64 e0       	ldi	r22, 0x04	; 4
    2378:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    237a:	3a d3       	rcall	.+1652   	; 0x29f0 <sysclk_enable_module>
    237c:	97 c0       	rjmp	.+302    	; 0x24ac <usart_init_rs232+0x27e>
    237e:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2380:	e9 e0       	ldi	r30, 0x09	; 9
    2382:	de 07       	cpc	r29, r30
    2384:	21 f4       	brne	.+8      	; 0x238e <usart_init_rs232+0x160>
    2386:	64 e0       	ldi	r22, 0x04	; 4
    2388:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    238a:	32 d3       	rcall	.+1636   	; 0x29f0 <sysclk_enable_module>
    238c:	8f c0       	rjmp	.+286    	; 0x24ac <usart_init_rs232+0x27e>
    238e:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2390:	fa e0       	ldi	r31, 0x0A	; 10
    2392:	df 07       	cpc	r29, r31
    2394:	21 f4       	brne	.+8      	; 0x239e <usart_init_rs232+0x170>
    2396:	64 e0       	ldi	r22, 0x04	; 4
    2398:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    239a:	2a d3       	rcall	.+1620   	; 0x29f0 <sysclk_enable_module>
    239c:	87 c0       	rjmp	.+270    	; 0x24ac <usart_init_rs232+0x27e>
    239e:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    23a0:	8b e0       	ldi	r24, 0x0B	; 11
    23a2:	d8 07       	cpc	r29, r24
    23a4:	21 f4       	brne	.+8      	; 0x23ae <usart_init_rs232+0x180>
    23a6:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    23a8:	86 e0       	ldi	r24, 0x06	; 6
    23aa:	22 d3       	rcall	.+1604   	; 0x29f0 <sysclk_enable_module>
    23ac:	7f c0       	rjmp	.+254    	; 0x24ac <usart_init_rs232+0x27e>
    23ae:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    23b0:	e8 e0       	ldi	r30, 0x08	; 8
    23b2:	de 07       	cpc	r29, r30
    23b4:	21 f4       	brne	.+8      	; 0x23be <usart_init_rs232+0x190>
    23b6:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	1a d3       	rcall	.+1588   	; 0x29f0 <sysclk_enable_module>
    23bc:	77 c0       	rjmp	.+238    	; 0x24ac <usart_init_rs232+0x27e>
    23be:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    23c0:	f9 e0       	ldi	r31, 0x09	; 9
    23c2:	df 07       	cpc	r29, r31
    23c4:	21 f4       	brne	.+8      	; 0x23ce <usart_init_rs232+0x1a0>
    23c6:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    23c8:	84 e0       	ldi	r24, 0x04	; 4
    23ca:	12 d3       	rcall	.+1572   	; 0x29f0 <sysclk_enable_module>
    23cc:	6f c0       	rjmp	.+222    	; 0x24ac <usart_init_rs232+0x27e>
    23ce:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    23d0:	8a e0       	ldi	r24, 0x0A	; 10
    23d2:	d8 07       	cpc	r29, r24
    23d4:	21 f4       	brne	.+8      	; 0x23de <usart_init_rs232+0x1b0>
    23d6:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    23d8:	85 e0       	ldi	r24, 0x05	; 5
    23da:	0a d3       	rcall	.+1556   	; 0x29f0 <sysclk_enable_module>
    23dc:	67 c0       	rjmp	.+206    	; 0x24ac <usart_init_rs232+0x27e>
    23de:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    23e0:	eb e0       	ldi	r30, 0x0B	; 11
    23e2:	de 07       	cpc	r29, r30
    23e4:	21 f4       	brne	.+8      	; 0x23ee <usart_init_rs232+0x1c0>
    23e6:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    23e8:	86 e0       	ldi	r24, 0x06	; 6
    23ea:	02 d3       	rcall	.+1540   	; 0x29f0 <sysclk_enable_module>
    23ec:	5f c0       	rjmp	.+190    	; 0x24ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    23ee:	c0 3a       	cpi	r28, 0xA0	; 160
    23f0:	f8 e0       	ldi	r31, 0x08	; 8
    23f2:	df 07       	cpc	r29, r31
    23f4:	21 f4       	brne	.+8      	; 0x23fe <usart_init_rs232+0x1d0>
    23f6:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	fa d2       	rcall	.+1524   	; 0x29f0 <sysclk_enable_module>
    23fc:	57 c0       	rjmp	.+174    	; 0x24ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    23fe:	c0 3a       	cpi	r28, 0xA0	; 160
    2400:	89 e0       	ldi	r24, 0x09	; 9
    2402:	d8 07       	cpc	r29, r24
    2404:	21 f4       	brne	.+8      	; 0x240e <usart_init_rs232+0x1e0>
    2406:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2408:	84 e0       	ldi	r24, 0x04	; 4
    240a:	f2 d2       	rcall	.+1508   	; 0x29f0 <sysclk_enable_module>
    240c:	4f c0       	rjmp	.+158    	; 0x24ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    240e:	c0 3a       	cpi	r28, 0xA0	; 160
    2410:	ea e0       	ldi	r30, 0x0A	; 10
    2412:	de 07       	cpc	r29, r30
    2414:	21 f4       	brne	.+8      	; 0x241e <usart_init_rs232+0x1f0>
    2416:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2418:	85 e0       	ldi	r24, 0x05	; 5
    241a:	ea d2       	rcall	.+1492   	; 0x29f0 <sysclk_enable_module>
    241c:	47 c0       	rjmp	.+142    	; 0x24ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    241e:	c0 3a       	cpi	r28, 0xA0	; 160
    2420:	fb e0       	ldi	r31, 0x0B	; 11
    2422:	df 07       	cpc	r29, r31
    2424:	21 f4       	brne	.+8      	; 0x242e <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2426:	60 e1       	ldi	r22, 0x10	; 16
    2428:	86 e0       	ldi	r24, 0x06	; 6
    242a:	e2 d2       	rcall	.+1476   	; 0x29f0 <sysclk_enable_module>
    242c:	3f c0       	rjmp	.+126    	; 0x24ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    242e:	c0 3b       	cpi	r28, 0xB0	; 176
    2430:	88 e0       	ldi	r24, 0x08	; 8
    2432:	d8 07       	cpc	r29, r24
    2434:	21 f4       	brne	.+8      	; 0x243e <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2436:	60 e2       	ldi	r22, 0x20	; 32
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	da d2       	rcall	.+1460   	; 0x29f0 <sysclk_enable_module>
    243c:	37 c0       	rjmp	.+110    	; 0x24ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    243e:	c0 3b       	cpi	r28, 0xB0	; 176
    2440:	e9 e0       	ldi	r30, 0x09	; 9
    2442:	de 07       	cpc	r29, r30
    2444:	21 f4       	brne	.+8      	; 0x244e <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2446:	60 e2       	ldi	r22, 0x20	; 32
    2448:	84 e0       	ldi	r24, 0x04	; 4
    244a:	d2 d2       	rcall	.+1444   	; 0x29f0 <sysclk_enable_module>
    244c:	2f c0       	rjmp	.+94     	; 0x24ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    244e:	c0 3b       	cpi	r28, 0xB0	; 176
    2450:	fa e0       	ldi	r31, 0x0A	; 10
    2452:	df 07       	cpc	r29, r31
    2454:	21 f4       	brne	.+8      	; 0x245e <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2456:	60 e2       	ldi	r22, 0x20	; 32
    2458:	85 e0       	ldi	r24, 0x05	; 5
    245a:	ca d2       	rcall	.+1428   	; 0x29f0 <sysclk_enable_module>
    245c:	27 c0       	rjmp	.+78     	; 0x24ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    245e:	c0 3b       	cpi	r28, 0xB0	; 176
    2460:	8b e0       	ldi	r24, 0x0B	; 11
    2462:	d8 07       	cpc	r29, r24
    2464:	21 f4       	brne	.+8      	; 0x246e <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2466:	60 e2       	ldi	r22, 0x20	; 32
    2468:	86 e0       	ldi	r24, 0x06	; 6
    246a:	c2 d2       	rcall	.+1412   	; 0x29f0 <sysclk_enable_module>
    246c:	1f c0       	rjmp	.+62     	; 0x24ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    246e:	c0 38       	cpi	r28, 0x80	; 128
    2470:	e4 e0       	ldi	r30, 0x04	; 4
    2472:	de 07       	cpc	r29, r30
    2474:	21 f4       	brne	.+8      	; 0x247e <usart_init_rs232+0x250>
    2476:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    2478:	83 e0       	ldi	r24, 0x03	; 3
    247a:	ba d2       	rcall	.+1396   	; 0x29f0 <sysclk_enable_module>
    247c:	17 c0       	rjmp	.+46     	; 0x24ac <usart_init_rs232+0x27e>
    247e:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2480:	f4 e0       	ldi	r31, 0x04	; 4
    2482:	df 07       	cpc	r29, r31
    2484:	21 f4       	brne	.+8      	; 0x248e <usart_init_rs232+0x260>
    2486:	60 e4       	ldi	r22, 0x40	; 64
    2488:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    248a:	b2 d2       	rcall	.+1380   	; 0x29f0 <sysclk_enable_module>
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <usart_init_rs232+0x27e>
    248e:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2490:	84 e0       	ldi	r24, 0x04	; 4
    2492:	d8 07       	cpc	r29, r24
    2494:	21 f4       	brne	.+8      	; 0x249e <usart_init_rs232+0x270>
    2496:	60 e4       	ldi	r22, 0x40	; 64
    2498:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    249a:	aa d2       	rcall	.+1364   	; 0x29f0 <sysclk_enable_module>
    249c:	07 c0       	rjmp	.+14     	; 0x24ac <usart_init_rs232+0x27e>
    249e:	c0 3b       	cpi	r28, 0xB0	; 176
    24a0:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    24a2:	de 07       	cpc	r29, r30
    24a4:	19 f4       	brne	.+6      	; 0x24ac <usart_init_rs232+0x27e>
    24a6:	60 e4       	ldi	r22, 0x40	; 64
    24a8:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    24aa:	a2 d2       	rcall	.+1348   	; 0x29f0 <sysclk_enable_module>
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	f8 01       	movw	r30, r16
    24b4:	95 81       	ldd	r25, Z+5	; 0x05
    24b6:	84 81       	ldd	r24, Z+4	; 0x04
    24b8:	89 2b       	or	r24, r25
    24ba:	96 81       	ldd	r25, Z+6	; 0x06
    24bc:	91 11       	cpse	r25, r1
    24be:	98 e0       	ldi	r25, 0x08	; 8
    24c0:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	f8 01       	movw	r30, r16
    24c6:	40 81       	ld	r20, Z
    24c8:	51 81       	ldd	r21, Z+1	; 0x01
    24ca:	62 81       	ldd	r22, Z+2	; 0x02
    24cc:	73 81       	ldd	r23, Z+3	; 0x03
    24ce:	00 e0       	ldi	r16, 0x00	; 0
    24d0:	18 e4       	ldi	r17, 0x48	; 72
    24d2:	28 ee       	ldi	r18, 0xE8	; 232
    24d4:	31 e0       	ldi	r19, 0x01	; 1
    24d6:	ce 01       	movw	r24, r28
    24d8:	97 dd       	rcall	.-1234   	; 0x2008 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    24da:	9c 81       	ldd	r25, Y+4	; 0x04
    24dc:	98 60       	ori	r25, 0x08	; 8
    24de:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	90 61       	ori	r25, 0x10	; 16
    24e4:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	0f 91       	pop	r16
    24ee:	08 95       	ret

000024f0 <imu_heading>:
	return bno055_euler.p;
}

double imu_heading()
{
	return bno055_euler.h;
    24f0:	60 91 85 21 	lds	r22, 0x2185	; 0x802185 <bno055_euler>
    24f4:	70 91 86 21 	lds	r23, 0x2186	; 0x802186 <bno055_euler+0x1>
    24f8:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <bno055_euler+0x2>
    24fc:	90 91 88 21 	lds	r25, 0x2188	; 0x802188 <bno055_euler+0x3>
}
    2500:	08 95       	ret

00002502 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2502:	04 c0       	rjmp	.+8      	; 0x250c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2504:	61 50       	subi	r22, 0x01	; 1
    2506:	71 09       	sbc	r23, r1
    2508:	81 09       	sbc	r24, r1
    250a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    250c:	61 15       	cp	r22, r1
    250e:	71 05       	cpc	r23, r1
    2510:	81 05       	cpc	r24, r1
    2512:	91 05       	cpc	r25, r1
    2514:	b9 f7       	brne	.-18     	; 0x2504 <__portable_avr_delay_cycles+0x2>
    2516:	08 95       	ret

00002518 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
    2518:	e0 e4       	ldi	r30, 0x40	; 64
    251a:	f6 e0       	ldi	r31, 0x06	; 6
    251c:	94 81       	ldd	r25, Z+4	; 0x04
    251e:	80 e1       	ldi	r24, 0x10	; 16
    2520:	89 27       	eor	r24, r25
    2522:	84 83       	std	Z+4, r24	; 0x04
    2524:	08 95       	ret

00002526 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    2526:	e0 e4       	ldi	r30, 0x40	; 64
    2528:	f6 e0       	ldi	r31, 0x06	; 6
    252a:	84 81       	ldd	r24, Z+4	; 0x04
    252c:	80 61       	ori	r24, 0x10	; 16
    252e:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
    2530:	f3 df       	rcall	.-26     	; 0x2518 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
    2532:	8e e1       	ldi	r24, 0x1E	; 30
    2534:	b9 d0       	rcall	.+370    	; 0x26a8 <spi_write>
	delay_ms(3);
    2536:	60 e8       	ldi	r22, 0x80	; 128
    2538:	7e e3       	ldi	r23, 0x3E	; 62
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    253e:	e1 df       	rcall	.-62     	; 0x2502 <__portable_avr_delay_cycles>
    2540:	eb df       	rcall	.-42     	; 0x2518 <flip_ms5607>
	delay_ms(2);
    2542:	6b ea       	ldi	r22, 0xAB	; 171
    2544:	79 e2       	ldi	r23, 0x29	; 41
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	db cf       	rjmp	.-74     	; 0x2502 <__portable_avr_delay_cycles>
    254c:	08 95       	ret

0000254e <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
    2554:	e1 df       	rcall	.-62     	; 0x2518 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
    2556:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
    2558:	a7 d0       	rcall	.+334    	; 0x26a8 <spi_write>
    255a:	97 d0       	rcall	.+302    	; 0x268a <spi_read>
    255c:	c8 2f       	mov	r28, r24
    255e:	d0 e0       	ldi	r29, 0x00	; 0
    2560:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
    2562:	cc 27       	eor	r28, r28
    2564:	92 d0       	rcall	.+292    	; 0x268a <spi_read>
    2566:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
    2568:	d7 df       	rcall	.-82     	; 0x2518 <flip_ms5607>
    256a:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <ms5607_convert_d1>:
    2572:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
    2574:	df 93       	push	r29
    2576:	00 d0       	rcall	.+0      	; 0x2578 <ms5607_convert_d1+0x6>
    2578:	1f 92       	push	r1
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    257e:	19 82       	std	Y+1, r1	; 0x01
    2580:	1a 82       	std	Y+2, r1	; 0x02
    2582:	1b 82       	std	Y+3, r1	; 0x03
    2584:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
    2586:	c8 df       	rcall	.-112    	; 0x2518 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
    2588:	88 e4       	ldi	r24, 0x48	; 72
    258a:	8e d0       	rcall	.+284    	; 0x26a8 <spi_write>
	delay_ms(10);
    258c:	66 e5       	ldi	r22, 0x56	; 86
    258e:	70 ed       	ldi	r23, 0xD0	; 208
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    2594:	b6 df       	rcall	.-148    	; 0x2502 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    2596:	c0 df       	rcall	.-128    	; 0x2518 <flip_ms5607>
    2598:	bf df       	rcall	.-130    	; 0x2518 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	85 d0       	rcall	.+266    	; 0x26a8 <spi_write>
    259e:	75 d0       	rcall	.+234    	; 0x268a <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a0 e0       	ldi	r26, 0x00	; 0
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	dc 01       	movw	r26, r24
    25a8:	99 27       	eor	r25, r25
    25aa:	88 27       	eor	r24, r24
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	ab 83       	std	Y+3, r26	; 0x03
    25b2:	bc 83       	std	Y+4, r27	; 0x04
    25b4:	6a d0       	rcall	.+212    	; 0x268a <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    25b6:	49 81       	ldd	r20, Y+1	; 0x01
    25b8:	5a 81       	ldd	r21, Y+2	; 0x02
    25ba:	6b 81       	ldd	r22, Y+3	; 0x03
    25bc:	7c 81       	ldd	r23, Y+4	; 0x04
    25be:	58 2b       	or	r21, r24
    25c0:	49 83       	std	Y+1, r20	; 0x01
    25c2:	5a 83       	std	Y+2, r21	; 0x02
    25c4:	6b 83       	std	Y+3, r22	; 0x03
    25c6:	7c 83       	std	Y+4, r23	; 0x04
    25c8:	60 d0       	rcall	.+192    	; 0x268a <spi_read>
	rx_data |= spi_read();
    25ca:	49 81       	ldd	r20, Y+1	; 0x01
    25cc:	5a 81       	ldd	r21, Y+2	; 0x02
    25ce:	6b 81       	ldd	r22, Y+3	; 0x03
    25d0:	7c 81       	ldd	r23, Y+4	; 0x04
    25d2:	48 2b       	or	r20, r24
    25d4:	49 83       	std	Y+1, r20	; 0x01
    25d6:	5a 83       	std	Y+2, r21	; 0x02
    25d8:	6b 83       	std	Y+3, r22	; 0x03
    25da:	7c 83       	std	Y+4, r23	; 0x04
    25dc:	9d df       	rcall	.-198    	; 0x2518 <flip_ms5607>
	flip_ms5607();
    25de:	69 81       	ldd	r22, Y+1	; 0x01
    25e0:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	9c 81       	ldd	r25, Y+4	; 0x04
    25e6:	24 96       	adiw	r28, 0x04	; 4
    25e8:	cd bf       	out	0x3d, r28	; 61
}
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

000025f2 <ms5607_convert_d2>:
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <ms5607_convert_d2+0x6>
    25f8:	1f 92       	push	r1
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    25fe:	19 82       	std	Y+1, r1	; 0x01
    2600:	1a 82       	std	Y+2, r1	; 0x02
    2602:	1b 82       	std	Y+3, r1	; 0x03
    2604:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
    2606:	88 df       	rcall	.-240    	; 0x2518 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
    2608:	88 e5       	ldi	r24, 0x58	; 88
    260a:	4e d0       	rcall	.+156    	; 0x26a8 <spi_write>
	delay_ms(10);
    260c:	66 e5       	ldi	r22, 0x56	; 86
    260e:	70 ed       	ldi	r23, 0xD0	; 208
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    2614:	76 df       	rcall	.-276    	; 0x2502 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    2616:	80 df       	rcall	.-256    	; 0x2518 <flip_ms5607>
    2618:	7f df       	rcall	.-258    	; 0x2518 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	45 d0       	rcall	.+138    	; 0x26a8 <spi_write>
    261e:	35 d0       	rcall	.+106    	; 0x268a <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 e0       	ldi	r26, 0x00	; 0
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	dc 01       	movw	r26, r24
    2628:	99 27       	eor	r25, r25
    262a:	88 27       	eor	r24, r24
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	ab 83       	std	Y+3, r26	; 0x03
    2632:	bc 83       	std	Y+4, r27	; 0x04
    2634:	2a d0       	rcall	.+84     	; 0x268a <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    2636:	49 81       	ldd	r20, Y+1	; 0x01
    2638:	5a 81       	ldd	r21, Y+2	; 0x02
    263a:	6b 81       	ldd	r22, Y+3	; 0x03
    263c:	7c 81       	ldd	r23, Y+4	; 0x04
    263e:	58 2b       	or	r21, r24
    2640:	49 83       	std	Y+1, r20	; 0x01
    2642:	5a 83       	std	Y+2, r21	; 0x02
    2644:	6b 83       	std	Y+3, r22	; 0x03
    2646:	7c 83       	std	Y+4, r23	; 0x04
    2648:	20 d0       	rcall	.+64     	; 0x268a <spi_read>
	rx_data |= spi_read();
    264a:	49 81       	ldd	r20, Y+1	; 0x01
    264c:	5a 81       	ldd	r21, Y+2	; 0x02
    264e:	6b 81       	ldd	r22, Y+3	; 0x03
    2650:	7c 81       	ldd	r23, Y+4	; 0x04
    2652:	48 2b       	or	r20, r24
    2654:	49 83       	std	Y+1, r20	; 0x01
    2656:	5a 83       	std	Y+2, r21	; 0x02
    2658:	6b 83       	std	Y+3, r22	; 0x03
    265a:	7c 83       	std	Y+4, r23	; 0x04
    265c:	5d df       	rcall	.-326    	; 0x2518 <flip_ms5607>
	flip_ms5607();
    265e:	69 81       	ldd	r22, Y+1	; 0x01
    2660:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	24 96       	adiw	r28, 0x04	; 4
    2668:	cd bf       	out	0x3d, r28	; 61
}
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	df 91       	pop	r29
    266e:	cf 91       	pop	r28
    2670:	08 95       	ret

00002672 <spi_init>:
    2672:	e0 e4       	ldi	r30, 0x40	; 64
    2674:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
    2676:	80 81       	ld	r24, Z
    2678:	80 6b       	ori	r24, 0xB0	; 176
    267a:	80 83       	st	Z, r24
    267c:	68 e0       	ldi	r22, 0x08	; 8
    267e:	83 e0       	ldi	r24, 0x03	; 3
    2680:	b7 d1       	rcall	.+878    	; 0x29f0 <sysclk_enable_module>
    2682:	8c e5       	ldi	r24, 0x5C	; 92
    2684:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    2688:	08 95       	ret

0000268a <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
    268a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    268c:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    2694:	e0 ec       	ldi	r30, 0xC0	; 192
    2696:	f8 e0       	ldi	r31, 0x08	; 8
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	88 23       	and	r24, r24
    269c:	ec f7       	brge	.-6      	; 0x2698 <spi_read+0xe>
	sei();
    269e:	78 94       	sei
	SREG=oldInterruptState;
    26a0:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
    26a2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    26a6:	08 95       	ret

000026a8 <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
    26a8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    26aa:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
    26ac:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
    26b0:	e0 ec       	ldi	r30, 0xC0	; 192
    26b2:	f8 e0       	ldi	r31, 0x08	; 8
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	88 23       	and	r24, r24
    26b8:	ec f7       	brge	.-6      	; 0x26b4 <spi_write+0xc>
	sei();
    26ba:	78 94       	sei
	SREG=oldInterruptState;
    26bc:	9f bf       	out	0x3f, r25	; 63
    26be:	08 95       	ret

000026c0 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    26c6:	9a dc       	rcall	.-1740   	; 0x1ffc <usart_getchar>
    26c8:	88 83       	st	Y, r24
}
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    26d0:	8d cc       	rjmp	.-1766   	; 0x1fec <usart_putchar>
}
    26d2:	08 95       	ret

000026d4 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	27 97       	sbiw	r28, 0x07	; 7
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    26e2:	60 e1       	ldi	r22, 0x10	; 16
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	84 d1       	rcall	.+776    	; 0x29f0 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    26e8:	e0 e4       	ldi	r30, 0x40	; 64
    26ea:	f6 e0       	ldi	r31, 0x06	; 6
    26ec:	80 81       	ld	r24, Z
    26ee:	88 60       	ori	r24, 0x08	; 8
    26f0:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    26f2:	80 ea       	ldi	r24, 0xA0	; 160
    26f4:	98 e0       	ldi	r25, 0x08	; 8
    26f6:	80 93 64 21 	sts	0x2164, r24	; 0x802164 <stdio_base>
    26fa:	90 93 65 21 	sts	0x2165, r25	; 0x802165 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    26fe:	88 e6       	ldi	r24, 0x68	; 104
    2700:	93 e1       	ldi	r25, 0x13	; 19
    2702:	80 93 62 21 	sts	0x2162, r24	; 0x802162 <ptr_put>
    2706:	90 93 63 21 	sts	0x2163, r25	; 0x802163 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    270a:	80 e6       	ldi	r24, 0x60	; 96
    270c:	93 e1       	ldi	r25, 0x13	; 19
    270e:	80 93 60 21 	sts	0x2160, r24	; 0x802160 <ptr_get>
    2712:	90 93 61 21 	sts	0x2161, r25	; 0x802161 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    2716:	e6 e0       	ldi	r30, 0x06	; 6
    2718:	f0 e2       	ldi	r31, 0x20	; 32
    271a:	84 81       	ldd	r24, Z+4	; 0x04
    271c:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    271e:	85 81       	ldd	r24, Z+5	; 0x05
    2720:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2722:	86 81       	ldd	r24, Z+6	; 0x06
    2724:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	a2 81       	ldd	r26, Z+2	; 0x02
    272c:	b3 81       	ldd	r27, Z+3	; 0x03
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	ab 83       	std	Y+3, r26	; 0x03
    2734:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    2736:	60 e1       	ldi	r22, 0x10	; 16
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	5a d1       	rcall	.+692    	; 0x29f0 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    273c:	be 01       	movw	r22, r28
    273e:	6f 5f       	subi	r22, 0xFF	; 255
    2740:	7f 4f       	sbci	r23, 0xFF	; 255
    2742:	80 ea       	ldi	r24, 0xA0	; 160
    2744:	98 e0       	ldi	r25, 0x08	; 8
    2746:	73 dd       	rcall	.-1306   	; 0x222e <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    2748:	6f e7       	ldi	r22, 0x7F	; 127
    274a:	71 e0       	ldi	r23, 0x01	; 1
    274c:	88 e9       	ldi	r24, 0x98	; 152
    274e:	91 e0       	ldi	r25, 0x01	; 1
    2750:	0e 94 06 2c 	call	0x580c	; 0x580c <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
    2754:	27 96       	adiw	r28, 0x07	; 7
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <voltage_read>:
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
}

uint16_t voltage_read(void)
{
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
    2760:	e0 e0       	ldi	r30, 0x00	; 0
    2762:	f2 e0       	ldi	r31, 0x02	; 2
    2764:	80 a5       	ldd	r24, Z+40	; 0x28
    2766:	80 68       	ori	r24, 0x80	; 128
    2768:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_SERIAL.VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
    276a:	83 a5       	ldd	r24, Z+43	; 0x2b
    276c:	88 23       	and	r24, r24
    276e:	e9 f3       	breq	.-6      	; 0x276a <voltage_read+0xa>
	return VOLTAGE_SERIAL.VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
    2770:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    2774:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    2778:	08 95       	ret

0000277a <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	fc 01       	movw	r30, r24
    2780:	41 15       	cp	r20, r1
    2782:	51 05       	cpc	r21, r1
    2784:	b1 f1       	breq	.+108    	; 0x27f2 <rb16_write+0x78>
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	db 01       	movw	r26, r22
    2792:	a8 0f       	add	r26, r24
    2794:	b9 1f       	adc	r27, r25
    2796:	8d 91       	ld	r24, X+
    2798:	9c 91       	ld	r25, X
    279a:	a2 81       	ldd	r26, Z+2	; 0x02
    279c:	b3 81       	ldd	r27, Z+3	; 0x03
    279e:	aa 0f       	add	r26, r26
    27a0:	bb 1f       	adc	r27, r27
    27a2:	c6 81       	ldd	r28, Z+6	; 0x06
    27a4:	d7 81       	ldd	r29, Z+7	; 0x07
    27a6:	ac 0f       	add	r26, r28
    27a8:	bd 1f       	adc	r27, r29
    27aa:	8d 93       	st	X+, r24
    27ac:	9c 93       	st	X, r25
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	82 83       	std	Z+2, r24	; 0x02
    27b6:	93 83       	std	Z+3, r25	; 0x03
    27b8:	a0 81       	ld	r26, Z
    27ba:	b1 81       	ldd	r27, Z+1	; 0x01
    27bc:	8a 17       	cp	r24, r26
    27be:	9b 07       	cpc	r25, r27
    27c0:	11 f4       	brne	.+4      	; 0x27c6 <rb16_write+0x4c>
    27c2:	12 82       	std	Z+2, r1	; 0x02
    27c4:	13 82       	std	Z+3, r1	; 0x03
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	c4 81       	ldd	r28, Z+4	; 0x04
    27cc:	d5 81       	ldd	r29, Z+5	; 0x05
    27ce:	8c 17       	cp	r24, r28
    27d0:	9d 07       	cpc	r25, r29
    27d2:	49 f4       	brne	.+18     	; 0x27e6 <rb16_write+0x6c>
    27d4:	01 96       	adiw	r24, 0x01	; 1
    27d6:	a8 17       	cp	r26, r24
    27d8:	b9 07       	cpc	r27, r25
    27da:	19 f0       	breq	.+6      	; 0x27e2 <rb16_write+0x68>
    27dc:	84 83       	std	Z+4, r24	; 0x04
    27de:	95 83       	std	Z+5, r25	; 0x05
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <rb16_write+0x6c>
    27e2:	14 82       	std	Z+4, r1	; 0x04
    27e4:	15 82       	std	Z+5, r1	; 0x05
    27e6:	2f 5f       	subi	r18, 0xFF	; 255
    27e8:	82 2f       	mov	r24, r18
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	84 17       	cp	r24, r20
    27ee:	95 07       	cpc	r25, r21
    27f0:	68 f2       	brcs	.-102    	; 0x278c <rb16_write+0x12>
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <rb16_init>:
    27f8:	fc 01       	movw	r30, r24
    27fa:	12 82       	std	Z+2, r1	; 0x02
    27fc:	13 82       	std	Z+3, r1	; 0x03
    27fe:	14 82       	std	Z+4, r1	; 0x04
    2800:	15 82       	std	Z+5, r1	; 0x05
    2802:	66 83       	std	Z+6, r22	; 0x06
    2804:	77 83       	std	Z+7, r23	; 0x07
    2806:	40 83       	st	Z, r20
    2808:	51 83       	std	Z+1, r21	; 0x01
    280a:	08 95       	ret

0000280c <rb16_get_nth>:
    280c:	dc 01       	movw	r26, r24
    280e:	12 96       	adiw	r26, 0x02	; 2
    2810:	ed 91       	ld	r30, X+
    2812:	fc 91       	ld	r31, X
    2814:	13 97       	sbiw	r26, 0x03	; 3
    2816:	cb 01       	movw	r24, r22
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	e8 17       	cp	r30, r24
    281c:	f9 07       	cpc	r31, r25
    281e:	78 f0       	brcs	.+30     	; 0x283e <rb16_get_nth+0x32>
    2820:	e1 50       	subi	r30, 0x01	; 1
    2822:	f0 48       	sbci	r31, 0x80	; 128
    2824:	e6 1b       	sub	r30, r22
    2826:	f7 0b       	sbc	r31, r23
    2828:	ee 0f       	add	r30, r30
    282a:	ff 1f       	adc	r31, r31
    282c:	16 96       	adiw	r26, 0x06	; 6
    282e:	8d 91       	ld	r24, X+
    2830:	9c 91       	ld	r25, X
    2832:	17 97       	sbiw	r26, 0x07	; 7
    2834:	e8 0f       	add	r30, r24
    2836:	f9 1f       	adc	r31, r25
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	08 95       	ret
    283e:	2d 91       	ld	r18, X+
    2840:	3c 91       	ld	r19, X
    2842:	11 97       	sbiw	r26, 0x01	; 1
    2844:	e2 0f       	add	r30, r18
    2846:	f3 1f       	adc	r31, r19
    2848:	e1 50       	subi	r30, 0x01	; 1
    284a:	f0 48       	sbci	r31, 0x80	; 128
    284c:	e6 1b       	sub	r30, r22
    284e:	f7 0b       	sbc	r31, r23
    2850:	ee 0f       	add	r30, r30
    2852:	ff 1f       	adc	r31, r31
    2854:	16 96       	adiw	r26, 0x06	; 6
    2856:	8d 91       	ld	r24, X+
    2858:	9c 91       	ld	r25, X
    285a:	17 97       	sbiw	r26, 0x07	; 7
    285c:	e8 0f       	add	r30, r24
    285e:	f9 1f       	adc	r31, r25
    2860:	80 81       	ld	r24, Z
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	08 95       	ret

00002866 <rb32_write>:
    2866:	cf 92       	push	r12
    2868:	df 92       	push	r13
    286a:	ef 92       	push	r14
    286c:	ff 92       	push	r15
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
    2872:	fc 01       	movw	r30, r24
    2874:	41 15       	cp	r20, r1
    2876:	51 05       	cpc	r21, r1
    2878:	09 f4       	brne	.+2      	; 0x287c <rb32_write+0x16>
    287a:	3f c0       	rjmp	.+126    	; 0x28fa <rb32_write+0x94>
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	db 01       	movw	r26, r22
    288c:	a8 0f       	add	r26, r24
    288e:	b9 1f       	adc	r27, r25
    2890:	cd 90       	ld	r12, X+
    2892:	dd 90       	ld	r13, X+
    2894:	ed 90       	ld	r14, X+
    2896:	fc 90       	ld	r15, X
    2898:	a2 81       	ldd	r26, Z+2	; 0x02
    289a:	b3 81       	ldd	r27, Z+3	; 0x03
    289c:	aa 0f       	add	r26, r26
    289e:	bb 1f       	adc	r27, r27
    28a0:	aa 0f       	add	r26, r26
    28a2:	bb 1f       	adc	r27, r27
    28a4:	86 81       	ldd	r24, Z+6	; 0x06
    28a6:	97 81       	ldd	r25, Z+7	; 0x07
    28a8:	a8 0f       	add	r26, r24
    28aa:	b9 1f       	adc	r27, r25
    28ac:	cd 92       	st	X+, r12
    28ae:	dd 92       	st	X+, r13
    28b0:	ed 92       	st	X+, r14
    28b2:	fc 92       	st	X, r15
    28b4:	13 97       	sbiw	r26, 0x03	; 3
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	82 83       	std	Z+2, r24	; 0x02
    28be:	93 83       	std	Z+3, r25	; 0x03
    28c0:	a0 81       	ld	r26, Z
    28c2:	b1 81       	ldd	r27, Z+1	; 0x01
    28c4:	8a 17       	cp	r24, r26
    28c6:	9b 07       	cpc	r25, r27
    28c8:	11 f4       	brne	.+4      	; 0x28ce <rb32_write+0x68>
    28ca:	12 82       	std	Z+2, r1	; 0x02
    28cc:	13 82       	std	Z+3, r1	; 0x03
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	c4 81       	ldd	r28, Z+4	; 0x04
    28d4:	d5 81       	ldd	r29, Z+5	; 0x05
    28d6:	8c 17       	cp	r24, r28
    28d8:	9d 07       	cpc	r25, r29
    28da:	49 f4       	brne	.+18     	; 0x28ee <rb32_write+0x88>
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	a8 17       	cp	r26, r24
    28e0:	b9 07       	cpc	r27, r25
    28e2:	19 f0       	breq	.+6      	; 0x28ea <rb32_write+0x84>
    28e4:	84 83       	std	Z+4, r24	; 0x04
    28e6:	95 83       	std	Z+5, r25	; 0x05
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <rb32_write+0x88>
    28ea:	14 82       	std	Z+4, r1	; 0x04
    28ec:	15 82       	std	Z+5, r1	; 0x05
    28ee:	2f 5f       	subi	r18, 0xFF	; 255
    28f0:	82 2f       	mov	r24, r18
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	84 17       	cp	r24, r20
    28f6:	95 07       	cpc	r25, r21
    28f8:	20 f2       	brcs	.-120    	; 0x2882 <rb32_write+0x1c>
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	ff 90       	pop	r15
    2900:	ef 90       	pop	r14
    2902:	df 90       	pop	r13
    2904:	cf 90       	pop	r12
    2906:	08 95       	ret

00002908 <rb32_init>:
    2908:	fc 01       	movw	r30, r24
    290a:	12 82       	std	Z+2, r1	; 0x02
    290c:	13 82       	std	Z+3, r1	; 0x03
    290e:	14 82       	std	Z+4, r1	; 0x04
    2910:	15 82       	std	Z+5, r1	; 0x05
    2912:	66 83       	std	Z+6, r22	; 0x06
    2914:	77 83       	std	Z+7, r23	; 0x07
    2916:	40 83       	st	Z, r20
    2918:	51 83       	std	Z+1, r21	; 0x01
    291a:	08 95       	ret

0000291c <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    291c:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    291e:	12 96       	adiw	r26, 0x02	; 2
    2920:	ed 91       	ld	r30, X+
    2922:	fc 91       	ld	r31, X
    2924:	13 97       	sbiw	r26, 0x03	; 3
    2926:	cb 01       	movw	r24, r22
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	e8 17       	cp	r30, r24
    292c:	f9 07       	cpc	r31, r25
    292e:	98 f0       	brcs	.+38     	; 0x2956 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    2930:	e1 50       	subi	r30, 0x01	; 1
    2932:	f0 4c       	sbci	r31, 0xC0	; 192
    2934:	e6 1b       	sub	r30, r22
    2936:	f7 0b       	sbc	r31, r23
    2938:	ee 0f       	add	r30, r30
    293a:	ff 1f       	adc	r31, r31
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	16 96       	adiw	r26, 0x06	; 6
    2942:	8d 91       	ld	r24, X+
    2944:	9c 91       	ld	r25, X
    2946:	17 97       	sbiw	r26, 0x07	; 7
    2948:	e8 0f       	add	r30, r24
    294a:	f9 1f       	adc	r31, r25
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    2956:	2d 91       	ld	r18, X+
    2958:	3c 91       	ld	r19, X
    295a:	11 97       	sbiw	r26, 0x01	; 1
    295c:	e2 0f       	add	r30, r18
    295e:	f3 1f       	adc	r31, r19
    2960:	e1 50       	subi	r30, 0x01	; 1
    2962:	f0 4c       	sbci	r31, 0xC0	; 192
    2964:	e6 1b       	sub	r30, r22
    2966:	f7 0b       	sbc	r31, r23
    2968:	ee 0f       	add	r30, r30
    296a:	ff 1f       	adc	r31, r31
    296c:	ee 0f       	add	r30, r30
    296e:	ff 1f       	adc	r31, r31
    2970:	16 96       	adiw	r26, 0x06	; 6
    2972:	8d 91       	ld	r24, X+
    2974:	9c 91       	ld	r25, X
    2976:	17 97       	sbiw	r26, 0x07	; 7
    2978:	e8 0f       	add	r30, r24
    297a:	f9 1f       	adc	r31, r25
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
}
    2984:	08 95       	ret

00002986 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	1f 92       	push	r1
    298c:	1f 92       	push	r1
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2992:	8f ef       	ldi	r24, 0xFF	; 255
    2994:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2998:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    299c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    29a0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    29a4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    29a8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    29ac:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    29b0:	8f b7       	in	r24, 0x3f	; 63
    29b2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    29b4:	f8 94       	cli
	return flags;
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    29b8:	e0 e5       	ldi	r30, 0x50	; 80
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	82 60       	ori	r24, 0x02	; 2
    29c0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    29c2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    29c4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    29c6:	81 ff       	sbrs	r24, 1
    29c8:	fd cf       	rjmp	.-6      	; 0x29c4 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    29ca:	61 e0       	ldi	r22, 0x01	; 1
    29cc:	80 e4       	ldi	r24, 0x40	; 64
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	3a d0       	rcall	.+116    	; 0x2a46 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    29d2:	8f b7       	in	r24, 0x3f	; 63
    29d4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    29d6:	f8 94       	cli
	return flags;
    29d8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    29da:	e0 e5       	ldi	r30, 0x50	; 80
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	8e 7f       	andi	r24, 0xFE	; 254
    29e2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    29e4:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	08 95       	ret

000029f0 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	1f 92       	push	r1
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    29fa:	9f b7       	in	r25, 0x3f	; 63
    29fc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    29fe:	f8 94       	cli
	return flags;
    2a00:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2a02:	e8 2f       	mov	r30, r24
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	e0 59       	subi	r30, 0x90	; 144
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 95       	com	r22
    2a0c:	80 81       	ld	r24, Z
    2a0e:	68 23       	and	r22, r24
    2a10:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a12:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2a14:	0f 90       	pop	r0
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	08 95       	ret

00002a1c <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	1f 92       	push	r1
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2a26:	9f b7       	in	r25, 0x3f	; 63
    2a28:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2a2a:	f8 94       	cli
	return flags;
    2a2c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2a2e:	e8 2f       	mov	r30, r24
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	e0 59       	subi	r30, 0x90	; 144
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	68 2b       	or	r22, r24
    2a3a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a3c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2a3e:	0f 90       	pop	r0
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2a46:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2a48:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2a4a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2a4c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2a4e:	60 83       	st	Z, r22
	ret                             // Return to caller
    2a50:	08 95       	ret

00002a52 <__portable_avr_delay_cycles>:
	ac_enable(&ACA, 0);

}

void release(void){
	servo_release();
    2a52:	04 c0       	rjmp	.+8      	; 0x2a5c <__portable_avr_delay_cycles+0xa>
    2a54:	61 50       	subi	r22, 0x01	; 1
    2a56:	71 09       	sbc	r23, r1
    2a58:	81 09       	sbc	r24, r1
    2a5a:	91 09       	sbc	r25, r1
    2a5c:	61 15       	cp	r22, r1
    2a5e:	71 05       	cpc	r23, r1
    2a60:	81 05       	cpc	r24, r1
    2a62:	91 05       	cpc	r25, r1
    2a64:	b9 f7       	brne	.-18     	; 0x2a54 <__portable_avr_delay_cycles+0x2>
    2a66:	08 95       	ret

00002a68 <hall_sensor_measure>:
    2a68:	80 91 43 21 	lds	r24, 0x2143	; 0x802143 <ticks_per_sec>
    2a6c:	90 91 44 21 	lds	r25, 0x2144	; 0x802144 <ticks_per_sec+0x1>
    2a70:	01 96       	adiw	r24, 0x01	; 1
    2a72:	80 93 43 21 	sts	0x2143, r24	; 0x802143 <ticks_per_sec>
    2a76:	90 93 44 21 	sts	0x2144, r25	; 0x802144 <ticks_per_sec+0x1>
    2a7a:	08 95       	ret

00002a7c <pressure_init>:
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	52 dd       	rcall	.-1372   	; 0x2526 <ms5607_init>
    2a82:	82 ea       	ldi	r24, 0xA2	; 162
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	63 dd       	rcall	.-1338   	; 0x254e <ms5607_read>
    2a88:	ca e4       	ldi	r28, 0x4A	; 74
    2a8a:	d1 e2       	ldi	r29, 0x21	; 33
    2a8c:	88 83       	st	Y, r24
    2a8e:	99 83       	std	Y+1, r25	; 0x01
    2a90:	84 ea       	ldi	r24, 0xA4	; 164
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	5c dd       	rcall	.-1352   	; 0x254e <ms5607_read>
    2a96:	8a 83       	std	Y+2, r24	; 0x02
    2a98:	9b 83       	std	Y+3, r25	; 0x03
    2a9a:	86 ea       	ldi	r24, 0xA6	; 166
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	57 dd       	rcall	.-1362   	; 0x254e <ms5607_read>
    2aa0:	8c 83       	std	Y+4, r24	; 0x04
    2aa2:	9d 83       	std	Y+5, r25	; 0x05
    2aa4:	88 ea       	ldi	r24, 0xA8	; 168
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	52 dd       	rcall	.-1372   	; 0x254e <ms5607_read>
    2aaa:	8e 83       	std	Y+6, r24	; 0x06
    2aac:	9f 83       	std	Y+7, r25	; 0x07
    2aae:	8a ea       	ldi	r24, 0xAA	; 170
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	4d dd       	rcall	.-1382   	; 0x254e <ms5607_read>
    2ab4:	88 87       	std	Y+8, r24	; 0x08
    2ab6:	99 87       	std	Y+9, r25	; 0x09
    2ab8:	8c ea       	ldi	r24, 0xAC	; 172
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	48 dd       	rcall	.-1392   	; 0x254e <ms5607_read>
    2abe:	8a 87       	std	Y+10, r24	; 0x0a
    2ac0:	9b 87       	std	Y+11, r25	; 0x0b
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	08 95       	ret

00002ac8 <hall_sensor_init>:
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
    2acc:	00 d0       	rcall	.+0      	; 0x2ace <hall_sensor_init+0x6>
    2ace:	1f 92       	push	r1
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	84 e0       	ldi	r24, 0x04	; 4
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	31 96       	adiw	r30, 0x01	; 1
    2ada:	df 01       	movw	r26, r30
    2adc:	98 2f       	mov	r25, r24
    2ade:	1d 92       	st	X+, r1
    2ae0:	9a 95       	dec	r25
    2ae2:	e9 f7       	brne	.-6      	; 0x2ade <hall_sensor_init+0x16>
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	8e e3       	ldi	r24, 0x3E	; 62
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
    2aea:	8f e2       	ldi	r24, 0x2F	; 47
    2aec:	8a 83       	std	Y+2, r24	; 0x02
    2aee:	64 e3       	ldi	r22, 0x34	; 52
    2af0:	75 e1       	ldi	r23, 0x15	; 21
    2af2:	80 e8       	ldi	r24, 0x80	; 128
    2af4:	93 e0       	ldi	r25, 0x03	; 3
    2af6:	0e 94 16 04 	call	0x82c	; 0x82c <ac_set_interrupt_callback>
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	98 2f       	mov	r25, r24
    2afe:	90 6c       	ori	r25, 0xC0	; 192
    2b00:	99 83       	std	Y+1, r25	; 0x01
    2b02:	9c 81       	ldd	r25, Y+4	; 0x04
    2b04:	29 2f       	mov	r18, r25
    2b06:	20 73       	andi	r18, 0x30	; 48
    2b08:	21 f0       	breq	.+8      	; 0x2b12 <hall_sensor_init+0x4a>
    2b0a:	9c 7f       	andi	r25, 0xFC	; 252
    2b0c:	92 60       	ori	r25, 0x02	; 2
    2b0e:	9c 83       	std	Y+4, r25	; 0x04
    2b10:	03 c0       	rjmp	.+6      	; 0x2b18 <hall_sensor_init+0x50>
    2b12:	8f 70       	andi	r24, 0x0F	; 15
    2b14:	80 6e       	ori	r24, 0xE0	; 224
    2b16:	89 83       	std	Y+1, r24	; 0x01
    2b18:	ae 01       	movw	r20, r28
    2b1a:	4f 5f       	subi	r20, 0xFF	; 255
    2b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	80 e8       	ldi	r24, 0x80	; 128
    2b22:	93 e0       	ldi	r25, 0x03	; 3
    2b24:	0e 94 3e 03 	call	0x67c	; 0x67c <ac_write_config>
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	80 e8       	ldi	r24, 0x80	; 128
    2b2c:	93 e0       	ldi	r25, 0x03	; 3
    2b2e:	0e 94 bc 03 	call	0x778	; 0x778 <ac_enable>
    2b32:	24 96       	adiw	r28, 0x04	; 4
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	08 95       	ret

00002b3e <get_pressure>:
    2b3e:	4f 92       	push	r4
    2b40:	5f 92       	push	r5
    2b42:	6f 92       	push	r6
    2b44:	7f 92       	push	r7
    2b46:	8f 92       	push	r8
    2b48:	9f 92       	push	r9
    2b4a:	af 92       	push	r10
    2b4c:	bf 92       	push	r11
    2b4e:	cf 92       	push	r12
    2b50:	df 92       	push	r13
    2b52:	ef 92       	push	r14
    2b54:	ff 92       	push	r15
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	0b dd       	rcall	.-1514   	; 0x2572 <ms5607_convert_d1>
    2b5c:	6b 01       	movw	r12, r22
    2b5e:	7c 01       	movw	r14, r24
    2b60:	48 dd       	rcall	.-1392   	; 0x25f2 <ms5607_convert_d2>
    2b62:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    2b66:	4b 01       	movw	r8, r22
    2b68:	5c 01       	movw	r10, r24
    2b6a:	ca e4       	ldi	r28, 0x4A	; 74
    2b6c:	d1 e2       	ldi	r29, 0x21	; 33
    2b6e:	68 85       	ldd	r22, Y+8	; 0x08
    2b70:	79 85       	ldd	r23, Y+9	; 0x09
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	53 e4       	ldi	r21, 0x43	; 67
    2b82:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2b86:	9b 01       	movw	r18, r22
    2b88:	ac 01       	movw	r20, r24
    2b8a:	c5 01       	movw	r24, r10
    2b8c:	b4 01       	movw	r22, r8
    2b8e:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <__subsf3>
    2b92:	4b 01       	movw	r8, r22
    2b94:	5c 01       	movw	r10, r24
    2b96:	6c 81       	ldd	r22, Y+4	; 0x04
    2b98:	7d 81       	ldd	r23, Y+5	; 0x05
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    2ba2:	a5 01       	movw	r20, r10
    2ba4:	94 01       	movw	r18, r8
    2ba6:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	5c e3       	ldi	r21, 0x3C	; 60
    2bb2:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2bb6:	2b 01       	movw	r4, r22
    2bb8:	3c 01       	movw	r6, r24
    2bba:	68 81       	ld	r22, Y
    2bbc:	79 81       	ldd	r23, Y+1	; 0x01
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	57 e4       	ldi	r21, 0x47	; 71
    2bce:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2bd2:	9b 01       	movw	r18, r22
    2bd4:	ac 01       	movw	r20, r24
    2bd6:	c3 01       	movw	r24, r6
    2bd8:	b2 01       	movw	r22, r4
    2bda:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    2bde:	2b 01       	movw	r4, r22
    2be0:	3c 01       	movw	r6, r24
    2be2:	c7 01       	movw	r24, r14
    2be4:	b6 01       	movw	r22, r12
    2be6:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    2bea:	9b 01       	movw	r18, r22
    2bec:	ac 01       	movw	r20, r24
    2bee:	c3 01       	movw	r24, r6
    2bf0:	b2 01       	movw	r22, r4
    2bf2:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	55 e3       	ldi	r21, 0x35	; 53
    2bfe:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2c02:	6b 01       	movw	r12, r22
    2c04:	7c 01       	movw	r14, r24
    2c06:	6e 81       	ldd	r22, Y+6	; 0x06
    2c08:	7f 81       	ldd	r23, Y+7	; 0x07
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    2c12:	a5 01       	movw	r20, r10
    2c14:	94 01       	movw	r18, r8
    2c16:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e8       	ldi	r20, 0x80	; 128
    2c20:	5c e3       	ldi	r21, 0x3C	; 60
    2c22:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2c26:	4b 01       	movw	r8, r22
    2c28:	5c 01       	movw	r10, r24
    2c2a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c2c:	7b 81       	ldd	r23, Y+3	; 0x03
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	58 e4       	ldi	r21, 0x48	; 72
    2c3e:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2c42:	9b 01       	movw	r18, r22
    2c44:	ac 01       	movw	r20, r24
    2c46:	c5 01       	movw	r24, r10
    2c48:	b4 01       	movw	r22, r8
    2c4a:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    2c4e:	9b 01       	movw	r18, r22
    2c50:	ac 01       	movw	r20, r24
    2c52:	c7 01       	movw	r24, r14
    2c54:	b6 01       	movw	r22, r12
    2c56:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <__subsf3>
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	58 e3       	ldi	r21, 0x38	; 56
    2c62:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	ff 90       	pop	r15
    2c6c:	ef 90       	pop	r14
    2c6e:	df 90       	pop	r13
    2c70:	cf 90       	pop	r12
    2c72:	bf 90       	pop	r11
    2c74:	af 90       	pop	r10
    2c76:	9f 90       	pop	r9
    2c78:	8f 90       	pop	r8
    2c7a:	7f 90       	pop	r7
    2c7c:	6f 90       	pop	r6
    2c7e:	5f 90       	pop	r5
    2c80:	4f 90       	pop	r4
    2c82:	08 95       	ret

00002c84 <get_altitude>:
    2c84:	4f 92       	push	r4
    2c86:	5f 92       	push	r5
    2c88:	6f 92       	push	r6
    2c8a:	7f 92       	push	r7
    2c8c:	8f 92       	push	r8
    2c8e:	9f 92       	push	r9
    2c90:	af 92       	push	r10
    2c92:	bf 92       	push	r11
    2c94:	cf 92       	push	r12
    2c96:	df 92       	push	r13
    2c98:	ef 92       	push	r14
    2c9a:	ff 92       	push	r15
    2c9c:	2b 01       	movw	r4, r22
    2c9e:	3c 01       	movw	r6, r24
    2ca0:	c0 90 18 20 	lds	r12, 0x2018	; 0x802018 <L>
    2ca4:	d0 90 19 20 	lds	r13, 0x2019	; 0x802019 <L+0x1>
    2ca8:	e0 90 1a 20 	lds	r14, 0x201A	; 0x80201a <L+0x2>
    2cac:	f0 90 1b 20 	lds	r15, 0x201B	; 0x80201b <L+0x3>
    2cb0:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <R>
    2cb4:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <R+0x1>
    2cb8:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <R+0x2>
    2cbc:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <R+0x3>
    2cc0:	c7 01       	movw	r24, r14
    2cc2:	b6 01       	movw	r22, r12
    2cc4:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2cc8:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <g_0>
    2ccc:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <g_0+0x1>
    2cd0:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <g_0+0x2>
    2cd4:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <g_0+0x3>
    2cd8:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    2cdc:	4b 01       	movw	r8, r22
    2cde:	5c 01       	movw	r10, r24
    2ce0:	a3 01       	movw	r20, r6
    2ce2:	92 01       	movw	r18, r4
    2ce4:	60 91 24 20 	lds	r22, 0x2024	; 0x802024 <ground_p>
    2ce8:	70 91 25 20 	lds	r23, 0x2025	; 0x802025 <ground_p+0x1>
    2cec:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <ground_p+0x2>
    2cf0:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <ground_p+0x3>
    2cf4:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    2cf8:	a5 01       	movw	r20, r10
    2cfa:	94 01       	movw	r18, r8
    2cfc:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <pow>
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e8       	ldi	r20, 0x80	; 128
    2d06:	5f e3       	ldi	r21, 0x3F	; 63
    2d08:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <__subsf3>
    2d0c:	20 91 20 20 	lds	r18, 0x2020	; 0x802020 <ground_t>
    2d10:	30 91 21 20 	lds	r19, 0x2021	; 0x802021 <ground_t+0x1>
    2d14:	40 91 22 20 	lds	r20, 0x2022	; 0x802022 <ground_t+0x2>
    2d18:	50 91 23 20 	lds	r21, 0x2023	; 0x802023 <ground_t+0x3>
    2d1c:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2d20:	a7 01       	movw	r20, r14
    2d22:	96 01       	movw	r18, r12
    2d24:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    2d28:	ff 90       	pop	r15
    2d2a:	ef 90       	pop	r14
    2d2c:	df 90       	pop	r13
    2d2e:	cf 90       	pop	r12
    2d30:	bf 90       	pop	r11
    2d32:	af 90       	pop	r10
    2d34:	9f 90       	pop	r9
    2d36:	8f 90       	pop	r8
    2d38:	7f 90       	pop	r7
    2d3a:	6f 90       	pop	r6
    2d3c:	5f 90       	pop	r5
    2d3e:	4f 90       	pop	r4
    2d40:	08 95       	ret

00002d42 <get_voltage>:
    2d42:	cf 92       	push	r12
    2d44:	df 92       	push	r13
    2d46:	ef 92       	push	r14
    2d48:	ff 92       	push	r15
    2d4a:	0a dd       	rcall	.-1516   	; 0x2760 <voltage_read>
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    2d56:	23 e4       	ldi	r18, 0x43	; 67
    2d58:	3e e2       	ldi	r19, 0x2E	; 46
    2d5a:	42 e0       	ldi	r20, 0x02	; 2
    2d5c:	5a e3       	ldi	r21, 0x3A	; 58
    2d5e:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2d62:	24 ee       	ldi	r18, 0xE4	; 228
    2d64:	3a e5       	ldi	r19, 0x5A	; 90
    2d66:	45 ec       	ldi	r20, 0xC5	; 197
    2d68:	5d e3       	ldi	r21, 0x3D	; 61
    2d6a:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <__subsf3>
    2d6e:	6b 01       	movw	r12, r22
    2d70:	7c 01       	movw	r14, r24
    2d72:	2b e2       	ldi	r18, 0x2B	; 43
    2d74:	35 eb       	ldi	r19, 0xB5	; 181
    2d76:	42 e1       	ldi	r20, 0x12	; 18
    2d78:	50 e4       	ldi	r21, 0x40	; 64
    2d7a:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2d7e:	9b 01       	movw	r18, r22
    2d80:	ac 01       	movw	r20, r24
    2d82:	c7 01       	movw	r24, r14
    2d84:	b6 01       	movw	r22, r12
    2d86:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    2d8a:	ff 90       	pop	r15
    2d8c:	ef 90       	pop	r14
    2d8e:	df 90       	pop	r13
    2d90:	cf 90       	pop	r12
    2d92:	08 95       	ret

00002d94 <diff>:
    2d94:	2f 92       	push	r2
    2d96:	3f 92       	push	r3
    2d98:	4f 92       	push	r4
    2d9a:	5f 92       	push	r5
    2d9c:	6f 92       	push	r6
    2d9e:	7f 92       	push	r7
    2da0:	8f 92       	push	r8
    2da2:	9f 92       	push	r9
    2da4:	af 92       	push	r10
    2da6:	bf 92       	push	r11
    2da8:	cf 92       	push	r12
    2daa:	df 92       	push	r13
    2dac:	ef 92       	push	r14
    2dae:	ff 92       	push	r15
    2db0:	0f 93       	push	r16
    2db2:	1f 93       	push	r17
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <diff+0x26>
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <diff+0x28>
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	6c 01       	movw	r12, r24
    2dc2:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <data_samples>
    2dc6:	88 23       	and	r24, r24
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <diff+0x38>
    2dca:	6c c0       	rjmp	.+216    	; 0x2ea4 <diff+0x110>
    2dcc:	00 e0       	ldi	r16, 0x00	; 0
    2dce:	10 e0       	ldi	r17, 0x00	; 0
    2dd0:	41 2c       	mov	r4, r1
    2dd2:	51 2c       	mov	r5, r1
    2dd4:	32 01       	movw	r6, r4
    2dd6:	86 2e       	mov	r8, r22
    2dd8:	91 2c       	mov	r9, r1
    2dda:	a1 2c       	mov	r10, r1
    2ddc:	b1 2c       	mov	r11, r1
    2dde:	89 82       	std	Y+1, r8	; 0x01
    2de0:	9a 82       	std	Y+2, r9	; 0x02
    2de2:	ab 82       	std	Y+3, r10	; 0x03
    2de4:	bc 82       	std	Y+4, r11	; 0x04
    2de6:	b8 01       	movw	r22, r16
    2de8:	c6 01       	movw	r24, r12
    2dea:	10 dd       	rcall	.-1504   	; 0x280c <rb16_get_nth>
    2dec:	5c 01       	movw	r10, r24
    2dee:	18 01       	movw	r2, r16
    2df0:	2f ef       	ldi	r18, 0xFF	; 255
    2df2:	22 1a       	sub	r2, r18
    2df4:	32 0a       	sbc	r3, r18
    2df6:	b1 01       	movw	r22, r2
    2df8:	c6 01       	movw	r24, r12
    2dfa:	08 dd       	rcall	.-1520   	; 0x280c <rb16_get_nth>
    2dfc:	7c 01       	movw	r14, r24
    2dfe:	b8 01       	movw	r22, r16
    2e00:	6e 5f       	subi	r22, 0xFE	; 254
    2e02:	7f 4f       	sbci	r23, 0xFF	; 255
    2e04:	c6 01       	movw	r24, r12
    2e06:	02 dd       	rcall	.-1532   	; 0x280c <rb16_get_nth>
    2e08:	a5 01       	movw	r20, r10
    2e0a:	bb 0c       	add	r11, r11
    2e0c:	66 0b       	sbc	r22, r22
    2e0e:	77 0b       	sbc	r23, r23
    2e10:	8a 01       	movw	r16, r20
    2e12:	9b 01       	movw	r18, r22
    2e14:	00 0f       	add	r16, r16
    2e16:	11 1f       	adc	r17, r17
    2e18:	22 1f       	adc	r18, r18
    2e1a:	33 1f       	adc	r19, r19
    2e1c:	40 0f       	add	r20, r16
    2e1e:	51 1f       	adc	r21, r17
    2e20:	62 1f       	adc	r22, r18
    2e22:	73 1f       	adc	r23, r19
    2e24:	87 01       	movw	r16, r14
    2e26:	ff 0c       	add	r15, r15
    2e28:	22 0b       	sbc	r18, r18
    2e2a:	33 0b       	sbc	r19, r19
    2e2c:	78 01       	movw	r14, r16
    2e2e:	89 01       	movw	r16, r18
    2e30:	ee 0c       	add	r14, r14
    2e32:	ff 1c       	adc	r15, r15
    2e34:	00 1f       	adc	r16, r16
    2e36:	11 1f       	adc	r17, r17
    2e38:	ee 0c       	add	r14, r14
    2e3a:	ff 1c       	adc	r15, r15
    2e3c:	00 1f       	adc	r16, r16
    2e3e:	11 1f       	adc	r17, r17
    2e40:	4a 01       	movw	r8, r20
    2e42:	5b 01       	movw	r10, r22
    2e44:	8e 18       	sub	r8, r14
    2e46:	9f 08       	sbc	r9, r15
    2e48:	a0 0a       	sbc	r10, r16
    2e4a:	b1 0a       	sbc	r11, r17
    2e4c:	ac 01       	movw	r20, r24
    2e4e:	99 0f       	add	r25, r25
    2e50:	66 0b       	sbc	r22, r22
    2e52:	77 0b       	sbc	r23, r23
    2e54:	d5 01       	movw	r26, r10
    2e56:	c4 01       	movw	r24, r8
    2e58:	84 0f       	add	r24, r20
    2e5a:	95 1f       	adc	r25, r21
    2e5c:	a6 1f       	adc	r26, r22
    2e5e:	b7 1f       	adc	r27, r23
    2e60:	9c 01       	movw	r18, r24
    2e62:	ad 01       	movw	r20, r26
    2e64:	69 81       	ldd	r22, Y+1	; 0x01
    2e66:	7a 81       	ldd	r23, Y+2	; 0x02
    2e68:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6c:	0e 94 39 2b 	call	0x5672	; 0x5672 <__mulsi3>
    2e70:	0e 94 bd 28 	call	0x517a	; 0x517a <__floatsisf>
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e0       	ldi	r20, 0x00	; 0
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2e80:	9b 01       	movw	r18, r22
    2e82:	ac 01       	movw	r20, r24
    2e84:	c3 01       	movw	r24, r6
    2e86:	b2 01       	movw	r22, r4
    2e88:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    2e8c:	2b 01       	movw	r4, r22
    2e8e:	3c 01       	movw	r6, r24
    2e90:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <data_samples>
    2e94:	81 01       	movw	r16, r2
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	22 16       	cp	r2, r18
    2e9c:	33 06       	cpc	r3, r19
    2e9e:	08 f4       	brcc	.+2      	; 0x2ea2 <diff+0x10e>
    2ea0:	a2 cf       	rjmp	.-188    	; 0x2de6 <diff+0x52>
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <diff+0x116>
    2ea4:	41 2c       	mov	r4, r1
    2ea6:	51 2c       	mov	r5, r1
    2ea8:	32 01       	movw	r6, r4
    2eaa:	68 2f       	mov	r22, r24
    2eac:	70 e0       	ldi	r23, 0x00	; 0
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	0e 94 bd 28 	call	0x517a	; 0x517a <__floatsisf>
    2eb6:	9b 01       	movw	r18, r22
    2eb8:	ac 01       	movw	r20, r24
    2eba:	c3 01       	movw	r24, r6
    2ebc:	b2 01       	movw	r22, r4
    2ebe:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	48 ec       	ldi	r20, 0xC8	; 200
    2ec8:	52 e4       	ldi	r21, 0x42	; 66
    2eca:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    2ece:	26 96       	adiw	r28, 0x06	; 6
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	1f 91       	pop	r17
    2eda:	0f 91       	pop	r16
    2edc:	ff 90       	pop	r15
    2ede:	ef 90       	pop	r14
    2ee0:	df 90       	pop	r13
    2ee2:	cf 90       	pop	r12
    2ee4:	bf 90       	pop	r11
    2ee6:	af 90       	pop	r10
    2ee8:	9f 90       	pop	r9
    2eea:	8f 90       	pop	r8
    2eec:	7f 90       	pop	r7
    2eee:	6f 90       	pop	r6
    2ef0:	5f 90       	pop	r5
    2ef2:	4f 90       	pop	r4
    2ef4:	3f 90       	pop	r3
    2ef6:	2f 90       	pop	r2
    2ef8:	08 95       	ret

00002efa <data_check>:
    2efa:	3f 92       	push	r3
    2efc:	4f 92       	push	r4
    2efe:	5f 92       	push	r5
    2f00:	6f 92       	push	r6
    2f02:	7f 92       	push	r7
    2f04:	8f 92       	push	r8
    2f06:	9f 92       	push	r9
    2f08:	af 92       	push	r10
    2f0a:	bf 92       	push	r11
    2f0c:	cf 92       	push	r12
    2f0e:	df 92       	push	r13
    2f10:	ef 92       	push	r14
    2f12:	ff 92       	push	r15
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <data_check+0x24>
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <data_check+0x26>
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	8c 01       	movw	r16, r24
    2f26:	19 82       	std	Y+1, r1	; 0x01
    2f28:	1a 82       	std	Y+2, r1	; 0x02
    2f2a:	c1 2c       	mov	r12, r1
    2f2c:	d1 2c       	mov	r13, r1
    2f2e:	76 01       	movw	r14, r12
    2f30:	69 81       	ldd	r22, Y+1	; 0x01
    2f32:	7a 81       	ldd	r23, Y+2	; 0x02
    2f34:	c8 01       	movw	r24, r16
    2f36:	f2 dc       	rcall	.-1564   	; 0x291c <rb32_get_nth>
    2f38:	4b 01       	movw	r8, r22
    2f3a:	5c 01       	movw	r10, r24
    2f3c:	21 e6       	ldi	r18, 0x61	; 97
    2f3e:	82 1a       	sub	r8, r18
    2f40:	2e ea       	ldi	r18, 0xAE	; 174
    2f42:	92 0a       	sbc	r9, r18
    2f44:	2a e0       	ldi	r18, 0x0A	; 10
    2f46:	a2 0a       	sbc	r10, r18
    2f48:	b1 08       	sbc	r11, r1
    2f4a:	2f e7       	ldi	r18, 0x7F	; 127
    2f4c:	82 16       	cp	r8, r18
    2f4e:	2a e1       	ldi	r18, 0x1A	; 26
    2f50:	92 06       	cpc	r9, r18
    2f52:	26 e0       	ldi	r18, 0x06	; 6
    2f54:	a2 06       	cpc	r10, r18
    2f56:	b1 04       	cpc	r11, r1
    2f58:	80 f4       	brcc	.+32     	; 0x2f7a <data_check+0x80>
    2f5a:	0e 94 bd 28 	call	0x517a	; 0x517a <__floatsisf>
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 ea       	ldi	r20, 0xA0	; 160
    2f64:	50 e4       	ldi	r21, 0x40	; 64
    2f66:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    2f6a:	9b 01       	movw	r18, r22
    2f6c:	ac 01       	movw	r20, r24
    2f6e:	c7 01       	movw	r24, r14
    2f70:	b6 01       	movw	r22, r12
    2f72:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    2f76:	6b 01       	movw	r12, r22
    2f78:	7c 01       	movw	r14, r24
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	89 83       	std	Y+1, r24	; 0x01
    2f82:	9a 83       	std	Y+2, r25	; 0x02
    2f84:	05 97       	sbiw	r24, 0x05	; 5
    2f86:	a1 f6       	brne	.-88     	; 0x2f30 <data_check+0x36>
    2f88:	19 82       	std	Y+1, r1	; 0x01
    2f8a:	1a 82       	std	Y+2, r1	; 0x02
    2f8c:	81 2c       	mov	r8, r1
    2f8e:	91 2c       	mov	r9, r1
    2f90:	54 01       	movw	r10, r8
    2f92:	69 81       	ldd	r22, Y+1	; 0x01
    2f94:	7a 81       	ldd	r23, Y+2	; 0x02
    2f96:	c8 01       	movw	r24, r16
    2f98:	c1 dc       	rcall	.-1662   	; 0x291c <rb32_get_nth>
    2f9a:	2b 01       	movw	r4, r22
    2f9c:	3c 01       	movw	r6, r24
    2f9e:	21 e6       	ldi	r18, 0x61	; 97
    2fa0:	42 1a       	sub	r4, r18
    2fa2:	2e ea       	ldi	r18, 0xAE	; 174
    2fa4:	52 0a       	sbc	r5, r18
    2fa6:	2a e0       	ldi	r18, 0x0A	; 10
    2fa8:	62 0a       	sbc	r6, r18
    2faa:	71 08       	sbc	r7, r1
    2fac:	2f e7       	ldi	r18, 0x7F	; 127
    2fae:	42 16       	cp	r4, r18
    2fb0:	2a e1       	ldi	r18, 0x1A	; 26
    2fb2:	52 06       	cpc	r5, r18
    2fb4:	26 e0       	ldi	r18, 0x06	; 6
    2fb6:	62 06       	cpc	r6, r18
    2fb8:	71 04       	cpc	r7, r1
    2fba:	90 f4       	brcc	.+36     	; 0x2fe0 <data_check+0xe6>
    2fbc:	0e 94 bd 28 	call	0x517a	; 0x517a <__floatsisf>
    2fc0:	a7 01       	movw	r20, r14
    2fc2:	96 01       	movw	r18, r12
    2fc4:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <__subsf3>
    2fc8:	9b 01       	movw	r18, r22
    2fca:	ac 01       	movw	r20, r24
    2fcc:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2fd0:	9b 01       	movw	r18, r22
    2fd2:	ac 01       	movw	r20, r24
    2fd4:	c5 01       	movw	r24, r10
    2fd6:	b4 01       	movw	r22, r8
    2fd8:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    2fdc:	4b 01       	movw	r8, r22
    2fde:	5c 01       	movw	r10, r24
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe4:	01 96       	adiw	r24, 0x01	; 1
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	9a 83       	std	Y+2, r25	; 0x02
    2fea:	05 97       	sbiw	r24, 0x05	; 5
    2fec:	91 f6       	brne	.-92     	; 0x2f92 <data_check+0x98>
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e8       	ldi	r20, 0x80	; 128
    2ff4:	5e e3       	ldi	r21, 0x3E	; 62
    2ff6:	c5 01       	movw	r24, r10
    2ff8:	b4 01       	movw	r22, r8
    2ffa:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    2ffe:	69 83       	std	Y+1, r22	; 0x01
    3000:	7a 83       	std	Y+2, r23	; 0x02
    3002:	8b 83       	std	Y+3, r24	; 0x03
    3004:	9c 83       	std	Y+4, r25	; 0x04
    3006:	1d 82       	std	Y+5, r1	; 0x05
    3008:	1e 82       	std	Y+6, r1	; 0x06
    300a:	31 2c       	mov	r3, r1
    300c:	41 2c       	mov	r4, r1
    300e:	51 2c       	mov	r5, r1
    3010:	32 01       	movw	r6, r4
    3012:	6d 81       	ldd	r22, Y+5	; 0x05
    3014:	7e 81       	ldd	r23, Y+6	; 0x06
    3016:	c8 01       	movw	r24, r16
    3018:	81 dc       	rcall	.-1790   	; 0x291c <rb32_get_nth>
    301a:	4b 01       	movw	r8, r22
    301c:	5c 01       	movw	r10, r24
    301e:	21 e6       	ldi	r18, 0x61	; 97
    3020:	82 1a       	sub	r8, r18
    3022:	2e ea       	ldi	r18, 0xAE	; 174
    3024:	92 0a       	sbc	r9, r18
    3026:	2a e0       	ldi	r18, 0x0A	; 10
    3028:	a2 0a       	sbc	r10, r18
    302a:	b1 08       	sbc	r11, r1
    302c:	2f e7       	ldi	r18, 0x7F	; 127
    302e:	82 16       	cp	r8, r18
    3030:	2a e1       	ldi	r18, 0x1A	; 26
    3032:	92 06       	cpc	r9, r18
    3034:	26 e0       	ldi	r18, 0x06	; 6
    3036:	a2 06       	cpc	r10, r18
    3038:	b1 04       	cpc	r11, r1
    303a:	50 f5       	brcc	.+84     	; 0x3090 <data_check+0x196>
    303c:	0e 94 bd 28 	call	0x517a	; 0x517a <__floatsisf>
    3040:	4b 01       	movw	r8, r22
    3042:	5c 01       	movw	r10, r24
    3044:	a7 01       	movw	r20, r14
    3046:	96 01       	movw	r18, r12
    3048:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <__subsf3>
    304c:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3050:	9b 01       	movw	r18, r22
    3052:	77 23       	and	r23, r23
    3054:	24 f4       	brge	.+8      	; 0x305e <data_check+0x164>
    3056:	22 27       	eor	r18, r18
    3058:	33 27       	eor	r19, r19
    305a:	26 1b       	sub	r18, r22
    305c:	37 0b       	sbc	r19, r23
    305e:	b9 01       	movw	r22, r18
    3060:	33 0f       	add	r19, r19
    3062:	88 0b       	sbc	r24, r24
    3064:	99 0b       	sbc	r25, r25
    3066:	0e 94 bd 28 	call	0x517a	; 0x517a <__floatsisf>
    306a:	9b 01       	movw	r18, r22
    306c:	ac 01       	movw	r20, r24
    306e:	69 81       	ldd	r22, Y+1	; 0x01
    3070:	7a 81       	ldd	r23, Y+2	; 0x02
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	9c 81       	ldd	r25, Y+4	; 0x04
    3076:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
    307a:	88 23       	and	r24, r24
    307c:	4c f0       	brlt	.+18     	; 0x3090 <data_check+0x196>
    307e:	a5 01       	movw	r20, r10
    3080:	94 01       	movw	r18, r8
    3082:	c3 01       	movw	r24, r6
    3084:	b2 01       	movw	r22, r4
    3086:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    308a:	2b 01       	movw	r4, r22
    308c:	3c 01       	movw	r6, r24
    308e:	33 94       	inc	r3
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	01 96       	adiw	r24, 0x01	; 1
    3096:	8d 83       	std	Y+5, r24	; 0x05
    3098:	9e 83       	std	Y+6, r25	; 0x06
    309a:	05 97       	sbiw	r24, 0x05	; 5
    309c:	09 f0       	breq	.+2      	; 0x30a0 <data_check+0x1a6>
    309e:	b9 cf       	rjmp	.-142    	; 0x3012 <data_check+0x118>
    30a0:	33 20       	and	r3, r3
    30a2:	69 f0       	breq	.+26     	; 0x30be <data_check+0x1c4>
    30a4:	63 2d       	mov	r22, r3
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    30b0:	9b 01       	movw	r18, r22
    30b2:	ac 01       	movw	r20, r24
    30b4:	c3 01       	movw	r24, r6
    30b6:	b2 01       	movw	r22, r4
    30b8:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    30bc:	04 c0       	rjmp	.+8      	; 0x30c6 <data_check+0x1cc>
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	70 e0       	ldi	r23, 0x00	; 0
    30c2:	80 e8       	ldi	r24, 0x80	; 128
    30c4:	9f eb       	ldi	r25, 0xBF	; 191
    30c6:	26 96       	adiw	r28, 0x06	; 6
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	df 91       	pop	r29
    30ce:	cf 91       	pop	r28
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	ff 90       	pop	r15
    30d6:	ef 90       	pop	r14
    30d8:	df 90       	pop	r13
    30da:	cf 90       	pop	r12
    30dc:	bf 90       	pop	r11
    30de:	af 90       	pop	r10
    30e0:	9f 90       	pop	r9
    30e2:	8f 90       	pop	r8
    30e4:	7f 90       	pop	r7
    30e6:	6f 90       	pop	r6
    30e8:	5f 90       	pop	r5
    30ea:	4f 90       	pop	r4
    30ec:	3f 90       	pop	r3
    30ee:	08 95       	ret

000030f0 <data_collect>:
    30f0:	af 92       	push	r10
    30f2:	bf 92       	push	r11
    30f4:	cf 92       	push	r12
    30f6:	df 92       	push	r13
    30f8:	ef 92       	push	r14
    30fa:	ff 92       	push	r15
    30fc:	0f 93       	push	r16
    30fe:	1f 93       	push	r17
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	00 d0       	rcall	.+0      	; 0x3106 <data_collect+0x16>
    3106:	00 d0       	rcall	.+0      	; 0x3108 <data_collect+0x18>
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	5c 01       	movw	r10, r24
    310e:	8b 01       	movw	r16, r22
    3110:	16 dd       	rcall	.-1492   	; 0x2b3e <get_pressure>
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e2       	ldi	r20, 0x20	; 32
    3118:	51 e4       	ldi	r21, 0x41	; 65
    311a:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    311e:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3122:	69 83       	std	Y+1, r22	; 0x01
    3124:	7a 83       	std	Y+2, r23	; 0x02
    3126:	8b 83       	std	Y+3, r24	; 0x03
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	41 e0       	ldi	r20, 0x01	; 1
    312c:	50 e0       	ldi	r21, 0x00	; 0
    312e:	be 01       	movw	r22, r28
    3130:	6f 5f       	subi	r22, 0xFF	; 255
    3132:	7f 4f       	sbci	r23, 0xFF	; 255
    3134:	c8 01       	movw	r24, r16
    3136:	97 db       	rcall	.-2258   	; 0x2866 <rb32_write>
    3138:	c8 01       	movw	r24, r16
    313a:	df de       	rcall	.-578    	; 0x2efa <data_check>
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e2       	ldi	r20, 0x20	; 32
    3142:	51 e4       	ldi	r21, 0x41	; 65
    3144:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    3148:	6b 01       	movw	r12, r22
    314a:	7c 01       	movw	r14, r24
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e8       	ldi	r20, 0x80	; 128
    3152:	5f eb       	ldi	r21, 0xBF	; 191
    3154:	0e 94 1e 28 	call	0x503c	; 0x503c <__cmpsf2>
    3158:	88 23       	and	r24, r24
    315a:	d1 f1       	breq	.+116    	; 0x31d0 <data_collect+0xe0>
    315c:	c0 92 33 21 	sts	0x2133, r12	; 0x802133 <press>
    3160:	d0 92 34 21 	sts	0x2134, r13	; 0x802134 <press+0x1>
    3164:	e0 92 35 21 	sts	0x2135, r14	; 0x802135 <press+0x2>
    3168:	f0 92 36 21 	sts	0x2136, r15	; 0x802136 <press+0x3>
    316c:	c7 01       	movw	r24, r14
    316e:	b6 01       	movw	r22, r12
    3170:	89 dd       	rcall	.-1262   	; 0x2c84 <get_altitude>
    3172:	60 93 2b 21 	sts	0x212B, r22	; 0x80212b <alt>
    3176:	70 93 2c 21 	sts	0x212C, r23	; 0x80212c <alt+0x1>
    317a:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <alt+0x2>
    317e:	90 93 2e 21 	sts	0x212E, r25	; 0x80212e <alt+0x3>
    3182:	60 91 2b 21 	lds	r22, 0x212B	; 0x80212b <alt>
    3186:	70 91 2c 21 	lds	r23, 0x212C	; 0x80212c <alt+0x1>
    318a:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <alt+0x2>
    318e:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <alt+0x3>
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	48 ec       	ldi	r20, 0xC8	; 200
    3198:	52 e4       	ldi	r21, 0x42	; 66
    319a:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    319e:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    31a2:	6d 83       	std	Y+5, r22	; 0x05
    31a4:	7e 83       	std	Y+6, r23	; 0x06
    31a6:	41 e0       	ldi	r20, 0x01	; 1
    31a8:	50 e0       	ldi	r21, 0x00	; 0
    31aa:	be 01       	movw	r22, r28
    31ac:	6b 5f       	subi	r22, 0xFB	; 251
    31ae:	7f 4f       	sbci	r23, 0xFF	; 255
    31b0:	c5 01       	movw	r24, r10
    31b2:	e3 da       	rcall	.-2618   	; 0x277a <rb16_write>
    31b4:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <rate>
    31b8:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <rate+0x1>
    31bc:	c5 01       	movw	r24, r10
    31be:	ea dd       	rcall	.-1068   	; 0x2d94 <diff>
    31c0:	60 93 23 21 	sts	0x2123, r22	; 0x802123 <velocity>
    31c4:	70 93 24 21 	sts	0x2124, r23	; 0x802124 <velocity+0x1>
    31c8:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <velocity+0x2>
    31cc:	90 93 26 21 	sts	0x2126, r25	; 0x802126 <velocity+0x3>
    31d0:	83 e3       	ldi	r24, 0x33	; 51
    31d2:	93 e1       	ldi	r25, 0x13	; 19
    31d4:	a5 e9       	ldi	r26, 0x95	; 149
    31d6:	b3 e4       	ldi	r27, 0x43	; 67
    31d8:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <temp>
    31dc:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <temp+0x1>
    31e0:	a0 93 31 21 	sts	0x2131, r26	; 0x802131 <temp+0x2>
    31e4:	b0 93 32 21 	sts	0x2132, r27	; 0x802132 <temp+0x3>
    31e8:	ac dd       	rcall	.-1192   	; 0x2d42 <get_voltage>
    31ea:	60 93 27 21 	sts	0x2127, r22	; 0x802127 <volt>
    31ee:	70 93 28 21 	sts	0x2128, r23	; 0x802128 <volt+0x1>
    31f2:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <volt+0x2>
    31f6:	90 93 2a 21 	sts	0x212A, r25	; 0x80212a <volt+0x3>
    31fa:	26 96       	adiw	r28, 0x06	; 6
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	1f 91       	pop	r17
    3206:	0f 91       	pop	r16
    3208:	ff 90       	pop	r15
    320a:	ef 90       	pop	r14
    320c:	df 90       	pop	r13
    320e:	cf 90       	pop	r12
    3210:	bf 90       	pop	r11
    3212:	af 90       	pop	r10
    3214:	08 95       	ret

00003216 <state_check>:
    3216:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <state>
    321a:	81 30       	cpi	r24, 0x01	; 1
    321c:	81 f1       	breq	.+96     	; 0x327e <state_check+0x68>
    321e:	38 f0       	brcs	.+14     	; 0x322e <state_check+0x18>
    3220:	82 30       	cpi	r24, 0x02	; 2
    3222:	09 f4       	brne	.+2      	; 0x3226 <state_check+0x10>
    3224:	55 c0       	rjmp	.+170    	; 0x32d0 <state_check+0xba>
    3226:	83 30       	cpi	r24, 0x03	; 3
    3228:	09 f4       	brne	.+2      	; 0x322c <state_check+0x16>
    322a:	fc c0       	rjmp	.+504    	; 0x3424 <state_check+0x20e>
    322c:	7c c0       	rjmp	.+248    	; 0x3326 <state_check+0x110>
    322e:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <velocity>
    3232:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <velocity+0x1>
    3236:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <velocity+0x2>
    323a:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <velocity+0x3>
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e4       	ldi	r20, 0x40	; 64
    3244:	50 e4       	ldi	r21, 0x40	; 64
    3246:	0e 94 1e 28 	call	0x503c	; 0x503c <__cmpsf2>
    324a:	88 23       	and	r24, r24
    324c:	0c f0       	brlt	.+2      	; 0x3250 <state_check+0x3a>
    324e:	ea c0       	rjmp	.+468    	; 0x3424 <state_check+0x20e>
    3250:	60 91 2b 21 	lds	r22, 0x212B	; 0x80212b <alt>
    3254:	70 91 2c 21 	lds	r23, 0x212C	; 0x80212c <alt+0x1>
    3258:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <alt+0x2>
    325c:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <alt+0x3>
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	41 ee       	ldi	r20, 0xE1	; 225
    3266:	53 e4       	ldi	r21, 0x43	; 67
    3268:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
    326c:	18 16       	cp	r1, r24
    326e:	0c f0       	brlt	.+2      	; 0x3272 <state_check+0x5c>
    3270:	d9 c0       	rjmp	.+434    	; 0x3424 <state_check+0x20e>
    3272:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <state>
    3276:	8f 5f       	subi	r24, 0xFF	; 255
    3278:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <state>
    327c:	08 95       	ret
    327e:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <velocity>
    3282:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <velocity+0x1>
    3286:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <velocity+0x2>
    328a:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <velocity+0x3>
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e4       	ldi	r20, 0x40	; 64
    3294:	50 e4       	ldi	r21, 0x40	; 64
    3296:	0e 94 1e 28 	call	0x503c	; 0x503c <__cmpsf2>
    329a:	88 23       	and	r24, r24
    329c:	84 f4       	brge	.+32     	; 0x32be <state_check+0xa8>
    329e:	60 91 2b 21 	lds	r22, 0x212B	; 0x80212b <alt>
    32a2:	70 91 2c 21 	lds	r23, 0x212C	; 0x80212c <alt+0x1>
    32a6:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <alt+0x2>
    32aa:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <alt+0x3>
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	41 ee       	ldi	r20, 0xE1	; 225
    32b4:	53 e4       	ldi	r21, 0x43	; 67
    32b6:	0e 94 1e 28 	call	0x503c	; 0x503c <__cmpsf2>
    32ba:	88 23       	and	r24, r24
    32bc:	1c f0       	brlt	.+6      	; 0x32c4 <state_check+0xae>
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <released>
    32c4:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <state>
    32c8:	8f 5f       	subi	r24, 0xFF	; 255
    32ca:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <state>
    32ce:	08 95       	ret
    32d0:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <velocity>
    32d4:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <velocity+0x1>
    32d8:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <velocity+0x2>
    32dc:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <velocity+0x3>
    32e0:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    32e4:	9b 01       	movw	r18, r22
    32e6:	77 23       	and	r23, r23
    32e8:	24 f4       	brge	.+8      	; 0x32f2 <state_check+0xdc>
    32ea:	22 27       	eor	r18, r18
    32ec:	33 27       	eor	r19, r19
    32ee:	26 1b       	sub	r18, r22
    32f0:	37 0b       	sbc	r19, r23
    32f2:	23 30       	cpi	r18, 0x03	; 3
    32f4:	31 05       	cpc	r19, r1
    32f6:	8c f0       	brlt	.+34     	; 0x331a <state_check+0x104>
    32f8:	60 91 2b 21 	lds	r22, 0x212B	; 0x80212b <alt>
    32fc:	70 91 2c 21 	lds	r23, 0x212C	; 0x80212c <alt+0x1>
    3300:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <alt+0x2>
    3304:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <alt+0x3>
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e2       	ldi	r20, 0x20	; 32
    330e:	51 e4       	ldi	r21, 0x41	; 65
    3310:	0e 94 1e 28 	call	0x503c	; 0x503c <__cmpsf2>
    3314:	88 23       	and	r24, r24
    3316:	0c f0       	brlt	.+2      	; 0x331a <state_check+0x104>
    3318:	85 c0       	rjmp	.+266    	; 0x3424 <state_check+0x20e>
    331a:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <state>
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <state>
    3324:	08 95       	ret
    3326:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <velocity>
    332a:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <velocity+0x1>
    332e:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <velocity+0x2>
    3332:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <velocity+0x3>
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e4       	ldi	r20, 0x40	; 64
    333c:	50 e4       	ldi	r21, 0x40	; 64
    333e:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
    3342:	18 16       	cp	r1, r24
    3344:	14 f4       	brge	.+4      	; 0x334a <state_check+0x134>
    3346:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <state>
    334a:	60 91 2b 21 	lds	r22, 0x212B	; 0x80212b <alt>
    334e:	70 91 2c 21 	lds	r23, 0x212C	; 0x80212c <alt+0x1>
    3352:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <alt+0x2>
    3356:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <alt+0x3>
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	41 ee       	ldi	r20, 0xE1	; 225
    3360:	53 e4       	ldi	r21, 0x43	; 67
    3362:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
    3366:	18 16       	cp	r1, r24
    3368:	9c f4       	brge	.+38     	; 0x3390 <state_check+0x17a>
    336a:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <velocity>
    336e:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <velocity+0x1>
    3372:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <velocity+0x2>
    3376:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <velocity+0x3>
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e4       	ldi	r20, 0x40	; 64
    3380:	50 e4       	ldi	r21, 0x40	; 64
    3382:	0e 94 1e 28 	call	0x503c	; 0x503c <__cmpsf2>
    3386:	88 23       	and	r24, r24
    3388:	1c f4       	brge	.+6      	; 0x3390 <state_check+0x17a>
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <state>
    3390:	60 91 2b 21 	lds	r22, 0x212B	; 0x80212b <alt>
    3394:	70 91 2c 21 	lds	r23, 0x212C	; 0x80212c <alt+0x1>
    3398:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <alt+0x2>
    339c:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <alt+0x3>
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	41 ee       	ldi	r20, 0xE1	; 225
    33a6:	53 e4       	ldi	r21, 0x43	; 67
    33a8:	0e 94 1e 28 	call	0x503c	; 0x503c <__cmpsf2>
    33ac:	88 23       	and	r24, r24
    33ae:	9c f4       	brge	.+38     	; 0x33d6 <state_check+0x1c0>
    33b0:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <velocity>
    33b4:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <velocity+0x1>
    33b8:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <velocity+0x2>
    33bc:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <velocity+0x3>
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e4       	ldi	r20, 0x40	; 64
    33c6:	50 e4       	ldi	r21, 0x40	; 64
    33c8:	0e 94 1e 28 	call	0x503c	; 0x503c <__cmpsf2>
    33cc:	88 23       	and	r24, r24
    33ce:	1c f4       	brge	.+6      	; 0x33d6 <state_check+0x1c0>
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <state>
    33d6:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <velocity>
    33da:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <velocity+0x1>
    33de:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <velocity+0x2>
    33e2:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <velocity+0x3>
    33e6:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    33ea:	9b 01       	movw	r18, r22
    33ec:	77 23       	and	r23, r23
    33ee:	24 f4       	brge	.+8      	; 0x33f8 <state_check+0x1e2>
    33f0:	22 27       	eor	r18, r18
    33f2:	33 27       	eor	r19, r19
    33f4:	26 1b       	sub	r18, r22
    33f6:	37 0b       	sbc	r19, r23
    33f8:	23 30       	cpi	r18, 0x03	; 3
    33fa:	31 05       	cpc	r19, r1
    33fc:	9c f4       	brge	.+38     	; 0x3424 <state_check+0x20e>
    33fe:	60 91 2b 21 	lds	r22, 0x212B	; 0x80212b <alt>
    3402:	70 91 2c 21 	lds	r23, 0x212C	; 0x80212c <alt+0x1>
    3406:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <alt+0x2>
    340a:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <alt+0x3>
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e2       	ldi	r20, 0x20	; 32
    3414:	51 e4       	ldi	r21, 0x41	; 65
    3416:	0e 94 1e 28 	call	0x503c	; 0x503c <__cmpsf2>
    341a:	88 23       	and	r24, r24
    341c:	1c f4       	brge	.+6      	; 0x3424 <state_check+0x20e>
    341e:	83 e0       	ldi	r24, 0x03	; 3
    3420:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <state>
    3424:	08 95       	ret

00003426 <servo_pid>:
    3426:	8f 92       	push	r8
    3428:	9f 92       	push	r9
    342a:	af 92       	push	r10
    342c:	bf 92       	push	r11
    342e:	cf 92       	push	r12
    3430:	df 92       	push	r13
    3432:	ef 92       	push	r14
    3434:	ff 92       	push	r15
    3436:	0f 93       	push	r16
    3438:	1f 93       	push	r17
    343a:	cf 93       	push	r28
    343c:	df 93       	push	r29
    343e:	7c 01       	movw	r14, r24
    3440:	c0 e0       	ldi	r28, 0x00	; 0
    3442:	d0 e0       	ldi	r29, 0x00	; 0
    3444:	00 e0       	ldi	r16, 0x00	; 0
    3446:	10 e0       	ldi	r17, 0x00	; 0
    3448:	be 01       	movw	r22, r28
    344a:	c7 01       	movw	r24, r14
    344c:	df d9       	rcall	.-3138   	; 0x280c <rb16_get_nth>
    344e:	08 0f       	add	r16, r24
    3450:	19 1f       	adc	r17, r25
    3452:	21 96       	adiw	r28, 0x01	; 1
    3454:	ca 30       	cpi	r28, 0x0A	; 10
    3456:	d1 05       	cpc	r29, r1
    3458:	b9 f7       	brne	.-18     	; 0x3448 <servo_pid+0x22>
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	c7 01       	movw	r24, r14
    3460:	d5 d9       	rcall	.-3158   	; 0x280c <rb16_get_nth>
    3462:	ec 01       	movw	r28, r24
    3464:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <rate>
    3468:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <rate+0x1>
    346c:	c7 01       	movw	r24, r14
    346e:	92 dc       	rcall	.-1756   	; 0x2d94 <diff>
    3470:	6b 01       	movw	r12, r22
    3472:	7c 01       	movw	r14, r24
    3474:	be 01       	movw	r22, r28
    3476:	dd 0f       	add	r29, r29
    3478:	88 0b       	sbc	r24, r24
    347a:	99 0b       	sbc	r25, r25
    347c:	0e 94 bd 28 	call	0x517a	; 0x517a <__floatsisf>
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	a9 01       	movw	r20, r18
    3486:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	48 ec       	ldi	r20, 0xC8	; 200
    3490:	52 e4       	ldi	r21, 0x42	; 66
    3492:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    3496:	4b 01       	movw	r8, r22
    3498:	5c 01       	movw	r10, r24
    349a:	b8 01       	movw	r22, r16
    349c:	11 0f       	add	r17, r17
    349e:	88 0b       	sbc	r24, r24
    34a0:	99 0b       	sbc	r25, r25
    34a2:	0e 94 bd 28 	call	0x517a	; 0x517a <__floatsisf>
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	a9 01       	movw	r20, r18
    34ac:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	48 ec       	ldi	r20, 0xC8	; 200
    34b6:	52 e4       	ldi	r21, 0x42	; 66
    34b8:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    34bc:	9b 01       	movw	r18, r22
    34be:	ac 01       	movw	r20, r24
    34c0:	c5 01       	movw	r24, r10
    34c2:	b4 01       	movw	r22, r8
    34c4:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    34c8:	4b 01       	movw	r8, r22
    34ca:	5c 01       	movw	r10, r24
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	a9 01       	movw	r20, r18
    34d2:	c7 01       	movw	r24, r14
    34d4:	b6 01       	movw	r22, r12
    34d6:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    34da:	9b 01       	movw	r18, r22
    34dc:	ac 01       	movw	r20, r24
    34de:	c5 01       	movw	r24, r10
    34e0:	b4 01       	movw	r22, r8
    34e2:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e8       	ldi	r19, 0x80	; 128
    34ea:	4b eb       	ldi	r20, 0xBB	; 187
    34ec:	54 e4       	ldi	r21, 0x44	; 68
    34ee:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__addsf3>
    34f2:	0e 94 8f 28 	call	0x511e	; 0x511e <__fixunssfsi>
    34f6:	60 93 12 20 	sts	0x2012, r22	; 0x802012 <servo_pulse>
    34fa:	70 93 13 20 	sts	0x2013, r23	; 0x802013 <servo_pulse+0x1>
    34fe:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <servo_pulse>
    3502:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <servo_pulse+0x1>
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	0e 94 bb 28 	call	0x5176	; 0x5176 <__floatunsisf>
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	4a e7       	ldi	r20, 0x7A	; 122
    3514:	54 e4       	ldi	r21, 0x44	; 68
    3516:	0e 94 22 28 	call	0x5044	; 0x5044 <__divsf3>
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	4a ef       	ldi	r20, 0xFA	; 250
    3520:	53 e4       	ldi	r21, 0x43	; 67
    3522:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    3526:	0e 94 8f 28 	call	0x511e	; 0x511e <__fixunssfsi>
    352a:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    352e:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    3532:	df 91       	pop	r29
    3534:	cf 91       	pop	r28
    3536:	1f 91       	pop	r17
    3538:	0f 91       	pop	r16
    353a:	ff 90       	pop	r15
    353c:	ef 90       	pop	r14
    353e:	df 90       	pop	r13
    3540:	cf 90       	pop	r12
    3542:	bf 90       	pop	r11
    3544:	af 90       	pop	r10
    3546:	9f 90       	pop	r9
    3548:	8f 90       	pop	r8
    354a:	08 95       	ret

0000354c <clock_init>:
    354c:	61 e0       	ldi	r22, 0x01	; 1
    354e:	85 e0       	ldi	r24, 0x05	; 5
    3550:	4f da       	rcall	.-2914   	; 0x29f0 <sysclk_enable_module>
    3552:	e0 e0       	ldi	r30, 0x00	; 0
    3554:	fa e0       	ldi	r31, 0x0A	; 10
    3556:	87 e0       	ldi	r24, 0x07	; 7
    3558:	80 83       	st	Z, r24
    355a:	84 e3       	ldi	r24, 0x34	; 52
    355c:	9c e0       	ldi	r25, 0x0C	; 12
    355e:	86 a3       	std	Z+38, r24	; 0x26
    3560:	97 a3       	std	Z+39, r25	; 0x27
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	86 83       	std	Z+6, r24	; 0x06
    3566:	08 95       	ret

00003568 <cali_alt>:
    3568:	80 91 33 21 	lds	r24, 0x2133	; 0x802133 <press>
    356c:	90 91 34 21 	lds	r25, 0x2134	; 0x802134 <press+0x1>
    3570:	a0 91 35 21 	lds	r26, 0x2135	; 0x802135 <press+0x2>
    3574:	b0 91 36 21 	lds	r27, 0x2136	; 0x802136 <press+0x3>
    3578:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <ground_p>
    357c:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <ground_p+0x1>
    3580:	a0 93 26 20 	sts	0x2026, r26	; 0x802026 <ground_p+0x2>
    3584:	b0 93 27 20 	sts	0x2027, r27	; 0x802027 <ground_p+0x3>
    3588:	83 e3       	ldi	r24, 0x33	; 51
    358a:	93 e1       	ldi	r25, 0x13	; 19
    358c:	a5 e9       	ldi	r26, 0x95	; 149
    358e:	b3 e4       	ldi	r27, 0x43	; 67
    3590:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <ground_t>
    3594:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <ground_t+0x1>
    3598:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <ground_t+0x2>
    359c:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <ground_t+0x3>
    35a0:	08 95       	ret

000035a2 <cali_ang>:
    35a2:	0e 94 78 12 	call	0x24f0	; 0x24f0 <imu_heading>
    35a6:	60 93 45 21 	sts	0x2145, r22	; 0x802145 <ref_yaw>
    35aa:	70 93 46 21 	sts	0x2146, r23	; 0x802146 <ref_yaw+0x1>
    35ae:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <ref_yaw+0x2>
    35b2:	90 93 48 21 	sts	0x2148, r25	; 0x802148 <ref_yaw+0x3>
    35b6:	08 95       	ret

000035b8 <calibrate>:
    35b8:	d7 df       	rcall	.-82     	; 0x3568 <cali_alt>
    35ba:	f3 cf       	rjmp	.-26     	; 0x35a2 <cali_ang>
    35bc:	08 95       	ret

000035be <servo_release>:
    35be:	e0 e0       	ldi	r30, 0x00	; 0
    35c0:	f9 e0       	ldi	r31, 0x09	; 9
    35c2:	86 a1       	ldd	r24, Z+38	; 0x26
    35c4:	97 a1       	ldd	r25, Z+39	; 0x27
    35c6:	88 5e       	subi	r24, 0xE8	; 232
    35c8:	93 40       	sbci	r25, 0x03	; 3
    35ca:	80 a7       	std	Z+40, r24	; 0x28
    35cc:	91 a7       	std	Z+41, r25	; 0x29
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <released>
    35d4:	08 95       	ret

000035d6 <servo_close>:

	released = 1;
}

void servo_close(void){
	TCD0.CCA = TCD0.PER - 600;
    35d6:	e0 e0       	ldi	r30, 0x00	; 0
    35d8:	f9 e0       	ldi	r31, 0x09	; 9
    35da:	86 a1       	ldd	r24, Z+38	; 0x26
    35dc:	97 a1       	ldd	r25, Z+39	; 0x27
    35de:	88 55       	subi	r24, 0x58	; 88
    35e0:	92 40       	sbci	r25, 0x02	; 2
    35e2:	80 a7       	std	Z+40, r24	; 0x28
    35e4:	91 a7       	std	Z+41, r25	; 0x29

	released = 0;
    35e6:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <released>
    35ea:	08 95       	ret

000035ec <packet>:
}

void packet(void){
    35ec:	2f 92       	push	r2
    35ee:	3f 92       	push	r3
    35f0:	4f 92       	push	r4
    35f2:	5f 92       	push	r5
    35f4:	6f 92       	push	r6
    35f6:	7f 92       	push	r7
    35f8:	8f 92       	push	r8
    35fa:	9f 92       	push	r9
    35fc:	af 92       	push	r10
    35fe:	bf 92       	push	r11
    3600:	cf 92       	push	r12
    3602:	df 92       	push	r13
    3604:	ef 92       	push	r14
    3606:	ff 92       	push	r15
    3608:	0f 93       	push	r16
    360a:	1f 93       	push	r17
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	e9 97       	sbiw	r28, 0x39	; 57
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	de bf       	out	0x3e, r29	; 62
	//XBEE_spi_write(str);
	packets++;
    361a:	80 91 37 21 	lds	r24, 0x2137	; 0x802137 <packets>
    361e:	90 91 38 21 	lds	r25, 0x2138	; 0x802138 <packets+0x1>
    3622:	01 96       	adiw	r24, 0x01	; 1
    3624:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <packets>
    3628:	90 93 38 21 	sts	0x2138, r25	; 0x802138 <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    362c:	60 91 01 21 	lds	r22, 0x2101	; 0x802101 <angle>
    3630:	70 91 02 21 	lds	r23, 0x2102	; 0x802102 <angle+0x1>
    3634:	80 91 03 21 	lds	r24, 0x2103	; 0x802103 <angle+0x2>
    3638:	90 91 04 21 	lds	r25, 0x2104	; 0x802104 <angle+0x3>
    363c:	20 91 59 21 	lds	r18, 0x2159	; 0x802159 <state>
    3640:	29 83       	std	Y+1, r18	; 0x01
    3642:	40 90 05 21 	lds	r4, 0x2105	; 0x802105 <rpm>
    3646:	50 90 06 21 	lds	r5, 0x2106	; 0x802106 <rpm+0x1>
    364a:	60 90 07 21 	lds	r6, 0x2107	; 0x802107 <rpm+0x2>
    364e:	70 90 08 21 	lds	r7, 0x2108	; 0x802108 <rpm+0x3>
    3652:	80 90 09 21 	lds	r8, 0x2109	; 0x802109 <roll>
    3656:	90 90 0a 21 	lds	r9, 0x210A	; 0x80210a <roll+0x1>
    365a:	a0 90 0b 21 	lds	r10, 0x210B	; 0x80210b <roll+0x2>
    365e:	b0 90 0c 21 	lds	r11, 0x210C	; 0x80210c <roll+0x3>
    3662:	c0 90 0d 21 	lds	r12, 0x210D	; 0x80210d <pitch>
    3666:	d0 90 0e 21 	lds	r13, 0x210E	; 0x80210e <pitch+0x1>
    366a:	e0 90 0f 21 	lds	r14, 0x210F	; 0x80210f <pitch+0x2>
    366e:	f0 90 10 21 	lds	r15, 0x2110	; 0x802110 <pitch+0x3>
    3672:	40 91 11 21 	lds	r20, 0x2111	; 0x802111 <gps_sats>
    3676:	50 91 12 21 	lds	r21, 0x2112	; 0x802112 <gps_sats+0x1>
    367a:	48 af       	std	Y+56, r20	; 0x38
    367c:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    367e:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <gps_alt>
    3682:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <gps_alt+0x1>
    3686:	40 91 15 21 	lds	r20, 0x2115	; 0x802115 <gps_alt+0x2>
    368a:	50 91 16 21 	lds	r21, 0x2116	; 0x802116 <gps_alt+0x3>
    368e:	2a 83       	std	Y+2, r18	; 0x02
    3690:	3b 83       	std	Y+3, r19	; 0x03
    3692:	4c 83       	std	Y+4, r20	; 0x04
    3694:	5d 83       	std	Y+5, r21	; 0x05
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3696:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <gps_alt>
    369a:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <gps_alt+0x1>
    369e:	40 91 15 21 	lds	r20, 0x2115	; 0x802115 <gps_alt+0x2>
    36a2:	50 91 16 21 	lds	r21, 0x2116	; 0x802116 <gps_alt+0x3>
    36a6:	2e 83       	std	Y+6, r18	; 0x06
    36a8:	3f 83       	std	Y+7, r19	; 0x07
    36aa:	48 87       	std	Y+8, r20	; 0x08
    36ac:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    36ae:	20 91 17 21 	lds	r18, 0x2117	; 0x802117 <gps_long>
    36b2:	30 91 18 21 	lds	r19, 0x2118	; 0x802118 <gps_long+0x1>
    36b6:	40 91 19 21 	lds	r20, 0x2119	; 0x802119 <gps_long+0x2>
    36ba:	50 91 1a 21 	lds	r21, 0x211A	; 0x80211a <gps_long+0x3>
    36be:	2a 87       	std	Y+10, r18	; 0x0a
    36c0:	3b 87       	std	Y+11, r19	; 0x0b
    36c2:	4c 87       	std	Y+12, r20	; 0x0c
    36c4:	5d 87       	std	Y+13, r21	; 0x0d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    36c6:	20 91 17 21 	lds	r18, 0x2117	; 0x802117 <gps_long>
    36ca:	30 91 18 21 	lds	r19, 0x2118	; 0x802118 <gps_long+0x1>
    36ce:	40 91 19 21 	lds	r20, 0x2119	; 0x802119 <gps_long+0x2>
    36d2:	50 91 1a 21 	lds	r21, 0x211A	; 0x80211a <gps_long+0x3>
    36d6:	2e 87       	std	Y+14, r18	; 0x0e
    36d8:	3f 87       	std	Y+15, r19	; 0x0f
    36da:	48 8b       	std	Y+16, r20	; 0x10
    36dc:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    36de:	20 91 1b 21 	lds	r18, 0x211B	; 0x80211b <gps_lat>
    36e2:	30 91 1c 21 	lds	r19, 0x211C	; 0x80211c <gps_lat+0x1>
    36e6:	40 91 1d 21 	lds	r20, 0x211D	; 0x80211d <gps_lat+0x2>
    36ea:	50 91 1e 21 	lds	r21, 0x211E	; 0x80211e <gps_lat+0x3>
    36ee:	2a 8b       	std	Y+18, r18	; 0x12
    36f0:	3b 8b       	std	Y+19, r19	; 0x13
    36f2:	4c 8b       	std	Y+20, r20	; 0x14
    36f4:	5d 8b       	std	Y+21, r21	; 0x15
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    36f6:	20 91 1b 21 	lds	r18, 0x211B	; 0x80211b <gps_lat>
    36fa:	30 91 1c 21 	lds	r19, 0x211C	; 0x80211c <gps_lat+0x1>
    36fe:	40 91 1d 21 	lds	r20, 0x211D	; 0x80211d <gps_lat+0x2>
    3702:	50 91 1e 21 	lds	r21, 0x211E	; 0x80211e <gps_lat+0x3>
    3706:	2e 8b       	std	Y+22, r18	; 0x16
    3708:	3f 8b       	std	Y+23, r19	; 0x17
    370a:	48 8f       	std	Y+24, r20	; 0x18
    370c:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    370e:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <gps_t>
    3712:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <gps_t+0x1>
    3716:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <gps_t+0x2>
    371a:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <gps_t+0x3>
    371e:	2a 8f       	std	Y+26, r18	; 0x1a
    3720:	3b 8f       	std	Y+27, r19	; 0x1b
    3722:	4c 8f       	std	Y+28, r20	; 0x1c
    3724:	5d 8f       	std	Y+29, r21	; 0x1d
    3726:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <gps_t>
    372a:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <gps_t+0x1>
    372e:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <gps_t+0x2>
    3732:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <gps_t+0x3>
    3736:	2e 8f       	std	Y+30, r18	; 0x1e
    3738:	3f 8f       	std	Y+31, r19	; 0x1f
    373a:	48 a3       	std	Y+32, r20	; 0x20
    373c:	59 a3       	std	Y+33, r21	; 0x21
    373e:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <gps_t>
    3742:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <gps_t+0x1>
    3746:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <gps_t+0x2>
    374a:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <gps_t+0x3>
    374e:	2a a3       	std	Y+34, r18	; 0x22
    3750:	3b a3       	std	Y+35, r19	; 0x23
    3752:	4c a3       	std	Y+36, r20	; 0x24
    3754:	5d a3       	std	Y+37, r21	; 0x25
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3756:	20 91 27 21 	lds	r18, 0x2127	; 0x802127 <volt>
    375a:	30 91 28 21 	lds	r19, 0x2128	; 0x802128 <volt+0x1>
    375e:	40 91 29 21 	lds	r20, 0x2129	; 0x802129 <volt+0x2>
    3762:	50 91 2a 21 	lds	r21, 0x212A	; 0x80212a <volt+0x3>
    3766:	2e a3       	std	Y+38, r18	; 0x26
    3768:	3f a3       	std	Y+39, r19	; 0x27
    376a:	48 a7       	std	Y+40, r20	; 0x28
    376c:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    376e:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <temp>
    3772:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <temp+0x1>
    3776:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <temp+0x2>
    377a:	50 91 32 21 	lds	r21, 0x2132	; 0x802132 <temp+0x3>
    377e:	2a a7       	std	Y+42, r18	; 0x2a
    3780:	3b a7       	std	Y+43, r19	; 0x2b
    3782:	4c a7       	std	Y+44, r20	; 0x2c
    3784:	5d a7       	std	Y+45, r21	; 0x2d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    3786:	20 91 33 21 	lds	r18, 0x2133	; 0x802133 <press>
    378a:	30 91 34 21 	lds	r19, 0x2134	; 0x802134 <press+0x1>
    378e:	40 91 35 21 	lds	r20, 0x2135	; 0x802135 <press+0x2>
    3792:	50 91 36 21 	lds	r21, 0x2136	; 0x802136 <press+0x3>
    3796:	2e a7       	std	Y+46, r18	; 0x2e
    3798:	3f a7       	std	Y+47, r19	; 0x2f
    379a:	48 ab       	std	Y+48, r20	; 0x30
    379c:	59 ab       	std	Y+49, r21	; 0x31
    379e:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <alt>
    37a2:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <alt+0x1>
    37a6:	40 91 2d 21 	lds	r20, 0x212D	; 0x80212d <alt+0x2>
    37aa:	50 91 2e 21 	lds	r21, 0x212E	; 0x80212e <alt+0x3>
    37ae:	2a ab       	std	Y+50, r18	; 0x32
    37b0:	3b ab       	std	Y+51, r19	; 0x33
    37b2:	4c ab       	std	Y+52, r20	; 0x34
    37b4:	5d ab       	std	Y+53, r21	; 0x35
    37b6:	00 91 37 21 	lds	r16, 0x2137	; 0x802137 <packets>
    37ba:	10 91 38 21 	lds	r17, 0x2138	; 0x802138 <packets+0x1>
    37be:	20 90 3b 21 	lds	r2, 0x213B	; 0x80213b <timer>
    37c2:	30 90 3c 21 	lds	r3, 0x213C	; 0x80213c <timer+0x1>
    37c6:	40 91 3b 21 	lds	r20, 0x213B	; 0x80213b <timer>
    37ca:	50 91 3c 21 	lds	r21, 0x213C	; 0x80213c <timer+0x1>
    37ce:	4e ab       	std	Y+54, r20	; 0x36
    37d0:	5f ab       	std	Y+55, r21	; 0x37
    37d2:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    37d6:	7f 93       	push	r23
    37d8:	6f 93       	push	r22
    37da:	1f 92       	push	r1
    37dc:	59 81       	ldd	r21, Y+1	; 0x01
    37de:	5f 93       	push	r21
    37e0:	c3 01       	movw	r24, r6
    37e2:	b2 01       	movw	r22, r4
    37e4:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    37e8:	7f 93       	push	r23
    37ea:	6f 93       	push	r22
    37ec:	c5 01       	movw	r24, r10
    37ee:	b4 01       	movw	r22, r8
    37f0:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    37f4:	7f 93       	push	r23
    37f6:	6f 93       	push	r22
    37f8:	c7 01       	movw	r24, r14
    37fa:	b6 01       	movw	r22, r12
    37fc:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3800:	7f 93       	push	r23
    3802:	6f 93       	push	r22
    3804:	89 ad       	ldd	r24, Y+57	; 0x39
    3806:	8f 93       	push	r24
    3808:	98 ad       	ldd	r25, Y+56	; 0x38
    380a:	9f 93       	push	r25
    380c:	6a 81       	ldd	r22, Y+2	; 0x02
    380e:	7b 81       	ldd	r23, Y+3	; 0x03
    3810:	8c 81       	ldd	r24, Y+4	; 0x04
    3812:	9d 81       	ldd	r25, Y+5	; 0x05
    3814:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3818:	9b 01       	movw	r18, r22
    381a:	22 0f       	add	r18, r18
    381c:	33 1f       	adc	r19, r19
    381e:	66 0f       	add	r22, r22
    3820:	77 1f       	adc	r23, r23
    3822:	66 0f       	add	r22, r22
    3824:	77 1f       	adc	r23, r23
    3826:	66 0f       	add	r22, r22
    3828:	77 1f       	adc	r23, r23
    382a:	c9 01       	movw	r24, r18
    382c:	86 0f       	add	r24, r22
    382e:	97 1f       	adc	r25, r23
    3830:	6a e0       	ldi	r22, 0x0A	; 10
    3832:	70 e0       	ldi	r23, 0x00	; 0
    3834:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <__divmodhi4>
    3838:	9f 93       	push	r25
    383a:	8f 93       	push	r24
    383c:	6e 81       	ldd	r22, Y+6	; 0x06
    383e:	7f 81       	ldd	r23, Y+7	; 0x07
    3840:	88 85       	ldd	r24, Y+8	; 0x08
    3842:	99 85       	ldd	r25, Y+9	; 0x09
    3844:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3848:	7f 93       	push	r23
    384a:	6f 93       	push	r22
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	34 e2       	ldi	r19, 0x24	; 36
    3850:	44 e7       	ldi	r20, 0x74	; 116
    3852:	59 e4       	ldi	r21, 0x49	; 73
    3854:	6a 85       	ldd	r22, Y+10	; 0x0a
    3856:	7b 85       	ldd	r23, Y+11	; 0x0b
    3858:	8c 85       	ldd	r24, Y+12	; 0x0c
    385a:	9d 85       	ldd	r25, Y+13	; 0x0d
    385c:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    3860:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3864:	20 e4       	ldi	r18, 0x40	; 64
    3866:	32 e4       	ldi	r19, 0x42	; 66
    3868:	4f e0       	ldi	r20, 0x0F	; 15
    386a:	50 e0       	ldi	r21, 0x00	; 0
    386c:	0e 94 91 2b 	call	0x5722	; 0x5722 <__divmodsi4>
    3870:	9b 01       	movw	r18, r22
    3872:	77 23       	and	r23, r23
    3874:	24 f4       	brge	.+8      	; 0x387e <packet+0x292>
    3876:	22 27       	eor	r18, r18
    3878:	33 27       	eor	r19, r19
    387a:	26 1b       	sub	r18, r22
    387c:	37 0b       	sbc	r19, r23
    387e:	c9 01       	movw	r24, r18
    3880:	33 0f       	add	r19, r19
    3882:	aa 0b       	sbc	r26, r26
    3884:	bb 0b       	sbc	r27, r27
    3886:	bf 93       	push	r27
    3888:	af 93       	push	r26
    388a:	9f 93       	push	r25
    388c:	8f 93       	push	r24
    388e:	6e 85       	ldd	r22, Y+14	; 0x0e
    3890:	7f 85       	ldd	r23, Y+15	; 0x0f
    3892:	88 89       	ldd	r24, Y+16	; 0x10
    3894:	99 89       	ldd	r25, Y+17	; 0x11
    3896:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    389a:	7f 93       	push	r23
    389c:	6f 93       	push	r22
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	34 e2       	ldi	r19, 0x24	; 36
    38a2:	44 e7       	ldi	r20, 0x74	; 116
    38a4:	59 e4       	ldi	r21, 0x49	; 73
    38a6:	6a 89       	ldd	r22, Y+18	; 0x12
    38a8:	7b 89       	ldd	r23, Y+19	; 0x13
    38aa:	8c 89       	ldd	r24, Y+20	; 0x14
    38ac:	9d 89       	ldd	r25, Y+21	; 0x15
    38ae:	0e 94 71 29 	call	0x52e2	; 0x52e2 <__mulsf3>
    38b2:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    38b6:	20 e4       	ldi	r18, 0x40	; 64
    38b8:	32 e4       	ldi	r19, 0x42	; 66
    38ba:	4f e0       	ldi	r20, 0x0F	; 15
    38bc:	50 e0       	ldi	r21, 0x00	; 0
    38be:	0e 94 91 2b 	call	0x5722	; 0x5722 <__divmodsi4>
    38c2:	9f 93       	push	r25
    38c4:	8f 93       	push	r24
    38c6:	7f 93       	push	r23
    38c8:	6f 93       	push	r22
    38ca:	6e 89       	ldd	r22, Y+22	; 0x16
    38cc:	7f 89       	ldd	r23, Y+23	; 0x17
    38ce:	88 8d       	ldd	r24, Y+24	; 0x18
    38d0:	99 8d       	ldd	r25, Y+25	; 0x19
    38d2:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    38d6:	7f 93       	push	r23
    38d8:	6f 93       	push	r22
    38da:	6a 8d       	ldd	r22, Y+26	; 0x1a
    38dc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    38de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38e2:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    38e6:	0f 2e       	mov	r0, r31
    38e8:	f4 e6       	ldi	r31, 0x64	; 100
    38ea:	cf 2e       	mov	r12, r31
    38ec:	d1 2c       	mov	r13, r1
    38ee:	e1 2c       	mov	r14, r1
    38f0:	f1 2c       	mov	r15, r1
    38f2:	f0 2d       	mov	r31, r0
    38f4:	a7 01       	movw	r20, r14
    38f6:	96 01       	movw	r18, r12
    38f8:	0e 94 91 2b 	call	0x5722	; 0x5722 <__divmodsi4>
    38fc:	7f 93       	push	r23
    38fe:	6f 93       	push	r22
    3900:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3902:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3904:	88 a1       	ldd	r24, Y+32	; 0x20
    3906:	99 a1       	ldd	r25, Y+33	; 0x21
    3908:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    390c:	0f 2e       	mov	r0, r31
    390e:	f0 e1       	ldi	r31, 0x10	; 16
    3910:	8f 2e       	mov	r8, r31
    3912:	f7 e2       	ldi	r31, 0x27	; 39
    3914:	9f 2e       	mov	r9, r31
    3916:	a1 2c       	mov	r10, r1
    3918:	b1 2c       	mov	r11, r1
    391a:	f0 2d       	mov	r31, r0
    391c:	a5 01       	movw	r20, r10
    391e:	94 01       	movw	r18, r8
    3920:	0e 94 91 2b 	call	0x5722	; 0x5722 <__divmodsi4>
    3924:	a7 01       	movw	r20, r14
    3926:	96 01       	movw	r18, r12
    3928:	0e 94 91 2b 	call	0x5722	; 0x5722 <__divmodsi4>
    392c:	3f 93       	push	r19
    392e:	2f 93       	push	r18
    3930:	6a a1       	ldd	r22, Y+34	; 0x22
    3932:	7b a1       	ldd	r23, Y+35	; 0x23
    3934:	8c a1       	ldd	r24, Y+36	; 0x24
    3936:	9d a1       	ldd	r25, Y+37	; 0x25
    3938:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    393c:	a5 01       	movw	r20, r10
    393e:	94 01       	movw	r18, r8
    3940:	0e 94 91 2b 	call	0x5722	; 0x5722 <__divmodsi4>
    3944:	3f 93       	push	r19
    3946:	2f 93       	push	r18
    3948:	6e a1       	ldd	r22, Y+38	; 0x26
    394a:	7f a1       	ldd	r23, Y+39	; 0x27
    394c:	88 a5       	ldd	r24, Y+40	; 0x28
    394e:	99 a5       	ldd	r25, Y+41	; 0x29
    3950:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3954:	7f 93       	push	r23
    3956:	6f 93       	push	r22
    3958:	23 e3       	ldi	r18, 0x33	; 51
    395a:	33 e9       	ldi	r19, 0x93	; 147
    395c:	48 e8       	ldi	r20, 0x88	; 136
    395e:	53 e4       	ldi	r21, 0x43	; 67
    3960:	6a a5       	ldd	r22, Y+42	; 0x2a
    3962:	7b a5       	ldd	r23, Y+43	; 0x2b
    3964:	8c a5       	ldd	r24, Y+44	; 0x2c
    3966:	9d a5       	ldd	r25, Y+45	; 0x2d
    3968:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <__subsf3>
    396c:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3970:	7f 93       	push	r23
    3972:	6f 93       	push	r22
    3974:	6e a5       	ldd	r22, Y+46	; 0x2e
    3976:	7f a5       	ldd	r23, Y+47	; 0x2f
    3978:	88 a9       	ldd	r24, Y+48	; 0x30
    397a:	99 a9       	ldd	r25, Y+49	; 0x31
    397c:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3980:	9f 93       	push	r25
    3982:	8f 93       	push	r24
    3984:	7f 93       	push	r23
    3986:	6f 93       	push	r22
    3988:	6a a9       	ldd	r22, Y+50	; 0x32
    398a:	7b a9       	ldd	r23, Y+51	; 0x33
    398c:	8c a9       	ldd	r24, Y+52	; 0x34
    398e:	9d a9       	ldd	r25, Y+53	; 0x35
    3990:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3994:	7f 93       	push	r23
    3996:	6f 93       	push	r22
    3998:	1f 93       	push	r17
    399a:	0f 93       	push	r16
    399c:	91 01       	movw	r18, r2
    399e:	ad ec       	ldi	r26, 0xCD	; 205
    39a0:	bc ec       	ldi	r27, 0xCC	; 204
    39a2:	0e 94 b6 2b 	call	0x576c	; 0x576c <__umulhisi3>
    39a6:	96 95       	lsr	r25
    39a8:	87 95       	ror	r24
    39aa:	96 95       	lsr	r25
    39ac:	87 95       	ror	r24
    39ae:	96 95       	lsr	r25
    39b0:	87 95       	ror	r24
    39b2:	9c 01       	movw	r18, r24
    39b4:	22 0f       	add	r18, r18
    39b6:	33 1f       	adc	r19, r19
    39b8:	88 0f       	add	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	88 0f       	add	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	88 0f       	add	r24, r24
    39c2:	99 1f       	adc	r25, r25
    39c4:	82 0f       	add	r24, r18
    39c6:	93 1f       	adc	r25, r19
    39c8:	28 1a       	sub	r2, r24
    39ca:	39 0a       	sbc	r3, r25
    39cc:	3f 92       	push	r3
    39ce:	2f 92       	push	r2
    39d0:	2e a9       	ldd	r18, Y+54	; 0x36
    39d2:	3f a9       	ldd	r19, Y+55	; 0x37
    39d4:	0e 94 b6 2b 	call	0x576c	; 0x576c <__umulhisi3>
    39d8:	96 95       	lsr	r25
    39da:	87 95       	ror	r24
    39dc:	96 95       	lsr	r25
    39de:	87 95       	ror	r24
    39e0:	96 95       	lsr	r25
    39e2:	87 95       	ror	r24
    39e4:	9f 93       	push	r25
    39e6:	8f 93       	push	r24
    39e8:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <format+0x1>
    39ec:	8f 93       	push	r24
    39ee:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <format>
    39f2:	8f 93       	push	r24
    39f4:	29 ea       	ldi	r18, 0xA9	; 169
    39f6:	31 e2       	ldi	r19, 0x21	; 33
    39f8:	3f 93       	push	r19
    39fa:	2f 93       	push	r18
    39fc:	0e 94 63 2c 	call	0x58c6	; 0x58c6 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    3a00:	cd bf       	out	0x3d, r28	; 61
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	29 ea       	ldi	r18, 0xA9	; 169
    3a06:	31 e2       	ldi	r19, 0x21	; 33
    3a08:	3f 93       	push	r19
    3a0a:	2f 93       	push	r18
    3a0c:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <printf>
}
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	e9 96       	adiw	r28, 0x39	; 57
    3a16:	cd bf       	out	0x3d, r28	; 61
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	df 91       	pop	r29
    3a1c:	cf 91       	pop	r28
    3a1e:	1f 91       	pop	r17
    3a20:	0f 91       	pop	r16
    3a22:	ff 90       	pop	r15
    3a24:	ef 90       	pop	r14
    3a26:	df 90       	pop	r13
    3a28:	cf 90       	pop	r12
    3a2a:	bf 90       	pop	r11
    3a2c:	af 90       	pop	r10
    3a2e:	9f 90       	pop	r9
    3a30:	8f 90       	pop	r8
    3a32:	7f 90       	pop	r7
    3a34:	6f 90       	pop	r6
    3a36:	5f 90       	pop	r5
    3a38:	4f 90       	pop	r4
    3a3a:	3f 90       	pop	r3
    3a3c:	2f 90       	pop	r2
    3a3e:	08 95       	ret

00003a40 <eeprom_write_const>:

void eeprom_write_const(void){
    3a40:	4f 92       	push	r4
    3a42:	5f 92       	push	r5
    3a44:	6f 92       	push	r6
    3a46:	7f 92       	push	r7
    3a48:	8f 92       	push	r8
    3a4a:	9f 92       	push	r9
    3a4c:	af 92       	push	r10
    3a4e:	bf 92       	push	r11
    3a50:	cf 92       	push	r12
    3a52:	df 92       	push	r13
    3a54:	ef 92       	push	r14
    3a56:	ff 92       	push	r15
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    3a64:	a0 97       	sbiw	r28, 0x20	; 32
    3a66:	cd bf       	out	0x3d, r28	; 61
    3a68:	de bf       	out	0x3e, r29	; 62
	uint64_t p = 0;
	uint64_t t = 0;

	memcpy(&p, &ground_p, 8);
    3a6a:	a4 e2       	ldi	r26, 0x24	; 36
    3a6c:	b0 e2       	ldi	r27, 0x20	; 32
    3a6e:	fc 91       	ld	r31, X
    3a70:	11 96       	adiw	r26, 0x01	; 1
    3a72:	5c 90       	ld	r5, X
    3a74:	11 97       	sbiw	r26, 0x01	; 1
    3a76:	12 96       	adiw	r26, 0x02	; 2
    3a78:	6c 90       	ld	r6, X
    3a7a:	12 97       	sbiw	r26, 0x02	; 2
    3a7c:	13 96       	adiw	r26, 0x03	; 3
    3a7e:	7c 90       	ld	r7, X
    3a80:	13 97       	sbiw	r26, 0x03	; 3
    3a82:	14 96       	adiw	r26, 0x04	; 4
    3a84:	8c 90       	ld	r8, X
    3a86:	14 97       	sbiw	r26, 0x04	; 4
    3a88:	15 96       	adiw	r26, 0x05	; 5
    3a8a:	9c 90       	ld	r9, X
    3a8c:	15 97       	sbiw	r26, 0x05	; 5
    3a8e:	16 96       	adiw	r26, 0x06	; 6
    3a90:	ac 90       	ld	r10, X
    3a92:	16 97       	sbiw	r26, 0x06	; 6
    3a94:	17 96       	adiw	r26, 0x07	; 7
    3a96:	4c 90       	ld	r4, X
	memcpy(&t, &ground_t, 8);
    3a98:	a0 e2       	ldi	r26, 0x20	; 32
    3a9a:	b0 e2       	ldi	r27, 0x20	; 32
    3a9c:	ec 91       	ld	r30, X
    3a9e:	11 96       	adiw	r26, 0x01	; 1
    3aa0:	bc 90       	ld	r11, X
    3aa2:	11 97       	sbiw	r26, 0x01	; 1
    3aa4:	12 96       	adiw	r26, 0x02	; 2
    3aa6:	cc 90       	ld	r12, X
    3aa8:	12 97       	sbiw	r26, 0x02	; 2
    3aaa:	13 96       	adiw	r26, 0x03	; 3
    3aac:	dc 90       	ld	r13, X
    3aae:	13 97       	sbiw	r26, 0x03	; 3
    3ab0:	14 96       	adiw	r26, 0x04	; 4
    3ab2:	ec 90       	ld	r14, X
    3ab4:	14 97       	sbiw	r26, 0x04	; 4
    3ab6:	15 96       	adiw	r26, 0x05	; 5
    3ab8:	fc 90       	ld	r15, X
    3aba:	15 97       	sbiw	r26, 0x05	; 5
    3abc:	16 96       	adiw	r26, 0x06	; 6
    3abe:	1c 91       	ld	r17, X
    3ac0:	16 97       	sbiw	r26, 0x06	; 6
    3ac2:	17 96       	adiw	r26, 0x07	; 7
    3ac4:	ac 91       	ld	r26, X

	uint8_t data[] = {p & 0xFF, (p >> 8) & 0xFF, (p >> 16) & 0xFF, (p >> 24) & 0xFF, (p >> 32) & 0xFF, (p >> 40) & 0xFF, (p >> 48) & 0xFF, p >> 56,
    3ac6:	f9 83       	std	Y+1, r31	; 0x01
    3ac8:	2f 2f       	mov	r18, r31
    3aca:	35 2d       	mov	r19, r5
    3acc:	46 2d       	mov	r20, r6
    3ace:	57 2d       	mov	r21, r7
    3ad0:	68 2d       	mov	r22, r8
    3ad2:	79 2d       	mov	r23, r9
    3ad4:	8a 2d       	mov	r24, r10
    3ad6:	94 2d       	mov	r25, r4
    3ad8:	08 e0       	ldi	r16, 0x08	; 8
    3ada:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3ade:	2a 83       	std	Y+2, r18	; 0x02
    3ae0:	2f 2f       	mov	r18, r31
    3ae2:	35 2d       	mov	r19, r5
    3ae4:	46 2d       	mov	r20, r6
    3ae6:	57 2d       	mov	r21, r7
    3ae8:	68 2d       	mov	r22, r8
    3aea:	79 2d       	mov	r23, r9
    3aec:	8a 2d       	mov	r24, r10
    3aee:	94 2d       	mov	r25, r4
    3af0:	00 e1       	ldi	r16, 0x10	; 16
    3af2:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3af6:	2b 83       	std	Y+3, r18	; 0x03
    3af8:	2f 2f       	mov	r18, r31
    3afa:	35 2d       	mov	r19, r5
    3afc:	46 2d       	mov	r20, r6
    3afe:	57 2d       	mov	r21, r7
    3b00:	68 2d       	mov	r22, r8
    3b02:	79 2d       	mov	r23, r9
    3b04:	8a 2d       	mov	r24, r10
    3b06:	94 2d       	mov	r25, r4
    3b08:	08 e1       	ldi	r16, 0x18	; 24
    3b0a:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3b0e:	2c 83       	std	Y+4, r18	; 0x04
    3b10:	2f 2f       	mov	r18, r31
    3b12:	35 2d       	mov	r19, r5
    3b14:	46 2d       	mov	r20, r6
    3b16:	57 2d       	mov	r21, r7
    3b18:	68 2d       	mov	r22, r8
    3b1a:	79 2d       	mov	r23, r9
    3b1c:	8a 2d       	mov	r24, r10
    3b1e:	94 2d       	mov	r25, r4
    3b20:	00 e2       	ldi	r16, 0x20	; 32
    3b22:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3b26:	2d 83       	std	Y+5, r18	; 0x05
    3b28:	2f 2f       	mov	r18, r31
    3b2a:	35 2d       	mov	r19, r5
    3b2c:	46 2d       	mov	r20, r6
    3b2e:	57 2d       	mov	r21, r7
    3b30:	68 2d       	mov	r22, r8
    3b32:	79 2d       	mov	r23, r9
    3b34:	8a 2d       	mov	r24, r10
    3b36:	94 2d       	mov	r25, r4
    3b38:	08 e2       	ldi	r16, 0x28	; 40
    3b3a:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3b3e:	2e 83       	std	Y+6, r18	; 0x06
    3b40:	2f 2f       	mov	r18, r31
    3b42:	35 2d       	mov	r19, r5
    3b44:	46 2d       	mov	r20, r6
    3b46:	57 2d       	mov	r21, r7
    3b48:	68 2d       	mov	r22, r8
    3b4a:	79 2d       	mov	r23, r9
    3b4c:	8a 2d       	mov	r24, r10
    3b4e:	94 2d       	mov	r25, r4
    3b50:	00 e3       	ldi	r16, 0x30	; 48
    3b52:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3b56:	2f 83       	std	Y+7, r18	; 0x07
    3b58:	2f 2f       	mov	r18, r31
    3b5a:	35 2d       	mov	r19, r5
    3b5c:	46 2d       	mov	r20, r6
    3b5e:	57 2d       	mov	r21, r7
    3b60:	68 2d       	mov	r22, r8
    3b62:	79 2d       	mov	r23, r9
    3b64:	8a 2d       	mov	r24, r10
    3b66:	94 2d       	mov	r25, r4
    3b68:	08 e3       	ldi	r16, 0x38	; 56
    3b6a:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3b6e:	28 87       	std	Y+8, r18	; 0x08
    3b70:	e9 87       	std	Y+9, r30	; 0x09
    3b72:	2e 2f       	mov	r18, r30
    3b74:	3b 2d       	mov	r19, r11
    3b76:	4c 2d       	mov	r20, r12
    3b78:	5d 2d       	mov	r21, r13
    3b7a:	6e 2d       	mov	r22, r14
    3b7c:	7f 2d       	mov	r23, r15
    3b7e:	81 2f       	mov	r24, r17
    3b80:	9a 2f       	mov	r25, r26
    3b82:	08 e0       	ldi	r16, 0x08	; 8
    3b84:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3b88:	2a 87       	std	Y+10, r18	; 0x0a
    3b8a:	2e 2f       	mov	r18, r30
    3b8c:	3b 2d       	mov	r19, r11
    3b8e:	4c 2d       	mov	r20, r12
    3b90:	5d 2d       	mov	r21, r13
    3b92:	6e 2d       	mov	r22, r14
    3b94:	7f 2d       	mov	r23, r15
    3b96:	81 2f       	mov	r24, r17
    3b98:	9a 2f       	mov	r25, r26
    3b9a:	00 e1       	ldi	r16, 0x10	; 16
    3b9c:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3ba0:	2b 87       	std	Y+11, r18	; 0x0b
    3ba2:	2e 2f       	mov	r18, r30
    3ba4:	3b 2d       	mov	r19, r11
    3ba6:	4c 2d       	mov	r20, r12
    3ba8:	5d 2d       	mov	r21, r13
    3baa:	6e 2d       	mov	r22, r14
    3bac:	7f 2d       	mov	r23, r15
    3bae:	81 2f       	mov	r24, r17
    3bb0:	9a 2f       	mov	r25, r26
    3bb2:	08 e1       	ldi	r16, 0x18	; 24
    3bb4:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3bb8:	2c 87       	std	Y+12, r18	; 0x0c
    3bba:	2e 2f       	mov	r18, r30
    3bbc:	3b 2d       	mov	r19, r11
    3bbe:	4c 2d       	mov	r20, r12
    3bc0:	5d 2d       	mov	r21, r13
    3bc2:	6e 2d       	mov	r22, r14
    3bc4:	7f 2d       	mov	r23, r15
    3bc6:	81 2f       	mov	r24, r17
    3bc8:	9a 2f       	mov	r25, r26
    3bca:	00 e2       	ldi	r16, 0x20	; 32
    3bcc:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3bd0:	2d 87       	std	Y+13, r18	; 0x0d
    3bd2:	2e 2f       	mov	r18, r30
    3bd4:	3b 2d       	mov	r19, r11
    3bd6:	4c 2d       	mov	r20, r12
    3bd8:	5d 2d       	mov	r21, r13
    3bda:	6e 2d       	mov	r22, r14
    3bdc:	7f 2d       	mov	r23, r15
    3bde:	81 2f       	mov	r24, r17
    3be0:	9a 2f       	mov	r25, r26
    3be2:	08 e2       	ldi	r16, 0x28	; 40
    3be4:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3be8:	2e 87       	std	Y+14, r18	; 0x0e
    3bea:	2e 2f       	mov	r18, r30
    3bec:	3b 2d       	mov	r19, r11
    3bee:	4c 2d       	mov	r20, r12
    3bf0:	5d 2d       	mov	r21, r13
    3bf2:	6e 2d       	mov	r22, r14
    3bf4:	7f 2d       	mov	r23, r15
    3bf6:	81 2f       	mov	r24, r17
    3bf8:	9a 2f       	mov	r25, r26
    3bfa:	00 e3       	ldi	r16, 0x30	; 48
    3bfc:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3c00:	2f 87       	std	Y+15, r18	; 0x0f
    3c02:	2e 2f       	mov	r18, r30
    3c04:	3b 2d       	mov	r19, r11
    3c06:	4c 2d       	mov	r20, r12
    3c08:	5d 2d       	mov	r21, r13
    3c0a:	6e 2d       	mov	r22, r14
    3c0c:	7f 2d       	mov	r23, r15
    3c0e:	81 2f       	mov	r24, r17
    3c10:	9a 2f       	mov	r25, r26
    3c12:	08 e3       	ldi	r16, 0x38	; 56
    3c14:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__lshrdi3>
    3c18:	28 8b       	std	Y+16, r18	; 0x10
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
    3c1a:	80 e1       	ldi	r24, 0x10	; 16
    3c1c:	e8 e2       	ldi	r30, 0x28	; 40
    3c1e:	f0 e2       	ldi	r31, 0x20	; 32
    3c20:	de 01       	movw	r26, r28
    3c22:	51 96       	adiw	r26, 0x11	; 17
    3c24:	01 90       	ld	r0, Z+
    3c26:	0d 92       	st	X+, r0
    3c28:	8a 95       	dec	r24
    3c2a:	e1 f7       	brne	.-8      	; 0x3c24 <eeprom_write_const+0x1e4>
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
    3c2c:	83 e3       	ldi	r24, 0x33	; 51
    3c2e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    3c32:	fe 01       	movw	r30, r28
    3c34:	71 96       	adiw	r30, 0x11	; 17
    3c36:	ce 01       	movw	r24, r28
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	ae 01       	movw	r20, r28
    3c3c:	4f 5d       	subi	r20, 0xDF	; 223
    3c3e:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 16; i++){
		NVM.ADDR0 = addresses[i];
    3c40:	60 ec       	ldi	r22, 0xC0	; 192
    3c42:	71 e0       	ldi	r23, 0x01	; 1
    3c44:	21 91       	ld	r18, Z+
    3c46:	db 01       	movw	r26, r22
    3c48:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	2d 91       	ld	r18, X+
    3c4e:	cd 01       	movw	r24, r26
    3c50:	db 01       	movw	r26, r22
    3c52:	14 96       	adiw	r26, 0x04	; 4
    3c54:	2c 93       	st	X, r18
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 16; i++){
    3c56:	e4 17       	cp	r30, r20
    3c58:	f5 07       	cpc	r31, r21
    3c5a:	a1 f7       	brne	.-24     	; 0x3c44 <eeprom_write_const+0x204>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    3c5c:	e0 ec       	ldi	r30, 0xC0	; 192
    3c5e:	f1 e0       	ldi	r31, 0x01	; 1
    3c60:	85 e3       	ldi	r24, 0x35	; 53
    3c62:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    3c64:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    3c66:	80 e1       	ldi	r24, 0x10	; 16
    3c68:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    3c6a:	88 ed       	ldi	r24, 0xD8	; 216
    3c6c:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3c72:	87 85       	ldd	r24, Z+15	; 0x0f
    3c74:	88 23       	and	r24, r24
    3c76:	ec f3       	brlt	.-6      	; 0x3c72 <eeprom_write_const+0x232>
}
    3c78:	a0 96       	adiw	r28, 0x20	; 32
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	de bf       	out	0x3e, r29	; 62
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	1f 91       	pop	r17
    3c84:	0f 91       	pop	r16
    3c86:	ff 90       	pop	r15
    3c88:	ef 90       	pop	r14
    3c8a:	df 90       	pop	r13
    3c8c:	cf 90       	pop	r12
    3c8e:	bf 90       	pop	r11
    3c90:	af 90       	pop	r10
    3c92:	9f 90       	pop	r9
    3c94:	8f 90       	pop	r8
    3c96:	7f 90       	pop	r7
    3c98:	6f 90       	pop	r6
    3c9a:	5f 90       	pop	r5
    3c9c:	4f 90       	pop	r4
    3c9e:	08 95       	ret

00003ca0 <eeprom_write>:

void eeprom_write(void){
    3ca0:	0f 93       	push	r16
    3ca2:	1f 93       	push	r17
    3ca4:	cf 93       	push	r28
    3ca6:	df 93       	push	r29
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    3cac:	a1 97       	sbiw	r28, 0x21	; 33
    3cae:	cd bf       	out	0x3d, r28	; 61
    3cb0:	de bf       	out	0x3e, r29	; 62
	uint16_t a = (uint16_t) ((int16_t) alt); // creates an unsigned int of the altitude
    3cb2:	60 91 2b 21 	lds	r22, 0x212B	; 0x80212b <alt>
    3cb6:	70 91 2c 21 	lds	r23, 0x212C	; 0x80212c <alt+0x1>
    3cba:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <alt+0x2>
    3cbe:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <alt+0x3>
    3cc2:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3cc6:	16 2f       	mov	r17, r22
    3cc8:	07 2f       	mov	r16, r23
	uint16_t v = (uint16_t) ((int16_t) velocity);
    3cca:	60 91 23 21 	lds	r22, 0x2123	; 0x802123 <velocity>
    3cce:	70 91 24 21 	lds	r23, 0x2124	; 0x802124 <velocity+0x1>
    3cd2:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <velocity+0x2>
    3cd6:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <velocity+0x3>
    3cda:	0e 94 8a 28 	call	0x5114	; 0x5114 <__fixsfsi>
    3cde:	26 2f       	mov	r18, r22
    3ce0:	37 2f       	mov	r19, r23

	check_write = (check_write + 1) % 100;
    3ce2:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <check_write>
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	01 96       	adiw	r24, 0x01	; 1
    3cea:	64 e6       	ldi	r22, 0x64	; 100
    3cec:	70 e0       	ldi	r23, 0x00	; 0
    3cee:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <__divmodhi4>
    3cf2:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <check_write>

	// saves data and addresses in array
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
    3cf6:	a0 91 37 21 	lds	r26, 0x2137	; 0x802137 <packets>
    3cfa:	b0 91 38 21 	lds	r27, 0x2138	; 0x802138 <packets+0x1>
    3cfe:	e0 91 37 21 	lds	r30, 0x2137	; 0x802137 <packets>
    3d02:	f0 91 38 21 	lds	r31, 0x2138	; 0x802138 <packets+0x1>
    3d06:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <timer>
    3d0a:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <timer+0x1>
    3d0e:	40 91 3b 21 	lds	r20, 0x213B	; 0x80213b <timer>
    3d12:	50 91 3c 21 	lds	r21, 0x213C	; 0x80213c <timer+0x1>
    3d16:	90 91 59 21 	lds	r25, 0x2159	; 0x802159 <state>
    3d1a:	09 83       	std	Y+1, r16	; 0x01
    3d1c:	1a 83       	std	Y+2, r17	; 0x02
    3d1e:	bb 83       	std	Y+3, r27	; 0x03
    3d20:	ec 83       	std	Y+4, r30	; 0x04
    3d22:	7d 83       	std	Y+5, r23	; 0x05
    3d24:	4e 83       	std	Y+6, r20	; 0x06
    3d26:	3f 83       	std	Y+7, r19	; 0x07
    3d28:	28 87       	std	Y+8, r18	; 0x08
    3d2a:	89 87       	std	Y+9, r24	; 0x09
    3d2c:	8a 87       	std	Y+10, r24	; 0x0a
    3d2e:	9b 87       	std	Y+11, r25	; 0x0b
    3d30:	8b e0       	ldi	r24, 0x0B	; 11
    3d32:	fe 01       	movw	r30, r28
    3d34:	31 96       	adiw	r30, 0x01	; 1
    3d36:	de 01       	movw	r26, r28
    3d38:	1c 96       	adiw	r26, 0x0c	; 12
    3d3a:	01 90       	ld	r0, Z+
    3d3c:	0d 92       	st	X+, r0
    3d3e:	8a 95       	dec	r24
    3d40:	e1 f7       	brne	.-8      	; 0x3d3a <eeprom_write+0x9a>
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};
    3d42:	8b e0       	ldi	r24, 0x0B	; 11
    3d44:	e8 e3       	ldi	r30, 0x38	; 56
    3d46:	f0 e2       	ldi	r31, 0x20	; 32
    3d48:	de 01       	movw	r26, r28
    3d4a:	57 96       	adiw	r26, 0x17	; 23
    3d4c:	01 90       	ld	r0, Z+
    3d4e:	0d 92       	st	X+, r0
    3d50:	8a 95       	dec	r24
    3d52:	e1 f7       	brne	.-8      	; 0x3d4c <eeprom_write+0xac>

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
    3d54:	83 e3       	ldi	r24, 0x33	; 51
    3d56:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < 10; i++){
		NVM.ADDR0 = addresses[i];
    3d5e:	e0 ec       	ldi	r30, 0xC0	; 192
    3d60:	f1 e0       	ldi	r31, 0x01	; 1
    3d62:	a7 e1       	ldi	r26, 0x17	; 23
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	ac 0f       	add	r26, r28
    3d68:	bd 1f       	adc	r27, r29
    3d6a:	a8 0f       	add	r26, r24
    3d6c:	b9 1f       	adc	r27, r25
    3d6e:	2c 91       	ld	r18, X
    3d70:	20 83       	st	Z, r18
		NVM.DATA0 = data[i];
    3d72:	ac e0       	ldi	r26, 0x0C	; 12
    3d74:	b0 e0       	ldi	r27, 0x00	; 0
    3d76:	ac 0f       	add	r26, r28
    3d78:	bd 1f       	adc	r27, r29
    3d7a:	a8 0f       	add	r26, r24
    3d7c:	b9 1f       	adc	r27, r25
    3d7e:	2c 91       	ld	r18, X
    3d80:	24 83       	std	Z+4, r18	; 0x04
    3d82:	01 96       	adiw	r24, 0x01	; 1
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 10; i++){
    3d84:	8a 30       	cpi	r24, 0x0A	; 10
    3d86:	91 05       	cpc	r25, r1
    3d88:	61 f7       	brne	.-40     	; 0x3d62 <eeprom_write+0xc2>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    3d8a:	e0 ec       	ldi	r30, 0xC0	; 192
    3d8c:	f1 e0       	ldi	r31, 0x01	; 1
    3d8e:	85 e3       	ldi	r24, 0x35	; 53
    3d90:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    3d92:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    3d94:	80 e1       	ldi	r24, 0x10	; 16
    3d96:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    3d98:	88 ed       	ldi	r24, 0xD8	; 216
    3d9a:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3da0:	87 85       	ldd	r24, Z+15	; 0x0f
    3da2:	88 23       	and	r24, r24
    3da4:	ec f3       	brlt	.-6      	; 0x3da0 <eeprom_write+0x100>
}
    3da6:	a1 96       	adiw	r28, 0x21	; 33
    3da8:	cd bf       	out	0x3d, r28	; 61
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	df 91       	pop	r29
    3dae:	cf 91       	pop	r28
    3db0:	1f 91       	pop	r17
    3db2:	0f 91       	pop	r16
    3db4:	08 95       	ret

00003db6 <time_update>:
void time_update(void){
	//packets++;
	

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);
	eeprom_write();
    3db6:	74 df       	rcall	.-280    	; 0x3ca0 <eeprom_write>

	time_flag = 0;
    3db8:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <time_flag>
    3dbc:	08 95       	ret

00003dbe <eeprom_read>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

uint8_t	eeprom_read(uint16_t address){
    3dbe:	cf 93       	push	r28
    3dc0:	df 93       	push	r29
	NVM.CMD = READ_EEPROM;
    3dc2:	c0 ec       	ldi	r28, 0xC0	; 192
    3dc4:	d1 e0       	ldi	r29, 0x01	; 1
    3dc6:	26 e0       	ldi	r18, 0x06	; 6
    3dc8:	2a 87       	std	Y+10, r18	; 0x0a
	NVM.ADDR0 = address & 0xFF;
    3dca:	88 83       	st	Y, r24
	NVM.ADDR1 = address >> 8;
    3dcc:	99 83       	std	Y+1, r25	; 0x01
	CCP = CCP_IOREG_MODE;
    3dce:	88 ed       	ldi	r24, 0xD8	; 216
    3dd0:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	8b 87       	std	Y+11, r24	; 0x0b
	delay_ms(1);
    3dd6:	66 ed       	ldi	r22, 0xD6	; 214
    3dd8:	74 e1       	ldi	r23, 0x14	; 20
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__portable_avr_delay_cycles>
	uint8_t byte = NVM.DATA0;
    3de2:	8c 81       	ldd	r24, Y+4	; 0x04
	return byte;
}
    3de4:	df 91       	pop	r29
    3de6:	cf 91       	pop	r28
    3de8:	08 95       	ret

00003dea <system_init>:
	}
}


// Sensor functions
void system_init(void){
    3dea:	2f 92       	push	r2
    3dec:	3f 92       	push	r3
    3dee:	4f 92       	push	r4
    3df0:	5f 92       	push	r5
    3df2:	6f 92       	push	r6
    3df4:	7f 92       	push	r7
    3df6:	8f 92       	push	r8
    3df8:	9f 92       	push	r9
    3dfa:	af 92       	push	r10
    3dfc:	bf 92       	push	r11
    3dfe:	cf 92       	push	r12
    3e00:	df 92       	push	r13
    3e02:	ef 92       	push	r14
    3e04:	ff 92       	push	r15
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	27 97       	sbiw	r28, 0x07	; 7
    3e14:	cd bf       	out	0x3d, r28	; 61
    3e16:	de bf       	out	0x3e, r29	; 62
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    3e18:	0e 94 c3 14 	call	0x2986	; 0x2986 <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    3e1c:	6b ea       	ldi	r22, 0xAB	; 171
    3e1e:	79 e2       	ldi	r23, 0x29	; 41
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__portable_avr_delay_cycles>
	sei();
    3e28:	78 94       	sei

	// Initialization of pins
	PORTC.DIR = 0xBC; // makes Port C have pins, 7, 5, 4, 3, and 2 be output (0b10111100)
    3e2a:	8c eb       	ldi	r24, 0xBC	; 188
    3e2c:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // enables lo level interrupts
    3e30:	87 e0       	ldi	r24, 0x07	; 7
    3e32:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// Driver Initialization
	//cam_init();
	data_terminal_init();
    3e36:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <data_terminal_init>
	delay_ms(500);
    3e3a:	6b ea       	ldi	r22, 0xAB	; 171
    3e3c:	70 eb       	ldi	r23, 0xB0	; 176
    3e3e:	88 e2       	ldi	r24, 0x28	; 40
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__portable_avr_delay_cycles>
	//delay_ms(100);

	//hall_sensor_init();
	//thermistor_init();
	//voltage_init();
	spi_init();
    3e46:	0e 94 39 13 	call	0x2672	; 0x2672 <spi_init>
	pressure_init();
    3e4a:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <pressure_init>
	//bno_init();
	//cam_switch();
	clock_init();
    3e4e:	7e db       	rcall	.-2308   	; 0x354c <clock_init>
	//release_servo_init();
	//servo_timer_init();

	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	90 e1       	ldi	r25, 0x10	; 16
    3e54:	b4 df       	rcall	.-152    	; 0x3dbe <eeprom_read>
    3e56:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);
    3e58:	8f e1       	ldi	r24, 0x1F	; 31
    3e5a:	90 e1       	ldi	r25, 0x10	; 16
    3e5c:	b0 df       	rcall	.-160    	; 0x3dbe <eeprom_read>
    3e5e:	8a 83       	std	Y+2, r24	; 0x02

	if((b1 == b2) && (b1 != 0xFF)){
    3e60:	99 81       	ldd	r25, Y+1	; 0x01
    3e62:	8a 81       	ldd	r24, Y+2	; 0x02
    3e64:	98 13       	cpse	r25, r24
    3e66:	d3 c1       	rjmp	.+934    	; 0x420e <__stack+0x20f>
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
    3e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e6c:	09 f4       	brne	.+2      	; 0x3e70 <system_init+0x86>
		//printf("Reading EEPROM\n");
		uint64_t p =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    3e6e:	cf c1       	rjmp	.+926    	; 0x420e <__stack+0x20f>
    3e70:	80 e1       	ldi	r24, 0x10	; 16
    3e72:	90 e1       	ldi	r25, 0x10	; 16
    3e74:	a4 df       	rcall	.-184    	; 0x3dbe <eeprom_read>
    3e76:	18 2f       	mov	r17, r24
    3e78:	8f e0       	ldi	r24, 0x0F	; 15
    3e7a:	90 e1       	ldi	r25, 0x10	; 16
    3e7c:	a0 df       	rcall	.-192    	; 0x3dbe <eeprom_read>
    3e7e:	b8 2f       	mov	r27, r24
    3e80:	21 2f       	mov	r18, r17
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	40 e0       	ldi	r20, 0x00	; 0
    3e86:	50 e0       	ldi	r21, 0x00	; 0
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	08 e3       	ldi	r16, 0x38	; 56
    3e92:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    3e96:	12 2f       	mov	r17, r18
    3e98:	c3 2e       	mov	r12, r19
    3e9a:	f4 2e       	mov	r15, r20
    3e9c:	a5 2f       	mov	r26, r21
    3e9e:	f6 2f       	mov	r31, r22
    3ea0:	e7 2f       	mov	r30, r23
    3ea2:	d8 2e       	mov	r13, r24
    3ea4:	e9 2e       	mov	r14, r25
    3ea6:	2b 2f       	mov	r18, r27
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	40 e0       	ldi	r20, 0x00	; 0
    3eac:	50 e0       	ldi	r21, 0x00	; 0
    3eae:	60 e0       	ldi	r22, 0x00	; 0
    3eb0:	70 e0       	ldi	r23, 0x00	; 0
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	00 e3       	ldi	r16, 0x30	; 48
    3eb8:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    3ebc:	12 2b       	or	r17, r18
    3ebe:	c3 2a       	or	r12, r19
    3ec0:	f4 2a       	or	r15, r20
    3ec2:	9a 2e       	mov	r9, r26
    3ec4:	95 2a       	or	r9, r21
    3ec6:	af 2e       	mov	r10, r31
    3ec8:	a6 2a       	or	r10, r22
    3eca:	be 2e       	mov	r11, r30
    3ecc:	b7 2a       	or	r11, r23
    3ece:	d8 2a       	or	r13, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    3ed0:	e9 2a       	or	r14, r25
    3ed2:	8e e0       	ldi	r24, 0x0E	; 14
    3ed4:	90 e1       	ldi	r25, 0x10	; 16
    3ed6:	73 df       	rcall	.-282    	; 0x3dbe <eeprom_read>
    3ed8:	08 2f       	mov	r16, r24
    3eda:	8d e0       	ldi	r24, 0x0D	; 13
    3edc:	90 e1       	ldi	r25, 0x10	; 16
    3ede:	6f df       	rcall	.-290    	; 0x3dbe <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    3ee0:	28 2e       	mov	r2, r24
    3ee2:	8c e0       	ldi	r24, 0x0C	; 12
    3ee4:	90 e1       	ldi	r25, 0x10	; 16
    3ee6:	6b df       	rcall	.-298    	; 0x3dbe <eeprom_read>
    3ee8:	38 2e       	mov	r3, r24
    3eea:	8b e0       	ldi	r24, 0x0B	; 11
    3eec:	90 e1       	ldi	r25, 0x10	; 16
    3eee:	67 df       	rcall	.-306    	; 0x3dbe <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0));
    3ef0:	48 2e       	mov	r4, r24
    3ef2:	8a e0       	ldi	r24, 0x0A	; 10
    3ef4:	90 e1       	ldi	r25, 0x10	; 16
    3ef6:	63 df       	rcall	.-314    	; 0x3dbe <eeprom_read>
    3ef8:	58 2e       	mov	r5, r24
    3efa:	89 e0       	ldi	r24, 0x09	; 9
    3efc:	90 e1       	ldi	r25, 0x10	; 16
    3efe:	5f df       	rcall	.-322    	; 0x3dbe <eeprom_read>
    3f00:	68 2e       	mov	r6, r24
    3f02:	20 2f       	mov	r18, r16
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	60 e0       	ldi	r22, 0x00	; 0
    3f0c:	70 e0       	ldi	r23, 0x00	; 0
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	08 e2       	ldi	r16, 0x28	; 40
    3f14:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    3f18:	16 29       	or	r17, r6
    3f1a:	12 2b       	or	r17, r18
    3f1c:	c3 2a       	or	r12, r19
    3f1e:	f4 2a       	or	r15, r20
    3f20:	a5 2f       	mov	r26, r21
    3f22:	a9 29       	or	r26, r9
    3f24:	f6 2f       	mov	r31, r22
    3f26:	fa 29       	or	r31, r10
    3f28:	e7 2f       	mov	r30, r23
    3f2a:	eb 29       	or	r30, r11
    3f2c:	d8 2a       	or	r13, r24
    3f2e:	e9 2a       	or	r14, r25
    3f30:	22 2d       	mov	r18, r2
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e0       	ldi	r20, 0x00	; 0
    3f36:	50 e0       	ldi	r21, 0x00	; 0
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	70 e0       	ldi	r23, 0x00	; 0
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	00 e2       	ldi	r16, 0x20	; 32
    3f42:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    3f46:	12 2b       	or	r17, r18
    3f48:	c3 2a       	or	r12, r19
    3f4a:	f4 2a       	or	r15, r20
    3f4c:	a5 2b       	or	r26, r21
    3f4e:	f6 2b       	or	r31, r22
    3f50:	e7 2b       	or	r30, r23
    3f52:	d8 2a       	or	r13, r24
    3f54:	e9 2a       	or	r14, r25
    3f56:	23 2d       	mov	r18, r3
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	40 e0       	ldi	r20, 0x00	; 0
    3f5c:	50 e0       	ldi	r21, 0x00	; 0
    3f5e:	60 e0       	ldi	r22, 0x00	; 0
    3f60:	70 e0       	ldi	r23, 0x00	; 0
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	08 e1       	ldi	r16, 0x18	; 24
    3f68:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    3f6c:	12 2b       	or	r17, r18
    3f6e:	c3 2a       	or	r12, r19
    3f70:	f4 2a       	or	r15, r20
    3f72:	a5 2b       	or	r26, r21
    3f74:	f6 2b       	or	r31, r22
    3f76:	e7 2b       	or	r30, r23
    3f78:	d8 2a       	or	r13, r24
    3f7a:	e9 2a       	or	r14, r25
    3f7c:	24 2d       	mov	r18, r4
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e0       	ldi	r20, 0x00	; 0
    3f82:	50 e0       	ldi	r21, 0x00	; 0
    3f84:	60 e0       	ldi	r22, 0x00	; 0
    3f86:	70 e0       	ldi	r23, 0x00	; 0
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	00 e1       	ldi	r16, 0x10	; 16
    3f8e:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    3f92:	12 2b       	or	r17, r18
    3f94:	c3 2a       	or	r12, r19
    3f96:	f4 2a       	or	r15, r20
    3f98:	a5 2b       	or	r26, r21
    3f9a:	f6 2b       	or	r31, r22
    3f9c:	e7 2b       	or	r30, r23
    3f9e:	d8 2a       	or	r13, r24
    3fa0:	e9 2a       	or	r14, r25
    3fa2:	25 2d       	mov	r18, r5
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	40 e0       	ldi	r20, 0x00	; 0
    3fa8:	50 e0       	ldi	r21, 0x00	; 0
    3faa:	60 e0       	ldi	r22, 0x00	; 0
    3fac:	70 e0       	ldi	r23, 0x00	; 0
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	08 e0       	ldi	r16, 0x08	; 8
    3fb4:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    3fb8:	61 2e       	mov	r6, r17
    3fba:	62 2a       	or	r6, r18
    3fbc:	7c 2c       	mov	r7, r12
    3fbe:	73 2a       	or	r7, r19
    3fc0:	8f 2c       	mov	r8, r15
    3fc2:	84 2a       	or	r8, r20
    3fc4:	9a 2e       	mov	r9, r26
    3fc6:	95 2a       	or	r9, r21
    3fc8:	af 2e       	mov	r10, r31
    3fca:	a6 2a       	or	r10, r22
    3fcc:	be 2e       	mov	r11, r30
    3fce:	b7 2a       	or	r11, r23
    3fd0:	d8 2a       	or	r13, r24
		uint64_t t =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    3fd2:	e9 2a       	or	r14, r25
    3fd4:	89 e1       	ldi	r24, 0x19	; 25
    3fd6:	90 e1       	ldi	r25, 0x10	; 16
    3fd8:	f2 de       	rcall	.-540    	; 0x3dbe <eeprom_read>
    3fda:	18 2f       	mov	r17, r24
    3fdc:	88 e1       	ldi	r24, 0x18	; 24
    3fde:	90 e1       	ldi	r25, 0x10	; 16
    3fe0:	ee de       	rcall	.-548    	; 0x3dbe <eeprom_read>
    3fe2:	48 2e       	mov	r4, r24
    3fe4:	21 2f       	mov	r18, r17
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	40 e0       	ldi	r20, 0x00	; 0
    3fea:	50 e0       	ldi	r21, 0x00	; 0
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	70 e0       	ldi	r23, 0x00	; 0
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	08 e3       	ldi	r16, 0x38	; 56
    3ff6:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    3ffa:	c2 2e       	mov	r12, r18
    3ffc:	53 2e       	mov	r5, r19
    3ffe:	b4 2f       	mov	r27, r20
    4000:	a5 2f       	mov	r26, r21
    4002:	f6 2f       	mov	r31, r22
    4004:	e7 2f       	mov	r30, r23
    4006:	f8 2e       	mov	r15, r24
    4008:	19 2f       	mov	r17, r25
    400a:	24 2d       	mov	r18, r4
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e0       	ldi	r20, 0x00	; 0
    4010:	50 e0       	ldi	r21, 0x00	; 0
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	70 e0       	ldi	r23, 0x00	; 0
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	00 e3       	ldi	r16, 0x30	; 48
    401c:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    4020:	c2 2a       	or	r12, r18
    4022:	53 2a       	or	r5, r19
    4024:	5f 82       	std	Y+7, r5	; 0x07
    4026:	2b 2e       	mov	r2, r27
    4028:	24 2a       	or	r2, r20
    402a:	3a 2e       	mov	r3, r26
    402c:	35 2a       	or	r3, r21
    402e:	4f 2e       	mov	r4, r31
    4030:	46 2a       	or	r4, r22
    4032:	5e 2e       	mov	r5, r30
    4034:	57 2a       	or	r5, r23
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    4036:	f8 2a       	or	r15, r24
    4038:	19 2b       	or	r17, r25
    403a:	87 e1       	ldi	r24, 0x17	; 23
    403c:	90 e1       	ldi	r25, 0x10	; 16
    403e:	bf de       	rcall	.-642    	; 0x3dbe <eeprom_read>
    4040:	08 2f       	mov	r16, r24
    4042:	86 e1       	ldi	r24, 0x16	; 22
    4044:	90 e1       	ldi	r25, 0x10	; 16
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    4046:	bb de       	rcall	.-650    	; 0x3dbe <eeprom_read>
    4048:	8b 83       	std	Y+3, r24	; 0x03
    404a:	85 e1       	ldi	r24, 0x15	; 21
    404c:	90 e1       	ldi	r25, 0x10	; 16
    404e:	b7 de       	rcall	.-658    	; 0x3dbe <eeprom_read>
    4050:	8c 83       	std	Y+4, r24	; 0x04
    4052:	84 e1       	ldi	r24, 0x14	; 20
    4054:	90 e1       	ldi	r25, 0x10	; 16
    4056:	b3 de       	rcall	.-666    	; 0x3dbe <eeprom_read>
    4058:	8d 83       	std	Y+5, r24	; 0x05
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8   | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0));
    405a:	83 e1       	ldi	r24, 0x13	; 19
    405c:	90 e1       	ldi	r25, 0x10	; 16
    405e:	af de       	rcall	.-674    	; 0x3dbe <eeprom_read>
    4060:	8e 83       	std	Y+6, r24	; 0x06
    4062:	82 e1       	ldi	r24, 0x12	; 18
    4064:	90 e1       	ldi	r25, 0x10	; 16
    4066:	ab de       	rcall	.-682    	; 0x3dbe <eeprom_read>
    4068:	e8 2f       	mov	r30, r24
    406a:	a4 e2       	ldi	r26, 0x24	; 36
    406c:	b0 e2       	ldi	r27, 0x20	; 32
		memcpy(&ground_p, &p, 8);
    406e:	6c 92       	st	X, r6
    4070:	11 96       	adiw	r26, 0x01	; 1
    4072:	7c 92       	st	X, r7
    4074:	11 97       	sbiw	r26, 0x01	; 1
    4076:	12 96       	adiw	r26, 0x02	; 2
    4078:	8c 92       	st	X, r8
    407a:	12 97       	sbiw	r26, 0x02	; 2
    407c:	13 96       	adiw	r26, 0x03	; 3
    407e:	9c 92       	st	X, r9
    4080:	13 97       	sbiw	r26, 0x03	; 3
    4082:	14 96       	adiw	r26, 0x04	; 4
    4084:	ac 92       	st	X, r10
    4086:	14 97       	sbiw	r26, 0x04	; 4
    4088:	15 96       	adiw	r26, 0x05	; 5
    408a:	bc 92       	st	X, r11
    408c:	15 97       	sbiw	r26, 0x05	; 5
    408e:	16 96       	adiw	r26, 0x06	; 6
    4090:	dc 92       	st	X, r13
    4092:	16 97       	sbiw	r26, 0x06	; 6
    4094:	17 96       	adiw	r26, 0x07	; 7
    4096:	ec 92       	st	X, r14
    4098:	a0 e2       	ldi	r26, 0x20	; 32
    409a:	b0 e2       	ldi	r27, 0x20	; 32
		memcpy(&ground_t, &t, 8);
    409c:	20 2f       	mov	r18, r16
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e0       	ldi	r20, 0x00	; 0
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	60 e0       	ldi	r22, 0x00	; 0
    40a6:	70 e0       	ldi	r23, 0x00	; 0
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	08 e2       	ldi	r16, 0x28	; 40
    40ae:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    40b2:	ce 2a       	or	r12, r30
    40b4:	c2 2a       	or	r12, r18
    40b6:	bf 80       	ldd	r11, Y+7	; 0x07
    40b8:	b3 2a       	or	r11, r19
    40ba:	d4 2e       	mov	r13, r20
    40bc:	d2 28       	or	r13, r2
    40be:	e5 2e       	mov	r14, r21
    40c0:	e3 28       	or	r14, r3
    40c2:	f6 2f       	mov	r31, r22
    40c4:	f4 29       	or	r31, r4
    40c6:	e7 2f       	mov	r30, r23
    40c8:	e5 29       	or	r30, r5
    40ca:	f8 2a       	or	r15, r24
    40cc:	19 2b       	or	r17, r25
    40ce:	2b 81       	ldd	r18, Y+3	; 0x03
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	40 e0       	ldi	r20, 0x00	; 0
    40d4:	50 e0       	ldi	r21, 0x00	; 0
    40d6:	60 e0       	ldi	r22, 0x00	; 0
    40d8:	70 e0       	ldi	r23, 0x00	; 0
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	00 e2       	ldi	r16, 0x20	; 32
    40e0:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    40e4:	c2 2a       	or	r12, r18
    40e6:	b3 2a       	or	r11, r19
    40e8:	d4 2a       	or	r13, r20
    40ea:	e5 2a       	or	r14, r21
    40ec:	f6 2b       	or	r31, r22
    40ee:	e7 2b       	or	r30, r23
    40f0:	f8 2a       	or	r15, r24
    40f2:	19 2b       	or	r17, r25
    40f4:	2c 81       	ldd	r18, Y+4	; 0x04
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	40 e0       	ldi	r20, 0x00	; 0
    40fa:	50 e0       	ldi	r21, 0x00	; 0
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	70 e0       	ldi	r23, 0x00	; 0
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	08 e1       	ldi	r16, 0x18	; 24
    4106:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    410a:	c2 2a       	or	r12, r18
    410c:	b3 2a       	or	r11, r19
    410e:	d4 2a       	or	r13, r20
    4110:	e5 2a       	or	r14, r21
    4112:	f6 2b       	or	r31, r22
    4114:	e7 2b       	or	r30, r23
    4116:	f8 2a       	or	r15, r24
    4118:	19 2b       	or	r17, r25
    411a:	2d 81       	ldd	r18, Y+5	; 0x05
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e0       	ldi	r20, 0x00	; 0
    4120:	50 e0       	ldi	r21, 0x00	; 0
    4122:	60 e0       	ldi	r22, 0x00	; 0
    4124:	70 e0       	ldi	r23, 0x00	; 0
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	00 e1       	ldi	r16, 0x10	; 16
    412c:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    4130:	c2 2a       	or	r12, r18
    4132:	b3 2a       	or	r11, r19
    4134:	d4 2a       	or	r13, r20
    4136:	e5 2a       	or	r14, r21
    4138:	f6 2b       	or	r31, r22
    413a:	e7 2b       	or	r30, r23
    413c:	f8 2a       	or	r15, r24
    413e:	19 2b       	or	r17, r25
    4140:	2e 81       	ldd	r18, Y+6	; 0x06
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	40 e0       	ldi	r20, 0x00	; 0
    4146:	50 e0       	ldi	r21, 0x00	; 0
    4148:	60 e0       	ldi	r22, 0x00	; 0
    414a:	70 e0       	ldi	r23, 0x00	; 0
    414c:	80 e0       	ldi	r24, 0x00	; 0
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	08 e0       	ldi	r16, 0x08	; 8
    4152:	0e 94 cf 2b 	call	0x579e	; 0x579e <__ashldi3>
    4156:	2c 29       	or	r18, r12
    4158:	2c 93       	st	X, r18
    415a:	3b 29       	or	r19, r11
    415c:	11 96       	adiw	r26, 0x01	; 1
    415e:	3c 93       	st	X, r19
    4160:	11 97       	sbiw	r26, 0x01	; 1
    4162:	4d 29       	or	r20, r13
    4164:	12 96       	adiw	r26, 0x02	; 2
    4166:	4c 93       	st	X, r20
    4168:	12 97       	sbiw	r26, 0x02	; 2
    416a:	5e 29       	or	r21, r14
    416c:	13 96       	adiw	r26, 0x03	; 3
    416e:	5c 93       	st	X, r21
    4170:	13 97       	sbiw	r26, 0x03	; 3
    4172:	6f 2b       	or	r22, r31
    4174:	14 96       	adiw	r26, 0x04	; 4
    4176:	6c 93       	st	X, r22
    4178:	14 97       	sbiw	r26, 0x04	; 4
    417a:	7e 2b       	or	r23, r30
    417c:	15 96       	adiw	r26, 0x05	; 5
    417e:	7c 93       	st	X, r23
    4180:	15 97       	sbiw	r26, 0x05	; 5
    4182:	8f 29       	or	r24, r15
    4184:	16 96       	adiw	r26, 0x06	; 6
    4186:	8c 93       	st	X, r24
    4188:	16 97       	sbiw	r26, 0x06	; 6
    418a:	91 2b       	or	r25, r17
    418c:	17 96       	adiw	r26, 0x07	; 7

		alt = (double) ((int16_t) (eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE0)));
    418e:	9c 93       	st	X, r25
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	90 e1       	ldi	r25, 0x10	; 16
    4194:	14 de       	rcall	.-984    	; 0x3dbe <eeprom_read>
    4196:	18 2f       	mov	r17, r24
    4198:	80 e0       	ldi	r24, 0x00	; 0
    419a:	90 e1       	ldi	r25, 0x10	; 16
    419c:	10 de       	rcall	.-992    	; 0x3dbe <eeprom_read>
    419e:	61 2f       	mov	r22, r17
    41a0:	70 e0       	ldi	r23, 0x00	; 0
    41a2:	76 2f       	mov	r23, r22
    41a4:	66 27       	eor	r22, r22
    41a6:	68 2b       	or	r22, r24
    41a8:	07 2e       	mov	r0, r23
    41aa:	00 0c       	add	r0, r0
    41ac:	88 0b       	sbc	r24, r24
    41ae:	99 0b       	sbc	r25, r25
    41b0:	e4 d7       	rcall	.+4040   	; 0x517a <__floatsisf>
    41b2:	60 93 2b 21 	sts	0x212B, r22	; 0x80212b <alt>
    41b6:	70 93 2c 21 	sts	0x212C, r23	; 0x80212c <alt+0x1>
    41ba:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <alt+0x2>
    41be:	90 93 2e 21 	sts	0x212E, r25	; 0x80212e <alt+0x3>
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
    41c2:	87 e0       	ldi	r24, 0x07	; 7
    41c4:	90 e1       	ldi	r25, 0x10	; 16
    41c6:	fb dd       	rcall	.-1034   	; 0x3dbe <eeprom_read>
    41c8:	18 2f       	mov	r17, r24
    41ca:	86 e0       	ldi	r24, 0x06	; 6
    41cc:	90 e1       	ldi	r25, 0x10	; 16
    41ce:	f7 dd       	rcall	.-1042   	; 0x3dbe <eeprom_read>
    41d0:	21 2f       	mov	r18, r17
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	32 2f       	mov	r19, r18
    41d6:	22 27       	eor	r18, r18
    41d8:	28 2b       	or	r18, r24
    41da:	20 93 3b 21 	sts	0x213B, r18	; 0x80213b <timer>
    41de:	30 93 3c 21 	sts	0x213C, r19	; 0x80213c <timer+0x1>
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
    41e2:	84 e0       	ldi	r24, 0x04	; 4
    41e4:	90 e1       	ldi	r25, 0x10	; 16
    41e6:	eb dd       	rcall	.-1066   	; 0x3dbe <eeprom_read>
    41e8:	18 2f       	mov	r17, r24
    41ea:	83 e0       	ldi	r24, 0x03	; 3
    41ec:	90 e1       	ldi	r25, 0x10	; 16
    41ee:	e7 dd       	rcall	.-1074   	; 0x3dbe <eeprom_read>
    41f0:	21 2f       	mov	r18, r17
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	32 2f       	mov	r19, r18
    41f6:	22 27       	eor	r18, r18
    41f8:	28 2b       	or	r18, r24
    41fa:	20 93 37 21 	sts	0x2137, r18	; 0x802137 <packets>
    41fe:	30 93 38 21 	sts	0x2138, r19	; 0x802138 <packets+0x1>
    4202:	85 e0       	ldi	r24, 0x05	; 5
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
    4204:	90 e1       	ldi	r25, 0x10	; 16
    4206:	db dd       	rcall	.-1098   	; 0x3dbe <eeprom_read>
    4208:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <state>
    420c:	19 c0       	rjmp	.+50     	; 0x4240 <__stack+0x241>
	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);

	if((b1 == b2) && (b1 != 0xFF)){
    420e:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <get_pressure>
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
		//printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
	}
	else{
		// Initialization of variables
		ground_p = get_pressure();
    4212:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <ground_p>
    4216:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <ground_p+0x1>
    421a:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <ground_p+0x2>
    421e:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <ground_p+0x3>
    4222:	83 e3       	ldi	r24, 0x33	; 51
		ground_t = get_temperature();
    4224:	93 e1       	ldi	r25, 0x13	; 19
    4226:	a5 e9       	ldi	r26, 0x95	; 149
    4228:	b3 e4       	ldi	r27, 0x43	; 67
    422a:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <ground_t>
    422e:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <ground_t+0x1>
    4232:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <ground_t+0x2>
    4236:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <ground_t+0x3>
    423a:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <state>
		state = 0;
    423e:	00 dc       	rcall	.-2048   	; 0x3a40 <eeprom_write_const>
		eeprom_write_const();
    4240:	0e 94 0b 19 	call	0x3216	; 0x3216 <state_check>
	}

	state_check();
    4244:	27 96       	adiw	r28, 0x07	; 7
    4246:	cd bf       	out	0x3d, r28	; 61
}
    4248:	de bf       	out	0x3e, r29	; 62
    424a:	df 91       	pop	r29
    424c:	cf 91       	pop	r28
    424e:	1f 91       	pop	r17
    4250:	0f 91       	pop	r16
    4252:	ff 90       	pop	r15
    4254:	ef 90       	pop	r14
    4256:	df 90       	pop	r13
    4258:	cf 90       	pop	r12
    425a:	bf 90       	pop	r11
    425c:	af 90       	pop	r10
    425e:	9f 90       	pop	r9
    4260:	8f 90       	pop	r8
    4262:	7f 90       	pop	r7
    4264:	6f 90       	pop	r6
    4266:	5f 90       	pop	r5
    4268:	4f 90       	pop	r4
    426a:	3f 90       	pop	r3
    426c:	2f 90       	pop	r2
    426e:	08 95       	ret

00004270 <eeprom_erase>:
    4270:	83 e3       	ldi	r24, 0x33	; 51
    4272:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    4276:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    4278:	e0 ec       	ldi	r30, 0xC0	; 192
    427a:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    427c:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    427e:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    4280:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    4282:	8f 5f       	subi	r24, 0xFF	; 255
    4284:	80 32       	cpi	r24, 0x20	; 32
    4286:	d9 f7       	brne	.-10     	; 0x427e <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}

	NVM.CMD = ERASE_EEPROM;
    4288:	e0 ec       	ldi	r30, 0xC0	; 192
    428a:	f1 e0       	ldi	r31, 0x01	; 1
    428c:	80 e3       	ldi	r24, 0x30	; 48
    428e:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    4290:	88 ed       	ldi	r24, 0xD8	; 216
    4292:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    4298:	87 85       	ldd	r24, Z+15	; 0x0f
    429a:	88 23       	and	r24, r24
    429c:	ec f3       	brlt	.-6      	; 0x4298 <eeprom_erase+0x28>
}
    429e:	08 95       	ret

000042a0 <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    42a0:	e7 df       	rcall	.-50     	; 0x4270 <eeprom_erase>

	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    42a2:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    42a4:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    42a6:	98 ed       	ldi	r25, 0xD8	; 216
    42a8:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    42aa:	91 e0       	ldi	r25, 0x01	; 1
    42ac:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    42b0:	8f bf       	out	0x3f, r24	; 63
    42b2:	08 95       	ret

000042b4 <command>:
static void hall_sensor_measure(AC_t *ac, uint8_t channel, enum ac_status_t status){
	ticks_per_sec++;
}

void command(uint8_t c){
	switch(c){
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	fc 01       	movw	r30, r24
    42b8:	e1 56       	subi	r30, 0x61	; 97
    42ba:	f1 09       	sbc	r31, r1
    42bc:	e3 31       	cpi	r30, 0x13	; 19
    42be:	f1 05       	cpc	r31, r1
    42c0:	98 f4       	brcc	.+38     	; 0x42e8 <command+0x34>
    42c2:	88 27       	eor	r24, r24
    42c4:	e2 50       	subi	r30, 0x02	; 2
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	8f 4f       	sbci	r24, 0xFF	; 255
    42ca:	0c 94 ad 2b 	jmp	0x575a	; 0x575a <__tablejump2__>
		case RESET:
			reset();
    42ce:	e8 cf       	rjmp	.-48     	; 0x42a0 <reset>
			break;
		case CALIBRATE:
			calibrate();
    42d0:	08 95       	ret
			break;
    42d2:	72 c9       	rjmp	.-3356   	; 0x35b8 <calibrate>
		case CALIBRATE_ALTITUDE:
			cali_alt();
    42d4:	08 95       	ret
			break;
		case CALIBRATE_ANGLE:
			cali_ang();
    42d6:	48 c9       	rjmp	.-3440   	; 0x3568 <cali_alt>
			break;
    42d8:	08 95       	ret
		case SERVO_RELEASE:
			servo_release();
    42da:	63 c9       	rjmp	.-3386   	; 0x35a2 <cali_ang>
			break;
    42dc:	08 95       	ret
		case SERVO_CLOSE:
			servo_close();
    42de:	6f c9       	rjmp	.-3362   	; 0x35be <servo_release>
    42e0:	08 95       	ret
			break;
    42e2:	79 c9       	rjmp	.-3342   	; 0x35d6 <servo_close>
		case PACKET:
			packet();
    42e4:	08 95       	ret
    42e6:	82 c9       	rjmp	.-3324   	; 0x35ec <packet>
    42e8:	08 95       	ret

000042ea <main>:

char* format = "5343,%i.%i,%i,%i,%li,%i.%i,%i.%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n";


////////////////////////////// Functions ///////////////////////////////
int main(void){
    42ea:	cf 93       	push	r28
    42ec:	df 93       	push	r29
    42ee:	cd b7       	in	r28, 0x3d	; 61
    42f0:	de b7       	in	r29, 0x3e	; 62
    42f2:	c8 56       	subi	r28, 0x68	; 104
    42f4:	d1 09       	sbc	r29, r1
    42f6:	cd bf       	out	0x3d, r28	; 61
    42f8:	de bf       	out	0x3e, r29	; 62
	system_init();
    42fa:	77 dd       	rcall	.-1298   	; 0x3dea <system_init>
	//delay_ms(100);

	PORTD.DIR |= PIN3_bm;
    42fc:	e0 e6       	ldi	r30, 0x60	; 96
    42fe:	f6 e0       	ldi	r31, 0x06	; 6
    4300:	80 81       	ld	r24, Z
    4302:	88 60       	ori	r24, 0x08	; 8
    4304:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    4306:	84 81       	ldd	r24, Z+4	; 0x04
    4308:	88 60       	ori	r24, 0x08	; 8
    430a:	84 83       	std	Z+4, r24	; 0x04

	//printf("Initialized\n");
	//buzzer_init();

	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    430c:	14 e1       	ldi	r17, 0x14	; 20
    430e:	be 01       	movw	r22, r28
    4310:	6f 5f       	subi	r22, 0xFF	; 255
    4312:	7f 4f       	sbci	r23, 0xFF	; 255
    4314:	fb 01       	movw	r30, r22
    4316:	81 2f       	mov	r24, r17
    4318:	11 92       	st	Z+, r1
    431a:	8a 95       	dec	r24
    431c:	e9 f7       	brne	.-6      	; 0x4318 <main+0x2e>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    431e:	4a e0       	ldi	r20, 0x0A	; 10
    4320:	50 e0       	ldi	r21, 0x00	; 0
    4322:	ce 01       	movw	r24, r28
    4324:	45 96       	adiw	r24, 0x15	; 21
    4326:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <rb16_init>

	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    432a:	be 01       	movw	r22, r28
    432c:	63 5e       	subi	r22, 0xE3	; 227
    432e:	7f 4f       	sbci	r23, 0xFF	; 255
    4330:	88 e2       	ldi	r24, 0x28	; 40
    4332:	fb 01       	movw	r30, r22
    4334:	11 92       	st	Z+, r1
    4336:	8a 95       	dec	r24
    4338:	e9 f7       	brne	.-6      	; 0x4334 <main+0x4a>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    433a:	4a e0       	ldi	r20, 0x0A	; 10
    433c:	50 e0       	ldi	r21, 0x00	; 0
    433e:	ce 01       	movw	r24, r28
    4340:	8b 5b       	subi	r24, 0xBB	; 187
    4342:	9f 4f       	sbci	r25, 0xFF	; 255
    4344:	0e 94 84 14 	call	0x2908	; 0x2908 <rb32_init>

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    4348:	be 01       	movw	r22, r28
    434a:	63 5b       	subi	r22, 0xB3	; 179
    434c:	7f 4f       	sbci	r23, 0xFF	; 255
    434e:	fb 01       	movw	r30, r22
    4350:	11 92       	st	Z+, r1
    4352:	1a 95       	dec	r17
    4354:	e9 f7       	brne	.-6      	; 0x4350 <main+0x66>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    4356:	4a e0       	ldi	r20, 0x0A	; 10
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	ce 01       	movw	r24, r28
    435c:	8f 59       	subi	r24, 0x9F	; 159
    435e:	9f 4f       	sbci	r25, 0xFF	; 255
    4360:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <rb16_init>

	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    4364:	00 e0       	ldi	r16, 0x00	; 0

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	uint8_t cam_initialized = 0;
    4366:	10 e0       	ldi	r17, 0x00	; 0


	while(1){
		//printf("In Loop\n");
		// Check Sensors
		data_collect(&altitudes,&pressures);
    4368:	be 01       	movw	r22, r28
    436a:	6b 5b       	subi	r22, 0xBB	; 187
    436c:	7f 4f       	sbci	r23, 0xFF	; 255
    436e:	ce 01       	movw	r24, r28
    4370:	45 96       	adiw	r24, 0x15	; 21
    4372:	0e 94 78 18 	call	0x30f0	; 0x30f0 <data_collect>

		state_check();
    4376:	0e 94 0b 19 	call	0x3216	; 0x3216 <state_check>

		// IMU Check
		//imu_read();

		//Gives each flight state their unique tasks
		switch(state){
    437a:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <state>
    437e:	81 30       	cpi	r24, 0x01	; 1
    4380:	31 f0       	breq	.+12     	; 0x438e <main+0xa4>
    4382:	b8 f1       	brcs	.+110    	; 0x43f2 <main+0x108>
    4384:	82 30       	cpi	r24, 0x02	; 2
    4386:	39 f0       	breq	.+14     	; 0x4396 <main+0xac>
    4388:	83 30       	cpi	r24, 0x03	; 3
    438a:	69 f1       	breq	.+90     	; 0x43e6 <main+0xfc>
    438c:	30 c0       	rjmp	.+96     	; 0x43ee <main+0x104>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    438e:	11 11       	cpse	r17, r1
    4390:	30 c0       	rjmp	.+96     	; 0x43f2 <main+0x108>
					cam_initialized = 1;
    4392:	11 e0       	ldi	r17, 0x01	; 1
    4394:	2e c0       	rjmp	.+92     	; 0x43f2 <main+0x108>
					//cam_switch();
				}
				break;
			case 2:
				if(!cam_initialized){
    4396:	11 11       	cpse	r17, r1
    4398:	01 c0       	rjmp	.+2      	; 0x439c <main+0xb2>
					cam_initialized = 1;
    439a:	11 e0       	ldi	r17, 0x01	; 1
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
    439c:	60 91 2b 21 	lds	r22, 0x212B	; 0x80212b <alt>
    43a0:	70 91 2c 21 	lds	r23, 0x212C	; 0x80212c <alt+0x1>
    43a4:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <alt+0x2>
    43a8:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <alt+0x3>
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	41 ee       	ldi	r20, 0xE1	; 225
    43b2:	53 e4       	ldi	r21, 0x43	; 67
    43b4:	de d5       	rcall	.+3004   	; 0x4f72 <__subsf3>
    43b6:	ae d6       	rcall	.+3420   	; 0x5114 <__fixsfsi>
    43b8:	9b 01       	movw	r18, r22
    43ba:	77 23       	and	r23, r23
    43bc:	24 f4       	brge	.+8      	; 0x43c6 <main+0xdc>
    43be:	22 27       	eor	r18, r18
    43c0:	33 27       	eor	r19, r19
    43c2:	26 1b       	sub	r18, r22
    43c4:	37 0b       	sbc	r19, r23
    43c6:	2a 30       	cpi	r18, 0x0A	; 10
    43c8:	31 05       	cpc	r19, r1
	ac_enable(&ACA, 0);

}

void release(void){
	servo_release();
    43ca:	24 f4       	brge	.+8      	; 0x43d4 <main+0xea>
    43cc:	f8 d8       	rcall	.-3600   	; 0x35be <servo_release>
					cam_initialized = 1;
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
					release();				// Releases the payload
					hall_sensor_init();		// Starts hall effect sensor to read rpm
    43ce:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <hall_sensor_init>
    43d2:	0f c0       	rjmp	.+30     	; 0x43f2 <main+0x108>
				}
				else if(released){
    43d4:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <released>
    43d8:	88 23       	and	r24, r24
					servo_pid(&directions);	// Updates the PID
    43da:	59 f0       	breq	.+22     	; 0x43f2 <main+0x108>
    43dc:	ce 01       	movw	r24, r28
    43de:	8f 59       	subi	r24, 0x9F	; 159
    43e0:	9f 4f       	sbci	r25, 0xFF	; 255
    43e2:	21 d8       	rcall	.-4030   	; 0x3426 <servo_pid>
    43e4:	06 c0       	rjmp	.+12     	; 0x43f2 <main+0x108>
				}
				break;
			case 3:
				if(!buzzer_initialized){
    43e6:	01 11       	cpse	r16, r1
    43e8:	04 c0       	rjmp	.+8      	; 0x43f2 <main+0x108>
					//buzzer_init();
					buzzer_initialized = 1;
    43ea:	01 e0       	ldi	r16, 0x01	; 1
    43ec:	02 c0       	rjmp	.+4      	; 0x43f2 <main+0x108>
				}
				break;
			default:
				state_check();
    43ee:	0e 94 0b 19 	call	0x3216	; 0x3216 <state_check>
				break;
		}

		if(time_flag){
    43f2:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <time_flag>
    43f6:	88 23       	and	r24, r24
			//calc_rpm();
			time_update();
    43f8:	19 f0       	breq	.+6      	; 0x4400 <main+0x116>
    43fa:	dd dc       	rcall	.-1606   	; 0x3db6 <time_update>
			time_flag = 0;
    43fc:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <time_flag>
		}
		if(xbee_flag){
    4400:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <xbee_flag>
    4404:	88 23       	and	r24, r24
			command(xbee_comm);
    4406:	39 f0       	breq	.+14     	; 0x4416 <main+0x12c>
    4408:	80 91 49 21 	lds	r24, 0x2149	; 0x802149 <xbee_comm>
    440c:	53 df       	rcall	.-346    	; 0x42b4 <command>
			xbee_comm = 0;
    440e:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <xbee_comm>
			xbee_flag = 0;
    4412:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <xbee_flag>
		}

		data_packets++;
    4416:	80 91 39 21 	lds	r24, 0x2139	; 0x802139 <data_packets>
    441a:	90 91 3a 21 	lds	r25, 0x213A	; 0x80213a <data_packets+0x1>
    441e:	01 96       	adiw	r24, 0x01	; 1
    4420:	80 93 39 21 	sts	0x2139, r24	; 0x802139 <data_packets>
    4424:	90 93 3a 21 	sts	0x213A, r25	; 0x80213a <data_packets+0x1>
		if(timer != 0){
    4428:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <timer>
    442c:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <timer+0x1>
    4430:	89 2b       	or	r24, r25
    4432:	09 f4       	brne	.+2      	; 0x4436 <main+0x14c>
    4434:	99 cf       	rjmp	.-206    	; 0x4368 <main+0x7e>
			rate = data_packets / timer;
    4436:	80 91 39 21 	lds	r24, 0x2139	; 0x802139 <data_packets>
    443a:	90 91 3a 21 	lds	r25, 0x213A	; 0x80213a <data_packets+0x1>
    443e:	60 91 3b 21 	lds	r22, 0x213B	; 0x80213b <timer>
    4442:	70 91 3c 21 	lds	r23, 0x213C	; 0x80213c <timer+0x1>
    4446:	0e 94 48 2b 	call	0x5690	; 0x5690 <__udivmodhi4>
    444a:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <rate>
    444e:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <rate+0x1>
    4452:	8a cf       	rjmp	.-236    	; 0x4368 <main+0x7e>

00004454 <__vector_47>:
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}


ISR(TCE0_OVF_vect){
    4454:	1f 92       	push	r1
    4456:	0f 92       	push	r0
    4458:	0f b6       	in	r0, 0x3f	; 63
    445a:	0f 92       	push	r0
    445c:	11 24       	eor	r1, r1
    445e:	08 b6       	in	r0, 0x38	; 56
    4460:	0f 92       	push	r0
    4462:	18 be       	out	0x38, r1	; 56
    4464:	09 b6       	in	r0, 0x39	; 57
    4466:	0f 92       	push	r0
    4468:	19 be       	out	0x39, r1	; 57
    446a:	0a b6       	in	r0, 0x3a	; 58
    446c:	0f 92       	push	r0
    446e:	1a be       	out	0x3a, r1	; 58
    4470:	0b b6       	in	r0, 0x3b	; 59
    4472:	0f 92       	push	r0
    4474:	1b be       	out	0x3b, r1	; 59
    4476:	2f 92       	push	r2
    4478:	3f 92       	push	r3
    447a:	4f 92       	push	r4
    447c:	5f 92       	push	r5
    447e:	6f 92       	push	r6
    4480:	7f 92       	push	r7
    4482:	8f 92       	push	r8
    4484:	9f 92       	push	r9
    4486:	af 92       	push	r10
    4488:	bf 92       	push	r11
    448a:	cf 92       	push	r12
    448c:	df 92       	push	r13
    448e:	ef 92       	push	r14
    4490:	ff 92       	push	r15
    4492:	0f 93       	push	r16
    4494:	1f 93       	push	r17
    4496:	2f 93       	push	r18
    4498:	3f 93       	push	r19
    449a:	4f 93       	push	r20
    449c:	5f 93       	push	r21
    449e:	6f 93       	push	r22
    44a0:	7f 93       	push	r23
    44a2:	8f 93       	push	r24
    44a4:	9f 93       	push	r25
    44a6:	af 93       	push	r26
    44a8:	bf 93       	push	r27
    44aa:	ef 93       	push	r30
    44ac:	ff 93       	push	r31
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	cd b7       	in	r28, 0x3d	; 61
    44b4:	de b7       	in	r29, 0x3e	; 62
    44b6:	e9 97       	sbiw	r28, 0x39	; 57
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	de bf       	out	0x3e, r29	; 62
	timer++;
    44bc:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <timer>
    44c0:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <timer+0x1>
    44c4:	01 96       	adiw	r24, 0x01	; 1
    44c6:	80 93 3b 21 	sts	0x213B, r24	; 0x80213b <timer>
    44ca:	90 93 3c 21 	sts	0x213C, r25	; 0x80213c <timer+0x1>
	packets++;
    44ce:	80 91 37 21 	lds	r24, 0x2137	; 0x802137 <packets>
    44d2:	90 91 38 21 	lds	r25, 0x2138	; 0x802138 <packets+0x1>
    44d6:	01 96       	adiw	r24, 0x01	; 1
    44d8:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <packets>
    44dc:	90 93 38 21 	sts	0x2138, r25	; 0x802138 <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    44e0:	60 91 01 21 	lds	r22, 0x2101	; 0x802101 <angle>
    44e4:	70 91 02 21 	lds	r23, 0x2102	; 0x802102 <angle+0x1>
    44e8:	80 91 03 21 	lds	r24, 0x2103	; 0x802103 <angle+0x2>
    44ec:	90 91 04 21 	lds	r25, 0x2104	; 0x802104 <angle+0x3>
    44f0:	20 91 59 21 	lds	r18, 0x2159	; 0x802159 <state>
    44f4:	29 83       	std	Y+1, r18	; 0x01
    44f6:	40 90 05 21 	lds	r4, 0x2105	; 0x802105 <rpm>
    44fa:	50 90 06 21 	lds	r5, 0x2106	; 0x802106 <rpm+0x1>
    44fe:	60 90 07 21 	lds	r6, 0x2107	; 0x802107 <rpm+0x2>
    4502:	70 90 08 21 	lds	r7, 0x2108	; 0x802108 <rpm+0x3>
    4506:	80 90 09 21 	lds	r8, 0x2109	; 0x802109 <roll>
    450a:	90 90 0a 21 	lds	r9, 0x210A	; 0x80210a <roll+0x1>
    450e:	a0 90 0b 21 	lds	r10, 0x210B	; 0x80210b <roll+0x2>
    4512:	b0 90 0c 21 	lds	r11, 0x210C	; 0x80210c <roll+0x3>
    4516:	c0 90 0d 21 	lds	r12, 0x210D	; 0x80210d <pitch>
    451a:	d0 90 0e 21 	lds	r13, 0x210E	; 0x80210e <pitch+0x1>
    451e:	e0 90 0f 21 	lds	r14, 0x210F	; 0x80210f <pitch+0x2>
    4522:	f0 90 10 21 	lds	r15, 0x2110	; 0x802110 <pitch+0x3>
    4526:	40 91 11 21 	lds	r20, 0x2111	; 0x802111 <gps_sats>
    452a:	50 91 12 21 	lds	r21, 0x2112	; 0x802112 <gps_sats+0x1>
    452e:	48 af       	std	Y+56, r20	; 0x38
    4530:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    4532:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <gps_alt>
    4536:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <gps_alt+0x1>
    453a:	40 91 15 21 	lds	r20, 0x2115	; 0x802115 <gps_alt+0x2>
    453e:	50 91 16 21 	lds	r21, 0x2116	; 0x802116 <gps_alt+0x3>
    4542:	2a 83       	std	Y+2, r18	; 0x02
    4544:	3b 83       	std	Y+3, r19	; 0x03
    4546:	4c 83       	std	Y+4, r20	; 0x04
    4548:	5d 83       	std	Y+5, r21	; 0x05


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    454a:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <gps_alt>
    454e:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <gps_alt+0x1>
    4552:	40 91 15 21 	lds	r20, 0x2115	; 0x802115 <gps_alt+0x2>
    4556:	50 91 16 21 	lds	r21, 0x2116	; 0x802116 <gps_alt+0x3>
    455a:	2e 83       	std	Y+6, r18	; 0x06
    455c:	3f 83       	std	Y+7, r19	; 0x07
    455e:	48 87       	std	Y+8, r20	; 0x08
    4560:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    4562:	20 91 17 21 	lds	r18, 0x2117	; 0x802117 <gps_long>
    4566:	30 91 18 21 	lds	r19, 0x2118	; 0x802118 <gps_long+0x1>
    456a:	40 91 19 21 	lds	r20, 0x2119	; 0x802119 <gps_long+0x2>
    456e:	50 91 1a 21 	lds	r21, 0x211A	; 0x80211a <gps_long+0x3>
    4572:	2a 87       	std	Y+10, r18	; 0x0a
    4574:	3b 87       	std	Y+11, r19	; 0x0b
    4576:	4c 87       	std	Y+12, r20	; 0x0c
    4578:	5d 87       	std	Y+13, r21	; 0x0d


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    457a:	20 91 17 21 	lds	r18, 0x2117	; 0x802117 <gps_long>
    457e:	30 91 18 21 	lds	r19, 0x2118	; 0x802118 <gps_long+0x1>
    4582:	40 91 19 21 	lds	r20, 0x2119	; 0x802119 <gps_long+0x2>
    4586:	50 91 1a 21 	lds	r21, 0x211A	; 0x80211a <gps_long+0x3>
    458a:	2e 87       	std	Y+14, r18	; 0x0e
    458c:	3f 87       	std	Y+15, r19	; 0x0f
    458e:	48 8b       	std	Y+16, r20	; 0x10
    4590:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    4592:	20 91 1b 21 	lds	r18, 0x211B	; 0x80211b <gps_lat>
    4596:	30 91 1c 21 	lds	r19, 0x211C	; 0x80211c <gps_lat+0x1>
    459a:	40 91 1d 21 	lds	r20, 0x211D	; 0x80211d <gps_lat+0x2>
    459e:	50 91 1e 21 	lds	r21, 0x211E	; 0x80211e <gps_lat+0x3>
    45a2:	2a 8b       	std	Y+18, r18	; 0x12
    45a4:	3b 8b       	std	Y+19, r19	; 0x13
    45a6:	4c 8b       	std	Y+20, r20	; 0x14
    45a8:	5d 8b       	std	Y+21, r21	; 0x15


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    45aa:	20 91 1b 21 	lds	r18, 0x211B	; 0x80211b <gps_lat>
    45ae:	30 91 1c 21 	lds	r19, 0x211C	; 0x80211c <gps_lat+0x1>
    45b2:	40 91 1d 21 	lds	r20, 0x211D	; 0x80211d <gps_lat+0x2>
    45b6:	50 91 1e 21 	lds	r21, 0x211E	; 0x80211e <gps_lat+0x3>
    45ba:	2e 8b       	std	Y+22, r18	; 0x16
    45bc:	3f 8b       	std	Y+23, r19	; 0x17
    45be:	48 8f       	std	Y+24, r20	; 0x18
    45c0:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    45c2:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <gps_t>
    45c6:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <gps_t+0x1>
    45ca:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <gps_t+0x2>
    45ce:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <gps_t+0x3>
    45d2:	2a 8f       	std	Y+26, r18	; 0x1a
    45d4:	3b 8f       	std	Y+27, r19	; 0x1b
    45d6:	4c 8f       	std	Y+28, r20	; 0x1c
    45d8:	5d 8f       	std	Y+29, r21	; 0x1d
    45da:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <gps_t>
    45de:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <gps_t+0x1>
    45e2:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <gps_t+0x2>
    45e6:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <gps_t+0x3>
    45ea:	2e 8f       	std	Y+30, r18	; 0x1e
    45ec:	3f 8f       	std	Y+31, r19	; 0x1f
    45ee:	48 a3       	std	Y+32, r20	; 0x20
    45f0:	59 a3       	std	Y+33, r21	; 0x21
    45f2:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <gps_t>
    45f6:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <gps_t+0x1>
    45fa:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <gps_t+0x2>
    45fe:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <gps_t+0x3>
    4602:	2a a3       	std	Y+34, r18	; 0x22
    4604:	3b a3       	std	Y+35, r19	; 0x23
    4606:	4c a3       	std	Y+36, r20	; 0x24
    4608:	5d a3       	std	Y+37, r21	; 0x25


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    460a:	20 91 27 21 	lds	r18, 0x2127	; 0x802127 <volt>
    460e:	30 91 28 21 	lds	r19, 0x2128	; 0x802128 <volt+0x1>
    4612:	40 91 29 21 	lds	r20, 0x2129	; 0x802129 <volt+0x2>
    4616:	50 91 2a 21 	lds	r21, 0x212A	; 0x80212a <volt+0x3>
    461a:	2e a3       	std	Y+38, r18	; 0x26
    461c:	3f a3       	std	Y+39, r19	; 0x27
    461e:	48 a7       	std	Y+40, r20	; 0x28
    4620:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    4622:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <temp>
    4626:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <temp+0x1>
    462a:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <temp+0x2>
    462e:	50 91 32 21 	lds	r21, 0x2132	; 0x802132 <temp+0x3>
    4632:	2a a7       	std	Y+42, r18	; 0x2a
    4634:	3b a7       	std	Y+43, r19	; 0x2b
    4636:	4c a7       	std	Y+44, r20	; 0x2c
    4638:	5d a7       	std	Y+45, r21	; 0x2d


ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    463a:	20 91 33 21 	lds	r18, 0x2133	; 0x802133 <press>
    463e:	30 91 34 21 	lds	r19, 0x2134	; 0x802134 <press+0x1>
    4642:	40 91 35 21 	lds	r20, 0x2135	; 0x802135 <press+0x2>
    4646:	50 91 36 21 	lds	r21, 0x2136	; 0x802136 <press+0x3>
    464a:	2e a7       	std	Y+46, r18	; 0x2e
    464c:	3f a7       	std	Y+47, r19	; 0x2f
    464e:	48 ab       	std	Y+48, r20	; 0x30
    4650:	59 ab       	std	Y+49, r21	; 0x31
    4652:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <alt>
    4656:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <alt+0x1>
    465a:	40 91 2d 21 	lds	r20, 0x212D	; 0x80212d <alt+0x2>
    465e:	50 91 2e 21 	lds	r21, 0x212E	; 0x80212e <alt+0x3>
    4662:	2a ab       	std	Y+50, r18	; 0x32
    4664:	3b ab       	std	Y+51, r19	; 0x33
    4666:	4c ab       	std	Y+52, r20	; 0x34
    4668:	5d ab       	std	Y+53, r21	; 0x35
    466a:	00 91 37 21 	lds	r16, 0x2137	; 0x802137 <packets>
    466e:	10 91 38 21 	lds	r17, 0x2138	; 0x802138 <packets+0x1>
    4672:	20 90 3b 21 	lds	r2, 0x213B	; 0x80213b <timer>
    4676:	30 90 3c 21 	lds	r3, 0x213C	; 0x80213c <timer+0x1>
    467a:	40 91 3b 21 	lds	r20, 0x213B	; 0x80213b <timer>
    467e:	50 91 3c 21 	lds	r21, 0x213C	; 0x80213c <timer+0x1>
    4682:	4e ab       	std	Y+54, r20	; 0x36
    4684:	5f ab       	std	Y+55, r21	; 0x37
    4686:	46 d5       	rcall	.+2700   	; 0x5114 <__fixsfsi>
    4688:	7f 93       	push	r23
    468a:	6f 93       	push	r22
    468c:	1f 92       	push	r1
    468e:	59 81       	ldd	r21, Y+1	; 0x01
    4690:	5f 93       	push	r21
    4692:	c3 01       	movw	r24, r6
    4694:	b2 01       	movw	r22, r4
    4696:	3e d5       	rcall	.+2684   	; 0x5114 <__fixsfsi>
    4698:	7f 93       	push	r23
    469a:	6f 93       	push	r22
    469c:	c5 01       	movw	r24, r10
    469e:	b4 01       	movw	r22, r8
    46a0:	39 d5       	rcall	.+2674   	; 0x5114 <__fixsfsi>
    46a2:	7f 93       	push	r23
    46a4:	6f 93       	push	r22
    46a6:	c7 01       	movw	r24, r14
    46a8:	b6 01       	movw	r22, r12
    46aa:	34 d5       	rcall	.+2664   	; 0x5114 <__fixsfsi>
    46ac:	7f 93       	push	r23
    46ae:	6f 93       	push	r22
    46b0:	89 ad       	ldd	r24, Y+57	; 0x39
    46b2:	8f 93       	push	r24
    46b4:	98 ad       	ldd	r25, Y+56	; 0x38
    46b6:	9f 93       	push	r25
    46b8:	6a 81       	ldd	r22, Y+2	; 0x02
    46ba:	7b 81       	ldd	r23, Y+3	; 0x03
    46bc:	8c 81       	ldd	r24, Y+4	; 0x04
    46be:	9d 81       	ldd	r25, Y+5	; 0x05
    46c0:	29 d5       	rcall	.+2642   	; 0x5114 <__fixsfsi>
    46c2:	9b 01       	movw	r18, r22
    46c4:	22 0f       	add	r18, r18
    46c6:	33 1f       	adc	r19, r19
    46c8:	66 0f       	add	r22, r22
    46ca:	77 1f       	adc	r23, r23
    46cc:	66 0f       	add	r22, r22
    46ce:	77 1f       	adc	r23, r23
    46d0:	66 0f       	add	r22, r22
    46d2:	77 1f       	adc	r23, r23
    46d4:	c9 01       	movw	r24, r18
    46d6:	86 0f       	add	r24, r22
    46d8:	97 1f       	adc	r25, r23
    46da:	6a e0       	ldi	r22, 0x0A	; 10
    46dc:	70 e0       	ldi	r23, 0x00	; 0
    46de:	ec d7       	rcall	.+4056   	; 0x56b8 <__divmodhi4>
    46e0:	9f 93       	push	r25
    46e2:	8f 93       	push	r24
    46e4:	6e 81       	ldd	r22, Y+6	; 0x06
    46e6:	7f 81       	ldd	r23, Y+7	; 0x07
    46e8:	88 85       	ldd	r24, Y+8	; 0x08
    46ea:	99 85       	ldd	r25, Y+9	; 0x09
    46ec:	13 d5       	rcall	.+2598   	; 0x5114 <__fixsfsi>
    46ee:	7f 93       	push	r23
    46f0:	6f 93       	push	r22
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	34 e2       	ldi	r19, 0x24	; 36
    46f6:	44 e7       	ldi	r20, 0x74	; 116
    46f8:	59 e4       	ldi	r21, 0x49	; 73
    46fa:	6a 85       	ldd	r22, Y+10	; 0x0a
    46fc:	7b 85       	ldd	r23, Y+11	; 0x0b
    46fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    4700:	9d 85       	ldd	r25, Y+13	; 0x0d
    4702:	ef d5       	rcall	.+3038   	; 0x52e2 <__mulsf3>
    4704:	07 d5       	rcall	.+2574   	; 0x5114 <__fixsfsi>
    4706:	20 e4       	ldi	r18, 0x40	; 64
    4708:	32 e4       	ldi	r19, 0x42	; 66
    470a:	4f e0       	ldi	r20, 0x0F	; 15
    470c:	50 e0       	ldi	r21, 0x00	; 0
    470e:	0e 94 91 2b 	call	0x5722	; 0x5722 <__divmodsi4>
    4712:	9b 01       	movw	r18, r22
    4714:	77 23       	and	r23, r23
    4716:	24 f4       	brge	.+8      	; 0x4720 <__vector_47+0x2cc>
    4718:	22 27       	eor	r18, r18
    471a:	33 27       	eor	r19, r19
    471c:	26 1b       	sub	r18, r22
    471e:	37 0b       	sbc	r19, r23
    4720:	c9 01       	movw	r24, r18
    4722:	33 0f       	add	r19, r19
    4724:	aa 0b       	sbc	r26, r26
    4726:	bb 0b       	sbc	r27, r27
    4728:	bf 93       	push	r27
    472a:	af 93       	push	r26
    472c:	9f 93       	push	r25
    472e:	8f 93       	push	r24
    4730:	6e 85       	ldd	r22, Y+14	; 0x0e
    4732:	7f 85       	ldd	r23, Y+15	; 0x0f
    4734:	88 89       	ldd	r24, Y+16	; 0x10
    4736:	99 89       	ldd	r25, Y+17	; 0x11
    4738:	ed d4       	rcall	.+2522   	; 0x5114 <__fixsfsi>
    473a:	7f 93       	push	r23
    473c:	6f 93       	push	r22
    473e:	20 e0       	ldi	r18, 0x00	; 0
    4740:	34 e2       	ldi	r19, 0x24	; 36
    4742:	44 e7       	ldi	r20, 0x74	; 116
    4744:	59 e4       	ldi	r21, 0x49	; 73
    4746:	6a 89       	ldd	r22, Y+18	; 0x12
    4748:	7b 89       	ldd	r23, Y+19	; 0x13
    474a:	8c 89       	ldd	r24, Y+20	; 0x14
    474c:	9d 89       	ldd	r25, Y+21	; 0x15
    474e:	c9 d5       	rcall	.+2962   	; 0x52e2 <__mulsf3>
    4750:	e1 d4       	rcall	.+2498   	; 0x5114 <__fixsfsi>
    4752:	20 e4       	ldi	r18, 0x40	; 64
    4754:	32 e4       	ldi	r19, 0x42	; 66
    4756:	4f e0       	ldi	r20, 0x0F	; 15
    4758:	50 e0       	ldi	r21, 0x00	; 0
    475a:	e3 d7       	rcall	.+4038   	; 0x5722 <__divmodsi4>
    475c:	9f 93       	push	r25
    475e:	8f 93       	push	r24
    4760:	7f 93       	push	r23
    4762:	6f 93       	push	r22
    4764:	6e 89       	ldd	r22, Y+22	; 0x16
    4766:	7f 89       	ldd	r23, Y+23	; 0x17
    4768:	88 8d       	ldd	r24, Y+24	; 0x18
    476a:	99 8d       	ldd	r25, Y+25	; 0x19
    476c:	d3 d4       	rcall	.+2470   	; 0x5114 <__fixsfsi>
    476e:	7f 93       	push	r23
    4770:	6f 93       	push	r22
    4772:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4774:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4776:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4778:	9d 8d       	ldd	r25, Y+29	; 0x1d
    477a:	cc d4       	rcall	.+2456   	; 0x5114 <__fixsfsi>
    477c:	0f 2e       	mov	r0, r31
    477e:	f4 e6       	ldi	r31, 0x64	; 100
    4780:	cf 2e       	mov	r12, r31
    4782:	d1 2c       	mov	r13, r1
    4784:	e1 2c       	mov	r14, r1
    4786:	f1 2c       	mov	r15, r1
    4788:	f0 2d       	mov	r31, r0
    478a:	a7 01       	movw	r20, r14
    478c:	96 01       	movw	r18, r12
    478e:	c9 d7       	rcall	.+3986   	; 0x5722 <__divmodsi4>
    4790:	7f 93       	push	r23
    4792:	6f 93       	push	r22
    4794:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4796:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4798:	88 a1       	ldd	r24, Y+32	; 0x20
    479a:	99 a1       	ldd	r25, Y+33	; 0x21
    479c:	bb d4       	rcall	.+2422   	; 0x5114 <__fixsfsi>
    479e:	0f 2e       	mov	r0, r31
    47a0:	f0 e1       	ldi	r31, 0x10	; 16
    47a2:	8f 2e       	mov	r8, r31
    47a4:	f7 e2       	ldi	r31, 0x27	; 39
    47a6:	9f 2e       	mov	r9, r31
    47a8:	a1 2c       	mov	r10, r1
    47aa:	b1 2c       	mov	r11, r1
    47ac:	f0 2d       	mov	r31, r0
    47ae:	a5 01       	movw	r20, r10
    47b0:	94 01       	movw	r18, r8
    47b2:	b7 d7       	rcall	.+3950   	; 0x5722 <__divmodsi4>
    47b4:	a7 01       	movw	r20, r14
    47b6:	96 01       	movw	r18, r12
    47b8:	b4 d7       	rcall	.+3944   	; 0x5722 <__divmodsi4>
    47ba:	3f 93       	push	r19
    47bc:	2f 93       	push	r18
    47be:	6a a1       	ldd	r22, Y+34	; 0x22
    47c0:	7b a1       	ldd	r23, Y+35	; 0x23
    47c2:	8c a1       	ldd	r24, Y+36	; 0x24
    47c4:	9d a1       	ldd	r25, Y+37	; 0x25
    47c6:	a6 d4       	rcall	.+2380   	; 0x5114 <__fixsfsi>
    47c8:	a5 01       	movw	r20, r10
    47ca:	94 01       	movw	r18, r8
    47cc:	aa d7       	rcall	.+3924   	; 0x5722 <__divmodsi4>
    47ce:	3f 93       	push	r19
    47d0:	2f 93       	push	r18
    47d2:	6e a1       	ldd	r22, Y+38	; 0x26
    47d4:	7f a1       	ldd	r23, Y+39	; 0x27
    47d6:	88 a5       	ldd	r24, Y+40	; 0x28
    47d8:	99 a5       	ldd	r25, Y+41	; 0x29
    47da:	9c d4       	rcall	.+2360   	; 0x5114 <__fixsfsi>
    47dc:	7f 93       	push	r23
    47de:	6f 93       	push	r22
    47e0:	23 e3       	ldi	r18, 0x33	; 51
    47e2:	33 e9       	ldi	r19, 0x93	; 147
    47e4:	48 e8       	ldi	r20, 0x88	; 136
    47e6:	53 e4       	ldi	r21, 0x43	; 67
    47e8:	6a a5       	ldd	r22, Y+42	; 0x2a
    47ea:	7b a5       	ldd	r23, Y+43	; 0x2b
    47ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    47ee:	9d a5       	ldd	r25, Y+45	; 0x2d
    47f0:	c0 d3       	rcall	.+1920   	; 0x4f72 <__subsf3>
    47f2:	90 d4       	rcall	.+2336   	; 0x5114 <__fixsfsi>
    47f4:	7f 93       	push	r23
    47f6:	6f 93       	push	r22
    47f8:	6e a5       	ldd	r22, Y+46	; 0x2e
    47fa:	7f a5       	ldd	r23, Y+47	; 0x2f
    47fc:	88 a9       	ldd	r24, Y+48	; 0x30
    47fe:	99 a9       	ldd	r25, Y+49	; 0x31
    4800:	89 d4       	rcall	.+2322   	; 0x5114 <__fixsfsi>
    4802:	9f 93       	push	r25
    4804:	8f 93       	push	r24
    4806:	7f 93       	push	r23
    4808:	6f 93       	push	r22
    480a:	6a a9       	ldd	r22, Y+50	; 0x32
    480c:	7b a9       	ldd	r23, Y+51	; 0x33
    480e:	8c a9       	ldd	r24, Y+52	; 0x34
    4810:	9d a9       	ldd	r25, Y+53	; 0x35
    4812:	80 d4       	rcall	.+2304   	; 0x5114 <__fixsfsi>
    4814:	7f 93       	push	r23
    4816:	6f 93       	push	r22
    4818:	1f 93       	push	r17
    481a:	0f 93       	push	r16
    481c:	91 01       	movw	r18, r2
    481e:	ad ec       	ldi	r26, 0xCD	; 205
    4820:	bc ec       	ldi	r27, 0xCC	; 204
    4822:	a4 d7       	rcall	.+3912   	; 0x576c <__umulhisi3>
    4824:	96 95       	lsr	r25
    4826:	87 95       	ror	r24
    4828:	96 95       	lsr	r25
    482a:	87 95       	ror	r24
    482c:	96 95       	lsr	r25
    482e:	87 95       	ror	r24
    4830:	9c 01       	movw	r18, r24
    4832:	22 0f       	add	r18, r18
    4834:	33 1f       	adc	r19, r19
    4836:	88 0f       	add	r24, r24
    4838:	99 1f       	adc	r25, r25
    483a:	88 0f       	add	r24, r24
    483c:	99 1f       	adc	r25, r25
    483e:	88 0f       	add	r24, r24
    4840:	99 1f       	adc	r25, r25
    4842:	82 0f       	add	r24, r18
    4844:	93 1f       	adc	r25, r19
    4846:	28 1a       	sub	r2, r24
    4848:	39 0a       	sbc	r3, r25
    484a:	3f 92       	push	r3
    484c:	2f 92       	push	r2
    484e:	2e a9       	ldd	r18, Y+54	; 0x36
    4850:	3f a9       	ldd	r19, Y+55	; 0x37
    4852:	8c d7       	rcall	.+3864   	; 0x576c <__umulhisi3>
    4854:	96 95       	lsr	r25
    4856:	87 95       	ror	r24
    4858:	96 95       	lsr	r25
    485a:	87 95       	ror	r24
    485c:	96 95       	lsr	r25
    485e:	87 95       	ror	r24
    4860:	9f 93       	push	r25
    4862:	8f 93       	push	r24
    4864:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <format+0x1>
    4868:	8f 93       	push	r24
    486a:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <format>
    486e:	8f 93       	push	r24
    4870:	29 ea       	ldi	r18, 0xA9	; 169
    4872:	31 e2       	ldi	r19, 0x21	; 33
    4874:	3f 93       	push	r19
    4876:	2f 93       	push	r18
    4878:	0e 94 63 2c 	call	0x58c6	; 0x58c6 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    487c:	cd bf       	out	0x3d, r28	; 61
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	29 ea       	ldi	r18, 0xA9	; 169
    4882:	31 e2       	ldi	r19, 0x21	; 33
    4884:	3f 93       	push	r19
    4886:	2f 93       	push	r18
    4888:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <printf>
	time_flag = 1;
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <time_flag>
}
    4892:	0f 90       	pop	r0
    4894:	0f 90       	pop	r0
    4896:	e9 96       	adiw	r28, 0x39	; 57
    4898:	cd bf       	out	0x3d, r28	; 61
    489a:	de bf       	out	0x3e, r29	; 62
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	ff 91       	pop	r31
    48a2:	ef 91       	pop	r30
    48a4:	bf 91       	pop	r27
    48a6:	af 91       	pop	r26
    48a8:	9f 91       	pop	r25
    48aa:	8f 91       	pop	r24
    48ac:	7f 91       	pop	r23
    48ae:	6f 91       	pop	r22
    48b0:	5f 91       	pop	r21
    48b2:	4f 91       	pop	r20
    48b4:	3f 91       	pop	r19
    48b6:	2f 91       	pop	r18
    48b8:	1f 91       	pop	r17
    48ba:	0f 91       	pop	r16
    48bc:	ff 90       	pop	r15
    48be:	ef 90       	pop	r14
    48c0:	df 90       	pop	r13
    48c2:	cf 90       	pop	r12
    48c4:	bf 90       	pop	r11
    48c6:	af 90       	pop	r10
    48c8:	9f 90       	pop	r9
    48ca:	8f 90       	pop	r8
    48cc:	7f 90       	pop	r7
    48ce:	6f 90       	pop	r6
    48d0:	5f 90       	pop	r5
    48d2:	4f 90       	pop	r4
    48d4:	3f 90       	pop	r3
    48d6:	2f 90       	pop	r2
    48d8:	0f 90       	pop	r0
    48da:	0b be       	out	0x3b, r0	; 59
    48dc:	0f 90       	pop	r0
    48de:	0a be       	out	0x3a, r0	; 58
    48e0:	0f 90       	pop	r0
    48e2:	09 be       	out	0x39, r0	; 57
    48e4:	0f 90       	pop	r0
    48e6:	08 be       	out	0x38, r0	; 56
    48e8:	0f 90       	pop	r0
    48ea:	0f be       	out	0x3f, r0	; 63
    48ec:	0f 90       	pop	r0
    48ee:	1f 90       	pop	r1
    48f0:	18 95       	reti

000048f2 <__vector_58>:


ISR(USARTE0_RXC_vect){
    48f2:	1f 92       	push	r1
    48f4:	0f 92       	push	r0
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	0f 92       	push	r0
    48fa:	11 24       	eor	r1, r1
    48fc:	08 b6       	in	r0, 0x38	; 56
    48fe:	0f 92       	push	r0
    4900:	18 be       	out	0x38, r1	; 56
    4902:	09 b6       	in	r0, 0x39	; 57
    4904:	0f 92       	push	r0
    4906:	19 be       	out	0x39, r1	; 57
    4908:	0b b6       	in	r0, 0x3b	; 59
    490a:	0f 92       	push	r0
    490c:	1b be       	out	0x3b, r1	; 59
    490e:	2f 93       	push	r18
    4910:	3f 93       	push	r19
    4912:	4f 93       	push	r20
    4914:	5f 93       	push	r21
    4916:	6f 93       	push	r22
    4918:	7f 93       	push	r23
    491a:	8f 93       	push	r24
    491c:	9f 93       	push	r25
    491e:	af 93       	push	r26
    4920:	bf 93       	push	r27
    4922:	ef 93       	push	r30
    4924:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    4926:	80 ea       	ldi	r24, 0xA0	; 160
    4928:	98 e0       	ldi	r25, 0x08	; 8
    492a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <usart_getchar>
    492e:	80 93 49 21 	sts	0x2149, r24	; 0x802149 <xbee_comm>
	xbee_flag = 1;
    4932:	81 e0       	ldi	r24, 0x01	; 1
    4934:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <xbee_flag>
}
    4938:	ff 91       	pop	r31
    493a:	ef 91       	pop	r30
    493c:	bf 91       	pop	r27
    493e:	af 91       	pop	r26
    4940:	9f 91       	pop	r25
    4942:	8f 91       	pop	r24
    4944:	7f 91       	pop	r23
    4946:	6f 91       	pop	r22
    4948:	5f 91       	pop	r21
    494a:	4f 91       	pop	r20
    494c:	3f 91       	pop	r19
    494e:	2f 91       	pop	r18
    4950:	0f 90       	pop	r0
    4952:	0b be       	out	0x3b, r0	; 59
    4954:	0f 90       	pop	r0
    4956:	09 be       	out	0x39, r0	; 57
    4958:	0f 90       	pop	r0
    495a:	08 be       	out	0x38, r0	; 56
    495c:	0f 90       	pop	r0
    495e:	0f be       	out	0x3f, r0	; 63
    4960:	0f 90       	pop	r0
    4962:	1f 90       	pop	r1
    4964:	18 95       	reti

00004966 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    4966:	1f 92       	push	r1
    4968:	0f 92       	push	r0
    496a:	0f b6       	in	r0, 0x3f	; 63
    496c:	0f 92       	push	r0
    496e:	11 24       	eor	r1, r1
    4970:	08 b6       	in	r0, 0x38	; 56
    4972:	0f 92       	push	r0
    4974:	18 be       	out	0x38, r1	; 56
    4976:	09 b6       	in	r0, 0x39	; 57
    4978:	0f 92       	push	r0
    497a:	19 be       	out	0x39, r1	; 57
    497c:	0a b6       	in	r0, 0x3a	; 58
    497e:	0f 92       	push	r0
    4980:	1a be       	out	0x3a, r1	; 58
    4982:	0b b6       	in	r0, 0x3b	; 59
    4984:	0f 92       	push	r0
    4986:	1b be       	out	0x3b, r1	; 59
    4988:	8f 92       	push	r8
    498a:	9f 92       	push	r9
    498c:	af 92       	push	r10
    498e:	bf 92       	push	r11
    4990:	cf 92       	push	r12
    4992:	df 92       	push	r13
    4994:	ef 92       	push	r14
    4996:	ff 92       	push	r15
    4998:	1f 93       	push	r17
    499a:	2f 93       	push	r18
    499c:	3f 93       	push	r19
    499e:	4f 93       	push	r20
    49a0:	5f 93       	push	r21
    49a2:	6f 93       	push	r22
    49a4:	7f 93       	push	r23
    49a6:	8f 93       	push	r24
    49a8:	9f 93       	push	r25
    49aa:	af 93       	push	r26
    49ac:	bf 93       	push	r27
    49ae:	ef 93       	push	r30
    49b0:	ff 93       	push	r31
    49b2:	cf 93       	push	r28
    49b4:	df 93       	push	r29
    49b6:	00 d0       	rcall	.+0      	; 0x49b8 <__vector_91+0x52>
    49b8:	00 d0       	rcall	.+0      	; 0x49ba <__vector_91+0x54>
    49ba:	cd b7       	in	r28, 0x3d	; 61
    49bc:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    49be:	80 eb       	ldi	r24, 0xB0	; 176
    49c0:	99 e0       	ldi	r25, 0x09	; 9
    49c2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <usart_getchar>
    49c6:	18 2f       	mov	r17, r24
	//printf("%c",c);

	if(c == (uint8_t) '$'){
    49c8:	84 32       	cpi	r24, 0x24	; 36
    49ca:	51 f4       	brne	.+20     	; 0x49e0 <__vector_91+0x7a>
		writing = 1;
    49cc:	81 e0       	ldi	r24, 0x01	; 1
    49ce:	80 93 42 21 	sts	0x2142, r24	; 0x802142 <writing>
		pos = 0;
    49d2:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <pos>
		word_pos = 0;
    49d6:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <word_pos>
		commas = 0;
    49da:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <commas>
    49de:	5a c2       	rjmp	.+1204   	; 0x4e94 <__vector_91+0x52e>
	}
	else if(c == (uint8_t) '*'){
    49e0:	8a 32       	cpi	r24, 0x2A	; 42
    49e2:	29 f4       	brne	.+10     	; 0x49ee <__vector_91+0x88>
		commas = 0;
    49e4:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <commas>
		writing = 0;
    49e8:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <writing>
    49ec:	53 c2       	rjmp	.+1190   	; 0x4e94 <__vector_91+0x52e>
	}
	else if(c == (uint8_t) ','){
    49ee:	8c 32       	cpi	r24, 0x2C	; 44
    49f0:	09 f0       	breq	.+2      	; 0x49f4 <__vector_91+0x8e>
    49f2:	50 c2       	rjmp	.+1184   	; 0x4e94 <__vector_91+0x52e>
		gps[0] = 32;
    49f4:	e5 e9       	ldi	r30, 0x95	; 149
    49f6:	f1 e2       	ldi	r31, 0x21	; 33
    49f8:	80 e2       	ldi	r24, 0x20	; 32
    49fa:	80 83       	st	Z, r24
		if(gps[1] == 32){
    49fc:	81 81       	ldd	r24, Z+1	; 0x01
    49fe:	80 32       	cpi	r24, 0x20	; 32
    4a00:	09 f0       	breq	.+2      	; 0x4a04 <__vector_91+0x9e>
    4a02:	77 c2       	rjmp	.+1262   	; 0x4ef2 <__vector_91+0x58c>
			gps[0] = '0';
    4a04:	80 e3       	ldi	r24, 0x30	; 48
    4a06:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <gps>
    4a0a:	73 c2       	rjmp	.+1254   	; 0x4ef2 <__vector_91+0x58c>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4a0c:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <gps>
    4a10:	8e 32       	cpi	r24, 0x2E	; 46
    4a12:	09 f0       	breq	.+2      	; 0x4a16 <__vector_91+0xb0>
    4a14:	a3 c1       	rjmp	.+838    	; 0x4d5c <__vector_91+0x3f6>
    4a16:	a9 c1       	rjmp	.+850    	; 0x4d6a <__vector_91+0x404>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4a18:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <gps>
    4a1c:	8e 32       	cpi	r24, 0x2E	; 46
    4a1e:	09 f0       	breq	.+2      	; 0x4a22 <__vector_91+0xbc>
    4a20:	ef c0       	rjmp	.+478    	; 0x4c00 <__vector_91+0x29a>
    4a22:	f5 c0       	rjmp	.+490    	; 0x4c0e <__vector_91+0x2a8>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4a24:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <gps>
    4a28:	8e 32       	cpi	r24, 0x2E	; 46
    4a2a:	09 f0       	breq	.+2      	; 0x4a2e <__vector_91+0xc8>
    4a2c:	52 c0       	rjmp	.+164    	; 0x4ad2 <__vector_91+0x16c>
    4a2e:	58 c0       	rjmp	.+176    	; 0x4ae0 <__vector_91+0x17a>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4a30:	91 91       	ld	r25, Z+
    4a32:	9e 32       	cpi	r25, 0x2E	; 46
    4a34:	29 f4       	brne	.+10     	; 0x4a40 <__vector_91+0xda>
    4a36:	01 c0       	rjmp	.+2      	; 0x4a3a <__vector_91+0xd4>
    4a38:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    4a3a:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <idx>
						break;
    4a3e:	03 c0       	rjmp	.+6      	; 0x4a46 <__vector_91+0xe0>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    4a40:	8f 5f       	subi	r24, 0xFF	; 255
    4a42:	8f 30       	cpi	r24, 0x0F	; 15
    4a44:	a9 f7       	brne	.-22     	; 0x4a30 <__vector_91+0xca>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4a46:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <idx>
    4a4a:	f0 e0       	ldi	r31, 0x00	; 0
    4a4c:	eb 56       	subi	r30, 0x6B	; 107
    4a4e:	fe 4d       	sbci	r31, 0xDE	; 222
    4a50:	80 e2       	ldi	r24, 0x20	; 32
    4a52:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    4a54:	20 91 3e 21 	lds	r18, 0x213E	; 0x80213e <idx>
    4a58:	2f 5f       	subi	r18, 0xFF	; 255
    4a5a:	2f 30       	cpi	r18, 0x0F	; 15
    4a5c:	c8 f4       	brcc	.+50     	; 0x4a90 <__vector_91+0x12a>
					if(gps[i] == 32){
    4a5e:	82 2f       	mov	r24, r18
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	fc 01       	movw	r30, r24
    4a64:	eb 56       	subi	r30, 0x6B	; 107
    4a66:	fe 4d       	sbci	r31, 0xDE	; 222
    4a68:	30 81       	ld	r19, Z
    4a6a:	30 32       	cpi	r19, 0x20	; 32
    4a6c:	89 f0       	breq	.+34     	; 0x4a90 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    4a6e:	40 e2       	ldi	r20, 0x20	; 32
    4a70:	08 c0       	rjmp	.+16     	; 0x4a82 <__vector_91+0x11c>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4a72:	82 2f       	mov	r24, r18
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	fc 01       	movw	r30, r24
    4a78:	eb 56       	subi	r30, 0x6B	; 107
    4a7a:	fe 4d       	sbci	r31, 0xDE	; 222
    4a7c:	30 81       	ld	r19, Z
    4a7e:	30 32       	cpi	r19, 0x20	; 32
    4a80:	39 f0       	breq	.+14     	; 0x4a90 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    4a82:	fc 01       	movw	r30, r24
    4a84:	eb 56       	subi	r30, 0x6B	; 107
    4a86:	fe 4d       	sbci	r31, 0xDE	; 222
    4a88:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4a8a:	2f 5f       	subi	r18, 0xFF	; 255
    4a8c:	2f 30       	cpi	r18, 0x0F	; 15
    4a8e:	89 f7       	brne	.-30     	; 0x4a72 <__vector_91+0x10c>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    4a90:	ce 01       	movw	r24, r28
    4a92:	01 96       	adiw	r24, 0x01	; 1
    4a94:	9f 93       	push	r25
    4a96:	8f 93       	push	r24
    4a98:	83 e4       	ldi	r24, 0x43	; 67
    4a9a:	90 e2       	ldi	r25, 0x20	; 32
    4a9c:	9f 93       	push	r25
    4a9e:	8f 93       	push	r24
    4aa0:	85 e9       	ldi	r24, 0x95	; 149
    4aa2:	91 e2       	ldi	r25, 0x21	; 33
    4aa4:	9f 93       	push	r25
    4aa6:	8f 93       	push	r24
    4aa8:	36 d7       	rcall	.+3692   	; 0x5916 <sscanf>
				gps_t = (double) val;
    4aaa:	69 81       	ldd	r22, Y+1	; 0x01
    4aac:	7a 81       	ldd	r23, Y+2	; 0x02
    4aae:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab2:	63 d3       	rcall	.+1734   	; 0x517a <__floatsisf>
    4ab4:	60 93 1f 21 	sts	0x211F, r22	; 0x80211f <gps_t>
    4ab8:	70 93 20 21 	sts	0x2120, r23	; 0x802120 <gps_t+0x1>
    4abc:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <gps_t+0x2>
    4ac0:	90 93 22 21 	sts	0x2122, r25	; 0x802122 <gps_t+0x3>
				break;
    4ac4:	0f 90       	pop	r0
    4ac6:	0f 90       	pop	r0
    4ac8:	0f 90       	pop	r0
    4aca:	0f 90       	pop	r0
    4acc:	0f 90       	pop	r0
    4ace:	0f 90       	pop	r0
    4ad0:	c3 c1       	rjmp	.+902    	; 0x4e58 <__vector_91+0x4f2>
    4ad2:	e6 e9       	ldi	r30, 0x96	; 150
    4ad4:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    4ad6:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    4ad8:	91 91       	ld	r25, Z+
    4ada:	9e 32       	cpi	r25, 0x2E	; 46
    4adc:	29 f4       	brne	.+10     	; 0x4ae8 <__vector_91+0x182>
    4ade:	01 c0       	rjmp	.+2      	; 0x4ae2 <__vector_91+0x17c>
    4ae0:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    4ae2:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <idx>
						break;
    4ae6:	03 c0       	rjmp	.+6      	; 0x4aee <__vector_91+0x188>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    4ae8:	8f 5f       	subi	r24, 0xFF	; 255
    4aea:	8f 30       	cpi	r24, 0x0F	; 15
    4aec:	a9 f7       	brne	.-22     	; 0x4ad8 <__vector_91+0x172>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4aee:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <idx>
    4af2:	f0 e0       	ldi	r31, 0x00	; 0
    4af4:	eb 56       	subi	r30, 0x6B	; 107
    4af6:	fe 4d       	sbci	r31, 0xDE	; 222
    4af8:	80 e2       	ldi	r24, 0x20	; 32
    4afa:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    4afc:	20 91 3e 21 	lds	r18, 0x213E	; 0x80213e <idx>
    4b00:	2f 5f       	subi	r18, 0xFF	; 255
    4b02:	2f 30       	cpi	r18, 0x0F	; 15
    4b04:	08 f5       	brcc	.+66     	; 0x4b48 <__vector_91+0x1e2>
					if(gps[i] == 32){
    4b06:	82 2f       	mov	r24, r18
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	fc 01       	movw	r30, r24
    4b0c:	eb 56       	subi	r30, 0x6B	; 107
    4b0e:	fe 4d       	sbci	r31, 0xDE	; 222
    4b10:	30 81       	ld	r19, Z
    4b12:	30 32       	cpi	r19, 0x20	; 32
    4b14:	c9 f0       	breq	.+50     	; 0x4b48 <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4b16:	50 e2       	ldi	r21, 0x20	; 32
    4b18:	08 c0       	rjmp	.+16     	; 0x4b2a <__vector_91+0x1c4>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4b1a:	82 2f       	mov	r24, r18
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	fc 01       	movw	r30, r24
    4b20:	eb 56       	subi	r30, 0x6B	; 107
    4b22:	fe 4d       	sbci	r31, 0xDE	; 222
    4b24:	30 81       	ld	r19, Z
    4b26:	30 32       	cpi	r19, 0x20	; 32
    4b28:	79 f0       	breq	.+30     	; 0x4b48 <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
    4b2a:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <idx>
    4b2e:	fc 01       	movw	r30, r24
    4b30:	e4 1b       	sub	r30, r20
    4b32:	f1 09       	sbc	r31, r1
    4b34:	ed 55       	subi	r30, 0x5D	; 93
    4b36:	fe 4d       	sbci	r31, 0xDE	; 222
    4b38:	30 83       	st	Z, r19
					gps[i] = 32;
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	eb 56       	subi	r30, 0x6B	; 107
    4b3e:	fe 4d       	sbci	r31, 0xDE	; 222
    4b40:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4b42:	2f 5f       	subi	r18, 0xFF	; 255
    4b44:	2f 30       	cpi	r18, 0x0F	; 15
    4b46:	49 f7       	brne	.-46     	; 0x4b1a <__vector_91+0x1b4>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    4b48:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <dec>
    4b4c:	80 32       	cpi	r24, 0x20	; 32
    4b4e:	19 f4       	brne	.+6      	; 0x4b56 <__vector_91+0x1f0>
					dec[0] = '0';
    4b50:	80 e3       	ldi	r24, 0x30	; 48
    4b52:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <dec>
				}
				sscanf(gps,"%ld",&val);
    4b56:	ce 01       	movw	r24, r28
    4b58:	01 96       	adiw	r24, 0x01	; 1
    4b5a:	9f 93       	push	r25
    4b5c:	8f 93       	push	r24
    4b5e:	83 e4       	ldi	r24, 0x43	; 67
    4b60:	90 e2       	ldi	r25, 0x20	; 32
    4b62:	9f 93       	push	r25
    4b64:	8f 93       	push	r24
    4b66:	85 e9       	ldi	r24, 0x95	; 149
    4b68:	91 e2       	ldi	r25, 0x21	; 33
    4b6a:	9f 93       	push	r25
    4b6c:	8f 93       	push	r24
    4b6e:	d3 d6       	rcall	.+3494   	; 0x5916 <sscanf>
				sscanf(dec,"%d",&val2);
    4b70:	ce 01       	movw	r24, r28
    4b72:	05 96       	adiw	r24, 0x05	; 5
    4b74:	9f 93       	push	r25
    4b76:	8f 93       	push	r24
    4b78:	87 e4       	ldi	r24, 0x47	; 71
    4b7a:	90 e2       	ldi	r25, 0x20	; 32
    4b7c:	9f 93       	push	r25
    4b7e:	8f 93       	push	r24
    4b80:	84 ea       	ldi	r24, 0xA4	; 164
    4b82:	91 e2       	ldi	r25, 0x21	; 33
    4b84:	9f 93       	push	r25
    4b86:	8f 93       	push	r24
    4b88:	c6 d6       	rcall	.+3468   	; 0x5916 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    4b8a:	89 80       	ldd	r8, Y+1	; 0x01
    4b8c:	9a 80       	ldd	r9, Y+2	; 0x02
    4b8e:	ab 80       	ldd	r10, Y+3	; 0x03
    4b90:	bc 80       	ldd	r11, Y+4	; 0x04
    4b92:	6d 81       	ldd	r22, Y+5	; 0x05
    4b94:	7e 81       	ldd	r23, Y+6	; 0x06
    4b96:	07 2e       	mov	r0, r23
    4b98:	00 0c       	add	r0, r0
    4b9a:	88 0b       	sbc	r24, r24
    4b9c:	99 0b       	sbc	r25, r25
    4b9e:	ed d2       	rcall	.+1498   	; 0x517a <__floatsisf>
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e4       	ldi	r19, 0x40	; 64
    4ba4:	4c e1       	ldi	r20, 0x1C	; 28
    4ba6:	56 e4       	ldi	r21, 0x46	; 70
    4ba8:	4d d2       	rcall	.+1178   	; 0x5044 <__divsf3>
    4baa:	6b 01       	movw	r12, r22
    4bac:	7c 01       	movw	r14, r24
    4bae:	c5 01       	movw	r24, r10
    4bb0:	b4 01       	movw	r22, r8
    4bb2:	24 e6       	ldi	r18, 0x64	; 100
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	40 e0       	ldi	r20, 0x00	; 0
    4bb8:	50 e0       	ldi	r21, 0x00	; 0
    4bba:	b3 d5       	rcall	.+2918   	; 0x5722 <__divmodsi4>
    4bbc:	49 01       	movw	r8, r18
    4bbe:	5a 01       	movw	r10, r20
    4bc0:	dc d2       	rcall	.+1464   	; 0x517a <__floatsisf>
    4bc2:	9b 01       	movw	r18, r22
    4bc4:	ac 01       	movw	r20, r24
    4bc6:	c7 01       	movw	r24, r14
    4bc8:	b6 01       	movw	r22, r12
    4bca:	d4 d1       	rcall	.+936    	; 0x4f74 <__addsf3>
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	40 e7       	ldi	r20, 0x70	; 112
    4bd2:	52 e4       	ldi	r21, 0x42	; 66
    4bd4:	37 d2       	rcall	.+1134   	; 0x5044 <__divsf3>
    4bd6:	6b 01       	movw	r12, r22
    4bd8:	7c 01       	movw	r14, r24
    4bda:	c5 01       	movw	r24, r10
    4bdc:	b4 01       	movw	r22, r8
    4bde:	cd d2       	rcall	.+1434   	; 0x517a <__floatsisf>
    4be0:	9b 01       	movw	r18, r22
    4be2:	ac 01       	movw	r20, r24
    4be4:	c7 01       	movw	r24, r14
    4be6:	b6 01       	movw	r22, r12
    4be8:	c5 d1       	rcall	.+906    	; 0x4f74 <__addsf3>
    4bea:	60 93 1b 21 	sts	0x211B, r22	; 0x80211b <gps_lat>
    4bee:	70 93 1c 21 	sts	0x211C, r23	; 0x80211c <gps_lat+0x1>
    4bf2:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <gps_lat+0x2>
    4bf6:	90 93 1e 21 	sts	0x211E, r25	; 0x80211e <gps_lat+0x3>
				break;
    4bfa:	cd bf       	out	0x3d, r28	; 61
    4bfc:	de bf       	out	0x3e, r29	; 62
    4bfe:	2c c1       	rjmp	.+600    	; 0x4e58 <__vector_91+0x4f2>
    4c00:	e6 e9       	ldi	r30, 0x96	; 150
    4c02:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    4c04:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    4c06:	91 91       	ld	r25, Z+
    4c08:	9e 32       	cpi	r25, 0x2E	; 46
    4c0a:	29 f4       	brne	.+10     	; 0x4c16 <__vector_91+0x2b0>
    4c0c:	01 c0       	rjmp	.+2      	; 0x4c10 <__vector_91+0x2aa>
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    4c10:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <idx>
						break;
    4c14:	03 c0       	rjmp	.+6      	; 0x4c1c <__vector_91+0x2b6>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    4c16:	8f 5f       	subi	r24, 0xFF	; 255
    4c18:	8f 30       	cpi	r24, 0x0F	; 15
    4c1a:	a9 f7       	brne	.-22     	; 0x4c06 <__vector_91+0x2a0>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4c1c:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <idx>
    4c20:	f0 e0       	ldi	r31, 0x00	; 0
    4c22:	eb 56       	subi	r30, 0x6B	; 107
    4c24:	fe 4d       	sbci	r31, 0xDE	; 222
    4c26:	80 e2       	ldi	r24, 0x20	; 32
    4c28:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    4c2a:	20 91 3e 21 	lds	r18, 0x213E	; 0x80213e <idx>
    4c2e:	2f 5f       	subi	r18, 0xFF	; 255
    4c30:	2f 30       	cpi	r18, 0x0F	; 15
    4c32:	08 f5       	brcc	.+66     	; 0x4c76 <__vector_91+0x310>
					if(gps[i] == 32){
    4c34:	82 2f       	mov	r24, r18
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	fc 01       	movw	r30, r24
    4c3a:	eb 56       	subi	r30, 0x6B	; 107
    4c3c:	fe 4d       	sbci	r31, 0xDE	; 222
    4c3e:	30 81       	ld	r19, Z
    4c40:	30 32       	cpi	r19, 0x20	; 32
    4c42:	c9 f0       	breq	.+50     	; 0x4c76 <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4c44:	50 e2       	ldi	r21, 0x20	; 32
    4c46:	08 c0       	rjmp	.+16     	; 0x4c58 <__vector_91+0x2f2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4c48:	82 2f       	mov	r24, r18
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	fc 01       	movw	r30, r24
    4c4e:	eb 56       	subi	r30, 0x6B	; 107
    4c50:	fe 4d       	sbci	r31, 0xDE	; 222
    4c52:	30 81       	ld	r19, Z
    4c54:	30 32       	cpi	r19, 0x20	; 32
    4c56:	79 f0       	breq	.+30     	; 0x4c76 <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
    4c58:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <idx>
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	e4 1b       	sub	r30, r20
    4c60:	f1 09       	sbc	r31, r1
    4c62:	ed 55       	subi	r30, 0x5D	; 93
    4c64:	fe 4d       	sbci	r31, 0xDE	; 222
    4c66:	30 83       	st	Z, r19
					gps[i] = 32;
    4c68:	fc 01       	movw	r30, r24
    4c6a:	eb 56       	subi	r30, 0x6B	; 107
    4c6c:	fe 4d       	sbci	r31, 0xDE	; 222
    4c6e:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4c70:	2f 5f       	subi	r18, 0xFF	; 255
    4c72:	2f 30       	cpi	r18, 0x0F	; 15
    4c74:	49 f7       	brne	.-46     	; 0x4c48 <__vector_91+0x2e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    4c76:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <dec>
    4c7a:	80 32       	cpi	r24, 0x20	; 32
    4c7c:	19 f4       	brne	.+6      	; 0x4c84 <__vector_91+0x31e>
					dec[0] = '0';
    4c7e:	80 e3       	ldi	r24, 0x30	; 48
    4c80:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <dec>
				}
				sscanf(gps,"%ld",&val);
    4c84:	ce 01       	movw	r24, r28
    4c86:	01 96       	adiw	r24, 0x01	; 1
    4c88:	9f 93       	push	r25
    4c8a:	8f 93       	push	r24
    4c8c:	83 e4       	ldi	r24, 0x43	; 67
    4c8e:	90 e2       	ldi	r25, 0x20	; 32
    4c90:	9f 93       	push	r25
    4c92:	8f 93       	push	r24
    4c94:	85 e9       	ldi	r24, 0x95	; 149
    4c96:	91 e2       	ldi	r25, 0x21	; 33
    4c98:	9f 93       	push	r25
    4c9a:	8f 93       	push	r24
    4c9c:	3c d6       	rcall	.+3192   	; 0x5916 <sscanf>
				sscanf(dec,"%d",&val2);
    4c9e:	ce 01       	movw	r24, r28
    4ca0:	05 96       	adiw	r24, 0x05	; 5
    4ca2:	9f 93       	push	r25
    4ca4:	8f 93       	push	r24
    4ca6:	87 e4       	ldi	r24, 0x47	; 71
    4ca8:	90 e2       	ldi	r25, 0x20	; 32
    4caa:	9f 93       	push	r25
    4cac:	8f 93       	push	r24
    4cae:	84 ea       	ldi	r24, 0xA4	; 164
    4cb0:	91 e2       	ldi	r25, 0x21	; 33
    4cb2:	9f 93       	push	r25
    4cb4:	8f 93       	push	r24
    4cb6:	2f d6       	rcall	.+3166   	; 0x5916 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    4cb8:	89 80       	ldd	r8, Y+1	; 0x01
    4cba:	9a 80       	ldd	r9, Y+2	; 0x02
    4cbc:	ab 80       	ldd	r10, Y+3	; 0x03
    4cbe:	bc 80       	ldd	r11, Y+4	; 0x04
    4cc0:	6d 81       	ldd	r22, Y+5	; 0x05
    4cc2:	7e 81       	ldd	r23, Y+6	; 0x06
    4cc4:	07 2e       	mov	r0, r23
    4cc6:	00 0c       	add	r0, r0
    4cc8:	88 0b       	sbc	r24, r24
    4cca:	99 0b       	sbc	r25, r25
    4ccc:	56 d2       	rcall	.+1196   	; 0x517a <__floatsisf>
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e4       	ldi	r19, 0x40	; 64
    4cd2:	4c e1       	ldi	r20, 0x1C	; 28
    4cd4:	56 e4       	ldi	r21, 0x46	; 70
    4cd6:	b6 d1       	rcall	.+876    	; 0x5044 <__divsf3>
    4cd8:	6b 01       	movw	r12, r22
    4cda:	7c 01       	movw	r14, r24
    4cdc:	c5 01       	movw	r24, r10
    4cde:	b4 01       	movw	r22, r8
    4ce0:	24 e6       	ldi	r18, 0x64	; 100
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	40 e0       	ldi	r20, 0x00	; 0
    4ce6:	50 e0       	ldi	r21, 0x00	; 0
    4ce8:	1c d5       	rcall	.+2616   	; 0x5722 <__divmodsi4>
    4cea:	49 01       	movw	r8, r18
    4cec:	5a 01       	movw	r10, r20
    4cee:	45 d2       	rcall	.+1162   	; 0x517a <__floatsisf>
    4cf0:	9b 01       	movw	r18, r22
    4cf2:	ac 01       	movw	r20, r24
    4cf4:	c7 01       	movw	r24, r14
    4cf6:	b6 01       	movw	r22, r12
    4cf8:	3d d1       	rcall	.+634    	; 0x4f74 <__addsf3>
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	40 e7       	ldi	r20, 0x70	; 112
    4d00:	52 e4       	ldi	r21, 0x42	; 66
    4d02:	a0 d1       	rcall	.+832    	; 0x5044 <__divsf3>
    4d04:	6b 01       	movw	r12, r22
    4d06:	7c 01       	movw	r14, r24
    4d08:	c5 01       	movw	r24, r10
    4d0a:	b4 01       	movw	r22, r8
    4d0c:	36 d2       	rcall	.+1132   	; 0x517a <__floatsisf>
    4d0e:	9b 01       	movw	r18, r22
    4d10:	ac 01       	movw	r20, r24
    4d12:	c7 01       	movw	r24, r14
    4d14:	b6 01       	movw	r22, r12
    4d16:	2e d1       	rcall	.+604    	; 0x4f74 <__addsf3>
    4d18:	dc 01       	movw	r26, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	b0 58       	subi	r27, 0x80	; 128
    4d1e:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <gps_long>
    4d22:	90 93 18 21 	sts	0x2118, r25	; 0x802118 <gps_long+0x1>
    4d26:	a0 93 19 21 	sts	0x2119, r26	; 0x802119 <gps_long+0x2>
    4d2a:	b0 93 1a 21 	sts	0x211A, r27	; 0x80211a <gps_long+0x3>
    4d2e:	cd bf       	out	0x3d, r28	; 61
				break;
    4d30:	de bf       	out	0x3e, r29	; 62
    4d32:	92 c0       	rjmp	.+292    	; 0x4e58 <__vector_91+0x4f2>
    4d34:	81 e1       	ldi	r24, 0x11	; 17
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    4d36:	91 e2       	ldi	r25, 0x21	; 33
    4d38:	9f 93       	push	r25
    4d3a:	8f 93       	push	r24
    4d3c:	87 e4       	ldi	r24, 0x47	; 71
    4d3e:	90 e2       	ldi	r25, 0x20	; 32
    4d40:	9f 93       	push	r25
    4d42:	8f 93       	push	r24
    4d44:	85 e9       	ldi	r24, 0x95	; 149
    4d46:	91 e2       	ldi	r25, 0x21	; 33
    4d48:	9f 93       	push	r25
    4d4a:	8f 93       	push	r24
    4d4c:	e4 d5       	rcall	.+3016   	; 0x5916 <sscanf>
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
				break;
    4d52:	0f 90       	pop	r0
    4d54:	0f 90       	pop	r0
    4d56:	0f 90       	pop	r0
    4d58:	0f 90       	pop	r0
    4d5a:	7e c0       	rjmp	.+252    	; 0x4e58 <__vector_91+0x4f2>
    4d5c:	e6 e9       	ldi	r30, 0x96	; 150
    4d5e:	f1 e2       	ldi	r31, 0x21	; 33
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4d64:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    4d66:	29 f4       	brne	.+10     	; 0x4d72 <__vector_91+0x40c>
    4d68:	01 c0       	rjmp	.+2      	; 0x4d6c <__vector_91+0x406>
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <idx>
						idx = i;
    4d70:	03 c0       	rjmp	.+6      	; 0x4d78 <__vector_91+0x412>
    4d72:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    4d74:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4d76:	a9 f7       	brne	.-22     	; 0x4d62 <__vector_91+0x3fc>
    4d78:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4d7c:	f0 e0       	ldi	r31, 0x00	; 0
    4d7e:	eb 56       	subi	r30, 0x6B	; 107
    4d80:	fe 4d       	sbci	r31, 0xDE	; 222
    4d82:	80 e2       	ldi	r24, 0x20	; 32
    4d84:	80 83       	st	Z, r24
    4d86:	20 91 3e 21 	lds	r18, 0x213E	; 0x80213e <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    4d8a:	2f 5f       	subi	r18, 0xFF	; 255
    4d8c:	2f 30       	cpi	r18, 0x0F	; 15
    4d8e:	08 f5       	brcc	.+66     	; 0x4dd2 <__vector_91+0x46c>
    4d90:	82 2f       	mov	r24, r18
    4d92:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    4d94:	fc 01       	movw	r30, r24
    4d96:	eb 56       	subi	r30, 0x6B	; 107
    4d98:	fe 4d       	sbci	r31, 0xDE	; 222
    4d9a:	30 81       	ld	r19, Z
    4d9c:	30 32       	cpi	r19, 0x20	; 32
    4d9e:	c9 f0       	breq	.+50     	; 0x4dd2 <__vector_91+0x46c>
    4da0:	50 e2       	ldi	r21, 0x20	; 32
    4da2:	08 c0       	rjmp	.+16     	; 0x4db4 <__vector_91+0x44e>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4da4:	82 2f       	mov	r24, r18
    4da6:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4da8:	fc 01       	movw	r30, r24
    4daa:	eb 56       	subi	r30, 0x6B	; 107
    4dac:	fe 4d       	sbci	r31, 0xDE	; 222
    4dae:	30 81       	ld	r19, Z
    4db0:	30 32       	cpi	r19, 0x20	; 32
    4db2:	79 f0       	breq	.+30     	; 0x4dd2 <__vector_91+0x46c>
    4db4:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    4db8:	fc 01       	movw	r30, r24
    4dba:	e4 1b       	sub	r30, r20
    4dbc:	f1 09       	sbc	r31, r1
    4dbe:	ed 55       	subi	r30, 0x5D	; 93
    4dc0:	fe 4d       	sbci	r31, 0xDE	; 222
    4dc2:	30 83       	st	Z, r19
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	eb 56       	subi	r30, 0x6B	; 107
					gps[i] = 32;
    4dc8:	fe 4d       	sbci	r31, 0xDE	; 222
    4dca:	50 83       	st	Z, r21
    4dcc:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    4dce:	2f 30       	cpi	r18, 0x0F	; 15
    4dd0:	49 f7       	brne	.-46     	; 0x4da4 <__vector_91+0x43e>
    4dd2:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    4dd6:	80 32       	cpi	r24, 0x20	; 32
    4dd8:	19 f4       	brne	.+6      	; 0x4de0 <__vector_91+0x47a>
    4dda:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    4ddc:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <dec>
    4de0:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    4de2:	01 96       	adiw	r24, 0x01	; 1
    4de4:	9f 93       	push	r25
    4de6:	8f 93       	push	r24
    4de8:	83 e4       	ldi	r24, 0x43	; 67
    4dea:	90 e2       	ldi	r25, 0x20	; 32
    4dec:	9f 93       	push	r25
    4dee:	8f 93       	push	r24
    4df0:	85 e9       	ldi	r24, 0x95	; 149
    4df2:	91 e2       	ldi	r25, 0x21	; 33
    4df4:	9f 93       	push	r25
    4df6:	8f 93       	push	r24
    4df8:	8e d5       	rcall	.+2844   	; 0x5916 <sscanf>
				sscanf(dec,"%d",&val2);
    4dfa:	ce 01       	movw	r24, r28
    4dfc:	05 96       	adiw	r24, 0x05	; 5
    4dfe:	9f 93       	push	r25
    4e00:	8f 93       	push	r24
    4e02:	87 e4       	ldi	r24, 0x47	; 71
    4e04:	90 e2       	ldi	r25, 0x20	; 32
    4e06:	9f 93       	push	r25
    4e08:	8f 93       	push	r24
    4e0a:	84 ea       	ldi	r24, 0xA4	; 164
    4e0c:	91 e2       	ldi	r25, 0x21	; 33
    4e0e:	9f 93       	push	r25
    4e10:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    4e12:	81 d5       	rcall	.+2818   	; 0x5916 <sscanf>
    4e14:	69 81       	ldd	r22, Y+1	; 0x01
    4e16:	7a 81       	ldd	r23, Y+2	; 0x02
    4e18:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e1c:	ae d1       	rcall	.+860    	; 0x517a <__floatsisf>
    4e1e:	6b 01       	movw	r12, r22
    4e20:	7c 01       	movw	r14, r24
    4e22:	6d 81       	ldd	r22, Y+5	; 0x05
    4e24:	7e 81       	ldd	r23, Y+6	; 0x06
    4e26:	07 2e       	mov	r0, r23
    4e28:	00 0c       	add	r0, r0
    4e2a:	88 0b       	sbc	r24, r24
    4e2c:	99 0b       	sbc	r25, r25
    4e2e:	a5 d1       	rcall	.+842    	; 0x517a <__floatsisf>
    4e30:	20 e0       	ldi	r18, 0x00	; 0
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	40 e2       	ldi	r20, 0x20	; 32
    4e36:	51 e4       	ldi	r21, 0x41	; 65
    4e38:	05 d1       	rcall	.+522    	; 0x5044 <__divsf3>
    4e3a:	9b 01       	movw	r18, r22
    4e3c:	ac 01       	movw	r20, r24
    4e3e:	c7 01       	movw	r24, r14
    4e40:	b6 01       	movw	r22, r12
    4e42:	98 d0       	rcall	.+304    	; 0x4f74 <__addsf3>
    4e44:	60 93 13 21 	sts	0x2113, r22	; 0x802113 <gps_alt>
    4e48:	70 93 14 21 	sts	0x2114, r23	; 0x802114 <gps_alt+0x1>
    4e4c:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <gps_alt+0x2>
    4e50:	90 93 16 21 	sts	0x2116, r25	; 0x802116 <gps_alt+0x3>
    4e54:	cd bf       	out	0x3d, r28	; 61
    4e56:	de bf       	out	0x3e, r29	; 62
    4e58:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <writing>
				break;
    4e5c:	88 23       	and	r24, r24
		}

		if(writing){
    4e5e:	d1 f0       	breq	.+52     	; 0x4e94 <__vector_91+0x52e>
    4e60:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <idx>
    4e64:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <commas>
			idx = 0;
    4e68:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    4e6a:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <commas>
    4e6e:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <word_pos>
    4e72:	e5 e9       	ldi	r30, 0x95	; 149
			word_pos = 0;
    4e74:	f1 e2       	ldi	r31, 0x21	; 33
    4e76:	24 ea       	ldi	r18, 0xA4	; 164
    4e78:	31 e2       	ldi	r19, 0x21	; 33
    4e7a:	80 e2       	ldi	r24, 0x20	; 32
    4e7c:	81 93       	st	Z+, r24
    4e7e:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    4e80:	3f 07       	cpc	r19, r31
    4e82:	e1 f7       	brne	.-8      	; 0x4e7c <__vector_91+0x516>

		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    4e84:	e4 ea       	ldi	r30, 0xA4	; 164
    4e86:	f1 e2       	ldi	r31, 0x21	; 33
    4e88:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    4e8a:	80 83       	st	Z, r24
    4e8c:	81 83       	std	Z+1, r24	; 0x01
    4e8e:	82 83       	std	Z+2, r24	; 0x02
    4e90:	83 83       	std	Z+3, r24	; 0x03
    4e92:	84 83       	std	Z+4, r24	; 0x04
    4e94:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <writing>
    4e98:	88 23       	and	r24, r24
			}
		}
	}

	if(writing){
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <__vector_91+0x538>
    4e9c:	43 c0       	rjmp	.+134    	; 0x4f24 <__vector_91+0x5be>
    4e9e:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <pos>
    4ea2:	83 30       	cpi	r24, 0x03	; 3
		switch(pos){
    4ea4:	19 f0       	breq	.+6      	; 0x4eac <__vector_91+0x546>
    4ea6:	84 30       	cpi	r24, 0x04	; 4
    4ea8:	31 f0       	breq	.+12     	; 0x4eb6 <__vector_91+0x550>
    4eaa:	09 c0       	rjmp	.+18     	; 0x4ebe <__vector_91+0x558>
    4eac:	17 34       	cpi	r17, 0x47	; 71
    4eae:	39 f0       	breq	.+14     	; 0x4ebe <__vector_91+0x558>
    4eb0:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <writing>
			case 3:
				if(c != 'G'){
    4eb4:	04 c0       	rjmp	.+8      	; 0x4ebe <__vector_91+0x558>
					writing = 0;
    4eb6:	17 34       	cpi	r17, 0x47	; 71
    4eb8:	11 f0       	breq	.+4      	; 0x4ebe <__vector_91+0x558>
    4eba:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <writing>
				}
				break;

			case 4:
				if(c != 'G'){
    4ebe:	e0 91 40 21 	lds	r30, 0x2140	; 0x802140 <word_pos>
					writing = 0;
    4ec2:	f0 e0       	ldi	r31, 0x00	; 0
				}
				break;
		}
		gps[word_pos] = c;
    4ec4:	eb 56       	subi	r30, 0x6B	; 107
    4ec6:	fe 4d       	sbci	r31, 0xDE	; 222
    4ec8:	10 83       	st	Z, r17
    4eca:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <word_pos>
    4ece:	8f 5f       	subi	r24, 0xFF	; 255
		word_pos++;
    4ed0:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <word_pos>
    4ed4:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <pos>
    4ed8:	8f 5f       	subi	r24, 0xFF	; 255
		pos++;
    4eda:	80 93 41 21 	sts	0x2141, r24	; 0x802141 <pos>
    4ede:	22 c0       	rjmp	.+68     	; 0x4f24 <__vector_91+0x5be>
    4ee0:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <gps>
	}
    4ee4:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4ee6:	09 f4       	brne	.+2      	; 0x4eea <__vector_91+0x584>
    4ee8:	a7 cd       	rjmp	.-1202   	; 0x4a38 <__vector_91+0xd2>
    4eea:	e6 e9       	ldi	r30, 0x96	; 150
    4eec:	f1 e2       	ldi	r31, 0x21	; 33
    4eee:	81 e0       	ldi	r24, 0x01	; 1
    4ef0:	9f cd       	rjmp	.-1218   	; 0x4a30 <__vector_91+0xca>
    4ef2:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    4ef4:	1a 82       	std	Y+2, r1	; 0x02
    4ef6:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    4ef8:	1c 82       	std	Y+4, r1	; 0x04
    4efa:	1d 82       	std	Y+5, r1	; 0x05
    4efc:	1e 82       	std	Y+6, r1	; 0x06
    4efe:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <commas>
		int16_t val2 = 0;
    4f02:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    4f04:	09 f4       	brne	.+2      	; 0x4f08 <__vector_91+0x5a2>
    4f06:	88 cd       	rjmp	.-1264   	; 0x4a18 <__vector_91+0xb2>
    4f08:	30 f4       	brcc	.+12     	; 0x4f16 <__vector_91+0x5b0>
    4f0a:	81 30       	cpi	r24, 0x01	; 1
    4f0c:	49 f3       	breq	.-46     	; 0x4ee0 <__vector_91+0x57a>
    4f0e:	82 30       	cpi	r24, 0x02	; 2
    4f10:	09 f4       	brne	.+2      	; 0x4f14 <__vector_91+0x5ae>
    4f12:	88 cd       	rjmp	.-1264   	; 0x4a24 <__vector_91+0xbe>
    4f14:	a1 cf       	rjmp	.-190    	; 0x4e58 <__vector_91+0x4f2>
    4f16:	87 30       	cpi	r24, 0x07	; 7
    4f18:	09 f4       	brne	.+2      	; 0x4f1c <__vector_91+0x5b6>
    4f1a:	0c cf       	rjmp	.-488    	; 0x4d34 <__vector_91+0x3ce>
    4f1c:	89 30       	cpi	r24, 0x09	; 9
    4f1e:	09 f4       	brne	.+2      	; 0x4f22 <__vector_91+0x5bc>
    4f20:	75 cd       	rjmp	.-1302   	; 0x4a0c <__vector_91+0xa6>
    4f22:	9a cf       	rjmp	.-204    	; 0x4e58 <__vector_91+0x4f2>
    4f24:	26 96       	adiw	r28, 0x06	; 6
    4f26:	cd bf       	out	0x3d, r28	; 61
    4f28:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
    4f2a:	df 91       	pop	r29
    4f2c:	cf 91       	pop	r28
    4f2e:	ff 91       	pop	r31
    4f30:	ef 91       	pop	r30
    4f32:	bf 91       	pop	r27
    4f34:	af 91       	pop	r26
    4f36:	9f 91       	pop	r25
    4f38:	8f 91       	pop	r24
    4f3a:	7f 91       	pop	r23
    4f3c:	6f 91       	pop	r22
    4f3e:	5f 91       	pop	r21
    4f40:	4f 91       	pop	r20
    4f42:	3f 91       	pop	r19
    4f44:	2f 91       	pop	r18
    4f46:	1f 91       	pop	r17
    4f48:	ff 90       	pop	r15
    4f4a:	ef 90       	pop	r14
    4f4c:	df 90       	pop	r13
    4f4e:	cf 90       	pop	r12
    4f50:	bf 90       	pop	r11
    4f52:	af 90       	pop	r10
    4f54:	9f 90       	pop	r9
    4f56:	8f 90       	pop	r8
    4f58:	0f 90       	pop	r0
    4f5a:	0b be       	out	0x3b, r0	; 59
    4f5c:	0f 90       	pop	r0
    4f5e:	0a be       	out	0x3a, r0	; 58
    4f60:	0f 90       	pop	r0
    4f62:	09 be       	out	0x39, r0	; 57
    4f64:	0f 90       	pop	r0
    4f66:	08 be       	out	0x38, r0	; 56
    4f68:	0f 90       	pop	r0
    4f6a:	0f be       	out	0x3f, r0	; 63
    4f6c:	0f 90       	pop	r0
    4f6e:	1f 90       	pop	r1
    4f70:	18 95       	reti

00004f72 <__subsf3>:
    4f72:	50 58       	subi	r21, 0x80	; 128

00004f74 <__addsf3>:
    4f74:	bb 27       	eor	r27, r27
    4f76:	aa 27       	eor	r26, r26
    4f78:	0e d0       	rcall	.+28     	; 0x4f96 <__addsf3x>
    4f7a:	75 c1       	rjmp	.+746    	; 0x5266 <__fp_round>
    4f7c:	66 d1       	rcall	.+716    	; 0x524a <__fp_pscA>
    4f7e:	30 f0       	brcs	.+12     	; 0x4f8c <__addsf3+0x18>
    4f80:	6b d1       	rcall	.+726    	; 0x5258 <__fp_pscB>
    4f82:	20 f0       	brcs	.+8      	; 0x4f8c <__addsf3+0x18>
    4f84:	31 f4       	brne	.+12     	; 0x4f92 <__addsf3+0x1e>
    4f86:	9f 3f       	cpi	r25, 0xFF	; 255
    4f88:	11 f4       	brne	.+4      	; 0x4f8e <__addsf3+0x1a>
    4f8a:	1e f4       	brtc	.+6      	; 0x4f92 <__addsf3+0x1e>
    4f8c:	5b c1       	rjmp	.+694    	; 0x5244 <__fp_nan>
    4f8e:	0e f4       	brtc	.+2      	; 0x4f92 <__addsf3+0x1e>
    4f90:	e0 95       	com	r30
    4f92:	e7 fb       	bst	r30, 7
    4f94:	51 c1       	rjmp	.+674    	; 0x5238 <__fp_inf>

00004f96 <__addsf3x>:
    4f96:	e9 2f       	mov	r30, r25
    4f98:	77 d1       	rcall	.+750    	; 0x5288 <__fp_split3>
    4f9a:	80 f3       	brcs	.-32     	; 0x4f7c <__addsf3+0x8>
    4f9c:	ba 17       	cp	r27, r26
    4f9e:	62 07       	cpc	r22, r18
    4fa0:	73 07       	cpc	r23, r19
    4fa2:	84 07       	cpc	r24, r20
    4fa4:	95 07       	cpc	r25, r21
    4fa6:	18 f0       	brcs	.+6      	; 0x4fae <__addsf3x+0x18>
    4fa8:	71 f4       	brne	.+28     	; 0x4fc6 <__addsf3x+0x30>
    4faa:	9e f5       	brtc	.+102    	; 0x5012 <__addsf3x+0x7c>
    4fac:	8f c1       	rjmp	.+798    	; 0x52cc <__fp_zero>
    4fae:	0e f4       	brtc	.+2      	; 0x4fb2 <__addsf3x+0x1c>
    4fb0:	e0 95       	com	r30
    4fb2:	0b 2e       	mov	r0, r27
    4fb4:	ba 2f       	mov	r27, r26
    4fb6:	a0 2d       	mov	r26, r0
    4fb8:	0b 01       	movw	r0, r22
    4fba:	b9 01       	movw	r22, r18
    4fbc:	90 01       	movw	r18, r0
    4fbe:	0c 01       	movw	r0, r24
    4fc0:	ca 01       	movw	r24, r20
    4fc2:	a0 01       	movw	r20, r0
    4fc4:	11 24       	eor	r1, r1
    4fc6:	ff 27       	eor	r31, r31
    4fc8:	59 1b       	sub	r21, r25
    4fca:	99 f0       	breq	.+38     	; 0x4ff2 <__addsf3x+0x5c>
    4fcc:	59 3f       	cpi	r21, 0xF9	; 249
    4fce:	50 f4       	brcc	.+20     	; 0x4fe4 <__addsf3x+0x4e>
    4fd0:	50 3e       	cpi	r21, 0xE0	; 224
    4fd2:	68 f1       	brcs	.+90     	; 0x502e <__addsf3x+0x98>
    4fd4:	1a 16       	cp	r1, r26
    4fd6:	f0 40       	sbci	r31, 0x00	; 0
    4fd8:	a2 2f       	mov	r26, r18
    4fda:	23 2f       	mov	r18, r19
    4fdc:	34 2f       	mov	r19, r20
    4fde:	44 27       	eor	r20, r20
    4fe0:	58 5f       	subi	r21, 0xF8	; 248
    4fe2:	f3 cf       	rjmp	.-26     	; 0x4fca <__addsf3x+0x34>
    4fe4:	46 95       	lsr	r20
    4fe6:	37 95       	ror	r19
    4fe8:	27 95       	ror	r18
    4fea:	a7 95       	ror	r26
    4fec:	f0 40       	sbci	r31, 0x00	; 0
    4fee:	53 95       	inc	r21
    4ff0:	c9 f7       	brne	.-14     	; 0x4fe4 <__addsf3x+0x4e>
    4ff2:	7e f4       	brtc	.+30     	; 0x5012 <__addsf3x+0x7c>
    4ff4:	1f 16       	cp	r1, r31
    4ff6:	ba 0b       	sbc	r27, r26
    4ff8:	62 0b       	sbc	r22, r18
    4ffa:	73 0b       	sbc	r23, r19
    4ffc:	84 0b       	sbc	r24, r20
    4ffe:	ba f0       	brmi	.+46     	; 0x502e <__addsf3x+0x98>
    5000:	91 50       	subi	r25, 0x01	; 1
    5002:	a1 f0       	breq	.+40     	; 0x502c <__addsf3x+0x96>
    5004:	ff 0f       	add	r31, r31
    5006:	bb 1f       	adc	r27, r27
    5008:	66 1f       	adc	r22, r22
    500a:	77 1f       	adc	r23, r23
    500c:	88 1f       	adc	r24, r24
    500e:	c2 f7       	brpl	.-16     	; 0x5000 <__addsf3x+0x6a>
    5010:	0e c0       	rjmp	.+28     	; 0x502e <__addsf3x+0x98>
    5012:	ba 0f       	add	r27, r26
    5014:	62 1f       	adc	r22, r18
    5016:	73 1f       	adc	r23, r19
    5018:	84 1f       	adc	r24, r20
    501a:	48 f4       	brcc	.+18     	; 0x502e <__addsf3x+0x98>
    501c:	87 95       	ror	r24
    501e:	77 95       	ror	r23
    5020:	67 95       	ror	r22
    5022:	b7 95       	ror	r27
    5024:	f7 95       	ror	r31
    5026:	9e 3f       	cpi	r25, 0xFE	; 254
    5028:	08 f0       	brcs	.+2      	; 0x502c <__addsf3x+0x96>
    502a:	b3 cf       	rjmp	.-154    	; 0x4f92 <__addsf3+0x1e>
    502c:	93 95       	inc	r25
    502e:	88 0f       	add	r24, r24
    5030:	08 f0       	brcs	.+2      	; 0x5034 <__addsf3x+0x9e>
    5032:	99 27       	eor	r25, r25
    5034:	ee 0f       	add	r30, r30
    5036:	97 95       	ror	r25
    5038:	87 95       	ror	r24
    503a:	08 95       	ret

0000503c <__cmpsf2>:
    503c:	d9 d0       	rcall	.+434    	; 0x51f0 <__fp_cmp>
    503e:	08 f4       	brcc	.+2      	; 0x5042 <__cmpsf2+0x6>
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	08 95       	ret

00005044 <__divsf3>:
    5044:	0c d0       	rcall	.+24     	; 0x505e <__divsf3x>
    5046:	0f c1       	rjmp	.+542    	; 0x5266 <__fp_round>
    5048:	07 d1       	rcall	.+526    	; 0x5258 <__fp_pscB>
    504a:	40 f0       	brcs	.+16     	; 0x505c <__divsf3+0x18>
    504c:	fe d0       	rcall	.+508    	; 0x524a <__fp_pscA>
    504e:	30 f0       	brcs	.+12     	; 0x505c <__divsf3+0x18>
    5050:	21 f4       	brne	.+8      	; 0x505a <__divsf3+0x16>
    5052:	5f 3f       	cpi	r21, 0xFF	; 255
    5054:	19 f0       	breq	.+6      	; 0x505c <__divsf3+0x18>
    5056:	f0 c0       	rjmp	.+480    	; 0x5238 <__fp_inf>
    5058:	51 11       	cpse	r21, r1
    505a:	39 c1       	rjmp	.+626    	; 0x52ce <__fp_szero>
    505c:	f3 c0       	rjmp	.+486    	; 0x5244 <__fp_nan>

0000505e <__divsf3x>:
    505e:	14 d1       	rcall	.+552    	; 0x5288 <__fp_split3>
    5060:	98 f3       	brcs	.-26     	; 0x5048 <__divsf3+0x4>

00005062 <__divsf3_pse>:
    5062:	99 23       	and	r25, r25
    5064:	c9 f3       	breq	.-14     	; 0x5058 <__divsf3+0x14>
    5066:	55 23       	and	r21, r21
    5068:	b1 f3       	breq	.-20     	; 0x5056 <__divsf3+0x12>
    506a:	95 1b       	sub	r25, r21
    506c:	55 0b       	sbc	r21, r21
    506e:	bb 27       	eor	r27, r27
    5070:	aa 27       	eor	r26, r26
    5072:	62 17       	cp	r22, r18
    5074:	73 07       	cpc	r23, r19
    5076:	84 07       	cpc	r24, r20
    5078:	38 f0       	brcs	.+14     	; 0x5088 <__divsf3_pse+0x26>
    507a:	9f 5f       	subi	r25, 0xFF	; 255
    507c:	5f 4f       	sbci	r21, 0xFF	; 255
    507e:	22 0f       	add	r18, r18
    5080:	33 1f       	adc	r19, r19
    5082:	44 1f       	adc	r20, r20
    5084:	aa 1f       	adc	r26, r26
    5086:	a9 f3       	breq	.-22     	; 0x5072 <__divsf3_pse+0x10>
    5088:	33 d0       	rcall	.+102    	; 0x50f0 <__divsf3_pse+0x8e>
    508a:	0e 2e       	mov	r0, r30
    508c:	3a f0       	brmi	.+14     	; 0x509c <__divsf3_pse+0x3a>
    508e:	e0 e8       	ldi	r30, 0x80	; 128
    5090:	30 d0       	rcall	.+96     	; 0x50f2 <__divsf3_pse+0x90>
    5092:	91 50       	subi	r25, 0x01	; 1
    5094:	50 40       	sbci	r21, 0x00	; 0
    5096:	e6 95       	lsr	r30
    5098:	00 1c       	adc	r0, r0
    509a:	ca f7       	brpl	.-14     	; 0x508e <__divsf3_pse+0x2c>
    509c:	29 d0       	rcall	.+82     	; 0x50f0 <__divsf3_pse+0x8e>
    509e:	fe 2f       	mov	r31, r30
    50a0:	27 d0       	rcall	.+78     	; 0x50f0 <__divsf3_pse+0x8e>
    50a2:	66 0f       	add	r22, r22
    50a4:	77 1f       	adc	r23, r23
    50a6:	88 1f       	adc	r24, r24
    50a8:	bb 1f       	adc	r27, r27
    50aa:	26 17       	cp	r18, r22
    50ac:	37 07       	cpc	r19, r23
    50ae:	48 07       	cpc	r20, r24
    50b0:	ab 07       	cpc	r26, r27
    50b2:	b0 e8       	ldi	r27, 0x80	; 128
    50b4:	09 f0       	breq	.+2      	; 0x50b8 <__divsf3_pse+0x56>
    50b6:	bb 0b       	sbc	r27, r27
    50b8:	80 2d       	mov	r24, r0
    50ba:	bf 01       	movw	r22, r30
    50bc:	ff 27       	eor	r31, r31
    50be:	93 58       	subi	r25, 0x83	; 131
    50c0:	5f 4f       	sbci	r21, 0xFF	; 255
    50c2:	2a f0       	brmi	.+10     	; 0x50ce <__divsf3_pse+0x6c>
    50c4:	9e 3f       	cpi	r25, 0xFE	; 254
    50c6:	51 05       	cpc	r21, r1
    50c8:	68 f0       	brcs	.+26     	; 0x50e4 <__divsf3_pse+0x82>
    50ca:	b6 c0       	rjmp	.+364    	; 0x5238 <__fp_inf>
    50cc:	00 c1       	rjmp	.+512    	; 0x52ce <__fp_szero>
    50ce:	5f 3f       	cpi	r21, 0xFF	; 255
    50d0:	ec f3       	brlt	.-6      	; 0x50cc <__divsf3_pse+0x6a>
    50d2:	98 3e       	cpi	r25, 0xE8	; 232
    50d4:	dc f3       	brlt	.-10     	; 0x50cc <__divsf3_pse+0x6a>
    50d6:	86 95       	lsr	r24
    50d8:	77 95       	ror	r23
    50da:	67 95       	ror	r22
    50dc:	b7 95       	ror	r27
    50de:	f7 95       	ror	r31
    50e0:	9f 5f       	subi	r25, 0xFF	; 255
    50e2:	c9 f7       	brne	.-14     	; 0x50d6 <__divsf3_pse+0x74>
    50e4:	88 0f       	add	r24, r24
    50e6:	91 1d       	adc	r25, r1
    50e8:	96 95       	lsr	r25
    50ea:	87 95       	ror	r24
    50ec:	97 f9       	bld	r25, 7
    50ee:	08 95       	ret
    50f0:	e1 e0       	ldi	r30, 0x01	; 1
    50f2:	66 0f       	add	r22, r22
    50f4:	77 1f       	adc	r23, r23
    50f6:	88 1f       	adc	r24, r24
    50f8:	bb 1f       	adc	r27, r27
    50fa:	62 17       	cp	r22, r18
    50fc:	73 07       	cpc	r23, r19
    50fe:	84 07       	cpc	r24, r20
    5100:	ba 07       	cpc	r27, r26
    5102:	20 f0       	brcs	.+8      	; 0x510c <__divsf3_pse+0xaa>
    5104:	62 1b       	sub	r22, r18
    5106:	73 0b       	sbc	r23, r19
    5108:	84 0b       	sbc	r24, r20
    510a:	ba 0b       	sbc	r27, r26
    510c:	ee 1f       	adc	r30, r30
    510e:	88 f7       	brcc	.-30     	; 0x50f2 <__divsf3_pse+0x90>
    5110:	e0 95       	com	r30
    5112:	08 95       	ret

00005114 <__fixsfsi>:
    5114:	04 d0       	rcall	.+8      	; 0x511e <__fixunssfsi>
    5116:	68 94       	set
    5118:	b1 11       	cpse	r27, r1
    511a:	d9 c0       	rjmp	.+434    	; 0x52ce <__fp_szero>
    511c:	08 95       	ret

0000511e <__fixunssfsi>:
    511e:	bc d0       	rcall	.+376    	; 0x5298 <__fp_splitA>
    5120:	88 f0       	brcs	.+34     	; 0x5144 <__fixunssfsi+0x26>
    5122:	9f 57       	subi	r25, 0x7F	; 127
    5124:	90 f0       	brcs	.+36     	; 0x514a <__fixunssfsi+0x2c>
    5126:	b9 2f       	mov	r27, r25
    5128:	99 27       	eor	r25, r25
    512a:	b7 51       	subi	r27, 0x17	; 23
    512c:	a0 f0       	brcs	.+40     	; 0x5156 <__fixunssfsi+0x38>
    512e:	d1 f0       	breq	.+52     	; 0x5164 <__fixunssfsi+0x46>
    5130:	66 0f       	add	r22, r22
    5132:	77 1f       	adc	r23, r23
    5134:	88 1f       	adc	r24, r24
    5136:	99 1f       	adc	r25, r25
    5138:	1a f0       	brmi	.+6      	; 0x5140 <__fixunssfsi+0x22>
    513a:	ba 95       	dec	r27
    513c:	c9 f7       	brne	.-14     	; 0x5130 <__fixunssfsi+0x12>
    513e:	12 c0       	rjmp	.+36     	; 0x5164 <__fixunssfsi+0x46>
    5140:	b1 30       	cpi	r27, 0x01	; 1
    5142:	81 f0       	breq	.+32     	; 0x5164 <__fixunssfsi+0x46>
    5144:	c3 d0       	rcall	.+390    	; 0x52cc <__fp_zero>
    5146:	b1 e0       	ldi	r27, 0x01	; 1
    5148:	08 95       	ret
    514a:	c0 c0       	rjmp	.+384    	; 0x52cc <__fp_zero>
    514c:	67 2f       	mov	r22, r23
    514e:	78 2f       	mov	r23, r24
    5150:	88 27       	eor	r24, r24
    5152:	b8 5f       	subi	r27, 0xF8	; 248
    5154:	39 f0       	breq	.+14     	; 0x5164 <__fixunssfsi+0x46>
    5156:	b9 3f       	cpi	r27, 0xF9	; 249
    5158:	cc f3       	brlt	.-14     	; 0x514c <__fixunssfsi+0x2e>
    515a:	86 95       	lsr	r24
    515c:	77 95       	ror	r23
    515e:	67 95       	ror	r22
    5160:	b3 95       	inc	r27
    5162:	d9 f7       	brne	.-10     	; 0x515a <__fixunssfsi+0x3c>
    5164:	3e f4       	brtc	.+14     	; 0x5174 <__fixunssfsi+0x56>
    5166:	90 95       	com	r25
    5168:	80 95       	com	r24
    516a:	70 95       	com	r23
    516c:	61 95       	neg	r22
    516e:	7f 4f       	sbci	r23, 0xFF	; 255
    5170:	8f 4f       	sbci	r24, 0xFF	; 255
    5172:	9f 4f       	sbci	r25, 0xFF	; 255
    5174:	08 95       	ret

00005176 <__floatunsisf>:
    5176:	e8 94       	clt
    5178:	09 c0       	rjmp	.+18     	; 0x518c <__floatsisf+0x12>

0000517a <__floatsisf>:
    517a:	97 fb       	bst	r25, 7
    517c:	3e f4       	brtc	.+14     	; 0x518c <__floatsisf+0x12>
    517e:	90 95       	com	r25
    5180:	80 95       	com	r24
    5182:	70 95       	com	r23
    5184:	61 95       	neg	r22
    5186:	7f 4f       	sbci	r23, 0xFF	; 255
    5188:	8f 4f       	sbci	r24, 0xFF	; 255
    518a:	9f 4f       	sbci	r25, 0xFF	; 255
    518c:	99 23       	and	r25, r25
    518e:	a9 f0       	breq	.+42     	; 0x51ba <__floatsisf+0x40>
    5190:	f9 2f       	mov	r31, r25
    5192:	96 e9       	ldi	r25, 0x96	; 150
    5194:	bb 27       	eor	r27, r27
    5196:	93 95       	inc	r25
    5198:	f6 95       	lsr	r31
    519a:	87 95       	ror	r24
    519c:	77 95       	ror	r23
    519e:	67 95       	ror	r22
    51a0:	b7 95       	ror	r27
    51a2:	f1 11       	cpse	r31, r1
    51a4:	f8 cf       	rjmp	.-16     	; 0x5196 <__floatsisf+0x1c>
    51a6:	fa f4       	brpl	.+62     	; 0x51e6 <__floatsisf+0x6c>
    51a8:	bb 0f       	add	r27, r27
    51aa:	11 f4       	brne	.+4      	; 0x51b0 <__floatsisf+0x36>
    51ac:	60 ff       	sbrs	r22, 0
    51ae:	1b c0       	rjmp	.+54     	; 0x51e6 <__floatsisf+0x6c>
    51b0:	6f 5f       	subi	r22, 0xFF	; 255
    51b2:	7f 4f       	sbci	r23, 0xFF	; 255
    51b4:	8f 4f       	sbci	r24, 0xFF	; 255
    51b6:	9f 4f       	sbci	r25, 0xFF	; 255
    51b8:	16 c0       	rjmp	.+44     	; 0x51e6 <__floatsisf+0x6c>
    51ba:	88 23       	and	r24, r24
    51bc:	11 f0       	breq	.+4      	; 0x51c2 <__floatsisf+0x48>
    51be:	96 e9       	ldi	r25, 0x96	; 150
    51c0:	11 c0       	rjmp	.+34     	; 0x51e4 <__floatsisf+0x6a>
    51c2:	77 23       	and	r23, r23
    51c4:	21 f0       	breq	.+8      	; 0x51ce <__floatsisf+0x54>
    51c6:	9e e8       	ldi	r25, 0x8E	; 142
    51c8:	87 2f       	mov	r24, r23
    51ca:	76 2f       	mov	r23, r22
    51cc:	05 c0       	rjmp	.+10     	; 0x51d8 <__floatsisf+0x5e>
    51ce:	66 23       	and	r22, r22
    51d0:	71 f0       	breq	.+28     	; 0x51ee <__floatsisf+0x74>
    51d2:	96 e8       	ldi	r25, 0x86	; 134
    51d4:	86 2f       	mov	r24, r22
    51d6:	70 e0       	ldi	r23, 0x00	; 0
    51d8:	60 e0       	ldi	r22, 0x00	; 0
    51da:	2a f0       	brmi	.+10     	; 0x51e6 <__floatsisf+0x6c>
    51dc:	9a 95       	dec	r25
    51de:	66 0f       	add	r22, r22
    51e0:	77 1f       	adc	r23, r23
    51e2:	88 1f       	adc	r24, r24
    51e4:	da f7       	brpl	.-10     	; 0x51dc <__floatsisf+0x62>
    51e6:	88 0f       	add	r24, r24
    51e8:	96 95       	lsr	r25
    51ea:	87 95       	ror	r24
    51ec:	97 f9       	bld	r25, 7
    51ee:	08 95       	ret

000051f0 <__fp_cmp>:
    51f0:	99 0f       	add	r25, r25
    51f2:	00 08       	sbc	r0, r0
    51f4:	55 0f       	add	r21, r21
    51f6:	aa 0b       	sbc	r26, r26
    51f8:	e0 e8       	ldi	r30, 0x80	; 128
    51fa:	fe ef       	ldi	r31, 0xFE	; 254
    51fc:	16 16       	cp	r1, r22
    51fe:	17 06       	cpc	r1, r23
    5200:	e8 07       	cpc	r30, r24
    5202:	f9 07       	cpc	r31, r25
    5204:	c0 f0       	brcs	.+48     	; 0x5236 <__fp_cmp+0x46>
    5206:	12 16       	cp	r1, r18
    5208:	13 06       	cpc	r1, r19
    520a:	e4 07       	cpc	r30, r20
    520c:	f5 07       	cpc	r31, r21
    520e:	98 f0       	brcs	.+38     	; 0x5236 <__fp_cmp+0x46>
    5210:	62 1b       	sub	r22, r18
    5212:	73 0b       	sbc	r23, r19
    5214:	84 0b       	sbc	r24, r20
    5216:	95 0b       	sbc	r25, r21
    5218:	39 f4       	brne	.+14     	; 0x5228 <__fp_cmp+0x38>
    521a:	0a 26       	eor	r0, r26
    521c:	61 f0       	breq	.+24     	; 0x5236 <__fp_cmp+0x46>
    521e:	23 2b       	or	r18, r19
    5220:	24 2b       	or	r18, r20
    5222:	25 2b       	or	r18, r21
    5224:	21 f4       	brne	.+8      	; 0x522e <__fp_cmp+0x3e>
    5226:	08 95       	ret
    5228:	0a 26       	eor	r0, r26
    522a:	09 f4       	brne	.+2      	; 0x522e <__fp_cmp+0x3e>
    522c:	a1 40       	sbci	r26, 0x01	; 1
    522e:	a6 95       	lsr	r26
    5230:	8f ef       	ldi	r24, 0xFF	; 255
    5232:	81 1d       	adc	r24, r1
    5234:	81 1d       	adc	r24, r1
    5236:	08 95       	ret

00005238 <__fp_inf>:
    5238:	97 f9       	bld	r25, 7
    523a:	9f 67       	ori	r25, 0x7F	; 127
    523c:	80 e8       	ldi	r24, 0x80	; 128
    523e:	70 e0       	ldi	r23, 0x00	; 0
    5240:	60 e0       	ldi	r22, 0x00	; 0
    5242:	08 95       	ret

00005244 <__fp_nan>:
    5244:	9f ef       	ldi	r25, 0xFF	; 255
    5246:	80 ec       	ldi	r24, 0xC0	; 192
    5248:	08 95       	ret

0000524a <__fp_pscA>:
    524a:	00 24       	eor	r0, r0
    524c:	0a 94       	dec	r0
    524e:	16 16       	cp	r1, r22
    5250:	17 06       	cpc	r1, r23
    5252:	18 06       	cpc	r1, r24
    5254:	09 06       	cpc	r0, r25
    5256:	08 95       	ret

00005258 <__fp_pscB>:
    5258:	00 24       	eor	r0, r0
    525a:	0a 94       	dec	r0
    525c:	12 16       	cp	r1, r18
    525e:	13 06       	cpc	r1, r19
    5260:	14 06       	cpc	r1, r20
    5262:	05 06       	cpc	r0, r21
    5264:	08 95       	ret

00005266 <__fp_round>:
    5266:	09 2e       	mov	r0, r25
    5268:	03 94       	inc	r0
    526a:	00 0c       	add	r0, r0
    526c:	11 f4       	brne	.+4      	; 0x5272 <__fp_round+0xc>
    526e:	88 23       	and	r24, r24
    5270:	52 f0       	brmi	.+20     	; 0x5286 <__fp_round+0x20>
    5272:	bb 0f       	add	r27, r27
    5274:	40 f4       	brcc	.+16     	; 0x5286 <__fp_round+0x20>
    5276:	bf 2b       	or	r27, r31
    5278:	11 f4       	brne	.+4      	; 0x527e <__fp_round+0x18>
    527a:	60 ff       	sbrs	r22, 0
    527c:	04 c0       	rjmp	.+8      	; 0x5286 <__fp_round+0x20>
    527e:	6f 5f       	subi	r22, 0xFF	; 255
    5280:	7f 4f       	sbci	r23, 0xFF	; 255
    5282:	8f 4f       	sbci	r24, 0xFF	; 255
    5284:	9f 4f       	sbci	r25, 0xFF	; 255
    5286:	08 95       	ret

00005288 <__fp_split3>:
    5288:	57 fd       	sbrc	r21, 7
    528a:	90 58       	subi	r25, 0x80	; 128
    528c:	44 0f       	add	r20, r20
    528e:	55 1f       	adc	r21, r21
    5290:	59 f0       	breq	.+22     	; 0x52a8 <__fp_splitA+0x10>
    5292:	5f 3f       	cpi	r21, 0xFF	; 255
    5294:	71 f0       	breq	.+28     	; 0x52b2 <__fp_splitA+0x1a>
    5296:	47 95       	ror	r20

00005298 <__fp_splitA>:
    5298:	88 0f       	add	r24, r24
    529a:	97 fb       	bst	r25, 7
    529c:	99 1f       	adc	r25, r25
    529e:	61 f0       	breq	.+24     	; 0x52b8 <__fp_splitA+0x20>
    52a0:	9f 3f       	cpi	r25, 0xFF	; 255
    52a2:	79 f0       	breq	.+30     	; 0x52c2 <__fp_splitA+0x2a>
    52a4:	87 95       	ror	r24
    52a6:	08 95       	ret
    52a8:	12 16       	cp	r1, r18
    52aa:	13 06       	cpc	r1, r19
    52ac:	14 06       	cpc	r1, r20
    52ae:	55 1f       	adc	r21, r21
    52b0:	f2 cf       	rjmp	.-28     	; 0x5296 <__fp_split3+0xe>
    52b2:	46 95       	lsr	r20
    52b4:	f1 df       	rcall	.-30     	; 0x5298 <__fp_splitA>
    52b6:	08 c0       	rjmp	.+16     	; 0x52c8 <__fp_splitA+0x30>
    52b8:	16 16       	cp	r1, r22
    52ba:	17 06       	cpc	r1, r23
    52bc:	18 06       	cpc	r1, r24
    52be:	99 1f       	adc	r25, r25
    52c0:	f1 cf       	rjmp	.-30     	; 0x52a4 <__fp_splitA+0xc>
    52c2:	86 95       	lsr	r24
    52c4:	71 05       	cpc	r23, r1
    52c6:	61 05       	cpc	r22, r1
    52c8:	08 94       	sec
    52ca:	08 95       	ret

000052cc <__fp_zero>:
    52cc:	e8 94       	clt

000052ce <__fp_szero>:
    52ce:	bb 27       	eor	r27, r27
    52d0:	66 27       	eor	r22, r22
    52d2:	77 27       	eor	r23, r23
    52d4:	cb 01       	movw	r24, r22
    52d6:	97 f9       	bld	r25, 7
    52d8:	08 95       	ret

000052da <__gesf2>:
    52da:	8a df       	rcall	.-236    	; 0x51f0 <__fp_cmp>
    52dc:	08 f4       	brcc	.+2      	; 0x52e0 <__gesf2+0x6>
    52de:	8f ef       	ldi	r24, 0xFF	; 255
    52e0:	08 95       	ret

000052e2 <__mulsf3>:
    52e2:	0b d0       	rcall	.+22     	; 0x52fa <__mulsf3x>
    52e4:	c0 cf       	rjmp	.-128    	; 0x5266 <__fp_round>
    52e6:	b1 df       	rcall	.-158    	; 0x524a <__fp_pscA>
    52e8:	28 f0       	brcs	.+10     	; 0x52f4 <__mulsf3+0x12>
    52ea:	b6 df       	rcall	.-148    	; 0x5258 <__fp_pscB>
    52ec:	18 f0       	brcs	.+6      	; 0x52f4 <__mulsf3+0x12>
    52ee:	95 23       	and	r25, r21
    52f0:	09 f0       	breq	.+2      	; 0x52f4 <__mulsf3+0x12>
    52f2:	a2 cf       	rjmp	.-188    	; 0x5238 <__fp_inf>
    52f4:	a7 cf       	rjmp	.-178    	; 0x5244 <__fp_nan>
    52f6:	11 24       	eor	r1, r1
    52f8:	ea cf       	rjmp	.-44     	; 0x52ce <__fp_szero>

000052fa <__mulsf3x>:
    52fa:	c6 df       	rcall	.-116    	; 0x5288 <__fp_split3>
    52fc:	a0 f3       	brcs	.-24     	; 0x52e6 <__mulsf3+0x4>

000052fe <__mulsf3_pse>:
    52fe:	95 9f       	mul	r25, r21
    5300:	d1 f3       	breq	.-12     	; 0x52f6 <__mulsf3+0x14>
    5302:	95 0f       	add	r25, r21
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	55 1f       	adc	r21, r21
    5308:	62 9f       	mul	r22, r18
    530a:	f0 01       	movw	r30, r0
    530c:	72 9f       	mul	r23, r18
    530e:	bb 27       	eor	r27, r27
    5310:	f0 0d       	add	r31, r0
    5312:	b1 1d       	adc	r27, r1
    5314:	63 9f       	mul	r22, r19
    5316:	aa 27       	eor	r26, r26
    5318:	f0 0d       	add	r31, r0
    531a:	b1 1d       	adc	r27, r1
    531c:	aa 1f       	adc	r26, r26
    531e:	64 9f       	mul	r22, r20
    5320:	66 27       	eor	r22, r22
    5322:	b0 0d       	add	r27, r0
    5324:	a1 1d       	adc	r26, r1
    5326:	66 1f       	adc	r22, r22
    5328:	82 9f       	mul	r24, r18
    532a:	22 27       	eor	r18, r18
    532c:	b0 0d       	add	r27, r0
    532e:	a1 1d       	adc	r26, r1
    5330:	62 1f       	adc	r22, r18
    5332:	73 9f       	mul	r23, r19
    5334:	b0 0d       	add	r27, r0
    5336:	a1 1d       	adc	r26, r1
    5338:	62 1f       	adc	r22, r18
    533a:	83 9f       	mul	r24, r19
    533c:	a0 0d       	add	r26, r0
    533e:	61 1d       	adc	r22, r1
    5340:	22 1f       	adc	r18, r18
    5342:	74 9f       	mul	r23, r20
    5344:	33 27       	eor	r19, r19
    5346:	a0 0d       	add	r26, r0
    5348:	61 1d       	adc	r22, r1
    534a:	23 1f       	adc	r18, r19
    534c:	84 9f       	mul	r24, r20
    534e:	60 0d       	add	r22, r0
    5350:	21 1d       	adc	r18, r1
    5352:	82 2f       	mov	r24, r18
    5354:	76 2f       	mov	r23, r22
    5356:	6a 2f       	mov	r22, r26
    5358:	11 24       	eor	r1, r1
    535a:	9f 57       	subi	r25, 0x7F	; 127
    535c:	50 40       	sbci	r21, 0x00	; 0
    535e:	8a f0       	brmi	.+34     	; 0x5382 <__mulsf3_pse+0x84>
    5360:	e1 f0       	breq	.+56     	; 0x539a <__mulsf3_pse+0x9c>
    5362:	88 23       	and	r24, r24
    5364:	4a f0       	brmi	.+18     	; 0x5378 <__mulsf3_pse+0x7a>
    5366:	ee 0f       	add	r30, r30
    5368:	ff 1f       	adc	r31, r31
    536a:	bb 1f       	adc	r27, r27
    536c:	66 1f       	adc	r22, r22
    536e:	77 1f       	adc	r23, r23
    5370:	88 1f       	adc	r24, r24
    5372:	91 50       	subi	r25, 0x01	; 1
    5374:	50 40       	sbci	r21, 0x00	; 0
    5376:	a9 f7       	brne	.-22     	; 0x5362 <__mulsf3_pse+0x64>
    5378:	9e 3f       	cpi	r25, 0xFE	; 254
    537a:	51 05       	cpc	r21, r1
    537c:	70 f0       	brcs	.+28     	; 0x539a <__mulsf3_pse+0x9c>
    537e:	5c cf       	rjmp	.-328    	; 0x5238 <__fp_inf>
    5380:	a6 cf       	rjmp	.-180    	; 0x52ce <__fp_szero>
    5382:	5f 3f       	cpi	r21, 0xFF	; 255
    5384:	ec f3       	brlt	.-6      	; 0x5380 <__mulsf3_pse+0x82>
    5386:	98 3e       	cpi	r25, 0xE8	; 232
    5388:	dc f3       	brlt	.-10     	; 0x5380 <__mulsf3_pse+0x82>
    538a:	86 95       	lsr	r24
    538c:	77 95       	ror	r23
    538e:	67 95       	ror	r22
    5390:	b7 95       	ror	r27
    5392:	f7 95       	ror	r31
    5394:	e7 95       	ror	r30
    5396:	9f 5f       	subi	r25, 0xFF	; 255
    5398:	c1 f7       	brne	.-16     	; 0x538a <__mulsf3_pse+0x8c>
    539a:	fe 2b       	or	r31, r30
    539c:	88 0f       	add	r24, r24
    539e:	91 1d       	adc	r25, r1
    53a0:	96 95       	lsr	r25
    53a2:	87 95       	ror	r24
    53a4:	97 f9       	bld	r25, 7
    53a6:	08 95       	ret

000053a8 <pow>:
    53a8:	fa 01       	movw	r30, r20
    53aa:	ee 0f       	add	r30, r30
    53ac:	ff 1f       	adc	r31, r31
    53ae:	30 96       	adiw	r30, 0x00	; 0
    53b0:	21 05       	cpc	r18, r1
    53b2:	31 05       	cpc	r19, r1
    53b4:	99 f1       	breq	.+102    	; 0x541c <pow+0x74>
    53b6:	61 15       	cp	r22, r1
    53b8:	71 05       	cpc	r23, r1
    53ba:	61 f4       	brne	.+24     	; 0x53d4 <pow+0x2c>
    53bc:	80 38       	cpi	r24, 0x80	; 128
    53be:	bf e3       	ldi	r27, 0x3F	; 63
    53c0:	9b 07       	cpc	r25, r27
    53c2:	49 f1       	breq	.+82     	; 0x5416 <pow+0x6e>
    53c4:	68 94       	set
    53c6:	90 38       	cpi	r25, 0x80	; 128
    53c8:	81 05       	cpc	r24, r1
    53ca:	61 f0       	breq	.+24     	; 0x53e4 <pow+0x3c>
    53cc:	80 38       	cpi	r24, 0x80	; 128
    53ce:	bf ef       	ldi	r27, 0xFF	; 255
    53d0:	9b 07       	cpc	r25, r27
    53d2:	41 f0       	breq	.+16     	; 0x53e4 <pow+0x3c>
    53d4:	99 23       	and	r25, r25
    53d6:	42 f5       	brpl	.+80     	; 0x5428 <pow+0x80>
    53d8:	ff 3f       	cpi	r31, 0xFF	; 255
    53da:	e1 05       	cpc	r30, r1
    53dc:	31 05       	cpc	r19, r1
    53de:	21 05       	cpc	r18, r1
    53e0:	11 f1       	breq	.+68     	; 0x5426 <pow+0x7e>
    53e2:	e8 94       	clt
    53e4:	08 94       	sec
    53e6:	e7 95       	ror	r30
    53e8:	d9 01       	movw	r26, r18
    53ea:	aa 23       	and	r26, r26
    53ec:	29 f4       	brne	.+10     	; 0x53f8 <pow+0x50>
    53ee:	ab 2f       	mov	r26, r27
    53f0:	be 2f       	mov	r27, r30
    53f2:	f8 5f       	subi	r31, 0xF8	; 248
    53f4:	d0 f3       	brcs	.-12     	; 0x53ea <pow+0x42>
    53f6:	10 c0       	rjmp	.+32     	; 0x5418 <pow+0x70>
    53f8:	ff 5f       	subi	r31, 0xFF	; 255
    53fa:	70 f4       	brcc	.+28     	; 0x5418 <pow+0x70>
    53fc:	a6 95       	lsr	r26
    53fe:	e0 f7       	brcc	.-8      	; 0x53f8 <pow+0x50>
    5400:	f7 39       	cpi	r31, 0x97	; 151
    5402:	50 f0       	brcs	.+20     	; 0x5418 <pow+0x70>
    5404:	19 f0       	breq	.+6      	; 0x540c <pow+0x64>
    5406:	ff 3a       	cpi	r31, 0xAF	; 175
    5408:	38 f4       	brcc	.+14     	; 0x5418 <pow+0x70>
    540a:	9f 77       	andi	r25, 0x7F	; 127
    540c:	9f 93       	push	r25
    540e:	0c d0       	rcall	.+24     	; 0x5428 <pow+0x80>
    5410:	0f 90       	pop	r0
    5412:	07 fc       	sbrc	r0, 7
    5414:	90 58       	subi	r25, 0x80	; 128
    5416:	08 95       	ret
    5418:	3e f0       	brts	.+14     	; 0x5428 <pow+0x80>
    541a:	14 cf       	rjmp	.-472    	; 0x5244 <__fp_nan>
    541c:	60 e0       	ldi	r22, 0x00	; 0
    541e:	70 e0       	ldi	r23, 0x00	; 0
    5420:	80 e8       	ldi	r24, 0x80	; 128
    5422:	9f e3       	ldi	r25, 0x3F	; 63
    5424:	08 95       	ret
    5426:	4f e7       	ldi	r20, 0x7F	; 127
    5428:	9f 77       	andi	r25, 0x7F	; 127
    542a:	5f 93       	push	r21
    542c:	4f 93       	push	r20
    542e:	3f 93       	push	r19
    5430:	2f 93       	push	r18
    5432:	9e d0       	rcall	.+316    	; 0x5570 <log>
    5434:	2f 91       	pop	r18
    5436:	3f 91       	pop	r19
    5438:	4f 91       	pop	r20
    543a:	5f 91       	pop	r21
    543c:	52 df       	rcall	.-348    	; 0x52e2 <__mulsf3>
    543e:	05 c0       	rjmp	.+10     	; 0x544a <exp>
    5440:	19 f4       	brne	.+6      	; 0x5448 <pow+0xa0>
    5442:	0e f0       	brts	.+2      	; 0x5446 <pow+0x9e>
    5444:	f9 ce       	rjmp	.-526    	; 0x5238 <__fp_inf>
    5446:	42 cf       	rjmp	.-380    	; 0x52cc <__fp_zero>
    5448:	fd ce       	rjmp	.-518    	; 0x5244 <__fp_nan>

0000544a <exp>:
    544a:	26 df       	rcall	.-436    	; 0x5298 <__fp_splitA>
    544c:	c8 f3       	brcs	.-14     	; 0x5440 <pow+0x98>
    544e:	96 38       	cpi	r25, 0x86	; 134
    5450:	c0 f7       	brcc	.-16     	; 0x5442 <pow+0x9a>
    5452:	07 f8       	bld	r0, 7
    5454:	0f 92       	push	r0
    5456:	e8 94       	clt
    5458:	2b e3       	ldi	r18, 0x3B	; 59
    545a:	3a ea       	ldi	r19, 0xAA	; 170
    545c:	48 eb       	ldi	r20, 0xB8	; 184
    545e:	5f e7       	ldi	r21, 0x7F	; 127
    5460:	4e df       	rcall	.-356    	; 0x52fe <__mulsf3_pse>
    5462:	0f 92       	push	r0
    5464:	0f 92       	push	r0
    5466:	0f 92       	push	r0
    5468:	4d b7       	in	r20, 0x3d	; 61
    546a:	5e b7       	in	r21, 0x3e	; 62
    546c:	0f 92       	push	r0
    546e:	c0 d0       	rcall	.+384    	; 0x55f0 <modf>
    5470:	e2 e2       	ldi	r30, 0x22	; 34
    5472:	f2 e0       	ldi	r31, 0x02	; 2
    5474:	16 d0       	rcall	.+44     	; 0x54a2 <__fp_powser>
    5476:	4f 91       	pop	r20
    5478:	5f 91       	pop	r21
    547a:	ef 91       	pop	r30
    547c:	ff 91       	pop	r31
    547e:	e5 95       	asr	r30
    5480:	ee 1f       	adc	r30, r30
    5482:	ff 1f       	adc	r31, r31
    5484:	49 f0       	breq	.+18     	; 0x5498 <exp+0x4e>
    5486:	fe 57       	subi	r31, 0x7E	; 126
    5488:	e0 68       	ori	r30, 0x80	; 128
    548a:	44 27       	eor	r20, r20
    548c:	ee 0f       	add	r30, r30
    548e:	44 1f       	adc	r20, r20
    5490:	fa 95       	dec	r31
    5492:	e1 f7       	brne	.-8      	; 0x548c <exp+0x42>
    5494:	41 95       	neg	r20
    5496:	55 0b       	sbc	r21, r21
    5498:	32 d0       	rcall	.+100    	; 0x54fe <ldexp>
    549a:	0f 90       	pop	r0
    549c:	07 fe       	sbrs	r0, 7
    549e:	26 c0       	rjmp	.+76     	; 0x54ec <inverse>
    54a0:	08 95       	ret

000054a2 <__fp_powser>:
    54a2:	df 93       	push	r29
    54a4:	cf 93       	push	r28
    54a6:	1f 93       	push	r17
    54a8:	0f 93       	push	r16
    54aa:	ff 92       	push	r15
    54ac:	ef 92       	push	r14
    54ae:	df 92       	push	r13
    54b0:	7b 01       	movw	r14, r22
    54b2:	8c 01       	movw	r16, r24
    54b4:	68 94       	set
    54b6:	05 c0       	rjmp	.+10     	; 0x54c2 <__fp_powser+0x20>
    54b8:	da 2e       	mov	r13, r26
    54ba:	ef 01       	movw	r28, r30
    54bc:	1e df       	rcall	.-452    	; 0x52fa <__mulsf3x>
    54be:	fe 01       	movw	r30, r28
    54c0:	e8 94       	clt
    54c2:	a5 91       	lpm	r26, Z+
    54c4:	25 91       	lpm	r18, Z+
    54c6:	35 91       	lpm	r19, Z+
    54c8:	45 91       	lpm	r20, Z+
    54ca:	55 91       	lpm	r21, Z+
    54cc:	ae f3       	brts	.-22     	; 0x54b8 <__fp_powser+0x16>
    54ce:	ef 01       	movw	r28, r30
    54d0:	62 dd       	rcall	.-1340   	; 0x4f96 <__addsf3x>
    54d2:	fe 01       	movw	r30, r28
    54d4:	97 01       	movw	r18, r14
    54d6:	a8 01       	movw	r20, r16
    54d8:	da 94       	dec	r13
    54da:	79 f7       	brne	.-34     	; 0x54ba <__fp_powser+0x18>
    54dc:	df 90       	pop	r13
    54de:	ef 90       	pop	r14
    54e0:	ff 90       	pop	r15
    54e2:	0f 91       	pop	r16
    54e4:	1f 91       	pop	r17
    54e6:	cf 91       	pop	r28
    54e8:	df 91       	pop	r29
    54ea:	08 95       	ret

000054ec <inverse>:
    54ec:	9b 01       	movw	r18, r22
    54ee:	ac 01       	movw	r20, r24
    54f0:	60 e0       	ldi	r22, 0x00	; 0
    54f2:	70 e0       	ldi	r23, 0x00	; 0
    54f4:	80 e8       	ldi	r24, 0x80	; 128
    54f6:	9f e3       	ldi	r25, 0x3F	; 63
    54f8:	a5 cd       	rjmp	.-1206   	; 0x5044 <__divsf3>
    54fa:	9e ce       	rjmp	.-708    	; 0x5238 <__fp_inf>
    54fc:	ac c0       	rjmp	.+344    	; 0x5656 <__fp_mpack>

000054fe <ldexp>:
    54fe:	cc de       	rcall	.-616    	; 0x5298 <__fp_splitA>
    5500:	e8 f3       	brcs	.-6      	; 0x54fc <inverse+0x10>
    5502:	99 23       	and	r25, r25
    5504:	d9 f3       	breq	.-10     	; 0x54fc <inverse+0x10>
    5506:	94 0f       	add	r25, r20
    5508:	51 1d       	adc	r21, r1
    550a:	bb f3       	brvs	.-18     	; 0x54fa <inverse+0xe>
    550c:	91 50       	subi	r25, 0x01	; 1
    550e:	50 40       	sbci	r21, 0x00	; 0
    5510:	94 f0       	brlt	.+36     	; 0x5536 <ldexp+0x38>
    5512:	59 f0       	breq	.+22     	; 0x552a <ldexp+0x2c>
    5514:	88 23       	and	r24, r24
    5516:	32 f0       	brmi	.+12     	; 0x5524 <ldexp+0x26>
    5518:	66 0f       	add	r22, r22
    551a:	77 1f       	adc	r23, r23
    551c:	88 1f       	adc	r24, r24
    551e:	91 50       	subi	r25, 0x01	; 1
    5520:	50 40       	sbci	r21, 0x00	; 0
    5522:	c1 f7       	brne	.-16     	; 0x5514 <ldexp+0x16>
    5524:	9e 3f       	cpi	r25, 0xFE	; 254
    5526:	51 05       	cpc	r21, r1
    5528:	44 f7       	brge	.-48     	; 0x54fa <inverse+0xe>
    552a:	88 0f       	add	r24, r24
    552c:	91 1d       	adc	r25, r1
    552e:	96 95       	lsr	r25
    5530:	87 95       	ror	r24
    5532:	97 f9       	bld	r25, 7
    5534:	08 95       	ret
    5536:	5f 3f       	cpi	r21, 0xFF	; 255
    5538:	ac f0       	brlt	.+42     	; 0x5564 <ldexp+0x66>
    553a:	98 3e       	cpi	r25, 0xE8	; 232
    553c:	9c f0       	brlt	.+38     	; 0x5564 <ldexp+0x66>
    553e:	bb 27       	eor	r27, r27
    5540:	86 95       	lsr	r24
    5542:	77 95       	ror	r23
    5544:	67 95       	ror	r22
    5546:	b7 95       	ror	r27
    5548:	08 f4       	brcc	.+2      	; 0x554c <ldexp+0x4e>
    554a:	b1 60       	ori	r27, 0x01	; 1
    554c:	93 95       	inc	r25
    554e:	c1 f7       	brne	.-16     	; 0x5540 <ldexp+0x42>
    5550:	bb 0f       	add	r27, r27
    5552:	58 f7       	brcc	.-42     	; 0x552a <ldexp+0x2c>
    5554:	11 f4       	brne	.+4      	; 0x555a <ldexp+0x5c>
    5556:	60 ff       	sbrs	r22, 0
    5558:	e8 cf       	rjmp	.-48     	; 0x552a <ldexp+0x2c>
    555a:	6f 5f       	subi	r22, 0xFF	; 255
    555c:	7f 4f       	sbci	r23, 0xFF	; 255
    555e:	8f 4f       	sbci	r24, 0xFF	; 255
    5560:	9f 4f       	sbci	r25, 0xFF	; 255
    5562:	e3 cf       	rjmp	.-58     	; 0x552a <ldexp+0x2c>
    5564:	b4 ce       	rjmp	.-664    	; 0x52ce <__fp_szero>
    5566:	0e f0       	brts	.+2      	; 0x556a <ldexp+0x6c>
    5568:	76 c0       	rjmp	.+236    	; 0x5656 <__fp_mpack>
    556a:	6c ce       	rjmp	.-808    	; 0x5244 <__fp_nan>
    556c:	68 94       	set
    556e:	64 ce       	rjmp	.-824    	; 0x5238 <__fp_inf>

00005570 <log>:
    5570:	93 de       	rcall	.-730    	; 0x5298 <__fp_splitA>
    5572:	c8 f3       	brcs	.-14     	; 0x5566 <ldexp+0x68>
    5574:	99 23       	and	r25, r25
    5576:	d1 f3       	breq	.-12     	; 0x556c <ldexp+0x6e>
    5578:	c6 f3       	brts	.-16     	; 0x556a <ldexp+0x6c>
    557a:	df 93       	push	r29
    557c:	cf 93       	push	r28
    557e:	1f 93       	push	r17
    5580:	0f 93       	push	r16
    5582:	ff 92       	push	r15
    5584:	c9 2f       	mov	r28, r25
    5586:	dd 27       	eor	r29, r29
    5588:	88 23       	and	r24, r24
    558a:	2a f0       	brmi	.+10     	; 0x5596 <log+0x26>
    558c:	21 97       	sbiw	r28, 0x01	; 1
    558e:	66 0f       	add	r22, r22
    5590:	77 1f       	adc	r23, r23
    5592:	88 1f       	adc	r24, r24
    5594:	da f7       	brpl	.-10     	; 0x558c <log+0x1c>
    5596:	20 e0       	ldi	r18, 0x00	; 0
    5598:	30 e0       	ldi	r19, 0x00	; 0
    559a:	40 e8       	ldi	r20, 0x80	; 128
    559c:	5f eb       	ldi	r21, 0xBF	; 191
    559e:	9f e3       	ldi	r25, 0x3F	; 63
    55a0:	88 39       	cpi	r24, 0x98	; 152
    55a2:	20 f0       	brcs	.+8      	; 0x55ac <log+0x3c>
    55a4:	80 3e       	cpi	r24, 0xE0	; 224
    55a6:	30 f0       	brcs	.+12     	; 0x55b4 <log+0x44>
    55a8:	21 96       	adiw	r28, 0x01	; 1
    55aa:	8f 77       	andi	r24, 0x7F	; 127
    55ac:	e3 dc       	rcall	.-1594   	; 0x4f74 <__addsf3>
    55ae:	ea e4       	ldi	r30, 0x4A	; 74
    55b0:	f2 e0       	ldi	r31, 0x02	; 2
    55b2:	03 c0       	rjmp	.+6      	; 0x55ba <log+0x4a>
    55b4:	df dc       	rcall	.-1602   	; 0x4f74 <__addsf3>
    55b6:	e7 e7       	ldi	r30, 0x77	; 119
    55b8:	f2 e0       	ldi	r31, 0x02	; 2
    55ba:	73 df       	rcall	.-282    	; 0x54a2 <__fp_powser>
    55bc:	8b 01       	movw	r16, r22
    55be:	be 01       	movw	r22, r28
    55c0:	ec 01       	movw	r28, r24
    55c2:	fb 2e       	mov	r15, r27
    55c4:	6f 57       	subi	r22, 0x7F	; 127
    55c6:	71 09       	sbc	r23, r1
    55c8:	75 95       	asr	r23
    55ca:	77 1f       	adc	r23, r23
    55cc:	88 0b       	sbc	r24, r24
    55ce:	99 0b       	sbc	r25, r25
    55d0:	d4 dd       	rcall	.-1112   	; 0x517a <__floatsisf>
    55d2:	28 e1       	ldi	r18, 0x18	; 24
    55d4:	32 e7       	ldi	r19, 0x72	; 114
    55d6:	41 e3       	ldi	r20, 0x31	; 49
    55d8:	5f e3       	ldi	r21, 0x3F	; 63
    55da:	8f de       	rcall	.-738    	; 0x52fa <__mulsf3x>
    55dc:	af 2d       	mov	r26, r15
    55de:	98 01       	movw	r18, r16
    55e0:	ae 01       	movw	r20, r28
    55e2:	ff 90       	pop	r15
    55e4:	0f 91       	pop	r16
    55e6:	1f 91       	pop	r17
    55e8:	cf 91       	pop	r28
    55ea:	df 91       	pop	r29
    55ec:	d4 dc       	rcall	.-1624   	; 0x4f96 <__addsf3x>
    55ee:	3b ce       	rjmp	.-906    	; 0x5266 <__fp_round>

000055f0 <modf>:
    55f0:	fa 01       	movw	r30, r20
    55f2:	dc 01       	movw	r26, r24
    55f4:	aa 0f       	add	r26, r26
    55f6:	bb 1f       	adc	r27, r27
    55f8:	9b 01       	movw	r18, r22
    55fa:	ac 01       	movw	r20, r24
    55fc:	bf 57       	subi	r27, 0x7F	; 127
    55fe:	28 f4       	brcc	.+10     	; 0x560a <modf+0x1a>
    5600:	22 27       	eor	r18, r18
    5602:	33 27       	eor	r19, r19
    5604:	44 27       	eor	r20, r20
    5606:	50 78       	andi	r21, 0x80	; 128
    5608:	1f c0       	rjmp	.+62     	; 0x5648 <modf+0x58>
    560a:	b7 51       	subi	r27, 0x17	; 23
    560c:	88 f4       	brcc	.+34     	; 0x5630 <modf+0x40>
    560e:	ab 2f       	mov	r26, r27
    5610:	00 24       	eor	r0, r0
    5612:	46 95       	lsr	r20
    5614:	37 95       	ror	r19
    5616:	27 95       	ror	r18
    5618:	01 1c       	adc	r0, r1
    561a:	a3 95       	inc	r26
    561c:	d2 f3       	brmi	.-12     	; 0x5612 <modf+0x22>
    561e:	00 20       	and	r0, r0
    5620:	69 f0       	breq	.+26     	; 0x563c <modf+0x4c>
    5622:	22 0f       	add	r18, r18
    5624:	33 1f       	adc	r19, r19
    5626:	44 1f       	adc	r20, r20
    5628:	b3 95       	inc	r27
    562a:	da f3       	brmi	.-10     	; 0x5622 <modf+0x32>
    562c:	0d d0       	rcall	.+26     	; 0x5648 <modf+0x58>
    562e:	a1 cc       	rjmp	.-1726   	; 0x4f72 <__subsf3>
    5630:	61 30       	cpi	r22, 0x01	; 1
    5632:	71 05       	cpc	r23, r1
    5634:	a0 e8       	ldi	r26, 0x80	; 128
    5636:	8a 07       	cpc	r24, r26
    5638:	b9 46       	sbci	r27, 0x69	; 105
    563a:	30 f4       	brcc	.+12     	; 0x5648 <modf+0x58>
    563c:	9b 01       	movw	r18, r22
    563e:	ac 01       	movw	r20, r24
    5640:	66 27       	eor	r22, r22
    5642:	77 27       	eor	r23, r23
    5644:	88 27       	eor	r24, r24
    5646:	90 78       	andi	r25, 0x80	; 128
    5648:	30 96       	adiw	r30, 0x00	; 0
    564a:	21 f0       	breq	.+8      	; 0x5654 <modf+0x64>
    564c:	20 83       	st	Z, r18
    564e:	31 83       	std	Z+1, r19	; 0x01
    5650:	42 83       	std	Z+2, r20	; 0x02
    5652:	53 83       	std	Z+3, r21	; 0x03
    5654:	08 95       	ret

00005656 <__fp_mpack>:
    5656:	9f 3f       	cpi	r25, 0xFF	; 255
    5658:	31 f0       	breq	.+12     	; 0x5666 <__fp_mpack_finite+0xc>

0000565a <__fp_mpack_finite>:
    565a:	91 50       	subi	r25, 0x01	; 1
    565c:	20 f4       	brcc	.+8      	; 0x5666 <__fp_mpack_finite+0xc>
    565e:	87 95       	ror	r24
    5660:	77 95       	ror	r23
    5662:	67 95       	ror	r22
    5664:	b7 95       	ror	r27
    5666:	88 0f       	add	r24, r24
    5668:	91 1d       	adc	r25, r1
    566a:	96 95       	lsr	r25
    566c:	87 95       	ror	r24
    566e:	97 f9       	bld	r25, 7
    5670:	08 95       	ret

00005672 <__mulsi3>:
    5672:	db 01       	movw	r26, r22
    5674:	8f 93       	push	r24
    5676:	9f 93       	push	r25
    5678:	88 d0       	rcall	.+272    	; 0x578a <__muluhisi3>
    567a:	bf 91       	pop	r27
    567c:	af 91       	pop	r26
    567e:	a2 9f       	mul	r26, r18
    5680:	80 0d       	add	r24, r0
    5682:	91 1d       	adc	r25, r1
    5684:	a3 9f       	mul	r26, r19
    5686:	90 0d       	add	r25, r0
    5688:	b2 9f       	mul	r27, r18
    568a:	90 0d       	add	r25, r0
    568c:	11 24       	eor	r1, r1
    568e:	08 95       	ret

00005690 <__udivmodhi4>:
    5690:	aa 1b       	sub	r26, r26
    5692:	bb 1b       	sub	r27, r27
    5694:	51 e1       	ldi	r21, 0x11	; 17
    5696:	07 c0       	rjmp	.+14     	; 0x56a6 <__udivmodhi4_ep>

00005698 <__udivmodhi4_loop>:
    5698:	aa 1f       	adc	r26, r26
    569a:	bb 1f       	adc	r27, r27
    569c:	a6 17       	cp	r26, r22
    569e:	b7 07       	cpc	r27, r23
    56a0:	10 f0       	brcs	.+4      	; 0x56a6 <__udivmodhi4_ep>
    56a2:	a6 1b       	sub	r26, r22
    56a4:	b7 0b       	sbc	r27, r23

000056a6 <__udivmodhi4_ep>:
    56a6:	88 1f       	adc	r24, r24
    56a8:	99 1f       	adc	r25, r25
    56aa:	5a 95       	dec	r21
    56ac:	a9 f7       	brne	.-22     	; 0x5698 <__udivmodhi4_loop>
    56ae:	80 95       	com	r24
    56b0:	90 95       	com	r25
    56b2:	bc 01       	movw	r22, r24
    56b4:	cd 01       	movw	r24, r26
    56b6:	08 95       	ret

000056b8 <__divmodhi4>:
    56b8:	97 fb       	bst	r25, 7
    56ba:	07 2e       	mov	r0, r23
    56bc:	16 f4       	brtc	.+4      	; 0x56c2 <__divmodhi4+0xa>
    56be:	00 94       	com	r0
    56c0:	06 d0       	rcall	.+12     	; 0x56ce <__divmodhi4_neg1>
    56c2:	77 fd       	sbrc	r23, 7
    56c4:	08 d0       	rcall	.+16     	; 0x56d6 <__divmodhi4_neg2>
    56c6:	e4 df       	rcall	.-56     	; 0x5690 <__udivmodhi4>
    56c8:	07 fc       	sbrc	r0, 7
    56ca:	05 d0       	rcall	.+10     	; 0x56d6 <__divmodhi4_neg2>
    56cc:	3e f4       	brtc	.+14     	; 0x56dc <__divmodhi4_exit>

000056ce <__divmodhi4_neg1>:
    56ce:	90 95       	com	r25
    56d0:	81 95       	neg	r24
    56d2:	9f 4f       	sbci	r25, 0xFF	; 255
    56d4:	08 95       	ret

000056d6 <__divmodhi4_neg2>:
    56d6:	70 95       	com	r23
    56d8:	61 95       	neg	r22
    56da:	7f 4f       	sbci	r23, 0xFF	; 255

000056dc <__divmodhi4_exit>:
    56dc:	08 95       	ret

000056de <__udivmodsi4>:
    56de:	a1 e2       	ldi	r26, 0x21	; 33
    56e0:	1a 2e       	mov	r1, r26
    56e2:	aa 1b       	sub	r26, r26
    56e4:	bb 1b       	sub	r27, r27
    56e6:	fd 01       	movw	r30, r26
    56e8:	0d c0       	rjmp	.+26     	; 0x5704 <__udivmodsi4_ep>

000056ea <__udivmodsi4_loop>:
    56ea:	aa 1f       	adc	r26, r26
    56ec:	bb 1f       	adc	r27, r27
    56ee:	ee 1f       	adc	r30, r30
    56f0:	ff 1f       	adc	r31, r31
    56f2:	a2 17       	cp	r26, r18
    56f4:	b3 07       	cpc	r27, r19
    56f6:	e4 07       	cpc	r30, r20
    56f8:	f5 07       	cpc	r31, r21
    56fa:	20 f0       	brcs	.+8      	; 0x5704 <__udivmodsi4_ep>
    56fc:	a2 1b       	sub	r26, r18
    56fe:	b3 0b       	sbc	r27, r19
    5700:	e4 0b       	sbc	r30, r20
    5702:	f5 0b       	sbc	r31, r21

00005704 <__udivmodsi4_ep>:
    5704:	66 1f       	adc	r22, r22
    5706:	77 1f       	adc	r23, r23
    5708:	88 1f       	adc	r24, r24
    570a:	99 1f       	adc	r25, r25
    570c:	1a 94       	dec	r1
    570e:	69 f7       	brne	.-38     	; 0x56ea <__udivmodsi4_loop>
    5710:	60 95       	com	r22
    5712:	70 95       	com	r23
    5714:	80 95       	com	r24
    5716:	90 95       	com	r25
    5718:	9b 01       	movw	r18, r22
    571a:	ac 01       	movw	r20, r24
    571c:	bd 01       	movw	r22, r26
    571e:	cf 01       	movw	r24, r30
    5720:	08 95       	ret

00005722 <__divmodsi4>:
    5722:	05 2e       	mov	r0, r21
    5724:	97 fb       	bst	r25, 7
    5726:	16 f4       	brtc	.+4      	; 0x572c <__divmodsi4+0xa>
    5728:	00 94       	com	r0
    572a:	0f d0       	rcall	.+30     	; 0x574a <__negsi2>
    572c:	57 fd       	sbrc	r21, 7
    572e:	05 d0       	rcall	.+10     	; 0x573a <__divmodsi4_neg2>
    5730:	d6 df       	rcall	.-84     	; 0x56de <__udivmodsi4>
    5732:	07 fc       	sbrc	r0, 7
    5734:	02 d0       	rcall	.+4      	; 0x573a <__divmodsi4_neg2>
    5736:	46 f4       	brtc	.+16     	; 0x5748 <__divmodsi4_exit>
    5738:	08 c0       	rjmp	.+16     	; 0x574a <__negsi2>

0000573a <__divmodsi4_neg2>:
    573a:	50 95       	com	r21
    573c:	40 95       	com	r20
    573e:	30 95       	com	r19
    5740:	21 95       	neg	r18
    5742:	3f 4f       	sbci	r19, 0xFF	; 255
    5744:	4f 4f       	sbci	r20, 0xFF	; 255
    5746:	5f 4f       	sbci	r21, 0xFF	; 255

00005748 <__divmodsi4_exit>:
    5748:	08 95       	ret

0000574a <__negsi2>:
    574a:	90 95       	com	r25
    574c:	80 95       	com	r24
    574e:	70 95       	com	r23
    5750:	61 95       	neg	r22
    5752:	7f 4f       	sbci	r23, 0xFF	; 255
    5754:	8f 4f       	sbci	r24, 0xFF	; 255
    5756:	9f 4f       	sbci	r25, 0xFF	; 255
    5758:	08 95       	ret

0000575a <__tablejump2__>:
    575a:	ee 0f       	add	r30, r30
    575c:	ff 1f       	adc	r31, r31
    575e:	88 1f       	adc	r24, r24
    5760:	8b bf       	out	0x3b, r24	; 59
    5762:	07 90       	elpm	r0, Z+
    5764:	f6 91       	elpm	r31, Z
    5766:	e0 2d       	mov	r30, r0
    5768:	1b be       	out	0x3b, r1	; 59
    576a:	19 94       	eijmp

0000576c <__umulhisi3>:
    576c:	a2 9f       	mul	r26, r18
    576e:	b0 01       	movw	r22, r0
    5770:	b3 9f       	mul	r27, r19
    5772:	c0 01       	movw	r24, r0
    5774:	a3 9f       	mul	r26, r19
    5776:	70 0d       	add	r23, r0
    5778:	81 1d       	adc	r24, r1
    577a:	11 24       	eor	r1, r1
    577c:	91 1d       	adc	r25, r1
    577e:	b2 9f       	mul	r27, r18
    5780:	70 0d       	add	r23, r0
    5782:	81 1d       	adc	r24, r1
    5784:	11 24       	eor	r1, r1
    5786:	91 1d       	adc	r25, r1
    5788:	08 95       	ret

0000578a <__muluhisi3>:
    578a:	f0 df       	rcall	.-32     	; 0x576c <__umulhisi3>
    578c:	a5 9f       	mul	r26, r21
    578e:	90 0d       	add	r25, r0
    5790:	b4 9f       	mul	r27, r20
    5792:	90 0d       	add	r25, r0
    5794:	a4 9f       	mul	r26, r20
    5796:	80 0d       	add	r24, r0
    5798:	91 1d       	adc	r25, r1
    579a:	11 24       	eor	r1, r1
    579c:	08 95       	ret

0000579e <__ashldi3>:
    579e:	0f 93       	push	r16
    57a0:	08 30       	cpi	r16, 0x08	; 8
    57a2:	90 f0       	brcs	.+36     	; 0x57c8 <__ashldi3+0x2a>
    57a4:	98 2f       	mov	r25, r24
    57a6:	87 2f       	mov	r24, r23
    57a8:	76 2f       	mov	r23, r22
    57aa:	65 2f       	mov	r22, r21
    57ac:	54 2f       	mov	r21, r20
    57ae:	43 2f       	mov	r20, r19
    57b0:	32 2f       	mov	r19, r18
    57b2:	22 27       	eor	r18, r18
    57b4:	08 50       	subi	r16, 0x08	; 8
    57b6:	f4 cf       	rjmp	.-24     	; 0x57a0 <__ashldi3+0x2>
    57b8:	22 0f       	add	r18, r18
    57ba:	33 1f       	adc	r19, r19
    57bc:	44 1f       	adc	r20, r20
    57be:	55 1f       	adc	r21, r21
    57c0:	66 1f       	adc	r22, r22
    57c2:	77 1f       	adc	r23, r23
    57c4:	88 1f       	adc	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	0a 95       	dec	r16
    57ca:	b2 f7       	brpl	.-20     	; 0x57b8 <__ashldi3+0x1a>
    57cc:	0f 91       	pop	r16
    57ce:	08 95       	ret

000057d0 <__ashrdi3>:
    57d0:	97 fb       	bst	r25, 7
    57d2:	10 f8       	bld	r1, 0

000057d4 <__lshrdi3>:
    57d4:	16 94       	lsr	r1
    57d6:	00 08       	sbc	r0, r0
    57d8:	0f 93       	push	r16
    57da:	08 30       	cpi	r16, 0x08	; 8
    57dc:	98 f0       	brcs	.+38     	; 0x5804 <__lshrdi3+0x30>
    57de:	08 50       	subi	r16, 0x08	; 8
    57e0:	23 2f       	mov	r18, r19
    57e2:	34 2f       	mov	r19, r20
    57e4:	45 2f       	mov	r20, r21
    57e6:	56 2f       	mov	r21, r22
    57e8:	67 2f       	mov	r22, r23
    57ea:	78 2f       	mov	r23, r24
    57ec:	89 2f       	mov	r24, r25
    57ee:	90 2d       	mov	r25, r0
    57f0:	f4 cf       	rjmp	.-24     	; 0x57da <__lshrdi3+0x6>
    57f2:	05 94       	asr	r0
    57f4:	97 95       	ror	r25
    57f6:	87 95       	ror	r24
    57f8:	77 95       	ror	r23
    57fa:	67 95       	ror	r22
    57fc:	57 95       	ror	r21
    57fe:	47 95       	ror	r20
    5800:	37 95       	ror	r19
    5802:	27 95       	ror	r18
    5804:	0a 95       	dec	r16
    5806:	aa f7       	brpl	.-22     	; 0x57f2 <__lshrdi3+0x1e>
    5808:	0f 91       	pop	r16
    580a:	08 95       	ret

0000580c <fdevopen>:
    580c:	0f 93       	push	r16
    580e:	1f 93       	push	r17
    5810:	cf 93       	push	r28
    5812:	df 93       	push	r29
    5814:	00 97       	sbiw	r24, 0x00	; 0
    5816:	31 f4       	brne	.+12     	; 0x5824 <fdevopen+0x18>
    5818:	61 15       	cp	r22, r1
    581a:	71 05       	cpc	r23, r1
    581c:	19 f4       	brne	.+6      	; 0x5824 <fdevopen+0x18>
    581e:	80 e0       	ldi	r24, 0x00	; 0
    5820:	90 e0       	ldi	r25, 0x00	; 0
    5822:	39 c0       	rjmp	.+114    	; 0x5896 <fdevopen+0x8a>
    5824:	8b 01       	movw	r16, r22
    5826:	ec 01       	movw	r28, r24
    5828:	6e e0       	ldi	r22, 0x0E	; 14
    582a:	70 e0       	ldi	r23, 0x00	; 0
    582c:	81 e0       	ldi	r24, 0x01	; 1
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	47 d5       	rcall	.+2702   	; 0x62c0 <calloc>
    5832:	fc 01       	movw	r30, r24
    5834:	89 2b       	or	r24, r25
    5836:	99 f3       	breq	.-26     	; 0x581e <fdevopen+0x12>
    5838:	80 e8       	ldi	r24, 0x80	; 128
    583a:	83 83       	std	Z+3, r24	; 0x03
    583c:	01 15       	cp	r16, r1
    583e:	11 05       	cpc	r17, r1
    5840:	71 f0       	breq	.+28     	; 0x585e <fdevopen+0x52>
    5842:	02 87       	std	Z+10, r16	; 0x0a
    5844:	13 87       	std	Z+11, r17	; 0x0b
    5846:	81 e8       	ldi	r24, 0x81	; 129
    5848:	83 83       	std	Z+3, r24	; 0x03
    584a:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <__iob>
    584e:	90 91 0e 22 	lds	r25, 0x220E	; 0x80220e <__iob+0x1>
    5852:	89 2b       	or	r24, r25
    5854:	21 f4       	brne	.+8      	; 0x585e <fdevopen+0x52>
    5856:	e0 93 0d 22 	sts	0x220D, r30	; 0x80220d <__iob>
    585a:	f0 93 0e 22 	sts	0x220E, r31	; 0x80220e <__iob+0x1>
    585e:	20 97       	sbiw	r28, 0x00	; 0
    5860:	c9 f0       	breq	.+50     	; 0x5894 <fdevopen+0x88>
    5862:	c0 87       	std	Z+8, r28	; 0x08
    5864:	d1 87       	std	Z+9, r29	; 0x09
    5866:	83 81       	ldd	r24, Z+3	; 0x03
    5868:	82 60       	ori	r24, 0x02	; 2
    586a:	83 83       	std	Z+3, r24	; 0x03
    586c:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <__iob+0x2>
    5870:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <__iob+0x3>
    5874:	89 2b       	or	r24, r25
    5876:	71 f4       	brne	.+28     	; 0x5894 <fdevopen+0x88>
    5878:	e0 93 0f 22 	sts	0x220F, r30	; 0x80220f <__iob+0x2>
    587c:	f0 93 10 22 	sts	0x2210, r31	; 0x802210 <__iob+0x3>
    5880:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <__iob+0x4>
    5884:	90 91 12 22 	lds	r25, 0x2212	; 0x802212 <__iob+0x5>
    5888:	89 2b       	or	r24, r25
    588a:	21 f4       	brne	.+8      	; 0x5894 <fdevopen+0x88>
    588c:	e0 93 11 22 	sts	0x2211, r30	; 0x802211 <__iob+0x4>
    5890:	f0 93 12 22 	sts	0x2212, r31	; 0x802212 <__iob+0x5>
    5894:	cf 01       	movw	r24, r30
    5896:	df 91       	pop	r29
    5898:	cf 91       	pop	r28
    589a:	1f 91       	pop	r17
    589c:	0f 91       	pop	r16
    589e:	08 95       	ret

000058a0 <printf>:
    58a0:	cf 93       	push	r28
    58a2:	df 93       	push	r29
    58a4:	cd b7       	in	r28, 0x3d	; 61
    58a6:	de b7       	in	r29, 0x3e	; 62
    58a8:	ae 01       	movw	r20, r28
    58aa:	4a 5f       	subi	r20, 0xFA	; 250
    58ac:	5f 4f       	sbci	r21, 0xFF	; 255
    58ae:	fa 01       	movw	r30, r20
    58b0:	61 91       	ld	r22, Z+
    58b2:	71 91       	ld	r23, Z+
    58b4:	af 01       	movw	r20, r30
    58b6:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <__iob+0x2>
    58ba:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <__iob+0x3>
    58be:	46 d0       	rcall	.+140    	; 0x594c <vfprintf>
    58c0:	df 91       	pop	r29
    58c2:	cf 91       	pop	r28
    58c4:	08 95       	ret

000058c6 <sprintf>:
    58c6:	0f 93       	push	r16
    58c8:	1f 93       	push	r17
    58ca:	cf 93       	push	r28
    58cc:	df 93       	push	r29
    58ce:	cd b7       	in	r28, 0x3d	; 61
    58d0:	de b7       	in	r29, 0x3e	; 62
    58d2:	2e 97       	sbiw	r28, 0x0e	; 14
    58d4:	cd bf       	out	0x3d, r28	; 61
    58d6:	de bf       	out	0x3e, r29	; 62
    58d8:	0e 89       	ldd	r16, Y+22	; 0x16
    58da:	1f 89       	ldd	r17, Y+23	; 0x17
    58dc:	86 e0       	ldi	r24, 0x06	; 6
    58de:	8c 83       	std	Y+4, r24	; 0x04
    58e0:	09 83       	std	Y+1, r16	; 0x01
    58e2:	1a 83       	std	Y+2, r17	; 0x02
    58e4:	8f ef       	ldi	r24, 0xFF	; 255
    58e6:	9f e7       	ldi	r25, 0x7F	; 127
    58e8:	8d 83       	std	Y+5, r24	; 0x05
    58ea:	9e 83       	std	Y+6, r25	; 0x06
    58ec:	ae 01       	movw	r20, r28
    58ee:	46 5e       	subi	r20, 0xE6	; 230
    58f0:	5f 4f       	sbci	r21, 0xFF	; 255
    58f2:	68 8d       	ldd	r22, Y+24	; 0x18
    58f4:	79 8d       	ldd	r23, Y+25	; 0x19
    58f6:	ce 01       	movw	r24, r28
    58f8:	01 96       	adiw	r24, 0x01	; 1
    58fa:	28 d0       	rcall	.+80     	; 0x594c <vfprintf>
    58fc:	ef 81       	ldd	r30, Y+7	; 0x07
    58fe:	f8 85       	ldd	r31, Y+8	; 0x08
    5900:	e0 0f       	add	r30, r16
    5902:	f1 1f       	adc	r31, r17
    5904:	10 82       	st	Z, r1
    5906:	2e 96       	adiw	r28, 0x0e	; 14
    5908:	cd bf       	out	0x3d, r28	; 61
    590a:	de bf       	out	0x3e, r29	; 62
    590c:	df 91       	pop	r29
    590e:	cf 91       	pop	r28
    5910:	1f 91       	pop	r17
    5912:	0f 91       	pop	r16
    5914:	08 95       	ret

00005916 <sscanf>:
    5916:	cf 93       	push	r28
    5918:	df 93       	push	r29
    591a:	cd b7       	in	r28, 0x3d	; 61
    591c:	de b7       	in	r29, 0x3e	; 62
    591e:	2e 97       	sbiw	r28, 0x0e	; 14
    5920:	cd bf       	out	0x3d, r28	; 61
    5922:	de bf       	out	0x3e, r29	; 62
    5924:	85 e0       	ldi	r24, 0x05	; 5
    5926:	8c 83       	std	Y+4, r24	; 0x04
    5928:	8c 89       	ldd	r24, Y+20	; 0x14
    592a:	9d 89       	ldd	r25, Y+21	; 0x15
    592c:	89 83       	std	Y+1, r24	; 0x01
    592e:	9a 83       	std	Y+2, r25	; 0x02
    5930:	ae 01       	movw	r20, r28
    5932:	48 5e       	subi	r20, 0xE8	; 232
    5934:	5f 4f       	sbci	r21, 0xFF	; 255
    5936:	6e 89       	ldd	r22, Y+22	; 0x16
    5938:	7f 89       	ldd	r23, Y+23	; 0x17
    593a:	ce 01       	movw	r24, r28
    593c:	01 96       	adiw	r24, 0x01	; 1
    593e:	a9 d3       	rcall	.+1874   	; 0x6092 <vfscanf>
    5940:	2e 96       	adiw	r28, 0x0e	; 14
    5942:	cd bf       	out	0x3d, r28	; 61
    5944:	de bf       	out	0x3e, r29	; 62
    5946:	df 91       	pop	r29
    5948:	cf 91       	pop	r28
    594a:	08 95       	ret

0000594c <vfprintf>:
    594c:	2f 92       	push	r2
    594e:	3f 92       	push	r3
    5950:	4f 92       	push	r4
    5952:	5f 92       	push	r5
    5954:	6f 92       	push	r6
    5956:	7f 92       	push	r7
    5958:	8f 92       	push	r8
    595a:	9f 92       	push	r9
    595c:	af 92       	push	r10
    595e:	bf 92       	push	r11
    5960:	cf 92       	push	r12
    5962:	df 92       	push	r13
    5964:	ef 92       	push	r14
    5966:	ff 92       	push	r15
    5968:	0f 93       	push	r16
    596a:	1f 93       	push	r17
    596c:	cf 93       	push	r28
    596e:	df 93       	push	r29
    5970:	cd b7       	in	r28, 0x3d	; 61
    5972:	de b7       	in	r29, 0x3e	; 62
    5974:	2b 97       	sbiw	r28, 0x0b	; 11
    5976:	cd bf       	out	0x3d, r28	; 61
    5978:	de bf       	out	0x3e, r29	; 62
    597a:	6c 01       	movw	r12, r24
    597c:	7b 01       	movw	r14, r22
    597e:	8a 01       	movw	r16, r20
    5980:	fc 01       	movw	r30, r24
    5982:	16 82       	std	Z+6, r1	; 0x06
    5984:	17 82       	std	Z+7, r1	; 0x07
    5986:	83 81       	ldd	r24, Z+3	; 0x03
    5988:	81 ff       	sbrs	r24, 1
    598a:	bf c1       	rjmp	.+894    	; 0x5d0a <vfprintf+0x3be>
    598c:	ce 01       	movw	r24, r28
    598e:	01 96       	adiw	r24, 0x01	; 1
    5990:	3c 01       	movw	r6, r24
    5992:	f6 01       	movw	r30, r12
    5994:	93 81       	ldd	r25, Z+3	; 0x03
    5996:	f7 01       	movw	r30, r14
    5998:	93 fd       	sbrc	r25, 3
    599a:	85 91       	lpm	r24, Z+
    599c:	93 ff       	sbrs	r25, 3
    599e:	81 91       	ld	r24, Z+
    59a0:	7f 01       	movw	r14, r30
    59a2:	88 23       	and	r24, r24
    59a4:	09 f4       	brne	.+2      	; 0x59a8 <vfprintf+0x5c>
    59a6:	ad c1       	rjmp	.+858    	; 0x5d02 <vfprintf+0x3b6>
    59a8:	85 32       	cpi	r24, 0x25	; 37
    59aa:	39 f4       	brne	.+14     	; 0x59ba <vfprintf+0x6e>
    59ac:	93 fd       	sbrc	r25, 3
    59ae:	85 91       	lpm	r24, Z+
    59b0:	93 ff       	sbrs	r25, 3
    59b2:	81 91       	ld	r24, Z+
    59b4:	7f 01       	movw	r14, r30
    59b6:	85 32       	cpi	r24, 0x25	; 37
    59b8:	21 f4       	brne	.+8      	; 0x59c2 <vfprintf+0x76>
    59ba:	b6 01       	movw	r22, r12
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	29 d6       	rcall	.+3154   	; 0x6612 <fputc>
    59c0:	e8 cf       	rjmp	.-48     	; 0x5992 <vfprintf+0x46>
    59c2:	91 2c       	mov	r9, r1
    59c4:	21 2c       	mov	r2, r1
    59c6:	31 2c       	mov	r3, r1
    59c8:	ff e1       	ldi	r31, 0x1F	; 31
    59ca:	f3 15       	cp	r31, r3
    59cc:	d8 f0       	brcs	.+54     	; 0x5a04 <vfprintf+0xb8>
    59ce:	8b 32       	cpi	r24, 0x2B	; 43
    59d0:	79 f0       	breq	.+30     	; 0x59f0 <vfprintf+0xa4>
    59d2:	38 f4       	brcc	.+14     	; 0x59e2 <vfprintf+0x96>
    59d4:	80 32       	cpi	r24, 0x20	; 32
    59d6:	79 f0       	breq	.+30     	; 0x59f6 <vfprintf+0xaa>
    59d8:	83 32       	cpi	r24, 0x23	; 35
    59da:	a1 f4       	brne	.+40     	; 0x5a04 <vfprintf+0xb8>
    59dc:	23 2d       	mov	r18, r3
    59de:	20 61       	ori	r18, 0x10	; 16
    59e0:	1d c0       	rjmp	.+58     	; 0x5a1c <vfprintf+0xd0>
    59e2:	8d 32       	cpi	r24, 0x2D	; 45
    59e4:	61 f0       	breq	.+24     	; 0x59fe <vfprintf+0xb2>
    59e6:	80 33       	cpi	r24, 0x30	; 48
    59e8:	69 f4       	brne	.+26     	; 0x5a04 <vfprintf+0xb8>
    59ea:	23 2d       	mov	r18, r3
    59ec:	21 60       	ori	r18, 0x01	; 1
    59ee:	16 c0       	rjmp	.+44     	; 0x5a1c <vfprintf+0xd0>
    59f0:	83 2d       	mov	r24, r3
    59f2:	82 60       	ori	r24, 0x02	; 2
    59f4:	38 2e       	mov	r3, r24
    59f6:	e3 2d       	mov	r30, r3
    59f8:	e4 60       	ori	r30, 0x04	; 4
    59fa:	3e 2e       	mov	r3, r30
    59fc:	2a c0       	rjmp	.+84     	; 0x5a52 <vfprintf+0x106>
    59fe:	f3 2d       	mov	r31, r3
    5a00:	f8 60       	ori	r31, 0x08	; 8
    5a02:	1d c0       	rjmp	.+58     	; 0x5a3e <vfprintf+0xf2>
    5a04:	37 fc       	sbrc	r3, 7
    5a06:	2d c0       	rjmp	.+90     	; 0x5a62 <vfprintf+0x116>
    5a08:	20 ed       	ldi	r18, 0xD0	; 208
    5a0a:	28 0f       	add	r18, r24
    5a0c:	2a 30       	cpi	r18, 0x0A	; 10
    5a0e:	40 f0       	brcs	.+16     	; 0x5a20 <vfprintf+0xd4>
    5a10:	8e 32       	cpi	r24, 0x2E	; 46
    5a12:	b9 f4       	brne	.+46     	; 0x5a42 <vfprintf+0xf6>
    5a14:	36 fc       	sbrc	r3, 6
    5a16:	75 c1       	rjmp	.+746    	; 0x5d02 <vfprintf+0x3b6>
    5a18:	23 2d       	mov	r18, r3
    5a1a:	20 64       	ori	r18, 0x40	; 64
    5a1c:	32 2e       	mov	r3, r18
    5a1e:	19 c0       	rjmp	.+50     	; 0x5a52 <vfprintf+0x106>
    5a20:	36 fe       	sbrs	r3, 6
    5a22:	06 c0       	rjmp	.+12     	; 0x5a30 <vfprintf+0xe4>
    5a24:	8a e0       	ldi	r24, 0x0A	; 10
    5a26:	98 9e       	mul	r9, r24
    5a28:	20 0d       	add	r18, r0
    5a2a:	11 24       	eor	r1, r1
    5a2c:	92 2e       	mov	r9, r18
    5a2e:	11 c0       	rjmp	.+34     	; 0x5a52 <vfprintf+0x106>
    5a30:	ea e0       	ldi	r30, 0x0A	; 10
    5a32:	2e 9e       	mul	r2, r30
    5a34:	20 0d       	add	r18, r0
    5a36:	11 24       	eor	r1, r1
    5a38:	22 2e       	mov	r2, r18
    5a3a:	f3 2d       	mov	r31, r3
    5a3c:	f0 62       	ori	r31, 0x20	; 32
    5a3e:	3f 2e       	mov	r3, r31
    5a40:	08 c0       	rjmp	.+16     	; 0x5a52 <vfprintf+0x106>
    5a42:	8c 36       	cpi	r24, 0x6C	; 108
    5a44:	21 f4       	brne	.+8      	; 0x5a4e <vfprintf+0x102>
    5a46:	83 2d       	mov	r24, r3
    5a48:	80 68       	ori	r24, 0x80	; 128
    5a4a:	38 2e       	mov	r3, r24
    5a4c:	02 c0       	rjmp	.+4      	; 0x5a52 <vfprintf+0x106>
    5a4e:	88 36       	cpi	r24, 0x68	; 104
    5a50:	41 f4       	brne	.+16     	; 0x5a62 <vfprintf+0x116>
    5a52:	f7 01       	movw	r30, r14
    5a54:	93 fd       	sbrc	r25, 3
    5a56:	85 91       	lpm	r24, Z+
    5a58:	93 ff       	sbrs	r25, 3
    5a5a:	81 91       	ld	r24, Z+
    5a5c:	7f 01       	movw	r14, r30
    5a5e:	81 11       	cpse	r24, r1
    5a60:	b3 cf       	rjmp	.-154    	; 0x59c8 <vfprintf+0x7c>
    5a62:	98 2f       	mov	r25, r24
    5a64:	9f 7d       	andi	r25, 0xDF	; 223
    5a66:	95 54       	subi	r25, 0x45	; 69
    5a68:	93 30       	cpi	r25, 0x03	; 3
    5a6a:	28 f4       	brcc	.+10     	; 0x5a76 <vfprintf+0x12a>
    5a6c:	0c 5f       	subi	r16, 0xFC	; 252
    5a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a70:	9f e3       	ldi	r25, 0x3F	; 63
    5a72:	99 83       	std	Y+1, r25	; 0x01
    5a74:	0d c0       	rjmp	.+26     	; 0x5a90 <vfprintf+0x144>
    5a76:	83 36       	cpi	r24, 0x63	; 99
    5a78:	31 f0       	breq	.+12     	; 0x5a86 <vfprintf+0x13a>
    5a7a:	83 37       	cpi	r24, 0x73	; 115
    5a7c:	71 f0       	breq	.+28     	; 0x5a9a <vfprintf+0x14e>
    5a7e:	83 35       	cpi	r24, 0x53	; 83
    5a80:	09 f0       	breq	.+2      	; 0x5a84 <vfprintf+0x138>
    5a82:	55 c0       	rjmp	.+170    	; 0x5b2e <vfprintf+0x1e2>
    5a84:	20 c0       	rjmp	.+64     	; 0x5ac6 <vfprintf+0x17a>
    5a86:	f8 01       	movw	r30, r16
    5a88:	80 81       	ld	r24, Z
    5a8a:	89 83       	std	Y+1, r24	; 0x01
    5a8c:	0e 5f       	subi	r16, 0xFE	; 254
    5a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a90:	88 24       	eor	r8, r8
    5a92:	83 94       	inc	r8
    5a94:	91 2c       	mov	r9, r1
    5a96:	53 01       	movw	r10, r6
    5a98:	12 c0       	rjmp	.+36     	; 0x5abe <vfprintf+0x172>
    5a9a:	28 01       	movw	r4, r16
    5a9c:	f2 e0       	ldi	r31, 0x02	; 2
    5a9e:	4f 0e       	add	r4, r31
    5aa0:	51 1c       	adc	r5, r1
    5aa2:	f8 01       	movw	r30, r16
    5aa4:	a0 80       	ld	r10, Z
    5aa6:	b1 80       	ldd	r11, Z+1	; 0x01
    5aa8:	36 fe       	sbrs	r3, 6
    5aaa:	03 c0       	rjmp	.+6      	; 0x5ab2 <vfprintf+0x166>
    5aac:	69 2d       	mov	r22, r9
    5aae:	70 e0       	ldi	r23, 0x00	; 0
    5ab0:	02 c0       	rjmp	.+4      	; 0x5ab6 <vfprintf+0x16a>
    5ab2:	6f ef       	ldi	r22, 0xFF	; 255
    5ab4:	7f ef       	ldi	r23, 0xFF	; 255
    5ab6:	c5 01       	movw	r24, r10
    5ab8:	63 d5       	rcall	.+2758   	; 0x6580 <strnlen>
    5aba:	4c 01       	movw	r8, r24
    5abc:	82 01       	movw	r16, r4
    5abe:	f3 2d       	mov	r31, r3
    5ac0:	ff 77       	andi	r31, 0x7F	; 127
    5ac2:	3f 2e       	mov	r3, r31
    5ac4:	15 c0       	rjmp	.+42     	; 0x5af0 <vfprintf+0x1a4>
    5ac6:	28 01       	movw	r4, r16
    5ac8:	22 e0       	ldi	r18, 0x02	; 2
    5aca:	42 0e       	add	r4, r18
    5acc:	51 1c       	adc	r5, r1
    5ace:	f8 01       	movw	r30, r16
    5ad0:	a0 80       	ld	r10, Z
    5ad2:	b1 80       	ldd	r11, Z+1	; 0x01
    5ad4:	36 fe       	sbrs	r3, 6
    5ad6:	03 c0       	rjmp	.+6      	; 0x5ade <vfprintf+0x192>
    5ad8:	69 2d       	mov	r22, r9
    5ada:	70 e0       	ldi	r23, 0x00	; 0
    5adc:	02 c0       	rjmp	.+4      	; 0x5ae2 <vfprintf+0x196>
    5ade:	6f ef       	ldi	r22, 0xFF	; 255
    5ae0:	7f ef       	ldi	r23, 0xFF	; 255
    5ae2:	c5 01       	movw	r24, r10
    5ae4:	3b d5       	rcall	.+2678   	; 0x655c <strnlen_P>
    5ae6:	4c 01       	movw	r8, r24
    5ae8:	f3 2d       	mov	r31, r3
    5aea:	f0 68       	ori	r31, 0x80	; 128
    5aec:	3f 2e       	mov	r3, r31
    5aee:	82 01       	movw	r16, r4
    5af0:	33 fc       	sbrc	r3, 3
    5af2:	19 c0       	rjmp	.+50     	; 0x5b26 <vfprintf+0x1da>
    5af4:	82 2d       	mov	r24, r2
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	88 16       	cp	r8, r24
    5afa:	99 06       	cpc	r9, r25
    5afc:	a0 f4       	brcc	.+40     	; 0x5b26 <vfprintf+0x1da>
    5afe:	b6 01       	movw	r22, r12
    5b00:	80 e2       	ldi	r24, 0x20	; 32
    5b02:	90 e0       	ldi	r25, 0x00	; 0
    5b04:	86 d5       	rcall	.+2828   	; 0x6612 <fputc>
    5b06:	2a 94       	dec	r2
    5b08:	f5 cf       	rjmp	.-22     	; 0x5af4 <vfprintf+0x1a8>
    5b0a:	f5 01       	movw	r30, r10
    5b0c:	37 fc       	sbrc	r3, 7
    5b0e:	85 91       	lpm	r24, Z+
    5b10:	37 fe       	sbrs	r3, 7
    5b12:	81 91       	ld	r24, Z+
    5b14:	5f 01       	movw	r10, r30
    5b16:	b6 01       	movw	r22, r12
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	7b d5       	rcall	.+2806   	; 0x6612 <fputc>
    5b1c:	21 10       	cpse	r2, r1
    5b1e:	2a 94       	dec	r2
    5b20:	21 e0       	ldi	r18, 0x01	; 1
    5b22:	82 1a       	sub	r8, r18
    5b24:	91 08       	sbc	r9, r1
    5b26:	81 14       	cp	r8, r1
    5b28:	91 04       	cpc	r9, r1
    5b2a:	79 f7       	brne	.-34     	; 0x5b0a <vfprintf+0x1be>
    5b2c:	e1 c0       	rjmp	.+450    	; 0x5cf0 <vfprintf+0x3a4>
    5b2e:	84 36       	cpi	r24, 0x64	; 100
    5b30:	11 f0       	breq	.+4      	; 0x5b36 <vfprintf+0x1ea>
    5b32:	89 36       	cpi	r24, 0x69	; 105
    5b34:	39 f5       	brne	.+78     	; 0x5b84 <vfprintf+0x238>
    5b36:	f8 01       	movw	r30, r16
    5b38:	37 fe       	sbrs	r3, 7
    5b3a:	07 c0       	rjmp	.+14     	; 0x5b4a <vfprintf+0x1fe>
    5b3c:	60 81       	ld	r22, Z
    5b3e:	71 81       	ldd	r23, Z+1	; 0x01
    5b40:	82 81       	ldd	r24, Z+2	; 0x02
    5b42:	93 81       	ldd	r25, Z+3	; 0x03
    5b44:	0c 5f       	subi	r16, 0xFC	; 252
    5b46:	1f 4f       	sbci	r17, 0xFF	; 255
    5b48:	08 c0       	rjmp	.+16     	; 0x5b5a <vfprintf+0x20e>
    5b4a:	60 81       	ld	r22, Z
    5b4c:	71 81       	ldd	r23, Z+1	; 0x01
    5b4e:	07 2e       	mov	r0, r23
    5b50:	00 0c       	add	r0, r0
    5b52:	88 0b       	sbc	r24, r24
    5b54:	99 0b       	sbc	r25, r25
    5b56:	0e 5f       	subi	r16, 0xFE	; 254
    5b58:	1f 4f       	sbci	r17, 0xFF	; 255
    5b5a:	f3 2d       	mov	r31, r3
    5b5c:	ff 76       	andi	r31, 0x6F	; 111
    5b5e:	3f 2e       	mov	r3, r31
    5b60:	97 ff       	sbrs	r25, 7
    5b62:	09 c0       	rjmp	.+18     	; 0x5b76 <vfprintf+0x22a>
    5b64:	90 95       	com	r25
    5b66:	80 95       	com	r24
    5b68:	70 95       	com	r23
    5b6a:	61 95       	neg	r22
    5b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5b70:	9f 4f       	sbci	r25, 0xFF	; 255
    5b72:	f0 68       	ori	r31, 0x80	; 128
    5b74:	3f 2e       	mov	r3, r31
    5b76:	2a e0       	ldi	r18, 0x0A	; 10
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	a3 01       	movw	r20, r6
    5b7c:	9f d5       	rcall	.+2878   	; 0x66bc <__ultoa_invert>
    5b7e:	88 2e       	mov	r8, r24
    5b80:	86 18       	sub	r8, r6
    5b82:	44 c0       	rjmp	.+136    	; 0x5c0c <vfprintf+0x2c0>
    5b84:	85 37       	cpi	r24, 0x75	; 117
    5b86:	31 f4       	brne	.+12     	; 0x5b94 <vfprintf+0x248>
    5b88:	23 2d       	mov	r18, r3
    5b8a:	2f 7e       	andi	r18, 0xEF	; 239
    5b8c:	b2 2e       	mov	r11, r18
    5b8e:	2a e0       	ldi	r18, 0x0A	; 10
    5b90:	30 e0       	ldi	r19, 0x00	; 0
    5b92:	25 c0       	rjmp	.+74     	; 0x5bde <vfprintf+0x292>
    5b94:	93 2d       	mov	r25, r3
    5b96:	99 7f       	andi	r25, 0xF9	; 249
    5b98:	b9 2e       	mov	r11, r25
    5b9a:	8f 36       	cpi	r24, 0x6F	; 111
    5b9c:	c1 f0       	breq	.+48     	; 0x5bce <vfprintf+0x282>
    5b9e:	18 f4       	brcc	.+6      	; 0x5ba6 <vfprintf+0x25a>
    5ba0:	88 35       	cpi	r24, 0x58	; 88
    5ba2:	79 f0       	breq	.+30     	; 0x5bc2 <vfprintf+0x276>
    5ba4:	ae c0       	rjmp	.+348    	; 0x5d02 <vfprintf+0x3b6>
    5ba6:	80 37       	cpi	r24, 0x70	; 112
    5ba8:	19 f0       	breq	.+6      	; 0x5bb0 <vfprintf+0x264>
    5baa:	88 37       	cpi	r24, 0x78	; 120
    5bac:	21 f0       	breq	.+8      	; 0x5bb6 <vfprintf+0x26a>
    5bae:	a9 c0       	rjmp	.+338    	; 0x5d02 <vfprintf+0x3b6>
    5bb0:	e9 2f       	mov	r30, r25
    5bb2:	e0 61       	ori	r30, 0x10	; 16
    5bb4:	be 2e       	mov	r11, r30
    5bb6:	b4 fe       	sbrs	r11, 4
    5bb8:	0d c0       	rjmp	.+26     	; 0x5bd4 <vfprintf+0x288>
    5bba:	fb 2d       	mov	r31, r11
    5bbc:	f4 60       	ori	r31, 0x04	; 4
    5bbe:	bf 2e       	mov	r11, r31
    5bc0:	09 c0       	rjmp	.+18     	; 0x5bd4 <vfprintf+0x288>
    5bc2:	34 fe       	sbrs	r3, 4
    5bc4:	0a c0       	rjmp	.+20     	; 0x5bda <vfprintf+0x28e>
    5bc6:	29 2f       	mov	r18, r25
    5bc8:	26 60       	ori	r18, 0x06	; 6
    5bca:	b2 2e       	mov	r11, r18
    5bcc:	06 c0       	rjmp	.+12     	; 0x5bda <vfprintf+0x28e>
    5bce:	28 e0       	ldi	r18, 0x08	; 8
    5bd0:	30 e0       	ldi	r19, 0x00	; 0
    5bd2:	05 c0       	rjmp	.+10     	; 0x5bde <vfprintf+0x292>
    5bd4:	20 e1       	ldi	r18, 0x10	; 16
    5bd6:	30 e0       	ldi	r19, 0x00	; 0
    5bd8:	02 c0       	rjmp	.+4      	; 0x5bde <vfprintf+0x292>
    5bda:	20 e1       	ldi	r18, 0x10	; 16
    5bdc:	32 e0       	ldi	r19, 0x02	; 2
    5bde:	f8 01       	movw	r30, r16
    5be0:	b7 fe       	sbrs	r11, 7
    5be2:	07 c0       	rjmp	.+14     	; 0x5bf2 <vfprintf+0x2a6>
    5be4:	60 81       	ld	r22, Z
    5be6:	71 81       	ldd	r23, Z+1	; 0x01
    5be8:	82 81       	ldd	r24, Z+2	; 0x02
    5bea:	93 81       	ldd	r25, Z+3	; 0x03
    5bec:	0c 5f       	subi	r16, 0xFC	; 252
    5bee:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf0:	06 c0       	rjmp	.+12     	; 0x5bfe <vfprintf+0x2b2>
    5bf2:	60 81       	ld	r22, Z
    5bf4:	71 81       	ldd	r23, Z+1	; 0x01
    5bf6:	80 e0       	ldi	r24, 0x00	; 0
    5bf8:	90 e0       	ldi	r25, 0x00	; 0
    5bfa:	0e 5f       	subi	r16, 0xFE	; 254
    5bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    5bfe:	a3 01       	movw	r20, r6
    5c00:	5d d5       	rcall	.+2746   	; 0x66bc <__ultoa_invert>
    5c02:	88 2e       	mov	r8, r24
    5c04:	86 18       	sub	r8, r6
    5c06:	fb 2d       	mov	r31, r11
    5c08:	ff 77       	andi	r31, 0x7F	; 127
    5c0a:	3f 2e       	mov	r3, r31
    5c0c:	36 fe       	sbrs	r3, 6
    5c0e:	0d c0       	rjmp	.+26     	; 0x5c2a <vfprintf+0x2de>
    5c10:	23 2d       	mov	r18, r3
    5c12:	2e 7f       	andi	r18, 0xFE	; 254
    5c14:	a2 2e       	mov	r10, r18
    5c16:	89 14       	cp	r8, r9
    5c18:	58 f4       	brcc	.+22     	; 0x5c30 <vfprintf+0x2e4>
    5c1a:	34 fe       	sbrs	r3, 4
    5c1c:	0b c0       	rjmp	.+22     	; 0x5c34 <vfprintf+0x2e8>
    5c1e:	32 fc       	sbrc	r3, 2
    5c20:	09 c0       	rjmp	.+18     	; 0x5c34 <vfprintf+0x2e8>
    5c22:	83 2d       	mov	r24, r3
    5c24:	8e 7e       	andi	r24, 0xEE	; 238
    5c26:	a8 2e       	mov	r10, r24
    5c28:	05 c0       	rjmp	.+10     	; 0x5c34 <vfprintf+0x2e8>
    5c2a:	b8 2c       	mov	r11, r8
    5c2c:	a3 2c       	mov	r10, r3
    5c2e:	03 c0       	rjmp	.+6      	; 0x5c36 <vfprintf+0x2ea>
    5c30:	b8 2c       	mov	r11, r8
    5c32:	01 c0       	rjmp	.+2      	; 0x5c36 <vfprintf+0x2ea>
    5c34:	b9 2c       	mov	r11, r9
    5c36:	a4 fe       	sbrs	r10, 4
    5c38:	0f c0       	rjmp	.+30     	; 0x5c58 <vfprintf+0x30c>
    5c3a:	fe 01       	movw	r30, r28
    5c3c:	e8 0d       	add	r30, r8
    5c3e:	f1 1d       	adc	r31, r1
    5c40:	80 81       	ld	r24, Z
    5c42:	80 33       	cpi	r24, 0x30	; 48
    5c44:	21 f4       	brne	.+8      	; 0x5c4e <vfprintf+0x302>
    5c46:	9a 2d       	mov	r25, r10
    5c48:	99 7e       	andi	r25, 0xE9	; 233
    5c4a:	a9 2e       	mov	r10, r25
    5c4c:	09 c0       	rjmp	.+18     	; 0x5c60 <vfprintf+0x314>
    5c4e:	a2 fe       	sbrs	r10, 2
    5c50:	06 c0       	rjmp	.+12     	; 0x5c5e <vfprintf+0x312>
    5c52:	b3 94       	inc	r11
    5c54:	b3 94       	inc	r11
    5c56:	04 c0       	rjmp	.+8      	; 0x5c60 <vfprintf+0x314>
    5c58:	8a 2d       	mov	r24, r10
    5c5a:	86 78       	andi	r24, 0x86	; 134
    5c5c:	09 f0       	breq	.+2      	; 0x5c60 <vfprintf+0x314>
    5c5e:	b3 94       	inc	r11
    5c60:	a3 fc       	sbrc	r10, 3
    5c62:	10 c0       	rjmp	.+32     	; 0x5c84 <vfprintf+0x338>
    5c64:	a0 fe       	sbrs	r10, 0
    5c66:	06 c0       	rjmp	.+12     	; 0x5c74 <vfprintf+0x328>
    5c68:	b2 14       	cp	r11, r2
    5c6a:	80 f4       	brcc	.+32     	; 0x5c8c <vfprintf+0x340>
    5c6c:	28 0c       	add	r2, r8
    5c6e:	92 2c       	mov	r9, r2
    5c70:	9b 18       	sub	r9, r11
    5c72:	0d c0       	rjmp	.+26     	; 0x5c8e <vfprintf+0x342>
    5c74:	b2 14       	cp	r11, r2
    5c76:	58 f4       	brcc	.+22     	; 0x5c8e <vfprintf+0x342>
    5c78:	b6 01       	movw	r22, r12
    5c7a:	80 e2       	ldi	r24, 0x20	; 32
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	c9 d4       	rcall	.+2450   	; 0x6612 <fputc>
    5c80:	b3 94       	inc	r11
    5c82:	f8 cf       	rjmp	.-16     	; 0x5c74 <vfprintf+0x328>
    5c84:	b2 14       	cp	r11, r2
    5c86:	18 f4       	brcc	.+6      	; 0x5c8e <vfprintf+0x342>
    5c88:	2b 18       	sub	r2, r11
    5c8a:	02 c0       	rjmp	.+4      	; 0x5c90 <vfprintf+0x344>
    5c8c:	98 2c       	mov	r9, r8
    5c8e:	21 2c       	mov	r2, r1
    5c90:	a4 fe       	sbrs	r10, 4
    5c92:	0f c0       	rjmp	.+30     	; 0x5cb2 <vfprintf+0x366>
    5c94:	b6 01       	movw	r22, r12
    5c96:	80 e3       	ldi	r24, 0x30	; 48
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	bb d4       	rcall	.+2422   	; 0x6612 <fputc>
    5c9c:	a2 fe       	sbrs	r10, 2
    5c9e:	16 c0       	rjmp	.+44     	; 0x5ccc <vfprintf+0x380>
    5ca0:	a1 fc       	sbrc	r10, 1
    5ca2:	03 c0       	rjmp	.+6      	; 0x5caa <vfprintf+0x35e>
    5ca4:	88 e7       	ldi	r24, 0x78	; 120
    5ca6:	90 e0       	ldi	r25, 0x00	; 0
    5ca8:	02 c0       	rjmp	.+4      	; 0x5cae <vfprintf+0x362>
    5caa:	88 e5       	ldi	r24, 0x58	; 88
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	b6 01       	movw	r22, r12
    5cb0:	0c c0       	rjmp	.+24     	; 0x5cca <vfprintf+0x37e>
    5cb2:	8a 2d       	mov	r24, r10
    5cb4:	86 78       	andi	r24, 0x86	; 134
    5cb6:	51 f0       	breq	.+20     	; 0x5ccc <vfprintf+0x380>
    5cb8:	a1 fe       	sbrs	r10, 1
    5cba:	02 c0       	rjmp	.+4      	; 0x5cc0 <vfprintf+0x374>
    5cbc:	8b e2       	ldi	r24, 0x2B	; 43
    5cbe:	01 c0       	rjmp	.+2      	; 0x5cc2 <vfprintf+0x376>
    5cc0:	80 e2       	ldi	r24, 0x20	; 32
    5cc2:	a7 fc       	sbrc	r10, 7
    5cc4:	8d e2       	ldi	r24, 0x2D	; 45
    5cc6:	b6 01       	movw	r22, r12
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	a3 d4       	rcall	.+2374   	; 0x6612 <fputc>
    5ccc:	89 14       	cp	r8, r9
    5cce:	30 f4       	brcc	.+12     	; 0x5cdc <vfprintf+0x390>
    5cd0:	b6 01       	movw	r22, r12
    5cd2:	80 e3       	ldi	r24, 0x30	; 48
    5cd4:	90 e0       	ldi	r25, 0x00	; 0
    5cd6:	9d d4       	rcall	.+2362   	; 0x6612 <fputc>
    5cd8:	9a 94       	dec	r9
    5cda:	f8 cf       	rjmp	.-16     	; 0x5ccc <vfprintf+0x380>
    5cdc:	8a 94       	dec	r8
    5cde:	f3 01       	movw	r30, r6
    5ce0:	e8 0d       	add	r30, r8
    5ce2:	f1 1d       	adc	r31, r1
    5ce4:	80 81       	ld	r24, Z
    5ce6:	b6 01       	movw	r22, r12
    5ce8:	90 e0       	ldi	r25, 0x00	; 0
    5cea:	93 d4       	rcall	.+2342   	; 0x6612 <fputc>
    5cec:	81 10       	cpse	r8, r1
    5cee:	f6 cf       	rjmp	.-20     	; 0x5cdc <vfprintf+0x390>
    5cf0:	22 20       	and	r2, r2
    5cf2:	09 f4       	brne	.+2      	; 0x5cf6 <vfprintf+0x3aa>
    5cf4:	4e ce       	rjmp	.-868    	; 0x5992 <vfprintf+0x46>
    5cf6:	b6 01       	movw	r22, r12
    5cf8:	80 e2       	ldi	r24, 0x20	; 32
    5cfa:	90 e0       	ldi	r25, 0x00	; 0
    5cfc:	8a d4       	rcall	.+2324   	; 0x6612 <fputc>
    5cfe:	2a 94       	dec	r2
    5d00:	f7 cf       	rjmp	.-18     	; 0x5cf0 <vfprintf+0x3a4>
    5d02:	f6 01       	movw	r30, r12
    5d04:	86 81       	ldd	r24, Z+6	; 0x06
    5d06:	97 81       	ldd	r25, Z+7	; 0x07
    5d08:	02 c0       	rjmp	.+4      	; 0x5d0e <vfprintf+0x3c2>
    5d0a:	8f ef       	ldi	r24, 0xFF	; 255
    5d0c:	9f ef       	ldi	r25, 0xFF	; 255
    5d0e:	2b 96       	adiw	r28, 0x0b	; 11
    5d10:	cd bf       	out	0x3d, r28	; 61
    5d12:	de bf       	out	0x3e, r29	; 62
    5d14:	df 91       	pop	r29
    5d16:	cf 91       	pop	r28
    5d18:	1f 91       	pop	r17
    5d1a:	0f 91       	pop	r16
    5d1c:	ff 90       	pop	r15
    5d1e:	ef 90       	pop	r14
    5d20:	df 90       	pop	r13
    5d22:	cf 90       	pop	r12
    5d24:	bf 90       	pop	r11
    5d26:	af 90       	pop	r10
    5d28:	9f 90       	pop	r9
    5d2a:	8f 90       	pop	r8
    5d2c:	7f 90       	pop	r7
    5d2e:	6f 90       	pop	r6
    5d30:	5f 90       	pop	r5
    5d32:	4f 90       	pop	r4
    5d34:	3f 90       	pop	r3
    5d36:	2f 90       	pop	r2
    5d38:	08 95       	ret

00005d3a <putval>:
    5d3a:	20 fd       	sbrc	r18, 0
    5d3c:	09 c0       	rjmp	.+18     	; 0x5d50 <putval+0x16>
    5d3e:	fc 01       	movw	r30, r24
    5d40:	23 fd       	sbrc	r18, 3
    5d42:	05 c0       	rjmp	.+10     	; 0x5d4e <putval+0x14>
    5d44:	22 ff       	sbrs	r18, 2
    5d46:	02 c0       	rjmp	.+4      	; 0x5d4c <putval+0x12>
    5d48:	73 83       	std	Z+3, r23	; 0x03
    5d4a:	62 83       	std	Z+2, r22	; 0x02
    5d4c:	51 83       	std	Z+1, r21	; 0x01
    5d4e:	40 83       	st	Z, r20
    5d50:	08 95       	ret

00005d52 <mulacc>:
    5d52:	44 fd       	sbrc	r20, 4
    5d54:	17 c0       	rjmp	.+46     	; 0x5d84 <mulacc+0x32>
    5d56:	46 fd       	sbrc	r20, 6
    5d58:	17 c0       	rjmp	.+46     	; 0x5d88 <mulacc+0x36>
    5d5a:	ab 01       	movw	r20, r22
    5d5c:	bc 01       	movw	r22, r24
    5d5e:	da 01       	movw	r26, r20
    5d60:	fb 01       	movw	r30, r22
    5d62:	aa 0f       	add	r26, r26
    5d64:	bb 1f       	adc	r27, r27
    5d66:	ee 1f       	adc	r30, r30
    5d68:	ff 1f       	adc	r31, r31
    5d6a:	10 94       	com	r1
    5d6c:	d1 f7       	brne	.-12     	; 0x5d62 <mulacc+0x10>
    5d6e:	4a 0f       	add	r20, r26
    5d70:	5b 1f       	adc	r21, r27
    5d72:	6e 1f       	adc	r22, r30
    5d74:	7f 1f       	adc	r23, r31
    5d76:	cb 01       	movw	r24, r22
    5d78:	ba 01       	movw	r22, r20
    5d7a:	66 0f       	add	r22, r22
    5d7c:	77 1f       	adc	r23, r23
    5d7e:	88 1f       	adc	r24, r24
    5d80:	99 1f       	adc	r25, r25
    5d82:	09 c0       	rjmp	.+18     	; 0x5d96 <mulacc+0x44>
    5d84:	33 e0       	ldi	r19, 0x03	; 3
    5d86:	01 c0       	rjmp	.+2      	; 0x5d8a <mulacc+0x38>
    5d88:	34 e0       	ldi	r19, 0x04	; 4
    5d8a:	66 0f       	add	r22, r22
    5d8c:	77 1f       	adc	r23, r23
    5d8e:	88 1f       	adc	r24, r24
    5d90:	99 1f       	adc	r25, r25
    5d92:	31 50       	subi	r19, 0x01	; 1
    5d94:	d1 f7       	brne	.-12     	; 0x5d8a <mulacc+0x38>
    5d96:	62 0f       	add	r22, r18
    5d98:	71 1d       	adc	r23, r1
    5d9a:	81 1d       	adc	r24, r1
    5d9c:	91 1d       	adc	r25, r1
    5d9e:	08 95       	ret

00005da0 <skip_spaces>:
    5da0:	0f 93       	push	r16
    5da2:	1f 93       	push	r17
    5da4:	cf 93       	push	r28
    5da6:	df 93       	push	r29
    5da8:	8c 01       	movw	r16, r24
    5daa:	c8 01       	movw	r24, r16
    5dac:	f4 d3       	rcall	.+2024   	; 0x6596 <fgetc>
    5dae:	ec 01       	movw	r28, r24
    5db0:	97 fd       	sbrc	r25, 7
    5db2:	06 c0       	rjmp	.+12     	; 0x5dc0 <skip_spaces+0x20>
    5db4:	c0 d3       	rcall	.+1920   	; 0x6536 <isspace>
    5db6:	89 2b       	or	r24, r25
    5db8:	c1 f7       	brne	.-16     	; 0x5daa <skip_spaces+0xa>
    5dba:	b8 01       	movw	r22, r16
    5dbc:	ce 01       	movw	r24, r28
    5dbe:	65 d4       	rcall	.+2250   	; 0x668a <ungetc>
    5dc0:	ce 01       	movw	r24, r28
    5dc2:	df 91       	pop	r29
    5dc4:	cf 91       	pop	r28
    5dc6:	1f 91       	pop	r17
    5dc8:	0f 91       	pop	r16
    5dca:	08 95       	ret

00005dcc <conv_int>:
    5dcc:	8f 92       	push	r8
    5dce:	9f 92       	push	r9
    5dd0:	af 92       	push	r10
    5dd2:	bf 92       	push	r11
    5dd4:	ef 92       	push	r14
    5dd6:	ff 92       	push	r15
    5dd8:	0f 93       	push	r16
    5dda:	1f 93       	push	r17
    5ddc:	cf 93       	push	r28
    5dde:	df 93       	push	r29
    5de0:	8c 01       	movw	r16, r24
    5de2:	d6 2f       	mov	r29, r22
    5de4:	7a 01       	movw	r14, r20
    5de6:	b2 2e       	mov	r11, r18
    5de8:	d6 d3       	rcall	.+1964   	; 0x6596 <fgetc>
    5dea:	9c 01       	movw	r18, r24
    5dec:	33 27       	eor	r19, r19
    5dee:	2b 32       	cpi	r18, 0x2B	; 43
    5df0:	31 05       	cpc	r19, r1
    5df2:	31 f0       	breq	.+12     	; 0x5e00 <conv_int+0x34>
    5df4:	2d 32       	cpi	r18, 0x2D	; 45
    5df6:	31 05       	cpc	r19, r1
    5df8:	59 f4       	brne	.+22     	; 0x5e10 <conv_int+0x44>
    5dfa:	8b 2d       	mov	r24, r11
    5dfc:	80 68       	ori	r24, 0x80	; 128
    5dfe:	b8 2e       	mov	r11, r24
    5e00:	d1 50       	subi	r29, 0x01	; 1
    5e02:	11 f4       	brne	.+4      	; 0x5e08 <conv_int+0x3c>
    5e04:	80 e0       	ldi	r24, 0x00	; 0
    5e06:	61 c0       	rjmp	.+194    	; 0x5eca <conv_int+0xfe>
    5e08:	c8 01       	movw	r24, r16
    5e0a:	c5 d3       	rcall	.+1930   	; 0x6596 <fgetc>
    5e0c:	97 fd       	sbrc	r25, 7
    5e0e:	fa cf       	rjmp	.-12     	; 0x5e04 <conv_int+0x38>
    5e10:	cb 2d       	mov	r28, r11
    5e12:	cd 7f       	andi	r28, 0xFD	; 253
    5e14:	2b 2d       	mov	r18, r11
    5e16:	20 73       	andi	r18, 0x30	; 48
    5e18:	f9 f4       	brne	.+62     	; 0x5e58 <conv_int+0x8c>
    5e1a:	80 33       	cpi	r24, 0x30	; 48
    5e1c:	e9 f4       	brne	.+58     	; 0x5e58 <conv_int+0x8c>
    5e1e:	aa 24       	eor	r10, r10
    5e20:	aa 94       	dec	r10
    5e22:	ad 0e       	add	r10, r29
    5e24:	09 f4       	brne	.+2      	; 0x5e28 <conv_int+0x5c>
    5e26:	3e c0       	rjmp	.+124    	; 0x5ea4 <conv_int+0xd8>
    5e28:	c8 01       	movw	r24, r16
    5e2a:	b5 d3       	rcall	.+1898   	; 0x6596 <fgetc>
    5e2c:	97 fd       	sbrc	r25, 7
    5e2e:	3a c0       	rjmp	.+116    	; 0x5ea4 <conv_int+0xd8>
    5e30:	9c 01       	movw	r18, r24
    5e32:	2f 7d       	andi	r18, 0xDF	; 223
    5e34:	33 27       	eor	r19, r19
    5e36:	28 35       	cpi	r18, 0x58	; 88
    5e38:	31 05       	cpc	r19, r1
    5e3a:	41 f4       	brne	.+16     	; 0x5e4c <conv_int+0x80>
    5e3c:	c2 64       	ori	r28, 0x42	; 66
    5e3e:	d2 50       	subi	r29, 0x02	; 2
    5e40:	89 f1       	breq	.+98     	; 0x5ea4 <conv_int+0xd8>
    5e42:	c8 01       	movw	r24, r16
    5e44:	a8 d3       	rcall	.+1872   	; 0x6596 <fgetc>
    5e46:	97 ff       	sbrs	r25, 7
    5e48:	07 c0       	rjmp	.+14     	; 0x5e58 <conv_int+0x8c>
    5e4a:	2c c0       	rjmp	.+88     	; 0x5ea4 <conv_int+0xd8>
    5e4c:	b6 fe       	sbrs	r11, 6
    5e4e:	02 c0       	rjmp	.+4      	; 0x5e54 <conv_int+0x88>
    5e50:	c2 60       	ori	r28, 0x02	; 2
    5e52:	01 c0       	rjmp	.+2      	; 0x5e56 <conv_int+0x8a>
    5e54:	c2 61       	ori	r28, 0x12	; 18
    5e56:	da 2d       	mov	r29, r10
    5e58:	81 2c       	mov	r8, r1
    5e5a:	91 2c       	mov	r9, r1
    5e5c:	54 01       	movw	r10, r8
    5e5e:	20 ed       	ldi	r18, 0xD0	; 208
    5e60:	28 0f       	add	r18, r24
    5e62:	28 30       	cpi	r18, 0x08	; 8
    5e64:	78 f0       	brcs	.+30     	; 0x5e84 <conv_int+0xb8>
    5e66:	c4 ff       	sbrs	r28, 4
    5e68:	03 c0       	rjmp	.+6      	; 0x5e70 <conv_int+0xa4>
    5e6a:	b8 01       	movw	r22, r16
    5e6c:	0e d4       	rcall	.+2076   	; 0x668a <ungetc>
    5e6e:	17 c0       	rjmp	.+46     	; 0x5e9e <conv_int+0xd2>
    5e70:	2a 30       	cpi	r18, 0x0A	; 10
    5e72:	40 f0       	brcs	.+16     	; 0x5e84 <conv_int+0xb8>
    5e74:	c6 ff       	sbrs	r28, 6
    5e76:	f9 cf       	rjmp	.-14     	; 0x5e6a <conv_int+0x9e>
    5e78:	2f 7d       	andi	r18, 0xDF	; 223
    5e7a:	3f ee       	ldi	r19, 0xEF	; 239
    5e7c:	32 0f       	add	r19, r18
    5e7e:	36 30       	cpi	r19, 0x06	; 6
    5e80:	a0 f7       	brcc	.-24     	; 0x5e6a <conv_int+0x9e>
    5e82:	27 50       	subi	r18, 0x07	; 7
    5e84:	4c 2f       	mov	r20, r28
    5e86:	c5 01       	movw	r24, r10
    5e88:	b4 01       	movw	r22, r8
    5e8a:	63 df       	rcall	.-314    	; 0x5d52 <mulacc>
    5e8c:	4b 01       	movw	r8, r22
    5e8e:	5c 01       	movw	r10, r24
    5e90:	c2 60       	ori	r28, 0x02	; 2
    5e92:	d1 50       	subi	r29, 0x01	; 1
    5e94:	51 f0       	breq	.+20     	; 0x5eaa <conv_int+0xde>
    5e96:	c8 01       	movw	r24, r16
    5e98:	7e d3       	rcall	.+1788   	; 0x6596 <fgetc>
    5e9a:	97 ff       	sbrs	r25, 7
    5e9c:	e0 cf       	rjmp	.-64     	; 0x5e5e <conv_int+0x92>
    5e9e:	c1 fd       	sbrc	r28, 1
    5ea0:	04 c0       	rjmp	.+8      	; 0x5eaa <conv_int+0xde>
    5ea2:	b0 cf       	rjmp	.-160    	; 0x5e04 <conv_int+0x38>
    5ea4:	81 2c       	mov	r8, r1
    5ea6:	91 2c       	mov	r9, r1
    5ea8:	54 01       	movw	r10, r8
    5eaa:	c7 ff       	sbrs	r28, 7
    5eac:	08 c0       	rjmp	.+16     	; 0x5ebe <conv_int+0xf2>
    5eae:	b0 94       	com	r11
    5eb0:	a0 94       	com	r10
    5eb2:	90 94       	com	r9
    5eb4:	80 94       	com	r8
    5eb6:	81 1c       	adc	r8, r1
    5eb8:	91 1c       	adc	r9, r1
    5eba:	a1 1c       	adc	r10, r1
    5ebc:	b1 1c       	adc	r11, r1
    5ebe:	2c 2f       	mov	r18, r28
    5ec0:	b5 01       	movw	r22, r10
    5ec2:	a4 01       	movw	r20, r8
    5ec4:	c7 01       	movw	r24, r14
    5ec6:	39 df       	rcall	.-398    	; 0x5d3a <putval>
    5ec8:	81 e0       	ldi	r24, 0x01	; 1
    5eca:	df 91       	pop	r29
    5ecc:	cf 91       	pop	r28
    5ece:	1f 91       	pop	r17
    5ed0:	0f 91       	pop	r16
    5ed2:	ff 90       	pop	r15
    5ed4:	ef 90       	pop	r14
    5ed6:	bf 90       	pop	r11
    5ed8:	af 90       	pop	r10
    5eda:	9f 90       	pop	r9
    5edc:	8f 90       	pop	r8
    5ede:	08 95       	ret

00005ee0 <conv_brk>:
    5ee0:	5f 92       	push	r5
    5ee2:	6f 92       	push	r6
    5ee4:	7f 92       	push	r7
    5ee6:	8f 92       	push	r8
    5ee8:	9f 92       	push	r9
    5eea:	af 92       	push	r10
    5eec:	bf 92       	push	r11
    5eee:	cf 92       	push	r12
    5ef0:	df 92       	push	r13
    5ef2:	ef 92       	push	r14
    5ef4:	ff 92       	push	r15
    5ef6:	0f 93       	push	r16
    5ef8:	1f 93       	push	r17
    5efa:	cf 93       	push	r28
    5efc:	df 93       	push	r29
    5efe:	cd b7       	in	r28, 0x3d	; 61
    5f00:	de b7       	in	r29, 0x3e	; 62
    5f02:	a0 97       	sbiw	r28, 0x20	; 32
    5f04:	cd bf       	out	0x3d, r28	; 61
    5f06:	de bf       	out	0x3e, r29	; 62
    5f08:	5c 01       	movw	r10, r24
    5f0a:	96 2e       	mov	r9, r22
    5f0c:	7a 01       	movw	r14, r20
    5f0e:	f9 01       	movw	r30, r18
    5f10:	8e 01       	movw	r16, r28
    5f12:	0f 5f       	subi	r16, 0xFF	; 255
    5f14:	1f 4f       	sbci	r17, 0xFF	; 255
    5f16:	68 01       	movw	r12, r16
    5f18:	80 e2       	ldi	r24, 0x20	; 32
    5f1a:	d8 01       	movw	r26, r16
    5f1c:	1d 92       	st	X+, r1
    5f1e:	8a 95       	dec	r24
    5f20:	e9 f7       	brne	.-6      	; 0x5f1c <conv_brk+0x3c>
    5f22:	d5 01       	movw	r26, r10
    5f24:	13 96       	adiw	r26, 0x03	; 3
    5f26:	8c 90       	ld	r8, X
    5f28:	80 e0       	ldi	r24, 0x00	; 0
    5f2a:	90 e0       	ldi	r25, 0x00	; 0
    5f2c:	61 2c       	mov	r6, r1
    5f2e:	71 2c       	mov	r7, r1
    5f30:	30 e0       	ldi	r19, 0x00	; 0
    5f32:	61 e0       	ldi	r22, 0x01	; 1
    5f34:	70 e0       	ldi	r23, 0x00	; 0
    5f36:	83 fc       	sbrc	r8, 3
    5f38:	25 91       	lpm	r18, Z+
    5f3a:	83 fe       	sbrs	r8, 3
    5f3c:	21 91       	ld	r18, Z+
    5f3e:	8f 01       	movw	r16, r30
    5f40:	52 2e       	mov	r5, r18
    5f42:	21 11       	cpse	r18, r1
    5f44:	03 c0       	rjmp	.+6      	; 0x5f4c <conv_brk+0x6c>
    5f46:	80 e0       	ldi	r24, 0x00	; 0
    5f48:	90 e0       	ldi	r25, 0x00	; 0
    5f4a:	90 c0       	rjmp	.+288    	; 0x606c <conv_brk+0x18c>
    5f4c:	2e 35       	cpi	r18, 0x5E	; 94
    5f4e:	11 f4       	brne	.+4      	; 0x5f54 <conv_brk+0x74>
    5f50:	00 97       	sbiw	r24, 0x00	; 0
    5f52:	51 f1       	breq	.+84     	; 0x5fa8 <conv_brk+0xc8>
    5f54:	43 2f       	mov	r20, r19
    5f56:	50 e0       	ldi	r21, 0x00	; 0
    5f58:	48 17       	cp	r20, r24
    5f5a:	59 07       	cpc	r21, r25
    5f5c:	3c f4       	brge	.+14     	; 0x5f6c <conv_brk+0x8c>
    5f5e:	2d 35       	cpi	r18, 0x5D	; 93
    5f60:	59 f1       	breq	.+86     	; 0x5fb8 <conv_brk+0xd8>
    5f62:	2d 32       	cpi	r18, 0x2D	; 45
    5f64:	19 f4       	brne	.+6      	; 0x5f6c <conv_brk+0x8c>
    5f66:	77 20       	and	r7, r7
    5f68:	09 f1       	breq	.+66     	; 0x5fac <conv_brk+0xcc>
    5f6a:	03 c0       	rjmp	.+6      	; 0x5f72 <conv_brk+0x92>
    5f6c:	77 20       	and	r7, r7
    5f6e:	09 f4       	brne	.+2      	; 0x5f72 <conv_brk+0x92>
    5f70:	68 c0       	rjmp	.+208    	; 0x6042 <conv_brk+0x162>
    5f72:	45 2d       	mov	r20, r5
    5f74:	46 95       	lsr	r20
    5f76:	46 95       	lsr	r20
    5f78:	46 95       	lsr	r20
    5f7a:	d6 01       	movw	r26, r12
    5f7c:	a4 0f       	add	r26, r20
    5f7e:	b1 1d       	adc	r27, r1
    5f80:	45 2d       	mov	r20, r5
    5f82:	47 70       	andi	r20, 0x07	; 7
    5f84:	8b 01       	movw	r16, r22
    5f86:	02 c0       	rjmp	.+4      	; 0x5f8c <conv_brk+0xac>
    5f88:	00 0f       	add	r16, r16
    5f8a:	11 1f       	adc	r17, r17
    5f8c:	4a 95       	dec	r20
    5f8e:	e2 f7       	brpl	.-8      	; 0x5f88 <conv_brk+0xa8>
    5f90:	a8 01       	movw	r20, r16
    5f92:	5c 91       	ld	r21, X
    5f94:	45 2b       	or	r20, r21
    5f96:	4c 93       	st	X, r20
    5f98:	65 14       	cp	r6, r5
    5f9a:	59 f0       	breq	.+22     	; 0x5fb2 <conv_brk+0xd2>
    5f9c:	56 14       	cp	r5, r6
    5f9e:	10 f4       	brcc	.+4      	; 0x5fa4 <conv_brk+0xc4>
    5fa0:	53 94       	inc	r5
    5fa2:	e7 cf       	rjmp	.-50     	; 0x5f72 <conv_brk+0x92>
    5fa4:	5a 94       	dec	r5
    5fa6:	e5 cf       	rjmp	.-54     	; 0x5f72 <conv_brk+0x92>
    5fa8:	31 e0       	ldi	r19, 0x01	; 1
    5faa:	04 c0       	rjmp	.+8      	; 0x5fb4 <conv_brk+0xd4>
    5fac:	77 24       	eor	r7, r7
    5fae:	73 94       	inc	r7
    5fb0:	01 c0       	rjmp	.+2      	; 0x5fb4 <conv_brk+0xd4>
    5fb2:	71 2c       	mov	r7, r1
    5fb4:	01 96       	adiw	r24, 0x01	; 1
    5fb6:	bf cf       	rjmp	.-130    	; 0x5f36 <conv_brk+0x56>
    5fb8:	77 20       	and	r7, r7
    5fba:	19 f0       	breq	.+6      	; 0x5fc2 <conv_brk+0xe2>
    5fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    5fbe:	80 62       	ori	r24, 0x20	; 32
    5fc0:	8e 83       	std	Y+6, r24	; 0x06
    5fc2:	31 11       	cpse	r19, r1
    5fc4:	03 c0       	rjmp	.+6      	; 0x5fcc <conv_brk+0xec>
    5fc6:	88 24       	eor	r8, r8
    5fc8:	83 94       	inc	r8
    5fca:	17 c0       	rjmp	.+46     	; 0x5ffa <conv_brk+0x11a>
    5fcc:	f6 01       	movw	r30, r12
    5fce:	9e 01       	movw	r18, r28
    5fd0:	2f 5d       	subi	r18, 0xDF	; 223
    5fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd4:	80 81       	ld	r24, Z
    5fd6:	80 95       	com	r24
    5fd8:	81 93       	st	Z+, r24
    5fda:	2e 17       	cp	r18, r30
    5fdc:	3f 07       	cpc	r19, r31
    5fde:	d1 f7       	brne	.-12     	; 0x5fd4 <conv_brk+0xf4>
    5fe0:	f2 cf       	rjmp	.-28     	; 0x5fc6 <conv_brk+0xe6>
    5fe2:	e1 14       	cp	r14, r1
    5fe4:	f1 04       	cpc	r15, r1
    5fe6:	29 f0       	breq	.+10     	; 0x5ff2 <conv_brk+0x112>
    5fe8:	d7 01       	movw	r26, r14
    5fea:	8c 93       	st	X, r24
    5fec:	f7 01       	movw	r30, r14
    5fee:	31 96       	adiw	r30, 0x01	; 1
    5ff0:	7f 01       	movw	r14, r30
    5ff2:	9a 94       	dec	r9
    5ff4:	81 2c       	mov	r8, r1
    5ff6:	99 20       	and	r9, r9
    5ff8:	e9 f0       	breq	.+58     	; 0x6034 <conv_brk+0x154>
    5ffa:	c5 01       	movw	r24, r10
    5ffc:	cc d2       	rcall	.+1432   	; 0x6596 <fgetc>
    5ffe:	97 fd       	sbrc	r25, 7
    6000:	17 c0       	rjmp	.+46     	; 0x6030 <conv_brk+0x150>
    6002:	fc 01       	movw	r30, r24
    6004:	ff 27       	eor	r31, r31
    6006:	23 e0       	ldi	r18, 0x03	; 3
    6008:	f5 95       	asr	r31
    600a:	e7 95       	ror	r30
    600c:	2a 95       	dec	r18
    600e:	e1 f7       	brne	.-8      	; 0x6008 <conv_brk+0x128>
    6010:	ec 0d       	add	r30, r12
    6012:	fd 1d       	adc	r31, r13
    6014:	20 81       	ld	r18, Z
    6016:	30 e0       	ldi	r19, 0x00	; 0
    6018:	ac 01       	movw	r20, r24
    601a:	47 70       	andi	r20, 0x07	; 7
    601c:	55 27       	eor	r21, r21
    601e:	02 c0       	rjmp	.+4      	; 0x6024 <conv_brk+0x144>
    6020:	35 95       	asr	r19
    6022:	27 95       	ror	r18
    6024:	4a 95       	dec	r20
    6026:	e2 f7       	brpl	.-8      	; 0x6020 <conv_brk+0x140>
    6028:	20 fd       	sbrc	r18, 0
    602a:	db cf       	rjmp	.-74     	; 0x5fe2 <conv_brk+0x102>
    602c:	b5 01       	movw	r22, r10
    602e:	2d d3       	rcall	.+1626   	; 0x668a <ungetc>
    6030:	81 10       	cpse	r8, r1
    6032:	89 cf       	rjmp	.-238    	; 0x5f46 <conv_brk+0x66>
    6034:	e1 14       	cp	r14, r1
    6036:	f1 04       	cpc	r15, r1
    6038:	11 f0       	breq	.+4      	; 0x603e <conv_brk+0x15e>
    603a:	d7 01       	movw	r26, r14
    603c:	1c 92       	st	X, r1
    603e:	c8 01       	movw	r24, r16
    6040:	15 c0       	rjmp	.+42     	; 0x606c <conv_brk+0x18c>
    6042:	42 2f       	mov	r20, r18
    6044:	46 95       	lsr	r20
    6046:	46 95       	lsr	r20
    6048:	46 95       	lsr	r20
    604a:	d6 01       	movw	r26, r12
    604c:	a4 0f       	add	r26, r20
    604e:	b1 1d       	adc	r27, r1
    6050:	42 2f       	mov	r20, r18
    6052:	47 70       	andi	r20, 0x07	; 7
    6054:	8b 01       	movw	r16, r22
    6056:	02 c0       	rjmp	.+4      	; 0x605c <conv_brk+0x17c>
    6058:	00 0f       	add	r16, r16
    605a:	11 1f       	adc	r17, r17
    605c:	4a 95       	dec	r20
    605e:	e2 f7       	brpl	.-8      	; 0x6058 <conv_brk+0x178>
    6060:	a8 01       	movw	r20, r16
    6062:	5c 91       	ld	r21, X
    6064:	45 2b       	or	r20, r21
    6066:	4c 93       	st	X, r20
    6068:	62 2e       	mov	r6, r18
    606a:	a4 cf       	rjmp	.-184    	; 0x5fb4 <conv_brk+0xd4>
    606c:	a0 96       	adiw	r28, 0x20	; 32
    606e:	cd bf       	out	0x3d, r28	; 61
    6070:	de bf       	out	0x3e, r29	; 62
    6072:	df 91       	pop	r29
    6074:	cf 91       	pop	r28
    6076:	1f 91       	pop	r17
    6078:	0f 91       	pop	r16
    607a:	ff 90       	pop	r15
    607c:	ef 90       	pop	r14
    607e:	df 90       	pop	r13
    6080:	cf 90       	pop	r12
    6082:	bf 90       	pop	r11
    6084:	af 90       	pop	r10
    6086:	9f 90       	pop	r9
    6088:	8f 90       	pop	r8
    608a:	7f 90       	pop	r7
    608c:	6f 90       	pop	r6
    608e:	5f 90       	pop	r5
    6090:	08 95       	ret

00006092 <vfscanf>:
    6092:	5f 92       	push	r5
    6094:	6f 92       	push	r6
    6096:	7f 92       	push	r7
    6098:	8f 92       	push	r8
    609a:	9f 92       	push	r9
    609c:	af 92       	push	r10
    609e:	bf 92       	push	r11
    60a0:	cf 92       	push	r12
    60a2:	df 92       	push	r13
    60a4:	ef 92       	push	r14
    60a6:	ff 92       	push	r15
    60a8:	0f 93       	push	r16
    60aa:	1f 93       	push	r17
    60ac:	cf 93       	push	r28
    60ae:	df 93       	push	r29
    60b0:	6c 01       	movw	r12, r24
    60b2:	eb 01       	movw	r28, r22
    60b4:	5a 01       	movw	r10, r20
    60b6:	fc 01       	movw	r30, r24
    60b8:	16 82       	std	Z+6, r1	; 0x06
    60ba:	17 82       	std	Z+7, r1	; 0x07
    60bc:	51 2c       	mov	r5, r1
    60be:	f6 01       	movw	r30, r12
    60c0:	e3 80       	ldd	r14, Z+3	; 0x03
    60c2:	fe 01       	movw	r30, r28
    60c4:	e3 fc       	sbrc	r14, 3
    60c6:	85 91       	lpm	r24, Z+
    60c8:	e3 fe       	sbrs	r14, 3
    60ca:	81 91       	ld	r24, Z+
    60cc:	18 2f       	mov	r17, r24
    60ce:	ef 01       	movw	r28, r30
    60d0:	88 23       	and	r24, r24
    60d2:	09 f4       	brne	.+2      	; 0x60d6 <vfscanf+0x44>
    60d4:	e0 c0       	rjmp	.+448    	; 0x6296 <vfscanf+0x204>
    60d6:	90 e0       	ldi	r25, 0x00	; 0
    60d8:	2e d2       	rcall	.+1116   	; 0x6536 <isspace>
    60da:	89 2b       	or	r24, r25
    60dc:	19 f0       	breq	.+6      	; 0x60e4 <vfscanf+0x52>
    60de:	c6 01       	movw	r24, r12
    60e0:	5f de       	rcall	.-834    	; 0x5da0 <skip_spaces>
    60e2:	ed cf       	rjmp	.-38     	; 0x60be <vfscanf+0x2c>
    60e4:	15 32       	cpi	r17, 0x25	; 37
    60e6:	41 f4       	brne	.+16     	; 0x60f8 <vfscanf+0x66>
    60e8:	fe 01       	movw	r30, r28
    60ea:	e3 fc       	sbrc	r14, 3
    60ec:	15 91       	lpm	r17, Z+
    60ee:	e3 fe       	sbrs	r14, 3
    60f0:	11 91       	ld	r17, Z+
    60f2:	ef 01       	movw	r28, r30
    60f4:	15 32       	cpi	r17, 0x25	; 37
    60f6:	71 f4       	brne	.+28     	; 0x6114 <vfscanf+0x82>
    60f8:	c6 01       	movw	r24, r12
    60fa:	4d d2       	rcall	.+1178   	; 0x6596 <fgetc>
    60fc:	97 fd       	sbrc	r25, 7
    60fe:	c9 c0       	rjmp	.+402    	; 0x6292 <vfscanf+0x200>
    6100:	41 2f       	mov	r20, r17
    6102:	50 e0       	ldi	r21, 0x00	; 0
    6104:	9c 01       	movw	r18, r24
    6106:	33 27       	eor	r19, r19
    6108:	24 17       	cp	r18, r20
    610a:	35 07       	cpc	r19, r21
    610c:	c1 f2       	breq	.-80     	; 0x60be <vfscanf+0x2c>
    610e:	b6 01       	movw	r22, r12
    6110:	bc d2       	rcall	.+1400   	; 0x668a <ungetc>
    6112:	c1 c0       	rjmp	.+386    	; 0x6296 <vfscanf+0x204>
    6114:	1a 32       	cpi	r17, 0x2A	; 42
    6116:	39 f4       	brne	.+14     	; 0x6126 <vfscanf+0x94>
    6118:	e3 fc       	sbrc	r14, 3
    611a:	15 91       	lpm	r17, Z+
    611c:	e3 fe       	sbrs	r14, 3
    611e:	11 91       	ld	r17, Z+
    6120:	ef 01       	movw	r28, r30
    6122:	01 e0       	ldi	r16, 0x01	; 1
    6124:	01 c0       	rjmp	.+2      	; 0x6128 <vfscanf+0x96>
    6126:	00 e0       	ldi	r16, 0x00	; 0
    6128:	f1 2c       	mov	r15, r1
    612a:	20 ed       	ldi	r18, 0xD0	; 208
    612c:	21 0f       	add	r18, r17
    612e:	2a 30       	cpi	r18, 0x0A	; 10
    6130:	78 f4       	brcc	.+30     	; 0x6150 <vfscanf+0xbe>
    6132:	02 60       	ori	r16, 0x02	; 2
    6134:	6f 2d       	mov	r22, r15
    6136:	70 e0       	ldi	r23, 0x00	; 0
    6138:	80 e0       	ldi	r24, 0x00	; 0
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	40 e2       	ldi	r20, 0x20	; 32
    613e:	09 de       	rcall	.-1006   	; 0x5d52 <mulacc>
    6140:	f6 2e       	mov	r15, r22
    6142:	fe 01       	movw	r30, r28
    6144:	e3 fc       	sbrc	r14, 3
    6146:	15 91       	lpm	r17, Z+
    6148:	e3 fe       	sbrs	r14, 3
    614a:	11 91       	ld	r17, Z+
    614c:	ef 01       	movw	r28, r30
    614e:	ed cf       	rjmp	.-38     	; 0x612a <vfscanf+0x98>
    6150:	01 ff       	sbrs	r16, 1
    6152:	03 c0       	rjmp	.+6      	; 0x615a <vfscanf+0xc8>
    6154:	f1 10       	cpse	r15, r1
    6156:	03 c0       	rjmp	.+6      	; 0x615e <vfscanf+0xcc>
    6158:	9e c0       	rjmp	.+316    	; 0x6296 <vfscanf+0x204>
    615a:	ff 24       	eor	r15, r15
    615c:	fa 94       	dec	r15
    615e:	18 36       	cpi	r17, 0x68	; 104
    6160:	19 f0       	breq	.+6      	; 0x6168 <vfscanf+0xd6>
    6162:	1c 36       	cpi	r17, 0x6C	; 108
    6164:	51 f0       	breq	.+20     	; 0x617a <vfscanf+0xe8>
    6166:	10 c0       	rjmp	.+32     	; 0x6188 <vfscanf+0xf6>
    6168:	fe 01       	movw	r30, r28
    616a:	e3 fc       	sbrc	r14, 3
    616c:	15 91       	lpm	r17, Z+
    616e:	e3 fe       	sbrs	r14, 3
    6170:	11 91       	ld	r17, Z+
    6172:	ef 01       	movw	r28, r30
    6174:	18 36       	cpi	r17, 0x68	; 104
    6176:	41 f4       	brne	.+16     	; 0x6188 <vfscanf+0xf6>
    6178:	08 60       	ori	r16, 0x08	; 8
    617a:	04 60       	ori	r16, 0x04	; 4
    617c:	fe 01       	movw	r30, r28
    617e:	e3 fc       	sbrc	r14, 3
    6180:	15 91       	lpm	r17, Z+
    6182:	e3 fe       	sbrs	r14, 3
    6184:	11 91       	ld	r17, Z+
    6186:	ef 01       	movw	r28, r30
    6188:	11 23       	and	r17, r17
    618a:	09 f4       	brne	.+2      	; 0x618e <vfscanf+0xfc>
    618c:	84 c0       	rjmp	.+264    	; 0x6296 <vfscanf+0x204>
    618e:	61 2f       	mov	r22, r17
    6190:	70 e0       	ldi	r23, 0x00	; 0
    6192:	84 ea       	ldi	r24, 0xA4	; 164
    6194:	92 e0       	ldi	r25, 0x02	; 2
    6196:	d7 d1       	rcall	.+942    	; 0x6546 <strchr_P>
    6198:	89 2b       	or	r24, r25
    619a:	09 f4       	brne	.+2      	; 0x619e <vfscanf+0x10c>
    619c:	7c c0       	rjmp	.+248    	; 0x6296 <vfscanf+0x204>
    619e:	00 fd       	sbrc	r16, 0
    61a0:	07 c0       	rjmp	.+14     	; 0x61b0 <vfscanf+0x11e>
    61a2:	f5 01       	movw	r30, r10
    61a4:	80 80       	ld	r8, Z
    61a6:	91 80       	ldd	r9, Z+1	; 0x01
    61a8:	c5 01       	movw	r24, r10
    61aa:	02 96       	adiw	r24, 0x02	; 2
    61ac:	5c 01       	movw	r10, r24
    61ae:	02 c0       	rjmp	.+4      	; 0x61b4 <vfscanf+0x122>
    61b0:	81 2c       	mov	r8, r1
    61b2:	91 2c       	mov	r9, r1
    61b4:	1e 36       	cpi	r17, 0x6E	; 110
    61b6:	49 f4       	brne	.+18     	; 0x61ca <vfscanf+0x138>
    61b8:	f6 01       	movw	r30, r12
    61ba:	46 81       	ldd	r20, Z+6	; 0x06
    61bc:	57 81       	ldd	r21, Z+7	; 0x07
    61be:	60 e0       	ldi	r22, 0x00	; 0
    61c0:	70 e0       	ldi	r23, 0x00	; 0
    61c2:	20 2f       	mov	r18, r16
    61c4:	c4 01       	movw	r24, r8
    61c6:	b9 dd       	rcall	.-1166   	; 0x5d3a <putval>
    61c8:	7a cf       	rjmp	.-268    	; 0x60be <vfscanf+0x2c>
    61ca:	13 36       	cpi	r17, 0x63	; 99
    61cc:	a1 f4       	brne	.+40     	; 0x61f6 <vfscanf+0x164>
    61ce:	01 fd       	sbrc	r16, 1
    61d0:	02 c0       	rjmp	.+4      	; 0x61d6 <vfscanf+0x144>
    61d2:	ff 24       	eor	r15, r15
    61d4:	f3 94       	inc	r15
    61d6:	c6 01       	movw	r24, r12
    61d8:	de d1       	rcall	.+956    	; 0x6596 <fgetc>
    61da:	97 fd       	sbrc	r25, 7
    61dc:	5a c0       	rjmp	.+180    	; 0x6292 <vfscanf+0x200>
    61de:	81 14       	cp	r8, r1
    61e0:	91 04       	cpc	r9, r1
    61e2:	29 f0       	breq	.+10     	; 0x61ee <vfscanf+0x15c>
    61e4:	f4 01       	movw	r30, r8
    61e6:	80 83       	st	Z, r24
    61e8:	c4 01       	movw	r24, r8
    61ea:	01 96       	adiw	r24, 0x01	; 1
    61ec:	4c 01       	movw	r8, r24
    61ee:	fa 94       	dec	r15
    61f0:	f1 10       	cpse	r15, r1
    61f2:	f1 cf       	rjmp	.-30     	; 0x61d6 <vfscanf+0x144>
    61f4:	4a c0       	rjmp	.+148    	; 0x628a <vfscanf+0x1f8>
    61f6:	1b 35       	cpi	r17, 0x5B	; 91
    61f8:	51 f4       	brne	.+20     	; 0x620e <vfscanf+0x17c>
    61fa:	9e 01       	movw	r18, r28
    61fc:	a4 01       	movw	r20, r8
    61fe:	6f 2d       	mov	r22, r15
    6200:	c6 01       	movw	r24, r12
    6202:	6e de       	rcall	.-804    	; 0x5ee0 <conv_brk>
    6204:	ec 01       	movw	r28, r24
    6206:	89 2b       	or	r24, r25
    6208:	09 f0       	breq	.+2      	; 0x620c <vfscanf+0x17a>
    620a:	3f c0       	rjmp	.+126    	; 0x628a <vfscanf+0x1f8>
    620c:	39 c0       	rjmp	.+114    	; 0x6280 <vfscanf+0x1ee>
    620e:	c6 01       	movw	r24, r12
    6210:	c7 dd       	rcall	.-1138   	; 0x5da0 <skip_spaces>
    6212:	97 fd       	sbrc	r25, 7
    6214:	3e c0       	rjmp	.+124    	; 0x6292 <vfscanf+0x200>
    6216:	1f 36       	cpi	r17, 0x6F	; 111
    6218:	49 f1       	breq	.+82     	; 0x626c <vfscanf+0x1da>
    621a:	28 f4       	brcc	.+10     	; 0x6226 <vfscanf+0x194>
    621c:	14 36       	cpi	r17, 0x64	; 100
    621e:	21 f1       	breq	.+72     	; 0x6268 <vfscanf+0x1d6>
    6220:	19 36       	cpi	r17, 0x69	; 105
    6222:	39 f1       	breq	.+78     	; 0x6272 <vfscanf+0x1e0>
    6224:	25 c0       	rjmp	.+74     	; 0x6270 <vfscanf+0x1de>
    6226:	13 37       	cpi	r17, 0x73	; 115
    6228:	71 f0       	breq	.+28     	; 0x6246 <vfscanf+0x1b4>
    622a:	15 37       	cpi	r17, 0x75	; 117
    622c:	e9 f0       	breq	.+58     	; 0x6268 <vfscanf+0x1d6>
    622e:	20 c0       	rjmp	.+64     	; 0x6270 <vfscanf+0x1de>
    6230:	81 14       	cp	r8, r1
    6232:	91 04       	cpc	r9, r1
    6234:	29 f0       	breq	.+10     	; 0x6240 <vfscanf+0x1ae>
    6236:	f4 01       	movw	r30, r8
    6238:	60 82       	st	Z, r6
    623a:	c4 01       	movw	r24, r8
    623c:	01 96       	adiw	r24, 0x01	; 1
    623e:	4c 01       	movw	r8, r24
    6240:	fa 94       	dec	r15
    6242:	ff 20       	and	r15, r15
    6244:	59 f0       	breq	.+22     	; 0x625c <vfscanf+0x1ca>
    6246:	c6 01       	movw	r24, r12
    6248:	a6 d1       	rcall	.+844    	; 0x6596 <fgetc>
    624a:	3c 01       	movw	r6, r24
    624c:	97 fd       	sbrc	r25, 7
    624e:	06 c0       	rjmp	.+12     	; 0x625c <vfscanf+0x1ca>
    6250:	72 d1       	rcall	.+740    	; 0x6536 <isspace>
    6252:	89 2b       	or	r24, r25
    6254:	69 f3       	breq	.-38     	; 0x6230 <vfscanf+0x19e>
    6256:	b6 01       	movw	r22, r12
    6258:	c3 01       	movw	r24, r6
    625a:	17 d2       	rcall	.+1070   	; 0x668a <ungetc>
    625c:	81 14       	cp	r8, r1
    625e:	91 04       	cpc	r9, r1
    6260:	a1 f0       	breq	.+40     	; 0x628a <vfscanf+0x1f8>
    6262:	f4 01       	movw	r30, r8
    6264:	10 82       	st	Z, r1
    6266:	11 c0       	rjmp	.+34     	; 0x628a <vfscanf+0x1f8>
    6268:	00 62       	ori	r16, 0x20	; 32
    626a:	03 c0       	rjmp	.+6      	; 0x6272 <vfscanf+0x1e0>
    626c:	00 61       	ori	r16, 0x10	; 16
    626e:	01 c0       	rjmp	.+2      	; 0x6272 <vfscanf+0x1e0>
    6270:	00 64       	ori	r16, 0x40	; 64
    6272:	20 2f       	mov	r18, r16
    6274:	a4 01       	movw	r20, r8
    6276:	6f 2d       	mov	r22, r15
    6278:	c6 01       	movw	r24, r12
    627a:	a8 dd       	rcall	.-1200   	; 0x5dcc <conv_int>
    627c:	81 11       	cpse	r24, r1
    627e:	05 c0       	rjmp	.+10     	; 0x628a <vfscanf+0x1f8>
    6280:	f6 01       	movw	r30, r12
    6282:	83 81       	ldd	r24, Z+3	; 0x03
    6284:	80 73       	andi	r24, 0x30	; 48
    6286:	29 f4       	brne	.+10     	; 0x6292 <vfscanf+0x200>
    6288:	06 c0       	rjmp	.+12     	; 0x6296 <vfscanf+0x204>
    628a:	00 fd       	sbrc	r16, 0
    628c:	18 cf       	rjmp	.-464    	; 0x60be <vfscanf+0x2c>
    628e:	53 94       	inc	r5
    6290:	16 cf       	rjmp	.-468    	; 0x60be <vfscanf+0x2c>
    6292:	55 20       	and	r5, r5
    6294:	19 f0       	breq	.+6      	; 0x629c <vfscanf+0x20a>
    6296:	85 2d       	mov	r24, r5
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	02 c0       	rjmp	.+4      	; 0x62a0 <vfscanf+0x20e>
    629c:	8f ef       	ldi	r24, 0xFF	; 255
    629e:	9f ef       	ldi	r25, 0xFF	; 255
    62a0:	df 91       	pop	r29
    62a2:	cf 91       	pop	r28
    62a4:	1f 91       	pop	r17
    62a6:	0f 91       	pop	r16
    62a8:	ff 90       	pop	r15
    62aa:	ef 90       	pop	r14
    62ac:	df 90       	pop	r13
    62ae:	cf 90       	pop	r12
    62b0:	bf 90       	pop	r11
    62b2:	af 90       	pop	r10
    62b4:	9f 90       	pop	r9
    62b6:	8f 90       	pop	r8
    62b8:	7f 90       	pop	r7
    62ba:	6f 90       	pop	r6
    62bc:	5f 90       	pop	r5
    62be:	08 95       	ret

000062c0 <calloc>:
    62c0:	0f 93       	push	r16
    62c2:	1f 93       	push	r17
    62c4:	cf 93       	push	r28
    62c6:	df 93       	push	r29
    62c8:	86 9f       	mul	r24, r22
    62ca:	80 01       	movw	r16, r0
    62cc:	87 9f       	mul	r24, r23
    62ce:	10 0d       	add	r17, r0
    62d0:	96 9f       	mul	r25, r22
    62d2:	10 0d       	add	r17, r0
    62d4:	11 24       	eor	r1, r1
    62d6:	c8 01       	movw	r24, r16
    62d8:	0d d0       	rcall	.+26     	; 0x62f4 <malloc>
    62da:	ec 01       	movw	r28, r24
    62dc:	00 97       	sbiw	r24, 0x00	; 0
    62de:	21 f0       	breq	.+8      	; 0x62e8 <calloc+0x28>
    62e0:	a8 01       	movw	r20, r16
    62e2:	60 e0       	ldi	r22, 0x00	; 0
    62e4:	70 e0       	ldi	r23, 0x00	; 0
    62e6:	45 d1       	rcall	.+650    	; 0x6572 <memset>
    62e8:	ce 01       	movw	r24, r28
    62ea:	df 91       	pop	r29
    62ec:	cf 91       	pop	r28
    62ee:	1f 91       	pop	r17
    62f0:	0f 91       	pop	r16
    62f2:	08 95       	ret

000062f4 <malloc>:
    62f4:	0f 93       	push	r16
    62f6:	1f 93       	push	r17
    62f8:	cf 93       	push	r28
    62fa:	df 93       	push	r29
    62fc:	82 30       	cpi	r24, 0x02	; 2
    62fe:	91 05       	cpc	r25, r1
    6300:	10 f4       	brcc	.+4      	; 0x6306 <malloc+0x12>
    6302:	82 e0       	ldi	r24, 0x02	; 2
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	e0 91 15 22 	lds	r30, 0x2215	; 0x802215 <__flp>
    630a:	f0 91 16 22 	lds	r31, 0x2216	; 0x802216 <__flp+0x1>
    630e:	20 e0       	ldi	r18, 0x00	; 0
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	a0 e0       	ldi	r26, 0x00	; 0
    6314:	b0 e0       	ldi	r27, 0x00	; 0
    6316:	30 97       	sbiw	r30, 0x00	; 0
    6318:	19 f1       	breq	.+70     	; 0x6360 <malloc+0x6c>
    631a:	40 81       	ld	r20, Z
    631c:	51 81       	ldd	r21, Z+1	; 0x01
    631e:	02 81       	ldd	r16, Z+2	; 0x02
    6320:	13 81       	ldd	r17, Z+3	; 0x03
    6322:	48 17       	cp	r20, r24
    6324:	59 07       	cpc	r21, r25
    6326:	c8 f0       	brcs	.+50     	; 0x635a <malloc+0x66>
    6328:	84 17       	cp	r24, r20
    632a:	95 07       	cpc	r25, r21
    632c:	69 f4       	brne	.+26     	; 0x6348 <malloc+0x54>
    632e:	10 97       	sbiw	r26, 0x00	; 0
    6330:	31 f0       	breq	.+12     	; 0x633e <malloc+0x4a>
    6332:	12 96       	adiw	r26, 0x02	; 2
    6334:	0c 93       	st	X, r16
    6336:	12 97       	sbiw	r26, 0x02	; 2
    6338:	13 96       	adiw	r26, 0x03	; 3
    633a:	1c 93       	st	X, r17
    633c:	27 c0       	rjmp	.+78     	; 0x638c <malloc+0x98>
    633e:	00 93 15 22 	sts	0x2215, r16	; 0x802215 <__flp>
    6342:	10 93 16 22 	sts	0x2216, r17	; 0x802216 <__flp+0x1>
    6346:	22 c0       	rjmp	.+68     	; 0x638c <malloc+0x98>
    6348:	21 15       	cp	r18, r1
    634a:	31 05       	cpc	r19, r1
    634c:	19 f0       	breq	.+6      	; 0x6354 <malloc+0x60>
    634e:	42 17       	cp	r20, r18
    6350:	53 07       	cpc	r21, r19
    6352:	18 f4       	brcc	.+6      	; 0x635a <malloc+0x66>
    6354:	9a 01       	movw	r18, r20
    6356:	bd 01       	movw	r22, r26
    6358:	ef 01       	movw	r28, r30
    635a:	df 01       	movw	r26, r30
    635c:	f8 01       	movw	r30, r16
    635e:	db cf       	rjmp	.-74     	; 0x6316 <malloc+0x22>
    6360:	21 15       	cp	r18, r1
    6362:	31 05       	cpc	r19, r1
    6364:	f9 f0       	breq	.+62     	; 0x63a4 <malloc+0xb0>
    6366:	28 1b       	sub	r18, r24
    6368:	39 0b       	sbc	r19, r25
    636a:	24 30       	cpi	r18, 0x04	; 4
    636c:	31 05       	cpc	r19, r1
    636e:	80 f4       	brcc	.+32     	; 0x6390 <malloc+0x9c>
    6370:	8a 81       	ldd	r24, Y+2	; 0x02
    6372:	9b 81       	ldd	r25, Y+3	; 0x03
    6374:	61 15       	cp	r22, r1
    6376:	71 05       	cpc	r23, r1
    6378:	21 f0       	breq	.+8      	; 0x6382 <malloc+0x8e>
    637a:	fb 01       	movw	r30, r22
    637c:	82 83       	std	Z+2, r24	; 0x02
    637e:	93 83       	std	Z+3, r25	; 0x03
    6380:	04 c0       	rjmp	.+8      	; 0x638a <malloc+0x96>
    6382:	80 93 15 22 	sts	0x2215, r24	; 0x802215 <__flp>
    6386:	90 93 16 22 	sts	0x2216, r25	; 0x802216 <__flp+0x1>
    638a:	fe 01       	movw	r30, r28
    638c:	32 96       	adiw	r30, 0x02	; 2
    638e:	44 c0       	rjmp	.+136    	; 0x6418 <malloc+0x124>
    6390:	fe 01       	movw	r30, r28
    6392:	e2 0f       	add	r30, r18
    6394:	f3 1f       	adc	r31, r19
    6396:	81 93       	st	Z+, r24
    6398:	91 93       	st	Z+, r25
    639a:	22 50       	subi	r18, 0x02	; 2
    639c:	31 09       	sbc	r19, r1
    639e:	28 83       	st	Y, r18
    63a0:	39 83       	std	Y+1, r19	; 0x01
    63a2:	3a c0       	rjmp	.+116    	; 0x6418 <malloc+0x124>
    63a4:	20 91 13 22 	lds	r18, 0x2213	; 0x802213 <__brkval>
    63a8:	30 91 14 22 	lds	r19, 0x2214	; 0x802214 <__brkval+0x1>
    63ac:	23 2b       	or	r18, r19
    63ae:	41 f4       	brne	.+16     	; 0x63c0 <malloc+0xcc>
    63b0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    63b4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    63b8:	20 93 13 22 	sts	0x2213, r18	; 0x802213 <__brkval>
    63bc:	30 93 14 22 	sts	0x2214, r19	; 0x802214 <__brkval+0x1>
    63c0:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    63c4:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    63c8:	21 15       	cp	r18, r1
    63ca:	31 05       	cpc	r19, r1
    63cc:	41 f4       	brne	.+16     	; 0x63de <malloc+0xea>
    63ce:	2d b7       	in	r18, 0x3d	; 61
    63d0:	3e b7       	in	r19, 0x3e	; 62
    63d2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    63d6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    63da:	24 1b       	sub	r18, r20
    63dc:	35 0b       	sbc	r19, r21
    63de:	e0 91 13 22 	lds	r30, 0x2213	; 0x802213 <__brkval>
    63e2:	f0 91 14 22 	lds	r31, 0x2214	; 0x802214 <__brkval+0x1>
    63e6:	e2 17       	cp	r30, r18
    63e8:	f3 07       	cpc	r31, r19
    63ea:	a0 f4       	brcc	.+40     	; 0x6414 <malloc+0x120>
    63ec:	2e 1b       	sub	r18, r30
    63ee:	3f 0b       	sbc	r19, r31
    63f0:	28 17       	cp	r18, r24
    63f2:	39 07       	cpc	r19, r25
    63f4:	78 f0       	brcs	.+30     	; 0x6414 <malloc+0x120>
    63f6:	ac 01       	movw	r20, r24
    63f8:	4e 5f       	subi	r20, 0xFE	; 254
    63fa:	5f 4f       	sbci	r21, 0xFF	; 255
    63fc:	24 17       	cp	r18, r20
    63fe:	35 07       	cpc	r19, r21
    6400:	48 f0       	brcs	.+18     	; 0x6414 <malloc+0x120>
    6402:	4e 0f       	add	r20, r30
    6404:	5f 1f       	adc	r21, r31
    6406:	40 93 13 22 	sts	0x2213, r20	; 0x802213 <__brkval>
    640a:	50 93 14 22 	sts	0x2214, r21	; 0x802214 <__brkval+0x1>
    640e:	81 93       	st	Z+, r24
    6410:	91 93       	st	Z+, r25
    6412:	02 c0       	rjmp	.+4      	; 0x6418 <malloc+0x124>
    6414:	e0 e0       	ldi	r30, 0x00	; 0
    6416:	f0 e0       	ldi	r31, 0x00	; 0
    6418:	cf 01       	movw	r24, r30
    641a:	df 91       	pop	r29
    641c:	cf 91       	pop	r28
    641e:	1f 91       	pop	r17
    6420:	0f 91       	pop	r16
    6422:	08 95       	ret

00006424 <free>:
    6424:	cf 93       	push	r28
    6426:	df 93       	push	r29
    6428:	00 97       	sbiw	r24, 0x00	; 0
    642a:	09 f4       	brne	.+2      	; 0x642e <free+0xa>
    642c:	81 c0       	rjmp	.+258    	; 0x6530 <free+0x10c>
    642e:	fc 01       	movw	r30, r24
    6430:	32 97       	sbiw	r30, 0x02	; 2
    6432:	12 82       	std	Z+2, r1	; 0x02
    6434:	13 82       	std	Z+3, r1	; 0x03
    6436:	a0 91 15 22 	lds	r26, 0x2215	; 0x802215 <__flp>
    643a:	b0 91 16 22 	lds	r27, 0x2216	; 0x802216 <__flp+0x1>
    643e:	10 97       	sbiw	r26, 0x00	; 0
    6440:	81 f4       	brne	.+32     	; 0x6462 <free+0x3e>
    6442:	20 81       	ld	r18, Z
    6444:	31 81       	ldd	r19, Z+1	; 0x01
    6446:	82 0f       	add	r24, r18
    6448:	93 1f       	adc	r25, r19
    644a:	20 91 13 22 	lds	r18, 0x2213	; 0x802213 <__brkval>
    644e:	30 91 14 22 	lds	r19, 0x2214	; 0x802214 <__brkval+0x1>
    6452:	28 17       	cp	r18, r24
    6454:	39 07       	cpc	r19, r25
    6456:	51 f5       	brne	.+84     	; 0x64ac <free+0x88>
    6458:	e0 93 13 22 	sts	0x2213, r30	; 0x802213 <__brkval>
    645c:	f0 93 14 22 	sts	0x2214, r31	; 0x802214 <__brkval+0x1>
    6460:	67 c0       	rjmp	.+206    	; 0x6530 <free+0x10c>
    6462:	ed 01       	movw	r28, r26
    6464:	20 e0       	ldi	r18, 0x00	; 0
    6466:	30 e0       	ldi	r19, 0x00	; 0
    6468:	ce 17       	cp	r28, r30
    646a:	df 07       	cpc	r29, r31
    646c:	40 f4       	brcc	.+16     	; 0x647e <free+0x5a>
    646e:	4a 81       	ldd	r20, Y+2	; 0x02
    6470:	5b 81       	ldd	r21, Y+3	; 0x03
    6472:	9e 01       	movw	r18, r28
    6474:	41 15       	cp	r20, r1
    6476:	51 05       	cpc	r21, r1
    6478:	f1 f0       	breq	.+60     	; 0x64b6 <free+0x92>
    647a:	ea 01       	movw	r28, r20
    647c:	f5 cf       	rjmp	.-22     	; 0x6468 <free+0x44>
    647e:	c2 83       	std	Z+2, r28	; 0x02
    6480:	d3 83       	std	Z+3, r29	; 0x03
    6482:	40 81       	ld	r20, Z
    6484:	51 81       	ldd	r21, Z+1	; 0x01
    6486:	84 0f       	add	r24, r20
    6488:	95 1f       	adc	r25, r21
    648a:	c8 17       	cp	r28, r24
    648c:	d9 07       	cpc	r29, r25
    648e:	59 f4       	brne	.+22     	; 0x64a6 <free+0x82>
    6490:	88 81       	ld	r24, Y
    6492:	99 81       	ldd	r25, Y+1	; 0x01
    6494:	84 0f       	add	r24, r20
    6496:	95 1f       	adc	r25, r21
    6498:	02 96       	adiw	r24, 0x02	; 2
    649a:	80 83       	st	Z, r24
    649c:	91 83       	std	Z+1, r25	; 0x01
    649e:	8a 81       	ldd	r24, Y+2	; 0x02
    64a0:	9b 81       	ldd	r25, Y+3	; 0x03
    64a2:	82 83       	std	Z+2, r24	; 0x02
    64a4:	93 83       	std	Z+3, r25	; 0x03
    64a6:	21 15       	cp	r18, r1
    64a8:	31 05       	cpc	r19, r1
    64aa:	29 f4       	brne	.+10     	; 0x64b6 <free+0x92>
    64ac:	e0 93 15 22 	sts	0x2215, r30	; 0x802215 <__flp>
    64b0:	f0 93 16 22 	sts	0x2216, r31	; 0x802216 <__flp+0x1>
    64b4:	3d c0       	rjmp	.+122    	; 0x6530 <free+0x10c>
    64b6:	e9 01       	movw	r28, r18
    64b8:	ea 83       	std	Y+2, r30	; 0x02
    64ba:	fb 83       	std	Y+3, r31	; 0x03
    64bc:	49 91       	ld	r20, Y+
    64be:	59 91       	ld	r21, Y+
    64c0:	c4 0f       	add	r28, r20
    64c2:	d5 1f       	adc	r29, r21
    64c4:	ec 17       	cp	r30, r28
    64c6:	fd 07       	cpc	r31, r29
    64c8:	61 f4       	brne	.+24     	; 0x64e2 <free+0xbe>
    64ca:	80 81       	ld	r24, Z
    64cc:	91 81       	ldd	r25, Z+1	; 0x01
    64ce:	84 0f       	add	r24, r20
    64d0:	95 1f       	adc	r25, r21
    64d2:	02 96       	adiw	r24, 0x02	; 2
    64d4:	e9 01       	movw	r28, r18
    64d6:	88 83       	st	Y, r24
    64d8:	99 83       	std	Y+1, r25	; 0x01
    64da:	82 81       	ldd	r24, Z+2	; 0x02
    64dc:	93 81       	ldd	r25, Z+3	; 0x03
    64de:	8a 83       	std	Y+2, r24	; 0x02
    64e0:	9b 83       	std	Y+3, r25	; 0x03
    64e2:	e0 e0       	ldi	r30, 0x00	; 0
    64e4:	f0 e0       	ldi	r31, 0x00	; 0
    64e6:	12 96       	adiw	r26, 0x02	; 2
    64e8:	8d 91       	ld	r24, X+
    64ea:	9c 91       	ld	r25, X
    64ec:	13 97       	sbiw	r26, 0x03	; 3
    64ee:	00 97       	sbiw	r24, 0x00	; 0
    64f0:	19 f0       	breq	.+6      	; 0x64f8 <free+0xd4>
    64f2:	fd 01       	movw	r30, r26
    64f4:	dc 01       	movw	r26, r24
    64f6:	f7 cf       	rjmp	.-18     	; 0x64e6 <free+0xc2>
    64f8:	8d 91       	ld	r24, X+
    64fa:	9c 91       	ld	r25, X
    64fc:	11 97       	sbiw	r26, 0x01	; 1
    64fe:	9d 01       	movw	r18, r26
    6500:	2e 5f       	subi	r18, 0xFE	; 254
    6502:	3f 4f       	sbci	r19, 0xFF	; 255
    6504:	82 0f       	add	r24, r18
    6506:	93 1f       	adc	r25, r19
    6508:	20 91 13 22 	lds	r18, 0x2213	; 0x802213 <__brkval>
    650c:	30 91 14 22 	lds	r19, 0x2214	; 0x802214 <__brkval+0x1>
    6510:	28 17       	cp	r18, r24
    6512:	39 07       	cpc	r19, r25
    6514:	69 f4       	brne	.+26     	; 0x6530 <free+0x10c>
    6516:	30 97       	sbiw	r30, 0x00	; 0
    6518:	29 f4       	brne	.+10     	; 0x6524 <free+0x100>
    651a:	10 92 15 22 	sts	0x2215, r1	; 0x802215 <__flp>
    651e:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <__flp+0x1>
    6522:	02 c0       	rjmp	.+4      	; 0x6528 <free+0x104>
    6524:	12 82       	std	Z+2, r1	; 0x02
    6526:	13 82       	std	Z+3, r1	; 0x03
    6528:	a0 93 13 22 	sts	0x2213, r26	; 0x802213 <__brkval>
    652c:	b0 93 14 22 	sts	0x2214, r27	; 0x802214 <__brkval+0x1>
    6530:	df 91       	pop	r29
    6532:	cf 91       	pop	r28
    6534:	08 95       	ret

00006536 <isspace>:
    6536:	91 11       	cpse	r25, r1
    6538:	1f c1       	rjmp	.+574    	; 0x6778 <__ctype_isfalse>
    653a:	80 32       	cpi	r24, 0x20	; 32
    653c:	19 f0       	breq	.+6      	; 0x6544 <isspace+0xe>
    653e:	89 50       	subi	r24, 0x09	; 9
    6540:	85 50       	subi	r24, 0x05	; 5
    6542:	d0 f7       	brcc	.-12     	; 0x6538 <isspace+0x2>
    6544:	08 95       	ret

00006546 <strchr_P>:
    6546:	fc 01       	movw	r30, r24
    6548:	05 90       	lpm	r0, Z+
    654a:	06 16       	cp	r0, r22
    654c:	21 f0       	breq	.+8      	; 0x6556 <strchr_P+0x10>
    654e:	00 20       	and	r0, r0
    6550:	d9 f7       	brne	.-10     	; 0x6548 <strchr_P+0x2>
    6552:	c0 01       	movw	r24, r0
    6554:	08 95       	ret
    6556:	31 97       	sbiw	r30, 0x01	; 1
    6558:	cf 01       	movw	r24, r30
    655a:	08 95       	ret

0000655c <strnlen_P>:
    655c:	fc 01       	movw	r30, r24
    655e:	05 90       	lpm	r0, Z+
    6560:	61 50       	subi	r22, 0x01	; 1
    6562:	70 40       	sbci	r23, 0x00	; 0
    6564:	01 10       	cpse	r0, r1
    6566:	d8 f7       	brcc	.-10     	; 0x655e <strnlen_P+0x2>
    6568:	80 95       	com	r24
    656a:	90 95       	com	r25
    656c:	8e 0f       	add	r24, r30
    656e:	9f 1f       	adc	r25, r31
    6570:	08 95       	ret

00006572 <memset>:
    6572:	dc 01       	movw	r26, r24
    6574:	01 c0       	rjmp	.+2      	; 0x6578 <memset+0x6>
    6576:	6d 93       	st	X+, r22
    6578:	41 50       	subi	r20, 0x01	; 1
    657a:	50 40       	sbci	r21, 0x00	; 0
    657c:	e0 f7       	brcc	.-8      	; 0x6576 <memset+0x4>
    657e:	08 95       	ret

00006580 <strnlen>:
    6580:	fc 01       	movw	r30, r24
    6582:	61 50       	subi	r22, 0x01	; 1
    6584:	70 40       	sbci	r23, 0x00	; 0
    6586:	01 90       	ld	r0, Z+
    6588:	01 10       	cpse	r0, r1
    658a:	d8 f7       	brcc	.-10     	; 0x6582 <strnlen+0x2>
    658c:	80 95       	com	r24
    658e:	90 95       	com	r25
    6590:	8e 0f       	add	r24, r30
    6592:	9f 1f       	adc	r25, r31
    6594:	08 95       	ret

00006596 <fgetc>:
    6596:	cf 93       	push	r28
    6598:	df 93       	push	r29
    659a:	ec 01       	movw	r28, r24
    659c:	2b 81       	ldd	r18, Y+3	; 0x03
    659e:	20 ff       	sbrs	r18, 0
    65a0:	33 c0       	rjmp	.+102    	; 0x6608 <fgetc+0x72>
    65a2:	26 ff       	sbrs	r18, 6
    65a4:	0a c0       	rjmp	.+20     	; 0x65ba <fgetc+0x24>
    65a6:	2f 7b       	andi	r18, 0xBF	; 191
    65a8:	2b 83       	std	Y+3, r18	; 0x03
    65aa:	8e 81       	ldd	r24, Y+6	; 0x06
    65ac:	9f 81       	ldd	r25, Y+7	; 0x07
    65ae:	01 96       	adiw	r24, 0x01	; 1
    65b0:	8e 83       	std	Y+6, r24	; 0x06
    65b2:	9f 83       	std	Y+7, r25	; 0x07
    65b4:	8a 81       	ldd	r24, Y+2	; 0x02
    65b6:	90 e0       	ldi	r25, 0x00	; 0
    65b8:	29 c0       	rjmp	.+82     	; 0x660c <fgetc+0x76>
    65ba:	22 ff       	sbrs	r18, 2
    65bc:	0f c0       	rjmp	.+30     	; 0x65dc <fgetc+0x46>
    65be:	e8 81       	ld	r30, Y
    65c0:	f9 81       	ldd	r31, Y+1	; 0x01
    65c2:	80 81       	ld	r24, Z
    65c4:	08 2e       	mov	r0, r24
    65c6:	00 0c       	add	r0, r0
    65c8:	99 0b       	sbc	r25, r25
    65ca:	00 97       	sbiw	r24, 0x00	; 0
    65cc:	19 f4       	brne	.+6      	; 0x65d4 <fgetc+0x3e>
    65ce:	20 62       	ori	r18, 0x20	; 32
    65d0:	2b 83       	std	Y+3, r18	; 0x03
    65d2:	1a c0       	rjmp	.+52     	; 0x6608 <fgetc+0x72>
    65d4:	31 96       	adiw	r30, 0x01	; 1
    65d6:	e8 83       	st	Y, r30
    65d8:	f9 83       	std	Y+1, r31	; 0x01
    65da:	0e c0       	rjmp	.+28     	; 0x65f8 <fgetc+0x62>
    65dc:	ea 85       	ldd	r30, Y+10	; 0x0a
    65de:	fb 85       	ldd	r31, Y+11	; 0x0b
    65e0:	19 95       	eicall
    65e2:	97 ff       	sbrs	r25, 7
    65e4:	09 c0       	rjmp	.+18     	; 0x65f8 <fgetc+0x62>
    65e6:	2b 81       	ldd	r18, Y+3	; 0x03
    65e8:	01 96       	adiw	r24, 0x01	; 1
    65ea:	11 f0       	breq	.+4      	; 0x65f0 <fgetc+0x5a>
    65ec:	80 e2       	ldi	r24, 0x20	; 32
    65ee:	01 c0       	rjmp	.+2      	; 0x65f2 <fgetc+0x5c>
    65f0:	80 e1       	ldi	r24, 0x10	; 16
    65f2:	82 2b       	or	r24, r18
    65f4:	8b 83       	std	Y+3, r24	; 0x03
    65f6:	08 c0       	rjmp	.+16     	; 0x6608 <fgetc+0x72>
    65f8:	2e 81       	ldd	r18, Y+6	; 0x06
    65fa:	3f 81       	ldd	r19, Y+7	; 0x07
    65fc:	2f 5f       	subi	r18, 0xFF	; 255
    65fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6600:	2e 83       	std	Y+6, r18	; 0x06
    6602:	3f 83       	std	Y+7, r19	; 0x07
    6604:	99 27       	eor	r25, r25
    6606:	02 c0       	rjmp	.+4      	; 0x660c <fgetc+0x76>
    6608:	8f ef       	ldi	r24, 0xFF	; 255
    660a:	9f ef       	ldi	r25, 0xFF	; 255
    660c:	df 91       	pop	r29
    660e:	cf 91       	pop	r28
    6610:	08 95       	ret

00006612 <fputc>:
    6612:	0f 93       	push	r16
    6614:	1f 93       	push	r17
    6616:	cf 93       	push	r28
    6618:	df 93       	push	r29
    661a:	fb 01       	movw	r30, r22
    661c:	23 81       	ldd	r18, Z+3	; 0x03
    661e:	21 fd       	sbrc	r18, 1
    6620:	03 c0       	rjmp	.+6      	; 0x6628 <fputc+0x16>
    6622:	8f ef       	ldi	r24, 0xFF	; 255
    6624:	9f ef       	ldi	r25, 0xFF	; 255
    6626:	2c c0       	rjmp	.+88     	; 0x6680 <fputc+0x6e>
    6628:	22 ff       	sbrs	r18, 2
    662a:	16 c0       	rjmp	.+44     	; 0x6658 <fputc+0x46>
    662c:	46 81       	ldd	r20, Z+6	; 0x06
    662e:	57 81       	ldd	r21, Z+7	; 0x07
    6630:	24 81       	ldd	r18, Z+4	; 0x04
    6632:	35 81       	ldd	r19, Z+5	; 0x05
    6634:	42 17       	cp	r20, r18
    6636:	53 07       	cpc	r21, r19
    6638:	44 f4       	brge	.+16     	; 0x664a <fputc+0x38>
    663a:	a0 81       	ld	r26, Z
    663c:	b1 81       	ldd	r27, Z+1	; 0x01
    663e:	9d 01       	movw	r18, r26
    6640:	2f 5f       	subi	r18, 0xFF	; 255
    6642:	3f 4f       	sbci	r19, 0xFF	; 255
    6644:	20 83       	st	Z, r18
    6646:	31 83       	std	Z+1, r19	; 0x01
    6648:	8c 93       	st	X, r24
    664a:	26 81       	ldd	r18, Z+6	; 0x06
    664c:	37 81       	ldd	r19, Z+7	; 0x07
    664e:	2f 5f       	subi	r18, 0xFF	; 255
    6650:	3f 4f       	sbci	r19, 0xFF	; 255
    6652:	26 83       	std	Z+6, r18	; 0x06
    6654:	37 83       	std	Z+7, r19	; 0x07
    6656:	14 c0       	rjmp	.+40     	; 0x6680 <fputc+0x6e>
    6658:	8b 01       	movw	r16, r22
    665a:	ec 01       	movw	r28, r24
    665c:	fb 01       	movw	r30, r22
    665e:	00 84       	ldd	r0, Z+8	; 0x08
    6660:	f1 85       	ldd	r31, Z+9	; 0x09
    6662:	e0 2d       	mov	r30, r0
    6664:	19 95       	eicall
    6666:	89 2b       	or	r24, r25
    6668:	e1 f6       	brne	.-72     	; 0x6622 <fputc+0x10>
    666a:	d8 01       	movw	r26, r16
    666c:	16 96       	adiw	r26, 0x06	; 6
    666e:	8d 91       	ld	r24, X+
    6670:	9c 91       	ld	r25, X
    6672:	17 97       	sbiw	r26, 0x07	; 7
    6674:	01 96       	adiw	r24, 0x01	; 1
    6676:	16 96       	adiw	r26, 0x06	; 6
    6678:	8d 93       	st	X+, r24
    667a:	9c 93       	st	X, r25
    667c:	17 97       	sbiw	r26, 0x07	; 7
    667e:	ce 01       	movw	r24, r28
    6680:	df 91       	pop	r29
    6682:	cf 91       	pop	r28
    6684:	1f 91       	pop	r17
    6686:	0f 91       	pop	r16
    6688:	08 95       	ret

0000668a <ungetc>:
    668a:	fb 01       	movw	r30, r22
    668c:	23 81       	ldd	r18, Z+3	; 0x03
    668e:	20 ff       	sbrs	r18, 0
    6690:	12 c0       	rjmp	.+36     	; 0x66b6 <ungetc+0x2c>
    6692:	26 fd       	sbrc	r18, 6
    6694:	10 c0       	rjmp	.+32     	; 0x66b6 <ungetc+0x2c>
    6696:	8f 3f       	cpi	r24, 0xFF	; 255
    6698:	3f ef       	ldi	r19, 0xFF	; 255
    669a:	93 07       	cpc	r25, r19
    669c:	61 f0       	breq	.+24     	; 0x66b6 <ungetc+0x2c>
    669e:	82 83       	std	Z+2, r24	; 0x02
    66a0:	2f 7d       	andi	r18, 0xDF	; 223
    66a2:	20 64       	ori	r18, 0x40	; 64
    66a4:	23 83       	std	Z+3, r18	; 0x03
    66a6:	26 81       	ldd	r18, Z+6	; 0x06
    66a8:	37 81       	ldd	r19, Z+7	; 0x07
    66aa:	21 50       	subi	r18, 0x01	; 1
    66ac:	31 09       	sbc	r19, r1
    66ae:	26 83       	std	Z+6, r18	; 0x06
    66b0:	37 83       	std	Z+7, r19	; 0x07
    66b2:	99 27       	eor	r25, r25
    66b4:	08 95       	ret
    66b6:	8f ef       	ldi	r24, 0xFF	; 255
    66b8:	9f ef       	ldi	r25, 0xFF	; 255
    66ba:	08 95       	ret

000066bc <__ultoa_invert>:
    66bc:	fa 01       	movw	r30, r20
    66be:	aa 27       	eor	r26, r26
    66c0:	28 30       	cpi	r18, 0x08	; 8
    66c2:	51 f1       	breq	.+84     	; 0x6718 <__ultoa_invert+0x5c>
    66c4:	20 31       	cpi	r18, 0x10	; 16
    66c6:	81 f1       	breq	.+96     	; 0x6728 <__ultoa_invert+0x6c>
    66c8:	e8 94       	clt
    66ca:	6f 93       	push	r22
    66cc:	6e 7f       	andi	r22, 0xFE	; 254
    66ce:	6e 5f       	subi	r22, 0xFE	; 254
    66d0:	7f 4f       	sbci	r23, 0xFF	; 255
    66d2:	8f 4f       	sbci	r24, 0xFF	; 255
    66d4:	9f 4f       	sbci	r25, 0xFF	; 255
    66d6:	af 4f       	sbci	r26, 0xFF	; 255
    66d8:	b1 e0       	ldi	r27, 0x01	; 1
    66da:	3e d0       	rcall	.+124    	; 0x6758 <__ultoa_invert+0x9c>
    66dc:	b4 e0       	ldi	r27, 0x04	; 4
    66de:	3c d0       	rcall	.+120    	; 0x6758 <__ultoa_invert+0x9c>
    66e0:	67 0f       	add	r22, r23
    66e2:	78 1f       	adc	r23, r24
    66e4:	89 1f       	adc	r24, r25
    66e6:	9a 1f       	adc	r25, r26
    66e8:	a1 1d       	adc	r26, r1
    66ea:	68 0f       	add	r22, r24
    66ec:	79 1f       	adc	r23, r25
    66ee:	8a 1f       	adc	r24, r26
    66f0:	91 1d       	adc	r25, r1
    66f2:	a1 1d       	adc	r26, r1
    66f4:	6a 0f       	add	r22, r26
    66f6:	71 1d       	adc	r23, r1
    66f8:	81 1d       	adc	r24, r1
    66fa:	91 1d       	adc	r25, r1
    66fc:	a1 1d       	adc	r26, r1
    66fe:	20 d0       	rcall	.+64     	; 0x6740 <__ultoa_invert+0x84>
    6700:	09 f4       	brne	.+2      	; 0x6704 <__ultoa_invert+0x48>
    6702:	68 94       	set
    6704:	3f 91       	pop	r19
    6706:	2a e0       	ldi	r18, 0x0A	; 10
    6708:	26 9f       	mul	r18, r22
    670a:	11 24       	eor	r1, r1
    670c:	30 19       	sub	r19, r0
    670e:	30 5d       	subi	r19, 0xD0	; 208
    6710:	31 93       	st	Z+, r19
    6712:	de f6       	brtc	.-74     	; 0x66ca <__ultoa_invert+0xe>
    6714:	cf 01       	movw	r24, r30
    6716:	08 95       	ret
    6718:	46 2f       	mov	r20, r22
    671a:	47 70       	andi	r20, 0x07	; 7
    671c:	40 5d       	subi	r20, 0xD0	; 208
    671e:	41 93       	st	Z+, r20
    6720:	b3 e0       	ldi	r27, 0x03	; 3
    6722:	0f d0       	rcall	.+30     	; 0x6742 <__ultoa_invert+0x86>
    6724:	c9 f7       	brne	.-14     	; 0x6718 <__ultoa_invert+0x5c>
    6726:	f6 cf       	rjmp	.-20     	; 0x6714 <__ultoa_invert+0x58>
    6728:	46 2f       	mov	r20, r22
    672a:	4f 70       	andi	r20, 0x0F	; 15
    672c:	40 5d       	subi	r20, 0xD0	; 208
    672e:	4a 33       	cpi	r20, 0x3A	; 58
    6730:	18 f0       	brcs	.+6      	; 0x6738 <__ultoa_invert+0x7c>
    6732:	49 5d       	subi	r20, 0xD9	; 217
    6734:	31 fd       	sbrc	r19, 1
    6736:	40 52       	subi	r20, 0x20	; 32
    6738:	41 93       	st	Z+, r20
    673a:	02 d0       	rcall	.+4      	; 0x6740 <__ultoa_invert+0x84>
    673c:	a9 f7       	brne	.-22     	; 0x6728 <__ultoa_invert+0x6c>
    673e:	ea cf       	rjmp	.-44     	; 0x6714 <__ultoa_invert+0x58>
    6740:	b4 e0       	ldi	r27, 0x04	; 4
    6742:	a6 95       	lsr	r26
    6744:	97 95       	ror	r25
    6746:	87 95       	ror	r24
    6748:	77 95       	ror	r23
    674a:	67 95       	ror	r22
    674c:	ba 95       	dec	r27
    674e:	c9 f7       	brne	.-14     	; 0x6742 <__ultoa_invert+0x86>
    6750:	00 97       	sbiw	r24, 0x00	; 0
    6752:	61 05       	cpc	r22, r1
    6754:	71 05       	cpc	r23, r1
    6756:	08 95       	ret
    6758:	9b 01       	movw	r18, r22
    675a:	ac 01       	movw	r20, r24
    675c:	0a 2e       	mov	r0, r26
    675e:	06 94       	lsr	r0
    6760:	57 95       	ror	r21
    6762:	47 95       	ror	r20
    6764:	37 95       	ror	r19
    6766:	27 95       	ror	r18
    6768:	ba 95       	dec	r27
    676a:	c9 f7       	brne	.-14     	; 0x675e <__ultoa_invert+0xa2>
    676c:	62 0f       	add	r22, r18
    676e:	73 1f       	adc	r23, r19
    6770:	84 1f       	adc	r24, r20
    6772:	95 1f       	adc	r25, r21
    6774:	a0 1d       	adc	r26, r0
    6776:	08 95       	ret

00006778 <__ctype_isfalse>:
    6778:	99 27       	eor	r25, r25
    677a:	88 27       	eor	r24, r24

0000677c <__ctype_istrue>:
    677c:	08 95       	ret

0000677e <_exit>:
    677e:	f8 94       	cli

00006780 <__stop_program>:
    6780:	ff cf       	rjmp	.-2      	; 0x6780 <__stop_program>
