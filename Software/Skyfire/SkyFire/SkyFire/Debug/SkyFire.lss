
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004920  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00802000  00004920  000049b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000122  0080209c  0080209c  00004a50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004a50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004aac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000628  00000000  00000000  00004af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001949b  00000000  00000000  00005118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005408  00000000  00000000  0001e5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b604  00000000  00000000  000239bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014c8  00000000  00000000  0002efc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003858a  00000000  00000000  00030488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005450  00000000  00000000  00068a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  0006de68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005f72  00000000  00000000  0006e428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c3       	rjmp	.+1550   	; 0x644 <__vector_13>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f7 c2       	rjmp	.+1518   	; 0x6a8 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__vector_47>
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__vector_58>
      ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
     102:	00 00       	nop
     104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
     106:	00 00       	nop
     108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
     112:	00 00       	nop
     114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
     116:	00 00       	nop
     118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
     136:	00 00       	nop
     138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
     142:	00 00       	nop
     144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
     146:	00 00       	nop
     148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
     152:	00 00       	nop
     154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
     156:	00 00       	nop
     158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
     162:	00 00       	nop
     164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
     166:	00 00       	nop
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__vector_91>
     170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
     172:	00 00       	nop
     174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
     176:	00 00       	nop
     178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
     182:	00 00       	nop
     184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
     186:	00 00       	nop
     188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
     192:	00 00       	nop
     194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
     196:	00 00       	nop
     198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6e c0       	rjmp	.+220    	; 0x2d6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <usart_init_rs232+0x12a>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	63 64       	ori	r22, 0x43	; 67
     280:	69 6e       	ori	r22, 0xE9	; 233
     282:	6f 70       	andi	r22, 0x0F	; 15
     284:	73 75       	andi	r23, 0x53	; 83
     286:	78 58       	subi	r23, 0x88	; 136
     288:	5b 00       	.word	0x005b	; ????

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df e3       	ldi	r29, 0x3F	; 63
     294:	de bf       	out	0x3e, r29	; 62
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0c bf       	out	0x3c, r16	; 60
     29a:	18 be       	out	0x38, r1	; 56
     29c:	19 be       	out	0x39, r1	; 57
     29e:	1a be       	out	0x3a, r1	; 58
     2a0:	1b be       	out	0x3b, r1	; 59

000002a2 <__do_copy_data>:
     2a2:	10 e2       	ldi	r17, 0x20	; 32
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e2       	ldi	r27, 0x20	; 32
     2a8:	e0 e2       	ldi	r30, 0x20	; 32
     2aa:	f9 e4       	ldi	r31, 0x49	; 73
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	ac 39       	cpi	r26, 0x9C	; 156
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>
     2bc:	1b be       	out	0x3b, r1	; 59

000002be <__do_clear_bss>:
     2be:	21 e2       	ldi	r18, 0x21	; 33
     2c0:	ac e9       	ldi	r26, 0x9C	; 156
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	ae 3b       	cpi	r26, 0xBE	; 190
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 4d 14 	call	0x289a	; 0x289a <main>
     2d2:	0c 94 8e 24 	jmp	0x491c	; 0x491c <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2e2:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <stdio_base>
     2e6:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <stdio_base+0x1>
     2ea:	e0 91 09 21 	lds	r30, 0x2109	; 0x802109 <ptr_get>
     2ee:	f0 91 0a 21 	lds	r31, 0x210A	; 0x80210a <ptr_get+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	19 95       	eicall
	return c;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     30a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     30c:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <stdio_base>
     310:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <stdio_base+0x1>
     314:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <ptr_put>
     318:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <ptr_put+0x1>
     31c:	19 95       	eicall
     31e:	99 23       	and	r25, r25
     320:	1c f0       	brlt	.+6      	; 0x328 <_write+0x1e>
		return -1;
	}
	return 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 0f 21 	lds	r30, 0x210F	; 0x80210f <adca_callback>
     36e:	f0 91 10 21 	lds	r31, 0x2110	; 0x802110 <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 0f 21 	lds	r30, 0x210F	; 0x80210f <adca_callback>
     3e8:	f0 91 10 21 	lds	r31, 0x2110	; 0x802110 <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 0f 21 	lds	r30, 0x210F	; 0x80210f <adca_callback>
     462:	f0 91 10 21 	lds	r31, 0x2110	; 0x802110 <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 0f 21 	lds	r30, 0x210F	; 0x80210f <adca_callback>
     4dc:	f0 91 10 21 	lds	r31, 0x2110	; 0x802110 <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     51a:	e0 91 9c 20 	lds	r30, 0x209C	; 0x80209c <__data_end>
     51e:	f0 91 9d 20 	lds	r31, 0x209D	; 0x80209d <__data_end+0x1>
     522:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     524:	83 ff       	sbrs	r24, 3
     526:	08 c0       	rjmp	.+16     	; 0x538 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     528:	88 60       	ori	r24, 0x08	; 8
     52a:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     530:	86 ef       	ldi	r24, 0xF6	; 246
     532:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <__data_end+0xa>
     536:	83 c0       	rjmp	.+262    	; 0x63e <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     538:	98 2f       	mov	r25, r24
     53a:	94 71       	andi	r25, 0x14	; 20
     53c:	31 f0       	breq	.+12     	; 0x54a <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <__data_end+0xa>
     548:	7a c0       	rjmp	.+244    	; 0x63e <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     54a:	86 ff       	sbrs	r24, 6
     54c:	43 c0       	rjmp	.+134    	; 0x5d4 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     54e:	cc e9       	ldi	r28, 0x9C	; 156
     550:	d0 e2       	ldi	r29, 0x20	; 32
     552:	aa 81       	ldd	r26, Y+2	; 0x02
     554:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     556:	8c 81       	ldd	r24, Y+4	; 0x04
     558:	9d 81       	ldd	r25, Y+5	; 0x05
     55a:	14 96       	adiw	r26, 0x04	; 4
     55c:	2d 91       	ld	r18, X+
     55e:	3c 91       	ld	r19, X
     560:	15 97       	sbiw	r26, 0x05	; 5
     562:	82 17       	cp	r24, r18
     564:	93 07       	cpc	r25, r19
     566:	6c f4       	brge	.+26     	; 0x582 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     568:	9c 01       	movw	r18, r24
     56a:	2f 5f       	subi	r18, 0xFF	; 255
     56c:	3f 4f       	sbci	r19, 0xFF	; 255
     56e:	20 93 a0 20 	sts	0x20A0, r18	; 0x8020a0 <__data_end+0x4>
     572:	30 93 a1 20 	sts	0x20A1, r19	; 0x8020a1 <__data_end+0x5>
     576:	a8 0f       	add	r26, r24
     578:	b9 1f       	adc	r27, r25
     57a:	11 96       	adiw	r26, 0x01	; 1
     57c:	8c 91       	ld	r24, X
     57e:	87 83       	std	Z+7, r24	; 0x07
     580:	5e c0       	rjmp	.+188    	; 0x63e <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     582:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <__data_end+0x6>
     586:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <__data_end+0x7>
     58a:	18 96       	adiw	r26, 0x08	; 8
     58c:	2d 91       	ld	r18, X+
     58e:	3c 91       	ld	r19, X
     590:	19 97       	sbiw	r26, 0x09	; 9
     592:	82 17       	cp	r24, r18
     594:	93 07       	cpc	r25, r19
     596:	c8 f4       	brcc	.+50     	; 0x5ca <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     598:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <__data_end+0x8>
     59c:	22 23       	and	r18, r18
     59e:	21 f0       	breq	.+8      	; 0x5a8 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     5a0:	86 81       	ldd	r24, Z+6	; 0x06
     5a2:	81 60       	ori	r24, 0x01	; 1
     5a4:	86 83       	std	Z+6, r24	; 0x06
     5a6:	4b c0       	rjmp	.+150    	; 0x63e <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     5a8:	16 96       	adiw	r26, 0x06	; 6
     5aa:	2d 91       	ld	r18, X+
     5ac:	3c 91       	ld	r19, X
     5ae:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     5b0:	ac 01       	movw	r20, r24
     5b2:	4f 5f       	subi	r20, 0xFF	; 255
     5b4:	5f 4f       	sbci	r21, 0xFF	; 255
     5b6:	40 93 a2 20 	sts	0x20A2, r20	; 0x8020a2 <__data_end+0x6>
     5ba:	50 93 a3 20 	sts	0x20A3, r21	; 0x8020a3 <__data_end+0x7>
     5be:	d9 01       	movw	r26, r18
     5c0:	a8 0f       	add	r26, r24
     5c2:	b9 1f       	adc	r27, r25
     5c4:	8c 91       	ld	r24, X
     5c6:	87 83       	std	Z+7, r24	; 0x07
     5c8:	3a c0       	rjmp	.+116    	; 0x63e <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     5ce:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <__data_end+0xa>
     5d2:	35 c0       	rjmp	.+106    	; 0x63e <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     5d4:	88 23       	and	r24, r24
     5d6:	84 f5       	brge	.+96     	; 0x638 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     5d8:	ac e9       	ldi	r26, 0x9C	; 156
     5da:	b0 e2       	ldi	r27, 0x20	; 32
     5dc:	12 96       	adiw	r26, 0x02	; 2
     5de:	cd 91       	ld	r28, X+
     5e0:	dc 91       	ld	r29, X
     5e2:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     5e4:	16 96       	adiw	r26, 0x06	; 6
     5e6:	8d 91       	ld	r24, X+
     5e8:	9c 91       	ld	r25, X
     5ea:	17 97       	sbiw	r26, 0x07	; 7
     5ec:	28 85       	ldd	r18, Y+8	; 0x08
     5ee:	39 85       	ldd	r19, Y+9	; 0x09
     5f0:	82 17       	cp	r24, r18
     5f2:	93 07       	cpc	r25, r19
     5f4:	d8 f4       	brcc	.+54     	; 0x62c <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     5f6:	6e 81       	ldd	r22, Y+6	; 0x06
     5f8:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     5fa:	9c 01       	movw	r18, r24
     5fc:	2f 5f       	subi	r18, 0xFF	; 255
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	20 93 a2 20 	sts	0x20A2, r18	; 0x8020a2 <__data_end+0x6>
     604:	30 93 a3 20 	sts	0x20A3, r19	; 0x8020a3 <__data_end+0x7>
     608:	47 81       	ldd	r20, Z+7	; 0x07
     60a:	db 01       	movw	r26, r22
     60c:	a8 0f       	add	r26, r24
     60e:	b9 1f       	adc	r27, r25
     610:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     612:	88 85       	ldd	r24, Y+8	; 0x08
     614:	99 85       	ldd	r25, Y+9	; 0x09
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	18 f4       	brcc	.+6      	; 0x622 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	83 83       	std	Z+3, r24	; 0x03
     620:	0e c0       	rjmp	.+28     	; 0x63e <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     622:	87 e0       	ldi	r24, 0x07	; 7
     624:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     626:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <__data_end+0xa>
     62a:	09 c0       	rjmp	.+18     	; 0x63e <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     630:	89 ef       	ldi	r24, 0xF9	; 249
     632:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <__data_end+0xa>
     636:	03 c0       	rjmp	.+6      	; 0x63e <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     638:	8b ef       	ldi	r24, 0xFB	; 251
     63a:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <__data_end+0xa>
	}
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     644:	1f 92       	push	r1
     646:	0f 92       	push	r0
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	0f 92       	push	r0
     64c:	11 24       	eor	r1, r1
     64e:	08 b6       	in	r0, 0x38	; 56
     650:	0f 92       	push	r0
     652:	18 be       	out	0x38, r1	; 56
     654:	09 b6       	in	r0, 0x39	; 57
     656:	0f 92       	push	r0
     658:	19 be       	out	0x39, r1	; 57
     65a:	0b b6       	in	r0, 0x3b	; 59
     65c:	0f 92       	push	r0
     65e:	1b be       	out	0x3b, r1	; 59
     660:	2f 93       	push	r18
     662:	3f 93       	push	r19
     664:	4f 93       	push	r20
     666:	5f 93       	push	r21
     668:	6f 93       	push	r22
     66a:	7f 93       	push	r23
     66c:	8f 93       	push	r24
     66e:	9f 93       	push	r25
     670:	af 93       	push	r26
     672:	bf 93       	push	r27
     674:	ef 93       	push	r30
     676:	ff 93       	push	r31
     678:	4e df       	rcall	.-356    	; 0x516 <twim_interrupt_handler>
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0b be       	out	0x3b, r0	; 59
     696:	0f 90       	pop	r0
     698:	09 be       	out	0x39, r0	; 57
     69a:	0f 90       	pop	r0
     69c:	08 be       	out	0x38, r0	; 56
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	08 b6       	in	r0, 0x38	; 56
     6b4:	0f 92       	push	r0
     6b6:	18 be       	out	0x38, r1	; 56
     6b8:	09 b6       	in	r0, 0x39	; 57
     6ba:	0f 92       	push	r0
     6bc:	19 be       	out	0x39, r1	; 57
     6be:	0b b6       	in	r0, 0x3b	; 59
     6c0:	0f 92       	push	r0
     6c2:	1b be       	out	0x3b, r1	; 59
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	4f 93       	push	r20
     6ca:	5f 93       	push	r21
     6cc:	6f 93       	push	r22
     6ce:	7f 93       	push	r23
     6d0:	8f 93       	push	r24
     6d2:	9f 93       	push	r25
     6d4:	af 93       	push	r26
     6d6:	bf 93       	push	r27
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
     6dc:	1c df       	rcall	.-456    	; 0x516 <twim_interrupt_handler>
     6de:	ff 91       	pop	r31
     6e0:	ef 91       	pop	r30
     6e2:	bf 91       	pop	r27
     6e4:	af 91       	pop	r26
     6e6:	9f 91       	pop	r25
     6e8:	8f 91       	pop	r24
     6ea:	7f 91       	pop	r23
     6ec:	6f 91       	pop	r22
     6ee:	5f 91       	pop	r21
     6f0:	4f 91       	pop	r20
     6f2:	3f 91       	pop	r19
     6f4:	2f 91       	pop	r18
     6f6:	0f 90       	pop	r0
     6f8:	0b be       	out	0x3b, r0	; 59
     6fa:	0f 90       	pop	r0
     6fc:	09 be       	out	0x39, r0	; 57
     6fe:	0f 90       	pop	r0
     700:	08 be       	out	0x38, r0	; 56
     702:	0f 90       	pop	r0
     704:	0f be       	out	0x3f, r0	; 63
     706:	0f 90       	pop	r0
     708:	1f 90       	pop	r1
     70a:	18 95       	reti

0000070c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     70c:	fc 01       	movw	r30, r24
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	95 ff       	sbrs	r25, 5
     712:	fd cf       	rjmp	.-6      	; 0x70e <usart_putchar+0x2>
     714:	60 83       	st	Z, r22
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	08 95       	ret

0000071c <usart_getchar>:
     71c:	fc 01       	movw	r30, r24
     71e:	91 81       	ldd	r25, Z+1	; 0x01
     720:	99 23       	and	r25, r25
     722:	ec f7       	brge	.-6      	; 0x71e <usart_getchar+0x2>
     724:	80 81       	ld	r24, Z
     726:	08 95       	ret

00000728 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     728:	4f 92       	push	r4
     72a:	5f 92       	push	r5
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	7c 01       	movw	r14, r24
     744:	4a 01       	movw	r8, r20
     746:	5b 01       	movw	r10, r22
     748:	28 01       	movw	r4, r16
     74a:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     74c:	fc 01       	movw	r30, r24
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	82 ff       	sbrs	r24, 2
     752:	16 c0       	rjmp	.+44     	; 0x780 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     754:	d9 01       	movw	r26, r18
     756:	c8 01       	movw	r24, r16
     758:	68 94       	set
     75a:	12 f8       	bld	r1, 2
     75c:	b6 95       	lsr	r27
     75e:	a7 95       	ror	r26
     760:	97 95       	ror	r25
     762:	87 95       	ror	r24
     764:	16 94       	lsr	r1
     766:	d1 f7       	brne	.-12     	; 0x75c <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     768:	b9 01       	movw	r22, r18
     76a:	a8 01       	movw	r20, r16
     76c:	03 2e       	mov	r0, r19
     76e:	36 e1       	ldi	r19, 0x16	; 22
     770:	76 95       	lsr	r23
     772:	67 95       	ror	r22
     774:	57 95       	ror	r21
     776:	47 95       	ror	r20
     778:	3a 95       	dec	r19
     77a:	d1 f7       	brne	.-12     	; 0x770 <usart_set_baudrate+0x48>
     77c:	30 2d       	mov	r19, r0
     77e:	15 c0       	rjmp	.+42     	; 0x7aa <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     780:	d9 01       	movw	r26, r18
     782:	c8 01       	movw	r24, r16
     784:	68 94       	set
     786:	13 f8       	bld	r1, 3
     788:	b6 95       	lsr	r27
     78a:	a7 95       	ror	r26
     78c:	97 95       	ror	r25
     78e:	87 95       	ror	r24
     790:	16 94       	lsr	r1
     792:	d1 f7       	brne	.-12     	; 0x788 <usart_set_baudrate+0x60>
		min_rate /= 2;
     794:	b9 01       	movw	r22, r18
     796:	a8 01       	movw	r20, r16
     798:	03 2e       	mov	r0, r19
     79a:	37 e1       	ldi	r19, 0x17	; 23
     79c:	76 95       	lsr	r23
     79e:	67 95       	ror	r22
     7a0:	57 95       	ror	r21
     7a2:	47 95       	ror	r20
     7a4:	3a 95       	dec	r19
     7a6:	d1 f7       	brne	.-12     	; 0x79c <usart_set_baudrate+0x74>
     7a8:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     7aa:	88 15       	cp	r24, r8
     7ac:	99 05       	cpc	r25, r9
     7ae:	aa 05       	cpc	r26, r10
     7b0:	bb 05       	cpc	r27, r11
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <usart_set_baudrate+0x8e>
     7b4:	a6 c0       	rjmp	.+332    	; 0x902 <usart_set_baudrate+0x1da>
     7b6:	84 16       	cp	r8, r20
     7b8:	95 06       	cpc	r9, r21
     7ba:	a6 06       	cpc	r10, r22
     7bc:	b7 06       	cpc	r11, r23
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <usart_set_baudrate+0x9a>
     7c0:	a2 c0       	rjmp	.+324    	; 0x906 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7c2:	f7 01       	movw	r30, r14
     7c4:	84 81       	ldd	r24, Z+4	; 0x04
     7c6:	82 fd       	sbrc	r24, 2
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <usart_set_baudrate+0xaa>
		baud *= 2;
     7ca:	88 0c       	add	r8, r8
     7cc:	99 1c       	adc	r9, r9
     7ce:	aa 1c       	adc	r10, r10
     7d0:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7d2:	c3 01       	movw	r24, r6
     7d4:	b2 01       	movw	r22, r4
     7d6:	a5 01       	movw	r20, r10
     7d8:	94 01       	movw	r18, r8
     7da:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7de:	2f 3f       	cpi	r18, 0xFF	; 255
     7e0:	31 05       	cpc	r19, r1
     7e2:	41 05       	cpc	r20, r1
     7e4:	51 05       	cpc	r21, r1
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <usart_set_baudrate+0xc2>
     7e8:	90 c0       	rjmp	.+288    	; 0x90a <usart_set_baudrate+0x1e2>
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	c9 ef       	ldi	r28, 0xF9	; 249
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <usart_set_baudrate+0xd8>
     7f6:	28 17       	cp	r18, r24
     7f8:	39 07       	cpc	r19, r25
     7fa:	4a 07       	cpc	r20, r26
     7fc:	5b 07       	cpc	r21, r27
     7fe:	58 f0       	brcs	.+22     	; 0x816 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	aa 1f       	adc	r26, r26
     806:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     808:	cd 3f       	cpi	r28, 0xFD	; 253
     80a:	0c f4       	brge	.+2      	; 0x80e <usart_set_baudrate+0xe6>
			limit |= 1;
     80c:	81 60       	ori	r24, 0x01	; 1
     80e:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     810:	c7 30       	cpi	r28, 0x07	; 7
     812:	89 f7       	brne	.-30     	; 0x7f6 <usart_set_baudrate+0xce>
     814:	4f c0       	rjmp	.+158    	; 0x8b4 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     816:	cc 23       	and	r28, r28
     818:	0c f0       	brlt	.+2      	; 0x81c <usart_set_baudrate+0xf4>
     81a:	4c c0       	rjmp	.+152    	; 0x8b4 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     81c:	d5 01       	movw	r26, r10
     81e:	c4 01       	movw	r24, r8
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	aa 1f       	adc	r26, r26
     826:	bb 1f       	adc	r27, r27
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	aa 1f       	adc	r26, r26
     82e:	bb 1f       	adc	r27, r27
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	aa 1f       	adc	r26, r26
     836:	bb 1f       	adc	r27, r27
     838:	48 1a       	sub	r4, r24
     83a:	59 0a       	sbc	r5, r25
     83c:	6a 0a       	sbc	r6, r26
     83e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     840:	ce 3f       	cpi	r28, 0xFE	; 254
     842:	f4 f4       	brge	.+60     	; 0x880 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     844:	8d ef       	ldi	r24, 0xFD	; 253
     846:	9f ef       	ldi	r25, 0xFF	; 255
     848:	8c 1b       	sub	r24, r28
     84a:	91 09       	sbc	r25, r1
     84c:	c7 fd       	sbrc	r28, 7
     84e:	93 95       	inc	r25
     850:	04 c0       	rjmp	.+8      	; 0x85a <usart_set_baudrate+0x132>
     852:	44 0c       	add	r4, r4
     854:	55 1c       	adc	r5, r5
     856:	66 1c       	adc	r6, r6
     858:	77 1c       	adc	r7, r7
     85a:	8a 95       	dec	r24
     85c:	d2 f7       	brpl	.-12     	; 0x852 <usart_set_baudrate+0x12a>
     85e:	d5 01       	movw	r26, r10
     860:	c4 01       	movw	r24, r8
     862:	b6 95       	lsr	r27
     864:	a7 95       	ror	r26
     866:	97 95       	ror	r25
     868:	87 95       	ror	r24
     86a:	bc 01       	movw	r22, r24
     86c:	cd 01       	movw	r24, r26
     86e:	64 0d       	add	r22, r4
     870:	75 1d       	adc	r23, r5
     872:	86 1d       	adc	r24, r6
     874:	97 1d       	adc	r25, r7
     876:	a5 01       	movw	r20, r10
     878:	94 01       	movw	r18, r8
     87a:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <__udivmodsi4>
     87e:	37 c0       	rjmp	.+110    	; 0x8ee <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	8c 0f       	add	r24, r28
     884:	a5 01       	movw	r20, r10
     886:	94 01       	movw	r18, r8
     888:	04 c0       	rjmp	.+8      	; 0x892 <usart_set_baudrate+0x16a>
     88a:	22 0f       	add	r18, r18
     88c:	33 1f       	adc	r19, r19
     88e:	44 1f       	adc	r20, r20
     890:	55 1f       	adc	r21, r21
     892:	8a 95       	dec	r24
     894:	d2 f7       	brpl	.-12     	; 0x88a <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     896:	da 01       	movw	r26, r20
     898:	c9 01       	movw	r24, r18
     89a:	b6 95       	lsr	r27
     89c:	a7 95       	ror	r26
     89e:	97 95       	ror	r25
     8a0:	87 95       	ror	r24
     8a2:	bc 01       	movw	r22, r24
     8a4:	cd 01       	movw	r24, r26
     8a6:	64 0d       	add	r22, r4
     8a8:	75 1d       	adc	r23, r5
     8aa:	86 1d       	adc	r24, r6
     8ac:	97 1d       	adc	r25, r7
     8ae:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <__udivmodsi4>
     8b2:	1d c0       	rjmp	.+58     	; 0x8ee <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	8c 0f       	add	r24, r28
     8b8:	a5 01       	movw	r20, r10
     8ba:	94 01       	movw	r18, r8
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <usart_set_baudrate+0x19e>
     8be:	22 0f       	add	r18, r18
     8c0:	33 1f       	adc	r19, r19
     8c2:	44 1f       	adc	r20, r20
     8c4:	55 1f       	adc	r21, r21
     8c6:	8a 95       	dec	r24
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8ca:	da 01       	movw	r26, r20
     8cc:	c9 01       	movw	r24, r18
     8ce:	b6 95       	lsr	r27
     8d0:	a7 95       	ror	r26
     8d2:	97 95       	ror	r25
     8d4:	87 95       	ror	r24
     8d6:	bc 01       	movw	r22, r24
     8d8:	cd 01       	movw	r24, r26
     8da:	64 0d       	add	r22, r4
     8dc:	75 1d       	adc	r23, r5
     8de:	86 1d       	adc	r24, r6
     8e0:	97 1d       	adc	r25, r7
     8e2:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <__udivmodsi4>
     8e6:	21 50       	subi	r18, 0x01	; 1
     8e8:	31 09       	sbc	r19, r1
     8ea:	41 09       	sbc	r20, r1
     8ec:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8ee:	83 2f       	mov	r24, r19
     8f0:	8f 70       	andi	r24, 0x0F	; 15
     8f2:	c2 95       	swap	r28
     8f4:	c0 7f       	andi	r28, 0xF0	; 240
     8f6:	c8 2b       	or	r28, r24
     8f8:	f7 01       	movw	r30, r14
     8fa:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8fc:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	18 c0       	rjmp	.+48     	; 0x932 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	16 c0       	rjmp	.+44     	; 0x932 <usart_set_baudrate+0x20a>
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	14 c0       	rjmp	.+40     	; 0x932 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     90a:	d5 01       	movw	r26, r10
     90c:	c4 01       	movw	r24, r8
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	aa 1f       	adc	r26, r26
     914:	bb 1f       	adc	r27, r27
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	aa 1f       	adc	r26, r26
     91c:	bb 1f       	adc	r27, r27
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	aa 1f       	adc	r26, r26
     924:	bb 1f       	adc	r27, r27
     926:	48 1a       	sub	r4, r24
     928:	59 0a       	sbc	r5, r25
     92a:	6a 0a       	sbc	r6, r26
     92c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     92e:	c9 ef       	ldi	r28, 0xF9	; 249
     930:	89 cf       	rjmp	.-238    	; 0x844 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	08 95       	ret

0000094e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ec 01       	movw	r28, r24
     958:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	09 f4       	brne	.+2      	; 0x960 <usart_init_rs232+0x12>
     95e:	be c0       	rjmp	.+380    	; 0xadc <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     960:	80 3c       	cpi	r24, 0xC0	; 192
     962:	91 05       	cpc	r25, r1
     964:	21 f4       	brne	.+8      	; 0x96e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     966:	60 e1       	ldi	r22, 0x10	; 16
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	fb d3       	rcall	.+2038   	; 0x1162 <sysclk_enable_module>
     96c:	b7 c0       	rjmp	.+366    	; 0xadc <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     96e:	c1 15       	cp	r28, r1
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	d8 07       	cpc	r29, r24
     974:	21 f4       	brne	.+8      	; 0x97e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     976:	64 e0       	ldi	r22, 0x04	; 4
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	f3 d3       	rcall	.+2022   	; 0x1162 <sysclk_enable_module>
     97c:	af c0       	rjmp	.+350    	; 0xadc <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     97e:	c0 38       	cpi	r28, 0x80	; 128
     980:	e1 e0       	ldi	r30, 0x01	; 1
     982:	de 07       	cpc	r29, r30
     984:	21 f4       	brne	.+8      	; 0x98e <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     986:	62 e0       	ldi	r22, 0x02	; 2
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	eb d3       	rcall	.+2006   	; 0x1162 <sysclk_enable_module>
     98c:	a7 c0       	rjmp	.+334    	; 0xadc <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     98e:	c1 15       	cp	r28, r1
     990:	f1 e0       	ldi	r31, 0x01	; 1
     992:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     994:	21 f4       	brne	.+8      	; 0x99e <usart_init_rs232+0x50>
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	e3 d3       	rcall	.+1990   	; 0x1162 <sysclk_enable_module>
     99c:	9f c0       	rjmp	.+318    	; 0xadc <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     99e:	c0 38       	cpi	r28, 0x80	; 128
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     9a4:	21 f4       	brne	.+8      	; 0x9ae <usart_init_rs232+0x60>
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	db d3       	rcall	.+1974   	; 0x1162 <sysclk_enable_module>
     9ac:	97 c0       	rjmp	.+302    	; 0xadc <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9ae:	c1 15       	cp	r28, r1
     9b0:	e2 e0       	ldi	r30, 0x02	; 2
     9b2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9b4:	21 f4       	brne	.+8      	; 0x9be <usart_init_rs232+0x70>
     9b6:	62 e0       	ldi	r22, 0x02	; 2
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	d3 d3       	rcall	.+1958   	; 0x1162 <sysclk_enable_module>
     9bc:	8f c0       	rjmp	.+286    	; 0xadc <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9be:	c0 32       	cpi	r28, 0x20	; 32
     9c0:	f3 e0       	ldi	r31, 0x03	; 3
     9c2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9c4:	21 f4       	brne	.+8      	; 0x9ce <usart_init_rs232+0x80>
     9c6:	64 e0       	ldi	r22, 0x04	; 4
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	cb d3       	rcall	.+1942   	; 0x1162 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9cc:	87 c0       	rjmp	.+270    	; 0xadc <usart_init_rs232+0x18e>
     9ce:	c1 15       	cp	r28, r1
     9d0:	88 e0       	ldi	r24, 0x08	; 8
     9d2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9d4:	21 f4       	brne	.+8      	; 0x9de <usart_init_rs232+0x90>
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	c3 d3       	rcall	.+1926   	; 0x1162 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     9dc:	7f c0       	rjmp	.+254    	; 0xadc <usart_init_rs232+0x18e>
     9de:	c1 15       	cp	r28, r1
     9e0:	e9 e0       	ldi	r30, 0x09	; 9
     9e2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     9e4:	21 f4       	brne	.+8      	; 0x9ee <usart_init_rs232+0xa0>
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	bb d3       	rcall	.+1910   	; 0x1162 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     9ec:	77 c0       	rjmp	.+238    	; 0xadc <usart_init_rs232+0x18e>
     9ee:	c1 15       	cp	r28, r1
     9f0:	fa e0       	ldi	r31, 0x0A	; 10
     9f2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     9f4:	21 f4       	brne	.+8      	; 0x9fe <usart_init_rs232+0xb0>
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	85 e0       	ldi	r24, 0x05	; 5
     9fa:	b3 d3       	rcall	.+1894   	; 0x1162 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     9fc:	6f c0       	rjmp	.+222    	; 0xadc <usart_init_rs232+0x18e>
     9fe:	c0 34       	cpi	r28, 0x40	; 64
     a00:	88 e0       	ldi	r24, 0x08	; 8
     a02:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a04:	21 f4       	brne	.+8      	; 0xa0e <usart_init_rs232+0xc0>
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	ab d3       	rcall	.+1878   	; 0x1162 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a0c:	67 c0       	rjmp	.+206    	; 0xadc <usart_init_rs232+0x18e>
     a0e:	c0 34       	cpi	r28, 0x40	; 64
     a10:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a12:	de 07       	cpc	r29, r30
     a14:	21 f4       	brne	.+8      	; 0xa1e <usart_init_rs232+0xd0>
     a16:	62 e0       	ldi	r22, 0x02	; 2
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	a3 d3       	rcall	.+1862   	; 0x1162 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a1c:	5f c0       	rjmp	.+190    	; 0xadc <usart_init_rs232+0x18e>
     a1e:	c0 39       	cpi	r28, 0x90	; 144
     a20:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a22:	df 07       	cpc	r29, r31
     a24:	21 f4       	brne	.+8      	; 0xa2e <usart_init_rs232+0xe0>
     a26:	64 e0       	ldi	r22, 0x04	; 4
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	9b d3       	rcall	.+1846   	; 0x1162 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a2c:	57 c0       	rjmp	.+174    	; 0xadc <usart_init_rs232+0x18e>
     a2e:	c0 39       	cpi	r28, 0x90	; 144
     a30:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a32:	d8 07       	cpc	r29, r24
     a34:	21 f4       	brne	.+8      	; 0xa3e <usart_init_rs232+0xf0>
     a36:	64 e0       	ldi	r22, 0x04	; 4
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	93 d3       	rcall	.+1830   	; 0x1162 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a3c:	4f c0       	rjmp	.+158    	; 0xadc <usart_init_rs232+0x18e>
     a3e:	c0 39       	cpi	r28, 0x90	; 144
     a40:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a42:	de 07       	cpc	r29, r30
     a44:	21 f4       	brne	.+8      	; 0xa4e <usart_init_rs232+0x100>
     a46:	64 e0       	ldi	r22, 0x04	; 4
     a48:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     a4a:	8b d3       	rcall	.+1814   	; 0x1162 <sysclk_enable_module>
     a4c:	47 c0       	rjmp	.+142    	; 0xadc <usart_init_rs232+0x18e>
     a4e:	c0 3c       	cpi	r28, 0xC0	; 192
     a50:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     a52:	df 07       	cpc	r29, r31
     a54:	21 f4       	brne	.+8      	; 0xa5e <usart_init_rs232+0x110>
     a56:	68 e0       	ldi	r22, 0x08	; 8
     a58:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     a5a:	83 d3       	rcall	.+1798   	; 0x1162 <sysclk_enable_module>
     a5c:	3f c0       	rjmp	.+126    	; 0xadc <usart_init_rs232+0x18e>
     a5e:	c0 3c       	cpi	r28, 0xC0	; 192
     a60:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     a62:	d8 07       	cpc	r29, r24
     a64:	21 f4       	brne	.+8      	; 0xa6e <usart_init_rs232+0x120>
     a66:	68 e0       	ldi	r22, 0x08	; 8
     a68:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     a6a:	7b d3       	rcall	.+1782   	; 0x1162 <sysclk_enable_module>
     a6c:	37 c0       	rjmp	.+110    	; 0xadc <usart_init_rs232+0x18e>
     a6e:	c0 3a       	cpi	r28, 0xA0	; 160
     a70:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     a72:	de 07       	cpc	r29, r30
     a74:	21 f4       	brne	.+8      	; 0xa7e <usart_init_rs232+0x130>
     a76:	60 e1       	ldi	r22, 0x10	; 16
     a78:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     a7a:	73 d3       	rcall	.+1766   	; 0x1162 <sysclk_enable_module>
     a7c:	2f c0       	rjmp	.+94     	; 0xadc <usart_init_rs232+0x18e>
     a7e:	c0 3a       	cpi	r28, 0xA0	; 160
     a80:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     a82:	df 07       	cpc	r29, r31
     a84:	21 f4       	brne	.+8      	; 0xa8e <usart_init_rs232+0x140>
     a86:	60 e1       	ldi	r22, 0x10	; 16
     a88:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     a8a:	6b d3       	rcall	.+1750   	; 0x1162 <sysclk_enable_module>
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <usart_init_rs232+0x18e>
     a8e:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	d8 07       	cpc	r29, r24
     a94:	21 f4       	brne	.+8      	; 0xa9e <usart_init_rs232+0x150>
     a96:	60 e1       	ldi	r22, 0x10	; 16
     a98:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     a9a:	63 d3       	rcall	.+1734   	; 0x1162 <sysclk_enable_module>
     a9c:	1f c0       	rjmp	.+62     	; 0xadc <usart_init_rs232+0x18e>
     a9e:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     aa0:	e8 e0       	ldi	r30, 0x08	; 8
     aa2:	de 07       	cpc	r29, r30
     aa4:	21 f4       	brne	.+8      	; 0xaae <usart_init_rs232+0x160>
     aa6:	60 e2       	ldi	r22, 0x20	; 32
     aa8:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     aaa:	5b d3       	rcall	.+1718   	; 0x1162 <sysclk_enable_module>
     aac:	17 c0       	rjmp	.+46     	; 0xadc <usart_init_rs232+0x18e>
     aae:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     ab0:	f9 e0       	ldi	r31, 0x09	; 9
     ab2:	df 07       	cpc	r29, r31
     ab4:	21 f4       	brne	.+8      	; 0xabe <usart_init_rs232+0x170>
     ab6:	60 e2       	ldi	r22, 0x20	; 32
     ab8:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     aba:	53 d3       	rcall	.+1702   	; 0x1162 <sysclk_enable_module>
     abc:	0f c0       	rjmp	.+30     	; 0xadc <usart_init_rs232+0x18e>
     abe:	c0 38       	cpi	r28, 0x80	; 128
     ac0:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     ac2:	d8 07       	cpc	r29, r24
     ac4:	21 f4       	brne	.+8      	; 0xace <usart_init_rs232+0x180>
     ac6:	60 e4       	ldi	r22, 0x40	; 64
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	4b d3       	rcall	.+1686   	; 0x1162 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     acc:	07 c0       	rjmp	.+14     	; 0xadc <usart_init_rs232+0x18e>
     ace:	c0 3a       	cpi	r28, 0xA0	; 160
     ad0:	e4 e0       	ldi	r30, 0x04	; 4
     ad2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     ad4:	19 f4       	brne	.+6      	; 0xadc <usart_init_rs232+0x18e>
     ad6:	60 e4       	ldi	r22, 0x40	; 64
     ad8:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     ada:	43 d3       	rcall	.+1670   	; 0x1162 <sysclk_enable_module>
     adc:	8d 81       	ldd	r24, Y+5	; 0x05
     ade:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     ae0:	8d 83       	std	Y+5, r24	; 0x05
     ae2:	f8 01       	movw	r30, r16
     ae4:	95 81       	ldd	r25, Z+5	; 0x05
     ae6:	84 81       	ldd	r24, Z+4	; 0x04
     ae8:	89 2b       	or	r24, r25
     aea:	96 81       	ldd	r25, Z+6	; 0x06
     aec:	91 11       	cpse	r25, r1
     aee:	98 e0       	ldi	r25, 0x08	; 8
     af0:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     af2:	8d 83       	std	Y+5, r24	; 0x05
     af4:	f8 01       	movw	r30, r16
     af6:	40 81       	ld	r20, Z
     af8:	51 81       	ldd	r21, Z+1	; 0x01
     afa:	62 81       	ldd	r22, Z+2	; 0x02
     afc:	73 81       	ldd	r23, Z+3	; 0x03
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	18 e4       	ldi	r17, 0x48	; 72
     b02:	28 ee       	ldi	r18, 0xE8	; 232
     b04:	31 e0       	ldi	r19, 0x01	; 1
     b06:	ce 01       	movw	r24, r28
     b08:	0f de       	rcall	.-994    	; 0x728 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     b0a:	9c 81       	ldd	r25, Y+4	; 0x04
     b0c:	98 60       	ori	r25, 0x08	; 8
     b0e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     b10:	9c 81       	ldd	r25, Y+4	; 0x04
     b12:	90 61       	ori	r25, 0x10	; 16
     b14:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	08 95       	ret

00000b20 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     b20:	08 95       	ret

00000b22 <imu_roll>:



double imu_roll()
{
	return bno055_euler.r;
     b22:	60 91 30 21 	lds	r22, 0x2130	; 0x802130 <bno055_euler+0x4>
     b26:	70 91 31 21 	lds	r23, 0x2131	; 0x802131 <bno055_euler+0x5>
     b2a:	80 91 32 21 	lds	r24, 0x2132	; 0x802132 <bno055_euler+0x6>
     b2e:	90 91 33 21 	lds	r25, 0x2133	; 0x802133 <bno055_euler+0x7>
}
     b32:	08 95       	ret

00000b34 <imu_pitch>:

double imu_pitch()
{
	return bno055_euler.p;
     b34:	60 91 34 21 	lds	r22, 0x2134	; 0x802134 <bno055_euler+0x8>
     b38:	70 91 35 21 	lds	r23, 0x2135	; 0x802135 <bno055_euler+0x9>
     b3c:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <bno055_euler+0xa>
     b40:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <bno055_euler+0xb>
}
     b44:	08 95       	ret

00000b46 <imu_heading>:

double imu_heading()
{
	return bno055_euler.h;
     b46:	60 91 2c 21 	lds	r22, 0x212C	; 0x80212c <bno055_euler>
     b4a:	70 91 2d 21 	lds	r23, 0x212D	; 0x80212d <bno055_euler+0x1>
     b4e:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <bno055_euler+0x2>
     b52:	90 91 2f 21 	lds	r25, 0x212F	; 0x80212f <bno055_euler+0x3>
}
     b56:	08 95       	ret

00000b58 <cam_switch>:
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
	cam_switch();
}

void cam_switch(void){
	PORTA.OUT ^= PIN3_bm; // Changes A3 from high to low or vice-versa
     b58:	e0 e0       	ldi	r30, 0x00	; 0
     b5a:	f6 e0       	ldi	r31, 0x06	; 6
     b5c:	94 81       	ldd	r25, Z+4	; 0x04
     b5e:	88 e0       	ldi	r24, 0x08	; 8
     b60:	89 27       	eor	r24, r25
     b62:	84 83       	std	Z+4, r24	; 0x04
     b64:	08 95       	ret

00000b66 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
     b66:	e0 e0       	ldi	r30, 0x00	; 0
     b68:	f6 e0       	ldi	r31, 0x06	; 6
     b6a:	80 81       	ld	r24, Z
     b6c:	88 60       	ori	r24, 0x08	; 8
     b6e:	80 83       	st	Z, r24
	cam_switch();
     b70:	f3 cf       	rjmp	.-26     	; 0xb58 <cam_switch>
     b72:	08 95       	ret

00000b74 <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b7e:	62 e0       	ldi	r22, 0x02	; 2
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	ef d2       	rcall	.+1502   	; 0x1162 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
     b84:	c0 e0       	ldi	r28, 0x00	; 0
     b86:	d2 e0       	ldi	r29, 0x02	; 2
     b88:	ff 24       	eor	r15, r15
     b8a:	f3 94       	inc	r15
     b8c:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
     b8e:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
     b90:	80 e1       	ldi	r24, 0x10	; 16
     b92:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     b98:	61 e2       	ldi	r22, 0x21	; 33
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	f7 d2       	rcall	.+1518   	; 0x118e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     ba0:	08 2f       	mov	r16, r24
     ba2:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     ba4:	10 2f       	mov	r17, r16
     ba6:	00 27       	eor	r16, r16
     ba8:	60 e2       	ldi	r22, 0x20	; 32
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	ef d2       	rcall	.+1502   	; 0x118e <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     bb0:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
     bb2:	0c 87       	std	Y+12, r16	; 0x0c
     bb4:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
     bb6:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 0	
     bb8:	19 a2       	std	Y+33, r1	; 0x21
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	08 95       	ret

00000bc6 <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	27 97       	sbiw	r28, 0x07	; 7
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     bd4:	60 e2       	ldi	r22, 0x20	; 32
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	c4 d2       	rcall	.+1416   	; 0x1162 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     bda:	e0 e6       	ldi	r30, 0x60	; 96
     bdc:	f6 e0       	ldi	r31, 0x06	; 6
     bde:	80 81       	ld	r24, Z
     be0:	80 68       	ori	r24, 0x80	; 128
     be2:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     be4:	e6 e0       	ldi	r30, 0x06	; 6
     be6:	f0 e2       	ldi	r31, 0x20	; 32
     be8:	84 81       	ldd	r24, Z+4	; 0x04
     bea:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     bec:	85 81       	ldd	r24, Z+5	; 0x05
     bee:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     bf0:	86 81       	ldd	r24, Z+6	; 0x06
     bf2:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	a2 81       	ldd	r26, Z+2	; 0x02
     bfa:	b3 81       	ldd	r27, Z+3	; 0x03
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	9a 83       	std	Y+2, r25	; 0x02
     c00:	ab 83       	std	Y+3, r26	; 0x03
     c02:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     c04:	60 e2       	ldi	r22, 0x20	; 32
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	ac d2       	rcall	.+1368   	; 0x1162 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c0a:	be 01       	movw	r22, r28
     c0c:	6f 5f       	subi	r22, 0xFF	; 255
     c0e:	7f 4f       	sbci	r23, 0xFF	; 255
     c10:	80 eb       	ldi	r24, 0xB0	; 176
     c12:	99 e0       	ldi	r25, 0x09	; 9
     c14:	9c de       	rcall	.-712    	; 0x94e <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     c16:	27 96       	adiw	r28, 0x07	; 7
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     c24:	61 50       	subi	r22, 0x01	; 1
     c26:	71 09       	sbc	r23, r1
     c28:	81 09       	sbc	r24, r1
     c2a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     c2c:	61 15       	cp	r22, r1
     c2e:	71 05       	cpc	r23, r1
     c30:	81 05       	cpc	r24, r1
     c32:	91 05       	cpc	r25, r1
     c34:	b9 f7       	brne	.-18     	; 0xc24 <__portable_avr_delay_cycles+0x2>
     c36:	08 95       	ret

00000c38 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     c38:	e0 e4       	ldi	r30, 0x40	; 64
     c3a:	f6 e0       	ldi	r31, 0x06	; 6
     c3c:	94 81       	ldd	r25, Z+4	; 0x04
     c3e:	80 e1       	ldi	r24, 0x10	; 16
     c40:	89 27       	eor	r24, r25
     c42:	84 83       	std	Z+4, r24	; 0x04
     c44:	08 95       	ret

00000c46 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     c46:	e0 e4       	ldi	r30, 0x40	; 64
     c48:	f6 e0       	ldi	r31, 0x06	; 6
     c4a:	84 81       	ldd	r24, Z+4	; 0x04
     c4c:	80 61       	ori	r24, 0x10	; 16
     c4e:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
     c50:	f3 df       	rcall	.-26     	; 0xc38 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     c52:	8e e1       	ldi	r24, 0x1E	; 30
     c54:	b9 d0       	rcall	.+370    	; 0xdc8 <spi_write>
	delay_ms(3);
     c56:	60 e8       	ldi	r22, 0x80	; 128
     c58:	7e e3       	ldi	r23, 0x3E	; 62
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     c5e:	e1 df       	rcall	.-62     	; 0xc22 <__portable_avr_delay_cycles>
     c60:	eb df       	rcall	.-42     	; 0xc38 <flip_ms5607>
	delay_ms(2);
     c62:	6b ea       	ldi	r22, 0xAB	; 171
     c64:	79 e2       	ldi	r23, 0x29	; 41
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	db cf       	rjmp	.-74     	; 0xc22 <__portable_avr_delay_cycles>
     c6c:	08 95       	ret

00000c6e <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     c74:	e1 df       	rcall	.-62     	; 0xc38 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     c76:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     c78:	a7 d0       	rcall	.+334    	; 0xdc8 <spi_write>
     c7a:	97 d0       	rcall	.+302    	; 0xdaa <spi_read>
     c7c:	c8 2f       	mov	r28, r24
     c7e:	d0 e0       	ldi	r29, 0x00	; 0
     c80:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     c82:	cc 27       	eor	r28, r28
     c84:	92 d0       	rcall	.+292    	; 0xdaa <spi_read>
     c86:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     c88:	d7 df       	rcall	.-82     	; 0xc38 <flip_ms5607>
     c8a:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <ms5607_convert_d1>:
     c92:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
     c94:	df 93       	push	r29
     c96:	00 d0       	rcall	.+0      	; 0xc98 <ms5607_convert_d1+0x6>
     c98:	1f 92       	push	r1
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
     c9e:	19 82       	std	Y+1, r1	; 0x01
     ca0:	1a 82       	std	Y+2, r1	; 0x02
     ca2:	1b 82       	std	Y+3, r1	; 0x03
     ca4:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
     ca6:	c8 df       	rcall	.-112    	; 0xc38 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     ca8:	88 e4       	ldi	r24, 0x48	; 72
     caa:	8e d0       	rcall	.+284    	; 0xdc8 <spi_write>
	delay_ms(10);
     cac:	66 e5       	ldi	r22, 0x56	; 86
     cae:	70 ed       	ldi	r23, 0xD0	; 208
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     cb4:	b6 df       	rcall	.-148    	; 0xc22 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     cb6:	c0 df       	rcall	.-128    	; 0xc38 <flip_ms5607>
     cb8:	bf df       	rcall	.-130    	; 0xc38 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	85 d0       	rcall	.+266    	; 0xdc8 <spi_write>
     cbe:	75 d0       	rcall	.+234    	; 0xdaa <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	dc 01       	movw	r26, r24
     cc8:	99 27       	eor	r25, r25
     cca:	88 27       	eor	r24, r24
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	ab 83       	std	Y+3, r26	; 0x03
     cd2:	bc 83       	std	Y+4, r27	; 0x04
     cd4:	6a d0       	rcall	.+212    	; 0xdaa <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
     cd6:	49 81       	ldd	r20, Y+1	; 0x01
     cd8:	5a 81       	ldd	r21, Y+2	; 0x02
     cda:	6b 81       	ldd	r22, Y+3	; 0x03
     cdc:	7c 81       	ldd	r23, Y+4	; 0x04
     cde:	58 2b       	or	r21, r24
     ce0:	49 83       	std	Y+1, r20	; 0x01
     ce2:	5a 83       	std	Y+2, r21	; 0x02
     ce4:	6b 83       	std	Y+3, r22	; 0x03
     ce6:	7c 83       	std	Y+4, r23	; 0x04
     ce8:	60 d0       	rcall	.+192    	; 0xdaa <spi_read>
	rx_data |= spi_read();
     cea:	49 81       	ldd	r20, Y+1	; 0x01
     cec:	5a 81       	ldd	r21, Y+2	; 0x02
     cee:	6b 81       	ldd	r22, Y+3	; 0x03
     cf0:	7c 81       	ldd	r23, Y+4	; 0x04
     cf2:	48 2b       	or	r20, r24
     cf4:	49 83       	std	Y+1, r20	; 0x01
     cf6:	5a 83       	std	Y+2, r21	; 0x02
     cf8:	6b 83       	std	Y+3, r22	; 0x03
     cfa:	7c 83       	std	Y+4, r23	; 0x04
     cfc:	9d df       	rcall	.-198    	; 0xc38 <flip_ms5607>
	flip_ms5607();
     cfe:	69 81       	ldd	r22, Y+1	; 0x01
     d00:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	24 96       	adiw	r28, 0x04	; 4
     d08:	cd bf       	out	0x3d, r28	; 61
}
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <ms5607_convert_d2>:
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
     d16:	00 d0       	rcall	.+0      	; 0xd18 <ms5607_convert_d2+0x6>
     d18:	1f 92       	push	r1
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
     d1e:	19 82       	std	Y+1, r1	; 0x01
     d20:	1a 82       	std	Y+2, r1	; 0x02
     d22:	1b 82       	std	Y+3, r1	; 0x03
     d24:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
     d26:	88 df       	rcall	.-240    	; 0xc38 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     d28:	88 e5       	ldi	r24, 0x58	; 88
     d2a:	4e d0       	rcall	.+156    	; 0xdc8 <spi_write>
	delay_ms(10);
     d2c:	66 e5       	ldi	r22, 0x56	; 86
     d2e:	70 ed       	ldi	r23, 0xD0	; 208
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     d34:	76 df       	rcall	.-276    	; 0xc22 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     d36:	80 df       	rcall	.-256    	; 0xc38 <flip_ms5607>
     d38:	7f df       	rcall	.-258    	; 0xc38 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	45 d0       	rcall	.+138    	; 0xdc8 <spi_write>
     d3e:	35 d0       	rcall	.+106    	; 0xdaa <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a0 e0       	ldi	r26, 0x00	; 0
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	dc 01       	movw	r26, r24
     d48:	99 27       	eor	r25, r25
     d4a:	88 27       	eor	r24, r24
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	ab 83       	std	Y+3, r26	; 0x03
     d52:	bc 83       	std	Y+4, r27	; 0x04
     d54:	2a d0       	rcall	.+84     	; 0xdaa <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
     d56:	49 81       	ldd	r20, Y+1	; 0x01
     d58:	5a 81       	ldd	r21, Y+2	; 0x02
     d5a:	6b 81       	ldd	r22, Y+3	; 0x03
     d5c:	7c 81       	ldd	r23, Y+4	; 0x04
     d5e:	58 2b       	or	r21, r24
     d60:	49 83       	std	Y+1, r20	; 0x01
     d62:	5a 83       	std	Y+2, r21	; 0x02
     d64:	6b 83       	std	Y+3, r22	; 0x03
     d66:	7c 83       	std	Y+4, r23	; 0x04
     d68:	20 d0       	rcall	.+64     	; 0xdaa <spi_read>
	rx_data |= spi_read();
     d6a:	49 81       	ldd	r20, Y+1	; 0x01
     d6c:	5a 81       	ldd	r21, Y+2	; 0x02
     d6e:	6b 81       	ldd	r22, Y+3	; 0x03
     d70:	7c 81       	ldd	r23, Y+4	; 0x04
     d72:	48 2b       	or	r20, r24
     d74:	49 83       	std	Y+1, r20	; 0x01
     d76:	5a 83       	std	Y+2, r21	; 0x02
     d78:	6b 83       	std	Y+3, r22	; 0x03
     d7a:	7c 83       	std	Y+4, r23	; 0x04
     d7c:	5d df       	rcall	.-326    	; 0xc38 <flip_ms5607>
	flip_ms5607();
     d7e:	69 81       	ldd	r22, Y+1	; 0x01
     d80:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	24 96       	adiw	r28, 0x04	; 4
     d88:	cd bf       	out	0x3d, r28	; 61
}
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <spi_init>:
     d92:	e0 e4       	ldi	r30, 0x40	; 64
     d94:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     d96:	80 81       	ld	r24, Z
     d98:	80 6b       	ori	r24, 0xB0	; 176
     d9a:	80 83       	st	Z, r24
     d9c:	68 e0       	ldi	r22, 0x08	; 8
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	e0 d1       	rcall	.+960    	; 0x1162 <sysclk_enable_module>
     da2:	8c e5       	ldi	r24, 0x5C	; 92
     da4:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     da8:	08 95       	ret

00000daa <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
     daa:	9f b7       	in	r25, 0x3f	; 63
	cli();
     dac:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
     db4:	e0 ec       	ldi	r30, 0xC0	; 192
     db6:	f8 e0       	ldi	r31, 0x08	; 8
     db8:	82 81       	ldd	r24, Z+2	; 0x02
     dba:	88 23       	and	r24, r24
     dbc:	ec f7       	brge	.-6      	; 0xdb8 <spi_read+0xe>
	sei();
     dbe:	78 94       	sei
	SREG=oldInterruptState;
     dc0:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
     dc2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     dc6:	08 95       	ret

00000dc8 <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
     dc8:	9f b7       	in	r25, 0x3f	; 63
	cli();
     dca:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
     dcc:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     dd0:	e0 ec       	ldi	r30, 0xC0	; 192
     dd2:	f8 e0       	ldi	r31, 0x08	; 8
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	88 23       	and	r24, r24
     dd8:	ec f7       	brge	.-6      	; 0xdd4 <spi_write+0xc>
	sei();
     dda:	78 94       	sei
	SREG=oldInterruptState;
     ddc:	9f bf       	out	0x3f, r25	; 63
     dde:	08 95       	ret

00000de0 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     de6:	9a dc       	rcall	.-1740   	; 0x71c <usart_getchar>
     de8:	88 83       	st	Y, r24
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     df0:	8d cc       	rjmp	.-1766   	; 0x70c <usart_putchar>
}
     df2:	08 95       	ret

00000df4 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	27 97       	sbiw	r28, 0x07	; 7
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e02:	60 e1       	ldi	r22, 0x10	; 16
     e04:	85 e0       	ldi	r24, 0x05	; 5
     e06:	ad d1       	rcall	.+858    	; 0x1162 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     e08:	e0 e8       	ldi	r30, 0x80	; 128
     e0a:	f6 e0       	ldi	r31, 0x06	; 6
     e0c:	80 81       	ld	r24, Z
     e0e:	88 60       	ori	r24, 0x08	; 8
     e10:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     e12:	80 ea       	ldi	r24, 0xA0	; 160
     e14:	9a e0       	ldi	r25, 0x0A	; 10
     e16:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <stdio_base>
     e1a:	90 93 0e 21 	sts	0x210E, r25	; 0x80210e <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e1e:	88 ef       	ldi	r24, 0xF8	; 248
     e20:	96 e0       	ldi	r25, 0x06	; 6
     e22:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <ptr_put>
     e26:	90 93 0c 21 	sts	0x210C, r25	; 0x80210c <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     e2a:	80 ef       	ldi	r24, 0xF0	; 240
     e2c:	96 e0       	ldi	r25, 0x06	; 6
     e2e:	80 93 09 21 	sts	0x2109, r24	; 0x802109 <ptr_get>
     e32:	90 93 0a 21 	sts	0x210A, r25	; 0x80210a <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     e36:	ed e0       	ldi	r30, 0x0D	; 13
     e38:	f0 e2       	ldi	r31, 0x20	; 32
     e3a:	84 81       	ldd	r24, Z+4	; 0x04
     e3c:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     e3e:	85 81       	ldd	r24, Z+5	; 0x05
     e40:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     e42:	86 81       	ldd	r24, Z+6	; 0x06
     e44:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	a2 81       	ldd	r26, Z+2	; 0x02
     e4c:	b3 81       	ldd	r27, Z+3	; 0x03
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	ab 83       	std	Y+3, r26	; 0x03
     e54:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     e56:	60 e1       	ldi	r22, 0x10	; 16
     e58:	85 e0       	ldi	r24, 0x05	; 5
     e5a:	83 d1       	rcall	.+774    	; 0x1162 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     e5c:	be 01       	movw	r22, r28
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	80 ea       	ldi	r24, 0xA0	; 160
     e64:	9a e0       	ldi	r25, 0x0A	; 10
     e66:	73 dd       	rcall	.-1306   	; 0x94e <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     e68:	6c e6       	ldi	r22, 0x6C	; 108
     e6a:	71 e0       	ldi	r23, 0x01	; 1
     e6c:	85 e8       	ldi	r24, 0x85	; 133
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
     e74:	27 96       	adiw	r28, 0x07	; 7
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <voltage_init>:
#include "voltage.h"
#include <asf.h>


void voltage_init(void)
{
     e80:	ff 92       	push	r15
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     e8a:	62 e0       	ldi	r22, 0x02	; 2
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	69 d1       	rcall	.+722    	; 0x1162 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&VOLTAGE_SERIAL);
	VOLTAGE_SERIAL.CTRLA = 0x01; // enable the ADC
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	d2 e0       	ldi	r29, 0x02	; 2
     e94:	ff 24       	eor	r15, r15
     e96:	f3 94       	inc	r15
     e98:	f8 82       	st	Y, r15
	VOLTAGE_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
     e9a:	19 82       	std	Y+1, r1	; 0x01
	VOLTAGE_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
     e9c:	80 e1       	ldi	r24, 0x10	; 16
     e9e:	8a 83       	std	Y+2, r24	; 0x02
	VOLTAGE_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
     ea0:	85 e0       	ldi	r24, 0x05	; 5
     ea2:	8c 83       	std	Y+4, r24	; 0x04
     ea4:	61 e2       	ldi	r22, 0x21	; 33
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	71 d1       	rcall	.+738    	; 0x118e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     eac:	08 2f       	mov	r16, r24
     eae:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     eb0:	10 2f       	mov	r17, r16
     eb2:	00 27       	eor	r16, r16
     eb4:	60 e2       	ldi	r22, 0x20	; 32
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	69 d1       	rcall	.+722    	; 0x118e <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     ebc:	08 2b       	or	r16, r24
	VOLTAGE_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
     ebe:	0c 87       	std	Y+12, r16	; 0x0c
     ec0:	1d 87       	std	Y+13, r17	; 0x0d
	
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL = 0x01; // single ended input
     ec2:	f8 a6       	std	Y+40, r15	; 0x28
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
     ec4:	19 a6       	std	Y+41, r1	; 0x29
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	08 95       	ret

00000ed2 <voltage_read>:

uint16_t voltage_read(void)
{
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
     ed2:	e0 e0       	ldi	r30, 0x00	; 0
     ed4:	f2 e0       	ldi	r31, 0x02	; 2
     ed6:	80 a5       	ldd	r24, Z+40	; 0x28
     ed8:	80 68       	ori	r24, 0x80	; 128
     eda:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_SERIAL.VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
     edc:	83 a5       	ldd	r24, Z+43	; 0x2b
     ede:	88 23       	and	r24, r24
     ee0:	e9 f3       	breq	.-6      	; 0xedc <voltage_read+0xa>
	return VOLTAGE_SERIAL.VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
     ee2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     ee6:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     eea:	08 95       	ret

00000eec <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	fc 01       	movw	r30, r24
     ef2:	41 15       	cp	r20, r1
     ef4:	51 05       	cpc	r21, r1
     ef6:	b1 f1       	breq	.+108    	; 0xf64 <rb16_write+0x78>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	db 01       	movw	r26, r22
     f04:	a8 0f       	add	r26, r24
     f06:	b9 1f       	adc	r27, r25
     f08:	8d 91       	ld	r24, X+
     f0a:	9c 91       	ld	r25, X
     f0c:	a2 81       	ldd	r26, Z+2	; 0x02
     f0e:	b3 81       	ldd	r27, Z+3	; 0x03
     f10:	aa 0f       	add	r26, r26
     f12:	bb 1f       	adc	r27, r27
     f14:	c6 81       	ldd	r28, Z+6	; 0x06
     f16:	d7 81       	ldd	r29, Z+7	; 0x07
     f18:	ac 0f       	add	r26, r28
     f1a:	bd 1f       	adc	r27, r29
     f1c:	8d 93       	st	X+, r24
     f1e:	9c 93       	st	X, r25
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	82 83       	std	Z+2, r24	; 0x02
     f28:	93 83       	std	Z+3, r25	; 0x03
     f2a:	a0 81       	ld	r26, Z
     f2c:	b1 81       	ldd	r27, Z+1	; 0x01
     f2e:	8a 17       	cp	r24, r26
     f30:	9b 07       	cpc	r25, r27
     f32:	11 f4       	brne	.+4      	; 0xf38 <rb16_write+0x4c>
     f34:	12 82       	std	Z+2, r1	; 0x02
     f36:	13 82       	std	Z+3, r1	; 0x03
     f38:	82 81       	ldd	r24, Z+2	; 0x02
     f3a:	93 81       	ldd	r25, Z+3	; 0x03
     f3c:	c4 81       	ldd	r28, Z+4	; 0x04
     f3e:	d5 81       	ldd	r29, Z+5	; 0x05
     f40:	8c 17       	cp	r24, r28
     f42:	9d 07       	cpc	r25, r29
     f44:	49 f4       	brne	.+18     	; 0xf58 <rb16_write+0x6c>
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	a8 17       	cp	r26, r24
     f4a:	b9 07       	cpc	r27, r25
     f4c:	19 f0       	breq	.+6      	; 0xf54 <rb16_write+0x68>
     f4e:	84 83       	std	Z+4, r24	; 0x04
     f50:	95 83       	std	Z+5, r25	; 0x05
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <rb16_write+0x6c>
     f54:	14 82       	std	Z+4, r1	; 0x04
     f56:	15 82       	std	Z+5, r1	; 0x05
     f58:	2f 5f       	subi	r18, 0xFF	; 255
     f5a:	82 2f       	mov	r24, r18
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	84 17       	cp	r24, r20
     f60:	95 07       	cpc	r25, r21
     f62:	68 f2       	brcs	.-102    	; 0xefe <rb16_write+0x12>
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <rb16_init>:
     f6a:	fc 01       	movw	r30, r24
     f6c:	12 82       	std	Z+2, r1	; 0x02
     f6e:	13 82       	std	Z+3, r1	; 0x03
     f70:	14 82       	std	Z+4, r1	; 0x04
     f72:	15 82       	std	Z+5, r1	; 0x05
     f74:	66 83       	std	Z+6, r22	; 0x06
     f76:	77 83       	std	Z+7, r23	; 0x07
     f78:	40 83       	st	Z, r20
     f7a:	51 83       	std	Z+1, r21	; 0x01
     f7c:	08 95       	ret

00000f7e <rb16_get_nth>:
     f7e:	dc 01       	movw	r26, r24
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	13 97       	sbiw	r26, 0x03	; 3
     f88:	cb 01       	movw	r24, r22
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	e8 17       	cp	r30, r24
     f8e:	f9 07       	cpc	r31, r25
     f90:	78 f0       	brcs	.+30     	; 0xfb0 <rb16_get_nth+0x32>
     f92:	e1 50       	subi	r30, 0x01	; 1
     f94:	f0 48       	sbci	r31, 0x80	; 128
     f96:	e6 1b       	sub	r30, r22
     f98:	f7 0b       	sbc	r31, r23
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	16 96       	adiw	r26, 0x06	; 6
     fa0:	8d 91       	ld	r24, X+
     fa2:	9c 91       	ld	r25, X
     fa4:	17 97       	sbiw	r26, 0x07	; 7
     fa6:	e8 0f       	add	r30, r24
     fa8:	f9 1f       	adc	r31, r25
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	08 95       	ret
     fb0:	2d 91       	ld	r18, X+
     fb2:	3c 91       	ld	r19, X
     fb4:	11 97       	sbiw	r26, 0x01	; 1
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	e1 50       	subi	r30, 0x01	; 1
     fbc:	f0 48       	sbci	r31, 0x80	; 128
     fbe:	e6 1b       	sub	r30, r22
     fc0:	f7 0b       	sbc	r31, r23
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	16 96       	adiw	r26, 0x06	; 6
     fc8:	8d 91       	ld	r24, X+
     fca:	9c 91       	ld	r25, X
     fcc:	17 97       	sbiw	r26, 0x07	; 7
     fce:	e8 0f       	add	r30, r24
     fd0:	f9 1f       	adc	r31, r25
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	08 95       	ret

00000fd8 <rb32_write>:
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	fc 01       	movw	r30, r24
     fe6:	41 15       	cp	r20, r1
     fe8:	51 05       	cpc	r21, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <rb32_write+0x16>
     fec:	3f c0       	rjmp	.+126    	; 0x106c <rb32_write+0x94>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	db 01       	movw	r26, r22
     ffe:	a8 0f       	add	r26, r24
    1000:	b9 1f       	adc	r27, r25
    1002:	cd 90       	ld	r12, X+
    1004:	dd 90       	ld	r13, X+
    1006:	ed 90       	ld	r14, X+
    1008:	fc 90       	ld	r15, X
    100a:	a2 81       	ldd	r26, Z+2	; 0x02
    100c:	b3 81       	ldd	r27, Z+3	; 0x03
    100e:	aa 0f       	add	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	aa 0f       	add	r26, r26
    1014:	bb 1f       	adc	r27, r27
    1016:	86 81       	ldd	r24, Z+6	; 0x06
    1018:	97 81       	ldd	r25, Z+7	; 0x07
    101a:	a8 0f       	add	r26, r24
    101c:	b9 1f       	adc	r27, r25
    101e:	cd 92       	st	X+, r12
    1020:	dd 92       	st	X+, r13
    1022:	ed 92       	st	X+, r14
    1024:	fc 92       	st	X, r15
    1026:	13 97       	sbiw	r26, 0x03	; 3
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	82 83       	std	Z+2, r24	; 0x02
    1030:	93 83       	std	Z+3, r25	; 0x03
    1032:	a0 81       	ld	r26, Z
    1034:	b1 81       	ldd	r27, Z+1	; 0x01
    1036:	8a 17       	cp	r24, r26
    1038:	9b 07       	cpc	r25, r27
    103a:	11 f4       	brne	.+4      	; 0x1040 <rb32_write+0x68>
    103c:	12 82       	std	Z+2, r1	; 0x02
    103e:	13 82       	std	Z+3, r1	; 0x03
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	c4 81       	ldd	r28, Z+4	; 0x04
    1046:	d5 81       	ldd	r29, Z+5	; 0x05
    1048:	8c 17       	cp	r24, r28
    104a:	9d 07       	cpc	r25, r29
    104c:	49 f4       	brne	.+18     	; 0x1060 <rb32_write+0x88>
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	a8 17       	cp	r26, r24
    1052:	b9 07       	cpc	r27, r25
    1054:	19 f0       	breq	.+6      	; 0x105c <rb32_write+0x84>
    1056:	84 83       	std	Z+4, r24	; 0x04
    1058:	95 83       	std	Z+5, r25	; 0x05
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <rb32_write+0x88>
    105c:	14 82       	std	Z+4, r1	; 0x04
    105e:	15 82       	std	Z+5, r1	; 0x05
    1060:	2f 5f       	subi	r18, 0xFF	; 255
    1062:	82 2f       	mov	r24, r18
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	84 17       	cp	r24, r20
    1068:	95 07       	cpc	r25, r21
    106a:	20 f2       	brcs	.-120    	; 0xff4 <rb32_write+0x1c>
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
    1078:	08 95       	ret

0000107a <rb32_init>:
    107a:	fc 01       	movw	r30, r24
    107c:	12 82       	std	Z+2, r1	; 0x02
    107e:	13 82       	std	Z+3, r1	; 0x03
    1080:	14 82       	std	Z+4, r1	; 0x04
    1082:	15 82       	std	Z+5, r1	; 0x05
    1084:	66 83       	std	Z+6, r22	; 0x06
    1086:	77 83       	std	Z+7, r23	; 0x07
    1088:	40 83       	st	Z, r20
    108a:	51 83       	std	Z+1, r21	; 0x01
    108c:	08 95       	ret

0000108e <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    108e:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    1090:	12 96       	adiw	r26, 0x02	; 2
    1092:	ed 91       	ld	r30, X+
    1094:	fc 91       	ld	r31, X
    1096:	13 97       	sbiw	r26, 0x03	; 3
    1098:	cb 01       	movw	r24, r22
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	e8 17       	cp	r30, r24
    109e:	f9 07       	cpc	r31, r25
    10a0:	98 f0       	brcs	.+38     	; 0x10c8 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    10a2:	e1 50       	subi	r30, 0x01	; 1
    10a4:	f0 4c       	sbci	r31, 0xC0	; 192
    10a6:	e6 1b       	sub	r30, r22
    10a8:	f7 0b       	sbc	r31, r23
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	16 96       	adiw	r26, 0x06	; 6
    10b4:	8d 91       	ld	r24, X+
    10b6:	9c 91       	ld	r25, X
    10b8:	17 97       	sbiw	r26, 0x07	; 7
    10ba:	e8 0f       	add	r30, r24
    10bc:	f9 1f       	adc	r31, r25
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    10c8:	2d 91       	ld	r18, X+
    10ca:	3c 91       	ld	r19, X
    10cc:	11 97       	sbiw	r26, 0x01	; 1
    10ce:	e2 0f       	add	r30, r18
    10d0:	f3 1f       	adc	r31, r19
    10d2:	e1 50       	subi	r30, 0x01	; 1
    10d4:	f0 4c       	sbci	r31, 0xC0	; 192
    10d6:	e6 1b       	sub	r30, r22
    10d8:	f7 0b       	sbc	r31, r23
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	16 96       	adiw	r26, 0x06	; 6
    10e4:	8d 91       	ld	r24, X+
    10e6:	9c 91       	ld	r25, X
    10e8:	17 97       	sbiw	r26, 0x07	; 7
    10ea:	e8 0f       	add	r30, r24
    10ec:	f9 1f       	adc	r31, r25
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	93 81       	ldd	r25, Z+3	; 0x03
}
    10f6:	08 95       	ret

000010f8 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	1f 92       	push	r1
    10fe:	1f 92       	push	r1
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    110a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    110e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1112:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1116:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    111a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    111e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1122:	8f b7       	in	r24, 0x3f	; 63
    1124:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1126:	f8 94       	cli
	return flags;
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    112a:	e0 e5       	ldi	r30, 0x50	; 80
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	82 60       	ori	r24, 0x02	; 2
    1132:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1134:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1136:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1138:	81 ff       	sbrs	r24, 1
    113a:	fd cf       	rjmp	.-6      	; 0x1136 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	80 e4       	ldi	r24, 0x40	; 64
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	2f d0       	rcall	.+94     	; 0x11a2 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1144:	8f b7       	in	r24, 0x3f	; 63
    1146:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1148:	f8 94       	cli
	return flags;
    114a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    114c:	e0 e5       	ldi	r30, 0x50	; 80
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8e 7f       	andi	r24, 0xFE	; 254
    1154:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1156:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	08 95       	ret

00001162 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	1f 92       	push	r1
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    116c:	9f b7       	in	r25, 0x3f	; 63
    116e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1170:	f8 94       	cli
	return flags;
    1172:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1174:	e8 2f       	mov	r30, r24
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	e0 59       	subi	r30, 0x90	; 144
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	60 95       	com	r22
    117e:	80 81       	ld	r24, Z
    1180:	68 23       	and	r22, r24
    1182:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1184:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1186:	0f 90       	pop	r0
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    118e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1192:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1194:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1196:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    119a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    119c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    11a0:	08 95       	ret

000011a2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    11a2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    11a4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    11a6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    11a8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    11aa:	60 83       	st	Z, r22
	ret                             // Return to caller
    11ac:	08 95       	ret

000011ae <__portable_avr_delay_cycles>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	delay_ms(1);
	uint8_t byte = NVM.DATA0;
	return byte;
}
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <__portable_avr_delay_cycles+0xa>
    11b0:	61 50       	subi	r22, 0x01	; 1
    11b2:	71 09       	sbc	r23, r1
    11b4:	81 09       	sbc	r24, r1
    11b6:	91 09       	sbc	r25, r1
    11b8:	61 15       	cp	r22, r1
    11ba:	71 05       	cpc	r23, r1
    11bc:	81 05       	cpc	r24, r1
    11be:	91 05       	cpc	r25, r1
    11c0:	b9 f7       	brne	.-18     	; 0x11b0 <__portable_avr_delay_cycles+0x2>
    11c2:	08 95       	ret

000011c4 <pressure_init>:
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	3e dd       	rcall	.-1412   	; 0xc46 <ms5607_init>
    11ca:	82 ea       	ldi	r24, 0xA2	; 162
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	4f dd       	rcall	.-1378   	; 0xc6e <ms5607_read>
    11d0:	c5 ef       	ldi	r28, 0xF5	; 245
    11d2:	d0 e2       	ldi	r29, 0x20	; 32
    11d4:	88 83       	st	Y, r24
    11d6:	99 83       	std	Y+1, r25	; 0x01
    11d8:	84 ea       	ldi	r24, 0xA4	; 164
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	48 dd       	rcall	.-1392   	; 0xc6e <ms5607_read>
    11de:	8a 83       	std	Y+2, r24	; 0x02
    11e0:	9b 83       	std	Y+3, r25	; 0x03
    11e2:	86 ea       	ldi	r24, 0xA6	; 166
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	43 dd       	rcall	.-1402   	; 0xc6e <ms5607_read>
    11e8:	8c 83       	std	Y+4, r24	; 0x04
    11ea:	9d 83       	std	Y+5, r25	; 0x05
    11ec:	88 ea       	ldi	r24, 0xA8	; 168
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	3e dd       	rcall	.-1412   	; 0xc6e <ms5607_read>
    11f2:	8e 83       	std	Y+6, r24	; 0x06
    11f4:	9f 83       	std	Y+7, r25	; 0x07
    11f6:	8a ea       	ldi	r24, 0xAA	; 170
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	39 dd       	rcall	.-1422   	; 0xc6e <ms5607_read>
    11fc:	88 87       	std	Y+8, r24	; 0x08
    11fe:	99 87       	std	Y+9, r25	; 0x09
    1200:	8c ea       	ldi	r24, 0xAC	; 172
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	34 dd       	rcall	.-1432   	; 0xc6e <ms5607_read>
    1206:	8a 87       	std	Y+10, r24	; 0x0a
    1208:	9b 87       	std	Y+11, r25	; 0x0b
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <gps_init>:
    1210:	da dc       	rcall	.-1612   	; 0xbc6 <gps_uart_init>
    1212:	6b ea       	ldi	r22, 0xAB	; 171
    1214:	79 e2       	ldi	r23, 0x29	; 41
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	c9 df       	rcall	.-110    	; 0x11ae <__portable_avr_delay_cycles>
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    1222:	08 95       	ret

00001224 <release>:
    1224:	80 eb       	ldi	r24, 0xB0	; 176
    1226:	94 e0       	ldi	r25, 0x04	; 4
    1228:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    122c:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <released>
    1236:	08 95       	ret

00001238 <get_pressure>:
    1238:	4f 92       	push	r4
    123a:	5f 92       	push	r5
    123c:	6f 92       	push	r6
    123e:	7f 92       	push	r7
    1240:	8f 92       	push	r8
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	1e dd       	rcall	.-1476   	; 0xc92 <ms5607_convert_d1>
    1256:	6b 01       	movw	r12, r22
    1258:	7c 01       	movw	r14, r24
    125a:	5b dd       	rcall	.-1354   	; 0xd12 <ms5607_convert_d2>
    125c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    1260:	4b 01       	movw	r8, r22
    1262:	5c 01       	movw	r10, r24
    1264:	c5 ef       	ldi	r28, 0xF5	; 245
    1266:	d0 e2       	ldi	r29, 0x20	; 32
    1268:	68 85       	ldd	r22, Y+8	; 0x08
    126a:	79 85       	ldd	r23, Y+9	; 0x09
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	53 e4       	ldi	r21, 0x43	; 67
    127c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	c5 01       	movw	r24, r10
    1286:	b4 01       	movw	r22, r8
    1288:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__subsf3>
    128c:	4b 01       	movw	r8, r22
    128e:	5c 01       	movw	r10, r24
    1290:	6c 81       	ldd	r22, Y+4	; 0x04
    1292:	7d 81       	ldd	r23, Y+5	; 0x05
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    129c:	a5 01       	movw	r20, r10
    129e:	94 01       	movw	r18, r8
    12a0:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	5c e3       	ldi	r21, 0x3C	; 60
    12ac:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    12b0:	2b 01       	movw	r4, r22
    12b2:	3c 01       	movw	r6, r24
    12b4:	68 81       	ld	r22, Y
    12b6:	79 81       	ldd	r23, Y+1	; 0x01
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e8       	ldi	r20, 0x80	; 128
    12c6:	57 e4       	ldi	r21, 0x47	; 71
    12c8:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    12cc:	9b 01       	movw	r18, r22
    12ce:	ac 01       	movw	r20, r24
    12d0:	c3 01       	movw	r24, r6
    12d2:	b2 01       	movw	r22, r4
    12d4:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    12d8:	2b 01       	movw	r4, r22
    12da:	3c 01       	movw	r6, r24
    12dc:	c7 01       	movw	r24, r14
    12de:	b6 01       	movw	r22, r12
    12e0:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    12e4:	9b 01       	movw	r18, r22
    12e6:	ac 01       	movw	r20, r24
    12e8:	c3 01       	movw	r24, r6
    12ea:	b2 01       	movw	r22, r4
    12ec:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	55 e3       	ldi	r21, 0x35	; 53
    12f8:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    12fc:	6b 01       	movw	r12, r22
    12fe:	7c 01       	movw	r14, r24
    1300:	6e 81       	ldd	r22, Y+6	; 0x06
    1302:	7f 81       	ldd	r23, Y+7	; 0x07
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    130c:	a5 01       	movw	r20, r10
    130e:	94 01       	movw	r18, r8
    1310:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	5c e3       	ldi	r21, 0x3C	; 60
    131c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1320:	4b 01       	movw	r8, r22
    1322:	5c 01       	movw	r10, r24
    1324:	6a 81       	ldd	r22, Y+2	; 0x02
    1326:	7b 81       	ldd	r23, Y+3	; 0x03
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	58 e4       	ldi	r21, 0x48	; 72
    1338:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    133c:	9b 01       	movw	r18, r22
    133e:	ac 01       	movw	r20, r24
    1340:	c5 01       	movw	r24, r10
    1342:	b4 01       	movw	r22, r8
    1344:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    1348:	9b 01       	movw	r18, r22
    134a:	ac 01       	movw	r20, r24
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__subsf3>
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	58 e3       	ldi	r21, 0x38	; 56
    135c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	cf 90       	pop	r12
    136c:	bf 90       	pop	r11
    136e:	af 90       	pop	r10
    1370:	9f 90       	pop	r9
    1372:	8f 90       	pop	r8
    1374:	7f 90       	pop	r7
    1376:	6f 90       	pop	r6
    1378:	5f 90       	pop	r5
    137a:	4f 90       	pop	r4
    137c:	08 95       	ret

0000137e <get_altitude>:
    137e:	4f 92       	push	r4
    1380:	5f 92       	push	r5
    1382:	6f 92       	push	r6
    1384:	7f 92       	push	r7
    1386:	8f 92       	push	r8
    1388:	9f 92       	push	r9
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	00 d0       	rcall	.+0      	; 0x139c <get_altitude+0x1e>
    139c:	1f 92       	push	r1
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	2b 01       	movw	r4, r22
    13a4:	3c 01       	movw	r6, r24
    13a6:	c0 90 1f 20 	lds	r12, 0x201F	; 0x80201f <L>
    13aa:	d0 90 20 20 	lds	r13, 0x2020	; 0x802020 <L+0x1>
    13ae:	e0 90 21 20 	lds	r14, 0x2021	; 0x802021 <L+0x2>
    13b2:	f0 90 22 20 	lds	r15, 0x2022	; 0x802022 <L+0x3>
    13b6:	80 90 2b 20 	lds	r8, 0x202B	; 0x80202b <ground_p>
    13ba:	90 90 2c 20 	lds	r9, 0x202C	; 0x80202c <ground_p+0x1>
    13be:	a0 90 2d 20 	lds	r10, 0x202D	; 0x80202d <ground_p+0x2>
    13c2:	b0 90 2e 20 	lds	r11, 0x202E	; 0x80202e <ground_p+0x3>
    13c6:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <R>
    13ca:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <R+0x1>
    13ce:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <R+0x2>
    13d2:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <R+0x3>
    13d6:	c7 01       	movw	r24, r14
    13d8:	b6 01       	movw	r22, r12
    13da:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    13de:	20 91 1b 20 	lds	r18, 0x201B	; 0x80201b <g_0>
    13e2:	30 91 1c 20 	lds	r19, 0x201C	; 0x80201c <g_0+0x1>
    13e6:	40 91 1d 20 	lds	r20, 0x201D	; 0x80201d <g_0+0x2>
    13ea:	50 91 1e 20 	lds	r21, 0x201E	; 0x80201e <g_0+0x3>
    13ee:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    13f2:	69 83       	std	Y+1, r22	; 0x01
    13f4:	7a 83       	std	Y+2, r23	; 0x02
    13f6:	8b 83       	std	Y+3, r24	; 0x03
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	a3 01       	movw	r20, r6
    13fc:	92 01       	movw	r18, r4
    13fe:	c5 01       	movw	r24, r10
    1400:	b4 01       	movw	r22, r8
    1402:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    1406:	29 81       	ldd	r18, Y+1	; 0x01
    1408:	3a 81       	ldd	r19, Y+2	; 0x02
    140a:	4b 81       	ldd	r20, Y+3	; 0x03
    140c:	5c 81       	ldd	r21, Y+4	; 0x04
    140e:	0e 94 c5 1a 	call	0x358a	; 0x358a <pow>
    1412:	40 90 27 20 	lds	r4, 0x2027	; 0x802027 <ground_t>
    1416:	50 90 28 20 	lds	r5, 0x2028	; 0x802028 <ground_t+0x1>
    141a:	60 90 29 20 	lds	r6, 0x2029	; 0x802029 <ground_t+0x2>
    141e:	70 90 2a 20 	lds	r7, 0x202A	; 0x80202a <ground_t+0x3>
    1422:	80 90 03 21 	lds	r8, 0x2103	; 0x802103 <ground_a>
    1426:	90 90 04 21 	lds	r9, 0x2104	; 0x802104 <ground_a+0x1>
    142a:	a0 90 05 21 	lds	r10, 0x2105	; 0x802105 <ground_a+0x2>
    142e:	b0 90 06 21 	lds	r11, 0x2106	; 0x802106 <ground_a+0x3>
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__subsf3>
    143e:	a3 01       	movw	r20, r6
    1440:	92 01       	movw	r18, r4
    1442:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1446:	a7 01       	movw	r20, r14
    1448:	96 01       	movw	r18, r12
    144a:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    144e:	a5 01       	movw	r20, r10
    1450:	94 01       	movw	r18, r8
    1452:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__subsf3>
    1456:	24 96       	adiw	r28, 0x04	; 4
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	bf 90       	pop	r11
    146a:	af 90       	pop	r10
    146c:	9f 90       	pop	r9
    146e:	8f 90       	pop	r8
    1470:	7f 90       	pop	r7
    1472:	6f 90       	pop	r6
    1474:	5f 90       	pop	r5
    1476:	4f 90       	pop	r4
    1478:	08 95       	ret

0000147a <get_voltage>:
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	27 dd       	rcall	.-1458   	; 0xed2 <voltage_read>
    1484:	bc 01       	movw	r22, r24
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    148e:	23 e4       	ldi	r18, 0x43	; 67
    1490:	3e e2       	ldi	r19, 0x2E	; 46
    1492:	42 e0       	ldi	r20, 0x02	; 2
    1494:	5a e3       	ldi	r21, 0x3A	; 58
    1496:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    149a:	24 ee       	ldi	r18, 0xE4	; 228
    149c:	3a e5       	ldi	r19, 0x5A	; 90
    149e:	45 ec       	ldi	r20, 0xC5	; 197
    14a0:	5d e3       	ldi	r21, 0x3D	; 61
    14a2:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__subsf3>
    14a6:	6b 01       	movw	r12, r22
    14a8:	7c 01       	movw	r14, r24
    14aa:	2b e2       	ldi	r18, 0x2B	; 43
    14ac:	35 eb       	ldi	r19, 0xB5	; 181
    14ae:	42 e1       	ldi	r20, 0x12	; 18
    14b0:	50 e4       	ldi	r21, 0x40	; 64
    14b2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    14b6:	9b 01       	movw	r18, r22
    14b8:	ac 01       	movw	r20, r24
    14ba:	c7 01       	movw	r24, r14
    14bc:	b6 01       	movw	r22, r12
    14be:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	08 95       	ret

000014cc <diff>:
    14cc:	2f 92       	push	r2
    14ce:	3f 92       	push	r3
    14d0:	4f 92       	push	r4
    14d2:	5f 92       	push	r5
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <diff+0x26>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <diff+0x28>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	6c 01       	movw	r12, r24
    14fa:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    14fe:	88 23       	and	r24, r24
    1500:	09 f4       	brne	.+2      	; 0x1504 <diff+0x38>
    1502:	6c c0       	rjmp	.+216    	; 0x15dc <diff+0x110>
    1504:	00 e0       	ldi	r16, 0x00	; 0
    1506:	10 e0       	ldi	r17, 0x00	; 0
    1508:	41 2c       	mov	r4, r1
    150a:	51 2c       	mov	r5, r1
    150c:	32 01       	movw	r6, r4
    150e:	86 2e       	mov	r8, r22
    1510:	91 2c       	mov	r9, r1
    1512:	a1 2c       	mov	r10, r1
    1514:	b1 2c       	mov	r11, r1
    1516:	89 82       	std	Y+1, r8	; 0x01
    1518:	9a 82       	std	Y+2, r9	; 0x02
    151a:	ab 82       	std	Y+3, r10	; 0x03
    151c:	bc 82       	std	Y+4, r11	; 0x04
    151e:	b8 01       	movw	r22, r16
    1520:	c6 01       	movw	r24, r12
    1522:	2d dd       	rcall	.-1446   	; 0xf7e <rb16_get_nth>
    1524:	5c 01       	movw	r10, r24
    1526:	18 01       	movw	r2, r16
    1528:	2f ef       	ldi	r18, 0xFF	; 255
    152a:	22 1a       	sub	r2, r18
    152c:	32 0a       	sbc	r3, r18
    152e:	b1 01       	movw	r22, r2
    1530:	c6 01       	movw	r24, r12
    1532:	25 dd       	rcall	.-1462   	; 0xf7e <rb16_get_nth>
    1534:	7c 01       	movw	r14, r24
    1536:	b8 01       	movw	r22, r16
    1538:	6e 5f       	subi	r22, 0xFE	; 254
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	c6 01       	movw	r24, r12
    153e:	1f dd       	rcall	.-1474   	; 0xf7e <rb16_get_nth>
    1540:	a5 01       	movw	r20, r10
    1542:	bb 0c       	add	r11, r11
    1544:	66 0b       	sbc	r22, r22
    1546:	77 0b       	sbc	r23, r23
    1548:	8a 01       	movw	r16, r20
    154a:	9b 01       	movw	r18, r22
    154c:	00 0f       	add	r16, r16
    154e:	11 1f       	adc	r17, r17
    1550:	22 1f       	adc	r18, r18
    1552:	33 1f       	adc	r19, r19
    1554:	40 0f       	add	r20, r16
    1556:	51 1f       	adc	r21, r17
    1558:	62 1f       	adc	r22, r18
    155a:	73 1f       	adc	r23, r19
    155c:	87 01       	movw	r16, r14
    155e:	ff 0c       	add	r15, r15
    1560:	22 0b       	sbc	r18, r18
    1562:	33 0b       	sbc	r19, r19
    1564:	78 01       	movw	r14, r16
    1566:	89 01       	movw	r16, r18
    1568:	ee 0c       	add	r14, r14
    156a:	ff 1c       	adc	r15, r15
    156c:	00 1f       	adc	r16, r16
    156e:	11 1f       	adc	r17, r17
    1570:	ee 0c       	add	r14, r14
    1572:	ff 1c       	adc	r15, r15
    1574:	00 1f       	adc	r16, r16
    1576:	11 1f       	adc	r17, r17
    1578:	4a 01       	movw	r8, r20
    157a:	5b 01       	movw	r10, r22
    157c:	8e 18       	sub	r8, r14
    157e:	9f 08       	sbc	r9, r15
    1580:	a0 0a       	sbc	r10, r16
    1582:	b1 0a       	sbc	r11, r17
    1584:	ac 01       	movw	r20, r24
    1586:	99 0f       	add	r25, r25
    1588:	66 0b       	sbc	r22, r22
    158a:	77 0b       	sbc	r23, r23
    158c:	d5 01       	movw	r26, r10
    158e:	c4 01       	movw	r24, r8
    1590:	84 0f       	add	r24, r20
    1592:	95 1f       	adc	r25, r21
    1594:	a6 1f       	adc	r26, r22
    1596:	b7 1f       	adc	r27, r23
    1598:	9c 01       	movw	r18, r24
    159a:	ad 01       	movw	r20, r26
    159c:	69 81       	ldd	r22, Y+1	; 0x01
    159e:	7a 81       	ldd	r23, Y+2	; 0x02
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsi3>
    15a8:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatsisf>
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    15b8:	9b 01       	movw	r18, r22
    15ba:	ac 01       	movw	r20, r24
    15bc:	c3 01       	movw	r24, r6
    15be:	b2 01       	movw	r22, r4
    15c0:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    15c4:	2b 01       	movw	r4, r22
    15c6:	3c 01       	movw	r6, r24
    15c8:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    15cc:	81 01       	movw	r16, r2
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	22 16       	cp	r2, r18
    15d4:	33 06       	cpc	r3, r19
    15d6:	08 f4       	brcc	.+2      	; 0x15da <diff+0x10e>
    15d8:	a2 cf       	rjmp	.-188    	; 0x151e <diff+0x52>
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <diff+0x116>
    15dc:	41 2c       	mov	r4, r1
    15de:	51 2c       	mov	r5, r1
    15e0:	32 01       	movw	r6, r4
    15e2:	68 2f       	mov	r22, r24
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatsisf>
    15ee:	9b 01       	movw	r18, r22
    15f0:	ac 01       	movw	r20, r24
    15f2:	c3 01       	movw	r24, r6
    15f4:	b2 01       	movw	r22, r4
    15f6:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	48 ec       	ldi	r20, 0xC8	; 200
    1600:	52 e4       	ldi	r21, 0x42	; 66
    1602:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    1606:	26 96       	adiw	r28, 0x06	; 6
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	bf 90       	pop	r11
    161e:	af 90       	pop	r10
    1620:	9f 90       	pop	r9
    1622:	8f 90       	pop	r8
    1624:	7f 90       	pop	r7
    1626:	6f 90       	pop	r6
    1628:	5f 90       	pop	r5
    162a:	4f 90       	pop	r4
    162c:	3f 90       	pop	r3
    162e:	2f 90       	pop	r2
    1630:	08 95       	ret

00001632 <data_check>:
    1632:	3f 92       	push	r3
    1634:	4f 92       	push	r4
    1636:	5f 92       	push	r5
    1638:	6f 92       	push	r6
    163a:	7f 92       	push	r7
    163c:	8f 92       	push	r8
    163e:	9f 92       	push	r9
    1640:	af 92       	push	r10
    1642:	bf 92       	push	r11
    1644:	cf 92       	push	r12
    1646:	df 92       	push	r13
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	00 d0       	rcall	.+0      	; 0x1656 <data_check+0x24>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <data_check+0x26>
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	8c 01       	movw	r16, r24
    165e:	19 82       	std	Y+1, r1	; 0x01
    1660:	1a 82       	std	Y+2, r1	; 0x02
    1662:	c1 2c       	mov	r12, r1
    1664:	d1 2c       	mov	r13, r1
    1666:	76 01       	movw	r14, r12
    1668:	69 81       	ldd	r22, Y+1	; 0x01
    166a:	7a 81       	ldd	r23, Y+2	; 0x02
    166c:	c8 01       	movw	r24, r16
    166e:	0f dd       	rcall	.-1506   	; 0x108e <rb32_get_nth>
    1670:	4b 01       	movw	r8, r22
    1672:	5c 01       	movw	r10, r24
    1674:	21 e6       	ldi	r18, 0x61	; 97
    1676:	82 1a       	sub	r8, r18
    1678:	2e ea       	ldi	r18, 0xAE	; 174
    167a:	92 0a       	sbc	r9, r18
    167c:	2a e0       	ldi	r18, 0x0A	; 10
    167e:	a2 0a       	sbc	r10, r18
    1680:	b1 08       	sbc	r11, r1
    1682:	2f e7       	ldi	r18, 0x7F	; 127
    1684:	82 16       	cp	r8, r18
    1686:	2a e1       	ldi	r18, 0x1A	; 26
    1688:	92 06       	cpc	r9, r18
    168a:	26 e0       	ldi	r18, 0x06	; 6
    168c:	a2 06       	cpc	r10, r18
    168e:	b1 04       	cpc	r11, r1
    1690:	80 f4       	brcc	.+32     	; 0x16b2 <data_check+0x80>
    1692:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatsisf>
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 ea       	ldi	r20, 0xA0	; 160
    169c:	50 e4       	ldi	r21, 0x40	; 64
    169e:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	c7 01       	movw	r24, r14
    16a8:	b6 01       	movw	r22, r12
    16aa:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    16ae:	6b 01       	movw	r12, r22
    16b0:	7c 01       	movw	r14, r24
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	05 97       	sbiw	r24, 0x05	; 5
    16be:	a1 f6       	brne	.-88     	; 0x1668 <data_check+0x36>
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	1a 82       	std	Y+2, r1	; 0x02
    16c4:	81 2c       	mov	r8, r1
    16c6:	91 2c       	mov	r9, r1
    16c8:	54 01       	movw	r10, r8
    16ca:	69 81       	ldd	r22, Y+1	; 0x01
    16cc:	7a 81       	ldd	r23, Y+2	; 0x02
    16ce:	c8 01       	movw	r24, r16
    16d0:	de dc       	rcall	.-1604   	; 0x108e <rb32_get_nth>
    16d2:	2b 01       	movw	r4, r22
    16d4:	3c 01       	movw	r6, r24
    16d6:	21 e6       	ldi	r18, 0x61	; 97
    16d8:	42 1a       	sub	r4, r18
    16da:	2e ea       	ldi	r18, 0xAE	; 174
    16dc:	52 0a       	sbc	r5, r18
    16de:	2a e0       	ldi	r18, 0x0A	; 10
    16e0:	62 0a       	sbc	r6, r18
    16e2:	71 08       	sbc	r7, r1
    16e4:	2f e7       	ldi	r18, 0x7F	; 127
    16e6:	42 16       	cp	r4, r18
    16e8:	2a e1       	ldi	r18, 0x1A	; 26
    16ea:	52 06       	cpc	r5, r18
    16ec:	26 e0       	ldi	r18, 0x06	; 6
    16ee:	62 06       	cpc	r6, r18
    16f0:	71 04       	cpc	r7, r1
    16f2:	90 f4       	brcc	.+36     	; 0x1718 <data_check+0xe6>
    16f4:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatsisf>
    16f8:	a7 01       	movw	r20, r14
    16fa:	96 01       	movw	r18, r12
    16fc:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__subsf3>
    1700:	9b 01       	movw	r18, r22
    1702:	ac 01       	movw	r20, r24
    1704:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1708:	9b 01       	movw	r18, r22
    170a:	ac 01       	movw	r20, r24
    170c:	c5 01       	movw	r24, r10
    170e:	b4 01       	movw	r22, r8
    1710:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    1714:	4b 01       	movw	r8, r22
    1716:	5c 01       	movw	r10, r24
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	05 97       	sbiw	r24, 0x05	; 5
    1724:	91 f6       	brne	.-92     	; 0x16ca <data_check+0x98>
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e8       	ldi	r20, 0x80	; 128
    172c:	5e e3       	ldi	r21, 0x3E	; 62
    172e:	c5 01       	movw	r24, r10
    1730:	b4 01       	movw	r22, r8
    1732:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1736:	69 83       	std	Y+1, r22	; 0x01
    1738:	7a 83       	std	Y+2, r23	; 0x02
    173a:	8b 83       	std	Y+3, r24	; 0x03
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	1d 82       	std	Y+5, r1	; 0x05
    1740:	1e 82       	std	Y+6, r1	; 0x06
    1742:	31 2c       	mov	r3, r1
    1744:	41 2c       	mov	r4, r1
    1746:	51 2c       	mov	r5, r1
    1748:	32 01       	movw	r6, r4
    174a:	6d 81       	ldd	r22, Y+5	; 0x05
    174c:	7e 81       	ldd	r23, Y+6	; 0x06
    174e:	c8 01       	movw	r24, r16
    1750:	9e dc       	rcall	.-1732   	; 0x108e <rb32_get_nth>
    1752:	4b 01       	movw	r8, r22
    1754:	5c 01       	movw	r10, r24
    1756:	21 e6       	ldi	r18, 0x61	; 97
    1758:	82 1a       	sub	r8, r18
    175a:	2e ea       	ldi	r18, 0xAE	; 174
    175c:	92 0a       	sbc	r9, r18
    175e:	2a e0       	ldi	r18, 0x0A	; 10
    1760:	a2 0a       	sbc	r10, r18
    1762:	b1 08       	sbc	r11, r1
    1764:	2f e7       	ldi	r18, 0x7F	; 127
    1766:	82 16       	cp	r8, r18
    1768:	2a e1       	ldi	r18, 0x1A	; 26
    176a:	92 06       	cpc	r9, r18
    176c:	26 e0       	ldi	r18, 0x06	; 6
    176e:	a2 06       	cpc	r10, r18
    1770:	b1 04       	cpc	r11, r1
    1772:	50 f5       	brcc	.+84     	; 0x17c8 <data_check+0x196>
    1774:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatsisf>
    1778:	4b 01       	movw	r8, r22
    177a:	5c 01       	movw	r10, r24
    177c:	a7 01       	movw	r20, r14
    177e:	96 01       	movw	r18, r12
    1780:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__subsf3>
    1784:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1788:	9b 01       	movw	r18, r22
    178a:	77 23       	and	r23, r23
    178c:	24 f4       	brge	.+8      	; 0x1796 <data_check+0x164>
    178e:	22 27       	eor	r18, r18
    1790:	33 27       	eor	r19, r19
    1792:	26 1b       	sub	r18, r22
    1794:	37 0b       	sbc	r19, r23
    1796:	b9 01       	movw	r22, r18
    1798:	33 0f       	add	r19, r19
    179a:	88 0b       	sbc	r24, r24
    179c:	99 0b       	sbc	r25, r25
    179e:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatsisf>
    17a2:	9b 01       	movw	r18, r22
    17a4:	ac 01       	movw	r20, r24
    17a6:	69 81       	ldd	r22, Y+1	; 0x01
    17a8:	7a 81       	ldd	r23, Y+2	; 0x02
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__gesf2>
    17b2:	88 23       	and	r24, r24
    17b4:	4c f0       	brlt	.+18     	; 0x17c8 <data_check+0x196>
    17b6:	a5 01       	movw	r20, r10
    17b8:	94 01       	movw	r18, r8
    17ba:	c3 01       	movw	r24, r6
    17bc:	b2 01       	movw	r22, r4
    17be:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    17c2:	2b 01       	movw	r4, r22
    17c4:	3c 01       	movw	r6, r24
    17c6:	33 94       	inc	r3
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	05 97       	sbiw	r24, 0x05	; 5
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <data_check+0x1a6>
    17d6:	b9 cf       	rjmp	.-142    	; 0x174a <data_check+0x118>
    17d8:	33 20       	and	r3, r3
    17da:	69 f0       	breq	.+26     	; 0x17f6 <data_check+0x1c4>
    17dc:	63 2d       	mov	r22, r3
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    17e8:	9b 01       	movw	r18, r22
    17ea:	ac 01       	movw	r20, r24
    17ec:	c3 01       	movw	r24, r6
    17ee:	b2 01       	movw	r22, r4
    17f0:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <data_check+0x1cc>
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 e8       	ldi	r24, 0x80	; 128
    17fc:	9f eb       	ldi	r25, 0xBF	; 191
    17fe:	26 96       	adiw	r28, 0x06	; 6
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	bf 90       	pop	r11
    1816:	af 90       	pop	r10
    1818:	9f 90       	pop	r9
    181a:	8f 90       	pop	r8
    181c:	7f 90       	pop	r7
    181e:	6f 90       	pop	r6
    1820:	5f 90       	pop	r5
    1822:	4f 90       	pop	r4
    1824:	3f 90       	pop	r3
    1826:	08 95       	ret

00001828 <data_collect>:
    1828:	af 92       	push	r10
    182a:	bf 92       	push	r11
    182c:	cf 92       	push	r12
    182e:	df 92       	push	r13
    1830:	ef 92       	push	r14
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	00 d0       	rcall	.+0      	; 0x183e <data_collect+0x16>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <data_collect+0x18>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	5c 01       	movw	r10, r24
    1846:	8b 01       	movw	r16, r22
    1848:	f7 dc       	rcall	.-1554   	; 0x1238 <get_pressure>
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1856:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    185a:	69 83       	std	Y+1, r22	; 0x01
    185c:	7a 83       	std	Y+2, r23	; 0x02
    185e:	8b 83       	std	Y+3, r24	; 0x03
    1860:	9c 83       	std	Y+4, r25	; 0x04
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	be 01       	movw	r22, r28
    1868:	6f 5f       	subi	r22, 0xFF	; 255
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	c8 01       	movw	r24, r16
    186e:	b4 db       	rcall	.-2200   	; 0xfd8 <rb32_write>
    1870:	c8 01       	movw	r24, r16
    1872:	df de       	rcall	.-578    	; 0x1632 <data_check>
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    1880:	6b 01       	movw	r12, r22
    1882:	7c 01       	movw	r14, r24
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f eb       	ldi	r21, 0xBF	; 191
    188c:	0e 94 c5 18 	call	0x318a	; 0x318a <__cmpsf2>
    1890:	88 23       	and	r24, r24
    1892:	d1 f1       	breq	.+116    	; 0x1908 <data_collect+0xe0>
    1894:	c0 92 d9 20 	sts	0x20D9, r12	; 0x8020d9 <press>
    1898:	d0 92 da 20 	sts	0x20DA, r13	; 0x8020da <press+0x1>
    189c:	e0 92 db 20 	sts	0x20DB, r14	; 0x8020db <press+0x2>
    18a0:	f0 92 dc 20 	sts	0x20DC, r15	; 0x8020dc <press+0x3>
    18a4:	c7 01       	movw	r24, r14
    18a6:	b6 01       	movw	r22, r12
    18a8:	6a dd       	rcall	.-1324   	; 0x137e <get_altitude>
    18aa:	60 93 d1 20 	sts	0x20D1, r22	; 0x8020d1 <alt>
    18ae:	70 93 d2 20 	sts	0x20D2, r23	; 0x8020d2 <alt+0x1>
    18b2:	80 93 d3 20 	sts	0x20D3, r24	; 0x8020d3 <alt+0x2>
    18b6:	90 93 d4 20 	sts	0x20D4, r25	; 0x8020d4 <alt+0x3>
    18ba:	60 91 d1 20 	lds	r22, 0x20D1	; 0x8020d1 <alt>
    18be:	70 91 d2 20 	lds	r23, 0x20D2	; 0x8020d2 <alt+0x1>
    18c2:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <alt+0x2>
    18c6:	90 91 d4 20 	lds	r25, 0x20D4	; 0x8020d4 <alt+0x3>
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	48 ec       	ldi	r20, 0xC8	; 200
    18d0:	52 e4       	ldi	r21, 0x42	; 66
    18d2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    18d6:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    18da:	6d 83       	std	Y+5, r22	; 0x05
    18dc:	7e 83       	std	Y+6, r23	; 0x06
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	be 01       	movw	r22, r28
    18e4:	6b 5f       	subi	r22, 0xFB	; 251
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	c5 01       	movw	r24, r10
    18ea:	00 db       	rcall	.-2560   	; 0xeec <rb16_write>
    18ec:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    18f0:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    18f4:	c5 01       	movw	r24, r10
    18f6:	ea dd       	rcall	.-1068   	; 0x14cc <diff>
    18f8:	60 93 c9 20 	sts	0x20C9, r22	; 0x8020c9 <velocity>
    18fc:	70 93 ca 20 	sts	0x20CA, r23	; 0x8020ca <velocity+0x1>
    1900:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <velocity+0x2>
    1904:	90 93 cc 20 	sts	0x20CC, r25	; 0x8020cc <velocity+0x3>
    1908:	83 e3       	ldi	r24, 0x33	; 51
    190a:	93 e1       	ldi	r25, 0x13	; 19
    190c:	a5 e9       	ldi	r26, 0x95	; 149
    190e:	b3 e4       	ldi	r27, 0x43	; 67
    1910:	80 93 d5 20 	sts	0x20D5, r24	; 0x8020d5 <temp>
    1914:	90 93 d6 20 	sts	0x20D6, r25	; 0x8020d6 <temp+0x1>
    1918:	a0 93 d7 20 	sts	0x20D7, r26	; 0x8020d7 <temp+0x2>
    191c:	b0 93 d8 20 	sts	0x20D8, r27	; 0x8020d8 <temp+0x3>
    1920:	ac dd       	rcall	.-1192   	; 0x147a <get_voltage>
    1922:	60 93 cd 20 	sts	0x20CD, r22	; 0x8020cd <volt>
    1926:	70 93 ce 20 	sts	0x20CE, r23	; 0x8020ce <volt+0x1>
    192a:	80 93 cf 20 	sts	0x20CF, r24	; 0x8020cf <volt+0x2>
    192e:	90 93 d0 20 	sts	0x20D0, r25	; 0x8020d0 <volt+0x3>
    1932:	26 96       	adiw	r28, 0x06	; 6
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	ff 90       	pop	r15
    1942:	ef 90       	pop	r14
    1944:	df 90       	pop	r13
    1946:	cf 90       	pop	r12
    1948:	bf 90       	pop	r11
    194a:	af 90       	pop	r10
    194c:	08 95       	ret

0000194e <state_check>:
    194e:	60 91 c9 20 	lds	r22, 0x20C9	; 0x8020c9 <velocity>
    1952:	70 91 ca 20 	lds	r23, 0x20CA	; 0x8020ca <velocity+0x1>
    1956:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <velocity+0x2>
    195a:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <velocity+0x3>
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 ea       	ldi	r20, 0xA0	; 160
    1964:	50 e4       	ldi	r21, 0x40	; 64
    1966:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__gesf2>
    196a:	18 16       	cp	r1, r24
    196c:	a4 f0       	brlt	.+40     	; 0x1996 <state_check+0x48>
    196e:	60 91 c9 20 	lds	r22, 0x20C9	; 0x8020c9 <velocity>
    1972:	70 91 ca 20 	lds	r23, 0x20CA	; 0x8020ca <velocity+0x1>
    1976:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <velocity+0x2>
    197a:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <velocity+0x3>
    197e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1982:	9b 01       	movw	r18, r22
    1984:	77 23       	and	r23, r23
    1986:	24 f4       	brge	.+8      	; 0x1990 <state_check+0x42>
    1988:	22 27       	eor	r18, r18
    198a:	33 27       	eor	r19, r19
    198c:	26 1b       	sub	r18, r22
    198e:	37 0b       	sbc	r19, r23
    1990:	25 30       	cpi	r18, 0x05	; 5
    1992:	31 05       	cpc	r19, r1
    1994:	3c f4       	brge	.+14     	; 0x19a4 <state_check+0x56>
    1996:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <state>
    199a:	82 30       	cpi	r24, 0x02	; 2
    199c:	18 f4       	brcc	.+6      	; 0x19a4 <state_check+0x56>
    199e:	10 92 08 21 	sts	0x2108, r1	; 0x802108 <state>
    19a2:	08 95       	ret
    19a4:	60 91 c9 20 	lds	r22, 0x20C9	; 0x8020c9 <velocity>
    19a8:	70 91 ca 20 	lds	r23, 0x20CA	; 0x8020ca <velocity+0x1>
    19ac:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <velocity+0x2>
    19b0:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <velocity+0x3>
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 ea       	ldi	r20, 0xA0	; 160
    19ba:	50 ec       	ldi	r21, 0xC0	; 192
    19bc:	0e 94 c5 18 	call	0x318a	; 0x318a <__cmpsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	a4 f4       	brge	.+40     	; 0x19ec <state_check+0x9e>
    19c4:	60 91 d1 20 	lds	r22, 0x20D1	; 0x8020d1 <alt>
    19c8:	70 91 d2 20 	lds	r23, 0x20D2	; 0x8020d2 <alt+0x1>
    19cc:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <alt+0x2>
    19d0:	90 91 d4 20 	lds	r25, 0x20D4	; 0x8020d4 <alt+0x3>
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	41 ee       	ldi	r20, 0xE1	; 225
    19da:	53 e4       	ldi	r21, 0x43	; 67
    19dc:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__gesf2>
    19e0:	18 16       	cp	r1, r24
    19e2:	24 f4       	brge	.+8      	; 0x19ec <state_check+0x9e>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <state>
    19ea:	08 95       	ret
    19ec:	60 91 c9 20 	lds	r22, 0x20C9	; 0x8020c9 <velocity>
    19f0:	70 91 ca 20 	lds	r23, 0x20CA	; 0x8020ca <velocity+0x1>
    19f4:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <velocity+0x2>
    19f8:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <velocity+0x3>
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 ea       	ldi	r20, 0xA0	; 160
    1a02:	50 ec       	ldi	r21, 0xC0	; 192
    1a04:	0e 94 c5 18 	call	0x318a	; 0x318a <__cmpsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	a4 f4       	brge	.+40     	; 0x1a34 <state_check+0xe6>
    1a0c:	60 91 d1 20 	lds	r22, 0x20D1	; 0x8020d1 <alt>
    1a10:	70 91 d2 20 	lds	r23, 0x20D2	; 0x8020d2 <alt+0x1>
    1a14:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <alt+0x2>
    1a18:	90 91 d4 20 	lds	r25, 0x20D4	; 0x8020d4 <alt+0x3>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	41 ee       	ldi	r20, 0xE1	; 225
    1a22:	53 e4       	ldi	r21, 0x43	; 67
    1a24:	0e 94 c5 18 	call	0x318a	; 0x318a <__cmpsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	24 f4       	brge	.+8      	; 0x1a34 <state_check+0xe6>
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <state>
    1a32:	08 95       	ret
    1a34:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <state>
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	a1 f4       	brne	.+40     	; 0x1a64 <state_check+0x116>
    1a3c:	60 91 c9 20 	lds	r22, 0x20C9	; 0x8020c9 <velocity>
    1a40:	70 91 ca 20 	lds	r23, 0x20CA	; 0x8020ca <velocity+0x1>
    1a44:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <velocity+0x2>
    1a48:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <velocity+0x3>
    1a4c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1a50:	9b 01       	movw	r18, r22
    1a52:	77 23       	and	r23, r23
    1a54:	24 f4       	brge	.+8      	; 0x1a5e <state_check+0x110>
    1a56:	22 27       	eor	r18, r18
    1a58:	33 27       	eor	r19, r19
    1a5a:	26 1b       	sub	r18, r22
    1a5c:	37 0b       	sbc	r19, r23
    1a5e:	25 30       	cpi	r18, 0x05	; 5
    1a60:	31 05       	cpc	r19, r1
    1a62:	24 f0       	brlt	.+8      	; 0x1a6c <state_check+0x11e>
    1a64:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <state>
    1a68:	83 30       	cpi	r24, 0x03	; 3
    1a6a:	19 f4       	brne	.+6      	; 0x1a72 <state_check+0x124>
    1a6c:	83 e0       	ldi	r24, 0x03	; 3
    1a6e:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <state>
    1a72:	08 95       	ret

00001a74 <release_servo_init>:
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	84 e0       	ldi	r24, 0x04	; 4
    1a78:	74 db       	rcall	.-2328   	; 0x1162 <sysclk_enable_module>
    1a7a:	64 e0       	ldi	r22, 0x04	; 4
    1a7c:	84 e0       	ldi	r24, 0x04	; 4
    1a7e:	71 db       	rcall	.-2334   	; 0x1162 <sysclk_enable_module>
    1a80:	e0 e6       	ldi	r30, 0x60	; 96
    1a82:	f6 e0       	ldi	r31, 0x06	; 6
    1a84:	80 81       	ld	r24, Z
    1a86:	81 60       	ori	r24, 0x01	; 1
    1a88:	80 83       	st	Z, r24
    1a8a:	e0 e0       	ldi	r30, 0x00	; 0
    1a8c:	f9 e0       	ldi	r31, 0x09	; 9
    1a8e:	85 e0       	ldi	r24, 0x05	; 5
    1a90:	80 83       	st	Z, r24
    1a92:	83 e1       	ldi	r24, 0x13	; 19
    1a94:	81 83       	std	Z+1, r24	; 0x01
    1a96:	80 e1       	ldi	r24, 0x10	; 16
    1a98:	97 e2       	ldi	r25, 0x27	; 39
    1a9a:	86 a3       	std	Z+38, r24	; 0x26
    1a9c:	97 a3       	std	Z+39, r25	; 0x27
    1a9e:	8e ee       	ldi	r24, 0xEE	; 238
    1aa0:	92 e0       	ldi	r25, 0x02	; 2
    1aa2:	80 a7       	std	Z+40, r24	; 0x28
    1aa4:	91 a7       	std	Z+41, r25	; 0x29
    1aa6:	08 95       	ret

00001aa8 <servo_pid>:
    1aa8:	8f 92       	push	r8
    1aaa:	9f 92       	push	r9
    1aac:	af 92       	push	r10
    1aae:	bf 92       	push	r11
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	7c 01       	movw	r14, r24
    1ac2:	c0 e0       	ldi	r28, 0x00	; 0
    1ac4:	d0 e0       	ldi	r29, 0x00	; 0
    1ac6:	00 e0       	ldi	r16, 0x00	; 0
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
    1aca:	be 01       	movw	r22, r28
    1acc:	c7 01       	movw	r24, r14
    1ace:	57 da       	rcall	.-2898   	; 0xf7e <rb16_get_nth>
    1ad0:	08 0f       	add	r16, r24
    1ad2:	19 1f       	adc	r17, r25
    1ad4:	21 96       	adiw	r28, 0x01	; 1
    1ad6:	ca 30       	cpi	r28, 0x0A	; 10
    1ad8:	d1 05       	cpc	r29, r1
    1ada:	b9 f7       	brne	.-18     	; 0x1aca <servo_pid+0x22>
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	4d da       	rcall	.-2918   	; 0xf7e <rb16_get_nth>
    1ae4:	ec 01       	movw	r28, r24
    1ae6:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    1aea:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    1aee:	c7 01       	movw	r24, r14
    1af0:	ed dc       	rcall	.-1574   	; 0x14cc <diff>
    1af2:	6b 01       	movw	r12, r22
    1af4:	7c 01       	movw	r14, r24
    1af6:	be 01       	movw	r22, r28
    1af8:	dd 0f       	add	r29, r29
    1afa:	88 0b       	sbc	r24, r24
    1afc:	99 0b       	sbc	r25, r25
    1afe:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatsisf>
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	a9 01       	movw	r20, r18
    1b08:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	48 ec       	ldi	r20, 0xC8	; 200
    1b12:	52 e4       	ldi	r21, 0x42	; 66
    1b14:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    1b18:	4b 01       	movw	r8, r22
    1b1a:	5c 01       	movw	r10, r24
    1b1c:	b8 01       	movw	r22, r16
    1b1e:	11 0f       	add	r17, r17
    1b20:	88 0b       	sbc	r24, r24
    1b22:	99 0b       	sbc	r25, r25
    1b24:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatsisf>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	a9 01       	movw	r20, r18
    1b2e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	48 ec       	ldi	r20, 0xC8	; 200
    1b38:	52 e4       	ldi	r21, 0x42	; 66
    1b3a:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    1b3e:	9b 01       	movw	r18, r22
    1b40:	ac 01       	movw	r20, r24
    1b42:	c5 01       	movw	r24, r10
    1b44:	b4 01       	movw	r22, r8
    1b46:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    1b4a:	4b 01       	movw	r8, r22
    1b4c:	5c 01       	movw	r10, r24
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	a9 01       	movw	r20, r18
    1b54:	c7 01       	movw	r24, r14
    1b56:	b6 01       	movw	r22, r12
    1b58:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1b5c:	9b 01       	movw	r18, r22
    1b5e:	ac 01       	movw	r20, r24
    1b60:	c5 01       	movw	r24, r10
    1b62:	b4 01       	movw	r22, r8
    1b64:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e8       	ldi	r19, 0x80	; 128
    1b6c:	4b eb       	ldi	r20, 0xBB	; 187
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__addsf3>
    1b74:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__fixunssfsi>
    1b78:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <servo_pulse>
    1b7c:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <servo_pulse+0x1>
    1b80:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <servo_pulse>
    1b84:	70 91 1a 20 	lds	r23, 0x201A	; 0x80201a <servo_pulse+0x1>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 9c 19 	call	0x3338	; 0x3338 <__floatunsisf>
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a e7       	ldi	r20, 0x7A	; 122
    1b96:	54 e4       	ldi	r21, 0x44	; 68
    1b98:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3>
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a ef       	ldi	r20, 0xFA	; 250
    1ba2:	53 e4       	ldi	r21, 0x43	; 67
    1ba4:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1ba8:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__fixunssfsi>
    1bac:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1bb0:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	ff 90       	pop	r15
    1bbe:	ef 90       	pop	r14
    1bc0:	df 90       	pop	r13
    1bc2:	cf 90       	pop	r12
    1bc4:	bf 90       	pop	r11
    1bc6:	af 90       	pop	r10
    1bc8:	9f 90       	pop	r9
    1bca:	8f 90       	pop	r8
    1bcc:	08 95       	ret

00001bce <clock_init>:
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	85 e0       	ldi	r24, 0x05	; 5
    1bd2:	c7 da       	rcall	.-2674   	; 0x1162 <sysclk_enable_module>
    1bd4:	e0 e0       	ldi	r30, 0x00	; 0
    1bd6:	fa e0       	ldi	r31, 0x0A	; 10
    1bd8:	87 e0       	ldi	r24, 0x07	; 7
    1bda:	80 83       	st	Z, r24
    1bdc:	81 e1       	ldi	r24, 0x11	; 17
    1bde:	9a e7       	ldi	r25, 0x7A	; 122
    1be0:	86 a3       	std	Z+38, r24	; 0x26
    1be2:	97 a3       	std	Z+39, r25	; 0x27
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	86 83       	std	Z+6, r24	; 0x06
    1be8:	08 95       	ret

00001bea <cali_alt>:
    1bea:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <press>
    1bee:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <press+0x1>
    1bf2:	a0 91 db 20 	lds	r26, 0x20DB	; 0x8020db <press+0x2>
    1bf6:	b0 91 dc 20 	lds	r27, 0x20DC	; 0x8020dc <press+0x3>
    1bfa:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <ground_p>
    1bfe:	90 93 2c 20 	sts	0x202C, r25	; 0x80202c <ground_p+0x1>
    1c02:	a0 93 2d 20 	sts	0x202D, r26	; 0x80202d <ground_p+0x2>
    1c06:	b0 93 2e 20 	sts	0x202E, r27	; 0x80202e <ground_p+0x3>
    1c0a:	83 e3       	ldi	r24, 0x33	; 51
    1c0c:	93 e1       	ldi	r25, 0x13	; 19
    1c0e:	a5 e9       	ldi	r26, 0x95	; 149
    1c10:	b3 e4       	ldi	r27, 0x43	; 67
    1c12:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    1c16:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    1c1a:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    1c1e:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    1c22:	08 95       	ret

00001c24 <cali_ang>:
    1c24:	0e 94 91 05 	call	0xb22	; 0xb22 <imu_roll>
    1c28:	60 93 ec 20 	sts	0x20EC, r22	; 0x8020ec <ref_roll>
    1c2c:	70 93 ed 20 	sts	0x20ED, r23	; 0x8020ed <ref_roll+0x1>
    1c30:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <ref_roll+0x2>
    1c34:	90 93 ef 20 	sts	0x20EF, r25	; 0x8020ef <ref_roll+0x3>
    1c38:	0e 94 9a 05 	call	0xb34	; 0xb34 <imu_pitch>
    1c3c:	60 93 e8 20 	sts	0x20E8, r22	; 0x8020e8 <ref_pitch>
    1c40:	70 93 e9 20 	sts	0x20E9, r23	; 0x8020e9 <ref_pitch+0x1>
    1c44:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <ref_pitch+0x2>
    1c48:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <ref_pitch+0x3>
    1c4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <imu_heading>
    1c50:	60 93 f0 20 	sts	0x20F0, r22	; 0x8020f0 <ref_yaw>
    1c54:	70 93 f1 20 	sts	0x20F1, r23	; 0x8020f1 <ref_yaw+0x1>
    1c58:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <ref_yaw+0x2>
    1c5c:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <ref_yaw+0x3>
    1c60:	08 95       	ret

00001c62 <calibrate>:
    1c62:	c3 df       	rcall	.-122    	; 0x1bea <cali_alt>
    1c64:	df cf       	rjmp	.-66     	; 0x1c24 <cali_ang>
    1c66:	08 95       	ret

00001c68 <packet>:
    1c68:	2f 92       	push	r2
    1c6a:	3f 92       	push	r3
    1c6c:	4f 92       	push	r4
    1c6e:	5f 92       	push	r5
    1c70:	6f 92       	push	r6
    1c72:	7f 92       	push	r7
    1c74:	8f 92       	push	r8
    1c76:	9f 92       	push	r9
    1c78:	af 92       	push	r10
    1c7a:	bf 92       	push	r11
    1c7c:	cf 92       	push	r12
    1c7e:	df 92       	push	r13
    1c80:	ef 92       	push	r14
    1c82:	ff 92       	push	r15
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	e9 97       	sbiw	r28, 0x39	; 57
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <packets>
    1c9a:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <packets+0x1>
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	80 93 dd 20 	sts	0x20DD, r24	; 0x8020dd <packets>
    1ca4:	90 93 de 20 	sts	0x20DE, r25	; 0x8020de <packets+0x1>
    1ca8:	60 91 a7 20 	lds	r22, 0x20A7	; 0x8020a7 <angle>
    1cac:	70 91 a8 20 	lds	r23, 0x20A8	; 0x8020a8 <angle+0x1>
    1cb0:	80 91 a9 20 	lds	r24, 0x20A9	; 0x8020a9 <angle+0x2>
    1cb4:	90 91 aa 20 	lds	r25, 0x20AA	; 0x8020aa <angle+0x3>
    1cb8:	20 91 08 21 	lds	r18, 0x2108	; 0x802108 <state>
    1cbc:	29 83       	std	Y+1, r18	; 0x01
    1cbe:	40 90 ab 20 	lds	r4, 0x20AB	; 0x8020ab <rpm>
    1cc2:	50 90 ac 20 	lds	r5, 0x20AC	; 0x8020ac <rpm+0x1>
    1cc6:	60 90 ad 20 	lds	r6, 0x20AD	; 0x8020ad <rpm+0x2>
    1cca:	70 90 ae 20 	lds	r7, 0x20AE	; 0x8020ae <rpm+0x3>
    1cce:	80 90 af 20 	lds	r8, 0x20AF	; 0x8020af <roll>
    1cd2:	90 90 b0 20 	lds	r9, 0x20B0	; 0x8020b0 <roll+0x1>
    1cd6:	a0 90 b1 20 	lds	r10, 0x20B1	; 0x8020b1 <roll+0x2>
    1cda:	b0 90 b2 20 	lds	r11, 0x20B2	; 0x8020b2 <roll+0x3>
    1cde:	c0 90 b3 20 	lds	r12, 0x20B3	; 0x8020b3 <pitch>
    1ce2:	d0 90 b4 20 	lds	r13, 0x20B4	; 0x8020b4 <pitch+0x1>
    1ce6:	e0 90 b5 20 	lds	r14, 0x20B5	; 0x8020b5 <pitch+0x2>
    1cea:	f0 90 b6 20 	lds	r15, 0x20B6	; 0x8020b6 <pitch+0x3>
    1cee:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <gps_sats>
    1cf2:	50 91 b8 20 	lds	r21, 0x20B8	; 0x8020b8 <gps_sats+0x1>
    1cf6:	48 af       	std	Y+56, r20	; 0x38
    1cf8:	59 af       	std	Y+57, r21	; 0x39
    1cfa:	20 91 b9 20 	lds	r18, 0x20B9	; 0x8020b9 <gps_alt>
    1cfe:	30 91 ba 20 	lds	r19, 0x20BA	; 0x8020ba <gps_alt+0x1>
    1d02:	40 91 bb 20 	lds	r20, 0x20BB	; 0x8020bb <gps_alt+0x2>
    1d06:	50 91 bc 20 	lds	r21, 0x20BC	; 0x8020bc <gps_alt+0x3>
    1d0a:	2a 83       	std	Y+2, r18	; 0x02
    1d0c:	3b 83       	std	Y+3, r19	; 0x03
    1d0e:	4c 83       	std	Y+4, r20	; 0x04
    1d10:	5d 83       	std	Y+5, r21	; 0x05
    1d12:	20 91 b9 20 	lds	r18, 0x20B9	; 0x8020b9 <gps_alt>
    1d16:	30 91 ba 20 	lds	r19, 0x20BA	; 0x8020ba <gps_alt+0x1>
    1d1a:	40 91 bb 20 	lds	r20, 0x20BB	; 0x8020bb <gps_alt+0x2>
    1d1e:	50 91 bc 20 	lds	r21, 0x20BC	; 0x8020bc <gps_alt+0x3>
    1d22:	2e 83       	std	Y+6, r18	; 0x06
    1d24:	3f 83       	std	Y+7, r19	; 0x07
    1d26:	48 87       	std	Y+8, r20	; 0x08
    1d28:	59 87       	std	Y+9, r21	; 0x09
    1d2a:	20 91 bd 20 	lds	r18, 0x20BD	; 0x8020bd <gps_long>
    1d2e:	30 91 be 20 	lds	r19, 0x20BE	; 0x8020be <gps_long+0x1>
    1d32:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <gps_long+0x2>
    1d36:	50 91 c0 20 	lds	r21, 0x20C0	; 0x8020c0 <gps_long+0x3>
    1d3a:	2a 87       	std	Y+10, r18	; 0x0a
    1d3c:	3b 87       	std	Y+11, r19	; 0x0b
    1d3e:	4c 87       	std	Y+12, r20	; 0x0c
    1d40:	5d 87       	std	Y+13, r21	; 0x0d
    1d42:	20 91 bd 20 	lds	r18, 0x20BD	; 0x8020bd <gps_long>
    1d46:	30 91 be 20 	lds	r19, 0x20BE	; 0x8020be <gps_long+0x1>
    1d4a:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <gps_long+0x2>
    1d4e:	50 91 c0 20 	lds	r21, 0x20C0	; 0x8020c0 <gps_long+0x3>
    1d52:	2e 87       	std	Y+14, r18	; 0x0e
    1d54:	3f 87       	std	Y+15, r19	; 0x0f
    1d56:	48 8b       	std	Y+16, r20	; 0x10
    1d58:	59 8b       	std	Y+17, r21	; 0x11
    1d5a:	20 91 c1 20 	lds	r18, 0x20C1	; 0x8020c1 <gps_lat>
    1d5e:	30 91 c2 20 	lds	r19, 0x20C2	; 0x8020c2 <gps_lat+0x1>
    1d62:	40 91 c3 20 	lds	r20, 0x20C3	; 0x8020c3 <gps_lat+0x2>
    1d66:	50 91 c4 20 	lds	r21, 0x20C4	; 0x8020c4 <gps_lat+0x3>
    1d6a:	2a 8b       	std	Y+18, r18	; 0x12
    1d6c:	3b 8b       	std	Y+19, r19	; 0x13
    1d6e:	4c 8b       	std	Y+20, r20	; 0x14
    1d70:	5d 8b       	std	Y+21, r21	; 0x15
    1d72:	20 91 c1 20 	lds	r18, 0x20C1	; 0x8020c1 <gps_lat>
    1d76:	30 91 c2 20 	lds	r19, 0x20C2	; 0x8020c2 <gps_lat+0x1>
    1d7a:	40 91 c3 20 	lds	r20, 0x20C3	; 0x8020c3 <gps_lat+0x2>
    1d7e:	50 91 c4 20 	lds	r21, 0x20C4	; 0x8020c4 <gps_lat+0x3>
    1d82:	2e 8b       	std	Y+22, r18	; 0x16
    1d84:	3f 8b       	std	Y+23, r19	; 0x17
    1d86:	48 8f       	std	Y+24, r20	; 0x18
    1d88:	59 8f       	std	Y+25, r21	; 0x19
    1d8a:	20 91 c5 20 	lds	r18, 0x20C5	; 0x8020c5 <gps_t>
    1d8e:	30 91 c6 20 	lds	r19, 0x20C6	; 0x8020c6 <gps_t+0x1>
    1d92:	40 91 c7 20 	lds	r20, 0x20C7	; 0x8020c7 <gps_t+0x2>
    1d96:	50 91 c8 20 	lds	r21, 0x20C8	; 0x8020c8 <gps_t+0x3>
    1d9a:	2a 8f       	std	Y+26, r18	; 0x1a
    1d9c:	3b 8f       	std	Y+27, r19	; 0x1b
    1d9e:	4c 8f       	std	Y+28, r20	; 0x1c
    1da0:	5d 8f       	std	Y+29, r21	; 0x1d
    1da2:	20 91 c5 20 	lds	r18, 0x20C5	; 0x8020c5 <gps_t>
    1da6:	30 91 c6 20 	lds	r19, 0x20C6	; 0x8020c6 <gps_t+0x1>
    1daa:	40 91 c7 20 	lds	r20, 0x20C7	; 0x8020c7 <gps_t+0x2>
    1dae:	50 91 c8 20 	lds	r21, 0x20C8	; 0x8020c8 <gps_t+0x3>
    1db2:	2e 8f       	std	Y+30, r18	; 0x1e
    1db4:	3f 8f       	std	Y+31, r19	; 0x1f
    1db6:	48 a3       	std	Y+32, r20	; 0x20
    1db8:	59 a3       	std	Y+33, r21	; 0x21
    1dba:	20 91 c5 20 	lds	r18, 0x20C5	; 0x8020c5 <gps_t>
    1dbe:	30 91 c6 20 	lds	r19, 0x20C6	; 0x8020c6 <gps_t+0x1>
    1dc2:	40 91 c7 20 	lds	r20, 0x20C7	; 0x8020c7 <gps_t+0x2>
    1dc6:	50 91 c8 20 	lds	r21, 0x20C8	; 0x8020c8 <gps_t+0x3>
    1dca:	2a a3       	std	Y+34, r18	; 0x22
    1dcc:	3b a3       	std	Y+35, r19	; 0x23
    1dce:	4c a3       	std	Y+36, r20	; 0x24
    1dd0:	5d a3       	std	Y+37, r21	; 0x25
    1dd2:	20 91 cd 20 	lds	r18, 0x20CD	; 0x8020cd <volt>
    1dd6:	30 91 ce 20 	lds	r19, 0x20CE	; 0x8020ce <volt+0x1>
    1dda:	40 91 cf 20 	lds	r20, 0x20CF	; 0x8020cf <volt+0x2>
    1dde:	50 91 d0 20 	lds	r21, 0x20D0	; 0x8020d0 <volt+0x3>
    1de2:	2e a3       	std	Y+38, r18	; 0x26
    1de4:	3f a3       	std	Y+39, r19	; 0x27
    1de6:	48 a7       	std	Y+40, r20	; 0x28
    1de8:	59 a7       	std	Y+41, r21	; 0x29
    1dea:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <temp>
    1dee:	30 91 d6 20 	lds	r19, 0x20D6	; 0x8020d6 <temp+0x1>
    1df2:	40 91 d7 20 	lds	r20, 0x20D7	; 0x8020d7 <temp+0x2>
    1df6:	50 91 d8 20 	lds	r21, 0x20D8	; 0x8020d8 <temp+0x3>
    1dfa:	2a a7       	std	Y+42, r18	; 0x2a
    1dfc:	3b a7       	std	Y+43, r19	; 0x2b
    1dfe:	4c a7       	std	Y+44, r20	; 0x2c
    1e00:	5d a7       	std	Y+45, r21	; 0x2d
    1e02:	20 91 d9 20 	lds	r18, 0x20D9	; 0x8020d9 <press>
    1e06:	30 91 da 20 	lds	r19, 0x20DA	; 0x8020da <press+0x1>
    1e0a:	40 91 db 20 	lds	r20, 0x20DB	; 0x8020db <press+0x2>
    1e0e:	50 91 dc 20 	lds	r21, 0x20DC	; 0x8020dc <press+0x3>
    1e12:	2e a7       	std	Y+46, r18	; 0x2e
    1e14:	3f a7       	std	Y+47, r19	; 0x2f
    1e16:	48 ab       	std	Y+48, r20	; 0x30
    1e18:	59 ab       	std	Y+49, r21	; 0x31
    1e1a:	20 91 d1 20 	lds	r18, 0x20D1	; 0x8020d1 <alt>
    1e1e:	30 91 d2 20 	lds	r19, 0x20D2	; 0x8020d2 <alt+0x1>
    1e22:	40 91 d3 20 	lds	r20, 0x20D3	; 0x8020d3 <alt+0x2>
    1e26:	50 91 d4 20 	lds	r21, 0x20D4	; 0x8020d4 <alt+0x3>
    1e2a:	2a ab       	std	Y+50, r18	; 0x32
    1e2c:	3b ab       	std	Y+51, r19	; 0x33
    1e2e:	4c ab       	std	Y+52, r20	; 0x34
    1e30:	5d ab       	std	Y+53, r21	; 0x35
    1e32:	00 91 dd 20 	lds	r16, 0x20DD	; 0x8020dd <packets>
    1e36:	10 91 de 20 	lds	r17, 0x20DE	; 0x8020de <packets+0x1>
    1e3a:	20 90 e1 20 	lds	r2, 0x20E1	; 0x8020e1 <timer>
    1e3e:	30 90 e2 20 	lds	r3, 0x20E2	; 0x8020e2 <timer+0x1>
    1e42:	40 91 e1 20 	lds	r20, 0x20E1	; 0x8020e1 <timer>
    1e46:	50 91 e2 20 	lds	r21, 0x20E2	; 0x8020e2 <timer+0x1>
    1e4a:	4e ab       	std	Y+54, r20	; 0x36
    1e4c:	5f ab       	std	Y+55, r21	; 0x37
    1e4e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1e52:	7f 93       	push	r23
    1e54:	6f 93       	push	r22
    1e56:	1f 92       	push	r1
    1e58:	59 81       	ldd	r21, Y+1	; 0x01
    1e5a:	5f 93       	push	r21
    1e5c:	c3 01       	movw	r24, r6
    1e5e:	b2 01       	movw	r22, r4
    1e60:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1e64:	7f 93       	push	r23
    1e66:	6f 93       	push	r22
    1e68:	c5 01       	movw	r24, r10
    1e6a:	b4 01       	movw	r22, r8
    1e6c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1e70:	7f 93       	push	r23
    1e72:	6f 93       	push	r22
    1e74:	c7 01       	movw	r24, r14
    1e76:	b6 01       	movw	r22, r12
    1e78:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1e7c:	7f 93       	push	r23
    1e7e:	6f 93       	push	r22
    1e80:	89 ad       	ldd	r24, Y+57	; 0x39
    1e82:	8f 93       	push	r24
    1e84:	98 ad       	ldd	r25, Y+56	; 0x38
    1e86:	9f 93       	push	r25
    1e88:	6a 81       	ldd	r22, Y+2	; 0x02
    1e8a:	7b 81       	ldd	r23, Y+3	; 0x03
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e90:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1e94:	9b 01       	movw	r18, r22
    1e96:	22 0f       	add	r18, r18
    1e98:	33 1f       	adc	r19, r19
    1e9a:	66 0f       	add	r22, r22
    1e9c:	77 1f       	adc	r23, r23
    1e9e:	66 0f       	add	r22, r22
    1ea0:	77 1f       	adc	r23, r23
    1ea2:	66 0f       	add	r22, r22
    1ea4:	77 1f       	adc	r23, r23
    1ea6:	c9 01       	movw	r24, r18
    1ea8:	86 0f       	add	r24, r22
    1eaa:	97 1f       	adc	r25, r23
    1eac:	6a e0       	ldi	r22, 0x0A	; 10
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divmodhi4>
    1eb4:	9f 93       	push	r25
    1eb6:	8f 93       	push	r24
    1eb8:	6e 81       	ldd	r22, Y+6	; 0x06
    1eba:	7f 81       	ldd	r23, Y+7	; 0x07
    1ebc:	88 85       	ldd	r24, Y+8	; 0x08
    1ebe:	99 85       	ldd	r25, Y+9	; 0x09
    1ec0:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1ec4:	7f 93       	push	r23
    1ec6:	6f 93       	push	r22
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	34 e2       	ldi	r19, 0x24	; 36
    1ecc:	44 e7       	ldi	r20, 0x74	; 116
    1ece:	59 e4       	ldi	r21, 0x49	; 73
    1ed0:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ed2:	7b 85       	ldd	r23, Y+11	; 0x0b
    1ed4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ed6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ed8:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1edc:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1ee0:	20 e4       	ldi	r18, 0x40	; 64
    1ee2:	32 e4       	ldi	r19, 0x42	; 66
    1ee4:	4f e0       	ldi	r20, 0x0F	; 15
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    1eec:	9b 01       	movw	r18, r22
    1eee:	77 23       	and	r23, r23
    1ef0:	24 f4       	brge	.+8      	; 0x1efa <packet+0x292>
    1ef2:	22 27       	eor	r18, r18
    1ef4:	33 27       	eor	r19, r19
    1ef6:	26 1b       	sub	r18, r22
    1ef8:	37 0b       	sbc	r19, r23
    1efa:	c9 01       	movw	r24, r18
    1efc:	33 0f       	add	r19, r19
    1efe:	aa 0b       	sbc	r26, r26
    1f00:	bb 0b       	sbc	r27, r27
    1f02:	bf 93       	push	r27
    1f04:	af 93       	push	r26
    1f06:	9f 93       	push	r25
    1f08:	8f 93       	push	r24
    1f0a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f0c:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f0e:	88 89       	ldd	r24, Y+16	; 0x10
    1f10:	99 89       	ldd	r25, Y+17	; 0x11
    1f12:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1f16:	7f 93       	push	r23
    1f18:	6f 93       	push	r22
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	34 e2       	ldi	r19, 0x24	; 36
    1f1e:	44 e7       	ldi	r20, 0x74	; 116
    1f20:	59 e4       	ldi	r21, 0x49	; 73
    1f22:	6a 89       	ldd	r22, Y+18	; 0x12
    1f24:	7b 89       	ldd	r23, Y+19	; 0x13
    1f26:	8c 89       	ldd	r24, Y+20	; 0x14
    1f28:	9d 89       	ldd	r25, Y+21	; 0x15
    1f2a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsf3>
    1f2e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1f32:	20 e4       	ldi	r18, 0x40	; 64
    1f34:	32 e4       	ldi	r19, 0x42	; 66
    1f36:	4f e0       	ldi	r20, 0x0F	; 15
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    1f3e:	9f 93       	push	r25
    1f40:	8f 93       	push	r24
    1f42:	7f 93       	push	r23
    1f44:	6f 93       	push	r22
    1f46:	6e 89       	ldd	r22, Y+22	; 0x16
    1f48:	7f 89       	ldd	r23, Y+23	; 0x17
    1f4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f4c:	99 8d       	ldd	r25, Y+25	; 0x19
    1f4e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1f52:	7f 93       	push	r23
    1f54:	6f 93       	push	r22
    1f56:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f58:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f5c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f5e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1f62:	0f 2e       	mov	r0, r31
    1f64:	f4 e6       	ldi	r31, 0x64	; 100
    1f66:	cf 2e       	mov	r12, r31
    1f68:	d1 2c       	mov	r13, r1
    1f6a:	e1 2c       	mov	r14, r1
    1f6c:	f1 2c       	mov	r15, r1
    1f6e:	f0 2d       	mov	r31, r0
    1f70:	a7 01       	movw	r20, r14
    1f72:	96 01       	movw	r18, r12
    1f74:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    1f78:	7f 93       	push	r23
    1f7a:	6f 93       	push	r22
    1f7c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1f7e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1f80:	88 a1       	ldd	r24, Y+32	; 0x20
    1f82:	99 a1       	ldd	r25, Y+33	; 0x21
    1f84:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1f88:	0f 2e       	mov	r0, r31
    1f8a:	f0 e1       	ldi	r31, 0x10	; 16
    1f8c:	8f 2e       	mov	r8, r31
    1f8e:	f7 e2       	ldi	r31, 0x27	; 39
    1f90:	9f 2e       	mov	r9, r31
    1f92:	a1 2c       	mov	r10, r1
    1f94:	b1 2c       	mov	r11, r1
    1f96:	f0 2d       	mov	r31, r0
    1f98:	a5 01       	movw	r20, r10
    1f9a:	94 01       	movw	r18, r8
    1f9c:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    1fa0:	a7 01       	movw	r20, r14
    1fa2:	96 01       	movw	r18, r12
    1fa4:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    1fa8:	3f 93       	push	r19
    1faa:	2f 93       	push	r18
    1fac:	6a a1       	ldd	r22, Y+34	; 0x22
    1fae:	7b a1       	ldd	r23, Y+35	; 0x23
    1fb0:	8c a1       	ldd	r24, Y+36	; 0x24
    1fb2:	9d a1       	ldd	r25, Y+37	; 0x25
    1fb4:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1fb8:	a5 01       	movw	r20, r10
    1fba:	94 01       	movw	r18, r8
    1fbc:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    1fc0:	3f 93       	push	r19
    1fc2:	2f 93       	push	r18
    1fc4:	6e a1       	ldd	r22, Y+38	; 0x26
    1fc6:	7f a1       	ldd	r23, Y+39	; 0x27
    1fc8:	88 a5       	ldd	r24, Y+40	; 0x28
    1fca:	99 a5       	ldd	r25, Y+41	; 0x29
    1fcc:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1fd0:	7f 93       	push	r23
    1fd2:	6f 93       	push	r22
    1fd4:	23 e3       	ldi	r18, 0x33	; 51
    1fd6:	33 e9       	ldi	r19, 0x93	; 147
    1fd8:	48 e8       	ldi	r20, 0x88	; 136
    1fda:	53 e4       	ldi	r21, 0x43	; 67
    1fdc:	6a a5       	ldd	r22, Y+42	; 0x2a
    1fde:	7b a5       	ldd	r23, Y+43	; 0x2b
    1fe0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fe2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fe4:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__subsf3>
    1fe8:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1fec:	7f 93       	push	r23
    1fee:	6f 93       	push	r22
    1ff0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ff2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ff4:	88 a9       	ldd	r24, Y+48	; 0x30
    1ff6:	99 a9       	ldd	r25, Y+49	; 0x31
    1ff8:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    1ffc:	9f 93       	push	r25
    1ffe:	8f 93       	push	r24
    2000:	7f 93       	push	r23
    2002:	6f 93       	push	r22
    2004:	6a a9       	ldd	r22, Y+50	; 0x32
    2006:	7b a9       	ldd	r23, Y+51	; 0x33
    2008:	8c a9       	ldd	r24, Y+52	; 0x34
    200a:	9d a9       	ldd	r25, Y+53	; 0x35
    200c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fixsfsi>
    2010:	7f 93       	push	r23
    2012:	6f 93       	push	r22
    2014:	1f 93       	push	r17
    2016:	0f 93       	push	r16
    2018:	91 01       	movw	r18, r2
    201a:	ad ec       	ldi	r26, 0xCD	; 205
    201c:	bc ec       	ldi	r27, 0xCC	; 204
    201e:	0e 94 9e 1c 	call	0x393c	; 0x393c <__umulhisi3>
    2022:	96 95       	lsr	r25
    2024:	87 95       	ror	r24
    2026:	96 95       	lsr	r25
    2028:	87 95       	ror	r24
    202a:	96 95       	lsr	r25
    202c:	87 95       	ror	r24
    202e:	9c 01       	movw	r18, r24
    2030:	22 0f       	add	r18, r18
    2032:	33 1f       	adc	r19, r19
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	82 0f       	add	r24, r18
    2042:	93 1f       	adc	r25, r19
    2044:	28 1a       	sub	r2, r24
    2046:	39 0a       	sbc	r3, r25
    2048:	3f 92       	push	r3
    204a:	2f 92       	push	r2
    204c:	2e a9       	ldd	r18, Y+54	; 0x36
    204e:	3f a9       	ldd	r19, Y+55	; 0x37
    2050:	0e 94 9e 1c 	call	0x393c	; 0x393c <__umulhisi3>
    2054:	96 95       	lsr	r25
    2056:	87 95       	ror	r24
    2058:	96 95       	lsr	r25
    205a:	87 95       	ror	r24
    205c:	96 95       	lsr	r25
    205e:	87 95       	ror	r24
    2060:	9f 93       	push	r25
    2062:	8f 93       	push	r24
    2064:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    2068:	8f 93       	push	r24
    206a:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    206e:	8f 93       	push	r24
    2070:	20 e5       	ldi	r18, 0x50	; 80
    2072:	31 e2       	ldi	r19, 0x21	; 33
    2074:	3f 93       	push	r19
    2076:	2f 93       	push	r18
    2078:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <sprintf>
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	20 e5       	ldi	r18, 0x50	; 80
    2082:	31 e2       	ldi	r19, 0x21	; 33
    2084:	3f 93       	push	r19
    2086:	2f 93       	push	r18
    2088:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <printf>
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	e9 96       	adiw	r28, 0x39	; 57
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	bf 90       	pop	r11
    20a8:	af 90       	pop	r10
    20aa:	9f 90       	pop	r9
    20ac:	8f 90       	pop	r8
    20ae:	7f 90       	pop	r7
    20b0:	6f 90       	pop	r6
    20b2:	5f 90       	pop	r5
    20b4:	4f 90       	pop	r4
    20b6:	3f 90       	pop	r3
    20b8:	2f 90       	pop	r2
    20ba:	08 95       	ret

000020bc <eeprom_write_const>:
    20bc:	5f 92       	push	r5
    20be:	6f 92       	push	r6
    20c0:	7f 92       	push	r7
    20c2:	8f 92       	push	r8
    20c4:	9f 92       	push	r9
    20c6:	af 92       	push	r10
    20c8:	bf 92       	push	r11
    20ca:	cf 92       	push	r12
    20cc:	df 92       	push	r13
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	a0 97       	sbiw	r28, 0x20	; 32
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	60 91 2b 20 	lds	r22, 0x202B	; 0x80202b <ground_p>
    20e8:	70 91 2c 20 	lds	r23, 0x202C	; 0x80202c <ground_p+0x1>
    20ec:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <ground_p+0x2>
    20f0:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <ground_p+0x3>
    20f4:	0e 94 36 19 	call	0x326c	; 0x326c <__fixunssfdi>
    20f8:	12 2f       	mov	r17, r18
    20fa:	63 2e       	mov	r6, r19
    20fc:	74 2e       	mov	r7, r20
    20fe:	85 2e       	mov	r8, r21
    2100:	96 2e       	mov	r9, r22
    2102:	a7 2e       	mov	r10, r23
    2104:	b8 2e       	mov	r11, r24
    2106:	c9 2e       	mov	r12, r25
    2108:	60 91 27 20 	lds	r22, 0x2027	; 0x802027 <ground_t>
    210c:	70 91 28 20 	lds	r23, 0x2028	; 0x802028 <ground_t+0x1>
    2110:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <ground_t+0x2>
    2114:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <ground_t+0x3>
    2118:	0e 94 36 19 	call	0x326c	; 0x326c <__fixunssfdi>
    211c:	e2 2f       	mov	r30, r18
    211e:	53 2e       	mov	r5, r19
    2120:	d4 2e       	mov	r13, r20
    2122:	e5 2e       	mov	r14, r21
    2124:	f6 2e       	mov	r15, r22
    2126:	b7 2f       	mov	r27, r23
    2128:	a8 2f       	mov	r26, r24
    212a:	f9 2f       	mov	r31, r25
    212c:	19 83       	std	Y+1, r17	; 0x01
    212e:	21 2f       	mov	r18, r17
    2130:	36 2d       	mov	r19, r6
    2132:	47 2d       	mov	r20, r7
    2134:	58 2d       	mov	r21, r8
    2136:	69 2d       	mov	r22, r9
    2138:	7a 2d       	mov	r23, r10
    213a:	8b 2d       	mov	r24, r11
    213c:	9c 2d       	mov	r25, r12
    213e:	08 e0       	ldi	r16, 0x08	; 8
    2140:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    2144:	2a 83       	std	Y+2, r18	; 0x02
    2146:	21 2f       	mov	r18, r17
    2148:	36 2d       	mov	r19, r6
    214a:	47 2d       	mov	r20, r7
    214c:	58 2d       	mov	r21, r8
    214e:	69 2d       	mov	r22, r9
    2150:	7a 2d       	mov	r23, r10
    2152:	8b 2d       	mov	r24, r11
    2154:	9c 2d       	mov	r25, r12
    2156:	00 e1       	ldi	r16, 0x10	; 16
    2158:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    215c:	2b 83       	std	Y+3, r18	; 0x03
    215e:	21 2f       	mov	r18, r17
    2160:	36 2d       	mov	r19, r6
    2162:	47 2d       	mov	r20, r7
    2164:	58 2d       	mov	r21, r8
    2166:	69 2d       	mov	r22, r9
    2168:	7a 2d       	mov	r23, r10
    216a:	8b 2d       	mov	r24, r11
    216c:	9c 2d       	mov	r25, r12
    216e:	08 e1       	ldi	r16, 0x18	; 24
    2170:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    2174:	2c 83       	std	Y+4, r18	; 0x04
    2176:	21 2f       	mov	r18, r17
    2178:	36 2d       	mov	r19, r6
    217a:	47 2d       	mov	r20, r7
    217c:	58 2d       	mov	r21, r8
    217e:	69 2d       	mov	r22, r9
    2180:	7a 2d       	mov	r23, r10
    2182:	8b 2d       	mov	r24, r11
    2184:	9c 2d       	mov	r25, r12
    2186:	00 e2       	ldi	r16, 0x20	; 32
    2188:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    218c:	2d 83       	std	Y+5, r18	; 0x05
    218e:	21 2f       	mov	r18, r17
    2190:	36 2d       	mov	r19, r6
    2192:	47 2d       	mov	r20, r7
    2194:	58 2d       	mov	r21, r8
    2196:	69 2d       	mov	r22, r9
    2198:	7a 2d       	mov	r23, r10
    219a:	8b 2d       	mov	r24, r11
    219c:	9c 2d       	mov	r25, r12
    219e:	08 e2       	ldi	r16, 0x28	; 40
    21a0:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    21a4:	2e 83       	std	Y+6, r18	; 0x06
    21a6:	21 2f       	mov	r18, r17
    21a8:	36 2d       	mov	r19, r6
    21aa:	47 2d       	mov	r20, r7
    21ac:	58 2d       	mov	r21, r8
    21ae:	69 2d       	mov	r22, r9
    21b0:	7a 2d       	mov	r23, r10
    21b2:	8b 2d       	mov	r24, r11
    21b4:	9c 2d       	mov	r25, r12
    21b6:	00 e3       	ldi	r16, 0x30	; 48
    21b8:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    21bc:	2f 83       	std	Y+7, r18	; 0x07
    21be:	21 2f       	mov	r18, r17
    21c0:	36 2d       	mov	r19, r6
    21c2:	47 2d       	mov	r20, r7
    21c4:	58 2d       	mov	r21, r8
    21c6:	69 2d       	mov	r22, r9
    21c8:	7a 2d       	mov	r23, r10
    21ca:	8b 2d       	mov	r24, r11
    21cc:	9c 2d       	mov	r25, r12
    21ce:	08 e3       	ldi	r16, 0x38	; 56
    21d0:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    21d4:	28 87       	std	Y+8, r18	; 0x08
    21d6:	e9 87       	std	Y+9, r30	; 0x09
    21d8:	2e 2f       	mov	r18, r30
    21da:	35 2d       	mov	r19, r5
    21dc:	4d 2d       	mov	r20, r13
    21de:	5e 2d       	mov	r21, r14
    21e0:	6f 2d       	mov	r22, r15
    21e2:	7b 2f       	mov	r23, r27
    21e4:	8a 2f       	mov	r24, r26
    21e6:	9f 2f       	mov	r25, r31
    21e8:	08 e0       	ldi	r16, 0x08	; 8
    21ea:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    21ee:	2a 87       	std	Y+10, r18	; 0x0a
    21f0:	2e 2f       	mov	r18, r30
    21f2:	35 2d       	mov	r19, r5
    21f4:	4d 2d       	mov	r20, r13
    21f6:	5e 2d       	mov	r21, r14
    21f8:	6f 2d       	mov	r22, r15
    21fa:	7b 2f       	mov	r23, r27
    21fc:	8a 2f       	mov	r24, r26
    21fe:	9f 2f       	mov	r25, r31
    2200:	00 e1       	ldi	r16, 0x10	; 16
    2202:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    2206:	2b 87       	std	Y+11, r18	; 0x0b
    2208:	2e 2f       	mov	r18, r30
    220a:	35 2d       	mov	r19, r5
    220c:	4d 2d       	mov	r20, r13
    220e:	5e 2d       	mov	r21, r14
    2210:	6f 2d       	mov	r22, r15
    2212:	7b 2f       	mov	r23, r27
    2214:	8a 2f       	mov	r24, r26
    2216:	9f 2f       	mov	r25, r31
    2218:	08 e1       	ldi	r16, 0x18	; 24
    221a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    221e:	2c 87       	std	Y+12, r18	; 0x0c
    2220:	2e 2f       	mov	r18, r30
    2222:	35 2d       	mov	r19, r5
    2224:	4d 2d       	mov	r20, r13
    2226:	5e 2d       	mov	r21, r14
    2228:	6f 2d       	mov	r22, r15
    222a:	7b 2f       	mov	r23, r27
    222c:	8a 2f       	mov	r24, r26
    222e:	9f 2f       	mov	r25, r31
    2230:	00 e2       	ldi	r16, 0x20	; 32
    2232:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    2236:	2d 87       	std	Y+13, r18	; 0x0d
    2238:	2e 2f       	mov	r18, r30
    223a:	35 2d       	mov	r19, r5
    223c:	4d 2d       	mov	r20, r13
    223e:	5e 2d       	mov	r21, r14
    2240:	6f 2d       	mov	r22, r15
    2242:	7b 2f       	mov	r23, r27
    2244:	8a 2f       	mov	r24, r26
    2246:	9f 2f       	mov	r25, r31
    2248:	08 e2       	ldi	r16, 0x28	; 40
    224a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    224e:	2e 87       	std	Y+14, r18	; 0x0e
    2250:	2e 2f       	mov	r18, r30
    2252:	35 2d       	mov	r19, r5
    2254:	4d 2d       	mov	r20, r13
    2256:	5e 2d       	mov	r21, r14
    2258:	6f 2d       	mov	r22, r15
    225a:	7b 2f       	mov	r23, r27
    225c:	8a 2f       	mov	r24, r26
    225e:	9f 2f       	mov	r25, r31
    2260:	00 e3       	ldi	r16, 0x30	; 48
    2262:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    2266:	2f 87       	std	Y+15, r18	; 0x0f
    2268:	2e 2f       	mov	r18, r30
    226a:	35 2d       	mov	r19, r5
    226c:	4d 2d       	mov	r20, r13
    226e:	5e 2d       	mov	r21, r14
    2270:	6f 2d       	mov	r22, r15
    2272:	7b 2f       	mov	r23, r27
    2274:	8a 2f       	mov	r24, r26
    2276:	9f 2f       	mov	r25, r31
    2278:	08 e3       	ldi	r16, 0x38	; 56
    227a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__lshrdi3>
    227e:	28 8b       	std	Y+16, r18	; 0x10
    2280:	80 e1       	ldi	r24, 0x10	; 16
    2282:	ef e2       	ldi	r30, 0x2F	; 47
    2284:	f0 e2       	ldi	r31, 0x20	; 32
    2286:	de 01       	movw	r26, r28
    2288:	51 96       	adiw	r26, 0x11	; 17
    228a:	01 90       	ld	r0, Z+
    228c:	0d 92       	st	X+, r0
    228e:	8a 95       	dec	r24
    2290:	e1 f7       	brne	.-8      	; 0x228a <eeprom_write_const+0x1ce>
    2292:	83 e3       	ldi	r24, 0x33	; 51
    2294:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    2298:	fe 01       	movw	r30, r28
    229a:	71 96       	adiw	r30, 0x11	; 17
    229c:	ce 01       	movw	r24, r28
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	ae 01       	movw	r20, r28
    22a2:	4f 5d       	subi	r20, 0xDF	; 223
    22a4:	5f 4f       	sbci	r21, 0xFF	; 255
    22a6:	60 ec       	ldi	r22, 0xC0	; 192
    22a8:	71 e0       	ldi	r23, 0x01	; 1
    22aa:	21 91       	ld	r18, Z+
    22ac:	db 01       	movw	r26, r22
    22ae:	2c 93       	st	X, r18
    22b0:	dc 01       	movw	r26, r24
    22b2:	2d 91       	ld	r18, X+
    22b4:	cd 01       	movw	r24, r26
    22b6:	db 01       	movw	r26, r22
    22b8:	14 96       	adiw	r26, 0x04	; 4
    22ba:	2c 93       	st	X, r18
    22bc:	e4 17       	cp	r30, r20
    22be:	f5 07       	cpc	r31, r21
    22c0:	a1 f7       	brne	.-24     	; 0x22aa <eeprom_write_const+0x1ee>
    22c2:	e0 ec       	ldi	r30, 0xC0	; 192
    22c4:	f1 e0       	ldi	r31, 0x01	; 1
    22c6:	85 e3       	ldi	r24, 0x35	; 53
    22c8:	82 87       	std	Z+10, r24	; 0x0a
    22ca:	10 82       	st	Z, r1
    22cc:	80 e1       	ldi	r24, 0x10	; 16
    22ce:	81 83       	std	Z+1, r24	; 0x01
    22d0:	88 ed       	ldi	r24, 0xD8	; 216
    22d2:	84 bf       	out	0x34, r24	; 52
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	83 87       	std	Z+11, r24	; 0x0b
    22d8:	87 85       	ldd	r24, Z+15	; 0x0f
    22da:	88 23       	and	r24, r24
    22dc:	ec f3       	brlt	.-6      	; 0x22d8 <eeprom_write_const+0x21c>
    22de:	a0 96       	adiw	r28, 0x20	; 32
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	9f 90       	pop	r9
    22fa:	8f 90       	pop	r8
    22fc:	7f 90       	pop	r7
    22fe:	6f 90       	pop	r6
    2300:	5f 90       	pop	r5
    2302:	08 95       	ret

00002304 <system_init>:
    2304:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sysclk_init>
    2308:	6b ea       	ldi	r22, 0xAB	; 171
    230a:	79 e2       	ldi	r23, 0x29	; 41
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__portable_avr_delay_cycles>
    2314:	78 94       	sei
    2316:	8c eb       	ldi	r24, 0xBC	; 188
    2318:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    231c:	87 e0       	ldi	r24, 0x07	; 7
    231e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2322:	0e 94 b3 05 	call	0xb66	; 0xb66 <cam_init>
    2326:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <data_terminal_init>
    232a:	6b ea       	ldi	r22, 0xAB	; 171
    232c:	70 eb       	ldi	r23, 0xB0	; 176
    232e:	88 e2       	ldi	r24, 0x28	; 40
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__portable_avr_delay_cycles>
    2336:	80 e2       	ldi	r24, 0x20	; 32
    2338:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
    233c:	0e 94 08 09 	call	0x1210	; 0x1210 <gps_init>
    2340:	0e 94 ba 05 	call	0xb74	; 0xb74 <thermistor_init>
    2344:	0e 94 40 07 	call	0xe80	; 0xe80 <voltage_init>
    2348:	0e 94 c9 06 	call	0xd92	; 0xd92 <spi_init>
    234c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <pressure_init>
    2350:	0e 94 ac 05 	call	0xb58	; 0xb58 <cam_switch>
    2354:	3c dc       	rcall	.-1928   	; 0x1bce <clock_init>
    2356:	8e db       	rcall	.-2276   	; 0x1a74 <release_servo_init>
    2358:	66 e5       	ldi	r22, 0x56	; 86
    235a:	70 ed       	ldi	r23, 0xD0	; 208
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__portable_avr_delay_cycles>
    2364:	f4 da       	rcall	.-2584   	; 0x194e <state_check>
    2366:	0e 94 1c 09 	call	0x1238	; 0x1238 <get_pressure>
    236a:	60 93 2b 20 	sts	0x202B, r22	; 0x80202b <ground_p>
    236e:	70 93 2c 20 	sts	0x202C, r23	; 0x80202c <ground_p+0x1>
    2372:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p+0x2>
    2376:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x3>
    237a:	83 e3       	ldi	r24, 0x33	; 51
    237c:	93 e1       	ldi	r25, 0x13	; 19
    237e:	a5 e9       	ldi	r26, 0x95	; 149
    2380:	b3 e4       	ldi	r27, 0x43	; 67
    2382:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    2386:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    238a:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    238e:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    2392:	94 ce       	rjmp	.-728    	; 0x20bc <eeprom_write_const>
    2394:	08 95       	ret

00002396 <eeprom_write>:
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	2c 97       	sbiw	r28, 0x0c	; 12
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	60 91 d1 20 	lds	r22, 0x20D1	; 0x8020d1 <alt>
    23a8:	70 91 d2 20 	lds	r23, 0x20D2	; 0x8020d2 <alt+0x1>
    23ac:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <alt+0x2>
    23b0:	90 91 d4 20 	lds	r25, 0x20D4	; 0x8020d4 <alt+0x3>
    23b4:	90 d7       	rcall	.+3872   	; 0x32d6 <__fixsfsi>
    23b6:	79 83       	std	Y+1, r23	; 0x01
    23b8:	6a 83       	std	Y+2, r22	; 0x02
    23ba:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <packets>
    23be:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <packets+0x1>
    23c2:	9b 83       	std	Y+3, r25	; 0x03
    23c4:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <packets>
    23c8:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <packets+0x1>
    23cc:	8c 83       	std	Y+4, r24	; 0x04
    23ce:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <timer>
    23d2:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <timer+0x1>
    23d6:	9d 83       	std	Y+5, r25	; 0x05
    23d8:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <timer>
    23dc:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <timer+0x1>
    23e0:	8e 83       	std	Y+6, r24	; 0x06
    23e2:	86 e0       	ldi	r24, 0x06	; 6
    23e4:	ef e3       	ldi	r30, 0x3F	; 63
    23e6:	f0 e2       	ldi	r31, 0x20	; 32
    23e8:	de 01       	movw	r26, r28
    23ea:	17 96       	adiw	r26, 0x07	; 7
    23ec:	01 90       	ld	r0, Z+
    23ee:	0d 92       	st	X+, r0
    23f0:	8a 95       	dec	r24
    23f2:	e1 f7       	brne	.-8      	; 0x23ec <eeprom_write+0x56>
    23f4:	83 e3       	ldi	r24, 0x33	; 51
    23f6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    23fa:	fe 01       	movw	r30, r28
    23fc:	37 96       	adiw	r30, 0x07	; 7
    23fe:	ce 01       	movw	r24, r28
    2400:	01 96       	adiw	r24, 0x01	; 1
    2402:	ae 01       	movw	r20, r28
    2404:	43 5f       	subi	r20, 0xF3	; 243
    2406:	5f 4f       	sbci	r21, 0xFF	; 255
    2408:	60 ec       	ldi	r22, 0xC0	; 192
    240a:	71 e0       	ldi	r23, 0x01	; 1
    240c:	21 91       	ld	r18, Z+
    240e:	db 01       	movw	r26, r22
    2410:	2c 93       	st	X, r18
    2412:	dc 01       	movw	r26, r24
    2414:	2d 91       	ld	r18, X+
    2416:	cd 01       	movw	r24, r26
    2418:	db 01       	movw	r26, r22
    241a:	14 96       	adiw	r26, 0x04	; 4
    241c:	2c 93       	st	X, r18
    241e:	e4 17       	cp	r30, r20
    2420:	f5 07       	cpc	r31, r21
    2422:	a1 f7       	brne	.-24     	; 0x240c <eeprom_write+0x76>
    2424:	e0 ec       	ldi	r30, 0xC0	; 192
    2426:	f1 e0       	ldi	r31, 0x01	; 1
    2428:	85 e3       	ldi	r24, 0x35	; 53
    242a:	82 87       	std	Z+10, r24	; 0x0a
    242c:	10 82       	st	Z, r1
    242e:	80 e1       	ldi	r24, 0x10	; 16
    2430:	81 83       	std	Z+1, r24	; 0x01
    2432:	88 ed       	ldi	r24, 0xD8	; 216
    2434:	84 bf       	out	0x34, r24	; 52
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	83 87       	std	Z+11, r24	; 0x0b
    243a:	87 85       	ldd	r24, Z+15	; 0x0f
    243c:	88 23       	and	r24, r24
    243e:	ec f3       	brlt	.-6      	; 0x243a <eeprom_write+0xa4>
    2440:	2c 96       	adiw	r28, 0x0c	; 12
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	08 95       	ret

0000244c <time_update>:
    244c:	2f 92       	push	r2
    244e:	3f 92       	push	r3
    2450:	4f 92       	push	r4
    2452:	5f 92       	push	r5
    2454:	6f 92       	push	r6
    2456:	7f 92       	push	r7
    2458:	8f 92       	push	r8
    245a:	9f 92       	push	r9
    245c:	af 92       	push	r10
    245e:	bf 92       	push	r11
    2460:	cf 92       	push	r12
    2462:	df 92       	push	r13
    2464:	ef 92       	push	r14
    2466:	ff 92       	push	r15
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	e7 97       	sbiw	r28, 0x37	; 55
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <packets>
    247e:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <packets+0x1>
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	80 93 dd 20 	sts	0x20DD, r24	; 0x8020dd <packets>
    2488:	90 93 de 20 	sts	0x20DE, r25	; 0x8020de <packets+0x1>
    248c:	60 91 a7 20 	lds	r22, 0x20A7	; 0x8020a7 <angle>
    2490:	70 91 a8 20 	lds	r23, 0x20A8	; 0x8020a8 <angle+0x1>
    2494:	80 91 a9 20 	lds	r24, 0x20A9	; 0x8020a9 <angle+0x2>
    2498:	90 91 aa 20 	lds	r25, 0x20AA	; 0x8020aa <angle+0x3>
    249c:	20 91 08 21 	lds	r18, 0x2108	; 0x802108 <state>
    24a0:	29 83       	std	Y+1, r18	; 0x01
    24a2:	40 90 ab 20 	lds	r4, 0x20AB	; 0x8020ab <rpm>
    24a6:	50 90 ac 20 	lds	r5, 0x20AC	; 0x8020ac <rpm+0x1>
    24aa:	60 90 ad 20 	lds	r6, 0x20AD	; 0x8020ad <rpm+0x2>
    24ae:	70 90 ae 20 	lds	r7, 0x20AE	; 0x8020ae <rpm+0x3>
    24b2:	80 90 af 20 	lds	r8, 0x20AF	; 0x8020af <roll>
    24b6:	90 90 b0 20 	lds	r9, 0x20B0	; 0x8020b0 <roll+0x1>
    24ba:	a0 90 b1 20 	lds	r10, 0x20B1	; 0x8020b1 <roll+0x2>
    24be:	b0 90 b2 20 	lds	r11, 0x20B2	; 0x8020b2 <roll+0x3>
    24c2:	c0 90 b3 20 	lds	r12, 0x20B3	; 0x8020b3 <pitch>
    24c6:	d0 90 b4 20 	lds	r13, 0x20B4	; 0x8020b4 <pitch+0x1>
    24ca:	e0 90 b5 20 	lds	r14, 0x20B5	; 0x8020b5 <pitch+0x2>
    24ce:	f0 90 b6 20 	lds	r15, 0x20B6	; 0x8020b6 <pitch+0x3>
    24d2:	40 91 b7 20 	lds	r20, 0x20B7	; 0x8020b7 <gps_sats>
    24d6:	50 91 b8 20 	lds	r21, 0x20B8	; 0x8020b8 <gps_sats+0x1>
    24da:	4e ab       	std	Y+54, r20	; 0x36
    24dc:	5f ab       	std	Y+55, r21	; 0x37
    24de:	20 91 b9 20 	lds	r18, 0x20B9	; 0x8020b9 <gps_alt>
    24e2:	30 91 ba 20 	lds	r19, 0x20BA	; 0x8020ba <gps_alt+0x1>
    24e6:	40 91 bb 20 	lds	r20, 0x20BB	; 0x8020bb <gps_alt+0x2>
    24ea:	50 91 bc 20 	lds	r21, 0x20BC	; 0x8020bc <gps_alt+0x3>
    24ee:	2a 83       	std	Y+2, r18	; 0x02
    24f0:	3b 83       	std	Y+3, r19	; 0x03
    24f2:	4c 83       	std	Y+4, r20	; 0x04
    24f4:	5d 83       	std	Y+5, r21	; 0x05
    24f6:	20 91 b9 20 	lds	r18, 0x20B9	; 0x8020b9 <gps_alt>
    24fa:	30 91 ba 20 	lds	r19, 0x20BA	; 0x8020ba <gps_alt+0x1>
    24fe:	40 91 bb 20 	lds	r20, 0x20BB	; 0x8020bb <gps_alt+0x2>
    2502:	50 91 bc 20 	lds	r21, 0x20BC	; 0x8020bc <gps_alt+0x3>
    2506:	2e 83       	std	Y+6, r18	; 0x06
    2508:	3f 83       	std	Y+7, r19	; 0x07
    250a:	48 87       	std	Y+8, r20	; 0x08
    250c:	59 87       	std	Y+9, r21	; 0x09
    250e:	20 91 bd 20 	lds	r18, 0x20BD	; 0x8020bd <gps_long>
    2512:	30 91 be 20 	lds	r19, 0x20BE	; 0x8020be <gps_long+0x1>
    2516:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <gps_long+0x2>
    251a:	50 91 c0 20 	lds	r21, 0x20C0	; 0x8020c0 <gps_long+0x3>
    251e:	2a 87       	std	Y+10, r18	; 0x0a
    2520:	3b 87       	std	Y+11, r19	; 0x0b
    2522:	4c 87       	std	Y+12, r20	; 0x0c
    2524:	5d 87       	std	Y+13, r21	; 0x0d
    2526:	20 91 bd 20 	lds	r18, 0x20BD	; 0x8020bd <gps_long>
    252a:	30 91 be 20 	lds	r19, 0x20BE	; 0x8020be <gps_long+0x1>
    252e:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <gps_long+0x2>
    2532:	50 91 c0 20 	lds	r21, 0x20C0	; 0x8020c0 <gps_long+0x3>
    2536:	2e 87       	std	Y+14, r18	; 0x0e
    2538:	3f 87       	std	Y+15, r19	; 0x0f
    253a:	48 8b       	std	Y+16, r20	; 0x10
    253c:	59 8b       	std	Y+17, r21	; 0x11
    253e:	20 91 c1 20 	lds	r18, 0x20C1	; 0x8020c1 <gps_lat>
    2542:	30 91 c2 20 	lds	r19, 0x20C2	; 0x8020c2 <gps_lat+0x1>
    2546:	40 91 c3 20 	lds	r20, 0x20C3	; 0x8020c3 <gps_lat+0x2>
    254a:	50 91 c4 20 	lds	r21, 0x20C4	; 0x8020c4 <gps_lat+0x3>
    254e:	2a 8b       	std	Y+18, r18	; 0x12
    2550:	3b 8b       	std	Y+19, r19	; 0x13
    2552:	4c 8b       	std	Y+20, r20	; 0x14
    2554:	5d 8b       	std	Y+21, r21	; 0x15
    2556:	20 91 c1 20 	lds	r18, 0x20C1	; 0x8020c1 <gps_lat>
    255a:	30 91 c2 20 	lds	r19, 0x20C2	; 0x8020c2 <gps_lat+0x1>
    255e:	40 91 c3 20 	lds	r20, 0x20C3	; 0x8020c3 <gps_lat+0x2>
    2562:	50 91 c4 20 	lds	r21, 0x20C4	; 0x8020c4 <gps_lat+0x3>
    2566:	2e 8b       	std	Y+22, r18	; 0x16
    2568:	3f 8b       	std	Y+23, r19	; 0x17
    256a:	48 8f       	std	Y+24, r20	; 0x18
    256c:	59 8f       	std	Y+25, r21	; 0x19
    256e:	20 91 c5 20 	lds	r18, 0x20C5	; 0x8020c5 <gps_t>
    2572:	30 91 c6 20 	lds	r19, 0x20C6	; 0x8020c6 <gps_t+0x1>
    2576:	40 91 c7 20 	lds	r20, 0x20C7	; 0x8020c7 <gps_t+0x2>
    257a:	50 91 c8 20 	lds	r21, 0x20C8	; 0x8020c8 <gps_t+0x3>
    257e:	2a 8f       	std	Y+26, r18	; 0x1a
    2580:	3b 8f       	std	Y+27, r19	; 0x1b
    2582:	4c 8f       	std	Y+28, r20	; 0x1c
    2584:	5d 8f       	std	Y+29, r21	; 0x1d
    2586:	20 91 c5 20 	lds	r18, 0x20C5	; 0x8020c5 <gps_t>
    258a:	30 91 c6 20 	lds	r19, 0x20C6	; 0x8020c6 <gps_t+0x1>
    258e:	40 91 c7 20 	lds	r20, 0x20C7	; 0x8020c7 <gps_t+0x2>
    2592:	50 91 c8 20 	lds	r21, 0x20C8	; 0x8020c8 <gps_t+0x3>
    2596:	2e 8f       	std	Y+30, r18	; 0x1e
    2598:	3f 8f       	std	Y+31, r19	; 0x1f
    259a:	48 a3       	std	Y+32, r20	; 0x20
    259c:	59 a3       	std	Y+33, r21	; 0x21
    259e:	20 91 c5 20 	lds	r18, 0x20C5	; 0x8020c5 <gps_t>
    25a2:	30 91 c6 20 	lds	r19, 0x20C6	; 0x8020c6 <gps_t+0x1>
    25a6:	40 91 c7 20 	lds	r20, 0x20C7	; 0x8020c7 <gps_t+0x2>
    25aa:	50 91 c8 20 	lds	r21, 0x20C8	; 0x8020c8 <gps_t+0x3>
    25ae:	2a a3       	std	Y+34, r18	; 0x22
    25b0:	3b a3       	std	Y+35, r19	; 0x23
    25b2:	4c a3       	std	Y+36, r20	; 0x24
    25b4:	5d a3       	std	Y+37, r21	; 0x25
    25b6:	20 91 cd 20 	lds	r18, 0x20CD	; 0x8020cd <volt>
    25ba:	30 91 ce 20 	lds	r19, 0x20CE	; 0x8020ce <volt+0x1>
    25be:	40 91 cf 20 	lds	r20, 0x20CF	; 0x8020cf <volt+0x2>
    25c2:	50 91 d0 20 	lds	r21, 0x20D0	; 0x8020d0 <volt+0x3>
    25c6:	2e a3       	std	Y+38, r18	; 0x26
    25c8:	3f a3       	std	Y+39, r19	; 0x27
    25ca:	48 a7       	std	Y+40, r20	; 0x28
    25cc:	59 a7       	std	Y+41, r21	; 0x29
    25ce:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <temp>
    25d2:	30 91 d6 20 	lds	r19, 0x20D6	; 0x8020d6 <temp+0x1>
    25d6:	40 91 d7 20 	lds	r20, 0x20D7	; 0x8020d7 <temp+0x2>
    25da:	50 91 d8 20 	lds	r21, 0x20D8	; 0x8020d8 <temp+0x3>
    25de:	2a a7       	std	Y+42, r18	; 0x2a
    25e0:	3b a7       	std	Y+43, r19	; 0x2b
    25e2:	4c a7       	std	Y+44, r20	; 0x2c
    25e4:	5d a7       	std	Y+45, r21	; 0x2d
    25e6:	20 91 d9 20 	lds	r18, 0x20D9	; 0x8020d9 <press>
    25ea:	30 91 da 20 	lds	r19, 0x20DA	; 0x8020da <press+0x1>
    25ee:	40 91 db 20 	lds	r20, 0x20DB	; 0x8020db <press+0x2>
    25f2:	50 91 dc 20 	lds	r21, 0x20DC	; 0x8020dc <press+0x3>
    25f6:	2e a7       	std	Y+46, r18	; 0x2e
    25f8:	3f a7       	std	Y+47, r19	; 0x2f
    25fa:	48 ab       	std	Y+48, r20	; 0x30
    25fc:	59 ab       	std	Y+49, r21	; 0x31
    25fe:	20 91 d1 20 	lds	r18, 0x20D1	; 0x8020d1 <alt>
    2602:	30 91 d2 20 	lds	r19, 0x20D2	; 0x8020d2 <alt+0x1>
    2606:	40 91 d3 20 	lds	r20, 0x20D3	; 0x8020d3 <alt+0x2>
    260a:	50 91 d4 20 	lds	r21, 0x20D4	; 0x8020d4 <alt+0x3>
    260e:	2a ab       	std	Y+50, r18	; 0x32
    2610:	3b ab       	std	Y+51, r19	; 0x33
    2612:	4c ab       	std	Y+52, r20	; 0x34
    2614:	5d ab       	std	Y+53, r21	; 0x35
    2616:	20 90 dd 20 	lds	r2, 0x20DD	; 0x8020dd <packets>
    261a:	30 90 de 20 	lds	r3, 0x20DE	; 0x8020de <packets+0x1>
    261e:	00 91 e1 20 	lds	r16, 0x20E1	; 0x8020e1 <timer>
    2622:	10 91 e2 20 	lds	r17, 0x20E2	; 0x8020e2 <timer+0x1>
    2626:	57 d6       	rcall	.+3246   	; 0x32d6 <__fixsfsi>
    2628:	7f 93       	push	r23
    262a:	6f 93       	push	r22
    262c:	1f 92       	push	r1
    262e:	39 81       	ldd	r19, Y+1	; 0x01
    2630:	3f 93       	push	r19
    2632:	c3 01       	movw	r24, r6
    2634:	b2 01       	movw	r22, r4
    2636:	4f d6       	rcall	.+3230   	; 0x32d6 <__fixsfsi>
    2638:	7f 93       	push	r23
    263a:	6f 93       	push	r22
    263c:	c5 01       	movw	r24, r10
    263e:	b4 01       	movw	r22, r8
    2640:	4a d6       	rcall	.+3220   	; 0x32d6 <__fixsfsi>
    2642:	7f 93       	push	r23
    2644:	6f 93       	push	r22
    2646:	c7 01       	movw	r24, r14
    2648:	b6 01       	movw	r22, r12
    264a:	45 d6       	rcall	.+3210   	; 0x32d6 <__fixsfsi>
    264c:	7f 93       	push	r23
    264e:	6f 93       	push	r22
    2650:	4f a9       	ldd	r20, Y+55	; 0x37
    2652:	4f 93       	push	r20
    2654:	5e a9       	ldd	r21, Y+54	; 0x36
    2656:	5f 93       	push	r21
    2658:	6a 81       	ldd	r22, Y+2	; 0x02
    265a:	7b 81       	ldd	r23, Y+3	; 0x03
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	3a d6       	rcall	.+3188   	; 0x32d6 <__fixsfsi>
    2662:	9b 01       	movw	r18, r22
    2664:	22 0f       	add	r18, r18
    2666:	33 1f       	adc	r19, r19
    2668:	66 0f       	add	r22, r22
    266a:	77 1f       	adc	r23, r23
    266c:	66 0f       	add	r22, r22
    266e:	77 1f       	adc	r23, r23
    2670:	66 0f       	add	r22, r22
    2672:	77 1f       	adc	r23, r23
    2674:	c9 01       	movw	r24, r18
    2676:	86 0f       	add	r24, r22
    2678:	97 1f       	adc	r25, r23
    267a:	6a e0       	ldi	r22, 0x0A	; 10
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divmodhi4>
    2682:	9f 93       	push	r25
    2684:	8f 93       	push	r24
    2686:	6e 81       	ldd	r22, Y+6	; 0x06
    2688:	7f 81       	ldd	r23, Y+7	; 0x07
    268a:	88 85       	ldd	r24, Y+8	; 0x08
    268c:	99 85       	ldd	r25, Y+9	; 0x09
    268e:	23 d6       	rcall	.+3142   	; 0x32d6 <__fixsfsi>
    2690:	7f 93       	push	r23
    2692:	6f 93       	push	r22
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	34 e2       	ldi	r19, 0x24	; 36
    2698:	44 e7       	ldi	r20, 0x74	; 116
    269a:	59 e4       	ldi	r21, 0x49	; 73
    269c:	6a 85       	ldd	r22, Y+10	; 0x0a
    269e:	7b 85       	ldd	r23, Y+11	; 0x0b
    26a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    26a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    26a4:	0f d7       	rcall	.+3614   	; 0x34c4 <__mulsf3>
    26a6:	17 d6       	rcall	.+3118   	; 0x32d6 <__fixsfsi>
    26a8:	20 e4       	ldi	r18, 0x40	; 64
    26aa:	32 e4       	ldi	r19, 0x42	; 66
    26ac:	4f e0       	ldi	r20, 0x0F	; 15
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    26b4:	9b 01       	movw	r18, r22
    26b6:	77 23       	and	r23, r23
    26b8:	24 f4       	brge	.+8      	; 0x26c2 <time_update+0x276>
    26ba:	22 27       	eor	r18, r18
    26bc:	33 27       	eor	r19, r19
    26be:	26 1b       	sub	r18, r22
    26c0:	37 0b       	sbc	r19, r23
    26c2:	c9 01       	movw	r24, r18
    26c4:	33 0f       	add	r19, r19
    26c6:	aa 0b       	sbc	r26, r26
    26c8:	bb 0b       	sbc	r27, r27
    26ca:	bf 93       	push	r27
    26cc:	af 93       	push	r26
    26ce:	9f 93       	push	r25
    26d0:	8f 93       	push	r24
    26d2:	6e 85       	ldd	r22, Y+14	; 0x0e
    26d4:	7f 85       	ldd	r23, Y+15	; 0x0f
    26d6:	88 89       	ldd	r24, Y+16	; 0x10
    26d8:	99 89       	ldd	r25, Y+17	; 0x11
    26da:	fd d5       	rcall	.+3066   	; 0x32d6 <__fixsfsi>
    26dc:	7f 93       	push	r23
    26de:	6f 93       	push	r22
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	34 e2       	ldi	r19, 0x24	; 36
    26e4:	44 e7       	ldi	r20, 0x74	; 116
    26e6:	59 e4       	ldi	r21, 0x49	; 73
    26e8:	6a 89       	ldd	r22, Y+18	; 0x12
    26ea:	7b 89       	ldd	r23, Y+19	; 0x13
    26ec:	8c 89       	ldd	r24, Y+20	; 0x14
    26ee:	9d 89       	ldd	r25, Y+21	; 0x15
    26f0:	e9 d6       	rcall	.+3538   	; 0x34c4 <__mulsf3>
    26f2:	f1 d5       	rcall	.+3042   	; 0x32d6 <__fixsfsi>
    26f4:	20 e4       	ldi	r18, 0x40	; 64
    26f6:	32 e4       	ldi	r19, 0x42	; 66
    26f8:	4f e0       	ldi	r20, 0x0F	; 15
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    2700:	9f 93       	push	r25
    2702:	8f 93       	push	r24
    2704:	7f 93       	push	r23
    2706:	6f 93       	push	r22
    2708:	6e 89       	ldd	r22, Y+22	; 0x16
    270a:	7f 89       	ldd	r23, Y+23	; 0x17
    270c:	88 8d       	ldd	r24, Y+24	; 0x18
    270e:	99 8d       	ldd	r25, Y+25	; 0x19
    2710:	e2 d5       	rcall	.+3012   	; 0x32d6 <__fixsfsi>
    2712:	7f 93       	push	r23
    2714:	6f 93       	push	r22
    2716:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2718:	7b 8d       	ldd	r23, Y+27	; 0x1b
    271a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    271c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    271e:	db d5       	rcall	.+2998   	; 0x32d6 <__fixsfsi>
    2720:	0f 2e       	mov	r0, r31
    2722:	f4 e6       	ldi	r31, 0x64	; 100
    2724:	cf 2e       	mov	r12, r31
    2726:	d1 2c       	mov	r13, r1
    2728:	e1 2c       	mov	r14, r1
    272a:	f1 2c       	mov	r15, r1
    272c:	f0 2d       	mov	r31, r0
    272e:	a7 01       	movw	r20, r14
    2730:	96 01       	movw	r18, r12
    2732:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    2736:	7f 93       	push	r23
    2738:	6f 93       	push	r22
    273a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    273c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    273e:	88 a1       	ldd	r24, Y+32	; 0x20
    2740:	99 a1       	ldd	r25, Y+33	; 0x21
    2742:	c9 d5       	rcall	.+2962   	; 0x32d6 <__fixsfsi>
    2744:	0f 2e       	mov	r0, r31
    2746:	f0 e1       	ldi	r31, 0x10	; 16
    2748:	8f 2e       	mov	r8, r31
    274a:	f7 e2       	ldi	r31, 0x27	; 39
    274c:	9f 2e       	mov	r9, r31
    274e:	a1 2c       	mov	r10, r1
    2750:	b1 2c       	mov	r11, r1
    2752:	f0 2d       	mov	r31, r0
    2754:	a5 01       	movw	r20, r10
    2756:	94 01       	movw	r18, r8
    2758:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    275c:	a7 01       	movw	r20, r14
    275e:	96 01       	movw	r18, r12
    2760:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    2764:	3f 93       	push	r19
    2766:	2f 93       	push	r18
    2768:	6a a1       	ldd	r22, Y+34	; 0x22
    276a:	7b a1       	ldd	r23, Y+35	; 0x23
    276c:	8c a1       	ldd	r24, Y+36	; 0x24
    276e:	9d a1       	ldd	r25, Y+37	; 0x25
    2770:	b2 d5       	rcall	.+2916   	; 0x32d6 <__fixsfsi>
    2772:	a5 01       	movw	r20, r10
    2774:	94 01       	movw	r18, r8
    2776:	0e 94 82 1c 	call	0x3904	; 0x3904 <__divmodsi4>
    277a:	3f 93       	push	r19
    277c:	2f 93       	push	r18
    277e:	6e a1       	ldd	r22, Y+38	; 0x26
    2780:	7f a1       	ldd	r23, Y+39	; 0x27
    2782:	88 a5       	ldd	r24, Y+40	; 0x28
    2784:	99 a5       	ldd	r25, Y+41	; 0x29
    2786:	a7 d5       	rcall	.+2894   	; 0x32d6 <__fixsfsi>
    2788:	7f 93       	push	r23
    278a:	6f 93       	push	r22
    278c:	23 e3       	ldi	r18, 0x33	; 51
    278e:	33 e9       	ldi	r19, 0x93	; 147
    2790:	48 e8       	ldi	r20, 0x88	; 136
    2792:	53 e4       	ldi	r21, 0x43	; 67
    2794:	6a a5       	ldd	r22, Y+42	; 0x2a
    2796:	7b a5       	ldd	r23, Y+43	; 0x2b
    2798:	8c a5       	ldd	r24, Y+44	; 0x2c
    279a:	9d a5       	ldd	r25, Y+45	; 0x2d
    279c:	91 d4       	rcall	.+2338   	; 0x30c0 <__subsf3>
    279e:	9b d5       	rcall	.+2870   	; 0x32d6 <__fixsfsi>
    27a0:	7f 93       	push	r23
    27a2:	6f 93       	push	r22
    27a4:	6e a5       	ldd	r22, Y+46	; 0x2e
    27a6:	7f a5       	ldd	r23, Y+47	; 0x2f
    27a8:	88 a9       	ldd	r24, Y+48	; 0x30
    27aa:	99 a9       	ldd	r25, Y+49	; 0x31
    27ac:	94 d5       	rcall	.+2856   	; 0x32d6 <__fixsfsi>
    27ae:	9f 93       	push	r25
    27b0:	8f 93       	push	r24
    27b2:	7f 93       	push	r23
    27b4:	6f 93       	push	r22
    27b6:	6a a9       	ldd	r22, Y+50	; 0x32
    27b8:	7b a9       	ldd	r23, Y+51	; 0x33
    27ba:	8c a9       	ldd	r24, Y+52	; 0x34
    27bc:	9d a9       	ldd	r25, Y+53	; 0x35
    27be:	8b d5       	rcall	.+2838   	; 0x32d6 <__fixsfsi>
    27c0:	7f 93       	push	r23
    27c2:	6f 93       	push	r22
    27c4:	3f 92       	push	r3
    27c6:	2f 92       	push	r2
    27c8:	1f 93       	push	r17
    27ca:	0f 93       	push	r16
    27cc:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    27d0:	8f 93       	push	r24
    27d2:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    27d6:	8f 93       	push	r24
    27d8:	80 e5       	ldi	r24, 0x50	; 80
    27da:	91 e2       	ldi	r25, 0x21	; 33
    27dc:	9f 93       	push	r25
    27de:	8f 93       	push	r24
    27e0:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <sprintf>
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	80 e5       	ldi	r24, 0x50	; 80
    27ea:	91 e2       	ldi	r25, 0x21	; 33
    27ec:	9f 93       	push	r25
    27ee:	8f 93       	push	r24
    27f0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <printf>
    27f4:	d0 dd       	rcall	.-1120   	; 0x2396 <eeprom_write>
    27f6:	10 92 02 21 	sts	0x2102, r1	; 0x802102 <time_flag>
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	e7 96       	adiw	r28, 0x37	; 55
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	ff 90       	pop	r15
    280e:	ef 90       	pop	r14
    2810:	df 90       	pop	r13
    2812:	cf 90       	pop	r12
    2814:	bf 90       	pop	r11
    2816:	af 90       	pop	r10
    2818:	9f 90       	pop	r9
    281a:	8f 90       	pop	r8
    281c:	7f 90       	pop	r7
    281e:	6f 90       	pop	r6
    2820:	5f 90       	pop	r5
    2822:	4f 90       	pop	r4
    2824:	3f 90       	pop	r3
    2826:	2f 90       	pop	r2
    2828:	08 95       	ret

0000282a <eeprom_erase>:

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
    282a:	83 e3       	ldi	r24, 0x33	; 51
    282c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	for(uint8_t i = 0; i < 32; i++){
    2830:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    2832:	e0 ec       	ldi	r30, 0xC0	; 192
    2834:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    2836:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    2838:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    283a:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	80 32       	cpi	r24, 0x20	; 32
    2840:	d9 f7       	brne	.-10     	; 0x2838 <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}
	
	NVM.CMD = ERASE_EEPROM;
    2842:	e0 ec       	ldi	r30, 0xC0	; 192
    2844:	f1 e0       	ldi	r31, 0x01	; 1
    2846:	80 e3       	ldi	r24, 0x30	; 48
    2848:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    284a:	88 ed       	ldi	r24, 0xD8	; 216
    284c:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    2852:	87 85       	ldd	r24, Z+15	; 0x0f
    2854:	88 23       	and	r24, r24
    2856:	ec f3       	brlt	.-6      	; 0x2852 <eeprom_erase+0x28>
}
    2858:	08 95       	ret

0000285a <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    285a:	e7 df       	rcall	.-50     	; 0x282a <eeprom_erase>
	
	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    285c:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    285e:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    2860:	98 ed       	ldi	r25, 0xD8	; 216
    2862:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    2864:	91 e0       	ldi	r25, 0x01	; 1
    2866:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
	SREG=oldInterruptState;
    286a:	8f bf       	out	0x3f, r24	; 63
    286c:	08 95       	ret

0000286e <command>:
	TCD1.PER = 184; // 2700hz
	TCD1.CCA = 92;
}

void command(uint8_t c){
	switch(c){
    286e:	84 36       	cpi	r24, 0x64	; 100
    2870:	91 f0       	breq	.+36     	; 0x2896 <command+0x28>
    2872:	28 f4       	brcc	.+10     	; 0x287e <command+0x10>
    2874:	82 36       	cpi	r24, 0x62	; 98
    2876:	69 f0       	breq	.+26     	; 0x2892 <command+0x24>
    2878:	83 36       	cpi	r24, 0x63	; 99
    287a:	49 f0       	breq	.+18     	; 0x288e <command+0x20>
    287c:	08 95       	ret
    287e:	85 36       	cpi	r24, 0x65	; 101
    2880:	21 f0       	breq	.+8      	; 0x288a <command+0x1c>
    2882:	86 36       	cpi	r24, 0x66	; 102
    2884:	49 f4       	brne	.+18     	; 0x2898 <command+0x2a>
		case RESET:
			//printf("RESET\n");
			reset();
    2886:	e9 cf       	rjmp	.-46     	; 0x285a <reset>
			break;
		case CALIBRATE:
			calibrate();
    2888:	08 95       	ret
			//printf("CALIBRATE\n");
			break;
    288a:	eb c9       	rjmp	.-3114   	; 0x1c62 <calibrate>
		case CALIBRATE_ALTITUDE:
			cali_alt();
    288c:	08 95       	ret
			//printf("CALIBRATE_ALTITUDE\n");
			break;
		case CALIBRATE_ANGLE:
			cali_ang();
    288e:	ad c9       	rjmp	.-3238   	; 0x1bea <cali_alt>
    2890:	08 95       	ret
			//printf("CALIBRATE_ANGLE\n");
			break;
    2892:	c8 c9       	rjmp	.-3184   	; 0x1c24 <cali_ang>
		case SERVO_RELEASE:
			servo_release();
			//printf("SEND_GPS_LOCATION\n");
			break;
		case PACKET:
			packet();
    2894:	08 95       	ret
    2896:	e8 c9       	rjmp	.-3120   	; 0x1c68 <packet>
    2898:	08 95       	ret

0000289a <main>:

char* format = "5343,%i,%i,%i,%li,%i,%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n\0";


////////////////////////////// Functions ///////////////////////////////
int main(void){
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	c8 56       	subi	r28, 0x68	; 104
    28a4:	d1 09       	sbc	r29, r1
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	de bf       	out	0x3e, r29	; 62
	system_init();
    28aa:	2c dd       	rcall	.-1448   	; 0x2304 <system_init>
	//delay_ms(100);
	
	PORTD.DIR |= PIN3_bm;
    28ac:	e0 e6       	ldi	r30, 0x60	; 96
    28ae:	f6 e0       	ldi	r31, 0x06	; 6
    28b0:	80 81       	ld	r24, Z
    28b2:	88 60       	ori	r24, 0x08	; 8
    28b4:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    28b6:	84 81       	ldd	r24, Z+4	; 0x04
    28b8:	88 60       	ori	r24, 0x08	; 8
    28ba:	84 83       	std	Z+4, r24	; 0x04
	
	//printf("Initialized\n");
	//buzzer_init();
	
	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    28bc:	14 e1       	ldi	r17, 0x14	; 20
    28be:	be 01       	movw	r22, r28
    28c0:	6f 5f       	subi	r22, 0xFF	; 255
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	fb 01       	movw	r30, r22
    28c6:	81 2f       	mov	r24, r17
    28c8:	11 92       	st	Z+, r1
    28ca:	8a 95       	dec	r24
    28cc:	e9 f7       	brne	.-6      	; 0x28c8 <main+0x2e>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    28ce:	4a e0       	ldi	r20, 0x0A	; 10
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	ce 01       	movw	r24, r28
    28d4:	45 96       	adiw	r24, 0x15	; 21
    28d6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <rb16_init>
	
	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    28da:	be 01       	movw	r22, r28
    28dc:	63 5e       	subi	r22, 0xE3	; 227
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	88 e2       	ldi	r24, 0x28	; 40
    28e2:	fb 01       	movw	r30, r22
    28e4:	11 92       	st	Z+, r1
    28e6:	8a 95       	dec	r24
    28e8:	e9 f7       	brne	.-6      	; 0x28e4 <main+0x4a>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    28ea:	4a e0       	ldi	r20, 0x0A	; 10
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	ce 01       	movw	r24, r28
    28f0:	8b 5b       	subi	r24, 0xBB	; 187
    28f2:	9f 4f       	sbci	r25, 0xFF	; 255
    28f4:	0e 94 3d 08 	call	0x107a	; 0x107a <rb32_init>
	
	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    28f8:	be 01       	movw	r22, r28
    28fa:	63 5b       	subi	r22, 0xB3	; 179
    28fc:	7f 4f       	sbci	r23, 0xFF	; 255
    28fe:	fb 01       	movw	r30, r22
    2900:	11 92       	st	Z+, r1
    2902:	1a 95       	dec	r17
    2904:	e9 f7       	brne	.-6      	; 0x2900 <main+0x66>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    2906:	4a e0       	ldi	r20, 0x0A	; 10
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	ce 01       	movw	r24, r28
    290c:	8f 59       	subi	r24, 0x9F	; 159
    290e:	9f 4f       	sbci	r25, 0xFF	; 255
    2910:	0e 94 b5 07 	call	0xf6a	; 0xf6a <rb16_init>
	
	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    2914:	00 e0       	ldi	r16, 0x00	; 0
	
	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
	
	uint8_t cam_initialized = 0;
    2916:	10 e0       	ldi	r17, 0x00	; 0

	
	while(1){
		//printf("In Loop\n");
		// Check Sensors
		data_collect(&altitudes,&pressures);
    2918:	be 01       	movw	r22, r28
    291a:	6b 5b       	subi	r22, 0xBB	; 187
    291c:	7f 4f       	sbci	r23, 0xFF	; 255
    291e:	ce 01       	movw	r24, r28
    2920:	45 96       	adiw	r24, 0x15	; 21
    2922:	0e 94 14 0c 	call	0x1828	; 0x1828 <data_collect>
		
		state_check();
    2926:	13 d8       	rcall	.-4058   	; 0x194e <state_check>
		
		// IMU Check
		//imu_read();
		 
		//Gives each flight state their unique tasks
		switch(state){
    2928:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <state>
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	31 f0       	breq	.+12     	; 0x293c <main+0xa2>
    2930:	c0 f1       	brcs	.+112    	; 0x29a2 <main+0x108>
    2932:	82 30       	cpi	r24, 0x02	; 2
    2934:	39 f0       	breq	.+14     	; 0x2944 <main+0xaa>
    2936:	83 30       	cpi	r24, 0x03	; 3
    2938:	71 f1       	breq	.+92     	; 0x2996 <main+0xfc>
    293a:	31 c0       	rjmp	.+98     	; 0x299e <main+0x104>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    293c:	11 11       	cpse	r17, r1
    293e:	31 c0       	rjmp	.+98     	; 0x29a2 <main+0x108>
					cam_initialized = 1;
    2940:	11 e0       	ldi	r17, 0x01	; 1
    2942:	2f c0       	rjmp	.+94     	; 0x29a2 <main+0x108>
					//cam_switch();
				}
				break;
			case 2:
				if(!cam_initialized){
    2944:	11 11       	cpse	r17, r1
    2946:	01 c0       	rjmp	.+2      	; 0x294a <main+0xb0>
					cam_initialized = 1;
    2948:	11 e0       	ldi	r17, 0x01	; 1
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
    294a:	60 91 d1 20 	lds	r22, 0x20D1	; 0x8020d1 <alt>
    294e:	70 91 d2 20 	lds	r23, 0x20D2	; 0x8020d2 <alt+0x1>
    2952:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <alt+0x2>
    2956:	90 91 d4 20 	lds	r25, 0x20D4	; 0x8020d4 <alt+0x3>
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	41 ee       	ldi	r20, 0xE1	; 225
    2960:	53 e4       	ldi	r21, 0x43	; 67
    2962:	ae d3       	rcall	.+1884   	; 0x30c0 <__subsf3>
    2964:	b8 d4       	rcall	.+2416   	; 0x32d6 <__fixsfsi>
    2966:	9b 01       	movw	r18, r22
    2968:	77 23       	and	r23, r23
    296a:	24 f4       	brge	.+8      	; 0x2974 <main+0xda>
    296c:	22 27       	eor	r18, r18
    296e:	33 27       	eor	r19, r19
    2970:	26 1b       	sub	r18, r22
    2972:	37 0b       	sbc	r19, r23
    2974:	2a 30       	cpi	r18, 0x0A	; 10
    2976:	31 05       	cpc	r19, r1
    2978:	2c f4       	brge	.+10     	; 0x2984 <main+0xea>
					release();				// Releases the payload
    297a:	0e 94 12 09 	call	0x1224	; 0x1224 <release>
					hall_sensor_init();		// Starts hall effect sensor to read rpm
    297e:	0e 94 90 05 	call	0xb20	; 0xb20 <hall_sensor_init>
    2982:	0f c0       	rjmp	.+30     	; 0x29a2 <main+0x108>
				}
				else if(released){
    2984:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <released>
    2988:	88 23       	and	r24, r24
					servo_pid(&directions);	// Updates the PID
    298a:	59 f0       	breq	.+22     	; 0x29a2 <main+0x108>
    298c:	ce 01       	movw	r24, r28
    298e:	8f 59       	subi	r24, 0x9F	; 159
    2990:	9f 4f       	sbci	r25, 0xFF	; 255
    2992:	8a d8       	rcall	.-3820   	; 0x1aa8 <servo_pid>
    2994:	06 c0       	rjmp	.+12     	; 0x29a2 <main+0x108>
				}
				break;
			case 3:
				if(!buzzer_initialized){
    2996:	01 11       	cpse	r16, r1
    2998:	04 c0       	rjmp	.+8      	; 0x29a2 <main+0x108>
					//buzzer_init();
					buzzer_initialized = 1;
    299a:	01 e0       	ldi	r16, 0x01	; 1
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <main+0x108>
				}
				break;
			default:
				state_check();
    299e:	0e 94 a7 0c 	call	0x194e	; 0x194e <state_check>
				break;
		}
		
		if(time_flag){
    29a2:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <time_flag>
    29a6:	88 23       	and	r24, r24
			time_update();
    29a8:	19 f0       	breq	.+6      	; 0x29b0 <main+0x116>
    29aa:	50 dd       	rcall	.-1376   	; 0x244c <time_update>
			time_flag = 0;
    29ac:	10 92 02 21 	sts	0x2102, r1	; 0x802102 <time_flag>
		}
		if(xbee_flag){
    29b0:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <xbee_flag>
    29b4:	88 23       	and	r24, r24
			command(xbee_comm);
    29b6:	39 f0       	breq	.+14     	; 0x29c6 <main+0x12c>
    29b8:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <xbee_comm>
    29bc:	58 df       	rcall	.-336    	; 0x286e <command>
			xbee_comm = 0;
    29be:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <xbee_comm>
			xbee_flag = 0;
    29c2:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <xbee_flag>
		}
		
		data_packets++;
    29c6:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <data_packets>
    29ca:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <data_packets+0x1>
    29ce:	01 96       	adiw	r24, 0x01	; 1
    29d0:	80 93 df 20 	sts	0x20DF, r24	; 0x8020df <data_packets>
    29d4:	90 93 e0 20 	sts	0x20E0, r25	; 0x8020e0 <data_packets+0x1>
		if(timer != 0){
    29d8:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <timer>
    29dc:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <timer+0x1>
    29e0:	89 2b       	or	r24, r25
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <main+0x14c>
    29e4:	99 cf       	rjmp	.-206    	; 0x2918 <main+0x7e>
			rate = data_packets / timer;
    29e6:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <data_packets>
    29ea:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <data_packets+0x1>
    29ee:	60 91 e1 20 	lds	r22, 0x20E1	; 0x8020e1 <timer>
    29f2:	70 91 e2 20 	lds	r23, 0x20E2	; 0x8020e2 <timer+0x1>
    29f6:	3d d7       	rcall	.+3706   	; 0x3872 <__udivmodhi4>
    29f8:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <rate>
    29fc:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <rate+0x1>
    2a00:	8b cf       	rjmp	.-234    	; 0x2918 <main+0x7e>

00002a02 <__vector_47>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

ISR(TCE0_OVF_vect){	
    2a02:	1f 92       	push	r1
    2a04:	0f 92       	push	r0
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	0f 92       	push	r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	08 b6       	in	r0, 0x38	; 56
    2a0e:	0f 92       	push	r0
    2a10:	18 be       	out	0x38, r1	; 56
    2a12:	8f 93       	push	r24
    2a14:	9f 93       	push	r25
	timer++;
    2a16:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <timer>
    2a1a:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <timer+0x1>
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	80 93 e1 20 	sts	0x20E1, r24	; 0x8020e1 <timer>
    2a24:	90 93 e2 20 	sts	0x20E2, r25	; 0x8020e2 <timer+0x1>
	time_flag = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <time_flag>
}
    2a2e:	9f 91       	pop	r25
    2a30:	8f 91       	pop	r24
    2a32:	0f 90       	pop	r0
    2a34:	08 be       	out	0x38, r0	; 56
    2a36:	0f 90       	pop	r0
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	0f 90       	pop	r0
    2a3c:	1f 90       	pop	r1
    2a3e:	18 95       	reti

00002a40 <__vector_58>:

ISR(USARTE0_RXC_vect){
    2a40:	1f 92       	push	r1
    2a42:	0f 92       	push	r0
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	0f 92       	push	r0
    2a48:	11 24       	eor	r1, r1
    2a4a:	08 b6       	in	r0, 0x38	; 56
    2a4c:	0f 92       	push	r0
    2a4e:	18 be       	out	0x38, r1	; 56
    2a50:	09 b6       	in	r0, 0x39	; 57
    2a52:	0f 92       	push	r0
    2a54:	19 be       	out	0x39, r1	; 57
    2a56:	0b b6       	in	r0, 0x3b	; 59
    2a58:	0f 92       	push	r0
    2a5a:	1b be       	out	0x3b, r1	; 59
    2a5c:	2f 93       	push	r18
    2a5e:	3f 93       	push	r19
    2a60:	4f 93       	push	r20
    2a62:	5f 93       	push	r21
    2a64:	6f 93       	push	r22
    2a66:	7f 93       	push	r23
    2a68:	8f 93       	push	r24
    2a6a:	9f 93       	push	r25
    2a6c:	af 93       	push	r26
    2a6e:	bf 93       	push	r27
    2a70:	ef 93       	push	r30
    2a72:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    2a74:	80 ea       	ldi	r24, 0xA0	; 160
    2a76:	9a e0       	ldi	r25, 0x0A	; 10
    2a78:	0e 94 8e 03 	call	0x71c	; 0x71c <usart_getchar>
    2a7c:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <xbee_comm>
	xbee_flag = 1;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <xbee_flag>
}
    2a86:	ff 91       	pop	r31
    2a88:	ef 91       	pop	r30
    2a8a:	bf 91       	pop	r27
    2a8c:	af 91       	pop	r26
    2a8e:	9f 91       	pop	r25
    2a90:	8f 91       	pop	r24
    2a92:	7f 91       	pop	r23
    2a94:	6f 91       	pop	r22
    2a96:	5f 91       	pop	r21
    2a98:	4f 91       	pop	r20
    2a9a:	3f 91       	pop	r19
    2a9c:	2f 91       	pop	r18
    2a9e:	0f 90       	pop	r0
    2aa0:	0b be       	out	0x3b, r0	; 59
    2aa2:	0f 90       	pop	r0
    2aa4:	09 be       	out	0x39, r0	; 57
    2aa6:	0f 90       	pop	r0
    2aa8:	08 be       	out	0x38, r0	; 56
    2aaa:	0f 90       	pop	r0
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	0f 90       	pop	r0
    2ab0:	1f 90       	pop	r1
    2ab2:	18 95       	reti

00002ab4 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    2ab4:	1f 92       	push	r1
    2ab6:	0f 92       	push	r0
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	0f 92       	push	r0
    2abc:	11 24       	eor	r1, r1
    2abe:	08 b6       	in	r0, 0x38	; 56
    2ac0:	0f 92       	push	r0
    2ac2:	18 be       	out	0x38, r1	; 56
    2ac4:	09 b6       	in	r0, 0x39	; 57
    2ac6:	0f 92       	push	r0
    2ac8:	19 be       	out	0x39, r1	; 57
    2aca:	0a b6       	in	r0, 0x3a	; 58
    2acc:	0f 92       	push	r0
    2ace:	1a be       	out	0x3a, r1	; 58
    2ad0:	0b b6       	in	r0, 0x3b	; 59
    2ad2:	0f 92       	push	r0
    2ad4:	1b be       	out	0x3b, r1	; 59
    2ad6:	8f 92       	push	r8
    2ad8:	9f 92       	push	r9
    2ada:	af 92       	push	r10
    2adc:	bf 92       	push	r11
    2ade:	cf 92       	push	r12
    2ae0:	df 92       	push	r13
    2ae2:	ef 92       	push	r14
    2ae4:	ff 92       	push	r15
    2ae6:	1f 93       	push	r17
    2ae8:	2f 93       	push	r18
    2aea:	3f 93       	push	r19
    2aec:	4f 93       	push	r20
    2aee:	5f 93       	push	r21
    2af0:	6f 93       	push	r22
    2af2:	7f 93       	push	r23
    2af4:	8f 93       	push	r24
    2af6:	9f 93       	push	r25
    2af8:	af 93       	push	r26
    2afa:	bf 93       	push	r27
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <__vector_91+0x52>
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <__vector_91+0x54>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    2b0c:	80 eb       	ldi	r24, 0xB0	; 176
    2b0e:	99 e0       	ldi	r25, 0x09	; 9
    2b10:	0e 94 8e 03 	call	0x71c	; 0x71c <usart_getchar>
    2b14:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    2b16:	84 32       	cpi	r24, 0x24	; 36
    2b18:	51 f4       	brne	.+20     	; 0x2b2e <__vector_91+0x7a>
		writing = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <writing>
		pos = 0;
    2b20:	10 92 e6 20 	sts	0x20E6, r1	; 0x8020e6 <pos>
		word_pos = 0;
    2b24:	10 92 e5 20 	sts	0x20E5, r1	; 0x8020e5 <word_pos>
		commas = 0;
    2b28:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <commas>
    2b2c:	5a c2       	rjmp	.+1204   	; 0x2fe2 <__vector_91+0x52e>
	}
	else if(c == (uint8_t) '*'){
    2b2e:	8a 32       	cpi	r24, 0x2A	; 42
    2b30:	29 f4       	brne	.+10     	; 0x2b3c <__vector_91+0x88>
		commas = 0;
    2b32:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <commas>
		writing = 0;
    2b36:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <writing>
    2b3a:	53 c2       	rjmp	.+1190   	; 0x2fe2 <__vector_91+0x52e>
	}
	else if(c == (uint8_t) ','){
    2b3c:	8c 32       	cpi	r24, 0x2C	; 44
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <__vector_91+0x8e>
    2b40:	50 c2       	rjmp	.+1184   	; 0x2fe2 <__vector_91+0x52e>
		gps[0] = 32;
    2b42:	ec e3       	ldi	r30, 0x3C	; 60
    2b44:	f1 e2       	ldi	r31, 0x21	; 33
    2b46:	80 e2       	ldi	r24, 0x20	; 32
    2b48:	80 83       	st	Z, r24
		if(gps[1] == 32){
    2b4a:	81 81       	ldd	r24, Z+1	; 0x01
    2b4c:	80 32       	cpi	r24, 0x20	; 32
    2b4e:	09 f0       	breq	.+2      	; 0x2b52 <__vector_91+0x9e>
    2b50:	77 c2       	rjmp	.+1262   	; 0x3040 <__vector_91+0x58c>
			gps[0] = '0';
    2b52:	80 e3       	ldi	r24, 0x30	; 48
    2b54:	80 93 3c 21 	sts	0x213C, r24	; 0x80213c <gps>
    2b58:	73 c2       	rjmp	.+1254   	; 0x3040 <__vector_91+0x58c>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2b5a:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <gps>
    2b5e:	8e 32       	cpi	r24, 0x2E	; 46
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <__vector_91+0xb0>
    2b62:	a3 c1       	rjmp	.+838    	; 0x2eaa <__vector_91+0x3f6>
    2b64:	a9 c1       	rjmp	.+850    	; 0x2eb8 <__vector_91+0x404>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2b66:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <gps>
    2b6a:	8e 32       	cpi	r24, 0x2E	; 46
    2b6c:	09 f0       	breq	.+2      	; 0x2b70 <__vector_91+0xbc>
    2b6e:	ef c0       	rjmp	.+478    	; 0x2d4e <__vector_91+0x29a>
    2b70:	f5 c0       	rjmp	.+490    	; 0x2d5c <__vector_91+0x2a8>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2b72:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <gps>
    2b76:	8e 32       	cpi	r24, 0x2E	; 46
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <__vector_91+0xc8>
    2b7a:	52 c0       	rjmp	.+164    	; 0x2c20 <__vector_91+0x16c>
    2b7c:	58 c0       	rjmp	.+176    	; 0x2c2e <__vector_91+0x17a>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2b7e:	91 91       	ld	r25, Z+
    2b80:	9e 32       	cpi	r25, 0x2E	; 46
    2b82:	29 f4       	brne	.+10     	; 0x2b8e <__vector_91+0xda>
    2b84:	01 c0       	rjmp	.+2      	; 0x2b88 <__vector_91+0xd4>
    2b86:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2b88:	80 93 e3 20 	sts	0x20E3, r24	; 0x8020e3 <idx>
						break;
    2b8c:	03 c0       	rjmp	.+6      	; 0x2b94 <__vector_91+0xe0>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	8f 30       	cpi	r24, 0x0F	; 15
    2b92:	a9 f7       	brne	.-22     	; 0x2b7e <__vector_91+0xca>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2b94:	e0 91 e3 20 	lds	r30, 0x20E3	; 0x8020e3 <idx>
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	e4 5c       	subi	r30, 0xC4	; 196
    2b9c:	fe 4d       	sbci	r31, 0xDE	; 222
    2b9e:	80 e2       	ldi	r24, 0x20	; 32
    2ba0:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2ba2:	20 91 e3 20 	lds	r18, 0x20E3	; 0x8020e3 <idx>
    2ba6:	2f 5f       	subi	r18, 0xFF	; 255
    2ba8:	2f 30       	cpi	r18, 0x0F	; 15
    2baa:	c8 f4       	brcc	.+50     	; 0x2bde <__vector_91+0x12a>
					if(gps[i] == 32){
    2bac:	82 2f       	mov	r24, r18
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	e4 5c       	subi	r30, 0xC4	; 196
    2bb4:	fe 4d       	sbci	r31, 0xDE	; 222
    2bb6:	30 81       	ld	r19, Z
    2bb8:	30 32       	cpi	r19, 0x20	; 32
    2bba:	89 f0       	breq	.+34     	; 0x2bde <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	08 c0       	rjmp	.+16     	; 0x2bd0 <__vector_91+0x11c>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2bc0:	82 2f       	mov	r24, r18
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	e4 5c       	subi	r30, 0xC4	; 196
    2bc8:	fe 4d       	sbci	r31, 0xDE	; 222
    2bca:	30 81       	ld	r19, Z
    2bcc:	30 32       	cpi	r19, 0x20	; 32
    2bce:	39 f0       	breq	.+14     	; 0x2bde <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	e4 5c       	subi	r30, 0xC4	; 196
    2bd4:	fe 4d       	sbci	r31, 0xDE	; 222
    2bd6:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2bd8:	2f 5f       	subi	r18, 0xFF	; 255
    2bda:	2f 30       	cpi	r18, 0x0F	; 15
    2bdc:	89 f7       	brne	.-30     	; 0x2bc0 <__vector_91+0x10c>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    2bde:	ce 01       	movw	r24, r28
    2be0:	01 96       	adiw	r24, 0x01	; 1
    2be2:	9f 93       	push	r25
    2be4:	8f 93       	push	r24
    2be6:	84 e9       	ldi	r24, 0x94	; 148
    2be8:	90 e2       	ldi	r25, 0x20	; 32
    2bea:	9f 93       	push	r25
    2bec:	8f 93       	push	r24
    2bee:	8c e3       	ldi	r24, 0x3C	; 60
    2bf0:	91 e2       	ldi	r25, 0x21	; 33
    2bf2:	9f 93       	push	r25
    2bf4:	8f 93       	push	r24
    2bf6:	5e d7       	rcall	.+3772   	; 0x3ab4 <sscanf>
				gps_t = (double) val;
    2bf8:	69 81       	ldd	r22, Y+1	; 0x01
    2bfa:	7a 81       	ldd	r23, Y+2	; 0x02
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2c00:	9d d3       	rcall	.+1850   	; 0x333c <__floatsisf>
    2c02:	60 93 c5 20 	sts	0x20C5, r22	; 0x8020c5 <gps_t>
    2c06:	70 93 c6 20 	sts	0x20C6, r23	; 0x8020c6 <gps_t+0x1>
    2c0a:	80 93 c7 20 	sts	0x20C7, r24	; 0x8020c7 <gps_t+0x2>
    2c0e:	90 93 c8 20 	sts	0x20C8, r25	; 0x8020c8 <gps_t+0x3>
				break;
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	c3 c1       	rjmp	.+902    	; 0x2fa6 <__vector_91+0x4f2>
    2c20:	ed e3       	ldi	r30, 0x3D	; 61
    2c22:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2c24:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2c26:	91 91       	ld	r25, Z+
    2c28:	9e 32       	cpi	r25, 0x2E	; 46
    2c2a:	29 f4       	brne	.+10     	; 0x2c36 <__vector_91+0x182>
    2c2c:	01 c0       	rjmp	.+2      	; 0x2c30 <__vector_91+0x17c>
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2c30:	80 93 e3 20 	sts	0x20E3, r24	; 0x8020e3 <idx>
						break;
    2c34:	03 c0       	rjmp	.+6      	; 0x2c3c <__vector_91+0x188>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2c36:	8f 5f       	subi	r24, 0xFF	; 255
    2c38:	8f 30       	cpi	r24, 0x0F	; 15
    2c3a:	a9 f7       	brne	.-22     	; 0x2c26 <__vector_91+0x172>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2c3c:	e0 91 e3 20 	lds	r30, 0x20E3	; 0x8020e3 <idx>
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	e4 5c       	subi	r30, 0xC4	; 196
    2c44:	fe 4d       	sbci	r31, 0xDE	; 222
    2c46:	80 e2       	ldi	r24, 0x20	; 32
    2c48:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2c4a:	20 91 e3 20 	lds	r18, 0x20E3	; 0x8020e3 <idx>
    2c4e:	2f 5f       	subi	r18, 0xFF	; 255
    2c50:	2f 30       	cpi	r18, 0x0F	; 15
    2c52:	08 f5       	brcc	.+66     	; 0x2c96 <__vector_91+0x1e2>
					if(gps[i] == 32){
    2c54:	82 2f       	mov	r24, r18
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	fc 01       	movw	r30, r24
    2c5a:	e4 5c       	subi	r30, 0xC4	; 196
    2c5c:	fe 4d       	sbci	r31, 0xDE	; 222
    2c5e:	30 81       	ld	r19, Z
    2c60:	30 32       	cpi	r19, 0x20	; 32
    2c62:	c9 f0       	breq	.+50     	; 0x2c96 <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2c64:	50 e2       	ldi	r21, 0x20	; 32
    2c66:	08 c0       	rjmp	.+16     	; 0x2c78 <__vector_91+0x1c4>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2c68:	82 2f       	mov	r24, r18
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e4 5c       	subi	r30, 0xC4	; 196
    2c70:	fe 4d       	sbci	r31, 0xDE	; 222
    2c72:	30 81       	ld	r19, Z
    2c74:	30 32       	cpi	r19, 0x20	; 32
    2c76:	79 f0       	breq	.+30     	; 0x2c96 <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
    2c78:	40 91 e3 20 	lds	r20, 0x20E3	; 0x8020e3 <idx>
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	e4 1b       	sub	r30, r20
    2c80:	f1 09       	sbc	r31, r1
    2c82:	e6 5b       	subi	r30, 0xB6	; 182
    2c84:	fe 4d       	sbci	r31, 0xDE	; 222
    2c86:	30 83       	st	Z, r19
					gps[i] = 32;
    2c88:	fc 01       	movw	r30, r24
    2c8a:	e4 5c       	subi	r30, 0xC4	; 196
    2c8c:	fe 4d       	sbci	r31, 0xDE	; 222
    2c8e:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2c90:	2f 5f       	subi	r18, 0xFF	; 255
    2c92:	2f 30       	cpi	r18, 0x0F	; 15
    2c94:	49 f7       	brne	.-46     	; 0x2c68 <__vector_91+0x1b4>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2c96:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <dec>
    2c9a:	80 32       	cpi	r24, 0x20	; 32
    2c9c:	19 f4       	brne	.+6      	; 0x2ca4 <__vector_91+0x1f0>
					dec[0] = '0';
    2c9e:	80 e3       	ldi	r24, 0x30	; 48
    2ca0:	80 93 4b 21 	sts	0x214B, r24	; 0x80214b <dec>
				}
				sscanf(gps,"%ld",&val);
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	9f 93       	push	r25
    2caa:	8f 93       	push	r24
    2cac:	84 e9       	ldi	r24, 0x94	; 148
    2cae:	90 e2       	ldi	r25, 0x20	; 32
    2cb0:	9f 93       	push	r25
    2cb2:	8f 93       	push	r24
    2cb4:	8c e3       	ldi	r24, 0x3C	; 60
    2cb6:	91 e2       	ldi	r25, 0x21	; 33
    2cb8:	9f 93       	push	r25
    2cba:	8f 93       	push	r24
    2cbc:	fb d6       	rcall	.+3574   	; 0x3ab4 <sscanf>
				sscanf(dec,"%d",&val2);
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	05 96       	adiw	r24, 0x05	; 5
    2cc2:	9f 93       	push	r25
    2cc4:	8f 93       	push	r24
    2cc6:	88 e9       	ldi	r24, 0x98	; 152
    2cc8:	90 e2       	ldi	r25, 0x20	; 32
    2cca:	9f 93       	push	r25
    2ccc:	8f 93       	push	r24
    2cce:	8b e4       	ldi	r24, 0x4B	; 75
    2cd0:	91 e2       	ldi	r25, 0x21	; 33
    2cd2:	9f 93       	push	r25
    2cd4:	8f 93       	push	r24
    2cd6:	ee d6       	rcall	.+3548   	; 0x3ab4 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    2cd8:	89 80       	ldd	r8, Y+1	; 0x01
    2cda:	9a 80       	ldd	r9, Y+2	; 0x02
    2cdc:	ab 80       	ldd	r10, Y+3	; 0x03
    2cde:	bc 80       	ldd	r11, Y+4	; 0x04
    2ce0:	6d 81       	ldd	r22, Y+5	; 0x05
    2ce2:	7e 81       	ldd	r23, Y+6	; 0x06
    2ce4:	07 2e       	mov	r0, r23
    2ce6:	00 0c       	add	r0, r0
    2ce8:	88 0b       	sbc	r24, r24
    2cea:	99 0b       	sbc	r25, r25
    2cec:	27 d3       	rcall	.+1614   	; 0x333c <__floatsisf>
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e4       	ldi	r19, 0x40	; 64
    2cf2:	4c e1       	ldi	r20, 0x1C	; 28
    2cf4:	56 e4       	ldi	r21, 0x46	; 70
    2cf6:	4d d2       	rcall	.+1178   	; 0x3192 <__divsf3>
    2cf8:	6b 01       	movw	r12, r22
    2cfa:	7c 01       	movw	r14, r24
    2cfc:	c5 01       	movw	r24, r10
    2cfe:	b4 01       	movw	r22, r8
    2d00:	24 e6       	ldi	r18, 0x64	; 100
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	fd d5       	rcall	.+3066   	; 0x3904 <__divmodsi4>
    2d0a:	49 01       	movw	r8, r18
    2d0c:	5a 01       	movw	r10, r20
    2d0e:	16 d3       	rcall	.+1580   	; 0x333c <__floatsisf>
    2d10:	9b 01       	movw	r18, r22
    2d12:	ac 01       	movw	r20, r24
    2d14:	c7 01       	movw	r24, r14
    2d16:	b6 01       	movw	r22, r12
    2d18:	d4 d1       	rcall	.+936    	; 0x30c2 <__addsf3>
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e7       	ldi	r20, 0x70	; 112
    2d20:	52 e4       	ldi	r21, 0x42	; 66
    2d22:	37 d2       	rcall	.+1134   	; 0x3192 <__divsf3>
    2d24:	6b 01       	movw	r12, r22
    2d26:	7c 01       	movw	r14, r24
    2d28:	c5 01       	movw	r24, r10
    2d2a:	b4 01       	movw	r22, r8
    2d2c:	07 d3       	rcall	.+1550   	; 0x333c <__floatsisf>
    2d2e:	9b 01       	movw	r18, r22
    2d30:	ac 01       	movw	r20, r24
    2d32:	c7 01       	movw	r24, r14
    2d34:	b6 01       	movw	r22, r12
    2d36:	c5 d1       	rcall	.+906    	; 0x30c2 <__addsf3>
    2d38:	60 93 c1 20 	sts	0x20C1, r22	; 0x8020c1 <gps_lat>
    2d3c:	70 93 c2 20 	sts	0x20C2, r23	; 0x8020c2 <gps_lat+0x1>
    2d40:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <gps_lat+0x2>
    2d44:	90 93 c4 20 	sts	0x20C4, r25	; 0x8020c4 <gps_lat+0x3>
				break;
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	2c c1       	rjmp	.+600    	; 0x2fa6 <__vector_91+0x4f2>
    2d4e:	ed e3       	ldi	r30, 0x3D	; 61
    2d50:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2d52:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2d54:	91 91       	ld	r25, Z+
    2d56:	9e 32       	cpi	r25, 0x2E	; 46
    2d58:	29 f4       	brne	.+10     	; 0x2d64 <__vector_91+0x2b0>
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <__vector_91+0x2aa>
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2d5e:	80 93 e3 20 	sts	0x20E3, r24	; 0x8020e3 <idx>
						break;
    2d62:	03 c0       	rjmp	.+6      	; 0x2d6a <__vector_91+0x2b6>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	8f 30       	cpi	r24, 0x0F	; 15
    2d68:	a9 f7       	brne	.-22     	; 0x2d54 <__vector_91+0x2a0>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2d6a:	e0 91 e3 20 	lds	r30, 0x20E3	; 0x8020e3 <idx>
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	e4 5c       	subi	r30, 0xC4	; 196
    2d72:	fe 4d       	sbci	r31, 0xDE	; 222
    2d74:	80 e2       	ldi	r24, 0x20	; 32
    2d76:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2d78:	20 91 e3 20 	lds	r18, 0x20E3	; 0x8020e3 <idx>
    2d7c:	2f 5f       	subi	r18, 0xFF	; 255
    2d7e:	2f 30       	cpi	r18, 0x0F	; 15
    2d80:	08 f5       	brcc	.+66     	; 0x2dc4 <__vector_91+0x310>
					if(gps[i] == 32){
    2d82:	82 2f       	mov	r24, r18
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	fc 01       	movw	r30, r24
    2d88:	e4 5c       	subi	r30, 0xC4	; 196
    2d8a:	fe 4d       	sbci	r31, 0xDE	; 222
    2d8c:	30 81       	ld	r19, Z
    2d8e:	30 32       	cpi	r19, 0x20	; 32
    2d90:	c9 f0       	breq	.+50     	; 0x2dc4 <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2d92:	50 e2       	ldi	r21, 0x20	; 32
    2d94:	08 c0       	rjmp	.+16     	; 0x2da6 <__vector_91+0x2f2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2d96:	82 2f       	mov	r24, r18
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	e4 5c       	subi	r30, 0xC4	; 196
    2d9e:	fe 4d       	sbci	r31, 0xDE	; 222
    2da0:	30 81       	ld	r19, Z
    2da2:	30 32       	cpi	r19, 0x20	; 32
    2da4:	79 f0       	breq	.+30     	; 0x2dc4 <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
    2da6:	40 91 e3 20 	lds	r20, 0x20E3	; 0x8020e3 <idx>
    2daa:	fc 01       	movw	r30, r24
    2dac:	e4 1b       	sub	r30, r20
    2dae:	f1 09       	sbc	r31, r1
    2db0:	e6 5b       	subi	r30, 0xB6	; 182
    2db2:	fe 4d       	sbci	r31, 0xDE	; 222
    2db4:	30 83       	st	Z, r19
					gps[i] = 32;
    2db6:	fc 01       	movw	r30, r24
    2db8:	e4 5c       	subi	r30, 0xC4	; 196
    2dba:	fe 4d       	sbci	r31, 0xDE	; 222
    2dbc:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2dbe:	2f 5f       	subi	r18, 0xFF	; 255
    2dc0:	2f 30       	cpi	r18, 0x0F	; 15
    2dc2:	49 f7       	brne	.-46     	; 0x2d96 <__vector_91+0x2e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2dc4:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <dec>
    2dc8:	80 32       	cpi	r24, 0x20	; 32
    2dca:	19 f4       	brne	.+6      	; 0x2dd2 <__vector_91+0x31e>
					dec[0] = '0';
    2dcc:	80 e3       	ldi	r24, 0x30	; 48
    2dce:	80 93 4b 21 	sts	0x214B, r24	; 0x80214b <dec>
				}
				sscanf(gps,"%ld",&val);
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	9f 93       	push	r25
    2dd8:	8f 93       	push	r24
    2dda:	84 e9       	ldi	r24, 0x94	; 148
    2ddc:	90 e2       	ldi	r25, 0x20	; 32
    2dde:	9f 93       	push	r25
    2de0:	8f 93       	push	r24
    2de2:	8c e3       	ldi	r24, 0x3C	; 60
    2de4:	91 e2       	ldi	r25, 0x21	; 33
    2de6:	9f 93       	push	r25
    2de8:	8f 93       	push	r24
    2dea:	64 d6       	rcall	.+3272   	; 0x3ab4 <sscanf>
				sscanf(dec,"%d",&val2);
    2dec:	ce 01       	movw	r24, r28
    2dee:	05 96       	adiw	r24, 0x05	; 5
    2df0:	9f 93       	push	r25
    2df2:	8f 93       	push	r24
    2df4:	88 e9       	ldi	r24, 0x98	; 152
    2df6:	90 e2       	ldi	r25, 0x20	; 32
    2df8:	9f 93       	push	r25
    2dfa:	8f 93       	push	r24
    2dfc:	8b e4       	ldi	r24, 0x4B	; 75
    2dfe:	91 e2       	ldi	r25, 0x21	; 33
    2e00:	9f 93       	push	r25
    2e02:	8f 93       	push	r24
    2e04:	57 d6       	rcall	.+3246   	; 0x3ab4 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    2e06:	89 80       	ldd	r8, Y+1	; 0x01
    2e08:	9a 80       	ldd	r9, Y+2	; 0x02
    2e0a:	ab 80       	ldd	r10, Y+3	; 0x03
    2e0c:	bc 80       	ldd	r11, Y+4	; 0x04
    2e0e:	6d 81       	ldd	r22, Y+5	; 0x05
    2e10:	7e 81       	ldd	r23, Y+6	; 0x06
    2e12:	07 2e       	mov	r0, r23
    2e14:	00 0c       	add	r0, r0
    2e16:	88 0b       	sbc	r24, r24
    2e18:	99 0b       	sbc	r25, r25
    2e1a:	90 d2       	rcall	.+1312   	; 0x333c <__floatsisf>
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e4       	ldi	r19, 0x40	; 64
    2e20:	4c e1       	ldi	r20, 0x1C	; 28
    2e22:	56 e4       	ldi	r21, 0x46	; 70
    2e24:	b6 d1       	rcall	.+876    	; 0x3192 <__divsf3>
    2e26:	6b 01       	movw	r12, r22
    2e28:	7c 01       	movw	r14, r24
    2e2a:	c5 01       	movw	r24, r10
    2e2c:	b4 01       	movw	r22, r8
    2e2e:	24 e6       	ldi	r18, 0x64	; 100
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	66 d5       	rcall	.+2764   	; 0x3904 <__divmodsi4>
    2e38:	49 01       	movw	r8, r18
    2e3a:	5a 01       	movw	r10, r20
    2e3c:	7f d2       	rcall	.+1278   	; 0x333c <__floatsisf>
    2e3e:	9b 01       	movw	r18, r22
    2e40:	ac 01       	movw	r20, r24
    2e42:	c7 01       	movw	r24, r14
    2e44:	b6 01       	movw	r22, r12
    2e46:	3d d1       	rcall	.+634    	; 0x30c2 <__addsf3>
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e7       	ldi	r20, 0x70	; 112
    2e4e:	52 e4       	ldi	r21, 0x42	; 66
    2e50:	a0 d1       	rcall	.+832    	; 0x3192 <__divsf3>
    2e52:	6b 01       	movw	r12, r22
    2e54:	7c 01       	movw	r14, r24
    2e56:	c5 01       	movw	r24, r10
    2e58:	b4 01       	movw	r22, r8
    2e5a:	70 d2       	rcall	.+1248   	; 0x333c <__floatsisf>
    2e5c:	9b 01       	movw	r18, r22
    2e5e:	ac 01       	movw	r20, r24
    2e60:	c7 01       	movw	r24, r14
    2e62:	b6 01       	movw	r22, r12
    2e64:	2e d1       	rcall	.+604    	; 0x30c2 <__addsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	b0 58       	subi	r27, 0x80	; 128
    2e6c:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <gps_long>
    2e70:	90 93 be 20 	sts	0x20BE, r25	; 0x8020be <gps_long+0x1>
    2e74:	a0 93 bf 20 	sts	0x20BF, r26	; 0x8020bf <gps_long+0x2>
    2e78:	b0 93 c0 20 	sts	0x20C0, r27	; 0x8020c0 <gps_long+0x3>
    2e7c:	cd bf       	out	0x3d, r28	; 61
				break;
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	92 c0       	rjmp	.+292    	; 0x2fa6 <__vector_91+0x4f2>
    2e82:	87 eb       	ldi	r24, 0xB7	; 183
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    2e84:	90 e2       	ldi	r25, 0x20	; 32
    2e86:	9f 93       	push	r25
    2e88:	8f 93       	push	r24
    2e8a:	88 e9       	ldi	r24, 0x98	; 152
    2e8c:	90 e2       	ldi	r25, 0x20	; 32
    2e8e:	9f 93       	push	r25
    2e90:	8f 93       	push	r24
    2e92:	8c e3       	ldi	r24, 0x3C	; 60
    2e94:	91 e2       	ldi	r25, 0x21	; 33
    2e96:	9f 93       	push	r25
    2e98:	8f 93       	push	r24
    2e9a:	0c d6       	rcall	.+3096   	; 0x3ab4 <sscanf>
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
				break;
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	7e c0       	rjmp	.+252    	; 0x2fa6 <__vector_91+0x4f2>
    2eaa:	ed e3       	ldi	r30, 0x3D	; 61
    2eac:	f1 e2       	ldi	r31, 0x21	; 33
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2eb2:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    2eb4:	29 f4       	brne	.+10     	; 0x2ec0 <__vector_91+0x40c>
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <__vector_91+0x406>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	80 93 e3 20 	sts	0x20E3, r24	; 0x8020e3 <idx>
						idx = i;
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <__vector_91+0x412>
    2ec0:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    2ec2:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2ec4:	a9 f7       	brne	.-22     	; 0x2eb0 <__vector_91+0x3fc>
    2ec6:	e0 91 e3 20 	lds	r30, 0x20E3	; 0x8020e3 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	e4 5c       	subi	r30, 0xC4	; 196
    2ece:	fe 4d       	sbci	r31, 0xDE	; 222
    2ed0:	80 e2       	ldi	r24, 0x20	; 32
    2ed2:	80 83       	st	Z, r24
    2ed4:	20 91 e3 20 	lds	r18, 0x20E3	; 0x8020e3 <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    2ed8:	2f 5f       	subi	r18, 0xFF	; 255
    2eda:	2f 30       	cpi	r18, 0x0F	; 15
    2edc:	08 f5       	brcc	.+66     	; 0x2f20 <__vector_91+0x46c>
    2ede:	82 2f       	mov	r24, r18
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	e4 5c       	subi	r30, 0xC4	; 196
    2ee6:	fe 4d       	sbci	r31, 0xDE	; 222
    2ee8:	30 81       	ld	r19, Z
    2eea:	30 32       	cpi	r19, 0x20	; 32
    2eec:	c9 f0       	breq	.+50     	; 0x2f20 <__vector_91+0x46c>
    2eee:	50 e2       	ldi	r21, 0x20	; 32
    2ef0:	08 c0       	rjmp	.+16     	; 0x2f02 <__vector_91+0x44e>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2ef2:	82 2f       	mov	r24, r18
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	e4 5c       	subi	r30, 0xC4	; 196
    2efa:	fe 4d       	sbci	r31, 0xDE	; 222
    2efc:	30 81       	ld	r19, Z
    2efe:	30 32       	cpi	r19, 0x20	; 32
    2f00:	79 f0       	breq	.+30     	; 0x2f20 <__vector_91+0x46c>
    2f02:	40 91 e3 20 	lds	r20, 0x20E3	; 0x8020e3 <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    2f06:	fc 01       	movw	r30, r24
    2f08:	e4 1b       	sub	r30, r20
    2f0a:	f1 09       	sbc	r31, r1
    2f0c:	e6 5b       	subi	r30, 0xB6	; 182
    2f0e:	fe 4d       	sbci	r31, 0xDE	; 222
    2f10:	30 83       	st	Z, r19
    2f12:	fc 01       	movw	r30, r24
    2f14:	e4 5c       	subi	r30, 0xC4	; 196
					gps[i] = 32;
    2f16:	fe 4d       	sbci	r31, 0xDE	; 222
    2f18:	50 83       	st	Z, r21
    2f1a:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2f1c:	2f 30       	cpi	r18, 0x0F	; 15
    2f1e:	49 f7       	brne	.-46     	; 0x2ef2 <__vector_91+0x43e>
    2f20:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2f24:	80 32       	cpi	r24, 0x20	; 32
    2f26:	19 f4       	brne	.+6      	; 0x2f2e <__vector_91+0x47a>
    2f28:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    2f2a:	80 93 4b 21 	sts	0x214B, r24	; 0x80214b <dec>
    2f2e:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    2f30:	01 96       	adiw	r24, 0x01	; 1
    2f32:	9f 93       	push	r25
    2f34:	8f 93       	push	r24
    2f36:	84 e9       	ldi	r24, 0x94	; 148
    2f38:	90 e2       	ldi	r25, 0x20	; 32
    2f3a:	9f 93       	push	r25
    2f3c:	8f 93       	push	r24
    2f3e:	8c e3       	ldi	r24, 0x3C	; 60
    2f40:	91 e2       	ldi	r25, 0x21	; 33
    2f42:	9f 93       	push	r25
    2f44:	8f 93       	push	r24
    2f46:	b6 d5       	rcall	.+2924   	; 0x3ab4 <sscanf>
				sscanf(dec,"%d",&val2);
    2f48:	ce 01       	movw	r24, r28
    2f4a:	05 96       	adiw	r24, 0x05	; 5
    2f4c:	9f 93       	push	r25
    2f4e:	8f 93       	push	r24
    2f50:	88 e9       	ldi	r24, 0x98	; 152
    2f52:	90 e2       	ldi	r25, 0x20	; 32
    2f54:	9f 93       	push	r25
    2f56:	8f 93       	push	r24
    2f58:	8b e4       	ldi	r24, 0x4B	; 75
    2f5a:	91 e2       	ldi	r25, 0x21	; 33
    2f5c:	9f 93       	push	r25
    2f5e:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    2f60:	a9 d5       	rcall	.+2898   	; 0x3ab4 <sscanf>
    2f62:	69 81       	ldd	r22, Y+1	; 0x01
    2f64:	7a 81       	ldd	r23, Y+2	; 0x02
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6a:	e8 d1       	rcall	.+976    	; 0x333c <__floatsisf>
    2f6c:	6b 01       	movw	r12, r22
    2f6e:	7c 01       	movw	r14, r24
    2f70:	6d 81       	ldd	r22, Y+5	; 0x05
    2f72:	7e 81       	ldd	r23, Y+6	; 0x06
    2f74:	07 2e       	mov	r0, r23
    2f76:	00 0c       	add	r0, r0
    2f78:	88 0b       	sbc	r24, r24
    2f7a:	99 0b       	sbc	r25, r25
    2f7c:	df d1       	rcall	.+958    	; 0x333c <__floatsisf>
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e2       	ldi	r20, 0x20	; 32
    2f84:	51 e4       	ldi	r21, 0x41	; 65
    2f86:	05 d1       	rcall	.+522    	; 0x3192 <__divsf3>
    2f88:	9b 01       	movw	r18, r22
    2f8a:	ac 01       	movw	r20, r24
    2f8c:	c7 01       	movw	r24, r14
    2f8e:	b6 01       	movw	r22, r12
    2f90:	98 d0       	rcall	.+304    	; 0x30c2 <__addsf3>
    2f92:	60 93 b9 20 	sts	0x20B9, r22	; 0x8020b9 <gps_alt>
    2f96:	70 93 ba 20 	sts	0x20BA, r23	; 0x8020ba <gps_alt+0x1>
    2f9a:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <gps_alt+0x2>
    2f9e:	90 93 bc 20 	sts	0x20BC, r25	; 0x8020bc <gps_alt+0x3>
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	80 91 e7 20 	lds	r24, 0x20E7	; 0x8020e7 <writing>
				break;
    2faa:	88 23       	and	r24, r24
		}
	
		if(writing){
    2fac:	d1 f0       	breq	.+52     	; 0x2fe2 <__vector_91+0x52e>
    2fae:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <idx>
    2fb2:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <commas>
			idx = 0;
    2fb6:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    2fb8:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <commas>
    2fbc:	10 92 e5 20 	sts	0x20E5, r1	; 0x8020e5 <word_pos>
    2fc0:	ec e3       	ldi	r30, 0x3C	; 60
			word_pos = 0;
    2fc2:	f1 e2       	ldi	r31, 0x21	; 33
    2fc4:	2b e4       	ldi	r18, 0x4B	; 75
    2fc6:	31 e2       	ldi	r19, 0x21	; 33
    2fc8:	80 e2       	ldi	r24, 0x20	; 32
    2fca:	81 93       	st	Z+, r24
    2fcc:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2fce:	3f 07       	cpc	r19, r31
    2fd0:	e1 f7       	brne	.-8      	; 0x2fca <__vector_91+0x516>
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2fd2:	eb e4       	ldi	r30, 0x4B	; 75
    2fd4:	f1 e2       	ldi	r31, 0x21	; 33
    2fd6:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2fd8:	80 83       	st	Z, r24
    2fda:	81 83       	std	Z+1, r24	; 0x01
    2fdc:	82 83       	std	Z+2, r24	; 0x02
    2fde:	83 83       	std	Z+3, r24	; 0x03
    2fe0:	84 83       	std	Z+4, r24	; 0x04
    2fe2:	80 91 e7 20 	lds	r24, 0x20E7	; 0x8020e7 <writing>
    2fe6:	88 23       	and	r24, r24
			}
		}
	}
		
	if(writing){
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <__vector_91+0x538>
    2fea:	43 c0       	rjmp	.+134    	; 0x3072 <__vector_91+0x5be>
    2fec:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <pos>
    2ff0:	83 30       	cpi	r24, 0x03	; 3
		switch(pos){
    2ff2:	19 f0       	breq	.+6      	; 0x2ffa <__vector_91+0x546>
    2ff4:	84 30       	cpi	r24, 0x04	; 4
    2ff6:	31 f0       	breq	.+12     	; 0x3004 <__vector_91+0x550>
    2ff8:	09 c0       	rjmp	.+18     	; 0x300c <__vector_91+0x558>
    2ffa:	17 34       	cpi	r17, 0x47	; 71
    2ffc:	39 f0       	breq	.+14     	; 0x300c <__vector_91+0x558>
    2ffe:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <writing>
			case 3:
				if(c != 'G'){
    3002:	04 c0       	rjmp	.+8      	; 0x300c <__vector_91+0x558>
					writing = 0;
    3004:	17 34       	cpi	r17, 0x47	; 71
    3006:	11 f0       	breq	.+4      	; 0x300c <__vector_91+0x558>
    3008:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <writing>
				}
				break;
				
			case 4:
				if(c != 'G'){
    300c:	e0 91 e5 20 	lds	r30, 0x20E5	; 0x8020e5 <word_pos>
					writing = 0;
    3010:	f0 e0       	ldi	r31, 0x00	; 0
				}
				break;
		}
		gps[word_pos] = c;
    3012:	e4 5c       	subi	r30, 0xC4	; 196
    3014:	fe 4d       	sbci	r31, 0xDE	; 222
    3016:	10 83       	st	Z, r17
    3018:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <word_pos>
    301c:	8f 5f       	subi	r24, 0xFF	; 255
		word_pos++;
    301e:	80 93 e5 20 	sts	0x20E5, r24	; 0x8020e5 <word_pos>
    3022:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <pos>
    3026:	8f 5f       	subi	r24, 0xFF	; 255
		pos++;
    3028:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <pos>
    302c:	22 c0       	rjmp	.+68     	; 0x3072 <__vector_91+0x5be>
    302e:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <gps>
	}
    3032:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    3034:	09 f4       	brne	.+2      	; 0x3038 <__vector_91+0x584>
    3036:	a7 cd       	rjmp	.-1202   	; 0x2b86 <__vector_91+0xd2>
    3038:	ed e3       	ldi	r30, 0x3D	; 61
    303a:	f1 e2       	ldi	r31, 0x21	; 33
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	9f cd       	rjmp	.-1218   	; 0x2b7e <__vector_91+0xca>
    3040:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    3042:	1a 82       	std	Y+2, r1	; 0x02
    3044:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    3046:	1c 82       	std	Y+4, r1	; 0x04
    3048:	1d 82       	std	Y+5, r1	; 0x05
    304a:	1e 82       	std	Y+6, r1	; 0x06
    304c:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <commas>
		int16_t val2 = 0;
    3050:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    3052:	09 f4       	brne	.+2      	; 0x3056 <__vector_91+0x5a2>
    3054:	88 cd       	rjmp	.-1264   	; 0x2b66 <__vector_91+0xb2>
    3056:	30 f4       	brcc	.+12     	; 0x3064 <__vector_91+0x5b0>
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	49 f3       	breq	.-46     	; 0x302e <__vector_91+0x57a>
    305c:	82 30       	cpi	r24, 0x02	; 2
    305e:	09 f4       	brne	.+2      	; 0x3062 <__vector_91+0x5ae>
    3060:	88 cd       	rjmp	.-1264   	; 0x2b72 <__vector_91+0xbe>
    3062:	a1 cf       	rjmp	.-190    	; 0x2fa6 <__vector_91+0x4f2>
    3064:	87 30       	cpi	r24, 0x07	; 7
    3066:	09 f4       	brne	.+2      	; 0x306a <__vector_91+0x5b6>
    3068:	0c cf       	rjmp	.-488    	; 0x2e82 <__vector_91+0x3ce>
    306a:	89 30       	cpi	r24, 0x09	; 9
    306c:	09 f4       	brne	.+2      	; 0x3070 <__vector_91+0x5bc>
    306e:	75 cd       	rjmp	.-1302   	; 0x2b5a <__vector_91+0xa6>
    3070:	9a cf       	rjmp	.-204    	; 0x2fa6 <__vector_91+0x4f2>
    3072:	26 96       	adiw	r28, 0x06	; 6
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	ff 91       	pop	r31
    307e:	ef 91       	pop	r30
    3080:	bf 91       	pop	r27
    3082:	af 91       	pop	r26
    3084:	9f 91       	pop	r25
    3086:	8f 91       	pop	r24
    3088:	7f 91       	pop	r23
    308a:	6f 91       	pop	r22
    308c:	5f 91       	pop	r21
    308e:	4f 91       	pop	r20
    3090:	3f 91       	pop	r19
    3092:	2f 91       	pop	r18
    3094:	1f 91       	pop	r17
    3096:	ff 90       	pop	r15
    3098:	ef 90       	pop	r14
    309a:	df 90       	pop	r13
    309c:	cf 90       	pop	r12
    309e:	bf 90       	pop	r11
    30a0:	af 90       	pop	r10
    30a2:	9f 90       	pop	r9
    30a4:	8f 90       	pop	r8
    30a6:	0f 90       	pop	r0
    30a8:	0b be       	out	0x3b, r0	; 59
    30aa:	0f 90       	pop	r0
    30ac:	0a be       	out	0x3a, r0	; 58
    30ae:	0f 90       	pop	r0
    30b0:	09 be       	out	0x39, r0	; 57
    30b2:	0f 90       	pop	r0
    30b4:	08 be       	out	0x38, r0	; 56
    30b6:	0f 90       	pop	r0
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	0f 90       	pop	r0
    30bc:	1f 90       	pop	r1
    30be:	18 95       	reti

000030c0 <__subsf3>:
    30c0:	50 58       	subi	r21, 0x80	; 128

000030c2 <__addsf3>:
    30c2:	bb 27       	eor	r27, r27
    30c4:	aa 27       	eor	r26, r26
    30c6:	0e d0       	rcall	.+28     	; 0x30e4 <__addsf3x>
    30c8:	bf c1       	rjmp	.+894    	; 0x3448 <__fp_round>
    30ca:	b0 d1       	rcall	.+864    	; 0x342c <__fp_pscA>
    30cc:	30 f0       	brcs	.+12     	; 0x30da <__addsf3+0x18>
    30ce:	b5 d1       	rcall	.+874    	; 0x343a <__fp_pscB>
    30d0:	20 f0       	brcs	.+8      	; 0x30da <__addsf3+0x18>
    30d2:	31 f4       	brne	.+12     	; 0x30e0 <__addsf3+0x1e>
    30d4:	9f 3f       	cpi	r25, 0xFF	; 255
    30d6:	11 f4       	brne	.+4      	; 0x30dc <__addsf3+0x1a>
    30d8:	1e f4       	brtc	.+6      	; 0x30e0 <__addsf3+0x1e>
    30da:	95 c1       	rjmp	.+810    	; 0x3406 <__fp_nan>
    30dc:	0e f4       	brtc	.+2      	; 0x30e0 <__addsf3+0x1e>
    30de:	e0 95       	com	r30
    30e0:	e7 fb       	bst	r30, 7
    30e2:	8b c1       	rjmp	.+790    	; 0x33fa <__fp_inf>

000030e4 <__addsf3x>:
    30e4:	e9 2f       	mov	r30, r25
    30e6:	c1 d1       	rcall	.+898    	; 0x346a <__fp_split3>
    30e8:	80 f3       	brcs	.-32     	; 0x30ca <__addsf3+0x8>
    30ea:	ba 17       	cp	r27, r26
    30ec:	62 07       	cpc	r22, r18
    30ee:	73 07       	cpc	r23, r19
    30f0:	84 07       	cpc	r24, r20
    30f2:	95 07       	cpc	r25, r21
    30f4:	18 f0       	brcs	.+6      	; 0x30fc <__addsf3x+0x18>
    30f6:	71 f4       	brne	.+28     	; 0x3114 <__addsf3x+0x30>
    30f8:	9e f5       	brtc	.+102    	; 0x3160 <__addsf3x+0x7c>
    30fa:	d9 c1       	rjmp	.+946    	; 0x34ae <__fp_zero>
    30fc:	0e f4       	brtc	.+2      	; 0x3100 <__addsf3x+0x1c>
    30fe:	e0 95       	com	r30
    3100:	0b 2e       	mov	r0, r27
    3102:	ba 2f       	mov	r27, r26
    3104:	a0 2d       	mov	r26, r0
    3106:	0b 01       	movw	r0, r22
    3108:	b9 01       	movw	r22, r18
    310a:	90 01       	movw	r18, r0
    310c:	0c 01       	movw	r0, r24
    310e:	ca 01       	movw	r24, r20
    3110:	a0 01       	movw	r20, r0
    3112:	11 24       	eor	r1, r1
    3114:	ff 27       	eor	r31, r31
    3116:	59 1b       	sub	r21, r25
    3118:	99 f0       	breq	.+38     	; 0x3140 <__addsf3x+0x5c>
    311a:	59 3f       	cpi	r21, 0xF9	; 249
    311c:	50 f4       	brcc	.+20     	; 0x3132 <__addsf3x+0x4e>
    311e:	50 3e       	cpi	r21, 0xE0	; 224
    3120:	68 f1       	brcs	.+90     	; 0x317c <__addsf3x+0x98>
    3122:	1a 16       	cp	r1, r26
    3124:	f0 40       	sbci	r31, 0x00	; 0
    3126:	a2 2f       	mov	r26, r18
    3128:	23 2f       	mov	r18, r19
    312a:	34 2f       	mov	r19, r20
    312c:	44 27       	eor	r20, r20
    312e:	58 5f       	subi	r21, 0xF8	; 248
    3130:	f3 cf       	rjmp	.-26     	; 0x3118 <__addsf3x+0x34>
    3132:	46 95       	lsr	r20
    3134:	37 95       	ror	r19
    3136:	27 95       	ror	r18
    3138:	a7 95       	ror	r26
    313a:	f0 40       	sbci	r31, 0x00	; 0
    313c:	53 95       	inc	r21
    313e:	c9 f7       	brne	.-14     	; 0x3132 <__addsf3x+0x4e>
    3140:	7e f4       	brtc	.+30     	; 0x3160 <__addsf3x+0x7c>
    3142:	1f 16       	cp	r1, r31
    3144:	ba 0b       	sbc	r27, r26
    3146:	62 0b       	sbc	r22, r18
    3148:	73 0b       	sbc	r23, r19
    314a:	84 0b       	sbc	r24, r20
    314c:	ba f0       	brmi	.+46     	; 0x317c <__addsf3x+0x98>
    314e:	91 50       	subi	r25, 0x01	; 1
    3150:	a1 f0       	breq	.+40     	; 0x317a <__addsf3x+0x96>
    3152:	ff 0f       	add	r31, r31
    3154:	bb 1f       	adc	r27, r27
    3156:	66 1f       	adc	r22, r22
    3158:	77 1f       	adc	r23, r23
    315a:	88 1f       	adc	r24, r24
    315c:	c2 f7       	brpl	.-16     	; 0x314e <__addsf3x+0x6a>
    315e:	0e c0       	rjmp	.+28     	; 0x317c <__addsf3x+0x98>
    3160:	ba 0f       	add	r27, r26
    3162:	62 1f       	adc	r22, r18
    3164:	73 1f       	adc	r23, r19
    3166:	84 1f       	adc	r24, r20
    3168:	48 f4       	brcc	.+18     	; 0x317c <__addsf3x+0x98>
    316a:	87 95       	ror	r24
    316c:	77 95       	ror	r23
    316e:	67 95       	ror	r22
    3170:	b7 95       	ror	r27
    3172:	f7 95       	ror	r31
    3174:	9e 3f       	cpi	r25, 0xFE	; 254
    3176:	08 f0       	brcs	.+2      	; 0x317a <__addsf3x+0x96>
    3178:	b3 cf       	rjmp	.-154    	; 0x30e0 <__addsf3+0x1e>
    317a:	93 95       	inc	r25
    317c:	88 0f       	add	r24, r24
    317e:	08 f0       	brcs	.+2      	; 0x3182 <__addsf3x+0x9e>
    3180:	99 27       	eor	r25, r25
    3182:	ee 0f       	add	r30, r30
    3184:	97 95       	ror	r25
    3186:	87 95       	ror	r24
    3188:	08 95       	ret

0000318a <__cmpsf2>:
    318a:	13 d1       	rcall	.+550    	; 0x33b2 <__fp_cmp>
    318c:	08 f4       	brcc	.+2      	; 0x3190 <__cmpsf2+0x6>
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	08 95       	ret

00003192 <__divsf3>:
    3192:	0c d0       	rcall	.+24     	; 0x31ac <__divsf3x>
    3194:	59 c1       	rjmp	.+690    	; 0x3448 <__fp_round>
    3196:	51 d1       	rcall	.+674    	; 0x343a <__fp_pscB>
    3198:	40 f0       	brcs	.+16     	; 0x31aa <__divsf3+0x18>
    319a:	48 d1       	rcall	.+656    	; 0x342c <__fp_pscA>
    319c:	30 f0       	brcs	.+12     	; 0x31aa <__divsf3+0x18>
    319e:	21 f4       	brne	.+8      	; 0x31a8 <__divsf3+0x16>
    31a0:	5f 3f       	cpi	r21, 0xFF	; 255
    31a2:	19 f0       	breq	.+6      	; 0x31aa <__divsf3+0x18>
    31a4:	2a c1       	rjmp	.+596    	; 0x33fa <__fp_inf>
    31a6:	51 11       	cpse	r21, r1
    31a8:	83 c1       	rjmp	.+774    	; 0x34b0 <__fp_szero>
    31aa:	2d c1       	rjmp	.+602    	; 0x3406 <__fp_nan>

000031ac <__divsf3x>:
    31ac:	5e d1       	rcall	.+700    	; 0x346a <__fp_split3>
    31ae:	98 f3       	brcs	.-26     	; 0x3196 <__divsf3+0x4>

000031b0 <__divsf3_pse>:
    31b0:	99 23       	and	r25, r25
    31b2:	c9 f3       	breq	.-14     	; 0x31a6 <__divsf3+0x14>
    31b4:	55 23       	and	r21, r21
    31b6:	b1 f3       	breq	.-20     	; 0x31a4 <__divsf3+0x12>
    31b8:	95 1b       	sub	r25, r21
    31ba:	55 0b       	sbc	r21, r21
    31bc:	bb 27       	eor	r27, r27
    31be:	aa 27       	eor	r26, r26
    31c0:	62 17       	cp	r22, r18
    31c2:	73 07       	cpc	r23, r19
    31c4:	84 07       	cpc	r24, r20
    31c6:	38 f0       	brcs	.+14     	; 0x31d6 <__divsf3_pse+0x26>
    31c8:	9f 5f       	subi	r25, 0xFF	; 255
    31ca:	5f 4f       	sbci	r21, 0xFF	; 255
    31cc:	22 0f       	add	r18, r18
    31ce:	33 1f       	adc	r19, r19
    31d0:	44 1f       	adc	r20, r20
    31d2:	aa 1f       	adc	r26, r26
    31d4:	a9 f3       	breq	.-22     	; 0x31c0 <__divsf3_pse+0x10>
    31d6:	33 d0       	rcall	.+102    	; 0x323e <__divsf3_pse+0x8e>
    31d8:	0e 2e       	mov	r0, r30
    31da:	3a f0       	brmi	.+14     	; 0x31ea <__divsf3_pse+0x3a>
    31dc:	e0 e8       	ldi	r30, 0x80	; 128
    31de:	30 d0       	rcall	.+96     	; 0x3240 <__divsf3_pse+0x90>
    31e0:	91 50       	subi	r25, 0x01	; 1
    31e2:	50 40       	sbci	r21, 0x00	; 0
    31e4:	e6 95       	lsr	r30
    31e6:	00 1c       	adc	r0, r0
    31e8:	ca f7       	brpl	.-14     	; 0x31dc <__divsf3_pse+0x2c>
    31ea:	29 d0       	rcall	.+82     	; 0x323e <__divsf3_pse+0x8e>
    31ec:	fe 2f       	mov	r31, r30
    31ee:	27 d0       	rcall	.+78     	; 0x323e <__divsf3_pse+0x8e>
    31f0:	66 0f       	add	r22, r22
    31f2:	77 1f       	adc	r23, r23
    31f4:	88 1f       	adc	r24, r24
    31f6:	bb 1f       	adc	r27, r27
    31f8:	26 17       	cp	r18, r22
    31fa:	37 07       	cpc	r19, r23
    31fc:	48 07       	cpc	r20, r24
    31fe:	ab 07       	cpc	r26, r27
    3200:	b0 e8       	ldi	r27, 0x80	; 128
    3202:	09 f0       	breq	.+2      	; 0x3206 <__divsf3_pse+0x56>
    3204:	bb 0b       	sbc	r27, r27
    3206:	80 2d       	mov	r24, r0
    3208:	bf 01       	movw	r22, r30
    320a:	ff 27       	eor	r31, r31
    320c:	93 58       	subi	r25, 0x83	; 131
    320e:	5f 4f       	sbci	r21, 0xFF	; 255
    3210:	2a f0       	brmi	.+10     	; 0x321c <__divsf3_pse+0x6c>
    3212:	9e 3f       	cpi	r25, 0xFE	; 254
    3214:	51 05       	cpc	r21, r1
    3216:	68 f0       	brcs	.+26     	; 0x3232 <__divsf3_pse+0x82>
    3218:	f0 c0       	rjmp	.+480    	; 0x33fa <__fp_inf>
    321a:	4a c1       	rjmp	.+660    	; 0x34b0 <__fp_szero>
    321c:	5f 3f       	cpi	r21, 0xFF	; 255
    321e:	ec f3       	brlt	.-6      	; 0x321a <__divsf3_pse+0x6a>
    3220:	98 3e       	cpi	r25, 0xE8	; 232
    3222:	dc f3       	brlt	.-10     	; 0x321a <__divsf3_pse+0x6a>
    3224:	86 95       	lsr	r24
    3226:	77 95       	ror	r23
    3228:	67 95       	ror	r22
    322a:	b7 95       	ror	r27
    322c:	f7 95       	ror	r31
    322e:	9f 5f       	subi	r25, 0xFF	; 255
    3230:	c9 f7       	brne	.-14     	; 0x3224 <__divsf3_pse+0x74>
    3232:	88 0f       	add	r24, r24
    3234:	91 1d       	adc	r25, r1
    3236:	96 95       	lsr	r25
    3238:	87 95       	ror	r24
    323a:	97 f9       	bld	r25, 7
    323c:	08 95       	ret
    323e:	e1 e0       	ldi	r30, 0x01	; 1
    3240:	66 0f       	add	r22, r22
    3242:	77 1f       	adc	r23, r23
    3244:	88 1f       	adc	r24, r24
    3246:	bb 1f       	adc	r27, r27
    3248:	62 17       	cp	r22, r18
    324a:	73 07       	cpc	r23, r19
    324c:	84 07       	cpc	r24, r20
    324e:	ba 07       	cpc	r27, r26
    3250:	20 f0       	brcs	.+8      	; 0x325a <__divsf3_pse+0xaa>
    3252:	62 1b       	sub	r22, r18
    3254:	73 0b       	sbc	r23, r19
    3256:	84 0b       	sbc	r24, r20
    3258:	ba 0b       	sbc	r27, r26
    325a:	ee 1f       	adc	r30, r30
    325c:	88 f7       	brcc	.-30     	; 0x3240 <__divsf3_pse+0x90>
    325e:	e0 95       	com	r30
    3260:	08 95       	ret

00003262 <__fixsfdi>:
    3262:	be e3       	ldi	r27, 0x3E	; 62
    3264:	04 d0       	rcall	.+8      	; 0x326e <__fixunssfdi+0x2>
    3266:	08 f4       	brcc	.+2      	; 0x326a <__fixsfdi+0x8>
    3268:	90 e8       	ldi	r25, 0x80	; 128
    326a:	08 95       	ret

0000326c <__fixunssfdi>:
    326c:	bf e3       	ldi	r27, 0x3F	; 63
    326e:	22 27       	eor	r18, r18
    3270:	33 27       	eor	r19, r19
    3272:	a9 01       	movw	r20, r18
    3274:	02 d1       	rcall	.+516    	; 0x347a <__fp_splitA>
    3276:	58 f1       	brcs	.+86     	; 0x32ce <__fixunssfdi+0x62>
    3278:	9f 57       	subi	r25, 0x7F	; 127
    327a:	40 f1       	brcs	.+80     	; 0x32cc <__fixunssfdi+0x60>
    327c:	b9 17       	cp	r27, r25
    327e:	38 f1       	brcs	.+78     	; 0x32ce <__fixunssfdi+0x62>
    3280:	bf e3       	ldi	r27, 0x3F	; 63
    3282:	b9 1b       	sub	r27, r25
    3284:	99 27       	eor	r25, r25
    3286:	b8 50       	subi	r27, 0x08	; 8
    3288:	3a f4       	brpl	.+14     	; 0x3298 <__fixunssfdi+0x2c>
    328a:	66 0f       	add	r22, r22
    328c:	77 1f       	adc	r23, r23
    328e:	88 1f       	adc	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	b3 95       	inc	r27
    3294:	d2 f3       	brmi	.-12     	; 0x328a <__fixunssfdi+0x1e>
    3296:	16 c0       	rjmp	.+44     	; 0x32c4 <__fixunssfdi+0x58>
    3298:	b8 50       	subi	r27, 0x08	; 8
    329a:	4a f0       	brmi	.+18     	; 0x32ae <__fixunssfdi+0x42>
    329c:	23 2f       	mov	r18, r19
    329e:	34 2f       	mov	r19, r20
    32a0:	45 2f       	mov	r20, r21
    32a2:	56 2f       	mov	r21, r22
    32a4:	67 2f       	mov	r22, r23
    32a6:	78 2f       	mov	r23, r24
    32a8:	88 27       	eor	r24, r24
    32aa:	b8 50       	subi	r27, 0x08	; 8
    32ac:	ba f7       	brpl	.-18     	; 0x329c <__fixunssfdi+0x30>
    32ae:	b8 5f       	subi	r27, 0xF8	; 248
    32b0:	49 f0       	breq	.+18     	; 0x32c4 <__fixunssfdi+0x58>
    32b2:	86 95       	lsr	r24
    32b4:	77 95       	ror	r23
    32b6:	67 95       	ror	r22
    32b8:	57 95       	ror	r21
    32ba:	47 95       	ror	r20
    32bc:	37 95       	ror	r19
    32be:	27 95       	ror	r18
    32c0:	ba 95       	dec	r27
    32c2:	b9 f7       	brne	.-18     	; 0x32b2 <__fixunssfdi+0x46>
    32c4:	0e f4       	brtc	.+2      	; 0x32c8 <__fixunssfdi+0x5c>
    32c6:	a2 d0       	rcall	.+324    	; 0x340c <__fp_negdi>
    32c8:	88 94       	clc
    32ca:	08 95       	ret
    32cc:	88 94       	clc
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	70 e0       	ldi	r23, 0x00	; 0
    32d2:	cb 01       	movw	r24, r22
    32d4:	08 95       	ret

000032d6 <__fixsfsi>:
    32d6:	04 d0       	rcall	.+8      	; 0x32e0 <__fixunssfsi>
    32d8:	68 94       	set
    32da:	b1 11       	cpse	r27, r1
    32dc:	e9 c0       	rjmp	.+466    	; 0x34b0 <__fp_szero>
    32de:	08 95       	ret

000032e0 <__fixunssfsi>:
    32e0:	cc d0       	rcall	.+408    	; 0x347a <__fp_splitA>
    32e2:	88 f0       	brcs	.+34     	; 0x3306 <__fixunssfsi+0x26>
    32e4:	9f 57       	subi	r25, 0x7F	; 127
    32e6:	90 f0       	brcs	.+36     	; 0x330c <__fixunssfsi+0x2c>
    32e8:	b9 2f       	mov	r27, r25
    32ea:	99 27       	eor	r25, r25
    32ec:	b7 51       	subi	r27, 0x17	; 23
    32ee:	a0 f0       	brcs	.+40     	; 0x3318 <__fixunssfsi+0x38>
    32f0:	d1 f0       	breq	.+52     	; 0x3326 <__fixunssfsi+0x46>
    32f2:	66 0f       	add	r22, r22
    32f4:	77 1f       	adc	r23, r23
    32f6:	88 1f       	adc	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	1a f0       	brmi	.+6      	; 0x3302 <__fixunssfsi+0x22>
    32fc:	ba 95       	dec	r27
    32fe:	c9 f7       	brne	.-14     	; 0x32f2 <__fixunssfsi+0x12>
    3300:	12 c0       	rjmp	.+36     	; 0x3326 <__fixunssfsi+0x46>
    3302:	b1 30       	cpi	r27, 0x01	; 1
    3304:	81 f0       	breq	.+32     	; 0x3326 <__fixunssfsi+0x46>
    3306:	d3 d0       	rcall	.+422    	; 0x34ae <__fp_zero>
    3308:	b1 e0       	ldi	r27, 0x01	; 1
    330a:	08 95       	ret
    330c:	d0 c0       	rjmp	.+416    	; 0x34ae <__fp_zero>
    330e:	67 2f       	mov	r22, r23
    3310:	78 2f       	mov	r23, r24
    3312:	88 27       	eor	r24, r24
    3314:	b8 5f       	subi	r27, 0xF8	; 248
    3316:	39 f0       	breq	.+14     	; 0x3326 <__fixunssfsi+0x46>
    3318:	b9 3f       	cpi	r27, 0xF9	; 249
    331a:	cc f3       	brlt	.-14     	; 0x330e <__fixunssfsi+0x2e>
    331c:	86 95       	lsr	r24
    331e:	77 95       	ror	r23
    3320:	67 95       	ror	r22
    3322:	b3 95       	inc	r27
    3324:	d9 f7       	brne	.-10     	; 0x331c <__fixunssfsi+0x3c>
    3326:	3e f4       	brtc	.+14     	; 0x3336 <__fixunssfsi+0x56>
    3328:	90 95       	com	r25
    332a:	80 95       	com	r24
    332c:	70 95       	com	r23
    332e:	61 95       	neg	r22
    3330:	7f 4f       	sbci	r23, 0xFF	; 255
    3332:	8f 4f       	sbci	r24, 0xFF	; 255
    3334:	9f 4f       	sbci	r25, 0xFF	; 255
    3336:	08 95       	ret

00003338 <__floatunsisf>:
    3338:	e8 94       	clt
    333a:	09 c0       	rjmp	.+18     	; 0x334e <__floatsisf+0x12>

0000333c <__floatsisf>:
    333c:	97 fb       	bst	r25, 7
    333e:	3e f4       	brtc	.+14     	; 0x334e <__floatsisf+0x12>
    3340:	90 95       	com	r25
    3342:	80 95       	com	r24
    3344:	70 95       	com	r23
    3346:	61 95       	neg	r22
    3348:	7f 4f       	sbci	r23, 0xFF	; 255
    334a:	8f 4f       	sbci	r24, 0xFF	; 255
    334c:	9f 4f       	sbci	r25, 0xFF	; 255
    334e:	99 23       	and	r25, r25
    3350:	a9 f0       	breq	.+42     	; 0x337c <__floatsisf+0x40>
    3352:	f9 2f       	mov	r31, r25
    3354:	96 e9       	ldi	r25, 0x96	; 150
    3356:	bb 27       	eor	r27, r27
    3358:	93 95       	inc	r25
    335a:	f6 95       	lsr	r31
    335c:	87 95       	ror	r24
    335e:	77 95       	ror	r23
    3360:	67 95       	ror	r22
    3362:	b7 95       	ror	r27
    3364:	f1 11       	cpse	r31, r1
    3366:	f8 cf       	rjmp	.-16     	; 0x3358 <__floatsisf+0x1c>
    3368:	fa f4       	brpl	.+62     	; 0x33a8 <__floatsisf+0x6c>
    336a:	bb 0f       	add	r27, r27
    336c:	11 f4       	brne	.+4      	; 0x3372 <__floatsisf+0x36>
    336e:	60 ff       	sbrs	r22, 0
    3370:	1b c0       	rjmp	.+54     	; 0x33a8 <__floatsisf+0x6c>
    3372:	6f 5f       	subi	r22, 0xFF	; 255
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	8f 4f       	sbci	r24, 0xFF	; 255
    3378:	9f 4f       	sbci	r25, 0xFF	; 255
    337a:	16 c0       	rjmp	.+44     	; 0x33a8 <__floatsisf+0x6c>
    337c:	88 23       	and	r24, r24
    337e:	11 f0       	breq	.+4      	; 0x3384 <__floatsisf+0x48>
    3380:	96 e9       	ldi	r25, 0x96	; 150
    3382:	11 c0       	rjmp	.+34     	; 0x33a6 <__floatsisf+0x6a>
    3384:	77 23       	and	r23, r23
    3386:	21 f0       	breq	.+8      	; 0x3390 <__floatsisf+0x54>
    3388:	9e e8       	ldi	r25, 0x8E	; 142
    338a:	87 2f       	mov	r24, r23
    338c:	76 2f       	mov	r23, r22
    338e:	05 c0       	rjmp	.+10     	; 0x339a <__floatsisf+0x5e>
    3390:	66 23       	and	r22, r22
    3392:	71 f0       	breq	.+28     	; 0x33b0 <__floatsisf+0x74>
    3394:	96 e8       	ldi	r25, 0x86	; 134
    3396:	86 2f       	mov	r24, r22
    3398:	70 e0       	ldi	r23, 0x00	; 0
    339a:	60 e0       	ldi	r22, 0x00	; 0
    339c:	2a f0       	brmi	.+10     	; 0x33a8 <__floatsisf+0x6c>
    339e:	9a 95       	dec	r25
    33a0:	66 0f       	add	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	88 1f       	adc	r24, r24
    33a6:	da f7       	brpl	.-10     	; 0x339e <__floatsisf+0x62>
    33a8:	88 0f       	add	r24, r24
    33aa:	96 95       	lsr	r25
    33ac:	87 95       	ror	r24
    33ae:	97 f9       	bld	r25, 7
    33b0:	08 95       	ret

000033b2 <__fp_cmp>:
    33b2:	99 0f       	add	r25, r25
    33b4:	00 08       	sbc	r0, r0
    33b6:	55 0f       	add	r21, r21
    33b8:	aa 0b       	sbc	r26, r26
    33ba:	e0 e8       	ldi	r30, 0x80	; 128
    33bc:	fe ef       	ldi	r31, 0xFE	; 254
    33be:	16 16       	cp	r1, r22
    33c0:	17 06       	cpc	r1, r23
    33c2:	e8 07       	cpc	r30, r24
    33c4:	f9 07       	cpc	r31, r25
    33c6:	c0 f0       	brcs	.+48     	; 0x33f8 <__fp_cmp+0x46>
    33c8:	12 16       	cp	r1, r18
    33ca:	13 06       	cpc	r1, r19
    33cc:	e4 07       	cpc	r30, r20
    33ce:	f5 07       	cpc	r31, r21
    33d0:	98 f0       	brcs	.+38     	; 0x33f8 <__fp_cmp+0x46>
    33d2:	62 1b       	sub	r22, r18
    33d4:	73 0b       	sbc	r23, r19
    33d6:	84 0b       	sbc	r24, r20
    33d8:	95 0b       	sbc	r25, r21
    33da:	39 f4       	brne	.+14     	; 0x33ea <__fp_cmp+0x38>
    33dc:	0a 26       	eor	r0, r26
    33de:	61 f0       	breq	.+24     	; 0x33f8 <__fp_cmp+0x46>
    33e0:	23 2b       	or	r18, r19
    33e2:	24 2b       	or	r18, r20
    33e4:	25 2b       	or	r18, r21
    33e6:	21 f4       	brne	.+8      	; 0x33f0 <__fp_cmp+0x3e>
    33e8:	08 95       	ret
    33ea:	0a 26       	eor	r0, r26
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <__fp_cmp+0x3e>
    33ee:	a1 40       	sbci	r26, 0x01	; 1
    33f0:	a6 95       	lsr	r26
    33f2:	8f ef       	ldi	r24, 0xFF	; 255
    33f4:	81 1d       	adc	r24, r1
    33f6:	81 1d       	adc	r24, r1
    33f8:	08 95       	ret

000033fa <__fp_inf>:
    33fa:	97 f9       	bld	r25, 7
    33fc:	9f 67       	ori	r25, 0x7F	; 127
    33fe:	80 e8       	ldi	r24, 0x80	; 128
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	60 e0       	ldi	r22, 0x00	; 0
    3404:	08 95       	ret

00003406 <__fp_nan>:
    3406:	9f ef       	ldi	r25, 0xFF	; 255
    3408:	80 ec       	ldi	r24, 0xC0	; 192
    340a:	08 95       	ret

0000340c <__fp_negdi>:
    340c:	90 95       	com	r25
    340e:	80 95       	com	r24
    3410:	70 95       	com	r23
    3412:	60 95       	com	r22
    3414:	50 95       	com	r21
    3416:	40 95       	com	r20
    3418:	30 95       	com	r19
    341a:	21 95       	neg	r18
    341c:	3f 4f       	sbci	r19, 0xFF	; 255
    341e:	4f 4f       	sbci	r20, 0xFF	; 255
    3420:	5f 4f       	sbci	r21, 0xFF	; 255
    3422:	6f 4f       	sbci	r22, 0xFF	; 255
    3424:	7f 4f       	sbci	r23, 0xFF	; 255
    3426:	8f 4f       	sbci	r24, 0xFF	; 255
    3428:	9f 4f       	sbci	r25, 0xFF	; 255
    342a:	08 95       	ret

0000342c <__fp_pscA>:
    342c:	00 24       	eor	r0, r0
    342e:	0a 94       	dec	r0
    3430:	16 16       	cp	r1, r22
    3432:	17 06       	cpc	r1, r23
    3434:	18 06       	cpc	r1, r24
    3436:	09 06       	cpc	r0, r25
    3438:	08 95       	ret

0000343a <__fp_pscB>:
    343a:	00 24       	eor	r0, r0
    343c:	0a 94       	dec	r0
    343e:	12 16       	cp	r1, r18
    3440:	13 06       	cpc	r1, r19
    3442:	14 06       	cpc	r1, r20
    3444:	05 06       	cpc	r0, r21
    3446:	08 95       	ret

00003448 <__fp_round>:
    3448:	09 2e       	mov	r0, r25
    344a:	03 94       	inc	r0
    344c:	00 0c       	add	r0, r0
    344e:	11 f4       	brne	.+4      	; 0x3454 <__fp_round+0xc>
    3450:	88 23       	and	r24, r24
    3452:	52 f0       	brmi	.+20     	; 0x3468 <__fp_round+0x20>
    3454:	bb 0f       	add	r27, r27
    3456:	40 f4       	brcc	.+16     	; 0x3468 <__fp_round+0x20>
    3458:	bf 2b       	or	r27, r31
    345a:	11 f4       	brne	.+4      	; 0x3460 <__fp_round+0x18>
    345c:	60 ff       	sbrs	r22, 0
    345e:	04 c0       	rjmp	.+8      	; 0x3468 <__fp_round+0x20>
    3460:	6f 5f       	subi	r22, 0xFF	; 255
    3462:	7f 4f       	sbci	r23, 0xFF	; 255
    3464:	8f 4f       	sbci	r24, 0xFF	; 255
    3466:	9f 4f       	sbci	r25, 0xFF	; 255
    3468:	08 95       	ret

0000346a <__fp_split3>:
    346a:	57 fd       	sbrc	r21, 7
    346c:	90 58       	subi	r25, 0x80	; 128
    346e:	44 0f       	add	r20, r20
    3470:	55 1f       	adc	r21, r21
    3472:	59 f0       	breq	.+22     	; 0x348a <__fp_splitA+0x10>
    3474:	5f 3f       	cpi	r21, 0xFF	; 255
    3476:	71 f0       	breq	.+28     	; 0x3494 <__fp_splitA+0x1a>
    3478:	47 95       	ror	r20

0000347a <__fp_splitA>:
    347a:	88 0f       	add	r24, r24
    347c:	97 fb       	bst	r25, 7
    347e:	99 1f       	adc	r25, r25
    3480:	61 f0       	breq	.+24     	; 0x349a <__fp_splitA+0x20>
    3482:	9f 3f       	cpi	r25, 0xFF	; 255
    3484:	79 f0       	breq	.+30     	; 0x34a4 <__fp_splitA+0x2a>
    3486:	87 95       	ror	r24
    3488:	08 95       	ret
    348a:	12 16       	cp	r1, r18
    348c:	13 06       	cpc	r1, r19
    348e:	14 06       	cpc	r1, r20
    3490:	55 1f       	adc	r21, r21
    3492:	f2 cf       	rjmp	.-28     	; 0x3478 <__fp_split3+0xe>
    3494:	46 95       	lsr	r20
    3496:	f1 df       	rcall	.-30     	; 0x347a <__fp_splitA>
    3498:	08 c0       	rjmp	.+16     	; 0x34aa <__fp_splitA+0x30>
    349a:	16 16       	cp	r1, r22
    349c:	17 06       	cpc	r1, r23
    349e:	18 06       	cpc	r1, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	f1 cf       	rjmp	.-30     	; 0x3486 <__fp_splitA+0xc>
    34a4:	86 95       	lsr	r24
    34a6:	71 05       	cpc	r23, r1
    34a8:	61 05       	cpc	r22, r1
    34aa:	08 94       	sec
    34ac:	08 95       	ret

000034ae <__fp_zero>:
    34ae:	e8 94       	clt

000034b0 <__fp_szero>:
    34b0:	bb 27       	eor	r27, r27
    34b2:	66 27       	eor	r22, r22
    34b4:	77 27       	eor	r23, r23
    34b6:	cb 01       	movw	r24, r22
    34b8:	97 f9       	bld	r25, 7
    34ba:	08 95       	ret

000034bc <__gesf2>:
    34bc:	7a df       	rcall	.-268    	; 0x33b2 <__fp_cmp>
    34be:	08 f4       	brcc	.+2      	; 0x34c2 <__gesf2+0x6>
    34c0:	8f ef       	ldi	r24, 0xFF	; 255
    34c2:	08 95       	ret

000034c4 <__mulsf3>:
    34c4:	0b d0       	rcall	.+22     	; 0x34dc <__mulsf3x>
    34c6:	c0 cf       	rjmp	.-128    	; 0x3448 <__fp_round>
    34c8:	b1 df       	rcall	.-158    	; 0x342c <__fp_pscA>
    34ca:	28 f0       	brcs	.+10     	; 0x34d6 <__mulsf3+0x12>
    34cc:	b6 df       	rcall	.-148    	; 0x343a <__fp_pscB>
    34ce:	18 f0       	brcs	.+6      	; 0x34d6 <__mulsf3+0x12>
    34d0:	95 23       	and	r25, r21
    34d2:	09 f0       	breq	.+2      	; 0x34d6 <__mulsf3+0x12>
    34d4:	92 cf       	rjmp	.-220    	; 0x33fa <__fp_inf>
    34d6:	97 cf       	rjmp	.-210    	; 0x3406 <__fp_nan>
    34d8:	11 24       	eor	r1, r1
    34da:	ea cf       	rjmp	.-44     	; 0x34b0 <__fp_szero>

000034dc <__mulsf3x>:
    34dc:	c6 df       	rcall	.-116    	; 0x346a <__fp_split3>
    34de:	a0 f3       	brcs	.-24     	; 0x34c8 <__mulsf3+0x4>

000034e0 <__mulsf3_pse>:
    34e0:	95 9f       	mul	r25, r21
    34e2:	d1 f3       	breq	.-12     	; 0x34d8 <__mulsf3+0x14>
    34e4:	95 0f       	add	r25, r21
    34e6:	50 e0       	ldi	r21, 0x00	; 0
    34e8:	55 1f       	adc	r21, r21
    34ea:	62 9f       	mul	r22, r18
    34ec:	f0 01       	movw	r30, r0
    34ee:	72 9f       	mul	r23, r18
    34f0:	bb 27       	eor	r27, r27
    34f2:	f0 0d       	add	r31, r0
    34f4:	b1 1d       	adc	r27, r1
    34f6:	63 9f       	mul	r22, r19
    34f8:	aa 27       	eor	r26, r26
    34fa:	f0 0d       	add	r31, r0
    34fc:	b1 1d       	adc	r27, r1
    34fe:	aa 1f       	adc	r26, r26
    3500:	64 9f       	mul	r22, r20
    3502:	66 27       	eor	r22, r22
    3504:	b0 0d       	add	r27, r0
    3506:	a1 1d       	adc	r26, r1
    3508:	66 1f       	adc	r22, r22
    350a:	82 9f       	mul	r24, r18
    350c:	22 27       	eor	r18, r18
    350e:	b0 0d       	add	r27, r0
    3510:	a1 1d       	adc	r26, r1
    3512:	62 1f       	adc	r22, r18
    3514:	73 9f       	mul	r23, r19
    3516:	b0 0d       	add	r27, r0
    3518:	a1 1d       	adc	r26, r1
    351a:	62 1f       	adc	r22, r18
    351c:	83 9f       	mul	r24, r19
    351e:	a0 0d       	add	r26, r0
    3520:	61 1d       	adc	r22, r1
    3522:	22 1f       	adc	r18, r18
    3524:	74 9f       	mul	r23, r20
    3526:	33 27       	eor	r19, r19
    3528:	a0 0d       	add	r26, r0
    352a:	61 1d       	adc	r22, r1
    352c:	23 1f       	adc	r18, r19
    352e:	84 9f       	mul	r24, r20
    3530:	60 0d       	add	r22, r0
    3532:	21 1d       	adc	r18, r1
    3534:	82 2f       	mov	r24, r18
    3536:	76 2f       	mov	r23, r22
    3538:	6a 2f       	mov	r22, r26
    353a:	11 24       	eor	r1, r1
    353c:	9f 57       	subi	r25, 0x7F	; 127
    353e:	50 40       	sbci	r21, 0x00	; 0
    3540:	8a f0       	brmi	.+34     	; 0x3564 <__mulsf3_pse+0x84>
    3542:	e1 f0       	breq	.+56     	; 0x357c <__mulsf3_pse+0x9c>
    3544:	88 23       	and	r24, r24
    3546:	4a f0       	brmi	.+18     	; 0x355a <__mulsf3_pse+0x7a>
    3548:	ee 0f       	add	r30, r30
    354a:	ff 1f       	adc	r31, r31
    354c:	bb 1f       	adc	r27, r27
    354e:	66 1f       	adc	r22, r22
    3550:	77 1f       	adc	r23, r23
    3552:	88 1f       	adc	r24, r24
    3554:	91 50       	subi	r25, 0x01	; 1
    3556:	50 40       	sbci	r21, 0x00	; 0
    3558:	a9 f7       	brne	.-22     	; 0x3544 <__mulsf3_pse+0x64>
    355a:	9e 3f       	cpi	r25, 0xFE	; 254
    355c:	51 05       	cpc	r21, r1
    355e:	70 f0       	brcs	.+28     	; 0x357c <__mulsf3_pse+0x9c>
    3560:	4c cf       	rjmp	.-360    	; 0x33fa <__fp_inf>
    3562:	a6 cf       	rjmp	.-180    	; 0x34b0 <__fp_szero>
    3564:	5f 3f       	cpi	r21, 0xFF	; 255
    3566:	ec f3       	brlt	.-6      	; 0x3562 <__mulsf3_pse+0x82>
    3568:	98 3e       	cpi	r25, 0xE8	; 232
    356a:	dc f3       	brlt	.-10     	; 0x3562 <__mulsf3_pse+0x82>
    356c:	86 95       	lsr	r24
    356e:	77 95       	ror	r23
    3570:	67 95       	ror	r22
    3572:	b7 95       	ror	r27
    3574:	f7 95       	ror	r31
    3576:	e7 95       	ror	r30
    3578:	9f 5f       	subi	r25, 0xFF	; 255
    357a:	c1 f7       	brne	.-16     	; 0x356c <__mulsf3_pse+0x8c>
    357c:	fe 2b       	or	r31, r30
    357e:	88 0f       	add	r24, r24
    3580:	91 1d       	adc	r25, r1
    3582:	96 95       	lsr	r25
    3584:	87 95       	ror	r24
    3586:	97 f9       	bld	r25, 7
    3588:	08 95       	ret

0000358a <pow>:
    358a:	fa 01       	movw	r30, r20
    358c:	ee 0f       	add	r30, r30
    358e:	ff 1f       	adc	r31, r31
    3590:	30 96       	adiw	r30, 0x00	; 0
    3592:	21 05       	cpc	r18, r1
    3594:	31 05       	cpc	r19, r1
    3596:	99 f1       	breq	.+102    	; 0x35fe <pow+0x74>
    3598:	61 15       	cp	r22, r1
    359a:	71 05       	cpc	r23, r1
    359c:	61 f4       	brne	.+24     	; 0x35b6 <pow+0x2c>
    359e:	80 38       	cpi	r24, 0x80	; 128
    35a0:	bf e3       	ldi	r27, 0x3F	; 63
    35a2:	9b 07       	cpc	r25, r27
    35a4:	49 f1       	breq	.+82     	; 0x35f8 <pow+0x6e>
    35a6:	68 94       	set
    35a8:	90 38       	cpi	r25, 0x80	; 128
    35aa:	81 05       	cpc	r24, r1
    35ac:	61 f0       	breq	.+24     	; 0x35c6 <pow+0x3c>
    35ae:	80 38       	cpi	r24, 0x80	; 128
    35b0:	bf ef       	ldi	r27, 0xFF	; 255
    35b2:	9b 07       	cpc	r25, r27
    35b4:	41 f0       	breq	.+16     	; 0x35c6 <pow+0x3c>
    35b6:	99 23       	and	r25, r25
    35b8:	42 f5       	brpl	.+80     	; 0x360a <pow+0x80>
    35ba:	ff 3f       	cpi	r31, 0xFF	; 255
    35bc:	e1 05       	cpc	r30, r1
    35be:	31 05       	cpc	r19, r1
    35c0:	21 05       	cpc	r18, r1
    35c2:	11 f1       	breq	.+68     	; 0x3608 <pow+0x7e>
    35c4:	e8 94       	clt
    35c6:	08 94       	sec
    35c8:	e7 95       	ror	r30
    35ca:	d9 01       	movw	r26, r18
    35cc:	aa 23       	and	r26, r26
    35ce:	29 f4       	brne	.+10     	; 0x35da <pow+0x50>
    35d0:	ab 2f       	mov	r26, r27
    35d2:	be 2f       	mov	r27, r30
    35d4:	f8 5f       	subi	r31, 0xF8	; 248
    35d6:	d0 f3       	brcs	.-12     	; 0x35cc <pow+0x42>
    35d8:	10 c0       	rjmp	.+32     	; 0x35fa <pow+0x70>
    35da:	ff 5f       	subi	r31, 0xFF	; 255
    35dc:	70 f4       	brcc	.+28     	; 0x35fa <pow+0x70>
    35de:	a6 95       	lsr	r26
    35e0:	e0 f7       	brcc	.-8      	; 0x35da <pow+0x50>
    35e2:	f7 39       	cpi	r31, 0x97	; 151
    35e4:	50 f0       	brcs	.+20     	; 0x35fa <pow+0x70>
    35e6:	19 f0       	breq	.+6      	; 0x35ee <pow+0x64>
    35e8:	ff 3a       	cpi	r31, 0xAF	; 175
    35ea:	38 f4       	brcc	.+14     	; 0x35fa <pow+0x70>
    35ec:	9f 77       	andi	r25, 0x7F	; 127
    35ee:	9f 93       	push	r25
    35f0:	0c d0       	rcall	.+24     	; 0x360a <pow+0x80>
    35f2:	0f 90       	pop	r0
    35f4:	07 fc       	sbrc	r0, 7
    35f6:	90 58       	subi	r25, 0x80	; 128
    35f8:	08 95       	ret
    35fa:	3e f0       	brts	.+14     	; 0x360a <pow+0x80>
    35fc:	04 cf       	rjmp	.-504    	; 0x3406 <__fp_nan>
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	80 e8       	ldi	r24, 0x80	; 128
    3604:	9f e3       	ldi	r25, 0x3F	; 63
    3606:	08 95       	ret
    3608:	4f e7       	ldi	r20, 0x7F	; 127
    360a:	9f 77       	andi	r25, 0x7F	; 127
    360c:	5f 93       	push	r21
    360e:	4f 93       	push	r20
    3610:	3f 93       	push	r19
    3612:	2f 93       	push	r18
    3614:	9e d0       	rcall	.+316    	; 0x3752 <log>
    3616:	2f 91       	pop	r18
    3618:	3f 91       	pop	r19
    361a:	4f 91       	pop	r20
    361c:	5f 91       	pop	r21
    361e:	52 df       	rcall	.-348    	; 0x34c4 <__mulsf3>
    3620:	05 c0       	rjmp	.+10     	; 0x362c <exp>
    3622:	19 f4       	brne	.+6      	; 0x362a <pow+0xa0>
    3624:	0e f0       	brts	.+2      	; 0x3628 <pow+0x9e>
    3626:	e9 ce       	rjmp	.-558    	; 0x33fa <__fp_inf>
    3628:	42 cf       	rjmp	.-380    	; 0x34ae <__fp_zero>
    362a:	ed ce       	rjmp	.-550    	; 0x3406 <__fp_nan>

0000362c <exp>:
    362c:	26 df       	rcall	.-436    	; 0x347a <__fp_splitA>
    362e:	c8 f3       	brcs	.-14     	; 0x3622 <pow+0x98>
    3630:	96 38       	cpi	r25, 0x86	; 134
    3632:	c0 f7       	brcc	.-16     	; 0x3624 <pow+0x9a>
    3634:	07 f8       	bld	r0, 7
    3636:	0f 92       	push	r0
    3638:	e8 94       	clt
    363a:	2b e3       	ldi	r18, 0x3B	; 59
    363c:	3a ea       	ldi	r19, 0xAA	; 170
    363e:	48 eb       	ldi	r20, 0xB8	; 184
    3640:	5f e7       	ldi	r21, 0x7F	; 127
    3642:	4e df       	rcall	.-356    	; 0x34e0 <__mulsf3_pse>
    3644:	0f 92       	push	r0
    3646:	0f 92       	push	r0
    3648:	0f 92       	push	r0
    364a:	4d b7       	in	r20, 0x3d	; 61
    364c:	5e b7       	in	r21, 0x3e	; 62
    364e:	0f 92       	push	r0
    3650:	c0 d0       	rcall	.+384    	; 0x37d2 <modf>
    3652:	ec ef       	ldi	r30, 0xFC	; 252
    3654:	f1 e0       	ldi	r31, 0x01	; 1
    3656:	16 d0       	rcall	.+44     	; 0x3684 <__fp_powser>
    3658:	4f 91       	pop	r20
    365a:	5f 91       	pop	r21
    365c:	ef 91       	pop	r30
    365e:	ff 91       	pop	r31
    3660:	e5 95       	asr	r30
    3662:	ee 1f       	adc	r30, r30
    3664:	ff 1f       	adc	r31, r31
    3666:	49 f0       	breq	.+18     	; 0x367a <exp+0x4e>
    3668:	fe 57       	subi	r31, 0x7E	; 126
    366a:	e0 68       	ori	r30, 0x80	; 128
    366c:	44 27       	eor	r20, r20
    366e:	ee 0f       	add	r30, r30
    3670:	44 1f       	adc	r20, r20
    3672:	fa 95       	dec	r31
    3674:	e1 f7       	brne	.-8      	; 0x366e <exp+0x42>
    3676:	41 95       	neg	r20
    3678:	55 0b       	sbc	r21, r21
    367a:	32 d0       	rcall	.+100    	; 0x36e0 <ldexp>
    367c:	0f 90       	pop	r0
    367e:	07 fe       	sbrs	r0, 7
    3680:	26 c0       	rjmp	.+76     	; 0x36ce <inverse>
    3682:	08 95       	ret

00003684 <__fp_powser>:
    3684:	df 93       	push	r29
    3686:	cf 93       	push	r28
    3688:	1f 93       	push	r17
    368a:	0f 93       	push	r16
    368c:	ff 92       	push	r15
    368e:	ef 92       	push	r14
    3690:	df 92       	push	r13
    3692:	7b 01       	movw	r14, r22
    3694:	8c 01       	movw	r16, r24
    3696:	68 94       	set
    3698:	05 c0       	rjmp	.+10     	; 0x36a4 <__fp_powser+0x20>
    369a:	da 2e       	mov	r13, r26
    369c:	ef 01       	movw	r28, r30
    369e:	1e df       	rcall	.-452    	; 0x34dc <__mulsf3x>
    36a0:	fe 01       	movw	r30, r28
    36a2:	e8 94       	clt
    36a4:	a5 91       	lpm	r26, Z+
    36a6:	25 91       	lpm	r18, Z+
    36a8:	35 91       	lpm	r19, Z+
    36aa:	45 91       	lpm	r20, Z+
    36ac:	55 91       	lpm	r21, Z+
    36ae:	ae f3       	brts	.-22     	; 0x369a <__fp_powser+0x16>
    36b0:	ef 01       	movw	r28, r30
    36b2:	18 dd       	rcall	.-1488   	; 0x30e4 <__addsf3x>
    36b4:	fe 01       	movw	r30, r28
    36b6:	97 01       	movw	r18, r14
    36b8:	a8 01       	movw	r20, r16
    36ba:	da 94       	dec	r13
    36bc:	79 f7       	brne	.-34     	; 0x369c <__fp_powser+0x18>
    36be:	df 90       	pop	r13
    36c0:	ef 90       	pop	r14
    36c2:	ff 90       	pop	r15
    36c4:	0f 91       	pop	r16
    36c6:	1f 91       	pop	r17
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <inverse>:
    36ce:	9b 01       	movw	r18, r22
    36d0:	ac 01       	movw	r20, r24
    36d2:	60 e0       	ldi	r22, 0x00	; 0
    36d4:	70 e0       	ldi	r23, 0x00	; 0
    36d6:	80 e8       	ldi	r24, 0x80	; 128
    36d8:	9f e3       	ldi	r25, 0x3F	; 63
    36da:	5b cd       	rjmp	.-1354   	; 0x3192 <__divsf3>
    36dc:	8e ce       	rjmp	.-740    	; 0x33fa <__fp_inf>
    36de:	ac c0       	rjmp	.+344    	; 0x3838 <__fp_mpack>

000036e0 <ldexp>:
    36e0:	cc de       	rcall	.-616    	; 0x347a <__fp_splitA>
    36e2:	e8 f3       	brcs	.-6      	; 0x36de <inverse+0x10>
    36e4:	99 23       	and	r25, r25
    36e6:	d9 f3       	breq	.-10     	; 0x36de <inverse+0x10>
    36e8:	94 0f       	add	r25, r20
    36ea:	51 1d       	adc	r21, r1
    36ec:	bb f3       	brvs	.-18     	; 0x36dc <inverse+0xe>
    36ee:	91 50       	subi	r25, 0x01	; 1
    36f0:	50 40       	sbci	r21, 0x00	; 0
    36f2:	94 f0       	brlt	.+36     	; 0x3718 <ldexp+0x38>
    36f4:	59 f0       	breq	.+22     	; 0x370c <ldexp+0x2c>
    36f6:	88 23       	and	r24, r24
    36f8:	32 f0       	brmi	.+12     	; 0x3706 <ldexp+0x26>
    36fa:	66 0f       	add	r22, r22
    36fc:	77 1f       	adc	r23, r23
    36fe:	88 1f       	adc	r24, r24
    3700:	91 50       	subi	r25, 0x01	; 1
    3702:	50 40       	sbci	r21, 0x00	; 0
    3704:	c1 f7       	brne	.-16     	; 0x36f6 <ldexp+0x16>
    3706:	9e 3f       	cpi	r25, 0xFE	; 254
    3708:	51 05       	cpc	r21, r1
    370a:	44 f7       	brge	.-48     	; 0x36dc <inverse+0xe>
    370c:	88 0f       	add	r24, r24
    370e:	91 1d       	adc	r25, r1
    3710:	96 95       	lsr	r25
    3712:	87 95       	ror	r24
    3714:	97 f9       	bld	r25, 7
    3716:	08 95       	ret
    3718:	5f 3f       	cpi	r21, 0xFF	; 255
    371a:	ac f0       	brlt	.+42     	; 0x3746 <ldexp+0x66>
    371c:	98 3e       	cpi	r25, 0xE8	; 232
    371e:	9c f0       	brlt	.+38     	; 0x3746 <ldexp+0x66>
    3720:	bb 27       	eor	r27, r27
    3722:	86 95       	lsr	r24
    3724:	77 95       	ror	r23
    3726:	67 95       	ror	r22
    3728:	b7 95       	ror	r27
    372a:	08 f4       	brcc	.+2      	; 0x372e <ldexp+0x4e>
    372c:	b1 60       	ori	r27, 0x01	; 1
    372e:	93 95       	inc	r25
    3730:	c1 f7       	brne	.-16     	; 0x3722 <ldexp+0x42>
    3732:	bb 0f       	add	r27, r27
    3734:	58 f7       	brcc	.-42     	; 0x370c <ldexp+0x2c>
    3736:	11 f4       	brne	.+4      	; 0x373c <ldexp+0x5c>
    3738:	60 ff       	sbrs	r22, 0
    373a:	e8 cf       	rjmp	.-48     	; 0x370c <ldexp+0x2c>
    373c:	6f 5f       	subi	r22, 0xFF	; 255
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    3740:	8f 4f       	sbci	r24, 0xFF	; 255
    3742:	9f 4f       	sbci	r25, 0xFF	; 255
    3744:	e3 cf       	rjmp	.-58     	; 0x370c <ldexp+0x2c>
    3746:	b4 ce       	rjmp	.-664    	; 0x34b0 <__fp_szero>
    3748:	0e f0       	brts	.+2      	; 0x374c <ldexp+0x6c>
    374a:	76 c0       	rjmp	.+236    	; 0x3838 <__fp_mpack>
    374c:	5c ce       	rjmp	.-840    	; 0x3406 <__fp_nan>
    374e:	68 94       	set
    3750:	54 ce       	rjmp	.-856    	; 0x33fa <__fp_inf>

00003752 <log>:
    3752:	93 de       	rcall	.-730    	; 0x347a <__fp_splitA>
    3754:	c8 f3       	brcs	.-14     	; 0x3748 <ldexp+0x68>
    3756:	99 23       	and	r25, r25
    3758:	d1 f3       	breq	.-12     	; 0x374e <ldexp+0x6e>
    375a:	c6 f3       	brts	.-16     	; 0x374c <ldexp+0x6c>
    375c:	df 93       	push	r29
    375e:	cf 93       	push	r28
    3760:	1f 93       	push	r17
    3762:	0f 93       	push	r16
    3764:	ff 92       	push	r15
    3766:	c9 2f       	mov	r28, r25
    3768:	dd 27       	eor	r29, r29
    376a:	88 23       	and	r24, r24
    376c:	2a f0       	brmi	.+10     	; 0x3778 <log+0x26>
    376e:	21 97       	sbiw	r28, 0x01	; 1
    3770:	66 0f       	add	r22, r22
    3772:	77 1f       	adc	r23, r23
    3774:	88 1f       	adc	r24, r24
    3776:	da f7       	brpl	.-10     	; 0x376e <log+0x1c>
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	40 e8       	ldi	r20, 0x80	; 128
    377e:	5f eb       	ldi	r21, 0xBF	; 191
    3780:	9f e3       	ldi	r25, 0x3F	; 63
    3782:	88 39       	cpi	r24, 0x98	; 152
    3784:	20 f0       	brcs	.+8      	; 0x378e <log+0x3c>
    3786:	80 3e       	cpi	r24, 0xE0	; 224
    3788:	30 f0       	brcs	.+12     	; 0x3796 <log+0x44>
    378a:	21 96       	adiw	r28, 0x01	; 1
    378c:	8f 77       	andi	r24, 0x7F	; 127
    378e:	99 dc       	rcall	.-1742   	; 0x30c2 <__addsf3>
    3790:	e4 e2       	ldi	r30, 0x24	; 36
    3792:	f2 e0       	ldi	r31, 0x02	; 2
    3794:	03 c0       	rjmp	.+6      	; 0x379c <log+0x4a>
    3796:	95 dc       	rcall	.-1750   	; 0x30c2 <__addsf3>
    3798:	e1 e5       	ldi	r30, 0x51	; 81
    379a:	f2 e0       	ldi	r31, 0x02	; 2
    379c:	73 df       	rcall	.-282    	; 0x3684 <__fp_powser>
    379e:	8b 01       	movw	r16, r22
    37a0:	be 01       	movw	r22, r28
    37a2:	ec 01       	movw	r28, r24
    37a4:	fb 2e       	mov	r15, r27
    37a6:	6f 57       	subi	r22, 0x7F	; 127
    37a8:	71 09       	sbc	r23, r1
    37aa:	75 95       	asr	r23
    37ac:	77 1f       	adc	r23, r23
    37ae:	88 0b       	sbc	r24, r24
    37b0:	99 0b       	sbc	r25, r25
    37b2:	c4 dd       	rcall	.-1144   	; 0x333c <__floatsisf>
    37b4:	28 e1       	ldi	r18, 0x18	; 24
    37b6:	32 e7       	ldi	r19, 0x72	; 114
    37b8:	41 e3       	ldi	r20, 0x31	; 49
    37ba:	5f e3       	ldi	r21, 0x3F	; 63
    37bc:	8f de       	rcall	.-738    	; 0x34dc <__mulsf3x>
    37be:	af 2d       	mov	r26, r15
    37c0:	98 01       	movw	r18, r16
    37c2:	ae 01       	movw	r20, r28
    37c4:	ff 90       	pop	r15
    37c6:	0f 91       	pop	r16
    37c8:	1f 91       	pop	r17
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	8a dc       	rcall	.-1772   	; 0x30e4 <__addsf3x>
    37d0:	3b ce       	rjmp	.-906    	; 0x3448 <__fp_round>

000037d2 <modf>:
    37d2:	fa 01       	movw	r30, r20
    37d4:	dc 01       	movw	r26, r24
    37d6:	aa 0f       	add	r26, r26
    37d8:	bb 1f       	adc	r27, r27
    37da:	9b 01       	movw	r18, r22
    37dc:	ac 01       	movw	r20, r24
    37de:	bf 57       	subi	r27, 0x7F	; 127
    37e0:	28 f4       	brcc	.+10     	; 0x37ec <modf+0x1a>
    37e2:	22 27       	eor	r18, r18
    37e4:	33 27       	eor	r19, r19
    37e6:	44 27       	eor	r20, r20
    37e8:	50 78       	andi	r21, 0x80	; 128
    37ea:	1f c0       	rjmp	.+62     	; 0x382a <modf+0x58>
    37ec:	b7 51       	subi	r27, 0x17	; 23
    37ee:	88 f4       	brcc	.+34     	; 0x3812 <modf+0x40>
    37f0:	ab 2f       	mov	r26, r27
    37f2:	00 24       	eor	r0, r0
    37f4:	46 95       	lsr	r20
    37f6:	37 95       	ror	r19
    37f8:	27 95       	ror	r18
    37fa:	01 1c       	adc	r0, r1
    37fc:	a3 95       	inc	r26
    37fe:	d2 f3       	brmi	.-12     	; 0x37f4 <modf+0x22>
    3800:	00 20       	and	r0, r0
    3802:	69 f0       	breq	.+26     	; 0x381e <modf+0x4c>
    3804:	22 0f       	add	r18, r18
    3806:	33 1f       	adc	r19, r19
    3808:	44 1f       	adc	r20, r20
    380a:	b3 95       	inc	r27
    380c:	da f3       	brmi	.-10     	; 0x3804 <modf+0x32>
    380e:	0d d0       	rcall	.+26     	; 0x382a <modf+0x58>
    3810:	57 cc       	rjmp	.-1874   	; 0x30c0 <__subsf3>
    3812:	61 30       	cpi	r22, 0x01	; 1
    3814:	71 05       	cpc	r23, r1
    3816:	a0 e8       	ldi	r26, 0x80	; 128
    3818:	8a 07       	cpc	r24, r26
    381a:	b9 46       	sbci	r27, 0x69	; 105
    381c:	30 f4       	brcc	.+12     	; 0x382a <modf+0x58>
    381e:	9b 01       	movw	r18, r22
    3820:	ac 01       	movw	r20, r24
    3822:	66 27       	eor	r22, r22
    3824:	77 27       	eor	r23, r23
    3826:	88 27       	eor	r24, r24
    3828:	90 78       	andi	r25, 0x80	; 128
    382a:	30 96       	adiw	r30, 0x00	; 0
    382c:	21 f0       	breq	.+8      	; 0x3836 <modf+0x64>
    382e:	20 83       	st	Z, r18
    3830:	31 83       	std	Z+1, r19	; 0x01
    3832:	42 83       	std	Z+2, r20	; 0x02
    3834:	53 83       	std	Z+3, r21	; 0x03
    3836:	08 95       	ret

00003838 <__fp_mpack>:
    3838:	9f 3f       	cpi	r25, 0xFF	; 255
    383a:	31 f0       	breq	.+12     	; 0x3848 <__fp_mpack_finite+0xc>

0000383c <__fp_mpack_finite>:
    383c:	91 50       	subi	r25, 0x01	; 1
    383e:	20 f4       	brcc	.+8      	; 0x3848 <__fp_mpack_finite+0xc>
    3840:	87 95       	ror	r24
    3842:	77 95       	ror	r23
    3844:	67 95       	ror	r22
    3846:	b7 95       	ror	r27
    3848:	88 0f       	add	r24, r24
    384a:	91 1d       	adc	r25, r1
    384c:	96 95       	lsr	r25
    384e:	87 95       	ror	r24
    3850:	97 f9       	bld	r25, 7
    3852:	08 95       	ret

00003854 <__mulsi3>:
    3854:	db 01       	movw	r26, r22
    3856:	8f 93       	push	r24
    3858:	9f 93       	push	r25
    385a:	7f d0       	rcall	.+254    	; 0x395a <__muluhisi3>
    385c:	bf 91       	pop	r27
    385e:	af 91       	pop	r26
    3860:	a2 9f       	mul	r26, r18
    3862:	80 0d       	add	r24, r0
    3864:	91 1d       	adc	r25, r1
    3866:	a3 9f       	mul	r26, r19
    3868:	90 0d       	add	r25, r0
    386a:	b2 9f       	mul	r27, r18
    386c:	90 0d       	add	r25, r0
    386e:	11 24       	eor	r1, r1
    3870:	08 95       	ret

00003872 <__udivmodhi4>:
    3872:	aa 1b       	sub	r26, r26
    3874:	bb 1b       	sub	r27, r27
    3876:	51 e1       	ldi	r21, 0x11	; 17
    3878:	07 c0       	rjmp	.+14     	; 0x3888 <__udivmodhi4_ep>

0000387a <__udivmodhi4_loop>:
    387a:	aa 1f       	adc	r26, r26
    387c:	bb 1f       	adc	r27, r27
    387e:	a6 17       	cp	r26, r22
    3880:	b7 07       	cpc	r27, r23
    3882:	10 f0       	brcs	.+4      	; 0x3888 <__udivmodhi4_ep>
    3884:	a6 1b       	sub	r26, r22
    3886:	b7 0b       	sbc	r27, r23

00003888 <__udivmodhi4_ep>:
    3888:	88 1f       	adc	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	5a 95       	dec	r21
    388e:	a9 f7       	brne	.-22     	; 0x387a <__udivmodhi4_loop>
    3890:	80 95       	com	r24
    3892:	90 95       	com	r25
    3894:	bc 01       	movw	r22, r24
    3896:	cd 01       	movw	r24, r26
    3898:	08 95       	ret

0000389a <__divmodhi4>:
    389a:	97 fb       	bst	r25, 7
    389c:	07 2e       	mov	r0, r23
    389e:	16 f4       	brtc	.+4      	; 0x38a4 <__divmodhi4+0xa>
    38a0:	00 94       	com	r0
    38a2:	06 d0       	rcall	.+12     	; 0x38b0 <__divmodhi4_neg1>
    38a4:	77 fd       	sbrc	r23, 7
    38a6:	08 d0       	rcall	.+16     	; 0x38b8 <__divmodhi4_neg2>
    38a8:	e4 df       	rcall	.-56     	; 0x3872 <__udivmodhi4>
    38aa:	07 fc       	sbrc	r0, 7
    38ac:	05 d0       	rcall	.+10     	; 0x38b8 <__divmodhi4_neg2>
    38ae:	3e f4       	brtc	.+14     	; 0x38be <__divmodhi4_exit>

000038b0 <__divmodhi4_neg1>:
    38b0:	90 95       	com	r25
    38b2:	81 95       	neg	r24
    38b4:	9f 4f       	sbci	r25, 0xFF	; 255
    38b6:	08 95       	ret

000038b8 <__divmodhi4_neg2>:
    38b8:	70 95       	com	r23
    38ba:	61 95       	neg	r22
    38bc:	7f 4f       	sbci	r23, 0xFF	; 255

000038be <__divmodhi4_exit>:
    38be:	08 95       	ret

000038c0 <__udivmodsi4>:
    38c0:	a1 e2       	ldi	r26, 0x21	; 33
    38c2:	1a 2e       	mov	r1, r26
    38c4:	aa 1b       	sub	r26, r26
    38c6:	bb 1b       	sub	r27, r27
    38c8:	fd 01       	movw	r30, r26
    38ca:	0d c0       	rjmp	.+26     	; 0x38e6 <__udivmodsi4_ep>

000038cc <__udivmodsi4_loop>:
    38cc:	aa 1f       	adc	r26, r26
    38ce:	bb 1f       	adc	r27, r27
    38d0:	ee 1f       	adc	r30, r30
    38d2:	ff 1f       	adc	r31, r31
    38d4:	a2 17       	cp	r26, r18
    38d6:	b3 07       	cpc	r27, r19
    38d8:	e4 07       	cpc	r30, r20
    38da:	f5 07       	cpc	r31, r21
    38dc:	20 f0       	brcs	.+8      	; 0x38e6 <__udivmodsi4_ep>
    38de:	a2 1b       	sub	r26, r18
    38e0:	b3 0b       	sbc	r27, r19
    38e2:	e4 0b       	sbc	r30, r20
    38e4:	f5 0b       	sbc	r31, r21

000038e6 <__udivmodsi4_ep>:
    38e6:	66 1f       	adc	r22, r22
    38e8:	77 1f       	adc	r23, r23
    38ea:	88 1f       	adc	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	1a 94       	dec	r1
    38f0:	69 f7       	brne	.-38     	; 0x38cc <__udivmodsi4_loop>
    38f2:	60 95       	com	r22
    38f4:	70 95       	com	r23
    38f6:	80 95       	com	r24
    38f8:	90 95       	com	r25
    38fa:	9b 01       	movw	r18, r22
    38fc:	ac 01       	movw	r20, r24
    38fe:	bd 01       	movw	r22, r26
    3900:	cf 01       	movw	r24, r30
    3902:	08 95       	ret

00003904 <__divmodsi4>:
    3904:	05 2e       	mov	r0, r21
    3906:	97 fb       	bst	r25, 7
    3908:	16 f4       	brtc	.+4      	; 0x390e <__divmodsi4+0xa>
    390a:	00 94       	com	r0
    390c:	0f d0       	rcall	.+30     	; 0x392c <__negsi2>
    390e:	57 fd       	sbrc	r21, 7
    3910:	05 d0       	rcall	.+10     	; 0x391c <__divmodsi4_neg2>
    3912:	d6 df       	rcall	.-84     	; 0x38c0 <__udivmodsi4>
    3914:	07 fc       	sbrc	r0, 7
    3916:	02 d0       	rcall	.+4      	; 0x391c <__divmodsi4_neg2>
    3918:	46 f4       	brtc	.+16     	; 0x392a <__divmodsi4_exit>
    391a:	08 c0       	rjmp	.+16     	; 0x392c <__negsi2>

0000391c <__divmodsi4_neg2>:
    391c:	50 95       	com	r21
    391e:	40 95       	com	r20
    3920:	30 95       	com	r19
    3922:	21 95       	neg	r18
    3924:	3f 4f       	sbci	r19, 0xFF	; 255
    3926:	4f 4f       	sbci	r20, 0xFF	; 255
    3928:	5f 4f       	sbci	r21, 0xFF	; 255

0000392a <__divmodsi4_exit>:
    392a:	08 95       	ret

0000392c <__negsi2>:
    392c:	90 95       	com	r25
    392e:	80 95       	com	r24
    3930:	70 95       	com	r23
    3932:	61 95       	neg	r22
    3934:	7f 4f       	sbci	r23, 0xFF	; 255
    3936:	8f 4f       	sbci	r24, 0xFF	; 255
    3938:	9f 4f       	sbci	r25, 0xFF	; 255
    393a:	08 95       	ret

0000393c <__umulhisi3>:
    393c:	a2 9f       	mul	r26, r18
    393e:	b0 01       	movw	r22, r0
    3940:	b3 9f       	mul	r27, r19
    3942:	c0 01       	movw	r24, r0
    3944:	a3 9f       	mul	r26, r19
    3946:	70 0d       	add	r23, r0
    3948:	81 1d       	adc	r24, r1
    394a:	11 24       	eor	r1, r1
    394c:	91 1d       	adc	r25, r1
    394e:	b2 9f       	mul	r27, r18
    3950:	70 0d       	add	r23, r0
    3952:	81 1d       	adc	r24, r1
    3954:	11 24       	eor	r1, r1
    3956:	91 1d       	adc	r25, r1
    3958:	08 95       	ret

0000395a <__muluhisi3>:
    395a:	f0 df       	rcall	.-32     	; 0x393c <__umulhisi3>
    395c:	a5 9f       	mul	r26, r21
    395e:	90 0d       	add	r25, r0
    3960:	b4 9f       	mul	r27, r20
    3962:	90 0d       	add	r25, r0
    3964:	a4 9f       	mul	r26, r20
    3966:	80 0d       	add	r24, r0
    3968:	91 1d       	adc	r25, r1
    396a:	11 24       	eor	r1, r1
    396c:	08 95       	ret

0000396e <__ashrdi3>:
    396e:	97 fb       	bst	r25, 7
    3970:	10 f8       	bld	r1, 0

00003972 <__lshrdi3>:
    3972:	16 94       	lsr	r1
    3974:	00 08       	sbc	r0, r0
    3976:	0f 93       	push	r16
    3978:	08 30       	cpi	r16, 0x08	; 8
    397a:	98 f0       	brcs	.+38     	; 0x39a2 <__lshrdi3+0x30>
    397c:	08 50       	subi	r16, 0x08	; 8
    397e:	23 2f       	mov	r18, r19
    3980:	34 2f       	mov	r19, r20
    3982:	45 2f       	mov	r20, r21
    3984:	56 2f       	mov	r21, r22
    3986:	67 2f       	mov	r22, r23
    3988:	78 2f       	mov	r23, r24
    398a:	89 2f       	mov	r24, r25
    398c:	90 2d       	mov	r25, r0
    398e:	f4 cf       	rjmp	.-24     	; 0x3978 <__lshrdi3+0x6>
    3990:	05 94       	asr	r0
    3992:	97 95       	ror	r25
    3994:	87 95       	ror	r24
    3996:	77 95       	ror	r23
    3998:	67 95       	ror	r22
    399a:	57 95       	ror	r21
    399c:	47 95       	ror	r20
    399e:	37 95       	ror	r19
    39a0:	27 95       	ror	r18
    39a2:	0a 95       	dec	r16
    39a4:	aa f7       	brpl	.-22     	; 0x3990 <__lshrdi3+0x1e>
    39a6:	0f 91       	pop	r16
    39a8:	08 95       	ret

000039aa <fdevopen>:
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	00 97       	sbiw	r24, 0x00	; 0
    39b4:	31 f4       	brne	.+12     	; 0x39c2 <fdevopen+0x18>
    39b6:	61 15       	cp	r22, r1
    39b8:	71 05       	cpc	r23, r1
    39ba:	19 f4       	brne	.+6      	; 0x39c2 <fdevopen+0x18>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	39 c0       	rjmp	.+114    	; 0x3a34 <fdevopen+0x8a>
    39c2:	8b 01       	movw	r16, r22
    39c4:	ec 01       	movw	r28, r24
    39c6:	6e e0       	ldi	r22, 0x0E	; 14
    39c8:	70 e0       	ldi	r23, 0x00	; 0
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	47 d5       	rcall	.+2702   	; 0x445e <calloc>
    39d0:	fc 01       	movw	r30, r24
    39d2:	89 2b       	or	r24, r25
    39d4:	99 f3       	breq	.-26     	; 0x39bc <fdevopen+0x12>
    39d6:	80 e8       	ldi	r24, 0x80	; 128
    39d8:	83 83       	std	Z+3, r24	; 0x03
    39da:	01 15       	cp	r16, r1
    39dc:	11 05       	cpc	r17, r1
    39de:	71 f0       	breq	.+28     	; 0x39fc <fdevopen+0x52>
    39e0:	02 87       	std	Z+10, r16	; 0x0a
    39e2:	13 87       	std	Z+11, r17	; 0x0b
    39e4:	81 e8       	ldi	r24, 0x81	; 129
    39e6:	83 83       	std	Z+3, r24	; 0x03
    39e8:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <__iob>
    39ec:	90 91 b5 21 	lds	r25, 0x21B5	; 0x8021b5 <__iob+0x1>
    39f0:	89 2b       	or	r24, r25
    39f2:	21 f4       	brne	.+8      	; 0x39fc <fdevopen+0x52>
    39f4:	e0 93 b4 21 	sts	0x21B4, r30	; 0x8021b4 <__iob>
    39f8:	f0 93 b5 21 	sts	0x21B5, r31	; 0x8021b5 <__iob+0x1>
    39fc:	20 97       	sbiw	r28, 0x00	; 0
    39fe:	c9 f0       	breq	.+50     	; 0x3a32 <fdevopen+0x88>
    3a00:	c0 87       	std	Z+8, r28	; 0x08
    3a02:	d1 87       	std	Z+9, r29	; 0x09
    3a04:	83 81       	ldd	r24, Z+3	; 0x03
    3a06:	82 60       	ori	r24, 0x02	; 2
    3a08:	83 83       	std	Z+3, r24	; 0x03
    3a0a:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <__iob+0x2>
    3a0e:	90 91 b7 21 	lds	r25, 0x21B7	; 0x8021b7 <__iob+0x3>
    3a12:	89 2b       	or	r24, r25
    3a14:	71 f4       	brne	.+28     	; 0x3a32 <fdevopen+0x88>
    3a16:	e0 93 b6 21 	sts	0x21B6, r30	; 0x8021b6 <__iob+0x2>
    3a1a:	f0 93 b7 21 	sts	0x21B7, r31	; 0x8021b7 <__iob+0x3>
    3a1e:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <__iob+0x4>
    3a22:	90 91 b9 21 	lds	r25, 0x21B9	; 0x8021b9 <__iob+0x5>
    3a26:	89 2b       	or	r24, r25
    3a28:	21 f4       	brne	.+8      	; 0x3a32 <fdevopen+0x88>
    3a2a:	e0 93 b8 21 	sts	0x21B8, r30	; 0x8021b8 <__iob+0x4>
    3a2e:	f0 93 b9 21 	sts	0x21B9, r31	; 0x8021b9 <__iob+0x5>
    3a32:	cf 01       	movw	r24, r30
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	08 95       	ret

00003a3e <printf>:
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	ae 01       	movw	r20, r28
    3a48:	4a 5f       	subi	r20, 0xFA	; 250
    3a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a4c:	fa 01       	movw	r30, r20
    3a4e:	61 91       	ld	r22, Z+
    3a50:	71 91       	ld	r23, Z+
    3a52:	af 01       	movw	r20, r30
    3a54:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <__iob+0x2>
    3a58:	90 91 b7 21 	lds	r25, 0x21B7	; 0x8021b7 <__iob+0x3>
    3a5c:	46 d0       	rcall	.+140    	; 0x3aea <vfprintf>
    3a5e:	df 91       	pop	r29
    3a60:	cf 91       	pop	r28
    3a62:	08 95       	ret

00003a64 <sprintf>:
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	2e 97       	sbiw	r28, 0x0e	; 14
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	de bf       	out	0x3e, r29	; 62
    3a76:	0e 89       	ldd	r16, Y+22	; 0x16
    3a78:	1f 89       	ldd	r17, Y+23	; 0x17
    3a7a:	86 e0       	ldi	r24, 0x06	; 6
    3a7c:	8c 83       	std	Y+4, r24	; 0x04
    3a7e:	09 83       	std	Y+1, r16	; 0x01
    3a80:	1a 83       	std	Y+2, r17	; 0x02
    3a82:	8f ef       	ldi	r24, 0xFF	; 255
    3a84:	9f e7       	ldi	r25, 0x7F	; 127
    3a86:	8d 83       	std	Y+5, r24	; 0x05
    3a88:	9e 83       	std	Y+6, r25	; 0x06
    3a8a:	ae 01       	movw	r20, r28
    3a8c:	46 5e       	subi	r20, 0xE6	; 230
    3a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a90:	68 8d       	ldd	r22, Y+24	; 0x18
    3a92:	79 8d       	ldd	r23, Y+25	; 0x19
    3a94:	ce 01       	movw	r24, r28
    3a96:	01 96       	adiw	r24, 0x01	; 1
    3a98:	28 d0       	rcall	.+80     	; 0x3aea <vfprintf>
    3a9a:	ef 81       	ldd	r30, Y+7	; 0x07
    3a9c:	f8 85       	ldd	r31, Y+8	; 0x08
    3a9e:	e0 0f       	add	r30, r16
    3aa0:	f1 1f       	adc	r31, r17
    3aa2:	10 82       	st	Z, r1
    3aa4:	2e 96       	adiw	r28, 0x0e	; 14
    3aa6:	cd bf       	out	0x3d, r28	; 61
    3aa8:	de bf       	out	0x3e, r29	; 62
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	08 95       	ret

00003ab4 <sscanf>:
    3ab4:	cf 93       	push	r28
    3ab6:	df 93       	push	r29
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    3abc:	2e 97       	sbiw	r28, 0x0e	; 14
    3abe:	cd bf       	out	0x3d, r28	; 61
    3ac0:	de bf       	out	0x3e, r29	; 62
    3ac2:	85 e0       	ldi	r24, 0x05	; 5
    3ac4:	8c 83       	std	Y+4, r24	; 0x04
    3ac6:	8c 89       	ldd	r24, Y+20	; 0x14
    3ac8:	9d 89       	ldd	r25, Y+21	; 0x15
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	9a 83       	std	Y+2, r25	; 0x02
    3ace:	ae 01       	movw	r20, r28
    3ad0:	48 5e       	subi	r20, 0xE8	; 232
    3ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad4:	6e 89       	ldd	r22, Y+22	; 0x16
    3ad6:	7f 89       	ldd	r23, Y+23	; 0x17
    3ad8:	ce 01       	movw	r24, r28
    3ada:	01 96       	adiw	r24, 0x01	; 1
    3adc:	a9 d3       	rcall	.+1874   	; 0x4230 <vfscanf>
    3ade:	2e 96       	adiw	r28, 0x0e	; 14
    3ae0:	cd bf       	out	0x3d, r28	; 61
    3ae2:	de bf       	out	0x3e, r29	; 62
    3ae4:	df 91       	pop	r29
    3ae6:	cf 91       	pop	r28
    3ae8:	08 95       	ret

00003aea <vfprintf>:
    3aea:	2f 92       	push	r2
    3aec:	3f 92       	push	r3
    3aee:	4f 92       	push	r4
    3af0:	5f 92       	push	r5
    3af2:	6f 92       	push	r6
    3af4:	7f 92       	push	r7
    3af6:	8f 92       	push	r8
    3af8:	9f 92       	push	r9
    3afa:	af 92       	push	r10
    3afc:	bf 92       	push	r11
    3afe:	cf 92       	push	r12
    3b00:	df 92       	push	r13
    3b02:	ef 92       	push	r14
    3b04:	ff 92       	push	r15
    3b06:	0f 93       	push	r16
    3b08:	1f 93       	push	r17
    3b0a:	cf 93       	push	r28
    3b0c:	df 93       	push	r29
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	2b 97       	sbiw	r28, 0x0b	; 11
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	6c 01       	movw	r12, r24
    3b1a:	7b 01       	movw	r14, r22
    3b1c:	8a 01       	movw	r16, r20
    3b1e:	fc 01       	movw	r30, r24
    3b20:	16 82       	std	Z+6, r1	; 0x06
    3b22:	17 82       	std	Z+7, r1	; 0x07
    3b24:	83 81       	ldd	r24, Z+3	; 0x03
    3b26:	81 ff       	sbrs	r24, 1
    3b28:	bf c1       	rjmp	.+894    	; 0x3ea8 <vfprintf+0x3be>
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	01 96       	adiw	r24, 0x01	; 1
    3b2e:	3c 01       	movw	r6, r24
    3b30:	f6 01       	movw	r30, r12
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	f7 01       	movw	r30, r14
    3b36:	93 fd       	sbrc	r25, 3
    3b38:	85 91       	lpm	r24, Z+
    3b3a:	93 ff       	sbrs	r25, 3
    3b3c:	81 91       	ld	r24, Z+
    3b3e:	7f 01       	movw	r14, r30
    3b40:	88 23       	and	r24, r24
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <vfprintf+0x5c>
    3b44:	ad c1       	rjmp	.+858    	; 0x3ea0 <vfprintf+0x3b6>
    3b46:	85 32       	cpi	r24, 0x25	; 37
    3b48:	39 f4       	brne	.+14     	; 0x3b58 <vfprintf+0x6e>
    3b4a:	93 fd       	sbrc	r25, 3
    3b4c:	85 91       	lpm	r24, Z+
    3b4e:	93 ff       	sbrs	r25, 3
    3b50:	81 91       	ld	r24, Z+
    3b52:	7f 01       	movw	r14, r30
    3b54:	85 32       	cpi	r24, 0x25	; 37
    3b56:	21 f4       	brne	.+8      	; 0x3b60 <vfprintf+0x76>
    3b58:	b6 01       	movw	r22, r12
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	29 d6       	rcall	.+3154   	; 0x47b0 <fputc>
    3b5e:	e8 cf       	rjmp	.-48     	; 0x3b30 <vfprintf+0x46>
    3b60:	91 2c       	mov	r9, r1
    3b62:	21 2c       	mov	r2, r1
    3b64:	31 2c       	mov	r3, r1
    3b66:	ff e1       	ldi	r31, 0x1F	; 31
    3b68:	f3 15       	cp	r31, r3
    3b6a:	d8 f0       	brcs	.+54     	; 0x3ba2 <vfprintf+0xb8>
    3b6c:	8b 32       	cpi	r24, 0x2B	; 43
    3b6e:	79 f0       	breq	.+30     	; 0x3b8e <vfprintf+0xa4>
    3b70:	38 f4       	brcc	.+14     	; 0x3b80 <vfprintf+0x96>
    3b72:	80 32       	cpi	r24, 0x20	; 32
    3b74:	79 f0       	breq	.+30     	; 0x3b94 <vfprintf+0xaa>
    3b76:	83 32       	cpi	r24, 0x23	; 35
    3b78:	a1 f4       	brne	.+40     	; 0x3ba2 <vfprintf+0xb8>
    3b7a:	23 2d       	mov	r18, r3
    3b7c:	20 61       	ori	r18, 0x10	; 16
    3b7e:	1d c0       	rjmp	.+58     	; 0x3bba <vfprintf+0xd0>
    3b80:	8d 32       	cpi	r24, 0x2D	; 45
    3b82:	61 f0       	breq	.+24     	; 0x3b9c <vfprintf+0xb2>
    3b84:	80 33       	cpi	r24, 0x30	; 48
    3b86:	69 f4       	brne	.+26     	; 0x3ba2 <vfprintf+0xb8>
    3b88:	23 2d       	mov	r18, r3
    3b8a:	21 60       	ori	r18, 0x01	; 1
    3b8c:	16 c0       	rjmp	.+44     	; 0x3bba <vfprintf+0xd0>
    3b8e:	83 2d       	mov	r24, r3
    3b90:	82 60       	ori	r24, 0x02	; 2
    3b92:	38 2e       	mov	r3, r24
    3b94:	e3 2d       	mov	r30, r3
    3b96:	e4 60       	ori	r30, 0x04	; 4
    3b98:	3e 2e       	mov	r3, r30
    3b9a:	2a c0       	rjmp	.+84     	; 0x3bf0 <vfprintf+0x106>
    3b9c:	f3 2d       	mov	r31, r3
    3b9e:	f8 60       	ori	r31, 0x08	; 8
    3ba0:	1d c0       	rjmp	.+58     	; 0x3bdc <vfprintf+0xf2>
    3ba2:	37 fc       	sbrc	r3, 7
    3ba4:	2d c0       	rjmp	.+90     	; 0x3c00 <vfprintf+0x116>
    3ba6:	20 ed       	ldi	r18, 0xD0	; 208
    3ba8:	28 0f       	add	r18, r24
    3baa:	2a 30       	cpi	r18, 0x0A	; 10
    3bac:	40 f0       	brcs	.+16     	; 0x3bbe <vfprintf+0xd4>
    3bae:	8e 32       	cpi	r24, 0x2E	; 46
    3bb0:	b9 f4       	brne	.+46     	; 0x3be0 <vfprintf+0xf6>
    3bb2:	36 fc       	sbrc	r3, 6
    3bb4:	75 c1       	rjmp	.+746    	; 0x3ea0 <vfprintf+0x3b6>
    3bb6:	23 2d       	mov	r18, r3
    3bb8:	20 64       	ori	r18, 0x40	; 64
    3bba:	32 2e       	mov	r3, r18
    3bbc:	19 c0       	rjmp	.+50     	; 0x3bf0 <vfprintf+0x106>
    3bbe:	36 fe       	sbrs	r3, 6
    3bc0:	06 c0       	rjmp	.+12     	; 0x3bce <vfprintf+0xe4>
    3bc2:	8a e0       	ldi	r24, 0x0A	; 10
    3bc4:	98 9e       	mul	r9, r24
    3bc6:	20 0d       	add	r18, r0
    3bc8:	11 24       	eor	r1, r1
    3bca:	92 2e       	mov	r9, r18
    3bcc:	11 c0       	rjmp	.+34     	; 0x3bf0 <vfprintf+0x106>
    3bce:	ea e0       	ldi	r30, 0x0A	; 10
    3bd0:	2e 9e       	mul	r2, r30
    3bd2:	20 0d       	add	r18, r0
    3bd4:	11 24       	eor	r1, r1
    3bd6:	22 2e       	mov	r2, r18
    3bd8:	f3 2d       	mov	r31, r3
    3bda:	f0 62       	ori	r31, 0x20	; 32
    3bdc:	3f 2e       	mov	r3, r31
    3bde:	08 c0       	rjmp	.+16     	; 0x3bf0 <vfprintf+0x106>
    3be0:	8c 36       	cpi	r24, 0x6C	; 108
    3be2:	21 f4       	brne	.+8      	; 0x3bec <vfprintf+0x102>
    3be4:	83 2d       	mov	r24, r3
    3be6:	80 68       	ori	r24, 0x80	; 128
    3be8:	38 2e       	mov	r3, r24
    3bea:	02 c0       	rjmp	.+4      	; 0x3bf0 <vfprintf+0x106>
    3bec:	88 36       	cpi	r24, 0x68	; 104
    3bee:	41 f4       	brne	.+16     	; 0x3c00 <vfprintf+0x116>
    3bf0:	f7 01       	movw	r30, r14
    3bf2:	93 fd       	sbrc	r25, 3
    3bf4:	85 91       	lpm	r24, Z+
    3bf6:	93 ff       	sbrs	r25, 3
    3bf8:	81 91       	ld	r24, Z+
    3bfa:	7f 01       	movw	r14, r30
    3bfc:	81 11       	cpse	r24, r1
    3bfe:	b3 cf       	rjmp	.-154    	; 0x3b66 <vfprintf+0x7c>
    3c00:	98 2f       	mov	r25, r24
    3c02:	9f 7d       	andi	r25, 0xDF	; 223
    3c04:	95 54       	subi	r25, 0x45	; 69
    3c06:	93 30       	cpi	r25, 0x03	; 3
    3c08:	28 f4       	brcc	.+10     	; 0x3c14 <vfprintf+0x12a>
    3c0a:	0c 5f       	subi	r16, 0xFC	; 252
    3c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c0e:	9f e3       	ldi	r25, 0x3F	; 63
    3c10:	99 83       	std	Y+1, r25	; 0x01
    3c12:	0d c0       	rjmp	.+26     	; 0x3c2e <vfprintf+0x144>
    3c14:	83 36       	cpi	r24, 0x63	; 99
    3c16:	31 f0       	breq	.+12     	; 0x3c24 <vfprintf+0x13a>
    3c18:	83 37       	cpi	r24, 0x73	; 115
    3c1a:	71 f0       	breq	.+28     	; 0x3c38 <vfprintf+0x14e>
    3c1c:	83 35       	cpi	r24, 0x53	; 83
    3c1e:	09 f0       	breq	.+2      	; 0x3c22 <vfprintf+0x138>
    3c20:	55 c0       	rjmp	.+170    	; 0x3ccc <vfprintf+0x1e2>
    3c22:	20 c0       	rjmp	.+64     	; 0x3c64 <vfprintf+0x17a>
    3c24:	f8 01       	movw	r30, r16
    3c26:	80 81       	ld	r24, Z
    3c28:	89 83       	std	Y+1, r24	; 0x01
    3c2a:	0e 5f       	subi	r16, 0xFE	; 254
    3c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2e:	88 24       	eor	r8, r8
    3c30:	83 94       	inc	r8
    3c32:	91 2c       	mov	r9, r1
    3c34:	53 01       	movw	r10, r6
    3c36:	12 c0       	rjmp	.+36     	; 0x3c5c <vfprintf+0x172>
    3c38:	28 01       	movw	r4, r16
    3c3a:	f2 e0       	ldi	r31, 0x02	; 2
    3c3c:	4f 0e       	add	r4, r31
    3c3e:	51 1c       	adc	r5, r1
    3c40:	f8 01       	movw	r30, r16
    3c42:	a0 80       	ld	r10, Z
    3c44:	b1 80       	ldd	r11, Z+1	; 0x01
    3c46:	36 fe       	sbrs	r3, 6
    3c48:	03 c0       	rjmp	.+6      	; 0x3c50 <vfprintf+0x166>
    3c4a:	69 2d       	mov	r22, r9
    3c4c:	70 e0       	ldi	r23, 0x00	; 0
    3c4e:	02 c0       	rjmp	.+4      	; 0x3c54 <vfprintf+0x16a>
    3c50:	6f ef       	ldi	r22, 0xFF	; 255
    3c52:	7f ef       	ldi	r23, 0xFF	; 255
    3c54:	c5 01       	movw	r24, r10
    3c56:	63 d5       	rcall	.+2758   	; 0x471e <strnlen>
    3c58:	4c 01       	movw	r8, r24
    3c5a:	82 01       	movw	r16, r4
    3c5c:	f3 2d       	mov	r31, r3
    3c5e:	ff 77       	andi	r31, 0x7F	; 127
    3c60:	3f 2e       	mov	r3, r31
    3c62:	15 c0       	rjmp	.+42     	; 0x3c8e <vfprintf+0x1a4>
    3c64:	28 01       	movw	r4, r16
    3c66:	22 e0       	ldi	r18, 0x02	; 2
    3c68:	42 0e       	add	r4, r18
    3c6a:	51 1c       	adc	r5, r1
    3c6c:	f8 01       	movw	r30, r16
    3c6e:	a0 80       	ld	r10, Z
    3c70:	b1 80       	ldd	r11, Z+1	; 0x01
    3c72:	36 fe       	sbrs	r3, 6
    3c74:	03 c0       	rjmp	.+6      	; 0x3c7c <vfprintf+0x192>
    3c76:	69 2d       	mov	r22, r9
    3c78:	70 e0       	ldi	r23, 0x00	; 0
    3c7a:	02 c0       	rjmp	.+4      	; 0x3c80 <vfprintf+0x196>
    3c7c:	6f ef       	ldi	r22, 0xFF	; 255
    3c7e:	7f ef       	ldi	r23, 0xFF	; 255
    3c80:	c5 01       	movw	r24, r10
    3c82:	3b d5       	rcall	.+2678   	; 0x46fa <strnlen_P>
    3c84:	4c 01       	movw	r8, r24
    3c86:	f3 2d       	mov	r31, r3
    3c88:	f0 68       	ori	r31, 0x80	; 128
    3c8a:	3f 2e       	mov	r3, r31
    3c8c:	82 01       	movw	r16, r4
    3c8e:	33 fc       	sbrc	r3, 3
    3c90:	19 c0       	rjmp	.+50     	; 0x3cc4 <vfprintf+0x1da>
    3c92:	82 2d       	mov	r24, r2
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	88 16       	cp	r8, r24
    3c98:	99 06       	cpc	r9, r25
    3c9a:	a0 f4       	brcc	.+40     	; 0x3cc4 <vfprintf+0x1da>
    3c9c:	b6 01       	movw	r22, r12
    3c9e:	80 e2       	ldi	r24, 0x20	; 32
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	86 d5       	rcall	.+2828   	; 0x47b0 <fputc>
    3ca4:	2a 94       	dec	r2
    3ca6:	f5 cf       	rjmp	.-22     	; 0x3c92 <vfprintf+0x1a8>
    3ca8:	f5 01       	movw	r30, r10
    3caa:	37 fc       	sbrc	r3, 7
    3cac:	85 91       	lpm	r24, Z+
    3cae:	37 fe       	sbrs	r3, 7
    3cb0:	81 91       	ld	r24, Z+
    3cb2:	5f 01       	movw	r10, r30
    3cb4:	b6 01       	movw	r22, r12
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	7b d5       	rcall	.+2806   	; 0x47b0 <fputc>
    3cba:	21 10       	cpse	r2, r1
    3cbc:	2a 94       	dec	r2
    3cbe:	21 e0       	ldi	r18, 0x01	; 1
    3cc0:	82 1a       	sub	r8, r18
    3cc2:	91 08       	sbc	r9, r1
    3cc4:	81 14       	cp	r8, r1
    3cc6:	91 04       	cpc	r9, r1
    3cc8:	79 f7       	brne	.-34     	; 0x3ca8 <vfprintf+0x1be>
    3cca:	e1 c0       	rjmp	.+450    	; 0x3e8e <vfprintf+0x3a4>
    3ccc:	84 36       	cpi	r24, 0x64	; 100
    3cce:	11 f0       	breq	.+4      	; 0x3cd4 <vfprintf+0x1ea>
    3cd0:	89 36       	cpi	r24, 0x69	; 105
    3cd2:	39 f5       	brne	.+78     	; 0x3d22 <vfprintf+0x238>
    3cd4:	f8 01       	movw	r30, r16
    3cd6:	37 fe       	sbrs	r3, 7
    3cd8:	07 c0       	rjmp	.+14     	; 0x3ce8 <vfprintf+0x1fe>
    3cda:	60 81       	ld	r22, Z
    3cdc:	71 81       	ldd	r23, Z+1	; 0x01
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	0c 5f       	subi	r16, 0xFC	; 252
    3ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce6:	08 c0       	rjmp	.+16     	; 0x3cf8 <vfprintf+0x20e>
    3ce8:	60 81       	ld	r22, Z
    3cea:	71 81       	ldd	r23, Z+1	; 0x01
    3cec:	07 2e       	mov	r0, r23
    3cee:	00 0c       	add	r0, r0
    3cf0:	88 0b       	sbc	r24, r24
    3cf2:	99 0b       	sbc	r25, r25
    3cf4:	0e 5f       	subi	r16, 0xFE	; 254
    3cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf8:	f3 2d       	mov	r31, r3
    3cfa:	ff 76       	andi	r31, 0x6F	; 111
    3cfc:	3f 2e       	mov	r3, r31
    3cfe:	97 ff       	sbrs	r25, 7
    3d00:	09 c0       	rjmp	.+18     	; 0x3d14 <vfprintf+0x22a>
    3d02:	90 95       	com	r25
    3d04:	80 95       	com	r24
    3d06:	70 95       	com	r23
    3d08:	61 95       	neg	r22
    3d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d10:	f0 68       	ori	r31, 0x80	; 128
    3d12:	3f 2e       	mov	r3, r31
    3d14:	2a e0       	ldi	r18, 0x0A	; 10
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	a3 01       	movw	r20, r6
    3d1a:	9f d5       	rcall	.+2878   	; 0x485a <__ultoa_invert>
    3d1c:	88 2e       	mov	r8, r24
    3d1e:	86 18       	sub	r8, r6
    3d20:	44 c0       	rjmp	.+136    	; 0x3daa <vfprintf+0x2c0>
    3d22:	85 37       	cpi	r24, 0x75	; 117
    3d24:	31 f4       	brne	.+12     	; 0x3d32 <vfprintf+0x248>
    3d26:	23 2d       	mov	r18, r3
    3d28:	2f 7e       	andi	r18, 0xEF	; 239
    3d2a:	b2 2e       	mov	r11, r18
    3d2c:	2a e0       	ldi	r18, 0x0A	; 10
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	25 c0       	rjmp	.+74     	; 0x3d7c <vfprintf+0x292>
    3d32:	93 2d       	mov	r25, r3
    3d34:	99 7f       	andi	r25, 0xF9	; 249
    3d36:	b9 2e       	mov	r11, r25
    3d38:	8f 36       	cpi	r24, 0x6F	; 111
    3d3a:	c1 f0       	breq	.+48     	; 0x3d6c <vfprintf+0x282>
    3d3c:	18 f4       	brcc	.+6      	; 0x3d44 <vfprintf+0x25a>
    3d3e:	88 35       	cpi	r24, 0x58	; 88
    3d40:	79 f0       	breq	.+30     	; 0x3d60 <vfprintf+0x276>
    3d42:	ae c0       	rjmp	.+348    	; 0x3ea0 <vfprintf+0x3b6>
    3d44:	80 37       	cpi	r24, 0x70	; 112
    3d46:	19 f0       	breq	.+6      	; 0x3d4e <vfprintf+0x264>
    3d48:	88 37       	cpi	r24, 0x78	; 120
    3d4a:	21 f0       	breq	.+8      	; 0x3d54 <vfprintf+0x26a>
    3d4c:	a9 c0       	rjmp	.+338    	; 0x3ea0 <vfprintf+0x3b6>
    3d4e:	e9 2f       	mov	r30, r25
    3d50:	e0 61       	ori	r30, 0x10	; 16
    3d52:	be 2e       	mov	r11, r30
    3d54:	b4 fe       	sbrs	r11, 4
    3d56:	0d c0       	rjmp	.+26     	; 0x3d72 <vfprintf+0x288>
    3d58:	fb 2d       	mov	r31, r11
    3d5a:	f4 60       	ori	r31, 0x04	; 4
    3d5c:	bf 2e       	mov	r11, r31
    3d5e:	09 c0       	rjmp	.+18     	; 0x3d72 <vfprintf+0x288>
    3d60:	34 fe       	sbrs	r3, 4
    3d62:	0a c0       	rjmp	.+20     	; 0x3d78 <vfprintf+0x28e>
    3d64:	29 2f       	mov	r18, r25
    3d66:	26 60       	ori	r18, 0x06	; 6
    3d68:	b2 2e       	mov	r11, r18
    3d6a:	06 c0       	rjmp	.+12     	; 0x3d78 <vfprintf+0x28e>
    3d6c:	28 e0       	ldi	r18, 0x08	; 8
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	05 c0       	rjmp	.+10     	; 0x3d7c <vfprintf+0x292>
    3d72:	20 e1       	ldi	r18, 0x10	; 16
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	02 c0       	rjmp	.+4      	; 0x3d7c <vfprintf+0x292>
    3d78:	20 e1       	ldi	r18, 0x10	; 16
    3d7a:	32 e0       	ldi	r19, 0x02	; 2
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	b7 fe       	sbrs	r11, 7
    3d80:	07 c0       	rjmp	.+14     	; 0x3d90 <vfprintf+0x2a6>
    3d82:	60 81       	ld	r22, Z
    3d84:	71 81       	ldd	r23, Z+1	; 0x01
    3d86:	82 81       	ldd	r24, Z+2	; 0x02
    3d88:	93 81       	ldd	r25, Z+3	; 0x03
    3d8a:	0c 5f       	subi	r16, 0xFC	; 252
    3d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d8e:	06 c0       	rjmp	.+12     	; 0x3d9c <vfprintf+0x2b2>
    3d90:	60 81       	ld	r22, Z
    3d92:	71 81       	ldd	r23, Z+1	; 0x01
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 5f       	subi	r16, 0xFE	; 254
    3d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9c:	a3 01       	movw	r20, r6
    3d9e:	5d d5       	rcall	.+2746   	; 0x485a <__ultoa_invert>
    3da0:	88 2e       	mov	r8, r24
    3da2:	86 18       	sub	r8, r6
    3da4:	fb 2d       	mov	r31, r11
    3da6:	ff 77       	andi	r31, 0x7F	; 127
    3da8:	3f 2e       	mov	r3, r31
    3daa:	36 fe       	sbrs	r3, 6
    3dac:	0d c0       	rjmp	.+26     	; 0x3dc8 <vfprintf+0x2de>
    3dae:	23 2d       	mov	r18, r3
    3db0:	2e 7f       	andi	r18, 0xFE	; 254
    3db2:	a2 2e       	mov	r10, r18
    3db4:	89 14       	cp	r8, r9
    3db6:	58 f4       	brcc	.+22     	; 0x3dce <vfprintf+0x2e4>
    3db8:	34 fe       	sbrs	r3, 4
    3dba:	0b c0       	rjmp	.+22     	; 0x3dd2 <vfprintf+0x2e8>
    3dbc:	32 fc       	sbrc	r3, 2
    3dbe:	09 c0       	rjmp	.+18     	; 0x3dd2 <vfprintf+0x2e8>
    3dc0:	83 2d       	mov	r24, r3
    3dc2:	8e 7e       	andi	r24, 0xEE	; 238
    3dc4:	a8 2e       	mov	r10, r24
    3dc6:	05 c0       	rjmp	.+10     	; 0x3dd2 <vfprintf+0x2e8>
    3dc8:	b8 2c       	mov	r11, r8
    3dca:	a3 2c       	mov	r10, r3
    3dcc:	03 c0       	rjmp	.+6      	; 0x3dd4 <vfprintf+0x2ea>
    3dce:	b8 2c       	mov	r11, r8
    3dd0:	01 c0       	rjmp	.+2      	; 0x3dd4 <vfprintf+0x2ea>
    3dd2:	b9 2c       	mov	r11, r9
    3dd4:	a4 fe       	sbrs	r10, 4
    3dd6:	0f c0       	rjmp	.+30     	; 0x3df6 <vfprintf+0x30c>
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e8 0d       	add	r30, r8
    3ddc:	f1 1d       	adc	r31, r1
    3dde:	80 81       	ld	r24, Z
    3de0:	80 33       	cpi	r24, 0x30	; 48
    3de2:	21 f4       	brne	.+8      	; 0x3dec <vfprintf+0x302>
    3de4:	9a 2d       	mov	r25, r10
    3de6:	99 7e       	andi	r25, 0xE9	; 233
    3de8:	a9 2e       	mov	r10, r25
    3dea:	09 c0       	rjmp	.+18     	; 0x3dfe <vfprintf+0x314>
    3dec:	a2 fe       	sbrs	r10, 2
    3dee:	06 c0       	rjmp	.+12     	; 0x3dfc <vfprintf+0x312>
    3df0:	b3 94       	inc	r11
    3df2:	b3 94       	inc	r11
    3df4:	04 c0       	rjmp	.+8      	; 0x3dfe <vfprintf+0x314>
    3df6:	8a 2d       	mov	r24, r10
    3df8:	86 78       	andi	r24, 0x86	; 134
    3dfa:	09 f0       	breq	.+2      	; 0x3dfe <vfprintf+0x314>
    3dfc:	b3 94       	inc	r11
    3dfe:	a3 fc       	sbrc	r10, 3
    3e00:	10 c0       	rjmp	.+32     	; 0x3e22 <vfprintf+0x338>
    3e02:	a0 fe       	sbrs	r10, 0
    3e04:	06 c0       	rjmp	.+12     	; 0x3e12 <vfprintf+0x328>
    3e06:	b2 14       	cp	r11, r2
    3e08:	80 f4       	brcc	.+32     	; 0x3e2a <vfprintf+0x340>
    3e0a:	28 0c       	add	r2, r8
    3e0c:	92 2c       	mov	r9, r2
    3e0e:	9b 18       	sub	r9, r11
    3e10:	0d c0       	rjmp	.+26     	; 0x3e2c <vfprintf+0x342>
    3e12:	b2 14       	cp	r11, r2
    3e14:	58 f4       	brcc	.+22     	; 0x3e2c <vfprintf+0x342>
    3e16:	b6 01       	movw	r22, r12
    3e18:	80 e2       	ldi	r24, 0x20	; 32
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	c9 d4       	rcall	.+2450   	; 0x47b0 <fputc>
    3e1e:	b3 94       	inc	r11
    3e20:	f8 cf       	rjmp	.-16     	; 0x3e12 <vfprintf+0x328>
    3e22:	b2 14       	cp	r11, r2
    3e24:	18 f4       	brcc	.+6      	; 0x3e2c <vfprintf+0x342>
    3e26:	2b 18       	sub	r2, r11
    3e28:	02 c0       	rjmp	.+4      	; 0x3e2e <vfprintf+0x344>
    3e2a:	98 2c       	mov	r9, r8
    3e2c:	21 2c       	mov	r2, r1
    3e2e:	a4 fe       	sbrs	r10, 4
    3e30:	0f c0       	rjmp	.+30     	; 0x3e50 <vfprintf+0x366>
    3e32:	b6 01       	movw	r22, r12
    3e34:	80 e3       	ldi	r24, 0x30	; 48
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	bb d4       	rcall	.+2422   	; 0x47b0 <fputc>
    3e3a:	a2 fe       	sbrs	r10, 2
    3e3c:	16 c0       	rjmp	.+44     	; 0x3e6a <vfprintf+0x380>
    3e3e:	a1 fc       	sbrc	r10, 1
    3e40:	03 c0       	rjmp	.+6      	; 0x3e48 <vfprintf+0x35e>
    3e42:	88 e7       	ldi	r24, 0x78	; 120
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	02 c0       	rjmp	.+4      	; 0x3e4c <vfprintf+0x362>
    3e48:	88 e5       	ldi	r24, 0x58	; 88
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	b6 01       	movw	r22, r12
    3e4e:	0c c0       	rjmp	.+24     	; 0x3e68 <vfprintf+0x37e>
    3e50:	8a 2d       	mov	r24, r10
    3e52:	86 78       	andi	r24, 0x86	; 134
    3e54:	51 f0       	breq	.+20     	; 0x3e6a <vfprintf+0x380>
    3e56:	a1 fe       	sbrs	r10, 1
    3e58:	02 c0       	rjmp	.+4      	; 0x3e5e <vfprintf+0x374>
    3e5a:	8b e2       	ldi	r24, 0x2B	; 43
    3e5c:	01 c0       	rjmp	.+2      	; 0x3e60 <vfprintf+0x376>
    3e5e:	80 e2       	ldi	r24, 0x20	; 32
    3e60:	a7 fc       	sbrc	r10, 7
    3e62:	8d e2       	ldi	r24, 0x2D	; 45
    3e64:	b6 01       	movw	r22, r12
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	a3 d4       	rcall	.+2374   	; 0x47b0 <fputc>
    3e6a:	89 14       	cp	r8, r9
    3e6c:	30 f4       	brcc	.+12     	; 0x3e7a <vfprintf+0x390>
    3e6e:	b6 01       	movw	r22, r12
    3e70:	80 e3       	ldi	r24, 0x30	; 48
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	9d d4       	rcall	.+2362   	; 0x47b0 <fputc>
    3e76:	9a 94       	dec	r9
    3e78:	f8 cf       	rjmp	.-16     	; 0x3e6a <vfprintf+0x380>
    3e7a:	8a 94       	dec	r8
    3e7c:	f3 01       	movw	r30, r6
    3e7e:	e8 0d       	add	r30, r8
    3e80:	f1 1d       	adc	r31, r1
    3e82:	80 81       	ld	r24, Z
    3e84:	b6 01       	movw	r22, r12
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	93 d4       	rcall	.+2342   	; 0x47b0 <fputc>
    3e8a:	81 10       	cpse	r8, r1
    3e8c:	f6 cf       	rjmp	.-20     	; 0x3e7a <vfprintf+0x390>
    3e8e:	22 20       	and	r2, r2
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <vfprintf+0x3aa>
    3e92:	4e ce       	rjmp	.-868    	; 0x3b30 <vfprintf+0x46>
    3e94:	b6 01       	movw	r22, r12
    3e96:	80 e2       	ldi	r24, 0x20	; 32
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	8a d4       	rcall	.+2324   	; 0x47b0 <fputc>
    3e9c:	2a 94       	dec	r2
    3e9e:	f7 cf       	rjmp	.-18     	; 0x3e8e <vfprintf+0x3a4>
    3ea0:	f6 01       	movw	r30, r12
    3ea2:	86 81       	ldd	r24, Z+6	; 0x06
    3ea4:	97 81       	ldd	r25, Z+7	; 0x07
    3ea6:	02 c0       	rjmp	.+4      	; 0x3eac <vfprintf+0x3c2>
    3ea8:	8f ef       	ldi	r24, 0xFF	; 255
    3eaa:	9f ef       	ldi	r25, 0xFF	; 255
    3eac:	2b 96       	adiw	r28, 0x0b	; 11
    3eae:	cd bf       	out	0x3d, r28	; 61
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	df 91       	pop	r29
    3eb4:	cf 91       	pop	r28
    3eb6:	1f 91       	pop	r17
    3eb8:	0f 91       	pop	r16
    3eba:	ff 90       	pop	r15
    3ebc:	ef 90       	pop	r14
    3ebe:	df 90       	pop	r13
    3ec0:	cf 90       	pop	r12
    3ec2:	bf 90       	pop	r11
    3ec4:	af 90       	pop	r10
    3ec6:	9f 90       	pop	r9
    3ec8:	8f 90       	pop	r8
    3eca:	7f 90       	pop	r7
    3ecc:	6f 90       	pop	r6
    3ece:	5f 90       	pop	r5
    3ed0:	4f 90       	pop	r4
    3ed2:	3f 90       	pop	r3
    3ed4:	2f 90       	pop	r2
    3ed6:	08 95       	ret

00003ed8 <putval>:
    3ed8:	20 fd       	sbrc	r18, 0
    3eda:	09 c0       	rjmp	.+18     	; 0x3eee <putval+0x16>
    3edc:	fc 01       	movw	r30, r24
    3ede:	23 fd       	sbrc	r18, 3
    3ee0:	05 c0       	rjmp	.+10     	; 0x3eec <putval+0x14>
    3ee2:	22 ff       	sbrs	r18, 2
    3ee4:	02 c0       	rjmp	.+4      	; 0x3eea <putval+0x12>
    3ee6:	73 83       	std	Z+3, r23	; 0x03
    3ee8:	62 83       	std	Z+2, r22	; 0x02
    3eea:	51 83       	std	Z+1, r21	; 0x01
    3eec:	40 83       	st	Z, r20
    3eee:	08 95       	ret

00003ef0 <mulacc>:
    3ef0:	44 fd       	sbrc	r20, 4
    3ef2:	17 c0       	rjmp	.+46     	; 0x3f22 <mulacc+0x32>
    3ef4:	46 fd       	sbrc	r20, 6
    3ef6:	17 c0       	rjmp	.+46     	; 0x3f26 <mulacc+0x36>
    3ef8:	ab 01       	movw	r20, r22
    3efa:	bc 01       	movw	r22, r24
    3efc:	da 01       	movw	r26, r20
    3efe:	fb 01       	movw	r30, r22
    3f00:	aa 0f       	add	r26, r26
    3f02:	bb 1f       	adc	r27, r27
    3f04:	ee 1f       	adc	r30, r30
    3f06:	ff 1f       	adc	r31, r31
    3f08:	10 94       	com	r1
    3f0a:	d1 f7       	brne	.-12     	; 0x3f00 <mulacc+0x10>
    3f0c:	4a 0f       	add	r20, r26
    3f0e:	5b 1f       	adc	r21, r27
    3f10:	6e 1f       	adc	r22, r30
    3f12:	7f 1f       	adc	r23, r31
    3f14:	cb 01       	movw	r24, r22
    3f16:	ba 01       	movw	r22, r20
    3f18:	66 0f       	add	r22, r22
    3f1a:	77 1f       	adc	r23, r23
    3f1c:	88 1f       	adc	r24, r24
    3f1e:	99 1f       	adc	r25, r25
    3f20:	09 c0       	rjmp	.+18     	; 0x3f34 <mulacc+0x44>
    3f22:	33 e0       	ldi	r19, 0x03	; 3
    3f24:	01 c0       	rjmp	.+2      	; 0x3f28 <mulacc+0x38>
    3f26:	34 e0       	ldi	r19, 0x04	; 4
    3f28:	66 0f       	add	r22, r22
    3f2a:	77 1f       	adc	r23, r23
    3f2c:	88 1f       	adc	r24, r24
    3f2e:	99 1f       	adc	r25, r25
    3f30:	31 50       	subi	r19, 0x01	; 1
    3f32:	d1 f7       	brne	.-12     	; 0x3f28 <mulacc+0x38>
    3f34:	62 0f       	add	r22, r18
    3f36:	71 1d       	adc	r23, r1
    3f38:	81 1d       	adc	r24, r1
    3f3a:	91 1d       	adc	r25, r1
    3f3c:	08 95       	ret

00003f3e <skip_spaces>:
    3f3e:	0f 93       	push	r16
    3f40:	1f 93       	push	r17
    3f42:	cf 93       	push	r28
    3f44:	df 93       	push	r29
    3f46:	8c 01       	movw	r16, r24
    3f48:	c8 01       	movw	r24, r16
    3f4a:	f4 d3       	rcall	.+2024   	; 0x4734 <fgetc>
    3f4c:	ec 01       	movw	r28, r24
    3f4e:	97 fd       	sbrc	r25, 7
    3f50:	06 c0       	rjmp	.+12     	; 0x3f5e <skip_spaces+0x20>
    3f52:	c0 d3       	rcall	.+1920   	; 0x46d4 <isspace>
    3f54:	89 2b       	or	r24, r25
    3f56:	c1 f7       	brne	.-16     	; 0x3f48 <skip_spaces+0xa>
    3f58:	b8 01       	movw	r22, r16
    3f5a:	ce 01       	movw	r24, r28
    3f5c:	65 d4       	rcall	.+2250   	; 0x4828 <ungetc>
    3f5e:	ce 01       	movw	r24, r28
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	08 95       	ret

00003f6a <conv_int>:
    3f6a:	8f 92       	push	r8
    3f6c:	9f 92       	push	r9
    3f6e:	af 92       	push	r10
    3f70:	bf 92       	push	r11
    3f72:	ef 92       	push	r14
    3f74:	ff 92       	push	r15
    3f76:	0f 93       	push	r16
    3f78:	1f 93       	push	r17
    3f7a:	cf 93       	push	r28
    3f7c:	df 93       	push	r29
    3f7e:	8c 01       	movw	r16, r24
    3f80:	d6 2f       	mov	r29, r22
    3f82:	7a 01       	movw	r14, r20
    3f84:	b2 2e       	mov	r11, r18
    3f86:	d6 d3       	rcall	.+1964   	; 0x4734 <fgetc>
    3f88:	9c 01       	movw	r18, r24
    3f8a:	33 27       	eor	r19, r19
    3f8c:	2b 32       	cpi	r18, 0x2B	; 43
    3f8e:	31 05       	cpc	r19, r1
    3f90:	31 f0       	breq	.+12     	; 0x3f9e <conv_int+0x34>
    3f92:	2d 32       	cpi	r18, 0x2D	; 45
    3f94:	31 05       	cpc	r19, r1
    3f96:	59 f4       	brne	.+22     	; 0x3fae <conv_int+0x44>
    3f98:	8b 2d       	mov	r24, r11
    3f9a:	80 68       	ori	r24, 0x80	; 128
    3f9c:	b8 2e       	mov	r11, r24
    3f9e:	d1 50       	subi	r29, 0x01	; 1
    3fa0:	11 f4       	brne	.+4      	; 0x3fa6 <conv_int+0x3c>
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	61 c0       	rjmp	.+194    	; 0x4068 <__stack+0x69>
    3fa6:	c8 01       	movw	r24, r16
    3fa8:	c5 d3       	rcall	.+1930   	; 0x4734 <fgetc>
    3faa:	97 fd       	sbrc	r25, 7
    3fac:	fa cf       	rjmp	.-12     	; 0x3fa2 <conv_int+0x38>
    3fae:	cb 2d       	mov	r28, r11
    3fb0:	cd 7f       	andi	r28, 0xFD	; 253
    3fb2:	2b 2d       	mov	r18, r11
    3fb4:	20 73       	andi	r18, 0x30	; 48
    3fb6:	f9 f4       	brne	.+62     	; 0x3ff6 <conv_int+0x8c>
    3fb8:	80 33       	cpi	r24, 0x30	; 48
    3fba:	e9 f4       	brne	.+58     	; 0x3ff6 <conv_int+0x8c>
    3fbc:	aa 24       	eor	r10, r10
    3fbe:	aa 94       	dec	r10
    3fc0:	ad 0e       	add	r10, r29
    3fc2:	09 f4       	brne	.+2      	; 0x3fc6 <conv_int+0x5c>
    3fc4:	3e c0       	rjmp	.+124    	; 0x4042 <__stack+0x43>
    3fc6:	c8 01       	movw	r24, r16
    3fc8:	b5 d3       	rcall	.+1898   	; 0x4734 <fgetc>
    3fca:	97 fd       	sbrc	r25, 7
    3fcc:	3a c0       	rjmp	.+116    	; 0x4042 <__stack+0x43>
    3fce:	9c 01       	movw	r18, r24
    3fd0:	2f 7d       	andi	r18, 0xDF	; 223
    3fd2:	33 27       	eor	r19, r19
    3fd4:	28 35       	cpi	r18, 0x58	; 88
    3fd6:	31 05       	cpc	r19, r1
    3fd8:	41 f4       	brne	.+16     	; 0x3fea <conv_int+0x80>
    3fda:	c2 64       	ori	r28, 0x42	; 66
    3fdc:	d2 50       	subi	r29, 0x02	; 2
    3fde:	89 f1       	breq	.+98     	; 0x4042 <__stack+0x43>
    3fe0:	c8 01       	movw	r24, r16
    3fe2:	a8 d3       	rcall	.+1872   	; 0x4734 <fgetc>
    3fe4:	97 ff       	sbrs	r25, 7
    3fe6:	07 c0       	rjmp	.+14     	; 0x3ff6 <conv_int+0x8c>
    3fe8:	2c c0       	rjmp	.+88     	; 0x4042 <__stack+0x43>
    3fea:	b6 fe       	sbrs	r11, 6
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <conv_int+0x88>
    3fee:	c2 60       	ori	r28, 0x02	; 2
    3ff0:	01 c0       	rjmp	.+2      	; 0x3ff4 <conv_int+0x8a>
    3ff2:	c2 61       	ori	r28, 0x12	; 18
    3ff4:	da 2d       	mov	r29, r10
    3ff6:	81 2c       	mov	r8, r1
    3ff8:	91 2c       	mov	r9, r1
    3ffa:	54 01       	movw	r10, r8
    3ffc:	20 ed       	ldi	r18, 0xD0	; 208
    3ffe:	28 0f       	add	r18, r24
    4000:	28 30       	cpi	r18, 0x08	; 8
    4002:	78 f0       	brcs	.+30     	; 0x4022 <__stack+0x23>
    4004:	c4 ff       	sbrs	r28, 4
    4006:	03 c0       	rjmp	.+6      	; 0x400e <__stack+0xf>
    4008:	b8 01       	movw	r22, r16
    400a:	0e d4       	rcall	.+2076   	; 0x4828 <ungetc>
    400c:	17 c0       	rjmp	.+46     	; 0x403c <__stack+0x3d>
    400e:	2a 30       	cpi	r18, 0x0A	; 10
    4010:	40 f0       	brcs	.+16     	; 0x4022 <__stack+0x23>
    4012:	c6 ff       	sbrs	r28, 6
    4014:	f9 cf       	rjmp	.-14     	; 0x4008 <__stack+0x9>
    4016:	2f 7d       	andi	r18, 0xDF	; 223
    4018:	3f ee       	ldi	r19, 0xEF	; 239
    401a:	32 0f       	add	r19, r18
    401c:	36 30       	cpi	r19, 0x06	; 6
    401e:	a0 f7       	brcc	.-24     	; 0x4008 <__stack+0x9>
    4020:	27 50       	subi	r18, 0x07	; 7
    4022:	4c 2f       	mov	r20, r28
    4024:	c5 01       	movw	r24, r10
    4026:	b4 01       	movw	r22, r8
    4028:	63 df       	rcall	.-314    	; 0x3ef0 <mulacc>
    402a:	4b 01       	movw	r8, r22
    402c:	5c 01       	movw	r10, r24
    402e:	c2 60       	ori	r28, 0x02	; 2
    4030:	d1 50       	subi	r29, 0x01	; 1
    4032:	51 f0       	breq	.+20     	; 0x4048 <__stack+0x49>
    4034:	c8 01       	movw	r24, r16
    4036:	7e d3       	rcall	.+1788   	; 0x4734 <fgetc>
    4038:	97 ff       	sbrs	r25, 7
    403a:	e0 cf       	rjmp	.-64     	; 0x3ffc <conv_int+0x92>
    403c:	c1 fd       	sbrc	r28, 1
    403e:	04 c0       	rjmp	.+8      	; 0x4048 <__stack+0x49>
    4040:	b0 cf       	rjmp	.-160    	; 0x3fa2 <conv_int+0x38>
    4042:	81 2c       	mov	r8, r1
    4044:	91 2c       	mov	r9, r1
    4046:	54 01       	movw	r10, r8
    4048:	c7 ff       	sbrs	r28, 7
    404a:	08 c0       	rjmp	.+16     	; 0x405c <__stack+0x5d>
    404c:	b0 94       	com	r11
    404e:	a0 94       	com	r10
    4050:	90 94       	com	r9
    4052:	80 94       	com	r8
    4054:	81 1c       	adc	r8, r1
    4056:	91 1c       	adc	r9, r1
    4058:	a1 1c       	adc	r10, r1
    405a:	b1 1c       	adc	r11, r1
    405c:	2c 2f       	mov	r18, r28
    405e:	b5 01       	movw	r22, r10
    4060:	a4 01       	movw	r20, r8
    4062:	c7 01       	movw	r24, r14
    4064:	39 df       	rcall	.-398    	; 0x3ed8 <putval>
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	1f 91       	pop	r17
    406e:	0f 91       	pop	r16
    4070:	ff 90       	pop	r15
    4072:	ef 90       	pop	r14
    4074:	bf 90       	pop	r11
    4076:	af 90       	pop	r10
    4078:	9f 90       	pop	r9
    407a:	8f 90       	pop	r8
    407c:	08 95       	ret

0000407e <conv_brk>:
    407e:	5f 92       	push	r5
    4080:	6f 92       	push	r6
    4082:	7f 92       	push	r7
    4084:	8f 92       	push	r8
    4086:	9f 92       	push	r9
    4088:	af 92       	push	r10
    408a:	bf 92       	push	r11
    408c:	cf 92       	push	r12
    408e:	df 92       	push	r13
    4090:	ef 92       	push	r14
    4092:	ff 92       	push	r15
    4094:	0f 93       	push	r16
    4096:	1f 93       	push	r17
    4098:	cf 93       	push	r28
    409a:	df 93       	push	r29
    409c:	cd b7       	in	r28, 0x3d	; 61
    409e:	de b7       	in	r29, 0x3e	; 62
    40a0:	a0 97       	sbiw	r28, 0x20	; 32
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	de bf       	out	0x3e, r29	; 62
    40a6:	5c 01       	movw	r10, r24
    40a8:	96 2e       	mov	r9, r22
    40aa:	7a 01       	movw	r14, r20
    40ac:	f9 01       	movw	r30, r18
    40ae:	8e 01       	movw	r16, r28
    40b0:	0f 5f       	subi	r16, 0xFF	; 255
    40b2:	1f 4f       	sbci	r17, 0xFF	; 255
    40b4:	68 01       	movw	r12, r16
    40b6:	80 e2       	ldi	r24, 0x20	; 32
    40b8:	d8 01       	movw	r26, r16
    40ba:	1d 92       	st	X+, r1
    40bc:	8a 95       	dec	r24
    40be:	e9 f7       	brne	.-6      	; 0x40ba <conv_brk+0x3c>
    40c0:	d5 01       	movw	r26, r10
    40c2:	13 96       	adiw	r26, 0x03	; 3
    40c4:	8c 90       	ld	r8, X
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	61 2c       	mov	r6, r1
    40cc:	71 2c       	mov	r7, r1
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	61 e0       	ldi	r22, 0x01	; 1
    40d2:	70 e0       	ldi	r23, 0x00	; 0
    40d4:	83 fc       	sbrc	r8, 3
    40d6:	25 91       	lpm	r18, Z+
    40d8:	83 fe       	sbrs	r8, 3
    40da:	21 91       	ld	r18, Z+
    40dc:	8f 01       	movw	r16, r30
    40de:	52 2e       	mov	r5, r18
    40e0:	21 11       	cpse	r18, r1
    40e2:	03 c0       	rjmp	.+6      	; 0x40ea <conv_brk+0x6c>
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	90 c0       	rjmp	.+288    	; 0x420a <conv_brk+0x18c>
    40ea:	2e 35       	cpi	r18, 0x5E	; 94
    40ec:	11 f4       	brne	.+4      	; 0x40f2 <conv_brk+0x74>
    40ee:	00 97       	sbiw	r24, 0x00	; 0
    40f0:	51 f1       	breq	.+84     	; 0x4146 <conv_brk+0xc8>
    40f2:	43 2f       	mov	r20, r19
    40f4:	50 e0       	ldi	r21, 0x00	; 0
    40f6:	48 17       	cp	r20, r24
    40f8:	59 07       	cpc	r21, r25
    40fa:	3c f4       	brge	.+14     	; 0x410a <conv_brk+0x8c>
    40fc:	2d 35       	cpi	r18, 0x5D	; 93
    40fe:	59 f1       	breq	.+86     	; 0x4156 <conv_brk+0xd8>
    4100:	2d 32       	cpi	r18, 0x2D	; 45
    4102:	19 f4       	brne	.+6      	; 0x410a <conv_brk+0x8c>
    4104:	77 20       	and	r7, r7
    4106:	09 f1       	breq	.+66     	; 0x414a <conv_brk+0xcc>
    4108:	03 c0       	rjmp	.+6      	; 0x4110 <conv_brk+0x92>
    410a:	77 20       	and	r7, r7
    410c:	09 f4       	brne	.+2      	; 0x4110 <conv_brk+0x92>
    410e:	68 c0       	rjmp	.+208    	; 0x41e0 <conv_brk+0x162>
    4110:	45 2d       	mov	r20, r5
    4112:	46 95       	lsr	r20
    4114:	46 95       	lsr	r20
    4116:	46 95       	lsr	r20
    4118:	d6 01       	movw	r26, r12
    411a:	a4 0f       	add	r26, r20
    411c:	b1 1d       	adc	r27, r1
    411e:	45 2d       	mov	r20, r5
    4120:	47 70       	andi	r20, 0x07	; 7
    4122:	8b 01       	movw	r16, r22
    4124:	02 c0       	rjmp	.+4      	; 0x412a <conv_brk+0xac>
    4126:	00 0f       	add	r16, r16
    4128:	11 1f       	adc	r17, r17
    412a:	4a 95       	dec	r20
    412c:	e2 f7       	brpl	.-8      	; 0x4126 <conv_brk+0xa8>
    412e:	a8 01       	movw	r20, r16
    4130:	5c 91       	ld	r21, X
    4132:	45 2b       	or	r20, r21
    4134:	4c 93       	st	X, r20
    4136:	65 14       	cp	r6, r5
    4138:	59 f0       	breq	.+22     	; 0x4150 <conv_brk+0xd2>
    413a:	56 14       	cp	r5, r6
    413c:	10 f4       	brcc	.+4      	; 0x4142 <conv_brk+0xc4>
    413e:	53 94       	inc	r5
    4140:	e7 cf       	rjmp	.-50     	; 0x4110 <conv_brk+0x92>
    4142:	5a 94       	dec	r5
    4144:	e5 cf       	rjmp	.-54     	; 0x4110 <conv_brk+0x92>
    4146:	31 e0       	ldi	r19, 0x01	; 1
    4148:	04 c0       	rjmp	.+8      	; 0x4152 <conv_brk+0xd4>
    414a:	77 24       	eor	r7, r7
    414c:	73 94       	inc	r7
    414e:	01 c0       	rjmp	.+2      	; 0x4152 <conv_brk+0xd4>
    4150:	71 2c       	mov	r7, r1
    4152:	01 96       	adiw	r24, 0x01	; 1
    4154:	bf cf       	rjmp	.-130    	; 0x40d4 <conv_brk+0x56>
    4156:	77 20       	and	r7, r7
    4158:	19 f0       	breq	.+6      	; 0x4160 <conv_brk+0xe2>
    415a:	8e 81       	ldd	r24, Y+6	; 0x06
    415c:	80 62       	ori	r24, 0x20	; 32
    415e:	8e 83       	std	Y+6, r24	; 0x06
    4160:	31 11       	cpse	r19, r1
    4162:	03 c0       	rjmp	.+6      	; 0x416a <conv_brk+0xec>
    4164:	88 24       	eor	r8, r8
    4166:	83 94       	inc	r8
    4168:	17 c0       	rjmp	.+46     	; 0x4198 <conv_brk+0x11a>
    416a:	f6 01       	movw	r30, r12
    416c:	9e 01       	movw	r18, r28
    416e:	2f 5d       	subi	r18, 0xDF	; 223
    4170:	3f 4f       	sbci	r19, 0xFF	; 255
    4172:	80 81       	ld	r24, Z
    4174:	80 95       	com	r24
    4176:	81 93       	st	Z+, r24
    4178:	2e 17       	cp	r18, r30
    417a:	3f 07       	cpc	r19, r31
    417c:	d1 f7       	brne	.-12     	; 0x4172 <conv_brk+0xf4>
    417e:	f2 cf       	rjmp	.-28     	; 0x4164 <conv_brk+0xe6>
    4180:	e1 14       	cp	r14, r1
    4182:	f1 04       	cpc	r15, r1
    4184:	29 f0       	breq	.+10     	; 0x4190 <conv_brk+0x112>
    4186:	d7 01       	movw	r26, r14
    4188:	8c 93       	st	X, r24
    418a:	f7 01       	movw	r30, r14
    418c:	31 96       	adiw	r30, 0x01	; 1
    418e:	7f 01       	movw	r14, r30
    4190:	9a 94       	dec	r9
    4192:	81 2c       	mov	r8, r1
    4194:	99 20       	and	r9, r9
    4196:	e9 f0       	breq	.+58     	; 0x41d2 <conv_brk+0x154>
    4198:	c5 01       	movw	r24, r10
    419a:	cc d2       	rcall	.+1432   	; 0x4734 <fgetc>
    419c:	97 fd       	sbrc	r25, 7
    419e:	17 c0       	rjmp	.+46     	; 0x41ce <conv_brk+0x150>
    41a0:	fc 01       	movw	r30, r24
    41a2:	ff 27       	eor	r31, r31
    41a4:	23 e0       	ldi	r18, 0x03	; 3
    41a6:	f5 95       	asr	r31
    41a8:	e7 95       	ror	r30
    41aa:	2a 95       	dec	r18
    41ac:	e1 f7       	brne	.-8      	; 0x41a6 <conv_brk+0x128>
    41ae:	ec 0d       	add	r30, r12
    41b0:	fd 1d       	adc	r31, r13
    41b2:	20 81       	ld	r18, Z
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	ac 01       	movw	r20, r24
    41b8:	47 70       	andi	r20, 0x07	; 7
    41ba:	55 27       	eor	r21, r21
    41bc:	02 c0       	rjmp	.+4      	; 0x41c2 <conv_brk+0x144>
    41be:	35 95       	asr	r19
    41c0:	27 95       	ror	r18
    41c2:	4a 95       	dec	r20
    41c4:	e2 f7       	brpl	.-8      	; 0x41be <conv_brk+0x140>
    41c6:	20 fd       	sbrc	r18, 0
    41c8:	db cf       	rjmp	.-74     	; 0x4180 <conv_brk+0x102>
    41ca:	b5 01       	movw	r22, r10
    41cc:	2d d3       	rcall	.+1626   	; 0x4828 <ungetc>
    41ce:	81 10       	cpse	r8, r1
    41d0:	89 cf       	rjmp	.-238    	; 0x40e4 <conv_brk+0x66>
    41d2:	e1 14       	cp	r14, r1
    41d4:	f1 04       	cpc	r15, r1
    41d6:	11 f0       	breq	.+4      	; 0x41dc <conv_brk+0x15e>
    41d8:	d7 01       	movw	r26, r14
    41da:	1c 92       	st	X, r1
    41dc:	c8 01       	movw	r24, r16
    41de:	15 c0       	rjmp	.+42     	; 0x420a <conv_brk+0x18c>
    41e0:	42 2f       	mov	r20, r18
    41e2:	46 95       	lsr	r20
    41e4:	46 95       	lsr	r20
    41e6:	46 95       	lsr	r20
    41e8:	d6 01       	movw	r26, r12
    41ea:	a4 0f       	add	r26, r20
    41ec:	b1 1d       	adc	r27, r1
    41ee:	42 2f       	mov	r20, r18
    41f0:	47 70       	andi	r20, 0x07	; 7
    41f2:	8b 01       	movw	r16, r22
    41f4:	02 c0       	rjmp	.+4      	; 0x41fa <conv_brk+0x17c>
    41f6:	00 0f       	add	r16, r16
    41f8:	11 1f       	adc	r17, r17
    41fa:	4a 95       	dec	r20
    41fc:	e2 f7       	brpl	.-8      	; 0x41f6 <conv_brk+0x178>
    41fe:	a8 01       	movw	r20, r16
    4200:	5c 91       	ld	r21, X
    4202:	45 2b       	or	r20, r21
    4204:	4c 93       	st	X, r20
    4206:	62 2e       	mov	r6, r18
    4208:	a4 cf       	rjmp	.-184    	; 0x4152 <conv_brk+0xd4>
    420a:	a0 96       	adiw	r28, 0x20	; 32
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	de bf       	out	0x3e, r29	; 62
    4210:	df 91       	pop	r29
    4212:	cf 91       	pop	r28
    4214:	1f 91       	pop	r17
    4216:	0f 91       	pop	r16
    4218:	ff 90       	pop	r15
    421a:	ef 90       	pop	r14
    421c:	df 90       	pop	r13
    421e:	cf 90       	pop	r12
    4220:	bf 90       	pop	r11
    4222:	af 90       	pop	r10
    4224:	9f 90       	pop	r9
    4226:	8f 90       	pop	r8
    4228:	7f 90       	pop	r7
    422a:	6f 90       	pop	r6
    422c:	5f 90       	pop	r5
    422e:	08 95       	ret

00004230 <vfscanf>:
    4230:	5f 92       	push	r5
    4232:	6f 92       	push	r6
    4234:	7f 92       	push	r7
    4236:	8f 92       	push	r8
    4238:	9f 92       	push	r9
    423a:	af 92       	push	r10
    423c:	bf 92       	push	r11
    423e:	cf 92       	push	r12
    4240:	df 92       	push	r13
    4242:	ef 92       	push	r14
    4244:	ff 92       	push	r15
    4246:	0f 93       	push	r16
    4248:	1f 93       	push	r17
    424a:	cf 93       	push	r28
    424c:	df 93       	push	r29
    424e:	6c 01       	movw	r12, r24
    4250:	eb 01       	movw	r28, r22
    4252:	5a 01       	movw	r10, r20
    4254:	fc 01       	movw	r30, r24
    4256:	16 82       	std	Z+6, r1	; 0x06
    4258:	17 82       	std	Z+7, r1	; 0x07
    425a:	51 2c       	mov	r5, r1
    425c:	f6 01       	movw	r30, r12
    425e:	e3 80       	ldd	r14, Z+3	; 0x03
    4260:	fe 01       	movw	r30, r28
    4262:	e3 fc       	sbrc	r14, 3
    4264:	85 91       	lpm	r24, Z+
    4266:	e3 fe       	sbrs	r14, 3
    4268:	81 91       	ld	r24, Z+
    426a:	18 2f       	mov	r17, r24
    426c:	ef 01       	movw	r28, r30
    426e:	88 23       	and	r24, r24
    4270:	09 f4       	brne	.+2      	; 0x4274 <vfscanf+0x44>
    4272:	e0 c0       	rjmp	.+448    	; 0x4434 <vfscanf+0x204>
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	2e d2       	rcall	.+1116   	; 0x46d4 <isspace>
    4278:	89 2b       	or	r24, r25
    427a:	19 f0       	breq	.+6      	; 0x4282 <vfscanf+0x52>
    427c:	c6 01       	movw	r24, r12
    427e:	5f de       	rcall	.-834    	; 0x3f3e <skip_spaces>
    4280:	ed cf       	rjmp	.-38     	; 0x425c <vfscanf+0x2c>
    4282:	15 32       	cpi	r17, 0x25	; 37
    4284:	41 f4       	brne	.+16     	; 0x4296 <vfscanf+0x66>
    4286:	fe 01       	movw	r30, r28
    4288:	e3 fc       	sbrc	r14, 3
    428a:	15 91       	lpm	r17, Z+
    428c:	e3 fe       	sbrs	r14, 3
    428e:	11 91       	ld	r17, Z+
    4290:	ef 01       	movw	r28, r30
    4292:	15 32       	cpi	r17, 0x25	; 37
    4294:	71 f4       	brne	.+28     	; 0x42b2 <vfscanf+0x82>
    4296:	c6 01       	movw	r24, r12
    4298:	4d d2       	rcall	.+1178   	; 0x4734 <fgetc>
    429a:	97 fd       	sbrc	r25, 7
    429c:	c9 c0       	rjmp	.+402    	; 0x4430 <vfscanf+0x200>
    429e:	41 2f       	mov	r20, r17
    42a0:	50 e0       	ldi	r21, 0x00	; 0
    42a2:	9c 01       	movw	r18, r24
    42a4:	33 27       	eor	r19, r19
    42a6:	24 17       	cp	r18, r20
    42a8:	35 07       	cpc	r19, r21
    42aa:	c1 f2       	breq	.-80     	; 0x425c <vfscanf+0x2c>
    42ac:	b6 01       	movw	r22, r12
    42ae:	bc d2       	rcall	.+1400   	; 0x4828 <ungetc>
    42b0:	c1 c0       	rjmp	.+386    	; 0x4434 <vfscanf+0x204>
    42b2:	1a 32       	cpi	r17, 0x2A	; 42
    42b4:	39 f4       	brne	.+14     	; 0x42c4 <vfscanf+0x94>
    42b6:	e3 fc       	sbrc	r14, 3
    42b8:	15 91       	lpm	r17, Z+
    42ba:	e3 fe       	sbrs	r14, 3
    42bc:	11 91       	ld	r17, Z+
    42be:	ef 01       	movw	r28, r30
    42c0:	01 e0       	ldi	r16, 0x01	; 1
    42c2:	01 c0       	rjmp	.+2      	; 0x42c6 <vfscanf+0x96>
    42c4:	00 e0       	ldi	r16, 0x00	; 0
    42c6:	f1 2c       	mov	r15, r1
    42c8:	20 ed       	ldi	r18, 0xD0	; 208
    42ca:	21 0f       	add	r18, r17
    42cc:	2a 30       	cpi	r18, 0x0A	; 10
    42ce:	78 f4       	brcc	.+30     	; 0x42ee <vfscanf+0xbe>
    42d0:	02 60       	ori	r16, 0x02	; 2
    42d2:	6f 2d       	mov	r22, r15
    42d4:	70 e0       	ldi	r23, 0x00	; 0
    42d6:	80 e0       	ldi	r24, 0x00	; 0
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	40 e2       	ldi	r20, 0x20	; 32
    42dc:	09 de       	rcall	.-1006   	; 0x3ef0 <mulacc>
    42de:	f6 2e       	mov	r15, r22
    42e0:	fe 01       	movw	r30, r28
    42e2:	e3 fc       	sbrc	r14, 3
    42e4:	15 91       	lpm	r17, Z+
    42e6:	e3 fe       	sbrs	r14, 3
    42e8:	11 91       	ld	r17, Z+
    42ea:	ef 01       	movw	r28, r30
    42ec:	ed cf       	rjmp	.-38     	; 0x42c8 <vfscanf+0x98>
    42ee:	01 ff       	sbrs	r16, 1
    42f0:	03 c0       	rjmp	.+6      	; 0x42f8 <vfscanf+0xc8>
    42f2:	f1 10       	cpse	r15, r1
    42f4:	03 c0       	rjmp	.+6      	; 0x42fc <vfscanf+0xcc>
    42f6:	9e c0       	rjmp	.+316    	; 0x4434 <vfscanf+0x204>
    42f8:	ff 24       	eor	r15, r15
    42fa:	fa 94       	dec	r15
    42fc:	18 36       	cpi	r17, 0x68	; 104
    42fe:	19 f0       	breq	.+6      	; 0x4306 <vfscanf+0xd6>
    4300:	1c 36       	cpi	r17, 0x6C	; 108
    4302:	51 f0       	breq	.+20     	; 0x4318 <vfscanf+0xe8>
    4304:	10 c0       	rjmp	.+32     	; 0x4326 <vfscanf+0xf6>
    4306:	fe 01       	movw	r30, r28
    4308:	e3 fc       	sbrc	r14, 3
    430a:	15 91       	lpm	r17, Z+
    430c:	e3 fe       	sbrs	r14, 3
    430e:	11 91       	ld	r17, Z+
    4310:	ef 01       	movw	r28, r30
    4312:	18 36       	cpi	r17, 0x68	; 104
    4314:	41 f4       	brne	.+16     	; 0x4326 <vfscanf+0xf6>
    4316:	08 60       	ori	r16, 0x08	; 8
    4318:	04 60       	ori	r16, 0x04	; 4
    431a:	fe 01       	movw	r30, r28
    431c:	e3 fc       	sbrc	r14, 3
    431e:	15 91       	lpm	r17, Z+
    4320:	e3 fe       	sbrs	r14, 3
    4322:	11 91       	ld	r17, Z+
    4324:	ef 01       	movw	r28, r30
    4326:	11 23       	and	r17, r17
    4328:	09 f4       	brne	.+2      	; 0x432c <vfscanf+0xfc>
    432a:	84 c0       	rjmp	.+264    	; 0x4434 <vfscanf+0x204>
    432c:	61 2f       	mov	r22, r17
    432e:	70 e0       	ldi	r23, 0x00	; 0
    4330:	8e e7       	ldi	r24, 0x7E	; 126
    4332:	92 e0       	ldi	r25, 0x02	; 2
    4334:	d7 d1       	rcall	.+942    	; 0x46e4 <strchr_P>
    4336:	89 2b       	or	r24, r25
    4338:	09 f4       	brne	.+2      	; 0x433c <vfscanf+0x10c>
    433a:	7c c0       	rjmp	.+248    	; 0x4434 <vfscanf+0x204>
    433c:	00 fd       	sbrc	r16, 0
    433e:	07 c0       	rjmp	.+14     	; 0x434e <vfscanf+0x11e>
    4340:	f5 01       	movw	r30, r10
    4342:	80 80       	ld	r8, Z
    4344:	91 80       	ldd	r9, Z+1	; 0x01
    4346:	c5 01       	movw	r24, r10
    4348:	02 96       	adiw	r24, 0x02	; 2
    434a:	5c 01       	movw	r10, r24
    434c:	02 c0       	rjmp	.+4      	; 0x4352 <vfscanf+0x122>
    434e:	81 2c       	mov	r8, r1
    4350:	91 2c       	mov	r9, r1
    4352:	1e 36       	cpi	r17, 0x6E	; 110
    4354:	49 f4       	brne	.+18     	; 0x4368 <vfscanf+0x138>
    4356:	f6 01       	movw	r30, r12
    4358:	46 81       	ldd	r20, Z+6	; 0x06
    435a:	57 81       	ldd	r21, Z+7	; 0x07
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	70 e0       	ldi	r23, 0x00	; 0
    4360:	20 2f       	mov	r18, r16
    4362:	c4 01       	movw	r24, r8
    4364:	b9 dd       	rcall	.-1166   	; 0x3ed8 <putval>
    4366:	7a cf       	rjmp	.-268    	; 0x425c <vfscanf+0x2c>
    4368:	13 36       	cpi	r17, 0x63	; 99
    436a:	a1 f4       	brne	.+40     	; 0x4394 <vfscanf+0x164>
    436c:	01 fd       	sbrc	r16, 1
    436e:	02 c0       	rjmp	.+4      	; 0x4374 <vfscanf+0x144>
    4370:	ff 24       	eor	r15, r15
    4372:	f3 94       	inc	r15
    4374:	c6 01       	movw	r24, r12
    4376:	de d1       	rcall	.+956    	; 0x4734 <fgetc>
    4378:	97 fd       	sbrc	r25, 7
    437a:	5a c0       	rjmp	.+180    	; 0x4430 <vfscanf+0x200>
    437c:	81 14       	cp	r8, r1
    437e:	91 04       	cpc	r9, r1
    4380:	29 f0       	breq	.+10     	; 0x438c <vfscanf+0x15c>
    4382:	f4 01       	movw	r30, r8
    4384:	80 83       	st	Z, r24
    4386:	c4 01       	movw	r24, r8
    4388:	01 96       	adiw	r24, 0x01	; 1
    438a:	4c 01       	movw	r8, r24
    438c:	fa 94       	dec	r15
    438e:	f1 10       	cpse	r15, r1
    4390:	f1 cf       	rjmp	.-30     	; 0x4374 <vfscanf+0x144>
    4392:	4a c0       	rjmp	.+148    	; 0x4428 <vfscanf+0x1f8>
    4394:	1b 35       	cpi	r17, 0x5B	; 91
    4396:	51 f4       	brne	.+20     	; 0x43ac <vfscanf+0x17c>
    4398:	9e 01       	movw	r18, r28
    439a:	a4 01       	movw	r20, r8
    439c:	6f 2d       	mov	r22, r15
    439e:	c6 01       	movw	r24, r12
    43a0:	6e de       	rcall	.-804    	; 0x407e <conv_brk>
    43a2:	ec 01       	movw	r28, r24
    43a4:	89 2b       	or	r24, r25
    43a6:	09 f0       	breq	.+2      	; 0x43aa <vfscanf+0x17a>
    43a8:	3f c0       	rjmp	.+126    	; 0x4428 <vfscanf+0x1f8>
    43aa:	39 c0       	rjmp	.+114    	; 0x441e <vfscanf+0x1ee>
    43ac:	c6 01       	movw	r24, r12
    43ae:	c7 dd       	rcall	.-1138   	; 0x3f3e <skip_spaces>
    43b0:	97 fd       	sbrc	r25, 7
    43b2:	3e c0       	rjmp	.+124    	; 0x4430 <vfscanf+0x200>
    43b4:	1f 36       	cpi	r17, 0x6F	; 111
    43b6:	49 f1       	breq	.+82     	; 0x440a <vfscanf+0x1da>
    43b8:	28 f4       	brcc	.+10     	; 0x43c4 <vfscanf+0x194>
    43ba:	14 36       	cpi	r17, 0x64	; 100
    43bc:	21 f1       	breq	.+72     	; 0x4406 <vfscanf+0x1d6>
    43be:	19 36       	cpi	r17, 0x69	; 105
    43c0:	39 f1       	breq	.+78     	; 0x4410 <vfscanf+0x1e0>
    43c2:	25 c0       	rjmp	.+74     	; 0x440e <vfscanf+0x1de>
    43c4:	13 37       	cpi	r17, 0x73	; 115
    43c6:	71 f0       	breq	.+28     	; 0x43e4 <vfscanf+0x1b4>
    43c8:	15 37       	cpi	r17, 0x75	; 117
    43ca:	e9 f0       	breq	.+58     	; 0x4406 <vfscanf+0x1d6>
    43cc:	20 c0       	rjmp	.+64     	; 0x440e <vfscanf+0x1de>
    43ce:	81 14       	cp	r8, r1
    43d0:	91 04       	cpc	r9, r1
    43d2:	29 f0       	breq	.+10     	; 0x43de <vfscanf+0x1ae>
    43d4:	f4 01       	movw	r30, r8
    43d6:	60 82       	st	Z, r6
    43d8:	c4 01       	movw	r24, r8
    43da:	01 96       	adiw	r24, 0x01	; 1
    43dc:	4c 01       	movw	r8, r24
    43de:	fa 94       	dec	r15
    43e0:	ff 20       	and	r15, r15
    43e2:	59 f0       	breq	.+22     	; 0x43fa <vfscanf+0x1ca>
    43e4:	c6 01       	movw	r24, r12
    43e6:	a6 d1       	rcall	.+844    	; 0x4734 <fgetc>
    43e8:	3c 01       	movw	r6, r24
    43ea:	97 fd       	sbrc	r25, 7
    43ec:	06 c0       	rjmp	.+12     	; 0x43fa <vfscanf+0x1ca>
    43ee:	72 d1       	rcall	.+740    	; 0x46d4 <isspace>
    43f0:	89 2b       	or	r24, r25
    43f2:	69 f3       	breq	.-38     	; 0x43ce <vfscanf+0x19e>
    43f4:	b6 01       	movw	r22, r12
    43f6:	c3 01       	movw	r24, r6
    43f8:	17 d2       	rcall	.+1070   	; 0x4828 <ungetc>
    43fa:	81 14       	cp	r8, r1
    43fc:	91 04       	cpc	r9, r1
    43fe:	a1 f0       	breq	.+40     	; 0x4428 <vfscanf+0x1f8>
    4400:	f4 01       	movw	r30, r8
    4402:	10 82       	st	Z, r1
    4404:	11 c0       	rjmp	.+34     	; 0x4428 <vfscanf+0x1f8>
    4406:	00 62       	ori	r16, 0x20	; 32
    4408:	03 c0       	rjmp	.+6      	; 0x4410 <vfscanf+0x1e0>
    440a:	00 61       	ori	r16, 0x10	; 16
    440c:	01 c0       	rjmp	.+2      	; 0x4410 <vfscanf+0x1e0>
    440e:	00 64       	ori	r16, 0x40	; 64
    4410:	20 2f       	mov	r18, r16
    4412:	a4 01       	movw	r20, r8
    4414:	6f 2d       	mov	r22, r15
    4416:	c6 01       	movw	r24, r12
    4418:	a8 dd       	rcall	.-1200   	; 0x3f6a <conv_int>
    441a:	81 11       	cpse	r24, r1
    441c:	05 c0       	rjmp	.+10     	; 0x4428 <vfscanf+0x1f8>
    441e:	f6 01       	movw	r30, r12
    4420:	83 81       	ldd	r24, Z+3	; 0x03
    4422:	80 73       	andi	r24, 0x30	; 48
    4424:	29 f4       	brne	.+10     	; 0x4430 <vfscanf+0x200>
    4426:	06 c0       	rjmp	.+12     	; 0x4434 <vfscanf+0x204>
    4428:	00 fd       	sbrc	r16, 0
    442a:	18 cf       	rjmp	.-464    	; 0x425c <vfscanf+0x2c>
    442c:	53 94       	inc	r5
    442e:	16 cf       	rjmp	.-468    	; 0x425c <vfscanf+0x2c>
    4430:	55 20       	and	r5, r5
    4432:	19 f0       	breq	.+6      	; 0x443a <vfscanf+0x20a>
    4434:	85 2d       	mov	r24, r5
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	02 c0       	rjmp	.+4      	; 0x443e <vfscanf+0x20e>
    443a:	8f ef       	ldi	r24, 0xFF	; 255
    443c:	9f ef       	ldi	r25, 0xFF	; 255
    443e:	df 91       	pop	r29
    4440:	cf 91       	pop	r28
    4442:	1f 91       	pop	r17
    4444:	0f 91       	pop	r16
    4446:	ff 90       	pop	r15
    4448:	ef 90       	pop	r14
    444a:	df 90       	pop	r13
    444c:	cf 90       	pop	r12
    444e:	bf 90       	pop	r11
    4450:	af 90       	pop	r10
    4452:	9f 90       	pop	r9
    4454:	8f 90       	pop	r8
    4456:	7f 90       	pop	r7
    4458:	6f 90       	pop	r6
    445a:	5f 90       	pop	r5
    445c:	08 95       	ret

0000445e <calloc>:
    445e:	0f 93       	push	r16
    4460:	1f 93       	push	r17
    4462:	cf 93       	push	r28
    4464:	df 93       	push	r29
    4466:	86 9f       	mul	r24, r22
    4468:	80 01       	movw	r16, r0
    446a:	87 9f       	mul	r24, r23
    446c:	10 0d       	add	r17, r0
    446e:	96 9f       	mul	r25, r22
    4470:	10 0d       	add	r17, r0
    4472:	11 24       	eor	r1, r1
    4474:	c8 01       	movw	r24, r16
    4476:	0d d0       	rcall	.+26     	; 0x4492 <malloc>
    4478:	ec 01       	movw	r28, r24
    447a:	00 97       	sbiw	r24, 0x00	; 0
    447c:	21 f0       	breq	.+8      	; 0x4486 <calloc+0x28>
    447e:	a8 01       	movw	r20, r16
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	70 e0       	ldi	r23, 0x00	; 0
    4484:	45 d1       	rcall	.+650    	; 0x4710 <memset>
    4486:	ce 01       	movw	r24, r28
    4488:	df 91       	pop	r29
    448a:	cf 91       	pop	r28
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	08 95       	ret

00004492 <malloc>:
    4492:	0f 93       	push	r16
    4494:	1f 93       	push	r17
    4496:	cf 93       	push	r28
    4498:	df 93       	push	r29
    449a:	82 30       	cpi	r24, 0x02	; 2
    449c:	91 05       	cpc	r25, r1
    449e:	10 f4       	brcc	.+4      	; 0x44a4 <malloc+0x12>
    44a0:	82 e0       	ldi	r24, 0x02	; 2
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	e0 91 bc 21 	lds	r30, 0x21BC	; 0x8021bc <__flp>
    44a8:	f0 91 bd 21 	lds	r31, 0x21BD	; 0x8021bd <__flp+0x1>
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	a0 e0       	ldi	r26, 0x00	; 0
    44b2:	b0 e0       	ldi	r27, 0x00	; 0
    44b4:	30 97       	sbiw	r30, 0x00	; 0
    44b6:	19 f1       	breq	.+70     	; 0x44fe <malloc+0x6c>
    44b8:	40 81       	ld	r20, Z
    44ba:	51 81       	ldd	r21, Z+1	; 0x01
    44bc:	02 81       	ldd	r16, Z+2	; 0x02
    44be:	13 81       	ldd	r17, Z+3	; 0x03
    44c0:	48 17       	cp	r20, r24
    44c2:	59 07       	cpc	r21, r25
    44c4:	c8 f0       	brcs	.+50     	; 0x44f8 <malloc+0x66>
    44c6:	84 17       	cp	r24, r20
    44c8:	95 07       	cpc	r25, r21
    44ca:	69 f4       	brne	.+26     	; 0x44e6 <malloc+0x54>
    44cc:	10 97       	sbiw	r26, 0x00	; 0
    44ce:	31 f0       	breq	.+12     	; 0x44dc <malloc+0x4a>
    44d0:	12 96       	adiw	r26, 0x02	; 2
    44d2:	0c 93       	st	X, r16
    44d4:	12 97       	sbiw	r26, 0x02	; 2
    44d6:	13 96       	adiw	r26, 0x03	; 3
    44d8:	1c 93       	st	X, r17
    44da:	27 c0       	rjmp	.+78     	; 0x452a <malloc+0x98>
    44dc:	00 93 bc 21 	sts	0x21BC, r16	; 0x8021bc <__flp>
    44e0:	10 93 bd 21 	sts	0x21BD, r17	; 0x8021bd <__flp+0x1>
    44e4:	22 c0       	rjmp	.+68     	; 0x452a <malloc+0x98>
    44e6:	21 15       	cp	r18, r1
    44e8:	31 05       	cpc	r19, r1
    44ea:	19 f0       	breq	.+6      	; 0x44f2 <malloc+0x60>
    44ec:	42 17       	cp	r20, r18
    44ee:	53 07       	cpc	r21, r19
    44f0:	18 f4       	brcc	.+6      	; 0x44f8 <malloc+0x66>
    44f2:	9a 01       	movw	r18, r20
    44f4:	bd 01       	movw	r22, r26
    44f6:	ef 01       	movw	r28, r30
    44f8:	df 01       	movw	r26, r30
    44fa:	f8 01       	movw	r30, r16
    44fc:	db cf       	rjmp	.-74     	; 0x44b4 <malloc+0x22>
    44fe:	21 15       	cp	r18, r1
    4500:	31 05       	cpc	r19, r1
    4502:	f9 f0       	breq	.+62     	; 0x4542 <malloc+0xb0>
    4504:	28 1b       	sub	r18, r24
    4506:	39 0b       	sbc	r19, r25
    4508:	24 30       	cpi	r18, 0x04	; 4
    450a:	31 05       	cpc	r19, r1
    450c:	80 f4       	brcc	.+32     	; 0x452e <malloc+0x9c>
    450e:	8a 81       	ldd	r24, Y+2	; 0x02
    4510:	9b 81       	ldd	r25, Y+3	; 0x03
    4512:	61 15       	cp	r22, r1
    4514:	71 05       	cpc	r23, r1
    4516:	21 f0       	breq	.+8      	; 0x4520 <malloc+0x8e>
    4518:	fb 01       	movw	r30, r22
    451a:	82 83       	std	Z+2, r24	; 0x02
    451c:	93 83       	std	Z+3, r25	; 0x03
    451e:	04 c0       	rjmp	.+8      	; 0x4528 <malloc+0x96>
    4520:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <__flp>
    4524:	90 93 bd 21 	sts	0x21BD, r25	; 0x8021bd <__flp+0x1>
    4528:	fe 01       	movw	r30, r28
    452a:	32 96       	adiw	r30, 0x02	; 2
    452c:	44 c0       	rjmp	.+136    	; 0x45b6 <malloc+0x124>
    452e:	fe 01       	movw	r30, r28
    4530:	e2 0f       	add	r30, r18
    4532:	f3 1f       	adc	r31, r19
    4534:	81 93       	st	Z+, r24
    4536:	91 93       	st	Z+, r25
    4538:	22 50       	subi	r18, 0x02	; 2
    453a:	31 09       	sbc	r19, r1
    453c:	28 83       	st	Y, r18
    453e:	39 83       	std	Y+1, r19	; 0x01
    4540:	3a c0       	rjmp	.+116    	; 0x45b6 <malloc+0x124>
    4542:	20 91 ba 21 	lds	r18, 0x21BA	; 0x8021ba <__brkval>
    4546:	30 91 bb 21 	lds	r19, 0x21BB	; 0x8021bb <__brkval+0x1>
    454a:	23 2b       	or	r18, r19
    454c:	41 f4       	brne	.+16     	; 0x455e <malloc+0xcc>
    454e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4552:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4556:	20 93 ba 21 	sts	0x21BA, r18	; 0x8021ba <__brkval>
    455a:	30 93 bb 21 	sts	0x21BB, r19	; 0x8021bb <__brkval+0x1>
    455e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4562:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4566:	21 15       	cp	r18, r1
    4568:	31 05       	cpc	r19, r1
    456a:	41 f4       	brne	.+16     	; 0x457c <malloc+0xea>
    456c:	2d b7       	in	r18, 0x3d	; 61
    456e:	3e b7       	in	r19, 0x3e	; 62
    4570:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4574:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4578:	24 1b       	sub	r18, r20
    457a:	35 0b       	sbc	r19, r21
    457c:	e0 91 ba 21 	lds	r30, 0x21BA	; 0x8021ba <__brkval>
    4580:	f0 91 bb 21 	lds	r31, 0x21BB	; 0x8021bb <__brkval+0x1>
    4584:	e2 17       	cp	r30, r18
    4586:	f3 07       	cpc	r31, r19
    4588:	a0 f4       	brcc	.+40     	; 0x45b2 <malloc+0x120>
    458a:	2e 1b       	sub	r18, r30
    458c:	3f 0b       	sbc	r19, r31
    458e:	28 17       	cp	r18, r24
    4590:	39 07       	cpc	r19, r25
    4592:	78 f0       	brcs	.+30     	; 0x45b2 <malloc+0x120>
    4594:	ac 01       	movw	r20, r24
    4596:	4e 5f       	subi	r20, 0xFE	; 254
    4598:	5f 4f       	sbci	r21, 0xFF	; 255
    459a:	24 17       	cp	r18, r20
    459c:	35 07       	cpc	r19, r21
    459e:	48 f0       	brcs	.+18     	; 0x45b2 <malloc+0x120>
    45a0:	4e 0f       	add	r20, r30
    45a2:	5f 1f       	adc	r21, r31
    45a4:	40 93 ba 21 	sts	0x21BA, r20	; 0x8021ba <__brkval>
    45a8:	50 93 bb 21 	sts	0x21BB, r21	; 0x8021bb <__brkval+0x1>
    45ac:	81 93       	st	Z+, r24
    45ae:	91 93       	st	Z+, r25
    45b0:	02 c0       	rjmp	.+4      	; 0x45b6 <malloc+0x124>
    45b2:	e0 e0       	ldi	r30, 0x00	; 0
    45b4:	f0 e0       	ldi	r31, 0x00	; 0
    45b6:	cf 01       	movw	r24, r30
    45b8:	df 91       	pop	r29
    45ba:	cf 91       	pop	r28
    45bc:	1f 91       	pop	r17
    45be:	0f 91       	pop	r16
    45c0:	08 95       	ret

000045c2 <free>:
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	00 97       	sbiw	r24, 0x00	; 0
    45c8:	09 f4       	brne	.+2      	; 0x45cc <free+0xa>
    45ca:	81 c0       	rjmp	.+258    	; 0x46ce <free+0x10c>
    45cc:	fc 01       	movw	r30, r24
    45ce:	32 97       	sbiw	r30, 0x02	; 2
    45d0:	12 82       	std	Z+2, r1	; 0x02
    45d2:	13 82       	std	Z+3, r1	; 0x03
    45d4:	a0 91 bc 21 	lds	r26, 0x21BC	; 0x8021bc <__flp>
    45d8:	b0 91 bd 21 	lds	r27, 0x21BD	; 0x8021bd <__flp+0x1>
    45dc:	10 97       	sbiw	r26, 0x00	; 0
    45de:	81 f4       	brne	.+32     	; 0x4600 <free+0x3e>
    45e0:	20 81       	ld	r18, Z
    45e2:	31 81       	ldd	r19, Z+1	; 0x01
    45e4:	82 0f       	add	r24, r18
    45e6:	93 1f       	adc	r25, r19
    45e8:	20 91 ba 21 	lds	r18, 0x21BA	; 0x8021ba <__brkval>
    45ec:	30 91 bb 21 	lds	r19, 0x21BB	; 0x8021bb <__brkval+0x1>
    45f0:	28 17       	cp	r18, r24
    45f2:	39 07       	cpc	r19, r25
    45f4:	51 f5       	brne	.+84     	; 0x464a <free+0x88>
    45f6:	e0 93 ba 21 	sts	0x21BA, r30	; 0x8021ba <__brkval>
    45fa:	f0 93 bb 21 	sts	0x21BB, r31	; 0x8021bb <__brkval+0x1>
    45fe:	67 c0       	rjmp	.+206    	; 0x46ce <free+0x10c>
    4600:	ed 01       	movw	r28, r26
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	ce 17       	cp	r28, r30
    4608:	df 07       	cpc	r29, r31
    460a:	40 f4       	brcc	.+16     	; 0x461c <free+0x5a>
    460c:	4a 81       	ldd	r20, Y+2	; 0x02
    460e:	5b 81       	ldd	r21, Y+3	; 0x03
    4610:	9e 01       	movw	r18, r28
    4612:	41 15       	cp	r20, r1
    4614:	51 05       	cpc	r21, r1
    4616:	f1 f0       	breq	.+60     	; 0x4654 <free+0x92>
    4618:	ea 01       	movw	r28, r20
    461a:	f5 cf       	rjmp	.-22     	; 0x4606 <free+0x44>
    461c:	c2 83       	std	Z+2, r28	; 0x02
    461e:	d3 83       	std	Z+3, r29	; 0x03
    4620:	40 81       	ld	r20, Z
    4622:	51 81       	ldd	r21, Z+1	; 0x01
    4624:	84 0f       	add	r24, r20
    4626:	95 1f       	adc	r25, r21
    4628:	c8 17       	cp	r28, r24
    462a:	d9 07       	cpc	r29, r25
    462c:	59 f4       	brne	.+22     	; 0x4644 <free+0x82>
    462e:	88 81       	ld	r24, Y
    4630:	99 81       	ldd	r25, Y+1	; 0x01
    4632:	84 0f       	add	r24, r20
    4634:	95 1f       	adc	r25, r21
    4636:	02 96       	adiw	r24, 0x02	; 2
    4638:	80 83       	st	Z, r24
    463a:	91 83       	std	Z+1, r25	; 0x01
    463c:	8a 81       	ldd	r24, Y+2	; 0x02
    463e:	9b 81       	ldd	r25, Y+3	; 0x03
    4640:	82 83       	std	Z+2, r24	; 0x02
    4642:	93 83       	std	Z+3, r25	; 0x03
    4644:	21 15       	cp	r18, r1
    4646:	31 05       	cpc	r19, r1
    4648:	29 f4       	brne	.+10     	; 0x4654 <free+0x92>
    464a:	e0 93 bc 21 	sts	0x21BC, r30	; 0x8021bc <__flp>
    464e:	f0 93 bd 21 	sts	0x21BD, r31	; 0x8021bd <__flp+0x1>
    4652:	3d c0       	rjmp	.+122    	; 0x46ce <free+0x10c>
    4654:	e9 01       	movw	r28, r18
    4656:	ea 83       	std	Y+2, r30	; 0x02
    4658:	fb 83       	std	Y+3, r31	; 0x03
    465a:	49 91       	ld	r20, Y+
    465c:	59 91       	ld	r21, Y+
    465e:	c4 0f       	add	r28, r20
    4660:	d5 1f       	adc	r29, r21
    4662:	ec 17       	cp	r30, r28
    4664:	fd 07       	cpc	r31, r29
    4666:	61 f4       	brne	.+24     	; 0x4680 <free+0xbe>
    4668:	80 81       	ld	r24, Z
    466a:	91 81       	ldd	r25, Z+1	; 0x01
    466c:	84 0f       	add	r24, r20
    466e:	95 1f       	adc	r25, r21
    4670:	02 96       	adiw	r24, 0x02	; 2
    4672:	e9 01       	movw	r28, r18
    4674:	88 83       	st	Y, r24
    4676:	99 83       	std	Y+1, r25	; 0x01
    4678:	82 81       	ldd	r24, Z+2	; 0x02
    467a:	93 81       	ldd	r25, Z+3	; 0x03
    467c:	8a 83       	std	Y+2, r24	; 0x02
    467e:	9b 83       	std	Y+3, r25	; 0x03
    4680:	e0 e0       	ldi	r30, 0x00	; 0
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	12 96       	adiw	r26, 0x02	; 2
    4686:	8d 91       	ld	r24, X+
    4688:	9c 91       	ld	r25, X
    468a:	13 97       	sbiw	r26, 0x03	; 3
    468c:	00 97       	sbiw	r24, 0x00	; 0
    468e:	19 f0       	breq	.+6      	; 0x4696 <free+0xd4>
    4690:	fd 01       	movw	r30, r26
    4692:	dc 01       	movw	r26, r24
    4694:	f7 cf       	rjmp	.-18     	; 0x4684 <free+0xc2>
    4696:	8d 91       	ld	r24, X+
    4698:	9c 91       	ld	r25, X
    469a:	11 97       	sbiw	r26, 0x01	; 1
    469c:	9d 01       	movw	r18, r26
    469e:	2e 5f       	subi	r18, 0xFE	; 254
    46a0:	3f 4f       	sbci	r19, 0xFF	; 255
    46a2:	82 0f       	add	r24, r18
    46a4:	93 1f       	adc	r25, r19
    46a6:	20 91 ba 21 	lds	r18, 0x21BA	; 0x8021ba <__brkval>
    46aa:	30 91 bb 21 	lds	r19, 0x21BB	; 0x8021bb <__brkval+0x1>
    46ae:	28 17       	cp	r18, r24
    46b0:	39 07       	cpc	r19, r25
    46b2:	69 f4       	brne	.+26     	; 0x46ce <free+0x10c>
    46b4:	30 97       	sbiw	r30, 0x00	; 0
    46b6:	29 f4       	brne	.+10     	; 0x46c2 <free+0x100>
    46b8:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <__flp>
    46bc:	10 92 bd 21 	sts	0x21BD, r1	; 0x8021bd <__flp+0x1>
    46c0:	02 c0       	rjmp	.+4      	; 0x46c6 <free+0x104>
    46c2:	12 82       	std	Z+2, r1	; 0x02
    46c4:	13 82       	std	Z+3, r1	; 0x03
    46c6:	a0 93 ba 21 	sts	0x21BA, r26	; 0x8021ba <__brkval>
    46ca:	b0 93 bb 21 	sts	0x21BB, r27	; 0x8021bb <__brkval+0x1>
    46ce:	df 91       	pop	r29
    46d0:	cf 91       	pop	r28
    46d2:	08 95       	ret

000046d4 <isspace>:
    46d4:	91 11       	cpse	r25, r1
    46d6:	1f c1       	rjmp	.+574    	; 0x4916 <__ctype_isfalse>
    46d8:	80 32       	cpi	r24, 0x20	; 32
    46da:	19 f0       	breq	.+6      	; 0x46e2 <isspace+0xe>
    46dc:	89 50       	subi	r24, 0x09	; 9
    46de:	85 50       	subi	r24, 0x05	; 5
    46e0:	d0 f7       	brcc	.-12     	; 0x46d6 <isspace+0x2>
    46e2:	08 95       	ret

000046e4 <strchr_P>:
    46e4:	fc 01       	movw	r30, r24
    46e6:	05 90       	lpm	r0, Z+
    46e8:	06 16       	cp	r0, r22
    46ea:	21 f0       	breq	.+8      	; 0x46f4 <strchr_P+0x10>
    46ec:	00 20       	and	r0, r0
    46ee:	d9 f7       	brne	.-10     	; 0x46e6 <strchr_P+0x2>
    46f0:	c0 01       	movw	r24, r0
    46f2:	08 95       	ret
    46f4:	31 97       	sbiw	r30, 0x01	; 1
    46f6:	cf 01       	movw	r24, r30
    46f8:	08 95       	ret

000046fa <strnlen_P>:
    46fa:	fc 01       	movw	r30, r24
    46fc:	05 90       	lpm	r0, Z+
    46fe:	61 50       	subi	r22, 0x01	; 1
    4700:	70 40       	sbci	r23, 0x00	; 0
    4702:	01 10       	cpse	r0, r1
    4704:	d8 f7       	brcc	.-10     	; 0x46fc <strnlen_P+0x2>
    4706:	80 95       	com	r24
    4708:	90 95       	com	r25
    470a:	8e 0f       	add	r24, r30
    470c:	9f 1f       	adc	r25, r31
    470e:	08 95       	ret

00004710 <memset>:
    4710:	dc 01       	movw	r26, r24
    4712:	01 c0       	rjmp	.+2      	; 0x4716 <memset+0x6>
    4714:	6d 93       	st	X+, r22
    4716:	41 50       	subi	r20, 0x01	; 1
    4718:	50 40       	sbci	r21, 0x00	; 0
    471a:	e0 f7       	brcc	.-8      	; 0x4714 <memset+0x4>
    471c:	08 95       	ret

0000471e <strnlen>:
    471e:	fc 01       	movw	r30, r24
    4720:	61 50       	subi	r22, 0x01	; 1
    4722:	70 40       	sbci	r23, 0x00	; 0
    4724:	01 90       	ld	r0, Z+
    4726:	01 10       	cpse	r0, r1
    4728:	d8 f7       	brcc	.-10     	; 0x4720 <strnlen+0x2>
    472a:	80 95       	com	r24
    472c:	90 95       	com	r25
    472e:	8e 0f       	add	r24, r30
    4730:	9f 1f       	adc	r25, r31
    4732:	08 95       	ret

00004734 <fgetc>:
    4734:	cf 93       	push	r28
    4736:	df 93       	push	r29
    4738:	ec 01       	movw	r28, r24
    473a:	2b 81       	ldd	r18, Y+3	; 0x03
    473c:	20 ff       	sbrs	r18, 0
    473e:	33 c0       	rjmp	.+102    	; 0x47a6 <fgetc+0x72>
    4740:	26 ff       	sbrs	r18, 6
    4742:	0a c0       	rjmp	.+20     	; 0x4758 <fgetc+0x24>
    4744:	2f 7b       	andi	r18, 0xBF	; 191
    4746:	2b 83       	std	Y+3, r18	; 0x03
    4748:	8e 81       	ldd	r24, Y+6	; 0x06
    474a:	9f 81       	ldd	r25, Y+7	; 0x07
    474c:	01 96       	adiw	r24, 0x01	; 1
    474e:	8e 83       	std	Y+6, r24	; 0x06
    4750:	9f 83       	std	Y+7, r25	; 0x07
    4752:	8a 81       	ldd	r24, Y+2	; 0x02
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	29 c0       	rjmp	.+82     	; 0x47aa <fgetc+0x76>
    4758:	22 ff       	sbrs	r18, 2
    475a:	0f c0       	rjmp	.+30     	; 0x477a <fgetc+0x46>
    475c:	e8 81       	ld	r30, Y
    475e:	f9 81       	ldd	r31, Y+1	; 0x01
    4760:	80 81       	ld	r24, Z
    4762:	08 2e       	mov	r0, r24
    4764:	00 0c       	add	r0, r0
    4766:	99 0b       	sbc	r25, r25
    4768:	00 97       	sbiw	r24, 0x00	; 0
    476a:	19 f4       	brne	.+6      	; 0x4772 <fgetc+0x3e>
    476c:	20 62       	ori	r18, 0x20	; 32
    476e:	2b 83       	std	Y+3, r18	; 0x03
    4770:	1a c0       	rjmp	.+52     	; 0x47a6 <fgetc+0x72>
    4772:	31 96       	adiw	r30, 0x01	; 1
    4774:	e8 83       	st	Y, r30
    4776:	f9 83       	std	Y+1, r31	; 0x01
    4778:	0e c0       	rjmp	.+28     	; 0x4796 <fgetc+0x62>
    477a:	ea 85       	ldd	r30, Y+10	; 0x0a
    477c:	fb 85       	ldd	r31, Y+11	; 0x0b
    477e:	19 95       	eicall
    4780:	97 ff       	sbrs	r25, 7
    4782:	09 c0       	rjmp	.+18     	; 0x4796 <fgetc+0x62>
    4784:	2b 81       	ldd	r18, Y+3	; 0x03
    4786:	01 96       	adiw	r24, 0x01	; 1
    4788:	11 f0       	breq	.+4      	; 0x478e <fgetc+0x5a>
    478a:	80 e2       	ldi	r24, 0x20	; 32
    478c:	01 c0       	rjmp	.+2      	; 0x4790 <fgetc+0x5c>
    478e:	80 e1       	ldi	r24, 0x10	; 16
    4790:	82 2b       	or	r24, r18
    4792:	8b 83       	std	Y+3, r24	; 0x03
    4794:	08 c0       	rjmp	.+16     	; 0x47a6 <fgetc+0x72>
    4796:	2e 81       	ldd	r18, Y+6	; 0x06
    4798:	3f 81       	ldd	r19, Y+7	; 0x07
    479a:	2f 5f       	subi	r18, 0xFF	; 255
    479c:	3f 4f       	sbci	r19, 0xFF	; 255
    479e:	2e 83       	std	Y+6, r18	; 0x06
    47a0:	3f 83       	std	Y+7, r19	; 0x07
    47a2:	99 27       	eor	r25, r25
    47a4:	02 c0       	rjmp	.+4      	; 0x47aa <fgetc+0x76>
    47a6:	8f ef       	ldi	r24, 0xFF	; 255
    47a8:	9f ef       	ldi	r25, 0xFF	; 255
    47aa:	df 91       	pop	r29
    47ac:	cf 91       	pop	r28
    47ae:	08 95       	ret

000047b0 <fputc>:
    47b0:	0f 93       	push	r16
    47b2:	1f 93       	push	r17
    47b4:	cf 93       	push	r28
    47b6:	df 93       	push	r29
    47b8:	fb 01       	movw	r30, r22
    47ba:	23 81       	ldd	r18, Z+3	; 0x03
    47bc:	21 fd       	sbrc	r18, 1
    47be:	03 c0       	rjmp	.+6      	; 0x47c6 <fputc+0x16>
    47c0:	8f ef       	ldi	r24, 0xFF	; 255
    47c2:	9f ef       	ldi	r25, 0xFF	; 255
    47c4:	2c c0       	rjmp	.+88     	; 0x481e <fputc+0x6e>
    47c6:	22 ff       	sbrs	r18, 2
    47c8:	16 c0       	rjmp	.+44     	; 0x47f6 <fputc+0x46>
    47ca:	46 81       	ldd	r20, Z+6	; 0x06
    47cc:	57 81       	ldd	r21, Z+7	; 0x07
    47ce:	24 81       	ldd	r18, Z+4	; 0x04
    47d0:	35 81       	ldd	r19, Z+5	; 0x05
    47d2:	42 17       	cp	r20, r18
    47d4:	53 07       	cpc	r21, r19
    47d6:	44 f4       	brge	.+16     	; 0x47e8 <fputc+0x38>
    47d8:	a0 81       	ld	r26, Z
    47da:	b1 81       	ldd	r27, Z+1	; 0x01
    47dc:	9d 01       	movw	r18, r26
    47de:	2f 5f       	subi	r18, 0xFF	; 255
    47e0:	3f 4f       	sbci	r19, 0xFF	; 255
    47e2:	20 83       	st	Z, r18
    47e4:	31 83       	std	Z+1, r19	; 0x01
    47e6:	8c 93       	st	X, r24
    47e8:	26 81       	ldd	r18, Z+6	; 0x06
    47ea:	37 81       	ldd	r19, Z+7	; 0x07
    47ec:	2f 5f       	subi	r18, 0xFF	; 255
    47ee:	3f 4f       	sbci	r19, 0xFF	; 255
    47f0:	26 83       	std	Z+6, r18	; 0x06
    47f2:	37 83       	std	Z+7, r19	; 0x07
    47f4:	14 c0       	rjmp	.+40     	; 0x481e <fputc+0x6e>
    47f6:	8b 01       	movw	r16, r22
    47f8:	ec 01       	movw	r28, r24
    47fa:	fb 01       	movw	r30, r22
    47fc:	00 84       	ldd	r0, Z+8	; 0x08
    47fe:	f1 85       	ldd	r31, Z+9	; 0x09
    4800:	e0 2d       	mov	r30, r0
    4802:	19 95       	eicall
    4804:	89 2b       	or	r24, r25
    4806:	e1 f6       	brne	.-72     	; 0x47c0 <fputc+0x10>
    4808:	d8 01       	movw	r26, r16
    480a:	16 96       	adiw	r26, 0x06	; 6
    480c:	8d 91       	ld	r24, X+
    480e:	9c 91       	ld	r25, X
    4810:	17 97       	sbiw	r26, 0x07	; 7
    4812:	01 96       	adiw	r24, 0x01	; 1
    4814:	16 96       	adiw	r26, 0x06	; 6
    4816:	8d 93       	st	X+, r24
    4818:	9c 93       	st	X, r25
    481a:	17 97       	sbiw	r26, 0x07	; 7
    481c:	ce 01       	movw	r24, r28
    481e:	df 91       	pop	r29
    4820:	cf 91       	pop	r28
    4822:	1f 91       	pop	r17
    4824:	0f 91       	pop	r16
    4826:	08 95       	ret

00004828 <ungetc>:
    4828:	fb 01       	movw	r30, r22
    482a:	23 81       	ldd	r18, Z+3	; 0x03
    482c:	20 ff       	sbrs	r18, 0
    482e:	12 c0       	rjmp	.+36     	; 0x4854 <ungetc+0x2c>
    4830:	26 fd       	sbrc	r18, 6
    4832:	10 c0       	rjmp	.+32     	; 0x4854 <ungetc+0x2c>
    4834:	8f 3f       	cpi	r24, 0xFF	; 255
    4836:	3f ef       	ldi	r19, 0xFF	; 255
    4838:	93 07       	cpc	r25, r19
    483a:	61 f0       	breq	.+24     	; 0x4854 <ungetc+0x2c>
    483c:	82 83       	std	Z+2, r24	; 0x02
    483e:	2f 7d       	andi	r18, 0xDF	; 223
    4840:	20 64       	ori	r18, 0x40	; 64
    4842:	23 83       	std	Z+3, r18	; 0x03
    4844:	26 81       	ldd	r18, Z+6	; 0x06
    4846:	37 81       	ldd	r19, Z+7	; 0x07
    4848:	21 50       	subi	r18, 0x01	; 1
    484a:	31 09       	sbc	r19, r1
    484c:	26 83       	std	Z+6, r18	; 0x06
    484e:	37 83       	std	Z+7, r19	; 0x07
    4850:	99 27       	eor	r25, r25
    4852:	08 95       	ret
    4854:	8f ef       	ldi	r24, 0xFF	; 255
    4856:	9f ef       	ldi	r25, 0xFF	; 255
    4858:	08 95       	ret

0000485a <__ultoa_invert>:
    485a:	fa 01       	movw	r30, r20
    485c:	aa 27       	eor	r26, r26
    485e:	28 30       	cpi	r18, 0x08	; 8
    4860:	51 f1       	breq	.+84     	; 0x48b6 <__ultoa_invert+0x5c>
    4862:	20 31       	cpi	r18, 0x10	; 16
    4864:	81 f1       	breq	.+96     	; 0x48c6 <__ultoa_invert+0x6c>
    4866:	e8 94       	clt
    4868:	6f 93       	push	r22
    486a:	6e 7f       	andi	r22, 0xFE	; 254
    486c:	6e 5f       	subi	r22, 0xFE	; 254
    486e:	7f 4f       	sbci	r23, 0xFF	; 255
    4870:	8f 4f       	sbci	r24, 0xFF	; 255
    4872:	9f 4f       	sbci	r25, 0xFF	; 255
    4874:	af 4f       	sbci	r26, 0xFF	; 255
    4876:	b1 e0       	ldi	r27, 0x01	; 1
    4878:	3e d0       	rcall	.+124    	; 0x48f6 <__ultoa_invert+0x9c>
    487a:	b4 e0       	ldi	r27, 0x04	; 4
    487c:	3c d0       	rcall	.+120    	; 0x48f6 <__ultoa_invert+0x9c>
    487e:	67 0f       	add	r22, r23
    4880:	78 1f       	adc	r23, r24
    4882:	89 1f       	adc	r24, r25
    4884:	9a 1f       	adc	r25, r26
    4886:	a1 1d       	adc	r26, r1
    4888:	68 0f       	add	r22, r24
    488a:	79 1f       	adc	r23, r25
    488c:	8a 1f       	adc	r24, r26
    488e:	91 1d       	adc	r25, r1
    4890:	a1 1d       	adc	r26, r1
    4892:	6a 0f       	add	r22, r26
    4894:	71 1d       	adc	r23, r1
    4896:	81 1d       	adc	r24, r1
    4898:	91 1d       	adc	r25, r1
    489a:	a1 1d       	adc	r26, r1
    489c:	20 d0       	rcall	.+64     	; 0x48de <__ultoa_invert+0x84>
    489e:	09 f4       	brne	.+2      	; 0x48a2 <__ultoa_invert+0x48>
    48a0:	68 94       	set
    48a2:	3f 91       	pop	r19
    48a4:	2a e0       	ldi	r18, 0x0A	; 10
    48a6:	26 9f       	mul	r18, r22
    48a8:	11 24       	eor	r1, r1
    48aa:	30 19       	sub	r19, r0
    48ac:	30 5d       	subi	r19, 0xD0	; 208
    48ae:	31 93       	st	Z+, r19
    48b0:	de f6       	brtc	.-74     	; 0x4868 <__ultoa_invert+0xe>
    48b2:	cf 01       	movw	r24, r30
    48b4:	08 95       	ret
    48b6:	46 2f       	mov	r20, r22
    48b8:	47 70       	andi	r20, 0x07	; 7
    48ba:	40 5d       	subi	r20, 0xD0	; 208
    48bc:	41 93       	st	Z+, r20
    48be:	b3 e0       	ldi	r27, 0x03	; 3
    48c0:	0f d0       	rcall	.+30     	; 0x48e0 <__ultoa_invert+0x86>
    48c2:	c9 f7       	brne	.-14     	; 0x48b6 <__ultoa_invert+0x5c>
    48c4:	f6 cf       	rjmp	.-20     	; 0x48b2 <__ultoa_invert+0x58>
    48c6:	46 2f       	mov	r20, r22
    48c8:	4f 70       	andi	r20, 0x0F	; 15
    48ca:	40 5d       	subi	r20, 0xD0	; 208
    48cc:	4a 33       	cpi	r20, 0x3A	; 58
    48ce:	18 f0       	brcs	.+6      	; 0x48d6 <__ultoa_invert+0x7c>
    48d0:	49 5d       	subi	r20, 0xD9	; 217
    48d2:	31 fd       	sbrc	r19, 1
    48d4:	40 52       	subi	r20, 0x20	; 32
    48d6:	41 93       	st	Z+, r20
    48d8:	02 d0       	rcall	.+4      	; 0x48de <__ultoa_invert+0x84>
    48da:	a9 f7       	brne	.-22     	; 0x48c6 <__ultoa_invert+0x6c>
    48dc:	ea cf       	rjmp	.-44     	; 0x48b2 <__ultoa_invert+0x58>
    48de:	b4 e0       	ldi	r27, 0x04	; 4
    48e0:	a6 95       	lsr	r26
    48e2:	97 95       	ror	r25
    48e4:	87 95       	ror	r24
    48e6:	77 95       	ror	r23
    48e8:	67 95       	ror	r22
    48ea:	ba 95       	dec	r27
    48ec:	c9 f7       	brne	.-14     	; 0x48e0 <__ultoa_invert+0x86>
    48ee:	00 97       	sbiw	r24, 0x00	; 0
    48f0:	61 05       	cpc	r22, r1
    48f2:	71 05       	cpc	r23, r1
    48f4:	08 95       	ret
    48f6:	9b 01       	movw	r18, r22
    48f8:	ac 01       	movw	r20, r24
    48fa:	0a 2e       	mov	r0, r26
    48fc:	06 94       	lsr	r0
    48fe:	57 95       	ror	r21
    4900:	47 95       	ror	r20
    4902:	37 95       	ror	r19
    4904:	27 95       	ror	r18
    4906:	ba 95       	dec	r27
    4908:	c9 f7       	brne	.-14     	; 0x48fc <__ultoa_invert+0xa2>
    490a:	62 0f       	add	r22, r18
    490c:	73 1f       	adc	r23, r19
    490e:	84 1f       	adc	r24, r20
    4910:	95 1f       	adc	r25, r21
    4912:	a0 1d       	adc	r26, r0
    4914:	08 95       	ret

00004916 <__ctype_isfalse>:
    4916:	99 27       	eor	r25, r25
    4918:	88 27       	eor	r24, r24

0000491a <__ctype_istrue>:
    491a:	08 95       	ret

0000491c <_exit>:
    491c:	f8 94       	cli

0000491e <__stop_program>:
    491e:	ff cf       	rjmp	.-2      	; 0x491e <__stop_program>
