
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ac  00802000  000076c4  00007758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015b  008021ac  008021ac  00007904  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007904  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000f68  00000000  00000000  000079a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002757a  00000000  00000000  00008908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005c10  00000000  00000000  0002fe82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00014347  00000000  00000000  00035a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004ae8  00000000  00000000  00049ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003b5a1  00000000  00000000  0004e8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a6b5  00000000  00000000  00089e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ec8  00000000  00000000  000a4520  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00010771  00000000  00000000  000a53e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_13>
      38:	f2 c3       	rjmp	.+2020   	; 0x81e <__vector_14>
      3a:	00 00       	nop
      3c:	28 c4       	rjmp	.+2128   	; 0x88e <__vector_15>
      3e:	00 00       	nop
      40:	5e c4       	rjmp	.+2236   	; 0x8fe <__vector_16>
      42:	00 00       	nop
      44:	94 c4       	rjmp	.+2344   	; 0x96e <__vector_17>
      46:	00 00       	nop
      48:	ca c4       	rjmp	.+2452   	; 0x9de <__vector_18>
      4a:	00 00       	nop
      4c:	00 c5       	rjmp	.+2560   	; 0xa4e <__vector_19>
      4e:	00 00       	nop
      50:	36 c5       	rjmp	.+2668   	; 0xabe <__vector_20>
      52:	00 00       	nop
      54:	6c c5       	rjmp	.+2776   	; 0xb2e <__vector_21>
      56:	00 00       	nop
      58:	a2 c5       	rjmp	.+2884   	; 0xb9e <__vector_22>
      5a:	00 00       	nop
      5c:	d8 c5       	rjmp	.+2992   	; 0xc0e <__vector_23>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	35 c1       	rjmp	.+618    	; 0x2fc <__bad_interrupt>
      92:	00 00       	nop
      94:	33 c1       	rjmp	.+614    	; 0x2fc <__bad_interrupt>
      96:	00 00       	nop
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2f c1       	rjmp	.+606    	; 0x2fc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_46>
      bc:	0c 94 b8 2a 	jmp	0x5570	; 0x5570 <__vector_47>
      c0:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_48>
      c4:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_49>
      c8:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_50>
      cc:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_51>
      d0:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_52>
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	11 c1       	rjmp	.+546    	; 0x2fc <__bad_interrupt>
      da:	00 00       	nop
      dc:	0f c1       	rjmp	.+542    	; 0x2fc <__bad_interrupt>
      de:	00 00       	nop
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b c1       	rjmp	.+534    	; 0x2fc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 d7 2a 	jmp	0x55ae	; 0x55ae <__vector_58>
      ec:	07 c1       	rjmp	.+526    	; 0x2fc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	05 c1       	rjmp	.+522    	; 0x2fc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	03 c1       	rjmp	.+518    	; 0x2fc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	01 c1       	rjmp	.+514    	; 0x2fc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ff c0       	rjmp	.+510    	; 0x2fc <__bad_interrupt>
      fe:	00 00       	nop
     100:	fd c0       	rjmp	.+506    	; 0x2fc <__bad_interrupt>
     102:	00 00       	nop
     104:	fb c0       	rjmp	.+502    	; 0x2fc <__bad_interrupt>
     106:	00 00       	nop
     108:	f9 c0       	rjmp	.+498    	; 0x2fc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f7 c0       	rjmp	.+494    	; 0x2fc <__bad_interrupt>
     10e:	00 00       	nop
     110:	21 c1       	rjmp	.+578    	; 0x354 <__vector_68>
     112:	00 00       	nop
     114:	65 c1       	rjmp	.+714    	; 0x3e0 <__vector_69>
     116:	00 00       	nop
     118:	a9 c1       	rjmp	.+850    	; 0x46c <__vector_70>
     11a:	00 00       	nop
     11c:	8c c2       	rjmp	.+1304   	; 0x636 <__vector_71>
     11e:	00 00       	nop
     120:	c7 c2       	rjmp	.+1422   	; 0x6b0 <__vector_72>
     122:	00 00       	nop
     124:	02 c3       	rjmp	.+1540   	; 0x72a <__vector_73>
     126:	00 00       	nop
     128:	3d c3       	rjmp	.+1658   	; 0x7a4 <__vector_74>
     12a:	00 00       	nop
     12c:	e7 c0       	rjmp	.+462    	; 0x2fc <__bad_interrupt>
     12e:	00 00       	nop
     130:	e5 c0       	rjmp	.+458    	; 0x2fc <__bad_interrupt>
     132:	00 00       	nop
     134:	a4 c5       	rjmp	.+2888   	; 0xc7e <__vector_77>
     136:	00 00       	nop
     138:	da c5       	rjmp	.+2996   	; 0xcee <__vector_78>
     13a:	00 00       	nop
     13c:	10 c6       	rjmp	.+3104   	; 0xd5e <__vector_79>
     13e:	00 00       	nop
     140:	46 c6       	rjmp	.+3212   	; 0xdce <__vector_80>
     142:	00 00       	nop
     144:	7c c6       	rjmp	.+3320   	; 0xe3e <__vector_81>
     146:	00 00       	nop
     148:	b2 c6       	rjmp	.+3428   	; 0xeae <__vector_82>
     14a:	00 00       	nop
     14c:	e8 c6       	rjmp	.+3536   	; 0xf1e <__vector_83>
     14e:	00 00       	nop
     150:	1e c7       	rjmp	.+3644   	; 0xf8e <__vector_84>
     152:	00 00       	nop
     154:	54 c7       	rjmp	.+3752   	; 0xffe <__vector_85>
     156:	00 00       	nop
     158:	8a c7       	rjmp	.+3860   	; 0x106e <__vector_86>
     15a:	00 00       	nop
     15c:	cf c0       	rjmp	.+414    	; 0x2fc <__bad_interrupt>
     15e:	00 00       	nop
     160:	cd c0       	rjmp	.+410    	; 0x2fc <__bad_interrupt>
     162:	00 00       	nop
     164:	cb c0       	rjmp	.+406    	; 0x2fc <__bad_interrupt>
     166:	00 00       	nop
     168:	c9 c0       	rjmp	.+402    	; 0x2fc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <__vector_91>
     170:	c5 c0       	rjmp	.+394    	; 0x2fc <__bad_interrupt>
     172:	00 00       	nop
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__bad_interrupt>
     176:	00 00       	nop
     178:	c1 c0       	rjmp	.+386    	; 0x2fc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bf c0       	rjmp	.+382    	; 0x2fc <__bad_interrupt>
     17e:	00 00       	nop
     180:	bd c0       	rjmp	.+378    	; 0x2fc <__bad_interrupt>
     182:	00 00       	nop
     184:	bb c0       	rjmp	.+374    	; 0x2fc <__bad_interrupt>
     186:	00 00       	nop
     188:	b9 c0       	rjmp	.+370    	; 0x2fc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b7 c0       	rjmp	.+366    	; 0x2fc <__bad_interrupt>
     18e:	00 00       	nop
     190:	b5 c0       	rjmp	.+362    	; 0x2fc <__bad_interrupt>
     192:	00 00       	nop
     194:	b3 c0       	rjmp	.+358    	; 0x2fc <__bad_interrupt>
     196:	00 00       	nop
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	af c0       	rjmp	.+350    	; 0x2fc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ad c0       	rjmp	.+346    	; 0x2fc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ab c0       	rjmp	.+342    	; 0x2fc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a9 c0       	rjmp	.+338    	; 0x2fc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a7 c0       	rjmp	.+334    	; 0x2fc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a5 c0       	rjmp	.+330    	; 0x2fc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	a3 c0       	rjmp	.+326    	; 0x2fc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	a1 c0       	rjmp	.+322    	; 0x2fc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9f c0       	rjmp	.+318    	; 0x2fc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	9d c0       	rjmp	.+314    	; 0x2fc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	9b c0       	rjmp	.+310    	; 0x2fc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	99 c0       	rjmp	.+306    	; 0x2fc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	97 c0       	rjmp	.+302    	; 0x2fc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	95 c0       	rjmp	.+298    	; 0x2fc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	93 c0       	rjmp	.+294    	; 0x2fc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	91 c0       	rjmp	.+290    	; 0x2fc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8f c0       	rjmp	.+286    	; 0x2fc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8d c0       	rjmp	.+282    	; 0x2fc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8b c0       	rjmp	.+278    	; 0x2fc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	89 c0       	rjmp	.+274    	; 0x2fc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	87 c0       	rjmp	.+270    	; 0x2fc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	83 c0       	rjmp	.+262    	; 0x2fc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	81 c0       	rjmp	.+258    	; 0x2fc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	8a 29       	or	r24, r10
     1fe:	87 29       	or	r24, r7
     200:	84 29       	or	r24, r4
     202:	90 29       	or	r25, r0
     204:	81 29       	or	r24, r1
     206:	7f 29       	or	r23, r15
     208:	92 29       	or	r25, r2
     20a:	92 29       	or	r25, r2
     20c:	92 29       	or	r25, r2
     20e:	92 29       	or	r25, r2
     210:	92 29       	or	r25, r2
     212:	92 29       	or	r25, r2
     214:	92 29       	or	r25, r2
     216:	92 29       	or	r25, r2
     218:	92 29       	or	r25, r2
     21a:	92 29       	or	r25, r2
     21c:	92 29       	or	r25, r2
     21e:	92 29       	or	r25, r2
     220:	8d 29       	or	r24, r13
     222:	08 00       	.word	0x0008	; ????
     224:	00 00       	nop
     226:	be 92       	st	-X, r11
     228:	24 49       	sbci	r18, 0x94	; 148
     22a:	12 3e       	cpi	r17, 0xE2	; 226
     22c:	ab aa       	std	Y+51, r10	; 0x33
     22e:	aa 2a       	or	r10, r26
     230:	be cd       	rjmp	.-1156   	; 0xfffffdae <__eeprom_end+0xff7efdae>
     232:	cc cc       	rjmp	.-1640   	; 0xfffffbcc <__eeprom_end+0xff7efbcc>
     234:	4c 3e       	cpi	r20, 0xEC	; 236
     236:	00 00       	nop
     238:	00 80       	ld	r0, Z
     23a:	be ab       	std	Y+54, r27	; 0x36
     23c:	aa aa       	std	Y+50, r10	; 0x32
     23e:	aa 3e       	cpi	r26, 0xEA	; 234
     240:	00 00       	nop
     242:	00 00       	nop
     244:	bf 00       	.word	0x00bf	; ????
     246:	00 00       	nop
     248:	80 3f       	cpi	r24, 0xF0	; 240
     24a:	00 00       	nop
     24c:	00 00       	nop
     24e:	00 08       	sbc	r0, r0
     250:	41 78       	andi	r20, 0x81	; 129
     252:	d3 bb       	out	0x13, r29	; 19
     254:	43 87       	std	Z+11, r20	; 0x0b
     256:	d1 13       	cpse	r29, r17
     258:	3d 19       	sub	r19, r13
     25a:	0e 3c       	cpi	r16, 0xCE	; 206
     25c:	c3 bd       	out	0x23, r28	; 35
     25e:	42 82       	std	Z+2, r4	; 0x02
     260:	ad 2b       	or	r26, r29
     262:	3e 68       	ori	r19, 0x8E	; 142
     264:	ec 82       	std	Y+4, r14	; 0x04
     266:	76 be       	out	0x36, r7	; 54
     268:	d9 8f       	std	Y+25, r29	; 0x19
     26a:	e1 a9       	ldd	r30, Z+49	; 0x31
     26c:	3e 4c       	sbci	r19, 0xCE	; 206
     26e:	80 ef       	ldi	r24, 0xF0	; 240
     270:	ff be       	out	0x3f, r15	; 63
     272:	01 c4       	rjmp	.+2050   	; 0xa76 <__vector_19+0x28>
     274:	ff 7f       	andi	r31, 0xFF	; 255
     276:	3f 00       	.word	0x003f	; ????
     278:	00 00       	nop
     27a:	00 00       	nop
     27c:	07 63       	ori	r16, 0x37	; 55
     27e:	42 36       	cpi	r20, 0x62	; 98
     280:	b7 9b       	sbis	0x16, 7	; 22
     282:	d8 a7       	std	Y+40, r29	; 0x28
     284:	1a 39       	cpi	r17, 0x9A	; 154
     286:	68 56       	subi	r22, 0x68	; 104
     288:	18 ae       	std	Y+56, r1	; 0x38
     28a:	ba ab       	std	Y+50, r27	; 0x32
     28c:	55 8c       	ldd	r5, Z+29	; 0x1d
     28e:	1d 3c       	cpi	r17, 0xCD	; 205
     290:	b7 cc       	rjmp	.-1682   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
     292:	57 63       	ori	r21, 0x37	; 55
     294:	bd 6d       	ori	r27, 0xDD	; 221
     296:	ed fd       	.word	0xfded	; ????
     298:	75 3e       	cpi	r23, 0xE5	; 229
     29a:	f6 17       	cp	r31, r22
     29c:	72 31       	cpi	r23, 0x12	; 18
     29e:	bf 00       	.word	0x00bf	; ????
     2a0:	00 00       	nop
     2a2:	80 3f       	cpi	r24, 0xF0	; 240

000002a4 <__trampolines_end>:
     2a4:	63 64       	ori	r22, 0x43	; 67
     2a6:	69 6e       	ori	r22, 0xE9	; 233
     2a8:	6f 70       	andi	r22, 0x0F	; 15
     2aa:	73 75       	andi	r23, 0x53	; 83
     2ac:	78 58       	subi	r23, 0x88	; 136
     2ae:	5b 00       	.word	0x005b	; ????

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df e3       	ldi	r29, 0x3F	; 63
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60
     2c0:	18 be       	out	0x38, r1	; 56
     2c2:	19 be       	out	0x39, r1	; 57
     2c4:	1a be       	out	0x3a, r1	; 58
     2c6:	1b be       	out	0x3b, r1	; 59

000002c8 <__do_copy_data>:
     2c8:	11 e2       	ldi	r17, 0x21	; 33
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e2       	ldi	r27, 0x20	; 32
     2ce:	e4 ec       	ldi	r30, 0xC4	; 196
     2d0:	f6 e7       	ldi	r31, 0x76	; 118
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0b bf       	out	0x3b, r16	; 59
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x14>
     2d8:	07 90       	elpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	ac 3a       	cpi	r26, 0xAC	; 172
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0x10>
     2e2:	1b be       	out	0x3b, r1	; 59

000002e4 <__do_clear_bss>:
     2e4:	23 e2       	ldi	r18, 0x23	; 35
     2e6:	ac ea       	ldi	r26, 0xAC	; 172
     2e8:	b1 e2       	ldi	r27, 0x21	; 33
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	a7 30       	cpi	r26, 0x07	; 7
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 93 29 	call	0x5326	; 0x5326 <main>
     2f8:	0c 94 60 3b 	jmp	0x76c0	; 0x76c0 <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     308:	80 91 52 22 	lds	r24, 0x2252	; 0x802252 <stdio_base>
     30c:	90 91 53 22 	lds	r25, 0x2253	; 0x802253 <stdio_base+0x1>
     310:	e0 91 4e 22 	lds	r30, 0x224E	; 0x80224e <ptr_get>
     314:	f0 91 4f 22 	lds	r31, 0x224F	; 0x80224f <ptr_get+0x1>
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	19 95       	eicall
	return c;
     320:	89 81       	ldd	r24, Y+1	; 0x01
}
     322:	08 2e       	mov	r0, r24
     324:	00 0c       	add	r0, r0
     326:	99 0b       	sbc	r25, r25
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     330:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     332:	80 91 52 22 	lds	r24, 0x2252	; 0x802252 <stdio_base>
     336:	90 91 53 22 	lds	r25, 0x2253	; 0x802253 <stdio_base+0x1>
     33a:	e0 91 50 22 	lds	r30, 0x2250	; 0x802250 <ptr_put>
     33e:	f0 91 51 22 	lds	r31, 0x2251	; 0x802251 <ptr_put+0x1>
     342:	19 95       	eicall
     344:	99 23       	and	r25, r25
     346:	1c f0       	brlt	.+6      	; 0x34e <_write+0x1e>
		return -1;
	}
	return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     352:	08 95       	ret

00000354 <__vector_68>:
		cpu_irq_restore(iflags);
		return;
	}

	cpu_irq_restore(iflags);
}
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	08 b6       	in	r0, 0x38	; 56
     360:	0f 92       	push	r0
     362:	18 be       	out	0x38, r1	; 56
     364:	09 b6       	in	r0, 0x39	; 57
     366:	0f 92       	push	r0
     368:	19 be       	out	0x39, r1	; 57
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	1b be       	out	0x3b, r1	; 59
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
     388:	e0 91 ad 21 	lds	r30, 0x21AD	; 0x8021ad <ac_aca_callback>
     38c:	f0 91 ae 21 	lds	r31, 0x21AE	; 0x8021ae <ac_aca_callback+0x1>
     390:	30 97       	sbiw	r30, 0x00	; 0
     392:	79 f0       	breq	.+30     	; 0x3b2 <__vector_68+0x5e>
     394:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <__vector_68+0x54>
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	19 95       	eicall
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__vector_68+0x5e>
     3a8:	40 e8       	ldi	r20, 0x80	; 128
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	19 95       	eicall
     3b2:	ff 91       	pop	r31
     3b4:	ef 91       	pop	r30
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	7f 91       	pop	r23
     3c0:	6f 91       	pop	r22
     3c2:	5f 91       	pop	r21
     3c4:	4f 91       	pop	r20
     3c6:	3f 91       	pop	r19
     3c8:	2f 91       	pop	r18
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	09 be       	out	0x39, r0	; 57
     3d2:	0f 90       	pop	r0
     3d4:	08 be       	out	0x38, r0	; 56
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_69>:
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	08 b6       	in	r0, 0x38	; 56
     3ec:	0f 92       	push	r0
     3ee:	18 be       	out	0x38, r1	; 56
     3f0:	09 b6       	in	r0, 0x39	; 57
     3f2:	0f 92       	push	r0
     3f4:	19 be       	out	0x39, r1	; 57
     3f6:	0b b6       	in	r0, 0x3b	; 59
     3f8:	0f 92       	push	r0
     3fa:	1b be       	out	0x3b, r1	; 59
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
     414:	e0 91 ad 21 	lds	r30, 0x21AD	; 0x8021ad <ac_aca_callback>
     418:	f0 91 ae 21 	lds	r31, 0x21AE	; 0x8021ae <ac_aca_callback+0x1>
     41c:	30 97       	sbiw	r30, 0x00	; 0
     41e:	79 f0       	breq	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     420:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     424:	85 ff       	sbrs	r24, 5
     426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 e8       	ldi	r24, 0x80	; 128
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	19 95       	eicall
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e8       	ldi	r24, 0x80	; 128
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	19 95       	eicall
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	09 be       	out	0x39, r0	; 57
     45e:	0f 90       	pop	r0
     460:	08 be       	out	0x38, r0	; 56
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_70>:
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	08 b6       	in	r0, 0x38	; 56
     478:	0f 92       	push	r0
     47a:	18 be       	out	0x38, r1	; 56
     47c:	09 b6       	in	r0, 0x39	; 57
     47e:	0f 92       	push	r0
     480:	19 be       	out	0x39, r1	; 57
     482:	0b b6       	in	r0, 0x3b	; 59
     484:	0f 92       	push	r0
     486:	1b be       	out	0x3b, r1	; 59
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
     4a0:	e0 91 ad 21 	lds	r30, 0x21AD	; 0x8021ad <ac_aca_callback>
     4a4:	f0 91 ae 21 	lds	r31, 0x21AE	; 0x8021ae <ac_aca_callback+0x1>
     4a8:	30 97       	sbiw	r30, 0x00	; 0
     4aa:	39 f0       	breq	.+14     	; 0x4ba <__vector_70+0x4e>
     4ac:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     4b0:	40 7c       	andi	r20, 0xC0	; 192
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	80 e8       	ldi	r24, 0x80	; 128
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	19 95       	eicall
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0b be       	out	0x3b, r0	; 59
     4d6:	0f 90       	pop	r0
     4d8:	09 be       	out	0x39, r0	; 57
     4da:	0f 90       	pop	r0
     4dc:	08 be       	out	0x38, r0	; 56
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <ac_write_config>:
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	2f b7       	in	r18, 0x3f	; 63
     500:	29 83       	std	Y+1, r18	; 0x01
     502:	f8 94       	cli
     504:	c9 80       	ldd	r12, Y+1	; 0x01
     506:	80 38       	cpi	r24, 0x80	; 128
     508:	23 e0       	ldi	r18, 0x03	; 3
     50a:	92 07       	cpc	r25, r18
     50c:	d9 f4       	brne	.+54     	; 0x544 <ac_write_config+0x5c>
     50e:	7a 01       	movw	r14, r20
     510:	d6 2e       	mov	r13, r22
     512:	8c 01       	movw	r16, r24
     514:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <__data_end>
     518:	81 11       	cpse	r24, r1
     51a:	04 c0       	rjmp	.+8      	; 0x524 <ac_write_config+0x3c>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
     524:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <__data_end>
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <__data_end>
     52e:	f7 01       	movw	r30, r14
     530:	82 81       	ldd	r24, Z+2	; 0x02
     532:	f8 01       	movw	r30, r16
     534:	85 83       	std	Z+5, r24	; 0x05
     536:	f7 01       	movw	r30, r14
     538:	83 81       	ldd	r24, Z+3	; 0x03
     53a:	f8 01       	movw	r30, r16
     53c:	86 83       	std	Z+6, r24	; 0x06
     53e:	dd 20       	and	r13, r13
     540:	19 f0       	breq	.+6      	; 0x548 <ac_write_config+0x60>
     542:	0b c0       	rjmp	.+22     	; 0x55a <ac_write_config+0x72>
     544:	cf be       	out	0x3f, r12	; 63
     546:	1d c0       	rjmp	.+58     	; 0x582 <ac_write_config+0x9a>
     548:	f7 01       	movw	r30, r14
     54a:	81 81       	ldd	r24, Z+1	; 0x01
     54c:	f8 01       	movw	r30, r16
     54e:	82 83       	std	Z+2, r24	; 0x02
     550:	f7 01       	movw	r30, r14
     552:	80 81       	ld	r24, Z
     554:	f8 01       	movw	r30, r16
     556:	80 83       	st	Z, r24
     558:	08 c0       	rjmp	.+16     	; 0x56a <ac_write_config+0x82>
     55a:	f7 01       	movw	r30, r14
     55c:	81 81       	ldd	r24, Z+1	; 0x01
     55e:	f8 01       	movw	r30, r16
     560:	83 83       	std	Z+3, r24	; 0x03
     562:	f7 01       	movw	r30, r14
     564:	80 81       	ld	r24, Z
     566:	f8 01       	movw	r30, r16
     568:	81 83       	std	Z+1, r24	; 0x01
     56a:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <__data_end>
     56e:	81 50       	subi	r24, 0x01	; 1
     570:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <__data_end>
     574:	81 11       	cpse	r24, r1
     576:	04 c0       	rjmp	.+8      	; 0x580 <ac_write_config+0x98>
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <sysclk_disable_module>
     580:	cf be       	out	0x3f, r12	; 63
     582:	0f 90       	pop	r0
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	08 95       	ret

00000596 <ac_enable>:
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	1f 92       	push	r1
     5a4:	1f 92       	push	r1
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	2f b7       	in	r18, 0x3f	; 63
     5ac:	2a 83       	std	Y+2, r18	; 0x02
     5ae:	f8 94       	cli
     5b0:	ea 80       	ldd	r14, Y+2	; 0x02
     5b2:	80 38       	cpi	r24, 0x80	; 128
     5b4:	23 e0       	ldi	r18, 0x03	; 3
     5b6:	92 07       	cpc	r25, r18
     5b8:	09 f5       	brne	.+66     	; 0x5fc <ac_enable+0x66>
     5ba:	f6 2e       	mov	r15, r22
     5bc:	8c 01       	movw	r16, r24
     5be:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <__data_end>
     5c2:	81 11       	cpse	r24, r1
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <ac_enable+0x38>
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
     5ce:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <__data_end>
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <__data_end>
     5d8:	80 91 49 22 	lds	r24, 0x2249	; 0x802249 <sleepmgr_locks+0x1>
     5dc:	8f 3f       	cpi	r24, 0xFF	; 255
     5de:	09 f4       	brne	.+2      	; 0x5e2 <ac_enable+0x4c>
     5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <ac_enable+0x4a>
     5e2:	8f b7       	in	r24, 0x3f	; 63
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	f8 94       	cli
     5e8:	99 81       	ldd	r25, Y+1	; 0x01
     5ea:	e8 e4       	ldi	r30, 0x48	; 72
     5ec:	f2 e2       	ldi	r31, 0x22	; 34
     5ee:	81 81       	ldd	r24, Z+1	; 0x01
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	81 83       	std	Z+1, r24	; 0x01
     5f4:	9f bf       	out	0x3f, r25	; 63
     5f6:	ff 20       	and	r15, r15
     5f8:	19 f0       	breq	.+6      	; 0x600 <ac_enable+0x6a>
     5fa:	07 c0       	rjmp	.+14     	; 0x60a <ac_enable+0x74>
     5fc:	ef be       	out	0x3f, r14	; 63
     5fe:	0a c0       	rjmp	.+20     	; 0x614 <ac_enable+0x7e>
     600:	f8 01       	movw	r30, r16
     602:	80 81       	ld	r24, Z
     604:	81 60       	ori	r24, 0x01	; 1
     606:	80 83       	st	Z, r24
     608:	04 c0       	rjmp	.+8      	; 0x612 <ac_enable+0x7c>
     60a:	f8 01       	movw	r30, r16
     60c:	81 81       	ldd	r24, Z+1	; 0x01
     60e:	81 60       	ori	r24, 0x01	; 1
     610:	81 83       	std	Z+1, r24	; 0x01
     612:	ef be       	out	0x3f, r14	; 63
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	08 95       	ret

00000626 <ac_set_interrupt_callback>:
 * \param callback Reference to a callback function
 */
void ac_set_interrupt_callback(AC_t *ac, ac_callback_t callback)
{
#ifdef ACA
	if (ac == &ACA) {
     626:	80 38       	cpi	r24, 0x80	; 128
     628:	93 40       	sbci	r25, 0x03	; 3
     62a:	21 f4       	brne	.+8      	; 0x634 <ac_set_interrupt_callback+0xe>
		ac_aca_callback = callback;
     62c:	60 93 ad 21 	sts	0x21AD, r22	; 0x8021ad <ac_aca_callback>
     630:	70 93 ae 21 	sts	0x21AE, r23	; 0x8021ae <ac_aca_callback+0x1>
     634:	08 95       	ret

00000636 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	08 b6       	in	r0, 0x38	; 56
     642:	0f 92       	push	r0
     644:	18 be       	out	0x38, r1	; 56
     646:	09 b6       	in	r0, 0x39	; 57
     648:	0f 92       	push	r0
     64a:	19 be       	out	0x39, r1	; 57
     64c:	0b b6       	in	r0, 0x3b	; 59
     64e:	0f 92       	push	r0
     650:	1b be       	out	0x3b, r1	; 59
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     66a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     66e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     672:	e0 91 54 22 	lds	r30, 0x2254	; 0x802254 <adca_callback>
     676:	f0 91 55 22 	lds	r31, 0x2255	; 0x802255 <adca_callback+0x1>
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	19 95       	eicall
}
     682:	ff 91       	pop	r31
     684:	ef 91       	pop	r30
     686:	bf 91       	pop	r27
     688:	af 91       	pop	r26
     68a:	9f 91       	pop	r25
     68c:	8f 91       	pop	r24
     68e:	7f 91       	pop	r23
     690:	6f 91       	pop	r22
     692:	5f 91       	pop	r21
     694:	4f 91       	pop	r20
     696:	3f 91       	pop	r19
     698:	2f 91       	pop	r18
     69a:	0f 90       	pop	r0
     69c:	0b be       	out	0x3b, r0	; 59
     69e:	0f 90       	pop	r0
     6a0:	09 be       	out	0x39, r0	; 57
     6a2:	0f 90       	pop	r0
     6a4:	08 be       	out	0x38, r0	; 56
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	08 b6       	in	r0, 0x38	; 56
     6bc:	0f 92       	push	r0
     6be:	18 be       	out	0x38, r1	; 56
     6c0:	09 b6       	in	r0, 0x39	; 57
     6c2:	0f 92       	push	r0
     6c4:	19 be       	out	0x39, r1	; 57
     6c6:	0b b6       	in	r0, 0x3b	; 59
     6c8:	0f 92       	push	r0
     6ca:	1b be       	out	0x3b, r1	; 59
     6cc:	2f 93       	push	r18
     6ce:	3f 93       	push	r19
     6d0:	4f 93       	push	r20
     6d2:	5f 93       	push	r21
     6d4:	6f 93       	push	r22
     6d6:	7f 93       	push	r23
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     6e4:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     6e8:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     6ec:	e0 91 54 22 	lds	r30, 0x2254	; 0x802254 <adca_callback>
     6f0:	f0 91 55 22 	lds	r31, 0x2255	; 0x802255 <adca_callback+0x1>
     6f4:	62 e0       	ldi	r22, 0x02	; 2
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	19 95       	eicall
}
     6fc:	ff 91       	pop	r31
     6fe:	ef 91       	pop	r30
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	09 be       	out	0x39, r0	; 57
     71c:	0f 90       	pop	r0
     71e:	08 be       	out	0x38, r0	; 56
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	08 b6       	in	r0, 0x38	; 56
     736:	0f 92       	push	r0
     738:	18 be       	out	0x38, r1	; 56
     73a:	09 b6       	in	r0, 0x39	; 57
     73c:	0f 92       	push	r0
     73e:	19 be       	out	0x39, r1	; 57
     740:	0b b6       	in	r0, 0x3b	; 59
     742:	0f 92       	push	r0
     744:	1b be       	out	0x3b, r1	; 59
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     75e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     762:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     766:	e0 91 54 22 	lds	r30, 0x2254	; 0x802254 <adca_callback>
     76a:	f0 91 55 22 	lds	r31, 0x2255	; 0x802255 <adca_callback+0x1>
     76e:	64 e0       	ldi	r22, 0x04	; 4
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	19 95       	eicall
}
     776:	ff 91       	pop	r31
     778:	ef 91       	pop	r30
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	7f 91       	pop	r23
     784:	6f 91       	pop	r22
     786:	5f 91       	pop	r21
     788:	4f 91       	pop	r20
     78a:	3f 91       	pop	r19
     78c:	2f 91       	pop	r18
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	09 be       	out	0x39, r0	; 57
     796:	0f 90       	pop	r0
     798:	08 be       	out	0x38, r0	; 56
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	08 b6       	in	r0, 0x38	; 56
     7b0:	0f 92       	push	r0
     7b2:	18 be       	out	0x38, r1	; 56
     7b4:	09 b6       	in	r0, 0x39	; 57
     7b6:	0f 92       	push	r0
     7b8:	19 be       	out	0x39, r1	; 57
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	1b be       	out	0x3b, r1	; 59
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     7d8:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     7dc:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     7e0:	e0 91 54 22 	lds	r30, 0x2254	; 0x802254 <adca_callback>
     7e4:	f0 91 55 22 	lds	r31, 0x2255	; 0x802255 <adca_callback+0x1>
     7e8:	68 e0       	ldi	r22, 0x08	; 8
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	19 95       	eicall
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0b be       	out	0x3b, r0	; 59
     80c:	0f 90       	pop	r0
     80e:	09 be       	out	0x39, r0	; 57
     810:	0f 90       	pop	r0
     812:	08 be       	out	0x38, r0	; 56
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	08 b6       	in	r0, 0x38	; 56
     82a:	0f 92       	push	r0
     82c:	18 be       	out	0x38, r1	; 56
     82e:	09 b6       	in	r0, 0x39	; 57
     830:	0f 92       	push	r0
     832:	19 be       	out	0x39, r1	; 57
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	1b be       	out	0x3b, r1	; 59
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     852:	e0 91 df 21 	lds	r30, 0x21DF	; 0x8021df <tc_tcc0_ovf_callback>
     856:	f0 91 e0 21 	lds	r31, 0x21E0	; 0x8021e0 <tc_tcc0_ovf_callback+0x1>
     85a:	30 97       	sbiw	r30, 0x00	; 0
     85c:	09 f0       	breq	.+2      	; 0x860 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     85e:	19 95       	eicall
	}
}
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0b be       	out	0x3b, r0	; 59
     87c:	0f 90       	pop	r0
     87e:	09 be       	out	0x39, r0	; 57
     880:	0f 90       	pop	r0
     882:	08 be       	out	0x38, r0	; 56
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	08 b6       	in	r0, 0x38	; 56
     89a:	0f 92       	push	r0
     89c:	18 be       	out	0x38, r1	; 56
     89e:	09 b6       	in	r0, 0x39	; 57
     8a0:	0f 92       	push	r0
     8a2:	19 be       	out	0x39, r1	; 57
     8a4:	0b b6       	in	r0, 0x3b	; 59
     8a6:	0f 92       	push	r0
     8a8:	1b be       	out	0x3b, r1	; 59
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     8c2:	e0 91 dd 21 	lds	r30, 0x21DD	; 0x8021dd <tc_tcc0_err_callback>
     8c6:	f0 91 de 21 	lds	r31, 0x21DE	; 0x8021de <tc_tcc0_err_callback+0x1>
     8ca:	30 97       	sbiw	r30, 0x00	; 0
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <__vector_15+0x42>
		tc_tcc0_err_callback();
     8ce:	19 95       	eicall
	}
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	bf 91       	pop	r27
     8d6:	af 91       	pop	r26
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	7f 91       	pop	r23
     8de:	6f 91       	pop	r22
     8e0:	5f 91       	pop	r21
     8e2:	4f 91       	pop	r20
     8e4:	3f 91       	pop	r19
     8e6:	2f 91       	pop	r18
     8e8:	0f 90       	pop	r0
     8ea:	0b be       	out	0x3b, r0	; 59
     8ec:	0f 90       	pop	r0
     8ee:	09 be       	out	0x39, r0	; 57
     8f0:	0f 90       	pop	r0
     8f2:	08 be       	out	0x38, r0	; 56
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	08 b6       	in	r0, 0x38	; 56
     90a:	0f 92       	push	r0
     90c:	18 be       	out	0x38, r1	; 56
     90e:	09 b6       	in	r0, 0x39	; 57
     910:	0f 92       	push	r0
     912:	19 be       	out	0x39, r1	; 57
     914:	0b b6       	in	r0, 0x3b	; 59
     916:	0f 92       	push	r0
     918:	1b be       	out	0x3b, r1	; 59
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     932:	e0 91 db 21 	lds	r30, 0x21DB	; 0x8021db <tc_tcc0_cca_callback>
     936:	f0 91 dc 21 	lds	r31, 0x21DC	; 0x8021dc <tc_tcc0_cca_callback+0x1>
     93a:	30 97       	sbiw	r30, 0x00	; 0
     93c:	09 f0       	breq	.+2      	; 0x940 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     93e:	19 95       	eicall
	}
}
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0b be       	out	0x3b, r0	; 59
     95c:	0f 90       	pop	r0
     95e:	09 be       	out	0x39, r0	; 57
     960:	0f 90       	pop	r0
     962:	08 be       	out	0x38, r0	; 56
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     96e:	1f 92       	push	r1
     970:	0f 92       	push	r0
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	0f 92       	push	r0
     976:	11 24       	eor	r1, r1
     978:	08 b6       	in	r0, 0x38	; 56
     97a:	0f 92       	push	r0
     97c:	18 be       	out	0x38, r1	; 56
     97e:	09 b6       	in	r0, 0x39	; 57
     980:	0f 92       	push	r0
     982:	19 be       	out	0x39, r1	; 57
     984:	0b b6       	in	r0, 0x3b	; 59
     986:	0f 92       	push	r0
     988:	1b be       	out	0x3b, r1	; 59
     98a:	2f 93       	push	r18
     98c:	3f 93       	push	r19
     98e:	4f 93       	push	r20
     990:	5f 93       	push	r21
     992:	6f 93       	push	r22
     994:	7f 93       	push	r23
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	ef 93       	push	r30
     9a0:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     9a2:	e0 91 d9 21 	lds	r30, 0x21D9	; 0x8021d9 <tc_tcc0_ccb_callback>
     9a6:	f0 91 da 21 	lds	r31, 0x21DA	; 0x8021da <tc_tcc0_ccb_callback+0x1>
     9aa:	30 97       	sbiw	r30, 0x00	; 0
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     9ae:	19 95       	eicall
	}
}
     9b0:	ff 91       	pop	r31
     9b2:	ef 91       	pop	r30
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	0f 90       	pop	r0
     9ca:	0b be       	out	0x3b, r0	; 59
     9cc:	0f 90       	pop	r0
     9ce:	09 be       	out	0x39, r0	; 57
     9d0:	0f 90       	pop	r0
     9d2:	08 be       	out	0x38, r0	; 56
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	08 b6       	in	r0, 0x38	; 56
     9ea:	0f 92       	push	r0
     9ec:	18 be       	out	0x38, r1	; 56
     9ee:	09 b6       	in	r0, 0x39	; 57
     9f0:	0f 92       	push	r0
     9f2:	19 be       	out	0x39, r1	; 57
     9f4:	0b b6       	in	r0, 0x3b	; 59
     9f6:	0f 92       	push	r0
     9f8:	1b be       	out	0x3b, r1	; 59
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     a12:	e0 91 d7 21 	lds	r30, 0x21D7	; 0x8021d7 <tc_tcc0_ccc_callback>
     a16:	f0 91 d8 21 	lds	r31, 0x21D8	; 0x8021d8 <tc_tcc0_ccc_callback+0x1>
     a1a:	30 97       	sbiw	r30, 0x00	; 0
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     a1e:	19 95       	eicall
	}
}
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0b be       	out	0x3b, r0	; 59
     a3c:	0f 90       	pop	r0
     a3e:	09 be       	out	0x39, r0	; 57
     a40:	0f 90       	pop	r0
     a42:	08 be       	out	0x38, r0	; 56
     a44:	0f 90       	pop	r0
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	08 b6       	in	r0, 0x38	; 56
     a5a:	0f 92       	push	r0
     a5c:	18 be       	out	0x38, r1	; 56
     a5e:	09 b6       	in	r0, 0x39	; 57
     a60:	0f 92       	push	r0
     a62:	19 be       	out	0x39, r1	; 57
     a64:	0b b6       	in	r0, 0x3b	; 59
     a66:	0f 92       	push	r0
     a68:	1b be       	out	0x3b, r1	; 59
     a6a:	2f 93       	push	r18
     a6c:	3f 93       	push	r19
     a6e:	4f 93       	push	r20
     a70:	5f 93       	push	r21
     a72:	6f 93       	push	r22
     a74:	7f 93       	push	r23
     a76:	8f 93       	push	r24
     a78:	9f 93       	push	r25
     a7a:	af 93       	push	r26
     a7c:	bf 93       	push	r27
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     a82:	e0 91 d5 21 	lds	r30, 0x21D5	; 0x8021d5 <tc_tcc0_ccd_callback>
     a86:	f0 91 d6 21 	lds	r31, 0x21D6	; 0x8021d6 <tc_tcc0_ccd_callback+0x1>
     a8a:	30 97       	sbiw	r30, 0x00	; 0
     a8c:	09 f0       	breq	.+2      	; 0xa90 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     a8e:	19 95       	eicall
	}
}
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	bf 91       	pop	r27
     a96:	af 91       	pop	r26
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	7f 91       	pop	r23
     a9e:	6f 91       	pop	r22
     aa0:	5f 91       	pop	r21
     aa2:	4f 91       	pop	r20
     aa4:	3f 91       	pop	r19
     aa6:	2f 91       	pop	r18
     aa8:	0f 90       	pop	r0
     aaa:	0b be       	out	0x3b, r0	; 59
     aac:	0f 90       	pop	r0
     aae:	09 be       	out	0x39, r0	; 57
     ab0:	0f 90       	pop	r0
     ab2:	08 be       	out	0x38, r0	; 56
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	08 b6       	in	r0, 0x38	; 56
     aca:	0f 92       	push	r0
     acc:	18 be       	out	0x38, r1	; 56
     ace:	09 b6       	in	r0, 0x39	; 57
     ad0:	0f 92       	push	r0
     ad2:	19 be       	out	0x39, r1	; 57
     ad4:	0b b6       	in	r0, 0x3b	; 59
     ad6:	0f 92       	push	r0
     ad8:	1b be       	out	0x3b, r1	; 59
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     af2:	e0 91 d3 21 	lds	r30, 0x21D3	; 0x8021d3 <tc_tcc1_ovf_callback>
     af6:	f0 91 d4 21 	lds	r31, 0x21D4	; 0x8021d4 <tc_tcc1_ovf_callback+0x1>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     afe:	19 95       	eicall
	}
}
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	bf 91       	pop	r27
     b06:	af 91       	pop	r26
     b08:	9f 91       	pop	r25
     b0a:	8f 91       	pop	r24
     b0c:	7f 91       	pop	r23
     b0e:	6f 91       	pop	r22
     b10:	5f 91       	pop	r21
     b12:	4f 91       	pop	r20
     b14:	3f 91       	pop	r19
     b16:	2f 91       	pop	r18
     b18:	0f 90       	pop	r0
     b1a:	0b be       	out	0x3b, r0	; 59
     b1c:	0f 90       	pop	r0
     b1e:	09 be       	out	0x39, r0	; 57
     b20:	0f 90       	pop	r0
     b22:	08 be       	out	0x38, r0	; 56
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	08 b6       	in	r0, 0x38	; 56
     b3a:	0f 92       	push	r0
     b3c:	18 be       	out	0x38, r1	; 56
     b3e:	09 b6       	in	r0, 0x39	; 57
     b40:	0f 92       	push	r0
     b42:	19 be       	out	0x39, r1	; 57
     b44:	0b b6       	in	r0, 0x3b	; 59
     b46:	0f 92       	push	r0
     b48:	1b be       	out	0x3b, r1	; 59
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     b62:	e0 91 d1 21 	lds	r30, 0x21D1	; 0x8021d1 <tc_tcc1_err_callback>
     b66:	f0 91 d2 21 	lds	r31, 0x21D2	; 0x8021d2 <tc_tcc1_err_callback+0x1>
     b6a:	30 97       	sbiw	r30, 0x00	; 0
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__vector_21+0x42>
		tc_tcc1_err_callback();
     b6e:	19 95       	eicall
	}
}
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	0f 90       	pop	r0
     b8a:	0b be       	out	0x3b, r0	; 59
     b8c:	0f 90       	pop	r0
     b8e:	09 be       	out	0x39, r0	; 57
     b90:	0f 90       	pop	r0
     b92:	08 be       	out	0x38, r0	; 56
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	08 b6       	in	r0, 0x38	; 56
     baa:	0f 92       	push	r0
     bac:	18 be       	out	0x38, r1	; 56
     bae:	09 b6       	in	r0, 0x39	; 57
     bb0:	0f 92       	push	r0
     bb2:	19 be       	out	0x39, r1	; 57
     bb4:	0b b6       	in	r0, 0x3b	; 59
     bb6:	0f 92       	push	r0
     bb8:	1b be       	out	0x3b, r1	; 59
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     bd2:	e0 91 cf 21 	lds	r30, 0x21CF	; 0x8021cf <tc_tcc1_cca_callback>
     bd6:	f0 91 d0 21 	lds	r31, 0x21D0	; 0x8021d0 <tc_tcc1_cca_callback+0x1>
     bda:	30 97       	sbiw	r30, 0x00	; 0
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     bde:	19 95       	eicall
	}
}
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0b be       	out	0x3b, r0	; 59
     bfc:	0f 90       	pop	r0
     bfe:	09 be       	out	0x39, r0	; 57
     c00:	0f 90       	pop	r0
     c02:	08 be       	out	0x38, r0	; 56
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	08 b6       	in	r0, 0x38	; 56
     c1a:	0f 92       	push	r0
     c1c:	18 be       	out	0x38, r1	; 56
     c1e:	09 b6       	in	r0, 0x39	; 57
     c20:	0f 92       	push	r0
     c22:	19 be       	out	0x39, r1	; 57
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	1b be       	out	0x3b, r1	; 59
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     c42:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <tc_tcc1_ccb_callback>
     c46:	f0 91 ce 21 	lds	r31, 0x21CE	; 0x8021ce <tc_tcc1_ccb_callback+0x1>
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     c4e:	19 95       	eicall
	}
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	09 be       	out	0x39, r0	; 57
     c70:	0f 90       	pop	r0
     c72:	08 be       	out	0x38, r0	; 56
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	08 b6       	in	r0, 0x38	; 56
     c8a:	0f 92       	push	r0
     c8c:	18 be       	out	0x38, r1	; 56
     c8e:	09 b6       	in	r0, 0x39	; 57
     c90:	0f 92       	push	r0
     c92:	19 be       	out	0x39, r1	; 57
     c94:	0b b6       	in	r0, 0x3b	; 59
     c96:	0f 92       	push	r0
     c98:	1b be       	out	0x3b, r1	; 59
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     cb2:	e0 91 cb 21 	lds	r30, 0x21CB	; 0x8021cb <tc_tcd0_ovf_callback>
     cb6:	f0 91 cc 21 	lds	r31, 0x21CC	; 0x8021cc <tc_tcd0_ovf_callback+0x1>
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     cbe:	19 95       	eicall
	}
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	09 be       	out	0x39, r0	; 57
     ce0:	0f 90       	pop	r0
     ce2:	08 be       	out	0x38, r0	; 56
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	08 b6       	in	r0, 0x38	; 56
     cfa:	0f 92       	push	r0
     cfc:	18 be       	out	0x38, r1	; 56
     cfe:	09 b6       	in	r0, 0x39	; 57
     d00:	0f 92       	push	r0
     d02:	19 be       	out	0x39, r1	; 57
     d04:	0b b6       	in	r0, 0x3b	; 59
     d06:	0f 92       	push	r0
     d08:	1b be       	out	0x3b, r1	; 59
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     d22:	e0 91 c9 21 	lds	r30, 0x21C9	; 0x8021c9 <tc_tcd0_err_callback>
     d26:	f0 91 ca 21 	lds	r31, 0x21CA	; 0x8021ca <tc_tcd0_err_callback+0x1>
     d2a:	30 97       	sbiw	r30, 0x00	; 0
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_78+0x42>
		tc_tcd0_err_callback();
     d2e:	19 95       	eicall
	}
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	09 be       	out	0x39, r0	; 57
     d50:	0f 90       	pop	r0
     d52:	08 be       	out	0x38, r0	; 56
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	08 b6       	in	r0, 0x38	; 56
     d6a:	0f 92       	push	r0
     d6c:	18 be       	out	0x38, r1	; 56
     d6e:	09 b6       	in	r0, 0x39	; 57
     d70:	0f 92       	push	r0
     d72:	19 be       	out	0x39, r1	; 57
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	1b be       	out	0x3b, r1	; 59
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     d92:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <tc_tcd0_cca_callback>
     d96:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <tc_tcd0_cca_callback+0x1>
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     d9e:	19 95       	eicall
	}
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	09 be       	out	0x39, r0	; 57
     dc0:	0f 90       	pop	r0
     dc2:	08 be       	out	0x38, r0	; 56
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	08 b6       	in	r0, 0x38	; 56
     dda:	0f 92       	push	r0
     ddc:	18 be       	out	0x38, r1	; 56
     dde:	09 b6       	in	r0, 0x39	; 57
     de0:	0f 92       	push	r0
     de2:	19 be       	out	0x39, r1	; 57
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	1b be       	out	0x3b, r1	; 59
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e02:	e0 91 c5 21 	lds	r30, 0x21C5	; 0x8021c5 <tc_tcd0_ccb_callback>
     e06:	f0 91 c6 21 	lds	r31, 0x21C6	; 0x8021c6 <tc_tcd0_ccb_callback+0x1>
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     e0e:	19 95       	eicall
	}
}
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	09 be       	out	0x39, r0	; 57
     e30:	0f 90       	pop	r0
     e32:	08 be       	out	0x38, r0	; 56
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	08 b6       	in	r0, 0x38	; 56
     e4a:	0f 92       	push	r0
     e4c:	18 be       	out	0x38, r1	; 56
     e4e:	09 b6       	in	r0, 0x39	; 57
     e50:	0f 92       	push	r0
     e52:	19 be       	out	0x39, r1	; 57
     e54:	0b b6       	in	r0, 0x3b	; 59
     e56:	0f 92       	push	r0
     e58:	1b be       	out	0x3b, r1	; 59
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     e72:	e0 91 c3 21 	lds	r30, 0x21C3	; 0x8021c3 <tc_tcd0_ccc_callback>
     e76:	f0 91 c4 21 	lds	r31, 0x21C4	; 0x8021c4 <tc_tcd0_ccc_callback+0x1>
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     e7e:	19 95       	eicall
	}
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	09 be       	out	0x39, r0	; 57
     ea0:	0f 90       	pop	r0
     ea2:	08 be       	out	0x38, r0	; 56
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	08 b6       	in	r0, 0x38	; 56
     eba:	0f 92       	push	r0
     ebc:	18 be       	out	0x38, r1	; 56
     ebe:	09 b6       	in	r0, 0x39	; 57
     ec0:	0f 92       	push	r0
     ec2:	19 be       	out	0x39, r1	; 57
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	1b be       	out	0x3b, r1	; 59
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     ee2:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <tc_tcd0_ccd_callback>
     ee6:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <tc_tcd0_ccd_callback+0x1>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     eee:	19 95       	eicall
	}
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	09 be       	out	0x39, r0	; 57
     f10:	0f 90       	pop	r0
     f12:	08 be       	out	0x38, r0	; 56
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	08 b6       	in	r0, 0x38	; 56
     f2a:	0f 92       	push	r0
     f2c:	18 be       	out	0x38, r1	; 56
     f2e:	09 b6       	in	r0, 0x39	; 57
     f30:	0f 92       	push	r0
     f32:	19 be       	out	0x39, r1	; 57
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	1b be       	out	0x3b, r1	; 59
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     f52:	e0 91 bf 21 	lds	r30, 0x21BF	; 0x8021bf <tc_tcd1_ovf_callback>
     f56:	f0 91 c0 21 	lds	r31, 0x21C0	; 0x8021c0 <tc_tcd1_ovf_callback+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     f5e:	19 95       	eicall
	}
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	09 be       	out	0x39, r0	; 57
     f80:	0f 90       	pop	r0
     f82:	08 be       	out	0x38, r0	; 56
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	08 b6       	in	r0, 0x38	; 56
     f9a:	0f 92       	push	r0
     f9c:	18 be       	out	0x38, r1	; 56
     f9e:	09 b6       	in	r0, 0x39	; 57
     fa0:	0f 92       	push	r0
     fa2:	19 be       	out	0x39, r1	; 57
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	1b be       	out	0x3b, r1	; 59
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     fc2:	e0 91 bd 21 	lds	r30, 0x21BD	; 0x8021bd <tc_tcd1_err_callback>
     fc6:	f0 91 be 21 	lds	r31, 0x21BE	; 0x8021be <tc_tcd1_err_callback+0x1>
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__vector_84+0x42>
		tc_tcd1_err_callback();
     fce:	19 95       	eicall
	}
}
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	09 be       	out	0x39, r0	; 57
     ff0:	0f 90       	pop	r0
     ff2:	08 be       	out	0x38, r0	; 56
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	08 b6       	in	r0, 0x38	; 56
    100a:	0f 92       	push	r0
    100c:	18 be       	out	0x38, r1	; 56
    100e:	09 b6       	in	r0, 0x39	; 57
    1010:	0f 92       	push	r0
    1012:	19 be       	out	0x39, r1	; 57
    1014:	0b b6       	in	r0, 0x3b	; 59
    1016:	0f 92       	push	r0
    1018:	1b be       	out	0x3b, r1	; 59
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1032:	e0 91 bb 21 	lds	r30, 0x21BB	; 0x8021bb <tc_tcd1_cca_callback>
    1036:	f0 91 bc 21 	lds	r31, 0x21BC	; 0x8021bc <tc_tcd1_cca_callback+0x1>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    103e:	19 95       	eicall
	}
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0b be       	out	0x3b, r0	; 59
    105c:	0f 90       	pop	r0
    105e:	09 be       	out	0x39, r0	; 57
    1060:	0f 90       	pop	r0
    1062:	08 be       	out	0x38, r0	; 56
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	08 b6       	in	r0, 0x38	; 56
    107a:	0f 92       	push	r0
    107c:	18 be       	out	0x38, r1	; 56
    107e:	09 b6       	in	r0, 0x39	; 57
    1080:	0f 92       	push	r0
    1082:	19 be       	out	0x39, r1	; 57
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	1b be       	out	0x3b, r1	; 59
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    10a2:	e0 91 b9 21 	lds	r30, 0x21B9	; 0x8021b9 <tc_tcd1_ccb_callback>
    10a6:	f0 91 ba 21 	lds	r31, 0x21BA	; 0x8021ba <tc_tcd1_ccb_callback+0x1>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    10ae:	19 95       	eicall
	}
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	09 be       	out	0x39, r0	; 57
    10d0:	0f 90       	pop	r0
    10d2:	08 be       	out	0x38, r0	; 56
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	08 b6       	in	r0, 0x38	; 56
    10ea:	0f 92       	push	r0
    10ec:	18 be       	out	0x38, r1	; 56
    10ee:	09 b6       	in	r0, 0x39	; 57
    10f0:	0f 92       	push	r0
    10f2:	19 be       	out	0x39, r1	; 57
    10f4:	0b b6       	in	r0, 0x3b	; 59
    10f6:	0f 92       	push	r0
    10f8:	1b be       	out	0x3b, r1	; 59
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1112:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <tc_tce0_err_callback>
    1116:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <tc_tce0_err_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_48+0x42>
		tc_tce0_err_callback();
    111e:	19 95       	eicall
	}
}
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	09 be       	out	0x39, r0	; 57
    1140:	0f 90       	pop	r0
    1142:	08 be       	out	0x38, r0	; 56
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	08 b6       	in	r0, 0x38	; 56
    115a:	0f 92       	push	r0
    115c:	18 be       	out	0x38, r1	; 56
    115e:	09 b6       	in	r0, 0x39	; 57
    1160:	0f 92       	push	r0
    1162:	19 be       	out	0x39, r1	; 57
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	1b be       	out	0x3b, r1	; 59
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1182:	e0 91 b5 21 	lds	r30, 0x21B5	; 0x8021b5 <tc_tce0_cca_callback>
    1186:	f0 91 b6 21 	lds	r31, 0x21B6	; 0x8021b6 <tc_tce0_cca_callback+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_49+0x42>
		tc_tce0_cca_callback();
    118e:	19 95       	eicall
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    11f2:	e0 91 b3 21 	lds	r30, 0x21B3	; 0x8021b3 <tc_tce0_ccb_callback>
    11f6:	f0 91 b4 21 	lds	r31, 0x21B4	; 0x8021b4 <tc_tce0_ccb_callback+0x1>
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    11fe:	19 95       	eicall
	}
}
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0b be       	out	0x3b, r0	; 59
    121c:	0f 90       	pop	r0
    121e:	09 be       	out	0x39, r0	; 57
    1220:	0f 90       	pop	r0
    1222:	08 be       	out	0x38, r0	; 56
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	08 b6       	in	r0, 0x38	; 56
    123a:	0f 92       	push	r0
    123c:	18 be       	out	0x38, r1	; 56
    123e:	09 b6       	in	r0, 0x39	; 57
    1240:	0f 92       	push	r0
    1242:	19 be       	out	0x39, r1	; 57
    1244:	0b b6       	in	r0, 0x3b	; 59
    1246:	0f 92       	push	r0
    1248:	1b be       	out	0x3b, r1	; 59
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1262:	e0 91 b1 21 	lds	r30, 0x21B1	; 0x8021b1 <tc_tce0_ccc_callback>
    1266:	f0 91 b2 21 	lds	r31, 0x21B2	; 0x8021b2 <tc_tce0_ccc_callback+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    126e:	19 95       	eicall
	}
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	09 be       	out	0x39, r0	; 57
    1290:	0f 90       	pop	r0
    1292:	08 be       	out	0x38, r0	; 56
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	08 b6       	in	r0, 0x38	; 56
    12aa:	0f 92       	push	r0
    12ac:	18 be       	out	0x38, r1	; 56
    12ae:	09 b6       	in	r0, 0x39	; 57
    12b0:	0f 92       	push	r0
    12b2:	19 be       	out	0x39, r1	; 57
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	1b be       	out	0x3b, r1	; 59
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    12d2:	e0 91 af 21 	lds	r30, 0x21AF	; 0x8021af <tc_tce0_ccd_callback>
    12d6:	f0 91 b0 21 	lds	r31, 0x21B0	; 0x8021b0 <tc_tce0_ccd_callback+0x1>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    12de:	19 95       	eicall
	}
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0b be       	out	0x3b, r0	; 59
    12fc:	0f 90       	pop	r0
    12fe:	09 be       	out	0x39, r0	; 57
    1300:	0f 90       	pop	r0
    1302:	08 be       	out	0x38, r0	; 56
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1312:	e0 91 e1 21 	lds	r30, 0x21E1	; 0x8021e1 <transfer>
    1316:	f0 91 e2 21 	lds	r31, 0x21E2	; 0x8021e2 <transfer+0x1>
    131a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    131c:	83 ff       	sbrs	r24, 3
    131e:	08 c0       	rjmp	.+16     	; 0x1330 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1320:	88 60       	ori	r24, 0x08	; 8
    1322:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1328:	86 ef       	ldi	r24, 0xF6	; 246
    132a:	80 93 eb 21 	sts	0x21EB, r24	; 0x8021eb <transfer+0xa>
    132e:	83 c0       	rjmp	.+262    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1330:	98 2f       	mov	r25, r24
    1332:	94 71       	andi	r25, 0x14	; 20
    1334:	31 f0       	breq	.+12     	; 0x1342 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	80 93 eb 21 	sts	0x21EB, r24	; 0x8021eb <transfer+0xa>
    1340:	7a c0       	rjmp	.+244    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1342:	86 ff       	sbrs	r24, 6
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1346:	c1 ee       	ldi	r28, 0xE1	; 225
    1348:	d1 e2       	ldi	r29, 0x21	; 33
    134a:	aa 81       	ldd	r26, Y+2	; 0x02
    134c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	14 96       	adiw	r26, 0x04	; 4
    1354:	2d 91       	ld	r18, X+
    1356:	3c 91       	ld	r19, X
    1358:	15 97       	sbiw	r26, 0x05	; 5
    135a:	82 17       	cp	r24, r18
    135c:	93 07       	cpc	r25, r19
    135e:	6c f4       	brge	.+26     	; 0x137a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1360:	9c 01       	movw	r18, r24
    1362:	2f 5f       	subi	r18, 0xFF	; 255
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	20 93 e5 21 	sts	0x21E5, r18	; 0x8021e5 <transfer+0x4>
    136a:	30 93 e6 21 	sts	0x21E6, r19	; 0x8021e6 <transfer+0x5>
    136e:	a8 0f       	add	r26, r24
    1370:	b9 1f       	adc	r27, r25
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	8c 91       	ld	r24, X
    1376:	87 83       	std	Z+7, r24	; 0x07
    1378:	5e c0       	rjmp	.+188    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    137a:	80 91 e7 21 	lds	r24, 0x21E7	; 0x8021e7 <transfer+0x6>
    137e:	90 91 e8 21 	lds	r25, 0x21E8	; 0x8021e8 <transfer+0x7>
    1382:	18 96       	adiw	r26, 0x08	; 8
    1384:	2d 91       	ld	r18, X+
    1386:	3c 91       	ld	r19, X
    1388:	19 97       	sbiw	r26, 0x09	; 9
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	c8 f4       	brcc	.+50     	; 0x13c2 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1390:	20 91 e9 21 	lds	r18, 0x21E9	; 0x8021e9 <transfer+0x8>
    1394:	22 23       	and	r18, r18
    1396:	21 f0       	breq	.+8      	; 0x13a0 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1398:	86 81       	ldd	r24, Z+6	; 0x06
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	86 83       	std	Z+6, r24	; 0x06
    139e:	4b c0       	rjmp	.+150    	; 0x1436 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2d 91       	ld	r18, X+
    13a4:	3c 91       	ld	r19, X
    13a6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    13a8:	ac 01       	movw	r20, r24
    13aa:	4f 5f       	subi	r20, 0xFF	; 255
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	40 93 e7 21 	sts	0x21E7, r20	; 0x8021e7 <transfer+0x6>
    13b2:	50 93 e8 21 	sts	0x21E8, r21	; 0x8021e8 <transfer+0x7>
    13b6:	d9 01       	movw	r26, r18
    13b8:	a8 0f       	add	r26, r24
    13ba:	b9 1f       	adc	r27, r25
    13bc:	8c 91       	ld	r24, X
    13be:	87 83       	std	Z+7, r24	; 0x07
    13c0:	3a c0       	rjmp	.+116    	; 0x1436 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    13c6:	10 92 eb 21 	sts	0x21EB, r1	; 0x8021eb <transfer+0xa>
    13ca:	35 c0       	rjmp	.+106    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    13cc:	88 23       	and	r24, r24
    13ce:	84 f5       	brge	.+96     	; 0x1430 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    13d0:	a1 ee       	ldi	r26, 0xE1	; 225
    13d2:	b1 e2       	ldi	r27, 0x21	; 33
    13d4:	12 96       	adiw	r26, 0x02	; 2
    13d6:	cd 91       	ld	r28, X+
    13d8:	dc 91       	ld	r29, X
    13da:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    13dc:	16 96       	adiw	r26, 0x06	; 6
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	17 97       	sbiw	r26, 0x07	; 7
    13e4:	28 85       	ldd	r18, Y+8	; 0x08
    13e6:	39 85       	ldd	r19, Y+9	; 0x09
    13e8:	82 17       	cp	r24, r18
    13ea:	93 07       	cpc	r25, r19
    13ec:	d8 f4       	brcc	.+54     	; 0x1424 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    13ee:	6e 81       	ldd	r22, Y+6	; 0x06
    13f0:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    13f2:	9c 01       	movw	r18, r24
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	20 93 e7 21 	sts	0x21E7, r18	; 0x8021e7 <transfer+0x6>
    13fc:	30 93 e8 21 	sts	0x21E8, r19	; 0x8021e8 <transfer+0x7>
    1400:	47 81       	ldd	r20, Z+7	; 0x07
    1402:	db 01       	movw	r26, r22
    1404:	a8 0f       	add	r26, r24
    1406:	b9 1f       	adc	r27, r25
    1408:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    140a:	88 85       	ldd	r24, Y+8	; 0x08
    140c:	99 85       	ldd	r25, Y+9	; 0x09
    140e:	28 17       	cp	r18, r24
    1410:	39 07       	cpc	r19, r25
    1412:	18 f4       	brcc	.+6      	; 0x141a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	83 83       	std	Z+3, r24	; 0x03
    1418:	0e c0       	rjmp	.+28     	; 0x1436 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    141a:	87 e0       	ldi	r24, 0x07	; 7
    141c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    141e:	10 92 eb 21 	sts	0x21EB, r1	; 0x8021eb <transfer+0xa>
    1422:	09 c0       	rjmp	.+18     	; 0x1436 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1428:	89 ef       	ldi	r24, 0xF9	; 249
    142a:	80 93 eb 21 	sts	0x21EB, r24	; 0x8021eb <transfer+0xa>
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1430:	8b ef       	ldi	r24, 0xFB	; 251
    1432:	80 93 eb 21 	sts	0x21EB, r24	; 0x8021eb <transfer+0xa>
	}
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	08 b6       	in	r0, 0x38	; 56
    1448:	0f 92       	push	r0
    144a:	18 be       	out	0x38, r1	; 56
    144c:	09 b6       	in	r0, 0x39	; 57
    144e:	0f 92       	push	r0
    1450:	19 be       	out	0x39, r1	; 57
    1452:	0b b6       	in	r0, 0x3b	; 59
    1454:	0f 92       	push	r0
    1456:	1b be       	out	0x3b, r1	; 59
    1458:	2f 93       	push	r18
    145a:	3f 93       	push	r19
    145c:	4f 93       	push	r20
    145e:	5f 93       	push	r21
    1460:	6f 93       	push	r22
    1462:	7f 93       	push	r23
    1464:	8f 93       	push	r24
    1466:	9f 93       	push	r25
    1468:	af 93       	push	r26
    146a:	bf 93       	push	r27
    146c:	ef 93       	push	r30
    146e:	ff 93       	push	r31
    1470:	4e df       	rcall	.-356    	; 0x130e <twim_interrupt_handler>
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0b be       	out	0x3b, r0	; 59
    148e:	0f 90       	pop	r0
    1490:	09 be       	out	0x39, r0	; 57
    1492:	0f 90       	pop	r0
    1494:	08 be       	out	0x38, r0	; 56
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	08 b6       	in	r0, 0x38	; 56
    14ac:	0f 92       	push	r0
    14ae:	18 be       	out	0x38, r1	; 56
    14b0:	09 b6       	in	r0, 0x39	; 57
    14b2:	0f 92       	push	r0
    14b4:	19 be       	out	0x39, r1	; 57
    14b6:	0b b6       	in	r0, 0x3b	; 59
    14b8:	0f 92       	push	r0
    14ba:	1b be       	out	0x3b, r1	; 59
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
    14d4:	1c df       	rcall	.-456    	; 0x130e <twim_interrupt_handler>
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0b be       	out	0x3b, r0	; 59
    14f2:	0f 90       	pop	r0
    14f4:	09 be       	out	0x39, r0	; 57
    14f6:	0f 90       	pop	r0
    14f8:	08 be       	out	0x38, r0	; 56
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1504:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1506:	db 01       	movw	r26, r22
    1508:	14 96       	adiw	r26, 0x04	; 4
    150a:	8c 91       	ld	r24, X
    150c:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    150e:	88 eb       	ldi	r24, 0xB8	; 184
    1510:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1516:	e1 ee       	ldi	r30, 0xE1	; 225
    1518:	f1 e2       	ldi	r31, 0x21	; 33
    151a:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    151c:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    151e:	e0 ea       	ldi	r30, 0xA0	; 160
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	82 81       	ldd	r24, Z+2	; 0x02
    1524:	82 60       	ori	r24, 0x02	; 2
    1526:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1528:	78 94       	sei

	return STATUS_OK;
}
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	08 95       	ret

0000152e <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	1f 92       	push	r1
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	9c 01       	movw	r18, r24
    153a:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    153c:	89 2b       	or	r24, r25
    153e:	09 f4       	brne	.+2      	; 0x1542 <twi_master_transfer+0x14>
    1540:	51 c0       	rjmp	.+162    	; 0x15e4 <twi_master_transfer+0xb6>
    1542:	30 97       	sbiw	r30, 0x00	; 0
    1544:	09 f4       	brne	.+2      	; 0x1548 <twi_master_transfer+0x1a>
    1546:	50 c0       	rjmp	.+160    	; 0x15e8 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1548:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    154a:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <transfer+0x9>
    154e:	88 23       	and	r24, r24
    1550:	19 f0       	breq	.+6      	; 0x1558 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    1552:	99 23       	and	r25, r25
    1554:	f1 f3       	breq	.-4      	; 0x1552 <twi_master_transfer+0x24>
    1556:	4a c0       	rjmp	.+148    	; 0x15ec <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1558:	8f b7       	in	r24, 0x3f	; 63
    155a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    155c:	f8 94       	cli
	return flags;
    155e:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1560:	a1 ee       	ldi	r26, 0xE1	; 225
    1562:	b1 e2       	ldi	r27, 0x21	; 33
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	19 96       	adiw	r26, 0x09	; 9
    1568:	9c 93       	st	X, r25
    156a:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    156c:	90 e8       	ldi	r25, 0x80	; 128
    156e:	1a 96       	adiw	r26, 0x0a	; 10
    1570:	9c 93       	st	X, r25
    1572:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1574:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1576:	2d 93       	st	X+, r18
    1578:	3c 93       	st	X, r19
    157a:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    157c:	12 96       	adiw	r26, 0x02	; 2
    157e:	6d 93       	st	X+, r22
    1580:	7c 93       	st	X, r23
    1582:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    1584:	14 96       	adiw	r26, 0x04	; 4
    1586:	1d 92       	st	X+, r1
    1588:	1c 92       	st	X, r1
    158a:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    158c:	16 96       	adiw	r26, 0x06	; 6
    158e:	1d 92       	st	X+, r1
    1590:	1c 92       	st	X, r1
    1592:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    1594:	18 96       	adiw	r26, 0x08	; 8
    1596:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1598:	80 81       	ld	r24, Z
    159a:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    159c:	64 81       	ldd	r22, Z+4	; 0x04
    159e:	75 81       	ldd	r23, Z+5	; 0x05
    15a0:	67 2b       	or	r22, r23
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <twi_master_transfer+0x7a>
    15a4:	41 11       	cpse	r20, r1
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    15a8:	f9 01       	movw	r30, r18
    15aa:	86 83       	std	Z+6, r24	; 0x06
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    15ae:	81 60       	ori	r24, 0x01	; 1
    15b0:	f9 01       	movw	r30, r18
    15b2:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    15b4:	e1 ee       	ldi	r30, 0xE1	; 225
    15b6:	f1 e2       	ldi	r31, 0x21	; 33
    15b8:	92 85       	ldd	r25, Z+10	; 0x0a
    15ba:	90 38       	cpi	r25, 0x80	; 128
    15bc:	e9 f3       	breq	.-6      	; 0x15b8 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    15be:	f9 01       	movw	r30, r18
    15c0:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    15c2:	83 70       	andi	r24, 0x03	; 3
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	49 f0       	breq	.+18     	; 0x15da <twi_master_transfer+0xac>
    15c8:	a1 ee       	ldi	r26, 0xE1	; 225
    15ca:	b1 e2       	ldi	r27, 0x21	; 33
    15cc:	ed 91       	ld	r30, X+
    15ce:	fc 91       	ld	r31, X
    15d0:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    15d2:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    15d4:	83 70       	andi	r24, 0x03	; 3
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	c9 f7       	brne	.-14     	; 0x15cc <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    15da:	e1 ee       	ldi	r30, 0xE1	; 225
    15dc:	f1 e2       	ldi	r31, 0x21	; 33
    15de:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    15e0:	11 86       	std	Z+9, r1	; 0x09
    15e2:	05 c0       	rjmp	.+10     	; 0x15ee <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    15e4:	88 ef       	ldi	r24, 0xF8	; 248
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <twi_master_transfer+0xc0>
    15e8:	88 ef       	ldi	r24, 0xF8	; 248
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    15ec:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    15ee:	0f 90       	pop	r0
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret

000015f6 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    15f6:	fc 01       	movw	r30, r24
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	95 ff       	sbrs	r25, 5
    15fc:	fd cf       	rjmp	.-6      	; 0x15f8 <usart_putchar+0x2>
    15fe:	60 83       	st	Z, r22
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	08 95       	ret

00001606 <usart_getchar>:
    1606:	fc 01       	movw	r30, r24
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	99 23       	and	r25, r25
    160c:	ec f7       	brge	.-6      	; 0x1608 <usart_getchar+0x2>
    160e:	80 81       	ld	r24, Z
    1610:	08 95       	ret

00001612 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1612:	4f 92       	push	r4
    1614:	5f 92       	push	r5
    1616:	6f 92       	push	r6
    1618:	7f 92       	push	r7
    161a:	8f 92       	push	r8
    161c:	9f 92       	push	r9
    161e:	af 92       	push	r10
    1620:	bf 92       	push	r11
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	7c 01       	movw	r14, r24
    162e:	4a 01       	movw	r8, r20
    1630:	5b 01       	movw	r10, r22
    1632:	28 01       	movw	r4, r16
    1634:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1636:	fc 01       	movw	r30, r24
    1638:	84 81       	ldd	r24, Z+4	; 0x04
    163a:	82 ff       	sbrs	r24, 2
    163c:	16 c0       	rjmp	.+44     	; 0x166a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    163e:	d9 01       	movw	r26, r18
    1640:	c8 01       	movw	r24, r16
    1642:	68 94       	set
    1644:	12 f8       	bld	r1, 2
    1646:	b6 95       	lsr	r27
    1648:	a7 95       	ror	r26
    164a:	97 95       	ror	r25
    164c:	87 95       	ror	r24
    164e:	16 94       	lsr	r1
    1650:	d1 f7       	brne	.-12     	; 0x1646 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1652:	b9 01       	movw	r22, r18
    1654:	a8 01       	movw	r20, r16
    1656:	03 2e       	mov	r0, r19
    1658:	36 e1       	ldi	r19, 0x16	; 22
    165a:	76 95       	lsr	r23
    165c:	67 95       	ror	r22
    165e:	57 95       	ror	r21
    1660:	47 95       	ror	r20
    1662:	3a 95       	dec	r19
    1664:	d1 f7       	brne	.-12     	; 0x165a <usart_set_baudrate+0x48>
    1666:	30 2d       	mov	r19, r0
    1668:	15 c0       	rjmp	.+42     	; 0x1694 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    166a:	d9 01       	movw	r26, r18
    166c:	c8 01       	movw	r24, r16
    166e:	68 94       	set
    1670:	13 f8       	bld	r1, 3
    1672:	b6 95       	lsr	r27
    1674:	a7 95       	ror	r26
    1676:	97 95       	ror	r25
    1678:	87 95       	ror	r24
    167a:	16 94       	lsr	r1
    167c:	d1 f7       	brne	.-12     	; 0x1672 <usart_set_baudrate+0x60>
		min_rate /= 2;
    167e:	b9 01       	movw	r22, r18
    1680:	a8 01       	movw	r20, r16
    1682:	03 2e       	mov	r0, r19
    1684:	37 e1       	ldi	r19, 0x17	; 23
    1686:	76 95       	lsr	r23
    1688:	67 95       	ror	r22
    168a:	57 95       	ror	r21
    168c:	47 95       	ror	r20
    168e:	3a 95       	dec	r19
    1690:	d1 f7       	brne	.-12     	; 0x1686 <usart_set_baudrate+0x74>
    1692:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1694:	88 15       	cp	r24, r8
    1696:	99 05       	cpc	r25, r9
    1698:	aa 05       	cpc	r26, r10
    169a:	bb 05       	cpc	r27, r11
    169c:	08 f4       	brcc	.+2      	; 0x16a0 <usart_set_baudrate+0x8e>
    169e:	a6 c0       	rjmp	.+332    	; 0x17ec <usart_set_baudrate+0x1da>
    16a0:	84 16       	cp	r8, r20
    16a2:	95 06       	cpc	r9, r21
    16a4:	a6 06       	cpc	r10, r22
    16a6:	b7 06       	cpc	r11, r23
    16a8:	08 f4       	brcc	.+2      	; 0x16ac <usart_set_baudrate+0x9a>
    16aa:	a2 c0       	rjmp	.+324    	; 0x17f0 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    16ac:	f7 01       	movw	r30, r14
    16ae:	84 81       	ldd	r24, Z+4	; 0x04
    16b0:	82 fd       	sbrc	r24, 2
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <usart_set_baudrate+0xaa>
		baud *= 2;
    16b4:	88 0c       	add	r8, r8
    16b6:	99 1c       	adc	r9, r9
    16b8:	aa 1c       	adc	r10, r10
    16ba:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    16bc:	c3 01       	movw	r24, r6
    16be:	b2 01       	movw	r22, r4
    16c0:	a5 01       	movw	r20, r10
    16c2:	94 01       	movw	r18, r8
    16c4:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    16c8:	2f 3f       	cpi	r18, 0xFF	; 255
    16ca:	31 05       	cpc	r19, r1
    16cc:	41 05       	cpc	r20, r1
    16ce:	51 05       	cpc	r21, r1
    16d0:	08 f4       	brcc	.+2      	; 0x16d4 <usart_set_baudrate+0xc2>
    16d2:	90 c0       	rjmp	.+288    	; 0x17f4 <usart_set_baudrate+0x1e2>
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e0       	ldi	r26, 0x00	; 0
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	c9 ef       	ldi	r28, 0xF9	; 249
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <usart_set_baudrate+0xd8>
    16e0:	28 17       	cp	r18, r24
    16e2:	39 07       	cpc	r19, r25
    16e4:	4a 07       	cpc	r20, r26
    16e6:	5b 07       	cpc	r21, r27
    16e8:	58 f0       	brcs	.+22     	; 0x1700 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	aa 1f       	adc	r26, r26
    16f0:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    16f2:	cd 3f       	cpi	r28, 0xFD	; 253
    16f4:	0c f4       	brge	.+2      	; 0x16f8 <usart_set_baudrate+0xe6>
			limit |= 1;
    16f6:	81 60       	ori	r24, 0x01	; 1
    16f8:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    16fa:	c7 30       	cpi	r28, 0x07	; 7
    16fc:	89 f7       	brne	.-30     	; 0x16e0 <usart_set_baudrate+0xce>
    16fe:	4f c0       	rjmp	.+158    	; 0x179e <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1700:	cc 23       	and	r28, r28
    1702:	0c f0       	brlt	.+2      	; 0x1706 <usart_set_baudrate+0xf4>
    1704:	4c c0       	rjmp	.+152    	; 0x179e <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1706:	d5 01       	movw	r26, r10
    1708:	c4 01       	movw	r24, r8
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	aa 1f       	adc	r26, r26
    1710:	bb 1f       	adc	r27, r27
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	aa 1f       	adc	r26, r26
    1718:	bb 1f       	adc	r27, r27
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	aa 1f       	adc	r26, r26
    1720:	bb 1f       	adc	r27, r27
    1722:	48 1a       	sub	r4, r24
    1724:	59 0a       	sbc	r5, r25
    1726:	6a 0a       	sbc	r6, r26
    1728:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    172a:	ce 3f       	cpi	r28, 0xFE	; 254
    172c:	f4 f4       	brge	.+60     	; 0x176a <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    172e:	8d ef       	ldi	r24, 0xFD	; 253
    1730:	9f ef       	ldi	r25, 0xFF	; 255
    1732:	8c 1b       	sub	r24, r28
    1734:	91 09       	sbc	r25, r1
    1736:	c7 fd       	sbrc	r28, 7
    1738:	93 95       	inc	r25
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <usart_set_baudrate+0x132>
    173c:	44 0c       	add	r4, r4
    173e:	55 1c       	adc	r5, r5
    1740:	66 1c       	adc	r6, r6
    1742:	77 1c       	adc	r7, r7
    1744:	8a 95       	dec	r24
    1746:	d2 f7       	brpl	.-12     	; 0x173c <usart_set_baudrate+0x12a>
    1748:	d5 01       	movw	r26, r10
    174a:	c4 01       	movw	r24, r8
    174c:	b6 95       	lsr	r27
    174e:	a7 95       	ror	r26
    1750:	97 95       	ror	r25
    1752:	87 95       	ror	r24
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	64 0d       	add	r22, r4
    175a:	75 1d       	adc	r23, r5
    175c:	86 1d       	adc	r24, r6
    175e:	97 1d       	adc	r25, r7
    1760:	a5 01       	movw	r20, r10
    1762:	94 01       	movw	r18, r8
    1764:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__udivmodsi4>
    1768:	37 c0       	rjmp	.+110    	; 0x17d8 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	8c 0f       	add	r24, r28
    176e:	a5 01       	movw	r20, r10
    1770:	94 01       	movw	r18, r8
    1772:	04 c0       	rjmp	.+8      	; 0x177c <usart_set_baudrate+0x16a>
    1774:	22 0f       	add	r18, r18
    1776:	33 1f       	adc	r19, r19
    1778:	44 1f       	adc	r20, r20
    177a:	55 1f       	adc	r21, r21
    177c:	8a 95       	dec	r24
    177e:	d2 f7       	brpl	.-12     	; 0x1774 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1780:	da 01       	movw	r26, r20
    1782:	c9 01       	movw	r24, r18
    1784:	b6 95       	lsr	r27
    1786:	a7 95       	ror	r26
    1788:	97 95       	ror	r25
    178a:	87 95       	ror	r24
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	64 0d       	add	r22, r4
    1792:	75 1d       	adc	r23, r5
    1794:	86 1d       	adc	r24, r6
    1796:	97 1d       	adc	r25, r7
    1798:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__udivmodsi4>
    179c:	1d c0       	rjmp	.+58     	; 0x17d8 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	8c 0f       	add	r24, r28
    17a2:	a5 01       	movw	r20, r10
    17a4:	94 01       	movw	r18, r8
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <usart_set_baudrate+0x19e>
    17a8:	22 0f       	add	r18, r18
    17aa:	33 1f       	adc	r19, r19
    17ac:	44 1f       	adc	r20, r20
    17ae:	55 1f       	adc	r21, r21
    17b0:	8a 95       	dec	r24
    17b2:	d2 f7       	brpl	.-12     	; 0x17a8 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    17b4:	da 01       	movw	r26, r20
    17b6:	c9 01       	movw	r24, r18
    17b8:	b6 95       	lsr	r27
    17ba:	a7 95       	ror	r26
    17bc:	97 95       	ror	r25
    17be:	87 95       	ror	r24
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	64 0d       	add	r22, r4
    17c6:	75 1d       	adc	r23, r5
    17c8:	86 1d       	adc	r24, r6
    17ca:	97 1d       	adc	r25, r7
    17cc:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__udivmodsi4>
    17d0:	21 50       	subi	r18, 0x01	; 1
    17d2:	31 09       	sbc	r19, r1
    17d4:	41 09       	sbc	r20, r1
    17d6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    17d8:	83 2f       	mov	r24, r19
    17da:	8f 70       	andi	r24, 0x0F	; 15
    17dc:	c2 95       	swap	r28
    17de:	c0 7f       	andi	r28, 0xF0	; 240
    17e0:	c8 2b       	or	r28, r24
    17e2:	f7 01       	movw	r30, r14
    17e4:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    17e6:	26 83       	std	Z+6, r18	; 0x06

	return true;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	18 c0       	rjmp	.+48     	; 0x181c <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	16 c0       	rjmp	.+44     	; 0x181c <usart_set_baudrate+0x20a>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	14 c0       	rjmp	.+40     	; 0x181c <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    17f4:	d5 01       	movw	r26, r10
    17f6:	c4 01       	movw	r24, r8
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	aa 1f       	adc	r26, r26
    17fe:	bb 1f       	adc	r27, r27
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	aa 1f       	adc	r26, r26
    1806:	bb 1f       	adc	r27, r27
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	aa 1f       	adc	r26, r26
    180e:	bb 1f       	adc	r27, r27
    1810:	48 1a       	sub	r4, r24
    1812:	59 0a       	sbc	r5, r25
    1814:	6a 0a       	sbc	r6, r26
    1816:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1818:	c9 ef       	ldi	r28, 0xF9	; 249
    181a:	89 cf       	rjmp	.-238    	; 0x172e <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	bf 90       	pop	r11
    1828:	af 90       	pop	r10
    182a:	9f 90       	pop	r9
    182c:	8f 90       	pop	r8
    182e:	7f 90       	pop	r7
    1830:	6f 90       	pop	r6
    1832:	5f 90       	pop	r5
    1834:	4f 90       	pop	r4
    1836:	08 95       	ret

00001838 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	ec 01       	movw	r28, r24
    1842:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	09 f4       	brne	.+2      	; 0x184a <usart_init_rs232+0x12>
    1848:	d6 c0       	rjmp	.+428    	; 0x19f6 <usart_init_rs232+0x1be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    184a:	80 3c       	cpi	r24, 0xC0	; 192
    184c:	91 05       	cpc	r25, r1
    184e:	29 f4       	brne	.+10     	; 0x185a <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1850:	60 e1       	ldi	r22, 0x10	; 16
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1858:	ce c0       	rjmp	.+412    	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    185a:	c1 15       	cp	r28, r1
    185c:	84 e0       	ldi	r24, 0x04	; 4
    185e:	d8 07       	cpc	r29, r24
    1860:	29 f4       	brne	.+10     	; 0x186c <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1862:	64 e0       	ldi	r22, 0x04	; 4
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    186a:	c5 c0       	rjmp	.+394    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    186c:	c0 38       	cpi	r28, 0x80	; 128
    186e:	e1 e0       	ldi	r30, 0x01	; 1
    1870:	de 07       	cpc	r29, r30
    1872:	29 f4       	brne	.+10     	; 0x187e <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    187c:	bc c0       	rjmp	.+376    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    187e:	c1 15       	cp	r28, r1
    1880:	f1 e0       	ldi	r31, 0x01	; 1
    1882:	df 07       	cpc	r29, r31
    1884:	29 f4       	brne	.+10     	; 0x1890 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    188e:	b3 c0       	rjmp	.+358    	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1890:	c0 38       	cpi	r28, 0x80	; 128
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	d8 07       	cpc	r29, r24
    1896:	29 f4       	brne	.+10     	; 0x18a2 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    18a0:	aa c0       	rjmp	.+340    	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    18a2:	c1 15       	cp	r28, r1
    18a4:	e2 e0       	ldi	r30, 0x02	; 2
    18a6:	de 07       	cpc	r29, r30
    18a8:	29 f4       	brne	.+10     	; 0x18b4 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    18aa:	62 e0       	ldi	r22, 0x02	; 2
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    18b2:	a1 c0       	rjmp	.+322    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    18b4:	c0 32       	cpi	r28, 0x20	; 32
    18b6:	f3 e0       	ldi	r31, 0x03	; 3
    18b8:	df 07       	cpc	r29, r31
    18ba:	29 f4       	brne	.+10     	; 0x18c6 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    18bc:	64 e0       	ldi	r22, 0x04	; 4
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    18c4:	98 c0       	rjmp	.+304    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    18c6:	c1 15       	cp	r28, r1
    18c8:	88 e0       	ldi	r24, 0x08	; 8
    18ca:	d8 07       	cpc	r29, r24
    18cc:	29 f4       	brne	.+10     	; 0x18d8 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    18d6:	8f c0       	rjmp	.+286    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    18d8:	c1 15       	cp	r28, r1
    18da:	e9 e0       	ldi	r30, 0x09	; 9
    18dc:	de 07       	cpc	r29, r30
    18de:	29 f4       	brne	.+10     	; 0x18ea <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    18e8:	86 c0       	rjmp	.+268    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    18ea:	c1 15       	cp	r28, r1
    18ec:	fa e0       	ldi	r31, 0x0A	; 10
    18ee:	df 07       	cpc	r29, r31
    18f0:	29 f4       	brne	.+10     	; 0x18fc <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	85 e0       	ldi	r24, 0x05	; 5
    18f6:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    18fa:	7d c0       	rjmp	.+250    	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    18fc:	c0 34       	cpi	r28, 0x40	; 64
    18fe:	88 e0       	ldi	r24, 0x08	; 8
    1900:	d8 07       	cpc	r29, r24
    1902:	29 f4       	brne	.+10     	; 0x190e <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1904:	62 e0       	ldi	r22, 0x02	; 2
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    190c:	74 c0       	rjmp	.+232    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    190e:	c0 34       	cpi	r28, 0x40	; 64
    1910:	e9 e0       	ldi	r30, 0x09	; 9
    1912:	de 07       	cpc	r29, r30
    1914:	29 f4       	brne	.+10     	; 0x1920 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1916:	62 e0       	ldi	r22, 0x02	; 2
    1918:	84 e0       	ldi	r24, 0x04	; 4
    191a:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    191e:	6b c0       	rjmp	.+214    	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1920:	c0 39       	cpi	r28, 0x90	; 144
    1922:	f8 e0       	ldi	r31, 0x08	; 8
    1924:	df 07       	cpc	r29, r31
    1926:	29 f4       	brne	.+10     	; 0x1932 <usart_init_rs232+0xfa>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1928:	64 e0       	ldi	r22, 0x04	; 4
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1930:	62 c0       	rjmp	.+196    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1932:	c0 39       	cpi	r28, 0x90	; 144
    1934:	89 e0       	ldi	r24, 0x09	; 9
    1936:	d8 07       	cpc	r29, r24
    1938:	29 f4       	brne	.+10     	; 0x1944 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    193a:	64 e0       	ldi	r22, 0x04	; 4
    193c:	84 e0       	ldi	r24, 0x04	; 4
    193e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1942:	59 c0       	rjmp	.+178    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1944:	c0 39       	cpi	r28, 0x90	; 144
    1946:	ea e0       	ldi	r30, 0x0A	; 10
    1948:	de 07       	cpc	r29, r30
    194a:	29 f4       	brne	.+10     	; 0x1956 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    194c:	64 e0       	ldi	r22, 0x04	; 4
    194e:	85 e0       	ldi	r24, 0x05	; 5
    1950:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1954:	50 c0       	rjmp	.+160    	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1956:	c0 3c       	cpi	r28, 0xC0	; 192
    1958:	f8 e0       	ldi	r31, 0x08	; 8
    195a:	df 07       	cpc	r29, r31
    195c:	29 f4       	brne	.+10     	; 0x1968 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    195e:	68 e0       	ldi	r22, 0x08	; 8
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1966:	47 c0       	rjmp	.+142    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1968:	c0 3c       	cpi	r28, 0xC0	; 192
    196a:	89 e0       	ldi	r24, 0x09	; 9
    196c:	d8 07       	cpc	r29, r24
    196e:	29 f4       	brne	.+10     	; 0x197a <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1970:	68 e0       	ldi	r22, 0x08	; 8
    1972:	84 e0       	ldi	r24, 0x04	; 4
    1974:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1978:	3e c0       	rjmp	.+124    	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    197a:	c0 3a       	cpi	r28, 0xA0	; 160
    197c:	e8 e0       	ldi	r30, 0x08	; 8
    197e:	de 07       	cpc	r29, r30
    1980:	29 f4       	brne	.+10     	; 0x198c <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1982:	60 e1       	ldi	r22, 0x10	; 16
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    198a:	35 c0       	rjmp	.+106    	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    198c:	c0 3a       	cpi	r28, 0xA0	; 160
    198e:	f9 e0       	ldi	r31, 0x09	; 9
    1990:	df 07       	cpc	r29, r31
    1992:	29 f4       	brne	.+10     	; 0x199e <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1994:	60 e1       	ldi	r22, 0x10	; 16
    1996:	84 e0       	ldi	r24, 0x04	; 4
    1998:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    199c:	2c c0       	rjmp	.+88     	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    199e:	c0 3a       	cpi	r28, 0xA0	; 160
    19a0:	8a e0       	ldi	r24, 0x0A	; 10
    19a2:	d8 07       	cpc	r29, r24
    19a4:	29 f4       	brne	.+10     	; 0x19b0 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    19a6:	60 e1       	ldi	r22, 0x10	; 16
    19a8:	85 e0       	ldi	r24, 0x05	; 5
    19aa:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    19ae:	23 c0       	rjmp	.+70     	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    19b0:	c0 3b       	cpi	r28, 0xB0	; 176
    19b2:	e8 e0       	ldi	r30, 0x08	; 8
    19b4:	de 07       	cpc	r29, r30
    19b6:	29 f4       	brne	.+10     	; 0x19c2 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    19b8:	60 e2       	ldi	r22, 0x20	; 32
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    19c0:	1a c0       	rjmp	.+52     	; 0x19f6 <usart_init_rs232+0x1be>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    19c2:	c0 3b       	cpi	r28, 0xB0	; 176
    19c4:	f9 e0       	ldi	r31, 0x09	; 9
    19c6:	df 07       	cpc	r29, r31
    19c8:	29 f4       	brne	.+10     	; 0x19d4 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    19ca:	60 e2       	ldi	r22, 0x20	; 32
    19cc:	84 e0       	ldi	r24, 0x04	; 4
    19ce:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    19d2:	11 c0       	rjmp	.+34     	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    19d4:	c0 38       	cpi	r28, 0x80	; 128
    19d6:	84 e0       	ldi	r24, 0x04	; 4
    19d8:	d8 07       	cpc	r29, r24
    19da:	29 f4       	brne	.+10     	; 0x19e6 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    19dc:	60 e4       	ldi	r22, 0x40	; 64
    19de:	83 e0       	ldi	r24, 0x03	; 3
    19e0:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <usart_init_rs232+0x1be>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    19e6:	c0 3a       	cpi	r28, 0xA0	; 160
    19e8:	e4 e0       	ldi	r30, 0x04	; 4
    19ea:	de 07       	cpc	r29, r30
    19ec:	21 f4       	brne	.+8      	; 0x19f6 <usart_init_rs232+0x1be>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    19ee:	60 e4       	ldi	r22, 0x40	; 64
    19f0:	85 e0       	ldi	r24, 0x05	; 5
    19f2:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	8f 73       	andi	r24, 0x3F	; 63
    19fa:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    19fc:	f8 01       	movw	r30, r16
    19fe:	95 81       	ldd	r25, Z+5	; 0x05
    1a00:	84 81       	ldd	r24, Z+4	; 0x04
    1a02:	89 2b       	or	r24, r25
    1a04:	96 81       	ldd	r25, Z+6	; 0x06
    1a06:	91 11       	cpse	r25, r1
    1a08:	98 e0       	ldi	r25, 0x08	; 8
    1a0a:	89 2b       	or	r24, r25
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1a0e:	f8 01       	movw	r30, r16
    1a10:	40 81       	ld	r20, Z
    1a12:	51 81       	ldd	r21, Z+1	; 0x01
    1a14:	62 81       	ldd	r22, Z+2	; 0x02
    1a16:	73 81       	ldd	r23, Z+3	; 0x03
    1a18:	00 e0       	ldi	r16, 0x00	; 0
    1a1a:	18 e4       	ldi	r17, 0x48	; 72
    1a1c:	28 ee       	ldi	r18, 0xE8	; 232
    1a1e:	31 e0       	ldi	r19, 0x01	; 1
    1a20:	ce 01       	movw	r24, r28
    1a22:	f7 dd       	rcall	.-1042   	; 0x1612 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	98 60       	ori	r25, 0x08	; 8
    1a28:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	90 61       	ori	r25, 0x10	; 16
    1a2e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <bno055_init>:
		} else {
		com_rslt = BNO055_ERROR;
		}
	}
	return com_rslt;
}
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <bno055_init+0x8>
    1a42:	1f 92       	push	r1
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	19 82       	std	Y+1, r1	; 0x01
    1a4a:	1a 82       	std	Y+2, r1	; 0x02
    1a4c:	1b 82       	std	Y+3, r1	; 0x03
    1a4e:	1c 82       	std	Y+4, r1	; 0x04
    1a50:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <p_bno055>
    1a54:	90 93 ed 21 	sts	0x21ED, r25	; 0x8021ed <p_bno055+0x1>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	19 96       	adiw	r26, 0x09	; 9
    1a5c:	ed 91       	ld	r30, X+
    1a5e:	fc 91       	ld	r31, X
    1a60:	1a 97       	sbiw	r26, 0x0a	; 10
    1a62:	21 e0       	ldi	r18, 0x01	; 1
    1a64:	ae 01       	movw	r20, r28
    1a66:	4e 5f       	subi	r20, 0xFE	; 254
    1a68:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6a:	67 e0       	ldi	r22, 0x07	; 7
    1a6c:	18 96       	adiw	r26, 0x08	; 8
    1a6e:	8c 91       	ld	r24, X
    1a70:	19 95       	eicall
    1a72:	18 2f       	mov	r17, r24
    1a74:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1a78:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1a7c:	1b 96       	adiw	r26, 0x0b	; 11
    1a7e:	ed 91       	ld	r30, X+
    1a80:	fc 91       	ld	r31, X
    1a82:	1c 97       	sbiw	r26, 0x0c	; 12
    1a84:	21 e0       	ldi	r18, 0x01	; 1
    1a86:	ae 01       	movw	r20, r28
    1a88:	4f 5f       	subi	r20, 0xFF	; 255
    1a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	18 96       	adiw	r26, 0x08	; 8
    1a90:	8c 91       	ld	r24, X
    1a92:	19 95       	eicall
    1a94:	18 0f       	add	r17, r24
    1a96:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1a9a:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	8c 93       	st	X, r24
    1aa2:	1b 96       	adiw	r26, 0x0b	; 11
    1aa4:	ed 91       	ld	r30, X+
    1aa6:	fc 91       	ld	r31, X
    1aa8:	1c 97       	sbiw	r26, 0x0c	; 12
    1aaa:	21 e0       	ldi	r18, 0x01	; 1
    1aac:	ae 01       	movw	r20, r28
    1aae:	4f 5f       	subi	r20, 0xFF	; 255
    1ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	18 96       	adiw	r26, 0x08	; 8
    1ab6:	8c 91       	ld	r24, X
    1ab8:	19 95       	eicall
    1aba:	18 0f       	add	r17, r24
    1abc:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1ac0:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	14 96       	adiw	r26, 0x04	; 4
    1ac8:	8c 93       	st	X, r24
    1aca:	14 97       	sbiw	r26, 0x04	; 4
    1acc:	1b 96       	adiw	r26, 0x0b	; 11
    1ace:	ed 91       	ld	r30, X+
    1ad0:	fc 91       	ld	r31, X
    1ad2:	1c 97       	sbiw	r26, 0x0c	; 12
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	ae 01       	movw	r20, r28
    1ad8:	4f 5f       	subi	r20, 0xFF	; 255
    1ada:	5f 4f       	sbci	r21, 0xFF	; 255
    1adc:	62 e0       	ldi	r22, 0x02	; 2
    1ade:	18 96       	adiw	r26, 0x08	; 8
    1ae0:	8c 91       	ld	r24, X
    1ae2:	19 95       	eicall
    1ae4:	18 0f       	add	r17, r24
    1ae6:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1aea:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	15 96       	adiw	r26, 0x05	; 5
    1af2:	8c 93       	st	X, r24
    1af4:	15 97       	sbiw	r26, 0x05	; 5
    1af6:	1b 96       	adiw	r26, 0x0b	; 11
    1af8:	ed 91       	ld	r30, X+
    1afa:	fc 91       	ld	r31, X
    1afc:	1c 97       	sbiw	r26, 0x0c	; 12
    1afe:	21 e0       	ldi	r18, 0x01	; 1
    1b00:	ae 01       	movw	r20, r28
    1b02:	4f 5f       	subi	r20, 0xFF	; 255
    1b04:	5f 4f       	sbci	r21, 0xFF	; 255
    1b06:	63 e0       	ldi	r22, 0x03	; 3
    1b08:	18 96       	adiw	r26, 0x08	; 8
    1b0a:	8c 91       	ld	r24, X
    1b0c:	19 95       	eicall
    1b0e:	18 0f       	add	r17, r24
    1b10:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1b14:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	16 96       	adiw	r26, 0x06	; 6
    1b1c:	8c 93       	st	X, r24
    1b1e:	16 97       	sbiw	r26, 0x06	; 6
    1b20:	1b 96       	adiw	r26, 0x0b	; 11
    1b22:	ed 91       	ld	r30, X+
    1b24:	fc 91       	ld	r31, X
    1b26:	1c 97       	sbiw	r26, 0x0c	; 12
    1b28:	21 e0       	ldi	r18, 0x01	; 1
    1b2a:	ae 01       	movw	r20, r28
    1b2c:	4f 5f       	subi	r20, 0xFF	; 255
    1b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b30:	66 e0       	ldi	r22, 0x06	; 6
    1b32:	18 96       	adiw	r26, 0x08	; 8
    1b34:	8c 91       	ld	r24, X
    1b36:	19 95       	eicall
    1b38:	18 0f       	add	r17, r24
    1b3a:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1b3e:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	17 96       	adiw	r26, 0x07	; 7
    1b46:	8c 93       	st	X, r24
    1b48:	17 97       	sbiw	r26, 0x07	; 7
    1b4a:	1b 96       	adiw	r26, 0x0b	; 11
    1b4c:	ed 91       	ld	r30, X+
    1b4e:	fc 91       	ld	r31, X
    1b50:	1c 97       	sbiw	r26, 0x0c	; 12
    1b52:	22 e0       	ldi	r18, 0x02	; 2
    1b54:	ae 01       	movw	r20, r28
    1b56:	4d 5f       	subi	r20, 0xFD	; 253
    1b58:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5a:	64 e0       	ldi	r22, 0x04	; 4
    1b5c:	18 96       	adiw	r26, 0x08	; 8
    1b5e:	8c 91       	ld	r24, X
    1b60:	19 95       	eicall
    1b62:	18 0f       	add	r17, r24
    1b64:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1b68:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	98 2f       	mov	r25, r24
    1b72:	88 27       	eor	r24, r24
    1b74:	2b 81       	ldd	r18, Y+3	; 0x03
    1b76:	82 2b       	or	r24, r18
    1b78:	11 96       	adiw	r26, 0x01	; 1
    1b7a:	8d 93       	st	X+, r24
    1b7c:	9c 93       	st	X, r25
    1b7e:	12 97       	sbiw	r26, 0x02	; 2
    1b80:	1b 96       	adiw	r26, 0x0b	; 11
    1b82:	ed 91       	ld	r30, X+
    1b84:	fc 91       	ld	r31, X
    1b86:	1c 97       	sbiw	r26, 0x0c	; 12
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	ae 01       	movw	r20, r28
    1b8c:	4f 5f       	subi	r20, 0xFF	; 255
    1b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b90:	67 e0       	ldi	r22, 0x07	; 7
    1b92:	18 96       	adiw	r26, 0x08	; 8
    1b94:	8c 91       	ld	r24, X
    1b96:	19 95       	eicall
    1b98:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1b9c:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1ba0:	99 81       	ldd	r25, Y+1	; 0x01
    1ba2:	93 83       	std	Z+3, r25	; 0x03
    1ba4:	81 0f       	add	r24, r17
    1ba6:	24 96       	adiw	r28, 0x04	; 4
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	08 95       	ret

00001bb4 <bno055_write_register>:
    1bb4:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1bb8:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1bbc:	10 97       	sbiw	r26, 0x00	; 0
    1bbe:	59 f0       	breq	.+22     	; 0x1bd6 <bno055_write_register+0x22>
    1bc0:	24 2f       	mov	r18, r20
    1bc2:	ab 01       	movw	r20, r22
    1bc4:	68 2f       	mov	r22, r24
    1bc6:	19 96       	adiw	r26, 0x09	; 9
    1bc8:	ed 91       	ld	r30, X+
    1bca:	fc 91       	ld	r31, X
    1bcc:	1a 97       	sbiw	r26, 0x0a	; 10
    1bce:	18 96       	adiw	r26, 0x08	; 8
    1bd0:	8c 91       	ld	r24, X
    1bd2:	19 95       	eicall
    1bd4:	08 95       	ret
    1bd6:	81 e8       	ldi	r24, 0x81	; 129
    1bd8:	08 95       	ret

00001bda <bno055_write_page_id>:
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	1f 92       	push	r1
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	19 82       	std	Y+1, r1	; 0x01
    1be8:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1bec:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1bf0:	10 97       	sbiw	r26, 0x00	; 0
    1bf2:	41 f1       	breq	.+80     	; 0x1c44 <bno055_write_page_id+0x6a>
    1bf4:	18 2f       	mov	r17, r24
    1bf6:	1b 96       	adiw	r26, 0x0b	; 11
    1bf8:	ed 91       	ld	r30, X+
    1bfa:	fc 91       	ld	r31, X
    1bfc:	1c 97       	sbiw	r26, 0x0c	; 12
    1bfe:	21 e0       	ldi	r18, 0x01	; 1
    1c00:	ae 01       	movw	r20, r28
    1c02:	4f 5f       	subi	r20, 0xFF	; 255
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	67 e0       	ldi	r22, 0x07	; 7
    1c08:	18 96       	adiw	r26, 0x08	; 8
    1c0a:	8c 91       	ld	r24, X
    1c0c:	19 95       	eicall
    1c0e:	81 11       	cpse	r24, r1
    1c10:	1b c0       	rjmp	.+54     	; 0x1c48 <bno055_write_page_id+0x6e>
    1c12:	19 83       	std	Y+1, r17	; 0x01
    1c14:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1c18:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1c1c:	19 96       	adiw	r26, 0x09	; 9
    1c1e:	ed 91       	ld	r30, X+
    1c20:	fc 91       	ld	r31, X
    1c22:	1a 97       	sbiw	r26, 0x0a	; 10
    1c24:	21 e0       	ldi	r18, 0x01	; 1
    1c26:	ae 01       	movw	r20, r28
    1c28:	4f 5f       	subi	r20, 0xFF	; 255
    1c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2c:	67 e0       	ldi	r22, 0x07	; 7
    1c2e:	18 96       	adiw	r26, 0x08	; 8
    1c30:	8c 91       	ld	r24, X
    1c32:	19 95       	eicall
    1c34:	81 11       	cpse	r24, r1
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <bno055_write_page_id+0x70>
    1c38:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1c3c:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1c40:	13 83       	std	Z+3, r17	; 0x03
    1c42:	03 c0       	rjmp	.+6      	; 0x1c4a <bno055_write_page_id+0x70>
    1c44:	81 e8       	ldi	r24, 0x81	; 129
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <bno055_write_page_id+0x70>
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	0f 90       	pop	r0
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	08 95       	ret

00001c54 <bno055_read_euler_hrp>:
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <bno055_read_euler_hrp+0xa>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <bno055_read_euler_hrp+0xc>
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	8c 01       	movw	r16, r24
    1c66:	fe 01       	movw	r30, r28
    1c68:	31 96       	adiw	r30, 0x01	; 1
    1c6a:	96 e0       	ldi	r25, 0x06	; 6
    1c6c:	df 01       	movw	r26, r30
    1c6e:	1d 92       	st	X+, r1
    1c70:	9a 95       	dec	r25
    1c72:	e9 f7       	brne	.-6      	; 0x1c6e <bno055_read_euler_hrp+0x1a>
    1c74:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1c78:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1c7c:	30 97       	sbiw	r30, 0x00	; 0
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <bno055_read_euler_hrp+0x2e>
    1c80:	3e c0       	rjmp	.+124    	; 0x1cfe <bno055_read_euler_hrp+0xaa>
    1c82:	83 81       	ldd	r24, Z+3	; 0x03
    1c84:	88 23       	and	r24, r24
    1c86:	59 f0       	breq	.+22     	; 0x1c9e <bno055_read_euler_hrp+0x4a>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	a7 df       	rcall	.-178    	; 0x1bda <bno055_write_page_id>
    1c8c:	88 23       	and	r24, r24
    1c8e:	39 f0       	breq	.+14     	; 0x1c9e <bno055_read_euler_hrp+0x4a>
    1c90:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1c94:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1c98:	83 81       	ldd	r24, Z+3	; 0x03
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	32 c0       	rjmp	.+100    	; 0x1d02 <bno055_read_euler_hrp+0xae>
    1c9e:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1ca2:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1ca6:	1b 96       	adiw	r26, 0x0b	; 11
    1ca8:	ed 91       	ld	r30, X+
    1caa:	fc 91       	ld	r31, X
    1cac:	1c 97       	sbiw	r26, 0x0c	; 12
    1cae:	26 e0       	ldi	r18, 0x06	; 6
    1cb0:	ae 01       	movw	r20, r28
    1cb2:	4f 5f       	subi	r20, 0xFF	; 255
    1cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb6:	6a e1       	ldi	r22, 0x1A	; 26
    1cb8:	18 96       	adiw	r26, 0x08	; 8
    1cba:	8c 91       	ld	r24, X
    1cbc:	19 95       	eicall
    1cbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	00 0c       	add	r0, r0
    1cc4:	33 0b       	sbc	r19, r19
    1cc6:	32 2f       	mov	r19, r18
    1cc8:	22 27       	eor	r18, r18
    1cca:	99 81       	ldd	r25, Y+1	; 0x01
    1ccc:	29 2b       	or	r18, r25
    1cce:	f8 01       	movw	r30, r16
    1cd0:	20 83       	st	Z, r18
    1cd2:	31 83       	std	Z+1, r19	; 0x01
    1cd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd6:	02 2e       	mov	r0, r18
    1cd8:	00 0c       	add	r0, r0
    1cda:	33 0b       	sbc	r19, r19
    1cdc:	32 2f       	mov	r19, r18
    1cde:	22 27       	eor	r18, r18
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	29 2b       	or	r18, r25
    1ce4:	22 83       	std	Z+2, r18	; 0x02
    1ce6:	33 83       	std	Z+3, r19	; 0x03
    1ce8:	2e 81       	ldd	r18, Y+6	; 0x06
    1cea:	02 2e       	mov	r0, r18
    1cec:	00 0c       	add	r0, r0
    1cee:	33 0b       	sbc	r19, r19
    1cf0:	32 2f       	mov	r19, r18
    1cf2:	22 27       	eor	r18, r18
    1cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf6:	29 2b       	or	r18, r25
    1cf8:	24 83       	std	Z+4, r18	; 0x04
    1cfa:	35 83       	std	Z+5, r19	; 0x05
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <bno055_read_euler_hrp+0xb0>
    1cfe:	81 e8       	ldi	r24, 0x81	; 129
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <bno055_read_euler_hrp+0xb0>
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	26 96       	adiw	r28, 0x06	; 6
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	08 95       	ret

00001d14 <bno055_read_linear_accel_xyz>:
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <bno055_read_linear_accel_xyz+0xa>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <bno055_read_linear_accel_xyz+0xc>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	8c 01       	movw	r16, r24
    1d26:	fe 01       	movw	r30, r28
    1d28:	31 96       	adiw	r30, 0x01	; 1
    1d2a:	96 e0       	ldi	r25, 0x06	; 6
    1d2c:	df 01       	movw	r26, r30
    1d2e:	1d 92       	st	X+, r1
    1d30:	9a 95       	dec	r25
    1d32:	e9 f7       	brne	.-6      	; 0x1d2e <bno055_read_linear_accel_xyz+0x1a>
    1d34:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1d38:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1d3c:	30 97       	sbiw	r30, 0x00	; 0
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <bno055_read_linear_accel_xyz+0x2e>
    1d40:	3e c0       	rjmp	.+124    	; 0x1dbe <bno055_read_linear_accel_xyz+0xaa>
    1d42:	83 81       	ldd	r24, Z+3	; 0x03
    1d44:	88 23       	and	r24, r24
    1d46:	59 f0       	breq	.+22     	; 0x1d5e <bno055_read_linear_accel_xyz+0x4a>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	47 df       	rcall	.-370    	; 0x1bda <bno055_write_page_id>
    1d4c:	88 23       	and	r24, r24
    1d4e:	39 f0       	breq	.+14     	; 0x1d5e <bno055_read_linear_accel_xyz+0x4a>
    1d50:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1d54:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1d58:	83 81       	ldd	r24, Z+3	; 0x03
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	32 c0       	rjmp	.+100    	; 0x1dc2 <bno055_read_linear_accel_xyz+0xae>
    1d5e:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1d62:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1d66:	1b 96       	adiw	r26, 0x0b	; 11
    1d68:	ed 91       	ld	r30, X+
    1d6a:	fc 91       	ld	r31, X
    1d6c:	1c 97       	sbiw	r26, 0x0c	; 12
    1d6e:	26 e0       	ldi	r18, 0x06	; 6
    1d70:	ae 01       	movw	r20, r28
    1d72:	4f 5f       	subi	r20, 0xFF	; 255
    1d74:	5f 4f       	sbci	r21, 0xFF	; 255
    1d76:	68 e2       	ldi	r22, 0x28	; 40
    1d78:	18 96       	adiw	r26, 0x08	; 8
    1d7a:	8c 91       	ld	r24, X
    1d7c:	19 95       	eicall
    1d7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d80:	02 2e       	mov	r0, r18
    1d82:	00 0c       	add	r0, r0
    1d84:	33 0b       	sbc	r19, r19
    1d86:	32 2f       	mov	r19, r18
    1d88:	22 27       	eor	r18, r18
    1d8a:	99 81       	ldd	r25, Y+1	; 0x01
    1d8c:	29 2b       	or	r18, r25
    1d8e:	f8 01       	movw	r30, r16
    1d90:	20 83       	st	Z, r18
    1d92:	31 83       	std	Z+1, r19	; 0x01
    1d94:	2c 81       	ldd	r18, Y+4	; 0x04
    1d96:	02 2e       	mov	r0, r18
    1d98:	00 0c       	add	r0, r0
    1d9a:	33 0b       	sbc	r19, r19
    1d9c:	32 2f       	mov	r19, r18
    1d9e:	22 27       	eor	r18, r18
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	29 2b       	or	r18, r25
    1da4:	22 83       	std	Z+2, r18	; 0x02
    1da6:	33 83       	std	Z+3, r19	; 0x03
    1da8:	2e 81       	ldd	r18, Y+6	; 0x06
    1daa:	02 2e       	mov	r0, r18
    1dac:	00 0c       	add	r0, r0
    1dae:	33 0b       	sbc	r19, r19
    1db0:	32 2f       	mov	r19, r18
    1db2:	22 27       	eor	r18, r18
    1db4:	9d 81       	ldd	r25, Y+5	; 0x05
    1db6:	29 2b       	or	r18, r25
    1db8:	24 83       	std	Z+4, r18	; 0x04
    1dba:	35 83       	std	Z+5, r19	; 0x05
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <bno055_read_linear_accel_xyz+0xb0>
    1dbe:	81 e8       	ldi	r24, 0x81	; 129
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <bno055_read_linear_accel_xyz+0xb0>
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	26 96       	adiw	r28, 0x06	; 6
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	08 95       	ret

00001dd4 <bno055_convert_double_linear_accel_xyz_msq>:
    1dd4:	ff 92       	push	r15
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <bno055_convert_double_linear_accel_xyz_msq+0xc>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <bno055_convert_double_linear_accel_xyz_msq+0xe>
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	8c 01       	movw	r16, r24
    1de8:	19 82       	std	Y+1, r1	; 0x01
    1dea:	1a 82       	std	Y+2, r1	; 0x02
    1dec:	1b 82       	std	Y+3, r1	; 0x03
    1dee:	1c 82       	std	Y+4, r1	; 0x04
    1df0:	1d 82       	std	Y+5, r1	; 0x05
    1df2:	1e 82       	std	Y+6, r1	; 0x06
    1df4:	ce 01       	movw	r24, r28
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	8d df       	rcall	.-230    	; 0x1d14 <bno055_read_linear_accel_xyz>
    1dfa:	f8 2e       	mov	r15, r24
    1dfc:	81 11       	cpse	r24, r1
    1dfe:	3a c0       	rjmp	.+116    	; 0x1e74 <bno055_convert_double_linear_accel_xyz_msq+0xa0>
    1e00:	69 81       	ldd	r22, Y+1	; 0x01
    1e02:	7a 81       	ldd	r23, Y+2	; 0x02
    1e04:	07 2e       	mov	r0, r23
    1e06:	00 0c       	add	r0, r0
    1e08:	88 0b       	sbc	r24, r24
    1e0a:	99 0b       	sbc	r25, r25
    1e0c:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	48 ec       	ldi	r20, 0xC8	; 200
    1e16:	52 e4       	ldi	r21, 0x42	; 66
    1e18:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    1e1c:	f8 01       	movw	r30, r16
    1e1e:	60 83       	st	Z, r22
    1e20:	71 83       	std	Z+1, r23	; 0x01
    1e22:	82 83       	std	Z+2, r24	; 0x02
    1e24:	93 83       	std	Z+3, r25	; 0x03
    1e26:	6b 81       	ldd	r22, Y+3	; 0x03
    1e28:	7c 81       	ldd	r23, Y+4	; 0x04
    1e2a:	07 2e       	mov	r0, r23
    1e2c:	00 0c       	add	r0, r0
    1e2e:	88 0b       	sbc	r24, r24
    1e30:	99 0b       	sbc	r25, r25
    1e32:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	48 ec       	ldi	r20, 0xC8	; 200
    1e3c:	52 e4       	ldi	r21, 0x42	; 66
    1e3e:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    1e42:	f8 01       	movw	r30, r16
    1e44:	64 83       	std	Z+4, r22	; 0x04
    1e46:	75 83       	std	Z+5, r23	; 0x05
    1e48:	86 83       	std	Z+6, r24	; 0x06
    1e4a:	97 83       	std	Z+7, r25	; 0x07
    1e4c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e4e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e50:	07 2e       	mov	r0, r23
    1e52:	00 0c       	add	r0, r0
    1e54:	88 0b       	sbc	r24, r24
    1e56:	99 0b       	sbc	r25, r25
    1e58:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	48 ec       	ldi	r20, 0xC8	; 200
    1e62:	52 e4       	ldi	r21, 0x42	; 66
    1e64:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    1e68:	f8 01       	movw	r30, r16
    1e6a:	60 87       	std	Z+8, r22	; 0x08
    1e6c:	71 87       	std	Z+9, r23	; 0x09
    1e6e:	82 87       	std	Z+10, r24	; 0x0a
    1e70:	93 87       	std	Z+11, r25	; 0x0b
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <bno055_convert_double_linear_accel_xyz_msq+0xa4>
    1e74:	ff 24       	eor	r15, r15
    1e76:	fa 94       	dec	r15
    1e78:	8f 2d       	mov	r24, r15
    1e7a:	26 96       	adiw	r28, 0x06	; 6
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	ff 90       	pop	r15
    1e8a:	08 95       	ret

00001e8c <bno055_get_mag_calib_stat>:
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	1f 92       	push	r1
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	19 82       	std	Y+1, r1	; 0x01
    1e9c:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1ea0:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1ea4:	30 97       	sbiw	r30, 0x00	; 0
    1ea6:	21 f1       	breq	.+72     	; 0x1ef0 <bno055_get_mag_calib_stat+0x64>
    1ea8:	8c 01       	movw	r16, r24
    1eaa:	83 81       	ldd	r24, Z+3	; 0x03
    1eac:	88 23       	and	r24, r24
    1eae:	59 f0       	breq	.+22     	; 0x1ec6 <bno055_get_mag_calib_stat+0x3a>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	93 de       	rcall	.-730    	; 0x1bda <bno055_write_page_id>
    1eb4:	88 23       	and	r24, r24
    1eb6:	39 f0       	breq	.+14     	; 0x1ec6 <bno055_get_mag_calib_stat+0x3a>
    1eb8:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1ebc:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1ec0:	83 81       	ldd	r24, Z+3	; 0x03
    1ec2:	81 11       	cpse	r24, r1
    1ec4:	17 c0       	rjmp	.+46     	; 0x1ef4 <bno055_get_mag_calib_stat+0x68>
    1ec6:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1eca:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1ece:	1b 96       	adiw	r26, 0x0b	; 11
    1ed0:	ed 91       	ld	r30, X+
    1ed2:	fc 91       	ld	r31, X
    1ed4:	1c 97       	sbiw	r26, 0x0c	; 12
    1ed6:	21 e0       	ldi	r18, 0x01	; 1
    1ed8:	ae 01       	movw	r20, r28
    1eda:	4f 5f       	subi	r20, 0xFF	; 255
    1edc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ede:	65 e3       	ldi	r22, 0x35	; 53
    1ee0:	18 96       	adiw	r26, 0x08	; 8
    1ee2:	8c 91       	ld	r24, X
    1ee4:	19 95       	eicall
    1ee6:	99 81       	ldd	r25, Y+1	; 0x01
    1ee8:	93 70       	andi	r25, 0x03	; 3
    1eea:	f8 01       	movw	r30, r16
    1eec:	90 83       	st	Z, r25
    1eee:	03 c0       	rjmp	.+6      	; 0x1ef6 <bno055_get_mag_calib_stat+0x6a>
    1ef0:	81 e8       	ldi	r24, 0x81	; 129
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <bno055_get_mag_calib_stat+0x6a>
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	0f 90       	pop	r0
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	08 95       	ret

00001f02 <bno055_get_accel_calib_stat>:
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	1f 92       	push	r1
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	19 82       	std	Y+1, r1	; 0x01
    1f12:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1f16:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1f1a:	30 97       	sbiw	r30, 0x00	; 0
    1f1c:	49 f1       	breq	.+82     	; 0x1f70 <bno055_get_accel_calib_stat+0x6e>
    1f1e:	8c 01       	movw	r16, r24
    1f20:	83 81       	ldd	r24, Z+3	; 0x03
    1f22:	88 23       	and	r24, r24
    1f24:	59 f0       	breq	.+22     	; 0x1f3c <bno055_get_accel_calib_stat+0x3a>
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	58 de       	rcall	.-848    	; 0x1bda <bno055_write_page_id>
    1f2a:	88 23       	and	r24, r24
    1f2c:	39 f0       	breq	.+14     	; 0x1f3c <bno055_get_accel_calib_stat+0x3a>
    1f2e:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1f32:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1f36:	83 81       	ldd	r24, Z+3	; 0x03
    1f38:	81 11       	cpse	r24, r1
    1f3a:	1c c0       	rjmp	.+56     	; 0x1f74 <bno055_get_accel_calib_stat+0x72>
    1f3c:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1f40:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1f44:	1b 96       	adiw	r26, 0x0b	; 11
    1f46:	ed 91       	ld	r30, X+
    1f48:	fc 91       	ld	r31, X
    1f4a:	1c 97       	sbiw	r26, 0x0c	; 12
    1f4c:	21 e0       	ldi	r18, 0x01	; 1
    1f4e:	ae 01       	movw	r20, r28
    1f50:	4f 5f       	subi	r20, 0xFF	; 255
    1f52:	5f 4f       	sbci	r21, 0xFF	; 255
    1f54:	65 e3       	ldi	r22, 0x35	; 53
    1f56:	18 96       	adiw	r26, 0x08	; 8
    1f58:	8c 91       	ld	r24, X
    1f5a:	19 95       	eicall
    1f5c:	29 81       	ldd	r18, Y+1	; 0x01
    1f5e:	2c 70       	andi	r18, 0x0C	; 12
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	35 95       	asr	r19
    1f64:	27 95       	ror	r18
    1f66:	35 95       	asr	r19
    1f68:	27 95       	ror	r18
    1f6a:	f8 01       	movw	r30, r16
    1f6c:	20 83       	st	Z, r18
    1f6e:	03 c0       	rjmp	.+6      	; 0x1f76 <bno055_get_accel_calib_stat+0x74>
    1f70:	81 e8       	ldi	r24, 0x81	; 129
    1f72:	01 c0       	rjmp	.+2      	; 0x1f76 <bno055_get_accel_calib_stat+0x74>
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	0f 90       	pop	r0
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <bno055_get_gyro_calib_stat>:
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	1f 92       	push	r1
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	19 82       	std	Y+1, r1	; 0x01
    1f92:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1f96:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1f9a:	30 97       	sbiw	r30, 0x00	; 0
    1f9c:	69 f1       	breq	.+90     	; 0x1ff8 <bno055_get_gyro_calib_stat+0x76>
    1f9e:	8c 01       	movw	r16, r24
    1fa0:	83 81       	ldd	r24, Z+3	; 0x03
    1fa2:	88 23       	and	r24, r24
    1fa4:	59 f0       	breq	.+22     	; 0x1fbc <bno055_get_gyro_calib_stat+0x3a>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	18 de       	rcall	.-976    	; 0x1bda <bno055_write_page_id>
    1faa:	88 23       	and	r24, r24
    1fac:	39 f0       	breq	.+14     	; 0x1fbc <bno055_get_gyro_calib_stat+0x3a>
    1fae:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    1fb2:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1fb6:	83 81       	ldd	r24, Z+3	; 0x03
    1fb8:	81 11       	cpse	r24, r1
    1fba:	20 c0       	rjmp	.+64     	; 0x1ffc <bno055_get_gyro_calib_stat+0x7a>
    1fbc:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    1fc0:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    1fc4:	1b 96       	adiw	r26, 0x0b	; 11
    1fc6:	ed 91       	ld	r30, X+
    1fc8:	fc 91       	ld	r31, X
    1fca:	1c 97       	sbiw	r26, 0x0c	; 12
    1fcc:	21 e0       	ldi	r18, 0x01	; 1
    1fce:	ae 01       	movw	r20, r28
    1fd0:	4f 5f       	subi	r20, 0xFF	; 255
    1fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd4:	65 e3       	ldi	r22, 0x35	; 53
    1fd6:	18 96       	adiw	r26, 0x08	; 8
    1fd8:	8c 91       	ld	r24, X
    1fda:	19 95       	eicall
    1fdc:	29 81       	ldd	r18, Y+1	; 0x01
    1fde:	20 73       	andi	r18, 0x30	; 48
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	35 95       	asr	r19
    1fe4:	27 95       	ror	r18
    1fe6:	35 95       	asr	r19
    1fe8:	27 95       	ror	r18
    1fea:	35 95       	asr	r19
    1fec:	27 95       	ror	r18
    1fee:	35 95       	asr	r19
    1ff0:	27 95       	ror	r18
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	20 83       	st	Z, r18
    1ff6:	03 c0       	rjmp	.+6      	; 0x1ffe <bno055_get_gyro_calib_stat+0x7c>
    1ff8:	81 e8       	ldi	r24, 0x81	; 129
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <bno055_get_gyro_calib_stat+0x7c>
    1ffc:	8f ef       	ldi	r24, 0xFF	; 255
    1ffe:	0f 90       	pop	r0
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <bno055_get_sys_calib_stat>:
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	1f 92       	push	r1
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	19 82       	std	Y+1, r1	; 0x01
    201a:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    201e:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    2022:	30 97       	sbiw	r30, 0x00	; 0
    2024:	39 f1       	breq	.+78     	; 0x2074 <bno055_get_sys_calib_stat+0x6a>
    2026:	8c 01       	movw	r16, r24
    2028:	83 81       	ldd	r24, Z+3	; 0x03
    202a:	88 23       	and	r24, r24
    202c:	59 f0       	breq	.+22     	; 0x2044 <bno055_get_sys_calib_stat+0x3a>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	d4 dd       	rcall	.-1112   	; 0x1bda <bno055_write_page_id>
    2032:	88 23       	and	r24, r24
    2034:	39 f0       	breq	.+14     	; 0x2044 <bno055_get_sys_calib_stat+0x3a>
    2036:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    203a:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    203e:	83 81       	ldd	r24, Z+3	; 0x03
    2040:	81 11       	cpse	r24, r1
    2042:	1a c0       	rjmp	.+52     	; 0x2078 <bno055_get_sys_calib_stat+0x6e>
    2044:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    2048:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    204c:	1b 96       	adiw	r26, 0x0b	; 11
    204e:	ed 91       	ld	r30, X+
    2050:	fc 91       	ld	r31, X
    2052:	1c 97       	sbiw	r26, 0x0c	; 12
    2054:	21 e0       	ldi	r18, 0x01	; 1
    2056:	ae 01       	movw	r20, r28
    2058:	4f 5f       	subi	r20, 0xFF	; 255
    205a:	5f 4f       	sbci	r21, 0xFF	; 255
    205c:	65 e3       	ldi	r22, 0x35	; 53
    205e:	18 96       	adiw	r26, 0x08	; 8
    2060:	8c 91       	ld	r24, X
    2062:	19 95       	eicall
    2064:	99 81       	ldd	r25, Y+1	; 0x01
    2066:	92 95       	swap	r25
    2068:	96 95       	lsr	r25
    206a:	96 95       	lsr	r25
    206c:	93 70       	andi	r25, 0x03	; 3
    206e:	f8 01       	movw	r30, r16
    2070:	90 83       	st	Z, r25
    2072:	03 c0       	rjmp	.+6      	; 0x207a <bno055_get_sys_calib_stat+0x70>
    2074:	81 e8       	ldi	r24, 0x81	; 129
    2076:	01 c0       	rjmp	.+2      	; 0x207a <bno055_get_sys_calib_stat+0x70>
    2078:	8f ef       	ldi	r24, 0xFF	; 255
    207a:	0f 90       	pop	r0
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	08 95       	ret

00002086 <bno055_get_euler_unit>:
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	1f 92       	push	r1
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	19 82       	std	Y+1, r1	; 0x01
    2096:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    209a:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    209e:	30 97       	sbiw	r30, 0x00	; 0
    20a0:	31 f1       	breq	.+76     	; 0x20ee <bno055_get_euler_unit+0x68>
    20a2:	8c 01       	movw	r16, r24
    20a4:	83 81       	ldd	r24, Z+3	; 0x03
    20a6:	88 23       	and	r24, r24
    20a8:	59 f0       	breq	.+22     	; 0x20c0 <bno055_get_euler_unit+0x3a>
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	96 dd       	rcall	.-1236   	; 0x1bda <bno055_write_page_id>
    20ae:	88 23       	and	r24, r24
    20b0:	39 f0       	breq	.+14     	; 0x20c0 <bno055_get_euler_unit+0x3a>
    20b2:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    20b6:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    20ba:	83 81       	ldd	r24, Z+3	; 0x03
    20bc:	81 11       	cpse	r24, r1
    20be:	19 c0       	rjmp	.+50     	; 0x20f2 <bno055_get_euler_unit+0x6c>
    20c0:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    20c4:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    20c8:	1b 96       	adiw	r26, 0x0b	; 11
    20ca:	ed 91       	ld	r30, X+
    20cc:	fc 91       	ld	r31, X
    20ce:	1c 97       	sbiw	r26, 0x0c	; 12
    20d0:	21 e0       	ldi	r18, 0x01	; 1
    20d2:	ae 01       	movw	r20, r28
    20d4:	4f 5f       	subi	r20, 0xFF	; 255
    20d6:	5f 4f       	sbci	r21, 0xFF	; 255
    20d8:	6b e3       	ldi	r22, 0x3B	; 59
    20da:	18 96       	adiw	r26, 0x08	; 8
    20dc:	8c 91       	ld	r24, X
    20de:	19 95       	eicall
    20e0:	99 81       	ldd	r25, Y+1	; 0x01
    20e2:	92 fb       	bst	r25, 2
    20e4:	99 27       	eor	r25, r25
    20e6:	90 f9       	bld	r25, 0
    20e8:	f8 01       	movw	r30, r16
    20ea:	90 83       	st	Z, r25
    20ec:	03 c0       	rjmp	.+6      	; 0x20f4 <bno055_get_euler_unit+0x6e>
    20ee:	81 e8       	ldi	r24, 0x81	; 129
    20f0:	01 c0       	rjmp	.+2      	; 0x20f4 <bno055_get_euler_unit+0x6e>
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	0f 90       	pop	r0
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	08 95       	ret

00002100 <bno055_get_operation_mode>:
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	1f 92       	push	r1
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	19 82       	std	Y+1, r1	; 0x01
    2110:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    2114:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    2118:	30 97       	sbiw	r30, 0x00	; 0
    211a:	21 f1       	breq	.+72     	; 0x2164 <bno055_get_operation_mode+0x64>
    211c:	8c 01       	movw	r16, r24
    211e:	83 81       	ldd	r24, Z+3	; 0x03
    2120:	88 23       	and	r24, r24
    2122:	59 f0       	breq	.+22     	; 0x213a <bno055_get_operation_mode+0x3a>
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	59 dd       	rcall	.-1358   	; 0x1bda <bno055_write_page_id>
    2128:	88 23       	and	r24, r24
    212a:	39 f0       	breq	.+14     	; 0x213a <bno055_get_operation_mode+0x3a>
    212c:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    2130:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    2134:	83 81       	ldd	r24, Z+3	; 0x03
    2136:	81 11       	cpse	r24, r1
    2138:	17 c0       	rjmp	.+46     	; 0x2168 <bno055_get_operation_mode+0x68>
    213a:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    213e:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    2142:	1b 96       	adiw	r26, 0x0b	; 11
    2144:	ed 91       	ld	r30, X+
    2146:	fc 91       	ld	r31, X
    2148:	1c 97       	sbiw	r26, 0x0c	; 12
    214a:	21 e0       	ldi	r18, 0x01	; 1
    214c:	ae 01       	movw	r20, r28
    214e:	4f 5f       	subi	r20, 0xFF	; 255
    2150:	5f 4f       	sbci	r21, 0xFF	; 255
    2152:	6d e3       	ldi	r22, 0x3D	; 61
    2154:	18 96       	adiw	r26, 0x08	; 8
    2156:	8c 91       	ld	r24, X
    2158:	19 95       	eicall
    215a:	99 81       	ldd	r25, Y+1	; 0x01
    215c:	9f 70       	andi	r25, 0x0F	; 15
    215e:	f8 01       	movw	r30, r16
    2160:	90 83       	st	Z, r25
    2162:	03 c0       	rjmp	.+6      	; 0x216a <bno055_get_operation_mode+0x6a>
    2164:	81 e8       	ldi	r24, 0x81	; 129
    2166:	01 c0       	rjmp	.+2      	; 0x216a <bno055_get_operation_mode+0x6a>
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	0f 90       	pop	r0
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	08 95       	ret

00002176 <bno055_set_operation_mode>:
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	1f 92       	push	r1
    2180:	1f 92       	push	r1
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	19 82       	std	Y+1, r1	; 0x01
    2188:	1a 82       	std	Y+2, r1	; 0x02
    218a:	20 91 ec 21 	lds	r18, 0x21EC	; 0x8021ec <p_bno055>
    218e:	30 91 ed 21 	lds	r19, 0x21ED	; 0x8021ed <p_bno055+0x1>
    2192:	23 2b       	or	r18, r19
    2194:	09 f4       	brne	.+2      	; 0x2198 <bno055_set_operation_mode+0x22>
    2196:	9c c0       	rjmp	.+312    	; 0x22d0 <bno055_set_operation_mode+0x15a>
    2198:	08 2f       	mov	r16, r24
    219a:	ce 01       	movw	r24, r28
    219c:	02 96       	adiw	r24, 0x02	; 2
    219e:	b0 df       	rcall	.-160    	; 0x2100 <bno055_get_operation_mode>
    21a0:	81 11       	cpse	r24, r1
    21a2:	98 c0       	rjmp	.+304    	; 0x22d4 <bno055_set_operation_mode+0x15e>
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	81 11       	cpse	r24, r1
    21a8:	35 c0       	rjmp	.+106    	; 0x2214 <bno055_set_operation_mode+0x9e>
    21aa:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    21ae:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    21b2:	1b 96       	adiw	r26, 0x0b	; 11
    21b4:	ed 91       	ld	r30, X+
    21b6:	fc 91       	ld	r31, X
    21b8:	1c 97       	sbiw	r26, 0x0c	; 12
    21ba:	21 e0       	ldi	r18, 0x01	; 1
    21bc:	ae 01       	movw	r20, r28
    21be:	4f 5f       	subi	r20, 0xFF	; 255
    21c0:	5f 4f       	sbci	r21, 0xFF	; 255
    21c2:	6d e3       	ldi	r22, 0x3D	; 61
    21c4:	18 96       	adiw	r26, 0x08	; 8
    21c6:	8c 91       	ld	r24, X
    21c8:	19 95       	eicall
    21ca:	81 11       	cpse	r24, r1
    21cc:	85 c0       	rjmp	.+266    	; 0x22d8 <bno055_set_operation_mode+0x162>
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	98 2f       	mov	r25, r24
    21d2:	90 7f       	andi	r25, 0xF0	; 240
    21d4:	80 2f       	mov	r24, r16
    21d6:	8f 70       	andi	r24, 0x0F	; 15
    21d8:	89 2b       	or	r24, r25
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    21e0:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    21e4:	19 96       	adiw	r26, 0x09	; 9
    21e6:	ed 91       	ld	r30, X+
    21e8:	fc 91       	ld	r31, X
    21ea:	1a 97       	sbiw	r26, 0x0a	; 10
    21ec:	21 e0       	ldi	r18, 0x01	; 1
    21ee:	ae 01       	movw	r20, r28
    21f0:	4f 5f       	subi	r20, 0xFF	; 255
    21f2:	5f 4f       	sbci	r21, 0xFF	; 255
    21f4:	6d e3       	ldi	r22, 0x3D	; 61
    21f6:	18 96       	adiw	r26, 0x08	; 8
    21f8:	8c 91       	ld	r24, X
    21fa:	19 95       	eicall
    21fc:	18 2f       	mov	r17, r24
    21fe:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    2202:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    2206:	05 84       	ldd	r0, Z+13	; 0x0d
    2208:	f6 85       	ldd	r31, Z+14	; 0x0e
    220a:	e0 2d       	mov	r30, r0
    220c:	88 e5       	ldi	r24, 0x58	; 88
    220e:	92 e0       	ldi	r25, 0x02	; 2
    2210:	19 95       	eicall
    2212:	65 c0       	rjmp	.+202    	; 0x22de <bno055_set_operation_mode+0x168>
    2214:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    2218:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    221c:	1b 96       	adiw	r26, 0x0b	; 11
    221e:	ed 91       	ld	r30, X+
    2220:	fc 91       	ld	r31, X
    2222:	1c 97       	sbiw	r26, 0x0c	; 12
    2224:	21 e0       	ldi	r18, 0x01	; 1
    2226:	ae 01       	movw	r20, r28
    2228:	4f 5f       	subi	r20, 0xFF	; 255
    222a:	5f 4f       	sbci	r21, 0xFF	; 255
    222c:	6d e3       	ldi	r22, 0x3D	; 61
    222e:	18 96       	adiw	r26, 0x08	; 8
    2230:	8c 91       	ld	r24, X
    2232:	19 95       	eicall
    2234:	18 2f       	mov	r17, r24
    2236:	81 11       	cpse	r24, r1
    2238:	14 c0       	rjmp	.+40     	; 0x2262 <bno055_set_operation_mode+0xec>
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	80 7f       	andi	r24, 0xF0	; 240
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	be 01       	movw	r22, r28
    2244:	6f 5f       	subi	r22, 0xFF	; 255
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	8d e3       	ldi	r24, 0x3D	; 61
    224a:	b4 dc       	rcall	.-1688   	; 0x1bb4 <bno055_write_register>
    224c:	18 2f       	mov	r17, r24
    224e:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    2252:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    2256:	05 84       	ldd	r0, Z+13	; 0x0d
    2258:	f6 85       	ldd	r31, Z+14	; 0x0e
    225a:	e0 2d       	mov	r30, r0
    225c:	84 e1       	ldi	r24, 0x14	; 20
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	19 95       	eicall
    2262:	00 23       	and	r16, r16
    2264:	e1 f1       	breq	.+120    	; 0x22de <bno055_set_operation_mode+0x168>
    2266:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    226a:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    226e:	1b 96       	adiw	r26, 0x0b	; 11
    2270:	ed 91       	ld	r30, X+
    2272:	fc 91       	ld	r31, X
    2274:	1c 97       	sbiw	r26, 0x0c	; 12
    2276:	21 e0       	ldi	r18, 0x01	; 1
    2278:	ae 01       	movw	r20, r28
    227a:	4f 5f       	subi	r20, 0xFF	; 255
    227c:	5f 4f       	sbci	r21, 0xFF	; 255
    227e:	6d e3       	ldi	r22, 0x3D	; 61
    2280:	18 96       	adiw	r26, 0x08	; 8
    2282:	8c 91       	ld	r24, X
    2284:	19 95       	eicall
    2286:	81 11       	cpse	r24, r1
    2288:	29 c0       	rjmp	.+82     	; 0x22dc <bno055_set_operation_mode+0x166>
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	98 2f       	mov	r25, r24
    228e:	90 7f       	andi	r25, 0xF0	; 240
    2290:	80 2f       	mov	r24, r16
    2292:	8f 70       	andi	r24, 0x0F	; 15
    2294:	89 2b       	or	r24, r25
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    229c:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    22a0:	19 96       	adiw	r26, 0x09	; 9
    22a2:	ed 91       	ld	r30, X+
    22a4:	fc 91       	ld	r31, X
    22a6:	1a 97       	sbiw	r26, 0x0a	; 10
    22a8:	21 e0       	ldi	r18, 0x01	; 1
    22aa:	ae 01       	movw	r20, r28
    22ac:	4f 5f       	subi	r20, 0xFF	; 255
    22ae:	5f 4f       	sbci	r21, 0xFF	; 255
    22b0:	6d e3       	ldi	r22, 0x3D	; 61
    22b2:	18 96       	adiw	r26, 0x08	; 8
    22b4:	8c 91       	ld	r24, X
    22b6:	19 95       	eicall
    22b8:	18 2f       	mov	r17, r24
    22ba:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <p_bno055>
    22be:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <p_bno055+0x1>
    22c2:	05 84       	ldd	r0, Z+13	; 0x0d
    22c4:	f6 85       	ldd	r31, Z+14	; 0x0e
    22c6:	e0 2d       	mov	r30, r0
    22c8:	88 e5       	ldi	r24, 0x58	; 88
    22ca:	92 e0       	ldi	r25, 0x02	; 2
    22cc:	19 95       	eicall
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <bno055_set_operation_mode+0x168>
    22d0:	11 e8       	ldi	r17, 0x81	; 129
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <bno055_set_operation_mode+0x168>
    22d4:	1f ef       	ldi	r17, 0xFF	; 255
    22d6:	03 c0       	rjmp	.+6      	; 0x22de <bno055_set_operation_mode+0x168>
    22d8:	18 2f       	mov	r17, r24
    22da:	01 c0       	rjmp	.+2      	; 0x22de <bno055_set_operation_mode+0x168>
    22dc:	18 2f       	mov	r17, r24
    22de:	81 2f       	mov	r24, r17
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	08 95       	ret

000022ee <bno055_set_euler_unit>:
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	1f 92       	push	r1
    22f8:	1f 92       	push	r1
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	19 82       	std	Y+1, r1	; 0x01
    2300:	1a 82       	std	Y+2, r1	; 0x02
    2302:	20 91 ec 21 	lds	r18, 0x21EC	; 0x8021ec <p_bno055>
    2306:	30 91 ed 21 	lds	r19, 0x21ED	; 0x8021ed <p_bno055+0x1>
    230a:	23 2b       	or	r18, r19
    230c:	09 f4       	brne	.+2      	; 0x2310 <bno055_set_euler_unit+0x22>
    230e:	44 c0       	rjmp	.+136    	; 0x2398 <bno055_set_euler_unit+0xaa>
    2310:	08 2f       	mov	r16, r24
    2312:	ce 01       	movw	r24, r28
    2314:	02 96       	adiw	r24, 0x02	; 2
    2316:	f4 de       	rcall	.-536    	; 0x2100 <bno055_get_operation_mode>
    2318:	81 11       	cpse	r24, r1
    231a:	35 c0       	rjmp	.+106    	; 0x2386 <bno055_set_euler_unit+0x98>
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	88 23       	and	r24, r24
    2320:	21 f0       	breq	.+8      	; 0x232a <bno055_set_euler_unit+0x3c>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	28 df       	rcall	.-432    	; 0x2176 <bno055_set_operation_mode>
    2326:	81 11       	cpse	r24, r1
    2328:	30 c0       	rjmp	.+96     	; 0x238a <bno055_set_euler_unit+0x9c>
    232a:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    232e:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    2332:	1b 96       	adiw	r26, 0x0b	; 11
    2334:	ed 91       	ld	r30, X+
    2336:	fc 91       	ld	r31, X
    2338:	1c 97       	sbiw	r26, 0x0c	; 12
    233a:	21 e0       	ldi	r18, 0x01	; 1
    233c:	ae 01       	movw	r20, r28
    233e:	4f 5f       	subi	r20, 0xFF	; 255
    2340:	5f 4f       	sbci	r21, 0xFF	; 255
    2342:	6b e3       	ldi	r22, 0x3B	; 59
    2344:	18 96       	adiw	r26, 0x08	; 8
    2346:	8c 91       	ld	r24, X
    2348:	19 95       	eicall
    234a:	18 2f       	mov	r17, r24
    234c:	81 11       	cpse	r24, r1
    234e:	1e c0       	rjmp	.+60     	; 0x238c <bno055_set_euler_unit+0x9e>
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	98 2f       	mov	r25, r24
    2354:	9b 7f       	andi	r25, 0xFB	; 251
    2356:	80 2f       	mov	r24, r16
    2358:	88 0f       	add	r24, r24
    235a:	88 0f       	add	r24, r24
    235c:	84 70       	andi	r24, 0x04	; 4
    235e:	89 2b       	or	r24, r25
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    2366:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    236a:	19 96       	adiw	r26, 0x09	; 9
    236c:	ed 91       	ld	r30, X+
    236e:	fc 91       	ld	r31, X
    2370:	1a 97       	sbiw	r26, 0x0a	; 10
    2372:	21 e0       	ldi	r18, 0x01	; 1
    2374:	ae 01       	movw	r20, r28
    2376:	4f 5f       	subi	r20, 0xFF	; 255
    2378:	5f 4f       	sbci	r21, 0xFF	; 255
    237a:	6b e3       	ldi	r22, 0x3B	; 59
    237c:	18 96       	adiw	r26, 0x08	; 8
    237e:	8c 91       	ld	r24, X
    2380:	19 95       	eicall
    2382:	18 2f       	mov	r17, r24
    2384:	03 c0       	rjmp	.+6      	; 0x238c <bno055_set_euler_unit+0x9e>
    2386:	1f ef       	ldi	r17, 0xFF	; 255
    2388:	01 c0       	rjmp	.+2      	; 0x238c <bno055_set_euler_unit+0x9e>
    238a:	1f ef       	ldi	r17, 0xFF	; 255
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	88 23       	and	r24, r24
    2390:	29 f0       	breq	.+10     	; 0x239c <bno055_set_euler_unit+0xae>
    2392:	f1 de       	rcall	.-542    	; 0x2176 <bno055_set_operation_mode>
    2394:	81 0f       	add	r24, r17
    2396:	03 c0       	rjmp	.+6      	; 0x239e <bno055_set_euler_unit+0xb0>
    2398:	81 e8       	ldi	r24, 0x81	; 129
    239a:	01 c0       	rjmp	.+2      	; 0x239e <bno055_set_euler_unit+0xb0>
    239c:	81 2f       	mov	r24, r17
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	08 95       	ret

000023ac <bno055_convert_double_euler_hpr_deg>:
    23ac:	ef 92       	push	r14
    23ae:	ff 92       	push	r15
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	27 97       	sbiw	r28, 0x07	; 7
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	7c 01       	movw	r14, r24
    23c2:	19 82       	std	Y+1, r1	; 0x01
    23c4:	1a 82       	std	Y+2, r1	; 0x02
    23c6:	1b 82       	std	Y+3, r1	; 0x03
    23c8:	1c 82       	std	Y+4, r1	; 0x04
    23ca:	1d 82       	std	Y+5, r1	; 0x05
    23cc:	1e 82       	std	Y+6, r1	; 0x06
    23ce:	1f 82       	std	Y+7, r1	; 0x07
    23d0:	ce 01       	movw	r24, r28
    23d2:	07 96       	adiw	r24, 0x07	; 7
    23d4:	58 de       	rcall	.-848    	; 0x2086 <bno055_get_euler_unit>
    23d6:	18 2f       	mov	r17, r24
    23d8:	8f 81       	ldd	r24, Y+7	; 0x07
    23da:	88 23       	and	r24, r24
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <bno055_convert_double_euler_hpr_deg+0x38>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	86 df       	rcall	.-244    	; 0x22ee <bno055_set_euler_unit>
    23e2:	18 0f       	add	r17, r24
    23e4:	11 11       	cpse	r17, r1
    23e6:	3f c0       	rjmp	.+126    	; 0x2466 <bno055_convert_double_euler_hpr_deg+0xba>
    23e8:	ce 01       	movw	r24, r28
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	33 dc       	rcall	.-1946   	; 0x1c54 <bno055_read_euler_hrp>
    23ee:	81 11       	cpse	r24, r1
    23f0:	3c c0       	rjmp	.+120    	; 0x246a <bno055_convert_double_euler_hpr_deg+0xbe>
    23f2:	69 81       	ldd	r22, Y+1	; 0x01
    23f4:	7a 81       	ldd	r23, Y+2	; 0x02
    23f6:	07 2e       	mov	r0, r23
    23f8:	00 0c       	add	r0, r0
    23fa:	88 0b       	sbc	r24, r24
    23fc:	99 0b       	sbc	r25, r25
    23fe:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5d e3       	ldi	r21, 0x3D	; 61
    240a:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    240e:	f7 01       	movw	r30, r14
    2410:	60 83       	st	Z, r22
    2412:	71 83       	std	Z+1, r23	; 0x01
    2414:	82 83       	std	Z+2, r24	; 0x02
    2416:	93 83       	std	Z+3, r25	; 0x03
    2418:	6d 81       	ldd	r22, Y+5	; 0x05
    241a:	7e 81       	ldd	r23, Y+6	; 0x06
    241c:	07 2e       	mov	r0, r23
    241e:	00 0c       	add	r0, r0
    2420:	88 0b       	sbc	r24, r24
    2422:	99 0b       	sbc	r25, r25
    2424:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e8       	ldi	r20, 0x80	; 128
    242e:	5d e3       	ldi	r21, 0x3D	; 61
    2430:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    2434:	f7 01       	movw	r30, r14
    2436:	60 87       	std	Z+8, r22	; 0x08
    2438:	71 87       	std	Z+9, r23	; 0x09
    243a:	82 87       	std	Z+10, r24	; 0x0a
    243c:	93 87       	std	Z+11, r25	; 0x0b
    243e:	6b 81       	ldd	r22, Y+3	; 0x03
    2440:	7c 81       	ldd	r23, Y+4	; 0x04
    2442:	07 2e       	mov	r0, r23
    2444:	00 0c       	add	r0, r0
    2446:	88 0b       	sbc	r24, r24
    2448:	99 0b       	sbc	r25, r25
    244a:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5d e3       	ldi	r21, 0x3D	; 61
    2456:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    245a:	f7 01       	movw	r30, r14
    245c:	64 83       	std	Z+4, r22	; 0x04
    245e:	75 83       	std	Z+5, r23	; 0x05
    2460:	86 83       	std	Z+6, r24	; 0x06
    2462:	97 83       	std	Z+7, r25	; 0x07
    2464:	03 c0       	rjmp	.+6      	; 0x246c <bno055_convert_double_euler_hpr_deg+0xc0>
    2466:	1f ef       	ldi	r17, 0xFF	; 255
    2468:	01 c0       	rjmp	.+2      	; 0x246c <bno055_convert_double_euler_hpr_deg+0xc0>
    246a:	1f ef       	ldi	r17, 0xFF	; 255
    246c:	81 2f       	mov	r24, r17
    246e:	27 96       	adiw	r28, 0x07	; 7
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	08 95       	ret

00002480 <bno055_set_power_mode>:
 *	@note For detailed about LOWPOWER mode
 *	refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	1f 92       	push	r1
    248a:	1f 92       	push	r1
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
u8 data_u8r = BNO055_INIT_VALUE;
    2490:	19 82       	std	Y+1, r1	; 0x01
u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
    2492:	1a 82       	std	Y+2, r1	; 0x02
s8 stat_s8 = BNO055_ERROR;
/* Check the struct p_bno055 is empty */
if (p_bno055 == BNO055_INIT_VALUE) {
    2494:	20 91 ec 21 	lds	r18, 0x21EC	; 0x8021ec <p_bno055>
    2498:	30 91 ed 21 	lds	r19, 0x21ED	; 0x8021ed <p_bno055+0x1>
    249c:	23 2b       	or	r18, r19
    249e:	09 f4       	brne	.+2      	; 0x24a2 <bno055_set_power_mode+0x22>
    24a0:	42 c0       	rjmp	.+132    	; 0x2526 <bno055_set_power_mode+0xa6>
    24a2:	08 2f       	mov	r16, r24
	return BNO055_E_NULL_PTR;
	} else {
		/* The write operation effective only if the operation
		mode is in config mode, this part of code is checking the
		current operation mode and set the config mode */
		stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
    24a4:	ce 01       	movw	r24, r28
    24a6:	02 96       	adiw	r24, 0x02	; 2
    24a8:	2b de       	rcall	.-938    	; 0x2100 <bno055_get_operation_mode>
		if (stat_s8 == BNO055_SUCCESS) {
    24aa:	81 11       	cpse	r24, r1
    24ac:	33 c0       	rjmp	.+102    	; 0x2514 <bno055_set_power_mode+0x94>
			if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	88 23       	and	r24, r24
    24b2:	21 f0       	breq	.+8      	; 0x24bc <bno055_set_power_mode+0x3c>
				stat_s8 += bno055_set_operation_mode
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	5f de       	rcall	.-834    	; 0x2176 <bno055_set_operation_mode>
				(BNO055_OPERATION_MODE_CONFIG);
			if (stat_s8 == BNO055_SUCCESS) {
    24b8:	81 11       	cpse	r24, r1
    24ba:	2e c0       	rjmp	.+92     	; 0x2518 <bno055_set_power_mode+0x98>
				/* Write the value of power mode */
				com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    24bc:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    24c0:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    24c4:	1b 96       	adiw	r26, 0x0b	; 11
    24c6:	ed 91       	ld	r30, X+
    24c8:	fc 91       	ld	r31, X
    24ca:	1c 97       	sbiw	r26, 0x0c	; 12
    24cc:	21 e0       	ldi	r18, 0x01	; 1
    24ce:	ae 01       	movw	r20, r28
    24d0:	4f 5f       	subi	r20, 0xFF	; 255
    24d2:	5f 4f       	sbci	r21, 0xFF	; 255
    24d4:	6e e3       	ldi	r22, 0x3E	; 62
    24d6:	18 96       	adiw	r26, 0x08	; 8
    24d8:	8c 91       	ld	r24, X
    24da:	19 95       	eicall
    24dc:	18 2f       	mov	r17, r24
				(p_bno055->dev_addr,
				BNO055_POWER_MODE_REG,
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
    24de:	81 11       	cpse	r24, r1
    24e0:	1c c0       	rjmp	.+56     	; 0x251a <bno055_set_power_mode+0x9a>
					data_u8r =
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	98 2f       	mov	r25, r24
    24e6:	9c 7f       	andi	r25, 0xFC	; 252
    24e8:	80 2f       	mov	r24, r16
    24ea:	83 70       	andi	r24, 0x03	; 3
    24ec:	89 2b       	or	r24, r25
    24ee:	89 83       	std	Y+1, r24	; 0x01
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_POWER_MODE, power_mode_u8);
					com_rslt +=
					p_bno055->BNO055_BUS_WRITE_FUNC
    24f0:	a0 91 ec 21 	lds	r26, 0x21EC	; 0x8021ec <p_bno055>
    24f4:	b0 91 ed 21 	lds	r27, 0x21ED	; 0x8021ed <p_bno055+0x1>
    24f8:	19 96       	adiw	r26, 0x09	; 9
    24fa:	ed 91       	ld	r30, X+
    24fc:	fc 91       	ld	r31, X
    24fe:	1a 97       	sbiw	r26, 0x0a	; 10
    2500:	21 e0       	ldi	r18, 0x01	; 1
    2502:	ae 01       	movw	r20, r28
    2504:	4f 5f       	subi	r20, 0xFF	; 255
    2506:	5f 4f       	sbci	r21, 0xFF	; 255
    2508:	6e e3       	ldi	r22, 0x3E	; 62
    250a:	18 96       	adiw	r26, 0x08	; 8
    250c:	8c 91       	ld	r24, X
    250e:	19 95       	eicall
    2510:	18 2f       	mov	r17, r24
    2512:	03 c0       	rjmp	.+6      	; 0x251a <bno055_set_power_mode+0x9a>
				}
			} else {
			com_rslt = BNO055_ERROR;
			}
		} else {
		com_rslt = BNO055_ERROR;
    2514:	1f ef       	ldi	r17, 0xFF	; 255
    2516:	01 c0       	rjmp	.+2      	; 0x251a <bno055_set_power_mode+0x9a>
					BNO055_POWER_MODE_REG,
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
				}
			} else {
			com_rslt = BNO055_ERROR;
    2518:	1f ef       	ldi	r17, 0xFF	; 255
			}
		} else {
		com_rslt = BNO055_ERROR;
		}
	}
	if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	88 23       	and	r24, r24
		/* set the operation mode
		of previous operation mode*/
		com_rslt += bno055_set_operation_mode
    251e:	29 f0       	breq	.+10     	; 0x252a <bno055_set_power_mode+0xaa>
    2520:	2a de       	rcall	.-940    	; 0x2176 <bno055_set_operation_mode>
    2522:	81 0f       	add	r24, r17
    2524:	03 c0       	rjmp	.+6      	; 0x252c <bno055_set_power_mode+0xac>
u8 data_u8r = BNO055_INIT_VALUE;
u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
s8 stat_s8 = BNO055_ERROR;
/* Check the struct p_bno055 is empty */
if (p_bno055 == BNO055_INIT_VALUE) {
	return BNO055_E_NULL_PTR;
    2526:	81 e8       	ldi	r24, 0x81	; 129
    2528:	01 c0       	rjmp	.+2      	; 0x252c <bno055_set_power_mode+0xac>
    252a:	81 2f       	mov	r24, r17
		/* set the operation mode
		of previous operation mode*/
		com_rslt += bno055_set_operation_mode
		(prev_opmode_u8);
	return com_rslt;
}
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	1f 91       	pop	r17
    2536:	0f 91       	pop	r16
    2538:	08 95       	ret

0000253a <__portable_avr_delay_cycles>:
}

double imu_accel_z()
{
	return bno055_linear_accel.z;
}
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <__portable_avr_delay_cycles+0xa>
    253c:	61 50       	subi	r22, 0x01	; 1
    253e:	71 09       	sbc	r23, r1
    2540:	81 09       	sbc	r24, r1
    2542:	91 09       	sbc	r25, r1
    2544:	61 15       	cp	r22, r1
    2546:	71 05       	cpc	r23, r1
    2548:	81 05       	cpc	r24, r1
    254a:	91 05       	cpc	r25, r1
    254c:	b9 f7       	brne	.-18     	; 0x253c <__portable_avr_delay_cycles+0x2>
    254e:	08 95       	ret

00002550 <BNO055_delay_msek>:
    2550:	af 92       	push	r10
    2552:	bf 92       	push	r11
    2554:	cf 92       	push	r12
    2556:	df 92       	push	r13
    2558:	ef 92       	push	r14
    255a:	ff 92       	push	r15
    255c:	0f 93       	push	r16
    255e:	1f 93       	push	r17
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	d1 f1       	breq	.+116    	; 0x25dc <BNO055_delay_msek+0x8c>
    2568:	a1 2c       	mov	r10, r1
    256a:	0f 2e       	mov	r0, r31
    256c:	f8 e4       	ldi	r31, 0x48	; 72
    256e:	bf 2e       	mov	r11, r31
    2570:	f0 2d       	mov	r31, r0
    2572:	0f 2e       	mov	r0, r31
    2574:	f8 ee       	ldi	r31, 0xE8	; 232
    2576:	cf 2e       	mov	r12, r31
    2578:	f0 2d       	mov	r31, r0
    257a:	dd 24       	eor	r13, r13
    257c:	d3 94       	inc	r13
    257e:	e1 2c       	mov	r14, r1
    2580:	f1 2c       	mov	r15, r1
    2582:	00 e0       	ldi	r16, 0x00	; 0
    2584:	10 e0       	ldi	r17, 0x00	; 0
    2586:	28 2f       	mov	r18, r24
    2588:	39 2f       	mov	r19, r25
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	50 e0       	ldi	r21, 0x00	; 0
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	0e 94 b8 32 	call	0x6570	; 0x6570 <__muldi3>
    259a:	0f 2e       	mov	r0, r31
    259c:	f6 e0       	ldi	r31, 0x06	; 6
    259e:	af 2e       	mov	r10, r31
    25a0:	f0 2d       	mov	r31, r0
    25a2:	b1 2c       	mov	r11, r1
    25a4:	c1 2c       	mov	r12, r1
    25a6:	d1 2c       	mov	r13, r1
    25a8:	0e 94 0b 33 	call	0x6616	; 0x6616 <__udivdi3>
    25ac:	29 51       	subi	r18, 0x19	; 25
    25ae:	3c 4f       	sbci	r19, 0xFC	; 252
    25b0:	4f 4f       	sbci	r20, 0xFF	; 255
    25b2:	5f 4f       	sbci	r21, 0xFF	; 255
    25b4:	6f 4f       	sbci	r22, 0xFF	; 255
    25b6:	7f 4f       	sbci	r23, 0xFF	; 255
    25b8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <__floatundisf>
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	4a e7       	ldi	r20, 0x7A	; 122
    25c6:	54 e4       	ldi	r21, 0x44	; 68
    25c8:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    25cc:	0e 94 f0 2e 	call	0x5de0	; 0x5de0 <__fixunssfdi>
    25d0:	62 2f       	mov	r22, r18
    25d2:	73 2f       	mov	r23, r19
    25d4:	84 2f       	mov	r24, r20
    25d6:	95 2f       	mov	r25, r21
    25d8:	b0 df       	rcall	.-160    	; 0x253a <__portable_avr_delay_cycles>
    25da:	05 c0       	rjmp	.+10     	; 0x25e6 <BNO055_delay_msek+0x96>
    25dc:	66 e0       	ldi	r22, 0x06	; 6
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	aa df       	rcall	.-172    	; 0x253a <__portable_avr_delay_cycles>
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	ff 90       	pop	r15
    25f0:	ef 90       	pop	r14
    25f2:	df 90       	pop	r13
    25f4:	cf 90       	pop	r12
    25f6:	bf 90       	pop	r11
    25f8:	af 90       	pop	r10
    25fa:	08 95       	ret

000025fc <BNO055_I2C_bus_write>:
    25fc:	cf 92       	push	r12
    25fe:	df 92       	push	r13
    2600:	ff 92       	push	r15
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	cb 54       	subi	r28, 0x4B	; 75
    2610:	d1 09       	sbc	r29, r1
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	f8 2e       	mov	r15, r24
    2618:	06 2f       	mov	r16, r22
    261a:	6a 01       	movw	r12, r20
    261c:	12 2f       	mov	r17, r18
    261e:	22 30       	cpi	r18, 0x02	; 2
    2620:	40 f0       	brcs	.+16     	; 0x2632 <BNO055_I2C_bus_write+0x36>
    2622:	81 eb       	ldi	r24, 0xB1	; 177
    2624:	90 e2       	ldi	r25, 0x20	; 32
    2626:	9f 93       	push	r25
    2628:	8f 93       	push	r24
    262a:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <printf>
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	19 82       	std	Y+1, r1	; 0x01
    2634:	f6 01       	movw	r30, r12
    2636:	80 81       	ld	r24, Z
    2638:	8a 83       	std	Y+2, r24	; 0x02
    263a:	01 50       	subi	r16, 0x01	; 1
    263c:	23 96       	adiw	r28, 0x03	; 3
    263e:	0f af       	std	Y+63, r16	; 0x3f
    2640:	23 97       	sbiw	r28, 0x03	; 3
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	27 96       	adiw	r28, 0x07	; 7
    2648:	8e af       	std	Y+62, r24	; 0x3e
    264a:	9f af       	std	Y+63, r25	; 0x3f
    264c:	27 97       	sbiw	r28, 0x07	; 7
    264e:	22 96       	adiw	r28, 0x02	; 2
    2650:	ff ae       	std	Y+63, r15	; 0x3f
    2652:	22 97       	sbiw	r28, 0x02	; 2
    2654:	ce 01       	movw	r24, r28
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	29 96       	adiw	r28, 0x09	; 9
    265a:	8e af       	std	Y+62, r24	; 0x3e
    265c:	9f af       	std	Y+63, r25	; 0x3f
    265e:	29 97       	sbiw	r28, 0x09	; 9
    2660:	1f 5f       	subi	r17, 0xFF	; 255
    2662:	21 2f       	mov	r18, r17
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	2b 96       	adiw	r28, 0x0b	; 11
    2668:	2e af       	std	Y+62, r18	; 0x3e
    266a:	3f af       	std	Y+63, r19	; 0x3f
    266c:	2b 97       	sbiw	r28, 0x0b	; 11
    266e:	2c 96       	adiw	r28, 0x0c	; 12
    2670:	1f ae       	std	Y+63, r1	; 0x3f
    2672:	2c 97       	sbiw	r28, 0x0c	; 12
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	be 01       	movw	r22, r28
    2678:	6f 5b       	subi	r22, 0xBF	; 191
    267a:	7f 4f       	sbci	r23, 0xFF	; 255
    267c:	80 e8       	ldi	r24, 0x80	; 128
    267e:	94 e0       	ldi	r25, 0x04	; 4
    2680:	0e 94 97 0a 	call	0x152e	; 0x152e <twi_master_transfer>
    2684:	c5 5b       	subi	r28, 0xB5	; 181
    2686:	df 4f       	sbci	r29, 0xFF	; 255
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	ff 90       	pop	r15
    2696:	df 90       	pop	r13
    2698:	cf 90       	pop	r12
    269a:	08 95       	ret

0000269c <BNO055_I2C_bus_read>:
    269c:	af 92       	push	r10
    269e:	bf 92       	push	r11
    26a0:	df 92       	push	r13
    26a2:	ef 92       	push	r14
    26a4:	ff 92       	push	r15
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	cb 54       	subi	r28, 0x4B	; 75
    26b4:	d1 09       	sbc	r29, r1
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	5a 01       	movw	r10, r20
    26bc:	ae 01       	movw	r20, r28
    26be:	4f 5f       	subi	r20, 0xFF	; 255
    26c0:	5f 4f       	sbci	r21, 0xFF	; 255
    26c2:	7a 01       	movw	r14, r20
    26c4:	90 e4       	ldi	r25, 0x40	; 64
    26c6:	fa 01       	movw	r30, r20
    26c8:	11 92       	st	Z+, r1
    26ca:	9a 95       	dec	r25
    26cc:	e9 f7       	brne	.-6      	; 0x26c8 <BNO055_I2C_bus_read+0x2c>
    26ce:	23 96       	adiw	r28, 0x03	; 3
    26d0:	6f af       	std	Y+63, r22	; 0x3f
    26d2:	23 97       	sbiw	r28, 0x03	; 3
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	27 96       	adiw	r28, 0x07	; 7
    26da:	4e af       	std	Y+62, r20	; 0x3e
    26dc:	5f af       	std	Y+63, r21	; 0x3f
    26de:	27 97       	sbiw	r28, 0x07	; 7
    26e0:	22 96       	adiw	r28, 0x02	; 2
    26e2:	8f af       	std	Y+63, r24	; 0x3f
    26e4:	22 97       	sbiw	r28, 0x02	; 2
    26e6:	29 96       	adiw	r28, 0x09	; 9
    26e8:	ee ae       	std	Y+62, r14	; 0x3e
    26ea:	ff ae       	std	Y+63, r15	; 0x3f
    26ec:	29 97       	sbiw	r28, 0x09	; 9
    26ee:	02 2f       	mov	r16, r18
    26f0:	10 e0       	ldi	r17, 0x00	; 0
    26f2:	2b 96       	adiw	r28, 0x0b	; 11
    26f4:	0e af       	std	Y+62, r16	; 0x3e
    26f6:	1f af       	std	Y+63, r17	; 0x3f
    26f8:	2b 97       	sbiw	r28, 0x0b	; 11
    26fa:	2c 96       	adiw	r28, 0x0c	; 12
    26fc:	1f ae       	std	Y+63, r1	; 0x3f
    26fe:	2c 97       	sbiw	r28, 0x0c	; 12
    2700:	be 01       	movw	r22, r28
    2702:	6f 5b       	subi	r22, 0xBF	; 191
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	80 e8       	ldi	r24, 0x80	; 128
    2708:	94 e0       	ldi	r25, 0x04	; 4
    270a:	0e 94 97 0a 	call	0x152e	; 0x152e <twi_master_transfer>
    270e:	d8 2e       	mov	r13, r24
    2710:	a8 01       	movw	r20, r16
    2712:	b7 01       	movw	r22, r14
    2714:	c5 01       	movw	r24, r10
    2716:	0e 94 9e 33 	call	0x673c	; 0x673c <memcpy>
    271a:	8d 2d       	mov	r24, r13
    271c:	c5 5b       	subi	r28, 0xB5	; 181
    271e:	df 4f       	sbci	r29, 0xFF	; 255
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	1f 91       	pop	r17
    272a:	0f 91       	pop	r16
    272c:	ff 90       	pop	r15
    272e:	ef 90       	pop	r14
    2730:	df 90       	pop	r13
    2732:	bf 90       	pop	r11
    2734:	af 90       	pop	r10
    2736:	08 95       	ret

00002738 <imu_init>:
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	2a 97       	sbiw	r28, 0x0a	; 10
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	8e 01       	movw	r16, r28
    274c:	0f 5f       	subi	r16, 0xFF	; 255
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	89 e0       	ldi	r24, 0x09	; 9
    2752:	f8 01       	movw	r30, r16
    2754:	11 92       	st	Z+, r1
    2756:	8a 95       	dec	r24
    2758:	e9 f7       	brne	.-6      	; 0x2754 <imu_init+0x1c>
    275a:	80 e8       	ldi	r24, 0x80	; 128
    275c:	9a e1       	ldi	r25, 0x1A	; 26
    275e:	a6 e0       	ldi	r26, 0x06	; 6
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	ab 83       	std	Y+3, r26	; 0x03
    2768:	bc 83       	std	Y+4, r27	; 0x04
    276a:	83 e2       	ldi	r24, 0x23	; 35
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e0       	ldi	r26, 0x00	; 0
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	8d 83       	std	Y+5, r24	; 0x05
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	af 83       	std	Y+7, r26	; 0x07
    2778:	b8 87       	std	Y+8, r27	; 0x08
    277a:	60 e4       	ldi	r22, 0x40	; 64
    277c:	83 e0       	ldi	r24, 0x03	; 3
    277e:	aa d3       	rcall	.+1876   	; 0x2ed4 <sysclk_enable_module>
    2780:	b8 01       	movw	r22, r16
    2782:	80 e8       	ldi	r24, 0x80	; 128
    2784:	94 e0       	ldi	r25, 0x04	; 4
    2786:	0e 94 82 0a 	call	0x1504	; 0x1504 <twi_master_init>
    278a:	e0 e8       	ldi	r30, 0x80	; 128
    278c:	f4 e0       	ldi	r31, 0x04	; 4
    278e:	81 81       	ldd	r24, Z+1	; 0x01
    2790:	88 60       	ori	r24, 0x08	; 8
    2792:	81 83       	std	Z+1, r24	; 0x01
    2794:	e6 e5       	ldi	r30, 0x56	; 86
    2796:	f2 e2       	ldi	r31, 0x22	; 34
    2798:	8e ef       	ldi	r24, 0xFE	; 254
    279a:	92 e1       	ldi	r25, 0x12	; 18
    279c:	81 87       	std	Z+9, r24	; 0x09
    279e:	92 87       	std	Z+10, r25	; 0x0a
    27a0:	8e e4       	ldi	r24, 0x4E	; 78
    27a2:	93 e1       	ldi	r25, 0x13	; 19
    27a4:	83 87       	std	Z+11, r24	; 0x0b
    27a6:	94 87       	std	Z+12, r25	; 0x0c
    27a8:	88 ea       	ldi	r24, 0xA8	; 168
    27aa:	92 e1       	ldi	r25, 0x12	; 18
    27ac:	85 87       	std	Z+13, r24	; 0x0d
    27ae:	96 87       	std	Z+14, r25	; 0x0e
    27b0:	88 e2       	ldi	r24, 0x28	; 40
    27b2:	80 87       	std	Z+8, r24	; 0x08
    27b4:	cf 01       	movw	r24, r30
    27b6:	41 d9       	rcall	.-3454   	; 0x1a3a <bno055_init>
    27b8:	88 23       	and	r24, r24
    27ba:	81 f0       	breq	.+32     	; 0x27dc <imu_init+0xa4>
    27bc:	28 2f       	mov	r18, r24
    27be:	08 2e       	mov	r0, r24
    27c0:	00 0c       	add	r0, r0
    27c2:	33 0b       	sbc	r19, r19
    27c4:	3f 93       	push	r19
    27c6:	8f 93       	push	r24
    27c8:	87 e3       	ldi	r24, 0x37	; 55
    27ca:	91 e2       	ldi	r25, 0x21	; 33
    27cc:	9f 93       	push	r25
    27ce:	8f 93       	push	r24
    27d0:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <printf>
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	50 de       	rcall	.-864    	; 0x2480 <bno055_set_power_mode>
    27e0:	8c e0       	ldi	r24, 0x0C	; 12
    27e2:	c9 dc       	rcall	.-1646   	; 0x2176 <bno055_set_operation_mode>
    27e4:	18 2f       	mov	r17, r24
    27e6:	1a 86       	std	Y+10, r1	; 0x0a
    27e8:	ce 01       	movw	r24, r28
    27ea:	0a 96       	adiw	r24, 0x0a	; 10
    27ec:	89 dc       	rcall	.-1774   	; 0x2100 <bno055_get_operation_mode>
    27ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    27f0:	8c 30       	cpi	r24, 0x0C	; 12
    27f2:	99 f0       	breq	.+38     	; 0x281a <imu_init+0xe2>
    27f4:	21 2f       	mov	r18, r17
    27f6:	01 2e       	mov	r0, r17
    27f8:	00 0c       	add	r0, r0
    27fa:	33 0b       	sbc	r19, r19
    27fc:	3f 93       	push	r19
    27fe:	1f 93       	push	r17
    2800:	1f 92       	push	r1
    2802:	9c e0       	ldi	r25, 0x0C	; 12
    2804:	9f 93       	push	r25
    2806:	1f 92       	push	r1
    2808:	8f 93       	push	r24
    280a:	8b e5       	ldi	r24, 0x5B	; 91
    280c:	91 e2       	ldi	r25, 0x21	; 33
    280e:	9f 93       	push	r25
    2810:	8f 93       	push	r24
    2812:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <printf>
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	2a 96       	adiw	r28, 0x0a	; 10
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	08 95       	ret

0000282a <imu_update>:
    282a:	85 e6       	ldi	r24, 0x65	; 101
    282c:	92 e2       	ldi	r25, 0x22	; 34
    282e:	d2 da       	rcall	.-2652   	; 0x1dd4 <bno055_convert_double_linear_accel_xyz_msq>
    2830:	81 e7       	ldi	r24, 0x71	; 113
    2832:	92 e2       	ldi	r25, 0x22	; 34
    2834:	bb dd       	rcall	.-1162   	; 0x23ac <bno055_convert_double_euler_hpr_deg>
    2836:	8e e7       	ldi	r24, 0x7E	; 126
    2838:	92 e2       	ldi	r25, 0x22	; 34
    283a:	63 db       	rcall	.-2362   	; 0x1f02 <bno055_get_accel_calib_stat>
    283c:	80 e8       	ldi	r24, 0x80	; 128
    283e:	92 e2       	ldi	r25, 0x22	; 34
    2840:	a0 db       	rcall	.-2240   	; 0x1f82 <bno055_get_gyro_calib_stat>
    2842:	8d e7       	ldi	r24, 0x7D	; 125
    2844:	92 e2       	ldi	r25, 0x22	; 34
    2846:	22 db       	rcall	.-2492   	; 0x1e8c <bno055_get_mag_calib_stat>
    2848:	8f e7       	ldi	r24, 0x7F	; 127
    284a:	92 e2       	ldi	r25, 0x22	; 34
    284c:	de cb       	rjmp	.-2116   	; 0x200a <bno055_get_sys_calib_stat>
    284e:	08 95       	ret

00002850 <imu_roll>:



double imu_roll()
{
	return bno055_euler.r;
    2850:	60 91 75 22 	lds	r22, 0x2275	; 0x802275 <bno055_euler+0x4>
    2854:	70 91 76 22 	lds	r23, 0x2276	; 0x802276 <bno055_euler+0x5>
    2858:	80 91 77 22 	lds	r24, 0x2277	; 0x802277 <bno055_euler+0x6>
    285c:	90 91 78 22 	lds	r25, 0x2278	; 0x802278 <bno055_euler+0x7>
}
    2860:	08 95       	ret

00002862 <imu_pitch>:

double imu_pitch()
{
	return bno055_euler.p;
    2862:	60 91 79 22 	lds	r22, 0x2279	; 0x802279 <bno055_euler+0x8>
    2866:	70 91 7a 22 	lds	r23, 0x227A	; 0x80227a <bno055_euler+0x9>
    286a:	80 91 7b 22 	lds	r24, 0x227B	; 0x80227b <bno055_euler+0xa>
    286e:	90 91 7c 22 	lds	r25, 0x227C	; 0x80227c <bno055_euler+0xb>
}
    2872:	08 95       	ret

00002874 <imu_heading>:

double imu_heading()
{
	return bno055_euler.h;
    2874:	60 91 71 22 	lds	r22, 0x2271	; 0x802271 <bno055_euler>
    2878:	70 91 72 22 	lds	r23, 0x2272	; 0x802272 <bno055_euler+0x1>
    287c:	80 91 73 22 	lds	r24, 0x2273	; 0x802273 <bno055_euler+0x2>
    2880:	90 91 74 22 	lds	r25, 0x2274	; 0x802274 <bno055_euler+0x3>
}
    2884:	08 95       	ret

00002886 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2886:	04 c0       	rjmp	.+8      	; 0x2890 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2888:	61 50       	subi	r22, 0x01	; 1
    288a:	71 09       	sbc	r23, r1
    288c:	81 09       	sbc	r24, r1
    288e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2890:	61 15       	cp	r22, r1
    2892:	71 05       	cpc	r23, r1
    2894:	81 05       	cpc	r24, r1
    2896:	91 05       	cpc	r25, r1
    2898:	b9 f7       	brne	.-18     	; 0x2888 <__portable_avr_delay_cycles+0x2>
    289a:	08 95       	ret

0000289c <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
    289c:	e0 e0       	ldi	r30, 0x00	; 0
    289e:	f6 e0       	ldi	r31, 0x06	; 6
    28a0:	80 81       	ld	r24, Z
    28a2:	88 60       	ori	r24, 0x08	; 8
    28a4:	80 83       	st	Z, r24
	delay_ms(100);
    28a6:	66 e5       	ldi	r22, 0x56	; 86
    28a8:	73 e2       	ldi	r23, 0x23	; 35
    28aa:	88 e0       	ldi	r24, 0x08	; 8
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	eb cf       	rjmp	.-42     	; 0x2886 <__portable_avr_delay_cycles>
    28b0:	08 95       	ret

000028b2 <cam_switch>:
	//cam_switch();
}

void cam_switch(void){
	PORTA.OUT ^= PIN3_bm; // Changes A3 from high to low or vice-versa
    28b2:	e0 e0       	ldi	r30, 0x00	; 0
    28b4:	f6 e0       	ldi	r31, 0x06	; 6
    28b6:	94 81       	ldd	r25, Z+4	; 0x04
    28b8:	88 e0       	ldi	r24, 0x08	; 8
    28ba:	89 27       	eor	r24, r25
    28bc:	84 83       	std	Z+4, r24	; 0x04
    28be:	08 95       	ret

000028c0 <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    28ca:	62 e0       	ldi	r22, 0x02	; 2
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	02 d3       	rcall	.+1540   	; 0x2ed4 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
    28d0:	c0 e0       	ldi	r28, 0x00	; 0
    28d2:	d2 e0       	ldi	r29, 0x02	; 2
    28d4:	ff 24       	eor	r15, r15
    28d6:	f3 94       	inc	r15
    28d8:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    28da:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    28dc:	80 e1       	ldi	r24, 0x10	; 16
    28de:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    28e0:	85 e0       	ldi	r24, 0x05	; 5
    28e2:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    28e4:	61 e2       	ldi	r22, 0x21	; 33
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	1f d3       	rcall	.+1598   	; 0x2f2a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    28ec:	08 2f       	mov	r16, r24
    28ee:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    28f0:	10 2f       	mov	r17, r16
    28f2:	00 27       	eor	r16, r16
    28f4:	60 e2       	ldi	r22, 0x20	; 32
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	17 d3       	rcall	.+1582   	; 0x2f2a <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    28fc:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    28fe:	0c 87       	std	Y+12, r16	; 0x0c
    2900:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
    2902:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 6	
    2904:	80 e3       	ldi	r24, 0x30	; 48
    2906:	89 a3       	std	Y+33, r24	; 0x21
}
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	08 95       	ret

00002914 <thermistor_read>:

uint16_t thermistor_read(void)
{
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL |= 0x80; // start the conversion
    2914:	e0 e0       	ldi	r30, 0x00	; 0
    2916:	f2 e0       	ldi	r31, 0x02	; 2
    2918:	80 a1       	ldd	r24, Z+32	; 0x20
    291a:	80 68       	ori	r24, 0x80	; 128
    291c:	80 a3       	std	Z+32, r24	; 0x20
	while(!(THERMISTOR_SERIAL.THERMISTOR_CHANNEL.INTFLAGS)); // wait until the conversion is done
    291e:	83 a1       	ldd	r24, Z+35	; 0x23
    2920:	88 23       	and	r24, r24
    2922:	e9 f3       	breq	.-6      	; 0x291e <thermistor_read+0xa>
	return THERMISTOR_SERIAL.THERMISTOR_CHANNEL.RES; // return the 12-bit result as a uint16_t
    2924:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    2928:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    292c:	08 95       	ret

0000292e <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	27 97       	sbiw	r28, 0x07	; 7
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    293c:	60 e2       	ldi	r22, 0x20	; 32
    293e:	84 e0       	ldi	r24, 0x04	; 4
    2940:	c9 d2       	rcall	.+1426   	; 0x2ed4 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
    2942:	e0 e6       	ldi	r30, 0x60	; 96
    2944:	f6 e0       	ldi	r31, 0x06	; 6
    2946:	80 81       	ld	r24, Z
    2948:	80 68       	ori	r24, 0x80	; 128
    294a:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    294c:	e6 e0       	ldi	r30, 0x06	; 6
    294e:	f0 e2       	ldi	r31, 0x20	; 32
    2950:	84 81       	ldd	r24, Z+4	; 0x04
    2952:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2954:	85 81       	ldd	r24, Z+5	; 0x05
    2956:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2958:	86 81       	ldd	r24, Z+6	; 0x06
    295a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	a2 81       	ldd	r26, Z+2	; 0x02
    2962:	b3 81       	ldd	r27, Z+3	; 0x03
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	ab 83       	std	Y+3, r26	; 0x03
    296a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    296c:	60 e2       	ldi	r22, 0x20	; 32
    296e:	84 e0       	ldi	r24, 0x04	; 4
    2970:	b1 d2       	rcall	.+1378   	; 0x2ed4 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2972:	be 01       	movw	r22, r28
    2974:	6f 5f       	subi	r22, 0xFF	; 255
    2976:	7f 4f       	sbci	r23, 0xFF	; 255
    2978:	80 eb       	ldi	r24, 0xB0	; 176
    297a:	99 e0       	ldi	r25, 0x09	; 9
    297c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
    2980:	27 96       	adiw	r28, 0x07	; 7
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    298c:	04 c0       	rjmp	.+8      	; 0x2996 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    298e:	61 50       	subi	r22, 0x01	; 1
    2990:	71 09       	sbc	r23, r1
    2992:	81 09       	sbc	r24, r1
    2994:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2996:	61 15       	cp	r22, r1
    2998:	71 05       	cpc	r23, r1
    299a:	81 05       	cpc	r24, r1
    299c:	91 05       	cpc	r25, r1
    299e:	b9 f7       	brne	.-18     	; 0x298e <__portable_avr_delay_cycles+0x2>
    29a0:	08 95       	ret

000029a2 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
    29a2:	e0 e4       	ldi	r30, 0x40	; 64
    29a4:	f6 e0       	ldi	r31, 0x06	; 6
    29a6:	94 81       	ldd	r25, Z+4	; 0x04
    29a8:	80 e1       	ldi	r24, 0x10	; 16
    29aa:	89 27       	eor	r24, r25
    29ac:	84 83       	std	Z+4, r24	; 0x04
    29ae:	08 95       	ret

000029b0 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    29b0:	e0 e4       	ldi	r30, 0x40	; 64
    29b2:	f6 e0       	ldi	r31, 0x06	; 6
    29b4:	84 81       	ldd	r24, Z+4	; 0x04
    29b6:	80 61       	ori	r24, 0x10	; 16
    29b8:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
    29ba:	f3 df       	rcall	.-26     	; 0x29a2 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
    29bc:	8e e1       	ldi	r24, 0x1E	; 30
    29be:	b9 d0       	rcall	.+370    	; 0x2b32 <spi_write>
	delay_ms(3);
    29c0:	60 e8       	ldi	r22, 0x80	; 128
    29c2:	7e e3       	ldi	r23, 0x3E	; 62
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    29c8:	e1 df       	rcall	.-62     	; 0x298c <__portable_avr_delay_cycles>
    29ca:	eb df       	rcall	.-42     	; 0x29a2 <flip_ms5607>
	delay_ms(2);
    29cc:	6b ea       	ldi	r22, 0xAB	; 171
    29ce:	79 e2       	ldi	r23, 0x29	; 41
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	db cf       	rjmp	.-74     	; 0x298c <__portable_avr_delay_cycles>
    29d6:	08 95       	ret

000029d8 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
    29de:	e1 df       	rcall	.-62     	; 0x29a2 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
    29e0:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
    29e2:	a7 d0       	rcall	.+334    	; 0x2b32 <spi_write>
    29e4:	97 d0       	rcall	.+302    	; 0x2b14 <spi_read>
    29e6:	c8 2f       	mov	r28, r24
    29e8:	d0 e0       	ldi	r29, 0x00	; 0
    29ea:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
    29ec:	cc 27       	eor	r28, r28
    29ee:	92 d0       	rcall	.+292    	; 0x2b14 <spi_read>
    29f0:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
    29f2:	d7 df       	rcall	.-82     	; 0x29a2 <flip_ms5607>
    29f4:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
    29f6:	df 91       	pop	r29
    29f8:	cf 91       	pop	r28
    29fa:	08 95       	ret

000029fc <ms5607_convert_d1>:
    29fc:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
    29fe:	df 93       	push	r29
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <ms5607_convert_d1+0x6>
    2a02:	1f 92       	push	r1
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    2a08:	19 82       	std	Y+1, r1	; 0x01
    2a0a:	1a 82       	std	Y+2, r1	; 0x02
    2a0c:	1b 82       	std	Y+3, r1	; 0x03
    2a0e:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
    2a10:	c8 df       	rcall	.-112    	; 0x29a2 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
    2a12:	88 e4       	ldi	r24, 0x48	; 72
    2a14:	8e d0       	rcall	.+284    	; 0x2b32 <spi_write>
	delay_ms(10);
    2a16:	66 e5       	ldi	r22, 0x56	; 86
    2a18:	70 ed       	ldi	r23, 0xD0	; 208
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    2a1e:	b6 df       	rcall	.-148    	; 0x298c <__portable_avr_delay_cycles>
	
	flip_ms5607();
    2a20:	c0 df       	rcall	.-128    	; 0x29a2 <flip_ms5607>
    2a22:	bf df       	rcall	.-130    	; 0x29a2 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	85 d0       	rcall	.+266    	; 0x2b32 <spi_write>
    2a28:	75 d0       	rcall	.+234    	; 0x2b14 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	a0 e0       	ldi	r26, 0x00	; 0
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	dc 01       	movw	r26, r24
    2a32:	99 27       	eor	r25, r25
    2a34:	88 27       	eor	r24, r24
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	ab 83       	std	Y+3, r26	; 0x03
    2a3c:	bc 83       	std	Y+4, r27	; 0x04
    2a3e:	6a d0       	rcall	.+212    	; 0x2b14 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    2a40:	49 81       	ldd	r20, Y+1	; 0x01
    2a42:	5a 81       	ldd	r21, Y+2	; 0x02
    2a44:	6b 81       	ldd	r22, Y+3	; 0x03
    2a46:	7c 81       	ldd	r23, Y+4	; 0x04
    2a48:	58 2b       	or	r21, r24
    2a4a:	49 83       	std	Y+1, r20	; 0x01
    2a4c:	5a 83       	std	Y+2, r21	; 0x02
    2a4e:	6b 83       	std	Y+3, r22	; 0x03
    2a50:	7c 83       	std	Y+4, r23	; 0x04
    2a52:	60 d0       	rcall	.+192    	; 0x2b14 <spi_read>
	rx_data |= spi_read();
    2a54:	49 81       	ldd	r20, Y+1	; 0x01
    2a56:	5a 81       	ldd	r21, Y+2	; 0x02
    2a58:	6b 81       	ldd	r22, Y+3	; 0x03
    2a5a:	7c 81       	ldd	r23, Y+4	; 0x04
    2a5c:	48 2b       	or	r20, r24
    2a5e:	49 83       	std	Y+1, r20	; 0x01
    2a60:	5a 83       	std	Y+2, r21	; 0x02
    2a62:	6b 83       	std	Y+3, r22	; 0x03
    2a64:	7c 83       	std	Y+4, r23	; 0x04
    2a66:	9d df       	rcall	.-198    	; 0x29a2 <flip_ms5607>
	flip_ms5607();
    2a68:	69 81       	ldd	r22, Y+1	; 0x01
    2a6a:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	24 96       	adiw	r28, 0x04	; 4
    2a72:	cd bf       	out	0x3d, r28	; 61
}
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	08 95       	ret

00002a7c <ms5607_convert_d2>:
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <ms5607_convert_d2+0x6>
    2a82:	1f 92       	push	r1
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    2a88:	19 82       	std	Y+1, r1	; 0x01
    2a8a:	1a 82       	std	Y+2, r1	; 0x02
    2a8c:	1b 82       	std	Y+3, r1	; 0x03
    2a8e:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
    2a90:	88 df       	rcall	.-240    	; 0x29a2 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
    2a92:	88 e5       	ldi	r24, 0x58	; 88
    2a94:	4e d0       	rcall	.+156    	; 0x2b32 <spi_write>
	delay_ms(10);
    2a96:	66 e5       	ldi	r22, 0x56	; 86
    2a98:	70 ed       	ldi	r23, 0xD0	; 208
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    2a9e:	76 df       	rcall	.-276    	; 0x298c <__portable_avr_delay_cycles>
	
	flip_ms5607();
    2aa0:	80 df       	rcall	.-256    	; 0x29a2 <flip_ms5607>
    2aa2:	7f df       	rcall	.-258    	; 0x29a2 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	45 d0       	rcall	.+138    	; 0x2b32 <spi_write>
    2aa8:	35 d0       	rcall	.+106    	; 0x2b14 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	a0 e0       	ldi	r26, 0x00	; 0
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	99 27       	eor	r25, r25
    2ab4:	88 27       	eor	r24, r24
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	ab 83       	std	Y+3, r26	; 0x03
    2abc:	bc 83       	std	Y+4, r27	; 0x04
    2abe:	2a d0       	rcall	.+84     	; 0x2b14 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    2ac0:	49 81       	ldd	r20, Y+1	; 0x01
    2ac2:	5a 81       	ldd	r21, Y+2	; 0x02
    2ac4:	6b 81       	ldd	r22, Y+3	; 0x03
    2ac6:	7c 81       	ldd	r23, Y+4	; 0x04
    2ac8:	58 2b       	or	r21, r24
    2aca:	49 83       	std	Y+1, r20	; 0x01
    2acc:	5a 83       	std	Y+2, r21	; 0x02
    2ace:	6b 83       	std	Y+3, r22	; 0x03
    2ad0:	7c 83       	std	Y+4, r23	; 0x04
    2ad2:	20 d0       	rcall	.+64     	; 0x2b14 <spi_read>
	rx_data |= spi_read();
    2ad4:	49 81       	ldd	r20, Y+1	; 0x01
    2ad6:	5a 81       	ldd	r21, Y+2	; 0x02
    2ad8:	6b 81       	ldd	r22, Y+3	; 0x03
    2ada:	7c 81       	ldd	r23, Y+4	; 0x04
    2adc:	48 2b       	or	r20, r24
    2ade:	49 83       	std	Y+1, r20	; 0x01
    2ae0:	5a 83       	std	Y+2, r21	; 0x02
    2ae2:	6b 83       	std	Y+3, r22	; 0x03
    2ae4:	7c 83       	std	Y+4, r23	; 0x04
    2ae6:	5d df       	rcall	.-326    	; 0x29a2 <flip_ms5607>
	flip_ms5607();
    2ae8:	69 81       	ldd	r22, Y+1	; 0x01
    2aea:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	9c 81       	ldd	r25, Y+4	; 0x04
    2af0:	24 96       	adiw	r28, 0x04	; 4
    2af2:	cd bf       	out	0x3d, r28	; 61
}
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	08 95       	ret

00002afc <spi_init>:
    2afc:	e0 e4       	ldi	r30, 0x40	; 64
    2afe:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x50; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
    2b00:	80 81       	ld	r24, Z
    2b02:	80 6b       	ori	r24, 0xB0	; 176
    2b04:	80 83       	st	Z, r24
    2b06:	68 e0       	ldi	r22, 0x08	; 8
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	e4 d1       	rcall	.+968    	; 0x2ed4 <sysclk_enable_module>
    2b0c:	80 e5       	ldi	r24, 0x50	; 80
    2b0e:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    2b12:	08 95       	ret

00002b14 <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
    2b14:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2b16:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
    2b18:	8f ef       	ldi	r24, 0xFF	; 255
    2b1a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    2b1e:	e0 ec       	ldi	r30, 0xC0	; 192
    2b20:	f8 e0       	ldi	r31, 0x08	; 8
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	88 23       	and	r24, r24
    2b26:	ec f7       	brge	.-6      	; 0x2b22 <spi_read+0xe>
	sei();
    2b28:	78 94       	sei
	SREG=oldInterruptState;
    2b2a:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
    2b2c:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    2b30:	08 95       	ret

00002b32 <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
    2b32:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2b34:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
    2b36:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
    2b3a:	e0 ec       	ldi	r30, 0xC0	; 192
    2b3c:	f8 e0       	ldi	r31, 0x08	; 8
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	88 23       	and	r24, r24
    2b42:	ec f7       	brge	.-6      	; 0x2b3e <spi_write+0xc>
	sei();
    2b44:	78 94       	sei
	SREG=oldInterruptState;
    2b46:	9f bf       	out	0x3f, r25	; 63
    2b48:	08 95       	ret

00002b4a <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    2b50:	0e 94 03 0b 	call	0x1606	; 0x1606 <usart_getchar>
    2b54:	88 83       	st	Y, r24
}
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	08 95       	ret

00002b5c <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    2b5c:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <usart_putchar>
}
    2b60:	08 95       	ret

00002b62 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	27 97       	sbiw	r28, 0x07	; 7
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2b70:	60 e1       	ldi	r22, 0x10	; 16
    2b72:	85 e0       	ldi	r24, 0x05	; 5
    2b74:	af d1       	rcall	.+862    	; 0x2ed4 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    2b76:	e0 e8       	ldi	r30, 0x80	; 128
    2b78:	f6 e0       	ldi	r31, 0x06	; 6
    2b7a:	80 81       	ld	r24, Z
    2b7c:	88 60       	ori	r24, 0x08	; 8
    2b7e:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2b80:	80 ea       	ldi	r24, 0xA0	; 160
    2b82:	9a e0       	ldi	r25, 0x0A	; 10
    2b84:	80 93 52 22 	sts	0x2252, r24	; 0x802252 <stdio_base>
    2b88:	90 93 53 22 	sts	0x2253, r25	; 0x802253 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2b8c:	8e ea       	ldi	r24, 0xAE	; 174
    2b8e:	95 e1       	ldi	r25, 0x15	; 21
    2b90:	80 93 50 22 	sts	0x2250, r24	; 0x802250 <ptr_put>
    2b94:	90 93 51 22 	sts	0x2251, r25	; 0x802251 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2b98:	85 ea       	ldi	r24, 0xA5	; 165
    2b9a:	95 e1       	ldi	r25, 0x15	; 21
    2b9c:	80 93 4e 22 	sts	0x224E, r24	; 0x80224e <ptr_get>
    2ba0:	90 93 4f 22 	sts	0x224F, r25	; 0x80224f <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    2ba4:	ed e0       	ldi	r30, 0x0D	; 13
    2ba6:	f0 e2       	ldi	r31, 0x20	; 32
    2ba8:	84 81       	ldd	r24, Z+4	; 0x04
    2baa:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2bac:	85 81       	ldd	r24, Z+5	; 0x05
    2bae:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2bb0:	86 81       	ldd	r24, Z+6	; 0x06
    2bb2:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	a2 81       	ldd	r26, Z+2	; 0x02
    2bba:	b3 81       	ldd	r27, Z+3	; 0x03
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	ab 83       	std	Y+3, r26	; 0x03
    2bc2:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    2bc4:	60 e1       	ldi	r22, 0x10	; 16
    2bc6:	85 e0       	ldi	r24, 0x05	; 5
    2bc8:	85 d1       	rcall	.+778    	; 0x2ed4 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2bca:	be 01       	movw	r22, r28
    2bcc:	6f 5f       	subi	r22, 0xFF	; 255
    2bce:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd0:	80 ea       	ldi	r24, 0xA0	; 160
    2bd2:	9a e0       	ldi	r25, 0x0A	; 10
    2bd4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    2bd8:	6f e7       	ldi	r22, 0x7F	; 127
    2bda:	71 e0       	ldi	r23, 0x01	; 1
    2bdc:	88 e9       	ldi	r24, 0x98	; 152
    2bde:	91 e0       	ldi	r25, 0x01	; 1
    2be0:	0e 94 a7 33 	call	0x674e	; 0x674e <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
    2be4:	27 96       	adiw	r28, 0x07	; 7
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	08 95       	ret

00002bf0 <voltage_init>:
#include "voltage.h"
#include <asf.h>


void voltage_init(void)
{
    2bf0:	ff 92       	push	r15
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2bfa:	62 e0       	ldi	r22, 0x02	; 2
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	6a d1       	rcall	.+724    	; 0x2ed4 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&VOLTAGE_SERIAL);
	VOLTAGE_SERIAL.CTRLA = 0x01; // enable the ADC
    2c00:	c0 e0       	ldi	r28, 0x00	; 0
    2c02:	d2 e0       	ldi	r29, 0x02	; 2
    2c04:	ff 24       	eor	r15, r15
    2c06:	f3 94       	inc	r15
    2c08:	f8 82       	st	Y, r15
	VOLTAGE_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    2c0a:	19 82       	std	Y+1, r1	; 0x01
	VOLTAGE_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    2c0c:	80 e1       	ldi	r24, 0x10	; 16
    2c0e:	8a 83       	std	Y+2, r24	; 0x02
	VOLTAGE_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    2c10:	85 e0       	ldi	r24, 0x05	; 5
    2c12:	8c 83       	std	Y+4, r24	; 0x04
    2c14:	61 e2       	ldi	r22, 0x21	; 33
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	87 d1       	rcall	.+782    	; 0x2f2a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2c1c:	08 2f       	mov	r16, r24
    2c1e:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    2c20:	10 2f       	mov	r17, r16
    2c22:	00 27       	eor	r16, r16
    2c24:	60 e2       	ldi	r22, 0x20	; 32
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	7f d1       	rcall	.+766    	; 0x2f2a <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    2c2c:	08 2b       	or	r16, r24
	VOLTAGE_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    2c2e:	0c 87       	std	Y+12, r16	; 0x0c
    2c30:	1d 87       	std	Y+13, r17	; 0x0d
	
	VOLTAGE_CHANNEL.CTRL = 0x01; // single ended input
    2c32:	f8 a6       	std	Y+40, r15	; 0x28
	VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
    2c34:	88 e3       	ldi	r24, 0x38	; 56
    2c36:	89 a7       	std	Y+41, r24	; 0x29
}
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	ff 90       	pop	r15
    2c42:	08 95       	ret

00002c44 <voltage_read>:

uint16_t voltage_read(void)
{
	VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
    2c44:	e0 e0       	ldi	r30, 0x00	; 0
    2c46:	f2 e0       	ldi	r31, 0x02	; 2
    2c48:	80 a5       	ldd	r24, Z+40	; 0x28
    2c4a:	80 68       	ori	r24, 0x80	; 128
    2c4c:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
    2c4e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2c50:	88 23       	and	r24, r24
    2c52:	e9 f3       	breq	.-6      	; 0x2c4e <voltage_read+0xa>
	return VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
    2c54:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    2c58:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    2c5c:	08 95       	ret

00002c5e <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	fc 01       	movw	r30, r24
    2c64:	41 15       	cp	r20, r1
    2c66:	51 05       	cpc	r21, r1
    2c68:	b1 f1       	breq	.+108    	; 0x2cd6 <rb16_write+0x78>
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	db 01       	movw	r26, r22
    2c76:	a8 0f       	add	r26, r24
    2c78:	b9 1f       	adc	r27, r25
    2c7a:	8d 91       	ld	r24, X+
    2c7c:	9c 91       	ld	r25, X
    2c7e:	a2 81       	ldd	r26, Z+2	; 0x02
    2c80:	b3 81       	ldd	r27, Z+3	; 0x03
    2c82:	aa 0f       	add	r26, r26
    2c84:	bb 1f       	adc	r27, r27
    2c86:	c6 81       	ldd	r28, Z+6	; 0x06
    2c88:	d7 81       	ldd	r29, Z+7	; 0x07
    2c8a:	ac 0f       	add	r26, r28
    2c8c:	bd 1f       	adc	r27, r29
    2c8e:	8d 93       	st	X+, r24
    2c90:	9c 93       	st	X, r25
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	01 96       	adiw	r24, 0x01	; 1
    2c98:	82 83       	std	Z+2, r24	; 0x02
    2c9a:	93 83       	std	Z+3, r25	; 0x03
    2c9c:	a0 81       	ld	r26, Z
    2c9e:	b1 81       	ldd	r27, Z+1	; 0x01
    2ca0:	8a 17       	cp	r24, r26
    2ca2:	9b 07       	cpc	r25, r27
    2ca4:	11 f4       	brne	.+4      	; 0x2caa <rb16_write+0x4c>
    2ca6:	12 82       	std	Z+2, r1	; 0x02
    2ca8:	13 82       	std	Z+3, r1	; 0x03
    2caa:	82 81       	ldd	r24, Z+2	; 0x02
    2cac:	93 81       	ldd	r25, Z+3	; 0x03
    2cae:	c4 81       	ldd	r28, Z+4	; 0x04
    2cb0:	d5 81       	ldd	r29, Z+5	; 0x05
    2cb2:	8c 17       	cp	r24, r28
    2cb4:	9d 07       	cpc	r25, r29
    2cb6:	49 f4       	brne	.+18     	; 0x2cca <rb16_write+0x6c>
    2cb8:	01 96       	adiw	r24, 0x01	; 1
    2cba:	a8 17       	cp	r26, r24
    2cbc:	b9 07       	cpc	r27, r25
    2cbe:	19 f0       	breq	.+6      	; 0x2cc6 <rb16_write+0x68>
    2cc0:	84 83       	std	Z+4, r24	; 0x04
    2cc2:	95 83       	std	Z+5, r25	; 0x05
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <rb16_write+0x6c>
    2cc6:	14 82       	std	Z+4, r1	; 0x04
    2cc8:	15 82       	std	Z+5, r1	; 0x05
    2cca:	2f 5f       	subi	r18, 0xFF	; 255
    2ccc:	82 2f       	mov	r24, r18
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	84 17       	cp	r24, r20
    2cd2:	95 07       	cpc	r25, r21
    2cd4:	68 f2       	brcs	.-102    	; 0x2c70 <rb16_write+0x12>
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	08 95       	ret

00002cdc <rb16_init>:
    2cdc:	fc 01       	movw	r30, r24
    2cde:	12 82       	std	Z+2, r1	; 0x02
    2ce0:	13 82       	std	Z+3, r1	; 0x03
    2ce2:	14 82       	std	Z+4, r1	; 0x04
    2ce4:	15 82       	std	Z+5, r1	; 0x05
    2ce6:	66 83       	std	Z+6, r22	; 0x06
    2ce8:	77 83       	std	Z+7, r23	; 0x07
    2cea:	40 83       	st	Z, r20
    2cec:	51 83       	std	Z+1, r21	; 0x01
    2cee:	08 95       	ret

00002cf0 <rb16_get_nth>:
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	12 96       	adiw	r26, 0x02	; 2
    2cf4:	ed 91       	ld	r30, X+
    2cf6:	fc 91       	ld	r31, X
    2cf8:	13 97       	sbiw	r26, 0x03	; 3
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	e8 17       	cp	r30, r24
    2d00:	f9 07       	cpc	r31, r25
    2d02:	78 f0       	brcs	.+30     	; 0x2d22 <rb16_get_nth+0x32>
    2d04:	e1 50       	subi	r30, 0x01	; 1
    2d06:	f0 48       	sbci	r31, 0x80	; 128
    2d08:	e6 1b       	sub	r30, r22
    2d0a:	f7 0b       	sbc	r31, r23
    2d0c:	ee 0f       	add	r30, r30
    2d0e:	ff 1f       	adc	r31, r31
    2d10:	16 96       	adiw	r26, 0x06	; 6
    2d12:	8d 91       	ld	r24, X+
    2d14:	9c 91       	ld	r25, X
    2d16:	17 97       	sbiw	r26, 0x07	; 7
    2d18:	e8 0f       	add	r30, r24
    2d1a:	f9 1f       	adc	r31, r25
    2d1c:	80 81       	ld	r24, Z
    2d1e:	91 81       	ldd	r25, Z+1	; 0x01
    2d20:	08 95       	ret
    2d22:	2d 91       	ld	r18, X+
    2d24:	3c 91       	ld	r19, X
    2d26:	11 97       	sbiw	r26, 0x01	; 1
    2d28:	e2 0f       	add	r30, r18
    2d2a:	f3 1f       	adc	r31, r19
    2d2c:	e1 50       	subi	r30, 0x01	; 1
    2d2e:	f0 48       	sbci	r31, 0x80	; 128
    2d30:	e6 1b       	sub	r30, r22
    2d32:	f7 0b       	sbc	r31, r23
    2d34:	ee 0f       	add	r30, r30
    2d36:	ff 1f       	adc	r31, r31
    2d38:	16 96       	adiw	r26, 0x06	; 6
    2d3a:	8d 91       	ld	r24, X+
    2d3c:	9c 91       	ld	r25, X
    2d3e:	17 97       	sbiw	r26, 0x07	; 7
    2d40:	e8 0f       	add	r30, r24
    2d42:	f9 1f       	adc	r31, r25
    2d44:	80 81       	ld	r24, Z
    2d46:	91 81       	ldd	r25, Z+1	; 0x01
    2d48:	08 95       	ret

00002d4a <rb32_write>:
    2d4a:	cf 92       	push	r12
    2d4c:	df 92       	push	r13
    2d4e:	ef 92       	push	r14
    2d50:	ff 92       	push	r15
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	fc 01       	movw	r30, r24
    2d58:	41 15       	cp	r20, r1
    2d5a:	51 05       	cpc	r21, r1
    2d5c:	09 f4       	brne	.+2      	; 0x2d60 <rb32_write+0x16>
    2d5e:	3f c0       	rjmp	.+126    	; 0x2dde <rb32_write+0x94>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	db 01       	movw	r26, r22
    2d70:	a8 0f       	add	r26, r24
    2d72:	b9 1f       	adc	r27, r25
    2d74:	cd 90       	ld	r12, X+
    2d76:	dd 90       	ld	r13, X+
    2d78:	ed 90       	ld	r14, X+
    2d7a:	fc 90       	ld	r15, X
    2d7c:	a2 81       	ldd	r26, Z+2	; 0x02
    2d7e:	b3 81       	ldd	r27, Z+3	; 0x03
    2d80:	aa 0f       	add	r26, r26
    2d82:	bb 1f       	adc	r27, r27
    2d84:	aa 0f       	add	r26, r26
    2d86:	bb 1f       	adc	r27, r27
    2d88:	86 81       	ldd	r24, Z+6	; 0x06
    2d8a:	97 81       	ldd	r25, Z+7	; 0x07
    2d8c:	a8 0f       	add	r26, r24
    2d8e:	b9 1f       	adc	r27, r25
    2d90:	cd 92       	st	X+, r12
    2d92:	dd 92       	st	X+, r13
    2d94:	ed 92       	st	X+, r14
    2d96:	fc 92       	st	X, r15
    2d98:	13 97       	sbiw	r26, 0x03	; 3
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	01 96       	adiw	r24, 0x01	; 1
    2da0:	82 83       	std	Z+2, r24	; 0x02
    2da2:	93 83       	std	Z+3, r25	; 0x03
    2da4:	a0 81       	ld	r26, Z
    2da6:	b1 81       	ldd	r27, Z+1	; 0x01
    2da8:	8a 17       	cp	r24, r26
    2daa:	9b 07       	cpc	r25, r27
    2dac:	11 f4       	brne	.+4      	; 0x2db2 <rb32_write+0x68>
    2dae:	12 82       	std	Z+2, r1	; 0x02
    2db0:	13 82       	std	Z+3, r1	; 0x03
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	c4 81       	ldd	r28, Z+4	; 0x04
    2db8:	d5 81       	ldd	r29, Z+5	; 0x05
    2dba:	8c 17       	cp	r24, r28
    2dbc:	9d 07       	cpc	r25, r29
    2dbe:	49 f4       	brne	.+18     	; 0x2dd2 <rb32_write+0x88>
    2dc0:	01 96       	adiw	r24, 0x01	; 1
    2dc2:	a8 17       	cp	r26, r24
    2dc4:	b9 07       	cpc	r27, r25
    2dc6:	19 f0       	breq	.+6      	; 0x2dce <rb32_write+0x84>
    2dc8:	84 83       	std	Z+4, r24	; 0x04
    2dca:	95 83       	std	Z+5, r25	; 0x05
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <rb32_write+0x88>
    2dce:	14 82       	std	Z+4, r1	; 0x04
    2dd0:	15 82       	std	Z+5, r1	; 0x05
    2dd2:	2f 5f       	subi	r18, 0xFF	; 255
    2dd4:	82 2f       	mov	r24, r18
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	84 17       	cp	r24, r20
    2dda:	95 07       	cpc	r25, r21
    2ddc:	20 f2       	brcs	.-120    	; 0x2d66 <rb32_write+0x1c>
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	ff 90       	pop	r15
    2de4:	ef 90       	pop	r14
    2de6:	df 90       	pop	r13
    2de8:	cf 90       	pop	r12
    2dea:	08 95       	ret

00002dec <rb32_init>:
    2dec:	fc 01       	movw	r30, r24
    2dee:	12 82       	std	Z+2, r1	; 0x02
    2df0:	13 82       	std	Z+3, r1	; 0x03
    2df2:	14 82       	std	Z+4, r1	; 0x04
    2df4:	15 82       	std	Z+5, r1	; 0x05
    2df6:	66 83       	std	Z+6, r22	; 0x06
    2df8:	77 83       	std	Z+7, r23	; 0x07
    2dfa:	40 83       	st	Z, r20
    2dfc:	51 83       	std	Z+1, r21	; 0x01
    2dfe:	08 95       	ret

00002e00 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    2e00:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    2e02:	12 96       	adiw	r26, 0x02	; 2
    2e04:	ed 91       	ld	r30, X+
    2e06:	fc 91       	ld	r31, X
    2e08:	13 97       	sbiw	r26, 0x03	; 3
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	e8 17       	cp	r30, r24
    2e10:	f9 07       	cpc	r31, r25
    2e12:	98 f0       	brcs	.+38     	; 0x2e3a <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    2e14:	e1 50       	subi	r30, 0x01	; 1
    2e16:	f0 4c       	sbci	r31, 0xC0	; 192
    2e18:	e6 1b       	sub	r30, r22
    2e1a:	f7 0b       	sbc	r31, r23
    2e1c:	ee 0f       	add	r30, r30
    2e1e:	ff 1f       	adc	r31, r31
    2e20:	ee 0f       	add	r30, r30
    2e22:	ff 1f       	adc	r31, r31
    2e24:	16 96       	adiw	r26, 0x06	; 6
    2e26:	8d 91       	ld	r24, X+
    2e28:	9c 91       	ld	r25, X
    2e2a:	17 97       	sbiw	r26, 0x07	; 7
    2e2c:	e8 0f       	add	r30, r24
    2e2e:	f9 1f       	adc	r31, r25
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    2e3a:	2d 91       	ld	r18, X+
    2e3c:	3c 91       	ld	r19, X
    2e3e:	11 97       	sbiw	r26, 0x01	; 1
    2e40:	e2 0f       	add	r30, r18
    2e42:	f3 1f       	adc	r31, r19
    2e44:	e1 50       	subi	r30, 0x01	; 1
    2e46:	f0 4c       	sbci	r31, 0xC0	; 192
    2e48:	e6 1b       	sub	r30, r22
    2e4a:	f7 0b       	sbc	r31, r23
    2e4c:	ee 0f       	add	r30, r30
    2e4e:	ff 1f       	adc	r31, r31
    2e50:	ee 0f       	add	r30, r30
    2e52:	ff 1f       	adc	r31, r31
    2e54:	16 96       	adiw	r26, 0x06	; 6
    2e56:	8d 91       	ld	r24, X+
    2e58:	9c 91       	ld	r25, X
    2e5a:	17 97       	sbiw	r26, 0x07	; 7
    2e5c:	e8 0f       	add	r30, r24
    2e5e:	f9 1f       	adc	r31, r25
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
}
    2e68:	08 95       	ret

00002e6a <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	1f 92       	push	r1
    2e70:	1f 92       	push	r1
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2e76:	8f ef       	ldi	r24, 0xFF	; 255
    2e78:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2e7c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2e80:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2e84:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2e88:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2e8c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2e90:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2e94:	8f b7       	in	r24, 0x3f	; 63
    2e96:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2e98:	f8 94       	cli
	return flags;
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2e9c:	e0 e5       	ldi	r30, 0x50	; 80
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	82 60       	ori	r24, 0x02	; 2
    2ea4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ea6:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2ea8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2eaa:	81 ff       	sbrs	r24, 1
    2eac:	fd cf       	rjmp	.-6      	; 0x2ea8 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2eae:	61 e0       	ldi	r22, 0x01	; 1
    2eb0:	80 e4       	ldi	r24, 0x40	; 64
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	44 d0       	rcall	.+136    	; 0x2f3e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2eb6:	8f b7       	in	r24, 0x3f	; 63
    2eb8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2eba:	f8 94       	cli
	return flags;
    2ebc:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2ebe:	e0 e5       	ldi	r30, 0x50	; 80
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	8e 7f       	andi	r24, 0xFE	; 254
    2ec6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ec8:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	08 95       	ret

00002ed4 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	1f 92       	push	r1
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ede:	9f b7       	in	r25, 0x3f	; 63
    2ee0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2ee2:	f8 94       	cli
	return flags;
    2ee4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2ee6:	e8 2f       	mov	r30, r24
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	e0 59       	subi	r30, 0x90	; 144
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	60 95       	com	r22
    2ef0:	80 81       	ld	r24, Z
    2ef2:	68 23       	and	r22, r24
    2ef4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ef6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2ef8:	0f 90       	pop	r0
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	08 95       	ret

00002f00 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	1f 92       	push	r1
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f0a:	9f b7       	in	r25, 0x3f	; 63
    2f0c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2f0e:	f8 94       	cli
	return flags;
    2f10:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2f12:	e8 2f       	mov	r30, r24
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	e0 59       	subi	r30, 0x90	; 144
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	80 81       	ld	r24, Z
    2f1c:	68 2b       	or	r22, r24
    2f1e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f20:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2f22:	0f 90       	pop	r0
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	08 95       	ret

00002f2a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2f2a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2f2e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2f30:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2f32:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2f36:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2f38:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2f3c:	08 95       	ret

00002f3e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2f3e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2f40:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2f42:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2f44:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2f46:	60 83       	st	Z, r22
	ret                             // Return to caller
    2f48:	08 95       	ret

00002f4a <__portable_avr_delay_cycles>:
void change_hall_sensor_scaler(void){
	ACA.CTRLB = scale_factor;
}

void release(void){
	servo_release();
    2f4a:	04 c0       	rjmp	.+8      	; 0x2f54 <__portable_avr_delay_cycles+0xa>
    2f4c:	61 50       	subi	r22, 0x01	; 1
    2f4e:	71 09       	sbc	r23, r1
    2f50:	81 09       	sbc	r24, r1
    2f52:	91 09       	sbc	r25, r1
    2f54:	61 15       	cp	r22, r1
    2f56:	71 05       	cpc	r23, r1
    2f58:	81 05       	cpc	r24, r1
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	b9 f7       	brne	.-18     	; 0x2f4c <__portable_avr_delay_cycles+0x2>
    2f5e:	08 95       	ret

00002f60 <hall_sensor_measure>:
    2f60:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <ticks_per_sec>
    2f64:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <ticks_per_sec+0x1>
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	80 93 30 22 	sts	0x2230, r24	; 0x802230 <ticks_per_sec>
    2f6e:	90 93 31 22 	sts	0x2231, r25	; 0x802231 <ticks_per_sec+0x1>
    2f72:	08 95       	ret

00002f74 <pressure_init>:
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    2f78:	1b dd       	rcall	.-1482   	; 0x29b0 <ms5607_init>
    2f7a:	82 ea       	ldi	r24, 0xA2	; 162
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	2c dd       	rcall	.-1448   	; 0x29d8 <ms5607_read>
    2f80:	c7 e3       	ldi	r28, 0x37	; 55
    2f82:	d2 e2       	ldi	r29, 0x22	; 34
    2f84:	88 83       	st	Y, r24
    2f86:	99 83       	std	Y+1, r25	; 0x01
    2f88:	84 ea       	ldi	r24, 0xA4	; 164
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	25 dd       	rcall	.-1462   	; 0x29d8 <ms5607_read>
    2f8e:	8a 83       	std	Y+2, r24	; 0x02
    2f90:	9b 83       	std	Y+3, r25	; 0x03
    2f92:	86 ea       	ldi	r24, 0xA6	; 166
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	20 dd       	rcall	.-1472   	; 0x29d8 <ms5607_read>
    2f98:	8c 83       	std	Y+4, r24	; 0x04
    2f9a:	9d 83       	std	Y+5, r25	; 0x05
    2f9c:	88 ea       	ldi	r24, 0xA8	; 168
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	1b dd       	rcall	.-1482   	; 0x29d8 <ms5607_read>
    2fa2:	8e 83       	std	Y+6, r24	; 0x06
    2fa4:	9f 83       	std	Y+7, r25	; 0x07
    2fa6:	8a ea       	ldi	r24, 0xAA	; 170
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	16 dd       	rcall	.-1492   	; 0x29d8 <ms5607_read>
    2fac:	88 87       	std	Y+8, r24	; 0x08
    2fae:	99 87       	std	Y+9, r25	; 0x09
    2fb0:	8c ea       	ldi	r24, 0xAC	; 172
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	11 dd       	rcall	.-1502   	; 0x29d8 <ms5607_read>
    2fb6:	8a 87       	std	Y+10, r24	; 0x0a
    2fb8:	9b 87       	std	Y+11, r25	; 0x0b
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	08 95       	ret

00002fc0 <gps_init>:
    2fc0:	b6 dc       	rcall	.-1684   	; 0x292e <gps_uart_init>
    2fc2:	6b ea       	ldi	r22, 0xAB	; 171
    2fc4:	79 e2       	ldi	r23, 0x29	; 41
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	bf df       	rcall	.-130    	; 0x2f4a <__portable_avr_delay_cycles>
    2fcc:	80 e3       	ldi	r24, 0x30	; 48
    2fce:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    2fd2:	08 95       	ret

00002fd4 <bno_init>:
    2fd4:	60 e4       	ldi	r22, 0x40	; 64
    2fd6:	83 e0       	ldi	r24, 0x03	; 3
    2fd8:	7d df       	rcall	.-262    	; 0x2ed4 <sysclk_enable_module>
    2fda:	60 e4       	ldi	r22, 0x40	; 64
    2fdc:	83 e0       	ldi	r24, 0x03	; 3
    2fde:	7a df       	rcall	.-268    	; 0x2ed4 <sysclk_enable_module>
    2fe0:	ab db       	rcall	.-2218   	; 0x2738 <imu_init>
    2fe2:	23 dc       	rcall	.-1978   	; 0x282a <imu_update>
    2fe4:	35 dc       	rcall	.-1942   	; 0x2850 <imu_roll>
    2fe6:	60 93 32 22 	sts	0x2232, r22	; 0x802232 <ref_roll>
    2fea:	70 93 33 22 	sts	0x2233, r23	; 0x802233 <ref_roll+0x1>
    2fee:	80 93 34 22 	sts	0x2234, r24	; 0x802234 <ref_roll+0x2>
    2ff2:	90 93 35 22 	sts	0x2235, r25	; 0x802235 <ref_roll+0x3>
    2ff6:	35 dc       	rcall	.-1942   	; 0x2862 <imu_pitch>
    2ff8:	60 93 21 20 	sts	0x2021, r22	; 0x802021 <ref_pitch>
    2ffc:	70 93 22 20 	sts	0x2022, r23	; 0x802022 <ref_pitch+0x1>
    3000:	80 93 23 20 	sts	0x2023, r24	; 0x802023 <ref_pitch+0x2>
    3004:	90 93 24 20 	sts	0x2024, r25	; 0x802024 <ref_pitch+0x3>
    3008:	08 95       	ret

0000300a <hall_sensor_init>:
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	c0 e9       	ldi	r28, 0x90	; 144
    3010:	d2 e2       	ldi	r29, 0x22	; 34
    3012:	84 e0       	ldi	r24, 0x04	; 4
    3014:	fe 01       	movw	r30, r28
    3016:	98 2f       	mov	r25, r24
    3018:	11 92       	st	Z+, r1
    301a:	9a 95       	dec	r25
    301c:	e9 f7       	brne	.-6      	; 0x3018 <hall_sensor_init+0xe>
    301e:	88 83       	st	Y, r24
    3020:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <scale_factor>
    3024:	8a 83       	std	Y+2, r24	; 0x02
    3026:	8f e2       	ldi	r24, 0x2F	; 47
    3028:	89 83       	std	Y+1, r24	; 0x01
    302a:	e0 e8       	ldi	r30, 0x80	; 128
    302c:	f3 e0       	ldi	r31, 0x03	; 3
    302e:	80 81       	ld	r24, Z
    3030:	88 60       	ori	r24, 0x08	; 8
    3032:	80 83       	st	Z, r24
    3034:	60 eb       	ldi	r22, 0xB0	; 176
    3036:	77 e1       	ldi	r23, 0x17	; 23
    3038:	80 e8       	ldi	r24, 0x80	; 128
    303a:	93 e0       	ldi	r25, 0x03	; 3
    303c:	0e 94 13 03 	call	0x626	; 0x626 <ac_set_interrupt_callback>
    3040:	88 81       	ld	r24, Y
    3042:	98 2f       	mov	r25, r24
    3044:	90 6c       	ori	r25, 0xC0	; 192
    3046:	98 83       	st	Y, r25
    3048:	9b 81       	ldd	r25, Y+3	; 0x03
    304a:	29 2f       	mov	r18, r25
    304c:	20 73       	andi	r18, 0x30	; 48
    304e:	29 f0       	breq	.+10     	; 0x305a <hall_sensor_init+0x50>
    3050:	9c 7f       	andi	r25, 0xFC	; 252
    3052:	92 60       	ori	r25, 0x02	; 2
    3054:	90 93 93 22 	sts	0x2293, r25	; 0x802293 <aca_config+0x3>
    3058:	04 c0       	rjmp	.+8      	; 0x3062 <hall_sensor_init+0x58>
    305a:	8f 70       	andi	r24, 0x0F	; 15
    305c:	80 6e       	ori	r24, 0xE0	; 224
    305e:	80 93 90 22 	sts	0x2290, r24	; 0x802290 <aca_config>
    3062:	40 e9       	ldi	r20, 0x90	; 144
    3064:	52 e2       	ldi	r21, 0x22	; 34
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	80 e8       	ldi	r24, 0x80	; 128
    306a:	93 e0       	ldi	r25, 0x03	; 3
    306c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ac_write_config>
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	80 e8       	ldi	r24, 0x80	; 128
    3074:	93 e0       	ldi	r25, 0x03	; 3
    3076:	0e 94 cb 02 	call	0x596	; 0x596 <ac_enable>
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	08 95       	ret

00003080 <change_hall_sensor_scaler>:
    3080:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <scale_factor>
    3084:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <__TEXT_REGION_LENGTH__+0x700385>
    3088:	08 95       	ret

0000308a <get_pressure>:
    308a:	4f 92       	push	r4
    308c:	5f 92       	push	r5
    308e:	6f 92       	push	r6
    3090:	7f 92       	push	r7
    3092:	8f 92       	push	r8
    3094:	9f 92       	push	r9
    3096:	af 92       	push	r10
    3098:	bf 92       	push	r11
    309a:	cf 92       	push	r12
    309c:	df 92       	push	r13
    309e:	ef 92       	push	r14
    30a0:	ff 92       	push	r15
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	aa dc       	rcall	.-1708   	; 0x29fc <ms5607_convert_d1>
    30a8:	6b 01       	movw	r12, r22
    30aa:	7c 01       	movw	r14, r24
    30ac:	e7 dc       	rcall	.-1586   	; 0x2a7c <ms5607_convert_d2>
    30ae:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    30b2:	4b 01       	movw	r8, r22
    30b4:	5c 01       	movw	r10, r24
    30b6:	c7 e3       	ldi	r28, 0x37	; 55
    30b8:	d2 e2       	ldi	r29, 0x22	; 34
    30ba:	68 85       	ldd	r22, Y+8	; 0x08
    30bc:	79 85       	ldd	r23, Y+9	; 0x09
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e8       	ldi	r20, 0x80	; 128
    30cc:	53 e4       	ldi	r21, 0x43	; 67
    30ce:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    30d2:	9b 01       	movw	r18, r22
    30d4:	ac 01       	movw	r20, r24
    30d6:	c5 01       	movw	r24, r10
    30d8:	b4 01       	movw	r22, r8
    30da:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    30de:	4b 01       	movw	r8, r22
    30e0:	5c 01       	movw	r10, r24
    30e2:	6c 81       	ldd	r22, Y+4	; 0x04
    30e4:	7d 81       	ldd	r23, Y+5	; 0x05
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    30ee:	a5 01       	movw	r20, r10
    30f0:	94 01       	movw	r18, r8
    30f2:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e0       	ldi	r20, 0x00	; 0
    30fc:	5c e3       	ldi	r21, 0x3C	; 60
    30fe:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3102:	2b 01       	movw	r4, r22
    3104:	3c 01       	movw	r6, r24
    3106:	68 81       	ld	r22, Y
    3108:	79 81       	ldd	r23, Y+1	; 0x01
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e8       	ldi	r20, 0x80	; 128
    3118:	57 e4       	ldi	r21, 0x47	; 71
    311a:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    311e:	9b 01       	movw	r18, r22
    3120:	ac 01       	movw	r20, r24
    3122:	c3 01       	movw	r24, r6
    3124:	b2 01       	movw	r22, r4
    3126:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    312a:	2b 01       	movw	r4, r22
    312c:	3c 01       	movw	r6, r24
    312e:	c7 01       	movw	r24, r14
    3130:	b6 01       	movw	r22, r12
    3132:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    3136:	9b 01       	movw	r18, r22
    3138:	ac 01       	movw	r20, r24
    313a:	c3 01       	movw	r24, r6
    313c:	b2 01       	movw	r22, r4
    313e:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	55 e3       	ldi	r21, 0x35	; 53
    314a:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    314e:	6b 01       	movw	r12, r22
    3150:	7c 01       	movw	r14, r24
    3152:	6e 81       	ldd	r22, Y+6	; 0x06
    3154:	7f 81       	ldd	r23, Y+7	; 0x07
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    315e:	a5 01       	movw	r20, r10
    3160:	94 01       	movw	r18, r8
    3162:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e8       	ldi	r20, 0x80	; 128
    316c:	5c e3       	ldi	r21, 0x3C	; 60
    316e:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3172:	4b 01       	movw	r8, r22
    3174:	5c 01       	movw	r10, r24
    3176:	6a 81       	ldd	r22, Y+2	; 0x02
    3178:	7b 81       	ldd	r23, Y+3	; 0x03
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	58 e4       	ldi	r21, 0x48	; 72
    318a:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    318e:	9b 01       	movw	r18, r22
    3190:	ac 01       	movw	r20, r24
    3192:	c5 01       	movw	r24, r10
    3194:	b4 01       	movw	r22, r8
    3196:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    319a:	9b 01       	movw	r18, r22
    319c:	ac 01       	movw	r20, r24
    319e:	c7 01       	movw	r24, r14
    31a0:	b6 01       	movw	r22, r12
    31a2:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	58 e3       	ldi	r21, 0x38	; 56
    31ae:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	ff 90       	pop	r15
    31b8:	ef 90       	pop	r14
    31ba:	df 90       	pop	r13
    31bc:	cf 90       	pop	r12
    31be:	bf 90       	pop	r11
    31c0:	af 90       	pop	r10
    31c2:	9f 90       	pop	r9
    31c4:	8f 90       	pop	r8
    31c6:	7f 90       	pop	r7
    31c8:	6f 90       	pop	r6
    31ca:	5f 90       	pop	r5
    31cc:	4f 90       	pop	r4
    31ce:	08 95       	ret

000031d0 <get_temperature>:
    31d0:	4f 92       	push	r4
    31d2:	5f 92       	push	r5
    31d4:	6f 92       	push	r6
    31d6:	7f 92       	push	r7
    31d8:	8f 92       	push	r8
    31da:	9f 92       	push	r9
    31dc:	af 92       	push	r10
    31de:	bf 92       	push	r11
    31e0:	cf 92       	push	r12
    31e2:	df 92       	push	r13
    31e4:	ef 92       	push	r14
    31e6:	ff 92       	push	r15
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	1f 92       	push	r1
    31ee:	1f 92       	push	r1
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	8f db       	rcall	.-2274   	; 0x2914 <thermistor_read>
    31f6:	89 83       	std	Y+1, r24	; 0x01
    31f8:	9a 83       	std	Y+2, r25	; 0x02
    31fa:	69 81       	ldd	r22, Y+1	; 0x01
    31fc:	7a 81       	ldd	r23, Y+2	; 0x02
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    3206:	20 91 19 20 	lds	r18, 0x2019	; 0x802019 <m>
    320a:	30 91 1a 20 	lds	r19, 0x201A	; 0x80201a <m+0x1>
    320e:	40 91 1b 20 	lds	r20, 0x201B	; 0x80201b <m+0x2>
    3212:	50 91 1c 20 	lds	r21, 0x201C	; 0x80201c <m+0x3>
    3216:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    321a:	20 91 15 20 	lds	r18, 0x2015	; 0x802015 <b>
    321e:	30 91 16 20 	lds	r19, 0x2016	; 0x802016 <b+0x1>
    3222:	40 91 17 20 	lds	r20, 0x2017	; 0x802017 <b+0x2>
    3226:	50 91 18 20 	lds	r21, 0x2018	; 0x802018 <b+0x3>
    322a:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    322e:	6b 01       	movw	r12, r22
    3230:	7c 01       	movw	r14, r24
    3232:	9b 01       	movw	r18, r22
    3234:	ac 01       	movw	r20, r24
    3236:	63 e3       	ldi	r22, 0x33	; 51
    3238:	73 e3       	ldi	r23, 0x33	; 51
    323a:	83 e5       	ldi	r24, 0x53	; 83
    323c:	90 e4       	ldi	r25, 0x40	; 64
    323e:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 ec       	ldi	r19, 0xC0	; 192
    3246:	46 e4       	ldi	r20, 0x46	; 70
    3248:	55 e4       	ldi	r21, 0x45	; 69
    324a:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    324e:	a7 01       	movw	r20, r14
    3250:	96 01       	movw	r18, r12
    3252:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e4       	ldi	r19, 0x40	; 64
    325a:	4c e1       	ldi	r20, 0x1C	; 28
    325c:	56 e4       	ldi	r21, 0x46	; 70
    325e:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3262:	0e 94 5f 30 	call	0x60be	; 0x60be <log>
    3266:	6b 01       	movw	r12, r22
    3268:	7c 01       	movw	r14, r24
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e4       	ldi	r20, 0x40	; 64
    3270:	50 e4       	ldi	r21, 0x40	; 64
    3272:	0e 94 02 31 	call	0x6204	; 0x6204 <pow>
    3276:	4b 01       	movw	r8, r22
    3278:	5c 01       	movw	r10, r24
    327a:	21 ef       	ldi	r18, 0xF1	; 241
    327c:	3b eb       	ldi	r19, 0xBB	; 187
    327e:	46 e8       	ldi	r20, 0x86	; 134
    3280:	59 e3       	ldi	r21, 0x39	; 57
    3282:	c7 01       	movw	r24, r14
    3284:	b6 01       	movw	r22, r12
    3286:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    328a:	2d e0       	ldi	r18, 0x0D	; 13
    328c:	3f ec       	ldi	r19, 0xCF	; 207
    328e:	4b e5       	ldi	r20, 0x5B	; 91
    3290:	5b e3       	ldi	r21, 0x3B	; 59
    3292:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    3296:	2b 01       	movw	r4, r22
    3298:	3c 01       	movw	r6, r24
    329a:	a7 01       	movw	r20, r14
    329c:	96 01       	movw	r18, r12
    329e:	c7 01       	movw	r24, r14
    32a0:	b6 01       	movw	r22, r12
    32a2:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    32a6:	22 e8       	ldi	r18, 0x82	; 130
    32a8:	35 ed       	ldi	r19, 0xD5	; 213
    32aa:	4f e2       	ldi	r20, 0x2F	; 47
    32ac:	56 e3       	ldi	r21, 0x36	; 54
    32ae:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    32b2:	9b 01       	movw	r18, r22
    32b4:	ac 01       	movw	r20, r24
    32b6:	c3 01       	movw	r24, r6
    32b8:	b2 01       	movw	r22, r4
    32ba:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    32be:	6b 01       	movw	r12, r22
    32c0:	7c 01       	movw	r14, r24
    32c2:	2a e6       	ldi	r18, 0x6A	; 106
    32c4:	33 e1       	ldi	r19, 0x13	; 19
    32c6:	49 e8       	ldi	r20, 0x89	; 137
    32c8:	53 e3       	ldi	r21, 0x33	; 51
    32ca:	c5 01       	movw	r24, r10
    32cc:	b4 01       	movw	r22, r8
    32ce:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    32d2:	9b 01       	movw	r18, r22
    32d4:	ac 01       	movw	r20, r24
    32d6:	c7 01       	movw	r24, r14
    32d8:	b6 01       	movw	r22, r12
    32da:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    32de:	9b 01       	movw	r18, r22
    32e0:	ac 01       	movw	r20, r24
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	70 e0       	ldi	r23, 0x00	; 0
    32e6:	80 e8       	ldi	r24, 0x80	; 128
    32e8:	9f e3       	ldi	r25, 0x3F	; 63
    32ea:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	ff 90       	pop	r15
    32f8:	ef 90       	pop	r14
    32fa:	df 90       	pop	r13
    32fc:	cf 90       	pop	r12
    32fe:	bf 90       	pop	r11
    3300:	af 90       	pop	r10
    3302:	9f 90       	pop	r9
    3304:	8f 90       	pop	r8
    3306:	7f 90       	pop	r7
    3308:	6f 90       	pop	r6
    330a:	5f 90       	pop	r5
    330c:	4f 90       	pop	r4
    330e:	08 95       	ret

00003310 <get_altitude>:
    3310:	4f 92       	push	r4
    3312:	5f 92       	push	r5
    3314:	6f 92       	push	r6
    3316:	7f 92       	push	r7
    3318:	8f 92       	push	r8
    331a:	9f 92       	push	r9
    331c:	af 92       	push	r10
    331e:	bf 92       	push	r11
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	2b 01       	movw	r4, r22
    332a:	3c 01       	movw	r6, r24
    332c:	c0 90 2d 20 	lds	r12, 0x202D	; 0x80202d <L>
    3330:	d0 90 2e 20 	lds	r13, 0x202E	; 0x80202e <L+0x1>
    3334:	e0 90 2f 20 	lds	r14, 0x202F	; 0x80202f <L+0x2>
    3338:	f0 90 30 20 	lds	r15, 0x2030	; 0x802030 <L+0x3>
    333c:	20 91 31 20 	lds	r18, 0x2031	; 0x802031 <R>
    3340:	30 91 32 20 	lds	r19, 0x2032	; 0x802032 <R+0x1>
    3344:	40 91 33 20 	lds	r20, 0x2033	; 0x802033 <R+0x2>
    3348:	50 91 34 20 	lds	r21, 0x2034	; 0x802034 <R+0x3>
    334c:	c7 01       	movw	r24, r14
    334e:	b6 01       	movw	r22, r12
    3350:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3354:	20 91 29 20 	lds	r18, 0x2029	; 0x802029 <g_0>
    3358:	30 91 2a 20 	lds	r19, 0x202A	; 0x80202a <g_0+0x1>
    335c:	40 91 2b 20 	lds	r20, 0x202B	; 0x80202b <g_0+0x2>
    3360:	50 91 2c 20 	lds	r21, 0x202C	; 0x80202c <g_0+0x3>
    3364:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3368:	4b 01       	movw	r8, r22
    336a:	5c 01       	movw	r10, r24
    336c:	a3 01       	movw	r20, r6
    336e:	92 01       	movw	r18, r4
    3370:	60 91 39 20 	lds	r22, 0x2039	; 0x802039 <ground_p>
    3374:	70 91 3a 20 	lds	r23, 0x203A	; 0x80203a <ground_p+0x1>
    3378:	80 91 3b 20 	lds	r24, 0x203B	; 0x80203b <ground_p+0x2>
    337c:	90 91 3c 20 	lds	r25, 0x203C	; 0x80203c <ground_p+0x3>
    3380:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3384:	a5 01       	movw	r20, r10
    3386:	94 01       	movw	r18, r8
    3388:	0e 94 02 31 	call	0x6204	; 0x6204 <pow>
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 e8       	ldi	r20, 0x80	; 128
    3392:	5f e3       	ldi	r21, 0x3F	; 63
    3394:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    3398:	20 91 35 20 	lds	r18, 0x2035	; 0x802035 <ground_t>
    339c:	30 91 36 20 	lds	r19, 0x2036	; 0x802036 <ground_t+0x1>
    33a0:	40 91 37 20 	lds	r20, 0x2037	; 0x802037 <ground_t+0x2>
    33a4:	50 91 38 20 	lds	r21, 0x2038	; 0x802038 <ground_t+0x3>
    33a8:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    33ac:	a7 01       	movw	r20, r14
    33ae:	96 01       	movw	r18, r12
    33b0:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    33b4:	ff 90       	pop	r15
    33b6:	ef 90       	pop	r14
    33b8:	df 90       	pop	r13
    33ba:	cf 90       	pop	r12
    33bc:	bf 90       	pop	r11
    33be:	af 90       	pop	r10
    33c0:	9f 90       	pop	r9
    33c2:	8f 90       	pop	r8
    33c4:	7f 90       	pop	r7
    33c6:	6f 90       	pop	r6
    33c8:	5f 90       	pop	r5
    33ca:	4f 90       	pop	r4
    33cc:	08 95       	ret

000033ce <get_voltage>:
    33ce:	cf 92       	push	r12
    33d0:	df 92       	push	r13
    33d2:	ef 92       	push	r14
    33d4:	ff 92       	push	r15
    33d6:	36 dc       	rcall	.-1940   	; 0x2c44 <voltage_read>
    33d8:	bc 01       	movw	r22, r24
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    33e2:	20 91 19 20 	lds	r18, 0x2019	; 0x802019 <m>
    33e6:	30 91 1a 20 	lds	r19, 0x201A	; 0x80201a <m+0x1>
    33ea:	40 91 1b 20 	lds	r20, 0x201B	; 0x80201b <m+0x2>
    33ee:	50 91 1c 20 	lds	r21, 0x201C	; 0x80201c <m+0x3>
    33f2:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    33f6:	20 91 15 20 	lds	r18, 0x2015	; 0x802015 <b>
    33fa:	30 91 16 20 	lds	r19, 0x2016	; 0x802016 <b+0x1>
    33fe:	40 91 17 20 	lds	r20, 0x2017	; 0x802017 <b+0x2>
    3402:	50 91 18 20 	lds	r21, 0x2018	; 0x802018 <b+0x3>
    3406:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    340a:	6b 01       	movw	r12, r22
    340c:	7c 01       	movw	r14, r24
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e4       	ldi	r19, 0x40	; 64
    3412:	47 ee       	ldi	r20, 0xE7	; 231
    3414:	56 e4       	ldi	r21, 0x46	; 70
    3416:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 ef       	ldi	r19, 0xF0	; 240
    341e:	43 e4       	ldi	r20, 0x43	; 67
    3420:	56 e4       	ldi	r21, 0x46	; 70
    3422:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3426:	9b 01       	movw	r18, r22
    3428:	ac 01       	movw	r20, r24
    342a:	c7 01       	movw	r24, r14
    342c:	b6 01       	movw	r22, r12
    342e:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    3432:	ff 90       	pop	r15
    3434:	ef 90       	pop	r14
    3436:	df 90       	pop	r13
    3438:	cf 90       	pop	r12
    343a:	08 95       	ret

0000343c <diff>:
    343c:	2f 92       	push	r2
    343e:	3f 92       	push	r3
    3440:	4f 92       	push	r4
    3442:	5f 92       	push	r5
    3444:	6f 92       	push	r6
    3446:	7f 92       	push	r7
    3448:	8f 92       	push	r8
    344a:	9f 92       	push	r9
    344c:	af 92       	push	r10
    344e:	bf 92       	push	r11
    3450:	cf 92       	push	r12
    3452:	df 92       	push	r13
    3454:	ef 92       	push	r14
    3456:	ff 92       	push	r15
    3458:	0f 93       	push	r16
    345a:	1f 93       	push	r17
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	00 d0       	rcall	.+0      	; 0x3462 <diff+0x26>
    3462:	00 d0       	rcall	.+0      	; 0x3464 <diff+0x28>
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	6c 01       	movw	r12, r24
    346a:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    346e:	88 23       	and	r24, r24
    3470:	09 f4       	brne	.+2      	; 0x3474 <diff+0x38>
    3472:	6c c0       	rjmp	.+216    	; 0x354c <diff+0x110>
    3474:	00 e0       	ldi	r16, 0x00	; 0
    3476:	10 e0       	ldi	r17, 0x00	; 0
    3478:	41 2c       	mov	r4, r1
    347a:	51 2c       	mov	r5, r1
    347c:	32 01       	movw	r6, r4
    347e:	86 2e       	mov	r8, r22
    3480:	91 2c       	mov	r9, r1
    3482:	a1 2c       	mov	r10, r1
    3484:	b1 2c       	mov	r11, r1
    3486:	89 82       	std	Y+1, r8	; 0x01
    3488:	9a 82       	std	Y+2, r9	; 0x02
    348a:	ab 82       	std	Y+3, r10	; 0x03
    348c:	bc 82       	std	Y+4, r11	; 0x04
    348e:	b8 01       	movw	r22, r16
    3490:	c6 01       	movw	r24, r12
    3492:	2e dc       	rcall	.-1956   	; 0x2cf0 <rb16_get_nth>
    3494:	5c 01       	movw	r10, r24
    3496:	18 01       	movw	r2, r16
    3498:	2f ef       	ldi	r18, 0xFF	; 255
    349a:	22 1a       	sub	r2, r18
    349c:	32 0a       	sbc	r3, r18
    349e:	b1 01       	movw	r22, r2
    34a0:	c6 01       	movw	r24, r12
    34a2:	26 dc       	rcall	.-1972   	; 0x2cf0 <rb16_get_nth>
    34a4:	7c 01       	movw	r14, r24
    34a6:	b8 01       	movw	r22, r16
    34a8:	6e 5f       	subi	r22, 0xFE	; 254
    34aa:	7f 4f       	sbci	r23, 0xFF	; 255
    34ac:	c6 01       	movw	r24, r12
    34ae:	20 dc       	rcall	.-1984   	; 0x2cf0 <rb16_get_nth>
    34b0:	a5 01       	movw	r20, r10
    34b2:	bb 0c       	add	r11, r11
    34b4:	66 0b       	sbc	r22, r22
    34b6:	77 0b       	sbc	r23, r23
    34b8:	8a 01       	movw	r16, r20
    34ba:	9b 01       	movw	r18, r22
    34bc:	00 0f       	add	r16, r16
    34be:	11 1f       	adc	r17, r17
    34c0:	22 1f       	adc	r18, r18
    34c2:	33 1f       	adc	r19, r19
    34c4:	40 0f       	add	r20, r16
    34c6:	51 1f       	adc	r21, r17
    34c8:	62 1f       	adc	r22, r18
    34ca:	73 1f       	adc	r23, r19
    34cc:	87 01       	movw	r16, r14
    34ce:	ff 0c       	add	r15, r15
    34d0:	22 0b       	sbc	r18, r18
    34d2:	33 0b       	sbc	r19, r19
    34d4:	78 01       	movw	r14, r16
    34d6:	89 01       	movw	r16, r18
    34d8:	ee 0c       	add	r14, r14
    34da:	ff 1c       	adc	r15, r15
    34dc:	00 1f       	adc	r16, r16
    34de:	11 1f       	adc	r17, r17
    34e0:	ee 0c       	add	r14, r14
    34e2:	ff 1c       	adc	r15, r15
    34e4:	00 1f       	adc	r16, r16
    34e6:	11 1f       	adc	r17, r17
    34e8:	4a 01       	movw	r8, r20
    34ea:	5b 01       	movw	r10, r22
    34ec:	8e 18       	sub	r8, r14
    34ee:	9f 08       	sbc	r9, r15
    34f0:	a0 0a       	sbc	r10, r16
    34f2:	b1 0a       	sbc	r11, r17
    34f4:	ac 01       	movw	r20, r24
    34f6:	99 0f       	add	r25, r25
    34f8:	66 0b       	sbc	r22, r22
    34fa:	77 0b       	sbc	r23, r23
    34fc:	d5 01       	movw	r26, r10
    34fe:	c4 01       	movw	r24, r8
    3500:	84 0f       	add	r24, r20
    3502:	95 1f       	adc	r25, r21
    3504:	a6 1f       	adc	r26, r22
    3506:	b7 1f       	adc	r27, r23
    3508:	9c 01       	movw	r18, r24
    350a:	ad 01       	movw	r20, r26
    350c:	69 81       	ldd	r22, Y+1	; 0x01
    350e:	7a 81       	ldd	r23, Y+2	; 0x02
    3510:	8b 81       	ldd	r24, Y+3	; 0x03
    3512:	9c 81       	ldd	r25, Y+4	; 0x04
    3514:	0e 94 22 32 	call	0x6444	; 0x6444 <__mulsi3>
    3518:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	5f e3       	ldi	r21, 0x3F	; 63
    3524:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3528:	9b 01       	movw	r18, r22
    352a:	ac 01       	movw	r20, r24
    352c:	c3 01       	movw	r24, r6
    352e:	b2 01       	movw	r22, r4
    3530:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    3534:	2b 01       	movw	r4, r22
    3536:	3c 01       	movw	r6, r24
    3538:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    353c:	81 01       	movw	r16, r2
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	22 16       	cp	r2, r18
    3544:	33 06       	cpc	r3, r19
    3546:	08 f4       	brcc	.+2      	; 0x354a <diff+0x10e>
    3548:	a2 cf       	rjmp	.-188    	; 0x348e <diff+0x52>
    354a:	03 c0       	rjmp	.+6      	; 0x3552 <diff+0x116>
    354c:	41 2c       	mov	r4, r1
    354e:	51 2c       	mov	r5, r1
    3550:	32 01       	movw	r6, r4
    3552:	68 2f       	mov	r22, r24
    3554:	70 e0       	ldi	r23, 0x00	; 0
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    355e:	9b 01       	movw	r18, r22
    3560:	ac 01       	movw	r20, r24
    3562:	c3 01       	movw	r24, r6
    3564:	b2 01       	movw	r22, r4
    3566:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	48 ec       	ldi	r20, 0xC8	; 200
    3570:	52 e4       	ldi	r21, 0x42	; 66
    3572:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3576:	26 96       	adiw	r28, 0x06	; 6
    3578:	cd bf       	out	0x3d, r28	; 61
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	ff 90       	pop	r15
    3586:	ef 90       	pop	r14
    3588:	df 90       	pop	r13
    358a:	cf 90       	pop	r12
    358c:	bf 90       	pop	r11
    358e:	af 90       	pop	r10
    3590:	9f 90       	pop	r9
    3592:	8f 90       	pop	r8
    3594:	7f 90       	pop	r7
    3596:	6f 90       	pop	r6
    3598:	5f 90       	pop	r5
    359a:	4f 90       	pop	r4
    359c:	3f 90       	pop	r3
    359e:	2f 90       	pop	r2
    35a0:	08 95       	ret

000035a2 <data_check>:
    35a2:	3f 92       	push	r3
    35a4:	4f 92       	push	r4
    35a6:	5f 92       	push	r5
    35a8:	6f 92       	push	r6
    35aa:	7f 92       	push	r7
    35ac:	8f 92       	push	r8
    35ae:	9f 92       	push	r9
    35b0:	af 92       	push	r10
    35b2:	bf 92       	push	r11
    35b4:	cf 92       	push	r12
    35b6:	df 92       	push	r13
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <data_check+0x24>
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <data_check+0x26>
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	8c 01       	movw	r16, r24
    35ce:	19 82       	std	Y+1, r1	; 0x01
    35d0:	1a 82       	std	Y+2, r1	; 0x02
    35d2:	c1 2c       	mov	r12, r1
    35d4:	d1 2c       	mov	r13, r1
    35d6:	76 01       	movw	r14, r12
    35d8:	69 81       	ldd	r22, Y+1	; 0x01
    35da:	7a 81       	ldd	r23, Y+2	; 0x02
    35dc:	c8 01       	movw	r24, r16
    35de:	10 dc       	rcall	.-2016   	; 0x2e00 <rb32_get_nth>
    35e0:	4b 01       	movw	r8, r22
    35e2:	5c 01       	movw	r10, r24
    35e4:	21 e6       	ldi	r18, 0x61	; 97
    35e6:	82 1a       	sub	r8, r18
    35e8:	2e ea       	ldi	r18, 0xAE	; 174
    35ea:	92 0a       	sbc	r9, r18
    35ec:	2a e0       	ldi	r18, 0x0A	; 10
    35ee:	a2 0a       	sbc	r10, r18
    35f0:	b1 08       	sbc	r11, r1
    35f2:	2f e7       	ldi	r18, 0x7F	; 127
    35f4:	82 16       	cp	r8, r18
    35f6:	2a e1       	ldi	r18, 0x1A	; 26
    35f8:	92 06       	cpc	r9, r18
    35fa:	26 e0       	ldi	r18, 0x06	; 6
    35fc:	a2 06       	cpc	r10, r18
    35fe:	b1 04       	cpc	r11, r1
    3600:	80 f4       	brcc	.+32     	; 0x3622 <data_check+0x80>
    3602:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 ea       	ldi	r20, 0xA0	; 160
    360c:	50 e4       	ldi	r21, 0x40	; 64
    360e:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3612:	9b 01       	movw	r18, r22
    3614:	ac 01       	movw	r20, r24
    3616:	c7 01       	movw	r24, r14
    3618:	b6 01       	movw	r22, r12
    361a:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    361e:	6b 01       	movw	r12, r22
    3620:	7c 01       	movw	r14, r24
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	9a 81       	ldd	r25, Y+2	; 0x02
    3626:	01 96       	adiw	r24, 0x01	; 1
    3628:	89 83       	std	Y+1, r24	; 0x01
    362a:	9a 83       	std	Y+2, r25	; 0x02
    362c:	05 97       	sbiw	r24, 0x05	; 5
    362e:	a1 f6       	brne	.-88     	; 0x35d8 <data_check+0x36>
    3630:	19 82       	std	Y+1, r1	; 0x01
    3632:	1a 82       	std	Y+2, r1	; 0x02
    3634:	81 2c       	mov	r8, r1
    3636:	91 2c       	mov	r9, r1
    3638:	54 01       	movw	r10, r8
    363a:	69 81       	ldd	r22, Y+1	; 0x01
    363c:	7a 81       	ldd	r23, Y+2	; 0x02
    363e:	c8 01       	movw	r24, r16
    3640:	df db       	rcall	.-2114   	; 0x2e00 <rb32_get_nth>
    3642:	2b 01       	movw	r4, r22
    3644:	3c 01       	movw	r6, r24
    3646:	21 e6       	ldi	r18, 0x61	; 97
    3648:	42 1a       	sub	r4, r18
    364a:	2e ea       	ldi	r18, 0xAE	; 174
    364c:	52 0a       	sbc	r5, r18
    364e:	2a e0       	ldi	r18, 0x0A	; 10
    3650:	62 0a       	sbc	r6, r18
    3652:	71 08       	sbc	r7, r1
    3654:	2f e7       	ldi	r18, 0x7F	; 127
    3656:	42 16       	cp	r4, r18
    3658:	2a e1       	ldi	r18, 0x1A	; 26
    365a:	52 06       	cpc	r5, r18
    365c:	26 e0       	ldi	r18, 0x06	; 6
    365e:	62 06       	cpc	r6, r18
    3660:	71 04       	cpc	r7, r1
    3662:	90 f4       	brcc	.+36     	; 0x3688 <data_check+0xe6>
    3664:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    3668:	a7 01       	movw	r20, r14
    366a:	96 01       	movw	r18, r12
    366c:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    3670:	9b 01       	movw	r18, r22
    3672:	ac 01       	movw	r20, r24
    3674:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3678:	9b 01       	movw	r18, r22
    367a:	ac 01       	movw	r20, r24
    367c:	c5 01       	movw	r24, r10
    367e:	b4 01       	movw	r22, r8
    3680:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    3684:	4b 01       	movw	r8, r22
    3686:	5c 01       	movw	r10, r24
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	9a 81       	ldd	r25, Y+2	; 0x02
    368c:	01 96       	adiw	r24, 0x01	; 1
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	9a 83       	std	Y+2, r25	; 0x02
    3692:	05 97       	sbiw	r24, 0x05	; 5
    3694:	91 f6       	brne	.-92     	; 0x363a <data_check+0x98>
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	5e e3       	ldi	r21, 0x3E	; 62
    369e:	c5 01       	movw	r24, r10
    36a0:	b4 01       	movw	r22, r8
    36a2:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    36a6:	69 83       	std	Y+1, r22	; 0x01
    36a8:	7a 83       	std	Y+2, r23	; 0x02
    36aa:	8b 83       	std	Y+3, r24	; 0x03
    36ac:	9c 83       	std	Y+4, r25	; 0x04
    36ae:	1d 82       	std	Y+5, r1	; 0x05
    36b0:	1e 82       	std	Y+6, r1	; 0x06
    36b2:	31 2c       	mov	r3, r1
    36b4:	41 2c       	mov	r4, r1
    36b6:	51 2c       	mov	r5, r1
    36b8:	32 01       	movw	r6, r4
    36ba:	6d 81       	ldd	r22, Y+5	; 0x05
    36bc:	7e 81       	ldd	r23, Y+6	; 0x06
    36be:	c8 01       	movw	r24, r16
    36c0:	9f db       	rcall	.-2242   	; 0x2e00 <rb32_get_nth>
    36c2:	4b 01       	movw	r8, r22
    36c4:	5c 01       	movw	r10, r24
    36c6:	21 e6       	ldi	r18, 0x61	; 97
    36c8:	82 1a       	sub	r8, r18
    36ca:	2e ea       	ldi	r18, 0xAE	; 174
    36cc:	92 0a       	sbc	r9, r18
    36ce:	2a e0       	ldi	r18, 0x0A	; 10
    36d0:	a2 0a       	sbc	r10, r18
    36d2:	b1 08       	sbc	r11, r1
    36d4:	2f e7       	ldi	r18, 0x7F	; 127
    36d6:	82 16       	cp	r8, r18
    36d8:	2a e1       	ldi	r18, 0x1A	; 26
    36da:	92 06       	cpc	r9, r18
    36dc:	26 e0       	ldi	r18, 0x06	; 6
    36de:	a2 06       	cpc	r10, r18
    36e0:	b1 04       	cpc	r11, r1
    36e2:	50 f5       	brcc	.+84     	; 0x3738 <data_check+0x196>
    36e4:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    36e8:	4b 01       	movw	r8, r22
    36ea:	5c 01       	movw	r10, r24
    36ec:	a7 01       	movw	r20, r14
    36ee:	96 01       	movw	r18, r12
    36f0:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    36f4:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    36f8:	9b 01       	movw	r18, r22
    36fa:	77 23       	and	r23, r23
    36fc:	24 f4       	brge	.+8      	; 0x3706 <data_check+0x164>
    36fe:	22 27       	eor	r18, r18
    3700:	33 27       	eor	r19, r19
    3702:	26 1b       	sub	r18, r22
    3704:	37 0b       	sbc	r19, r23
    3706:	b9 01       	movw	r22, r18
    3708:	33 0f       	add	r19, r19
    370a:	88 0b       	sbc	r24, r24
    370c:	99 0b       	sbc	r25, r25
    370e:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    3712:	9b 01       	movw	r18, r22
    3714:	ac 01       	movw	r20, r24
    3716:	69 81       	ldd	r22, Y+1	; 0x01
    3718:	7a 81       	ldd	r23, Y+2	; 0x02
    371a:	8b 81       	ldd	r24, Y+3	; 0x03
    371c:	9c 81       	ldd	r25, Y+4	; 0x04
    371e:	0e 94 56 30 	call	0x60ac	; 0x60ac <__gesf2>
    3722:	88 23       	and	r24, r24
    3724:	4c f0       	brlt	.+18     	; 0x3738 <data_check+0x196>
    3726:	a5 01       	movw	r20, r10
    3728:	94 01       	movw	r18, r8
    372a:	c3 01       	movw	r24, r6
    372c:	b2 01       	movw	r22, r4
    372e:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    3732:	2b 01       	movw	r4, r22
    3734:	3c 01       	movw	r6, r24
    3736:	33 94       	inc	r3
    3738:	8d 81       	ldd	r24, Y+5	; 0x05
    373a:	9e 81       	ldd	r25, Y+6	; 0x06
    373c:	01 96       	adiw	r24, 0x01	; 1
    373e:	8d 83       	std	Y+5, r24	; 0x05
    3740:	9e 83       	std	Y+6, r25	; 0x06
    3742:	05 97       	sbiw	r24, 0x05	; 5
    3744:	09 f0       	breq	.+2      	; 0x3748 <data_check+0x1a6>
    3746:	b9 cf       	rjmp	.-142    	; 0x36ba <data_check+0x118>
    3748:	33 20       	and	r3, r3
    374a:	69 f0       	breq	.+26     	; 0x3766 <data_check+0x1c4>
    374c:	63 2d       	mov	r22, r3
    374e:	70 e0       	ldi	r23, 0x00	; 0
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    3758:	9b 01       	movw	r18, r22
    375a:	ac 01       	movw	r20, r24
    375c:	c3 01       	movw	r24, r6
    375e:	b2 01       	movw	r22, r4
    3760:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3764:	04 c0       	rjmp	.+8      	; 0x376e <data_check+0x1cc>
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	70 e0       	ldi	r23, 0x00	; 0
    376a:	80 e8       	ldi	r24, 0x80	; 128
    376c:	9f eb       	ldi	r25, 0xBF	; 191
    376e:	26 96       	adiw	r28, 0x06	; 6
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	df 91       	pop	r29
    3776:	cf 91       	pop	r28
    3778:	1f 91       	pop	r17
    377a:	0f 91       	pop	r16
    377c:	ff 90       	pop	r15
    377e:	ef 90       	pop	r14
    3780:	df 90       	pop	r13
    3782:	cf 90       	pop	r12
    3784:	bf 90       	pop	r11
    3786:	af 90       	pop	r10
    3788:	9f 90       	pop	r9
    378a:	8f 90       	pop	r8
    378c:	7f 90       	pop	r7
    378e:	6f 90       	pop	r6
    3790:	5f 90       	pop	r5
    3792:	4f 90       	pop	r4
    3794:	3f 90       	pop	r3
    3796:	08 95       	ret

00003798 <data_collect>:
    3798:	af 92       	push	r10
    379a:	bf 92       	push	r11
    379c:	cf 92       	push	r12
    379e:	df 92       	push	r13
    37a0:	ef 92       	push	r14
    37a2:	ff 92       	push	r15
    37a4:	0f 93       	push	r16
    37a6:	1f 93       	push	r17
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	00 d0       	rcall	.+0      	; 0x37ae <data_collect+0x16>
    37ae:	00 d0       	rcall	.+0      	; 0x37b0 <data_collect+0x18>
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
    37b4:	5c 01       	movw	r10, r24
    37b6:	8b 01       	movw	r16, r22
    37b8:	68 dc       	rcall	.-1840   	; 0x308a <get_pressure>
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 e2       	ldi	r20, 0x20	; 32
    37c0:	51 e4       	ldi	r21, 0x41	; 65
    37c2:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    37c6:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    37ca:	69 83       	std	Y+1, r22	; 0x01
    37cc:	7a 83       	std	Y+2, r23	; 0x02
    37ce:	8b 83       	std	Y+3, r24	; 0x03
    37d0:	9c 83       	std	Y+4, r25	; 0x04
    37d2:	41 e0       	ldi	r20, 0x01	; 1
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	be 01       	movw	r22, r28
    37d8:	6f 5f       	subi	r22, 0xFF	; 255
    37da:	7f 4f       	sbci	r23, 0xFF	; 255
    37dc:	c8 01       	movw	r24, r16
    37de:	b5 da       	rcall	.-2710   	; 0x2d4a <rb32_write>
    37e0:	c8 01       	movw	r24, r16
    37e2:	df de       	rcall	.-578    	; 0x35a2 <data_check>
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	40 e2       	ldi	r20, 0x20	; 32
    37ea:	51 e4       	ldi	r21, 0x41	; 65
    37ec:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    37f0:	6b 01       	movw	r12, r22
    37f2:	7c 01       	movw	r14, r24
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e8       	ldi	r20, 0x80	; 128
    37fa:	5f eb       	ldi	r21, 0xBF	; 191
    37fc:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__cmpsf2>
    3800:	88 23       	and	r24, r24
    3802:	d1 f1       	breq	.+116    	; 0x3878 <data_collect+0xe0>
    3804:	c0 92 20 22 	sts	0x2220, r12	; 0x802220 <press>
    3808:	d0 92 21 22 	sts	0x2221, r13	; 0x802221 <press+0x1>
    380c:	e0 92 22 22 	sts	0x2222, r14	; 0x802222 <press+0x2>
    3810:	f0 92 23 22 	sts	0x2223, r15	; 0x802223 <press+0x3>
    3814:	c7 01       	movw	r24, r14
    3816:	b6 01       	movw	r22, r12
    3818:	7b dd       	rcall	.-1290   	; 0x3310 <get_altitude>
    381a:	60 93 18 22 	sts	0x2218, r22	; 0x802218 <alt>
    381e:	70 93 19 22 	sts	0x2219, r23	; 0x802219 <alt+0x1>
    3822:	80 93 1a 22 	sts	0x221A, r24	; 0x80221a <alt+0x2>
    3826:	90 93 1b 22 	sts	0x221B, r25	; 0x80221b <alt+0x3>
    382a:	60 91 18 22 	lds	r22, 0x2218	; 0x802218 <alt>
    382e:	70 91 19 22 	lds	r23, 0x2219	; 0x802219 <alt+0x1>
    3832:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <alt+0x2>
    3836:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <alt+0x3>
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	48 ec       	ldi	r20, 0xC8	; 200
    3840:	52 e4       	ldi	r21, 0x42	; 66
    3842:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3846:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    384a:	6d 83       	std	Y+5, r22	; 0x05
    384c:	7e 83       	std	Y+6, r23	; 0x06
    384e:	41 e0       	ldi	r20, 0x01	; 1
    3850:	50 e0       	ldi	r21, 0x00	; 0
    3852:	be 01       	movw	r22, r28
    3854:	6b 5f       	subi	r22, 0xFB	; 251
    3856:	7f 4f       	sbci	r23, 0xFF	; 255
    3858:	c5 01       	movw	r24, r10
    385a:	01 da       	rcall	.-3070   	; 0x2c5e <rb16_write>
    385c:	60 91 1f 20 	lds	r22, 0x201F	; 0x80201f <rate>
    3860:	70 91 20 20 	lds	r23, 0x2020	; 0x802020 <rate+0x1>
    3864:	c5 01       	movw	r24, r10
    3866:	ea dd       	rcall	.-1068   	; 0x343c <diff>
    3868:	60 93 10 22 	sts	0x2210, r22	; 0x802210 <velocity>
    386c:	70 93 11 22 	sts	0x2211, r23	; 0x802211 <velocity+0x1>
    3870:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <velocity+0x2>
    3874:	90 93 13 22 	sts	0x2213, r25	; 0x802213 <velocity+0x3>
    3878:	26 96       	adiw	r28, 0x06	; 6
    387a:	cd bf       	out	0x3d, r28	; 61
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	df 91       	pop	r29
    3880:	cf 91       	pop	r28
    3882:	1f 91       	pop	r17
    3884:	0f 91       	pop	r16
    3886:	ff 90       	pop	r15
    3888:	ef 90       	pop	r14
    388a:	df 90       	pop	r13
    388c:	cf 90       	pop	r12
    388e:	bf 90       	pop	r11
    3890:	af 90       	pop	r10
    3892:	08 95       	ret

00003894 <imu_read>:
    3894:	4f 92       	push	r4
    3896:	5f 92       	push	r5
    3898:	6f 92       	push	r6
    389a:	7f 92       	push	r7
    389c:	8f 92       	push	r8
    389e:	9f 92       	push	r9
    38a0:	af 92       	push	r10
    38a2:	bf 92       	push	r11
    38a4:	cf 92       	push	r12
    38a6:	df 92       	push	r13
    38a8:	ef 92       	push	r14
    38aa:	ff 92       	push	r15
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	00 d0       	rcall	.+0      	; 0x38b2 <imu_read+0x1e>
    38b2:	00 d0       	rcall	.+0      	; 0x38b4 <imu_read+0x20>
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	0e 94 15 14 	call	0x282a	; 0x282a <imu_update>
    38bc:	0e 94 28 14 	call	0x2850	; 0x2850 <imu_roll>
    38c0:	20 91 32 22 	lds	r18, 0x2232	; 0x802232 <ref_roll>
    38c4:	30 91 33 22 	lds	r19, 0x2233	; 0x802233 <ref_roll+0x1>
    38c8:	40 91 34 22 	lds	r20, 0x2234	; 0x802234 <ref_roll+0x2>
    38cc:	50 91 35 22 	lds	r21, 0x2235	; 0x802235 <ref_roll+0x3>
    38d0:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    38d4:	6b 01       	movw	r12, r22
    38d6:	7c 01       	movw	r14, r24
    38d8:	0e 94 31 14 	call	0x2862	; 0x2862 <imu_pitch>
    38dc:	20 91 21 20 	lds	r18, 0x2021	; 0x802021 <ref_pitch>
    38e0:	30 91 22 20 	lds	r19, 0x2022	; 0x802022 <ref_pitch+0x1>
    38e4:	40 91 23 20 	lds	r20, 0x2023	; 0x802023 <ref_pitch+0x2>
    38e8:	50 91 24 20 	lds	r21, 0x2024	; 0x802024 <ref_pitch+0x3>
    38ec:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    38f0:	4b 01       	movw	r8, r22
    38f2:	5c 01       	movw	r10, r24
    38f4:	0e 94 3a 14 	call	0x2874	; 0x2874 <imu_heading>
    38f8:	2b 01       	movw	r4, r22
    38fa:	3c 01       	movw	r6, r24
    38fc:	c7 01       	movw	r24, r14
    38fe:	b6 01       	movw	r22, r12
    3900:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    3904:	6d 83       	std	Y+5, r22	; 0x05
    3906:	7e 83       	std	Y+6, r23	; 0x06
    3908:	77 23       	and	r23, r23
    390a:	34 f4       	brge	.+12     	; 0x3918 <imu_read+0x84>
    390c:	22 27       	eor	r18, r18
    390e:	33 27       	eor	r19, r19
    3910:	26 1b       	sub	r18, r22
    3912:	37 0b       	sbc	r19, r23
    3914:	2d 83       	std	Y+5, r18	; 0x05
    3916:	3e 83       	std	Y+6, r19	; 0x06
    3918:	8d 81       	ldd	r24, Y+5	; 0x05
    391a:	9e 81       	ldd	r25, Y+6	; 0x06
    391c:	85 3b       	cpi	r24, 0xB5	; 181
    391e:	91 05       	cpc	r25, r1
    3920:	24 f1       	brlt	.+72     	; 0x396a <imu_read+0xd6>
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	44 eb       	ldi	r20, 0xB4	; 180
    3928:	53 e4       	ldi	r21, 0x43	; 67
    392a:	c7 01       	movw	r24, r14
    392c:	b6 01       	movw	r22, r12
    392e:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3932:	69 83       	std	Y+1, r22	; 0x01
    3934:	7a 83       	std	Y+2, r23	; 0x02
    3936:	8b 83       	std	Y+3, r24	; 0x03
    3938:	9c 83       	std	Y+4, r25	; 0x04
    393a:	2d 81       	ldd	r18, Y+5	; 0x05
    393c:	3e 81       	ldd	r19, Y+6	; 0x06
    393e:	b9 01       	movw	r22, r18
    3940:	33 0f       	add	r19, r19
    3942:	88 0b       	sbc	r24, r24
    3944:	99 0b       	sbc	r25, r25
    3946:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    394a:	9b 01       	movw	r18, r22
    394c:	ac 01       	movw	r20, r24
    394e:	69 81       	ldd	r22, Y+1	; 0x01
    3950:	7a 81       	ldd	r23, Y+2	; 0x02
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	9c 81       	ldd	r25, Y+4	; 0x04
    3956:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    395a:	9b 01       	movw	r18, r22
    395c:	ac 01       	movw	r20, r24
    395e:	c7 01       	movw	r24, r14
    3960:	b6 01       	movw	r22, r12
    3962:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    3966:	6b 01       	movw	r12, r22
    3968:	7c 01       	movw	r14, r24
    396a:	c5 01       	movw	r24, r10
    396c:	b4 01       	movw	r22, r8
    396e:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    3972:	6d 83       	std	Y+5, r22	; 0x05
    3974:	7e 83       	std	Y+6, r23	; 0x06
    3976:	77 23       	and	r23, r23
    3978:	34 f4       	brge	.+12     	; 0x3986 <imu_read+0xf2>
    397a:	22 27       	eor	r18, r18
    397c:	33 27       	eor	r19, r19
    397e:	26 1b       	sub	r18, r22
    3980:	37 0b       	sbc	r19, r23
    3982:	2d 83       	std	Y+5, r18	; 0x05
    3984:	3e 83       	std	Y+6, r19	; 0x06
    3986:	8d 81       	ldd	r24, Y+5	; 0x05
    3988:	9e 81       	ldd	r25, Y+6	; 0x06
    398a:	8b 35       	cpi	r24, 0x5B	; 91
    398c:	91 05       	cpc	r25, r1
    398e:	24 f1       	brlt	.+72     	; 0x39d8 <imu_read+0x144>
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	44 e3       	ldi	r20, 0x34	; 52
    3996:	53 e4       	ldi	r21, 0x43	; 67
    3998:	c5 01       	movw	r24, r10
    399a:	b4 01       	movw	r22, r8
    399c:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    39a0:	69 83       	std	Y+1, r22	; 0x01
    39a2:	7a 83       	std	Y+2, r23	; 0x02
    39a4:	8b 83       	std	Y+3, r24	; 0x03
    39a6:	9c 83       	std	Y+4, r25	; 0x04
    39a8:	2d 81       	ldd	r18, Y+5	; 0x05
    39aa:	3e 81       	ldd	r19, Y+6	; 0x06
    39ac:	b9 01       	movw	r22, r18
    39ae:	33 0f       	add	r19, r19
    39b0:	88 0b       	sbc	r24, r24
    39b2:	99 0b       	sbc	r25, r25
    39b4:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    39b8:	9b 01       	movw	r18, r22
    39ba:	ac 01       	movw	r20, r24
    39bc:	69 81       	ldd	r22, Y+1	; 0x01
    39be:	7a 81       	ldd	r23, Y+2	; 0x02
    39c0:	8b 81       	ldd	r24, Y+3	; 0x03
    39c2:	9c 81       	ldd	r25, Y+4	; 0x04
    39c4:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    39c8:	9b 01       	movw	r18, r22
    39ca:	ac 01       	movw	r20, r24
    39cc:	c5 01       	movw	r24, r10
    39ce:	b4 01       	movw	r22, r8
    39d0:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    39d4:	4b 01       	movw	r8, r22
    39d6:	5c 01       	movw	r10, r24
    39d8:	c7 01       	movw	r24, r14
    39da:	b6 01       	movw	r22, r12
    39dc:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    39e0:	6d 54       	subi	r22, 0x4D	; 77
    39e2:	7f 4f       	sbci	r23, 0xFF	; 255
    39e4:	67 36       	cpi	r22, 0x67	; 103
    39e6:	71 40       	sbci	r23, 0x01	; 1
    39e8:	08 f5       	brcc	.+66     	; 0x3a2c <imu_read+0x198>
    39ea:	c5 01       	movw	r24, r10
    39ec:	b4 01       	movw	r22, r8
    39ee:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    39f2:	67 5a       	subi	r22, 0xA7	; 167
    39f4:	7f 4f       	sbci	r23, 0xFF	; 255
    39f6:	63 3b       	cpi	r22, 0xB3	; 179
    39f8:	71 05       	cpc	r23, r1
    39fa:	c0 f4       	brcc	.+48     	; 0x3a2c <imu_read+0x198>
    39fc:	c0 92 f6 21 	sts	0x21F6, r12	; 0x8021f6 <roll>
    3a00:	d0 92 f7 21 	sts	0x21F7, r13	; 0x8021f7 <roll+0x1>
    3a04:	e0 92 f8 21 	sts	0x21F8, r14	; 0x8021f8 <roll+0x2>
    3a08:	f0 92 f9 21 	sts	0x21F9, r15	; 0x8021f9 <roll+0x3>
    3a0c:	80 92 fa 21 	sts	0x21FA, r8	; 0x8021fa <pitch>
    3a10:	90 92 fb 21 	sts	0x21FB, r9	; 0x8021fb <pitch+0x1>
    3a14:	a0 92 fc 21 	sts	0x21FC, r10	; 0x8021fc <pitch+0x2>
    3a18:	b0 92 fd 21 	sts	0x21FD, r11	; 0x8021fd <pitch+0x3>
    3a1c:	40 92 ee 21 	sts	0x21EE, r4	; 0x8021ee <angle>
    3a20:	50 92 ef 21 	sts	0x21EF, r5	; 0x8021ef <angle+0x1>
    3a24:	60 92 f0 21 	sts	0x21F0, r6	; 0x8021f0 <angle+0x2>
    3a28:	70 92 f1 21 	sts	0x21F1, r7	; 0x8021f1 <angle+0x3>
    3a2c:	26 96       	adiw	r28, 0x06	; 6
    3a2e:	cd bf       	out	0x3d, r28	; 61
    3a30:	de bf       	out	0x3e, r29	; 62
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	ff 90       	pop	r15
    3a38:	ef 90       	pop	r14
    3a3a:	df 90       	pop	r13
    3a3c:	cf 90       	pop	r12
    3a3e:	bf 90       	pop	r11
    3a40:	af 90       	pop	r10
    3a42:	9f 90       	pop	r9
    3a44:	8f 90       	pop	r8
    3a46:	7f 90       	pop	r7
    3a48:	6f 90       	pop	r6
    3a4a:	5f 90       	pop	r5
    3a4c:	4f 90       	pop	r4
    3a4e:	08 95       	ret

00003a50 <pid_val>:
    3a50:	4f 92       	push	r4
    3a52:	5f 92       	push	r5
    3a54:	6f 92       	push	r6
    3a56:	7f 92       	push	r7
    3a58:	af 92       	push	r10
    3a5a:	bf 92       	push	r11
    3a5c:	cf 92       	push	r12
    3a5e:	df 92       	push	r13
    3a60:	ef 92       	push	r14
    3a62:	ff 92       	push	r15
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
    3a6c:	1f 92       	push	r1
    3a6e:	1f 92       	push	r1
    3a70:	cd b7       	in	r28, 0x3d	; 61
    3a72:	de b7       	in	r29, 0x3e	; 62
    3a74:	5c 01       	movw	r10, r24
    3a76:	60 91 ee 21 	lds	r22, 0x21EE	; 0x8021ee <angle>
    3a7a:	70 91 ef 21 	lds	r23, 0x21EF	; 0x8021ef <angle+0x1>
    3a7e:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <angle+0x2>
    3a82:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <angle+0x3>
    3a86:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <ref_yaw>
    3a8a:	30 91 26 20 	lds	r19, 0x2026	; 0x802026 <ref_yaw+0x1>
    3a8e:	40 91 27 20 	lds	r20, 0x2027	; 0x802027 <ref_yaw+0x2>
    3a92:	50 91 28 20 	lds	r21, 0x2028	; 0x802028 <ref_yaw+0x3>
    3a96:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    3a9a:	6b 01       	movw	r12, r22
    3a9c:	7c 01       	movw	r14, r24
    3a9e:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    3aa2:	8b 01       	movw	r16, r22
    3aa4:	77 23       	and	r23, r23
    3aa6:	24 f4       	brge	.+8      	; 0x3ab0 <pid_val+0x60>
    3aa8:	00 27       	eor	r16, r16
    3aaa:	11 27       	eor	r17, r17
    3aac:	06 1b       	sub	r16, r22
    3aae:	17 0b       	sbc	r17, r23
    3ab0:	05 3b       	cpi	r16, 0xB5	; 181
    3ab2:	11 05       	cpc	r17, r1
    3ab4:	f4 f0       	brlt	.+60     	; 0x3af2 <pid_val+0xa2>
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	44 eb       	ldi	r20, 0xB4	; 180
    3abc:	53 e4       	ldi	r21, 0x43	; 67
    3abe:	c7 01       	movw	r24, r14
    3ac0:	b6 01       	movw	r22, r12
    3ac2:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3ac6:	2b 01       	movw	r4, r22
    3ac8:	3c 01       	movw	r6, r24
    3aca:	b8 01       	movw	r22, r16
    3acc:	11 0f       	add	r17, r17
    3ace:	88 0b       	sbc	r24, r24
    3ad0:	99 0b       	sbc	r25, r25
    3ad2:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    3ad6:	9b 01       	movw	r18, r22
    3ad8:	ac 01       	movw	r20, r24
    3ada:	c3 01       	movw	r24, r6
    3adc:	b2 01       	movw	r22, r4
    3ade:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3ae2:	9b 01       	movw	r18, r22
    3ae4:	ac 01       	movw	r20, r24
    3ae6:	c7 01       	movw	r24, r14
    3ae8:	b6 01       	movw	r22, r12
    3aea:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    3aee:	6b 01       	movw	r12, r22
    3af0:	7c 01       	movw	r14, r24
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	48 ec       	ldi	r20, 0xC8	; 200
    3af8:	52 e4       	ldi	r21, 0x42	; 66
    3afa:	c7 01       	movw	r24, r14
    3afc:	b6 01       	movw	r22, r12
    3afe:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3b02:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    3b06:	69 83       	std	Y+1, r22	; 0x01
    3b08:	7a 83       	std	Y+2, r23	; 0x02
    3b0a:	41 e0       	ldi	r20, 0x01	; 1
    3b0c:	50 e0       	ldi	r21, 0x00	; 0
    3b0e:	be 01       	movw	r22, r28
    3b10:	6f 5f       	subi	r22, 0xFF	; 255
    3b12:	7f 4f       	sbci	r23, 0xFF	; 255
    3b14:	c5 01       	movw	r24, r10
    3b16:	a3 d8       	rcall	.-3770   	; 0x2c5e <rb16_write>
    3b18:	0f 90       	pop	r0
    3b1a:	0f 90       	pop	r0
    3b1c:	df 91       	pop	r29
    3b1e:	cf 91       	pop	r28
    3b20:	1f 91       	pop	r17
    3b22:	0f 91       	pop	r16
    3b24:	ff 90       	pop	r15
    3b26:	ef 90       	pop	r14
    3b28:	df 90       	pop	r13
    3b2a:	cf 90       	pop	r12
    3b2c:	bf 90       	pop	r11
    3b2e:	af 90       	pop	r10
    3b30:	7f 90       	pop	r7
    3b32:	6f 90       	pop	r6
    3b34:	5f 90       	pop	r5
    3b36:	4f 90       	pop	r4
    3b38:	08 95       	ret

00003b3a <state_check>:
    3b3a:	80 91 47 22 	lds	r24, 0x2247	; 0x802247 <state>
    3b3e:	81 30       	cpi	r24, 0x01	; 1
    3b40:	81 f1       	breq	.+96     	; 0x3ba2 <state_check+0x68>
    3b42:	38 f0       	brcs	.+14     	; 0x3b52 <state_check+0x18>
    3b44:	82 30       	cpi	r24, 0x02	; 2
    3b46:	09 f4       	brne	.+2      	; 0x3b4a <state_check+0x10>
    3b48:	57 c0       	rjmp	.+174    	; 0x3bf8 <state_check+0xbe>
    3b4a:	83 30       	cpi	r24, 0x03	; 3
    3b4c:	09 f4       	brne	.+2      	; 0x3b50 <state_check+0x16>
    3b4e:	af c0       	rjmp	.+350    	; 0x3cae <state_check+0x174>
    3b50:	7e c0       	rjmp	.+252    	; 0x3c4e <state_check+0x114>
    3b52:	60 91 10 22 	lds	r22, 0x2210	; 0x802210 <velocity>
    3b56:	70 91 11 22 	lds	r23, 0x2211	; 0x802211 <velocity+0x1>
    3b5a:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <velocity+0x2>
    3b5e:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <velocity+0x3>
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	40 ea       	ldi	r20, 0xA0	; 160
    3b68:	50 e4       	ldi	r21, 0x40	; 64
    3b6a:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__cmpsf2>
    3b6e:	88 23       	and	r24, r24
    3b70:	0c f0       	brlt	.+2      	; 0x3b74 <state_check+0x3a>
    3b72:	9d c0       	rjmp	.+314    	; 0x3cae <state_check+0x174>
    3b74:	60 91 18 22 	lds	r22, 0x2218	; 0x802218 <alt>
    3b78:	70 91 19 22 	lds	r23, 0x2219	; 0x802219 <alt+0x1>
    3b7c:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <alt+0x2>
    3b80:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <alt+0x3>
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	41 ee       	ldi	r20, 0xE1	; 225
    3b8a:	53 e4       	ldi	r21, 0x43	; 67
    3b8c:	0e 94 56 30 	call	0x60ac	; 0x60ac <__gesf2>
    3b90:	18 16       	cp	r1, r24
    3b92:	0c f0       	brlt	.+2      	; 0x3b96 <state_check+0x5c>
    3b94:	8c c0       	rjmp	.+280    	; 0x3cae <state_check+0x174>
    3b96:	80 91 47 22 	lds	r24, 0x2247	; 0x802247 <state>
    3b9a:	8f 5f       	subi	r24, 0xFF	; 255
    3b9c:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <state>
    3ba0:	08 95       	ret
    3ba2:	60 91 10 22 	lds	r22, 0x2210	; 0x802210 <velocity>
    3ba6:	70 91 11 22 	lds	r23, 0x2211	; 0x802211 <velocity+0x1>
    3baa:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <velocity+0x2>
    3bae:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <velocity+0x3>
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 ea       	ldi	r20, 0xA0	; 160
    3bb8:	50 e4       	ldi	r21, 0x40	; 64
    3bba:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__cmpsf2>
    3bbe:	88 23       	and	r24, r24
    3bc0:	84 f4       	brge	.+32     	; 0x3be2 <state_check+0xa8>
    3bc2:	60 91 18 22 	lds	r22, 0x2218	; 0x802218 <alt>
    3bc6:	70 91 19 22 	lds	r23, 0x2219	; 0x802219 <alt+0x1>
    3bca:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <alt+0x2>
    3bce:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <alt+0x3>
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	41 ee       	ldi	r20, 0xE1	; 225
    3bd8:	53 e4       	ldi	r21, 0x43	; 67
    3bda:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__cmpsf2>
    3bde:	88 23       	and	r24, r24
    3be0:	2c f0       	brlt	.+10     	; 0x3bec <state_check+0xb2>
    3be2:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <released>
    3be6:	88 23       	and	r24, r24
    3be8:	09 f4       	brne	.+2      	; 0x3bec <state_check+0xb2>
    3bea:	61 c0       	rjmp	.+194    	; 0x3cae <state_check+0x174>
    3bec:	80 91 47 22 	lds	r24, 0x2247	; 0x802247 <state>
    3bf0:	8f 5f       	subi	r24, 0xFF	; 255
    3bf2:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <state>
    3bf6:	08 95       	ret
    3bf8:	60 91 10 22 	lds	r22, 0x2210	; 0x802210 <velocity>
    3bfc:	70 91 11 22 	lds	r23, 0x2211	; 0x802211 <velocity+0x1>
    3c00:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <velocity+0x2>
    3c04:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <velocity+0x3>
    3c08:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    3c0c:	9b 01       	movw	r18, r22
    3c0e:	77 23       	and	r23, r23
    3c10:	24 f4       	brge	.+8      	; 0x3c1a <state_check+0xe0>
    3c12:	22 27       	eor	r18, r18
    3c14:	33 27       	eor	r19, r19
    3c16:	26 1b       	sub	r18, r22
    3c18:	37 0b       	sbc	r19, r23
    3c1a:	25 30       	cpi	r18, 0x05	; 5
    3c1c:	31 05       	cpc	r19, r1
    3c1e:	0c f0       	brlt	.+2      	; 0x3c22 <state_check+0xe8>
    3c20:	46 c0       	rjmp	.+140    	; 0x3cae <state_check+0x174>
    3c22:	60 91 18 22 	lds	r22, 0x2218	; 0x802218 <alt>
    3c26:	70 91 19 22 	lds	r23, 0x2219	; 0x802219 <alt+0x1>
    3c2a:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <alt+0x2>
    3c2e:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <alt+0x3>
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e7       	ldi	r20, 0x70	; 112
    3c38:	51 e4       	ldi	r21, 0x41	; 65
    3c3a:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__cmpsf2>
    3c3e:	88 23       	and	r24, r24
    3c40:	b4 f5       	brge	.+108    	; 0x3cae <state_check+0x174>
    3c42:	80 91 47 22 	lds	r24, 0x2247	; 0x802247 <state>
    3c46:	8f 5f       	subi	r24, 0xFF	; 255
    3c48:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <state>
    3c4c:	08 95       	ret
    3c4e:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <released>
    3c52:	88 23       	and	r24, r24
    3c54:	b9 f0       	breq	.+46     	; 0x3c84 <state_check+0x14a>
    3c56:	82 e0       	ldi	r24, 0x02	; 2
    3c58:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <state>
    3c5c:	60 91 18 22 	lds	r22, 0x2218	; 0x802218 <alt>
    3c60:	70 91 19 22 	lds	r23, 0x2219	; 0x802219 <alt+0x1>
    3c64:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <alt+0x2>
    3c68:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <alt+0x3>
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e2       	ldi	r20, 0x20	; 32
    3c72:	51 e4       	ldi	r21, 0x41	; 65
    3c74:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__cmpsf2>
    3c78:	88 23       	and	r24, r24
    3c7a:	cc f4       	brge	.+50     	; 0x3cae <state_check+0x174>
    3c7c:	83 e0       	ldi	r24, 0x03	; 3
    3c7e:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <state>
    3c82:	08 95       	ret
    3c84:	10 92 47 22 	sts	0x2247, r1	; 0x802247 <state>
    3c88:	60 91 10 22 	lds	r22, 0x2210	; 0x802210 <velocity>
    3c8c:	70 91 11 22 	lds	r23, 0x2211	; 0x802211 <velocity+0x1>
    3c90:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <velocity+0x2>
    3c94:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <velocity+0x3>
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 ea       	ldi	r20, 0xA0	; 160
    3c9e:	50 e4       	ldi	r21, 0x40	; 64
    3ca0:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__cmpsf2>
    3ca4:	88 23       	and	r24, r24
    3ca6:	1c f4       	brge	.+6      	; 0x3cae <state_check+0x174>
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <state>
    3cae:	08 95       	ret

00003cb0 <release_servo_init>:
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	84 e0       	ldi	r24, 0x04	; 4
    3cb4:	0f d9       	rcall	.-3554   	; 0x2ed4 <sysclk_enable_module>
    3cb6:	64 e0       	ldi	r22, 0x04	; 4
    3cb8:	84 e0       	ldi	r24, 0x04	; 4
    3cba:	0c d9       	rcall	.-3560   	; 0x2ed4 <sysclk_enable_module>
    3cbc:	e0 e6       	ldi	r30, 0x60	; 96
    3cbe:	f6 e0       	ldi	r31, 0x06	; 6
    3cc0:	80 81       	ld	r24, Z
    3cc2:	87 60       	ori	r24, 0x07	; 7
    3cc4:	80 83       	st	Z, r24
    3cc6:	e0 e0       	ldi	r30, 0x00	; 0
    3cc8:	f9 e0       	ldi	r31, 0x09	; 9
    3cca:	85 e0       	ldi	r24, 0x05	; 5
    3ccc:	80 83       	st	Z, r24
    3cce:	83 e2       	ldi	r24, 0x23	; 35
    3cd0:	81 83       	std	Z+1, r24	; 0x01
    3cd2:	80 e1       	ldi	r24, 0x10	; 16
    3cd4:	97 e2       	ldi	r25, 0x27	; 39
    3cd6:	86 a3       	std	Z+38, r24	; 0x26
    3cd8:	97 a3       	std	Z+39, r25	; 0x27
    3cda:	86 a1       	ldd	r24, Z+38	; 0x26
    3cdc:	97 a1       	ldd	r25, Z+39	; 0x27
    3cde:	88 55       	subi	r24, 0x58	; 88
    3ce0:	92 40       	sbci	r25, 0x02	; 2
    3ce2:	84 a7       	std	Z+44, r24	; 0x2c
    3ce4:	95 a7       	std	Z+45, r25	; 0x2d
    3ce6:	08 95       	ret

00003ce8 <fin_servo_init>:
    3ce8:	e0 e0       	ldi	r30, 0x00	; 0
    3cea:	f6 e0       	ldi	r31, 0x06	; 6
    3cec:	80 81       	ld	r24, Z
    3cee:	84 60       	ori	r24, 0x04	; 4
    3cf0:	80 83       	st	Z, r24
    3cf2:	84 81       	ldd	r24, Z+4	; 0x04
    3cf4:	84 60       	ori	r24, 0x04	; 4
    3cf6:	84 83       	std	Z+4, r24	; 0x04
    3cf8:	e0 e0       	ldi	r30, 0x00	; 0
    3cfa:	f9 e0       	ldi	r31, 0x09	; 9
    3cfc:	81 81       	ldd	r24, Z+1	; 0x01
    3cfe:	80 65       	ori	r24, 0x50	; 80
    3d00:	81 83       	std	Z+1, r24	; 0x01
    3d02:	86 a1       	ldd	r24, Z+38	; 0x26
    3d04:	97 a1       	ldd	r25, Z+39	; 0x27
    3d06:	89 5e       	subi	r24, 0xE9	; 233
    3d08:	92 40       	sbci	r25, 0x02	; 2
    3d0a:	80 a7       	std	Z+40, r24	; 0x28
    3d0c:	91 a7       	std	Z+41, r25	; 0x29
    3d0e:	80 a5       	ldd	r24, Z+40	; 0x28
    3d10:	91 a5       	ldd	r25, Z+41	; 0x29
    3d12:	82 a7       	std	Z+42, r24	; 0x2a
    3d14:	93 a7       	std	Z+43, r25	; 0x2b
    3d16:	08 95       	ret

00003d18 <servo_pid>:
    3d18:	4f 92       	push	r4
    3d1a:	5f 92       	push	r5
    3d1c:	6f 92       	push	r6
    3d1e:	7f 92       	push	r7
    3d20:	8f 92       	push	r8
    3d22:	9f 92       	push	r9
    3d24:	af 92       	push	r10
    3d26:	bf 92       	push	r11
    3d28:	cf 92       	push	r12
    3d2a:	df 92       	push	r13
    3d2c:	ef 92       	push	r14
    3d2e:	ff 92       	push	r15
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	7c 01       	movw	r14, r24
    3d3a:	c0 e0       	ldi	r28, 0x00	; 0
    3d3c:	d0 e0       	ldi	r29, 0x00	; 0
    3d3e:	00 e0       	ldi	r16, 0x00	; 0
    3d40:	10 e0       	ldi	r17, 0x00	; 0
    3d42:	be 01       	movw	r22, r28
    3d44:	c7 01       	movw	r24, r14
    3d46:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <rb16_get_nth>
    3d4a:	08 0f       	add	r16, r24
    3d4c:	19 1f       	adc	r17, r25
    3d4e:	21 96       	adiw	r28, 0x01	; 1
    3d50:	ca 30       	cpi	r28, 0x0A	; 10
    3d52:	d1 05       	cpc	r29, r1
    3d54:	b1 f7       	brne	.-20     	; 0x3d42 <servo_pid+0x2a>
    3d56:	60 e0       	ldi	r22, 0x00	; 0
    3d58:	70 e0       	ldi	r23, 0x00	; 0
    3d5a:	c7 01       	movw	r24, r14
    3d5c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <rb16_get_nth>
    3d60:	6c 01       	movw	r12, r24
    3d62:	60 91 1f 20 	lds	r22, 0x201F	; 0x80201f <rate>
    3d66:	70 91 20 20 	lds	r23, 0x2020	; 0x802020 <rate+0x1>
    3d6a:	c7 01       	movw	r24, r14
    3d6c:	67 db       	rcall	.-2354   	; 0x343c <diff>
    3d6e:	4b 01       	movw	r8, r22
    3d70:	5c 01       	movw	r10, r24
    3d72:	0f 2e       	mov	r0, r31
    3d74:	e1 2c       	mov	r14, r1
    3d76:	f9 e0       	ldi	r31, 0x09	; 9
    3d78:	ff 2e       	mov	r15, r31
    3d7a:	f0 2d       	mov	r31, r0
    3d7c:	f7 01       	movw	r30, r14
    3d7e:	c6 a1       	ldd	r28, Z+38	; 0x26
    3d80:	d7 a1       	ldd	r29, Z+39	; 0x27
    3d82:	25 96       	adiw	r28, 0x05	; 5
    3d84:	b6 01       	movw	r22, r12
    3d86:	dd 0c       	add	r13, r13
    3d88:	88 0b       	sbc	r24, r24
    3d8a:	99 0b       	sbc	r25, r25
    3d8c:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    3d90:	23 e3       	ldi	r18, 0x33	; 51
    3d92:	33 e3       	ldi	r19, 0x33	; 51
    3d94:	43 e3       	ldi	r20, 0x33	; 51
    3d96:	5f e3       	ldi	r21, 0x3F	; 63
    3d98:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	48 ec       	ldi	r20, 0xC8	; 200
    3da2:	52 e4       	ldi	r21, 0x42	; 66
    3da4:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3da8:	2b 01       	movw	r4, r22
    3daa:	3c 01       	movw	r6, r24
    3dac:	b8 01       	movw	r22, r16
    3dae:	11 0f       	add	r17, r17
    3db0:	88 0b       	sbc	r24, r24
    3db2:	99 0b       	sbc	r25, r25
    3db4:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__floatsisf>
    3db8:	2d ec       	ldi	r18, 0xCD	; 205
    3dba:	3c ec       	ldi	r19, 0xCC	; 204
    3dbc:	4c ec       	ldi	r20, 0xCC	; 204
    3dbe:	5d e3       	ldi	r21, 0x3D	; 61
    3dc0:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	48 ec       	ldi	r20, 0xC8	; 200
    3dca:	52 e4       	ldi	r21, 0x42	; 66
    3dcc:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3dd0:	9b 01       	movw	r18, r22
    3dd2:	ac 01       	movw	r20, r24
    3dd4:	c3 01       	movw	r24, r6
    3dd6:	b2 01       	movw	r22, r4
    3dd8:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    3ddc:	2b 01       	movw	r4, r22
    3dde:	3c 01       	movw	r6, r24
    3de0:	23 e3       	ldi	r18, 0x33	; 51
    3de2:	33 e3       	ldi	r19, 0x33	; 51
    3de4:	43 eb       	ldi	r20, 0xB3	; 179
    3de6:	5e eb       	ldi	r21, 0xBE	; 190
    3de8:	c5 01       	movw	r24, r10
    3dea:	b4 01       	movw	r22, r8
    3dec:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3df0:	9b 01       	movw	r18, r22
    3df2:	ac 01       	movw	r20, r24
    3df4:	c3 01       	movw	r24, r6
    3df6:	b2 01       	movw	r22, r4
    3df8:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e8       	ldi	r19, 0x80	; 128
    3e00:	4b e3       	ldi	r20, 0x3B	; 59
    3e02:	54 e4       	ldi	r21, 0x44	; 68
    3e04:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    3e08:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__fixunssfsi>
    3e0c:	c6 1b       	sub	r28, r22
    3e0e:	d7 0b       	sbc	r29, r23
    3e10:	f7 01       	movw	r30, r14
    3e12:	c0 a7       	std	Z+40, r28	; 0x28
    3e14:	d1 a7       	std	Z+41, r29	; 0x29
    3e16:	80 a5       	ldd	r24, Z+40	; 0x28
    3e18:	91 a5       	ldd	r25, Z+41	; 0x29
    3e1a:	82 a7       	std	Z+42, r24	; 0x2a
    3e1c:	93 a7       	std	Z+43, r25	; 0x2b
    3e1e:	df 91       	pop	r29
    3e20:	cf 91       	pop	r28
    3e22:	1f 91       	pop	r17
    3e24:	0f 91       	pop	r16
    3e26:	ff 90       	pop	r15
    3e28:	ef 90       	pop	r14
    3e2a:	df 90       	pop	r13
    3e2c:	cf 90       	pop	r12
    3e2e:	bf 90       	pop	r11
    3e30:	af 90       	pop	r10
    3e32:	9f 90       	pop	r9
    3e34:	8f 90       	pop	r8
    3e36:	7f 90       	pop	r7
    3e38:	6f 90       	pop	r6
    3e3a:	5f 90       	pop	r5
    3e3c:	4f 90       	pop	r4
    3e3e:	08 95       	ret

00003e40 <clock_init>:
    3e40:	61 e0       	ldi	r22, 0x01	; 1
    3e42:	85 e0       	ldi	r24, 0x05	; 5
    3e44:	47 d8       	rcall	.-3954   	; 0x2ed4 <sysclk_enable_module>
    3e46:	e0 e0       	ldi	r30, 0x00	; 0
    3e48:	fa e0       	ldi	r31, 0x0A	; 10
    3e4a:	87 e0       	ldi	r24, 0x07	; 7
    3e4c:	80 83       	st	Z, r24
    3e4e:	81 e1       	ldi	r24, 0x11	; 17
    3e50:	9a e7       	ldi	r25, 0x7A	; 122
    3e52:	86 a3       	std	Z+38, r24	; 0x26
    3e54:	97 a3       	std	Z+39, r25	; 0x27
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	86 83       	std	Z+6, r24	; 0x06
    3e5a:	08 95       	ret

00003e5c <buzzer_init>:
    3e5c:	62 e0       	ldi	r22, 0x02	; 2
    3e5e:	84 e0       	ldi	r24, 0x04	; 4
    3e60:	39 d8       	rcall	.-3982   	; 0x2ed4 <sysclk_enable_module>
    3e62:	64 e0       	ldi	r22, 0x04	; 4
    3e64:	84 e0       	ldi	r24, 0x04	; 4
    3e66:	36 d8       	rcall	.-3988   	; 0x2ed4 <sysclk_enable_module>
    3e68:	e0 e6       	ldi	r30, 0x60	; 96
    3e6a:	f6 e0       	ldi	r31, 0x06	; 6
    3e6c:	80 81       	ld	r24, Z
    3e6e:	80 61       	ori	r24, 0x10	; 16
    3e70:	80 83       	st	Z, r24
    3e72:	e0 e4       	ldi	r30, 0x40	; 64
    3e74:	f9 e0       	ldi	r31, 0x09	; 9
    3e76:	85 e0       	ldi	r24, 0x05	; 5
    3e78:	80 83       	st	Z, r24
    3e7a:	83 e1       	ldi	r24, 0x13	; 19
    3e7c:	81 83       	std	Z+1, r24	; 0x01
    3e7e:	88 eb       	ldi	r24, 0xB8	; 184
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	86 a3       	std	Z+38, r24	; 0x26
    3e84:	97 a3       	std	Z+39, r25	; 0x27
    3e86:	8c e5       	ldi	r24, 0x5C	; 92
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	80 a7       	std	Z+40, r24	; 0x28
    3e8c:	91 a7       	std	Z+41, r25	; 0x29
    3e8e:	08 95       	ret

00003e90 <buzzer_stop>:
    3e90:	e0 e4       	ldi	r30, 0x40	; 64
    3e92:	f9 e0       	ldi	r31, 0x09	; 9
    3e94:	16 a2       	std	Z+38, r1	; 0x26
    3e96:	17 a2       	std	Z+39, r1	; 0x27
    3e98:	10 a6       	std	Z+40, r1	; 0x28
    3e9a:	11 a6       	std	Z+41, r1	; 0x29
    3e9c:	08 95       	ret

00003e9e <calc_rpm>:
    3e9e:	cf 92       	push	r12
    3ea0:	df 92       	push	r13
    3ea2:	ef 92       	push	r14
    3ea4:	ff 92       	push	r15
    3ea6:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <ticks_per_sec>
    3eaa:	90 91 31 22 	lds	r25, 0x2231	; 0x802231 <ticks_per_sec+0x1>
    3eae:	c0 90 f2 21 	lds	r12, 0x21F2	; 0x8021f2 <rpm>
    3eb2:	d0 90 f3 21 	lds	r13, 0x21F3	; 0x8021f3 <rpm+0x1>
    3eb6:	e0 90 f4 21 	lds	r14, 0x21F4	; 0x8021f4 <rpm+0x2>
    3eba:	f0 90 f5 21 	lds	r15, 0x21F5	; 0x8021f5 <rpm+0x3>
    3ebe:	2c e3       	ldi	r18, 0x3C	; 60
    3ec0:	28 9f       	mul	r18, r24
    3ec2:	b0 01       	movw	r22, r0
    3ec4:	29 9f       	mul	r18, r25
    3ec6:	70 0d       	add	r23, r0
    3ec8:	11 24       	eor	r1, r1
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__floatunsisf>
    3ed2:	a7 01       	movw	r20, r14
    3ed4:	96 01       	movw	r18, r12
    3ed6:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__addsf3>
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	40 e0       	ldi	r20, 0x00	; 0
    3ee0:	5f e3       	ldi	r21, 0x3F	; 63
    3ee2:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3ee6:	60 93 f2 21 	sts	0x21F2, r22	; 0x8021f2 <rpm>
    3eea:	70 93 f3 21 	sts	0x21F3, r23	; 0x8021f3 <rpm+0x1>
    3eee:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <rpm+0x2>
    3ef2:	90 93 f5 21 	sts	0x21F5, r25	; 0x8021f5 <rpm+0x3>
    3ef6:	10 92 30 22 	sts	0x2230, r1	; 0x802230 <ticks_per_sec>
    3efa:	10 92 31 22 	sts	0x2231, r1	; 0x802231 <ticks_per_sec+0x1>
    3efe:	ff 90       	pop	r15
    3f00:	ef 90       	pop	r14
    3f02:	df 90       	pop	r13
    3f04:	cf 90       	pop	r12
    3f06:	08 95       	ret

00003f08 <update_scale_factor>:
    3f08:	60 91 14 22 	lds	r22, 0x2214	; 0x802214 <volt>
    3f0c:	70 91 15 22 	lds	r23, 0x2215	; 0x802215 <volt+0x1>
    3f10:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <volt+0x2>
    3f14:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <volt+0x3>
    3f18:	22 e0       	ldi	r18, 0x02	; 2
    3f1a:	3d ed       	ldi	r19, 0xDD	; 221
    3f1c:	49 ed       	ldi	r20, 0xD9	; 217
    3f1e:	5e e3       	ldi	r21, 0x3E	; 62
    3f20:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3f24:	27 e4       	ldi	r18, 0x47	; 71
    3f26:	3e ed       	ldi	r19, 0xDE	; 222
    3f28:	4c ec       	ldi	r20, 0xCC	; 204
    3f2a:	5d e3       	ldi	r21, 0x3D	; 61
    3f2c:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e8       	ldi	r20, 0x80	; 128
    3f36:	52 e4       	ldi	r21, 0x42	; 66
    3f38:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    3f3c:	23 e3       	ldi	r18, 0x33	; 51
    3f3e:	33 e3       	ldi	r19, 0x33	; 51
    3f40:	43 e5       	ldi	r20, 0x53	; 83
    3f42:	50 e4       	ldi	r21, 0x40	; 64
    3f44:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__divsf3>
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	40 e8       	ldi	r20, 0x80	; 128
    3f4e:	5f e3       	ldi	r21, 0x3F	; 63
    3f50:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    3f54:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__fixunssfsi>
    3f58:	60 93 43 22 	sts	0x2243, r22	; 0x802243 <scale_factor>
    3f5c:	91 c8       	rjmp	.-3806   	; 0x3080 <change_hall_sensor_scaler>
    3f5e:	08 95       	ret

00003f60 <cali_alt>:
    3f60:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <press>
    3f64:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <press+0x1>
    3f68:	a0 91 22 22 	lds	r26, 0x2222	; 0x802222 <press+0x2>
    3f6c:	b0 91 23 22 	lds	r27, 0x2223	; 0x802223 <press+0x3>
    3f70:	80 93 39 20 	sts	0x2039, r24	; 0x802039 <ground_p>
    3f74:	90 93 3a 20 	sts	0x203A, r25	; 0x80203a <ground_p+0x1>
    3f78:	a0 93 3b 20 	sts	0x203B, r26	; 0x80203b <ground_p+0x2>
    3f7c:	b0 93 3c 20 	sts	0x203C, r27	; 0x80203c <ground_p+0x3>
    3f80:	27 d9       	rcall	.-3506   	; 0x31d0 <get_temperature>
    3f82:	60 93 35 20 	sts	0x2035, r22	; 0x802035 <ground_t>
    3f86:	70 93 36 20 	sts	0x2036, r23	; 0x802036 <ground_t+0x1>
    3f8a:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <ground_t+0x2>
    3f8e:	90 93 38 20 	sts	0x2038, r25	; 0x802038 <ground_t+0x3>
    3f92:	08 95       	ret

00003f94 <cali_ang>:
    3f94:	0e 94 28 14 	call	0x2850	; 0x2850 <imu_roll>
    3f98:	60 93 32 22 	sts	0x2232, r22	; 0x802232 <ref_roll>
    3f9c:	70 93 33 22 	sts	0x2233, r23	; 0x802233 <ref_roll+0x1>
    3fa0:	80 93 34 22 	sts	0x2234, r24	; 0x802234 <ref_roll+0x2>
    3fa4:	90 93 35 22 	sts	0x2235, r25	; 0x802235 <ref_roll+0x3>
    3fa8:	0e 94 31 14 	call	0x2862	; 0x2862 <imu_pitch>
    3fac:	60 93 21 20 	sts	0x2021, r22	; 0x802021 <ref_pitch>
    3fb0:	70 93 22 20 	sts	0x2022, r23	; 0x802022 <ref_pitch+0x1>
    3fb4:	80 93 23 20 	sts	0x2023, r24	; 0x802023 <ref_pitch+0x2>
    3fb8:	90 93 24 20 	sts	0x2024, r25	; 0x802024 <ref_pitch+0x3>
    3fbc:	0e 94 3a 14 	call	0x2874	; 0x2874 <imu_heading>
    3fc0:	60 93 25 20 	sts	0x2025, r22	; 0x802025 <ref_yaw>
    3fc4:	70 93 26 20 	sts	0x2026, r23	; 0x802026 <ref_yaw+0x1>
    3fc8:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ref_yaw+0x2>
    3fcc:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ref_yaw+0x3>
    3fd0:	08 95       	ret

00003fd2 <calibrate>:
    3fd2:	c6 df       	rcall	.-116    	; 0x3f60 <cali_alt>
    3fd4:	df cf       	rjmp	.-66     	; 0x3f94 <cali_ang>
    3fd6:	08 95       	ret

00003fd8 <servo_release>:
    3fd8:	e0 e0       	ldi	r30, 0x00	; 0
    3fda:	f9 e0       	ldi	r31, 0x09	; 9
    3fdc:	86 a1       	ldd	r24, Z+38	; 0x26
    3fde:	97 a1       	ldd	r25, Z+39	; 0x27
    3fe0:	8b 56       	subi	r24, 0x6B	; 107
    3fe2:	93 40       	sbci	r25, 0x03	; 3
    3fe4:	84 a7       	std	Z+44, r24	; 0x2c
    3fe6:	95 a7       	std	Z+45, r25	; 0x2d
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	80 93 46 22 	sts	0x2246, r24	; 0x802246 <released>
    3fee:	08 95       	ret

00003ff0 <servo_close>:

	released = 1;
}

void servo_close(void){
	TCD0.CCC = TCD0.PER - RELEASE_SERVO_CLOSE;
    3ff0:	e0 e0       	ldi	r30, 0x00	; 0
    3ff2:	f9 e0       	ldi	r31, 0x09	; 9
    3ff4:	86 a1       	ldd	r24, Z+38	; 0x26
    3ff6:	97 a1       	ldd	r25, Z+39	; 0x27
    3ff8:	88 55       	subi	r24, 0x58	; 88
    3ffa:	92 40       	sbci	r25, 0x02	; 2
    3ffc:	84 a7       	std	Z+44, r24	; 0x2c
    3ffe:	95 a7       	std	Z+45, r25	; 0x2d

	released = 0;
    4000:	10 92 46 22 	sts	0x2246, r1	; 0x802246 <released>
    4004:	08 95       	ret

00004006 <packet>:
}

void packet(void){
    4006:	2f 92       	push	r2
    4008:	3f 92       	push	r3
    400a:	4f 92       	push	r4
    400c:	5f 92       	push	r5
    400e:	6f 92       	push	r6
    4010:	7f 92       	push	r7
    4012:	8f 92       	push	r8
    4014:	9f 92       	push	r9
    4016:	af 92       	push	r10
    4018:	bf 92       	push	r11
    401a:	cf 92       	push	r12
    401c:	df 92       	push	r13
    401e:	ef 92       	push	r14
    4020:	ff 92       	push	r15
    4022:	0f 93       	push	r16
    4024:	1f 93       	push	r17
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
    402a:	cd b7       	in	r28, 0x3d	; 61
    402c:	de b7       	in	r29, 0x3e	; 62
    402e:	c3 54       	subi	r28, 0x43	; 67
    4030:	d1 09       	sbc	r29, r1
    4032:	cd bf       	out	0x3d, r28	; 61
    4034:	de bf       	out	0x3e, r29	; 62
	//XBEE_spi_write(str);
	packets++;
    4036:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <packets>
    403a:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <packets+0x1>
    403e:	01 96       	adiw	r24, 0x01	; 1
    4040:	80 93 24 22 	sts	0x2224, r24	; 0x802224 <packets>
    4044:	90 93 25 22 	sts	0x2225, r25	; 0x802225 <packets+0x1>
	sprintf(str,								format,										timer,										packets,
    4048:	60 91 ee 21 	lds	r22, 0x21EE	; 0x8021ee <angle>
    404c:	70 91 ef 21 	lds	r23, 0x21EF	; 0x8021ef <angle+0x1>
    4050:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <angle+0x2>
    4054:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <angle+0x3>
    4058:	20 91 47 22 	lds	r18, 0x2247	; 0x802247 <state>
    405c:	29 83       	std	Y+1, r18	; 0x01
    405e:	40 90 f2 21 	lds	r4, 0x21F2	; 0x8021f2 <rpm>
    4062:	50 90 f3 21 	lds	r5, 0x21F3	; 0x8021f3 <rpm+0x1>
    4066:	60 90 f4 21 	lds	r6, 0x21F4	; 0x8021f4 <rpm+0x2>
    406a:	70 90 f5 21 	lds	r7, 0x21F5	; 0x8021f5 <rpm+0x3>
    406e:	80 90 f6 21 	lds	r8, 0x21F6	; 0x8021f6 <roll>
    4072:	90 90 f7 21 	lds	r9, 0x21F7	; 0x8021f7 <roll+0x1>
    4076:	a0 90 f8 21 	lds	r10, 0x21F8	; 0x8021f8 <roll+0x2>
    407a:	b0 90 f9 21 	lds	r11, 0x21F9	; 0x8021f9 <roll+0x3>
    407e:	c0 90 fa 21 	lds	r12, 0x21FA	; 0x8021fa <pitch>
    4082:	d0 90 fb 21 	lds	r13, 0x21FB	; 0x8021fb <pitch+0x1>
    4086:	e0 90 fc 21 	lds	r14, 0x21FC	; 0x8021fc <pitch+0x2>
    408a:	f0 90 fd 21 	lds	r15, 0x21FD	; 0x8021fd <pitch+0x3>
    408e:	40 91 fe 21 	lds	r20, 0x21FE	; 0x8021fe <gps_sats>
    4092:	50 91 ff 21 	lds	r21, 0x21FF	; 0x8021ff <gps_sats+0x1>
    4096:	24 96       	adiw	r28, 0x04	; 4
    4098:	4e af       	std	Y+62, r20	; 0x3e
    409a:	5f af       	std	Y+63, r21	; 0x3f
    409c:	24 97       	sbiw	r28, 0x04	; 4
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,							((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,							(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,							((int16_t) (gps_alt)*10)%10,				gps_sats,									(int16_t) pitch,
    409e:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <gps_alt>
    40a2:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <gps_alt+0x1>
    40a6:	40 91 02 22 	lds	r20, 0x2202	; 0x802202 <gps_alt+0x2>
    40aa:	50 91 03 22 	lds	r21, 0x2203	; 0x802203 <gps_alt+0x3>
    40ae:	2a 83       	std	Y+2, r18	; 0x02
    40b0:	3b 83       	std	Y+3, r19	; 0x03
    40b2:	4c 83       	std	Y+4, r20	; 0x04
    40b4:	5d 83       	std	Y+5, r21	; 0x05
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,								format,										timer,										packets,
    40b6:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <gps_alt>
    40ba:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <gps_alt+0x1>
    40be:	40 91 02 22 	lds	r20, 0x2202	; 0x802202 <gps_alt+0x2>
    40c2:	50 91 03 22 	lds	r21, 0x2203	; 0x802203 <gps_alt+0x3>
    40c6:	2e 83       	std	Y+6, r18	; 0x06
    40c8:	3f 83       	std	Y+7, r19	; 0x07
    40ca:	48 87       	std	Y+8, r20	; 0x08
    40cc:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,							((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,							(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    40ce:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <gps_long>
    40d2:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <gps_long+0x1>
    40d6:	40 91 06 22 	lds	r20, 0x2206	; 0x802206 <gps_long+0x2>
    40da:	50 91 07 22 	lds	r21, 0x2207	; 0x802207 <gps_long+0x3>
    40de:	2a 87       	std	Y+10, r18	; 0x0a
    40e0:	3b 87       	std	Y+11, r19	; 0x0b
    40e2:	4c 87       	std	Y+12, r20	; 0x0c
    40e4:	5d 87       	std	Y+13, r21	; 0x0d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,								format,										timer,										packets,
    40e6:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <gps_long>
    40ea:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <gps_long+0x1>
    40ee:	40 91 06 22 	lds	r20, 0x2206	; 0x802206 <gps_long+0x2>
    40f2:	50 91 07 22 	lds	r21, 0x2207	; 0x802207 <gps_long+0x3>
    40f6:	2e 87       	std	Y+14, r18	; 0x0e
    40f8:	3f 87       	std	Y+15, r19	; 0x0f
    40fa:	48 8b       	std	Y+16, r20	; 0x10
    40fc:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,							((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,							(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    40fe:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <gps_lat>
    4102:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <gps_lat+0x1>
    4106:	40 91 0a 22 	lds	r20, 0x220A	; 0x80220a <gps_lat+0x2>
    410a:	50 91 0b 22 	lds	r21, 0x220B	; 0x80220b <gps_lat+0x3>
    410e:	2a 8b       	std	Y+18, r18	; 0x12
    4110:	3b 8b       	std	Y+19, r19	; 0x13
    4112:	4c 8b       	std	Y+20, r20	; 0x14
    4114:	5d 8b       	std	Y+21, r21	; 0x15
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,								format,										timer,										packets,
    4116:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <gps_lat>
    411a:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <gps_lat+0x1>
    411e:	40 91 0a 22 	lds	r20, 0x220A	; 0x80220a <gps_lat+0x2>
    4122:	50 91 0b 22 	lds	r21, 0x220B	; 0x80220b <gps_lat+0x3>
    4126:	2e 8b       	std	Y+22, r18	; 0x16
    4128:	3f 8b       	std	Y+23, r19	; 0x17
    412a:	48 8f       	std	Y+24, r20	; 0x18
    412c:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
    412e:	20 91 0c 22 	lds	r18, 0x220C	; 0x80220c <gps_t>
    4132:	30 91 0d 22 	lds	r19, 0x220D	; 0x80220d <gps_t+0x1>
    4136:	40 91 0e 22 	lds	r20, 0x220E	; 0x80220e <gps_t+0x2>
    413a:	50 91 0f 22 	lds	r21, 0x220F	; 0x80220f <gps_t+0x3>
    413e:	2a 8f       	std	Y+26, r18	; 0x1a
    4140:	3b 8f       	std	Y+27, r19	; 0x1b
    4142:	4c 8f       	std	Y+28, r20	; 0x1c
    4144:	5d 8f       	std	Y+29, r21	; 0x1d
    4146:	20 91 0c 22 	lds	r18, 0x220C	; 0x80220c <gps_t>
    414a:	30 91 0d 22 	lds	r19, 0x220D	; 0x80220d <gps_t+0x1>
    414e:	40 91 0e 22 	lds	r20, 0x220E	; 0x80220e <gps_t+0x2>
    4152:	50 91 0f 22 	lds	r21, 0x220F	; 0x80220f <gps_t+0x3>
    4156:	2e 8f       	std	Y+30, r18	; 0x1e
    4158:	3f 8f       	std	Y+31, r19	; 0x1f
    415a:	48 a3       	std	Y+32, r20	; 0x20
    415c:	59 a3       	std	Y+33, r21	; 0x21
    415e:	20 91 0c 22 	lds	r18, 0x220C	; 0x80220c <gps_t>
    4162:	30 91 0d 22 	lds	r19, 0x220D	; 0x80220d <gps_t+0x1>
    4166:	40 91 0e 22 	lds	r20, 0x220E	; 0x80220e <gps_t+0x2>
    416a:	50 91 0f 22 	lds	r21, 0x220F	; 0x80220f <gps_t+0x3>
    416e:	2a a3       	std	Y+34, r18	; 0x22
    4170:	3b a3       	std	Y+35, r19	; 0x23
    4172:	4c a3       	std	Y+36, r20	; 0x24
    4174:	5d a3       	std	Y+37, r21	; 0x25
    4176:	20 91 14 22 	lds	r18, 0x2214	; 0x802214 <volt>
    417a:	30 91 15 22 	lds	r19, 0x2215	; 0x802215 <volt+0x1>
    417e:	40 91 16 22 	lds	r20, 0x2216	; 0x802216 <volt+0x2>
    4182:	50 91 17 22 	lds	r21, 0x2217	; 0x802217 <volt+0x3>
    4186:	2e a3       	std	Y+38, r18	; 0x26
    4188:	3f a3       	std	Y+39, r19	; 0x27
    418a:	48 a7       	std	Y+40, r20	; 0x28
    418c:	59 a7       	std	Y+41, r21	; 0x29
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,								format,										timer,										packets,
    418e:	20 91 14 22 	lds	r18, 0x2214	; 0x802214 <volt>
    4192:	30 91 15 22 	lds	r19, 0x2215	; 0x802215 <volt+0x1>
    4196:	40 91 16 22 	lds	r20, 0x2216	; 0x802216 <volt+0x2>
    419a:	50 91 17 22 	lds	r21, 0x2217	; 0x802217 <volt+0x3>
    419e:	2a a7       	std	Y+42, r18	; 0x2a
    41a0:	3b a7       	std	Y+43, r19	; 0x2b
    41a2:	4c a7       	std	Y+44, r20	; 0x2c
    41a4:	5d a7       	std	Y+45, r21	; 0x2d
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
    41a6:	20 91 1c 22 	lds	r18, 0x221C	; 0x80221c <temp>
    41aa:	30 91 1d 22 	lds	r19, 0x221D	; 0x80221d <temp+0x1>
    41ae:	40 91 1e 22 	lds	r20, 0x221E	; 0x80221e <temp+0x2>
    41b2:	50 91 1f 22 	lds	r21, 0x221F	; 0x80221f <temp+0x3>
    41b6:	2e a7       	std	Y+46, r18	; 0x2e
    41b8:	3f a7       	std	Y+47, r19	; 0x2f
    41ba:	48 ab       	std	Y+48, r20	; 0x30
    41bc:	59 ab       	std	Y+49, r21	; 0x31
    41be:	20 91 1c 22 	lds	r18, 0x221C	; 0x80221c <temp>
    41c2:	30 91 1d 22 	lds	r19, 0x221D	; 0x80221d <temp+0x1>
    41c6:	40 91 1e 22 	lds	r20, 0x221E	; 0x80221e <temp+0x2>
    41ca:	50 91 1f 22 	lds	r21, 0x221F	; 0x80221f <temp+0x3>
    41ce:	2a ab       	std	Y+50, r18	; 0x32
    41d0:	3b ab       	std	Y+51, r19	; 0x33
    41d2:	4c ab       	std	Y+52, r20	; 0x34
    41d4:	5d ab       	std	Y+53, r21	; 0x35
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,								format,										timer,										packets,
    41d6:	20 91 20 22 	lds	r18, 0x2220	; 0x802220 <press>
    41da:	30 91 21 22 	lds	r19, 0x2221	; 0x802221 <press+0x1>
    41de:	40 91 22 22 	lds	r20, 0x2222	; 0x802222 <press+0x2>
    41e2:	50 91 23 22 	lds	r21, 0x2223	; 0x802223 <press+0x3>
    41e6:	2e ab       	std	Y+54, r18	; 0x36
    41e8:	3f ab       	std	Y+55, r19	; 0x37
    41ea:	48 af       	std	Y+56, r20	; 0x38
    41ec:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
    41ee:	20 91 18 22 	lds	r18, 0x2218	; 0x802218 <alt>
    41f2:	30 91 19 22 	lds	r19, 0x2219	; 0x802219 <alt+0x1>
    41f6:	40 91 1a 22 	lds	r20, 0x221A	; 0x80221a <alt+0x2>
    41fa:	50 91 1b 22 	lds	r21, 0x221B	; 0x80221b <alt+0x3>
    41fe:	2a af       	std	Y+58, r18	; 0x3a
    4200:	3b af       	std	Y+59, r19	; 0x3b
    4202:	4c af       	std	Y+60, r20	; 0x3c
    4204:	5d af       	std	Y+61, r21	; 0x3d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,								format,										timer,										packets,
    4206:	20 91 18 22 	lds	r18, 0x2218	; 0x802218 <alt>
    420a:	30 91 19 22 	lds	r19, 0x2219	; 0x802219 <alt+0x1>
    420e:	40 91 1a 22 	lds	r20, 0x221A	; 0x80221a <alt+0x2>
    4212:	50 91 1b 22 	lds	r21, 0x221B	; 0x80221b <alt+0x3>
    4216:	22 96       	adiw	r28, 0x02	; 2
    4218:	2c af       	std	Y+60, r18	; 0x3c
    421a:	3d af       	std	Y+61, r19	; 0x3d
    421c:	4e af       	std	Y+62, r20	; 0x3e
    421e:	5f af       	std	Y+63, r21	; 0x3f
    4220:	22 97       	sbiw	r28, 0x02	; 2
    4222:	20 90 24 22 	lds	r2, 0x2224	; 0x802224 <packets>
    4226:	30 90 25 22 	lds	r3, 0x2225	; 0x802225 <packets+0x1>
    422a:	00 91 28 22 	lds	r16, 0x2228	; 0x802228 <timer>
    422e:	10 91 29 22 	lds	r17, 0x2229	; 0x802229 <timer+0x1>
    4232:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4236:	7f 93       	push	r23
    4238:	6f 93       	push	r22
    423a:	1f 92       	push	r1
    423c:	39 81       	ldd	r19, Y+1	; 0x01
    423e:	3f 93       	push	r19
    4240:	c3 01       	movw	r24, r6
    4242:	b2 01       	movw	r22, r4
    4244:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4248:	7f 93       	push	r23
    424a:	6f 93       	push	r22
    424c:	c5 01       	movw	r24, r10
    424e:	b4 01       	movw	r22, r8
    4250:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4254:	7f 93       	push	r23
    4256:	6f 93       	push	r22
    4258:	c7 01       	movw	r24, r14
    425a:	b6 01       	movw	r22, r12
    425c:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4260:	7f 93       	push	r23
    4262:	6f 93       	push	r22
    4264:	24 96       	adiw	r28, 0x04	; 4
    4266:	4f ad       	ldd	r20, Y+63	; 0x3f
    4268:	24 97       	sbiw	r28, 0x04	; 4
    426a:	4f 93       	push	r20
    426c:	23 96       	adiw	r28, 0x03	; 3
    426e:	5f ad       	ldd	r21, Y+63	; 0x3f
    4270:	23 97       	sbiw	r28, 0x03	; 3
    4272:	5f 93       	push	r21
    4274:	6a 81       	ldd	r22, Y+2	; 0x02
    4276:	7b 81       	ldd	r23, Y+3	; 0x03
    4278:	8c 81       	ldd	r24, Y+4	; 0x04
    427a:	9d 81       	ldd	r25, Y+5	; 0x05
    427c:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4280:	9b 01       	movw	r18, r22
    4282:	22 0f       	add	r18, r18
    4284:	33 1f       	adc	r19, r19
    4286:	66 0f       	add	r22, r22
    4288:	77 1f       	adc	r23, r23
    428a:	66 0f       	add	r22, r22
    428c:	77 1f       	adc	r23, r23
    428e:	66 0f       	add	r22, r22
    4290:	77 1f       	adc	r23, r23
    4292:	c9 01       	movw	r24, r18
    4294:	86 0f       	add	r24, r22
    4296:	97 1f       	adc	r25, r23
    4298:	6a e0       	ldi	r22, 0x0A	; 10
    429a:	70 e0       	ldi	r23, 0x00	; 0
    429c:	0e 94 45 32 	call	0x648a	; 0x648a <__divmodhi4>
    42a0:	9f 93       	push	r25
    42a2:	8f 93       	push	r24
    42a4:	6e 81       	ldd	r22, Y+6	; 0x06
    42a6:	7f 81       	ldd	r23, Y+7	; 0x07
    42a8:	88 85       	ldd	r24, Y+8	; 0x08
    42aa:	99 85       	ldd	r25, Y+9	; 0x09
    42ac:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    42b0:	7f 93       	push	r23
    42b2:	6f 93       	push	r22
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	34 e2       	ldi	r19, 0x24	; 36
    42b8:	44 e7       	ldi	r20, 0x74	; 116
    42ba:	59 e4       	ldi	r21, 0x49	; 73
    42bc:	6a 85       	ldd	r22, Y+10	; 0x0a
    42be:	7b 85       	ldd	r23, Y+11	; 0x0b
    42c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    42c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    42c4:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    42c8:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    42cc:	20 e4       	ldi	r18, 0x40	; 64
    42ce:	32 e4       	ldi	r19, 0x42	; 66
    42d0:	4f e0       	ldi	r20, 0x0F	; 15
    42d2:	50 e0       	ldi	r21, 0x00	; 0
    42d4:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    42d8:	9b 01       	movw	r18, r22
    42da:	77 23       	and	r23, r23
    42dc:	24 f4       	brge	.+8      	; 0x42e6 <packet+0x2e0>
    42de:	22 27       	eor	r18, r18
    42e0:	33 27       	eor	r19, r19
    42e2:	26 1b       	sub	r18, r22
    42e4:	37 0b       	sbc	r19, r23
    42e6:	c9 01       	movw	r24, r18
    42e8:	33 0f       	add	r19, r19
    42ea:	aa 0b       	sbc	r26, r26
    42ec:	bb 0b       	sbc	r27, r27
    42ee:	bf 93       	push	r27
    42f0:	af 93       	push	r26
    42f2:	9f 93       	push	r25
    42f4:	8f 93       	push	r24
    42f6:	6e 85       	ldd	r22, Y+14	; 0x0e
    42f8:	7f 85       	ldd	r23, Y+15	; 0x0f
    42fa:	88 89       	ldd	r24, Y+16	; 0x10
    42fc:	99 89       	ldd	r25, Y+17	; 0x11
    42fe:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4302:	7f 93       	push	r23
    4304:	6f 93       	push	r22
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	34 e2       	ldi	r19, 0x24	; 36
    430a:	44 e7       	ldi	r20, 0x74	; 116
    430c:	59 e4       	ldi	r21, 0x49	; 73
    430e:	6a 89       	ldd	r22, Y+18	; 0x12
    4310:	7b 89       	ldd	r23, Y+19	; 0x13
    4312:	8c 89       	ldd	r24, Y+20	; 0x14
    4314:	9d 89       	ldd	r25, Y+21	; 0x15
    4316:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    431a:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    431e:	20 e4       	ldi	r18, 0x40	; 64
    4320:	32 e4       	ldi	r19, 0x42	; 66
    4322:	4f e0       	ldi	r20, 0x0F	; 15
    4324:	50 e0       	ldi	r21, 0x00	; 0
    4326:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    432a:	9f 93       	push	r25
    432c:	8f 93       	push	r24
    432e:	7f 93       	push	r23
    4330:	6f 93       	push	r22
    4332:	6e 89       	ldd	r22, Y+22	; 0x16
    4334:	7f 89       	ldd	r23, Y+23	; 0x17
    4336:	88 8d       	ldd	r24, Y+24	; 0x18
    4338:	99 8d       	ldd	r25, Y+25	; 0x19
    433a:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    433e:	7f 93       	push	r23
    4340:	6f 93       	push	r22
    4342:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4344:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4346:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4348:	9d 8d       	ldd	r25, Y+29	; 0x1d
    434a:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    434e:	0f 2e       	mov	r0, r31
    4350:	f4 e6       	ldi	r31, 0x64	; 100
    4352:	cf 2e       	mov	r12, r31
    4354:	d1 2c       	mov	r13, r1
    4356:	e1 2c       	mov	r14, r1
    4358:	f1 2c       	mov	r15, r1
    435a:	f0 2d       	mov	r31, r0
    435c:	a7 01       	movw	r20, r14
    435e:	96 01       	movw	r18, r12
    4360:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    4364:	7f 93       	push	r23
    4366:	6f 93       	push	r22
    4368:	6e 8d       	ldd	r22, Y+30	; 0x1e
    436a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    436c:	88 a1       	ldd	r24, Y+32	; 0x20
    436e:	99 a1       	ldd	r25, Y+33	; 0x21
    4370:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4374:	0f 2e       	mov	r0, r31
    4376:	f0 e1       	ldi	r31, 0x10	; 16
    4378:	8f 2e       	mov	r8, r31
    437a:	f7 e2       	ldi	r31, 0x27	; 39
    437c:	9f 2e       	mov	r9, r31
    437e:	a1 2c       	mov	r10, r1
    4380:	b1 2c       	mov	r11, r1
    4382:	f0 2d       	mov	r31, r0
    4384:	a5 01       	movw	r20, r10
    4386:	94 01       	movw	r18, r8
    4388:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    438c:	a7 01       	movw	r20, r14
    438e:	96 01       	movw	r18, r12
    4390:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    4394:	3f 93       	push	r19
    4396:	2f 93       	push	r18
    4398:	6a a1       	ldd	r22, Y+34	; 0x22
    439a:	7b a1       	ldd	r23, Y+35	; 0x23
    439c:	8c a1       	ldd	r24, Y+36	; 0x24
    439e:	9d a1       	ldd	r25, Y+37	; 0x25
    43a0:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    43a4:	a5 01       	movw	r20, r10
    43a6:	94 01       	movw	r18, r8
    43a8:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    43ac:	3f 93       	push	r19
    43ae:	2f 93       	push	r18
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	40 e2       	ldi	r20, 0x20	; 32
    43b6:	51 e4       	ldi	r21, 0x41	; 65
    43b8:	6e a1       	ldd	r22, Y+38	; 0x26
    43ba:	7f a1       	ldd	r23, Y+39	; 0x27
    43bc:	88 a5       	ldd	r24, Y+40	; 0x28
    43be:	99 a5       	ldd	r25, Y+41	; 0x29
    43c0:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    43c4:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    43c8:	cb 01       	movw	r24, r22
    43ca:	6a e0       	ldi	r22, 0x0A	; 10
    43cc:	70 e0       	ldi	r23, 0x00	; 0
    43ce:	0e 94 45 32 	call	0x648a	; 0x648a <__divmodhi4>
    43d2:	9f 93       	push	r25
    43d4:	8f 93       	push	r24
    43d6:	6a a5       	ldd	r22, Y+42	; 0x2a
    43d8:	7b a5       	ldd	r23, Y+43	; 0x2b
    43da:	8c a5       	ldd	r24, Y+44	; 0x2c
    43dc:	9d a5       	ldd	r25, Y+45	; 0x2d
    43de:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    43e2:	7f 93       	push	r23
    43e4:	6f 93       	push	r22
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	40 e2       	ldi	r20, 0x20	; 32
    43ec:	51 e4       	ldi	r21, 0x41	; 65
    43ee:	6e a5       	ldd	r22, Y+46	; 0x2e
    43f0:	7f a5       	ldd	r23, Y+47	; 0x2f
    43f2:	88 a9       	ldd	r24, Y+48	; 0x30
    43f4:	99 a9       	ldd	r25, Y+49	; 0x31
    43f6:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	38 eb       	ldi	r19, 0xB8	; 184
    43fe:	4a e2       	ldi	r20, 0x2A	; 42
    4400:	55 e4       	ldi	r21, 0x45	; 69
    4402:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    4406:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    440a:	cb 01       	movw	r24, r22
    440c:	6a e0       	ldi	r22, 0x0A	; 10
    440e:	70 e0       	ldi	r23, 0x00	; 0
    4410:	0e 94 45 32 	call	0x648a	; 0x648a <__divmodhi4>
    4414:	9f 93       	push	r25
    4416:	8f 93       	push	r24
    4418:	23 e3       	ldi	r18, 0x33	; 51
    441a:	33 e9       	ldi	r19, 0x93	; 147
    441c:	48 e8       	ldi	r20, 0x88	; 136
    441e:	53 e4       	ldi	r21, 0x43	; 67
    4420:	6a a9       	ldd	r22, Y+50	; 0x32
    4422:	7b a9       	ldd	r23, Y+51	; 0x33
    4424:	8c a9       	ldd	r24, Y+52	; 0x34
    4426:	9d a9       	ldd	r25, Y+53	; 0x35
    4428:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__subsf3>
    442c:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4430:	7f 93       	push	r23
    4432:	6f 93       	push	r22
    4434:	6e a9       	ldd	r22, Y+54	; 0x36
    4436:	7f a9       	ldd	r23, Y+55	; 0x37
    4438:	88 ad       	ldd	r24, Y+56	; 0x38
    443a:	99 ad       	ldd	r25, Y+57	; 0x39
    443c:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4440:	9f 93       	push	r25
    4442:	8f 93       	push	r24
    4444:	7f 93       	push	r23
    4446:	6f 93       	push	r22
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e2       	ldi	r20, 0x20	; 32
    444e:	51 e4       	ldi	r21, 0x41	; 65
    4450:	6a ad       	ldd	r22, Y+58	; 0x3a
    4452:	7b ad       	ldd	r23, Y+59	; 0x3b
    4454:	8c ad       	ldd	r24, Y+60	; 0x3c
    4456:	9d ad       	ldd	r25, Y+61	; 0x3d
    4458:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    445c:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4460:	9b 01       	movw	r18, r22
    4462:	77 23       	and	r23, r23
    4464:	24 f4       	brge	.+8      	; 0x446e <packet+0x468>
    4466:	22 27       	eor	r18, r18
    4468:	33 27       	eor	r19, r19
    446a:	26 1b       	sub	r18, r22
    446c:	37 0b       	sbc	r19, r23
    446e:	c9 01       	movw	r24, r18
    4470:	6a e0       	ldi	r22, 0x0A	; 10
    4472:	70 e0       	ldi	r23, 0x00	; 0
    4474:	0e 94 45 32 	call	0x648a	; 0x648a <__divmodhi4>
    4478:	9f 93       	push	r25
    447a:	8f 93       	push	r24
    447c:	22 96       	adiw	r28, 0x02	; 2
    447e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4480:	7d ad       	ldd	r23, Y+61	; 0x3d
    4482:	8e ad       	ldd	r24, Y+62	; 0x3e
    4484:	9f ad       	ldd	r25, Y+63	; 0x3f
    4486:	22 97       	sbiw	r28, 0x02	; 2
    4488:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    448c:	7f 93       	push	r23
    448e:	6f 93       	push	r22
    4490:	3f 92       	push	r3
    4492:	2f 92       	push	r2
    4494:	1f 93       	push	r17
    4496:	0f 93       	push	r16
    4498:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <format+0x1>
    449c:	8f 93       	push	r24
    449e:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <format>
    44a2:	8f 93       	push	r24
    44a4:	89 e9       	ldi	r24, 0x99	; 153
    44a6:	92 e2       	ldi	r25, 0x22	; 34
    44a8:	9f 93       	push	r25
    44aa:	8f 93       	push	r24
    44ac:	0e 94 04 34 	call	0x6808	; 0x6808 <sprintf>
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,							((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,							(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,							((int16_t) (gps_alt)*10)%10,				gps_sats,									(int16_t) pitch,
	(int16_t) roll,								(int16_t) rpm,								state,										(int16_t) angle); // Data Logging Test
	printf(str);
    44b0:	cd bf       	out	0x3d, r28	; 61
    44b2:	de bf       	out	0x3e, r29	; 62
    44b4:	89 e9       	ldi	r24, 0x99	; 153
    44b6:	92 e2       	ldi	r25, 0x22	; 34
    44b8:	9f 93       	push	r25
    44ba:	8f 93       	push	r24
    44bc:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <printf>
}
    44c0:	0f 90       	pop	r0
    44c2:	0f 90       	pop	r0
    44c4:	cd 5b       	subi	r28, 0xBD	; 189
    44c6:	df 4f       	sbci	r29, 0xFF	; 255
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	de bf       	out	0x3e, r29	; 62
    44cc:	df 91       	pop	r29
    44ce:	cf 91       	pop	r28
    44d0:	1f 91       	pop	r17
    44d2:	0f 91       	pop	r16
    44d4:	ff 90       	pop	r15
    44d6:	ef 90       	pop	r14
    44d8:	df 90       	pop	r13
    44da:	cf 90       	pop	r12
    44dc:	bf 90       	pop	r11
    44de:	af 90       	pop	r10
    44e0:	9f 90       	pop	r9
    44e2:	8f 90       	pop	r8
    44e4:	7f 90       	pop	r7
    44e6:	6f 90       	pop	r6
    44e8:	5f 90       	pop	r5
    44ea:	4f 90       	pop	r4
    44ec:	3f 90       	pop	r3
    44ee:	2f 90       	pop	r2
    44f0:	08 95       	ret

000044f2 <eeprom_write_const>:

void eeprom_write_const(void){
    44f2:	4f 92       	push	r4
    44f4:	5f 92       	push	r5
    44f6:	6f 92       	push	r6
    44f8:	7f 92       	push	r7
    44fa:	8f 92       	push	r8
    44fc:	9f 92       	push	r9
    44fe:	af 92       	push	r10
    4500:	bf 92       	push	r11
    4502:	cf 92       	push	r12
    4504:	df 92       	push	r13
    4506:	ef 92       	push	r14
    4508:	ff 92       	push	r15
    450a:	0f 93       	push	r16
    450c:	1f 93       	push	r17
    450e:	cf 93       	push	r28
    4510:	df 93       	push	r29
    4512:	cd b7       	in	r28, 0x3d	; 61
    4514:	de b7       	in	r29, 0x3e	; 62
    4516:	a0 97       	sbiw	r28, 0x20	; 32
    4518:	cd bf       	out	0x3d, r28	; 61
    451a:	de bf       	out	0x3e, r29	; 62
	uint64_t p = 0;
	uint64_t t = 0;

	memcpy(&p, &ground_p, 8);
    451c:	a9 e3       	ldi	r26, 0x39	; 57
    451e:	b0 e2       	ldi	r27, 0x20	; 32
    4520:	fc 91       	ld	r31, X
    4522:	11 96       	adiw	r26, 0x01	; 1
    4524:	5c 90       	ld	r5, X
    4526:	11 97       	sbiw	r26, 0x01	; 1
    4528:	12 96       	adiw	r26, 0x02	; 2
    452a:	6c 90       	ld	r6, X
    452c:	12 97       	sbiw	r26, 0x02	; 2
    452e:	13 96       	adiw	r26, 0x03	; 3
    4530:	7c 90       	ld	r7, X
    4532:	13 97       	sbiw	r26, 0x03	; 3
    4534:	14 96       	adiw	r26, 0x04	; 4
    4536:	8c 90       	ld	r8, X
    4538:	14 97       	sbiw	r26, 0x04	; 4
    453a:	15 96       	adiw	r26, 0x05	; 5
    453c:	9c 90       	ld	r9, X
    453e:	15 97       	sbiw	r26, 0x05	; 5
    4540:	16 96       	adiw	r26, 0x06	; 6
    4542:	ac 90       	ld	r10, X
    4544:	16 97       	sbiw	r26, 0x06	; 6
    4546:	17 96       	adiw	r26, 0x07	; 7
    4548:	4c 90       	ld	r4, X
	memcpy(&t, &ground_t, 8);
    454a:	a5 e3       	ldi	r26, 0x35	; 53
    454c:	b0 e2       	ldi	r27, 0x20	; 32
    454e:	ec 91       	ld	r30, X
    4550:	11 96       	adiw	r26, 0x01	; 1
    4552:	bc 90       	ld	r11, X
    4554:	11 97       	sbiw	r26, 0x01	; 1
    4556:	12 96       	adiw	r26, 0x02	; 2
    4558:	cc 90       	ld	r12, X
    455a:	12 97       	sbiw	r26, 0x02	; 2
    455c:	13 96       	adiw	r26, 0x03	; 3
    455e:	dc 90       	ld	r13, X
    4560:	13 97       	sbiw	r26, 0x03	; 3
    4562:	14 96       	adiw	r26, 0x04	; 4
    4564:	ec 90       	ld	r14, X
    4566:	14 97       	sbiw	r26, 0x04	; 4
    4568:	15 96       	adiw	r26, 0x05	; 5
    456a:	fc 90       	ld	r15, X
    456c:	15 97       	sbiw	r26, 0x05	; 5
    456e:	16 96       	adiw	r26, 0x06	; 6
    4570:	1c 91       	ld	r17, X
    4572:	16 97       	sbiw	r26, 0x06	; 6
    4574:	17 96       	adiw	r26, 0x07	; 7
    4576:	ac 91       	ld	r26, X

	uint8_t data[] = {p & 0xFF, (p >> 8) & 0xFF, (p >> 16) & 0xFF, (p >> 24) & 0xFF, (p >> 32) & 0xFF, (p >> 40) & 0xFF, (p >> 48) & 0xFF, p >> 56,
    4578:	f9 83       	std	Y+1, r31	; 0x01
    457a:	2f 2f       	mov	r18, r31
    457c:	35 2d       	mov	r19, r5
    457e:	46 2d       	mov	r20, r6
    4580:	57 2d       	mov	r21, r7
    4582:	68 2d       	mov	r22, r8
    4584:	79 2d       	mov	r23, r9
    4586:	8a 2d       	mov	r24, r10
    4588:	94 2d       	mov	r25, r4
    458a:	08 e0       	ldi	r16, 0x08	; 8
    458c:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    4590:	2a 83       	std	Y+2, r18	; 0x02
    4592:	2f 2f       	mov	r18, r31
    4594:	35 2d       	mov	r19, r5
    4596:	46 2d       	mov	r20, r6
    4598:	57 2d       	mov	r21, r7
    459a:	68 2d       	mov	r22, r8
    459c:	79 2d       	mov	r23, r9
    459e:	8a 2d       	mov	r24, r10
    45a0:	94 2d       	mov	r25, r4
    45a2:	00 e1       	ldi	r16, 0x10	; 16
    45a4:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    45a8:	2b 83       	std	Y+3, r18	; 0x03
    45aa:	2f 2f       	mov	r18, r31
    45ac:	35 2d       	mov	r19, r5
    45ae:	46 2d       	mov	r20, r6
    45b0:	57 2d       	mov	r21, r7
    45b2:	68 2d       	mov	r22, r8
    45b4:	79 2d       	mov	r23, r9
    45b6:	8a 2d       	mov	r24, r10
    45b8:	94 2d       	mov	r25, r4
    45ba:	08 e1       	ldi	r16, 0x18	; 24
    45bc:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    45c0:	2c 83       	std	Y+4, r18	; 0x04
    45c2:	2f 2f       	mov	r18, r31
    45c4:	35 2d       	mov	r19, r5
    45c6:	46 2d       	mov	r20, r6
    45c8:	57 2d       	mov	r21, r7
    45ca:	68 2d       	mov	r22, r8
    45cc:	79 2d       	mov	r23, r9
    45ce:	8a 2d       	mov	r24, r10
    45d0:	94 2d       	mov	r25, r4
    45d2:	00 e2       	ldi	r16, 0x20	; 32
    45d4:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    45d8:	2d 83       	std	Y+5, r18	; 0x05
    45da:	2f 2f       	mov	r18, r31
    45dc:	35 2d       	mov	r19, r5
    45de:	46 2d       	mov	r20, r6
    45e0:	57 2d       	mov	r21, r7
    45e2:	68 2d       	mov	r22, r8
    45e4:	79 2d       	mov	r23, r9
    45e6:	8a 2d       	mov	r24, r10
    45e8:	94 2d       	mov	r25, r4
    45ea:	08 e2       	ldi	r16, 0x28	; 40
    45ec:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    45f0:	2e 83       	std	Y+6, r18	; 0x06
    45f2:	2f 2f       	mov	r18, r31
    45f4:	35 2d       	mov	r19, r5
    45f6:	46 2d       	mov	r20, r6
    45f8:	57 2d       	mov	r21, r7
    45fa:	68 2d       	mov	r22, r8
    45fc:	79 2d       	mov	r23, r9
    45fe:	8a 2d       	mov	r24, r10
    4600:	94 2d       	mov	r25, r4
    4602:	00 e3       	ldi	r16, 0x30	; 48
    4604:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    4608:	2f 83       	std	Y+7, r18	; 0x07
    460a:	2f 2f       	mov	r18, r31
    460c:	35 2d       	mov	r19, r5
    460e:	46 2d       	mov	r20, r6
    4610:	57 2d       	mov	r21, r7
    4612:	68 2d       	mov	r22, r8
    4614:	79 2d       	mov	r23, r9
    4616:	8a 2d       	mov	r24, r10
    4618:	94 2d       	mov	r25, r4
    461a:	08 e3       	ldi	r16, 0x38	; 56
    461c:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    4620:	28 87       	std	Y+8, r18	; 0x08
    4622:	e9 87       	std	Y+9, r30	; 0x09
    4624:	2e 2f       	mov	r18, r30
    4626:	3b 2d       	mov	r19, r11
    4628:	4c 2d       	mov	r20, r12
    462a:	5d 2d       	mov	r21, r13
    462c:	6e 2d       	mov	r22, r14
    462e:	7f 2d       	mov	r23, r15
    4630:	81 2f       	mov	r24, r17
    4632:	9a 2f       	mov	r25, r26
    4634:	08 e0       	ldi	r16, 0x08	; 8
    4636:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    463a:	2a 87       	std	Y+10, r18	; 0x0a
    463c:	2e 2f       	mov	r18, r30
    463e:	3b 2d       	mov	r19, r11
    4640:	4c 2d       	mov	r20, r12
    4642:	5d 2d       	mov	r21, r13
    4644:	6e 2d       	mov	r22, r14
    4646:	7f 2d       	mov	r23, r15
    4648:	81 2f       	mov	r24, r17
    464a:	9a 2f       	mov	r25, r26
    464c:	00 e1       	ldi	r16, 0x10	; 16
    464e:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    4652:	2b 87       	std	Y+11, r18	; 0x0b
    4654:	2e 2f       	mov	r18, r30
    4656:	3b 2d       	mov	r19, r11
    4658:	4c 2d       	mov	r20, r12
    465a:	5d 2d       	mov	r21, r13
    465c:	6e 2d       	mov	r22, r14
    465e:	7f 2d       	mov	r23, r15
    4660:	81 2f       	mov	r24, r17
    4662:	9a 2f       	mov	r25, r26
    4664:	08 e1       	ldi	r16, 0x18	; 24
    4666:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    466a:	2c 87       	std	Y+12, r18	; 0x0c
    466c:	2e 2f       	mov	r18, r30
    466e:	3b 2d       	mov	r19, r11
    4670:	4c 2d       	mov	r20, r12
    4672:	5d 2d       	mov	r21, r13
    4674:	6e 2d       	mov	r22, r14
    4676:	7f 2d       	mov	r23, r15
    4678:	81 2f       	mov	r24, r17
    467a:	9a 2f       	mov	r25, r26
    467c:	00 e2       	ldi	r16, 0x20	; 32
    467e:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    4682:	2d 87       	std	Y+13, r18	; 0x0d
    4684:	2e 2f       	mov	r18, r30
    4686:	3b 2d       	mov	r19, r11
    4688:	4c 2d       	mov	r20, r12
    468a:	5d 2d       	mov	r21, r13
    468c:	6e 2d       	mov	r22, r14
    468e:	7f 2d       	mov	r23, r15
    4690:	81 2f       	mov	r24, r17
    4692:	9a 2f       	mov	r25, r26
    4694:	08 e2       	ldi	r16, 0x28	; 40
    4696:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    469a:	2e 87       	std	Y+14, r18	; 0x0e
    469c:	2e 2f       	mov	r18, r30
    469e:	3b 2d       	mov	r19, r11
    46a0:	4c 2d       	mov	r20, r12
    46a2:	5d 2d       	mov	r21, r13
    46a4:	6e 2d       	mov	r22, r14
    46a6:	7f 2d       	mov	r23, r15
    46a8:	81 2f       	mov	r24, r17
    46aa:	9a 2f       	mov	r25, r26
    46ac:	00 e3       	ldi	r16, 0x30	; 48
    46ae:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    46b2:	2f 87       	std	Y+15, r18	; 0x0f
    46b4:	2e 2f       	mov	r18, r30
    46b6:	3b 2d       	mov	r19, r11
    46b8:	4c 2d       	mov	r20, r12
    46ba:	5d 2d       	mov	r21, r13
    46bc:	6e 2d       	mov	r22, r14
    46be:	7f 2d       	mov	r23, r15
    46c0:	81 2f       	mov	r24, r17
    46c2:	9a 2f       	mov	r25, r26
    46c4:	08 e3       	ldi	r16, 0x38	; 56
    46c6:	0e 94 82 33 	call	0x6704	; 0x6704 <__lshrdi3>
    46ca:	28 8b       	std	Y+16, r18	; 0x10
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
    46cc:	80 e1       	ldi	r24, 0x10	; 16
    46ce:	ed e3       	ldi	r30, 0x3D	; 61
    46d0:	f0 e2       	ldi	r31, 0x20	; 32
    46d2:	de 01       	movw	r26, r28
    46d4:	51 96       	adiw	r26, 0x11	; 17
    46d6:	01 90       	ld	r0, Z+
    46d8:	0d 92       	st	X+, r0
    46da:	8a 95       	dec	r24
    46dc:	e1 f7       	brne	.-8      	; 0x46d6 <eeprom_write_const+0x1e4>
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
    46de:	83 e3       	ldi	r24, 0x33	; 51
    46e0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    46e4:	fe 01       	movw	r30, r28
    46e6:	71 96       	adiw	r30, 0x11	; 17
    46e8:	ce 01       	movw	r24, r28
    46ea:	01 96       	adiw	r24, 0x01	; 1
    46ec:	ae 01       	movw	r20, r28
    46ee:	4f 5d       	subi	r20, 0xDF	; 223
    46f0:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 16; i++){
		NVM.ADDR0 = addresses[i];
    46f2:	60 ec       	ldi	r22, 0xC0	; 192
    46f4:	71 e0       	ldi	r23, 0x01	; 1
    46f6:	21 91       	ld	r18, Z+
    46f8:	db 01       	movw	r26, r22
    46fa:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    46fc:	dc 01       	movw	r26, r24
    46fe:	2d 91       	ld	r18, X+
    4700:	cd 01       	movw	r24, r26
    4702:	db 01       	movw	r26, r22
    4704:	14 96       	adiw	r26, 0x04	; 4
    4706:	2c 93       	st	X, r18
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 16; i++){
    4708:	e4 17       	cp	r30, r20
    470a:	f5 07       	cpc	r31, r21
    470c:	a1 f7       	brne	.-24     	; 0x46f6 <eeprom_write_const+0x204>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    470e:	e0 ec       	ldi	r30, 0xC0	; 192
    4710:	f1 e0       	ldi	r31, 0x01	; 1
    4712:	85 e3       	ldi	r24, 0x35	; 53
    4714:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    4716:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    4718:	80 e1       	ldi	r24, 0x10	; 16
    471a:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    471c:	88 ed       	ldi	r24, 0xD8	; 216
    471e:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    4720:	81 e0       	ldi	r24, 0x01	; 1
    4722:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    4724:	87 85       	ldd	r24, Z+15	; 0x0f
    4726:	88 23       	and	r24, r24
    4728:	ec f3       	brlt	.-6      	; 0x4724 <eeprom_write_const+0x232>
}
    472a:	a0 96       	adiw	r28, 0x20	; 32
    472c:	cd bf       	out	0x3d, r28	; 61
    472e:	de bf       	out	0x3e, r29	; 62
    4730:	df 91       	pop	r29
    4732:	cf 91       	pop	r28
    4734:	1f 91       	pop	r17
    4736:	0f 91       	pop	r16
    4738:	ff 90       	pop	r15
    473a:	ef 90       	pop	r14
    473c:	df 90       	pop	r13
    473e:	cf 90       	pop	r12
    4740:	bf 90       	pop	r11
    4742:	af 90       	pop	r10
    4744:	9f 90       	pop	r9
    4746:	8f 90       	pop	r8
    4748:	7f 90       	pop	r7
    474a:	6f 90       	pop	r6
    474c:	5f 90       	pop	r5
    474e:	4f 90       	pop	r4
    4750:	08 95       	ret

00004752 <eeprom_write>:

void eeprom_write(void){
    4752:	ef 92       	push	r14
    4754:	ff 92       	push	r15
    4756:	0f 93       	push	r16
    4758:	1f 93       	push	r17
    475a:	cf 93       	push	r28
    475c:	df 93       	push	r29
    475e:	cd b7       	in	r28, 0x3d	; 61
    4760:	de b7       	in	r29, 0x3e	; 62
    4762:	a4 97       	sbiw	r28, 0x24	; 36
    4764:	cd bf       	out	0x3d, r28	; 61
    4766:	de bf       	out	0x3e, r29	; 62
	uint16_t a = (uint16_t) ((int16_t) alt); // creates an unsigned int of the altitude
    4768:	60 91 18 22 	lds	r22, 0x2218	; 0x802218 <alt>
    476c:	70 91 19 22 	lds	r23, 0x2219	; 0x802219 <alt+0x1>
    4770:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <alt+0x2>
    4774:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <alt+0x3>
    4778:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    477c:	16 2f       	mov	r17, r22
    477e:	07 2f       	mov	r16, r23
	uint16_t v = (uint16_t) ((int16_t) velocity);
    4780:	60 91 10 22 	lds	r22, 0x2210	; 0x802210 <velocity>
    4784:	70 91 11 22 	lds	r23, 0x2211	; 0x802211 <velocity+0x1>
    4788:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <velocity+0x2>
    478c:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <velocity+0x3>
    4790:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4794:	e6 2f       	mov	r30, r22
    4796:	f7 2f       	mov	r31, r23

	check_write = timer % 100;
    4798:	40 91 28 22 	lds	r20, 0x2228	; 0x802228 <timer>
    479c:	50 91 29 22 	lds	r21, 0x2229	; 0x802229 <timer+0x1>
    47a0:	9a 01       	movw	r18, r20
    47a2:	36 95       	lsr	r19
    47a4:	27 95       	ror	r18
    47a6:	36 95       	lsr	r19
    47a8:	27 95       	ror	r18
    47aa:	ab e7       	ldi	r26, 0x7B	; 123
    47ac:	b4 e1       	ldi	r27, 0x14	; 20
    47ae:	0e 94 9f 32 	call	0x653e	; 0x653e <__umulhisi3>
    47b2:	96 95       	lsr	r25
    47b4:	87 95       	ror	r24
    47b6:	64 e6       	ldi	r22, 0x64	; 100
    47b8:	68 9f       	mul	r22, r24
    47ba:	90 01       	movw	r18, r0
    47bc:	69 9f       	mul	r22, r25
    47be:	30 0d       	add	r19, r0
    47c0:	11 24       	eor	r1, r1
    47c2:	42 1b       	sub	r20, r18
    47c4:	53 0b       	sbc	r21, r19
    47c6:	40 93 2a 22 	sts	0x222A, r20	; 0x80222a <check_write>

	// saves data and addresses in array
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state, released};
    47ca:	e0 90 24 22 	lds	r14, 0x2224	; 0x802224 <packets>
    47ce:	f0 90 25 22 	lds	r15, 0x2225	; 0x802225 <packets+0x1>
    47d2:	a0 91 24 22 	lds	r26, 0x2224	; 0x802224 <packets>
    47d6:	b0 91 25 22 	lds	r27, 0x2225	; 0x802225 <packets+0x1>
    47da:	60 91 28 22 	lds	r22, 0x2228	; 0x802228 <timer>
    47de:	70 91 29 22 	lds	r23, 0x2229	; 0x802229 <timer+0x1>
    47e2:	40 91 28 22 	lds	r20, 0x2228	; 0x802228 <timer>
    47e6:	50 91 29 22 	lds	r21, 0x2229	; 0x802229 <timer+0x1>
    47ea:	30 91 2a 22 	lds	r19, 0x222A	; 0x80222a <check_write>
    47ee:	20 91 2a 22 	lds	r18, 0x222A	; 0x80222a <check_write>
    47f2:	90 91 47 22 	lds	r25, 0x2247	; 0x802247 <state>
    47f6:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <released>
    47fa:	09 83       	std	Y+1, r16	; 0x01
    47fc:	1a 83       	std	Y+2, r17	; 0x02
    47fe:	fb 82       	std	Y+3, r15	; 0x03
    4800:	ac 83       	std	Y+4, r26	; 0x04
    4802:	7d 83       	std	Y+5, r23	; 0x05
    4804:	4e 83       	std	Y+6, r20	; 0x06
    4806:	ff 83       	std	Y+7, r31	; 0x07
    4808:	e8 87       	std	Y+8, r30	; 0x08
    480a:	39 87       	std	Y+9, r19	; 0x09
    480c:	2a 87       	std	Y+10, r18	; 0x0a
    480e:	9b 87       	std	Y+11, r25	; 0x0b
    4810:	8c 87       	std	Y+12, r24	; 0x0c
    4812:	8c e0       	ldi	r24, 0x0C	; 12
    4814:	fe 01       	movw	r30, r28
    4816:	31 96       	adiw	r30, 0x01	; 1
    4818:	de 01       	movw	r26, r28
    481a:	1d 96       	adiw	r26, 0x0d	; 13
    481c:	01 90       	ld	r0, Z+
    481e:	0d 92       	st	X+, r0
    4820:	8a 95       	dec	r24
    4822:	e1 f7       	brne	.-8      	; 0x481c <eeprom_write+0xca>
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE, RELEASED_BYTE};
    4824:	8c e0       	ldi	r24, 0x0C	; 12
    4826:	ed e4       	ldi	r30, 0x4D	; 77
    4828:	f0 e2       	ldi	r31, 0x20	; 32
    482a:	de 01       	movw	r26, r28
    482c:	59 96       	adiw	r26, 0x19	; 25
    482e:	01 90       	ld	r0, Z+
    4830:	0d 92       	st	X+, r0
    4832:	8a 95       	dec	r24
    4834:	e1 f7       	brne	.-8      	; 0x482e <eeprom_write+0xdc>

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
    4836:	83 e3       	ldi	r24, 0x33	; 51
    4838:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < 12; i++){
		NVM.ADDR0 = addresses[i];
    4840:	e0 ec       	ldi	r30, 0xC0	; 192
    4842:	f1 e0       	ldi	r31, 0x01	; 1
    4844:	a9 e1       	ldi	r26, 0x19	; 25
    4846:	b0 e0       	ldi	r27, 0x00	; 0
    4848:	ac 0f       	add	r26, r28
    484a:	bd 1f       	adc	r27, r29
    484c:	a8 0f       	add	r26, r24
    484e:	b9 1f       	adc	r27, r25
    4850:	2c 91       	ld	r18, X
    4852:	20 83       	st	Z, r18
		NVM.DATA0 = data[i];
    4854:	ad e0       	ldi	r26, 0x0D	; 13
    4856:	b0 e0       	ldi	r27, 0x00	; 0
    4858:	ac 0f       	add	r26, r28
    485a:	bd 1f       	adc	r27, r29
    485c:	a8 0f       	add	r26, r24
    485e:	b9 1f       	adc	r27, r25
    4860:	2c 91       	ld	r18, X
    4862:	24 83       	std	Z+4, r18	; 0x04
    4864:	01 96       	adiw	r24, 0x01	; 1
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state, released};
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE, RELEASED_BYTE};

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 12; i++){
    4866:	8c 30       	cpi	r24, 0x0C	; 12
    4868:	91 05       	cpc	r25, r1
    486a:	61 f7       	brne	.-40     	; 0x4844 <eeprom_write+0xf2>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    486c:	e0 ec       	ldi	r30, 0xC0	; 192
    486e:	f1 e0       	ldi	r31, 0x01	; 1
    4870:	85 e3       	ldi	r24, 0x35	; 53
    4872:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    4874:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    4876:	80 e1       	ldi	r24, 0x10	; 16
    4878:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    487a:	88 ed       	ldi	r24, 0xD8	; 216
    487c:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    4882:	87 85       	ldd	r24, Z+15	; 0x0f
    4884:	88 23       	and	r24, r24
    4886:	ec f3       	brlt	.-6      	; 0x4882 <eeprom_write+0x130>
}
    4888:	a4 96       	adiw	r28, 0x24	; 36
    488a:	cd bf       	out	0x3d, r28	; 61
    488c:	de bf       	out	0x3e, r29	; 62
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	1f 91       	pop	r17
    4894:	0f 91       	pop	r16
    4896:	ff 90       	pop	r15
    4898:	ef 90       	pop	r14
    489a:	08 95       	ret

0000489c <time_update>:
	TCE0.CTRLA = 0x07; // divisor set to 1024 0x07
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void time_update(void){
    489c:	2f 92       	push	r2
    489e:	3f 92       	push	r3
    48a0:	4f 92       	push	r4
    48a2:	5f 92       	push	r5
    48a4:	6f 92       	push	r6
    48a6:	7f 92       	push	r7
    48a8:	8f 92       	push	r8
    48aa:	9f 92       	push	r9
    48ac:	af 92       	push	r10
    48ae:	bf 92       	push	r11
    48b0:	cf 92       	push	r12
    48b2:	df 92       	push	r13
    48b4:	ef 92       	push	r14
    48b6:	ff 92       	push	r15
    48b8:	0f 93       	push	r16
    48ba:	1f 93       	push	r17
    48bc:	cf 93       	push	r28
    48be:	df 93       	push	r29
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	c3 54       	subi	r28, 0x43	; 67
    48c6:	d1 09       	sbc	r29, r1
    48c8:	cd bf       	out	0x3d, r28	; 61
    48ca:	de bf       	out	0x3e, r29	; 62
	//packets++;
	
	packets++;
    48cc:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <packets>
    48d0:	90 91 25 22 	lds	r25, 0x2225	; 0x802225 <packets+0x1>
    48d4:	01 96       	adiw	r24, 0x01	; 1
    48d6:	80 93 24 22 	sts	0x2224, r24	; 0x802224 <packets>
    48da:	90 93 25 22 	sts	0x2225, r25	; 0x802225 <packets+0x1>
	sprintf(str,								format,										timer,										packets,
    48de:	60 91 ee 21 	lds	r22, 0x21EE	; 0x8021ee <angle>
    48e2:	70 91 ef 21 	lds	r23, 0x21EF	; 0x8021ef <angle+0x1>
    48e6:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <angle+0x2>
    48ea:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <angle+0x3>
    48ee:	20 91 47 22 	lds	r18, 0x2247	; 0x802247 <state>
    48f2:	29 83       	std	Y+1, r18	; 0x01
    48f4:	40 90 f2 21 	lds	r4, 0x21F2	; 0x8021f2 <rpm>
    48f8:	50 90 f3 21 	lds	r5, 0x21F3	; 0x8021f3 <rpm+0x1>
    48fc:	60 90 f4 21 	lds	r6, 0x21F4	; 0x8021f4 <rpm+0x2>
    4900:	70 90 f5 21 	lds	r7, 0x21F5	; 0x8021f5 <rpm+0x3>
    4904:	80 90 f6 21 	lds	r8, 0x21F6	; 0x8021f6 <roll>
    4908:	90 90 f7 21 	lds	r9, 0x21F7	; 0x8021f7 <roll+0x1>
    490c:	a0 90 f8 21 	lds	r10, 0x21F8	; 0x8021f8 <roll+0x2>
    4910:	b0 90 f9 21 	lds	r11, 0x21F9	; 0x8021f9 <roll+0x3>
    4914:	c0 90 fa 21 	lds	r12, 0x21FA	; 0x8021fa <pitch>
    4918:	d0 90 fb 21 	lds	r13, 0x21FB	; 0x8021fb <pitch+0x1>
    491c:	e0 90 fc 21 	lds	r14, 0x21FC	; 0x8021fc <pitch+0x2>
    4920:	f0 90 fd 21 	lds	r15, 0x21FD	; 0x8021fd <pitch+0x3>
    4924:	40 91 fe 21 	lds	r20, 0x21FE	; 0x8021fe <gps_sats>
    4928:	50 91 ff 21 	lds	r21, 0x21FF	; 0x8021ff <gps_sats+0x1>
    492c:	24 96       	adiw	r28, 0x04	; 4
    492e:	4e af       	std	Y+62, r20	; 0x3e
    4930:	5f af       	std	Y+63, r21	; 0x3f
    4932:	24 97       	sbiw	r28, 0x04	; 4
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,							((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,							(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,							((int16_t) (gps_alt)*10)%10,				gps_sats,									(int16_t) pitch,
    4934:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <gps_alt>
    4938:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <gps_alt+0x1>
    493c:	40 91 02 22 	lds	r20, 0x2202	; 0x802202 <gps_alt+0x2>
    4940:	50 91 03 22 	lds	r21, 0x2203	; 0x802203 <gps_alt+0x3>
    4944:	2a 83       	std	Y+2, r18	; 0x02
    4946:	3b 83       	std	Y+3, r19	; 0x03
    4948:	4c 83       	std	Y+4, r20	; 0x04
    494a:	5d 83       	std	Y+5, r21	; 0x05

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,								format,										timer,										packets,
    494c:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <gps_alt>
    4950:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <gps_alt+0x1>
    4954:	40 91 02 22 	lds	r20, 0x2202	; 0x802202 <gps_alt+0x2>
    4958:	50 91 03 22 	lds	r21, 0x2203	; 0x802203 <gps_alt+0x3>
    495c:	2e 83       	std	Y+6, r18	; 0x06
    495e:	3f 83       	std	Y+7, r19	; 0x07
    4960:	48 87       	std	Y+8, r20	; 0x08
    4962:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,							((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,							(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    4964:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <gps_long>
    4968:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <gps_long+0x1>
    496c:	40 91 06 22 	lds	r20, 0x2206	; 0x802206 <gps_long+0x2>
    4970:	50 91 07 22 	lds	r21, 0x2207	; 0x802207 <gps_long+0x3>
    4974:	2a 87       	std	Y+10, r18	; 0x0a
    4976:	3b 87       	std	Y+11, r19	; 0x0b
    4978:	4c 87       	std	Y+12, r20	; 0x0c
    497a:	5d 87       	std	Y+13, r21	; 0x0d

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,								format,										timer,										packets,
    497c:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <gps_long>
    4980:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <gps_long+0x1>
    4984:	40 91 06 22 	lds	r20, 0x2206	; 0x802206 <gps_long+0x2>
    4988:	50 91 07 22 	lds	r21, 0x2207	; 0x802207 <gps_long+0x3>
    498c:	2e 87       	std	Y+14, r18	; 0x0e
    498e:	3f 87       	std	Y+15, r19	; 0x0f
    4990:	48 8b       	std	Y+16, r20	; 0x10
    4992:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,							((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,							(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    4994:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <gps_lat>
    4998:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <gps_lat+0x1>
    499c:	40 91 0a 22 	lds	r20, 0x220A	; 0x80220a <gps_lat+0x2>
    49a0:	50 91 0b 22 	lds	r21, 0x220B	; 0x80220b <gps_lat+0x3>
    49a4:	2a 8b       	std	Y+18, r18	; 0x12
    49a6:	3b 8b       	std	Y+19, r19	; 0x13
    49a8:	4c 8b       	std	Y+20, r20	; 0x14
    49aa:	5d 8b       	std	Y+21, r21	; 0x15

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,								format,										timer,										packets,
    49ac:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <gps_lat>
    49b0:	30 91 09 22 	lds	r19, 0x2209	; 0x802209 <gps_lat+0x1>
    49b4:	40 91 0a 22 	lds	r20, 0x220A	; 0x80220a <gps_lat+0x2>
    49b8:	50 91 0b 22 	lds	r21, 0x220B	; 0x80220b <gps_lat+0x3>
    49bc:	2e 8b       	std	Y+22, r18	; 0x16
    49be:	3f 8b       	std	Y+23, r19	; 0x17
    49c0:	48 8f       	std	Y+24, r20	; 0x18
    49c2:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
    49c4:	20 91 0c 22 	lds	r18, 0x220C	; 0x80220c <gps_t>
    49c8:	30 91 0d 22 	lds	r19, 0x220D	; 0x80220d <gps_t+0x1>
    49cc:	40 91 0e 22 	lds	r20, 0x220E	; 0x80220e <gps_t+0x2>
    49d0:	50 91 0f 22 	lds	r21, 0x220F	; 0x80220f <gps_t+0x3>
    49d4:	2a 8f       	std	Y+26, r18	; 0x1a
    49d6:	3b 8f       	std	Y+27, r19	; 0x1b
    49d8:	4c 8f       	std	Y+28, r20	; 0x1c
    49da:	5d 8f       	std	Y+29, r21	; 0x1d
    49dc:	20 91 0c 22 	lds	r18, 0x220C	; 0x80220c <gps_t>
    49e0:	30 91 0d 22 	lds	r19, 0x220D	; 0x80220d <gps_t+0x1>
    49e4:	40 91 0e 22 	lds	r20, 0x220E	; 0x80220e <gps_t+0x2>
    49e8:	50 91 0f 22 	lds	r21, 0x220F	; 0x80220f <gps_t+0x3>
    49ec:	2e 8f       	std	Y+30, r18	; 0x1e
    49ee:	3f 8f       	std	Y+31, r19	; 0x1f
    49f0:	48 a3       	std	Y+32, r20	; 0x20
    49f2:	59 a3       	std	Y+33, r21	; 0x21
    49f4:	20 91 0c 22 	lds	r18, 0x220C	; 0x80220c <gps_t>
    49f8:	30 91 0d 22 	lds	r19, 0x220D	; 0x80220d <gps_t+0x1>
    49fc:	40 91 0e 22 	lds	r20, 0x220E	; 0x80220e <gps_t+0x2>
    4a00:	50 91 0f 22 	lds	r21, 0x220F	; 0x80220f <gps_t+0x3>
    4a04:	2a a3       	std	Y+34, r18	; 0x22
    4a06:	3b a3       	std	Y+35, r19	; 0x23
    4a08:	4c a3       	std	Y+36, r20	; 0x24
    4a0a:	5d a3       	std	Y+37, r21	; 0x25
    4a0c:	20 91 14 22 	lds	r18, 0x2214	; 0x802214 <volt>
    4a10:	30 91 15 22 	lds	r19, 0x2215	; 0x802215 <volt+0x1>
    4a14:	40 91 16 22 	lds	r20, 0x2216	; 0x802216 <volt+0x2>
    4a18:	50 91 17 22 	lds	r21, 0x2217	; 0x802217 <volt+0x3>
    4a1c:	2e a3       	std	Y+38, r18	; 0x26
    4a1e:	3f a3       	std	Y+39, r19	; 0x27
    4a20:	48 a7       	std	Y+40, r20	; 0x28
    4a22:	59 a7       	std	Y+41, r21	; 0x29

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,								format,										timer,										packets,
    4a24:	20 91 14 22 	lds	r18, 0x2214	; 0x802214 <volt>
    4a28:	30 91 15 22 	lds	r19, 0x2215	; 0x802215 <volt+0x1>
    4a2c:	40 91 16 22 	lds	r20, 0x2216	; 0x802216 <volt+0x2>
    4a30:	50 91 17 22 	lds	r21, 0x2217	; 0x802217 <volt+0x3>
    4a34:	2a a7       	std	Y+42, r18	; 0x2a
    4a36:	3b a7       	std	Y+43, r19	; 0x2b
    4a38:	4c a7       	std	Y+44, r20	; 0x2c
    4a3a:	5d a7       	std	Y+45, r21	; 0x2d
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
    4a3c:	20 91 1c 22 	lds	r18, 0x221C	; 0x80221c <temp>
    4a40:	30 91 1d 22 	lds	r19, 0x221D	; 0x80221d <temp+0x1>
    4a44:	40 91 1e 22 	lds	r20, 0x221E	; 0x80221e <temp+0x2>
    4a48:	50 91 1f 22 	lds	r21, 0x221F	; 0x80221f <temp+0x3>
    4a4c:	2e a7       	std	Y+46, r18	; 0x2e
    4a4e:	3f a7       	std	Y+47, r19	; 0x2f
    4a50:	48 ab       	std	Y+48, r20	; 0x30
    4a52:	59 ab       	std	Y+49, r21	; 0x31
    4a54:	20 91 1c 22 	lds	r18, 0x221C	; 0x80221c <temp>
    4a58:	30 91 1d 22 	lds	r19, 0x221D	; 0x80221d <temp+0x1>
    4a5c:	40 91 1e 22 	lds	r20, 0x221E	; 0x80221e <temp+0x2>
    4a60:	50 91 1f 22 	lds	r21, 0x221F	; 0x80221f <temp+0x3>
    4a64:	2a ab       	std	Y+50, r18	; 0x32
    4a66:	3b ab       	std	Y+51, r19	; 0x33
    4a68:	4c ab       	std	Y+52, r20	; 0x34
    4a6a:	5d ab       	std	Y+53, r21	; 0x35

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,								format,										timer,										packets,
    4a6c:	20 91 20 22 	lds	r18, 0x2220	; 0x802220 <press>
    4a70:	30 91 21 22 	lds	r19, 0x2221	; 0x802221 <press+0x1>
    4a74:	40 91 22 22 	lds	r20, 0x2222	; 0x802222 <press+0x2>
    4a78:	50 91 23 22 	lds	r21, 0x2223	; 0x802223 <press+0x3>
    4a7c:	2e ab       	std	Y+54, r18	; 0x36
    4a7e:	3f ab       	std	Y+55, r19	; 0x37
    4a80:	48 af       	std	Y+56, r20	; 0x38
    4a82:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
    4a84:	20 91 18 22 	lds	r18, 0x2218	; 0x802218 <alt>
    4a88:	30 91 19 22 	lds	r19, 0x2219	; 0x802219 <alt+0x1>
    4a8c:	40 91 1a 22 	lds	r20, 0x221A	; 0x80221a <alt+0x2>
    4a90:	50 91 1b 22 	lds	r21, 0x221B	; 0x80221b <alt+0x3>
    4a94:	2a af       	std	Y+58, r18	; 0x3a
    4a96:	3b af       	std	Y+59, r19	; 0x3b
    4a98:	4c af       	std	Y+60, r20	; 0x3c
    4a9a:	5d af       	std	Y+61, r21	; 0x3d

void time_update(void){
	//packets++;
	
	packets++;
	sprintf(str,								format,										timer,										packets,
    4a9c:	20 91 18 22 	lds	r18, 0x2218	; 0x802218 <alt>
    4aa0:	30 91 19 22 	lds	r19, 0x2219	; 0x802219 <alt+0x1>
    4aa4:	40 91 1a 22 	lds	r20, 0x221A	; 0x80221a <alt+0x2>
    4aa8:	50 91 1b 22 	lds	r21, 0x221B	; 0x80221b <alt+0x3>
    4aac:	22 96       	adiw	r28, 0x02	; 2
    4aae:	2c af       	std	Y+60, r18	; 0x3c
    4ab0:	3d af       	std	Y+61, r19	; 0x3d
    4ab2:	4e af       	std	Y+62, r20	; 0x3e
    4ab4:	5f af       	std	Y+63, r21	; 0x3f
    4ab6:	22 97       	sbiw	r28, 0x02	; 2
    4ab8:	20 90 24 22 	lds	r2, 0x2224	; 0x802224 <packets>
    4abc:	30 90 25 22 	lds	r3, 0x2225	; 0x802225 <packets+0x1>
    4ac0:	00 91 28 22 	lds	r16, 0x2228	; 0x802228 <timer>
    4ac4:	10 91 29 22 	lds	r17, 0x2229	; 0x802229 <timer+0x1>
    4ac8:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4acc:	7f 93       	push	r23
    4ace:	6f 93       	push	r22
    4ad0:	1f 92       	push	r1
    4ad2:	39 81       	ldd	r19, Y+1	; 0x01
    4ad4:	3f 93       	push	r19
    4ad6:	c3 01       	movw	r24, r6
    4ad8:	b2 01       	movw	r22, r4
    4ada:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4ade:	7f 93       	push	r23
    4ae0:	6f 93       	push	r22
    4ae2:	c5 01       	movw	r24, r10
    4ae4:	b4 01       	movw	r22, r8
    4ae6:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4aea:	7f 93       	push	r23
    4aec:	6f 93       	push	r22
    4aee:	c7 01       	movw	r24, r14
    4af0:	b6 01       	movw	r22, r12
    4af2:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4af6:	7f 93       	push	r23
    4af8:	6f 93       	push	r22
    4afa:	24 96       	adiw	r28, 0x04	; 4
    4afc:	4f ad       	ldd	r20, Y+63	; 0x3f
    4afe:	24 97       	sbiw	r28, 0x04	; 4
    4b00:	4f 93       	push	r20
    4b02:	23 96       	adiw	r28, 0x03	; 3
    4b04:	5f ad       	ldd	r21, Y+63	; 0x3f
    4b06:	23 97       	sbiw	r28, 0x03	; 3
    4b08:	5f 93       	push	r21
    4b0a:	6a 81       	ldd	r22, Y+2	; 0x02
    4b0c:	7b 81       	ldd	r23, Y+3	; 0x03
    4b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b10:	9d 81       	ldd	r25, Y+5	; 0x05
    4b12:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4b16:	9b 01       	movw	r18, r22
    4b18:	22 0f       	add	r18, r18
    4b1a:	33 1f       	adc	r19, r19
    4b1c:	66 0f       	add	r22, r22
    4b1e:	77 1f       	adc	r23, r23
    4b20:	66 0f       	add	r22, r22
    4b22:	77 1f       	adc	r23, r23
    4b24:	66 0f       	add	r22, r22
    4b26:	77 1f       	adc	r23, r23
    4b28:	c9 01       	movw	r24, r18
    4b2a:	86 0f       	add	r24, r22
    4b2c:	97 1f       	adc	r25, r23
    4b2e:	6a e0       	ldi	r22, 0x0A	; 10
    4b30:	70 e0       	ldi	r23, 0x00	; 0
    4b32:	0e 94 45 32 	call	0x648a	; 0x648a <__divmodhi4>
    4b36:	9f 93       	push	r25
    4b38:	8f 93       	push	r24
    4b3a:	6e 81       	ldd	r22, Y+6	; 0x06
    4b3c:	7f 81       	ldd	r23, Y+7	; 0x07
    4b3e:	88 85       	ldd	r24, Y+8	; 0x08
    4b40:	99 85       	ldd	r25, Y+9	; 0x09
    4b42:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4b46:	7f 93       	push	r23
    4b48:	6f 93       	push	r22
    4b4a:	20 e0       	ldi	r18, 0x00	; 0
    4b4c:	34 e2       	ldi	r19, 0x24	; 36
    4b4e:	44 e7       	ldi	r20, 0x74	; 116
    4b50:	59 e4       	ldi	r21, 0x49	; 73
    4b52:	6a 85       	ldd	r22, Y+10	; 0x0a
    4b54:	7b 85       	ldd	r23, Y+11	; 0x0b
    4b56:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b58:	9d 85       	ldd	r25, Y+13	; 0x0d
    4b5a:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    4b5e:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4b62:	20 e4       	ldi	r18, 0x40	; 64
    4b64:	32 e4       	ldi	r19, 0x42	; 66
    4b66:	4f e0       	ldi	r20, 0x0F	; 15
    4b68:	50 e0       	ldi	r21, 0x00	; 0
    4b6a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    4b6e:	9b 01       	movw	r18, r22
    4b70:	77 23       	and	r23, r23
    4b72:	24 f4       	brge	.+8      	; 0x4b7c <time_update+0x2e0>
    4b74:	22 27       	eor	r18, r18
    4b76:	33 27       	eor	r19, r19
    4b78:	26 1b       	sub	r18, r22
    4b7a:	37 0b       	sbc	r19, r23
    4b7c:	c9 01       	movw	r24, r18
    4b7e:	33 0f       	add	r19, r19
    4b80:	aa 0b       	sbc	r26, r26
    4b82:	bb 0b       	sbc	r27, r27
    4b84:	bf 93       	push	r27
    4b86:	af 93       	push	r26
    4b88:	9f 93       	push	r25
    4b8a:	8f 93       	push	r24
    4b8c:	6e 85       	ldd	r22, Y+14	; 0x0e
    4b8e:	7f 85       	ldd	r23, Y+15	; 0x0f
    4b90:	88 89       	ldd	r24, Y+16	; 0x10
    4b92:	99 89       	ldd	r25, Y+17	; 0x11
    4b94:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4b98:	7f 93       	push	r23
    4b9a:	6f 93       	push	r22
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	34 e2       	ldi	r19, 0x24	; 36
    4ba0:	44 e7       	ldi	r20, 0x74	; 116
    4ba2:	59 e4       	ldi	r21, 0x49	; 73
    4ba4:	6a 89       	ldd	r22, Y+18	; 0x12
    4ba6:	7b 89       	ldd	r23, Y+19	; 0x13
    4ba8:	8c 89       	ldd	r24, Y+20	; 0x14
    4baa:	9d 89       	ldd	r25, Y+21	; 0x15
    4bac:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    4bb0:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4bb4:	20 e4       	ldi	r18, 0x40	; 64
    4bb6:	32 e4       	ldi	r19, 0x42	; 66
    4bb8:	4f e0       	ldi	r20, 0x0F	; 15
    4bba:	50 e0       	ldi	r21, 0x00	; 0
    4bbc:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    4bc0:	9f 93       	push	r25
    4bc2:	8f 93       	push	r24
    4bc4:	7f 93       	push	r23
    4bc6:	6f 93       	push	r22
    4bc8:	6e 89       	ldd	r22, Y+22	; 0x16
    4bca:	7f 89       	ldd	r23, Y+23	; 0x17
    4bcc:	88 8d       	ldd	r24, Y+24	; 0x18
    4bce:	99 8d       	ldd	r25, Y+25	; 0x19
    4bd0:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4bd4:	7f 93       	push	r23
    4bd6:	6f 93       	push	r22
    4bd8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4bda:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4bdc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4bde:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4be0:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4be4:	0f 2e       	mov	r0, r31
    4be6:	f4 e6       	ldi	r31, 0x64	; 100
    4be8:	cf 2e       	mov	r12, r31
    4bea:	d1 2c       	mov	r13, r1
    4bec:	e1 2c       	mov	r14, r1
    4bee:	f1 2c       	mov	r15, r1
    4bf0:	f0 2d       	mov	r31, r0
    4bf2:	a7 01       	movw	r20, r14
    4bf4:	96 01       	movw	r18, r12
    4bf6:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    4bfa:	7f 93       	push	r23
    4bfc:	6f 93       	push	r22
    4bfe:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4c00:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4c02:	88 a1       	ldd	r24, Y+32	; 0x20
    4c04:	99 a1       	ldd	r25, Y+33	; 0x21
    4c06:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4c0a:	0f 2e       	mov	r0, r31
    4c0c:	f0 e1       	ldi	r31, 0x10	; 16
    4c0e:	8f 2e       	mov	r8, r31
    4c10:	f7 e2       	ldi	r31, 0x27	; 39
    4c12:	9f 2e       	mov	r9, r31
    4c14:	a1 2c       	mov	r10, r1
    4c16:	b1 2c       	mov	r11, r1
    4c18:	f0 2d       	mov	r31, r0
    4c1a:	a5 01       	movw	r20, r10
    4c1c:	94 01       	movw	r18, r8
    4c1e:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    4c22:	a7 01       	movw	r20, r14
    4c24:	96 01       	movw	r18, r12
    4c26:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    4c2a:	3f 93       	push	r19
    4c2c:	2f 93       	push	r18
    4c2e:	6a a1       	ldd	r22, Y+34	; 0x22
    4c30:	7b a1       	ldd	r23, Y+35	; 0x23
    4c32:	8c a1       	ldd	r24, Y+36	; 0x24
    4c34:	9d a1       	ldd	r25, Y+37	; 0x25
    4c36:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4c3a:	a5 01       	movw	r20, r10
    4c3c:	94 01       	movw	r18, r8
    4c3e:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__divmodsi4>
    4c42:	3f 93       	push	r19
    4c44:	2f 93       	push	r18
    4c46:	20 e0       	ldi	r18, 0x00	; 0
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	40 e2       	ldi	r20, 0x20	; 32
    4c4c:	51 e4       	ldi	r21, 0x41	; 65
    4c4e:	6e a1       	ldd	r22, Y+38	; 0x26
    4c50:	7f a1       	ldd	r23, Y+39	; 0x27
    4c52:	88 a5       	ldd	r24, Y+40	; 0x28
    4c54:	99 a5       	ldd	r25, Y+41	; 0x29
    4c56:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    4c5a:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4c5e:	cb 01       	movw	r24, r22
    4c60:	6a e0       	ldi	r22, 0x0A	; 10
    4c62:	70 e0       	ldi	r23, 0x00	; 0
    4c64:	0e 94 45 32 	call	0x648a	; 0x648a <__divmodhi4>
    4c68:	9f 93       	push	r25
    4c6a:	8f 93       	push	r24
    4c6c:	6a a5       	ldd	r22, Y+42	; 0x2a
    4c6e:	7b a5       	ldd	r23, Y+43	; 0x2b
    4c70:	8c a5       	ldd	r24, Y+44	; 0x2c
    4c72:	9d a5       	ldd	r25, Y+45	; 0x2d
    4c74:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4c78:	7f 93       	push	r23
    4c7a:	6f 93       	push	r22
    4c7c:	20 e0       	ldi	r18, 0x00	; 0
    4c7e:	30 e0       	ldi	r19, 0x00	; 0
    4c80:	40 e2       	ldi	r20, 0x20	; 32
    4c82:	51 e4       	ldi	r21, 0x41	; 65
    4c84:	6e a5       	ldd	r22, Y+46	; 0x2e
    4c86:	7f a5       	ldd	r23, Y+47	; 0x2f
    4c88:	88 a9       	ldd	r24, Y+48	; 0x30
    4c8a:	99 a9       	ldd	r25, Y+49	; 0x31
    4c8c:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	38 eb       	ldi	r19, 0xB8	; 184
    4c94:	4a e2       	ldi	r20, 0x2A	; 42
    4c96:	55 e4       	ldi	r21, 0x45	; 69
    4c98:	cd d7       	rcall	.+3994   	; 0x5c34 <__subsf3>
    4c9a:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4c9e:	cb 01       	movw	r24, r22
    4ca0:	6a e0       	ldi	r22, 0x0A	; 10
    4ca2:	70 e0       	ldi	r23, 0x00	; 0
    4ca4:	0e 94 45 32 	call	0x648a	; 0x648a <__divmodhi4>
    4ca8:	9f 93       	push	r25
    4caa:	8f 93       	push	r24
    4cac:	23 e3       	ldi	r18, 0x33	; 51
    4cae:	33 e9       	ldi	r19, 0x93	; 147
    4cb0:	48 e8       	ldi	r20, 0x88	; 136
    4cb2:	53 e4       	ldi	r21, 0x43	; 67
    4cb4:	6a a9       	ldd	r22, Y+50	; 0x32
    4cb6:	7b a9       	ldd	r23, Y+51	; 0x33
    4cb8:	8c a9       	ldd	r24, Y+52	; 0x34
    4cba:	9d a9       	ldd	r25, Y+53	; 0x35
    4cbc:	bb d7       	rcall	.+3958   	; 0x5c34 <__subsf3>
    4cbe:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4cc2:	7f 93       	push	r23
    4cc4:	6f 93       	push	r22
    4cc6:	6e a9       	ldd	r22, Y+54	; 0x36
    4cc8:	7f a9       	ldd	r23, Y+55	; 0x37
    4cca:	88 ad       	ldd	r24, Y+56	; 0x38
    4ccc:	99 ad       	ldd	r25, Y+57	; 0x39
    4cce:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4cd2:	9f 93       	push	r25
    4cd4:	8f 93       	push	r24
    4cd6:	7f 93       	push	r23
    4cd8:	6f 93       	push	r22
    4cda:	20 e0       	ldi	r18, 0x00	; 0
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
    4cde:	40 e2       	ldi	r20, 0x20	; 32
    4ce0:	51 e4       	ldi	r21, 0x41	; 65
    4ce2:	6a ad       	ldd	r22, Y+58	; 0x3a
    4ce4:	7b ad       	ldd	r23, Y+59	; 0x3b
    4ce6:	8c ad       	ldd	r24, Y+60	; 0x3c
    4ce8:	9d ad       	ldd	r25, Y+61	; 0x3d
    4cea:	0e 94 9f 30 	call	0x613e	; 0x613e <__mulsf3>
    4cee:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4cf2:	9b 01       	movw	r18, r22
    4cf4:	77 23       	and	r23, r23
    4cf6:	24 f4       	brge	.+8      	; 0x4d00 <time_update+0x464>
    4cf8:	22 27       	eor	r18, r18
    4cfa:	33 27       	eor	r19, r19
    4cfc:	26 1b       	sub	r18, r22
    4cfe:	37 0b       	sbc	r19, r23
    4d00:	c9 01       	movw	r24, r18
    4d02:	6a e0       	ldi	r22, 0x0A	; 10
    4d04:	70 e0       	ldi	r23, 0x00	; 0
    4d06:	0e 94 45 32 	call	0x648a	; 0x648a <__divmodhi4>
    4d0a:	9f 93       	push	r25
    4d0c:	8f 93       	push	r24
    4d0e:	22 96       	adiw	r28, 0x02	; 2
    4d10:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d12:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d14:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d16:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d18:	22 97       	sbiw	r28, 0x02	; 2
    4d1a:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <__fixsfsi>
    4d1e:	7f 93       	push	r23
    4d20:	6f 93       	push	r22
    4d22:	3f 92       	push	r3
    4d24:	2f 92       	push	r2
    4d26:	1f 93       	push	r17
    4d28:	0f 93       	push	r16
    4d2a:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <format+0x1>
    4d2e:	8f 93       	push	r24
    4d30:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <format>
    4d34:	8f 93       	push	r24
    4d36:	89 e9       	ldi	r24, 0x99	; 153
    4d38:	92 e2       	ldi	r25, 0x22	; 34
    4d3a:	9f 93       	push	r25
    4d3c:	8f 93       	push	r24
    4d3e:	0e 94 04 34 	call	0x6808	; 0x6808 <sprintf>
	(int16_t) (alt),							((int16_t) abs(alt*10))%10,					(int32_t) press,							(int16_t) (temp-273.15),  ((int16_t) (temp*10-2731.5))%10,
	(int16_t) volt,								((int16_t) (volt *10)) %10, 				(int16_t) (((int32_t)gps_t)/10000),			(int16_t) ((((int32_t)gps_t)%10000)/100),						(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,							((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,							(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,							((int16_t) (gps_alt)*10)%10,				gps_sats,									(int16_t) pitch,
	(int16_t) roll,								(int16_t) rpm,								state,										(int16_t) angle); // Data Logging Test
	printf(str);
    4d42:	cd bf       	out	0x3d, r28	; 61
    4d44:	de bf       	out	0x3e, r29	; 62
    4d46:	89 e9       	ldi	r24, 0x99	; 153
    4d48:	92 e2       	ldi	r25, 0x22	; 34
    4d4a:	9f 93       	push	r25
    4d4c:	8f 93       	push	r24
    4d4e:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <printf>
	
	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);
	eeprom_write();
    4d52:	ff dc       	rcall	.-1538   	; 0x4752 <eeprom_write>

	time_flag = 0;
    4d54:	10 92 45 22 	sts	0x2245, r1	; 0x802245 <time_flag>
}
    4d58:	0f 90       	pop	r0
    4d5a:	0f 90       	pop	r0
    4d5c:	cd 5b       	subi	r28, 0xBD	; 189
    4d5e:	df 4f       	sbci	r29, 0xFF	; 255
    4d60:	cd bf       	out	0x3d, r28	; 61
    4d62:	de bf       	out	0x3e, r29	; 62
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	1f 91       	pop	r17
    4d6a:	0f 91       	pop	r16
    4d6c:	ff 90       	pop	r15
    4d6e:	ef 90       	pop	r14
    4d70:	df 90       	pop	r13
    4d72:	cf 90       	pop	r12
    4d74:	bf 90       	pop	r11
    4d76:	af 90       	pop	r10
    4d78:	9f 90       	pop	r9
    4d7a:	8f 90       	pop	r8
    4d7c:	7f 90       	pop	r7
    4d7e:	6f 90       	pop	r6
    4d80:	5f 90       	pop	r5
    4d82:	4f 90       	pop	r4
    4d84:	3f 90       	pop	r3
    4d86:	2f 90       	pop	r2
    4d88:	08 95       	ret

00004d8a <eeprom_read>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

uint8_t	eeprom_read(uint16_t address){
    4d8a:	cf 93       	push	r28
    4d8c:	df 93       	push	r29
	NVM.CMD = READ_EEPROM;
    4d8e:	c0 ec       	ldi	r28, 0xC0	; 192
    4d90:	d1 e0       	ldi	r29, 0x01	; 1
    4d92:	26 e0       	ldi	r18, 0x06	; 6
    4d94:	2a 87       	std	Y+10, r18	; 0x0a
	NVM.ADDR0 = address & 0xFF;
    4d96:	88 83       	st	Y, r24
	NVM.ADDR1 = address >> 8;
    4d98:	99 83       	std	Y+1, r25	; 0x01
	CCP = CCP_IOREG_MODE;
    4d9a:	88 ed       	ldi	r24, 0xD8	; 216
    4d9c:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    4d9e:	81 e0       	ldi	r24, 0x01	; 1
    4da0:	8b 87       	std	Y+11, r24	; 0x0b
	delay_ms(1);
    4da2:	66 ed       	ldi	r22, 0xD6	; 214
    4da4:	74 e1       	ldi	r23, 0x14	; 20
    4da6:	80 e0       	ldi	r24, 0x00	; 0
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__portable_avr_delay_cycles>
	uint8_t byte = NVM.DATA0;
    4dae:	8c 81       	ldd	r24, Y+4	; 0x04
	return byte;
}
    4db0:	df 91       	pop	r29
    4db2:	cf 91       	pop	r28
    4db4:	08 95       	ret

00004db6 <system_init>:
	}
}


// Sensor functions
void system_init(void){
    4db6:	2f 92       	push	r2
    4db8:	3f 92       	push	r3
    4dba:	4f 92       	push	r4
    4dbc:	5f 92       	push	r5
    4dbe:	6f 92       	push	r6
    4dc0:	7f 92       	push	r7
    4dc2:	8f 92       	push	r8
    4dc4:	9f 92       	push	r9
    4dc6:	af 92       	push	r10
    4dc8:	bf 92       	push	r11
    4dca:	cf 92       	push	r12
    4dcc:	df 92       	push	r13
    4dce:	ef 92       	push	r14
    4dd0:	ff 92       	push	r15
    4dd2:	0f 93       	push	r16
    4dd4:	1f 93       	push	r17
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	cd b7       	in	r28, 0x3d	; 61
    4ddc:	de b7       	in	r29, 0x3e	; 62
    4dde:	25 97       	sbiw	r28, 0x05	; 5
    4de0:	cd bf       	out	0x3d, r28	; 61
    4de2:	de bf       	out	0x3e, r29	; 62
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    4de4:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    4de8:	6b ea       	ldi	r22, 0xAB	; 171
    4dea:	79 e2       	ldi	r23, 0x29	; 41
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__portable_avr_delay_cycles>
	sei();	// Enables global interrupts
    4df4:	78 94       	sei

	// Initialization of pins
	PORTC.DIR = 0xBC; // makes Port C have pins, 7, 5, 4, 3, and 2 be output (0b10111100)
    4df6:	8c eb       	ldi	r24, 0xBC	; 188
    4df8:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // enables all level interrupts
    4dfc:	87 e0       	ldi	r24, 0x07	; 7
    4dfe:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// Driver Initialization
	cam_init();				// Initializes the Camera
    4e02:	0e 94 4e 14 	call	0x289c	; 0x289c <cam_init>
	data_terminal_init();	// Initializes the OpenLog
    4e06:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <data_terminal_init>
	delay_ms(500);			// Delay to ensure clean writing
    4e0a:	6b ea       	ldi	r22, 0xAB	; 171
    4e0c:	70 eb       	ldi	r23, 0xB0	; 176
    4e0e:	88 e2       	ldi	r24, 0x28	; 40
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__portable_avr_delay_cycles>

	(*GPS_TERMINAL_SERIAL).CTRLA = USART_RXCINTLVL_HI_gc;
}

void xbee_init(void){
	USARTE0.CTRLA = USART_RXCINTLVL_MED_gc;
    4e16:	80 e2       	ldi	r24, 0x20	; 32
    4e18:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	// Driver Initialization
	cam_init();				// Initializes the Camera
	data_terminal_init();	// Initializes the OpenLog
	delay_ms(500);			// Delay to ensure clean writing
	xbee_init();			// Sets up XBEE command interrupt
	gps_init();				// Starts the GPS interrupt
    4e1c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <gps_init>

	hall_sensor_init();		// Initializes the hall effect sensor (used here for debugging)
    4e20:	0e 94 05 18 	call	0x300a	; 0x300a <hall_sensor_init>
	thermistor_init();		// Initializes the thermistor
    4e24:	0e 94 60 14 	call	0x28c0	; 0x28c0 <thermistor_init>
	voltage_init();			// Initializes the voltage reader
    4e28:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <voltage_init>
	spi_init();				// Initializes the SPI communication
    4e2c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <spi_init>
	pressure_init();		// Initializes the pressure sensor
    4e30:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <pressure_init>
	bno_init();				// Initializes the IMU
    4e34:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <bno_init>
	clock_init();			// Starts the clock for data transmission
    4e38:	03 d8       	rcall	.-4090   	; 0x3e40 <clock_init>

	release_servo_init();	// Initializes the release servo
    4e3a:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <release_servo_init>
	fin_servo_init();		// Initializes the timer for the servo
    4e3e:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <fin_servo_init>

	// Check EEPROM
	uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
    4e42:	82 e0       	ldi	r24, 0x02	; 2
    4e44:	90 e1       	ldi	r25, 0x10	; 16
    4e46:	a1 df       	rcall	.-190    	; 0x4d8a <eeprom_read>
    4e48:	89 83       	std	Y+1, r24	; 0x01
	uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);
    4e4a:	8f e1       	ldi	r24, 0x1F	; 31
    4e4c:	90 e1       	ldi	r25, 0x10	; 16
    4e4e:	9d df       	rcall	.-198    	; 0x4d8a <eeprom_read>

	if((b1 == b2) && (b1 != 0xFF)){
    4e50:	29 81       	ldd	r18, Y+1	; 0x01
    4e52:	28 13       	cpse	r18, r24
    4e54:	e0 c1       	rjmp	.+960    	; 0x5216 <system_init+0x460>
    4e56:	2f 3f       	cpi	r18, 0xFF	; 255
    4e58:	09 f4       	brne	.+2      	; 0x4e5c <system_init+0xa6>
    4e5a:	dd c1       	rjmp	.+954    	; 0x5216 <system_init+0x460>
		//printf("Reading EEPROM\n");
		uint64_t p =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    4e5c:	80 e1       	ldi	r24, 0x10	; 16
    4e5e:	90 e1       	ldi	r25, 0x10	; 16
    4e60:	94 df       	rcall	.-216    	; 0x4d8a <eeprom_read>
    4e62:	89 83       	std	Y+1, r24	; 0x01
    4e64:	8f e0       	ldi	r24, 0x0F	; 15
    4e66:	90 e1       	ldi	r25, 0x10	; 16
    4e68:	90 df       	rcall	.-224    	; 0x4d8a <eeprom_read>
    4e6a:	f8 2f       	mov	r31, r24
    4e6c:	29 81       	ldd	r18, Y+1	; 0x01
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	40 e0       	ldi	r20, 0x00	; 0
    4e72:	50 e0       	ldi	r21, 0x00	; 0
    4e74:	60 e0       	ldi	r22, 0x00	; 0
    4e76:	70 e0       	ldi	r23, 0x00	; 0
    4e78:	80 e0       	ldi	r24, 0x00	; 0
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	08 e3       	ldi	r16, 0x38	; 56
    4e7e:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    4e82:	29 83       	std	Y+1, r18	; 0x01
    4e84:	93 2e       	mov	r9, r19
    4e86:	a4 2e       	mov	r10, r20
    4e88:	e5 2e       	mov	r14, r21
    4e8a:	6a 83       	std	Y+2, r22	; 0x02
    4e8c:	e7 2f       	mov	r30, r23
    4e8e:	f8 2e       	mov	r15, r24
    4e90:	19 2f       	mov	r17, r25
    4e92:	2f 2f       	mov	r18, r31
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	40 e0       	ldi	r20, 0x00	; 0
    4e98:	50 e0       	ldi	r21, 0x00	; 0
    4e9a:	60 e0       	ldi	r22, 0x00	; 0
    4e9c:	70 e0       	ldi	r23, 0x00	; 0
    4e9e:	80 e0       	ldi	r24, 0x00	; 0
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	00 e3       	ldi	r16, 0x30	; 48
    4ea4:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    4ea8:	f9 81       	ldd	r31, Y+1	; 0x01
    4eaa:	f2 2b       	or	r31, r18
    4eac:	f9 83       	std	Y+1, r31	; 0x01
    4eae:	93 2a       	or	r9, r19
    4eb0:	a4 2a       	or	r10, r20
    4eb2:	e5 2a       	or	r14, r21
    4eb4:	2a 81       	ldd	r18, Y+2	; 0x02
    4eb6:	26 2b       	or	r18, r22
    4eb8:	2a 83       	std	Y+2, r18	; 0x02
    4eba:	de 2e       	mov	r13, r30
    4ebc:	d7 2a       	or	r13, r23
    4ebe:	f8 2a       	or	r15, r24
    4ec0:	19 2b       	or	r17, r25
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    4ec2:	8e e0       	ldi	r24, 0x0E	; 14
    4ec4:	90 e1       	ldi	r25, 0x10	; 16
    4ec6:	61 df       	rcall	.-318    	; 0x4d8a <eeprom_read>
    4ec8:	08 2f       	mov	r16, r24
    4eca:	8d e0       	ldi	r24, 0x0D	; 13
    4ecc:	90 e1       	ldi	r25, 0x10	; 16
    4ece:	5d df       	rcall	.-326    	; 0x4d8a <eeprom_read>
    4ed0:	48 2e       	mov	r4, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    4ed2:	8c e0       	ldi	r24, 0x0C	; 12
    4ed4:	90 e1       	ldi	r25, 0x10	; 16
    4ed6:	59 df       	rcall	.-334    	; 0x4d8a <eeprom_read>
    4ed8:	58 2e       	mov	r5, r24
    4eda:	8b e0       	ldi	r24, 0x0B	; 11
    4edc:	90 e1       	ldi	r25, 0x10	; 16
    4ede:	55 df       	rcall	.-342    	; 0x4d8a <eeprom_read>
    4ee0:	68 2e       	mov	r6, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0));
    4ee2:	8a e0       	ldi	r24, 0x0A	; 10
    4ee4:	90 e1       	ldi	r25, 0x10	; 16
    4ee6:	51 df       	rcall	.-350    	; 0x4d8a <eeprom_read>
    4ee8:	78 2e       	mov	r7, r24
    4eea:	89 e0       	ldi	r24, 0x09	; 9
    4eec:	90 e1       	ldi	r25, 0x10	; 16
    4eee:	4d df       	rcall	.-358    	; 0x4d8a <eeprom_read>
    4ef0:	88 2e       	mov	r8, r24
    4ef2:	20 2f       	mov	r18, r16
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	40 e0       	ldi	r20, 0x00	; 0
    4ef8:	50 e0       	ldi	r21, 0x00	; 0
    4efa:	60 e0       	ldi	r22, 0x00	; 0
    4efc:	70 e0       	ldi	r23, 0x00	; 0
    4efe:	80 e0       	ldi	r24, 0x00	; 0
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	08 e2       	ldi	r16, 0x28	; 40
    4f04:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    4f08:	e9 81       	ldd	r30, Y+1	; 0x01
    4f0a:	e8 29       	or	r30, r8
    4f0c:	e2 2b       	or	r30, r18
    4f0e:	e9 83       	std	Y+1, r30	; 0x01
    4f10:	93 2a       	or	r9, r19
    4f12:	a4 2a       	or	r10, r20
    4f14:	e5 2a       	or	r14, r21
    4f16:	fa 81       	ldd	r31, Y+2	; 0x02
    4f18:	f6 2b       	or	r31, r22
    4f1a:	fa 83       	std	Y+2, r31	; 0x02
    4f1c:	e7 2f       	mov	r30, r23
    4f1e:	ed 29       	or	r30, r13
    4f20:	f8 2a       	or	r15, r24
    4f22:	19 2b       	or	r17, r25
    4f24:	24 2d       	mov	r18, r4
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	40 e0       	ldi	r20, 0x00	; 0
    4f2a:	50 e0       	ldi	r21, 0x00	; 0
    4f2c:	60 e0       	ldi	r22, 0x00	; 0
    4f2e:	70 e0       	ldi	r23, 0x00	; 0
    4f30:	80 e0       	ldi	r24, 0x00	; 0
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	00 e2       	ldi	r16, 0x20	; 32
    4f36:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    4f3a:	f9 81       	ldd	r31, Y+1	; 0x01
    4f3c:	f2 2b       	or	r31, r18
    4f3e:	f9 83       	std	Y+1, r31	; 0x01
    4f40:	93 2a       	or	r9, r19
    4f42:	a4 2a       	or	r10, r20
    4f44:	e5 2a       	or	r14, r21
    4f46:	fa 81       	ldd	r31, Y+2	; 0x02
    4f48:	f6 2b       	or	r31, r22
    4f4a:	fa 83       	std	Y+2, r31	; 0x02
    4f4c:	e7 2b       	or	r30, r23
    4f4e:	f8 2a       	or	r15, r24
    4f50:	19 2b       	or	r17, r25
    4f52:	25 2d       	mov	r18, r5
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	40 e0       	ldi	r20, 0x00	; 0
    4f58:	50 e0       	ldi	r21, 0x00	; 0
    4f5a:	60 e0       	ldi	r22, 0x00	; 0
    4f5c:	70 e0       	ldi	r23, 0x00	; 0
    4f5e:	80 e0       	ldi	r24, 0x00	; 0
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	08 e1       	ldi	r16, 0x18	; 24
    4f64:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    4f68:	f9 81       	ldd	r31, Y+1	; 0x01
    4f6a:	f2 2b       	or	r31, r18
    4f6c:	f9 83       	std	Y+1, r31	; 0x01
    4f6e:	93 2a       	or	r9, r19
    4f70:	a4 2a       	or	r10, r20
    4f72:	e5 2a       	or	r14, r21
    4f74:	fa 81       	ldd	r31, Y+2	; 0x02
    4f76:	f6 2b       	or	r31, r22
    4f78:	fa 83       	std	Y+2, r31	; 0x02
    4f7a:	e7 2b       	or	r30, r23
    4f7c:	f8 2a       	or	r15, r24
    4f7e:	19 2b       	or	r17, r25
    4f80:	26 2d       	mov	r18, r6
    4f82:	30 e0       	ldi	r19, 0x00	; 0
    4f84:	40 e0       	ldi	r20, 0x00	; 0
    4f86:	50 e0       	ldi	r21, 0x00	; 0
    4f88:	60 e0       	ldi	r22, 0x00	; 0
    4f8a:	70 e0       	ldi	r23, 0x00	; 0
    4f8c:	80 e0       	ldi	r24, 0x00	; 0
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	00 e1       	ldi	r16, 0x10	; 16
    4f92:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    4f96:	f9 81       	ldd	r31, Y+1	; 0x01
    4f98:	f2 2b       	or	r31, r18
    4f9a:	f9 83       	std	Y+1, r31	; 0x01
    4f9c:	93 2a       	or	r9, r19
    4f9e:	a4 2a       	or	r10, r20
    4fa0:	e5 2a       	or	r14, r21
    4fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    4fa4:	f6 2b       	or	r31, r22
    4fa6:	e7 2b       	or	r30, r23
    4fa8:	f8 2a       	or	r15, r24
    4faa:	19 2b       	or	r17, r25
    4fac:	27 2d       	mov	r18, r7
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	40 e0       	ldi	r20, 0x00	; 0
    4fb2:	50 e0       	ldi	r21, 0x00	; 0
    4fb4:	60 e0       	ldi	r22, 0x00	; 0
    4fb6:	70 e0       	ldi	r23, 0x00	; 0
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	08 e0       	ldi	r16, 0x08	; 8
    4fbe:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    4fc2:	89 80       	ldd	r8, Y+1	; 0x01
    4fc4:	82 2a       	or	r8, r18
    4fc6:	93 2a       	or	r9, r19
    4fc8:	a4 2a       	or	r10, r20
    4fca:	be 2c       	mov	r11, r14
    4fcc:	b5 2a       	or	r11, r21
    4fce:	cf 2e       	mov	r12, r31
    4fd0:	c6 2a       	or	r12, r22
    4fd2:	de 2e       	mov	r13, r30
    4fd4:	d7 2a       	or	r13, r23
    4fd6:	f8 2a       	or	r15, r24
    4fd8:	19 2b       	or	r17, r25
		uint64_t t =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    4fda:	89 e1       	ldi	r24, 0x19	; 25
    4fdc:	90 e1       	ldi	r25, 0x10	; 16
    4fde:	d5 de       	rcall	.-598    	; 0x4d8a <eeprom_read>
    4fe0:	89 83       	std	Y+1, r24	; 0x01
    4fe2:	88 e1       	ldi	r24, 0x18	; 24
    4fe4:	90 e1       	ldi	r25, 0x10	; 16
    4fe6:	d1 de       	rcall	.-606    	; 0x4d8a <eeprom_read>
    4fe8:	e8 2e       	mov	r14, r24
    4fea:	29 81       	ldd	r18, Y+1	; 0x01
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	40 e0       	ldi	r20, 0x00	; 0
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	60 e0       	ldi	r22, 0x00	; 0
    4ff4:	70 e0       	ldi	r23, 0x00	; 0
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	08 e3       	ldi	r16, 0x38	; 56
    4ffc:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    5000:	b2 2f       	mov	r27, r18
    5002:	33 2e       	mov	r3, r19
    5004:	24 2e       	mov	r2, r20
    5006:	a5 2f       	mov	r26, r21
    5008:	f6 2f       	mov	r31, r22
    500a:	e7 2f       	mov	r30, r23
    500c:	8a 83       	std	Y+2, r24	; 0x02
    500e:	99 83       	std	Y+1, r25	; 0x01
    5010:	2e 2d       	mov	r18, r14
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	50 e0       	ldi	r21, 0x00	; 0
    5018:	60 e0       	ldi	r22, 0x00	; 0
    501a:	70 e0       	ldi	r23, 0x00	; 0
    501c:	80 e0       	ldi	r24, 0x00	; 0
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	00 e3       	ldi	r16, 0x30	; 48
    5022:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    5026:	eb 2e       	mov	r14, r27
    5028:	e2 2a       	or	r14, r18
    502a:	33 2a       	or	r3, r19
    502c:	24 2a       	or	r2, r20
    502e:	5a 2e       	mov	r5, r26
    5030:	55 2a       	or	r5, r21
    5032:	6f 2e       	mov	r6, r31
    5034:	66 2a       	or	r6, r22
    5036:	7e 2e       	mov	r7, r30
    5038:	77 2a       	or	r7, r23
    503a:	2a 81       	ldd	r18, Y+2	; 0x02
    503c:	28 2b       	or	r18, r24
    503e:	2d 83       	std	Y+5, r18	; 0x05
    5040:	89 81       	ldd	r24, Y+1	; 0x01
    5042:	89 2b       	or	r24, r25
    5044:	8c 83       	std	Y+4, r24	; 0x04
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    5046:	87 e1       	ldi	r24, 0x17	; 23
    5048:	90 e1       	ldi	r25, 0x10	; 16
    504a:	9f de       	rcall	.-706    	; 0x4d8a <eeprom_read>
    504c:	08 2f       	mov	r16, r24
    504e:	86 e1       	ldi	r24, 0x16	; 22
    5050:	90 e1       	ldi	r25, 0x10	; 16
    5052:	9b de       	rcall	.-714    	; 0x4d8a <eeprom_read>
    5054:	48 2e       	mov	r4, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    5056:	85 e1       	ldi	r24, 0x15	; 21
    5058:	90 e1       	ldi	r25, 0x10	; 16
    505a:	97 de       	rcall	.-722    	; 0x4d8a <eeprom_read>
    505c:	89 83       	std	Y+1, r24	; 0x01
    505e:	84 e1       	ldi	r24, 0x14	; 20
    5060:	90 e1       	ldi	r25, 0x10	; 16
    5062:	93 de       	rcall	.-730    	; 0x4d8a <eeprom_read>
    5064:	8a 83       	std	Y+2, r24	; 0x02
    5066:	83 e1       	ldi	r24, 0x13	; 19
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8   | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0));
    5068:	90 e1       	ldi	r25, 0x10	; 16
    506a:	8f de       	rcall	.-738    	; 0x4d8a <eeprom_read>
    506c:	8b 83       	std	Y+3, r24	; 0x03
    506e:	82 e1       	ldi	r24, 0x12	; 18
    5070:	90 e1       	ldi	r25, 0x10	; 16
    5072:	8b de       	rcall	.-746    	; 0x4d8a <eeprom_read>
    5074:	a8 2f       	mov	r26, r24
    5076:	e9 e3       	ldi	r30, 0x39	; 57
    5078:	f0 e2       	ldi	r31, 0x20	; 32
    507a:	80 82       	st	Z, r8
		memcpy(&ground_p, &p, 8);
    507c:	91 82       	std	Z+1, r9	; 0x01
    507e:	a2 82       	std	Z+2, r10	; 0x02
    5080:	b3 82       	std	Z+3, r11	; 0x03
    5082:	c4 82       	std	Z+4, r12	; 0x04
    5084:	d5 82       	std	Z+5, r13	; 0x05
    5086:	f6 82       	std	Z+6, r15	; 0x06
    5088:	17 83       	std	Z+7, r17	; 0x07
    508a:	e5 e3       	ldi	r30, 0x35	; 53
    508c:	f0 e2       	ldi	r31, 0x20	; 32
    508e:	20 2f       	mov	r18, r16
		memcpy(&ground_t, &t, 8);
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	40 e0       	ldi	r20, 0x00	; 0
    5094:	50 e0       	ldi	r21, 0x00	; 0
    5096:	60 e0       	ldi	r22, 0x00	; 0
    5098:	70 e0       	ldi	r23, 0x00	; 0
    509a:	80 e0       	ldi	r24, 0x00	; 0
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	08 e2       	ldi	r16, 0x28	; 40
    50a0:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    50a4:	ea 2a       	or	r14, r26
    50a6:	e2 2a       	or	r14, r18
    50a8:	33 2a       	or	r3, r19
    50aa:	24 2a       	or	r2, r20
    50ac:	f5 2e       	mov	r15, r21
    50ae:	f5 28       	or	r15, r5
    50b0:	16 2f       	mov	r17, r22
    50b2:	16 29       	or	r17, r6
    50b4:	b7 2f       	mov	r27, r23
    50b6:	b7 29       	or	r27, r7
    50b8:	2d 81       	ldd	r18, Y+5	; 0x05
    50ba:	28 2b       	or	r18, r24
    50bc:	2d 83       	std	Y+5, r18	; 0x05
    50be:	8c 81       	ldd	r24, Y+4	; 0x04
    50c0:	89 2b       	or	r24, r25
    50c2:	8c 83       	std	Y+4, r24	; 0x04
    50c4:	24 2d       	mov	r18, r4
    50c6:	30 e0       	ldi	r19, 0x00	; 0
    50c8:	40 e0       	ldi	r20, 0x00	; 0
    50ca:	50 e0       	ldi	r21, 0x00	; 0
    50cc:	60 e0       	ldi	r22, 0x00	; 0
    50ce:	70 e0       	ldi	r23, 0x00	; 0
    50d0:	80 e0       	ldi	r24, 0x00	; 0
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	00 e2       	ldi	r16, 0x20	; 32
    50d6:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    50da:	e2 2a       	or	r14, r18
    50dc:	33 2a       	or	r3, r19
    50de:	24 2a       	or	r2, r20
    50e0:	f5 2a       	or	r15, r21
    50e2:	16 2b       	or	r17, r22
    50e4:	b7 2b       	or	r27, r23
    50e6:	2d 81       	ldd	r18, Y+5	; 0x05
    50e8:	28 2b       	or	r18, r24
    50ea:	2d 83       	std	Y+5, r18	; 0x05
    50ec:	8c 81       	ldd	r24, Y+4	; 0x04
    50ee:	89 2b       	or	r24, r25
    50f0:	8c 83       	std	Y+4, r24	; 0x04
    50f2:	29 81       	ldd	r18, Y+1	; 0x01
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	40 e0       	ldi	r20, 0x00	; 0
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	60 e0       	ldi	r22, 0x00	; 0
    50fc:	70 e0       	ldi	r23, 0x00	; 0
    50fe:	80 e0       	ldi	r24, 0x00	; 0
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	08 e1       	ldi	r16, 0x18	; 24
    5104:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    5108:	e2 2a       	or	r14, r18
    510a:	33 2a       	or	r3, r19
    510c:	24 2a       	or	r2, r20
    510e:	f5 2a       	or	r15, r21
    5110:	16 2b       	or	r17, r22
    5112:	b7 2b       	or	r27, r23
    5114:	2d 81       	ldd	r18, Y+5	; 0x05
    5116:	28 2b       	or	r18, r24
    5118:	2d 83       	std	Y+5, r18	; 0x05
    511a:	8c 81       	ldd	r24, Y+4	; 0x04
    511c:	89 2b       	or	r24, r25
    511e:	89 83       	std	Y+1, r24	; 0x01
    5120:	2a 81       	ldd	r18, Y+2	; 0x02
    5122:	30 e0       	ldi	r19, 0x00	; 0
    5124:	40 e0       	ldi	r20, 0x00	; 0
    5126:	50 e0       	ldi	r21, 0x00	; 0
    5128:	60 e0       	ldi	r22, 0x00	; 0
    512a:	70 e0       	ldi	r23, 0x00	; 0
    512c:	80 e0       	ldi	r24, 0x00	; 0
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	00 e1       	ldi	r16, 0x10	; 16
    5132:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    5136:	e2 2a       	or	r14, r18
    5138:	33 2a       	or	r3, r19
    513a:	24 2a       	or	r2, r20
    513c:	f5 2a       	or	r15, r21
    513e:	16 2b       	or	r17, r22
    5140:	b7 2b       	or	r27, r23
    5142:	2d 81       	ldd	r18, Y+5	; 0x05
    5144:	28 2b       	or	r18, r24
    5146:	2a 83       	std	Y+2, r18	; 0x02
    5148:	89 81       	ldd	r24, Y+1	; 0x01
    514a:	89 2b       	or	r24, r25
    514c:	89 83       	std	Y+1, r24	; 0x01
    514e:	2b 81       	ldd	r18, Y+3	; 0x03
    5150:	30 e0       	ldi	r19, 0x00	; 0
    5152:	40 e0       	ldi	r20, 0x00	; 0
    5154:	50 e0       	ldi	r21, 0x00	; 0
    5156:	60 e0       	ldi	r22, 0x00	; 0
    5158:	70 e0       	ldi	r23, 0x00	; 0
    515a:	80 e0       	ldi	r24, 0x00	; 0
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	08 e0       	ldi	r16, 0x08	; 8
    5160:	0e 94 67 33 	call	0x66ce	; 0x66ce <__ashldi3>
    5164:	2e 29       	or	r18, r14
    5166:	20 83       	st	Z, r18
    5168:	33 29       	or	r19, r3
    516a:	31 83       	std	Z+1, r19	; 0x01
    516c:	42 29       	or	r20, r2
    516e:	42 83       	std	Z+2, r20	; 0x02
    5170:	5f 29       	or	r21, r15
    5172:	53 83       	std	Z+3, r21	; 0x03
    5174:	61 2b       	or	r22, r17
    5176:	64 83       	std	Z+4, r22	; 0x04
    5178:	7b 2b       	or	r23, r27
    517a:	75 83       	std	Z+5, r23	; 0x05
    517c:	2a 81       	ldd	r18, Y+2	; 0x02
    517e:	82 2b       	or	r24, r18
    5180:	86 83       	std	Z+6, r24	; 0x06
    5182:	89 81       	ldd	r24, Y+1	; 0x01
    5184:	98 2b       	or	r25, r24
    5186:	97 83       	std	Z+7, r25	; 0x07
    5188:	81 e0       	ldi	r24, 0x01	; 1

		alt = (double) ((int16_t) (eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE0)));
    518a:	90 e1       	ldi	r25, 0x10	; 16
    518c:	fe dd       	rcall	.-1028   	; 0x4d8a <eeprom_read>
    518e:	89 83       	std	Y+1, r24	; 0x01
    5190:	80 e0       	ldi	r24, 0x00	; 0
    5192:	90 e1       	ldi	r25, 0x10	; 16
    5194:	fa dd       	rcall	.-1036   	; 0x4d8a <eeprom_read>
    5196:	99 81       	ldd	r25, Y+1	; 0x01
    5198:	69 2f       	mov	r22, r25
    519a:	70 e0       	ldi	r23, 0x00	; 0
    519c:	76 2f       	mov	r23, r22
    519e:	66 27       	eor	r22, r22
    51a0:	68 2b       	or	r22, r24
    51a2:	07 2e       	mov	r0, r23
    51a4:	00 0c       	add	r0, r0
    51a6:	88 0b       	sbc	r24, r24
    51a8:	99 0b       	sbc	r25, r25
    51aa:	82 d6       	rcall	.+3332   	; 0x5eb0 <__floatsisf>
    51ac:	60 93 18 22 	sts	0x2218, r22	; 0x802218 <alt>
    51b0:	70 93 19 22 	sts	0x2219, r23	; 0x802219 <alt+0x1>
    51b4:	80 93 1a 22 	sts	0x221A, r24	; 0x80221a <alt+0x2>
    51b8:	90 93 1b 22 	sts	0x221B, r25	; 0x80221b <alt+0x3>
    51bc:	87 e0       	ldi	r24, 0x07	; 7
    51be:	90 e1       	ldi	r25, 0x10	; 16
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
    51c0:	e4 dd       	rcall	.-1080   	; 0x4d8a <eeprom_read>
    51c2:	89 83       	std	Y+1, r24	; 0x01
    51c4:	86 e0       	ldi	r24, 0x06	; 6
    51c6:	90 e1       	ldi	r25, 0x10	; 16
    51c8:	e0 dd       	rcall	.-1088   	; 0x4d8a <eeprom_read>
    51ca:	e9 81       	ldd	r30, Y+1	; 0x01
    51cc:	2e 2f       	mov	r18, r30
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	32 2f       	mov	r19, r18
    51d2:	22 27       	eor	r18, r18
    51d4:	28 2b       	or	r18, r24
    51d6:	20 93 28 22 	sts	0x2228, r18	; 0x802228 <timer>
    51da:	30 93 29 22 	sts	0x2229, r19	; 0x802229 <timer+0x1>
    51de:	84 e0       	ldi	r24, 0x04	; 4
    51e0:	90 e1       	ldi	r25, 0x10	; 16
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
    51e2:	d3 dd       	rcall	.-1114   	; 0x4d8a <eeprom_read>
    51e4:	89 83       	std	Y+1, r24	; 0x01
    51e6:	83 e0       	ldi	r24, 0x03	; 3
    51e8:	90 e1       	ldi	r25, 0x10	; 16
    51ea:	cf dd       	rcall	.-1122   	; 0x4d8a <eeprom_read>
    51ec:	f9 81       	ldd	r31, Y+1	; 0x01
    51ee:	2f 2f       	mov	r18, r31
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	32 2f       	mov	r19, r18
    51f4:	22 27       	eor	r18, r18
    51f6:	28 2b       	or	r18, r24
    51f8:	20 93 24 22 	sts	0x2224, r18	; 0x802224 <packets>
    51fc:	30 93 25 22 	sts	0x2225, r19	; 0x802225 <packets+0x1>
    5200:	85 e0       	ldi	r24, 0x05	; 5
    5202:	90 e1       	ldi	r25, 0x10	; 16
    5204:	c2 dd       	rcall	.-1148   	; 0x4d8a <eeprom_read>
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
    5206:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <state>
    520a:	88 e0       	ldi	r24, 0x08	; 8
    520c:	90 e1       	ldi	r25, 0x10	; 16
    520e:	bd dd       	rcall	.-1158   	; 0x4d8a <eeprom_read>
    5210:	80 93 46 22 	sts	0x2246, r24	; 0x802246 <released>
		released = eeprom_read(EEPROM_PAGE|RELEASED_BYTE);
    5214:	17 c0       	rjmp	.+46     	; 0x5244 <system_init+0x48e>
    5216:	0e 94 45 18 	call	0x308a	; 0x308a <get_pressure>
    521a:	60 93 39 20 	sts	0x2039, r22	; 0x802039 <ground_p>
		//printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
	}
	else{
		// Initialization of variables
		ground_p = get_pressure();
    521e:	70 93 3a 20 	sts	0x203A, r23	; 0x80203a <ground_p+0x1>
    5222:	80 93 3b 20 	sts	0x203B, r24	; 0x80203b <ground_p+0x2>
    5226:	90 93 3c 20 	sts	0x203C, r25	; 0x80203c <ground_p+0x3>
    522a:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <get_temperature>
    522e:	60 93 35 20 	sts	0x2035, r22	; 0x802035 <ground_t>
		ground_t = get_temperature();
    5232:	70 93 36 20 	sts	0x2036, r23	; 0x802036 <ground_t+0x1>
    5236:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <ground_t+0x2>
    523a:	90 93 38 20 	sts	0x2038, r25	; 0x802038 <ground_t+0x3>
    523e:	10 92 47 22 	sts	0x2247, r1	; 0x802247 <state>
    5242:	57 d9       	rcall	.-3410   	; 0x44f2 <eeprom_write_const>
    5244:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <get_temperature>
		state = 0;
    5248:	60 93 1c 22 	sts	0x221C, r22	; 0x80221c <temp>
		eeprom_write_const();
    524c:	70 93 1d 22 	sts	0x221D, r23	; 0x80221d <temp+0x1>
	}
	
	temp = get_temperature();	// Grabs the temperature once
    5250:	80 93 1e 22 	sts	0x221E, r24	; 0x80221e <temp+0x2>
    5254:	90 93 1f 22 	sts	0x221F, r25	; 0x80221f <temp+0x3>
    5258:	0e 94 e7 19 	call	0x33ce	; 0x33ce <get_voltage>
    525c:	60 93 14 22 	sts	0x2214, r22	; 0x802214 <volt>
    5260:	70 93 15 22 	sts	0x2215, r23	; 0x802215 <volt+0x1>
	volt = get_voltage();		// Updates voltage
    5264:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <volt+0x2>
    5268:	90 93 17 22 	sts	0x2217, r25	; 0x802217 <volt+0x3>
    526c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <update_scale_factor>
    5270:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <state_check>
    5274:	25 96       	adiw	r28, 0x05	; 5
	update_scale_factor();
    5276:	cd bf       	out	0x3d, r28	; 61
    5278:	de bf       	out	0x3e, r29	; 62

	state_check();
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
}
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	ff 90       	pop	r15
    5284:	ef 90       	pop	r14
    5286:	df 90       	pop	r13
    5288:	cf 90       	pop	r12
    528a:	bf 90       	pop	r11
    528c:	af 90       	pop	r10
    528e:	9f 90       	pop	r9
    5290:	8f 90       	pop	r8
    5292:	7f 90       	pop	r7
    5294:	6f 90       	pop	r6
    5296:	5f 90       	pop	r5
    5298:	4f 90       	pop	r4
    529a:	3f 90       	pop	r3
    529c:	2f 90       	pop	r2
    529e:	08 95       	ret

000052a0 <eeprom_erase>:
    52a0:	83 e3       	ldi	r24, 0x33	; 51
    52a2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    52a6:	80 e0       	ldi	r24, 0x00	; 0
    52a8:	e0 ec       	ldi	r30, 0xC0	; 192
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    52aa:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    52ac:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    52ae:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    52b0:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    52b2:	8f 5f       	subi	r24, 0xFF	; 255
    52b4:	80 32       	cpi	r24, 0x20	; 32
    52b6:	d9 f7       	brne	.-10     	; 0x52ae <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}

	NVM.CMD = ERASE_EEPROM;
    52b8:	e0 ec       	ldi	r30, 0xC0	; 192
    52ba:	f1 e0       	ldi	r31, 0x01	; 1
    52bc:	80 e3       	ldi	r24, 0x30	; 48
    52be:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    52c0:	88 ed       	ldi	r24, 0xD8	; 216
    52c2:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    52c8:	87 85       	ldd	r24, Z+15	; 0x0f
    52ca:	88 23       	and	r24, r24
    52cc:	ec f3       	brlt	.-6      	; 0x52c8 <eeprom_erase+0x28>
}
    52ce:	08 95       	ret

000052d0 <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    52d0:	e7 df       	rcall	.-50     	; 0x52a0 <eeprom_erase>

	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    52d2:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    52d4:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO register write
    52d6:	98 ed       	ldi	r25, 0xD8	; 216
    52d8:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    52da:	91 e0       	ldi	r25, 0x01	; 1
    52dc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    52e0:	8f bf       	out	0x3f, r24	; 63
    52e2:	08 95       	ret

000052e4 <command>:
static void hall_sensor_measure(AC_t *ac, uint8_t channel, enum ac_status_t status){
	ticks_per_sec++;
}

void command(uint8_t c){
	switch(c){
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	fc 01       	movw	r30, r24
    52e8:	e1 56       	subi	r30, 0x61	; 97
    52ea:	f1 09       	sbc	r31, r1
    52ec:	e3 31       	cpi	r30, 0x13	; 19
    52ee:	f1 05       	cpc	r31, r1
    52f0:	c8 f4       	brcc	.+50     	; 0x5324 <command+0x40>
    52f2:	88 27       	eor	r24, r24
    52f4:	e2 50       	subi	r30, 0x02	; 2
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	8f 4f       	sbci	r24, 0xFF	; 255
    52fa:	0c 94 96 32 	jmp	0x652c	; 0x652c <__tablejump2__>
		case RESET:
			reset();
    52fe:	e8 cf       	rjmp	.-48     	; 0x52d0 <reset>
			break;
    5300:	08 95       	ret
		case CALIBRATE:
			calibrate();
    5302:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <calibrate>
			break;
    5306:	08 95       	ret
		case CALIBRATE_ALTITUDE:
			cali_alt();
    5308:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <cali_alt>
			break;
    530c:	08 95       	ret
		case CALIBRATE_ANGLE:
			cali_ang();
    530e:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <cali_ang>
			break;
    5312:	08 95       	ret
		case SERVO_RELEASE:
			servo_release();
    5314:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <servo_release>
			break;
    5318:	08 95       	ret
		case SERVO_CLOSE:
			servo_close();
    531a:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <servo_close>
			break;
    531e:	08 95       	ret
		case PACKET:
			packet();
    5320:	0c 94 03 20 	jmp	0x4006	; 0x4006 <packet>
    5324:	08 95       	ret

00005326 <main>:
// TEAM ID, TIME, PACKETS, ALTITUDE, PRESSURE, TEMPERATURE, VOLTAGE, GPS TIME, LATITUDE, LONGITUDE, GPS ALT, GPS SATS, PITCH, ROLL, BLADE SPIN RATE, FLIGHT STATE, BONUS DIRECTION
char* format = "5343,%u,%u,%i.%i,%li,%i.%i,%i.%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%u,%i\n\0"; // Format for output string


////////////////////////////// Functions ///////////////////////////////
int main(void){
    5326:	cf 93       	push	r28
    5328:	df 93       	push	r29
    532a:	cd b7       	in	r28, 0x3d	; 61
    532c:	de b7       	in	r29, 0x3e	; 62
    532e:	c8 56       	subi	r28, 0x68	; 104
    5330:	d1 09       	sbc	r29, r1
    5332:	cd bf       	out	0x3d, r28	; 61
    5334:	de bf       	out	0x3e, r29	; 62
	system_init();
    5336:	3f dd       	rcall	.-1410   	; 0x4db6 <system_init>
	delay_ms(100);
    5338:	66 e5       	ldi	r22, 0x56	; 86
    533a:	73 e2       	ldi	r23, 0x23	; 35
    533c:	88 e0       	ldi	r24, 0x08	; 8
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__portable_avr_delay_cycles>

	// Turns on status LED
	PORTD.DIR |= PIN3_bm;
    5344:	e0 e6       	ldi	r30, 0x60	; 96
    5346:	f6 e0       	ldi	r31, 0x06	; 6
    5348:	80 81       	ld	r24, Z
    534a:	88 60       	ori	r24, 0x08	; 8
    534c:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    534e:	84 81       	ldd	r24, Z+4	; 0x04
    5350:	88 60       	ori	r24, 0x08	; 8
    5352:	84 83       	std	Z+4, r24	; 0x04
	buzzer_init();
    5354:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <buzzer_init>
	delay_ms(125);
    5358:	6b e2       	ldi	r22, 0x2B	; 43
    535a:	7c e2       	ldi	r23, 0x2C	; 44
    535c:	8a e0       	ldi	r24, 0x0A	; 10
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__portable_avr_delay_cycles>
	buzzer_stop();
    5364:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <buzzer_stop>

	// Integer ring buffer for storing multiple older values
	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    5368:	14 e1       	ldi	r17, 0x14	; 20
    536a:	be 01       	movw	r22, r28
    536c:	6f 5f       	subi	r22, 0xFF	; 255
    536e:	7f 4f       	sbci	r23, 0xFF	; 255
    5370:	fb 01       	movw	r30, r22
    5372:	81 2f       	mov	r24, r17
    5374:	11 92       	st	Z+, r1
    5376:	8a 95       	dec	r24
    5378:	e9 f7       	brne	.-6      	; 0x5374 <main+0x4e>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    537a:	4a e0       	ldi	r20, 0x0A	; 10
    537c:	50 e0       	ldi	r21, 0x00	; 0
    537e:	ce 01       	movw	r24, r28
    5380:	45 96       	adiw	r24, 0x15	; 21
    5382:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <rb16_init>

	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    5386:	be 01       	movw	r22, r28
    5388:	63 5e       	subi	r22, 0xE3	; 227
    538a:	7f 4f       	sbci	r23, 0xFF	; 255
    538c:	88 e2       	ldi	r24, 0x28	; 40
    538e:	fb 01       	movw	r30, r22
    5390:	11 92       	st	Z+, r1
    5392:	8a 95       	dec	r24
    5394:	e9 f7       	brne	.-6      	; 0x5390 <main+0x6a>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    5396:	4a e0       	ldi	r20, 0x0A	; 10
    5398:	50 e0       	ldi	r21, 0x00	; 0
    539a:	ce 01       	movw	r24, r28
    539c:	8b 5b       	subi	r24, 0xBB	; 187
    539e:	9f 4f       	sbci	r25, 0xFF	; 255
    53a0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <rb32_init>

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    53a4:	be 01       	movw	r22, r28
    53a6:	63 5b       	subi	r22, 0xB3	; 179
    53a8:	7f 4f       	sbci	r23, 0xFF	; 255
    53aa:	fb 01       	movw	r30, r22
    53ac:	11 92       	st	Z+, r1
    53ae:	1a 95       	dec	r17
    53b0:	e9 f7       	brne	.-6      	; 0x53ac <main+0x86>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    53b2:	4a e0       	ldi	r20, 0x0A	; 10
    53b4:	50 e0       	ldi	r21, 0x00	; 0
    53b6:	ce 01       	movw	r24, r28
    53b8:	8f 59       	subi	r24, 0x9F	; 159
    53ba:	9f 4f       	sbci	r25, 0xFF	; 255
    53bc:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <rb16_init>
	// Boolean values of the state of the camera and buzzer
	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;

	// Camera switching
	int16_t cam_timer = -3;
    53c0:	0d ef       	ldi	r16, 0xFD	; 253
    53c2:	1f ef       	ldi	r17, 0xFF	; 255
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	// Boolean values of the state of the camera and buzzer
	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    53c4:	e1 2c       	mov	r14, r1
	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	// Boolean values of the state of the camera and buzzer
	uint8_t cam_initialized = 0;
    53c6:	f1 2c       	mov	r15, r1
		// IMU Check
		imu_read();

		if(timer - cam_timer == 2){
			cam_switch();
			cam_timer = -3;
    53c8:	0f 2e       	mov	r0, r31
    53ca:	fd ef       	ldi	r31, 0xFD	; 253
    53cc:	cf 2e       	mov	r12, r31
    53ce:	f0 2d       	mov	r31, r0
    53d0:	dd 24       	eor	r13, r13
    53d2:	da 94       	dec	r13
	int16_t cam_timer = -3;
	

	while(1){
		// Check Sensors
		data_collect(&altitudes,&pressures);
    53d4:	be 01       	movw	r22, r28
    53d6:	6b 5b       	subi	r22, 0xBB	; 187
    53d8:	7f 4f       	sbci	r23, 0xFF	; 255
    53da:	ce 01       	movw	r24, r28
    53dc:	45 96       	adiw	r24, 0x15	; 21
    53de:	0e 94 cc 1b 	call	0x3798	; 0x3798 <data_collect>

		// Checks the Flight State
		state_check();
    53e2:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <state_check>

		// IMU Check
		imu_read();
    53e6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <imu_read>

		if(timer - cam_timer == 2){
    53ea:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <timer>
    53ee:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <timer+0x1>
    53f2:	80 1b       	sub	r24, r16
    53f4:	91 0b       	sbc	r25, r17
    53f6:	02 97       	sbiw	r24, 0x02	; 2
    53f8:	21 f4       	brne	.+8      	; 0x5402 <main+0xdc>
			cam_switch();
    53fa:	0e 94 59 14 	call	0x28b2	; 0x28b2 <cam_switch>
			cam_timer = -3;
    53fe:	0c 2d       	mov	r16, r12
    5400:	1d 2d       	mov	r17, r13
		}
		//Gives each flight state their unique tasks
		switch(state){
    5402:	80 91 47 22 	lds	r24, 0x2247	; 0x802247 <state>
    5406:	81 30       	cpi	r24, 0x01	; 1
    5408:	41 f0       	breq	.+16     	; 0x541a <main+0xf4>
    540a:	08 f4       	brcc	.+2      	; 0x540e <main+0xe8>
    540c:	69 c0       	rjmp	.+210    	; 0x54e0 <main+0x1ba>
    540e:	82 30       	cpi	r24, 0x02	; 2
    5410:	79 f0       	breq	.+30     	; 0x5430 <main+0x10a>
    5412:	83 30       	cpi	r24, 0x03	; 3
    5414:	09 f4       	brne	.+2      	; 0x5418 <main+0xf2>
    5416:	55 c0       	rjmp	.+170    	; 0x54c2 <main+0x19c>
    5418:	61 c0       	rjmp	.+194    	; 0x54dc <main+0x1b6>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    541a:	f1 10       	cpse	r15, r1
    541c:	61 c0       	rjmp	.+194    	; 0x54e0 <main+0x1ba>
					cam_initialized = 1;
					cam_switch();	//	Turns on Camera
    541e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <cam_switch>
					cam_timer = timer;
    5422:	00 91 28 22 	lds	r16, 0x2228	; 0x802228 <timer>
    5426:	10 91 29 22 	lds	r17, 0x2229	; 0x802229 <timer+0x1>
		switch(state){
			case 0:
				break;
			case 1:
				if(!cam_initialized){
					cam_initialized = 1;
    542a:	ff 24       	eor	r15, r15
    542c:	f3 94       	inc	r15
    542e:	58 c0       	rjmp	.+176    	; 0x54e0 <main+0x1ba>
					cam_switch();	//	Turns on Camera
					cam_timer = timer;
				}
				break;
			case 2:
				if(abs(alt-450)<EPSILON_ALTITUDE){
    5430:	60 91 18 22 	lds	r22, 0x2218	; 0x802218 <alt>
    5434:	70 91 19 22 	lds	r23, 0x2219	; 0x802219 <alt+0x1>
    5438:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <alt+0x2>
    543c:	90 91 1b 22 	lds	r25, 0x221B	; 0x80221b <alt+0x3>
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	41 ee       	ldi	r20, 0xE1	; 225
    5446:	53 e4       	ldi	r21, 0x43	; 67
    5448:	f5 d3       	rcall	.+2026   	; 0x5c34 <__subsf3>
    544a:	ff d4       	rcall	.+2558   	; 0x5e4a <__fixsfsi>
    544c:	9b 01       	movw	r18, r22
    544e:	77 23       	and	r23, r23
    5450:	24 f4       	brge	.+8      	; 0x545a <main+0x134>
    5452:	22 27       	eor	r18, r18
    5454:	33 27       	eor	r19, r19
    5456:	26 1b       	sub	r18, r22
    5458:	37 0b       	sbc	r19, r23
    545a:	2a 30       	cpi	r18, 0x0A	; 10
    545c:	31 05       	cpc	r19, r1
    545e:	c4 f4       	brge	.+48     	; 0x5490 <main+0x16a>
void change_hall_sensor_scaler(void){
	ACA.CTRLB = scale_factor;
}

void release(void){
	servo_release();
    5460:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <servo_release>
				}
				break;
			case 2:
				if(abs(alt-450)<EPSILON_ALTITUDE){
					release();				// Releases the payload
					pid_val(&directions);
    5464:	ce 01       	movw	r24, r28
    5466:	8f 59       	subi	r24, 0x9F	; 159
    5468:	9f 4f       	sbci	r25, 0xFF	; 255
    546a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <pid_val>
					ref_yaw = angle;
    546e:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <angle>
    5472:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <angle+0x1>
    5476:	a0 91 f0 21 	lds	r26, 0x21F0	; 0x8021f0 <angle+0x2>
    547a:	b0 91 f1 21 	lds	r27, 0x21F1	; 0x8021f1 <angle+0x3>
    547e:	80 93 25 20 	sts	0x2025, r24	; 0x802025 <ref_yaw>
    5482:	90 93 26 20 	sts	0x2026, r25	; 0x802026 <ref_yaw+0x1>
    5486:	a0 93 27 20 	sts	0x2027, r26	; 0x802027 <ref_yaw+0x2>
    548a:	b0 93 28 20 	sts	0x2028, r27	; 0x802028 <ref_yaw+0x3>
    548e:	0e c0       	rjmp	.+28     	; 0x54ac <main+0x186>
				}
				else if(released){
    5490:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <released>
    5494:	88 23       	and	r24, r24
    5496:	51 f0       	breq	.+20     	; 0x54ac <main+0x186>
					pid_val(&directions);	// Writes angle values to the ring buffer
    5498:	ce 01       	movw	r24, r28
    549a:	8f 59       	subi	r24, 0x9F	; 159
    549c:	9f 4f       	sbci	r25, 0xFF	; 255
    549e:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <pid_val>
					servo_pid(&directions); // Updates PID
    54a2:	ce 01       	movw	r24, r28
    54a4:	8f 59       	subi	r24, 0x9F	; 159
    54a6:	9f 4f       	sbci	r25, 0xFF	; 255
    54a8:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <servo_pid>
				}
				if(!cam_initialized){
    54ac:	f1 10       	cpse	r15, r1
    54ae:	18 c0       	rjmp	.+48     	; 0x54e0 <main+0x1ba>
					cam_initialized = 1;
					cam_switch();
    54b0:	0e 94 59 14 	call	0x28b2	; 0x28b2 <cam_switch>
					cam_timer = timer;
    54b4:	00 91 28 22 	lds	r16, 0x2228	; 0x802228 <timer>
    54b8:	10 91 29 22 	lds	r17, 0x2229	; 0x802229 <timer+0x1>
				else if(released){
					pid_val(&directions);	// Writes angle values to the ring buffer
					servo_pid(&directions); // Updates PID
				}
				if(!cam_initialized){
					cam_initialized = 1;
    54bc:	ff 24       	eor	r15, r15
    54be:	f3 94       	inc	r15
    54c0:	0f c0       	rjmp	.+30     	; 0x54e0 <main+0x1ba>
					cam_switch();
					cam_timer = timer;
				}
				break;
			case 3:
				if(!buzzer_initialized){
    54c2:	e1 10       	cpse	r14, r1
    54c4:	0d c0       	rjmp	.+26     	; 0x54e0 <main+0x1ba>
					buzzer_init();			//UNCOMMENT BEFORE FLIGHT
    54c6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <buzzer_init>
					buzzer_initialized = 1;
					
					cam_switch();
    54ca:	0e 94 59 14 	call	0x28b2	; 0x28b2 <cam_switch>
					cam_timer = timer;
    54ce:	00 91 28 22 	lds	r16, 0x2228	; 0x802228 <timer>
    54d2:	10 91 29 22 	lds	r17, 0x2229	; 0x802229 <timer+0x1>
				}
				break;
			case 3:
				if(!buzzer_initialized){
					buzzer_init();			//UNCOMMENT BEFORE FLIGHT
					buzzer_initialized = 1;
    54d6:	ee 24       	eor	r14, r14
    54d8:	e3 94       	inc	r14
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <main+0x1ba>
					cam_switch();
					cam_timer = timer;
				}
				break;
			default:
				state_check();
    54dc:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <state_check>
				break;
		}

		// 1 Hz timer interrupt function
		if(time_flag){
    54e0:	80 91 45 22 	lds	r24, 0x2245	; 0x802245 <time_flag>
    54e4:	88 23       	and	r24, r24
    54e6:	d9 f0       	breq	.+54     	; 0x551e <main+0x1f8>
			temp = get_temperature();	// Grabs the temperature once
    54e8:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <get_temperature>
    54ec:	60 93 1c 22 	sts	0x221C, r22	; 0x80221c <temp>
    54f0:	70 93 1d 22 	sts	0x221D, r23	; 0x80221d <temp+0x1>
    54f4:	80 93 1e 22 	sts	0x221E, r24	; 0x80221e <temp+0x2>
    54f8:	90 93 1f 22 	sts	0x221F, r25	; 0x80221f <temp+0x3>
			volt = get_voltage();		// Updates voltage
    54fc:	0e 94 e7 19 	call	0x33ce	; 0x33ce <get_voltage>
    5500:	60 93 14 22 	sts	0x2214, r22	; 0x802214 <volt>
    5504:	70 93 15 22 	sts	0x2215, r23	; 0x802215 <volt+0x1>
    5508:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <volt+0x2>
    550c:	90 93 17 22 	sts	0x2217, r25	; 0x802217 <volt+0x3>
			update_scale_factor();		// Updates Hall Effect scale factor
    5510:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <update_scale_factor>
			calc_rpm();					// Resets the tick counter and averages it with the new values
    5514:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <calc_rpm>
			time_update();				// Transmits the data packet and writes the EEPROM
    5518:	c1 d9       	rcall	.-3198   	; 0x489c <time_update>
			time_flag = 0;
    551a:	10 92 45 22 	sts	0x2245, r1	; 0x802245 <time_flag>
		}
		// XBEE command received
		if(xbee_flag){
    551e:	80 91 44 22 	lds	r24, 0x2244	; 0x802244 <xbee_flag>
    5522:	88 23       	and	r24, r24
			command(xbee_comm);
    5524:	39 f0       	breq	.+14     	; 0x5534 <main+0x20e>
    5526:	80 91 36 22 	lds	r24, 0x2236	; 0x802236 <xbee_comm>
    552a:	dc de       	rcall	.-584    	; 0x52e4 <command>
			xbee_comm = 0;
    552c:	10 92 36 22 	sts	0x2236, r1	; 0x802236 <xbee_comm>
			xbee_flag = 0;
    5530:	10 92 44 22 	sts	0x2244, r1	; 0x802244 <xbee_flag>
		}

		// Recalculates the data writing rate
		data_packets++;
    5534:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <data_packets>
    5538:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <data_packets+0x1>
    553c:	01 96       	adiw	r24, 0x01	; 1
    553e:	80 93 26 22 	sts	0x2226, r24	; 0x802226 <data_packets>
    5542:	90 93 27 22 	sts	0x2227, r25	; 0x802227 <data_packets+0x1>
		if(timer != 0){
    5546:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <timer>
    554a:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <timer+0x1>
    554e:	89 2b       	or	r24, r25
    5550:	09 f4       	brne	.+2      	; 0x5554 <main+0x22e>
    5552:	40 cf       	rjmp	.-384    	; 0x53d4 <main+0xae>
			rate = data_packets / timer;
    5554:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <data_packets>
    5558:	90 91 27 22 	lds	r25, 0x2227	; 0x802227 <data_packets+0x1>
    555c:	60 91 28 22 	lds	r22, 0x2228	; 0x802228 <timer>
    5560:	70 91 29 22 	lds	r23, 0x2229	; 0x802229 <timer+0x1>
    5564:	7e d7       	rcall	.+3836   	; 0x6462 <__udivmodhi4>
    5566:	60 93 1f 20 	sts	0x201F, r22	; 0x80201f <rate>
    556a:	70 93 20 20 	sts	0x2020, r23	; 0x802020 <rate+0x1>
    556e:	32 cf       	rjmp	.-412    	; 0x53d4 <main+0xae>

00005570 <__vector_47>:
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}


ISR(TCE0_OVF_vect){
    5570:	1f 92       	push	r1
    5572:	0f 92       	push	r0
    5574:	0f b6       	in	r0, 0x3f	; 63
    5576:	0f 92       	push	r0
    5578:	11 24       	eor	r1, r1
    557a:	08 b6       	in	r0, 0x38	; 56
    557c:	0f 92       	push	r0
    557e:	18 be       	out	0x38, r1	; 56
    5580:	8f 93       	push	r24
    5582:	9f 93       	push	r25
	timer++;
    5584:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <timer>
    5588:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <timer+0x1>
    558c:	01 96       	adiw	r24, 0x01	; 1
    558e:	80 93 28 22 	sts	0x2228, r24	; 0x802228 <timer>
    5592:	90 93 29 22 	sts	0x2229, r25	; 0x802229 <timer+0x1>
	time_flag = 1;
    5596:	81 e0       	ldi	r24, 0x01	; 1
    5598:	80 93 45 22 	sts	0x2245, r24	; 0x802245 <time_flag>
}
    559c:	9f 91       	pop	r25
    559e:	8f 91       	pop	r24
    55a0:	0f 90       	pop	r0
    55a2:	08 be       	out	0x38, r0	; 56
    55a4:	0f 90       	pop	r0
    55a6:	0f be       	out	0x3f, r0	; 63
    55a8:	0f 90       	pop	r0
    55aa:	1f 90       	pop	r1
    55ac:	18 95       	reti

000055ae <__vector_58>:


ISR(USARTE0_RXC_vect){
    55ae:	1f 92       	push	r1
    55b0:	0f 92       	push	r0
    55b2:	0f b6       	in	r0, 0x3f	; 63
    55b4:	0f 92       	push	r0
    55b6:	11 24       	eor	r1, r1
    55b8:	08 b6       	in	r0, 0x38	; 56
    55ba:	0f 92       	push	r0
    55bc:	18 be       	out	0x38, r1	; 56
    55be:	09 b6       	in	r0, 0x39	; 57
    55c0:	0f 92       	push	r0
    55c2:	19 be       	out	0x39, r1	; 57
    55c4:	0b b6       	in	r0, 0x3b	; 59
    55c6:	0f 92       	push	r0
    55c8:	1b be       	out	0x3b, r1	; 59
    55ca:	2f 93       	push	r18
    55cc:	3f 93       	push	r19
    55ce:	4f 93       	push	r20
    55d0:	5f 93       	push	r21
    55d2:	6f 93       	push	r22
    55d4:	7f 93       	push	r23
    55d6:	8f 93       	push	r24
    55d8:	9f 93       	push	r25
    55da:	af 93       	push	r26
    55dc:	bf 93       	push	r27
    55de:	ef 93       	push	r30
    55e0:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    55e2:	80 ea       	ldi	r24, 0xA0	; 160
    55e4:	9a e0       	ldi	r25, 0x0A	; 10
    55e6:	0e 94 03 0b 	call	0x1606	; 0x1606 <usart_getchar>
    55ea:	80 93 36 22 	sts	0x2236, r24	; 0x802236 <xbee_comm>
	//printf("%c\n", xbee_comm);
	xbee_flag = 1;
    55ee:	81 e0       	ldi	r24, 0x01	; 1
    55f0:	80 93 44 22 	sts	0x2244, r24	; 0x802244 <xbee_flag>
}
    55f4:	ff 91       	pop	r31
    55f6:	ef 91       	pop	r30
    55f8:	bf 91       	pop	r27
    55fa:	af 91       	pop	r26
    55fc:	9f 91       	pop	r25
    55fe:	8f 91       	pop	r24
    5600:	7f 91       	pop	r23
    5602:	6f 91       	pop	r22
    5604:	5f 91       	pop	r21
    5606:	4f 91       	pop	r20
    5608:	3f 91       	pop	r19
    560a:	2f 91       	pop	r18
    560c:	0f 90       	pop	r0
    560e:	0b be       	out	0x3b, r0	; 59
    5610:	0f 90       	pop	r0
    5612:	09 be       	out	0x39, r0	; 57
    5614:	0f 90       	pop	r0
    5616:	08 be       	out	0x38, r0	; 56
    5618:	0f 90       	pop	r0
    561a:	0f be       	out	0x3f, r0	; 63
    561c:	0f 90       	pop	r0
    561e:	1f 90       	pop	r1
    5620:	18 95       	reti

00005622 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    5622:	1f 92       	push	r1
    5624:	0f 92       	push	r0
    5626:	0f b6       	in	r0, 0x3f	; 63
    5628:	0f 92       	push	r0
    562a:	11 24       	eor	r1, r1
    562c:	08 b6       	in	r0, 0x38	; 56
    562e:	0f 92       	push	r0
    5630:	18 be       	out	0x38, r1	; 56
    5632:	09 b6       	in	r0, 0x39	; 57
    5634:	0f 92       	push	r0
    5636:	19 be       	out	0x39, r1	; 57
    5638:	0a b6       	in	r0, 0x3a	; 58
    563a:	0f 92       	push	r0
    563c:	1a be       	out	0x3a, r1	; 58
    563e:	0b b6       	in	r0, 0x3b	; 59
    5640:	0f 92       	push	r0
    5642:	1b be       	out	0x3b, r1	; 59
    5644:	8f 92       	push	r8
    5646:	9f 92       	push	r9
    5648:	af 92       	push	r10
    564a:	bf 92       	push	r11
    564c:	cf 92       	push	r12
    564e:	df 92       	push	r13
    5650:	ef 92       	push	r14
    5652:	ff 92       	push	r15
    5654:	1f 93       	push	r17
    5656:	2f 93       	push	r18
    5658:	3f 93       	push	r19
    565a:	4f 93       	push	r20
    565c:	5f 93       	push	r21
    565e:	6f 93       	push	r22
    5660:	7f 93       	push	r23
    5662:	8f 93       	push	r24
    5664:	9f 93       	push	r25
    5666:	af 93       	push	r26
    5668:	bf 93       	push	r27
    566a:	ef 93       	push	r30
    566c:	ff 93       	push	r31
    566e:	cf 93       	push	r28
    5670:	df 93       	push	r29
    5672:	00 d0       	rcall	.+0      	; 0x5674 <__vector_91+0x52>
    5674:	00 d0       	rcall	.+0      	; 0x5676 <__vector_91+0x54>
    5676:	cd b7       	in	r28, 0x3d	; 61
    5678:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    567a:	80 eb       	ldi	r24, 0xB0	; 176
    567c:	99 e0       	ldi	r25, 0x09	; 9
    567e:	0e 94 03 0b 	call	0x1606	; 0x1606 <usart_getchar>
    5682:	18 2f       	mov	r17, r24
	//printf("%c",c);

	if(c == (uint8_t) '$'){
    5684:	84 32       	cpi	r24, 0x24	; 36
    5686:	51 f4       	brne	.+20     	; 0x569c <__vector_91+0x7a>
		writing = 1;
    5688:	81 e0       	ldi	r24, 0x01	; 1
    568a:	80 93 2f 22 	sts	0x222F, r24	; 0x80222f <writing>
		pos = 0;
    568e:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <pos>
		word_pos = 0;
    5692:	10 92 2d 22 	sts	0x222D, r1	; 0x80222d <word_pos>
		commas = 0;
    5696:	10 92 2c 22 	sts	0x222C, r1	; 0x80222c <commas>
    569a:	5d c2       	rjmp	.+1210   	; 0x5b56 <__vector_91+0x534>
	}
	else if(c == (uint8_t) '*'){
    569c:	8a 32       	cpi	r24, 0x2A	; 42
    569e:	29 f4       	brne	.+10     	; 0x56aa <__vector_91+0x88>
		commas = 0;
    56a0:	10 92 2c 22 	sts	0x222C, r1	; 0x80222c <commas>
		writing = 0;
    56a4:	10 92 2f 22 	sts	0x222F, r1	; 0x80222f <writing>
    56a8:	56 c2       	rjmp	.+1196   	; 0x5b56 <__vector_91+0x534>
	}
	else if(c == (uint8_t) ','){
    56aa:	8c 32       	cpi	r24, 0x2C	; 44
    56ac:	09 f0       	breq	.+2      	; 0x56b0 <__vector_91+0x8e>
    56ae:	53 c2       	rjmp	.+1190   	; 0x5b56 <__vector_91+0x534>
		gps[0] = 32;
    56b0:	e1 e8       	ldi	r30, 0x81	; 129
    56b2:	f2 e2       	ldi	r31, 0x22	; 34
    56b4:	80 e2       	ldi	r24, 0x20	; 32
    56b6:	80 83       	st	Z, r24
		if(gps[1] == 32){
    56b8:	81 81       	ldd	r24, Z+1	; 0x01
    56ba:	80 32       	cpi	r24, 0x20	; 32
    56bc:	09 f0       	breq	.+2      	; 0x56c0 <__vector_91+0x9e>
    56be:	7a c2       	rjmp	.+1268   	; 0x5bb4 <__vector_91+0x592>
			gps[0] = '0';
    56c0:	80 e3       	ldi	r24, 0x30	; 48
    56c2:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <gps>
    56c6:	76 c2       	rjmp	.+1260   	; 0x5bb4 <__vector_91+0x592>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    56c8:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <gps>
    56cc:	8e 32       	cpi	r24, 0x2E	; 46
    56ce:	09 f0       	breq	.+2      	; 0x56d2 <__vector_91+0xb0>
    56d0:	a6 c1       	rjmp	.+844    	; 0x5a1e <__vector_91+0x3fc>
    56d2:	ac c1       	rjmp	.+856    	; 0x5a2c <__vector_91+0x40a>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    56d4:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <gps>
    56d8:	8e 32       	cpi	r24, 0x2E	; 46
    56da:	09 f0       	breq	.+2      	; 0x56de <__vector_91+0xbc>
    56dc:	f2 c0       	rjmp	.+484    	; 0x58c2 <__vector_91+0x2a0>
    56de:	f8 c0       	rjmp	.+496    	; 0x58d0 <__vector_91+0x2ae>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    56e0:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <gps>
    56e4:	8e 32       	cpi	r24, 0x2E	; 46
    56e6:	09 f0       	breq	.+2      	; 0x56ea <__vector_91+0xc8>
    56e8:	53 c0       	rjmp	.+166    	; 0x5790 <__vector_91+0x16e>
    56ea:	59 c0       	rjmp	.+178    	; 0x579e <__vector_91+0x17c>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    56ec:	91 91       	ld	r25, Z+
    56ee:	9e 32       	cpi	r25, 0x2E	; 46
    56f0:	29 f4       	brne	.+10     	; 0x56fc <__vector_91+0xda>
    56f2:	01 c0       	rjmp	.+2      	; 0x56f6 <__vector_91+0xd4>
    56f4:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    56f6:	80 93 2b 22 	sts	0x222B, r24	; 0x80222b <idx>
						break;
    56fa:	03 c0       	rjmp	.+6      	; 0x5702 <__vector_91+0xe0>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    56fc:	8f 5f       	subi	r24, 0xFF	; 255
    56fe:	8f 30       	cpi	r24, 0x0F	; 15
    5700:	a9 f7       	brne	.-22     	; 0x56ec <__vector_91+0xca>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    5702:	e0 91 2b 22 	lds	r30, 0x222B	; 0x80222b <idx>
    5706:	f0 e0       	ldi	r31, 0x00	; 0
    5708:	ef 57       	subi	r30, 0x7F	; 127
    570a:	fd 4d       	sbci	r31, 0xDD	; 221
    570c:	80 e2       	ldi	r24, 0x20	; 32
    570e:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    5710:	20 91 2b 22 	lds	r18, 0x222B	; 0x80222b <idx>
    5714:	2f 5f       	subi	r18, 0xFF	; 255
    5716:	2f 30       	cpi	r18, 0x0F	; 15
    5718:	c8 f4       	brcc	.+50     	; 0x574c <__vector_91+0x12a>
					if(gps[i] == 32){
    571a:	82 2f       	mov	r24, r18
    571c:	90 e0       	ldi	r25, 0x00	; 0
    571e:	fc 01       	movw	r30, r24
    5720:	ef 57       	subi	r30, 0x7F	; 127
    5722:	fd 4d       	sbci	r31, 0xDD	; 221
    5724:	30 81       	ld	r19, Z
    5726:	30 32       	cpi	r19, 0x20	; 32
    5728:	89 f0       	breq	.+34     	; 0x574c <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    572a:	40 e2       	ldi	r20, 0x20	; 32
    572c:	08 c0       	rjmp	.+16     	; 0x573e <__vector_91+0x11c>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    572e:	82 2f       	mov	r24, r18
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	fc 01       	movw	r30, r24
    5734:	ef 57       	subi	r30, 0x7F	; 127
    5736:	fd 4d       	sbci	r31, 0xDD	; 221
    5738:	30 81       	ld	r19, Z
    573a:	30 32       	cpi	r19, 0x20	; 32
    573c:	39 f0       	breq	.+14     	; 0x574c <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    573e:	fc 01       	movw	r30, r24
    5740:	ef 57       	subi	r30, 0x7F	; 127
    5742:	fd 4d       	sbci	r31, 0xDD	; 221
    5744:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    5746:	2f 5f       	subi	r18, 0xFF	; 255
    5748:	2f 30       	cpi	r18, 0x0F	; 15
    574a:	89 f7       	brne	.-30     	; 0x572e <__vector_91+0x10c>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    574c:	ce 01       	movw	r24, r28
    574e:	01 96       	adiw	r24, 0x01	; 1
    5750:	9f 93       	push	r25
    5752:	8f 93       	push	r24
    5754:	84 ea       	ldi	r24, 0xA4	; 164
    5756:	91 e2       	ldi	r25, 0x21	; 33
    5758:	9f 93       	push	r25
    575a:	8f 93       	push	r24
    575c:	81 e8       	ldi	r24, 0x81	; 129
    575e:	92 e2       	ldi	r25, 0x22	; 34
    5760:	9f 93       	push	r25
    5762:	8f 93       	push	r24
    5764:	0e 94 2c 34 	call	0x6858	; 0x6858 <sscanf>
				gps_t = (double) val;
    5768:	69 81       	ldd	r22, Y+1	; 0x01
    576a:	7a 81       	ldd	r23, Y+2	; 0x02
    576c:	8b 81       	ldd	r24, Y+3	; 0x03
    576e:	9c 81       	ldd	r25, Y+4	; 0x04
    5770:	9f d3       	rcall	.+1854   	; 0x5eb0 <__floatsisf>
    5772:	60 93 0c 22 	sts	0x220C, r22	; 0x80220c <gps_t>
    5776:	70 93 0d 22 	sts	0x220D, r23	; 0x80220d <gps_t+0x1>
    577a:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <gps_t+0x2>
    577e:	90 93 0f 22 	sts	0x220F, r25	; 0x80220f <gps_t+0x3>
				break;
    5782:	0f 90       	pop	r0
    5784:	0f 90       	pop	r0
    5786:	0f 90       	pop	r0
    5788:	0f 90       	pop	r0
    578a:	0f 90       	pop	r0
    578c:	0f 90       	pop	r0
    578e:	c5 c1       	rjmp	.+906    	; 0x5b1a <__vector_91+0x4f8>
    5790:	e2 e8       	ldi	r30, 0x82	; 130
    5792:	f2 e2       	ldi	r31, 0x22	; 34
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    5794:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    5796:	91 91       	ld	r25, Z+
    5798:	9e 32       	cpi	r25, 0x2E	; 46
    579a:	29 f4       	brne	.+10     	; 0x57a6 <__vector_91+0x184>
    579c:	01 c0       	rjmp	.+2      	; 0x57a0 <__vector_91+0x17e>
    579e:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    57a0:	80 93 2b 22 	sts	0x222B, r24	; 0x80222b <idx>
						break;
    57a4:	03 c0       	rjmp	.+6      	; 0x57ac <__vector_91+0x18a>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    57a6:	8f 5f       	subi	r24, 0xFF	; 255
    57a8:	8f 30       	cpi	r24, 0x0F	; 15
    57aa:	a9 f7       	brne	.-22     	; 0x5796 <__vector_91+0x174>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    57ac:	e0 91 2b 22 	lds	r30, 0x222B	; 0x80222b <idx>
    57b0:	f0 e0       	ldi	r31, 0x00	; 0
    57b2:	ef 57       	subi	r30, 0x7F	; 127
    57b4:	fd 4d       	sbci	r31, 0xDD	; 221
    57b6:	80 e2       	ldi	r24, 0x20	; 32
    57b8:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    57ba:	20 91 2b 22 	lds	r18, 0x222B	; 0x80222b <idx>
    57be:	2f 5f       	subi	r18, 0xFF	; 255
    57c0:	2f 30       	cpi	r18, 0x0F	; 15
    57c2:	08 f5       	brcc	.+66     	; 0x5806 <__vector_91+0x1e4>
					if(gps[i] == 32){
    57c4:	82 2f       	mov	r24, r18
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	fc 01       	movw	r30, r24
    57ca:	ef 57       	subi	r30, 0x7F	; 127
    57cc:	fd 4d       	sbci	r31, 0xDD	; 221
    57ce:	30 81       	ld	r19, Z
    57d0:	30 32       	cpi	r19, 0x20	; 32
    57d2:	c9 f0       	breq	.+50     	; 0x5806 <__vector_91+0x1e4>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    57d4:	50 e2       	ldi	r21, 0x20	; 32
    57d6:	08 c0       	rjmp	.+16     	; 0x57e8 <__vector_91+0x1c6>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    57d8:	82 2f       	mov	r24, r18
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	fc 01       	movw	r30, r24
    57de:	ef 57       	subi	r30, 0x7F	; 127
    57e0:	fd 4d       	sbci	r31, 0xDD	; 221
    57e2:	30 81       	ld	r19, Z
    57e4:	30 32       	cpi	r19, 0x20	; 32
    57e6:	79 f0       	breq	.+30     	; 0x5806 <__vector_91+0x1e4>
						break;
					}
					dec[i-idx-1] = gps[i];
    57e8:	40 91 2b 22 	lds	r20, 0x222B	; 0x80222b <idx>
    57ec:	fc 01       	movw	r30, r24
    57ee:	e4 1b       	sub	r30, r20
    57f0:	f1 09       	sbc	r31, r1
    57f2:	ed 56       	subi	r30, 0x6D	; 109
    57f4:	fd 4d       	sbci	r31, 0xDD	; 221
    57f6:	30 83       	st	Z, r19
					gps[i] = 32;
    57f8:	fc 01       	movw	r30, r24
    57fa:	ef 57       	subi	r30, 0x7F	; 127
    57fc:	fd 4d       	sbci	r31, 0xDD	; 221
    57fe:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    5800:	2f 5f       	subi	r18, 0xFF	; 255
    5802:	2f 30       	cpi	r18, 0x0F	; 15
    5804:	49 f7       	brne	.-46     	; 0x57d8 <__vector_91+0x1b6>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    5806:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <dec>
    580a:	80 32       	cpi	r24, 0x20	; 32
    580c:	19 f4       	brne	.+6      	; 0x5814 <__vector_91+0x1f2>
					dec[0] = '0';
    580e:	80 e3       	ldi	r24, 0x30	; 48
    5810:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <dec>
				}
				sscanf(gps,"%ld",&val);
    5814:	ce 01       	movw	r24, r28
    5816:	01 96       	adiw	r24, 0x01	; 1
    5818:	9f 93       	push	r25
    581a:	8f 93       	push	r24
    581c:	84 ea       	ldi	r24, 0xA4	; 164
    581e:	91 e2       	ldi	r25, 0x21	; 33
    5820:	9f 93       	push	r25
    5822:	8f 93       	push	r24
    5824:	81 e8       	ldi	r24, 0x81	; 129
    5826:	92 e2       	ldi	r25, 0x22	; 34
    5828:	9f 93       	push	r25
    582a:	8f 93       	push	r24
    582c:	0e 94 2c 34 	call	0x6858	; 0x6858 <sscanf>
				sscanf(dec,"%d",&val2);
    5830:	ce 01       	movw	r24, r28
    5832:	05 96       	adiw	r24, 0x05	; 5
    5834:	9f 93       	push	r25
    5836:	8f 93       	push	r24
    5838:	88 ea       	ldi	r24, 0xA8	; 168
    583a:	91 e2       	ldi	r25, 0x21	; 33
    583c:	9f 93       	push	r25
    583e:	8f 93       	push	r24
    5840:	84 e9       	ldi	r24, 0x94	; 148
    5842:	92 e2       	ldi	r25, 0x22	; 34
    5844:	9f 93       	push	r25
    5846:	8f 93       	push	r24
    5848:	0e 94 2c 34 	call	0x6858	; 0x6858 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    584c:	89 80       	ldd	r8, Y+1	; 0x01
    584e:	9a 80       	ldd	r9, Y+2	; 0x02
    5850:	ab 80       	ldd	r10, Y+3	; 0x03
    5852:	bc 80       	ldd	r11, Y+4	; 0x04
    5854:	6d 81       	ldd	r22, Y+5	; 0x05
    5856:	7e 81       	ldd	r23, Y+6	; 0x06
    5858:	07 2e       	mov	r0, r23
    585a:	00 0c       	add	r0, r0
    585c:	88 0b       	sbc	r24, r24
    585e:	99 0b       	sbc	r25, r25
    5860:	27 d3       	rcall	.+1614   	; 0x5eb0 <__floatsisf>
    5862:	20 e0       	ldi	r18, 0x00	; 0
    5864:	30 e4       	ldi	r19, 0x40	; 64
    5866:	4c e1       	ldi	r20, 0x1C	; 28
    5868:	56 e4       	ldi	r21, 0x46	; 70
    586a:	4d d2       	rcall	.+1178   	; 0x5d06 <__divsf3>
    586c:	6b 01       	movw	r12, r22
    586e:	7c 01       	movw	r14, r24
    5870:	c5 01       	movw	r24, r10
    5872:	b4 01       	movw	r22, r8
    5874:	24 e6       	ldi	r18, 0x64	; 100
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	40 e0       	ldi	r20, 0x00	; 0
    587a:	50 e0       	ldi	r21, 0x00	; 0
    587c:	3b d6       	rcall	.+3190   	; 0x64f4 <__divmodsi4>
    587e:	49 01       	movw	r8, r18
    5880:	5a 01       	movw	r10, r20
    5882:	16 d3       	rcall	.+1580   	; 0x5eb0 <__floatsisf>
    5884:	9b 01       	movw	r18, r22
    5886:	ac 01       	movw	r20, r24
    5888:	c7 01       	movw	r24, r14
    588a:	b6 01       	movw	r22, r12
    588c:	d4 d1       	rcall	.+936    	; 0x5c36 <__addsf3>
    588e:	20 e0       	ldi	r18, 0x00	; 0
    5890:	30 e0       	ldi	r19, 0x00	; 0
    5892:	40 e7       	ldi	r20, 0x70	; 112
    5894:	52 e4       	ldi	r21, 0x42	; 66
    5896:	37 d2       	rcall	.+1134   	; 0x5d06 <__divsf3>
    5898:	6b 01       	movw	r12, r22
    589a:	7c 01       	movw	r14, r24
    589c:	c5 01       	movw	r24, r10
    589e:	b4 01       	movw	r22, r8
    58a0:	07 d3       	rcall	.+1550   	; 0x5eb0 <__floatsisf>
    58a2:	9b 01       	movw	r18, r22
    58a4:	ac 01       	movw	r20, r24
    58a6:	c7 01       	movw	r24, r14
    58a8:	b6 01       	movw	r22, r12
    58aa:	c5 d1       	rcall	.+906    	; 0x5c36 <__addsf3>
    58ac:	60 93 08 22 	sts	0x2208, r22	; 0x802208 <gps_lat>
    58b0:	70 93 09 22 	sts	0x2209, r23	; 0x802209 <gps_lat+0x1>
    58b4:	80 93 0a 22 	sts	0x220A, r24	; 0x80220a <gps_lat+0x2>
    58b8:	90 93 0b 22 	sts	0x220B, r25	; 0x80220b <gps_lat+0x3>
				break;
    58bc:	cd bf       	out	0x3d, r28	; 61
    58be:	de bf       	out	0x3e, r29	; 62
    58c0:	2c c1       	rjmp	.+600    	; 0x5b1a <__vector_91+0x4f8>
    58c2:	e2 e8       	ldi	r30, 0x82	; 130
    58c4:	f2 e2       	ldi	r31, 0x22	; 34
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    58c6:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    58c8:	91 91       	ld	r25, Z+
    58ca:	9e 32       	cpi	r25, 0x2E	; 46
    58cc:	29 f4       	brne	.+10     	; 0x58d8 <__vector_91+0x2b6>
    58ce:	01 c0       	rjmp	.+2      	; 0x58d2 <__vector_91+0x2b0>
    58d0:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    58d2:	80 93 2b 22 	sts	0x222B, r24	; 0x80222b <idx>
						break;
    58d6:	03 c0       	rjmp	.+6      	; 0x58de <__vector_91+0x2bc>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    58d8:	8f 5f       	subi	r24, 0xFF	; 255
    58da:	8f 30       	cpi	r24, 0x0F	; 15
    58dc:	a9 f7       	brne	.-22     	; 0x58c8 <__vector_91+0x2a6>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    58de:	e0 91 2b 22 	lds	r30, 0x222B	; 0x80222b <idx>
    58e2:	f0 e0       	ldi	r31, 0x00	; 0
    58e4:	ef 57       	subi	r30, 0x7F	; 127
    58e6:	fd 4d       	sbci	r31, 0xDD	; 221
    58e8:	80 e2       	ldi	r24, 0x20	; 32
    58ea:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    58ec:	20 91 2b 22 	lds	r18, 0x222B	; 0x80222b <idx>
    58f0:	2f 5f       	subi	r18, 0xFF	; 255
    58f2:	2f 30       	cpi	r18, 0x0F	; 15
    58f4:	08 f5       	brcc	.+66     	; 0x5938 <__vector_91+0x316>
					if(gps[i] == 32){
    58f6:	82 2f       	mov	r24, r18
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	fc 01       	movw	r30, r24
    58fc:	ef 57       	subi	r30, 0x7F	; 127
    58fe:	fd 4d       	sbci	r31, 0xDD	; 221
    5900:	30 81       	ld	r19, Z
    5902:	30 32       	cpi	r19, 0x20	; 32
    5904:	c9 f0       	breq	.+50     	; 0x5938 <__vector_91+0x316>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    5906:	50 e2       	ldi	r21, 0x20	; 32
    5908:	08 c0       	rjmp	.+16     	; 0x591a <__vector_91+0x2f8>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    590a:	82 2f       	mov	r24, r18
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	fc 01       	movw	r30, r24
    5910:	ef 57       	subi	r30, 0x7F	; 127
    5912:	fd 4d       	sbci	r31, 0xDD	; 221
    5914:	30 81       	ld	r19, Z
    5916:	30 32       	cpi	r19, 0x20	; 32
    5918:	79 f0       	breq	.+30     	; 0x5938 <__vector_91+0x316>
						break;
					}
					dec[i-idx-1] = gps[i];
    591a:	40 91 2b 22 	lds	r20, 0x222B	; 0x80222b <idx>
    591e:	fc 01       	movw	r30, r24
    5920:	e4 1b       	sub	r30, r20
    5922:	f1 09       	sbc	r31, r1
    5924:	ed 56       	subi	r30, 0x6D	; 109
    5926:	fd 4d       	sbci	r31, 0xDD	; 221
    5928:	30 83       	st	Z, r19
					gps[i] = 32;
    592a:	fc 01       	movw	r30, r24
    592c:	ef 57       	subi	r30, 0x7F	; 127
    592e:	fd 4d       	sbci	r31, 0xDD	; 221
    5930:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    5932:	2f 5f       	subi	r18, 0xFF	; 255
    5934:	2f 30       	cpi	r18, 0x0F	; 15
    5936:	49 f7       	brne	.-46     	; 0x590a <__vector_91+0x2e8>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    5938:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <dec>
    593c:	80 32       	cpi	r24, 0x20	; 32
    593e:	19 f4       	brne	.+6      	; 0x5946 <__vector_91+0x324>
					dec[0] = '0';
    5940:	80 e3       	ldi	r24, 0x30	; 48
    5942:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <dec>
				}
				sscanf(gps,"%ld",&val);
    5946:	ce 01       	movw	r24, r28
    5948:	01 96       	adiw	r24, 0x01	; 1
    594a:	9f 93       	push	r25
    594c:	8f 93       	push	r24
    594e:	84 ea       	ldi	r24, 0xA4	; 164
    5950:	91 e2       	ldi	r25, 0x21	; 33
    5952:	9f 93       	push	r25
    5954:	8f 93       	push	r24
    5956:	81 e8       	ldi	r24, 0x81	; 129
    5958:	92 e2       	ldi	r25, 0x22	; 34
    595a:	9f 93       	push	r25
    595c:	8f 93       	push	r24
    595e:	7c d7       	rcall	.+3832   	; 0x6858 <sscanf>
				sscanf(dec,"%d",&val2);
    5960:	ce 01       	movw	r24, r28
    5962:	05 96       	adiw	r24, 0x05	; 5
    5964:	9f 93       	push	r25
    5966:	8f 93       	push	r24
    5968:	88 ea       	ldi	r24, 0xA8	; 168
    596a:	91 e2       	ldi	r25, 0x21	; 33
    596c:	9f 93       	push	r25
    596e:	8f 93       	push	r24
    5970:	84 e9       	ldi	r24, 0x94	; 148
    5972:	92 e2       	ldi	r25, 0x22	; 34
    5974:	9f 93       	push	r25
    5976:	8f 93       	push	r24
    5978:	6f d7       	rcall	.+3806   	; 0x6858 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    597a:	89 80       	ldd	r8, Y+1	; 0x01
    597c:	9a 80       	ldd	r9, Y+2	; 0x02
    597e:	ab 80       	ldd	r10, Y+3	; 0x03
    5980:	bc 80       	ldd	r11, Y+4	; 0x04
    5982:	6d 81       	ldd	r22, Y+5	; 0x05
    5984:	7e 81       	ldd	r23, Y+6	; 0x06
    5986:	07 2e       	mov	r0, r23
    5988:	00 0c       	add	r0, r0
    598a:	88 0b       	sbc	r24, r24
    598c:	99 0b       	sbc	r25, r25
    598e:	90 d2       	rcall	.+1312   	; 0x5eb0 <__floatsisf>
    5990:	20 e0       	ldi	r18, 0x00	; 0
    5992:	30 e4       	ldi	r19, 0x40	; 64
    5994:	4c e1       	ldi	r20, 0x1C	; 28
    5996:	56 e4       	ldi	r21, 0x46	; 70
    5998:	b6 d1       	rcall	.+876    	; 0x5d06 <__divsf3>
    599a:	6b 01       	movw	r12, r22
    599c:	7c 01       	movw	r14, r24
    599e:	c5 01       	movw	r24, r10
    59a0:	b4 01       	movw	r22, r8
    59a2:	24 e6       	ldi	r18, 0x64	; 100
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	40 e0       	ldi	r20, 0x00	; 0
    59a8:	50 e0       	ldi	r21, 0x00	; 0
    59aa:	a4 d5       	rcall	.+2888   	; 0x64f4 <__divmodsi4>
    59ac:	49 01       	movw	r8, r18
    59ae:	5a 01       	movw	r10, r20
    59b0:	7f d2       	rcall	.+1278   	; 0x5eb0 <__floatsisf>
    59b2:	9b 01       	movw	r18, r22
    59b4:	ac 01       	movw	r20, r24
    59b6:	c7 01       	movw	r24, r14
    59b8:	b6 01       	movw	r22, r12
    59ba:	3d d1       	rcall	.+634    	; 0x5c36 <__addsf3>
    59bc:	20 e0       	ldi	r18, 0x00	; 0
    59be:	30 e0       	ldi	r19, 0x00	; 0
    59c0:	40 e7       	ldi	r20, 0x70	; 112
    59c2:	52 e4       	ldi	r21, 0x42	; 66
    59c4:	a0 d1       	rcall	.+832    	; 0x5d06 <__divsf3>
    59c6:	6b 01       	movw	r12, r22
    59c8:	7c 01       	movw	r14, r24
    59ca:	c5 01       	movw	r24, r10
    59cc:	b4 01       	movw	r22, r8
    59ce:	70 d2       	rcall	.+1248   	; 0x5eb0 <__floatsisf>
    59d0:	9b 01       	movw	r18, r22
    59d2:	ac 01       	movw	r20, r24
    59d4:	c7 01       	movw	r24, r14
    59d6:	b6 01       	movw	r22, r12
    59d8:	2e d1       	rcall	.+604    	; 0x5c36 <__addsf3>
    59da:	dc 01       	movw	r26, r24
    59dc:	cb 01       	movw	r24, r22
    59de:	b0 58       	subi	r27, 0x80	; 128
    59e0:	80 93 04 22 	sts	0x2204, r24	; 0x802204 <gps_long>
    59e4:	90 93 05 22 	sts	0x2205, r25	; 0x802205 <gps_long+0x1>
    59e8:	a0 93 06 22 	sts	0x2206, r26	; 0x802206 <gps_long+0x2>
    59ec:	b0 93 07 22 	sts	0x2207, r27	; 0x802207 <gps_long+0x3>
    59f0:	cd bf       	out	0x3d, r28	; 61
				break;
    59f2:	de bf       	out	0x3e, r29	; 62
    59f4:	92 c0       	rjmp	.+292    	; 0x5b1a <__vector_91+0x4f8>
    59f6:	8e ef       	ldi	r24, 0xFE	; 254
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    59f8:	91 e2       	ldi	r25, 0x21	; 33
    59fa:	9f 93       	push	r25
    59fc:	8f 93       	push	r24
    59fe:	88 ea       	ldi	r24, 0xA8	; 168
    5a00:	91 e2       	ldi	r25, 0x21	; 33
    5a02:	9f 93       	push	r25
    5a04:	8f 93       	push	r24
    5a06:	81 e8       	ldi	r24, 0x81	; 129
    5a08:	92 e2       	ldi	r25, 0x22	; 34
    5a0a:	9f 93       	push	r25
    5a0c:	8f 93       	push	r24
    5a0e:	24 d7       	rcall	.+3656   	; 0x6858 <sscanf>
    5a10:	0f 90       	pop	r0
    5a12:	0f 90       	pop	r0
				break;
    5a14:	0f 90       	pop	r0
    5a16:	0f 90       	pop	r0
    5a18:	0f 90       	pop	r0
    5a1a:	0f 90       	pop	r0
    5a1c:	7e c0       	rjmp	.+252    	; 0x5b1a <__vector_91+0x4f8>
    5a1e:	e2 e8       	ldi	r30, 0x82	; 130
    5a20:	f2 e2       	ldi	r31, 0x22	; 34
    5a22:	81 e0       	ldi	r24, 0x01	; 1
    5a24:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    5a26:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    5a28:	29 f4       	brne	.+10     	; 0x5a34 <__vector_91+0x412>
    5a2a:	01 c0       	rjmp	.+2      	; 0x5a2e <__vector_91+0x40c>
    5a2c:	80 e0       	ldi	r24, 0x00	; 0
    5a2e:	80 93 2b 22 	sts	0x222B, r24	; 0x80222b <idx>
						idx = i;
    5a32:	03 c0       	rjmp	.+6      	; 0x5a3a <__vector_91+0x418>
    5a34:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    5a36:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    5a38:	a9 f7       	brne	.-22     	; 0x5a24 <__vector_91+0x402>
    5a3a:	e0 91 2b 22 	lds	r30, 0x222B	; 0x80222b <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    5a3e:	f0 e0       	ldi	r31, 0x00	; 0
    5a40:	ef 57       	subi	r30, 0x7F	; 127
    5a42:	fd 4d       	sbci	r31, 0xDD	; 221
    5a44:	80 e2       	ldi	r24, 0x20	; 32
    5a46:	80 83       	st	Z, r24
    5a48:	20 91 2b 22 	lds	r18, 0x222B	; 0x80222b <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    5a4c:	2f 5f       	subi	r18, 0xFF	; 255
    5a4e:	2f 30       	cpi	r18, 0x0F	; 15
    5a50:	08 f5       	brcc	.+66     	; 0x5a94 <__vector_91+0x472>
    5a52:	82 2f       	mov	r24, r18
    5a54:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    5a56:	fc 01       	movw	r30, r24
    5a58:	ef 57       	subi	r30, 0x7F	; 127
    5a5a:	fd 4d       	sbci	r31, 0xDD	; 221
    5a5c:	30 81       	ld	r19, Z
    5a5e:	30 32       	cpi	r19, 0x20	; 32
    5a60:	c9 f0       	breq	.+50     	; 0x5a94 <__vector_91+0x472>
    5a62:	50 e2       	ldi	r21, 0x20	; 32
    5a64:	08 c0       	rjmp	.+16     	; 0x5a76 <__vector_91+0x454>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    5a66:	82 2f       	mov	r24, r18
    5a68:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    5a6a:	fc 01       	movw	r30, r24
    5a6c:	ef 57       	subi	r30, 0x7F	; 127
    5a6e:	fd 4d       	sbci	r31, 0xDD	; 221
    5a70:	30 81       	ld	r19, Z
    5a72:	30 32       	cpi	r19, 0x20	; 32
    5a74:	79 f0       	breq	.+30     	; 0x5a94 <__vector_91+0x472>
    5a76:	40 91 2b 22 	lds	r20, 0x222B	; 0x80222b <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    5a7a:	fc 01       	movw	r30, r24
    5a7c:	e4 1b       	sub	r30, r20
    5a7e:	f1 09       	sbc	r31, r1
    5a80:	ed 56       	subi	r30, 0x6D	; 109
    5a82:	fd 4d       	sbci	r31, 0xDD	; 221
    5a84:	30 83       	st	Z, r19
    5a86:	fc 01       	movw	r30, r24
    5a88:	ef 57       	subi	r30, 0x7F	; 127
					gps[i] = 32;
    5a8a:	fd 4d       	sbci	r31, 0xDD	; 221
    5a8c:	50 83       	st	Z, r21
    5a8e:	2f 5f       	subi	r18, 0xFF	; 255
    5a90:	2f 30       	cpi	r18, 0x0F	; 15
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    5a92:	49 f7       	brne	.-46     	; 0x5a66 <__vector_91+0x444>
    5a94:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    5a98:	80 32       	cpi	r24, 0x20	; 32
    5a9a:	19 f4       	brne	.+6      	; 0x5aa2 <__vector_91+0x480>
    5a9c:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    5a9e:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <dec>
    5aa2:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    5aa4:	01 96       	adiw	r24, 0x01	; 1
    5aa6:	9f 93       	push	r25
    5aa8:	8f 93       	push	r24
    5aaa:	84 ea       	ldi	r24, 0xA4	; 164
    5aac:	91 e2       	ldi	r25, 0x21	; 33
    5aae:	9f 93       	push	r25
    5ab0:	8f 93       	push	r24
    5ab2:	81 e8       	ldi	r24, 0x81	; 129
    5ab4:	92 e2       	ldi	r25, 0x22	; 34
    5ab6:	9f 93       	push	r25
    5ab8:	8f 93       	push	r24
    5aba:	ce d6       	rcall	.+3484   	; 0x6858 <sscanf>
				sscanf(dec,"%d",&val2);
    5abc:	ce 01       	movw	r24, r28
    5abe:	05 96       	adiw	r24, 0x05	; 5
    5ac0:	9f 93       	push	r25
    5ac2:	8f 93       	push	r24
    5ac4:	88 ea       	ldi	r24, 0xA8	; 168
    5ac6:	91 e2       	ldi	r25, 0x21	; 33
    5ac8:	9f 93       	push	r25
    5aca:	8f 93       	push	r24
    5acc:	84 e9       	ldi	r24, 0x94	; 148
    5ace:	92 e2       	ldi	r25, 0x22	; 34
    5ad0:	9f 93       	push	r25
    5ad2:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    5ad4:	c1 d6       	rcall	.+3458   	; 0x6858 <sscanf>
    5ad6:	69 81       	ldd	r22, Y+1	; 0x01
    5ad8:	7a 81       	ldd	r23, Y+2	; 0x02
    5ada:	8b 81       	ldd	r24, Y+3	; 0x03
    5adc:	9c 81       	ldd	r25, Y+4	; 0x04
    5ade:	e8 d1       	rcall	.+976    	; 0x5eb0 <__floatsisf>
    5ae0:	6b 01       	movw	r12, r22
    5ae2:	7c 01       	movw	r14, r24
    5ae4:	6d 81       	ldd	r22, Y+5	; 0x05
    5ae6:	7e 81       	ldd	r23, Y+6	; 0x06
    5ae8:	07 2e       	mov	r0, r23
    5aea:	00 0c       	add	r0, r0
    5aec:	88 0b       	sbc	r24, r24
    5aee:	99 0b       	sbc	r25, r25
    5af0:	df d1       	rcall	.+958    	; 0x5eb0 <__floatsisf>
    5af2:	20 e0       	ldi	r18, 0x00	; 0
    5af4:	30 e0       	ldi	r19, 0x00	; 0
    5af6:	40 e2       	ldi	r20, 0x20	; 32
    5af8:	51 e4       	ldi	r21, 0x41	; 65
    5afa:	05 d1       	rcall	.+522    	; 0x5d06 <__divsf3>
    5afc:	9b 01       	movw	r18, r22
    5afe:	ac 01       	movw	r20, r24
    5b00:	c7 01       	movw	r24, r14
    5b02:	b6 01       	movw	r22, r12
    5b04:	98 d0       	rcall	.+304    	; 0x5c36 <__addsf3>
    5b06:	60 93 00 22 	sts	0x2200, r22	; 0x802200 <gps_alt>
    5b0a:	70 93 01 22 	sts	0x2201, r23	; 0x802201 <gps_alt+0x1>
    5b0e:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <gps_alt+0x2>
    5b12:	90 93 03 22 	sts	0x2203, r25	; 0x802203 <gps_alt+0x3>
    5b16:	cd bf       	out	0x3d, r28	; 61
    5b18:	de bf       	out	0x3e, r29	; 62
				break;
    5b1a:	80 91 2f 22 	lds	r24, 0x222F	; 0x80222f <writing>
		}

		if(writing){
    5b1e:	88 23       	and	r24, r24
    5b20:	d1 f0       	breq	.+52     	; 0x5b56 <__vector_91+0x534>
    5b22:	10 92 2b 22 	sts	0x222B, r1	; 0x80222b <idx>
			idx = 0;
    5b26:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <commas>
			commas++;
    5b2a:	8f 5f       	subi	r24, 0xFF	; 255
    5b2c:	80 93 2c 22 	sts	0x222C, r24	; 0x80222c <commas>
    5b30:	10 92 2d 22 	sts	0x222D, r1	; 0x80222d <word_pos>
			word_pos = 0;
    5b34:	e1 e8       	ldi	r30, 0x81	; 129
    5b36:	f2 e2       	ldi	r31, 0x22	; 34
    5b38:	20 e9       	ldi	r18, 0x90	; 144
    5b3a:	32 e2       	ldi	r19, 0x22	; 34
    5b3c:	80 e2       	ldi	r24, 0x20	; 32
    5b3e:	81 93       	st	Z+, r24
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    5b40:	2e 17       	cp	r18, r30
    5b42:	3f 07       	cpc	r19, r31

		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    5b44:	e1 f7       	brne	.-8      	; 0x5b3e <__vector_91+0x51c>
    5b46:	e4 e9       	ldi	r30, 0x94	; 148
    5b48:	f2 e2       	ldi	r31, 0x22	; 34
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    5b4a:	80 e2       	ldi	r24, 0x20	; 32
    5b4c:	80 83       	st	Z, r24
    5b4e:	81 83       	std	Z+1, r24	; 0x01
    5b50:	82 83       	std	Z+2, r24	; 0x02
    5b52:	83 83       	std	Z+3, r24	; 0x03
    5b54:	84 83       	std	Z+4, r24	; 0x04
    5b56:	80 91 2f 22 	lds	r24, 0x222F	; 0x80222f <writing>
			}
		}
	}

	if(writing){
    5b5a:	88 23       	and	r24, r24
    5b5c:	09 f4       	brne	.+2      	; 0x5b60 <__vector_91+0x53e>
    5b5e:	43 c0       	rjmp	.+134    	; 0x5be6 <__vector_91+0x5c4>
    5b60:	80 91 2e 22 	lds	r24, 0x222E	; 0x80222e <pos>
		switch(pos){
    5b64:	83 30       	cpi	r24, 0x03	; 3
    5b66:	19 f0       	breq	.+6      	; 0x5b6e <__vector_91+0x54c>
    5b68:	84 30       	cpi	r24, 0x04	; 4
    5b6a:	31 f0       	breq	.+12     	; 0x5b78 <__vector_91+0x556>
    5b6c:	09 c0       	rjmp	.+18     	; 0x5b80 <__vector_91+0x55e>
    5b6e:	17 34       	cpi	r17, 0x47	; 71
    5b70:	39 f0       	breq	.+14     	; 0x5b80 <__vector_91+0x55e>
			case 3:
				if(c != 'G'){
    5b72:	10 92 2f 22 	sts	0x222F, r1	; 0x80222f <writing>
					writing = 0;
    5b76:	04 c0       	rjmp	.+8      	; 0x5b80 <__vector_91+0x55e>
    5b78:	17 34       	cpi	r17, 0x47	; 71
    5b7a:	11 f0       	breq	.+4      	; 0x5b80 <__vector_91+0x55e>
				}
				break;

			case 4:
				if(c != 'G'){
    5b7c:	10 92 2f 22 	sts	0x222F, r1	; 0x80222f <writing>
					writing = 0;
    5b80:	e0 91 2d 22 	lds	r30, 0x222D	; 0x80222d <word_pos>
				}
				break;
		}
		gps[word_pos] = c;
    5b84:	f0 e0       	ldi	r31, 0x00	; 0
    5b86:	ef 57       	subi	r30, 0x7F	; 127
    5b88:	fd 4d       	sbci	r31, 0xDD	; 221
    5b8a:	10 83       	st	Z, r17
    5b8c:	80 91 2d 22 	lds	r24, 0x222D	; 0x80222d <word_pos>
		word_pos++;
    5b90:	8f 5f       	subi	r24, 0xFF	; 255
    5b92:	80 93 2d 22 	sts	0x222D, r24	; 0x80222d <word_pos>
    5b96:	80 91 2e 22 	lds	r24, 0x222E	; 0x80222e <pos>
		pos++;
    5b9a:	8f 5f       	subi	r24, 0xFF	; 255
    5b9c:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <pos>
    5ba0:	22 c0       	rjmp	.+68     	; 0x5be6 <__vector_91+0x5c4>
    5ba2:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <gps>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    5ba6:	8e 32       	cpi	r24, 0x2E	; 46
    5ba8:	09 f4       	brne	.+2      	; 0x5bac <__vector_91+0x58a>
    5baa:	a4 cd       	rjmp	.-1208   	; 0x56f4 <__vector_91+0xd2>
    5bac:	e2 e8       	ldi	r30, 0x82	; 130
    5bae:	f2 e2       	ldi	r31, 0x22	; 34
    5bb0:	81 e0       	ldi	r24, 0x01	; 1
    5bb2:	9c cd       	rjmp	.-1224   	; 0x56ec <__vector_91+0xca>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    5bb4:	19 82       	std	Y+1, r1	; 0x01
    5bb6:	1a 82       	std	Y+2, r1	; 0x02
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    5bb8:	1b 82       	std	Y+3, r1	; 0x03
    5bba:	1c 82       	std	Y+4, r1	; 0x04
    5bbc:	1d 82       	std	Y+5, r1	; 0x05
    5bbe:	1e 82       	std	Y+6, r1	; 0x06
		int16_t val2 = 0;
    5bc0:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <commas>
		switch(commas){
    5bc4:	84 30       	cpi	r24, 0x04	; 4
    5bc6:	09 f4       	brne	.+2      	; 0x5bca <__vector_91+0x5a8>
    5bc8:	85 cd       	rjmp	.-1270   	; 0x56d4 <__vector_91+0xb2>
    5bca:	30 f4       	brcc	.+12     	; 0x5bd8 <__vector_91+0x5b6>
    5bcc:	81 30       	cpi	r24, 0x01	; 1
    5bce:	49 f3       	breq	.-46     	; 0x5ba2 <__vector_91+0x580>
    5bd0:	82 30       	cpi	r24, 0x02	; 2
    5bd2:	09 f4       	brne	.+2      	; 0x5bd6 <__vector_91+0x5b4>
    5bd4:	85 cd       	rjmp	.-1270   	; 0x56e0 <__vector_91+0xbe>
    5bd6:	a1 cf       	rjmp	.-190    	; 0x5b1a <__vector_91+0x4f8>
    5bd8:	87 30       	cpi	r24, 0x07	; 7
    5bda:	09 f4       	brne	.+2      	; 0x5bde <__vector_91+0x5bc>
    5bdc:	0c cf       	rjmp	.-488    	; 0x59f6 <__vector_91+0x3d4>
    5bde:	89 30       	cpi	r24, 0x09	; 9
    5be0:	09 f4       	brne	.+2      	; 0x5be4 <__vector_91+0x5c2>
    5be2:	72 cd       	rjmp	.-1308   	; 0x56c8 <__vector_91+0xa6>
    5be4:	9a cf       	rjmp	.-204    	; 0x5b1a <__vector_91+0x4f8>
    5be6:	26 96       	adiw	r28, 0x06	; 6
    5be8:	cd bf       	out	0x3d, r28	; 61
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
    5bea:	de bf       	out	0x3e, r29	; 62
    5bec:	df 91       	pop	r29
    5bee:	cf 91       	pop	r28
    5bf0:	ff 91       	pop	r31
    5bf2:	ef 91       	pop	r30
    5bf4:	bf 91       	pop	r27
    5bf6:	af 91       	pop	r26
    5bf8:	9f 91       	pop	r25
    5bfa:	8f 91       	pop	r24
    5bfc:	7f 91       	pop	r23
    5bfe:	6f 91       	pop	r22
    5c00:	5f 91       	pop	r21
    5c02:	4f 91       	pop	r20
    5c04:	3f 91       	pop	r19
    5c06:	2f 91       	pop	r18
    5c08:	1f 91       	pop	r17
    5c0a:	ff 90       	pop	r15
    5c0c:	ef 90       	pop	r14
    5c0e:	df 90       	pop	r13
    5c10:	cf 90       	pop	r12
    5c12:	bf 90       	pop	r11
    5c14:	af 90       	pop	r10
    5c16:	9f 90       	pop	r9
    5c18:	8f 90       	pop	r8
    5c1a:	0f 90       	pop	r0
    5c1c:	0b be       	out	0x3b, r0	; 59
    5c1e:	0f 90       	pop	r0
    5c20:	0a be       	out	0x3a, r0	; 58
    5c22:	0f 90       	pop	r0
    5c24:	09 be       	out	0x39, r0	; 57
    5c26:	0f 90       	pop	r0
    5c28:	08 be       	out	0x38, r0	; 56
    5c2a:	0f 90       	pop	r0
    5c2c:	0f be       	out	0x3f, r0	; 63
    5c2e:	0f 90       	pop	r0
    5c30:	1f 90       	pop	r1
    5c32:	18 95       	reti

00005c34 <__subsf3>:
    5c34:	50 58       	subi	r21, 0x80	; 128

00005c36 <__addsf3>:
    5c36:	bb 27       	eor	r27, r27
    5c38:	aa 27       	eor	r26, r26
    5c3a:	0e d0       	rcall	.+28     	; 0x5c58 <__addsf3x>
    5c3c:	fd c1       	rjmp	.+1018   	; 0x6038 <__fp_round>
    5c3e:	ee d1       	rcall	.+988    	; 0x601c <__fp_pscA>
    5c40:	30 f0       	brcs	.+12     	; 0x5c4e <__addsf3+0x18>
    5c42:	f3 d1       	rcall	.+998    	; 0x602a <__fp_pscB>
    5c44:	20 f0       	brcs	.+8      	; 0x5c4e <__addsf3+0x18>
    5c46:	31 f4       	brne	.+12     	; 0x5c54 <__addsf3+0x1e>
    5c48:	9f 3f       	cpi	r25, 0xFF	; 255
    5c4a:	11 f4       	brne	.+4      	; 0x5c50 <__addsf3+0x1a>
    5c4c:	1e f4       	brtc	.+6      	; 0x5c54 <__addsf3+0x1e>
    5c4e:	d3 c1       	rjmp	.+934    	; 0x5ff6 <__fp_nan>
    5c50:	0e f4       	brtc	.+2      	; 0x5c54 <__addsf3+0x1e>
    5c52:	e0 95       	com	r30
    5c54:	e7 fb       	bst	r30, 7
    5c56:	c9 c1       	rjmp	.+914    	; 0x5fea <__fp_inf>

00005c58 <__addsf3x>:
    5c58:	e9 2f       	mov	r30, r25
    5c5a:	ff d1       	rcall	.+1022   	; 0x605a <__fp_split3>
    5c5c:	80 f3       	brcs	.-32     	; 0x5c3e <__addsf3+0x8>
    5c5e:	ba 17       	cp	r27, r26
    5c60:	62 07       	cpc	r22, r18
    5c62:	73 07       	cpc	r23, r19
    5c64:	84 07       	cpc	r24, r20
    5c66:	95 07       	cpc	r25, r21
    5c68:	18 f0       	brcs	.+6      	; 0x5c70 <__addsf3x+0x18>
    5c6a:	71 f4       	brne	.+28     	; 0x5c88 <__addsf3x+0x30>
    5c6c:	9e f5       	brtc	.+102    	; 0x5cd4 <__addsf3x+0x7c>
    5c6e:	17 c2       	rjmp	.+1070   	; 0x609e <__fp_zero>
    5c70:	0e f4       	brtc	.+2      	; 0x5c74 <__addsf3x+0x1c>
    5c72:	e0 95       	com	r30
    5c74:	0b 2e       	mov	r0, r27
    5c76:	ba 2f       	mov	r27, r26
    5c78:	a0 2d       	mov	r26, r0
    5c7a:	0b 01       	movw	r0, r22
    5c7c:	b9 01       	movw	r22, r18
    5c7e:	90 01       	movw	r18, r0
    5c80:	0c 01       	movw	r0, r24
    5c82:	ca 01       	movw	r24, r20
    5c84:	a0 01       	movw	r20, r0
    5c86:	11 24       	eor	r1, r1
    5c88:	ff 27       	eor	r31, r31
    5c8a:	59 1b       	sub	r21, r25
    5c8c:	99 f0       	breq	.+38     	; 0x5cb4 <__addsf3x+0x5c>
    5c8e:	59 3f       	cpi	r21, 0xF9	; 249
    5c90:	50 f4       	brcc	.+20     	; 0x5ca6 <__addsf3x+0x4e>
    5c92:	50 3e       	cpi	r21, 0xE0	; 224
    5c94:	68 f1       	brcs	.+90     	; 0x5cf0 <__addsf3x+0x98>
    5c96:	1a 16       	cp	r1, r26
    5c98:	f0 40       	sbci	r31, 0x00	; 0
    5c9a:	a2 2f       	mov	r26, r18
    5c9c:	23 2f       	mov	r18, r19
    5c9e:	34 2f       	mov	r19, r20
    5ca0:	44 27       	eor	r20, r20
    5ca2:	58 5f       	subi	r21, 0xF8	; 248
    5ca4:	f3 cf       	rjmp	.-26     	; 0x5c8c <__addsf3x+0x34>
    5ca6:	46 95       	lsr	r20
    5ca8:	37 95       	ror	r19
    5caa:	27 95       	ror	r18
    5cac:	a7 95       	ror	r26
    5cae:	f0 40       	sbci	r31, 0x00	; 0
    5cb0:	53 95       	inc	r21
    5cb2:	c9 f7       	brne	.-14     	; 0x5ca6 <__addsf3x+0x4e>
    5cb4:	7e f4       	brtc	.+30     	; 0x5cd4 <__addsf3x+0x7c>
    5cb6:	1f 16       	cp	r1, r31
    5cb8:	ba 0b       	sbc	r27, r26
    5cba:	62 0b       	sbc	r22, r18
    5cbc:	73 0b       	sbc	r23, r19
    5cbe:	84 0b       	sbc	r24, r20
    5cc0:	ba f0       	brmi	.+46     	; 0x5cf0 <__addsf3x+0x98>
    5cc2:	91 50       	subi	r25, 0x01	; 1
    5cc4:	a1 f0       	breq	.+40     	; 0x5cee <__addsf3x+0x96>
    5cc6:	ff 0f       	add	r31, r31
    5cc8:	bb 1f       	adc	r27, r27
    5cca:	66 1f       	adc	r22, r22
    5ccc:	77 1f       	adc	r23, r23
    5cce:	88 1f       	adc	r24, r24
    5cd0:	c2 f7       	brpl	.-16     	; 0x5cc2 <__addsf3x+0x6a>
    5cd2:	0e c0       	rjmp	.+28     	; 0x5cf0 <__addsf3x+0x98>
    5cd4:	ba 0f       	add	r27, r26
    5cd6:	62 1f       	adc	r22, r18
    5cd8:	73 1f       	adc	r23, r19
    5cda:	84 1f       	adc	r24, r20
    5cdc:	48 f4       	brcc	.+18     	; 0x5cf0 <__addsf3x+0x98>
    5cde:	87 95       	ror	r24
    5ce0:	77 95       	ror	r23
    5ce2:	67 95       	ror	r22
    5ce4:	b7 95       	ror	r27
    5ce6:	f7 95       	ror	r31
    5ce8:	9e 3f       	cpi	r25, 0xFE	; 254
    5cea:	08 f0       	brcs	.+2      	; 0x5cee <__addsf3x+0x96>
    5cec:	b3 cf       	rjmp	.-154    	; 0x5c54 <__addsf3+0x1e>
    5cee:	93 95       	inc	r25
    5cf0:	88 0f       	add	r24, r24
    5cf2:	08 f0       	brcs	.+2      	; 0x5cf6 <__addsf3x+0x9e>
    5cf4:	99 27       	eor	r25, r25
    5cf6:	ee 0f       	add	r30, r30
    5cf8:	97 95       	ror	r25
    5cfa:	87 95       	ror	r24
    5cfc:	08 95       	ret

00005cfe <__cmpsf2>:
    5cfe:	51 d1       	rcall	.+674    	; 0x5fa2 <__fp_cmp>
    5d00:	08 f4       	brcc	.+2      	; 0x5d04 <__cmpsf2+0x6>
    5d02:	81 e0       	ldi	r24, 0x01	; 1
    5d04:	08 95       	ret

00005d06 <__divsf3>:
    5d06:	0c d0       	rcall	.+24     	; 0x5d20 <__divsf3x>
    5d08:	97 c1       	rjmp	.+814    	; 0x6038 <__fp_round>
    5d0a:	8f d1       	rcall	.+798    	; 0x602a <__fp_pscB>
    5d0c:	40 f0       	brcs	.+16     	; 0x5d1e <__divsf3+0x18>
    5d0e:	86 d1       	rcall	.+780    	; 0x601c <__fp_pscA>
    5d10:	30 f0       	brcs	.+12     	; 0x5d1e <__divsf3+0x18>
    5d12:	21 f4       	brne	.+8      	; 0x5d1c <__divsf3+0x16>
    5d14:	5f 3f       	cpi	r21, 0xFF	; 255
    5d16:	19 f0       	breq	.+6      	; 0x5d1e <__divsf3+0x18>
    5d18:	68 c1       	rjmp	.+720    	; 0x5fea <__fp_inf>
    5d1a:	51 11       	cpse	r21, r1
    5d1c:	c1 c1       	rjmp	.+898    	; 0x60a0 <__fp_szero>
    5d1e:	6b c1       	rjmp	.+726    	; 0x5ff6 <__fp_nan>

00005d20 <__divsf3x>:
    5d20:	9c d1       	rcall	.+824    	; 0x605a <__fp_split3>
    5d22:	98 f3       	brcs	.-26     	; 0x5d0a <__divsf3+0x4>

00005d24 <__divsf3_pse>:
    5d24:	99 23       	and	r25, r25
    5d26:	c9 f3       	breq	.-14     	; 0x5d1a <__divsf3+0x14>
    5d28:	55 23       	and	r21, r21
    5d2a:	b1 f3       	breq	.-20     	; 0x5d18 <__divsf3+0x12>
    5d2c:	95 1b       	sub	r25, r21
    5d2e:	55 0b       	sbc	r21, r21
    5d30:	bb 27       	eor	r27, r27
    5d32:	aa 27       	eor	r26, r26
    5d34:	62 17       	cp	r22, r18
    5d36:	73 07       	cpc	r23, r19
    5d38:	84 07       	cpc	r24, r20
    5d3a:	38 f0       	brcs	.+14     	; 0x5d4a <__divsf3_pse+0x26>
    5d3c:	9f 5f       	subi	r25, 0xFF	; 255
    5d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d40:	22 0f       	add	r18, r18
    5d42:	33 1f       	adc	r19, r19
    5d44:	44 1f       	adc	r20, r20
    5d46:	aa 1f       	adc	r26, r26
    5d48:	a9 f3       	breq	.-22     	; 0x5d34 <__divsf3_pse+0x10>
    5d4a:	33 d0       	rcall	.+102    	; 0x5db2 <__divsf3_pse+0x8e>
    5d4c:	0e 2e       	mov	r0, r30
    5d4e:	3a f0       	brmi	.+14     	; 0x5d5e <__divsf3_pse+0x3a>
    5d50:	e0 e8       	ldi	r30, 0x80	; 128
    5d52:	30 d0       	rcall	.+96     	; 0x5db4 <__divsf3_pse+0x90>
    5d54:	91 50       	subi	r25, 0x01	; 1
    5d56:	50 40       	sbci	r21, 0x00	; 0
    5d58:	e6 95       	lsr	r30
    5d5a:	00 1c       	adc	r0, r0
    5d5c:	ca f7       	brpl	.-14     	; 0x5d50 <__divsf3_pse+0x2c>
    5d5e:	29 d0       	rcall	.+82     	; 0x5db2 <__divsf3_pse+0x8e>
    5d60:	fe 2f       	mov	r31, r30
    5d62:	27 d0       	rcall	.+78     	; 0x5db2 <__divsf3_pse+0x8e>
    5d64:	66 0f       	add	r22, r22
    5d66:	77 1f       	adc	r23, r23
    5d68:	88 1f       	adc	r24, r24
    5d6a:	bb 1f       	adc	r27, r27
    5d6c:	26 17       	cp	r18, r22
    5d6e:	37 07       	cpc	r19, r23
    5d70:	48 07       	cpc	r20, r24
    5d72:	ab 07       	cpc	r26, r27
    5d74:	b0 e8       	ldi	r27, 0x80	; 128
    5d76:	09 f0       	breq	.+2      	; 0x5d7a <__divsf3_pse+0x56>
    5d78:	bb 0b       	sbc	r27, r27
    5d7a:	80 2d       	mov	r24, r0
    5d7c:	bf 01       	movw	r22, r30
    5d7e:	ff 27       	eor	r31, r31
    5d80:	93 58       	subi	r25, 0x83	; 131
    5d82:	5f 4f       	sbci	r21, 0xFF	; 255
    5d84:	2a f0       	brmi	.+10     	; 0x5d90 <__divsf3_pse+0x6c>
    5d86:	9e 3f       	cpi	r25, 0xFE	; 254
    5d88:	51 05       	cpc	r21, r1
    5d8a:	68 f0       	brcs	.+26     	; 0x5da6 <__divsf3_pse+0x82>
    5d8c:	2e c1       	rjmp	.+604    	; 0x5fea <__fp_inf>
    5d8e:	88 c1       	rjmp	.+784    	; 0x60a0 <__fp_szero>
    5d90:	5f 3f       	cpi	r21, 0xFF	; 255
    5d92:	ec f3       	brlt	.-6      	; 0x5d8e <__divsf3_pse+0x6a>
    5d94:	98 3e       	cpi	r25, 0xE8	; 232
    5d96:	dc f3       	brlt	.-10     	; 0x5d8e <__divsf3_pse+0x6a>
    5d98:	86 95       	lsr	r24
    5d9a:	77 95       	ror	r23
    5d9c:	67 95       	ror	r22
    5d9e:	b7 95       	ror	r27
    5da0:	f7 95       	ror	r31
    5da2:	9f 5f       	subi	r25, 0xFF	; 255
    5da4:	c9 f7       	brne	.-14     	; 0x5d98 <__divsf3_pse+0x74>
    5da6:	88 0f       	add	r24, r24
    5da8:	91 1d       	adc	r25, r1
    5daa:	96 95       	lsr	r25
    5dac:	87 95       	ror	r24
    5dae:	97 f9       	bld	r25, 7
    5db0:	08 95       	ret
    5db2:	e1 e0       	ldi	r30, 0x01	; 1
    5db4:	66 0f       	add	r22, r22
    5db6:	77 1f       	adc	r23, r23
    5db8:	88 1f       	adc	r24, r24
    5dba:	bb 1f       	adc	r27, r27
    5dbc:	62 17       	cp	r22, r18
    5dbe:	73 07       	cpc	r23, r19
    5dc0:	84 07       	cpc	r24, r20
    5dc2:	ba 07       	cpc	r27, r26
    5dc4:	20 f0       	brcs	.+8      	; 0x5dce <__divsf3_pse+0xaa>
    5dc6:	62 1b       	sub	r22, r18
    5dc8:	73 0b       	sbc	r23, r19
    5dca:	84 0b       	sbc	r24, r20
    5dcc:	ba 0b       	sbc	r27, r26
    5dce:	ee 1f       	adc	r30, r30
    5dd0:	88 f7       	brcc	.-30     	; 0x5db4 <__divsf3_pse+0x90>
    5dd2:	e0 95       	com	r30
    5dd4:	08 95       	ret

00005dd6 <__fixsfdi>:
    5dd6:	be e3       	ldi	r27, 0x3E	; 62
    5dd8:	04 d0       	rcall	.+8      	; 0x5de2 <__fixunssfdi+0x2>
    5dda:	08 f4       	brcc	.+2      	; 0x5dde <__fixsfdi+0x8>
    5ddc:	90 e8       	ldi	r25, 0x80	; 128
    5dde:	08 95       	ret

00005de0 <__fixunssfdi>:
    5de0:	bf e3       	ldi	r27, 0x3F	; 63
    5de2:	22 27       	eor	r18, r18
    5de4:	33 27       	eor	r19, r19
    5de6:	a9 01       	movw	r20, r18
    5de8:	40 d1       	rcall	.+640    	; 0x606a <__fp_splitA>
    5dea:	58 f1       	brcs	.+86     	; 0x5e42 <__fixunssfdi+0x62>
    5dec:	9f 57       	subi	r25, 0x7F	; 127
    5dee:	40 f1       	brcs	.+80     	; 0x5e40 <__fixunssfdi+0x60>
    5df0:	b9 17       	cp	r27, r25
    5df2:	38 f1       	brcs	.+78     	; 0x5e42 <__fixunssfdi+0x62>
    5df4:	bf e3       	ldi	r27, 0x3F	; 63
    5df6:	b9 1b       	sub	r27, r25
    5df8:	99 27       	eor	r25, r25
    5dfa:	b8 50       	subi	r27, 0x08	; 8
    5dfc:	3a f4       	brpl	.+14     	; 0x5e0c <__fixunssfdi+0x2c>
    5dfe:	66 0f       	add	r22, r22
    5e00:	77 1f       	adc	r23, r23
    5e02:	88 1f       	adc	r24, r24
    5e04:	99 1f       	adc	r25, r25
    5e06:	b3 95       	inc	r27
    5e08:	d2 f3       	brmi	.-12     	; 0x5dfe <__fixunssfdi+0x1e>
    5e0a:	16 c0       	rjmp	.+44     	; 0x5e38 <__fixunssfdi+0x58>
    5e0c:	b8 50       	subi	r27, 0x08	; 8
    5e0e:	4a f0       	brmi	.+18     	; 0x5e22 <__fixunssfdi+0x42>
    5e10:	23 2f       	mov	r18, r19
    5e12:	34 2f       	mov	r19, r20
    5e14:	45 2f       	mov	r20, r21
    5e16:	56 2f       	mov	r21, r22
    5e18:	67 2f       	mov	r22, r23
    5e1a:	78 2f       	mov	r23, r24
    5e1c:	88 27       	eor	r24, r24
    5e1e:	b8 50       	subi	r27, 0x08	; 8
    5e20:	ba f7       	brpl	.-18     	; 0x5e10 <__fixunssfdi+0x30>
    5e22:	b8 5f       	subi	r27, 0xF8	; 248
    5e24:	49 f0       	breq	.+18     	; 0x5e38 <__fixunssfdi+0x58>
    5e26:	86 95       	lsr	r24
    5e28:	77 95       	ror	r23
    5e2a:	67 95       	ror	r22
    5e2c:	57 95       	ror	r21
    5e2e:	47 95       	ror	r20
    5e30:	37 95       	ror	r19
    5e32:	27 95       	ror	r18
    5e34:	ba 95       	dec	r27
    5e36:	b9 f7       	brne	.-18     	; 0x5e26 <__fixunssfdi+0x46>
    5e38:	0e f4       	brtc	.+2      	; 0x5e3c <__fixunssfdi+0x5c>
    5e3a:	e0 d0       	rcall	.+448    	; 0x5ffc <__fp_negdi>
    5e3c:	88 94       	clc
    5e3e:	08 95       	ret
    5e40:	88 94       	clc
    5e42:	60 e0       	ldi	r22, 0x00	; 0
    5e44:	70 e0       	ldi	r23, 0x00	; 0
    5e46:	cb 01       	movw	r24, r22
    5e48:	08 95       	ret

00005e4a <__fixsfsi>:
    5e4a:	04 d0       	rcall	.+8      	; 0x5e54 <__fixunssfsi>
    5e4c:	68 94       	set
    5e4e:	b1 11       	cpse	r27, r1
    5e50:	27 c1       	rjmp	.+590    	; 0x60a0 <__fp_szero>
    5e52:	08 95       	ret

00005e54 <__fixunssfsi>:
    5e54:	0a d1       	rcall	.+532    	; 0x606a <__fp_splitA>
    5e56:	88 f0       	brcs	.+34     	; 0x5e7a <__fixunssfsi+0x26>
    5e58:	9f 57       	subi	r25, 0x7F	; 127
    5e5a:	90 f0       	brcs	.+36     	; 0x5e80 <__fixunssfsi+0x2c>
    5e5c:	b9 2f       	mov	r27, r25
    5e5e:	99 27       	eor	r25, r25
    5e60:	b7 51       	subi	r27, 0x17	; 23
    5e62:	a0 f0       	brcs	.+40     	; 0x5e8c <__fixunssfsi+0x38>
    5e64:	d1 f0       	breq	.+52     	; 0x5e9a <__fixunssfsi+0x46>
    5e66:	66 0f       	add	r22, r22
    5e68:	77 1f       	adc	r23, r23
    5e6a:	88 1f       	adc	r24, r24
    5e6c:	99 1f       	adc	r25, r25
    5e6e:	1a f0       	brmi	.+6      	; 0x5e76 <__fixunssfsi+0x22>
    5e70:	ba 95       	dec	r27
    5e72:	c9 f7       	brne	.-14     	; 0x5e66 <__fixunssfsi+0x12>
    5e74:	12 c0       	rjmp	.+36     	; 0x5e9a <__fixunssfsi+0x46>
    5e76:	b1 30       	cpi	r27, 0x01	; 1
    5e78:	81 f0       	breq	.+32     	; 0x5e9a <__fixunssfsi+0x46>
    5e7a:	11 d1       	rcall	.+546    	; 0x609e <__fp_zero>
    5e7c:	b1 e0       	ldi	r27, 0x01	; 1
    5e7e:	08 95       	ret
    5e80:	0e c1       	rjmp	.+540    	; 0x609e <__fp_zero>
    5e82:	67 2f       	mov	r22, r23
    5e84:	78 2f       	mov	r23, r24
    5e86:	88 27       	eor	r24, r24
    5e88:	b8 5f       	subi	r27, 0xF8	; 248
    5e8a:	39 f0       	breq	.+14     	; 0x5e9a <__fixunssfsi+0x46>
    5e8c:	b9 3f       	cpi	r27, 0xF9	; 249
    5e8e:	cc f3       	brlt	.-14     	; 0x5e82 <__fixunssfsi+0x2e>
    5e90:	86 95       	lsr	r24
    5e92:	77 95       	ror	r23
    5e94:	67 95       	ror	r22
    5e96:	b3 95       	inc	r27
    5e98:	d9 f7       	brne	.-10     	; 0x5e90 <__fixunssfsi+0x3c>
    5e9a:	3e f4       	brtc	.+14     	; 0x5eaa <__fixunssfsi+0x56>
    5e9c:	90 95       	com	r25
    5e9e:	80 95       	com	r24
    5ea0:	70 95       	com	r23
    5ea2:	61 95       	neg	r22
    5ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eaa:	08 95       	ret

00005eac <__floatunsisf>:
    5eac:	e8 94       	clt
    5eae:	09 c0       	rjmp	.+18     	; 0x5ec2 <__floatsisf+0x12>

00005eb0 <__floatsisf>:
    5eb0:	97 fb       	bst	r25, 7
    5eb2:	3e f4       	brtc	.+14     	; 0x5ec2 <__floatsisf+0x12>
    5eb4:	90 95       	com	r25
    5eb6:	80 95       	com	r24
    5eb8:	70 95       	com	r23
    5eba:	61 95       	neg	r22
    5ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    5ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ec2:	99 23       	and	r25, r25
    5ec4:	a9 f0       	breq	.+42     	; 0x5ef0 <__floatsisf+0x40>
    5ec6:	f9 2f       	mov	r31, r25
    5ec8:	96 e9       	ldi	r25, 0x96	; 150
    5eca:	bb 27       	eor	r27, r27
    5ecc:	93 95       	inc	r25
    5ece:	f6 95       	lsr	r31
    5ed0:	87 95       	ror	r24
    5ed2:	77 95       	ror	r23
    5ed4:	67 95       	ror	r22
    5ed6:	b7 95       	ror	r27
    5ed8:	f1 11       	cpse	r31, r1
    5eda:	f8 cf       	rjmp	.-16     	; 0x5ecc <__floatsisf+0x1c>
    5edc:	fa f4       	brpl	.+62     	; 0x5f1c <__floatsisf+0x6c>
    5ede:	bb 0f       	add	r27, r27
    5ee0:	11 f4       	brne	.+4      	; 0x5ee6 <__floatsisf+0x36>
    5ee2:	60 ff       	sbrs	r22, 0
    5ee4:	1b c0       	rjmp	.+54     	; 0x5f1c <__floatsisf+0x6c>
    5ee6:	6f 5f       	subi	r22, 0xFF	; 255
    5ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eea:	8f 4f       	sbci	r24, 0xFF	; 255
    5eec:	9f 4f       	sbci	r25, 0xFF	; 255
    5eee:	16 c0       	rjmp	.+44     	; 0x5f1c <__floatsisf+0x6c>
    5ef0:	88 23       	and	r24, r24
    5ef2:	11 f0       	breq	.+4      	; 0x5ef8 <__floatsisf+0x48>
    5ef4:	96 e9       	ldi	r25, 0x96	; 150
    5ef6:	11 c0       	rjmp	.+34     	; 0x5f1a <__floatsisf+0x6a>
    5ef8:	77 23       	and	r23, r23
    5efa:	21 f0       	breq	.+8      	; 0x5f04 <__floatsisf+0x54>
    5efc:	9e e8       	ldi	r25, 0x8E	; 142
    5efe:	87 2f       	mov	r24, r23
    5f00:	76 2f       	mov	r23, r22
    5f02:	05 c0       	rjmp	.+10     	; 0x5f0e <__floatsisf+0x5e>
    5f04:	66 23       	and	r22, r22
    5f06:	71 f0       	breq	.+28     	; 0x5f24 <__floatsisf+0x74>
    5f08:	96 e8       	ldi	r25, 0x86	; 134
    5f0a:	86 2f       	mov	r24, r22
    5f0c:	70 e0       	ldi	r23, 0x00	; 0
    5f0e:	60 e0       	ldi	r22, 0x00	; 0
    5f10:	2a f0       	brmi	.+10     	; 0x5f1c <__floatsisf+0x6c>
    5f12:	9a 95       	dec	r25
    5f14:	66 0f       	add	r22, r22
    5f16:	77 1f       	adc	r23, r23
    5f18:	88 1f       	adc	r24, r24
    5f1a:	da f7       	brpl	.-10     	; 0x5f12 <__floatsisf+0x62>
    5f1c:	88 0f       	add	r24, r24
    5f1e:	96 95       	lsr	r25
    5f20:	87 95       	ror	r24
    5f22:	97 f9       	bld	r25, 7
    5f24:	08 95       	ret

00005f26 <__floatundisf>:
    5f26:	e8 94       	clt

00005f28 <__fp_di2sf>:
    5f28:	f9 2f       	mov	r31, r25
    5f2a:	96 eb       	ldi	r25, 0xB6	; 182
    5f2c:	ff 23       	and	r31, r31
    5f2e:	81 f0       	breq	.+32     	; 0x5f50 <__fp_di2sf+0x28>
    5f30:	12 16       	cp	r1, r18
    5f32:	13 06       	cpc	r1, r19
    5f34:	14 06       	cpc	r1, r20
    5f36:	44 0b       	sbc	r20, r20
    5f38:	93 95       	inc	r25
    5f3a:	f6 95       	lsr	r31
    5f3c:	87 95       	ror	r24
    5f3e:	77 95       	ror	r23
    5f40:	67 95       	ror	r22
    5f42:	57 95       	ror	r21
    5f44:	40 40       	sbci	r20, 0x00	; 0
    5f46:	ff 23       	and	r31, r31
    5f48:	b9 f7       	brne	.-18     	; 0x5f38 <__fp_di2sf+0x10>
    5f4a:	1b c0       	rjmp	.+54     	; 0x5f82 <__fp_di2sf+0x5a>
    5f4c:	99 27       	eor	r25, r25
    5f4e:	08 95       	ret
    5f50:	88 23       	and	r24, r24
    5f52:	51 f4       	brne	.+20     	; 0x5f68 <__fp_di2sf+0x40>
    5f54:	98 50       	subi	r25, 0x08	; 8
    5f56:	d2 f7       	brpl	.-12     	; 0x5f4c <__fp_di2sf+0x24>
    5f58:	87 2b       	or	r24, r23
    5f5a:	76 2f       	mov	r23, r22
    5f5c:	65 2f       	mov	r22, r21
    5f5e:	54 2f       	mov	r21, r20
    5f60:	43 2f       	mov	r20, r19
    5f62:	32 2f       	mov	r19, r18
    5f64:	20 e0       	ldi	r18, 0x00	; 0
    5f66:	b1 f3       	breq	.-20     	; 0x5f54 <__fp_di2sf+0x2c>
    5f68:	12 16       	cp	r1, r18
    5f6a:	13 06       	cpc	r1, r19
    5f6c:	14 06       	cpc	r1, r20
    5f6e:	44 0b       	sbc	r20, r20
    5f70:	88 23       	and	r24, r24
    5f72:	3a f0       	brmi	.+14     	; 0x5f82 <__fp_di2sf+0x5a>
    5f74:	9a 95       	dec	r25
    5f76:	44 0f       	add	r20, r20
    5f78:	55 1f       	adc	r21, r21
    5f7a:	66 1f       	adc	r22, r22
    5f7c:	77 1f       	adc	r23, r23
    5f7e:	88 1f       	adc	r24, r24
    5f80:	ca f7       	brpl	.-14     	; 0x5f74 <__fp_di2sf+0x4c>
    5f82:	55 23       	and	r21, r21
    5f84:	4a f4       	brpl	.+18     	; 0x5f98 <__fp_di2sf+0x70>
    5f86:	44 0f       	add	r20, r20
    5f88:	55 1f       	adc	r21, r21
    5f8a:	11 f4       	brne	.+4      	; 0x5f90 <__fp_di2sf+0x68>
    5f8c:	60 ff       	sbrs	r22, 0
    5f8e:	04 c0       	rjmp	.+8      	; 0x5f98 <__fp_di2sf+0x70>
    5f90:	6f 5f       	subi	r22, 0xFF	; 255
    5f92:	7f 4f       	sbci	r23, 0xFF	; 255
    5f94:	8f 4f       	sbci	r24, 0xFF	; 255
    5f96:	9f 4f       	sbci	r25, 0xFF	; 255
    5f98:	88 0f       	add	r24, r24
    5f9a:	96 95       	lsr	r25
    5f9c:	87 95       	ror	r24
    5f9e:	97 f9       	bld	r25, 7
    5fa0:	08 95       	ret

00005fa2 <__fp_cmp>:
    5fa2:	99 0f       	add	r25, r25
    5fa4:	00 08       	sbc	r0, r0
    5fa6:	55 0f       	add	r21, r21
    5fa8:	aa 0b       	sbc	r26, r26
    5faa:	e0 e8       	ldi	r30, 0x80	; 128
    5fac:	fe ef       	ldi	r31, 0xFE	; 254
    5fae:	16 16       	cp	r1, r22
    5fb0:	17 06       	cpc	r1, r23
    5fb2:	e8 07       	cpc	r30, r24
    5fb4:	f9 07       	cpc	r31, r25
    5fb6:	c0 f0       	brcs	.+48     	; 0x5fe8 <__fp_cmp+0x46>
    5fb8:	12 16       	cp	r1, r18
    5fba:	13 06       	cpc	r1, r19
    5fbc:	e4 07       	cpc	r30, r20
    5fbe:	f5 07       	cpc	r31, r21
    5fc0:	98 f0       	brcs	.+38     	; 0x5fe8 <__fp_cmp+0x46>
    5fc2:	62 1b       	sub	r22, r18
    5fc4:	73 0b       	sbc	r23, r19
    5fc6:	84 0b       	sbc	r24, r20
    5fc8:	95 0b       	sbc	r25, r21
    5fca:	39 f4       	brne	.+14     	; 0x5fda <__fp_cmp+0x38>
    5fcc:	0a 26       	eor	r0, r26
    5fce:	61 f0       	breq	.+24     	; 0x5fe8 <__fp_cmp+0x46>
    5fd0:	23 2b       	or	r18, r19
    5fd2:	24 2b       	or	r18, r20
    5fd4:	25 2b       	or	r18, r21
    5fd6:	21 f4       	brne	.+8      	; 0x5fe0 <__fp_cmp+0x3e>
    5fd8:	08 95       	ret
    5fda:	0a 26       	eor	r0, r26
    5fdc:	09 f4       	brne	.+2      	; 0x5fe0 <__fp_cmp+0x3e>
    5fde:	a1 40       	sbci	r26, 0x01	; 1
    5fe0:	a6 95       	lsr	r26
    5fe2:	8f ef       	ldi	r24, 0xFF	; 255
    5fe4:	81 1d       	adc	r24, r1
    5fe6:	81 1d       	adc	r24, r1
    5fe8:	08 95       	ret

00005fea <__fp_inf>:
    5fea:	97 f9       	bld	r25, 7
    5fec:	9f 67       	ori	r25, 0x7F	; 127
    5fee:	80 e8       	ldi	r24, 0x80	; 128
    5ff0:	70 e0       	ldi	r23, 0x00	; 0
    5ff2:	60 e0       	ldi	r22, 0x00	; 0
    5ff4:	08 95       	ret

00005ff6 <__fp_nan>:
    5ff6:	9f ef       	ldi	r25, 0xFF	; 255
    5ff8:	80 ec       	ldi	r24, 0xC0	; 192
    5ffa:	08 95       	ret

00005ffc <__fp_negdi>:
    5ffc:	90 95       	com	r25
    5ffe:	80 95       	com	r24
    6000:	70 95       	com	r23
    6002:	60 95       	com	r22
    6004:	50 95       	com	r21
    6006:	40 95       	com	r20
    6008:	30 95       	com	r19
    600a:	21 95       	neg	r18
    600c:	3f 4f       	sbci	r19, 0xFF	; 255
    600e:	4f 4f       	sbci	r20, 0xFF	; 255
    6010:	5f 4f       	sbci	r21, 0xFF	; 255
    6012:	6f 4f       	sbci	r22, 0xFF	; 255
    6014:	7f 4f       	sbci	r23, 0xFF	; 255
    6016:	8f 4f       	sbci	r24, 0xFF	; 255
    6018:	9f 4f       	sbci	r25, 0xFF	; 255
    601a:	08 95       	ret

0000601c <__fp_pscA>:
    601c:	00 24       	eor	r0, r0
    601e:	0a 94       	dec	r0
    6020:	16 16       	cp	r1, r22
    6022:	17 06       	cpc	r1, r23
    6024:	18 06       	cpc	r1, r24
    6026:	09 06       	cpc	r0, r25
    6028:	08 95       	ret

0000602a <__fp_pscB>:
    602a:	00 24       	eor	r0, r0
    602c:	0a 94       	dec	r0
    602e:	12 16       	cp	r1, r18
    6030:	13 06       	cpc	r1, r19
    6032:	14 06       	cpc	r1, r20
    6034:	05 06       	cpc	r0, r21
    6036:	08 95       	ret

00006038 <__fp_round>:
    6038:	09 2e       	mov	r0, r25
    603a:	03 94       	inc	r0
    603c:	00 0c       	add	r0, r0
    603e:	11 f4       	brne	.+4      	; 0x6044 <__fp_round+0xc>
    6040:	88 23       	and	r24, r24
    6042:	52 f0       	brmi	.+20     	; 0x6058 <__fp_round+0x20>
    6044:	bb 0f       	add	r27, r27
    6046:	40 f4       	brcc	.+16     	; 0x6058 <__fp_round+0x20>
    6048:	bf 2b       	or	r27, r31
    604a:	11 f4       	brne	.+4      	; 0x6050 <__fp_round+0x18>
    604c:	60 ff       	sbrs	r22, 0
    604e:	04 c0       	rjmp	.+8      	; 0x6058 <__fp_round+0x20>
    6050:	6f 5f       	subi	r22, 0xFF	; 255
    6052:	7f 4f       	sbci	r23, 0xFF	; 255
    6054:	8f 4f       	sbci	r24, 0xFF	; 255
    6056:	9f 4f       	sbci	r25, 0xFF	; 255
    6058:	08 95       	ret

0000605a <__fp_split3>:
    605a:	57 fd       	sbrc	r21, 7
    605c:	90 58       	subi	r25, 0x80	; 128
    605e:	44 0f       	add	r20, r20
    6060:	55 1f       	adc	r21, r21
    6062:	59 f0       	breq	.+22     	; 0x607a <__fp_splitA+0x10>
    6064:	5f 3f       	cpi	r21, 0xFF	; 255
    6066:	71 f0       	breq	.+28     	; 0x6084 <__fp_splitA+0x1a>
    6068:	47 95       	ror	r20

0000606a <__fp_splitA>:
    606a:	88 0f       	add	r24, r24
    606c:	97 fb       	bst	r25, 7
    606e:	99 1f       	adc	r25, r25
    6070:	61 f0       	breq	.+24     	; 0x608a <__fp_splitA+0x20>
    6072:	9f 3f       	cpi	r25, 0xFF	; 255
    6074:	79 f0       	breq	.+30     	; 0x6094 <__fp_splitA+0x2a>
    6076:	87 95       	ror	r24
    6078:	08 95       	ret
    607a:	12 16       	cp	r1, r18
    607c:	13 06       	cpc	r1, r19
    607e:	14 06       	cpc	r1, r20
    6080:	55 1f       	adc	r21, r21
    6082:	f2 cf       	rjmp	.-28     	; 0x6068 <__fp_split3+0xe>
    6084:	46 95       	lsr	r20
    6086:	f1 df       	rcall	.-30     	; 0x606a <__fp_splitA>
    6088:	08 c0       	rjmp	.+16     	; 0x609a <__fp_splitA+0x30>
    608a:	16 16       	cp	r1, r22
    608c:	17 06       	cpc	r1, r23
    608e:	18 06       	cpc	r1, r24
    6090:	99 1f       	adc	r25, r25
    6092:	f1 cf       	rjmp	.-30     	; 0x6076 <__fp_splitA+0xc>
    6094:	86 95       	lsr	r24
    6096:	71 05       	cpc	r23, r1
    6098:	61 05       	cpc	r22, r1
    609a:	08 94       	sec
    609c:	08 95       	ret

0000609e <__fp_zero>:
    609e:	e8 94       	clt

000060a0 <__fp_szero>:
    60a0:	bb 27       	eor	r27, r27
    60a2:	66 27       	eor	r22, r22
    60a4:	77 27       	eor	r23, r23
    60a6:	cb 01       	movw	r24, r22
    60a8:	97 f9       	bld	r25, 7
    60aa:	08 95       	ret

000060ac <__gesf2>:
    60ac:	7a df       	rcall	.-268    	; 0x5fa2 <__fp_cmp>
    60ae:	08 f4       	brcc	.+2      	; 0x60b2 <__gesf2+0x6>
    60b0:	8f ef       	ldi	r24, 0xFF	; 255
    60b2:	08 95       	ret
    60b4:	0e f0       	brts	.+2      	; 0x60b8 <__gesf2+0xc>
    60b6:	23 c1       	rjmp	.+582    	; 0x62fe <__fp_mpack>
    60b8:	9e cf       	rjmp	.-196    	; 0x5ff6 <__fp_nan>
    60ba:	68 94       	set
    60bc:	96 cf       	rjmp	.-212    	; 0x5fea <__fp_inf>

000060be <log>:
    60be:	d5 df       	rcall	.-86     	; 0x606a <__fp_splitA>
    60c0:	c8 f3       	brcs	.-14     	; 0x60b4 <__gesf2+0x8>
    60c2:	99 23       	and	r25, r25
    60c4:	d1 f3       	breq	.-12     	; 0x60ba <__gesf2+0xe>
    60c6:	c6 f3       	brts	.-16     	; 0x60b8 <__gesf2+0xc>
    60c8:	df 93       	push	r29
    60ca:	cf 93       	push	r28
    60cc:	1f 93       	push	r17
    60ce:	0f 93       	push	r16
    60d0:	ff 92       	push	r15
    60d2:	c9 2f       	mov	r28, r25
    60d4:	dd 27       	eor	r29, r29
    60d6:	88 23       	and	r24, r24
    60d8:	2a f0       	brmi	.+10     	; 0x60e4 <log+0x26>
    60da:	21 97       	sbiw	r28, 0x01	; 1
    60dc:	66 0f       	add	r22, r22
    60de:	77 1f       	adc	r23, r23
    60e0:	88 1f       	adc	r24, r24
    60e2:	da f7       	brpl	.-10     	; 0x60da <log+0x1c>
    60e4:	20 e0       	ldi	r18, 0x00	; 0
    60e6:	30 e0       	ldi	r19, 0x00	; 0
    60e8:	40 e8       	ldi	r20, 0x80	; 128
    60ea:	5f eb       	ldi	r21, 0xBF	; 191
    60ec:	9f e3       	ldi	r25, 0x3F	; 63
    60ee:	88 39       	cpi	r24, 0x98	; 152
    60f0:	20 f0       	brcs	.+8      	; 0x60fa <log+0x3c>
    60f2:	80 3e       	cpi	r24, 0xE0	; 224
    60f4:	30 f0       	brcs	.+12     	; 0x6102 <log+0x44>
    60f6:	21 96       	adiw	r28, 0x01	; 1
    60f8:	8f 77       	andi	r24, 0x7F	; 127
    60fa:	9d dd       	rcall	.-1222   	; 0x5c36 <__addsf3>
    60fc:	e2 e2       	ldi	r30, 0x22	; 34
    60fe:	f2 e0       	ldi	r31, 0x02	; 2
    6100:	03 c0       	rjmp	.+6      	; 0x6108 <log+0x4a>
    6102:	99 dd       	rcall	.-1230   	; 0x5c36 <__addsf3>
    6104:	ef e4       	ldi	r30, 0x4F	; 79
    6106:	f2 e0       	ldi	r31, 0x02	; 2
    6108:	08 d1       	rcall	.+528    	; 0x631a <__fp_powser>
    610a:	8b 01       	movw	r16, r22
    610c:	be 01       	movw	r22, r28
    610e:	ec 01       	movw	r28, r24
    6110:	fb 2e       	mov	r15, r27
    6112:	6f 57       	subi	r22, 0x7F	; 127
    6114:	71 09       	sbc	r23, r1
    6116:	75 95       	asr	r23
    6118:	77 1f       	adc	r23, r23
    611a:	88 0b       	sbc	r24, r24
    611c:	99 0b       	sbc	r25, r25
    611e:	c8 de       	rcall	.-624    	; 0x5eb0 <__floatsisf>
    6120:	28 e1       	ldi	r18, 0x18	; 24
    6122:	32 e7       	ldi	r19, 0x72	; 114
    6124:	41 e3       	ldi	r20, 0x31	; 49
    6126:	5f e3       	ldi	r21, 0x3F	; 63
    6128:	16 d0       	rcall	.+44     	; 0x6156 <__mulsf3x>
    612a:	af 2d       	mov	r26, r15
    612c:	98 01       	movw	r18, r16
    612e:	ae 01       	movw	r20, r28
    6130:	ff 90       	pop	r15
    6132:	0f 91       	pop	r16
    6134:	1f 91       	pop	r17
    6136:	cf 91       	pop	r28
    6138:	df 91       	pop	r29
    613a:	8e dd       	rcall	.-1252   	; 0x5c58 <__addsf3x>
    613c:	7d cf       	rjmp	.-262    	; 0x6038 <__fp_round>

0000613e <__mulsf3>:
    613e:	0b d0       	rcall	.+22     	; 0x6156 <__mulsf3x>
    6140:	7b cf       	rjmp	.-266    	; 0x6038 <__fp_round>
    6142:	6c df       	rcall	.-296    	; 0x601c <__fp_pscA>
    6144:	28 f0       	brcs	.+10     	; 0x6150 <__mulsf3+0x12>
    6146:	71 df       	rcall	.-286    	; 0x602a <__fp_pscB>
    6148:	18 f0       	brcs	.+6      	; 0x6150 <__mulsf3+0x12>
    614a:	95 23       	and	r25, r21
    614c:	09 f0       	breq	.+2      	; 0x6150 <__mulsf3+0x12>
    614e:	4d cf       	rjmp	.-358    	; 0x5fea <__fp_inf>
    6150:	52 cf       	rjmp	.-348    	; 0x5ff6 <__fp_nan>
    6152:	11 24       	eor	r1, r1
    6154:	a5 cf       	rjmp	.-182    	; 0x60a0 <__fp_szero>

00006156 <__mulsf3x>:
    6156:	81 df       	rcall	.-254    	; 0x605a <__fp_split3>
    6158:	a0 f3       	brcs	.-24     	; 0x6142 <__mulsf3+0x4>

0000615a <__mulsf3_pse>:
    615a:	95 9f       	mul	r25, r21
    615c:	d1 f3       	breq	.-12     	; 0x6152 <__mulsf3+0x14>
    615e:	95 0f       	add	r25, r21
    6160:	50 e0       	ldi	r21, 0x00	; 0
    6162:	55 1f       	adc	r21, r21
    6164:	62 9f       	mul	r22, r18
    6166:	f0 01       	movw	r30, r0
    6168:	72 9f       	mul	r23, r18
    616a:	bb 27       	eor	r27, r27
    616c:	f0 0d       	add	r31, r0
    616e:	b1 1d       	adc	r27, r1
    6170:	63 9f       	mul	r22, r19
    6172:	aa 27       	eor	r26, r26
    6174:	f0 0d       	add	r31, r0
    6176:	b1 1d       	adc	r27, r1
    6178:	aa 1f       	adc	r26, r26
    617a:	64 9f       	mul	r22, r20
    617c:	66 27       	eor	r22, r22
    617e:	b0 0d       	add	r27, r0
    6180:	a1 1d       	adc	r26, r1
    6182:	66 1f       	adc	r22, r22
    6184:	82 9f       	mul	r24, r18
    6186:	22 27       	eor	r18, r18
    6188:	b0 0d       	add	r27, r0
    618a:	a1 1d       	adc	r26, r1
    618c:	62 1f       	adc	r22, r18
    618e:	73 9f       	mul	r23, r19
    6190:	b0 0d       	add	r27, r0
    6192:	a1 1d       	adc	r26, r1
    6194:	62 1f       	adc	r22, r18
    6196:	83 9f       	mul	r24, r19
    6198:	a0 0d       	add	r26, r0
    619a:	61 1d       	adc	r22, r1
    619c:	22 1f       	adc	r18, r18
    619e:	74 9f       	mul	r23, r20
    61a0:	33 27       	eor	r19, r19
    61a2:	a0 0d       	add	r26, r0
    61a4:	61 1d       	adc	r22, r1
    61a6:	23 1f       	adc	r18, r19
    61a8:	84 9f       	mul	r24, r20
    61aa:	60 0d       	add	r22, r0
    61ac:	21 1d       	adc	r18, r1
    61ae:	82 2f       	mov	r24, r18
    61b0:	76 2f       	mov	r23, r22
    61b2:	6a 2f       	mov	r22, r26
    61b4:	11 24       	eor	r1, r1
    61b6:	9f 57       	subi	r25, 0x7F	; 127
    61b8:	50 40       	sbci	r21, 0x00	; 0
    61ba:	8a f0       	brmi	.+34     	; 0x61de <__mulsf3_pse+0x84>
    61bc:	e1 f0       	breq	.+56     	; 0x61f6 <__mulsf3_pse+0x9c>
    61be:	88 23       	and	r24, r24
    61c0:	4a f0       	brmi	.+18     	; 0x61d4 <__mulsf3_pse+0x7a>
    61c2:	ee 0f       	add	r30, r30
    61c4:	ff 1f       	adc	r31, r31
    61c6:	bb 1f       	adc	r27, r27
    61c8:	66 1f       	adc	r22, r22
    61ca:	77 1f       	adc	r23, r23
    61cc:	88 1f       	adc	r24, r24
    61ce:	91 50       	subi	r25, 0x01	; 1
    61d0:	50 40       	sbci	r21, 0x00	; 0
    61d2:	a9 f7       	brne	.-22     	; 0x61be <__mulsf3_pse+0x64>
    61d4:	9e 3f       	cpi	r25, 0xFE	; 254
    61d6:	51 05       	cpc	r21, r1
    61d8:	70 f0       	brcs	.+28     	; 0x61f6 <__mulsf3_pse+0x9c>
    61da:	07 cf       	rjmp	.-498    	; 0x5fea <__fp_inf>
    61dc:	61 cf       	rjmp	.-318    	; 0x60a0 <__fp_szero>
    61de:	5f 3f       	cpi	r21, 0xFF	; 255
    61e0:	ec f3       	brlt	.-6      	; 0x61dc <__mulsf3_pse+0x82>
    61e2:	98 3e       	cpi	r25, 0xE8	; 232
    61e4:	dc f3       	brlt	.-10     	; 0x61dc <__mulsf3_pse+0x82>
    61e6:	86 95       	lsr	r24
    61e8:	77 95       	ror	r23
    61ea:	67 95       	ror	r22
    61ec:	b7 95       	ror	r27
    61ee:	f7 95       	ror	r31
    61f0:	e7 95       	ror	r30
    61f2:	9f 5f       	subi	r25, 0xFF	; 255
    61f4:	c1 f7       	brne	.-16     	; 0x61e6 <__mulsf3_pse+0x8c>
    61f6:	fe 2b       	or	r31, r30
    61f8:	88 0f       	add	r24, r24
    61fa:	91 1d       	adc	r25, r1
    61fc:	96 95       	lsr	r25
    61fe:	87 95       	ror	r24
    6200:	97 f9       	bld	r25, 7
    6202:	08 95       	ret

00006204 <pow>:
    6204:	fa 01       	movw	r30, r20
    6206:	ee 0f       	add	r30, r30
    6208:	ff 1f       	adc	r31, r31
    620a:	30 96       	adiw	r30, 0x00	; 0
    620c:	21 05       	cpc	r18, r1
    620e:	31 05       	cpc	r19, r1
    6210:	99 f1       	breq	.+102    	; 0x6278 <pow+0x74>
    6212:	61 15       	cp	r22, r1
    6214:	71 05       	cpc	r23, r1
    6216:	61 f4       	brne	.+24     	; 0x6230 <pow+0x2c>
    6218:	80 38       	cpi	r24, 0x80	; 128
    621a:	bf e3       	ldi	r27, 0x3F	; 63
    621c:	9b 07       	cpc	r25, r27
    621e:	49 f1       	breq	.+82     	; 0x6272 <pow+0x6e>
    6220:	68 94       	set
    6222:	90 38       	cpi	r25, 0x80	; 128
    6224:	81 05       	cpc	r24, r1
    6226:	61 f0       	breq	.+24     	; 0x6240 <pow+0x3c>
    6228:	80 38       	cpi	r24, 0x80	; 128
    622a:	bf ef       	ldi	r27, 0xFF	; 255
    622c:	9b 07       	cpc	r25, r27
    622e:	41 f0       	breq	.+16     	; 0x6240 <pow+0x3c>
    6230:	99 23       	and	r25, r25
    6232:	42 f5       	brpl	.+80     	; 0x6284 <pow+0x80>
    6234:	ff 3f       	cpi	r31, 0xFF	; 255
    6236:	e1 05       	cpc	r30, r1
    6238:	31 05       	cpc	r19, r1
    623a:	21 05       	cpc	r18, r1
    623c:	11 f1       	breq	.+68     	; 0x6282 <pow+0x7e>
    623e:	e8 94       	clt
    6240:	08 94       	sec
    6242:	e7 95       	ror	r30
    6244:	d9 01       	movw	r26, r18
    6246:	aa 23       	and	r26, r26
    6248:	29 f4       	brne	.+10     	; 0x6254 <pow+0x50>
    624a:	ab 2f       	mov	r26, r27
    624c:	be 2f       	mov	r27, r30
    624e:	f8 5f       	subi	r31, 0xF8	; 248
    6250:	d0 f3       	brcs	.-12     	; 0x6246 <pow+0x42>
    6252:	10 c0       	rjmp	.+32     	; 0x6274 <pow+0x70>
    6254:	ff 5f       	subi	r31, 0xFF	; 255
    6256:	70 f4       	brcc	.+28     	; 0x6274 <pow+0x70>
    6258:	a6 95       	lsr	r26
    625a:	e0 f7       	brcc	.-8      	; 0x6254 <pow+0x50>
    625c:	f7 39       	cpi	r31, 0x97	; 151
    625e:	50 f0       	brcs	.+20     	; 0x6274 <pow+0x70>
    6260:	19 f0       	breq	.+6      	; 0x6268 <pow+0x64>
    6262:	ff 3a       	cpi	r31, 0xAF	; 175
    6264:	38 f4       	brcc	.+14     	; 0x6274 <pow+0x70>
    6266:	9f 77       	andi	r25, 0x7F	; 127
    6268:	9f 93       	push	r25
    626a:	0c d0       	rcall	.+24     	; 0x6284 <pow+0x80>
    626c:	0f 90       	pop	r0
    626e:	07 fc       	sbrc	r0, 7
    6270:	90 58       	subi	r25, 0x80	; 128
    6272:	08 95       	ret
    6274:	3e f0       	brts	.+14     	; 0x6284 <pow+0x80>
    6276:	bf ce       	rjmp	.-642    	; 0x5ff6 <__fp_nan>
    6278:	60 e0       	ldi	r22, 0x00	; 0
    627a:	70 e0       	ldi	r23, 0x00	; 0
    627c:	80 e8       	ldi	r24, 0x80	; 128
    627e:	9f e3       	ldi	r25, 0x3F	; 63
    6280:	08 95       	ret
    6282:	4f e7       	ldi	r20, 0x7F	; 127
    6284:	9f 77       	andi	r25, 0x7F	; 127
    6286:	5f 93       	push	r21
    6288:	4f 93       	push	r20
    628a:	3f 93       	push	r19
    628c:	2f 93       	push	r18
    628e:	17 df       	rcall	.-466    	; 0x60be <log>
    6290:	2f 91       	pop	r18
    6292:	3f 91       	pop	r19
    6294:	4f 91       	pop	r20
    6296:	5f 91       	pop	r21
    6298:	52 df       	rcall	.-348    	; 0x613e <__mulsf3>
    629a:	05 c0       	rjmp	.+10     	; 0x62a6 <exp>
    629c:	19 f4       	brne	.+6      	; 0x62a4 <pow+0xa0>
    629e:	0e f0       	brts	.+2      	; 0x62a2 <pow+0x9e>
    62a0:	a4 ce       	rjmp	.-696    	; 0x5fea <__fp_inf>
    62a2:	fd ce       	rjmp	.-518    	; 0x609e <__fp_zero>
    62a4:	a8 ce       	rjmp	.-688    	; 0x5ff6 <__fp_nan>

000062a6 <exp>:
    62a6:	e1 de       	rcall	.-574    	; 0x606a <__fp_splitA>
    62a8:	c8 f3       	brcs	.-14     	; 0x629c <pow+0x98>
    62aa:	96 38       	cpi	r25, 0x86	; 134
    62ac:	c0 f7       	brcc	.-16     	; 0x629e <pow+0x9a>
    62ae:	07 f8       	bld	r0, 7
    62b0:	0f 92       	push	r0
    62b2:	e8 94       	clt
    62b4:	2b e3       	ldi	r18, 0x3B	; 59
    62b6:	3a ea       	ldi	r19, 0xAA	; 170
    62b8:	48 eb       	ldi	r20, 0xB8	; 184
    62ba:	5f e7       	ldi	r21, 0x7F	; 127
    62bc:	4e df       	rcall	.-356    	; 0x615a <__mulsf3_pse>
    62be:	0f 92       	push	r0
    62c0:	0f 92       	push	r0
    62c2:	0f 92       	push	r0
    62c4:	4d b7       	in	r20, 0x3d	; 61
    62c6:	5e b7       	in	r21, 0x3e	; 62
    62c8:	0f 92       	push	r0
    62ca:	89 d0       	rcall	.+274    	; 0x63de <modf>
    62cc:	ec e7       	ldi	r30, 0x7C	; 124
    62ce:	f2 e0       	ldi	r31, 0x02	; 2
    62d0:	24 d0       	rcall	.+72     	; 0x631a <__fp_powser>
    62d2:	4f 91       	pop	r20
    62d4:	5f 91       	pop	r21
    62d6:	ef 91       	pop	r30
    62d8:	ff 91       	pop	r31
    62da:	e5 95       	asr	r30
    62dc:	ee 1f       	adc	r30, r30
    62de:	ff 1f       	adc	r31, r31
    62e0:	49 f0       	breq	.+18     	; 0x62f4 <exp+0x4e>
    62e2:	fe 57       	subi	r31, 0x7E	; 126
    62e4:	e0 68       	ori	r30, 0x80	; 128
    62e6:	44 27       	eor	r20, r20
    62e8:	ee 0f       	add	r30, r30
    62ea:	44 1f       	adc	r20, r20
    62ec:	fa 95       	dec	r31
    62ee:	e1 f7       	brne	.-8      	; 0x62e8 <exp+0x42>
    62f0:	41 95       	neg	r20
    62f2:	55 0b       	sbc	r21, r21
    62f4:	40 d0       	rcall	.+128    	; 0x6376 <ldexp>
    62f6:	0f 90       	pop	r0
    62f8:	07 fe       	sbrs	r0, 7
    62fa:	34 c0       	rjmp	.+104    	; 0x6364 <inverse>
    62fc:	08 95       	ret

000062fe <__fp_mpack>:
    62fe:	9f 3f       	cpi	r25, 0xFF	; 255
    6300:	31 f0       	breq	.+12     	; 0x630e <__fp_mpack_finite+0xc>

00006302 <__fp_mpack_finite>:
    6302:	91 50       	subi	r25, 0x01	; 1
    6304:	20 f4       	brcc	.+8      	; 0x630e <__fp_mpack_finite+0xc>
    6306:	87 95       	ror	r24
    6308:	77 95       	ror	r23
    630a:	67 95       	ror	r22
    630c:	b7 95       	ror	r27
    630e:	88 0f       	add	r24, r24
    6310:	91 1d       	adc	r25, r1
    6312:	96 95       	lsr	r25
    6314:	87 95       	ror	r24
    6316:	97 f9       	bld	r25, 7
    6318:	08 95       	ret

0000631a <__fp_powser>:
    631a:	df 93       	push	r29
    631c:	cf 93       	push	r28
    631e:	1f 93       	push	r17
    6320:	0f 93       	push	r16
    6322:	ff 92       	push	r15
    6324:	ef 92       	push	r14
    6326:	df 92       	push	r13
    6328:	7b 01       	movw	r14, r22
    632a:	8c 01       	movw	r16, r24
    632c:	68 94       	set
    632e:	05 c0       	rjmp	.+10     	; 0x633a <__fp_powser+0x20>
    6330:	da 2e       	mov	r13, r26
    6332:	ef 01       	movw	r28, r30
    6334:	10 df       	rcall	.-480    	; 0x6156 <__mulsf3x>
    6336:	fe 01       	movw	r30, r28
    6338:	e8 94       	clt
    633a:	a5 91       	lpm	r26, Z+
    633c:	25 91       	lpm	r18, Z+
    633e:	35 91       	lpm	r19, Z+
    6340:	45 91       	lpm	r20, Z+
    6342:	55 91       	lpm	r21, Z+
    6344:	ae f3       	brts	.-22     	; 0x6330 <__fp_powser+0x16>
    6346:	ef 01       	movw	r28, r30
    6348:	87 dc       	rcall	.-1778   	; 0x5c58 <__addsf3x>
    634a:	fe 01       	movw	r30, r28
    634c:	97 01       	movw	r18, r14
    634e:	a8 01       	movw	r20, r16
    6350:	da 94       	dec	r13
    6352:	79 f7       	brne	.-34     	; 0x6332 <__fp_powser+0x18>
    6354:	df 90       	pop	r13
    6356:	ef 90       	pop	r14
    6358:	ff 90       	pop	r15
    635a:	0f 91       	pop	r16
    635c:	1f 91       	pop	r17
    635e:	cf 91       	pop	r28
    6360:	df 91       	pop	r29
    6362:	08 95       	ret

00006364 <inverse>:
    6364:	9b 01       	movw	r18, r22
    6366:	ac 01       	movw	r20, r24
    6368:	60 e0       	ldi	r22, 0x00	; 0
    636a:	70 e0       	ldi	r23, 0x00	; 0
    636c:	80 e8       	ldi	r24, 0x80	; 128
    636e:	9f e3       	ldi	r25, 0x3F	; 63
    6370:	ca cc       	rjmp	.-1644   	; 0x5d06 <__divsf3>
    6372:	3b ce       	rjmp	.-906    	; 0x5fea <__fp_inf>
    6374:	c4 cf       	rjmp	.-120    	; 0x62fe <__fp_mpack>

00006376 <ldexp>:
    6376:	79 de       	rcall	.-782    	; 0x606a <__fp_splitA>
    6378:	e8 f3       	brcs	.-6      	; 0x6374 <inverse+0x10>
    637a:	99 23       	and	r25, r25
    637c:	d9 f3       	breq	.-10     	; 0x6374 <inverse+0x10>
    637e:	94 0f       	add	r25, r20
    6380:	51 1d       	adc	r21, r1
    6382:	bb f3       	brvs	.-18     	; 0x6372 <inverse+0xe>
    6384:	91 50       	subi	r25, 0x01	; 1
    6386:	50 40       	sbci	r21, 0x00	; 0
    6388:	94 f0       	brlt	.+36     	; 0x63ae <ldexp+0x38>
    638a:	59 f0       	breq	.+22     	; 0x63a2 <ldexp+0x2c>
    638c:	88 23       	and	r24, r24
    638e:	32 f0       	brmi	.+12     	; 0x639c <ldexp+0x26>
    6390:	66 0f       	add	r22, r22
    6392:	77 1f       	adc	r23, r23
    6394:	88 1f       	adc	r24, r24
    6396:	91 50       	subi	r25, 0x01	; 1
    6398:	50 40       	sbci	r21, 0x00	; 0
    639a:	c1 f7       	brne	.-16     	; 0x638c <ldexp+0x16>
    639c:	9e 3f       	cpi	r25, 0xFE	; 254
    639e:	51 05       	cpc	r21, r1
    63a0:	44 f7       	brge	.-48     	; 0x6372 <inverse+0xe>
    63a2:	88 0f       	add	r24, r24
    63a4:	91 1d       	adc	r25, r1
    63a6:	96 95       	lsr	r25
    63a8:	87 95       	ror	r24
    63aa:	97 f9       	bld	r25, 7
    63ac:	08 95       	ret
    63ae:	5f 3f       	cpi	r21, 0xFF	; 255
    63b0:	ac f0       	brlt	.+42     	; 0x63dc <ldexp+0x66>
    63b2:	98 3e       	cpi	r25, 0xE8	; 232
    63b4:	9c f0       	brlt	.+38     	; 0x63dc <ldexp+0x66>
    63b6:	bb 27       	eor	r27, r27
    63b8:	86 95       	lsr	r24
    63ba:	77 95       	ror	r23
    63bc:	67 95       	ror	r22
    63be:	b7 95       	ror	r27
    63c0:	08 f4       	brcc	.+2      	; 0x63c4 <ldexp+0x4e>
    63c2:	b1 60       	ori	r27, 0x01	; 1
    63c4:	93 95       	inc	r25
    63c6:	c1 f7       	brne	.-16     	; 0x63b8 <ldexp+0x42>
    63c8:	bb 0f       	add	r27, r27
    63ca:	58 f7       	brcc	.-42     	; 0x63a2 <ldexp+0x2c>
    63cc:	11 f4       	brne	.+4      	; 0x63d2 <ldexp+0x5c>
    63ce:	60 ff       	sbrs	r22, 0
    63d0:	e8 cf       	rjmp	.-48     	; 0x63a2 <ldexp+0x2c>
    63d2:	6f 5f       	subi	r22, 0xFF	; 255
    63d4:	7f 4f       	sbci	r23, 0xFF	; 255
    63d6:	8f 4f       	sbci	r24, 0xFF	; 255
    63d8:	9f 4f       	sbci	r25, 0xFF	; 255
    63da:	e3 cf       	rjmp	.-58     	; 0x63a2 <ldexp+0x2c>
    63dc:	61 ce       	rjmp	.-830    	; 0x60a0 <__fp_szero>

000063de <modf>:
    63de:	fa 01       	movw	r30, r20
    63e0:	dc 01       	movw	r26, r24
    63e2:	aa 0f       	add	r26, r26
    63e4:	bb 1f       	adc	r27, r27
    63e6:	9b 01       	movw	r18, r22
    63e8:	ac 01       	movw	r20, r24
    63ea:	bf 57       	subi	r27, 0x7F	; 127
    63ec:	28 f4       	brcc	.+10     	; 0x63f8 <modf+0x1a>
    63ee:	22 27       	eor	r18, r18
    63f0:	33 27       	eor	r19, r19
    63f2:	44 27       	eor	r20, r20
    63f4:	50 78       	andi	r21, 0x80	; 128
    63f6:	1f c0       	rjmp	.+62     	; 0x6436 <modf+0x58>
    63f8:	b7 51       	subi	r27, 0x17	; 23
    63fa:	88 f4       	brcc	.+34     	; 0x641e <modf+0x40>
    63fc:	ab 2f       	mov	r26, r27
    63fe:	00 24       	eor	r0, r0
    6400:	46 95       	lsr	r20
    6402:	37 95       	ror	r19
    6404:	27 95       	ror	r18
    6406:	01 1c       	adc	r0, r1
    6408:	a3 95       	inc	r26
    640a:	d2 f3       	brmi	.-12     	; 0x6400 <modf+0x22>
    640c:	00 20       	and	r0, r0
    640e:	69 f0       	breq	.+26     	; 0x642a <modf+0x4c>
    6410:	22 0f       	add	r18, r18
    6412:	33 1f       	adc	r19, r19
    6414:	44 1f       	adc	r20, r20
    6416:	b3 95       	inc	r27
    6418:	da f3       	brmi	.-10     	; 0x6410 <modf+0x32>
    641a:	0d d0       	rcall	.+26     	; 0x6436 <modf+0x58>
    641c:	0b cc       	rjmp	.-2026   	; 0x5c34 <__subsf3>
    641e:	61 30       	cpi	r22, 0x01	; 1
    6420:	71 05       	cpc	r23, r1
    6422:	a0 e8       	ldi	r26, 0x80	; 128
    6424:	8a 07       	cpc	r24, r26
    6426:	b9 46       	sbci	r27, 0x69	; 105
    6428:	30 f4       	brcc	.+12     	; 0x6436 <modf+0x58>
    642a:	9b 01       	movw	r18, r22
    642c:	ac 01       	movw	r20, r24
    642e:	66 27       	eor	r22, r22
    6430:	77 27       	eor	r23, r23
    6432:	88 27       	eor	r24, r24
    6434:	90 78       	andi	r25, 0x80	; 128
    6436:	30 96       	adiw	r30, 0x00	; 0
    6438:	21 f0       	breq	.+8      	; 0x6442 <modf+0x64>
    643a:	20 83       	st	Z, r18
    643c:	31 83       	std	Z+1, r19	; 0x01
    643e:	42 83       	std	Z+2, r20	; 0x02
    6440:	53 83       	std	Z+3, r21	; 0x03
    6442:	08 95       	ret

00006444 <__mulsi3>:
    6444:	db 01       	movw	r26, r22
    6446:	8f 93       	push	r24
    6448:	9f 93       	push	r25
    644a:	88 d0       	rcall	.+272    	; 0x655c <__muluhisi3>
    644c:	bf 91       	pop	r27
    644e:	af 91       	pop	r26
    6450:	a2 9f       	mul	r26, r18
    6452:	80 0d       	add	r24, r0
    6454:	91 1d       	adc	r25, r1
    6456:	a3 9f       	mul	r26, r19
    6458:	90 0d       	add	r25, r0
    645a:	b2 9f       	mul	r27, r18
    645c:	90 0d       	add	r25, r0
    645e:	11 24       	eor	r1, r1
    6460:	08 95       	ret

00006462 <__udivmodhi4>:
    6462:	aa 1b       	sub	r26, r26
    6464:	bb 1b       	sub	r27, r27
    6466:	51 e1       	ldi	r21, 0x11	; 17
    6468:	07 c0       	rjmp	.+14     	; 0x6478 <__udivmodhi4_ep>

0000646a <__udivmodhi4_loop>:
    646a:	aa 1f       	adc	r26, r26
    646c:	bb 1f       	adc	r27, r27
    646e:	a6 17       	cp	r26, r22
    6470:	b7 07       	cpc	r27, r23
    6472:	10 f0       	brcs	.+4      	; 0x6478 <__udivmodhi4_ep>
    6474:	a6 1b       	sub	r26, r22
    6476:	b7 0b       	sbc	r27, r23

00006478 <__udivmodhi4_ep>:
    6478:	88 1f       	adc	r24, r24
    647a:	99 1f       	adc	r25, r25
    647c:	5a 95       	dec	r21
    647e:	a9 f7       	brne	.-22     	; 0x646a <__udivmodhi4_loop>
    6480:	80 95       	com	r24
    6482:	90 95       	com	r25
    6484:	bc 01       	movw	r22, r24
    6486:	cd 01       	movw	r24, r26
    6488:	08 95       	ret

0000648a <__divmodhi4>:
    648a:	97 fb       	bst	r25, 7
    648c:	07 2e       	mov	r0, r23
    648e:	16 f4       	brtc	.+4      	; 0x6494 <__divmodhi4+0xa>
    6490:	00 94       	com	r0
    6492:	06 d0       	rcall	.+12     	; 0x64a0 <__divmodhi4_neg1>
    6494:	77 fd       	sbrc	r23, 7
    6496:	08 d0       	rcall	.+16     	; 0x64a8 <__divmodhi4_neg2>
    6498:	e4 df       	rcall	.-56     	; 0x6462 <__udivmodhi4>
    649a:	07 fc       	sbrc	r0, 7
    649c:	05 d0       	rcall	.+10     	; 0x64a8 <__divmodhi4_neg2>
    649e:	3e f4       	brtc	.+14     	; 0x64ae <__divmodhi4_exit>

000064a0 <__divmodhi4_neg1>:
    64a0:	90 95       	com	r25
    64a2:	81 95       	neg	r24
    64a4:	9f 4f       	sbci	r25, 0xFF	; 255
    64a6:	08 95       	ret

000064a8 <__divmodhi4_neg2>:
    64a8:	70 95       	com	r23
    64aa:	61 95       	neg	r22
    64ac:	7f 4f       	sbci	r23, 0xFF	; 255

000064ae <__divmodhi4_exit>:
    64ae:	08 95       	ret

000064b0 <__udivmodsi4>:
    64b0:	a1 e2       	ldi	r26, 0x21	; 33
    64b2:	1a 2e       	mov	r1, r26
    64b4:	aa 1b       	sub	r26, r26
    64b6:	bb 1b       	sub	r27, r27
    64b8:	fd 01       	movw	r30, r26
    64ba:	0d c0       	rjmp	.+26     	; 0x64d6 <__udivmodsi4_ep>

000064bc <__udivmodsi4_loop>:
    64bc:	aa 1f       	adc	r26, r26
    64be:	bb 1f       	adc	r27, r27
    64c0:	ee 1f       	adc	r30, r30
    64c2:	ff 1f       	adc	r31, r31
    64c4:	a2 17       	cp	r26, r18
    64c6:	b3 07       	cpc	r27, r19
    64c8:	e4 07       	cpc	r30, r20
    64ca:	f5 07       	cpc	r31, r21
    64cc:	20 f0       	brcs	.+8      	; 0x64d6 <__udivmodsi4_ep>
    64ce:	a2 1b       	sub	r26, r18
    64d0:	b3 0b       	sbc	r27, r19
    64d2:	e4 0b       	sbc	r30, r20
    64d4:	f5 0b       	sbc	r31, r21

000064d6 <__udivmodsi4_ep>:
    64d6:	66 1f       	adc	r22, r22
    64d8:	77 1f       	adc	r23, r23
    64da:	88 1f       	adc	r24, r24
    64dc:	99 1f       	adc	r25, r25
    64de:	1a 94       	dec	r1
    64e0:	69 f7       	brne	.-38     	; 0x64bc <__udivmodsi4_loop>
    64e2:	60 95       	com	r22
    64e4:	70 95       	com	r23
    64e6:	80 95       	com	r24
    64e8:	90 95       	com	r25
    64ea:	9b 01       	movw	r18, r22
    64ec:	ac 01       	movw	r20, r24
    64ee:	bd 01       	movw	r22, r26
    64f0:	cf 01       	movw	r24, r30
    64f2:	08 95       	ret

000064f4 <__divmodsi4>:
    64f4:	05 2e       	mov	r0, r21
    64f6:	97 fb       	bst	r25, 7
    64f8:	16 f4       	brtc	.+4      	; 0x64fe <__divmodsi4+0xa>
    64fa:	00 94       	com	r0
    64fc:	0f d0       	rcall	.+30     	; 0x651c <__negsi2>
    64fe:	57 fd       	sbrc	r21, 7
    6500:	05 d0       	rcall	.+10     	; 0x650c <__divmodsi4_neg2>
    6502:	d6 df       	rcall	.-84     	; 0x64b0 <__udivmodsi4>
    6504:	07 fc       	sbrc	r0, 7
    6506:	02 d0       	rcall	.+4      	; 0x650c <__divmodsi4_neg2>
    6508:	46 f4       	brtc	.+16     	; 0x651a <__divmodsi4_exit>
    650a:	08 c0       	rjmp	.+16     	; 0x651c <__negsi2>

0000650c <__divmodsi4_neg2>:
    650c:	50 95       	com	r21
    650e:	40 95       	com	r20
    6510:	30 95       	com	r19
    6512:	21 95       	neg	r18
    6514:	3f 4f       	sbci	r19, 0xFF	; 255
    6516:	4f 4f       	sbci	r20, 0xFF	; 255
    6518:	5f 4f       	sbci	r21, 0xFF	; 255

0000651a <__divmodsi4_exit>:
    651a:	08 95       	ret

0000651c <__negsi2>:
    651c:	90 95       	com	r25
    651e:	80 95       	com	r24
    6520:	70 95       	com	r23
    6522:	61 95       	neg	r22
    6524:	7f 4f       	sbci	r23, 0xFF	; 255
    6526:	8f 4f       	sbci	r24, 0xFF	; 255
    6528:	9f 4f       	sbci	r25, 0xFF	; 255
    652a:	08 95       	ret

0000652c <__tablejump2__>:
    652c:	ee 0f       	add	r30, r30
    652e:	ff 1f       	adc	r31, r31
    6530:	88 1f       	adc	r24, r24
    6532:	8b bf       	out	0x3b, r24	; 59
    6534:	07 90       	elpm	r0, Z+
    6536:	f6 91       	elpm	r31, Z
    6538:	e0 2d       	mov	r30, r0
    653a:	1b be       	out	0x3b, r1	; 59
    653c:	19 94       	eijmp

0000653e <__umulhisi3>:
    653e:	a2 9f       	mul	r26, r18
    6540:	b0 01       	movw	r22, r0
    6542:	b3 9f       	mul	r27, r19
    6544:	c0 01       	movw	r24, r0
    6546:	a3 9f       	mul	r26, r19
    6548:	70 0d       	add	r23, r0
    654a:	81 1d       	adc	r24, r1
    654c:	11 24       	eor	r1, r1
    654e:	91 1d       	adc	r25, r1
    6550:	b2 9f       	mul	r27, r18
    6552:	70 0d       	add	r23, r0
    6554:	81 1d       	adc	r24, r1
    6556:	11 24       	eor	r1, r1
    6558:	91 1d       	adc	r25, r1
    655a:	08 95       	ret

0000655c <__muluhisi3>:
    655c:	f0 df       	rcall	.-32     	; 0x653e <__umulhisi3>
    655e:	a5 9f       	mul	r26, r21
    6560:	90 0d       	add	r25, r0
    6562:	b4 9f       	mul	r27, r20
    6564:	90 0d       	add	r25, r0
    6566:	a4 9f       	mul	r26, r20
    6568:	80 0d       	add	r24, r0
    656a:	91 1d       	adc	r25, r1
    656c:	11 24       	eor	r1, r1
    656e:	08 95       	ret

00006570 <__muldi3>:
    6570:	df 93       	push	r29
    6572:	cf 93       	push	r28
    6574:	1f 93       	push	r17
    6576:	0f 93       	push	r16
    6578:	9a 9d       	mul	r25, r10
    657a:	f0 2d       	mov	r31, r0
    657c:	21 9f       	mul	r18, r17
    657e:	f0 0d       	add	r31, r0
    6580:	8b 9d       	mul	r24, r11
    6582:	f0 0d       	add	r31, r0
    6584:	8a 9d       	mul	r24, r10
    6586:	e0 2d       	mov	r30, r0
    6588:	f1 0d       	add	r31, r1
    658a:	03 9f       	mul	r16, r19
    658c:	f0 0d       	add	r31, r0
    658e:	02 9f       	mul	r16, r18
    6590:	e0 0d       	add	r30, r0
    6592:	f1 1d       	adc	r31, r1
    6594:	4e 9d       	mul	r20, r14
    6596:	e0 0d       	add	r30, r0
    6598:	f1 1d       	adc	r31, r1
    659a:	5e 9d       	mul	r21, r14
    659c:	f0 0d       	add	r31, r0
    659e:	4f 9d       	mul	r20, r15
    65a0:	f0 0d       	add	r31, r0
    65a2:	7f 93       	push	r23
    65a4:	6f 93       	push	r22
    65a6:	bf 92       	push	r11
    65a8:	af 92       	push	r10
    65aa:	5f 93       	push	r21
    65ac:	4f 93       	push	r20
    65ae:	d5 01       	movw	r26, r10
    65b0:	c6 df       	rcall	.-116    	; 0x653e <__umulhisi3>
    65b2:	8b 01       	movw	r16, r22
    65b4:	ac 01       	movw	r20, r24
    65b6:	d7 01       	movw	r26, r14
    65b8:	c2 df       	rcall	.-124    	; 0x653e <__umulhisi3>
    65ba:	eb 01       	movw	r28, r22
    65bc:	e8 0f       	add	r30, r24
    65be:	f9 1f       	adc	r31, r25
    65c0:	d6 01       	movw	r26, r12
    65c2:	1f d0       	rcall	.+62     	; 0x6602 <__muldi3_6>
    65c4:	2f 91       	pop	r18
    65c6:	3f 91       	pop	r19
    65c8:	d6 01       	movw	r26, r12
    65ca:	b9 df       	rcall	.-142    	; 0x653e <__umulhisi3>
    65cc:	c6 0f       	add	r28, r22
    65ce:	d7 1f       	adc	r29, r23
    65d0:	e8 1f       	adc	r30, r24
    65d2:	f9 1f       	adc	r31, r25
    65d4:	af 91       	pop	r26
    65d6:	bf 91       	pop	r27
    65d8:	14 d0       	rcall	.+40     	; 0x6602 <__muldi3_6>
    65da:	2f 91       	pop	r18
    65dc:	3f 91       	pop	r19
    65de:	af df       	rcall	.-162    	; 0x653e <__umulhisi3>
    65e0:	c6 0f       	add	r28, r22
    65e2:	d7 1f       	adc	r29, r23
    65e4:	e8 1f       	adc	r30, r24
    65e6:	f9 1f       	adc	r31, r25
    65e8:	d6 01       	movw	r26, r12
    65ea:	a9 df       	rcall	.-174    	; 0x653e <__umulhisi3>
    65ec:	e6 0f       	add	r30, r22
    65ee:	f7 1f       	adc	r31, r23
    65f0:	98 01       	movw	r18, r16
    65f2:	be 01       	movw	r22, r28
    65f4:	cf 01       	movw	r24, r30
    65f6:	11 24       	eor	r1, r1
    65f8:	0f 91       	pop	r16
    65fa:	1f 91       	pop	r17
    65fc:	cf 91       	pop	r28
    65fe:	df 91       	pop	r29
    6600:	08 95       	ret

00006602 <__muldi3_6>:
    6602:	9d df       	rcall	.-198    	; 0x653e <__umulhisi3>
    6604:	46 0f       	add	r20, r22
    6606:	57 1f       	adc	r21, r23
    6608:	c8 1f       	adc	r28, r24
    660a:	d9 1f       	adc	r29, r25
    660c:	08 f4       	brcc	.+2      	; 0x6610 <__muldi3_6+0xe>
    660e:	31 96       	adiw	r30, 0x01	; 1
    6610:	08 95       	ret

00006612 <__umoddi3>:
    6612:	68 94       	set
    6614:	01 c0       	rjmp	.+2      	; 0x6618 <__udivdi3_umoddi3>

00006616 <__udivdi3>:
    6616:	e8 94       	clt

00006618 <__udivdi3_umoddi3>:
    6618:	8f 92       	push	r8
    661a:	9f 92       	push	r9
    661c:	cf 93       	push	r28
    661e:	df 93       	push	r29
    6620:	05 d0       	rcall	.+10     	; 0x662c <__udivmod64>
    6622:	df 91       	pop	r29
    6624:	cf 91       	pop	r28
    6626:	9f 90       	pop	r9
    6628:	8f 90       	pop	r8
    662a:	08 95       	ret

0000662c <__udivmod64>:
    662c:	88 24       	eor	r8, r8
    662e:	99 24       	eor	r9, r9
    6630:	f4 01       	movw	r30, r8
    6632:	e4 01       	movw	r28, r8
    6634:	b0 e4       	ldi	r27, 0x40	; 64
    6636:	9f 93       	push	r25
    6638:	aa 27       	eor	r26, r26
    663a:	9a 15       	cp	r25, r10
    663c:	8b 04       	cpc	r8, r11
    663e:	9c 04       	cpc	r9, r12
    6640:	ed 05       	cpc	r30, r13
    6642:	fe 05       	cpc	r31, r14
    6644:	cf 05       	cpc	r28, r15
    6646:	d0 07       	cpc	r29, r16
    6648:	a1 07       	cpc	r26, r17
    664a:	98 f4       	brcc	.+38     	; 0x6672 <__udivmod64+0x46>
    664c:	ad 2f       	mov	r26, r29
    664e:	dc 2f       	mov	r29, r28
    6650:	cf 2f       	mov	r28, r31
    6652:	fe 2f       	mov	r31, r30
    6654:	e9 2d       	mov	r30, r9
    6656:	98 2c       	mov	r9, r8
    6658:	89 2e       	mov	r8, r25
    665a:	98 2f       	mov	r25, r24
    665c:	87 2f       	mov	r24, r23
    665e:	76 2f       	mov	r23, r22
    6660:	65 2f       	mov	r22, r21
    6662:	54 2f       	mov	r21, r20
    6664:	43 2f       	mov	r20, r19
    6666:	32 2f       	mov	r19, r18
    6668:	22 27       	eor	r18, r18
    666a:	b8 50       	subi	r27, 0x08	; 8
    666c:	31 f7       	brne	.-52     	; 0x663a <__udivmod64+0xe>
    666e:	bf 91       	pop	r27
    6670:	27 c0       	rjmp	.+78     	; 0x66c0 <__udivmod64+0x94>
    6672:	1b 2e       	mov	r1, r27
    6674:	bf 91       	pop	r27
    6676:	bb 27       	eor	r27, r27
    6678:	22 0f       	add	r18, r18
    667a:	33 1f       	adc	r19, r19
    667c:	44 1f       	adc	r20, r20
    667e:	55 1f       	adc	r21, r21
    6680:	66 1f       	adc	r22, r22
    6682:	77 1f       	adc	r23, r23
    6684:	88 1f       	adc	r24, r24
    6686:	99 1f       	adc	r25, r25
    6688:	88 1c       	adc	r8, r8
    668a:	99 1c       	adc	r9, r9
    668c:	ee 1f       	adc	r30, r30
    668e:	ff 1f       	adc	r31, r31
    6690:	cc 1f       	adc	r28, r28
    6692:	dd 1f       	adc	r29, r29
    6694:	aa 1f       	adc	r26, r26
    6696:	bb 1f       	adc	r27, r27
    6698:	8a 14       	cp	r8, r10
    669a:	9b 04       	cpc	r9, r11
    669c:	ec 05       	cpc	r30, r12
    669e:	fd 05       	cpc	r31, r13
    66a0:	ce 05       	cpc	r28, r14
    66a2:	df 05       	cpc	r29, r15
    66a4:	a0 07       	cpc	r26, r16
    66a6:	b1 07       	cpc	r27, r17
    66a8:	48 f0       	brcs	.+18     	; 0x66bc <__udivmod64+0x90>
    66aa:	8a 18       	sub	r8, r10
    66ac:	9b 08       	sbc	r9, r11
    66ae:	ec 09       	sbc	r30, r12
    66b0:	fd 09       	sbc	r31, r13
    66b2:	ce 09       	sbc	r28, r14
    66b4:	df 09       	sbc	r29, r15
    66b6:	a0 0b       	sbc	r26, r16
    66b8:	b1 0b       	sbc	r27, r17
    66ba:	21 60       	ori	r18, 0x01	; 1
    66bc:	1a 94       	dec	r1
    66be:	e1 f6       	brne	.-72     	; 0x6678 <__udivmod64+0x4c>
    66c0:	2e f4       	brtc	.+10     	; 0x66cc <__udivmod64+0xa0>
    66c2:	94 01       	movw	r18, r8
    66c4:	af 01       	movw	r20, r30
    66c6:	be 01       	movw	r22, r28
    66c8:	cd 01       	movw	r24, r26
    66ca:	00 0c       	add	r0, r0
    66cc:	08 95       	ret

000066ce <__ashldi3>:
    66ce:	0f 93       	push	r16
    66d0:	08 30       	cpi	r16, 0x08	; 8
    66d2:	90 f0       	brcs	.+36     	; 0x66f8 <__ashldi3+0x2a>
    66d4:	98 2f       	mov	r25, r24
    66d6:	87 2f       	mov	r24, r23
    66d8:	76 2f       	mov	r23, r22
    66da:	65 2f       	mov	r22, r21
    66dc:	54 2f       	mov	r21, r20
    66de:	43 2f       	mov	r20, r19
    66e0:	32 2f       	mov	r19, r18
    66e2:	22 27       	eor	r18, r18
    66e4:	08 50       	subi	r16, 0x08	; 8
    66e6:	f4 cf       	rjmp	.-24     	; 0x66d0 <__ashldi3+0x2>
    66e8:	22 0f       	add	r18, r18
    66ea:	33 1f       	adc	r19, r19
    66ec:	44 1f       	adc	r20, r20
    66ee:	55 1f       	adc	r21, r21
    66f0:	66 1f       	adc	r22, r22
    66f2:	77 1f       	adc	r23, r23
    66f4:	88 1f       	adc	r24, r24
    66f6:	99 1f       	adc	r25, r25
    66f8:	0a 95       	dec	r16
    66fa:	b2 f7       	brpl	.-20     	; 0x66e8 <__ashldi3+0x1a>
    66fc:	0f 91       	pop	r16
    66fe:	08 95       	ret

00006700 <__ashrdi3>:
    6700:	97 fb       	bst	r25, 7
    6702:	10 f8       	bld	r1, 0

00006704 <__lshrdi3>:
    6704:	16 94       	lsr	r1
    6706:	00 08       	sbc	r0, r0
    6708:	0f 93       	push	r16
    670a:	08 30       	cpi	r16, 0x08	; 8
    670c:	98 f0       	brcs	.+38     	; 0x6734 <__lshrdi3+0x30>
    670e:	08 50       	subi	r16, 0x08	; 8
    6710:	23 2f       	mov	r18, r19
    6712:	34 2f       	mov	r19, r20
    6714:	45 2f       	mov	r20, r21
    6716:	56 2f       	mov	r21, r22
    6718:	67 2f       	mov	r22, r23
    671a:	78 2f       	mov	r23, r24
    671c:	89 2f       	mov	r24, r25
    671e:	90 2d       	mov	r25, r0
    6720:	f4 cf       	rjmp	.-24     	; 0x670a <__lshrdi3+0x6>
    6722:	05 94       	asr	r0
    6724:	97 95       	ror	r25
    6726:	87 95       	ror	r24
    6728:	77 95       	ror	r23
    672a:	67 95       	ror	r22
    672c:	57 95       	ror	r21
    672e:	47 95       	ror	r20
    6730:	37 95       	ror	r19
    6732:	27 95       	ror	r18
    6734:	0a 95       	dec	r16
    6736:	aa f7       	brpl	.-22     	; 0x6722 <__lshrdi3+0x1e>
    6738:	0f 91       	pop	r16
    673a:	08 95       	ret

0000673c <memcpy>:
    673c:	fb 01       	movw	r30, r22
    673e:	dc 01       	movw	r26, r24
    6740:	02 c0       	rjmp	.+4      	; 0x6746 <memcpy+0xa>
    6742:	01 90       	ld	r0, Z+
    6744:	0d 92       	st	X+, r0
    6746:	41 50       	subi	r20, 0x01	; 1
    6748:	50 40       	sbci	r21, 0x00	; 0
    674a:	d8 f7       	brcc	.-10     	; 0x6742 <memcpy+0x6>
    674c:	08 95       	ret

0000674e <fdevopen>:
    674e:	0f 93       	push	r16
    6750:	1f 93       	push	r17
    6752:	cf 93       	push	r28
    6754:	df 93       	push	r29
    6756:	00 97       	sbiw	r24, 0x00	; 0
    6758:	31 f4       	brne	.+12     	; 0x6766 <fdevopen+0x18>
    675a:	61 15       	cp	r22, r1
    675c:	71 05       	cpc	r23, r1
    675e:	19 f4       	brne	.+6      	; 0x6766 <fdevopen+0x18>
    6760:	80 e0       	ldi	r24, 0x00	; 0
    6762:	90 e0       	ldi	r25, 0x00	; 0
    6764:	39 c0       	rjmp	.+114    	; 0x67d8 <fdevopen+0x8a>
    6766:	8b 01       	movw	r16, r22
    6768:	ec 01       	movw	r28, r24
    676a:	6e e0       	ldi	r22, 0x0E	; 14
    676c:	70 e0       	ldi	r23, 0x00	; 0
    676e:	81 e0       	ldi	r24, 0x01	; 1
    6770:	90 e0       	ldi	r25, 0x00	; 0
    6772:	47 d5       	rcall	.+2702   	; 0x7202 <calloc>
    6774:	fc 01       	movw	r30, r24
    6776:	89 2b       	or	r24, r25
    6778:	99 f3       	breq	.-26     	; 0x6760 <fdevopen+0x12>
    677a:	80 e8       	ldi	r24, 0x80	; 128
    677c:	83 83       	std	Z+3, r24	; 0x03
    677e:	01 15       	cp	r16, r1
    6780:	11 05       	cpc	r17, r1
    6782:	71 f0       	breq	.+28     	; 0x67a0 <fdevopen+0x52>
    6784:	02 87       	std	Z+10, r16	; 0x0a
    6786:	13 87       	std	Z+11, r17	; 0x0b
    6788:	81 e8       	ldi	r24, 0x81	; 129
    678a:	83 83       	std	Z+3, r24	; 0x03
    678c:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <__iob>
    6790:	90 91 fe 22 	lds	r25, 0x22FE	; 0x8022fe <__iob+0x1>
    6794:	89 2b       	or	r24, r25
    6796:	21 f4       	brne	.+8      	; 0x67a0 <fdevopen+0x52>
    6798:	e0 93 fd 22 	sts	0x22FD, r30	; 0x8022fd <__iob>
    679c:	f0 93 fe 22 	sts	0x22FE, r31	; 0x8022fe <__iob+0x1>
    67a0:	20 97       	sbiw	r28, 0x00	; 0
    67a2:	c9 f0       	breq	.+50     	; 0x67d6 <fdevopen+0x88>
    67a4:	c0 87       	std	Z+8, r28	; 0x08
    67a6:	d1 87       	std	Z+9, r29	; 0x09
    67a8:	83 81       	ldd	r24, Z+3	; 0x03
    67aa:	82 60       	ori	r24, 0x02	; 2
    67ac:	83 83       	std	Z+3, r24	; 0x03
    67ae:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <__iob+0x2>
    67b2:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <__iob+0x3>
    67b6:	89 2b       	or	r24, r25
    67b8:	71 f4       	brne	.+28     	; 0x67d6 <fdevopen+0x88>
    67ba:	e0 93 ff 22 	sts	0x22FF, r30	; 0x8022ff <__iob+0x2>
    67be:	f0 93 00 23 	sts	0x2300, r31	; 0x802300 <__iob+0x3>
    67c2:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <__iob+0x4>
    67c6:	90 91 02 23 	lds	r25, 0x2302	; 0x802302 <__iob+0x5>
    67ca:	89 2b       	or	r24, r25
    67cc:	21 f4       	brne	.+8      	; 0x67d6 <fdevopen+0x88>
    67ce:	e0 93 01 23 	sts	0x2301, r30	; 0x802301 <__iob+0x4>
    67d2:	f0 93 02 23 	sts	0x2302, r31	; 0x802302 <__iob+0x5>
    67d6:	cf 01       	movw	r24, r30
    67d8:	df 91       	pop	r29
    67da:	cf 91       	pop	r28
    67dc:	1f 91       	pop	r17
    67de:	0f 91       	pop	r16
    67e0:	08 95       	ret

000067e2 <printf>:
    67e2:	cf 93       	push	r28
    67e4:	df 93       	push	r29
    67e6:	cd b7       	in	r28, 0x3d	; 61
    67e8:	de b7       	in	r29, 0x3e	; 62
    67ea:	ae 01       	movw	r20, r28
    67ec:	4a 5f       	subi	r20, 0xFA	; 250
    67ee:	5f 4f       	sbci	r21, 0xFF	; 255
    67f0:	fa 01       	movw	r30, r20
    67f2:	61 91       	ld	r22, Z+
    67f4:	71 91       	ld	r23, Z+
    67f6:	af 01       	movw	r20, r30
    67f8:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <__iob+0x2>
    67fc:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <__iob+0x3>
    6800:	46 d0       	rcall	.+140    	; 0x688e <vfprintf>
    6802:	df 91       	pop	r29
    6804:	cf 91       	pop	r28
    6806:	08 95       	ret

00006808 <sprintf>:
    6808:	0f 93       	push	r16
    680a:	1f 93       	push	r17
    680c:	cf 93       	push	r28
    680e:	df 93       	push	r29
    6810:	cd b7       	in	r28, 0x3d	; 61
    6812:	de b7       	in	r29, 0x3e	; 62
    6814:	2e 97       	sbiw	r28, 0x0e	; 14
    6816:	cd bf       	out	0x3d, r28	; 61
    6818:	de bf       	out	0x3e, r29	; 62
    681a:	0e 89       	ldd	r16, Y+22	; 0x16
    681c:	1f 89       	ldd	r17, Y+23	; 0x17
    681e:	86 e0       	ldi	r24, 0x06	; 6
    6820:	8c 83       	std	Y+4, r24	; 0x04
    6822:	09 83       	std	Y+1, r16	; 0x01
    6824:	1a 83       	std	Y+2, r17	; 0x02
    6826:	8f ef       	ldi	r24, 0xFF	; 255
    6828:	9f e7       	ldi	r25, 0x7F	; 127
    682a:	8d 83       	std	Y+5, r24	; 0x05
    682c:	9e 83       	std	Y+6, r25	; 0x06
    682e:	ae 01       	movw	r20, r28
    6830:	46 5e       	subi	r20, 0xE6	; 230
    6832:	5f 4f       	sbci	r21, 0xFF	; 255
    6834:	68 8d       	ldd	r22, Y+24	; 0x18
    6836:	79 8d       	ldd	r23, Y+25	; 0x19
    6838:	ce 01       	movw	r24, r28
    683a:	01 96       	adiw	r24, 0x01	; 1
    683c:	28 d0       	rcall	.+80     	; 0x688e <vfprintf>
    683e:	ef 81       	ldd	r30, Y+7	; 0x07
    6840:	f8 85       	ldd	r31, Y+8	; 0x08
    6842:	e0 0f       	add	r30, r16
    6844:	f1 1f       	adc	r31, r17
    6846:	10 82       	st	Z, r1
    6848:	2e 96       	adiw	r28, 0x0e	; 14
    684a:	cd bf       	out	0x3d, r28	; 61
    684c:	de bf       	out	0x3e, r29	; 62
    684e:	df 91       	pop	r29
    6850:	cf 91       	pop	r28
    6852:	1f 91       	pop	r17
    6854:	0f 91       	pop	r16
    6856:	08 95       	ret

00006858 <sscanf>:
    6858:	cf 93       	push	r28
    685a:	df 93       	push	r29
    685c:	cd b7       	in	r28, 0x3d	; 61
    685e:	de b7       	in	r29, 0x3e	; 62
    6860:	2e 97       	sbiw	r28, 0x0e	; 14
    6862:	cd bf       	out	0x3d, r28	; 61
    6864:	de bf       	out	0x3e, r29	; 62
    6866:	85 e0       	ldi	r24, 0x05	; 5
    6868:	8c 83       	std	Y+4, r24	; 0x04
    686a:	8c 89       	ldd	r24, Y+20	; 0x14
    686c:	9d 89       	ldd	r25, Y+21	; 0x15
    686e:	89 83       	std	Y+1, r24	; 0x01
    6870:	9a 83       	std	Y+2, r25	; 0x02
    6872:	ae 01       	movw	r20, r28
    6874:	48 5e       	subi	r20, 0xE8	; 232
    6876:	5f 4f       	sbci	r21, 0xFF	; 255
    6878:	6e 89       	ldd	r22, Y+22	; 0x16
    687a:	7f 89       	ldd	r23, Y+23	; 0x17
    687c:	ce 01       	movw	r24, r28
    687e:	01 96       	adiw	r24, 0x01	; 1
    6880:	a9 d3       	rcall	.+1874   	; 0x6fd4 <vfscanf>
    6882:	2e 96       	adiw	r28, 0x0e	; 14
    6884:	cd bf       	out	0x3d, r28	; 61
    6886:	de bf       	out	0x3e, r29	; 62
    6888:	df 91       	pop	r29
    688a:	cf 91       	pop	r28
    688c:	08 95       	ret

0000688e <vfprintf>:
    688e:	2f 92       	push	r2
    6890:	3f 92       	push	r3
    6892:	4f 92       	push	r4
    6894:	5f 92       	push	r5
    6896:	6f 92       	push	r6
    6898:	7f 92       	push	r7
    689a:	8f 92       	push	r8
    689c:	9f 92       	push	r9
    689e:	af 92       	push	r10
    68a0:	bf 92       	push	r11
    68a2:	cf 92       	push	r12
    68a4:	df 92       	push	r13
    68a6:	ef 92       	push	r14
    68a8:	ff 92       	push	r15
    68aa:	0f 93       	push	r16
    68ac:	1f 93       	push	r17
    68ae:	cf 93       	push	r28
    68b0:	df 93       	push	r29
    68b2:	cd b7       	in	r28, 0x3d	; 61
    68b4:	de b7       	in	r29, 0x3e	; 62
    68b6:	2b 97       	sbiw	r28, 0x0b	; 11
    68b8:	cd bf       	out	0x3d, r28	; 61
    68ba:	de bf       	out	0x3e, r29	; 62
    68bc:	6c 01       	movw	r12, r24
    68be:	7b 01       	movw	r14, r22
    68c0:	8a 01       	movw	r16, r20
    68c2:	fc 01       	movw	r30, r24
    68c4:	16 82       	std	Z+6, r1	; 0x06
    68c6:	17 82       	std	Z+7, r1	; 0x07
    68c8:	83 81       	ldd	r24, Z+3	; 0x03
    68ca:	81 ff       	sbrs	r24, 1
    68cc:	bf c1       	rjmp	.+894    	; 0x6c4c <vfprintf+0x3be>
    68ce:	ce 01       	movw	r24, r28
    68d0:	01 96       	adiw	r24, 0x01	; 1
    68d2:	3c 01       	movw	r6, r24
    68d4:	f6 01       	movw	r30, r12
    68d6:	93 81       	ldd	r25, Z+3	; 0x03
    68d8:	f7 01       	movw	r30, r14
    68da:	93 fd       	sbrc	r25, 3
    68dc:	85 91       	lpm	r24, Z+
    68de:	93 ff       	sbrs	r25, 3
    68e0:	81 91       	ld	r24, Z+
    68e2:	7f 01       	movw	r14, r30
    68e4:	88 23       	and	r24, r24
    68e6:	09 f4       	brne	.+2      	; 0x68ea <vfprintf+0x5c>
    68e8:	ad c1       	rjmp	.+858    	; 0x6c44 <vfprintf+0x3b6>
    68ea:	85 32       	cpi	r24, 0x25	; 37
    68ec:	39 f4       	brne	.+14     	; 0x68fc <vfprintf+0x6e>
    68ee:	93 fd       	sbrc	r25, 3
    68f0:	85 91       	lpm	r24, Z+
    68f2:	93 ff       	sbrs	r25, 3
    68f4:	81 91       	ld	r24, Z+
    68f6:	7f 01       	movw	r14, r30
    68f8:	85 32       	cpi	r24, 0x25	; 37
    68fa:	21 f4       	brne	.+8      	; 0x6904 <vfprintf+0x76>
    68fc:	b6 01       	movw	r22, r12
    68fe:	90 e0       	ldi	r25, 0x00	; 0
    6900:	29 d6       	rcall	.+3154   	; 0x7554 <fputc>
    6902:	e8 cf       	rjmp	.-48     	; 0x68d4 <vfprintf+0x46>
    6904:	91 2c       	mov	r9, r1
    6906:	21 2c       	mov	r2, r1
    6908:	31 2c       	mov	r3, r1
    690a:	ff e1       	ldi	r31, 0x1F	; 31
    690c:	f3 15       	cp	r31, r3
    690e:	d8 f0       	brcs	.+54     	; 0x6946 <vfprintf+0xb8>
    6910:	8b 32       	cpi	r24, 0x2B	; 43
    6912:	79 f0       	breq	.+30     	; 0x6932 <vfprintf+0xa4>
    6914:	38 f4       	brcc	.+14     	; 0x6924 <vfprintf+0x96>
    6916:	80 32       	cpi	r24, 0x20	; 32
    6918:	79 f0       	breq	.+30     	; 0x6938 <vfprintf+0xaa>
    691a:	83 32       	cpi	r24, 0x23	; 35
    691c:	a1 f4       	brne	.+40     	; 0x6946 <vfprintf+0xb8>
    691e:	23 2d       	mov	r18, r3
    6920:	20 61       	ori	r18, 0x10	; 16
    6922:	1d c0       	rjmp	.+58     	; 0x695e <vfprintf+0xd0>
    6924:	8d 32       	cpi	r24, 0x2D	; 45
    6926:	61 f0       	breq	.+24     	; 0x6940 <vfprintf+0xb2>
    6928:	80 33       	cpi	r24, 0x30	; 48
    692a:	69 f4       	brne	.+26     	; 0x6946 <vfprintf+0xb8>
    692c:	23 2d       	mov	r18, r3
    692e:	21 60       	ori	r18, 0x01	; 1
    6930:	16 c0       	rjmp	.+44     	; 0x695e <vfprintf+0xd0>
    6932:	83 2d       	mov	r24, r3
    6934:	82 60       	ori	r24, 0x02	; 2
    6936:	38 2e       	mov	r3, r24
    6938:	e3 2d       	mov	r30, r3
    693a:	e4 60       	ori	r30, 0x04	; 4
    693c:	3e 2e       	mov	r3, r30
    693e:	2a c0       	rjmp	.+84     	; 0x6994 <vfprintf+0x106>
    6940:	f3 2d       	mov	r31, r3
    6942:	f8 60       	ori	r31, 0x08	; 8
    6944:	1d c0       	rjmp	.+58     	; 0x6980 <vfprintf+0xf2>
    6946:	37 fc       	sbrc	r3, 7
    6948:	2d c0       	rjmp	.+90     	; 0x69a4 <vfprintf+0x116>
    694a:	20 ed       	ldi	r18, 0xD0	; 208
    694c:	28 0f       	add	r18, r24
    694e:	2a 30       	cpi	r18, 0x0A	; 10
    6950:	40 f0       	brcs	.+16     	; 0x6962 <vfprintf+0xd4>
    6952:	8e 32       	cpi	r24, 0x2E	; 46
    6954:	b9 f4       	brne	.+46     	; 0x6984 <vfprintf+0xf6>
    6956:	36 fc       	sbrc	r3, 6
    6958:	75 c1       	rjmp	.+746    	; 0x6c44 <vfprintf+0x3b6>
    695a:	23 2d       	mov	r18, r3
    695c:	20 64       	ori	r18, 0x40	; 64
    695e:	32 2e       	mov	r3, r18
    6960:	19 c0       	rjmp	.+50     	; 0x6994 <vfprintf+0x106>
    6962:	36 fe       	sbrs	r3, 6
    6964:	06 c0       	rjmp	.+12     	; 0x6972 <vfprintf+0xe4>
    6966:	8a e0       	ldi	r24, 0x0A	; 10
    6968:	98 9e       	mul	r9, r24
    696a:	20 0d       	add	r18, r0
    696c:	11 24       	eor	r1, r1
    696e:	92 2e       	mov	r9, r18
    6970:	11 c0       	rjmp	.+34     	; 0x6994 <vfprintf+0x106>
    6972:	ea e0       	ldi	r30, 0x0A	; 10
    6974:	2e 9e       	mul	r2, r30
    6976:	20 0d       	add	r18, r0
    6978:	11 24       	eor	r1, r1
    697a:	22 2e       	mov	r2, r18
    697c:	f3 2d       	mov	r31, r3
    697e:	f0 62       	ori	r31, 0x20	; 32
    6980:	3f 2e       	mov	r3, r31
    6982:	08 c0       	rjmp	.+16     	; 0x6994 <vfprintf+0x106>
    6984:	8c 36       	cpi	r24, 0x6C	; 108
    6986:	21 f4       	brne	.+8      	; 0x6990 <vfprintf+0x102>
    6988:	83 2d       	mov	r24, r3
    698a:	80 68       	ori	r24, 0x80	; 128
    698c:	38 2e       	mov	r3, r24
    698e:	02 c0       	rjmp	.+4      	; 0x6994 <vfprintf+0x106>
    6990:	88 36       	cpi	r24, 0x68	; 104
    6992:	41 f4       	brne	.+16     	; 0x69a4 <vfprintf+0x116>
    6994:	f7 01       	movw	r30, r14
    6996:	93 fd       	sbrc	r25, 3
    6998:	85 91       	lpm	r24, Z+
    699a:	93 ff       	sbrs	r25, 3
    699c:	81 91       	ld	r24, Z+
    699e:	7f 01       	movw	r14, r30
    69a0:	81 11       	cpse	r24, r1
    69a2:	b3 cf       	rjmp	.-154    	; 0x690a <vfprintf+0x7c>
    69a4:	98 2f       	mov	r25, r24
    69a6:	9f 7d       	andi	r25, 0xDF	; 223
    69a8:	95 54       	subi	r25, 0x45	; 69
    69aa:	93 30       	cpi	r25, 0x03	; 3
    69ac:	28 f4       	brcc	.+10     	; 0x69b8 <vfprintf+0x12a>
    69ae:	0c 5f       	subi	r16, 0xFC	; 252
    69b0:	1f 4f       	sbci	r17, 0xFF	; 255
    69b2:	9f e3       	ldi	r25, 0x3F	; 63
    69b4:	99 83       	std	Y+1, r25	; 0x01
    69b6:	0d c0       	rjmp	.+26     	; 0x69d2 <vfprintf+0x144>
    69b8:	83 36       	cpi	r24, 0x63	; 99
    69ba:	31 f0       	breq	.+12     	; 0x69c8 <vfprintf+0x13a>
    69bc:	83 37       	cpi	r24, 0x73	; 115
    69be:	71 f0       	breq	.+28     	; 0x69dc <vfprintf+0x14e>
    69c0:	83 35       	cpi	r24, 0x53	; 83
    69c2:	09 f0       	breq	.+2      	; 0x69c6 <vfprintf+0x138>
    69c4:	55 c0       	rjmp	.+170    	; 0x6a70 <vfprintf+0x1e2>
    69c6:	20 c0       	rjmp	.+64     	; 0x6a08 <vfprintf+0x17a>
    69c8:	f8 01       	movw	r30, r16
    69ca:	80 81       	ld	r24, Z
    69cc:	89 83       	std	Y+1, r24	; 0x01
    69ce:	0e 5f       	subi	r16, 0xFE	; 254
    69d0:	1f 4f       	sbci	r17, 0xFF	; 255
    69d2:	88 24       	eor	r8, r8
    69d4:	83 94       	inc	r8
    69d6:	91 2c       	mov	r9, r1
    69d8:	53 01       	movw	r10, r6
    69da:	12 c0       	rjmp	.+36     	; 0x6a00 <vfprintf+0x172>
    69dc:	28 01       	movw	r4, r16
    69de:	f2 e0       	ldi	r31, 0x02	; 2
    69e0:	4f 0e       	add	r4, r31
    69e2:	51 1c       	adc	r5, r1
    69e4:	f8 01       	movw	r30, r16
    69e6:	a0 80       	ld	r10, Z
    69e8:	b1 80       	ldd	r11, Z+1	; 0x01
    69ea:	36 fe       	sbrs	r3, 6
    69ec:	03 c0       	rjmp	.+6      	; 0x69f4 <vfprintf+0x166>
    69ee:	69 2d       	mov	r22, r9
    69f0:	70 e0       	ldi	r23, 0x00	; 0
    69f2:	02 c0       	rjmp	.+4      	; 0x69f8 <vfprintf+0x16a>
    69f4:	6f ef       	ldi	r22, 0xFF	; 255
    69f6:	7f ef       	ldi	r23, 0xFF	; 255
    69f8:	c5 01       	movw	r24, r10
    69fa:	63 d5       	rcall	.+2758   	; 0x74c2 <strnlen>
    69fc:	4c 01       	movw	r8, r24
    69fe:	82 01       	movw	r16, r4
    6a00:	f3 2d       	mov	r31, r3
    6a02:	ff 77       	andi	r31, 0x7F	; 127
    6a04:	3f 2e       	mov	r3, r31
    6a06:	15 c0       	rjmp	.+42     	; 0x6a32 <vfprintf+0x1a4>
    6a08:	28 01       	movw	r4, r16
    6a0a:	22 e0       	ldi	r18, 0x02	; 2
    6a0c:	42 0e       	add	r4, r18
    6a0e:	51 1c       	adc	r5, r1
    6a10:	f8 01       	movw	r30, r16
    6a12:	a0 80       	ld	r10, Z
    6a14:	b1 80       	ldd	r11, Z+1	; 0x01
    6a16:	36 fe       	sbrs	r3, 6
    6a18:	03 c0       	rjmp	.+6      	; 0x6a20 <vfprintf+0x192>
    6a1a:	69 2d       	mov	r22, r9
    6a1c:	70 e0       	ldi	r23, 0x00	; 0
    6a1e:	02 c0       	rjmp	.+4      	; 0x6a24 <vfprintf+0x196>
    6a20:	6f ef       	ldi	r22, 0xFF	; 255
    6a22:	7f ef       	ldi	r23, 0xFF	; 255
    6a24:	c5 01       	movw	r24, r10
    6a26:	3b d5       	rcall	.+2678   	; 0x749e <strnlen_P>
    6a28:	4c 01       	movw	r8, r24
    6a2a:	f3 2d       	mov	r31, r3
    6a2c:	f0 68       	ori	r31, 0x80	; 128
    6a2e:	3f 2e       	mov	r3, r31
    6a30:	82 01       	movw	r16, r4
    6a32:	33 fc       	sbrc	r3, 3
    6a34:	19 c0       	rjmp	.+50     	; 0x6a68 <vfprintf+0x1da>
    6a36:	82 2d       	mov	r24, r2
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	88 16       	cp	r8, r24
    6a3c:	99 06       	cpc	r9, r25
    6a3e:	a0 f4       	brcc	.+40     	; 0x6a68 <vfprintf+0x1da>
    6a40:	b6 01       	movw	r22, r12
    6a42:	80 e2       	ldi	r24, 0x20	; 32
    6a44:	90 e0       	ldi	r25, 0x00	; 0
    6a46:	86 d5       	rcall	.+2828   	; 0x7554 <fputc>
    6a48:	2a 94       	dec	r2
    6a4a:	f5 cf       	rjmp	.-22     	; 0x6a36 <vfprintf+0x1a8>
    6a4c:	f5 01       	movw	r30, r10
    6a4e:	37 fc       	sbrc	r3, 7
    6a50:	85 91       	lpm	r24, Z+
    6a52:	37 fe       	sbrs	r3, 7
    6a54:	81 91       	ld	r24, Z+
    6a56:	5f 01       	movw	r10, r30
    6a58:	b6 01       	movw	r22, r12
    6a5a:	90 e0       	ldi	r25, 0x00	; 0
    6a5c:	7b d5       	rcall	.+2806   	; 0x7554 <fputc>
    6a5e:	21 10       	cpse	r2, r1
    6a60:	2a 94       	dec	r2
    6a62:	21 e0       	ldi	r18, 0x01	; 1
    6a64:	82 1a       	sub	r8, r18
    6a66:	91 08       	sbc	r9, r1
    6a68:	81 14       	cp	r8, r1
    6a6a:	91 04       	cpc	r9, r1
    6a6c:	79 f7       	brne	.-34     	; 0x6a4c <vfprintf+0x1be>
    6a6e:	e1 c0       	rjmp	.+450    	; 0x6c32 <vfprintf+0x3a4>
    6a70:	84 36       	cpi	r24, 0x64	; 100
    6a72:	11 f0       	breq	.+4      	; 0x6a78 <vfprintf+0x1ea>
    6a74:	89 36       	cpi	r24, 0x69	; 105
    6a76:	39 f5       	brne	.+78     	; 0x6ac6 <vfprintf+0x238>
    6a78:	f8 01       	movw	r30, r16
    6a7a:	37 fe       	sbrs	r3, 7
    6a7c:	07 c0       	rjmp	.+14     	; 0x6a8c <vfprintf+0x1fe>
    6a7e:	60 81       	ld	r22, Z
    6a80:	71 81       	ldd	r23, Z+1	; 0x01
    6a82:	82 81       	ldd	r24, Z+2	; 0x02
    6a84:	93 81       	ldd	r25, Z+3	; 0x03
    6a86:	0c 5f       	subi	r16, 0xFC	; 252
    6a88:	1f 4f       	sbci	r17, 0xFF	; 255
    6a8a:	08 c0       	rjmp	.+16     	; 0x6a9c <vfprintf+0x20e>
    6a8c:	60 81       	ld	r22, Z
    6a8e:	71 81       	ldd	r23, Z+1	; 0x01
    6a90:	07 2e       	mov	r0, r23
    6a92:	00 0c       	add	r0, r0
    6a94:	88 0b       	sbc	r24, r24
    6a96:	99 0b       	sbc	r25, r25
    6a98:	0e 5f       	subi	r16, 0xFE	; 254
    6a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    6a9c:	f3 2d       	mov	r31, r3
    6a9e:	ff 76       	andi	r31, 0x6F	; 111
    6aa0:	3f 2e       	mov	r3, r31
    6aa2:	97 ff       	sbrs	r25, 7
    6aa4:	09 c0       	rjmp	.+18     	; 0x6ab8 <vfprintf+0x22a>
    6aa6:	90 95       	com	r25
    6aa8:	80 95       	com	r24
    6aaa:	70 95       	com	r23
    6aac:	61 95       	neg	r22
    6aae:	7f 4f       	sbci	r23, 0xFF	; 255
    6ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ab4:	f0 68       	ori	r31, 0x80	; 128
    6ab6:	3f 2e       	mov	r3, r31
    6ab8:	2a e0       	ldi	r18, 0x0A	; 10
    6aba:	30 e0       	ldi	r19, 0x00	; 0
    6abc:	a3 01       	movw	r20, r6
    6abe:	9f d5       	rcall	.+2878   	; 0x75fe <__ultoa_invert>
    6ac0:	88 2e       	mov	r8, r24
    6ac2:	86 18       	sub	r8, r6
    6ac4:	44 c0       	rjmp	.+136    	; 0x6b4e <vfprintf+0x2c0>
    6ac6:	85 37       	cpi	r24, 0x75	; 117
    6ac8:	31 f4       	brne	.+12     	; 0x6ad6 <vfprintf+0x248>
    6aca:	23 2d       	mov	r18, r3
    6acc:	2f 7e       	andi	r18, 0xEF	; 239
    6ace:	b2 2e       	mov	r11, r18
    6ad0:	2a e0       	ldi	r18, 0x0A	; 10
    6ad2:	30 e0       	ldi	r19, 0x00	; 0
    6ad4:	25 c0       	rjmp	.+74     	; 0x6b20 <vfprintf+0x292>
    6ad6:	93 2d       	mov	r25, r3
    6ad8:	99 7f       	andi	r25, 0xF9	; 249
    6ada:	b9 2e       	mov	r11, r25
    6adc:	8f 36       	cpi	r24, 0x6F	; 111
    6ade:	c1 f0       	breq	.+48     	; 0x6b10 <vfprintf+0x282>
    6ae0:	18 f4       	brcc	.+6      	; 0x6ae8 <vfprintf+0x25a>
    6ae2:	88 35       	cpi	r24, 0x58	; 88
    6ae4:	79 f0       	breq	.+30     	; 0x6b04 <vfprintf+0x276>
    6ae6:	ae c0       	rjmp	.+348    	; 0x6c44 <vfprintf+0x3b6>
    6ae8:	80 37       	cpi	r24, 0x70	; 112
    6aea:	19 f0       	breq	.+6      	; 0x6af2 <vfprintf+0x264>
    6aec:	88 37       	cpi	r24, 0x78	; 120
    6aee:	21 f0       	breq	.+8      	; 0x6af8 <vfprintf+0x26a>
    6af0:	a9 c0       	rjmp	.+338    	; 0x6c44 <vfprintf+0x3b6>
    6af2:	e9 2f       	mov	r30, r25
    6af4:	e0 61       	ori	r30, 0x10	; 16
    6af6:	be 2e       	mov	r11, r30
    6af8:	b4 fe       	sbrs	r11, 4
    6afa:	0d c0       	rjmp	.+26     	; 0x6b16 <vfprintf+0x288>
    6afc:	fb 2d       	mov	r31, r11
    6afe:	f4 60       	ori	r31, 0x04	; 4
    6b00:	bf 2e       	mov	r11, r31
    6b02:	09 c0       	rjmp	.+18     	; 0x6b16 <vfprintf+0x288>
    6b04:	34 fe       	sbrs	r3, 4
    6b06:	0a c0       	rjmp	.+20     	; 0x6b1c <vfprintf+0x28e>
    6b08:	29 2f       	mov	r18, r25
    6b0a:	26 60       	ori	r18, 0x06	; 6
    6b0c:	b2 2e       	mov	r11, r18
    6b0e:	06 c0       	rjmp	.+12     	; 0x6b1c <vfprintf+0x28e>
    6b10:	28 e0       	ldi	r18, 0x08	; 8
    6b12:	30 e0       	ldi	r19, 0x00	; 0
    6b14:	05 c0       	rjmp	.+10     	; 0x6b20 <vfprintf+0x292>
    6b16:	20 e1       	ldi	r18, 0x10	; 16
    6b18:	30 e0       	ldi	r19, 0x00	; 0
    6b1a:	02 c0       	rjmp	.+4      	; 0x6b20 <vfprintf+0x292>
    6b1c:	20 e1       	ldi	r18, 0x10	; 16
    6b1e:	32 e0       	ldi	r19, 0x02	; 2
    6b20:	f8 01       	movw	r30, r16
    6b22:	b7 fe       	sbrs	r11, 7
    6b24:	07 c0       	rjmp	.+14     	; 0x6b34 <vfprintf+0x2a6>
    6b26:	60 81       	ld	r22, Z
    6b28:	71 81       	ldd	r23, Z+1	; 0x01
    6b2a:	82 81       	ldd	r24, Z+2	; 0x02
    6b2c:	93 81       	ldd	r25, Z+3	; 0x03
    6b2e:	0c 5f       	subi	r16, 0xFC	; 252
    6b30:	1f 4f       	sbci	r17, 0xFF	; 255
    6b32:	06 c0       	rjmp	.+12     	; 0x6b40 <vfprintf+0x2b2>
    6b34:	60 81       	ld	r22, Z
    6b36:	71 81       	ldd	r23, Z+1	; 0x01
    6b38:	80 e0       	ldi	r24, 0x00	; 0
    6b3a:	90 e0       	ldi	r25, 0x00	; 0
    6b3c:	0e 5f       	subi	r16, 0xFE	; 254
    6b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    6b40:	a3 01       	movw	r20, r6
    6b42:	5d d5       	rcall	.+2746   	; 0x75fe <__ultoa_invert>
    6b44:	88 2e       	mov	r8, r24
    6b46:	86 18       	sub	r8, r6
    6b48:	fb 2d       	mov	r31, r11
    6b4a:	ff 77       	andi	r31, 0x7F	; 127
    6b4c:	3f 2e       	mov	r3, r31
    6b4e:	36 fe       	sbrs	r3, 6
    6b50:	0d c0       	rjmp	.+26     	; 0x6b6c <vfprintf+0x2de>
    6b52:	23 2d       	mov	r18, r3
    6b54:	2e 7f       	andi	r18, 0xFE	; 254
    6b56:	a2 2e       	mov	r10, r18
    6b58:	89 14       	cp	r8, r9
    6b5a:	58 f4       	brcc	.+22     	; 0x6b72 <vfprintf+0x2e4>
    6b5c:	34 fe       	sbrs	r3, 4
    6b5e:	0b c0       	rjmp	.+22     	; 0x6b76 <vfprintf+0x2e8>
    6b60:	32 fc       	sbrc	r3, 2
    6b62:	09 c0       	rjmp	.+18     	; 0x6b76 <vfprintf+0x2e8>
    6b64:	83 2d       	mov	r24, r3
    6b66:	8e 7e       	andi	r24, 0xEE	; 238
    6b68:	a8 2e       	mov	r10, r24
    6b6a:	05 c0       	rjmp	.+10     	; 0x6b76 <vfprintf+0x2e8>
    6b6c:	b8 2c       	mov	r11, r8
    6b6e:	a3 2c       	mov	r10, r3
    6b70:	03 c0       	rjmp	.+6      	; 0x6b78 <vfprintf+0x2ea>
    6b72:	b8 2c       	mov	r11, r8
    6b74:	01 c0       	rjmp	.+2      	; 0x6b78 <vfprintf+0x2ea>
    6b76:	b9 2c       	mov	r11, r9
    6b78:	a4 fe       	sbrs	r10, 4
    6b7a:	0f c0       	rjmp	.+30     	; 0x6b9a <vfprintf+0x30c>
    6b7c:	fe 01       	movw	r30, r28
    6b7e:	e8 0d       	add	r30, r8
    6b80:	f1 1d       	adc	r31, r1
    6b82:	80 81       	ld	r24, Z
    6b84:	80 33       	cpi	r24, 0x30	; 48
    6b86:	21 f4       	brne	.+8      	; 0x6b90 <vfprintf+0x302>
    6b88:	9a 2d       	mov	r25, r10
    6b8a:	99 7e       	andi	r25, 0xE9	; 233
    6b8c:	a9 2e       	mov	r10, r25
    6b8e:	09 c0       	rjmp	.+18     	; 0x6ba2 <vfprintf+0x314>
    6b90:	a2 fe       	sbrs	r10, 2
    6b92:	06 c0       	rjmp	.+12     	; 0x6ba0 <vfprintf+0x312>
    6b94:	b3 94       	inc	r11
    6b96:	b3 94       	inc	r11
    6b98:	04 c0       	rjmp	.+8      	; 0x6ba2 <vfprintf+0x314>
    6b9a:	8a 2d       	mov	r24, r10
    6b9c:	86 78       	andi	r24, 0x86	; 134
    6b9e:	09 f0       	breq	.+2      	; 0x6ba2 <vfprintf+0x314>
    6ba0:	b3 94       	inc	r11
    6ba2:	a3 fc       	sbrc	r10, 3
    6ba4:	10 c0       	rjmp	.+32     	; 0x6bc6 <vfprintf+0x338>
    6ba6:	a0 fe       	sbrs	r10, 0
    6ba8:	06 c0       	rjmp	.+12     	; 0x6bb6 <vfprintf+0x328>
    6baa:	b2 14       	cp	r11, r2
    6bac:	80 f4       	brcc	.+32     	; 0x6bce <vfprintf+0x340>
    6bae:	28 0c       	add	r2, r8
    6bb0:	92 2c       	mov	r9, r2
    6bb2:	9b 18       	sub	r9, r11
    6bb4:	0d c0       	rjmp	.+26     	; 0x6bd0 <vfprintf+0x342>
    6bb6:	b2 14       	cp	r11, r2
    6bb8:	58 f4       	brcc	.+22     	; 0x6bd0 <vfprintf+0x342>
    6bba:	b6 01       	movw	r22, r12
    6bbc:	80 e2       	ldi	r24, 0x20	; 32
    6bbe:	90 e0       	ldi	r25, 0x00	; 0
    6bc0:	c9 d4       	rcall	.+2450   	; 0x7554 <fputc>
    6bc2:	b3 94       	inc	r11
    6bc4:	f8 cf       	rjmp	.-16     	; 0x6bb6 <vfprintf+0x328>
    6bc6:	b2 14       	cp	r11, r2
    6bc8:	18 f4       	brcc	.+6      	; 0x6bd0 <vfprintf+0x342>
    6bca:	2b 18       	sub	r2, r11
    6bcc:	02 c0       	rjmp	.+4      	; 0x6bd2 <vfprintf+0x344>
    6bce:	98 2c       	mov	r9, r8
    6bd0:	21 2c       	mov	r2, r1
    6bd2:	a4 fe       	sbrs	r10, 4
    6bd4:	0f c0       	rjmp	.+30     	; 0x6bf4 <vfprintf+0x366>
    6bd6:	b6 01       	movw	r22, r12
    6bd8:	80 e3       	ldi	r24, 0x30	; 48
    6bda:	90 e0       	ldi	r25, 0x00	; 0
    6bdc:	bb d4       	rcall	.+2422   	; 0x7554 <fputc>
    6bde:	a2 fe       	sbrs	r10, 2
    6be0:	16 c0       	rjmp	.+44     	; 0x6c0e <vfprintf+0x380>
    6be2:	a1 fc       	sbrc	r10, 1
    6be4:	03 c0       	rjmp	.+6      	; 0x6bec <vfprintf+0x35e>
    6be6:	88 e7       	ldi	r24, 0x78	; 120
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	02 c0       	rjmp	.+4      	; 0x6bf0 <vfprintf+0x362>
    6bec:	88 e5       	ldi	r24, 0x58	; 88
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	b6 01       	movw	r22, r12
    6bf2:	0c c0       	rjmp	.+24     	; 0x6c0c <vfprintf+0x37e>
    6bf4:	8a 2d       	mov	r24, r10
    6bf6:	86 78       	andi	r24, 0x86	; 134
    6bf8:	51 f0       	breq	.+20     	; 0x6c0e <vfprintf+0x380>
    6bfa:	a1 fe       	sbrs	r10, 1
    6bfc:	02 c0       	rjmp	.+4      	; 0x6c02 <vfprintf+0x374>
    6bfe:	8b e2       	ldi	r24, 0x2B	; 43
    6c00:	01 c0       	rjmp	.+2      	; 0x6c04 <vfprintf+0x376>
    6c02:	80 e2       	ldi	r24, 0x20	; 32
    6c04:	a7 fc       	sbrc	r10, 7
    6c06:	8d e2       	ldi	r24, 0x2D	; 45
    6c08:	b6 01       	movw	r22, r12
    6c0a:	90 e0       	ldi	r25, 0x00	; 0
    6c0c:	a3 d4       	rcall	.+2374   	; 0x7554 <fputc>
    6c0e:	89 14       	cp	r8, r9
    6c10:	30 f4       	brcc	.+12     	; 0x6c1e <vfprintf+0x390>
    6c12:	b6 01       	movw	r22, r12
    6c14:	80 e3       	ldi	r24, 0x30	; 48
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	9d d4       	rcall	.+2362   	; 0x7554 <fputc>
    6c1a:	9a 94       	dec	r9
    6c1c:	f8 cf       	rjmp	.-16     	; 0x6c0e <vfprintf+0x380>
    6c1e:	8a 94       	dec	r8
    6c20:	f3 01       	movw	r30, r6
    6c22:	e8 0d       	add	r30, r8
    6c24:	f1 1d       	adc	r31, r1
    6c26:	80 81       	ld	r24, Z
    6c28:	b6 01       	movw	r22, r12
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	93 d4       	rcall	.+2342   	; 0x7554 <fputc>
    6c2e:	81 10       	cpse	r8, r1
    6c30:	f6 cf       	rjmp	.-20     	; 0x6c1e <vfprintf+0x390>
    6c32:	22 20       	and	r2, r2
    6c34:	09 f4       	brne	.+2      	; 0x6c38 <vfprintf+0x3aa>
    6c36:	4e ce       	rjmp	.-868    	; 0x68d4 <vfprintf+0x46>
    6c38:	b6 01       	movw	r22, r12
    6c3a:	80 e2       	ldi	r24, 0x20	; 32
    6c3c:	90 e0       	ldi	r25, 0x00	; 0
    6c3e:	8a d4       	rcall	.+2324   	; 0x7554 <fputc>
    6c40:	2a 94       	dec	r2
    6c42:	f7 cf       	rjmp	.-18     	; 0x6c32 <vfprintf+0x3a4>
    6c44:	f6 01       	movw	r30, r12
    6c46:	86 81       	ldd	r24, Z+6	; 0x06
    6c48:	97 81       	ldd	r25, Z+7	; 0x07
    6c4a:	02 c0       	rjmp	.+4      	; 0x6c50 <vfprintf+0x3c2>
    6c4c:	8f ef       	ldi	r24, 0xFF	; 255
    6c4e:	9f ef       	ldi	r25, 0xFF	; 255
    6c50:	2b 96       	adiw	r28, 0x0b	; 11
    6c52:	cd bf       	out	0x3d, r28	; 61
    6c54:	de bf       	out	0x3e, r29	; 62
    6c56:	df 91       	pop	r29
    6c58:	cf 91       	pop	r28
    6c5a:	1f 91       	pop	r17
    6c5c:	0f 91       	pop	r16
    6c5e:	ff 90       	pop	r15
    6c60:	ef 90       	pop	r14
    6c62:	df 90       	pop	r13
    6c64:	cf 90       	pop	r12
    6c66:	bf 90       	pop	r11
    6c68:	af 90       	pop	r10
    6c6a:	9f 90       	pop	r9
    6c6c:	8f 90       	pop	r8
    6c6e:	7f 90       	pop	r7
    6c70:	6f 90       	pop	r6
    6c72:	5f 90       	pop	r5
    6c74:	4f 90       	pop	r4
    6c76:	3f 90       	pop	r3
    6c78:	2f 90       	pop	r2
    6c7a:	08 95       	ret

00006c7c <putval>:
    6c7c:	20 fd       	sbrc	r18, 0
    6c7e:	09 c0       	rjmp	.+18     	; 0x6c92 <putval+0x16>
    6c80:	fc 01       	movw	r30, r24
    6c82:	23 fd       	sbrc	r18, 3
    6c84:	05 c0       	rjmp	.+10     	; 0x6c90 <putval+0x14>
    6c86:	22 ff       	sbrs	r18, 2
    6c88:	02 c0       	rjmp	.+4      	; 0x6c8e <putval+0x12>
    6c8a:	73 83       	std	Z+3, r23	; 0x03
    6c8c:	62 83       	std	Z+2, r22	; 0x02
    6c8e:	51 83       	std	Z+1, r21	; 0x01
    6c90:	40 83       	st	Z, r20
    6c92:	08 95       	ret

00006c94 <mulacc>:
    6c94:	44 fd       	sbrc	r20, 4
    6c96:	17 c0       	rjmp	.+46     	; 0x6cc6 <mulacc+0x32>
    6c98:	46 fd       	sbrc	r20, 6
    6c9a:	17 c0       	rjmp	.+46     	; 0x6cca <mulacc+0x36>
    6c9c:	ab 01       	movw	r20, r22
    6c9e:	bc 01       	movw	r22, r24
    6ca0:	da 01       	movw	r26, r20
    6ca2:	fb 01       	movw	r30, r22
    6ca4:	aa 0f       	add	r26, r26
    6ca6:	bb 1f       	adc	r27, r27
    6ca8:	ee 1f       	adc	r30, r30
    6caa:	ff 1f       	adc	r31, r31
    6cac:	10 94       	com	r1
    6cae:	d1 f7       	brne	.-12     	; 0x6ca4 <mulacc+0x10>
    6cb0:	4a 0f       	add	r20, r26
    6cb2:	5b 1f       	adc	r21, r27
    6cb4:	6e 1f       	adc	r22, r30
    6cb6:	7f 1f       	adc	r23, r31
    6cb8:	cb 01       	movw	r24, r22
    6cba:	ba 01       	movw	r22, r20
    6cbc:	66 0f       	add	r22, r22
    6cbe:	77 1f       	adc	r23, r23
    6cc0:	88 1f       	adc	r24, r24
    6cc2:	99 1f       	adc	r25, r25
    6cc4:	09 c0       	rjmp	.+18     	; 0x6cd8 <mulacc+0x44>
    6cc6:	33 e0       	ldi	r19, 0x03	; 3
    6cc8:	01 c0       	rjmp	.+2      	; 0x6ccc <mulacc+0x38>
    6cca:	34 e0       	ldi	r19, 0x04	; 4
    6ccc:	66 0f       	add	r22, r22
    6cce:	77 1f       	adc	r23, r23
    6cd0:	88 1f       	adc	r24, r24
    6cd2:	99 1f       	adc	r25, r25
    6cd4:	31 50       	subi	r19, 0x01	; 1
    6cd6:	d1 f7       	brne	.-12     	; 0x6ccc <mulacc+0x38>
    6cd8:	62 0f       	add	r22, r18
    6cda:	71 1d       	adc	r23, r1
    6cdc:	81 1d       	adc	r24, r1
    6cde:	91 1d       	adc	r25, r1
    6ce0:	08 95       	ret

00006ce2 <skip_spaces>:
    6ce2:	0f 93       	push	r16
    6ce4:	1f 93       	push	r17
    6ce6:	cf 93       	push	r28
    6ce8:	df 93       	push	r29
    6cea:	8c 01       	movw	r16, r24
    6cec:	c8 01       	movw	r24, r16
    6cee:	f4 d3       	rcall	.+2024   	; 0x74d8 <fgetc>
    6cf0:	ec 01       	movw	r28, r24
    6cf2:	97 fd       	sbrc	r25, 7
    6cf4:	06 c0       	rjmp	.+12     	; 0x6d02 <skip_spaces+0x20>
    6cf6:	c0 d3       	rcall	.+1920   	; 0x7478 <isspace>
    6cf8:	89 2b       	or	r24, r25
    6cfa:	c1 f7       	brne	.-16     	; 0x6cec <skip_spaces+0xa>
    6cfc:	b8 01       	movw	r22, r16
    6cfe:	ce 01       	movw	r24, r28
    6d00:	65 d4       	rcall	.+2250   	; 0x75cc <ungetc>
    6d02:	ce 01       	movw	r24, r28
    6d04:	df 91       	pop	r29
    6d06:	cf 91       	pop	r28
    6d08:	1f 91       	pop	r17
    6d0a:	0f 91       	pop	r16
    6d0c:	08 95       	ret

00006d0e <conv_int>:
    6d0e:	8f 92       	push	r8
    6d10:	9f 92       	push	r9
    6d12:	af 92       	push	r10
    6d14:	bf 92       	push	r11
    6d16:	ef 92       	push	r14
    6d18:	ff 92       	push	r15
    6d1a:	0f 93       	push	r16
    6d1c:	1f 93       	push	r17
    6d1e:	cf 93       	push	r28
    6d20:	df 93       	push	r29
    6d22:	8c 01       	movw	r16, r24
    6d24:	d6 2f       	mov	r29, r22
    6d26:	7a 01       	movw	r14, r20
    6d28:	b2 2e       	mov	r11, r18
    6d2a:	d6 d3       	rcall	.+1964   	; 0x74d8 <fgetc>
    6d2c:	9c 01       	movw	r18, r24
    6d2e:	33 27       	eor	r19, r19
    6d30:	2b 32       	cpi	r18, 0x2B	; 43
    6d32:	31 05       	cpc	r19, r1
    6d34:	31 f0       	breq	.+12     	; 0x6d42 <conv_int+0x34>
    6d36:	2d 32       	cpi	r18, 0x2D	; 45
    6d38:	31 05       	cpc	r19, r1
    6d3a:	59 f4       	brne	.+22     	; 0x6d52 <conv_int+0x44>
    6d3c:	8b 2d       	mov	r24, r11
    6d3e:	80 68       	ori	r24, 0x80	; 128
    6d40:	b8 2e       	mov	r11, r24
    6d42:	d1 50       	subi	r29, 0x01	; 1
    6d44:	11 f4       	brne	.+4      	; 0x6d4a <conv_int+0x3c>
    6d46:	80 e0       	ldi	r24, 0x00	; 0
    6d48:	61 c0       	rjmp	.+194    	; 0x6e0c <conv_int+0xfe>
    6d4a:	c8 01       	movw	r24, r16
    6d4c:	c5 d3       	rcall	.+1930   	; 0x74d8 <fgetc>
    6d4e:	97 fd       	sbrc	r25, 7
    6d50:	fa cf       	rjmp	.-12     	; 0x6d46 <conv_int+0x38>
    6d52:	cb 2d       	mov	r28, r11
    6d54:	cd 7f       	andi	r28, 0xFD	; 253
    6d56:	2b 2d       	mov	r18, r11
    6d58:	20 73       	andi	r18, 0x30	; 48
    6d5a:	f9 f4       	brne	.+62     	; 0x6d9a <conv_int+0x8c>
    6d5c:	80 33       	cpi	r24, 0x30	; 48
    6d5e:	e9 f4       	brne	.+58     	; 0x6d9a <conv_int+0x8c>
    6d60:	aa 24       	eor	r10, r10
    6d62:	aa 94       	dec	r10
    6d64:	ad 0e       	add	r10, r29
    6d66:	09 f4       	brne	.+2      	; 0x6d6a <conv_int+0x5c>
    6d68:	3e c0       	rjmp	.+124    	; 0x6de6 <conv_int+0xd8>
    6d6a:	c8 01       	movw	r24, r16
    6d6c:	b5 d3       	rcall	.+1898   	; 0x74d8 <fgetc>
    6d6e:	97 fd       	sbrc	r25, 7
    6d70:	3a c0       	rjmp	.+116    	; 0x6de6 <conv_int+0xd8>
    6d72:	9c 01       	movw	r18, r24
    6d74:	2f 7d       	andi	r18, 0xDF	; 223
    6d76:	33 27       	eor	r19, r19
    6d78:	28 35       	cpi	r18, 0x58	; 88
    6d7a:	31 05       	cpc	r19, r1
    6d7c:	41 f4       	brne	.+16     	; 0x6d8e <conv_int+0x80>
    6d7e:	c2 64       	ori	r28, 0x42	; 66
    6d80:	d2 50       	subi	r29, 0x02	; 2
    6d82:	89 f1       	breq	.+98     	; 0x6de6 <conv_int+0xd8>
    6d84:	c8 01       	movw	r24, r16
    6d86:	a8 d3       	rcall	.+1872   	; 0x74d8 <fgetc>
    6d88:	97 ff       	sbrs	r25, 7
    6d8a:	07 c0       	rjmp	.+14     	; 0x6d9a <conv_int+0x8c>
    6d8c:	2c c0       	rjmp	.+88     	; 0x6de6 <conv_int+0xd8>
    6d8e:	b6 fe       	sbrs	r11, 6
    6d90:	02 c0       	rjmp	.+4      	; 0x6d96 <conv_int+0x88>
    6d92:	c2 60       	ori	r28, 0x02	; 2
    6d94:	01 c0       	rjmp	.+2      	; 0x6d98 <conv_int+0x8a>
    6d96:	c2 61       	ori	r28, 0x12	; 18
    6d98:	da 2d       	mov	r29, r10
    6d9a:	81 2c       	mov	r8, r1
    6d9c:	91 2c       	mov	r9, r1
    6d9e:	54 01       	movw	r10, r8
    6da0:	20 ed       	ldi	r18, 0xD0	; 208
    6da2:	28 0f       	add	r18, r24
    6da4:	28 30       	cpi	r18, 0x08	; 8
    6da6:	78 f0       	brcs	.+30     	; 0x6dc6 <conv_int+0xb8>
    6da8:	c4 ff       	sbrs	r28, 4
    6daa:	03 c0       	rjmp	.+6      	; 0x6db2 <conv_int+0xa4>
    6dac:	b8 01       	movw	r22, r16
    6dae:	0e d4       	rcall	.+2076   	; 0x75cc <ungetc>
    6db0:	17 c0       	rjmp	.+46     	; 0x6de0 <conv_int+0xd2>
    6db2:	2a 30       	cpi	r18, 0x0A	; 10
    6db4:	40 f0       	brcs	.+16     	; 0x6dc6 <conv_int+0xb8>
    6db6:	c6 ff       	sbrs	r28, 6
    6db8:	f9 cf       	rjmp	.-14     	; 0x6dac <conv_int+0x9e>
    6dba:	2f 7d       	andi	r18, 0xDF	; 223
    6dbc:	3f ee       	ldi	r19, 0xEF	; 239
    6dbe:	32 0f       	add	r19, r18
    6dc0:	36 30       	cpi	r19, 0x06	; 6
    6dc2:	a0 f7       	brcc	.-24     	; 0x6dac <conv_int+0x9e>
    6dc4:	27 50       	subi	r18, 0x07	; 7
    6dc6:	4c 2f       	mov	r20, r28
    6dc8:	c5 01       	movw	r24, r10
    6dca:	b4 01       	movw	r22, r8
    6dcc:	63 df       	rcall	.-314    	; 0x6c94 <mulacc>
    6dce:	4b 01       	movw	r8, r22
    6dd0:	5c 01       	movw	r10, r24
    6dd2:	c2 60       	ori	r28, 0x02	; 2
    6dd4:	d1 50       	subi	r29, 0x01	; 1
    6dd6:	51 f0       	breq	.+20     	; 0x6dec <conv_int+0xde>
    6dd8:	c8 01       	movw	r24, r16
    6dda:	7e d3       	rcall	.+1788   	; 0x74d8 <fgetc>
    6ddc:	97 ff       	sbrs	r25, 7
    6dde:	e0 cf       	rjmp	.-64     	; 0x6da0 <conv_int+0x92>
    6de0:	c1 fd       	sbrc	r28, 1
    6de2:	04 c0       	rjmp	.+8      	; 0x6dec <conv_int+0xde>
    6de4:	b0 cf       	rjmp	.-160    	; 0x6d46 <conv_int+0x38>
    6de6:	81 2c       	mov	r8, r1
    6de8:	91 2c       	mov	r9, r1
    6dea:	54 01       	movw	r10, r8
    6dec:	c7 ff       	sbrs	r28, 7
    6dee:	08 c0       	rjmp	.+16     	; 0x6e00 <conv_int+0xf2>
    6df0:	b0 94       	com	r11
    6df2:	a0 94       	com	r10
    6df4:	90 94       	com	r9
    6df6:	80 94       	com	r8
    6df8:	81 1c       	adc	r8, r1
    6dfa:	91 1c       	adc	r9, r1
    6dfc:	a1 1c       	adc	r10, r1
    6dfe:	b1 1c       	adc	r11, r1
    6e00:	2c 2f       	mov	r18, r28
    6e02:	b5 01       	movw	r22, r10
    6e04:	a4 01       	movw	r20, r8
    6e06:	c7 01       	movw	r24, r14
    6e08:	39 df       	rcall	.-398    	; 0x6c7c <putval>
    6e0a:	81 e0       	ldi	r24, 0x01	; 1
    6e0c:	df 91       	pop	r29
    6e0e:	cf 91       	pop	r28
    6e10:	1f 91       	pop	r17
    6e12:	0f 91       	pop	r16
    6e14:	ff 90       	pop	r15
    6e16:	ef 90       	pop	r14
    6e18:	bf 90       	pop	r11
    6e1a:	af 90       	pop	r10
    6e1c:	9f 90       	pop	r9
    6e1e:	8f 90       	pop	r8
    6e20:	08 95       	ret

00006e22 <conv_brk>:
    6e22:	5f 92       	push	r5
    6e24:	6f 92       	push	r6
    6e26:	7f 92       	push	r7
    6e28:	8f 92       	push	r8
    6e2a:	9f 92       	push	r9
    6e2c:	af 92       	push	r10
    6e2e:	bf 92       	push	r11
    6e30:	cf 92       	push	r12
    6e32:	df 92       	push	r13
    6e34:	ef 92       	push	r14
    6e36:	ff 92       	push	r15
    6e38:	0f 93       	push	r16
    6e3a:	1f 93       	push	r17
    6e3c:	cf 93       	push	r28
    6e3e:	df 93       	push	r29
    6e40:	cd b7       	in	r28, 0x3d	; 61
    6e42:	de b7       	in	r29, 0x3e	; 62
    6e44:	a0 97       	sbiw	r28, 0x20	; 32
    6e46:	cd bf       	out	0x3d, r28	; 61
    6e48:	de bf       	out	0x3e, r29	; 62
    6e4a:	5c 01       	movw	r10, r24
    6e4c:	96 2e       	mov	r9, r22
    6e4e:	7a 01       	movw	r14, r20
    6e50:	f9 01       	movw	r30, r18
    6e52:	8e 01       	movw	r16, r28
    6e54:	0f 5f       	subi	r16, 0xFF	; 255
    6e56:	1f 4f       	sbci	r17, 0xFF	; 255
    6e58:	68 01       	movw	r12, r16
    6e5a:	80 e2       	ldi	r24, 0x20	; 32
    6e5c:	d8 01       	movw	r26, r16
    6e5e:	1d 92       	st	X+, r1
    6e60:	8a 95       	dec	r24
    6e62:	e9 f7       	brne	.-6      	; 0x6e5e <conv_brk+0x3c>
    6e64:	d5 01       	movw	r26, r10
    6e66:	13 96       	adiw	r26, 0x03	; 3
    6e68:	8c 90       	ld	r8, X
    6e6a:	80 e0       	ldi	r24, 0x00	; 0
    6e6c:	90 e0       	ldi	r25, 0x00	; 0
    6e6e:	61 2c       	mov	r6, r1
    6e70:	71 2c       	mov	r7, r1
    6e72:	30 e0       	ldi	r19, 0x00	; 0
    6e74:	61 e0       	ldi	r22, 0x01	; 1
    6e76:	70 e0       	ldi	r23, 0x00	; 0
    6e78:	83 fc       	sbrc	r8, 3
    6e7a:	25 91       	lpm	r18, Z+
    6e7c:	83 fe       	sbrs	r8, 3
    6e7e:	21 91       	ld	r18, Z+
    6e80:	8f 01       	movw	r16, r30
    6e82:	52 2e       	mov	r5, r18
    6e84:	21 11       	cpse	r18, r1
    6e86:	03 c0       	rjmp	.+6      	; 0x6e8e <conv_brk+0x6c>
    6e88:	80 e0       	ldi	r24, 0x00	; 0
    6e8a:	90 e0       	ldi	r25, 0x00	; 0
    6e8c:	90 c0       	rjmp	.+288    	; 0x6fae <conv_brk+0x18c>
    6e8e:	2e 35       	cpi	r18, 0x5E	; 94
    6e90:	11 f4       	brne	.+4      	; 0x6e96 <conv_brk+0x74>
    6e92:	00 97       	sbiw	r24, 0x00	; 0
    6e94:	51 f1       	breq	.+84     	; 0x6eea <conv_brk+0xc8>
    6e96:	43 2f       	mov	r20, r19
    6e98:	50 e0       	ldi	r21, 0x00	; 0
    6e9a:	48 17       	cp	r20, r24
    6e9c:	59 07       	cpc	r21, r25
    6e9e:	3c f4       	brge	.+14     	; 0x6eae <conv_brk+0x8c>
    6ea0:	2d 35       	cpi	r18, 0x5D	; 93
    6ea2:	59 f1       	breq	.+86     	; 0x6efa <conv_brk+0xd8>
    6ea4:	2d 32       	cpi	r18, 0x2D	; 45
    6ea6:	19 f4       	brne	.+6      	; 0x6eae <conv_brk+0x8c>
    6ea8:	77 20       	and	r7, r7
    6eaa:	09 f1       	breq	.+66     	; 0x6eee <conv_brk+0xcc>
    6eac:	03 c0       	rjmp	.+6      	; 0x6eb4 <conv_brk+0x92>
    6eae:	77 20       	and	r7, r7
    6eb0:	09 f4       	brne	.+2      	; 0x6eb4 <conv_brk+0x92>
    6eb2:	68 c0       	rjmp	.+208    	; 0x6f84 <conv_brk+0x162>
    6eb4:	45 2d       	mov	r20, r5
    6eb6:	46 95       	lsr	r20
    6eb8:	46 95       	lsr	r20
    6eba:	46 95       	lsr	r20
    6ebc:	d6 01       	movw	r26, r12
    6ebe:	a4 0f       	add	r26, r20
    6ec0:	b1 1d       	adc	r27, r1
    6ec2:	45 2d       	mov	r20, r5
    6ec4:	47 70       	andi	r20, 0x07	; 7
    6ec6:	8b 01       	movw	r16, r22
    6ec8:	02 c0       	rjmp	.+4      	; 0x6ece <conv_brk+0xac>
    6eca:	00 0f       	add	r16, r16
    6ecc:	11 1f       	adc	r17, r17
    6ece:	4a 95       	dec	r20
    6ed0:	e2 f7       	brpl	.-8      	; 0x6eca <conv_brk+0xa8>
    6ed2:	a8 01       	movw	r20, r16
    6ed4:	5c 91       	ld	r21, X
    6ed6:	45 2b       	or	r20, r21
    6ed8:	4c 93       	st	X, r20
    6eda:	65 14       	cp	r6, r5
    6edc:	59 f0       	breq	.+22     	; 0x6ef4 <conv_brk+0xd2>
    6ede:	56 14       	cp	r5, r6
    6ee0:	10 f4       	brcc	.+4      	; 0x6ee6 <conv_brk+0xc4>
    6ee2:	53 94       	inc	r5
    6ee4:	e7 cf       	rjmp	.-50     	; 0x6eb4 <conv_brk+0x92>
    6ee6:	5a 94       	dec	r5
    6ee8:	e5 cf       	rjmp	.-54     	; 0x6eb4 <conv_brk+0x92>
    6eea:	31 e0       	ldi	r19, 0x01	; 1
    6eec:	04 c0       	rjmp	.+8      	; 0x6ef6 <conv_brk+0xd4>
    6eee:	77 24       	eor	r7, r7
    6ef0:	73 94       	inc	r7
    6ef2:	01 c0       	rjmp	.+2      	; 0x6ef6 <conv_brk+0xd4>
    6ef4:	71 2c       	mov	r7, r1
    6ef6:	01 96       	adiw	r24, 0x01	; 1
    6ef8:	bf cf       	rjmp	.-130    	; 0x6e78 <conv_brk+0x56>
    6efa:	77 20       	and	r7, r7
    6efc:	19 f0       	breq	.+6      	; 0x6f04 <conv_brk+0xe2>
    6efe:	8e 81       	ldd	r24, Y+6	; 0x06
    6f00:	80 62       	ori	r24, 0x20	; 32
    6f02:	8e 83       	std	Y+6, r24	; 0x06
    6f04:	31 11       	cpse	r19, r1
    6f06:	03 c0       	rjmp	.+6      	; 0x6f0e <conv_brk+0xec>
    6f08:	88 24       	eor	r8, r8
    6f0a:	83 94       	inc	r8
    6f0c:	17 c0       	rjmp	.+46     	; 0x6f3c <conv_brk+0x11a>
    6f0e:	f6 01       	movw	r30, r12
    6f10:	9e 01       	movw	r18, r28
    6f12:	2f 5d       	subi	r18, 0xDF	; 223
    6f14:	3f 4f       	sbci	r19, 0xFF	; 255
    6f16:	80 81       	ld	r24, Z
    6f18:	80 95       	com	r24
    6f1a:	81 93       	st	Z+, r24
    6f1c:	2e 17       	cp	r18, r30
    6f1e:	3f 07       	cpc	r19, r31
    6f20:	d1 f7       	brne	.-12     	; 0x6f16 <conv_brk+0xf4>
    6f22:	f2 cf       	rjmp	.-28     	; 0x6f08 <conv_brk+0xe6>
    6f24:	e1 14       	cp	r14, r1
    6f26:	f1 04       	cpc	r15, r1
    6f28:	29 f0       	breq	.+10     	; 0x6f34 <conv_brk+0x112>
    6f2a:	d7 01       	movw	r26, r14
    6f2c:	8c 93       	st	X, r24
    6f2e:	f7 01       	movw	r30, r14
    6f30:	31 96       	adiw	r30, 0x01	; 1
    6f32:	7f 01       	movw	r14, r30
    6f34:	9a 94       	dec	r9
    6f36:	81 2c       	mov	r8, r1
    6f38:	99 20       	and	r9, r9
    6f3a:	e9 f0       	breq	.+58     	; 0x6f76 <conv_brk+0x154>
    6f3c:	c5 01       	movw	r24, r10
    6f3e:	cc d2       	rcall	.+1432   	; 0x74d8 <fgetc>
    6f40:	97 fd       	sbrc	r25, 7
    6f42:	17 c0       	rjmp	.+46     	; 0x6f72 <conv_brk+0x150>
    6f44:	fc 01       	movw	r30, r24
    6f46:	ff 27       	eor	r31, r31
    6f48:	23 e0       	ldi	r18, 0x03	; 3
    6f4a:	f5 95       	asr	r31
    6f4c:	e7 95       	ror	r30
    6f4e:	2a 95       	dec	r18
    6f50:	e1 f7       	brne	.-8      	; 0x6f4a <conv_brk+0x128>
    6f52:	ec 0d       	add	r30, r12
    6f54:	fd 1d       	adc	r31, r13
    6f56:	20 81       	ld	r18, Z
    6f58:	30 e0       	ldi	r19, 0x00	; 0
    6f5a:	ac 01       	movw	r20, r24
    6f5c:	47 70       	andi	r20, 0x07	; 7
    6f5e:	55 27       	eor	r21, r21
    6f60:	02 c0       	rjmp	.+4      	; 0x6f66 <conv_brk+0x144>
    6f62:	35 95       	asr	r19
    6f64:	27 95       	ror	r18
    6f66:	4a 95       	dec	r20
    6f68:	e2 f7       	brpl	.-8      	; 0x6f62 <conv_brk+0x140>
    6f6a:	20 fd       	sbrc	r18, 0
    6f6c:	db cf       	rjmp	.-74     	; 0x6f24 <conv_brk+0x102>
    6f6e:	b5 01       	movw	r22, r10
    6f70:	2d d3       	rcall	.+1626   	; 0x75cc <ungetc>
    6f72:	81 10       	cpse	r8, r1
    6f74:	89 cf       	rjmp	.-238    	; 0x6e88 <conv_brk+0x66>
    6f76:	e1 14       	cp	r14, r1
    6f78:	f1 04       	cpc	r15, r1
    6f7a:	11 f0       	breq	.+4      	; 0x6f80 <conv_brk+0x15e>
    6f7c:	d7 01       	movw	r26, r14
    6f7e:	1c 92       	st	X, r1
    6f80:	c8 01       	movw	r24, r16
    6f82:	15 c0       	rjmp	.+42     	; 0x6fae <conv_brk+0x18c>
    6f84:	42 2f       	mov	r20, r18
    6f86:	46 95       	lsr	r20
    6f88:	46 95       	lsr	r20
    6f8a:	46 95       	lsr	r20
    6f8c:	d6 01       	movw	r26, r12
    6f8e:	a4 0f       	add	r26, r20
    6f90:	b1 1d       	adc	r27, r1
    6f92:	42 2f       	mov	r20, r18
    6f94:	47 70       	andi	r20, 0x07	; 7
    6f96:	8b 01       	movw	r16, r22
    6f98:	02 c0       	rjmp	.+4      	; 0x6f9e <conv_brk+0x17c>
    6f9a:	00 0f       	add	r16, r16
    6f9c:	11 1f       	adc	r17, r17
    6f9e:	4a 95       	dec	r20
    6fa0:	e2 f7       	brpl	.-8      	; 0x6f9a <conv_brk+0x178>
    6fa2:	a8 01       	movw	r20, r16
    6fa4:	5c 91       	ld	r21, X
    6fa6:	45 2b       	or	r20, r21
    6fa8:	4c 93       	st	X, r20
    6faa:	62 2e       	mov	r6, r18
    6fac:	a4 cf       	rjmp	.-184    	; 0x6ef6 <conv_brk+0xd4>
    6fae:	a0 96       	adiw	r28, 0x20	; 32
    6fb0:	cd bf       	out	0x3d, r28	; 61
    6fb2:	de bf       	out	0x3e, r29	; 62
    6fb4:	df 91       	pop	r29
    6fb6:	cf 91       	pop	r28
    6fb8:	1f 91       	pop	r17
    6fba:	0f 91       	pop	r16
    6fbc:	ff 90       	pop	r15
    6fbe:	ef 90       	pop	r14
    6fc0:	df 90       	pop	r13
    6fc2:	cf 90       	pop	r12
    6fc4:	bf 90       	pop	r11
    6fc6:	af 90       	pop	r10
    6fc8:	9f 90       	pop	r9
    6fca:	8f 90       	pop	r8
    6fcc:	7f 90       	pop	r7
    6fce:	6f 90       	pop	r6
    6fd0:	5f 90       	pop	r5
    6fd2:	08 95       	ret

00006fd4 <vfscanf>:
    6fd4:	5f 92       	push	r5
    6fd6:	6f 92       	push	r6
    6fd8:	7f 92       	push	r7
    6fda:	8f 92       	push	r8
    6fdc:	9f 92       	push	r9
    6fde:	af 92       	push	r10
    6fe0:	bf 92       	push	r11
    6fe2:	cf 92       	push	r12
    6fe4:	df 92       	push	r13
    6fe6:	ef 92       	push	r14
    6fe8:	ff 92       	push	r15
    6fea:	0f 93       	push	r16
    6fec:	1f 93       	push	r17
    6fee:	cf 93       	push	r28
    6ff0:	df 93       	push	r29
    6ff2:	6c 01       	movw	r12, r24
    6ff4:	eb 01       	movw	r28, r22
    6ff6:	5a 01       	movw	r10, r20
    6ff8:	fc 01       	movw	r30, r24
    6ffa:	16 82       	std	Z+6, r1	; 0x06
    6ffc:	17 82       	std	Z+7, r1	; 0x07
    6ffe:	51 2c       	mov	r5, r1
    7000:	f6 01       	movw	r30, r12
    7002:	e3 80       	ldd	r14, Z+3	; 0x03
    7004:	fe 01       	movw	r30, r28
    7006:	e3 fc       	sbrc	r14, 3
    7008:	85 91       	lpm	r24, Z+
    700a:	e3 fe       	sbrs	r14, 3
    700c:	81 91       	ld	r24, Z+
    700e:	18 2f       	mov	r17, r24
    7010:	ef 01       	movw	r28, r30
    7012:	88 23       	and	r24, r24
    7014:	09 f4       	brne	.+2      	; 0x7018 <vfscanf+0x44>
    7016:	e0 c0       	rjmp	.+448    	; 0x71d8 <vfscanf+0x204>
    7018:	90 e0       	ldi	r25, 0x00	; 0
    701a:	2e d2       	rcall	.+1116   	; 0x7478 <isspace>
    701c:	89 2b       	or	r24, r25
    701e:	19 f0       	breq	.+6      	; 0x7026 <vfscanf+0x52>
    7020:	c6 01       	movw	r24, r12
    7022:	5f de       	rcall	.-834    	; 0x6ce2 <skip_spaces>
    7024:	ed cf       	rjmp	.-38     	; 0x7000 <vfscanf+0x2c>
    7026:	15 32       	cpi	r17, 0x25	; 37
    7028:	41 f4       	brne	.+16     	; 0x703a <vfscanf+0x66>
    702a:	fe 01       	movw	r30, r28
    702c:	e3 fc       	sbrc	r14, 3
    702e:	15 91       	lpm	r17, Z+
    7030:	e3 fe       	sbrs	r14, 3
    7032:	11 91       	ld	r17, Z+
    7034:	ef 01       	movw	r28, r30
    7036:	15 32       	cpi	r17, 0x25	; 37
    7038:	71 f4       	brne	.+28     	; 0x7056 <vfscanf+0x82>
    703a:	c6 01       	movw	r24, r12
    703c:	4d d2       	rcall	.+1178   	; 0x74d8 <fgetc>
    703e:	97 fd       	sbrc	r25, 7
    7040:	c9 c0       	rjmp	.+402    	; 0x71d4 <vfscanf+0x200>
    7042:	41 2f       	mov	r20, r17
    7044:	50 e0       	ldi	r21, 0x00	; 0
    7046:	9c 01       	movw	r18, r24
    7048:	33 27       	eor	r19, r19
    704a:	24 17       	cp	r18, r20
    704c:	35 07       	cpc	r19, r21
    704e:	c1 f2       	breq	.-80     	; 0x7000 <vfscanf+0x2c>
    7050:	b6 01       	movw	r22, r12
    7052:	bc d2       	rcall	.+1400   	; 0x75cc <ungetc>
    7054:	c1 c0       	rjmp	.+386    	; 0x71d8 <vfscanf+0x204>
    7056:	1a 32       	cpi	r17, 0x2A	; 42
    7058:	39 f4       	brne	.+14     	; 0x7068 <vfscanf+0x94>
    705a:	e3 fc       	sbrc	r14, 3
    705c:	15 91       	lpm	r17, Z+
    705e:	e3 fe       	sbrs	r14, 3
    7060:	11 91       	ld	r17, Z+
    7062:	ef 01       	movw	r28, r30
    7064:	01 e0       	ldi	r16, 0x01	; 1
    7066:	01 c0       	rjmp	.+2      	; 0x706a <vfscanf+0x96>
    7068:	00 e0       	ldi	r16, 0x00	; 0
    706a:	f1 2c       	mov	r15, r1
    706c:	20 ed       	ldi	r18, 0xD0	; 208
    706e:	21 0f       	add	r18, r17
    7070:	2a 30       	cpi	r18, 0x0A	; 10
    7072:	78 f4       	brcc	.+30     	; 0x7092 <vfscanf+0xbe>
    7074:	02 60       	ori	r16, 0x02	; 2
    7076:	6f 2d       	mov	r22, r15
    7078:	70 e0       	ldi	r23, 0x00	; 0
    707a:	80 e0       	ldi	r24, 0x00	; 0
    707c:	90 e0       	ldi	r25, 0x00	; 0
    707e:	40 e2       	ldi	r20, 0x20	; 32
    7080:	09 de       	rcall	.-1006   	; 0x6c94 <mulacc>
    7082:	f6 2e       	mov	r15, r22
    7084:	fe 01       	movw	r30, r28
    7086:	e3 fc       	sbrc	r14, 3
    7088:	15 91       	lpm	r17, Z+
    708a:	e3 fe       	sbrs	r14, 3
    708c:	11 91       	ld	r17, Z+
    708e:	ef 01       	movw	r28, r30
    7090:	ed cf       	rjmp	.-38     	; 0x706c <vfscanf+0x98>
    7092:	01 ff       	sbrs	r16, 1
    7094:	03 c0       	rjmp	.+6      	; 0x709c <vfscanf+0xc8>
    7096:	f1 10       	cpse	r15, r1
    7098:	03 c0       	rjmp	.+6      	; 0x70a0 <vfscanf+0xcc>
    709a:	9e c0       	rjmp	.+316    	; 0x71d8 <vfscanf+0x204>
    709c:	ff 24       	eor	r15, r15
    709e:	fa 94       	dec	r15
    70a0:	18 36       	cpi	r17, 0x68	; 104
    70a2:	19 f0       	breq	.+6      	; 0x70aa <vfscanf+0xd6>
    70a4:	1c 36       	cpi	r17, 0x6C	; 108
    70a6:	51 f0       	breq	.+20     	; 0x70bc <vfscanf+0xe8>
    70a8:	10 c0       	rjmp	.+32     	; 0x70ca <vfscanf+0xf6>
    70aa:	fe 01       	movw	r30, r28
    70ac:	e3 fc       	sbrc	r14, 3
    70ae:	15 91       	lpm	r17, Z+
    70b0:	e3 fe       	sbrs	r14, 3
    70b2:	11 91       	ld	r17, Z+
    70b4:	ef 01       	movw	r28, r30
    70b6:	18 36       	cpi	r17, 0x68	; 104
    70b8:	41 f4       	brne	.+16     	; 0x70ca <vfscanf+0xf6>
    70ba:	08 60       	ori	r16, 0x08	; 8
    70bc:	04 60       	ori	r16, 0x04	; 4
    70be:	fe 01       	movw	r30, r28
    70c0:	e3 fc       	sbrc	r14, 3
    70c2:	15 91       	lpm	r17, Z+
    70c4:	e3 fe       	sbrs	r14, 3
    70c6:	11 91       	ld	r17, Z+
    70c8:	ef 01       	movw	r28, r30
    70ca:	11 23       	and	r17, r17
    70cc:	09 f4       	brne	.+2      	; 0x70d0 <vfscanf+0xfc>
    70ce:	84 c0       	rjmp	.+264    	; 0x71d8 <vfscanf+0x204>
    70d0:	61 2f       	mov	r22, r17
    70d2:	70 e0       	ldi	r23, 0x00	; 0
    70d4:	84 ea       	ldi	r24, 0xA4	; 164
    70d6:	92 e0       	ldi	r25, 0x02	; 2
    70d8:	d7 d1       	rcall	.+942    	; 0x7488 <strchr_P>
    70da:	89 2b       	or	r24, r25
    70dc:	09 f4       	brne	.+2      	; 0x70e0 <vfscanf+0x10c>
    70de:	7c c0       	rjmp	.+248    	; 0x71d8 <vfscanf+0x204>
    70e0:	00 fd       	sbrc	r16, 0
    70e2:	07 c0       	rjmp	.+14     	; 0x70f2 <vfscanf+0x11e>
    70e4:	f5 01       	movw	r30, r10
    70e6:	80 80       	ld	r8, Z
    70e8:	91 80       	ldd	r9, Z+1	; 0x01
    70ea:	c5 01       	movw	r24, r10
    70ec:	02 96       	adiw	r24, 0x02	; 2
    70ee:	5c 01       	movw	r10, r24
    70f0:	02 c0       	rjmp	.+4      	; 0x70f6 <vfscanf+0x122>
    70f2:	81 2c       	mov	r8, r1
    70f4:	91 2c       	mov	r9, r1
    70f6:	1e 36       	cpi	r17, 0x6E	; 110
    70f8:	49 f4       	brne	.+18     	; 0x710c <vfscanf+0x138>
    70fa:	f6 01       	movw	r30, r12
    70fc:	46 81       	ldd	r20, Z+6	; 0x06
    70fe:	57 81       	ldd	r21, Z+7	; 0x07
    7100:	60 e0       	ldi	r22, 0x00	; 0
    7102:	70 e0       	ldi	r23, 0x00	; 0
    7104:	20 2f       	mov	r18, r16
    7106:	c4 01       	movw	r24, r8
    7108:	b9 dd       	rcall	.-1166   	; 0x6c7c <putval>
    710a:	7a cf       	rjmp	.-268    	; 0x7000 <vfscanf+0x2c>
    710c:	13 36       	cpi	r17, 0x63	; 99
    710e:	a1 f4       	brne	.+40     	; 0x7138 <vfscanf+0x164>
    7110:	01 fd       	sbrc	r16, 1
    7112:	02 c0       	rjmp	.+4      	; 0x7118 <vfscanf+0x144>
    7114:	ff 24       	eor	r15, r15
    7116:	f3 94       	inc	r15
    7118:	c6 01       	movw	r24, r12
    711a:	de d1       	rcall	.+956    	; 0x74d8 <fgetc>
    711c:	97 fd       	sbrc	r25, 7
    711e:	5a c0       	rjmp	.+180    	; 0x71d4 <vfscanf+0x200>
    7120:	81 14       	cp	r8, r1
    7122:	91 04       	cpc	r9, r1
    7124:	29 f0       	breq	.+10     	; 0x7130 <vfscanf+0x15c>
    7126:	f4 01       	movw	r30, r8
    7128:	80 83       	st	Z, r24
    712a:	c4 01       	movw	r24, r8
    712c:	01 96       	adiw	r24, 0x01	; 1
    712e:	4c 01       	movw	r8, r24
    7130:	fa 94       	dec	r15
    7132:	f1 10       	cpse	r15, r1
    7134:	f1 cf       	rjmp	.-30     	; 0x7118 <vfscanf+0x144>
    7136:	4a c0       	rjmp	.+148    	; 0x71cc <vfscanf+0x1f8>
    7138:	1b 35       	cpi	r17, 0x5B	; 91
    713a:	51 f4       	brne	.+20     	; 0x7150 <vfscanf+0x17c>
    713c:	9e 01       	movw	r18, r28
    713e:	a4 01       	movw	r20, r8
    7140:	6f 2d       	mov	r22, r15
    7142:	c6 01       	movw	r24, r12
    7144:	6e de       	rcall	.-804    	; 0x6e22 <conv_brk>
    7146:	ec 01       	movw	r28, r24
    7148:	89 2b       	or	r24, r25
    714a:	09 f0       	breq	.+2      	; 0x714e <vfscanf+0x17a>
    714c:	3f c0       	rjmp	.+126    	; 0x71cc <vfscanf+0x1f8>
    714e:	39 c0       	rjmp	.+114    	; 0x71c2 <vfscanf+0x1ee>
    7150:	c6 01       	movw	r24, r12
    7152:	c7 dd       	rcall	.-1138   	; 0x6ce2 <skip_spaces>
    7154:	97 fd       	sbrc	r25, 7
    7156:	3e c0       	rjmp	.+124    	; 0x71d4 <vfscanf+0x200>
    7158:	1f 36       	cpi	r17, 0x6F	; 111
    715a:	49 f1       	breq	.+82     	; 0x71ae <vfscanf+0x1da>
    715c:	28 f4       	brcc	.+10     	; 0x7168 <vfscanf+0x194>
    715e:	14 36       	cpi	r17, 0x64	; 100
    7160:	21 f1       	breq	.+72     	; 0x71aa <vfscanf+0x1d6>
    7162:	19 36       	cpi	r17, 0x69	; 105
    7164:	39 f1       	breq	.+78     	; 0x71b4 <vfscanf+0x1e0>
    7166:	25 c0       	rjmp	.+74     	; 0x71b2 <vfscanf+0x1de>
    7168:	13 37       	cpi	r17, 0x73	; 115
    716a:	71 f0       	breq	.+28     	; 0x7188 <vfscanf+0x1b4>
    716c:	15 37       	cpi	r17, 0x75	; 117
    716e:	e9 f0       	breq	.+58     	; 0x71aa <vfscanf+0x1d6>
    7170:	20 c0       	rjmp	.+64     	; 0x71b2 <vfscanf+0x1de>
    7172:	81 14       	cp	r8, r1
    7174:	91 04       	cpc	r9, r1
    7176:	29 f0       	breq	.+10     	; 0x7182 <vfscanf+0x1ae>
    7178:	f4 01       	movw	r30, r8
    717a:	60 82       	st	Z, r6
    717c:	c4 01       	movw	r24, r8
    717e:	01 96       	adiw	r24, 0x01	; 1
    7180:	4c 01       	movw	r8, r24
    7182:	fa 94       	dec	r15
    7184:	ff 20       	and	r15, r15
    7186:	59 f0       	breq	.+22     	; 0x719e <vfscanf+0x1ca>
    7188:	c6 01       	movw	r24, r12
    718a:	a6 d1       	rcall	.+844    	; 0x74d8 <fgetc>
    718c:	3c 01       	movw	r6, r24
    718e:	97 fd       	sbrc	r25, 7
    7190:	06 c0       	rjmp	.+12     	; 0x719e <vfscanf+0x1ca>
    7192:	72 d1       	rcall	.+740    	; 0x7478 <isspace>
    7194:	89 2b       	or	r24, r25
    7196:	69 f3       	breq	.-38     	; 0x7172 <vfscanf+0x19e>
    7198:	b6 01       	movw	r22, r12
    719a:	c3 01       	movw	r24, r6
    719c:	17 d2       	rcall	.+1070   	; 0x75cc <ungetc>
    719e:	81 14       	cp	r8, r1
    71a0:	91 04       	cpc	r9, r1
    71a2:	a1 f0       	breq	.+40     	; 0x71cc <vfscanf+0x1f8>
    71a4:	f4 01       	movw	r30, r8
    71a6:	10 82       	st	Z, r1
    71a8:	11 c0       	rjmp	.+34     	; 0x71cc <vfscanf+0x1f8>
    71aa:	00 62       	ori	r16, 0x20	; 32
    71ac:	03 c0       	rjmp	.+6      	; 0x71b4 <vfscanf+0x1e0>
    71ae:	00 61       	ori	r16, 0x10	; 16
    71b0:	01 c0       	rjmp	.+2      	; 0x71b4 <vfscanf+0x1e0>
    71b2:	00 64       	ori	r16, 0x40	; 64
    71b4:	20 2f       	mov	r18, r16
    71b6:	a4 01       	movw	r20, r8
    71b8:	6f 2d       	mov	r22, r15
    71ba:	c6 01       	movw	r24, r12
    71bc:	a8 dd       	rcall	.-1200   	; 0x6d0e <conv_int>
    71be:	81 11       	cpse	r24, r1
    71c0:	05 c0       	rjmp	.+10     	; 0x71cc <vfscanf+0x1f8>
    71c2:	f6 01       	movw	r30, r12
    71c4:	83 81       	ldd	r24, Z+3	; 0x03
    71c6:	80 73       	andi	r24, 0x30	; 48
    71c8:	29 f4       	brne	.+10     	; 0x71d4 <vfscanf+0x200>
    71ca:	06 c0       	rjmp	.+12     	; 0x71d8 <vfscanf+0x204>
    71cc:	00 fd       	sbrc	r16, 0
    71ce:	18 cf       	rjmp	.-464    	; 0x7000 <vfscanf+0x2c>
    71d0:	53 94       	inc	r5
    71d2:	16 cf       	rjmp	.-468    	; 0x7000 <vfscanf+0x2c>
    71d4:	55 20       	and	r5, r5
    71d6:	19 f0       	breq	.+6      	; 0x71de <vfscanf+0x20a>
    71d8:	85 2d       	mov	r24, r5
    71da:	90 e0       	ldi	r25, 0x00	; 0
    71dc:	02 c0       	rjmp	.+4      	; 0x71e2 <vfscanf+0x20e>
    71de:	8f ef       	ldi	r24, 0xFF	; 255
    71e0:	9f ef       	ldi	r25, 0xFF	; 255
    71e2:	df 91       	pop	r29
    71e4:	cf 91       	pop	r28
    71e6:	1f 91       	pop	r17
    71e8:	0f 91       	pop	r16
    71ea:	ff 90       	pop	r15
    71ec:	ef 90       	pop	r14
    71ee:	df 90       	pop	r13
    71f0:	cf 90       	pop	r12
    71f2:	bf 90       	pop	r11
    71f4:	af 90       	pop	r10
    71f6:	9f 90       	pop	r9
    71f8:	8f 90       	pop	r8
    71fa:	7f 90       	pop	r7
    71fc:	6f 90       	pop	r6
    71fe:	5f 90       	pop	r5
    7200:	08 95       	ret

00007202 <calloc>:
    7202:	0f 93       	push	r16
    7204:	1f 93       	push	r17
    7206:	cf 93       	push	r28
    7208:	df 93       	push	r29
    720a:	86 9f       	mul	r24, r22
    720c:	80 01       	movw	r16, r0
    720e:	87 9f       	mul	r24, r23
    7210:	10 0d       	add	r17, r0
    7212:	96 9f       	mul	r25, r22
    7214:	10 0d       	add	r17, r0
    7216:	11 24       	eor	r1, r1
    7218:	c8 01       	movw	r24, r16
    721a:	0d d0       	rcall	.+26     	; 0x7236 <malloc>
    721c:	ec 01       	movw	r28, r24
    721e:	00 97       	sbiw	r24, 0x00	; 0
    7220:	21 f0       	breq	.+8      	; 0x722a <calloc+0x28>
    7222:	a8 01       	movw	r20, r16
    7224:	60 e0       	ldi	r22, 0x00	; 0
    7226:	70 e0       	ldi	r23, 0x00	; 0
    7228:	45 d1       	rcall	.+650    	; 0x74b4 <memset>
    722a:	ce 01       	movw	r24, r28
    722c:	df 91       	pop	r29
    722e:	cf 91       	pop	r28
    7230:	1f 91       	pop	r17
    7232:	0f 91       	pop	r16
    7234:	08 95       	ret

00007236 <malloc>:
    7236:	0f 93       	push	r16
    7238:	1f 93       	push	r17
    723a:	cf 93       	push	r28
    723c:	df 93       	push	r29
    723e:	82 30       	cpi	r24, 0x02	; 2
    7240:	91 05       	cpc	r25, r1
    7242:	10 f4       	brcc	.+4      	; 0x7248 <malloc+0x12>
    7244:	82 e0       	ldi	r24, 0x02	; 2
    7246:	90 e0       	ldi	r25, 0x00	; 0
    7248:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <__flp>
    724c:	f0 91 06 23 	lds	r31, 0x2306	; 0x802306 <__flp+0x1>
    7250:	20 e0       	ldi	r18, 0x00	; 0
    7252:	30 e0       	ldi	r19, 0x00	; 0
    7254:	a0 e0       	ldi	r26, 0x00	; 0
    7256:	b0 e0       	ldi	r27, 0x00	; 0
    7258:	30 97       	sbiw	r30, 0x00	; 0
    725a:	19 f1       	breq	.+70     	; 0x72a2 <malloc+0x6c>
    725c:	40 81       	ld	r20, Z
    725e:	51 81       	ldd	r21, Z+1	; 0x01
    7260:	02 81       	ldd	r16, Z+2	; 0x02
    7262:	13 81       	ldd	r17, Z+3	; 0x03
    7264:	48 17       	cp	r20, r24
    7266:	59 07       	cpc	r21, r25
    7268:	c8 f0       	brcs	.+50     	; 0x729c <malloc+0x66>
    726a:	84 17       	cp	r24, r20
    726c:	95 07       	cpc	r25, r21
    726e:	69 f4       	brne	.+26     	; 0x728a <malloc+0x54>
    7270:	10 97       	sbiw	r26, 0x00	; 0
    7272:	31 f0       	breq	.+12     	; 0x7280 <malloc+0x4a>
    7274:	12 96       	adiw	r26, 0x02	; 2
    7276:	0c 93       	st	X, r16
    7278:	12 97       	sbiw	r26, 0x02	; 2
    727a:	13 96       	adiw	r26, 0x03	; 3
    727c:	1c 93       	st	X, r17
    727e:	27 c0       	rjmp	.+78     	; 0x72ce <malloc+0x98>
    7280:	00 93 05 23 	sts	0x2305, r16	; 0x802305 <__flp>
    7284:	10 93 06 23 	sts	0x2306, r17	; 0x802306 <__flp+0x1>
    7288:	22 c0       	rjmp	.+68     	; 0x72ce <malloc+0x98>
    728a:	21 15       	cp	r18, r1
    728c:	31 05       	cpc	r19, r1
    728e:	19 f0       	breq	.+6      	; 0x7296 <malloc+0x60>
    7290:	42 17       	cp	r20, r18
    7292:	53 07       	cpc	r21, r19
    7294:	18 f4       	brcc	.+6      	; 0x729c <malloc+0x66>
    7296:	9a 01       	movw	r18, r20
    7298:	bd 01       	movw	r22, r26
    729a:	ef 01       	movw	r28, r30
    729c:	df 01       	movw	r26, r30
    729e:	f8 01       	movw	r30, r16
    72a0:	db cf       	rjmp	.-74     	; 0x7258 <malloc+0x22>
    72a2:	21 15       	cp	r18, r1
    72a4:	31 05       	cpc	r19, r1
    72a6:	f9 f0       	breq	.+62     	; 0x72e6 <malloc+0xb0>
    72a8:	28 1b       	sub	r18, r24
    72aa:	39 0b       	sbc	r19, r25
    72ac:	24 30       	cpi	r18, 0x04	; 4
    72ae:	31 05       	cpc	r19, r1
    72b0:	80 f4       	brcc	.+32     	; 0x72d2 <malloc+0x9c>
    72b2:	8a 81       	ldd	r24, Y+2	; 0x02
    72b4:	9b 81       	ldd	r25, Y+3	; 0x03
    72b6:	61 15       	cp	r22, r1
    72b8:	71 05       	cpc	r23, r1
    72ba:	21 f0       	breq	.+8      	; 0x72c4 <malloc+0x8e>
    72bc:	fb 01       	movw	r30, r22
    72be:	82 83       	std	Z+2, r24	; 0x02
    72c0:	93 83       	std	Z+3, r25	; 0x03
    72c2:	04 c0       	rjmp	.+8      	; 0x72cc <malloc+0x96>
    72c4:	80 93 05 23 	sts	0x2305, r24	; 0x802305 <__flp>
    72c8:	90 93 06 23 	sts	0x2306, r25	; 0x802306 <__flp+0x1>
    72cc:	fe 01       	movw	r30, r28
    72ce:	32 96       	adiw	r30, 0x02	; 2
    72d0:	44 c0       	rjmp	.+136    	; 0x735a <malloc+0x124>
    72d2:	fe 01       	movw	r30, r28
    72d4:	e2 0f       	add	r30, r18
    72d6:	f3 1f       	adc	r31, r19
    72d8:	81 93       	st	Z+, r24
    72da:	91 93       	st	Z+, r25
    72dc:	22 50       	subi	r18, 0x02	; 2
    72de:	31 09       	sbc	r19, r1
    72e0:	28 83       	st	Y, r18
    72e2:	39 83       	std	Y+1, r19	; 0x01
    72e4:	3a c0       	rjmp	.+116    	; 0x735a <malloc+0x124>
    72e6:	20 91 03 23 	lds	r18, 0x2303	; 0x802303 <__brkval>
    72ea:	30 91 04 23 	lds	r19, 0x2304	; 0x802304 <__brkval+0x1>
    72ee:	23 2b       	or	r18, r19
    72f0:	41 f4       	brne	.+16     	; 0x7302 <malloc+0xcc>
    72f2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    72f6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    72fa:	20 93 03 23 	sts	0x2303, r18	; 0x802303 <__brkval>
    72fe:	30 93 04 23 	sts	0x2304, r19	; 0x802304 <__brkval+0x1>
    7302:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    7306:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    730a:	21 15       	cp	r18, r1
    730c:	31 05       	cpc	r19, r1
    730e:	41 f4       	brne	.+16     	; 0x7320 <malloc+0xea>
    7310:	2d b7       	in	r18, 0x3d	; 61
    7312:	3e b7       	in	r19, 0x3e	; 62
    7314:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    7318:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    731c:	24 1b       	sub	r18, r20
    731e:	35 0b       	sbc	r19, r21
    7320:	e0 91 03 23 	lds	r30, 0x2303	; 0x802303 <__brkval>
    7324:	f0 91 04 23 	lds	r31, 0x2304	; 0x802304 <__brkval+0x1>
    7328:	e2 17       	cp	r30, r18
    732a:	f3 07       	cpc	r31, r19
    732c:	a0 f4       	brcc	.+40     	; 0x7356 <malloc+0x120>
    732e:	2e 1b       	sub	r18, r30
    7330:	3f 0b       	sbc	r19, r31
    7332:	28 17       	cp	r18, r24
    7334:	39 07       	cpc	r19, r25
    7336:	78 f0       	brcs	.+30     	; 0x7356 <malloc+0x120>
    7338:	ac 01       	movw	r20, r24
    733a:	4e 5f       	subi	r20, 0xFE	; 254
    733c:	5f 4f       	sbci	r21, 0xFF	; 255
    733e:	24 17       	cp	r18, r20
    7340:	35 07       	cpc	r19, r21
    7342:	48 f0       	brcs	.+18     	; 0x7356 <malloc+0x120>
    7344:	4e 0f       	add	r20, r30
    7346:	5f 1f       	adc	r21, r31
    7348:	40 93 03 23 	sts	0x2303, r20	; 0x802303 <__brkval>
    734c:	50 93 04 23 	sts	0x2304, r21	; 0x802304 <__brkval+0x1>
    7350:	81 93       	st	Z+, r24
    7352:	91 93       	st	Z+, r25
    7354:	02 c0       	rjmp	.+4      	; 0x735a <malloc+0x124>
    7356:	e0 e0       	ldi	r30, 0x00	; 0
    7358:	f0 e0       	ldi	r31, 0x00	; 0
    735a:	cf 01       	movw	r24, r30
    735c:	df 91       	pop	r29
    735e:	cf 91       	pop	r28
    7360:	1f 91       	pop	r17
    7362:	0f 91       	pop	r16
    7364:	08 95       	ret

00007366 <free>:
    7366:	cf 93       	push	r28
    7368:	df 93       	push	r29
    736a:	00 97       	sbiw	r24, 0x00	; 0
    736c:	09 f4       	brne	.+2      	; 0x7370 <free+0xa>
    736e:	81 c0       	rjmp	.+258    	; 0x7472 <free+0x10c>
    7370:	fc 01       	movw	r30, r24
    7372:	32 97       	sbiw	r30, 0x02	; 2
    7374:	12 82       	std	Z+2, r1	; 0x02
    7376:	13 82       	std	Z+3, r1	; 0x03
    7378:	a0 91 05 23 	lds	r26, 0x2305	; 0x802305 <__flp>
    737c:	b0 91 06 23 	lds	r27, 0x2306	; 0x802306 <__flp+0x1>
    7380:	10 97       	sbiw	r26, 0x00	; 0
    7382:	81 f4       	brne	.+32     	; 0x73a4 <free+0x3e>
    7384:	20 81       	ld	r18, Z
    7386:	31 81       	ldd	r19, Z+1	; 0x01
    7388:	82 0f       	add	r24, r18
    738a:	93 1f       	adc	r25, r19
    738c:	20 91 03 23 	lds	r18, 0x2303	; 0x802303 <__brkval>
    7390:	30 91 04 23 	lds	r19, 0x2304	; 0x802304 <__brkval+0x1>
    7394:	28 17       	cp	r18, r24
    7396:	39 07       	cpc	r19, r25
    7398:	51 f5       	brne	.+84     	; 0x73ee <free+0x88>
    739a:	e0 93 03 23 	sts	0x2303, r30	; 0x802303 <__brkval>
    739e:	f0 93 04 23 	sts	0x2304, r31	; 0x802304 <__brkval+0x1>
    73a2:	67 c0       	rjmp	.+206    	; 0x7472 <free+0x10c>
    73a4:	ed 01       	movw	r28, r26
    73a6:	20 e0       	ldi	r18, 0x00	; 0
    73a8:	30 e0       	ldi	r19, 0x00	; 0
    73aa:	ce 17       	cp	r28, r30
    73ac:	df 07       	cpc	r29, r31
    73ae:	40 f4       	brcc	.+16     	; 0x73c0 <free+0x5a>
    73b0:	4a 81       	ldd	r20, Y+2	; 0x02
    73b2:	5b 81       	ldd	r21, Y+3	; 0x03
    73b4:	9e 01       	movw	r18, r28
    73b6:	41 15       	cp	r20, r1
    73b8:	51 05       	cpc	r21, r1
    73ba:	f1 f0       	breq	.+60     	; 0x73f8 <free+0x92>
    73bc:	ea 01       	movw	r28, r20
    73be:	f5 cf       	rjmp	.-22     	; 0x73aa <free+0x44>
    73c0:	c2 83       	std	Z+2, r28	; 0x02
    73c2:	d3 83       	std	Z+3, r29	; 0x03
    73c4:	40 81       	ld	r20, Z
    73c6:	51 81       	ldd	r21, Z+1	; 0x01
    73c8:	84 0f       	add	r24, r20
    73ca:	95 1f       	adc	r25, r21
    73cc:	c8 17       	cp	r28, r24
    73ce:	d9 07       	cpc	r29, r25
    73d0:	59 f4       	brne	.+22     	; 0x73e8 <free+0x82>
    73d2:	88 81       	ld	r24, Y
    73d4:	99 81       	ldd	r25, Y+1	; 0x01
    73d6:	84 0f       	add	r24, r20
    73d8:	95 1f       	adc	r25, r21
    73da:	02 96       	adiw	r24, 0x02	; 2
    73dc:	80 83       	st	Z, r24
    73de:	91 83       	std	Z+1, r25	; 0x01
    73e0:	8a 81       	ldd	r24, Y+2	; 0x02
    73e2:	9b 81       	ldd	r25, Y+3	; 0x03
    73e4:	82 83       	std	Z+2, r24	; 0x02
    73e6:	93 83       	std	Z+3, r25	; 0x03
    73e8:	21 15       	cp	r18, r1
    73ea:	31 05       	cpc	r19, r1
    73ec:	29 f4       	brne	.+10     	; 0x73f8 <free+0x92>
    73ee:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <__flp>
    73f2:	f0 93 06 23 	sts	0x2306, r31	; 0x802306 <__flp+0x1>
    73f6:	3d c0       	rjmp	.+122    	; 0x7472 <free+0x10c>
    73f8:	e9 01       	movw	r28, r18
    73fa:	ea 83       	std	Y+2, r30	; 0x02
    73fc:	fb 83       	std	Y+3, r31	; 0x03
    73fe:	49 91       	ld	r20, Y+
    7400:	59 91       	ld	r21, Y+
    7402:	c4 0f       	add	r28, r20
    7404:	d5 1f       	adc	r29, r21
    7406:	ec 17       	cp	r30, r28
    7408:	fd 07       	cpc	r31, r29
    740a:	61 f4       	brne	.+24     	; 0x7424 <free+0xbe>
    740c:	80 81       	ld	r24, Z
    740e:	91 81       	ldd	r25, Z+1	; 0x01
    7410:	84 0f       	add	r24, r20
    7412:	95 1f       	adc	r25, r21
    7414:	02 96       	adiw	r24, 0x02	; 2
    7416:	e9 01       	movw	r28, r18
    7418:	88 83       	st	Y, r24
    741a:	99 83       	std	Y+1, r25	; 0x01
    741c:	82 81       	ldd	r24, Z+2	; 0x02
    741e:	93 81       	ldd	r25, Z+3	; 0x03
    7420:	8a 83       	std	Y+2, r24	; 0x02
    7422:	9b 83       	std	Y+3, r25	; 0x03
    7424:	e0 e0       	ldi	r30, 0x00	; 0
    7426:	f0 e0       	ldi	r31, 0x00	; 0
    7428:	12 96       	adiw	r26, 0x02	; 2
    742a:	8d 91       	ld	r24, X+
    742c:	9c 91       	ld	r25, X
    742e:	13 97       	sbiw	r26, 0x03	; 3
    7430:	00 97       	sbiw	r24, 0x00	; 0
    7432:	19 f0       	breq	.+6      	; 0x743a <free+0xd4>
    7434:	fd 01       	movw	r30, r26
    7436:	dc 01       	movw	r26, r24
    7438:	f7 cf       	rjmp	.-18     	; 0x7428 <free+0xc2>
    743a:	8d 91       	ld	r24, X+
    743c:	9c 91       	ld	r25, X
    743e:	11 97       	sbiw	r26, 0x01	; 1
    7440:	9d 01       	movw	r18, r26
    7442:	2e 5f       	subi	r18, 0xFE	; 254
    7444:	3f 4f       	sbci	r19, 0xFF	; 255
    7446:	82 0f       	add	r24, r18
    7448:	93 1f       	adc	r25, r19
    744a:	20 91 03 23 	lds	r18, 0x2303	; 0x802303 <__brkval>
    744e:	30 91 04 23 	lds	r19, 0x2304	; 0x802304 <__brkval+0x1>
    7452:	28 17       	cp	r18, r24
    7454:	39 07       	cpc	r19, r25
    7456:	69 f4       	brne	.+26     	; 0x7472 <free+0x10c>
    7458:	30 97       	sbiw	r30, 0x00	; 0
    745a:	29 f4       	brne	.+10     	; 0x7466 <free+0x100>
    745c:	10 92 05 23 	sts	0x2305, r1	; 0x802305 <__flp>
    7460:	10 92 06 23 	sts	0x2306, r1	; 0x802306 <__flp+0x1>
    7464:	02 c0       	rjmp	.+4      	; 0x746a <free+0x104>
    7466:	12 82       	std	Z+2, r1	; 0x02
    7468:	13 82       	std	Z+3, r1	; 0x03
    746a:	a0 93 03 23 	sts	0x2303, r26	; 0x802303 <__brkval>
    746e:	b0 93 04 23 	sts	0x2304, r27	; 0x802304 <__brkval+0x1>
    7472:	df 91       	pop	r29
    7474:	cf 91       	pop	r28
    7476:	08 95       	ret

00007478 <isspace>:
    7478:	91 11       	cpse	r25, r1
    747a:	1f c1       	rjmp	.+574    	; 0x76ba <__ctype_isfalse>
    747c:	80 32       	cpi	r24, 0x20	; 32
    747e:	19 f0       	breq	.+6      	; 0x7486 <isspace+0xe>
    7480:	89 50       	subi	r24, 0x09	; 9
    7482:	85 50       	subi	r24, 0x05	; 5
    7484:	d0 f7       	brcc	.-12     	; 0x747a <isspace+0x2>
    7486:	08 95       	ret

00007488 <strchr_P>:
    7488:	fc 01       	movw	r30, r24
    748a:	05 90       	lpm	r0, Z+
    748c:	06 16       	cp	r0, r22
    748e:	21 f0       	breq	.+8      	; 0x7498 <strchr_P+0x10>
    7490:	00 20       	and	r0, r0
    7492:	d9 f7       	brne	.-10     	; 0x748a <strchr_P+0x2>
    7494:	c0 01       	movw	r24, r0
    7496:	08 95       	ret
    7498:	31 97       	sbiw	r30, 0x01	; 1
    749a:	cf 01       	movw	r24, r30
    749c:	08 95       	ret

0000749e <strnlen_P>:
    749e:	fc 01       	movw	r30, r24
    74a0:	05 90       	lpm	r0, Z+
    74a2:	61 50       	subi	r22, 0x01	; 1
    74a4:	70 40       	sbci	r23, 0x00	; 0
    74a6:	01 10       	cpse	r0, r1
    74a8:	d8 f7       	brcc	.-10     	; 0x74a0 <strnlen_P+0x2>
    74aa:	80 95       	com	r24
    74ac:	90 95       	com	r25
    74ae:	8e 0f       	add	r24, r30
    74b0:	9f 1f       	adc	r25, r31
    74b2:	08 95       	ret

000074b4 <memset>:
    74b4:	dc 01       	movw	r26, r24
    74b6:	01 c0       	rjmp	.+2      	; 0x74ba <memset+0x6>
    74b8:	6d 93       	st	X+, r22
    74ba:	41 50       	subi	r20, 0x01	; 1
    74bc:	50 40       	sbci	r21, 0x00	; 0
    74be:	e0 f7       	brcc	.-8      	; 0x74b8 <memset+0x4>
    74c0:	08 95       	ret

000074c2 <strnlen>:
    74c2:	fc 01       	movw	r30, r24
    74c4:	61 50       	subi	r22, 0x01	; 1
    74c6:	70 40       	sbci	r23, 0x00	; 0
    74c8:	01 90       	ld	r0, Z+
    74ca:	01 10       	cpse	r0, r1
    74cc:	d8 f7       	brcc	.-10     	; 0x74c4 <strnlen+0x2>
    74ce:	80 95       	com	r24
    74d0:	90 95       	com	r25
    74d2:	8e 0f       	add	r24, r30
    74d4:	9f 1f       	adc	r25, r31
    74d6:	08 95       	ret

000074d8 <fgetc>:
    74d8:	cf 93       	push	r28
    74da:	df 93       	push	r29
    74dc:	ec 01       	movw	r28, r24
    74de:	2b 81       	ldd	r18, Y+3	; 0x03
    74e0:	20 ff       	sbrs	r18, 0
    74e2:	33 c0       	rjmp	.+102    	; 0x754a <fgetc+0x72>
    74e4:	26 ff       	sbrs	r18, 6
    74e6:	0a c0       	rjmp	.+20     	; 0x74fc <fgetc+0x24>
    74e8:	2f 7b       	andi	r18, 0xBF	; 191
    74ea:	2b 83       	std	Y+3, r18	; 0x03
    74ec:	8e 81       	ldd	r24, Y+6	; 0x06
    74ee:	9f 81       	ldd	r25, Y+7	; 0x07
    74f0:	01 96       	adiw	r24, 0x01	; 1
    74f2:	8e 83       	std	Y+6, r24	; 0x06
    74f4:	9f 83       	std	Y+7, r25	; 0x07
    74f6:	8a 81       	ldd	r24, Y+2	; 0x02
    74f8:	90 e0       	ldi	r25, 0x00	; 0
    74fa:	29 c0       	rjmp	.+82     	; 0x754e <fgetc+0x76>
    74fc:	22 ff       	sbrs	r18, 2
    74fe:	0f c0       	rjmp	.+30     	; 0x751e <fgetc+0x46>
    7500:	e8 81       	ld	r30, Y
    7502:	f9 81       	ldd	r31, Y+1	; 0x01
    7504:	80 81       	ld	r24, Z
    7506:	08 2e       	mov	r0, r24
    7508:	00 0c       	add	r0, r0
    750a:	99 0b       	sbc	r25, r25
    750c:	00 97       	sbiw	r24, 0x00	; 0
    750e:	19 f4       	brne	.+6      	; 0x7516 <fgetc+0x3e>
    7510:	20 62       	ori	r18, 0x20	; 32
    7512:	2b 83       	std	Y+3, r18	; 0x03
    7514:	1a c0       	rjmp	.+52     	; 0x754a <fgetc+0x72>
    7516:	31 96       	adiw	r30, 0x01	; 1
    7518:	e8 83       	st	Y, r30
    751a:	f9 83       	std	Y+1, r31	; 0x01
    751c:	0e c0       	rjmp	.+28     	; 0x753a <fgetc+0x62>
    751e:	ea 85       	ldd	r30, Y+10	; 0x0a
    7520:	fb 85       	ldd	r31, Y+11	; 0x0b
    7522:	19 95       	eicall
    7524:	97 ff       	sbrs	r25, 7
    7526:	09 c0       	rjmp	.+18     	; 0x753a <fgetc+0x62>
    7528:	2b 81       	ldd	r18, Y+3	; 0x03
    752a:	01 96       	adiw	r24, 0x01	; 1
    752c:	11 f0       	breq	.+4      	; 0x7532 <fgetc+0x5a>
    752e:	80 e2       	ldi	r24, 0x20	; 32
    7530:	01 c0       	rjmp	.+2      	; 0x7534 <fgetc+0x5c>
    7532:	80 e1       	ldi	r24, 0x10	; 16
    7534:	82 2b       	or	r24, r18
    7536:	8b 83       	std	Y+3, r24	; 0x03
    7538:	08 c0       	rjmp	.+16     	; 0x754a <fgetc+0x72>
    753a:	2e 81       	ldd	r18, Y+6	; 0x06
    753c:	3f 81       	ldd	r19, Y+7	; 0x07
    753e:	2f 5f       	subi	r18, 0xFF	; 255
    7540:	3f 4f       	sbci	r19, 0xFF	; 255
    7542:	2e 83       	std	Y+6, r18	; 0x06
    7544:	3f 83       	std	Y+7, r19	; 0x07
    7546:	99 27       	eor	r25, r25
    7548:	02 c0       	rjmp	.+4      	; 0x754e <fgetc+0x76>
    754a:	8f ef       	ldi	r24, 0xFF	; 255
    754c:	9f ef       	ldi	r25, 0xFF	; 255
    754e:	df 91       	pop	r29
    7550:	cf 91       	pop	r28
    7552:	08 95       	ret

00007554 <fputc>:
    7554:	0f 93       	push	r16
    7556:	1f 93       	push	r17
    7558:	cf 93       	push	r28
    755a:	df 93       	push	r29
    755c:	fb 01       	movw	r30, r22
    755e:	23 81       	ldd	r18, Z+3	; 0x03
    7560:	21 fd       	sbrc	r18, 1
    7562:	03 c0       	rjmp	.+6      	; 0x756a <fputc+0x16>
    7564:	8f ef       	ldi	r24, 0xFF	; 255
    7566:	9f ef       	ldi	r25, 0xFF	; 255
    7568:	2c c0       	rjmp	.+88     	; 0x75c2 <fputc+0x6e>
    756a:	22 ff       	sbrs	r18, 2
    756c:	16 c0       	rjmp	.+44     	; 0x759a <fputc+0x46>
    756e:	46 81       	ldd	r20, Z+6	; 0x06
    7570:	57 81       	ldd	r21, Z+7	; 0x07
    7572:	24 81       	ldd	r18, Z+4	; 0x04
    7574:	35 81       	ldd	r19, Z+5	; 0x05
    7576:	42 17       	cp	r20, r18
    7578:	53 07       	cpc	r21, r19
    757a:	44 f4       	brge	.+16     	; 0x758c <fputc+0x38>
    757c:	a0 81       	ld	r26, Z
    757e:	b1 81       	ldd	r27, Z+1	; 0x01
    7580:	9d 01       	movw	r18, r26
    7582:	2f 5f       	subi	r18, 0xFF	; 255
    7584:	3f 4f       	sbci	r19, 0xFF	; 255
    7586:	20 83       	st	Z, r18
    7588:	31 83       	std	Z+1, r19	; 0x01
    758a:	8c 93       	st	X, r24
    758c:	26 81       	ldd	r18, Z+6	; 0x06
    758e:	37 81       	ldd	r19, Z+7	; 0x07
    7590:	2f 5f       	subi	r18, 0xFF	; 255
    7592:	3f 4f       	sbci	r19, 0xFF	; 255
    7594:	26 83       	std	Z+6, r18	; 0x06
    7596:	37 83       	std	Z+7, r19	; 0x07
    7598:	14 c0       	rjmp	.+40     	; 0x75c2 <fputc+0x6e>
    759a:	8b 01       	movw	r16, r22
    759c:	ec 01       	movw	r28, r24
    759e:	fb 01       	movw	r30, r22
    75a0:	00 84       	ldd	r0, Z+8	; 0x08
    75a2:	f1 85       	ldd	r31, Z+9	; 0x09
    75a4:	e0 2d       	mov	r30, r0
    75a6:	19 95       	eicall
    75a8:	89 2b       	or	r24, r25
    75aa:	e1 f6       	brne	.-72     	; 0x7564 <fputc+0x10>
    75ac:	d8 01       	movw	r26, r16
    75ae:	16 96       	adiw	r26, 0x06	; 6
    75b0:	8d 91       	ld	r24, X+
    75b2:	9c 91       	ld	r25, X
    75b4:	17 97       	sbiw	r26, 0x07	; 7
    75b6:	01 96       	adiw	r24, 0x01	; 1
    75b8:	16 96       	adiw	r26, 0x06	; 6
    75ba:	8d 93       	st	X+, r24
    75bc:	9c 93       	st	X, r25
    75be:	17 97       	sbiw	r26, 0x07	; 7
    75c0:	ce 01       	movw	r24, r28
    75c2:	df 91       	pop	r29
    75c4:	cf 91       	pop	r28
    75c6:	1f 91       	pop	r17
    75c8:	0f 91       	pop	r16
    75ca:	08 95       	ret

000075cc <ungetc>:
    75cc:	fb 01       	movw	r30, r22
    75ce:	23 81       	ldd	r18, Z+3	; 0x03
    75d0:	20 ff       	sbrs	r18, 0
    75d2:	12 c0       	rjmp	.+36     	; 0x75f8 <ungetc+0x2c>
    75d4:	26 fd       	sbrc	r18, 6
    75d6:	10 c0       	rjmp	.+32     	; 0x75f8 <ungetc+0x2c>
    75d8:	8f 3f       	cpi	r24, 0xFF	; 255
    75da:	3f ef       	ldi	r19, 0xFF	; 255
    75dc:	93 07       	cpc	r25, r19
    75de:	61 f0       	breq	.+24     	; 0x75f8 <ungetc+0x2c>
    75e0:	82 83       	std	Z+2, r24	; 0x02
    75e2:	2f 7d       	andi	r18, 0xDF	; 223
    75e4:	20 64       	ori	r18, 0x40	; 64
    75e6:	23 83       	std	Z+3, r18	; 0x03
    75e8:	26 81       	ldd	r18, Z+6	; 0x06
    75ea:	37 81       	ldd	r19, Z+7	; 0x07
    75ec:	21 50       	subi	r18, 0x01	; 1
    75ee:	31 09       	sbc	r19, r1
    75f0:	26 83       	std	Z+6, r18	; 0x06
    75f2:	37 83       	std	Z+7, r19	; 0x07
    75f4:	99 27       	eor	r25, r25
    75f6:	08 95       	ret
    75f8:	8f ef       	ldi	r24, 0xFF	; 255
    75fa:	9f ef       	ldi	r25, 0xFF	; 255
    75fc:	08 95       	ret

000075fe <__ultoa_invert>:
    75fe:	fa 01       	movw	r30, r20
    7600:	aa 27       	eor	r26, r26
    7602:	28 30       	cpi	r18, 0x08	; 8
    7604:	51 f1       	breq	.+84     	; 0x765a <__ultoa_invert+0x5c>
    7606:	20 31       	cpi	r18, 0x10	; 16
    7608:	81 f1       	breq	.+96     	; 0x766a <__ultoa_invert+0x6c>
    760a:	e8 94       	clt
    760c:	6f 93       	push	r22
    760e:	6e 7f       	andi	r22, 0xFE	; 254
    7610:	6e 5f       	subi	r22, 0xFE	; 254
    7612:	7f 4f       	sbci	r23, 0xFF	; 255
    7614:	8f 4f       	sbci	r24, 0xFF	; 255
    7616:	9f 4f       	sbci	r25, 0xFF	; 255
    7618:	af 4f       	sbci	r26, 0xFF	; 255
    761a:	b1 e0       	ldi	r27, 0x01	; 1
    761c:	3e d0       	rcall	.+124    	; 0x769a <__ultoa_invert+0x9c>
    761e:	b4 e0       	ldi	r27, 0x04	; 4
    7620:	3c d0       	rcall	.+120    	; 0x769a <__ultoa_invert+0x9c>
    7622:	67 0f       	add	r22, r23
    7624:	78 1f       	adc	r23, r24
    7626:	89 1f       	adc	r24, r25
    7628:	9a 1f       	adc	r25, r26
    762a:	a1 1d       	adc	r26, r1
    762c:	68 0f       	add	r22, r24
    762e:	79 1f       	adc	r23, r25
    7630:	8a 1f       	adc	r24, r26
    7632:	91 1d       	adc	r25, r1
    7634:	a1 1d       	adc	r26, r1
    7636:	6a 0f       	add	r22, r26
    7638:	71 1d       	adc	r23, r1
    763a:	81 1d       	adc	r24, r1
    763c:	91 1d       	adc	r25, r1
    763e:	a1 1d       	adc	r26, r1
    7640:	20 d0       	rcall	.+64     	; 0x7682 <__ultoa_invert+0x84>
    7642:	09 f4       	brne	.+2      	; 0x7646 <__ultoa_invert+0x48>
    7644:	68 94       	set
    7646:	3f 91       	pop	r19
    7648:	2a e0       	ldi	r18, 0x0A	; 10
    764a:	26 9f       	mul	r18, r22
    764c:	11 24       	eor	r1, r1
    764e:	30 19       	sub	r19, r0
    7650:	30 5d       	subi	r19, 0xD0	; 208
    7652:	31 93       	st	Z+, r19
    7654:	de f6       	brtc	.-74     	; 0x760c <__ultoa_invert+0xe>
    7656:	cf 01       	movw	r24, r30
    7658:	08 95       	ret
    765a:	46 2f       	mov	r20, r22
    765c:	47 70       	andi	r20, 0x07	; 7
    765e:	40 5d       	subi	r20, 0xD0	; 208
    7660:	41 93       	st	Z+, r20
    7662:	b3 e0       	ldi	r27, 0x03	; 3
    7664:	0f d0       	rcall	.+30     	; 0x7684 <__ultoa_invert+0x86>
    7666:	c9 f7       	brne	.-14     	; 0x765a <__ultoa_invert+0x5c>
    7668:	f6 cf       	rjmp	.-20     	; 0x7656 <__ultoa_invert+0x58>
    766a:	46 2f       	mov	r20, r22
    766c:	4f 70       	andi	r20, 0x0F	; 15
    766e:	40 5d       	subi	r20, 0xD0	; 208
    7670:	4a 33       	cpi	r20, 0x3A	; 58
    7672:	18 f0       	brcs	.+6      	; 0x767a <__ultoa_invert+0x7c>
    7674:	49 5d       	subi	r20, 0xD9	; 217
    7676:	31 fd       	sbrc	r19, 1
    7678:	40 52       	subi	r20, 0x20	; 32
    767a:	41 93       	st	Z+, r20
    767c:	02 d0       	rcall	.+4      	; 0x7682 <__ultoa_invert+0x84>
    767e:	a9 f7       	brne	.-22     	; 0x766a <__ultoa_invert+0x6c>
    7680:	ea cf       	rjmp	.-44     	; 0x7656 <__ultoa_invert+0x58>
    7682:	b4 e0       	ldi	r27, 0x04	; 4
    7684:	a6 95       	lsr	r26
    7686:	97 95       	ror	r25
    7688:	87 95       	ror	r24
    768a:	77 95       	ror	r23
    768c:	67 95       	ror	r22
    768e:	ba 95       	dec	r27
    7690:	c9 f7       	brne	.-14     	; 0x7684 <__ultoa_invert+0x86>
    7692:	00 97       	sbiw	r24, 0x00	; 0
    7694:	61 05       	cpc	r22, r1
    7696:	71 05       	cpc	r23, r1
    7698:	08 95       	ret
    769a:	9b 01       	movw	r18, r22
    769c:	ac 01       	movw	r20, r24
    769e:	0a 2e       	mov	r0, r26
    76a0:	06 94       	lsr	r0
    76a2:	57 95       	ror	r21
    76a4:	47 95       	ror	r20
    76a6:	37 95       	ror	r19
    76a8:	27 95       	ror	r18
    76aa:	ba 95       	dec	r27
    76ac:	c9 f7       	brne	.-14     	; 0x76a0 <__ultoa_invert+0xa2>
    76ae:	62 0f       	add	r22, r18
    76b0:	73 1f       	adc	r23, r19
    76b2:	84 1f       	adc	r24, r20
    76b4:	95 1f       	adc	r25, r21
    76b6:	a0 1d       	adc	r26, r0
    76b8:	08 95       	ret

000076ba <__ctype_isfalse>:
    76ba:	99 27       	eor	r25, r25
    76bc:	88 27       	eor	r24, r24

000076be <__ctype_istrue>:
    76be:	08 95       	ret

000076c0 <_exit>:
    76c0:	f8 94       	cli

000076c2 <__stop_program>:
    76c2:	ff cf       	rjmp	.-2      	; 0x76c2 <__stop_program>
