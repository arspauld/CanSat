
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00802000  00005e0e  00005ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000154  008020c4  008020c4  00005f66  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005f66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005fc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c0  00000000  00000000  00006008  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001bbdb  00000000  00000000  000067c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005983  00000000  00000000  000223a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cd01  00000000  00000000  00027d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020bc  00000000  00000000  00034a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000391bf  00000000  00000000  00036ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000758d  00000000  00000000  0006fca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  00077230  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e587  00000000  00000000  00077960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_13>
      38:	f2 c3       	rjmp	.+2020   	; 0x81e <__vector_14>
      3a:	00 00       	nop
      3c:	28 c4       	rjmp	.+2128   	; 0x88e <__vector_15>
      3e:	00 00       	nop
      40:	5e c4       	rjmp	.+2236   	; 0x8fe <__vector_16>
      42:	00 00       	nop
      44:	94 c4       	rjmp	.+2344   	; 0x96e <__vector_17>
      46:	00 00       	nop
      48:	ca c4       	rjmp	.+2452   	; 0x9de <__vector_18>
      4a:	00 00       	nop
      4c:	00 c5       	rjmp	.+2560   	; 0xa4e <__vector_19>
      4e:	00 00       	nop
      50:	36 c5       	rjmp	.+2668   	; 0xabe <__vector_20>
      52:	00 00       	nop
      54:	6c c5       	rjmp	.+2776   	; 0xb2e <__vector_21>
      56:	00 00       	nop
      58:	a2 c5       	rjmp	.+2884   	; 0xb9e <__vector_22>
      5a:	00 00       	nop
      5c:	d8 c5       	rjmp	.+2992   	; 0xc0e <__vector_23>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	35 c1       	rjmp	.+618    	; 0x2fc <__bad_interrupt>
      92:	00 00       	nop
      94:	33 c1       	rjmp	.+614    	; 0x2fc <__bad_interrupt>
      96:	00 00       	nop
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2f c1       	rjmp	.+606    	; 0x2fc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_46>
      bc:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <__vector_47>
      c0:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_48>
      c4:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_49>
      c8:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_50>
      cc:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_51>
      d0:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_52>
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	11 c1       	rjmp	.+546    	; 0x2fc <__bad_interrupt>
      da:	00 00       	nop
      dc:	0f c1       	rjmp	.+542    	; 0x2fc <__bad_interrupt>
      de:	00 00       	nop
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b c1       	rjmp	.+534    	; 0x2fc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__vector_58>
      ec:	07 c1       	rjmp	.+526    	; 0x2fc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	05 c1       	rjmp	.+522    	; 0x2fc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	03 c1       	rjmp	.+518    	; 0x2fc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	01 c1       	rjmp	.+514    	; 0x2fc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ff c0       	rjmp	.+510    	; 0x2fc <__bad_interrupt>
      fe:	00 00       	nop
     100:	fd c0       	rjmp	.+506    	; 0x2fc <__bad_interrupt>
     102:	00 00       	nop
     104:	fb c0       	rjmp	.+502    	; 0x2fc <__bad_interrupt>
     106:	00 00       	nop
     108:	f9 c0       	rjmp	.+498    	; 0x2fc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f7 c0       	rjmp	.+494    	; 0x2fc <__bad_interrupt>
     10e:	00 00       	nop
     110:	21 c1       	rjmp	.+578    	; 0x354 <__vector_68>
     112:	00 00       	nop
     114:	65 c1       	rjmp	.+714    	; 0x3e0 <__vector_69>
     116:	00 00       	nop
     118:	a9 c1       	rjmp	.+850    	; 0x46c <__vector_70>
     11a:	00 00       	nop
     11c:	8c c2       	rjmp	.+1304   	; 0x636 <__vector_71>
     11e:	00 00       	nop
     120:	c7 c2       	rjmp	.+1422   	; 0x6b0 <__vector_72>
     122:	00 00       	nop
     124:	02 c3       	rjmp	.+1540   	; 0x72a <__vector_73>
     126:	00 00       	nop
     128:	3d c3       	rjmp	.+1658   	; 0x7a4 <__vector_74>
     12a:	00 00       	nop
     12c:	e7 c0       	rjmp	.+462    	; 0x2fc <__bad_interrupt>
     12e:	00 00       	nop
     130:	e5 c0       	rjmp	.+458    	; 0x2fc <__bad_interrupt>
     132:	00 00       	nop
     134:	a4 c5       	rjmp	.+2888   	; 0xc7e <__vector_77>
     136:	00 00       	nop
     138:	da c5       	rjmp	.+2996   	; 0xcee <__vector_78>
     13a:	00 00       	nop
     13c:	10 c6       	rjmp	.+3104   	; 0xd5e <__vector_79>
     13e:	00 00       	nop
     140:	46 c6       	rjmp	.+3212   	; 0xdce <__vector_80>
     142:	00 00       	nop
     144:	7c c6       	rjmp	.+3320   	; 0xe3e <__vector_81>
     146:	00 00       	nop
     148:	b2 c6       	rjmp	.+3428   	; 0xeae <__vector_82>
     14a:	00 00       	nop
     14c:	e8 c6       	rjmp	.+3536   	; 0xf1e <__vector_83>
     14e:	00 00       	nop
     150:	1e c7       	rjmp	.+3644   	; 0xf8e <__vector_84>
     152:	00 00       	nop
     154:	54 c7       	rjmp	.+3752   	; 0xffe <__vector_85>
     156:	00 00       	nop
     158:	8a c7       	rjmp	.+3860   	; 0x106e <__vector_86>
     15a:	00 00       	nop
     15c:	cf c0       	rjmp	.+414    	; 0x2fc <__bad_interrupt>
     15e:	00 00       	nop
     160:	cd c0       	rjmp	.+410    	; 0x2fc <__bad_interrupt>
     162:	00 00       	nop
     164:	cb c0       	rjmp	.+406    	; 0x2fc <__bad_interrupt>
     166:	00 00       	nop
     168:	c9 c0       	rjmp	.+402    	; 0x2fc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__vector_91>
     170:	c5 c0       	rjmp	.+394    	; 0x2fc <__bad_interrupt>
     172:	00 00       	nop
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__bad_interrupt>
     176:	00 00       	nop
     178:	c1 c0       	rjmp	.+386    	; 0x2fc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bf c0       	rjmp	.+382    	; 0x2fc <__bad_interrupt>
     17e:	00 00       	nop
     180:	bd c0       	rjmp	.+378    	; 0x2fc <__bad_interrupt>
     182:	00 00       	nop
     184:	bb c0       	rjmp	.+374    	; 0x2fc <__bad_interrupt>
     186:	00 00       	nop
     188:	b9 c0       	rjmp	.+370    	; 0x2fc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b7 c0       	rjmp	.+366    	; 0x2fc <__bad_interrupt>
     18e:	00 00       	nop
     190:	b5 c0       	rjmp	.+362    	; 0x2fc <__bad_interrupt>
     192:	00 00       	nop
     194:	b3 c0       	rjmp	.+358    	; 0x2fc <__bad_interrupt>
     196:	00 00       	nop
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	af c0       	rjmp	.+350    	; 0x2fc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ad c0       	rjmp	.+346    	; 0x2fc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ab c0       	rjmp	.+342    	; 0x2fc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a9 c0       	rjmp	.+338    	; 0x2fc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a7 c0       	rjmp	.+334    	; 0x2fc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a5 c0       	rjmp	.+330    	; 0x2fc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	a3 c0       	rjmp	.+326    	; 0x2fc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	a1 c0       	rjmp	.+322    	; 0x2fc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9f c0       	rjmp	.+318    	; 0x2fc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	9d c0       	rjmp	.+314    	; 0x2fc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	9b c0       	rjmp	.+310    	; 0x2fc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	99 c0       	rjmp	.+306    	; 0x2fc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	97 c0       	rjmp	.+302    	; 0x2fc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	95 c0       	rjmp	.+298    	; 0x2fc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	93 c0       	rjmp	.+294    	; 0x2fc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	91 c0       	rjmp	.+290    	; 0x2fc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8f c0       	rjmp	.+286    	; 0x2fc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8d c0       	rjmp	.+282    	; 0x2fc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8b c0       	rjmp	.+278    	; 0x2fc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	89 c0       	rjmp	.+274    	; 0x2fc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	87 c0       	rjmp	.+270    	; 0x2fc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	83 c0       	rjmp	.+262    	; 0x2fc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	81 c0       	rjmp	.+258    	; 0x2fc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	ad 1e       	adc	r10, r29
     1fe:	aa 1e       	adc	r10, r26
     200:	a7 1e       	adc	r10, r23
     202:	b3 1e       	adc	r11, r19
     204:	a4 1e       	adc	r10, r20
     206:	a2 1e       	adc	r10, r18
     208:	b5 1e       	adc	r11, r21
     20a:	b5 1e       	adc	r11, r21
     20c:	b5 1e       	adc	r11, r21
     20e:	b5 1e       	adc	r11, r21
     210:	b5 1e       	adc	r11, r21
     212:	b5 1e       	adc	r11, r21
     214:	b5 1e       	adc	r11, r21
     216:	b5 1e       	adc	r11, r21
     218:	b5 1e       	adc	r11, r21
     21a:	b5 1e       	adc	r11, r21
     21c:	b5 1e       	adc	r11, r21
     21e:	b5 1e       	adc	r11, r21
     220:	b0 1e       	adc	r11, r16
     222:	07 63       	ori	r16, 0x37	; 55
     224:	42 36       	cpi	r20, 0x62	; 98
     226:	b7 9b       	sbis	0x16, 7	; 22
     228:	d8 a7       	std	Y+40, r29	; 0x28
     22a:	1a 39       	cpi	r17, 0x9A	; 154
     22c:	68 56       	subi	r22, 0x68	; 104
     22e:	18 ae       	std	Y+56, r1	; 0x38
     230:	ba ab       	std	Y+50, r27	; 0x32
     232:	55 8c       	ldd	r5, Z+29	; 0x1d
     234:	1d 3c       	cpi	r17, 0xCD	; 205
     236:	b7 cc       	rjmp	.-1682   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     238:	57 63       	ori	r21, 0x37	; 55
     23a:	bd 6d       	ori	r27, 0xDD	; 221
     23c:	ed fd       	.word	0xfded	; ????
     23e:	75 3e       	cpi	r23, 0xE5	; 229
     240:	f6 17       	cp	r31, r22
     242:	72 31       	cpi	r23, 0x12	; 18
     244:	bf 00       	.word	0x00bf	; ????
     246:	00 00       	nop
     248:	80 3f       	cpi	r24, 0xF0	; 240
     24a:	08 00       	.word	0x0008	; ????
     24c:	00 00       	nop
     24e:	be 92       	st	-X, r11
     250:	24 49       	sbci	r18, 0x94	; 148
     252:	12 3e       	cpi	r17, 0xE2	; 226
     254:	ab aa       	std	Y+51, r10	; 0x33
     256:	aa 2a       	or	r10, r26
     258:	be cd       	rjmp	.-1156   	; 0xfffffdd6 <__eeprom_end+0xff7efdd6>
     25a:	cc cc       	rjmp	.-1640   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
     25c:	4c 3e       	cpi	r20, 0xEC	; 236
     25e:	00 00       	nop
     260:	00 80       	ld	r0, Z
     262:	be ab       	std	Y+54, r27	; 0x36
     264:	aa aa       	std	Y+50, r10	; 0x32
     266:	aa 3e       	cpi	r26, 0xEA	; 234
     268:	00 00       	nop
     26a:	00 00       	nop
     26c:	bf 00       	.word	0x00bf	; ????
     26e:	00 00       	nop
     270:	80 3f       	cpi	r24, 0xF0	; 240
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 08       	sbc	r0, r0
     278:	41 78       	andi	r20, 0x81	; 129
     27a:	d3 bb       	out	0x13, r29	; 19
     27c:	43 87       	std	Z+11, r20	; 0x0b
     27e:	d1 13       	cpse	r29, r17
     280:	3d 19       	sub	r19, r13
     282:	0e 3c       	cpi	r16, 0xCE	; 206
     284:	c3 bd       	out	0x23, r28	; 35
     286:	42 82       	std	Z+2, r4	; 0x02
     288:	ad 2b       	or	r26, r29
     28a:	3e 68       	ori	r19, 0x8E	; 142
     28c:	ec 82       	std	Y+4, r14	; 0x04
     28e:	76 be       	out	0x36, r7	; 54
     290:	d9 8f       	std	Y+25, r29	; 0x19
     292:	e1 a9       	ldd	r30, Z+49	; 0x31
     294:	3e 4c       	sbci	r19, 0xCE	; 206
     296:	80 ef       	ldi	r24, 0xF0	; 240
     298:	ff be       	out	0x3f, r15	; 63
     29a:	01 c4       	rjmp	.+2050   	; 0xa9e <__vector_19+0x50>
     29c:	ff 7f       	andi	r31, 0xFF	; 255
     29e:	3f 00       	.word	0x003f	; ????
     2a0:	00 00       	nop
	...

000002a4 <__trampolines_end>:
     2a4:	63 64       	ori	r22, 0x43	; 67
     2a6:	69 6e       	ori	r22, 0xE9	; 233
     2a8:	6f 70       	andi	r22, 0x0F	; 15
     2aa:	73 75       	andi	r23, 0x53	; 83
     2ac:	78 58       	subi	r23, 0x88	; 136
     2ae:	5b 00       	.word	0x005b	; ????

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df e3       	ldi	r29, 0x3F	; 63
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60
     2c0:	18 be       	out	0x38, r1	; 56
     2c2:	19 be       	out	0x39, r1	; 57
     2c4:	1a be       	out	0x3a, r1	; 58
     2c6:	1b be       	out	0x3b, r1	; 59

000002c8 <__do_copy_data>:
     2c8:	10 e2       	ldi	r17, 0x20	; 32
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e2       	ldi	r27, 0x20	; 32
     2ce:	ee e0       	ldi	r30, 0x0E	; 14
     2d0:	fe e5       	ldi	r31, 0x5E	; 94
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0b bf       	out	0x3b, r16	; 59
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x14>
     2d8:	07 90       	elpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	a4 3c       	cpi	r26, 0xC4	; 196
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0x10>
     2e2:	1b be       	out	0x3b, r1	; 59

000002e4 <__do_clear_bss>:
     2e4:	22 e2       	ldi	r18, 0x22	; 34
     2e6:	a4 ec       	ldi	r26, 0xC4	; 196
     2e8:	b0 e2       	ldi	r27, 0x20	; 32
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	a8 31       	cpi	r26, 0x18	; 24
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <main>
     2f8:	0c 94 05 2f 	jmp	0x5e0a	; 0x5e0a <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     308:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <stdio_base>
     30c:	90 91 68 21 	lds	r25, 0x2168	; 0x802168 <stdio_base+0x1>
     310:	e0 91 63 21 	lds	r30, 0x2163	; 0x802163 <ptr_get>
     314:	f0 91 64 21 	lds	r31, 0x2164	; 0x802164 <ptr_get+0x1>
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	19 95       	eicall
	return c;
     320:	89 81       	ldd	r24, Y+1	; 0x01
}
     322:	08 2e       	mov	r0, r24
     324:	00 0c       	add	r0, r0
     326:	99 0b       	sbc	r25, r25
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     330:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     332:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <stdio_base>
     336:	90 91 68 21 	lds	r25, 0x2168	; 0x802168 <stdio_base+0x1>
     33a:	e0 91 65 21 	lds	r30, 0x2165	; 0x802165 <ptr_put>
     33e:	f0 91 66 21 	lds	r31, 0x2166	; 0x802166 <ptr_put+0x1>
     342:	19 95       	eicall
     344:	99 23       	and	r25, r25
     346:	1c f0       	brlt	.+6      	; 0x34e <_write+0x1e>
		return -1;
	}
	return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     352:	08 95       	ret

00000354 <__vector_68>:
		cpu_irq_restore(iflags);
		return;
	}

	cpu_irq_restore(iflags);
}
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	08 b6       	in	r0, 0x38	; 56
     360:	0f 92       	push	r0
     362:	18 be       	out	0x38, r1	; 56
     364:	09 b6       	in	r0, 0x39	; 57
     366:	0f 92       	push	r0
     368:	19 be       	out	0x39, r1	; 57
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	1b be       	out	0x3b, r1	; 59
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
     388:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <ac_aca_callback>
     38c:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <ac_aca_callback+0x1>
     390:	30 97       	sbiw	r30, 0x00	; 0
     392:	79 f0       	breq	.+30     	; 0x3b2 <__vector_68+0x5e>
     394:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <__vector_68+0x54>
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	19 95       	eicall
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__vector_68+0x5e>
     3a8:	40 e8       	ldi	r20, 0x80	; 128
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	19 95       	eicall
     3b2:	ff 91       	pop	r31
     3b4:	ef 91       	pop	r30
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	7f 91       	pop	r23
     3c0:	6f 91       	pop	r22
     3c2:	5f 91       	pop	r21
     3c4:	4f 91       	pop	r20
     3c6:	3f 91       	pop	r19
     3c8:	2f 91       	pop	r18
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	09 be       	out	0x39, r0	; 57
     3d2:	0f 90       	pop	r0
     3d4:	08 be       	out	0x38, r0	; 56
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_69>:
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	08 b6       	in	r0, 0x38	; 56
     3ec:	0f 92       	push	r0
     3ee:	18 be       	out	0x38, r1	; 56
     3f0:	09 b6       	in	r0, 0x39	; 57
     3f2:	0f 92       	push	r0
     3f4:	19 be       	out	0x39, r1	; 57
     3f6:	0b b6       	in	r0, 0x3b	; 59
     3f8:	0f 92       	push	r0
     3fa:	1b be       	out	0x3b, r1	; 59
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
     414:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <ac_aca_callback>
     418:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <ac_aca_callback+0x1>
     41c:	30 97       	sbiw	r30, 0x00	; 0
     41e:	79 f0       	breq	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     420:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     424:	85 ff       	sbrs	r24, 5
     426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	80 e8       	ldi	r24, 0x80	; 128
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	19 95       	eicall
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e8       	ldi	r24, 0x80	; 128
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	19 95       	eicall
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	09 be       	out	0x39, r0	; 57
     45e:	0f 90       	pop	r0
     460:	08 be       	out	0x38, r0	; 56
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_70>:
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	08 b6       	in	r0, 0x38	; 56
     478:	0f 92       	push	r0
     47a:	18 be       	out	0x38, r1	; 56
     47c:	09 b6       	in	r0, 0x39	; 57
     47e:	0f 92       	push	r0
     480:	19 be       	out	0x39, r1	; 57
     482:	0b b6       	in	r0, 0x3b	; 59
     484:	0f 92       	push	r0
     486:	1b be       	out	0x3b, r1	; 59
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
     4a0:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <ac_aca_callback>
     4a4:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <ac_aca_callback+0x1>
     4a8:	30 97       	sbiw	r30, 0x00	; 0
     4aa:	39 f0       	breq	.+14     	; 0x4ba <__vector_70+0x4e>
     4ac:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
     4b0:	40 7c       	andi	r20, 0xC0	; 192
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	80 e8       	ldi	r24, 0x80	; 128
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	19 95       	eicall
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0b be       	out	0x3b, r0	; 59
     4d6:	0f 90       	pop	r0
     4d8:	09 be       	out	0x39, r0	; 57
     4da:	0f 90       	pop	r0
     4dc:	08 be       	out	0x38, r0	; 56
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <ac_write_config>:
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	2f b7       	in	r18, 0x3f	; 63
     500:	29 83       	std	Y+1, r18	; 0x01
     502:	f8 94       	cli
     504:	c9 80       	ldd	r12, Y+1	; 0x01
     506:	80 38       	cpi	r24, 0x80	; 128
     508:	23 e0       	ldi	r18, 0x03	; 3
     50a:	92 07       	cpc	r25, r18
     50c:	d9 f4       	brne	.+54     	; 0x544 <ac_write_config+0x5c>
     50e:	7a 01       	movw	r14, r20
     510:	d6 2e       	mov	r13, r22
     512:	8c 01       	movw	r16, r24
     514:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <__data_end>
     518:	81 11       	cpse	r24, r1
     51a:	04 c0       	rjmp	.+8      	; 0x524 <ac_write_config+0x3c>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <sysclk_enable_module>
     524:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <__data_end>
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <__data_end>
     52e:	f7 01       	movw	r30, r14
     530:	82 81       	ldd	r24, Z+2	; 0x02
     532:	f8 01       	movw	r30, r16
     534:	85 83       	std	Z+5, r24	; 0x05
     536:	f7 01       	movw	r30, r14
     538:	83 81       	ldd	r24, Z+3	; 0x03
     53a:	f8 01       	movw	r30, r16
     53c:	86 83       	std	Z+6, r24	; 0x06
     53e:	dd 20       	and	r13, r13
     540:	19 f0       	breq	.+6      	; 0x548 <ac_write_config+0x60>
     542:	0b c0       	rjmp	.+22     	; 0x55a <ac_write_config+0x72>
     544:	cf be       	out	0x3f, r12	; 63
     546:	1d c0       	rjmp	.+58     	; 0x582 <ac_write_config+0x9a>
     548:	f7 01       	movw	r30, r14
     54a:	81 81       	ldd	r24, Z+1	; 0x01
     54c:	f8 01       	movw	r30, r16
     54e:	82 83       	std	Z+2, r24	; 0x02
     550:	f7 01       	movw	r30, r14
     552:	80 81       	ld	r24, Z
     554:	f8 01       	movw	r30, r16
     556:	80 83       	st	Z, r24
     558:	08 c0       	rjmp	.+16     	; 0x56a <ac_write_config+0x82>
     55a:	f7 01       	movw	r30, r14
     55c:	81 81       	ldd	r24, Z+1	; 0x01
     55e:	f8 01       	movw	r30, r16
     560:	83 83       	std	Z+3, r24	; 0x03
     562:	f7 01       	movw	r30, r14
     564:	80 81       	ld	r24, Z
     566:	f8 01       	movw	r30, r16
     568:	81 83       	std	Z+1, r24	; 0x01
     56a:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <__data_end>
     56e:	81 50       	subi	r24, 0x01	; 1
     570:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <__data_end>
     574:	81 11       	cpse	r24, r1
     576:	04 c0       	rjmp	.+8      	; 0x580 <ac_write_config+0x98>
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <sysclk_disable_module>
     580:	cf be       	out	0x3f, r12	; 63
     582:	0f 90       	pop	r0
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	08 95       	ret

00000596 <ac_enable>:
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	1f 92       	push	r1
     5a4:	1f 92       	push	r1
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	2f b7       	in	r18, 0x3f	; 63
     5ac:	2a 83       	std	Y+2, r18	; 0x02
     5ae:	f8 94       	cli
     5b0:	ea 80       	ldd	r14, Y+2	; 0x02
     5b2:	80 38       	cpi	r24, 0x80	; 128
     5b4:	23 e0       	ldi	r18, 0x03	; 3
     5b6:	92 07       	cpc	r25, r18
     5b8:	09 f5       	brne	.+66     	; 0x5fc <ac_enable+0x66>
     5ba:	f6 2e       	mov	r15, r22
     5bc:	8c 01       	movw	r16, r24
     5be:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <__data_end>
     5c2:	81 11       	cpse	r24, r1
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <ac_enable+0x38>
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <sysclk_enable_module>
     5ce:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <__data_end>
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <__data_end>
     5d8:	80 91 5e 21 	lds	r24, 0x215E	; 0x80215e <sleepmgr_locks+0x1>
     5dc:	8f 3f       	cpi	r24, 0xFF	; 255
     5de:	09 f4       	brne	.+2      	; 0x5e2 <ac_enable+0x4c>
     5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <ac_enable+0x4a>
     5e2:	8f b7       	in	r24, 0x3f	; 63
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	f8 94       	cli
     5e8:	99 81       	ldd	r25, Y+1	; 0x01
     5ea:	ed e5       	ldi	r30, 0x5D	; 93
     5ec:	f1 e2       	ldi	r31, 0x21	; 33
     5ee:	81 81       	ldd	r24, Z+1	; 0x01
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	81 83       	std	Z+1, r24	; 0x01
     5f4:	9f bf       	out	0x3f, r25	; 63
     5f6:	ff 20       	and	r15, r15
     5f8:	19 f0       	breq	.+6      	; 0x600 <ac_enable+0x6a>
     5fa:	07 c0       	rjmp	.+14     	; 0x60a <ac_enable+0x74>
     5fc:	ef be       	out	0x3f, r14	; 63
     5fe:	0a c0       	rjmp	.+20     	; 0x614 <ac_enable+0x7e>
     600:	f8 01       	movw	r30, r16
     602:	80 81       	ld	r24, Z
     604:	81 60       	ori	r24, 0x01	; 1
     606:	80 83       	st	Z, r24
     608:	04 c0       	rjmp	.+8      	; 0x612 <ac_enable+0x7c>
     60a:	f8 01       	movw	r30, r16
     60c:	81 81       	ldd	r24, Z+1	; 0x01
     60e:	81 60       	ori	r24, 0x01	; 1
     610:	81 83       	std	Z+1, r24	; 0x01
     612:	ef be       	out	0x3f, r14	; 63
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	08 95       	ret

00000626 <ac_set_interrupt_callback>:
 * \param callback Reference to a callback function
 */
void ac_set_interrupt_callback(AC_t *ac, ac_callback_t callback)
{
#ifdef ACA
	if (ac == &ACA) {
     626:	80 38       	cpi	r24, 0x80	; 128
     628:	93 40       	sbci	r25, 0x03	; 3
     62a:	21 f4       	brne	.+8      	; 0x634 <ac_set_interrupt_callback+0xe>
		ac_aca_callback = callback;
     62c:	60 93 c5 20 	sts	0x20C5, r22	; 0x8020c5 <ac_aca_callback>
     630:	70 93 c6 20 	sts	0x20C6, r23	; 0x8020c6 <ac_aca_callback+0x1>
     634:	08 95       	ret

00000636 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	08 b6       	in	r0, 0x38	; 56
     642:	0f 92       	push	r0
     644:	18 be       	out	0x38, r1	; 56
     646:	09 b6       	in	r0, 0x39	; 57
     648:	0f 92       	push	r0
     64a:	19 be       	out	0x39, r1	; 57
     64c:	0b b6       	in	r0, 0x3b	; 59
     64e:	0f 92       	push	r0
     650:	1b be       	out	0x3b, r1	; 59
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     66a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     66e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     672:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <adca_callback>
     676:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <adca_callback+0x1>
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	19 95       	eicall
}
     682:	ff 91       	pop	r31
     684:	ef 91       	pop	r30
     686:	bf 91       	pop	r27
     688:	af 91       	pop	r26
     68a:	9f 91       	pop	r25
     68c:	8f 91       	pop	r24
     68e:	7f 91       	pop	r23
     690:	6f 91       	pop	r22
     692:	5f 91       	pop	r21
     694:	4f 91       	pop	r20
     696:	3f 91       	pop	r19
     698:	2f 91       	pop	r18
     69a:	0f 90       	pop	r0
     69c:	0b be       	out	0x3b, r0	; 59
     69e:	0f 90       	pop	r0
     6a0:	09 be       	out	0x39, r0	; 57
     6a2:	0f 90       	pop	r0
     6a4:	08 be       	out	0x38, r0	; 56
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	08 b6       	in	r0, 0x38	; 56
     6bc:	0f 92       	push	r0
     6be:	18 be       	out	0x38, r1	; 56
     6c0:	09 b6       	in	r0, 0x39	; 57
     6c2:	0f 92       	push	r0
     6c4:	19 be       	out	0x39, r1	; 57
     6c6:	0b b6       	in	r0, 0x3b	; 59
     6c8:	0f 92       	push	r0
     6ca:	1b be       	out	0x3b, r1	; 59
     6cc:	2f 93       	push	r18
     6ce:	3f 93       	push	r19
     6d0:	4f 93       	push	r20
     6d2:	5f 93       	push	r21
     6d4:	6f 93       	push	r22
     6d6:	7f 93       	push	r23
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     6e4:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     6e8:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     6ec:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <adca_callback>
     6f0:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <adca_callback+0x1>
     6f4:	62 e0       	ldi	r22, 0x02	; 2
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	19 95       	eicall
}
     6fc:	ff 91       	pop	r31
     6fe:	ef 91       	pop	r30
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	09 be       	out	0x39, r0	; 57
     71c:	0f 90       	pop	r0
     71e:	08 be       	out	0x38, r0	; 56
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	08 b6       	in	r0, 0x38	; 56
     736:	0f 92       	push	r0
     738:	18 be       	out	0x38, r1	; 56
     73a:	09 b6       	in	r0, 0x39	; 57
     73c:	0f 92       	push	r0
     73e:	19 be       	out	0x39, r1	; 57
     740:	0b b6       	in	r0, 0x3b	; 59
     742:	0f 92       	push	r0
     744:	1b be       	out	0x3b, r1	; 59
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     75e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     762:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     766:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <adca_callback>
     76a:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <adca_callback+0x1>
     76e:	64 e0       	ldi	r22, 0x04	; 4
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	19 95       	eicall
}
     776:	ff 91       	pop	r31
     778:	ef 91       	pop	r30
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	7f 91       	pop	r23
     784:	6f 91       	pop	r22
     786:	5f 91       	pop	r21
     788:	4f 91       	pop	r20
     78a:	3f 91       	pop	r19
     78c:	2f 91       	pop	r18
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	09 be       	out	0x39, r0	; 57
     796:	0f 90       	pop	r0
     798:	08 be       	out	0x38, r0	; 56
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	08 b6       	in	r0, 0x38	; 56
     7b0:	0f 92       	push	r0
     7b2:	18 be       	out	0x38, r1	; 56
     7b4:	09 b6       	in	r0, 0x39	; 57
     7b6:	0f 92       	push	r0
     7b8:	19 be       	out	0x39, r1	; 57
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	1b be       	out	0x3b, r1	; 59
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     7d8:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     7dc:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     7e0:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <adca_callback>
     7e4:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <adca_callback+0x1>
     7e8:	68 e0       	ldi	r22, 0x08	; 8
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	19 95       	eicall
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0b be       	out	0x3b, r0	; 59
     80c:	0f 90       	pop	r0
     80e:	09 be       	out	0x39, r0	; 57
     810:	0f 90       	pop	r0
     812:	08 be       	out	0x38, r0	; 56
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	08 b6       	in	r0, 0x38	; 56
     82a:	0f 92       	push	r0
     82c:	18 be       	out	0x38, r1	; 56
     82e:	09 b6       	in	r0, 0x39	; 57
     830:	0f 92       	push	r0
     832:	19 be       	out	0x39, r1	; 57
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	1b be       	out	0x3b, r1	; 59
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     852:	e0 91 f7 20 	lds	r30, 0x20F7	; 0x8020f7 <tc_tcc0_ovf_callback>
     856:	f0 91 f8 20 	lds	r31, 0x20F8	; 0x8020f8 <tc_tcc0_ovf_callback+0x1>
     85a:	30 97       	sbiw	r30, 0x00	; 0
     85c:	09 f0       	breq	.+2      	; 0x860 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     85e:	19 95       	eicall
	}
}
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0b be       	out	0x3b, r0	; 59
     87c:	0f 90       	pop	r0
     87e:	09 be       	out	0x39, r0	; 57
     880:	0f 90       	pop	r0
     882:	08 be       	out	0x38, r0	; 56
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	08 b6       	in	r0, 0x38	; 56
     89a:	0f 92       	push	r0
     89c:	18 be       	out	0x38, r1	; 56
     89e:	09 b6       	in	r0, 0x39	; 57
     8a0:	0f 92       	push	r0
     8a2:	19 be       	out	0x39, r1	; 57
     8a4:	0b b6       	in	r0, 0x3b	; 59
     8a6:	0f 92       	push	r0
     8a8:	1b be       	out	0x3b, r1	; 59
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     8c2:	e0 91 f5 20 	lds	r30, 0x20F5	; 0x8020f5 <tc_tcc0_err_callback>
     8c6:	f0 91 f6 20 	lds	r31, 0x20F6	; 0x8020f6 <tc_tcc0_err_callback+0x1>
     8ca:	30 97       	sbiw	r30, 0x00	; 0
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <__vector_15+0x42>
		tc_tcc0_err_callback();
     8ce:	19 95       	eicall
	}
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	bf 91       	pop	r27
     8d6:	af 91       	pop	r26
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	7f 91       	pop	r23
     8de:	6f 91       	pop	r22
     8e0:	5f 91       	pop	r21
     8e2:	4f 91       	pop	r20
     8e4:	3f 91       	pop	r19
     8e6:	2f 91       	pop	r18
     8e8:	0f 90       	pop	r0
     8ea:	0b be       	out	0x3b, r0	; 59
     8ec:	0f 90       	pop	r0
     8ee:	09 be       	out	0x39, r0	; 57
     8f0:	0f 90       	pop	r0
     8f2:	08 be       	out	0x38, r0	; 56
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	08 b6       	in	r0, 0x38	; 56
     90a:	0f 92       	push	r0
     90c:	18 be       	out	0x38, r1	; 56
     90e:	09 b6       	in	r0, 0x39	; 57
     910:	0f 92       	push	r0
     912:	19 be       	out	0x39, r1	; 57
     914:	0b b6       	in	r0, 0x3b	; 59
     916:	0f 92       	push	r0
     918:	1b be       	out	0x3b, r1	; 59
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     932:	e0 91 f3 20 	lds	r30, 0x20F3	; 0x8020f3 <tc_tcc0_cca_callback>
     936:	f0 91 f4 20 	lds	r31, 0x20F4	; 0x8020f4 <tc_tcc0_cca_callback+0x1>
     93a:	30 97       	sbiw	r30, 0x00	; 0
     93c:	09 f0       	breq	.+2      	; 0x940 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     93e:	19 95       	eicall
	}
}
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0b be       	out	0x3b, r0	; 59
     95c:	0f 90       	pop	r0
     95e:	09 be       	out	0x39, r0	; 57
     960:	0f 90       	pop	r0
     962:	08 be       	out	0x38, r0	; 56
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     96e:	1f 92       	push	r1
     970:	0f 92       	push	r0
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	0f 92       	push	r0
     976:	11 24       	eor	r1, r1
     978:	08 b6       	in	r0, 0x38	; 56
     97a:	0f 92       	push	r0
     97c:	18 be       	out	0x38, r1	; 56
     97e:	09 b6       	in	r0, 0x39	; 57
     980:	0f 92       	push	r0
     982:	19 be       	out	0x39, r1	; 57
     984:	0b b6       	in	r0, 0x3b	; 59
     986:	0f 92       	push	r0
     988:	1b be       	out	0x3b, r1	; 59
     98a:	2f 93       	push	r18
     98c:	3f 93       	push	r19
     98e:	4f 93       	push	r20
     990:	5f 93       	push	r21
     992:	6f 93       	push	r22
     994:	7f 93       	push	r23
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	ef 93       	push	r30
     9a0:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     9a2:	e0 91 f1 20 	lds	r30, 0x20F1	; 0x8020f1 <tc_tcc0_ccb_callback>
     9a6:	f0 91 f2 20 	lds	r31, 0x20F2	; 0x8020f2 <tc_tcc0_ccb_callback+0x1>
     9aa:	30 97       	sbiw	r30, 0x00	; 0
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     9ae:	19 95       	eicall
	}
}
     9b0:	ff 91       	pop	r31
     9b2:	ef 91       	pop	r30
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	0f 90       	pop	r0
     9ca:	0b be       	out	0x3b, r0	; 59
     9cc:	0f 90       	pop	r0
     9ce:	09 be       	out	0x39, r0	; 57
     9d0:	0f 90       	pop	r0
     9d2:	08 be       	out	0x38, r0	; 56
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	08 b6       	in	r0, 0x38	; 56
     9ea:	0f 92       	push	r0
     9ec:	18 be       	out	0x38, r1	; 56
     9ee:	09 b6       	in	r0, 0x39	; 57
     9f0:	0f 92       	push	r0
     9f2:	19 be       	out	0x39, r1	; 57
     9f4:	0b b6       	in	r0, 0x3b	; 59
     9f6:	0f 92       	push	r0
     9f8:	1b be       	out	0x3b, r1	; 59
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     a12:	e0 91 ef 20 	lds	r30, 0x20EF	; 0x8020ef <tc_tcc0_ccc_callback>
     a16:	f0 91 f0 20 	lds	r31, 0x20F0	; 0x8020f0 <tc_tcc0_ccc_callback+0x1>
     a1a:	30 97       	sbiw	r30, 0x00	; 0
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     a1e:	19 95       	eicall
	}
}
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0b be       	out	0x3b, r0	; 59
     a3c:	0f 90       	pop	r0
     a3e:	09 be       	out	0x39, r0	; 57
     a40:	0f 90       	pop	r0
     a42:	08 be       	out	0x38, r0	; 56
     a44:	0f 90       	pop	r0
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	08 b6       	in	r0, 0x38	; 56
     a5a:	0f 92       	push	r0
     a5c:	18 be       	out	0x38, r1	; 56
     a5e:	09 b6       	in	r0, 0x39	; 57
     a60:	0f 92       	push	r0
     a62:	19 be       	out	0x39, r1	; 57
     a64:	0b b6       	in	r0, 0x3b	; 59
     a66:	0f 92       	push	r0
     a68:	1b be       	out	0x3b, r1	; 59
     a6a:	2f 93       	push	r18
     a6c:	3f 93       	push	r19
     a6e:	4f 93       	push	r20
     a70:	5f 93       	push	r21
     a72:	6f 93       	push	r22
     a74:	7f 93       	push	r23
     a76:	8f 93       	push	r24
     a78:	9f 93       	push	r25
     a7a:	af 93       	push	r26
     a7c:	bf 93       	push	r27
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     a82:	e0 91 ed 20 	lds	r30, 0x20ED	; 0x8020ed <tc_tcc0_ccd_callback>
     a86:	f0 91 ee 20 	lds	r31, 0x20EE	; 0x8020ee <tc_tcc0_ccd_callback+0x1>
     a8a:	30 97       	sbiw	r30, 0x00	; 0
     a8c:	09 f0       	breq	.+2      	; 0xa90 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     a8e:	19 95       	eicall
	}
}
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	bf 91       	pop	r27
     a96:	af 91       	pop	r26
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	7f 91       	pop	r23
     a9e:	6f 91       	pop	r22
     aa0:	5f 91       	pop	r21
     aa2:	4f 91       	pop	r20
     aa4:	3f 91       	pop	r19
     aa6:	2f 91       	pop	r18
     aa8:	0f 90       	pop	r0
     aaa:	0b be       	out	0x3b, r0	; 59
     aac:	0f 90       	pop	r0
     aae:	09 be       	out	0x39, r0	; 57
     ab0:	0f 90       	pop	r0
     ab2:	08 be       	out	0x38, r0	; 56
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	08 b6       	in	r0, 0x38	; 56
     aca:	0f 92       	push	r0
     acc:	18 be       	out	0x38, r1	; 56
     ace:	09 b6       	in	r0, 0x39	; 57
     ad0:	0f 92       	push	r0
     ad2:	19 be       	out	0x39, r1	; 57
     ad4:	0b b6       	in	r0, 0x3b	; 59
     ad6:	0f 92       	push	r0
     ad8:	1b be       	out	0x3b, r1	; 59
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     af2:	e0 91 eb 20 	lds	r30, 0x20EB	; 0x8020eb <tc_tcc1_ovf_callback>
     af6:	f0 91 ec 20 	lds	r31, 0x20EC	; 0x8020ec <tc_tcc1_ovf_callback+0x1>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     afe:	19 95       	eicall
	}
}
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	bf 91       	pop	r27
     b06:	af 91       	pop	r26
     b08:	9f 91       	pop	r25
     b0a:	8f 91       	pop	r24
     b0c:	7f 91       	pop	r23
     b0e:	6f 91       	pop	r22
     b10:	5f 91       	pop	r21
     b12:	4f 91       	pop	r20
     b14:	3f 91       	pop	r19
     b16:	2f 91       	pop	r18
     b18:	0f 90       	pop	r0
     b1a:	0b be       	out	0x3b, r0	; 59
     b1c:	0f 90       	pop	r0
     b1e:	09 be       	out	0x39, r0	; 57
     b20:	0f 90       	pop	r0
     b22:	08 be       	out	0x38, r0	; 56
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	08 b6       	in	r0, 0x38	; 56
     b3a:	0f 92       	push	r0
     b3c:	18 be       	out	0x38, r1	; 56
     b3e:	09 b6       	in	r0, 0x39	; 57
     b40:	0f 92       	push	r0
     b42:	19 be       	out	0x39, r1	; 57
     b44:	0b b6       	in	r0, 0x3b	; 59
     b46:	0f 92       	push	r0
     b48:	1b be       	out	0x3b, r1	; 59
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     b62:	e0 91 e9 20 	lds	r30, 0x20E9	; 0x8020e9 <tc_tcc1_err_callback>
     b66:	f0 91 ea 20 	lds	r31, 0x20EA	; 0x8020ea <tc_tcc1_err_callback+0x1>
     b6a:	30 97       	sbiw	r30, 0x00	; 0
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__vector_21+0x42>
		tc_tcc1_err_callback();
     b6e:	19 95       	eicall
	}
}
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	0f 90       	pop	r0
     b8a:	0b be       	out	0x3b, r0	; 59
     b8c:	0f 90       	pop	r0
     b8e:	09 be       	out	0x39, r0	; 57
     b90:	0f 90       	pop	r0
     b92:	08 be       	out	0x38, r0	; 56
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	08 b6       	in	r0, 0x38	; 56
     baa:	0f 92       	push	r0
     bac:	18 be       	out	0x38, r1	; 56
     bae:	09 b6       	in	r0, 0x39	; 57
     bb0:	0f 92       	push	r0
     bb2:	19 be       	out	0x39, r1	; 57
     bb4:	0b b6       	in	r0, 0x3b	; 59
     bb6:	0f 92       	push	r0
     bb8:	1b be       	out	0x3b, r1	; 59
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     bd2:	e0 91 e7 20 	lds	r30, 0x20E7	; 0x8020e7 <tc_tcc1_cca_callback>
     bd6:	f0 91 e8 20 	lds	r31, 0x20E8	; 0x8020e8 <tc_tcc1_cca_callback+0x1>
     bda:	30 97       	sbiw	r30, 0x00	; 0
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     bde:	19 95       	eicall
	}
}
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0b be       	out	0x3b, r0	; 59
     bfc:	0f 90       	pop	r0
     bfe:	09 be       	out	0x39, r0	; 57
     c00:	0f 90       	pop	r0
     c02:	08 be       	out	0x38, r0	; 56
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	08 b6       	in	r0, 0x38	; 56
     c1a:	0f 92       	push	r0
     c1c:	18 be       	out	0x38, r1	; 56
     c1e:	09 b6       	in	r0, 0x39	; 57
     c20:	0f 92       	push	r0
     c22:	19 be       	out	0x39, r1	; 57
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	1b be       	out	0x3b, r1	; 59
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     c42:	e0 91 e5 20 	lds	r30, 0x20E5	; 0x8020e5 <tc_tcc1_ccb_callback>
     c46:	f0 91 e6 20 	lds	r31, 0x20E6	; 0x8020e6 <tc_tcc1_ccb_callback+0x1>
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     c4e:	19 95       	eicall
	}
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	09 be       	out	0x39, r0	; 57
     c70:	0f 90       	pop	r0
     c72:	08 be       	out	0x38, r0	; 56
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	08 b6       	in	r0, 0x38	; 56
     c8a:	0f 92       	push	r0
     c8c:	18 be       	out	0x38, r1	; 56
     c8e:	09 b6       	in	r0, 0x39	; 57
     c90:	0f 92       	push	r0
     c92:	19 be       	out	0x39, r1	; 57
     c94:	0b b6       	in	r0, 0x3b	; 59
     c96:	0f 92       	push	r0
     c98:	1b be       	out	0x3b, r1	; 59
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     cb2:	e0 91 e3 20 	lds	r30, 0x20E3	; 0x8020e3 <tc_tcd0_ovf_callback>
     cb6:	f0 91 e4 20 	lds	r31, 0x20E4	; 0x8020e4 <tc_tcd0_ovf_callback+0x1>
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     cbe:	19 95       	eicall
	}
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	09 be       	out	0x39, r0	; 57
     ce0:	0f 90       	pop	r0
     ce2:	08 be       	out	0x38, r0	; 56
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	08 b6       	in	r0, 0x38	; 56
     cfa:	0f 92       	push	r0
     cfc:	18 be       	out	0x38, r1	; 56
     cfe:	09 b6       	in	r0, 0x39	; 57
     d00:	0f 92       	push	r0
     d02:	19 be       	out	0x39, r1	; 57
     d04:	0b b6       	in	r0, 0x3b	; 59
     d06:	0f 92       	push	r0
     d08:	1b be       	out	0x3b, r1	; 59
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     d22:	e0 91 e1 20 	lds	r30, 0x20E1	; 0x8020e1 <tc_tcd0_err_callback>
     d26:	f0 91 e2 20 	lds	r31, 0x20E2	; 0x8020e2 <tc_tcd0_err_callback+0x1>
     d2a:	30 97       	sbiw	r30, 0x00	; 0
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_78+0x42>
		tc_tcd0_err_callback();
     d2e:	19 95       	eicall
	}
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	09 be       	out	0x39, r0	; 57
     d50:	0f 90       	pop	r0
     d52:	08 be       	out	0x38, r0	; 56
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	08 b6       	in	r0, 0x38	; 56
     d6a:	0f 92       	push	r0
     d6c:	18 be       	out	0x38, r1	; 56
     d6e:	09 b6       	in	r0, 0x39	; 57
     d70:	0f 92       	push	r0
     d72:	19 be       	out	0x39, r1	; 57
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	1b be       	out	0x3b, r1	; 59
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     d92:	e0 91 df 20 	lds	r30, 0x20DF	; 0x8020df <tc_tcd0_cca_callback>
     d96:	f0 91 e0 20 	lds	r31, 0x20E0	; 0x8020e0 <tc_tcd0_cca_callback+0x1>
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     d9e:	19 95       	eicall
	}
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	09 be       	out	0x39, r0	; 57
     dc0:	0f 90       	pop	r0
     dc2:	08 be       	out	0x38, r0	; 56
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	08 b6       	in	r0, 0x38	; 56
     dda:	0f 92       	push	r0
     ddc:	18 be       	out	0x38, r1	; 56
     dde:	09 b6       	in	r0, 0x39	; 57
     de0:	0f 92       	push	r0
     de2:	19 be       	out	0x39, r1	; 57
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	1b be       	out	0x3b, r1	; 59
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e02:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <tc_tcd0_ccb_callback>
     e06:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <tc_tcd0_ccb_callback+0x1>
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     e0e:	19 95       	eicall
	}
}
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	09 be       	out	0x39, r0	; 57
     e30:	0f 90       	pop	r0
     e32:	08 be       	out	0x38, r0	; 56
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	08 b6       	in	r0, 0x38	; 56
     e4a:	0f 92       	push	r0
     e4c:	18 be       	out	0x38, r1	; 56
     e4e:	09 b6       	in	r0, 0x39	; 57
     e50:	0f 92       	push	r0
     e52:	19 be       	out	0x39, r1	; 57
     e54:	0b b6       	in	r0, 0x3b	; 59
     e56:	0f 92       	push	r0
     e58:	1b be       	out	0x3b, r1	; 59
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     e72:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <tc_tcd0_ccc_callback>
     e76:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <tc_tcd0_ccc_callback+0x1>
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     e7e:	19 95       	eicall
	}
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	09 be       	out	0x39, r0	; 57
     ea0:	0f 90       	pop	r0
     ea2:	08 be       	out	0x38, r0	; 56
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	08 b6       	in	r0, 0x38	; 56
     eba:	0f 92       	push	r0
     ebc:	18 be       	out	0x38, r1	; 56
     ebe:	09 b6       	in	r0, 0x39	; 57
     ec0:	0f 92       	push	r0
     ec2:	19 be       	out	0x39, r1	; 57
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	1b be       	out	0x3b, r1	; 59
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     ee2:	e0 91 d9 20 	lds	r30, 0x20D9	; 0x8020d9 <tc_tcd0_ccd_callback>
     ee6:	f0 91 da 20 	lds	r31, 0x20DA	; 0x8020da <tc_tcd0_ccd_callback+0x1>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     eee:	19 95       	eicall
	}
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	09 be       	out	0x39, r0	; 57
     f10:	0f 90       	pop	r0
     f12:	08 be       	out	0x38, r0	; 56
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	08 b6       	in	r0, 0x38	; 56
     f2a:	0f 92       	push	r0
     f2c:	18 be       	out	0x38, r1	; 56
     f2e:	09 b6       	in	r0, 0x39	; 57
     f30:	0f 92       	push	r0
     f32:	19 be       	out	0x39, r1	; 57
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	1b be       	out	0x3b, r1	; 59
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     f52:	e0 91 d7 20 	lds	r30, 0x20D7	; 0x8020d7 <tc_tcd1_ovf_callback>
     f56:	f0 91 d8 20 	lds	r31, 0x20D8	; 0x8020d8 <tc_tcd1_ovf_callback+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     f5e:	19 95       	eicall
	}
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	09 be       	out	0x39, r0	; 57
     f80:	0f 90       	pop	r0
     f82:	08 be       	out	0x38, r0	; 56
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	08 b6       	in	r0, 0x38	; 56
     f9a:	0f 92       	push	r0
     f9c:	18 be       	out	0x38, r1	; 56
     f9e:	09 b6       	in	r0, 0x39	; 57
     fa0:	0f 92       	push	r0
     fa2:	19 be       	out	0x39, r1	; 57
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	1b be       	out	0x3b, r1	; 59
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     fc2:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <tc_tcd1_err_callback>
     fc6:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <tc_tcd1_err_callback+0x1>
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__vector_84+0x42>
		tc_tcd1_err_callback();
     fce:	19 95       	eicall
	}
}
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	09 be       	out	0x39, r0	; 57
     ff0:	0f 90       	pop	r0
     ff2:	08 be       	out	0x38, r0	; 56
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	08 b6       	in	r0, 0x38	; 56
    100a:	0f 92       	push	r0
    100c:	18 be       	out	0x38, r1	; 56
    100e:	09 b6       	in	r0, 0x39	; 57
    1010:	0f 92       	push	r0
    1012:	19 be       	out	0x39, r1	; 57
    1014:	0b b6       	in	r0, 0x3b	; 59
    1016:	0f 92       	push	r0
    1018:	1b be       	out	0x3b, r1	; 59
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1032:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <tc_tcd1_cca_callback>
    1036:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <tc_tcd1_cca_callback+0x1>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    103e:	19 95       	eicall
	}
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0b be       	out	0x3b, r0	; 59
    105c:	0f 90       	pop	r0
    105e:	09 be       	out	0x39, r0	; 57
    1060:	0f 90       	pop	r0
    1062:	08 be       	out	0x38, r0	; 56
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	08 b6       	in	r0, 0x38	; 56
    107a:	0f 92       	push	r0
    107c:	18 be       	out	0x38, r1	; 56
    107e:	09 b6       	in	r0, 0x39	; 57
    1080:	0f 92       	push	r0
    1082:	19 be       	out	0x39, r1	; 57
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	1b be       	out	0x3b, r1	; 59
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    10a2:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <tc_tcd1_ccb_callback>
    10a6:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <tc_tcd1_ccb_callback+0x1>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    10ae:	19 95       	eicall
	}
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	09 be       	out	0x39, r0	; 57
    10d0:	0f 90       	pop	r0
    10d2:	08 be       	out	0x38, r0	; 56
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	08 b6       	in	r0, 0x38	; 56
    10ea:	0f 92       	push	r0
    10ec:	18 be       	out	0x38, r1	; 56
    10ee:	09 b6       	in	r0, 0x39	; 57
    10f0:	0f 92       	push	r0
    10f2:	19 be       	out	0x39, r1	; 57
    10f4:	0b b6       	in	r0, 0x3b	; 59
    10f6:	0f 92       	push	r0
    10f8:	1b be       	out	0x3b, r1	; 59
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1112:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <tc_tce0_err_callback>
    1116:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <tc_tce0_err_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_48+0x42>
		tc_tce0_err_callback();
    111e:	19 95       	eicall
	}
}
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	09 be       	out	0x39, r0	; 57
    1140:	0f 90       	pop	r0
    1142:	08 be       	out	0x38, r0	; 56
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	08 b6       	in	r0, 0x38	; 56
    115a:	0f 92       	push	r0
    115c:	18 be       	out	0x38, r1	; 56
    115e:	09 b6       	in	r0, 0x39	; 57
    1160:	0f 92       	push	r0
    1162:	19 be       	out	0x39, r1	; 57
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	1b be       	out	0x3b, r1	; 59
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1182:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <tc_tce0_cca_callback>
    1186:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <tc_tce0_cca_callback+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_49+0x42>
		tc_tce0_cca_callback();
    118e:	19 95       	eicall
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    11f2:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <tc_tce0_ccb_callback>
    11f6:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <tc_tce0_ccb_callback+0x1>
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    11fe:	19 95       	eicall
	}
}
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0b be       	out	0x3b, r0	; 59
    121c:	0f 90       	pop	r0
    121e:	09 be       	out	0x39, r0	; 57
    1220:	0f 90       	pop	r0
    1222:	08 be       	out	0x38, r0	; 56
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	08 b6       	in	r0, 0x38	; 56
    123a:	0f 92       	push	r0
    123c:	18 be       	out	0x38, r1	; 56
    123e:	09 b6       	in	r0, 0x39	; 57
    1240:	0f 92       	push	r0
    1242:	19 be       	out	0x39, r1	; 57
    1244:	0b b6       	in	r0, 0x3b	; 59
    1246:	0f 92       	push	r0
    1248:	1b be       	out	0x3b, r1	; 59
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1262:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <tc_tce0_ccc_callback>
    1266:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <tc_tce0_ccc_callback+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    126e:	19 95       	eicall
	}
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	09 be       	out	0x39, r0	; 57
    1290:	0f 90       	pop	r0
    1292:	08 be       	out	0x38, r0	; 56
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	08 b6       	in	r0, 0x38	; 56
    12aa:	0f 92       	push	r0
    12ac:	18 be       	out	0x38, r1	; 56
    12ae:	09 b6       	in	r0, 0x39	; 57
    12b0:	0f 92       	push	r0
    12b2:	19 be       	out	0x39, r1	; 57
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	1b be       	out	0x3b, r1	; 59
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    12d2:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <tc_tce0_ccd_callback>
    12d6:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <tc_tce0_ccd_callback+0x1>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    12de:	19 95       	eicall
	}
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0b be       	out	0x3b, r0	; 59
    12fc:	0f 90       	pop	r0
    12fe:	09 be       	out	0x39, r0	; 57
    1300:	0f 90       	pop	r0
    1302:	08 be       	out	0x38, r0	; 56
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1312:	e0 91 f9 20 	lds	r30, 0x20F9	; 0x8020f9 <transfer>
    1316:	f0 91 fa 20 	lds	r31, 0x20FA	; 0x8020fa <transfer+0x1>
    131a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    131c:	83 ff       	sbrs	r24, 3
    131e:	08 c0       	rjmp	.+16     	; 0x1330 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1320:	88 60       	ori	r24, 0x08	; 8
    1322:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1328:	86 ef       	ldi	r24, 0xF6	; 246
    132a:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <transfer+0xa>
    132e:	83 c0       	rjmp	.+262    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1330:	98 2f       	mov	r25, r24
    1332:	94 71       	andi	r25, 0x14	; 20
    1334:	31 f0       	breq	.+12     	; 0x1342 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <transfer+0xa>
    1340:	7a c0       	rjmp	.+244    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1342:	86 ff       	sbrs	r24, 6
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1346:	c9 ef       	ldi	r28, 0xF9	; 249
    1348:	d0 e2       	ldi	r29, 0x20	; 32
    134a:	aa 81       	ldd	r26, Y+2	; 0x02
    134c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	14 96       	adiw	r26, 0x04	; 4
    1354:	2d 91       	ld	r18, X+
    1356:	3c 91       	ld	r19, X
    1358:	15 97       	sbiw	r26, 0x05	; 5
    135a:	82 17       	cp	r24, r18
    135c:	93 07       	cpc	r25, r19
    135e:	6c f4       	brge	.+26     	; 0x137a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1360:	9c 01       	movw	r18, r24
    1362:	2f 5f       	subi	r18, 0xFF	; 255
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	20 93 fd 20 	sts	0x20FD, r18	; 0x8020fd <transfer+0x4>
    136a:	30 93 fe 20 	sts	0x20FE, r19	; 0x8020fe <transfer+0x5>
    136e:	a8 0f       	add	r26, r24
    1370:	b9 1f       	adc	r27, r25
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	8c 91       	ld	r24, X
    1376:	87 83       	std	Z+7, r24	; 0x07
    1378:	5e c0       	rjmp	.+188    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    137a:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <transfer+0x6>
    137e:	90 91 00 21 	lds	r25, 0x2100	; 0x802100 <transfer+0x7>
    1382:	18 96       	adiw	r26, 0x08	; 8
    1384:	2d 91       	ld	r18, X+
    1386:	3c 91       	ld	r19, X
    1388:	19 97       	sbiw	r26, 0x09	; 9
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	c8 f4       	brcc	.+50     	; 0x13c2 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1390:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <transfer+0x8>
    1394:	22 23       	and	r18, r18
    1396:	21 f0       	breq	.+8      	; 0x13a0 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1398:	86 81       	ldd	r24, Z+6	; 0x06
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	86 83       	std	Z+6, r24	; 0x06
    139e:	4b c0       	rjmp	.+150    	; 0x1436 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2d 91       	ld	r18, X+
    13a4:	3c 91       	ld	r19, X
    13a6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    13a8:	ac 01       	movw	r20, r24
    13aa:	4f 5f       	subi	r20, 0xFF	; 255
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	40 93 ff 20 	sts	0x20FF, r20	; 0x8020ff <transfer+0x6>
    13b2:	50 93 00 21 	sts	0x2100, r21	; 0x802100 <transfer+0x7>
    13b6:	d9 01       	movw	r26, r18
    13b8:	a8 0f       	add	r26, r24
    13ba:	b9 1f       	adc	r27, r25
    13bc:	8c 91       	ld	r24, X
    13be:	87 83       	std	Z+7, r24	; 0x07
    13c0:	3a c0       	rjmp	.+116    	; 0x1436 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    13c6:	10 92 03 21 	sts	0x2103, r1	; 0x802103 <transfer+0xa>
    13ca:	35 c0       	rjmp	.+106    	; 0x1436 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    13cc:	88 23       	and	r24, r24
    13ce:	84 f5       	brge	.+96     	; 0x1430 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    13d0:	a9 ef       	ldi	r26, 0xF9	; 249
    13d2:	b0 e2       	ldi	r27, 0x20	; 32
    13d4:	12 96       	adiw	r26, 0x02	; 2
    13d6:	cd 91       	ld	r28, X+
    13d8:	dc 91       	ld	r29, X
    13da:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    13dc:	16 96       	adiw	r26, 0x06	; 6
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	17 97       	sbiw	r26, 0x07	; 7
    13e4:	28 85       	ldd	r18, Y+8	; 0x08
    13e6:	39 85       	ldd	r19, Y+9	; 0x09
    13e8:	82 17       	cp	r24, r18
    13ea:	93 07       	cpc	r25, r19
    13ec:	d8 f4       	brcc	.+54     	; 0x1424 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    13ee:	6e 81       	ldd	r22, Y+6	; 0x06
    13f0:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    13f2:	9c 01       	movw	r18, r24
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	20 93 ff 20 	sts	0x20FF, r18	; 0x8020ff <transfer+0x6>
    13fc:	30 93 00 21 	sts	0x2100, r19	; 0x802100 <transfer+0x7>
    1400:	47 81       	ldd	r20, Z+7	; 0x07
    1402:	db 01       	movw	r26, r22
    1404:	a8 0f       	add	r26, r24
    1406:	b9 1f       	adc	r27, r25
    1408:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    140a:	88 85       	ldd	r24, Y+8	; 0x08
    140c:	99 85       	ldd	r25, Y+9	; 0x09
    140e:	28 17       	cp	r18, r24
    1410:	39 07       	cpc	r19, r25
    1412:	18 f4       	brcc	.+6      	; 0x141a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	83 83       	std	Z+3, r24	; 0x03
    1418:	0e c0       	rjmp	.+28     	; 0x1436 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    141a:	87 e0       	ldi	r24, 0x07	; 7
    141c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    141e:	10 92 03 21 	sts	0x2103, r1	; 0x802103 <transfer+0xa>
    1422:	09 c0       	rjmp	.+18     	; 0x1436 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1428:	89 ef       	ldi	r24, 0xF9	; 249
    142a:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <transfer+0xa>
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1430:	8b ef       	ldi	r24, 0xFB	; 251
    1432:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <transfer+0xa>
	}
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	08 b6       	in	r0, 0x38	; 56
    1448:	0f 92       	push	r0
    144a:	18 be       	out	0x38, r1	; 56
    144c:	09 b6       	in	r0, 0x39	; 57
    144e:	0f 92       	push	r0
    1450:	19 be       	out	0x39, r1	; 57
    1452:	0b b6       	in	r0, 0x3b	; 59
    1454:	0f 92       	push	r0
    1456:	1b be       	out	0x3b, r1	; 59
    1458:	2f 93       	push	r18
    145a:	3f 93       	push	r19
    145c:	4f 93       	push	r20
    145e:	5f 93       	push	r21
    1460:	6f 93       	push	r22
    1462:	7f 93       	push	r23
    1464:	8f 93       	push	r24
    1466:	9f 93       	push	r25
    1468:	af 93       	push	r26
    146a:	bf 93       	push	r27
    146c:	ef 93       	push	r30
    146e:	ff 93       	push	r31
    1470:	4e df       	rcall	.-356    	; 0x130e <twim_interrupt_handler>
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0b be       	out	0x3b, r0	; 59
    148e:	0f 90       	pop	r0
    1490:	09 be       	out	0x39, r0	; 57
    1492:	0f 90       	pop	r0
    1494:	08 be       	out	0x38, r0	; 56
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	08 b6       	in	r0, 0x38	; 56
    14ac:	0f 92       	push	r0
    14ae:	18 be       	out	0x38, r1	; 56
    14b0:	09 b6       	in	r0, 0x39	; 57
    14b2:	0f 92       	push	r0
    14b4:	19 be       	out	0x39, r1	; 57
    14b6:	0b b6       	in	r0, 0x3b	; 59
    14b8:	0f 92       	push	r0
    14ba:	1b be       	out	0x3b, r1	; 59
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
    14d4:	1c df       	rcall	.-456    	; 0x130e <twim_interrupt_handler>
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0b be       	out	0x3b, r0	; 59
    14f2:	0f 90       	pop	r0
    14f4:	09 be       	out	0x39, r0	; 57
    14f6:	0f 90       	pop	r0
    14f8:	08 be       	out	0x38, r0	; 56
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1504:	fc 01       	movw	r30, r24
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	95 ff       	sbrs	r25, 5
    150a:	fd cf       	rjmp	.-6      	; 0x1506 <usart_putchar+0x2>
    150c:	60 83       	st	Z, r22
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	08 95       	ret

00001514 <usart_getchar>:
    1514:	fc 01       	movw	r30, r24
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	99 23       	and	r25, r25
    151a:	ec f7       	brge	.-6      	; 0x1516 <usart_getchar+0x2>
    151c:	80 81       	ld	r24, Z
    151e:	08 95       	ret

00001520 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1520:	4f 92       	push	r4
    1522:	5f 92       	push	r5
    1524:	6f 92       	push	r6
    1526:	7f 92       	push	r7
    1528:	8f 92       	push	r8
    152a:	9f 92       	push	r9
    152c:	af 92       	push	r10
    152e:	bf 92       	push	r11
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	7c 01       	movw	r14, r24
    153c:	4a 01       	movw	r8, r20
    153e:	5b 01       	movw	r10, r22
    1540:	28 01       	movw	r4, r16
    1542:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1544:	fc 01       	movw	r30, r24
    1546:	84 81       	ldd	r24, Z+4	; 0x04
    1548:	82 ff       	sbrs	r24, 2
    154a:	16 c0       	rjmp	.+44     	; 0x1578 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    154c:	d9 01       	movw	r26, r18
    154e:	c8 01       	movw	r24, r16
    1550:	68 94       	set
    1552:	12 f8       	bld	r1, 2
    1554:	b6 95       	lsr	r27
    1556:	a7 95       	ror	r26
    1558:	97 95       	ror	r25
    155a:	87 95       	ror	r24
    155c:	16 94       	lsr	r1
    155e:	d1 f7       	brne	.-12     	; 0x1554 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1560:	b9 01       	movw	r22, r18
    1562:	a8 01       	movw	r20, r16
    1564:	03 2e       	mov	r0, r19
    1566:	36 e1       	ldi	r19, 0x16	; 22
    1568:	76 95       	lsr	r23
    156a:	67 95       	ror	r22
    156c:	57 95       	ror	r21
    156e:	47 95       	ror	r20
    1570:	3a 95       	dec	r19
    1572:	d1 f7       	brne	.-12     	; 0x1568 <usart_set_baudrate+0x48>
    1574:	30 2d       	mov	r19, r0
    1576:	15 c0       	rjmp	.+42     	; 0x15a2 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1578:	d9 01       	movw	r26, r18
    157a:	c8 01       	movw	r24, r16
    157c:	68 94       	set
    157e:	13 f8       	bld	r1, 3
    1580:	b6 95       	lsr	r27
    1582:	a7 95       	ror	r26
    1584:	97 95       	ror	r25
    1586:	87 95       	ror	r24
    1588:	16 94       	lsr	r1
    158a:	d1 f7       	brne	.-12     	; 0x1580 <usart_set_baudrate+0x60>
		min_rate /= 2;
    158c:	b9 01       	movw	r22, r18
    158e:	a8 01       	movw	r20, r16
    1590:	03 2e       	mov	r0, r19
    1592:	37 e1       	ldi	r19, 0x17	; 23
    1594:	76 95       	lsr	r23
    1596:	67 95       	ror	r22
    1598:	57 95       	ror	r21
    159a:	47 95       	ror	r20
    159c:	3a 95       	dec	r19
    159e:	d1 f7       	brne	.-12     	; 0x1594 <usart_set_baudrate+0x74>
    15a0:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    15a2:	88 15       	cp	r24, r8
    15a4:	99 05       	cpc	r25, r9
    15a6:	aa 05       	cpc	r26, r10
    15a8:	bb 05       	cpc	r27, r11
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <usart_set_baudrate+0x8e>
    15ac:	a6 c0       	rjmp	.+332    	; 0x16fa <usart_set_baudrate+0x1da>
    15ae:	84 16       	cp	r8, r20
    15b0:	95 06       	cpc	r9, r21
    15b2:	a6 06       	cpc	r10, r22
    15b4:	b7 06       	cpc	r11, r23
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <usart_set_baudrate+0x9a>
    15b8:	a2 c0       	rjmp	.+324    	; 0x16fe <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    15ba:	f7 01       	movw	r30, r14
    15bc:	84 81       	ldd	r24, Z+4	; 0x04
    15be:	82 fd       	sbrc	r24, 2
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <usart_set_baudrate+0xaa>
		baud *= 2;
    15c2:	88 0c       	add	r8, r8
    15c4:	99 1c       	adc	r9, r9
    15c6:	aa 1c       	adc	r10, r10
    15c8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    15ca:	c3 01       	movw	r24, r6
    15cc:	b2 01       	movw	r22, r4
    15ce:	a5 01       	movw	r20, r10
    15d0:	94 01       	movw	r18, r8
    15d2:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    15d6:	2f 3f       	cpi	r18, 0xFF	; 255
    15d8:	31 05       	cpc	r19, r1
    15da:	41 05       	cpc	r20, r1
    15dc:	51 05       	cpc	r21, r1
    15de:	08 f4       	brcc	.+2      	; 0x15e2 <usart_set_baudrate+0xc2>
    15e0:	90 c0       	rjmp	.+288    	; 0x1702 <usart_set_baudrate+0x1e2>
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a0 e0       	ldi	r26, 0x00	; 0
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	c9 ef       	ldi	r28, 0xF9	; 249
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <usart_set_baudrate+0xd8>
    15ee:	28 17       	cp	r18, r24
    15f0:	39 07       	cpc	r19, r25
    15f2:	4a 07       	cpc	r20, r26
    15f4:	5b 07       	cpc	r21, r27
    15f6:	58 f0       	brcs	.+22     	; 0x160e <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	aa 1f       	adc	r26, r26
    15fe:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1600:	cd 3f       	cpi	r28, 0xFD	; 253
    1602:	0c f4       	brge	.+2      	; 0x1606 <usart_set_baudrate+0xe6>
			limit |= 1;
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1608:	c7 30       	cpi	r28, 0x07	; 7
    160a:	89 f7       	brne	.-30     	; 0x15ee <usart_set_baudrate+0xce>
    160c:	4f c0       	rjmp	.+158    	; 0x16ac <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    160e:	cc 23       	and	r28, r28
    1610:	0c f0       	brlt	.+2      	; 0x1614 <usart_set_baudrate+0xf4>
    1612:	4c c0       	rjmp	.+152    	; 0x16ac <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1614:	d5 01       	movw	r26, r10
    1616:	c4 01       	movw	r24, r8
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	aa 1f       	adc	r26, r26
    161e:	bb 1f       	adc	r27, r27
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	aa 1f       	adc	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	48 1a       	sub	r4, r24
    1632:	59 0a       	sbc	r5, r25
    1634:	6a 0a       	sbc	r6, r26
    1636:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1638:	ce 3f       	cpi	r28, 0xFE	; 254
    163a:	f4 f4       	brge	.+60     	; 0x1678 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    163c:	8d ef       	ldi	r24, 0xFD	; 253
    163e:	9f ef       	ldi	r25, 0xFF	; 255
    1640:	8c 1b       	sub	r24, r28
    1642:	91 09       	sbc	r25, r1
    1644:	c7 fd       	sbrc	r28, 7
    1646:	93 95       	inc	r25
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <usart_set_baudrate+0x132>
    164a:	44 0c       	add	r4, r4
    164c:	55 1c       	adc	r5, r5
    164e:	66 1c       	adc	r6, r6
    1650:	77 1c       	adc	r7, r7
    1652:	8a 95       	dec	r24
    1654:	d2 f7       	brpl	.-12     	; 0x164a <usart_set_baudrate+0x12a>
    1656:	d5 01       	movw	r26, r10
    1658:	c4 01       	movw	r24, r8
    165a:	b6 95       	lsr	r27
    165c:	a7 95       	ror	r26
    165e:	97 95       	ror	r25
    1660:	87 95       	ror	r24
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	64 0d       	add	r22, r4
    1668:	75 1d       	adc	r23, r5
    166a:	86 1d       	adc	r24, r6
    166c:	97 1d       	adc	r25, r7
    166e:	a5 01       	movw	r20, r10
    1670:	94 01       	movw	r18, r8
    1672:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodsi4>
    1676:	37 c0       	rjmp	.+110    	; 0x16e6 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	8c 0f       	add	r24, r28
    167c:	a5 01       	movw	r20, r10
    167e:	94 01       	movw	r18, r8
    1680:	04 c0       	rjmp	.+8      	; 0x168a <usart_set_baudrate+0x16a>
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	44 1f       	adc	r20, r20
    1688:	55 1f       	adc	r21, r21
    168a:	8a 95       	dec	r24
    168c:	d2 f7       	brpl	.-12     	; 0x1682 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    168e:	da 01       	movw	r26, r20
    1690:	c9 01       	movw	r24, r18
    1692:	b6 95       	lsr	r27
    1694:	a7 95       	ror	r26
    1696:	97 95       	ror	r25
    1698:	87 95       	ror	r24
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	64 0d       	add	r22, r4
    16a0:	75 1d       	adc	r23, r5
    16a2:	86 1d       	adc	r24, r6
    16a4:	97 1d       	adc	r25, r7
    16a6:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodsi4>
    16aa:	1d c0       	rjmp	.+58     	; 0x16e6 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	8c 0f       	add	r24, r28
    16b0:	a5 01       	movw	r20, r10
    16b2:	94 01       	movw	r18, r8
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <usart_set_baudrate+0x19e>
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	44 1f       	adc	r20, r20
    16bc:	55 1f       	adc	r21, r21
    16be:	8a 95       	dec	r24
    16c0:	d2 f7       	brpl	.-12     	; 0x16b6 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    16c2:	da 01       	movw	r26, r20
    16c4:	c9 01       	movw	r24, r18
    16c6:	b6 95       	lsr	r27
    16c8:	a7 95       	ror	r26
    16ca:	97 95       	ror	r25
    16cc:	87 95       	ror	r24
    16ce:	bc 01       	movw	r22, r24
    16d0:	cd 01       	movw	r24, r26
    16d2:	64 0d       	add	r22, r4
    16d4:	75 1d       	adc	r23, r5
    16d6:	86 1d       	adc	r24, r6
    16d8:	97 1d       	adc	r25, r7
    16da:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodsi4>
    16de:	21 50       	subi	r18, 0x01	; 1
    16e0:	31 09       	sbc	r19, r1
    16e2:	41 09       	sbc	r20, r1
    16e4:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    16e6:	83 2f       	mov	r24, r19
    16e8:	8f 70       	andi	r24, 0x0F	; 15
    16ea:	c2 95       	swap	r28
    16ec:	c0 7f       	andi	r28, 0xF0	; 240
    16ee:	c8 2b       	or	r28, r24
    16f0:	f7 01       	movw	r30, r14
    16f2:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    16f4:	26 83       	std	Z+6, r18	; 0x06

	return true;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	18 c0       	rjmp	.+48     	; 0x172a <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	16 c0       	rjmp	.+44     	; 0x172a <usart_set_baudrate+0x20a>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	14 c0       	rjmp	.+40     	; 0x172a <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1702:	d5 01       	movw	r26, r10
    1704:	c4 01       	movw	r24, r8
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	aa 1f       	adc	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	aa 1f       	adc	r26, r26
    1714:	bb 1f       	adc	r27, r27
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	aa 1f       	adc	r26, r26
    171c:	bb 1f       	adc	r27, r27
    171e:	48 1a       	sub	r4, r24
    1720:	59 0a       	sbc	r5, r25
    1722:	6a 0a       	sbc	r6, r26
    1724:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1726:	c9 ef       	ldi	r28, 0xF9	; 249
    1728:	89 cf       	rjmp	.-238    	; 0x163c <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	bf 90       	pop	r11
    1736:	af 90       	pop	r10
    1738:	9f 90       	pop	r9
    173a:	8f 90       	pop	r8
    173c:	7f 90       	pop	r7
    173e:	6f 90       	pop	r6
    1740:	5f 90       	pop	r5
    1742:	4f 90       	pop	r4
    1744:	08 95       	ret

00001746 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	ec 01       	movw	r28, r24
    1750:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	09 f4       	brne	.+2      	; 0x1758 <usart_init_rs232+0x12>
    1756:	be c0       	rjmp	.+380    	; 0x18d4 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1758:	80 3c       	cpi	r24, 0xC0	; 192
    175a:	91 05       	cpc	r25, r1
    175c:	21 f4       	brne	.+8      	; 0x1766 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    175e:	60 e1       	ldi	r22, 0x10	; 16
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	e8 d3       	rcall	.+2000   	; 0x1f34 <sysclk_enable_module>
    1764:	b7 c0       	rjmp	.+366    	; 0x18d4 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1766:	c1 15       	cp	r28, r1
    1768:	84 e0       	ldi	r24, 0x04	; 4
    176a:	d8 07       	cpc	r29, r24
    176c:	21 f4       	brne	.+8      	; 0x1776 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    176e:	64 e0       	ldi	r22, 0x04	; 4
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	e0 d3       	rcall	.+1984   	; 0x1f34 <sysclk_enable_module>
    1774:	af c0       	rjmp	.+350    	; 0x18d4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1776:	c0 38       	cpi	r28, 0x80	; 128
    1778:	e1 e0       	ldi	r30, 0x01	; 1
    177a:	de 07       	cpc	r29, r30
    177c:	21 f4       	brne	.+8      	; 0x1786 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    177e:	62 e0       	ldi	r22, 0x02	; 2
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	d8 d3       	rcall	.+1968   	; 0x1f34 <sysclk_enable_module>
    1784:	a7 c0       	rjmp	.+334    	; 0x18d4 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1786:	c1 15       	cp	r28, r1
    1788:	f1 e0       	ldi	r31, 0x01	; 1
    178a:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    178c:	21 f4       	brne	.+8      	; 0x1796 <usart_init_rs232+0x50>
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	d0 d3       	rcall	.+1952   	; 0x1f34 <sysclk_enable_module>
    1794:	9f c0       	rjmp	.+318    	; 0x18d4 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1796:	c0 38       	cpi	r28, 0x80	; 128
    1798:	83 e0       	ldi	r24, 0x03	; 3
    179a:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    179c:	21 f4       	brne	.+8      	; 0x17a6 <usart_init_rs232+0x60>
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	c8 d3       	rcall	.+1936   	; 0x1f34 <sysclk_enable_module>
    17a4:	97 c0       	rjmp	.+302    	; 0x18d4 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    17a6:	c1 15       	cp	r28, r1
    17a8:	e2 e0       	ldi	r30, 0x02	; 2
    17aa:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <usart_init_rs232+0x70>
    17ae:	62 e0       	ldi	r22, 0x02	; 2
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	c0 d3       	rcall	.+1920   	; 0x1f34 <sysclk_enable_module>
    17b4:	8f c0       	rjmp	.+286    	; 0x18d4 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    17b6:	c0 32       	cpi	r28, 0x20	; 32
    17b8:	f3 e0       	ldi	r31, 0x03	; 3
    17ba:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    17bc:	21 f4       	brne	.+8      	; 0x17c6 <usart_init_rs232+0x80>
    17be:	64 e0       	ldi	r22, 0x04	; 4
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	b8 d3       	rcall	.+1904   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    17c4:	87 c0       	rjmp	.+270    	; 0x18d4 <usart_init_rs232+0x18e>
    17c6:	c1 15       	cp	r28, r1
    17c8:	88 e0       	ldi	r24, 0x08	; 8
    17ca:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    17cc:	21 f4       	brne	.+8      	; 0x17d6 <usart_init_rs232+0x90>
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	83 e0       	ldi	r24, 0x03	; 3
    17d2:	b0 d3       	rcall	.+1888   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    17d4:	7f c0       	rjmp	.+254    	; 0x18d4 <usart_init_rs232+0x18e>
    17d6:	c1 15       	cp	r28, r1
    17d8:	e9 e0       	ldi	r30, 0x09	; 9
    17da:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    17dc:	21 f4       	brne	.+8      	; 0x17e6 <usart_init_rs232+0xa0>
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	84 e0       	ldi	r24, 0x04	; 4
    17e2:	a8 d3       	rcall	.+1872   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    17e4:	77 c0       	rjmp	.+238    	; 0x18d4 <usart_init_rs232+0x18e>
    17e6:	c1 15       	cp	r28, r1
    17e8:	fa e0       	ldi	r31, 0x0A	; 10
    17ea:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    17ec:	21 f4       	brne	.+8      	; 0x17f6 <usart_init_rs232+0xb0>
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	85 e0       	ldi	r24, 0x05	; 5
    17f2:	a0 d3       	rcall	.+1856   	; 0x1f34 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    17f4:	6f c0       	rjmp	.+222    	; 0x18d4 <usart_init_rs232+0x18e>
    17f6:	c0 34       	cpi	r28, 0x40	; 64
    17f8:	88 e0       	ldi	r24, 0x08	; 8
    17fa:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    17fc:	21 f4       	brne	.+8      	; 0x1806 <usart_init_rs232+0xc0>
    17fe:	62 e0       	ldi	r22, 0x02	; 2
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	98 d3       	rcall	.+1840   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1804:	67 c0       	rjmp	.+206    	; 0x18d4 <usart_init_rs232+0x18e>
    1806:	c0 34       	cpi	r28, 0x40	; 64
    1808:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    180a:	de 07       	cpc	r29, r30
    180c:	21 f4       	brne	.+8      	; 0x1816 <usart_init_rs232+0xd0>
    180e:	62 e0       	ldi	r22, 0x02	; 2
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	90 d3       	rcall	.+1824   	; 0x1f34 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1814:	5f c0       	rjmp	.+190    	; 0x18d4 <usart_init_rs232+0x18e>
    1816:	c0 39       	cpi	r28, 0x90	; 144
    1818:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    181a:	df 07       	cpc	r29, r31
    181c:	21 f4       	brne	.+8      	; 0x1826 <usart_init_rs232+0xe0>
    181e:	64 e0       	ldi	r22, 0x04	; 4
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	88 d3       	rcall	.+1808   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1824:	57 c0       	rjmp	.+174    	; 0x18d4 <usart_init_rs232+0x18e>
    1826:	c0 39       	cpi	r28, 0x90	; 144
    1828:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    182a:	d8 07       	cpc	r29, r24
    182c:	21 f4       	brne	.+8      	; 0x1836 <usart_init_rs232+0xf0>
    182e:	64 e0       	ldi	r22, 0x04	; 4
    1830:	84 e0       	ldi	r24, 0x04	; 4
    1832:	80 d3       	rcall	.+1792   	; 0x1f34 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1834:	4f c0       	rjmp	.+158    	; 0x18d4 <usart_init_rs232+0x18e>
    1836:	c0 39       	cpi	r28, 0x90	; 144
    1838:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    183a:	de 07       	cpc	r29, r30
    183c:	21 f4       	brne	.+8      	; 0x1846 <usart_init_rs232+0x100>
    183e:	64 e0       	ldi	r22, 0x04	; 4
    1840:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1842:	78 d3       	rcall	.+1776   	; 0x1f34 <sysclk_enable_module>
    1844:	47 c0       	rjmp	.+142    	; 0x18d4 <usart_init_rs232+0x18e>
    1846:	c0 3c       	cpi	r28, 0xC0	; 192
    1848:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    184a:	df 07       	cpc	r29, r31
    184c:	21 f4       	brne	.+8      	; 0x1856 <usart_init_rs232+0x110>
    184e:	68 e0       	ldi	r22, 0x08	; 8
    1850:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1852:	70 d3       	rcall	.+1760   	; 0x1f34 <sysclk_enable_module>
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <usart_init_rs232+0x18e>
    1856:	c0 3c       	cpi	r28, 0xC0	; 192
    1858:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    185a:	d8 07       	cpc	r29, r24
    185c:	21 f4       	brne	.+8      	; 0x1866 <usart_init_rs232+0x120>
    185e:	68 e0       	ldi	r22, 0x08	; 8
    1860:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1862:	68 d3       	rcall	.+1744   	; 0x1f34 <sysclk_enable_module>
    1864:	37 c0       	rjmp	.+110    	; 0x18d4 <usart_init_rs232+0x18e>
    1866:	c0 3a       	cpi	r28, 0xA0	; 160
    1868:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    186a:	de 07       	cpc	r29, r30
    186c:	21 f4       	brne	.+8      	; 0x1876 <usart_init_rs232+0x130>
    186e:	60 e1       	ldi	r22, 0x10	; 16
    1870:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1872:	60 d3       	rcall	.+1728   	; 0x1f34 <sysclk_enable_module>
    1874:	2f c0       	rjmp	.+94     	; 0x18d4 <usart_init_rs232+0x18e>
    1876:	c0 3a       	cpi	r28, 0xA0	; 160
    1878:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    187a:	df 07       	cpc	r29, r31
    187c:	21 f4       	brne	.+8      	; 0x1886 <usart_init_rs232+0x140>
    187e:	60 e1       	ldi	r22, 0x10	; 16
    1880:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1882:	58 d3       	rcall	.+1712   	; 0x1f34 <sysclk_enable_module>
    1884:	27 c0       	rjmp	.+78     	; 0x18d4 <usart_init_rs232+0x18e>
    1886:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1888:	8a e0       	ldi	r24, 0x0A	; 10
    188a:	d8 07       	cpc	r29, r24
    188c:	21 f4       	brne	.+8      	; 0x1896 <usart_init_rs232+0x150>
    188e:	60 e1       	ldi	r22, 0x10	; 16
    1890:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1892:	50 d3       	rcall	.+1696   	; 0x1f34 <sysclk_enable_module>
    1894:	1f c0       	rjmp	.+62     	; 0x18d4 <usart_init_rs232+0x18e>
    1896:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1898:	e8 e0       	ldi	r30, 0x08	; 8
    189a:	de 07       	cpc	r29, r30
    189c:	21 f4       	brne	.+8      	; 0x18a6 <usart_init_rs232+0x160>
    189e:	60 e2       	ldi	r22, 0x20	; 32
    18a0:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    18a2:	48 d3       	rcall	.+1680   	; 0x1f34 <sysclk_enable_module>
    18a4:	17 c0       	rjmp	.+46     	; 0x18d4 <usart_init_rs232+0x18e>
    18a6:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    18a8:	f9 e0       	ldi	r31, 0x09	; 9
    18aa:	df 07       	cpc	r29, r31
    18ac:	21 f4       	brne	.+8      	; 0x18b6 <usart_init_rs232+0x170>
    18ae:	60 e2       	ldi	r22, 0x20	; 32
    18b0:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    18b2:	40 d3       	rcall	.+1664   	; 0x1f34 <sysclk_enable_module>
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <usart_init_rs232+0x18e>
    18b6:	c0 38       	cpi	r28, 0x80	; 128
    18b8:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    18ba:	d8 07       	cpc	r29, r24
    18bc:	21 f4       	brne	.+8      	; 0x18c6 <usart_init_rs232+0x180>
    18be:	60 e4       	ldi	r22, 0x40	; 64
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	38 d3       	rcall	.+1648   	; 0x1f34 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    18c4:	07 c0       	rjmp	.+14     	; 0x18d4 <usart_init_rs232+0x18e>
    18c6:	c0 3a       	cpi	r28, 0xA0	; 160
    18c8:	e4 e0       	ldi	r30, 0x04	; 4
    18ca:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    18cc:	19 f4       	brne	.+6      	; 0x18d4 <usart_init_rs232+0x18e>
    18ce:	60 e4       	ldi	r22, 0x40	; 64
    18d0:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    18d2:	30 d3       	rcall	.+1632   	; 0x1f34 <sysclk_enable_module>
    18d4:	8d 81       	ldd	r24, Y+5	; 0x05
    18d6:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    18d8:	8d 83       	std	Y+5, r24	; 0x05
    18da:	f8 01       	movw	r30, r16
    18dc:	95 81       	ldd	r25, Z+5	; 0x05
    18de:	84 81       	ldd	r24, Z+4	; 0x04
    18e0:	89 2b       	or	r24, r25
    18e2:	96 81       	ldd	r25, Z+6	; 0x06
    18e4:	91 11       	cpse	r25, r1
    18e6:	98 e0       	ldi	r25, 0x08	; 8
    18e8:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	f8 01       	movw	r30, r16
    18ee:	40 81       	ld	r20, Z
    18f0:	51 81       	ldd	r21, Z+1	; 0x01
    18f2:	62 81       	ldd	r22, Z+2	; 0x02
    18f4:	73 81       	ldd	r23, Z+3	; 0x03
    18f6:	00 e0       	ldi	r16, 0x00	; 0
    18f8:	18 e4       	ldi	r17, 0x48	; 72
    18fa:	28 ee       	ldi	r18, 0xE8	; 232
    18fc:	31 e0       	ldi	r19, 0x01	; 1
    18fe:	ce 01       	movw	r24, r28
    1900:	0f de       	rcall	.-994    	; 0x1520 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	98 60       	ori	r25, 0x08	; 8
    1906:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	90 61       	ori	r25, 0x10	; 16
    190c:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	08 95       	ret

00001918 <imu_heading>:
	return bno055_euler.p;
}

double imu_heading()
{
	return bno055_euler.h;
    1918:	60 91 86 21 	lds	r22, 0x2186	; 0x802186 <bno055_euler>
    191c:	70 91 87 21 	lds	r23, 0x2187	; 0x802187 <bno055_euler+0x1>
    1920:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <bno055_euler+0x2>
    1924:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <bno055_euler+0x3>
}
    1928:	08 95       	ret

0000192a <cam_switch>:
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
	cam_switch();
}

void cam_switch(void){
	PORTA.OUT ^= PIN3_bm; // Changes A3 from high to low or vice-versa
    192a:	e0 e0       	ldi	r30, 0x00	; 0
    192c:	f6 e0       	ldi	r31, 0x06	; 6
    192e:	94 81       	ldd	r25, Z+4	; 0x04
    1930:	88 e0       	ldi	r24, 0x08	; 8
    1932:	89 27       	eor	r24, r25
    1934:	84 83       	std	Z+4, r24	; 0x04
    1936:	08 95       	ret

00001938 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
    1938:	e0 e0       	ldi	r30, 0x00	; 0
    193a:	f6 e0       	ldi	r31, 0x06	; 6
    193c:	80 81       	ld	r24, Z
    193e:	88 60       	ori	r24, 0x08	; 8
    1940:	80 83       	st	Z, r24
	cam_switch();
    1942:	f3 cf       	rjmp	.-26     	; 0x192a <cam_switch>
    1944:	08 95       	ret

00001946 <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1950:	62 e0       	ldi	r22, 0x02	; 2
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	ef d2       	rcall	.+1502   	; 0x1f34 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
    1956:	c0 e0       	ldi	r28, 0x00	; 0
    1958:	d2 e0       	ldi	r29, 0x02	; 2
    195a:	ff 24       	eor	r15, r15
    195c:	f3 94       	inc	r15
    195e:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    1960:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    1962:	80 e1       	ldi	r24, 0x10	; 16
    1964:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    1966:	85 e0       	ldi	r24, 0x05	; 5
    1968:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    196a:	61 e2       	ldi	r22, 0x21	; 33
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	0c d3       	rcall	.+1560   	; 0x1f8a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1972:	08 2f       	mov	r16, r24
    1974:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    1976:	10 2f       	mov	r17, r16
    1978:	00 27       	eor	r16, r16
    197a:	60 e2       	ldi	r22, 0x20	; 32
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	04 d3       	rcall	.+1544   	; 0x1f8a <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    1982:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    1984:	0c 87       	std	Y+12, r16	; 0x0c
    1986:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
    1988:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 0	
    198a:	19 a2       	std	Y+33, r1	; 0x21
}
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	08 95       	ret

00001998 <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	27 97       	sbiw	r28, 0x07	; 7
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    19a6:	60 e2       	ldi	r22, 0x20	; 32
    19a8:	84 e0       	ldi	r24, 0x04	; 4
    19aa:	c4 d2       	rcall	.+1416   	; 0x1f34 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
    19ac:	e0 e6       	ldi	r30, 0x60	; 96
    19ae:	f6 e0       	ldi	r31, 0x06	; 6
    19b0:	80 81       	ld	r24, Z
    19b2:	80 68       	ori	r24, 0x80	; 128
    19b4:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    19b6:	e6 e0       	ldi	r30, 0x06	; 6
    19b8:	f0 e2       	ldi	r31, 0x20	; 32
    19ba:	84 81       	ldd	r24, Z+4	; 0x04
    19bc:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    19be:	85 81       	ldd	r24, Z+5	; 0x05
    19c0:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    19c2:	86 81       	ldd	r24, Z+6	; 0x06
    19c4:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	a2 81       	ldd	r26, Z+2	; 0x02
    19cc:	b3 81       	ldd	r27, Z+3	; 0x03
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	ab 83       	std	Y+3, r26	; 0x03
    19d4:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    19d6:	60 e2       	ldi	r22, 0x20	; 32
    19d8:	84 e0       	ldi	r24, 0x04	; 4
    19da:	ac d2       	rcall	.+1368   	; 0x1f34 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    19dc:	be 01       	movw	r22, r28
    19de:	6f 5f       	subi	r22, 0xFF	; 255
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	80 eb       	ldi	r24, 0xB0	; 176
    19e4:	99 e0       	ldi	r25, 0x09	; 9
    19e6:	af de       	rcall	.-674    	; 0x1746 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
    19e8:	27 96       	adiw	r28, 0x07	; 7
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    19f6:	61 50       	subi	r22, 0x01	; 1
    19f8:	71 09       	sbc	r23, r1
    19fa:	81 09       	sbc	r24, r1
    19fc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    19fe:	61 15       	cp	r22, r1
    1a00:	71 05       	cpc	r23, r1
    1a02:	81 05       	cpc	r24, r1
    1a04:	91 05       	cpc	r25, r1
    1a06:	b9 f7       	brne	.-18     	; 0x19f6 <__portable_avr_delay_cycles+0x2>
    1a08:	08 95       	ret

00001a0a <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
    1a0a:	e0 e4       	ldi	r30, 0x40	; 64
    1a0c:	f6 e0       	ldi	r31, 0x06	; 6
    1a0e:	94 81       	ldd	r25, Z+4	; 0x04
    1a10:	80 e1       	ldi	r24, 0x10	; 16
    1a12:	89 27       	eor	r24, r25
    1a14:	84 83       	std	Z+4, r24	; 0x04
    1a16:	08 95       	ret

00001a18 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    1a18:	e0 e4       	ldi	r30, 0x40	; 64
    1a1a:	f6 e0       	ldi	r31, 0x06	; 6
    1a1c:	84 81       	ldd	r24, Z+4	; 0x04
    1a1e:	80 61       	ori	r24, 0x10	; 16
    1a20:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
    1a22:	f3 df       	rcall	.-26     	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
    1a24:	8e e1       	ldi	r24, 0x1E	; 30
    1a26:	b9 d0       	rcall	.+370    	; 0x1b9a <spi_write>
	delay_ms(3);
    1a28:	60 e8       	ldi	r22, 0x80	; 128
    1a2a:	7e e3       	ldi	r23, 0x3E	; 62
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    1a30:	e1 df       	rcall	.-62     	; 0x19f4 <__portable_avr_delay_cycles>
    1a32:	eb df       	rcall	.-42     	; 0x1a0a <flip_ms5607>
	delay_ms(2);
    1a34:	6b ea       	ldi	r22, 0xAB	; 171
    1a36:	79 e2       	ldi	r23, 0x29	; 41
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	db cf       	rjmp	.-74     	; 0x19f4 <__portable_avr_delay_cycles>
    1a3e:	08 95       	ret

00001a40 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
    1a46:	e1 df       	rcall	.-62     	; 0x1a0a <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
    1a48:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
    1a4a:	a7 d0       	rcall	.+334    	; 0x1b9a <spi_write>
    1a4c:	97 d0       	rcall	.+302    	; 0x1b7c <spi_read>
    1a4e:	c8 2f       	mov	r28, r24
    1a50:	d0 e0       	ldi	r29, 0x00	; 0
    1a52:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
    1a54:	cc 27       	eor	r28, r28
    1a56:	92 d0       	rcall	.+292    	; 0x1b7c <spi_read>
    1a58:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
    1a5a:	d7 df       	rcall	.-82     	; 0x1a0a <flip_ms5607>
    1a5c:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <ms5607_convert_d1>:
    1a64:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
    1a66:	df 93       	push	r29
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <ms5607_convert_d1+0x6>
    1a6a:	1f 92       	push	r1
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    1a70:	19 82       	std	Y+1, r1	; 0x01
    1a72:	1a 82       	std	Y+2, r1	; 0x02
    1a74:	1b 82       	std	Y+3, r1	; 0x03
    1a76:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
    1a78:	c8 df       	rcall	.-112    	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
    1a7a:	88 e4       	ldi	r24, 0x48	; 72
    1a7c:	8e d0       	rcall	.+284    	; 0x1b9a <spi_write>
	delay_ms(10);
    1a7e:	66 e5       	ldi	r22, 0x56	; 86
    1a80:	70 ed       	ldi	r23, 0xD0	; 208
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    1a86:	b6 df       	rcall	.-148    	; 0x19f4 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    1a88:	c0 df       	rcall	.-128    	; 0x1a0a <flip_ms5607>
    1a8a:	bf df       	rcall	.-130    	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	85 d0       	rcall	.+266    	; 0x1b9a <spi_write>
    1a90:	75 d0       	rcall	.+234    	; 0x1b7c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	dc 01       	movw	r26, r24
    1a9a:	99 27       	eor	r25, r25
    1a9c:	88 27       	eor	r24, r24
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	ab 83       	std	Y+3, r26	; 0x03
    1aa4:	bc 83       	std	Y+4, r27	; 0x04
    1aa6:	6a d0       	rcall	.+212    	; 0x1b7c <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    1aa8:	49 81       	ldd	r20, Y+1	; 0x01
    1aaa:	5a 81       	ldd	r21, Y+2	; 0x02
    1aac:	6b 81       	ldd	r22, Y+3	; 0x03
    1aae:	7c 81       	ldd	r23, Y+4	; 0x04
    1ab0:	58 2b       	or	r21, r24
    1ab2:	49 83       	std	Y+1, r20	; 0x01
    1ab4:	5a 83       	std	Y+2, r21	; 0x02
    1ab6:	6b 83       	std	Y+3, r22	; 0x03
    1ab8:	7c 83       	std	Y+4, r23	; 0x04
    1aba:	60 d0       	rcall	.+192    	; 0x1b7c <spi_read>
	rx_data |= spi_read();
    1abc:	49 81       	ldd	r20, Y+1	; 0x01
    1abe:	5a 81       	ldd	r21, Y+2	; 0x02
    1ac0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ac2:	7c 81       	ldd	r23, Y+4	; 0x04
    1ac4:	48 2b       	or	r20, r24
    1ac6:	49 83       	std	Y+1, r20	; 0x01
    1ac8:	5a 83       	std	Y+2, r21	; 0x02
    1aca:	6b 83       	std	Y+3, r22	; 0x03
    1acc:	7c 83       	std	Y+4, r23	; 0x04
    1ace:	9d df       	rcall	.-198    	; 0x1a0a <flip_ms5607>
	flip_ms5607();
    1ad0:	69 81       	ldd	r22, Y+1	; 0x01
    1ad2:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	24 96       	adiw	r28, 0x04	; 4
    1ada:	cd bf       	out	0x3d, r28	; 61
}
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <ms5607_convert_d2>:
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <ms5607_convert_d2+0x6>
    1aea:	1f 92       	push	r1
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    1af0:	19 82       	std	Y+1, r1	; 0x01
    1af2:	1a 82       	std	Y+2, r1	; 0x02
    1af4:	1b 82       	std	Y+3, r1	; 0x03
    1af6:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
    1af8:	88 df       	rcall	.-240    	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
    1afa:	88 e5       	ldi	r24, 0x58	; 88
    1afc:	4e d0       	rcall	.+156    	; 0x1b9a <spi_write>
	delay_ms(10);
    1afe:	66 e5       	ldi	r22, 0x56	; 86
    1b00:	70 ed       	ldi	r23, 0xD0	; 208
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    1b06:	76 df       	rcall	.-276    	; 0x19f4 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    1b08:	80 df       	rcall	.-256    	; 0x1a0a <flip_ms5607>
    1b0a:	7f df       	rcall	.-258    	; 0x1a0a <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	45 d0       	rcall	.+138    	; 0x1b9a <spi_write>
    1b10:	35 d0       	rcall	.+106    	; 0x1b7c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	dc 01       	movw	r26, r24
    1b1a:	99 27       	eor	r25, r25
    1b1c:	88 27       	eor	r24, r24
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	ab 83       	std	Y+3, r26	; 0x03
    1b24:	bc 83       	std	Y+4, r27	; 0x04
    1b26:	2a d0       	rcall	.+84     	; 0x1b7c <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    1b28:	49 81       	ldd	r20, Y+1	; 0x01
    1b2a:	5a 81       	ldd	r21, Y+2	; 0x02
    1b2c:	6b 81       	ldd	r22, Y+3	; 0x03
    1b2e:	7c 81       	ldd	r23, Y+4	; 0x04
    1b30:	58 2b       	or	r21, r24
    1b32:	49 83       	std	Y+1, r20	; 0x01
    1b34:	5a 83       	std	Y+2, r21	; 0x02
    1b36:	6b 83       	std	Y+3, r22	; 0x03
    1b38:	7c 83       	std	Y+4, r23	; 0x04
    1b3a:	20 d0       	rcall	.+64     	; 0x1b7c <spi_read>
	rx_data |= spi_read();
    1b3c:	49 81       	ldd	r20, Y+1	; 0x01
    1b3e:	5a 81       	ldd	r21, Y+2	; 0x02
    1b40:	6b 81       	ldd	r22, Y+3	; 0x03
    1b42:	7c 81       	ldd	r23, Y+4	; 0x04
    1b44:	48 2b       	or	r20, r24
    1b46:	49 83       	std	Y+1, r20	; 0x01
    1b48:	5a 83       	std	Y+2, r21	; 0x02
    1b4a:	6b 83       	std	Y+3, r22	; 0x03
    1b4c:	7c 83       	std	Y+4, r23	; 0x04
    1b4e:	5d df       	rcall	.-326    	; 0x1a0a <flip_ms5607>
	flip_ms5607();
    1b50:	69 81       	ldd	r22, Y+1	; 0x01
    1b52:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	24 96       	adiw	r28, 0x04	; 4
    1b5a:	cd bf       	out	0x3d, r28	; 61
}
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <spi_init>:
    1b64:	e0 e4       	ldi	r30, 0x40	; 64
    1b66:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
    1b68:	80 81       	ld	r24, Z
    1b6a:	80 6b       	ori	r24, 0xB0	; 176
    1b6c:	80 83       	st	Z, r24
    1b6e:	68 e0       	ldi	r22, 0x08	; 8
    1b70:	83 e0       	ldi	r24, 0x03	; 3
    1b72:	e0 d1       	rcall	.+960    	; 0x1f34 <sysclk_enable_module>
    1b74:	8c e5       	ldi	r24, 0x5C	; 92
    1b76:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    1b7a:	08 95       	ret

00001b7c <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
    1b7c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1b7e:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    1b86:	e0 ec       	ldi	r30, 0xC0	; 192
    1b88:	f8 e0       	ldi	r31, 0x08	; 8
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	88 23       	and	r24, r24
    1b8e:	ec f7       	brge	.-6      	; 0x1b8a <spi_read+0xe>
	sei();
    1b90:	78 94       	sei
	SREG=oldInterruptState;
    1b92:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
    1b94:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    1b98:	08 95       	ret

00001b9a <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
    1b9a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1b9c:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
    1b9e:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
    1ba2:	e0 ec       	ldi	r30, 0xC0	; 192
    1ba4:	f8 e0       	ldi	r31, 0x08	; 8
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	88 23       	and	r24, r24
    1baa:	ec f7       	brge	.-6      	; 0x1ba6 <spi_write+0xc>
	sei();
    1bac:	78 94       	sei
	SREG=oldInterruptState;
    1bae:	9f bf       	out	0x3f, r25	; 63
    1bb0:	08 95       	ret

00001bb2 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1bb8:	ad dc       	rcall	.-1702   	; 0x1514 <usart_getchar>
    1bba:	88 83       	st	Y, r24
}
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1bc2:	a0 cc       	rjmp	.-1728   	; 0x1504 <usart_putchar>
}
    1bc4:	08 95       	ret

00001bc6 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	27 97       	sbiw	r28, 0x07	; 7
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1bd4:	60 e1       	ldi	r22, 0x10	; 16
    1bd6:	85 e0       	ldi	r24, 0x05	; 5
    1bd8:	ad d1       	rcall	.+858    	; 0x1f34 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    1bda:	e0 e8       	ldi	r30, 0x80	; 128
    1bdc:	f6 e0       	ldi	r31, 0x06	; 6
    1bde:	80 81       	ld	r24, Z
    1be0:	88 60       	ori	r24, 0x08	; 8
    1be2:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1be4:	80 ea       	ldi	r24, 0xA0	; 160
    1be6:	9a e0       	ldi	r25, 0x0A	; 10
    1be8:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <stdio_base>
    1bec:	90 93 68 21 	sts	0x2168, r25	; 0x802168 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1bf0:	81 ee       	ldi	r24, 0xE1	; 225
    1bf2:	9d e0       	ldi	r25, 0x0D	; 13
    1bf4:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <ptr_put>
    1bf8:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1bfc:	89 ed       	ldi	r24, 0xD9	; 217
    1bfe:	9d e0       	ldi	r25, 0x0D	; 13
    1c00:	80 93 63 21 	sts	0x2163, r24	; 0x802163 <ptr_get>
    1c04:	90 93 64 21 	sts	0x2164, r25	; 0x802164 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1c08:	ed e0       	ldi	r30, 0x0D	; 13
    1c0a:	f0 e2       	ldi	r31, 0x20	; 32
    1c0c:	84 81       	ldd	r24, Z+4	; 0x04
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1c10:	85 81       	ldd	r24, Z+5	; 0x05
    1c12:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1c14:	86 81       	ldd	r24, Z+6	; 0x06
    1c16:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1c18:	80 81       	ld	r24, Z
    1c1a:	91 81       	ldd	r25, Z+1	; 0x01
    1c1c:	a2 81       	ldd	r26, Z+2	; 0x02
    1c1e:	b3 81       	ldd	r27, Z+3	; 0x03
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	ab 83       	std	Y+3, r26	; 0x03
    1c26:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1c28:	60 e1       	ldi	r22, 0x10	; 16
    1c2a:	85 e0       	ldi	r24, 0x05	; 5
    1c2c:	83 d1       	rcall	.+774    	; 0x1f34 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1c2e:	be 01       	movw	r22, r28
    1c30:	6f 5f       	subi	r22, 0xFF	; 255
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	80 ea       	ldi	r24, 0xA0	; 160
    1c36:	9a e0       	ldi	r25, 0x0A	; 10
    1c38:	86 dd       	rcall	.-1268   	; 0x1746 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1c3a:	6f e7       	ldi	r22, 0x7F	; 127
    1c3c:	71 e0       	ldi	r23, 0x01	; 1
    1c3e:	88 e9       	ldi	r24, 0x98	; 152
    1c40:	91 e0       	ldi	r25, 0x01	; 1
    1c42:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
    1c46:	27 96       	adiw	r28, 0x07	; 7
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	08 95       	ret

00001c52 <voltage_init>:
#include "voltage.h"
#include <asf.h>


void voltage_init(void)
{
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	69 d1       	rcall	.+722    	; 0x1f34 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&VOLTAGE_SERIAL);
	VOLTAGE_SERIAL.CTRLA = 0x01; // enable the ADC
    1c62:	c0 e0       	ldi	r28, 0x00	; 0
    1c64:	d2 e0       	ldi	r29, 0x02	; 2
    1c66:	ff 24       	eor	r15, r15
    1c68:	f3 94       	inc	r15
    1c6a:	f8 82       	st	Y, r15
	VOLTAGE_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    1c6c:	19 82       	std	Y+1, r1	; 0x01
	VOLTAGE_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    1c6e:	80 e1       	ldi	r24, 0x10	; 16
    1c70:	8a 83       	std	Y+2, r24	; 0x02
	VOLTAGE_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    1c72:	85 e0       	ldi	r24, 0x05	; 5
    1c74:	8c 83       	std	Y+4, r24	; 0x04
    1c76:	61 e2       	ldi	r22, 0x21	; 33
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	86 d1       	rcall	.+780    	; 0x1f8a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1c7e:	08 2f       	mov	r16, r24
    1c80:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    1c82:	10 2f       	mov	r17, r16
    1c84:	00 27       	eor	r16, r16
    1c86:	60 e2       	ldi	r22, 0x20	; 32
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	7e d1       	rcall	.+764    	; 0x1f8a <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    1c8e:	08 2b       	or	r16, r24
	VOLTAGE_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    1c90:	0c 87       	std	Y+12, r16	; 0x0c
    1c92:	1d 87       	std	Y+13, r17	; 0x0d
	
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL = 0x01; // single ended input
    1c94:	f8 a6       	std	Y+40, r15	; 0x28
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
    1c96:	19 a6       	std	Y+41, r1	; 0x29
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	08 95       	ret

00001ca4 <voltage_read>:

uint16_t voltage_read(void)
{
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
    1ca4:	e0 e0       	ldi	r30, 0x00	; 0
    1ca6:	f2 e0       	ldi	r31, 0x02	; 2
    1ca8:	80 a5       	ldd	r24, Z+40	; 0x28
    1caa:	80 68       	ori	r24, 0x80	; 128
    1cac:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_SERIAL.VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
    1cae:	83 a5       	ldd	r24, Z+43	; 0x2b
    1cb0:	88 23       	and	r24, r24
    1cb2:	e9 f3       	breq	.-6      	; 0x1cae <voltage_read+0xa>
	return VOLTAGE_SERIAL.VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
    1cb4:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    1cb8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    1cbc:	08 95       	ret

00001cbe <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	41 15       	cp	r20, r1
    1cc6:	51 05       	cpc	r21, r1
    1cc8:	b1 f1       	breq	.+108    	; 0x1d36 <rb16_write+0x78>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	db 01       	movw	r26, r22
    1cd6:	a8 0f       	add	r26, r24
    1cd8:	b9 1f       	adc	r27, r25
    1cda:	8d 91       	ld	r24, X+
    1cdc:	9c 91       	ld	r25, X
    1cde:	a2 81       	ldd	r26, Z+2	; 0x02
    1ce0:	b3 81       	ldd	r27, Z+3	; 0x03
    1ce2:	aa 0f       	add	r26, r26
    1ce4:	bb 1f       	adc	r27, r27
    1ce6:	c6 81       	ldd	r28, Z+6	; 0x06
    1ce8:	d7 81       	ldd	r29, Z+7	; 0x07
    1cea:	ac 0f       	add	r26, r28
    1cec:	bd 1f       	adc	r27, r29
    1cee:	8d 93       	st	X+, r24
    1cf0:	9c 93       	st	X, r25
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	82 83       	std	Z+2, r24	; 0x02
    1cfa:	93 83       	std	Z+3, r25	; 0x03
    1cfc:	a0 81       	ld	r26, Z
    1cfe:	b1 81       	ldd	r27, Z+1	; 0x01
    1d00:	8a 17       	cp	r24, r26
    1d02:	9b 07       	cpc	r25, r27
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <rb16_write+0x4c>
    1d06:	12 82       	std	Z+2, r1	; 0x02
    1d08:	13 82       	std	Z+3, r1	; 0x03
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	c4 81       	ldd	r28, Z+4	; 0x04
    1d10:	d5 81       	ldd	r29, Z+5	; 0x05
    1d12:	8c 17       	cp	r24, r28
    1d14:	9d 07       	cpc	r25, r29
    1d16:	49 f4       	brne	.+18     	; 0x1d2a <rb16_write+0x6c>
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	a8 17       	cp	r26, r24
    1d1c:	b9 07       	cpc	r27, r25
    1d1e:	19 f0       	breq	.+6      	; 0x1d26 <rb16_write+0x68>
    1d20:	84 83       	std	Z+4, r24	; 0x04
    1d22:	95 83       	std	Z+5, r25	; 0x05
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <rb16_write+0x6c>
    1d26:	14 82       	std	Z+4, r1	; 0x04
    1d28:	15 82       	std	Z+5, r1	; 0x05
    1d2a:	2f 5f       	subi	r18, 0xFF	; 255
    1d2c:	82 2f       	mov	r24, r18
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	84 17       	cp	r24, r20
    1d32:	95 07       	cpc	r25, r21
    1d34:	68 f2       	brcs	.-102    	; 0x1cd0 <rb16_write+0x12>
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <rb16_init>:
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	12 82       	std	Z+2, r1	; 0x02
    1d40:	13 82       	std	Z+3, r1	; 0x03
    1d42:	14 82       	std	Z+4, r1	; 0x04
    1d44:	15 82       	std	Z+5, r1	; 0x05
    1d46:	66 83       	std	Z+6, r22	; 0x06
    1d48:	77 83       	std	Z+7, r23	; 0x07
    1d4a:	40 83       	st	Z, r20
    1d4c:	51 83       	std	Z+1, r21	; 0x01
    1d4e:	08 95       	ret

00001d50 <rb16_get_nth>:
    1d50:	dc 01       	movw	r26, r24
    1d52:	12 96       	adiw	r26, 0x02	; 2
    1d54:	ed 91       	ld	r30, X+
    1d56:	fc 91       	ld	r31, X
    1d58:	13 97       	sbiw	r26, 0x03	; 3
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	e8 17       	cp	r30, r24
    1d60:	f9 07       	cpc	r31, r25
    1d62:	78 f0       	brcs	.+30     	; 0x1d82 <rb16_get_nth+0x32>
    1d64:	e1 50       	subi	r30, 0x01	; 1
    1d66:	f0 48       	sbci	r31, 0x80	; 128
    1d68:	e6 1b       	sub	r30, r22
    1d6a:	f7 0b       	sbc	r31, r23
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	16 96       	adiw	r26, 0x06	; 6
    1d72:	8d 91       	ld	r24, X+
    1d74:	9c 91       	ld	r25, X
    1d76:	17 97       	sbiw	r26, 0x07	; 7
    1d78:	e8 0f       	add	r30, r24
    1d7a:	f9 1f       	adc	r31, r25
    1d7c:	80 81       	ld	r24, Z
    1d7e:	91 81       	ldd	r25, Z+1	; 0x01
    1d80:	08 95       	ret
    1d82:	2d 91       	ld	r18, X+
    1d84:	3c 91       	ld	r19, X
    1d86:	11 97       	sbiw	r26, 0x01	; 1
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	e1 50       	subi	r30, 0x01	; 1
    1d8e:	f0 48       	sbci	r31, 0x80	; 128
    1d90:	e6 1b       	sub	r30, r22
    1d92:	f7 0b       	sbc	r31, r23
    1d94:	ee 0f       	add	r30, r30
    1d96:	ff 1f       	adc	r31, r31
    1d98:	16 96       	adiw	r26, 0x06	; 6
    1d9a:	8d 91       	ld	r24, X+
    1d9c:	9c 91       	ld	r25, X
    1d9e:	17 97       	sbiw	r26, 0x07	; 7
    1da0:	e8 0f       	add	r30, r24
    1da2:	f9 1f       	adc	r31, r25
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	08 95       	ret

00001daa <rb32_write>:
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	fc 01       	movw	r30, r24
    1db8:	41 15       	cp	r20, r1
    1dba:	51 05       	cpc	r21, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <rb32_write+0x16>
    1dbe:	3f c0       	rjmp	.+126    	; 0x1e3e <rb32_write+0x94>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	db 01       	movw	r26, r22
    1dd0:	a8 0f       	add	r26, r24
    1dd2:	b9 1f       	adc	r27, r25
    1dd4:	cd 90       	ld	r12, X+
    1dd6:	dd 90       	ld	r13, X+
    1dd8:	ed 90       	ld	r14, X+
    1dda:	fc 90       	ld	r15, X
    1ddc:	a2 81       	ldd	r26, Z+2	; 0x02
    1dde:	b3 81       	ldd	r27, Z+3	; 0x03
    1de0:	aa 0f       	add	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	aa 0f       	add	r26, r26
    1de6:	bb 1f       	adc	r27, r27
    1de8:	86 81       	ldd	r24, Z+6	; 0x06
    1dea:	97 81       	ldd	r25, Z+7	; 0x07
    1dec:	a8 0f       	add	r26, r24
    1dee:	b9 1f       	adc	r27, r25
    1df0:	cd 92       	st	X+, r12
    1df2:	dd 92       	st	X+, r13
    1df4:	ed 92       	st	X+, r14
    1df6:	fc 92       	st	X, r15
    1df8:	13 97       	sbiw	r26, 0x03	; 3
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	82 83       	std	Z+2, r24	; 0x02
    1e02:	93 83       	std	Z+3, r25	; 0x03
    1e04:	a0 81       	ld	r26, Z
    1e06:	b1 81       	ldd	r27, Z+1	; 0x01
    1e08:	8a 17       	cp	r24, r26
    1e0a:	9b 07       	cpc	r25, r27
    1e0c:	11 f4       	brne	.+4      	; 0x1e12 <rb32_write+0x68>
    1e0e:	12 82       	std	Z+2, r1	; 0x02
    1e10:	13 82       	std	Z+3, r1	; 0x03
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	c4 81       	ldd	r28, Z+4	; 0x04
    1e18:	d5 81       	ldd	r29, Z+5	; 0x05
    1e1a:	8c 17       	cp	r24, r28
    1e1c:	9d 07       	cpc	r25, r29
    1e1e:	49 f4       	brne	.+18     	; 0x1e32 <rb32_write+0x88>
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	a8 17       	cp	r26, r24
    1e24:	b9 07       	cpc	r27, r25
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <rb32_write+0x84>
    1e28:	84 83       	std	Z+4, r24	; 0x04
    1e2a:	95 83       	std	Z+5, r25	; 0x05
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <rb32_write+0x88>
    1e2e:	14 82       	std	Z+4, r1	; 0x04
    1e30:	15 82       	std	Z+5, r1	; 0x05
    1e32:	2f 5f       	subi	r18, 0xFF	; 255
    1e34:	82 2f       	mov	r24, r18
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	84 17       	cp	r24, r20
    1e3a:	95 07       	cpc	r25, r21
    1e3c:	20 f2       	brcs	.-120    	; 0x1dc6 <rb32_write+0x1c>
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	ff 90       	pop	r15
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	cf 90       	pop	r12
    1e4a:	08 95       	ret

00001e4c <rb32_init>:
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	12 82       	std	Z+2, r1	; 0x02
    1e50:	13 82       	std	Z+3, r1	; 0x03
    1e52:	14 82       	std	Z+4, r1	; 0x04
    1e54:	15 82       	std	Z+5, r1	; 0x05
    1e56:	66 83       	std	Z+6, r22	; 0x06
    1e58:	77 83       	std	Z+7, r23	; 0x07
    1e5a:	40 83       	st	Z, r20
    1e5c:	51 83       	std	Z+1, r21	; 0x01
    1e5e:	08 95       	ret

00001e60 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    1e60:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    1e62:	12 96       	adiw	r26, 0x02	; 2
    1e64:	ed 91       	ld	r30, X+
    1e66:	fc 91       	ld	r31, X
    1e68:	13 97       	sbiw	r26, 0x03	; 3
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	e8 17       	cp	r30, r24
    1e70:	f9 07       	cpc	r31, r25
    1e72:	98 f0       	brcs	.+38     	; 0x1e9a <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    1e74:	e1 50       	subi	r30, 0x01	; 1
    1e76:	f0 4c       	sbci	r31, 0xC0	; 192
    1e78:	e6 1b       	sub	r30, r22
    1e7a:	f7 0b       	sbc	r31, r23
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	16 96       	adiw	r26, 0x06	; 6
    1e86:	8d 91       	ld	r24, X+
    1e88:	9c 91       	ld	r25, X
    1e8a:	17 97       	sbiw	r26, 0x07	; 7
    1e8c:	e8 0f       	add	r30, r24
    1e8e:	f9 1f       	adc	r31, r25
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    1e9a:	2d 91       	ld	r18, X+
    1e9c:	3c 91       	ld	r19, X
    1e9e:	11 97       	sbiw	r26, 0x01	; 1
    1ea0:	e2 0f       	add	r30, r18
    1ea2:	f3 1f       	adc	r31, r19
    1ea4:	e1 50       	subi	r30, 0x01	; 1
    1ea6:	f0 4c       	sbci	r31, 0xC0	; 192
    1ea8:	e6 1b       	sub	r30, r22
    1eaa:	f7 0b       	sbc	r31, r23
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	16 96       	adiw	r26, 0x06	; 6
    1eb6:	8d 91       	ld	r24, X+
    1eb8:	9c 91       	ld	r25, X
    1eba:	17 97       	sbiw	r26, 0x07	; 7
    1ebc:	e8 0f       	add	r30, r24
    1ebe:	f9 1f       	adc	r31, r25
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
}
    1ec8:	08 95       	ret

00001eca <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	1f 92       	push	r1
    1ed0:	1f 92       	push	r1
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1ed6:	8f ef       	ldi	r24, 0xFF	; 255
    1ed8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1edc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1ee0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1ee4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1ee8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1eec:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1ef0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ef4:	8f b7       	in	r24, 0x3f	; 63
    1ef6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1ef8:	f8 94       	cli
	return flags;
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1efc:	e0 e5       	ldi	r30, 0x50	; 80
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	82 60       	ori	r24, 0x02	; 2
    1f04:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f06:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1f08:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1f0a:	81 ff       	sbrs	r24, 1
    1f0c:	fd cf       	rjmp	.-6      	; 0x1f08 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1f0e:	61 e0       	ldi	r22, 0x01	; 1
    1f10:	80 e4       	ldi	r24, 0x40	; 64
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	44 d0       	rcall	.+136    	; 0x1f9e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f16:	8f b7       	in	r24, 0x3f	; 63
    1f18:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1f1a:	f8 94       	cli
	return flags;
    1f1c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1f1e:	e0 e5       	ldi	r30, 0x50	; 80
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8e 7f       	andi	r24, 0xFE	; 254
    1f26:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f28:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	08 95       	ret

00001f34 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	1f 92       	push	r1
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f3e:	9f b7       	in	r25, 0x3f	; 63
    1f40:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1f42:	f8 94       	cli
	return flags;
    1f44:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1f46:	e8 2f       	mov	r30, r24
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	e0 59       	subi	r30, 0x90	; 144
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	60 95       	com	r22
    1f50:	80 81       	ld	r24, Z
    1f52:	68 23       	and	r22, r24
    1f54:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f56:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1f58:	0f 90       	pop	r0
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	08 95       	ret

00001f60 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	1f 92       	push	r1
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f6a:	9f b7       	in	r25, 0x3f	; 63
    1f6c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1f6e:	f8 94       	cli
	return flags;
    1f70:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1f72:	e8 2f       	mov	r30, r24
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	e0 59       	subi	r30, 0x90	; 144
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 81       	ld	r24, Z
    1f7c:	68 2b       	or	r22, r24
    1f7e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f80:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1f82:	0f 90       	pop	r0
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	08 95       	ret

00001f8a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1f8a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1f8e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1f90:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1f92:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1f96:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1f98:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1f9c:	08 95       	ret

00001f9e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1f9e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1fa0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1fa2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1fa4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1fa6:	60 83       	st	Z, r22
	ret                             // Return to caller
    1fa8:	08 95       	ret

00001faa <__portable_avr_delay_cycles>:
	//printf("HALL SENSOR INITIALIZED\n");

}

void release(void){
	servo_release();
    1faa:	04 c0       	rjmp	.+8      	; 0x1fb4 <__portable_avr_delay_cycles+0xa>
    1fac:	61 50       	subi	r22, 0x01	; 1
    1fae:	71 09       	sbc	r23, r1
    1fb0:	81 09       	sbc	r24, r1
    1fb2:	91 09       	sbc	r25, r1
    1fb4:	61 15       	cp	r22, r1
    1fb6:	71 05       	cpc	r23, r1
    1fb8:	81 05       	cpc	r24, r1
    1fba:	91 05       	cpc	r25, r1
    1fbc:	b9 f7       	brne	.-18     	; 0x1fac <__portable_avr_delay_cycles+0x2>
    1fbe:	08 95       	ret

00001fc0 <hall_sensor_measure>:
    1fc0:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <ticks_per_sec>
    1fc4:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <ticks_per_sec+0x1>
    1fc8:	01 96       	adiw	r24, 0x01	; 1
    1fca:	80 93 46 21 	sts	0x2146, r24	; 0x802146 <ticks_per_sec>
    1fce:	90 93 47 21 	sts	0x2147, r25	; 0x802147 <ticks_per_sec+0x1>
    1fd2:	8a e4       	ldi	r24, 0x4A	; 74
    1fd4:	90 e2       	ldi	r25, 0x20	; 32
    1fd6:	0c 94 79 27 	jmp	0x4ef2	; 0x4ef2 <puts>
    1fda:	08 95       	ret

00001fdc <pressure_init>:
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	1b dd       	rcall	.-1482   	; 0x1a18 <ms5607_init>
    1fe2:	82 ea       	ldi	r24, 0xA2	; 162
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	2c dd       	rcall	.-1448   	; 0x1a40 <ms5607_read>
    1fe8:	cd e4       	ldi	r28, 0x4D	; 77
    1fea:	d1 e2       	ldi	r29, 0x21	; 33
    1fec:	88 83       	st	Y, r24
    1fee:	99 83       	std	Y+1, r25	; 0x01
    1ff0:	84 ea       	ldi	r24, 0xA4	; 164
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	25 dd       	rcall	.-1462   	; 0x1a40 <ms5607_read>
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
    1ff8:	9b 83       	std	Y+3, r25	; 0x03
    1ffa:	86 ea       	ldi	r24, 0xA6	; 166
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	20 dd       	rcall	.-1472   	; 0x1a40 <ms5607_read>
    2000:	8c 83       	std	Y+4, r24	; 0x04
    2002:	9d 83       	std	Y+5, r25	; 0x05
    2004:	88 ea       	ldi	r24, 0xA8	; 168
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	1b dd       	rcall	.-1482   	; 0x1a40 <ms5607_read>
    200a:	8e 83       	std	Y+6, r24	; 0x06
    200c:	9f 83       	std	Y+7, r25	; 0x07
    200e:	8a ea       	ldi	r24, 0xAA	; 170
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	16 dd       	rcall	.-1492   	; 0x1a40 <ms5607_read>
    2014:	88 87       	std	Y+8, r24	; 0x08
    2016:	99 87       	std	Y+9, r25	; 0x09
    2018:	8c ea       	ldi	r24, 0xAC	; 172
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	11 dd       	rcall	.-1502   	; 0x1a40 <ms5607_read>
    201e:	8a 87       	std	Y+10, r24	; 0x0a
    2020:	9b 87       	std	Y+11, r25	; 0x0b
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret

00002028 <gps_init>:
    2028:	b7 dc       	rcall	.-1682   	; 0x1998 <gps_uart_init>
    202a:	6b ea       	ldi	r22, 0xAB	; 171
    202c:	79 e2       	ldi	r23, 0x29	; 41
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	bb df       	rcall	.-138    	; 0x1faa <__portable_avr_delay_cycles>
    2034:	80 e3       	ldi	r24, 0x30	; 48
    2036:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    203a:	08 95       	ret

0000203c <hall_sensor_init>:
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	00 d0       	rcall	.+0      	; 0x2042 <hall_sensor_init+0x6>
    2042:	1f 92       	push	r1
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	84 e0       	ldi	r24, 0x04	; 4
    204a:	fe 01       	movw	r30, r28
    204c:	31 96       	adiw	r30, 0x01	; 1
    204e:	df 01       	movw	r26, r30
    2050:	98 2f       	mov	r25, r24
    2052:	1d 92       	st	X+, r1
    2054:	9a 95       	dec	r25
    2056:	e9 f7       	brne	.-6      	; 0x2052 <hall_sensor_init+0x16>
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	80 e2       	ldi	r24, 0x20	; 32
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8f e2       	ldi	r24, 0x2F	; 47
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	60 ee       	ldi	r22, 0xE0	; 224
    2064:	7f e0       	ldi	r23, 0x0F	; 15
    2066:	80 e8       	ldi	r24, 0x80	; 128
    2068:	93 e0       	ldi	r25, 0x03	; 3
    206a:	0e 94 13 03 	call	0x626	; 0x626 <ac_set_interrupt_callback>
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	98 2f       	mov	r25, r24
    2072:	90 6c       	ori	r25, 0xC0	; 192
    2074:	99 83       	std	Y+1, r25	; 0x01
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	29 2f       	mov	r18, r25
    207a:	20 73       	andi	r18, 0x30	; 48
    207c:	21 f0       	breq	.+8      	; 0x2086 <hall_sensor_init+0x4a>
    207e:	9c 7f       	andi	r25, 0xFC	; 252
    2080:	92 60       	ori	r25, 0x02	; 2
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	03 c0       	rjmp	.+6      	; 0x208c <hall_sensor_init+0x50>
    2086:	8f 70       	andi	r24, 0x0F	; 15
    2088:	80 6e       	ori	r24, 0xE0	; 224
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	ae 01       	movw	r20, r28
    208e:	4f 5f       	subi	r20, 0xFF	; 255
    2090:	5f 4f       	sbci	r21, 0xFF	; 255
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	80 e8       	ldi	r24, 0x80	; 128
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ac_write_config>
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	80 e8       	ldi	r24, 0x80	; 128
    20a0:	93 e0       	ldi	r25, 0x03	; 3
    20a2:	0e 94 cb 02 	call	0x596	; 0x596 <ac_enable>
    20a6:	78 94       	sei
    20a8:	24 96       	adiw	r28, 0x04	; 4
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret

000020b4 <get_pressure>:
    20b4:	4f 92       	push	r4
    20b6:	5f 92       	push	r5
    20b8:	6f 92       	push	r6
    20ba:	7f 92       	push	r7
    20bc:	8f 92       	push	r8
    20be:	9f 92       	push	r9
    20c0:	af 92       	push	r10
    20c2:	bf 92       	push	r11
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	c9 dc       	rcall	.-1646   	; 0x1a64 <ms5607_convert_d1>
    20d2:	6b 01       	movw	r12, r22
    20d4:	7c 01       	movw	r14, r24
    20d6:	06 dd       	rcall	.-1524   	; 0x1ae4 <ms5607_convert_d2>
    20d8:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    20dc:	4b 01       	movw	r8, r22
    20de:	5c 01       	movw	r10, r24
    20e0:	cd e4       	ldi	r28, 0x4D	; 77
    20e2:	d1 e2       	ldi	r29, 0x21	; 33
    20e4:	68 85       	ldd	r22, Y+8	; 0x08
    20e6:	79 85       	ldd	r23, Y+9	; 0x09
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	53 e4       	ldi	r21, 0x43	; 67
    20f8:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    20fc:	9b 01       	movw	r18, r22
    20fe:	ac 01       	movw	r20, r24
    2100:	c5 01       	movw	r24, r10
    2102:	b4 01       	movw	r22, r8
    2104:	0e 94 cf 22 	call	0x459e	; 0x459e <__subsf3>
    2108:	4b 01       	movw	r8, r22
    210a:	5c 01       	movw	r10, r24
    210c:	6c 81       	ldd	r22, Y+4	; 0x04
    210e:	7d 81       	ldd	r23, Y+5	; 0x05
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    2118:	a5 01       	movw	r20, r10
    211a:	94 01       	movw	r18, r8
    211c:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	5c e3       	ldi	r21, 0x3C	; 60
    2128:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    212c:	2b 01       	movw	r4, r22
    212e:	3c 01       	movw	r6, r24
    2130:	68 81       	ld	r22, Y
    2132:	79 81       	ldd	r23, Y+1	; 0x01
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e8       	ldi	r20, 0x80	; 128
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2148:	9b 01       	movw	r18, r22
    214a:	ac 01       	movw	r20, r24
    214c:	c3 01       	movw	r24, r6
    214e:	b2 01       	movw	r22, r4
    2150:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    2154:	2b 01       	movw	r4, r22
    2156:	3c 01       	movw	r6, r24
    2158:	c7 01       	movw	r24, r14
    215a:	b6 01       	movw	r22, r12
    215c:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    2160:	9b 01       	movw	r18, r22
    2162:	ac 01       	movw	r20, r24
    2164:	c3 01       	movw	r24, r6
    2166:	b2 01       	movw	r22, r4
    2168:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	55 e3       	ldi	r21, 0x35	; 53
    2174:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2178:	6b 01       	movw	r12, r22
    217a:	7c 01       	movw	r14, r24
    217c:	6e 81       	ldd	r22, Y+6	; 0x06
    217e:	7f 81       	ldd	r23, Y+7	; 0x07
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    2188:	a5 01       	movw	r20, r10
    218a:	94 01       	movw	r18, r8
    218c:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e8       	ldi	r20, 0x80	; 128
    2196:	5c e3       	ldi	r21, 0x3C	; 60
    2198:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    219c:	4b 01       	movw	r8, r22
    219e:	5c 01       	movw	r10, r24
    21a0:	6a 81       	ldd	r22, Y+2	; 0x02
    21a2:	7b 81       	ldd	r23, Y+3	; 0x03
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	58 e4       	ldi	r21, 0x48	; 72
    21b4:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    21b8:	9b 01       	movw	r18, r22
    21ba:	ac 01       	movw	r20, r24
    21bc:	c5 01       	movw	r24, r10
    21be:	b4 01       	movw	r22, r8
    21c0:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    21c4:	9b 01       	movw	r18, r22
    21c6:	ac 01       	movw	r20, r24
    21c8:	c7 01       	movw	r24, r14
    21ca:	b6 01       	movw	r22, r12
    21cc:	0e 94 cf 22 	call	0x459e	; 0x459e <__subsf3>
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	58 e3       	ldi	r21, 0x38	; 56
    21d8:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	df 90       	pop	r13
    21e6:	cf 90       	pop	r12
    21e8:	bf 90       	pop	r11
    21ea:	af 90       	pop	r10
    21ec:	9f 90       	pop	r9
    21ee:	8f 90       	pop	r8
    21f0:	7f 90       	pop	r7
    21f2:	6f 90       	pop	r6
    21f4:	5f 90       	pop	r5
    21f6:	4f 90       	pop	r4
    21f8:	08 95       	ret

000021fa <get_altitude>:
    21fa:	4f 92       	push	r4
    21fc:	5f 92       	push	r5
    21fe:	6f 92       	push	r6
    2200:	7f 92       	push	r7
    2202:	8f 92       	push	r8
    2204:	9f 92       	push	r9
    2206:	af 92       	push	r10
    2208:	bf 92       	push	r11
    220a:	cf 92       	push	r12
    220c:	df 92       	push	r13
    220e:	ef 92       	push	r14
    2210:	ff 92       	push	r15
    2212:	2b 01       	movw	r4, r22
    2214:	3c 01       	movw	r6, r24
    2216:	c0 90 1f 20 	lds	r12, 0x201F	; 0x80201f <L>
    221a:	d0 90 20 20 	lds	r13, 0x2020	; 0x802020 <L+0x1>
    221e:	e0 90 21 20 	lds	r14, 0x2021	; 0x802021 <L+0x2>
    2222:	f0 90 22 20 	lds	r15, 0x2022	; 0x802022 <L+0x3>
    2226:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <R>
    222a:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <R+0x1>
    222e:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <R+0x2>
    2232:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <R+0x3>
    2236:	c7 01       	movw	r24, r14
    2238:	b6 01       	movw	r22, r12
    223a:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    223e:	20 91 1b 20 	lds	r18, 0x201B	; 0x80201b <g_0>
    2242:	30 91 1c 20 	lds	r19, 0x201C	; 0x80201c <g_0+0x1>
    2246:	40 91 1d 20 	lds	r20, 0x201D	; 0x80201d <g_0+0x2>
    224a:	50 91 1e 20 	lds	r21, 0x201E	; 0x80201e <g_0+0x3>
    224e:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    2252:	4b 01       	movw	r8, r22
    2254:	5c 01       	movw	r10, r24
    2256:	a3 01       	movw	r20, r6
    2258:	92 01       	movw	r18, r4
    225a:	60 91 2b 20 	lds	r22, 0x202B	; 0x80202b <ground_p>
    225e:	70 91 2c 20 	lds	r23, 0x202C	; 0x80202c <ground_p+0x1>
    2262:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <ground_p+0x2>
    2266:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <ground_p+0x3>
    226a:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    226e:	a5 01       	movw	r20, r10
    2270:	94 01       	movw	r18, r8
    2272:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <pow>
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 cf 22 	call	0x459e	; 0x459e <__subsf3>
    2282:	20 91 27 20 	lds	r18, 0x2027	; 0x802027 <ground_t>
    2286:	30 91 28 20 	lds	r19, 0x2028	; 0x802028 <ground_t+0x1>
    228a:	40 91 29 20 	lds	r20, 0x2029	; 0x802029 <ground_t+0x2>
    228e:	50 91 2a 20 	lds	r21, 0x202A	; 0x80202a <ground_t+0x3>
    2292:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2296:	a7 01       	movw	r20, r14
    2298:	96 01       	movw	r18, r12
    229a:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    229e:	ff 90       	pop	r15
    22a0:	ef 90       	pop	r14
    22a2:	df 90       	pop	r13
    22a4:	cf 90       	pop	r12
    22a6:	bf 90       	pop	r11
    22a8:	af 90       	pop	r10
    22aa:	9f 90       	pop	r9
    22ac:	8f 90       	pop	r8
    22ae:	7f 90       	pop	r7
    22b0:	6f 90       	pop	r6
    22b2:	5f 90       	pop	r5
    22b4:	4f 90       	pop	r4
    22b6:	08 95       	ret

000022b8 <get_voltage>:
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	f1 dc       	rcall	.-1566   	; 0x1ca4 <voltage_read>
    22c2:	bc 01       	movw	r22, r24
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    22cc:	23 e4       	ldi	r18, 0x43	; 67
    22ce:	3e e2       	ldi	r19, 0x2E	; 46
    22d0:	42 e0       	ldi	r20, 0x02	; 2
    22d2:	5a e3       	ldi	r21, 0x3A	; 58
    22d4:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    22d8:	24 ee       	ldi	r18, 0xE4	; 228
    22da:	3a e5       	ldi	r19, 0x5A	; 90
    22dc:	45 ec       	ldi	r20, 0xC5	; 197
    22de:	5d e3       	ldi	r21, 0x3D	; 61
    22e0:	0e 94 cf 22 	call	0x459e	; 0x459e <__subsf3>
    22e4:	6b 01       	movw	r12, r22
    22e6:	7c 01       	movw	r14, r24
    22e8:	2b e2       	ldi	r18, 0x2B	; 43
    22ea:	35 eb       	ldi	r19, 0xB5	; 181
    22ec:	42 e1       	ldi	r20, 0x12	; 18
    22ee:	50 e4       	ldi	r21, 0x40	; 64
    22f0:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    22f4:	9b 01       	movw	r18, r22
    22f6:	ac 01       	movw	r20, r24
    22f8:	c7 01       	movw	r24, r14
    22fa:	b6 01       	movw	r22, r12
    22fc:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    2300:	ff 90       	pop	r15
    2302:	ef 90       	pop	r14
    2304:	df 90       	pop	r13
    2306:	cf 90       	pop	r12
    2308:	08 95       	ret

0000230a <diff>:
    230a:	2f 92       	push	r2
    230c:	3f 92       	push	r3
    230e:	4f 92       	push	r4
    2310:	5f 92       	push	r5
    2312:	6f 92       	push	r6
    2314:	7f 92       	push	r7
    2316:	8f 92       	push	r8
    2318:	9f 92       	push	r9
    231a:	af 92       	push	r10
    231c:	bf 92       	push	r11
    231e:	cf 92       	push	r12
    2320:	df 92       	push	r13
    2322:	ef 92       	push	r14
    2324:	ff 92       	push	r15
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	00 d0       	rcall	.+0      	; 0x2330 <diff+0x26>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <diff+0x28>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	6c 01       	movw	r12, r24
    2338:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    233c:	88 23       	and	r24, r24
    233e:	09 f4       	brne	.+2      	; 0x2342 <diff+0x38>
    2340:	6c c0       	rjmp	.+216    	; 0x241a <diff+0x110>
    2342:	00 e0       	ldi	r16, 0x00	; 0
    2344:	10 e0       	ldi	r17, 0x00	; 0
    2346:	41 2c       	mov	r4, r1
    2348:	51 2c       	mov	r5, r1
    234a:	32 01       	movw	r6, r4
    234c:	86 2e       	mov	r8, r22
    234e:	91 2c       	mov	r9, r1
    2350:	a1 2c       	mov	r10, r1
    2352:	b1 2c       	mov	r11, r1
    2354:	89 82       	std	Y+1, r8	; 0x01
    2356:	9a 82       	std	Y+2, r9	; 0x02
    2358:	ab 82       	std	Y+3, r10	; 0x03
    235a:	bc 82       	std	Y+4, r11	; 0x04
    235c:	b8 01       	movw	r22, r16
    235e:	c6 01       	movw	r24, r12
    2360:	f7 dc       	rcall	.-1554   	; 0x1d50 <rb16_get_nth>
    2362:	5c 01       	movw	r10, r24
    2364:	18 01       	movw	r2, r16
    2366:	2f ef       	ldi	r18, 0xFF	; 255
    2368:	22 1a       	sub	r2, r18
    236a:	32 0a       	sbc	r3, r18
    236c:	b1 01       	movw	r22, r2
    236e:	c6 01       	movw	r24, r12
    2370:	ef dc       	rcall	.-1570   	; 0x1d50 <rb16_get_nth>
    2372:	7c 01       	movw	r14, r24
    2374:	b8 01       	movw	r22, r16
    2376:	6e 5f       	subi	r22, 0xFE	; 254
    2378:	7f 4f       	sbci	r23, 0xFF	; 255
    237a:	c6 01       	movw	r24, r12
    237c:	e9 dc       	rcall	.-1582   	; 0x1d50 <rb16_get_nth>
    237e:	a5 01       	movw	r20, r10
    2380:	bb 0c       	add	r11, r11
    2382:	66 0b       	sbc	r22, r22
    2384:	77 0b       	sbc	r23, r23
    2386:	8a 01       	movw	r16, r20
    2388:	9b 01       	movw	r18, r22
    238a:	00 0f       	add	r16, r16
    238c:	11 1f       	adc	r17, r17
    238e:	22 1f       	adc	r18, r18
    2390:	33 1f       	adc	r19, r19
    2392:	40 0f       	add	r20, r16
    2394:	51 1f       	adc	r21, r17
    2396:	62 1f       	adc	r22, r18
    2398:	73 1f       	adc	r23, r19
    239a:	87 01       	movw	r16, r14
    239c:	ff 0c       	add	r15, r15
    239e:	22 0b       	sbc	r18, r18
    23a0:	33 0b       	sbc	r19, r19
    23a2:	78 01       	movw	r14, r16
    23a4:	89 01       	movw	r16, r18
    23a6:	ee 0c       	add	r14, r14
    23a8:	ff 1c       	adc	r15, r15
    23aa:	00 1f       	adc	r16, r16
    23ac:	11 1f       	adc	r17, r17
    23ae:	ee 0c       	add	r14, r14
    23b0:	ff 1c       	adc	r15, r15
    23b2:	00 1f       	adc	r16, r16
    23b4:	11 1f       	adc	r17, r17
    23b6:	4a 01       	movw	r8, r20
    23b8:	5b 01       	movw	r10, r22
    23ba:	8e 18       	sub	r8, r14
    23bc:	9f 08       	sbc	r9, r15
    23be:	a0 0a       	sbc	r10, r16
    23c0:	b1 0a       	sbc	r11, r17
    23c2:	ac 01       	movw	r20, r24
    23c4:	99 0f       	add	r25, r25
    23c6:	66 0b       	sbc	r22, r22
    23c8:	77 0b       	sbc	r23, r23
    23ca:	d5 01       	movw	r26, r10
    23cc:	c4 01       	movw	r24, r8
    23ce:	84 0f       	add	r24, r20
    23d0:	95 1f       	adc	r25, r21
    23d2:	a6 1f       	adc	r26, r22
    23d4:	b7 1f       	adc	r27, r23
    23d6:	9c 01       	movw	r18, r24
    23d8:	ad 01       	movw	r20, r26
    23da:	69 81       	ldd	r22, Y+1	; 0x01
    23dc:	7a 81       	ldd	r23, Y+2	; 0x02
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__mulsi3>
    23e6:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatsisf>
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    23f6:	9b 01       	movw	r18, r22
    23f8:	ac 01       	movw	r20, r24
    23fa:	c3 01       	movw	r24, r6
    23fc:	b2 01       	movw	r22, r4
    23fe:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    2402:	2b 01       	movw	r4, r22
    2404:	3c 01       	movw	r6, r24
    2406:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    240a:	81 01       	movw	r16, r2
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	22 16       	cp	r2, r18
    2412:	33 06       	cpc	r3, r19
    2414:	08 f4       	brcc	.+2      	; 0x2418 <diff+0x10e>
    2416:	a2 cf       	rjmp	.-188    	; 0x235c <diff+0x52>
    2418:	03 c0       	rjmp	.+6      	; 0x2420 <diff+0x116>
    241a:	41 2c       	mov	r4, r1
    241c:	51 2c       	mov	r5, r1
    241e:	32 01       	movw	r6, r4
    2420:	68 2f       	mov	r22, r24
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatsisf>
    242c:	9b 01       	movw	r18, r22
    242e:	ac 01       	movw	r20, r24
    2430:	c3 01       	movw	r24, r6
    2432:	b2 01       	movw	r22, r4
    2434:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	48 ec       	ldi	r20, 0xC8	; 200
    243e:	52 e4       	ldi	r21, 0x42	; 66
    2440:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    2444:	26 96       	adiw	r28, 0x06	; 6
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	9f 90       	pop	r9
    2460:	8f 90       	pop	r8
    2462:	7f 90       	pop	r7
    2464:	6f 90       	pop	r6
    2466:	5f 90       	pop	r5
    2468:	4f 90       	pop	r4
    246a:	3f 90       	pop	r3
    246c:	2f 90       	pop	r2
    246e:	08 95       	ret

00002470 <data_check>:
    2470:	3f 92       	push	r3
    2472:	4f 92       	push	r4
    2474:	5f 92       	push	r5
    2476:	6f 92       	push	r6
    2478:	7f 92       	push	r7
    247a:	8f 92       	push	r8
    247c:	9f 92       	push	r9
    247e:	af 92       	push	r10
    2480:	bf 92       	push	r11
    2482:	cf 92       	push	r12
    2484:	df 92       	push	r13
    2486:	ef 92       	push	r14
    2488:	ff 92       	push	r15
    248a:	0f 93       	push	r16
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	00 d0       	rcall	.+0      	; 0x2494 <data_check+0x24>
    2494:	00 d0       	rcall	.+0      	; 0x2496 <data_check+0x26>
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	8c 01       	movw	r16, r24
    249c:	19 82       	std	Y+1, r1	; 0x01
    249e:	1a 82       	std	Y+2, r1	; 0x02
    24a0:	c1 2c       	mov	r12, r1
    24a2:	d1 2c       	mov	r13, r1
    24a4:	76 01       	movw	r14, r12
    24a6:	69 81       	ldd	r22, Y+1	; 0x01
    24a8:	7a 81       	ldd	r23, Y+2	; 0x02
    24aa:	c8 01       	movw	r24, r16
    24ac:	d9 dc       	rcall	.-1614   	; 0x1e60 <rb32_get_nth>
    24ae:	4b 01       	movw	r8, r22
    24b0:	5c 01       	movw	r10, r24
    24b2:	21 e6       	ldi	r18, 0x61	; 97
    24b4:	82 1a       	sub	r8, r18
    24b6:	2e ea       	ldi	r18, 0xAE	; 174
    24b8:	92 0a       	sbc	r9, r18
    24ba:	2a e0       	ldi	r18, 0x0A	; 10
    24bc:	a2 0a       	sbc	r10, r18
    24be:	b1 08       	sbc	r11, r1
    24c0:	2f e7       	ldi	r18, 0x7F	; 127
    24c2:	82 16       	cp	r8, r18
    24c4:	2a e1       	ldi	r18, 0x1A	; 26
    24c6:	92 06       	cpc	r9, r18
    24c8:	26 e0       	ldi	r18, 0x06	; 6
    24ca:	a2 06       	cpc	r10, r18
    24cc:	b1 04       	cpc	r11, r1
    24ce:	80 f4       	brcc	.+32     	; 0x24f0 <data_check+0x80>
    24d0:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatsisf>
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 ea       	ldi	r20, 0xA0	; 160
    24da:	50 e4       	ldi	r21, 0x40	; 64
    24dc:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    24e0:	9b 01       	movw	r18, r22
    24e2:	ac 01       	movw	r20, r24
    24e4:	c7 01       	movw	r24, r14
    24e6:	b6 01       	movw	r22, r12
    24e8:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    24ec:	6b 01       	movw	r12, r22
    24ee:	7c 01       	movw	r14, r24
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	9a 81       	ldd	r25, Y+2	; 0x02
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	9a 83       	std	Y+2, r25	; 0x02
    24fa:	05 97       	sbiw	r24, 0x05	; 5
    24fc:	a1 f6       	brne	.-88     	; 0x24a6 <data_check+0x36>
    24fe:	19 82       	std	Y+1, r1	; 0x01
    2500:	1a 82       	std	Y+2, r1	; 0x02
    2502:	81 2c       	mov	r8, r1
    2504:	91 2c       	mov	r9, r1
    2506:	54 01       	movw	r10, r8
    2508:	69 81       	ldd	r22, Y+1	; 0x01
    250a:	7a 81       	ldd	r23, Y+2	; 0x02
    250c:	c8 01       	movw	r24, r16
    250e:	a8 dc       	rcall	.-1712   	; 0x1e60 <rb32_get_nth>
    2510:	2b 01       	movw	r4, r22
    2512:	3c 01       	movw	r6, r24
    2514:	21 e6       	ldi	r18, 0x61	; 97
    2516:	42 1a       	sub	r4, r18
    2518:	2e ea       	ldi	r18, 0xAE	; 174
    251a:	52 0a       	sbc	r5, r18
    251c:	2a e0       	ldi	r18, 0x0A	; 10
    251e:	62 0a       	sbc	r6, r18
    2520:	71 08       	sbc	r7, r1
    2522:	2f e7       	ldi	r18, 0x7F	; 127
    2524:	42 16       	cp	r4, r18
    2526:	2a e1       	ldi	r18, 0x1A	; 26
    2528:	52 06       	cpc	r5, r18
    252a:	26 e0       	ldi	r18, 0x06	; 6
    252c:	62 06       	cpc	r6, r18
    252e:	71 04       	cpc	r7, r1
    2530:	90 f4       	brcc	.+36     	; 0x2556 <data_check+0xe6>
    2532:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatsisf>
    2536:	a7 01       	movw	r20, r14
    2538:	96 01       	movw	r18, r12
    253a:	0e 94 cf 22 	call	0x459e	; 0x459e <__subsf3>
    253e:	9b 01       	movw	r18, r22
    2540:	ac 01       	movw	r20, r24
    2542:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2546:	9b 01       	movw	r18, r22
    2548:	ac 01       	movw	r20, r24
    254a:	c5 01       	movw	r24, r10
    254c:	b4 01       	movw	r22, r8
    254e:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    2552:	4b 01       	movw	r8, r22
    2554:	5c 01       	movw	r10, r24
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	05 97       	sbiw	r24, 0x05	; 5
    2562:	91 f6       	brne	.-92     	; 0x2508 <data_check+0x98>
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5e e3       	ldi	r21, 0x3E	; 62
    256c:	c5 01       	movw	r24, r10
    256e:	b4 01       	movw	r22, r8
    2570:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2574:	69 83       	std	Y+1, r22	; 0x01
    2576:	7a 83       	std	Y+2, r23	; 0x02
    2578:	8b 83       	std	Y+3, r24	; 0x03
    257a:	9c 83       	std	Y+4, r25	; 0x04
    257c:	1d 82       	std	Y+5, r1	; 0x05
    257e:	1e 82       	std	Y+6, r1	; 0x06
    2580:	31 2c       	mov	r3, r1
    2582:	41 2c       	mov	r4, r1
    2584:	51 2c       	mov	r5, r1
    2586:	32 01       	movw	r6, r4
    2588:	6d 81       	ldd	r22, Y+5	; 0x05
    258a:	7e 81       	ldd	r23, Y+6	; 0x06
    258c:	c8 01       	movw	r24, r16
    258e:	68 dc       	rcall	.-1840   	; 0x1e60 <rb32_get_nth>
    2590:	4b 01       	movw	r8, r22
    2592:	5c 01       	movw	r10, r24
    2594:	21 e6       	ldi	r18, 0x61	; 97
    2596:	82 1a       	sub	r8, r18
    2598:	2e ea       	ldi	r18, 0xAE	; 174
    259a:	92 0a       	sbc	r9, r18
    259c:	2a e0       	ldi	r18, 0x0A	; 10
    259e:	a2 0a       	sbc	r10, r18
    25a0:	b1 08       	sbc	r11, r1
    25a2:	2f e7       	ldi	r18, 0x7F	; 127
    25a4:	82 16       	cp	r8, r18
    25a6:	2a e1       	ldi	r18, 0x1A	; 26
    25a8:	92 06       	cpc	r9, r18
    25aa:	26 e0       	ldi	r18, 0x06	; 6
    25ac:	a2 06       	cpc	r10, r18
    25ae:	b1 04       	cpc	r11, r1
    25b0:	50 f5       	brcc	.+84     	; 0x2606 <data_check+0x196>
    25b2:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatsisf>
    25b6:	4b 01       	movw	r8, r22
    25b8:	5c 01       	movw	r10, r24
    25ba:	a7 01       	movw	r20, r14
    25bc:	96 01       	movw	r18, r12
    25be:	0e 94 cf 22 	call	0x459e	; 0x459e <__subsf3>
    25c2:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    25c6:	9b 01       	movw	r18, r22
    25c8:	77 23       	and	r23, r23
    25ca:	24 f4       	brge	.+8      	; 0x25d4 <data_check+0x164>
    25cc:	22 27       	eor	r18, r18
    25ce:	33 27       	eor	r19, r19
    25d0:	26 1b       	sub	r18, r22
    25d2:	37 0b       	sbc	r19, r23
    25d4:	b9 01       	movw	r22, r18
    25d6:	33 0f       	add	r19, r19
    25d8:	88 0b       	sbc	r24, r24
    25da:	99 0b       	sbc	r25, r25
    25dc:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatsisf>
    25e0:	9b 01       	movw	r18, r22
    25e2:	ac 01       	movw	r20, r24
    25e4:	69 81       	ldd	r22, Y+1	; 0x01
    25e6:	7a 81       	ldd	r23, Y+2	; 0x02
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	0e 94 83 24 	call	0x4906	; 0x4906 <__gesf2>
    25f0:	88 23       	and	r24, r24
    25f2:	4c f0       	brlt	.+18     	; 0x2606 <data_check+0x196>
    25f4:	a5 01       	movw	r20, r10
    25f6:	94 01       	movw	r18, r8
    25f8:	c3 01       	movw	r24, r6
    25fa:	b2 01       	movw	r22, r4
    25fc:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    2600:	2b 01       	movw	r4, r22
    2602:	3c 01       	movw	r6, r24
    2604:	33 94       	inc	r3
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	8d 83       	std	Y+5, r24	; 0x05
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	05 97       	sbiw	r24, 0x05	; 5
    2612:	09 f0       	breq	.+2      	; 0x2616 <data_check+0x1a6>
    2614:	b9 cf       	rjmp	.-142    	; 0x2588 <data_check+0x118>
    2616:	33 20       	and	r3, r3
    2618:	69 f0       	breq	.+26     	; 0x2634 <data_check+0x1c4>
    261a:	63 2d       	mov	r22, r3
    261c:	70 e0       	ldi	r23, 0x00	; 0
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    2626:	9b 01       	movw	r18, r22
    2628:	ac 01       	movw	r20, r24
    262a:	c3 01       	movw	r24, r6
    262c:	b2 01       	movw	r22, r4
    262e:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    2632:	04 c0       	rjmp	.+8      	; 0x263c <data_check+0x1cc>
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	80 e8       	ldi	r24, 0x80	; 128
    263a:	9f eb       	ldi	r25, 0xBF	; 191
    263c:	26 96       	adiw	r28, 0x06	; 6
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	ff 90       	pop	r15
    264c:	ef 90       	pop	r14
    264e:	df 90       	pop	r13
    2650:	cf 90       	pop	r12
    2652:	bf 90       	pop	r11
    2654:	af 90       	pop	r10
    2656:	9f 90       	pop	r9
    2658:	8f 90       	pop	r8
    265a:	7f 90       	pop	r7
    265c:	6f 90       	pop	r6
    265e:	5f 90       	pop	r5
    2660:	4f 90       	pop	r4
    2662:	3f 90       	pop	r3
    2664:	08 95       	ret

00002666 <data_collect>:
    2666:	af 92       	push	r10
    2668:	bf 92       	push	r11
    266a:	cf 92       	push	r12
    266c:	df 92       	push	r13
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	00 d0       	rcall	.+0      	; 0x267c <data_collect+0x16>
    267c:	00 d0       	rcall	.+0      	; 0x267e <data_collect+0x18>
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	5c 01       	movw	r10, r24
    2684:	8b 01       	movw	r16, r22
    2686:	16 dd       	rcall	.-1492   	; 0x20b4 <get_pressure>
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2694:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2698:	69 83       	std	Y+1, r22	; 0x01
    269a:	7a 83       	std	Y+2, r23	; 0x02
    269c:	8b 83       	std	Y+3, r24	; 0x03
    269e:	9c 83       	std	Y+4, r25	; 0x04
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	be 01       	movw	r22, r28
    26a6:	6f 5f       	subi	r22, 0xFF	; 255
    26a8:	7f 4f       	sbci	r23, 0xFF	; 255
    26aa:	c8 01       	movw	r24, r16
    26ac:	7e db       	rcall	.-2308   	; 0x1daa <rb32_write>
    26ae:	c8 01       	movw	r24, r16
    26b0:	df de       	rcall	.-578    	; 0x2470 <data_check>
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e2       	ldi	r20, 0x20	; 32
    26b8:	51 e4       	ldi	r21, 0x41	; 65
    26ba:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    26be:	6b 01       	movw	r12, r22
    26c0:	7c 01       	movw	r14, r24
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f eb       	ldi	r21, 0xBF	; 191
    26ca:	0e 94 34 23 	call	0x4668	; 0x4668 <__cmpsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	d1 f1       	breq	.+116    	; 0x2746 <data_collect+0xe0>
    26d2:	c0 92 36 21 	sts	0x2136, r12	; 0x802136 <press>
    26d6:	d0 92 37 21 	sts	0x2137, r13	; 0x802137 <press+0x1>
    26da:	e0 92 38 21 	sts	0x2138, r14	; 0x802138 <press+0x2>
    26de:	f0 92 39 21 	sts	0x2139, r15	; 0x802139 <press+0x3>
    26e2:	c7 01       	movw	r24, r14
    26e4:	b6 01       	movw	r22, r12
    26e6:	89 dd       	rcall	.-1262   	; 0x21fa <get_altitude>
    26e8:	60 93 2e 21 	sts	0x212E, r22	; 0x80212e <alt>
    26ec:	70 93 2f 21 	sts	0x212F, r23	; 0x80212f <alt+0x1>
    26f0:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <alt+0x2>
    26f4:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <alt+0x3>
    26f8:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <alt>
    26fc:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <alt+0x1>
    2700:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <alt+0x2>
    2704:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <alt+0x3>
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	48 ec       	ldi	r20, 0xC8	; 200
    270e:	52 e4       	ldi	r21, 0x42	; 66
    2710:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2714:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2718:	6d 83       	std	Y+5, r22	; 0x05
    271a:	7e 83       	std	Y+6, r23	; 0x06
    271c:	41 e0       	ldi	r20, 0x01	; 1
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	be 01       	movw	r22, r28
    2722:	6b 5f       	subi	r22, 0xFB	; 251
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	c5 01       	movw	r24, r10
    2728:	ca da       	rcall	.-2668   	; 0x1cbe <rb16_write>
    272a:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    272e:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    2732:	c5 01       	movw	r24, r10
    2734:	ea dd       	rcall	.-1068   	; 0x230a <diff>
    2736:	60 93 26 21 	sts	0x2126, r22	; 0x802126 <velocity>
    273a:	70 93 27 21 	sts	0x2127, r23	; 0x802127 <velocity+0x1>
    273e:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <velocity+0x2>
    2742:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <velocity+0x3>
    2746:	83 e3       	ldi	r24, 0x33	; 51
    2748:	93 e1       	ldi	r25, 0x13	; 19
    274a:	a5 e9       	ldi	r26, 0x95	; 149
    274c:	b3 e4       	ldi	r27, 0x43	; 67
    274e:	80 93 32 21 	sts	0x2132, r24	; 0x802132 <temp>
    2752:	90 93 33 21 	sts	0x2133, r25	; 0x802133 <temp+0x1>
    2756:	a0 93 34 21 	sts	0x2134, r26	; 0x802134 <temp+0x2>
    275a:	b0 93 35 21 	sts	0x2135, r27	; 0x802135 <temp+0x3>
    275e:	ac dd       	rcall	.-1192   	; 0x22b8 <get_voltage>
    2760:	60 93 2a 21 	sts	0x212A, r22	; 0x80212a <volt>
    2764:	70 93 2b 21 	sts	0x212B, r23	; 0x80212b <volt+0x1>
    2768:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <volt+0x2>
    276c:	90 93 2d 21 	sts	0x212D, r25	; 0x80212d <volt+0x3>
    2770:	26 96       	adiw	r28, 0x06	; 6
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	bf 90       	pop	r11
    2788:	af 90       	pop	r10
    278a:	08 95       	ret

0000278c <state_check>:
    278c:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <state>
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	81 f1       	breq	.+96     	; 0x27f4 <state_check+0x68>
    2794:	38 f0       	brcs	.+14     	; 0x27a4 <state_check+0x18>
    2796:	82 30       	cpi	r24, 0x02	; 2
    2798:	09 f4       	brne	.+2      	; 0x279c <state_check+0x10>
    279a:	55 c0       	rjmp	.+170    	; 0x2846 <state_check+0xba>
    279c:	83 30       	cpi	r24, 0x03	; 3
    279e:	09 f4       	brne	.+2      	; 0x27a2 <state_check+0x16>
    27a0:	fc c0       	rjmp	.+504    	; 0x299a <state_check+0x20e>
    27a2:	7c c0       	rjmp	.+248    	; 0x289c <state_check+0x110>
    27a4:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <velocity>
    27a8:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <velocity+0x1>
    27ac:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <velocity+0x2>
    27b0:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <velocity+0x3>
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e4       	ldi	r20, 0x40	; 64
    27ba:	50 e4       	ldi	r21, 0x40	; 64
    27bc:	0e 94 34 23 	call	0x4668	; 0x4668 <__cmpsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	0c f0       	brlt	.+2      	; 0x27c6 <state_check+0x3a>
    27c4:	ea c0       	rjmp	.+468    	; 0x299a <state_check+0x20e>
    27c6:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <alt>
    27ca:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <alt+0x1>
    27ce:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <alt+0x2>
    27d2:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <alt+0x3>
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	41 ee       	ldi	r20, 0xE1	; 225
    27dc:	53 e4       	ldi	r21, 0x43	; 67
    27de:	0e 94 83 24 	call	0x4906	; 0x4906 <__gesf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	0c f0       	brlt	.+2      	; 0x27e8 <state_check+0x5c>
    27e6:	d9 c0       	rjmp	.+434    	; 0x299a <state_check+0x20e>
    27e8:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <state>
    27ec:	8f 5f       	subi	r24, 0xFF	; 255
    27ee:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <state>
    27f2:	08 95       	ret
    27f4:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <velocity>
    27f8:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <velocity+0x1>
    27fc:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <velocity+0x2>
    2800:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <velocity+0x3>
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e4       	ldi	r20, 0x40	; 64
    280a:	50 e4       	ldi	r21, 0x40	; 64
    280c:	0e 94 34 23 	call	0x4668	; 0x4668 <__cmpsf2>
    2810:	88 23       	and	r24, r24
    2812:	84 f4       	brge	.+32     	; 0x2834 <state_check+0xa8>
    2814:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <alt>
    2818:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <alt+0x1>
    281c:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <alt+0x2>
    2820:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <alt+0x3>
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	41 ee       	ldi	r20, 0xE1	; 225
    282a:	53 e4       	ldi	r21, 0x43	; 67
    282c:	0e 94 34 23 	call	0x4668	; 0x4668 <__cmpsf2>
    2830:	88 23       	and	r24, r24
    2832:	1c f0       	brlt	.+6      	; 0x283a <state_check+0xae>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <released>
    283a:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <state>
    283e:	8f 5f       	subi	r24, 0xFF	; 255
    2840:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <state>
    2844:	08 95       	ret
    2846:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <velocity>
    284a:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <velocity+0x1>
    284e:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <velocity+0x2>
    2852:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <velocity+0x3>
    2856:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    285a:	9b 01       	movw	r18, r22
    285c:	77 23       	and	r23, r23
    285e:	24 f4       	brge	.+8      	; 0x2868 <state_check+0xdc>
    2860:	22 27       	eor	r18, r18
    2862:	33 27       	eor	r19, r19
    2864:	26 1b       	sub	r18, r22
    2866:	37 0b       	sbc	r19, r23
    2868:	23 30       	cpi	r18, 0x03	; 3
    286a:	31 05       	cpc	r19, r1
    286c:	8c f0       	brlt	.+34     	; 0x2890 <state_check+0x104>
    286e:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <alt>
    2872:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <alt+0x1>
    2876:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <alt+0x2>
    287a:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <alt+0x3>
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	0e 94 34 23 	call	0x4668	; 0x4668 <__cmpsf2>
    288a:	88 23       	and	r24, r24
    288c:	0c f0       	brlt	.+2      	; 0x2890 <state_check+0x104>
    288e:	85 c0       	rjmp	.+266    	; 0x299a <state_check+0x20e>
    2890:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <state>
    2894:	8f 5f       	subi	r24, 0xFF	; 255
    2896:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <state>
    289a:	08 95       	ret
    289c:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <velocity>
    28a0:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <velocity+0x1>
    28a4:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <velocity+0x2>
    28a8:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <velocity+0x3>
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e4       	ldi	r20, 0x40	; 64
    28b2:	50 e4       	ldi	r21, 0x40	; 64
    28b4:	0e 94 83 24 	call	0x4906	; 0x4906 <__gesf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	14 f4       	brge	.+4      	; 0x28c0 <state_check+0x134>
    28bc:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <state>
    28c0:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <alt>
    28c4:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <alt+0x1>
    28c8:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <alt+0x2>
    28cc:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <alt+0x3>
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	41 ee       	ldi	r20, 0xE1	; 225
    28d6:	53 e4       	ldi	r21, 0x43	; 67
    28d8:	0e 94 83 24 	call	0x4906	; 0x4906 <__gesf2>
    28dc:	18 16       	cp	r1, r24
    28de:	9c f4       	brge	.+38     	; 0x2906 <state_check+0x17a>
    28e0:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <velocity>
    28e4:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <velocity+0x1>
    28e8:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <velocity+0x2>
    28ec:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <velocity+0x3>
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e4       	ldi	r20, 0x40	; 64
    28f6:	50 e4       	ldi	r21, 0x40	; 64
    28f8:	0e 94 34 23 	call	0x4668	; 0x4668 <__cmpsf2>
    28fc:	88 23       	and	r24, r24
    28fe:	1c f4       	brge	.+6      	; 0x2906 <state_check+0x17a>
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <state>
    2906:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <alt>
    290a:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <alt+0x1>
    290e:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <alt+0x2>
    2912:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <alt+0x3>
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	41 ee       	ldi	r20, 0xE1	; 225
    291c:	53 e4       	ldi	r21, 0x43	; 67
    291e:	0e 94 34 23 	call	0x4668	; 0x4668 <__cmpsf2>
    2922:	88 23       	and	r24, r24
    2924:	9c f4       	brge	.+38     	; 0x294c <state_check+0x1c0>
    2926:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <velocity>
    292a:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <velocity+0x1>
    292e:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <velocity+0x2>
    2932:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <velocity+0x3>
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e4       	ldi	r20, 0x40	; 64
    293c:	50 e4       	ldi	r21, 0x40	; 64
    293e:	0e 94 34 23 	call	0x4668	; 0x4668 <__cmpsf2>
    2942:	88 23       	and	r24, r24
    2944:	1c f4       	brge	.+6      	; 0x294c <state_check+0x1c0>
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <state>
    294c:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <velocity>
    2950:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <velocity+0x1>
    2954:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <velocity+0x2>
    2958:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <velocity+0x3>
    295c:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2960:	9b 01       	movw	r18, r22
    2962:	77 23       	and	r23, r23
    2964:	24 f4       	brge	.+8      	; 0x296e <state_check+0x1e2>
    2966:	22 27       	eor	r18, r18
    2968:	33 27       	eor	r19, r19
    296a:	26 1b       	sub	r18, r22
    296c:	37 0b       	sbc	r19, r23
    296e:	23 30       	cpi	r18, 0x03	; 3
    2970:	31 05       	cpc	r19, r1
    2972:	9c f4       	brge	.+38     	; 0x299a <state_check+0x20e>
    2974:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <alt>
    2978:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <alt+0x1>
    297c:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <alt+0x2>
    2980:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <alt+0x3>
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e2       	ldi	r20, 0x20	; 32
    298a:	51 e4       	ldi	r21, 0x41	; 65
    298c:	0e 94 34 23 	call	0x4668	; 0x4668 <__cmpsf2>
    2990:	88 23       	and	r24, r24
    2992:	1c f4       	brge	.+6      	; 0x299a <state_check+0x20e>
    2994:	83 e0       	ldi	r24, 0x03	; 3
    2996:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <state>
    299a:	08 95       	ret

0000299c <servo_pid>:
    299c:	8f 92       	push	r8
    299e:	9f 92       	push	r9
    29a0:	af 92       	push	r10
    29a2:	bf 92       	push	r11
    29a4:	cf 92       	push	r12
    29a6:	df 92       	push	r13
    29a8:	ef 92       	push	r14
    29aa:	ff 92       	push	r15
    29ac:	0f 93       	push	r16
    29ae:	1f 93       	push	r17
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	7c 01       	movw	r14, r24
    29b6:	c0 e0       	ldi	r28, 0x00	; 0
    29b8:	d0 e0       	ldi	r29, 0x00	; 0
    29ba:	00 e0       	ldi	r16, 0x00	; 0
    29bc:	10 e0       	ldi	r17, 0x00	; 0
    29be:	be 01       	movw	r22, r28
    29c0:	c7 01       	movw	r24, r14
    29c2:	c6 d9       	rcall	.-3188   	; 0x1d50 <rb16_get_nth>
    29c4:	08 0f       	add	r16, r24
    29c6:	19 1f       	adc	r17, r25
    29c8:	21 96       	adiw	r28, 0x01	; 1
    29ca:	ca 30       	cpi	r28, 0x0A	; 10
    29cc:	d1 05       	cpc	r29, r1
    29ce:	b9 f7       	brne	.-18     	; 0x29be <servo_pid+0x22>
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	70 e0       	ldi	r23, 0x00	; 0
    29d4:	c7 01       	movw	r24, r14
    29d6:	bc d9       	rcall	.-3208   	; 0x1d50 <rb16_get_nth>
    29d8:	ec 01       	movw	r28, r24
    29da:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    29de:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    29e2:	c7 01       	movw	r24, r14
    29e4:	92 dc       	rcall	.-1756   	; 0x230a <diff>
    29e6:	6b 01       	movw	r12, r22
    29e8:	7c 01       	movw	r14, r24
    29ea:	be 01       	movw	r22, r28
    29ec:	dd 0f       	add	r29, r29
    29ee:	88 0b       	sbc	r24, r24
    29f0:	99 0b       	sbc	r25, r25
    29f2:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatsisf>
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	a9 01       	movw	r20, r18
    29fc:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	48 ec       	ldi	r20, 0xC8	; 200
    2a06:	52 e4       	ldi	r21, 0x42	; 66
    2a08:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    2a0c:	4b 01       	movw	r8, r22
    2a0e:	5c 01       	movw	r10, r24
    2a10:	b8 01       	movw	r22, r16
    2a12:	11 0f       	add	r17, r17
    2a14:	88 0b       	sbc	r24, r24
    2a16:	99 0b       	sbc	r25, r25
    2a18:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatsisf>
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	a9 01       	movw	r20, r18
    2a22:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	48 ec       	ldi	r20, 0xC8	; 200
    2a2c:	52 e4       	ldi	r21, 0x42	; 66
    2a2e:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    2a32:	9b 01       	movw	r18, r22
    2a34:	ac 01       	movw	r20, r24
    2a36:	c5 01       	movw	r24, r10
    2a38:	b4 01       	movw	r22, r8
    2a3a:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    2a3e:	4b 01       	movw	r8, r22
    2a40:	5c 01       	movw	r10, r24
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	a9 01       	movw	r20, r18
    2a48:	c7 01       	movw	r24, r14
    2a4a:	b6 01       	movw	r22, r12
    2a4c:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2a50:	9b 01       	movw	r18, r22
    2a52:	ac 01       	movw	r20, r24
    2a54:	c5 01       	movw	r24, r10
    2a56:	b4 01       	movw	r22, r8
    2a58:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e8       	ldi	r19, 0x80	; 128
    2a60:	4b eb       	ldi	r20, 0xBB	; 187
    2a62:	54 e4       	ldi	r21, 0x44	; 68
    2a64:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    2a68:	0e 94 a5 23 	call	0x474a	; 0x474a <__fixunssfsi>
    2a6c:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <servo_pulse>
    2a70:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <servo_pulse+0x1>
    2a74:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <servo_pulse>
    2a78:	70 91 1a 20 	lds	r23, 0x201A	; 0x80201a <servo_pulse+0x1>
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	4a e7       	ldi	r20, 0x7A	; 122
    2a8a:	54 e4       	ldi	r21, 0x44	; 68
    2a8c:	0e 94 38 23 	call	0x4670	; 0x4670 <__divsf3>
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a ef       	ldi	r20, 0xFA	; 250
    2a96:	53 e4       	ldi	r21, 0x43	; 67
    2a98:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2a9c:	0e 94 a5 23 	call	0x474a	; 0x474a <__fixunssfsi>
    2aa0:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    2aa4:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
    2ab8:	bf 90       	pop	r11
    2aba:	af 90       	pop	r10
    2abc:	9f 90       	pop	r9
    2abe:	8f 90       	pop	r8
    2ac0:	08 95       	ret

00002ac2 <clock_init>:
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	85 e0       	ldi	r24, 0x05	; 5
    2ac6:	36 da       	rcall	.-2964   	; 0x1f34 <sysclk_enable_module>
    2ac8:	e0 e0       	ldi	r30, 0x00	; 0
    2aca:	fa e0       	ldi	r31, 0x0A	; 10
    2acc:	87 e0       	ldi	r24, 0x07	; 7
    2ace:	80 83       	st	Z, r24
    2ad0:	81 e1       	ldi	r24, 0x11	; 17
    2ad2:	9a e7       	ldi	r25, 0x7A	; 122
    2ad4:	86 a3       	std	Z+38, r24	; 0x26
    2ad6:	97 a3       	std	Z+39, r25	; 0x27
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	86 83       	std	Z+6, r24	; 0x06
    2adc:	08 95       	ret

00002ade <calc_rpm>:
    2ade:	cf 92       	push	r12
    2ae0:	df 92       	push	r13
    2ae2:	ef 92       	push	r14
    2ae4:	ff 92       	push	r15
    2ae6:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <ticks_per_sec>
    2aea:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <ticks_per_sec+0x1>
    2aee:	c0 90 08 21 	lds	r12, 0x2108	; 0x802108 <rpm>
    2af2:	d0 90 09 21 	lds	r13, 0x2109	; 0x802109 <rpm+0x1>
    2af6:	e0 90 0a 21 	lds	r14, 0x210A	; 0x80210a <rpm+0x2>
    2afa:	f0 90 0b 21 	lds	r15, 0x210B	; 0x80210b <rpm+0x3>
    2afe:	2c e3       	ldi	r18, 0x3C	; 60
    2b00:	28 9f       	mul	r18, r24
    2b02:	b0 01       	movw	r22, r0
    2b04:	29 9f       	mul	r18, r25
    2b06:	70 0d       	add	r23, r0
    2b08:	11 24       	eor	r1, r1
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__floatunsisf>
    2b12:	a7 01       	movw	r20, r14
    2b14:	96 01       	movw	r18, r12
    2b16:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__addsf3>
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	5f e3       	ldi	r21, 0x3F	; 63
    2b22:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2b26:	60 93 08 21 	sts	0x2108, r22	; 0x802108 <rpm>
    2b2a:	70 93 09 21 	sts	0x2109, r23	; 0x802109 <rpm+0x1>
    2b2e:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <rpm+0x2>
    2b32:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <rpm+0x3>
    2b36:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <ticks_per_sec>
    2b3a:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <ticks_per_sec+0x1>
    2b3e:	ff 90       	pop	r15
    2b40:	ef 90       	pop	r14
    2b42:	df 90       	pop	r13
    2b44:	cf 90       	pop	r12
    2b46:	08 95       	ret

00002b48 <cali_alt>:
    2b48:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <press>
    2b4c:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <press+0x1>
    2b50:	a0 91 38 21 	lds	r26, 0x2138	; 0x802138 <press+0x2>
    2b54:	b0 91 39 21 	lds	r27, 0x2139	; 0x802139 <press+0x3>
    2b58:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <ground_p>
    2b5c:	90 93 2c 20 	sts	0x202C, r25	; 0x80202c <ground_p+0x1>
    2b60:	a0 93 2d 20 	sts	0x202D, r26	; 0x80202d <ground_p+0x2>
    2b64:	b0 93 2e 20 	sts	0x202E, r27	; 0x80202e <ground_p+0x3>
    2b68:	83 e3       	ldi	r24, 0x33	; 51
    2b6a:	93 e1       	ldi	r25, 0x13	; 19
    2b6c:	a5 e9       	ldi	r26, 0x95	; 149
    2b6e:	b3 e4       	ldi	r27, 0x43	; 67
    2b70:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    2b74:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    2b78:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    2b7c:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    2b80:	08 95       	ret

00002b82 <cali_ang>:
    2b82:	0e 94 8c 0c 	call	0x1918	; 0x1918 <imu_heading>
    2b86:	60 93 48 21 	sts	0x2148, r22	; 0x802148 <ref_yaw>
    2b8a:	70 93 49 21 	sts	0x2149, r23	; 0x802149 <ref_yaw+0x1>
    2b8e:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <ref_yaw+0x2>
    2b92:	90 93 4b 21 	sts	0x214B, r25	; 0x80214b <ref_yaw+0x3>
    2b96:	08 95       	ret

00002b98 <calibrate>:
    2b98:	d7 df       	rcall	.-82     	; 0x2b48 <cali_alt>
    2b9a:	f3 cf       	rjmp	.-26     	; 0x2b82 <cali_ang>
    2b9c:	08 95       	ret

00002b9e <servo_release>:
    2b9e:	e0 e0       	ldi	r30, 0x00	; 0
    2ba0:	f9 e0       	ldi	r31, 0x09	; 9
    2ba2:	86 a1       	ldd	r24, Z+38	; 0x26
    2ba4:	97 a1       	ldd	r25, Z+39	; 0x27
    2ba6:	88 5e       	subi	r24, 0xE8	; 232
    2ba8:	93 40       	sbci	r25, 0x03	; 3
    2baa:	80 a7       	std	Z+40, r24	; 0x28
    2bac:	91 a7       	std	Z+41, r25	; 0x29
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <released>
    2bb4:	08 95       	ret

00002bb6 <servo_close>:
	
	released = 1;
}

void servo_close(void){
	TCD0.CCA = TCD0.PER - 600;
    2bb6:	e0 e0       	ldi	r30, 0x00	; 0
    2bb8:	f9 e0       	ldi	r31, 0x09	; 9
    2bba:	86 a1       	ldd	r24, Z+38	; 0x26
    2bbc:	97 a1       	ldd	r25, Z+39	; 0x27
    2bbe:	88 55       	subi	r24, 0x58	; 88
    2bc0:	92 40       	sbci	r25, 0x02	; 2
    2bc2:	80 a7       	std	Z+40, r24	; 0x28
    2bc4:	91 a7       	std	Z+41, r25	; 0x29
	
	released = 0;
    2bc6:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <released>
    2bca:	08 95       	ret

00002bcc <packet>:
}

void packet(void){
    2bcc:	2f 92       	push	r2
    2bce:	3f 92       	push	r3
    2bd0:	4f 92       	push	r4
    2bd2:	5f 92       	push	r5
    2bd4:	6f 92       	push	r6
    2bd6:	7f 92       	push	r7
    2bd8:	8f 92       	push	r8
    2bda:	9f 92       	push	r9
    2bdc:	af 92       	push	r10
    2bde:	bf 92       	push	r11
    2be0:	cf 92       	push	r12
    2be2:	df 92       	push	r13
    2be4:	ef 92       	push	r14
    2be6:	ff 92       	push	r15
    2be8:	0f 93       	push	r16
    2bea:	1f 93       	push	r17
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	e9 97       	sbiw	r28, 0x39	; 57
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	de bf       	out	0x3e, r29	; 62
	//XBEE_spi_write(str);
	packets++;
    2bfa:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <packets>
    2bfe:	90 91 3b 21 	lds	r25, 0x213B	; 0x80213b <packets+0x1>
    2c02:	01 96       	adiw	r24, 0x01	; 1
    2c04:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <packets>
    2c08:	90 93 3b 21 	sts	0x213B, r25	; 0x80213b <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    2c0c:	60 91 04 21 	lds	r22, 0x2104	; 0x802104 <angle>
    2c10:	70 91 05 21 	lds	r23, 0x2105	; 0x802105 <angle+0x1>
    2c14:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <angle+0x2>
    2c18:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <angle+0x3>
    2c1c:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <state>
    2c20:	29 83       	std	Y+1, r18	; 0x01
    2c22:	40 90 08 21 	lds	r4, 0x2108	; 0x802108 <rpm>
    2c26:	50 90 09 21 	lds	r5, 0x2109	; 0x802109 <rpm+0x1>
    2c2a:	60 90 0a 21 	lds	r6, 0x210A	; 0x80210a <rpm+0x2>
    2c2e:	70 90 0b 21 	lds	r7, 0x210B	; 0x80210b <rpm+0x3>
    2c32:	80 90 0c 21 	lds	r8, 0x210C	; 0x80210c <roll>
    2c36:	90 90 0d 21 	lds	r9, 0x210D	; 0x80210d <roll+0x1>
    2c3a:	a0 90 0e 21 	lds	r10, 0x210E	; 0x80210e <roll+0x2>
    2c3e:	b0 90 0f 21 	lds	r11, 0x210F	; 0x80210f <roll+0x3>
    2c42:	c0 90 10 21 	lds	r12, 0x2110	; 0x802110 <pitch>
    2c46:	d0 90 11 21 	lds	r13, 0x2111	; 0x802111 <pitch+0x1>
    2c4a:	e0 90 12 21 	lds	r14, 0x2112	; 0x802112 <pitch+0x2>
    2c4e:	f0 90 13 21 	lds	r15, 0x2113	; 0x802113 <pitch+0x3>
    2c52:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <gps_sats>
    2c56:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <gps_sats+0x1>
    2c5a:	48 af       	std	Y+56, r20	; 0x38
    2c5c:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    2c5e:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <gps_alt>
    2c62:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <gps_alt+0x1>
    2c66:	40 91 18 21 	lds	r20, 0x2118	; 0x802118 <gps_alt+0x2>
    2c6a:	50 91 19 21 	lds	r21, 0x2119	; 0x802119 <gps_alt+0x3>
    2c6e:	2a 83       	std	Y+2, r18	; 0x02
    2c70:	3b 83       	std	Y+3, r19	; 0x03
    2c72:	4c 83       	std	Y+4, r20	; 0x04
    2c74:	5d 83       	std	Y+5, r21	; 0x05
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2c76:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <gps_alt>
    2c7a:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <gps_alt+0x1>
    2c7e:	40 91 18 21 	lds	r20, 0x2118	; 0x802118 <gps_alt+0x2>
    2c82:	50 91 19 21 	lds	r21, 0x2119	; 0x802119 <gps_alt+0x3>
    2c86:	2e 83       	std	Y+6, r18	; 0x06
    2c88:	3f 83       	std	Y+7, r19	; 0x07
    2c8a:	48 87       	std	Y+8, r20	; 0x08
    2c8c:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2c8e:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <gps_long>
    2c92:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <gps_long+0x1>
    2c96:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <gps_long+0x2>
    2c9a:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <gps_long+0x3>
    2c9e:	2a 87       	std	Y+10, r18	; 0x0a
    2ca0:	3b 87       	std	Y+11, r19	; 0x0b
    2ca2:	4c 87       	std	Y+12, r20	; 0x0c
    2ca4:	5d 87       	std	Y+13, r21	; 0x0d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2ca6:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <gps_long>
    2caa:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <gps_long+0x1>
    2cae:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <gps_long+0x2>
    2cb2:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <gps_long+0x3>
    2cb6:	2e 87       	std	Y+14, r18	; 0x0e
    2cb8:	3f 87       	std	Y+15, r19	; 0x0f
    2cba:	48 8b       	std	Y+16, r20	; 0x10
    2cbc:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2cbe:	20 91 1e 21 	lds	r18, 0x211E	; 0x80211e <gps_lat>
    2cc2:	30 91 1f 21 	lds	r19, 0x211F	; 0x80211f <gps_lat+0x1>
    2cc6:	40 91 20 21 	lds	r20, 0x2120	; 0x802120 <gps_lat+0x2>
    2cca:	50 91 21 21 	lds	r21, 0x2121	; 0x802121 <gps_lat+0x3>
    2cce:	2a 8b       	std	Y+18, r18	; 0x12
    2cd0:	3b 8b       	std	Y+19, r19	; 0x13
    2cd2:	4c 8b       	std	Y+20, r20	; 0x14
    2cd4:	5d 8b       	std	Y+21, r21	; 0x15
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2cd6:	20 91 1e 21 	lds	r18, 0x211E	; 0x80211e <gps_lat>
    2cda:	30 91 1f 21 	lds	r19, 0x211F	; 0x80211f <gps_lat+0x1>
    2cde:	40 91 20 21 	lds	r20, 0x2120	; 0x802120 <gps_lat+0x2>
    2ce2:	50 91 21 21 	lds	r21, 0x2121	; 0x802121 <gps_lat+0x3>
    2ce6:	2e 8b       	std	Y+22, r18	; 0x16
    2ce8:	3f 8b       	std	Y+23, r19	; 0x17
    2cea:	48 8f       	std	Y+24, r20	; 0x18
    2cec:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    2cee:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <gps_t>
    2cf2:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <gps_t+0x1>
    2cf6:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <gps_t+0x2>
    2cfa:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <gps_t+0x3>
    2cfe:	2a 8f       	std	Y+26, r18	; 0x1a
    2d00:	3b 8f       	std	Y+27, r19	; 0x1b
    2d02:	4c 8f       	std	Y+28, r20	; 0x1c
    2d04:	5d 8f       	std	Y+29, r21	; 0x1d
    2d06:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <gps_t>
    2d0a:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <gps_t+0x1>
    2d0e:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <gps_t+0x2>
    2d12:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <gps_t+0x3>
    2d16:	2e 8f       	std	Y+30, r18	; 0x1e
    2d18:	3f 8f       	std	Y+31, r19	; 0x1f
    2d1a:	48 a3       	std	Y+32, r20	; 0x20
    2d1c:	59 a3       	std	Y+33, r21	; 0x21
    2d1e:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <gps_t>
    2d22:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <gps_t+0x1>
    2d26:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <gps_t+0x2>
    2d2a:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <gps_t+0x3>
    2d2e:	2a a3       	std	Y+34, r18	; 0x22
    2d30:	3b a3       	std	Y+35, r19	; 0x23
    2d32:	4c a3       	std	Y+36, r20	; 0x24
    2d34:	5d a3       	std	Y+37, r21	; 0x25
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2d36:	20 91 2a 21 	lds	r18, 0x212A	; 0x80212a <volt>
    2d3a:	30 91 2b 21 	lds	r19, 0x212B	; 0x80212b <volt+0x1>
    2d3e:	40 91 2c 21 	lds	r20, 0x212C	; 0x80212c <volt+0x2>
    2d42:	50 91 2d 21 	lds	r21, 0x212D	; 0x80212d <volt+0x3>
    2d46:	2e a3       	std	Y+38, r18	; 0x26
    2d48:	3f a3       	std	Y+39, r19	; 0x27
    2d4a:	48 a7       	std	Y+40, r20	; 0x28
    2d4c:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    2d4e:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <temp>
    2d52:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <temp+0x1>
    2d56:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <temp+0x2>
    2d5a:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <temp+0x3>
    2d5e:	2a a7       	std	Y+42, r18	; 0x2a
    2d60:	3b a7       	std	Y+43, r19	; 0x2b
    2d62:	4c a7       	std	Y+44, r20	; 0x2c
    2d64:	5d a7       	std	Y+45, r21	; 0x2d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2d66:	20 91 36 21 	lds	r18, 0x2136	; 0x802136 <press>
    2d6a:	30 91 37 21 	lds	r19, 0x2137	; 0x802137 <press+0x1>
    2d6e:	40 91 38 21 	lds	r20, 0x2138	; 0x802138 <press+0x2>
    2d72:	50 91 39 21 	lds	r21, 0x2139	; 0x802139 <press+0x3>
    2d76:	2e a7       	std	Y+46, r18	; 0x2e
    2d78:	3f a7       	std	Y+47, r19	; 0x2f
    2d7a:	48 ab       	std	Y+48, r20	; 0x30
    2d7c:	59 ab       	std	Y+49, r21	; 0x31
    2d7e:	20 91 2e 21 	lds	r18, 0x212E	; 0x80212e <alt>
    2d82:	30 91 2f 21 	lds	r19, 0x212F	; 0x80212f <alt+0x1>
    2d86:	40 91 30 21 	lds	r20, 0x2130	; 0x802130 <alt+0x2>
    2d8a:	50 91 31 21 	lds	r21, 0x2131	; 0x802131 <alt+0x3>
    2d8e:	2a ab       	std	Y+50, r18	; 0x32
    2d90:	3b ab       	std	Y+51, r19	; 0x33
    2d92:	4c ab       	std	Y+52, r20	; 0x34
    2d94:	5d ab       	std	Y+53, r21	; 0x35
    2d96:	00 91 3a 21 	lds	r16, 0x213A	; 0x80213a <packets>
    2d9a:	10 91 3b 21 	lds	r17, 0x213B	; 0x80213b <packets+0x1>
    2d9e:	20 90 3e 21 	lds	r2, 0x213E	; 0x80213e <timer>
    2da2:	30 90 3f 21 	lds	r3, 0x213F	; 0x80213f <timer+0x1>
    2da6:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <timer>
    2daa:	50 91 3f 21 	lds	r21, 0x213F	; 0x80213f <timer+0x1>
    2dae:	4e ab       	std	Y+54, r20	; 0x36
    2db0:	5f ab       	std	Y+55, r21	; 0x37
    2db2:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2db6:	7f 93       	push	r23
    2db8:	6f 93       	push	r22
    2dba:	1f 92       	push	r1
    2dbc:	59 81       	ldd	r21, Y+1	; 0x01
    2dbe:	5f 93       	push	r21
    2dc0:	c3 01       	movw	r24, r6
    2dc2:	b2 01       	movw	r22, r4
    2dc4:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2dc8:	7f 93       	push	r23
    2dca:	6f 93       	push	r22
    2dcc:	c5 01       	movw	r24, r10
    2dce:	b4 01       	movw	r22, r8
    2dd0:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2dd4:	7f 93       	push	r23
    2dd6:	6f 93       	push	r22
    2dd8:	c7 01       	movw	r24, r14
    2dda:	b6 01       	movw	r22, r12
    2ddc:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2de0:	7f 93       	push	r23
    2de2:	6f 93       	push	r22
    2de4:	89 ad       	ldd	r24, Y+57	; 0x39
    2de6:	8f 93       	push	r24
    2de8:	98 ad       	ldd	r25, Y+56	; 0x38
    2dea:	9f 93       	push	r25
    2dec:	6a 81       	ldd	r22, Y+2	; 0x02
    2dee:	7b 81       	ldd	r23, Y+3	; 0x03
    2df0:	8c 81       	ldd	r24, Y+4	; 0x04
    2df2:	9d 81       	ldd	r25, Y+5	; 0x05
    2df4:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2df8:	9b 01       	movw	r18, r22
    2dfa:	22 0f       	add	r18, r18
    2dfc:	33 1f       	adc	r19, r19
    2dfe:	66 0f       	add	r22, r22
    2e00:	77 1f       	adc	r23, r23
    2e02:	66 0f       	add	r22, r22
    2e04:	77 1f       	adc	r23, r23
    2e06:	66 0f       	add	r22, r22
    2e08:	77 1f       	adc	r23, r23
    2e0a:	c9 01       	movw	r24, r18
    2e0c:	86 0f       	add	r24, r22
    2e0e:	97 1f       	adc	r25, r23
    2e10:	6a e0       	ldi	r22, 0x0A	; 10
    2e12:	70 e0       	ldi	r23, 0x00	; 0
    2e14:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <__divmodhi4>
    2e18:	9f 93       	push	r25
    2e1a:	8f 93       	push	r24
    2e1c:	6e 81       	ldd	r22, Y+6	; 0x06
    2e1e:	7f 81       	ldd	r23, Y+7	; 0x07
    2e20:	88 85       	ldd	r24, Y+8	; 0x08
    2e22:	99 85       	ldd	r25, Y+9	; 0x09
    2e24:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2e28:	7f 93       	push	r23
    2e2a:	6f 93       	push	r22
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	34 e2       	ldi	r19, 0x24	; 36
    2e30:	44 e7       	ldi	r20, 0x74	; 116
    2e32:	59 e4       	ldi	r21, 0x49	; 73
    2e34:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e36:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e38:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e3c:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2e40:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2e44:	20 e4       	ldi	r18, 0x40	; 64
    2e46:	32 e4       	ldi	r19, 0x42	; 66
    2e48:	4f e0       	ldi	r20, 0x0F	; 15
    2e4a:	50 e0       	ldi	r21, 0x00	; 0
    2e4c:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    2e50:	9b 01       	movw	r18, r22
    2e52:	77 23       	and	r23, r23
    2e54:	24 f4       	brge	.+8      	; 0x2e5e <packet+0x292>
    2e56:	22 27       	eor	r18, r18
    2e58:	33 27       	eor	r19, r19
    2e5a:	26 1b       	sub	r18, r22
    2e5c:	37 0b       	sbc	r19, r23
    2e5e:	c9 01       	movw	r24, r18
    2e60:	33 0f       	add	r19, r19
    2e62:	aa 0b       	sbc	r26, r26
    2e64:	bb 0b       	sbc	r27, r27
    2e66:	bf 93       	push	r27
    2e68:	af 93       	push	r26
    2e6a:	9f 93       	push	r25
    2e6c:	8f 93       	push	r24
    2e6e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2e70:	7f 85       	ldd	r23, Y+15	; 0x0f
    2e72:	88 89       	ldd	r24, Y+16	; 0x10
    2e74:	99 89       	ldd	r25, Y+17	; 0x11
    2e76:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2e7a:	7f 93       	push	r23
    2e7c:	6f 93       	push	r22
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	34 e2       	ldi	r19, 0x24	; 36
    2e82:	44 e7       	ldi	r20, 0x74	; 116
    2e84:	59 e4       	ldi	r21, 0x49	; 73
    2e86:	6a 89       	ldd	r22, Y+18	; 0x12
    2e88:	7b 89       	ldd	r23, Y+19	; 0x13
    2e8a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e8c:	9d 89       	ldd	r25, Y+21	; 0x15
    2e8e:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    2e92:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2e96:	20 e4       	ldi	r18, 0x40	; 64
    2e98:	32 e4       	ldi	r19, 0x42	; 66
    2e9a:	4f e0       	ldi	r20, 0x0F	; 15
    2e9c:	50 e0       	ldi	r21, 0x00	; 0
    2e9e:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    2ea2:	9f 93       	push	r25
    2ea4:	8f 93       	push	r24
    2ea6:	7f 93       	push	r23
    2ea8:	6f 93       	push	r22
    2eaa:	6e 89       	ldd	r22, Y+22	; 0x16
    2eac:	7f 89       	ldd	r23, Y+23	; 0x17
    2eae:	88 8d       	ldd	r24, Y+24	; 0x18
    2eb0:	99 8d       	ldd	r25, Y+25	; 0x19
    2eb2:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2eb6:	7f 93       	push	r23
    2eb8:	6f 93       	push	r22
    2eba:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ebc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ebe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ec0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ec2:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2ec6:	0f 2e       	mov	r0, r31
    2ec8:	f4 e6       	ldi	r31, 0x64	; 100
    2eca:	cf 2e       	mov	r12, r31
    2ecc:	d1 2c       	mov	r13, r1
    2ece:	e1 2c       	mov	r14, r1
    2ed0:	f1 2c       	mov	r15, r1
    2ed2:	f0 2d       	mov	r31, r0
    2ed4:	a7 01       	movw	r20, r14
    2ed6:	96 01       	movw	r18, r12
    2ed8:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    2edc:	7f 93       	push	r23
    2ede:	6f 93       	push	r22
    2ee0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2ee2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2ee4:	88 a1       	ldd	r24, Y+32	; 0x20
    2ee6:	99 a1       	ldd	r25, Y+33	; 0x21
    2ee8:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2eec:	0f 2e       	mov	r0, r31
    2eee:	f0 e1       	ldi	r31, 0x10	; 16
    2ef0:	8f 2e       	mov	r8, r31
    2ef2:	f7 e2       	ldi	r31, 0x27	; 39
    2ef4:	9f 2e       	mov	r9, r31
    2ef6:	a1 2c       	mov	r10, r1
    2ef8:	b1 2c       	mov	r11, r1
    2efa:	f0 2d       	mov	r31, r0
    2efc:	a5 01       	movw	r20, r10
    2efe:	94 01       	movw	r18, r8
    2f00:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    2f04:	a7 01       	movw	r20, r14
    2f06:	96 01       	movw	r18, r12
    2f08:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    2f0c:	3f 93       	push	r19
    2f0e:	2f 93       	push	r18
    2f10:	6a a1       	ldd	r22, Y+34	; 0x22
    2f12:	7b a1       	ldd	r23, Y+35	; 0x23
    2f14:	8c a1       	ldd	r24, Y+36	; 0x24
    2f16:	9d a1       	ldd	r25, Y+37	; 0x25
    2f18:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2f1c:	a5 01       	movw	r20, r10
    2f1e:	94 01       	movw	r18, r8
    2f20:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    2f24:	3f 93       	push	r19
    2f26:	2f 93       	push	r18
    2f28:	6e a1       	ldd	r22, Y+38	; 0x26
    2f2a:	7f a1       	ldd	r23, Y+39	; 0x27
    2f2c:	88 a5       	ldd	r24, Y+40	; 0x28
    2f2e:	99 a5       	ldd	r25, Y+41	; 0x29
    2f30:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2f34:	7f 93       	push	r23
    2f36:	6f 93       	push	r22
    2f38:	23 e3       	ldi	r18, 0x33	; 51
    2f3a:	33 e9       	ldi	r19, 0x93	; 147
    2f3c:	48 e8       	ldi	r20, 0x88	; 136
    2f3e:	53 e4       	ldi	r21, 0x43	; 67
    2f40:	6a a5       	ldd	r22, Y+42	; 0x2a
    2f42:	7b a5       	ldd	r23, Y+43	; 0x2b
    2f44:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f46:	9d a5       	ldd	r25, Y+45	; 0x2d
    2f48:	0e 94 cf 22 	call	0x459e	; 0x459e <__subsf3>
    2f4c:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2f50:	7f 93       	push	r23
    2f52:	6f 93       	push	r22
    2f54:	6e a5       	ldd	r22, Y+46	; 0x2e
    2f56:	7f a5       	ldd	r23, Y+47	; 0x2f
    2f58:	88 a9       	ldd	r24, Y+48	; 0x30
    2f5a:	99 a9       	ldd	r25, Y+49	; 0x31
    2f5c:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2f60:	9f 93       	push	r25
    2f62:	8f 93       	push	r24
    2f64:	7f 93       	push	r23
    2f66:	6f 93       	push	r22
    2f68:	6a a9       	ldd	r22, Y+50	; 0x32
    2f6a:	7b a9       	ldd	r23, Y+51	; 0x33
    2f6c:	8c a9       	ldd	r24, Y+52	; 0x34
    2f6e:	9d a9       	ldd	r25, Y+53	; 0x35
    2f70:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    2f74:	7f 93       	push	r23
    2f76:	6f 93       	push	r22
    2f78:	1f 93       	push	r17
    2f7a:	0f 93       	push	r16
    2f7c:	91 01       	movw	r18, r2
    2f7e:	ad ec       	ldi	r26, 0xCD	; 205
    2f80:	bc ec       	ldi	r27, 0xCC	; 204
    2f82:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__umulhisi3>
    2f86:	96 95       	lsr	r25
    2f88:	87 95       	ror	r24
    2f8a:	96 95       	lsr	r25
    2f8c:	87 95       	ror	r24
    2f8e:	96 95       	lsr	r25
    2f90:	87 95       	ror	r24
    2f92:	9c 01       	movw	r18, r24
    2f94:	22 0f       	add	r18, r18
    2f96:	33 1f       	adc	r19, r19
    2f98:	88 0f       	add	r24, r24
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	82 0f       	add	r24, r18
    2fa6:	93 1f       	adc	r25, r19
    2fa8:	28 1a       	sub	r2, r24
    2faa:	39 0a       	sbc	r3, r25
    2fac:	3f 92       	push	r3
    2fae:	2f 92       	push	r2
    2fb0:	2e a9       	ldd	r18, Y+54	; 0x36
    2fb2:	3f a9       	ldd	r19, Y+55	; 0x37
    2fb4:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__umulhisi3>
    2fb8:	96 95       	lsr	r25
    2fba:	87 95       	ror	r24
    2fbc:	96 95       	lsr	r25
    2fbe:	87 95       	ror	r24
    2fc0:	96 95       	lsr	r25
    2fc2:	87 95       	ror	r24
    2fc4:	9f 93       	push	r25
    2fc6:	8f 93       	push	r24
    2fc8:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    2fcc:	8f 93       	push	r24
    2fce:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    2fd2:	8f 93       	push	r24
    2fd4:	2a ea       	ldi	r18, 0xAA	; 170
    2fd6:	31 e2       	ldi	r19, 0x21	; 33
    2fd8:	3f 93       	push	r19
    2fda:	2f 93       	push	r18
    2fdc:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	2a ea       	ldi	r18, 0xAA	; 170
    2fe6:	31 e2       	ldi	r19, 0x21	; 33
    2fe8:	3f 93       	push	r19
    2fea:	2f 93       	push	r18
    2fec:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <printf>
}
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	e9 96       	adiw	r28, 0x39	; 57
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	1f 91       	pop	r17
    3000:	0f 91       	pop	r16
    3002:	ff 90       	pop	r15
    3004:	ef 90       	pop	r14
    3006:	df 90       	pop	r13
    3008:	cf 90       	pop	r12
    300a:	bf 90       	pop	r11
    300c:	af 90       	pop	r10
    300e:	9f 90       	pop	r9
    3010:	8f 90       	pop	r8
    3012:	7f 90       	pop	r7
    3014:	6f 90       	pop	r6
    3016:	5f 90       	pop	r5
    3018:	4f 90       	pop	r4
    301a:	3f 90       	pop	r3
    301c:	2f 90       	pop	r2
    301e:	08 95       	ret

00003020 <eeprom_write_const>:

void eeprom_write_const(void){
    3020:	4f 92       	push	r4
    3022:	5f 92       	push	r5
    3024:	6f 92       	push	r6
    3026:	7f 92       	push	r7
    3028:	8f 92       	push	r8
    302a:	9f 92       	push	r9
    302c:	af 92       	push	r10
    302e:	bf 92       	push	r11
    3030:	cf 92       	push	r12
    3032:	df 92       	push	r13
    3034:	ef 92       	push	r14
    3036:	ff 92       	push	r15
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	a0 97       	sbiw	r28, 0x20	; 32
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	de bf       	out	0x3e, r29	; 62
	uint64_t p = 0;
	uint64_t t = 0;
	
	memcpy(&p, &ground_p, 8);
    304a:	ab e2       	ldi	r26, 0x2B	; 43
    304c:	b0 e2       	ldi	r27, 0x20	; 32
    304e:	fc 91       	ld	r31, X
    3050:	11 96       	adiw	r26, 0x01	; 1
    3052:	5c 90       	ld	r5, X
    3054:	11 97       	sbiw	r26, 0x01	; 1
    3056:	12 96       	adiw	r26, 0x02	; 2
    3058:	6c 90       	ld	r6, X
    305a:	12 97       	sbiw	r26, 0x02	; 2
    305c:	13 96       	adiw	r26, 0x03	; 3
    305e:	7c 90       	ld	r7, X
    3060:	13 97       	sbiw	r26, 0x03	; 3
    3062:	14 96       	adiw	r26, 0x04	; 4
    3064:	8c 90       	ld	r8, X
    3066:	14 97       	sbiw	r26, 0x04	; 4
    3068:	15 96       	adiw	r26, 0x05	; 5
    306a:	9c 90       	ld	r9, X
    306c:	15 97       	sbiw	r26, 0x05	; 5
    306e:	16 96       	adiw	r26, 0x06	; 6
    3070:	ac 90       	ld	r10, X
    3072:	16 97       	sbiw	r26, 0x06	; 6
    3074:	17 96       	adiw	r26, 0x07	; 7
    3076:	4c 90       	ld	r4, X
	memcpy(&t, &ground_t, 8);
    3078:	a7 e2       	ldi	r26, 0x27	; 39
    307a:	b0 e2       	ldi	r27, 0x20	; 32
    307c:	ec 91       	ld	r30, X
    307e:	11 96       	adiw	r26, 0x01	; 1
    3080:	bc 90       	ld	r11, X
    3082:	11 97       	sbiw	r26, 0x01	; 1
    3084:	12 96       	adiw	r26, 0x02	; 2
    3086:	cc 90       	ld	r12, X
    3088:	12 97       	sbiw	r26, 0x02	; 2
    308a:	13 96       	adiw	r26, 0x03	; 3
    308c:	dc 90       	ld	r13, X
    308e:	13 97       	sbiw	r26, 0x03	; 3
    3090:	14 96       	adiw	r26, 0x04	; 4
    3092:	ec 90       	ld	r14, X
    3094:	14 97       	sbiw	r26, 0x04	; 4
    3096:	15 96       	adiw	r26, 0x05	; 5
    3098:	fc 90       	ld	r15, X
    309a:	15 97       	sbiw	r26, 0x05	; 5
    309c:	16 96       	adiw	r26, 0x06	; 6
    309e:	1c 91       	ld	r17, X
    30a0:	16 97       	sbiw	r26, 0x06	; 6
    30a2:	17 96       	adiw	r26, 0x07	; 7
    30a4:	ac 91       	ld	r26, X

	uint8_t data[] = {p & 0xFF, (p >> 8) & 0xFF, (p >> 16) & 0xFF, (p >> 24) & 0xFF, (p >> 32) & 0xFF, (p >> 40) & 0xFF, (p >> 48) & 0xFF, p >> 56,
    30a6:	f9 83       	std	Y+1, r31	; 0x01
    30a8:	2f 2f       	mov	r18, r31
    30aa:	35 2d       	mov	r19, r5
    30ac:	46 2d       	mov	r20, r6
    30ae:	57 2d       	mov	r21, r7
    30b0:	68 2d       	mov	r22, r8
    30b2:	79 2d       	mov	r23, r9
    30b4:	8a 2d       	mov	r24, r10
    30b6:	94 2d       	mov	r25, r4
    30b8:	08 e0       	ldi	r16, 0x08	; 8
    30ba:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    30be:	2a 83       	std	Y+2, r18	; 0x02
    30c0:	2f 2f       	mov	r18, r31
    30c2:	35 2d       	mov	r19, r5
    30c4:	46 2d       	mov	r20, r6
    30c6:	57 2d       	mov	r21, r7
    30c8:	68 2d       	mov	r22, r8
    30ca:	79 2d       	mov	r23, r9
    30cc:	8a 2d       	mov	r24, r10
    30ce:	94 2d       	mov	r25, r4
    30d0:	00 e1       	ldi	r16, 0x10	; 16
    30d2:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    30d6:	2b 83       	std	Y+3, r18	; 0x03
    30d8:	2f 2f       	mov	r18, r31
    30da:	35 2d       	mov	r19, r5
    30dc:	46 2d       	mov	r20, r6
    30de:	57 2d       	mov	r21, r7
    30e0:	68 2d       	mov	r22, r8
    30e2:	79 2d       	mov	r23, r9
    30e4:	8a 2d       	mov	r24, r10
    30e6:	94 2d       	mov	r25, r4
    30e8:	08 e1       	ldi	r16, 0x18	; 24
    30ea:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    30ee:	2c 83       	std	Y+4, r18	; 0x04
    30f0:	2f 2f       	mov	r18, r31
    30f2:	35 2d       	mov	r19, r5
    30f4:	46 2d       	mov	r20, r6
    30f6:	57 2d       	mov	r21, r7
    30f8:	68 2d       	mov	r22, r8
    30fa:	79 2d       	mov	r23, r9
    30fc:	8a 2d       	mov	r24, r10
    30fe:	94 2d       	mov	r25, r4
    3100:	00 e2       	ldi	r16, 0x20	; 32
    3102:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    3106:	2d 83       	std	Y+5, r18	; 0x05
    3108:	2f 2f       	mov	r18, r31
    310a:	35 2d       	mov	r19, r5
    310c:	46 2d       	mov	r20, r6
    310e:	57 2d       	mov	r21, r7
    3110:	68 2d       	mov	r22, r8
    3112:	79 2d       	mov	r23, r9
    3114:	8a 2d       	mov	r24, r10
    3116:	94 2d       	mov	r25, r4
    3118:	08 e2       	ldi	r16, 0x28	; 40
    311a:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    311e:	2e 83       	std	Y+6, r18	; 0x06
    3120:	2f 2f       	mov	r18, r31
    3122:	35 2d       	mov	r19, r5
    3124:	46 2d       	mov	r20, r6
    3126:	57 2d       	mov	r21, r7
    3128:	68 2d       	mov	r22, r8
    312a:	79 2d       	mov	r23, r9
    312c:	8a 2d       	mov	r24, r10
    312e:	94 2d       	mov	r25, r4
    3130:	00 e3       	ldi	r16, 0x30	; 48
    3132:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    3136:	2f 83       	std	Y+7, r18	; 0x07
    3138:	2f 2f       	mov	r18, r31
    313a:	35 2d       	mov	r19, r5
    313c:	46 2d       	mov	r20, r6
    313e:	57 2d       	mov	r21, r7
    3140:	68 2d       	mov	r22, r8
    3142:	79 2d       	mov	r23, r9
    3144:	8a 2d       	mov	r24, r10
    3146:	94 2d       	mov	r25, r4
    3148:	08 e3       	ldi	r16, 0x38	; 56
    314a:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    314e:	28 87       	std	Y+8, r18	; 0x08
    3150:	e9 87       	std	Y+9, r30	; 0x09
    3152:	2e 2f       	mov	r18, r30
    3154:	3b 2d       	mov	r19, r11
    3156:	4c 2d       	mov	r20, r12
    3158:	5d 2d       	mov	r21, r13
    315a:	6e 2d       	mov	r22, r14
    315c:	7f 2d       	mov	r23, r15
    315e:	81 2f       	mov	r24, r17
    3160:	9a 2f       	mov	r25, r26
    3162:	08 e0       	ldi	r16, 0x08	; 8
    3164:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    3168:	2a 87       	std	Y+10, r18	; 0x0a
    316a:	2e 2f       	mov	r18, r30
    316c:	3b 2d       	mov	r19, r11
    316e:	4c 2d       	mov	r20, r12
    3170:	5d 2d       	mov	r21, r13
    3172:	6e 2d       	mov	r22, r14
    3174:	7f 2d       	mov	r23, r15
    3176:	81 2f       	mov	r24, r17
    3178:	9a 2f       	mov	r25, r26
    317a:	00 e1       	ldi	r16, 0x10	; 16
    317c:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    3180:	2b 87       	std	Y+11, r18	; 0x0b
    3182:	2e 2f       	mov	r18, r30
    3184:	3b 2d       	mov	r19, r11
    3186:	4c 2d       	mov	r20, r12
    3188:	5d 2d       	mov	r21, r13
    318a:	6e 2d       	mov	r22, r14
    318c:	7f 2d       	mov	r23, r15
    318e:	81 2f       	mov	r24, r17
    3190:	9a 2f       	mov	r25, r26
    3192:	08 e1       	ldi	r16, 0x18	; 24
    3194:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    3198:	2c 87       	std	Y+12, r18	; 0x0c
    319a:	2e 2f       	mov	r18, r30
    319c:	3b 2d       	mov	r19, r11
    319e:	4c 2d       	mov	r20, r12
    31a0:	5d 2d       	mov	r21, r13
    31a2:	6e 2d       	mov	r22, r14
    31a4:	7f 2d       	mov	r23, r15
    31a6:	81 2f       	mov	r24, r17
    31a8:	9a 2f       	mov	r25, r26
    31aa:	00 e2       	ldi	r16, 0x20	; 32
    31ac:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    31b0:	2d 87       	std	Y+13, r18	; 0x0d
    31b2:	2e 2f       	mov	r18, r30
    31b4:	3b 2d       	mov	r19, r11
    31b6:	4c 2d       	mov	r20, r12
    31b8:	5d 2d       	mov	r21, r13
    31ba:	6e 2d       	mov	r22, r14
    31bc:	7f 2d       	mov	r23, r15
    31be:	81 2f       	mov	r24, r17
    31c0:	9a 2f       	mov	r25, r26
    31c2:	08 e2       	ldi	r16, 0x28	; 40
    31c4:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    31c8:	2e 87       	std	Y+14, r18	; 0x0e
    31ca:	2e 2f       	mov	r18, r30
    31cc:	3b 2d       	mov	r19, r11
    31ce:	4c 2d       	mov	r20, r12
    31d0:	5d 2d       	mov	r21, r13
    31d2:	6e 2d       	mov	r22, r14
    31d4:	7f 2d       	mov	r23, r15
    31d6:	81 2f       	mov	r24, r17
    31d8:	9a 2f       	mov	r25, r26
    31da:	00 e3       	ldi	r16, 0x30	; 48
    31dc:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    31e0:	2f 87       	std	Y+15, r18	; 0x0f
    31e2:	2e 2f       	mov	r18, r30
    31e4:	3b 2d       	mov	r19, r11
    31e6:	4c 2d       	mov	r20, r12
    31e8:	5d 2d       	mov	r21, r13
    31ea:	6e 2d       	mov	r22, r14
    31ec:	7f 2d       	mov	r23, r15
    31ee:	81 2f       	mov	r24, r17
    31f0:	9a 2f       	mov	r25, r26
    31f2:	08 e3       	ldi	r16, 0x38	; 56
    31f4:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__lshrdi3>
    31f8:	28 8b       	std	Y+16, r18	; 0x10
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
    31fa:	80 e1       	ldi	r24, 0x10	; 16
    31fc:	ef e2       	ldi	r30, 0x2F	; 47
    31fe:	f0 e2       	ldi	r31, 0x20	; 32
    3200:	de 01       	movw	r26, r28
    3202:	51 96       	adiw	r26, 0x11	; 17
    3204:	01 90       	ld	r0, Z+
    3206:	0d 92       	st	X+, r0
    3208:	8a 95       	dec	r24
    320a:	e1 f7       	brne	.-8      	; 0x3204 <eeprom_write_const+0x1e4>
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
    320c:	83 e3       	ldi	r24, 0x33	; 51
    320e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    3212:	fe 01       	movw	r30, r28
    3214:	71 96       	adiw	r30, 0x11	; 17
    3216:	ce 01       	movw	r24, r28
    3218:	01 96       	adiw	r24, 0x01	; 1
    321a:	ae 01       	movw	r20, r28
    321c:	4f 5d       	subi	r20, 0xDF	; 223
    321e:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 16; i++){
		NVM.ADDR0 = addresses[i];
    3220:	60 ec       	ldi	r22, 0xC0	; 192
    3222:	71 e0       	ldi	r23, 0x01	; 1
    3224:	21 91       	ld	r18, Z+
    3226:	db 01       	movw	r26, r22
    3228:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    322a:	dc 01       	movw	r26, r24
    322c:	2d 91       	ld	r18, X+
    322e:	cd 01       	movw	r24, r26
    3230:	db 01       	movw	r26, r22
    3232:	14 96       	adiw	r26, 0x04	; 4
    3234:	2c 93       	st	X, r18
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 16; i++){
    3236:	e4 17       	cp	r30, r20
    3238:	f5 07       	cpc	r31, r21
    323a:	a1 f7       	brne	.-24     	; 0x3224 <eeprom_write_const+0x204>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    323c:	e0 ec       	ldi	r30, 0xC0	; 192
    323e:	f1 e0       	ldi	r31, 0x01	; 1
    3240:	85 e3       	ldi	r24, 0x35	; 53
    3242:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    3244:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    3246:	80 e1       	ldi	r24, 0x10	; 16
    3248:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    324a:	88 ed       	ldi	r24, 0xD8	; 216
    324c:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3252:	87 85       	ldd	r24, Z+15	; 0x0f
    3254:	88 23       	and	r24, r24
    3256:	ec f3       	brlt	.-6      	; 0x3252 <eeprom_write_const+0x232>
}
    3258:	a0 96       	adiw	r28, 0x20	; 32
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	df 91       	pop	r29
    3260:	cf 91       	pop	r28
    3262:	1f 91       	pop	r17
    3264:	0f 91       	pop	r16
    3266:	ff 90       	pop	r15
    3268:	ef 90       	pop	r14
    326a:	df 90       	pop	r13
    326c:	cf 90       	pop	r12
    326e:	bf 90       	pop	r11
    3270:	af 90       	pop	r10
    3272:	9f 90       	pop	r9
    3274:	8f 90       	pop	r8
    3276:	7f 90       	pop	r7
    3278:	6f 90       	pop	r6
    327a:	5f 90       	pop	r5
    327c:	4f 90       	pop	r4
    327e:	08 95       	ret

00003280 <eeprom_write>:

void eeprom_write(void){
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	a1 97       	sbiw	r28, 0x21	; 33
    328e:	cd bf       	out	0x3d, r28	; 61
    3290:	de bf       	out	0x3e, r29	; 62
	uint16_t a = (uint16_t) ((int16_t) alt); // creates an unsigned int of the altitude
    3292:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <alt>
    3296:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <alt+0x1>
    329a:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <alt+0x2>
    329e:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <alt+0x3>
    32a2:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    32a6:	16 2f       	mov	r17, r22
    32a8:	07 2f       	mov	r16, r23
	uint16_t v = (uint16_t) ((int16_t) velocity);
    32aa:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <velocity>
    32ae:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <velocity+0x1>
    32b2:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <velocity+0x2>
    32b6:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <velocity+0x3>
    32ba:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    32be:	26 2f       	mov	r18, r22
    32c0:	37 2f       	mov	r19, r23

	check_write = (check_write + 1) % 100;
    32c2:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <check_write>
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	01 96       	adiw	r24, 0x01	; 1
    32ca:	64 e6       	ldi	r22, 0x64	; 100
    32cc:	70 e0       	ldi	r23, 0x00	; 0
    32ce:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <__divmodhi4>
    32d2:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <check_write>
	
	// saves data and addresses in array
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
    32d6:	a0 91 3a 21 	lds	r26, 0x213A	; 0x80213a <packets>
    32da:	b0 91 3b 21 	lds	r27, 0x213B	; 0x80213b <packets+0x1>
    32de:	e0 91 3a 21 	lds	r30, 0x213A	; 0x80213a <packets>
    32e2:	f0 91 3b 21 	lds	r31, 0x213B	; 0x80213b <packets+0x1>
    32e6:	60 91 3e 21 	lds	r22, 0x213E	; 0x80213e <timer>
    32ea:	70 91 3f 21 	lds	r23, 0x213F	; 0x80213f <timer+0x1>
    32ee:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <timer>
    32f2:	50 91 3f 21 	lds	r21, 0x213F	; 0x80213f <timer+0x1>
    32f6:	90 91 5c 21 	lds	r25, 0x215C	; 0x80215c <state>
    32fa:	09 83       	std	Y+1, r16	; 0x01
    32fc:	1a 83       	std	Y+2, r17	; 0x02
    32fe:	bb 83       	std	Y+3, r27	; 0x03
    3300:	ec 83       	std	Y+4, r30	; 0x04
    3302:	7d 83       	std	Y+5, r23	; 0x05
    3304:	4e 83       	std	Y+6, r20	; 0x06
    3306:	3f 83       	std	Y+7, r19	; 0x07
    3308:	28 87       	std	Y+8, r18	; 0x08
    330a:	89 87       	std	Y+9, r24	; 0x09
    330c:	8a 87       	std	Y+10, r24	; 0x0a
    330e:	9b 87       	std	Y+11, r25	; 0x0b
    3310:	8b e0       	ldi	r24, 0x0B	; 11
    3312:	fe 01       	movw	r30, r28
    3314:	31 96       	adiw	r30, 0x01	; 1
    3316:	de 01       	movw	r26, r28
    3318:	1c 96       	adiw	r26, 0x0c	; 12
    331a:	01 90       	ld	r0, Z+
    331c:	0d 92       	st	X+, r0
    331e:	8a 95       	dec	r24
    3320:	e1 f7       	brne	.-8      	; 0x331a <eeprom_write+0x9a>
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};
    3322:	8b e0       	ldi	r24, 0x0B	; 11
    3324:	ef e3       	ldi	r30, 0x3F	; 63
    3326:	f0 e2       	ldi	r31, 0x20	; 32
    3328:	de 01       	movw	r26, r28
    332a:	57 96       	adiw	r26, 0x17	; 23
    332c:	01 90       	ld	r0, Z+
    332e:	0d 92       	st	X+, r0
    3330:	8a 95       	dec	r24
    3332:	e1 f7       	brne	.-8      	; 0x332c <eeprom_write+0xac>

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
    3334:	83 e3       	ldi	r24, 0x33	; 51
    3336:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < 10; i++){
		NVM.ADDR0 = addresses[i];
    333e:	e0 ec       	ldi	r30, 0xC0	; 192
    3340:	f1 e0       	ldi	r31, 0x01	; 1
    3342:	a7 e1       	ldi	r26, 0x17	; 23
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	ac 0f       	add	r26, r28
    3348:	bd 1f       	adc	r27, r29
    334a:	a8 0f       	add	r26, r24
    334c:	b9 1f       	adc	r27, r25
    334e:	2c 91       	ld	r18, X
    3350:	20 83       	st	Z, r18
		NVM.DATA0 = data[i];
    3352:	ac e0       	ldi	r26, 0x0C	; 12
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	ac 0f       	add	r26, r28
    3358:	bd 1f       	adc	r27, r29
    335a:	a8 0f       	add	r26, r24
    335c:	b9 1f       	adc	r27, r25
    335e:	2c 91       	ld	r18, X
    3360:	24 83       	std	Z+4, r18	; 0x04
    3362:	01 96       	adiw	r24, 0x01	; 1
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write, state};
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1, STATE_BYTE};

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 10; i++){
    3364:	8a 30       	cpi	r24, 0x0A	; 10
    3366:	91 05       	cpc	r25, r1
    3368:	61 f7       	brne	.-40     	; 0x3342 <eeprom_write+0xc2>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    336a:	e0 ec       	ldi	r30, 0xC0	; 192
    336c:	f1 e0       	ldi	r31, 0x01	; 1
    336e:	85 e3       	ldi	r24, 0x35	; 53
    3370:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    3372:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    3374:	80 e1       	ldi	r24, 0x10	; 16
    3376:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    3378:	88 ed       	ldi	r24, 0xD8	; 216
    337a:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3380:	87 85       	ldd	r24, Z+15	; 0x0f
    3382:	88 23       	and	r24, r24
    3384:	ec f3       	brlt	.-6      	; 0x3380 <eeprom_write+0x100>
}
    3386:	a1 96       	adiw	r28, 0x21	; 33
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	08 95       	ret

00003396 <time_update>:
	TCE0.CTRLA = 0x07; // divisor set to 1024 0x07
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void time_update(void){
    3396:	2f 92       	push	r2
    3398:	3f 92       	push	r3
    339a:	4f 92       	push	r4
    339c:	5f 92       	push	r5
    339e:	6f 92       	push	r6
    33a0:	7f 92       	push	r7
    33a2:	8f 92       	push	r8
    33a4:	9f 92       	push	r9
    33a6:	af 92       	push	r10
    33a8:	bf 92       	push	r11
    33aa:	cf 92       	push	r12
    33ac:	df 92       	push	r13
    33ae:	ef 92       	push	r14
    33b0:	ff 92       	push	r15
    33b2:	0f 93       	push	r16
    33b4:	1f 93       	push	r17
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	ef 97       	sbiw	r28, 0x3f	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	de bf       	out	0x3e, r29	; 62
	packets++;
    33c4:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <packets>
    33c8:	90 91 3b 21 	lds	r25, 0x213B	; 0x80213b <packets+0x1>
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <packets>
    33d2:	90 93 3b 21 	sts	0x213B, r25	; 0x80213b <packets+0x1>

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    33d6:	60 91 04 21 	lds	r22, 0x2104	; 0x802104 <angle>
    33da:	70 91 05 21 	lds	r23, 0x2105	; 0x802105 <angle+0x1>
    33de:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <angle+0x2>
    33e2:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <angle+0x3>
    33e6:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <state>
    33ea:	29 83       	std	Y+1, r18	; 0x01
    33ec:	40 90 08 21 	lds	r4, 0x2108	; 0x802108 <rpm>
    33f0:	50 90 09 21 	lds	r5, 0x2109	; 0x802109 <rpm+0x1>
    33f4:	60 90 0a 21 	lds	r6, 0x210A	; 0x80210a <rpm+0x2>
    33f8:	70 90 0b 21 	lds	r7, 0x210B	; 0x80210b <rpm+0x3>
    33fc:	80 90 0c 21 	lds	r8, 0x210C	; 0x80210c <roll>
    3400:	90 90 0d 21 	lds	r9, 0x210D	; 0x80210d <roll+0x1>
    3404:	a0 90 0e 21 	lds	r10, 0x210E	; 0x80210e <roll+0x2>
    3408:	b0 90 0f 21 	lds	r11, 0x210F	; 0x80210f <roll+0x3>
    340c:	c0 90 10 21 	lds	r12, 0x2110	; 0x802110 <pitch>
    3410:	d0 90 11 21 	lds	r13, 0x2111	; 0x802111 <pitch+0x1>
    3414:	e0 90 12 21 	lds	r14, 0x2112	; 0x802112 <pitch+0x2>
    3418:	f0 90 13 21 	lds	r15, 0x2113	; 0x802113 <pitch+0x3>
    341c:	40 91 14 21 	lds	r20, 0x2114	; 0x802114 <gps_sats>
    3420:	50 91 15 21 	lds	r21, 0x2115	; 0x802115 <gps_sats+0x1>
    3424:	4e af       	std	Y+62, r20	; 0x3e
    3426:	5f af       	std	Y+63, r21	; 0x3f
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    3428:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <gps_alt>
    342c:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <gps_alt+0x1>
    3430:	40 91 18 21 	lds	r20, 0x2118	; 0x802118 <gps_alt+0x2>
    3434:	50 91 19 21 	lds	r21, 0x2119	; 0x802119 <gps_alt+0x3>
    3438:	2a 83       	std	Y+2, r18	; 0x02
    343a:	3b 83       	std	Y+3, r19	; 0x03
    343c:	4c 83       	std	Y+4, r20	; 0x04
    343e:	5d 83       	std	Y+5, r21	; 0x05
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    3440:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <gps_alt>
    3444:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <gps_alt+0x1>
    3448:	40 91 18 21 	lds	r20, 0x2118	; 0x802118 <gps_alt+0x2>
    344c:	50 91 19 21 	lds	r21, 0x2119	; 0x802119 <gps_alt+0x3>
    3450:	2e 83       	std	Y+6, r18	; 0x06
    3452:	3f 83       	std	Y+7, r19	; 0x07
    3454:	48 87       	std	Y+8, r20	; 0x08
    3456:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    3458:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <gps_long>
    345c:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <gps_long+0x1>
    3460:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <gps_long+0x2>
    3464:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <gps_long+0x3>
    3468:	2a 87       	std	Y+10, r18	; 0x0a
    346a:	3b 87       	std	Y+11, r19	; 0x0b
    346c:	4c 87       	std	Y+12, r20	; 0x0c
    346e:	5d 87       	std	Y+13, r21	; 0x0d
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    3470:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <gps_long>
    3474:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <gps_long+0x1>
    3478:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <gps_long+0x2>
    347c:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <gps_long+0x3>
    3480:	2e 87       	std	Y+14, r18	; 0x0e
    3482:	3f 87       	std	Y+15, r19	; 0x0f
    3484:	48 8b       	std	Y+16, r20	; 0x10
    3486:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    3488:	20 91 1e 21 	lds	r18, 0x211E	; 0x80211e <gps_lat>
    348c:	30 91 1f 21 	lds	r19, 0x211F	; 0x80211f <gps_lat+0x1>
    3490:	40 91 20 21 	lds	r20, 0x2120	; 0x802120 <gps_lat+0x2>
    3494:	50 91 21 21 	lds	r21, 0x2121	; 0x802121 <gps_lat+0x3>
    3498:	2a 8b       	std	Y+18, r18	; 0x12
    349a:	3b 8b       	std	Y+19, r19	; 0x13
    349c:	4c 8b       	std	Y+20, r20	; 0x14
    349e:	5d 8b       	std	Y+21, r21	; 0x15
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    34a0:	20 91 1e 21 	lds	r18, 0x211E	; 0x80211e <gps_lat>
    34a4:	30 91 1f 21 	lds	r19, 0x211F	; 0x80211f <gps_lat+0x1>
    34a8:	40 91 20 21 	lds	r20, 0x2120	; 0x802120 <gps_lat+0x2>
    34ac:	50 91 21 21 	lds	r21, 0x2121	; 0x802121 <gps_lat+0x3>
    34b0:	2e 8b       	std	Y+22, r18	; 0x16
    34b2:	3f 8b       	std	Y+23, r19	; 0x17
    34b4:	48 8f       	std	Y+24, r20	; 0x18
    34b6:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    34b8:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <gps_t>
    34bc:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <gps_t+0x1>
    34c0:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <gps_t+0x2>
    34c4:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <gps_t+0x3>
    34c8:	2a 8f       	std	Y+26, r18	; 0x1a
    34ca:	3b 8f       	std	Y+27, r19	; 0x1b
    34cc:	4c 8f       	std	Y+28, r20	; 0x1c
    34ce:	5d 8f       	std	Y+29, r21	; 0x1d
    34d0:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <gps_t>
    34d4:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <gps_t+0x1>
    34d8:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <gps_t+0x2>
    34dc:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <gps_t+0x3>
    34e0:	2e 8f       	std	Y+30, r18	; 0x1e
    34e2:	3f 8f       	std	Y+31, r19	; 0x1f
    34e4:	48 a3       	std	Y+32, r20	; 0x20
    34e6:	59 a3       	std	Y+33, r21	; 0x21
    34e8:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <gps_t>
    34ec:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <gps_t+0x1>
    34f0:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <gps_t+0x2>
    34f4:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <gps_t+0x3>
    34f8:	2a a3       	std	Y+34, r18	; 0x22
    34fa:	3b a3       	std	Y+35, r19	; 0x23
    34fc:	4c a3       	std	Y+36, r20	; 0x24
    34fe:	5d a3       	std	Y+37, r21	; 0x25
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
    3500:	20 91 2a 21 	lds	r18, 0x212A	; 0x80212a <volt>
    3504:	30 91 2b 21 	lds	r19, 0x212B	; 0x80212b <volt+0x1>
    3508:	40 91 2c 21 	lds	r20, 0x212C	; 0x80212c <volt+0x2>
    350c:	50 91 2d 21 	lds	r21, 0x212D	; 0x80212d <volt+0x3>
    3510:	2e a3       	std	Y+38, r18	; 0x26
    3512:	3f a3       	std	Y+39, r19	; 0x27
    3514:	48 a7       	std	Y+40, r20	; 0x28
    3516:	59 a7       	std	Y+41, r21	; 0x29
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    3518:	20 91 2a 21 	lds	r18, 0x212A	; 0x80212a <volt>
    351c:	30 91 2b 21 	lds	r19, 0x212B	; 0x80212b <volt+0x1>
    3520:	40 91 2c 21 	lds	r20, 0x212C	; 0x80212c <volt+0x2>
    3524:	50 91 2d 21 	lds	r21, 0x212D	; 0x80212d <volt+0x3>
    3528:	2a a7       	std	Y+42, r18	; 0x2a
    352a:	3b a7       	std	Y+43, r19	; 0x2b
    352c:	4c a7       	std	Y+44, r20	; 0x2c
    352e:	5d a7       	std	Y+45, r21	; 0x2d
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
    3530:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <temp>
    3534:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <temp+0x1>
    3538:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <temp+0x2>
    353c:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <temp+0x3>
    3540:	2e a7       	std	Y+46, r18	; 0x2e
    3542:	3f a7       	std	Y+47, r19	; 0x2f
    3544:	48 ab       	std	Y+48, r20	; 0x30
    3546:	59 ab       	std	Y+49, r21	; 0x31
    3548:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <temp>
    354c:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <temp+0x1>
    3550:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <temp+0x2>
    3554:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <temp+0x3>
    3558:	2a ab       	std	Y+50, r18	; 0x32
    355a:	3b ab       	std	Y+51, r19	; 0x33
    355c:	4c ab       	std	Y+52, r20	; 0x34
    355e:	5d ab       	std	Y+53, r21	; 0x35
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    3560:	20 91 36 21 	lds	r18, 0x2136	; 0x802136 <press>
    3564:	30 91 37 21 	lds	r19, 0x2137	; 0x802137 <press+0x1>
    3568:	40 91 38 21 	lds	r20, 0x2138	; 0x802138 <press+0x2>
    356c:	50 91 39 21 	lds	r21, 0x2139	; 0x802139 <press+0x3>
    3570:	2e ab       	std	Y+54, r18	; 0x36
    3572:	3f ab       	std	Y+55, r19	; 0x37
    3574:	48 af       	std	Y+56, r20	; 0x38
    3576:	59 af       	std	Y+57, r21	; 0x39
    3578:	20 91 2e 21 	lds	r18, 0x212E	; 0x80212e <alt>
    357c:	30 91 2f 21 	lds	r19, 0x212F	; 0x80212f <alt+0x1>
    3580:	40 91 30 21 	lds	r20, 0x2130	; 0x802130 <alt+0x2>
    3584:	50 91 31 21 	lds	r21, 0x2131	; 0x802131 <alt+0x3>
    3588:	2a af       	std	Y+58, r18	; 0x3a
    358a:	3b af       	std	Y+59, r19	; 0x3b
    358c:	4c af       	std	Y+60, r20	; 0x3c
    358e:	5d af       	std	Y+61, r21	; 0x3d
    3590:	20 90 3a 21 	lds	r2, 0x213A	; 0x80213a <packets>
    3594:	30 90 3b 21 	lds	r3, 0x213B	; 0x80213b <packets+0x1>
    3598:	00 91 3e 21 	lds	r16, 0x213E	; 0x80213e <timer>
    359c:	10 91 3f 21 	lds	r17, 0x213F	; 0x80213f <timer+0x1>
    35a0:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    35a4:	7f 93       	push	r23
    35a6:	6f 93       	push	r22
    35a8:	1f 92       	push	r1
    35aa:	39 81       	ldd	r19, Y+1	; 0x01
    35ac:	3f 93       	push	r19
    35ae:	c3 01       	movw	r24, r6
    35b0:	b2 01       	movw	r22, r4
    35b2:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    35b6:	7f 93       	push	r23
    35b8:	6f 93       	push	r22
    35ba:	c5 01       	movw	r24, r10
    35bc:	b4 01       	movw	r22, r8
    35be:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    35c2:	7f 93       	push	r23
    35c4:	6f 93       	push	r22
    35c6:	c7 01       	movw	r24, r14
    35c8:	b6 01       	movw	r22, r12
    35ca:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    35ce:	7f 93       	push	r23
    35d0:	6f 93       	push	r22
    35d2:	4f ad       	ldd	r20, Y+63	; 0x3f
    35d4:	4f 93       	push	r20
    35d6:	5e ad       	ldd	r21, Y+62	; 0x3e
    35d8:	5f 93       	push	r21
    35da:	6a 81       	ldd	r22, Y+2	; 0x02
    35dc:	7b 81       	ldd	r23, Y+3	; 0x03
    35de:	8c 81       	ldd	r24, Y+4	; 0x04
    35e0:	9d 81       	ldd	r25, Y+5	; 0x05
    35e2:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    35e6:	9b 01       	movw	r18, r22
    35e8:	22 0f       	add	r18, r18
    35ea:	33 1f       	adc	r19, r19
    35ec:	66 0f       	add	r22, r22
    35ee:	77 1f       	adc	r23, r23
    35f0:	66 0f       	add	r22, r22
    35f2:	77 1f       	adc	r23, r23
    35f4:	66 0f       	add	r22, r22
    35f6:	77 1f       	adc	r23, r23
    35f8:	c9 01       	movw	r24, r18
    35fa:	86 0f       	add	r24, r22
    35fc:	97 1f       	adc	r25, r23
    35fe:	6a e0       	ldi	r22, 0x0A	; 10
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <__divmodhi4>
    3606:	9f 93       	push	r25
    3608:	8f 93       	push	r24
    360a:	6e 81       	ldd	r22, Y+6	; 0x06
    360c:	7f 81       	ldd	r23, Y+7	; 0x07
    360e:	88 85       	ldd	r24, Y+8	; 0x08
    3610:	99 85       	ldd	r25, Y+9	; 0x09
    3612:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    3616:	7f 93       	push	r23
    3618:	6f 93       	push	r22
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	34 e2       	ldi	r19, 0x24	; 36
    361e:	44 e7       	ldi	r20, 0x74	; 116
    3620:	59 e4       	ldi	r21, 0x49	; 73
    3622:	6a 85       	ldd	r22, Y+10	; 0x0a
    3624:	7b 85       	ldd	r23, Y+11	; 0x0b
    3626:	8c 85       	ldd	r24, Y+12	; 0x0c
    3628:	9d 85       	ldd	r25, Y+13	; 0x0d
    362a:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    362e:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    3632:	20 e4       	ldi	r18, 0x40	; 64
    3634:	32 e4       	ldi	r19, 0x42	; 66
    3636:	4f e0       	ldi	r20, 0x0F	; 15
    3638:	50 e0       	ldi	r21, 0x00	; 0
    363a:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    363e:	9b 01       	movw	r18, r22
    3640:	77 23       	and	r23, r23
    3642:	24 f4       	brge	.+8      	; 0x364c <time_update+0x2b6>
    3644:	22 27       	eor	r18, r18
    3646:	33 27       	eor	r19, r19
    3648:	26 1b       	sub	r18, r22
    364a:	37 0b       	sbc	r19, r23
    364c:	c9 01       	movw	r24, r18
    364e:	33 0f       	add	r19, r19
    3650:	aa 0b       	sbc	r26, r26
    3652:	bb 0b       	sbc	r27, r27
    3654:	bf 93       	push	r27
    3656:	af 93       	push	r26
    3658:	9f 93       	push	r25
    365a:	8f 93       	push	r24
    365c:	6e 85       	ldd	r22, Y+14	; 0x0e
    365e:	7f 85       	ldd	r23, Y+15	; 0x0f
    3660:	88 89       	ldd	r24, Y+16	; 0x10
    3662:	99 89       	ldd	r25, Y+17	; 0x11
    3664:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    3668:	7f 93       	push	r23
    366a:	6f 93       	push	r22
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	34 e2       	ldi	r19, 0x24	; 36
    3670:	44 e7       	ldi	r20, 0x74	; 116
    3672:	59 e4       	ldi	r21, 0x49	; 73
    3674:	6a 89       	ldd	r22, Y+18	; 0x12
    3676:	7b 89       	ldd	r23, Y+19	; 0x13
    3678:	8c 89       	ldd	r24, Y+20	; 0x14
    367a:	9d 89       	ldd	r25, Y+21	; 0x15
    367c:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    3680:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    3684:	20 e4       	ldi	r18, 0x40	; 64
    3686:	32 e4       	ldi	r19, 0x42	; 66
    3688:	4f e0       	ldi	r20, 0x0F	; 15
    368a:	50 e0       	ldi	r21, 0x00	; 0
    368c:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    3690:	9f 93       	push	r25
    3692:	8f 93       	push	r24
    3694:	7f 93       	push	r23
    3696:	6f 93       	push	r22
    3698:	6e 89       	ldd	r22, Y+22	; 0x16
    369a:	7f 89       	ldd	r23, Y+23	; 0x17
    369c:	88 8d       	ldd	r24, Y+24	; 0x18
    369e:	99 8d       	ldd	r25, Y+25	; 0x19
    36a0:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    36a4:	7f 93       	push	r23
    36a6:	6f 93       	push	r22
    36a8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    36aa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    36ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    36ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    36b0:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    36b4:	0f 2e       	mov	r0, r31
    36b6:	f4 e6       	ldi	r31, 0x64	; 100
    36b8:	cf 2e       	mov	r12, r31
    36ba:	d1 2c       	mov	r13, r1
    36bc:	e1 2c       	mov	r14, r1
    36be:	f1 2c       	mov	r15, r1
    36c0:	f0 2d       	mov	r31, r0
    36c2:	a7 01       	movw	r20, r14
    36c4:	96 01       	movw	r18, r12
    36c6:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    36ca:	7f 93       	push	r23
    36cc:	6f 93       	push	r22
    36ce:	6e 8d       	ldd	r22, Y+30	; 0x1e
    36d0:	7f 8d       	ldd	r23, Y+31	; 0x1f
    36d2:	88 a1       	ldd	r24, Y+32	; 0x20
    36d4:	99 a1       	ldd	r25, Y+33	; 0x21
    36d6:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    36da:	0f 2e       	mov	r0, r31
    36dc:	f0 e1       	ldi	r31, 0x10	; 16
    36de:	8f 2e       	mov	r8, r31
    36e0:	f7 e2       	ldi	r31, 0x27	; 39
    36e2:	9f 2e       	mov	r9, r31
    36e4:	a1 2c       	mov	r10, r1
    36e6:	b1 2c       	mov	r11, r1
    36e8:	f0 2d       	mov	r31, r0
    36ea:	a5 01       	movw	r20, r10
    36ec:	94 01       	movw	r18, r8
    36ee:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    36f2:	a7 01       	movw	r20, r14
    36f4:	96 01       	movw	r18, r12
    36f6:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    36fa:	3f 93       	push	r19
    36fc:	2f 93       	push	r18
    36fe:	6a a1       	ldd	r22, Y+34	; 0x22
    3700:	7b a1       	ldd	r23, Y+35	; 0x23
    3702:	8c a1       	ldd	r24, Y+36	; 0x24
    3704:	9d a1       	ldd	r25, Y+37	; 0x25
    3706:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    370a:	a5 01       	movw	r20, r10
    370c:	94 01       	movw	r18, r8
    370e:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__divmodsi4>
    3712:	3f 93       	push	r19
    3714:	2f 93       	push	r18
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	40 e2       	ldi	r20, 0x20	; 32
    371c:	51 e4       	ldi	r21, 0x41	; 65
    371e:	6e a1       	ldd	r22, Y+38	; 0x26
    3720:	7f a1       	ldd	r23, Y+39	; 0x27
    3722:	88 a5       	ldd	r24, Y+40	; 0x28
    3724:	99 a5       	ldd	r25, Y+41	; 0x29
    3726:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    372a:	0e 94 a0 23 	call	0x4740	; 0x4740 <__fixsfsi>
    372e:	cb 01       	movw	r24, r22
    3730:	6a e0       	ldi	r22, 0x0A	; 10
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <__divmodhi4>
    3738:	9f 93       	push	r25
    373a:	8f 93       	push	r24
    373c:	6a a5       	ldd	r22, Y+42	; 0x2a
    373e:	7b a5       	ldd	r23, Y+43	; 0x2b
    3740:	8c a5       	ldd	r24, Y+44	; 0x2c
    3742:	9d a5       	ldd	r25, Y+45	; 0x2d
    3744:	fd d7       	rcall	.+4090   	; 0x4740 <__fixsfsi>
    3746:	7f 93       	push	r23
    3748:	6f 93       	push	r22
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e2       	ldi	r20, 0x20	; 32
    3750:	51 e4       	ldi	r21, 0x41	; 65
    3752:	6e a5       	ldd	r22, Y+46	; 0x2e
    3754:	7f a5       	ldd	r23, Y+47	; 0x2f
    3756:	88 a9       	ldd	r24, Y+48	; 0x30
    3758:	99 a9       	ldd	r25, Y+49	; 0x31
    375a:	0e 94 87 24 	call	0x490e	; 0x490e <__mulsf3>
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	38 eb       	ldi	r19, 0xB8	; 184
    3762:	4a e2       	ldi	r20, 0x2A	; 42
    3764:	55 e4       	ldi	r21, 0x45	; 69
    3766:	1b d7       	rcall	.+3638   	; 0x459e <__subsf3>
    3768:	eb d7       	rcall	.+4054   	; 0x4740 <__fixsfsi>
    376a:	cb 01       	movw	r24, r22
    376c:	6a e0       	ldi	r22, 0x0A	; 10
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <__divmodhi4>
    3774:	9f 93       	push	r25
    3776:	8f 93       	push	r24
    3778:	23 e3       	ldi	r18, 0x33	; 51
    377a:	33 e9       	ldi	r19, 0x93	; 147
    377c:	48 e8       	ldi	r20, 0x88	; 136
    377e:	53 e4       	ldi	r21, 0x43	; 67
    3780:	6a a9       	ldd	r22, Y+50	; 0x32
    3782:	7b a9       	ldd	r23, Y+51	; 0x33
    3784:	8c a9       	ldd	r24, Y+52	; 0x34
    3786:	9d a9       	ldd	r25, Y+53	; 0x35
    3788:	0a d7       	rcall	.+3604   	; 0x459e <__subsf3>
    378a:	da d7       	rcall	.+4020   	; 0x4740 <__fixsfsi>
    378c:	7f 93       	push	r23
    378e:	6f 93       	push	r22
    3790:	6e a9       	ldd	r22, Y+54	; 0x36
    3792:	7f a9       	ldd	r23, Y+55	; 0x37
    3794:	88 ad       	ldd	r24, Y+56	; 0x38
    3796:	99 ad       	ldd	r25, Y+57	; 0x39
    3798:	d3 d7       	rcall	.+4006   	; 0x4740 <__fixsfsi>
    379a:	9f 93       	push	r25
    379c:	8f 93       	push	r24
    379e:	7f 93       	push	r23
    37a0:	6f 93       	push	r22
    37a2:	6a ad       	ldd	r22, Y+58	; 0x3a
    37a4:	7b ad       	ldd	r23, Y+59	; 0x3b
    37a6:	8c ad       	ldd	r24, Y+60	; 0x3c
    37a8:	9d ad       	ldd	r25, Y+61	; 0x3d
    37aa:	ca d7       	rcall	.+3988   	; 0x4740 <__fixsfsi>
    37ac:	7f 93       	push	r23
    37ae:	6f 93       	push	r22
    37b0:	3f 92       	push	r3
    37b2:	2f 92       	push	r2
    37b4:	1f 93       	push	r17
    37b6:	0f 93       	push	r16
    37b8:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    37bc:	8f 93       	push	r24
    37be:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    37c2:	8f 93       	push	r24
    37c4:	8a ea       	ldi	r24, 0xAA	; 170
    37c6:	91 e2       	ldi	r25, 0x21	; 33
    37c8:	9f 93       	push	r25
    37ca:	8f 93       	push	r24
    37cc:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	de bf       	out	0x3e, r29	; 62
    37d4:	8a ea       	ldi	r24, 0xAA	; 170
    37d6:	91 e2       	ldi	r25, 0x21	; 33
    37d8:	9f 93       	push	r25
    37da:	8f 93       	push	r24
    37dc:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <printf>
	eeprom_write();
    37e0:	4f dd       	rcall	.-1378   	; 0x3280 <eeprom_write>

	time_flag = 0;
    37e2:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <time_flag>
}
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	ef 96       	adiw	r28, 0x3f	; 63
    37ec:	cd bf       	out	0x3d, r28	; 61
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	1f 91       	pop	r17
    37f6:	0f 91       	pop	r16
    37f8:	ff 90       	pop	r15
    37fa:	ef 90       	pop	r14
    37fc:	df 90       	pop	r13
    37fe:	cf 90       	pop	r12
    3800:	bf 90       	pop	r11
    3802:	af 90       	pop	r10
    3804:	9f 90       	pop	r9
    3806:	8f 90       	pop	r8
    3808:	7f 90       	pop	r7
    380a:	6f 90       	pop	r6
    380c:	5f 90       	pop	r5
    380e:	4f 90       	pop	r4
    3810:	3f 90       	pop	r3
    3812:	2f 90       	pop	r2
    3814:	08 95       	ret

00003816 <eeprom_read>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

uint8_t	eeprom_read(uint16_t address){
    3816:	cf 93       	push	r28
    3818:	df 93       	push	r29
	NVM.CMD = READ_EEPROM;
    381a:	c0 ec       	ldi	r28, 0xC0	; 192
    381c:	d1 e0       	ldi	r29, 0x01	; 1
    381e:	26 e0       	ldi	r18, 0x06	; 6
    3820:	2a 87       	std	Y+10, r18	; 0x0a
	NVM.ADDR0 = address & 0xFF;
    3822:	88 83       	st	Y, r24
	NVM.ADDR1 = address >> 8;
    3824:	99 83       	std	Y+1, r25	; 0x01
	CCP = CCP_IOREG_MODE;
    3826:	88 ed       	ldi	r24, 0xD8	; 216
    3828:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	8b 87       	std	Y+11, r24	; 0x0b
	delay_ms(1);
    382e:	66 ed       	ldi	r22, 0xD6	; 214
    3830:	74 e1       	ldi	r23, 0x14	; 20
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__portable_avr_delay_cycles>
	uint8_t byte = NVM.DATA0;
    383a:	8c 81       	ldd	r24, Y+4	; 0x04
	return byte;
}
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	08 95       	ret

00003842 <system_init>:
	}
}


// Sensor functions
void system_init(void){
    3842:	2f 92       	push	r2
    3844:	3f 92       	push	r3
    3846:	4f 92       	push	r4
    3848:	5f 92       	push	r5
    384a:	6f 92       	push	r6
    384c:	7f 92       	push	r7
    384e:	8f 92       	push	r8
    3850:	9f 92       	push	r9
    3852:	af 92       	push	r10
    3854:	bf 92       	push	r11
    3856:	cf 92       	push	r12
    3858:	df 92       	push	r13
    385a:	ef 92       	push	r14
    385c:	ff 92       	push	r15
    385e:	0f 93       	push	r16
    3860:	1f 93       	push	r17
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	27 97       	sbiw	r28, 0x07	; 7
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	de bf       	out	0x3e, r29	; 62
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    3870:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    3874:	6b ea       	ldi	r22, 0xAB	; 171
    3876:	79 e2       	ldi	r23, 0x29	; 41
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__portable_avr_delay_cycles>
	sei();
    3880:	78 94       	sei

	// Initialization of pins
	PORTC.DIR = 0xBC; // makes Port C have pins, 7, 5, 4, 3, and 2 be output (0b10111100)
    3882:	8c eb       	ldi	r24, 0xBC	; 188
    3884:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // enables lo level interrupts
    3888:	87 e0       	ldi	r24, 0x07	; 7
    388a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// Driver Initialization
	cam_init();
    388e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <cam_init>
	data_terminal_init();
    3892:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <data_terminal_init>
	delay_ms(500);
    3896:	6b ea       	ldi	r22, 0xAB	; 171
    3898:	70 eb       	ldi	r23, 0xB0	; 176
    389a:	88 e2       	ldi	r24, 0x28	; 40
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__portable_avr_delay_cycles>

	(*GPS_TERMINAL_SERIAL).CTRLA = USART_RXCINTLVL_HI_gc;
}

void xbee_init(void){
	USARTE0.CTRLA = USART_RXCINTLVL_MED_gc;
    38a2:	80 e2       	ldi	r24, 0x20	; 32
    38a4:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	// Driver Initialization
	cam_init();
	data_terminal_init();
	delay_ms(500);
	xbee_init();
	gps_init();
    38a8:	0e 94 14 10 	call	0x2028	; 0x2028 <gps_init>
	//buzzer_init();
	//delay_ms(100);

	hall_sensor_init();
    38ac:	0e 94 1e 10 	call	0x203c	; 0x203c <hall_sensor_init>
	thermistor_init();
    38b0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <thermistor_init>
	voltage_init();
    38b4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <voltage_init>
	spi_init();
    38b8:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <spi_init>
	pressure_init();
    38bc:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <pressure_init>
	//bno_init();
	cam_switch();
    38c0:	0e 94 95 0c 	call	0x192a	; 0x192a <cam_switch>
	clock_init();
    38c4:	fe d8       	rcall	.-3588   	; 0x2ac2 <clock_init>
	//release_servo_init();
	//servo_timer_init();

	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
    38c6:	82 e0       	ldi	r24, 0x02	; 2
    38c8:	90 e1       	ldi	r25, 0x10	; 16
    38ca:	a5 df       	rcall	.-182    	; 0x3816 <eeprom_read>
    38cc:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);
    38ce:	8f e1       	ldi	r24, 0x1F	; 31
    38d0:	90 e1       	ldi	r25, 0x10	; 16
    38d2:	a1 df       	rcall	.-190    	; 0x3816 <eeprom_read>
    38d4:	8a 83       	std	Y+2, r24	; 0x02

	if((b1 == b2) && (b1 != 0xFF)){
    38d6:	99 81       	ldd	r25, Y+1	; 0x01
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	98 13       	cpse	r25, r24
    38dc:	d3 c1       	rjmp	.+934    	; 0x3c84 <system_init+0x442>
    38de:	89 81       	ldd	r24, Y+1	; 0x01
    38e0:	8f 3f       	cpi	r24, 0xFF	; 255
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <system_init+0xa4>
		//printf("Reading EEPROM\n");
		uint64_t p =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    38e4:	cf c1       	rjmp	.+926    	; 0x3c84 <system_init+0x442>
    38e6:	80 e1       	ldi	r24, 0x10	; 16
    38e8:	90 e1       	ldi	r25, 0x10	; 16
    38ea:	95 df       	rcall	.-214    	; 0x3816 <eeprom_read>
    38ec:	18 2f       	mov	r17, r24
    38ee:	8f e0       	ldi	r24, 0x0F	; 15
    38f0:	90 e1       	ldi	r25, 0x10	; 16
    38f2:	91 df       	rcall	.-222    	; 0x3816 <eeprom_read>
    38f4:	b8 2f       	mov	r27, r24
    38f6:	21 2f       	mov	r18, r17
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e0       	ldi	r20, 0x00	; 0
    38fc:	50 e0       	ldi	r21, 0x00	; 0
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	08 e3       	ldi	r16, 0x38	; 56
    3908:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    390c:	12 2f       	mov	r17, r18
    390e:	c3 2e       	mov	r12, r19
    3910:	f4 2e       	mov	r15, r20
    3912:	a5 2f       	mov	r26, r21
    3914:	f6 2f       	mov	r31, r22
    3916:	e7 2f       	mov	r30, r23
    3918:	d8 2e       	mov	r13, r24
    391a:	e9 2e       	mov	r14, r25
    391c:	2b 2f       	mov	r18, r27
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	50 e0       	ldi	r21, 0x00	; 0
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	70 e0       	ldi	r23, 0x00	; 0
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	00 e3       	ldi	r16, 0x30	; 48
    392e:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3932:	12 2b       	or	r17, r18
    3934:	c3 2a       	or	r12, r19
    3936:	f4 2a       	or	r15, r20
    3938:	9a 2e       	mov	r9, r26
    393a:	95 2a       	or	r9, r21
    393c:	af 2e       	mov	r10, r31
    393e:	a6 2a       	or	r10, r22
    3940:	be 2e       	mov	r11, r30
    3942:	b7 2a       	or	r11, r23
    3944:	d8 2a       	or	r13, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    3946:	e9 2a       	or	r14, r25
    3948:	8e e0       	ldi	r24, 0x0E	; 14
    394a:	90 e1       	ldi	r25, 0x10	; 16
    394c:	64 df       	rcall	.-312    	; 0x3816 <eeprom_read>
    394e:	08 2f       	mov	r16, r24
    3950:	8d e0       	ldi	r24, 0x0D	; 13
    3952:	90 e1       	ldi	r25, 0x10	; 16
    3954:	60 df       	rcall	.-320    	; 0x3816 <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    3956:	28 2e       	mov	r2, r24
    3958:	8c e0       	ldi	r24, 0x0C	; 12
    395a:	90 e1       	ldi	r25, 0x10	; 16
    395c:	5c df       	rcall	.-328    	; 0x3816 <eeprom_read>
    395e:	38 2e       	mov	r3, r24
    3960:	8b e0       	ldi	r24, 0x0B	; 11
    3962:	90 e1       	ldi	r25, 0x10	; 16
    3964:	58 df       	rcall	.-336    	; 0x3816 <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0));
    3966:	48 2e       	mov	r4, r24
    3968:	8a e0       	ldi	r24, 0x0A	; 10
    396a:	90 e1       	ldi	r25, 0x10	; 16
    396c:	54 df       	rcall	.-344    	; 0x3816 <eeprom_read>
    396e:	58 2e       	mov	r5, r24
    3970:	89 e0       	ldi	r24, 0x09	; 9
    3972:	90 e1       	ldi	r25, 0x10	; 16
    3974:	50 df       	rcall	.-352    	; 0x3816 <eeprom_read>
    3976:	68 2e       	mov	r6, r24
    3978:	20 2f       	mov	r18, r16
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	50 e0       	ldi	r21, 0x00	; 0
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	70 e0       	ldi	r23, 0x00	; 0
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	08 e2       	ldi	r16, 0x28	; 40
    398a:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    398e:	16 29       	or	r17, r6
    3990:	12 2b       	or	r17, r18
    3992:	c3 2a       	or	r12, r19
    3994:	f4 2a       	or	r15, r20
    3996:	a5 2f       	mov	r26, r21
    3998:	a9 29       	or	r26, r9
    399a:	f6 2f       	mov	r31, r22
    399c:	fa 29       	or	r31, r10
    399e:	e7 2f       	mov	r30, r23
    39a0:	eb 29       	or	r30, r11
    39a2:	d8 2a       	or	r13, r24
    39a4:	e9 2a       	or	r14, r25
    39a6:	22 2d       	mov	r18, r2
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	50 e0       	ldi	r21, 0x00	; 0
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	00 e2       	ldi	r16, 0x20	; 32
    39b8:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    39bc:	12 2b       	or	r17, r18
    39be:	c3 2a       	or	r12, r19
    39c0:	f4 2a       	or	r15, r20
    39c2:	a5 2b       	or	r26, r21
    39c4:	f6 2b       	or	r31, r22
    39c6:	e7 2b       	or	r30, r23
    39c8:	d8 2a       	or	r13, r24
    39ca:	e9 2a       	or	r14, r25
    39cc:	23 2d       	mov	r18, r3
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	50 e0       	ldi	r21, 0x00	; 0
    39d4:	60 e0       	ldi	r22, 0x00	; 0
    39d6:	70 e0       	ldi	r23, 0x00	; 0
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	08 e1       	ldi	r16, 0x18	; 24
    39de:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    39e2:	12 2b       	or	r17, r18
    39e4:	c3 2a       	or	r12, r19
    39e6:	f4 2a       	or	r15, r20
    39e8:	a5 2b       	or	r26, r21
    39ea:	f6 2b       	or	r31, r22
    39ec:	e7 2b       	or	r30, r23
    39ee:	d8 2a       	or	r13, r24
    39f0:	e9 2a       	or	r14, r25
    39f2:	24 2d       	mov	r18, r4
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	60 e0       	ldi	r22, 0x00	; 0
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	00 e1       	ldi	r16, 0x10	; 16
    3a04:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3a08:	12 2b       	or	r17, r18
    3a0a:	c3 2a       	or	r12, r19
    3a0c:	f4 2a       	or	r15, r20
    3a0e:	a5 2b       	or	r26, r21
    3a10:	f6 2b       	or	r31, r22
    3a12:	e7 2b       	or	r30, r23
    3a14:	d8 2a       	or	r13, r24
    3a16:	e9 2a       	or	r14, r25
    3a18:	25 2d       	mov	r18, r5
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	40 e0       	ldi	r20, 0x00	; 0
    3a1e:	50 e0       	ldi	r21, 0x00	; 0
    3a20:	60 e0       	ldi	r22, 0x00	; 0
    3a22:	70 e0       	ldi	r23, 0x00	; 0
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	08 e0       	ldi	r16, 0x08	; 8
    3a2a:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3a2e:	61 2e       	mov	r6, r17
    3a30:	62 2a       	or	r6, r18
    3a32:	7c 2c       	mov	r7, r12
    3a34:	73 2a       	or	r7, r19
    3a36:	8f 2c       	mov	r8, r15
    3a38:	84 2a       	or	r8, r20
    3a3a:	9a 2e       	mov	r9, r26
    3a3c:	95 2a       	or	r9, r21
    3a3e:	af 2e       	mov	r10, r31
    3a40:	a6 2a       	or	r10, r22
    3a42:	be 2e       	mov	r11, r30
    3a44:	b7 2a       	or	r11, r23
    3a46:	d8 2a       	or	r13, r24
		uint64_t t =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    3a48:	e9 2a       	or	r14, r25
    3a4a:	89 e1       	ldi	r24, 0x19	; 25
    3a4c:	90 e1       	ldi	r25, 0x10	; 16
    3a4e:	e3 de       	rcall	.-570    	; 0x3816 <eeprom_read>
    3a50:	18 2f       	mov	r17, r24
    3a52:	88 e1       	ldi	r24, 0x18	; 24
    3a54:	90 e1       	ldi	r25, 0x10	; 16
    3a56:	df de       	rcall	.-578    	; 0x3816 <eeprom_read>
    3a58:	48 2e       	mov	r4, r24
    3a5a:	21 2f       	mov	r18, r17
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e0       	ldi	r20, 0x00	; 0
    3a60:	50 e0       	ldi	r21, 0x00	; 0
    3a62:	60 e0       	ldi	r22, 0x00	; 0
    3a64:	70 e0       	ldi	r23, 0x00	; 0
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	08 e3       	ldi	r16, 0x38	; 56
    3a6c:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3a70:	c2 2e       	mov	r12, r18
    3a72:	53 2e       	mov	r5, r19
    3a74:	b4 2f       	mov	r27, r20
    3a76:	a5 2f       	mov	r26, r21
    3a78:	f6 2f       	mov	r31, r22
    3a7a:	e7 2f       	mov	r30, r23
    3a7c:	f8 2e       	mov	r15, r24
    3a7e:	19 2f       	mov	r17, r25
    3a80:	24 2d       	mov	r18, r4
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	40 e0       	ldi	r20, 0x00	; 0
    3a86:	50 e0       	ldi	r21, 0x00	; 0
    3a88:	60 e0       	ldi	r22, 0x00	; 0
    3a8a:	70 e0       	ldi	r23, 0x00	; 0
    3a8c:	80 e0       	ldi	r24, 0x00	; 0
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	00 e3       	ldi	r16, 0x30	; 48
    3a92:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3a96:	c2 2a       	or	r12, r18
    3a98:	53 2a       	or	r5, r19
    3a9a:	5f 82       	std	Y+7, r5	; 0x07
    3a9c:	2b 2e       	mov	r2, r27
    3a9e:	24 2a       	or	r2, r20
    3aa0:	3a 2e       	mov	r3, r26
    3aa2:	35 2a       	or	r3, r21
    3aa4:	4f 2e       	mov	r4, r31
    3aa6:	46 2a       	or	r4, r22
    3aa8:	5e 2e       	mov	r5, r30
    3aaa:	57 2a       	or	r5, r23
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    3aac:	f8 2a       	or	r15, r24
    3aae:	19 2b       	or	r17, r25
    3ab0:	87 e1       	ldi	r24, 0x17	; 23
    3ab2:	90 e1       	ldi	r25, 0x10	; 16
    3ab4:	b0 de       	rcall	.-672    	; 0x3816 <eeprom_read>
    3ab6:	08 2f       	mov	r16, r24
    3ab8:	86 e1       	ldi	r24, 0x16	; 22
    3aba:	90 e1       	ldi	r25, 0x10	; 16
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    3abc:	ac de       	rcall	.-680    	; 0x3816 <eeprom_read>
    3abe:	8b 83       	std	Y+3, r24	; 0x03
    3ac0:	85 e1       	ldi	r24, 0x15	; 21
    3ac2:	90 e1       	ldi	r25, 0x10	; 16
    3ac4:	a8 de       	rcall	.-688    	; 0x3816 <eeprom_read>
    3ac6:	8c 83       	std	Y+4, r24	; 0x04
    3ac8:	84 e1       	ldi	r24, 0x14	; 20
    3aca:	90 e1       	ldi	r25, 0x10	; 16
    3acc:	a4 de       	rcall	.-696    	; 0x3816 <eeprom_read>
    3ace:	8d 83       	std	Y+5, r24	; 0x05
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8   | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0));
    3ad0:	83 e1       	ldi	r24, 0x13	; 19
    3ad2:	90 e1       	ldi	r25, 0x10	; 16
    3ad4:	a0 de       	rcall	.-704    	; 0x3816 <eeprom_read>
    3ad6:	8e 83       	std	Y+6, r24	; 0x06
    3ad8:	82 e1       	ldi	r24, 0x12	; 18
    3ada:	90 e1       	ldi	r25, 0x10	; 16
    3adc:	9c de       	rcall	.-712    	; 0x3816 <eeprom_read>
    3ade:	e8 2f       	mov	r30, r24
    3ae0:	ab e2       	ldi	r26, 0x2B	; 43
    3ae2:	b0 e2       	ldi	r27, 0x20	; 32
		memcpy(&ground_p, &p, 8);
    3ae4:	6c 92       	st	X, r6
    3ae6:	11 96       	adiw	r26, 0x01	; 1
    3ae8:	7c 92       	st	X, r7
    3aea:	11 97       	sbiw	r26, 0x01	; 1
    3aec:	12 96       	adiw	r26, 0x02	; 2
    3aee:	8c 92       	st	X, r8
    3af0:	12 97       	sbiw	r26, 0x02	; 2
    3af2:	13 96       	adiw	r26, 0x03	; 3
    3af4:	9c 92       	st	X, r9
    3af6:	13 97       	sbiw	r26, 0x03	; 3
    3af8:	14 96       	adiw	r26, 0x04	; 4
    3afa:	ac 92       	st	X, r10
    3afc:	14 97       	sbiw	r26, 0x04	; 4
    3afe:	15 96       	adiw	r26, 0x05	; 5
    3b00:	bc 92       	st	X, r11
    3b02:	15 97       	sbiw	r26, 0x05	; 5
    3b04:	16 96       	adiw	r26, 0x06	; 6
    3b06:	dc 92       	st	X, r13
    3b08:	16 97       	sbiw	r26, 0x06	; 6
    3b0a:	17 96       	adiw	r26, 0x07	; 7
    3b0c:	ec 92       	st	X, r14
    3b0e:	a7 e2       	ldi	r26, 0x27	; 39
    3b10:	b0 e2       	ldi	r27, 0x20	; 32
		memcpy(&ground_t, &t, 8);
    3b12:	20 2f       	mov	r18, r16
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	40 e0       	ldi	r20, 0x00	; 0
    3b18:	50 e0       	ldi	r21, 0x00	; 0
    3b1a:	60 e0       	ldi	r22, 0x00	; 0
    3b1c:	70 e0       	ldi	r23, 0x00	; 0
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	08 e2       	ldi	r16, 0x28	; 40
    3b24:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3b28:	ce 2a       	or	r12, r30
    3b2a:	c2 2a       	or	r12, r18
    3b2c:	bf 80       	ldd	r11, Y+7	; 0x07
    3b2e:	b3 2a       	or	r11, r19
    3b30:	d4 2e       	mov	r13, r20
    3b32:	d2 28       	or	r13, r2
    3b34:	e5 2e       	mov	r14, r21
    3b36:	e3 28       	or	r14, r3
    3b38:	f6 2f       	mov	r31, r22
    3b3a:	f4 29       	or	r31, r4
    3b3c:	e7 2f       	mov	r30, r23
    3b3e:	e5 29       	or	r30, r5
    3b40:	f8 2a       	or	r15, r24
    3b42:	19 2b       	or	r17, r25
    3b44:	2b 81       	ldd	r18, Y+3	; 0x03
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	60 e0       	ldi	r22, 0x00	; 0
    3b4e:	70 e0       	ldi	r23, 0x00	; 0
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	00 e2       	ldi	r16, 0x20	; 32
    3b56:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3b5a:	c2 2a       	or	r12, r18
    3b5c:	b3 2a       	or	r11, r19
    3b5e:	d4 2a       	or	r13, r20
    3b60:	e5 2a       	or	r14, r21
    3b62:	f6 2b       	or	r31, r22
    3b64:	e7 2b       	or	r30, r23
    3b66:	f8 2a       	or	r15, r24
    3b68:	19 2b       	or	r17, r25
    3b6a:	2c 81       	ldd	r18, Y+4	; 0x04
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	50 e0       	ldi	r21, 0x00	; 0
    3b72:	60 e0       	ldi	r22, 0x00	; 0
    3b74:	70 e0       	ldi	r23, 0x00	; 0
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	08 e1       	ldi	r16, 0x18	; 24
    3b7c:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3b80:	c2 2a       	or	r12, r18
    3b82:	b3 2a       	or	r11, r19
    3b84:	d4 2a       	or	r13, r20
    3b86:	e5 2a       	or	r14, r21
    3b88:	f6 2b       	or	r31, r22
    3b8a:	e7 2b       	or	r30, r23
    3b8c:	f8 2a       	or	r15, r24
    3b8e:	19 2b       	or	r17, r25
    3b90:	2d 81       	ldd	r18, Y+5	; 0x05
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e0       	ldi	r20, 0x00	; 0
    3b96:	50 e0       	ldi	r21, 0x00	; 0
    3b98:	60 e0       	ldi	r22, 0x00	; 0
    3b9a:	70 e0       	ldi	r23, 0x00	; 0
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	00 e1       	ldi	r16, 0x10	; 16
    3ba2:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3ba6:	c2 2a       	or	r12, r18
    3ba8:	b3 2a       	or	r11, r19
    3baa:	d4 2a       	or	r13, r20
    3bac:	e5 2a       	or	r14, r21
    3bae:	f6 2b       	or	r31, r22
    3bb0:	e7 2b       	or	r30, r23
    3bb2:	f8 2a       	or	r15, r24
    3bb4:	19 2b       	or	r17, r25
    3bb6:	2e 81       	ldd	r18, Y+6	; 0x06
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	40 e0       	ldi	r20, 0x00	; 0
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	60 e0       	ldi	r22, 0x00	; 0
    3bc0:	70 e0       	ldi	r23, 0x00	; 0
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	08 e0       	ldi	r16, 0x08	; 8
    3bc8:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__ashldi3>
    3bcc:	2c 29       	or	r18, r12
    3bce:	2c 93       	st	X, r18
    3bd0:	3b 29       	or	r19, r11
    3bd2:	11 96       	adiw	r26, 0x01	; 1
    3bd4:	3c 93       	st	X, r19
    3bd6:	11 97       	sbiw	r26, 0x01	; 1
    3bd8:	4d 29       	or	r20, r13
    3bda:	12 96       	adiw	r26, 0x02	; 2
    3bdc:	4c 93       	st	X, r20
    3bde:	12 97       	sbiw	r26, 0x02	; 2
    3be0:	5e 29       	or	r21, r14
    3be2:	13 96       	adiw	r26, 0x03	; 3
    3be4:	5c 93       	st	X, r21
    3be6:	13 97       	sbiw	r26, 0x03	; 3
    3be8:	6f 2b       	or	r22, r31
    3bea:	14 96       	adiw	r26, 0x04	; 4
    3bec:	6c 93       	st	X, r22
    3bee:	14 97       	sbiw	r26, 0x04	; 4
    3bf0:	7e 2b       	or	r23, r30
    3bf2:	15 96       	adiw	r26, 0x05	; 5
    3bf4:	7c 93       	st	X, r23
    3bf6:	15 97       	sbiw	r26, 0x05	; 5
    3bf8:	8f 29       	or	r24, r15
    3bfa:	16 96       	adiw	r26, 0x06	; 6
    3bfc:	8c 93       	st	X, r24
    3bfe:	16 97       	sbiw	r26, 0x06	; 6
    3c00:	91 2b       	or	r25, r17
    3c02:	17 96       	adiw	r26, 0x07	; 7
		
		alt = (double) ((int16_t) (eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE0)));
    3c04:	9c 93       	st	X, r25
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	90 e1       	ldi	r25, 0x10	; 16
    3c0a:	05 de       	rcall	.-1014   	; 0x3816 <eeprom_read>
    3c0c:	18 2f       	mov	r17, r24
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	90 e1       	ldi	r25, 0x10	; 16
    3c12:	01 de       	rcall	.-1022   	; 0x3816 <eeprom_read>
    3c14:	61 2f       	mov	r22, r17
    3c16:	70 e0       	ldi	r23, 0x00	; 0
    3c18:	76 2f       	mov	r23, r22
    3c1a:	66 27       	eor	r22, r22
    3c1c:	68 2b       	or	r22, r24
    3c1e:	07 2e       	mov	r0, r23
    3c20:	00 0c       	add	r0, r0
    3c22:	88 0b       	sbc	r24, r24
    3c24:	99 0b       	sbc	r25, r25
    3c26:	bf d5       	rcall	.+2942   	; 0x47a6 <__floatsisf>
    3c28:	60 93 2e 21 	sts	0x212E, r22	; 0x80212e <alt>
    3c2c:	70 93 2f 21 	sts	0x212F, r23	; 0x80212f <alt+0x1>
    3c30:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <alt+0x2>
    3c34:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <alt+0x3>
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
    3c38:	87 e0       	ldi	r24, 0x07	; 7
    3c3a:	90 e1       	ldi	r25, 0x10	; 16
    3c3c:	ec dd       	rcall	.-1064   	; 0x3816 <eeprom_read>
    3c3e:	18 2f       	mov	r17, r24
    3c40:	86 e0       	ldi	r24, 0x06	; 6
    3c42:	90 e1       	ldi	r25, 0x10	; 16
    3c44:	e8 dd       	rcall	.-1072   	; 0x3816 <eeprom_read>
    3c46:	21 2f       	mov	r18, r17
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	32 2f       	mov	r19, r18
    3c4c:	22 27       	eor	r18, r18
    3c4e:	28 2b       	or	r18, r24
    3c50:	20 93 3e 21 	sts	0x213E, r18	; 0x80213e <timer>
    3c54:	30 93 3f 21 	sts	0x213F, r19	; 0x80213f <timer+0x1>
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
    3c58:	84 e0       	ldi	r24, 0x04	; 4
    3c5a:	90 e1       	ldi	r25, 0x10	; 16
    3c5c:	dc dd       	rcall	.-1096   	; 0x3816 <eeprom_read>
    3c5e:	18 2f       	mov	r17, r24
    3c60:	83 e0       	ldi	r24, 0x03	; 3
    3c62:	90 e1       	ldi	r25, 0x10	; 16
    3c64:	d8 dd       	rcall	.-1104   	; 0x3816 <eeprom_read>
    3c66:	21 2f       	mov	r18, r17
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	32 2f       	mov	r19, r18
    3c6c:	22 27       	eor	r18, r18
    3c6e:	28 2b       	or	r18, r24
    3c70:	20 93 3a 21 	sts	0x213A, r18	; 0x80213a <packets>
    3c74:	30 93 3b 21 	sts	0x213B, r19	; 0x80213b <packets+0x1>
    3c78:	85 e0       	ldi	r24, 0x05	; 5
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
    3c7a:	90 e1       	ldi	r25, 0x10	; 16
    3c7c:	cc dd       	rcall	.-1128   	; 0x3816 <eeprom_read>
    3c7e:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <state>
    3c82:	19 c0       	rjmp	.+50     	; 0x3cb6 <system_init+0x474>
	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);

	if((b1 == b2) && (b1 != 0xFF)){
    3c84:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <get_pressure>
		state = eeprom_read(EEPROM_PAGE|STATE_BYTE);
		//printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
	}
	else{
		// Initialization of variables
		ground_p = get_pressure();
    3c88:	60 93 2b 20 	sts	0x202B, r22	; 0x80202b <ground_p>
    3c8c:	70 93 2c 20 	sts	0x202C, r23	; 0x80202c <ground_p+0x1>
    3c90:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p+0x2>
    3c94:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x3>
    3c98:	83 e3       	ldi	r24, 0x33	; 51
		ground_t = get_temperature();
    3c9a:	93 e1       	ldi	r25, 0x13	; 19
    3c9c:	a5 e9       	ldi	r26, 0x95	; 149
    3c9e:	b3 e4       	ldi	r27, 0x43	; 67
    3ca0:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    3ca4:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    3ca8:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    3cac:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    3cb0:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <state>
		state = 0;
    3cb4:	b5 d9       	rcall	.-3222   	; 0x3020 <eeprom_write_const>
		eeprom_write_const();
    3cb6:	0e 94 c6 13 	call	0x278c	; 0x278c <state_check>
	}

	state_check();
    3cba:	27 96       	adiw	r28, 0x07	; 7
    3cbc:	cd bf       	out	0x3d, r28	; 61
}
    3cbe:	de bf       	out	0x3e, r29	; 62
    3cc0:	df 91       	pop	r29
    3cc2:	cf 91       	pop	r28
    3cc4:	1f 91       	pop	r17
    3cc6:	0f 91       	pop	r16
    3cc8:	ff 90       	pop	r15
    3cca:	ef 90       	pop	r14
    3ccc:	df 90       	pop	r13
    3cce:	cf 90       	pop	r12
    3cd0:	bf 90       	pop	r11
    3cd2:	af 90       	pop	r10
    3cd4:	9f 90       	pop	r9
    3cd6:	8f 90       	pop	r8
    3cd8:	7f 90       	pop	r7
    3cda:	6f 90       	pop	r6
    3cdc:	5f 90       	pop	r5
    3cde:	4f 90       	pop	r4
    3ce0:	3f 90       	pop	r3
    3ce2:	2f 90       	pop	r2
    3ce4:	08 95       	ret

00003ce6 <eeprom_erase>:
    3ce6:	83 e3       	ldi	r24, 0x33	; 51
    3ce8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    3cec:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    3cee:	e0 ec       	ldi	r30, 0xC0	; 192
    3cf0:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    3cf2:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    3cf4:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    3cf6:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    3cf8:	8f 5f       	subi	r24, 0xFF	; 255
    3cfa:	80 32       	cpi	r24, 0x20	; 32
    3cfc:	d9 f7       	brne	.-10     	; 0x3cf4 <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}

	NVM.CMD = ERASE_EEPROM;
    3cfe:	e0 ec       	ldi	r30, 0xC0	; 192
    3d00:	f1 e0       	ldi	r31, 0x01	; 1
    3d02:	80 e3       	ldi	r24, 0x30	; 48
    3d04:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    3d06:	88 ed       	ldi	r24, 0xD8	; 216
    3d08:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    3d0e:	87 85       	ldd	r24, Z+15	; 0x0f
    3d10:	88 23       	and	r24, r24
    3d12:	ec f3       	brlt	.-6      	; 0x3d0e <eeprom_erase+0x28>
}
    3d14:	08 95       	ret

00003d16 <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    3d16:	e7 df       	rcall	.-50     	; 0x3ce6 <eeprom_erase>

	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    3d18:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    3d1a:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    3d1c:	98 ed       	ldi	r25, 0xD8	; 216
    3d1e:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    3d20:	91 e0       	ldi	r25, 0x01	; 1
    3d22:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    3d26:	8f bf       	out	0x3f, r24	; 63
    3d28:	08 95       	ret

00003d2a <command>:
	ticks_per_sec++;
	printf("INTERRUPTED BITCH\n");
}

void command(uint8_t c){
	switch(c){
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	e1 56       	subi	r30, 0x61	; 97
    3d30:	f1 09       	sbc	r31, r1
    3d32:	e3 31       	cpi	r30, 0x13	; 19
    3d34:	f1 05       	cpc	r31, r1
    3d36:	c8 f4       	brcc	.+50     	; 0x3d6a <command+0x40>
    3d38:	88 27       	eor	r24, r24
    3d3a:	e2 50       	subi	r30, 0x02	; 2
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d40:	0c 94 c3 26 	jmp	0x4d86	; 0x4d86 <__tablejump2__>
		case RESET:
			reset();
    3d44:	e8 cf       	rjmp	.-48     	; 0x3d16 <reset>
			break;
    3d46:	08 95       	ret
		case CALIBRATE:
			calibrate();
    3d48:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <calibrate>
			break;
    3d4c:	08 95       	ret
		case CALIBRATE_ALTITUDE:
			cali_alt();
    3d4e:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <cali_alt>
			break;
    3d52:	08 95       	ret
		case CALIBRATE_ANGLE:
			cali_ang();
    3d54:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <cali_ang>
			break;
    3d58:	08 95       	ret
		case SERVO_RELEASE:
			servo_release();
    3d5a:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <servo_release>
			break;
    3d5e:	08 95       	ret
		case SERVO_CLOSE:
			servo_close();
    3d60:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <servo_close>
			break;
    3d64:	08 95       	ret
		case PACKET:
			packet();
    3d66:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <packet>
    3d6a:	08 95       	ret

00003d6c <main>:

char* format = "5343,%i,%i,%i,%li,%i.%i,%i.%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n";


////////////////////////////// Functions ///////////////////////////////
int main(void){
    3d6c:	cf 93       	push	r28
    3d6e:	df 93       	push	r29
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	c8 56       	subi	r28, 0x68	; 104
    3d76:	d1 09       	sbc	r29, r1
    3d78:	cd bf       	out	0x3d, r28	; 61
    3d7a:	de bf       	out	0x3e, r29	; 62
	system_init();
    3d7c:	62 dd       	rcall	.-1340   	; 0x3842 <system_init>
	//delay_ms(100);

	PORTD.DIR |= PIN3_bm;
    3d7e:	e0 e6       	ldi	r30, 0x60	; 96
    3d80:	f6 e0       	ldi	r31, 0x06	; 6
    3d82:	80 81       	ld	r24, Z
    3d84:	88 60       	ori	r24, 0x08	; 8
    3d86:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    3d88:	84 81       	ldd	r24, Z+4	; 0x04
    3d8a:	88 60       	ori	r24, 0x08	; 8
    3d8c:	84 83       	std	Z+4, r24	; 0x04

	//printf("Initialized\n");
	//buzzer_init();

	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    3d8e:	14 e1       	ldi	r17, 0x14	; 20
    3d90:	be 01       	movw	r22, r28
    3d92:	6f 5f       	subi	r22, 0xFF	; 255
    3d94:	7f 4f       	sbci	r23, 0xFF	; 255
    3d96:	fb 01       	movw	r30, r22
    3d98:	81 2f       	mov	r24, r17
    3d9a:	11 92       	st	Z+, r1
    3d9c:	8a 95       	dec	r24
    3d9e:	e9 f7       	brne	.-6      	; 0x3d9a <main+0x2e>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    3da0:	4a e0       	ldi	r20, 0x0A	; 10
    3da2:	50 e0       	ldi	r21, 0x00	; 0
    3da4:	ce 01       	movw	r24, r28
    3da6:	45 96       	adiw	r24, 0x15	; 21
    3da8:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <rb16_init>

	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    3dac:	be 01       	movw	r22, r28
    3dae:	63 5e       	subi	r22, 0xE3	; 227
    3db0:	7f 4f       	sbci	r23, 0xFF	; 255
    3db2:	88 e2       	ldi	r24, 0x28	; 40
    3db4:	fb 01       	movw	r30, r22
    3db6:	11 92       	st	Z+, r1
    3db8:	8a 95       	dec	r24
    3dba:	e9 f7       	brne	.-6      	; 0x3db6 <main+0x4a>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    3dbc:	4a e0       	ldi	r20, 0x0A	; 10
    3dbe:	50 e0       	ldi	r21, 0x00	; 0
    3dc0:	ce 01       	movw	r24, r28
    3dc2:	8b 5b       	subi	r24, 0xBB	; 187
    3dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <rb32_init>

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    3dca:	be 01       	movw	r22, r28
    3dcc:	63 5b       	subi	r22, 0xB3	; 179
    3dce:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd0:	fb 01       	movw	r30, r22
    3dd2:	11 92       	st	Z+, r1
    3dd4:	1a 95       	dec	r17
    3dd6:	e9 f7       	brne	.-6      	; 0x3dd2 <main+0x66>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    3dd8:	4a e0       	ldi	r20, 0x0A	; 10
    3dda:	50 e0       	ldi	r21, 0x00	; 0
    3ddc:	ce 01       	movw	r24, r28
    3dde:	8f 59       	subi	r24, 0x9F	; 159
    3de0:	9f 4f       	sbci	r25, 0xFF	; 255
    3de2:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <rb16_init>

	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
	//printf("Before Loop\n");

	printf("BEFORE LOOP\n");
    3de6:	8c e5       	ldi	r24, 0x5C	; 92
    3de8:	90 e2       	ldi	r25, 0x20	; 32
    3dea:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <puts>
	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    3dee:	00 e0       	ldi	r16, 0x00	; 0

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	uint8_t cam_initialized = 0;
    3df0:	10 e0       	ldi	r17, 0x00	; 0
	printf("BEFORE LOOP\n");

	while(1){
		//printf("In Loop\n");
		// Check Sensors
		data_collect(&altitudes,&pressures);
    3df2:	be 01       	movw	r22, r28
    3df4:	6b 5b       	subi	r22, 0xBB	; 187
    3df6:	7f 4f       	sbci	r23, 0xFF	; 255
    3df8:	ce 01       	movw	r24, r28
    3dfa:	45 96       	adiw	r24, 0x15	; 21
    3dfc:	0e 94 33 13 	call	0x2666	; 0x2666 <data_collect>

		state_check();
    3e00:	0e 94 c6 13 	call	0x278c	; 0x278c <state_check>

		// IMU Check
		//imu_read();

		//Gives each flight state their unique tasks
		switch(state){
    3e04:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <state>
    3e08:	81 30       	cpi	r24, 0x01	; 1
    3e0a:	31 f0       	breq	.+12     	; 0x3e18 <main+0xac>
    3e0c:	b8 f1       	brcs	.+110    	; 0x3e7c <main+0x110>
    3e0e:	82 30       	cpi	r24, 0x02	; 2
    3e10:	39 f0       	breq	.+14     	; 0x3e20 <main+0xb4>
    3e12:	83 30       	cpi	r24, 0x03	; 3
    3e14:	69 f1       	breq	.+90     	; 0x3e70 <main+0x104>
    3e16:	30 c0       	rjmp	.+96     	; 0x3e78 <main+0x10c>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    3e18:	11 11       	cpse	r17, r1
    3e1a:	30 c0       	rjmp	.+96     	; 0x3e7c <main+0x110>
					cam_initialized = 1;
    3e1c:	11 e0       	ldi	r17, 0x01	; 1
    3e1e:	2e c0       	rjmp	.+92     	; 0x3e7c <main+0x110>
					//cam_switch();
				}
				break;
			case 2:
				if(!cam_initialized){
    3e20:	11 11       	cpse	r17, r1
    3e22:	01 c0       	rjmp	.+2      	; 0x3e26 <main+0xba>
					cam_initialized = 1;
    3e24:	11 e0       	ldi	r17, 0x01	; 1
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
    3e26:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <alt>
    3e2a:	70 91 2f 21 	lds	r23, 0x212F	; 0x80212f <alt+0x1>
    3e2e:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <alt+0x2>
    3e32:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <alt+0x3>
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	41 ee       	ldi	r20, 0xE1	; 225
    3e3c:	53 e4       	ldi	r21, 0x43	; 67
    3e3e:	af d3       	rcall	.+1886   	; 0x459e <__subsf3>
    3e40:	7f d4       	rcall	.+2302   	; 0x4740 <__fixsfsi>
    3e42:	9b 01       	movw	r18, r22
    3e44:	77 23       	and	r23, r23
    3e46:	24 f4       	brge	.+8      	; 0x3e50 <main+0xe4>
    3e48:	22 27       	eor	r18, r18
    3e4a:	33 27       	eor	r19, r19
    3e4c:	26 1b       	sub	r18, r22
    3e4e:	37 0b       	sbc	r19, r23
    3e50:	2a 30       	cpi	r18, 0x0A	; 10
    3e52:	31 05       	cpc	r19, r1
    3e54:	1c f4       	brge	.+6      	; 0x3e5c <main+0xf0>
	//printf("HALL SENSOR INITIALIZED\n");

}

void release(void){
	servo_release();
    3e56:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <servo_release>
    3e5a:	10 c0       	rjmp	.+32     	; 0x3e7c <main+0x110>
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
					release();				// Releases the payload
					//hall_sensor_init();		// Starts hall effect sensor to read rpm
				}
				else if(released){
    3e5c:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <released>
    3e60:	88 23       	and	r24, r24
    3e62:	61 f0       	breq	.+24     	; 0x3e7c <main+0x110>
					servo_pid(&directions);	// Updates the PID
    3e64:	ce 01       	movw	r24, r28
    3e66:	8f 59       	subi	r24, 0x9F	; 159
    3e68:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6a:	0e 94 ce 14 	call	0x299c	; 0x299c <servo_pid>
    3e6e:	06 c0       	rjmp	.+12     	; 0x3e7c <main+0x110>
				}
				break;
			case 3:
				if(!buzzer_initialized){
    3e70:	01 11       	cpse	r16, r1
    3e72:	04 c0       	rjmp	.+8      	; 0x3e7c <main+0x110>
					//buzzer_init();
					buzzer_initialized = 1;
    3e74:	01 e0       	ldi	r16, 0x01	; 1
    3e76:	02 c0       	rjmp	.+4      	; 0x3e7c <main+0x110>
				}
				break;
			default:
				state_check();
    3e78:	0e 94 c6 13 	call	0x278c	; 0x278c <state_check>
				break;
		}

		if(time_flag){
    3e7c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <time_flag>
    3e80:	88 23       	and	r24, r24
			calc_rpm();
    3e82:	29 f0       	breq	.+10     	; 0x3e8e <main+0x122>
    3e84:	0e 94 6f 15 	call	0x2ade	; 0x2ade <calc_rpm>
			time_update();
    3e88:	86 da       	rcall	.-2804   	; 0x3396 <time_update>
			time_flag = 0;
    3e8a:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <time_flag>
		}
		if(xbee_flag){
    3e8e:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <xbee_flag>
    3e92:	88 23       	and	r24, r24
			command(xbee_comm);
    3e94:	39 f0       	breq	.+14     	; 0x3ea4 <main+0x138>
    3e96:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <xbee_comm>
    3e9a:	47 df       	rcall	.-370    	; 0x3d2a <command>
			xbee_comm = 0;
    3e9c:	10 92 4c 21 	sts	0x214C, r1	; 0x80214c <xbee_comm>
			xbee_flag = 0;
    3ea0:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <xbee_flag>
		}

		data_packets++;
    3ea4:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <data_packets>
    3ea8:	90 91 3d 21 	lds	r25, 0x213D	; 0x80213d <data_packets+0x1>
    3eac:	01 96       	adiw	r24, 0x01	; 1
    3eae:	80 93 3c 21 	sts	0x213C, r24	; 0x80213c <data_packets>
    3eb2:	90 93 3d 21 	sts	0x213D, r25	; 0x80213d <data_packets+0x1>
		if(timer != 0){
    3eb6:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <timer>
    3eba:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <timer+0x1>
    3ebe:	89 2b       	or	r24, r25
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <main+0x158>
    3ec2:	97 cf       	rjmp	.-210    	; 0x3df2 <main+0x86>
			rate = data_packets / timer;
    3ec4:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <data_packets>
    3ec8:	90 91 3d 21 	lds	r25, 0x213D	; 0x80213d <data_packets+0x1>
    3ecc:	60 91 3e 21 	lds	r22, 0x213E	; 0x80213e <timer>
    3ed0:	70 91 3f 21 	lds	r23, 0x213F	; 0x80213f <timer+0x1>
    3ed4:	f3 d6       	rcall	.+3558   	; 0x4cbc <__udivmodhi4>
    3ed6:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <rate>
    3eda:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <rate+0x1>
    3ede:	89 cf       	rjmp	.-238    	; 0x3df2 <main+0x86>

00003ee0 <__vector_47>:
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}


ISR(TCE0_OVF_vect){
    3ee0:	1f 92       	push	r1
    3ee2:	0f 92       	push	r0
    3ee4:	0f b6       	in	r0, 0x3f	; 63
    3ee6:	0f 92       	push	r0
    3ee8:	11 24       	eor	r1, r1
    3eea:	08 b6       	in	r0, 0x38	; 56
    3eec:	0f 92       	push	r0
    3eee:	18 be       	out	0x38, r1	; 56
    3ef0:	8f 93       	push	r24
    3ef2:	9f 93       	push	r25
	timer++;
    3ef4:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <timer>
    3ef8:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <timer+0x1>
    3efc:	01 96       	adiw	r24, 0x01	; 1
    3efe:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <timer>
    3f02:	90 93 3f 21 	sts	0x213F, r25	; 0x80213f <timer+0x1>
	time_flag = 1;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <time_flag>
}
    3f0c:	9f 91       	pop	r25
    3f0e:	8f 91       	pop	r24
    3f10:	0f 90       	pop	r0
    3f12:	08 be       	out	0x38, r0	; 56
    3f14:	0f 90       	pop	r0
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	0f 90       	pop	r0
    3f1a:	1f 90       	pop	r1
    3f1c:	18 95       	reti

00003f1e <__vector_58>:


ISR(USARTE0_RXC_vect){
    3f1e:	1f 92       	push	r1
    3f20:	0f 92       	push	r0
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	0f 92       	push	r0
    3f26:	11 24       	eor	r1, r1
    3f28:	08 b6       	in	r0, 0x38	; 56
    3f2a:	0f 92       	push	r0
    3f2c:	18 be       	out	0x38, r1	; 56
    3f2e:	09 b6       	in	r0, 0x39	; 57
    3f30:	0f 92       	push	r0
    3f32:	19 be       	out	0x39, r1	; 57
    3f34:	0b b6       	in	r0, 0x3b	; 59
    3f36:	0f 92       	push	r0
    3f38:	1b be       	out	0x3b, r1	; 59
    3f3a:	2f 93       	push	r18
    3f3c:	3f 93       	push	r19
    3f3e:	4f 93       	push	r20
    3f40:	5f 93       	push	r21
    3f42:	6f 93       	push	r22
    3f44:	7f 93       	push	r23
    3f46:	8f 93       	push	r24
    3f48:	9f 93       	push	r25
    3f4a:	af 93       	push	r26
    3f4c:	bf 93       	push	r27
    3f4e:	ef 93       	push	r30
    3f50:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    3f52:	80 ea       	ldi	r24, 0xA0	; 160
    3f54:	9a e0       	ldi	r25, 0x0A	; 10
    3f56:	0e 94 8a 0a 	call	0x1514	; 0x1514 <usart_getchar>
    3f5a:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <xbee_comm>
	xbee_flag = 1;
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <xbee_flag>
}
    3f64:	ff 91       	pop	r31
    3f66:	ef 91       	pop	r30
    3f68:	bf 91       	pop	r27
    3f6a:	af 91       	pop	r26
    3f6c:	9f 91       	pop	r25
    3f6e:	8f 91       	pop	r24
    3f70:	7f 91       	pop	r23
    3f72:	6f 91       	pop	r22
    3f74:	5f 91       	pop	r21
    3f76:	4f 91       	pop	r20
    3f78:	3f 91       	pop	r19
    3f7a:	2f 91       	pop	r18
    3f7c:	0f 90       	pop	r0
    3f7e:	0b be       	out	0x3b, r0	; 59
    3f80:	0f 90       	pop	r0
    3f82:	09 be       	out	0x39, r0	; 57
    3f84:	0f 90       	pop	r0
    3f86:	08 be       	out	0x38, r0	; 56
    3f88:	0f 90       	pop	r0
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	0f 90       	pop	r0
    3f8e:	1f 90       	pop	r1
    3f90:	18 95       	reti

00003f92 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    3f92:	1f 92       	push	r1
    3f94:	0f 92       	push	r0
    3f96:	0f b6       	in	r0, 0x3f	; 63
    3f98:	0f 92       	push	r0
    3f9a:	11 24       	eor	r1, r1
    3f9c:	08 b6       	in	r0, 0x38	; 56
    3f9e:	0f 92       	push	r0
    3fa0:	18 be       	out	0x38, r1	; 56
    3fa2:	09 b6       	in	r0, 0x39	; 57
    3fa4:	0f 92       	push	r0
    3fa6:	19 be       	out	0x39, r1	; 57
    3fa8:	0a b6       	in	r0, 0x3a	; 58
    3faa:	0f 92       	push	r0
    3fac:	1a be       	out	0x3a, r1	; 58
    3fae:	0b b6       	in	r0, 0x3b	; 59
    3fb0:	0f 92       	push	r0
    3fb2:	1b be       	out	0x3b, r1	; 59
    3fb4:	8f 92       	push	r8
    3fb6:	9f 92       	push	r9
    3fb8:	af 92       	push	r10
    3fba:	bf 92       	push	r11
    3fbc:	cf 92       	push	r12
    3fbe:	df 92       	push	r13
    3fc0:	ef 92       	push	r14
    3fc2:	ff 92       	push	r15
    3fc4:	1f 93       	push	r17
    3fc6:	2f 93       	push	r18
    3fc8:	3f 93       	push	r19
    3fca:	4f 93       	push	r20
    3fcc:	5f 93       	push	r21
    3fce:	6f 93       	push	r22
    3fd0:	7f 93       	push	r23
    3fd2:	8f 93       	push	r24
    3fd4:	9f 93       	push	r25
    3fd6:	af 93       	push	r26
    3fd8:	bf 93       	push	r27
    3fda:	ef 93       	push	r30
    3fdc:	ff 93       	push	r31
    3fde:	cf 93       	push	r28
    3fe0:	df 93       	push	r29
    3fe2:	00 d0       	rcall	.+0      	; 0x3fe4 <__vector_91+0x52>
    3fe4:	00 d0       	rcall	.+0      	; 0x3fe6 <__vector_91+0x54>
    3fe6:	cd b7       	in	r28, 0x3d	; 61
    3fe8:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    3fea:	80 eb       	ldi	r24, 0xB0	; 176
    3fec:	99 e0       	ldi	r25, 0x09	; 9
    3fee:	0e 94 8a 0a 	call	0x1514	; 0x1514 <usart_getchar>
    3ff2:	18 2f       	mov	r17, r24
	//printf("%c",c);

	if(c == (uint8_t) '$'){
    3ff4:	84 32       	cpi	r24, 0x24	; 36
    3ff6:	51 f4       	brne	.+20     	; 0x400c <__stack+0xd>
		writing = 1;
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <writing>
		pos = 0;
    3ffe:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <pos>
		word_pos = 0;
    4002:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <word_pos>
		commas = 0;
    4006:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <commas>
    400a:	5a c2       	rjmp	.+1204   	; 0x44c0 <__stack+0x4c1>
	}
	else if(c == (uint8_t) '*'){
    400c:	8a 32       	cpi	r24, 0x2A	; 42
    400e:	29 f4       	brne	.+10     	; 0x401a <__stack+0x1b>
		commas = 0;
    4010:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <commas>
		writing = 0;
    4014:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <writing>
    4018:	53 c2       	rjmp	.+1190   	; 0x44c0 <__stack+0x4c1>
	}
	else if(c == (uint8_t) ','){
    401a:	8c 32       	cpi	r24, 0x2C	; 44
    401c:	09 f0       	breq	.+2      	; 0x4020 <__stack+0x21>
    401e:	50 c2       	rjmp	.+1184   	; 0x44c0 <__stack+0x4c1>
		gps[0] = 32;
    4020:	e6 e9       	ldi	r30, 0x96	; 150
    4022:	f1 e2       	ldi	r31, 0x21	; 33
    4024:	80 e2       	ldi	r24, 0x20	; 32
    4026:	80 83       	st	Z, r24
		if(gps[1] == 32){
    4028:	81 81       	ldd	r24, Z+1	; 0x01
    402a:	80 32       	cpi	r24, 0x20	; 32
    402c:	09 f0       	breq	.+2      	; 0x4030 <__stack+0x31>
    402e:	77 c2       	rjmp	.+1262   	; 0x451e <__stack+0x51f>
			gps[0] = '0';
    4030:	80 e3       	ldi	r24, 0x30	; 48
    4032:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <gps>
    4036:	73 c2       	rjmp	.+1254   	; 0x451e <__stack+0x51f>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4038:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <gps>
    403c:	8e 32       	cpi	r24, 0x2E	; 46
    403e:	09 f0       	breq	.+2      	; 0x4042 <__stack+0x43>
    4040:	a3 c1       	rjmp	.+838    	; 0x4388 <__stack+0x389>
    4042:	a9 c1       	rjmp	.+850    	; 0x4396 <__stack+0x397>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4044:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <gps>
    4048:	8e 32       	cpi	r24, 0x2E	; 46
    404a:	09 f0       	breq	.+2      	; 0x404e <__stack+0x4f>
    404c:	ef c0       	rjmp	.+478    	; 0x422c <__stack+0x22d>
    404e:	f5 c0       	rjmp	.+490    	; 0x423a <__stack+0x23b>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4050:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <gps>
    4054:	8e 32       	cpi	r24, 0x2E	; 46
    4056:	09 f0       	breq	.+2      	; 0x405a <__stack+0x5b>
    4058:	52 c0       	rjmp	.+164    	; 0x40fe <__stack+0xff>
    405a:	58 c0       	rjmp	.+176    	; 0x410c <__stack+0x10d>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    405c:	91 91       	ld	r25, Z+
    405e:	9e 32       	cpi	r25, 0x2E	; 46
    4060:	29 f4       	brne	.+10     	; 0x406c <__stack+0x6d>
    4062:	01 c0       	rjmp	.+2      	; 0x4066 <__stack+0x67>
    4064:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    4066:	80 93 41 21 	sts	0x2141, r24	; 0x802141 <idx>
						break;
    406a:	03 c0       	rjmp	.+6      	; 0x4072 <__stack+0x73>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    406c:	8f 5f       	subi	r24, 0xFF	; 255
    406e:	8f 30       	cpi	r24, 0x0F	; 15
    4070:	a9 f7       	brne	.-22     	; 0x405c <__stack+0x5d>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4072:	e0 91 41 21 	lds	r30, 0x2141	; 0x802141 <idx>
    4076:	f0 e0       	ldi	r31, 0x00	; 0
    4078:	ea 56       	subi	r30, 0x6A	; 106
    407a:	fe 4d       	sbci	r31, 0xDE	; 222
    407c:	80 e2       	ldi	r24, 0x20	; 32
    407e:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    4080:	20 91 41 21 	lds	r18, 0x2141	; 0x802141 <idx>
    4084:	2f 5f       	subi	r18, 0xFF	; 255
    4086:	2f 30       	cpi	r18, 0x0F	; 15
    4088:	c8 f4       	brcc	.+50     	; 0x40bc <__stack+0xbd>
					if(gps[i] == 32){
    408a:	82 2f       	mov	r24, r18
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	fc 01       	movw	r30, r24
    4090:	ea 56       	subi	r30, 0x6A	; 106
    4092:	fe 4d       	sbci	r31, 0xDE	; 222
    4094:	30 81       	ld	r19, Z
    4096:	30 32       	cpi	r19, 0x20	; 32
    4098:	89 f0       	breq	.+34     	; 0x40bc <__stack+0xbd>
						break;
					}
					gps[i] = 32;
    409a:	40 e2       	ldi	r20, 0x20	; 32
    409c:	08 c0       	rjmp	.+16     	; 0x40ae <__stack+0xaf>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    409e:	82 2f       	mov	r24, r18
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	fc 01       	movw	r30, r24
    40a4:	ea 56       	subi	r30, 0x6A	; 106
    40a6:	fe 4d       	sbci	r31, 0xDE	; 222
    40a8:	30 81       	ld	r19, Z
    40aa:	30 32       	cpi	r19, 0x20	; 32
    40ac:	39 f0       	breq	.+14     	; 0x40bc <__stack+0xbd>
						break;
					}
					gps[i] = 32;
    40ae:	fc 01       	movw	r30, r24
    40b0:	ea 56       	subi	r30, 0x6A	; 106
    40b2:	fe 4d       	sbci	r31, 0xDE	; 222
    40b4:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    40b6:	2f 5f       	subi	r18, 0xFF	; 255
    40b8:	2f 30       	cpi	r18, 0x0F	; 15
    40ba:	89 f7       	brne	.-30     	; 0x409e <__stack+0x9f>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    40bc:	ce 01       	movw	r24, r28
    40be:	01 96       	adiw	r24, 0x01	; 1
    40c0:	9f 93       	push	r25
    40c2:	8f 93       	push	r24
    40c4:	88 e6       	ldi	r24, 0x68	; 104
    40c6:	90 e2       	ldi	r25, 0x20	; 32
    40c8:	9f 93       	push	r25
    40ca:	8f 93       	push	r24
    40cc:	86 e9       	ldi	r24, 0x96	; 150
    40ce:	91 e2       	ldi	r25, 0x21	; 33
    40d0:	9f 93       	push	r25
    40d2:	8f 93       	push	r24
    40d4:	66 d7       	rcall	.+3788   	; 0x4fa2 <sscanf>
				gps_t = (double) val;
    40d6:	69 81       	ldd	r22, Y+1	; 0x01
    40d8:	7a 81       	ldd	r23, Y+2	; 0x02
    40da:	8b 81       	ldd	r24, Y+3	; 0x03
    40dc:	9c 81       	ldd	r25, Y+4	; 0x04
    40de:	63 d3       	rcall	.+1734   	; 0x47a6 <__floatsisf>
    40e0:	60 93 22 21 	sts	0x2122, r22	; 0x802122 <gps_t>
    40e4:	70 93 23 21 	sts	0x2123, r23	; 0x802123 <gps_t+0x1>
    40e8:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <gps_t+0x2>
    40ec:	90 93 25 21 	sts	0x2125, r25	; 0x802125 <gps_t+0x3>
				break;
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	0f 90       	pop	r0
    40fc:	c3 c1       	rjmp	.+902    	; 0x4484 <__stack+0x485>
    40fe:	e7 e9       	ldi	r30, 0x97	; 151
    4100:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    4102:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    4104:	91 91       	ld	r25, Z+
    4106:	9e 32       	cpi	r25, 0x2E	; 46
    4108:	29 f4       	brne	.+10     	; 0x4114 <__stack+0x115>
    410a:	01 c0       	rjmp	.+2      	; 0x410e <__stack+0x10f>
    410c:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    410e:	80 93 41 21 	sts	0x2141, r24	; 0x802141 <idx>
						break;
    4112:	03 c0       	rjmp	.+6      	; 0x411a <__stack+0x11b>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    4114:	8f 5f       	subi	r24, 0xFF	; 255
    4116:	8f 30       	cpi	r24, 0x0F	; 15
    4118:	a9 f7       	brne	.-22     	; 0x4104 <__stack+0x105>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    411a:	e0 91 41 21 	lds	r30, 0x2141	; 0x802141 <idx>
    411e:	f0 e0       	ldi	r31, 0x00	; 0
    4120:	ea 56       	subi	r30, 0x6A	; 106
    4122:	fe 4d       	sbci	r31, 0xDE	; 222
    4124:	80 e2       	ldi	r24, 0x20	; 32
    4126:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    4128:	20 91 41 21 	lds	r18, 0x2141	; 0x802141 <idx>
    412c:	2f 5f       	subi	r18, 0xFF	; 255
    412e:	2f 30       	cpi	r18, 0x0F	; 15
    4130:	08 f5       	brcc	.+66     	; 0x4174 <__stack+0x175>
					if(gps[i] == 32){
    4132:	82 2f       	mov	r24, r18
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	fc 01       	movw	r30, r24
    4138:	ea 56       	subi	r30, 0x6A	; 106
    413a:	fe 4d       	sbci	r31, 0xDE	; 222
    413c:	30 81       	ld	r19, Z
    413e:	30 32       	cpi	r19, 0x20	; 32
    4140:	c9 f0       	breq	.+50     	; 0x4174 <__stack+0x175>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4142:	50 e2       	ldi	r21, 0x20	; 32
    4144:	08 c0       	rjmp	.+16     	; 0x4156 <__stack+0x157>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4146:	82 2f       	mov	r24, r18
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	fc 01       	movw	r30, r24
    414c:	ea 56       	subi	r30, 0x6A	; 106
    414e:	fe 4d       	sbci	r31, 0xDE	; 222
    4150:	30 81       	ld	r19, Z
    4152:	30 32       	cpi	r19, 0x20	; 32
    4154:	79 f0       	breq	.+30     	; 0x4174 <__stack+0x175>
						break;
					}
					dec[i-idx-1] = gps[i];
    4156:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <idx>
    415a:	fc 01       	movw	r30, r24
    415c:	e4 1b       	sub	r30, r20
    415e:	f1 09       	sbc	r31, r1
    4160:	ec 55       	subi	r30, 0x5C	; 92
    4162:	fe 4d       	sbci	r31, 0xDE	; 222
    4164:	30 83       	st	Z, r19
					gps[i] = 32;
    4166:	fc 01       	movw	r30, r24
    4168:	ea 56       	subi	r30, 0x6A	; 106
    416a:	fe 4d       	sbci	r31, 0xDE	; 222
    416c:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    416e:	2f 5f       	subi	r18, 0xFF	; 255
    4170:	2f 30       	cpi	r18, 0x0F	; 15
    4172:	49 f7       	brne	.-46     	; 0x4146 <__stack+0x147>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    4174:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <dec>
    4178:	80 32       	cpi	r24, 0x20	; 32
    417a:	19 f4       	brne	.+6      	; 0x4182 <__stack+0x183>
					dec[0] = '0';
    417c:	80 e3       	ldi	r24, 0x30	; 48
    417e:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <dec>
				}
				sscanf(gps,"%ld",&val);
    4182:	ce 01       	movw	r24, r28
    4184:	01 96       	adiw	r24, 0x01	; 1
    4186:	9f 93       	push	r25
    4188:	8f 93       	push	r24
    418a:	88 e6       	ldi	r24, 0x68	; 104
    418c:	90 e2       	ldi	r25, 0x20	; 32
    418e:	9f 93       	push	r25
    4190:	8f 93       	push	r24
    4192:	86 e9       	ldi	r24, 0x96	; 150
    4194:	91 e2       	ldi	r25, 0x21	; 33
    4196:	9f 93       	push	r25
    4198:	8f 93       	push	r24
    419a:	03 d7       	rcall	.+3590   	; 0x4fa2 <sscanf>
				sscanf(dec,"%d",&val2);
    419c:	ce 01       	movw	r24, r28
    419e:	05 96       	adiw	r24, 0x05	; 5
    41a0:	9f 93       	push	r25
    41a2:	8f 93       	push	r24
    41a4:	8c e6       	ldi	r24, 0x6C	; 108
    41a6:	90 e2       	ldi	r25, 0x20	; 32
    41a8:	9f 93       	push	r25
    41aa:	8f 93       	push	r24
    41ac:	85 ea       	ldi	r24, 0xA5	; 165
    41ae:	91 e2       	ldi	r25, 0x21	; 33
    41b0:	9f 93       	push	r25
    41b2:	8f 93       	push	r24
    41b4:	f6 d6       	rcall	.+3564   	; 0x4fa2 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    41b6:	89 80       	ldd	r8, Y+1	; 0x01
    41b8:	9a 80       	ldd	r9, Y+2	; 0x02
    41ba:	ab 80       	ldd	r10, Y+3	; 0x03
    41bc:	bc 80       	ldd	r11, Y+4	; 0x04
    41be:	6d 81       	ldd	r22, Y+5	; 0x05
    41c0:	7e 81       	ldd	r23, Y+6	; 0x06
    41c2:	07 2e       	mov	r0, r23
    41c4:	00 0c       	add	r0, r0
    41c6:	88 0b       	sbc	r24, r24
    41c8:	99 0b       	sbc	r25, r25
    41ca:	ed d2       	rcall	.+1498   	; 0x47a6 <__floatsisf>
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e4       	ldi	r19, 0x40	; 64
    41d0:	4c e1       	ldi	r20, 0x1C	; 28
    41d2:	56 e4       	ldi	r21, 0x46	; 70
    41d4:	4d d2       	rcall	.+1178   	; 0x4670 <__divsf3>
    41d6:	6b 01       	movw	r12, r22
    41d8:	7c 01       	movw	r14, r24
    41da:	c5 01       	movw	r24, r10
    41dc:	b4 01       	movw	r22, r8
    41de:	24 e6       	ldi	r18, 0x64	; 100
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	40 e0       	ldi	r20, 0x00	; 0
    41e4:	50 e0       	ldi	r21, 0x00	; 0
    41e6:	b3 d5       	rcall	.+2918   	; 0x4d4e <__divmodsi4>
    41e8:	49 01       	movw	r8, r18
    41ea:	5a 01       	movw	r10, r20
    41ec:	dc d2       	rcall	.+1464   	; 0x47a6 <__floatsisf>
    41ee:	9b 01       	movw	r18, r22
    41f0:	ac 01       	movw	r20, r24
    41f2:	c7 01       	movw	r24, r14
    41f4:	b6 01       	movw	r22, r12
    41f6:	d4 d1       	rcall	.+936    	; 0x45a0 <__addsf3>
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	40 e7       	ldi	r20, 0x70	; 112
    41fe:	52 e4       	ldi	r21, 0x42	; 66
    4200:	37 d2       	rcall	.+1134   	; 0x4670 <__divsf3>
    4202:	6b 01       	movw	r12, r22
    4204:	7c 01       	movw	r14, r24
    4206:	c5 01       	movw	r24, r10
    4208:	b4 01       	movw	r22, r8
    420a:	cd d2       	rcall	.+1434   	; 0x47a6 <__floatsisf>
    420c:	9b 01       	movw	r18, r22
    420e:	ac 01       	movw	r20, r24
    4210:	c7 01       	movw	r24, r14
    4212:	b6 01       	movw	r22, r12
    4214:	c5 d1       	rcall	.+906    	; 0x45a0 <__addsf3>
    4216:	60 93 1e 21 	sts	0x211E, r22	; 0x80211e <gps_lat>
    421a:	70 93 1f 21 	sts	0x211F, r23	; 0x80211f <gps_lat+0x1>
    421e:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <gps_lat+0x2>
    4222:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <gps_lat+0x3>
				break;
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	2c c1       	rjmp	.+600    	; 0x4484 <__stack+0x485>
    422c:	e7 e9       	ldi	r30, 0x97	; 151
    422e:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    4230:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    4232:	91 91       	ld	r25, Z+
    4234:	9e 32       	cpi	r25, 0x2E	; 46
    4236:	29 f4       	brne	.+10     	; 0x4242 <__stack+0x243>
    4238:	01 c0       	rjmp	.+2      	; 0x423c <__stack+0x23d>
    423a:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    423c:	80 93 41 21 	sts	0x2141, r24	; 0x802141 <idx>
						break;
    4240:	03 c0       	rjmp	.+6      	; 0x4248 <__stack+0x249>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    4242:	8f 5f       	subi	r24, 0xFF	; 255
    4244:	8f 30       	cpi	r24, 0x0F	; 15
    4246:	a9 f7       	brne	.-22     	; 0x4232 <__stack+0x233>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    4248:	e0 91 41 21 	lds	r30, 0x2141	; 0x802141 <idx>
    424c:	f0 e0       	ldi	r31, 0x00	; 0
    424e:	ea 56       	subi	r30, 0x6A	; 106
    4250:	fe 4d       	sbci	r31, 0xDE	; 222
    4252:	80 e2       	ldi	r24, 0x20	; 32
    4254:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    4256:	20 91 41 21 	lds	r18, 0x2141	; 0x802141 <idx>
    425a:	2f 5f       	subi	r18, 0xFF	; 255
    425c:	2f 30       	cpi	r18, 0x0F	; 15
    425e:	08 f5       	brcc	.+66     	; 0x42a2 <__stack+0x2a3>
					if(gps[i] == 32){
    4260:	82 2f       	mov	r24, r18
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	fc 01       	movw	r30, r24
    4266:	ea 56       	subi	r30, 0x6A	; 106
    4268:	fe 4d       	sbci	r31, 0xDE	; 222
    426a:	30 81       	ld	r19, Z
    426c:	30 32       	cpi	r19, 0x20	; 32
    426e:	c9 f0       	breq	.+50     	; 0x42a2 <__stack+0x2a3>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4270:	50 e2       	ldi	r21, 0x20	; 32
    4272:	08 c0       	rjmp	.+16     	; 0x4284 <__stack+0x285>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    4274:	82 2f       	mov	r24, r18
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	fc 01       	movw	r30, r24
    427a:	ea 56       	subi	r30, 0x6A	; 106
    427c:	fe 4d       	sbci	r31, 0xDE	; 222
    427e:	30 81       	ld	r19, Z
    4280:	30 32       	cpi	r19, 0x20	; 32
    4282:	79 f0       	breq	.+30     	; 0x42a2 <__stack+0x2a3>
						break;
					}
					dec[i-idx-1] = gps[i];
    4284:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <idx>
    4288:	fc 01       	movw	r30, r24
    428a:	e4 1b       	sub	r30, r20
    428c:	f1 09       	sbc	r31, r1
    428e:	ec 55       	subi	r30, 0x5C	; 92
    4290:	fe 4d       	sbci	r31, 0xDE	; 222
    4292:	30 83       	st	Z, r19
					gps[i] = 32;
    4294:	fc 01       	movw	r30, r24
    4296:	ea 56       	subi	r30, 0x6A	; 106
    4298:	fe 4d       	sbci	r31, 0xDE	; 222
    429a:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    429c:	2f 5f       	subi	r18, 0xFF	; 255
    429e:	2f 30       	cpi	r18, 0x0F	; 15
    42a0:	49 f7       	brne	.-46     	; 0x4274 <__stack+0x275>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    42a2:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <dec>
    42a6:	80 32       	cpi	r24, 0x20	; 32
    42a8:	19 f4       	brne	.+6      	; 0x42b0 <__stack+0x2b1>
					dec[0] = '0';
    42aa:	80 e3       	ldi	r24, 0x30	; 48
    42ac:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <dec>
				}
				sscanf(gps,"%ld",&val);
    42b0:	ce 01       	movw	r24, r28
    42b2:	01 96       	adiw	r24, 0x01	; 1
    42b4:	9f 93       	push	r25
    42b6:	8f 93       	push	r24
    42b8:	88 e6       	ldi	r24, 0x68	; 104
    42ba:	90 e2       	ldi	r25, 0x20	; 32
    42bc:	9f 93       	push	r25
    42be:	8f 93       	push	r24
    42c0:	86 e9       	ldi	r24, 0x96	; 150
    42c2:	91 e2       	ldi	r25, 0x21	; 33
    42c4:	9f 93       	push	r25
    42c6:	8f 93       	push	r24
    42c8:	6c d6       	rcall	.+3288   	; 0x4fa2 <sscanf>
				sscanf(dec,"%d",&val2);
    42ca:	ce 01       	movw	r24, r28
    42cc:	05 96       	adiw	r24, 0x05	; 5
    42ce:	9f 93       	push	r25
    42d0:	8f 93       	push	r24
    42d2:	8c e6       	ldi	r24, 0x6C	; 108
    42d4:	90 e2       	ldi	r25, 0x20	; 32
    42d6:	9f 93       	push	r25
    42d8:	8f 93       	push	r24
    42da:	85 ea       	ldi	r24, 0xA5	; 165
    42dc:	91 e2       	ldi	r25, 0x21	; 33
    42de:	9f 93       	push	r25
    42e0:	8f 93       	push	r24
    42e2:	5f d6       	rcall	.+3262   	; 0x4fa2 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    42e4:	89 80       	ldd	r8, Y+1	; 0x01
    42e6:	9a 80       	ldd	r9, Y+2	; 0x02
    42e8:	ab 80       	ldd	r10, Y+3	; 0x03
    42ea:	bc 80       	ldd	r11, Y+4	; 0x04
    42ec:	6d 81       	ldd	r22, Y+5	; 0x05
    42ee:	7e 81       	ldd	r23, Y+6	; 0x06
    42f0:	07 2e       	mov	r0, r23
    42f2:	00 0c       	add	r0, r0
    42f4:	88 0b       	sbc	r24, r24
    42f6:	99 0b       	sbc	r25, r25
    42f8:	56 d2       	rcall	.+1196   	; 0x47a6 <__floatsisf>
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e4       	ldi	r19, 0x40	; 64
    42fe:	4c e1       	ldi	r20, 0x1C	; 28
    4300:	56 e4       	ldi	r21, 0x46	; 70
    4302:	b6 d1       	rcall	.+876    	; 0x4670 <__divsf3>
    4304:	6b 01       	movw	r12, r22
    4306:	7c 01       	movw	r14, r24
    4308:	c5 01       	movw	r24, r10
    430a:	b4 01       	movw	r22, r8
    430c:	24 e6       	ldi	r18, 0x64	; 100
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e0       	ldi	r20, 0x00	; 0
    4312:	50 e0       	ldi	r21, 0x00	; 0
    4314:	1c d5       	rcall	.+2616   	; 0x4d4e <__divmodsi4>
    4316:	49 01       	movw	r8, r18
    4318:	5a 01       	movw	r10, r20
    431a:	45 d2       	rcall	.+1162   	; 0x47a6 <__floatsisf>
    431c:	9b 01       	movw	r18, r22
    431e:	ac 01       	movw	r20, r24
    4320:	c7 01       	movw	r24, r14
    4322:	b6 01       	movw	r22, r12
    4324:	3d d1       	rcall	.+634    	; 0x45a0 <__addsf3>
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	40 e7       	ldi	r20, 0x70	; 112
    432c:	52 e4       	ldi	r21, 0x42	; 66
    432e:	a0 d1       	rcall	.+832    	; 0x4670 <__divsf3>
    4330:	6b 01       	movw	r12, r22
    4332:	7c 01       	movw	r14, r24
    4334:	c5 01       	movw	r24, r10
    4336:	b4 01       	movw	r22, r8
    4338:	36 d2       	rcall	.+1132   	; 0x47a6 <__floatsisf>
    433a:	9b 01       	movw	r18, r22
    433c:	ac 01       	movw	r20, r24
    433e:	c7 01       	movw	r24, r14
    4340:	b6 01       	movw	r22, r12
    4342:	2e d1       	rcall	.+604    	; 0x45a0 <__addsf3>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	b0 58       	subi	r27, 0x80	; 128
    434a:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <gps_long>
    434e:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <gps_long+0x1>
    4352:	a0 93 1c 21 	sts	0x211C, r26	; 0x80211c <gps_long+0x2>
    4356:	b0 93 1d 21 	sts	0x211D, r27	; 0x80211d <gps_long+0x3>
    435a:	cd bf       	out	0x3d, r28	; 61
				break;
    435c:	de bf       	out	0x3e, r29	; 62
    435e:	92 c0       	rjmp	.+292    	; 0x4484 <__stack+0x485>
    4360:	84 e1       	ldi	r24, 0x14	; 20
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    4362:	91 e2       	ldi	r25, 0x21	; 33
    4364:	9f 93       	push	r25
    4366:	8f 93       	push	r24
    4368:	8c e6       	ldi	r24, 0x6C	; 108
    436a:	90 e2       	ldi	r25, 0x20	; 32
    436c:	9f 93       	push	r25
    436e:	8f 93       	push	r24
    4370:	86 e9       	ldi	r24, 0x96	; 150
    4372:	91 e2       	ldi	r25, 0x21	; 33
    4374:	9f 93       	push	r25
    4376:	8f 93       	push	r24
    4378:	14 d6       	rcall	.+3112   	; 0x4fa2 <sscanf>
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
				break;
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	7e c0       	rjmp	.+252    	; 0x4484 <__stack+0x485>
    4388:	e7 e9       	ldi	r30, 0x97	; 151
    438a:	f1 e2       	ldi	r31, 0x21	; 33
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4390:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    4392:	29 f4       	brne	.+10     	; 0x439e <__stack+0x39f>
    4394:	01 c0       	rjmp	.+2      	; 0x4398 <__stack+0x399>
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	80 93 41 21 	sts	0x2141, r24	; 0x802141 <idx>
						idx = i;
    439c:	03 c0       	rjmp	.+6      	; 0x43a4 <__stack+0x3a5>
    439e:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    43a0:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    43a2:	a9 f7       	brne	.-22     	; 0x438e <__stack+0x38f>
    43a4:	e0 91 41 21 	lds	r30, 0x2141	; 0x802141 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	ea 56       	subi	r30, 0x6A	; 106
    43ac:	fe 4d       	sbci	r31, 0xDE	; 222
    43ae:	80 e2       	ldi	r24, 0x20	; 32
    43b0:	80 83       	st	Z, r24
    43b2:	20 91 41 21 	lds	r18, 0x2141	; 0x802141 <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    43b6:	2f 5f       	subi	r18, 0xFF	; 255
    43b8:	2f 30       	cpi	r18, 0x0F	; 15
    43ba:	08 f5       	brcc	.+66     	; 0x43fe <__stack+0x3ff>
    43bc:	82 2f       	mov	r24, r18
    43be:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    43c0:	fc 01       	movw	r30, r24
    43c2:	ea 56       	subi	r30, 0x6A	; 106
    43c4:	fe 4d       	sbci	r31, 0xDE	; 222
    43c6:	30 81       	ld	r19, Z
    43c8:	30 32       	cpi	r19, 0x20	; 32
    43ca:	c9 f0       	breq	.+50     	; 0x43fe <__stack+0x3ff>
    43cc:	50 e2       	ldi	r21, 0x20	; 32
    43ce:	08 c0       	rjmp	.+16     	; 0x43e0 <__stack+0x3e1>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    43d0:	82 2f       	mov	r24, r18
    43d2:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    43d4:	fc 01       	movw	r30, r24
    43d6:	ea 56       	subi	r30, 0x6A	; 106
    43d8:	fe 4d       	sbci	r31, 0xDE	; 222
    43da:	30 81       	ld	r19, Z
    43dc:	30 32       	cpi	r19, 0x20	; 32
    43de:	79 f0       	breq	.+30     	; 0x43fe <__stack+0x3ff>
    43e0:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    43e4:	fc 01       	movw	r30, r24
    43e6:	e4 1b       	sub	r30, r20
    43e8:	f1 09       	sbc	r31, r1
    43ea:	ec 55       	subi	r30, 0x5C	; 92
    43ec:	fe 4d       	sbci	r31, 0xDE	; 222
    43ee:	30 83       	st	Z, r19
    43f0:	fc 01       	movw	r30, r24
    43f2:	ea 56       	subi	r30, 0x6A	; 106
					gps[i] = 32;
    43f4:	fe 4d       	sbci	r31, 0xDE	; 222
    43f6:	50 83       	st	Z, r21
    43f8:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    43fa:	2f 30       	cpi	r18, 0x0F	; 15
    43fc:	49 f7       	brne	.-46     	; 0x43d0 <__stack+0x3d1>
    43fe:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    4402:	80 32       	cpi	r24, 0x20	; 32
    4404:	19 f4       	brne	.+6      	; 0x440c <__stack+0x40d>
    4406:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    4408:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <dec>
    440c:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    440e:	01 96       	adiw	r24, 0x01	; 1
    4410:	9f 93       	push	r25
    4412:	8f 93       	push	r24
    4414:	88 e6       	ldi	r24, 0x68	; 104
    4416:	90 e2       	ldi	r25, 0x20	; 32
    4418:	9f 93       	push	r25
    441a:	8f 93       	push	r24
    441c:	86 e9       	ldi	r24, 0x96	; 150
    441e:	91 e2       	ldi	r25, 0x21	; 33
    4420:	9f 93       	push	r25
    4422:	8f 93       	push	r24
    4424:	be d5       	rcall	.+2940   	; 0x4fa2 <sscanf>
				sscanf(dec,"%d",&val2);
    4426:	ce 01       	movw	r24, r28
    4428:	05 96       	adiw	r24, 0x05	; 5
    442a:	9f 93       	push	r25
    442c:	8f 93       	push	r24
    442e:	8c e6       	ldi	r24, 0x6C	; 108
    4430:	90 e2       	ldi	r25, 0x20	; 32
    4432:	9f 93       	push	r25
    4434:	8f 93       	push	r24
    4436:	85 ea       	ldi	r24, 0xA5	; 165
    4438:	91 e2       	ldi	r25, 0x21	; 33
    443a:	9f 93       	push	r25
    443c:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    443e:	b1 d5       	rcall	.+2914   	; 0x4fa2 <sscanf>
    4440:	69 81       	ldd	r22, Y+1	; 0x01
    4442:	7a 81       	ldd	r23, Y+2	; 0x02
    4444:	8b 81       	ldd	r24, Y+3	; 0x03
    4446:	9c 81       	ldd	r25, Y+4	; 0x04
    4448:	ae d1       	rcall	.+860    	; 0x47a6 <__floatsisf>
    444a:	6b 01       	movw	r12, r22
    444c:	7c 01       	movw	r14, r24
    444e:	6d 81       	ldd	r22, Y+5	; 0x05
    4450:	7e 81       	ldd	r23, Y+6	; 0x06
    4452:	07 2e       	mov	r0, r23
    4454:	00 0c       	add	r0, r0
    4456:	88 0b       	sbc	r24, r24
    4458:	99 0b       	sbc	r25, r25
    445a:	a5 d1       	rcall	.+842    	; 0x47a6 <__floatsisf>
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	40 e2       	ldi	r20, 0x20	; 32
    4462:	51 e4       	ldi	r21, 0x41	; 65
    4464:	05 d1       	rcall	.+522    	; 0x4670 <__divsf3>
    4466:	9b 01       	movw	r18, r22
    4468:	ac 01       	movw	r20, r24
    446a:	c7 01       	movw	r24, r14
    446c:	b6 01       	movw	r22, r12
    446e:	98 d0       	rcall	.+304    	; 0x45a0 <__addsf3>
    4470:	60 93 16 21 	sts	0x2116, r22	; 0x802116 <gps_alt>
    4474:	70 93 17 21 	sts	0x2117, r23	; 0x802117 <gps_alt+0x1>
    4478:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <gps_alt+0x2>
    447c:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <gps_alt+0x3>
    4480:	cd bf       	out	0x3d, r28	; 61
    4482:	de bf       	out	0x3e, r29	; 62
    4484:	80 91 45 21 	lds	r24, 0x2145	; 0x802145 <writing>
				break;
    4488:	88 23       	and	r24, r24
		}

		if(writing){
    448a:	d1 f0       	breq	.+52     	; 0x44c0 <__stack+0x4c1>
    448c:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <idx>
    4490:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <commas>
			idx = 0;
    4494:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    4496:	80 93 42 21 	sts	0x2142, r24	; 0x802142 <commas>
    449a:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <word_pos>
    449e:	e6 e9       	ldi	r30, 0x96	; 150
			word_pos = 0;
    44a0:	f1 e2       	ldi	r31, 0x21	; 33
    44a2:	25 ea       	ldi	r18, 0xA5	; 165
    44a4:	31 e2       	ldi	r19, 0x21	; 33
    44a6:	80 e2       	ldi	r24, 0x20	; 32
    44a8:	81 93       	st	Z+, r24
    44aa:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    44ac:	3f 07       	cpc	r19, r31
    44ae:	e1 f7       	brne	.-8      	; 0x44a8 <__stack+0x4a9>

		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    44b0:	e5 ea       	ldi	r30, 0xA5	; 165
    44b2:	f1 e2       	ldi	r31, 0x21	; 33
    44b4:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    44b6:	80 83       	st	Z, r24
    44b8:	81 83       	std	Z+1, r24	; 0x01
    44ba:	82 83       	std	Z+2, r24	; 0x02
    44bc:	83 83       	std	Z+3, r24	; 0x03
    44be:	84 83       	std	Z+4, r24	; 0x04
    44c0:	80 91 45 21 	lds	r24, 0x2145	; 0x802145 <writing>
    44c4:	88 23       	and	r24, r24
			}
		}
	}

	if(writing){
    44c6:	09 f4       	brne	.+2      	; 0x44ca <__stack+0x4cb>
    44c8:	43 c0       	rjmp	.+134    	; 0x4550 <__stack+0x551>
    44ca:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <pos>
    44ce:	83 30       	cpi	r24, 0x03	; 3
		switch(pos){
    44d0:	19 f0       	breq	.+6      	; 0x44d8 <__stack+0x4d9>
    44d2:	84 30       	cpi	r24, 0x04	; 4
    44d4:	31 f0       	breq	.+12     	; 0x44e2 <__stack+0x4e3>
    44d6:	09 c0       	rjmp	.+18     	; 0x44ea <__stack+0x4eb>
    44d8:	17 34       	cpi	r17, 0x47	; 71
    44da:	39 f0       	breq	.+14     	; 0x44ea <__stack+0x4eb>
    44dc:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <writing>
			case 3:
				if(c != 'G'){
    44e0:	04 c0       	rjmp	.+8      	; 0x44ea <__stack+0x4eb>
					writing = 0;
    44e2:	17 34       	cpi	r17, 0x47	; 71
    44e4:	11 f0       	breq	.+4      	; 0x44ea <__stack+0x4eb>
    44e6:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <writing>
				}
				break;

			case 4:
				if(c != 'G'){
    44ea:	e0 91 43 21 	lds	r30, 0x2143	; 0x802143 <word_pos>
					writing = 0;
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
				}
				break;
		}
		gps[word_pos] = c;
    44f0:	ea 56       	subi	r30, 0x6A	; 106
    44f2:	fe 4d       	sbci	r31, 0xDE	; 222
    44f4:	10 83       	st	Z, r17
    44f6:	80 91 43 21 	lds	r24, 0x2143	; 0x802143 <word_pos>
    44fa:	8f 5f       	subi	r24, 0xFF	; 255
		word_pos++;
    44fc:	80 93 43 21 	sts	0x2143, r24	; 0x802143 <word_pos>
    4500:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <pos>
    4504:	8f 5f       	subi	r24, 0xFF	; 255
		pos++;
    4506:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <pos>
    450a:	22 c0       	rjmp	.+68     	; 0x4550 <__stack+0x551>
    450c:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <gps>
	}
}
    4510:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    4512:	09 f4       	brne	.+2      	; 0x4516 <__stack+0x517>
    4514:	a7 cd       	rjmp	.-1202   	; 0x4064 <__stack+0x65>
    4516:	e7 e9       	ldi	r30, 0x97	; 151
    4518:	f1 e2       	ldi	r31, 0x21	; 33
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	9f cd       	rjmp	.-1218   	; 0x405c <__stack+0x5d>
    451e:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    4520:	1a 82       	std	Y+2, r1	; 0x02
    4522:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    4524:	1c 82       	std	Y+4, r1	; 0x04
    4526:	1d 82       	std	Y+5, r1	; 0x05
    4528:	1e 82       	std	Y+6, r1	; 0x06
    452a:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <commas>
		int16_t val2 = 0;
    452e:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    4530:	09 f4       	brne	.+2      	; 0x4534 <__stack+0x535>
    4532:	88 cd       	rjmp	.-1264   	; 0x4044 <__stack+0x45>
    4534:	30 f4       	brcc	.+12     	; 0x4542 <__stack+0x543>
    4536:	81 30       	cpi	r24, 0x01	; 1
    4538:	49 f3       	breq	.-46     	; 0x450c <__stack+0x50d>
    453a:	82 30       	cpi	r24, 0x02	; 2
    453c:	09 f4       	brne	.+2      	; 0x4540 <__stack+0x541>
    453e:	88 cd       	rjmp	.-1264   	; 0x4050 <__stack+0x51>
    4540:	a1 cf       	rjmp	.-190    	; 0x4484 <__stack+0x485>
    4542:	87 30       	cpi	r24, 0x07	; 7
    4544:	09 f4       	brne	.+2      	; 0x4548 <__stack+0x549>
    4546:	0c cf       	rjmp	.-488    	; 0x4360 <__stack+0x361>
    4548:	89 30       	cpi	r24, 0x09	; 9
    454a:	09 f4       	brne	.+2      	; 0x454e <__stack+0x54f>
    454c:	75 cd       	rjmp	.-1302   	; 0x4038 <__stack+0x39>
    454e:	9a cf       	rjmp	.-204    	; 0x4484 <__stack+0x485>
    4550:	26 96       	adiw	r28, 0x06	; 6
    4552:	cd bf       	out	0x3d, r28	; 61
    4554:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    4556:	df 91       	pop	r29
    4558:	cf 91       	pop	r28
    455a:	ff 91       	pop	r31
    455c:	ef 91       	pop	r30
    455e:	bf 91       	pop	r27
    4560:	af 91       	pop	r26
    4562:	9f 91       	pop	r25
    4564:	8f 91       	pop	r24
    4566:	7f 91       	pop	r23
    4568:	6f 91       	pop	r22
    456a:	5f 91       	pop	r21
    456c:	4f 91       	pop	r20
    456e:	3f 91       	pop	r19
    4570:	2f 91       	pop	r18
    4572:	1f 91       	pop	r17
    4574:	ff 90       	pop	r15
    4576:	ef 90       	pop	r14
    4578:	df 90       	pop	r13
    457a:	cf 90       	pop	r12
    457c:	bf 90       	pop	r11
    457e:	af 90       	pop	r10
    4580:	9f 90       	pop	r9
    4582:	8f 90       	pop	r8
    4584:	0f 90       	pop	r0
    4586:	0b be       	out	0x3b, r0	; 59
    4588:	0f 90       	pop	r0
    458a:	0a be       	out	0x3a, r0	; 58
    458c:	0f 90       	pop	r0
    458e:	09 be       	out	0x39, r0	; 57
    4590:	0f 90       	pop	r0
    4592:	08 be       	out	0x38, r0	; 56
    4594:	0f 90       	pop	r0
    4596:	0f be       	out	0x3f, r0	; 63
    4598:	0f 90       	pop	r0
    459a:	1f 90       	pop	r1
    459c:	18 95       	reti

0000459e <__subsf3>:
    459e:	50 58       	subi	r21, 0x80	; 128

000045a0 <__addsf3>:
    45a0:	bb 27       	eor	r27, r27
    45a2:	aa 27       	eor	r26, r26
    45a4:	0e d0       	rcall	.+28     	; 0x45c2 <__addsf3x>
    45a6:	75 c1       	rjmp	.+746    	; 0x4892 <__fp_round>
    45a8:	66 d1       	rcall	.+716    	; 0x4876 <__fp_pscA>
    45aa:	30 f0       	brcs	.+12     	; 0x45b8 <__addsf3+0x18>
    45ac:	6b d1       	rcall	.+726    	; 0x4884 <__fp_pscB>
    45ae:	20 f0       	brcs	.+8      	; 0x45b8 <__addsf3+0x18>
    45b0:	31 f4       	brne	.+12     	; 0x45be <__addsf3+0x1e>
    45b2:	9f 3f       	cpi	r25, 0xFF	; 255
    45b4:	11 f4       	brne	.+4      	; 0x45ba <__addsf3+0x1a>
    45b6:	1e f4       	brtc	.+6      	; 0x45be <__addsf3+0x1e>
    45b8:	5b c1       	rjmp	.+694    	; 0x4870 <__fp_nan>
    45ba:	0e f4       	brtc	.+2      	; 0x45be <__addsf3+0x1e>
    45bc:	e0 95       	com	r30
    45be:	e7 fb       	bst	r30, 7
    45c0:	51 c1       	rjmp	.+674    	; 0x4864 <__fp_inf>

000045c2 <__addsf3x>:
    45c2:	e9 2f       	mov	r30, r25
    45c4:	77 d1       	rcall	.+750    	; 0x48b4 <__fp_split3>
    45c6:	80 f3       	brcs	.-32     	; 0x45a8 <__addsf3+0x8>
    45c8:	ba 17       	cp	r27, r26
    45ca:	62 07       	cpc	r22, r18
    45cc:	73 07       	cpc	r23, r19
    45ce:	84 07       	cpc	r24, r20
    45d0:	95 07       	cpc	r25, r21
    45d2:	18 f0       	brcs	.+6      	; 0x45da <__addsf3x+0x18>
    45d4:	71 f4       	brne	.+28     	; 0x45f2 <__addsf3x+0x30>
    45d6:	9e f5       	brtc	.+102    	; 0x463e <__addsf3x+0x7c>
    45d8:	8f c1       	rjmp	.+798    	; 0x48f8 <__fp_zero>
    45da:	0e f4       	brtc	.+2      	; 0x45de <__addsf3x+0x1c>
    45dc:	e0 95       	com	r30
    45de:	0b 2e       	mov	r0, r27
    45e0:	ba 2f       	mov	r27, r26
    45e2:	a0 2d       	mov	r26, r0
    45e4:	0b 01       	movw	r0, r22
    45e6:	b9 01       	movw	r22, r18
    45e8:	90 01       	movw	r18, r0
    45ea:	0c 01       	movw	r0, r24
    45ec:	ca 01       	movw	r24, r20
    45ee:	a0 01       	movw	r20, r0
    45f0:	11 24       	eor	r1, r1
    45f2:	ff 27       	eor	r31, r31
    45f4:	59 1b       	sub	r21, r25
    45f6:	99 f0       	breq	.+38     	; 0x461e <__addsf3x+0x5c>
    45f8:	59 3f       	cpi	r21, 0xF9	; 249
    45fa:	50 f4       	brcc	.+20     	; 0x4610 <__addsf3x+0x4e>
    45fc:	50 3e       	cpi	r21, 0xE0	; 224
    45fe:	68 f1       	brcs	.+90     	; 0x465a <__addsf3x+0x98>
    4600:	1a 16       	cp	r1, r26
    4602:	f0 40       	sbci	r31, 0x00	; 0
    4604:	a2 2f       	mov	r26, r18
    4606:	23 2f       	mov	r18, r19
    4608:	34 2f       	mov	r19, r20
    460a:	44 27       	eor	r20, r20
    460c:	58 5f       	subi	r21, 0xF8	; 248
    460e:	f3 cf       	rjmp	.-26     	; 0x45f6 <__addsf3x+0x34>
    4610:	46 95       	lsr	r20
    4612:	37 95       	ror	r19
    4614:	27 95       	ror	r18
    4616:	a7 95       	ror	r26
    4618:	f0 40       	sbci	r31, 0x00	; 0
    461a:	53 95       	inc	r21
    461c:	c9 f7       	brne	.-14     	; 0x4610 <__addsf3x+0x4e>
    461e:	7e f4       	brtc	.+30     	; 0x463e <__addsf3x+0x7c>
    4620:	1f 16       	cp	r1, r31
    4622:	ba 0b       	sbc	r27, r26
    4624:	62 0b       	sbc	r22, r18
    4626:	73 0b       	sbc	r23, r19
    4628:	84 0b       	sbc	r24, r20
    462a:	ba f0       	brmi	.+46     	; 0x465a <__addsf3x+0x98>
    462c:	91 50       	subi	r25, 0x01	; 1
    462e:	a1 f0       	breq	.+40     	; 0x4658 <__addsf3x+0x96>
    4630:	ff 0f       	add	r31, r31
    4632:	bb 1f       	adc	r27, r27
    4634:	66 1f       	adc	r22, r22
    4636:	77 1f       	adc	r23, r23
    4638:	88 1f       	adc	r24, r24
    463a:	c2 f7       	brpl	.-16     	; 0x462c <__addsf3x+0x6a>
    463c:	0e c0       	rjmp	.+28     	; 0x465a <__addsf3x+0x98>
    463e:	ba 0f       	add	r27, r26
    4640:	62 1f       	adc	r22, r18
    4642:	73 1f       	adc	r23, r19
    4644:	84 1f       	adc	r24, r20
    4646:	48 f4       	brcc	.+18     	; 0x465a <__addsf3x+0x98>
    4648:	87 95       	ror	r24
    464a:	77 95       	ror	r23
    464c:	67 95       	ror	r22
    464e:	b7 95       	ror	r27
    4650:	f7 95       	ror	r31
    4652:	9e 3f       	cpi	r25, 0xFE	; 254
    4654:	08 f0       	brcs	.+2      	; 0x4658 <__addsf3x+0x96>
    4656:	b3 cf       	rjmp	.-154    	; 0x45be <__addsf3+0x1e>
    4658:	93 95       	inc	r25
    465a:	88 0f       	add	r24, r24
    465c:	08 f0       	brcs	.+2      	; 0x4660 <__addsf3x+0x9e>
    465e:	99 27       	eor	r25, r25
    4660:	ee 0f       	add	r30, r30
    4662:	97 95       	ror	r25
    4664:	87 95       	ror	r24
    4666:	08 95       	ret

00004668 <__cmpsf2>:
    4668:	d9 d0       	rcall	.+434    	; 0x481c <__fp_cmp>
    466a:	08 f4       	brcc	.+2      	; 0x466e <__cmpsf2+0x6>
    466c:	81 e0       	ldi	r24, 0x01	; 1
    466e:	08 95       	ret

00004670 <__divsf3>:
    4670:	0c d0       	rcall	.+24     	; 0x468a <__divsf3x>
    4672:	0f c1       	rjmp	.+542    	; 0x4892 <__fp_round>
    4674:	07 d1       	rcall	.+526    	; 0x4884 <__fp_pscB>
    4676:	40 f0       	brcs	.+16     	; 0x4688 <__divsf3+0x18>
    4678:	fe d0       	rcall	.+508    	; 0x4876 <__fp_pscA>
    467a:	30 f0       	brcs	.+12     	; 0x4688 <__divsf3+0x18>
    467c:	21 f4       	brne	.+8      	; 0x4686 <__divsf3+0x16>
    467e:	5f 3f       	cpi	r21, 0xFF	; 255
    4680:	19 f0       	breq	.+6      	; 0x4688 <__divsf3+0x18>
    4682:	f0 c0       	rjmp	.+480    	; 0x4864 <__fp_inf>
    4684:	51 11       	cpse	r21, r1
    4686:	39 c1       	rjmp	.+626    	; 0x48fa <__fp_szero>
    4688:	f3 c0       	rjmp	.+486    	; 0x4870 <__fp_nan>

0000468a <__divsf3x>:
    468a:	14 d1       	rcall	.+552    	; 0x48b4 <__fp_split3>
    468c:	98 f3       	brcs	.-26     	; 0x4674 <__divsf3+0x4>

0000468e <__divsf3_pse>:
    468e:	99 23       	and	r25, r25
    4690:	c9 f3       	breq	.-14     	; 0x4684 <__divsf3+0x14>
    4692:	55 23       	and	r21, r21
    4694:	b1 f3       	breq	.-20     	; 0x4682 <__divsf3+0x12>
    4696:	95 1b       	sub	r25, r21
    4698:	55 0b       	sbc	r21, r21
    469a:	bb 27       	eor	r27, r27
    469c:	aa 27       	eor	r26, r26
    469e:	62 17       	cp	r22, r18
    46a0:	73 07       	cpc	r23, r19
    46a2:	84 07       	cpc	r24, r20
    46a4:	38 f0       	brcs	.+14     	; 0x46b4 <__divsf3_pse+0x26>
    46a6:	9f 5f       	subi	r25, 0xFF	; 255
    46a8:	5f 4f       	sbci	r21, 0xFF	; 255
    46aa:	22 0f       	add	r18, r18
    46ac:	33 1f       	adc	r19, r19
    46ae:	44 1f       	adc	r20, r20
    46b0:	aa 1f       	adc	r26, r26
    46b2:	a9 f3       	breq	.-22     	; 0x469e <__divsf3_pse+0x10>
    46b4:	33 d0       	rcall	.+102    	; 0x471c <__divsf3_pse+0x8e>
    46b6:	0e 2e       	mov	r0, r30
    46b8:	3a f0       	brmi	.+14     	; 0x46c8 <__divsf3_pse+0x3a>
    46ba:	e0 e8       	ldi	r30, 0x80	; 128
    46bc:	30 d0       	rcall	.+96     	; 0x471e <__divsf3_pse+0x90>
    46be:	91 50       	subi	r25, 0x01	; 1
    46c0:	50 40       	sbci	r21, 0x00	; 0
    46c2:	e6 95       	lsr	r30
    46c4:	00 1c       	adc	r0, r0
    46c6:	ca f7       	brpl	.-14     	; 0x46ba <__divsf3_pse+0x2c>
    46c8:	29 d0       	rcall	.+82     	; 0x471c <__divsf3_pse+0x8e>
    46ca:	fe 2f       	mov	r31, r30
    46cc:	27 d0       	rcall	.+78     	; 0x471c <__divsf3_pse+0x8e>
    46ce:	66 0f       	add	r22, r22
    46d0:	77 1f       	adc	r23, r23
    46d2:	88 1f       	adc	r24, r24
    46d4:	bb 1f       	adc	r27, r27
    46d6:	26 17       	cp	r18, r22
    46d8:	37 07       	cpc	r19, r23
    46da:	48 07       	cpc	r20, r24
    46dc:	ab 07       	cpc	r26, r27
    46de:	b0 e8       	ldi	r27, 0x80	; 128
    46e0:	09 f0       	breq	.+2      	; 0x46e4 <__divsf3_pse+0x56>
    46e2:	bb 0b       	sbc	r27, r27
    46e4:	80 2d       	mov	r24, r0
    46e6:	bf 01       	movw	r22, r30
    46e8:	ff 27       	eor	r31, r31
    46ea:	93 58       	subi	r25, 0x83	; 131
    46ec:	5f 4f       	sbci	r21, 0xFF	; 255
    46ee:	2a f0       	brmi	.+10     	; 0x46fa <__divsf3_pse+0x6c>
    46f0:	9e 3f       	cpi	r25, 0xFE	; 254
    46f2:	51 05       	cpc	r21, r1
    46f4:	68 f0       	brcs	.+26     	; 0x4710 <__divsf3_pse+0x82>
    46f6:	b6 c0       	rjmp	.+364    	; 0x4864 <__fp_inf>
    46f8:	00 c1       	rjmp	.+512    	; 0x48fa <__fp_szero>
    46fa:	5f 3f       	cpi	r21, 0xFF	; 255
    46fc:	ec f3       	brlt	.-6      	; 0x46f8 <__divsf3_pse+0x6a>
    46fe:	98 3e       	cpi	r25, 0xE8	; 232
    4700:	dc f3       	brlt	.-10     	; 0x46f8 <__divsf3_pse+0x6a>
    4702:	86 95       	lsr	r24
    4704:	77 95       	ror	r23
    4706:	67 95       	ror	r22
    4708:	b7 95       	ror	r27
    470a:	f7 95       	ror	r31
    470c:	9f 5f       	subi	r25, 0xFF	; 255
    470e:	c9 f7       	brne	.-14     	; 0x4702 <__divsf3_pse+0x74>
    4710:	88 0f       	add	r24, r24
    4712:	91 1d       	adc	r25, r1
    4714:	96 95       	lsr	r25
    4716:	87 95       	ror	r24
    4718:	97 f9       	bld	r25, 7
    471a:	08 95       	ret
    471c:	e1 e0       	ldi	r30, 0x01	; 1
    471e:	66 0f       	add	r22, r22
    4720:	77 1f       	adc	r23, r23
    4722:	88 1f       	adc	r24, r24
    4724:	bb 1f       	adc	r27, r27
    4726:	62 17       	cp	r22, r18
    4728:	73 07       	cpc	r23, r19
    472a:	84 07       	cpc	r24, r20
    472c:	ba 07       	cpc	r27, r26
    472e:	20 f0       	brcs	.+8      	; 0x4738 <__divsf3_pse+0xaa>
    4730:	62 1b       	sub	r22, r18
    4732:	73 0b       	sbc	r23, r19
    4734:	84 0b       	sbc	r24, r20
    4736:	ba 0b       	sbc	r27, r26
    4738:	ee 1f       	adc	r30, r30
    473a:	88 f7       	brcc	.-30     	; 0x471e <__divsf3_pse+0x90>
    473c:	e0 95       	com	r30
    473e:	08 95       	ret

00004740 <__fixsfsi>:
    4740:	04 d0       	rcall	.+8      	; 0x474a <__fixunssfsi>
    4742:	68 94       	set
    4744:	b1 11       	cpse	r27, r1
    4746:	d9 c0       	rjmp	.+434    	; 0x48fa <__fp_szero>
    4748:	08 95       	ret

0000474a <__fixunssfsi>:
    474a:	bc d0       	rcall	.+376    	; 0x48c4 <__fp_splitA>
    474c:	88 f0       	brcs	.+34     	; 0x4770 <__fixunssfsi+0x26>
    474e:	9f 57       	subi	r25, 0x7F	; 127
    4750:	90 f0       	brcs	.+36     	; 0x4776 <__fixunssfsi+0x2c>
    4752:	b9 2f       	mov	r27, r25
    4754:	99 27       	eor	r25, r25
    4756:	b7 51       	subi	r27, 0x17	; 23
    4758:	a0 f0       	brcs	.+40     	; 0x4782 <__fixunssfsi+0x38>
    475a:	d1 f0       	breq	.+52     	; 0x4790 <__fixunssfsi+0x46>
    475c:	66 0f       	add	r22, r22
    475e:	77 1f       	adc	r23, r23
    4760:	88 1f       	adc	r24, r24
    4762:	99 1f       	adc	r25, r25
    4764:	1a f0       	brmi	.+6      	; 0x476c <__fixunssfsi+0x22>
    4766:	ba 95       	dec	r27
    4768:	c9 f7       	brne	.-14     	; 0x475c <__fixunssfsi+0x12>
    476a:	12 c0       	rjmp	.+36     	; 0x4790 <__fixunssfsi+0x46>
    476c:	b1 30       	cpi	r27, 0x01	; 1
    476e:	81 f0       	breq	.+32     	; 0x4790 <__fixunssfsi+0x46>
    4770:	c3 d0       	rcall	.+390    	; 0x48f8 <__fp_zero>
    4772:	b1 e0       	ldi	r27, 0x01	; 1
    4774:	08 95       	ret
    4776:	c0 c0       	rjmp	.+384    	; 0x48f8 <__fp_zero>
    4778:	67 2f       	mov	r22, r23
    477a:	78 2f       	mov	r23, r24
    477c:	88 27       	eor	r24, r24
    477e:	b8 5f       	subi	r27, 0xF8	; 248
    4780:	39 f0       	breq	.+14     	; 0x4790 <__fixunssfsi+0x46>
    4782:	b9 3f       	cpi	r27, 0xF9	; 249
    4784:	cc f3       	brlt	.-14     	; 0x4778 <__fixunssfsi+0x2e>
    4786:	86 95       	lsr	r24
    4788:	77 95       	ror	r23
    478a:	67 95       	ror	r22
    478c:	b3 95       	inc	r27
    478e:	d9 f7       	brne	.-10     	; 0x4786 <__fixunssfsi+0x3c>
    4790:	3e f4       	brtc	.+14     	; 0x47a0 <__fixunssfsi+0x56>
    4792:	90 95       	com	r25
    4794:	80 95       	com	r24
    4796:	70 95       	com	r23
    4798:	61 95       	neg	r22
    479a:	7f 4f       	sbci	r23, 0xFF	; 255
    479c:	8f 4f       	sbci	r24, 0xFF	; 255
    479e:	9f 4f       	sbci	r25, 0xFF	; 255
    47a0:	08 95       	ret

000047a2 <__floatunsisf>:
    47a2:	e8 94       	clt
    47a4:	09 c0       	rjmp	.+18     	; 0x47b8 <__floatsisf+0x12>

000047a6 <__floatsisf>:
    47a6:	97 fb       	bst	r25, 7
    47a8:	3e f4       	brtc	.+14     	; 0x47b8 <__floatsisf+0x12>
    47aa:	90 95       	com	r25
    47ac:	80 95       	com	r24
    47ae:	70 95       	com	r23
    47b0:	61 95       	neg	r22
    47b2:	7f 4f       	sbci	r23, 0xFF	; 255
    47b4:	8f 4f       	sbci	r24, 0xFF	; 255
    47b6:	9f 4f       	sbci	r25, 0xFF	; 255
    47b8:	99 23       	and	r25, r25
    47ba:	a9 f0       	breq	.+42     	; 0x47e6 <__floatsisf+0x40>
    47bc:	f9 2f       	mov	r31, r25
    47be:	96 e9       	ldi	r25, 0x96	; 150
    47c0:	bb 27       	eor	r27, r27
    47c2:	93 95       	inc	r25
    47c4:	f6 95       	lsr	r31
    47c6:	87 95       	ror	r24
    47c8:	77 95       	ror	r23
    47ca:	67 95       	ror	r22
    47cc:	b7 95       	ror	r27
    47ce:	f1 11       	cpse	r31, r1
    47d0:	f8 cf       	rjmp	.-16     	; 0x47c2 <__floatsisf+0x1c>
    47d2:	fa f4       	brpl	.+62     	; 0x4812 <__floatsisf+0x6c>
    47d4:	bb 0f       	add	r27, r27
    47d6:	11 f4       	brne	.+4      	; 0x47dc <__floatsisf+0x36>
    47d8:	60 ff       	sbrs	r22, 0
    47da:	1b c0       	rjmp	.+54     	; 0x4812 <__floatsisf+0x6c>
    47dc:	6f 5f       	subi	r22, 0xFF	; 255
    47de:	7f 4f       	sbci	r23, 0xFF	; 255
    47e0:	8f 4f       	sbci	r24, 0xFF	; 255
    47e2:	9f 4f       	sbci	r25, 0xFF	; 255
    47e4:	16 c0       	rjmp	.+44     	; 0x4812 <__floatsisf+0x6c>
    47e6:	88 23       	and	r24, r24
    47e8:	11 f0       	breq	.+4      	; 0x47ee <__floatsisf+0x48>
    47ea:	96 e9       	ldi	r25, 0x96	; 150
    47ec:	11 c0       	rjmp	.+34     	; 0x4810 <__floatsisf+0x6a>
    47ee:	77 23       	and	r23, r23
    47f0:	21 f0       	breq	.+8      	; 0x47fa <__floatsisf+0x54>
    47f2:	9e e8       	ldi	r25, 0x8E	; 142
    47f4:	87 2f       	mov	r24, r23
    47f6:	76 2f       	mov	r23, r22
    47f8:	05 c0       	rjmp	.+10     	; 0x4804 <__floatsisf+0x5e>
    47fa:	66 23       	and	r22, r22
    47fc:	71 f0       	breq	.+28     	; 0x481a <__floatsisf+0x74>
    47fe:	96 e8       	ldi	r25, 0x86	; 134
    4800:	86 2f       	mov	r24, r22
    4802:	70 e0       	ldi	r23, 0x00	; 0
    4804:	60 e0       	ldi	r22, 0x00	; 0
    4806:	2a f0       	brmi	.+10     	; 0x4812 <__floatsisf+0x6c>
    4808:	9a 95       	dec	r25
    480a:	66 0f       	add	r22, r22
    480c:	77 1f       	adc	r23, r23
    480e:	88 1f       	adc	r24, r24
    4810:	da f7       	brpl	.-10     	; 0x4808 <__floatsisf+0x62>
    4812:	88 0f       	add	r24, r24
    4814:	96 95       	lsr	r25
    4816:	87 95       	ror	r24
    4818:	97 f9       	bld	r25, 7
    481a:	08 95       	ret

0000481c <__fp_cmp>:
    481c:	99 0f       	add	r25, r25
    481e:	00 08       	sbc	r0, r0
    4820:	55 0f       	add	r21, r21
    4822:	aa 0b       	sbc	r26, r26
    4824:	e0 e8       	ldi	r30, 0x80	; 128
    4826:	fe ef       	ldi	r31, 0xFE	; 254
    4828:	16 16       	cp	r1, r22
    482a:	17 06       	cpc	r1, r23
    482c:	e8 07       	cpc	r30, r24
    482e:	f9 07       	cpc	r31, r25
    4830:	c0 f0       	brcs	.+48     	; 0x4862 <__fp_cmp+0x46>
    4832:	12 16       	cp	r1, r18
    4834:	13 06       	cpc	r1, r19
    4836:	e4 07       	cpc	r30, r20
    4838:	f5 07       	cpc	r31, r21
    483a:	98 f0       	brcs	.+38     	; 0x4862 <__fp_cmp+0x46>
    483c:	62 1b       	sub	r22, r18
    483e:	73 0b       	sbc	r23, r19
    4840:	84 0b       	sbc	r24, r20
    4842:	95 0b       	sbc	r25, r21
    4844:	39 f4       	brne	.+14     	; 0x4854 <__fp_cmp+0x38>
    4846:	0a 26       	eor	r0, r26
    4848:	61 f0       	breq	.+24     	; 0x4862 <__fp_cmp+0x46>
    484a:	23 2b       	or	r18, r19
    484c:	24 2b       	or	r18, r20
    484e:	25 2b       	or	r18, r21
    4850:	21 f4       	brne	.+8      	; 0x485a <__fp_cmp+0x3e>
    4852:	08 95       	ret
    4854:	0a 26       	eor	r0, r26
    4856:	09 f4       	brne	.+2      	; 0x485a <__fp_cmp+0x3e>
    4858:	a1 40       	sbci	r26, 0x01	; 1
    485a:	a6 95       	lsr	r26
    485c:	8f ef       	ldi	r24, 0xFF	; 255
    485e:	81 1d       	adc	r24, r1
    4860:	81 1d       	adc	r24, r1
    4862:	08 95       	ret

00004864 <__fp_inf>:
    4864:	97 f9       	bld	r25, 7
    4866:	9f 67       	ori	r25, 0x7F	; 127
    4868:	80 e8       	ldi	r24, 0x80	; 128
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	60 e0       	ldi	r22, 0x00	; 0
    486e:	08 95       	ret

00004870 <__fp_nan>:
    4870:	9f ef       	ldi	r25, 0xFF	; 255
    4872:	80 ec       	ldi	r24, 0xC0	; 192
    4874:	08 95       	ret

00004876 <__fp_pscA>:
    4876:	00 24       	eor	r0, r0
    4878:	0a 94       	dec	r0
    487a:	16 16       	cp	r1, r22
    487c:	17 06       	cpc	r1, r23
    487e:	18 06       	cpc	r1, r24
    4880:	09 06       	cpc	r0, r25
    4882:	08 95       	ret

00004884 <__fp_pscB>:
    4884:	00 24       	eor	r0, r0
    4886:	0a 94       	dec	r0
    4888:	12 16       	cp	r1, r18
    488a:	13 06       	cpc	r1, r19
    488c:	14 06       	cpc	r1, r20
    488e:	05 06       	cpc	r0, r21
    4890:	08 95       	ret

00004892 <__fp_round>:
    4892:	09 2e       	mov	r0, r25
    4894:	03 94       	inc	r0
    4896:	00 0c       	add	r0, r0
    4898:	11 f4       	brne	.+4      	; 0x489e <__fp_round+0xc>
    489a:	88 23       	and	r24, r24
    489c:	52 f0       	brmi	.+20     	; 0x48b2 <__fp_round+0x20>
    489e:	bb 0f       	add	r27, r27
    48a0:	40 f4       	brcc	.+16     	; 0x48b2 <__fp_round+0x20>
    48a2:	bf 2b       	or	r27, r31
    48a4:	11 f4       	brne	.+4      	; 0x48aa <__fp_round+0x18>
    48a6:	60 ff       	sbrs	r22, 0
    48a8:	04 c0       	rjmp	.+8      	; 0x48b2 <__fp_round+0x20>
    48aa:	6f 5f       	subi	r22, 0xFF	; 255
    48ac:	7f 4f       	sbci	r23, 0xFF	; 255
    48ae:	8f 4f       	sbci	r24, 0xFF	; 255
    48b0:	9f 4f       	sbci	r25, 0xFF	; 255
    48b2:	08 95       	ret

000048b4 <__fp_split3>:
    48b4:	57 fd       	sbrc	r21, 7
    48b6:	90 58       	subi	r25, 0x80	; 128
    48b8:	44 0f       	add	r20, r20
    48ba:	55 1f       	adc	r21, r21
    48bc:	59 f0       	breq	.+22     	; 0x48d4 <__fp_splitA+0x10>
    48be:	5f 3f       	cpi	r21, 0xFF	; 255
    48c0:	71 f0       	breq	.+28     	; 0x48de <__fp_splitA+0x1a>
    48c2:	47 95       	ror	r20

000048c4 <__fp_splitA>:
    48c4:	88 0f       	add	r24, r24
    48c6:	97 fb       	bst	r25, 7
    48c8:	99 1f       	adc	r25, r25
    48ca:	61 f0       	breq	.+24     	; 0x48e4 <__fp_splitA+0x20>
    48cc:	9f 3f       	cpi	r25, 0xFF	; 255
    48ce:	79 f0       	breq	.+30     	; 0x48ee <__fp_splitA+0x2a>
    48d0:	87 95       	ror	r24
    48d2:	08 95       	ret
    48d4:	12 16       	cp	r1, r18
    48d6:	13 06       	cpc	r1, r19
    48d8:	14 06       	cpc	r1, r20
    48da:	55 1f       	adc	r21, r21
    48dc:	f2 cf       	rjmp	.-28     	; 0x48c2 <__fp_split3+0xe>
    48de:	46 95       	lsr	r20
    48e0:	f1 df       	rcall	.-30     	; 0x48c4 <__fp_splitA>
    48e2:	08 c0       	rjmp	.+16     	; 0x48f4 <__fp_splitA+0x30>
    48e4:	16 16       	cp	r1, r22
    48e6:	17 06       	cpc	r1, r23
    48e8:	18 06       	cpc	r1, r24
    48ea:	99 1f       	adc	r25, r25
    48ec:	f1 cf       	rjmp	.-30     	; 0x48d0 <__fp_splitA+0xc>
    48ee:	86 95       	lsr	r24
    48f0:	71 05       	cpc	r23, r1
    48f2:	61 05       	cpc	r22, r1
    48f4:	08 94       	sec
    48f6:	08 95       	ret

000048f8 <__fp_zero>:
    48f8:	e8 94       	clt

000048fa <__fp_szero>:
    48fa:	bb 27       	eor	r27, r27
    48fc:	66 27       	eor	r22, r22
    48fe:	77 27       	eor	r23, r23
    4900:	cb 01       	movw	r24, r22
    4902:	97 f9       	bld	r25, 7
    4904:	08 95       	ret

00004906 <__gesf2>:
    4906:	8a df       	rcall	.-236    	; 0x481c <__fp_cmp>
    4908:	08 f4       	brcc	.+2      	; 0x490c <__gesf2+0x6>
    490a:	8f ef       	ldi	r24, 0xFF	; 255
    490c:	08 95       	ret

0000490e <__mulsf3>:
    490e:	0b d0       	rcall	.+22     	; 0x4926 <__mulsf3x>
    4910:	c0 cf       	rjmp	.-128    	; 0x4892 <__fp_round>
    4912:	b1 df       	rcall	.-158    	; 0x4876 <__fp_pscA>
    4914:	28 f0       	brcs	.+10     	; 0x4920 <__mulsf3+0x12>
    4916:	b6 df       	rcall	.-148    	; 0x4884 <__fp_pscB>
    4918:	18 f0       	brcs	.+6      	; 0x4920 <__mulsf3+0x12>
    491a:	95 23       	and	r25, r21
    491c:	09 f0       	breq	.+2      	; 0x4920 <__mulsf3+0x12>
    491e:	a2 cf       	rjmp	.-188    	; 0x4864 <__fp_inf>
    4920:	a7 cf       	rjmp	.-178    	; 0x4870 <__fp_nan>
    4922:	11 24       	eor	r1, r1
    4924:	ea cf       	rjmp	.-44     	; 0x48fa <__fp_szero>

00004926 <__mulsf3x>:
    4926:	c6 df       	rcall	.-116    	; 0x48b4 <__fp_split3>
    4928:	a0 f3       	brcs	.-24     	; 0x4912 <__mulsf3+0x4>

0000492a <__mulsf3_pse>:
    492a:	95 9f       	mul	r25, r21
    492c:	d1 f3       	breq	.-12     	; 0x4922 <__mulsf3+0x14>
    492e:	95 0f       	add	r25, r21
    4930:	50 e0       	ldi	r21, 0x00	; 0
    4932:	55 1f       	adc	r21, r21
    4934:	62 9f       	mul	r22, r18
    4936:	f0 01       	movw	r30, r0
    4938:	72 9f       	mul	r23, r18
    493a:	bb 27       	eor	r27, r27
    493c:	f0 0d       	add	r31, r0
    493e:	b1 1d       	adc	r27, r1
    4940:	63 9f       	mul	r22, r19
    4942:	aa 27       	eor	r26, r26
    4944:	f0 0d       	add	r31, r0
    4946:	b1 1d       	adc	r27, r1
    4948:	aa 1f       	adc	r26, r26
    494a:	64 9f       	mul	r22, r20
    494c:	66 27       	eor	r22, r22
    494e:	b0 0d       	add	r27, r0
    4950:	a1 1d       	adc	r26, r1
    4952:	66 1f       	adc	r22, r22
    4954:	82 9f       	mul	r24, r18
    4956:	22 27       	eor	r18, r18
    4958:	b0 0d       	add	r27, r0
    495a:	a1 1d       	adc	r26, r1
    495c:	62 1f       	adc	r22, r18
    495e:	73 9f       	mul	r23, r19
    4960:	b0 0d       	add	r27, r0
    4962:	a1 1d       	adc	r26, r1
    4964:	62 1f       	adc	r22, r18
    4966:	83 9f       	mul	r24, r19
    4968:	a0 0d       	add	r26, r0
    496a:	61 1d       	adc	r22, r1
    496c:	22 1f       	adc	r18, r18
    496e:	74 9f       	mul	r23, r20
    4970:	33 27       	eor	r19, r19
    4972:	a0 0d       	add	r26, r0
    4974:	61 1d       	adc	r22, r1
    4976:	23 1f       	adc	r18, r19
    4978:	84 9f       	mul	r24, r20
    497a:	60 0d       	add	r22, r0
    497c:	21 1d       	adc	r18, r1
    497e:	82 2f       	mov	r24, r18
    4980:	76 2f       	mov	r23, r22
    4982:	6a 2f       	mov	r22, r26
    4984:	11 24       	eor	r1, r1
    4986:	9f 57       	subi	r25, 0x7F	; 127
    4988:	50 40       	sbci	r21, 0x00	; 0
    498a:	8a f0       	brmi	.+34     	; 0x49ae <__mulsf3_pse+0x84>
    498c:	e1 f0       	breq	.+56     	; 0x49c6 <__mulsf3_pse+0x9c>
    498e:	88 23       	and	r24, r24
    4990:	4a f0       	brmi	.+18     	; 0x49a4 <__mulsf3_pse+0x7a>
    4992:	ee 0f       	add	r30, r30
    4994:	ff 1f       	adc	r31, r31
    4996:	bb 1f       	adc	r27, r27
    4998:	66 1f       	adc	r22, r22
    499a:	77 1f       	adc	r23, r23
    499c:	88 1f       	adc	r24, r24
    499e:	91 50       	subi	r25, 0x01	; 1
    49a0:	50 40       	sbci	r21, 0x00	; 0
    49a2:	a9 f7       	brne	.-22     	; 0x498e <__mulsf3_pse+0x64>
    49a4:	9e 3f       	cpi	r25, 0xFE	; 254
    49a6:	51 05       	cpc	r21, r1
    49a8:	70 f0       	brcs	.+28     	; 0x49c6 <__mulsf3_pse+0x9c>
    49aa:	5c cf       	rjmp	.-328    	; 0x4864 <__fp_inf>
    49ac:	a6 cf       	rjmp	.-180    	; 0x48fa <__fp_szero>
    49ae:	5f 3f       	cpi	r21, 0xFF	; 255
    49b0:	ec f3       	brlt	.-6      	; 0x49ac <__mulsf3_pse+0x82>
    49b2:	98 3e       	cpi	r25, 0xE8	; 232
    49b4:	dc f3       	brlt	.-10     	; 0x49ac <__mulsf3_pse+0x82>
    49b6:	86 95       	lsr	r24
    49b8:	77 95       	ror	r23
    49ba:	67 95       	ror	r22
    49bc:	b7 95       	ror	r27
    49be:	f7 95       	ror	r31
    49c0:	e7 95       	ror	r30
    49c2:	9f 5f       	subi	r25, 0xFF	; 255
    49c4:	c1 f7       	brne	.-16     	; 0x49b6 <__mulsf3_pse+0x8c>
    49c6:	fe 2b       	or	r31, r30
    49c8:	88 0f       	add	r24, r24
    49ca:	91 1d       	adc	r25, r1
    49cc:	96 95       	lsr	r25
    49ce:	87 95       	ror	r24
    49d0:	97 f9       	bld	r25, 7
    49d2:	08 95       	ret

000049d4 <pow>:
    49d4:	fa 01       	movw	r30, r20
    49d6:	ee 0f       	add	r30, r30
    49d8:	ff 1f       	adc	r31, r31
    49da:	30 96       	adiw	r30, 0x00	; 0
    49dc:	21 05       	cpc	r18, r1
    49de:	31 05       	cpc	r19, r1
    49e0:	99 f1       	breq	.+102    	; 0x4a48 <pow+0x74>
    49e2:	61 15       	cp	r22, r1
    49e4:	71 05       	cpc	r23, r1
    49e6:	61 f4       	brne	.+24     	; 0x4a00 <pow+0x2c>
    49e8:	80 38       	cpi	r24, 0x80	; 128
    49ea:	bf e3       	ldi	r27, 0x3F	; 63
    49ec:	9b 07       	cpc	r25, r27
    49ee:	49 f1       	breq	.+82     	; 0x4a42 <pow+0x6e>
    49f0:	68 94       	set
    49f2:	90 38       	cpi	r25, 0x80	; 128
    49f4:	81 05       	cpc	r24, r1
    49f6:	61 f0       	breq	.+24     	; 0x4a10 <pow+0x3c>
    49f8:	80 38       	cpi	r24, 0x80	; 128
    49fa:	bf ef       	ldi	r27, 0xFF	; 255
    49fc:	9b 07       	cpc	r25, r27
    49fe:	41 f0       	breq	.+16     	; 0x4a10 <pow+0x3c>
    4a00:	99 23       	and	r25, r25
    4a02:	42 f5       	brpl	.+80     	; 0x4a54 <pow+0x80>
    4a04:	ff 3f       	cpi	r31, 0xFF	; 255
    4a06:	e1 05       	cpc	r30, r1
    4a08:	31 05       	cpc	r19, r1
    4a0a:	21 05       	cpc	r18, r1
    4a0c:	11 f1       	breq	.+68     	; 0x4a52 <pow+0x7e>
    4a0e:	e8 94       	clt
    4a10:	08 94       	sec
    4a12:	e7 95       	ror	r30
    4a14:	d9 01       	movw	r26, r18
    4a16:	aa 23       	and	r26, r26
    4a18:	29 f4       	brne	.+10     	; 0x4a24 <pow+0x50>
    4a1a:	ab 2f       	mov	r26, r27
    4a1c:	be 2f       	mov	r27, r30
    4a1e:	f8 5f       	subi	r31, 0xF8	; 248
    4a20:	d0 f3       	brcs	.-12     	; 0x4a16 <pow+0x42>
    4a22:	10 c0       	rjmp	.+32     	; 0x4a44 <pow+0x70>
    4a24:	ff 5f       	subi	r31, 0xFF	; 255
    4a26:	70 f4       	brcc	.+28     	; 0x4a44 <pow+0x70>
    4a28:	a6 95       	lsr	r26
    4a2a:	e0 f7       	brcc	.-8      	; 0x4a24 <pow+0x50>
    4a2c:	f7 39       	cpi	r31, 0x97	; 151
    4a2e:	50 f0       	brcs	.+20     	; 0x4a44 <pow+0x70>
    4a30:	19 f0       	breq	.+6      	; 0x4a38 <pow+0x64>
    4a32:	ff 3a       	cpi	r31, 0xAF	; 175
    4a34:	38 f4       	brcc	.+14     	; 0x4a44 <pow+0x70>
    4a36:	9f 77       	andi	r25, 0x7F	; 127
    4a38:	9f 93       	push	r25
    4a3a:	0c d0       	rcall	.+24     	; 0x4a54 <pow+0x80>
    4a3c:	0f 90       	pop	r0
    4a3e:	07 fc       	sbrc	r0, 7
    4a40:	90 58       	subi	r25, 0x80	; 128
    4a42:	08 95       	ret
    4a44:	3e f0       	brts	.+14     	; 0x4a54 <pow+0x80>
    4a46:	14 cf       	rjmp	.-472    	; 0x4870 <__fp_nan>
    4a48:	60 e0       	ldi	r22, 0x00	; 0
    4a4a:	70 e0       	ldi	r23, 0x00	; 0
    4a4c:	80 e8       	ldi	r24, 0x80	; 128
    4a4e:	9f e3       	ldi	r25, 0x3F	; 63
    4a50:	08 95       	ret
    4a52:	4f e7       	ldi	r20, 0x7F	; 127
    4a54:	9f 77       	andi	r25, 0x7F	; 127
    4a56:	5f 93       	push	r21
    4a58:	4f 93       	push	r20
    4a5a:	3f 93       	push	r19
    4a5c:	2f 93       	push	r18
    4a5e:	9e d0       	rcall	.+316    	; 0x4b9c <log>
    4a60:	2f 91       	pop	r18
    4a62:	3f 91       	pop	r19
    4a64:	4f 91       	pop	r20
    4a66:	5f 91       	pop	r21
    4a68:	52 df       	rcall	.-348    	; 0x490e <__mulsf3>
    4a6a:	05 c0       	rjmp	.+10     	; 0x4a76 <exp>
    4a6c:	19 f4       	brne	.+6      	; 0x4a74 <pow+0xa0>
    4a6e:	0e f0       	brts	.+2      	; 0x4a72 <pow+0x9e>
    4a70:	f9 ce       	rjmp	.-526    	; 0x4864 <__fp_inf>
    4a72:	42 cf       	rjmp	.-380    	; 0x48f8 <__fp_zero>
    4a74:	fd ce       	rjmp	.-518    	; 0x4870 <__fp_nan>

00004a76 <exp>:
    4a76:	26 df       	rcall	.-436    	; 0x48c4 <__fp_splitA>
    4a78:	c8 f3       	brcs	.-14     	; 0x4a6c <pow+0x98>
    4a7a:	96 38       	cpi	r25, 0x86	; 134
    4a7c:	c0 f7       	brcc	.-16     	; 0x4a6e <pow+0x9a>
    4a7e:	07 f8       	bld	r0, 7
    4a80:	0f 92       	push	r0
    4a82:	e8 94       	clt
    4a84:	2b e3       	ldi	r18, 0x3B	; 59
    4a86:	3a ea       	ldi	r19, 0xAA	; 170
    4a88:	48 eb       	ldi	r20, 0xB8	; 184
    4a8a:	5f e7       	ldi	r21, 0x7F	; 127
    4a8c:	4e df       	rcall	.-356    	; 0x492a <__mulsf3_pse>
    4a8e:	0f 92       	push	r0
    4a90:	0f 92       	push	r0
    4a92:	0f 92       	push	r0
    4a94:	4d b7       	in	r20, 0x3d	; 61
    4a96:	5e b7       	in	r21, 0x3e	; 62
    4a98:	0f 92       	push	r0
    4a9a:	c0 d0       	rcall	.+384    	; 0x4c1c <modf>
    4a9c:	e2 e2       	ldi	r30, 0x22	; 34
    4a9e:	f2 e0       	ldi	r31, 0x02	; 2
    4aa0:	16 d0       	rcall	.+44     	; 0x4ace <__fp_powser>
    4aa2:	4f 91       	pop	r20
    4aa4:	5f 91       	pop	r21
    4aa6:	ef 91       	pop	r30
    4aa8:	ff 91       	pop	r31
    4aaa:	e5 95       	asr	r30
    4aac:	ee 1f       	adc	r30, r30
    4aae:	ff 1f       	adc	r31, r31
    4ab0:	49 f0       	breq	.+18     	; 0x4ac4 <exp+0x4e>
    4ab2:	fe 57       	subi	r31, 0x7E	; 126
    4ab4:	e0 68       	ori	r30, 0x80	; 128
    4ab6:	44 27       	eor	r20, r20
    4ab8:	ee 0f       	add	r30, r30
    4aba:	44 1f       	adc	r20, r20
    4abc:	fa 95       	dec	r31
    4abe:	e1 f7       	brne	.-8      	; 0x4ab8 <exp+0x42>
    4ac0:	41 95       	neg	r20
    4ac2:	55 0b       	sbc	r21, r21
    4ac4:	32 d0       	rcall	.+100    	; 0x4b2a <ldexp>
    4ac6:	0f 90       	pop	r0
    4ac8:	07 fe       	sbrs	r0, 7
    4aca:	26 c0       	rjmp	.+76     	; 0x4b18 <inverse>
    4acc:	08 95       	ret

00004ace <__fp_powser>:
    4ace:	df 93       	push	r29
    4ad0:	cf 93       	push	r28
    4ad2:	1f 93       	push	r17
    4ad4:	0f 93       	push	r16
    4ad6:	ff 92       	push	r15
    4ad8:	ef 92       	push	r14
    4ada:	df 92       	push	r13
    4adc:	7b 01       	movw	r14, r22
    4ade:	8c 01       	movw	r16, r24
    4ae0:	68 94       	set
    4ae2:	05 c0       	rjmp	.+10     	; 0x4aee <__fp_powser+0x20>
    4ae4:	da 2e       	mov	r13, r26
    4ae6:	ef 01       	movw	r28, r30
    4ae8:	1e df       	rcall	.-452    	; 0x4926 <__mulsf3x>
    4aea:	fe 01       	movw	r30, r28
    4aec:	e8 94       	clt
    4aee:	a5 91       	lpm	r26, Z+
    4af0:	25 91       	lpm	r18, Z+
    4af2:	35 91       	lpm	r19, Z+
    4af4:	45 91       	lpm	r20, Z+
    4af6:	55 91       	lpm	r21, Z+
    4af8:	ae f3       	brts	.-22     	; 0x4ae4 <__fp_powser+0x16>
    4afa:	ef 01       	movw	r28, r30
    4afc:	62 dd       	rcall	.-1340   	; 0x45c2 <__addsf3x>
    4afe:	fe 01       	movw	r30, r28
    4b00:	97 01       	movw	r18, r14
    4b02:	a8 01       	movw	r20, r16
    4b04:	da 94       	dec	r13
    4b06:	79 f7       	brne	.-34     	; 0x4ae6 <__fp_powser+0x18>
    4b08:	df 90       	pop	r13
    4b0a:	ef 90       	pop	r14
    4b0c:	ff 90       	pop	r15
    4b0e:	0f 91       	pop	r16
    4b10:	1f 91       	pop	r17
    4b12:	cf 91       	pop	r28
    4b14:	df 91       	pop	r29
    4b16:	08 95       	ret

00004b18 <inverse>:
    4b18:	9b 01       	movw	r18, r22
    4b1a:	ac 01       	movw	r20, r24
    4b1c:	60 e0       	ldi	r22, 0x00	; 0
    4b1e:	70 e0       	ldi	r23, 0x00	; 0
    4b20:	80 e8       	ldi	r24, 0x80	; 128
    4b22:	9f e3       	ldi	r25, 0x3F	; 63
    4b24:	a5 cd       	rjmp	.-1206   	; 0x4670 <__divsf3>
    4b26:	9e ce       	rjmp	.-708    	; 0x4864 <__fp_inf>
    4b28:	ac c0       	rjmp	.+344    	; 0x4c82 <__fp_mpack>

00004b2a <ldexp>:
    4b2a:	cc de       	rcall	.-616    	; 0x48c4 <__fp_splitA>
    4b2c:	e8 f3       	brcs	.-6      	; 0x4b28 <inverse+0x10>
    4b2e:	99 23       	and	r25, r25
    4b30:	d9 f3       	breq	.-10     	; 0x4b28 <inverse+0x10>
    4b32:	94 0f       	add	r25, r20
    4b34:	51 1d       	adc	r21, r1
    4b36:	bb f3       	brvs	.-18     	; 0x4b26 <inverse+0xe>
    4b38:	91 50       	subi	r25, 0x01	; 1
    4b3a:	50 40       	sbci	r21, 0x00	; 0
    4b3c:	94 f0       	brlt	.+36     	; 0x4b62 <ldexp+0x38>
    4b3e:	59 f0       	breq	.+22     	; 0x4b56 <ldexp+0x2c>
    4b40:	88 23       	and	r24, r24
    4b42:	32 f0       	brmi	.+12     	; 0x4b50 <ldexp+0x26>
    4b44:	66 0f       	add	r22, r22
    4b46:	77 1f       	adc	r23, r23
    4b48:	88 1f       	adc	r24, r24
    4b4a:	91 50       	subi	r25, 0x01	; 1
    4b4c:	50 40       	sbci	r21, 0x00	; 0
    4b4e:	c1 f7       	brne	.-16     	; 0x4b40 <ldexp+0x16>
    4b50:	9e 3f       	cpi	r25, 0xFE	; 254
    4b52:	51 05       	cpc	r21, r1
    4b54:	44 f7       	brge	.-48     	; 0x4b26 <inverse+0xe>
    4b56:	88 0f       	add	r24, r24
    4b58:	91 1d       	adc	r25, r1
    4b5a:	96 95       	lsr	r25
    4b5c:	87 95       	ror	r24
    4b5e:	97 f9       	bld	r25, 7
    4b60:	08 95       	ret
    4b62:	5f 3f       	cpi	r21, 0xFF	; 255
    4b64:	ac f0       	brlt	.+42     	; 0x4b90 <ldexp+0x66>
    4b66:	98 3e       	cpi	r25, 0xE8	; 232
    4b68:	9c f0       	brlt	.+38     	; 0x4b90 <ldexp+0x66>
    4b6a:	bb 27       	eor	r27, r27
    4b6c:	86 95       	lsr	r24
    4b6e:	77 95       	ror	r23
    4b70:	67 95       	ror	r22
    4b72:	b7 95       	ror	r27
    4b74:	08 f4       	brcc	.+2      	; 0x4b78 <ldexp+0x4e>
    4b76:	b1 60       	ori	r27, 0x01	; 1
    4b78:	93 95       	inc	r25
    4b7a:	c1 f7       	brne	.-16     	; 0x4b6c <ldexp+0x42>
    4b7c:	bb 0f       	add	r27, r27
    4b7e:	58 f7       	brcc	.-42     	; 0x4b56 <ldexp+0x2c>
    4b80:	11 f4       	brne	.+4      	; 0x4b86 <ldexp+0x5c>
    4b82:	60 ff       	sbrs	r22, 0
    4b84:	e8 cf       	rjmp	.-48     	; 0x4b56 <ldexp+0x2c>
    4b86:	6f 5f       	subi	r22, 0xFF	; 255
    4b88:	7f 4f       	sbci	r23, 0xFF	; 255
    4b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b8e:	e3 cf       	rjmp	.-58     	; 0x4b56 <ldexp+0x2c>
    4b90:	b4 ce       	rjmp	.-664    	; 0x48fa <__fp_szero>
    4b92:	0e f0       	brts	.+2      	; 0x4b96 <ldexp+0x6c>
    4b94:	76 c0       	rjmp	.+236    	; 0x4c82 <__fp_mpack>
    4b96:	6c ce       	rjmp	.-808    	; 0x4870 <__fp_nan>
    4b98:	68 94       	set
    4b9a:	64 ce       	rjmp	.-824    	; 0x4864 <__fp_inf>

00004b9c <log>:
    4b9c:	93 de       	rcall	.-730    	; 0x48c4 <__fp_splitA>
    4b9e:	c8 f3       	brcs	.-14     	; 0x4b92 <ldexp+0x68>
    4ba0:	99 23       	and	r25, r25
    4ba2:	d1 f3       	breq	.-12     	; 0x4b98 <ldexp+0x6e>
    4ba4:	c6 f3       	brts	.-16     	; 0x4b96 <ldexp+0x6c>
    4ba6:	df 93       	push	r29
    4ba8:	cf 93       	push	r28
    4baa:	1f 93       	push	r17
    4bac:	0f 93       	push	r16
    4bae:	ff 92       	push	r15
    4bb0:	c9 2f       	mov	r28, r25
    4bb2:	dd 27       	eor	r29, r29
    4bb4:	88 23       	and	r24, r24
    4bb6:	2a f0       	brmi	.+10     	; 0x4bc2 <log+0x26>
    4bb8:	21 97       	sbiw	r28, 0x01	; 1
    4bba:	66 0f       	add	r22, r22
    4bbc:	77 1f       	adc	r23, r23
    4bbe:	88 1f       	adc	r24, r24
    4bc0:	da f7       	brpl	.-10     	; 0x4bb8 <log+0x1c>
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	40 e8       	ldi	r20, 0x80	; 128
    4bc8:	5f eb       	ldi	r21, 0xBF	; 191
    4bca:	9f e3       	ldi	r25, 0x3F	; 63
    4bcc:	88 39       	cpi	r24, 0x98	; 152
    4bce:	20 f0       	brcs	.+8      	; 0x4bd8 <log+0x3c>
    4bd0:	80 3e       	cpi	r24, 0xE0	; 224
    4bd2:	30 f0       	brcs	.+12     	; 0x4be0 <log+0x44>
    4bd4:	21 96       	adiw	r28, 0x01	; 1
    4bd6:	8f 77       	andi	r24, 0x7F	; 127
    4bd8:	e3 dc       	rcall	.-1594   	; 0x45a0 <__addsf3>
    4bda:	ea e4       	ldi	r30, 0x4A	; 74
    4bdc:	f2 e0       	ldi	r31, 0x02	; 2
    4bde:	03 c0       	rjmp	.+6      	; 0x4be6 <log+0x4a>
    4be0:	df dc       	rcall	.-1602   	; 0x45a0 <__addsf3>
    4be2:	e7 e7       	ldi	r30, 0x77	; 119
    4be4:	f2 e0       	ldi	r31, 0x02	; 2
    4be6:	73 df       	rcall	.-282    	; 0x4ace <__fp_powser>
    4be8:	8b 01       	movw	r16, r22
    4bea:	be 01       	movw	r22, r28
    4bec:	ec 01       	movw	r28, r24
    4bee:	fb 2e       	mov	r15, r27
    4bf0:	6f 57       	subi	r22, 0x7F	; 127
    4bf2:	71 09       	sbc	r23, r1
    4bf4:	75 95       	asr	r23
    4bf6:	77 1f       	adc	r23, r23
    4bf8:	88 0b       	sbc	r24, r24
    4bfa:	99 0b       	sbc	r25, r25
    4bfc:	d4 dd       	rcall	.-1112   	; 0x47a6 <__floatsisf>
    4bfe:	28 e1       	ldi	r18, 0x18	; 24
    4c00:	32 e7       	ldi	r19, 0x72	; 114
    4c02:	41 e3       	ldi	r20, 0x31	; 49
    4c04:	5f e3       	ldi	r21, 0x3F	; 63
    4c06:	8f de       	rcall	.-738    	; 0x4926 <__mulsf3x>
    4c08:	af 2d       	mov	r26, r15
    4c0a:	98 01       	movw	r18, r16
    4c0c:	ae 01       	movw	r20, r28
    4c0e:	ff 90       	pop	r15
    4c10:	0f 91       	pop	r16
    4c12:	1f 91       	pop	r17
    4c14:	cf 91       	pop	r28
    4c16:	df 91       	pop	r29
    4c18:	d4 dc       	rcall	.-1624   	; 0x45c2 <__addsf3x>
    4c1a:	3b ce       	rjmp	.-906    	; 0x4892 <__fp_round>

00004c1c <modf>:
    4c1c:	fa 01       	movw	r30, r20
    4c1e:	dc 01       	movw	r26, r24
    4c20:	aa 0f       	add	r26, r26
    4c22:	bb 1f       	adc	r27, r27
    4c24:	9b 01       	movw	r18, r22
    4c26:	ac 01       	movw	r20, r24
    4c28:	bf 57       	subi	r27, 0x7F	; 127
    4c2a:	28 f4       	brcc	.+10     	; 0x4c36 <modf+0x1a>
    4c2c:	22 27       	eor	r18, r18
    4c2e:	33 27       	eor	r19, r19
    4c30:	44 27       	eor	r20, r20
    4c32:	50 78       	andi	r21, 0x80	; 128
    4c34:	1f c0       	rjmp	.+62     	; 0x4c74 <modf+0x58>
    4c36:	b7 51       	subi	r27, 0x17	; 23
    4c38:	88 f4       	brcc	.+34     	; 0x4c5c <modf+0x40>
    4c3a:	ab 2f       	mov	r26, r27
    4c3c:	00 24       	eor	r0, r0
    4c3e:	46 95       	lsr	r20
    4c40:	37 95       	ror	r19
    4c42:	27 95       	ror	r18
    4c44:	01 1c       	adc	r0, r1
    4c46:	a3 95       	inc	r26
    4c48:	d2 f3       	brmi	.-12     	; 0x4c3e <modf+0x22>
    4c4a:	00 20       	and	r0, r0
    4c4c:	69 f0       	breq	.+26     	; 0x4c68 <modf+0x4c>
    4c4e:	22 0f       	add	r18, r18
    4c50:	33 1f       	adc	r19, r19
    4c52:	44 1f       	adc	r20, r20
    4c54:	b3 95       	inc	r27
    4c56:	da f3       	brmi	.-10     	; 0x4c4e <modf+0x32>
    4c58:	0d d0       	rcall	.+26     	; 0x4c74 <modf+0x58>
    4c5a:	a1 cc       	rjmp	.-1726   	; 0x459e <__subsf3>
    4c5c:	61 30       	cpi	r22, 0x01	; 1
    4c5e:	71 05       	cpc	r23, r1
    4c60:	a0 e8       	ldi	r26, 0x80	; 128
    4c62:	8a 07       	cpc	r24, r26
    4c64:	b9 46       	sbci	r27, 0x69	; 105
    4c66:	30 f4       	brcc	.+12     	; 0x4c74 <modf+0x58>
    4c68:	9b 01       	movw	r18, r22
    4c6a:	ac 01       	movw	r20, r24
    4c6c:	66 27       	eor	r22, r22
    4c6e:	77 27       	eor	r23, r23
    4c70:	88 27       	eor	r24, r24
    4c72:	90 78       	andi	r25, 0x80	; 128
    4c74:	30 96       	adiw	r30, 0x00	; 0
    4c76:	21 f0       	breq	.+8      	; 0x4c80 <modf+0x64>
    4c78:	20 83       	st	Z, r18
    4c7a:	31 83       	std	Z+1, r19	; 0x01
    4c7c:	42 83       	std	Z+2, r20	; 0x02
    4c7e:	53 83       	std	Z+3, r21	; 0x03
    4c80:	08 95       	ret

00004c82 <__fp_mpack>:
    4c82:	9f 3f       	cpi	r25, 0xFF	; 255
    4c84:	31 f0       	breq	.+12     	; 0x4c92 <__fp_mpack_finite+0xc>

00004c86 <__fp_mpack_finite>:
    4c86:	91 50       	subi	r25, 0x01	; 1
    4c88:	20 f4       	brcc	.+8      	; 0x4c92 <__fp_mpack_finite+0xc>
    4c8a:	87 95       	ror	r24
    4c8c:	77 95       	ror	r23
    4c8e:	67 95       	ror	r22
    4c90:	b7 95       	ror	r27
    4c92:	88 0f       	add	r24, r24
    4c94:	91 1d       	adc	r25, r1
    4c96:	96 95       	lsr	r25
    4c98:	87 95       	ror	r24
    4c9a:	97 f9       	bld	r25, 7
    4c9c:	08 95       	ret

00004c9e <__mulsi3>:
    4c9e:	db 01       	movw	r26, r22
    4ca0:	8f 93       	push	r24
    4ca2:	9f 93       	push	r25
    4ca4:	88 d0       	rcall	.+272    	; 0x4db6 <__muluhisi3>
    4ca6:	bf 91       	pop	r27
    4ca8:	af 91       	pop	r26
    4caa:	a2 9f       	mul	r26, r18
    4cac:	80 0d       	add	r24, r0
    4cae:	91 1d       	adc	r25, r1
    4cb0:	a3 9f       	mul	r26, r19
    4cb2:	90 0d       	add	r25, r0
    4cb4:	b2 9f       	mul	r27, r18
    4cb6:	90 0d       	add	r25, r0
    4cb8:	11 24       	eor	r1, r1
    4cba:	08 95       	ret

00004cbc <__udivmodhi4>:
    4cbc:	aa 1b       	sub	r26, r26
    4cbe:	bb 1b       	sub	r27, r27
    4cc0:	51 e1       	ldi	r21, 0x11	; 17
    4cc2:	07 c0       	rjmp	.+14     	; 0x4cd2 <__udivmodhi4_ep>

00004cc4 <__udivmodhi4_loop>:
    4cc4:	aa 1f       	adc	r26, r26
    4cc6:	bb 1f       	adc	r27, r27
    4cc8:	a6 17       	cp	r26, r22
    4cca:	b7 07       	cpc	r27, r23
    4ccc:	10 f0       	brcs	.+4      	; 0x4cd2 <__udivmodhi4_ep>
    4cce:	a6 1b       	sub	r26, r22
    4cd0:	b7 0b       	sbc	r27, r23

00004cd2 <__udivmodhi4_ep>:
    4cd2:	88 1f       	adc	r24, r24
    4cd4:	99 1f       	adc	r25, r25
    4cd6:	5a 95       	dec	r21
    4cd8:	a9 f7       	brne	.-22     	; 0x4cc4 <__udivmodhi4_loop>
    4cda:	80 95       	com	r24
    4cdc:	90 95       	com	r25
    4cde:	bc 01       	movw	r22, r24
    4ce0:	cd 01       	movw	r24, r26
    4ce2:	08 95       	ret

00004ce4 <__divmodhi4>:
    4ce4:	97 fb       	bst	r25, 7
    4ce6:	07 2e       	mov	r0, r23
    4ce8:	16 f4       	brtc	.+4      	; 0x4cee <__divmodhi4+0xa>
    4cea:	00 94       	com	r0
    4cec:	06 d0       	rcall	.+12     	; 0x4cfa <__divmodhi4_neg1>
    4cee:	77 fd       	sbrc	r23, 7
    4cf0:	08 d0       	rcall	.+16     	; 0x4d02 <__divmodhi4_neg2>
    4cf2:	e4 df       	rcall	.-56     	; 0x4cbc <__udivmodhi4>
    4cf4:	07 fc       	sbrc	r0, 7
    4cf6:	05 d0       	rcall	.+10     	; 0x4d02 <__divmodhi4_neg2>
    4cf8:	3e f4       	brtc	.+14     	; 0x4d08 <__divmodhi4_exit>

00004cfa <__divmodhi4_neg1>:
    4cfa:	90 95       	com	r25
    4cfc:	81 95       	neg	r24
    4cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    4d00:	08 95       	ret

00004d02 <__divmodhi4_neg2>:
    4d02:	70 95       	com	r23
    4d04:	61 95       	neg	r22
    4d06:	7f 4f       	sbci	r23, 0xFF	; 255

00004d08 <__divmodhi4_exit>:
    4d08:	08 95       	ret

00004d0a <__udivmodsi4>:
    4d0a:	a1 e2       	ldi	r26, 0x21	; 33
    4d0c:	1a 2e       	mov	r1, r26
    4d0e:	aa 1b       	sub	r26, r26
    4d10:	bb 1b       	sub	r27, r27
    4d12:	fd 01       	movw	r30, r26
    4d14:	0d c0       	rjmp	.+26     	; 0x4d30 <__udivmodsi4_ep>

00004d16 <__udivmodsi4_loop>:
    4d16:	aa 1f       	adc	r26, r26
    4d18:	bb 1f       	adc	r27, r27
    4d1a:	ee 1f       	adc	r30, r30
    4d1c:	ff 1f       	adc	r31, r31
    4d1e:	a2 17       	cp	r26, r18
    4d20:	b3 07       	cpc	r27, r19
    4d22:	e4 07       	cpc	r30, r20
    4d24:	f5 07       	cpc	r31, r21
    4d26:	20 f0       	brcs	.+8      	; 0x4d30 <__udivmodsi4_ep>
    4d28:	a2 1b       	sub	r26, r18
    4d2a:	b3 0b       	sbc	r27, r19
    4d2c:	e4 0b       	sbc	r30, r20
    4d2e:	f5 0b       	sbc	r31, r21

00004d30 <__udivmodsi4_ep>:
    4d30:	66 1f       	adc	r22, r22
    4d32:	77 1f       	adc	r23, r23
    4d34:	88 1f       	adc	r24, r24
    4d36:	99 1f       	adc	r25, r25
    4d38:	1a 94       	dec	r1
    4d3a:	69 f7       	brne	.-38     	; 0x4d16 <__udivmodsi4_loop>
    4d3c:	60 95       	com	r22
    4d3e:	70 95       	com	r23
    4d40:	80 95       	com	r24
    4d42:	90 95       	com	r25
    4d44:	9b 01       	movw	r18, r22
    4d46:	ac 01       	movw	r20, r24
    4d48:	bd 01       	movw	r22, r26
    4d4a:	cf 01       	movw	r24, r30
    4d4c:	08 95       	ret

00004d4e <__divmodsi4>:
    4d4e:	05 2e       	mov	r0, r21
    4d50:	97 fb       	bst	r25, 7
    4d52:	16 f4       	brtc	.+4      	; 0x4d58 <__divmodsi4+0xa>
    4d54:	00 94       	com	r0
    4d56:	0f d0       	rcall	.+30     	; 0x4d76 <__negsi2>
    4d58:	57 fd       	sbrc	r21, 7
    4d5a:	05 d0       	rcall	.+10     	; 0x4d66 <__divmodsi4_neg2>
    4d5c:	d6 df       	rcall	.-84     	; 0x4d0a <__udivmodsi4>
    4d5e:	07 fc       	sbrc	r0, 7
    4d60:	02 d0       	rcall	.+4      	; 0x4d66 <__divmodsi4_neg2>
    4d62:	46 f4       	brtc	.+16     	; 0x4d74 <__divmodsi4_exit>
    4d64:	08 c0       	rjmp	.+16     	; 0x4d76 <__negsi2>

00004d66 <__divmodsi4_neg2>:
    4d66:	50 95       	com	r21
    4d68:	40 95       	com	r20
    4d6a:	30 95       	com	r19
    4d6c:	21 95       	neg	r18
    4d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d70:	4f 4f       	sbci	r20, 0xFF	; 255
    4d72:	5f 4f       	sbci	r21, 0xFF	; 255

00004d74 <__divmodsi4_exit>:
    4d74:	08 95       	ret

00004d76 <__negsi2>:
    4d76:	90 95       	com	r25
    4d78:	80 95       	com	r24
    4d7a:	70 95       	com	r23
    4d7c:	61 95       	neg	r22
    4d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d80:	8f 4f       	sbci	r24, 0xFF	; 255
    4d82:	9f 4f       	sbci	r25, 0xFF	; 255
    4d84:	08 95       	ret

00004d86 <__tablejump2__>:
    4d86:	ee 0f       	add	r30, r30
    4d88:	ff 1f       	adc	r31, r31
    4d8a:	88 1f       	adc	r24, r24
    4d8c:	8b bf       	out	0x3b, r24	; 59
    4d8e:	07 90       	elpm	r0, Z+
    4d90:	f6 91       	elpm	r31, Z
    4d92:	e0 2d       	mov	r30, r0
    4d94:	1b be       	out	0x3b, r1	; 59
    4d96:	19 94       	eijmp

00004d98 <__umulhisi3>:
    4d98:	a2 9f       	mul	r26, r18
    4d9a:	b0 01       	movw	r22, r0
    4d9c:	b3 9f       	mul	r27, r19
    4d9e:	c0 01       	movw	r24, r0
    4da0:	a3 9f       	mul	r26, r19
    4da2:	70 0d       	add	r23, r0
    4da4:	81 1d       	adc	r24, r1
    4da6:	11 24       	eor	r1, r1
    4da8:	91 1d       	adc	r25, r1
    4daa:	b2 9f       	mul	r27, r18
    4dac:	70 0d       	add	r23, r0
    4dae:	81 1d       	adc	r24, r1
    4db0:	11 24       	eor	r1, r1
    4db2:	91 1d       	adc	r25, r1
    4db4:	08 95       	ret

00004db6 <__muluhisi3>:
    4db6:	f0 df       	rcall	.-32     	; 0x4d98 <__umulhisi3>
    4db8:	a5 9f       	mul	r26, r21
    4dba:	90 0d       	add	r25, r0
    4dbc:	b4 9f       	mul	r27, r20
    4dbe:	90 0d       	add	r25, r0
    4dc0:	a4 9f       	mul	r26, r20
    4dc2:	80 0d       	add	r24, r0
    4dc4:	91 1d       	adc	r25, r1
    4dc6:	11 24       	eor	r1, r1
    4dc8:	08 95       	ret

00004dca <__ashldi3>:
    4dca:	0f 93       	push	r16
    4dcc:	08 30       	cpi	r16, 0x08	; 8
    4dce:	90 f0       	brcs	.+36     	; 0x4df4 <__ashldi3+0x2a>
    4dd0:	98 2f       	mov	r25, r24
    4dd2:	87 2f       	mov	r24, r23
    4dd4:	76 2f       	mov	r23, r22
    4dd6:	65 2f       	mov	r22, r21
    4dd8:	54 2f       	mov	r21, r20
    4dda:	43 2f       	mov	r20, r19
    4ddc:	32 2f       	mov	r19, r18
    4dde:	22 27       	eor	r18, r18
    4de0:	08 50       	subi	r16, 0x08	; 8
    4de2:	f4 cf       	rjmp	.-24     	; 0x4dcc <__ashldi3+0x2>
    4de4:	22 0f       	add	r18, r18
    4de6:	33 1f       	adc	r19, r19
    4de8:	44 1f       	adc	r20, r20
    4dea:	55 1f       	adc	r21, r21
    4dec:	66 1f       	adc	r22, r22
    4dee:	77 1f       	adc	r23, r23
    4df0:	88 1f       	adc	r24, r24
    4df2:	99 1f       	adc	r25, r25
    4df4:	0a 95       	dec	r16
    4df6:	b2 f7       	brpl	.-20     	; 0x4de4 <__ashldi3+0x1a>
    4df8:	0f 91       	pop	r16
    4dfa:	08 95       	ret

00004dfc <__ashrdi3>:
    4dfc:	97 fb       	bst	r25, 7
    4dfe:	10 f8       	bld	r1, 0

00004e00 <__lshrdi3>:
    4e00:	16 94       	lsr	r1
    4e02:	00 08       	sbc	r0, r0
    4e04:	0f 93       	push	r16
    4e06:	08 30       	cpi	r16, 0x08	; 8
    4e08:	98 f0       	brcs	.+38     	; 0x4e30 <__lshrdi3+0x30>
    4e0a:	08 50       	subi	r16, 0x08	; 8
    4e0c:	23 2f       	mov	r18, r19
    4e0e:	34 2f       	mov	r19, r20
    4e10:	45 2f       	mov	r20, r21
    4e12:	56 2f       	mov	r21, r22
    4e14:	67 2f       	mov	r22, r23
    4e16:	78 2f       	mov	r23, r24
    4e18:	89 2f       	mov	r24, r25
    4e1a:	90 2d       	mov	r25, r0
    4e1c:	f4 cf       	rjmp	.-24     	; 0x4e06 <__lshrdi3+0x6>
    4e1e:	05 94       	asr	r0
    4e20:	97 95       	ror	r25
    4e22:	87 95       	ror	r24
    4e24:	77 95       	ror	r23
    4e26:	67 95       	ror	r22
    4e28:	57 95       	ror	r21
    4e2a:	47 95       	ror	r20
    4e2c:	37 95       	ror	r19
    4e2e:	27 95       	ror	r18
    4e30:	0a 95       	dec	r16
    4e32:	aa f7       	brpl	.-22     	; 0x4e1e <__lshrdi3+0x1e>
    4e34:	0f 91       	pop	r16
    4e36:	08 95       	ret

00004e38 <fdevopen>:
    4e38:	0f 93       	push	r16
    4e3a:	1f 93       	push	r17
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	00 97       	sbiw	r24, 0x00	; 0
    4e42:	31 f4       	brne	.+12     	; 0x4e50 <fdevopen+0x18>
    4e44:	61 15       	cp	r22, r1
    4e46:	71 05       	cpc	r23, r1
    4e48:	19 f4       	brne	.+6      	; 0x4e50 <fdevopen+0x18>
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	39 c0       	rjmp	.+114    	; 0x4ec2 <fdevopen+0x8a>
    4e50:	8b 01       	movw	r16, r22
    4e52:	ec 01       	movw	r28, r24
    4e54:	6e e0       	ldi	r22, 0x0E	; 14
    4e56:	70 e0       	ldi	r23, 0x00	; 0
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	77 d5       	rcall	.+2798   	; 0x594c <calloc>
    4e5e:	fc 01       	movw	r30, r24
    4e60:	89 2b       	or	r24, r25
    4e62:	99 f3       	breq	.-26     	; 0x4e4a <fdevopen+0x12>
    4e64:	80 e8       	ldi	r24, 0x80	; 128
    4e66:	83 83       	std	Z+3, r24	; 0x03
    4e68:	01 15       	cp	r16, r1
    4e6a:	11 05       	cpc	r17, r1
    4e6c:	71 f0       	breq	.+28     	; 0x4e8a <fdevopen+0x52>
    4e6e:	02 87       	std	Z+10, r16	; 0x0a
    4e70:	13 87       	std	Z+11, r17	; 0x0b
    4e72:	81 e8       	ldi	r24, 0x81	; 129
    4e74:	83 83       	std	Z+3, r24	; 0x03
    4e76:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <__iob>
    4e7a:	90 91 0f 22 	lds	r25, 0x220F	; 0x80220f <__iob+0x1>
    4e7e:	89 2b       	or	r24, r25
    4e80:	21 f4       	brne	.+8      	; 0x4e8a <fdevopen+0x52>
    4e82:	e0 93 0e 22 	sts	0x220E, r30	; 0x80220e <__iob>
    4e86:	f0 93 0f 22 	sts	0x220F, r31	; 0x80220f <__iob+0x1>
    4e8a:	20 97       	sbiw	r28, 0x00	; 0
    4e8c:	c9 f0       	breq	.+50     	; 0x4ec0 <fdevopen+0x88>
    4e8e:	c0 87       	std	Z+8, r28	; 0x08
    4e90:	d1 87       	std	Z+9, r29	; 0x09
    4e92:	83 81       	ldd	r24, Z+3	; 0x03
    4e94:	82 60       	ori	r24, 0x02	; 2
    4e96:	83 83       	std	Z+3, r24	; 0x03
    4e98:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <__iob+0x2>
    4e9c:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <__iob+0x3>
    4ea0:	89 2b       	or	r24, r25
    4ea2:	71 f4       	brne	.+28     	; 0x4ec0 <fdevopen+0x88>
    4ea4:	e0 93 10 22 	sts	0x2210, r30	; 0x802210 <__iob+0x2>
    4ea8:	f0 93 11 22 	sts	0x2211, r31	; 0x802211 <__iob+0x3>
    4eac:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <__iob+0x4>
    4eb0:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <__iob+0x5>
    4eb4:	89 2b       	or	r24, r25
    4eb6:	21 f4       	brne	.+8      	; 0x4ec0 <fdevopen+0x88>
    4eb8:	e0 93 12 22 	sts	0x2212, r30	; 0x802212 <__iob+0x4>
    4ebc:	f0 93 13 22 	sts	0x2213, r31	; 0x802213 <__iob+0x5>
    4ec0:	cf 01       	movw	r24, r30
    4ec2:	df 91       	pop	r29
    4ec4:	cf 91       	pop	r28
    4ec6:	1f 91       	pop	r17
    4ec8:	0f 91       	pop	r16
    4eca:	08 95       	ret

00004ecc <printf>:
    4ecc:	cf 93       	push	r28
    4ece:	df 93       	push	r29
    4ed0:	cd b7       	in	r28, 0x3d	; 61
    4ed2:	de b7       	in	r29, 0x3e	; 62
    4ed4:	ae 01       	movw	r20, r28
    4ed6:	4a 5f       	subi	r20, 0xFA	; 250
    4ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    4eda:	fa 01       	movw	r30, r20
    4edc:	61 91       	ld	r22, Z+
    4ede:	71 91       	ld	r23, Z+
    4ee0:	af 01       	movw	r20, r30
    4ee2:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <__iob+0x2>
    4ee6:	90 91 11 22 	lds	r25, 0x2211	; 0x802211 <__iob+0x3>
    4eea:	76 d0       	rcall	.+236    	; 0x4fd8 <vfprintf>
    4eec:	df 91       	pop	r29
    4eee:	cf 91       	pop	r28
    4ef0:	08 95       	ret

00004ef2 <puts>:
    4ef2:	0f 93       	push	r16
    4ef4:	1f 93       	push	r17
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
    4efa:	e0 91 10 22 	lds	r30, 0x2210	; 0x802210 <__iob+0x2>
    4efe:	f0 91 11 22 	lds	r31, 0x2211	; 0x802211 <__iob+0x3>
    4f02:	23 81       	ldd	r18, Z+3	; 0x03
    4f04:	21 ff       	sbrs	r18, 1
    4f06:	1b c0       	rjmp	.+54     	; 0x4f3e <puts+0x4c>
    4f08:	8c 01       	movw	r16, r24
    4f0a:	d0 e0       	ldi	r29, 0x00	; 0
    4f0c:	c0 e0       	ldi	r28, 0x00	; 0
    4f0e:	f8 01       	movw	r30, r16
    4f10:	81 91       	ld	r24, Z+
    4f12:	8f 01       	movw	r16, r30
    4f14:	60 91 10 22 	lds	r22, 0x2210	; 0x802210 <__iob+0x2>
    4f18:	70 91 11 22 	lds	r23, 0x2211	; 0x802211 <__iob+0x3>
    4f1c:	db 01       	movw	r26, r22
    4f1e:	18 96       	adiw	r26, 0x08	; 8
    4f20:	ed 91       	ld	r30, X+
    4f22:	fc 91       	ld	r31, X
    4f24:	19 97       	sbiw	r26, 0x09	; 9
    4f26:	88 23       	and	r24, r24
    4f28:	31 f0       	breq	.+12     	; 0x4f36 <puts+0x44>
    4f2a:	19 95       	eicall
    4f2c:	89 2b       	or	r24, r25
    4f2e:	79 f3       	breq	.-34     	; 0x4f0e <puts+0x1c>
    4f30:	df ef       	ldi	r29, 0xFF	; 255
    4f32:	cf ef       	ldi	r28, 0xFF	; 255
    4f34:	ec cf       	rjmp	.-40     	; 0x4f0e <puts+0x1c>
    4f36:	8a e0       	ldi	r24, 0x0A	; 10
    4f38:	19 95       	eicall
    4f3a:	89 2b       	or	r24, r25
    4f3c:	19 f0       	breq	.+6      	; 0x4f44 <puts+0x52>
    4f3e:	8f ef       	ldi	r24, 0xFF	; 255
    4f40:	9f ef       	ldi	r25, 0xFF	; 255
    4f42:	02 c0       	rjmp	.+4      	; 0x4f48 <puts+0x56>
    4f44:	8d 2f       	mov	r24, r29
    4f46:	9c 2f       	mov	r25, r28
    4f48:	df 91       	pop	r29
    4f4a:	cf 91       	pop	r28
    4f4c:	1f 91       	pop	r17
    4f4e:	0f 91       	pop	r16
    4f50:	08 95       	ret

00004f52 <sprintf>:
    4f52:	0f 93       	push	r16
    4f54:	1f 93       	push	r17
    4f56:	cf 93       	push	r28
    4f58:	df 93       	push	r29
    4f5a:	cd b7       	in	r28, 0x3d	; 61
    4f5c:	de b7       	in	r29, 0x3e	; 62
    4f5e:	2e 97       	sbiw	r28, 0x0e	; 14
    4f60:	cd bf       	out	0x3d, r28	; 61
    4f62:	de bf       	out	0x3e, r29	; 62
    4f64:	0e 89       	ldd	r16, Y+22	; 0x16
    4f66:	1f 89       	ldd	r17, Y+23	; 0x17
    4f68:	86 e0       	ldi	r24, 0x06	; 6
    4f6a:	8c 83       	std	Y+4, r24	; 0x04
    4f6c:	09 83       	std	Y+1, r16	; 0x01
    4f6e:	1a 83       	std	Y+2, r17	; 0x02
    4f70:	8f ef       	ldi	r24, 0xFF	; 255
    4f72:	9f e7       	ldi	r25, 0x7F	; 127
    4f74:	8d 83       	std	Y+5, r24	; 0x05
    4f76:	9e 83       	std	Y+6, r25	; 0x06
    4f78:	ae 01       	movw	r20, r28
    4f7a:	46 5e       	subi	r20, 0xE6	; 230
    4f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f7e:	68 8d       	ldd	r22, Y+24	; 0x18
    4f80:	79 8d       	ldd	r23, Y+25	; 0x19
    4f82:	ce 01       	movw	r24, r28
    4f84:	01 96       	adiw	r24, 0x01	; 1
    4f86:	28 d0       	rcall	.+80     	; 0x4fd8 <vfprintf>
    4f88:	ef 81       	ldd	r30, Y+7	; 0x07
    4f8a:	f8 85       	ldd	r31, Y+8	; 0x08
    4f8c:	e0 0f       	add	r30, r16
    4f8e:	f1 1f       	adc	r31, r17
    4f90:	10 82       	st	Z, r1
    4f92:	2e 96       	adiw	r28, 0x0e	; 14
    4f94:	cd bf       	out	0x3d, r28	; 61
    4f96:	de bf       	out	0x3e, r29	; 62
    4f98:	df 91       	pop	r29
    4f9a:	cf 91       	pop	r28
    4f9c:	1f 91       	pop	r17
    4f9e:	0f 91       	pop	r16
    4fa0:	08 95       	ret

00004fa2 <sscanf>:
    4fa2:	cf 93       	push	r28
    4fa4:	df 93       	push	r29
    4fa6:	cd b7       	in	r28, 0x3d	; 61
    4fa8:	de b7       	in	r29, 0x3e	; 62
    4faa:	2e 97       	sbiw	r28, 0x0e	; 14
    4fac:	cd bf       	out	0x3d, r28	; 61
    4fae:	de bf       	out	0x3e, r29	; 62
    4fb0:	85 e0       	ldi	r24, 0x05	; 5
    4fb2:	8c 83       	std	Y+4, r24	; 0x04
    4fb4:	8c 89       	ldd	r24, Y+20	; 0x14
    4fb6:	9d 89       	ldd	r25, Y+21	; 0x15
    4fb8:	89 83       	std	Y+1, r24	; 0x01
    4fba:	9a 83       	std	Y+2, r25	; 0x02
    4fbc:	ae 01       	movw	r20, r28
    4fbe:	48 5e       	subi	r20, 0xE8	; 232
    4fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    4fc2:	6e 89       	ldd	r22, Y+22	; 0x16
    4fc4:	7f 89       	ldd	r23, Y+23	; 0x17
    4fc6:	ce 01       	movw	r24, r28
    4fc8:	01 96       	adiw	r24, 0x01	; 1
    4fca:	a9 d3       	rcall	.+1874   	; 0x571e <vfscanf>
    4fcc:	2e 96       	adiw	r28, 0x0e	; 14
    4fce:	cd bf       	out	0x3d, r28	; 61
    4fd0:	de bf       	out	0x3e, r29	; 62
    4fd2:	df 91       	pop	r29
    4fd4:	cf 91       	pop	r28
    4fd6:	08 95       	ret

00004fd8 <vfprintf>:
    4fd8:	2f 92       	push	r2
    4fda:	3f 92       	push	r3
    4fdc:	4f 92       	push	r4
    4fde:	5f 92       	push	r5
    4fe0:	6f 92       	push	r6
    4fe2:	7f 92       	push	r7
    4fe4:	8f 92       	push	r8
    4fe6:	9f 92       	push	r9
    4fe8:	af 92       	push	r10
    4fea:	bf 92       	push	r11
    4fec:	cf 92       	push	r12
    4fee:	df 92       	push	r13
    4ff0:	ef 92       	push	r14
    4ff2:	ff 92       	push	r15
    4ff4:	0f 93       	push	r16
    4ff6:	1f 93       	push	r17
    4ff8:	cf 93       	push	r28
    4ffa:	df 93       	push	r29
    4ffc:	cd b7       	in	r28, 0x3d	; 61
    4ffe:	de b7       	in	r29, 0x3e	; 62
    5000:	2b 97       	sbiw	r28, 0x0b	; 11
    5002:	cd bf       	out	0x3d, r28	; 61
    5004:	de bf       	out	0x3e, r29	; 62
    5006:	6c 01       	movw	r12, r24
    5008:	7b 01       	movw	r14, r22
    500a:	8a 01       	movw	r16, r20
    500c:	fc 01       	movw	r30, r24
    500e:	16 82       	std	Z+6, r1	; 0x06
    5010:	17 82       	std	Z+7, r1	; 0x07
    5012:	83 81       	ldd	r24, Z+3	; 0x03
    5014:	81 ff       	sbrs	r24, 1
    5016:	bf c1       	rjmp	.+894    	; 0x5396 <vfprintf+0x3be>
    5018:	ce 01       	movw	r24, r28
    501a:	01 96       	adiw	r24, 0x01	; 1
    501c:	3c 01       	movw	r6, r24
    501e:	f6 01       	movw	r30, r12
    5020:	93 81       	ldd	r25, Z+3	; 0x03
    5022:	f7 01       	movw	r30, r14
    5024:	93 fd       	sbrc	r25, 3
    5026:	85 91       	lpm	r24, Z+
    5028:	93 ff       	sbrs	r25, 3
    502a:	81 91       	ld	r24, Z+
    502c:	7f 01       	movw	r14, r30
    502e:	88 23       	and	r24, r24
    5030:	09 f4       	brne	.+2      	; 0x5034 <vfprintf+0x5c>
    5032:	ad c1       	rjmp	.+858    	; 0x538e <vfprintf+0x3b6>
    5034:	85 32       	cpi	r24, 0x25	; 37
    5036:	39 f4       	brne	.+14     	; 0x5046 <vfprintf+0x6e>
    5038:	93 fd       	sbrc	r25, 3
    503a:	85 91       	lpm	r24, Z+
    503c:	93 ff       	sbrs	r25, 3
    503e:	81 91       	ld	r24, Z+
    5040:	7f 01       	movw	r14, r30
    5042:	85 32       	cpi	r24, 0x25	; 37
    5044:	21 f4       	brne	.+8      	; 0x504e <vfprintf+0x76>
    5046:	b6 01       	movw	r22, r12
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	29 d6       	rcall	.+3154   	; 0x5c9e <fputc>
    504c:	e8 cf       	rjmp	.-48     	; 0x501e <vfprintf+0x46>
    504e:	91 2c       	mov	r9, r1
    5050:	21 2c       	mov	r2, r1
    5052:	31 2c       	mov	r3, r1
    5054:	ff e1       	ldi	r31, 0x1F	; 31
    5056:	f3 15       	cp	r31, r3
    5058:	d8 f0       	brcs	.+54     	; 0x5090 <vfprintf+0xb8>
    505a:	8b 32       	cpi	r24, 0x2B	; 43
    505c:	79 f0       	breq	.+30     	; 0x507c <vfprintf+0xa4>
    505e:	38 f4       	brcc	.+14     	; 0x506e <vfprintf+0x96>
    5060:	80 32       	cpi	r24, 0x20	; 32
    5062:	79 f0       	breq	.+30     	; 0x5082 <vfprintf+0xaa>
    5064:	83 32       	cpi	r24, 0x23	; 35
    5066:	a1 f4       	brne	.+40     	; 0x5090 <vfprintf+0xb8>
    5068:	23 2d       	mov	r18, r3
    506a:	20 61       	ori	r18, 0x10	; 16
    506c:	1d c0       	rjmp	.+58     	; 0x50a8 <vfprintf+0xd0>
    506e:	8d 32       	cpi	r24, 0x2D	; 45
    5070:	61 f0       	breq	.+24     	; 0x508a <vfprintf+0xb2>
    5072:	80 33       	cpi	r24, 0x30	; 48
    5074:	69 f4       	brne	.+26     	; 0x5090 <vfprintf+0xb8>
    5076:	23 2d       	mov	r18, r3
    5078:	21 60       	ori	r18, 0x01	; 1
    507a:	16 c0       	rjmp	.+44     	; 0x50a8 <vfprintf+0xd0>
    507c:	83 2d       	mov	r24, r3
    507e:	82 60       	ori	r24, 0x02	; 2
    5080:	38 2e       	mov	r3, r24
    5082:	e3 2d       	mov	r30, r3
    5084:	e4 60       	ori	r30, 0x04	; 4
    5086:	3e 2e       	mov	r3, r30
    5088:	2a c0       	rjmp	.+84     	; 0x50de <vfprintf+0x106>
    508a:	f3 2d       	mov	r31, r3
    508c:	f8 60       	ori	r31, 0x08	; 8
    508e:	1d c0       	rjmp	.+58     	; 0x50ca <vfprintf+0xf2>
    5090:	37 fc       	sbrc	r3, 7
    5092:	2d c0       	rjmp	.+90     	; 0x50ee <vfprintf+0x116>
    5094:	20 ed       	ldi	r18, 0xD0	; 208
    5096:	28 0f       	add	r18, r24
    5098:	2a 30       	cpi	r18, 0x0A	; 10
    509a:	40 f0       	brcs	.+16     	; 0x50ac <vfprintf+0xd4>
    509c:	8e 32       	cpi	r24, 0x2E	; 46
    509e:	b9 f4       	brne	.+46     	; 0x50ce <vfprintf+0xf6>
    50a0:	36 fc       	sbrc	r3, 6
    50a2:	75 c1       	rjmp	.+746    	; 0x538e <vfprintf+0x3b6>
    50a4:	23 2d       	mov	r18, r3
    50a6:	20 64       	ori	r18, 0x40	; 64
    50a8:	32 2e       	mov	r3, r18
    50aa:	19 c0       	rjmp	.+50     	; 0x50de <vfprintf+0x106>
    50ac:	36 fe       	sbrs	r3, 6
    50ae:	06 c0       	rjmp	.+12     	; 0x50bc <vfprintf+0xe4>
    50b0:	8a e0       	ldi	r24, 0x0A	; 10
    50b2:	98 9e       	mul	r9, r24
    50b4:	20 0d       	add	r18, r0
    50b6:	11 24       	eor	r1, r1
    50b8:	92 2e       	mov	r9, r18
    50ba:	11 c0       	rjmp	.+34     	; 0x50de <vfprintf+0x106>
    50bc:	ea e0       	ldi	r30, 0x0A	; 10
    50be:	2e 9e       	mul	r2, r30
    50c0:	20 0d       	add	r18, r0
    50c2:	11 24       	eor	r1, r1
    50c4:	22 2e       	mov	r2, r18
    50c6:	f3 2d       	mov	r31, r3
    50c8:	f0 62       	ori	r31, 0x20	; 32
    50ca:	3f 2e       	mov	r3, r31
    50cc:	08 c0       	rjmp	.+16     	; 0x50de <vfprintf+0x106>
    50ce:	8c 36       	cpi	r24, 0x6C	; 108
    50d0:	21 f4       	brne	.+8      	; 0x50da <vfprintf+0x102>
    50d2:	83 2d       	mov	r24, r3
    50d4:	80 68       	ori	r24, 0x80	; 128
    50d6:	38 2e       	mov	r3, r24
    50d8:	02 c0       	rjmp	.+4      	; 0x50de <vfprintf+0x106>
    50da:	88 36       	cpi	r24, 0x68	; 104
    50dc:	41 f4       	brne	.+16     	; 0x50ee <vfprintf+0x116>
    50de:	f7 01       	movw	r30, r14
    50e0:	93 fd       	sbrc	r25, 3
    50e2:	85 91       	lpm	r24, Z+
    50e4:	93 ff       	sbrs	r25, 3
    50e6:	81 91       	ld	r24, Z+
    50e8:	7f 01       	movw	r14, r30
    50ea:	81 11       	cpse	r24, r1
    50ec:	b3 cf       	rjmp	.-154    	; 0x5054 <vfprintf+0x7c>
    50ee:	98 2f       	mov	r25, r24
    50f0:	9f 7d       	andi	r25, 0xDF	; 223
    50f2:	95 54       	subi	r25, 0x45	; 69
    50f4:	93 30       	cpi	r25, 0x03	; 3
    50f6:	28 f4       	brcc	.+10     	; 0x5102 <vfprintf+0x12a>
    50f8:	0c 5f       	subi	r16, 0xFC	; 252
    50fa:	1f 4f       	sbci	r17, 0xFF	; 255
    50fc:	9f e3       	ldi	r25, 0x3F	; 63
    50fe:	99 83       	std	Y+1, r25	; 0x01
    5100:	0d c0       	rjmp	.+26     	; 0x511c <vfprintf+0x144>
    5102:	83 36       	cpi	r24, 0x63	; 99
    5104:	31 f0       	breq	.+12     	; 0x5112 <vfprintf+0x13a>
    5106:	83 37       	cpi	r24, 0x73	; 115
    5108:	71 f0       	breq	.+28     	; 0x5126 <vfprintf+0x14e>
    510a:	83 35       	cpi	r24, 0x53	; 83
    510c:	09 f0       	breq	.+2      	; 0x5110 <vfprintf+0x138>
    510e:	55 c0       	rjmp	.+170    	; 0x51ba <vfprintf+0x1e2>
    5110:	20 c0       	rjmp	.+64     	; 0x5152 <vfprintf+0x17a>
    5112:	f8 01       	movw	r30, r16
    5114:	80 81       	ld	r24, Z
    5116:	89 83       	std	Y+1, r24	; 0x01
    5118:	0e 5f       	subi	r16, 0xFE	; 254
    511a:	1f 4f       	sbci	r17, 0xFF	; 255
    511c:	88 24       	eor	r8, r8
    511e:	83 94       	inc	r8
    5120:	91 2c       	mov	r9, r1
    5122:	53 01       	movw	r10, r6
    5124:	12 c0       	rjmp	.+36     	; 0x514a <vfprintf+0x172>
    5126:	28 01       	movw	r4, r16
    5128:	f2 e0       	ldi	r31, 0x02	; 2
    512a:	4f 0e       	add	r4, r31
    512c:	51 1c       	adc	r5, r1
    512e:	f8 01       	movw	r30, r16
    5130:	a0 80       	ld	r10, Z
    5132:	b1 80       	ldd	r11, Z+1	; 0x01
    5134:	36 fe       	sbrs	r3, 6
    5136:	03 c0       	rjmp	.+6      	; 0x513e <vfprintf+0x166>
    5138:	69 2d       	mov	r22, r9
    513a:	70 e0       	ldi	r23, 0x00	; 0
    513c:	02 c0       	rjmp	.+4      	; 0x5142 <vfprintf+0x16a>
    513e:	6f ef       	ldi	r22, 0xFF	; 255
    5140:	7f ef       	ldi	r23, 0xFF	; 255
    5142:	c5 01       	movw	r24, r10
    5144:	63 d5       	rcall	.+2758   	; 0x5c0c <strnlen>
    5146:	4c 01       	movw	r8, r24
    5148:	82 01       	movw	r16, r4
    514a:	f3 2d       	mov	r31, r3
    514c:	ff 77       	andi	r31, 0x7F	; 127
    514e:	3f 2e       	mov	r3, r31
    5150:	15 c0       	rjmp	.+42     	; 0x517c <vfprintf+0x1a4>
    5152:	28 01       	movw	r4, r16
    5154:	22 e0       	ldi	r18, 0x02	; 2
    5156:	42 0e       	add	r4, r18
    5158:	51 1c       	adc	r5, r1
    515a:	f8 01       	movw	r30, r16
    515c:	a0 80       	ld	r10, Z
    515e:	b1 80       	ldd	r11, Z+1	; 0x01
    5160:	36 fe       	sbrs	r3, 6
    5162:	03 c0       	rjmp	.+6      	; 0x516a <vfprintf+0x192>
    5164:	69 2d       	mov	r22, r9
    5166:	70 e0       	ldi	r23, 0x00	; 0
    5168:	02 c0       	rjmp	.+4      	; 0x516e <vfprintf+0x196>
    516a:	6f ef       	ldi	r22, 0xFF	; 255
    516c:	7f ef       	ldi	r23, 0xFF	; 255
    516e:	c5 01       	movw	r24, r10
    5170:	3b d5       	rcall	.+2678   	; 0x5be8 <strnlen_P>
    5172:	4c 01       	movw	r8, r24
    5174:	f3 2d       	mov	r31, r3
    5176:	f0 68       	ori	r31, 0x80	; 128
    5178:	3f 2e       	mov	r3, r31
    517a:	82 01       	movw	r16, r4
    517c:	33 fc       	sbrc	r3, 3
    517e:	19 c0       	rjmp	.+50     	; 0x51b2 <vfprintf+0x1da>
    5180:	82 2d       	mov	r24, r2
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	88 16       	cp	r8, r24
    5186:	99 06       	cpc	r9, r25
    5188:	a0 f4       	brcc	.+40     	; 0x51b2 <vfprintf+0x1da>
    518a:	b6 01       	movw	r22, r12
    518c:	80 e2       	ldi	r24, 0x20	; 32
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	86 d5       	rcall	.+2828   	; 0x5c9e <fputc>
    5192:	2a 94       	dec	r2
    5194:	f5 cf       	rjmp	.-22     	; 0x5180 <vfprintf+0x1a8>
    5196:	f5 01       	movw	r30, r10
    5198:	37 fc       	sbrc	r3, 7
    519a:	85 91       	lpm	r24, Z+
    519c:	37 fe       	sbrs	r3, 7
    519e:	81 91       	ld	r24, Z+
    51a0:	5f 01       	movw	r10, r30
    51a2:	b6 01       	movw	r22, r12
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	7b d5       	rcall	.+2806   	; 0x5c9e <fputc>
    51a8:	21 10       	cpse	r2, r1
    51aa:	2a 94       	dec	r2
    51ac:	21 e0       	ldi	r18, 0x01	; 1
    51ae:	82 1a       	sub	r8, r18
    51b0:	91 08       	sbc	r9, r1
    51b2:	81 14       	cp	r8, r1
    51b4:	91 04       	cpc	r9, r1
    51b6:	79 f7       	brne	.-34     	; 0x5196 <vfprintf+0x1be>
    51b8:	e1 c0       	rjmp	.+450    	; 0x537c <vfprintf+0x3a4>
    51ba:	84 36       	cpi	r24, 0x64	; 100
    51bc:	11 f0       	breq	.+4      	; 0x51c2 <vfprintf+0x1ea>
    51be:	89 36       	cpi	r24, 0x69	; 105
    51c0:	39 f5       	brne	.+78     	; 0x5210 <vfprintf+0x238>
    51c2:	f8 01       	movw	r30, r16
    51c4:	37 fe       	sbrs	r3, 7
    51c6:	07 c0       	rjmp	.+14     	; 0x51d6 <vfprintf+0x1fe>
    51c8:	60 81       	ld	r22, Z
    51ca:	71 81       	ldd	r23, Z+1	; 0x01
    51cc:	82 81       	ldd	r24, Z+2	; 0x02
    51ce:	93 81       	ldd	r25, Z+3	; 0x03
    51d0:	0c 5f       	subi	r16, 0xFC	; 252
    51d2:	1f 4f       	sbci	r17, 0xFF	; 255
    51d4:	08 c0       	rjmp	.+16     	; 0x51e6 <vfprintf+0x20e>
    51d6:	60 81       	ld	r22, Z
    51d8:	71 81       	ldd	r23, Z+1	; 0x01
    51da:	07 2e       	mov	r0, r23
    51dc:	00 0c       	add	r0, r0
    51de:	88 0b       	sbc	r24, r24
    51e0:	99 0b       	sbc	r25, r25
    51e2:	0e 5f       	subi	r16, 0xFE	; 254
    51e4:	1f 4f       	sbci	r17, 0xFF	; 255
    51e6:	f3 2d       	mov	r31, r3
    51e8:	ff 76       	andi	r31, 0x6F	; 111
    51ea:	3f 2e       	mov	r3, r31
    51ec:	97 ff       	sbrs	r25, 7
    51ee:	09 c0       	rjmp	.+18     	; 0x5202 <vfprintf+0x22a>
    51f0:	90 95       	com	r25
    51f2:	80 95       	com	r24
    51f4:	70 95       	com	r23
    51f6:	61 95       	neg	r22
    51f8:	7f 4f       	sbci	r23, 0xFF	; 255
    51fa:	8f 4f       	sbci	r24, 0xFF	; 255
    51fc:	9f 4f       	sbci	r25, 0xFF	; 255
    51fe:	f0 68       	ori	r31, 0x80	; 128
    5200:	3f 2e       	mov	r3, r31
    5202:	2a e0       	ldi	r18, 0x0A	; 10
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	a3 01       	movw	r20, r6
    5208:	9f d5       	rcall	.+2878   	; 0x5d48 <__ultoa_invert>
    520a:	88 2e       	mov	r8, r24
    520c:	86 18       	sub	r8, r6
    520e:	44 c0       	rjmp	.+136    	; 0x5298 <vfprintf+0x2c0>
    5210:	85 37       	cpi	r24, 0x75	; 117
    5212:	31 f4       	brne	.+12     	; 0x5220 <vfprintf+0x248>
    5214:	23 2d       	mov	r18, r3
    5216:	2f 7e       	andi	r18, 0xEF	; 239
    5218:	b2 2e       	mov	r11, r18
    521a:	2a e0       	ldi	r18, 0x0A	; 10
    521c:	30 e0       	ldi	r19, 0x00	; 0
    521e:	25 c0       	rjmp	.+74     	; 0x526a <vfprintf+0x292>
    5220:	93 2d       	mov	r25, r3
    5222:	99 7f       	andi	r25, 0xF9	; 249
    5224:	b9 2e       	mov	r11, r25
    5226:	8f 36       	cpi	r24, 0x6F	; 111
    5228:	c1 f0       	breq	.+48     	; 0x525a <vfprintf+0x282>
    522a:	18 f4       	brcc	.+6      	; 0x5232 <vfprintf+0x25a>
    522c:	88 35       	cpi	r24, 0x58	; 88
    522e:	79 f0       	breq	.+30     	; 0x524e <vfprintf+0x276>
    5230:	ae c0       	rjmp	.+348    	; 0x538e <vfprintf+0x3b6>
    5232:	80 37       	cpi	r24, 0x70	; 112
    5234:	19 f0       	breq	.+6      	; 0x523c <vfprintf+0x264>
    5236:	88 37       	cpi	r24, 0x78	; 120
    5238:	21 f0       	breq	.+8      	; 0x5242 <vfprintf+0x26a>
    523a:	a9 c0       	rjmp	.+338    	; 0x538e <vfprintf+0x3b6>
    523c:	e9 2f       	mov	r30, r25
    523e:	e0 61       	ori	r30, 0x10	; 16
    5240:	be 2e       	mov	r11, r30
    5242:	b4 fe       	sbrs	r11, 4
    5244:	0d c0       	rjmp	.+26     	; 0x5260 <vfprintf+0x288>
    5246:	fb 2d       	mov	r31, r11
    5248:	f4 60       	ori	r31, 0x04	; 4
    524a:	bf 2e       	mov	r11, r31
    524c:	09 c0       	rjmp	.+18     	; 0x5260 <vfprintf+0x288>
    524e:	34 fe       	sbrs	r3, 4
    5250:	0a c0       	rjmp	.+20     	; 0x5266 <vfprintf+0x28e>
    5252:	29 2f       	mov	r18, r25
    5254:	26 60       	ori	r18, 0x06	; 6
    5256:	b2 2e       	mov	r11, r18
    5258:	06 c0       	rjmp	.+12     	; 0x5266 <vfprintf+0x28e>
    525a:	28 e0       	ldi	r18, 0x08	; 8
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	05 c0       	rjmp	.+10     	; 0x526a <vfprintf+0x292>
    5260:	20 e1       	ldi	r18, 0x10	; 16
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	02 c0       	rjmp	.+4      	; 0x526a <vfprintf+0x292>
    5266:	20 e1       	ldi	r18, 0x10	; 16
    5268:	32 e0       	ldi	r19, 0x02	; 2
    526a:	f8 01       	movw	r30, r16
    526c:	b7 fe       	sbrs	r11, 7
    526e:	07 c0       	rjmp	.+14     	; 0x527e <vfprintf+0x2a6>
    5270:	60 81       	ld	r22, Z
    5272:	71 81       	ldd	r23, Z+1	; 0x01
    5274:	82 81       	ldd	r24, Z+2	; 0x02
    5276:	93 81       	ldd	r25, Z+3	; 0x03
    5278:	0c 5f       	subi	r16, 0xFC	; 252
    527a:	1f 4f       	sbci	r17, 0xFF	; 255
    527c:	06 c0       	rjmp	.+12     	; 0x528a <vfprintf+0x2b2>
    527e:	60 81       	ld	r22, Z
    5280:	71 81       	ldd	r23, Z+1	; 0x01
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	0e 5f       	subi	r16, 0xFE	; 254
    5288:	1f 4f       	sbci	r17, 0xFF	; 255
    528a:	a3 01       	movw	r20, r6
    528c:	5d d5       	rcall	.+2746   	; 0x5d48 <__ultoa_invert>
    528e:	88 2e       	mov	r8, r24
    5290:	86 18       	sub	r8, r6
    5292:	fb 2d       	mov	r31, r11
    5294:	ff 77       	andi	r31, 0x7F	; 127
    5296:	3f 2e       	mov	r3, r31
    5298:	36 fe       	sbrs	r3, 6
    529a:	0d c0       	rjmp	.+26     	; 0x52b6 <vfprintf+0x2de>
    529c:	23 2d       	mov	r18, r3
    529e:	2e 7f       	andi	r18, 0xFE	; 254
    52a0:	a2 2e       	mov	r10, r18
    52a2:	89 14       	cp	r8, r9
    52a4:	58 f4       	brcc	.+22     	; 0x52bc <vfprintf+0x2e4>
    52a6:	34 fe       	sbrs	r3, 4
    52a8:	0b c0       	rjmp	.+22     	; 0x52c0 <vfprintf+0x2e8>
    52aa:	32 fc       	sbrc	r3, 2
    52ac:	09 c0       	rjmp	.+18     	; 0x52c0 <vfprintf+0x2e8>
    52ae:	83 2d       	mov	r24, r3
    52b0:	8e 7e       	andi	r24, 0xEE	; 238
    52b2:	a8 2e       	mov	r10, r24
    52b4:	05 c0       	rjmp	.+10     	; 0x52c0 <vfprintf+0x2e8>
    52b6:	b8 2c       	mov	r11, r8
    52b8:	a3 2c       	mov	r10, r3
    52ba:	03 c0       	rjmp	.+6      	; 0x52c2 <vfprintf+0x2ea>
    52bc:	b8 2c       	mov	r11, r8
    52be:	01 c0       	rjmp	.+2      	; 0x52c2 <vfprintf+0x2ea>
    52c0:	b9 2c       	mov	r11, r9
    52c2:	a4 fe       	sbrs	r10, 4
    52c4:	0f c0       	rjmp	.+30     	; 0x52e4 <vfprintf+0x30c>
    52c6:	fe 01       	movw	r30, r28
    52c8:	e8 0d       	add	r30, r8
    52ca:	f1 1d       	adc	r31, r1
    52cc:	80 81       	ld	r24, Z
    52ce:	80 33       	cpi	r24, 0x30	; 48
    52d0:	21 f4       	brne	.+8      	; 0x52da <vfprintf+0x302>
    52d2:	9a 2d       	mov	r25, r10
    52d4:	99 7e       	andi	r25, 0xE9	; 233
    52d6:	a9 2e       	mov	r10, r25
    52d8:	09 c0       	rjmp	.+18     	; 0x52ec <vfprintf+0x314>
    52da:	a2 fe       	sbrs	r10, 2
    52dc:	06 c0       	rjmp	.+12     	; 0x52ea <vfprintf+0x312>
    52de:	b3 94       	inc	r11
    52e0:	b3 94       	inc	r11
    52e2:	04 c0       	rjmp	.+8      	; 0x52ec <vfprintf+0x314>
    52e4:	8a 2d       	mov	r24, r10
    52e6:	86 78       	andi	r24, 0x86	; 134
    52e8:	09 f0       	breq	.+2      	; 0x52ec <vfprintf+0x314>
    52ea:	b3 94       	inc	r11
    52ec:	a3 fc       	sbrc	r10, 3
    52ee:	10 c0       	rjmp	.+32     	; 0x5310 <vfprintf+0x338>
    52f0:	a0 fe       	sbrs	r10, 0
    52f2:	06 c0       	rjmp	.+12     	; 0x5300 <vfprintf+0x328>
    52f4:	b2 14       	cp	r11, r2
    52f6:	80 f4       	brcc	.+32     	; 0x5318 <vfprintf+0x340>
    52f8:	28 0c       	add	r2, r8
    52fa:	92 2c       	mov	r9, r2
    52fc:	9b 18       	sub	r9, r11
    52fe:	0d c0       	rjmp	.+26     	; 0x531a <vfprintf+0x342>
    5300:	b2 14       	cp	r11, r2
    5302:	58 f4       	brcc	.+22     	; 0x531a <vfprintf+0x342>
    5304:	b6 01       	movw	r22, r12
    5306:	80 e2       	ldi	r24, 0x20	; 32
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	c9 d4       	rcall	.+2450   	; 0x5c9e <fputc>
    530c:	b3 94       	inc	r11
    530e:	f8 cf       	rjmp	.-16     	; 0x5300 <vfprintf+0x328>
    5310:	b2 14       	cp	r11, r2
    5312:	18 f4       	brcc	.+6      	; 0x531a <vfprintf+0x342>
    5314:	2b 18       	sub	r2, r11
    5316:	02 c0       	rjmp	.+4      	; 0x531c <vfprintf+0x344>
    5318:	98 2c       	mov	r9, r8
    531a:	21 2c       	mov	r2, r1
    531c:	a4 fe       	sbrs	r10, 4
    531e:	0f c0       	rjmp	.+30     	; 0x533e <vfprintf+0x366>
    5320:	b6 01       	movw	r22, r12
    5322:	80 e3       	ldi	r24, 0x30	; 48
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	bb d4       	rcall	.+2422   	; 0x5c9e <fputc>
    5328:	a2 fe       	sbrs	r10, 2
    532a:	16 c0       	rjmp	.+44     	; 0x5358 <vfprintf+0x380>
    532c:	a1 fc       	sbrc	r10, 1
    532e:	03 c0       	rjmp	.+6      	; 0x5336 <vfprintf+0x35e>
    5330:	88 e7       	ldi	r24, 0x78	; 120
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	02 c0       	rjmp	.+4      	; 0x533a <vfprintf+0x362>
    5336:	88 e5       	ldi	r24, 0x58	; 88
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	b6 01       	movw	r22, r12
    533c:	0c c0       	rjmp	.+24     	; 0x5356 <vfprintf+0x37e>
    533e:	8a 2d       	mov	r24, r10
    5340:	86 78       	andi	r24, 0x86	; 134
    5342:	51 f0       	breq	.+20     	; 0x5358 <vfprintf+0x380>
    5344:	a1 fe       	sbrs	r10, 1
    5346:	02 c0       	rjmp	.+4      	; 0x534c <vfprintf+0x374>
    5348:	8b e2       	ldi	r24, 0x2B	; 43
    534a:	01 c0       	rjmp	.+2      	; 0x534e <vfprintf+0x376>
    534c:	80 e2       	ldi	r24, 0x20	; 32
    534e:	a7 fc       	sbrc	r10, 7
    5350:	8d e2       	ldi	r24, 0x2D	; 45
    5352:	b6 01       	movw	r22, r12
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	a3 d4       	rcall	.+2374   	; 0x5c9e <fputc>
    5358:	89 14       	cp	r8, r9
    535a:	30 f4       	brcc	.+12     	; 0x5368 <vfprintf+0x390>
    535c:	b6 01       	movw	r22, r12
    535e:	80 e3       	ldi	r24, 0x30	; 48
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	9d d4       	rcall	.+2362   	; 0x5c9e <fputc>
    5364:	9a 94       	dec	r9
    5366:	f8 cf       	rjmp	.-16     	; 0x5358 <vfprintf+0x380>
    5368:	8a 94       	dec	r8
    536a:	f3 01       	movw	r30, r6
    536c:	e8 0d       	add	r30, r8
    536e:	f1 1d       	adc	r31, r1
    5370:	80 81       	ld	r24, Z
    5372:	b6 01       	movw	r22, r12
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	93 d4       	rcall	.+2342   	; 0x5c9e <fputc>
    5378:	81 10       	cpse	r8, r1
    537a:	f6 cf       	rjmp	.-20     	; 0x5368 <vfprintf+0x390>
    537c:	22 20       	and	r2, r2
    537e:	09 f4       	brne	.+2      	; 0x5382 <vfprintf+0x3aa>
    5380:	4e ce       	rjmp	.-868    	; 0x501e <vfprintf+0x46>
    5382:	b6 01       	movw	r22, r12
    5384:	80 e2       	ldi	r24, 0x20	; 32
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	8a d4       	rcall	.+2324   	; 0x5c9e <fputc>
    538a:	2a 94       	dec	r2
    538c:	f7 cf       	rjmp	.-18     	; 0x537c <vfprintf+0x3a4>
    538e:	f6 01       	movw	r30, r12
    5390:	86 81       	ldd	r24, Z+6	; 0x06
    5392:	97 81       	ldd	r25, Z+7	; 0x07
    5394:	02 c0       	rjmp	.+4      	; 0x539a <vfprintf+0x3c2>
    5396:	8f ef       	ldi	r24, 0xFF	; 255
    5398:	9f ef       	ldi	r25, 0xFF	; 255
    539a:	2b 96       	adiw	r28, 0x0b	; 11
    539c:	cd bf       	out	0x3d, r28	; 61
    539e:	de bf       	out	0x3e, r29	; 62
    53a0:	df 91       	pop	r29
    53a2:	cf 91       	pop	r28
    53a4:	1f 91       	pop	r17
    53a6:	0f 91       	pop	r16
    53a8:	ff 90       	pop	r15
    53aa:	ef 90       	pop	r14
    53ac:	df 90       	pop	r13
    53ae:	cf 90       	pop	r12
    53b0:	bf 90       	pop	r11
    53b2:	af 90       	pop	r10
    53b4:	9f 90       	pop	r9
    53b6:	8f 90       	pop	r8
    53b8:	7f 90       	pop	r7
    53ba:	6f 90       	pop	r6
    53bc:	5f 90       	pop	r5
    53be:	4f 90       	pop	r4
    53c0:	3f 90       	pop	r3
    53c2:	2f 90       	pop	r2
    53c4:	08 95       	ret

000053c6 <putval>:
    53c6:	20 fd       	sbrc	r18, 0
    53c8:	09 c0       	rjmp	.+18     	; 0x53dc <putval+0x16>
    53ca:	fc 01       	movw	r30, r24
    53cc:	23 fd       	sbrc	r18, 3
    53ce:	05 c0       	rjmp	.+10     	; 0x53da <putval+0x14>
    53d0:	22 ff       	sbrs	r18, 2
    53d2:	02 c0       	rjmp	.+4      	; 0x53d8 <putval+0x12>
    53d4:	73 83       	std	Z+3, r23	; 0x03
    53d6:	62 83       	std	Z+2, r22	; 0x02
    53d8:	51 83       	std	Z+1, r21	; 0x01
    53da:	40 83       	st	Z, r20
    53dc:	08 95       	ret

000053de <mulacc>:
    53de:	44 fd       	sbrc	r20, 4
    53e0:	17 c0       	rjmp	.+46     	; 0x5410 <mulacc+0x32>
    53e2:	46 fd       	sbrc	r20, 6
    53e4:	17 c0       	rjmp	.+46     	; 0x5414 <mulacc+0x36>
    53e6:	ab 01       	movw	r20, r22
    53e8:	bc 01       	movw	r22, r24
    53ea:	da 01       	movw	r26, r20
    53ec:	fb 01       	movw	r30, r22
    53ee:	aa 0f       	add	r26, r26
    53f0:	bb 1f       	adc	r27, r27
    53f2:	ee 1f       	adc	r30, r30
    53f4:	ff 1f       	adc	r31, r31
    53f6:	10 94       	com	r1
    53f8:	d1 f7       	brne	.-12     	; 0x53ee <mulacc+0x10>
    53fa:	4a 0f       	add	r20, r26
    53fc:	5b 1f       	adc	r21, r27
    53fe:	6e 1f       	adc	r22, r30
    5400:	7f 1f       	adc	r23, r31
    5402:	cb 01       	movw	r24, r22
    5404:	ba 01       	movw	r22, r20
    5406:	66 0f       	add	r22, r22
    5408:	77 1f       	adc	r23, r23
    540a:	88 1f       	adc	r24, r24
    540c:	99 1f       	adc	r25, r25
    540e:	09 c0       	rjmp	.+18     	; 0x5422 <mulacc+0x44>
    5410:	33 e0       	ldi	r19, 0x03	; 3
    5412:	01 c0       	rjmp	.+2      	; 0x5416 <mulacc+0x38>
    5414:	34 e0       	ldi	r19, 0x04	; 4
    5416:	66 0f       	add	r22, r22
    5418:	77 1f       	adc	r23, r23
    541a:	88 1f       	adc	r24, r24
    541c:	99 1f       	adc	r25, r25
    541e:	31 50       	subi	r19, 0x01	; 1
    5420:	d1 f7       	brne	.-12     	; 0x5416 <mulacc+0x38>
    5422:	62 0f       	add	r22, r18
    5424:	71 1d       	adc	r23, r1
    5426:	81 1d       	adc	r24, r1
    5428:	91 1d       	adc	r25, r1
    542a:	08 95       	ret

0000542c <skip_spaces>:
    542c:	0f 93       	push	r16
    542e:	1f 93       	push	r17
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
    5434:	8c 01       	movw	r16, r24
    5436:	c8 01       	movw	r24, r16
    5438:	f4 d3       	rcall	.+2024   	; 0x5c22 <fgetc>
    543a:	ec 01       	movw	r28, r24
    543c:	97 fd       	sbrc	r25, 7
    543e:	06 c0       	rjmp	.+12     	; 0x544c <skip_spaces+0x20>
    5440:	c0 d3       	rcall	.+1920   	; 0x5bc2 <isspace>
    5442:	89 2b       	or	r24, r25
    5444:	c1 f7       	brne	.-16     	; 0x5436 <skip_spaces+0xa>
    5446:	b8 01       	movw	r22, r16
    5448:	ce 01       	movw	r24, r28
    544a:	65 d4       	rcall	.+2250   	; 0x5d16 <ungetc>
    544c:	ce 01       	movw	r24, r28
    544e:	df 91       	pop	r29
    5450:	cf 91       	pop	r28
    5452:	1f 91       	pop	r17
    5454:	0f 91       	pop	r16
    5456:	08 95       	ret

00005458 <conv_int>:
    5458:	8f 92       	push	r8
    545a:	9f 92       	push	r9
    545c:	af 92       	push	r10
    545e:	bf 92       	push	r11
    5460:	ef 92       	push	r14
    5462:	ff 92       	push	r15
    5464:	0f 93       	push	r16
    5466:	1f 93       	push	r17
    5468:	cf 93       	push	r28
    546a:	df 93       	push	r29
    546c:	8c 01       	movw	r16, r24
    546e:	d6 2f       	mov	r29, r22
    5470:	7a 01       	movw	r14, r20
    5472:	b2 2e       	mov	r11, r18
    5474:	d6 d3       	rcall	.+1964   	; 0x5c22 <fgetc>
    5476:	9c 01       	movw	r18, r24
    5478:	33 27       	eor	r19, r19
    547a:	2b 32       	cpi	r18, 0x2B	; 43
    547c:	31 05       	cpc	r19, r1
    547e:	31 f0       	breq	.+12     	; 0x548c <conv_int+0x34>
    5480:	2d 32       	cpi	r18, 0x2D	; 45
    5482:	31 05       	cpc	r19, r1
    5484:	59 f4       	brne	.+22     	; 0x549c <conv_int+0x44>
    5486:	8b 2d       	mov	r24, r11
    5488:	80 68       	ori	r24, 0x80	; 128
    548a:	b8 2e       	mov	r11, r24
    548c:	d1 50       	subi	r29, 0x01	; 1
    548e:	11 f4       	brne	.+4      	; 0x5494 <conv_int+0x3c>
    5490:	80 e0       	ldi	r24, 0x00	; 0
    5492:	61 c0       	rjmp	.+194    	; 0x5556 <conv_int+0xfe>
    5494:	c8 01       	movw	r24, r16
    5496:	c5 d3       	rcall	.+1930   	; 0x5c22 <fgetc>
    5498:	97 fd       	sbrc	r25, 7
    549a:	fa cf       	rjmp	.-12     	; 0x5490 <conv_int+0x38>
    549c:	cb 2d       	mov	r28, r11
    549e:	cd 7f       	andi	r28, 0xFD	; 253
    54a0:	2b 2d       	mov	r18, r11
    54a2:	20 73       	andi	r18, 0x30	; 48
    54a4:	f9 f4       	brne	.+62     	; 0x54e4 <conv_int+0x8c>
    54a6:	80 33       	cpi	r24, 0x30	; 48
    54a8:	e9 f4       	brne	.+58     	; 0x54e4 <conv_int+0x8c>
    54aa:	aa 24       	eor	r10, r10
    54ac:	aa 94       	dec	r10
    54ae:	ad 0e       	add	r10, r29
    54b0:	09 f4       	brne	.+2      	; 0x54b4 <conv_int+0x5c>
    54b2:	3e c0       	rjmp	.+124    	; 0x5530 <conv_int+0xd8>
    54b4:	c8 01       	movw	r24, r16
    54b6:	b5 d3       	rcall	.+1898   	; 0x5c22 <fgetc>
    54b8:	97 fd       	sbrc	r25, 7
    54ba:	3a c0       	rjmp	.+116    	; 0x5530 <conv_int+0xd8>
    54bc:	9c 01       	movw	r18, r24
    54be:	2f 7d       	andi	r18, 0xDF	; 223
    54c0:	33 27       	eor	r19, r19
    54c2:	28 35       	cpi	r18, 0x58	; 88
    54c4:	31 05       	cpc	r19, r1
    54c6:	41 f4       	brne	.+16     	; 0x54d8 <conv_int+0x80>
    54c8:	c2 64       	ori	r28, 0x42	; 66
    54ca:	d2 50       	subi	r29, 0x02	; 2
    54cc:	89 f1       	breq	.+98     	; 0x5530 <conv_int+0xd8>
    54ce:	c8 01       	movw	r24, r16
    54d0:	a8 d3       	rcall	.+1872   	; 0x5c22 <fgetc>
    54d2:	97 ff       	sbrs	r25, 7
    54d4:	07 c0       	rjmp	.+14     	; 0x54e4 <conv_int+0x8c>
    54d6:	2c c0       	rjmp	.+88     	; 0x5530 <conv_int+0xd8>
    54d8:	b6 fe       	sbrs	r11, 6
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <conv_int+0x88>
    54dc:	c2 60       	ori	r28, 0x02	; 2
    54de:	01 c0       	rjmp	.+2      	; 0x54e2 <conv_int+0x8a>
    54e0:	c2 61       	ori	r28, 0x12	; 18
    54e2:	da 2d       	mov	r29, r10
    54e4:	81 2c       	mov	r8, r1
    54e6:	91 2c       	mov	r9, r1
    54e8:	54 01       	movw	r10, r8
    54ea:	20 ed       	ldi	r18, 0xD0	; 208
    54ec:	28 0f       	add	r18, r24
    54ee:	28 30       	cpi	r18, 0x08	; 8
    54f0:	78 f0       	brcs	.+30     	; 0x5510 <conv_int+0xb8>
    54f2:	c4 ff       	sbrs	r28, 4
    54f4:	03 c0       	rjmp	.+6      	; 0x54fc <conv_int+0xa4>
    54f6:	b8 01       	movw	r22, r16
    54f8:	0e d4       	rcall	.+2076   	; 0x5d16 <ungetc>
    54fa:	17 c0       	rjmp	.+46     	; 0x552a <conv_int+0xd2>
    54fc:	2a 30       	cpi	r18, 0x0A	; 10
    54fe:	40 f0       	brcs	.+16     	; 0x5510 <conv_int+0xb8>
    5500:	c6 ff       	sbrs	r28, 6
    5502:	f9 cf       	rjmp	.-14     	; 0x54f6 <conv_int+0x9e>
    5504:	2f 7d       	andi	r18, 0xDF	; 223
    5506:	3f ee       	ldi	r19, 0xEF	; 239
    5508:	32 0f       	add	r19, r18
    550a:	36 30       	cpi	r19, 0x06	; 6
    550c:	a0 f7       	brcc	.-24     	; 0x54f6 <conv_int+0x9e>
    550e:	27 50       	subi	r18, 0x07	; 7
    5510:	4c 2f       	mov	r20, r28
    5512:	c5 01       	movw	r24, r10
    5514:	b4 01       	movw	r22, r8
    5516:	63 df       	rcall	.-314    	; 0x53de <mulacc>
    5518:	4b 01       	movw	r8, r22
    551a:	5c 01       	movw	r10, r24
    551c:	c2 60       	ori	r28, 0x02	; 2
    551e:	d1 50       	subi	r29, 0x01	; 1
    5520:	51 f0       	breq	.+20     	; 0x5536 <conv_int+0xde>
    5522:	c8 01       	movw	r24, r16
    5524:	7e d3       	rcall	.+1788   	; 0x5c22 <fgetc>
    5526:	97 ff       	sbrs	r25, 7
    5528:	e0 cf       	rjmp	.-64     	; 0x54ea <conv_int+0x92>
    552a:	c1 fd       	sbrc	r28, 1
    552c:	04 c0       	rjmp	.+8      	; 0x5536 <conv_int+0xde>
    552e:	b0 cf       	rjmp	.-160    	; 0x5490 <conv_int+0x38>
    5530:	81 2c       	mov	r8, r1
    5532:	91 2c       	mov	r9, r1
    5534:	54 01       	movw	r10, r8
    5536:	c7 ff       	sbrs	r28, 7
    5538:	08 c0       	rjmp	.+16     	; 0x554a <conv_int+0xf2>
    553a:	b0 94       	com	r11
    553c:	a0 94       	com	r10
    553e:	90 94       	com	r9
    5540:	80 94       	com	r8
    5542:	81 1c       	adc	r8, r1
    5544:	91 1c       	adc	r9, r1
    5546:	a1 1c       	adc	r10, r1
    5548:	b1 1c       	adc	r11, r1
    554a:	2c 2f       	mov	r18, r28
    554c:	b5 01       	movw	r22, r10
    554e:	a4 01       	movw	r20, r8
    5550:	c7 01       	movw	r24, r14
    5552:	39 df       	rcall	.-398    	; 0x53c6 <putval>
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	df 91       	pop	r29
    5558:	cf 91       	pop	r28
    555a:	1f 91       	pop	r17
    555c:	0f 91       	pop	r16
    555e:	ff 90       	pop	r15
    5560:	ef 90       	pop	r14
    5562:	bf 90       	pop	r11
    5564:	af 90       	pop	r10
    5566:	9f 90       	pop	r9
    5568:	8f 90       	pop	r8
    556a:	08 95       	ret

0000556c <conv_brk>:
    556c:	5f 92       	push	r5
    556e:	6f 92       	push	r6
    5570:	7f 92       	push	r7
    5572:	8f 92       	push	r8
    5574:	9f 92       	push	r9
    5576:	af 92       	push	r10
    5578:	bf 92       	push	r11
    557a:	cf 92       	push	r12
    557c:	df 92       	push	r13
    557e:	ef 92       	push	r14
    5580:	ff 92       	push	r15
    5582:	0f 93       	push	r16
    5584:	1f 93       	push	r17
    5586:	cf 93       	push	r28
    5588:	df 93       	push	r29
    558a:	cd b7       	in	r28, 0x3d	; 61
    558c:	de b7       	in	r29, 0x3e	; 62
    558e:	a0 97       	sbiw	r28, 0x20	; 32
    5590:	cd bf       	out	0x3d, r28	; 61
    5592:	de bf       	out	0x3e, r29	; 62
    5594:	5c 01       	movw	r10, r24
    5596:	96 2e       	mov	r9, r22
    5598:	7a 01       	movw	r14, r20
    559a:	f9 01       	movw	r30, r18
    559c:	8e 01       	movw	r16, r28
    559e:	0f 5f       	subi	r16, 0xFF	; 255
    55a0:	1f 4f       	sbci	r17, 0xFF	; 255
    55a2:	68 01       	movw	r12, r16
    55a4:	80 e2       	ldi	r24, 0x20	; 32
    55a6:	d8 01       	movw	r26, r16
    55a8:	1d 92       	st	X+, r1
    55aa:	8a 95       	dec	r24
    55ac:	e9 f7       	brne	.-6      	; 0x55a8 <conv_brk+0x3c>
    55ae:	d5 01       	movw	r26, r10
    55b0:	13 96       	adiw	r26, 0x03	; 3
    55b2:	8c 90       	ld	r8, X
    55b4:	80 e0       	ldi	r24, 0x00	; 0
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	61 2c       	mov	r6, r1
    55ba:	71 2c       	mov	r7, r1
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	61 e0       	ldi	r22, 0x01	; 1
    55c0:	70 e0       	ldi	r23, 0x00	; 0
    55c2:	83 fc       	sbrc	r8, 3
    55c4:	25 91       	lpm	r18, Z+
    55c6:	83 fe       	sbrs	r8, 3
    55c8:	21 91       	ld	r18, Z+
    55ca:	8f 01       	movw	r16, r30
    55cc:	52 2e       	mov	r5, r18
    55ce:	21 11       	cpse	r18, r1
    55d0:	03 c0       	rjmp	.+6      	; 0x55d8 <conv_brk+0x6c>
    55d2:	80 e0       	ldi	r24, 0x00	; 0
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	90 c0       	rjmp	.+288    	; 0x56f8 <conv_brk+0x18c>
    55d8:	2e 35       	cpi	r18, 0x5E	; 94
    55da:	11 f4       	brne	.+4      	; 0x55e0 <conv_brk+0x74>
    55dc:	00 97       	sbiw	r24, 0x00	; 0
    55de:	51 f1       	breq	.+84     	; 0x5634 <conv_brk+0xc8>
    55e0:	43 2f       	mov	r20, r19
    55e2:	50 e0       	ldi	r21, 0x00	; 0
    55e4:	48 17       	cp	r20, r24
    55e6:	59 07       	cpc	r21, r25
    55e8:	3c f4       	brge	.+14     	; 0x55f8 <conv_brk+0x8c>
    55ea:	2d 35       	cpi	r18, 0x5D	; 93
    55ec:	59 f1       	breq	.+86     	; 0x5644 <conv_brk+0xd8>
    55ee:	2d 32       	cpi	r18, 0x2D	; 45
    55f0:	19 f4       	brne	.+6      	; 0x55f8 <conv_brk+0x8c>
    55f2:	77 20       	and	r7, r7
    55f4:	09 f1       	breq	.+66     	; 0x5638 <conv_brk+0xcc>
    55f6:	03 c0       	rjmp	.+6      	; 0x55fe <conv_brk+0x92>
    55f8:	77 20       	and	r7, r7
    55fa:	09 f4       	brne	.+2      	; 0x55fe <conv_brk+0x92>
    55fc:	68 c0       	rjmp	.+208    	; 0x56ce <conv_brk+0x162>
    55fe:	45 2d       	mov	r20, r5
    5600:	46 95       	lsr	r20
    5602:	46 95       	lsr	r20
    5604:	46 95       	lsr	r20
    5606:	d6 01       	movw	r26, r12
    5608:	a4 0f       	add	r26, r20
    560a:	b1 1d       	adc	r27, r1
    560c:	45 2d       	mov	r20, r5
    560e:	47 70       	andi	r20, 0x07	; 7
    5610:	8b 01       	movw	r16, r22
    5612:	02 c0       	rjmp	.+4      	; 0x5618 <conv_brk+0xac>
    5614:	00 0f       	add	r16, r16
    5616:	11 1f       	adc	r17, r17
    5618:	4a 95       	dec	r20
    561a:	e2 f7       	brpl	.-8      	; 0x5614 <conv_brk+0xa8>
    561c:	a8 01       	movw	r20, r16
    561e:	5c 91       	ld	r21, X
    5620:	45 2b       	or	r20, r21
    5622:	4c 93       	st	X, r20
    5624:	65 14       	cp	r6, r5
    5626:	59 f0       	breq	.+22     	; 0x563e <conv_brk+0xd2>
    5628:	56 14       	cp	r5, r6
    562a:	10 f4       	brcc	.+4      	; 0x5630 <conv_brk+0xc4>
    562c:	53 94       	inc	r5
    562e:	e7 cf       	rjmp	.-50     	; 0x55fe <conv_brk+0x92>
    5630:	5a 94       	dec	r5
    5632:	e5 cf       	rjmp	.-54     	; 0x55fe <conv_brk+0x92>
    5634:	31 e0       	ldi	r19, 0x01	; 1
    5636:	04 c0       	rjmp	.+8      	; 0x5640 <conv_brk+0xd4>
    5638:	77 24       	eor	r7, r7
    563a:	73 94       	inc	r7
    563c:	01 c0       	rjmp	.+2      	; 0x5640 <conv_brk+0xd4>
    563e:	71 2c       	mov	r7, r1
    5640:	01 96       	adiw	r24, 0x01	; 1
    5642:	bf cf       	rjmp	.-130    	; 0x55c2 <conv_brk+0x56>
    5644:	77 20       	and	r7, r7
    5646:	19 f0       	breq	.+6      	; 0x564e <conv_brk+0xe2>
    5648:	8e 81       	ldd	r24, Y+6	; 0x06
    564a:	80 62       	ori	r24, 0x20	; 32
    564c:	8e 83       	std	Y+6, r24	; 0x06
    564e:	31 11       	cpse	r19, r1
    5650:	03 c0       	rjmp	.+6      	; 0x5658 <conv_brk+0xec>
    5652:	88 24       	eor	r8, r8
    5654:	83 94       	inc	r8
    5656:	17 c0       	rjmp	.+46     	; 0x5686 <conv_brk+0x11a>
    5658:	f6 01       	movw	r30, r12
    565a:	9e 01       	movw	r18, r28
    565c:	2f 5d       	subi	r18, 0xDF	; 223
    565e:	3f 4f       	sbci	r19, 0xFF	; 255
    5660:	80 81       	ld	r24, Z
    5662:	80 95       	com	r24
    5664:	81 93       	st	Z+, r24
    5666:	2e 17       	cp	r18, r30
    5668:	3f 07       	cpc	r19, r31
    566a:	d1 f7       	brne	.-12     	; 0x5660 <conv_brk+0xf4>
    566c:	f2 cf       	rjmp	.-28     	; 0x5652 <conv_brk+0xe6>
    566e:	e1 14       	cp	r14, r1
    5670:	f1 04       	cpc	r15, r1
    5672:	29 f0       	breq	.+10     	; 0x567e <conv_brk+0x112>
    5674:	d7 01       	movw	r26, r14
    5676:	8c 93       	st	X, r24
    5678:	f7 01       	movw	r30, r14
    567a:	31 96       	adiw	r30, 0x01	; 1
    567c:	7f 01       	movw	r14, r30
    567e:	9a 94       	dec	r9
    5680:	81 2c       	mov	r8, r1
    5682:	99 20       	and	r9, r9
    5684:	e9 f0       	breq	.+58     	; 0x56c0 <conv_brk+0x154>
    5686:	c5 01       	movw	r24, r10
    5688:	cc d2       	rcall	.+1432   	; 0x5c22 <fgetc>
    568a:	97 fd       	sbrc	r25, 7
    568c:	17 c0       	rjmp	.+46     	; 0x56bc <conv_brk+0x150>
    568e:	fc 01       	movw	r30, r24
    5690:	ff 27       	eor	r31, r31
    5692:	23 e0       	ldi	r18, 0x03	; 3
    5694:	f5 95       	asr	r31
    5696:	e7 95       	ror	r30
    5698:	2a 95       	dec	r18
    569a:	e1 f7       	brne	.-8      	; 0x5694 <conv_brk+0x128>
    569c:	ec 0d       	add	r30, r12
    569e:	fd 1d       	adc	r31, r13
    56a0:	20 81       	ld	r18, Z
    56a2:	30 e0       	ldi	r19, 0x00	; 0
    56a4:	ac 01       	movw	r20, r24
    56a6:	47 70       	andi	r20, 0x07	; 7
    56a8:	55 27       	eor	r21, r21
    56aa:	02 c0       	rjmp	.+4      	; 0x56b0 <conv_brk+0x144>
    56ac:	35 95       	asr	r19
    56ae:	27 95       	ror	r18
    56b0:	4a 95       	dec	r20
    56b2:	e2 f7       	brpl	.-8      	; 0x56ac <conv_brk+0x140>
    56b4:	20 fd       	sbrc	r18, 0
    56b6:	db cf       	rjmp	.-74     	; 0x566e <conv_brk+0x102>
    56b8:	b5 01       	movw	r22, r10
    56ba:	2d d3       	rcall	.+1626   	; 0x5d16 <ungetc>
    56bc:	81 10       	cpse	r8, r1
    56be:	89 cf       	rjmp	.-238    	; 0x55d2 <conv_brk+0x66>
    56c0:	e1 14       	cp	r14, r1
    56c2:	f1 04       	cpc	r15, r1
    56c4:	11 f0       	breq	.+4      	; 0x56ca <conv_brk+0x15e>
    56c6:	d7 01       	movw	r26, r14
    56c8:	1c 92       	st	X, r1
    56ca:	c8 01       	movw	r24, r16
    56cc:	15 c0       	rjmp	.+42     	; 0x56f8 <conv_brk+0x18c>
    56ce:	42 2f       	mov	r20, r18
    56d0:	46 95       	lsr	r20
    56d2:	46 95       	lsr	r20
    56d4:	46 95       	lsr	r20
    56d6:	d6 01       	movw	r26, r12
    56d8:	a4 0f       	add	r26, r20
    56da:	b1 1d       	adc	r27, r1
    56dc:	42 2f       	mov	r20, r18
    56de:	47 70       	andi	r20, 0x07	; 7
    56e0:	8b 01       	movw	r16, r22
    56e2:	02 c0       	rjmp	.+4      	; 0x56e8 <conv_brk+0x17c>
    56e4:	00 0f       	add	r16, r16
    56e6:	11 1f       	adc	r17, r17
    56e8:	4a 95       	dec	r20
    56ea:	e2 f7       	brpl	.-8      	; 0x56e4 <conv_brk+0x178>
    56ec:	a8 01       	movw	r20, r16
    56ee:	5c 91       	ld	r21, X
    56f0:	45 2b       	or	r20, r21
    56f2:	4c 93       	st	X, r20
    56f4:	62 2e       	mov	r6, r18
    56f6:	a4 cf       	rjmp	.-184    	; 0x5640 <conv_brk+0xd4>
    56f8:	a0 96       	adiw	r28, 0x20	; 32
    56fa:	cd bf       	out	0x3d, r28	; 61
    56fc:	de bf       	out	0x3e, r29	; 62
    56fe:	df 91       	pop	r29
    5700:	cf 91       	pop	r28
    5702:	1f 91       	pop	r17
    5704:	0f 91       	pop	r16
    5706:	ff 90       	pop	r15
    5708:	ef 90       	pop	r14
    570a:	df 90       	pop	r13
    570c:	cf 90       	pop	r12
    570e:	bf 90       	pop	r11
    5710:	af 90       	pop	r10
    5712:	9f 90       	pop	r9
    5714:	8f 90       	pop	r8
    5716:	7f 90       	pop	r7
    5718:	6f 90       	pop	r6
    571a:	5f 90       	pop	r5
    571c:	08 95       	ret

0000571e <vfscanf>:
    571e:	5f 92       	push	r5
    5720:	6f 92       	push	r6
    5722:	7f 92       	push	r7
    5724:	8f 92       	push	r8
    5726:	9f 92       	push	r9
    5728:	af 92       	push	r10
    572a:	bf 92       	push	r11
    572c:	cf 92       	push	r12
    572e:	df 92       	push	r13
    5730:	ef 92       	push	r14
    5732:	ff 92       	push	r15
    5734:	0f 93       	push	r16
    5736:	1f 93       	push	r17
    5738:	cf 93       	push	r28
    573a:	df 93       	push	r29
    573c:	6c 01       	movw	r12, r24
    573e:	eb 01       	movw	r28, r22
    5740:	5a 01       	movw	r10, r20
    5742:	fc 01       	movw	r30, r24
    5744:	16 82       	std	Z+6, r1	; 0x06
    5746:	17 82       	std	Z+7, r1	; 0x07
    5748:	51 2c       	mov	r5, r1
    574a:	f6 01       	movw	r30, r12
    574c:	e3 80       	ldd	r14, Z+3	; 0x03
    574e:	fe 01       	movw	r30, r28
    5750:	e3 fc       	sbrc	r14, 3
    5752:	85 91       	lpm	r24, Z+
    5754:	e3 fe       	sbrs	r14, 3
    5756:	81 91       	ld	r24, Z+
    5758:	18 2f       	mov	r17, r24
    575a:	ef 01       	movw	r28, r30
    575c:	88 23       	and	r24, r24
    575e:	09 f4       	brne	.+2      	; 0x5762 <vfscanf+0x44>
    5760:	e0 c0       	rjmp	.+448    	; 0x5922 <vfscanf+0x204>
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	2e d2       	rcall	.+1116   	; 0x5bc2 <isspace>
    5766:	89 2b       	or	r24, r25
    5768:	19 f0       	breq	.+6      	; 0x5770 <vfscanf+0x52>
    576a:	c6 01       	movw	r24, r12
    576c:	5f de       	rcall	.-834    	; 0x542c <skip_spaces>
    576e:	ed cf       	rjmp	.-38     	; 0x574a <vfscanf+0x2c>
    5770:	15 32       	cpi	r17, 0x25	; 37
    5772:	41 f4       	brne	.+16     	; 0x5784 <vfscanf+0x66>
    5774:	fe 01       	movw	r30, r28
    5776:	e3 fc       	sbrc	r14, 3
    5778:	15 91       	lpm	r17, Z+
    577a:	e3 fe       	sbrs	r14, 3
    577c:	11 91       	ld	r17, Z+
    577e:	ef 01       	movw	r28, r30
    5780:	15 32       	cpi	r17, 0x25	; 37
    5782:	71 f4       	brne	.+28     	; 0x57a0 <vfscanf+0x82>
    5784:	c6 01       	movw	r24, r12
    5786:	4d d2       	rcall	.+1178   	; 0x5c22 <fgetc>
    5788:	97 fd       	sbrc	r25, 7
    578a:	c9 c0       	rjmp	.+402    	; 0x591e <vfscanf+0x200>
    578c:	41 2f       	mov	r20, r17
    578e:	50 e0       	ldi	r21, 0x00	; 0
    5790:	9c 01       	movw	r18, r24
    5792:	33 27       	eor	r19, r19
    5794:	24 17       	cp	r18, r20
    5796:	35 07       	cpc	r19, r21
    5798:	c1 f2       	breq	.-80     	; 0x574a <vfscanf+0x2c>
    579a:	b6 01       	movw	r22, r12
    579c:	bc d2       	rcall	.+1400   	; 0x5d16 <ungetc>
    579e:	c1 c0       	rjmp	.+386    	; 0x5922 <vfscanf+0x204>
    57a0:	1a 32       	cpi	r17, 0x2A	; 42
    57a2:	39 f4       	brne	.+14     	; 0x57b2 <vfscanf+0x94>
    57a4:	e3 fc       	sbrc	r14, 3
    57a6:	15 91       	lpm	r17, Z+
    57a8:	e3 fe       	sbrs	r14, 3
    57aa:	11 91       	ld	r17, Z+
    57ac:	ef 01       	movw	r28, r30
    57ae:	01 e0       	ldi	r16, 0x01	; 1
    57b0:	01 c0       	rjmp	.+2      	; 0x57b4 <vfscanf+0x96>
    57b2:	00 e0       	ldi	r16, 0x00	; 0
    57b4:	f1 2c       	mov	r15, r1
    57b6:	20 ed       	ldi	r18, 0xD0	; 208
    57b8:	21 0f       	add	r18, r17
    57ba:	2a 30       	cpi	r18, 0x0A	; 10
    57bc:	78 f4       	brcc	.+30     	; 0x57dc <vfscanf+0xbe>
    57be:	02 60       	ori	r16, 0x02	; 2
    57c0:	6f 2d       	mov	r22, r15
    57c2:	70 e0       	ldi	r23, 0x00	; 0
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	40 e2       	ldi	r20, 0x20	; 32
    57ca:	09 de       	rcall	.-1006   	; 0x53de <mulacc>
    57cc:	f6 2e       	mov	r15, r22
    57ce:	fe 01       	movw	r30, r28
    57d0:	e3 fc       	sbrc	r14, 3
    57d2:	15 91       	lpm	r17, Z+
    57d4:	e3 fe       	sbrs	r14, 3
    57d6:	11 91       	ld	r17, Z+
    57d8:	ef 01       	movw	r28, r30
    57da:	ed cf       	rjmp	.-38     	; 0x57b6 <vfscanf+0x98>
    57dc:	01 ff       	sbrs	r16, 1
    57de:	03 c0       	rjmp	.+6      	; 0x57e6 <vfscanf+0xc8>
    57e0:	f1 10       	cpse	r15, r1
    57e2:	03 c0       	rjmp	.+6      	; 0x57ea <vfscanf+0xcc>
    57e4:	9e c0       	rjmp	.+316    	; 0x5922 <vfscanf+0x204>
    57e6:	ff 24       	eor	r15, r15
    57e8:	fa 94       	dec	r15
    57ea:	18 36       	cpi	r17, 0x68	; 104
    57ec:	19 f0       	breq	.+6      	; 0x57f4 <vfscanf+0xd6>
    57ee:	1c 36       	cpi	r17, 0x6C	; 108
    57f0:	51 f0       	breq	.+20     	; 0x5806 <vfscanf+0xe8>
    57f2:	10 c0       	rjmp	.+32     	; 0x5814 <vfscanf+0xf6>
    57f4:	fe 01       	movw	r30, r28
    57f6:	e3 fc       	sbrc	r14, 3
    57f8:	15 91       	lpm	r17, Z+
    57fa:	e3 fe       	sbrs	r14, 3
    57fc:	11 91       	ld	r17, Z+
    57fe:	ef 01       	movw	r28, r30
    5800:	18 36       	cpi	r17, 0x68	; 104
    5802:	41 f4       	brne	.+16     	; 0x5814 <vfscanf+0xf6>
    5804:	08 60       	ori	r16, 0x08	; 8
    5806:	04 60       	ori	r16, 0x04	; 4
    5808:	fe 01       	movw	r30, r28
    580a:	e3 fc       	sbrc	r14, 3
    580c:	15 91       	lpm	r17, Z+
    580e:	e3 fe       	sbrs	r14, 3
    5810:	11 91       	ld	r17, Z+
    5812:	ef 01       	movw	r28, r30
    5814:	11 23       	and	r17, r17
    5816:	09 f4       	brne	.+2      	; 0x581a <vfscanf+0xfc>
    5818:	84 c0       	rjmp	.+264    	; 0x5922 <vfscanf+0x204>
    581a:	61 2f       	mov	r22, r17
    581c:	70 e0       	ldi	r23, 0x00	; 0
    581e:	84 ea       	ldi	r24, 0xA4	; 164
    5820:	92 e0       	ldi	r25, 0x02	; 2
    5822:	d7 d1       	rcall	.+942    	; 0x5bd2 <strchr_P>
    5824:	89 2b       	or	r24, r25
    5826:	09 f4       	brne	.+2      	; 0x582a <vfscanf+0x10c>
    5828:	7c c0       	rjmp	.+248    	; 0x5922 <vfscanf+0x204>
    582a:	00 fd       	sbrc	r16, 0
    582c:	07 c0       	rjmp	.+14     	; 0x583c <vfscanf+0x11e>
    582e:	f5 01       	movw	r30, r10
    5830:	80 80       	ld	r8, Z
    5832:	91 80       	ldd	r9, Z+1	; 0x01
    5834:	c5 01       	movw	r24, r10
    5836:	02 96       	adiw	r24, 0x02	; 2
    5838:	5c 01       	movw	r10, r24
    583a:	02 c0       	rjmp	.+4      	; 0x5840 <vfscanf+0x122>
    583c:	81 2c       	mov	r8, r1
    583e:	91 2c       	mov	r9, r1
    5840:	1e 36       	cpi	r17, 0x6E	; 110
    5842:	49 f4       	brne	.+18     	; 0x5856 <vfscanf+0x138>
    5844:	f6 01       	movw	r30, r12
    5846:	46 81       	ldd	r20, Z+6	; 0x06
    5848:	57 81       	ldd	r21, Z+7	; 0x07
    584a:	60 e0       	ldi	r22, 0x00	; 0
    584c:	70 e0       	ldi	r23, 0x00	; 0
    584e:	20 2f       	mov	r18, r16
    5850:	c4 01       	movw	r24, r8
    5852:	b9 dd       	rcall	.-1166   	; 0x53c6 <putval>
    5854:	7a cf       	rjmp	.-268    	; 0x574a <vfscanf+0x2c>
    5856:	13 36       	cpi	r17, 0x63	; 99
    5858:	a1 f4       	brne	.+40     	; 0x5882 <vfscanf+0x164>
    585a:	01 fd       	sbrc	r16, 1
    585c:	02 c0       	rjmp	.+4      	; 0x5862 <vfscanf+0x144>
    585e:	ff 24       	eor	r15, r15
    5860:	f3 94       	inc	r15
    5862:	c6 01       	movw	r24, r12
    5864:	de d1       	rcall	.+956    	; 0x5c22 <fgetc>
    5866:	97 fd       	sbrc	r25, 7
    5868:	5a c0       	rjmp	.+180    	; 0x591e <vfscanf+0x200>
    586a:	81 14       	cp	r8, r1
    586c:	91 04       	cpc	r9, r1
    586e:	29 f0       	breq	.+10     	; 0x587a <vfscanf+0x15c>
    5870:	f4 01       	movw	r30, r8
    5872:	80 83       	st	Z, r24
    5874:	c4 01       	movw	r24, r8
    5876:	01 96       	adiw	r24, 0x01	; 1
    5878:	4c 01       	movw	r8, r24
    587a:	fa 94       	dec	r15
    587c:	f1 10       	cpse	r15, r1
    587e:	f1 cf       	rjmp	.-30     	; 0x5862 <vfscanf+0x144>
    5880:	4a c0       	rjmp	.+148    	; 0x5916 <vfscanf+0x1f8>
    5882:	1b 35       	cpi	r17, 0x5B	; 91
    5884:	51 f4       	brne	.+20     	; 0x589a <vfscanf+0x17c>
    5886:	9e 01       	movw	r18, r28
    5888:	a4 01       	movw	r20, r8
    588a:	6f 2d       	mov	r22, r15
    588c:	c6 01       	movw	r24, r12
    588e:	6e de       	rcall	.-804    	; 0x556c <conv_brk>
    5890:	ec 01       	movw	r28, r24
    5892:	89 2b       	or	r24, r25
    5894:	09 f0       	breq	.+2      	; 0x5898 <vfscanf+0x17a>
    5896:	3f c0       	rjmp	.+126    	; 0x5916 <vfscanf+0x1f8>
    5898:	39 c0       	rjmp	.+114    	; 0x590c <vfscanf+0x1ee>
    589a:	c6 01       	movw	r24, r12
    589c:	c7 dd       	rcall	.-1138   	; 0x542c <skip_spaces>
    589e:	97 fd       	sbrc	r25, 7
    58a0:	3e c0       	rjmp	.+124    	; 0x591e <vfscanf+0x200>
    58a2:	1f 36       	cpi	r17, 0x6F	; 111
    58a4:	49 f1       	breq	.+82     	; 0x58f8 <vfscanf+0x1da>
    58a6:	28 f4       	brcc	.+10     	; 0x58b2 <vfscanf+0x194>
    58a8:	14 36       	cpi	r17, 0x64	; 100
    58aa:	21 f1       	breq	.+72     	; 0x58f4 <vfscanf+0x1d6>
    58ac:	19 36       	cpi	r17, 0x69	; 105
    58ae:	39 f1       	breq	.+78     	; 0x58fe <vfscanf+0x1e0>
    58b0:	25 c0       	rjmp	.+74     	; 0x58fc <vfscanf+0x1de>
    58b2:	13 37       	cpi	r17, 0x73	; 115
    58b4:	71 f0       	breq	.+28     	; 0x58d2 <vfscanf+0x1b4>
    58b6:	15 37       	cpi	r17, 0x75	; 117
    58b8:	e9 f0       	breq	.+58     	; 0x58f4 <vfscanf+0x1d6>
    58ba:	20 c0       	rjmp	.+64     	; 0x58fc <vfscanf+0x1de>
    58bc:	81 14       	cp	r8, r1
    58be:	91 04       	cpc	r9, r1
    58c0:	29 f0       	breq	.+10     	; 0x58cc <vfscanf+0x1ae>
    58c2:	f4 01       	movw	r30, r8
    58c4:	60 82       	st	Z, r6
    58c6:	c4 01       	movw	r24, r8
    58c8:	01 96       	adiw	r24, 0x01	; 1
    58ca:	4c 01       	movw	r8, r24
    58cc:	fa 94       	dec	r15
    58ce:	ff 20       	and	r15, r15
    58d0:	59 f0       	breq	.+22     	; 0x58e8 <vfscanf+0x1ca>
    58d2:	c6 01       	movw	r24, r12
    58d4:	a6 d1       	rcall	.+844    	; 0x5c22 <fgetc>
    58d6:	3c 01       	movw	r6, r24
    58d8:	97 fd       	sbrc	r25, 7
    58da:	06 c0       	rjmp	.+12     	; 0x58e8 <vfscanf+0x1ca>
    58dc:	72 d1       	rcall	.+740    	; 0x5bc2 <isspace>
    58de:	89 2b       	or	r24, r25
    58e0:	69 f3       	breq	.-38     	; 0x58bc <vfscanf+0x19e>
    58e2:	b6 01       	movw	r22, r12
    58e4:	c3 01       	movw	r24, r6
    58e6:	17 d2       	rcall	.+1070   	; 0x5d16 <ungetc>
    58e8:	81 14       	cp	r8, r1
    58ea:	91 04       	cpc	r9, r1
    58ec:	a1 f0       	breq	.+40     	; 0x5916 <vfscanf+0x1f8>
    58ee:	f4 01       	movw	r30, r8
    58f0:	10 82       	st	Z, r1
    58f2:	11 c0       	rjmp	.+34     	; 0x5916 <vfscanf+0x1f8>
    58f4:	00 62       	ori	r16, 0x20	; 32
    58f6:	03 c0       	rjmp	.+6      	; 0x58fe <vfscanf+0x1e0>
    58f8:	00 61       	ori	r16, 0x10	; 16
    58fa:	01 c0       	rjmp	.+2      	; 0x58fe <vfscanf+0x1e0>
    58fc:	00 64       	ori	r16, 0x40	; 64
    58fe:	20 2f       	mov	r18, r16
    5900:	a4 01       	movw	r20, r8
    5902:	6f 2d       	mov	r22, r15
    5904:	c6 01       	movw	r24, r12
    5906:	a8 dd       	rcall	.-1200   	; 0x5458 <conv_int>
    5908:	81 11       	cpse	r24, r1
    590a:	05 c0       	rjmp	.+10     	; 0x5916 <vfscanf+0x1f8>
    590c:	f6 01       	movw	r30, r12
    590e:	83 81       	ldd	r24, Z+3	; 0x03
    5910:	80 73       	andi	r24, 0x30	; 48
    5912:	29 f4       	brne	.+10     	; 0x591e <vfscanf+0x200>
    5914:	06 c0       	rjmp	.+12     	; 0x5922 <vfscanf+0x204>
    5916:	00 fd       	sbrc	r16, 0
    5918:	18 cf       	rjmp	.-464    	; 0x574a <vfscanf+0x2c>
    591a:	53 94       	inc	r5
    591c:	16 cf       	rjmp	.-468    	; 0x574a <vfscanf+0x2c>
    591e:	55 20       	and	r5, r5
    5920:	19 f0       	breq	.+6      	; 0x5928 <vfscanf+0x20a>
    5922:	85 2d       	mov	r24, r5
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	02 c0       	rjmp	.+4      	; 0x592c <vfscanf+0x20e>
    5928:	8f ef       	ldi	r24, 0xFF	; 255
    592a:	9f ef       	ldi	r25, 0xFF	; 255
    592c:	df 91       	pop	r29
    592e:	cf 91       	pop	r28
    5930:	1f 91       	pop	r17
    5932:	0f 91       	pop	r16
    5934:	ff 90       	pop	r15
    5936:	ef 90       	pop	r14
    5938:	df 90       	pop	r13
    593a:	cf 90       	pop	r12
    593c:	bf 90       	pop	r11
    593e:	af 90       	pop	r10
    5940:	9f 90       	pop	r9
    5942:	8f 90       	pop	r8
    5944:	7f 90       	pop	r7
    5946:	6f 90       	pop	r6
    5948:	5f 90       	pop	r5
    594a:	08 95       	ret

0000594c <calloc>:
    594c:	0f 93       	push	r16
    594e:	1f 93       	push	r17
    5950:	cf 93       	push	r28
    5952:	df 93       	push	r29
    5954:	86 9f       	mul	r24, r22
    5956:	80 01       	movw	r16, r0
    5958:	87 9f       	mul	r24, r23
    595a:	10 0d       	add	r17, r0
    595c:	96 9f       	mul	r25, r22
    595e:	10 0d       	add	r17, r0
    5960:	11 24       	eor	r1, r1
    5962:	c8 01       	movw	r24, r16
    5964:	0d d0       	rcall	.+26     	; 0x5980 <malloc>
    5966:	ec 01       	movw	r28, r24
    5968:	00 97       	sbiw	r24, 0x00	; 0
    596a:	21 f0       	breq	.+8      	; 0x5974 <calloc+0x28>
    596c:	a8 01       	movw	r20, r16
    596e:	60 e0       	ldi	r22, 0x00	; 0
    5970:	70 e0       	ldi	r23, 0x00	; 0
    5972:	45 d1       	rcall	.+650    	; 0x5bfe <memset>
    5974:	ce 01       	movw	r24, r28
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	1f 91       	pop	r17
    597c:	0f 91       	pop	r16
    597e:	08 95       	ret

00005980 <malloc>:
    5980:	0f 93       	push	r16
    5982:	1f 93       	push	r17
    5984:	cf 93       	push	r28
    5986:	df 93       	push	r29
    5988:	82 30       	cpi	r24, 0x02	; 2
    598a:	91 05       	cpc	r25, r1
    598c:	10 f4       	brcc	.+4      	; 0x5992 <malloc+0x12>
    598e:	82 e0       	ldi	r24, 0x02	; 2
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	e0 91 16 22 	lds	r30, 0x2216	; 0x802216 <__flp>
    5996:	f0 91 17 22 	lds	r31, 0x2217	; 0x802217 <__flp+0x1>
    599a:	20 e0       	ldi	r18, 0x00	; 0
    599c:	30 e0       	ldi	r19, 0x00	; 0
    599e:	a0 e0       	ldi	r26, 0x00	; 0
    59a0:	b0 e0       	ldi	r27, 0x00	; 0
    59a2:	30 97       	sbiw	r30, 0x00	; 0
    59a4:	19 f1       	breq	.+70     	; 0x59ec <malloc+0x6c>
    59a6:	40 81       	ld	r20, Z
    59a8:	51 81       	ldd	r21, Z+1	; 0x01
    59aa:	02 81       	ldd	r16, Z+2	; 0x02
    59ac:	13 81       	ldd	r17, Z+3	; 0x03
    59ae:	48 17       	cp	r20, r24
    59b0:	59 07       	cpc	r21, r25
    59b2:	c8 f0       	brcs	.+50     	; 0x59e6 <malloc+0x66>
    59b4:	84 17       	cp	r24, r20
    59b6:	95 07       	cpc	r25, r21
    59b8:	69 f4       	brne	.+26     	; 0x59d4 <malloc+0x54>
    59ba:	10 97       	sbiw	r26, 0x00	; 0
    59bc:	31 f0       	breq	.+12     	; 0x59ca <malloc+0x4a>
    59be:	12 96       	adiw	r26, 0x02	; 2
    59c0:	0c 93       	st	X, r16
    59c2:	12 97       	sbiw	r26, 0x02	; 2
    59c4:	13 96       	adiw	r26, 0x03	; 3
    59c6:	1c 93       	st	X, r17
    59c8:	27 c0       	rjmp	.+78     	; 0x5a18 <malloc+0x98>
    59ca:	00 93 16 22 	sts	0x2216, r16	; 0x802216 <__flp>
    59ce:	10 93 17 22 	sts	0x2217, r17	; 0x802217 <__flp+0x1>
    59d2:	22 c0       	rjmp	.+68     	; 0x5a18 <malloc+0x98>
    59d4:	21 15       	cp	r18, r1
    59d6:	31 05       	cpc	r19, r1
    59d8:	19 f0       	breq	.+6      	; 0x59e0 <malloc+0x60>
    59da:	42 17       	cp	r20, r18
    59dc:	53 07       	cpc	r21, r19
    59de:	18 f4       	brcc	.+6      	; 0x59e6 <malloc+0x66>
    59e0:	9a 01       	movw	r18, r20
    59e2:	bd 01       	movw	r22, r26
    59e4:	ef 01       	movw	r28, r30
    59e6:	df 01       	movw	r26, r30
    59e8:	f8 01       	movw	r30, r16
    59ea:	db cf       	rjmp	.-74     	; 0x59a2 <malloc+0x22>
    59ec:	21 15       	cp	r18, r1
    59ee:	31 05       	cpc	r19, r1
    59f0:	f9 f0       	breq	.+62     	; 0x5a30 <malloc+0xb0>
    59f2:	28 1b       	sub	r18, r24
    59f4:	39 0b       	sbc	r19, r25
    59f6:	24 30       	cpi	r18, 0x04	; 4
    59f8:	31 05       	cpc	r19, r1
    59fa:	80 f4       	brcc	.+32     	; 0x5a1c <malloc+0x9c>
    59fc:	8a 81       	ldd	r24, Y+2	; 0x02
    59fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5a00:	61 15       	cp	r22, r1
    5a02:	71 05       	cpc	r23, r1
    5a04:	21 f0       	breq	.+8      	; 0x5a0e <malloc+0x8e>
    5a06:	fb 01       	movw	r30, r22
    5a08:	82 83       	std	Z+2, r24	; 0x02
    5a0a:	93 83       	std	Z+3, r25	; 0x03
    5a0c:	04 c0       	rjmp	.+8      	; 0x5a16 <malloc+0x96>
    5a0e:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <__flp>
    5a12:	90 93 17 22 	sts	0x2217, r25	; 0x802217 <__flp+0x1>
    5a16:	fe 01       	movw	r30, r28
    5a18:	32 96       	adiw	r30, 0x02	; 2
    5a1a:	44 c0       	rjmp	.+136    	; 0x5aa4 <malloc+0x124>
    5a1c:	fe 01       	movw	r30, r28
    5a1e:	e2 0f       	add	r30, r18
    5a20:	f3 1f       	adc	r31, r19
    5a22:	81 93       	st	Z+, r24
    5a24:	91 93       	st	Z+, r25
    5a26:	22 50       	subi	r18, 0x02	; 2
    5a28:	31 09       	sbc	r19, r1
    5a2a:	28 83       	st	Y, r18
    5a2c:	39 83       	std	Y+1, r19	; 0x01
    5a2e:	3a c0       	rjmp	.+116    	; 0x5aa4 <malloc+0x124>
    5a30:	20 91 14 22 	lds	r18, 0x2214	; 0x802214 <__brkval>
    5a34:	30 91 15 22 	lds	r19, 0x2215	; 0x802215 <__brkval+0x1>
    5a38:	23 2b       	or	r18, r19
    5a3a:	41 f4       	brne	.+16     	; 0x5a4c <malloc+0xcc>
    5a3c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    5a40:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    5a44:	20 93 14 22 	sts	0x2214, r18	; 0x802214 <__brkval>
    5a48:	30 93 15 22 	sts	0x2215, r19	; 0x802215 <__brkval+0x1>
    5a4c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    5a50:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    5a54:	21 15       	cp	r18, r1
    5a56:	31 05       	cpc	r19, r1
    5a58:	41 f4       	brne	.+16     	; 0x5a6a <malloc+0xea>
    5a5a:	2d b7       	in	r18, 0x3d	; 61
    5a5c:	3e b7       	in	r19, 0x3e	; 62
    5a5e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5a62:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5a66:	24 1b       	sub	r18, r20
    5a68:	35 0b       	sbc	r19, r21
    5a6a:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <__brkval>
    5a6e:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <__brkval+0x1>
    5a72:	e2 17       	cp	r30, r18
    5a74:	f3 07       	cpc	r31, r19
    5a76:	a0 f4       	brcc	.+40     	; 0x5aa0 <malloc+0x120>
    5a78:	2e 1b       	sub	r18, r30
    5a7a:	3f 0b       	sbc	r19, r31
    5a7c:	28 17       	cp	r18, r24
    5a7e:	39 07       	cpc	r19, r25
    5a80:	78 f0       	brcs	.+30     	; 0x5aa0 <malloc+0x120>
    5a82:	ac 01       	movw	r20, r24
    5a84:	4e 5f       	subi	r20, 0xFE	; 254
    5a86:	5f 4f       	sbci	r21, 0xFF	; 255
    5a88:	24 17       	cp	r18, r20
    5a8a:	35 07       	cpc	r19, r21
    5a8c:	48 f0       	brcs	.+18     	; 0x5aa0 <malloc+0x120>
    5a8e:	4e 0f       	add	r20, r30
    5a90:	5f 1f       	adc	r21, r31
    5a92:	40 93 14 22 	sts	0x2214, r20	; 0x802214 <__brkval>
    5a96:	50 93 15 22 	sts	0x2215, r21	; 0x802215 <__brkval+0x1>
    5a9a:	81 93       	st	Z+, r24
    5a9c:	91 93       	st	Z+, r25
    5a9e:	02 c0       	rjmp	.+4      	; 0x5aa4 <malloc+0x124>
    5aa0:	e0 e0       	ldi	r30, 0x00	; 0
    5aa2:	f0 e0       	ldi	r31, 0x00	; 0
    5aa4:	cf 01       	movw	r24, r30
    5aa6:	df 91       	pop	r29
    5aa8:	cf 91       	pop	r28
    5aaa:	1f 91       	pop	r17
    5aac:	0f 91       	pop	r16
    5aae:	08 95       	ret

00005ab0 <free>:
    5ab0:	cf 93       	push	r28
    5ab2:	df 93       	push	r29
    5ab4:	00 97       	sbiw	r24, 0x00	; 0
    5ab6:	09 f4       	brne	.+2      	; 0x5aba <free+0xa>
    5ab8:	81 c0       	rjmp	.+258    	; 0x5bbc <free+0x10c>
    5aba:	fc 01       	movw	r30, r24
    5abc:	32 97       	sbiw	r30, 0x02	; 2
    5abe:	12 82       	std	Z+2, r1	; 0x02
    5ac0:	13 82       	std	Z+3, r1	; 0x03
    5ac2:	a0 91 16 22 	lds	r26, 0x2216	; 0x802216 <__flp>
    5ac6:	b0 91 17 22 	lds	r27, 0x2217	; 0x802217 <__flp+0x1>
    5aca:	10 97       	sbiw	r26, 0x00	; 0
    5acc:	81 f4       	brne	.+32     	; 0x5aee <free+0x3e>
    5ace:	20 81       	ld	r18, Z
    5ad0:	31 81       	ldd	r19, Z+1	; 0x01
    5ad2:	82 0f       	add	r24, r18
    5ad4:	93 1f       	adc	r25, r19
    5ad6:	20 91 14 22 	lds	r18, 0x2214	; 0x802214 <__brkval>
    5ada:	30 91 15 22 	lds	r19, 0x2215	; 0x802215 <__brkval+0x1>
    5ade:	28 17       	cp	r18, r24
    5ae0:	39 07       	cpc	r19, r25
    5ae2:	51 f5       	brne	.+84     	; 0x5b38 <free+0x88>
    5ae4:	e0 93 14 22 	sts	0x2214, r30	; 0x802214 <__brkval>
    5ae8:	f0 93 15 22 	sts	0x2215, r31	; 0x802215 <__brkval+0x1>
    5aec:	67 c0       	rjmp	.+206    	; 0x5bbc <free+0x10c>
    5aee:	ed 01       	movw	r28, r26
    5af0:	20 e0       	ldi	r18, 0x00	; 0
    5af2:	30 e0       	ldi	r19, 0x00	; 0
    5af4:	ce 17       	cp	r28, r30
    5af6:	df 07       	cpc	r29, r31
    5af8:	40 f4       	brcc	.+16     	; 0x5b0a <free+0x5a>
    5afa:	4a 81       	ldd	r20, Y+2	; 0x02
    5afc:	5b 81       	ldd	r21, Y+3	; 0x03
    5afe:	9e 01       	movw	r18, r28
    5b00:	41 15       	cp	r20, r1
    5b02:	51 05       	cpc	r21, r1
    5b04:	f1 f0       	breq	.+60     	; 0x5b42 <free+0x92>
    5b06:	ea 01       	movw	r28, r20
    5b08:	f5 cf       	rjmp	.-22     	; 0x5af4 <free+0x44>
    5b0a:	c2 83       	std	Z+2, r28	; 0x02
    5b0c:	d3 83       	std	Z+3, r29	; 0x03
    5b0e:	40 81       	ld	r20, Z
    5b10:	51 81       	ldd	r21, Z+1	; 0x01
    5b12:	84 0f       	add	r24, r20
    5b14:	95 1f       	adc	r25, r21
    5b16:	c8 17       	cp	r28, r24
    5b18:	d9 07       	cpc	r29, r25
    5b1a:	59 f4       	brne	.+22     	; 0x5b32 <free+0x82>
    5b1c:	88 81       	ld	r24, Y
    5b1e:	99 81       	ldd	r25, Y+1	; 0x01
    5b20:	84 0f       	add	r24, r20
    5b22:	95 1f       	adc	r25, r21
    5b24:	02 96       	adiw	r24, 0x02	; 2
    5b26:	80 83       	st	Z, r24
    5b28:	91 83       	std	Z+1, r25	; 0x01
    5b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b2e:	82 83       	std	Z+2, r24	; 0x02
    5b30:	93 83       	std	Z+3, r25	; 0x03
    5b32:	21 15       	cp	r18, r1
    5b34:	31 05       	cpc	r19, r1
    5b36:	29 f4       	brne	.+10     	; 0x5b42 <free+0x92>
    5b38:	e0 93 16 22 	sts	0x2216, r30	; 0x802216 <__flp>
    5b3c:	f0 93 17 22 	sts	0x2217, r31	; 0x802217 <__flp+0x1>
    5b40:	3d c0       	rjmp	.+122    	; 0x5bbc <free+0x10c>
    5b42:	e9 01       	movw	r28, r18
    5b44:	ea 83       	std	Y+2, r30	; 0x02
    5b46:	fb 83       	std	Y+3, r31	; 0x03
    5b48:	49 91       	ld	r20, Y+
    5b4a:	59 91       	ld	r21, Y+
    5b4c:	c4 0f       	add	r28, r20
    5b4e:	d5 1f       	adc	r29, r21
    5b50:	ec 17       	cp	r30, r28
    5b52:	fd 07       	cpc	r31, r29
    5b54:	61 f4       	brne	.+24     	; 0x5b6e <free+0xbe>
    5b56:	80 81       	ld	r24, Z
    5b58:	91 81       	ldd	r25, Z+1	; 0x01
    5b5a:	84 0f       	add	r24, r20
    5b5c:	95 1f       	adc	r25, r21
    5b5e:	02 96       	adiw	r24, 0x02	; 2
    5b60:	e9 01       	movw	r28, r18
    5b62:	88 83       	st	Y, r24
    5b64:	99 83       	std	Y+1, r25	; 0x01
    5b66:	82 81       	ldd	r24, Z+2	; 0x02
    5b68:	93 81       	ldd	r25, Z+3	; 0x03
    5b6a:	8a 83       	std	Y+2, r24	; 0x02
    5b6c:	9b 83       	std	Y+3, r25	; 0x03
    5b6e:	e0 e0       	ldi	r30, 0x00	; 0
    5b70:	f0 e0       	ldi	r31, 0x00	; 0
    5b72:	12 96       	adiw	r26, 0x02	; 2
    5b74:	8d 91       	ld	r24, X+
    5b76:	9c 91       	ld	r25, X
    5b78:	13 97       	sbiw	r26, 0x03	; 3
    5b7a:	00 97       	sbiw	r24, 0x00	; 0
    5b7c:	19 f0       	breq	.+6      	; 0x5b84 <free+0xd4>
    5b7e:	fd 01       	movw	r30, r26
    5b80:	dc 01       	movw	r26, r24
    5b82:	f7 cf       	rjmp	.-18     	; 0x5b72 <free+0xc2>
    5b84:	8d 91       	ld	r24, X+
    5b86:	9c 91       	ld	r25, X
    5b88:	11 97       	sbiw	r26, 0x01	; 1
    5b8a:	9d 01       	movw	r18, r26
    5b8c:	2e 5f       	subi	r18, 0xFE	; 254
    5b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b90:	82 0f       	add	r24, r18
    5b92:	93 1f       	adc	r25, r19
    5b94:	20 91 14 22 	lds	r18, 0x2214	; 0x802214 <__brkval>
    5b98:	30 91 15 22 	lds	r19, 0x2215	; 0x802215 <__brkval+0x1>
    5b9c:	28 17       	cp	r18, r24
    5b9e:	39 07       	cpc	r19, r25
    5ba0:	69 f4       	brne	.+26     	; 0x5bbc <free+0x10c>
    5ba2:	30 97       	sbiw	r30, 0x00	; 0
    5ba4:	29 f4       	brne	.+10     	; 0x5bb0 <free+0x100>
    5ba6:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <__flp>
    5baa:	10 92 17 22 	sts	0x2217, r1	; 0x802217 <__flp+0x1>
    5bae:	02 c0       	rjmp	.+4      	; 0x5bb4 <free+0x104>
    5bb0:	12 82       	std	Z+2, r1	; 0x02
    5bb2:	13 82       	std	Z+3, r1	; 0x03
    5bb4:	a0 93 14 22 	sts	0x2214, r26	; 0x802214 <__brkval>
    5bb8:	b0 93 15 22 	sts	0x2215, r27	; 0x802215 <__brkval+0x1>
    5bbc:	df 91       	pop	r29
    5bbe:	cf 91       	pop	r28
    5bc0:	08 95       	ret

00005bc2 <isspace>:
    5bc2:	91 11       	cpse	r25, r1
    5bc4:	1f c1       	rjmp	.+574    	; 0x5e04 <__ctype_isfalse>
    5bc6:	80 32       	cpi	r24, 0x20	; 32
    5bc8:	19 f0       	breq	.+6      	; 0x5bd0 <isspace+0xe>
    5bca:	89 50       	subi	r24, 0x09	; 9
    5bcc:	85 50       	subi	r24, 0x05	; 5
    5bce:	d0 f7       	brcc	.-12     	; 0x5bc4 <isspace+0x2>
    5bd0:	08 95       	ret

00005bd2 <strchr_P>:
    5bd2:	fc 01       	movw	r30, r24
    5bd4:	05 90       	lpm	r0, Z+
    5bd6:	06 16       	cp	r0, r22
    5bd8:	21 f0       	breq	.+8      	; 0x5be2 <strchr_P+0x10>
    5bda:	00 20       	and	r0, r0
    5bdc:	d9 f7       	brne	.-10     	; 0x5bd4 <strchr_P+0x2>
    5bde:	c0 01       	movw	r24, r0
    5be0:	08 95       	ret
    5be2:	31 97       	sbiw	r30, 0x01	; 1
    5be4:	cf 01       	movw	r24, r30
    5be6:	08 95       	ret

00005be8 <strnlen_P>:
    5be8:	fc 01       	movw	r30, r24
    5bea:	05 90       	lpm	r0, Z+
    5bec:	61 50       	subi	r22, 0x01	; 1
    5bee:	70 40       	sbci	r23, 0x00	; 0
    5bf0:	01 10       	cpse	r0, r1
    5bf2:	d8 f7       	brcc	.-10     	; 0x5bea <strnlen_P+0x2>
    5bf4:	80 95       	com	r24
    5bf6:	90 95       	com	r25
    5bf8:	8e 0f       	add	r24, r30
    5bfa:	9f 1f       	adc	r25, r31
    5bfc:	08 95       	ret

00005bfe <memset>:
    5bfe:	dc 01       	movw	r26, r24
    5c00:	01 c0       	rjmp	.+2      	; 0x5c04 <memset+0x6>
    5c02:	6d 93       	st	X+, r22
    5c04:	41 50       	subi	r20, 0x01	; 1
    5c06:	50 40       	sbci	r21, 0x00	; 0
    5c08:	e0 f7       	brcc	.-8      	; 0x5c02 <memset+0x4>
    5c0a:	08 95       	ret

00005c0c <strnlen>:
    5c0c:	fc 01       	movw	r30, r24
    5c0e:	61 50       	subi	r22, 0x01	; 1
    5c10:	70 40       	sbci	r23, 0x00	; 0
    5c12:	01 90       	ld	r0, Z+
    5c14:	01 10       	cpse	r0, r1
    5c16:	d8 f7       	brcc	.-10     	; 0x5c0e <strnlen+0x2>
    5c18:	80 95       	com	r24
    5c1a:	90 95       	com	r25
    5c1c:	8e 0f       	add	r24, r30
    5c1e:	9f 1f       	adc	r25, r31
    5c20:	08 95       	ret

00005c22 <fgetc>:
    5c22:	cf 93       	push	r28
    5c24:	df 93       	push	r29
    5c26:	ec 01       	movw	r28, r24
    5c28:	2b 81       	ldd	r18, Y+3	; 0x03
    5c2a:	20 ff       	sbrs	r18, 0
    5c2c:	33 c0       	rjmp	.+102    	; 0x5c94 <fgetc+0x72>
    5c2e:	26 ff       	sbrs	r18, 6
    5c30:	0a c0       	rjmp	.+20     	; 0x5c46 <fgetc+0x24>
    5c32:	2f 7b       	andi	r18, 0xBF	; 191
    5c34:	2b 83       	std	Y+3, r18	; 0x03
    5c36:	8e 81       	ldd	r24, Y+6	; 0x06
    5c38:	9f 81       	ldd	r25, Y+7	; 0x07
    5c3a:	01 96       	adiw	r24, 0x01	; 1
    5c3c:	8e 83       	std	Y+6, r24	; 0x06
    5c3e:	9f 83       	std	Y+7, r25	; 0x07
    5c40:	8a 81       	ldd	r24, Y+2	; 0x02
    5c42:	90 e0       	ldi	r25, 0x00	; 0
    5c44:	29 c0       	rjmp	.+82     	; 0x5c98 <fgetc+0x76>
    5c46:	22 ff       	sbrs	r18, 2
    5c48:	0f c0       	rjmp	.+30     	; 0x5c68 <fgetc+0x46>
    5c4a:	e8 81       	ld	r30, Y
    5c4c:	f9 81       	ldd	r31, Y+1	; 0x01
    5c4e:	80 81       	ld	r24, Z
    5c50:	08 2e       	mov	r0, r24
    5c52:	00 0c       	add	r0, r0
    5c54:	99 0b       	sbc	r25, r25
    5c56:	00 97       	sbiw	r24, 0x00	; 0
    5c58:	19 f4       	brne	.+6      	; 0x5c60 <fgetc+0x3e>
    5c5a:	20 62       	ori	r18, 0x20	; 32
    5c5c:	2b 83       	std	Y+3, r18	; 0x03
    5c5e:	1a c0       	rjmp	.+52     	; 0x5c94 <fgetc+0x72>
    5c60:	31 96       	adiw	r30, 0x01	; 1
    5c62:	e8 83       	st	Y, r30
    5c64:	f9 83       	std	Y+1, r31	; 0x01
    5c66:	0e c0       	rjmp	.+28     	; 0x5c84 <fgetc+0x62>
    5c68:	ea 85       	ldd	r30, Y+10	; 0x0a
    5c6a:	fb 85       	ldd	r31, Y+11	; 0x0b
    5c6c:	19 95       	eicall
    5c6e:	97 ff       	sbrs	r25, 7
    5c70:	09 c0       	rjmp	.+18     	; 0x5c84 <fgetc+0x62>
    5c72:	2b 81       	ldd	r18, Y+3	; 0x03
    5c74:	01 96       	adiw	r24, 0x01	; 1
    5c76:	11 f0       	breq	.+4      	; 0x5c7c <fgetc+0x5a>
    5c78:	80 e2       	ldi	r24, 0x20	; 32
    5c7a:	01 c0       	rjmp	.+2      	; 0x5c7e <fgetc+0x5c>
    5c7c:	80 e1       	ldi	r24, 0x10	; 16
    5c7e:	82 2b       	or	r24, r18
    5c80:	8b 83       	std	Y+3, r24	; 0x03
    5c82:	08 c0       	rjmp	.+16     	; 0x5c94 <fgetc+0x72>
    5c84:	2e 81       	ldd	r18, Y+6	; 0x06
    5c86:	3f 81       	ldd	r19, Y+7	; 0x07
    5c88:	2f 5f       	subi	r18, 0xFF	; 255
    5c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c8c:	2e 83       	std	Y+6, r18	; 0x06
    5c8e:	3f 83       	std	Y+7, r19	; 0x07
    5c90:	99 27       	eor	r25, r25
    5c92:	02 c0       	rjmp	.+4      	; 0x5c98 <fgetc+0x76>
    5c94:	8f ef       	ldi	r24, 0xFF	; 255
    5c96:	9f ef       	ldi	r25, 0xFF	; 255
    5c98:	df 91       	pop	r29
    5c9a:	cf 91       	pop	r28
    5c9c:	08 95       	ret

00005c9e <fputc>:
    5c9e:	0f 93       	push	r16
    5ca0:	1f 93       	push	r17
    5ca2:	cf 93       	push	r28
    5ca4:	df 93       	push	r29
    5ca6:	fb 01       	movw	r30, r22
    5ca8:	23 81       	ldd	r18, Z+3	; 0x03
    5caa:	21 fd       	sbrc	r18, 1
    5cac:	03 c0       	rjmp	.+6      	; 0x5cb4 <fputc+0x16>
    5cae:	8f ef       	ldi	r24, 0xFF	; 255
    5cb0:	9f ef       	ldi	r25, 0xFF	; 255
    5cb2:	2c c0       	rjmp	.+88     	; 0x5d0c <fputc+0x6e>
    5cb4:	22 ff       	sbrs	r18, 2
    5cb6:	16 c0       	rjmp	.+44     	; 0x5ce4 <fputc+0x46>
    5cb8:	46 81       	ldd	r20, Z+6	; 0x06
    5cba:	57 81       	ldd	r21, Z+7	; 0x07
    5cbc:	24 81       	ldd	r18, Z+4	; 0x04
    5cbe:	35 81       	ldd	r19, Z+5	; 0x05
    5cc0:	42 17       	cp	r20, r18
    5cc2:	53 07       	cpc	r21, r19
    5cc4:	44 f4       	brge	.+16     	; 0x5cd6 <fputc+0x38>
    5cc6:	a0 81       	ld	r26, Z
    5cc8:	b1 81       	ldd	r27, Z+1	; 0x01
    5cca:	9d 01       	movw	r18, r26
    5ccc:	2f 5f       	subi	r18, 0xFF	; 255
    5cce:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd0:	20 83       	st	Z, r18
    5cd2:	31 83       	std	Z+1, r19	; 0x01
    5cd4:	8c 93       	st	X, r24
    5cd6:	26 81       	ldd	r18, Z+6	; 0x06
    5cd8:	37 81       	ldd	r19, Z+7	; 0x07
    5cda:	2f 5f       	subi	r18, 0xFF	; 255
    5cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    5cde:	26 83       	std	Z+6, r18	; 0x06
    5ce0:	37 83       	std	Z+7, r19	; 0x07
    5ce2:	14 c0       	rjmp	.+40     	; 0x5d0c <fputc+0x6e>
    5ce4:	8b 01       	movw	r16, r22
    5ce6:	ec 01       	movw	r28, r24
    5ce8:	fb 01       	movw	r30, r22
    5cea:	00 84       	ldd	r0, Z+8	; 0x08
    5cec:	f1 85       	ldd	r31, Z+9	; 0x09
    5cee:	e0 2d       	mov	r30, r0
    5cf0:	19 95       	eicall
    5cf2:	89 2b       	or	r24, r25
    5cf4:	e1 f6       	brne	.-72     	; 0x5cae <fputc+0x10>
    5cf6:	d8 01       	movw	r26, r16
    5cf8:	16 96       	adiw	r26, 0x06	; 6
    5cfa:	8d 91       	ld	r24, X+
    5cfc:	9c 91       	ld	r25, X
    5cfe:	17 97       	sbiw	r26, 0x07	; 7
    5d00:	01 96       	adiw	r24, 0x01	; 1
    5d02:	16 96       	adiw	r26, 0x06	; 6
    5d04:	8d 93       	st	X+, r24
    5d06:	9c 93       	st	X, r25
    5d08:	17 97       	sbiw	r26, 0x07	; 7
    5d0a:	ce 01       	movw	r24, r28
    5d0c:	df 91       	pop	r29
    5d0e:	cf 91       	pop	r28
    5d10:	1f 91       	pop	r17
    5d12:	0f 91       	pop	r16
    5d14:	08 95       	ret

00005d16 <ungetc>:
    5d16:	fb 01       	movw	r30, r22
    5d18:	23 81       	ldd	r18, Z+3	; 0x03
    5d1a:	20 ff       	sbrs	r18, 0
    5d1c:	12 c0       	rjmp	.+36     	; 0x5d42 <ungetc+0x2c>
    5d1e:	26 fd       	sbrc	r18, 6
    5d20:	10 c0       	rjmp	.+32     	; 0x5d42 <ungetc+0x2c>
    5d22:	8f 3f       	cpi	r24, 0xFF	; 255
    5d24:	3f ef       	ldi	r19, 0xFF	; 255
    5d26:	93 07       	cpc	r25, r19
    5d28:	61 f0       	breq	.+24     	; 0x5d42 <ungetc+0x2c>
    5d2a:	82 83       	std	Z+2, r24	; 0x02
    5d2c:	2f 7d       	andi	r18, 0xDF	; 223
    5d2e:	20 64       	ori	r18, 0x40	; 64
    5d30:	23 83       	std	Z+3, r18	; 0x03
    5d32:	26 81       	ldd	r18, Z+6	; 0x06
    5d34:	37 81       	ldd	r19, Z+7	; 0x07
    5d36:	21 50       	subi	r18, 0x01	; 1
    5d38:	31 09       	sbc	r19, r1
    5d3a:	26 83       	std	Z+6, r18	; 0x06
    5d3c:	37 83       	std	Z+7, r19	; 0x07
    5d3e:	99 27       	eor	r25, r25
    5d40:	08 95       	ret
    5d42:	8f ef       	ldi	r24, 0xFF	; 255
    5d44:	9f ef       	ldi	r25, 0xFF	; 255
    5d46:	08 95       	ret

00005d48 <__ultoa_invert>:
    5d48:	fa 01       	movw	r30, r20
    5d4a:	aa 27       	eor	r26, r26
    5d4c:	28 30       	cpi	r18, 0x08	; 8
    5d4e:	51 f1       	breq	.+84     	; 0x5da4 <__ultoa_invert+0x5c>
    5d50:	20 31       	cpi	r18, 0x10	; 16
    5d52:	81 f1       	breq	.+96     	; 0x5db4 <__ultoa_invert+0x6c>
    5d54:	e8 94       	clt
    5d56:	6f 93       	push	r22
    5d58:	6e 7f       	andi	r22, 0xFE	; 254
    5d5a:	6e 5f       	subi	r22, 0xFE	; 254
    5d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d60:	9f 4f       	sbci	r25, 0xFF	; 255
    5d62:	af 4f       	sbci	r26, 0xFF	; 255
    5d64:	b1 e0       	ldi	r27, 0x01	; 1
    5d66:	3e d0       	rcall	.+124    	; 0x5de4 <__ultoa_invert+0x9c>
    5d68:	b4 e0       	ldi	r27, 0x04	; 4
    5d6a:	3c d0       	rcall	.+120    	; 0x5de4 <__ultoa_invert+0x9c>
    5d6c:	67 0f       	add	r22, r23
    5d6e:	78 1f       	adc	r23, r24
    5d70:	89 1f       	adc	r24, r25
    5d72:	9a 1f       	adc	r25, r26
    5d74:	a1 1d       	adc	r26, r1
    5d76:	68 0f       	add	r22, r24
    5d78:	79 1f       	adc	r23, r25
    5d7a:	8a 1f       	adc	r24, r26
    5d7c:	91 1d       	adc	r25, r1
    5d7e:	a1 1d       	adc	r26, r1
    5d80:	6a 0f       	add	r22, r26
    5d82:	71 1d       	adc	r23, r1
    5d84:	81 1d       	adc	r24, r1
    5d86:	91 1d       	adc	r25, r1
    5d88:	a1 1d       	adc	r26, r1
    5d8a:	20 d0       	rcall	.+64     	; 0x5dcc <__ultoa_invert+0x84>
    5d8c:	09 f4       	brne	.+2      	; 0x5d90 <__ultoa_invert+0x48>
    5d8e:	68 94       	set
    5d90:	3f 91       	pop	r19
    5d92:	2a e0       	ldi	r18, 0x0A	; 10
    5d94:	26 9f       	mul	r18, r22
    5d96:	11 24       	eor	r1, r1
    5d98:	30 19       	sub	r19, r0
    5d9a:	30 5d       	subi	r19, 0xD0	; 208
    5d9c:	31 93       	st	Z+, r19
    5d9e:	de f6       	brtc	.-74     	; 0x5d56 <__ultoa_invert+0xe>
    5da0:	cf 01       	movw	r24, r30
    5da2:	08 95       	ret
    5da4:	46 2f       	mov	r20, r22
    5da6:	47 70       	andi	r20, 0x07	; 7
    5da8:	40 5d       	subi	r20, 0xD0	; 208
    5daa:	41 93       	st	Z+, r20
    5dac:	b3 e0       	ldi	r27, 0x03	; 3
    5dae:	0f d0       	rcall	.+30     	; 0x5dce <__ultoa_invert+0x86>
    5db0:	c9 f7       	brne	.-14     	; 0x5da4 <__ultoa_invert+0x5c>
    5db2:	f6 cf       	rjmp	.-20     	; 0x5da0 <__ultoa_invert+0x58>
    5db4:	46 2f       	mov	r20, r22
    5db6:	4f 70       	andi	r20, 0x0F	; 15
    5db8:	40 5d       	subi	r20, 0xD0	; 208
    5dba:	4a 33       	cpi	r20, 0x3A	; 58
    5dbc:	18 f0       	brcs	.+6      	; 0x5dc4 <__ultoa_invert+0x7c>
    5dbe:	49 5d       	subi	r20, 0xD9	; 217
    5dc0:	31 fd       	sbrc	r19, 1
    5dc2:	40 52       	subi	r20, 0x20	; 32
    5dc4:	41 93       	st	Z+, r20
    5dc6:	02 d0       	rcall	.+4      	; 0x5dcc <__ultoa_invert+0x84>
    5dc8:	a9 f7       	brne	.-22     	; 0x5db4 <__ultoa_invert+0x6c>
    5dca:	ea cf       	rjmp	.-44     	; 0x5da0 <__ultoa_invert+0x58>
    5dcc:	b4 e0       	ldi	r27, 0x04	; 4
    5dce:	a6 95       	lsr	r26
    5dd0:	97 95       	ror	r25
    5dd2:	87 95       	ror	r24
    5dd4:	77 95       	ror	r23
    5dd6:	67 95       	ror	r22
    5dd8:	ba 95       	dec	r27
    5dda:	c9 f7       	brne	.-14     	; 0x5dce <__ultoa_invert+0x86>
    5ddc:	00 97       	sbiw	r24, 0x00	; 0
    5dde:	61 05       	cpc	r22, r1
    5de0:	71 05       	cpc	r23, r1
    5de2:	08 95       	ret
    5de4:	9b 01       	movw	r18, r22
    5de6:	ac 01       	movw	r20, r24
    5de8:	0a 2e       	mov	r0, r26
    5dea:	06 94       	lsr	r0
    5dec:	57 95       	ror	r21
    5dee:	47 95       	ror	r20
    5df0:	37 95       	ror	r19
    5df2:	27 95       	ror	r18
    5df4:	ba 95       	dec	r27
    5df6:	c9 f7       	brne	.-14     	; 0x5dea <__ultoa_invert+0xa2>
    5df8:	62 0f       	add	r22, r18
    5dfa:	73 1f       	adc	r23, r19
    5dfc:	84 1f       	adc	r24, r20
    5dfe:	95 1f       	adc	r25, r21
    5e00:	a0 1d       	adc	r26, r0
    5e02:	08 95       	ret

00005e04 <__ctype_isfalse>:
    5e04:	99 27       	eor	r25, r25
    5e06:	88 27       	eor	r24, r24

00005e08 <__ctype_istrue>:
    5e08:	08 95       	ret

00005e0a <_exit>:
    5e0a:	f8 94       	cli

00005e0c <__stop_program>:
    5e0c:	ff cf       	rjmp	.-2      	; 0x5e0c <__stop_program>
