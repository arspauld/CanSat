
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000439a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00802000  0000439a  0000442e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ec  008020bc  008020bc  000044ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000044ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  00004588  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010e86  00000000  00000000  00004a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046a5  00000000  00000000  000158ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000817d  00000000  00000000  00019f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001368  00000000  00000000  000220f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000381d8  00000000  00000000  00023458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000053b2  00000000  00000000  0005b630  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b0  00000000  00000000  000609e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002f4f  00000000  00000000  00060e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c3       	rjmp	.+1550   	; 0x644 <__vector_13>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f7 c2       	rjmp	.+1518   	; 0x6a8 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__vector_47>
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__vector_58>
      ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
     102:	00 00       	nop
     104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
     106:	00 00       	nop
     108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
     112:	00 00       	nop
     114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
     116:	00 00       	nop
     118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
     136:	00 00       	nop
     138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
     142:	00 00       	nop
     144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
     146:	00 00       	nop
     148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
     152:	00 00       	nop
     154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
     156:	00 00       	nop
     158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
     162:	00 00       	nop
     164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
     166:	00 00       	nop
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__vector_91>
     170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
     172:	00 00       	nop
     174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
     176:	00 00       	nop
     178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
     182:	00 00       	nop
     184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
     186:	00 00       	nop
     188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
     192:	00 00       	nop
     194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
     196:	00 00       	nop
     198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6e c0       	rjmp	.+220    	; 0x2d6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <usart_init_rs232+0x12a>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	63 64       	ori	r22, 0x43	; 67
     280:	69 6e       	ori	r22, 0xE9	; 233
     282:	6f 70       	andi	r22, 0x0F	; 15
     284:	73 75       	andi	r23, 0x53	; 83
     286:	78 58       	subi	r23, 0x88	; 136
     288:	5b 00       	.word	0x005b	; ????

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df e3       	ldi	r29, 0x3F	; 63
     294:	de bf       	out	0x3e, r29	; 62
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0c bf       	out	0x3c, r16	; 60
     29a:	18 be       	out	0x38, r1	; 56
     29c:	19 be       	out	0x39, r1	; 57
     29e:	1a be       	out	0x3a, r1	; 58
     2a0:	1b be       	out	0x3b, r1	; 59

000002a2 <__do_copy_data>:
     2a2:	10 e2       	ldi	r17, 0x20	; 32
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e2       	ldi	r27, 0x20	; 32
     2a8:	ea e9       	ldi	r30, 0x9A	; 154
     2aa:	f3 e4       	ldi	r31, 0x43	; 67
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	ac 3b       	cpi	r26, 0xBC	; 188
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>
     2bc:	1b be       	out	0x3b, r1	; 59

000002be <__do_clear_bss>:
     2be:	21 e2       	ldi	r18, 0x21	; 33
     2c0:	ac eb       	ldi	r26, 0xBC	; 188
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	a8 3a       	cpi	r26, 0xA8	; 168
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 92 11 	call	0x2324	; 0x2324 <main>
     2d2:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2e2:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <stdio_base>
     2e6:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <stdio_base+0x1>
     2ea:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <ptr_get>
     2ee:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <ptr_get+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	19 95       	eicall
	return c;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     30a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     30c:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <stdio_base>
     310:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <stdio_base+0x1>
     314:	e0 91 20 21 	lds	r30, 0x2120	; 0x802120 <ptr_put>
     318:	f0 91 21 21 	lds	r31, 0x2121	; 0x802121 <ptr_put+0x1>
     31c:	19 95       	eicall
     31e:	99 23       	and	r25, r25
     320:	1c f0       	brlt	.+6      	; 0x328 <_write+0x1e>
		return -1;
	}
	return 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <adca_callback>
     36e:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <adca_callback>
     3e8:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <adca_callback>
     462:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <adca_callback>
     4dc:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     51a:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <__data_end>
     51e:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <__data_end+0x1>
     522:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     524:	83 ff       	sbrs	r24, 3
     526:	08 c0       	rjmp	.+16     	; 0x538 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     528:	88 60       	ori	r24, 0x08	; 8
     52a:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     530:	86 ef       	ldi	r24, 0xF6	; 246
     532:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <__data_end+0xa>
     536:	83 c0       	rjmp	.+262    	; 0x63e <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     538:	98 2f       	mov	r25, r24
     53a:	94 71       	andi	r25, 0x14	; 20
     53c:	31 f0       	breq	.+12     	; 0x54a <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <__data_end+0xa>
     548:	7a c0       	rjmp	.+244    	; 0x63e <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     54a:	86 ff       	sbrs	r24, 6
     54c:	43 c0       	rjmp	.+134    	; 0x5d4 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     54e:	cc eb       	ldi	r28, 0xBC	; 188
     550:	d0 e2       	ldi	r29, 0x20	; 32
     552:	aa 81       	ldd	r26, Y+2	; 0x02
     554:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     556:	8c 81       	ldd	r24, Y+4	; 0x04
     558:	9d 81       	ldd	r25, Y+5	; 0x05
     55a:	14 96       	adiw	r26, 0x04	; 4
     55c:	2d 91       	ld	r18, X+
     55e:	3c 91       	ld	r19, X
     560:	15 97       	sbiw	r26, 0x05	; 5
     562:	82 17       	cp	r24, r18
     564:	93 07       	cpc	r25, r19
     566:	6c f4       	brge	.+26     	; 0x582 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     568:	9c 01       	movw	r18, r24
     56a:	2f 5f       	subi	r18, 0xFF	; 255
     56c:	3f 4f       	sbci	r19, 0xFF	; 255
     56e:	20 93 c0 20 	sts	0x20C0, r18	; 0x8020c0 <__data_end+0x4>
     572:	30 93 c1 20 	sts	0x20C1, r19	; 0x8020c1 <__data_end+0x5>
     576:	a8 0f       	add	r26, r24
     578:	b9 1f       	adc	r27, r25
     57a:	11 96       	adiw	r26, 0x01	; 1
     57c:	8c 91       	ld	r24, X
     57e:	87 83       	std	Z+7, r24	; 0x07
     580:	5e c0       	rjmp	.+188    	; 0x63e <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     582:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <__data_end+0x6>
     586:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <__data_end+0x7>
     58a:	18 96       	adiw	r26, 0x08	; 8
     58c:	2d 91       	ld	r18, X+
     58e:	3c 91       	ld	r19, X
     590:	19 97       	sbiw	r26, 0x09	; 9
     592:	82 17       	cp	r24, r18
     594:	93 07       	cpc	r25, r19
     596:	c8 f4       	brcc	.+50     	; 0x5ca <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     598:	20 91 c4 20 	lds	r18, 0x20C4	; 0x8020c4 <__data_end+0x8>
     59c:	22 23       	and	r18, r18
     59e:	21 f0       	breq	.+8      	; 0x5a8 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     5a0:	86 81       	ldd	r24, Z+6	; 0x06
     5a2:	81 60       	ori	r24, 0x01	; 1
     5a4:	86 83       	std	Z+6, r24	; 0x06
     5a6:	4b c0       	rjmp	.+150    	; 0x63e <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     5a8:	16 96       	adiw	r26, 0x06	; 6
     5aa:	2d 91       	ld	r18, X+
     5ac:	3c 91       	ld	r19, X
     5ae:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     5b0:	ac 01       	movw	r20, r24
     5b2:	4f 5f       	subi	r20, 0xFF	; 255
     5b4:	5f 4f       	sbci	r21, 0xFF	; 255
     5b6:	40 93 c2 20 	sts	0x20C2, r20	; 0x8020c2 <__data_end+0x6>
     5ba:	50 93 c3 20 	sts	0x20C3, r21	; 0x8020c3 <__data_end+0x7>
     5be:	d9 01       	movw	r26, r18
     5c0:	a8 0f       	add	r26, r24
     5c2:	b9 1f       	adc	r27, r25
     5c4:	8c 91       	ld	r24, X
     5c6:	87 83       	std	Z+7, r24	; 0x07
     5c8:	3a c0       	rjmp	.+116    	; 0x63e <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     5ce:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <__data_end+0xa>
     5d2:	35 c0       	rjmp	.+106    	; 0x63e <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     5d4:	88 23       	and	r24, r24
     5d6:	84 f5       	brge	.+96     	; 0x638 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     5d8:	ac eb       	ldi	r26, 0xBC	; 188
     5da:	b0 e2       	ldi	r27, 0x20	; 32
     5dc:	12 96       	adiw	r26, 0x02	; 2
     5de:	cd 91       	ld	r28, X+
     5e0:	dc 91       	ld	r29, X
     5e2:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     5e4:	16 96       	adiw	r26, 0x06	; 6
     5e6:	8d 91       	ld	r24, X+
     5e8:	9c 91       	ld	r25, X
     5ea:	17 97       	sbiw	r26, 0x07	; 7
     5ec:	28 85       	ldd	r18, Y+8	; 0x08
     5ee:	39 85       	ldd	r19, Y+9	; 0x09
     5f0:	82 17       	cp	r24, r18
     5f2:	93 07       	cpc	r25, r19
     5f4:	d8 f4       	brcc	.+54     	; 0x62c <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     5f6:	6e 81       	ldd	r22, Y+6	; 0x06
     5f8:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     5fa:	9c 01       	movw	r18, r24
     5fc:	2f 5f       	subi	r18, 0xFF	; 255
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	20 93 c2 20 	sts	0x20C2, r18	; 0x8020c2 <__data_end+0x6>
     604:	30 93 c3 20 	sts	0x20C3, r19	; 0x8020c3 <__data_end+0x7>
     608:	47 81       	ldd	r20, Z+7	; 0x07
     60a:	db 01       	movw	r26, r22
     60c:	a8 0f       	add	r26, r24
     60e:	b9 1f       	adc	r27, r25
     610:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     612:	88 85       	ldd	r24, Y+8	; 0x08
     614:	99 85       	ldd	r25, Y+9	; 0x09
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	18 f4       	brcc	.+6      	; 0x622 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	83 83       	std	Z+3, r24	; 0x03
     620:	0e c0       	rjmp	.+28     	; 0x63e <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     622:	87 e0       	ldi	r24, 0x07	; 7
     624:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     626:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <__data_end+0xa>
     62a:	09 c0       	rjmp	.+18     	; 0x63e <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     630:	89 ef       	ldi	r24, 0xF9	; 249
     632:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <__data_end+0xa>
     636:	03 c0       	rjmp	.+6      	; 0x63e <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     638:	8b ef       	ldi	r24, 0xFB	; 251
     63a:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <__data_end+0xa>
	}
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     644:	1f 92       	push	r1
     646:	0f 92       	push	r0
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	0f 92       	push	r0
     64c:	11 24       	eor	r1, r1
     64e:	08 b6       	in	r0, 0x38	; 56
     650:	0f 92       	push	r0
     652:	18 be       	out	0x38, r1	; 56
     654:	09 b6       	in	r0, 0x39	; 57
     656:	0f 92       	push	r0
     658:	19 be       	out	0x39, r1	; 57
     65a:	0b b6       	in	r0, 0x3b	; 59
     65c:	0f 92       	push	r0
     65e:	1b be       	out	0x3b, r1	; 59
     660:	2f 93       	push	r18
     662:	3f 93       	push	r19
     664:	4f 93       	push	r20
     666:	5f 93       	push	r21
     668:	6f 93       	push	r22
     66a:	7f 93       	push	r23
     66c:	8f 93       	push	r24
     66e:	9f 93       	push	r25
     670:	af 93       	push	r26
     672:	bf 93       	push	r27
     674:	ef 93       	push	r30
     676:	ff 93       	push	r31
     678:	4e df       	rcall	.-356    	; 0x516 <twim_interrupt_handler>
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0b be       	out	0x3b, r0	; 59
     696:	0f 90       	pop	r0
     698:	09 be       	out	0x39, r0	; 57
     69a:	0f 90       	pop	r0
     69c:	08 be       	out	0x38, r0	; 56
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	08 b6       	in	r0, 0x38	; 56
     6b4:	0f 92       	push	r0
     6b6:	18 be       	out	0x38, r1	; 56
     6b8:	09 b6       	in	r0, 0x39	; 57
     6ba:	0f 92       	push	r0
     6bc:	19 be       	out	0x39, r1	; 57
     6be:	0b b6       	in	r0, 0x3b	; 59
     6c0:	0f 92       	push	r0
     6c2:	1b be       	out	0x3b, r1	; 59
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	4f 93       	push	r20
     6ca:	5f 93       	push	r21
     6cc:	6f 93       	push	r22
     6ce:	7f 93       	push	r23
     6d0:	8f 93       	push	r24
     6d2:	9f 93       	push	r25
     6d4:	af 93       	push	r26
     6d6:	bf 93       	push	r27
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
     6dc:	1c df       	rcall	.-456    	; 0x516 <twim_interrupt_handler>
     6de:	ff 91       	pop	r31
     6e0:	ef 91       	pop	r30
     6e2:	bf 91       	pop	r27
     6e4:	af 91       	pop	r26
     6e6:	9f 91       	pop	r25
     6e8:	8f 91       	pop	r24
     6ea:	7f 91       	pop	r23
     6ec:	6f 91       	pop	r22
     6ee:	5f 91       	pop	r21
     6f0:	4f 91       	pop	r20
     6f2:	3f 91       	pop	r19
     6f4:	2f 91       	pop	r18
     6f6:	0f 90       	pop	r0
     6f8:	0b be       	out	0x3b, r0	; 59
     6fa:	0f 90       	pop	r0
     6fc:	09 be       	out	0x39, r0	; 57
     6fe:	0f 90       	pop	r0
     700:	08 be       	out	0x38, r0	; 56
     702:	0f 90       	pop	r0
     704:	0f be       	out	0x3f, r0	; 63
     706:	0f 90       	pop	r0
     708:	1f 90       	pop	r1
     70a:	18 95       	reti

0000070c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     70c:	fc 01       	movw	r30, r24
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	95 ff       	sbrs	r25, 5
     712:	fd cf       	rjmp	.-6      	; 0x70e <usart_putchar+0x2>
     714:	60 83       	st	Z, r22
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	08 95       	ret

0000071c <usart_getchar>:
     71c:	fc 01       	movw	r30, r24
     71e:	91 81       	ldd	r25, Z+1	; 0x01
     720:	99 23       	and	r25, r25
     722:	ec f7       	brge	.-6      	; 0x71e <usart_getchar+0x2>
     724:	80 81       	ld	r24, Z
     726:	08 95       	ret

00000728 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     728:	4f 92       	push	r4
     72a:	5f 92       	push	r5
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	7c 01       	movw	r14, r24
     744:	4a 01       	movw	r8, r20
     746:	5b 01       	movw	r10, r22
     748:	28 01       	movw	r4, r16
     74a:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     74c:	fc 01       	movw	r30, r24
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	82 ff       	sbrs	r24, 2
     752:	16 c0       	rjmp	.+44     	; 0x780 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     754:	d9 01       	movw	r26, r18
     756:	c8 01       	movw	r24, r16
     758:	68 94       	set
     75a:	12 f8       	bld	r1, 2
     75c:	b6 95       	lsr	r27
     75e:	a7 95       	ror	r26
     760:	97 95       	ror	r25
     762:	87 95       	ror	r24
     764:	16 94       	lsr	r1
     766:	d1 f7       	brne	.-12     	; 0x75c <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     768:	b9 01       	movw	r22, r18
     76a:	a8 01       	movw	r20, r16
     76c:	03 2e       	mov	r0, r19
     76e:	36 e1       	ldi	r19, 0x16	; 22
     770:	76 95       	lsr	r23
     772:	67 95       	ror	r22
     774:	57 95       	ror	r21
     776:	47 95       	ror	r20
     778:	3a 95       	dec	r19
     77a:	d1 f7       	brne	.-12     	; 0x770 <usart_set_baudrate+0x48>
     77c:	30 2d       	mov	r19, r0
     77e:	15 c0       	rjmp	.+42     	; 0x7aa <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     780:	d9 01       	movw	r26, r18
     782:	c8 01       	movw	r24, r16
     784:	68 94       	set
     786:	13 f8       	bld	r1, 3
     788:	b6 95       	lsr	r27
     78a:	a7 95       	ror	r26
     78c:	97 95       	ror	r25
     78e:	87 95       	ror	r24
     790:	16 94       	lsr	r1
     792:	d1 f7       	brne	.-12     	; 0x788 <usart_set_baudrate+0x60>
		min_rate /= 2;
     794:	b9 01       	movw	r22, r18
     796:	a8 01       	movw	r20, r16
     798:	03 2e       	mov	r0, r19
     79a:	37 e1       	ldi	r19, 0x17	; 23
     79c:	76 95       	lsr	r23
     79e:	67 95       	ror	r22
     7a0:	57 95       	ror	r21
     7a2:	47 95       	ror	r20
     7a4:	3a 95       	dec	r19
     7a6:	d1 f7       	brne	.-12     	; 0x79c <usart_set_baudrate+0x74>
     7a8:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     7aa:	88 15       	cp	r24, r8
     7ac:	99 05       	cpc	r25, r9
     7ae:	aa 05       	cpc	r26, r10
     7b0:	bb 05       	cpc	r27, r11
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <usart_set_baudrate+0x8e>
     7b4:	a6 c0       	rjmp	.+332    	; 0x902 <usart_set_baudrate+0x1da>
     7b6:	84 16       	cp	r8, r20
     7b8:	95 06       	cpc	r9, r21
     7ba:	a6 06       	cpc	r10, r22
     7bc:	b7 06       	cpc	r11, r23
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <usart_set_baudrate+0x9a>
     7c0:	a2 c0       	rjmp	.+324    	; 0x906 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7c2:	f7 01       	movw	r30, r14
     7c4:	84 81       	ldd	r24, Z+4	; 0x04
     7c6:	82 fd       	sbrc	r24, 2
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <usart_set_baudrate+0xaa>
		baud *= 2;
     7ca:	88 0c       	add	r8, r8
     7cc:	99 1c       	adc	r9, r9
     7ce:	aa 1c       	adc	r10, r10
     7d0:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7d2:	c3 01       	movw	r24, r6
     7d4:	b2 01       	movw	r22, r4
     7d6:	a5 01       	movw	r20, r10
     7d8:	94 01       	movw	r18, r8
     7da:	0e 94 97 19 	call	0x332e	; 0x332e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7de:	2f 3f       	cpi	r18, 0xFF	; 255
     7e0:	31 05       	cpc	r19, r1
     7e2:	41 05       	cpc	r20, r1
     7e4:	51 05       	cpc	r21, r1
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <usart_set_baudrate+0xc2>
     7e8:	90 c0       	rjmp	.+288    	; 0x90a <usart_set_baudrate+0x1e2>
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	c9 ef       	ldi	r28, 0xF9	; 249
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <usart_set_baudrate+0xd8>
     7f6:	28 17       	cp	r18, r24
     7f8:	39 07       	cpc	r19, r25
     7fa:	4a 07       	cpc	r20, r26
     7fc:	5b 07       	cpc	r21, r27
     7fe:	58 f0       	brcs	.+22     	; 0x816 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	aa 1f       	adc	r26, r26
     806:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     808:	cd 3f       	cpi	r28, 0xFD	; 253
     80a:	0c f4       	brge	.+2      	; 0x80e <usart_set_baudrate+0xe6>
			limit |= 1;
     80c:	81 60       	ori	r24, 0x01	; 1
     80e:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     810:	c7 30       	cpi	r28, 0x07	; 7
     812:	89 f7       	brne	.-30     	; 0x7f6 <usart_set_baudrate+0xce>
     814:	4f c0       	rjmp	.+158    	; 0x8b4 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     816:	cc 23       	and	r28, r28
     818:	0c f0       	brlt	.+2      	; 0x81c <usart_set_baudrate+0xf4>
     81a:	4c c0       	rjmp	.+152    	; 0x8b4 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     81c:	d5 01       	movw	r26, r10
     81e:	c4 01       	movw	r24, r8
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	aa 1f       	adc	r26, r26
     826:	bb 1f       	adc	r27, r27
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	aa 1f       	adc	r26, r26
     82e:	bb 1f       	adc	r27, r27
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	aa 1f       	adc	r26, r26
     836:	bb 1f       	adc	r27, r27
     838:	48 1a       	sub	r4, r24
     83a:	59 0a       	sbc	r5, r25
     83c:	6a 0a       	sbc	r6, r26
     83e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     840:	ce 3f       	cpi	r28, 0xFE	; 254
     842:	f4 f4       	brge	.+60     	; 0x880 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     844:	8d ef       	ldi	r24, 0xFD	; 253
     846:	9f ef       	ldi	r25, 0xFF	; 255
     848:	8c 1b       	sub	r24, r28
     84a:	91 09       	sbc	r25, r1
     84c:	c7 fd       	sbrc	r28, 7
     84e:	93 95       	inc	r25
     850:	04 c0       	rjmp	.+8      	; 0x85a <usart_set_baudrate+0x132>
     852:	44 0c       	add	r4, r4
     854:	55 1c       	adc	r5, r5
     856:	66 1c       	adc	r6, r6
     858:	77 1c       	adc	r7, r7
     85a:	8a 95       	dec	r24
     85c:	d2 f7       	brpl	.-12     	; 0x852 <usart_set_baudrate+0x12a>
     85e:	d5 01       	movw	r26, r10
     860:	c4 01       	movw	r24, r8
     862:	b6 95       	lsr	r27
     864:	a7 95       	ror	r26
     866:	97 95       	ror	r25
     868:	87 95       	ror	r24
     86a:	bc 01       	movw	r22, r24
     86c:	cd 01       	movw	r24, r26
     86e:	64 0d       	add	r22, r4
     870:	75 1d       	adc	r23, r5
     872:	86 1d       	adc	r24, r6
     874:	97 1d       	adc	r25, r7
     876:	a5 01       	movw	r20, r10
     878:	94 01       	movw	r18, r8
     87a:	0e 94 97 19 	call	0x332e	; 0x332e <__udivmodsi4>
     87e:	37 c0       	rjmp	.+110    	; 0x8ee <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	8c 0f       	add	r24, r28
     884:	a5 01       	movw	r20, r10
     886:	94 01       	movw	r18, r8
     888:	04 c0       	rjmp	.+8      	; 0x892 <usart_set_baudrate+0x16a>
     88a:	22 0f       	add	r18, r18
     88c:	33 1f       	adc	r19, r19
     88e:	44 1f       	adc	r20, r20
     890:	55 1f       	adc	r21, r21
     892:	8a 95       	dec	r24
     894:	d2 f7       	brpl	.-12     	; 0x88a <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     896:	da 01       	movw	r26, r20
     898:	c9 01       	movw	r24, r18
     89a:	b6 95       	lsr	r27
     89c:	a7 95       	ror	r26
     89e:	97 95       	ror	r25
     8a0:	87 95       	ror	r24
     8a2:	bc 01       	movw	r22, r24
     8a4:	cd 01       	movw	r24, r26
     8a6:	64 0d       	add	r22, r4
     8a8:	75 1d       	adc	r23, r5
     8aa:	86 1d       	adc	r24, r6
     8ac:	97 1d       	adc	r25, r7
     8ae:	0e 94 97 19 	call	0x332e	; 0x332e <__udivmodsi4>
     8b2:	1d c0       	rjmp	.+58     	; 0x8ee <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	8c 0f       	add	r24, r28
     8b8:	a5 01       	movw	r20, r10
     8ba:	94 01       	movw	r18, r8
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <usart_set_baudrate+0x19e>
     8be:	22 0f       	add	r18, r18
     8c0:	33 1f       	adc	r19, r19
     8c2:	44 1f       	adc	r20, r20
     8c4:	55 1f       	adc	r21, r21
     8c6:	8a 95       	dec	r24
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8ca:	da 01       	movw	r26, r20
     8cc:	c9 01       	movw	r24, r18
     8ce:	b6 95       	lsr	r27
     8d0:	a7 95       	ror	r26
     8d2:	97 95       	ror	r25
     8d4:	87 95       	ror	r24
     8d6:	bc 01       	movw	r22, r24
     8d8:	cd 01       	movw	r24, r26
     8da:	64 0d       	add	r22, r4
     8dc:	75 1d       	adc	r23, r5
     8de:	86 1d       	adc	r24, r6
     8e0:	97 1d       	adc	r25, r7
     8e2:	0e 94 97 19 	call	0x332e	; 0x332e <__udivmodsi4>
     8e6:	21 50       	subi	r18, 0x01	; 1
     8e8:	31 09       	sbc	r19, r1
     8ea:	41 09       	sbc	r20, r1
     8ec:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8ee:	83 2f       	mov	r24, r19
     8f0:	8f 70       	andi	r24, 0x0F	; 15
     8f2:	c2 95       	swap	r28
     8f4:	c0 7f       	andi	r28, 0xF0	; 240
     8f6:	c8 2b       	or	r28, r24
     8f8:	f7 01       	movw	r30, r14
     8fa:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8fc:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	18 c0       	rjmp	.+48     	; 0x932 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	16 c0       	rjmp	.+44     	; 0x932 <usart_set_baudrate+0x20a>
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	14 c0       	rjmp	.+40     	; 0x932 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     90a:	d5 01       	movw	r26, r10
     90c:	c4 01       	movw	r24, r8
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	aa 1f       	adc	r26, r26
     914:	bb 1f       	adc	r27, r27
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	aa 1f       	adc	r26, r26
     91c:	bb 1f       	adc	r27, r27
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	aa 1f       	adc	r26, r26
     924:	bb 1f       	adc	r27, r27
     926:	48 1a       	sub	r4, r24
     928:	59 0a       	sbc	r5, r25
     92a:	6a 0a       	sbc	r6, r26
     92c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     92e:	c9 ef       	ldi	r28, 0xF9	; 249
     930:	89 cf       	rjmp	.-238    	; 0x844 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	08 95       	ret

0000094e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ec 01       	movw	r28, r24
     958:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	09 f4       	brne	.+2      	; 0x960 <usart_init_rs232+0x12>
     95e:	be c0       	rjmp	.+380    	; 0xadc <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     960:	80 3c       	cpi	r24, 0xC0	; 192
     962:	91 05       	cpc	r25, r1
     964:	21 f4       	brne	.+8      	; 0x96e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     966:	60 e1       	ldi	r22, 0x10	; 16
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	05 d3       	rcall	.+1546   	; 0xf76 <sysclk_enable_module>
     96c:	b7 c0       	rjmp	.+366    	; 0xadc <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     96e:	c1 15       	cp	r28, r1
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	d8 07       	cpc	r29, r24
     974:	21 f4       	brne	.+8      	; 0x97e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     976:	64 e0       	ldi	r22, 0x04	; 4
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	fd d2       	rcall	.+1530   	; 0xf76 <sysclk_enable_module>
     97c:	af c0       	rjmp	.+350    	; 0xadc <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     97e:	c0 38       	cpi	r28, 0x80	; 128
     980:	e1 e0       	ldi	r30, 0x01	; 1
     982:	de 07       	cpc	r29, r30
     984:	21 f4       	brne	.+8      	; 0x98e <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     986:	62 e0       	ldi	r22, 0x02	; 2
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	f5 d2       	rcall	.+1514   	; 0xf76 <sysclk_enable_module>
     98c:	a7 c0       	rjmp	.+334    	; 0xadc <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     98e:	c1 15       	cp	r28, r1
     990:	f1 e0       	ldi	r31, 0x01	; 1
     992:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     994:	21 f4       	brne	.+8      	; 0x99e <usart_init_rs232+0x50>
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	ed d2       	rcall	.+1498   	; 0xf76 <sysclk_enable_module>
     99c:	9f c0       	rjmp	.+318    	; 0xadc <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     99e:	c0 38       	cpi	r28, 0x80	; 128
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     9a4:	21 f4       	brne	.+8      	; 0x9ae <usart_init_rs232+0x60>
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	e5 d2       	rcall	.+1482   	; 0xf76 <sysclk_enable_module>
     9ac:	97 c0       	rjmp	.+302    	; 0xadc <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9ae:	c1 15       	cp	r28, r1
     9b0:	e2 e0       	ldi	r30, 0x02	; 2
     9b2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9b4:	21 f4       	brne	.+8      	; 0x9be <usart_init_rs232+0x70>
     9b6:	62 e0       	ldi	r22, 0x02	; 2
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	dd d2       	rcall	.+1466   	; 0xf76 <sysclk_enable_module>
     9bc:	8f c0       	rjmp	.+286    	; 0xadc <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9be:	c0 32       	cpi	r28, 0x20	; 32
     9c0:	f3 e0       	ldi	r31, 0x03	; 3
     9c2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9c4:	21 f4       	brne	.+8      	; 0x9ce <usart_init_rs232+0x80>
     9c6:	64 e0       	ldi	r22, 0x04	; 4
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	d5 d2       	rcall	.+1450   	; 0xf76 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9cc:	87 c0       	rjmp	.+270    	; 0xadc <usart_init_rs232+0x18e>
     9ce:	c1 15       	cp	r28, r1
     9d0:	88 e0       	ldi	r24, 0x08	; 8
     9d2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9d4:	21 f4       	brne	.+8      	; 0x9de <usart_init_rs232+0x90>
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	cd d2       	rcall	.+1434   	; 0xf76 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     9dc:	7f c0       	rjmp	.+254    	; 0xadc <usart_init_rs232+0x18e>
     9de:	c1 15       	cp	r28, r1
     9e0:	e9 e0       	ldi	r30, 0x09	; 9
     9e2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     9e4:	21 f4       	brne	.+8      	; 0x9ee <usart_init_rs232+0xa0>
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	c5 d2       	rcall	.+1418   	; 0xf76 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     9ec:	77 c0       	rjmp	.+238    	; 0xadc <usart_init_rs232+0x18e>
     9ee:	c1 15       	cp	r28, r1
     9f0:	fa e0       	ldi	r31, 0x0A	; 10
     9f2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     9f4:	21 f4       	brne	.+8      	; 0x9fe <usart_init_rs232+0xb0>
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	85 e0       	ldi	r24, 0x05	; 5
     9fa:	bd d2       	rcall	.+1402   	; 0xf76 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     9fc:	6f c0       	rjmp	.+222    	; 0xadc <usart_init_rs232+0x18e>
     9fe:	c0 34       	cpi	r28, 0x40	; 64
     a00:	88 e0       	ldi	r24, 0x08	; 8
     a02:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a04:	21 f4       	brne	.+8      	; 0xa0e <usart_init_rs232+0xc0>
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	b5 d2       	rcall	.+1386   	; 0xf76 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a0c:	67 c0       	rjmp	.+206    	; 0xadc <usart_init_rs232+0x18e>
     a0e:	c0 34       	cpi	r28, 0x40	; 64
     a10:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a12:	de 07       	cpc	r29, r30
     a14:	21 f4       	brne	.+8      	; 0xa1e <usart_init_rs232+0xd0>
     a16:	62 e0       	ldi	r22, 0x02	; 2
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	ad d2       	rcall	.+1370   	; 0xf76 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a1c:	5f c0       	rjmp	.+190    	; 0xadc <usart_init_rs232+0x18e>
     a1e:	c0 39       	cpi	r28, 0x90	; 144
     a20:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a22:	df 07       	cpc	r29, r31
     a24:	21 f4       	brne	.+8      	; 0xa2e <usart_init_rs232+0xe0>
     a26:	64 e0       	ldi	r22, 0x04	; 4
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	a5 d2       	rcall	.+1354   	; 0xf76 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a2c:	57 c0       	rjmp	.+174    	; 0xadc <usart_init_rs232+0x18e>
     a2e:	c0 39       	cpi	r28, 0x90	; 144
     a30:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a32:	d8 07       	cpc	r29, r24
     a34:	21 f4       	brne	.+8      	; 0xa3e <usart_init_rs232+0xf0>
     a36:	64 e0       	ldi	r22, 0x04	; 4
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	9d d2       	rcall	.+1338   	; 0xf76 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a3c:	4f c0       	rjmp	.+158    	; 0xadc <usart_init_rs232+0x18e>
     a3e:	c0 39       	cpi	r28, 0x90	; 144
     a40:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a42:	de 07       	cpc	r29, r30
     a44:	21 f4       	brne	.+8      	; 0xa4e <usart_init_rs232+0x100>
     a46:	64 e0       	ldi	r22, 0x04	; 4
     a48:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     a4a:	95 d2       	rcall	.+1322   	; 0xf76 <sysclk_enable_module>
     a4c:	47 c0       	rjmp	.+142    	; 0xadc <usart_init_rs232+0x18e>
     a4e:	c0 3c       	cpi	r28, 0xC0	; 192
     a50:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     a52:	df 07       	cpc	r29, r31
     a54:	21 f4       	brne	.+8      	; 0xa5e <usart_init_rs232+0x110>
     a56:	68 e0       	ldi	r22, 0x08	; 8
     a58:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     a5a:	8d d2       	rcall	.+1306   	; 0xf76 <sysclk_enable_module>
     a5c:	3f c0       	rjmp	.+126    	; 0xadc <usart_init_rs232+0x18e>
     a5e:	c0 3c       	cpi	r28, 0xC0	; 192
     a60:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     a62:	d8 07       	cpc	r29, r24
     a64:	21 f4       	brne	.+8      	; 0xa6e <usart_init_rs232+0x120>
     a66:	68 e0       	ldi	r22, 0x08	; 8
     a68:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     a6a:	85 d2       	rcall	.+1290   	; 0xf76 <sysclk_enable_module>
     a6c:	37 c0       	rjmp	.+110    	; 0xadc <usart_init_rs232+0x18e>
     a6e:	c0 3a       	cpi	r28, 0xA0	; 160
     a70:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     a72:	de 07       	cpc	r29, r30
     a74:	21 f4       	brne	.+8      	; 0xa7e <usart_init_rs232+0x130>
     a76:	60 e1       	ldi	r22, 0x10	; 16
     a78:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     a7a:	7d d2       	rcall	.+1274   	; 0xf76 <sysclk_enable_module>
     a7c:	2f c0       	rjmp	.+94     	; 0xadc <usart_init_rs232+0x18e>
     a7e:	c0 3a       	cpi	r28, 0xA0	; 160
     a80:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     a82:	df 07       	cpc	r29, r31
     a84:	21 f4       	brne	.+8      	; 0xa8e <usart_init_rs232+0x140>
     a86:	60 e1       	ldi	r22, 0x10	; 16
     a88:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     a8a:	75 d2       	rcall	.+1258   	; 0xf76 <sysclk_enable_module>
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <usart_init_rs232+0x18e>
     a8e:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	d8 07       	cpc	r29, r24
     a94:	21 f4       	brne	.+8      	; 0xa9e <usart_init_rs232+0x150>
     a96:	60 e1       	ldi	r22, 0x10	; 16
     a98:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     a9a:	6d d2       	rcall	.+1242   	; 0xf76 <sysclk_enable_module>
     a9c:	1f c0       	rjmp	.+62     	; 0xadc <usart_init_rs232+0x18e>
     a9e:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     aa0:	e8 e0       	ldi	r30, 0x08	; 8
     aa2:	de 07       	cpc	r29, r30
     aa4:	21 f4       	brne	.+8      	; 0xaae <usart_init_rs232+0x160>
     aa6:	60 e2       	ldi	r22, 0x20	; 32
     aa8:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     aaa:	65 d2       	rcall	.+1226   	; 0xf76 <sysclk_enable_module>
     aac:	17 c0       	rjmp	.+46     	; 0xadc <usart_init_rs232+0x18e>
     aae:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     ab0:	f9 e0       	ldi	r31, 0x09	; 9
     ab2:	df 07       	cpc	r29, r31
     ab4:	21 f4       	brne	.+8      	; 0xabe <usart_init_rs232+0x170>
     ab6:	60 e2       	ldi	r22, 0x20	; 32
     ab8:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     aba:	5d d2       	rcall	.+1210   	; 0xf76 <sysclk_enable_module>
     abc:	0f c0       	rjmp	.+30     	; 0xadc <usart_init_rs232+0x18e>
     abe:	c0 38       	cpi	r28, 0x80	; 128
     ac0:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     ac2:	d8 07       	cpc	r29, r24
     ac4:	21 f4       	brne	.+8      	; 0xace <usart_init_rs232+0x180>
     ac6:	60 e4       	ldi	r22, 0x40	; 64
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	55 d2       	rcall	.+1194   	; 0xf76 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     acc:	07 c0       	rjmp	.+14     	; 0xadc <usart_init_rs232+0x18e>
     ace:	c0 3a       	cpi	r28, 0xA0	; 160
     ad0:	e4 e0       	ldi	r30, 0x04	; 4
     ad2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     ad4:	19 f4       	brne	.+6      	; 0xadc <usart_init_rs232+0x18e>
     ad6:	60 e4       	ldi	r22, 0x40	; 64
     ad8:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     ada:	4d d2       	rcall	.+1178   	; 0xf76 <sysclk_enable_module>
     adc:	8d 81       	ldd	r24, Y+5	; 0x05
     ade:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     ae0:	8d 83       	std	Y+5, r24	; 0x05
     ae2:	f8 01       	movw	r30, r16
     ae4:	95 81       	ldd	r25, Z+5	; 0x05
     ae6:	84 81       	ldd	r24, Z+4	; 0x04
     ae8:	89 2b       	or	r24, r25
     aea:	96 81       	ldd	r25, Z+6	; 0x06
     aec:	91 11       	cpse	r25, r1
     aee:	98 e0       	ldi	r25, 0x08	; 8
     af0:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     af2:	8d 83       	std	Y+5, r24	; 0x05
     af4:	f8 01       	movw	r30, r16
     af6:	40 81       	ld	r20, Z
     af8:	51 81       	ldd	r21, Z+1	; 0x01
     afa:	62 81       	ldd	r22, Z+2	; 0x02
     afc:	73 81       	ldd	r23, Z+3	; 0x03
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	18 e4       	ldi	r17, 0x48	; 72
     b02:	28 ee       	ldi	r18, 0xE8	; 232
     b04:	31 e0       	ldi	r19, 0x01	; 1
     b06:	ce 01       	movw	r24, r28
     b08:	0f de       	rcall	.-994    	; 0x728 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     b0a:	9c 81       	ldd	r25, Y+4	; 0x04
     b0c:	98 60       	ori	r25, 0x08	; 8
     b0e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     b10:	9c 81       	ldd	r25, Y+4	; 0x04
     b12:	90 61       	ori	r25, 0x10	; 16
     b14:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	08 95       	ret

00000b20 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     b20:	08 95       	ret

00000b22 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     b24:	61 50       	subi	r22, 0x01	; 1
     b26:	71 09       	sbc	r23, r1
     b28:	81 09       	sbc	r24, r1
     b2a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     b2c:	61 15       	cp	r22, r1
     b2e:	71 05       	cpc	r23, r1
     b30:	81 05       	cpc	r24, r1
     b32:	91 05       	cpc	r25, r1
     b34:	b9 f7       	brne	.-18     	; 0xb24 <__portable_avr_delay_cycles+0x2>
     b36:	08 95       	ret

00000b38 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     b38:	e0 e4       	ldi	r30, 0x40	; 64
     b3a:	f6 e0       	ldi	r31, 0x06	; 6
     b3c:	94 81       	ldd	r25, Z+4	; 0x04
     b3e:	80 e1       	ldi	r24, 0x10	; 16
     b40:	89 27       	eor	r24, r25
     b42:	84 83       	std	Z+4, r24	; 0x04
     b44:	08 95       	ret

00000b46 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     b46:	e0 e4       	ldi	r30, 0x40	; 64
     b48:	f6 e0       	ldi	r31, 0x06	; 6
     b4a:	84 81       	ldd	r24, Z+4	; 0x04
     b4c:	80 61       	ori	r24, 0x10	; 16
     b4e:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
     b50:	f3 df       	rcall	.-26     	; 0xb38 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     b52:	8e e1       	ldi	r24, 0x1E	; 30
     b54:	7d d0       	rcall	.+250    	; 0xc50 <spi_write>
	delay_ms(3);
     b56:	60 e8       	ldi	r22, 0x80	; 128
     b58:	7e e3       	ldi	r23, 0x3E	; 62
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     b5e:	e1 df       	rcall	.-62     	; 0xb22 <__portable_avr_delay_cycles>
     b60:	eb df       	rcall	.-42     	; 0xb38 <flip_ms5607>
	delay_ms(2);
     b62:	6b ea       	ldi	r22, 0xAB	; 171
     b64:	79 e2       	ldi	r23, 0x29	; 41
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	db cf       	rjmp	.-74     	; 0xb22 <__portable_avr_delay_cycles>
     b6c:	08 95       	ret

00000b6e <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     b74:	e1 df       	rcall	.-62     	; 0xb38 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     b76:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     b78:	6b d0       	rcall	.+214    	; 0xc50 <spi_write>
     b7a:	5f d0       	rcall	.+190    	; 0xc3a <spi_read>
     b7c:	c8 2f       	mov	r28, r24
     b7e:	d0 e0       	ldi	r29, 0x00	; 0
     b80:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     b82:	cc 27       	eor	r28, r28
     b84:	5a d0       	rcall	.+180    	; 0xc3a <spi_read>
     b86:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     b88:	d7 df       	rcall	.-82     	; 0xb38 <flip_ms5607>
     b8a:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <ms5607_convert_d1>:
     b92:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     b9a:	ce df       	rcall	.-100    	; 0xb38 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     b9c:	88 e4       	ldi	r24, 0x48	; 72
     b9e:	58 d0       	rcall	.+176    	; 0xc50 <spi_write>
	delay_ms(10);
     ba0:	66 e5       	ldi	r22, 0x56	; 86
     ba2:	70 ed       	ldi	r23, 0xD0	; 208
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     ba8:	bc df       	rcall	.-136    	; 0xb22 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     baa:	c6 df       	rcall	.-116    	; 0xb38 <flip_ms5607>
     bac:	c5 df       	rcall	.-118    	; 0xb38 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	4f d0       	rcall	.+158    	; 0xc50 <spi_write>
     bb2:	43 d0       	rcall	.+134    	; 0xc3a <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     bb4:	c8 2e       	mov	r12, r24
     bb6:	d1 2c       	mov	r13, r1
     bb8:	e1 2c       	mov	r14, r1
     bba:	f1 2c       	mov	r15, r1
     bbc:	76 01       	movw	r14, r12
     bbe:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     bc0:	cc 24       	eor	r12, r12
     bc2:	3b d0       	rcall	.+118    	; 0xc3a <spi_read>
     bc4:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     bc6:	39 d0       	rcall	.+114    	; 0xc3a <spi_read>
     bc8:	c8 2a       	or	r12, r24
     bca:	b6 df       	rcall	.-148    	; 0xb38 <flip_ms5607>
	flip_ms5607();
     bcc:	c7 01       	movw	r24, r14
     bce:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	08 95       	ret

00000bda <ms5607_convert_d2>:
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     be2:	aa df       	rcall	.-172    	; 0xb38 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     be4:	88 e5       	ldi	r24, 0x58	; 88
     be6:	34 d0       	rcall	.+104    	; 0xc50 <spi_write>
	delay_ms(10);
     be8:	66 e5       	ldi	r22, 0x56	; 86
     bea:	70 ed       	ldi	r23, 0xD0	; 208
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     bf0:	98 df       	rcall	.-208    	; 0xb22 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     bf2:	a2 df       	rcall	.-188    	; 0xb38 <flip_ms5607>
     bf4:	a1 df       	rcall	.-190    	; 0xb38 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	2b d0       	rcall	.+86     	; 0xc50 <spi_write>
     bfa:	1f d0       	rcall	.+62     	; 0xc3a <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     bfc:	c8 2e       	mov	r12, r24
     bfe:	d1 2c       	mov	r13, r1
     c00:	e1 2c       	mov	r14, r1
     c02:	f1 2c       	mov	r15, r1
     c04:	76 01       	movw	r14, r12
     c06:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     c08:	cc 24       	eor	r12, r12
     c0a:	17 d0       	rcall	.+46     	; 0xc3a <spi_read>
     c0c:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     c0e:	15 d0       	rcall	.+42     	; 0xc3a <spi_read>
     c10:	c8 2a       	or	r12, r24
     c12:	92 df       	rcall	.-220    	; 0xb38 <flip_ms5607>
	flip_ms5607();
     c14:	c7 01       	movw	r24, r14
     c16:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	08 95       	ret

00000c22 <spi_init>:
     c22:	e0 e4       	ldi	r30, 0x40	; 64
     c24:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     c26:	80 81       	ld	r24, Z
     c28:	80 6b       	ori	r24, 0xB0	; 176
     c2a:	80 83       	st	Z, r24
     c2c:	68 e0       	ldi	r22, 0x08	; 8
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	a2 d1       	rcall	.+836    	; 0xf76 <sysclk_enable_module>
     c32:	8c e5       	ldi	r24, 0x5C	; 92
     c34:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     c38:	08 95       	ret

00000c3a <spi_read>:
}

uint8_t spi_read(void)
{
	SPIC.DATA = 0xFF; // make the DATA register something we know
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
     c40:	e0 ec       	ldi	r30, 0xC0	; 192
     c42:	f8 e0       	ldi	r31, 0x08	; 8
     c44:	82 81       	ldd	r24, Z+2	; 0x02
     c46:	88 23       	and	r24, r24
     c48:	ec f7       	brge	.-6      	; 0xc44 <spi_read+0xa>
	
	return SPIC.DATA; // return the data from this function
     c4a:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     c4e:	08 95       	ret

00000c50 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     c50:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     c54:	e0 ec       	ldi	r30, 0xC0	; 192
     c56:	f8 e0       	ldi	r31, 0x08	; 8
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	88 23       	and	r24, r24
     c5c:	ec f7       	brge	.-6      	; 0xc58 <spi_write+0x8>
     c5e:	08 95       	ret

00000c60 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     c66:	5a dd       	rcall	.-1356   	; 0x71c <usart_getchar>
     c68:	88 83       	st	Y, r24
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     c70:	4d cd       	rjmp	.-1382   	; 0x70c <usart_putchar>
}
     c72:	08 95       	ret

00000c74 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	27 97       	sbiw	r28, 0x07	; 7
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     c82:	60 e1       	ldi	r22, 0x10	; 16
     c84:	85 e0       	ldi	r24, 0x05	; 5
     c86:	77 d1       	rcall	.+750    	; 0xf76 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     c88:	e0 e8       	ldi	r30, 0x80	; 128
     c8a:	f6 e0       	ldi	r31, 0x06	; 6
     c8c:	80 81       	ld	r24, Z
     c8e:	88 60       	ori	r24, 0x08	; 8
     c90:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     c92:	80 ea       	ldi	r24, 0xA0	; 160
     c94:	9a e0       	ldi	r25, 0x0A	; 10
     c96:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <stdio_base>
     c9a:	90 93 23 21 	sts	0x2123, r25	; 0x802123 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c9e:	88 e3       	ldi	r24, 0x38	; 56
     ca0:	96 e0       	ldi	r25, 0x06	; 6
     ca2:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <ptr_put>
     ca6:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     caa:	80 e3       	ldi	r24, 0x30	; 48
     cac:	96 e0       	ldi	r25, 0x06	; 6
     cae:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <ptr_get>
     cb2:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     cb6:	e6 e0       	ldi	r30, 0x06	; 6
     cb8:	f0 e2       	ldi	r31, 0x20	; 32
     cba:	84 81       	ldd	r24, Z+4	; 0x04
     cbc:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     cbe:	85 81       	ldd	r24, Z+5	; 0x05
     cc0:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     cc2:	86 81       	ldd	r24, Z+6	; 0x06
     cc4:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	a2 81       	ldd	r26, Z+2	; 0x02
     ccc:	b3 81       	ldd	r27, Z+3	; 0x03
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	ab 83       	std	Y+3, r26	; 0x03
     cd4:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     cd6:	60 e1       	ldi	r22, 0x10	; 16
     cd8:	85 e0       	ldi	r24, 0x05	; 5
     cda:	4d d1       	rcall	.+666    	; 0xf76 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     cdc:	be 01       	movw	r22, r28
     cde:	6f 5f       	subi	r22, 0xFF	; 255
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	80 ea       	ldi	r24, 0xA0	; 160
     ce4:	9a e0       	ldi	r25, 0x0A	; 10
     ce6:	33 de       	rcall	.-922    	; 0x94e <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     ce8:	6c e6       	ldi	r22, 0x6C	; 108
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	85 e8       	ldi	r24, 0x85	; 133
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	0e 94 12 1a 	call	0x3424	; 0x3424 <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
     cf4:	27 96       	adiw	r28, 0x07	; 7
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	fc 01       	movw	r30, r24
     d06:	41 15       	cp	r20, r1
     d08:	51 05       	cpc	r21, r1
     d0a:	b1 f1       	breq	.+108    	; 0xd78 <rb16_write+0x78>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	db 01       	movw	r26, r22
     d18:	a8 0f       	add	r26, r24
     d1a:	b9 1f       	adc	r27, r25
     d1c:	8d 91       	ld	r24, X+
     d1e:	9c 91       	ld	r25, X
     d20:	a2 81       	ldd	r26, Z+2	; 0x02
     d22:	b3 81       	ldd	r27, Z+3	; 0x03
     d24:	aa 0f       	add	r26, r26
     d26:	bb 1f       	adc	r27, r27
     d28:	c6 81       	ldd	r28, Z+6	; 0x06
     d2a:	d7 81       	ldd	r29, Z+7	; 0x07
     d2c:	ac 0f       	add	r26, r28
     d2e:	bd 1f       	adc	r27, r29
     d30:	8d 93       	st	X+, r24
     d32:	9c 93       	st	X, r25
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	82 83       	std	Z+2, r24	; 0x02
     d3c:	93 83       	std	Z+3, r25	; 0x03
     d3e:	a0 81       	ld	r26, Z
     d40:	b1 81       	ldd	r27, Z+1	; 0x01
     d42:	8a 17       	cp	r24, r26
     d44:	9b 07       	cpc	r25, r27
     d46:	11 f4       	brne	.+4      	; 0xd4c <rb16_write+0x4c>
     d48:	12 82       	std	Z+2, r1	; 0x02
     d4a:	13 82       	std	Z+3, r1	; 0x03
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	c4 81       	ldd	r28, Z+4	; 0x04
     d52:	d5 81       	ldd	r29, Z+5	; 0x05
     d54:	8c 17       	cp	r24, r28
     d56:	9d 07       	cpc	r25, r29
     d58:	49 f4       	brne	.+18     	; 0xd6c <rb16_write+0x6c>
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	a8 17       	cp	r26, r24
     d5e:	b9 07       	cpc	r27, r25
     d60:	19 f0       	breq	.+6      	; 0xd68 <rb16_write+0x68>
     d62:	84 83       	std	Z+4, r24	; 0x04
     d64:	95 83       	std	Z+5, r25	; 0x05
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <rb16_write+0x6c>
     d68:	14 82       	std	Z+4, r1	; 0x04
     d6a:	15 82       	std	Z+5, r1	; 0x05
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	82 2f       	mov	r24, r18
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	84 17       	cp	r24, r20
     d74:	95 07       	cpc	r25, r21
     d76:	68 f2       	brcs	.-102    	; 0xd12 <rb16_write+0x12>
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <rb16_init>:
     d7e:	fc 01       	movw	r30, r24
     d80:	12 82       	std	Z+2, r1	; 0x02
     d82:	13 82       	std	Z+3, r1	; 0x03
     d84:	14 82       	std	Z+4, r1	; 0x04
     d86:	15 82       	std	Z+5, r1	; 0x05
     d88:	66 83       	std	Z+6, r22	; 0x06
     d8a:	77 83       	std	Z+7, r23	; 0x07
     d8c:	40 83       	st	Z, r20
     d8e:	51 83       	std	Z+1, r21	; 0x01
     d90:	08 95       	ret

00000d92 <rb16_get_nth>:
     d92:	dc 01       	movw	r26, r24
     d94:	12 96       	adiw	r26, 0x02	; 2
     d96:	ed 91       	ld	r30, X+
     d98:	fc 91       	ld	r31, X
     d9a:	13 97       	sbiw	r26, 0x03	; 3
     d9c:	cb 01       	movw	r24, r22
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	e8 17       	cp	r30, r24
     da2:	f9 07       	cpc	r31, r25
     da4:	78 f0       	brcs	.+30     	; 0xdc4 <rb16_get_nth+0x32>
     da6:	e1 50       	subi	r30, 0x01	; 1
     da8:	f0 48       	sbci	r31, 0x80	; 128
     daa:	e6 1b       	sub	r30, r22
     dac:	f7 0b       	sbc	r31, r23
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	16 96       	adiw	r26, 0x06	; 6
     db4:	8d 91       	ld	r24, X+
     db6:	9c 91       	ld	r25, X
     db8:	17 97       	sbiw	r26, 0x07	; 7
     dba:	e8 0f       	add	r30, r24
     dbc:	f9 1f       	adc	r31, r25
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	08 95       	ret
     dc4:	2d 91       	ld	r18, X+
     dc6:	3c 91       	ld	r19, X
     dc8:	11 97       	sbiw	r26, 0x01	; 1
     dca:	e2 0f       	add	r30, r18
     dcc:	f3 1f       	adc	r31, r19
     dce:	e1 50       	subi	r30, 0x01	; 1
     dd0:	f0 48       	sbci	r31, 0x80	; 128
     dd2:	e6 1b       	sub	r30, r22
     dd4:	f7 0b       	sbc	r31, r23
     dd6:	ee 0f       	add	r30, r30
     dd8:	ff 1f       	adc	r31, r31
     dda:	16 96       	adiw	r26, 0x06	; 6
     ddc:	8d 91       	ld	r24, X+
     dde:	9c 91       	ld	r25, X
     de0:	17 97       	sbiw	r26, 0x07	; 7
     de2:	e8 0f       	add	r30, r24
     de4:	f9 1f       	adc	r31, r25
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	08 95       	ret

00000dec <rb32_write>:
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	fc 01       	movw	r30, r24
     dfa:	41 15       	cp	r20, r1
     dfc:	51 05       	cpc	r21, r1
     dfe:	09 f4       	brne	.+2      	; 0xe02 <rb32_write+0x16>
     e00:	3f c0       	rjmp	.+126    	; 0xe80 <rb32_write+0x94>
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	db 01       	movw	r26, r22
     e12:	a8 0f       	add	r26, r24
     e14:	b9 1f       	adc	r27, r25
     e16:	cd 90       	ld	r12, X+
     e18:	dd 90       	ld	r13, X+
     e1a:	ed 90       	ld	r14, X+
     e1c:	fc 90       	ld	r15, X
     e1e:	a2 81       	ldd	r26, Z+2	; 0x02
     e20:	b3 81       	ldd	r27, Z+3	; 0x03
     e22:	aa 0f       	add	r26, r26
     e24:	bb 1f       	adc	r27, r27
     e26:	aa 0f       	add	r26, r26
     e28:	bb 1f       	adc	r27, r27
     e2a:	86 81       	ldd	r24, Z+6	; 0x06
     e2c:	97 81       	ldd	r25, Z+7	; 0x07
     e2e:	a8 0f       	add	r26, r24
     e30:	b9 1f       	adc	r27, r25
     e32:	cd 92       	st	X+, r12
     e34:	dd 92       	st	X+, r13
     e36:	ed 92       	st	X+, r14
     e38:	fc 92       	st	X, r15
     e3a:	13 97       	sbiw	r26, 0x03	; 3
     e3c:	82 81       	ldd	r24, Z+2	; 0x02
     e3e:	93 81       	ldd	r25, Z+3	; 0x03
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	82 83       	std	Z+2, r24	; 0x02
     e44:	93 83       	std	Z+3, r25	; 0x03
     e46:	a0 81       	ld	r26, Z
     e48:	b1 81       	ldd	r27, Z+1	; 0x01
     e4a:	8a 17       	cp	r24, r26
     e4c:	9b 07       	cpc	r25, r27
     e4e:	11 f4       	brne	.+4      	; 0xe54 <rb32_write+0x68>
     e50:	12 82       	std	Z+2, r1	; 0x02
     e52:	13 82       	std	Z+3, r1	; 0x03
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	c4 81       	ldd	r28, Z+4	; 0x04
     e5a:	d5 81       	ldd	r29, Z+5	; 0x05
     e5c:	8c 17       	cp	r24, r28
     e5e:	9d 07       	cpc	r25, r29
     e60:	49 f4       	brne	.+18     	; 0xe74 <rb32_write+0x88>
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	a8 17       	cp	r26, r24
     e66:	b9 07       	cpc	r27, r25
     e68:	19 f0       	breq	.+6      	; 0xe70 <rb32_write+0x84>
     e6a:	84 83       	std	Z+4, r24	; 0x04
     e6c:	95 83       	std	Z+5, r25	; 0x05
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <rb32_write+0x88>
     e70:	14 82       	std	Z+4, r1	; 0x04
     e72:	15 82       	std	Z+5, r1	; 0x05
     e74:	2f 5f       	subi	r18, 0xFF	; 255
     e76:	82 2f       	mov	r24, r18
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	84 17       	cp	r24, r20
     e7c:	95 07       	cpc	r25, r21
     e7e:	20 f2       	brcs	.-120    	; 0xe08 <rb32_write+0x1c>
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	08 95       	ret

00000e8e <rb32_init>:
     e8e:	fc 01       	movw	r30, r24
     e90:	12 82       	std	Z+2, r1	; 0x02
     e92:	13 82       	std	Z+3, r1	; 0x03
     e94:	14 82       	std	Z+4, r1	; 0x04
     e96:	15 82       	std	Z+5, r1	; 0x05
     e98:	66 83       	std	Z+6, r22	; 0x06
     e9a:	77 83       	std	Z+7, r23	; 0x07
     e9c:	40 83       	st	Z, r20
     e9e:	51 83       	std	Z+1, r21	; 0x01
     ea0:	08 95       	ret

00000ea2 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     ea2:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     ea4:	12 96       	adiw	r26, 0x02	; 2
     ea6:	ed 91       	ld	r30, X+
     ea8:	fc 91       	ld	r31, X
     eaa:	13 97       	sbiw	r26, 0x03	; 3
     eac:	cb 01       	movw	r24, r22
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	e8 17       	cp	r30, r24
     eb2:	f9 07       	cpc	r31, r25
     eb4:	98 f0       	brcs	.+38     	; 0xedc <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     eb6:	e1 50       	subi	r30, 0x01	; 1
     eb8:	f0 4c       	sbci	r31, 0xC0	; 192
     eba:	e6 1b       	sub	r30, r22
     ebc:	f7 0b       	sbc	r31, r23
     ebe:	ee 0f       	add	r30, r30
     ec0:	ff 1f       	adc	r31, r31
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	16 96       	adiw	r26, 0x06	; 6
     ec8:	8d 91       	ld	r24, X+
     eca:	9c 91       	ld	r25, X
     ecc:	17 97       	sbiw	r26, 0x07	; 7
     ece:	e8 0f       	add	r30, r24
     ed0:	f9 1f       	adc	r31, r25
     ed2:	60 81       	ld	r22, Z
     ed4:	71 81       	ldd	r23, Z+1	; 0x01
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     edc:	2d 91       	ld	r18, X+
     ede:	3c 91       	ld	r19, X
     ee0:	11 97       	sbiw	r26, 0x01	; 1
     ee2:	e2 0f       	add	r30, r18
     ee4:	f3 1f       	adc	r31, r19
     ee6:	e1 50       	subi	r30, 0x01	; 1
     ee8:	f0 4c       	sbci	r31, 0xC0	; 192
     eea:	e6 1b       	sub	r30, r22
     eec:	f7 0b       	sbc	r31, r23
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	16 96       	adiw	r26, 0x06	; 6
     ef8:	8d 91       	ld	r24, X+
     efa:	9c 91       	ld	r25, X
     efc:	17 97       	sbiw	r26, 0x07	; 7
     efe:	e8 0f       	add	r30, r24
     f00:	f9 1f       	adc	r31, r25
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
}
     f0a:	08 95       	ret

00000f0c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	1f 92       	push	r1
     f12:	1f 92       	push	r1
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     f1e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     f22:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     f26:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     f2a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     f2e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     f32:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f36:	8f b7       	in	r24, 0x3f	; 63
     f38:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f3a:	f8 94       	cli
	return flags;
     f3c:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f3e:	e0 e5       	ldi	r30, 0x50	; 80
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	82 60       	ori	r24, 0x02	; 2
     f46:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f48:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f4a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f4c:	81 ff       	sbrs	r24, 1
     f4e:	fd cf       	rjmp	.-6      	; 0xf4a <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	80 e4       	ldi	r24, 0x40	; 64
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	25 d0       	rcall	.+74     	; 0xfa2 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f58:	8f b7       	in	r24, 0x3f	; 63
     f5a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f5c:	f8 94       	cli
	return flags;
     f5e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     f60:	e0 e5       	ldi	r30, 0x50	; 80
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8e 7f       	andi	r24, 0xFE	; 254
     f68:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f6a:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	1f 92       	push	r1
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f80:	9f b7       	in	r25, 0x3f	; 63
     f82:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f84:	f8 94       	cli
	return flags;
     f86:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     f88:	e8 2f       	mov	r30, r24
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	e0 59       	subi	r30, 0x90	; 144
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	60 95       	com	r22
     f92:	80 81       	ld	r24, Z
     f94:	68 23       	and	r22, r24
     f96:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f98:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     f9a:	0f 90       	pop	r0
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     fa2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     fa4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     fa6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     fa8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     faa:	60 83       	st	Z, r22
	ret                             // Return to caller
     fac:	08 95       	ret

00000fae <__portable_avr_delay_cycles>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	delay_ms(1);
	uint8_t byte = NVM.DATA0;
	return byte;
}
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <__portable_avr_delay_cycles+0xa>
     fb0:	61 50       	subi	r22, 0x01	; 1
     fb2:	71 09       	sbc	r23, r1
     fb4:	81 09       	sbc	r24, r1
     fb6:	91 09       	sbc	r25, r1
     fb8:	61 15       	cp	r22, r1
     fba:	71 05       	cpc	r23, r1
     fbc:	81 05       	cpc	r24, r1
     fbe:	91 05       	cpc	r25, r1
     fc0:	b9 f7       	brne	.-18     	; 0xfb0 <__portable_avr_delay_cycles+0x2>
     fc2:	08 95       	ret

00000fc4 <pressure_init>:
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	be dd       	rcall	.-1156   	; 0xb46 <ms5607_init>
     fca:	82 ea       	ldi	r24, 0xA2	; 162
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	cf dd       	rcall	.-1122   	; 0xb6e <ms5607_read>
     fd0:	c9 e0       	ldi	r28, 0x09	; 9
     fd2:	d1 e2       	ldi	r29, 0x21	; 33
     fd4:	88 83       	st	Y, r24
     fd6:	99 83       	std	Y+1, r25	; 0x01
     fd8:	84 ea       	ldi	r24, 0xA4	; 164
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	c8 dd       	rcall	.-1136   	; 0xb6e <ms5607_read>
     fde:	8a 83       	std	Y+2, r24	; 0x02
     fe0:	9b 83       	std	Y+3, r25	; 0x03
     fe2:	86 ea       	ldi	r24, 0xA6	; 166
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	c3 dd       	rcall	.-1146   	; 0xb6e <ms5607_read>
     fe8:	8c 83       	std	Y+4, r24	; 0x04
     fea:	9d 83       	std	Y+5, r25	; 0x05
     fec:	88 ea       	ldi	r24, 0xA8	; 168
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	be dd       	rcall	.-1156   	; 0xb6e <ms5607_read>
     ff2:	8e 83       	std	Y+6, r24	; 0x06
     ff4:	9f 83       	std	Y+7, r25	; 0x07
     ff6:	8a ea       	ldi	r24, 0xAA	; 170
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	b9 dd       	rcall	.-1166   	; 0xb6e <ms5607_read>
     ffc:	88 87       	std	Y+8, r24	; 0x08
     ffe:	99 87       	std	Y+9, r25	; 0x09
    1000:	8c ea       	ldi	r24, 0xAC	; 172
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	b4 dd       	rcall	.-1176   	; 0xb6e <ms5607_read>
    1006:	8a 87       	std	Y+10, r24	; 0x0a
    1008:	9b 87       	std	Y+11, r25	; 0x0b
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <release>:
    1010:	80 eb       	ldi	r24, 0xB0	; 176
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1018:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <released>
    1022:	08 95       	ret

00001024 <get_pressure>:
    1024:	4f 92       	push	r4
    1026:	5f 92       	push	r5
    1028:	6f 92       	push	r6
    102a:	7f 92       	push	r7
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	6b ea       	ldi	r22, 0xAB	; 171
    1042:	76 ea       	ldi	r23, 0xA6	; 166
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	b2 df       	rcall	.-156    	; 0xfae <__portable_avr_delay_cycles>
    104a:	a3 dd       	rcall	.-1210   	; 0xb92 <ms5607_convert_d1>
    104c:	6b 01       	movw	r12, r22
    104e:	7c 01       	movw	r14, r24
    1050:	6b ea       	ldi	r22, 0xAB	; 171
    1052:	76 ea       	ldi	r23, 0xA6	; 166
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	aa df       	rcall	.-172    	; 0xfae <__portable_avr_delay_cycles>
    105a:	bf dd       	rcall	.-1154   	; 0xbda <ms5607_convert_d2>
    105c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__floatunsisf>
    1060:	4b 01       	movw	r8, r22
    1062:	5c 01       	movw	r10, r24
    1064:	c9 e0       	ldi	r28, 0x09	; 9
    1066:	d1 e2       	ldi	r29, 0x21	; 33
    1068:	68 85       	ldd	r22, Y+8	; 0x08
    106a:	79 85       	ldd	r23, Y+9	; 0x09
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__floatunsisf>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	53 e4       	ldi	r21, 0x43	; 67
    107c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    1080:	9b 01       	movw	r18, r22
    1082:	ac 01       	movw	r20, r24
    1084:	c5 01       	movw	r24, r10
    1086:	b4 01       	movw	r22, r8
    1088:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__subsf3>
    108c:	4b 01       	movw	r8, r22
    108e:	5c 01       	movw	r10, r24
    1090:	6c 81       	ldd	r22, Y+4	; 0x04
    1092:	7d 81       	ldd	r23, Y+5	; 0x05
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__floatunsisf>
    109c:	a5 01       	movw	r20, r10
    109e:	94 01       	movw	r18, r8
    10a0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	5c e3       	ldi	r21, 0x3C	; 60
    10ac:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    10b0:	2b 01       	movw	r4, r22
    10b2:	3c 01       	movw	r6, r24
    10b4:	68 81       	ld	r22, Y
    10b6:	79 81       	ldd	r23, Y+1	; 0x01
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__floatunsisf>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	57 e4       	ldi	r21, 0x47	; 71
    10c8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	c3 01       	movw	r24, r6
    10d2:	b2 01       	movw	r22, r4
    10d4:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__addsf3>
    10d8:	2b 01       	movw	r4, r22
    10da:	3c 01       	movw	r6, r24
    10dc:	c7 01       	movw	r24, r14
    10de:	b6 01       	movw	r22, r12
    10e0:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__floatunsisf>
    10e4:	9b 01       	movw	r18, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	c3 01       	movw	r24, r6
    10ea:	b2 01       	movw	r22, r4
    10ec:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	55 e3       	ldi	r21, 0x35	; 53
    10f8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    10fc:	6b 01       	movw	r12, r22
    10fe:	7c 01       	movw	r14, r24
    1100:	6e 81       	ldd	r22, Y+6	; 0x06
    1102:	7f 81       	ldd	r23, Y+7	; 0x07
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__floatunsisf>
    110c:	a5 01       	movw	r20, r10
    110e:	94 01       	movw	r18, r8
    1110:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	5c e3       	ldi	r21, 0x3C	; 60
    111c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    1120:	4b 01       	movw	r8, r22
    1122:	5c 01       	movw	r10, r24
    1124:	6a 81       	ldd	r22, Y+2	; 0x02
    1126:	7b 81       	ldd	r23, Y+3	; 0x03
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__floatunsisf>
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	58 e4       	ldi	r21, 0x48	; 72
    1138:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    113c:	9b 01       	movw	r18, r22
    113e:	ac 01       	movw	r20, r24
    1140:	c5 01       	movw	r24, r10
    1142:	b4 01       	movw	r22, r8
    1144:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__addsf3>
    1148:	9b 01       	movw	r18, r22
    114a:	ac 01       	movw	r20, r24
    114c:	c7 01       	movw	r24, r14
    114e:	b6 01       	movw	r22, r12
    1150:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__subsf3>
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	58 e3       	ldi	r21, 0x38	; 56
    115c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	bf 90       	pop	r11
    116e:	af 90       	pop	r10
    1170:	9f 90       	pop	r9
    1172:	8f 90       	pop	r8
    1174:	7f 90       	pop	r7
    1176:	6f 90       	pop	r6
    1178:	5f 90       	pop	r5
    117a:	4f 90       	pop	r4
    117c:	08 95       	ret

0000117e <get_altitude>:
    117e:	4f 92       	push	r4
    1180:	5f 92       	push	r5
    1182:	6f 92       	push	r6
    1184:	7f 92       	push	r7
    1186:	8f 92       	push	r8
    1188:	9f 92       	push	r9
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	2b 01       	movw	r4, r22
    1198:	3c 01       	movw	r6, r24
    119a:	c0 90 1a 20 	lds	r12, 0x201A	; 0x80201a <L>
    119e:	d0 90 1b 20 	lds	r13, 0x201B	; 0x80201b <L+0x1>
    11a2:	e0 90 1c 20 	lds	r14, 0x201C	; 0x80201c <L+0x2>
    11a6:	f0 90 1d 20 	lds	r15, 0x201D	; 0x80201d <L+0x3>
    11aa:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <R>
    11ae:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <R+0x1>
    11b2:	40 91 20 20 	lds	r20, 0x2020	; 0x802020 <R+0x2>
    11b6:	50 91 21 20 	lds	r21, 0x2021	; 0x802021 <R+0x3>
    11ba:	c7 01       	movw	r24, r14
    11bc:	b6 01       	movw	r22, r12
    11be:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    11c2:	20 91 16 20 	lds	r18, 0x2016	; 0x802016 <g_0>
    11c6:	30 91 17 20 	lds	r19, 0x2017	; 0x802017 <g_0+0x1>
    11ca:	40 91 18 20 	lds	r20, 0x2018	; 0x802018 <g_0+0x2>
    11ce:	50 91 19 20 	lds	r21, 0x2019	; 0x802019 <g_0+0x3>
    11d2:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    11d6:	4b 01       	movw	r8, r22
    11d8:	5c 01       	movw	r10, r24
    11da:	a3 01       	movw	r20, r6
    11dc:	92 01       	movw	r18, r4
    11de:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <ground_p>
    11e2:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <ground_p+0x1>
    11e6:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <ground_p+0x2>
    11ea:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <ground_p+0x3>
    11ee:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    11f2:	a5 01       	movw	r20, r10
    11f4:	94 01       	movw	r18, r8
    11f6:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <pow>
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e8       	ldi	r20, 0x80	; 128
    1200:	5f e3       	ldi	r21, 0x3F	; 63
    1202:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__subsf3>
    1206:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <ground_t>
    120a:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <ground_t+0x1>
    120e:	40 91 24 20 	lds	r20, 0x2024	; 0x802024 <ground_t+0x2>
    1212:	50 91 25 20 	lds	r21, 0x2025	; 0x802025 <ground_t+0x3>
    1216:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    121a:	a7 01       	movw	r20, r14
    121c:	96 01       	movw	r18, r12
    121e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    1222:	20 91 17 21 	lds	r18, 0x2117	; 0x802117 <ground_a>
    1226:	30 91 18 21 	lds	r19, 0x2118	; 0x802118 <ground_a+0x1>
    122a:	40 91 19 21 	lds	r20, 0x2119	; 0x802119 <ground_a+0x2>
    122e:	50 91 1a 21 	lds	r21, 0x211A	; 0x80211a <ground_a+0x3>
    1232:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__subsf3>
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	bf 90       	pop	r11
    1240:	af 90       	pop	r10
    1242:	9f 90       	pop	r9
    1244:	8f 90       	pop	r8
    1246:	7f 90       	pop	r7
    1248:	6f 90       	pop	r6
    124a:	5f 90       	pop	r5
    124c:	4f 90       	pop	r4
    124e:	08 95       	ret

00001250 <diff>:
    1250:	2f 92       	push	r2
    1252:	3f 92       	push	r3
    1254:	4f 92       	push	r4
    1256:	5f 92       	push	r5
    1258:	6f 92       	push	r6
    125a:	7f 92       	push	r7
    125c:	8f 92       	push	r8
    125e:	9f 92       	push	r9
    1260:	af 92       	push	r10
    1262:	bf 92       	push	r11
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	00 d0       	rcall	.+0      	; 0x1276 <diff+0x26>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <diff+0x28>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	6c 01       	movw	r12, r24
    127e:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <data_samples>
    1282:	88 23       	and	r24, r24
    1284:	09 f4       	brne	.+2      	; 0x1288 <diff+0x38>
    1286:	6c c0       	rjmp	.+216    	; 0x1360 <diff+0x110>
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	41 2c       	mov	r4, r1
    128e:	51 2c       	mov	r5, r1
    1290:	32 01       	movw	r6, r4
    1292:	86 2e       	mov	r8, r22
    1294:	91 2c       	mov	r9, r1
    1296:	a1 2c       	mov	r10, r1
    1298:	b1 2c       	mov	r11, r1
    129a:	89 82       	std	Y+1, r8	; 0x01
    129c:	9a 82       	std	Y+2, r9	; 0x02
    129e:	ab 82       	std	Y+3, r10	; 0x03
    12a0:	bc 82       	std	Y+4, r11	; 0x04
    12a2:	b8 01       	movw	r22, r16
    12a4:	c6 01       	movw	r24, r12
    12a6:	75 dd       	rcall	.-1302   	; 0xd92 <rb16_get_nth>
    12a8:	5c 01       	movw	r10, r24
    12aa:	18 01       	movw	r2, r16
    12ac:	2f ef       	ldi	r18, 0xFF	; 255
    12ae:	22 1a       	sub	r2, r18
    12b0:	32 0a       	sbc	r3, r18
    12b2:	b1 01       	movw	r22, r2
    12b4:	c6 01       	movw	r24, r12
    12b6:	6d dd       	rcall	.-1318   	; 0xd92 <rb16_get_nth>
    12b8:	7c 01       	movw	r14, r24
    12ba:	b8 01       	movw	r22, r16
    12bc:	6e 5f       	subi	r22, 0xFE	; 254
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	c6 01       	movw	r24, r12
    12c2:	67 dd       	rcall	.-1330   	; 0xd92 <rb16_get_nth>
    12c4:	a5 01       	movw	r20, r10
    12c6:	bb 0c       	add	r11, r11
    12c8:	66 0b       	sbc	r22, r22
    12ca:	77 0b       	sbc	r23, r23
    12cc:	8a 01       	movw	r16, r20
    12ce:	9b 01       	movw	r18, r22
    12d0:	00 0f       	add	r16, r16
    12d2:	11 1f       	adc	r17, r17
    12d4:	22 1f       	adc	r18, r18
    12d6:	33 1f       	adc	r19, r19
    12d8:	40 0f       	add	r20, r16
    12da:	51 1f       	adc	r21, r17
    12dc:	62 1f       	adc	r22, r18
    12de:	73 1f       	adc	r23, r19
    12e0:	87 01       	movw	r16, r14
    12e2:	ff 0c       	add	r15, r15
    12e4:	22 0b       	sbc	r18, r18
    12e6:	33 0b       	sbc	r19, r19
    12e8:	78 01       	movw	r14, r16
    12ea:	89 01       	movw	r16, r18
    12ec:	ee 0c       	add	r14, r14
    12ee:	ff 1c       	adc	r15, r15
    12f0:	00 1f       	adc	r16, r16
    12f2:	11 1f       	adc	r17, r17
    12f4:	ee 0c       	add	r14, r14
    12f6:	ff 1c       	adc	r15, r15
    12f8:	00 1f       	adc	r16, r16
    12fa:	11 1f       	adc	r17, r17
    12fc:	4a 01       	movw	r8, r20
    12fe:	5b 01       	movw	r10, r22
    1300:	8e 18       	sub	r8, r14
    1302:	9f 08       	sbc	r9, r15
    1304:	a0 0a       	sbc	r10, r16
    1306:	b1 0a       	sbc	r11, r17
    1308:	ac 01       	movw	r20, r24
    130a:	99 0f       	add	r25, r25
    130c:	66 0b       	sbc	r22, r22
    130e:	77 0b       	sbc	r23, r23
    1310:	d5 01       	movw	r26, r10
    1312:	c4 01       	movw	r24, r8
    1314:	84 0f       	add	r24, r20
    1316:	95 1f       	adc	r25, r21
    1318:	a6 1f       	adc	r26, r22
    131a:	b7 1f       	adc	r27, r23
    131c:	9c 01       	movw	r18, r24
    131e:	ad 01       	movw	r20, r26
    1320:	69 81       	ldd	r22, Y+1	; 0x01
    1322:	7a 81       	ldd	r23, Y+2	; 0x02
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__mulsi3>
    132c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    133c:	9b 01       	movw	r18, r22
    133e:	ac 01       	movw	r20, r24
    1340:	c3 01       	movw	r24, r6
    1342:	b2 01       	movw	r22, r4
    1344:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__addsf3>
    1348:	2b 01       	movw	r4, r22
    134a:	3c 01       	movw	r6, r24
    134c:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <data_samples>
    1350:	81 01       	movw	r16, r2
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	22 16       	cp	r2, r18
    1358:	33 06       	cpc	r3, r19
    135a:	08 f4       	brcc	.+2      	; 0x135e <diff+0x10e>
    135c:	a2 cf       	rjmp	.-188    	; 0x12a2 <diff+0x52>
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <diff+0x116>
    1360:	41 2c       	mov	r4, r1
    1362:	51 2c       	mov	r5, r1
    1364:	32 01       	movw	r6, r4
    1366:	68 2f       	mov	r22, r24
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    1372:	9b 01       	movw	r18, r22
    1374:	ac 01       	movw	r20, r24
    1376:	c3 01       	movw	r24, r6
    1378:	b2 01       	movw	r22, r4
    137a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	48 ec       	ldi	r20, 0xC8	; 200
    1384:	52 e4       	ldi	r21, 0x42	; 66
    1386:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    138a:	26 96       	adiw	r28, 0x06	; 6
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	bf 90       	pop	r11
    13a2:	af 90       	pop	r10
    13a4:	9f 90       	pop	r9
    13a6:	8f 90       	pop	r8
    13a8:	7f 90       	pop	r7
    13aa:	6f 90       	pop	r6
    13ac:	5f 90       	pop	r5
    13ae:	4f 90       	pop	r4
    13b0:	3f 90       	pop	r3
    13b2:	2f 90       	pop	r2
    13b4:	08 95       	ret

000013b6 <data_check>:
    13b6:	3f 92       	push	r3
    13b8:	4f 92       	push	r4
    13ba:	5f 92       	push	r5
    13bc:	6f 92       	push	r6
    13be:	7f 92       	push	r7
    13c0:	8f 92       	push	r8
    13c2:	9f 92       	push	r9
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	00 d0       	rcall	.+0      	; 0x13da <data_check+0x24>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <data_check+0x26>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	8c 01       	movw	r16, r24
    13e2:	19 82       	std	Y+1, r1	; 0x01
    13e4:	1a 82       	std	Y+2, r1	; 0x02
    13e6:	c1 2c       	mov	r12, r1
    13e8:	d1 2c       	mov	r13, r1
    13ea:	76 01       	movw	r14, r12
    13ec:	69 81       	ldd	r22, Y+1	; 0x01
    13ee:	7a 81       	ldd	r23, Y+2	; 0x02
    13f0:	c8 01       	movw	r24, r16
    13f2:	57 dd       	rcall	.-1362   	; 0xea2 <rb32_get_nth>
    13f4:	4b 01       	movw	r8, r22
    13f6:	5c 01       	movw	r10, r24
    13f8:	21 e6       	ldi	r18, 0x61	; 97
    13fa:	82 1a       	sub	r8, r18
    13fc:	2e ea       	ldi	r18, 0xAE	; 174
    13fe:	92 0a       	sbc	r9, r18
    1400:	2a e0       	ldi	r18, 0x0A	; 10
    1402:	a2 0a       	sbc	r10, r18
    1404:	b1 08       	sbc	r11, r1
    1406:	2f e7       	ldi	r18, 0x7F	; 127
    1408:	82 16       	cp	r8, r18
    140a:	2a e1       	ldi	r18, 0x1A	; 26
    140c:	92 06       	cpc	r9, r18
    140e:	26 e0       	ldi	r18, 0x06	; 6
    1410:	a2 06       	cpc	r10, r18
    1412:	b1 04       	cpc	r11, r1
    1414:	80 f4       	brcc	.+32     	; 0x1436 <data_check+0x80>
    1416:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 ea       	ldi	r20, 0xA0	; 160
    1420:	50 e4       	ldi	r21, 0x40	; 64
    1422:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	c7 01       	movw	r24, r14
    142c:	b6 01       	movw	r22, r12
    142e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__addsf3>
    1432:	6b 01       	movw	r12, r22
    1434:	7c 01       	movw	r14, r24
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	05 97       	sbiw	r24, 0x05	; 5
    1442:	a1 f6       	brne	.-88     	; 0x13ec <data_check+0x36>
    1444:	19 82       	std	Y+1, r1	; 0x01
    1446:	1a 82       	std	Y+2, r1	; 0x02
    1448:	81 2c       	mov	r8, r1
    144a:	91 2c       	mov	r9, r1
    144c:	54 01       	movw	r10, r8
    144e:	69 81       	ldd	r22, Y+1	; 0x01
    1450:	7a 81       	ldd	r23, Y+2	; 0x02
    1452:	c8 01       	movw	r24, r16
    1454:	26 dd       	rcall	.-1460   	; 0xea2 <rb32_get_nth>
    1456:	2b 01       	movw	r4, r22
    1458:	3c 01       	movw	r6, r24
    145a:	21 e6       	ldi	r18, 0x61	; 97
    145c:	42 1a       	sub	r4, r18
    145e:	2e ea       	ldi	r18, 0xAE	; 174
    1460:	52 0a       	sbc	r5, r18
    1462:	2a e0       	ldi	r18, 0x0A	; 10
    1464:	62 0a       	sbc	r6, r18
    1466:	71 08       	sbc	r7, r1
    1468:	2f e7       	ldi	r18, 0x7F	; 127
    146a:	42 16       	cp	r4, r18
    146c:	2a e1       	ldi	r18, 0x1A	; 26
    146e:	52 06       	cpc	r5, r18
    1470:	26 e0       	ldi	r18, 0x06	; 6
    1472:	62 06       	cpc	r6, r18
    1474:	71 04       	cpc	r7, r1
    1476:	90 f4       	brcc	.+36     	; 0x149c <data_check+0xe6>
    1478:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    147c:	a7 01       	movw	r20, r14
    147e:	96 01       	movw	r18, r12
    1480:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__subsf3>
    1484:	9b 01       	movw	r18, r22
    1486:	ac 01       	movw	r20, r24
    1488:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    148c:	9b 01       	movw	r18, r22
    148e:	ac 01       	movw	r20, r24
    1490:	c5 01       	movw	r24, r10
    1492:	b4 01       	movw	r22, r8
    1494:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__addsf3>
    1498:	4b 01       	movw	r8, r22
    149a:	5c 01       	movw	r10, r24
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	05 97       	sbiw	r24, 0x05	; 5
    14a8:	91 f6       	brne	.-92     	; 0x144e <data_check+0x98>
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5e e3       	ldi	r21, 0x3E	; 62
    14b2:	c5 01       	movw	r24, r10
    14b4:	b4 01       	movw	r22, r8
    14b6:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    14ba:	69 83       	std	Y+1, r22	; 0x01
    14bc:	7a 83       	std	Y+2, r23	; 0x02
    14be:	8b 83       	std	Y+3, r24	; 0x03
    14c0:	9c 83       	std	Y+4, r25	; 0x04
    14c2:	1d 82       	std	Y+5, r1	; 0x05
    14c4:	1e 82       	std	Y+6, r1	; 0x06
    14c6:	31 2c       	mov	r3, r1
    14c8:	41 2c       	mov	r4, r1
    14ca:	51 2c       	mov	r5, r1
    14cc:	32 01       	movw	r6, r4
    14ce:	6d 81       	ldd	r22, Y+5	; 0x05
    14d0:	7e 81       	ldd	r23, Y+6	; 0x06
    14d2:	c8 01       	movw	r24, r16
    14d4:	e6 dc       	rcall	.-1588   	; 0xea2 <rb32_get_nth>
    14d6:	4b 01       	movw	r8, r22
    14d8:	5c 01       	movw	r10, r24
    14da:	21 e6       	ldi	r18, 0x61	; 97
    14dc:	82 1a       	sub	r8, r18
    14de:	2e ea       	ldi	r18, 0xAE	; 174
    14e0:	92 0a       	sbc	r9, r18
    14e2:	2a e0       	ldi	r18, 0x0A	; 10
    14e4:	a2 0a       	sbc	r10, r18
    14e6:	b1 08       	sbc	r11, r1
    14e8:	2f e7       	ldi	r18, 0x7F	; 127
    14ea:	82 16       	cp	r8, r18
    14ec:	2a e1       	ldi	r18, 0x1A	; 26
    14ee:	92 06       	cpc	r9, r18
    14f0:	26 e0       	ldi	r18, 0x06	; 6
    14f2:	a2 06       	cpc	r10, r18
    14f4:	b1 04       	cpc	r11, r1
    14f6:	50 f5       	brcc	.+84     	; 0x154c <data_check+0x196>
    14f8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    14fc:	4b 01       	movw	r8, r22
    14fe:	5c 01       	movw	r10, r24
    1500:	a7 01       	movw	r20, r14
    1502:	96 01       	movw	r18, r12
    1504:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__subsf3>
    1508:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    150c:	9b 01       	movw	r18, r22
    150e:	77 23       	and	r23, r23
    1510:	24 f4       	brge	.+8      	; 0x151a <data_check+0x164>
    1512:	22 27       	eor	r18, r18
    1514:	33 27       	eor	r19, r19
    1516:	26 1b       	sub	r18, r22
    1518:	37 0b       	sbc	r19, r23
    151a:	b9 01       	movw	r22, r18
    151c:	33 0f       	add	r19, r19
    151e:	88 0b       	sbc	r24, r24
    1520:	99 0b       	sbc	r25, r25
    1522:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    1526:	9b 01       	movw	r18, r22
    1528:	ac 01       	movw	r20, r24
    152a:	69 81       	ldd	r22, Y+1	; 0x01
    152c:	7a 81       	ldd	r23, Y+2	; 0x02
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__gesf2>
    1536:	88 23       	and	r24, r24
    1538:	4c f0       	brlt	.+18     	; 0x154c <data_check+0x196>
    153a:	a5 01       	movw	r20, r10
    153c:	94 01       	movw	r18, r8
    153e:	c3 01       	movw	r24, r6
    1540:	b2 01       	movw	r22, r4
    1542:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__addsf3>
    1546:	2b 01       	movw	r4, r22
    1548:	3c 01       	movw	r6, r24
    154a:	33 94       	inc	r3
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	05 97       	sbiw	r24, 0x05	; 5
    1558:	09 f0       	breq	.+2      	; 0x155c <data_check+0x1a6>
    155a:	b9 cf       	rjmp	.-142    	; 0x14ce <data_check+0x118>
    155c:	33 20       	and	r3, r3
    155e:	69 f0       	breq	.+26     	; 0x157a <data_check+0x1c4>
    1560:	63 2d       	mov	r22, r3
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__floatunsisf>
    156c:	9b 01       	movw	r18, r22
    156e:	ac 01       	movw	r20, r24
    1570:	c3 01       	movw	r24, r6
    1572:	b2 01       	movw	r22, r4
    1574:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <data_check+0x1cc>
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	80 e8       	ldi	r24, 0x80	; 128
    1580:	9f eb       	ldi	r25, 0xBF	; 191
    1582:	26 96       	adiw	r28, 0x06	; 6
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	bf 90       	pop	r11
    159a:	af 90       	pop	r10
    159c:	9f 90       	pop	r9
    159e:	8f 90       	pop	r8
    15a0:	7f 90       	pop	r7
    15a2:	6f 90       	pop	r6
    15a4:	5f 90       	pop	r5
    15a6:	4f 90       	pop	r4
    15a8:	3f 90       	pop	r3
    15aa:	08 95       	ret

000015ac <data_collect>:
    15ac:	af 92       	push	r10
    15ae:	bf 92       	push	r11
    15b0:	cf 92       	push	r12
    15b2:	df 92       	push	r13
    15b4:	ef 92       	push	r14
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <data_collect+0x16>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <data_collect+0x18>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	5c 01       	movw	r10, r24
    15ca:	8b 01       	movw	r16, r22
    15cc:	2b dd       	rcall	.-1450   	; 0x1024 <get_pressure>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e2       	ldi	r20, 0x20	; 32
    15d4:	51 e4       	ldi	r21, 0x41	; 65
    15d6:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    15da:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    15de:	69 83       	std	Y+1, r22	; 0x01
    15e0:	7a 83       	std	Y+2, r23	; 0x02
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	9c 83       	std	Y+4, r25	; 0x04
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	be 01       	movw	r22, r28
    15ec:	6f 5f       	subi	r22, 0xFF	; 255
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	c8 01       	movw	r24, r16
    15f2:	fc db       	rcall	.-2056   	; 0xdec <rb32_write>
    15f4:	c8 01       	movw	r24, r16
    15f6:	df de       	rcall	.-578    	; 0x13b6 <data_check>
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e2       	ldi	r20, 0x20	; 32
    15fe:	51 e4       	ldi	r21, 0x41	; 65
    1600:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    1604:	6b 01       	movw	r12, r22
    1606:	7c 01       	movw	r14, r24
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e8       	ldi	r20, 0x80	; 128
    160e:	5f eb       	ldi	r21, 0xBF	; 191
    1610:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__cmpsf2>
    1614:	88 23       	and	r24, r24
    1616:	81 f1       	breq	.+96     	; 0x1678 <data_collect+0xcc>
    1618:	c0 92 f9 20 	sts	0x20F9, r12	; 0x8020f9 <press>
    161c:	d0 92 fa 20 	sts	0x20FA, r13	; 0x8020fa <press+0x1>
    1620:	e0 92 fb 20 	sts	0x20FB, r14	; 0x8020fb <press+0x2>
    1624:	f0 92 fc 20 	sts	0x20FC, r15	; 0x8020fc <press+0x3>
    1628:	c7 01       	movw	r24, r14
    162a:	b6 01       	movw	r22, r12
    162c:	a8 dd       	rcall	.-1200   	; 0x117e <get_altitude>
    162e:	60 93 f1 20 	sts	0x20F1, r22	; 0x8020f1 <alt>
    1632:	70 93 f2 20 	sts	0x20F2, r23	; 0x8020f2 <alt+0x1>
    1636:	80 93 f3 20 	sts	0x20F3, r24	; 0x8020f3 <alt+0x2>
    163a:	90 93 f4 20 	sts	0x20F4, r25	; 0x8020f4 <alt+0x3>
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	48 ec       	ldi	r20, 0xC8	; 200
    1644:	52 e4       	ldi	r21, 0x42	; 66
    1646:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    164a:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    164e:	6d 83       	std	Y+5, r22	; 0x05
    1650:	7e 83       	std	Y+6, r23	; 0x06
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	be 01       	movw	r22, r28
    1658:	6b 5f       	subi	r22, 0xFB	; 251
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	c5 01       	movw	r24, r10
    165e:	50 db       	rcall	.-2400   	; 0xd00 <rb16_write>
    1660:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <rate>
    1664:	c5 01       	movw	r24, r10
    1666:	f4 dd       	rcall	.-1048   	; 0x1250 <diff>
    1668:	60 93 e9 20 	sts	0x20E9, r22	; 0x8020e9 <velocity>
    166c:	70 93 ea 20 	sts	0x20EA, r23	; 0x8020ea <velocity+0x1>
    1670:	80 93 eb 20 	sts	0x20EB, r24	; 0x8020eb <velocity+0x2>
    1674:	90 93 ec 20 	sts	0x20EC, r25	; 0x8020ec <velocity+0x3>
    1678:	83 e3       	ldi	r24, 0x33	; 51
    167a:	93 e1       	ldi	r25, 0x13	; 19
    167c:	a5 e9       	ldi	r26, 0x95	; 149
    167e:	b3 e4       	ldi	r27, 0x43	; 67
    1680:	80 93 f5 20 	sts	0x20F5, r24	; 0x8020f5 <temp>
    1684:	90 93 f6 20 	sts	0x20F6, r25	; 0x8020f6 <temp+0x1>
    1688:	a0 93 f7 20 	sts	0x20F7, r26	; 0x8020f7 <temp+0x2>
    168c:	b0 93 f8 20 	sts	0x20F8, r27	; 0x8020f8 <temp+0x3>
    1690:	26 96       	adiw	r28, 0x06	; 6
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	bf 90       	pop	r11
    16a8:	af 90       	pop	r10
    16aa:	08 95       	ret

000016ac <state_check>:
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	c0 90 e9 20 	lds	r12, 0x20E9	; 0x8020e9 <velocity>
    16b8:	d0 90 ea 20 	lds	r13, 0x20EA	; 0x8020ea <velocity+0x1>
    16bc:	e0 90 eb 20 	lds	r14, 0x20EB	; 0x8020eb <velocity+0x2>
    16c0:	f0 90 ec 20 	lds	r15, 0x20EC	; 0x8020ec <velocity+0x3>
    16c4:	c7 01       	movw	r24, r14
    16c6:	b6 01       	movw	r22, r12
    16c8:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    16cc:	9b 01       	movw	r18, r22
    16ce:	77 23       	and	r23, r23
    16d0:	24 f4       	brge	.+8      	; 0x16da <state_check+0x2e>
    16d2:	22 27       	eor	r18, r18
    16d4:	33 27       	eor	r19, r19
    16d6:	26 1b       	sub	r18, r22
    16d8:	37 0b       	sbc	r19, r23
    16da:	26 30       	cpi	r18, 0x06	; 6
    16dc:	31 05       	cpc	r19, r1
    16de:	8c f0       	brlt	.+34     	; 0x1702 <state_check+0x56>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	a9 01       	movw	r20, r18
    16e6:	c7 01       	movw	r24, r14
    16e8:	b6 01       	movw	r22, r12
    16ea:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__cmpsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	24 f0       	brlt	.+8      	; 0x16fa <state_check+0x4e>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <state>
    16f8:	24 c0       	rjmp	.+72     	; 0x1742 <state_check+0x96>
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <state>
    1700:	20 c0       	rjmp	.+64     	; 0x1742 <state_check+0x96>
    1702:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <state>
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	48 e4       	ldi	r20, 0x48	; 72
    170c:	52 e4       	ldi	r21, 0x42	; 66
    170e:	60 91 f1 20 	lds	r22, 0x20F1	; 0x8020f1 <alt>
    1712:	70 91 f2 20 	lds	r23, 0x20F2	; 0x8020f2 <alt+0x1>
    1716:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <alt+0x2>
    171a:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <alt+0x3>
    171e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__gesf2>
    1722:	18 16       	cp	r1, r24
    1724:	24 f0       	brlt	.+8      	; 0x172e <state_check+0x82>
    1726:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <reset_received>
    172a:	88 23       	and	r24, r24
    172c:	19 f0       	breq	.+6      	; 0x1734 <state_check+0x88>
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <state>
    1734:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <released>
    1738:	88 23       	and	r24, r24
    173a:	19 f0       	breq	.+6      	; 0x1742 <state_check+0x96>
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <state>
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	08 95       	ret

0000174c <servo_pid>:
    174c:	8f 92       	push	r8
    174e:	9f 92       	push	r9
    1750:	af 92       	push	r10
    1752:	bf 92       	push	r11
    1754:	cf 92       	push	r12
    1756:	df 92       	push	r13
    1758:	ef 92       	push	r14
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	7c 01       	movw	r14, r24
    1766:	c0 e0       	ldi	r28, 0x00	; 0
    1768:	d0 e0       	ldi	r29, 0x00	; 0
    176a:	00 e0       	ldi	r16, 0x00	; 0
    176c:	10 e0       	ldi	r17, 0x00	; 0
    176e:	be 01       	movw	r22, r28
    1770:	c7 01       	movw	r24, r14
    1772:	0f db       	rcall	.-2530   	; 0xd92 <rb16_get_nth>
    1774:	08 0f       	add	r16, r24
    1776:	19 1f       	adc	r17, r25
    1778:	21 96       	adiw	r28, 0x01	; 1
    177a:	ca 30       	cpi	r28, 0x0A	; 10
    177c:	d1 05       	cpc	r29, r1
    177e:	b9 f7       	brne	.-18     	; 0x176e <servo_pid+0x22>
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	c7 01       	movw	r24, r14
    1786:	05 db       	rcall	.-2550   	; 0xd92 <rb16_get_nth>
    1788:	ec 01       	movw	r28, r24
    178a:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <rate>
    178e:	c7 01       	movw	r24, r14
    1790:	5f dd       	rcall	.-1346   	; 0x1250 <diff>
    1792:	6b 01       	movw	r12, r22
    1794:	7c 01       	movw	r14, r24
    1796:	be 01       	movw	r22, r28
    1798:	dd 0f       	add	r29, r29
    179a:	88 0b       	sbc	r24, r24
    179c:	99 0b       	sbc	r25, r25
    179e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	a9 01       	movw	r20, r18
    17a8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	48 ec       	ldi	r20, 0xC8	; 200
    17b2:	52 e4       	ldi	r21, 0x42	; 66
    17b4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    17b8:	4b 01       	movw	r8, r22
    17ba:	5c 01       	movw	r10, r24
    17bc:	b8 01       	movw	r22, r16
    17be:	11 0f       	add	r17, r17
    17c0:	88 0b       	sbc	r24, r24
    17c2:	99 0b       	sbc	r25, r25
    17c4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__floatsisf>
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	a9 01       	movw	r20, r18
    17ce:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	48 ec       	ldi	r20, 0xC8	; 200
    17d8:	52 e4       	ldi	r21, 0x42	; 66
    17da:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	c5 01       	movw	r24, r10
    17e4:	b4 01       	movw	r22, r8
    17e6:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__addsf3>
    17ea:	4b 01       	movw	r8, r22
    17ec:	5c 01       	movw	r10, r24
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	a9 01       	movw	r20, r18
    17f4:	c7 01       	movw	r24, r14
    17f6:	b6 01       	movw	r22, r12
    17f8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	c5 01       	movw	r24, r10
    1802:	b4 01       	movw	r22, r8
    1804:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__addsf3>
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e8       	ldi	r19, 0x80	; 128
    180c:	4b eb       	ldi	r20, 0xBB	; 187
    180e:	54 e4       	ldi	r21, 0x44	; 68
    1810:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__addsf3>
    1814:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__fixunssfsi>
    1818:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <servo_pulse>
    181c:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <servo_pulse+0x1>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__floatunsisf>
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	4a e7       	ldi	r20, 0x7A	; 122
    182e:	54 e4       	ldi	r21, 0x44	; 68
    1830:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divsf3>
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a ef       	ldi	r20, 0xFA	; 250
    183a:	53 e4       	ldi	r21, 0x43	; 67
    183c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    1840:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__fixunssfsi>
    1844:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1848:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	ff 90       	pop	r15
    1856:	ef 90       	pop	r14
    1858:	df 90       	pop	r13
    185a:	cf 90       	pop	r12
    185c:	bf 90       	pop	r11
    185e:	af 90       	pop	r10
    1860:	9f 90       	pop	r9
    1862:	8f 90       	pop	r8
    1864:	08 95       	ret

00001866 <clock_init>:
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	85 db       	rcall	.-2294   	; 0xf76 <sysclk_enable_module>
    186c:	e0 e0       	ldi	r30, 0x00	; 0
    186e:	fa e0       	ldi	r31, 0x0A	; 10
    1870:	87 e0       	ldi	r24, 0x07	; 7
    1872:	80 83       	st	Z, r24
    1874:	81 e1       	ldi	r24, 0x11	; 17
    1876:	9a e7       	ldi	r25, 0x7A	; 122
    1878:	86 a3       	std	Z+38, r24	; 0x26
    187a:	97 a3       	std	Z+39, r25	; 0x27
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	86 83       	std	Z+6, r24	; 0x06
    1880:	08 95       	ret

00001882 <cali_alt>:
    1882:	80 91 f9 20 	lds	r24, 0x20F9	; 0x8020f9 <press>
    1886:	90 91 fa 20 	lds	r25, 0x20FA	; 0x8020fa <press+0x1>
    188a:	a0 91 fb 20 	lds	r26, 0x20FB	; 0x8020fb <press+0x2>
    188e:	b0 91 fc 20 	lds	r27, 0x20FC	; 0x8020fc <press+0x3>
    1892:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <ground_p>
    1896:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <ground_p+0x1>
    189a:	a0 93 28 20 	sts	0x2028, r26	; 0x802028 <ground_p+0x2>
    189e:	b0 93 29 20 	sts	0x2029, r27	; 0x802029 <ground_p+0x3>
    18a2:	83 e3       	ldi	r24, 0x33	; 51
    18a4:	93 e1       	ldi	r25, 0x13	; 19
    18a6:	a5 e9       	ldi	r26, 0x95	; 149
    18a8:	b3 e4       	ldi	r27, 0x43	; 67
    18aa:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <ground_t>
    18ae:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <ground_t+0x1>
    18b2:	a0 93 24 20 	sts	0x2024, r26	; 0x802024 <ground_t+0x2>
    18b6:	b0 93 25 20 	sts	0x2025, r27	; 0x802025 <ground_t+0x3>
    18ba:	08 95       	ret

000018bc <send_gps>:
    18bc:	8f 92       	push	r8
    18be:	9f 92       	push	r9
    18c0:	af 92       	push	r10
    18c2:	bf 92       	push	r11
    18c4:	cf 92       	push	r12
    18c6:	df 92       	push	r13
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	c6 54       	subi	r28, 0x46	; 70
    18da:	d1 09       	sbc	r29, r1
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	60 91 dd 20 	lds	r22, 0x20DD	; 0x8020dd <gps_long>
    18e4:	70 91 de 20 	lds	r23, 0x20DE	; 0x8020de <gps_long+0x1>
    18e8:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <gps_long+0x2>
    18ec:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <gps_long+0x3>
    18f0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    18f4:	16 2f       	mov	r17, r22
    18f6:	07 2f       	mov	r16, r23
    18f8:	c0 90 e1 20 	lds	r12, 0x20E1	; 0x8020e1 <gps_lat>
    18fc:	d0 90 e2 20 	lds	r13, 0x20E2	; 0x8020e2 <gps_lat+0x1>
    1900:	e0 90 e3 20 	lds	r14, 0x20E3	; 0x8020e3 <gps_lat+0x2>
    1904:	f0 90 e4 20 	lds	r15, 0x20E4	; 0x8020e4 <gps_lat+0x3>
    1908:	a6 2f       	mov	r26, r22
    190a:	b7 2f       	mov	r27, r23
    190c:	bb 23       	and	r27, r27
    190e:	1c f4       	brge	.+6      	; 0x1916 <send_gps+0x5a>
    1910:	b1 95       	neg	r27
    1912:	a1 95       	neg	r26
    1914:	b1 09       	sbc	r27, r1
    1916:	20 e4       	ldi	r18, 0x40	; 64
    1918:	32 e4       	ldi	r19, 0x42	; 66
    191a:	4f e0       	ldi	r20, 0x0F	; 15
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__mulshisi3>
    1922:	0f 2e       	mov	r0, r31
    1924:	f0 e4       	ldi	r31, 0x40	; 64
    1926:	8f 2e       	mov	r8, r31
    1928:	f2 e4       	ldi	r31, 0x42	; 66
    192a:	9f 2e       	mov	r9, r31
    192c:	ff e0       	ldi	r31, 0x0F	; 15
    192e:	af 2e       	mov	r10, r31
    1930:	b1 2c       	mov	r11, r1
    1932:	f0 2d       	mov	r31, r0
    1934:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    1938:	9f 93       	push	r25
    193a:	8f 93       	push	r24
    193c:	7f 93       	push	r23
    193e:	6f 93       	push	r22
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	34 e2       	ldi	r19, 0x24	; 36
    1948:	44 e7       	ldi	r20, 0x74	; 116
    194a:	59 e4       	ldi	r21, 0x49	; 73
    194c:	c7 01       	movw	r24, r14
    194e:	b6 01       	movw	r22, r12
    1950:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    1954:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1958:	a5 01       	movw	r20, r10
    195a:	94 01       	movw	r18, r8
    195c:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    1960:	9f 93       	push	r25
    1962:	8f 93       	push	r24
    1964:	7f 93       	push	r23
    1966:	6f 93       	push	r22
    1968:	c7 01       	movw	r24, r14
    196a:	b6 01       	movw	r22, r12
    196c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1970:	7f 93       	push	r23
    1972:	6f 93       	push	r22
    1974:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <gps_msg+0x1>
    1978:	8f 93       	push	r24
    197a:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <gps_msg>
    197e:	8f 93       	push	r24
    1980:	8e 01       	movw	r16, r28
    1982:	0f 5f       	subi	r16, 0xFF	; 255
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	1f 93       	push	r17
    1988:	0f 93       	push	r16
    198a:	0e 94 6f 1a 	call	0x34de	; 0x34de <sprintf>
    198e:	1f 93       	push	r17
    1990:	0f 93       	push	r16
    1992:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <printf>
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	ca 5b       	subi	r28, 0xBA	; 186
    199c:	df 4f       	sbci	r29, 0xFF	; 255
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	df 90       	pop	r13
    19b0:	cf 90       	pop	r12
    19b2:	bf 90       	pop	r11
    19b4:	af 90       	pop	r10
    19b6:	9f 90       	pop	r9
    19b8:	8f 90       	pop	r8
    19ba:	08 95       	ret

000019bc <packet>:
    19bc:	2f 92       	push	r2
    19be:	3f 92       	push	r3
    19c0:	4f 92       	push	r4
    19c2:	5f 92       	push	r5
    19c4:	6f 92       	push	r6
    19c6:	7f 92       	push	r7
    19c8:	8f 92       	push	r8
    19ca:	9f 92       	push	r9
    19cc:	af 92       	push	r10
    19ce:	bf 92       	push	r11
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	00 91 fd 20 	lds	r16, 0x20FD	; 0x8020fd <packets>
    19e4:	10 91 fe 20 	lds	r17, 0x20FE	; 0x8020fe <packets+0x1>
    19e8:	0f 5f       	subi	r16, 0xFF	; 255
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	00 93 fd 20 	sts	0x20FD, r16	; 0x8020fd <packets>
    19f0:	10 93 fe 20 	sts	0x20FE, r17	; 0x8020fe <packets+0x1>
    19f4:	60 91 d9 20 	lds	r22, 0x20D9	; 0x8020d9 <gps_alt>
    19f8:	70 91 da 20 	lds	r23, 0x20DA	; 0x8020da <gps_alt+0x1>
    19fc:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <gps_alt+0x2>
    1a00:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <gps_alt+0x3>
    1a04:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1a08:	36 2e       	mov	r3, r22
    1a0a:	27 2e       	mov	r2, r23
    1a0c:	40 90 dd 20 	lds	r4, 0x20DD	; 0x8020dd <gps_long>
    1a10:	50 90 de 20 	lds	r5, 0x20DE	; 0x8020de <gps_long+0x1>
    1a14:	60 90 df 20 	lds	r6, 0x20DF	; 0x8020df <gps_long+0x2>
    1a18:	70 90 e0 20 	lds	r7, 0x20E0	; 0x8020e0 <gps_long+0x3>
    1a1c:	80 90 e1 20 	lds	r8, 0x20E1	; 0x8020e1 <gps_lat>
    1a20:	90 90 e2 20 	lds	r9, 0x20E2	; 0x8020e2 <gps_lat+0x1>
    1a24:	a0 90 e3 20 	lds	r10, 0x20E3	; 0x8020e3 <gps_lat+0x2>
    1a28:	b0 90 e4 20 	lds	r11, 0x20E4	; 0x8020e4 <gps_lat+0x3>
    1a2c:	60 91 e5 20 	lds	r22, 0x20E5	; 0x8020e5 <gps_t>
    1a30:	70 91 e6 20 	lds	r23, 0x20E6	; 0x8020e6 <gps_t+0x1>
    1a34:	80 91 e7 20 	lds	r24, 0x20E7	; 0x8020e7 <gps_t+0x2>
    1a38:	90 91 e8 20 	lds	r25, 0x20E8	; 0x8020e8 <gps_t+0x3>
    1a3c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1a40:	6b 01       	movw	r12, r22
    1a42:	7c 01       	movw	r14, r24
    1a44:	c0 91 01 21 	lds	r28, 0x2101	; 0x802101 <timer>
    1a48:	d0 91 02 21 	lds	r29, 0x2102	; 0x802102 <timer+0x1>
    1a4c:	60 91 c7 20 	lds	r22, 0x20C7	; 0x8020c7 <angle>
    1a50:	70 91 c8 20 	lds	r23, 0x20C8	; 0x8020c8 <angle+0x1>
    1a54:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <angle+0x2>
    1a58:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <angle+0x3>
    1a5c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1a60:	7f 93       	push	r23
    1a62:	6f 93       	push	r22
    1a64:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <state>
    1a68:	1f 92       	push	r1
    1a6a:	8f 93       	push	r24
    1a6c:	60 91 cb 20 	lds	r22, 0x20CB	; 0x8020cb <rpm>
    1a70:	70 91 cc 20 	lds	r23, 0x20CC	; 0x8020cc <rpm+0x1>
    1a74:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <rpm+0x2>
    1a78:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <rpm+0x3>
    1a7c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1a80:	7f 93       	push	r23
    1a82:	6f 93       	push	r22
    1a84:	60 91 cf 20 	lds	r22, 0x20CF	; 0x8020cf <roll>
    1a88:	70 91 d0 20 	lds	r23, 0x20D0	; 0x8020d0 <roll+0x1>
    1a8c:	80 91 d1 20 	lds	r24, 0x20D1	; 0x8020d1 <roll+0x2>
    1a90:	90 91 d2 20 	lds	r25, 0x20D2	; 0x8020d2 <roll+0x3>
    1a94:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1a98:	7f 93       	push	r23
    1a9a:	6f 93       	push	r22
    1a9c:	60 91 d3 20 	lds	r22, 0x20D3	; 0x8020d3 <pitch>
    1aa0:	70 91 d4 20 	lds	r23, 0x20D4	; 0x8020d4 <pitch+0x1>
    1aa4:	80 91 d5 20 	lds	r24, 0x20D5	; 0x8020d5 <pitch+0x2>
    1aa8:	90 91 d6 20 	lds	r25, 0x20D6	; 0x8020d6 <pitch+0x3>
    1aac:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1ab0:	7f 93       	push	r23
    1ab2:	6f 93       	push	r22
    1ab4:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <gps_sats+0x1>
    1ab8:	8f 93       	push	r24
    1aba:	80 91 d7 20 	lds	r24, 0x20D7	; 0x8020d7 <gps_sats>
    1abe:	8f 93       	push	r24
    1ac0:	83 2d       	mov	r24, r3
    1ac2:	92 2d       	mov	r25, r2
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	9c 01       	movw	r18, r24
    1aca:	22 0f       	add	r18, r18
    1acc:	33 1f       	adc	r19, r19
    1ace:	22 0f       	add	r18, r18
    1ad0:	33 1f       	adc	r19, r19
    1ad2:	82 0f       	add	r24, r18
    1ad4:	93 1f       	adc	r25, r19
    1ad6:	6a e0       	ldi	r22, 0x0A	; 10
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	0e 94 84 19 	call	0x3308	; 0x3308 <__divmodhi4>
    1ade:	9f 93       	push	r25
    1ae0:	8f 93       	push	r24
    1ae2:	2f 92       	push	r2
    1ae4:	3f 92       	push	r3
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	34 e2       	ldi	r19, 0x24	; 36
    1aea:	44 e7       	ldi	r20, 0x74	; 116
    1aec:	59 e4       	ldi	r21, 0x49	; 73
    1aee:	c3 01       	movw	r24, r6
    1af0:	b2 01       	movw	r22, r4
    1af2:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    1af6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1afa:	20 e4       	ldi	r18, 0x40	; 64
    1afc:	32 e4       	ldi	r19, 0x42	; 66
    1afe:	4f e0       	ldi	r20, 0x0F	; 15
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    1b06:	9b 01       	movw	r18, r22
    1b08:	77 23       	and	r23, r23
    1b0a:	24 f4       	brge	.+8      	; 0x1b14 <packet+0x158>
    1b0c:	22 27       	eor	r18, r18
    1b0e:	33 27       	eor	r19, r19
    1b10:	26 1b       	sub	r18, r22
    1b12:	37 0b       	sbc	r19, r23
    1b14:	c9 01       	movw	r24, r18
    1b16:	33 0f       	add	r19, r19
    1b18:	aa 0b       	sbc	r26, r26
    1b1a:	bb 0b       	sbc	r27, r27
    1b1c:	bf 93       	push	r27
    1b1e:	af 93       	push	r26
    1b20:	9f 93       	push	r25
    1b22:	8f 93       	push	r24
    1b24:	c3 01       	movw	r24, r6
    1b26:	b2 01       	movw	r22, r4
    1b28:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1b2c:	7f 93       	push	r23
    1b2e:	6f 93       	push	r22
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	34 e2       	ldi	r19, 0x24	; 36
    1b34:	44 e7       	ldi	r20, 0x74	; 116
    1b36:	59 e4       	ldi	r21, 0x49	; 73
    1b38:	c5 01       	movw	r24, r10
    1b3a:	b4 01       	movw	r22, r8
    1b3c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__mulsf3>
    1b40:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1b44:	20 e4       	ldi	r18, 0x40	; 64
    1b46:	32 e4       	ldi	r19, 0x42	; 66
    1b48:	4f e0       	ldi	r20, 0x0F	; 15
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    1b50:	9f 93       	push	r25
    1b52:	8f 93       	push	r24
    1b54:	7f 93       	push	r23
    1b56:	6f 93       	push	r22
    1b58:	c5 01       	movw	r24, r10
    1b5a:	b4 01       	movw	r22, r8
    1b5c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1b60:	7f 93       	push	r23
    1b62:	6f 93       	push	r22
    1b64:	0f 2e       	mov	r0, r31
    1b66:	f4 e6       	ldi	r31, 0x64	; 100
    1b68:	8f 2e       	mov	r8, r31
    1b6a:	91 2c       	mov	r9, r1
    1b6c:	a1 2c       	mov	r10, r1
    1b6e:	b1 2c       	mov	r11, r1
    1b70:	f0 2d       	mov	r31, r0
    1b72:	c7 01       	movw	r24, r14
    1b74:	b6 01       	movw	r22, r12
    1b76:	a5 01       	movw	r20, r10
    1b78:	94 01       	movw	r18, r8
    1b7a:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    1b7e:	7f 93       	push	r23
    1b80:	6f 93       	push	r22
    1b82:	c7 01       	movw	r24, r14
    1b84:	b6 01       	movw	r22, r12
    1b86:	20 e1       	ldi	r18, 0x10	; 16
    1b88:	37 e2       	ldi	r19, 0x27	; 39
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    1b92:	f2 2e       	mov	r15, r18
    1b94:	e3 2e       	mov	r14, r19
    1b96:	a5 01       	movw	r20, r10
    1b98:	94 01       	movw	r18, r8
    1b9a:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    1b9e:	3f 93       	push	r19
    1ba0:	2f 93       	push	r18
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	60 91 ed 20 	lds	r22, 0x20ED	; 0x8020ed <volt>
    1baa:	70 91 ee 20 	lds	r23, 0x20EE	; 0x8020ee <volt+0x1>
    1bae:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <volt+0x2>
    1bb2:	90 91 f0 20 	lds	r25, 0x20F0	; 0x8020f0 <volt+0x3>
    1bb6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1bba:	7f 93       	push	r23
    1bbc:	6f 93       	push	r22
    1bbe:	23 e3       	ldi	r18, 0x33	; 51
    1bc0:	33 e9       	ldi	r19, 0x93	; 147
    1bc2:	48 e8       	ldi	r20, 0x88	; 136
    1bc4:	53 e4       	ldi	r21, 0x43	; 67
    1bc6:	60 91 f5 20 	lds	r22, 0x20F5	; 0x8020f5 <temp>
    1bca:	70 91 f6 20 	lds	r23, 0x20F6	; 0x8020f6 <temp+0x1>
    1bce:	80 91 f7 20 	lds	r24, 0x20F7	; 0x8020f7 <temp+0x2>
    1bd2:	90 91 f8 20 	lds	r25, 0x20F8	; 0x8020f8 <temp+0x3>
    1bd6:	ab d7       	rcall	.+3926   	; 0x2b2e <__subsf3>
    1bd8:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1bdc:	7f 93       	push	r23
    1bde:	6f 93       	push	r22
    1be0:	60 91 f9 20 	lds	r22, 0x20F9	; 0x8020f9 <press>
    1be4:	70 91 fa 20 	lds	r23, 0x20FA	; 0x8020fa <press+0x1>
    1be8:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <press+0x2>
    1bec:	90 91 fc 20 	lds	r25, 0x20FC	; 0x8020fc <press+0x3>
    1bf0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1bf4:	9f 93       	push	r25
    1bf6:	8f 93       	push	r24
    1bf8:	7f 93       	push	r23
    1bfa:	6f 93       	push	r22
    1bfc:	60 91 f1 20 	lds	r22, 0x20F1	; 0x8020f1 <alt>
    1c00:	70 91 f2 20 	lds	r23, 0x20F2	; 0x8020f2 <alt+0x1>
    1c04:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <alt+0x2>
    1c08:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <alt+0x3>
    1c0c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fixsfsi>
    1c10:	7f 93       	push	r23
    1c12:	6f 93       	push	r22
    1c14:	1f 93       	push	r17
    1c16:	0f 93       	push	r16
    1c18:	9e 01       	movw	r18, r28
    1c1a:	ad ec       	ldi	r26, 0xCD	; 205
    1c1c:	bc ec       	ldi	r27, 0xCC	; 204
    1c1e:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__umulhisi3>
    1c22:	96 95       	lsr	r25
    1c24:	87 95       	ror	r24
    1c26:	96 95       	lsr	r25
    1c28:	87 95       	ror	r24
    1c2a:	96 95       	lsr	r25
    1c2c:	87 95       	ror	r24
    1c2e:	9c 01       	movw	r18, r24
    1c30:	22 0f       	add	r18, r18
    1c32:	33 1f       	adc	r19, r19
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	9e 01       	movw	r18, r28
    1c46:	28 1b       	sub	r18, r24
    1c48:	39 0b       	sbc	r19, r25
    1c4a:	c9 01       	movw	r24, r18
    1c4c:	9f 93       	push	r25
    1c4e:	2f 93       	push	r18
    1c50:	9e 01       	movw	r18, r28
    1c52:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__umulhisi3>
    1c56:	96 95       	lsr	r25
    1c58:	87 95       	ror	r24
    1c5a:	96 95       	lsr	r25
    1c5c:	87 95       	ror	r24
    1c5e:	96 95       	lsr	r25
    1c60:	87 95       	ror	r24
    1c62:	9f 93       	push	r25
    1c64:	8f 93       	push	r24
    1c66:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <format+0x1>
    1c6a:	8f 93       	push	r24
    1c6c:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <format>
    1c70:	8f 93       	push	r24
    1c72:	ca e3       	ldi	r28, 0x3A	; 58
    1c74:	d1 e2       	ldi	r29, 0x21	; 33
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	0e 94 6f 1a 	call	0x34de	; 0x34de <sprintf>
    1c7e:	2d b7       	in	r18, 0x3d	; 61
    1c80:	3e b7       	in	r19, 0x3e	; 62
    1c82:	2a 5c       	subi	r18, 0xCA	; 202
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	2d bf       	out	0x3d, r18	; 61
    1c88:	3e bf       	out	0x3e, r19	; 62
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <printf>
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	8f 90       	pop	r8
    1cae:	7f 90       	pop	r7
    1cb0:	6f 90       	pop	r6
    1cb2:	5f 90       	pop	r5
    1cb4:	4f 90       	pop	r4
    1cb6:	3f 90       	pop	r3
    1cb8:	2f 90       	pop	r2
    1cba:	08 95       	ret

00001cbc <eeprom_write_const>:
    1cbc:	5f 92       	push	r5
    1cbe:	6f 92       	push	r6
    1cc0:	7f 92       	push	r7
    1cc2:	8f 92       	push	r8
    1cc4:	9f 92       	push	r9
    1cc6:	af 92       	push	r10
    1cc8:	bf 92       	push	r11
    1cca:	cf 92       	push	r12
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	a0 97       	sbiw	r28, 0x20	; 32
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <ground_p>
    1ce8:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <ground_p+0x1>
    1cec:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <ground_p+0x2>
    1cf0:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <ground_p+0x3>
    1cf4:	f2 d7       	rcall	.+4068   	; 0x2cda <__fixunssfdi>
    1cf6:	12 2f       	mov	r17, r18
    1cf8:	63 2e       	mov	r6, r19
    1cfa:	74 2e       	mov	r7, r20
    1cfc:	85 2e       	mov	r8, r21
    1cfe:	96 2e       	mov	r9, r22
    1d00:	a7 2e       	mov	r10, r23
    1d02:	b8 2e       	mov	r11, r24
    1d04:	c9 2e       	mov	r12, r25
    1d06:	60 91 22 20 	lds	r22, 0x2022	; 0x802022 <ground_t>
    1d0a:	70 91 23 20 	lds	r23, 0x2023	; 0x802023 <ground_t+0x1>
    1d0e:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <ground_t+0x2>
    1d12:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <ground_t+0x3>
    1d16:	e1 d7       	rcall	.+4034   	; 0x2cda <__fixunssfdi>
    1d18:	e2 2f       	mov	r30, r18
    1d1a:	53 2e       	mov	r5, r19
    1d1c:	d4 2e       	mov	r13, r20
    1d1e:	e5 2e       	mov	r14, r21
    1d20:	f6 2e       	mov	r15, r22
    1d22:	b7 2f       	mov	r27, r23
    1d24:	a8 2f       	mov	r26, r24
    1d26:	f9 2f       	mov	r31, r25
    1d28:	19 83       	std	Y+1, r17	; 0x01
    1d2a:	21 2f       	mov	r18, r17
    1d2c:	36 2d       	mov	r19, r6
    1d2e:	47 2d       	mov	r20, r7
    1d30:	58 2d       	mov	r21, r8
    1d32:	69 2d       	mov	r22, r9
    1d34:	7a 2d       	mov	r23, r10
    1d36:	8b 2d       	mov	r24, r11
    1d38:	9c 2d       	mov	r25, r12
    1d3a:	08 e0       	ldi	r16, 0x08	; 8
    1d3c:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1d40:	2a 83       	std	Y+2, r18	; 0x02
    1d42:	21 2f       	mov	r18, r17
    1d44:	36 2d       	mov	r19, r6
    1d46:	47 2d       	mov	r20, r7
    1d48:	58 2d       	mov	r21, r8
    1d4a:	69 2d       	mov	r22, r9
    1d4c:	7a 2d       	mov	r23, r10
    1d4e:	8b 2d       	mov	r24, r11
    1d50:	9c 2d       	mov	r25, r12
    1d52:	00 e1       	ldi	r16, 0x10	; 16
    1d54:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1d58:	2b 83       	std	Y+3, r18	; 0x03
    1d5a:	21 2f       	mov	r18, r17
    1d5c:	36 2d       	mov	r19, r6
    1d5e:	47 2d       	mov	r20, r7
    1d60:	58 2d       	mov	r21, r8
    1d62:	69 2d       	mov	r22, r9
    1d64:	7a 2d       	mov	r23, r10
    1d66:	8b 2d       	mov	r24, r11
    1d68:	9c 2d       	mov	r25, r12
    1d6a:	08 e1       	ldi	r16, 0x18	; 24
    1d6c:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1d70:	2c 83       	std	Y+4, r18	; 0x04
    1d72:	21 2f       	mov	r18, r17
    1d74:	36 2d       	mov	r19, r6
    1d76:	47 2d       	mov	r20, r7
    1d78:	58 2d       	mov	r21, r8
    1d7a:	69 2d       	mov	r22, r9
    1d7c:	7a 2d       	mov	r23, r10
    1d7e:	8b 2d       	mov	r24, r11
    1d80:	9c 2d       	mov	r25, r12
    1d82:	00 e2       	ldi	r16, 0x20	; 32
    1d84:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1d88:	2d 83       	std	Y+5, r18	; 0x05
    1d8a:	21 2f       	mov	r18, r17
    1d8c:	36 2d       	mov	r19, r6
    1d8e:	47 2d       	mov	r20, r7
    1d90:	58 2d       	mov	r21, r8
    1d92:	69 2d       	mov	r22, r9
    1d94:	7a 2d       	mov	r23, r10
    1d96:	8b 2d       	mov	r24, r11
    1d98:	9c 2d       	mov	r25, r12
    1d9a:	08 e2       	ldi	r16, 0x28	; 40
    1d9c:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1da0:	2e 83       	std	Y+6, r18	; 0x06
    1da2:	21 2f       	mov	r18, r17
    1da4:	36 2d       	mov	r19, r6
    1da6:	47 2d       	mov	r20, r7
    1da8:	58 2d       	mov	r21, r8
    1daa:	69 2d       	mov	r22, r9
    1dac:	7a 2d       	mov	r23, r10
    1dae:	8b 2d       	mov	r24, r11
    1db0:	9c 2d       	mov	r25, r12
    1db2:	00 e3       	ldi	r16, 0x30	; 48
    1db4:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1db8:	2f 83       	std	Y+7, r18	; 0x07
    1dba:	21 2f       	mov	r18, r17
    1dbc:	36 2d       	mov	r19, r6
    1dbe:	47 2d       	mov	r20, r7
    1dc0:	58 2d       	mov	r21, r8
    1dc2:	69 2d       	mov	r22, r9
    1dc4:	7a 2d       	mov	r23, r10
    1dc6:	8b 2d       	mov	r24, r11
    1dc8:	9c 2d       	mov	r25, r12
    1dca:	08 e3       	ldi	r16, 0x38	; 56
    1dcc:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1dd0:	28 87       	std	Y+8, r18	; 0x08
    1dd2:	e9 87       	std	Y+9, r30	; 0x09
    1dd4:	2e 2f       	mov	r18, r30
    1dd6:	35 2d       	mov	r19, r5
    1dd8:	4d 2d       	mov	r20, r13
    1dda:	5e 2d       	mov	r21, r14
    1ddc:	6f 2d       	mov	r22, r15
    1dde:	7b 2f       	mov	r23, r27
    1de0:	8a 2f       	mov	r24, r26
    1de2:	9f 2f       	mov	r25, r31
    1de4:	08 e0       	ldi	r16, 0x08	; 8
    1de6:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1dea:	2a 87       	std	Y+10, r18	; 0x0a
    1dec:	2e 2f       	mov	r18, r30
    1dee:	35 2d       	mov	r19, r5
    1df0:	4d 2d       	mov	r20, r13
    1df2:	5e 2d       	mov	r21, r14
    1df4:	6f 2d       	mov	r22, r15
    1df6:	7b 2f       	mov	r23, r27
    1df8:	8a 2f       	mov	r24, r26
    1dfa:	9f 2f       	mov	r25, r31
    1dfc:	00 e1       	ldi	r16, 0x10	; 16
    1dfe:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1e02:	2b 87       	std	Y+11, r18	; 0x0b
    1e04:	2e 2f       	mov	r18, r30
    1e06:	35 2d       	mov	r19, r5
    1e08:	4d 2d       	mov	r20, r13
    1e0a:	5e 2d       	mov	r21, r14
    1e0c:	6f 2d       	mov	r22, r15
    1e0e:	7b 2f       	mov	r23, r27
    1e10:	8a 2f       	mov	r24, r26
    1e12:	9f 2f       	mov	r25, r31
    1e14:	08 e1       	ldi	r16, 0x18	; 24
    1e16:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1e1a:	2c 87       	std	Y+12, r18	; 0x0c
    1e1c:	2e 2f       	mov	r18, r30
    1e1e:	35 2d       	mov	r19, r5
    1e20:	4d 2d       	mov	r20, r13
    1e22:	5e 2d       	mov	r21, r14
    1e24:	6f 2d       	mov	r22, r15
    1e26:	7b 2f       	mov	r23, r27
    1e28:	8a 2f       	mov	r24, r26
    1e2a:	9f 2f       	mov	r25, r31
    1e2c:	00 e2       	ldi	r16, 0x20	; 32
    1e2e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1e32:	2d 87       	std	Y+13, r18	; 0x0d
    1e34:	2e 2f       	mov	r18, r30
    1e36:	35 2d       	mov	r19, r5
    1e38:	4d 2d       	mov	r20, r13
    1e3a:	5e 2d       	mov	r21, r14
    1e3c:	6f 2d       	mov	r22, r15
    1e3e:	7b 2f       	mov	r23, r27
    1e40:	8a 2f       	mov	r24, r26
    1e42:	9f 2f       	mov	r25, r31
    1e44:	08 e2       	ldi	r16, 0x28	; 40
    1e46:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1e4a:	2e 87       	std	Y+14, r18	; 0x0e
    1e4c:	2e 2f       	mov	r18, r30
    1e4e:	35 2d       	mov	r19, r5
    1e50:	4d 2d       	mov	r20, r13
    1e52:	5e 2d       	mov	r21, r14
    1e54:	6f 2d       	mov	r22, r15
    1e56:	7b 2f       	mov	r23, r27
    1e58:	8a 2f       	mov	r24, r26
    1e5a:	9f 2f       	mov	r25, r31
    1e5c:	00 e3       	ldi	r16, 0x30	; 48
    1e5e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1e62:	2f 87       	std	Y+15, r18	; 0x0f
    1e64:	2e 2f       	mov	r18, r30
    1e66:	35 2d       	mov	r19, r5
    1e68:	4d 2d       	mov	r20, r13
    1e6a:	5e 2d       	mov	r21, r14
    1e6c:	6f 2d       	mov	r22, r15
    1e6e:	7b 2f       	mov	r23, r27
    1e70:	8a 2f       	mov	r24, r26
    1e72:	9f 2f       	mov	r25, r31
    1e74:	08 e3       	ldi	r16, 0x38	; 56
    1e76:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__lshrdi3>
    1e7a:	28 8b       	std	Y+16, r18	; 0x10
    1e7c:	80 e1       	ldi	r24, 0x10	; 16
    1e7e:	ea e2       	ldi	r30, 0x2A	; 42
    1e80:	f0 e2       	ldi	r31, 0x20	; 32
    1e82:	de 01       	movw	r26, r28
    1e84:	51 96       	adiw	r26, 0x11	; 17
    1e86:	01 90       	ld	r0, Z+
    1e88:	0d 92       	st	X+, r0
    1e8a:	8a 95       	dec	r24
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <eeprom_write_const+0x1ca>
    1e8e:	83 e3       	ldi	r24, 0x33	; 51
    1e90:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    1e94:	fe 01       	movw	r30, r28
    1e96:	71 96       	adiw	r30, 0x11	; 17
    1e98:	ce 01       	movw	r24, r28
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	ae 01       	movw	r20, r28
    1e9e:	4f 5d       	subi	r20, 0xDF	; 223
    1ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea2:	60 ec       	ldi	r22, 0xC0	; 192
    1ea4:	71 e0       	ldi	r23, 0x01	; 1
    1ea6:	21 91       	ld	r18, Z+
    1ea8:	db 01       	movw	r26, r22
    1eaa:	2c 93       	st	X, r18
    1eac:	dc 01       	movw	r26, r24
    1eae:	2d 91       	ld	r18, X+
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	db 01       	movw	r26, r22
    1eb4:	14 96       	adiw	r26, 0x04	; 4
    1eb6:	2c 93       	st	X, r18
    1eb8:	e4 17       	cp	r30, r20
    1eba:	f5 07       	cpc	r31, r21
    1ebc:	a1 f7       	brne	.-24     	; 0x1ea6 <eeprom_write_const+0x1ea>
    1ebe:	e0 ec       	ldi	r30, 0xC0	; 192
    1ec0:	f1 e0       	ldi	r31, 0x01	; 1
    1ec2:	85 e3       	ldi	r24, 0x35	; 53
    1ec4:	82 87       	std	Z+10, r24	; 0x0a
    1ec6:	10 82       	st	Z, r1
    1ec8:	80 e1       	ldi	r24, 0x10	; 16
    1eca:	81 83       	std	Z+1, r24	; 0x01
    1ecc:	88 ed       	ldi	r24, 0xD8	; 216
    1ece:	84 bf       	out	0x34, r24	; 52
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	83 87       	std	Z+11, r24	; 0x0b
    1ed4:	87 85       	ldd	r24, Z+15	; 0x0f
    1ed6:	88 23       	and	r24, r24
    1ed8:	ec f3       	brlt	.-6      	; 0x1ed4 <eeprom_write_const+0x218>
    1eda:	a0 96       	adiw	r28, 0x20	; 32
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	df 90       	pop	r13
    1eee:	cf 90       	pop	r12
    1ef0:	bf 90       	pop	r11
    1ef2:	af 90       	pop	r10
    1ef4:	9f 90       	pop	r9
    1ef6:	8f 90       	pop	r8
    1ef8:	7f 90       	pop	r7
    1efa:	6f 90       	pop	r6
    1efc:	5f 90       	pop	r5
    1efe:	08 95       	ret

00001f00 <system_init>:
    1f00:	05 d8       	rcall	.-4086   	; 0xf0c <sysclk_init>
    1f02:	6b ea       	ldi	r22, 0xAB	; 171
    1f04:	79 e2       	ldi	r23, 0x29	; 41
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	51 d8       	rcall	.-3934   	; 0xfae <__portable_avr_delay_cycles>
    1f0c:	78 94       	sei
    1f0e:	8c eb       	ldi	r24, 0xBC	; 188
    1f10:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    1f14:	87 e0       	ldi	r24, 0x07	; 7
    1f16:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f1a:	0e 94 3a 06 	call	0xc74	; 0xc74 <data_terminal_init>
    1f1e:	6b ea       	ldi	r22, 0xAB	; 171
    1f20:	70 eb       	ldi	r23, 0xB0	; 176
    1f22:	88 e2       	ldi	r24, 0x28	; 40
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	43 d8       	rcall	.-3962   	; 0xfae <__portable_avr_delay_cycles>
    1f28:	0e 94 11 06 	call	0xc22	; 0xc22 <spi_init>
    1f2c:	4b d8       	rcall	.-3946   	; 0xfc4 <pressure_init>
    1f2e:	9b dc       	rcall	.-1738   	; 0x1866 <clock_init>
    1f30:	66 e5       	ldi	r22, 0x56	; 86
    1f32:	70 ed       	ldi	r23, 0xD0	; 208
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	3a d8       	rcall	.-3980   	; 0xfae <__portable_avr_delay_cycles>
    1f3a:	b8 db       	rcall	.-2192   	; 0x16ac <state_check>
    1f3c:	73 d8       	rcall	.-3866   	; 0x1024 <get_pressure>
    1f3e:	60 93 26 20 	sts	0x2026, r22	; 0x802026 <ground_p>
    1f42:	70 93 27 20 	sts	0x2027, r23	; 0x802027 <ground_p+0x1>
    1f46:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <ground_p+0x2>
    1f4a:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <ground_p+0x3>
    1f4e:	83 e3       	ldi	r24, 0x33	; 51
    1f50:	93 e1       	ldi	r25, 0x13	; 19
    1f52:	a5 e9       	ldi	r26, 0x95	; 149
    1f54:	b3 e4       	ldi	r27, 0x43	; 67
    1f56:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <ground_t>
    1f5a:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <ground_t+0x1>
    1f5e:	a0 93 24 20 	sts	0x2024, r26	; 0x802024 <ground_t+0x2>
    1f62:	b0 93 25 20 	sts	0x2025, r27	; 0x802025 <ground_t+0x3>
    1f66:	aa ce       	rjmp	.-684    	; 0x1cbc <eeprom_write_const>
    1f68:	08 95       	ret

00001f6a <eeprom_write>:
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	2c 97       	sbiw	r28, 0x0c	; 12
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	60 91 f1 20 	lds	r22, 0x20F1	; 0x8020f1 <alt>
    1f7c:	70 91 f2 20 	lds	r23, 0x20F2	; 0x8020f2 <alt+0x1>
    1f80:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <alt+0x2>
    1f84:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <alt+0x3>
    1f88:	dd d6       	rcall	.+3514   	; 0x2d44 <__fixsfsi>
    1f8a:	79 83       	std	Y+1, r23	; 0x01
    1f8c:	6a 83       	std	Y+2, r22	; 0x02
    1f8e:	80 91 fd 20 	lds	r24, 0x20FD	; 0x8020fd <packets>
    1f92:	90 91 fe 20 	lds	r25, 0x20FE	; 0x8020fe <packets+0x1>
    1f96:	9b 83       	std	Y+3, r25	; 0x03
    1f98:	8c 83       	std	Y+4, r24	; 0x04
    1f9a:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <timer>
    1f9e:	90 91 02 21 	lds	r25, 0x2102	; 0x802102 <timer+0x1>
    1fa2:	9d 83       	std	Y+5, r25	; 0x05
    1fa4:	8e 83       	std	Y+6, r24	; 0x06
    1fa6:	86 e0       	ldi	r24, 0x06	; 6
    1fa8:	ea e3       	ldi	r30, 0x3A	; 58
    1faa:	f0 e2       	ldi	r31, 0x20	; 32
    1fac:	de 01       	movw	r26, r28
    1fae:	17 96       	adiw	r26, 0x07	; 7
    1fb0:	01 90       	ld	r0, Z+
    1fb2:	0d 92       	st	X+, r0
    1fb4:	8a 95       	dec	r24
    1fb6:	e1 f7       	brne	.-8      	; 0x1fb0 <eeprom_write+0x46>
    1fb8:	83 e3       	ldi	r24, 0x33	; 51
    1fba:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	37 96       	adiw	r30, 0x07	; 7
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	ae 01       	movw	r20, r28
    1fc8:	43 5f       	subi	r20, 0xF3	; 243
    1fca:	5f 4f       	sbci	r21, 0xFF	; 255
    1fcc:	60 ec       	ldi	r22, 0xC0	; 192
    1fce:	71 e0       	ldi	r23, 0x01	; 1
    1fd0:	21 91       	ld	r18, Z+
    1fd2:	db 01       	movw	r26, r22
    1fd4:	2c 93       	st	X, r18
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	2d 91       	ld	r18, X+
    1fda:	cd 01       	movw	r24, r26
    1fdc:	db 01       	movw	r26, r22
    1fde:	14 96       	adiw	r26, 0x04	; 4
    1fe0:	2c 93       	st	X, r18
    1fe2:	e4 17       	cp	r30, r20
    1fe4:	f5 07       	cpc	r31, r21
    1fe6:	a1 f7       	brne	.-24     	; 0x1fd0 <eeprom_write+0x66>
    1fe8:	e0 ec       	ldi	r30, 0xC0	; 192
    1fea:	f1 e0       	ldi	r31, 0x01	; 1
    1fec:	85 e3       	ldi	r24, 0x35	; 53
    1fee:	82 87       	std	Z+10, r24	; 0x0a
    1ff0:	10 82       	st	Z, r1
    1ff2:	80 e1       	ldi	r24, 0x10	; 16
    1ff4:	81 83       	std	Z+1, r24	; 0x01
    1ff6:	88 ed       	ldi	r24, 0xD8	; 216
    1ff8:	84 bf       	out	0x34, r24	; 52
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	83 87       	std	Z+11, r24	; 0x0b
    1ffe:	87 85       	ldd	r24, Z+15	; 0x0f
    2000:	88 23       	and	r24, r24
    2002:	ec f3       	brlt	.-6      	; 0x1ffe <eeprom_write+0x94>
    2004:	2c 96       	adiw	r28, 0x0c	; 12
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	08 95       	ret

00002010 <time_update>:
    2010:	2f 92       	push	r2
    2012:	3f 92       	push	r3
    2014:	4f 92       	push	r4
    2016:	5f 92       	push	r5
    2018:	6f 92       	push	r6
    201a:	7f 92       	push	r7
    201c:	8f 92       	push	r8
    201e:	9f 92       	push	r9
    2020:	af 92       	push	r10
    2022:	bf 92       	push	r11
    2024:	cf 92       	push	r12
    2026:	df 92       	push	r13
    2028:	ef 92       	push	r14
    202a:	ff 92       	push	r15
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	00 91 01 21 	lds	r16, 0x2101	; 0x802101 <timer>
    2038:	10 91 02 21 	lds	r17, 0x2102	; 0x802102 <timer+0x1>
    203c:	0f 5f       	subi	r16, 0xFF	; 255
    203e:	1f 4f       	sbci	r17, 0xFF	; 255
    2040:	00 93 01 21 	sts	0x2101, r16	; 0x802101 <timer>
    2044:	10 93 02 21 	sts	0x2102, r17	; 0x802102 <timer+0x1>
    2048:	c0 91 fd 20 	lds	r28, 0x20FD	; 0x8020fd <packets>
    204c:	d0 91 fe 20 	lds	r29, 0x20FE	; 0x8020fe <packets+0x1>
    2050:	21 96       	adiw	r28, 0x01	; 1
    2052:	c0 93 fd 20 	sts	0x20FD, r28	; 0x8020fd <packets>
    2056:	d0 93 fe 20 	sts	0x20FE, r29	; 0x8020fe <packets+0x1>
    205a:	60 91 d9 20 	lds	r22, 0x20D9	; 0x8020d9 <gps_alt>
    205e:	70 91 da 20 	lds	r23, 0x20DA	; 0x8020da <gps_alt+0x1>
    2062:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <gps_alt+0x2>
    2066:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <gps_alt+0x3>
    206a:	6c d6       	rcall	.+3288   	; 0x2d44 <__fixsfsi>
    206c:	36 2e       	mov	r3, r22
    206e:	27 2e       	mov	r2, r23
    2070:	40 90 dd 20 	lds	r4, 0x20DD	; 0x8020dd <gps_long>
    2074:	50 90 de 20 	lds	r5, 0x20DE	; 0x8020de <gps_long+0x1>
    2078:	60 90 df 20 	lds	r6, 0x20DF	; 0x8020df <gps_long+0x2>
    207c:	70 90 e0 20 	lds	r7, 0x20E0	; 0x8020e0 <gps_long+0x3>
    2080:	80 90 e1 20 	lds	r8, 0x20E1	; 0x8020e1 <gps_lat>
    2084:	90 90 e2 20 	lds	r9, 0x20E2	; 0x8020e2 <gps_lat+0x1>
    2088:	a0 90 e3 20 	lds	r10, 0x20E3	; 0x8020e3 <gps_lat+0x2>
    208c:	b0 90 e4 20 	lds	r11, 0x20E4	; 0x8020e4 <gps_lat+0x3>
    2090:	60 91 e5 20 	lds	r22, 0x20E5	; 0x8020e5 <gps_t>
    2094:	70 91 e6 20 	lds	r23, 0x20E6	; 0x8020e6 <gps_t+0x1>
    2098:	80 91 e7 20 	lds	r24, 0x20E7	; 0x8020e7 <gps_t+0x2>
    209c:	90 91 e8 20 	lds	r25, 0x20E8	; 0x8020e8 <gps_t+0x3>
    20a0:	51 d6       	rcall	.+3234   	; 0x2d44 <__fixsfsi>
    20a2:	6b 01       	movw	r12, r22
    20a4:	7c 01       	movw	r14, r24
    20a6:	60 91 c7 20 	lds	r22, 0x20C7	; 0x8020c7 <angle>
    20aa:	70 91 c8 20 	lds	r23, 0x20C8	; 0x8020c8 <angle+0x1>
    20ae:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <angle+0x2>
    20b2:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <angle+0x3>
    20b6:	46 d6       	rcall	.+3212   	; 0x2d44 <__fixsfsi>
    20b8:	7f 93       	push	r23
    20ba:	6f 93       	push	r22
    20bc:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <state>
    20c0:	1f 92       	push	r1
    20c2:	8f 93       	push	r24
    20c4:	60 91 cb 20 	lds	r22, 0x20CB	; 0x8020cb <rpm>
    20c8:	70 91 cc 20 	lds	r23, 0x20CC	; 0x8020cc <rpm+0x1>
    20cc:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <rpm+0x2>
    20d0:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <rpm+0x3>
    20d4:	37 d6       	rcall	.+3182   	; 0x2d44 <__fixsfsi>
    20d6:	7f 93       	push	r23
    20d8:	6f 93       	push	r22
    20da:	60 91 cf 20 	lds	r22, 0x20CF	; 0x8020cf <roll>
    20de:	70 91 d0 20 	lds	r23, 0x20D0	; 0x8020d0 <roll+0x1>
    20e2:	80 91 d1 20 	lds	r24, 0x20D1	; 0x8020d1 <roll+0x2>
    20e6:	90 91 d2 20 	lds	r25, 0x20D2	; 0x8020d2 <roll+0x3>
    20ea:	2c d6       	rcall	.+3160   	; 0x2d44 <__fixsfsi>
    20ec:	7f 93       	push	r23
    20ee:	6f 93       	push	r22
    20f0:	60 91 d3 20 	lds	r22, 0x20D3	; 0x8020d3 <pitch>
    20f4:	70 91 d4 20 	lds	r23, 0x20D4	; 0x8020d4 <pitch+0x1>
    20f8:	80 91 d5 20 	lds	r24, 0x20D5	; 0x8020d5 <pitch+0x2>
    20fc:	90 91 d6 20 	lds	r25, 0x20D6	; 0x8020d6 <pitch+0x3>
    2100:	21 d6       	rcall	.+3138   	; 0x2d44 <__fixsfsi>
    2102:	7f 93       	push	r23
    2104:	6f 93       	push	r22
    2106:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <gps_sats+0x1>
    210a:	8f 93       	push	r24
    210c:	80 91 d7 20 	lds	r24, 0x20D7	; 0x8020d7 <gps_sats>
    2110:	8f 93       	push	r24
    2112:	83 2d       	mov	r24, r3
    2114:	92 2d       	mov	r25, r2
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	9c 01       	movw	r18, r24
    211c:	22 0f       	add	r18, r18
    211e:	33 1f       	adc	r19, r19
    2120:	22 0f       	add	r18, r18
    2122:	33 1f       	adc	r19, r19
    2124:	82 0f       	add	r24, r18
    2126:	93 1f       	adc	r25, r19
    2128:	6a e0       	ldi	r22, 0x0A	; 10
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	0e 94 84 19 	call	0x3308	; 0x3308 <__divmodhi4>
    2130:	9f 93       	push	r25
    2132:	8f 93       	push	r24
    2134:	2f 92       	push	r2
    2136:	3f 92       	push	r3
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	34 e2       	ldi	r19, 0x24	; 36
    213c:	44 e7       	ldi	r20, 0x74	; 116
    213e:	59 e4       	ldi	r21, 0x49	; 73
    2140:	c3 01       	movw	r24, r6
    2142:	b2 01       	movw	r22, r4
    2144:	f6 d6       	rcall	.+3564   	; 0x2f32 <__mulsf3>
    2146:	fe d5       	rcall	.+3068   	; 0x2d44 <__fixsfsi>
    2148:	20 e4       	ldi	r18, 0x40	; 64
    214a:	32 e4       	ldi	r19, 0x42	; 66
    214c:	4f e0       	ldi	r20, 0x0F	; 15
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    2154:	9b 01       	movw	r18, r22
    2156:	77 23       	and	r23, r23
    2158:	24 f4       	brge	.+8      	; 0x2162 <time_update+0x152>
    215a:	22 27       	eor	r18, r18
    215c:	33 27       	eor	r19, r19
    215e:	26 1b       	sub	r18, r22
    2160:	37 0b       	sbc	r19, r23
    2162:	c9 01       	movw	r24, r18
    2164:	33 0f       	add	r19, r19
    2166:	aa 0b       	sbc	r26, r26
    2168:	bb 0b       	sbc	r27, r27
    216a:	bf 93       	push	r27
    216c:	af 93       	push	r26
    216e:	9f 93       	push	r25
    2170:	8f 93       	push	r24
    2172:	c3 01       	movw	r24, r6
    2174:	b2 01       	movw	r22, r4
    2176:	e6 d5       	rcall	.+3020   	; 0x2d44 <__fixsfsi>
    2178:	7f 93       	push	r23
    217a:	6f 93       	push	r22
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	34 e2       	ldi	r19, 0x24	; 36
    2180:	44 e7       	ldi	r20, 0x74	; 116
    2182:	59 e4       	ldi	r21, 0x49	; 73
    2184:	c5 01       	movw	r24, r10
    2186:	b4 01       	movw	r22, r8
    2188:	d4 d6       	rcall	.+3496   	; 0x2f32 <__mulsf3>
    218a:	dc d5       	rcall	.+3000   	; 0x2d44 <__fixsfsi>
    218c:	20 e4       	ldi	r18, 0x40	; 64
    218e:	32 e4       	ldi	r19, 0x42	; 66
    2190:	4f e0       	ldi	r20, 0x0F	; 15
    2192:	50 e0       	ldi	r21, 0x00	; 0
    2194:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    2198:	9f 93       	push	r25
    219a:	8f 93       	push	r24
    219c:	7f 93       	push	r23
    219e:	6f 93       	push	r22
    21a0:	c5 01       	movw	r24, r10
    21a2:	b4 01       	movw	r22, r8
    21a4:	cf d5       	rcall	.+2974   	; 0x2d44 <__fixsfsi>
    21a6:	7f 93       	push	r23
    21a8:	6f 93       	push	r22
    21aa:	0f 2e       	mov	r0, r31
    21ac:	f4 e6       	ldi	r31, 0x64	; 100
    21ae:	8f 2e       	mov	r8, r31
    21b0:	91 2c       	mov	r9, r1
    21b2:	a1 2c       	mov	r10, r1
    21b4:	b1 2c       	mov	r11, r1
    21b6:	f0 2d       	mov	r31, r0
    21b8:	c7 01       	movw	r24, r14
    21ba:	b6 01       	movw	r22, r12
    21bc:	a5 01       	movw	r20, r10
    21be:	94 01       	movw	r18, r8
    21c0:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    21c4:	7f 93       	push	r23
    21c6:	6f 93       	push	r22
    21c8:	c7 01       	movw	r24, r14
    21ca:	b6 01       	movw	r22, r12
    21cc:	20 e1       	ldi	r18, 0x10	; 16
    21ce:	37 e2       	ldi	r19, 0x27	; 39
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    21d8:	f2 2e       	mov	r15, r18
    21da:	e3 2e       	mov	r14, r19
    21dc:	a5 01       	movw	r20, r10
    21de:	94 01       	movw	r18, r8
    21e0:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodsi4>
    21e4:	3f 93       	push	r19
    21e6:	2f 93       	push	r18
    21e8:	ef 92       	push	r14
    21ea:	ff 92       	push	r15
    21ec:	60 91 ed 20 	lds	r22, 0x20ED	; 0x8020ed <volt>
    21f0:	70 91 ee 20 	lds	r23, 0x20EE	; 0x8020ee <volt+0x1>
    21f4:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <volt+0x2>
    21f8:	90 91 f0 20 	lds	r25, 0x20F0	; 0x8020f0 <volt+0x3>
    21fc:	a3 d5       	rcall	.+2886   	; 0x2d44 <__fixsfsi>
    21fe:	7f 93       	push	r23
    2200:	6f 93       	push	r22
    2202:	23 e3       	ldi	r18, 0x33	; 51
    2204:	33 e9       	ldi	r19, 0x93	; 147
    2206:	48 e8       	ldi	r20, 0x88	; 136
    2208:	53 e4       	ldi	r21, 0x43	; 67
    220a:	60 91 f5 20 	lds	r22, 0x20F5	; 0x8020f5 <temp>
    220e:	70 91 f6 20 	lds	r23, 0x20F6	; 0x8020f6 <temp+0x1>
    2212:	80 91 f7 20 	lds	r24, 0x20F7	; 0x8020f7 <temp+0x2>
    2216:	90 91 f8 20 	lds	r25, 0x20F8	; 0x8020f8 <temp+0x3>
    221a:	89 d4       	rcall	.+2322   	; 0x2b2e <__subsf3>
    221c:	93 d5       	rcall	.+2854   	; 0x2d44 <__fixsfsi>
    221e:	7f 93       	push	r23
    2220:	6f 93       	push	r22
    2222:	60 91 f9 20 	lds	r22, 0x20F9	; 0x8020f9 <press>
    2226:	70 91 fa 20 	lds	r23, 0x20FA	; 0x8020fa <press+0x1>
    222a:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <press+0x2>
    222e:	90 91 fc 20 	lds	r25, 0x20FC	; 0x8020fc <press+0x3>
    2232:	88 d5       	rcall	.+2832   	; 0x2d44 <__fixsfsi>
    2234:	9f 93       	push	r25
    2236:	8f 93       	push	r24
    2238:	7f 93       	push	r23
    223a:	6f 93       	push	r22
    223c:	60 91 f1 20 	lds	r22, 0x20F1	; 0x8020f1 <alt>
    2240:	70 91 f2 20 	lds	r23, 0x20F2	; 0x8020f2 <alt+0x1>
    2244:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <alt+0x2>
    2248:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <alt+0x3>
    224c:	7b d5       	rcall	.+2806   	; 0x2d44 <__fixsfsi>
    224e:	7f 93       	push	r23
    2250:	6f 93       	push	r22
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	1f 93       	push	r17
    2258:	0f 93       	push	r16
    225a:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <format+0x1>
    225e:	8f 93       	push	r24
    2260:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <format>
    2264:	8f 93       	push	r24
    2266:	ca e3       	ldi	r28, 0x3A	; 58
    2268:	d1 e2       	ldi	r29, 0x21	; 33
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	0e 94 6f 1a 	call	0x34de	; 0x34de <sprintf>
    2272:	8d b7       	in	r24, 0x3d	; 61
    2274:	9e b7       	in	r25, 0x3e	; 62
    2276:	c4 96       	adiw	r24, 0x34	; 52
    2278:	8d bf       	out	0x3d, r24	; 61
    227a:	9e bf       	out	0x3e, r25	; 62
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <printf>
    2284:	72 de       	rcall	.-796    	; 0x1f6a <eeprom_write>
    2286:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <time_flag>
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	df 90       	pop	r13
    229c:	cf 90       	pop	r12
    229e:	bf 90       	pop	r11
    22a0:	af 90       	pop	r10
    22a2:	9f 90       	pop	r9
    22a4:	8f 90       	pop	r8
    22a6:	7f 90       	pop	r7
    22a8:	6f 90       	pop	r6
    22aa:	5f 90       	pop	r5
    22ac:	4f 90       	pop	r4
    22ae:	3f 90       	pop	r3
    22b0:	2f 90       	pop	r2
    22b2:	08 95       	ret

000022b4 <eeprom_erase>:

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
    22b4:	83 e3       	ldi	r24, 0x33	; 51
    22b6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	for(uint8_t i = 0; i < 32; i++){
    22ba:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    22bc:	e0 ec       	ldi	r30, 0xC0	; 192
    22be:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    22c0:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    22c2:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    22c4:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	80 32       	cpi	r24, 0x20	; 32
    22ca:	d9 f7       	brne	.-10     	; 0x22c2 <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}
	
	NVM.CMD = ERASE_EEPROM;
    22cc:	e0 ec       	ldi	r30, 0xC0	; 192
    22ce:	f1 e0       	ldi	r31, 0x01	; 1
    22d0:	80 e3       	ldi	r24, 0x30	; 48
    22d2:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    22d4:	88 ed       	ldi	r24, 0xD8	; 216
    22d6:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    22dc:	87 85       	ldd	r24, Z+15	; 0x0f
    22de:	88 23       	and	r24, r24
    22e0:	ec f3       	brlt	.-6      	; 0x22dc <eeprom_erase+0x28>
}
    22e2:	08 95       	ret

000022e4 <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    22e4:	e7 df       	rcall	.-50     	; 0x22b4 <eeprom_erase>
	
	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    22e6:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    22e8:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    22ea:	98 ed       	ldi	r25, 0xD8	; 216
    22ec:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    22f4:	8f bf       	out	0x3f, r24	; 63
    22f6:	08 95       	ret

000022f8 <command>:
	TCD1.PER = 184; // 2700hz
	TCD1.CCA = 92;
}

void command(uint8_t c){
	switch(c){
    22f8:	84 36       	cpi	r24, 0x64	; 100
    22fa:	91 f0       	breq	.+36     	; 0x2320 <command+0x28>
    22fc:	28 f4       	brcc	.+10     	; 0x2308 <command+0x10>
    22fe:	81 36       	cpi	r24, 0x61	; 97
    2300:	69 f0       	breq	.+26     	; 0x231c <command+0x24>
    2302:	83 36       	cpi	r24, 0x63	; 99
    2304:	49 f0       	breq	.+18     	; 0x2318 <command+0x20>
    2306:	08 95       	ret
    2308:	85 36       	cpi	r24, 0x65	; 101
    230a:	21 f0       	breq	.+8      	; 0x2314 <command+0x1c>
    230c:	86 36       	cpi	r24, 0x66	; 102
    230e:	49 f4       	brne	.+18     	; 0x2322 <command+0x2a>
		case RESET:
			//printf("RESET\n");
			reset();
    2310:	e9 cf       	rjmp	.-46     	; 0x22e4 <reset>

	SREG=oldInterruptState;
}

void calibrate(void){
	cali_alt();
    2312:	08 95       	ret
    2314:	b6 ca       	rjmp	.-2708   	; 0x1882 <cali_alt>
		case CALIBRATE:
			calibrate();
			//printf("CALIBRATE\n");
			break;
		case CALIBRATE_ALTITUDE:
			cali_alt();
    2316:	08 95       	ret
		case CALIBRATE_ANGLE:
			cali_ang();
			//printf("CALIBRATE_ANGLE\n");
			break;
		case SEND_GPS_LOCATION:
			send_gps();
    2318:	b4 ca       	rjmp	.-2712   	; 0x1882 <cali_alt>
    231a:	08 95       	ret
			//printf("SEND_GPS_LOCATION\n");
			break;
    231c:	cf ca       	rjmp	.-2658   	; 0x18bc <send_gps>
		case PACKET:
			packet();
    231e:	08 95       	ret
    2320:	4d cb       	rjmp	.-2406   	; 0x19bc <packet>
    2322:	08 95       	ret

00002324 <main>:
char* format = "5343,%i,%i,%i,%li,%i,%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n\0";


////////////////////////////// Functions ///////////////////////////////
int main (void)
{
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	c8 56       	subi	r28, 0x68	; 104
    232e:	d1 09       	sbc	r29, r1
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	de bf       	out	0x3e, r29	; 62
	system_init();
    2334:	e5 dd       	rcall	.-1078   	; 0x1f00 <system_init>
	//delay_ms(100);
	
	PORTD.DIR |= PIN3_bm;
    2336:	e0 e6       	ldi	r30, 0x60	; 96
    2338:	f6 e0       	ldi	r31, 0x06	; 6
    233a:	80 81       	ld	r24, Z
    233c:	88 60       	ori	r24, 0x08	; 8
    233e:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    2340:	84 81       	ldd	r24, Z+4	; 0x04
    2342:	88 60       	ori	r24, 0x08	; 8
    2344:	84 83       	std	Z+4, r24	; 0x04
	
	//printf("Initialized\n");
	//buzzer_init();
	
	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    2346:	14 e1       	ldi	r17, 0x14	; 20
    2348:	be 01       	movw	r22, r28
    234a:	6f 5f       	subi	r22, 0xFF	; 255
    234c:	7f 4f       	sbci	r23, 0xFF	; 255
    234e:	fb 01       	movw	r30, r22
    2350:	81 2f       	mov	r24, r17
    2352:	11 92       	st	Z+, r1
    2354:	8a 95       	dec	r24
    2356:	e9 f7       	brne	.-6      	; 0x2352 <main+0x2e>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    2358:	4a e0       	ldi	r20, 0x0A	; 10
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	ce 01       	movw	r24, r28
    235e:	45 96       	adiw	r24, 0x15	; 21
    2360:	0e 94 bf 06 	call	0xd7e	; 0xd7e <rb16_init>
	
	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    2364:	be 01       	movw	r22, r28
    2366:	63 5e       	subi	r22, 0xE3	; 227
    2368:	7f 4f       	sbci	r23, 0xFF	; 255
    236a:	88 e2       	ldi	r24, 0x28	; 40
    236c:	fb 01       	movw	r30, r22
    236e:	11 92       	st	Z+, r1
    2370:	8a 95       	dec	r24
    2372:	e9 f7       	brne	.-6      	; 0x236e <main+0x4a>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    2374:	4a e0       	ldi	r20, 0x0A	; 10
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	ce 01       	movw	r24, r28
    237a:	8b 5b       	subi	r24, 0xBB	; 187
    237c:	9f 4f       	sbci	r25, 0xFF	; 255
    237e:	0e 94 47 07 	call	0xe8e	; 0xe8e <rb32_init>
	
	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    2382:	be 01       	movw	r22, r28
    2384:	63 5b       	subi	r22, 0xB3	; 179
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	fb 01       	movw	r30, r22
    238a:	11 92       	st	Z+, r1
    238c:	1a 95       	dec	r17
    238e:	e9 f7       	brne	.-6      	; 0x238a <main+0x66>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    2390:	4a e0       	ldi	r20, 0x0A	; 10
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	ce 01       	movw	r24, r28
    2396:	8f 59       	subi	r24, 0x9F	; 159
    2398:	9f 4f       	sbci	r25, 0xFF	; 255
    239a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <rb16_init>
	
	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    239e:	00 e0       	ldi	r16, 0x00	; 0
	
	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
	
	uint8_t cam_initialized = 0;
    23a0:	10 e0       	ldi	r17, 0x00	; 0
	//printf("Before Loop\n");

	
	while(1){
		// Check Sensors
		data_collect(&altitudes,&pressures);
    23a2:	be 01       	movw	r22, r28
    23a4:	6b 5b       	subi	r22, 0xBB	; 187
    23a6:	7f 4f       	sbci	r23, 0xFF	; 255
    23a8:	ce 01       	movw	r24, r28
    23aa:	45 96       	adiw	r24, 0x15	; 21
		
		state_check();
    23ac:	ff d8       	rcall	.-3586   	; 0x15ac <data_collect>
    23ae:	7e d9       	rcall	.-3332   	; 0x16ac <state_check>
		
		// IMU Check
		//imu_read();
		 
		//Gives each flight state their unique tasks
		switch(state){
    23b0:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <state>
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	39 f0       	breq	.+14     	; 0x23c6 <main+0xa2>
    23b8:	08 f4       	brcc	.+2      	; 0x23bc <main+0x98>
    23ba:	42 c0       	rjmp	.+132    	; 0x2440 <main+0x11c>
    23bc:	82 30       	cpi	r24, 0x02	; 2
    23be:	b1 f0       	breq	.+44     	; 0x23ec <main+0xc8>
    23c0:	83 30       	cpi	r24, 0x03	; 3
    23c2:	c1 f1       	breq	.+112    	; 0x2434 <main+0x110>
    23c4:	3b c0       	rjmp	.+118    	; 0x243c <main+0x118>
			case 0:
				break;
			case 1:
				if(alt > 600 && !cam_initialized){
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	46 e1       	ldi	r20, 0x16	; 22
    23cc:	54 e4       	ldi	r21, 0x44	; 68
    23ce:	60 91 f1 20 	lds	r22, 0x20F1	; 0x8020f1 <alt>
    23d2:	70 91 f2 20 	lds	r23, 0x20F2	; 0x8020f2 <alt+0x1>
    23d6:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <alt+0x2>
    23da:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <alt+0x3>
    23de:	a5 d5       	rcall	.+2890   	; 0x2f2a <__gesf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	74 f5       	brge	.+92     	; 0x2440 <main+0x11c>
    23e4:	11 11       	cpse	r17, r1
    23e6:	2c c0       	rjmp	.+88     	; 0x2440 <main+0x11c>
					cam_initialized = 1;
    23e8:	11 e0       	ldi	r17, 0x01	; 1
    23ea:	2a c0       	rjmp	.+84     	; 0x2440 <main+0x11c>
					//cam_switch();
				}
				break;
			case 2:
				if(!cam_initialized){
    23ec:	11 11       	cpse	r17, r1
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <main+0xce>
					cam_initialized = 1;
    23f0:	11 e0       	ldi	r17, 0x01	; 1
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	41 ee       	ldi	r20, 0xE1	; 225
    23f8:	53 e4       	ldi	r21, 0x43	; 67
    23fa:	60 91 f1 20 	lds	r22, 0x20F1	; 0x8020f1 <alt>
    23fe:	70 91 f2 20 	lds	r23, 0x20F2	; 0x8020f2 <alt+0x1>
    2402:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <alt+0x2>
    2406:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <alt+0x3>
    240a:	91 d3       	rcall	.+1826   	; 0x2b2e <__subsf3>
    240c:	9b d4       	rcall	.+2358   	; 0x2d44 <__fixsfsi>
    240e:	67 5f       	subi	r22, 0xF7	; 247
    2410:	7f 4f       	sbci	r23, 0xFF	; 255
    2412:	63 31       	cpi	r22, 0x13	; 19
    2414:	71 05       	cpc	r23, r1
    2416:	28 f4       	brcc	.+10     	; 0x2422 <main+0xfe>
					release();				// Releases the payload
    2418:	0e 94 08 08 	call	0x1010	; 0x1010 <release>
					hall_sensor_init();		// Starts hall effect sensor to read rpm
    241c:	0e 94 90 05 	call	0xb20	; 0xb20 <hall_sensor_init>
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <main+0x11c>
				}
				else if(released){
    2422:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <released>
    2426:	88 23       	and	r24, r24
					servo_pid(&directions);	// Updates the PID
    2428:	59 f0       	breq	.+22     	; 0x2440 <main+0x11c>
    242a:	ce 01       	movw	r24, r28
    242c:	8f 59       	subi	r24, 0x9F	; 159
    242e:	9f 4f       	sbci	r25, 0xFF	; 255
    2430:	8d d9       	rcall	.-3302   	; 0x174c <servo_pid>
    2432:	06 c0       	rjmp	.+12     	; 0x2440 <main+0x11c>
				}
				break;
			case 3:
				if(!buzzer_initialized){
    2434:	01 11       	cpse	r16, r1
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <main+0x11c>
					//buzzer_init();
					buzzer_initialized = 1;
    2438:	01 e0       	ldi	r16, 0x01	; 1
				}
				break;
			default:
				state = 0;
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <main+0x11c>
    243c:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <state>
				break;
		}
		
		if(time_flag){
    2440:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <time_flag>
    2444:	88 23       	and	r24, r24
			time_update();
    2446:	19 f0       	breq	.+6      	; 0x244e <main+0x12a>
    2448:	e3 dd       	rcall	.-1082   	; 0x2010 <time_update>
			time_flag = 0;
    244a:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <time_flag>
		}
		if(xbee_flag){
    244e:	80 91 15 21 	lds	r24, 0x2115	; 0x802115 <xbee_flag>
    2452:	88 23       	and	r24, r24
			command(xbee_comm);
    2454:	39 f0       	breq	.+14     	; 0x2464 <main+0x140>
    2456:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <xbee_comm>
    245a:	4e df       	rcall	.-356    	; 0x22f8 <command>
			xbee_comm = 0;
    245c:	10 92 08 21 	sts	0x2108, r1	; 0x802108 <xbee_comm>
			xbee_flag = 0;
    2460:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <xbee_flag>
		}
		
		data_packets++;
    2464:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <data_packets>
    2468:	90 91 00 21 	lds	r25, 0x2100	; 0x802100 <data_packets+0x1>
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <data_packets>
    2472:	90 93 00 21 	sts	0x2100, r25	; 0x802100 <data_packets+0x1>
		if(timer != 0){
    2476:	60 91 01 21 	lds	r22, 0x2101	; 0x802101 <timer>
    247a:	70 91 02 21 	lds	r23, 0x2102	; 0x802102 <timer+0x1>
    247e:	61 15       	cp	r22, r1
    2480:	71 05       	cpc	r23, r1
			rate = data_packets / timer;
    2482:	29 f0       	breq	.+10     	; 0x248e <main+0x16a>
    2484:	2d d7       	rcall	.+3674   	; 0x32e0 <__udivmodhi4>
    2486:	60 93 12 20 	sts	0x2012, r22	; 0x802012 <rate>
    248a:	70 93 13 20 	sts	0x2013, r23	; 0x802013 <rate+0x1>
		}
		
		delay_ms(100);
    248e:	66 e5       	ldi	r22, 0x56	; 86
    2490:	73 e2       	ldi	r23, 0x23	; 35
    2492:	88 e0       	ldi	r24, 0x08	; 8
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 d7 07 	call	0xfae	; 0xfae <__portable_avr_delay_cycles>
	}
    249a:	83 cf       	rjmp	.-250    	; 0x23a2 <main+0x7e>

0000249c <__vector_47>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

ISR(TCE0_OVF_vect){	
    249c:	1f 92       	push	r1
    249e:	0f 92       	push	r0
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	0f 92       	push	r0
    24a4:	11 24       	eor	r1, r1
    24a6:	08 b6       	in	r0, 0x38	; 56
    24a8:	0f 92       	push	r0
    24aa:	18 be       	out	0x38, r1	; 56
    24ac:	8f 93       	push	r24
	time_flag = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <time_flag>
}
    24b4:	8f 91       	pop	r24
    24b6:	0f 90       	pop	r0
    24b8:	08 be       	out	0x38, r0	; 56
    24ba:	0f 90       	pop	r0
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	0f 90       	pop	r0
    24c0:	1f 90       	pop	r1
    24c2:	18 95       	reti

000024c4 <__vector_58>:

ISR(USARTE0_RXC_vect){
    24c4:	1f 92       	push	r1
    24c6:	0f 92       	push	r0
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	0f 92       	push	r0
    24cc:	11 24       	eor	r1, r1
    24ce:	08 b6       	in	r0, 0x38	; 56
    24d0:	0f 92       	push	r0
    24d2:	18 be       	out	0x38, r1	; 56
    24d4:	09 b6       	in	r0, 0x39	; 57
    24d6:	0f 92       	push	r0
    24d8:	19 be       	out	0x39, r1	; 57
    24da:	0b b6       	in	r0, 0x3b	; 59
    24dc:	0f 92       	push	r0
    24de:	1b be       	out	0x3b, r1	; 59
    24e0:	2f 93       	push	r18
    24e2:	3f 93       	push	r19
    24e4:	4f 93       	push	r20
    24e6:	5f 93       	push	r21
    24e8:	6f 93       	push	r22
    24ea:	7f 93       	push	r23
    24ec:	8f 93       	push	r24
    24ee:	9f 93       	push	r25
    24f0:	af 93       	push	r26
    24f2:	bf 93       	push	r27
    24f4:	ef 93       	push	r30
    24f6:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    24f8:	80 ea       	ldi	r24, 0xA0	; 160
    24fa:	9a e0       	ldi	r25, 0x0A	; 10
    24fc:	0e 94 8e 03 	call	0x71c	; 0x71c <usart_getchar>
    2500:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <xbee_comm>
	xbee_flag = 1;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <xbee_flag>
}
    250a:	ff 91       	pop	r31
    250c:	ef 91       	pop	r30
    250e:	bf 91       	pop	r27
    2510:	af 91       	pop	r26
    2512:	9f 91       	pop	r25
    2514:	8f 91       	pop	r24
    2516:	7f 91       	pop	r23
    2518:	6f 91       	pop	r22
    251a:	5f 91       	pop	r21
    251c:	4f 91       	pop	r20
    251e:	3f 91       	pop	r19
    2520:	2f 91       	pop	r18
    2522:	0f 90       	pop	r0
    2524:	0b be       	out	0x3b, r0	; 59
    2526:	0f 90       	pop	r0
    2528:	09 be       	out	0x39, r0	; 57
    252a:	0f 90       	pop	r0
    252c:	08 be       	out	0x38, r0	; 56
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	0f 90       	pop	r0
    2534:	1f 90       	pop	r1
    2536:	18 95       	reti

00002538 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    2538:	1f 92       	push	r1
    253a:	0f 92       	push	r0
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	0f 92       	push	r0
    2540:	11 24       	eor	r1, r1
    2542:	08 b6       	in	r0, 0x38	; 56
    2544:	0f 92       	push	r0
    2546:	18 be       	out	0x38, r1	; 56
    2548:	09 b6       	in	r0, 0x39	; 57
    254a:	0f 92       	push	r0
    254c:	19 be       	out	0x39, r1	; 57
    254e:	0a b6       	in	r0, 0x3a	; 58
    2550:	0f 92       	push	r0
    2552:	1a be       	out	0x3a, r1	; 58
    2554:	0b b6       	in	r0, 0x3b	; 59
    2556:	0f 92       	push	r0
    2558:	1b be       	out	0x3b, r1	; 59
    255a:	8f 92       	push	r8
    255c:	9f 92       	push	r9
    255e:	af 92       	push	r10
    2560:	bf 92       	push	r11
    2562:	cf 92       	push	r12
    2564:	df 92       	push	r13
    2566:	ef 92       	push	r14
    2568:	ff 92       	push	r15
    256a:	1f 93       	push	r17
    256c:	2f 93       	push	r18
    256e:	3f 93       	push	r19
    2570:	4f 93       	push	r20
    2572:	5f 93       	push	r21
    2574:	6f 93       	push	r22
    2576:	7f 93       	push	r23
    2578:	8f 93       	push	r24
    257a:	9f 93       	push	r25
    257c:	af 93       	push	r26
    257e:	bf 93       	push	r27
    2580:	ef 93       	push	r30
    2582:	ff 93       	push	r31
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	00 d0       	rcall	.+0      	; 0x258a <__vector_91+0x52>
    258a:	00 d0       	rcall	.+0      	; 0x258c <__vector_91+0x54>
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    2590:	80 eb       	ldi	r24, 0xB0	; 176
    2592:	99 e0       	ldi	r25, 0x09	; 9
    2594:	0e 94 8e 03 	call	0x71c	; 0x71c <usart_getchar>
    2598:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    259a:	84 32       	cpi	r24, 0x24	; 36
    259c:	49 f4       	brne	.+18     	; 0x25b0 <__vector_91+0x78>
		writing = 1;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <writing>
		pos = 0;
		word_pos = 0;
    25a4:	10 92 05 21 	sts	0x2105, r1	; 0x802105 <word_pos>
		commas = 0;
    25a8:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	68 c2       	rjmp	.+1232   	; 0x2a80 <__vector_91+0x548>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    25b0:	8a 32       	cpi	r24, 0x2A	; 42
    25b2:	29 f4       	brne	.+10     	; 0x25be <__vector_91+0x86>
		commas = 0;
    25b4:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <commas>
		writing = 0;
    25b8:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <writing>
    25bc:	91 c2       	rjmp	.+1314   	; 0x2ae0 <__vector_91+0x5a8>
	}
	else if(c == (uint8_t) ','){
    25be:	8c 32       	cpi	r24, 0x2C	; 44
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <__vector_91+0x8c>
    25c2:	49 c2       	rjmp	.+1170   	; 0x2a56 <__vector_91+0x51e>
		gps[0] = 32;
    25c4:	e6 e2       	ldi	r30, 0x26	; 38
    25c6:	f1 e2       	ldi	r31, 0x21	; 33
    25c8:	80 e2       	ldi	r24, 0x20	; 32
    25ca:	80 83       	st	Z, r24
		if(gps[1] == 32){
    25cc:	81 81       	ldd	r24, Z+1	; 0x01
    25ce:	80 32       	cpi	r24, 0x20	; 32
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <__vector_91+0x9c>
    25d2:	6d c2       	rjmp	.+1242   	; 0x2aae <__vector_91+0x576>
			gps[0] = '0';
    25d4:	80 e3       	ldi	r24, 0x30	; 48
    25d6:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <gps>
    25da:	69 c2       	rjmp	.+1234   	; 0x2aae <__vector_91+0x576>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    25dc:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <gps>
    25e0:	8e 32       	cpi	r24, 0x2E	; 46
    25e2:	09 f0       	breq	.+2      	; 0x25e6 <__vector_91+0xae>
    25e4:	9e c1       	rjmp	.+828    	; 0x2922 <__vector_91+0x3ea>
    25e6:	a4 c1       	rjmp	.+840    	; 0x2930 <__vector_91+0x3f8>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    25e8:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <gps>
    25ec:	8e 32       	cpi	r24, 0x2E	; 46
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <__vector_91+0xba>
    25f0:	ec c0       	rjmp	.+472    	; 0x27ca <__vector_91+0x292>
    25f2:	f2 c0       	rjmp	.+484    	; 0x27d8 <__vector_91+0x2a0>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    25f4:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <gps>
    25f8:	8e 32       	cpi	r24, 0x2E	; 46
    25fa:	09 f0       	breq	.+2      	; 0x25fe <__vector_91+0xc6>
    25fc:	51 c0       	rjmp	.+162    	; 0x26a0 <__vector_91+0x168>
    25fe:	57 c0       	rjmp	.+174    	; 0x26ae <__vector_91+0x176>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2600:	91 91       	ld	r25, Z+
    2602:	9e 32       	cpi	r25, 0x2E	; 46
    2604:	29 f4       	brne	.+10     	; 0x2610 <__vector_91+0xd8>
    2606:	01 c0       	rjmp	.+2      	; 0x260a <__vector_91+0xd2>
    2608:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    260a:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <idx>
						break;
    260e:	03 c0       	rjmp	.+6      	; 0x2616 <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	8f 30       	cpi	r24, 0x0F	; 15
    2614:	a9 f7       	brne	.-22     	; 0x2600 <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2616:	20 91 03 21 	lds	r18, 0x2103	; 0x802103 <idx>
    261a:	e2 2f       	mov	r30, r18
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	ea 5d       	subi	r30, 0xDA	; 218
    2620:	fe 4d       	sbci	r31, 0xDE	; 222
    2622:	80 e2       	ldi	r24, 0x20	; 32
    2624:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2626:	2f 5f       	subi	r18, 0xFF	; 255
    2628:	2f 30       	cpi	r18, 0x0F	; 15
    262a:	c8 f4       	brcc	.+50     	; 0x265e <__vector_91+0x126>
					if(gps[i] == 32){
    262c:	82 2f       	mov	r24, r18
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	fc 01       	movw	r30, r24
    2632:	ea 5d       	subi	r30, 0xDA	; 218
    2634:	fe 4d       	sbci	r31, 0xDE	; 222
    2636:	30 81       	ld	r19, Z
    2638:	30 32       	cpi	r19, 0x20	; 32
    263a:	89 f0       	breq	.+34     	; 0x265e <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    263c:	40 e2       	ldi	r20, 0x20	; 32
    263e:	08 c0       	rjmp	.+16     	; 0x2650 <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2640:	82 2f       	mov	r24, r18
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	fc 01       	movw	r30, r24
    2646:	ea 5d       	subi	r30, 0xDA	; 218
    2648:	fe 4d       	sbci	r31, 0xDE	; 222
    264a:	30 81       	ld	r19, Z
    264c:	30 32       	cpi	r19, 0x20	; 32
    264e:	39 f0       	breq	.+14     	; 0x265e <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2650:	fc 01       	movw	r30, r24
    2652:	ea 5d       	subi	r30, 0xDA	; 218
    2654:	fe 4d       	sbci	r31, 0xDE	; 222
    2656:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2658:	2f 5f       	subi	r18, 0xFF	; 255
    265a:	2f 30       	cpi	r18, 0x0F	; 15
    265c:	89 f7       	brne	.-30     	; 0x2640 <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    265e:	ce 01       	movw	r24, r28
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	9f 93       	push	r25
    2664:	8f 93       	push	r24
    2666:	84 eb       	ldi	r24, 0xB4	; 180
    2668:	90 e2       	ldi	r25, 0x20	; 32
    266a:	9f 93       	push	r25
    266c:	8f 93       	push	r24
    266e:	86 e2       	ldi	r24, 0x26	; 38
    2670:	91 e2       	ldi	r25, 0x21	; 33
    2672:	9f 93       	push	r25
    2674:	8f 93       	push	r24
    2676:	5b d7       	rcall	.+3766   	; 0x352e <sscanf>
				gps_t = (double) val;
    2678:	69 81       	ldd	r22, Y+1	; 0x01
    267a:	7a 81       	ldd	r23, Y+2	; 0x02
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	94 d3       	rcall	.+1832   	; 0x2daa <__floatsisf>
    2682:	60 93 e5 20 	sts	0x20E5, r22	; 0x8020e5 <gps_t>
    2686:	70 93 e6 20 	sts	0x20E6, r23	; 0x8020e6 <gps_t+0x1>
    268a:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <gps_t+0x2>
    268e:	90 93 e8 20 	sts	0x20E8, r25	; 0x8020e8 <gps_t+0x3>
				break;
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	bd c1       	rjmp	.+890    	; 0x2a1a <__vector_91+0x4e2>
    26a0:	e7 e2       	ldi	r30, 0x27	; 39
    26a2:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    26a4:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    26a6:	91 91       	ld	r25, Z+
    26a8:	9e 32       	cpi	r25, 0x2E	; 46
    26aa:	29 f4       	brne	.+10     	; 0x26b6 <__vector_91+0x17e>
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <__vector_91+0x178>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    26b0:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <idx>
						break;
    26b4:	03 c0       	rjmp	.+6      	; 0x26bc <__vector_91+0x184>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    26b6:	8f 5f       	subi	r24, 0xFF	; 255
    26b8:	8f 30       	cpi	r24, 0x0F	; 15
    26ba:	a9 f7       	brne	.-22     	; 0x26a6 <__vector_91+0x16e>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    26bc:	20 91 03 21 	lds	r18, 0x2103	; 0x802103 <idx>
    26c0:	42 2f       	mov	r20, r18
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	fa 01       	movw	r30, r20
    26c6:	ea 5d       	subi	r30, 0xDA	; 218
    26c8:	fe 4d       	sbci	r31, 0xDE	; 222
    26ca:	80 e2       	ldi	r24, 0x20	; 32
    26cc:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    26ce:	2f 5f       	subi	r18, 0xFF	; 255
    26d0:	2f 30       	cpi	r18, 0x0F	; 15
    26d2:	f8 f4       	brcc	.+62     	; 0x2712 <__vector_91+0x1da>
					if(gps[i] == 32){
    26d4:	82 2f       	mov	r24, r18
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	fc 01       	movw	r30, r24
    26da:	ea 5d       	subi	r30, 0xDA	; 218
    26dc:	fe 4d       	sbci	r31, 0xDE	; 222
    26de:	30 81       	ld	r19, Z
    26e0:	30 32       	cpi	r19, 0x20	; 32
    26e2:	b9 f0       	breq	.+46     	; 0x2712 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    26e4:	60 e2       	ldi	r22, 0x20	; 32
    26e6:	08 c0       	rjmp	.+16     	; 0x26f8 <__vector_91+0x1c0>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    26e8:	82 2f       	mov	r24, r18
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	fc 01       	movw	r30, r24
    26ee:	ea 5d       	subi	r30, 0xDA	; 218
    26f0:	fe 4d       	sbci	r31, 0xDE	; 222
    26f2:	30 81       	ld	r19, Z
    26f4:	30 32       	cpi	r19, 0x20	; 32
    26f6:	69 f0       	breq	.+26     	; 0x2712 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
    26f8:	fc 01       	movw	r30, r24
    26fa:	e4 1b       	sub	r30, r20
    26fc:	f5 0b       	sbc	r31, r21
    26fe:	ec 5c       	subi	r30, 0xCC	; 204
    2700:	fe 4d       	sbci	r31, 0xDE	; 222
    2702:	30 83       	st	Z, r19
					gps[i] = 32;
    2704:	fc 01       	movw	r30, r24
    2706:	ea 5d       	subi	r30, 0xDA	; 218
    2708:	fe 4d       	sbci	r31, 0xDE	; 222
    270a:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    270c:	2f 5f       	subi	r18, 0xFF	; 255
    270e:	2f 30       	cpi	r18, 0x0F	; 15
    2710:	59 f7       	brne	.-42     	; 0x26e8 <__vector_91+0x1b0>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2712:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <dec>
    2716:	80 32       	cpi	r24, 0x20	; 32
    2718:	19 f4       	brne	.+6      	; 0x2720 <__vector_91+0x1e8>
					dec[0] = '0';
    271a:	80 e3       	ldi	r24, 0x30	; 48
    271c:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <dec>
				}
				sscanf(gps,"%ld",&val);
    2720:	ce 01       	movw	r24, r28
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	9f 93       	push	r25
    2726:	8f 93       	push	r24
    2728:	84 eb       	ldi	r24, 0xB4	; 180
    272a:	90 e2       	ldi	r25, 0x20	; 32
    272c:	9f 93       	push	r25
    272e:	8f 93       	push	r24
    2730:	86 e2       	ldi	r24, 0x26	; 38
    2732:	91 e2       	ldi	r25, 0x21	; 33
    2734:	9f 93       	push	r25
    2736:	8f 93       	push	r24
    2738:	fa d6       	rcall	.+3572   	; 0x352e <sscanf>
				sscanf(dec,"%d",&val2);
    273a:	ce 01       	movw	r24, r28
    273c:	05 96       	adiw	r24, 0x05	; 5
    273e:	9f 93       	push	r25
    2740:	8f 93       	push	r24
    2742:	88 eb       	ldi	r24, 0xB8	; 184
    2744:	90 e2       	ldi	r25, 0x20	; 32
    2746:	9f 93       	push	r25
    2748:	8f 93       	push	r24
    274a:	85 e3       	ldi	r24, 0x35	; 53
    274c:	91 e2       	ldi	r25, 0x21	; 33
    274e:	9f 93       	push	r25
    2750:	8f 93       	push	r24
    2752:	ed d6       	rcall	.+3546   	; 0x352e <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    2754:	89 80       	ldd	r8, Y+1	; 0x01
    2756:	9a 80       	ldd	r9, Y+2	; 0x02
    2758:	ab 80       	ldd	r10, Y+3	; 0x03
    275a:	bc 80       	ldd	r11, Y+4	; 0x04
    275c:	6d 81       	ldd	r22, Y+5	; 0x05
    275e:	7e 81       	ldd	r23, Y+6	; 0x06
    2760:	07 2e       	mov	r0, r23
    2762:	00 0c       	add	r0, r0
    2764:	88 0b       	sbc	r24, r24
    2766:	99 0b       	sbc	r25, r25
    2768:	20 d3       	rcall	.+1600   	; 0x2daa <__floatsisf>
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e4       	ldi	r19, 0x40	; 64
    276e:	4c e1       	ldi	r20, 0x1C	; 28
    2770:	56 e4       	ldi	r21, 0x46	; 70
    2772:	46 d2       	rcall	.+1164   	; 0x2c00 <__divsf3>
    2774:	6b 01       	movw	r12, r22
    2776:	7c 01       	movw	r14, r24
    2778:	c5 01       	movw	r24, r10
    277a:	b4 01       	movw	r22, r8
    277c:	24 e6       	ldi	r18, 0x64	; 100
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	f6 d5       	rcall	.+3052   	; 0x3372 <__divmodsi4>
    2786:	49 01       	movw	r8, r18
    2788:	5a 01       	movw	r10, r20
    278a:	0f d3       	rcall	.+1566   	; 0x2daa <__floatsisf>
    278c:	9b 01       	movw	r18, r22
    278e:	ac 01       	movw	r20, r24
    2790:	c7 01       	movw	r24, r14
    2792:	b6 01       	movw	r22, r12
    2794:	cd d1       	rcall	.+922    	; 0x2b30 <__addsf3>
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e7       	ldi	r20, 0x70	; 112
    279c:	52 e4       	ldi	r21, 0x42	; 66
    279e:	30 d2       	rcall	.+1120   	; 0x2c00 <__divsf3>
    27a0:	6b 01       	movw	r12, r22
    27a2:	7c 01       	movw	r14, r24
    27a4:	c5 01       	movw	r24, r10
    27a6:	b4 01       	movw	r22, r8
    27a8:	00 d3       	rcall	.+1536   	; 0x2daa <__floatsisf>
    27aa:	9b 01       	movw	r18, r22
    27ac:	ac 01       	movw	r20, r24
    27ae:	c7 01       	movw	r24, r14
    27b0:	b6 01       	movw	r22, r12
    27b2:	be d1       	rcall	.+892    	; 0x2b30 <__addsf3>
    27b4:	60 93 e1 20 	sts	0x20E1, r22	; 0x8020e1 <gps_lat>
    27b8:	70 93 e2 20 	sts	0x20E2, r23	; 0x8020e2 <gps_lat+0x1>
    27bc:	80 93 e3 20 	sts	0x20E3, r24	; 0x8020e3 <gps_lat+0x2>
    27c0:	90 93 e4 20 	sts	0x20E4, r25	; 0x8020e4 <gps_lat+0x3>
				break;
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	28 c1       	rjmp	.+592    	; 0x2a1a <__vector_91+0x4e2>
    27ca:	e7 e2       	ldi	r30, 0x27	; 39
    27cc:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    27ce:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    27d0:	91 91       	ld	r25, Z+
    27d2:	9e 32       	cpi	r25, 0x2E	; 46
    27d4:	29 f4       	brne	.+10     	; 0x27e0 <__vector_91+0x2a8>
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <__vector_91+0x2a2>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    27da:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <idx>
						break;
    27de:	03 c0       	rjmp	.+6      	; 0x27e6 <__vector_91+0x2ae>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    27e0:	8f 5f       	subi	r24, 0xFF	; 255
    27e2:	8f 30       	cpi	r24, 0x0F	; 15
    27e4:	a9 f7       	brne	.-22     	; 0x27d0 <__vector_91+0x298>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    27e6:	20 91 03 21 	lds	r18, 0x2103	; 0x802103 <idx>
    27ea:	42 2f       	mov	r20, r18
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	fa 01       	movw	r30, r20
    27f0:	ea 5d       	subi	r30, 0xDA	; 218
    27f2:	fe 4d       	sbci	r31, 0xDE	; 222
    27f4:	80 e2       	ldi	r24, 0x20	; 32
    27f6:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    27f8:	2f 5f       	subi	r18, 0xFF	; 255
    27fa:	2f 30       	cpi	r18, 0x0F	; 15
    27fc:	f8 f4       	brcc	.+62     	; 0x283c <__vector_91+0x304>
					if(gps[i] == 32){
    27fe:	82 2f       	mov	r24, r18
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	fc 01       	movw	r30, r24
    2804:	ea 5d       	subi	r30, 0xDA	; 218
    2806:	fe 4d       	sbci	r31, 0xDE	; 222
    2808:	30 81       	ld	r19, Z
    280a:	30 32       	cpi	r19, 0x20	; 32
    280c:	b9 f0       	breq	.+46     	; 0x283c <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    280e:	60 e2       	ldi	r22, 0x20	; 32
    2810:	08 c0       	rjmp	.+16     	; 0x2822 <__vector_91+0x2ea>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2812:	82 2f       	mov	r24, r18
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	fc 01       	movw	r30, r24
    2818:	ea 5d       	subi	r30, 0xDA	; 218
    281a:	fe 4d       	sbci	r31, 0xDE	; 222
    281c:	30 81       	ld	r19, Z
    281e:	30 32       	cpi	r19, 0x20	; 32
    2820:	69 f0       	breq	.+26     	; 0x283c <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
    2822:	fc 01       	movw	r30, r24
    2824:	e4 1b       	sub	r30, r20
    2826:	f5 0b       	sbc	r31, r21
    2828:	ec 5c       	subi	r30, 0xCC	; 204
    282a:	fe 4d       	sbci	r31, 0xDE	; 222
    282c:	30 83       	st	Z, r19
					gps[i] = 32;
    282e:	fc 01       	movw	r30, r24
    2830:	ea 5d       	subi	r30, 0xDA	; 218
    2832:	fe 4d       	sbci	r31, 0xDE	; 222
    2834:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2836:	2f 5f       	subi	r18, 0xFF	; 255
    2838:	2f 30       	cpi	r18, 0x0F	; 15
    283a:	59 f7       	brne	.-42     	; 0x2812 <__vector_91+0x2da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    283c:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <dec>
    2840:	80 32       	cpi	r24, 0x20	; 32
    2842:	19 f4       	brne	.+6      	; 0x284a <__vector_91+0x312>
					dec[0] = '0';
    2844:	80 e3       	ldi	r24, 0x30	; 48
    2846:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <dec>
				}
				sscanf(gps,"%ld",&val);
    284a:	ce 01       	movw	r24, r28
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	9f 93       	push	r25
    2850:	8f 93       	push	r24
    2852:	84 eb       	ldi	r24, 0xB4	; 180
    2854:	90 e2       	ldi	r25, 0x20	; 32
    2856:	9f 93       	push	r25
    2858:	8f 93       	push	r24
    285a:	86 e2       	ldi	r24, 0x26	; 38
    285c:	91 e2       	ldi	r25, 0x21	; 33
    285e:	9f 93       	push	r25
    2860:	8f 93       	push	r24
    2862:	65 d6       	rcall	.+3274   	; 0x352e <sscanf>
				sscanf(dec,"%d",&val2);
    2864:	ce 01       	movw	r24, r28
    2866:	05 96       	adiw	r24, 0x05	; 5
    2868:	9f 93       	push	r25
    286a:	8f 93       	push	r24
    286c:	88 eb       	ldi	r24, 0xB8	; 184
    286e:	90 e2       	ldi	r25, 0x20	; 32
    2870:	9f 93       	push	r25
    2872:	8f 93       	push	r24
    2874:	85 e3       	ldi	r24, 0x35	; 53
    2876:	91 e2       	ldi	r25, 0x21	; 33
    2878:	9f 93       	push	r25
    287a:	8f 93       	push	r24
    287c:	58 d6       	rcall	.+3248   	; 0x352e <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    287e:	89 80       	ldd	r8, Y+1	; 0x01
    2880:	9a 80       	ldd	r9, Y+2	; 0x02
    2882:	ab 80       	ldd	r10, Y+3	; 0x03
    2884:	bc 80       	ldd	r11, Y+4	; 0x04
    2886:	6d 81       	ldd	r22, Y+5	; 0x05
    2888:	7e 81       	ldd	r23, Y+6	; 0x06
    288a:	07 2e       	mov	r0, r23
    288c:	00 0c       	add	r0, r0
    288e:	88 0b       	sbc	r24, r24
    2890:	99 0b       	sbc	r25, r25
    2892:	8b d2       	rcall	.+1302   	; 0x2daa <__floatsisf>
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e4       	ldi	r19, 0x40	; 64
    2898:	4c e1       	ldi	r20, 0x1C	; 28
    289a:	56 e4       	ldi	r21, 0x46	; 70
    289c:	b1 d1       	rcall	.+866    	; 0x2c00 <__divsf3>
    289e:	6b 01       	movw	r12, r22
    28a0:	7c 01       	movw	r14, r24
    28a2:	c5 01       	movw	r24, r10
    28a4:	b4 01       	movw	r22, r8
    28a6:	24 e6       	ldi	r18, 0x64	; 100
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	61 d5       	rcall	.+2754   	; 0x3372 <__divmodsi4>
    28b0:	49 01       	movw	r8, r18
    28b2:	5a 01       	movw	r10, r20
    28b4:	7a d2       	rcall	.+1268   	; 0x2daa <__floatsisf>
    28b6:	9b 01       	movw	r18, r22
    28b8:	ac 01       	movw	r20, r24
    28ba:	c7 01       	movw	r24, r14
    28bc:	b6 01       	movw	r22, r12
    28be:	38 d1       	rcall	.+624    	; 0x2b30 <__addsf3>
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e7       	ldi	r20, 0x70	; 112
    28c6:	52 e4       	ldi	r21, 0x42	; 66
    28c8:	9b d1       	rcall	.+822    	; 0x2c00 <__divsf3>
    28ca:	6b 01       	movw	r12, r22
    28cc:	7c 01       	movw	r14, r24
    28ce:	c5 01       	movw	r24, r10
    28d0:	b4 01       	movw	r22, r8
    28d2:	6b d2       	rcall	.+1238   	; 0x2daa <__floatsisf>
    28d4:	9b 01       	movw	r18, r22
    28d6:	ac 01       	movw	r20, r24
    28d8:	c7 01       	movw	r24, r14
    28da:	b6 01       	movw	r22, r12
    28dc:	29 d1       	rcall	.+594    	; 0x2b30 <__addsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	b0 58       	subi	r27, 0x80	; 128
    28e4:	80 93 dd 20 	sts	0x20DD, r24	; 0x8020dd <gps_long>
    28e8:	90 93 de 20 	sts	0x20DE, r25	; 0x8020de <gps_long+0x1>
    28ec:	a0 93 df 20 	sts	0x20DF, r26	; 0x8020df <gps_long+0x2>
    28f0:	b0 93 e0 20 	sts	0x20E0, r27	; 0x8020e0 <gps_long+0x3>
    28f4:	cd bf       	out	0x3d, r28	; 61
				break;
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	90 c0       	rjmp	.+288    	; 0x2a1a <__vector_91+0x4e2>
    28fa:	87 ed       	ldi	r24, 0xD7	; 215
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    28fc:	90 e2       	ldi	r25, 0x20	; 32
    28fe:	9f 93       	push	r25
    2900:	8f 93       	push	r24
    2902:	88 eb       	ldi	r24, 0xB8	; 184
    2904:	90 e2       	ldi	r25, 0x20	; 32
    2906:	9f 93       	push	r25
    2908:	8f 93       	push	r24
    290a:	86 e2       	ldi	r24, 0x26	; 38
    290c:	91 e2       	ldi	r25, 0x21	; 33
    290e:	9f 93       	push	r25
    2910:	8f 93       	push	r24
    2912:	0d d6       	rcall	.+3098   	; 0x352e <sscanf>
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
				break;
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	7c c0       	rjmp	.+248    	; 0x2a1a <__vector_91+0x4e2>
    2922:	e7 e2       	ldi	r30, 0x27	; 39
    2924:	f1 e2       	ldi	r31, 0x21	; 33
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    292a:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    292c:	29 f4       	brne	.+10     	; 0x2938 <__vector_91+0x400>
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <__vector_91+0x3fa>
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <idx>
						idx = i;
    2936:	03 c0       	rjmp	.+6      	; 0x293e <__vector_91+0x406>
    2938:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    293a:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    293c:	a9 f7       	brne	.-22     	; 0x2928 <__vector_91+0x3f0>
    293e:	20 91 03 21 	lds	r18, 0x2103	; 0x802103 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2942:	42 2f       	mov	r20, r18
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	fa 01       	movw	r30, r20
    2948:	ea 5d       	subi	r30, 0xDA	; 218
    294a:	fe 4d       	sbci	r31, 0xDE	; 222
    294c:	80 e2       	ldi	r24, 0x20	; 32
    294e:	80 83       	st	Z, r24
    2950:	2f 5f       	subi	r18, 0xFF	; 255
    2952:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    2954:	f8 f4       	brcc	.+62     	; 0x2994 <__vector_91+0x45c>
    2956:	82 2f       	mov	r24, r18
    2958:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    295a:	fc 01       	movw	r30, r24
    295c:	ea 5d       	subi	r30, 0xDA	; 218
    295e:	fe 4d       	sbci	r31, 0xDE	; 222
    2960:	30 81       	ld	r19, Z
    2962:	30 32       	cpi	r19, 0x20	; 32
    2964:	b9 f0       	breq	.+46     	; 0x2994 <__vector_91+0x45c>
    2966:	60 e2       	ldi	r22, 0x20	; 32
    2968:	08 c0       	rjmp	.+16     	; 0x297a <__vector_91+0x442>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    296a:	82 2f       	mov	r24, r18
    296c:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    296e:	fc 01       	movw	r30, r24
    2970:	ea 5d       	subi	r30, 0xDA	; 218
    2972:	fe 4d       	sbci	r31, 0xDE	; 222
    2974:	30 81       	ld	r19, Z
    2976:	30 32       	cpi	r19, 0x20	; 32
    2978:	69 f0       	breq	.+26     	; 0x2994 <__vector_91+0x45c>
    297a:	fc 01       	movw	r30, r24
    297c:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    297e:	f5 0b       	sbc	r31, r21
    2980:	ec 5c       	subi	r30, 0xCC	; 204
    2982:	fe 4d       	sbci	r31, 0xDE	; 222
    2984:	30 83       	st	Z, r19
    2986:	fc 01       	movw	r30, r24
    2988:	ea 5d       	subi	r30, 0xDA	; 218
					gps[i] = 32;
    298a:	fe 4d       	sbci	r31, 0xDE	; 222
    298c:	60 83       	st	Z, r22
    298e:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2990:	2f 30       	cpi	r18, 0x0F	; 15
    2992:	59 f7       	brne	.-42     	; 0x296a <__vector_91+0x432>
    2994:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2998:	80 32       	cpi	r24, 0x20	; 32
    299a:	19 f4       	brne	.+6      	; 0x29a2 <__vector_91+0x46a>
    299c:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    299e:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <dec>
    29a2:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    29a4:	01 96       	adiw	r24, 0x01	; 1
    29a6:	9f 93       	push	r25
    29a8:	8f 93       	push	r24
    29aa:	84 eb       	ldi	r24, 0xB4	; 180
    29ac:	90 e2       	ldi	r25, 0x20	; 32
    29ae:	9f 93       	push	r25
    29b0:	8f 93       	push	r24
    29b2:	86 e2       	ldi	r24, 0x26	; 38
    29b4:	91 e2       	ldi	r25, 0x21	; 33
    29b6:	9f 93       	push	r25
    29b8:	8f 93       	push	r24
    29ba:	b9 d5       	rcall	.+2930   	; 0x352e <sscanf>
				sscanf(dec,"%d",&val2);
    29bc:	ce 01       	movw	r24, r28
    29be:	05 96       	adiw	r24, 0x05	; 5
    29c0:	9f 93       	push	r25
    29c2:	8f 93       	push	r24
    29c4:	88 eb       	ldi	r24, 0xB8	; 184
    29c6:	90 e2       	ldi	r25, 0x20	; 32
    29c8:	9f 93       	push	r25
    29ca:	8f 93       	push	r24
    29cc:	85 e3       	ldi	r24, 0x35	; 53
    29ce:	91 e2       	ldi	r25, 0x21	; 33
    29d0:	9f 93       	push	r25
    29d2:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    29d4:	ac d5       	rcall	.+2904   	; 0x352e <sscanf>
    29d6:	69 81       	ldd	r22, Y+1	; 0x01
    29d8:	7a 81       	ldd	r23, Y+2	; 0x02
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	e5 d1       	rcall	.+970    	; 0x2daa <__floatsisf>
    29e0:	6b 01       	movw	r12, r22
    29e2:	7c 01       	movw	r14, r24
    29e4:	6d 81       	ldd	r22, Y+5	; 0x05
    29e6:	7e 81       	ldd	r23, Y+6	; 0x06
    29e8:	07 2e       	mov	r0, r23
    29ea:	00 0c       	add	r0, r0
    29ec:	88 0b       	sbc	r24, r24
    29ee:	99 0b       	sbc	r25, r25
    29f0:	dc d1       	rcall	.+952    	; 0x2daa <__floatsisf>
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e2       	ldi	r20, 0x20	; 32
    29f8:	51 e4       	ldi	r21, 0x41	; 65
    29fa:	02 d1       	rcall	.+516    	; 0x2c00 <__divsf3>
    29fc:	9b 01       	movw	r18, r22
    29fe:	ac 01       	movw	r20, r24
    2a00:	c7 01       	movw	r24, r14
    2a02:	b6 01       	movw	r22, r12
    2a04:	95 d0       	rcall	.+298    	; 0x2b30 <__addsf3>
    2a06:	60 93 d9 20 	sts	0x20D9, r22	; 0x8020d9 <gps_alt>
    2a0a:	70 93 da 20 	sts	0x20DA, r23	; 0x8020da <gps_alt+0x1>
    2a0e:	80 93 db 20 	sts	0x20DB, r24	; 0x8020db <gps_alt+0x2>
    2a12:	90 93 dc 20 	sts	0x20DC, r25	; 0x8020dc <gps_alt+0x3>
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <writing>
				break;
    2a1e:	88 23       	and	r24, r24
		}
	
		if(writing){
    2a20:	d1 f0       	breq	.+52     	; 0x2a56 <__vector_91+0x51e>
    2a22:	10 92 03 21 	sts	0x2103, r1	; 0x802103 <idx>
    2a26:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <commas>
			idx = 0;
    2a2a:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    2a2c:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <commas>
    2a30:	10 92 05 21 	sts	0x2105, r1	; 0x802105 <word_pos>
    2a34:	e6 e2       	ldi	r30, 0x26	; 38
			word_pos = 0;
    2a36:	f1 e2       	ldi	r31, 0x21	; 33
    2a38:	25 e3       	ldi	r18, 0x35	; 53
    2a3a:	31 e2       	ldi	r19, 0x21	; 33
    2a3c:	80 e2       	ldi	r24, 0x20	; 32
    2a3e:	81 93       	st	Z+, r24
    2a40:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2a42:	3f 07       	cpc	r19, r31
    2a44:	e1 f7       	brne	.-8      	; 0x2a3e <__vector_91+0x506>
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2a46:	e5 e3       	ldi	r30, 0x35	; 53
    2a48:	f1 e2       	ldi	r31, 0x21	; 33
    2a4a:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2a4c:	80 83       	st	Z, r24
    2a4e:	81 83       	std	Z+1, r24	; 0x01
    2a50:	82 83       	std	Z+2, r24	; 0x02
    2a52:	83 83       	std	Z+3, r24	; 0x03
    2a54:	84 83       	std	Z+4, r24	; 0x04
    2a56:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <writing>
    2a5a:	88 23       	and	r24, r24
			}
		}
	}
		
	if(writing){
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <__vector_91+0x528>
    2a5e:	40 c0       	rjmp	.+128    	; 0x2ae0 <__vector_91+0x5a8>
    2a60:	90 91 06 21 	lds	r25, 0x2106	; 0x802106 <pos>
    2a64:	93 30       	cpi	r25, 0x03	; 3
		switch(pos){
    2a66:	19 f0       	breq	.+6      	; 0x2a6e <__vector_91+0x536>
    2a68:	94 30       	cpi	r25, 0x04	; 4
    2a6a:	31 f0       	breq	.+12     	; 0x2a78 <__vector_91+0x540>
    2a6c:	09 c0       	rjmp	.+18     	; 0x2a80 <__vector_91+0x548>
    2a6e:	17 34       	cpi	r17, 0x47	; 71
    2a70:	39 f0       	breq	.+14     	; 0x2a80 <__vector_91+0x548>
    2a72:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <writing>
			case 3:
				if(c != 'G'){
    2a76:	04 c0       	rjmp	.+8      	; 0x2a80 <__vector_91+0x548>
					writing = 0;
    2a78:	17 34       	cpi	r17, 0x47	; 71
    2a7a:	11 f0       	breq	.+4      	; 0x2a80 <__vector_91+0x548>
    2a7c:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <writing>
				}
				break;
				
			case 4:
				if(c != 'G'){
    2a80:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <word_pos>
					writing = 0;
    2a84:	e8 2f       	mov	r30, r24
				}
				break;
		}
		gps[word_pos] = c;
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	ea 5d       	subi	r30, 0xDA	; 218
    2a8a:	fe 4d       	sbci	r31, 0xDE	; 222
    2a8c:	10 83       	st	Z, r17
    2a8e:	8f 5f       	subi	r24, 0xFF	; 255
    2a90:	80 93 05 21 	sts	0x2105, r24	; 0x802105 <word_pos>
		word_pos++;
    2a94:	9f 5f       	subi	r25, 0xFF	; 255
    2a96:	90 93 06 21 	sts	0x2106, r25	; 0x802106 <pos>
		pos++;
    2a9a:	22 c0       	rjmp	.+68     	; 0x2ae0 <__vector_91+0x5a8>
    2a9c:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <gps>
	}
    2aa0:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <__vector_91+0x56e>
    2aa4:	b1 cd       	rjmp	.-1182   	; 0x2608 <__vector_91+0xd0>
    2aa6:	e7 e2       	ldi	r30, 0x27	; 39
    2aa8:	f1 e2       	ldi	r31, 0x21	; 33
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	a9 cd       	rjmp	.-1198   	; 0x2600 <__vector_91+0xc8>
    2aae:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2ab0:	1a 82       	std	Y+2, r1	; 0x02
    2ab2:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    2ab4:	1c 82       	std	Y+4, r1	; 0x04
    2ab6:	1d 82       	std	Y+5, r1	; 0x05
    2ab8:	1e 82       	std	Y+6, r1	; 0x06
    2aba:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <commas>
		int16_t val2 = 0;
    2abe:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <__vector_91+0x58c>
    2ac2:	92 cd       	rjmp	.-1244   	; 0x25e8 <__vector_91+0xb0>
    2ac4:	30 f4       	brcc	.+12     	; 0x2ad2 <__vector_91+0x59a>
    2ac6:	81 30       	cpi	r24, 0x01	; 1
    2ac8:	49 f3       	breq	.-46     	; 0x2a9c <__vector_91+0x564>
    2aca:	82 30       	cpi	r24, 0x02	; 2
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <__vector_91+0x598>
    2ace:	92 cd       	rjmp	.-1244   	; 0x25f4 <__vector_91+0xbc>
    2ad0:	a4 cf       	rjmp	.-184    	; 0x2a1a <__vector_91+0x4e2>
    2ad2:	87 30       	cpi	r24, 0x07	; 7
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <__vector_91+0x5a0>
    2ad6:	11 cf       	rjmp	.-478    	; 0x28fa <__vector_91+0x3c2>
    2ad8:	89 30       	cpi	r24, 0x09	; 9
    2ada:	09 f4       	brne	.+2      	; 0x2ade <__vector_91+0x5a6>
    2adc:	7f cd       	rjmp	.-1282   	; 0x25dc <__vector_91+0xa4>
    2ade:	9d cf       	rjmp	.-198    	; 0x2a1a <__vector_91+0x4e2>
    2ae0:	26 96       	adiw	r28, 0x06	; 6
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	ff 91       	pop	r31
    2aec:	ef 91       	pop	r30
    2aee:	bf 91       	pop	r27
    2af0:	af 91       	pop	r26
    2af2:	9f 91       	pop	r25
    2af4:	8f 91       	pop	r24
    2af6:	7f 91       	pop	r23
    2af8:	6f 91       	pop	r22
    2afa:	5f 91       	pop	r21
    2afc:	4f 91       	pop	r20
    2afe:	3f 91       	pop	r19
    2b00:	2f 91       	pop	r18
    2b02:	1f 91       	pop	r17
    2b04:	ff 90       	pop	r15
    2b06:	ef 90       	pop	r14
    2b08:	df 90       	pop	r13
    2b0a:	cf 90       	pop	r12
    2b0c:	bf 90       	pop	r11
    2b0e:	af 90       	pop	r10
    2b10:	9f 90       	pop	r9
    2b12:	8f 90       	pop	r8
    2b14:	0f 90       	pop	r0
    2b16:	0b be       	out	0x3b, r0	; 59
    2b18:	0f 90       	pop	r0
    2b1a:	0a be       	out	0x3a, r0	; 58
    2b1c:	0f 90       	pop	r0
    2b1e:	09 be       	out	0x39, r0	; 57
    2b20:	0f 90       	pop	r0
    2b22:	08 be       	out	0x38, r0	; 56
    2b24:	0f 90       	pop	r0
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	0f 90       	pop	r0
    2b2a:	1f 90       	pop	r1
    2b2c:	18 95       	reti

00002b2e <__subsf3>:
    2b2e:	50 58       	subi	r21, 0x80	; 128

00002b30 <__addsf3>:
    2b30:	bb 27       	eor	r27, r27
    2b32:	aa 27       	eor	r26, r26
    2b34:	0e d0       	rcall	.+28     	; 0x2b52 <__addsf3x>
    2b36:	bf c1       	rjmp	.+894    	; 0x2eb6 <__fp_round>
    2b38:	b0 d1       	rcall	.+864    	; 0x2e9a <__fp_pscA>
    2b3a:	30 f0       	brcs	.+12     	; 0x2b48 <__addsf3+0x18>
    2b3c:	b5 d1       	rcall	.+874    	; 0x2ea8 <__fp_pscB>
    2b3e:	20 f0       	brcs	.+8      	; 0x2b48 <__addsf3+0x18>
    2b40:	31 f4       	brne	.+12     	; 0x2b4e <__addsf3+0x1e>
    2b42:	9f 3f       	cpi	r25, 0xFF	; 255
    2b44:	11 f4       	brne	.+4      	; 0x2b4a <__addsf3+0x1a>
    2b46:	1e f4       	brtc	.+6      	; 0x2b4e <__addsf3+0x1e>
    2b48:	95 c1       	rjmp	.+810    	; 0x2e74 <__fp_nan>
    2b4a:	0e f4       	brtc	.+2      	; 0x2b4e <__addsf3+0x1e>
    2b4c:	e0 95       	com	r30
    2b4e:	e7 fb       	bst	r30, 7
    2b50:	8b c1       	rjmp	.+790    	; 0x2e68 <__fp_inf>

00002b52 <__addsf3x>:
    2b52:	e9 2f       	mov	r30, r25
    2b54:	c1 d1       	rcall	.+898    	; 0x2ed8 <__fp_split3>
    2b56:	80 f3       	brcs	.-32     	; 0x2b38 <__addsf3+0x8>
    2b58:	ba 17       	cp	r27, r26
    2b5a:	62 07       	cpc	r22, r18
    2b5c:	73 07       	cpc	r23, r19
    2b5e:	84 07       	cpc	r24, r20
    2b60:	95 07       	cpc	r25, r21
    2b62:	18 f0       	brcs	.+6      	; 0x2b6a <__addsf3x+0x18>
    2b64:	71 f4       	brne	.+28     	; 0x2b82 <__addsf3x+0x30>
    2b66:	9e f5       	brtc	.+102    	; 0x2bce <__addsf3x+0x7c>
    2b68:	d9 c1       	rjmp	.+946    	; 0x2f1c <__fp_zero>
    2b6a:	0e f4       	brtc	.+2      	; 0x2b6e <__addsf3x+0x1c>
    2b6c:	e0 95       	com	r30
    2b6e:	0b 2e       	mov	r0, r27
    2b70:	ba 2f       	mov	r27, r26
    2b72:	a0 2d       	mov	r26, r0
    2b74:	0b 01       	movw	r0, r22
    2b76:	b9 01       	movw	r22, r18
    2b78:	90 01       	movw	r18, r0
    2b7a:	0c 01       	movw	r0, r24
    2b7c:	ca 01       	movw	r24, r20
    2b7e:	a0 01       	movw	r20, r0
    2b80:	11 24       	eor	r1, r1
    2b82:	ff 27       	eor	r31, r31
    2b84:	59 1b       	sub	r21, r25
    2b86:	99 f0       	breq	.+38     	; 0x2bae <__addsf3x+0x5c>
    2b88:	59 3f       	cpi	r21, 0xF9	; 249
    2b8a:	50 f4       	brcc	.+20     	; 0x2ba0 <__addsf3x+0x4e>
    2b8c:	50 3e       	cpi	r21, 0xE0	; 224
    2b8e:	68 f1       	brcs	.+90     	; 0x2bea <__addsf3x+0x98>
    2b90:	1a 16       	cp	r1, r26
    2b92:	f0 40       	sbci	r31, 0x00	; 0
    2b94:	a2 2f       	mov	r26, r18
    2b96:	23 2f       	mov	r18, r19
    2b98:	34 2f       	mov	r19, r20
    2b9a:	44 27       	eor	r20, r20
    2b9c:	58 5f       	subi	r21, 0xF8	; 248
    2b9e:	f3 cf       	rjmp	.-26     	; 0x2b86 <__addsf3x+0x34>
    2ba0:	46 95       	lsr	r20
    2ba2:	37 95       	ror	r19
    2ba4:	27 95       	ror	r18
    2ba6:	a7 95       	ror	r26
    2ba8:	f0 40       	sbci	r31, 0x00	; 0
    2baa:	53 95       	inc	r21
    2bac:	c9 f7       	brne	.-14     	; 0x2ba0 <__addsf3x+0x4e>
    2bae:	7e f4       	brtc	.+30     	; 0x2bce <__addsf3x+0x7c>
    2bb0:	1f 16       	cp	r1, r31
    2bb2:	ba 0b       	sbc	r27, r26
    2bb4:	62 0b       	sbc	r22, r18
    2bb6:	73 0b       	sbc	r23, r19
    2bb8:	84 0b       	sbc	r24, r20
    2bba:	ba f0       	brmi	.+46     	; 0x2bea <__addsf3x+0x98>
    2bbc:	91 50       	subi	r25, 0x01	; 1
    2bbe:	a1 f0       	breq	.+40     	; 0x2be8 <__addsf3x+0x96>
    2bc0:	ff 0f       	add	r31, r31
    2bc2:	bb 1f       	adc	r27, r27
    2bc4:	66 1f       	adc	r22, r22
    2bc6:	77 1f       	adc	r23, r23
    2bc8:	88 1f       	adc	r24, r24
    2bca:	c2 f7       	brpl	.-16     	; 0x2bbc <__addsf3x+0x6a>
    2bcc:	0e c0       	rjmp	.+28     	; 0x2bea <__addsf3x+0x98>
    2bce:	ba 0f       	add	r27, r26
    2bd0:	62 1f       	adc	r22, r18
    2bd2:	73 1f       	adc	r23, r19
    2bd4:	84 1f       	adc	r24, r20
    2bd6:	48 f4       	brcc	.+18     	; 0x2bea <__addsf3x+0x98>
    2bd8:	87 95       	ror	r24
    2bda:	77 95       	ror	r23
    2bdc:	67 95       	ror	r22
    2bde:	b7 95       	ror	r27
    2be0:	f7 95       	ror	r31
    2be2:	9e 3f       	cpi	r25, 0xFE	; 254
    2be4:	08 f0       	brcs	.+2      	; 0x2be8 <__addsf3x+0x96>
    2be6:	b3 cf       	rjmp	.-154    	; 0x2b4e <__addsf3+0x1e>
    2be8:	93 95       	inc	r25
    2bea:	88 0f       	add	r24, r24
    2bec:	08 f0       	brcs	.+2      	; 0x2bf0 <__addsf3x+0x9e>
    2bee:	99 27       	eor	r25, r25
    2bf0:	ee 0f       	add	r30, r30
    2bf2:	97 95       	ror	r25
    2bf4:	87 95       	ror	r24
    2bf6:	08 95       	ret

00002bf8 <__cmpsf2>:
    2bf8:	13 d1       	rcall	.+550    	; 0x2e20 <__fp_cmp>
    2bfa:	08 f4       	brcc	.+2      	; 0x2bfe <__cmpsf2+0x6>
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	08 95       	ret

00002c00 <__divsf3>:
    2c00:	0c d0       	rcall	.+24     	; 0x2c1a <__divsf3x>
    2c02:	59 c1       	rjmp	.+690    	; 0x2eb6 <__fp_round>
    2c04:	51 d1       	rcall	.+674    	; 0x2ea8 <__fp_pscB>
    2c06:	40 f0       	brcs	.+16     	; 0x2c18 <__divsf3+0x18>
    2c08:	48 d1       	rcall	.+656    	; 0x2e9a <__fp_pscA>
    2c0a:	30 f0       	brcs	.+12     	; 0x2c18 <__divsf3+0x18>
    2c0c:	21 f4       	brne	.+8      	; 0x2c16 <__divsf3+0x16>
    2c0e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c10:	19 f0       	breq	.+6      	; 0x2c18 <__divsf3+0x18>
    2c12:	2a c1       	rjmp	.+596    	; 0x2e68 <__fp_inf>
    2c14:	51 11       	cpse	r21, r1
    2c16:	83 c1       	rjmp	.+774    	; 0x2f1e <__fp_szero>
    2c18:	2d c1       	rjmp	.+602    	; 0x2e74 <__fp_nan>

00002c1a <__divsf3x>:
    2c1a:	5e d1       	rcall	.+700    	; 0x2ed8 <__fp_split3>
    2c1c:	98 f3       	brcs	.-26     	; 0x2c04 <__divsf3+0x4>

00002c1e <__divsf3_pse>:
    2c1e:	99 23       	and	r25, r25
    2c20:	c9 f3       	breq	.-14     	; 0x2c14 <__divsf3+0x14>
    2c22:	55 23       	and	r21, r21
    2c24:	b1 f3       	breq	.-20     	; 0x2c12 <__divsf3+0x12>
    2c26:	95 1b       	sub	r25, r21
    2c28:	55 0b       	sbc	r21, r21
    2c2a:	bb 27       	eor	r27, r27
    2c2c:	aa 27       	eor	r26, r26
    2c2e:	62 17       	cp	r22, r18
    2c30:	73 07       	cpc	r23, r19
    2c32:	84 07       	cpc	r24, r20
    2c34:	38 f0       	brcs	.+14     	; 0x2c44 <__divsf3_pse+0x26>
    2c36:	9f 5f       	subi	r25, 0xFF	; 255
    2c38:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3a:	22 0f       	add	r18, r18
    2c3c:	33 1f       	adc	r19, r19
    2c3e:	44 1f       	adc	r20, r20
    2c40:	aa 1f       	adc	r26, r26
    2c42:	a9 f3       	breq	.-22     	; 0x2c2e <__divsf3_pse+0x10>
    2c44:	33 d0       	rcall	.+102    	; 0x2cac <__divsf3_pse+0x8e>
    2c46:	0e 2e       	mov	r0, r30
    2c48:	3a f0       	brmi	.+14     	; 0x2c58 <__divsf3_pse+0x3a>
    2c4a:	e0 e8       	ldi	r30, 0x80	; 128
    2c4c:	30 d0       	rcall	.+96     	; 0x2cae <__divsf3_pse+0x90>
    2c4e:	91 50       	subi	r25, 0x01	; 1
    2c50:	50 40       	sbci	r21, 0x00	; 0
    2c52:	e6 95       	lsr	r30
    2c54:	00 1c       	adc	r0, r0
    2c56:	ca f7       	brpl	.-14     	; 0x2c4a <__divsf3_pse+0x2c>
    2c58:	29 d0       	rcall	.+82     	; 0x2cac <__divsf3_pse+0x8e>
    2c5a:	fe 2f       	mov	r31, r30
    2c5c:	27 d0       	rcall	.+78     	; 0x2cac <__divsf3_pse+0x8e>
    2c5e:	66 0f       	add	r22, r22
    2c60:	77 1f       	adc	r23, r23
    2c62:	88 1f       	adc	r24, r24
    2c64:	bb 1f       	adc	r27, r27
    2c66:	26 17       	cp	r18, r22
    2c68:	37 07       	cpc	r19, r23
    2c6a:	48 07       	cpc	r20, r24
    2c6c:	ab 07       	cpc	r26, r27
    2c6e:	b0 e8       	ldi	r27, 0x80	; 128
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <__divsf3_pse+0x56>
    2c72:	bb 0b       	sbc	r27, r27
    2c74:	80 2d       	mov	r24, r0
    2c76:	bf 01       	movw	r22, r30
    2c78:	ff 27       	eor	r31, r31
    2c7a:	93 58       	subi	r25, 0x83	; 131
    2c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7e:	2a f0       	brmi	.+10     	; 0x2c8a <__divsf3_pse+0x6c>
    2c80:	9e 3f       	cpi	r25, 0xFE	; 254
    2c82:	51 05       	cpc	r21, r1
    2c84:	68 f0       	brcs	.+26     	; 0x2ca0 <__divsf3_pse+0x82>
    2c86:	f0 c0       	rjmp	.+480    	; 0x2e68 <__fp_inf>
    2c88:	4a c1       	rjmp	.+660    	; 0x2f1e <__fp_szero>
    2c8a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c8c:	ec f3       	brlt	.-6      	; 0x2c88 <__divsf3_pse+0x6a>
    2c8e:	98 3e       	cpi	r25, 0xE8	; 232
    2c90:	dc f3       	brlt	.-10     	; 0x2c88 <__divsf3_pse+0x6a>
    2c92:	86 95       	lsr	r24
    2c94:	77 95       	ror	r23
    2c96:	67 95       	ror	r22
    2c98:	b7 95       	ror	r27
    2c9a:	f7 95       	ror	r31
    2c9c:	9f 5f       	subi	r25, 0xFF	; 255
    2c9e:	c9 f7       	brne	.-14     	; 0x2c92 <__divsf3_pse+0x74>
    2ca0:	88 0f       	add	r24, r24
    2ca2:	91 1d       	adc	r25, r1
    2ca4:	96 95       	lsr	r25
    2ca6:	87 95       	ror	r24
    2ca8:	97 f9       	bld	r25, 7
    2caa:	08 95       	ret
    2cac:	e1 e0       	ldi	r30, 0x01	; 1
    2cae:	66 0f       	add	r22, r22
    2cb0:	77 1f       	adc	r23, r23
    2cb2:	88 1f       	adc	r24, r24
    2cb4:	bb 1f       	adc	r27, r27
    2cb6:	62 17       	cp	r22, r18
    2cb8:	73 07       	cpc	r23, r19
    2cba:	84 07       	cpc	r24, r20
    2cbc:	ba 07       	cpc	r27, r26
    2cbe:	20 f0       	brcs	.+8      	; 0x2cc8 <__divsf3_pse+0xaa>
    2cc0:	62 1b       	sub	r22, r18
    2cc2:	73 0b       	sbc	r23, r19
    2cc4:	84 0b       	sbc	r24, r20
    2cc6:	ba 0b       	sbc	r27, r26
    2cc8:	ee 1f       	adc	r30, r30
    2cca:	88 f7       	brcc	.-30     	; 0x2cae <__divsf3_pse+0x90>
    2ccc:	e0 95       	com	r30
    2cce:	08 95       	ret

00002cd0 <__fixsfdi>:
    2cd0:	be e3       	ldi	r27, 0x3E	; 62
    2cd2:	04 d0       	rcall	.+8      	; 0x2cdc <__fixunssfdi+0x2>
    2cd4:	08 f4       	brcc	.+2      	; 0x2cd8 <__fixsfdi+0x8>
    2cd6:	90 e8       	ldi	r25, 0x80	; 128
    2cd8:	08 95       	ret

00002cda <__fixunssfdi>:
    2cda:	bf e3       	ldi	r27, 0x3F	; 63
    2cdc:	22 27       	eor	r18, r18
    2cde:	33 27       	eor	r19, r19
    2ce0:	a9 01       	movw	r20, r18
    2ce2:	02 d1       	rcall	.+516    	; 0x2ee8 <__fp_splitA>
    2ce4:	58 f1       	brcs	.+86     	; 0x2d3c <__fixunssfdi+0x62>
    2ce6:	9f 57       	subi	r25, 0x7F	; 127
    2ce8:	40 f1       	brcs	.+80     	; 0x2d3a <__fixunssfdi+0x60>
    2cea:	b9 17       	cp	r27, r25
    2cec:	38 f1       	brcs	.+78     	; 0x2d3c <__fixunssfdi+0x62>
    2cee:	bf e3       	ldi	r27, 0x3F	; 63
    2cf0:	b9 1b       	sub	r27, r25
    2cf2:	99 27       	eor	r25, r25
    2cf4:	b8 50       	subi	r27, 0x08	; 8
    2cf6:	3a f4       	brpl	.+14     	; 0x2d06 <__fixunssfdi+0x2c>
    2cf8:	66 0f       	add	r22, r22
    2cfa:	77 1f       	adc	r23, r23
    2cfc:	88 1f       	adc	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	b3 95       	inc	r27
    2d02:	d2 f3       	brmi	.-12     	; 0x2cf8 <__fixunssfdi+0x1e>
    2d04:	16 c0       	rjmp	.+44     	; 0x2d32 <__fixunssfdi+0x58>
    2d06:	b8 50       	subi	r27, 0x08	; 8
    2d08:	4a f0       	brmi	.+18     	; 0x2d1c <__fixunssfdi+0x42>
    2d0a:	23 2f       	mov	r18, r19
    2d0c:	34 2f       	mov	r19, r20
    2d0e:	45 2f       	mov	r20, r21
    2d10:	56 2f       	mov	r21, r22
    2d12:	67 2f       	mov	r22, r23
    2d14:	78 2f       	mov	r23, r24
    2d16:	88 27       	eor	r24, r24
    2d18:	b8 50       	subi	r27, 0x08	; 8
    2d1a:	ba f7       	brpl	.-18     	; 0x2d0a <__fixunssfdi+0x30>
    2d1c:	b8 5f       	subi	r27, 0xF8	; 248
    2d1e:	49 f0       	breq	.+18     	; 0x2d32 <__fixunssfdi+0x58>
    2d20:	86 95       	lsr	r24
    2d22:	77 95       	ror	r23
    2d24:	67 95       	ror	r22
    2d26:	57 95       	ror	r21
    2d28:	47 95       	ror	r20
    2d2a:	37 95       	ror	r19
    2d2c:	27 95       	ror	r18
    2d2e:	ba 95       	dec	r27
    2d30:	b9 f7       	brne	.-18     	; 0x2d20 <__fixunssfdi+0x46>
    2d32:	0e f4       	brtc	.+2      	; 0x2d36 <__fixunssfdi+0x5c>
    2d34:	a2 d0       	rcall	.+324    	; 0x2e7a <__fp_negdi>
    2d36:	88 94       	clc
    2d38:	08 95       	ret
    2d3a:	88 94       	clc
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	cb 01       	movw	r24, r22
    2d42:	08 95       	ret

00002d44 <__fixsfsi>:
    2d44:	04 d0       	rcall	.+8      	; 0x2d4e <__fixunssfsi>
    2d46:	68 94       	set
    2d48:	b1 11       	cpse	r27, r1
    2d4a:	e9 c0       	rjmp	.+466    	; 0x2f1e <__fp_szero>
    2d4c:	08 95       	ret

00002d4e <__fixunssfsi>:
    2d4e:	cc d0       	rcall	.+408    	; 0x2ee8 <__fp_splitA>
    2d50:	88 f0       	brcs	.+34     	; 0x2d74 <__fixunssfsi+0x26>
    2d52:	9f 57       	subi	r25, 0x7F	; 127
    2d54:	90 f0       	brcs	.+36     	; 0x2d7a <__fixunssfsi+0x2c>
    2d56:	b9 2f       	mov	r27, r25
    2d58:	99 27       	eor	r25, r25
    2d5a:	b7 51       	subi	r27, 0x17	; 23
    2d5c:	a0 f0       	brcs	.+40     	; 0x2d86 <__fixunssfsi+0x38>
    2d5e:	d1 f0       	breq	.+52     	; 0x2d94 <__fixunssfsi+0x46>
    2d60:	66 0f       	add	r22, r22
    2d62:	77 1f       	adc	r23, r23
    2d64:	88 1f       	adc	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	1a f0       	brmi	.+6      	; 0x2d70 <__fixunssfsi+0x22>
    2d6a:	ba 95       	dec	r27
    2d6c:	c9 f7       	brne	.-14     	; 0x2d60 <__fixunssfsi+0x12>
    2d6e:	12 c0       	rjmp	.+36     	; 0x2d94 <__fixunssfsi+0x46>
    2d70:	b1 30       	cpi	r27, 0x01	; 1
    2d72:	81 f0       	breq	.+32     	; 0x2d94 <__fixunssfsi+0x46>
    2d74:	d3 d0       	rcall	.+422    	; 0x2f1c <__fp_zero>
    2d76:	b1 e0       	ldi	r27, 0x01	; 1
    2d78:	08 95       	ret
    2d7a:	d0 c0       	rjmp	.+416    	; 0x2f1c <__fp_zero>
    2d7c:	67 2f       	mov	r22, r23
    2d7e:	78 2f       	mov	r23, r24
    2d80:	88 27       	eor	r24, r24
    2d82:	b8 5f       	subi	r27, 0xF8	; 248
    2d84:	39 f0       	breq	.+14     	; 0x2d94 <__fixunssfsi+0x46>
    2d86:	b9 3f       	cpi	r27, 0xF9	; 249
    2d88:	cc f3       	brlt	.-14     	; 0x2d7c <__fixunssfsi+0x2e>
    2d8a:	86 95       	lsr	r24
    2d8c:	77 95       	ror	r23
    2d8e:	67 95       	ror	r22
    2d90:	b3 95       	inc	r27
    2d92:	d9 f7       	brne	.-10     	; 0x2d8a <__fixunssfsi+0x3c>
    2d94:	3e f4       	brtc	.+14     	; 0x2da4 <__fixunssfsi+0x56>
    2d96:	90 95       	com	r25
    2d98:	80 95       	com	r24
    2d9a:	70 95       	com	r23
    2d9c:	61 95       	neg	r22
    2d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2da0:	8f 4f       	sbci	r24, 0xFF	; 255
    2da2:	9f 4f       	sbci	r25, 0xFF	; 255
    2da4:	08 95       	ret

00002da6 <__floatunsisf>:
    2da6:	e8 94       	clt
    2da8:	09 c0       	rjmp	.+18     	; 0x2dbc <__floatsisf+0x12>

00002daa <__floatsisf>:
    2daa:	97 fb       	bst	r25, 7
    2dac:	3e f4       	brtc	.+14     	; 0x2dbc <__floatsisf+0x12>
    2dae:	90 95       	com	r25
    2db0:	80 95       	com	r24
    2db2:	70 95       	com	r23
    2db4:	61 95       	neg	r22
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dba:	9f 4f       	sbci	r25, 0xFF	; 255
    2dbc:	99 23       	and	r25, r25
    2dbe:	a9 f0       	breq	.+42     	; 0x2dea <__floatsisf+0x40>
    2dc0:	f9 2f       	mov	r31, r25
    2dc2:	96 e9       	ldi	r25, 0x96	; 150
    2dc4:	bb 27       	eor	r27, r27
    2dc6:	93 95       	inc	r25
    2dc8:	f6 95       	lsr	r31
    2dca:	87 95       	ror	r24
    2dcc:	77 95       	ror	r23
    2dce:	67 95       	ror	r22
    2dd0:	b7 95       	ror	r27
    2dd2:	f1 11       	cpse	r31, r1
    2dd4:	f8 cf       	rjmp	.-16     	; 0x2dc6 <__floatsisf+0x1c>
    2dd6:	fa f4       	brpl	.+62     	; 0x2e16 <__floatsisf+0x6c>
    2dd8:	bb 0f       	add	r27, r27
    2dda:	11 f4       	brne	.+4      	; 0x2de0 <__floatsisf+0x36>
    2ddc:	60 ff       	sbrs	r22, 0
    2dde:	1b c0       	rjmp	.+54     	; 0x2e16 <__floatsisf+0x6c>
    2de0:	6f 5f       	subi	r22, 0xFF	; 255
    2de2:	7f 4f       	sbci	r23, 0xFF	; 255
    2de4:	8f 4f       	sbci	r24, 0xFF	; 255
    2de6:	9f 4f       	sbci	r25, 0xFF	; 255
    2de8:	16 c0       	rjmp	.+44     	; 0x2e16 <__floatsisf+0x6c>
    2dea:	88 23       	and	r24, r24
    2dec:	11 f0       	breq	.+4      	; 0x2df2 <__floatsisf+0x48>
    2dee:	96 e9       	ldi	r25, 0x96	; 150
    2df0:	11 c0       	rjmp	.+34     	; 0x2e14 <__floatsisf+0x6a>
    2df2:	77 23       	and	r23, r23
    2df4:	21 f0       	breq	.+8      	; 0x2dfe <__floatsisf+0x54>
    2df6:	9e e8       	ldi	r25, 0x8E	; 142
    2df8:	87 2f       	mov	r24, r23
    2dfa:	76 2f       	mov	r23, r22
    2dfc:	05 c0       	rjmp	.+10     	; 0x2e08 <__floatsisf+0x5e>
    2dfe:	66 23       	and	r22, r22
    2e00:	71 f0       	breq	.+28     	; 0x2e1e <__floatsisf+0x74>
    2e02:	96 e8       	ldi	r25, 0x86	; 134
    2e04:	86 2f       	mov	r24, r22
    2e06:	70 e0       	ldi	r23, 0x00	; 0
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	2a f0       	brmi	.+10     	; 0x2e16 <__floatsisf+0x6c>
    2e0c:	9a 95       	dec	r25
    2e0e:	66 0f       	add	r22, r22
    2e10:	77 1f       	adc	r23, r23
    2e12:	88 1f       	adc	r24, r24
    2e14:	da f7       	brpl	.-10     	; 0x2e0c <__floatsisf+0x62>
    2e16:	88 0f       	add	r24, r24
    2e18:	96 95       	lsr	r25
    2e1a:	87 95       	ror	r24
    2e1c:	97 f9       	bld	r25, 7
    2e1e:	08 95       	ret

00002e20 <__fp_cmp>:
    2e20:	99 0f       	add	r25, r25
    2e22:	00 08       	sbc	r0, r0
    2e24:	55 0f       	add	r21, r21
    2e26:	aa 0b       	sbc	r26, r26
    2e28:	e0 e8       	ldi	r30, 0x80	; 128
    2e2a:	fe ef       	ldi	r31, 0xFE	; 254
    2e2c:	16 16       	cp	r1, r22
    2e2e:	17 06       	cpc	r1, r23
    2e30:	e8 07       	cpc	r30, r24
    2e32:	f9 07       	cpc	r31, r25
    2e34:	c0 f0       	brcs	.+48     	; 0x2e66 <__fp_cmp+0x46>
    2e36:	12 16       	cp	r1, r18
    2e38:	13 06       	cpc	r1, r19
    2e3a:	e4 07       	cpc	r30, r20
    2e3c:	f5 07       	cpc	r31, r21
    2e3e:	98 f0       	brcs	.+38     	; 0x2e66 <__fp_cmp+0x46>
    2e40:	62 1b       	sub	r22, r18
    2e42:	73 0b       	sbc	r23, r19
    2e44:	84 0b       	sbc	r24, r20
    2e46:	95 0b       	sbc	r25, r21
    2e48:	39 f4       	brne	.+14     	; 0x2e58 <__fp_cmp+0x38>
    2e4a:	0a 26       	eor	r0, r26
    2e4c:	61 f0       	breq	.+24     	; 0x2e66 <__fp_cmp+0x46>
    2e4e:	23 2b       	or	r18, r19
    2e50:	24 2b       	or	r18, r20
    2e52:	25 2b       	or	r18, r21
    2e54:	21 f4       	brne	.+8      	; 0x2e5e <__fp_cmp+0x3e>
    2e56:	08 95       	ret
    2e58:	0a 26       	eor	r0, r26
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <__fp_cmp+0x3e>
    2e5c:	a1 40       	sbci	r26, 0x01	; 1
    2e5e:	a6 95       	lsr	r26
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	81 1d       	adc	r24, r1
    2e64:	81 1d       	adc	r24, r1
    2e66:	08 95       	ret

00002e68 <__fp_inf>:
    2e68:	97 f9       	bld	r25, 7
    2e6a:	9f 67       	ori	r25, 0x7F	; 127
    2e6c:	80 e8       	ldi	r24, 0x80	; 128
    2e6e:	70 e0       	ldi	r23, 0x00	; 0
    2e70:	60 e0       	ldi	r22, 0x00	; 0
    2e72:	08 95       	ret

00002e74 <__fp_nan>:
    2e74:	9f ef       	ldi	r25, 0xFF	; 255
    2e76:	80 ec       	ldi	r24, 0xC0	; 192
    2e78:	08 95       	ret

00002e7a <__fp_negdi>:
    2e7a:	90 95       	com	r25
    2e7c:	80 95       	com	r24
    2e7e:	70 95       	com	r23
    2e80:	60 95       	com	r22
    2e82:	50 95       	com	r21
    2e84:	40 95       	com	r20
    2e86:	30 95       	com	r19
    2e88:	21 95       	neg	r18
    2e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e90:	6f 4f       	sbci	r22, 0xFF	; 255
    2e92:	7f 4f       	sbci	r23, 0xFF	; 255
    2e94:	8f 4f       	sbci	r24, 0xFF	; 255
    2e96:	9f 4f       	sbci	r25, 0xFF	; 255
    2e98:	08 95       	ret

00002e9a <__fp_pscA>:
    2e9a:	00 24       	eor	r0, r0
    2e9c:	0a 94       	dec	r0
    2e9e:	16 16       	cp	r1, r22
    2ea0:	17 06       	cpc	r1, r23
    2ea2:	18 06       	cpc	r1, r24
    2ea4:	09 06       	cpc	r0, r25
    2ea6:	08 95       	ret

00002ea8 <__fp_pscB>:
    2ea8:	00 24       	eor	r0, r0
    2eaa:	0a 94       	dec	r0
    2eac:	12 16       	cp	r1, r18
    2eae:	13 06       	cpc	r1, r19
    2eb0:	14 06       	cpc	r1, r20
    2eb2:	05 06       	cpc	r0, r21
    2eb4:	08 95       	ret

00002eb6 <__fp_round>:
    2eb6:	09 2e       	mov	r0, r25
    2eb8:	03 94       	inc	r0
    2eba:	00 0c       	add	r0, r0
    2ebc:	11 f4       	brne	.+4      	; 0x2ec2 <__fp_round+0xc>
    2ebe:	88 23       	and	r24, r24
    2ec0:	52 f0       	brmi	.+20     	; 0x2ed6 <__fp_round+0x20>
    2ec2:	bb 0f       	add	r27, r27
    2ec4:	40 f4       	brcc	.+16     	; 0x2ed6 <__fp_round+0x20>
    2ec6:	bf 2b       	or	r27, r31
    2ec8:	11 f4       	brne	.+4      	; 0x2ece <__fp_round+0x18>
    2eca:	60 ff       	sbrs	r22, 0
    2ecc:	04 c0       	rjmp	.+8      	; 0x2ed6 <__fp_round+0x20>
    2ece:	6f 5f       	subi	r22, 0xFF	; 255
    2ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed6:	08 95       	ret

00002ed8 <__fp_split3>:
    2ed8:	57 fd       	sbrc	r21, 7
    2eda:	90 58       	subi	r25, 0x80	; 128
    2edc:	44 0f       	add	r20, r20
    2ede:	55 1f       	adc	r21, r21
    2ee0:	59 f0       	breq	.+22     	; 0x2ef8 <__fp_splitA+0x10>
    2ee2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ee4:	71 f0       	breq	.+28     	; 0x2f02 <__fp_splitA+0x1a>
    2ee6:	47 95       	ror	r20

00002ee8 <__fp_splitA>:
    2ee8:	88 0f       	add	r24, r24
    2eea:	97 fb       	bst	r25, 7
    2eec:	99 1f       	adc	r25, r25
    2eee:	61 f0       	breq	.+24     	; 0x2f08 <__fp_splitA+0x20>
    2ef0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ef2:	79 f0       	breq	.+30     	; 0x2f12 <__fp_splitA+0x2a>
    2ef4:	87 95       	ror	r24
    2ef6:	08 95       	ret
    2ef8:	12 16       	cp	r1, r18
    2efa:	13 06       	cpc	r1, r19
    2efc:	14 06       	cpc	r1, r20
    2efe:	55 1f       	adc	r21, r21
    2f00:	f2 cf       	rjmp	.-28     	; 0x2ee6 <__fp_split3+0xe>
    2f02:	46 95       	lsr	r20
    2f04:	f1 df       	rcall	.-30     	; 0x2ee8 <__fp_splitA>
    2f06:	08 c0       	rjmp	.+16     	; 0x2f18 <__fp_splitA+0x30>
    2f08:	16 16       	cp	r1, r22
    2f0a:	17 06       	cpc	r1, r23
    2f0c:	18 06       	cpc	r1, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	f1 cf       	rjmp	.-30     	; 0x2ef4 <__fp_splitA+0xc>
    2f12:	86 95       	lsr	r24
    2f14:	71 05       	cpc	r23, r1
    2f16:	61 05       	cpc	r22, r1
    2f18:	08 94       	sec
    2f1a:	08 95       	ret

00002f1c <__fp_zero>:
    2f1c:	e8 94       	clt

00002f1e <__fp_szero>:
    2f1e:	bb 27       	eor	r27, r27
    2f20:	66 27       	eor	r22, r22
    2f22:	77 27       	eor	r23, r23
    2f24:	cb 01       	movw	r24, r22
    2f26:	97 f9       	bld	r25, 7
    2f28:	08 95       	ret

00002f2a <__gesf2>:
    2f2a:	7a df       	rcall	.-268    	; 0x2e20 <__fp_cmp>
    2f2c:	08 f4       	brcc	.+2      	; 0x2f30 <__gesf2+0x6>
    2f2e:	8f ef       	ldi	r24, 0xFF	; 255
    2f30:	08 95       	ret

00002f32 <__mulsf3>:
    2f32:	0b d0       	rcall	.+22     	; 0x2f4a <__mulsf3x>
    2f34:	c0 cf       	rjmp	.-128    	; 0x2eb6 <__fp_round>
    2f36:	b1 df       	rcall	.-158    	; 0x2e9a <__fp_pscA>
    2f38:	28 f0       	brcs	.+10     	; 0x2f44 <__mulsf3+0x12>
    2f3a:	b6 df       	rcall	.-148    	; 0x2ea8 <__fp_pscB>
    2f3c:	18 f0       	brcs	.+6      	; 0x2f44 <__mulsf3+0x12>
    2f3e:	95 23       	and	r25, r21
    2f40:	09 f0       	breq	.+2      	; 0x2f44 <__mulsf3+0x12>
    2f42:	92 cf       	rjmp	.-220    	; 0x2e68 <__fp_inf>
    2f44:	97 cf       	rjmp	.-210    	; 0x2e74 <__fp_nan>
    2f46:	11 24       	eor	r1, r1
    2f48:	ea cf       	rjmp	.-44     	; 0x2f1e <__fp_szero>

00002f4a <__mulsf3x>:
    2f4a:	c6 df       	rcall	.-116    	; 0x2ed8 <__fp_split3>
    2f4c:	a0 f3       	brcs	.-24     	; 0x2f36 <__mulsf3+0x4>

00002f4e <__mulsf3_pse>:
    2f4e:	95 9f       	mul	r25, r21
    2f50:	d1 f3       	breq	.-12     	; 0x2f46 <__mulsf3+0x14>
    2f52:	95 0f       	add	r25, r21
    2f54:	50 e0       	ldi	r21, 0x00	; 0
    2f56:	55 1f       	adc	r21, r21
    2f58:	62 9f       	mul	r22, r18
    2f5a:	f0 01       	movw	r30, r0
    2f5c:	72 9f       	mul	r23, r18
    2f5e:	bb 27       	eor	r27, r27
    2f60:	f0 0d       	add	r31, r0
    2f62:	b1 1d       	adc	r27, r1
    2f64:	63 9f       	mul	r22, r19
    2f66:	aa 27       	eor	r26, r26
    2f68:	f0 0d       	add	r31, r0
    2f6a:	b1 1d       	adc	r27, r1
    2f6c:	aa 1f       	adc	r26, r26
    2f6e:	64 9f       	mul	r22, r20
    2f70:	66 27       	eor	r22, r22
    2f72:	b0 0d       	add	r27, r0
    2f74:	a1 1d       	adc	r26, r1
    2f76:	66 1f       	adc	r22, r22
    2f78:	82 9f       	mul	r24, r18
    2f7a:	22 27       	eor	r18, r18
    2f7c:	b0 0d       	add	r27, r0
    2f7e:	a1 1d       	adc	r26, r1
    2f80:	62 1f       	adc	r22, r18
    2f82:	73 9f       	mul	r23, r19
    2f84:	b0 0d       	add	r27, r0
    2f86:	a1 1d       	adc	r26, r1
    2f88:	62 1f       	adc	r22, r18
    2f8a:	83 9f       	mul	r24, r19
    2f8c:	a0 0d       	add	r26, r0
    2f8e:	61 1d       	adc	r22, r1
    2f90:	22 1f       	adc	r18, r18
    2f92:	74 9f       	mul	r23, r20
    2f94:	33 27       	eor	r19, r19
    2f96:	a0 0d       	add	r26, r0
    2f98:	61 1d       	adc	r22, r1
    2f9a:	23 1f       	adc	r18, r19
    2f9c:	84 9f       	mul	r24, r20
    2f9e:	60 0d       	add	r22, r0
    2fa0:	21 1d       	adc	r18, r1
    2fa2:	82 2f       	mov	r24, r18
    2fa4:	76 2f       	mov	r23, r22
    2fa6:	6a 2f       	mov	r22, r26
    2fa8:	11 24       	eor	r1, r1
    2faa:	9f 57       	subi	r25, 0x7F	; 127
    2fac:	50 40       	sbci	r21, 0x00	; 0
    2fae:	8a f0       	brmi	.+34     	; 0x2fd2 <__mulsf3_pse+0x84>
    2fb0:	e1 f0       	breq	.+56     	; 0x2fea <__mulsf3_pse+0x9c>
    2fb2:	88 23       	and	r24, r24
    2fb4:	4a f0       	brmi	.+18     	; 0x2fc8 <__mulsf3_pse+0x7a>
    2fb6:	ee 0f       	add	r30, r30
    2fb8:	ff 1f       	adc	r31, r31
    2fba:	bb 1f       	adc	r27, r27
    2fbc:	66 1f       	adc	r22, r22
    2fbe:	77 1f       	adc	r23, r23
    2fc0:	88 1f       	adc	r24, r24
    2fc2:	91 50       	subi	r25, 0x01	; 1
    2fc4:	50 40       	sbci	r21, 0x00	; 0
    2fc6:	a9 f7       	brne	.-22     	; 0x2fb2 <__mulsf3_pse+0x64>
    2fc8:	9e 3f       	cpi	r25, 0xFE	; 254
    2fca:	51 05       	cpc	r21, r1
    2fcc:	70 f0       	brcs	.+28     	; 0x2fea <__mulsf3_pse+0x9c>
    2fce:	4c cf       	rjmp	.-360    	; 0x2e68 <__fp_inf>
    2fd0:	a6 cf       	rjmp	.-180    	; 0x2f1e <__fp_szero>
    2fd2:	5f 3f       	cpi	r21, 0xFF	; 255
    2fd4:	ec f3       	brlt	.-6      	; 0x2fd0 <__mulsf3_pse+0x82>
    2fd6:	98 3e       	cpi	r25, 0xE8	; 232
    2fd8:	dc f3       	brlt	.-10     	; 0x2fd0 <__mulsf3_pse+0x82>
    2fda:	86 95       	lsr	r24
    2fdc:	77 95       	ror	r23
    2fde:	67 95       	ror	r22
    2fe0:	b7 95       	ror	r27
    2fe2:	f7 95       	ror	r31
    2fe4:	e7 95       	ror	r30
    2fe6:	9f 5f       	subi	r25, 0xFF	; 255
    2fe8:	c1 f7       	brne	.-16     	; 0x2fda <__mulsf3_pse+0x8c>
    2fea:	fe 2b       	or	r31, r30
    2fec:	88 0f       	add	r24, r24
    2fee:	91 1d       	adc	r25, r1
    2ff0:	96 95       	lsr	r25
    2ff2:	87 95       	ror	r24
    2ff4:	97 f9       	bld	r25, 7
    2ff6:	08 95       	ret

00002ff8 <pow>:
    2ff8:	fa 01       	movw	r30, r20
    2ffa:	ee 0f       	add	r30, r30
    2ffc:	ff 1f       	adc	r31, r31
    2ffe:	30 96       	adiw	r30, 0x00	; 0
    3000:	21 05       	cpc	r18, r1
    3002:	31 05       	cpc	r19, r1
    3004:	99 f1       	breq	.+102    	; 0x306c <pow+0x74>
    3006:	61 15       	cp	r22, r1
    3008:	71 05       	cpc	r23, r1
    300a:	61 f4       	brne	.+24     	; 0x3024 <pow+0x2c>
    300c:	80 38       	cpi	r24, 0x80	; 128
    300e:	bf e3       	ldi	r27, 0x3F	; 63
    3010:	9b 07       	cpc	r25, r27
    3012:	49 f1       	breq	.+82     	; 0x3066 <pow+0x6e>
    3014:	68 94       	set
    3016:	90 38       	cpi	r25, 0x80	; 128
    3018:	81 05       	cpc	r24, r1
    301a:	61 f0       	breq	.+24     	; 0x3034 <pow+0x3c>
    301c:	80 38       	cpi	r24, 0x80	; 128
    301e:	bf ef       	ldi	r27, 0xFF	; 255
    3020:	9b 07       	cpc	r25, r27
    3022:	41 f0       	breq	.+16     	; 0x3034 <pow+0x3c>
    3024:	99 23       	and	r25, r25
    3026:	42 f5       	brpl	.+80     	; 0x3078 <pow+0x80>
    3028:	ff 3f       	cpi	r31, 0xFF	; 255
    302a:	e1 05       	cpc	r30, r1
    302c:	31 05       	cpc	r19, r1
    302e:	21 05       	cpc	r18, r1
    3030:	11 f1       	breq	.+68     	; 0x3076 <pow+0x7e>
    3032:	e8 94       	clt
    3034:	08 94       	sec
    3036:	e7 95       	ror	r30
    3038:	d9 01       	movw	r26, r18
    303a:	aa 23       	and	r26, r26
    303c:	29 f4       	brne	.+10     	; 0x3048 <pow+0x50>
    303e:	ab 2f       	mov	r26, r27
    3040:	be 2f       	mov	r27, r30
    3042:	f8 5f       	subi	r31, 0xF8	; 248
    3044:	d0 f3       	brcs	.-12     	; 0x303a <pow+0x42>
    3046:	10 c0       	rjmp	.+32     	; 0x3068 <pow+0x70>
    3048:	ff 5f       	subi	r31, 0xFF	; 255
    304a:	70 f4       	brcc	.+28     	; 0x3068 <pow+0x70>
    304c:	a6 95       	lsr	r26
    304e:	e0 f7       	brcc	.-8      	; 0x3048 <pow+0x50>
    3050:	f7 39       	cpi	r31, 0x97	; 151
    3052:	50 f0       	brcs	.+20     	; 0x3068 <pow+0x70>
    3054:	19 f0       	breq	.+6      	; 0x305c <pow+0x64>
    3056:	ff 3a       	cpi	r31, 0xAF	; 175
    3058:	38 f4       	brcc	.+14     	; 0x3068 <pow+0x70>
    305a:	9f 77       	andi	r25, 0x7F	; 127
    305c:	9f 93       	push	r25
    305e:	0c d0       	rcall	.+24     	; 0x3078 <pow+0x80>
    3060:	0f 90       	pop	r0
    3062:	07 fc       	sbrc	r0, 7
    3064:	90 58       	subi	r25, 0x80	; 128
    3066:	08 95       	ret
    3068:	3e f0       	brts	.+14     	; 0x3078 <pow+0x80>
    306a:	04 cf       	rjmp	.-504    	; 0x2e74 <__fp_nan>
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	70 e0       	ldi	r23, 0x00	; 0
    3070:	80 e8       	ldi	r24, 0x80	; 128
    3072:	9f e3       	ldi	r25, 0x3F	; 63
    3074:	08 95       	ret
    3076:	4f e7       	ldi	r20, 0x7F	; 127
    3078:	9f 77       	andi	r25, 0x7F	; 127
    307a:	5f 93       	push	r21
    307c:	4f 93       	push	r20
    307e:	3f 93       	push	r19
    3080:	2f 93       	push	r18
    3082:	9e d0       	rcall	.+316    	; 0x31c0 <log>
    3084:	2f 91       	pop	r18
    3086:	3f 91       	pop	r19
    3088:	4f 91       	pop	r20
    308a:	5f 91       	pop	r21
    308c:	52 df       	rcall	.-348    	; 0x2f32 <__mulsf3>
    308e:	05 c0       	rjmp	.+10     	; 0x309a <exp>
    3090:	19 f4       	brne	.+6      	; 0x3098 <pow+0xa0>
    3092:	0e f0       	brts	.+2      	; 0x3096 <pow+0x9e>
    3094:	e9 ce       	rjmp	.-558    	; 0x2e68 <__fp_inf>
    3096:	42 cf       	rjmp	.-380    	; 0x2f1c <__fp_zero>
    3098:	ed ce       	rjmp	.-550    	; 0x2e74 <__fp_nan>

0000309a <exp>:
    309a:	26 df       	rcall	.-436    	; 0x2ee8 <__fp_splitA>
    309c:	c8 f3       	brcs	.-14     	; 0x3090 <pow+0x98>
    309e:	96 38       	cpi	r25, 0x86	; 134
    30a0:	c0 f7       	brcc	.-16     	; 0x3092 <pow+0x9a>
    30a2:	07 f8       	bld	r0, 7
    30a4:	0f 92       	push	r0
    30a6:	e8 94       	clt
    30a8:	2b e3       	ldi	r18, 0x3B	; 59
    30aa:	3a ea       	ldi	r19, 0xAA	; 170
    30ac:	48 eb       	ldi	r20, 0xB8	; 184
    30ae:	5f e7       	ldi	r21, 0x7F	; 127
    30b0:	4e df       	rcall	.-356    	; 0x2f4e <__mulsf3_pse>
    30b2:	0f 92       	push	r0
    30b4:	0f 92       	push	r0
    30b6:	0f 92       	push	r0
    30b8:	4d b7       	in	r20, 0x3d	; 61
    30ba:	5e b7       	in	r21, 0x3e	; 62
    30bc:	0f 92       	push	r0
    30be:	c0 d0       	rcall	.+384    	; 0x3240 <modf>
    30c0:	ec ef       	ldi	r30, 0xFC	; 252
    30c2:	f1 e0       	ldi	r31, 0x01	; 1
    30c4:	16 d0       	rcall	.+44     	; 0x30f2 <__fp_powser>
    30c6:	4f 91       	pop	r20
    30c8:	5f 91       	pop	r21
    30ca:	ef 91       	pop	r30
    30cc:	ff 91       	pop	r31
    30ce:	e5 95       	asr	r30
    30d0:	ee 1f       	adc	r30, r30
    30d2:	ff 1f       	adc	r31, r31
    30d4:	49 f0       	breq	.+18     	; 0x30e8 <exp+0x4e>
    30d6:	fe 57       	subi	r31, 0x7E	; 126
    30d8:	e0 68       	ori	r30, 0x80	; 128
    30da:	44 27       	eor	r20, r20
    30dc:	ee 0f       	add	r30, r30
    30de:	44 1f       	adc	r20, r20
    30e0:	fa 95       	dec	r31
    30e2:	e1 f7       	brne	.-8      	; 0x30dc <exp+0x42>
    30e4:	41 95       	neg	r20
    30e6:	55 0b       	sbc	r21, r21
    30e8:	32 d0       	rcall	.+100    	; 0x314e <ldexp>
    30ea:	0f 90       	pop	r0
    30ec:	07 fe       	sbrs	r0, 7
    30ee:	26 c0       	rjmp	.+76     	; 0x313c <inverse>
    30f0:	08 95       	ret

000030f2 <__fp_powser>:
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	1f 93       	push	r17
    30f8:	0f 93       	push	r16
    30fa:	ff 92       	push	r15
    30fc:	ef 92       	push	r14
    30fe:	df 92       	push	r13
    3100:	7b 01       	movw	r14, r22
    3102:	8c 01       	movw	r16, r24
    3104:	68 94       	set
    3106:	05 c0       	rjmp	.+10     	; 0x3112 <__fp_powser+0x20>
    3108:	da 2e       	mov	r13, r26
    310a:	ef 01       	movw	r28, r30
    310c:	1e df       	rcall	.-452    	; 0x2f4a <__mulsf3x>
    310e:	fe 01       	movw	r30, r28
    3110:	e8 94       	clt
    3112:	a5 91       	lpm	r26, Z+
    3114:	25 91       	lpm	r18, Z+
    3116:	35 91       	lpm	r19, Z+
    3118:	45 91       	lpm	r20, Z+
    311a:	55 91       	lpm	r21, Z+
    311c:	ae f3       	brts	.-22     	; 0x3108 <__fp_powser+0x16>
    311e:	ef 01       	movw	r28, r30
    3120:	18 dd       	rcall	.-1488   	; 0x2b52 <__addsf3x>
    3122:	fe 01       	movw	r30, r28
    3124:	97 01       	movw	r18, r14
    3126:	a8 01       	movw	r20, r16
    3128:	da 94       	dec	r13
    312a:	79 f7       	brne	.-34     	; 0x310a <__fp_powser+0x18>
    312c:	df 90       	pop	r13
    312e:	ef 90       	pop	r14
    3130:	ff 90       	pop	r15
    3132:	0f 91       	pop	r16
    3134:	1f 91       	pop	r17
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <inverse>:
    313c:	9b 01       	movw	r18, r22
    313e:	ac 01       	movw	r20, r24
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	80 e8       	ldi	r24, 0x80	; 128
    3146:	9f e3       	ldi	r25, 0x3F	; 63
    3148:	5b cd       	rjmp	.-1354   	; 0x2c00 <__divsf3>
    314a:	8e ce       	rjmp	.-740    	; 0x2e68 <__fp_inf>
    314c:	ac c0       	rjmp	.+344    	; 0x32a6 <__fp_mpack>

0000314e <ldexp>:
    314e:	cc de       	rcall	.-616    	; 0x2ee8 <__fp_splitA>
    3150:	e8 f3       	brcs	.-6      	; 0x314c <inverse+0x10>
    3152:	99 23       	and	r25, r25
    3154:	d9 f3       	breq	.-10     	; 0x314c <inverse+0x10>
    3156:	94 0f       	add	r25, r20
    3158:	51 1d       	adc	r21, r1
    315a:	bb f3       	brvs	.-18     	; 0x314a <inverse+0xe>
    315c:	91 50       	subi	r25, 0x01	; 1
    315e:	50 40       	sbci	r21, 0x00	; 0
    3160:	94 f0       	brlt	.+36     	; 0x3186 <ldexp+0x38>
    3162:	59 f0       	breq	.+22     	; 0x317a <ldexp+0x2c>
    3164:	88 23       	and	r24, r24
    3166:	32 f0       	brmi	.+12     	; 0x3174 <ldexp+0x26>
    3168:	66 0f       	add	r22, r22
    316a:	77 1f       	adc	r23, r23
    316c:	88 1f       	adc	r24, r24
    316e:	91 50       	subi	r25, 0x01	; 1
    3170:	50 40       	sbci	r21, 0x00	; 0
    3172:	c1 f7       	brne	.-16     	; 0x3164 <ldexp+0x16>
    3174:	9e 3f       	cpi	r25, 0xFE	; 254
    3176:	51 05       	cpc	r21, r1
    3178:	44 f7       	brge	.-48     	; 0x314a <inverse+0xe>
    317a:	88 0f       	add	r24, r24
    317c:	91 1d       	adc	r25, r1
    317e:	96 95       	lsr	r25
    3180:	87 95       	ror	r24
    3182:	97 f9       	bld	r25, 7
    3184:	08 95       	ret
    3186:	5f 3f       	cpi	r21, 0xFF	; 255
    3188:	ac f0       	brlt	.+42     	; 0x31b4 <ldexp+0x66>
    318a:	98 3e       	cpi	r25, 0xE8	; 232
    318c:	9c f0       	brlt	.+38     	; 0x31b4 <ldexp+0x66>
    318e:	bb 27       	eor	r27, r27
    3190:	86 95       	lsr	r24
    3192:	77 95       	ror	r23
    3194:	67 95       	ror	r22
    3196:	b7 95       	ror	r27
    3198:	08 f4       	brcc	.+2      	; 0x319c <ldexp+0x4e>
    319a:	b1 60       	ori	r27, 0x01	; 1
    319c:	93 95       	inc	r25
    319e:	c1 f7       	brne	.-16     	; 0x3190 <ldexp+0x42>
    31a0:	bb 0f       	add	r27, r27
    31a2:	58 f7       	brcc	.-42     	; 0x317a <ldexp+0x2c>
    31a4:	11 f4       	brne	.+4      	; 0x31aa <ldexp+0x5c>
    31a6:	60 ff       	sbrs	r22, 0
    31a8:	e8 cf       	rjmp	.-48     	; 0x317a <ldexp+0x2c>
    31aa:	6f 5f       	subi	r22, 0xFF	; 255
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	8f 4f       	sbci	r24, 0xFF	; 255
    31b0:	9f 4f       	sbci	r25, 0xFF	; 255
    31b2:	e3 cf       	rjmp	.-58     	; 0x317a <ldexp+0x2c>
    31b4:	b4 ce       	rjmp	.-664    	; 0x2f1e <__fp_szero>
    31b6:	0e f0       	brts	.+2      	; 0x31ba <ldexp+0x6c>
    31b8:	76 c0       	rjmp	.+236    	; 0x32a6 <__fp_mpack>
    31ba:	5c ce       	rjmp	.-840    	; 0x2e74 <__fp_nan>
    31bc:	68 94       	set
    31be:	54 ce       	rjmp	.-856    	; 0x2e68 <__fp_inf>

000031c0 <log>:
    31c0:	93 de       	rcall	.-730    	; 0x2ee8 <__fp_splitA>
    31c2:	c8 f3       	brcs	.-14     	; 0x31b6 <ldexp+0x68>
    31c4:	99 23       	and	r25, r25
    31c6:	d1 f3       	breq	.-12     	; 0x31bc <ldexp+0x6e>
    31c8:	c6 f3       	brts	.-16     	; 0x31ba <ldexp+0x6c>
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	1f 93       	push	r17
    31d0:	0f 93       	push	r16
    31d2:	ff 92       	push	r15
    31d4:	c9 2f       	mov	r28, r25
    31d6:	dd 27       	eor	r29, r29
    31d8:	88 23       	and	r24, r24
    31da:	2a f0       	brmi	.+10     	; 0x31e6 <log+0x26>
    31dc:	21 97       	sbiw	r28, 0x01	; 1
    31de:	66 0f       	add	r22, r22
    31e0:	77 1f       	adc	r23, r23
    31e2:	88 1f       	adc	r24, r24
    31e4:	da f7       	brpl	.-10     	; 0x31dc <log+0x1c>
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e8       	ldi	r20, 0x80	; 128
    31ec:	5f eb       	ldi	r21, 0xBF	; 191
    31ee:	9f e3       	ldi	r25, 0x3F	; 63
    31f0:	88 39       	cpi	r24, 0x98	; 152
    31f2:	20 f0       	brcs	.+8      	; 0x31fc <log+0x3c>
    31f4:	80 3e       	cpi	r24, 0xE0	; 224
    31f6:	30 f0       	brcs	.+12     	; 0x3204 <log+0x44>
    31f8:	21 96       	adiw	r28, 0x01	; 1
    31fa:	8f 77       	andi	r24, 0x7F	; 127
    31fc:	99 dc       	rcall	.-1742   	; 0x2b30 <__addsf3>
    31fe:	e4 e2       	ldi	r30, 0x24	; 36
    3200:	f2 e0       	ldi	r31, 0x02	; 2
    3202:	03 c0       	rjmp	.+6      	; 0x320a <log+0x4a>
    3204:	95 dc       	rcall	.-1750   	; 0x2b30 <__addsf3>
    3206:	e1 e5       	ldi	r30, 0x51	; 81
    3208:	f2 e0       	ldi	r31, 0x02	; 2
    320a:	73 df       	rcall	.-282    	; 0x30f2 <__fp_powser>
    320c:	8b 01       	movw	r16, r22
    320e:	be 01       	movw	r22, r28
    3210:	ec 01       	movw	r28, r24
    3212:	fb 2e       	mov	r15, r27
    3214:	6f 57       	subi	r22, 0x7F	; 127
    3216:	71 09       	sbc	r23, r1
    3218:	75 95       	asr	r23
    321a:	77 1f       	adc	r23, r23
    321c:	88 0b       	sbc	r24, r24
    321e:	99 0b       	sbc	r25, r25
    3220:	c4 dd       	rcall	.-1144   	; 0x2daa <__floatsisf>
    3222:	28 e1       	ldi	r18, 0x18	; 24
    3224:	32 e7       	ldi	r19, 0x72	; 114
    3226:	41 e3       	ldi	r20, 0x31	; 49
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	8f de       	rcall	.-738    	; 0x2f4a <__mulsf3x>
    322c:	af 2d       	mov	r26, r15
    322e:	98 01       	movw	r18, r16
    3230:	ae 01       	movw	r20, r28
    3232:	ff 90       	pop	r15
    3234:	0f 91       	pop	r16
    3236:	1f 91       	pop	r17
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	8a dc       	rcall	.-1772   	; 0x2b52 <__addsf3x>
    323e:	3b ce       	rjmp	.-906    	; 0x2eb6 <__fp_round>

00003240 <modf>:
    3240:	fa 01       	movw	r30, r20
    3242:	dc 01       	movw	r26, r24
    3244:	aa 0f       	add	r26, r26
    3246:	bb 1f       	adc	r27, r27
    3248:	9b 01       	movw	r18, r22
    324a:	ac 01       	movw	r20, r24
    324c:	bf 57       	subi	r27, 0x7F	; 127
    324e:	28 f4       	brcc	.+10     	; 0x325a <modf+0x1a>
    3250:	22 27       	eor	r18, r18
    3252:	33 27       	eor	r19, r19
    3254:	44 27       	eor	r20, r20
    3256:	50 78       	andi	r21, 0x80	; 128
    3258:	1f c0       	rjmp	.+62     	; 0x3298 <modf+0x58>
    325a:	b7 51       	subi	r27, 0x17	; 23
    325c:	88 f4       	brcc	.+34     	; 0x3280 <modf+0x40>
    325e:	ab 2f       	mov	r26, r27
    3260:	00 24       	eor	r0, r0
    3262:	46 95       	lsr	r20
    3264:	37 95       	ror	r19
    3266:	27 95       	ror	r18
    3268:	01 1c       	adc	r0, r1
    326a:	a3 95       	inc	r26
    326c:	d2 f3       	brmi	.-12     	; 0x3262 <modf+0x22>
    326e:	00 20       	and	r0, r0
    3270:	69 f0       	breq	.+26     	; 0x328c <modf+0x4c>
    3272:	22 0f       	add	r18, r18
    3274:	33 1f       	adc	r19, r19
    3276:	44 1f       	adc	r20, r20
    3278:	b3 95       	inc	r27
    327a:	da f3       	brmi	.-10     	; 0x3272 <modf+0x32>
    327c:	0d d0       	rcall	.+26     	; 0x3298 <modf+0x58>
    327e:	57 cc       	rjmp	.-1874   	; 0x2b2e <__subsf3>
    3280:	61 30       	cpi	r22, 0x01	; 1
    3282:	71 05       	cpc	r23, r1
    3284:	a0 e8       	ldi	r26, 0x80	; 128
    3286:	8a 07       	cpc	r24, r26
    3288:	b9 46       	sbci	r27, 0x69	; 105
    328a:	30 f4       	brcc	.+12     	; 0x3298 <modf+0x58>
    328c:	9b 01       	movw	r18, r22
    328e:	ac 01       	movw	r20, r24
    3290:	66 27       	eor	r22, r22
    3292:	77 27       	eor	r23, r23
    3294:	88 27       	eor	r24, r24
    3296:	90 78       	andi	r25, 0x80	; 128
    3298:	30 96       	adiw	r30, 0x00	; 0
    329a:	21 f0       	breq	.+8      	; 0x32a4 <modf+0x64>
    329c:	20 83       	st	Z, r18
    329e:	31 83       	std	Z+1, r19	; 0x01
    32a0:	42 83       	std	Z+2, r20	; 0x02
    32a2:	53 83       	std	Z+3, r21	; 0x03
    32a4:	08 95       	ret

000032a6 <__fp_mpack>:
    32a6:	9f 3f       	cpi	r25, 0xFF	; 255
    32a8:	31 f0       	breq	.+12     	; 0x32b6 <__fp_mpack_finite+0xc>

000032aa <__fp_mpack_finite>:
    32aa:	91 50       	subi	r25, 0x01	; 1
    32ac:	20 f4       	brcc	.+8      	; 0x32b6 <__fp_mpack_finite+0xc>
    32ae:	87 95       	ror	r24
    32b0:	77 95       	ror	r23
    32b2:	67 95       	ror	r22
    32b4:	b7 95       	ror	r27
    32b6:	88 0f       	add	r24, r24
    32b8:	91 1d       	adc	r25, r1
    32ba:	96 95       	lsr	r25
    32bc:	87 95       	ror	r24
    32be:	97 f9       	bld	r25, 7
    32c0:	08 95       	ret

000032c2 <__mulsi3>:
    32c2:	db 01       	movw	r26, r22
    32c4:	8f 93       	push	r24
    32c6:	9f 93       	push	r25
    32c8:	7f d0       	rcall	.+254    	; 0x33c8 <__muluhisi3>
    32ca:	bf 91       	pop	r27
    32cc:	af 91       	pop	r26
    32ce:	a2 9f       	mul	r26, r18
    32d0:	80 0d       	add	r24, r0
    32d2:	91 1d       	adc	r25, r1
    32d4:	a3 9f       	mul	r26, r19
    32d6:	90 0d       	add	r25, r0
    32d8:	b2 9f       	mul	r27, r18
    32da:	90 0d       	add	r25, r0
    32dc:	11 24       	eor	r1, r1
    32de:	08 95       	ret

000032e0 <__udivmodhi4>:
    32e0:	aa 1b       	sub	r26, r26
    32e2:	bb 1b       	sub	r27, r27
    32e4:	51 e1       	ldi	r21, 0x11	; 17
    32e6:	07 c0       	rjmp	.+14     	; 0x32f6 <__udivmodhi4_ep>

000032e8 <__udivmodhi4_loop>:
    32e8:	aa 1f       	adc	r26, r26
    32ea:	bb 1f       	adc	r27, r27
    32ec:	a6 17       	cp	r26, r22
    32ee:	b7 07       	cpc	r27, r23
    32f0:	10 f0       	brcs	.+4      	; 0x32f6 <__udivmodhi4_ep>
    32f2:	a6 1b       	sub	r26, r22
    32f4:	b7 0b       	sbc	r27, r23

000032f6 <__udivmodhi4_ep>:
    32f6:	88 1f       	adc	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	5a 95       	dec	r21
    32fc:	a9 f7       	brne	.-22     	; 0x32e8 <__udivmodhi4_loop>
    32fe:	80 95       	com	r24
    3300:	90 95       	com	r25
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	08 95       	ret

00003308 <__divmodhi4>:
    3308:	97 fb       	bst	r25, 7
    330a:	07 2e       	mov	r0, r23
    330c:	16 f4       	brtc	.+4      	; 0x3312 <__divmodhi4+0xa>
    330e:	00 94       	com	r0
    3310:	06 d0       	rcall	.+12     	; 0x331e <__divmodhi4_neg1>
    3312:	77 fd       	sbrc	r23, 7
    3314:	08 d0       	rcall	.+16     	; 0x3326 <__divmodhi4_neg2>
    3316:	e4 df       	rcall	.-56     	; 0x32e0 <__udivmodhi4>
    3318:	07 fc       	sbrc	r0, 7
    331a:	05 d0       	rcall	.+10     	; 0x3326 <__divmodhi4_neg2>
    331c:	3e f4       	brtc	.+14     	; 0x332c <__divmodhi4_exit>

0000331e <__divmodhi4_neg1>:
    331e:	90 95       	com	r25
    3320:	81 95       	neg	r24
    3322:	9f 4f       	sbci	r25, 0xFF	; 255
    3324:	08 95       	ret

00003326 <__divmodhi4_neg2>:
    3326:	70 95       	com	r23
    3328:	61 95       	neg	r22
    332a:	7f 4f       	sbci	r23, 0xFF	; 255

0000332c <__divmodhi4_exit>:
    332c:	08 95       	ret

0000332e <__udivmodsi4>:
    332e:	a1 e2       	ldi	r26, 0x21	; 33
    3330:	1a 2e       	mov	r1, r26
    3332:	aa 1b       	sub	r26, r26
    3334:	bb 1b       	sub	r27, r27
    3336:	fd 01       	movw	r30, r26
    3338:	0d c0       	rjmp	.+26     	; 0x3354 <__udivmodsi4_ep>

0000333a <__udivmodsi4_loop>:
    333a:	aa 1f       	adc	r26, r26
    333c:	bb 1f       	adc	r27, r27
    333e:	ee 1f       	adc	r30, r30
    3340:	ff 1f       	adc	r31, r31
    3342:	a2 17       	cp	r26, r18
    3344:	b3 07       	cpc	r27, r19
    3346:	e4 07       	cpc	r30, r20
    3348:	f5 07       	cpc	r31, r21
    334a:	20 f0       	brcs	.+8      	; 0x3354 <__udivmodsi4_ep>
    334c:	a2 1b       	sub	r26, r18
    334e:	b3 0b       	sbc	r27, r19
    3350:	e4 0b       	sbc	r30, r20
    3352:	f5 0b       	sbc	r31, r21

00003354 <__udivmodsi4_ep>:
    3354:	66 1f       	adc	r22, r22
    3356:	77 1f       	adc	r23, r23
    3358:	88 1f       	adc	r24, r24
    335a:	99 1f       	adc	r25, r25
    335c:	1a 94       	dec	r1
    335e:	69 f7       	brne	.-38     	; 0x333a <__udivmodsi4_loop>
    3360:	60 95       	com	r22
    3362:	70 95       	com	r23
    3364:	80 95       	com	r24
    3366:	90 95       	com	r25
    3368:	9b 01       	movw	r18, r22
    336a:	ac 01       	movw	r20, r24
    336c:	bd 01       	movw	r22, r26
    336e:	cf 01       	movw	r24, r30
    3370:	08 95       	ret

00003372 <__divmodsi4>:
    3372:	05 2e       	mov	r0, r21
    3374:	97 fb       	bst	r25, 7
    3376:	16 f4       	brtc	.+4      	; 0x337c <__divmodsi4+0xa>
    3378:	00 94       	com	r0
    337a:	0f d0       	rcall	.+30     	; 0x339a <__negsi2>
    337c:	57 fd       	sbrc	r21, 7
    337e:	05 d0       	rcall	.+10     	; 0x338a <__divmodsi4_neg2>
    3380:	d6 df       	rcall	.-84     	; 0x332e <__udivmodsi4>
    3382:	07 fc       	sbrc	r0, 7
    3384:	02 d0       	rcall	.+4      	; 0x338a <__divmodsi4_neg2>
    3386:	46 f4       	brtc	.+16     	; 0x3398 <__divmodsi4_exit>
    3388:	08 c0       	rjmp	.+16     	; 0x339a <__negsi2>

0000338a <__divmodsi4_neg2>:
    338a:	50 95       	com	r21
    338c:	40 95       	com	r20
    338e:	30 95       	com	r19
    3390:	21 95       	neg	r18
    3392:	3f 4f       	sbci	r19, 0xFF	; 255
    3394:	4f 4f       	sbci	r20, 0xFF	; 255
    3396:	5f 4f       	sbci	r21, 0xFF	; 255

00003398 <__divmodsi4_exit>:
    3398:	08 95       	ret

0000339a <__negsi2>:
    339a:	90 95       	com	r25
    339c:	80 95       	com	r24
    339e:	70 95       	com	r23
    33a0:	61 95       	neg	r22
    33a2:	7f 4f       	sbci	r23, 0xFF	; 255
    33a4:	8f 4f       	sbci	r24, 0xFF	; 255
    33a6:	9f 4f       	sbci	r25, 0xFF	; 255
    33a8:	08 95       	ret

000033aa <__umulhisi3>:
    33aa:	a2 9f       	mul	r26, r18
    33ac:	b0 01       	movw	r22, r0
    33ae:	b3 9f       	mul	r27, r19
    33b0:	c0 01       	movw	r24, r0
    33b2:	a3 9f       	mul	r26, r19
    33b4:	70 0d       	add	r23, r0
    33b6:	81 1d       	adc	r24, r1
    33b8:	11 24       	eor	r1, r1
    33ba:	91 1d       	adc	r25, r1
    33bc:	b2 9f       	mul	r27, r18
    33be:	70 0d       	add	r23, r0
    33c0:	81 1d       	adc	r24, r1
    33c2:	11 24       	eor	r1, r1
    33c4:	91 1d       	adc	r25, r1
    33c6:	08 95       	ret

000033c8 <__muluhisi3>:
    33c8:	f0 df       	rcall	.-32     	; 0x33aa <__umulhisi3>
    33ca:	a5 9f       	mul	r26, r21
    33cc:	90 0d       	add	r25, r0
    33ce:	b4 9f       	mul	r27, r20
    33d0:	90 0d       	add	r25, r0
    33d2:	a4 9f       	mul	r26, r20
    33d4:	80 0d       	add	r24, r0
    33d6:	91 1d       	adc	r25, r1
    33d8:	11 24       	eor	r1, r1
    33da:	08 95       	ret

000033dc <__mulshisi3>:
    33dc:	b7 ff       	sbrs	r27, 7
    33de:	f4 cf       	rjmp	.-24     	; 0x33c8 <__muluhisi3>

000033e0 <__mulohisi3>:
    33e0:	f3 df       	rcall	.-26     	; 0x33c8 <__muluhisi3>
    33e2:	82 1b       	sub	r24, r18
    33e4:	93 0b       	sbc	r25, r19
    33e6:	08 95       	ret

000033e8 <__ashrdi3>:
    33e8:	97 fb       	bst	r25, 7
    33ea:	10 f8       	bld	r1, 0

000033ec <__lshrdi3>:
    33ec:	16 94       	lsr	r1
    33ee:	00 08       	sbc	r0, r0
    33f0:	0f 93       	push	r16
    33f2:	08 30       	cpi	r16, 0x08	; 8
    33f4:	98 f0       	brcs	.+38     	; 0x341c <__lshrdi3+0x30>
    33f6:	08 50       	subi	r16, 0x08	; 8
    33f8:	23 2f       	mov	r18, r19
    33fa:	34 2f       	mov	r19, r20
    33fc:	45 2f       	mov	r20, r21
    33fe:	56 2f       	mov	r21, r22
    3400:	67 2f       	mov	r22, r23
    3402:	78 2f       	mov	r23, r24
    3404:	89 2f       	mov	r24, r25
    3406:	90 2d       	mov	r25, r0
    3408:	f4 cf       	rjmp	.-24     	; 0x33f2 <__lshrdi3+0x6>
    340a:	05 94       	asr	r0
    340c:	97 95       	ror	r25
    340e:	87 95       	ror	r24
    3410:	77 95       	ror	r23
    3412:	67 95       	ror	r22
    3414:	57 95       	ror	r21
    3416:	47 95       	ror	r20
    3418:	37 95       	ror	r19
    341a:	27 95       	ror	r18
    341c:	0a 95       	dec	r16
    341e:	aa f7       	brpl	.-22     	; 0x340a <__lshrdi3+0x1e>
    3420:	0f 91       	pop	r16
    3422:	08 95       	ret

00003424 <fdevopen>:
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	00 97       	sbiw	r24, 0x00	; 0
    342e:	31 f4       	brne	.+12     	; 0x343c <fdevopen+0x18>
    3430:	61 15       	cp	r22, r1
    3432:	71 05       	cpc	r23, r1
    3434:	19 f4       	brne	.+6      	; 0x343c <fdevopen+0x18>
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	39 c0       	rjmp	.+114    	; 0x34ae <fdevopen+0x8a>
    343c:	8b 01       	movw	r16, r22
    343e:	ec 01       	movw	r28, r24
    3440:	6e e0       	ldi	r22, 0x0E	; 14
    3442:	70 e0       	ldi	r23, 0x00	; 0
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	47 d5       	rcall	.+2702   	; 0x3ed8 <calloc>
    344a:	fc 01       	movw	r30, r24
    344c:	89 2b       	or	r24, r25
    344e:	99 f3       	breq	.-26     	; 0x3436 <fdevopen+0x12>
    3450:	80 e8       	ldi	r24, 0x80	; 128
    3452:	83 83       	std	Z+3, r24	; 0x03
    3454:	01 15       	cp	r16, r1
    3456:	11 05       	cpc	r17, r1
    3458:	71 f0       	breq	.+28     	; 0x3476 <fdevopen+0x52>
    345a:	02 87       	std	Z+10, r16	; 0x0a
    345c:	13 87       	std	Z+11, r17	; 0x0b
    345e:	81 e8       	ldi	r24, 0x81	; 129
    3460:	83 83       	std	Z+3, r24	; 0x03
    3462:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <__iob>
    3466:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <__iob+0x1>
    346a:	89 2b       	or	r24, r25
    346c:	21 f4       	brne	.+8      	; 0x3476 <fdevopen+0x52>
    346e:	e0 93 9e 21 	sts	0x219E, r30	; 0x80219e <__iob>
    3472:	f0 93 9f 21 	sts	0x219F, r31	; 0x80219f <__iob+0x1>
    3476:	20 97       	sbiw	r28, 0x00	; 0
    3478:	c9 f0       	breq	.+50     	; 0x34ac <fdevopen+0x88>
    347a:	c0 87       	std	Z+8, r28	; 0x08
    347c:	d1 87       	std	Z+9, r29	; 0x09
    347e:	83 81       	ldd	r24, Z+3	; 0x03
    3480:	82 60       	ori	r24, 0x02	; 2
    3482:	83 83       	std	Z+3, r24	; 0x03
    3484:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <__iob+0x2>
    3488:	90 91 a1 21 	lds	r25, 0x21A1	; 0x8021a1 <__iob+0x3>
    348c:	89 2b       	or	r24, r25
    348e:	71 f4       	brne	.+28     	; 0x34ac <fdevopen+0x88>
    3490:	e0 93 a0 21 	sts	0x21A0, r30	; 0x8021a0 <__iob+0x2>
    3494:	f0 93 a1 21 	sts	0x21A1, r31	; 0x8021a1 <__iob+0x3>
    3498:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <__iob+0x4>
    349c:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <__iob+0x5>
    34a0:	89 2b       	or	r24, r25
    34a2:	21 f4       	brne	.+8      	; 0x34ac <fdevopen+0x88>
    34a4:	e0 93 a2 21 	sts	0x21A2, r30	; 0x8021a2 <__iob+0x4>
    34a8:	f0 93 a3 21 	sts	0x21A3, r31	; 0x8021a3 <__iob+0x5>
    34ac:	cf 01       	movw	r24, r30
    34ae:	df 91       	pop	r29
    34b0:	cf 91       	pop	r28
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	08 95       	ret

000034b8 <printf>:
    34b8:	cf 93       	push	r28
    34ba:	df 93       	push	r29
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	ae 01       	movw	r20, r28
    34c2:	4a 5f       	subi	r20, 0xFA	; 250
    34c4:	5f 4f       	sbci	r21, 0xFF	; 255
    34c6:	fa 01       	movw	r30, r20
    34c8:	61 91       	ld	r22, Z+
    34ca:	71 91       	ld	r23, Z+
    34cc:	af 01       	movw	r20, r30
    34ce:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <__iob+0x2>
    34d2:	90 91 a1 21 	lds	r25, 0x21A1	; 0x8021a1 <__iob+0x3>
    34d6:	46 d0       	rcall	.+140    	; 0x3564 <vfprintf>
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	08 95       	ret

000034de <sprintf>:
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	2e 97       	sbiw	r28, 0x0e	; 14
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0e 89       	ldd	r16, Y+22	; 0x16
    34f2:	1f 89       	ldd	r17, Y+23	; 0x17
    34f4:	86 e0       	ldi	r24, 0x06	; 6
    34f6:	8c 83       	std	Y+4, r24	; 0x04
    34f8:	09 83       	std	Y+1, r16	; 0x01
    34fa:	1a 83       	std	Y+2, r17	; 0x02
    34fc:	8f ef       	ldi	r24, 0xFF	; 255
    34fe:	9f e7       	ldi	r25, 0x7F	; 127
    3500:	8d 83       	std	Y+5, r24	; 0x05
    3502:	9e 83       	std	Y+6, r25	; 0x06
    3504:	ae 01       	movw	r20, r28
    3506:	46 5e       	subi	r20, 0xE6	; 230
    3508:	5f 4f       	sbci	r21, 0xFF	; 255
    350a:	68 8d       	ldd	r22, Y+24	; 0x18
    350c:	79 8d       	ldd	r23, Y+25	; 0x19
    350e:	ce 01       	movw	r24, r28
    3510:	01 96       	adiw	r24, 0x01	; 1
    3512:	28 d0       	rcall	.+80     	; 0x3564 <vfprintf>
    3514:	ef 81       	ldd	r30, Y+7	; 0x07
    3516:	f8 85       	ldd	r31, Y+8	; 0x08
    3518:	e0 0f       	add	r30, r16
    351a:	f1 1f       	adc	r31, r17
    351c:	10 82       	st	Z, r1
    351e:	2e 96       	adiw	r28, 0x0e	; 14
    3520:	cd bf       	out	0x3d, r28	; 61
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	1f 91       	pop	r17
    352a:	0f 91       	pop	r16
    352c:	08 95       	ret

0000352e <sscanf>:
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	2e 97       	sbiw	r28, 0x0e	; 14
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	85 e0       	ldi	r24, 0x05	; 5
    353e:	8c 83       	std	Y+4, r24	; 0x04
    3540:	8c 89       	ldd	r24, Y+20	; 0x14
    3542:	9d 89       	ldd	r25, Y+21	; 0x15
    3544:	89 83       	std	Y+1, r24	; 0x01
    3546:	9a 83       	std	Y+2, r25	; 0x02
    3548:	ae 01       	movw	r20, r28
    354a:	48 5e       	subi	r20, 0xE8	; 232
    354c:	5f 4f       	sbci	r21, 0xFF	; 255
    354e:	6e 89       	ldd	r22, Y+22	; 0x16
    3550:	7f 89       	ldd	r23, Y+23	; 0x17
    3552:	ce 01       	movw	r24, r28
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	a9 d3       	rcall	.+1874   	; 0x3caa <vfscanf>
    3558:	2e 96       	adiw	r28, 0x0e	; 14
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	08 95       	ret

00003564 <vfprintf>:
    3564:	2f 92       	push	r2
    3566:	3f 92       	push	r3
    3568:	4f 92       	push	r4
    356a:	5f 92       	push	r5
    356c:	6f 92       	push	r6
    356e:	7f 92       	push	r7
    3570:	8f 92       	push	r8
    3572:	9f 92       	push	r9
    3574:	af 92       	push	r10
    3576:	bf 92       	push	r11
    3578:	cf 92       	push	r12
    357a:	df 92       	push	r13
    357c:	ef 92       	push	r14
    357e:	ff 92       	push	r15
    3580:	0f 93       	push	r16
    3582:	1f 93       	push	r17
    3584:	cf 93       	push	r28
    3586:	df 93       	push	r29
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	2b 97       	sbiw	r28, 0x0b	; 11
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	de bf       	out	0x3e, r29	; 62
    3592:	6c 01       	movw	r12, r24
    3594:	7b 01       	movw	r14, r22
    3596:	8a 01       	movw	r16, r20
    3598:	fc 01       	movw	r30, r24
    359a:	16 82       	std	Z+6, r1	; 0x06
    359c:	17 82       	std	Z+7, r1	; 0x07
    359e:	83 81       	ldd	r24, Z+3	; 0x03
    35a0:	81 ff       	sbrs	r24, 1
    35a2:	bf c1       	rjmp	.+894    	; 0x3922 <vfprintf+0x3be>
    35a4:	ce 01       	movw	r24, r28
    35a6:	01 96       	adiw	r24, 0x01	; 1
    35a8:	3c 01       	movw	r6, r24
    35aa:	f6 01       	movw	r30, r12
    35ac:	93 81       	ldd	r25, Z+3	; 0x03
    35ae:	f7 01       	movw	r30, r14
    35b0:	93 fd       	sbrc	r25, 3
    35b2:	85 91       	lpm	r24, Z+
    35b4:	93 ff       	sbrs	r25, 3
    35b6:	81 91       	ld	r24, Z+
    35b8:	7f 01       	movw	r14, r30
    35ba:	88 23       	and	r24, r24
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <vfprintf+0x5c>
    35be:	ad c1       	rjmp	.+858    	; 0x391a <vfprintf+0x3b6>
    35c0:	85 32       	cpi	r24, 0x25	; 37
    35c2:	39 f4       	brne	.+14     	; 0x35d2 <vfprintf+0x6e>
    35c4:	93 fd       	sbrc	r25, 3
    35c6:	85 91       	lpm	r24, Z+
    35c8:	93 ff       	sbrs	r25, 3
    35ca:	81 91       	ld	r24, Z+
    35cc:	7f 01       	movw	r14, r30
    35ce:	85 32       	cpi	r24, 0x25	; 37
    35d0:	21 f4       	brne	.+8      	; 0x35da <vfprintf+0x76>
    35d2:	b6 01       	movw	r22, r12
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	29 d6       	rcall	.+3154   	; 0x422a <fputc>
    35d8:	e8 cf       	rjmp	.-48     	; 0x35aa <vfprintf+0x46>
    35da:	91 2c       	mov	r9, r1
    35dc:	21 2c       	mov	r2, r1
    35de:	31 2c       	mov	r3, r1
    35e0:	ff e1       	ldi	r31, 0x1F	; 31
    35e2:	f3 15       	cp	r31, r3
    35e4:	d8 f0       	brcs	.+54     	; 0x361c <vfprintf+0xb8>
    35e6:	8b 32       	cpi	r24, 0x2B	; 43
    35e8:	79 f0       	breq	.+30     	; 0x3608 <vfprintf+0xa4>
    35ea:	38 f4       	brcc	.+14     	; 0x35fa <vfprintf+0x96>
    35ec:	80 32       	cpi	r24, 0x20	; 32
    35ee:	79 f0       	breq	.+30     	; 0x360e <vfprintf+0xaa>
    35f0:	83 32       	cpi	r24, 0x23	; 35
    35f2:	a1 f4       	brne	.+40     	; 0x361c <vfprintf+0xb8>
    35f4:	23 2d       	mov	r18, r3
    35f6:	20 61       	ori	r18, 0x10	; 16
    35f8:	1d c0       	rjmp	.+58     	; 0x3634 <vfprintf+0xd0>
    35fa:	8d 32       	cpi	r24, 0x2D	; 45
    35fc:	61 f0       	breq	.+24     	; 0x3616 <vfprintf+0xb2>
    35fe:	80 33       	cpi	r24, 0x30	; 48
    3600:	69 f4       	brne	.+26     	; 0x361c <vfprintf+0xb8>
    3602:	23 2d       	mov	r18, r3
    3604:	21 60       	ori	r18, 0x01	; 1
    3606:	16 c0       	rjmp	.+44     	; 0x3634 <vfprintf+0xd0>
    3608:	83 2d       	mov	r24, r3
    360a:	82 60       	ori	r24, 0x02	; 2
    360c:	38 2e       	mov	r3, r24
    360e:	e3 2d       	mov	r30, r3
    3610:	e4 60       	ori	r30, 0x04	; 4
    3612:	3e 2e       	mov	r3, r30
    3614:	2a c0       	rjmp	.+84     	; 0x366a <vfprintf+0x106>
    3616:	f3 2d       	mov	r31, r3
    3618:	f8 60       	ori	r31, 0x08	; 8
    361a:	1d c0       	rjmp	.+58     	; 0x3656 <vfprintf+0xf2>
    361c:	37 fc       	sbrc	r3, 7
    361e:	2d c0       	rjmp	.+90     	; 0x367a <vfprintf+0x116>
    3620:	20 ed       	ldi	r18, 0xD0	; 208
    3622:	28 0f       	add	r18, r24
    3624:	2a 30       	cpi	r18, 0x0A	; 10
    3626:	40 f0       	brcs	.+16     	; 0x3638 <vfprintf+0xd4>
    3628:	8e 32       	cpi	r24, 0x2E	; 46
    362a:	b9 f4       	brne	.+46     	; 0x365a <vfprintf+0xf6>
    362c:	36 fc       	sbrc	r3, 6
    362e:	75 c1       	rjmp	.+746    	; 0x391a <vfprintf+0x3b6>
    3630:	23 2d       	mov	r18, r3
    3632:	20 64       	ori	r18, 0x40	; 64
    3634:	32 2e       	mov	r3, r18
    3636:	19 c0       	rjmp	.+50     	; 0x366a <vfprintf+0x106>
    3638:	36 fe       	sbrs	r3, 6
    363a:	06 c0       	rjmp	.+12     	; 0x3648 <vfprintf+0xe4>
    363c:	8a e0       	ldi	r24, 0x0A	; 10
    363e:	98 9e       	mul	r9, r24
    3640:	20 0d       	add	r18, r0
    3642:	11 24       	eor	r1, r1
    3644:	92 2e       	mov	r9, r18
    3646:	11 c0       	rjmp	.+34     	; 0x366a <vfprintf+0x106>
    3648:	ea e0       	ldi	r30, 0x0A	; 10
    364a:	2e 9e       	mul	r2, r30
    364c:	20 0d       	add	r18, r0
    364e:	11 24       	eor	r1, r1
    3650:	22 2e       	mov	r2, r18
    3652:	f3 2d       	mov	r31, r3
    3654:	f0 62       	ori	r31, 0x20	; 32
    3656:	3f 2e       	mov	r3, r31
    3658:	08 c0       	rjmp	.+16     	; 0x366a <vfprintf+0x106>
    365a:	8c 36       	cpi	r24, 0x6C	; 108
    365c:	21 f4       	brne	.+8      	; 0x3666 <vfprintf+0x102>
    365e:	83 2d       	mov	r24, r3
    3660:	80 68       	ori	r24, 0x80	; 128
    3662:	38 2e       	mov	r3, r24
    3664:	02 c0       	rjmp	.+4      	; 0x366a <vfprintf+0x106>
    3666:	88 36       	cpi	r24, 0x68	; 104
    3668:	41 f4       	brne	.+16     	; 0x367a <vfprintf+0x116>
    366a:	f7 01       	movw	r30, r14
    366c:	93 fd       	sbrc	r25, 3
    366e:	85 91       	lpm	r24, Z+
    3670:	93 ff       	sbrs	r25, 3
    3672:	81 91       	ld	r24, Z+
    3674:	7f 01       	movw	r14, r30
    3676:	81 11       	cpse	r24, r1
    3678:	b3 cf       	rjmp	.-154    	; 0x35e0 <vfprintf+0x7c>
    367a:	98 2f       	mov	r25, r24
    367c:	9f 7d       	andi	r25, 0xDF	; 223
    367e:	95 54       	subi	r25, 0x45	; 69
    3680:	93 30       	cpi	r25, 0x03	; 3
    3682:	28 f4       	brcc	.+10     	; 0x368e <vfprintf+0x12a>
    3684:	0c 5f       	subi	r16, 0xFC	; 252
    3686:	1f 4f       	sbci	r17, 0xFF	; 255
    3688:	9f e3       	ldi	r25, 0x3F	; 63
    368a:	99 83       	std	Y+1, r25	; 0x01
    368c:	0d c0       	rjmp	.+26     	; 0x36a8 <vfprintf+0x144>
    368e:	83 36       	cpi	r24, 0x63	; 99
    3690:	31 f0       	breq	.+12     	; 0x369e <vfprintf+0x13a>
    3692:	83 37       	cpi	r24, 0x73	; 115
    3694:	71 f0       	breq	.+28     	; 0x36b2 <vfprintf+0x14e>
    3696:	83 35       	cpi	r24, 0x53	; 83
    3698:	09 f0       	breq	.+2      	; 0x369c <vfprintf+0x138>
    369a:	55 c0       	rjmp	.+170    	; 0x3746 <vfprintf+0x1e2>
    369c:	20 c0       	rjmp	.+64     	; 0x36de <vfprintf+0x17a>
    369e:	f8 01       	movw	r30, r16
    36a0:	80 81       	ld	r24, Z
    36a2:	89 83       	std	Y+1, r24	; 0x01
    36a4:	0e 5f       	subi	r16, 0xFE	; 254
    36a6:	1f 4f       	sbci	r17, 0xFF	; 255
    36a8:	88 24       	eor	r8, r8
    36aa:	83 94       	inc	r8
    36ac:	91 2c       	mov	r9, r1
    36ae:	53 01       	movw	r10, r6
    36b0:	12 c0       	rjmp	.+36     	; 0x36d6 <vfprintf+0x172>
    36b2:	28 01       	movw	r4, r16
    36b4:	f2 e0       	ldi	r31, 0x02	; 2
    36b6:	4f 0e       	add	r4, r31
    36b8:	51 1c       	adc	r5, r1
    36ba:	f8 01       	movw	r30, r16
    36bc:	a0 80       	ld	r10, Z
    36be:	b1 80       	ldd	r11, Z+1	; 0x01
    36c0:	36 fe       	sbrs	r3, 6
    36c2:	03 c0       	rjmp	.+6      	; 0x36ca <vfprintf+0x166>
    36c4:	69 2d       	mov	r22, r9
    36c6:	70 e0       	ldi	r23, 0x00	; 0
    36c8:	02 c0       	rjmp	.+4      	; 0x36ce <vfprintf+0x16a>
    36ca:	6f ef       	ldi	r22, 0xFF	; 255
    36cc:	7f ef       	ldi	r23, 0xFF	; 255
    36ce:	c5 01       	movw	r24, r10
    36d0:	63 d5       	rcall	.+2758   	; 0x4198 <strnlen>
    36d2:	4c 01       	movw	r8, r24
    36d4:	82 01       	movw	r16, r4
    36d6:	f3 2d       	mov	r31, r3
    36d8:	ff 77       	andi	r31, 0x7F	; 127
    36da:	3f 2e       	mov	r3, r31
    36dc:	15 c0       	rjmp	.+42     	; 0x3708 <vfprintf+0x1a4>
    36de:	28 01       	movw	r4, r16
    36e0:	22 e0       	ldi	r18, 0x02	; 2
    36e2:	42 0e       	add	r4, r18
    36e4:	51 1c       	adc	r5, r1
    36e6:	f8 01       	movw	r30, r16
    36e8:	a0 80       	ld	r10, Z
    36ea:	b1 80       	ldd	r11, Z+1	; 0x01
    36ec:	36 fe       	sbrs	r3, 6
    36ee:	03 c0       	rjmp	.+6      	; 0x36f6 <vfprintf+0x192>
    36f0:	69 2d       	mov	r22, r9
    36f2:	70 e0       	ldi	r23, 0x00	; 0
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <vfprintf+0x196>
    36f6:	6f ef       	ldi	r22, 0xFF	; 255
    36f8:	7f ef       	ldi	r23, 0xFF	; 255
    36fa:	c5 01       	movw	r24, r10
    36fc:	3b d5       	rcall	.+2678   	; 0x4174 <strnlen_P>
    36fe:	4c 01       	movw	r8, r24
    3700:	f3 2d       	mov	r31, r3
    3702:	f0 68       	ori	r31, 0x80	; 128
    3704:	3f 2e       	mov	r3, r31
    3706:	82 01       	movw	r16, r4
    3708:	33 fc       	sbrc	r3, 3
    370a:	19 c0       	rjmp	.+50     	; 0x373e <vfprintf+0x1da>
    370c:	82 2d       	mov	r24, r2
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	88 16       	cp	r8, r24
    3712:	99 06       	cpc	r9, r25
    3714:	a0 f4       	brcc	.+40     	; 0x373e <vfprintf+0x1da>
    3716:	b6 01       	movw	r22, r12
    3718:	80 e2       	ldi	r24, 0x20	; 32
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	86 d5       	rcall	.+2828   	; 0x422a <fputc>
    371e:	2a 94       	dec	r2
    3720:	f5 cf       	rjmp	.-22     	; 0x370c <vfprintf+0x1a8>
    3722:	f5 01       	movw	r30, r10
    3724:	37 fc       	sbrc	r3, 7
    3726:	85 91       	lpm	r24, Z+
    3728:	37 fe       	sbrs	r3, 7
    372a:	81 91       	ld	r24, Z+
    372c:	5f 01       	movw	r10, r30
    372e:	b6 01       	movw	r22, r12
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	7b d5       	rcall	.+2806   	; 0x422a <fputc>
    3734:	21 10       	cpse	r2, r1
    3736:	2a 94       	dec	r2
    3738:	21 e0       	ldi	r18, 0x01	; 1
    373a:	82 1a       	sub	r8, r18
    373c:	91 08       	sbc	r9, r1
    373e:	81 14       	cp	r8, r1
    3740:	91 04       	cpc	r9, r1
    3742:	79 f7       	brne	.-34     	; 0x3722 <vfprintf+0x1be>
    3744:	e1 c0       	rjmp	.+450    	; 0x3908 <vfprintf+0x3a4>
    3746:	84 36       	cpi	r24, 0x64	; 100
    3748:	11 f0       	breq	.+4      	; 0x374e <vfprintf+0x1ea>
    374a:	89 36       	cpi	r24, 0x69	; 105
    374c:	39 f5       	brne	.+78     	; 0x379c <vfprintf+0x238>
    374e:	f8 01       	movw	r30, r16
    3750:	37 fe       	sbrs	r3, 7
    3752:	07 c0       	rjmp	.+14     	; 0x3762 <vfprintf+0x1fe>
    3754:	60 81       	ld	r22, Z
    3756:	71 81       	ldd	r23, Z+1	; 0x01
    3758:	82 81       	ldd	r24, Z+2	; 0x02
    375a:	93 81       	ldd	r25, Z+3	; 0x03
    375c:	0c 5f       	subi	r16, 0xFC	; 252
    375e:	1f 4f       	sbci	r17, 0xFF	; 255
    3760:	08 c0       	rjmp	.+16     	; 0x3772 <vfprintf+0x20e>
    3762:	60 81       	ld	r22, Z
    3764:	71 81       	ldd	r23, Z+1	; 0x01
    3766:	07 2e       	mov	r0, r23
    3768:	00 0c       	add	r0, r0
    376a:	88 0b       	sbc	r24, r24
    376c:	99 0b       	sbc	r25, r25
    376e:	0e 5f       	subi	r16, 0xFE	; 254
    3770:	1f 4f       	sbci	r17, 0xFF	; 255
    3772:	f3 2d       	mov	r31, r3
    3774:	ff 76       	andi	r31, 0x6F	; 111
    3776:	3f 2e       	mov	r3, r31
    3778:	97 ff       	sbrs	r25, 7
    377a:	09 c0       	rjmp	.+18     	; 0x378e <vfprintf+0x22a>
    377c:	90 95       	com	r25
    377e:	80 95       	com	r24
    3780:	70 95       	com	r23
    3782:	61 95       	neg	r22
    3784:	7f 4f       	sbci	r23, 0xFF	; 255
    3786:	8f 4f       	sbci	r24, 0xFF	; 255
    3788:	9f 4f       	sbci	r25, 0xFF	; 255
    378a:	f0 68       	ori	r31, 0x80	; 128
    378c:	3f 2e       	mov	r3, r31
    378e:	2a e0       	ldi	r18, 0x0A	; 10
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	a3 01       	movw	r20, r6
    3794:	9f d5       	rcall	.+2878   	; 0x42d4 <__ultoa_invert>
    3796:	88 2e       	mov	r8, r24
    3798:	86 18       	sub	r8, r6
    379a:	44 c0       	rjmp	.+136    	; 0x3824 <vfprintf+0x2c0>
    379c:	85 37       	cpi	r24, 0x75	; 117
    379e:	31 f4       	brne	.+12     	; 0x37ac <vfprintf+0x248>
    37a0:	23 2d       	mov	r18, r3
    37a2:	2f 7e       	andi	r18, 0xEF	; 239
    37a4:	b2 2e       	mov	r11, r18
    37a6:	2a e0       	ldi	r18, 0x0A	; 10
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	25 c0       	rjmp	.+74     	; 0x37f6 <vfprintf+0x292>
    37ac:	93 2d       	mov	r25, r3
    37ae:	99 7f       	andi	r25, 0xF9	; 249
    37b0:	b9 2e       	mov	r11, r25
    37b2:	8f 36       	cpi	r24, 0x6F	; 111
    37b4:	c1 f0       	breq	.+48     	; 0x37e6 <vfprintf+0x282>
    37b6:	18 f4       	brcc	.+6      	; 0x37be <vfprintf+0x25a>
    37b8:	88 35       	cpi	r24, 0x58	; 88
    37ba:	79 f0       	breq	.+30     	; 0x37da <vfprintf+0x276>
    37bc:	ae c0       	rjmp	.+348    	; 0x391a <vfprintf+0x3b6>
    37be:	80 37       	cpi	r24, 0x70	; 112
    37c0:	19 f0       	breq	.+6      	; 0x37c8 <vfprintf+0x264>
    37c2:	88 37       	cpi	r24, 0x78	; 120
    37c4:	21 f0       	breq	.+8      	; 0x37ce <vfprintf+0x26a>
    37c6:	a9 c0       	rjmp	.+338    	; 0x391a <vfprintf+0x3b6>
    37c8:	e9 2f       	mov	r30, r25
    37ca:	e0 61       	ori	r30, 0x10	; 16
    37cc:	be 2e       	mov	r11, r30
    37ce:	b4 fe       	sbrs	r11, 4
    37d0:	0d c0       	rjmp	.+26     	; 0x37ec <vfprintf+0x288>
    37d2:	fb 2d       	mov	r31, r11
    37d4:	f4 60       	ori	r31, 0x04	; 4
    37d6:	bf 2e       	mov	r11, r31
    37d8:	09 c0       	rjmp	.+18     	; 0x37ec <vfprintf+0x288>
    37da:	34 fe       	sbrs	r3, 4
    37dc:	0a c0       	rjmp	.+20     	; 0x37f2 <vfprintf+0x28e>
    37de:	29 2f       	mov	r18, r25
    37e0:	26 60       	ori	r18, 0x06	; 6
    37e2:	b2 2e       	mov	r11, r18
    37e4:	06 c0       	rjmp	.+12     	; 0x37f2 <vfprintf+0x28e>
    37e6:	28 e0       	ldi	r18, 0x08	; 8
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	05 c0       	rjmp	.+10     	; 0x37f6 <vfprintf+0x292>
    37ec:	20 e1       	ldi	r18, 0x10	; 16
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	02 c0       	rjmp	.+4      	; 0x37f6 <vfprintf+0x292>
    37f2:	20 e1       	ldi	r18, 0x10	; 16
    37f4:	32 e0       	ldi	r19, 0x02	; 2
    37f6:	f8 01       	movw	r30, r16
    37f8:	b7 fe       	sbrs	r11, 7
    37fa:	07 c0       	rjmp	.+14     	; 0x380a <vfprintf+0x2a6>
    37fc:	60 81       	ld	r22, Z
    37fe:	71 81       	ldd	r23, Z+1	; 0x01
    3800:	82 81       	ldd	r24, Z+2	; 0x02
    3802:	93 81       	ldd	r25, Z+3	; 0x03
    3804:	0c 5f       	subi	r16, 0xFC	; 252
    3806:	1f 4f       	sbci	r17, 0xFF	; 255
    3808:	06 c0       	rjmp	.+12     	; 0x3816 <vfprintf+0x2b2>
    380a:	60 81       	ld	r22, Z
    380c:	71 81       	ldd	r23, Z+1	; 0x01
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	0e 5f       	subi	r16, 0xFE	; 254
    3814:	1f 4f       	sbci	r17, 0xFF	; 255
    3816:	a3 01       	movw	r20, r6
    3818:	5d d5       	rcall	.+2746   	; 0x42d4 <__ultoa_invert>
    381a:	88 2e       	mov	r8, r24
    381c:	86 18       	sub	r8, r6
    381e:	fb 2d       	mov	r31, r11
    3820:	ff 77       	andi	r31, 0x7F	; 127
    3822:	3f 2e       	mov	r3, r31
    3824:	36 fe       	sbrs	r3, 6
    3826:	0d c0       	rjmp	.+26     	; 0x3842 <vfprintf+0x2de>
    3828:	23 2d       	mov	r18, r3
    382a:	2e 7f       	andi	r18, 0xFE	; 254
    382c:	a2 2e       	mov	r10, r18
    382e:	89 14       	cp	r8, r9
    3830:	58 f4       	brcc	.+22     	; 0x3848 <vfprintf+0x2e4>
    3832:	34 fe       	sbrs	r3, 4
    3834:	0b c0       	rjmp	.+22     	; 0x384c <vfprintf+0x2e8>
    3836:	32 fc       	sbrc	r3, 2
    3838:	09 c0       	rjmp	.+18     	; 0x384c <vfprintf+0x2e8>
    383a:	83 2d       	mov	r24, r3
    383c:	8e 7e       	andi	r24, 0xEE	; 238
    383e:	a8 2e       	mov	r10, r24
    3840:	05 c0       	rjmp	.+10     	; 0x384c <vfprintf+0x2e8>
    3842:	b8 2c       	mov	r11, r8
    3844:	a3 2c       	mov	r10, r3
    3846:	03 c0       	rjmp	.+6      	; 0x384e <vfprintf+0x2ea>
    3848:	b8 2c       	mov	r11, r8
    384a:	01 c0       	rjmp	.+2      	; 0x384e <vfprintf+0x2ea>
    384c:	b9 2c       	mov	r11, r9
    384e:	a4 fe       	sbrs	r10, 4
    3850:	0f c0       	rjmp	.+30     	; 0x3870 <vfprintf+0x30c>
    3852:	fe 01       	movw	r30, r28
    3854:	e8 0d       	add	r30, r8
    3856:	f1 1d       	adc	r31, r1
    3858:	80 81       	ld	r24, Z
    385a:	80 33       	cpi	r24, 0x30	; 48
    385c:	21 f4       	brne	.+8      	; 0x3866 <vfprintf+0x302>
    385e:	9a 2d       	mov	r25, r10
    3860:	99 7e       	andi	r25, 0xE9	; 233
    3862:	a9 2e       	mov	r10, r25
    3864:	09 c0       	rjmp	.+18     	; 0x3878 <vfprintf+0x314>
    3866:	a2 fe       	sbrs	r10, 2
    3868:	06 c0       	rjmp	.+12     	; 0x3876 <vfprintf+0x312>
    386a:	b3 94       	inc	r11
    386c:	b3 94       	inc	r11
    386e:	04 c0       	rjmp	.+8      	; 0x3878 <vfprintf+0x314>
    3870:	8a 2d       	mov	r24, r10
    3872:	86 78       	andi	r24, 0x86	; 134
    3874:	09 f0       	breq	.+2      	; 0x3878 <vfprintf+0x314>
    3876:	b3 94       	inc	r11
    3878:	a3 fc       	sbrc	r10, 3
    387a:	10 c0       	rjmp	.+32     	; 0x389c <vfprintf+0x338>
    387c:	a0 fe       	sbrs	r10, 0
    387e:	06 c0       	rjmp	.+12     	; 0x388c <vfprintf+0x328>
    3880:	b2 14       	cp	r11, r2
    3882:	80 f4       	brcc	.+32     	; 0x38a4 <vfprintf+0x340>
    3884:	28 0c       	add	r2, r8
    3886:	92 2c       	mov	r9, r2
    3888:	9b 18       	sub	r9, r11
    388a:	0d c0       	rjmp	.+26     	; 0x38a6 <vfprintf+0x342>
    388c:	b2 14       	cp	r11, r2
    388e:	58 f4       	brcc	.+22     	; 0x38a6 <vfprintf+0x342>
    3890:	b6 01       	movw	r22, r12
    3892:	80 e2       	ldi	r24, 0x20	; 32
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	c9 d4       	rcall	.+2450   	; 0x422a <fputc>
    3898:	b3 94       	inc	r11
    389a:	f8 cf       	rjmp	.-16     	; 0x388c <vfprintf+0x328>
    389c:	b2 14       	cp	r11, r2
    389e:	18 f4       	brcc	.+6      	; 0x38a6 <vfprintf+0x342>
    38a0:	2b 18       	sub	r2, r11
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <vfprintf+0x344>
    38a4:	98 2c       	mov	r9, r8
    38a6:	21 2c       	mov	r2, r1
    38a8:	a4 fe       	sbrs	r10, 4
    38aa:	0f c0       	rjmp	.+30     	; 0x38ca <vfprintf+0x366>
    38ac:	b6 01       	movw	r22, r12
    38ae:	80 e3       	ldi	r24, 0x30	; 48
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	bb d4       	rcall	.+2422   	; 0x422a <fputc>
    38b4:	a2 fe       	sbrs	r10, 2
    38b6:	16 c0       	rjmp	.+44     	; 0x38e4 <vfprintf+0x380>
    38b8:	a1 fc       	sbrc	r10, 1
    38ba:	03 c0       	rjmp	.+6      	; 0x38c2 <vfprintf+0x35e>
    38bc:	88 e7       	ldi	r24, 0x78	; 120
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	02 c0       	rjmp	.+4      	; 0x38c6 <vfprintf+0x362>
    38c2:	88 e5       	ldi	r24, 0x58	; 88
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	b6 01       	movw	r22, r12
    38c8:	0c c0       	rjmp	.+24     	; 0x38e2 <vfprintf+0x37e>
    38ca:	8a 2d       	mov	r24, r10
    38cc:	86 78       	andi	r24, 0x86	; 134
    38ce:	51 f0       	breq	.+20     	; 0x38e4 <vfprintf+0x380>
    38d0:	a1 fe       	sbrs	r10, 1
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <vfprintf+0x374>
    38d4:	8b e2       	ldi	r24, 0x2B	; 43
    38d6:	01 c0       	rjmp	.+2      	; 0x38da <vfprintf+0x376>
    38d8:	80 e2       	ldi	r24, 0x20	; 32
    38da:	a7 fc       	sbrc	r10, 7
    38dc:	8d e2       	ldi	r24, 0x2D	; 45
    38de:	b6 01       	movw	r22, r12
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	a3 d4       	rcall	.+2374   	; 0x422a <fputc>
    38e4:	89 14       	cp	r8, r9
    38e6:	30 f4       	brcc	.+12     	; 0x38f4 <vfprintf+0x390>
    38e8:	b6 01       	movw	r22, r12
    38ea:	80 e3       	ldi	r24, 0x30	; 48
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	9d d4       	rcall	.+2362   	; 0x422a <fputc>
    38f0:	9a 94       	dec	r9
    38f2:	f8 cf       	rjmp	.-16     	; 0x38e4 <vfprintf+0x380>
    38f4:	8a 94       	dec	r8
    38f6:	f3 01       	movw	r30, r6
    38f8:	e8 0d       	add	r30, r8
    38fa:	f1 1d       	adc	r31, r1
    38fc:	80 81       	ld	r24, Z
    38fe:	b6 01       	movw	r22, r12
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	93 d4       	rcall	.+2342   	; 0x422a <fputc>
    3904:	81 10       	cpse	r8, r1
    3906:	f6 cf       	rjmp	.-20     	; 0x38f4 <vfprintf+0x390>
    3908:	22 20       	and	r2, r2
    390a:	09 f4       	brne	.+2      	; 0x390e <vfprintf+0x3aa>
    390c:	4e ce       	rjmp	.-868    	; 0x35aa <vfprintf+0x46>
    390e:	b6 01       	movw	r22, r12
    3910:	80 e2       	ldi	r24, 0x20	; 32
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	8a d4       	rcall	.+2324   	; 0x422a <fputc>
    3916:	2a 94       	dec	r2
    3918:	f7 cf       	rjmp	.-18     	; 0x3908 <vfprintf+0x3a4>
    391a:	f6 01       	movw	r30, r12
    391c:	86 81       	ldd	r24, Z+6	; 0x06
    391e:	97 81       	ldd	r25, Z+7	; 0x07
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <vfprintf+0x3c2>
    3922:	8f ef       	ldi	r24, 0xFF	; 255
    3924:	9f ef       	ldi	r25, 0xFF	; 255
    3926:	2b 96       	adiw	r28, 0x0b	; 11
    3928:	cd bf       	out	0x3d, r28	; 61
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	df 91       	pop	r29
    392e:	cf 91       	pop	r28
    3930:	1f 91       	pop	r17
    3932:	0f 91       	pop	r16
    3934:	ff 90       	pop	r15
    3936:	ef 90       	pop	r14
    3938:	df 90       	pop	r13
    393a:	cf 90       	pop	r12
    393c:	bf 90       	pop	r11
    393e:	af 90       	pop	r10
    3940:	9f 90       	pop	r9
    3942:	8f 90       	pop	r8
    3944:	7f 90       	pop	r7
    3946:	6f 90       	pop	r6
    3948:	5f 90       	pop	r5
    394a:	4f 90       	pop	r4
    394c:	3f 90       	pop	r3
    394e:	2f 90       	pop	r2
    3950:	08 95       	ret

00003952 <putval>:
    3952:	20 fd       	sbrc	r18, 0
    3954:	09 c0       	rjmp	.+18     	; 0x3968 <putval+0x16>
    3956:	fc 01       	movw	r30, r24
    3958:	23 fd       	sbrc	r18, 3
    395a:	05 c0       	rjmp	.+10     	; 0x3966 <putval+0x14>
    395c:	22 ff       	sbrs	r18, 2
    395e:	02 c0       	rjmp	.+4      	; 0x3964 <putval+0x12>
    3960:	73 83       	std	Z+3, r23	; 0x03
    3962:	62 83       	std	Z+2, r22	; 0x02
    3964:	51 83       	std	Z+1, r21	; 0x01
    3966:	40 83       	st	Z, r20
    3968:	08 95       	ret

0000396a <mulacc>:
    396a:	44 fd       	sbrc	r20, 4
    396c:	17 c0       	rjmp	.+46     	; 0x399c <mulacc+0x32>
    396e:	46 fd       	sbrc	r20, 6
    3970:	17 c0       	rjmp	.+46     	; 0x39a0 <mulacc+0x36>
    3972:	ab 01       	movw	r20, r22
    3974:	bc 01       	movw	r22, r24
    3976:	da 01       	movw	r26, r20
    3978:	fb 01       	movw	r30, r22
    397a:	aa 0f       	add	r26, r26
    397c:	bb 1f       	adc	r27, r27
    397e:	ee 1f       	adc	r30, r30
    3980:	ff 1f       	adc	r31, r31
    3982:	10 94       	com	r1
    3984:	d1 f7       	brne	.-12     	; 0x397a <mulacc+0x10>
    3986:	4a 0f       	add	r20, r26
    3988:	5b 1f       	adc	r21, r27
    398a:	6e 1f       	adc	r22, r30
    398c:	7f 1f       	adc	r23, r31
    398e:	cb 01       	movw	r24, r22
    3990:	ba 01       	movw	r22, r20
    3992:	66 0f       	add	r22, r22
    3994:	77 1f       	adc	r23, r23
    3996:	88 1f       	adc	r24, r24
    3998:	99 1f       	adc	r25, r25
    399a:	09 c0       	rjmp	.+18     	; 0x39ae <mulacc+0x44>
    399c:	33 e0       	ldi	r19, 0x03	; 3
    399e:	01 c0       	rjmp	.+2      	; 0x39a2 <mulacc+0x38>
    39a0:	34 e0       	ldi	r19, 0x04	; 4
    39a2:	66 0f       	add	r22, r22
    39a4:	77 1f       	adc	r23, r23
    39a6:	88 1f       	adc	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	31 50       	subi	r19, 0x01	; 1
    39ac:	d1 f7       	brne	.-12     	; 0x39a2 <mulacc+0x38>
    39ae:	62 0f       	add	r22, r18
    39b0:	71 1d       	adc	r23, r1
    39b2:	81 1d       	adc	r24, r1
    39b4:	91 1d       	adc	r25, r1
    39b6:	08 95       	ret

000039b8 <skip_spaces>:
    39b8:	0f 93       	push	r16
    39ba:	1f 93       	push	r17
    39bc:	cf 93       	push	r28
    39be:	df 93       	push	r29
    39c0:	8c 01       	movw	r16, r24
    39c2:	c8 01       	movw	r24, r16
    39c4:	f4 d3       	rcall	.+2024   	; 0x41ae <fgetc>
    39c6:	ec 01       	movw	r28, r24
    39c8:	97 fd       	sbrc	r25, 7
    39ca:	06 c0       	rjmp	.+12     	; 0x39d8 <skip_spaces+0x20>
    39cc:	c0 d3       	rcall	.+1920   	; 0x414e <isspace>
    39ce:	89 2b       	or	r24, r25
    39d0:	c1 f7       	brne	.-16     	; 0x39c2 <skip_spaces+0xa>
    39d2:	b8 01       	movw	r22, r16
    39d4:	ce 01       	movw	r24, r28
    39d6:	65 d4       	rcall	.+2250   	; 0x42a2 <ungetc>
    39d8:	ce 01       	movw	r24, r28
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	08 95       	ret

000039e4 <conv_int>:
    39e4:	8f 92       	push	r8
    39e6:	9f 92       	push	r9
    39e8:	af 92       	push	r10
    39ea:	bf 92       	push	r11
    39ec:	ef 92       	push	r14
    39ee:	ff 92       	push	r15
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    39f4:	cf 93       	push	r28
    39f6:	df 93       	push	r29
    39f8:	8c 01       	movw	r16, r24
    39fa:	d6 2f       	mov	r29, r22
    39fc:	7a 01       	movw	r14, r20
    39fe:	b2 2e       	mov	r11, r18
    3a00:	d6 d3       	rcall	.+1964   	; 0x41ae <fgetc>
    3a02:	9c 01       	movw	r18, r24
    3a04:	33 27       	eor	r19, r19
    3a06:	2b 32       	cpi	r18, 0x2B	; 43
    3a08:	31 05       	cpc	r19, r1
    3a0a:	31 f0       	breq	.+12     	; 0x3a18 <conv_int+0x34>
    3a0c:	2d 32       	cpi	r18, 0x2D	; 45
    3a0e:	31 05       	cpc	r19, r1
    3a10:	59 f4       	brne	.+22     	; 0x3a28 <conv_int+0x44>
    3a12:	8b 2d       	mov	r24, r11
    3a14:	80 68       	ori	r24, 0x80	; 128
    3a16:	b8 2e       	mov	r11, r24
    3a18:	d1 50       	subi	r29, 0x01	; 1
    3a1a:	11 f4       	brne	.+4      	; 0x3a20 <conv_int+0x3c>
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	61 c0       	rjmp	.+194    	; 0x3ae2 <conv_int+0xfe>
    3a20:	c8 01       	movw	r24, r16
    3a22:	c5 d3       	rcall	.+1930   	; 0x41ae <fgetc>
    3a24:	97 fd       	sbrc	r25, 7
    3a26:	fa cf       	rjmp	.-12     	; 0x3a1c <conv_int+0x38>
    3a28:	cb 2d       	mov	r28, r11
    3a2a:	cd 7f       	andi	r28, 0xFD	; 253
    3a2c:	2b 2d       	mov	r18, r11
    3a2e:	20 73       	andi	r18, 0x30	; 48
    3a30:	f9 f4       	brne	.+62     	; 0x3a70 <conv_int+0x8c>
    3a32:	80 33       	cpi	r24, 0x30	; 48
    3a34:	e9 f4       	brne	.+58     	; 0x3a70 <conv_int+0x8c>
    3a36:	aa 24       	eor	r10, r10
    3a38:	aa 94       	dec	r10
    3a3a:	ad 0e       	add	r10, r29
    3a3c:	09 f4       	brne	.+2      	; 0x3a40 <conv_int+0x5c>
    3a3e:	3e c0       	rjmp	.+124    	; 0x3abc <conv_int+0xd8>
    3a40:	c8 01       	movw	r24, r16
    3a42:	b5 d3       	rcall	.+1898   	; 0x41ae <fgetc>
    3a44:	97 fd       	sbrc	r25, 7
    3a46:	3a c0       	rjmp	.+116    	; 0x3abc <conv_int+0xd8>
    3a48:	9c 01       	movw	r18, r24
    3a4a:	2f 7d       	andi	r18, 0xDF	; 223
    3a4c:	33 27       	eor	r19, r19
    3a4e:	28 35       	cpi	r18, 0x58	; 88
    3a50:	31 05       	cpc	r19, r1
    3a52:	41 f4       	brne	.+16     	; 0x3a64 <conv_int+0x80>
    3a54:	c2 64       	ori	r28, 0x42	; 66
    3a56:	d2 50       	subi	r29, 0x02	; 2
    3a58:	89 f1       	breq	.+98     	; 0x3abc <conv_int+0xd8>
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	a8 d3       	rcall	.+1872   	; 0x41ae <fgetc>
    3a5e:	97 ff       	sbrs	r25, 7
    3a60:	07 c0       	rjmp	.+14     	; 0x3a70 <conv_int+0x8c>
    3a62:	2c c0       	rjmp	.+88     	; 0x3abc <conv_int+0xd8>
    3a64:	b6 fe       	sbrs	r11, 6
    3a66:	02 c0       	rjmp	.+4      	; 0x3a6c <conv_int+0x88>
    3a68:	c2 60       	ori	r28, 0x02	; 2
    3a6a:	01 c0       	rjmp	.+2      	; 0x3a6e <conv_int+0x8a>
    3a6c:	c2 61       	ori	r28, 0x12	; 18
    3a6e:	da 2d       	mov	r29, r10
    3a70:	81 2c       	mov	r8, r1
    3a72:	91 2c       	mov	r9, r1
    3a74:	54 01       	movw	r10, r8
    3a76:	20 ed       	ldi	r18, 0xD0	; 208
    3a78:	28 0f       	add	r18, r24
    3a7a:	28 30       	cpi	r18, 0x08	; 8
    3a7c:	78 f0       	brcs	.+30     	; 0x3a9c <conv_int+0xb8>
    3a7e:	c4 ff       	sbrs	r28, 4
    3a80:	03 c0       	rjmp	.+6      	; 0x3a88 <conv_int+0xa4>
    3a82:	b8 01       	movw	r22, r16
    3a84:	0e d4       	rcall	.+2076   	; 0x42a2 <ungetc>
    3a86:	17 c0       	rjmp	.+46     	; 0x3ab6 <conv_int+0xd2>
    3a88:	2a 30       	cpi	r18, 0x0A	; 10
    3a8a:	40 f0       	brcs	.+16     	; 0x3a9c <conv_int+0xb8>
    3a8c:	c6 ff       	sbrs	r28, 6
    3a8e:	f9 cf       	rjmp	.-14     	; 0x3a82 <conv_int+0x9e>
    3a90:	2f 7d       	andi	r18, 0xDF	; 223
    3a92:	3f ee       	ldi	r19, 0xEF	; 239
    3a94:	32 0f       	add	r19, r18
    3a96:	36 30       	cpi	r19, 0x06	; 6
    3a98:	a0 f7       	brcc	.-24     	; 0x3a82 <conv_int+0x9e>
    3a9a:	27 50       	subi	r18, 0x07	; 7
    3a9c:	4c 2f       	mov	r20, r28
    3a9e:	c5 01       	movw	r24, r10
    3aa0:	b4 01       	movw	r22, r8
    3aa2:	63 df       	rcall	.-314    	; 0x396a <mulacc>
    3aa4:	4b 01       	movw	r8, r22
    3aa6:	5c 01       	movw	r10, r24
    3aa8:	c2 60       	ori	r28, 0x02	; 2
    3aaa:	d1 50       	subi	r29, 0x01	; 1
    3aac:	51 f0       	breq	.+20     	; 0x3ac2 <conv_int+0xde>
    3aae:	c8 01       	movw	r24, r16
    3ab0:	7e d3       	rcall	.+1788   	; 0x41ae <fgetc>
    3ab2:	97 ff       	sbrs	r25, 7
    3ab4:	e0 cf       	rjmp	.-64     	; 0x3a76 <conv_int+0x92>
    3ab6:	c1 fd       	sbrc	r28, 1
    3ab8:	04 c0       	rjmp	.+8      	; 0x3ac2 <conv_int+0xde>
    3aba:	b0 cf       	rjmp	.-160    	; 0x3a1c <conv_int+0x38>
    3abc:	81 2c       	mov	r8, r1
    3abe:	91 2c       	mov	r9, r1
    3ac0:	54 01       	movw	r10, r8
    3ac2:	c7 ff       	sbrs	r28, 7
    3ac4:	08 c0       	rjmp	.+16     	; 0x3ad6 <conv_int+0xf2>
    3ac6:	b0 94       	com	r11
    3ac8:	a0 94       	com	r10
    3aca:	90 94       	com	r9
    3acc:	80 94       	com	r8
    3ace:	81 1c       	adc	r8, r1
    3ad0:	91 1c       	adc	r9, r1
    3ad2:	a1 1c       	adc	r10, r1
    3ad4:	b1 1c       	adc	r11, r1
    3ad6:	2c 2f       	mov	r18, r28
    3ad8:	b5 01       	movw	r22, r10
    3ada:	a4 01       	movw	r20, r8
    3adc:	c7 01       	movw	r24, r14
    3ade:	39 df       	rcall	.-398    	; 0x3952 <putval>
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	df 91       	pop	r29
    3ae4:	cf 91       	pop	r28
    3ae6:	1f 91       	pop	r17
    3ae8:	0f 91       	pop	r16
    3aea:	ff 90       	pop	r15
    3aec:	ef 90       	pop	r14
    3aee:	bf 90       	pop	r11
    3af0:	af 90       	pop	r10
    3af2:	9f 90       	pop	r9
    3af4:	8f 90       	pop	r8
    3af6:	08 95       	ret

00003af8 <conv_brk>:
    3af8:	5f 92       	push	r5
    3afa:	6f 92       	push	r6
    3afc:	7f 92       	push	r7
    3afe:	8f 92       	push	r8
    3b00:	9f 92       	push	r9
    3b02:	af 92       	push	r10
    3b04:	bf 92       	push	r11
    3b06:	cf 92       	push	r12
    3b08:	df 92       	push	r13
    3b0a:	ef 92       	push	r14
    3b0c:	ff 92       	push	r15
    3b0e:	0f 93       	push	r16
    3b10:	1f 93       	push	r17
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	cd b7       	in	r28, 0x3d	; 61
    3b18:	de b7       	in	r29, 0x3e	; 62
    3b1a:	a0 97       	sbiw	r28, 0x20	; 32
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	5c 01       	movw	r10, r24
    3b22:	96 2e       	mov	r9, r22
    3b24:	7a 01       	movw	r14, r20
    3b26:	f9 01       	movw	r30, r18
    3b28:	8e 01       	movw	r16, r28
    3b2a:	0f 5f       	subi	r16, 0xFF	; 255
    3b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2e:	68 01       	movw	r12, r16
    3b30:	80 e2       	ldi	r24, 0x20	; 32
    3b32:	d8 01       	movw	r26, r16
    3b34:	1d 92       	st	X+, r1
    3b36:	8a 95       	dec	r24
    3b38:	e9 f7       	brne	.-6      	; 0x3b34 <conv_brk+0x3c>
    3b3a:	d5 01       	movw	r26, r10
    3b3c:	13 96       	adiw	r26, 0x03	; 3
    3b3e:	8c 90       	ld	r8, X
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	61 2c       	mov	r6, r1
    3b46:	71 2c       	mov	r7, r1
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	61 e0       	ldi	r22, 0x01	; 1
    3b4c:	70 e0       	ldi	r23, 0x00	; 0
    3b4e:	83 fc       	sbrc	r8, 3
    3b50:	25 91       	lpm	r18, Z+
    3b52:	83 fe       	sbrs	r8, 3
    3b54:	21 91       	ld	r18, Z+
    3b56:	8f 01       	movw	r16, r30
    3b58:	52 2e       	mov	r5, r18
    3b5a:	21 11       	cpse	r18, r1
    3b5c:	03 c0       	rjmp	.+6      	; 0x3b64 <conv_brk+0x6c>
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	90 c0       	rjmp	.+288    	; 0x3c84 <conv_brk+0x18c>
    3b64:	2e 35       	cpi	r18, 0x5E	; 94
    3b66:	11 f4       	brne	.+4      	; 0x3b6c <conv_brk+0x74>
    3b68:	00 97       	sbiw	r24, 0x00	; 0
    3b6a:	51 f1       	breq	.+84     	; 0x3bc0 <conv_brk+0xc8>
    3b6c:	43 2f       	mov	r20, r19
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	48 17       	cp	r20, r24
    3b72:	59 07       	cpc	r21, r25
    3b74:	3c f4       	brge	.+14     	; 0x3b84 <conv_brk+0x8c>
    3b76:	2d 35       	cpi	r18, 0x5D	; 93
    3b78:	59 f1       	breq	.+86     	; 0x3bd0 <conv_brk+0xd8>
    3b7a:	2d 32       	cpi	r18, 0x2D	; 45
    3b7c:	19 f4       	brne	.+6      	; 0x3b84 <conv_brk+0x8c>
    3b7e:	77 20       	and	r7, r7
    3b80:	09 f1       	breq	.+66     	; 0x3bc4 <conv_brk+0xcc>
    3b82:	03 c0       	rjmp	.+6      	; 0x3b8a <conv_brk+0x92>
    3b84:	77 20       	and	r7, r7
    3b86:	09 f4       	brne	.+2      	; 0x3b8a <conv_brk+0x92>
    3b88:	68 c0       	rjmp	.+208    	; 0x3c5a <conv_brk+0x162>
    3b8a:	45 2d       	mov	r20, r5
    3b8c:	46 95       	lsr	r20
    3b8e:	46 95       	lsr	r20
    3b90:	46 95       	lsr	r20
    3b92:	d6 01       	movw	r26, r12
    3b94:	a4 0f       	add	r26, r20
    3b96:	b1 1d       	adc	r27, r1
    3b98:	45 2d       	mov	r20, r5
    3b9a:	47 70       	andi	r20, 0x07	; 7
    3b9c:	8b 01       	movw	r16, r22
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <conv_brk+0xac>
    3ba0:	00 0f       	add	r16, r16
    3ba2:	11 1f       	adc	r17, r17
    3ba4:	4a 95       	dec	r20
    3ba6:	e2 f7       	brpl	.-8      	; 0x3ba0 <conv_brk+0xa8>
    3ba8:	a8 01       	movw	r20, r16
    3baa:	5c 91       	ld	r21, X
    3bac:	45 2b       	or	r20, r21
    3bae:	4c 93       	st	X, r20
    3bb0:	65 14       	cp	r6, r5
    3bb2:	59 f0       	breq	.+22     	; 0x3bca <conv_brk+0xd2>
    3bb4:	56 14       	cp	r5, r6
    3bb6:	10 f4       	brcc	.+4      	; 0x3bbc <conv_brk+0xc4>
    3bb8:	53 94       	inc	r5
    3bba:	e7 cf       	rjmp	.-50     	; 0x3b8a <conv_brk+0x92>
    3bbc:	5a 94       	dec	r5
    3bbe:	e5 cf       	rjmp	.-54     	; 0x3b8a <conv_brk+0x92>
    3bc0:	31 e0       	ldi	r19, 0x01	; 1
    3bc2:	04 c0       	rjmp	.+8      	; 0x3bcc <conv_brk+0xd4>
    3bc4:	77 24       	eor	r7, r7
    3bc6:	73 94       	inc	r7
    3bc8:	01 c0       	rjmp	.+2      	; 0x3bcc <conv_brk+0xd4>
    3bca:	71 2c       	mov	r7, r1
    3bcc:	01 96       	adiw	r24, 0x01	; 1
    3bce:	bf cf       	rjmp	.-130    	; 0x3b4e <conv_brk+0x56>
    3bd0:	77 20       	and	r7, r7
    3bd2:	19 f0       	breq	.+6      	; 0x3bda <conv_brk+0xe2>
    3bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd6:	80 62       	ori	r24, 0x20	; 32
    3bd8:	8e 83       	std	Y+6, r24	; 0x06
    3bda:	31 11       	cpse	r19, r1
    3bdc:	03 c0       	rjmp	.+6      	; 0x3be4 <conv_brk+0xec>
    3bde:	88 24       	eor	r8, r8
    3be0:	83 94       	inc	r8
    3be2:	17 c0       	rjmp	.+46     	; 0x3c12 <conv_brk+0x11a>
    3be4:	f6 01       	movw	r30, r12
    3be6:	9e 01       	movw	r18, r28
    3be8:	2f 5d       	subi	r18, 0xDF	; 223
    3bea:	3f 4f       	sbci	r19, 0xFF	; 255
    3bec:	80 81       	ld	r24, Z
    3bee:	80 95       	com	r24
    3bf0:	81 93       	st	Z+, r24
    3bf2:	2e 17       	cp	r18, r30
    3bf4:	3f 07       	cpc	r19, r31
    3bf6:	d1 f7       	brne	.-12     	; 0x3bec <conv_brk+0xf4>
    3bf8:	f2 cf       	rjmp	.-28     	; 0x3bde <conv_brk+0xe6>
    3bfa:	e1 14       	cp	r14, r1
    3bfc:	f1 04       	cpc	r15, r1
    3bfe:	29 f0       	breq	.+10     	; 0x3c0a <conv_brk+0x112>
    3c00:	d7 01       	movw	r26, r14
    3c02:	8c 93       	st	X, r24
    3c04:	f7 01       	movw	r30, r14
    3c06:	31 96       	adiw	r30, 0x01	; 1
    3c08:	7f 01       	movw	r14, r30
    3c0a:	9a 94       	dec	r9
    3c0c:	81 2c       	mov	r8, r1
    3c0e:	99 20       	and	r9, r9
    3c10:	e9 f0       	breq	.+58     	; 0x3c4c <conv_brk+0x154>
    3c12:	c5 01       	movw	r24, r10
    3c14:	cc d2       	rcall	.+1432   	; 0x41ae <fgetc>
    3c16:	97 fd       	sbrc	r25, 7
    3c18:	17 c0       	rjmp	.+46     	; 0x3c48 <conv_brk+0x150>
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	ff 27       	eor	r31, r31
    3c1e:	23 e0       	ldi	r18, 0x03	; 3
    3c20:	f5 95       	asr	r31
    3c22:	e7 95       	ror	r30
    3c24:	2a 95       	dec	r18
    3c26:	e1 f7       	brne	.-8      	; 0x3c20 <conv_brk+0x128>
    3c28:	ec 0d       	add	r30, r12
    3c2a:	fd 1d       	adc	r31, r13
    3c2c:	20 81       	ld	r18, Z
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	ac 01       	movw	r20, r24
    3c32:	47 70       	andi	r20, 0x07	; 7
    3c34:	55 27       	eor	r21, r21
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <conv_brk+0x144>
    3c38:	35 95       	asr	r19
    3c3a:	27 95       	ror	r18
    3c3c:	4a 95       	dec	r20
    3c3e:	e2 f7       	brpl	.-8      	; 0x3c38 <conv_brk+0x140>
    3c40:	20 fd       	sbrc	r18, 0
    3c42:	db cf       	rjmp	.-74     	; 0x3bfa <conv_brk+0x102>
    3c44:	b5 01       	movw	r22, r10
    3c46:	2d d3       	rcall	.+1626   	; 0x42a2 <ungetc>
    3c48:	81 10       	cpse	r8, r1
    3c4a:	89 cf       	rjmp	.-238    	; 0x3b5e <conv_brk+0x66>
    3c4c:	e1 14       	cp	r14, r1
    3c4e:	f1 04       	cpc	r15, r1
    3c50:	11 f0       	breq	.+4      	; 0x3c56 <conv_brk+0x15e>
    3c52:	d7 01       	movw	r26, r14
    3c54:	1c 92       	st	X, r1
    3c56:	c8 01       	movw	r24, r16
    3c58:	15 c0       	rjmp	.+42     	; 0x3c84 <conv_brk+0x18c>
    3c5a:	42 2f       	mov	r20, r18
    3c5c:	46 95       	lsr	r20
    3c5e:	46 95       	lsr	r20
    3c60:	46 95       	lsr	r20
    3c62:	d6 01       	movw	r26, r12
    3c64:	a4 0f       	add	r26, r20
    3c66:	b1 1d       	adc	r27, r1
    3c68:	42 2f       	mov	r20, r18
    3c6a:	47 70       	andi	r20, 0x07	; 7
    3c6c:	8b 01       	movw	r16, r22
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <conv_brk+0x17c>
    3c70:	00 0f       	add	r16, r16
    3c72:	11 1f       	adc	r17, r17
    3c74:	4a 95       	dec	r20
    3c76:	e2 f7       	brpl	.-8      	; 0x3c70 <conv_brk+0x178>
    3c78:	a8 01       	movw	r20, r16
    3c7a:	5c 91       	ld	r21, X
    3c7c:	45 2b       	or	r20, r21
    3c7e:	4c 93       	st	X, r20
    3c80:	62 2e       	mov	r6, r18
    3c82:	a4 cf       	rjmp	.-184    	; 0x3bcc <conv_brk+0xd4>
    3c84:	a0 96       	adiw	r28, 0x20	; 32
    3c86:	cd bf       	out	0x3d, r28	; 61
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	ff 90       	pop	r15
    3c94:	ef 90       	pop	r14
    3c96:	df 90       	pop	r13
    3c98:	cf 90       	pop	r12
    3c9a:	bf 90       	pop	r11
    3c9c:	af 90       	pop	r10
    3c9e:	9f 90       	pop	r9
    3ca0:	8f 90       	pop	r8
    3ca2:	7f 90       	pop	r7
    3ca4:	6f 90       	pop	r6
    3ca6:	5f 90       	pop	r5
    3ca8:	08 95       	ret

00003caa <vfscanf>:
    3caa:	5f 92       	push	r5
    3cac:	6f 92       	push	r6
    3cae:	7f 92       	push	r7
    3cb0:	8f 92       	push	r8
    3cb2:	9f 92       	push	r9
    3cb4:	af 92       	push	r10
    3cb6:	bf 92       	push	r11
    3cb8:	cf 92       	push	r12
    3cba:	df 92       	push	r13
    3cbc:	ef 92       	push	r14
    3cbe:	ff 92       	push	r15
    3cc0:	0f 93       	push	r16
    3cc2:	1f 93       	push	r17
    3cc4:	cf 93       	push	r28
    3cc6:	df 93       	push	r29
    3cc8:	6c 01       	movw	r12, r24
    3cca:	eb 01       	movw	r28, r22
    3ccc:	5a 01       	movw	r10, r20
    3cce:	fc 01       	movw	r30, r24
    3cd0:	16 82       	std	Z+6, r1	; 0x06
    3cd2:	17 82       	std	Z+7, r1	; 0x07
    3cd4:	51 2c       	mov	r5, r1
    3cd6:	f6 01       	movw	r30, r12
    3cd8:	e3 80       	ldd	r14, Z+3	; 0x03
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e3 fc       	sbrc	r14, 3
    3cde:	85 91       	lpm	r24, Z+
    3ce0:	e3 fe       	sbrs	r14, 3
    3ce2:	81 91       	ld	r24, Z+
    3ce4:	18 2f       	mov	r17, r24
    3ce6:	ef 01       	movw	r28, r30
    3ce8:	88 23       	and	r24, r24
    3cea:	09 f4       	brne	.+2      	; 0x3cee <vfscanf+0x44>
    3cec:	e0 c0       	rjmp	.+448    	; 0x3eae <vfscanf+0x204>
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	2e d2       	rcall	.+1116   	; 0x414e <isspace>
    3cf2:	89 2b       	or	r24, r25
    3cf4:	19 f0       	breq	.+6      	; 0x3cfc <vfscanf+0x52>
    3cf6:	c6 01       	movw	r24, r12
    3cf8:	5f de       	rcall	.-834    	; 0x39b8 <skip_spaces>
    3cfa:	ed cf       	rjmp	.-38     	; 0x3cd6 <vfscanf+0x2c>
    3cfc:	15 32       	cpi	r17, 0x25	; 37
    3cfe:	41 f4       	brne	.+16     	; 0x3d10 <vfscanf+0x66>
    3d00:	fe 01       	movw	r30, r28
    3d02:	e3 fc       	sbrc	r14, 3
    3d04:	15 91       	lpm	r17, Z+
    3d06:	e3 fe       	sbrs	r14, 3
    3d08:	11 91       	ld	r17, Z+
    3d0a:	ef 01       	movw	r28, r30
    3d0c:	15 32       	cpi	r17, 0x25	; 37
    3d0e:	71 f4       	brne	.+28     	; 0x3d2c <vfscanf+0x82>
    3d10:	c6 01       	movw	r24, r12
    3d12:	4d d2       	rcall	.+1178   	; 0x41ae <fgetc>
    3d14:	97 fd       	sbrc	r25, 7
    3d16:	c9 c0       	rjmp	.+402    	; 0x3eaa <vfscanf+0x200>
    3d18:	41 2f       	mov	r20, r17
    3d1a:	50 e0       	ldi	r21, 0x00	; 0
    3d1c:	9c 01       	movw	r18, r24
    3d1e:	33 27       	eor	r19, r19
    3d20:	24 17       	cp	r18, r20
    3d22:	35 07       	cpc	r19, r21
    3d24:	c1 f2       	breq	.-80     	; 0x3cd6 <vfscanf+0x2c>
    3d26:	b6 01       	movw	r22, r12
    3d28:	bc d2       	rcall	.+1400   	; 0x42a2 <ungetc>
    3d2a:	c1 c0       	rjmp	.+386    	; 0x3eae <vfscanf+0x204>
    3d2c:	1a 32       	cpi	r17, 0x2A	; 42
    3d2e:	39 f4       	brne	.+14     	; 0x3d3e <vfscanf+0x94>
    3d30:	e3 fc       	sbrc	r14, 3
    3d32:	15 91       	lpm	r17, Z+
    3d34:	e3 fe       	sbrs	r14, 3
    3d36:	11 91       	ld	r17, Z+
    3d38:	ef 01       	movw	r28, r30
    3d3a:	01 e0       	ldi	r16, 0x01	; 1
    3d3c:	01 c0       	rjmp	.+2      	; 0x3d40 <vfscanf+0x96>
    3d3e:	00 e0       	ldi	r16, 0x00	; 0
    3d40:	f1 2c       	mov	r15, r1
    3d42:	20 ed       	ldi	r18, 0xD0	; 208
    3d44:	21 0f       	add	r18, r17
    3d46:	2a 30       	cpi	r18, 0x0A	; 10
    3d48:	78 f4       	brcc	.+30     	; 0x3d68 <vfscanf+0xbe>
    3d4a:	02 60       	ori	r16, 0x02	; 2
    3d4c:	6f 2d       	mov	r22, r15
    3d4e:	70 e0       	ldi	r23, 0x00	; 0
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	40 e2       	ldi	r20, 0x20	; 32
    3d56:	09 de       	rcall	.-1006   	; 0x396a <mulacc>
    3d58:	f6 2e       	mov	r15, r22
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	e3 fc       	sbrc	r14, 3
    3d5e:	15 91       	lpm	r17, Z+
    3d60:	e3 fe       	sbrs	r14, 3
    3d62:	11 91       	ld	r17, Z+
    3d64:	ef 01       	movw	r28, r30
    3d66:	ed cf       	rjmp	.-38     	; 0x3d42 <vfscanf+0x98>
    3d68:	01 ff       	sbrs	r16, 1
    3d6a:	03 c0       	rjmp	.+6      	; 0x3d72 <vfscanf+0xc8>
    3d6c:	f1 10       	cpse	r15, r1
    3d6e:	03 c0       	rjmp	.+6      	; 0x3d76 <vfscanf+0xcc>
    3d70:	9e c0       	rjmp	.+316    	; 0x3eae <vfscanf+0x204>
    3d72:	ff 24       	eor	r15, r15
    3d74:	fa 94       	dec	r15
    3d76:	18 36       	cpi	r17, 0x68	; 104
    3d78:	19 f0       	breq	.+6      	; 0x3d80 <vfscanf+0xd6>
    3d7a:	1c 36       	cpi	r17, 0x6C	; 108
    3d7c:	51 f0       	breq	.+20     	; 0x3d92 <vfscanf+0xe8>
    3d7e:	10 c0       	rjmp	.+32     	; 0x3da0 <vfscanf+0xf6>
    3d80:	fe 01       	movw	r30, r28
    3d82:	e3 fc       	sbrc	r14, 3
    3d84:	15 91       	lpm	r17, Z+
    3d86:	e3 fe       	sbrs	r14, 3
    3d88:	11 91       	ld	r17, Z+
    3d8a:	ef 01       	movw	r28, r30
    3d8c:	18 36       	cpi	r17, 0x68	; 104
    3d8e:	41 f4       	brne	.+16     	; 0x3da0 <vfscanf+0xf6>
    3d90:	08 60       	ori	r16, 0x08	; 8
    3d92:	04 60       	ori	r16, 0x04	; 4
    3d94:	fe 01       	movw	r30, r28
    3d96:	e3 fc       	sbrc	r14, 3
    3d98:	15 91       	lpm	r17, Z+
    3d9a:	e3 fe       	sbrs	r14, 3
    3d9c:	11 91       	ld	r17, Z+
    3d9e:	ef 01       	movw	r28, r30
    3da0:	11 23       	and	r17, r17
    3da2:	09 f4       	brne	.+2      	; 0x3da6 <vfscanf+0xfc>
    3da4:	84 c0       	rjmp	.+264    	; 0x3eae <vfscanf+0x204>
    3da6:	61 2f       	mov	r22, r17
    3da8:	70 e0       	ldi	r23, 0x00	; 0
    3daa:	8e e7       	ldi	r24, 0x7E	; 126
    3dac:	92 e0       	ldi	r25, 0x02	; 2
    3dae:	d7 d1       	rcall	.+942    	; 0x415e <strchr_P>
    3db0:	89 2b       	or	r24, r25
    3db2:	09 f4       	brne	.+2      	; 0x3db6 <vfscanf+0x10c>
    3db4:	7c c0       	rjmp	.+248    	; 0x3eae <vfscanf+0x204>
    3db6:	00 fd       	sbrc	r16, 0
    3db8:	07 c0       	rjmp	.+14     	; 0x3dc8 <vfscanf+0x11e>
    3dba:	f5 01       	movw	r30, r10
    3dbc:	80 80       	ld	r8, Z
    3dbe:	91 80       	ldd	r9, Z+1	; 0x01
    3dc0:	c5 01       	movw	r24, r10
    3dc2:	02 96       	adiw	r24, 0x02	; 2
    3dc4:	5c 01       	movw	r10, r24
    3dc6:	02 c0       	rjmp	.+4      	; 0x3dcc <vfscanf+0x122>
    3dc8:	81 2c       	mov	r8, r1
    3dca:	91 2c       	mov	r9, r1
    3dcc:	1e 36       	cpi	r17, 0x6E	; 110
    3dce:	49 f4       	brne	.+18     	; 0x3de2 <vfscanf+0x138>
    3dd0:	f6 01       	movw	r30, r12
    3dd2:	46 81       	ldd	r20, Z+6	; 0x06
    3dd4:	57 81       	ldd	r21, Z+7	; 0x07
    3dd6:	60 e0       	ldi	r22, 0x00	; 0
    3dd8:	70 e0       	ldi	r23, 0x00	; 0
    3dda:	20 2f       	mov	r18, r16
    3ddc:	c4 01       	movw	r24, r8
    3dde:	b9 dd       	rcall	.-1166   	; 0x3952 <putval>
    3de0:	7a cf       	rjmp	.-268    	; 0x3cd6 <vfscanf+0x2c>
    3de2:	13 36       	cpi	r17, 0x63	; 99
    3de4:	a1 f4       	brne	.+40     	; 0x3e0e <vfscanf+0x164>
    3de6:	01 fd       	sbrc	r16, 1
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <vfscanf+0x144>
    3dea:	ff 24       	eor	r15, r15
    3dec:	f3 94       	inc	r15
    3dee:	c6 01       	movw	r24, r12
    3df0:	de d1       	rcall	.+956    	; 0x41ae <fgetc>
    3df2:	97 fd       	sbrc	r25, 7
    3df4:	5a c0       	rjmp	.+180    	; 0x3eaa <vfscanf+0x200>
    3df6:	81 14       	cp	r8, r1
    3df8:	91 04       	cpc	r9, r1
    3dfa:	29 f0       	breq	.+10     	; 0x3e06 <vfscanf+0x15c>
    3dfc:	f4 01       	movw	r30, r8
    3dfe:	80 83       	st	Z, r24
    3e00:	c4 01       	movw	r24, r8
    3e02:	01 96       	adiw	r24, 0x01	; 1
    3e04:	4c 01       	movw	r8, r24
    3e06:	fa 94       	dec	r15
    3e08:	f1 10       	cpse	r15, r1
    3e0a:	f1 cf       	rjmp	.-30     	; 0x3dee <vfscanf+0x144>
    3e0c:	4a c0       	rjmp	.+148    	; 0x3ea2 <vfscanf+0x1f8>
    3e0e:	1b 35       	cpi	r17, 0x5B	; 91
    3e10:	51 f4       	brne	.+20     	; 0x3e26 <vfscanf+0x17c>
    3e12:	9e 01       	movw	r18, r28
    3e14:	a4 01       	movw	r20, r8
    3e16:	6f 2d       	mov	r22, r15
    3e18:	c6 01       	movw	r24, r12
    3e1a:	6e de       	rcall	.-804    	; 0x3af8 <conv_brk>
    3e1c:	ec 01       	movw	r28, r24
    3e1e:	89 2b       	or	r24, r25
    3e20:	09 f0       	breq	.+2      	; 0x3e24 <vfscanf+0x17a>
    3e22:	3f c0       	rjmp	.+126    	; 0x3ea2 <vfscanf+0x1f8>
    3e24:	39 c0       	rjmp	.+114    	; 0x3e98 <vfscanf+0x1ee>
    3e26:	c6 01       	movw	r24, r12
    3e28:	c7 dd       	rcall	.-1138   	; 0x39b8 <skip_spaces>
    3e2a:	97 fd       	sbrc	r25, 7
    3e2c:	3e c0       	rjmp	.+124    	; 0x3eaa <vfscanf+0x200>
    3e2e:	1f 36       	cpi	r17, 0x6F	; 111
    3e30:	49 f1       	breq	.+82     	; 0x3e84 <vfscanf+0x1da>
    3e32:	28 f4       	brcc	.+10     	; 0x3e3e <vfscanf+0x194>
    3e34:	14 36       	cpi	r17, 0x64	; 100
    3e36:	21 f1       	breq	.+72     	; 0x3e80 <vfscanf+0x1d6>
    3e38:	19 36       	cpi	r17, 0x69	; 105
    3e3a:	39 f1       	breq	.+78     	; 0x3e8a <vfscanf+0x1e0>
    3e3c:	25 c0       	rjmp	.+74     	; 0x3e88 <vfscanf+0x1de>
    3e3e:	13 37       	cpi	r17, 0x73	; 115
    3e40:	71 f0       	breq	.+28     	; 0x3e5e <vfscanf+0x1b4>
    3e42:	15 37       	cpi	r17, 0x75	; 117
    3e44:	e9 f0       	breq	.+58     	; 0x3e80 <vfscanf+0x1d6>
    3e46:	20 c0       	rjmp	.+64     	; 0x3e88 <vfscanf+0x1de>
    3e48:	81 14       	cp	r8, r1
    3e4a:	91 04       	cpc	r9, r1
    3e4c:	29 f0       	breq	.+10     	; 0x3e58 <vfscanf+0x1ae>
    3e4e:	f4 01       	movw	r30, r8
    3e50:	60 82       	st	Z, r6
    3e52:	c4 01       	movw	r24, r8
    3e54:	01 96       	adiw	r24, 0x01	; 1
    3e56:	4c 01       	movw	r8, r24
    3e58:	fa 94       	dec	r15
    3e5a:	ff 20       	and	r15, r15
    3e5c:	59 f0       	breq	.+22     	; 0x3e74 <vfscanf+0x1ca>
    3e5e:	c6 01       	movw	r24, r12
    3e60:	a6 d1       	rcall	.+844    	; 0x41ae <fgetc>
    3e62:	3c 01       	movw	r6, r24
    3e64:	97 fd       	sbrc	r25, 7
    3e66:	06 c0       	rjmp	.+12     	; 0x3e74 <vfscanf+0x1ca>
    3e68:	72 d1       	rcall	.+740    	; 0x414e <isspace>
    3e6a:	89 2b       	or	r24, r25
    3e6c:	69 f3       	breq	.-38     	; 0x3e48 <vfscanf+0x19e>
    3e6e:	b6 01       	movw	r22, r12
    3e70:	c3 01       	movw	r24, r6
    3e72:	17 d2       	rcall	.+1070   	; 0x42a2 <ungetc>
    3e74:	81 14       	cp	r8, r1
    3e76:	91 04       	cpc	r9, r1
    3e78:	a1 f0       	breq	.+40     	; 0x3ea2 <vfscanf+0x1f8>
    3e7a:	f4 01       	movw	r30, r8
    3e7c:	10 82       	st	Z, r1
    3e7e:	11 c0       	rjmp	.+34     	; 0x3ea2 <vfscanf+0x1f8>
    3e80:	00 62       	ori	r16, 0x20	; 32
    3e82:	03 c0       	rjmp	.+6      	; 0x3e8a <vfscanf+0x1e0>
    3e84:	00 61       	ori	r16, 0x10	; 16
    3e86:	01 c0       	rjmp	.+2      	; 0x3e8a <vfscanf+0x1e0>
    3e88:	00 64       	ori	r16, 0x40	; 64
    3e8a:	20 2f       	mov	r18, r16
    3e8c:	a4 01       	movw	r20, r8
    3e8e:	6f 2d       	mov	r22, r15
    3e90:	c6 01       	movw	r24, r12
    3e92:	a8 dd       	rcall	.-1200   	; 0x39e4 <conv_int>
    3e94:	81 11       	cpse	r24, r1
    3e96:	05 c0       	rjmp	.+10     	; 0x3ea2 <vfscanf+0x1f8>
    3e98:	f6 01       	movw	r30, r12
    3e9a:	83 81       	ldd	r24, Z+3	; 0x03
    3e9c:	80 73       	andi	r24, 0x30	; 48
    3e9e:	29 f4       	brne	.+10     	; 0x3eaa <vfscanf+0x200>
    3ea0:	06 c0       	rjmp	.+12     	; 0x3eae <vfscanf+0x204>
    3ea2:	00 fd       	sbrc	r16, 0
    3ea4:	18 cf       	rjmp	.-464    	; 0x3cd6 <vfscanf+0x2c>
    3ea6:	53 94       	inc	r5
    3ea8:	16 cf       	rjmp	.-468    	; 0x3cd6 <vfscanf+0x2c>
    3eaa:	55 20       	and	r5, r5
    3eac:	19 f0       	breq	.+6      	; 0x3eb4 <vfscanf+0x20a>
    3eae:	85 2d       	mov	r24, r5
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	02 c0       	rjmp	.+4      	; 0x3eb8 <vfscanf+0x20e>
    3eb4:	8f ef       	ldi	r24, 0xFF	; 255
    3eb6:	9f ef       	ldi	r25, 0xFF	; 255
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	1f 91       	pop	r17
    3ebe:	0f 91       	pop	r16
    3ec0:	ff 90       	pop	r15
    3ec2:	ef 90       	pop	r14
    3ec4:	df 90       	pop	r13
    3ec6:	cf 90       	pop	r12
    3ec8:	bf 90       	pop	r11
    3eca:	af 90       	pop	r10
    3ecc:	9f 90       	pop	r9
    3ece:	8f 90       	pop	r8
    3ed0:	7f 90       	pop	r7
    3ed2:	6f 90       	pop	r6
    3ed4:	5f 90       	pop	r5
    3ed6:	08 95       	ret

00003ed8 <calloc>:
    3ed8:	0f 93       	push	r16
    3eda:	1f 93       	push	r17
    3edc:	cf 93       	push	r28
    3ede:	df 93       	push	r29
    3ee0:	86 9f       	mul	r24, r22
    3ee2:	80 01       	movw	r16, r0
    3ee4:	87 9f       	mul	r24, r23
    3ee6:	10 0d       	add	r17, r0
    3ee8:	96 9f       	mul	r25, r22
    3eea:	10 0d       	add	r17, r0
    3eec:	11 24       	eor	r1, r1
    3eee:	c8 01       	movw	r24, r16
    3ef0:	0d d0       	rcall	.+26     	; 0x3f0c <malloc>
    3ef2:	ec 01       	movw	r28, r24
    3ef4:	00 97       	sbiw	r24, 0x00	; 0
    3ef6:	21 f0       	breq	.+8      	; 0x3f00 <calloc+0x28>
    3ef8:	a8 01       	movw	r20, r16
    3efa:	60 e0       	ldi	r22, 0x00	; 0
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	45 d1       	rcall	.+650    	; 0x418a <memset>
    3f00:	ce 01       	movw	r24, r28
    3f02:	df 91       	pop	r29
    3f04:	cf 91       	pop	r28
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	08 95       	ret

00003f0c <malloc>:
    3f0c:	0f 93       	push	r16
    3f0e:	1f 93       	push	r17
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	82 30       	cpi	r24, 0x02	; 2
    3f16:	91 05       	cpc	r25, r1
    3f18:	10 f4       	brcc	.+4      	; 0x3f1e <malloc+0x12>
    3f1a:	82 e0       	ldi	r24, 0x02	; 2
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	e0 91 a6 21 	lds	r30, 0x21A6	; 0x8021a6 <__flp>
    3f22:	f0 91 a7 21 	lds	r31, 0x21A7	; 0x8021a7 <__flp+0x1>
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	a0 e0       	ldi	r26, 0x00	; 0
    3f2c:	b0 e0       	ldi	r27, 0x00	; 0
    3f2e:	30 97       	sbiw	r30, 0x00	; 0
    3f30:	19 f1       	breq	.+70     	; 0x3f78 <malloc+0x6c>
    3f32:	40 81       	ld	r20, Z
    3f34:	51 81       	ldd	r21, Z+1	; 0x01
    3f36:	02 81       	ldd	r16, Z+2	; 0x02
    3f38:	13 81       	ldd	r17, Z+3	; 0x03
    3f3a:	48 17       	cp	r20, r24
    3f3c:	59 07       	cpc	r21, r25
    3f3e:	c8 f0       	brcs	.+50     	; 0x3f72 <malloc+0x66>
    3f40:	84 17       	cp	r24, r20
    3f42:	95 07       	cpc	r25, r21
    3f44:	69 f4       	brne	.+26     	; 0x3f60 <malloc+0x54>
    3f46:	10 97       	sbiw	r26, 0x00	; 0
    3f48:	31 f0       	breq	.+12     	; 0x3f56 <malloc+0x4a>
    3f4a:	12 96       	adiw	r26, 0x02	; 2
    3f4c:	0c 93       	st	X, r16
    3f4e:	12 97       	sbiw	r26, 0x02	; 2
    3f50:	13 96       	adiw	r26, 0x03	; 3
    3f52:	1c 93       	st	X, r17
    3f54:	27 c0       	rjmp	.+78     	; 0x3fa4 <malloc+0x98>
    3f56:	00 93 a6 21 	sts	0x21A6, r16	; 0x8021a6 <__flp>
    3f5a:	10 93 a7 21 	sts	0x21A7, r17	; 0x8021a7 <__flp+0x1>
    3f5e:	22 c0       	rjmp	.+68     	; 0x3fa4 <malloc+0x98>
    3f60:	21 15       	cp	r18, r1
    3f62:	31 05       	cpc	r19, r1
    3f64:	19 f0       	breq	.+6      	; 0x3f6c <malloc+0x60>
    3f66:	42 17       	cp	r20, r18
    3f68:	53 07       	cpc	r21, r19
    3f6a:	18 f4       	brcc	.+6      	; 0x3f72 <malloc+0x66>
    3f6c:	9a 01       	movw	r18, r20
    3f6e:	bd 01       	movw	r22, r26
    3f70:	ef 01       	movw	r28, r30
    3f72:	df 01       	movw	r26, r30
    3f74:	f8 01       	movw	r30, r16
    3f76:	db cf       	rjmp	.-74     	; 0x3f2e <malloc+0x22>
    3f78:	21 15       	cp	r18, r1
    3f7a:	31 05       	cpc	r19, r1
    3f7c:	f9 f0       	breq	.+62     	; 0x3fbc <malloc+0xb0>
    3f7e:	28 1b       	sub	r18, r24
    3f80:	39 0b       	sbc	r19, r25
    3f82:	24 30       	cpi	r18, 0x04	; 4
    3f84:	31 05       	cpc	r19, r1
    3f86:	80 f4       	brcc	.+32     	; 0x3fa8 <malloc+0x9c>
    3f88:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f8c:	61 15       	cp	r22, r1
    3f8e:	71 05       	cpc	r23, r1
    3f90:	21 f0       	breq	.+8      	; 0x3f9a <malloc+0x8e>
    3f92:	fb 01       	movw	r30, r22
    3f94:	82 83       	std	Z+2, r24	; 0x02
    3f96:	93 83       	std	Z+3, r25	; 0x03
    3f98:	04 c0       	rjmp	.+8      	; 0x3fa2 <malloc+0x96>
    3f9a:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <__flp>
    3f9e:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <__flp+0x1>
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	32 96       	adiw	r30, 0x02	; 2
    3fa6:	44 c0       	rjmp	.+136    	; 0x4030 <__stack+0x31>
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e2 0f       	add	r30, r18
    3fac:	f3 1f       	adc	r31, r19
    3fae:	81 93       	st	Z+, r24
    3fb0:	91 93       	st	Z+, r25
    3fb2:	22 50       	subi	r18, 0x02	; 2
    3fb4:	31 09       	sbc	r19, r1
    3fb6:	28 83       	st	Y, r18
    3fb8:	39 83       	std	Y+1, r19	; 0x01
    3fba:	3a c0       	rjmp	.+116    	; 0x4030 <__stack+0x31>
    3fbc:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <__brkval>
    3fc0:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <__brkval+0x1>
    3fc4:	23 2b       	or	r18, r19
    3fc6:	41 f4       	brne	.+16     	; 0x3fd8 <malloc+0xcc>
    3fc8:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3fcc:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3fd0:	20 93 a4 21 	sts	0x21A4, r18	; 0x8021a4 <__brkval>
    3fd4:	30 93 a5 21 	sts	0x21A5, r19	; 0x8021a5 <__brkval+0x1>
    3fd8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3fdc:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3fe0:	21 15       	cp	r18, r1
    3fe2:	31 05       	cpc	r19, r1
    3fe4:	41 f4       	brne	.+16     	; 0x3ff6 <malloc+0xea>
    3fe6:	2d b7       	in	r18, 0x3d	; 61
    3fe8:	3e b7       	in	r19, 0x3e	; 62
    3fea:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3fee:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3ff2:	24 1b       	sub	r18, r20
    3ff4:	35 0b       	sbc	r19, r21
    3ff6:	e0 91 a4 21 	lds	r30, 0x21A4	; 0x8021a4 <__brkval>
    3ffa:	f0 91 a5 21 	lds	r31, 0x21A5	; 0x8021a5 <__brkval+0x1>
    3ffe:	e2 17       	cp	r30, r18
    4000:	f3 07       	cpc	r31, r19
    4002:	a0 f4       	brcc	.+40     	; 0x402c <__stack+0x2d>
    4004:	2e 1b       	sub	r18, r30
    4006:	3f 0b       	sbc	r19, r31
    4008:	28 17       	cp	r18, r24
    400a:	39 07       	cpc	r19, r25
    400c:	78 f0       	brcs	.+30     	; 0x402c <__stack+0x2d>
    400e:	ac 01       	movw	r20, r24
    4010:	4e 5f       	subi	r20, 0xFE	; 254
    4012:	5f 4f       	sbci	r21, 0xFF	; 255
    4014:	24 17       	cp	r18, r20
    4016:	35 07       	cpc	r19, r21
    4018:	48 f0       	brcs	.+18     	; 0x402c <__stack+0x2d>
    401a:	4e 0f       	add	r20, r30
    401c:	5f 1f       	adc	r21, r31
    401e:	40 93 a4 21 	sts	0x21A4, r20	; 0x8021a4 <__brkval>
    4022:	50 93 a5 21 	sts	0x21A5, r21	; 0x8021a5 <__brkval+0x1>
    4026:	81 93       	st	Z+, r24
    4028:	91 93       	st	Z+, r25
    402a:	02 c0       	rjmp	.+4      	; 0x4030 <__stack+0x31>
    402c:	e0 e0       	ldi	r30, 0x00	; 0
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	cf 01       	movw	r24, r30
    4032:	df 91       	pop	r29
    4034:	cf 91       	pop	r28
    4036:	1f 91       	pop	r17
    4038:	0f 91       	pop	r16
    403a:	08 95       	ret

0000403c <free>:
    403c:	cf 93       	push	r28
    403e:	df 93       	push	r29
    4040:	00 97       	sbiw	r24, 0x00	; 0
    4042:	09 f4       	brne	.+2      	; 0x4046 <free+0xa>
    4044:	81 c0       	rjmp	.+258    	; 0x4148 <free+0x10c>
    4046:	fc 01       	movw	r30, r24
    4048:	32 97       	sbiw	r30, 0x02	; 2
    404a:	12 82       	std	Z+2, r1	; 0x02
    404c:	13 82       	std	Z+3, r1	; 0x03
    404e:	a0 91 a6 21 	lds	r26, 0x21A6	; 0x8021a6 <__flp>
    4052:	b0 91 a7 21 	lds	r27, 0x21A7	; 0x8021a7 <__flp+0x1>
    4056:	10 97       	sbiw	r26, 0x00	; 0
    4058:	81 f4       	brne	.+32     	; 0x407a <free+0x3e>
    405a:	20 81       	ld	r18, Z
    405c:	31 81       	ldd	r19, Z+1	; 0x01
    405e:	82 0f       	add	r24, r18
    4060:	93 1f       	adc	r25, r19
    4062:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <__brkval>
    4066:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <__brkval+0x1>
    406a:	28 17       	cp	r18, r24
    406c:	39 07       	cpc	r19, r25
    406e:	51 f5       	brne	.+84     	; 0x40c4 <free+0x88>
    4070:	e0 93 a4 21 	sts	0x21A4, r30	; 0x8021a4 <__brkval>
    4074:	f0 93 a5 21 	sts	0x21A5, r31	; 0x8021a5 <__brkval+0x1>
    4078:	67 c0       	rjmp	.+206    	; 0x4148 <free+0x10c>
    407a:	ed 01       	movw	r28, r26
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	ce 17       	cp	r28, r30
    4082:	df 07       	cpc	r29, r31
    4084:	40 f4       	brcc	.+16     	; 0x4096 <free+0x5a>
    4086:	4a 81       	ldd	r20, Y+2	; 0x02
    4088:	5b 81       	ldd	r21, Y+3	; 0x03
    408a:	9e 01       	movw	r18, r28
    408c:	41 15       	cp	r20, r1
    408e:	51 05       	cpc	r21, r1
    4090:	f1 f0       	breq	.+60     	; 0x40ce <free+0x92>
    4092:	ea 01       	movw	r28, r20
    4094:	f5 cf       	rjmp	.-22     	; 0x4080 <free+0x44>
    4096:	c2 83       	std	Z+2, r28	; 0x02
    4098:	d3 83       	std	Z+3, r29	; 0x03
    409a:	40 81       	ld	r20, Z
    409c:	51 81       	ldd	r21, Z+1	; 0x01
    409e:	84 0f       	add	r24, r20
    40a0:	95 1f       	adc	r25, r21
    40a2:	c8 17       	cp	r28, r24
    40a4:	d9 07       	cpc	r29, r25
    40a6:	59 f4       	brne	.+22     	; 0x40be <free+0x82>
    40a8:	88 81       	ld	r24, Y
    40aa:	99 81       	ldd	r25, Y+1	; 0x01
    40ac:	84 0f       	add	r24, r20
    40ae:	95 1f       	adc	r25, r21
    40b0:	02 96       	adiw	r24, 0x02	; 2
    40b2:	80 83       	st	Z, r24
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	8a 81       	ldd	r24, Y+2	; 0x02
    40b8:	9b 81       	ldd	r25, Y+3	; 0x03
    40ba:	82 83       	std	Z+2, r24	; 0x02
    40bc:	93 83       	std	Z+3, r25	; 0x03
    40be:	21 15       	cp	r18, r1
    40c0:	31 05       	cpc	r19, r1
    40c2:	29 f4       	brne	.+10     	; 0x40ce <free+0x92>
    40c4:	e0 93 a6 21 	sts	0x21A6, r30	; 0x8021a6 <__flp>
    40c8:	f0 93 a7 21 	sts	0x21A7, r31	; 0x8021a7 <__flp+0x1>
    40cc:	3d c0       	rjmp	.+122    	; 0x4148 <free+0x10c>
    40ce:	e9 01       	movw	r28, r18
    40d0:	ea 83       	std	Y+2, r30	; 0x02
    40d2:	fb 83       	std	Y+3, r31	; 0x03
    40d4:	49 91       	ld	r20, Y+
    40d6:	59 91       	ld	r21, Y+
    40d8:	c4 0f       	add	r28, r20
    40da:	d5 1f       	adc	r29, r21
    40dc:	ec 17       	cp	r30, r28
    40de:	fd 07       	cpc	r31, r29
    40e0:	61 f4       	brne	.+24     	; 0x40fa <free+0xbe>
    40e2:	80 81       	ld	r24, Z
    40e4:	91 81       	ldd	r25, Z+1	; 0x01
    40e6:	84 0f       	add	r24, r20
    40e8:	95 1f       	adc	r25, r21
    40ea:	02 96       	adiw	r24, 0x02	; 2
    40ec:	e9 01       	movw	r28, r18
    40ee:	88 83       	st	Y, r24
    40f0:	99 83       	std	Y+1, r25	; 0x01
    40f2:	82 81       	ldd	r24, Z+2	; 0x02
    40f4:	93 81       	ldd	r25, Z+3	; 0x03
    40f6:	8a 83       	std	Y+2, r24	; 0x02
    40f8:	9b 83       	std	Y+3, r25	; 0x03
    40fa:	e0 e0       	ldi	r30, 0x00	; 0
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	12 96       	adiw	r26, 0x02	; 2
    4100:	8d 91       	ld	r24, X+
    4102:	9c 91       	ld	r25, X
    4104:	13 97       	sbiw	r26, 0x03	; 3
    4106:	00 97       	sbiw	r24, 0x00	; 0
    4108:	19 f0       	breq	.+6      	; 0x4110 <free+0xd4>
    410a:	fd 01       	movw	r30, r26
    410c:	dc 01       	movw	r26, r24
    410e:	f7 cf       	rjmp	.-18     	; 0x40fe <free+0xc2>
    4110:	8d 91       	ld	r24, X+
    4112:	9c 91       	ld	r25, X
    4114:	11 97       	sbiw	r26, 0x01	; 1
    4116:	9d 01       	movw	r18, r26
    4118:	2e 5f       	subi	r18, 0xFE	; 254
    411a:	3f 4f       	sbci	r19, 0xFF	; 255
    411c:	82 0f       	add	r24, r18
    411e:	93 1f       	adc	r25, r19
    4120:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <__brkval>
    4124:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <__brkval+0x1>
    4128:	28 17       	cp	r18, r24
    412a:	39 07       	cpc	r19, r25
    412c:	69 f4       	brne	.+26     	; 0x4148 <free+0x10c>
    412e:	30 97       	sbiw	r30, 0x00	; 0
    4130:	29 f4       	brne	.+10     	; 0x413c <free+0x100>
    4132:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <__flp>
    4136:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <__flp+0x1>
    413a:	02 c0       	rjmp	.+4      	; 0x4140 <free+0x104>
    413c:	12 82       	std	Z+2, r1	; 0x02
    413e:	13 82       	std	Z+3, r1	; 0x03
    4140:	a0 93 a4 21 	sts	0x21A4, r26	; 0x8021a4 <__brkval>
    4144:	b0 93 a5 21 	sts	0x21A5, r27	; 0x8021a5 <__brkval+0x1>
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	08 95       	ret

0000414e <isspace>:
    414e:	91 11       	cpse	r25, r1
    4150:	1f c1       	rjmp	.+574    	; 0x4390 <__ctype_isfalse>
    4152:	80 32       	cpi	r24, 0x20	; 32
    4154:	19 f0       	breq	.+6      	; 0x415c <isspace+0xe>
    4156:	89 50       	subi	r24, 0x09	; 9
    4158:	85 50       	subi	r24, 0x05	; 5
    415a:	d0 f7       	brcc	.-12     	; 0x4150 <isspace+0x2>
    415c:	08 95       	ret

0000415e <strchr_P>:
    415e:	fc 01       	movw	r30, r24
    4160:	05 90       	lpm	r0, Z+
    4162:	06 16       	cp	r0, r22
    4164:	21 f0       	breq	.+8      	; 0x416e <strchr_P+0x10>
    4166:	00 20       	and	r0, r0
    4168:	d9 f7       	brne	.-10     	; 0x4160 <strchr_P+0x2>
    416a:	c0 01       	movw	r24, r0
    416c:	08 95       	ret
    416e:	31 97       	sbiw	r30, 0x01	; 1
    4170:	cf 01       	movw	r24, r30
    4172:	08 95       	ret

00004174 <strnlen_P>:
    4174:	fc 01       	movw	r30, r24
    4176:	05 90       	lpm	r0, Z+
    4178:	61 50       	subi	r22, 0x01	; 1
    417a:	70 40       	sbci	r23, 0x00	; 0
    417c:	01 10       	cpse	r0, r1
    417e:	d8 f7       	brcc	.-10     	; 0x4176 <strnlen_P+0x2>
    4180:	80 95       	com	r24
    4182:	90 95       	com	r25
    4184:	8e 0f       	add	r24, r30
    4186:	9f 1f       	adc	r25, r31
    4188:	08 95       	ret

0000418a <memset>:
    418a:	dc 01       	movw	r26, r24
    418c:	01 c0       	rjmp	.+2      	; 0x4190 <memset+0x6>
    418e:	6d 93       	st	X+, r22
    4190:	41 50       	subi	r20, 0x01	; 1
    4192:	50 40       	sbci	r21, 0x00	; 0
    4194:	e0 f7       	brcc	.-8      	; 0x418e <memset+0x4>
    4196:	08 95       	ret

00004198 <strnlen>:
    4198:	fc 01       	movw	r30, r24
    419a:	61 50       	subi	r22, 0x01	; 1
    419c:	70 40       	sbci	r23, 0x00	; 0
    419e:	01 90       	ld	r0, Z+
    41a0:	01 10       	cpse	r0, r1
    41a2:	d8 f7       	brcc	.-10     	; 0x419a <strnlen+0x2>
    41a4:	80 95       	com	r24
    41a6:	90 95       	com	r25
    41a8:	8e 0f       	add	r24, r30
    41aa:	9f 1f       	adc	r25, r31
    41ac:	08 95       	ret

000041ae <fgetc>:
    41ae:	cf 93       	push	r28
    41b0:	df 93       	push	r29
    41b2:	ec 01       	movw	r28, r24
    41b4:	2b 81       	ldd	r18, Y+3	; 0x03
    41b6:	20 ff       	sbrs	r18, 0
    41b8:	33 c0       	rjmp	.+102    	; 0x4220 <fgetc+0x72>
    41ba:	26 ff       	sbrs	r18, 6
    41bc:	0a c0       	rjmp	.+20     	; 0x41d2 <fgetc+0x24>
    41be:	2f 7b       	andi	r18, 0xBF	; 191
    41c0:	2b 83       	std	Y+3, r18	; 0x03
    41c2:	8e 81       	ldd	r24, Y+6	; 0x06
    41c4:	9f 81       	ldd	r25, Y+7	; 0x07
    41c6:	01 96       	adiw	r24, 0x01	; 1
    41c8:	8e 83       	std	Y+6, r24	; 0x06
    41ca:	9f 83       	std	Y+7, r25	; 0x07
    41cc:	8a 81       	ldd	r24, Y+2	; 0x02
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	29 c0       	rjmp	.+82     	; 0x4224 <fgetc+0x76>
    41d2:	22 ff       	sbrs	r18, 2
    41d4:	0f c0       	rjmp	.+30     	; 0x41f4 <fgetc+0x46>
    41d6:	e8 81       	ld	r30, Y
    41d8:	f9 81       	ldd	r31, Y+1	; 0x01
    41da:	80 81       	ld	r24, Z
    41dc:	08 2e       	mov	r0, r24
    41de:	00 0c       	add	r0, r0
    41e0:	99 0b       	sbc	r25, r25
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	19 f4       	brne	.+6      	; 0x41ec <fgetc+0x3e>
    41e6:	20 62       	ori	r18, 0x20	; 32
    41e8:	2b 83       	std	Y+3, r18	; 0x03
    41ea:	1a c0       	rjmp	.+52     	; 0x4220 <fgetc+0x72>
    41ec:	31 96       	adiw	r30, 0x01	; 1
    41ee:	e8 83       	st	Y, r30
    41f0:	f9 83       	std	Y+1, r31	; 0x01
    41f2:	0e c0       	rjmp	.+28     	; 0x4210 <fgetc+0x62>
    41f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    41f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    41f8:	19 95       	eicall
    41fa:	97 ff       	sbrs	r25, 7
    41fc:	09 c0       	rjmp	.+18     	; 0x4210 <fgetc+0x62>
    41fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4200:	01 96       	adiw	r24, 0x01	; 1
    4202:	11 f0       	breq	.+4      	; 0x4208 <fgetc+0x5a>
    4204:	80 e2       	ldi	r24, 0x20	; 32
    4206:	01 c0       	rjmp	.+2      	; 0x420a <fgetc+0x5c>
    4208:	80 e1       	ldi	r24, 0x10	; 16
    420a:	82 2b       	or	r24, r18
    420c:	8b 83       	std	Y+3, r24	; 0x03
    420e:	08 c0       	rjmp	.+16     	; 0x4220 <fgetc+0x72>
    4210:	2e 81       	ldd	r18, Y+6	; 0x06
    4212:	3f 81       	ldd	r19, Y+7	; 0x07
    4214:	2f 5f       	subi	r18, 0xFF	; 255
    4216:	3f 4f       	sbci	r19, 0xFF	; 255
    4218:	2e 83       	std	Y+6, r18	; 0x06
    421a:	3f 83       	std	Y+7, r19	; 0x07
    421c:	99 27       	eor	r25, r25
    421e:	02 c0       	rjmp	.+4      	; 0x4224 <fgetc+0x76>
    4220:	8f ef       	ldi	r24, 0xFF	; 255
    4222:	9f ef       	ldi	r25, 0xFF	; 255
    4224:	df 91       	pop	r29
    4226:	cf 91       	pop	r28
    4228:	08 95       	ret

0000422a <fputc>:
    422a:	0f 93       	push	r16
    422c:	1f 93       	push	r17
    422e:	cf 93       	push	r28
    4230:	df 93       	push	r29
    4232:	fb 01       	movw	r30, r22
    4234:	23 81       	ldd	r18, Z+3	; 0x03
    4236:	21 fd       	sbrc	r18, 1
    4238:	03 c0       	rjmp	.+6      	; 0x4240 <fputc+0x16>
    423a:	8f ef       	ldi	r24, 0xFF	; 255
    423c:	9f ef       	ldi	r25, 0xFF	; 255
    423e:	2c c0       	rjmp	.+88     	; 0x4298 <fputc+0x6e>
    4240:	22 ff       	sbrs	r18, 2
    4242:	16 c0       	rjmp	.+44     	; 0x4270 <fputc+0x46>
    4244:	46 81       	ldd	r20, Z+6	; 0x06
    4246:	57 81       	ldd	r21, Z+7	; 0x07
    4248:	24 81       	ldd	r18, Z+4	; 0x04
    424a:	35 81       	ldd	r19, Z+5	; 0x05
    424c:	42 17       	cp	r20, r18
    424e:	53 07       	cpc	r21, r19
    4250:	44 f4       	brge	.+16     	; 0x4262 <fputc+0x38>
    4252:	a0 81       	ld	r26, Z
    4254:	b1 81       	ldd	r27, Z+1	; 0x01
    4256:	9d 01       	movw	r18, r26
    4258:	2f 5f       	subi	r18, 0xFF	; 255
    425a:	3f 4f       	sbci	r19, 0xFF	; 255
    425c:	20 83       	st	Z, r18
    425e:	31 83       	std	Z+1, r19	; 0x01
    4260:	8c 93       	st	X, r24
    4262:	26 81       	ldd	r18, Z+6	; 0x06
    4264:	37 81       	ldd	r19, Z+7	; 0x07
    4266:	2f 5f       	subi	r18, 0xFF	; 255
    4268:	3f 4f       	sbci	r19, 0xFF	; 255
    426a:	26 83       	std	Z+6, r18	; 0x06
    426c:	37 83       	std	Z+7, r19	; 0x07
    426e:	14 c0       	rjmp	.+40     	; 0x4298 <fputc+0x6e>
    4270:	8b 01       	movw	r16, r22
    4272:	ec 01       	movw	r28, r24
    4274:	fb 01       	movw	r30, r22
    4276:	00 84       	ldd	r0, Z+8	; 0x08
    4278:	f1 85       	ldd	r31, Z+9	; 0x09
    427a:	e0 2d       	mov	r30, r0
    427c:	19 95       	eicall
    427e:	89 2b       	or	r24, r25
    4280:	e1 f6       	brne	.-72     	; 0x423a <fputc+0x10>
    4282:	d8 01       	movw	r26, r16
    4284:	16 96       	adiw	r26, 0x06	; 6
    4286:	8d 91       	ld	r24, X+
    4288:	9c 91       	ld	r25, X
    428a:	17 97       	sbiw	r26, 0x07	; 7
    428c:	01 96       	adiw	r24, 0x01	; 1
    428e:	16 96       	adiw	r26, 0x06	; 6
    4290:	8d 93       	st	X+, r24
    4292:	9c 93       	st	X, r25
    4294:	17 97       	sbiw	r26, 0x07	; 7
    4296:	ce 01       	movw	r24, r28
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	08 95       	ret

000042a2 <ungetc>:
    42a2:	fb 01       	movw	r30, r22
    42a4:	23 81       	ldd	r18, Z+3	; 0x03
    42a6:	20 ff       	sbrs	r18, 0
    42a8:	12 c0       	rjmp	.+36     	; 0x42ce <ungetc+0x2c>
    42aa:	26 fd       	sbrc	r18, 6
    42ac:	10 c0       	rjmp	.+32     	; 0x42ce <ungetc+0x2c>
    42ae:	8f 3f       	cpi	r24, 0xFF	; 255
    42b0:	3f ef       	ldi	r19, 0xFF	; 255
    42b2:	93 07       	cpc	r25, r19
    42b4:	61 f0       	breq	.+24     	; 0x42ce <ungetc+0x2c>
    42b6:	82 83       	std	Z+2, r24	; 0x02
    42b8:	2f 7d       	andi	r18, 0xDF	; 223
    42ba:	20 64       	ori	r18, 0x40	; 64
    42bc:	23 83       	std	Z+3, r18	; 0x03
    42be:	26 81       	ldd	r18, Z+6	; 0x06
    42c0:	37 81       	ldd	r19, Z+7	; 0x07
    42c2:	21 50       	subi	r18, 0x01	; 1
    42c4:	31 09       	sbc	r19, r1
    42c6:	26 83       	std	Z+6, r18	; 0x06
    42c8:	37 83       	std	Z+7, r19	; 0x07
    42ca:	99 27       	eor	r25, r25
    42cc:	08 95       	ret
    42ce:	8f ef       	ldi	r24, 0xFF	; 255
    42d0:	9f ef       	ldi	r25, 0xFF	; 255
    42d2:	08 95       	ret

000042d4 <__ultoa_invert>:
    42d4:	fa 01       	movw	r30, r20
    42d6:	aa 27       	eor	r26, r26
    42d8:	28 30       	cpi	r18, 0x08	; 8
    42da:	51 f1       	breq	.+84     	; 0x4330 <__ultoa_invert+0x5c>
    42dc:	20 31       	cpi	r18, 0x10	; 16
    42de:	81 f1       	breq	.+96     	; 0x4340 <__ultoa_invert+0x6c>
    42e0:	e8 94       	clt
    42e2:	6f 93       	push	r22
    42e4:	6e 7f       	andi	r22, 0xFE	; 254
    42e6:	6e 5f       	subi	r22, 0xFE	; 254
    42e8:	7f 4f       	sbci	r23, 0xFF	; 255
    42ea:	8f 4f       	sbci	r24, 0xFF	; 255
    42ec:	9f 4f       	sbci	r25, 0xFF	; 255
    42ee:	af 4f       	sbci	r26, 0xFF	; 255
    42f0:	b1 e0       	ldi	r27, 0x01	; 1
    42f2:	3e d0       	rcall	.+124    	; 0x4370 <__ultoa_invert+0x9c>
    42f4:	b4 e0       	ldi	r27, 0x04	; 4
    42f6:	3c d0       	rcall	.+120    	; 0x4370 <__ultoa_invert+0x9c>
    42f8:	67 0f       	add	r22, r23
    42fa:	78 1f       	adc	r23, r24
    42fc:	89 1f       	adc	r24, r25
    42fe:	9a 1f       	adc	r25, r26
    4300:	a1 1d       	adc	r26, r1
    4302:	68 0f       	add	r22, r24
    4304:	79 1f       	adc	r23, r25
    4306:	8a 1f       	adc	r24, r26
    4308:	91 1d       	adc	r25, r1
    430a:	a1 1d       	adc	r26, r1
    430c:	6a 0f       	add	r22, r26
    430e:	71 1d       	adc	r23, r1
    4310:	81 1d       	adc	r24, r1
    4312:	91 1d       	adc	r25, r1
    4314:	a1 1d       	adc	r26, r1
    4316:	20 d0       	rcall	.+64     	; 0x4358 <__ultoa_invert+0x84>
    4318:	09 f4       	brne	.+2      	; 0x431c <__ultoa_invert+0x48>
    431a:	68 94       	set
    431c:	3f 91       	pop	r19
    431e:	2a e0       	ldi	r18, 0x0A	; 10
    4320:	26 9f       	mul	r18, r22
    4322:	11 24       	eor	r1, r1
    4324:	30 19       	sub	r19, r0
    4326:	30 5d       	subi	r19, 0xD0	; 208
    4328:	31 93       	st	Z+, r19
    432a:	de f6       	brtc	.-74     	; 0x42e2 <__ultoa_invert+0xe>
    432c:	cf 01       	movw	r24, r30
    432e:	08 95       	ret
    4330:	46 2f       	mov	r20, r22
    4332:	47 70       	andi	r20, 0x07	; 7
    4334:	40 5d       	subi	r20, 0xD0	; 208
    4336:	41 93       	st	Z+, r20
    4338:	b3 e0       	ldi	r27, 0x03	; 3
    433a:	0f d0       	rcall	.+30     	; 0x435a <__ultoa_invert+0x86>
    433c:	c9 f7       	brne	.-14     	; 0x4330 <__ultoa_invert+0x5c>
    433e:	f6 cf       	rjmp	.-20     	; 0x432c <__ultoa_invert+0x58>
    4340:	46 2f       	mov	r20, r22
    4342:	4f 70       	andi	r20, 0x0F	; 15
    4344:	40 5d       	subi	r20, 0xD0	; 208
    4346:	4a 33       	cpi	r20, 0x3A	; 58
    4348:	18 f0       	brcs	.+6      	; 0x4350 <__ultoa_invert+0x7c>
    434a:	49 5d       	subi	r20, 0xD9	; 217
    434c:	31 fd       	sbrc	r19, 1
    434e:	40 52       	subi	r20, 0x20	; 32
    4350:	41 93       	st	Z+, r20
    4352:	02 d0       	rcall	.+4      	; 0x4358 <__ultoa_invert+0x84>
    4354:	a9 f7       	brne	.-22     	; 0x4340 <__ultoa_invert+0x6c>
    4356:	ea cf       	rjmp	.-44     	; 0x432c <__ultoa_invert+0x58>
    4358:	b4 e0       	ldi	r27, 0x04	; 4
    435a:	a6 95       	lsr	r26
    435c:	97 95       	ror	r25
    435e:	87 95       	ror	r24
    4360:	77 95       	ror	r23
    4362:	67 95       	ror	r22
    4364:	ba 95       	dec	r27
    4366:	c9 f7       	brne	.-14     	; 0x435a <__ultoa_invert+0x86>
    4368:	00 97       	sbiw	r24, 0x00	; 0
    436a:	61 05       	cpc	r22, r1
    436c:	71 05       	cpc	r23, r1
    436e:	08 95       	ret
    4370:	9b 01       	movw	r18, r22
    4372:	ac 01       	movw	r20, r24
    4374:	0a 2e       	mov	r0, r26
    4376:	06 94       	lsr	r0
    4378:	57 95       	ror	r21
    437a:	47 95       	ror	r20
    437c:	37 95       	ror	r19
    437e:	27 95       	ror	r18
    4380:	ba 95       	dec	r27
    4382:	c9 f7       	brne	.-14     	; 0x4376 <__ultoa_invert+0xa2>
    4384:	62 0f       	add	r22, r18
    4386:	73 1f       	adc	r23, r19
    4388:	84 1f       	adc	r24, r20
    438a:	95 1f       	adc	r25, r21
    438c:	a0 1d       	adc	r26, r0
    438e:	08 95       	ret

00004390 <__ctype_isfalse>:
    4390:	99 27       	eor	r25, r25
    4392:	88 27       	eor	r24, r24

00004394 <__ctype_istrue>:
    4394:	08 95       	ret

00004396 <_exit>:
    4396:	f8 94       	cli

00004398 <__stop_program>:
    4398:	ff cf       	rjmp	.-2      	; 0x4398 <__stop_program>
