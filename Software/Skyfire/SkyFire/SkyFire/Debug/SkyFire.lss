
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00802000  00004d22  00004db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000122  008020e2  008020e2  00004e98  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004e98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  00004f38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001940a  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000541d  00000000  00000000  0001e972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b6af  00000000  00000000  00023d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001520  00000000  00000000  0002f440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000385e0  00000000  00000000  00030960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005445  00000000  00000000  00068f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  0006e388  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005f84  00000000  00000000  0006e950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	1a c3       	rjmp	.+1588   	; 0x66a <__vector_13>
      36:	00 00       	nop
      38:	61 c1       	rjmp	.+706    	; 0x2fc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c1       	rjmp	.+702    	; 0x2fc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c1       	rjmp	.+698    	; 0x2fc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c1       	rjmp	.+694    	; 0x2fc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c1       	rjmp	.+690    	; 0x2fc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c1       	rjmp	.+686    	; 0x2fc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c1       	rjmp	.+682    	; 0x2fc <__bad_interrupt>
      52:	00 00       	nop
      54:	53 c1       	rjmp	.+678    	; 0x2fc <__bad_interrupt>
      56:	00 00       	nop
      58:	51 c1       	rjmp	.+674    	; 0x2fc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c1       	rjmp	.+670    	; 0x2fc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	35 c1       	rjmp	.+618    	; 0x2fc <__bad_interrupt>
      92:	00 00       	nop
      94:	33 c1       	rjmp	.+614    	; 0x2fc <__bad_interrupt>
      96:	00 00       	nop
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2f c1       	rjmp	.+606    	; 0x2fc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0a c3       	rjmp	.+1556   	; 0x6ce <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__vector_47>
      c0:	1d c1       	rjmp	.+570    	; 0x2fc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1b c1       	rjmp	.+566    	; 0x2fc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	19 c1       	rjmp	.+562    	; 0x2fc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	17 c1       	rjmp	.+558    	; 0x2fc <__bad_interrupt>
      ce:	00 00       	nop
      d0:	15 c1       	rjmp	.+554    	; 0x2fc <__bad_interrupt>
      d2:	00 00       	nop
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	11 c1       	rjmp	.+546    	; 0x2fc <__bad_interrupt>
      da:	00 00       	nop
      dc:	0f c1       	rjmp	.+542    	; 0x2fc <__bad_interrupt>
      de:	00 00       	nop
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b c1       	rjmp	.+534    	; 0x2fc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__vector_58>
      ec:	07 c1       	rjmp	.+526    	; 0x2fc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	05 c1       	rjmp	.+522    	; 0x2fc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	03 c1       	rjmp	.+518    	; 0x2fc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	01 c1       	rjmp	.+514    	; 0x2fc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ff c0       	rjmp	.+510    	; 0x2fc <__bad_interrupt>
      fe:	00 00       	nop
     100:	fd c0       	rjmp	.+506    	; 0x2fc <__bad_interrupt>
     102:	00 00       	nop
     104:	fb c0       	rjmp	.+502    	; 0x2fc <__bad_interrupt>
     106:	00 00       	nop
     108:	f9 c0       	rjmp	.+498    	; 0x2fc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f7 c0       	rjmp	.+494    	; 0x2fc <__bad_interrupt>
     10e:	00 00       	nop
     110:	f5 c0       	rjmp	.+490    	; 0x2fc <__bad_interrupt>
     112:	00 00       	nop
     114:	f3 c0       	rjmp	.+486    	; 0x2fc <__bad_interrupt>
     116:	00 00       	nop
     118:	f1 c0       	rjmp	.+482    	; 0x2fc <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1b c1       	rjmp	.+566    	; 0x354 <__vector_71>
     11e:	00 00       	nop
     120:	56 c1       	rjmp	.+684    	; 0x3ce <__vector_72>
     122:	00 00       	nop
     124:	91 c1       	rjmp	.+802    	; 0x448 <__vector_73>
     126:	00 00       	nop
     128:	cc c1       	rjmp	.+920    	; 0x4c2 <__vector_74>
     12a:	00 00       	nop
     12c:	e7 c0       	rjmp	.+462    	; 0x2fc <__bad_interrupt>
     12e:	00 00       	nop
     130:	e5 c0       	rjmp	.+458    	; 0x2fc <__bad_interrupt>
     132:	00 00       	nop
     134:	e3 c0       	rjmp	.+454    	; 0x2fc <__bad_interrupt>
     136:	00 00       	nop
     138:	e1 c0       	rjmp	.+450    	; 0x2fc <__bad_interrupt>
     13a:	00 00       	nop
     13c:	df c0       	rjmp	.+446    	; 0x2fc <__bad_interrupt>
     13e:	00 00       	nop
     140:	dd c0       	rjmp	.+442    	; 0x2fc <__bad_interrupt>
     142:	00 00       	nop
     144:	db c0       	rjmp	.+438    	; 0x2fc <__bad_interrupt>
     146:	00 00       	nop
     148:	d9 c0       	rjmp	.+434    	; 0x2fc <__bad_interrupt>
     14a:	00 00       	nop
     14c:	d7 c0       	rjmp	.+430    	; 0x2fc <__bad_interrupt>
     14e:	00 00       	nop
     150:	d5 c0       	rjmp	.+426    	; 0x2fc <__bad_interrupt>
     152:	00 00       	nop
     154:	d3 c0       	rjmp	.+422    	; 0x2fc <__bad_interrupt>
     156:	00 00       	nop
     158:	d1 c0       	rjmp	.+418    	; 0x2fc <__bad_interrupt>
     15a:	00 00       	nop
     15c:	cf c0       	rjmp	.+414    	; 0x2fc <__bad_interrupt>
     15e:	00 00       	nop
     160:	cd c0       	rjmp	.+410    	; 0x2fc <__bad_interrupt>
     162:	00 00       	nop
     164:	cb c0       	rjmp	.+406    	; 0x2fc <__bad_interrupt>
     166:	00 00       	nop
     168:	c9 c0       	rjmp	.+402    	; 0x2fc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__vector_91>
     170:	c5 c0       	rjmp	.+394    	; 0x2fc <__bad_interrupt>
     172:	00 00       	nop
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__bad_interrupt>
     176:	00 00       	nop
     178:	c1 c0       	rjmp	.+386    	; 0x2fc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bf c0       	rjmp	.+382    	; 0x2fc <__bad_interrupt>
     17e:	00 00       	nop
     180:	bd c0       	rjmp	.+378    	; 0x2fc <__bad_interrupt>
     182:	00 00       	nop
     184:	bb c0       	rjmp	.+374    	; 0x2fc <__bad_interrupt>
     186:	00 00       	nop
     188:	b9 c0       	rjmp	.+370    	; 0x2fc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b7 c0       	rjmp	.+366    	; 0x2fc <__bad_interrupt>
     18e:	00 00       	nop
     190:	b5 c0       	rjmp	.+362    	; 0x2fc <__bad_interrupt>
     192:	00 00       	nop
     194:	b3 c0       	rjmp	.+358    	; 0x2fc <__bad_interrupt>
     196:	00 00       	nop
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	af c0       	rjmp	.+350    	; 0x2fc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ad c0       	rjmp	.+346    	; 0x2fc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ab c0       	rjmp	.+342    	; 0x2fc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a9 c0       	rjmp	.+338    	; 0x2fc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a7 c0       	rjmp	.+334    	; 0x2fc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a5 c0       	rjmp	.+330    	; 0x2fc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	a3 c0       	rjmp	.+326    	; 0x2fc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	a1 c0       	rjmp	.+322    	; 0x2fc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9f c0       	rjmp	.+318    	; 0x2fc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	9d c0       	rjmp	.+314    	; 0x2fc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	9b c0       	rjmp	.+310    	; 0x2fc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	99 c0       	rjmp	.+306    	; 0x2fc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	97 c0       	rjmp	.+302    	; 0x2fc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	95 c0       	rjmp	.+298    	; 0x2fc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	93 c0       	rjmp	.+294    	; 0x2fc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	91 c0       	rjmp	.+290    	; 0x2fc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8f c0       	rjmp	.+286    	; 0x2fc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8d c0       	rjmp	.+282    	; 0x2fc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8b c0       	rjmp	.+278    	; 0x2fc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	89 c0       	rjmp	.+274    	; 0x2fc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	87 c0       	rjmp	.+270    	; 0x2fc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	83 c0       	rjmp	.+262    	; 0x2fc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	81 c0       	rjmp	.+258    	; 0x2fc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	0f 16       	cp	r0, r31
     1fe:	0d 16       	cp	r0, r29
     200:	0a 16       	cp	r0, r26
     202:	1d 16       	cp	r1, r29
     204:	08 16       	cp	r0, r24
     206:	06 16       	cp	r0, r22
     208:	1e 16       	cp	r1, r30
     20a:	1e 16       	cp	r1, r30
     20c:	1e 16       	cp	r1, r30
     20e:	1e 16       	cp	r1, r30
     210:	1e 16       	cp	r1, r30
     212:	1e 16       	cp	r1, r30
     214:	1e 16       	cp	r1, r30
     216:	1e 16       	cp	r1, r30
     218:	1e 16       	cp	r1, r30
     21a:	1e 16       	cp	r1, r30
     21c:	1e 16       	cp	r1, r30
     21e:	1e 16       	cp	r1, r30
     220:	16 16       	cp	r1, r22
     222:	07 63       	ori	r16, 0x37	; 55
     224:	42 36       	cpi	r20, 0x62	; 98
     226:	b7 9b       	sbis	0x16, 7	; 22
     228:	d8 a7       	std	Y+40, r29	; 0x28
     22a:	1a 39       	cpi	r17, 0x9A	; 154
     22c:	68 56       	subi	r22, 0x68	; 104
     22e:	18 ae       	std	Y+56, r1	; 0x38
     230:	ba ab       	std	Y+50, r27	; 0x32
     232:	55 8c       	ldd	r5, Z+29	; 0x1d
     234:	1d 3c       	cpi	r17, 0xCD	; 205
     236:	b7 cc       	rjmp	.-1682   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     238:	57 63       	ori	r21, 0x37	; 55
     23a:	bd 6d       	ori	r27, 0xDD	; 221
     23c:	ed fd       	.word	0xfded	; ????
     23e:	75 3e       	cpi	r23, 0xE5	; 229
     240:	f6 17       	cp	r31, r22
     242:	72 31       	cpi	r23, 0x12	; 18
     244:	bf 00       	.word	0x00bf	; ????
     246:	00 00       	nop
     248:	80 3f       	cpi	r24, 0xF0	; 240
     24a:	08 00       	.word	0x0008	; ????
     24c:	00 00       	nop
     24e:	be 92       	st	-X, r11
     250:	24 49       	sbci	r18, 0x94	; 148
     252:	12 3e       	cpi	r17, 0xE2	; 226
     254:	ab aa       	std	Y+51, r10	; 0x33
     256:	aa 2a       	or	r10, r26
     258:	be cd       	rjmp	.-1156   	; 0xfffffdd6 <__eeprom_end+0xff7efdd6>
     25a:	cc cc       	rjmp	.-1640   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
     25c:	4c 3e       	cpi	r20, 0xEC	; 236
     25e:	00 00       	nop
     260:	00 80       	ld	r0, Z
     262:	be ab       	std	Y+54, r27	; 0x36
     264:	aa aa       	std	Y+50, r10	; 0x32
     266:	aa 3e       	cpi	r26, 0xEA	; 234
     268:	00 00       	nop
     26a:	00 00       	nop
     26c:	bf 00       	.word	0x00bf	; ????
     26e:	00 00       	nop
     270:	80 3f       	cpi	r24, 0xF0	; 240
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 08       	sbc	r0, r0
     278:	41 78       	andi	r20, 0x81	; 129
     27a:	d3 bb       	out	0x13, r29	; 19
     27c:	43 87       	std	Z+11, r20	; 0x0b
     27e:	d1 13       	cpse	r29, r17
     280:	3d 19       	sub	r19, r13
     282:	0e 3c       	cpi	r16, 0xCE	; 206
     284:	c3 bd       	out	0x23, r28	; 35
     286:	42 82       	std	Z+2, r4	; 0x02
     288:	ad 2b       	or	r26, r29
     28a:	3e 68       	ori	r19, 0x8E	; 142
     28c:	ec 82       	std	Y+4, r14	; 0x04
     28e:	76 be       	out	0x36, r7	; 54
     290:	d9 8f       	std	Y+25, r29	; 0x19
     292:	e1 a9       	ldd	r30, Z+49	; 0x31
     294:	3e 4c       	sbci	r19, 0xCE	; 206
     296:	80 ef       	ldi	r24, 0xF0	; 240
     298:	ff be       	out	0x3f, r15	; 63
     29a:	01 c4       	rjmp	.+2050   	; 0xa9e <usart_init_rs232+0x12a>
     29c:	ff 7f       	andi	r31, 0xFF	; 255
     29e:	3f 00       	.word	0x003f	; ????
     2a0:	00 00       	nop
	...

000002a4 <__trampolines_end>:
     2a4:	63 64       	ori	r22, 0x43	; 67
     2a6:	69 6e       	ori	r22, 0xE9	; 233
     2a8:	6f 70       	andi	r22, 0x0F	; 15
     2aa:	73 75       	andi	r23, 0x53	; 83
     2ac:	78 58       	subi	r23, 0x88	; 136
     2ae:	5b 00       	.word	0x005b	; ????

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df e3       	ldi	r29, 0x3F	; 63
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60
     2c0:	18 be       	out	0x38, r1	; 56
     2c2:	19 be       	out	0x39, r1	; 57
     2c4:	1a be       	out	0x3a, r1	; 58
     2c6:	1b be       	out	0x3b, r1	; 59

000002c8 <__do_copy_data>:
     2c8:	10 e2       	ldi	r17, 0x20	; 32
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e2       	ldi	r27, 0x20	; 32
     2ce:	e2 e2       	ldi	r30, 0x22	; 34
     2d0:	fd e4       	ldi	r31, 0x4D	; 77
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0b bf       	out	0x3b, r16	; 59
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x14>
     2d8:	07 90       	elpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	a2 3e       	cpi	r26, 0xE2	; 226
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0x10>
     2e2:	1b be       	out	0x3b, r1	; 59

000002e4 <__do_clear_bss>:
     2e4:	22 e2       	ldi	r18, 0x22	; 34
     2e6:	a2 ee       	ldi	r26, 0xE2	; 226
     2e8:	b0 e2       	ldi	r27, 0x20	; 32
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	a4 30       	cpi	r26, 0x04	; 4
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <main>
     2f8:	0c 94 8f 26 	jmp	0x4d1e	; 0x4d1e <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     308:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <stdio_base>
     30c:	90 91 54 21 	lds	r25, 0x2154	; 0x802154 <stdio_base+0x1>
     310:	e0 91 4f 21 	lds	r30, 0x214F	; 0x80214f <ptr_get>
     314:	f0 91 50 21 	lds	r31, 0x2150	; 0x802150 <ptr_get+0x1>
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	19 95       	eicall
	return c;
     320:	89 81       	ldd	r24, Y+1	; 0x01
}
     322:	08 2e       	mov	r0, r24
     324:	00 0c       	add	r0, r0
     326:	99 0b       	sbc	r25, r25
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     330:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     332:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <stdio_base>
     336:	90 91 54 21 	lds	r25, 0x2154	; 0x802154 <stdio_base+0x1>
     33a:	e0 91 51 21 	lds	r30, 0x2151	; 0x802151 <ptr_put>
     33e:	f0 91 52 21 	lds	r31, 0x2152	; 0x802152 <ptr_put+0x1>
     342:	19 95       	eicall
     344:	99 23       	and	r25, r25
     346:	1c f0       	brlt	.+6      	; 0x34e <_write+0x1e>
		return -1;
	}
	return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     352:	08 95       	ret

00000354 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	08 b6       	in	r0, 0x38	; 56
     360:	0f 92       	push	r0
     362:	18 be       	out	0x38, r1	; 56
     364:	09 b6       	in	r0, 0x39	; 57
     366:	0f 92       	push	r0
     368:	19 be       	out	0x39, r1	; 57
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	1b be       	out	0x3b, r1	; 59
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     388:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     38c:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     390:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <adca_callback>
     394:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <adca_callback+0x1>
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	19 95       	eicall
}
     3a0:	ff 91       	pop	r31
     3a2:	ef 91       	pop	r30
     3a4:	bf 91       	pop	r27
     3a6:	af 91       	pop	r26
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	7f 91       	pop	r23
     3ae:	6f 91       	pop	r22
     3b0:	5f 91       	pop	r21
     3b2:	4f 91       	pop	r20
     3b4:	3f 91       	pop	r19
     3b6:	2f 91       	pop	r18
     3b8:	0f 90       	pop	r0
     3ba:	0b be       	out	0x3b, r0	; 59
     3bc:	0f 90       	pop	r0
     3be:	09 be       	out	0x39, r0	; 57
     3c0:	0f 90       	pop	r0
     3c2:	08 be       	out	0x38, r0	; 56
     3c4:	0f 90       	pop	r0
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	0f 90       	pop	r0
     3ca:	1f 90       	pop	r1
     3cc:	18 95       	reti

000003ce <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3ce:	1f 92       	push	r1
     3d0:	0f 92       	push	r0
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	0f 92       	push	r0
     3d6:	11 24       	eor	r1, r1
     3d8:	08 b6       	in	r0, 0x38	; 56
     3da:	0f 92       	push	r0
     3dc:	18 be       	out	0x38, r1	; 56
     3de:	09 b6       	in	r0, 0x39	; 57
     3e0:	0f 92       	push	r0
     3e2:	19 be       	out	0x39, r1	; 57
     3e4:	0b b6       	in	r0, 0x3b	; 59
     3e6:	0f 92       	push	r0
     3e8:	1b be       	out	0x3b, r1	; 59
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     402:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     406:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     40a:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <adca_callback>
     40e:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <adca_callback+0x1>
     412:	62 e0       	ldi	r22, 0x02	; 2
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	19 95       	eicall
}
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0b be       	out	0x3b, r0	; 59
     436:	0f 90       	pop	r0
     438:	09 be       	out	0x39, r0	; 57
     43a:	0f 90       	pop	r0
     43c:	08 be       	out	0x38, r0	; 56
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	08 b6       	in	r0, 0x38	; 56
     454:	0f 92       	push	r0
     456:	18 be       	out	0x38, r1	; 56
     458:	09 b6       	in	r0, 0x39	; 57
     45a:	0f 92       	push	r0
     45c:	19 be       	out	0x39, r1	; 57
     45e:	0b b6       	in	r0, 0x3b	; 59
     460:	0f 92       	push	r0
     462:	1b be       	out	0x3b, r1	; 59
     464:	2f 93       	push	r18
     466:	3f 93       	push	r19
     468:	4f 93       	push	r20
     46a:	5f 93       	push	r21
     46c:	6f 93       	push	r22
     46e:	7f 93       	push	r23
     470:	8f 93       	push	r24
     472:	9f 93       	push	r25
     474:	af 93       	push	r26
     476:	bf 93       	push	r27
     478:	ef 93       	push	r30
     47a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     47c:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     480:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     484:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <adca_callback>
     488:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <adca_callback+0x1>
     48c:	64 e0       	ldi	r22, 0x04	; 4
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	19 95       	eicall
}
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	bf 91       	pop	r27
     49a:	af 91       	pop	r26
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	7f 91       	pop	r23
     4a2:	6f 91       	pop	r22
     4a4:	5f 91       	pop	r21
     4a6:	4f 91       	pop	r20
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0b be       	out	0x3b, r0	; 59
     4b0:	0f 90       	pop	r0
     4b2:	09 be       	out	0x39, r0	; 57
     4b4:	0f 90       	pop	r0
     4b6:	08 be       	out	0x38, r0	; 56
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
     4cc:	08 b6       	in	r0, 0x38	; 56
     4ce:	0f 92       	push	r0
     4d0:	18 be       	out	0x38, r1	; 56
     4d2:	09 b6       	in	r0, 0x39	; 57
     4d4:	0f 92       	push	r0
     4d6:	19 be       	out	0x39, r1	; 57
     4d8:	0b b6       	in	r0, 0x3b	; 59
     4da:	0f 92       	push	r0
     4dc:	1b be       	out	0x3b, r1	; 59
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4f6:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4fa:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4fe:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <adca_callback>
     502:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <adca_callback+0x1>
     506:	68 e0       	ldi	r22, 0x08	; 8
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	19 95       	eicall
}
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	bf 91       	pop	r27
     514:	af 91       	pop	r26
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	7f 91       	pop	r23
     51c:	6f 91       	pop	r22
     51e:	5f 91       	pop	r21
     520:	4f 91       	pop	r20
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0b be       	out	0x3b, r0	; 59
     52a:	0f 90       	pop	r0
     52c:	09 be       	out	0x39, r0	; 57
     52e:	0f 90       	pop	r0
     530:	08 be       	out	0x38, r0	; 56
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     540:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <__data_end>
     544:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <__data_end+0x1>
     548:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     54a:	83 ff       	sbrs	r24, 3
     54c:	08 c0       	rjmp	.+16     	; 0x55e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     54e:	88 60       	ori	r24, 0x08	; 8
     550:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     556:	86 ef       	ldi	r24, 0xF6	; 246
     558:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <__data_end+0xa>
     55c:	83 c0       	rjmp	.+262    	; 0x664 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     55e:	98 2f       	mov	r25, r24
     560:	94 71       	andi	r25, 0x14	; 20
     562:	31 f0       	breq	.+12     	; 0x570 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <__data_end+0xa>
     56e:	7a c0       	rjmp	.+244    	; 0x664 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     570:	86 ff       	sbrs	r24, 6
     572:	43 c0       	rjmp	.+134    	; 0x5fa <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     574:	c2 ee       	ldi	r28, 0xE2	; 226
     576:	d0 e2       	ldi	r29, 0x20	; 32
     578:	aa 81       	ldd	r26, Y+2	; 0x02
     57a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     57c:	8c 81       	ldd	r24, Y+4	; 0x04
     57e:	9d 81       	ldd	r25, Y+5	; 0x05
     580:	14 96       	adiw	r26, 0x04	; 4
     582:	2d 91       	ld	r18, X+
     584:	3c 91       	ld	r19, X
     586:	15 97       	sbiw	r26, 0x05	; 5
     588:	82 17       	cp	r24, r18
     58a:	93 07       	cpc	r25, r19
     58c:	6c f4       	brge	.+26     	; 0x5a8 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     58e:	9c 01       	movw	r18, r24
     590:	2f 5f       	subi	r18, 0xFF	; 255
     592:	3f 4f       	sbci	r19, 0xFF	; 255
     594:	20 93 e6 20 	sts	0x20E6, r18	; 0x8020e6 <__data_end+0x4>
     598:	30 93 e7 20 	sts	0x20E7, r19	; 0x8020e7 <__data_end+0x5>
     59c:	a8 0f       	add	r26, r24
     59e:	b9 1f       	adc	r27, r25
     5a0:	11 96       	adiw	r26, 0x01	; 1
     5a2:	8c 91       	ld	r24, X
     5a4:	87 83       	std	Z+7, r24	; 0x07
     5a6:	5e c0       	rjmp	.+188    	; 0x664 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     5a8:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <__data_end+0x6>
     5ac:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <__data_end+0x7>
     5b0:	18 96       	adiw	r26, 0x08	; 8
     5b2:	2d 91       	ld	r18, X+
     5b4:	3c 91       	ld	r19, X
     5b6:	19 97       	sbiw	r26, 0x09	; 9
     5b8:	82 17       	cp	r24, r18
     5ba:	93 07       	cpc	r25, r19
     5bc:	c8 f4       	brcc	.+50     	; 0x5f0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     5be:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <__data_end+0x8>
     5c2:	22 23       	and	r18, r18
     5c4:	21 f0       	breq	.+8      	; 0x5ce <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     5c6:	86 81       	ldd	r24, Z+6	; 0x06
     5c8:	81 60       	ori	r24, 0x01	; 1
     5ca:	86 83       	std	Z+6, r24	; 0x06
     5cc:	4b c0       	rjmp	.+150    	; 0x664 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     5ce:	16 96       	adiw	r26, 0x06	; 6
     5d0:	2d 91       	ld	r18, X+
     5d2:	3c 91       	ld	r19, X
     5d4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     5d6:	ac 01       	movw	r20, r24
     5d8:	4f 5f       	subi	r20, 0xFF	; 255
     5da:	5f 4f       	sbci	r21, 0xFF	; 255
     5dc:	40 93 e8 20 	sts	0x20E8, r20	; 0x8020e8 <__data_end+0x6>
     5e0:	50 93 e9 20 	sts	0x20E9, r21	; 0x8020e9 <__data_end+0x7>
     5e4:	d9 01       	movw	r26, r18
     5e6:	a8 0f       	add	r26, r24
     5e8:	b9 1f       	adc	r27, r25
     5ea:	8c 91       	ld	r24, X
     5ec:	87 83       	std	Z+7, r24	; 0x07
     5ee:	3a c0       	rjmp	.+116    	; 0x664 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     5f4:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <__data_end+0xa>
     5f8:	35 c0       	rjmp	.+106    	; 0x664 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     5fa:	88 23       	and	r24, r24
     5fc:	84 f5       	brge	.+96     	; 0x65e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     5fe:	a2 ee       	ldi	r26, 0xE2	; 226
     600:	b0 e2       	ldi	r27, 0x20	; 32
     602:	12 96       	adiw	r26, 0x02	; 2
     604:	cd 91       	ld	r28, X+
     606:	dc 91       	ld	r29, X
     608:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     60a:	16 96       	adiw	r26, 0x06	; 6
     60c:	8d 91       	ld	r24, X+
     60e:	9c 91       	ld	r25, X
     610:	17 97       	sbiw	r26, 0x07	; 7
     612:	28 85       	ldd	r18, Y+8	; 0x08
     614:	39 85       	ldd	r19, Y+9	; 0x09
     616:	82 17       	cp	r24, r18
     618:	93 07       	cpc	r25, r19
     61a:	d8 f4       	brcc	.+54     	; 0x652 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     61c:	6e 81       	ldd	r22, Y+6	; 0x06
     61e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     620:	9c 01       	movw	r18, r24
     622:	2f 5f       	subi	r18, 0xFF	; 255
     624:	3f 4f       	sbci	r19, 0xFF	; 255
     626:	20 93 e8 20 	sts	0x20E8, r18	; 0x8020e8 <__data_end+0x6>
     62a:	30 93 e9 20 	sts	0x20E9, r19	; 0x8020e9 <__data_end+0x7>
     62e:	47 81       	ldd	r20, Z+7	; 0x07
     630:	db 01       	movw	r26, r22
     632:	a8 0f       	add	r26, r24
     634:	b9 1f       	adc	r27, r25
     636:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     638:	88 85       	ldd	r24, Y+8	; 0x08
     63a:	99 85       	ldd	r25, Y+9	; 0x09
     63c:	28 17       	cp	r18, r24
     63e:	39 07       	cpc	r19, r25
     640:	18 f4       	brcc	.+6      	; 0x648 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	83 83       	std	Z+3, r24	; 0x03
     646:	0e c0       	rjmp	.+28     	; 0x664 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     648:	87 e0       	ldi	r24, 0x07	; 7
     64a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     64c:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <__data_end+0xa>
     650:	09 c0       	rjmp	.+18     	; 0x664 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     656:	89 ef       	ldi	r24, 0xF9	; 249
     658:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <__data_end+0xa>
     65c:	03 c0       	rjmp	.+6      	; 0x664 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     65e:	8b ef       	ldi	r24, 0xFB	; 251
     660:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <__data_end+0xa>
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	08 b6       	in	r0, 0x38	; 56
     676:	0f 92       	push	r0
     678:	18 be       	out	0x38, r1	; 56
     67a:	09 b6       	in	r0, 0x39	; 57
     67c:	0f 92       	push	r0
     67e:	19 be       	out	0x39, r1	; 57
     680:	0b b6       	in	r0, 0x3b	; 59
     682:	0f 92       	push	r0
     684:	1b be       	out	0x3b, r1	; 59
     686:	2f 93       	push	r18
     688:	3f 93       	push	r19
     68a:	4f 93       	push	r20
     68c:	5f 93       	push	r21
     68e:	6f 93       	push	r22
     690:	7f 93       	push	r23
     692:	8f 93       	push	r24
     694:	9f 93       	push	r25
     696:	af 93       	push	r26
     698:	bf 93       	push	r27
     69a:	ef 93       	push	r30
     69c:	ff 93       	push	r31
     69e:	4e df       	rcall	.-356    	; 0x53c <twim_interrupt_handler>
     6a0:	ff 91       	pop	r31
     6a2:	ef 91       	pop	r30
     6a4:	bf 91       	pop	r27
     6a6:	af 91       	pop	r26
     6a8:	9f 91       	pop	r25
     6aa:	8f 91       	pop	r24
     6ac:	7f 91       	pop	r23
     6ae:	6f 91       	pop	r22
     6b0:	5f 91       	pop	r21
     6b2:	4f 91       	pop	r20
     6b4:	3f 91       	pop	r19
     6b6:	2f 91       	pop	r18
     6b8:	0f 90       	pop	r0
     6ba:	0b be       	out	0x3b, r0	; 59
     6bc:	0f 90       	pop	r0
     6be:	09 be       	out	0x39, r0	; 57
     6c0:	0f 90       	pop	r0
     6c2:	08 be       	out	0x38, r0	; 56
     6c4:	0f 90       	pop	r0
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	0f 90       	pop	r0
     6ca:	1f 90       	pop	r1
     6cc:	18 95       	reti

000006ce <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	08 b6       	in	r0, 0x38	; 56
     6da:	0f 92       	push	r0
     6dc:	18 be       	out	0x38, r1	; 56
     6de:	09 b6       	in	r0, 0x39	; 57
     6e0:	0f 92       	push	r0
     6e2:	19 be       	out	0x39, r1	; 57
     6e4:	0b b6       	in	r0, 0x3b	; 59
     6e6:	0f 92       	push	r0
     6e8:	1b be       	out	0x3b, r1	; 59
     6ea:	2f 93       	push	r18
     6ec:	3f 93       	push	r19
     6ee:	4f 93       	push	r20
     6f0:	5f 93       	push	r21
     6f2:	6f 93       	push	r22
     6f4:	7f 93       	push	r23
     6f6:	8f 93       	push	r24
     6f8:	9f 93       	push	r25
     6fa:	af 93       	push	r26
     6fc:	bf 93       	push	r27
     6fe:	ef 93       	push	r30
     700:	ff 93       	push	r31
     702:	1c df       	rcall	.-456    	; 0x53c <twim_interrupt_handler>
     704:	ff 91       	pop	r31
     706:	ef 91       	pop	r30
     708:	bf 91       	pop	r27
     70a:	af 91       	pop	r26
     70c:	9f 91       	pop	r25
     70e:	8f 91       	pop	r24
     710:	7f 91       	pop	r23
     712:	6f 91       	pop	r22
     714:	5f 91       	pop	r21
     716:	4f 91       	pop	r20
     718:	3f 91       	pop	r19
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0b be       	out	0x3b, r0	; 59
     720:	0f 90       	pop	r0
     722:	09 be       	out	0x39, r0	; 57
     724:	0f 90       	pop	r0
     726:	08 be       	out	0x38, r0	; 56
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     732:	fc 01       	movw	r30, r24
     734:	91 81       	ldd	r25, Z+1	; 0x01
     736:	95 ff       	sbrs	r25, 5
     738:	fd cf       	rjmp	.-6      	; 0x734 <usart_putchar+0x2>
     73a:	60 83       	st	Z, r22
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	08 95       	ret

00000742 <usart_getchar>:
     742:	fc 01       	movw	r30, r24
     744:	91 81       	ldd	r25, Z+1	; 0x01
     746:	99 23       	and	r25, r25
     748:	ec f7       	brge	.-6      	; 0x744 <usart_getchar+0x2>
     74a:	80 81       	ld	r24, Z
     74c:	08 95       	ret

0000074e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     74e:	4f 92       	push	r4
     750:	5f 92       	push	r5
     752:	6f 92       	push	r6
     754:	7f 92       	push	r7
     756:	8f 92       	push	r8
     758:	9f 92       	push	r9
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	7c 01       	movw	r14, r24
     76a:	4a 01       	movw	r8, r20
     76c:	5b 01       	movw	r10, r22
     76e:	28 01       	movw	r4, r16
     770:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     772:	fc 01       	movw	r30, r24
     774:	84 81       	ldd	r24, Z+4	; 0x04
     776:	82 ff       	sbrs	r24, 2
     778:	16 c0       	rjmp	.+44     	; 0x7a6 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     77a:	d9 01       	movw	r26, r18
     77c:	c8 01       	movw	r24, r16
     77e:	68 94       	set
     780:	12 f8       	bld	r1, 2
     782:	b6 95       	lsr	r27
     784:	a7 95       	ror	r26
     786:	97 95       	ror	r25
     788:	87 95       	ror	r24
     78a:	16 94       	lsr	r1
     78c:	d1 f7       	brne	.-12     	; 0x782 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     78e:	b9 01       	movw	r22, r18
     790:	a8 01       	movw	r20, r16
     792:	03 2e       	mov	r0, r19
     794:	36 e1       	ldi	r19, 0x16	; 22
     796:	76 95       	lsr	r23
     798:	67 95       	ror	r22
     79a:	57 95       	ror	r21
     79c:	47 95       	ror	r20
     79e:	3a 95       	dec	r19
     7a0:	d1 f7       	brne	.-12     	; 0x796 <usart_set_baudrate+0x48>
     7a2:	30 2d       	mov	r19, r0
     7a4:	15 c0       	rjmp	.+42     	; 0x7d0 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     7a6:	d9 01       	movw	r26, r18
     7a8:	c8 01       	movw	r24, r16
     7aa:	68 94       	set
     7ac:	13 f8       	bld	r1, 3
     7ae:	b6 95       	lsr	r27
     7b0:	a7 95       	ror	r26
     7b2:	97 95       	ror	r25
     7b4:	87 95       	ror	r24
     7b6:	16 94       	lsr	r1
     7b8:	d1 f7       	brne	.-12     	; 0x7ae <usart_set_baudrate+0x60>
		min_rate /= 2;
     7ba:	b9 01       	movw	r22, r18
     7bc:	a8 01       	movw	r20, r16
     7be:	03 2e       	mov	r0, r19
     7c0:	37 e1       	ldi	r19, 0x17	; 23
     7c2:	76 95       	lsr	r23
     7c4:	67 95       	ror	r22
     7c6:	57 95       	ror	r21
     7c8:	47 95       	ror	r20
     7ca:	3a 95       	dec	r19
     7cc:	d1 f7       	brne	.-12     	; 0x7c2 <usart_set_baudrate+0x74>
     7ce:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     7d0:	88 15       	cp	r24, r8
     7d2:	99 05       	cpc	r25, r9
     7d4:	aa 05       	cpc	r26, r10
     7d6:	bb 05       	cpc	r27, r11
     7d8:	08 f4       	brcc	.+2      	; 0x7dc <usart_set_baudrate+0x8e>
     7da:	a6 c0       	rjmp	.+332    	; 0x928 <usart_set_baudrate+0x1da>
     7dc:	84 16       	cp	r8, r20
     7de:	95 06       	cpc	r9, r21
     7e0:	a6 06       	cpc	r10, r22
     7e2:	b7 06       	cpc	r11, r23
     7e4:	08 f4       	brcc	.+2      	; 0x7e8 <usart_set_baudrate+0x9a>
     7e6:	a2 c0       	rjmp	.+324    	; 0x92c <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7e8:	f7 01       	movw	r30, r14
     7ea:	84 81       	ldd	r24, Z+4	; 0x04
     7ec:	82 fd       	sbrc	r24, 2
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <usart_set_baudrate+0xaa>
		baud *= 2;
     7f0:	88 0c       	add	r8, r8
     7f2:	99 1c       	adc	r9, r9
     7f4:	aa 1c       	adc	r10, r10
     7f6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7f8:	c3 01       	movw	r24, r6
     7fa:	b2 01       	movw	r22, r4
     7fc:	a5 01       	movw	r20, r10
     7fe:	94 01       	movw	r18, r8
     800:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     804:	2f 3f       	cpi	r18, 0xFF	; 255
     806:	31 05       	cpc	r19, r1
     808:	41 05       	cpc	r20, r1
     80a:	51 05       	cpc	r21, r1
     80c:	08 f4       	brcc	.+2      	; 0x810 <usart_set_baudrate+0xc2>
     80e:	90 c0       	rjmp	.+288    	; 0x930 <usart_set_baudrate+0x1e2>
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a0 e0       	ldi	r26, 0x00	; 0
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	c9 ef       	ldi	r28, 0xF9	; 249
     81a:	05 c0       	rjmp	.+10     	; 0x826 <usart_set_baudrate+0xd8>
     81c:	28 17       	cp	r18, r24
     81e:	39 07       	cpc	r19, r25
     820:	4a 07       	cpc	r20, r26
     822:	5b 07       	cpc	r21, r27
     824:	58 f0       	brcs	.+22     	; 0x83c <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	aa 1f       	adc	r26, r26
     82c:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     82e:	cd 3f       	cpi	r28, 0xFD	; 253
     830:	0c f4       	brge	.+2      	; 0x834 <usart_set_baudrate+0xe6>
			limit |= 1;
     832:	81 60       	ori	r24, 0x01	; 1
     834:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     836:	c7 30       	cpi	r28, 0x07	; 7
     838:	89 f7       	brne	.-30     	; 0x81c <usart_set_baudrate+0xce>
     83a:	4f c0       	rjmp	.+158    	; 0x8da <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     83c:	cc 23       	and	r28, r28
     83e:	0c f0       	brlt	.+2      	; 0x842 <usart_set_baudrate+0xf4>
     840:	4c c0       	rjmp	.+152    	; 0x8da <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     842:	d5 01       	movw	r26, r10
     844:	c4 01       	movw	r24, r8
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	aa 1f       	adc	r26, r26
     84c:	bb 1f       	adc	r27, r27
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	aa 1f       	adc	r26, r26
     854:	bb 1f       	adc	r27, r27
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	aa 1f       	adc	r26, r26
     85c:	bb 1f       	adc	r27, r27
     85e:	48 1a       	sub	r4, r24
     860:	59 0a       	sbc	r5, r25
     862:	6a 0a       	sbc	r6, r26
     864:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     866:	ce 3f       	cpi	r28, 0xFE	; 254
     868:	f4 f4       	brge	.+60     	; 0x8a6 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     86a:	8d ef       	ldi	r24, 0xFD	; 253
     86c:	9f ef       	ldi	r25, 0xFF	; 255
     86e:	8c 1b       	sub	r24, r28
     870:	91 09       	sbc	r25, r1
     872:	c7 fd       	sbrc	r28, 7
     874:	93 95       	inc	r25
     876:	04 c0       	rjmp	.+8      	; 0x880 <usart_set_baudrate+0x132>
     878:	44 0c       	add	r4, r4
     87a:	55 1c       	adc	r5, r5
     87c:	66 1c       	adc	r6, r6
     87e:	77 1c       	adc	r7, r7
     880:	8a 95       	dec	r24
     882:	d2 f7       	brpl	.-12     	; 0x878 <usart_set_baudrate+0x12a>
     884:	d5 01       	movw	r26, r10
     886:	c4 01       	movw	r24, r8
     888:	b6 95       	lsr	r27
     88a:	a7 95       	ror	r26
     88c:	97 95       	ror	r25
     88e:	87 95       	ror	r24
     890:	bc 01       	movw	r22, r24
     892:	cd 01       	movw	r24, r26
     894:	64 0d       	add	r22, r4
     896:	75 1d       	adc	r23, r5
     898:	86 1d       	adc	r24, r6
     89a:	97 1d       	adc	r25, r7
     89c:	a5 01       	movw	r20, r10
     89e:	94 01       	movw	r18, r8
     8a0:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <__udivmodsi4>
     8a4:	37 c0       	rjmp	.+110    	; 0x914 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	8c 0f       	add	r24, r28
     8aa:	a5 01       	movw	r20, r10
     8ac:	94 01       	movw	r18, r8
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <usart_set_baudrate+0x16a>
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	44 1f       	adc	r20, r20
     8b6:	55 1f       	adc	r21, r21
     8b8:	8a 95       	dec	r24
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     8bc:	da 01       	movw	r26, r20
     8be:	c9 01       	movw	r24, r18
     8c0:	b6 95       	lsr	r27
     8c2:	a7 95       	ror	r26
     8c4:	97 95       	ror	r25
     8c6:	87 95       	ror	r24
     8c8:	bc 01       	movw	r22, r24
     8ca:	cd 01       	movw	r24, r26
     8cc:	64 0d       	add	r22, r4
     8ce:	75 1d       	adc	r23, r5
     8d0:	86 1d       	adc	r24, r6
     8d2:	97 1d       	adc	r25, r7
     8d4:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <__udivmodsi4>
     8d8:	1d c0       	rjmp	.+58     	; 0x914 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	8c 0f       	add	r24, r28
     8de:	a5 01       	movw	r20, r10
     8e0:	94 01       	movw	r18, r8
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <usart_set_baudrate+0x19e>
     8e4:	22 0f       	add	r18, r18
     8e6:	33 1f       	adc	r19, r19
     8e8:	44 1f       	adc	r20, r20
     8ea:	55 1f       	adc	r21, r21
     8ec:	8a 95       	dec	r24
     8ee:	d2 f7       	brpl	.-12     	; 0x8e4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8f0:	da 01       	movw	r26, r20
     8f2:	c9 01       	movw	r24, r18
     8f4:	b6 95       	lsr	r27
     8f6:	a7 95       	ror	r26
     8f8:	97 95       	ror	r25
     8fa:	87 95       	ror	r24
     8fc:	bc 01       	movw	r22, r24
     8fe:	cd 01       	movw	r24, r26
     900:	64 0d       	add	r22, r4
     902:	75 1d       	adc	r23, r5
     904:	86 1d       	adc	r24, r6
     906:	97 1d       	adc	r25, r7
     908:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <__udivmodsi4>
     90c:	21 50       	subi	r18, 0x01	; 1
     90e:	31 09       	sbc	r19, r1
     910:	41 09       	sbc	r20, r1
     912:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     914:	83 2f       	mov	r24, r19
     916:	8f 70       	andi	r24, 0x0F	; 15
     918:	c2 95       	swap	r28
     91a:	c0 7f       	andi	r28, 0xF0	; 240
     91c:	c8 2b       	or	r28, r24
     91e:	f7 01       	movw	r30, r14
     920:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     922:	26 83       	std	Z+6, r18	; 0x06

	return true;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	18 c0       	rjmp	.+48     	; 0x958 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	16 c0       	rjmp	.+44     	; 0x958 <usart_set_baudrate+0x20a>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	14 c0       	rjmp	.+40     	; 0x958 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     930:	d5 01       	movw	r26, r10
     932:	c4 01       	movw	r24, r8
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	aa 1f       	adc	r26, r26
     93a:	bb 1f       	adc	r27, r27
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	aa 1f       	adc	r26, r26
     942:	bb 1f       	adc	r27, r27
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	aa 1f       	adc	r26, r26
     94a:	bb 1f       	adc	r27, r27
     94c:	48 1a       	sub	r4, r24
     94e:	59 0a       	sbc	r5, r25
     950:	6a 0a       	sbc	r6, r26
     952:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     954:	c9 ef       	ldi	r28, 0xF9	; 249
     956:	89 cf       	rjmp	.-238    	; 0x86a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	9f 90       	pop	r9
     968:	8f 90       	pop	r8
     96a:	7f 90       	pop	r7
     96c:	6f 90       	pop	r6
     96e:	5f 90       	pop	r5
     970:	4f 90       	pop	r4
     972:	08 95       	ret

00000974 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	ec 01       	movw	r28, r24
     97e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	09 f4       	brne	.+2      	; 0x986 <usart_init_rs232+0x12>
     984:	be c0       	rjmp	.+380    	; 0xb02 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     986:	80 3c       	cpi	r24, 0xC0	; 192
     988:	91 05       	cpc	r25, r1
     98a:	21 f4       	brne	.+8      	; 0x994 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     98c:	60 e1       	ldi	r22, 0x10	; 16
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	fb d3       	rcall	.+2038   	; 0x1188 <sysclk_enable_module>
     992:	b7 c0       	rjmp	.+366    	; 0xb02 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     994:	c1 15       	cp	r28, r1
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	d8 07       	cpc	r29, r24
     99a:	21 f4       	brne	.+8      	; 0x9a4 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     99c:	64 e0       	ldi	r22, 0x04	; 4
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	f3 d3       	rcall	.+2022   	; 0x1188 <sysclk_enable_module>
     9a2:	af c0       	rjmp	.+350    	; 0xb02 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     9a4:	c0 38       	cpi	r28, 0x80	; 128
     9a6:	e1 e0       	ldi	r30, 0x01	; 1
     9a8:	de 07       	cpc	r29, r30
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     9ac:	62 e0       	ldi	r22, 0x02	; 2
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	eb d3       	rcall	.+2006   	; 0x1188 <sysclk_enable_module>
     9b2:	a7 c0       	rjmp	.+334    	; 0xb02 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     9b4:	c1 15       	cp	r28, r1
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
     9b8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     9ba:	21 f4       	brne	.+8      	; 0x9c4 <usart_init_rs232+0x50>
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	e3 d3       	rcall	.+1990   	; 0x1188 <sysclk_enable_module>
     9c2:	9f c0       	rjmp	.+318    	; 0xb02 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     9c4:	c0 38       	cpi	r28, 0x80	; 128
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <usart_init_rs232+0x60>
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	db d3       	rcall	.+1974   	; 0x1188 <sysclk_enable_module>
     9d2:	97 c0       	rjmp	.+302    	; 0xb02 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9d4:	c1 15       	cp	r28, r1
     9d6:	e2 e0       	ldi	r30, 0x02	; 2
     9d8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9da:	21 f4       	brne	.+8      	; 0x9e4 <usart_init_rs232+0x70>
     9dc:	62 e0       	ldi	r22, 0x02	; 2
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	d3 d3       	rcall	.+1958   	; 0x1188 <sysclk_enable_module>
     9e2:	8f c0       	rjmp	.+286    	; 0xb02 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9e4:	c0 32       	cpi	r28, 0x20	; 32
     9e6:	f3 e0       	ldi	r31, 0x03	; 3
     9e8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <usart_init_rs232+0x80>
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	cb d3       	rcall	.+1942   	; 0x1188 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9f2:	87 c0       	rjmp	.+270    	; 0xb02 <usart_init_rs232+0x18e>
     9f4:	c1 15       	cp	r28, r1
     9f6:	88 e0       	ldi	r24, 0x08	; 8
     9f8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9fa:	21 f4       	brne	.+8      	; 0xa04 <usart_init_rs232+0x90>
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	c3 d3       	rcall	.+1926   	; 0x1188 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a02:	7f c0       	rjmp	.+254    	; 0xb02 <usart_init_rs232+0x18e>
     a04:	c1 15       	cp	r28, r1
     a06:	e9 e0       	ldi	r30, 0x09	; 9
     a08:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a0a:	21 f4       	brne	.+8      	; 0xa14 <usart_init_rs232+0xa0>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	bb d3       	rcall	.+1910   	; 0x1188 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     a12:	77 c0       	rjmp	.+238    	; 0xb02 <usart_init_rs232+0x18e>
     a14:	c1 15       	cp	r28, r1
     a16:	fa e0       	ldi	r31, 0x0A	; 10
     a18:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a1a:	21 f4       	brne	.+8      	; 0xa24 <usart_init_rs232+0xb0>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	b3 d3       	rcall	.+1894   	; 0x1188 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a22:	6f c0       	rjmp	.+222    	; 0xb02 <usart_init_rs232+0x18e>
     a24:	c0 34       	cpi	r28, 0x40	; 64
     a26:	88 e0       	ldi	r24, 0x08	; 8
     a28:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a2a:	21 f4       	brne	.+8      	; 0xa34 <usart_init_rs232+0xc0>
     a2c:	62 e0       	ldi	r22, 0x02	; 2
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	ab d3       	rcall	.+1878   	; 0x1188 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a32:	67 c0       	rjmp	.+206    	; 0xb02 <usart_init_rs232+0x18e>
     a34:	c0 34       	cpi	r28, 0x40	; 64
     a36:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a38:	de 07       	cpc	r29, r30
     a3a:	21 f4       	brne	.+8      	; 0xa44 <usart_init_rs232+0xd0>
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	a3 d3       	rcall	.+1862   	; 0x1188 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a42:	5f c0       	rjmp	.+190    	; 0xb02 <usart_init_rs232+0x18e>
     a44:	c0 39       	cpi	r28, 0x90	; 144
     a46:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a48:	df 07       	cpc	r29, r31
     a4a:	21 f4       	brne	.+8      	; 0xa54 <usart_init_rs232+0xe0>
     a4c:	64 e0       	ldi	r22, 0x04	; 4
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	9b d3       	rcall	.+1846   	; 0x1188 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a52:	57 c0       	rjmp	.+174    	; 0xb02 <usart_init_rs232+0x18e>
     a54:	c0 39       	cpi	r28, 0x90	; 144
     a56:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a58:	d8 07       	cpc	r29, r24
     a5a:	21 f4       	brne	.+8      	; 0xa64 <usart_init_rs232+0xf0>
     a5c:	64 e0       	ldi	r22, 0x04	; 4
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	93 d3       	rcall	.+1830   	; 0x1188 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a62:	4f c0       	rjmp	.+158    	; 0xb02 <usart_init_rs232+0x18e>
     a64:	c0 39       	cpi	r28, 0x90	; 144
     a66:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a68:	de 07       	cpc	r29, r30
     a6a:	21 f4       	brne	.+8      	; 0xa74 <usart_init_rs232+0x100>
     a6c:	64 e0       	ldi	r22, 0x04	; 4
     a6e:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     a70:	8b d3       	rcall	.+1814   	; 0x1188 <sysclk_enable_module>
     a72:	47 c0       	rjmp	.+142    	; 0xb02 <usart_init_rs232+0x18e>
     a74:	c0 3c       	cpi	r28, 0xC0	; 192
     a76:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     a78:	df 07       	cpc	r29, r31
     a7a:	21 f4       	brne	.+8      	; 0xa84 <usart_init_rs232+0x110>
     a7c:	68 e0       	ldi	r22, 0x08	; 8
     a7e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     a80:	83 d3       	rcall	.+1798   	; 0x1188 <sysclk_enable_module>
     a82:	3f c0       	rjmp	.+126    	; 0xb02 <usart_init_rs232+0x18e>
     a84:	c0 3c       	cpi	r28, 0xC0	; 192
     a86:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     a88:	d8 07       	cpc	r29, r24
     a8a:	21 f4       	brne	.+8      	; 0xa94 <usart_init_rs232+0x120>
     a8c:	68 e0       	ldi	r22, 0x08	; 8
     a8e:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     a90:	7b d3       	rcall	.+1782   	; 0x1188 <sysclk_enable_module>
     a92:	37 c0       	rjmp	.+110    	; 0xb02 <usart_init_rs232+0x18e>
     a94:	c0 3a       	cpi	r28, 0xA0	; 160
     a96:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     a98:	de 07       	cpc	r29, r30
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <usart_init_rs232+0x130>
     a9c:	60 e1       	ldi	r22, 0x10	; 16
     a9e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     aa0:	73 d3       	rcall	.+1766   	; 0x1188 <sysclk_enable_module>
     aa2:	2f c0       	rjmp	.+94     	; 0xb02 <usart_init_rs232+0x18e>
     aa4:	c0 3a       	cpi	r28, 0xA0	; 160
     aa6:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     aa8:	df 07       	cpc	r29, r31
     aaa:	21 f4       	brne	.+8      	; 0xab4 <usart_init_rs232+0x140>
     aac:	60 e1       	ldi	r22, 0x10	; 16
     aae:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     ab0:	6b d3       	rcall	.+1750   	; 0x1188 <sysclk_enable_module>
     ab2:	27 c0       	rjmp	.+78     	; 0xb02 <usart_init_rs232+0x18e>
     ab4:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     ab6:	8a e0       	ldi	r24, 0x0A	; 10
     ab8:	d8 07       	cpc	r29, r24
     aba:	21 f4       	brne	.+8      	; 0xac4 <usart_init_rs232+0x150>
     abc:	60 e1       	ldi	r22, 0x10	; 16
     abe:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     ac0:	63 d3       	rcall	.+1734   	; 0x1188 <sysclk_enable_module>
     ac2:	1f c0       	rjmp	.+62     	; 0xb02 <usart_init_rs232+0x18e>
     ac4:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     ac6:	e8 e0       	ldi	r30, 0x08	; 8
     ac8:	de 07       	cpc	r29, r30
     aca:	21 f4       	brne	.+8      	; 0xad4 <usart_init_rs232+0x160>
     acc:	60 e2       	ldi	r22, 0x20	; 32
     ace:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     ad0:	5b d3       	rcall	.+1718   	; 0x1188 <sysclk_enable_module>
     ad2:	17 c0       	rjmp	.+46     	; 0xb02 <usart_init_rs232+0x18e>
     ad4:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     ad6:	f9 e0       	ldi	r31, 0x09	; 9
     ad8:	df 07       	cpc	r29, r31
     ada:	21 f4       	brne	.+8      	; 0xae4 <usart_init_rs232+0x170>
     adc:	60 e2       	ldi	r22, 0x20	; 32
     ade:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     ae0:	53 d3       	rcall	.+1702   	; 0x1188 <sysclk_enable_module>
     ae2:	0f c0       	rjmp	.+30     	; 0xb02 <usart_init_rs232+0x18e>
     ae4:	c0 38       	cpi	r28, 0x80	; 128
     ae6:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     ae8:	d8 07       	cpc	r29, r24
     aea:	21 f4       	brne	.+8      	; 0xaf4 <usart_init_rs232+0x180>
     aec:	60 e4       	ldi	r22, 0x40	; 64
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	4b d3       	rcall	.+1686   	; 0x1188 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     af2:	07 c0       	rjmp	.+14     	; 0xb02 <usart_init_rs232+0x18e>
     af4:	c0 3a       	cpi	r28, 0xA0	; 160
     af6:	e4 e0       	ldi	r30, 0x04	; 4
     af8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     afa:	19 f4       	brne	.+6      	; 0xb02 <usart_init_rs232+0x18e>
     afc:	60 e4       	ldi	r22, 0x40	; 64
     afe:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     b00:	43 d3       	rcall	.+1670   	; 0x1188 <sysclk_enable_module>
     b02:	8d 81       	ldd	r24, Y+5	; 0x05
     b04:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     b06:	8d 83       	std	Y+5, r24	; 0x05
     b08:	f8 01       	movw	r30, r16
     b0a:	95 81       	ldd	r25, Z+5	; 0x05
     b0c:	84 81       	ldd	r24, Z+4	; 0x04
     b0e:	89 2b       	or	r24, r25
     b10:	96 81       	ldd	r25, Z+6	; 0x06
     b12:	91 11       	cpse	r25, r1
     b14:	98 e0       	ldi	r25, 0x08	; 8
     b16:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     b18:	8d 83       	std	Y+5, r24	; 0x05
     b1a:	f8 01       	movw	r30, r16
     b1c:	40 81       	ld	r20, Z
     b1e:	51 81       	ldd	r21, Z+1	; 0x01
     b20:	62 81       	ldd	r22, Z+2	; 0x02
     b22:	73 81       	ldd	r23, Z+3	; 0x03
     b24:	00 e0       	ldi	r16, 0x00	; 0
     b26:	18 e4       	ldi	r17, 0x48	; 72
     b28:	28 ee       	ldi	r18, 0xE8	; 232
     b2a:	31 e0       	ldi	r19, 0x01	; 1
     b2c:	ce 01       	movw	r24, r28
     b2e:	0f de       	rcall	.-994    	; 0x74e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	98 60       	ori	r25, 0x08	; 8
     b34:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     b36:	9c 81       	ldd	r25, Y+4	; 0x04
     b38:	90 61       	ori	r25, 0x10	; 16
     b3a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     b46:	08 95       	ret

00000b48 <imu_roll>:



double imu_roll()
{
	return bno055_euler.r;
     b48:	60 91 76 21 	lds	r22, 0x2176	; 0x802176 <bno055_euler+0x4>
     b4c:	70 91 77 21 	lds	r23, 0x2177	; 0x802177 <bno055_euler+0x5>
     b50:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <bno055_euler+0x6>
     b54:	90 91 79 21 	lds	r25, 0x2179	; 0x802179 <bno055_euler+0x7>
}
     b58:	08 95       	ret

00000b5a <imu_pitch>:

double imu_pitch()
{
	return bno055_euler.p;
     b5a:	60 91 7a 21 	lds	r22, 0x217A	; 0x80217a <bno055_euler+0x8>
     b5e:	70 91 7b 21 	lds	r23, 0x217B	; 0x80217b <bno055_euler+0x9>
     b62:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <bno055_euler+0xa>
     b66:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <bno055_euler+0xb>
}
     b6a:	08 95       	ret

00000b6c <imu_heading>:

double imu_heading()
{
	return bno055_euler.h;
     b6c:	60 91 72 21 	lds	r22, 0x2172	; 0x802172 <bno055_euler>
     b70:	70 91 73 21 	lds	r23, 0x2173	; 0x802173 <bno055_euler+0x1>
     b74:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <bno055_euler+0x2>
     b78:	90 91 75 21 	lds	r25, 0x2175	; 0x802175 <bno055_euler+0x3>
}
     b7c:	08 95       	ret

00000b7e <cam_switch>:
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
	cam_switch();
}

void cam_switch(void){
	PORTA.OUT ^= PIN3_bm; // Changes A3 from high to low or vice-versa
     b7e:	e0 e0       	ldi	r30, 0x00	; 0
     b80:	f6 e0       	ldi	r31, 0x06	; 6
     b82:	94 81       	ldd	r25, Z+4	; 0x04
     b84:	88 e0       	ldi	r24, 0x08	; 8
     b86:	89 27       	eor	r24, r25
     b88:	84 83       	std	Z+4, r24	; 0x04
     b8a:	08 95       	ret

00000b8c <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f6 e0       	ldi	r31, 0x06	; 6
     b90:	80 81       	ld	r24, Z
     b92:	88 60       	ori	r24, 0x08	; 8
     b94:	80 83       	st	Z, r24
	cam_switch();
     b96:	f3 cf       	rjmp	.-26     	; 0xb7e <cam_switch>
     b98:	08 95       	ret

00000b9a <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     ba4:	62 e0       	ldi	r22, 0x02	; 2
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	ef d2       	rcall	.+1502   	; 0x1188 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
     baa:	c0 e0       	ldi	r28, 0x00	; 0
     bac:	d2 e0       	ldi	r29, 0x02	; 2
     bae:	ff 24       	eor	r15, r15
     bb0:	f3 94       	inc	r15
     bb2:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
     bb4:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
     bb6:	80 e1       	ldi	r24, 0x10	; 16
     bb8:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
     bba:	85 e0       	ldi	r24, 0x05	; 5
     bbc:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     bbe:	61 e2       	ldi	r22, 0x21	; 33
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	f7 d2       	rcall	.+1518   	; 0x11b4 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     bc6:	08 2f       	mov	r16, r24
     bc8:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     bca:	10 2f       	mov	r17, r16
     bcc:	00 27       	eor	r16, r16
     bce:	60 e2       	ldi	r22, 0x20	; 32
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	ef d2       	rcall	.+1502   	; 0x11b4 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     bd6:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
     bd8:	0c 87       	std	Y+12, r16	; 0x0c
     bda:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
     bdc:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 0	
     bde:	19 a2       	std	Y+33, r1	; 0x21
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	08 95       	ret

00000bec <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	27 97       	sbiw	r28, 0x07	; 7
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     bfa:	60 e2       	ldi	r22, 0x20	; 32
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	c4 d2       	rcall	.+1416   	; 0x1188 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     c00:	e0 e6       	ldi	r30, 0x60	; 96
     c02:	f6 e0       	ldi	r31, 0x06	; 6
     c04:	80 81       	ld	r24, Z
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c0a:	e6 e0       	ldi	r30, 0x06	; 6
     c0c:	f0 e2       	ldi	r31, 0x20	; 32
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c12:	85 81       	ldd	r24, Z+5	; 0x05
     c14:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c16:	86 81       	ldd	r24, Z+6	; 0x06
     c18:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	a2 81       	ldd	r26, Z+2	; 0x02
     c20:	b3 81       	ldd	r27, Z+3	; 0x03
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	ab 83       	std	Y+3, r26	; 0x03
     c28:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     c2a:	60 e2       	ldi	r22, 0x20	; 32
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	ac d2       	rcall	.+1368   	; 0x1188 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	80 eb       	ldi	r24, 0xB0	; 176
     c38:	99 e0       	ldi	r25, 0x09	; 9
     c3a:	9c de       	rcall	.-712    	; 0x974 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     c3c:	27 96       	adiw	r28, 0x07	; 7
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     c4a:	61 50       	subi	r22, 0x01	; 1
     c4c:	71 09       	sbc	r23, r1
     c4e:	81 09       	sbc	r24, r1
     c50:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     c52:	61 15       	cp	r22, r1
     c54:	71 05       	cpc	r23, r1
     c56:	81 05       	cpc	r24, r1
     c58:	91 05       	cpc	r25, r1
     c5a:	b9 f7       	brne	.-18     	; 0xc4a <__portable_avr_delay_cycles+0x2>
     c5c:	08 95       	ret

00000c5e <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     c5e:	e0 e4       	ldi	r30, 0x40	; 64
     c60:	f6 e0       	ldi	r31, 0x06	; 6
     c62:	94 81       	ldd	r25, Z+4	; 0x04
     c64:	80 e1       	ldi	r24, 0x10	; 16
     c66:	89 27       	eor	r24, r25
     c68:	84 83       	std	Z+4, r24	; 0x04
     c6a:	08 95       	ret

00000c6c <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     c6c:	e0 e4       	ldi	r30, 0x40	; 64
     c6e:	f6 e0       	ldi	r31, 0x06	; 6
     c70:	84 81       	ldd	r24, Z+4	; 0x04
     c72:	80 61       	ori	r24, 0x10	; 16
     c74:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
     c76:	f3 df       	rcall	.-26     	; 0xc5e <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     c78:	8e e1       	ldi	r24, 0x1E	; 30
     c7a:	b9 d0       	rcall	.+370    	; 0xdee <spi_write>
	delay_ms(3);
     c7c:	60 e8       	ldi	r22, 0x80	; 128
     c7e:	7e e3       	ldi	r23, 0x3E	; 62
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     c84:	e1 df       	rcall	.-62     	; 0xc48 <__portable_avr_delay_cycles>
     c86:	eb df       	rcall	.-42     	; 0xc5e <flip_ms5607>
	delay_ms(2);
     c88:	6b ea       	ldi	r22, 0xAB	; 171
     c8a:	79 e2       	ldi	r23, 0x29	; 41
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	db cf       	rjmp	.-74     	; 0xc48 <__portable_avr_delay_cycles>
     c92:	08 95       	ret

00000c94 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     c9a:	e1 df       	rcall	.-62     	; 0xc5e <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     c9c:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     c9e:	a7 d0       	rcall	.+334    	; 0xdee <spi_write>
     ca0:	97 d0       	rcall	.+302    	; 0xdd0 <spi_read>
     ca2:	c8 2f       	mov	r28, r24
     ca4:	d0 e0       	ldi	r29, 0x00	; 0
     ca6:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     ca8:	cc 27       	eor	r28, r28
     caa:	92 d0       	rcall	.+292    	; 0xdd0 <spi_read>
     cac:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     cae:	d7 df       	rcall	.-82     	; 0xc5e <flip_ms5607>
     cb0:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <ms5607_convert_d1>:
     cb8:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
     cba:	df 93       	push	r29
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <ms5607_convert_d1+0x6>
     cbe:	1f 92       	push	r1
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
     cc4:	19 82       	std	Y+1, r1	; 0x01
     cc6:	1a 82       	std	Y+2, r1	; 0x02
     cc8:	1b 82       	std	Y+3, r1	; 0x03
     cca:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
     ccc:	c8 df       	rcall	.-112    	; 0xc5e <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     cce:	88 e4       	ldi	r24, 0x48	; 72
     cd0:	8e d0       	rcall	.+284    	; 0xdee <spi_write>
	delay_ms(10);
     cd2:	66 e5       	ldi	r22, 0x56	; 86
     cd4:	70 ed       	ldi	r23, 0xD0	; 208
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     cda:	b6 df       	rcall	.-148    	; 0xc48 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     cdc:	c0 df       	rcall	.-128    	; 0xc5e <flip_ms5607>
     cde:	bf df       	rcall	.-130    	; 0xc5e <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	85 d0       	rcall	.+266    	; 0xdee <spi_write>
     ce4:	75 d0       	rcall	.+234    	; 0xdd0 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a0 e0       	ldi	r26, 0x00	; 0
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	dc 01       	movw	r26, r24
     cee:	99 27       	eor	r25, r25
     cf0:	88 27       	eor	r24, r24
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	ab 83       	std	Y+3, r26	; 0x03
     cf8:	bc 83       	std	Y+4, r27	; 0x04
     cfa:	6a d0       	rcall	.+212    	; 0xdd0 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
     cfc:	49 81       	ldd	r20, Y+1	; 0x01
     cfe:	5a 81       	ldd	r21, Y+2	; 0x02
     d00:	6b 81       	ldd	r22, Y+3	; 0x03
     d02:	7c 81       	ldd	r23, Y+4	; 0x04
     d04:	58 2b       	or	r21, r24
     d06:	49 83       	std	Y+1, r20	; 0x01
     d08:	5a 83       	std	Y+2, r21	; 0x02
     d0a:	6b 83       	std	Y+3, r22	; 0x03
     d0c:	7c 83       	std	Y+4, r23	; 0x04
     d0e:	60 d0       	rcall	.+192    	; 0xdd0 <spi_read>
	rx_data |= spi_read();
     d10:	49 81       	ldd	r20, Y+1	; 0x01
     d12:	5a 81       	ldd	r21, Y+2	; 0x02
     d14:	6b 81       	ldd	r22, Y+3	; 0x03
     d16:	7c 81       	ldd	r23, Y+4	; 0x04
     d18:	48 2b       	or	r20, r24
     d1a:	49 83       	std	Y+1, r20	; 0x01
     d1c:	5a 83       	std	Y+2, r21	; 0x02
     d1e:	6b 83       	std	Y+3, r22	; 0x03
     d20:	7c 83       	std	Y+4, r23	; 0x04
     d22:	9d df       	rcall	.-198    	; 0xc5e <flip_ms5607>
	flip_ms5607();
     d24:	69 81       	ldd	r22, Y+1	; 0x01
     d26:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	24 96       	adiw	r28, 0x04	; 4
     d2e:	cd bf       	out	0x3d, r28	; 61
}
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <ms5607_convert_d2>:
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <ms5607_convert_d2+0x6>
     d3e:	1f 92       	push	r1
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
     d44:	19 82       	std	Y+1, r1	; 0x01
     d46:	1a 82       	std	Y+2, r1	; 0x02
     d48:	1b 82       	std	Y+3, r1	; 0x03
     d4a:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
     d4c:	88 df       	rcall	.-240    	; 0xc5e <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     d4e:	88 e5       	ldi	r24, 0x58	; 88
     d50:	4e d0       	rcall	.+156    	; 0xdee <spi_write>
	delay_ms(10);
     d52:	66 e5       	ldi	r22, 0x56	; 86
     d54:	70 ed       	ldi	r23, 0xD0	; 208
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     d5a:	76 df       	rcall	.-276    	; 0xc48 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     d5c:	80 df       	rcall	.-256    	; 0xc5e <flip_ms5607>
     d5e:	7f df       	rcall	.-258    	; 0xc5e <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	45 d0       	rcall	.+138    	; 0xdee <spi_write>
     d64:	35 d0       	rcall	.+106    	; 0xdd0 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	dc 01       	movw	r26, r24
     d6e:	99 27       	eor	r25, r25
     d70:	88 27       	eor	r24, r24
     d72:	89 83       	std	Y+1, r24	; 0x01
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	ab 83       	std	Y+3, r26	; 0x03
     d78:	bc 83       	std	Y+4, r27	; 0x04
     d7a:	2a d0       	rcall	.+84     	; 0xdd0 <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
     d7c:	49 81       	ldd	r20, Y+1	; 0x01
     d7e:	5a 81       	ldd	r21, Y+2	; 0x02
     d80:	6b 81       	ldd	r22, Y+3	; 0x03
     d82:	7c 81       	ldd	r23, Y+4	; 0x04
     d84:	58 2b       	or	r21, r24
     d86:	49 83       	std	Y+1, r20	; 0x01
     d88:	5a 83       	std	Y+2, r21	; 0x02
     d8a:	6b 83       	std	Y+3, r22	; 0x03
     d8c:	7c 83       	std	Y+4, r23	; 0x04
     d8e:	20 d0       	rcall	.+64     	; 0xdd0 <spi_read>
	rx_data |= spi_read();
     d90:	49 81       	ldd	r20, Y+1	; 0x01
     d92:	5a 81       	ldd	r21, Y+2	; 0x02
     d94:	6b 81       	ldd	r22, Y+3	; 0x03
     d96:	7c 81       	ldd	r23, Y+4	; 0x04
     d98:	48 2b       	or	r20, r24
     d9a:	49 83       	std	Y+1, r20	; 0x01
     d9c:	5a 83       	std	Y+2, r21	; 0x02
     d9e:	6b 83       	std	Y+3, r22	; 0x03
     da0:	7c 83       	std	Y+4, r23	; 0x04
     da2:	5d df       	rcall	.-326    	; 0xc5e <flip_ms5607>
	flip_ms5607();
     da4:	69 81       	ldd	r22, Y+1	; 0x01
     da6:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	24 96       	adiw	r28, 0x04	; 4
     dae:	cd bf       	out	0x3d, r28	; 61
}
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <spi_init>:
     db8:	e0 e4       	ldi	r30, 0x40	; 64
     dba:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     dbc:	80 81       	ld	r24, Z
     dbe:	80 6b       	ori	r24, 0xB0	; 176
     dc0:	80 83       	st	Z, r24
     dc2:	68 e0       	ldi	r22, 0x08	; 8
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	e0 d1       	rcall	.+960    	; 0x1188 <sysclk_enable_module>
     dc8:	8c e5       	ldi	r24, 0x5C	; 92
     dca:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     dce:	08 95       	ret

00000dd0 <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
     dd0:	9f b7       	in	r25, 0x3f	; 63
	cli();
     dd2:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
     dda:	e0 ec       	ldi	r30, 0xC0	; 192
     ddc:	f8 e0       	ldi	r31, 0x08	; 8
     dde:	82 81       	ldd	r24, Z+2	; 0x02
     de0:	88 23       	and	r24, r24
     de2:	ec f7       	brge	.-6      	; 0xdde <spi_read+0xe>
	sei();
     de4:	78 94       	sei
	SREG=oldInterruptState;
     de6:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
     de8:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     dec:	08 95       	ret

00000dee <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
     dee:	9f b7       	in	r25, 0x3f	; 63
	cli();
     df0:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
     df2:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     df6:	e0 ec       	ldi	r30, 0xC0	; 192
     df8:	f8 e0       	ldi	r31, 0x08	; 8
     dfa:	82 81       	ldd	r24, Z+2	; 0x02
     dfc:	88 23       	and	r24, r24
     dfe:	ec f7       	brge	.-6      	; 0xdfa <spi_write+0xc>
	sei();
     e00:	78 94       	sei
	SREG=oldInterruptState;
     e02:	9f bf       	out	0x3f, r25	; 63
     e04:	08 95       	ret

00000e06 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     e0c:	9a dc       	rcall	.-1740   	; 0x742 <usart_getchar>
     e0e:	88 83       	st	Y, r24
}
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret

00000e16 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     e16:	8d cc       	rjmp	.-1766   	; 0x732 <usart_putchar>
}
     e18:	08 95       	ret

00000e1a <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	27 97       	sbiw	r28, 0x07	; 7
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e28:	60 e1       	ldi	r22, 0x10	; 16
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	ad d1       	rcall	.+858    	; 0x1188 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     e2e:	e0 e8       	ldi	r30, 0x80	; 128
     e30:	f6 e0       	ldi	r31, 0x06	; 6
     e32:	80 81       	ld	r24, Z
     e34:	88 60       	ori	r24, 0x08	; 8
     e36:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     e38:	80 ea       	ldi	r24, 0xA0	; 160
     e3a:	9a e0       	ldi	r25, 0x0A	; 10
     e3c:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <stdio_base>
     e40:	90 93 54 21 	sts	0x2154, r25	; 0x802154 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e44:	8b e0       	ldi	r24, 0x0B	; 11
     e46:	97 e0       	ldi	r25, 0x07	; 7
     e48:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <ptr_put>
     e4c:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	97 e0       	ldi	r25, 0x07	; 7
     e54:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <ptr_get>
     e58:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     e5c:	ed e0       	ldi	r30, 0x0D	; 13
     e5e:	f0 e2       	ldi	r31, 0x20	; 32
     e60:	84 81       	ldd	r24, Z+4	; 0x04
     e62:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     e64:	85 81       	ldd	r24, Z+5	; 0x05
     e66:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     e68:	86 81       	ldd	r24, Z+6	; 0x06
     e6a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	a2 81       	ldd	r26, Z+2	; 0x02
     e72:	b3 81       	ldd	r27, Z+3	; 0x03
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	ab 83       	std	Y+3, r26	; 0x03
     e7a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     e7c:	60 e1       	ldi	r22, 0x10	; 16
     e7e:	85 e0       	ldi	r24, 0x05	; 5
     e80:	83 d1       	rcall	.+774    	; 0x1188 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     e82:	be 01       	movw	r22, r28
     e84:	6f 5f       	subi	r22, 0xFF	; 255
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	80 ea       	ldi	r24, 0xA0	; 160
     e8a:	9a e0       	ldi	r25, 0x0A	; 10
     e8c:	73 dd       	rcall	.-1306   	; 0x974 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     e8e:	6f e7       	ldi	r22, 0x7F	; 127
     e90:	71 e0       	ldi	r23, 0x01	; 1
     e92:	88 e9       	ldi	r24, 0x98	; 152
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
     e9a:	27 96       	adiw	r28, 0x07	; 7
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <voltage_init>:
#include "voltage.h"
#include <asf.h>


void voltage_init(void)
{
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     eb0:	62 e0       	ldi	r22, 0x02	; 2
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	69 d1       	rcall	.+722    	; 0x1188 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&VOLTAGE_SERIAL);
	VOLTAGE_SERIAL.CTRLA = 0x01; // enable the ADC
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
     eb8:	d2 e0       	ldi	r29, 0x02	; 2
     eba:	ff 24       	eor	r15, r15
     ebc:	f3 94       	inc	r15
     ebe:	f8 82       	st	Y, r15
	VOLTAGE_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
     ec0:	19 82       	std	Y+1, r1	; 0x01
	VOLTAGE_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
     ec2:	80 e1       	ldi	r24, 0x10	; 16
     ec4:	8a 83       	std	Y+2, r24	; 0x02
	VOLTAGE_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
     ec6:	85 e0       	ldi	r24, 0x05	; 5
     ec8:	8c 83       	std	Y+4, r24	; 0x04
     eca:	61 e2       	ldi	r22, 0x21	; 33
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	71 d1       	rcall	.+738    	; 0x11b4 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     ed2:	08 2f       	mov	r16, r24
     ed4:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     ed6:	10 2f       	mov	r17, r16
     ed8:	00 27       	eor	r16, r16
     eda:	60 e2       	ldi	r22, 0x20	; 32
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	69 d1       	rcall	.+722    	; 0x11b4 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     ee2:	08 2b       	or	r16, r24
	VOLTAGE_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
     ee4:	0c 87       	std	Y+12, r16	; 0x0c
     ee6:	1d 87       	std	Y+13, r17	; 0x0d
	
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL = 0x01; // single ended input
     ee8:	f8 a6       	std	Y+40, r15	; 0x28
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
     eea:	19 a6       	std	Y+41, r1	; 0x29
}
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	08 95       	ret

00000ef8 <voltage_read>:

uint16_t voltage_read(void)
{
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
     ef8:	e0 e0       	ldi	r30, 0x00	; 0
     efa:	f2 e0       	ldi	r31, 0x02	; 2
     efc:	80 a5       	ldd	r24, Z+40	; 0x28
     efe:	80 68       	ori	r24, 0x80	; 128
     f00:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_SERIAL.VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
     f02:	83 a5       	ldd	r24, Z+43	; 0x2b
     f04:	88 23       	and	r24, r24
     f06:	e9 f3       	breq	.-6      	; 0xf02 <voltage_read+0xa>
	return VOLTAGE_SERIAL.VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
     f08:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     f0c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     f10:	08 95       	ret

00000f12 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	fc 01       	movw	r30, r24
     f18:	41 15       	cp	r20, r1
     f1a:	51 05       	cpc	r21, r1
     f1c:	b1 f1       	breq	.+108    	; 0xf8a <rb16_write+0x78>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	db 01       	movw	r26, r22
     f2a:	a8 0f       	add	r26, r24
     f2c:	b9 1f       	adc	r27, r25
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	a2 81       	ldd	r26, Z+2	; 0x02
     f34:	b3 81       	ldd	r27, Z+3	; 0x03
     f36:	aa 0f       	add	r26, r26
     f38:	bb 1f       	adc	r27, r27
     f3a:	c6 81       	ldd	r28, Z+6	; 0x06
     f3c:	d7 81       	ldd	r29, Z+7	; 0x07
     f3e:	ac 0f       	add	r26, r28
     f40:	bd 1f       	adc	r27, r29
     f42:	8d 93       	st	X+, r24
     f44:	9c 93       	st	X, r25
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	82 83       	std	Z+2, r24	; 0x02
     f4e:	93 83       	std	Z+3, r25	; 0x03
     f50:	a0 81       	ld	r26, Z
     f52:	b1 81       	ldd	r27, Z+1	; 0x01
     f54:	8a 17       	cp	r24, r26
     f56:	9b 07       	cpc	r25, r27
     f58:	11 f4       	brne	.+4      	; 0xf5e <rb16_write+0x4c>
     f5a:	12 82       	std	Z+2, r1	; 0x02
     f5c:	13 82       	std	Z+3, r1	; 0x03
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	c4 81       	ldd	r28, Z+4	; 0x04
     f64:	d5 81       	ldd	r29, Z+5	; 0x05
     f66:	8c 17       	cp	r24, r28
     f68:	9d 07       	cpc	r25, r29
     f6a:	49 f4       	brne	.+18     	; 0xf7e <rb16_write+0x6c>
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	a8 17       	cp	r26, r24
     f70:	b9 07       	cpc	r27, r25
     f72:	19 f0       	breq	.+6      	; 0xf7a <rb16_write+0x68>
     f74:	84 83       	std	Z+4, r24	; 0x04
     f76:	95 83       	std	Z+5, r25	; 0x05
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <rb16_write+0x6c>
     f7a:	14 82       	std	Z+4, r1	; 0x04
     f7c:	15 82       	std	Z+5, r1	; 0x05
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	82 2f       	mov	r24, r18
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	84 17       	cp	r24, r20
     f86:	95 07       	cpc	r25, r21
     f88:	68 f2       	brcs	.-102    	; 0xf24 <rb16_write+0x12>
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <rb16_init>:
     f90:	fc 01       	movw	r30, r24
     f92:	12 82       	std	Z+2, r1	; 0x02
     f94:	13 82       	std	Z+3, r1	; 0x03
     f96:	14 82       	std	Z+4, r1	; 0x04
     f98:	15 82       	std	Z+5, r1	; 0x05
     f9a:	66 83       	std	Z+6, r22	; 0x06
     f9c:	77 83       	std	Z+7, r23	; 0x07
     f9e:	40 83       	st	Z, r20
     fa0:	51 83       	std	Z+1, r21	; 0x01
     fa2:	08 95       	ret

00000fa4 <rb16_get_nth>:
     fa4:	dc 01       	movw	r26, r24
     fa6:	12 96       	adiw	r26, 0x02	; 2
     fa8:	ed 91       	ld	r30, X+
     faa:	fc 91       	ld	r31, X
     fac:	13 97       	sbiw	r26, 0x03	; 3
     fae:	cb 01       	movw	r24, r22
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	e8 17       	cp	r30, r24
     fb4:	f9 07       	cpc	r31, r25
     fb6:	78 f0       	brcs	.+30     	; 0xfd6 <rb16_get_nth+0x32>
     fb8:	e1 50       	subi	r30, 0x01	; 1
     fba:	f0 48       	sbci	r31, 0x80	; 128
     fbc:	e6 1b       	sub	r30, r22
     fbe:	f7 0b       	sbc	r31, r23
     fc0:	ee 0f       	add	r30, r30
     fc2:	ff 1f       	adc	r31, r31
     fc4:	16 96       	adiw	r26, 0x06	; 6
     fc6:	8d 91       	ld	r24, X+
     fc8:	9c 91       	ld	r25, X
     fca:	17 97       	sbiw	r26, 0x07	; 7
     fcc:	e8 0f       	add	r30, r24
     fce:	f9 1f       	adc	r31, r25
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	08 95       	ret
     fd6:	2d 91       	ld	r18, X+
     fd8:	3c 91       	ld	r19, X
     fda:	11 97       	sbiw	r26, 0x01	; 1
     fdc:	e2 0f       	add	r30, r18
     fde:	f3 1f       	adc	r31, r19
     fe0:	e1 50       	subi	r30, 0x01	; 1
     fe2:	f0 48       	sbci	r31, 0x80	; 128
     fe4:	e6 1b       	sub	r30, r22
     fe6:	f7 0b       	sbc	r31, r23
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	16 96       	adiw	r26, 0x06	; 6
     fee:	8d 91       	ld	r24, X+
     ff0:	9c 91       	ld	r25, X
     ff2:	17 97       	sbiw	r26, 0x07	; 7
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	08 95       	ret

00000ffe <rb32_write>:
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	fc 01       	movw	r30, r24
    100c:	41 15       	cp	r20, r1
    100e:	51 05       	cpc	r21, r1
    1010:	09 f4       	brne	.+2      	; 0x1014 <rb32_write+0x16>
    1012:	3f c0       	rjmp	.+126    	; 0x1092 <rb32_write+0x94>
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	db 01       	movw	r26, r22
    1024:	a8 0f       	add	r26, r24
    1026:	b9 1f       	adc	r27, r25
    1028:	cd 90       	ld	r12, X+
    102a:	dd 90       	ld	r13, X+
    102c:	ed 90       	ld	r14, X+
    102e:	fc 90       	ld	r15, X
    1030:	a2 81       	ldd	r26, Z+2	; 0x02
    1032:	b3 81       	ldd	r27, Z+3	; 0x03
    1034:	aa 0f       	add	r26, r26
    1036:	bb 1f       	adc	r27, r27
    1038:	aa 0f       	add	r26, r26
    103a:	bb 1f       	adc	r27, r27
    103c:	86 81       	ldd	r24, Z+6	; 0x06
    103e:	97 81       	ldd	r25, Z+7	; 0x07
    1040:	a8 0f       	add	r26, r24
    1042:	b9 1f       	adc	r27, r25
    1044:	cd 92       	st	X+, r12
    1046:	dd 92       	st	X+, r13
    1048:	ed 92       	st	X+, r14
    104a:	fc 92       	st	X, r15
    104c:	13 97       	sbiw	r26, 0x03	; 3
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	82 83       	std	Z+2, r24	; 0x02
    1056:	93 83       	std	Z+3, r25	; 0x03
    1058:	a0 81       	ld	r26, Z
    105a:	b1 81       	ldd	r27, Z+1	; 0x01
    105c:	8a 17       	cp	r24, r26
    105e:	9b 07       	cpc	r25, r27
    1060:	11 f4       	brne	.+4      	; 0x1066 <rb32_write+0x68>
    1062:	12 82       	std	Z+2, r1	; 0x02
    1064:	13 82       	std	Z+3, r1	; 0x03
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	c4 81       	ldd	r28, Z+4	; 0x04
    106c:	d5 81       	ldd	r29, Z+5	; 0x05
    106e:	8c 17       	cp	r24, r28
    1070:	9d 07       	cpc	r25, r29
    1072:	49 f4       	brne	.+18     	; 0x1086 <rb32_write+0x88>
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	a8 17       	cp	r26, r24
    1078:	b9 07       	cpc	r27, r25
    107a:	19 f0       	breq	.+6      	; 0x1082 <rb32_write+0x84>
    107c:	84 83       	std	Z+4, r24	; 0x04
    107e:	95 83       	std	Z+5, r25	; 0x05
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <rb32_write+0x88>
    1082:	14 82       	std	Z+4, r1	; 0x04
    1084:	15 82       	std	Z+5, r1	; 0x05
    1086:	2f 5f       	subi	r18, 0xFF	; 255
    1088:	82 2f       	mov	r24, r18
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	84 17       	cp	r24, r20
    108e:	95 07       	cpc	r25, r21
    1090:	20 f2       	brcs	.-120    	; 0x101a <rb32_write+0x1c>
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	08 95       	ret

000010a0 <rb32_init>:
    10a0:	fc 01       	movw	r30, r24
    10a2:	12 82       	std	Z+2, r1	; 0x02
    10a4:	13 82       	std	Z+3, r1	; 0x03
    10a6:	14 82       	std	Z+4, r1	; 0x04
    10a8:	15 82       	std	Z+5, r1	; 0x05
    10aa:	66 83       	std	Z+6, r22	; 0x06
    10ac:	77 83       	std	Z+7, r23	; 0x07
    10ae:	40 83       	st	Z, r20
    10b0:	51 83       	std	Z+1, r21	; 0x01
    10b2:	08 95       	ret

000010b4 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    10b4:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    10b6:	12 96       	adiw	r26, 0x02	; 2
    10b8:	ed 91       	ld	r30, X+
    10ba:	fc 91       	ld	r31, X
    10bc:	13 97       	sbiw	r26, 0x03	; 3
    10be:	cb 01       	movw	r24, r22
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	e8 17       	cp	r30, r24
    10c4:	f9 07       	cpc	r31, r25
    10c6:	98 f0       	brcs	.+38     	; 0x10ee <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    10c8:	e1 50       	subi	r30, 0x01	; 1
    10ca:	f0 4c       	sbci	r31, 0xC0	; 192
    10cc:	e6 1b       	sub	r30, r22
    10ce:	f7 0b       	sbc	r31, r23
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	16 96       	adiw	r26, 0x06	; 6
    10da:	8d 91       	ld	r24, X+
    10dc:	9c 91       	ld	r25, X
    10de:	17 97       	sbiw	r26, 0x07	; 7
    10e0:	e8 0f       	add	r30, r24
    10e2:	f9 1f       	adc	r31, r25
    10e4:	60 81       	ld	r22, Z
    10e6:	71 81       	ldd	r23, Z+1	; 0x01
    10e8:	82 81       	ldd	r24, Z+2	; 0x02
    10ea:	93 81       	ldd	r25, Z+3	; 0x03
    10ec:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    10ee:	2d 91       	ld	r18, X+
    10f0:	3c 91       	ld	r19, X
    10f2:	11 97       	sbiw	r26, 0x01	; 1
    10f4:	e2 0f       	add	r30, r18
    10f6:	f3 1f       	adc	r31, r19
    10f8:	e1 50       	subi	r30, 0x01	; 1
    10fa:	f0 4c       	sbci	r31, 0xC0	; 192
    10fc:	e6 1b       	sub	r30, r22
    10fe:	f7 0b       	sbc	r31, r23
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	16 96       	adiw	r26, 0x06	; 6
    110a:	8d 91       	ld	r24, X+
    110c:	9c 91       	ld	r25, X
    110e:	17 97       	sbiw	r26, 0x07	; 7
    1110:	e8 0f       	add	r30, r24
    1112:	f9 1f       	adc	r31, r25
    1114:	60 81       	ld	r22, Z
    1116:	71 81       	ldd	r23, Z+1	; 0x01
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	93 81       	ldd	r25, Z+3	; 0x03
}
    111c:	08 95       	ret

0000111e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	1f 92       	push	r1
    1124:	1f 92       	push	r1
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1130:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1134:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1138:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    113c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1140:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1144:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1148:	8f b7       	in	r24, 0x3f	; 63
    114a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    114c:	f8 94       	cli
	return flags;
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1150:	e0 e5       	ldi	r30, 0x50	; 80
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	82 60       	ori	r24, 0x02	; 2
    1158:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    115a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    115c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    115e:	81 ff       	sbrs	r24, 1
    1160:	fd cf       	rjmp	.-6      	; 0x115c <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	80 e4       	ldi	r24, 0x40	; 64
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	2f d0       	rcall	.+94     	; 0x11c8 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    116a:	8f b7       	in	r24, 0x3f	; 63
    116c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    116e:	f8 94       	cli
	return flags;
    1170:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1172:	e0 e5       	ldi	r30, 0x50	; 80
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8e 7f       	andi	r24, 0xFE	; 254
    117a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    117c:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	1f 92       	push	r1
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1192:	9f b7       	in	r25, 0x3f	; 63
    1194:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1196:	f8 94       	cli
	return flags;
    1198:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    119a:	e8 2f       	mov	r30, r24
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	e0 59       	subi	r30, 0x90	; 144
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	60 95       	com	r22
    11a4:	80 81       	ld	r24, Z
    11a6:	68 23       	and	r22, r24
    11a8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11aa:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    11ac:	0f 90       	pop	r0
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    11b4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    11b8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    11ba:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    11bc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    11c0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    11c2:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    11c6:	08 95       	ret

000011c8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    11c8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    11ca:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    11cc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    11ce:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    11d0:	60 83       	st	Z, r22
	ret                             // Return to caller
    11d2:	08 95       	ret

000011d4 <__portable_avr_delay_cycles>:
void servo_release(void){
	TCD0.CCA = 1200;
}

void servo_close(void){
	TCD0.CCA = 750;
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <__portable_avr_delay_cycles+0xa>
    11d6:	61 50       	subi	r22, 0x01	; 1
    11d8:	71 09       	sbc	r23, r1
    11da:	81 09       	sbc	r24, r1
    11dc:	91 09       	sbc	r25, r1
    11de:	61 15       	cp	r22, r1
    11e0:	71 05       	cpc	r23, r1
    11e2:	81 05       	cpc	r24, r1
    11e4:	91 05       	cpc	r25, r1
    11e6:	b9 f7       	brne	.-18     	; 0x11d6 <__portable_avr_delay_cycles+0x2>
    11e8:	08 95       	ret

000011ea <pressure_init>:
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	3e dd       	rcall	.-1412   	; 0xc6c <ms5607_init>
    11f0:	82 ea       	ldi	r24, 0xA2	; 162
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	4f dd       	rcall	.-1378   	; 0xc94 <ms5607_read>
    11f6:	cb e3       	ldi	r28, 0x3B	; 59
    11f8:	d1 e2       	ldi	r29, 0x21	; 33
    11fa:	88 83       	st	Y, r24
    11fc:	99 83       	std	Y+1, r25	; 0x01
    11fe:	84 ea       	ldi	r24, 0xA4	; 164
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	48 dd       	rcall	.-1392   	; 0xc94 <ms5607_read>
    1204:	8a 83       	std	Y+2, r24	; 0x02
    1206:	9b 83       	std	Y+3, r25	; 0x03
    1208:	86 ea       	ldi	r24, 0xA6	; 166
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	43 dd       	rcall	.-1402   	; 0xc94 <ms5607_read>
    120e:	8c 83       	std	Y+4, r24	; 0x04
    1210:	9d 83       	std	Y+5, r25	; 0x05
    1212:	88 ea       	ldi	r24, 0xA8	; 168
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	3e dd       	rcall	.-1412   	; 0xc94 <ms5607_read>
    1218:	8e 83       	std	Y+6, r24	; 0x06
    121a:	9f 83       	std	Y+7, r25	; 0x07
    121c:	8a ea       	ldi	r24, 0xAA	; 170
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	39 dd       	rcall	.-1422   	; 0xc94 <ms5607_read>
    1222:	88 87       	std	Y+8, r24	; 0x08
    1224:	99 87       	std	Y+9, r25	; 0x09
    1226:	8c ea       	ldi	r24, 0xAC	; 172
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	34 dd       	rcall	.-1432   	; 0xc94 <ms5607_read>
    122c:	8a 87       	std	Y+10, r24	; 0x0a
    122e:	9b 87       	std	Y+11, r25	; 0x0b
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	08 95       	ret

00001236 <gps_init>:
    1236:	da dc       	rcall	.-1612   	; 0xbec <gps_uart_init>
    1238:	6b ea       	ldi	r22, 0xAB	; 171
    123a:	79 e2       	ldi	r23, 0x29	; 41
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	c9 df       	rcall	.-110    	; 0x11d4 <__portable_avr_delay_cycles>
    1242:	80 e3       	ldi	r24, 0x30	; 48
    1244:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    1248:	08 95       	ret

0000124a <release>:
    124a:	80 eb       	ldi	r24, 0xB0	; 176
    124c:	94 e0       	ldi	r25, 0x04	; 4
    124e:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1252:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <released>
    125c:	08 95       	ret

0000125e <get_pressure>:
    125e:	4f 92       	push	r4
    1260:	5f 92       	push	r5
    1262:	6f 92       	push	r6
    1264:	7f 92       	push	r7
    1266:	8f 92       	push	r8
    1268:	9f 92       	push	r9
    126a:	af 92       	push	r10
    126c:	bf 92       	push	r11
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	1e dd       	rcall	.-1476   	; 0xcb8 <ms5607_convert_d1>
    127c:	6b 01       	movw	r12, r22
    127e:	7c 01       	movw	r14, r24
    1280:	5b dd       	rcall	.-1354   	; 0xd38 <ms5607_convert_d2>
    1282:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    1286:	4b 01       	movw	r8, r22
    1288:	5c 01       	movw	r10, r24
    128a:	cb e3       	ldi	r28, 0x3B	; 59
    128c:	d1 e2       	ldi	r29, 0x21	; 33
    128e:	68 85       	ldd	r22, Y+8	; 0x08
    1290:	79 85       	ldd	r23, Y+9	; 0x09
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e8       	ldi	r20, 0x80	; 128
    12a0:	53 e4       	ldi	r21, 0x43	; 67
    12a2:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    12a6:	9b 01       	movw	r18, r22
    12a8:	ac 01       	movw	r20, r24
    12aa:	c5 01       	movw	r24, r10
    12ac:	b4 01       	movw	r22, r8
    12ae:	0e 94 34 1a 	call	0x3468	; 0x3468 <__subsf3>
    12b2:	4b 01       	movw	r8, r22
    12b4:	5c 01       	movw	r10, r24
    12b6:	6c 81       	ldd	r22, Y+4	; 0x04
    12b8:	7d 81       	ldd	r23, Y+5	; 0x05
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    12c2:	a5 01       	movw	r20, r10
    12c4:	94 01       	movw	r18, r8
    12c6:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	5c e3       	ldi	r21, 0x3C	; 60
    12d2:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    12d6:	2b 01       	movw	r4, r22
    12d8:	3c 01       	movw	r6, r24
    12da:	68 81       	ld	r22, Y
    12dc:	79 81       	ldd	r23, Y+1	; 0x01
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e8       	ldi	r20, 0x80	; 128
    12ec:	57 e4       	ldi	r21, 0x47	; 71
    12ee:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	c3 01       	movw	r24, r6
    12f8:	b2 01       	movw	r22, r4
    12fa:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    12fe:	2b 01       	movw	r4, r22
    1300:	3c 01       	movw	r6, r24
    1302:	c7 01       	movw	r24, r14
    1304:	b6 01       	movw	r22, r12
    1306:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    130a:	9b 01       	movw	r18, r22
    130c:	ac 01       	movw	r20, r24
    130e:	c3 01       	movw	r24, r6
    1310:	b2 01       	movw	r22, r4
    1312:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	55 e3       	ldi	r21, 0x35	; 53
    131e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1322:	6b 01       	movw	r12, r22
    1324:	7c 01       	movw	r14, r24
    1326:	6e 81       	ldd	r22, Y+6	; 0x06
    1328:	7f 81       	ldd	r23, Y+7	; 0x07
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    1332:	a5 01       	movw	r20, r10
    1334:	94 01       	movw	r18, r8
    1336:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e8       	ldi	r20, 0x80	; 128
    1340:	5c e3       	ldi	r21, 0x3C	; 60
    1342:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1346:	4b 01       	movw	r8, r22
    1348:	5c 01       	movw	r10, r24
    134a:	6a 81       	ldd	r22, Y+2	; 0x02
    134c:	7b 81       	ldd	r23, Y+3	; 0x03
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	58 e4       	ldi	r21, 0x48	; 72
    135e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1362:	9b 01       	movw	r18, r22
    1364:	ac 01       	movw	r20, r24
    1366:	c5 01       	movw	r24, r10
    1368:	b4 01       	movw	r22, r8
    136a:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    136e:	9b 01       	movw	r18, r22
    1370:	ac 01       	movw	r20, r24
    1372:	c7 01       	movw	r24, r14
    1374:	b6 01       	movw	r22, r12
    1376:	0e 94 34 1a 	call	0x3468	; 0x3468 <__subsf3>
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	58 e3       	ldi	r21, 0x38	; 56
    1382:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	bf 90       	pop	r11
    1394:	af 90       	pop	r10
    1396:	9f 90       	pop	r9
    1398:	8f 90       	pop	r8
    139a:	7f 90       	pop	r7
    139c:	6f 90       	pop	r6
    139e:	5f 90       	pop	r5
    13a0:	4f 90       	pop	r4
    13a2:	08 95       	ret

000013a4 <get_altitude>:
    13a4:	4f 92       	push	r4
    13a6:	5f 92       	push	r5
    13a8:	6f 92       	push	r6
    13aa:	7f 92       	push	r7
    13ac:	8f 92       	push	r8
    13ae:	9f 92       	push	r9
    13b0:	af 92       	push	r10
    13b2:	bf 92       	push	r11
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <get_altitude+0x1e>
    13c2:	1f 92       	push	r1
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	2b 01       	movw	r4, r22
    13ca:	3c 01       	movw	r6, r24
    13cc:	c0 90 1f 20 	lds	r12, 0x201F	; 0x80201f <L>
    13d0:	d0 90 20 20 	lds	r13, 0x2020	; 0x802020 <L+0x1>
    13d4:	e0 90 21 20 	lds	r14, 0x2021	; 0x802021 <L+0x2>
    13d8:	f0 90 22 20 	lds	r15, 0x2022	; 0x802022 <L+0x3>
    13dc:	80 90 2b 20 	lds	r8, 0x202B	; 0x80202b <ground_p>
    13e0:	90 90 2c 20 	lds	r9, 0x202C	; 0x80202c <ground_p+0x1>
    13e4:	a0 90 2d 20 	lds	r10, 0x202D	; 0x80202d <ground_p+0x2>
    13e8:	b0 90 2e 20 	lds	r11, 0x202E	; 0x80202e <ground_p+0x3>
    13ec:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <R>
    13f0:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <R+0x1>
    13f4:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <R+0x2>
    13f8:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <R+0x3>
    13fc:	c7 01       	movw	r24, r14
    13fe:	b6 01       	movw	r22, r12
    1400:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1404:	20 91 1b 20 	lds	r18, 0x201B	; 0x80201b <g_0>
    1408:	30 91 1c 20 	lds	r19, 0x201C	; 0x80201c <g_0+0x1>
    140c:	40 91 1d 20 	lds	r20, 0x201D	; 0x80201d <g_0+0x2>
    1410:	50 91 1e 20 	lds	r21, 0x201E	; 0x80201e <g_0+0x3>
    1414:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    1418:	69 83       	std	Y+1, r22	; 0x01
    141a:	7a 83       	std	Y+2, r23	; 0x02
    141c:	8b 83       	std	Y+3, r24	; 0x03
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	a3 01       	movw	r20, r6
    1422:	92 01       	movw	r18, r4
    1424:	c5 01       	movw	r24, r10
    1426:	b4 01       	movw	r22, r8
    1428:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    142c:	29 81       	ldd	r18, Y+1	; 0x01
    142e:	3a 81       	ldd	r19, Y+2	; 0x02
    1430:	4b 81       	ldd	r20, Y+3	; 0x03
    1432:	5c 81       	ldd	r21, Y+4	; 0x04
    1434:	0e 94 8d 1c 	call	0x391a	; 0x391a <pow>
    1438:	40 90 27 20 	lds	r4, 0x2027	; 0x802027 <ground_t>
    143c:	50 90 28 20 	lds	r5, 0x2028	; 0x802028 <ground_t+0x1>
    1440:	60 90 29 20 	lds	r6, 0x2029	; 0x802029 <ground_t+0x2>
    1444:	70 90 2a 20 	lds	r7, 0x202A	; 0x80202a <ground_t+0x3>
    1448:	80 90 49 21 	lds	r8, 0x2149	; 0x802149 <ground_a>
    144c:	90 90 4a 21 	lds	r9, 0x214A	; 0x80214a <ground_a+0x1>
    1450:	a0 90 4b 21 	lds	r10, 0x214B	; 0x80214b <ground_a+0x2>
    1454:	b0 90 4c 21 	lds	r11, 0x214C	; 0x80214c <ground_a+0x3>
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e8       	ldi	r20, 0x80	; 128
    145e:	5f e3       	ldi	r21, 0x3F	; 63
    1460:	0e 94 34 1a 	call	0x3468	; 0x3468 <__subsf3>
    1464:	a3 01       	movw	r20, r6
    1466:	92 01       	movw	r18, r4
    1468:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    146c:	a7 01       	movw	r20, r14
    146e:	96 01       	movw	r18, r12
    1470:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    1474:	a5 01       	movw	r20, r10
    1476:	94 01       	movw	r18, r8
    1478:	0e 94 34 1a 	call	0x3468	; 0x3468 <__subsf3>
    147c:	24 96       	adiw	r28, 0x04	; 4
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	9f 90       	pop	r9
    1494:	8f 90       	pop	r8
    1496:	7f 90       	pop	r7
    1498:	6f 90       	pop	r6
    149a:	5f 90       	pop	r5
    149c:	4f 90       	pop	r4
    149e:	08 95       	ret

000014a0 <get_voltage>:
    14a0:	cf 92       	push	r12
    14a2:	df 92       	push	r13
    14a4:	ef 92       	push	r14
    14a6:	ff 92       	push	r15
    14a8:	27 dd       	rcall	.-1458   	; 0xef8 <voltage_read>
    14aa:	bc 01       	movw	r22, r24
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    14b4:	23 e4       	ldi	r18, 0x43	; 67
    14b6:	3e e2       	ldi	r19, 0x2E	; 46
    14b8:	42 e0       	ldi	r20, 0x02	; 2
    14ba:	5a e3       	ldi	r21, 0x3A	; 58
    14bc:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    14c0:	24 ee       	ldi	r18, 0xE4	; 228
    14c2:	3a e5       	ldi	r19, 0x5A	; 90
    14c4:	45 ec       	ldi	r20, 0xC5	; 197
    14c6:	5d e3       	ldi	r21, 0x3D	; 61
    14c8:	0e 94 34 1a 	call	0x3468	; 0x3468 <__subsf3>
    14cc:	6b 01       	movw	r12, r22
    14ce:	7c 01       	movw	r14, r24
    14d0:	2b e2       	ldi	r18, 0x2B	; 43
    14d2:	35 eb       	ldi	r19, 0xB5	; 181
    14d4:	42 e1       	ldi	r20, 0x12	; 18
    14d6:	50 e4       	ldi	r21, 0x40	; 64
    14d8:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	c7 01       	movw	r24, r14
    14e2:	b6 01       	movw	r22, r12
    14e4:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	df 90       	pop	r13
    14ee:	cf 90       	pop	r12
    14f0:	08 95       	ret

000014f2 <diff>:
    14f2:	2f 92       	push	r2
    14f4:	3f 92       	push	r3
    14f6:	4f 92       	push	r4
    14f8:	5f 92       	push	r5
    14fa:	6f 92       	push	r6
    14fc:	7f 92       	push	r7
    14fe:	8f 92       	push	r8
    1500:	9f 92       	push	r9
    1502:	af 92       	push	r10
    1504:	bf 92       	push	r11
    1506:	cf 92       	push	r12
    1508:	df 92       	push	r13
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	00 d0       	rcall	.+0      	; 0x1518 <diff+0x26>
    1518:	00 d0       	rcall	.+0      	; 0x151a <diff+0x28>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	6c 01       	movw	r12, r24
    1520:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    1524:	88 23       	and	r24, r24
    1526:	09 f4       	brne	.+2      	; 0x152a <diff+0x38>
    1528:	6c c0       	rjmp	.+216    	; 0x1602 <diff+0x110>
    152a:	00 e0       	ldi	r16, 0x00	; 0
    152c:	10 e0       	ldi	r17, 0x00	; 0
    152e:	41 2c       	mov	r4, r1
    1530:	51 2c       	mov	r5, r1
    1532:	32 01       	movw	r6, r4
    1534:	86 2e       	mov	r8, r22
    1536:	91 2c       	mov	r9, r1
    1538:	a1 2c       	mov	r10, r1
    153a:	b1 2c       	mov	r11, r1
    153c:	89 82       	std	Y+1, r8	; 0x01
    153e:	9a 82       	std	Y+2, r9	; 0x02
    1540:	ab 82       	std	Y+3, r10	; 0x03
    1542:	bc 82       	std	Y+4, r11	; 0x04
    1544:	b8 01       	movw	r22, r16
    1546:	c6 01       	movw	r24, r12
    1548:	2d dd       	rcall	.-1446   	; 0xfa4 <rb16_get_nth>
    154a:	5c 01       	movw	r10, r24
    154c:	18 01       	movw	r2, r16
    154e:	2f ef       	ldi	r18, 0xFF	; 255
    1550:	22 1a       	sub	r2, r18
    1552:	32 0a       	sbc	r3, r18
    1554:	b1 01       	movw	r22, r2
    1556:	c6 01       	movw	r24, r12
    1558:	25 dd       	rcall	.-1462   	; 0xfa4 <rb16_get_nth>
    155a:	7c 01       	movw	r14, r24
    155c:	b8 01       	movw	r22, r16
    155e:	6e 5f       	subi	r22, 0xFE	; 254
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	c6 01       	movw	r24, r12
    1564:	1f dd       	rcall	.-1474   	; 0xfa4 <rb16_get_nth>
    1566:	a5 01       	movw	r20, r10
    1568:	bb 0c       	add	r11, r11
    156a:	66 0b       	sbc	r22, r22
    156c:	77 0b       	sbc	r23, r23
    156e:	8a 01       	movw	r16, r20
    1570:	9b 01       	movw	r18, r22
    1572:	00 0f       	add	r16, r16
    1574:	11 1f       	adc	r17, r17
    1576:	22 1f       	adc	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	40 0f       	add	r20, r16
    157c:	51 1f       	adc	r21, r17
    157e:	62 1f       	adc	r22, r18
    1580:	73 1f       	adc	r23, r19
    1582:	87 01       	movw	r16, r14
    1584:	ff 0c       	add	r15, r15
    1586:	22 0b       	sbc	r18, r18
    1588:	33 0b       	sbc	r19, r19
    158a:	78 01       	movw	r14, r16
    158c:	89 01       	movw	r16, r18
    158e:	ee 0c       	add	r14, r14
    1590:	ff 1c       	adc	r15, r15
    1592:	00 1f       	adc	r16, r16
    1594:	11 1f       	adc	r17, r17
    1596:	ee 0c       	add	r14, r14
    1598:	ff 1c       	adc	r15, r15
    159a:	00 1f       	adc	r16, r16
    159c:	11 1f       	adc	r17, r17
    159e:	4a 01       	movw	r8, r20
    15a0:	5b 01       	movw	r10, r22
    15a2:	8e 18       	sub	r8, r14
    15a4:	9f 08       	sbc	r9, r15
    15a6:	a0 0a       	sbc	r10, r16
    15a8:	b1 0a       	sbc	r11, r17
    15aa:	ac 01       	movw	r20, r24
    15ac:	99 0f       	add	r25, r25
    15ae:	66 0b       	sbc	r22, r22
    15b0:	77 0b       	sbc	r23, r23
    15b2:	d5 01       	movw	r26, r10
    15b4:	c4 01       	movw	r24, r8
    15b6:	84 0f       	add	r24, r20
    15b8:	95 1f       	adc	r25, r21
    15ba:	a6 1f       	adc	r26, r22
    15bc:	b7 1f       	adc	r27, r23
    15be:	9c 01       	movw	r18, r24
    15c0:	ad 01       	movw	r20, r26
    15c2:	69 81       	ldd	r22, Y+1	; 0x01
    15c4:	7a 81       	ldd	r23, Y+2	; 0x02
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__mulsi3>
    15ce:	0e 94 38 1b 	call	0x3670	; 0x3670 <__floatsisf>
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	5f e3       	ldi	r21, 0x3F	; 63
    15da:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    15de:	9b 01       	movw	r18, r22
    15e0:	ac 01       	movw	r20, r24
    15e2:	c3 01       	movw	r24, r6
    15e4:	b2 01       	movw	r22, r4
    15e6:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    15ea:	2b 01       	movw	r4, r22
    15ec:	3c 01       	movw	r6, r24
    15ee:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    15f2:	81 01       	movw	r16, r2
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	22 16       	cp	r2, r18
    15fa:	33 06       	cpc	r3, r19
    15fc:	08 f4       	brcc	.+2      	; 0x1600 <diff+0x10e>
    15fe:	a2 cf       	rjmp	.-188    	; 0x1544 <diff+0x52>
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <diff+0x116>
    1602:	41 2c       	mov	r4, r1
    1604:	51 2c       	mov	r5, r1
    1606:	32 01       	movw	r6, r4
    1608:	68 2f       	mov	r22, r24
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 38 1b 	call	0x3670	; 0x3670 <__floatsisf>
    1614:	9b 01       	movw	r18, r22
    1616:	ac 01       	movw	r20, r24
    1618:	c3 01       	movw	r24, r6
    161a:	b2 01       	movw	r22, r4
    161c:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	48 ec       	ldi	r20, 0xC8	; 200
    1626:	52 e4       	ldi	r21, 0x42	; 66
    1628:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    162c:	26 96       	adiw	r28, 0x06	; 6
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	bf 90       	pop	r11
    1644:	af 90       	pop	r10
    1646:	9f 90       	pop	r9
    1648:	8f 90       	pop	r8
    164a:	7f 90       	pop	r7
    164c:	6f 90       	pop	r6
    164e:	5f 90       	pop	r5
    1650:	4f 90       	pop	r4
    1652:	3f 90       	pop	r3
    1654:	2f 90       	pop	r2
    1656:	08 95       	ret

00001658 <data_check>:
    1658:	3f 92       	push	r3
    165a:	4f 92       	push	r4
    165c:	5f 92       	push	r5
    165e:	6f 92       	push	r6
    1660:	7f 92       	push	r7
    1662:	8f 92       	push	r8
    1664:	9f 92       	push	r9
    1666:	af 92       	push	r10
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	00 d0       	rcall	.+0      	; 0x167c <data_check+0x24>
    167c:	00 d0       	rcall	.+0      	; 0x167e <data_check+0x26>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	8c 01       	movw	r16, r24
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	1a 82       	std	Y+2, r1	; 0x02
    1688:	c1 2c       	mov	r12, r1
    168a:	d1 2c       	mov	r13, r1
    168c:	76 01       	movw	r14, r12
    168e:	69 81       	ldd	r22, Y+1	; 0x01
    1690:	7a 81       	ldd	r23, Y+2	; 0x02
    1692:	c8 01       	movw	r24, r16
    1694:	0f dd       	rcall	.-1506   	; 0x10b4 <rb32_get_nth>
    1696:	4b 01       	movw	r8, r22
    1698:	5c 01       	movw	r10, r24
    169a:	21 e6       	ldi	r18, 0x61	; 97
    169c:	82 1a       	sub	r8, r18
    169e:	2e ea       	ldi	r18, 0xAE	; 174
    16a0:	92 0a       	sbc	r9, r18
    16a2:	2a e0       	ldi	r18, 0x0A	; 10
    16a4:	a2 0a       	sbc	r10, r18
    16a6:	b1 08       	sbc	r11, r1
    16a8:	2f e7       	ldi	r18, 0x7F	; 127
    16aa:	82 16       	cp	r8, r18
    16ac:	2a e1       	ldi	r18, 0x1A	; 26
    16ae:	92 06       	cpc	r9, r18
    16b0:	26 e0       	ldi	r18, 0x06	; 6
    16b2:	a2 06       	cpc	r10, r18
    16b4:	b1 04       	cpc	r11, r1
    16b6:	80 f4       	brcc	.+32     	; 0x16d8 <data_check+0x80>
    16b8:	0e 94 38 1b 	call	0x3670	; 0x3670 <__floatsisf>
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 ea       	ldi	r20, 0xA0	; 160
    16c2:	50 e4       	ldi	r21, 0x40	; 64
    16c4:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	05 97       	sbiw	r24, 0x05	; 5
    16e4:	a1 f6       	brne	.-88     	; 0x168e <data_check+0x36>
    16e6:	19 82       	std	Y+1, r1	; 0x01
    16e8:	1a 82       	std	Y+2, r1	; 0x02
    16ea:	81 2c       	mov	r8, r1
    16ec:	91 2c       	mov	r9, r1
    16ee:	54 01       	movw	r10, r8
    16f0:	69 81       	ldd	r22, Y+1	; 0x01
    16f2:	7a 81       	ldd	r23, Y+2	; 0x02
    16f4:	c8 01       	movw	r24, r16
    16f6:	de dc       	rcall	.-1604   	; 0x10b4 <rb32_get_nth>
    16f8:	2b 01       	movw	r4, r22
    16fa:	3c 01       	movw	r6, r24
    16fc:	21 e6       	ldi	r18, 0x61	; 97
    16fe:	42 1a       	sub	r4, r18
    1700:	2e ea       	ldi	r18, 0xAE	; 174
    1702:	52 0a       	sbc	r5, r18
    1704:	2a e0       	ldi	r18, 0x0A	; 10
    1706:	62 0a       	sbc	r6, r18
    1708:	71 08       	sbc	r7, r1
    170a:	2f e7       	ldi	r18, 0x7F	; 127
    170c:	42 16       	cp	r4, r18
    170e:	2a e1       	ldi	r18, 0x1A	; 26
    1710:	52 06       	cpc	r5, r18
    1712:	26 e0       	ldi	r18, 0x06	; 6
    1714:	62 06       	cpc	r6, r18
    1716:	71 04       	cpc	r7, r1
    1718:	90 f4       	brcc	.+36     	; 0x173e <data_check+0xe6>
    171a:	0e 94 38 1b 	call	0x3670	; 0x3670 <__floatsisf>
    171e:	a7 01       	movw	r20, r14
    1720:	96 01       	movw	r18, r12
    1722:	0e 94 34 1a 	call	0x3468	; 0x3468 <__subsf3>
    1726:	9b 01       	movw	r18, r22
    1728:	ac 01       	movw	r20, r24
    172a:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    172e:	9b 01       	movw	r18, r22
    1730:	ac 01       	movw	r20, r24
    1732:	c5 01       	movw	r24, r10
    1734:	b4 01       	movw	r22, r8
    1736:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    173a:	4b 01       	movw	r8, r22
    173c:	5c 01       	movw	r10, r24
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	05 97       	sbiw	r24, 0x05	; 5
    174a:	91 f6       	brne	.-92     	; 0x16f0 <data_check+0x98>
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5e e3       	ldi	r21, 0x3E	; 62
    1754:	c5 01       	movw	r24, r10
    1756:	b4 01       	movw	r22, r8
    1758:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    175c:	69 83       	std	Y+1, r22	; 0x01
    175e:	7a 83       	std	Y+2, r23	; 0x02
    1760:	8b 83       	std	Y+3, r24	; 0x03
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	1d 82       	std	Y+5, r1	; 0x05
    1766:	1e 82       	std	Y+6, r1	; 0x06
    1768:	31 2c       	mov	r3, r1
    176a:	41 2c       	mov	r4, r1
    176c:	51 2c       	mov	r5, r1
    176e:	32 01       	movw	r6, r4
    1770:	6d 81       	ldd	r22, Y+5	; 0x05
    1772:	7e 81       	ldd	r23, Y+6	; 0x06
    1774:	c8 01       	movw	r24, r16
    1776:	9e dc       	rcall	.-1732   	; 0x10b4 <rb32_get_nth>
    1778:	4b 01       	movw	r8, r22
    177a:	5c 01       	movw	r10, r24
    177c:	21 e6       	ldi	r18, 0x61	; 97
    177e:	82 1a       	sub	r8, r18
    1780:	2e ea       	ldi	r18, 0xAE	; 174
    1782:	92 0a       	sbc	r9, r18
    1784:	2a e0       	ldi	r18, 0x0A	; 10
    1786:	a2 0a       	sbc	r10, r18
    1788:	b1 08       	sbc	r11, r1
    178a:	2f e7       	ldi	r18, 0x7F	; 127
    178c:	82 16       	cp	r8, r18
    178e:	2a e1       	ldi	r18, 0x1A	; 26
    1790:	92 06       	cpc	r9, r18
    1792:	26 e0       	ldi	r18, 0x06	; 6
    1794:	a2 06       	cpc	r10, r18
    1796:	b1 04       	cpc	r11, r1
    1798:	50 f5       	brcc	.+84     	; 0x17ee <data_check+0x196>
    179a:	0e 94 38 1b 	call	0x3670	; 0x3670 <__floatsisf>
    179e:	4b 01       	movw	r8, r22
    17a0:	5c 01       	movw	r10, r24
    17a2:	a7 01       	movw	r20, r14
    17a4:	96 01       	movw	r18, r12
    17a6:	0e 94 34 1a 	call	0x3468	; 0x3468 <__subsf3>
    17aa:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    17ae:	9b 01       	movw	r18, r22
    17b0:	77 23       	and	r23, r23
    17b2:	24 f4       	brge	.+8      	; 0x17bc <data_check+0x164>
    17b4:	22 27       	eor	r18, r18
    17b6:	33 27       	eor	r19, r19
    17b8:	26 1b       	sub	r18, r22
    17ba:	37 0b       	sbc	r19, r23
    17bc:	b9 01       	movw	r22, r18
    17be:	33 0f       	add	r19, r19
    17c0:	88 0b       	sbc	r24, r24
    17c2:	99 0b       	sbc	r25, r25
    17c4:	0e 94 38 1b 	call	0x3670	; 0x3670 <__floatsisf>
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	69 81       	ldd	r22, Y+1	; 0x01
    17ce:	7a 81       	ldd	r23, Y+2	; 0x02
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	0e 94 26 1c 	call	0x384c	; 0x384c <__gesf2>
    17d8:	88 23       	and	r24, r24
    17da:	4c f0       	brlt	.+18     	; 0x17ee <data_check+0x196>
    17dc:	a5 01       	movw	r20, r10
    17de:	94 01       	movw	r18, r8
    17e0:	c3 01       	movw	r24, r6
    17e2:	b2 01       	movw	r22, r4
    17e4:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    17e8:	2b 01       	movw	r4, r22
    17ea:	3c 01       	movw	r6, r24
    17ec:	33 94       	inc	r3
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	05 97       	sbiw	r24, 0x05	; 5
    17fa:	09 f0       	breq	.+2      	; 0x17fe <data_check+0x1a6>
    17fc:	b9 cf       	rjmp	.-142    	; 0x1770 <data_check+0x118>
    17fe:	33 20       	and	r3, r3
    1800:	69 f0       	breq	.+26     	; 0x181c <data_check+0x1c4>
    1802:	63 2d       	mov	r22, r3
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    180e:	9b 01       	movw	r18, r22
    1810:	ac 01       	movw	r20, r24
    1812:	c3 01       	movw	r24, r6
    1814:	b2 01       	movw	r22, r4
    1816:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <data_check+0x1cc>
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	80 e8       	ldi	r24, 0x80	; 128
    1822:	9f eb       	ldi	r25, 0xBF	; 191
    1824:	26 96       	adiw	r28, 0x06	; 6
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	af 90       	pop	r10
    183e:	9f 90       	pop	r9
    1840:	8f 90       	pop	r8
    1842:	7f 90       	pop	r7
    1844:	6f 90       	pop	r6
    1846:	5f 90       	pop	r5
    1848:	4f 90       	pop	r4
    184a:	3f 90       	pop	r3
    184c:	08 95       	ret

0000184e <data_collect>:
    184e:	af 92       	push	r10
    1850:	bf 92       	push	r11
    1852:	cf 92       	push	r12
    1854:	df 92       	push	r13
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	00 d0       	rcall	.+0      	; 0x1864 <data_collect+0x16>
    1864:	00 d0       	rcall	.+0      	; 0x1866 <data_collect+0x18>
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	5c 01       	movw	r10, r24
    186c:	8b 01       	movw	r16, r22
    186e:	f7 dc       	rcall	.-1554   	; 0x125e <get_pressure>
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e2       	ldi	r20, 0x20	; 32
    1876:	51 e4       	ldi	r21, 0x41	; 65
    1878:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    187c:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1880:	69 83       	std	Y+1, r22	; 0x01
    1882:	7a 83       	std	Y+2, r23	; 0x02
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	9c 83       	std	Y+4, r25	; 0x04
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	be 01       	movw	r22, r28
    188e:	6f 5f       	subi	r22, 0xFF	; 255
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	c8 01       	movw	r24, r16
    1894:	b4 db       	rcall	.-2200   	; 0xffe <rb32_write>
    1896:	c8 01       	movw	r24, r16
    1898:	df de       	rcall	.-578    	; 0x1658 <data_check>
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    18a6:	6b 01       	movw	r12, r22
    18a8:	7c 01       	movw	r14, r24
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f eb       	ldi	r21, 0xBF	; 191
    18b2:	0e 94 99 1a 	call	0x3532	; 0x3532 <__cmpsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	d1 f1       	breq	.+116    	; 0x192e <data_collect+0xe0>
    18ba:	c0 92 1f 21 	sts	0x211F, r12	; 0x80211f <press>
    18be:	d0 92 20 21 	sts	0x2120, r13	; 0x802120 <press+0x1>
    18c2:	e0 92 21 21 	sts	0x2121, r14	; 0x802121 <press+0x2>
    18c6:	f0 92 22 21 	sts	0x2122, r15	; 0x802122 <press+0x3>
    18ca:	c7 01       	movw	r24, r14
    18cc:	b6 01       	movw	r22, r12
    18ce:	6a dd       	rcall	.-1324   	; 0x13a4 <get_altitude>
    18d0:	60 93 17 21 	sts	0x2117, r22	; 0x802117 <alt>
    18d4:	70 93 18 21 	sts	0x2118, r23	; 0x802118 <alt+0x1>
    18d8:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <alt+0x2>
    18dc:	90 93 1a 21 	sts	0x211A, r25	; 0x80211a <alt+0x3>
    18e0:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <alt>
    18e4:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <alt+0x1>
    18e8:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <alt+0x2>
    18ec:	90 91 1a 21 	lds	r25, 0x211A	; 0x80211a <alt+0x3>
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	48 ec       	ldi	r20, 0xC8	; 200
    18f6:	52 e4       	ldi	r21, 0x42	; 66
    18f8:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    18fc:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1900:	6d 83       	std	Y+5, r22	; 0x05
    1902:	7e 83       	std	Y+6, r23	; 0x06
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	be 01       	movw	r22, r28
    190a:	6b 5f       	subi	r22, 0xFB	; 251
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	c5 01       	movw	r24, r10
    1910:	00 db       	rcall	.-2560   	; 0xf12 <rb16_write>
    1912:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    1916:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    191a:	c5 01       	movw	r24, r10
    191c:	ea dd       	rcall	.-1068   	; 0x14f2 <diff>
    191e:	60 93 0f 21 	sts	0x210F, r22	; 0x80210f <velocity>
    1922:	70 93 10 21 	sts	0x2110, r23	; 0x802110 <velocity+0x1>
    1926:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <velocity+0x2>
    192a:	90 93 12 21 	sts	0x2112, r25	; 0x802112 <velocity+0x3>
    192e:	83 e3       	ldi	r24, 0x33	; 51
    1930:	93 e1       	ldi	r25, 0x13	; 19
    1932:	a5 e9       	ldi	r26, 0x95	; 149
    1934:	b3 e4       	ldi	r27, 0x43	; 67
    1936:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <temp>
    193a:	90 93 1c 21 	sts	0x211C, r25	; 0x80211c <temp+0x1>
    193e:	a0 93 1d 21 	sts	0x211D, r26	; 0x80211d <temp+0x2>
    1942:	b0 93 1e 21 	sts	0x211E, r27	; 0x80211e <temp+0x3>
    1946:	ac dd       	rcall	.-1192   	; 0x14a0 <get_voltage>
    1948:	60 93 13 21 	sts	0x2113, r22	; 0x802113 <volt>
    194c:	70 93 14 21 	sts	0x2114, r23	; 0x802114 <volt+0x1>
    1950:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <volt+0x2>
    1954:	90 93 16 21 	sts	0x2116, r25	; 0x802116 <volt+0x3>
    1958:	26 96       	adiw	r28, 0x06	; 6
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	bf 90       	pop	r11
    1970:	af 90       	pop	r10
    1972:	08 95       	ret

00001974 <state_check>:
    1974:	60 91 0f 21 	lds	r22, 0x210F	; 0x80210f <velocity>
    1978:	70 91 10 21 	lds	r23, 0x2110	; 0x802110 <velocity+0x1>
    197c:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <velocity+0x2>
    1980:	90 91 12 21 	lds	r25, 0x2112	; 0x802112 <velocity+0x3>
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 ea       	ldi	r20, 0xA0	; 160
    198a:	50 ec       	ldi	r21, 0xC0	; 192
    198c:	0e 94 26 1c 	call	0x384c	; 0x384c <__gesf2>
    1990:	18 16       	cp	r1, r24
    1992:	3c f4       	brge	.+14     	; 0x19a2 <state_check+0x2e>
    1994:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <state>
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	18 f4       	brcc	.+6      	; 0x19a2 <state_check+0x2e>
    199c:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <state>
    19a0:	08 95       	ret
    19a2:	60 91 0f 21 	lds	r22, 0x210F	; 0x80210f <velocity>
    19a6:	70 91 10 21 	lds	r23, 0x2110	; 0x802110 <velocity+0x1>
    19aa:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <velocity+0x2>
    19ae:	90 91 12 21 	lds	r25, 0x2112	; 0x802112 <velocity+0x3>
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 ea       	ldi	r20, 0xA0	; 160
    19b8:	50 ec       	ldi	r21, 0xC0	; 192
    19ba:	0e 94 99 1a 	call	0x3532	; 0x3532 <__cmpsf2>
    19be:	88 23       	and	r24, r24
    19c0:	a4 f4       	brge	.+40     	; 0x19ea <state_check+0x76>
    19c2:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <alt>
    19c6:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <alt+0x1>
    19ca:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <alt+0x2>
    19ce:	90 91 1a 21 	lds	r25, 0x211A	; 0x80211a <alt+0x3>
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	41 ee       	ldi	r20, 0xE1	; 225
    19d8:	53 e4       	ldi	r21, 0x43	; 67
    19da:	0e 94 26 1c 	call	0x384c	; 0x384c <__gesf2>
    19de:	18 16       	cp	r1, r24
    19e0:	24 f4       	brge	.+8      	; 0x19ea <state_check+0x76>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <state>
    19e8:	08 95       	ret
    19ea:	60 91 0f 21 	lds	r22, 0x210F	; 0x80210f <velocity>
    19ee:	70 91 10 21 	lds	r23, 0x2110	; 0x802110 <velocity+0x1>
    19f2:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <velocity+0x2>
    19f6:	90 91 12 21 	lds	r25, 0x2112	; 0x802112 <velocity+0x3>
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 ea       	ldi	r20, 0xA0	; 160
    1a00:	50 ec       	ldi	r21, 0xC0	; 192
    1a02:	0e 94 99 1a 	call	0x3532	; 0x3532 <__cmpsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	a4 f4       	brge	.+40     	; 0x1a32 <state_check+0xbe>
    1a0a:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <alt>
    1a0e:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <alt+0x1>
    1a12:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <alt+0x2>
    1a16:	90 91 1a 21 	lds	r25, 0x211A	; 0x80211a <alt+0x3>
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	41 ee       	ldi	r20, 0xE1	; 225
    1a20:	53 e4       	ldi	r21, 0x43	; 67
    1a22:	0e 94 99 1a 	call	0x3532	; 0x3532 <__cmpsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	24 f4       	brge	.+8      	; 0x1a32 <state_check+0xbe>
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <state>
    1a30:	08 95       	ret
    1a32:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <state>
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	a1 f4       	brne	.+40     	; 0x1a62 <state_check+0xee>
    1a3a:	60 91 0f 21 	lds	r22, 0x210F	; 0x80210f <velocity>
    1a3e:	70 91 10 21 	lds	r23, 0x2110	; 0x802110 <velocity+0x1>
    1a42:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <velocity+0x2>
    1a46:	90 91 12 21 	lds	r25, 0x2112	; 0x802112 <velocity+0x3>
    1a4a:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1a4e:	9b 01       	movw	r18, r22
    1a50:	77 23       	and	r23, r23
    1a52:	24 f4       	brge	.+8      	; 0x1a5c <state_check+0xe8>
    1a54:	22 27       	eor	r18, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	26 1b       	sub	r18, r22
    1a5a:	37 0b       	sbc	r19, r23
    1a5c:	25 30       	cpi	r18, 0x05	; 5
    1a5e:	31 05       	cpc	r19, r1
    1a60:	24 f0       	brlt	.+8      	; 0x1a6a <state_check+0xf6>
    1a62:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <state>
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	19 f4       	brne	.+6      	; 0x1a70 <state_check+0xfc>
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <state>
    1a70:	08 95       	ret

00001a72 <release_servo_init>:
    1a72:	61 e0       	ldi	r22, 0x01	; 1
    1a74:	84 e0       	ldi	r24, 0x04	; 4
    1a76:	88 db       	rcall	.-2288   	; 0x1188 <sysclk_enable_module>
    1a78:	64 e0       	ldi	r22, 0x04	; 4
    1a7a:	84 e0       	ldi	r24, 0x04	; 4
    1a7c:	85 db       	rcall	.-2294   	; 0x1188 <sysclk_enable_module>
    1a7e:	e0 e6       	ldi	r30, 0x60	; 96
    1a80:	f6 e0       	ldi	r31, 0x06	; 6
    1a82:	80 81       	ld	r24, Z
    1a84:	81 60       	ori	r24, 0x01	; 1
    1a86:	80 83       	st	Z, r24
    1a88:	e0 e0       	ldi	r30, 0x00	; 0
    1a8a:	f9 e0       	ldi	r31, 0x09	; 9
    1a8c:	85 e0       	ldi	r24, 0x05	; 5
    1a8e:	80 83       	st	Z, r24
    1a90:	83 e1       	ldi	r24, 0x13	; 19
    1a92:	81 83       	std	Z+1, r24	; 0x01
    1a94:	80 e1       	ldi	r24, 0x10	; 16
    1a96:	97 e2       	ldi	r25, 0x27	; 39
    1a98:	86 a3       	std	Z+38, r24	; 0x26
    1a9a:	97 a3       	std	Z+39, r25	; 0x27
    1a9c:	8e ee       	ldi	r24, 0xEE	; 238
    1a9e:	92 e0       	ldi	r25, 0x02	; 2
    1aa0:	80 a7       	std	Z+40, r24	; 0x28
    1aa2:	91 a7       	std	Z+41, r25	; 0x29
    1aa4:	08 95       	ret

00001aa6 <servo_pid>:
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	7c 01       	movw	r14, r24
    1ac0:	c0 e0       	ldi	r28, 0x00	; 0
    1ac2:	d0 e0       	ldi	r29, 0x00	; 0
    1ac4:	00 e0       	ldi	r16, 0x00	; 0
    1ac6:	10 e0       	ldi	r17, 0x00	; 0
    1ac8:	be 01       	movw	r22, r28
    1aca:	c7 01       	movw	r24, r14
    1acc:	6b da       	rcall	.-2858   	; 0xfa4 <rb16_get_nth>
    1ace:	08 0f       	add	r16, r24
    1ad0:	19 1f       	adc	r17, r25
    1ad2:	21 96       	adiw	r28, 0x01	; 1
    1ad4:	ca 30       	cpi	r28, 0x0A	; 10
    1ad6:	d1 05       	cpc	r29, r1
    1ad8:	b9 f7       	brne	.-18     	; 0x1ac8 <servo_pid+0x22>
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	c7 01       	movw	r24, r14
    1ae0:	61 da       	rcall	.-2878   	; 0xfa4 <rb16_get_nth>
    1ae2:	ec 01       	movw	r28, r24
    1ae4:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    1ae8:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    1aec:	c7 01       	movw	r24, r14
    1aee:	01 dd       	rcall	.-1534   	; 0x14f2 <diff>
    1af0:	6b 01       	movw	r12, r22
    1af2:	7c 01       	movw	r14, r24
    1af4:	be 01       	movw	r22, r28
    1af6:	dd 0f       	add	r29, r29
    1af8:	88 0b       	sbc	r24, r24
    1afa:	99 0b       	sbc	r25, r25
    1afc:	0e 94 38 1b 	call	0x3670	; 0x3670 <__floatsisf>
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	48 ec       	ldi	r20, 0xC8	; 200
    1b10:	52 e4       	ldi	r21, 0x42	; 66
    1b12:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    1b16:	4b 01       	movw	r8, r22
    1b18:	5c 01       	movw	r10, r24
    1b1a:	b8 01       	movw	r22, r16
    1b1c:	11 0f       	add	r17, r17
    1b1e:	88 0b       	sbc	r24, r24
    1b20:	99 0b       	sbc	r25, r25
    1b22:	0e 94 38 1b 	call	0x3670	; 0x3670 <__floatsisf>
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	a9 01       	movw	r20, r18
    1b2c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	48 ec       	ldi	r20, 0xC8	; 200
    1b36:	52 e4       	ldi	r21, 0x42	; 66
    1b38:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    1b3c:	9b 01       	movw	r18, r22
    1b3e:	ac 01       	movw	r20, r24
    1b40:	c5 01       	movw	r24, r10
    1b42:	b4 01       	movw	r22, r8
    1b44:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    1b48:	4b 01       	movw	r8, r22
    1b4a:	5c 01       	movw	r10, r24
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	a9 01       	movw	r20, r18
    1b52:	c7 01       	movw	r24, r14
    1b54:	b6 01       	movw	r22, r12
    1b56:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1b5a:	9b 01       	movw	r18, r22
    1b5c:	ac 01       	movw	r20, r24
    1b5e:	c5 01       	movw	r24, r10
    1b60:	b4 01       	movw	r22, r8
    1b62:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e8       	ldi	r19, 0x80	; 128
    1b6a:	4b eb       	ldi	r20, 0xBB	; 187
    1b6c:	54 e4       	ldi	r21, 0x44	; 68
    1b6e:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3>
    1b72:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__fixunssfsi>
    1b76:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <servo_pulse>
    1b7a:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <servo_pulse+0x1>
    1b7e:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <servo_pulse>
    1b82:	70 91 1a 20 	lds	r23, 0x201A	; 0x80201a <servo_pulse+0x1>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 36 1b 	call	0x366c	; 0x366c <__floatunsisf>
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a e7       	ldi	r20, 0x7A	; 122
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 9d 1a 	call	0x353a	; 0x353a <__divsf3>
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ba0:	53 e4       	ldi	r21, 0x43	; 67
    1ba2:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1ba6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__fixunssfsi>
    1baa:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1bae:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	bf 90       	pop	r11
    1bc4:	af 90       	pop	r10
    1bc6:	9f 90       	pop	r9
    1bc8:	8f 90       	pop	r8
    1bca:	08 95       	ret

00001bcc <clock_init>:
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	85 e0       	ldi	r24, 0x05	; 5
    1bd0:	db da       	rcall	.-2634   	; 0x1188 <sysclk_enable_module>
    1bd2:	e0 e0       	ldi	r30, 0x00	; 0
    1bd4:	fa e0       	ldi	r31, 0x0A	; 10
    1bd6:	87 e0       	ldi	r24, 0x07	; 7
    1bd8:	80 83       	st	Z, r24
    1bda:	81 e1       	ldi	r24, 0x11	; 17
    1bdc:	9a e7       	ldi	r25, 0x7A	; 122
    1bde:	86 a3       	std	Z+38, r24	; 0x26
    1be0:	97 a3       	std	Z+39, r25	; 0x27
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	86 83       	std	Z+6, r24	; 0x06
    1be6:	08 95       	ret

00001be8 <cali_alt>:
    1be8:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <press>
    1bec:	90 91 20 21 	lds	r25, 0x2120	; 0x802120 <press+0x1>
    1bf0:	a0 91 21 21 	lds	r26, 0x2121	; 0x802121 <press+0x2>
    1bf4:	b0 91 22 21 	lds	r27, 0x2122	; 0x802122 <press+0x3>
    1bf8:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <ground_p>
    1bfc:	90 93 2c 20 	sts	0x202C, r25	; 0x80202c <ground_p+0x1>
    1c00:	a0 93 2d 20 	sts	0x202D, r26	; 0x80202d <ground_p+0x2>
    1c04:	b0 93 2e 20 	sts	0x202E, r27	; 0x80202e <ground_p+0x3>
    1c08:	83 e3       	ldi	r24, 0x33	; 51
    1c0a:	93 e1       	ldi	r25, 0x13	; 19
    1c0c:	a5 e9       	ldi	r26, 0x95	; 149
    1c0e:	b3 e4       	ldi	r27, 0x43	; 67
    1c10:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    1c14:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    1c18:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    1c1c:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    1c20:	08 95       	ret

00001c22 <cali_ang>:
    1c22:	0e 94 a4 05 	call	0xb48	; 0xb48 <imu_roll>
    1c26:	60 93 32 21 	sts	0x2132, r22	; 0x802132 <ref_roll>
    1c2a:	70 93 33 21 	sts	0x2133, r23	; 0x802133 <ref_roll+0x1>
    1c2e:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <ref_roll+0x2>
    1c32:	90 93 35 21 	sts	0x2135, r25	; 0x802135 <ref_roll+0x3>
    1c36:	0e 94 ad 05 	call	0xb5a	; 0xb5a <imu_pitch>
    1c3a:	60 93 2e 21 	sts	0x212E, r22	; 0x80212e <ref_pitch>
    1c3e:	70 93 2f 21 	sts	0x212F, r23	; 0x80212f <ref_pitch+0x1>
    1c42:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <ref_pitch+0x2>
    1c46:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <ref_pitch+0x3>
    1c4a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <imu_heading>
    1c4e:	60 93 36 21 	sts	0x2136, r22	; 0x802136 <ref_yaw>
    1c52:	70 93 37 21 	sts	0x2137, r23	; 0x802137 <ref_yaw+0x1>
    1c56:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <ref_yaw+0x2>
    1c5a:	90 93 39 21 	sts	0x2139, r25	; 0x802139 <ref_yaw+0x3>
    1c5e:	08 95       	ret

00001c60 <calibrate>:
    1c60:	c3 df       	rcall	.-122    	; 0x1be8 <cali_alt>
    1c62:	df cf       	rjmp	.-66     	; 0x1c22 <cali_ang>
    1c64:	08 95       	ret

00001c66 <packet>:
}

void packet(void){
    1c66:	2f 92       	push	r2
    1c68:	3f 92       	push	r3
    1c6a:	4f 92       	push	r4
    1c6c:	5f 92       	push	r5
    1c6e:	6f 92       	push	r6
    1c70:	7f 92       	push	r7
    1c72:	8f 92       	push	r8
    1c74:	9f 92       	push	r9
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	e9 97       	sbiw	r28, 0x39	; 57
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	de bf       	out	0x3e, r29	; 62
	//XBEE_spi_write(str);
	packets++;
    1c94:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <packets>
    1c98:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <packets+0x1>
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <packets>
    1ca2:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    1ca6:	60 91 ed 20 	lds	r22, 0x20ED	; 0x8020ed <angle>
    1caa:	70 91 ee 20 	lds	r23, 0x20EE	; 0x8020ee <angle+0x1>
    1cae:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <angle+0x2>
    1cb2:	90 91 f0 20 	lds	r25, 0x20F0	; 0x8020f0 <angle+0x3>
    1cb6:	20 91 4e 21 	lds	r18, 0x214E	; 0x80214e <state>
    1cba:	29 83       	std	Y+1, r18	; 0x01
    1cbc:	40 90 f1 20 	lds	r4, 0x20F1	; 0x8020f1 <rpm>
    1cc0:	50 90 f2 20 	lds	r5, 0x20F2	; 0x8020f2 <rpm+0x1>
    1cc4:	60 90 f3 20 	lds	r6, 0x20F3	; 0x8020f3 <rpm+0x2>
    1cc8:	70 90 f4 20 	lds	r7, 0x20F4	; 0x8020f4 <rpm+0x3>
    1ccc:	80 90 f5 20 	lds	r8, 0x20F5	; 0x8020f5 <roll>
    1cd0:	90 90 f6 20 	lds	r9, 0x20F6	; 0x8020f6 <roll+0x1>
    1cd4:	a0 90 f7 20 	lds	r10, 0x20F7	; 0x8020f7 <roll+0x2>
    1cd8:	b0 90 f8 20 	lds	r11, 0x20F8	; 0x8020f8 <roll+0x3>
    1cdc:	c0 90 f9 20 	lds	r12, 0x20F9	; 0x8020f9 <pitch>
    1ce0:	d0 90 fa 20 	lds	r13, 0x20FA	; 0x8020fa <pitch+0x1>
    1ce4:	e0 90 fb 20 	lds	r14, 0x20FB	; 0x8020fb <pitch+0x2>
    1ce8:	f0 90 fc 20 	lds	r15, 0x20FC	; 0x8020fc <pitch+0x3>
    1cec:	40 91 fd 20 	lds	r20, 0x20FD	; 0x8020fd <gps_sats>
    1cf0:	50 91 fe 20 	lds	r21, 0x20FE	; 0x8020fe <gps_sats+0x1>
    1cf4:	48 af       	std	Y+56, r20	; 0x38
    1cf6:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    1cf8:	20 91 ff 20 	lds	r18, 0x20FF	; 0x8020ff <gps_alt>
    1cfc:	30 91 00 21 	lds	r19, 0x2100	; 0x802100 <gps_alt+0x1>
    1d00:	40 91 01 21 	lds	r20, 0x2101	; 0x802101 <gps_alt+0x2>
    1d04:	50 91 02 21 	lds	r21, 0x2102	; 0x802102 <gps_alt+0x3>
    1d08:	2a 83       	std	Y+2, r18	; 0x02
    1d0a:	3b 83       	std	Y+3, r19	; 0x03
    1d0c:	4c 83       	std	Y+4, r20	; 0x04
    1d0e:	5d 83       	std	Y+5, r21	; 0x05
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    1d10:	20 91 ff 20 	lds	r18, 0x20FF	; 0x8020ff <gps_alt>
    1d14:	30 91 00 21 	lds	r19, 0x2100	; 0x802100 <gps_alt+0x1>
    1d18:	40 91 01 21 	lds	r20, 0x2101	; 0x802101 <gps_alt+0x2>
    1d1c:	50 91 02 21 	lds	r21, 0x2102	; 0x802102 <gps_alt+0x3>
    1d20:	2e 83       	std	Y+6, r18	; 0x06
    1d22:	3f 83       	std	Y+7, r19	; 0x07
    1d24:	48 87       	std	Y+8, r20	; 0x08
    1d26:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    1d28:	20 91 03 21 	lds	r18, 0x2103	; 0x802103 <gps_long>
    1d2c:	30 91 04 21 	lds	r19, 0x2104	; 0x802104 <gps_long+0x1>
    1d30:	40 91 05 21 	lds	r20, 0x2105	; 0x802105 <gps_long+0x2>
    1d34:	50 91 06 21 	lds	r21, 0x2106	; 0x802106 <gps_long+0x3>
    1d38:	2a 87       	std	Y+10, r18	; 0x0a
    1d3a:	3b 87       	std	Y+11, r19	; 0x0b
    1d3c:	4c 87       	std	Y+12, r20	; 0x0c
    1d3e:	5d 87       	std	Y+13, r21	; 0x0d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    1d40:	20 91 03 21 	lds	r18, 0x2103	; 0x802103 <gps_long>
    1d44:	30 91 04 21 	lds	r19, 0x2104	; 0x802104 <gps_long+0x1>
    1d48:	40 91 05 21 	lds	r20, 0x2105	; 0x802105 <gps_long+0x2>
    1d4c:	50 91 06 21 	lds	r21, 0x2106	; 0x802106 <gps_long+0x3>
    1d50:	2e 87       	std	Y+14, r18	; 0x0e
    1d52:	3f 87       	std	Y+15, r19	; 0x0f
    1d54:	48 8b       	std	Y+16, r20	; 0x10
    1d56:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    1d58:	20 91 07 21 	lds	r18, 0x2107	; 0x802107 <gps_lat>
    1d5c:	30 91 08 21 	lds	r19, 0x2108	; 0x802108 <gps_lat+0x1>
    1d60:	40 91 09 21 	lds	r20, 0x2109	; 0x802109 <gps_lat+0x2>
    1d64:	50 91 0a 21 	lds	r21, 0x210A	; 0x80210a <gps_lat+0x3>
    1d68:	2a 8b       	std	Y+18, r18	; 0x12
    1d6a:	3b 8b       	std	Y+19, r19	; 0x13
    1d6c:	4c 8b       	std	Y+20, r20	; 0x14
    1d6e:	5d 8b       	std	Y+21, r21	; 0x15
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    1d70:	20 91 07 21 	lds	r18, 0x2107	; 0x802107 <gps_lat>
    1d74:	30 91 08 21 	lds	r19, 0x2108	; 0x802108 <gps_lat+0x1>
    1d78:	40 91 09 21 	lds	r20, 0x2109	; 0x802109 <gps_lat+0x2>
    1d7c:	50 91 0a 21 	lds	r21, 0x210A	; 0x80210a <gps_lat+0x3>
    1d80:	2e 8b       	std	Y+22, r18	; 0x16
    1d82:	3f 8b       	std	Y+23, r19	; 0x17
    1d84:	48 8f       	std	Y+24, r20	; 0x18
    1d86:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    1d88:	20 91 0b 21 	lds	r18, 0x210B	; 0x80210b <gps_t>
    1d8c:	30 91 0c 21 	lds	r19, 0x210C	; 0x80210c <gps_t+0x1>
    1d90:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <gps_t+0x2>
    1d94:	50 91 0e 21 	lds	r21, 0x210E	; 0x80210e <gps_t+0x3>
    1d98:	2a 8f       	std	Y+26, r18	; 0x1a
    1d9a:	3b 8f       	std	Y+27, r19	; 0x1b
    1d9c:	4c 8f       	std	Y+28, r20	; 0x1c
    1d9e:	5d 8f       	std	Y+29, r21	; 0x1d
    1da0:	20 91 0b 21 	lds	r18, 0x210B	; 0x80210b <gps_t>
    1da4:	30 91 0c 21 	lds	r19, 0x210C	; 0x80210c <gps_t+0x1>
    1da8:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <gps_t+0x2>
    1dac:	50 91 0e 21 	lds	r21, 0x210E	; 0x80210e <gps_t+0x3>
    1db0:	2e 8f       	std	Y+30, r18	; 0x1e
    1db2:	3f 8f       	std	Y+31, r19	; 0x1f
    1db4:	48 a3       	std	Y+32, r20	; 0x20
    1db6:	59 a3       	std	Y+33, r21	; 0x21
    1db8:	20 91 0b 21 	lds	r18, 0x210B	; 0x80210b <gps_t>
    1dbc:	30 91 0c 21 	lds	r19, 0x210C	; 0x80210c <gps_t+0x1>
    1dc0:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <gps_t+0x2>
    1dc4:	50 91 0e 21 	lds	r21, 0x210E	; 0x80210e <gps_t+0x3>
    1dc8:	2a a3       	std	Y+34, r18	; 0x22
    1dca:	3b a3       	std	Y+35, r19	; 0x23
    1dcc:	4c a3       	std	Y+36, r20	; 0x24
    1dce:	5d a3       	std	Y+37, r21	; 0x25
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    1dd0:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <volt>
    1dd4:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <volt+0x1>
    1dd8:	40 91 15 21 	lds	r20, 0x2115	; 0x802115 <volt+0x2>
    1ddc:	50 91 16 21 	lds	r21, 0x2116	; 0x802116 <volt+0x3>
    1de0:	2e a3       	std	Y+38, r18	; 0x26
    1de2:	3f a3       	std	Y+39, r19	; 0x27
    1de4:	48 a7       	std	Y+40, r20	; 0x28
    1de6:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    1de8:	20 91 1b 21 	lds	r18, 0x211B	; 0x80211b <temp>
    1dec:	30 91 1c 21 	lds	r19, 0x211C	; 0x80211c <temp+0x1>
    1df0:	40 91 1d 21 	lds	r20, 0x211D	; 0x80211d <temp+0x2>
    1df4:	50 91 1e 21 	lds	r21, 0x211E	; 0x80211e <temp+0x3>
    1df8:	2a a7       	std	Y+42, r18	; 0x2a
    1dfa:	3b a7       	std	Y+43, r19	; 0x2b
    1dfc:	4c a7       	std	Y+44, r20	; 0x2c
    1dfe:	5d a7       	std	Y+45, r21	; 0x2d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    1e00:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <press>
    1e04:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <press+0x1>
    1e08:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <press+0x2>
    1e0c:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <press+0x3>
    1e10:	2e a7       	std	Y+46, r18	; 0x2e
    1e12:	3f a7       	std	Y+47, r19	; 0x2f
    1e14:	48 ab       	std	Y+48, r20	; 0x30
    1e16:	59 ab       	std	Y+49, r21	; 0x31
    1e18:	20 91 17 21 	lds	r18, 0x2117	; 0x802117 <alt>
    1e1c:	30 91 18 21 	lds	r19, 0x2118	; 0x802118 <alt+0x1>
    1e20:	40 91 19 21 	lds	r20, 0x2119	; 0x802119 <alt+0x2>
    1e24:	50 91 1a 21 	lds	r21, 0x211A	; 0x80211a <alt+0x3>
    1e28:	2a ab       	std	Y+50, r18	; 0x32
    1e2a:	3b ab       	std	Y+51, r19	; 0x33
    1e2c:	4c ab       	std	Y+52, r20	; 0x34
    1e2e:	5d ab       	std	Y+53, r21	; 0x35
    1e30:	00 91 23 21 	lds	r16, 0x2123	; 0x802123 <packets>
    1e34:	10 91 24 21 	lds	r17, 0x2124	; 0x802124 <packets+0x1>
    1e38:	20 90 27 21 	lds	r2, 0x2127	; 0x802127 <timer>
    1e3c:	30 90 28 21 	lds	r3, 0x2128	; 0x802128 <timer+0x1>
    1e40:	40 91 27 21 	lds	r20, 0x2127	; 0x802127 <timer>
    1e44:	50 91 28 21 	lds	r21, 0x2128	; 0x802128 <timer+0x1>
    1e48:	4e ab       	std	Y+54, r20	; 0x36
    1e4a:	5f ab       	std	Y+55, r21	; 0x37
    1e4c:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1e50:	7f 93       	push	r23
    1e52:	6f 93       	push	r22
    1e54:	1f 92       	push	r1
    1e56:	59 81       	ldd	r21, Y+1	; 0x01
    1e58:	5f 93       	push	r21
    1e5a:	c3 01       	movw	r24, r6
    1e5c:	b2 01       	movw	r22, r4
    1e5e:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1e62:	7f 93       	push	r23
    1e64:	6f 93       	push	r22
    1e66:	c5 01       	movw	r24, r10
    1e68:	b4 01       	movw	r22, r8
    1e6a:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1e6e:	7f 93       	push	r23
    1e70:	6f 93       	push	r22
    1e72:	c7 01       	movw	r24, r14
    1e74:	b6 01       	movw	r22, r12
    1e76:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1e7a:	7f 93       	push	r23
    1e7c:	6f 93       	push	r22
    1e7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e80:	8f 93       	push	r24
    1e82:	98 ad       	ldd	r25, Y+56	; 0x38
    1e84:	9f 93       	push	r25
    1e86:	6a 81       	ldd	r22, Y+2	; 0x02
    1e88:	7b 81       	ldd	r23, Y+3	; 0x03
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1e92:	9b 01       	movw	r18, r22
    1e94:	22 0f       	add	r18, r18
    1e96:	33 1f       	adc	r19, r19
    1e98:	66 0f       	add	r22, r22
    1e9a:	77 1f       	adc	r23, r23
    1e9c:	66 0f       	add	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	66 0f       	add	r22, r22
    1ea2:	77 1f       	adc	r23, r23
    1ea4:	c9 01       	movw	r24, r18
    1ea6:	86 0f       	add	r24, r22
    1ea8:	97 1f       	adc	r25, r23
    1eaa:	6a e0       	ldi	r22, 0x0A	; 10
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__divmodhi4>
    1eb2:	9f 93       	push	r25
    1eb4:	8f 93       	push	r24
    1eb6:	6e 81       	ldd	r22, Y+6	; 0x06
    1eb8:	7f 81       	ldd	r23, Y+7	; 0x07
    1eba:	88 85       	ldd	r24, Y+8	; 0x08
    1ebc:	99 85       	ldd	r25, Y+9	; 0x09
    1ebe:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1ec2:	7f 93       	push	r23
    1ec4:	6f 93       	push	r22
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	34 e2       	ldi	r19, 0x24	; 36
    1eca:	44 e7       	ldi	r20, 0x74	; 116
    1ecc:	59 e4       	ldi	r21, 0x49	; 73
    1ece:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ed0:	7b 85       	ldd	r23, Y+11	; 0x0b
    1ed2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ed4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ed6:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1eda:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1ede:	20 e4       	ldi	r18, 0x40	; 64
    1ee0:	32 e4       	ldi	r19, 0x42	; 66
    1ee2:	4f e0       	ldi	r20, 0x0F	; 15
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    1eea:	9b 01       	movw	r18, r22
    1eec:	77 23       	and	r23, r23
    1eee:	24 f4       	brge	.+8      	; 0x1ef8 <packet+0x292>
    1ef0:	22 27       	eor	r18, r18
    1ef2:	33 27       	eor	r19, r19
    1ef4:	26 1b       	sub	r18, r22
    1ef6:	37 0b       	sbc	r19, r23
    1ef8:	c9 01       	movw	r24, r18
    1efa:	33 0f       	add	r19, r19
    1efc:	aa 0b       	sbc	r26, r26
    1efe:	bb 0b       	sbc	r27, r27
    1f00:	bf 93       	push	r27
    1f02:	af 93       	push	r26
    1f04:	9f 93       	push	r25
    1f06:	8f 93       	push	r24
    1f08:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f0a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f0c:	88 89       	ldd	r24, Y+16	; 0x10
    1f0e:	99 89       	ldd	r25, Y+17	; 0x11
    1f10:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1f14:	7f 93       	push	r23
    1f16:	6f 93       	push	r22
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	34 e2       	ldi	r19, 0x24	; 36
    1f1c:	44 e7       	ldi	r20, 0x74	; 116
    1f1e:	59 e4       	ldi	r21, 0x49	; 73
    1f20:	6a 89       	ldd	r22, Y+18	; 0x12
    1f22:	7b 89       	ldd	r23, Y+19	; 0x13
    1f24:	8c 89       	ldd	r24, Y+20	; 0x14
    1f26:	9d 89       	ldd	r25, Y+21	; 0x15
    1f28:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    1f2c:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1f30:	20 e4       	ldi	r18, 0x40	; 64
    1f32:	32 e4       	ldi	r19, 0x42	; 66
    1f34:	4f e0       	ldi	r20, 0x0F	; 15
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    1f3c:	9f 93       	push	r25
    1f3e:	8f 93       	push	r24
    1f40:	7f 93       	push	r23
    1f42:	6f 93       	push	r22
    1f44:	6e 89       	ldd	r22, Y+22	; 0x16
    1f46:	7f 89       	ldd	r23, Y+23	; 0x17
    1f48:	88 8d       	ldd	r24, Y+24	; 0x18
    1f4a:	99 8d       	ldd	r25, Y+25	; 0x19
    1f4c:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1f50:	7f 93       	push	r23
    1f52:	6f 93       	push	r22
    1f54:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f56:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f5c:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1f60:	0f 2e       	mov	r0, r31
    1f62:	f4 e6       	ldi	r31, 0x64	; 100
    1f64:	cf 2e       	mov	r12, r31
    1f66:	d1 2c       	mov	r13, r1
    1f68:	e1 2c       	mov	r14, r1
    1f6a:	f1 2c       	mov	r15, r1
    1f6c:	f0 2d       	mov	r31, r0
    1f6e:	a7 01       	movw	r20, r14
    1f70:	96 01       	movw	r18, r12
    1f72:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    1f76:	7f 93       	push	r23
    1f78:	6f 93       	push	r22
    1f7a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1f7c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1f7e:	88 a1       	ldd	r24, Y+32	; 0x20
    1f80:	99 a1       	ldd	r25, Y+33	; 0x21
    1f82:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1f86:	0f 2e       	mov	r0, r31
    1f88:	f0 e1       	ldi	r31, 0x10	; 16
    1f8a:	8f 2e       	mov	r8, r31
    1f8c:	f7 e2       	ldi	r31, 0x27	; 39
    1f8e:	9f 2e       	mov	r9, r31
    1f90:	a1 2c       	mov	r10, r1
    1f92:	b1 2c       	mov	r11, r1
    1f94:	f0 2d       	mov	r31, r0
    1f96:	a5 01       	movw	r20, r10
    1f98:	94 01       	movw	r18, r8
    1f9a:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    1f9e:	a7 01       	movw	r20, r14
    1fa0:	96 01       	movw	r18, r12
    1fa2:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    1fa6:	3f 93       	push	r19
    1fa8:	2f 93       	push	r18
    1faa:	6a a1       	ldd	r22, Y+34	; 0x22
    1fac:	7b a1       	ldd	r23, Y+35	; 0x23
    1fae:	8c a1       	ldd	r24, Y+36	; 0x24
    1fb0:	9d a1       	ldd	r25, Y+37	; 0x25
    1fb2:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1fb6:	a5 01       	movw	r20, r10
    1fb8:	94 01       	movw	r18, r8
    1fba:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    1fbe:	3f 93       	push	r19
    1fc0:	2f 93       	push	r18
    1fc2:	6e a1       	ldd	r22, Y+38	; 0x26
    1fc4:	7f a1       	ldd	r23, Y+39	; 0x27
    1fc6:	88 a5       	ldd	r24, Y+40	; 0x28
    1fc8:	99 a5       	ldd	r25, Y+41	; 0x29
    1fca:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1fce:	7f 93       	push	r23
    1fd0:	6f 93       	push	r22
    1fd2:	23 e3       	ldi	r18, 0x33	; 51
    1fd4:	33 e9       	ldi	r19, 0x93	; 147
    1fd6:	48 e8       	ldi	r20, 0x88	; 136
    1fd8:	53 e4       	ldi	r21, 0x43	; 67
    1fda:	6a a5       	ldd	r22, Y+42	; 0x2a
    1fdc:	7b a5       	ldd	r23, Y+43	; 0x2b
    1fde:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fe0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fe2:	0e 94 34 1a 	call	0x3468	; 0x3468 <__subsf3>
    1fe6:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1fea:	7f 93       	push	r23
    1fec:	6f 93       	push	r22
    1fee:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ff0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ff2:	88 a9       	ldd	r24, Y+48	; 0x30
    1ff4:	99 a9       	ldd	r25, Y+49	; 0x31
    1ff6:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    1ffa:	9f 93       	push	r25
    1ffc:	8f 93       	push	r24
    1ffe:	7f 93       	push	r23
    2000:	6f 93       	push	r22
    2002:	6a a9       	ldd	r22, Y+50	; 0x32
    2004:	7b a9       	ldd	r23, Y+51	; 0x33
    2006:	8c a9       	ldd	r24, Y+52	; 0x34
    2008:	9d a9       	ldd	r25, Y+53	; 0x35
    200a:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    200e:	7f 93       	push	r23
    2010:	6f 93       	push	r22
    2012:	1f 93       	push	r17
    2014:	0f 93       	push	r16
    2016:	91 01       	movw	r18, r2
    2018:	ad ec       	ldi	r26, 0xCD	; 205
    201a:	bc ec       	ldi	r27, 0xCC	; 204
    201c:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__umulhisi3>
    2020:	96 95       	lsr	r25
    2022:	87 95       	ror	r24
    2024:	96 95       	lsr	r25
    2026:	87 95       	ror	r24
    2028:	96 95       	lsr	r25
    202a:	87 95       	ror	r24
    202c:	9c 01       	movw	r18, r24
    202e:	22 0f       	add	r18, r18
    2030:	33 1f       	adc	r19, r19
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	82 0f       	add	r24, r18
    2040:	93 1f       	adc	r25, r19
    2042:	28 1a       	sub	r2, r24
    2044:	39 0a       	sbc	r3, r25
    2046:	3f 92       	push	r3
    2048:	2f 92       	push	r2
    204a:	2e a9       	ldd	r18, Y+54	; 0x36
    204c:	3f a9       	ldd	r19, Y+55	; 0x37
    204e:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__umulhisi3>
    2052:	96 95       	lsr	r25
    2054:	87 95       	ror	r24
    2056:	96 95       	lsr	r25
    2058:	87 95       	ror	r24
    205a:	96 95       	lsr	r25
    205c:	87 95       	ror	r24
    205e:	9f 93       	push	r25
    2060:	8f 93       	push	r24
    2062:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    2066:	8f 93       	push	r24
    2068:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    206c:	8f 93       	push	r24
    206e:	26 e9       	ldi	r18, 0x96	; 150
    2070:	31 e2       	ldi	r19, 0x21	; 33
    2072:	3f 93       	push	r19
    2074:	2f 93       	push	r18
    2076:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	26 e9       	ldi	r18, 0x96	; 150
    2080:	31 e2       	ldi	r19, 0x21	; 33
    2082:	3f 93       	push	r19
    2084:	2f 93       	push	r18
    2086:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <printf>
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	e9 96       	adiw	r28, 0x39	; 57
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
    20a4:	bf 90       	pop	r11
    20a6:	af 90       	pop	r10
    20a8:	9f 90       	pop	r9
    20aa:	8f 90       	pop	r8
    20ac:	7f 90       	pop	r7
    20ae:	6f 90       	pop	r6
    20b0:	5f 90       	pop	r5
    20b2:	4f 90       	pop	r4
    20b4:	3f 90       	pop	r3
    20b6:	2f 90       	pop	r2
    20b8:	08 95       	ret

000020ba <eeprom_write_const>:

void eeprom_write_const(void){
    20ba:	cf 92       	push	r12
    20bc:	df 92       	push	r13
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	a0 97       	sbiw	r28, 0x20	; 32
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0b e2       	ldi	r16, 0x2B	; 43
    20d6:	10 e2       	ldi	r17, 0x20	; 32
    20d8:	0f 2e       	mov	r0, r31
    20da:	f3 e3       	ldi	r31, 0x33	; 51
    20dc:	cf 2e       	mov	r12, r31
    20de:	f0 e2       	ldi	r31, 0x20	; 32
    20e0:	df 2e       	mov	r13, r31
    20e2:	f0 2d       	mov	r31, r0
	uint8_t* g_p = (uint8_t *) &ground_p;
	uint8_t* g_t = (uint8_t *) &ground_t;
	
	for(uint8_t i = 0; i < 8; i ++){
		printf("%x ", g_p[i]);
    20e4:	0f 2e       	mov	r0, r31
    20e6:	f7 e4       	ldi	r31, 0x47	; 71
    20e8:	ef 2e       	mov	r14, r31
    20ea:	f0 e2       	ldi	r31, 0x20	; 32
    20ec:	ff 2e       	mov	r15, r31
    20ee:	f0 2d       	mov	r31, r0
    20f0:	d8 01       	movw	r26, r16
    20f2:	8d 91       	ld	r24, X+
    20f4:	8d 01       	movw	r16, r26
    20f6:	1f 92       	push	r1
    20f8:	8f 93       	push	r24
    20fa:	ff 92       	push	r15
    20fc:	ef 92       	push	r14
    20fe:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <printf>

void eeprom_write_const(void){
	uint8_t* g_p = (uint8_t *) &ground_p;
	uint8_t* g_t = (uint8_t *) &ground_t;
	
	for(uint8_t i = 0; i < 8; i ++){
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0c 15       	cp	r16, r12
    210c:	1d 05       	cpc	r17, r13
    210e:	81 f7       	brne	.-32     	; 0x20f0 <eeprom_write_const+0x36>
		printf("%x ", g_p[i]);
	}
	printf("\n");
    2110:	8a e0       	ldi	r24, 0x0A	; 10
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <putchar>

	uint8_t data[] = {g_p[0], g_p[1], g_p[2], g_p[3], g_p[4], g_p[5], g_p[6], g_p[7], g_t[7], g_t[6], g_t[5], g_t[4], g_t[3], g_t[2], g_t[1], g_t[0]};
    2118:	eb e2       	ldi	r30, 0x2B	; 43
    211a:	f0 e2       	ldi	r31, 0x20	; 32
    211c:	80 81       	ld	r24, Z
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	81 81       	ldd	r24, Z+1	; 0x01
    2122:	8a 83       	std	Y+2, r24	; 0x02
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	8b 83       	std	Y+3, r24	; 0x03
    2128:	83 81       	ldd	r24, Z+3	; 0x03
    212a:	8c 83       	std	Y+4, r24	; 0x04
    212c:	84 81       	ldd	r24, Z+4	; 0x04
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	85 81       	ldd	r24, Z+5	; 0x05
    2132:	8e 83       	std	Y+6, r24	; 0x06
    2134:	86 81       	ldd	r24, Z+6	; 0x06
    2136:	8f 83       	std	Y+7, r24	; 0x07
    2138:	87 81       	ldd	r24, Z+7	; 0x07
    213a:	88 87       	std	Y+8, r24	; 0x08
    213c:	e7 e2       	ldi	r30, 0x27	; 39
    213e:	f0 e2       	ldi	r31, 0x20	; 32
    2140:	87 81       	ldd	r24, Z+7	; 0x07
    2142:	89 87       	std	Y+9, r24	; 0x09
    2144:	86 81       	ldd	r24, Z+6	; 0x06
    2146:	8a 87       	std	Y+10, r24	; 0x0a
    2148:	85 81       	ldd	r24, Z+5	; 0x05
    214a:	8b 87       	std	Y+11, r24	; 0x0b
    214c:	84 81       	ldd	r24, Z+4	; 0x04
    214e:	8c 87       	std	Y+12, r24	; 0x0c
    2150:	83 81       	ldd	r24, Z+3	; 0x03
    2152:	8d 87       	std	Y+13, r24	; 0x0d
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	8e 87       	std	Y+14, r24	; 0x0e
    2158:	81 81       	ldd	r24, Z+1	; 0x01
    215a:	8f 87       	std	Y+15, r24	; 0x0f
    215c:	80 81       	ld	r24, Z
    215e:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
    2160:	80 e1       	ldi	r24, 0x10	; 16
    2162:	ef e2       	ldi	r30, 0x2F	; 47
    2164:	f0 e2       	ldi	r31, 0x20	; 32
    2166:	de 01       	movw	r26, r28
    2168:	51 96       	adiw	r26, 0x11	; 17
    216a:	01 90       	ld	r0, Z+
    216c:	0d 92       	st	X+, r0
    216e:	8a 95       	dec	r24
    2170:	e1 f7       	brne	.-8      	; 0x216a <eeprom_write_const+0xb0>
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
    2172:	83 e3       	ldi	r24, 0x33	; 51
    2174:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    2178:	fe 01       	movw	r30, r28
    217a:	71 96       	adiw	r30, 0x11	; 17
    217c:	ce 01       	movw	r24, r28
    217e:	01 96       	adiw	r24, 0x01	; 1
    2180:	ae 01       	movw	r20, r28
    2182:	4f 5d       	subi	r20, 0xDF	; 223
    2184:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 16; i++){
		NVM.ADDR0 = addresses[i];
    2186:	60 ec       	ldi	r22, 0xC0	; 192
    2188:	71 e0       	ldi	r23, 0x01	; 1
    218a:	21 91       	ld	r18, Z+
    218c:	db 01       	movw	r26, r22
    218e:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    2190:	dc 01       	movw	r26, r24
    2192:	2d 91       	ld	r18, X+
    2194:	cd 01       	movw	r24, r26
    2196:	db 01       	movw	r26, r22
    2198:	14 96       	adiw	r26, 0x04	; 4
    219a:	2c 93       	st	X, r18
	uint8_t data[] = {g_p[0], g_p[1], g_p[2], g_p[3], g_p[4], g_p[5], g_p[6], g_p[7], g_t[7], g_t[6], g_t[5], g_t[4], g_t[3], g_t[2], g_t[1], g_t[0]};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 16; i++){
    219c:	e4 17       	cp	r30, r20
    219e:	f5 07       	cpc	r31, r21
    21a0:	a1 f7       	brne	.-24     	; 0x218a <eeprom_write_const+0xd0>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    21a2:	e0 ec       	ldi	r30, 0xC0	; 192
    21a4:	f1 e0       	ldi	r31, 0x01	; 1
    21a6:	85 e3       	ldi	r24, 0x35	; 53
    21a8:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    21aa:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    21ac:	80 e1       	ldi	r24, 0x10	; 16
    21ae:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    21b0:	88 ed       	ldi	r24, 0xD8	; 216
    21b2:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    21b8:	87 85       	ldd	r24, Z+15	; 0x0f
    21ba:	88 23       	and	r24, r24
    21bc:	ec f3       	brlt	.-6      	; 0x21b8 <eeprom_write_const+0xfe>
}
    21be:	a0 96       	adiw	r28, 0x20	; 32
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
    21d0:	df 90       	pop	r13
    21d2:	cf 90       	pop	r12
    21d4:	08 95       	ret

000021d6 <eeprom_write>:

void eeprom_write(void){
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	60 97       	sbiw	r28, 0x10	; 16
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	de bf       	out	0x3e, r29	; 62
	uint16_t a = (uint16_t) ((int16_t) alt); // creates an unsigned int of the altitude
    21e8:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <alt>
    21ec:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <alt+0x1>
    21f0:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <alt+0x2>
    21f4:	90 91 1a 21 	lds	r25, 0x211A	; 0x80211a <alt+0x3>
    21f8:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    21fc:	16 2f       	mov	r17, r22
    21fe:	07 2f       	mov	r16, r23
	uint16_t v = (uint16_t) ((int16_t) velocity);
    2200:	60 91 0f 21 	lds	r22, 0x210F	; 0x80210f <velocity>
    2204:	70 91 10 21 	lds	r23, 0x2110	; 0x802110 <velocity+0x1>
    2208:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <velocity+0x2>
    220c:	90 91 12 21 	lds	r25, 0x2112	; 0x802112 <velocity+0x3>
    2210:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>

	// saves data and addresses in array
	uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF};
    2214:	09 83       	std	Y+1, r16	; 0x01
    2216:	1a 83       	std	Y+2, r17	; 0x02
    2218:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <packets>
    221c:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <packets+0x1>
    2220:	9b 83       	std	Y+3, r25	; 0x03
    2222:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <packets>
    2226:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <packets+0x1>
    222a:	8c 83       	std	Y+4, r24	; 0x04
    222c:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <timer>
    2230:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <timer+0x1>
    2234:	9d 83       	std	Y+5, r25	; 0x05
    2236:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <timer>
    223a:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <timer+0x1>
    223e:	8e 83       	std	Y+6, r24	; 0x06
    2240:	7f 83       	std	Y+7, r23	; 0x07
    2242:	68 87       	std	Y+8, r22	; 0x08
	uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0};
    2244:	88 e0       	ldi	r24, 0x08	; 8
    2246:	ef e3       	ldi	r30, 0x3F	; 63
    2248:	f0 e2       	ldi	r31, 0x20	; 32
    224a:	de 01       	movw	r26, r28
    224c:	19 96       	adiw	r26, 0x09	; 9
    224e:	01 90       	ld	r0, Z+
    2250:	0d 92       	st	X+, r0
    2252:	8a 95       	dec	r24
    2254:	e1 f7       	brne	.-8      	; 0x224e <eeprom_write+0x78>

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
    2256:	83 e3       	ldi	r24, 0x33	; 51
    2258:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    225c:	fe 01       	movw	r30, r28
    225e:	39 96       	adiw	r30, 0x09	; 9
    2260:	ce 01       	movw	r24, r28
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	ae 01       	movw	r20, r28
    2266:	4f 5e       	subi	r20, 0xEF	; 239
    2268:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 8; i++){
		NVM.ADDR0 = addresses[i];
    226a:	60 ec       	ldi	r22, 0xC0	; 192
    226c:	71 e0       	ldi	r23, 0x01	; 1
    226e:	21 91       	ld	r18, Z+
    2270:	db 01       	movw	r26, r22
    2272:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    2274:	dc 01       	movw	r26, r24
    2276:	2d 91       	ld	r18, X+
    2278:	cd 01       	movw	r24, r26
    227a:	db 01       	movw	r26, r22
    227c:	14 96       	adiw	r26, 0x04	; 4
    227e:	2c 93       	st	X, r18
	uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF};
	uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0};

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 8; i++){
    2280:	e4 17       	cp	r30, r20
    2282:	f5 07       	cpc	r31, r21
    2284:	a1 f7       	brne	.-24     	; 0x226e <eeprom_write+0x98>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    2286:	e0 ec       	ldi	r30, 0xC0	; 192
    2288:	f1 e0       	ldi	r31, 0x01	; 1
    228a:	85 e3       	ldi	r24, 0x35	; 53
    228c:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    228e:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    2290:	80 e1       	ldi	r24, 0x10	; 16
    2292:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    2294:	88 ed       	ldi	r24, 0xD8	; 216
    2296:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    229c:	87 85       	ldd	r24, Z+15	; 0x0f
    229e:	88 23       	and	r24, r24
    22a0:	ec f3       	brlt	.-6      	; 0x229c <eeprom_write+0xc6>
}
    22a2:	60 96       	adiw	r28, 0x10	; 16
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	08 95       	ret

000022b2 <time_update>:
	TCE0.CTRLA = 0x07; // divisor set to 1024 0x07
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void time_update(void){
    22b2:	2f 92       	push	r2
    22b4:	3f 92       	push	r3
    22b6:	4f 92       	push	r4
    22b8:	5f 92       	push	r5
    22ba:	6f 92       	push	r6
    22bc:	7f 92       	push	r7
    22be:	8f 92       	push	r8
    22c0:	9f 92       	push	r9
    22c2:	af 92       	push	r10
    22c4:	bf 92       	push	r11
    22c6:	cf 92       	push	r12
    22c8:	df 92       	push	r13
    22ca:	ef 92       	push	r14
    22cc:	ff 92       	push	r15
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	ef 97       	sbiw	r28, 0x3f	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	de bf       	out	0x3e, r29	; 62
	packets++;
    22e0:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <packets>
    22e4:	90 91 24 21 	lds	r25, 0x2124	; 0x802124 <packets+0x1>
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <packets>
    22ee:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <packets+0x1>

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    22f2:	60 91 ed 20 	lds	r22, 0x20ED	; 0x8020ed <angle>
    22f6:	70 91 ee 20 	lds	r23, 0x20EE	; 0x8020ee <angle+0x1>
    22fa:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <angle+0x2>
    22fe:	90 91 f0 20 	lds	r25, 0x20F0	; 0x8020f0 <angle+0x3>
    2302:	20 91 4e 21 	lds	r18, 0x214E	; 0x80214e <state>
    2306:	29 83       	std	Y+1, r18	; 0x01
    2308:	40 90 f1 20 	lds	r4, 0x20F1	; 0x8020f1 <rpm>
    230c:	50 90 f2 20 	lds	r5, 0x20F2	; 0x8020f2 <rpm+0x1>
    2310:	60 90 f3 20 	lds	r6, 0x20F3	; 0x8020f3 <rpm+0x2>
    2314:	70 90 f4 20 	lds	r7, 0x20F4	; 0x8020f4 <rpm+0x3>
    2318:	80 90 f5 20 	lds	r8, 0x20F5	; 0x8020f5 <roll>
    231c:	90 90 f6 20 	lds	r9, 0x20F6	; 0x8020f6 <roll+0x1>
    2320:	a0 90 f7 20 	lds	r10, 0x20F7	; 0x8020f7 <roll+0x2>
    2324:	b0 90 f8 20 	lds	r11, 0x20F8	; 0x8020f8 <roll+0x3>
    2328:	c0 90 f9 20 	lds	r12, 0x20F9	; 0x8020f9 <pitch>
    232c:	d0 90 fa 20 	lds	r13, 0x20FA	; 0x8020fa <pitch+0x1>
    2330:	e0 90 fb 20 	lds	r14, 0x20FB	; 0x8020fb <pitch+0x2>
    2334:	f0 90 fc 20 	lds	r15, 0x20FC	; 0x8020fc <pitch+0x3>
    2338:	40 91 fd 20 	lds	r20, 0x20FD	; 0x8020fd <gps_sats>
    233c:	50 91 fe 20 	lds	r21, 0x20FE	; 0x8020fe <gps_sats+0x1>
    2340:	4e af       	std	Y+62, r20	; 0x3e
    2342:	5f af       	std	Y+63, r21	; 0x3f
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    2344:	20 91 ff 20 	lds	r18, 0x20FF	; 0x8020ff <gps_alt>
    2348:	30 91 00 21 	lds	r19, 0x2100	; 0x802100 <gps_alt+0x1>
    234c:	40 91 01 21 	lds	r20, 0x2101	; 0x802101 <gps_alt+0x2>
    2350:	50 91 02 21 	lds	r21, 0x2102	; 0x802102 <gps_alt+0x3>
    2354:	2a 83       	std	Y+2, r18	; 0x02
    2356:	3b 83       	std	Y+3, r19	; 0x03
    2358:	4c 83       	std	Y+4, r20	; 0x04
    235a:	5d 83       	std	Y+5, r21	; 0x05
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    235c:	20 91 ff 20 	lds	r18, 0x20FF	; 0x8020ff <gps_alt>
    2360:	30 91 00 21 	lds	r19, 0x2100	; 0x802100 <gps_alt+0x1>
    2364:	40 91 01 21 	lds	r20, 0x2101	; 0x802101 <gps_alt+0x2>
    2368:	50 91 02 21 	lds	r21, 0x2102	; 0x802102 <gps_alt+0x3>
    236c:	2e 83       	std	Y+6, r18	; 0x06
    236e:	3f 83       	std	Y+7, r19	; 0x07
    2370:	48 87       	std	Y+8, r20	; 0x08
    2372:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2374:	20 91 03 21 	lds	r18, 0x2103	; 0x802103 <gps_long>
    2378:	30 91 04 21 	lds	r19, 0x2104	; 0x802104 <gps_long+0x1>
    237c:	40 91 05 21 	lds	r20, 0x2105	; 0x802105 <gps_long+0x2>
    2380:	50 91 06 21 	lds	r21, 0x2106	; 0x802106 <gps_long+0x3>
    2384:	2a 87       	std	Y+10, r18	; 0x0a
    2386:	3b 87       	std	Y+11, r19	; 0x0b
    2388:	4c 87       	std	Y+12, r20	; 0x0c
    238a:	5d 87       	std	Y+13, r21	; 0x0d
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    238c:	20 91 03 21 	lds	r18, 0x2103	; 0x802103 <gps_long>
    2390:	30 91 04 21 	lds	r19, 0x2104	; 0x802104 <gps_long+0x1>
    2394:	40 91 05 21 	lds	r20, 0x2105	; 0x802105 <gps_long+0x2>
    2398:	50 91 06 21 	lds	r21, 0x2106	; 0x802106 <gps_long+0x3>
    239c:	2e 87       	std	Y+14, r18	; 0x0e
    239e:	3f 87       	std	Y+15, r19	; 0x0f
    23a0:	48 8b       	std	Y+16, r20	; 0x10
    23a2:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    23a4:	20 91 07 21 	lds	r18, 0x2107	; 0x802107 <gps_lat>
    23a8:	30 91 08 21 	lds	r19, 0x2108	; 0x802108 <gps_lat+0x1>
    23ac:	40 91 09 21 	lds	r20, 0x2109	; 0x802109 <gps_lat+0x2>
    23b0:	50 91 0a 21 	lds	r21, 0x210A	; 0x80210a <gps_lat+0x3>
    23b4:	2a 8b       	std	Y+18, r18	; 0x12
    23b6:	3b 8b       	std	Y+19, r19	; 0x13
    23b8:	4c 8b       	std	Y+20, r20	; 0x14
    23ba:	5d 8b       	std	Y+21, r21	; 0x15
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    23bc:	20 91 07 21 	lds	r18, 0x2107	; 0x802107 <gps_lat>
    23c0:	30 91 08 21 	lds	r19, 0x2108	; 0x802108 <gps_lat+0x1>
    23c4:	40 91 09 21 	lds	r20, 0x2109	; 0x802109 <gps_lat+0x2>
    23c8:	50 91 0a 21 	lds	r21, 0x210A	; 0x80210a <gps_lat+0x3>
    23cc:	2e 8b       	std	Y+22, r18	; 0x16
    23ce:	3f 8b       	std	Y+23, r19	; 0x17
    23d0:	48 8f       	std	Y+24, r20	; 0x18
    23d2:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    23d4:	20 91 0b 21 	lds	r18, 0x210B	; 0x80210b <gps_t>
    23d8:	30 91 0c 21 	lds	r19, 0x210C	; 0x80210c <gps_t+0x1>
    23dc:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <gps_t+0x2>
    23e0:	50 91 0e 21 	lds	r21, 0x210E	; 0x80210e <gps_t+0x3>
    23e4:	2a 8f       	std	Y+26, r18	; 0x1a
    23e6:	3b 8f       	std	Y+27, r19	; 0x1b
    23e8:	4c 8f       	std	Y+28, r20	; 0x1c
    23ea:	5d 8f       	std	Y+29, r21	; 0x1d
    23ec:	20 91 0b 21 	lds	r18, 0x210B	; 0x80210b <gps_t>
    23f0:	30 91 0c 21 	lds	r19, 0x210C	; 0x80210c <gps_t+0x1>
    23f4:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <gps_t+0x2>
    23f8:	50 91 0e 21 	lds	r21, 0x210E	; 0x80210e <gps_t+0x3>
    23fc:	2e 8f       	std	Y+30, r18	; 0x1e
    23fe:	3f 8f       	std	Y+31, r19	; 0x1f
    2400:	48 a3       	std	Y+32, r20	; 0x20
    2402:	59 a3       	std	Y+33, r21	; 0x21
    2404:	20 91 0b 21 	lds	r18, 0x210B	; 0x80210b <gps_t>
    2408:	30 91 0c 21 	lds	r19, 0x210C	; 0x80210c <gps_t+0x1>
    240c:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <gps_t+0x2>
    2410:	50 91 0e 21 	lds	r21, 0x210E	; 0x80210e <gps_t+0x3>
    2414:	2a a3       	std	Y+34, r18	; 0x22
    2416:	3b a3       	std	Y+35, r19	; 0x23
    2418:	4c a3       	std	Y+36, r20	; 0x24
    241a:	5d a3       	std	Y+37, r21	; 0x25
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
    241c:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <volt>
    2420:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <volt+0x1>
    2424:	40 91 15 21 	lds	r20, 0x2115	; 0x802115 <volt+0x2>
    2428:	50 91 16 21 	lds	r21, 0x2116	; 0x802116 <volt+0x3>
    242c:	2e a3       	std	Y+38, r18	; 0x26
    242e:	3f a3       	std	Y+39, r19	; 0x27
    2430:	48 a7       	std	Y+40, r20	; 0x28
    2432:	59 a7       	std	Y+41, r21	; 0x29
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    2434:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <volt>
    2438:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <volt+0x1>
    243c:	40 91 15 21 	lds	r20, 0x2115	; 0x802115 <volt+0x2>
    2440:	50 91 16 21 	lds	r21, 0x2116	; 0x802116 <volt+0x3>
    2444:	2a a7       	std	Y+42, r18	; 0x2a
    2446:	3b a7       	std	Y+43, r19	; 0x2b
    2448:	4c a7       	std	Y+44, r20	; 0x2c
    244a:	5d a7       	std	Y+45, r21	; 0x2d
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
    244c:	20 91 1b 21 	lds	r18, 0x211B	; 0x80211b <temp>
    2450:	30 91 1c 21 	lds	r19, 0x211C	; 0x80211c <temp+0x1>
    2454:	40 91 1d 21 	lds	r20, 0x211D	; 0x80211d <temp+0x2>
    2458:	50 91 1e 21 	lds	r21, 0x211E	; 0x80211e <temp+0x3>
    245c:	2e a7       	std	Y+46, r18	; 0x2e
    245e:	3f a7       	std	Y+47, r19	; 0x2f
    2460:	48 ab       	std	Y+48, r20	; 0x30
    2462:	59 ab       	std	Y+49, r21	; 0x31
    2464:	20 91 1b 21 	lds	r18, 0x211B	; 0x80211b <temp>
    2468:	30 91 1c 21 	lds	r19, 0x211C	; 0x80211c <temp+0x1>
    246c:	40 91 1d 21 	lds	r20, 0x211D	; 0x80211d <temp+0x2>
    2470:	50 91 1e 21 	lds	r21, 0x211E	; 0x80211e <temp+0x3>
    2474:	2a ab       	std	Y+50, r18	; 0x32
    2476:	3b ab       	std	Y+51, r19	; 0x33
    2478:	4c ab       	std	Y+52, r20	; 0x34
    247a:	5d ab       	std	Y+53, r21	; 0x35
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    247c:	20 91 1f 21 	lds	r18, 0x211F	; 0x80211f <press>
    2480:	30 91 20 21 	lds	r19, 0x2120	; 0x802120 <press+0x1>
    2484:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <press+0x2>
    2488:	50 91 22 21 	lds	r21, 0x2122	; 0x802122 <press+0x3>
    248c:	2e ab       	std	Y+54, r18	; 0x36
    248e:	3f ab       	std	Y+55, r19	; 0x37
    2490:	48 af       	std	Y+56, r20	; 0x38
    2492:	59 af       	std	Y+57, r21	; 0x39
    2494:	20 91 17 21 	lds	r18, 0x2117	; 0x802117 <alt>
    2498:	30 91 18 21 	lds	r19, 0x2118	; 0x802118 <alt+0x1>
    249c:	40 91 19 21 	lds	r20, 0x2119	; 0x802119 <alt+0x2>
    24a0:	50 91 1a 21 	lds	r21, 0x211A	; 0x80211a <alt+0x3>
    24a4:	2a af       	std	Y+58, r18	; 0x3a
    24a6:	3b af       	std	Y+59, r19	; 0x3b
    24a8:	4c af       	std	Y+60, r20	; 0x3c
    24aa:	5d af       	std	Y+61, r21	; 0x3d
    24ac:	20 90 23 21 	lds	r2, 0x2123	; 0x802123 <packets>
    24b0:	30 90 24 21 	lds	r3, 0x2124	; 0x802124 <packets+0x1>
    24b4:	00 91 27 21 	lds	r16, 0x2127	; 0x802127 <timer>
    24b8:	10 91 28 21 	lds	r17, 0x2128	; 0x802128 <timer+0x1>
    24bc:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    24c0:	7f 93       	push	r23
    24c2:	6f 93       	push	r22
    24c4:	1f 92       	push	r1
    24c6:	39 81       	ldd	r19, Y+1	; 0x01
    24c8:	3f 93       	push	r19
    24ca:	c3 01       	movw	r24, r6
    24cc:	b2 01       	movw	r22, r4
    24ce:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    24d2:	7f 93       	push	r23
    24d4:	6f 93       	push	r22
    24d6:	c5 01       	movw	r24, r10
    24d8:	b4 01       	movw	r22, r8
    24da:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    24de:	7f 93       	push	r23
    24e0:	6f 93       	push	r22
    24e2:	c7 01       	movw	r24, r14
    24e4:	b6 01       	movw	r22, r12
    24e6:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    24ea:	7f 93       	push	r23
    24ec:	6f 93       	push	r22
    24ee:	4f ad       	ldd	r20, Y+63	; 0x3f
    24f0:	4f 93       	push	r20
    24f2:	5e ad       	ldd	r21, Y+62	; 0x3e
    24f4:	5f 93       	push	r21
    24f6:	6a 81       	ldd	r22, Y+2	; 0x02
    24f8:	7b 81       	ldd	r23, Y+3	; 0x03
    24fa:	8c 81       	ldd	r24, Y+4	; 0x04
    24fc:	9d 81       	ldd	r25, Y+5	; 0x05
    24fe:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    2502:	9b 01       	movw	r18, r22
    2504:	22 0f       	add	r18, r18
    2506:	33 1f       	adc	r19, r19
    2508:	66 0f       	add	r22, r22
    250a:	77 1f       	adc	r23, r23
    250c:	66 0f       	add	r22, r22
    250e:	77 1f       	adc	r23, r23
    2510:	66 0f       	add	r22, r22
    2512:	77 1f       	adc	r23, r23
    2514:	c9 01       	movw	r24, r18
    2516:	86 0f       	add	r24, r22
    2518:	97 1f       	adc	r25, r23
    251a:	6a e0       	ldi	r22, 0x0A	; 10
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__divmodhi4>
    2522:	9f 93       	push	r25
    2524:	8f 93       	push	r24
    2526:	6e 81       	ldd	r22, Y+6	; 0x06
    2528:	7f 81       	ldd	r23, Y+7	; 0x07
    252a:	88 85       	ldd	r24, Y+8	; 0x08
    252c:	99 85       	ldd	r25, Y+9	; 0x09
    252e:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    2532:	7f 93       	push	r23
    2534:	6f 93       	push	r22
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	34 e2       	ldi	r19, 0x24	; 36
    253a:	44 e7       	ldi	r20, 0x74	; 116
    253c:	59 e4       	ldi	r21, 0x49	; 73
    253e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2540:	7b 85       	ldd	r23, Y+11	; 0x0b
    2542:	8c 85       	ldd	r24, Y+12	; 0x0c
    2544:	9d 85       	ldd	r25, Y+13	; 0x0d
    2546:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    254a:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    254e:	20 e4       	ldi	r18, 0x40	; 64
    2550:	32 e4       	ldi	r19, 0x42	; 66
    2552:	4f e0       	ldi	r20, 0x0F	; 15
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    255a:	9b 01       	movw	r18, r22
    255c:	77 23       	and	r23, r23
    255e:	24 f4       	brge	.+8      	; 0x2568 <time_update+0x2b6>
    2560:	22 27       	eor	r18, r18
    2562:	33 27       	eor	r19, r19
    2564:	26 1b       	sub	r18, r22
    2566:	37 0b       	sbc	r19, r23
    2568:	c9 01       	movw	r24, r18
    256a:	33 0f       	add	r19, r19
    256c:	aa 0b       	sbc	r26, r26
    256e:	bb 0b       	sbc	r27, r27
    2570:	bf 93       	push	r27
    2572:	af 93       	push	r26
    2574:	9f 93       	push	r25
    2576:	8f 93       	push	r24
    2578:	6e 85       	ldd	r22, Y+14	; 0x0e
    257a:	7f 85       	ldd	r23, Y+15	; 0x0f
    257c:	88 89       	ldd	r24, Y+16	; 0x10
    257e:	99 89       	ldd	r25, Y+17	; 0x11
    2580:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    2584:	7f 93       	push	r23
    2586:	6f 93       	push	r22
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	34 e2       	ldi	r19, 0x24	; 36
    258c:	44 e7       	ldi	r20, 0x74	; 116
    258e:	59 e4       	ldi	r21, 0x49	; 73
    2590:	6a 89       	ldd	r22, Y+18	; 0x12
    2592:	7b 89       	ldd	r23, Y+19	; 0x13
    2594:	8c 89       	ldd	r24, Y+20	; 0x14
    2596:	9d 89       	ldd	r25, Y+21	; 0x15
    2598:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    259c:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    25a0:	20 e4       	ldi	r18, 0x40	; 64
    25a2:	32 e4       	ldi	r19, 0x42	; 66
    25a4:	4f e0       	ldi	r20, 0x0F	; 15
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    25ac:	9f 93       	push	r25
    25ae:	8f 93       	push	r24
    25b0:	7f 93       	push	r23
    25b2:	6f 93       	push	r22
    25b4:	6e 89       	ldd	r22, Y+22	; 0x16
    25b6:	7f 89       	ldd	r23, Y+23	; 0x17
    25b8:	88 8d       	ldd	r24, Y+24	; 0x18
    25ba:	99 8d       	ldd	r25, Y+25	; 0x19
    25bc:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    25c0:	7f 93       	push	r23
    25c2:	6f 93       	push	r22
    25c4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25c6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25cc:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    25d0:	0f 2e       	mov	r0, r31
    25d2:	f4 e6       	ldi	r31, 0x64	; 100
    25d4:	cf 2e       	mov	r12, r31
    25d6:	d1 2c       	mov	r13, r1
    25d8:	e1 2c       	mov	r14, r1
    25da:	f1 2c       	mov	r15, r1
    25dc:	f0 2d       	mov	r31, r0
    25de:	a7 01       	movw	r20, r14
    25e0:	96 01       	movw	r18, r12
    25e2:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    25e6:	7f 93       	push	r23
    25e8:	6f 93       	push	r22
    25ea:	6e 8d       	ldd	r22, Y+30	; 0x1e
    25ec:	7f 8d       	ldd	r23, Y+31	; 0x1f
    25ee:	88 a1       	ldd	r24, Y+32	; 0x20
    25f0:	99 a1       	ldd	r25, Y+33	; 0x21
    25f2:	0e 94 05 1b 	call	0x360a	; 0x360a <__fixsfsi>
    25f6:	0f 2e       	mov	r0, r31
    25f8:	f0 e1       	ldi	r31, 0x10	; 16
    25fa:	8f 2e       	mov	r8, r31
    25fc:	f7 e2       	ldi	r31, 0x27	; 39
    25fe:	9f 2e       	mov	r9, r31
    2600:	a1 2c       	mov	r10, r1
    2602:	b1 2c       	mov	r11, r1
    2604:	f0 2d       	mov	r31, r0
    2606:	a5 01       	movw	r20, r10
    2608:	94 01       	movw	r18, r8
    260a:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    260e:	a7 01       	movw	r20, r14
    2610:	96 01       	movw	r18, r12
    2612:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    2616:	3f 93       	push	r19
    2618:	2f 93       	push	r18
    261a:	6a a1       	ldd	r22, Y+34	; 0x22
    261c:	7b a1       	ldd	r23, Y+35	; 0x23
    261e:	8c a1       	ldd	r24, Y+36	; 0x24
    2620:	9d a1       	ldd	r25, Y+37	; 0x25
    2622:	f3 d7       	rcall	.+4070   	; 0x360a <__fixsfsi>
    2624:	a5 01       	movw	r20, r10
    2626:	94 01       	movw	r18, r8
    2628:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__divmodsi4>
    262c:	3f 93       	push	r19
    262e:	2f 93       	push	r18
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	51 e4       	ldi	r21, 0x41	; 65
    2638:	6e a1       	ldd	r22, Y+38	; 0x26
    263a:	7f a1       	ldd	r23, Y+39	; 0x27
    263c:	88 a5       	ldd	r24, Y+40	; 0x28
    263e:	99 a5       	ldd	r25, Y+41	; 0x29
    2640:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    2644:	e2 d7       	rcall	.+4036   	; 0x360a <__fixsfsi>
    2646:	cb 01       	movw	r24, r22
    2648:	6a e0       	ldi	r22, 0x0A	; 10
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__divmodhi4>
    2650:	9f 93       	push	r25
    2652:	8f 93       	push	r24
    2654:	6a a5       	ldd	r22, Y+42	; 0x2a
    2656:	7b a5       	ldd	r23, Y+43	; 0x2b
    2658:	8c a5       	ldd	r24, Y+44	; 0x2c
    265a:	9d a5       	ldd	r25, Y+45	; 0x2d
    265c:	d6 d7       	rcall	.+4012   	; 0x360a <__fixsfsi>
    265e:	7f 93       	push	r23
    2660:	6f 93       	push	r22
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	6e a5       	ldd	r22, Y+46	; 0x2e
    266c:	7f a5       	ldd	r23, Y+47	; 0x2f
    266e:	88 a9       	ldd	r24, Y+48	; 0x30
    2670:	99 a9       	ldd	r25, Y+49	; 0x31
    2672:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__mulsf3>
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	38 eb       	ldi	r19, 0xB8	; 184
    267a:	4a e2       	ldi	r20, 0x2A	; 42
    267c:	55 e4       	ldi	r21, 0x45	; 69
    267e:	f4 d6       	rcall	.+3560   	; 0x3468 <__subsf3>
    2680:	c4 d7       	rcall	.+3976   	; 0x360a <__fixsfsi>
    2682:	cb 01       	movw	r24, r22
    2684:	6a e0       	ldi	r22, 0x0A	; 10
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__divmodhi4>
    268c:	9f 93       	push	r25
    268e:	8f 93       	push	r24
    2690:	23 e3       	ldi	r18, 0x33	; 51
    2692:	33 e9       	ldi	r19, 0x93	; 147
    2694:	48 e8       	ldi	r20, 0x88	; 136
    2696:	53 e4       	ldi	r21, 0x43	; 67
    2698:	6a a9       	ldd	r22, Y+50	; 0x32
    269a:	7b a9       	ldd	r23, Y+51	; 0x33
    269c:	8c a9       	ldd	r24, Y+52	; 0x34
    269e:	9d a9       	ldd	r25, Y+53	; 0x35
    26a0:	e3 d6       	rcall	.+3526   	; 0x3468 <__subsf3>
    26a2:	b3 d7       	rcall	.+3942   	; 0x360a <__fixsfsi>
    26a4:	7f 93       	push	r23
    26a6:	6f 93       	push	r22
    26a8:	6e a9       	ldd	r22, Y+54	; 0x36
    26aa:	7f a9       	ldd	r23, Y+55	; 0x37
    26ac:	88 ad       	ldd	r24, Y+56	; 0x38
    26ae:	99 ad       	ldd	r25, Y+57	; 0x39
    26b0:	ac d7       	rcall	.+3928   	; 0x360a <__fixsfsi>
    26b2:	9f 93       	push	r25
    26b4:	8f 93       	push	r24
    26b6:	7f 93       	push	r23
    26b8:	6f 93       	push	r22
    26ba:	6a ad       	ldd	r22, Y+58	; 0x3a
    26bc:	7b ad       	ldd	r23, Y+59	; 0x3b
    26be:	8c ad       	ldd	r24, Y+60	; 0x3c
    26c0:	9d ad       	ldd	r25, Y+61	; 0x3d
    26c2:	a3 d7       	rcall	.+3910   	; 0x360a <__fixsfsi>
    26c4:	7f 93       	push	r23
    26c6:	6f 93       	push	r22
    26c8:	3f 92       	push	r3
    26ca:	2f 92       	push	r2
    26cc:	1f 93       	push	r17
    26ce:	0f 93       	push	r16
    26d0:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    26d4:	8f 93       	push	r24
    26d6:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    26da:	8f 93       	push	r24
    26dc:	86 e9       	ldi	r24, 0x96	; 150
    26de:	91 e2       	ldi	r25, 0x21	; 33
    26e0:	9f 93       	push	r25
    26e2:	8f 93       	push	r24
    26e4:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	86 e9       	ldi	r24, 0x96	; 150
    26ee:	91 e2       	ldi	r25, 0x21	; 33
    26f0:	9f 93       	push	r25
    26f2:	8f 93       	push	r24
    26f4:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <printf>
	eeprom_write();
    26f8:	6e dd       	rcall	.-1316   	; 0x21d6 <eeprom_write>

	time_flag = 0;
    26fa:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <time_flag>
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	ef 96       	adiw	r28, 0x3f	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
    2714:	df 90       	pop	r13
    2716:	cf 90       	pop	r12
    2718:	bf 90       	pop	r11
    271a:	af 90       	pop	r10
    271c:	9f 90       	pop	r9
    271e:	8f 90       	pop	r8
    2720:	7f 90       	pop	r7
    2722:	6f 90       	pop	r6
    2724:	5f 90       	pop	r5
    2726:	4f 90       	pop	r4
    2728:	3f 90       	pop	r3
    272a:	2f 90       	pop	r2
    272c:	08 95       	ret

0000272e <eeprom_read>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

uint8_t	eeprom_read(uint16_t address){
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
	NVM.CMD = READ_EEPROM;
    2732:	c0 ec       	ldi	r28, 0xC0	; 192
    2734:	d1 e0       	ldi	r29, 0x01	; 1
    2736:	26 e0       	ldi	r18, 0x06	; 6
    2738:	2a 87       	std	Y+10, r18	; 0x0a
	NVM.ADDR0 = address & 0xFF;
    273a:	88 83       	st	Y, r24
	NVM.ADDR1 = address >> 8;
    273c:	99 83       	std	Y+1, r25	; 0x01
	CCP = CCP_IOREG_MODE;
    273e:	88 ed       	ldi	r24, 0xD8	; 216
    2740:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	8b 87       	std	Y+11, r24	; 0x0b
	delay_ms(1);
    2746:	66 ed       	ldi	r22, 0xD6	; 214
    2748:	74 e1       	ldi	r23, 0x14	; 20
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__portable_avr_delay_cycles>
	uint8_t byte = NVM.DATA0;
    2752:	8c 81       	ldd	r24, Y+4	; 0x04
	return byte;
}
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	08 95       	ret

0000275a <system_init>:
	}
}


// Sensor functions
void system_init(void){
    275a:	7f 92       	push	r7
    275c:	8f 92       	push	r8
    275e:	9f 92       	push	r9
    2760:	af 92       	push	r10
    2762:	bf 92       	push	r11
    2764:	cf 92       	push	r12
    2766:	df 92       	push	r13
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    2774:	0e 94 8f 08 	call	0x111e	; 0x111e <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    2778:	6b ea       	ldi	r22, 0xAB	; 171
    277a:	79 e2       	ldi	r23, 0x29	; 41
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__portable_avr_delay_cycles>
	sei();
    2784:	78 94       	sei

	// Initialization of pins
	PORTC.DIR = 0xBC; // makes Port C have pins, 7, 5, 4, 3, and 2 be output (0b10111100)
    2786:	8c eb       	ldi	r24, 0xBC	; 188
    2788:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // enables lo level interrupts
    278c:	87 e0       	ldi	r24, 0x07	; 7
    278e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// Driver Initialization
	cam_init();
    2792:	0e 94 c6 05 	call	0xb8c	; 0xb8c <cam_init>
	data_terminal_init();
    2796:	0e 94 0d 07 	call	0xe1a	; 0xe1a <data_terminal_init>
	delay_ms(500);
    279a:	6b ea       	ldi	r22, 0xAB	; 171
    279c:	70 eb       	ldi	r23, 0xB0	; 176
    279e:	88 e2       	ldi	r24, 0x28	; 40
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__portable_avr_delay_cycles>

	(*GPS_TERMINAL_SERIAL).CTRLA = USART_RXCINTLVL_HI_gc;
}

void xbee_init(void){
	USARTE0.CTRLA = USART_RXCINTLVL_MED_gc;
    27a6:	80 e2       	ldi	r24, 0x20	; 32
    27a8:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	// Driver Initialization
	cam_init();
	data_terminal_init();
	delay_ms(500);
	xbee_init();
	gps_init();
    27ac:	0e 94 1b 09 	call	0x1236	; 0x1236 <gps_init>
	//delay_ms(100);

	thermistor_init();
    27b0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <thermistor_init>
	voltage_init();
    27b4:	0e 94 53 07 	call	0xea6	; 0xea6 <voltage_init>
	spi_init();
    27b8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <spi_init>
	pressure_init();
    27bc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pressure_init>
	//bno_init();
	cam_switch();
    27c0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <cam_switch>
	clock_init();
    27c4:	03 da       	rcall	.-3066   	; 0x1bcc <clock_init>

	release_servo_init();
    27c6:	55 d9       	rcall	.-3414   	; 0x1a72 <release_servo_init>
    27c8:	87 e0       	ldi	r24, 0x07	; 7

	// Check EEPROM
	
	if(eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)^0xFF){
    27ca:	90 e1       	ldi	r25, 0x10	; 16
    27cc:	b0 df       	rcall	.-160    	; 0x272e <eeprom_read>
    27ce:	8f 3f       	cpi	r24, 0xFF	; 255
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <system_init+0x7a>
    27d2:	c6 c1       	rjmp	.+908    	; 0x2b60 <system_init+0x406>
    27d4:	8b e4       	ldi	r24, 0x4B	; 75
		printf("Reading EEPROM\n");
    27d6:	90 e2       	ldi	r25, 0x20	; 32
    27d8:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <puts>
		ground_p = (double) ((uint64_t) ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    27dc:	80 e1       	ldi	r24, 0x10	; 16
    27de:	90 e1       	ldi	r25, 0x10	; 16
    27e0:	a6 df       	rcall	.-180    	; 0x272e <eeprom_read>
    27e2:	c8 2f       	mov	r28, r24
    27e4:	8f e0       	ldi	r24, 0x0F	; 15
    27e6:	90 e1       	ldi	r25, 0x10	; 16
    27e8:	a2 df       	rcall	.-188    	; 0x272e <eeprom_read>
    27ea:	f8 2f       	mov	r31, r24
    27ec:	2c 2f       	mov	r18, r28
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	60 e0       	ldi	r22, 0x00	; 0
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	08 e3       	ldi	r16, 0x38	; 56
    27fe:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    2802:	c2 2f       	mov	r28, r18
    2804:	c3 2e       	mov	r12, r19
    2806:	d4 2e       	mov	r13, r20
    2808:	e5 2e       	mov	r14, r21
    280a:	f6 2e       	mov	r15, r22
    280c:	e7 2f       	mov	r30, r23
    280e:	18 2f       	mov	r17, r24
    2810:	d9 2f       	mov	r29, r25
    2812:	2f 2f       	mov	r18, r31
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	00 e3       	ldi	r16, 0x30	; 48
    2824:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    2828:	c2 2b       	or	r28, r18
    282a:	c3 2a       	or	r12, r19
    282c:	d4 2a       	or	r13, r20
    282e:	e5 2a       	or	r14, r21
    2830:	f6 2a       	or	r15, r22
    2832:	7e 2e       	mov	r7, r30
    2834:	77 2a       	or	r7, r23
    2836:	18 2b       	or	r17, r24
    2838:	d9 2b       	or	r29, r25
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    283a:	8e e0       	ldi	r24, 0x0E	; 14
    283c:	90 e1       	ldi	r25, 0x10	; 16
    283e:	77 df       	rcall	.-274    	; 0x272e <eeprom_read>
    2840:	08 2f       	mov	r16, r24
    2842:	8d e0       	ldi	r24, 0x0D	; 13
    2844:	90 e1       	ldi	r25, 0x10	; 16
    2846:	73 df       	rcall	.-282    	; 0x272e <eeprom_read>
    2848:	88 2e       	mov	r8, r24
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    284a:	8c e0       	ldi	r24, 0x0C	; 12
    284c:	90 e1       	ldi	r25, 0x10	; 16
    284e:	6f df       	rcall	.-290    	; 0x272e <eeprom_read>
    2850:	98 2e       	mov	r9, r24
    2852:	8b e0       	ldi	r24, 0x0B	; 11
    2854:	90 e1       	ldi	r25, 0x10	; 16
    2856:	6b df       	rcall	.-298    	; 0x272e <eeprom_read>
    2858:	a8 2e       	mov	r10, r24
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0)));
    285a:	8a e0       	ldi	r24, 0x0A	; 10
    285c:	90 e1       	ldi	r25, 0x10	; 16
    285e:	67 df       	rcall	.-306    	; 0x272e <eeprom_read>
    2860:	b8 2e       	mov	r11, r24
    2862:	89 e0       	ldi	r24, 0x09	; 9
    2864:	90 e1       	ldi	r25, 0x10	; 16
    2866:	63 df       	rcall	.-314    	; 0x272e <eeprom_read>
    2868:	e8 2f       	mov	r30, r24
    286a:	20 2f       	mov	r18, r16
    286c:	30 e0       	ldi	r19, 0x00	; 0

	// Check EEPROM
	
	if(eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)^0xFF){
		printf("Reading EEPROM\n");
		ground_p = (double) ((uint64_t) ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	50 e0       	ldi	r21, 0x00	; 0
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	08 e2       	ldi	r16, 0x28	; 40
    287c:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    2880:	ce 2b       	or	r28, r30
    2882:	c2 2b       	or	r28, r18
    2884:	c3 2a       	or	r12, r19
    2886:	d4 2a       	or	r13, r20
    2888:	e5 2a       	or	r14, r21
    288a:	f6 2a       	or	r15, r22
    288c:	e7 2f       	mov	r30, r23
    288e:	e7 29       	or	r30, r7
    2890:	18 2b       	or	r17, r24
    2892:	d9 2b       	or	r29, r25
    2894:	28 2d       	mov	r18, r8
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	00 e2       	ldi	r16, 0x20	; 32
    28a6:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    28aa:	c2 2b       	or	r28, r18
    28ac:	c3 2a       	or	r12, r19
    28ae:	d4 2a       	or	r13, r20
    28b0:	e5 2a       	or	r14, r21
    28b2:	f6 2a       	or	r15, r22
    28b4:	e7 2b       	or	r30, r23
    28b6:	18 2b       	or	r17, r24
    28b8:	d9 2b       	or	r29, r25
    28ba:	29 2d       	mov	r18, r9
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	08 e1       	ldi	r16, 0x18	; 24
    28cc:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    28d0:	c2 2b       	or	r28, r18
    28d2:	c3 2a       	or	r12, r19
    28d4:	d4 2a       	or	r13, r20
    28d6:	e5 2a       	or	r14, r21
    28d8:	f6 2a       	or	r15, r22
    28da:	e7 2b       	or	r30, r23
    28dc:	18 2b       	or	r17, r24
    28de:	d9 2b       	or	r29, r25
    28e0:	2a 2d       	mov	r18, r10
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e0       	ldi	r20, 0x00	; 0
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	00 e1       	ldi	r16, 0x10	; 16
    28f2:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    28f6:	c2 2b       	or	r28, r18
    28f8:	c3 2a       	or	r12, r19
    28fa:	d4 2a       	or	r13, r20
    28fc:	e5 2a       	or	r14, r21
    28fe:	f6 2a       	or	r15, r22
    2900:	e7 2b       	or	r30, r23
    2902:	18 2b       	or	r17, r24
    2904:	d9 2b       	or	r29, r25
    2906:	2b 2d       	mov	r18, r11
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	08 e0       	ldi	r16, 0x08	; 8
    2918:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    291c:	2c 2b       	or	r18, r28
    291e:	3c 29       	or	r19, r12
    2920:	4d 29       	or	r20, r13
    2922:	5e 29       	or	r21, r14
    2924:	6f 29       	or	r22, r15
    2926:	7e 2b       	or	r23, r30
    2928:	81 2b       	or	r24, r17
    292a:	9d 2b       	or	r25, r29
    292c:	dc d6       	rcall	.+3512   	; 0x36e6 <__floatundisf>
    292e:	60 93 2b 20 	sts	0x202B, r22	; 0x80202b <ground_p>
    2932:	70 93 2c 20 	sts	0x202C, r23	; 0x80202c <ground_p+0x1>
    2936:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p+0x2>
    293a:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x3>
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0)));
		ground_t = (double) ((uint64_t) ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    293e:	89 e1       	ldi	r24, 0x19	; 25
    2940:	90 e1       	ldi	r25, 0x10	; 16
    2942:	f5 de       	rcall	.-534    	; 0x272e <eeprom_read>
    2944:	c8 2f       	mov	r28, r24
    2946:	88 e1       	ldi	r24, 0x18	; 24
    2948:	90 e1       	ldi	r25, 0x10	; 16
    294a:	f1 de       	rcall	.-542    	; 0x272e <eeprom_read>
    294c:	a8 2f       	mov	r26, r24
    294e:	2c 2f       	mov	r18, r28
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e0       	ldi	r20, 0x00	; 0
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	08 e3       	ldi	r16, 0x38	; 56
    2960:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    2964:	e2 2f       	mov	r30, r18
    2966:	c3 2e       	mov	r12, r19
    2968:	d4 2e       	mov	r13, r20
    296a:	e5 2e       	mov	r14, r21
    296c:	f6 2e       	mov	r15, r22
    296e:	f7 2f       	mov	r31, r23
    2970:	d8 2f       	mov	r29, r24
    2972:	c9 2f       	mov	r28, r25
    2974:	2a 2f       	mov	r18, r26
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	00 e3       	ldi	r16, 0x30	; 48
    2986:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    298a:	1e 2f       	mov	r17, r30
    298c:	12 2b       	or	r17, r18
    298e:	c3 2a       	or	r12, r19
    2990:	d4 2a       	or	r13, r20
    2992:	e5 2a       	or	r14, r21
    2994:	f6 2a       	or	r15, r22
    2996:	7f 2e       	mov	r7, r31
    2998:	77 2a       	or	r7, r23
    299a:	d8 2b       	or	r29, r24
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    299c:	c9 2b       	or	r28, r25
    299e:	87 e1       	ldi	r24, 0x17	; 23
    29a0:	90 e1       	ldi	r25, 0x10	; 16
    29a2:	c5 de       	rcall	.-630    	; 0x272e <eeprom_read>
    29a4:	08 2f       	mov	r16, r24
    29a6:	86 e1       	ldi	r24, 0x16	; 22
    29a8:	90 e1       	ldi	r25, 0x10	; 16
    29aa:	c1 de       	rcall	.-638    	; 0x272e <eeprom_read>
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    29ac:	88 2e       	mov	r8, r24
    29ae:	85 e1       	ldi	r24, 0x15	; 21
    29b0:	90 e1       	ldi	r25, 0x10	; 16
    29b2:	bd de       	rcall	.-646    	; 0x272e <eeprom_read>
    29b4:	98 2e       	mov	r9, r24
    29b6:	84 e1       	ldi	r24, 0x14	; 20
    29b8:	90 e1       	ldi	r25, 0x10	; 16
    29ba:	b9 de       	rcall	.-654    	; 0x272e <eeprom_read>
    29bc:	a8 2e       	mov	r10, r24
    29be:	83 e1       	ldi	r24, 0x13	; 19
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0)));
    29c0:	90 e1       	ldi	r25, 0x10	; 16
    29c2:	b5 de       	rcall	.-662    	; 0x272e <eeprom_read>
    29c4:	b8 2e       	mov	r11, r24
    29c6:	82 e1       	ldi	r24, 0x12	; 18
    29c8:	90 e1       	ldi	r25, 0x10	; 16
    29ca:	b1 de       	rcall	.-670    	; 0x272e <eeprom_read>
    29cc:	e8 2f       	mov	r30, r24
    29ce:	20 2f       	mov	r18, r16
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e0       	ldi	r20, 0x00	; 0
		printf("Reading EEPROM\n");
		ground_p = (double) ((uint64_t) ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0)));
		ground_t = (double) ((uint64_t) ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	08 e2       	ldi	r16, 0x28	; 40
    29e0:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    29e4:	e1 2b       	or	r30, r17
    29e6:	e2 2b       	or	r30, r18
    29e8:	c3 2a       	or	r12, r19
    29ea:	d4 2a       	or	r13, r20
    29ec:	e5 2a       	or	r14, r21
    29ee:	f6 2a       	or	r15, r22
    29f0:	f7 2f       	mov	r31, r23
    29f2:	f7 29       	or	r31, r7
    29f4:	d8 2b       	or	r29, r24
    29f6:	c9 2b       	or	r28, r25
    29f8:	28 2d       	mov	r18, r8
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	60 e0       	ldi	r22, 0x00	; 0
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	00 e2       	ldi	r16, 0x20	; 32
    2a0a:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    2a0e:	e2 2b       	or	r30, r18
    2a10:	c3 2a       	or	r12, r19
    2a12:	d4 2a       	or	r13, r20
    2a14:	e5 2a       	or	r14, r21
    2a16:	f6 2a       	or	r15, r22
    2a18:	f7 2b       	or	r31, r23
    2a1a:	d8 2b       	or	r29, r24
    2a1c:	c9 2b       	or	r28, r25
    2a1e:	29 2d       	mov	r18, r9
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	08 e1       	ldi	r16, 0x18	; 24
    2a30:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    2a34:	e2 2b       	or	r30, r18
    2a36:	c3 2a       	or	r12, r19
    2a38:	d4 2a       	or	r13, r20
    2a3a:	e5 2a       	or	r14, r21
    2a3c:	f6 2a       	or	r15, r22
    2a3e:	f7 2b       	or	r31, r23
    2a40:	d8 2b       	or	r29, r24
    2a42:	c9 2b       	or	r28, r25
    2a44:	2a 2d       	mov	r18, r10
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	70 e0       	ldi	r23, 0x00	; 0
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	00 e1       	ldi	r16, 0x10	; 16
    2a56:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    2a5a:	e2 2b       	or	r30, r18
    2a5c:	c3 2a       	or	r12, r19
    2a5e:	d4 2a       	or	r13, r20
    2a60:	e5 2a       	or	r14, r21
    2a62:	f6 2a       	or	r15, r22
    2a64:	f7 2b       	or	r31, r23
    2a66:	d8 2b       	or	r29, r24
    2a68:	c9 2b       	or	r28, r25
    2a6a:	2b 2d       	mov	r18, r11
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	70 e0       	ldi	r23, 0x00	; 0
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	08 e0       	ldi	r16, 0x08	; 8
    2a7c:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <__ashldi3>
    2a80:	2e 2b       	or	r18, r30
    2a82:	3c 29       	or	r19, r12
    2a84:	4d 29       	or	r20, r13
    2a86:	5e 29       	or	r21, r14
    2a88:	6f 29       	or	r22, r15
    2a8a:	7f 2b       	or	r23, r31
    2a8c:	8d 2b       	or	r24, r29
    2a8e:	9c 2b       	or	r25, r28
    2a90:	2a d6       	rcall	.+3156   	; 0x36e6 <__floatundisf>
    2a92:	60 93 27 20 	sts	0x2027, r22	; 0x802027 <ground_t>
    2a96:	70 93 28 20 	sts	0x2028, r23	; 0x802028 <ground_t+0x1>
    2a9a:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <ground_t+0x2>
    2a9e:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <ground_t+0x3>
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
										 (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0)));
		alt = (double) ((int16_t) (eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE0)));
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e1       	ldi	r25, 0x10	; 16
    2aa6:	43 de       	rcall	.-890    	; 0x272e <eeprom_read>
    2aa8:	c8 2f       	mov	r28, r24
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e1       	ldi	r25, 0x10	; 16
    2aae:	3f de       	rcall	.-898    	; 0x272e <eeprom_read>
    2ab0:	6c 2f       	mov	r22, r28
    2ab2:	70 e0       	ldi	r23, 0x00	; 0
    2ab4:	76 2f       	mov	r23, r22
    2ab6:	66 27       	eor	r22, r22
    2ab8:	68 2b       	or	r22, r24
    2aba:	07 2e       	mov	r0, r23
    2abc:	00 0c       	add	r0, r0
    2abe:	88 0b       	sbc	r24, r24
    2ac0:	99 0b       	sbc	r25, r25
    2ac2:	d6 d5       	rcall	.+2988   	; 0x3670 <__floatsisf>
    2ac4:	60 93 17 21 	sts	0x2117, r22	; 0x802117 <alt>
    2ac8:	70 93 18 21 	sts	0x2118, r23	; 0x802118 <alt+0x1>
    2acc:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <alt+0x2>
    2ad0:	90 93 1a 21 	sts	0x211A, r25	; 0x80211a <alt+0x3>
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
    2ad4:	87 e0       	ldi	r24, 0x07	; 7
    2ad6:	90 e1       	ldi	r25, 0x10	; 16
    2ad8:	2a de       	rcall	.-940    	; 0x272e <eeprom_read>
    2ada:	c8 2f       	mov	r28, r24
    2adc:	86 e0       	ldi	r24, 0x06	; 6
    2ade:	90 e1       	ldi	r25, 0x10	; 16
    2ae0:	26 de       	rcall	.-948    	; 0x272e <eeprom_read>
    2ae2:	2c 2f       	mov	r18, r28
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	32 2f       	mov	r19, r18
    2ae8:	22 27       	eor	r18, r18
    2aea:	28 2b       	or	r18, r24
    2aec:	20 93 27 21 	sts	0x2127, r18	; 0x802127 <timer>
    2af0:	30 93 28 21 	sts	0x2128, r19	; 0x802128 <timer+0x1>
    2af4:	84 e0       	ldi	r24, 0x04	; 4
    2af6:	90 e1       	ldi	r25, 0x10	; 16
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
    2af8:	1a de       	rcall	.-972    	; 0x272e <eeprom_read>
    2afa:	c8 2f       	mov	r28, r24
    2afc:	83 e0       	ldi	r24, 0x03	; 3
    2afe:	90 e1       	ldi	r25, 0x10	; 16
    2b00:	16 de       	rcall	.-980    	; 0x272e <eeprom_read>
    2b02:	2c 2f       	mov	r18, r28
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	32 2f       	mov	r19, r18
    2b08:	22 27       	eor	r18, r18
    2b0a:	28 2b       	or	r18, r24
    2b0c:	20 93 23 21 	sts	0x2123, r18	; 0x802123 <packets>
    2b10:	30 93 24 21 	sts	0x2124, r19	; 0x802124 <packets+0x1>
    2b14:	60 91 27 20 	lds	r22, 0x2027	; 0x802027 <ground_t>
		
		printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
    2b18:	70 91 28 20 	lds	r23, 0x2028	; 0x802028 <ground_t+0x1>
    2b1c:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <ground_t+0x2>
    2b20:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <ground_t+0x3>
    2b24:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <ground_p>
    2b28:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <ground_p+0x1>
    2b2c:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <ground_p+0x2>
    2b30:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <ground_p+0x3>
    2b34:	6a d5       	rcall	.+2772   	; 0x360a <__fixsfsi>
    2b36:	7f 93       	push	r23
    2b38:	6f 93       	push	r22
    2b3a:	c7 01       	movw	r24, r14
    2b3c:	b6 01       	movw	r22, r12
    2b3e:	65 d5       	rcall	.+2762   	; 0x360a <__fixsfsi>
    2b40:	9f 93       	push	r25
    2b42:	8f 93       	push	r24
    2b44:	7f 93       	push	r23
    2b46:	6f 93       	push	r22
    2b48:	8a e5       	ldi	r24, 0x5A	; 90
    2b4a:	90 e2       	ldi	r25, 0x20	; 32
    2b4c:	9f 93       	push	r25
    2b4e:	8f 93       	push	r24
    2b50:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <printf>
    2b54:	8d b7       	in	r24, 0x3d	; 61
    2b56:	9e b7       	in	r25, 0x3e	; 62
    2b58:	08 96       	adiw	r24, 0x08	; 8
    2b5a:	8d bf       	out	0x3d, r24	; 61
    2b5c:	9e bf       	out	0x3e, r25	; 62
    2b5e:	17 c0       	rjmp	.+46     	; 0x2b8e <system_init+0x434>
    2b60:	0e 94 2f 09 	call	0x125e	; 0x125e <get_pressure>
    2b64:	60 93 2b 20 	sts	0x202B, r22	; 0x80202b <ground_p>
	}
	else{
		// Initialization of variables
		ground_p = get_pressure();
    2b68:	70 93 2c 20 	sts	0x202C, r23	; 0x80202c <ground_p+0x1>
    2b6c:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p+0x2>
    2b70:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x3>
    2b74:	83 e3       	ldi	r24, 0x33	; 51
    2b76:	93 e1       	ldi	r25, 0x13	; 19
    2b78:	a5 e9       	ldi	r26, 0x95	; 149
		ground_t = get_temperature();
    2b7a:	b3 e4       	ldi	r27, 0x43	; 67
    2b7c:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    2b80:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    2b84:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    2b88:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    2b8c:	96 da       	rcall	.-2772   	; 0x20ba <eeprom_write_const>
    2b8e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <state_check>

		eeprom_write_const();
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
	}
	
	state_check();
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
}
    2b9a:	ff 90       	pop	r15
    2b9c:	ef 90       	pop	r14
    2b9e:	df 90       	pop	r13
    2ba0:	cf 90       	pop	r12
    2ba2:	bf 90       	pop	r11
    2ba4:	af 90       	pop	r10
    2ba6:	9f 90       	pop	r9
    2ba8:	8f 90       	pop	r8
    2baa:	7f 90       	pop	r7
    2bac:	08 95       	ret

00002bae <eeprom_erase>:
    2bae:	83 e3       	ldi	r24, 0x33	; 51
    2bb0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    2bb6:	e0 ec       	ldi	r30, 0xC0	; 192
    2bb8:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    2bba:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    2bbc:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    2bbe:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	80 32       	cpi	r24, 0x20	; 32
    2bc4:	d9 f7       	brne	.-10     	; 0x2bbc <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}

	NVM.CMD = ERASE_EEPROM;
    2bc6:	e0 ec       	ldi	r30, 0xC0	; 192
    2bc8:	f1 e0       	ldi	r31, 0x01	; 1
    2bca:	80 e3       	ldi	r24, 0x30	; 48
    2bcc:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    2bce:	88 ed       	ldi	r24, 0xD8	; 216
    2bd0:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    2bd6:	87 85       	ldd	r24, Z+15	; 0x0f
    2bd8:	88 23       	and	r24, r24
    2bda:	ec f3       	brlt	.-6      	; 0x2bd6 <eeprom_erase+0x28>
}
    2bdc:	08 95       	ret

00002bde <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    2bde:	e7 df       	rcall	.-50     	; 0x2bae <eeprom_erase>

	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    2be0:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    2be2:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    2be4:	98 ed       	ldi	r25, 0xD8	; 216
    2be6:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    2be8:	91 e0       	ldi	r25, 0x01	; 1
    2bea:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    2bee:	8f bf       	out	0x3f, r24	; 63
    2bf0:	08 95       	ret

00002bf2 <command>:
	TCD1.PER = 184; // 2700hz
	TCD1.CCA = 92;
}

void command(uint8_t c){
	switch(c){
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e1 56       	subi	r30, 0x61	; 97
    2bf8:	f1 09       	sbc	r31, r1
    2bfa:	e3 31       	cpi	r30, 0x13	; 19
    2bfc:	f1 05       	cpc	r31, r1
    2bfe:	f0 f4       	brcc	.+60     	; 0x2c3c <command+0x4a>
    2c00:	88 27       	eor	r24, r24
    2c02:	e2 50       	subi	r30, 0x02	; 2
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	8f 4f       	sbci	r24, 0xFF	; 255
    2c08:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__tablejump2__>
		case RESET:
			reset();
    2c0c:	e8 cf       	rjmp	.-48     	; 0x2bde <reset>
			break;
		case CALIBRATE:
			calibrate();
    2c0e:	08 95       	ret
    2c10:	27 c8       	rjmp	.-4018   	; 0x1c60 <calibrate>
			break;
    2c12:	08 95       	ret
		case CALIBRATE_ALTITUDE:
			cali_alt();
    2c14:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <cali_alt>
			break;
		case CALIBRATE_ANGLE:
			cali_ang();
    2c18:	08 95       	ret
    2c1a:	03 c8       	rjmp	.-4090   	; 0x1c22 <cali_ang>
			break;
    2c1c:	08 95       	ret
	ref_pitch = imu_pitch();
	ref_yaw = imu_heading();
}

void servo_release(void){
	TCD0.CCA = 1200;
    2c1e:	80 eb       	ldi	r24, 0xB0	; 176
    2c20:	94 e0       	ldi	r25, 0x04	; 4
    2c22:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    2c26:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    2c2a:	08 95       	ret
}

void servo_close(void){
	TCD0.CCA = 750;
    2c2c:	8e ee       	ldi	r24, 0xEE	; 238
    2c2e:	92 e0       	ldi	r25, 0x02	; 2
    2c30:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    2c34:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
			break;
		case SERVO_CLOSE:
			servo_close();
			break;
		case PACKET:
			packet();
    2c38:	08 95       	ret
    2c3a:	15 c8       	rjmp	.-4054   	; 0x1c66 <packet>
    2c3c:	08 95       	ret

00002c3e <main>:

char* format = "5343,%i,%i,%i,%li,%i.%i,%i.%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n";


////////////////////////////// Functions ///////////////////////////////
int main(void){
    2c3e:	cf 93       	push	r28
    2c40:	df 93       	push	r29
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	c8 56       	subi	r28, 0x68	; 104
    2c48:	d1 09       	sbc	r29, r1
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	de bf       	out	0x3e, r29	; 62
	system_init();
    2c4e:	85 dd       	rcall	.-1270   	; 0x275a <system_init>
	//delay_ms(100);

	PORTD.DIR |= PIN3_bm;
    2c50:	e0 e6       	ldi	r30, 0x60	; 96
    2c52:	f6 e0       	ldi	r31, 0x06	; 6
    2c54:	80 81       	ld	r24, Z
    2c56:	88 60       	ori	r24, 0x08	; 8
    2c58:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    2c5a:	84 81       	ldd	r24, Z+4	; 0x04
    2c5c:	88 60       	ori	r24, 0x08	; 8
    2c5e:	84 83       	std	Z+4, r24	; 0x04

	//printf("Initialized\n");
	//buzzer_init();

	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    2c60:	14 e1       	ldi	r17, 0x14	; 20
    2c62:	be 01       	movw	r22, r28
    2c64:	6f 5f       	subi	r22, 0xFF	; 255
    2c66:	7f 4f       	sbci	r23, 0xFF	; 255
    2c68:	fb 01       	movw	r30, r22
    2c6a:	81 2f       	mov	r24, r17
    2c6c:	11 92       	st	Z+, r1
    2c6e:	8a 95       	dec	r24
    2c70:	e9 f7       	brne	.-6      	; 0x2c6c <main+0x2e>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    2c72:	4a e0       	ldi	r20, 0x0A	; 10
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	ce 01       	movw	r24, r28
    2c78:	45 96       	adiw	r24, 0x15	; 21
    2c7a:	0e 94 c8 07 	call	0xf90	; 0xf90 <rb16_init>

	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    2c7e:	be 01       	movw	r22, r28
    2c80:	63 5e       	subi	r22, 0xE3	; 227
    2c82:	7f 4f       	sbci	r23, 0xFF	; 255
    2c84:	88 e2       	ldi	r24, 0x28	; 40
    2c86:	fb 01       	movw	r30, r22
    2c88:	11 92       	st	Z+, r1
    2c8a:	8a 95       	dec	r24
    2c8c:	e9 f7       	brne	.-6      	; 0x2c88 <main+0x4a>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    2c8e:	4a e0       	ldi	r20, 0x0A	; 10
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	ce 01       	movw	r24, r28
    2c94:	8b 5b       	subi	r24, 0xBB	; 187
    2c96:	9f 4f       	sbci	r25, 0xFF	; 255
    2c98:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rb32_init>

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    2c9c:	be 01       	movw	r22, r28
    2c9e:	63 5b       	subi	r22, 0xB3	; 179
    2ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca2:	fb 01       	movw	r30, r22
    2ca4:	11 92       	st	Z+, r1
    2ca6:	1a 95       	dec	r17
    2ca8:	e9 f7       	brne	.-6      	; 0x2ca4 <main+0x66>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    2caa:	4a e0       	ldi	r20, 0x0A	; 10
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	ce 01       	movw	r24, r28
    2cb0:	8f 59       	subi	r24, 0x9F	; 159
    2cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb4:	0e 94 c8 07 	call	0xf90	; 0xf90 <rb16_init>

	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    2cb8:	00 e0       	ldi	r16, 0x00	; 0

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	uint8_t cam_initialized = 0;
    2cba:	10 e0       	ldi	r17, 0x00	; 0


	while(1){
		//printf("In Loop\n");
		// Check Sensors
		data_collect(&altitudes,&pressures);
    2cbc:	be 01       	movw	r22, r28
    2cbe:	6b 5b       	subi	r22, 0xBB	; 187
    2cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	45 96       	adiw	r24, 0x15	; 21
    2cc6:	0e 94 27 0c 	call	0x184e	; 0x184e <data_collect>

		state_check();
    2cca:	0e 94 ba 0c 	call	0x1974	; 0x1974 <state_check>

		// IMU Check
		//imu_read();

		//Gives each flight state their unique tasks
		switch(state){
    2cce:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <state>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	31 f0       	breq	.+12     	; 0x2ce2 <main+0xa4>
    2cd6:	c8 f1       	brcs	.+114    	; 0x2d4a <main+0x10c>
    2cd8:	82 30       	cpi	r24, 0x02	; 2
    2cda:	39 f0       	breq	.+14     	; 0x2cea <main+0xac>
    2cdc:	83 30       	cpi	r24, 0x03	; 3
    2cde:	79 f1       	breq	.+94     	; 0x2d3e <main+0x100>
    2ce0:	32 c0       	rjmp	.+100    	; 0x2d46 <main+0x108>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    2ce2:	11 11       	cpse	r17, r1
    2ce4:	32 c0       	rjmp	.+100    	; 0x2d4a <main+0x10c>
					cam_initialized = 1;
    2ce6:	11 e0       	ldi	r17, 0x01	; 1
    2ce8:	30 c0       	rjmp	.+96     	; 0x2d4a <main+0x10c>
					//cam_switch();
				}
				break;
			case 2:
				if(!cam_initialized){
    2cea:	11 11       	cpse	r17, r1
    2cec:	01 c0       	rjmp	.+2      	; 0x2cf0 <main+0xb2>
					cam_initialized = 1;
    2cee:	11 e0       	ldi	r17, 0x01	; 1
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
    2cf0:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <alt>
    2cf4:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <alt+0x1>
    2cf8:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <alt+0x2>
    2cfc:	90 91 1a 21 	lds	r25, 0x211A	; 0x80211a <alt+0x3>
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	41 ee       	ldi	r20, 0xE1	; 225
    2d06:	53 e4       	ldi	r21, 0x43	; 67
    2d08:	af d3       	rcall	.+1886   	; 0x3468 <__subsf3>
    2d0a:	7f d4       	rcall	.+2302   	; 0x360a <__fixsfsi>
    2d0c:	9b 01       	movw	r18, r22
    2d0e:	77 23       	and	r23, r23
    2d10:	24 f4       	brge	.+8      	; 0x2d1a <main+0xdc>
    2d12:	22 27       	eor	r18, r18
    2d14:	33 27       	eor	r19, r19
    2d16:	26 1b       	sub	r18, r22
    2d18:	37 0b       	sbc	r19, r23
    2d1a:	2a 30       	cpi	r18, 0x0A	; 10
    2d1c:	31 05       	cpc	r19, r1
    2d1e:	2c f4       	brge	.+10     	; 0x2d2a <main+0xec>
					release();				// Releases the payload
    2d20:	0e 94 25 09 	call	0x124a	; 0x124a <release>
					hall_sensor_init();		// Starts hall effect sensor to read rpm
    2d24:	0e 94 a3 05 	call	0xb46	; 0xb46 <hall_sensor_init>
    2d28:	10 c0       	rjmp	.+32     	; 0x2d4a <main+0x10c>
				}
				else if(released){
    2d2a:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <released>
    2d2e:	88 23       	and	r24, r24
    2d30:	61 f0       	breq	.+24     	; 0x2d4a <main+0x10c>
					servo_pid(&directions);	// Updates the PID
    2d32:	ce 01       	movw	r24, r28
    2d34:	8f 59       	subi	r24, 0x9F	; 159
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <servo_pid>
    2d3c:	06 c0       	rjmp	.+12     	; 0x2d4a <main+0x10c>
				}
				break;
			case 3:
				if(!buzzer_initialized){
    2d3e:	01 11       	cpse	r16, r1
    2d40:	04 c0       	rjmp	.+8      	; 0x2d4a <main+0x10c>
					//buzzer_init();
					buzzer_initialized = 1;
    2d42:	01 e0       	ldi	r16, 0x01	; 1
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <main+0x10c>
				}
				break;
			default:
				state_check();
    2d46:	0e 94 ba 0c 	call	0x1974	; 0x1974 <state_check>
				break;
		}

		if(time_flag){
    2d4a:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <time_flag>
    2d4e:	88 23       	and	r24, r24
			time_update();
    2d50:	19 f0       	breq	.+6      	; 0x2d58 <main+0x11a>
    2d52:	af da       	rcall	.-2722   	; 0x22b2 <time_update>
			time_flag = 0;
    2d54:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <time_flag>
		}
		if(xbee_flag){
    2d58:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <xbee_flag>
    2d5c:	88 23       	and	r24, r24
			command(xbee_comm);
    2d5e:	39 f0       	breq	.+14     	; 0x2d6e <main+0x130>
    2d60:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <xbee_comm>
    2d64:	46 df       	rcall	.-372    	; 0x2bf2 <command>
			xbee_comm = 0;
    2d66:	10 92 3a 21 	sts	0x213A, r1	; 0x80213a <xbee_comm>
			xbee_flag = 0;
    2d6a:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <xbee_flag>
		}

		data_packets++;
    2d6e:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <data_packets>
    2d72:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <data_packets+0x1>
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <data_packets>
    2d7c:	90 93 26 21 	sts	0x2126, r25	; 0x802126 <data_packets+0x1>
		if(timer != 0){
    2d80:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <timer>
    2d84:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <timer+0x1>
    2d88:	89 2b       	or	r24, r25
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <main+0x150>
    2d8c:	97 cf       	rjmp	.-210    	; 0x2cbc <main+0x7e>
			rate = data_packets / timer;
    2d8e:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <data_packets>
    2d92:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <data_packets+0x1>
    2d96:	60 91 27 21 	lds	r22, 0x2127	; 0x802127 <timer>
    2d9a:	70 91 28 21 	lds	r23, 0x2128	; 0x802128 <timer+0x1>
    2d9e:	31 d7       	rcall	.+3682   	; 0x3c02 <__udivmodhi4>
    2da0:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <rate>
    2da4:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <rate+0x1>
    2da8:	89 cf       	rjmp	.-238    	; 0x2cbc <main+0x7e>

00002daa <__vector_47>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

ISR(TCE0_OVF_vect){
    2daa:	1f 92       	push	r1
    2dac:	0f 92       	push	r0
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1
    2db4:	08 b6       	in	r0, 0x38	; 56
    2db6:	0f 92       	push	r0
    2db8:	18 be       	out	0x38, r1	; 56
    2dba:	8f 93       	push	r24
    2dbc:	9f 93       	push	r25
	timer++;
    2dbe:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <timer>
    2dc2:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <timer+0x1>
    2dc6:	01 96       	adiw	r24, 0x01	; 1
    2dc8:	80 93 27 21 	sts	0x2127, r24	; 0x802127 <timer>
    2dcc:	90 93 28 21 	sts	0x2128, r25	; 0x802128 <timer+0x1>
	time_flag = 1;
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	80 93 48 21 	sts	0x2148, r24	; 0x802148 <time_flag>
}
    2dd6:	9f 91       	pop	r25
    2dd8:	8f 91       	pop	r24
    2dda:	0f 90       	pop	r0
    2ddc:	08 be       	out	0x38, r0	; 56
    2dde:	0f 90       	pop	r0
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	0f 90       	pop	r0
    2de4:	1f 90       	pop	r1
    2de6:	18 95       	reti

00002de8 <__vector_58>:

ISR(USARTE0_RXC_vect){
    2de8:	1f 92       	push	r1
    2dea:	0f 92       	push	r0
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	0f 92       	push	r0
    2df0:	11 24       	eor	r1, r1
    2df2:	08 b6       	in	r0, 0x38	; 56
    2df4:	0f 92       	push	r0
    2df6:	18 be       	out	0x38, r1	; 56
    2df8:	09 b6       	in	r0, 0x39	; 57
    2dfa:	0f 92       	push	r0
    2dfc:	19 be       	out	0x39, r1	; 57
    2dfe:	0b b6       	in	r0, 0x3b	; 59
    2e00:	0f 92       	push	r0
    2e02:	1b be       	out	0x3b, r1	; 59
    2e04:	2f 93       	push	r18
    2e06:	3f 93       	push	r19
    2e08:	4f 93       	push	r20
    2e0a:	5f 93       	push	r21
    2e0c:	6f 93       	push	r22
    2e0e:	7f 93       	push	r23
    2e10:	8f 93       	push	r24
    2e12:	9f 93       	push	r25
    2e14:	af 93       	push	r26
    2e16:	bf 93       	push	r27
    2e18:	ef 93       	push	r30
    2e1a:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    2e1c:	80 ea       	ldi	r24, 0xA0	; 160
    2e1e:	9a e0       	ldi	r25, 0x0A	; 10
    2e20:	0e 94 a1 03 	call	0x742	; 0x742 <usart_getchar>
    2e24:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <xbee_comm>
	xbee_flag = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <xbee_flag>
}
    2e2e:	ff 91       	pop	r31
    2e30:	ef 91       	pop	r30
    2e32:	bf 91       	pop	r27
    2e34:	af 91       	pop	r26
    2e36:	9f 91       	pop	r25
    2e38:	8f 91       	pop	r24
    2e3a:	7f 91       	pop	r23
    2e3c:	6f 91       	pop	r22
    2e3e:	5f 91       	pop	r21
    2e40:	4f 91       	pop	r20
    2e42:	3f 91       	pop	r19
    2e44:	2f 91       	pop	r18
    2e46:	0f 90       	pop	r0
    2e48:	0b be       	out	0x3b, r0	; 59
    2e4a:	0f 90       	pop	r0
    2e4c:	09 be       	out	0x39, r0	; 57
    2e4e:	0f 90       	pop	r0
    2e50:	08 be       	out	0x38, r0	; 56
    2e52:	0f 90       	pop	r0
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	0f 90       	pop	r0
    2e58:	1f 90       	pop	r1
    2e5a:	18 95       	reti

00002e5c <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    2e5c:	1f 92       	push	r1
    2e5e:	0f 92       	push	r0
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	0f 92       	push	r0
    2e64:	11 24       	eor	r1, r1
    2e66:	08 b6       	in	r0, 0x38	; 56
    2e68:	0f 92       	push	r0
    2e6a:	18 be       	out	0x38, r1	; 56
    2e6c:	09 b6       	in	r0, 0x39	; 57
    2e6e:	0f 92       	push	r0
    2e70:	19 be       	out	0x39, r1	; 57
    2e72:	0a b6       	in	r0, 0x3a	; 58
    2e74:	0f 92       	push	r0
    2e76:	1a be       	out	0x3a, r1	; 58
    2e78:	0b b6       	in	r0, 0x3b	; 59
    2e7a:	0f 92       	push	r0
    2e7c:	1b be       	out	0x3b, r1	; 59
    2e7e:	8f 92       	push	r8
    2e80:	9f 92       	push	r9
    2e82:	af 92       	push	r10
    2e84:	bf 92       	push	r11
    2e86:	cf 92       	push	r12
    2e88:	df 92       	push	r13
    2e8a:	ef 92       	push	r14
    2e8c:	ff 92       	push	r15
    2e8e:	1f 93       	push	r17
    2e90:	2f 93       	push	r18
    2e92:	3f 93       	push	r19
    2e94:	4f 93       	push	r20
    2e96:	5f 93       	push	r21
    2e98:	6f 93       	push	r22
    2e9a:	7f 93       	push	r23
    2e9c:	8f 93       	push	r24
    2e9e:	9f 93       	push	r25
    2ea0:	af 93       	push	r26
    2ea2:	bf 93       	push	r27
    2ea4:	ef 93       	push	r30
    2ea6:	ff 93       	push	r31
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <__vector_91+0x52>
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <__vector_91+0x54>
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    2eb4:	80 eb       	ldi	r24, 0xB0	; 176
    2eb6:	99 e0       	ldi	r25, 0x09	; 9
    2eb8:	0e 94 a1 03 	call	0x742	; 0x742 <usart_getchar>
    2ebc:	18 2f       	mov	r17, r24
	//printf("%c",c);

	if(c == (uint8_t) '$'){
    2ebe:	84 32       	cpi	r24, 0x24	; 36
    2ec0:	51 f4       	brne	.+20     	; 0x2ed6 <__vector_91+0x7a>
		writing = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <writing>
		pos = 0;
    2ec8:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <pos>
		word_pos = 0;
    2ecc:	10 92 2b 21 	sts	0x212B, r1	; 0x80212b <word_pos>
		commas = 0;
    2ed0:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <commas>
    2ed4:	5a c2       	rjmp	.+1204   	; 0x338a <__vector_91+0x52e>
	}
	else if(c == (uint8_t) '*'){
    2ed6:	8a 32       	cpi	r24, 0x2A	; 42
    2ed8:	29 f4       	brne	.+10     	; 0x2ee4 <__vector_91+0x88>
		commas = 0;
    2eda:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <commas>
		writing = 0;
    2ede:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <writing>
    2ee2:	53 c2       	rjmp	.+1190   	; 0x338a <__vector_91+0x52e>
	}
	else if(c == (uint8_t) ','){
    2ee4:	8c 32       	cpi	r24, 0x2C	; 44
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <__vector_91+0x8e>
    2ee8:	50 c2       	rjmp	.+1184   	; 0x338a <__vector_91+0x52e>
		gps[0] = 32;
    2eea:	e2 e8       	ldi	r30, 0x82	; 130
    2eec:	f1 e2       	ldi	r31, 0x21	; 33
    2eee:	80 e2       	ldi	r24, 0x20	; 32
    2ef0:	80 83       	st	Z, r24
		if(gps[1] == 32){
    2ef2:	81 81       	ldd	r24, Z+1	; 0x01
    2ef4:	80 32       	cpi	r24, 0x20	; 32
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <__vector_91+0x9e>
    2ef8:	77 c2       	rjmp	.+1262   	; 0x33e8 <__vector_91+0x58c>
			gps[0] = '0';
    2efa:	80 e3       	ldi	r24, 0x30	; 48
    2efc:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <gps>
    2f00:	73 c2       	rjmp	.+1254   	; 0x33e8 <__vector_91+0x58c>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2f02:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <gps>
    2f06:	8e 32       	cpi	r24, 0x2E	; 46
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <__vector_91+0xb0>
    2f0a:	a3 c1       	rjmp	.+838    	; 0x3252 <__vector_91+0x3f6>
    2f0c:	a9 c1       	rjmp	.+850    	; 0x3260 <__vector_91+0x404>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2f0e:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <gps>
    2f12:	8e 32       	cpi	r24, 0x2E	; 46
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <__vector_91+0xbc>
    2f16:	ef c0       	rjmp	.+478    	; 0x30f6 <__vector_91+0x29a>
    2f18:	f5 c0       	rjmp	.+490    	; 0x3104 <__vector_91+0x2a8>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2f1a:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <gps>
    2f1e:	8e 32       	cpi	r24, 0x2E	; 46
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <__vector_91+0xc8>
    2f22:	52 c0       	rjmp	.+164    	; 0x2fc8 <__vector_91+0x16c>
    2f24:	58 c0       	rjmp	.+176    	; 0x2fd6 <__vector_91+0x17a>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2f26:	91 91       	ld	r25, Z+
    2f28:	9e 32       	cpi	r25, 0x2E	; 46
    2f2a:	29 f4       	brne	.+10     	; 0x2f36 <__vector_91+0xda>
    2f2c:	01 c0       	rjmp	.+2      	; 0x2f30 <__vector_91+0xd4>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2f30:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <idx>
						break;
    2f34:	03 c0       	rjmp	.+6      	; 0x2f3c <__vector_91+0xe0>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2f36:	8f 5f       	subi	r24, 0xFF	; 255
    2f38:	8f 30       	cpi	r24, 0x0F	; 15
    2f3a:	a9 f7       	brne	.-22     	; 0x2f26 <__vector_91+0xca>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2f3c:	e0 91 29 21 	lds	r30, 0x2129	; 0x802129 <idx>
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	ee 57       	subi	r30, 0x7E	; 126
    2f44:	fe 4d       	sbci	r31, 0xDE	; 222
    2f46:	80 e2       	ldi	r24, 0x20	; 32
    2f48:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2f4a:	20 91 29 21 	lds	r18, 0x2129	; 0x802129 <idx>
    2f4e:	2f 5f       	subi	r18, 0xFF	; 255
    2f50:	2f 30       	cpi	r18, 0x0F	; 15
    2f52:	c8 f4       	brcc	.+50     	; 0x2f86 <__vector_91+0x12a>
					if(gps[i] == 32){
    2f54:	82 2f       	mov	r24, r18
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	fc 01       	movw	r30, r24
    2f5a:	ee 57       	subi	r30, 0x7E	; 126
    2f5c:	fe 4d       	sbci	r31, 0xDE	; 222
    2f5e:	30 81       	ld	r19, Z
    2f60:	30 32       	cpi	r19, 0x20	; 32
    2f62:	89 f0       	breq	.+34     	; 0x2f86 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    2f64:	40 e2       	ldi	r20, 0x20	; 32
    2f66:	08 c0       	rjmp	.+16     	; 0x2f78 <__vector_91+0x11c>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2f68:	82 2f       	mov	r24, r18
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	ee 57       	subi	r30, 0x7E	; 126
    2f70:	fe 4d       	sbci	r31, 0xDE	; 222
    2f72:	30 81       	ld	r19, Z
    2f74:	30 32       	cpi	r19, 0x20	; 32
    2f76:	39 f0       	breq	.+14     	; 0x2f86 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    2f78:	fc 01       	movw	r30, r24
    2f7a:	ee 57       	subi	r30, 0x7E	; 126
    2f7c:	fe 4d       	sbci	r31, 0xDE	; 222
    2f7e:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2f80:	2f 5f       	subi	r18, 0xFF	; 255
    2f82:	2f 30       	cpi	r18, 0x0F	; 15
    2f84:	89 f7       	brne	.-30     	; 0x2f68 <__vector_91+0x10c>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    2f86:	ce 01       	movw	r24, r28
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	9f 93       	push	r25
    2f8c:	8f 93       	push	r24
    2f8e:	87 e8       	ldi	r24, 0x87	; 135
    2f90:	90 e2       	ldi	r25, 0x20	; 32
    2f92:	9f 93       	push	r25
    2f94:	8f 93       	push	r24
    2f96:	82 e8       	ldi	r24, 0x82	; 130
    2f98:	91 e2       	ldi	r25, 0x21	; 33
    2f9a:	9f 93       	push	r25
    2f9c:	8f 93       	push	r24
    2f9e:	8b d7       	rcall	.+3862   	; 0x3eb6 <sscanf>
				gps_t = (double) val;
    2fa0:	69 81       	ldd	r22, Y+1	; 0x01
    2fa2:	7a 81       	ldd	r23, Y+2	; 0x02
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	63 d3       	rcall	.+1734   	; 0x3670 <__floatsisf>
    2faa:	60 93 0b 21 	sts	0x210B, r22	; 0x80210b <gps_t>
    2fae:	70 93 0c 21 	sts	0x210C, r23	; 0x80210c <gps_t+0x1>
    2fb2:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <gps_t+0x2>
    2fb6:	90 93 0e 21 	sts	0x210E, r25	; 0x80210e <gps_t+0x3>
				break;
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	c3 c1       	rjmp	.+902    	; 0x334e <__vector_91+0x4f2>
    2fc8:	e3 e8       	ldi	r30, 0x83	; 131
    2fca:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2fce:	91 91       	ld	r25, Z+
    2fd0:	9e 32       	cpi	r25, 0x2E	; 46
    2fd2:	29 f4       	brne	.+10     	; 0x2fde <__vector_91+0x182>
    2fd4:	01 c0       	rjmp	.+2      	; 0x2fd8 <__vector_91+0x17c>
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2fd8:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <idx>
						break;
    2fdc:	03 c0       	rjmp	.+6      	; 0x2fe4 <__vector_91+0x188>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2fde:	8f 5f       	subi	r24, 0xFF	; 255
    2fe0:	8f 30       	cpi	r24, 0x0F	; 15
    2fe2:	a9 f7       	brne	.-22     	; 0x2fce <__vector_91+0x172>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2fe4:	e0 91 29 21 	lds	r30, 0x2129	; 0x802129 <idx>
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	ee 57       	subi	r30, 0x7E	; 126
    2fec:	fe 4d       	sbci	r31, 0xDE	; 222
    2fee:	80 e2       	ldi	r24, 0x20	; 32
    2ff0:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2ff2:	20 91 29 21 	lds	r18, 0x2129	; 0x802129 <idx>
    2ff6:	2f 5f       	subi	r18, 0xFF	; 255
    2ff8:	2f 30       	cpi	r18, 0x0F	; 15
    2ffa:	08 f5       	brcc	.+66     	; 0x303e <__vector_91+0x1e2>
					if(gps[i] == 32){
    2ffc:	82 2f       	mov	r24, r18
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	fc 01       	movw	r30, r24
    3002:	ee 57       	subi	r30, 0x7E	; 126
    3004:	fe 4d       	sbci	r31, 0xDE	; 222
    3006:	30 81       	ld	r19, Z
    3008:	30 32       	cpi	r19, 0x20	; 32
    300a:	c9 f0       	breq	.+50     	; 0x303e <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    300c:	50 e2       	ldi	r21, 0x20	; 32
    300e:	08 c0       	rjmp	.+16     	; 0x3020 <__vector_91+0x1c4>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    3010:	82 2f       	mov	r24, r18
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	fc 01       	movw	r30, r24
    3016:	ee 57       	subi	r30, 0x7E	; 126
    3018:	fe 4d       	sbci	r31, 0xDE	; 222
    301a:	30 81       	ld	r19, Z
    301c:	30 32       	cpi	r19, 0x20	; 32
    301e:	79 f0       	breq	.+30     	; 0x303e <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
    3020:	40 91 29 21 	lds	r20, 0x2129	; 0x802129 <idx>
    3024:	fc 01       	movw	r30, r24
    3026:	e4 1b       	sub	r30, r20
    3028:	f1 09       	sbc	r31, r1
    302a:	e0 57       	subi	r30, 0x70	; 112
    302c:	fe 4d       	sbci	r31, 0xDE	; 222
    302e:	30 83       	st	Z, r19
					gps[i] = 32;
    3030:	fc 01       	movw	r30, r24
    3032:	ee 57       	subi	r30, 0x7E	; 126
    3034:	fe 4d       	sbci	r31, 0xDE	; 222
    3036:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    3038:	2f 5f       	subi	r18, 0xFF	; 255
    303a:	2f 30       	cpi	r18, 0x0F	; 15
    303c:	49 f7       	brne	.-46     	; 0x3010 <__vector_91+0x1b4>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    303e:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <dec>
    3042:	80 32       	cpi	r24, 0x20	; 32
    3044:	19 f4       	brne	.+6      	; 0x304c <__vector_91+0x1f0>
					dec[0] = '0';
    3046:	80 e3       	ldi	r24, 0x30	; 48
    3048:	80 93 91 21 	sts	0x2191, r24	; 0x802191 <dec>
				}
				sscanf(gps,"%ld",&val);
    304c:	ce 01       	movw	r24, r28
    304e:	01 96       	adiw	r24, 0x01	; 1
    3050:	9f 93       	push	r25
    3052:	8f 93       	push	r24
    3054:	87 e8       	ldi	r24, 0x87	; 135
    3056:	90 e2       	ldi	r25, 0x20	; 32
    3058:	9f 93       	push	r25
    305a:	8f 93       	push	r24
    305c:	82 e8       	ldi	r24, 0x82	; 130
    305e:	91 e2       	ldi	r25, 0x21	; 33
    3060:	9f 93       	push	r25
    3062:	8f 93       	push	r24
    3064:	28 d7       	rcall	.+3664   	; 0x3eb6 <sscanf>
				sscanf(dec,"%d",&val2);
    3066:	ce 01       	movw	r24, r28
    3068:	05 96       	adiw	r24, 0x05	; 5
    306a:	9f 93       	push	r25
    306c:	8f 93       	push	r24
    306e:	8b e8       	ldi	r24, 0x8B	; 139
    3070:	90 e2       	ldi	r25, 0x20	; 32
    3072:	9f 93       	push	r25
    3074:	8f 93       	push	r24
    3076:	81 e9       	ldi	r24, 0x91	; 145
    3078:	91 e2       	ldi	r25, 0x21	; 33
    307a:	9f 93       	push	r25
    307c:	8f 93       	push	r24
    307e:	1b d7       	rcall	.+3638   	; 0x3eb6 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    3080:	89 80       	ldd	r8, Y+1	; 0x01
    3082:	9a 80       	ldd	r9, Y+2	; 0x02
    3084:	ab 80       	ldd	r10, Y+3	; 0x03
    3086:	bc 80       	ldd	r11, Y+4	; 0x04
    3088:	6d 81       	ldd	r22, Y+5	; 0x05
    308a:	7e 81       	ldd	r23, Y+6	; 0x06
    308c:	07 2e       	mov	r0, r23
    308e:	00 0c       	add	r0, r0
    3090:	88 0b       	sbc	r24, r24
    3092:	99 0b       	sbc	r25, r25
    3094:	ed d2       	rcall	.+1498   	; 0x3670 <__floatsisf>
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e4       	ldi	r19, 0x40	; 64
    309a:	4c e1       	ldi	r20, 0x1C	; 28
    309c:	56 e4       	ldi	r21, 0x46	; 70
    309e:	4d d2       	rcall	.+1178   	; 0x353a <__divsf3>
    30a0:	6b 01       	movw	r12, r22
    30a2:	7c 01       	movw	r14, r24
    30a4:	c5 01       	movw	r24, r10
    30a6:	b4 01       	movw	r22, r8
    30a8:	24 e6       	ldi	r18, 0x64	; 100
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	f1 d5       	rcall	.+3042   	; 0x3c94 <__divmodsi4>
    30b2:	49 01       	movw	r8, r18
    30b4:	5a 01       	movw	r10, r20
    30b6:	dc d2       	rcall	.+1464   	; 0x3670 <__floatsisf>
    30b8:	9b 01       	movw	r18, r22
    30ba:	ac 01       	movw	r20, r24
    30bc:	c7 01       	movw	r24, r14
    30be:	b6 01       	movw	r22, r12
    30c0:	d4 d1       	rcall	.+936    	; 0x346a <__addsf3>
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e7       	ldi	r20, 0x70	; 112
    30c8:	52 e4       	ldi	r21, 0x42	; 66
    30ca:	37 d2       	rcall	.+1134   	; 0x353a <__divsf3>
    30cc:	6b 01       	movw	r12, r22
    30ce:	7c 01       	movw	r14, r24
    30d0:	c5 01       	movw	r24, r10
    30d2:	b4 01       	movw	r22, r8
    30d4:	cd d2       	rcall	.+1434   	; 0x3670 <__floatsisf>
    30d6:	9b 01       	movw	r18, r22
    30d8:	ac 01       	movw	r20, r24
    30da:	c7 01       	movw	r24, r14
    30dc:	b6 01       	movw	r22, r12
    30de:	c5 d1       	rcall	.+906    	; 0x346a <__addsf3>
    30e0:	60 93 07 21 	sts	0x2107, r22	; 0x802107 <gps_lat>
    30e4:	70 93 08 21 	sts	0x2108, r23	; 0x802108 <gps_lat+0x1>
    30e8:	80 93 09 21 	sts	0x2109, r24	; 0x802109 <gps_lat+0x2>
    30ec:	90 93 0a 21 	sts	0x210A, r25	; 0x80210a <gps_lat+0x3>
				break;
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	2c c1       	rjmp	.+600    	; 0x334e <__vector_91+0x4f2>
    30f6:	e3 e8       	ldi	r30, 0x83	; 131
    30f8:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    30fa:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    30fc:	91 91       	ld	r25, Z+
    30fe:	9e 32       	cpi	r25, 0x2E	; 46
    3100:	29 f4       	brne	.+10     	; 0x310c <__vector_91+0x2b0>
    3102:	01 c0       	rjmp	.+2      	; 0x3106 <__vector_91+0x2aa>
    3104:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    3106:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <idx>
						break;
    310a:	03 c0       	rjmp	.+6      	; 0x3112 <__vector_91+0x2b6>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    310c:	8f 5f       	subi	r24, 0xFF	; 255
    310e:	8f 30       	cpi	r24, 0x0F	; 15
    3110:	a9 f7       	brne	.-22     	; 0x30fc <__vector_91+0x2a0>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    3112:	e0 91 29 21 	lds	r30, 0x2129	; 0x802129 <idx>
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	ee 57       	subi	r30, 0x7E	; 126
    311a:	fe 4d       	sbci	r31, 0xDE	; 222
    311c:	80 e2       	ldi	r24, 0x20	; 32
    311e:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    3120:	20 91 29 21 	lds	r18, 0x2129	; 0x802129 <idx>
    3124:	2f 5f       	subi	r18, 0xFF	; 255
    3126:	2f 30       	cpi	r18, 0x0F	; 15
    3128:	08 f5       	brcc	.+66     	; 0x316c <__vector_91+0x310>
					if(gps[i] == 32){
    312a:	82 2f       	mov	r24, r18
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	fc 01       	movw	r30, r24
    3130:	ee 57       	subi	r30, 0x7E	; 126
    3132:	fe 4d       	sbci	r31, 0xDE	; 222
    3134:	30 81       	ld	r19, Z
    3136:	30 32       	cpi	r19, 0x20	; 32
    3138:	c9 f0       	breq	.+50     	; 0x316c <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    313a:	50 e2       	ldi	r21, 0x20	; 32
    313c:	08 c0       	rjmp	.+16     	; 0x314e <__vector_91+0x2f2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    313e:	82 2f       	mov	r24, r18
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	fc 01       	movw	r30, r24
    3144:	ee 57       	subi	r30, 0x7E	; 126
    3146:	fe 4d       	sbci	r31, 0xDE	; 222
    3148:	30 81       	ld	r19, Z
    314a:	30 32       	cpi	r19, 0x20	; 32
    314c:	79 f0       	breq	.+30     	; 0x316c <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
    314e:	40 91 29 21 	lds	r20, 0x2129	; 0x802129 <idx>
    3152:	fc 01       	movw	r30, r24
    3154:	e4 1b       	sub	r30, r20
    3156:	f1 09       	sbc	r31, r1
    3158:	e0 57       	subi	r30, 0x70	; 112
    315a:	fe 4d       	sbci	r31, 0xDE	; 222
    315c:	30 83       	st	Z, r19
					gps[i] = 32;
    315e:	fc 01       	movw	r30, r24
    3160:	ee 57       	subi	r30, 0x7E	; 126
    3162:	fe 4d       	sbci	r31, 0xDE	; 222
    3164:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    3166:	2f 5f       	subi	r18, 0xFF	; 255
    3168:	2f 30       	cpi	r18, 0x0F	; 15
    316a:	49 f7       	brne	.-46     	; 0x313e <__vector_91+0x2e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    316c:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <dec>
    3170:	80 32       	cpi	r24, 0x20	; 32
    3172:	19 f4       	brne	.+6      	; 0x317a <__vector_91+0x31e>
					dec[0] = '0';
    3174:	80 e3       	ldi	r24, 0x30	; 48
    3176:	80 93 91 21 	sts	0x2191, r24	; 0x802191 <dec>
				}
				sscanf(gps,"%ld",&val);
    317a:	ce 01       	movw	r24, r28
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	9f 93       	push	r25
    3180:	8f 93       	push	r24
    3182:	87 e8       	ldi	r24, 0x87	; 135
    3184:	90 e2       	ldi	r25, 0x20	; 32
    3186:	9f 93       	push	r25
    3188:	8f 93       	push	r24
    318a:	82 e8       	ldi	r24, 0x82	; 130
    318c:	91 e2       	ldi	r25, 0x21	; 33
    318e:	9f 93       	push	r25
    3190:	8f 93       	push	r24
    3192:	91 d6       	rcall	.+3362   	; 0x3eb6 <sscanf>
				sscanf(dec,"%d",&val2);
    3194:	ce 01       	movw	r24, r28
    3196:	05 96       	adiw	r24, 0x05	; 5
    3198:	9f 93       	push	r25
    319a:	8f 93       	push	r24
    319c:	8b e8       	ldi	r24, 0x8B	; 139
    319e:	90 e2       	ldi	r25, 0x20	; 32
    31a0:	9f 93       	push	r25
    31a2:	8f 93       	push	r24
    31a4:	81 e9       	ldi	r24, 0x91	; 145
    31a6:	91 e2       	ldi	r25, 0x21	; 33
    31a8:	9f 93       	push	r25
    31aa:	8f 93       	push	r24
    31ac:	84 d6       	rcall	.+3336   	; 0x3eb6 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    31ae:	89 80       	ldd	r8, Y+1	; 0x01
    31b0:	9a 80       	ldd	r9, Y+2	; 0x02
    31b2:	ab 80       	ldd	r10, Y+3	; 0x03
    31b4:	bc 80       	ldd	r11, Y+4	; 0x04
    31b6:	6d 81       	ldd	r22, Y+5	; 0x05
    31b8:	7e 81       	ldd	r23, Y+6	; 0x06
    31ba:	07 2e       	mov	r0, r23
    31bc:	00 0c       	add	r0, r0
    31be:	88 0b       	sbc	r24, r24
    31c0:	99 0b       	sbc	r25, r25
    31c2:	56 d2       	rcall	.+1196   	; 0x3670 <__floatsisf>
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e4       	ldi	r19, 0x40	; 64
    31c8:	4c e1       	ldi	r20, 0x1C	; 28
    31ca:	56 e4       	ldi	r21, 0x46	; 70
    31cc:	b6 d1       	rcall	.+876    	; 0x353a <__divsf3>
    31ce:	6b 01       	movw	r12, r22
    31d0:	7c 01       	movw	r14, r24
    31d2:	c5 01       	movw	r24, r10
    31d4:	b4 01       	movw	r22, r8
    31d6:	24 e6       	ldi	r18, 0x64	; 100
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	50 e0       	ldi	r21, 0x00	; 0
    31de:	5a d5       	rcall	.+2740   	; 0x3c94 <__divmodsi4>
    31e0:	49 01       	movw	r8, r18
    31e2:	5a 01       	movw	r10, r20
    31e4:	45 d2       	rcall	.+1162   	; 0x3670 <__floatsisf>
    31e6:	9b 01       	movw	r18, r22
    31e8:	ac 01       	movw	r20, r24
    31ea:	c7 01       	movw	r24, r14
    31ec:	b6 01       	movw	r22, r12
    31ee:	3d d1       	rcall	.+634    	; 0x346a <__addsf3>
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e7       	ldi	r20, 0x70	; 112
    31f6:	52 e4       	ldi	r21, 0x42	; 66
    31f8:	a0 d1       	rcall	.+832    	; 0x353a <__divsf3>
    31fa:	6b 01       	movw	r12, r22
    31fc:	7c 01       	movw	r14, r24
    31fe:	c5 01       	movw	r24, r10
    3200:	b4 01       	movw	r22, r8
    3202:	36 d2       	rcall	.+1132   	; 0x3670 <__floatsisf>
    3204:	9b 01       	movw	r18, r22
    3206:	ac 01       	movw	r20, r24
    3208:	c7 01       	movw	r24, r14
    320a:	b6 01       	movw	r22, r12
    320c:	2e d1       	rcall	.+604    	; 0x346a <__addsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	b0 58       	subi	r27, 0x80	; 128
    3214:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <gps_long>
    3218:	90 93 04 21 	sts	0x2104, r25	; 0x802104 <gps_long+0x1>
    321c:	a0 93 05 21 	sts	0x2105, r26	; 0x802105 <gps_long+0x2>
    3220:	b0 93 06 21 	sts	0x2106, r27	; 0x802106 <gps_long+0x3>
    3224:	cd bf       	out	0x3d, r28	; 61
				break;
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	92 c0       	rjmp	.+292    	; 0x334e <__vector_91+0x4f2>
    322a:	8d ef       	ldi	r24, 0xFD	; 253
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    322c:	90 e2       	ldi	r25, 0x20	; 32
    322e:	9f 93       	push	r25
    3230:	8f 93       	push	r24
    3232:	8b e8       	ldi	r24, 0x8B	; 139
    3234:	90 e2       	ldi	r25, 0x20	; 32
    3236:	9f 93       	push	r25
    3238:	8f 93       	push	r24
    323a:	82 e8       	ldi	r24, 0x82	; 130
    323c:	91 e2       	ldi	r25, 0x21	; 33
    323e:	9f 93       	push	r25
    3240:	8f 93       	push	r24
    3242:	39 d6       	rcall	.+3186   	; 0x3eb6 <sscanf>
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
				break;
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	7e c0       	rjmp	.+252    	; 0x334e <__vector_91+0x4f2>
    3252:	e3 e8       	ldi	r30, 0x83	; 131
    3254:	f1 e2       	ldi	r31, 0x21	; 33
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    325a:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    325c:	29 f4       	brne	.+10     	; 0x3268 <__vector_91+0x40c>
    325e:	01 c0       	rjmp	.+2      	; 0x3262 <__vector_91+0x406>
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <idx>
						idx = i;
    3266:	03 c0       	rjmp	.+6      	; 0x326e <__vector_91+0x412>
    3268:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    326a:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    326c:	a9 f7       	brne	.-22     	; 0x3258 <__vector_91+0x3fc>
    326e:	e0 91 29 21 	lds	r30, 0x2129	; 0x802129 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	ee 57       	subi	r30, 0x7E	; 126
    3276:	fe 4d       	sbci	r31, 0xDE	; 222
    3278:	80 e2       	ldi	r24, 0x20	; 32
    327a:	80 83       	st	Z, r24
    327c:	20 91 29 21 	lds	r18, 0x2129	; 0x802129 <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    3280:	2f 5f       	subi	r18, 0xFF	; 255
    3282:	2f 30       	cpi	r18, 0x0F	; 15
    3284:	08 f5       	brcc	.+66     	; 0x32c8 <__vector_91+0x46c>
    3286:	82 2f       	mov	r24, r18
    3288:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    328a:	fc 01       	movw	r30, r24
    328c:	ee 57       	subi	r30, 0x7E	; 126
    328e:	fe 4d       	sbci	r31, 0xDE	; 222
    3290:	30 81       	ld	r19, Z
    3292:	30 32       	cpi	r19, 0x20	; 32
    3294:	c9 f0       	breq	.+50     	; 0x32c8 <__vector_91+0x46c>
    3296:	50 e2       	ldi	r21, 0x20	; 32
    3298:	08 c0       	rjmp	.+16     	; 0x32aa <__vector_91+0x44e>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    329a:	82 2f       	mov	r24, r18
    329c:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    329e:	fc 01       	movw	r30, r24
    32a0:	ee 57       	subi	r30, 0x7E	; 126
    32a2:	fe 4d       	sbci	r31, 0xDE	; 222
    32a4:	30 81       	ld	r19, Z
    32a6:	30 32       	cpi	r19, 0x20	; 32
    32a8:	79 f0       	breq	.+30     	; 0x32c8 <__vector_91+0x46c>
    32aa:	40 91 29 21 	lds	r20, 0x2129	; 0x802129 <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    32ae:	fc 01       	movw	r30, r24
    32b0:	e4 1b       	sub	r30, r20
    32b2:	f1 09       	sbc	r31, r1
    32b4:	e0 57       	subi	r30, 0x70	; 112
    32b6:	fe 4d       	sbci	r31, 0xDE	; 222
    32b8:	30 83       	st	Z, r19
    32ba:	fc 01       	movw	r30, r24
    32bc:	ee 57       	subi	r30, 0x7E	; 126
					gps[i] = 32;
    32be:	fe 4d       	sbci	r31, 0xDE	; 222
    32c0:	50 83       	st	Z, r21
    32c2:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    32c4:	2f 30       	cpi	r18, 0x0F	; 15
    32c6:	49 f7       	brne	.-46     	; 0x329a <__vector_91+0x43e>
    32c8:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    32cc:	80 32       	cpi	r24, 0x20	; 32
    32ce:	19 f4       	brne	.+6      	; 0x32d6 <__vector_91+0x47a>
    32d0:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    32d2:	80 93 91 21 	sts	0x2191, r24	; 0x802191 <dec>
    32d6:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    32d8:	01 96       	adiw	r24, 0x01	; 1
    32da:	9f 93       	push	r25
    32dc:	8f 93       	push	r24
    32de:	87 e8       	ldi	r24, 0x87	; 135
    32e0:	90 e2       	ldi	r25, 0x20	; 32
    32e2:	9f 93       	push	r25
    32e4:	8f 93       	push	r24
    32e6:	82 e8       	ldi	r24, 0x82	; 130
    32e8:	91 e2       	ldi	r25, 0x21	; 33
    32ea:	9f 93       	push	r25
    32ec:	8f 93       	push	r24
    32ee:	e3 d5       	rcall	.+3014   	; 0x3eb6 <sscanf>
				sscanf(dec,"%d",&val2);
    32f0:	ce 01       	movw	r24, r28
    32f2:	05 96       	adiw	r24, 0x05	; 5
    32f4:	9f 93       	push	r25
    32f6:	8f 93       	push	r24
    32f8:	8b e8       	ldi	r24, 0x8B	; 139
    32fa:	90 e2       	ldi	r25, 0x20	; 32
    32fc:	9f 93       	push	r25
    32fe:	8f 93       	push	r24
    3300:	81 e9       	ldi	r24, 0x91	; 145
    3302:	91 e2       	ldi	r25, 0x21	; 33
    3304:	9f 93       	push	r25
    3306:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    3308:	d6 d5       	rcall	.+2988   	; 0x3eb6 <sscanf>
    330a:	69 81       	ldd	r22, Y+1	; 0x01
    330c:	7a 81       	ldd	r23, Y+2	; 0x02
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	ae d1       	rcall	.+860    	; 0x3670 <__floatsisf>
    3314:	6b 01       	movw	r12, r22
    3316:	7c 01       	movw	r14, r24
    3318:	6d 81       	ldd	r22, Y+5	; 0x05
    331a:	7e 81       	ldd	r23, Y+6	; 0x06
    331c:	07 2e       	mov	r0, r23
    331e:	00 0c       	add	r0, r0
    3320:	88 0b       	sbc	r24, r24
    3322:	99 0b       	sbc	r25, r25
    3324:	a5 d1       	rcall	.+842    	; 0x3670 <__floatsisf>
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	05 d1       	rcall	.+522    	; 0x353a <__divsf3>
    3330:	9b 01       	movw	r18, r22
    3332:	ac 01       	movw	r20, r24
    3334:	c7 01       	movw	r24, r14
    3336:	b6 01       	movw	r22, r12
    3338:	98 d0       	rcall	.+304    	; 0x346a <__addsf3>
    333a:	60 93 ff 20 	sts	0x20FF, r22	; 0x8020ff <gps_alt>
    333e:	70 93 00 21 	sts	0x2100, r23	; 0x802100 <gps_alt+0x1>
    3342:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <gps_alt+0x2>
    3346:	90 93 02 21 	sts	0x2102, r25	; 0x802102 <gps_alt+0x3>
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <writing>
				break;
    3352:	88 23       	and	r24, r24
		}

		if(writing){
    3354:	d1 f0       	breq	.+52     	; 0x338a <__vector_91+0x52e>
    3356:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <idx>
    335a:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <commas>
			idx = 0;
    335e:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    3360:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <commas>
    3364:	10 92 2b 21 	sts	0x212B, r1	; 0x80212b <word_pos>
    3368:	e2 e8       	ldi	r30, 0x82	; 130
			word_pos = 0;
    336a:	f1 e2       	ldi	r31, 0x21	; 33
    336c:	21 e9       	ldi	r18, 0x91	; 145
    336e:	31 e2       	ldi	r19, 0x21	; 33
    3370:	80 e2       	ldi	r24, 0x20	; 32
    3372:	81 93       	st	Z+, r24
    3374:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    3376:	3f 07       	cpc	r19, r31
    3378:	e1 f7       	brne	.-8      	; 0x3372 <__vector_91+0x516>

		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    337a:	e1 e9       	ldi	r30, 0x91	; 145
    337c:	f1 e2       	ldi	r31, 0x21	; 33
    337e:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    3380:	80 83       	st	Z, r24
    3382:	81 83       	std	Z+1, r24	; 0x01
    3384:	82 83       	std	Z+2, r24	; 0x02
    3386:	83 83       	std	Z+3, r24	; 0x03
    3388:	84 83       	std	Z+4, r24	; 0x04
    338a:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <writing>
    338e:	88 23       	and	r24, r24
			}
		}
	}

	if(writing){
    3390:	09 f4       	brne	.+2      	; 0x3394 <__vector_91+0x538>
    3392:	43 c0       	rjmp	.+134    	; 0x341a <__vector_91+0x5be>
    3394:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <pos>
    3398:	83 30       	cpi	r24, 0x03	; 3
		switch(pos){
    339a:	19 f0       	breq	.+6      	; 0x33a2 <__vector_91+0x546>
    339c:	84 30       	cpi	r24, 0x04	; 4
    339e:	31 f0       	breq	.+12     	; 0x33ac <__vector_91+0x550>
    33a0:	09 c0       	rjmp	.+18     	; 0x33b4 <__vector_91+0x558>
    33a2:	17 34       	cpi	r17, 0x47	; 71
    33a4:	39 f0       	breq	.+14     	; 0x33b4 <__vector_91+0x558>
    33a6:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <writing>
			case 3:
				if(c != 'G'){
    33aa:	04 c0       	rjmp	.+8      	; 0x33b4 <__vector_91+0x558>
					writing = 0;
    33ac:	17 34       	cpi	r17, 0x47	; 71
    33ae:	11 f0       	breq	.+4      	; 0x33b4 <__vector_91+0x558>
    33b0:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <writing>
				}
				break;

			case 4:
				if(c != 'G'){
    33b4:	e0 91 2b 21 	lds	r30, 0x212B	; 0x80212b <word_pos>
					writing = 0;
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
				}
				break;
		}
		gps[word_pos] = c;
    33ba:	ee 57       	subi	r30, 0x7E	; 126
    33bc:	fe 4d       	sbci	r31, 0xDE	; 222
    33be:	10 83       	st	Z, r17
    33c0:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <word_pos>
    33c4:	8f 5f       	subi	r24, 0xFF	; 255
		word_pos++;
    33c6:	80 93 2b 21 	sts	0x212B, r24	; 0x80212b <word_pos>
    33ca:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <pos>
    33ce:	8f 5f       	subi	r24, 0xFF	; 255
		pos++;
    33d0:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <pos>
    33d4:	22 c0       	rjmp	.+68     	; 0x341a <__vector_91+0x5be>
    33d6:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <gps>
	}
}
    33da:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <__vector_91+0x584>
    33de:	a7 cd       	rjmp	.-1202   	; 0x2f2e <__vector_91+0xd2>
    33e0:	e3 e8       	ldi	r30, 0x83	; 131
    33e2:	f1 e2       	ldi	r31, 0x21	; 33
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	9f cd       	rjmp	.-1218   	; 0x2f26 <__vector_91+0xca>
    33e8:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    33ea:	1a 82       	std	Y+2, r1	; 0x02
    33ec:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    33ee:	1c 82       	std	Y+4, r1	; 0x04
    33f0:	1d 82       	std	Y+5, r1	; 0x05
    33f2:	1e 82       	std	Y+6, r1	; 0x06
    33f4:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <commas>
		int16_t val2 = 0;
    33f8:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    33fa:	09 f4       	brne	.+2      	; 0x33fe <__vector_91+0x5a2>
    33fc:	88 cd       	rjmp	.-1264   	; 0x2f0e <__vector_91+0xb2>
    33fe:	30 f4       	brcc	.+12     	; 0x340c <__vector_91+0x5b0>
    3400:	81 30       	cpi	r24, 0x01	; 1
    3402:	49 f3       	breq	.-46     	; 0x33d6 <__vector_91+0x57a>
    3404:	82 30       	cpi	r24, 0x02	; 2
    3406:	09 f4       	brne	.+2      	; 0x340a <__vector_91+0x5ae>
    3408:	88 cd       	rjmp	.-1264   	; 0x2f1a <__vector_91+0xbe>
    340a:	a1 cf       	rjmp	.-190    	; 0x334e <__vector_91+0x4f2>
    340c:	87 30       	cpi	r24, 0x07	; 7
    340e:	09 f4       	brne	.+2      	; 0x3412 <__vector_91+0x5b6>
    3410:	0c cf       	rjmp	.-488    	; 0x322a <__vector_91+0x3ce>
    3412:	89 30       	cpi	r24, 0x09	; 9
    3414:	09 f4       	brne	.+2      	; 0x3418 <__vector_91+0x5bc>
    3416:	75 cd       	rjmp	.-1302   	; 0x2f02 <__vector_91+0xa6>
    3418:	9a cf       	rjmp	.-204    	; 0x334e <__vector_91+0x4f2>
    341a:	26 96       	adiw	r28, 0x06	; 6
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	ff 91       	pop	r31
    3426:	ef 91       	pop	r30
    3428:	bf 91       	pop	r27
    342a:	af 91       	pop	r26
    342c:	9f 91       	pop	r25
    342e:	8f 91       	pop	r24
    3430:	7f 91       	pop	r23
    3432:	6f 91       	pop	r22
    3434:	5f 91       	pop	r21
    3436:	4f 91       	pop	r20
    3438:	3f 91       	pop	r19
    343a:	2f 91       	pop	r18
    343c:	1f 91       	pop	r17
    343e:	ff 90       	pop	r15
    3440:	ef 90       	pop	r14
    3442:	df 90       	pop	r13
    3444:	cf 90       	pop	r12
    3446:	bf 90       	pop	r11
    3448:	af 90       	pop	r10
    344a:	9f 90       	pop	r9
    344c:	8f 90       	pop	r8
    344e:	0f 90       	pop	r0
    3450:	0b be       	out	0x3b, r0	; 59
    3452:	0f 90       	pop	r0
    3454:	0a be       	out	0x3a, r0	; 58
    3456:	0f 90       	pop	r0
    3458:	09 be       	out	0x39, r0	; 57
    345a:	0f 90       	pop	r0
    345c:	08 be       	out	0x38, r0	; 56
    345e:	0f 90       	pop	r0
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	0f 90       	pop	r0
    3464:	1f 90       	pop	r1
    3466:	18 95       	reti

00003468 <__subsf3>:
    3468:	50 58       	subi	r21, 0x80	; 128

0000346a <__addsf3>:
    346a:	bb 27       	eor	r27, r27
    346c:	aa 27       	eor	r26, r26
    346e:	0e d0       	rcall	.+28     	; 0x348c <__addsf3x>
    3470:	b3 c1       	rjmp	.+870    	; 0x37d8 <__fp_round>
    3472:	a4 d1       	rcall	.+840    	; 0x37bc <__fp_pscA>
    3474:	30 f0       	brcs	.+12     	; 0x3482 <__addsf3+0x18>
    3476:	a9 d1       	rcall	.+850    	; 0x37ca <__fp_pscB>
    3478:	20 f0       	brcs	.+8      	; 0x3482 <__addsf3+0x18>
    347a:	31 f4       	brne	.+12     	; 0x3488 <__addsf3+0x1e>
    347c:	9f 3f       	cpi	r25, 0xFF	; 255
    347e:	11 f4       	brne	.+4      	; 0x3484 <__addsf3+0x1a>
    3480:	1e f4       	brtc	.+6      	; 0x3488 <__addsf3+0x1e>
    3482:	99 c1       	rjmp	.+818    	; 0x37b6 <__fp_nan>
    3484:	0e f4       	brtc	.+2      	; 0x3488 <__addsf3+0x1e>
    3486:	e0 95       	com	r30
    3488:	e7 fb       	bst	r30, 7
    348a:	8f c1       	rjmp	.+798    	; 0x37aa <__fp_inf>

0000348c <__addsf3x>:
    348c:	e9 2f       	mov	r30, r25
    348e:	b5 d1       	rcall	.+874    	; 0x37fa <__fp_split3>
    3490:	80 f3       	brcs	.-32     	; 0x3472 <__addsf3+0x8>
    3492:	ba 17       	cp	r27, r26
    3494:	62 07       	cpc	r22, r18
    3496:	73 07       	cpc	r23, r19
    3498:	84 07       	cpc	r24, r20
    349a:	95 07       	cpc	r25, r21
    349c:	18 f0       	brcs	.+6      	; 0x34a4 <__addsf3x+0x18>
    349e:	71 f4       	brne	.+28     	; 0x34bc <__addsf3x+0x30>
    34a0:	9e f5       	brtc	.+102    	; 0x3508 <__addsf3x+0x7c>
    34a2:	cd c1       	rjmp	.+922    	; 0x383e <__fp_zero>
    34a4:	0e f4       	brtc	.+2      	; 0x34a8 <__addsf3x+0x1c>
    34a6:	e0 95       	com	r30
    34a8:	0b 2e       	mov	r0, r27
    34aa:	ba 2f       	mov	r27, r26
    34ac:	a0 2d       	mov	r26, r0
    34ae:	0b 01       	movw	r0, r22
    34b0:	b9 01       	movw	r22, r18
    34b2:	90 01       	movw	r18, r0
    34b4:	0c 01       	movw	r0, r24
    34b6:	ca 01       	movw	r24, r20
    34b8:	a0 01       	movw	r20, r0
    34ba:	11 24       	eor	r1, r1
    34bc:	ff 27       	eor	r31, r31
    34be:	59 1b       	sub	r21, r25
    34c0:	99 f0       	breq	.+38     	; 0x34e8 <__addsf3x+0x5c>
    34c2:	59 3f       	cpi	r21, 0xF9	; 249
    34c4:	50 f4       	brcc	.+20     	; 0x34da <__addsf3x+0x4e>
    34c6:	50 3e       	cpi	r21, 0xE0	; 224
    34c8:	68 f1       	brcs	.+90     	; 0x3524 <__addsf3x+0x98>
    34ca:	1a 16       	cp	r1, r26
    34cc:	f0 40       	sbci	r31, 0x00	; 0
    34ce:	a2 2f       	mov	r26, r18
    34d0:	23 2f       	mov	r18, r19
    34d2:	34 2f       	mov	r19, r20
    34d4:	44 27       	eor	r20, r20
    34d6:	58 5f       	subi	r21, 0xF8	; 248
    34d8:	f3 cf       	rjmp	.-26     	; 0x34c0 <__addsf3x+0x34>
    34da:	46 95       	lsr	r20
    34dc:	37 95       	ror	r19
    34de:	27 95       	ror	r18
    34e0:	a7 95       	ror	r26
    34e2:	f0 40       	sbci	r31, 0x00	; 0
    34e4:	53 95       	inc	r21
    34e6:	c9 f7       	brne	.-14     	; 0x34da <__addsf3x+0x4e>
    34e8:	7e f4       	brtc	.+30     	; 0x3508 <__addsf3x+0x7c>
    34ea:	1f 16       	cp	r1, r31
    34ec:	ba 0b       	sbc	r27, r26
    34ee:	62 0b       	sbc	r22, r18
    34f0:	73 0b       	sbc	r23, r19
    34f2:	84 0b       	sbc	r24, r20
    34f4:	ba f0       	brmi	.+46     	; 0x3524 <__addsf3x+0x98>
    34f6:	91 50       	subi	r25, 0x01	; 1
    34f8:	a1 f0       	breq	.+40     	; 0x3522 <__addsf3x+0x96>
    34fa:	ff 0f       	add	r31, r31
    34fc:	bb 1f       	adc	r27, r27
    34fe:	66 1f       	adc	r22, r22
    3500:	77 1f       	adc	r23, r23
    3502:	88 1f       	adc	r24, r24
    3504:	c2 f7       	brpl	.-16     	; 0x34f6 <__addsf3x+0x6a>
    3506:	0e c0       	rjmp	.+28     	; 0x3524 <__addsf3x+0x98>
    3508:	ba 0f       	add	r27, r26
    350a:	62 1f       	adc	r22, r18
    350c:	73 1f       	adc	r23, r19
    350e:	84 1f       	adc	r24, r20
    3510:	48 f4       	brcc	.+18     	; 0x3524 <__addsf3x+0x98>
    3512:	87 95       	ror	r24
    3514:	77 95       	ror	r23
    3516:	67 95       	ror	r22
    3518:	b7 95       	ror	r27
    351a:	f7 95       	ror	r31
    351c:	9e 3f       	cpi	r25, 0xFE	; 254
    351e:	08 f0       	brcs	.+2      	; 0x3522 <__addsf3x+0x96>
    3520:	b3 cf       	rjmp	.-154    	; 0x3488 <__addsf3+0x1e>
    3522:	93 95       	inc	r25
    3524:	88 0f       	add	r24, r24
    3526:	08 f0       	brcs	.+2      	; 0x352a <__addsf3x+0x9e>
    3528:	99 27       	eor	r25, r25
    352a:	ee 0f       	add	r30, r30
    352c:	97 95       	ror	r25
    352e:	87 95       	ror	r24
    3530:	08 95       	ret

00003532 <__cmpsf2>:
    3532:	17 d1       	rcall	.+558    	; 0x3762 <__fp_cmp>
    3534:	08 f4       	brcc	.+2      	; 0x3538 <__cmpsf2+0x6>
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	08 95       	ret

0000353a <__divsf3>:
    353a:	0c d0       	rcall	.+24     	; 0x3554 <__divsf3x>
    353c:	4d c1       	rjmp	.+666    	; 0x37d8 <__fp_round>
    353e:	45 d1       	rcall	.+650    	; 0x37ca <__fp_pscB>
    3540:	40 f0       	brcs	.+16     	; 0x3552 <__divsf3+0x18>
    3542:	3c d1       	rcall	.+632    	; 0x37bc <__fp_pscA>
    3544:	30 f0       	brcs	.+12     	; 0x3552 <__divsf3+0x18>
    3546:	21 f4       	brne	.+8      	; 0x3550 <__divsf3+0x16>
    3548:	5f 3f       	cpi	r21, 0xFF	; 255
    354a:	19 f0       	breq	.+6      	; 0x3552 <__divsf3+0x18>
    354c:	2e c1       	rjmp	.+604    	; 0x37aa <__fp_inf>
    354e:	51 11       	cpse	r21, r1
    3550:	77 c1       	rjmp	.+750    	; 0x3840 <__fp_szero>
    3552:	31 c1       	rjmp	.+610    	; 0x37b6 <__fp_nan>

00003554 <__divsf3x>:
    3554:	52 d1       	rcall	.+676    	; 0x37fa <__fp_split3>
    3556:	98 f3       	brcs	.-26     	; 0x353e <__divsf3+0x4>

00003558 <__divsf3_pse>:
    3558:	99 23       	and	r25, r25
    355a:	c9 f3       	breq	.-14     	; 0x354e <__divsf3+0x14>
    355c:	55 23       	and	r21, r21
    355e:	b1 f3       	breq	.-20     	; 0x354c <__divsf3+0x12>
    3560:	95 1b       	sub	r25, r21
    3562:	55 0b       	sbc	r21, r21
    3564:	bb 27       	eor	r27, r27
    3566:	aa 27       	eor	r26, r26
    3568:	62 17       	cp	r22, r18
    356a:	73 07       	cpc	r23, r19
    356c:	84 07       	cpc	r24, r20
    356e:	38 f0       	brcs	.+14     	; 0x357e <__divsf3_pse+0x26>
    3570:	9f 5f       	subi	r25, 0xFF	; 255
    3572:	5f 4f       	sbci	r21, 0xFF	; 255
    3574:	22 0f       	add	r18, r18
    3576:	33 1f       	adc	r19, r19
    3578:	44 1f       	adc	r20, r20
    357a:	aa 1f       	adc	r26, r26
    357c:	a9 f3       	breq	.-22     	; 0x3568 <__divsf3_pse+0x10>
    357e:	33 d0       	rcall	.+102    	; 0x35e6 <__divsf3_pse+0x8e>
    3580:	0e 2e       	mov	r0, r30
    3582:	3a f0       	brmi	.+14     	; 0x3592 <__divsf3_pse+0x3a>
    3584:	e0 e8       	ldi	r30, 0x80	; 128
    3586:	30 d0       	rcall	.+96     	; 0x35e8 <__divsf3_pse+0x90>
    3588:	91 50       	subi	r25, 0x01	; 1
    358a:	50 40       	sbci	r21, 0x00	; 0
    358c:	e6 95       	lsr	r30
    358e:	00 1c       	adc	r0, r0
    3590:	ca f7       	brpl	.-14     	; 0x3584 <__divsf3_pse+0x2c>
    3592:	29 d0       	rcall	.+82     	; 0x35e6 <__divsf3_pse+0x8e>
    3594:	fe 2f       	mov	r31, r30
    3596:	27 d0       	rcall	.+78     	; 0x35e6 <__divsf3_pse+0x8e>
    3598:	66 0f       	add	r22, r22
    359a:	77 1f       	adc	r23, r23
    359c:	88 1f       	adc	r24, r24
    359e:	bb 1f       	adc	r27, r27
    35a0:	26 17       	cp	r18, r22
    35a2:	37 07       	cpc	r19, r23
    35a4:	48 07       	cpc	r20, r24
    35a6:	ab 07       	cpc	r26, r27
    35a8:	b0 e8       	ldi	r27, 0x80	; 128
    35aa:	09 f0       	breq	.+2      	; 0x35ae <__divsf3_pse+0x56>
    35ac:	bb 0b       	sbc	r27, r27
    35ae:	80 2d       	mov	r24, r0
    35b0:	bf 01       	movw	r22, r30
    35b2:	ff 27       	eor	r31, r31
    35b4:	93 58       	subi	r25, 0x83	; 131
    35b6:	5f 4f       	sbci	r21, 0xFF	; 255
    35b8:	2a f0       	brmi	.+10     	; 0x35c4 <__divsf3_pse+0x6c>
    35ba:	9e 3f       	cpi	r25, 0xFE	; 254
    35bc:	51 05       	cpc	r21, r1
    35be:	68 f0       	brcs	.+26     	; 0x35da <__divsf3_pse+0x82>
    35c0:	f4 c0       	rjmp	.+488    	; 0x37aa <__fp_inf>
    35c2:	3e c1       	rjmp	.+636    	; 0x3840 <__fp_szero>
    35c4:	5f 3f       	cpi	r21, 0xFF	; 255
    35c6:	ec f3       	brlt	.-6      	; 0x35c2 <__divsf3_pse+0x6a>
    35c8:	98 3e       	cpi	r25, 0xE8	; 232
    35ca:	dc f3       	brlt	.-10     	; 0x35c2 <__divsf3_pse+0x6a>
    35cc:	86 95       	lsr	r24
    35ce:	77 95       	ror	r23
    35d0:	67 95       	ror	r22
    35d2:	b7 95       	ror	r27
    35d4:	f7 95       	ror	r31
    35d6:	9f 5f       	subi	r25, 0xFF	; 255
    35d8:	c9 f7       	brne	.-14     	; 0x35cc <__divsf3_pse+0x74>
    35da:	88 0f       	add	r24, r24
    35dc:	91 1d       	adc	r25, r1
    35de:	96 95       	lsr	r25
    35e0:	87 95       	ror	r24
    35e2:	97 f9       	bld	r25, 7
    35e4:	08 95       	ret
    35e6:	e1 e0       	ldi	r30, 0x01	; 1
    35e8:	66 0f       	add	r22, r22
    35ea:	77 1f       	adc	r23, r23
    35ec:	88 1f       	adc	r24, r24
    35ee:	bb 1f       	adc	r27, r27
    35f0:	62 17       	cp	r22, r18
    35f2:	73 07       	cpc	r23, r19
    35f4:	84 07       	cpc	r24, r20
    35f6:	ba 07       	cpc	r27, r26
    35f8:	20 f0       	brcs	.+8      	; 0x3602 <__divsf3_pse+0xaa>
    35fa:	62 1b       	sub	r22, r18
    35fc:	73 0b       	sbc	r23, r19
    35fe:	84 0b       	sbc	r24, r20
    3600:	ba 0b       	sbc	r27, r26
    3602:	ee 1f       	adc	r30, r30
    3604:	88 f7       	brcc	.-30     	; 0x35e8 <__divsf3_pse+0x90>
    3606:	e0 95       	com	r30
    3608:	08 95       	ret

0000360a <__fixsfsi>:
    360a:	04 d0       	rcall	.+8      	; 0x3614 <__fixunssfsi>
    360c:	68 94       	set
    360e:	b1 11       	cpse	r27, r1
    3610:	17 c1       	rjmp	.+558    	; 0x3840 <__fp_szero>
    3612:	08 95       	ret

00003614 <__fixunssfsi>:
    3614:	fa d0       	rcall	.+500    	; 0x380a <__fp_splitA>
    3616:	88 f0       	brcs	.+34     	; 0x363a <__fixunssfsi+0x26>
    3618:	9f 57       	subi	r25, 0x7F	; 127
    361a:	90 f0       	brcs	.+36     	; 0x3640 <__fixunssfsi+0x2c>
    361c:	b9 2f       	mov	r27, r25
    361e:	99 27       	eor	r25, r25
    3620:	b7 51       	subi	r27, 0x17	; 23
    3622:	a0 f0       	brcs	.+40     	; 0x364c <__fixunssfsi+0x38>
    3624:	d1 f0       	breq	.+52     	; 0x365a <__fixunssfsi+0x46>
    3626:	66 0f       	add	r22, r22
    3628:	77 1f       	adc	r23, r23
    362a:	88 1f       	adc	r24, r24
    362c:	99 1f       	adc	r25, r25
    362e:	1a f0       	brmi	.+6      	; 0x3636 <__fixunssfsi+0x22>
    3630:	ba 95       	dec	r27
    3632:	c9 f7       	brne	.-14     	; 0x3626 <__fixunssfsi+0x12>
    3634:	12 c0       	rjmp	.+36     	; 0x365a <__fixunssfsi+0x46>
    3636:	b1 30       	cpi	r27, 0x01	; 1
    3638:	81 f0       	breq	.+32     	; 0x365a <__fixunssfsi+0x46>
    363a:	01 d1       	rcall	.+514    	; 0x383e <__fp_zero>
    363c:	b1 e0       	ldi	r27, 0x01	; 1
    363e:	08 95       	ret
    3640:	fe c0       	rjmp	.+508    	; 0x383e <__fp_zero>
    3642:	67 2f       	mov	r22, r23
    3644:	78 2f       	mov	r23, r24
    3646:	88 27       	eor	r24, r24
    3648:	b8 5f       	subi	r27, 0xF8	; 248
    364a:	39 f0       	breq	.+14     	; 0x365a <__fixunssfsi+0x46>
    364c:	b9 3f       	cpi	r27, 0xF9	; 249
    364e:	cc f3       	brlt	.-14     	; 0x3642 <__fixunssfsi+0x2e>
    3650:	86 95       	lsr	r24
    3652:	77 95       	ror	r23
    3654:	67 95       	ror	r22
    3656:	b3 95       	inc	r27
    3658:	d9 f7       	brne	.-10     	; 0x3650 <__fixunssfsi+0x3c>
    365a:	3e f4       	brtc	.+14     	; 0x366a <__fixunssfsi+0x56>
    365c:	90 95       	com	r25
    365e:	80 95       	com	r24
    3660:	70 95       	com	r23
    3662:	61 95       	neg	r22
    3664:	7f 4f       	sbci	r23, 0xFF	; 255
    3666:	8f 4f       	sbci	r24, 0xFF	; 255
    3668:	9f 4f       	sbci	r25, 0xFF	; 255
    366a:	08 95       	ret

0000366c <__floatunsisf>:
    366c:	e8 94       	clt
    366e:	09 c0       	rjmp	.+18     	; 0x3682 <__floatsisf+0x12>

00003670 <__floatsisf>:
    3670:	97 fb       	bst	r25, 7
    3672:	3e f4       	brtc	.+14     	; 0x3682 <__floatsisf+0x12>
    3674:	90 95       	com	r25
    3676:	80 95       	com	r24
    3678:	70 95       	com	r23
    367a:	61 95       	neg	r22
    367c:	7f 4f       	sbci	r23, 0xFF	; 255
    367e:	8f 4f       	sbci	r24, 0xFF	; 255
    3680:	9f 4f       	sbci	r25, 0xFF	; 255
    3682:	99 23       	and	r25, r25
    3684:	a9 f0       	breq	.+42     	; 0x36b0 <__floatsisf+0x40>
    3686:	f9 2f       	mov	r31, r25
    3688:	96 e9       	ldi	r25, 0x96	; 150
    368a:	bb 27       	eor	r27, r27
    368c:	93 95       	inc	r25
    368e:	f6 95       	lsr	r31
    3690:	87 95       	ror	r24
    3692:	77 95       	ror	r23
    3694:	67 95       	ror	r22
    3696:	b7 95       	ror	r27
    3698:	f1 11       	cpse	r31, r1
    369a:	f8 cf       	rjmp	.-16     	; 0x368c <__floatsisf+0x1c>
    369c:	fa f4       	brpl	.+62     	; 0x36dc <__floatsisf+0x6c>
    369e:	bb 0f       	add	r27, r27
    36a0:	11 f4       	brne	.+4      	; 0x36a6 <__floatsisf+0x36>
    36a2:	60 ff       	sbrs	r22, 0
    36a4:	1b c0       	rjmp	.+54     	; 0x36dc <__floatsisf+0x6c>
    36a6:	6f 5f       	subi	r22, 0xFF	; 255
    36a8:	7f 4f       	sbci	r23, 0xFF	; 255
    36aa:	8f 4f       	sbci	r24, 0xFF	; 255
    36ac:	9f 4f       	sbci	r25, 0xFF	; 255
    36ae:	16 c0       	rjmp	.+44     	; 0x36dc <__floatsisf+0x6c>
    36b0:	88 23       	and	r24, r24
    36b2:	11 f0       	breq	.+4      	; 0x36b8 <__floatsisf+0x48>
    36b4:	96 e9       	ldi	r25, 0x96	; 150
    36b6:	11 c0       	rjmp	.+34     	; 0x36da <__floatsisf+0x6a>
    36b8:	77 23       	and	r23, r23
    36ba:	21 f0       	breq	.+8      	; 0x36c4 <__floatsisf+0x54>
    36bc:	9e e8       	ldi	r25, 0x8E	; 142
    36be:	87 2f       	mov	r24, r23
    36c0:	76 2f       	mov	r23, r22
    36c2:	05 c0       	rjmp	.+10     	; 0x36ce <__floatsisf+0x5e>
    36c4:	66 23       	and	r22, r22
    36c6:	71 f0       	breq	.+28     	; 0x36e4 <__floatsisf+0x74>
    36c8:	96 e8       	ldi	r25, 0x86	; 134
    36ca:	86 2f       	mov	r24, r22
    36cc:	70 e0       	ldi	r23, 0x00	; 0
    36ce:	60 e0       	ldi	r22, 0x00	; 0
    36d0:	2a f0       	brmi	.+10     	; 0x36dc <__floatsisf+0x6c>
    36d2:	9a 95       	dec	r25
    36d4:	66 0f       	add	r22, r22
    36d6:	77 1f       	adc	r23, r23
    36d8:	88 1f       	adc	r24, r24
    36da:	da f7       	brpl	.-10     	; 0x36d2 <__floatsisf+0x62>
    36dc:	88 0f       	add	r24, r24
    36de:	96 95       	lsr	r25
    36e0:	87 95       	ror	r24
    36e2:	97 f9       	bld	r25, 7
    36e4:	08 95       	ret

000036e6 <__floatundisf>:
    36e6:	e8 94       	clt

000036e8 <__fp_di2sf>:
    36e8:	f9 2f       	mov	r31, r25
    36ea:	96 eb       	ldi	r25, 0xB6	; 182
    36ec:	ff 23       	and	r31, r31
    36ee:	81 f0       	breq	.+32     	; 0x3710 <__fp_di2sf+0x28>
    36f0:	12 16       	cp	r1, r18
    36f2:	13 06       	cpc	r1, r19
    36f4:	14 06       	cpc	r1, r20
    36f6:	44 0b       	sbc	r20, r20
    36f8:	93 95       	inc	r25
    36fa:	f6 95       	lsr	r31
    36fc:	87 95       	ror	r24
    36fe:	77 95       	ror	r23
    3700:	67 95       	ror	r22
    3702:	57 95       	ror	r21
    3704:	40 40       	sbci	r20, 0x00	; 0
    3706:	ff 23       	and	r31, r31
    3708:	b9 f7       	brne	.-18     	; 0x36f8 <__fp_di2sf+0x10>
    370a:	1b c0       	rjmp	.+54     	; 0x3742 <__fp_di2sf+0x5a>
    370c:	99 27       	eor	r25, r25
    370e:	08 95       	ret
    3710:	88 23       	and	r24, r24
    3712:	51 f4       	brne	.+20     	; 0x3728 <__fp_di2sf+0x40>
    3714:	98 50       	subi	r25, 0x08	; 8
    3716:	d2 f7       	brpl	.-12     	; 0x370c <__fp_di2sf+0x24>
    3718:	87 2b       	or	r24, r23
    371a:	76 2f       	mov	r23, r22
    371c:	65 2f       	mov	r22, r21
    371e:	54 2f       	mov	r21, r20
    3720:	43 2f       	mov	r20, r19
    3722:	32 2f       	mov	r19, r18
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	b1 f3       	breq	.-20     	; 0x3714 <__fp_di2sf+0x2c>
    3728:	12 16       	cp	r1, r18
    372a:	13 06       	cpc	r1, r19
    372c:	14 06       	cpc	r1, r20
    372e:	44 0b       	sbc	r20, r20
    3730:	88 23       	and	r24, r24
    3732:	3a f0       	brmi	.+14     	; 0x3742 <__fp_di2sf+0x5a>
    3734:	9a 95       	dec	r25
    3736:	44 0f       	add	r20, r20
    3738:	55 1f       	adc	r21, r21
    373a:	66 1f       	adc	r22, r22
    373c:	77 1f       	adc	r23, r23
    373e:	88 1f       	adc	r24, r24
    3740:	ca f7       	brpl	.-14     	; 0x3734 <__fp_di2sf+0x4c>
    3742:	55 23       	and	r21, r21
    3744:	4a f4       	brpl	.+18     	; 0x3758 <__fp_di2sf+0x70>
    3746:	44 0f       	add	r20, r20
    3748:	55 1f       	adc	r21, r21
    374a:	11 f4       	brne	.+4      	; 0x3750 <__fp_di2sf+0x68>
    374c:	60 ff       	sbrs	r22, 0
    374e:	04 c0       	rjmp	.+8      	; 0x3758 <__fp_di2sf+0x70>
    3750:	6f 5f       	subi	r22, 0xFF	; 255
    3752:	7f 4f       	sbci	r23, 0xFF	; 255
    3754:	8f 4f       	sbci	r24, 0xFF	; 255
    3756:	9f 4f       	sbci	r25, 0xFF	; 255
    3758:	88 0f       	add	r24, r24
    375a:	96 95       	lsr	r25
    375c:	87 95       	ror	r24
    375e:	97 f9       	bld	r25, 7
    3760:	08 95       	ret

00003762 <__fp_cmp>:
    3762:	99 0f       	add	r25, r25
    3764:	00 08       	sbc	r0, r0
    3766:	55 0f       	add	r21, r21
    3768:	aa 0b       	sbc	r26, r26
    376a:	e0 e8       	ldi	r30, 0x80	; 128
    376c:	fe ef       	ldi	r31, 0xFE	; 254
    376e:	16 16       	cp	r1, r22
    3770:	17 06       	cpc	r1, r23
    3772:	e8 07       	cpc	r30, r24
    3774:	f9 07       	cpc	r31, r25
    3776:	c0 f0       	brcs	.+48     	; 0x37a8 <__fp_cmp+0x46>
    3778:	12 16       	cp	r1, r18
    377a:	13 06       	cpc	r1, r19
    377c:	e4 07       	cpc	r30, r20
    377e:	f5 07       	cpc	r31, r21
    3780:	98 f0       	brcs	.+38     	; 0x37a8 <__fp_cmp+0x46>
    3782:	62 1b       	sub	r22, r18
    3784:	73 0b       	sbc	r23, r19
    3786:	84 0b       	sbc	r24, r20
    3788:	95 0b       	sbc	r25, r21
    378a:	39 f4       	brne	.+14     	; 0x379a <__fp_cmp+0x38>
    378c:	0a 26       	eor	r0, r26
    378e:	61 f0       	breq	.+24     	; 0x37a8 <__fp_cmp+0x46>
    3790:	23 2b       	or	r18, r19
    3792:	24 2b       	or	r18, r20
    3794:	25 2b       	or	r18, r21
    3796:	21 f4       	brne	.+8      	; 0x37a0 <__fp_cmp+0x3e>
    3798:	08 95       	ret
    379a:	0a 26       	eor	r0, r26
    379c:	09 f4       	brne	.+2      	; 0x37a0 <__fp_cmp+0x3e>
    379e:	a1 40       	sbci	r26, 0x01	; 1
    37a0:	a6 95       	lsr	r26
    37a2:	8f ef       	ldi	r24, 0xFF	; 255
    37a4:	81 1d       	adc	r24, r1
    37a6:	81 1d       	adc	r24, r1
    37a8:	08 95       	ret

000037aa <__fp_inf>:
    37aa:	97 f9       	bld	r25, 7
    37ac:	9f 67       	ori	r25, 0x7F	; 127
    37ae:	80 e8       	ldi	r24, 0x80	; 128
    37b0:	70 e0       	ldi	r23, 0x00	; 0
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	08 95       	ret

000037b6 <__fp_nan>:
    37b6:	9f ef       	ldi	r25, 0xFF	; 255
    37b8:	80 ec       	ldi	r24, 0xC0	; 192
    37ba:	08 95       	ret

000037bc <__fp_pscA>:
    37bc:	00 24       	eor	r0, r0
    37be:	0a 94       	dec	r0
    37c0:	16 16       	cp	r1, r22
    37c2:	17 06       	cpc	r1, r23
    37c4:	18 06       	cpc	r1, r24
    37c6:	09 06       	cpc	r0, r25
    37c8:	08 95       	ret

000037ca <__fp_pscB>:
    37ca:	00 24       	eor	r0, r0
    37cc:	0a 94       	dec	r0
    37ce:	12 16       	cp	r1, r18
    37d0:	13 06       	cpc	r1, r19
    37d2:	14 06       	cpc	r1, r20
    37d4:	05 06       	cpc	r0, r21
    37d6:	08 95       	ret

000037d8 <__fp_round>:
    37d8:	09 2e       	mov	r0, r25
    37da:	03 94       	inc	r0
    37dc:	00 0c       	add	r0, r0
    37de:	11 f4       	brne	.+4      	; 0x37e4 <__fp_round+0xc>
    37e0:	88 23       	and	r24, r24
    37e2:	52 f0       	brmi	.+20     	; 0x37f8 <__fp_round+0x20>
    37e4:	bb 0f       	add	r27, r27
    37e6:	40 f4       	brcc	.+16     	; 0x37f8 <__fp_round+0x20>
    37e8:	bf 2b       	or	r27, r31
    37ea:	11 f4       	brne	.+4      	; 0x37f0 <__fp_round+0x18>
    37ec:	60 ff       	sbrs	r22, 0
    37ee:	04 c0       	rjmp	.+8      	; 0x37f8 <__fp_round+0x20>
    37f0:	6f 5f       	subi	r22, 0xFF	; 255
    37f2:	7f 4f       	sbci	r23, 0xFF	; 255
    37f4:	8f 4f       	sbci	r24, 0xFF	; 255
    37f6:	9f 4f       	sbci	r25, 0xFF	; 255
    37f8:	08 95       	ret

000037fa <__fp_split3>:
    37fa:	57 fd       	sbrc	r21, 7
    37fc:	90 58       	subi	r25, 0x80	; 128
    37fe:	44 0f       	add	r20, r20
    3800:	55 1f       	adc	r21, r21
    3802:	59 f0       	breq	.+22     	; 0x381a <__fp_splitA+0x10>
    3804:	5f 3f       	cpi	r21, 0xFF	; 255
    3806:	71 f0       	breq	.+28     	; 0x3824 <__fp_splitA+0x1a>
    3808:	47 95       	ror	r20

0000380a <__fp_splitA>:
    380a:	88 0f       	add	r24, r24
    380c:	97 fb       	bst	r25, 7
    380e:	99 1f       	adc	r25, r25
    3810:	61 f0       	breq	.+24     	; 0x382a <__fp_splitA+0x20>
    3812:	9f 3f       	cpi	r25, 0xFF	; 255
    3814:	79 f0       	breq	.+30     	; 0x3834 <__fp_splitA+0x2a>
    3816:	87 95       	ror	r24
    3818:	08 95       	ret
    381a:	12 16       	cp	r1, r18
    381c:	13 06       	cpc	r1, r19
    381e:	14 06       	cpc	r1, r20
    3820:	55 1f       	adc	r21, r21
    3822:	f2 cf       	rjmp	.-28     	; 0x3808 <__fp_split3+0xe>
    3824:	46 95       	lsr	r20
    3826:	f1 df       	rcall	.-30     	; 0x380a <__fp_splitA>
    3828:	08 c0       	rjmp	.+16     	; 0x383a <__fp_splitA+0x30>
    382a:	16 16       	cp	r1, r22
    382c:	17 06       	cpc	r1, r23
    382e:	18 06       	cpc	r1, r24
    3830:	99 1f       	adc	r25, r25
    3832:	f1 cf       	rjmp	.-30     	; 0x3816 <__fp_splitA+0xc>
    3834:	86 95       	lsr	r24
    3836:	71 05       	cpc	r23, r1
    3838:	61 05       	cpc	r22, r1
    383a:	08 94       	sec
    383c:	08 95       	ret

0000383e <__fp_zero>:
    383e:	e8 94       	clt

00003840 <__fp_szero>:
    3840:	bb 27       	eor	r27, r27
    3842:	66 27       	eor	r22, r22
    3844:	77 27       	eor	r23, r23
    3846:	cb 01       	movw	r24, r22
    3848:	97 f9       	bld	r25, 7
    384a:	08 95       	ret

0000384c <__gesf2>:
    384c:	8a df       	rcall	.-236    	; 0x3762 <__fp_cmp>
    384e:	08 f4       	brcc	.+2      	; 0x3852 <__gesf2+0x6>
    3850:	8f ef       	ldi	r24, 0xFF	; 255
    3852:	08 95       	ret

00003854 <__mulsf3>:
    3854:	0b d0       	rcall	.+22     	; 0x386c <__mulsf3x>
    3856:	c0 cf       	rjmp	.-128    	; 0x37d8 <__fp_round>
    3858:	b1 df       	rcall	.-158    	; 0x37bc <__fp_pscA>
    385a:	28 f0       	brcs	.+10     	; 0x3866 <__mulsf3+0x12>
    385c:	b6 df       	rcall	.-148    	; 0x37ca <__fp_pscB>
    385e:	18 f0       	brcs	.+6      	; 0x3866 <__mulsf3+0x12>
    3860:	95 23       	and	r25, r21
    3862:	09 f0       	breq	.+2      	; 0x3866 <__mulsf3+0x12>
    3864:	a2 cf       	rjmp	.-188    	; 0x37aa <__fp_inf>
    3866:	a7 cf       	rjmp	.-178    	; 0x37b6 <__fp_nan>
    3868:	11 24       	eor	r1, r1
    386a:	ea cf       	rjmp	.-44     	; 0x3840 <__fp_szero>

0000386c <__mulsf3x>:
    386c:	c6 df       	rcall	.-116    	; 0x37fa <__fp_split3>
    386e:	a0 f3       	brcs	.-24     	; 0x3858 <__mulsf3+0x4>

00003870 <__mulsf3_pse>:
    3870:	95 9f       	mul	r25, r21
    3872:	d1 f3       	breq	.-12     	; 0x3868 <__mulsf3+0x14>
    3874:	95 0f       	add	r25, r21
    3876:	50 e0       	ldi	r21, 0x00	; 0
    3878:	55 1f       	adc	r21, r21
    387a:	62 9f       	mul	r22, r18
    387c:	f0 01       	movw	r30, r0
    387e:	72 9f       	mul	r23, r18
    3880:	bb 27       	eor	r27, r27
    3882:	f0 0d       	add	r31, r0
    3884:	b1 1d       	adc	r27, r1
    3886:	63 9f       	mul	r22, r19
    3888:	aa 27       	eor	r26, r26
    388a:	f0 0d       	add	r31, r0
    388c:	b1 1d       	adc	r27, r1
    388e:	aa 1f       	adc	r26, r26
    3890:	64 9f       	mul	r22, r20
    3892:	66 27       	eor	r22, r22
    3894:	b0 0d       	add	r27, r0
    3896:	a1 1d       	adc	r26, r1
    3898:	66 1f       	adc	r22, r22
    389a:	82 9f       	mul	r24, r18
    389c:	22 27       	eor	r18, r18
    389e:	b0 0d       	add	r27, r0
    38a0:	a1 1d       	adc	r26, r1
    38a2:	62 1f       	adc	r22, r18
    38a4:	73 9f       	mul	r23, r19
    38a6:	b0 0d       	add	r27, r0
    38a8:	a1 1d       	adc	r26, r1
    38aa:	62 1f       	adc	r22, r18
    38ac:	83 9f       	mul	r24, r19
    38ae:	a0 0d       	add	r26, r0
    38b0:	61 1d       	adc	r22, r1
    38b2:	22 1f       	adc	r18, r18
    38b4:	74 9f       	mul	r23, r20
    38b6:	33 27       	eor	r19, r19
    38b8:	a0 0d       	add	r26, r0
    38ba:	61 1d       	adc	r22, r1
    38bc:	23 1f       	adc	r18, r19
    38be:	84 9f       	mul	r24, r20
    38c0:	60 0d       	add	r22, r0
    38c2:	21 1d       	adc	r18, r1
    38c4:	82 2f       	mov	r24, r18
    38c6:	76 2f       	mov	r23, r22
    38c8:	6a 2f       	mov	r22, r26
    38ca:	11 24       	eor	r1, r1
    38cc:	9f 57       	subi	r25, 0x7F	; 127
    38ce:	50 40       	sbci	r21, 0x00	; 0
    38d0:	8a f0       	brmi	.+34     	; 0x38f4 <__mulsf3_pse+0x84>
    38d2:	e1 f0       	breq	.+56     	; 0x390c <__mulsf3_pse+0x9c>
    38d4:	88 23       	and	r24, r24
    38d6:	4a f0       	brmi	.+18     	; 0x38ea <__mulsf3_pse+0x7a>
    38d8:	ee 0f       	add	r30, r30
    38da:	ff 1f       	adc	r31, r31
    38dc:	bb 1f       	adc	r27, r27
    38de:	66 1f       	adc	r22, r22
    38e0:	77 1f       	adc	r23, r23
    38e2:	88 1f       	adc	r24, r24
    38e4:	91 50       	subi	r25, 0x01	; 1
    38e6:	50 40       	sbci	r21, 0x00	; 0
    38e8:	a9 f7       	brne	.-22     	; 0x38d4 <__mulsf3_pse+0x64>
    38ea:	9e 3f       	cpi	r25, 0xFE	; 254
    38ec:	51 05       	cpc	r21, r1
    38ee:	70 f0       	brcs	.+28     	; 0x390c <__mulsf3_pse+0x9c>
    38f0:	5c cf       	rjmp	.-328    	; 0x37aa <__fp_inf>
    38f2:	a6 cf       	rjmp	.-180    	; 0x3840 <__fp_szero>
    38f4:	5f 3f       	cpi	r21, 0xFF	; 255
    38f6:	ec f3       	brlt	.-6      	; 0x38f2 <__mulsf3_pse+0x82>
    38f8:	98 3e       	cpi	r25, 0xE8	; 232
    38fa:	dc f3       	brlt	.-10     	; 0x38f2 <__mulsf3_pse+0x82>
    38fc:	86 95       	lsr	r24
    38fe:	77 95       	ror	r23
    3900:	67 95       	ror	r22
    3902:	b7 95       	ror	r27
    3904:	f7 95       	ror	r31
    3906:	e7 95       	ror	r30
    3908:	9f 5f       	subi	r25, 0xFF	; 255
    390a:	c1 f7       	brne	.-16     	; 0x38fc <__mulsf3_pse+0x8c>
    390c:	fe 2b       	or	r31, r30
    390e:	88 0f       	add	r24, r24
    3910:	91 1d       	adc	r25, r1
    3912:	96 95       	lsr	r25
    3914:	87 95       	ror	r24
    3916:	97 f9       	bld	r25, 7
    3918:	08 95       	ret

0000391a <pow>:
    391a:	fa 01       	movw	r30, r20
    391c:	ee 0f       	add	r30, r30
    391e:	ff 1f       	adc	r31, r31
    3920:	30 96       	adiw	r30, 0x00	; 0
    3922:	21 05       	cpc	r18, r1
    3924:	31 05       	cpc	r19, r1
    3926:	99 f1       	breq	.+102    	; 0x398e <pow+0x74>
    3928:	61 15       	cp	r22, r1
    392a:	71 05       	cpc	r23, r1
    392c:	61 f4       	brne	.+24     	; 0x3946 <pow+0x2c>
    392e:	80 38       	cpi	r24, 0x80	; 128
    3930:	bf e3       	ldi	r27, 0x3F	; 63
    3932:	9b 07       	cpc	r25, r27
    3934:	49 f1       	breq	.+82     	; 0x3988 <pow+0x6e>
    3936:	68 94       	set
    3938:	90 38       	cpi	r25, 0x80	; 128
    393a:	81 05       	cpc	r24, r1
    393c:	61 f0       	breq	.+24     	; 0x3956 <pow+0x3c>
    393e:	80 38       	cpi	r24, 0x80	; 128
    3940:	bf ef       	ldi	r27, 0xFF	; 255
    3942:	9b 07       	cpc	r25, r27
    3944:	41 f0       	breq	.+16     	; 0x3956 <pow+0x3c>
    3946:	99 23       	and	r25, r25
    3948:	42 f5       	brpl	.+80     	; 0x399a <pow+0x80>
    394a:	ff 3f       	cpi	r31, 0xFF	; 255
    394c:	e1 05       	cpc	r30, r1
    394e:	31 05       	cpc	r19, r1
    3950:	21 05       	cpc	r18, r1
    3952:	11 f1       	breq	.+68     	; 0x3998 <pow+0x7e>
    3954:	e8 94       	clt
    3956:	08 94       	sec
    3958:	e7 95       	ror	r30
    395a:	d9 01       	movw	r26, r18
    395c:	aa 23       	and	r26, r26
    395e:	29 f4       	brne	.+10     	; 0x396a <pow+0x50>
    3960:	ab 2f       	mov	r26, r27
    3962:	be 2f       	mov	r27, r30
    3964:	f8 5f       	subi	r31, 0xF8	; 248
    3966:	d0 f3       	brcs	.-12     	; 0x395c <pow+0x42>
    3968:	10 c0       	rjmp	.+32     	; 0x398a <pow+0x70>
    396a:	ff 5f       	subi	r31, 0xFF	; 255
    396c:	70 f4       	brcc	.+28     	; 0x398a <pow+0x70>
    396e:	a6 95       	lsr	r26
    3970:	e0 f7       	brcc	.-8      	; 0x396a <pow+0x50>
    3972:	f7 39       	cpi	r31, 0x97	; 151
    3974:	50 f0       	brcs	.+20     	; 0x398a <pow+0x70>
    3976:	19 f0       	breq	.+6      	; 0x397e <pow+0x64>
    3978:	ff 3a       	cpi	r31, 0xAF	; 175
    397a:	38 f4       	brcc	.+14     	; 0x398a <pow+0x70>
    397c:	9f 77       	andi	r25, 0x7F	; 127
    397e:	9f 93       	push	r25
    3980:	0c d0       	rcall	.+24     	; 0x399a <pow+0x80>
    3982:	0f 90       	pop	r0
    3984:	07 fc       	sbrc	r0, 7
    3986:	90 58       	subi	r25, 0x80	; 128
    3988:	08 95       	ret
    398a:	3e f0       	brts	.+14     	; 0x399a <pow+0x80>
    398c:	14 cf       	rjmp	.-472    	; 0x37b6 <__fp_nan>
    398e:	60 e0       	ldi	r22, 0x00	; 0
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	80 e8       	ldi	r24, 0x80	; 128
    3994:	9f e3       	ldi	r25, 0x3F	; 63
    3996:	08 95       	ret
    3998:	4f e7       	ldi	r20, 0x7F	; 127
    399a:	9f 77       	andi	r25, 0x7F	; 127
    399c:	5f 93       	push	r21
    399e:	4f 93       	push	r20
    39a0:	3f 93       	push	r19
    39a2:	2f 93       	push	r18
    39a4:	9e d0       	rcall	.+316    	; 0x3ae2 <log>
    39a6:	2f 91       	pop	r18
    39a8:	3f 91       	pop	r19
    39aa:	4f 91       	pop	r20
    39ac:	5f 91       	pop	r21
    39ae:	52 df       	rcall	.-348    	; 0x3854 <__mulsf3>
    39b0:	05 c0       	rjmp	.+10     	; 0x39bc <exp>
    39b2:	19 f4       	brne	.+6      	; 0x39ba <pow+0xa0>
    39b4:	0e f0       	brts	.+2      	; 0x39b8 <pow+0x9e>
    39b6:	f9 ce       	rjmp	.-526    	; 0x37aa <__fp_inf>
    39b8:	42 cf       	rjmp	.-380    	; 0x383e <__fp_zero>
    39ba:	fd ce       	rjmp	.-518    	; 0x37b6 <__fp_nan>

000039bc <exp>:
    39bc:	26 df       	rcall	.-436    	; 0x380a <__fp_splitA>
    39be:	c8 f3       	brcs	.-14     	; 0x39b2 <pow+0x98>
    39c0:	96 38       	cpi	r25, 0x86	; 134
    39c2:	c0 f7       	brcc	.-16     	; 0x39b4 <pow+0x9a>
    39c4:	07 f8       	bld	r0, 7
    39c6:	0f 92       	push	r0
    39c8:	e8 94       	clt
    39ca:	2b e3       	ldi	r18, 0x3B	; 59
    39cc:	3a ea       	ldi	r19, 0xAA	; 170
    39ce:	48 eb       	ldi	r20, 0xB8	; 184
    39d0:	5f e7       	ldi	r21, 0x7F	; 127
    39d2:	4e df       	rcall	.-356    	; 0x3870 <__mulsf3_pse>
    39d4:	0f 92       	push	r0
    39d6:	0f 92       	push	r0
    39d8:	0f 92       	push	r0
    39da:	4d b7       	in	r20, 0x3d	; 61
    39dc:	5e b7       	in	r21, 0x3e	; 62
    39de:	0f 92       	push	r0
    39e0:	c0 d0       	rcall	.+384    	; 0x3b62 <modf>
    39e2:	e2 e2       	ldi	r30, 0x22	; 34
    39e4:	f2 e0       	ldi	r31, 0x02	; 2
    39e6:	16 d0       	rcall	.+44     	; 0x3a14 <__fp_powser>
    39e8:	4f 91       	pop	r20
    39ea:	5f 91       	pop	r21
    39ec:	ef 91       	pop	r30
    39ee:	ff 91       	pop	r31
    39f0:	e5 95       	asr	r30
    39f2:	ee 1f       	adc	r30, r30
    39f4:	ff 1f       	adc	r31, r31
    39f6:	49 f0       	breq	.+18     	; 0x3a0a <exp+0x4e>
    39f8:	fe 57       	subi	r31, 0x7E	; 126
    39fa:	e0 68       	ori	r30, 0x80	; 128
    39fc:	44 27       	eor	r20, r20
    39fe:	ee 0f       	add	r30, r30
    3a00:	44 1f       	adc	r20, r20
    3a02:	fa 95       	dec	r31
    3a04:	e1 f7       	brne	.-8      	; 0x39fe <exp+0x42>
    3a06:	41 95       	neg	r20
    3a08:	55 0b       	sbc	r21, r21
    3a0a:	32 d0       	rcall	.+100    	; 0x3a70 <ldexp>
    3a0c:	0f 90       	pop	r0
    3a0e:	07 fe       	sbrs	r0, 7
    3a10:	26 c0       	rjmp	.+76     	; 0x3a5e <inverse>
    3a12:	08 95       	ret

00003a14 <__fp_powser>:
    3a14:	df 93       	push	r29
    3a16:	cf 93       	push	r28
    3a18:	1f 93       	push	r17
    3a1a:	0f 93       	push	r16
    3a1c:	ff 92       	push	r15
    3a1e:	ef 92       	push	r14
    3a20:	df 92       	push	r13
    3a22:	7b 01       	movw	r14, r22
    3a24:	8c 01       	movw	r16, r24
    3a26:	68 94       	set
    3a28:	05 c0       	rjmp	.+10     	; 0x3a34 <__fp_powser+0x20>
    3a2a:	da 2e       	mov	r13, r26
    3a2c:	ef 01       	movw	r28, r30
    3a2e:	1e df       	rcall	.-452    	; 0x386c <__mulsf3x>
    3a30:	fe 01       	movw	r30, r28
    3a32:	e8 94       	clt
    3a34:	a5 91       	lpm	r26, Z+
    3a36:	25 91       	lpm	r18, Z+
    3a38:	35 91       	lpm	r19, Z+
    3a3a:	45 91       	lpm	r20, Z+
    3a3c:	55 91       	lpm	r21, Z+
    3a3e:	ae f3       	brts	.-22     	; 0x3a2a <__fp_powser+0x16>
    3a40:	ef 01       	movw	r28, r30
    3a42:	24 dd       	rcall	.-1464   	; 0x348c <__addsf3x>
    3a44:	fe 01       	movw	r30, r28
    3a46:	97 01       	movw	r18, r14
    3a48:	a8 01       	movw	r20, r16
    3a4a:	da 94       	dec	r13
    3a4c:	79 f7       	brne	.-34     	; 0x3a2c <__fp_powser+0x18>
    3a4e:	df 90       	pop	r13
    3a50:	ef 90       	pop	r14
    3a52:	ff 90       	pop	r15
    3a54:	0f 91       	pop	r16
    3a56:	1f 91       	pop	r17
    3a58:	cf 91       	pop	r28
    3a5a:	df 91       	pop	r29
    3a5c:	08 95       	ret

00003a5e <inverse>:
    3a5e:	9b 01       	movw	r18, r22
    3a60:	ac 01       	movw	r20, r24
    3a62:	60 e0       	ldi	r22, 0x00	; 0
    3a64:	70 e0       	ldi	r23, 0x00	; 0
    3a66:	80 e8       	ldi	r24, 0x80	; 128
    3a68:	9f e3       	ldi	r25, 0x3F	; 63
    3a6a:	67 cd       	rjmp	.-1330   	; 0x353a <__divsf3>
    3a6c:	9e ce       	rjmp	.-708    	; 0x37aa <__fp_inf>
    3a6e:	ac c0       	rjmp	.+344    	; 0x3bc8 <__fp_mpack>

00003a70 <ldexp>:
    3a70:	cc de       	rcall	.-616    	; 0x380a <__fp_splitA>
    3a72:	e8 f3       	brcs	.-6      	; 0x3a6e <inverse+0x10>
    3a74:	99 23       	and	r25, r25
    3a76:	d9 f3       	breq	.-10     	; 0x3a6e <inverse+0x10>
    3a78:	94 0f       	add	r25, r20
    3a7a:	51 1d       	adc	r21, r1
    3a7c:	bb f3       	brvs	.-18     	; 0x3a6c <inverse+0xe>
    3a7e:	91 50       	subi	r25, 0x01	; 1
    3a80:	50 40       	sbci	r21, 0x00	; 0
    3a82:	94 f0       	brlt	.+36     	; 0x3aa8 <ldexp+0x38>
    3a84:	59 f0       	breq	.+22     	; 0x3a9c <ldexp+0x2c>
    3a86:	88 23       	and	r24, r24
    3a88:	32 f0       	brmi	.+12     	; 0x3a96 <ldexp+0x26>
    3a8a:	66 0f       	add	r22, r22
    3a8c:	77 1f       	adc	r23, r23
    3a8e:	88 1f       	adc	r24, r24
    3a90:	91 50       	subi	r25, 0x01	; 1
    3a92:	50 40       	sbci	r21, 0x00	; 0
    3a94:	c1 f7       	brne	.-16     	; 0x3a86 <ldexp+0x16>
    3a96:	9e 3f       	cpi	r25, 0xFE	; 254
    3a98:	51 05       	cpc	r21, r1
    3a9a:	44 f7       	brge	.-48     	; 0x3a6c <inverse+0xe>
    3a9c:	88 0f       	add	r24, r24
    3a9e:	91 1d       	adc	r25, r1
    3aa0:	96 95       	lsr	r25
    3aa2:	87 95       	ror	r24
    3aa4:	97 f9       	bld	r25, 7
    3aa6:	08 95       	ret
    3aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    3aaa:	ac f0       	brlt	.+42     	; 0x3ad6 <ldexp+0x66>
    3aac:	98 3e       	cpi	r25, 0xE8	; 232
    3aae:	9c f0       	brlt	.+38     	; 0x3ad6 <ldexp+0x66>
    3ab0:	bb 27       	eor	r27, r27
    3ab2:	86 95       	lsr	r24
    3ab4:	77 95       	ror	r23
    3ab6:	67 95       	ror	r22
    3ab8:	b7 95       	ror	r27
    3aba:	08 f4       	brcc	.+2      	; 0x3abe <ldexp+0x4e>
    3abc:	b1 60       	ori	r27, 0x01	; 1
    3abe:	93 95       	inc	r25
    3ac0:	c1 f7       	brne	.-16     	; 0x3ab2 <ldexp+0x42>
    3ac2:	bb 0f       	add	r27, r27
    3ac4:	58 f7       	brcc	.-42     	; 0x3a9c <ldexp+0x2c>
    3ac6:	11 f4       	brne	.+4      	; 0x3acc <ldexp+0x5c>
    3ac8:	60 ff       	sbrs	r22, 0
    3aca:	e8 cf       	rjmp	.-48     	; 0x3a9c <ldexp+0x2c>
    3acc:	6f 5f       	subi	r22, 0xFF	; 255
    3ace:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad4:	e3 cf       	rjmp	.-58     	; 0x3a9c <ldexp+0x2c>
    3ad6:	b4 ce       	rjmp	.-664    	; 0x3840 <__fp_szero>
    3ad8:	0e f0       	brts	.+2      	; 0x3adc <ldexp+0x6c>
    3ada:	76 c0       	rjmp	.+236    	; 0x3bc8 <__fp_mpack>
    3adc:	6c ce       	rjmp	.-808    	; 0x37b6 <__fp_nan>
    3ade:	68 94       	set
    3ae0:	64 ce       	rjmp	.-824    	; 0x37aa <__fp_inf>

00003ae2 <log>:
    3ae2:	93 de       	rcall	.-730    	; 0x380a <__fp_splitA>
    3ae4:	c8 f3       	brcs	.-14     	; 0x3ad8 <ldexp+0x68>
    3ae6:	99 23       	and	r25, r25
    3ae8:	d1 f3       	breq	.-12     	; 0x3ade <ldexp+0x6e>
    3aea:	c6 f3       	brts	.-16     	; 0x3adc <ldexp+0x6c>
    3aec:	df 93       	push	r29
    3aee:	cf 93       	push	r28
    3af0:	1f 93       	push	r17
    3af2:	0f 93       	push	r16
    3af4:	ff 92       	push	r15
    3af6:	c9 2f       	mov	r28, r25
    3af8:	dd 27       	eor	r29, r29
    3afa:	88 23       	and	r24, r24
    3afc:	2a f0       	brmi	.+10     	; 0x3b08 <log+0x26>
    3afe:	21 97       	sbiw	r28, 0x01	; 1
    3b00:	66 0f       	add	r22, r22
    3b02:	77 1f       	adc	r23, r23
    3b04:	88 1f       	adc	r24, r24
    3b06:	da f7       	brpl	.-10     	; 0x3afe <log+0x1c>
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e8       	ldi	r20, 0x80	; 128
    3b0e:	5f eb       	ldi	r21, 0xBF	; 191
    3b10:	9f e3       	ldi	r25, 0x3F	; 63
    3b12:	88 39       	cpi	r24, 0x98	; 152
    3b14:	20 f0       	brcs	.+8      	; 0x3b1e <log+0x3c>
    3b16:	80 3e       	cpi	r24, 0xE0	; 224
    3b18:	30 f0       	brcs	.+12     	; 0x3b26 <log+0x44>
    3b1a:	21 96       	adiw	r28, 0x01	; 1
    3b1c:	8f 77       	andi	r24, 0x7F	; 127
    3b1e:	a5 dc       	rcall	.-1718   	; 0x346a <__addsf3>
    3b20:	ea e4       	ldi	r30, 0x4A	; 74
    3b22:	f2 e0       	ldi	r31, 0x02	; 2
    3b24:	03 c0       	rjmp	.+6      	; 0x3b2c <log+0x4a>
    3b26:	a1 dc       	rcall	.-1726   	; 0x346a <__addsf3>
    3b28:	e7 e7       	ldi	r30, 0x77	; 119
    3b2a:	f2 e0       	ldi	r31, 0x02	; 2
    3b2c:	73 df       	rcall	.-282    	; 0x3a14 <__fp_powser>
    3b2e:	8b 01       	movw	r16, r22
    3b30:	be 01       	movw	r22, r28
    3b32:	ec 01       	movw	r28, r24
    3b34:	fb 2e       	mov	r15, r27
    3b36:	6f 57       	subi	r22, 0x7F	; 127
    3b38:	71 09       	sbc	r23, r1
    3b3a:	75 95       	asr	r23
    3b3c:	77 1f       	adc	r23, r23
    3b3e:	88 0b       	sbc	r24, r24
    3b40:	99 0b       	sbc	r25, r25
    3b42:	96 dd       	rcall	.-1236   	; 0x3670 <__floatsisf>
    3b44:	28 e1       	ldi	r18, 0x18	; 24
    3b46:	32 e7       	ldi	r19, 0x72	; 114
    3b48:	41 e3       	ldi	r20, 0x31	; 49
    3b4a:	5f e3       	ldi	r21, 0x3F	; 63
    3b4c:	8f de       	rcall	.-738    	; 0x386c <__mulsf3x>
    3b4e:	af 2d       	mov	r26, r15
    3b50:	98 01       	movw	r18, r16
    3b52:	ae 01       	movw	r20, r28
    3b54:	ff 90       	pop	r15
    3b56:	0f 91       	pop	r16
    3b58:	1f 91       	pop	r17
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	96 dc       	rcall	.-1748   	; 0x348c <__addsf3x>
    3b60:	3b ce       	rjmp	.-906    	; 0x37d8 <__fp_round>

00003b62 <modf>:
    3b62:	fa 01       	movw	r30, r20
    3b64:	dc 01       	movw	r26, r24
    3b66:	aa 0f       	add	r26, r26
    3b68:	bb 1f       	adc	r27, r27
    3b6a:	9b 01       	movw	r18, r22
    3b6c:	ac 01       	movw	r20, r24
    3b6e:	bf 57       	subi	r27, 0x7F	; 127
    3b70:	28 f4       	brcc	.+10     	; 0x3b7c <modf+0x1a>
    3b72:	22 27       	eor	r18, r18
    3b74:	33 27       	eor	r19, r19
    3b76:	44 27       	eor	r20, r20
    3b78:	50 78       	andi	r21, 0x80	; 128
    3b7a:	1f c0       	rjmp	.+62     	; 0x3bba <modf+0x58>
    3b7c:	b7 51       	subi	r27, 0x17	; 23
    3b7e:	88 f4       	brcc	.+34     	; 0x3ba2 <modf+0x40>
    3b80:	ab 2f       	mov	r26, r27
    3b82:	00 24       	eor	r0, r0
    3b84:	46 95       	lsr	r20
    3b86:	37 95       	ror	r19
    3b88:	27 95       	ror	r18
    3b8a:	01 1c       	adc	r0, r1
    3b8c:	a3 95       	inc	r26
    3b8e:	d2 f3       	brmi	.-12     	; 0x3b84 <modf+0x22>
    3b90:	00 20       	and	r0, r0
    3b92:	69 f0       	breq	.+26     	; 0x3bae <modf+0x4c>
    3b94:	22 0f       	add	r18, r18
    3b96:	33 1f       	adc	r19, r19
    3b98:	44 1f       	adc	r20, r20
    3b9a:	b3 95       	inc	r27
    3b9c:	da f3       	brmi	.-10     	; 0x3b94 <modf+0x32>
    3b9e:	0d d0       	rcall	.+26     	; 0x3bba <modf+0x58>
    3ba0:	63 cc       	rjmp	.-1850   	; 0x3468 <__subsf3>
    3ba2:	61 30       	cpi	r22, 0x01	; 1
    3ba4:	71 05       	cpc	r23, r1
    3ba6:	a0 e8       	ldi	r26, 0x80	; 128
    3ba8:	8a 07       	cpc	r24, r26
    3baa:	b9 46       	sbci	r27, 0x69	; 105
    3bac:	30 f4       	brcc	.+12     	; 0x3bba <modf+0x58>
    3bae:	9b 01       	movw	r18, r22
    3bb0:	ac 01       	movw	r20, r24
    3bb2:	66 27       	eor	r22, r22
    3bb4:	77 27       	eor	r23, r23
    3bb6:	88 27       	eor	r24, r24
    3bb8:	90 78       	andi	r25, 0x80	; 128
    3bba:	30 96       	adiw	r30, 0x00	; 0
    3bbc:	21 f0       	breq	.+8      	; 0x3bc6 <modf+0x64>
    3bbe:	20 83       	st	Z, r18
    3bc0:	31 83       	std	Z+1, r19	; 0x01
    3bc2:	42 83       	std	Z+2, r20	; 0x02
    3bc4:	53 83       	std	Z+3, r21	; 0x03
    3bc6:	08 95       	ret

00003bc8 <__fp_mpack>:
    3bc8:	9f 3f       	cpi	r25, 0xFF	; 255
    3bca:	31 f0       	breq	.+12     	; 0x3bd8 <__fp_mpack_finite+0xc>

00003bcc <__fp_mpack_finite>:
    3bcc:	91 50       	subi	r25, 0x01	; 1
    3bce:	20 f4       	brcc	.+8      	; 0x3bd8 <__fp_mpack_finite+0xc>
    3bd0:	87 95       	ror	r24
    3bd2:	77 95       	ror	r23
    3bd4:	67 95       	ror	r22
    3bd6:	b7 95       	ror	r27
    3bd8:	88 0f       	add	r24, r24
    3bda:	91 1d       	adc	r25, r1
    3bdc:	96 95       	lsr	r25
    3bde:	87 95       	ror	r24
    3be0:	97 f9       	bld	r25, 7
    3be2:	08 95       	ret

00003be4 <__mulsi3>:
    3be4:	db 01       	movw	r26, r22
    3be6:	8f 93       	push	r24
    3be8:	9f 93       	push	r25
    3bea:	88 d0       	rcall	.+272    	; 0x3cfc <__muluhisi3>
    3bec:	bf 91       	pop	r27
    3bee:	af 91       	pop	r26
    3bf0:	a2 9f       	mul	r26, r18
    3bf2:	80 0d       	add	r24, r0
    3bf4:	91 1d       	adc	r25, r1
    3bf6:	a3 9f       	mul	r26, r19
    3bf8:	90 0d       	add	r25, r0
    3bfa:	b2 9f       	mul	r27, r18
    3bfc:	90 0d       	add	r25, r0
    3bfe:	11 24       	eor	r1, r1
    3c00:	08 95       	ret

00003c02 <__udivmodhi4>:
    3c02:	aa 1b       	sub	r26, r26
    3c04:	bb 1b       	sub	r27, r27
    3c06:	51 e1       	ldi	r21, 0x11	; 17
    3c08:	07 c0       	rjmp	.+14     	; 0x3c18 <__udivmodhi4_ep>

00003c0a <__udivmodhi4_loop>:
    3c0a:	aa 1f       	adc	r26, r26
    3c0c:	bb 1f       	adc	r27, r27
    3c0e:	a6 17       	cp	r26, r22
    3c10:	b7 07       	cpc	r27, r23
    3c12:	10 f0       	brcs	.+4      	; 0x3c18 <__udivmodhi4_ep>
    3c14:	a6 1b       	sub	r26, r22
    3c16:	b7 0b       	sbc	r27, r23

00003c18 <__udivmodhi4_ep>:
    3c18:	88 1f       	adc	r24, r24
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	5a 95       	dec	r21
    3c1e:	a9 f7       	brne	.-22     	; 0x3c0a <__udivmodhi4_loop>
    3c20:	80 95       	com	r24
    3c22:	90 95       	com	r25
    3c24:	bc 01       	movw	r22, r24
    3c26:	cd 01       	movw	r24, r26
    3c28:	08 95       	ret

00003c2a <__divmodhi4>:
    3c2a:	97 fb       	bst	r25, 7
    3c2c:	07 2e       	mov	r0, r23
    3c2e:	16 f4       	brtc	.+4      	; 0x3c34 <__divmodhi4+0xa>
    3c30:	00 94       	com	r0
    3c32:	06 d0       	rcall	.+12     	; 0x3c40 <__divmodhi4_neg1>
    3c34:	77 fd       	sbrc	r23, 7
    3c36:	08 d0       	rcall	.+16     	; 0x3c48 <__divmodhi4_neg2>
    3c38:	e4 df       	rcall	.-56     	; 0x3c02 <__udivmodhi4>
    3c3a:	07 fc       	sbrc	r0, 7
    3c3c:	05 d0       	rcall	.+10     	; 0x3c48 <__divmodhi4_neg2>
    3c3e:	3e f4       	brtc	.+14     	; 0x3c4e <__divmodhi4_exit>

00003c40 <__divmodhi4_neg1>:
    3c40:	90 95       	com	r25
    3c42:	81 95       	neg	r24
    3c44:	9f 4f       	sbci	r25, 0xFF	; 255
    3c46:	08 95       	ret

00003c48 <__divmodhi4_neg2>:
    3c48:	70 95       	com	r23
    3c4a:	61 95       	neg	r22
    3c4c:	7f 4f       	sbci	r23, 0xFF	; 255

00003c4e <__divmodhi4_exit>:
    3c4e:	08 95       	ret

00003c50 <__udivmodsi4>:
    3c50:	a1 e2       	ldi	r26, 0x21	; 33
    3c52:	1a 2e       	mov	r1, r26
    3c54:	aa 1b       	sub	r26, r26
    3c56:	bb 1b       	sub	r27, r27
    3c58:	fd 01       	movw	r30, r26
    3c5a:	0d c0       	rjmp	.+26     	; 0x3c76 <__udivmodsi4_ep>

00003c5c <__udivmodsi4_loop>:
    3c5c:	aa 1f       	adc	r26, r26
    3c5e:	bb 1f       	adc	r27, r27
    3c60:	ee 1f       	adc	r30, r30
    3c62:	ff 1f       	adc	r31, r31
    3c64:	a2 17       	cp	r26, r18
    3c66:	b3 07       	cpc	r27, r19
    3c68:	e4 07       	cpc	r30, r20
    3c6a:	f5 07       	cpc	r31, r21
    3c6c:	20 f0       	brcs	.+8      	; 0x3c76 <__udivmodsi4_ep>
    3c6e:	a2 1b       	sub	r26, r18
    3c70:	b3 0b       	sbc	r27, r19
    3c72:	e4 0b       	sbc	r30, r20
    3c74:	f5 0b       	sbc	r31, r21

00003c76 <__udivmodsi4_ep>:
    3c76:	66 1f       	adc	r22, r22
    3c78:	77 1f       	adc	r23, r23
    3c7a:	88 1f       	adc	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	1a 94       	dec	r1
    3c80:	69 f7       	brne	.-38     	; 0x3c5c <__udivmodsi4_loop>
    3c82:	60 95       	com	r22
    3c84:	70 95       	com	r23
    3c86:	80 95       	com	r24
    3c88:	90 95       	com	r25
    3c8a:	9b 01       	movw	r18, r22
    3c8c:	ac 01       	movw	r20, r24
    3c8e:	bd 01       	movw	r22, r26
    3c90:	cf 01       	movw	r24, r30
    3c92:	08 95       	ret

00003c94 <__divmodsi4>:
    3c94:	05 2e       	mov	r0, r21
    3c96:	97 fb       	bst	r25, 7
    3c98:	16 f4       	brtc	.+4      	; 0x3c9e <__divmodsi4+0xa>
    3c9a:	00 94       	com	r0
    3c9c:	0f d0       	rcall	.+30     	; 0x3cbc <__negsi2>
    3c9e:	57 fd       	sbrc	r21, 7
    3ca0:	05 d0       	rcall	.+10     	; 0x3cac <__divmodsi4_neg2>
    3ca2:	d6 df       	rcall	.-84     	; 0x3c50 <__udivmodsi4>
    3ca4:	07 fc       	sbrc	r0, 7
    3ca6:	02 d0       	rcall	.+4      	; 0x3cac <__divmodsi4_neg2>
    3ca8:	46 f4       	brtc	.+16     	; 0x3cba <__divmodsi4_exit>
    3caa:	08 c0       	rjmp	.+16     	; 0x3cbc <__negsi2>

00003cac <__divmodsi4_neg2>:
    3cac:	50 95       	com	r21
    3cae:	40 95       	com	r20
    3cb0:	30 95       	com	r19
    3cb2:	21 95       	neg	r18
    3cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb6:	4f 4f       	sbci	r20, 0xFF	; 255
    3cb8:	5f 4f       	sbci	r21, 0xFF	; 255

00003cba <__divmodsi4_exit>:
    3cba:	08 95       	ret

00003cbc <__negsi2>:
    3cbc:	90 95       	com	r25
    3cbe:	80 95       	com	r24
    3cc0:	70 95       	com	r23
    3cc2:	61 95       	neg	r22
    3cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cca:	08 95       	ret

00003ccc <__tablejump2__>:
    3ccc:	ee 0f       	add	r30, r30
    3cce:	ff 1f       	adc	r31, r31
    3cd0:	88 1f       	adc	r24, r24
    3cd2:	8b bf       	out	0x3b, r24	; 59
    3cd4:	07 90       	elpm	r0, Z+
    3cd6:	f6 91       	elpm	r31, Z
    3cd8:	e0 2d       	mov	r30, r0
    3cda:	1b be       	out	0x3b, r1	; 59
    3cdc:	19 94       	eijmp

00003cde <__umulhisi3>:
    3cde:	a2 9f       	mul	r26, r18
    3ce0:	b0 01       	movw	r22, r0
    3ce2:	b3 9f       	mul	r27, r19
    3ce4:	c0 01       	movw	r24, r0
    3ce6:	a3 9f       	mul	r26, r19
    3ce8:	70 0d       	add	r23, r0
    3cea:	81 1d       	adc	r24, r1
    3cec:	11 24       	eor	r1, r1
    3cee:	91 1d       	adc	r25, r1
    3cf0:	b2 9f       	mul	r27, r18
    3cf2:	70 0d       	add	r23, r0
    3cf4:	81 1d       	adc	r24, r1
    3cf6:	11 24       	eor	r1, r1
    3cf8:	91 1d       	adc	r25, r1
    3cfa:	08 95       	ret

00003cfc <__muluhisi3>:
    3cfc:	f0 df       	rcall	.-32     	; 0x3cde <__umulhisi3>
    3cfe:	a5 9f       	mul	r26, r21
    3d00:	90 0d       	add	r25, r0
    3d02:	b4 9f       	mul	r27, r20
    3d04:	90 0d       	add	r25, r0
    3d06:	a4 9f       	mul	r26, r20
    3d08:	80 0d       	add	r24, r0
    3d0a:	91 1d       	adc	r25, r1
    3d0c:	11 24       	eor	r1, r1
    3d0e:	08 95       	ret

00003d10 <__ashldi3>:
    3d10:	0f 93       	push	r16
    3d12:	08 30       	cpi	r16, 0x08	; 8
    3d14:	90 f0       	brcs	.+36     	; 0x3d3a <__ashldi3+0x2a>
    3d16:	98 2f       	mov	r25, r24
    3d18:	87 2f       	mov	r24, r23
    3d1a:	76 2f       	mov	r23, r22
    3d1c:	65 2f       	mov	r22, r21
    3d1e:	54 2f       	mov	r21, r20
    3d20:	43 2f       	mov	r20, r19
    3d22:	32 2f       	mov	r19, r18
    3d24:	22 27       	eor	r18, r18
    3d26:	08 50       	subi	r16, 0x08	; 8
    3d28:	f4 cf       	rjmp	.-24     	; 0x3d12 <__ashldi3+0x2>
    3d2a:	22 0f       	add	r18, r18
    3d2c:	33 1f       	adc	r19, r19
    3d2e:	44 1f       	adc	r20, r20
    3d30:	55 1f       	adc	r21, r21
    3d32:	66 1f       	adc	r22, r22
    3d34:	77 1f       	adc	r23, r23
    3d36:	88 1f       	adc	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	0a 95       	dec	r16
    3d3c:	b2 f7       	brpl	.-20     	; 0x3d2a <__ashldi3+0x1a>
    3d3e:	0f 91       	pop	r16
    3d40:	08 95       	ret

00003d42 <fdevopen>:
    3d42:	0f 93       	push	r16
    3d44:	1f 93       	push	r17
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	31 f4       	brne	.+12     	; 0x3d5a <fdevopen+0x18>
    3d4e:	61 15       	cp	r22, r1
    3d50:	71 05       	cpc	r23, r1
    3d52:	19 f4       	brne	.+6      	; 0x3d5a <fdevopen+0x18>
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	39 c0       	rjmp	.+114    	; 0x3dcc <fdevopen+0x8a>
    3d5a:	8b 01       	movw	r16, r22
    3d5c:	ec 01       	movw	r28, r24
    3d5e:	6e e0       	ldi	r22, 0x0E	; 14
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	7c d5       	rcall	.+2808   	; 0x4860 <calloc>
    3d68:	fc 01       	movw	r30, r24
    3d6a:	89 2b       	or	r24, r25
    3d6c:	99 f3       	breq	.-26     	; 0x3d54 <fdevopen+0x12>
    3d6e:	80 e8       	ldi	r24, 0x80	; 128
    3d70:	83 83       	std	Z+3, r24	; 0x03
    3d72:	01 15       	cp	r16, r1
    3d74:	11 05       	cpc	r17, r1
    3d76:	71 f0       	breq	.+28     	; 0x3d94 <fdevopen+0x52>
    3d78:	02 87       	std	Z+10, r16	; 0x0a
    3d7a:	13 87       	std	Z+11, r17	; 0x0b
    3d7c:	81 e8       	ldi	r24, 0x81	; 129
    3d7e:	83 83       	std	Z+3, r24	; 0x03
    3d80:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <__iob>
    3d84:	90 91 fb 21 	lds	r25, 0x21FB	; 0x8021fb <__iob+0x1>
    3d88:	89 2b       	or	r24, r25
    3d8a:	21 f4       	brne	.+8      	; 0x3d94 <fdevopen+0x52>
    3d8c:	e0 93 fa 21 	sts	0x21FA, r30	; 0x8021fa <__iob>
    3d90:	f0 93 fb 21 	sts	0x21FB, r31	; 0x8021fb <__iob+0x1>
    3d94:	20 97       	sbiw	r28, 0x00	; 0
    3d96:	c9 f0       	breq	.+50     	; 0x3dca <fdevopen+0x88>
    3d98:	c0 87       	std	Z+8, r28	; 0x08
    3d9a:	d1 87       	std	Z+9, r29	; 0x09
    3d9c:	83 81       	ldd	r24, Z+3	; 0x03
    3d9e:	82 60       	ori	r24, 0x02	; 2
    3da0:	83 83       	std	Z+3, r24	; 0x03
    3da2:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <__iob+0x2>
    3da6:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <__iob+0x3>
    3daa:	89 2b       	or	r24, r25
    3dac:	71 f4       	brne	.+28     	; 0x3dca <fdevopen+0x88>
    3dae:	e0 93 fc 21 	sts	0x21FC, r30	; 0x8021fc <__iob+0x2>
    3db2:	f0 93 fd 21 	sts	0x21FD, r31	; 0x8021fd <__iob+0x3>
    3db6:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <__iob+0x4>
    3dba:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <__iob+0x5>
    3dbe:	89 2b       	or	r24, r25
    3dc0:	21 f4       	brne	.+8      	; 0x3dca <fdevopen+0x88>
    3dc2:	e0 93 fe 21 	sts	0x21FE, r30	; 0x8021fe <__iob+0x4>
    3dc6:	f0 93 ff 21 	sts	0x21FF, r31	; 0x8021ff <__iob+0x5>
    3dca:	cf 01       	movw	r24, r30
    3dcc:	df 91       	pop	r29
    3dce:	cf 91       	pop	r28
    3dd0:	1f 91       	pop	r17
    3dd2:	0f 91       	pop	r16
    3dd4:	08 95       	ret

00003dd6 <printf>:
    3dd6:	cf 93       	push	r28
    3dd8:	df 93       	push	r29
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
    3dde:	ae 01       	movw	r20, r28
    3de0:	4a 5f       	subi	r20, 0xFA	; 250
    3de2:	5f 4f       	sbci	r21, 0xFF	; 255
    3de4:	fa 01       	movw	r30, r20
    3de6:	61 91       	ld	r22, Z+
    3de8:	71 91       	ld	r23, Z+
    3dea:	af 01       	movw	r20, r30
    3dec:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <__iob+0x2>
    3df0:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <__iob+0x3>
    3df4:	7b d0       	rcall	.+246    	; 0x3eec <vfprintf>
    3df6:	df 91       	pop	r29
    3df8:	cf 91       	pop	r28
    3dfa:	08 95       	ret

00003dfc <putchar>:
    3dfc:	60 91 fc 21 	lds	r22, 0x21FC	; 0x8021fc <__iob+0x2>
    3e00:	70 91 fd 21 	lds	r23, 0x21FD	; 0x8021fd <__iob+0x3>
    3e04:	d6 c6       	rjmp	.+3500   	; 0x4bb2 <fputc>

00003e06 <puts>:
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	e0 91 fc 21 	lds	r30, 0x21FC	; 0x8021fc <__iob+0x2>
    3e12:	f0 91 fd 21 	lds	r31, 0x21FD	; 0x8021fd <__iob+0x3>
    3e16:	23 81       	ldd	r18, Z+3	; 0x03
    3e18:	21 ff       	sbrs	r18, 1
    3e1a:	1b c0       	rjmp	.+54     	; 0x3e52 <puts+0x4c>
    3e1c:	8c 01       	movw	r16, r24
    3e1e:	d0 e0       	ldi	r29, 0x00	; 0
    3e20:	c0 e0       	ldi	r28, 0x00	; 0
    3e22:	f8 01       	movw	r30, r16
    3e24:	81 91       	ld	r24, Z+
    3e26:	8f 01       	movw	r16, r30
    3e28:	60 91 fc 21 	lds	r22, 0x21FC	; 0x8021fc <__iob+0x2>
    3e2c:	70 91 fd 21 	lds	r23, 0x21FD	; 0x8021fd <__iob+0x3>
    3e30:	db 01       	movw	r26, r22
    3e32:	18 96       	adiw	r26, 0x08	; 8
    3e34:	ed 91       	ld	r30, X+
    3e36:	fc 91       	ld	r31, X
    3e38:	19 97       	sbiw	r26, 0x09	; 9
    3e3a:	88 23       	and	r24, r24
    3e3c:	31 f0       	breq	.+12     	; 0x3e4a <puts+0x44>
    3e3e:	19 95       	eicall
    3e40:	89 2b       	or	r24, r25
    3e42:	79 f3       	breq	.-34     	; 0x3e22 <puts+0x1c>
    3e44:	df ef       	ldi	r29, 0xFF	; 255
    3e46:	cf ef       	ldi	r28, 0xFF	; 255
    3e48:	ec cf       	rjmp	.-40     	; 0x3e22 <puts+0x1c>
    3e4a:	8a e0       	ldi	r24, 0x0A	; 10
    3e4c:	19 95       	eicall
    3e4e:	89 2b       	or	r24, r25
    3e50:	19 f0       	breq	.+6      	; 0x3e58 <puts+0x52>
    3e52:	8f ef       	ldi	r24, 0xFF	; 255
    3e54:	9f ef       	ldi	r25, 0xFF	; 255
    3e56:	02 c0       	rjmp	.+4      	; 0x3e5c <puts+0x56>
    3e58:	8d 2f       	mov	r24, r29
    3e5a:	9c 2f       	mov	r25, r28
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	1f 91       	pop	r17
    3e62:	0f 91       	pop	r16
    3e64:	08 95       	ret

00003e66 <sprintf>:
    3e66:	0f 93       	push	r16
    3e68:	1f 93       	push	r17
    3e6a:	cf 93       	push	r28
    3e6c:	df 93       	push	r29
    3e6e:	cd b7       	in	r28, 0x3d	; 61
    3e70:	de b7       	in	r29, 0x3e	; 62
    3e72:	2e 97       	sbiw	r28, 0x0e	; 14
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0e 89       	ldd	r16, Y+22	; 0x16
    3e7a:	1f 89       	ldd	r17, Y+23	; 0x17
    3e7c:	86 e0       	ldi	r24, 0x06	; 6
    3e7e:	8c 83       	std	Y+4, r24	; 0x04
    3e80:	09 83       	std	Y+1, r16	; 0x01
    3e82:	1a 83       	std	Y+2, r17	; 0x02
    3e84:	8f ef       	ldi	r24, 0xFF	; 255
    3e86:	9f e7       	ldi	r25, 0x7F	; 127
    3e88:	8d 83       	std	Y+5, r24	; 0x05
    3e8a:	9e 83       	std	Y+6, r25	; 0x06
    3e8c:	ae 01       	movw	r20, r28
    3e8e:	46 5e       	subi	r20, 0xE6	; 230
    3e90:	5f 4f       	sbci	r21, 0xFF	; 255
    3e92:	68 8d       	ldd	r22, Y+24	; 0x18
    3e94:	79 8d       	ldd	r23, Y+25	; 0x19
    3e96:	ce 01       	movw	r24, r28
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	28 d0       	rcall	.+80     	; 0x3eec <vfprintf>
    3e9c:	ef 81       	ldd	r30, Y+7	; 0x07
    3e9e:	f8 85       	ldd	r31, Y+8	; 0x08
    3ea0:	e0 0f       	add	r30, r16
    3ea2:	f1 1f       	adc	r31, r17
    3ea4:	10 82       	st	Z, r1
    3ea6:	2e 96       	adiw	r28, 0x0e	; 14
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	df 91       	pop	r29
    3eae:	cf 91       	pop	r28
    3eb0:	1f 91       	pop	r17
    3eb2:	0f 91       	pop	r16
    3eb4:	08 95       	ret

00003eb6 <sscanf>:
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	cd b7       	in	r28, 0x3d	; 61
    3ebc:	de b7       	in	r29, 0x3e	; 62
    3ebe:	2e 97       	sbiw	r28, 0x0e	; 14
    3ec0:	cd bf       	out	0x3d, r28	; 61
    3ec2:	de bf       	out	0x3e, r29	; 62
    3ec4:	85 e0       	ldi	r24, 0x05	; 5
    3ec6:	8c 83       	std	Y+4, r24	; 0x04
    3ec8:	8c 89       	ldd	r24, Y+20	; 0x14
    3eca:	9d 89       	ldd	r25, Y+21	; 0x15
    3ecc:	89 83       	std	Y+1, r24	; 0x01
    3ece:	9a 83       	std	Y+2, r25	; 0x02
    3ed0:	ae 01       	movw	r20, r28
    3ed2:	48 5e       	subi	r20, 0xE8	; 232
    3ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed6:	6e 89       	ldd	r22, Y+22	; 0x16
    3ed8:	7f 89       	ldd	r23, Y+23	; 0x17
    3eda:	ce 01       	movw	r24, r28
    3edc:	01 96       	adiw	r24, 0x01	; 1
    3ede:	a9 d3       	rcall	.+1874   	; 0x4632 <vfscanf>
    3ee0:	2e 96       	adiw	r28, 0x0e	; 14
    3ee2:	cd bf       	out	0x3d, r28	; 61
    3ee4:	de bf       	out	0x3e, r29	; 62
    3ee6:	df 91       	pop	r29
    3ee8:	cf 91       	pop	r28
    3eea:	08 95       	ret

00003eec <vfprintf>:
    3eec:	2f 92       	push	r2
    3eee:	3f 92       	push	r3
    3ef0:	4f 92       	push	r4
    3ef2:	5f 92       	push	r5
    3ef4:	6f 92       	push	r6
    3ef6:	7f 92       	push	r7
    3ef8:	8f 92       	push	r8
    3efa:	9f 92       	push	r9
    3efc:	af 92       	push	r10
    3efe:	bf 92       	push	r11
    3f00:	cf 92       	push	r12
    3f02:	df 92       	push	r13
    3f04:	ef 92       	push	r14
    3f06:	ff 92       	push	r15
    3f08:	0f 93       	push	r16
    3f0a:	1f 93       	push	r17
    3f0c:	cf 93       	push	r28
    3f0e:	df 93       	push	r29
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	2b 97       	sbiw	r28, 0x0b	; 11
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	de bf       	out	0x3e, r29	; 62
    3f1a:	6c 01       	movw	r12, r24
    3f1c:	7b 01       	movw	r14, r22
    3f1e:	8a 01       	movw	r16, r20
    3f20:	fc 01       	movw	r30, r24
    3f22:	16 82       	std	Z+6, r1	; 0x06
    3f24:	17 82       	std	Z+7, r1	; 0x07
    3f26:	83 81       	ldd	r24, Z+3	; 0x03
    3f28:	81 ff       	sbrs	r24, 1
    3f2a:	bf c1       	rjmp	.+894    	; 0x42aa <__stack+0x2ab>
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	01 96       	adiw	r24, 0x01	; 1
    3f30:	3c 01       	movw	r6, r24
    3f32:	f6 01       	movw	r30, r12
    3f34:	93 81       	ldd	r25, Z+3	; 0x03
    3f36:	f7 01       	movw	r30, r14
    3f38:	93 fd       	sbrc	r25, 3
    3f3a:	85 91       	lpm	r24, Z+
    3f3c:	93 ff       	sbrs	r25, 3
    3f3e:	81 91       	ld	r24, Z+
    3f40:	7f 01       	movw	r14, r30
    3f42:	88 23       	and	r24, r24
    3f44:	09 f4       	brne	.+2      	; 0x3f48 <vfprintf+0x5c>
    3f46:	ad c1       	rjmp	.+858    	; 0x42a2 <__stack+0x2a3>
    3f48:	85 32       	cpi	r24, 0x25	; 37
    3f4a:	39 f4       	brne	.+14     	; 0x3f5a <vfprintf+0x6e>
    3f4c:	93 fd       	sbrc	r25, 3
    3f4e:	85 91       	lpm	r24, Z+
    3f50:	93 ff       	sbrs	r25, 3
    3f52:	81 91       	ld	r24, Z+
    3f54:	7f 01       	movw	r14, r30
    3f56:	85 32       	cpi	r24, 0x25	; 37
    3f58:	21 f4       	brne	.+8      	; 0x3f62 <vfprintf+0x76>
    3f5a:	b6 01       	movw	r22, r12
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	29 d6       	rcall	.+3154   	; 0x4bb2 <fputc>
    3f60:	e8 cf       	rjmp	.-48     	; 0x3f32 <vfprintf+0x46>
    3f62:	91 2c       	mov	r9, r1
    3f64:	21 2c       	mov	r2, r1
    3f66:	31 2c       	mov	r3, r1
    3f68:	ff e1       	ldi	r31, 0x1F	; 31
    3f6a:	f3 15       	cp	r31, r3
    3f6c:	d8 f0       	brcs	.+54     	; 0x3fa4 <vfprintf+0xb8>
    3f6e:	8b 32       	cpi	r24, 0x2B	; 43
    3f70:	79 f0       	breq	.+30     	; 0x3f90 <vfprintf+0xa4>
    3f72:	38 f4       	brcc	.+14     	; 0x3f82 <vfprintf+0x96>
    3f74:	80 32       	cpi	r24, 0x20	; 32
    3f76:	79 f0       	breq	.+30     	; 0x3f96 <vfprintf+0xaa>
    3f78:	83 32       	cpi	r24, 0x23	; 35
    3f7a:	a1 f4       	brne	.+40     	; 0x3fa4 <vfprintf+0xb8>
    3f7c:	23 2d       	mov	r18, r3
    3f7e:	20 61       	ori	r18, 0x10	; 16
    3f80:	1d c0       	rjmp	.+58     	; 0x3fbc <vfprintf+0xd0>
    3f82:	8d 32       	cpi	r24, 0x2D	; 45
    3f84:	61 f0       	breq	.+24     	; 0x3f9e <vfprintf+0xb2>
    3f86:	80 33       	cpi	r24, 0x30	; 48
    3f88:	69 f4       	brne	.+26     	; 0x3fa4 <vfprintf+0xb8>
    3f8a:	23 2d       	mov	r18, r3
    3f8c:	21 60       	ori	r18, 0x01	; 1
    3f8e:	16 c0       	rjmp	.+44     	; 0x3fbc <vfprintf+0xd0>
    3f90:	83 2d       	mov	r24, r3
    3f92:	82 60       	ori	r24, 0x02	; 2
    3f94:	38 2e       	mov	r3, r24
    3f96:	e3 2d       	mov	r30, r3
    3f98:	e4 60       	ori	r30, 0x04	; 4
    3f9a:	3e 2e       	mov	r3, r30
    3f9c:	2a c0       	rjmp	.+84     	; 0x3ff2 <vfprintf+0x106>
    3f9e:	f3 2d       	mov	r31, r3
    3fa0:	f8 60       	ori	r31, 0x08	; 8
    3fa2:	1d c0       	rjmp	.+58     	; 0x3fde <vfprintf+0xf2>
    3fa4:	37 fc       	sbrc	r3, 7
    3fa6:	2d c0       	rjmp	.+90     	; 0x4002 <__stack+0x3>
    3fa8:	20 ed       	ldi	r18, 0xD0	; 208
    3faa:	28 0f       	add	r18, r24
    3fac:	2a 30       	cpi	r18, 0x0A	; 10
    3fae:	40 f0       	brcs	.+16     	; 0x3fc0 <vfprintf+0xd4>
    3fb0:	8e 32       	cpi	r24, 0x2E	; 46
    3fb2:	b9 f4       	brne	.+46     	; 0x3fe2 <vfprintf+0xf6>
    3fb4:	36 fc       	sbrc	r3, 6
    3fb6:	75 c1       	rjmp	.+746    	; 0x42a2 <__stack+0x2a3>
    3fb8:	23 2d       	mov	r18, r3
    3fba:	20 64       	ori	r18, 0x40	; 64
    3fbc:	32 2e       	mov	r3, r18
    3fbe:	19 c0       	rjmp	.+50     	; 0x3ff2 <vfprintf+0x106>
    3fc0:	36 fe       	sbrs	r3, 6
    3fc2:	06 c0       	rjmp	.+12     	; 0x3fd0 <vfprintf+0xe4>
    3fc4:	8a e0       	ldi	r24, 0x0A	; 10
    3fc6:	98 9e       	mul	r9, r24
    3fc8:	20 0d       	add	r18, r0
    3fca:	11 24       	eor	r1, r1
    3fcc:	92 2e       	mov	r9, r18
    3fce:	11 c0       	rjmp	.+34     	; 0x3ff2 <vfprintf+0x106>
    3fd0:	ea e0       	ldi	r30, 0x0A	; 10
    3fd2:	2e 9e       	mul	r2, r30
    3fd4:	20 0d       	add	r18, r0
    3fd6:	11 24       	eor	r1, r1
    3fd8:	22 2e       	mov	r2, r18
    3fda:	f3 2d       	mov	r31, r3
    3fdc:	f0 62       	ori	r31, 0x20	; 32
    3fde:	3f 2e       	mov	r3, r31
    3fe0:	08 c0       	rjmp	.+16     	; 0x3ff2 <vfprintf+0x106>
    3fe2:	8c 36       	cpi	r24, 0x6C	; 108
    3fe4:	21 f4       	brne	.+8      	; 0x3fee <vfprintf+0x102>
    3fe6:	83 2d       	mov	r24, r3
    3fe8:	80 68       	ori	r24, 0x80	; 128
    3fea:	38 2e       	mov	r3, r24
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <vfprintf+0x106>
    3fee:	88 36       	cpi	r24, 0x68	; 104
    3ff0:	41 f4       	brne	.+16     	; 0x4002 <__stack+0x3>
    3ff2:	f7 01       	movw	r30, r14
    3ff4:	93 fd       	sbrc	r25, 3
    3ff6:	85 91       	lpm	r24, Z+
    3ff8:	93 ff       	sbrs	r25, 3
    3ffa:	81 91       	ld	r24, Z+
    3ffc:	7f 01       	movw	r14, r30
    3ffe:	81 11       	cpse	r24, r1
    4000:	b3 cf       	rjmp	.-154    	; 0x3f68 <vfprintf+0x7c>
    4002:	98 2f       	mov	r25, r24
    4004:	9f 7d       	andi	r25, 0xDF	; 223
    4006:	95 54       	subi	r25, 0x45	; 69
    4008:	93 30       	cpi	r25, 0x03	; 3
    400a:	28 f4       	brcc	.+10     	; 0x4016 <__stack+0x17>
    400c:	0c 5f       	subi	r16, 0xFC	; 252
    400e:	1f 4f       	sbci	r17, 0xFF	; 255
    4010:	9f e3       	ldi	r25, 0x3F	; 63
    4012:	99 83       	std	Y+1, r25	; 0x01
    4014:	0d c0       	rjmp	.+26     	; 0x4030 <__stack+0x31>
    4016:	83 36       	cpi	r24, 0x63	; 99
    4018:	31 f0       	breq	.+12     	; 0x4026 <__stack+0x27>
    401a:	83 37       	cpi	r24, 0x73	; 115
    401c:	71 f0       	breq	.+28     	; 0x403a <__stack+0x3b>
    401e:	83 35       	cpi	r24, 0x53	; 83
    4020:	09 f0       	breq	.+2      	; 0x4024 <__stack+0x25>
    4022:	55 c0       	rjmp	.+170    	; 0x40ce <__stack+0xcf>
    4024:	20 c0       	rjmp	.+64     	; 0x4066 <__stack+0x67>
    4026:	f8 01       	movw	r30, r16
    4028:	80 81       	ld	r24, Z
    402a:	89 83       	std	Y+1, r24	; 0x01
    402c:	0e 5f       	subi	r16, 0xFE	; 254
    402e:	1f 4f       	sbci	r17, 0xFF	; 255
    4030:	88 24       	eor	r8, r8
    4032:	83 94       	inc	r8
    4034:	91 2c       	mov	r9, r1
    4036:	53 01       	movw	r10, r6
    4038:	12 c0       	rjmp	.+36     	; 0x405e <__stack+0x5f>
    403a:	28 01       	movw	r4, r16
    403c:	f2 e0       	ldi	r31, 0x02	; 2
    403e:	4f 0e       	add	r4, r31
    4040:	51 1c       	adc	r5, r1
    4042:	f8 01       	movw	r30, r16
    4044:	a0 80       	ld	r10, Z
    4046:	b1 80       	ldd	r11, Z+1	; 0x01
    4048:	36 fe       	sbrs	r3, 6
    404a:	03 c0       	rjmp	.+6      	; 0x4052 <__stack+0x53>
    404c:	69 2d       	mov	r22, r9
    404e:	70 e0       	ldi	r23, 0x00	; 0
    4050:	02 c0       	rjmp	.+4      	; 0x4056 <__stack+0x57>
    4052:	6f ef       	ldi	r22, 0xFF	; 255
    4054:	7f ef       	ldi	r23, 0xFF	; 255
    4056:	c5 01       	movw	r24, r10
    4058:	63 d5       	rcall	.+2758   	; 0x4b20 <strnlen>
    405a:	4c 01       	movw	r8, r24
    405c:	82 01       	movw	r16, r4
    405e:	f3 2d       	mov	r31, r3
    4060:	ff 77       	andi	r31, 0x7F	; 127
    4062:	3f 2e       	mov	r3, r31
    4064:	15 c0       	rjmp	.+42     	; 0x4090 <__stack+0x91>
    4066:	28 01       	movw	r4, r16
    4068:	22 e0       	ldi	r18, 0x02	; 2
    406a:	42 0e       	add	r4, r18
    406c:	51 1c       	adc	r5, r1
    406e:	f8 01       	movw	r30, r16
    4070:	a0 80       	ld	r10, Z
    4072:	b1 80       	ldd	r11, Z+1	; 0x01
    4074:	36 fe       	sbrs	r3, 6
    4076:	03 c0       	rjmp	.+6      	; 0x407e <__stack+0x7f>
    4078:	69 2d       	mov	r22, r9
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	02 c0       	rjmp	.+4      	; 0x4082 <__stack+0x83>
    407e:	6f ef       	ldi	r22, 0xFF	; 255
    4080:	7f ef       	ldi	r23, 0xFF	; 255
    4082:	c5 01       	movw	r24, r10
    4084:	3b d5       	rcall	.+2678   	; 0x4afc <strnlen_P>
    4086:	4c 01       	movw	r8, r24
    4088:	f3 2d       	mov	r31, r3
    408a:	f0 68       	ori	r31, 0x80	; 128
    408c:	3f 2e       	mov	r3, r31
    408e:	82 01       	movw	r16, r4
    4090:	33 fc       	sbrc	r3, 3
    4092:	19 c0       	rjmp	.+50     	; 0x40c6 <__stack+0xc7>
    4094:	82 2d       	mov	r24, r2
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	88 16       	cp	r8, r24
    409a:	99 06       	cpc	r9, r25
    409c:	a0 f4       	brcc	.+40     	; 0x40c6 <__stack+0xc7>
    409e:	b6 01       	movw	r22, r12
    40a0:	80 e2       	ldi	r24, 0x20	; 32
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	86 d5       	rcall	.+2828   	; 0x4bb2 <fputc>
    40a6:	2a 94       	dec	r2
    40a8:	f5 cf       	rjmp	.-22     	; 0x4094 <__stack+0x95>
    40aa:	f5 01       	movw	r30, r10
    40ac:	37 fc       	sbrc	r3, 7
    40ae:	85 91       	lpm	r24, Z+
    40b0:	37 fe       	sbrs	r3, 7
    40b2:	81 91       	ld	r24, Z+
    40b4:	5f 01       	movw	r10, r30
    40b6:	b6 01       	movw	r22, r12
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	7b d5       	rcall	.+2806   	; 0x4bb2 <fputc>
    40bc:	21 10       	cpse	r2, r1
    40be:	2a 94       	dec	r2
    40c0:	21 e0       	ldi	r18, 0x01	; 1
    40c2:	82 1a       	sub	r8, r18
    40c4:	91 08       	sbc	r9, r1
    40c6:	81 14       	cp	r8, r1
    40c8:	91 04       	cpc	r9, r1
    40ca:	79 f7       	brne	.-34     	; 0x40aa <__stack+0xab>
    40cc:	e1 c0       	rjmp	.+450    	; 0x4290 <__stack+0x291>
    40ce:	84 36       	cpi	r24, 0x64	; 100
    40d0:	11 f0       	breq	.+4      	; 0x40d6 <__stack+0xd7>
    40d2:	89 36       	cpi	r24, 0x69	; 105
    40d4:	39 f5       	brne	.+78     	; 0x4124 <__stack+0x125>
    40d6:	f8 01       	movw	r30, r16
    40d8:	37 fe       	sbrs	r3, 7
    40da:	07 c0       	rjmp	.+14     	; 0x40ea <__stack+0xeb>
    40dc:	60 81       	ld	r22, Z
    40de:	71 81       	ldd	r23, Z+1	; 0x01
    40e0:	82 81       	ldd	r24, Z+2	; 0x02
    40e2:	93 81       	ldd	r25, Z+3	; 0x03
    40e4:	0c 5f       	subi	r16, 0xFC	; 252
    40e6:	1f 4f       	sbci	r17, 0xFF	; 255
    40e8:	08 c0       	rjmp	.+16     	; 0x40fa <__stack+0xfb>
    40ea:	60 81       	ld	r22, Z
    40ec:	71 81       	ldd	r23, Z+1	; 0x01
    40ee:	07 2e       	mov	r0, r23
    40f0:	00 0c       	add	r0, r0
    40f2:	88 0b       	sbc	r24, r24
    40f4:	99 0b       	sbc	r25, r25
    40f6:	0e 5f       	subi	r16, 0xFE	; 254
    40f8:	1f 4f       	sbci	r17, 0xFF	; 255
    40fa:	f3 2d       	mov	r31, r3
    40fc:	ff 76       	andi	r31, 0x6F	; 111
    40fe:	3f 2e       	mov	r3, r31
    4100:	97 ff       	sbrs	r25, 7
    4102:	09 c0       	rjmp	.+18     	; 0x4116 <__stack+0x117>
    4104:	90 95       	com	r25
    4106:	80 95       	com	r24
    4108:	70 95       	com	r23
    410a:	61 95       	neg	r22
    410c:	7f 4f       	sbci	r23, 0xFF	; 255
    410e:	8f 4f       	sbci	r24, 0xFF	; 255
    4110:	9f 4f       	sbci	r25, 0xFF	; 255
    4112:	f0 68       	ori	r31, 0x80	; 128
    4114:	3f 2e       	mov	r3, r31
    4116:	2a e0       	ldi	r18, 0x0A	; 10
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	a3 01       	movw	r20, r6
    411c:	9f d5       	rcall	.+2878   	; 0x4c5c <__ultoa_invert>
    411e:	88 2e       	mov	r8, r24
    4120:	86 18       	sub	r8, r6
    4122:	44 c0       	rjmp	.+136    	; 0x41ac <__stack+0x1ad>
    4124:	85 37       	cpi	r24, 0x75	; 117
    4126:	31 f4       	brne	.+12     	; 0x4134 <__stack+0x135>
    4128:	23 2d       	mov	r18, r3
    412a:	2f 7e       	andi	r18, 0xEF	; 239
    412c:	b2 2e       	mov	r11, r18
    412e:	2a e0       	ldi	r18, 0x0A	; 10
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	25 c0       	rjmp	.+74     	; 0x417e <__stack+0x17f>
    4134:	93 2d       	mov	r25, r3
    4136:	99 7f       	andi	r25, 0xF9	; 249
    4138:	b9 2e       	mov	r11, r25
    413a:	8f 36       	cpi	r24, 0x6F	; 111
    413c:	c1 f0       	breq	.+48     	; 0x416e <__stack+0x16f>
    413e:	18 f4       	brcc	.+6      	; 0x4146 <__stack+0x147>
    4140:	88 35       	cpi	r24, 0x58	; 88
    4142:	79 f0       	breq	.+30     	; 0x4162 <__stack+0x163>
    4144:	ae c0       	rjmp	.+348    	; 0x42a2 <__stack+0x2a3>
    4146:	80 37       	cpi	r24, 0x70	; 112
    4148:	19 f0       	breq	.+6      	; 0x4150 <__stack+0x151>
    414a:	88 37       	cpi	r24, 0x78	; 120
    414c:	21 f0       	breq	.+8      	; 0x4156 <__stack+0x157>
    414e:	a9 c0       	rjmp	.+338    	; 0x42a2 <__stack+0x2a3>
    4150:	e9 2f       	mov	r30, r25
    4152:	e0 61       	ori	r30, 0x10	; 16
    4154:	be 2e       	mov	r11, r30
    4156:	b4 fe       	sbrs	r11, 4
    4158:	0d c0       	rjmp	.+26     	; 0x4174 <__stack+0x175>
    415a:	fb 2d       	mov	r31, r11
    415c:	f4 60       	ori	r31, 0x04	; 4
    415e:	bf 2e       	mov	r11, r31
    4160:	09 c0       	rjmp	.+18     	; 0x4174 <__stack+0x175>
    4162:	34 fe       	sbrs	r3, 4
    4164:	0a c0       	rjmp	.+20     	; 0x417a <__stack+0x17b>
    4166:	29 2f       	mov	r18, r25
    4168:	26 60       	ori	r18, 0x06	; 6
    416a:	b2 2e       	mov	r11, r18
    416c:	06 c0       	rjmp	.+12     	; 0x417a <__stack+0x17b>
    416e:	28 e0       	ldi	r18, 0x08	; 8
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	05 c0       	rjmp	.+10     	; 0x417e <__stack+0x17f>
    4174:	20 e1       	ldi	r18, 0x10	; 16
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	02 c0       	rjmp	.+4      	; 0x417e <__stack+0x17f>
    417a:	20 e1       	ldi	r18, 0x10	; 16
    417c:	32 e0       	ldi	r19, 0x02	; 2
    417e:	f8 01       	movw	r30, r16
    4180:	b7 fe       	sbrs	r11, 7
    4182:	07 c0       	rjmp	.+14     	; 0x4192 <__stack+0x193>
    4184:	60 81       	ld	r22, Z
    4186:	71 81       	ldd	r23, Z+1	; 0x01
    4188:	82 81       	ldd	r24, Z+2	; 0x02
    418a:	93 81       	ldd	r25, Z+3	; 0x03
    418c:	0c 5f       	subi	r16, 0xFC	; 252
    418e:	1f 4f       	sbci	r17, 0xFF	; 255
    4190:	06 c0       	rjmp	.+12     	; 0x419e <__stack+0x19f>
    4192:	60 81       	ld	r22, Z
    4194:	71 81       	ldd	r23, Z+1	; 0x01
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 5f       	subi	r16, 0xFE	; 254
    419c:	1f 4f       	sbci	r17, 0xFF	; 255
    419e:	a3 01       	movw	r20, r6
    41a0:	5d d5       	rcall	.+2746   	; 0x4c5c <__ultoa_invert>
    41a2:	88 2e       	mov	r8, r24
    41a4:	86 18       	sub	r8, r6
    41a6:	fb 2d       	mov	r31, r11
    41a8:	ff 77       	andi	r31, 0x7F	; 127
    41aa:	3f 2e       	mov	r3, r31
    41ac:	36 fe       	sbrs	r3, 6
    41ae:	0d c0       	rjmp	.+26     	; 0x41ca <__stack+0x1cb>
    41b0:	23 2d       	mov	r18, r3
    41b2:	2e 7f       	andi	r18, 0xFE	; 254
    41b4:	a2 2e       	mov	r10, r18
    41b6:	89 14       	cp	r8, r9
    41b8:	58 f4       	brcc	.+22     	; 0x41d0 <__stack+0x1d1>
    41ba:	34 fe       	sbrs	r3, 4
    41bc:	0b c0       	rjmp	.+22     	; 0x41d4 <__stack+0x1d5>
    41be:	32 fc       	sbrc	r3, 2
    41c0:	09 c0       	rjmp	.+18     	; 0x41d4 <__stack+0x1d5>
    41c2:	83 2d       	mov	r24, r3
    41c4:	8e 7e       	andi	r24, 0xEE	; 238
    41c6:	a8 2e       	mov	r10, r24
    41c8:	05 c0       	rjmp	.+10     	; 0x41d4 <__stack+0x1d5>
    41ca:	b8 2c       	mov	r11, r8
    41cc:	a3 2c       	mov	r10, r3
    41ce:	03 c0       	rjmp	.+6      	; 0x41d6 <__stack+0x1d7>
    41d0:	b8 2c       	mov	r11, r8
    41d2:	01 c0       	rjmp	.+2      	; 0x41d6 <__stack+0x1d7>
    41d4:	b9 2c       	mov	r11, r9
    41d6:	a4 fe       	sbrs	r10, 4
    41d8:	0f c0       	rjmp	.+30     	; 0x41f8 <__stack+0x1f9>
    41da:	fe 01       	movw	r30, r28
    41dc:	e8 0d       	add	r30, r8
    41de:	f1 1d       	adc	r31, r1
    41e0:	80 81       	ld	r24, Z
    41e2:	80 33       	cpi	r24, 0x30	; 48
    41e4:	21 f4       	brne	.+8      	; 0x41ee <__stack+0x1ef>
    41e6:	9a 2d       	mov	r25, r10
    41e8:	99 7e       	andi	r25, 0xE9	; 233
    41ea:	a9 2e       	mov	r10, r25
    41ec:	09 c0       	rjmp	.+18     	; 0x4200 <__stack+0x201>
    41ee:	a2 fe       	sbrs	r10, 2
    41f0:	06 c0       	rjmp	.+12     	; 0x41fe <__stack+0x1ff>
    41f2:	b3 94       	inc	r11
    41f4:	b3 94       	inc	r11
    41f6:	04 c0       	rjmp	.+8      	; 0x4200 <__stack+0x201>
    41f8:	8a 2d       	mov	r24, r10
    41fa:	86 78       	andi	r24, 0x86	; 134
    41fc:	09 f0       	breq	.+2      	; 0x4200 <__stack+0x201>
    41fe:	b3 94       	inc	r11
    4200:	a3 fc       	sbrc	r10, 3
    4202:	10 c0       	rjmp	.+32     	; 0x4224 <__stack+0x225>
    4204:	a0 fe       	sbrs	r10, 0
    4206:	06 c0       	rjmp	.+12     	; 0x4214 <__stack+0x215>
    4208:	b2 14       	cp	r11, r2
    420a:	80 f4       	brcc	.+32     	; 0x422c <__stack+0x22d>
    420c:	28 0c       	add	r2, r8
    420e:	92 2c       	mov	r9, r2
    4210:	9b 18       	sub	r9, r11
    4212:	0d c0       	rjmp	.+26     	; 0x422e <__stack+0x22f>
    4214:	b2 14       	cp	r11, r2
    4216:	58 f4       	brcc	.+22     	; 0x422e <__stack+0x22f>
    4218:	b6 01       	movw	r22, r12
    421a:	80 e2       	ldi	r24, 0x20	; 32
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	c9 d4       	rcall	.+2450   	; 0x4bb2 <fputc>
    4220:	b3 94       	inc	r11
    4222:	f8 cf       	rjmp	.-16     	; 0x4214 <__stack+0x215>
    4224:	b2 14       	cp	r11, r2
    4226:	18 f4       	brcc	.+6      	; 0x422e <__stack+0x22f>
    4228:	2b 18       	sub	r2, r11
    422a:	02 c0       	rjmp	.+4      	; 0x4230 <__stack+0x231>
    422c:	98 2c       	mov	r9, r8
    422e:	21 2c       	mov	r2, r1
    4230:	a4 fe       	sbrs	r10, 4
    4232:	0f c0       	rjmp	.+30     	; 0x4252 <__stack+0x253>
    4234:	b6 01       	movw	r22, r12
    4236:	80 e3       	ldi	r24, 0x30	; 48
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	bb d4       	rcall	.+2422   	; 0x4bb2 <fputc>
    423c:	a2 fe       	sbrs	r10, 2
    423e:	16 c0       	rjmp	.+44     	; 0x426c <__stack+0x26d>
    4240:	a1 fc       	sbrc	r10, 1
    4242:	03 c0       	rjmp	.+6      	; 0x424a <__stack+0x24b>
    4244:	88 e7       	ldi	r24, 0x78	; 120
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	02 c0       	rjmp	.+4      	; 0x424e <__stack+0x24f>
    424a:	88 e5       	ldi	r24, 0x58	; 88
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	b6 01       	movw	r22, r12
    4250:	0c c0       	rjmp	.+24     	; 0x426a <__stack+0x26b>
    4252:	8a 2d       	mov	r24, r10
    4254:	86 78       	andi	r24, 0x86	; 134
    4256:	51 f0       	breq	.+20     	; 0x426c <__stack+0x26d>
    4258:	a1 fe       	sbrs	r10, 1
    425a:	02 c0       	rjmp	.+4      	; 0x4260 <__stack+0x261>
    425c:	8b e2       	ldi	r24, 0x2B	; 43
    425e:	01 c0       	rjmp	.+2      	; 0x4262 <__stack+0x263>
    4260:	80 e2       	ldi	r24, 0x20	; 32
    4262:	a7 fc       	sbrc	r10, 7
    4264:	8d e2       	ldi	r24, 0x2D	; 45
    4266:	b6 01       	movw	r22, r12
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	a3 d4       	rcall	.+2374   	; 0x4bb2 <fputc>
    426c:	89 14       	cp	r8, r9
    426e:	30 f4       	brcc	.+12     	; 0x427c <__stack+0x27d>
    4270:	b6 01       	movw	r22, r12
    4272:	80 e3       	ldi	r24, 0x30	; 48
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	9d d4       	rcall	.+2362   	; 0x4bb2 <fputc>
    4278:	9a 94       	dec	r9
    427a:	f8 cf       	rjmp	.-16     	; 0x426c <__stack+0x26d>
    427c:	8a 94       	dec	r8
    427e:	f3 01       	movw	r30, r6
    4280:	e8 0d       	add	r30, r8
    4282:	f1 1d       	adc	r31, r1
    4284:	80 81       	ld	r24, Z
    4286:	b6 01       	movw	r22, r12
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	93 d4       	rcall	.+2342   	; 0x4bb2 <fputc>
    428c:	81 10       	cpse	r8, r1
    428e:	f6 cf       	rjmp	.-20     	; 0x427c <__stack+0x27d>
    4290:	22 20       	and	r2, r2
    4292:	09 f4       	brne	.+2      	; 0x4296 <__stack+0x297>
    4294:	4e ce       	rjmp	.-868    	; 0x3f32 <vfprintf+0x46>
    4296:	b6 01       	movw	r22, r12
    4298:	80 e2       	ldi	r24, 0x20	; 32
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	8a d4       	rcall	.+2324   	; 0x4bb2 <fputc>
    429e:	2a 94       	dec	r2
    42a0:	f7 cf       	rjmp	.-18     	; 0x4290 <__stack+0x291>
    42a2:	f6 01       	movw	r30, r12
    42a4:	86 81       	ldd	r24, Z+6	; 0x06
    42a6:	97 81       	ldd	r25, Z+7	; 0x07
    42a8:	02 c0       	rjmp	.+4      	; 0x42ae <__stack+0x2af>
    42aa:	8f ef       	ldi	r24, 0xFF	; 255
    42ac:	9f ef       	ldi	r25, 0xFF	; 255
    42ae:	2b 96       	adiw	r28, 0x0b	; 11
    42b0:	cd bf       	out	0x3d, r28	; 61
    42b2:	de bf       	out	0x3e, r29	; 62
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	ff 90       	pop	r15
    42be:	ef 90       	pop	r14
    42c0:	df 90       	pop	r13
    42c2:	cf 90       	pop	r12
    42c4:	bf 90       	pop	r11
    42c6:	af 90       	pop	r10
    42c8:	9f 90       	pop	r9
    42ca:	8f 90       	pop	r8
    42cc:	7f 90       	pop	r7
    42ce:	6f 90       	pop	r6
    42d0:	5f 90       	pop	r5
    42d2:	4f 90       	pop	r4
    42d4:	3f 90       	pop	r3
    42d6:	2f 90       	pop	r2
    42d8:	08 95       	ret

000042da <putval>:
    42da:	20 fd       	sbrc	r18, 0
    42dc:	09 c0       	rjmp	.+18     	; 0x42f0 <putval+0x16>
    42de:	fc 01       	movw	r30, r24
    42e0:	23 fd       	sbrc	r18, 3
    42e2:	05 c0       	rjmp	.+10     	; 0x42ee <putval+0x14>
    42e4:	22 ff       	sbrs	r18, 2
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <putval+0x12>
    42e8:	73 83       	std	Z+3, r23	; 0x03
    42ea:	62 83       	std	Z+2, r22	; 0x02
    42ec:	51 83       	std	Z+1, r21	; 0x01
    42ee:	40 83       	st	Z, r20
    42f0:	08 95       	ret

000042f2 <mulacc>:
    42f2:	44 fd       	sbrc	r20, 4
    42f4:	17 c0       	rjmp	.+46     	; 0x4324 <mulacc+0x32>
    42f6:	46 fd       	sbrc	r20, 6
    42f8:	17 c0       	rjmp	.+46     	; 0x4328 <mulacc+0x36>
    42fa:	ab 01       	movw	r20, r22
    42fc:	bc 01       	movw	r22, r24
    42fe:	da 01       	movw	r26, r20
    4300:	fb 01       	movw	r30, r22
    4302:	aa 0f       	add	r26, r26
    4304:	bb 1f       	adc	r27, r27
    4306:	ee 1f       	adc	r30, r30
    4308:	ff 1f       	adc	r31, r31
    430a:	10 94       	com	r1
    430c:	d1 f7       	brne	.-12     	; 0x4302 <mulacc+0x10>
    430e:	4a 0f       	add	r20, r26
    4310:	5b 1f       	adc	r21, r27
    4312:	6e 1f       	adc	r22, r30
    4314:	7f 1f       	adc	r23, r31
    4316:	cb 01       	movw	r24, r22
    4318:	ba 01       	movw	r22, r20
    431a:	66 0f       	add	r22, r22
    431c:	77 1f       	adc	r23, r23
    431e:	88 1f       	adc	r24, r24
    4320:	99 1f       	adc	r25, r25
    4322:	09 c0       	rjmp	.+18     	; 0x4336 <mulacc+0x44>
    4324:	33 e0       	ldi	r19, 0x03	; 3
    4326:	01 c0       	rjmp	.+2      	; 0x432a <mulacc+0x38>
    4328:	34 e0       	ldi	r19, 0x04	; 4
    432a:	66 0f       	add	r22, r22
    432c:	77 1f       	adc	r23, r23
    432e:	88 1f       	adc	r24, r24
    4330:	99 1f       	adc	r25, r25
    4332:	31 50       	subi	r19, 0x01	; 1
    4334:	d1 f7       	brne	.-12     	; 0x432a <mulacc+0x38>
    4336:	62 0f       	add	r22, r18
    4338:	71 1d       	adc	r23, r1
    433a:	81 1d       	adc	r24, r1
    433c:	91 1d       	adc	r25, r1
    433e:	08 95       	ret

00004340 <skip_spaces>:
    4340:	0f 93       	push	r16
    4342:	1f 93       	push	r17
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	8c 01       	movw	r16, r24
    434a:	c8 01       	movw	r24, r16
    434c:	f4 d3       	rcall	.+2024   	; 0x4b36 <fgetc>
    434e:	ec 01       	movw	r28, r24
    4350:	97 fd       	sbrc	r25, 7
    4352:	06 c0       	rjmp	.+12     	; 0x4360 <skip_spaces+0x20>
    4354:	c0 d3       	rcall	.+1920   	; 0x4ad6 <isspace>
    4356:	89 2b       	or	r24, r25
    4358:	c1 f7       	brne	.-16     	; 0x434a <skip_spaces+0xa>
    435a:	b8 01       	movw	r22, r16
    435c:	ce 01       	movw	r24, r28
    435e:	65 d4       	rcall	.+2250   	; 0x4c2a <ungetc>
    4360:	ce 01       	movw	r24, r28
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
    4366:	1f 91       	pop	r17
    4368:	0f 91       	pop	r16
    436a:	08 95       	ret

0000436c <conv_int>:
    436c:	8f 92       	push	r8
    436e:	9f 92       	push	r9
    4370:	af 92       	push	r10
    4372:	bf 92       	push	r11
    4374:	ef 92       	push	r14
    4376:	ff 92       	push	r15
    4378:	0f 93       	push	r16
    437a:	1f 93       	push	r17
    437c:	cf 93       	push	r28
    437e:	df 93       	push	r29
    4380:	8c 01       	movw	r16, r24
    4382:	d6 2f       	mov	r29, r22
    4384:	7a 01       	movw	r14, r20
    4386:	b2 2e       	mov	r11, r18
    4388:	d6 d3       	rcall	.+1964   	; 0x4b36 <fgetc>
    438a:	9c 01       	movw	r18, r24
    438c:	33 27       	eor	r19, r19
    438e:	2b 32       	cpi	r18, 0x2B	; 43
    4390:	31 05       	cpc	r19, r1
    4392:	31 f0       	breq	.+12     	; 0x43a0 <conv_int+0x34>
    4394:	2d 32       	cpi	r18, 0x2D	; 45
    4396:	31 05       	cpc	r19, r1
    4398:	59 f4       	brne	.+22     	; 0x43b0 <conv_int+0x44>
    439a:	8b 2d       	mov	r24, r11
    439c:	80 68       	ori	r24, 0x80	; 128
    439e:	b8 2e       	mov	r11, r24
    43a0:	d1 50       	subi	r29, 0x01	; 1
    43a2:	11 f4       	brne	.+4      	; 0x43a8 <conv_int+0x3c>
    43a4:	80 e0       	ldi	r24, 0x00	; 0
    43a6:	61 c0       	rjmp	.+194    	; 0x446a <conv_int+0xfe>
    43a8:	c8 01       	movw	r24, r16
    43aa:	c5 d3       	rcall	.+1930   	; 0x4b36 <fgetc>
    43ac:	97 fd       	sbrc	r25, 7
    43ae:	fa cf       	rjmp	.-12     	; 0x43a4 <conv_int+0x38>
    43b0:	cb 2d       	mov	r28, r11
    43b2:	cd 7f       	andi	r28, 0xFD	; 253
    43b4:	2b 2d       	mov	r18, r11
    43b6:	20 73       	andi	r18, 0x30	; 48
    43b8:	f9 f4       	brne	.+62     	; 0x43f8 <conv_int+0x8c>
    43ba:	80 33       	cpi	r24, 0x30	; 48
    43bc:	e9 f4       	brne	.+58     	; 0x43f8 <conv_int+0x8c>
    43be:	aa 24       	eor	r10, r10
    43c0:	aa 94       	dec	r10
    43c2:	ad 0e       	add	r10, r29
    43c4:	09 f4       	brne	.+2      	; 0x43c8 <conv_int+0x5c>
    43c6:	3e c0       	rjmp	.+124    	; 0x4444 <conv_int+0xd8>
    43c8:	c8 01       	movw	r24, r16
    43ca:	b5 d3       	rcall	.+1898   	; 0x4b36 <fgetc>
    43cc:	97 fd       	sbrc	r25, 7
    43ce:	3a c0       	rjmp	.+116    	; 0x4444 <conv_int+0xd8>
    43d0:	9c 01       	movw	r18, r24
    43d2:	2f 7d       	andi	r18, 0xDF	; 223
    43d4:	33 27       	eor	r19, r19
    43d6:	28 35       	cpi	r18, 0x58	; 88
    43d8:	31 05       	cpc	r19, r1
    43da:	41 f4       	brne	.+16     	; 0x43ec <conv_int+0x80>
    43dc:	c2 64       	ori	r28, 0x42	; 66
    43de:	d2 50       	subi	r29, 0x02	; 2
    43e0:	89 f1       	breq	.+98     	; 0x4444 <conv_int+0xd8>
    43e2:	c8 01       	movw	r24, r16
    43e4:	a8 d3       	rcall	.+1872   	; 0x4b36 <fgetc>
    43e6:	97 ff       	sbrs	r25, 7
    43e8:	07 c0       	rjmp	.+14     	; 0x43f8 <conv_int+0x8c>
    43ea:	2c c0       	rjmp	.+88     	; 0x4444 <conv_int+0xd8>
    43ec:	b6 fe       	sbrs	r11, 6
    43ee:	02 c0       	rjmp	.+4      	; 0x43f4 <conv_int+0x88>
    43f0:	c2 60       	ori	r28, 0x02	; 2
    43f2:	01 c0       	rjmp	.+2      	; 0x43f6 <conv_int+0x8a>
    43f4:	c2 61       	ori	r28, 0x12	; 18
    43f6:	da 2d       	mov	r29, r10
    43f8:	81 2c       	mov	r8, r1
    43fa:	91 2c       	mov	r9, r1
    43fc:	54 01       	movw	r10, r8
    43fe:	20 ed       	ldi	r18, 0xD0	; 208
    4400:	28 0f       	add	r18, r24
    4402:	28 30       	cpi	r18, 0x08	; 8
    4404:	78 f0       	brcs	.+30     	; 0x4424 <conv_int+0xb8>
    4406:	c4 ff       	sbrs	r28, 4
    4408:	03 c0       	rjmp	.+6      	; 0x4410 <conv_int+0xa4>
    440a:	b8 01       	movw	r22, r16
    440c:	0e d4       	rcall	.+2076   	; 0x4c2a <ungetc>
    440e:	17 c0       	rjmp	.+46     	; 0x443e <conv_int+0xd2>
    4410:	2a 30       	cpi	r18, 0x0A	; 10
    4412:	40 f0       	brcs	.+16     	; 0x4424 <conv_int+0xb8>
    4414:	c6 ff       	sbrs	r28, 6
    4416:	f9 cf       	rjmp	.-14     	; 0x440a <conv_int+0x9e>
    4418:	2f 7d       	andi	r18, 0xDF	; 223
    441a:	3f ee       	ldi	r19, 0xEF	; 239
    441c:	32 0f       	add	r19, r18
    441e:	36 30       	cpi	r19, 0x06	; 6
    4420:	a0 f7       	brcc	.-24     	; 0x440a <conv_int+0x9e>
    4422:	27 50       	subi	r18, 0x07	; 7
    4424:	4c 2f       	mov	r20, r28
    4426:	c5 01       	movw	r24, r10
    4428:	b4 01       	movw	r22, r8
    442a:	63 df       	rcall	.-314    	; 0x42f2 <mulacc>
    442c:	4b 01       	movw	r8, r22
    442e:	5c 01       	movw	r10, r24
    4430:	c2 60       	ori	r28, 0x02	; 2
    4432:	d1 50       	subi	r29, 0x01	; 1
    4434:	51 f0       	breq	.+20     	; 0x444a <conv_int+0xde>
    4436:	c8 01       	movw	r24, r16
    4438:	7e d3       	rcall	.+1788   	; 0x4b36 <fgetc>
    443a:	97 ff       	sbrs	r25, 7
    443c:	e0 cf       	rjmp	.-64     	; 0x43fe <conv_int+0x92>
    443e:	c1 fd       	sbrc	r28, 1
    4440:	04 c0       	rjmp	.+8      	; 0x444a <conv_int+0xde>
    4442:	b0 cf       	rjmp	.-160    	; 0x43a4 <conv_int+0x38>
    4444:	81 2c       	mov	r8, r1
    4446:	91 2c       	mov	r9, r1
    4448:	54 01       	movw	r10, r8
    444a:	c7 ff       	sbrs	r28, 7
    444c:	08 c0       	rjmp	.+16     	; 0x445e <conv_int+0xf2>
    444e:	b0 94       	com	r11
    4450:	a0 94       	com	r10
    4452:	90 94       	com	r9
    4454:	80 94       	com	r8
    4456:	81 1c       	adc	r8, r1
    4458:	91 1c       	adc	r9, r1
    445a:	a1 1c       	adc	r10, r1
    445c:	b1 1c       	adc	r11, r1
    445e:	2c 2f       	mov	r18, r28
    4460:	b5 01       	movw	r22, r10
    4462:	a4 01       	movw	r20, r8
    4464:	c7 01       	movw	r24, r14
    4466:	39 df       	rcall	.-398    	; 0x42da <putval>
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	df 91       	pop	r29
    446c:	cf 91       	pop	r28
    446e:	1f 91       	pop	r17
    4470:	0f 91       	pop	r16
    4472:	ff 90       	pop	r15
    4474:	ef 90       	pop	r14
    4476:	bf 90       	pop	r11
    4478:	af 90       	pop	r10
    447a:	9f 90       	pop	r9
    447c:	8f 90       	pop	r8
    447e:	08 95       	ret

00004480 <conv_brk>:
    4480:	5f 92       	push	r5
    4482:	6f 92       	push	r6
    4484:	7f 92       	push	r7
    4486:	8f 92       	push	r8
    4488:	9f 92       	push	r9
    448a:	af 92       	push	r10
    448c:	bf 92       	push	r11
    448e:	cf 92       	push	r12
    4490:	df 92       	push	r13
    4492:	ef 92       	push	r14
    4494:	ff 92       	push	r15
    4496:	0f 93       	push	r16
    4498:	1f 93       	push	r17
    449a:	cf 93       	push	r28
    449c:	df 93       	push	r29
    449e:	cd b7       	in	r28, 0x3d	; 61
    44a0:	de b7       	in	r29, 0x3e	; 62
    44a2:	a0 97       	sbiw	r28, 0x20	; 32
    44a4:	cd bf       	out	0x3d, r28	; 61
    44a6:	de bf       	out	0x3e, r29	; 62
    44a8:	5c 01       	movw	r10, r24
    44aa:	96 2e       	mov	r9, r22
    44ac:	7a 01       	movw	r14, r20
    44ae:	f9 01       	movw	r30, r18
    44b0:	8e 01       	movw	r16, r28
    44b2:	0f 5f       	subi	r16, 0xFF	; 255
    44b4:	1f 4f       	sbci	r17, 0xFF	; 255
    44b6:	68 01       	movw	r12, r16
    44b8:	80 e2       	ldi	r24, 0x20	; 32
    44ba:	d8 01       	movw	r26, r16
    44bc:	1d 92       	st	X+, r1
    44be:	8a 95       	dec	r24
    44c0:	e9 f7       	brne	.-6      	; 0x44bc <conv_brk+0x3c>
    44c2:	d5 01       	movw	r26, r10
    44c4:	13 96       	adiw	r26, 0x03	; 3
    44c6:	8c 90       	ld	r8, X
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	61 2c       	mov	r6, r1
    44ce:	71 2c       	mov	r7, r1
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	61 e0       	ldi	r22, 0x01	; 1
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	83 fc       	sbrc	r8, 3
    44d8:	25 91       	lpm	r18, Z+
    44da:	83 fe       	sbrs	r8, 3
    44dc:	21 91       	ld	r18, Z+
    44de:	8f 01       	movw	r16, r30
    44e0:	52 2e       	mov	r5, r18
    44e2:	21 11       	cpse	r18, r1
    44e4:	03 c0       	rjmp	.+6      	; 0x44ec <conv_brk+0x6c>
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	90 c0       	rjmp	.+288    	; 0x460c <conv_brk+0x18c>
    44ec:	2e 35       	cpi	r18, 0x5E	; 94
    44ee:	11 f4       	brne	.+4      	; 0x44f4 <conv_brk+0x74>
    44f0:	00 97       	sbiw	r24, 0x00	; 0
    44f2:	51 f1       	breq	.+84     	; 0x4548 <conv_brk+0xc8>
    44f4:	43 2f       	mov	r20, r19
    44f6:	50 e0       	ldi	r21, 0x00	; 0
    44f8:	48 17       	cp	r20, r24
    44fa:	59 07       	cpc	r21, r25
    44fc:	3c f4       	brge	.+14     	; 0x450c <conv_brk+0x8c>
    44fe:	2d 35       	cpi	r18, 0x5D	; 93
    4500:	59 f1       	breq	.+86     	; 0x4558 <conv_brk+0xd8>
    4502:	2d 32       	cpi	r18, 0x2D	; 45
    4504:	19 f4       	brne	.+6      	; 0x450c <conv_brk+0x8c>
    4506:	77 20       	and	r7, r7
    4508:	09 f1       	breq	.+66     	; 0x454c <conv_brk+0xcc>
    450a:	03 c0       	rjmp	.+6      	; 0x4512 <conv_brk+0x92>
    450c:	77 20       	and	r7, r7
    450e:	09 f4       	brne	.+2      	; 0x4512 <conv_brk+0x92>
    4510:	68 c0       	rjmp	.+208    	; 0x45e2 <conv_brk+0x162>
    4512:	45 2d       	mov	r20, r5
    4514:	46 95       	lsr	r20
    4516:	46 95       	lsr	r20
    4518:	46 95       	lsr	r20
    451a:	d6 01       	movw	r26, r12
    451c:	a4 0f       	add	r26, r20
    451e:	b1 1d       	adc	r27, r1
    4520:	45 2d       	mov	r20, r5
    4522:	47 70       	andi	r20, 0x07	; 7
    4524:	8b 01       	movw	r16, r22
    4526:	02 c0       	rjmp	.+4      	; 0x452c <conv_brk+0xac>
    4528:	00 0f       	add	r16, r16
    452a:	11 1f       	adc	r17, r17
    452c:	4a 95       	dec	r20
    452e:	e2 f7       	brpl	.-8      	; 0x4528 <conv_brk+0xa8>
    4530:	a8 01       	movw	r20, r16
    4532:	5c 91       	ld	r21, X
    4534:	45 2b       	or	r20, r21
    4536:	4c 93       	st	X, r20
    4538:	65 14       	cp	r6, r5
    453a:	59 f0       	breq	.+22     	; 0x4552 <conv_brk+0xd2>
    453c:	56 14       	cp	r5, r6
    453e:	10 f4       	brcc	.+4      	; 0x4544 <conv_brk+0xc4>
    4540:	53 94       	inc	r5
    4542:	e7 cf       	rjmp	.-50     	; 0x4512 <conv_brk+0x92>
    4544:	5a 94       	dec	r5
    4546:	e5 cf       	rjmp	.-54     	; 0x4512 <conv_brk+0x92>
    4548:	31 e0       	ldi	r19, 0x01	; 1
    454a:	04 c0       	rjmp	.+8      	; 0x4554 <conv_brk+0xd4>
    454c:	77 24       	eor	r7, r7
    454e:	73 94       	inc	r7
    4550:	01 c0       	rjmp	.+2      	; 0x4554 <conv_brk+0xd4>
    4552:	71 2c       	mov	r7, r1
    4554:	01 96       	adiw	r24, 0x01	; 1
    4556:	bf cf       	rjmp	.-130    	; 0x44d6 <conv_brk+0x56>
    4558:	77 20       	and	r7, r7
    455a:	19 f0       	breq	.+6      	; 0x4562 <conv_brk+0xe2>
    455c:	8e 81       	ldd	r24, Y+6	; 0x06
    455e:	80 62       	ori	r24, 0x20	; 32
    4560:	8e 83       	std	Y+6, r24	; 0x06
    4562:	31 11       	cpse	r19, r1
    4564:	03 c0       	rjmp	.+6      	; 0x456c <conv_brk+0xec>
    4566:	88 24       	eor	r8, r8
    4568:	83 94       	inc	r8
    456a:	17 c0       	rjmp	.+46     	; 0x459a <conv_brk+0x11a>
    456c:	f6 01       	movw	r30, r12
    456e:	9e 01       	movw	r18, r28
    4570:	2f 5d       	subi	r18, 0xDF	; 223
    4572:	3f 4f       	sbci	r19, 0xFF	; 255
    4574:	80 81       	ld	r24, Z
    4576:	80 95       	com	r24
    4578:	81 93       	st	Z+, r24
    457a:	2e 17       	cp	r18, r30
    457c:	3f 07       	cpc	r19, r31
    457e:	d1 f7       	brne	.-12     	; 0x4574 <conv_brk+0xf4>
    4580:	f2 cf       	rjmp	.-28     	; 0x4566 <conv_brk+0xe6>
    4582:	e1 14       	cp	r14, r1
    4584:	f1 04       	cpc	r15, r1
    4586:	29 f0       	breq	.+10     	; 0x4592 <conv_brk+0x112>
    4588:	d7 01       	movw	r26, r14
    458a:	8c 93       	st	X, r24
    458c:	f7 01       	movw	r30, r14
    458e:	31 96       	adiw	r30, 0x01	; 1
    4590:	7f 01       	movw	r14, r30
    4592:	9a 94       	dec	r9
    4594:	81 2c       	mov	r8, r1
    4596:	99 20       	and	r9, r9
    4598:	e9 f0       	breq	.+58     	; 0x45d4 <conv_brk+0x154>
    459a:	c5 01       	movw	r24, r10
    459c:	cc d2       	rcall	.+1432   	; 0x4b36 <fgetc>
    459e:	97 fd       	sbrc	r25, 7
    45a0:	17 c0       	rjmp	.+46     	; 0x45d0 <conv_brk+0x150>
    45a2:	fc 01       	movw	r30, r24
    45a4:	ff 27       	eor	r31, r31
    45a6:	23 e0       	ldi	r18, 0x03	; 3
    45a8:	f5 95       	asr	r31
    45aa:	e7 95       	ror	r30
    45ac:	2a 95       	dec	r18
    45ae:	e1 f7       	brne	.-8      	; 0x45a8 <conv_brk+0x128>
    45b0:	ec 0d       	add	r30, r12
    45b2:	fd 1d       	adc	r31, r13
    45b4:	20 81       	ld	r18, Z
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	ac 01       	movw	r20, r24
    45ba:	47 70       	andi	r20, 0x07	; 7
    45bc:	55 27       	eor	r21, r21
    45be:	02 c0       	rjmp	.+4      	; 0x45c4 <conv_brk+0x144>
    45c0:	35 95       	asr	r19
    45c2:	27 95       	ror	r18
    45c4:	4a 95       	dec	r20
    45c6:	e2 f7       	brpl	.-8      	; 0x45c0 <conv_brk+0x140>
    45c8:	20 fd       	sbrc	r18, 0
    45ca:	db cf       	rjmp	.-74     	; 0x4582 <conv_brk+0x102>
    45cc:	b5 01       	movw	r22, r10
    45ce:	2d d3       	rcall	.+1626   	; 0x4c2a <ungetc>
    45d0:	81 10       	cpse	r8, r1
    45d2:	89 cf       	rjmp	.-238    	; 0x44e6 <conv_brk+0x66>
    45d4:	e1 14       	cp	r14, r1
    45d6:	f1 04       	cpc	r15, r1
    45d8:	11 f0       	breq	.+4      	; 0x45de <conv_brk+0x15e>
    45da:	d7 01       	movw	r26, r14
    45dc:	1c 92       	st	X, r1
    45de:	c8 01       	movw	r24, r16
    45e0:	15 c0       	rjmp	.+42     	; 0x460c <conv_brk+0x18c>
    45e2:	42 2f       	mov	r20, r18
    45e4:	46 95       	lsr	r20
    45e6:	46 95       	lsr	r20
    45e8:	46 95       	lsr	r20
    45ea:	d6 01       	movw	r26, r12
    45ec:	a4 0f       	add	r26, r20
    45ee:	b1 1d       	adc	r27, r1
    45f0:	42 2f       	mov	r20, r18
    45f2:	47 70       	andi	r20, 0x07	; 7
    45f4:	8b 01       	movw	r16, r22
    45f6:	02 c0       	rjmp	.+4      	; 0x45fc <conv_brk+0x17c>
    45f8:	00 0f       	add	r16, r16
    45fa:	11 1f       	adc	r17, r17
    45fc:	4a 95       	dec	r20
    45fe:	e2 f7       	brpl	.-8      	; 0x45f8 <conv_brk+0x178>
    4600:	a8 01       	movw	r20, r16
    4602:	5c 91       	ld	r21, X
    4604:	45 2b       	or	r20, r21
    4606:	4c 93       	st	X, r20
    4608:	62 2e       	mov	r6, r18
    460a:	a4 cf       	rjmp	.-184    	; 0x4554 <conv_brk+0xd4>
    460c:	a0 96       	adiw	r28, 0x20	; 32
    460e:	cd bf       	out	0x3d, r28	; 61
    4610:	de bf       	out	0x3e, r29	; 62
    4612:	df 91       	pop	r29
    4614:	cf 91       	pop	r28
    4616:	1f 91       	pop	r17
    4618:	0f 91       	pop	r16
    461a:	ff 90       	pop	r15
    461c:	ef 90       	pop	r14
    461e:	df 90       	pop	r13
    4620:	cf 90       	pop	r12
    4622:	bf 90       	pop	r11
    4624:	af 90       	pop	r10
    4626:	9f 90       	pop	r9
    4628:	8f 90       	pop	r8
    462a:	7f 90       	pop	r7
    462c:	6f 90       	pop	r6
    462e:	5f 90       	pop	r5
    4630:	08 95       	ret

00004632 <vfscanf>:
    4632:	5f 92       	push	r5
    4634:	6f 92       	push	r6
    4636:	7f 92       	push	r7
    4638:	8f 92       	push	r8
    463a:	9f 92       	push	r9
    463c:	af 92       	push	r10
    463e:	bf 92       	push	r11
    4640:	cf 92       	push	r12
    4642:	df 92       	push	r13
    4644:	ef 92       	push	r14
    4646:	ff 92       	push	r15
    4648:	0f 93       	push	r16
    464a:	1f 93       	push	r17
    464c:	cf 93       	push	r28
    464e:	df 93       	push	r29
    4650:	6c 01       	movw	r12, r24
    4652:	eb 01       	movw	r28, r22
    4654:	5a 01       	movw	r10, r20
    4656:	fc 01       	movw	r30, r24
    4658:	16 82       	std	Z+6, r1	; 0x06
    465a:	17 82       	std	Z+7, r1	; 0x07
    465c:	51 2c       	mov	r5, r1
    465e:	f6 01       	movw	r30, r12
    4660:	e3 80       	ldd	r14, Z+3	; 0x03
    4662:	fe 01       	movw	r30, r28
    4664:	e3 fc       	sbrc	r14, 3
    4666:	85 91       	lpm	r24, Z+
    4668:	e3 fe       	sbrs	r14, 3
    466a:	81 91       	ld	r24, Z+
    466c:	18 2f       	mov	r17, r24
    466e:	ef 01       	movw	r28, r30
    4670:	88 23       	and	r24, r24
    4672:	09 f4       	brne	.+2      	; 0x4676 <vfscanf+0x44>
    4674:	e0 c0       	rjmp	.+448    	; 0x4836 <vfscanf+0x204>
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	2e d2       	rcall	.+1116   	; 0x4ad6 <isspace>
    467a:	89 2b       	or	r24, r25
    467c:	19 f0       	breq	.+6      	; 0x4684 <vfscanf+0x52>
    467e:	c6 01       	movw	r24, r12
    4680:	5f de       	rcall	.-834    	; 0x4340 <skip_spaces>
    4682:	ed cf       	rjmp	.-38     	; 0x465e <vfscanf+0x2c>
    4684:	15 32       	cpi	r17, 0x25	; 37
    4686:	41 f4       	brne	.+16     	; 0x4698 <vfscanf+0x66>
    4688:	fe 01       	movw	r30, r28
    468a:	e3 fc       	sbrc	r14, 3
    468c:	15 91       	lpm	r17, Z+
    468e:	e3 fe       	sbrs	r14, 3
    4690:	11 91       	ld	r17, Z+
    4692:	ef 01       	movw	r28, r30
    4694:	15 32       	cpi	r17, 0x25	; 37
    4696:	71 f4       	brne	.+28     	; 0x46b4 <vfscanf+0x82>
    4698:	c6 01       	movw	r24, r12
    469a:	4d d2       	rcall	.+1178   	; 0x4b36 <fgetc>
    469c:	97 fd       	sbrc	r25, 7
    469e:	c9 c0       	rjmp	.+402    	; 0x4832 <vfscanf+0x200>
    46a0:	41 2f       	mov	r20, r17
    46a2:	50 e0       	ldi	r21, 0x00	; 0
    46a4:	9c 01       	movw	r18, r24
    46a6:	33 27       	eor	r19, r19
    46a8:	24 17       	cp	r18, r20
    46aa:	35 07       	cpc	r19, r21
    46ac:	c1 f2       	breq	.-80     	; 0x465e <vfscanf+0x2c>
    46ae:	b6 01       	movw	r22, r12
    46b0:	bc d2       	rcall	.+1400   	; 0x4c2a <ungetc>
    46b2:	c1 c0       	rjmp	.+386    	; 0x4836 <vfscanf+0x204>
    46b4:	1a 32       	cpi	r17, 0x2A	; 42
    46b6:	39 f4       	brne	.+14     	; 0x46c6 <vfscanf+0x94>
    46b8:	e3 fc       	sbrc	r14, 3
    46ba:	15 91       	lpm	r17, Z+
    46bc:	e3 fe       	sbrs	r14, 3
    46be:	11 91       	ld	r17, Z+
    46c0:	ef 01       	movw	r28, r30
    46c2:	01 e0       	ldi	r16, 0x01	; 1
    46c4:	01 c0       	rjmp	.+2      	; 0x46c8 <vfscanf+0x96>
    46c6:	00 e0       	ldi	r16, 0x00	; 0
    46c8:	f1 2c       	mov	r15, r1
    46ca:	20 ed       	ldi	r18, 0xD0	; 208
    46cc:	21 0f       	add	r18, r17
    46ce:	2a 30       	cpi	r18, 0x0A	; 10
    46d0:	78 f4       	brcc	.+30     	; 0x46f0 <vfscanf+0xbe>
    46d2:	02 60       	ori	r16, 0x02	; 2
    46d4:	6f 2d       	mov	r22, r15
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	40 e2       	ldi	r20, 0x20	; 32
    46de:	09 de       	rcall	.-1006   	; 0x42f2 <mulacc>
    46e0:	f6 2e       	mov	r15, r22
    46e2:	fe 01       	movw	r30, r28
    46e4:	e3 fc       	sbrc	r14, 3
    46e6:	15 91       	lpm	r17, Z+
    46e8:	e3 fe       	sbrs	r14, 3
    46ea:	11 91       	ld	r17, Z+
    46ec:	ef 01       	movw	r28, r30
    46ee:	ed cf       	rjmp	.-38     	; 0x46ca <vfscanf+0x98>
    46f0:	01 ff       	sbrs	r16, 1
    46f2:	03 c0       	rjmp	.+6      	; 0x46fa <vfscanf+0xc8>
    46f4:	f1 10       	cpse	r15, r1
    46f6:	03 c0       	rjmp	.+6      	; 0x46fe <vfscanf+0xcc>
    46f8:	9e c0       	rjmp	.+316    	; 0x4836 <vfscanf+0x204>
    46fa:	ff 24       	eor	r15, r15
    46fc:	fa 94       	dec	r15
    46fe:	18 36       	cpi	r17, 0x68	; 104
    4700:	19 f0       	breq	.+6      	; 0x4708 <vfscanf+0xd6>
    4702:	1c 36       	cpi	r17, 0x6C	; 108
    4704:	51 f0       	breq	.+20     	; 0x471a <vfscanf+0xe8>
    4706:	10 c0       	rjmp	.+32     	; 0x4728 <vfscanf+0xf6>
    4708:	fe 01       	movw	r30, r28
    470a:	e3 fc       	sbrc	r14, 3
    470c:	15 91       	lpm	r17, Z+
    470e:	e3 fe       	sbrs	r14, 3
    4710:	11 91       	ld	r17, Z+
    4712:	ef 01       	movw	r28, r30
    4714:	18 36       	cpi	r17, 0x68	; 104
    4716:	41 f4       	brne	.+16     	; 0x4728 <vfscanf+0xf6>
    4718:	08 60       	ori	r16, 0x08	; 8
    471a:	04 60       	ori	r16, 0x04	; 4
    471c:	fe 01       	movw	r30, r28
    471e:	e3 fc       	sbrc	r14, 3
    4720:	15 91       	lpm	r17, Z+
    4722:	e3 fe       	sbrs	r14, 3
    4724:	11 91       	ld	r17, Z+
    4726:	ef 01       	movw	r28, r30
    4728:	11 23       	and	r17, r17
    472a:	09 f4       	brne	.+2      	; 0x472e <vfscanf+0xfc>
    472c:	84 c0       	rjmp	.+264    	; 0x4836 <vfscanf+0x204>
    472e:	61 2f       	mov	r22, r17
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	84 ea       	ldi	r24, 0xA4	; 164
    4734:	92 e0       	ldi	r25, 0x02	; 2
    4736:	d7 d1       	rcall	.+942    	; 0x4ae6 <strchr_P>
    4738:	89 2b       	or	r24, r25
    473a:	09 f4       	brne	.+2      	; 0x473e <vfscanf+0x10c>
    473c:	7c c0       	rjmp	.+248    	; 0x4836 <vfscanf+0x204>
    473e:	00 fd       	sbrc	r16, 0
    4740:	07 c0       	rjmp	.+14     	; 0x4750 <vfscanf+0x11e>
    4742:	f5 01       	movw	r30, r10
    4744:	80 80       	ld	r8, Z
    4746:	91 80       	ldd	r9, Z+1	; 0x01
    4748:	c5 01       	movw	r24, r10
    474a:	02 96       	adiw	r24, 0x02	; 2
    474c:	5c 01       	movw	r10, r24
    474e:	02 c0       	rjmp	.+4      	; 0x4754 <vfscanf+0x122>
    4750:	81 2c       	mov	r8, r1
    4752:	91 2c       	mov	r9, r1
    4754:	1e 36       	cpi	r17, 0x6E	; 110
    4756:	49 f4       	brne	.+18     	; 0x476a <vfscanf+0x138>
    4758:	f6 01       	movw	r30, r12
    475a:	46 81       	ldd	r20, Z+6	; 0x06
    475c:	57 81       	ldd	r21, Z+7	; 0x07
    475e:	60 e0       	ldi	r22, 0x00	; 0
    4760:	70 e0       	ldi	r23, 0x00	; 0
    4762:	20 2f       	mov	r18, r16
    4764:	c4 01       	movw	r24, r8
    4766:	b9 dd       	rcall	.-1166   	; 0x42da <putval>
    4768:	7a cf       	rjmp	.-268    	; 0x465e <vfscanf+0x2c>
    476a:	13 36       	cpi	r17, 0x63	; 99
    476c:	a1 f4       	brne	.+40     	; 0x4796 <vfscanf+0x164>
    476e:	01 fd       	sbrc	r16, 1
    4770:	02 c0       	rjmp	.+4      	; 0x4776 <vfscanf+0x144>
    4772:	ff 24       	eor	r15, r15
    4774:	f3 94       	inc	r15
    4776:	c6 01       	movw	r24, r12
    4778:	de d1       	rcall	.+956    	; 0x4b36 <fgetc>
    477a:	97 fd       	sbrc	r25, 7
    477c:	5a c0       	rjmp	.+180    	; 0x4832 <vfscanf+0x200>
    477e:	81 14       	cp	r8, r1
    4780:	91 04       	cpc	r9, r1
    4782:	29 f0       	breq	.+10     	; 0x478e <vfscanf+0x15c>
    4784:	f4 01       	movw	r30, r8
    4786:	80 83       	st	Z, r24
    4788:	c4 01       	movw	r24, r8
    478a:	01 96       	adiw	r24, 0x01	; 1
    478c:	4c 01       	movw	r8, r24
    478e:	fa 94       	dec	r15
    4790:	f1 10       	cpse	r15, r1
    4792:	f1 cf       	rjmp	.-30     	; 0x4776 <vfscanf+0x144>
    4794:	4a c0       	rjmp	.+148    	; 0x482a <vfscanf+0x1f8>
    4796:	1b 35       	cpi	r17, 0x5B	; 91
    4798:	51 f4       	brne	.+20     	; 0x47ae <vfscanf+0x17c>
    479a:	9e 01       	movw	r18, r28
    479c:	a4 01       	movw	r20, r8
    479e:	6f 2d       	mov	r22, r15
    47a0:	c6 01       	movw	r24, r12
    47a2:	6e de       	rcall	.-804    	; 0x4480 <conv_brk>
    47a4:	ec 01       	movw	r28, r24
    47a6:	89 2b       	or	r24, r25
    47a8:	09 f0       	breq	.+2      	; 0x47ac <vfscanf+0x17a>
    47aa:	3f c0       	rjmp	.+126    	; 0x482a <vfscanf+0x1f8>
    47ac:	39 c0       	rjmp	.+114    	; 0x4820 <vfscanf+0x1ee>
    47ae:	c6 01       	movw	r24, r12
    47b0:	c7 dd       	rcall	.-1138   	; 0x4340 <skip_spaces>
    47b2:	97 fd       	sbrc	r25, 7
    47b4:	3e c0       	rjmp	.+124    	; 0x4832 <vfscanf+0x200>
    47b6:	1f 36       	cpi	r17, 0x6F	; 111
    47b8:	49 f1       	breq	.+82     	; 0x480c <vfscanf+0x1da>
    47ba:	28 f4       	brcc	.+10     	; 0x47c6 <vfscanf+0x194>
    47bc:	14 36       	cpi	r17, 0x64	; 100
    47be:	21 f1       	breq	.+72     	; 0x4808 <vfscanf+0x1d6>
    47c0:	19 36       	cpi	r17, 0x69	; 105
    47c2:	39 f1       	breq	.+78     	; 0x4812 <vfscanf+0x1e0>
    47c4:	25 c0       	rjmp	.+74     	; 0x4810 <vfscanf+0x1de>
    47c6:	13 37       	cpi	r17, 0x73	; 115
    47c8:	71 f0       	breq	.+28     	; 0x47e6 <vfscanf+0x1b4>
    47ca:	15 37       	cpi	r17, 0x75	; 117
    47cc:	e9 f0       	breq	.+58     	; 0x4808 <vfscanf+0x1d6>
    47ce:	20 c0       	rjmp	.+64     	; 0x4810 <vfscanf+0x1de>
    47d0:	81 14       	cp	r8, r1
    47d2:	91 04       	cpc	r9, r1
    47d4:	29 f0       	breq	.+10     	; 0x47e0 <vfscanf+0x1ae>
    47d6:	f4 01       	movw	r30, r8
    47d8:	60 82       	st	Z, r6
    47da:	c4 01       	movw	r24, r8
    47dc:	01 96       	adiw	r24, 0x01	; 1
    47de:	4c 01       	movw	r8, r24
    47e0:	fa 94       	dec	r15
    47e2:	ff 20       	and	r15, r15
    47e4:	59 f0       	breq	.+22     	; 0x47fc <vfscanf+0x1ca>
    47e6:	c6 01       	movw	r24, r12
    47e8:	a6 d1       	rcall	.+844    	; 0x4b36 <fgetc>
    47ea:	3c 01       	movw	r6, r24
    47ec:	97 fd       	sbrc	r25, 7
    47ee:	06 c0       	rjmp	.+12     	; 0x47fc <vfscanf+0x1ca>
    47f0:	72 d1       	rcall	.+740    	; 0x4ad6 <isspace>
    47f2:	89 2b       	or	r24, r25
    47f4:	69 f3       	breq	.-38     	; 0x47d0 <vfscanf+0x19e>
    47f6:	b6 01       	movw	r22, r12
    47f8:	c3 01       	movw	r24, r6
    47fa:	17 d2       	rcall	.+1070   	; 0x4c2a <ungetc>
    47fc:	81 14       	cp	r8, r1
    47fe:	91 04       	cpc	r9, r1
    4800:	a1 f0       	breq	.+40     	; 0x482a <vfscanf+0x1f8>
    4802:	f4 01       	movw	r30, r8
    4804:	10 82       	st	Z, r1
    4806:	11 c0       	rjmp	.+34     	; 0x482a <vfscanf+0x1f8>
    4808:	00 62       	ori	r16, 0x20	; 32
    480a:	03 c0       	rjmp	.+6      	; 0x4812 <vfscanf+0x1e0>
    480c:	00 61       	ori	r16, 0x10	; 16
    480e:	01 c0       	rjmp	.+2      	; 0x4812 <vfscanf+0x1e0>
    4810:	00 64       	ori	r16, 0x40	; 64
    4812:	20 2f       	mov	r18, r16
    4814:	a4 01       	movw	r20, r8
    4816:	6f 2d       	mov	r22, r15
    4818:	c6 01       	movw	r24, r12
    481a:	a8 dd       	rcall	.-1200   	; 0x436c <conv_int>
    481c:	81 11       	cpse	r24, r1
    481e:	05 c0       	rjmp	.+10     	; 0x482a <vfscanf+0x1f8>
    4820:	f6 01       	movw	r30, r12
    4822:	83 81       	ldd	r24, Z+3	; 0x03
    4824:	80 73       	andi	r24, 0x30	; 48
    4826:	29 f4       	brne	.+10     	; 0x4832 <vfscanf+0x200>
    4828:	06 c0       	rjmp	.+12     	; 0x4836 <vfscanf+0x204>
    482a:	00 fd       	sbrc	r16, 0
    482c:	18 cf       	rjmp	.-464    	; 0x465e <vfscanf+0x2c>
    482e:	53 94       	inc	r5
    4830:	16 cf       	rjmp	.-468    	; 0x465e <vfscanf+0x2c>
    4832:	55 20       	and	r5, r5
    4834:	19 f0       	breq	.+6      	; 0x483c <vfscanf+0x20a>
    4836:	85 2d       	mov	r24, r5
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	02 c0       	rjmp	.+4      	; 0x4840 <vfscanf+0x20e>
    483c:	8f ef       	ldi	r24, 0xFF	; 255
    483e:	9f ef       	ldi	r25, 0xFF	; 255
    4840:	df 91       	pop	r29
    4842:	cf 91       	pop	r28
    4844:	1f 91       	pop	r17
    4846:	0f 91       	pop	r16
    4848:	ff 90       	pop	r15
    484a:	ef 90       	pop	r14
    484c:	df 90       	pop	r13
    484e:	cf 90       	pop	r12
    4850:	bf 90       	pop	r11
    4852:	af 90       	pop	r10
    4854:	9f 90       	pop	r9
    4856:	8f 90       	pop	r8
    4858:	7f 90       	pop	r7
    485a:	6f 90       	pop	r6
    485c:	5f 90       	pop	r5
    485e:	08 95       	ret

00004860 <calloc>:
    4860:	0f 93       	push	r16
    4862:	1f 93       	push	r17
    4864:	cf 93       	push	r28
    4866:	df 93       	push	r29
    4868:	86 9f       	mul	r24, r22
    486a:	80 01       	movw	r16, r0
    486c:	87 9f       	mul	r24, r23
    486e:	10 0d       	add	r17, r0
    4870:	96 9f       	mul	r25, r22
    4872:	10 0d       	add	r17, r0
    4874:	11 24       	eor	r1, r1
    4876:	c8 01       	movw	r24, r16
    4878:	0d d0       	rcall	.+26     	; 0x4894 <malloc>
    487a:	ec 01       	movw	r28, r24
    487c:	00 97       	sbiw	r24, 0x00	; 0
    487e:	21 f0       	breq	.+8      	; 0x4888 <calloc+0x28>
    4880:	a8 01       	movw	r20, r16
    4882:	60 e0       	ldi	r22, 0x00	; 0
    4884:	70 e0       	ldi	r23, 0x00	; 0
    4886:	45 d1       	rcall	.+650    	; 0x4b12 <memset>
    4888:	ce 01       	movw	r24, r28
    488a:	df 91       	pop	r29
    488c:	cf 91       	pop	r28
    488e:	1f 91       	pop	r17
    4890:	0f 91       	pop	r16
    4892:	08 95       	ret

00004894 <malloc>:
    4894:	0f 93       	push	r16
    4896:	1f 93       	push	r17
    4898:	cf 93       	push	r28
    489a:	df 93       	push	r29
    489c:	82 30       	cpi	r24, 0x02	; 2
    489e:	91 05       	cpc	r25, r1
    48a0:	10 f4       	brcc	.+4      	; 0x48a6 <malloc+0x12>
    48a2:	82 e0       	ldi	r24, 0x02	; 2
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	e0 91 02 22 	lds	r30, 0x2202	; 0x802202 <__flp>
    48aa:	f0 91 03 22 	lds	r31, 0x2203	; 0x802203 <__flp+0x1>
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	a0 e0       	ldi	r26, 0x00	; 0
    48b4:	b0 e0       	ldi	r27, 0x00	; 0
    48b6:	30 97       	sbiw	r30, 0x00	; 0
    48b8:	19 f1       	breq	.+70     	; 0x4900 <malloc+0x6c>
    48ba:	40 81       	ld	r20, Z
    48bc:	51 81       	ldd	r21, Z+1	; 0x01
    48be:	02 81       	ldd	r16, Z+2	; 0x02
    48c0:	13 81       	ldd	r17, Z+3	; 0x03
    48c2:	48 17       	cp	r20, r24
    48c4:	59 07       	cpc	r21, r25
    48c6:	c8 f0       	brcs	.+50     	; 0x48fa <malloc+0x66>
    48c8:	84 17       	cp	r24, r20
    48ca:	95 07       	cpc	r25, r21
    48cc:	69 f4       	brne	.+26     	; 0x48e8 <malloc+0x54>
    48ce:	10 97       	sbiw	r26, 0x00	; 0
    48d0:	31 f0       	breq	.+12     	; 0x48de <malloc+0x4a>
    48d2:	12 96       	adiw	r26, 0x02	; 2
    48d4:	0c 93       	st	X, r16
    48d6:	12 97       	sbiw	r26, 0x02	; 2
    48d8:	13 96       	adiw	r26, 0x03	; 3
    48da:	1c 93       	st	X, r17
    48dc:	27 c0       	rjmp	.+78     	; 0x492c <malloc+0x98>
    48de:	00 93 02 22 	sts	0x2202, r16	; 0x802202 <__flp>
    48e2:	10 93 03 22 	sts	0x2203, r17	; 0x802203 <__flp+0x1>
    48e6:	22 c0       	rjmp	.+68     	; 0x492c <malloc+0x98>
    48e8:	21 15       	cp	r18, r1
    48ea:	31 05       	cpc	r19, r1
    48ec:	19 f0       	breq	.+6      	; 0x48f4 <malloc+0x60>
    48ee:	42 17       	cp	r20, r18
    48f0:	53 07       	cpc	r21, r19
    48f2:	18 f4       	brcc	.+6      	; 0x48fa <malloc+0x66>
    48f4:	9a 01       	movw	r18, r20
    48f6:	bd 01       	movw	r22, r26
    48f8:	ef 01       	movw	r28, r30
    48fa:	df 01       	movw	r26, r30
    48fc:	f8 01       	movw	r30, r16
    48fe:	db cf       	rjmp	.-74     	; 0x48b6 <malloc+0x22>
    4900:	21 15       	cp	r18, r1
    4902:	31 05       	cpc	r19, r1
    4904:	f9 f0       	breq	.+62     	; 0x4944 <malloc+0xb0>
    4906:	28 1b       	sub	r18, r24
    4908:	39 0b       	sbc	r19, r25
    490a:	24 30       	cpi	r18, 0x04	; 4
    490c:	31 05       	cpc	r19, r1
    490e:	80 f4       	brcc	.+32     	; 0x4930 <malloc+0x9c>
    4910:	8a 81       	ldd	r24, Y+2	; 0x02
    4912:	9b 81       	ldd	r25, Y+3	; 0x03
    4914:	61 15       	cp	r22, r1
    4916:	71 05       	cpc	r23, r1
    4918:	21 f0       	breq	.+8      	; 0x4922 <malloc+0x8e>
    491a:	fb 01       	movw	r30, r22
    491c:	82 83       	std	Z+2, r24	; 0x02
    491e:	93 83       	std	Z+3, r25	; 0x03
    4920:	04 c0       	rjmp	.+8      	; 0x492a <malloc+0x96>
    4922:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <__flp>
    4926:	90 93 03 22 	sts	0x2203, r25	; 0x802203 <__flp+0x1>
    492a:	fe 01       	movw	r30, r28
    492c:	32 96       	adiw	r30, 0x02	; 2
    492e:	44 c0       	rjmp	.+136    	; 0x49b8 <malloc+0x124>
    4930:	fe 01       	movw	r30, r28
    4932:	e2 0f       	add	r30, r18
    4934:	f3 1f       	adc	r31, r19
    4936:	81 93       	st	Z+, r24
    4938:	91 93       	st	Z+, r25
    493a:	22 50       	subi	r18, 0x02	; 2
    493c:	31 09       	sbc	r19, r1
    493e:	28 83       	st	Y, r18
    4940:	39 83       	std	Y+1, r19	; 0x01
    4942:	3a c0       	rjmp	.+116    	; 0x49b8 <malloc+0x124>
    4944:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <__brkval>
    4948:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <__brkval+0x1>
    494c:	23 2b       	or	r18, r19
    494e:	41 f4       	brne	.+16     	; 0x4960 <malloc+0xcc>
    4950:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4954:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4958:	20 93 00 22 	sts	0x2200, r18	; 0x802200 <__brkval>
    495c:	30 93 01 22 	sts	0x2201, r19	; 0x802201 <__brkval+0x1>
    4960:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4964:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4968:	21 15       	cp	r18, r1
    496a:	31 05       	cpc	r19, r1
    496c:	41 f4       	brne	.+16     	; 0x497e <malloc+0xea>
    496e:	2d b7       	in	r18, 0x3d	; 61
    4970:	3e b7       	in	r19, 0x3e	; 62
    4972:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4976:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    497a:	24 1b       	sub	r18, r20
    497c:	35 0b       	sbc	r19, r21
    497e:	e0 91 00 22 	lds	r30, 0x2200	; 0x802200 <__brkval>
    4982:	f0 91 01 22 	lds	r31, 0x2201	; 0x802201 <__brkval+0x1>
    4986:	e2 17       	cp	r30, r18
    4988:	f3 07       	cpc	r31, r19
    498a:	a0 f4       	brcc	.+40     	; 0x49b4 <malloc+0x120>
    498c:	2e 1b       	sub	r18, r30
    498e:	3f 0b       	sbc	r19, r31
    4990:	28 17       	cp	r18, r24
    4992:	39 07       	cpc	r19, r25
    4994:	78 f0       	brcs	.+30     	; 0x49b4 <malloc+0x120>
    4996:	ac 01       	movw	r20, r24
    4998:	4e 5f       	subi	r20, 0xFE	; 254
    499a:	5f 4f       	sbci	r21, 0xFF	; 255
    499c:	24 17       	cp	r18, r20
    499e:	35 07       	cpc	r19, r21
    49a0:	48 f0       	brcs	.+18     	; 0x49b4 <malloc+0x120>
    49a2:	4e 0f       	add	r20, r30
    49a4:	5f 1f       	adc	r21, r31
    49a6:	40 93 00 22 	sts	0x2200, r20	; 0x802200 <__brkval>
    49aa:	50 93 01 22 	sts	0x2201, r21	; 0x802201 <__brkval+0x1>
    49ae:	81 93       	st	Z+, r24
    49b0:	91 93       	st	Z+, r25
    49b2:	02 c0       	rjmp	.+4      	; 0x49b8 <malloc+0x124>
    49b4:	e0 e0       	ldi	r30, 0x00	; 0
    49b6:	f0 e0       	ldi	r31, 0x00	; 0
    49b8:	cf 01       	movw	r24, r30
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	1f 91       	pop	r17
    49c0:	0f 91       	pop	r16
    49c2:	08 95       	ret

000049c4 <free>:
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	00 97       	sbiw	r24, 0x00	; 0
    49ca:	09 f4       	brne	.+2      	; 0x49ce <free+0xa>
    49cc:	81 c0       	rjmp	.+258    	; 0x4ad0 <free+0x10c>
    49ce:	fc 01       	movw	r30, r24
    49d0:	32 97       	sbiw	r30, 0x02	; 2
    49d2:	12 82       	std	Z+2, r1	; 0x02
    49d4:	13 82       	std	Z+3, r1	; 0x03
    49d6:	a0 91 02 22 	lds	r26, 0x2202	; 0x802202 <__flp>
    49da:	b0 91 03 22 	lds	r27, 0x2203	; 0x802203 <__flp+0x1>
    49de:	10 97       	sbiw	r26, 0x00	; 0
    49e0:	81 f4       	brne	.+32     	; 0x4a02 <free+0x3e>
    49e2:	20 81       	ld	r18, Z
    49e4:	31 81       	ldd	r19, Z+1	; 0x01
    49e6:	82 0f       	add	r24, r18
    49e8:	93 1f       	adc	r25, r19
    49ea:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <__brkval>
    49ee:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <__brkval+0x1>
    49f2:	28 17       	cp	r18, r24
    49f4:	39 07       	cpc	r19, r25
    49f6:	51 f5       	brne	.+84     	; 0x4a4c <free+0x88>
    49f8:	e0 93 00 22 	sts	0x2200, r30	; 0x802200 <__brkval>
    49fc:	f0 93 01 22 	sts	0x2201, r31	; 0x802201 <__brkval+0x1>
    4a00:	67 c0       	rjmp	.+206    	; 0x4ad0 <free+0x10c>
    4a02:	ed 01       	movw	r28, r26
    4a04:	20 e0       	ldi	r18, 0x00	; 0
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	ce 17       	cp	r28, r30
    4a0a:	df 07       	cpc	r29, r31
    4a0c:	40 f4       	brcc	.+16     	; 0x4a1e <free+0x5a>
    4a0e:	4a 81       	ldd	r20, Y+2	; 0x02
    4a10:	5b 81       	ldd	r21, Y+3	; 0x03
    4a12:	9e 01       	movw	r18, r28
    4a14:	41 15       	cp	r20, r1
    4a16:	51 05       	cpc	r21, r1
    4a18:	f1 f0       	breq	.+60     	; 0x4a56 <free+0x92>
    4a1a:	ea 01       	movw	r28, r20
    4a1c:	f5 cf       	rjmp	.-22     	; 0x4a08 <free+0x44>
    4a1e:	c2 83       	std	Z+2, r28	; 0x02
    4a20:	d3 83       	std	Z+3, r29	; 0x03
    4a22:	40 81       	ld	r20, Z
    4a24:	51 81       	ldd	r21, Z+1	; 0x01
    4a26:	84 0f       	add	r24, r20
    4a28:	95 1f       	adc	r25, r21
    4a2a:	c8 17       	cp	r28, r24
    4a2c:	d9 07       	cpc	r29, r25
    4a2e:	59 f4       	brne	.+22     	; 0x4a46 <free+0x82>
    4a30:	88 81       	ld	r24, Y
    4a32:	99 81       	ldd	r25, Y+1	; 0x01
    4a34:	84 0f       	add	r24, r20
    4a36:	95 1f       	adc	r25, r21
    4a38:	02 96       	adiw	r24, 0x02	; 2
    4a3a:	80 83       	st	Z, r24
    4a3c:	91 83       	std	Z+1, r25	; 0x01
    4a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a40:	9b 81       	ldd	r25, Y+3	; 0x03
    4a42:	82 83       	std	Z+2, r24	; 0x02
    4a44:	93 83       	std	Z+3, r25	; 0x03
    4a46:	21 15       	cp	r18, r1
    4a48:	31 05       	cpc	r19, r1
    4a4a:	29 f4       	brne	.+10     	; 0x4a56 <free+0x92>
    4a4c:	e0 93 02 22 	sts	0x2202, r30	; 0x802202 <__flp>
    4a50:	f0 93 03 22 	sts	0x2203, r31	; 0x802203 <__flp+0x1>
    4a54:	3d c0       	rjmp	.+122    	; 0x4ad0 <free+0x10c>
    4a56:	e9 01       	movw	r28, r18
    4a58:	ea 83       	std	Y+2, r30	; 0x02
    4a5a:	fb 83       	std	Y+3, r31	; 0x03
    4a5c:	49 91       	ld	r20, Y+
    4a5e:	59 91       	ld	r21, Y+
    4a60:	c4 0f       	add	r28, r20
    4a62:	d5 1f       	adc	r29, r21
    4a64:	ec 17       	cp	r30, r28
    4a66:	fd 07       	cpc	r31, r29
    4a68:	61 f4       	brne	.+24     	; 0x4a82 <free+0xbe>
    4a6a:	80 81       	ld	r24, Z
    4a6c:	91 81       	ldd	r25, Z+1	; 0x01
    4a6e:	84 0f       	add	r24, r20
    4a70:	95 1f       	adc	r25, r21
    4a72:	02 96       	adiw	r24, 0x02	; 2
    4a74:	e9 01       	movw	r28, r18
    4a76:	88 83       	st	Y, r24
    4a78:	99 83       	std	Y+1, r25	; 0x01
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	93 81       	ldd	r25, Z+3	; 0x03
    4a7e:	8a 83       	std	Y+2, r24	; 0x02
    4a80:	9b 83       	std	Y+3, r25	; 0x03
    4a82:	e0 e0       	ldi	r30, 0x00	; 0
    4a84:	f0 e0       	ldi	r31, 0x00	; 0
    4a86:	12 96       	adiw	r26, 0x02	; 2
    4a88:	8d 91       	ld	r24, X+
    4a8a:	9c 91       	ld	r25, X
    4a8c:	13 97       	sbiw	r26, 0x03	; 3
    4a8e:	00 97       	sbiw	r24, 0x00	; 0
    4a90:	19 f0       	breq	.+6      	; 0x4a98 <free+0xd4>
    4a92:	fd 01       	movw	r30, r26
    4a94:	dc 01       	movw	r26, r24
    4a96:	f7 cf       	rjmp	.-18     	; 0x4a86 <free+0xc2>
    4a98:	8d 91       	ld	r24, X+
    4a9a:	9c 91       	ld	r25, X
    4a9c:	11 97       	sbiw	r26, 0x01	; 1
    4a9e:	9d 01       	movw	r18, r26
    4aa0:	2e 5f       	subi	r18, 0xFE	; 254
    4aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa4:	82 0f       	add	r24, r18
    4aa6:	93 1f       	adc	r25, r19
    4aa8:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <__brkval>
    4aac:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <__brkval+0x1>
    4ab0:	28 17       	cp	r18, r24
    4ab2:	39 07       	cpc	r19, r25
    4ab4:	69 f4       	brne	.+26     	; 0x4ad0 <free+0x10c>
    4ab6:	30 97       	sbiw	r30, 0x00	; 0
    4ab8:	29 f4       	brne	.+10     	; 0x4ac4 <free+0x100>
    4aba:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <__flp>
    4abe:	10 92 03 22 	sts	0x2203, r1	; 0x802203 <__flp+0x1>
    4ac2:	02 c0       	rjmp	.+4      	; 0x4ac8 <free+0x104>
    4ac4:	12 82       	std	Z+2, r1	; 0x02
    4ac6:	13 82       	std	Z+3, r1	; 0x03
    4ac8:	a0 93 00 22 	sts	0x2200, r26	; 0x802200 <__brkval>
    4acc:	b0 93 01 22 	sts	0x2201, r27	; 0x802201 <__brkval+0x1>
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	08 95       	ret

00004ad6 <isspace>:
    4ad6:	91 11       	cpse	r25, r1
    4ad8:	1f c1       	rjmp	.+574    	; 0x4d18 <__ctype_isfalse>
    4ada:	80 32       	cpi	r24, 0x20	; 32
    4adc:	19 f0       	breq	.+6      	; 0x4ae4 <isspace+0xe>
    4ade:	89 50       	subi	r24, 0x09	; 9
    4ae0:	85 50       	subi	r24, 0x05	; 5
    4ae2:	d0 f7       	brcc	.-12     	; 0x4ad8 <isspace+0x2>
    4ae4:	08 95       	ret

00004ae6 <strchr_P>:
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	05 90       	lpm	r0, Z+
    4aea:	06 16       	cp	r0, r22
    4aec:	21 f0       	breq	.+8      	; 0x4af6 <strchr_P+0x10>
    4aee:	00 20       	and	r0, r0
    4af0:	d9 f7       	brne	.-10     	; 0x4ae8 <strchr_P+0x2>
    4af2:	c0 01       	movw	r24, r0
    4af4:	08 95       	ret
    4af6:	31 97       	sbiw	r30, 0x01	; 1
    4af8:	cf 01       	movw	r24, r30
    4afa:	08 95       	ret

00004afc <strnlen_P>:
    4afc:	fc 01       	movw	r30, r24
    4afe:	05 90       	lpm	r0, Z+
    4b00:	61 50       	subi	r22, 0x01	; 1
    4b02:	70 40       	sbci	r23, 0x00	; 0
    4b04:	01 10       	cpse	r0, r1
    4b06:	d8 f7       	brcc	.-10     	; 0x4afe <strnlen_P+0x2>
    4b08:	80 95       	com	r24
    4b0a:	90 95       	com	r25
    4b0c:	8e 0f       	add	r24, r30
    4b0e:	9f 1f       	adc	r25, r31
    4b10:	08 95       	ret

00004b12 <memset>:
    4b12:	dc 01       	movw	r26, r24
    4b14:	01 c0       	rjmp	.+2      	; 0x4b18 <memset+0x6>
    4b16:	6d 93       	st	X+, r22
    4b18:	41 50       	subi	r20, 0x01	; 1
    4b1a:	50 40       	sbci	r21, 0x00	; 0
    4b1c:	e0 f7       	brcc	.-8      	; 0x4b16 <memset+0x4>
    4b1e:	08 95       	ret

00004b20 <strnlen>:
    4b20:	fc 01       	movw	r30, r24
    4b22:	61 50       	subi	r22, 0x01	; 1
    4b24:	70 40       	sbci	r23, 0x00	; 0
    4b26:	01 90       	ld	r0, Z+
    4b28:	01 10       	cpse	r0, r1
    4b2a:	d8 f7       	brcc	.-10     	; 0x4b22 <strnlen+0x2>
    4b2c:	80 95       	com	r24
    4b2e:	90 95       	com	r25
    4b30:	8e 0f       	add	r24, r30
    4b32:	9f 1f       	adc	r25, r31
    4b34:	08 95       	ret

00004b36 <fgetc>:
    4b36:	cf 93       	push	r28
    4b38:	df 93       	push	r29
    4b3a:	ec 01       	movw	r28, r24
    4b3c:	2b 81       	ldd	r18, Y+3	; 0x03
    4b3e:	20 ff       	sbrs	r18, 0
    4b40:	33 c0       	rjmp	.+102    	; 0x4ba8 <fgetc+0x72>
    4b42:	26 ff       	sbrs	r18, 6
    4b44:	0a c0       	rjmp	.+20     	; 0x4b5a <fgetc+0x24>
    4b46:	2f 7b       	andi	r18, 0xBF	; 191
    4b48:	2b 83       	std	Y+3, r18	; 0x03
    4b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    4b4e:	01 96       	adiw	r24, 0x01	; 1
    4b50:	8e 83       	std	Y+6, r24	; 0x06
    4b52:	9f 83       	std	Y+7, r25	; 0x07
    4b54:	8a 81       	ldd	r24, Y+2	; 0x02
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	29 c0       	rjmp	.+82     	; 0x4bac <fgetc+0x76>
    4b5a:	22 ff       	sbrs	r18, 2
    4b5c:	0f c0       	rjmp	.+30     	; 0x4b7c <fgetc+0x46>
    4b5e:	e8 81       	ld	r30, Y
    4b60:	f9 81       	ldd	r31, Y+1	; 0x01
    4b62:	80 81       	ld	r24, Z
    4b64:	08 2e       	mov	r0, r24
    4b66:	00 0c       	add	r0, r0
    4b68:	99 0b       	sbc	r25, r25
    4b6a:	00 97       	sbiw	r24, 0x00	; 0
    4b6c:	19 f4       	brne	.+6      	; 0x4b74 <fgetc+0x3e>
    4b6e:	20 62       	ori	r18, 0x20	; 32
    4b70:	2b 83       	std	Y+3, r18	; 0x03
    4b72:	1a c0       	rjmp	.+52     	; 0x4ba8 <fgetc+0x72>
    4b74:	31 96       	adiw	r30, 0x01	; 1
    4b76:	e8 83       	st	Y, r30
    4b78:	f9 83       	std	Y+1, r31	; 0x01
    4b7a:	0e c0       	rjmp	.+28     	; 0x4b98 <fgetc+0x62>
    4b7c:	ea 85       	ldd	r30, Y+10	; 0x0a
    4b7e:	fb 85       	ldd	r31, Y+11	; 0x0b
    4b80:	19 95       	eicall
    4b82:	97 ff       	sbrs	r25, 7
    4b84:	09 c0       	rjmp	.+18     	; 0x4b98 <fgetc+0x62>
    4b86:	2b 81       	ldd	r18, Y+3	; 0x03
    4b88:	01 96       	adiw	r24, 0x01	; 1
    4b8a:	11 f0       	breq	.+4      	; 0x4b90 <fgetc+0x5a>
    4b8c:	80 e2       	ldi	r24, 0x20	; 32
    4b8e:	01 c0       	rjmp	.+2      	; 0x4b92 <fgetc+0x5c>
    4b90:	80 e1       	ldi	r24, 0x10	; 16
    4b92:	82 2b       	or	r24, r18
    4b94:	8b 83       	std	Y+3, r24	; 0x03
    4b96:	08 c0       	rjmp	.+16     	; 0x4ba8 <fgetc+0x72>
    4b98:	2e 81       	ldd	r18, Y+6	; 0x06
    4b9a:	3f 81       	ldd	r19, Y+7	; 0x07
    4b9c:	2f 5f       	subi	r18, 0xFF	; 255
    4b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba0:	2e 83       	std	Y+6, r18	; 0x06
    4ba2:	3f 83       	std	Y+7, r19	; 0x07
    4ba4:	99 27       	eor	r25, r25
    4ba6:	02 c0       	rjmp	.+4      	; 0x4bac <fgetc+0x76>
    4ba8:	8f ef       	ldi	r24, 0xFF	; 255
    4baa:	9f ef       	ldi	r25, 0xFF	; 255
    4bac:	df 91       	pop	r29
    4bae:	cf 91       	pop	r28
    4bb0:	08 95       	ret

00004bb2 <fputc>:
    4bb2:	0f 93       	push	r16
    4bb4:	1f 93       	push	r17
    4bb6:	cf 93       	push	r28
    4bb8:	df 93       	push	r29
    4bba:	fb 01       	movw	r30, r22
    4bbc:	23 81       	ldd	r18, Z+3	; 0x03
    4bbe:	21 fd       	sbrc	r18, 1
    4bc0:	03 c0       	rjmp	.+6      	; 0x4bc8 <fputc+0x16>
    4bc2:	8f ef       	ldi	r24, 0xFF	; 255
    4bc4:	9f ef       	ldi	r25, 0xFF	; 255
    4bc6:	2c c0       	rjmp	.+88     	; 0x4c20 <fputc+0x6e>
    4bc8:	22 ff       	sbrs	r18, 2
    4bca:	16 c0       	rjmp	.+44     	; 0x4bf8 <fputc+0x46>
    4bcc:	46 81       	ldd	r20, Z+6	; 0x06
    4bce:	57 81       	ldd	r21, Z+7	; 0x07
    4bd0:	24 81       	ldd	r18, Z+4	; 0x04
    4bd2:	35 81       	ldd	r19, Z+5	; 0x05
    4bd4:	42 17       	cp	r20, r18
    4bd6:	53 07       	cpc	r21, r19
    4bd8:	44 f4       	brge	.+16     	; 0x4bea <fputc+0x38>
    4bda:	a0 81       	ld	r26, Z
    4bdc:	b1 81       	ldd	r27, Z+1	; 0x01
    4bde:	9d 01       	movw	r18, r26
    4be0:	2f 5f       	subi	r18, 0xFF	; 255
    4be2:	3f 4f       	sbci	r19, 0xFF	; 255
    4be4:	20 83       	st	Z, r18
    4be6:	31 83       	std	Z+1, r19	; 0x01
    4be8:	8c 93       	st	X, r24
    4bea:	26 81       	ldd	r18, Z+6	; 0x06
    4bec:	37 81       	ldd	r19, Z+7	; 0x07
    4bee:	2f 5f       	subi	r18, 0xFF	; 255
    4bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf2:	26 83       	std	Z+6, r18	; 0x06
    4bf4:	37 83       	std	Z+7, r19	; 0x07
    4bf6:	14 c0       	rjmp	.+40     	; 0x4c20 <fputc+0x6e>
    4bf8:	8b 01       	movw	r16, r22
    4bfa:	ec 01       	movw	r28, r24
    4bfc:	fb 01       	movw	r30, r22
    4bfe:	00 84       	ldd	r0, Z+8	; 0x08
    4c00:	f1 85       	ldd	r31, Z+9	; 0x09
    4c02:	e0 2d       	mov	r30, r0
    4c04:	19 95       	eicall
    4c06:	89 2b       	or	r24, r25
    4c08:	e1 f6       	brne	.-72     	; 0x4bc2 <fputc+0x10>
    4c0a:	d8 01       	movw	r26, r16
    4c0c:	16 96       	adiw	r26, 0x06	; 6
    4c0e:	8d 91       	ld	r24, X+
    4c10:	9c 91       	ld	r25, X
    4c12:	17 97       	sbiw	r26, 0x07	; 7
    4c14:	01 96       	adiw	r24, 0x01	; 1
    4c16:	16 96       	adiw	r26, 0x06	; 6
    4c18:	8d 93       	st	X+, r24
    4c1a:	9c 93       	st	X, r25
    4c1c:	17 97       	sbiw	r26, 0x07	; 7
    4c1e:	ce 01       	movw	r24, r28
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	1f 91       	pop	r17
    4c26:	0f 91       	pop	r16
    4c28:	08 95       	ret

00004c2a <ungetc>:
    4c2a:	fb 01       	movw	r30, r22
    4c2c:	23 81       	ldd	r18, Z+3	; 0x03
    4c2e:	20 ff       	sbrs	r18, 0
    4c30:	12 c0       	rjmp	.+36     	; 0x4c56 <ungetc+0x2c>
    4c32:	26 fd       	sbrc	r18, 6
    4c34:	10 c0       	rjmp	.+32     	; 0x4c56 <ungetc+0x2c>
    4c36:	8f 3f       	cpi	r24, 0xFF	; 255
    4c38:	3f ef       	ldi	r19, 0xFF	; 255
    4c3a:	93 07       	cpc	r25, r19
    4c3c:	61 f0       	breq	.+24     	; 0x4c56 <ungetc+0x2c>
    4c3e:	82 83       	std	Z+2, r24	; 0x02
    4c40:	2f 7d       	andi	r18, 0xDF	; 223
    4c42:	20 64       	ori	r18, 0x40	; 64
    4c44:	23 83       	std	Z+3, r18	; 0x03
    4c46:	26 81       	ldd	r18, Z+6	; 0x06
    4c48:	37 81       	ldd	r19, Z+7	; 0x07
    4c4a:	21 50       	subi	r18, 0x01	; 1
    4c4c:	31 09       	sbc	r19, r1
    4c4e:	26 83       	std	Z+6, r18	; 0x06
    4c50:	37 83       	std	Z+7, r19	; 0x07
    4c52:	99 27       	eor	r25, r25
    4c54:	08 95       	ret
    4c56:	8f ef       	ldi	r24, 0xFF	; 255
    4c58:	9f ef       	ldi	r25, 0xFF	; 255
    4c5a:	08 95       	ret

00004c5c <__ultoa_invert>:
    4c5c:	fa 01       	movw	r30, r20
    4c5e:	aa 27       	eor	r26, r26
    4c60:	28 30       	cpi	r18, 0x08	; 8
    4c62:	51 f1       	breq	.+84     	; 0x4cb8 <__ultoa_invert+0x5c>
    4c64:	20 31       	cpi	r18, 0x10	; 16
    4c66:	81 f1       	breq	.+96     	; 0x4cc8 <__ultoa_invert+0x6c>
    4c68:	e8 94       	clt
    4c6a:	6f 93       	push	r22
    4c6c:	6e 7f       	andi	r22, 0xFE	; 254
    4c6e:	6e 5f       	subi	r22, 0xFE	; 254
    4c70:	7f 4f       	sbci	r23, 0xFF	; 255
    4c72:	8f 4f       	sbci	r24, 0xFF	; 255
    4c74:	9f 4f       	sbci	r25, 0xFF	; 255
    4c76:	af 4f       	sbci	r26, 0xFF	; 255
    4c78:	b1 e0       	ldi	r27, 0x01	; 1
    4c7a:	3e d0       	rcall	.+124    	; 0x4cf8 <__ultoa_invert+0x9c>
    4c7c:	b4 e0       	ldi	r27, 0x04	; 4
    4c7e:	3c d0       	rcall	.+120    	; 0x4cf8 <__ultoa_invert+0x9c>
    4c80:	67 0f       	add	r22, r23
    4c82:	78 1f       	adc	r23, r24
    4c84:	89 1f       	adc	r24, r25
    4c86:	9a 1f       	adc	r25, r26
    4c88:	a1 1d       	adc	r26, r1
    4c8a:	68 0f       	add	r22, r24
    4c8c:	79 1f       	adc	r23, r25
    4c8e:	8a 1f       	adc	r24, r26
    4c90:	91 1d       	adc	r25, r1
    4c92:	a1 1d       	adc	r26, r1
    4c94:	6a 0f       	add	r22, r26
    4c96:	71 1d       	adc	r23, r1
    4c98:	81 1d       	adc	r24, r1
    4c9a:	91 1d       	adc	r25, r1
    4c9c:	a1 1d       	adc	r26, r1
    4c9e:	20 d0       	rcall	.+64     	; 0x4ce0 <__ultoa_invert+0x84>
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <__ultoa_invert+0x48>
    4ca2:	68 94       	set
    4ca4:	3f 91       	pop	r19
    4ca6:	2a e0       	ldi	r18, 0x0A	; 10
    4ca8:	26 9f       	mul	r18, r22
    4caa:	11 24       	eor	r1, r1
    4cac:	30 19       	sub	r19, r0
    4cae:	30 5d       	subi	r19, 0xD0	; 208
    4cb0:	31 93       	st	Z+, r19
    4cb2:	de f6       	brtc	.-74     	; 0x4c6a <__ultoa_invert+0xe>
    4cb4:	cf 01       	movw	r24, r30
    4cb6:	08 95       	ret
    4cb8:	46 2f       	mov	r20, r22
    4cba:	47 70       	andi	r20, 0x07	; 7
    4cbc:	40 5d       	subi	r20, 0xD0	; 208
    4cbe:	41 93       	st	Z+, r20
    4cc0:	b3 e0       	ldi	r27, 0x03	; 3
    4cc2:	0f d0       	rcall	.+30     	; 0x4ce2 <__ultoa_invert+0x86>
    4cc4:	c9 f7       	brne	.-14     	; 0x4cb8 <__ultoa_invert+0x5c>
    4cc6:	f6 cf       	rjmp	.-20     	; 0x4cb4 <__ultoa_invert+0x58>
    4cc8:	46 2f       	mov	r20, r22
    4cca:	4f 70       	andi	r20, 0x0F	; 15
    4ccc:	40 5d       	subi	r20, 0xD0	; 208
    4cce:	4a 33       	cpi	r20, 0x3A	; 58
    4cd0:	18 f0       	brcs	.+6      	; 0x4cd8 <__ultoa_invert+0x7c>
    4cd2:	49 5d       	subi	r20, 0xD9	; 217
    4cd4:	31 fd       	sbrc	r19, 1
    4cd6:	40 52       	subi	r20, 0x20	; 32
    4cd8:	41 93       	st	Z+, r20
    4cda:	02 d0       	rcall	.+4      	; 0x4ce0 <__ultoa_invert+0x84>
    4cdc:	a9 f7       	brne	.-22     	; 0x4cc8 <__ultoa_invert+0x6c>
    4cde:	ea cf       	rjmp	.-44     	; 0x4cb4 <__ultoa_invert+0x58>
    4ce0:	b4 e0       	ldi	r27, 0x04	; 4
    4ce2:	a6 95       	lsr	r26
    4ce4:	97 95       	ror	r25
    4ce6:	87 95       	ror	r24
    4ce8:	77 95       	ror	r23
    4cea:	67 95       	ror	r22
    4cec:	ba 95       	dec	r27
    4cee:	c9 f7       	brne	.-14     	; 0x4ce2 <__ultoa_invert+0x86>
    4cf0:	00 97       	sbiw	r24, 0x00	; 0
    4cf2:	61 05       	cpc	r22, r1
    4cf4:	71 05       	cpc	r23, r1
    4cf6:	08 95       	ret
    4cf8:	9b 01       	movw	r18, r22
    4cfa:	ac 01       	movw	r20, r24
    4cfc:	0a 2e       	mov	r0, r26
    4cfe:	06 94       	lsr	r0
    4d00:	57 95       	ror	r21
    4d02:	47 95       	ror	r20
    4d04:	37 95       	ror	r19
    4d06:	27 95       	ror	r18
    4d08:	ba 95       	dec	r27
    4d0a:	c9 f7       	brne	.-14     	; 0x4cfe <__ultoa_invert+0xa2>
    4d0c:	62 0f       	add	r22, r18
    4d0e:	73 1f       	adc	r23, r19
    4d10:	84 1f       	adc	r24, r20
    4d12:	95 1f       	adc	r25, r21
    4d14:	a0 1d       	adc	r26, r0
    4d16:	08 95       	ret

00004d18 <__ctype_isfalse>:
    4d18:	99 27       	eor	r25, r25
    4d1a:	88 27       	eor	r24, r24

00004d1c <__ctype_istrue>:
    4d1c:	08 95       	ret

00004d1e <_exit>:
    4d1e:	f8 94       	cli

00004d20 <__stop_program>:
    4d20:	ff cf       	rjmp	.-2      	; 0x4d20 <__stop_program>
