
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00802000  00005ac4  00005b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000149  008020f0  008020f0  00005c48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005c48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000750  00000000  00000000  00005ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001aefc  00000000  00000000  00006438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000056c9  00000000  00000000  00021334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c6e2  00000000  00000000  000269fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e94  00000000  00000000  000330e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00038ba2  00000000  00000000  00034f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006c43  00000000  00000000  0006db16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d8  00000000  00000000  00074760  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000062e5  00000000  00000000  00074e38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_13>
      38:	81 c2       	rjmp	.+1282   	; 0x53c <__vector_14>
      3a:	00 00       	nop
      3c:	b7 c2       	rjmp	.+1390   	; 0x5ac <__vector_15>
      3e:	00 00       	nop
      40:	ed c2       	rjmp	.+1498   	; 0x61c <__vector_16>
      42:	00 00       	nop
      44:	23 c3       	rjmp	.+1606   	; 0x68c <__vector_17>
      46:	00 00       	nop
      48:	59 c3       	rjmp	.+1714   	; 0x6fc <__vector_18>
      4a:	00 00       	nop
      4c:	8f c3       	rjmp	.+1822   	; 0x76c <__vector_19>
      4e:	00 00       	nop
      50:	c5 c3       	rjmp	.+1930   	; 0x7dc <__vector_20>
      52:	00 00       	nop
      54:	fb c3       	rjmp	.+2038   	; 0x84c <__vector_21>
      56:	00 00       	nop
      58:	31 c4       	rjmp	.+2146   	; 0x8bc <__vector_22>
      5a:	00 00       	nop
      5c:	67 c4       	rjmp	.+2254   	; 0x92c <__vector_23>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c1       	rjmp	.+622    	; 0x2fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	35 c1       	rjmp	.+618    	; 0x2fc <__bad_interrupt>
      92:	00 00       	nop
      94:	33 c1       	rjmp	.+614    	; 0x2fc <__bad_interrupt>
      96:	00 00       	nop
      98:	31 c1       	rjmp	.+610    	; 0x2fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2f c1       	rjmp	.+606    	; 0x2fc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2d c1       	rjmp	.+602    	; 0x2fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c1       	rjmp	.+598    	; 0x2fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c1       	rjmp	.+594    	; 0x2fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c1       	rjmp	.+590    	; 0x2fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c1       	rjmp	.+586    	; 0x2fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c1       	rjmp	.+582    	; 0x2fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_46>
      bc:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__vector_47>
      c0:	9d c6       	rjmp	.+3386   	; 0xdfc <__vector_48>
      c2:	00 00       	nop
      c4:	d3 c6       	rjmp	.+3494   	; 0xe6c <__vector_49>
      c6:	00 00       	nop
      c8:	09 c7       	rjmp	.+3602   	; 0xedc <__vector_50>
      ca:	00 00       	nop
      cc:	3f c7       	rjmp	.+3710   	; 0xf4c <__vector_51>
      ce:	00 00       	nop
      d0:	75 c7       	rjmp	.+3818   	; 0xfbc <__vector_52>
      d2:	00 00       	nop
      d4:	13 c1       	rjmp	.+550    	; 0x2fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	11 c1       	rjmp	.+546    	; 0x2fc <__bad_interrupt>
      da:	00 00       	nop
      dc:	0f c1       	rjmp	.+542    	; 0x2fc <__bad_interrupt>
      de:	00 00       	nop
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b c1       	rjmp	.+534    	; 0x2fc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <__vector_58>
      ec:	07 c1       	rjmp	.+526    	; 0x2fc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	05 c1       	rjmp	.+522    	; 0x2fc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	03 c1       	rjmp	.+518    	; 0x2fc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	01 c1       	rjmp	.+514    	; 0x2fc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ff c0       	rjmp	.+510    	; 0x2fc <__bad_interrupt>
      fe:	00 00       	nop
     100:	fd c0       	rjmp	.+506    	; 0x2fc <__bad_interrupt>
     102:	00 00       	nop
     104:	fb c0       	rjmp	.+502    	; 0x2fc <__bad_interrupt>
     106:	00 00       	nop
     108:	f9 c0       	rjmp	.+498    	; 0x2fc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f7 c0       	rjmp	.+494    	; 0x2fc <__bad_interrupt>
     10e:	00 00       	nop
     110:	f5 c0       	rjmp	.+490    	; 0x2fc <__bad_interrupt>
     112:	00 00       	nop
     114:	f3 c0       	rjmp	.+486    	; 0x2fc <__bad_interrupt>
     116:	00 00       	nop
     118:	f1 c0       	rjmp	.+482    	; 0x2fc <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1b c1       	rjmp	.+566    	; 0x354 <__vector_71>
     11e:	00 00       	nop
     120:	56 c1       	rjmp	.+684    	; 0x3ce <__vector_72>
     122:	00 00       	nop
     124:	91 c1       	rjmp	.+802    	; 0x448 <__vector_73>
     126:	00 00       	nop
     128:	cc c1       	rjmp	.+920    	; 0x4c2 <__vector_74>
     12a:	00 00       	nop
     12c:	e7 c0       	rjmp	.+462    	; 0x2fc <__bad_interrupt>
     12e:	00 00       	nop
     130:	e5 c0       	rjmp	.+458    	; 0x2fc <__bad_interrupt>
     132:	00 00       	nop
     134:	33 c4       	rjmp	.+2150   	; 0x99c <__vector_77>
     136:	00 00       	nop
     138:	69 c4       	rjmp	.+2258   	; 0xa0c <__vector_78>
     13a:	00 00       	nop
     13c:	9f c4       	rjmp	.+2366   	; 0xa7c <__vector_79>
     13e:	00 00       	nop
     140:	d5 c4       	rjmp	.+2474   	; 0xaec <__vector_80>
     142:	00 00       	nop
     144:	0b c5       	rjmp	.+2582   	; 0xb5c <__vector_81>
     146:	00 00       	nop
     148:	41 c5       	rjmp	.+2690   	; 0xbcc <__vector_82>
     14a:	00 00       	nop
     14c:	77 c5       	rjmp	.+2798   	; 0xc3c <__vector_83>
     14e:	00 00       	nop
     150:	ad c5       	rjmp	.+2906   	; 0xcac <__vector_84>
     152:	00 00       	nop
     154:	e3 c5       	rjmp	.+3014   	; 0xd1c <__vector_85>
     156:	00 00       	nop
     158:	19 c6       	rjmp	.+3122   	; 0xd8c <__vector_86>
     15a:	00 00       	nop
     15c:	cf c0       	rjmp	.+414    	; 0x2fc <__bad_interrupt>
     15e:	00 00       	nop
     160:	cd c0       	rjmp	.+410    	; 0x2fc <__bad_interrupt>
     162:	00 00       	nop
     164:	cb c0       	rjmp	.+406    	; 0x2fc <__bad_interrupt>
     166:	00 00       	nop
     168:	c9 c0       	rjmp	.+402    	; 0x2fc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__vector_91>
     170:	c5 c0       	rjmp	.+394    	; 0x2fc <__bad_interrupt>
     172:	00 00       	nop
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__bad_interrupt>
     176:	00 00       	nop
     178:	c1 c0       	rjmp	.+386    	; 0x2fc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bf c0       	rjmp	.+382    	; 0x2fc <__bad_interrupt>
     17e:	00 00       	nop
     180:	bd c0       	rjmp	.+378    	; 0x2fc <__bad_interrupt>
     182:	00 00       	nop
     184:	bb c0       	rjmp	.+374    	; 0x2fc <__bad_interrupt>
     186:	00 00       	nop
     188:	b9 c0       	rjmp	.+370    	; 0x2fc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b7 c0       	rjmp	.+366    	; 0x2fc <__bad_interrupt>
     18e:	00 00       	nop
     190:	b5 c0       	rjmp	.+362    	; 0x2fc <__bad_interrupt>
     192:	00 00       	nop
     194:	b3 c0       	rjmp	.+358    	; 0x2fc <__bad_interrupt>
     196:	00 00       	nop
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	af c0       	rjmp	.+350    	; 0x2fc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ad c0       	rjmp	.+346    	; 0x2fc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ab c0       	rjmp	.+342    	; 0x2fc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a9 c0       	rjmp	.+338    	; 0x2fc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a7 c0       	rjmp	.+334    	; 0x2fc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a5 c0       	rjmp	.+330    	; 0x2fc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	a3 c0       	rjmp	.+326    	; 0x2fc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	a1 c0       	rjmp	.+322    	; 0x2fc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9f c0       	rjmp	.+318    	; 0x2fc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	9d c0       	rjmp	.+314    	; 0x2fc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	9b c0       	rjmp	.+310    	; 0x2fc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	99 c0       	rjmp	.+306    	; 0x2fc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	97 c0       	rjmp	.+302    	; 0x2fc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	95 c0       	rjmp	.+298    	; 0x2fc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	93 c0       	rjmp	.+294    	; 0x2fc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	91 c0       	rjmp	.+290    	; 0x2fc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8f c0       	rjmp	.+286    	; 0x2fc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8d c0       	rjmp	.+282    	; 0x2fc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8b c0       	rjmp	.+278    	; 0x2fc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	89 c0       	rjmp	.+274    	; 0x2fc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	87 c0       	rjmp	.+270    	; 0x2fc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	85 c0       	rjmp	.+266    	; 0x2fc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	83 c0       	rjmp	.+262    	; 0x2fc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	81 c0       	rjmp	.+258    	; 0x2fc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 1d       	adc	r16, r8
     1fe:	05 1d       	adc	r16, r5
     200:	02 1d       	adc	r16, r2
     202:	0e 1d       	adc	r16, r14
     204:	ff 1c       	adc	r15, r15
     206:	fd 1c       	adc	r15, r13
     208:	10 1d       	adc	r17, r0
     20a:	10 1d       	adc	r17, r0
     20c:	10 1d       	adc	r17, r0
     20e:	10 1d       	adc	r17, r0
     210:	10 1d       	adc	r17, r0
     212:	10 1d       	adc	r17, r0
     214:	10 1d       	adc	r17, r0
     216:	10 1d       	adc	r17, r0
     218:	10 1d       	adc	r17, r0
     21a:	10 1d       	adc	r17, r0
     21c:	10 1d       	adc	r17, r0
     21e:	10 1d       	adc	r17, r0
     220:	0b 1d       	adc	r16, r11
     222:	07 63       	ori	r16, 0x37	; 55
     224:	42 36       	cpi	r20, 0x62	; 98
     226:	b7 9b       	sbis	0x16, 7	; 22
     228:	d8 a7       	std	Y+40, r29	; 0x28
     22a:	1a 39       	cpi	r17, 0x9A	; 154
     22c:	68 56       	subi	r22, 0x68	; 104
     22e:	18 ae       	std	Y+56, r1	; 0x38
     230:	ba ab       	std	Y+50, r27	; 0x32
     232:	55 8c       	ldd	r5, Z+29	; 0x1d
     234:	1d 3c       	cpi	r17, 0xCD	; 205
     236:	b7 cc       	rjmp	.-1682   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     238:	57 63       	ori	r21, 0x37	; 55
     23a:	bd 6d       	ori	r27, 0xDD	; 221
     23c:	ed fd       	.word	0xfded	; ????
     23e:	75 3e       	cpi	r23, 0xE5	; 229
     240:	f6 17       	cp	r31, r22
     242:	72 31       	cpi	r23, 0x12	; 18
     244:	bf 00       	.word	0x00bf	; ????
     246:	00 00       	nop
     248:	80 3f       	cpi	r24, 0xF0	; 240
     24a:	08 00       	.word	0x0008	; ????
     24c:	00 00       	nop
     24e:	be 92       	st	-X, r11
     250:	24 49       	sbci	r18, 0x94	; 148
     252:	12 3e       	cpi	r17, 0xE2	; 226
     254:	ab aa       	std	Y+51, r10	; 0x33
     256:	aa 2a       	or	r10, r26
     258:	be cd       	rjmp	.-1156   	; 0xfffffdd6 <__eeprom_end+0xff7efdd6>
     25a:	cc cc       	rjmp	.-1640   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
     25c:	4c 3e       	cpi	r20, 0xEC	; 236
     25e:	00 00       	nop
     260:	00 80       	ld	r0, Z
     262:	be ab       	std	Y+54, r27	; 0x36
     264:	aa aa       	std	Y+50, r10	; 0x32
     266:	aa 3e       	cpi	r26, 0xEA	; 234
     268:	00 00       	nop
     26a:	00 00       	nop
     26c:	bf 00       	.word	0x00bf	; ????
     26e:	00 00       	nop
     270:	80 3f       	cpi	r24, 0xF0	; 240
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 08       	sbc	r0, r0
     278:	41 78       	andi	r20, 0x81	; 129
     27a:	d3 bb       	out	0x13, r29	; 19
     27c:	43 87       	std	Z+11, r20	; 0x0b
     27e:	d1 13       	cpse	r29, r17
     280:	3d 19       	sub	r19, r13
     282:	0e 3c       	cpi	r16, 0xCE	; 206
     284:	c3 bd       	out	0x23, r28	; 35
     286:	42 82       	std	Z+2, r4	; 0x02
     288:	ad 2b       	or	r26, r29
     28a:	3e 68       	ori	r19, 0x8E	; 142
     28c:	ec 82       	std	Y+4, r14	; 0x04
     28e:	76 be       	out	0x36, r7	; 54
     290:	d9 8f       	std	Y+25, r29	; 0x19
     292:	e1 a9       	ldd	r30, Z+49	; 0x31
     294:	3e 4c       	sbci	r19, 0xCE	; 206
     296:	80 ef       	ldi	r24, 0xF0	; 240
     298:	ff be       	out	0x3f, r15	; 63
     29a:	01 c4       	rjmp	.+2050   	; 0xa9e <__vector_79+0x22>
     29c:	ff 7f       	andi	r31, 0xFF	; 255
     29e:	3f 00       	.word	0x003f	; ????
     2a0:	00 00       	nop
	...

000002a4 <__trampolines_end>:
     2a4:	63 64       	ori	r22, 0x43	; 67
     2a6:	69 6e       	ori	r22, 0xE9	; 233
     2a8:	6f 70       	andi	r22, 0x0F	; 15
     2aa:	73 75       	andi	r23, 0x53	; 83
     2ac:	78 58       	subi	r23, 0x88	; 136
     2ae:	5b 00       	.word	0x005b	; ????

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df e3       	ldi	r29, 0x3F	; 63
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	0c bf       	out	0x3c, r16	; 60
     2c0:	18 be       	out	0x38, r1	; 56
     2c2:	19 be       	out	0x39, r1	; 57
     2c4:	1a be       	out	0x3a, r1	; 58
     2c6:	1b be       	out	0x3b, r1	; 59

000002c8 <__do_copy_data>:
     2c8:	10 e2       	ldi	r17, 0x20	; 32
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e2       	ldi	r27, 0x20	; 32
     2ce:	e4 ec       	ldi	r30, 0xC4	; 196
     2d0:	fa e5       	ldi	r31, 0x5A	; 90
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0b bf       	out	0x3b, r16	; 59
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x14>
     2d8:	07 90       	elpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	a0 3f       	cpi	r26, 0xF0	; 240
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0x10>
     2e2:	1b be       	out	0x3b, r1	; 59

000002e4 <__do_clear_bss>:
     2e4:	22 e2       	ldi	r18, 0x22	; 34
     2e6:	a0 ef       	ldi	r26, 0xF0	; 240
     2e8:	b0 e2       	ldi	r27, 0x20	; 32
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	a9 33       	cpi	r26, 0x39	; 57
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <main>
     2f8:	0c 94 60 2d 	jmp	0x5ac0	; 0x5ac0 <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     308:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <stdio_base>
     30c:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <stdio_base+0x1>
     310:	e0 91 84 21 	lds	r30, 0x2184	; 0x802184 <ptr_get>
     314:	f0 91 85 21 	lds	r31, 0x2185	; 0x802185 <ptr_get+0x1>
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	19 95       	eicall
	return c;
     320:	89 81       	ldd	r24, Y+1	; 0x01
}
     322:	08 2e       	mov	r0, r24
     324:	00 0c       	add	r0, r0
     326:	99 0b       	sbc	r25, r25
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     330:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     332:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <stdio_base>
     336:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <stdio_base+0x1>
     33a:	e0 91 86 21 	lds	r30, 0x2186	; 0x802186 <ptr_put>
     33e:	f0 91 87 21 	lds	r31, 0x2187	; 0x802187 <ptr_put+0x1>
     342:	19 95       	eicall
     344:	99 23       	and	r25, r25
     346:	1c f0       	brlt	.+6      	; 0x34e <_write+0x1e>
		return -1;
	}
	return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     352:	08 95       	ret

00000354 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	08 b6       	in	r0, 0x38	; 56
     360:	0f 92       	push	r0
     362:	18 be       	out	0x38, r1	; 56
     364:	09 b6       	in	r0, 0x39	; 57
     366:	0f 92       	push	r0
     368:	19 be       	out	0x39, r1	; 57
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	1b be       	out	0x3b, r1	; 59
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     388:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     38c:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     390:	e0 91 8a 21 	lds	r30, 0x218A	; 0x80218a <adca_callback>
     394:	f0 91 8b 21 	lds	r31, 0x218B	; 0x80218b <adca_callback+0x1>
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	19 95       	eicall
}
     3a0:	ff 91       	pop	r31
     3a2:	ef 91       	pop	r30
     3a4:	bf 91       	pop	r27
     3a6:	af 91       	pop	r26
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	7f 91       	pop	r23
     3ae:	6f 91       	pop	r22
     3b0:	5f 91       	pop	r21
     3b2:	4f 91       	pop	r20
     3b4:	3f 91       	pop	r19
     3b6:	2f 91       	pop	r18
     3b8:	0f 90       	pop	r0
     3ba:	0b be       	out	0x3b, r0	; 59
     3bc:	0f 90       	pop	r0
     3be:	09 be       	out	0x39, r0	; 57
     3c0:	0f 90       	pop	r0
     3c2:	08 be       	out	0x38, r0	; 56
     3c4:	0f 90       	pop	r0
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	0f 90       	pop	r0
     3ca:	1f 90       	pop	r1
     3cc:	18 95       	reti

000003ce <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3ce:	1f 92       	push	r1
     3d0:	0f 92       	push	r0
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	0f 92       	push	r0
     3d6:	11 24       	eor	r1, r1
     3d8:	08 b6       	in	r0, 0x38	; 56
     3da:	0f 92       	push	r0
     3dc:	18 be       	out	0x38, r1	; 56
     3de:	09 b6       	in	r0, 0x39	; 57
     3e0:	0f 92       	push	r0
     3e2:	19 be       	out	0x39, r1	; 57
     3e4:	0b b6       	in	r0, 0x3b	; 59
     3e6:	0f 92       	push	r0
     3e8:	1b be       	out	0x3b, r1	; 59
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     402:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     406:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     40a:	e0 91 8a 21 	lds	r30, 0x218A	; 0x80218a <adca_callback>
     40e:	f0 91 8b 21 	lds	r31, 0x218B	; 0x80218b <adca_callback+0x1>
     412:	62 e0       	ldi	r22, 0x02	; 2
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	19 95       	eicall
}
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0b be       	out	0x3b, r0	; 59
     436:	0f 90       	pop	r0
     438:	09 be       	out	0x39, r0	; 57
     43a:	0f 90       	pop	r0
     43c:	08 be       	out	0x38, r0	; 56
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	08 b6       	in	r0, 0x38	; 56
     454:	0f 92       	push	r0
     456:	18 be       	out	0x38, r1	; 56
     458:	09 b6       	in	r0, 0x39	; 57
     45a:	0f 92       	push	r0
     45c:	19 be       	out	0x39, r1	; 57
     45e:	0b b6       	in	r0, 0x3b	; 59
     460:	0f 92       	push	r0
     462:	1b be       	out	0x3b, r1	; 59
     464:	2f 93       	push	r18
     466:	3f 93       	push	r19
     468:	4f 93       	push	r20
     46a:	5f 93       	push	r21
     46c:	6f 93       	push	r22
     46e:	7f 93       	push	r23
     470:	8f 93       	push	r24
     472:	9f 93       	push	r25
     474:	af 93       	push	r26
     476:	bf 93       	push	r27
     478:	ef 93       	push	r30
     47a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     47c:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     480:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     484:	e0 91 8a 21 	lds	r30, 0x218A	; 0x80218a <adca_callback>
     488:	f0 91 8b 21 	lds	r31, 0x218B	; 0x80218b <adca_callback+0x1>
     48c:	64 e0       	ldi	r22, 0x04	; 4
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	19 95       	eicall
}
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	bf 91       	pop	r27
     49a:	af 91       	pop	r26
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	7f 91       	pop	r23
     4a2:	6f 91       	pop	r22
     4a4:	5f 91       	pop	r21
     4a6:	4f 91       	pop	r20
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0b be       	out	0x3b, r0	; 59
     4b0:	0f 90       	pop	r0
     4b2:	09 be       	out	0x39, r0	; 57
     4b4:	0f 90       	pop	r0
     4b6:	08 be       	out	0x38, r0	; 56
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
     4cc:	08 b6       	in	r0, 0x38	; 56
     4ce:	0f 92       	push	r0
     4d0:	18 be       	out	0x38, r1	; 56
     4d2:	09 b6       	in	r0, 0x39	; 57
     4d4:	0f 92       	push	r0
     4d6:	19 be       	out	0x39, r1	; 57
     4d8:	0b b6       	in	r0, 0x3b	; 59
     4da:	0f 92       	push	r0
     4dc:	1b be       	out	0x3b, r1	; 59
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4f6:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4fa:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4fe:	e0 91 8a 21 	lds	r30, 0x218A	; 0x80218a <adca_callback>
     502:	f0 91 8b 21 	lds	r31, 0x218B	; 0x80218b <adca_callback+0x1>
     506:	68 e0       	ldi	r22, 0x08	; 8
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	19 95       	eicall
}
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	bf 91       	pop	r27
     514:	af 91       	pop	r26
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	7f 91       	pop	r23
     51c:	6f 91       	pop	r22
     51e:	5f 91       	pop	r21
     520:	4f 91       	pop	r20
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0b be       	out	0x3b, r0	; 59
     52a:	0f 90       	pop	r0
     52c:	09 be       	out	0x39, r0	; 57
     52e:	0f 90       	pop	r0
     530:	08 be       	out	0x38, r0	; 56
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     53c:	1f 92       	push	r1
     53e:	0f 92       	push	r0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	08 b6       	in	r0, 0x38	; 56
     548:	0f 92       	push	r0
     54a:	18 be       	out	0x38, r1	; 56
     54c:	09 b6       	in	r0, 0x39	; 57
     54e:	0f 92       	push	r0
     550:	19 be       	out	0x39, r1	; 57
     552:	0b b6       	in	r0, 0x3b	; 59
     554:	0f 92       	push	r0
     556:	1b be       	out	0x3b, r1	; 59
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     570:	e0 91 20 21 	lds	r30, 0x2120	; 0x802120 <tc_tcc0_ovf_callback>
     574:	f0 91 21 21 	lds	r31, 0x2121	; 0x802121 <tc_tcc0_ovf_callback+0x1>
     578:	30 97       	sbiw	r30, 0x00	; 0
     57a:	09 f0       	breq	.+2      	; 0x57e <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     57c:	19 95       	eicall
	}
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0b be       	out	0x3b, r0	; 59
     59a:	0f 90       	pop	r0
     59c:	09 be       	out	0x39, r0	; 57
     59e:	0f 90       	pop	r0
     5a0:	08 be       	out	0x38, r0	; 56
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     5ac:	1f 92       	push	r1
     5ae:	0f 92       	push	r0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	0f 92       	push	r0
     5b4:	11 24       	eor	r1, r1
     5b6:	08 b6       	in	r0, 0x38	; 56
     5b8:	0f 92       	push	r0
     5ba:	18 be       	out	0x38, r1	; 56
     5bc:	09 b6       	in	r0, 0x39	; 57
     5be:	0f 92       	push	r0
     5c0:	19 be       	out	0x39, r1	; 57
     5c2:	0b b6       	in	r0, 0x3b	; 59
     5c4:	0f 92       	push	r0
     5c6:	1b be       	out	0x3b, r1	; 59
     5c8:	2f 93       	push	r18
     5ca:	3f 93       	push	r19
     5cc:	4f 93       	push	r20
     5ce:	5f 93       	push	r21
     5d0:	6f 93       	push	r22
     5d2:	7f 93       	push	r23
     5d4:	8f 93       	push	r24
     5d6:	9f 93       	push	r25
     5d8:	af 93       	push	r26
     5da:	bf 93       	push	r27
     5dc:	ef 93       	push	r30
     5de:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     5e0:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <tc_tcc0_err_callback>
     5e4:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <tc_tcc0_err_callback+0x1>
     5e8:	30 97       	sbiw	r30, 0x00	; 0
     5ea:	09 f0       	breq	.+2      	; 0x5ee <__vector_15+0x42>
		tc_tcc0_err_callback();
     5ec:	19 95       	eicall
	}
}
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	0f 90       	pop	r0
     608:	0b be       	out	0x3b, r0	; 59
     60a:	0f 90       	pop	r0
     60c:	09 be       	out	0x39, r0	; 57
     60e:	0f 90       	pop	r0
     610:	08 be       	out	0x38, r0	; 56
     612:	0f 90       	pop	r0
     614:	0f be       	out	0x3f, r0	; 63
     616:	0f 90       	pop	r0
     618:	1f 90       	pop	r1
     61a:	18 95       	reti

0000061c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     61c:	1f 92       	push	r1
     61e:	0f 92       	push	r0
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	0f 92       	push	r0
     624:	11 24       	eor	r1, r1
     626:	08 b6       	in	r0, 0x38	; 56
     628:	0f 92       	push	r0
     62a:	18 be       	out	0x38, r1	; 56
     62c:	09 b6       	in	r0, 0x39	; 57
     62e:	0f 92       	push	r0
     630:	19 be       	out	0x39, r1	; 57
     632:	0b b6       	in	r0, 0x3b	; 59
     634:	0f 92       	push	r0
     636:	1b be       	out	0x3b, r1	; 59
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     650:	e0 91 1c 21 	lds	r30, 0x211C	; 0x80211c <tc_tcc0_cca_callback>
     654:	f0 91 1d 21 	lds	r31, 0x211D	; 0x80211d <tc_tcc0_cca_callback+0x1>
     658:	30 97       	sbiw	r30, 0x00	; 0
     65a:	09 f0       	breq	.+2      	; 0x65e <__vector_16+0x42>
		tc_tcc0_cca_callback();
     65c:	19 95       	eicall
	}
}
     65e:	ff 91       	pop	r31
     660:	ef 91       	pop	r30
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	0f 90       	pop	r0
     678:	0b be       	out	0x3b, r0	; 59
     67a:	0f 90       	pop	r0
     67c:	09 be       	out	0x39, r0	; 57
     67e:	0f 90       	pop	r0
     680:	08 be       	out	0x38, r0	; 56
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     68c:	1f 92       	push	r1
     68e:	0f 92       	push	r0
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	0f 92       	push	r0
     694:	11 24       	eor	r1, r1
     696:	08 b6       	in	r0, 0x38	; 56
     698:	0f 92       	push	r0
     69a:	18 be       	out	0x38, r1	; 56
     69c:	09 b6       	in	r0, 0x39	; 57
     69e:	0f 92       	push	r0
     6a0:	19 be       	out	0x39, r1	; 57
     6a2:	0b b6       	in	r0, 0x3b	; 59
     6a4:	0f 92       	push	r0
     6a6:	1b be       	out	0x3b, r1	; 59
     6a8:	2f 93       	push	r18
     6aa:	3f 93       	push	r19
     6ac:	4f 93       	push	r20
     6ae:	5f 93       	push	r21
     6b0:	6f 93       	push	r22
     6b2:	7f 93       	push	r23
     6b4:	8f 93       	push	r24
     6b6:	9f 93       	push	r25
     6b8:	af 93       	push	r26
     6ba:	bf 93       	push	r27
     6bc:	ef 93       	push	r30
     6be:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     6c0:	e0 91 1a 21 	lds	r30, 0x211A	; 0x80211a <tc_tcc0_ccb_callback>
     6c4:	f0 91 1b 21 	lds	r31, 0x211B	; 0x80211b <tc_tcc0_ccb_callback+0x1>
     6c8:	30 97       	sbiw	r30, 0x00	; 0
     6ca:	09 f0       	breq	.+2      	; 0x6ce <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     6cc:	19 95       	eicall
	}
}
     6ce:	ff 91       	pop	r31
     6d0:	ef 91       	pop	r30
     6d2:	bf 91       	pop	r27
     6d4:	af 91       	pop	r26
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	7f 91       	pop	r23
     6dc:	6f 91       	pop	r22
     6de:	5f 91       	pop	r21
     6e0:	4f 91       	pop	r20
     6e2:	3f 91       	pop	r19
     6e4:	2f 91       	pop	r18
     6e6:	0f 90       	pop	r0
     6e8:	0b be       	out	0x3b, r0	; 59
     6ea:	0f 90       	pop	r0
     6ec:	09 be       	out	0x39, r0	; 57
     6ee:	0f 90       	pop	r0
     6f0:	08 be       	out	0x38, r0	; 56
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	11 24       	eor	r1, r1
     706:	08 b6       	in	r0, 0x38	; 56
     708:	0f 92       	push	r0
     70a:	18 be       	out	0x38, r1	; 56
     70c:	09 b6       	in	r0, 0x39	; 57
     70e:	0f 92       	push	r0
     710:	19 be       	out	0x39, r1	; 57
     712:	0b b6       	in	r0, 0x3b	; 59
     714:	0f 92       	push	r0
     716:	1b be       	out	0x3b, r1	; 59
     718:	2f 93       	push	r18
     71a:	3f 93       	push	r19
     71c:	4f 93       	push	r20
     71e:	5f 93       	push	r21
     720:	6f 93       	push	r22
     722:	7f 93       	push	r23
     724:	8f 93       	push	r24
     726:	9f 93       	push	r25
     728:	af 93       	push	r26
     72a:	bf 93       	push	r27
     72c:	ef 93       	push	r30
     72e:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     730:	e0 91 18 21 	lds	r30, 0x2118	; 0x802118 <tc_tcc0_ccc_callback>
     734:	f0 91 19 21 	lds	r31, 0x2119	; 0x802119 <tc_tcc0_ccc_callback+0x1>
     738:	30 97       	sbiw	r30, 0x00	; 0
     73a:	09 f0       	breq	.+2      	; 0x73e <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     73c:	19 95       	eicall
	}
}
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	bf 91       	pop	r27
     744:	af 91       	pop	r26
     746:	9f 91       	pop	r25
     748:	8f 91       	pop	r24
     74a:	7f 91       	pop	r23
     74c:	6f 91       	pop	r22
     74e:	5f 91       	pop	r21
     750:	4f 91       	pop	r20
     752:	3f 91       	pop	r19
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0b be       	out	0x3b, r0	; 59
     75a:	0f 90       	pop	r0
     75c:	09 be       	out	0x39, r0	; 57
     75e:	0f 90       	pop	r0
     760:	08 be       	out	0x38, r0	; 56
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0
     768:	1f 90       	pop	r1
     76a:	18 95       	reti

0000076c <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     76c:	1f 92       	push	r1
     76e:	0f 92       	push	r0
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	0f 92       	push	r0
     774:	11 24       	eor	r1, r1
     776:	08 b6       	in	r0, 0x38	; 56
     778:	0f 92       	push	r0
     77a:	18 be       	out	0x38, r1	; 56
     77c:	09 b6       	in	r0, 0x39	; 57
     77e:	0f 92       	push	r0
     780:	19 be       	out	0x39, r1	; 57
     782:	0b b6       	in	r0, 0x3b	; 59
     784:	0f 92       	push	r0
     786:	1b be       	out	0x3b, r1	; 59
     788:	2f 93       	push	r18
     78a:	3f 93       	push	r19
     78c:	4f 93       	push	r20
     78e:	5f 93       	push	r21
     790:	6f 93       	push	r22
     792:	7f 93       	push	r23
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	af 93       	push	r26
     79a:	bf 93       	push	r27
     79c:	ef 93       	push	r30
     79e:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     7a0:	e0 91 16 21 	lds	r30, 0x2116	; 0x802116 <tc_tcc0_ccd_callback>
     7a4:	f0 91 17 21 	lds	r31, 0x2117	; 0x802117 <tc_tcc0_ccd_callback+0x1>
     7a8:	30 97       	sbiw	r30, 0x00	; 0
     7aa:	09 f0       	breq	.+2      	; 0x7ae <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     7ac:	19 95       	eicall
	}
}
     7ae:	ff 91       	pop	r31
     7b0:	ef 91       	pop	r30
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	7f 91       	pop	r23
     7bc:	6f 91       	pop	r22
     7be:	5f 91       	pop	r21
     7c0:	4f 91       	pop	r20
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	0b be       	out	0x3b, r0	; 59
     7ca:	0f 90       	pop	r0
     7cc:	09 be       	out	0x39, r0	; 57
     7ce:	0f 90       	pop	r0
     7d0:	08 be       	out	0x38, r0	; 56
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	08 b6       	in	r0, 0x38	; 56
     7e8:	0f 92       	push	r0
     7ea:	18 be       	out	0x38, r1	; 56
     7ec:	09 b6       	in	r0, 0x39	; 57
     7ee:	0f 92       	push	r0
     7f0:	19 be       	out	0x39, r1	; 57
     7f2:	0b b6       	in	r0, 0x3b	; 59
     7f4:	0f 92       	push	r0
     7f6:	1b be       	out	0x3b, r1	; 59
     7f8:	2f 93       	push	r18
     7fa:	3f 93       	push	r19
     7fc:	4f 93       	push	r20
     7fe:	5f 93       	push	r21
     800:	6f 93       	push	r22
     802:	7f 93       	push	r23
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	af 93       	push	r26
     80a:	bf 93       	push	r27
     80c:	ef 93       	push	r30
     80e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     810:	e0 91 14 21 	lds	r30, 0x2114	; 0x802114 <tc_tcc1_ovf_callback>
     814:	f0 91 15 21 	lds	r31, 0x2115	; 0x802115 <tc_tcc1_ovf_callback+0x1>
     818:	30 97       	sbiw	r30, 0x00	; 0
     81a:	09 f0       	breq	.+2      	; 0x81e <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     81c:	19 95       	eicall
	}
}
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0b be       	out	0x3b, r0	; 59
     83a:	0f 90       	pop	r0
     83c:	09 be       	out	0x39, r0	; 57
     83e:	0f 90       	pop	r0
     840:	08 be       	out	0x38, r0	; 56
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	08 b6       	in	r0, 0x38	; 56
     858:	0f 92       	push	r0
     85a:	18 be       	out	0x38, r1	; 56
     85c:	09 b6       	in	r0, 0x39	; 57
     85e:	0f 92       	push	r0
     860:	19 be       	out	0x39, r1	; 57
     862:	0b b6       	in	r0, 0x3b	; 59
     864:	0f 92       	push	r0
     866:	1b be       	out	0x3b, r1	; 59
     868:	2f 93       	push	r18
     86a:	3f 93       	push	r19
     86c:	4f 93       	push	r20
     86e:	5f 93       	push	r21
     870:	6f 93       	push	r22
     872:	7f 93       	push	r23
     874:	8f 93       	push	r24
     876:	9f 93       	push	r25
     878:	af 93       	push	r26
     87a:	bf 93       	push	r27
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     880:	e0 91 12 21 	lds	r30, 0x2112	; 0x802112 <tc_tcc1_err_callback>
     884:	f0 91 13 21 	lds	r31, 0x2113	; 0x802113 <tc_tcc1_err_callback+0x1>
     888:	30 97       	sbiw	r30, 0x00	; 0
     88a:	09 f0       	breq	.+2      	; 0x88e <__vector_21+0x42>
		tc_tcc1_err_callback();
     88c:	19 95       	eicall
	}
}
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	bf 91       	pop	r27
     894:	af 91       	pop	r26
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	7f 91       	pop	r23
     89c:	6f 91       	pop	r22
     89e:	5f 91       	pop	r21
     8a0:	4f 91       	pop	r20
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0b be       	out	0x3b, r0	; 59
     8aa:	0f 90       	pop	r0
     8ac:	09 be       	out	0x39, r0	; 57
     8ae:	0f 90       	pop	r0
     8b0:	08 be       	out	0x38, r0	; 56
     8b2:	0f 90       	pop	r0
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti

000008bc <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	08 b6       	in	r0, 0x38	; 56
     8c8:	0f 92       	push	r0
     8ca:	18 be       	out	0x38, r1	; 56
     8cc:	09 b6       	in	r0, 0x39	; 57
     8ce:	0f 92       	push	r0
     8d0:	19 be       	out	0x39, r1	; 57
     8d2:	0b b6       	in	r0, 0x3b	; 59
     8d4:	0f 92       	push	r0
     8d6:	1b be       	out	0x3b, r1	; 59
     8d8:	2f 93       	push	r18
     8da:	3f 93       	push	r19
     8dc:	4f 93       	push	r20
     8de:	5f 93       	push	r21
     8e0:	6f 93       	push	r22
     8e2:	7f 93       	push	r23
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     8f0:	e0 91 10 21 	lds	r30, 0x2110	; 0x802110 <tc_tcc1_cca_callback>
     8f4:	f0 91 11 21 	lds	r31, 0x2111	; 0x802111 <tc_tcc1_cca_callback+0x1>
     8f8:	30 97       	sbiw	r30, 0x00	; 0
     8fa:	09 f0       	breq	.+2      	; 0x8fe <__vector_22+0x42>
		tc_tcc1_cca_callback();
     8fc:	19 95       	eicall
	}
}
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	bf 91       	pop	r27
     904:	af 91       	pop	r26
     906:	9f 91       	pop	r25
     908:	8f 91       	pop	r24
     90a:	7f 91       	pop	r23
     90c:	6f 91       	pop	r22
     90e:	5f 91       	pop	r21
     910:	4f 91       	pop	r20
     912:	3f 91       	pop	r19
     914:	2f 91       	pop	r18
     916:	0f 90       	pop	r0
     918:	0b be       	out	0x3b, r0	; 59
     91a:	0f 90       	pop	r0
     91c:	09 be       	out	0x39, r0	; 57
     91e:	0f 90       	pop	r0
     920:	08 be       	out	0x38, r0	; 56
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti

0000092c <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     92c:	1f 92       	push	r1
     92e:	0f 92       	push	r0
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	0f 92       	push	r0
     934:	11 24       	eor	r1, r1
     936:	08 b6       	in	r0, 0x38	; 56
     938:	0f 92       	push	r0
     93a:	18 be       	out	0x38, r1	; 56
     93c:	09 b6       	in	r0, 0x39	; 57
     93e:	0f 92       	push	r0
     940:	19 be       	out	0x39, r1	; 57
     942:	0b b6       	in	r0, 0x3b	; 59
     944:	0f 92       	push	r0
     946:	1b be       	out	0x3b, r1	; 59
     948:	2f 93       	push	r18
     94a:	3f 93       	push	r19
     94c:	4f 93       	push	r20
     94e:	5f 93       	push	r21
     950:	6f 93       	push	r22
     952:	7f 93       	push	r23
     954:	8f 93       	push	r24
     956:	9f 93       	push	r25
     958:	af 93       	push	r26
     95a:	bf 93       	push	r27
     95c:	ef 93       	push	r30
     95e:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     960:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <tc_tcc1_ccb_callback>
     964:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <tc_tcc1_ccb_callback+0x1>
     968:	30 97       	sbiw	r30, 0x00	; 0
     96a:	09 f0       	breq	.+2      	; 0x96e <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     96c:	19 95       	eicall
	}
}
     96e:	ff 91       	pop	r31
     970:	ef 91       	pop	r30
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	7f 91       	pop	r23
     97c:	6f 91       	pop	r22
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	0f 90       	pop	r0
     988:	0b be       	out	0x3b, r0	; 59
     98a:	0f 90       	pop	r0
     98c:	09 be       	out	0x39, r0	; 57
     98e:	0f 90       	pop	r0
     990:	08 be       	out	0x38, r0	; 56
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     99c:	1f 92       	push	r1
     99e:	0f 92       	push	r0
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	0f 92       	push	r0
     9a4:	11 24       	eor	r1, r1
     9a6:	08 b6       	in	r0, 0x38	; 56
     9a8:	0f 92       	push	r0
     9aa:	18 be       	out	0x38, r1	; 56
     9ac:	09 b6       	in	r0, 0x39	; 57
     9ae:	0f 92       	push	r0
     9b0:	19 be       	out	0x39, r1	; 57
     9b2:	0b b6       	in	r0, 0x3b	; 59
     9b4:	0f 92       	push	r0
     9b6:	1b be       	out	0x3b, r1	; 59
     9b8:	2f 93       	push	r18
     9ba:	3f 93       	push	r19
     9bc:	4f 93       	push	r20
     9be:	5f 93       	push	r21
     9c0:	6f 93       	push	r22
     9c2:	7f 93       	push	r23
     9c4:	8f 93       	push	r24
     9c6:	9f 93       	push	r25
     9c8:	af 93       	push	r26
     9ca:	bf 93       	push	r27
     9cc:	ef 93       	push	r30
     9ce:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     9d0:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <tc_tcd0_ovf_callback>
     9d4:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <tc_tcd0_ovf_callback+0x1>
     9d8:	30 97       	sbiw	r30, 0x00	; 0
     9da:	09 f0       	breq	.+2      	; 0x9de <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     9dc:	19 95       	eicall
	}
}
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0b be       	out	0x3b, r0	; 59
     9fa:	0f 90       	pop	r0
     9fc:	09 be       	out	0x39, r0	; 57
     9fe:	0f 90       	pop	r0
     a00:	08 be       	out	0x38, r0	; 56
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	08 b6       	in	r0, 0x38	; 56
     a18:	0f 92       	push	r0
     a1a:	18 be       	out	0x38, r1	; 56
     a1c:	09 b6       	in	r0, 0x39	; 57
     a1e:	0f 92       	push	r0
     a20:	19 be       	out	0x39, r1	; 57
     a22:	0b b6       	in	r0, 0x3b	; 59
     a24:	0f 92       	push	r0
     a26:	1b be       	out	0x3b, r1	; 59
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     a40:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <tc_tcd0_err_callback>
     a44:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <tc_tcd0_err_callback+0x1>
     a48:	30 97       	sbiw	r30, 0x00	; 0
     a4a:	09 f0       	breq	.+2      	; 0xa4e <__vector_78+0x42>
		tc_tcd0_err_callback();
     a4c:	19 95       	eicall
	}
}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0b be       	out	0x3b, r0	; 59
     a6a:	0f 90       	pop	r0
     a6c:	09 be       	out	0x39, r0	; 57
     a6e:	0f 90       	pop	r0
     a70:	08 be       	out	0x38, r0	; 56
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     a7c:	1f 92       	push	r1
     a7e:	0f 92       	push	r0
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1
     a86:	08 b6       	in	r0, 0x38	; 56
     a88:	0f 92       	push	r0
     a8a:	18 be       	out	0x38, r1	; 56
     a8c:	09 b6       	in	r0, 0x39	; 57
     a8e:	0f 92       	push	r0
     a90:	19 be       	out	0x39, r1	; 57
     a92:	0b b6       	in	r0, 0x3b	; 59
     a94:	0f 92       	push	r0
     a96:	1b be       	out	0x3b, r1	; 59
     a98:	2f 93       	push	r18
     a9a:	3f 93       	push	r19
     a9c:	4f 93       	push	r20
     a9e:	5f 93       	push	r21
     aa0:	6f 93       	push	r22
     aa2:	7f 93       	push	r23
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	af 93       	push	r26
     aaa:	bf 93       	push	r27
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     ab0:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <tc_tcd0_cca_callback>
     ab4:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <tc_tcd0_cca_callback+0x1>
     ab8:	30 97       	sbiw	r30, 0x00	; 0
     aba:	09 f0       	breq	.+2      	; 0xabe <__vector_79+0x42>
		tc_tcd0_cca_callback();
     abc:	19 95       	eicall
	}
}
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0b be       	out	0x3b, r0	; 59
     ada:	0f 90       	pop	r0
     adc:	09 be       	out	0x39, r0	; 57
     ade:	0f 90       	pop	r0
     ae0:	08 be       	out	0x38, r0	; 56
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	08 b6       	in	r0, 0x38	; 56
     af8:	0f 92       	push	r0
     afa:	18 be       	out	0x38, r1	; 56
     afc:	09 b6       	in	r0, 0x39	; 57
     afe:	0f 92       	push	r0
     b00:	19 be       	out	0x39, r1	; 57
     b02:	0b b6       	in	r0, 0x3b	; 59
     b04:	0f 92       	push	r0
     b06:	1b be       	out	0x3b, r1	; 59
     b08:	2f 93       	push	r18
     b0a:	3f 93       	push	r19
     b0c:	4f 93       	push	r20
     b0e:	5f 93       	push	r21
     b10:	6f 93       	push	r22
     b12:	7f 93       	push	r23
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	af 93       	push	r26
     b1a:	bf 93       	push	r27
     b1c:	ef 93       	push	r30
     b1e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     b20:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <tc_tcd0_ccb_callback>
     b24:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <tc_tcd0_ccb_callback+0x1>
     b28:	30 97       	sbiw	r30, 0x00	; 0
     b2a:	09 f0       	breq	.+2      	; 0xb2e <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     b2c:	19 95       	eicall
	}
}
     b2e:	ff 91       	pop	r31
     b30:	ef 91       	pop	r30
     b32:	bf 91       	pop	r27
     b34:	af 91       	pop	r26
     b36:	9f 91       	pop	r25
     b38:	8f 91       	pop	r24
     b3a:	7f 91       	pop	r23
     b3c:	6f 91       	pop	r22
     b3e:	5f 91       	pop	r21
     b40:	4f 91       	pop	r20
     b42:	3f 91       	pop	r19
     b44:	2f 91       	pop	r18
     b46:	0f 90       	pop	r0
     b48:	0b be       	out	0x3b, r0	; 59
     b4a:	0f 90       	pop	r0
     b4c:	09 be       	out	0x39, r0	; 57
     b4e:	0f 90       	pop	r0
     b50:	08 be       	out	0x38, r0	; 56
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	08 b6       	in	r0, 0x38	; 56
     b68:	0f 92       	push	r0
     b6a:	18 be       	out	0x38, r1	; 56
     b6c:	09 b6       	in	r0, 0x39	; 57
     b6e:	0f 92       	push	r0
     b70:	19 be       	out	0x39, r1	; 57
     b72:	0b b6       	in	r0, 0x3b	; 59
     b74:	0f 92       	push	r0
     b76:	1b be       	out	0x3b, r1	; 59
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     b90:	e0 91 04 21 	lds	r30, 0x2104	; 0x802104 <tc_tcd0_ccc_callback>
     b94:	f0 91 05 21 	lds	r31, 0x2105	; 0x802105 <tc_tcd0_ccc_callback+0x1>
     b98:	30 97       	sbiw	r30, 0x00	; 0
     b9a:	09 f0       	breq	.+2      	; 0xb9e <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     b9c:	19 95       	eicall
	}
}
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0b be       	out	0x3b, r0	; 59
     bba:	0f 90       	pop	r0
     bbc:	09 be       	out	0x39, r0	; 57
     bbe:	0f 90       	pop	r0
     bc0:	08 be       	out	0x38, r0	; 56
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	08 b6       	in	r0, 0x38	; 56
     bd8:	0f 92       	push	r0
     bda:	18 be       	out	0x38, r1	; 56
     bdc:	09 b6       	in	r0, 0x39	; 57
     bde:	0f 92       	push	r0
     be0:	19 be       	out	0x39, r1	; 57
     be2:	0b b6       	in	r0, 0x3b	; 59
     be4:	0f 92       	push	r0
     be6:	1b be       	out	0x3b, r1	; 59
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     c00:	e0 91 02 21 	lds	r30, 0x2102	; 0x802102 <tc_tcd0_ccd_callback>
     c04:	f0 91 03 21 	lds	r31, 0x2103	; 0x802103 <tc_tcd0_ccd_callback+0x1>
     c08:	30 97       	sbiw	r30, 0x00	; 0
     c0a:	09 f0       	breq	.+2      	; 0xc0e <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     c0c:	19 95       	eicall
	}
}
     c0e:	ff 91       	pop	r31
     c10:	ef 91       	pop	r30
     c12:	bf 91       	pop	r27
     c14:	af 91       	pop	r26
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	7f 91       	pop	r23
     c1c:	6f 91       	pop	r22
     c1e:	5f 91       	pop	r21
     c20:	4f 91       	pop	r20
     c22:	3f 91       	pop	r19
     c24:	2f 91       	pop	r18
     c26:	0f 90       	pop	r0
     c28:	0b be       	out	0x3b, r0	; 59
     c2a:	0f 90       	pop	r0
     c2c:	09 be       	out	0x39, r0	; 57
     c2e:	0f 90       	pop	r0
     c30:	08 be       	out	0x38, r0	; 56
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	08 b6       	in	r0, 0x38	; 56
     c48:	0f 92       	push	r0
     c4a:	18 be       	out	0x38, r1	; 56
     c4c:	09 b6       	in	r0, 0x39	; 57
     c4e:	0f 92       	push	r0
     c50:	19 be       	out	0x39, r1	; 57
     c52:	0b b6       	in	r0, 0x3b	; 59
     c54:	0f 92       	push	r0
     c56:	1b be       	out	0x3b, r1	; 59
     c58:	2f 93       	push	r18
     c5a:	3f 93       	push	r19
     c5c:	4f 93       	push	r20
     c5e:	5f 93       	push	r21
     c60:	6f 93       	push	r22
     c62:	7f 93       	push	r23
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
     c68:	af 93       	push	r26
     c6a:	bf 93       	push	r27
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     c70:	e0 91 00 21 	lds	r30, 0x2100	; 0x802100 <tc_tcd1_ovf_callback>
     c74:	f0 91 01 21 	lds	r31, 0x2101	; 0x802101 <tc_tcd1_ovf_callback+0x1>
     c78:	30 97       	sbiw	r30, 0x00	; 0
     c7a:	09 f0       	breq	.+2      	; 0xc7e <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     c7c:	19 95       	eicall
	}
}
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	bf 91       	pop	r27
     c84:	af 91       	pop	r26
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	7f 91       	pop	r23
     c8c:	6f 91       	pop	r22
     c8e:	5f 91       	pop	r21
     c90:	4f 91       	pop	r20
     c92:	3f 91       	pop	r19
     c94:	2f 91       	pop	r18
     c96:	0f 90       	pop	r0
     c98:	0b be       	out	0x3b, r0	; 59
     c9a:	0f 90       	pop	r0
     c9c:	09 be       	out	0x39, r0	; 57
     c9e:	0f 90       	pop	r0
     ca0:	08 be       	out	0x38, r0	; 56
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	08 b6       	in	r0, 0x38	; 56
     cb8:	0f 92       	push	r0
     cba:	18 be       	out	0x38, r1	; 56
     cbc:	09 b6       	in	r0, 0x39	; 57
     cbe:	0f 92       	push	r0
     cc0:	19 be       	out	0x39, r1	; 57
     cc2:	0b b6       	in	r0, 0x3b	; 59
     cc4:	0f 92       	push	r0
     cc6:	1b be       	out	0x3b, r1	; 59
     cc8:	2f 93       	push	r18
     cca:	3f 93       	push	r19
     ccc:	4f 93       	push	r20
     cce:	5f 93       	push	r21
     cd0:	6f 93       	push	r22
     cd2:	7f 93       	push	r23
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	ef 93       	push	r30
     cde:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     ce0:	e0 91 fe 20 	lds	r30, 0x20FE	; 0x8020fe <tc_tcd1_err_callback>
     ce4:	f0 91 ff 20 	lds	r31, 0x20FF	; 0x8020ff <tc_tcd1_err_callback+0x1>
     ce8:	30 97       	sbiw	r30, 0x00	; 0
     cea:	09 f0       	breq	.+2      	; 0xcee <__vector_84+0x42>
		tc_tcd1_err_callback();
     cec:	19 95       	eicall
	}
}
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0b be       	out	0x3b, r0	; 59
     d0a:	0f 90       	pop	r0
     d0c:	09 be       	out	0x39, r0	; 57
     d0e:	0f 90       	pop	r0
     d10:	08 be       	out	0x38, r0	; 56
     d12:	0f 90       	pop	r0
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	0f 90       	pop	r0
     d18:	1f 90       	pop	r1
     d1a:	18 95       	reti

00000d1c <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	08 b6       	in	r0, 0x38	; 56
     d28:	0f 92       	push	r0
     d2a:	18 be       	out	0x38, r1	; 56
     d2c:	09 b6       	in	r0, 0x39	; 57
     d2e:	0f 92       	push	r0
     d30:	19 be       	out	0x39, r1	; 57
     d32:	0b b6       	in	r0, 0x3b	; 59
     d34:	0f 92       	push	r0
     d36:	1b be       	out	0x3b, r1	; 59
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     d50:	e0 91 fc 20 	lds	r30, 0x20FC	; 0x8020fc <tc_tcd1_cca_callback>
     d54:	f0 91 fd 20 	lds	r31, 0x20FD	; 0x8020fd <tc_tcd1_cca_callback+0x1>
     d58:	30 97       	sbiw	r30, 0x00	; 0
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__vector_85+0x42>
		tc_tcd1_cca_callback();
     d5c:	19 95       	eicall
	}
}
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0b be       	out	0x3b, r0	; 59
     d7a:	0f 90       	pop	r0
     d7c:	09 be       	out	0x39, r0	; 57
     d7e:	0f 90       	pop	r0
     d80:	08 be       	out	0x38, r0	; 56
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	08 b6       	in	r0, 0x38	; 56
     d98:	0f 92       	push	r0
     d9a:	18 be       	out	0x38, r1	; 56
     d9c:	09 b6       	in	r0, 0x39	; 57
     d9e:	0f 92       	push	r0
     da0:	19 be       	out	0x39, r1	; 57
     da2:	0b b6       	in	r0, 0x3b	; 59
     da4:	0f 92       	push	r0
     da6:	1b be       	out	0x3b, r1	; 59
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	4f 93       	push	r20
     dae:	5f 93       	push	r21
     db0:	6f 93       	push	r22
     db2:	7f 93       	push	r23
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	af 93       	push	r26
     dba:	bf 93       	push	r27
     dbc:	ef 93       	push	r30
     dbe:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     dc0:	e0 91 fa 20 	lds	r30, 0x20FA	; 0x8020fa <tc_tcd1_ccb_callback>
     dc4:	f0 91 fb 20 	lds	r31, 0x20FB	; 0x8020fb <tc_tcd1_ccb_callback+0x1>
     dc8:	30 97       	sbiw	r30, 0x00	; 0
     dca:	09 f0       	breq	.+2      	; 0xdce <__vector_86+0x42>
		tc_tcd1_ccb_callback();
     dcc:	19 95       	eicall
	}
}
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0b be       	out	0x3b, r0	; 59
     dea:	0f 90       	pop	r0
     dec:	09 be       	out	0x39, r0	; 57
     dee:	0f 90       	pop	r0
     df0:	08 be       	out	0x38, r0	; 56
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	08 b6       	in	r0, 0x38	; 56
     e08:	0f 92       	push	r0
     e0a:	18 be       	out	0x38, r1	; 56
     e0c:	09 b6       	in	r0, 0x39	; 57
     e0e:	0f 92       	push	r0
     e10:	19 be       	out	0x39, r1	; 57
     e12:	0b b6       	in	r0, 0x3b	; 59
     e14:	0f 92       	push	r0
     e16:	1b be       	out	0x3b, r1	; 59
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     e30:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <tc_tce0_err_callback>
     e34:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <tc_tce0_err_callback+0x1>
     e38:	30 97       	sbiw	r30, 0x00	; 0
     e3a:	09 f0       	breq	.+2      	; 0xe3e <__vector_48+0x42>
		tc_tce0_err_callback();
     e3c:	19 95       	eicall
	}
}
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0b be       	out	0x3b, r0	; 59
     e5a:	0f 90       	pop	r0
     e5c:	09 be       	out	0x39, r0	; 57
     e5e:	0f 90       	pop	r0
     e60:	08 be       	out	0x38, r0	; 56
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	08 b6       	in	r0, 0x38	; 56
     e78:	0f 92       	push	r0
     e7a:	18 be       	out	0x38, r1	; 56
     e7c:	09 b6       	in	r0, 0x39	; 57
     e7e:	0f 92       	push	r0
     e80:	19 be       	out	0x39, r1	; 57
     e82:	0b b6       	in	r0, 0x3b	; 59
     e84:	0f 92       	push	r0
     e86:	1b be       	out	0x3b, r1	; 59
     e88:	2f 93       	push	r18
     e8a:	3f 93       	push	r19
     e8c:	4f 93       	push	r20
     e8e:	5f 93       	push	r21
     e90:	6f 93       	push	r22
     e92:	7f 93       	push	r23
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	af 93       	push	r26
     e9a:	bf 93       	push	r27
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     ea0:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <tc_tce0_cca_callback>
     ea4:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <tc_tce0_cca_callback+0x1>
     ea8:	30 97       	sbiw	r30, 0x00	; 0
     eaa:	09 f0       	breq	.+2      	; 0xeae <__vector_49+0x42>
		tc_tce0_cca_callback();
     eac:	19 95       	eicall
	}
}
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	0f 90       	pop	r0
     ec8:	0b be       	out	0x3b, r0	; 59
     eca:	0f 90       	pop	r0
     ecc:	09 be       	out	0x39, r0	; 57
     ece:	0f 90       	pop	r0
     ed0:	08 be       	out	0x38, r0	; 56
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	08 b6       	in	r0, 0x38	; 56
     ee8:	0f 92       	push	r0
     eea:	18 be       	out	0x38, r1	; 56
     eec:	09 b6       	in	r0, 0x39	; 57
     eee:	0f 92       	push	r0
     ef0:	19 be       	out	0x39, r1	; 57
     ef2:	0b b6       	in	r0, 0x3b	; 59
     ef4:	0f 92       	push	r0
     ef6:	1b be       	out	0x3b, r1	; 59
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     f10:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <tc_tce0_ccb_callback>
     f14:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <tc_tce0_ccb_callback+0x1>
     f18:	30 97       	sbiw	r30, 0x00	; 0
     f1a:	09 f0       	breq	.+2      	; 0xf1e <__vector_50+0x42>
		tc_tce0_ccb_callback();
     f1c:	19 95       	eicall
	}
}
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0b be       	out	0x3b, r0	; 59
     f3a:	0f 90       	pop	r0
     f3c:	09 be       	out	0x39, r0	; 57
     f3e:	0f 90       	pop	r0
     f40:	08 be       	out	0x38, r0	; 56
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	08 b6       	in	r0, 0x38	; 56
     f58:	0f 92       	push	r0
     f5a:	18 be       	out	0x38, r1	; 56
     f5c:	09 b6       	in	r0, 0x39	; 57
     f5e:	0f 92       	push	r0
     f60:	19 be       	out	0x39, r1	; 57
     f62:	0b b6       	in	r0, 0x3b	; 59
     f64:	0f 92       	push	r0
     f66:	1b be       	out	0x3b, r1	; 59
     f68:	2f 93       	push	r18
     f6a:	3f 93       	push	r19
     f6c:	4f 93       	push	r20
     f6e:	5f 93       	push	r21
     f70:	6f 93       	push	r22
     f72:	7f 93       	push	r23
     f74:	8f 93       	push	r24
     f76:	9f 93       	push	r25
     f78:	af 93       	push	r26
     f7a:	bf 93       	push	r27
     f7c:	ef 93       	push	r30
     f7e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     f80:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <tc_tce0_ccc_callback>
     f84:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <tc_tce0_ccc_callback+0x1>
     f88:	30 97       	sbiw	r30, 0x00	; 0
     f8a:	09 f0       	breq	.+2      	; 0xf8e <__vector_51+0x42>
		tc_tce0_ccc_callback();
     f8c:	19 95       	eicall
	}
}
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	0b be       	out	0x3b, r0	; 59
     faa:	0f 90       	pop	r0
     fac:	09 be       	out	0x39, r0	; 57
     fae:	0f 90       	pop	r0
     fb0:	08 be       	out	0x38, r0	; 56
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     fbc:	1f 92       	push	r1
     fbe:	0f 92       	push	r0
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	08 b6       	in	r0, 0x38	; 56
     fc8:	0f 92       	push	r0
     fca:	18 be       	out	0x38, r1	; 56
     fcc:	09 b6       	in	r0, 0x39	; 57
     fce:	0f 92       	push	r0
     fd0:	19 be       	out	0x39, r1	; 57
     fd2:	0b b6       	in	r0, 0x3b	; 59
     fd4:	0f 92       	push	r0
     fd6:	1b be       	out	0x3b, r1	; 59
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	ef 93       	push	r30
     fee:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     ff0:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <__data_end>
     ff4:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <__data_end+0x1>
     ff8:	30 97       	sbiw	r30, 0x00	; 0
     ffa:	09 f0       	breq	.+2      	; 0xffe <__vector_52+0x42>
		tc_tce0_ccd_callback();
     ffc:	19 95       	eicall
	}
}
     ffe:	ff 91       	pop	r31
    1000:	ef 91       	pop	r30
    1002:	bf 91       	pop	r27
    1004:	af 91       	pop	r26
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	7f 91       	pop	r23
    100c:	6f 91       	pop	r22
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	0b be       	out	0x3b, r0	; 59
    101a:	0f 90       	pop	r0
    101c:	09 be       	out	0x39, r0	; 57
    101e:	0f 90       	pop	r0
    1020:	08 be       	out	0x38, r0	; 56
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1030:	e0 91 22 21 	lds	r30, 0x2122	; 0x802122 <transfer>
    1034:	f0 91 23 21 	lds	r31, 0x2123	; 0x802123 <transfer+0x1>
    1038:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    103a:	83 ff       	sbrs	r24, 3
    103c:	08 c0       	rjmp	.+16     	; 0x104e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    103e:	88 60       	ori	r24, 0x08	; 8
    1040:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1046:	86 ef       	ldi	r24, 0xF6	; 246
    1048:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <transfer+0xa>
    104c:	83 c0       	rjmp	.+262    	; 0x1154 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    104e:	98 2f       	mov	r25, r24
    1050:	94 71       	andi	r25, 0x14	; 20
    1052:	31 f0       	breq	.+12     	; 0x1060 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1054:	83 e0       	ldi	r24, 0x03	; 3
    1056:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <transfer+0xa>
    105e:	7a c0       	rjmp	.+244    	; 0x1154 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1060:	86 ff       	sbrs	r24, 6
    1062:	43 c0       	rjmp	.+134    	; 0x10ea <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1064:	c2 e2       	ldi	r28, 0x22	; 34
    1066:	d1 e2       	ldi	r29, 0x21	; 33
    1068:	aa 81       	ldd	r26, Y+2	; 0x02
    106a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	14 96       	adiw	r26, 0x04	; 4
    1072:	2d 91       	ld	r18, X+
    1074:	3c 91       	ld	r19, X
    1076:	15 97       	sbiw	r26, 0x05	; 5
    1078:	82 17       	cp	r24, r18
    107a:	93 07       	cpc	r25, r19
    107c:	6c f4       	brge	.+26     	; 0x1098 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    107e:	9c 01       	movw	r18, r24
    1080:	2f 5f       	subi	r18, 0xFF	; 255
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	20 93 26 21 	sts	0x2126, r18	; 0x802126 <transfer+0x4>
    1088:	30 93 27 21 	sts	0x2127, r19	; 0x802127 <transfer+0x5>
    108c:	a8 0f       	add	r26, r24
    108e:	b9 1f       	adc	r27, r25
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	8c 91       	ld	r24, X
    1094:	87 83       	std	Z+7, r24	; 0x07
    1096:	5e c0       	rjmp	.+188    	; 0x1154 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1098:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <transfer+0x6>
    109c:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <transfer+0x7>
    10a0:	18 96       	adiw	r26, 0x08	; 8
    10a2:	2d 91       	ld	r18, X+
    10a4:	3c 91       	ld	r19, X
    10a6:	19 97       	sbiw	r26, 0x09	; 9
    10a8:	82 17       	cp	r24, r18
    10aa:	93 07       	cpc	r25, r19
    10ac:	c8 f4       	brcc	.+50     	; 0x10e0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    10ae:	20 91 2a 21 	lds	r18, 0x212A	; 0x80212a <transfer+0x8>
    10b2:	22 23       	and	r18, r18
    10b4:	21 f0       	breq	.+8      	; 0x10be <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    10b6:	86 81       	ldd	r24, Z+6	; 0x06
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	86 83       	std	Z+6, r24	; 0x06
    10bc:	4b c0       	rjmp	.+150    	; 0x1154 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    10be:	16 96       	adiw	r26, 0x06	; 6
    10c0:	2d 91       	ld	r18, X+
    10c2:	3c 91       	ld	r19, X
    10c4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    10c6:	ac 01       	movw	r20, r24
    10c8:	4f 5f       	subi	r20, 0xFF	; 255
    10ca:	5f 4f       	sbci	r21, 0xFF	; 255
    10cc:	40 93 28 21 	sts	0x2128, r20	; 0x802128 <transfer+0x6>
    10d0:	50 93 29 21 	sts	0x2129, r21	; 0x802129 <transfer+0x7>
    10d4:	d9 01       	movw	r26, r18
    10d6:	a8 0f       	add	r26, r24
    10d8:	b9 1f       	adc	r27, r25
    10da:	8c 91       	ld	r24, X
    10dc:	87 83       	std	Z+7, r24	; 0x07
    10de:	3a c0       	rjmp	.+116    	; 0x1154 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    10e4:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <transfer+0xa>
    10e8:	35 c0       	rjmp	.+106    	; 0x1154 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    10ea:	88 23       	and	r24, r24
    10ec:	84 f5       	brge	.+96     	; 0x114e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    10ee:	a2 e2       	ldi	r26, 0x22	; 34
    10f0:	b1 e2       	ldi	r27, 0x21	; 33
    10f2:	12 96       	adiw	r26, 0x02	; 2
    10f4:	cd 91       	ld	r28, X+
    10f6:	dc 91       	ld	r29, X
    10f8:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    10fa:	16 96       	adiw	r26, 0x06	; 6
    10fc:	8d 91       	ld	r24, X+
    10fe:	9c 91       	ld	r25, X
    1100:	17 97       	sbiw	r26, 0x07	; 7
    1102:	28 85       	ldd	r18, Y+8	; 0x08
    1104:	39 85       	ldd	r19, Y+9	; 0x09
    1106:	82 17       	cp	r24, r18
    1108:	93 07       	cpc	r25, r19
    110a:	d8 f4       	brcc	.+54     	; 0x1142 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    110c:	6e 81       	ldd	r22, Y+6	; 0x06
    110e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1110:	9c 01       	movw	r18, r24
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	20 93 28 21 	sts	0x2128, r18	; 0x802128 <transfer+0x6>
    111a:	30 93 29 21 	sts	0x2129, r19	; 0x802129 <transfer+0x7>
    111e:	47 81       	ldd	r20, Z+7	; 0x07
    1120:	db 01       	movw	r26, r22
    1122:	a8 0f       	add	r26, r24
    1124:	b9 1f       	adc	r27, r25
    1126:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1128:	88 85       	ldd	r24, Y+8	; 0x08
    112a:	99 85       	ldd	r25, Y+9	; 0x09
    112c:	28 17       	cp	r18, r24
    112e:	39 07       	cpc	r19, r25
    1130:	18 f4       	brcc	.+6      	; 0x1138 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	83 83       	std	Z+3, r24	; 0x03
    1136:	0e c0       	rjmp	.+28     	; 0x1154 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1138:	87 e0       	ldi	r24, 0x07	; 7
    113a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    113c:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <transfer+0xa>
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1146:	89 ef       	ldi	r24, 0xF9	; 249
    1148:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <transfer+0xa>
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    114e:	8b ef       	ldi	r24, 0xFB	; 251
    1150:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <transfer+0xa>
	}
}
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	08 b6       	in	r0, 0x38	; 56
    1166:	0f 92       	push	r0
    1168:	18 be       	out	0x38, r1	; 56
    116a:	09 b6       	in	r0, 0x39	; 57
    116c:	0f 92       	push	r0
    116e:	19 be       	out	0x39, r1	; 57
    1170:	0b b6       	in	r0, 0x3b	; 59
    1172:	0f 92       	push	r0
    1174:	1b be       	out	0x3b, r1	; 59
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
    118e:	4e df       	rcall	.-356    	; 0x102c <twim_interrupt_handler>
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
    11f2:	1c df       	rcall	.-456    	; 0x102c <twim_interrupt_handler>
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0b be       	out	0x3b, r0	; 59
    1210:	0f 90       	pop	r0
    1212:	09 be       	out	0x39, r0	; 57
    1214:	0f 90       	pop	r0
    1216:	08 be       	out	0x38, r0	; 56
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1222:	fc 01       	movw	r30, r24
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	95 ff       	sbrs	r25, 5
    1228:	fd cf       	rjmp	.-6      	; 0x1224 <usart_putchar+0x2>
    122a:	60 83       	st	Z, r22
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	08 95       	ret

00001232 <usart_getchar>:
    1232:	fc 01       	movw	r30, r24
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	99 23       	and	r25, r25
    1238:	ec f7       	brge	.-6      	; 0x1234 <usart_getchar+0x2>
    123a:	80 81       	ld	r24, Z
    123c:	08 95       	ret

0000123e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    123e:	4f 92       	push	r4
    1240:	5f 92       	push	r5
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	7c 01       	movw	r14, r24
    125a:	4a 01       	movw	r8, r20
    125c:	5b 01       	movw	r10, r22
    125e:	28 01       	movw	r4, r16
    1260:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1262:	fc 01       	movw	r30, r24
    1264:	84 81       	ldd	r24, Z+4	; 0x04
    1266:	82 ff       	sbrs	r24, 2
    1268:	16 c0       	rjmp	.+44     	; 0x1296 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    126a:	d9 01       	movw	r26, r18
    126c:	c8 01       	movw	r24, r16
    126e:	68 94       	set
    1270:	12 f8       	bld	r1, 2
    1272:	b6 95       	lsr	r27
    1274:	a7 95       	ror	r26
    1276:	97 95       	ror	r25
    1278:	87 95       	ror	r24
    127a:	16 94       	lsr	r1
    127c:	d1 f7       	brne	.-12     	; 0x1272 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    127e:	b9 01       	movw	r22, r18
    1280:	a8 01       	movw	r20, r16
    1282:	03 2e       	mov	r0, r19
    1284:	36 e1       	ldi	r19, 0x16	; 22
    1286:	76 95       	lsr	r23
    1288:	67 95       	ror	r22
    128a:	57 95       	ror	r21
    128c:	47 95       	ror	r20
    128e:	3a 95       	dec	r19
    1290:	d1 f7       	brne	.-12     	; 0x1286 <usart_set_baudrate+0x48>
    1292:	30 2d       	mov	r19, r0
    1294:	15 c0       	rjmp	.+42     	; 0x12c0 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1296:	d9 01       	movw	r26, r18
    1298:	c8 01       	movw	r24, r16
    129a:	68 94       	set
    129c:	13 f8       	bld	r1, 3
    129e:	b6 95       	lsr	r27
    12a0:	a7 95       	ror	r26
    12a2:	97 95       	ror	r25
    12a4:	87 95       	ror	r24
    12a6:	16 94       	lsr	r1
    12a8:	d1 f7       	brne	.-12     	; 0x129e <usart_set_baudrate+0x60>
		min_rate /= 2;
    12aa:	b9 01       	movw	r22, r18
    12ac:	a8 01       	movw	r20, r16
    12ae:	03 2e       	mov	r0, r19
    12b0:	37 e1       	ldi	r19, 0x17	; 23
    12b2:	76 95       	lsr	r23
    12b4:	67 95       	ror	r22
    12b6:	57 95       	ror	r21
    12b8:	47 95       	ror	r20
    12ba:	3a 95       	dec	r19
    12bc:	d1 f7       	brne	.-12     	; 0x12b2 <usart_set_baudrate+0x74>
    12be:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    12c0:	88 15       	cp	r24, r8
    12c2:	99 05       	cpc	r25, r9
    12c4:	aa 05       	cpc	r26, r10
    12c6:	bb 05       	cpc	r27, r11
    12c8:	08 f4       	brcc	.+2      	; 0x12cc <usart_set_baudrate+0x8e>
    12ca:	a6 c0       	rjmp	.+332    	; 0x1418 <usart_set_baudrate+0x1da>
    12cc:	84 16       	cp	r8, r20
    12ce:	95 06       	cpc	r9, r21
    12d0:	a6 06       	cpc	r10, r22
    12d2:	b7 06       	cpc	r11, r23
    12d4:	08 f4       	brcc	.+2      	; 0x12d8 <usart_set_baudrate+0x9a>
    12d6:	a2 c0       	rjmp	.+324    	; 0x141c <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    12d8:	f7 01       	movw	r30, r14
    12da:	84 81       	ldd	r24, Z+4	; 0x04
    12dc:	82 fd       	sbrc	r24, 2
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <usart_set_baudrate+0xaa>
		baud *= 2;
    12e0:	88 0c       	add	r8, r8
    12e2:	99 1c       	adc	r9, r9
    12e4:	aa 1c       	adc	r10, r10
    12e6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    12e8:	c3 01       	movw	r24, r6
    12ea:	b2 01       	movw	r22, r4
    12ec:	a5 01       	movw	r20, r10
    12ee:	94 01       	movw	r18, r8
    12f0:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    12f4:	2f 3f       	cpi	r18, 0xFF	; 255
    12f6:	31 05       	cpc	r19, r1
    12f8:	41 05       	cpc	r20, r1
    12fa:	51 05       	cpc	r21, r1
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <usart_set_baudrate+0xc2>
    12fe:	90 c0       	rjmp	.+288    	; 0x1420 <usart_set_baudrate+0x1e2>
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	c9 ef       	ldi	r28, 0xF9	; 249
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <usart_set_baudrate+0xd8>
    130c:	28 17       	cp	r18, r24
    130e:	39 07       	cpc	r19, r25
    1310:	4a 07       	cpc	r20, r26
    1312:	5b 07       	cpc	r21, r27
    1314:	58 f0       	brcs	.+22     	; 0x132c <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	aa 1f       	adc	r26, r26
    131c:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    131e:	cd 3f       	cpi	r28, 0xFD	; 253
    1320:	0c f4       	brge	.+2      	; 0x1324 <usart_set_baudrate+0xe6>
			limit |= 1;
    1322:	81 60       	ori	r24, 0x01	; 1
    1324:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1326:	c7 30       	cpi	r28, 0x07	; 7
    1328:	89 f7       	brne	.-30     	; 0x130c <usart_set_baudrate+0xce>
    132a:	4f c0       	rjmp	.+158    	; 0x13ca <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    132c:	cc 23       	and	r28, r28
    132e:	0c f0       	brlt	.+2      	; 0x1332 <usart_set_baudrate+0xf4>
    1330:	4c c0       	rjmp	.+152    	; 0x13ca <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1332:	d5 01       	movw	r26, r10
    1334:	c4 01       	movw	r24, r8
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	aa 1f       	adc	r26, r26
    133c:	bb 1f       	adc	r27, r27
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	aa 1f       	adc	r26, r26
    1344:	bb 1f       	adc	r27, r27
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	aa 1f       	adc	r26, r26
    134c:	bb 1f       	adc	r27, r27
    134e:	48 1a       	sub	r4, r24
    1350:	59 0a       	sbc	r5, r25
    1352:	6a 0a       	sbc	r6, r26
    1354:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1356:	ce 3f       	cpi	r28, 0xFE	; 254
    1358:	f4 f4       	brge	.+60     	; 0x1396 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    135a:	8d ef       	ldi	r24, 0xFD	; 253
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	8c 1b       	sub	r24, r28
    1360:	91 09       	sbc	r25, r1
    1362:	c7 fd       	sbrc	r28, 7
    1364:	93 95       	inc	r25
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <usart_set_baudrate+0x132>
    1368:	44 0c       	add	r4, r4
    136a:	55 1c       	adc	r5, r5
    136c:	66 1c       	adc	r6, r6
    136e:	77 1c       	adc	r7, r7
    1370:	8a 95       	dec	r24
    1372:	d2 f7       	brpl	.-12     	; 0x1368 <usart_set_baudrate+0x12a>
    1374:	d5 01       	movw	r26, r10
    1376:	c4 01       	movw	r24, r8
    1378:	b6 95       	lsr	r27
    137a:	a7 95       	ror	r26
    137c:	97 95       	ror	r25
    137e:	87 95       	ror	r24
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	64 0d       	add	r22, r4
    1386:	75 1d       	adc	r23, r5
    1388:	86 1d       	adc	r24, r6
    138a:	97 1d       	adc	r25, r7
    138c:	a5 01       	movw	r20, r10
    138e:	94 01       	movw	r18, r8
    1390:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__udivmodsi4>
    1394:	37 c0       	rjmp	.+110    	; 0x1404 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	8c 0f       	add	r24, r28
    139a:	a5 01       	movw	r20, r10
    139c:	94 01       	movw	r18, r8
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <usart_set_baudrate+0x16a>
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	44 1f       	adc	r20, r20
    13a6:	55 1f       	adc	r21, r21
    13a8:	8a 95       	dec	r24
    13aa:	d2 f7       	brpl	.-12     	; 0x13a0 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    13ac:	da 01       	movw	r26, r20
    13ae:	c9 01       	movw	r24, r18
    13b0:	b6 95       	lsr	r27
    13b2:	a7 95       	ror	r26
    13b4:	97 95       	ror	r25
    13b6:	87 95       	ror	r24
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	64 0d       	add	r22, r4
    13be:	75 1d       	adc	r23, r5
    13c0:	86 1d       	adc	r24, r6
    13c2:	97 1d       	adc	r25, r7
    13c4:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__udivmodsi4>
    13c8:	1d c0       	rjmp	.+58     	; 0x1404 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	8c 0f       	add	r24, r28
    13ce:	a5 01       	movw	r20, r10
    13d0:	94 01       	movw	r18, r8
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <usart_set_baudrate+0x19e>
    13d4:	22 0f       	add	r18, r18
    13d6:	33 1f       	adc	r19, r19
    13d8:	44 1f       	adc	r20, r20
    13da:	55 1f       	adc	r21, r21
    13dc:	8a 95       	dec	r24
    13de:	d2 f7       	brpl	.-12     	; 0x13d4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    13e0:	da 01       	movw	r26, r20
    13e2:	c9 01       	movw	r24, r18
    13e4:	b6 95       	lsr	r27
    13e6:	a7 95       	ror	r26
    13e8:	97 95       	ror	r25
    13ea:	87 95       	ror	r24
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	64 0d       	add	r22, r4
    13f2:	75 1d       	adc	r23, r5
    13f4:	86 1d       	adc	r24, r6
    13f6:	97 1d       	adc	r25, r7
    13f8:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__udivmodsi4>
    13fc:	21 50       	subi	r18, 0x01	; 1
    13fe:	31 09       	sbc	r19, r1
    1400:	41 09       	sbc	r20, r1
    1402:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1404:	83 2f       	mov	r24, r19
    1406:	8f 70       	andi	r24, 0x0F	; 15
    1408:	c2 95       	swap	r28
    140a:	c0 7f       	andi	r28, 0xF0	; 240
    140c:	c8 2b       	or	r28, r24
    140e:	f7 01       	movw	r30, r14
    1410:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1412:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	18 c0       	rjmp	.+48     	; 0x1448 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	16 c0       	rjmp	.+44     	; 0x1448 <usart_set_baudrate+0x20a>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	14 c0       	rjmp	.+40     	; 0x1448 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1420:	d5 01       	movw	r26, r10
    1422:	c4 01       	movw	r24, r8
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	aa 1f       	adc	r26, r26
    142a:	bb 1f       	adc	r27, r27
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	aa 1f       	adc	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	aa 1f       	adc	r26, r26
    143a:	bb 1f       	adc	r27, r27
    143c:	48 1a       	sub	r4, r24
    143e:	59 0a       	sbc	r5, r25
    1440:	6a 0a       	sbc	r6, r26
    1442:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1444:	c9 ef       	ldi	r28, 0xF9	; 249
    1446:	89 cf       	rjmp	.-238    	; 0x135a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	bf 90       	pop	r11
    1454:	af 90       	pop	r10
    1456:	9f 90       	pop	r9
    1458:	8f 90       	pop	r8
    145a:	7f 90       	pop	r7
    145c:	6f 90       	pop	r6
    145e:	5f 90       	pop	r5
    1460:	4f 90       	pop	r4
    1462:	08 95       	ret

00001464 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    146e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	09 f4       	brne	.+2      	; 0x1476 <usart_init_rs232+0x12>
    1474:	be c0       	rjmp	.+380    	; 0x15f2 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1476:	80 3c       	cpi	r24, 0xC0	; 192
    1478:	91 05       	cpc	r25, r1
    147a:	21 f4       	brne	.+8      	; 0x1484 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    147c:	60 e1       	ldi	r22, 0x10	; 16
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	e9 d3       	rcall	.+2002   	; 0x1c54 <sysclk_enable_module>
    1482:	b7 c0       	rjmp	.+366    	; 0x15f2 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1484:	c1 15       	cp	r28, r1
    1486:	84 e0       	ldi	r24, 0x04	; 4
    1488:	d8 07       	cpc	r29, r24
    148a:	21 f4       	brne	.+8      	; 0x1494 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    148c:	64 e0       	ldi	r22, 0x04	; 4
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	e1 d3       	rcall	.+1986   	; 0x1c54 <sysclk_enable_module>
    1492:	af c0       	rjmp	.+350    	; 0x15f2 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1494:	c0 38       	cpi	r28, 0x80	; 128
    1496:	e1 e0       	ldi	r30, 0x01	; 1
    1498:	de 07       	cpc	r29, r30
    149a:	21 f4       	brne	.+8      	; 0x14a4 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    149c:	62 e0       	ldi	r22, 0x02	; 2
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	d9 d3       	rcall	.+1970   	; 0x1c54 <sysclk_enable_module>
    14a2:	a7 c0       	rjmp	.+334    	; 0x15f2 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    14a4:	c1 15       	cp	r28, r1
    14a6:	f1 e0       	ldi	r31, 0x01	; 1
    14a8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    14aa:	21 f4       	brne	.+8      	; 0x14b4 <usart_init_rs232+0x50>
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	d1 d3       	rcall	.+1954   	; 0x1c54 <sysclk_enable_module>
    14b2:	9f c0       	rjmp	.+318    	; 0x15f2 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    14b4:	c0 38       	cpi	r28, 0x80	; 128
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <usart_init_rs232+0x60>
    14bc:	61 e0       	ldi	r22, 0x01	; 1
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	c9 d3       	rcall	.+1938   	; 0x1c54 <sysclk_enable_module>
    14c2:	97 c0       	rjmp	.+302    	; 0x15f2 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    14c4:	c1 15       	cp	r28, r1
    14c6:	e2 e0       	ldi	r30, 0x02	; 2
    14c8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    14ca:	21 f4       	brne	.+8      	; 0x14d4 <usart_init_rs232+0x70>
    14cc:	62 e0       	ldi	r22, 0x02	; 2
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	c1 d3       	rcall	.+1922   	; 0x1c54 <sysclk_enable_module>
    14d2:	8f c0       	rjmp	.+286    	; 0x15f2 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    14d4:	c0 32       	cpi	r28, 0x20	; 32
    14d6:	f3 e0       	ldi	r31, 0x03	; 3
    14d8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    14da:	21 f4       	brne	.+8      	; 0x14e4 <usart_init_rs232+0x80>
    14dc:	64 e0       	ldi	r22, 0x04	; 4
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	b9 d3       	rcall	.+1906   	; 0x1c54 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    14e2:	87 c0       	rjmp	.+270    	; 0x15f2 <usart_init_rs232+0x18e>
    14e4:	c1 15       	cp	r28, r1
    14e6:	88 e0       	ldi	r24, 0x08	; 8
    14e8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    14ea:	21 f4       	brne	.+8      	; 0x14f4 <usart_init_rs232+0x90>
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	b1 d3       	rcall	.+1890   	; 0x1c54 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    14f2:	7f c0       	rjmp	.+254    	; 0x15f2 <usart_init_rs232+0x18e>
    14f4:	c1 15       	cp	r28, r1
    14f6:	e9 e0       	ldi	r30, 0x09	; 9
    14f8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    14fa:	21 f4       	brne	.+8      	; 0x1504 <usart_init_rs232+0xa0>
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	a9 d3       	rcall	.+1874   	; 0x1c54 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1502:	77 c0       	rjmp	.+238    	; 0x15f2 <usart_init_rs232+0x18e>
    1504:	c1 15       	cp	r28, r1
    1506:	fa e0       	ldi	r31, 0x0A	; 10
    1508:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    150a:	21 f4       	brne	.+8      	; 0x1514 <usart_init_rs232+0xb0>
    150c:	61 e0       	ldi	r22, 0x01	; 1
    150e:	85 e0       	ldi	r24, 0x05	; 5
    1510:	a1 d3       	rcall	.+1858   	; 0x1c54 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1512:	6f c0       	rjmp	.+222    	; 0x15f2 <usart_init_rs232+0x18e>
    1514:	c0 34       	cpi	r28, 0x40	; 64
    1516:	88 e0       	ldi	r24, 0x08	; 8
    1518:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    151a:	21 f4       	brne	.+8      	; 0x1524 <usart_init_rs232+0xc0>
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	99 d3       	rcall	.+1842   	; 0x1c54 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1522:	67 c0       	rjmp	.+206    	; 0x15f2 <usart_init_rs232+0x18e>
    1524:	c0 34       	cpi	r28, 0x40	; 64
    1526:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1528:	de 07       	cpc	r29, r30
    152a:	21 f4       	brne	.+8      	; 0x1534 <usart_init_rs232+0xd0>
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	91 d3       	rcall	.+1826   	; 0x1c54 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1532:	5f c0       	rjmp	.+190    	; 0x15f2 <usart_init_rs232+0x18e>
    1534:	c0 39       	cpi	r28, 0x90	; 144
    1536:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1538:	df 07       	cpc	r29, r31
    153a:	21 f4       	brne	.+8      	; 0x1544 <usart_init_rs232+0xe0>
    153c:	64 e0       	ldi	r22, 0x04	; 4
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	89 d3       	rcall	.+1810   	; 0x1c54 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1542:	57 c0       	rjmp	.+174    	; 0x15f2 <usart_init_rs232+0x18e>
    1544:	c0 39       	cpi	r28, 0x90	; 144
    1546:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1548:	d8 07       	cpc	r29, r24
    154a:	21 f4       	brne	.+8      	; 0x1554 <usart_init_rs232+0xf0>
    154c:	64 e0       	ldi	r22, 0x04	; 4
    154e:	84 e0       	ldi	r24, 0x04	; 4
    1550:	81 d3       	rcall	.+1794   	; 0x1c54 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1552:	4f c0       	rjmp	.+158    	; 0x15f2 <usart_init_rs232+0x18e>
    1554:	c0 39       	cpi	r28, 0x90	; 144
    1556:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1558:	de 07       	cpc	r29, r30
    155a:	21 f4       	brne	.+8      	; 0x1564 <usart_init_rs232+0x100>
    155c:	64 e0       	ldi	r22, 0x04	; 4
    155e:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1560:	79 d3       	rcall	.+1778   	; 0x1c54 <sysclk_enable_module>
    1562:	47 c0       	rjmp	.+142    	; 0x15f2 <usart_init_rs232+0x18e>
    1564:	c0 3c       	cpi	r28, 0xC0	; 192
    1566:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1568:	df 07       	cpc	r29, r31
    156a:	21 f4       	brne	.+8      	; 0x1574 <usart_init_rs232+0x110>
    156c:	68 e0       	ldi	r22, 0x08	; 8
    156e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1570:	71 d3       	rcall	.+1762   	; 0x1c54 <sysclk_enable_module>
    1572:	3f c0       	rjmp	.+126    	; 0x15f2 <usart_init_rs232+0x18e>
    1574:	c0 3c       	cpi	r28, 0xC0	; 192
    1576:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1578:	d8 07       	cpc	r29, r24
    157a:	21 f4       	brne	.+8      	; 0x1584 <usart_init_rs232+0x120>
    157c:	68 e0       	ldi	r22, 0x08	; 8
    157e:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1580:	69 d3       	rcall	.+1746   	; 0x1c54 <sysclk_enable_module>
    1582:	37 c0       	rjmp	.+110    	; 0x15f2 <usart_init_rs232+0x18e>
    1584:	c0 3a       	cpi	r28, 0xA0	; 160
    1586:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1588:	de 07       	cpc	r29, r30
    158a:	21 f4       	brne	.+8      	; 0x1594 <usart_init_rs232+0x130>
    158c:	60 e1       	ldi	r22, 0x10	; 16
    158e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1590:	61 d3       	rcall	.+1730   	; 0x1c54 <sysclk_enable_module>
    1592:	2f c0       	rjmp	.+94     	; 0x15f2 <usart_init_rs232+0x18e>
    1594:	c0 3a       	cpi	r28, 0xA0	; 160
    1596:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1598:	df 07       	cpc	r29, r31
    159a:	21 f4       	brne	.+8      	; 0x15a4 <usart_init_rs232+0x140>
    159c:	60 e1       	ldi	r22, 0x10	; 16
    159e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    15a0:	59 d3       	rcall	.+1714   	; 0x1c54 <sysclk_enable_module>
    15a2:	27 c0       	rjmp	.+78     	; 0x15f2 <usart_init_rs232+0x18e>
    15a4:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    15a6:	8a e0       	ldi	r24, 0x0A	; 10
    15a8:	d8 07       	cpc	r29, r24
    15aa:	21 f4       	brne	.+8      	; 0x15b4 <usart_init_rs232+0x150>
    15ac:	60 e1       	ldi	r22, 0x10	; 16
    15ae:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    15b0:	51 d3       	rcall	.+1698   	; 0x1c54 <sysclk_enable_module>
    15b2:	1f c0       	rjmp	.+62     	; 0x15f2 <usart_init_rs232+0x18e>
    15b4:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    15b6:	e8 e0       	ldi	r30, 0x08	; 8
    15b8:	de 07       	cpc	r29, r30
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <usart_init_rs232+0x160>
    15bc:	60 e2       	ldi	r22, 0x20	; 32
    15be:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    15c0:	49 d3       	rcall	.+1682   	; 0x1c54 <sysclk_enable_module>
    15c2:	17 c0       	rjmp	.+46     	; 0x15f2 <usart_init_rs232+0x18e>
    15c4:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    15c6:	f9 e0       	ldi	r31, 0x09	; 9
    15c8:	df 07       	cpc	r29, r31
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <usart_init_rs232+0x170>
    15cc:	60 e2       	ldi	r22, 0x20	; 32
    15ce:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    15d0:	41 d3       	rcall	.+1666   	; 0x1c54 <sysclk_enable_module>
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <usart_init_rs232+0x18e>
    15d4:	c0 38       	cpi	r28, 0x80	; 128
    15d6:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    15d8:	d8 07       	cpc	r29, r24
    15da:	21 f4       	brne	.+8      	; 0x15e4 <usart_init_rs232+0x180>
    15dc:	60 e4       	ldi	r22, 0x40	; 64
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	39 d3       	rcall	.+1650   	; 0x1c54 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <usart_init_rs232+0x18e>
    15e4:	c0 3a       	cpi	r28, 0xA0	; 160
    15e6:	e4 e0       	ldi	r30, 0x04	; 4
    15e8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    15ea:	19 f4       	brne	.+6      	; 0x15f2 <usart_init_rs232+0x18e>
    15ec:	60 e4       	ldi	r22, 0x40	; 64
    15ee:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    15f0:	31 d3       	rcall	.+1634   	; 0x1c54 <sysclk_enable_module>
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	f8 01       	movw	r30, r16
    15fa:	95 81       	ldd	r25, Z+5	; 0x05
    15fc:	84 81       	ldd	r24, Z+4	; 0x04
    15fe:	89 2b       	or	r24, r25
    1600:	96 81       	ldd	r25, Z+6	; 0x06
    1602:	91 11       	cpse	r25, r1
    1604:	98 e0       	ldi	r25, 0x08	; 8
    1606:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1608:	8d 83       	std	Y+5, r24	; 0x05
    160a:	f8 01       	movw	r30, r16
    160c:	40 81       	ld	r20, Z
    160e:	51 81       	ldd	r21, Z+1	; 0x01
    1610:	62 81       	ldd	r22, Z+2	; 0x02
    1612:	73 81       	ldd	r23, Z+3	; 0x03
    1614:	00 e0       	ldi	r16, 0x00	; 0
    1616:	18 e4       	ldi	r17, 0x48	; 72
    1618:	28 ee       	ldi	r18, 0xE8	; 232
    161a:	31 e0       	ldi	r19, 0x01	; 1
    161c:	ce 01       	movw	r24, r28
    161e:	0f de       	rcall	.-994    	; 0x123e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	98 60       	ori	r25, 0x08	; 8
    1624:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	90 61       	ori	r25, 0x10	; 16
    162a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	08 95       	ret

00001636 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
    1636:	08 95       	ret

00001638 <imu_heading>:
	return bno055_euler.p;
}

double imu_heading()
{
	return bno055_euler.h;
    1638:	60 91 a7 21 	lds	r22, 0x21A7	; 0x8021a7 <bno055_euler>
    163c:	70 91 a8 21 	lds	r23, 0x21A8	; 0x8021a8 <bno055_euler+0x1>
    1640:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <bno055_euler+0x2>
    1644:	90 91 aa 21 	lds	r25, 0x21AA	; 0x8021aa <bno055_euler+0x3>
}
    1648:	08 95       	ret

0000164a <cam_switch>:
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
	cam_switch();
}

void cam_switch(void){
	PORTA.OUT ^= PIN3_bm; // Changes A3 from high to low or vice-versa
    164a:	e0 e0       	ldi	r30, 0x00	; 0
    164c:	f6 e0       	ldi	r31, 0x06	; 6
    164e:	94 81       	ldd	r25, Z+4	; 0x04
    1650:	88 e0       	ldi	r24, 0x08	; 8
    1652:	89 27       	eor	r24, r25
    1654:	84 83       	std	Z+4, r24	; 0x04
    1656:	08 95       	ret

00001658 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
    1658:	e0 e0       	ldi	r30, 0x00	; 0
    165a:	f6 e0       	ldi	r31, 0x06	; 6
    165c:	80 81       	ld	r24, Z
    165e:	88 60       	ori	r24, 0x08	; 8
    1660:	80 83       	st	Z, r24
	cam_switch();
    1662:	f3 cf       	rjmp	.-26     	; 0x164a <cam_switch>
    1664:	08 95       	ret

00001666 <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	ef d2       	rcall	.+1502   	; 0x1c54 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
    1676:	c0 e0       	ldi	r28, 0x00	; 0
    1678:	d2 e0       	ldi	r29, 0x02	; 2
    167a:	ff 24       	eor	r15, r15
    167c:	f3 94       	inc	r15
    167e:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    1680:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    1682:	80 e1       	ldi	r24, 0x10	; 16
    1684:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    1686:	85 e0       	ldi	r24, 0x05	; 5
    1688:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    168a:	61 e2       	ldi	r22, 0x21	; 33
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	f7 d2       	rcall	.+1518   	; 0x1c80 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1692:	08 2f       	mov	r16, r24
    1694:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    1696:	10 2f       	mov	r17, r16
    1698:	00 27       	eor	r16, r16
    169a:	60 e2       	ldi	r22, 0x20	; 32
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	ef d2       	rcall	.+1502   	; 0x1c80 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    16a2:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    16a4:	0c 87       	std	Y+12, r16	; 0x0c
    16a6:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
    16a8:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 0	
    16aa:	19 a2       	std	Y+33, r1	; 0x21
}
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	08 95       	ret

000016b8 <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	27 97       	sbiw	r28, 0x07	; 7
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    16c6:	60 e2       	ldi	r22, 0x20	; 32
    16c8:	84 e0       	ldi	r24, 0x04	; 4
    16ca:	c4 d2       	rcall	.+1416   	; 0x1c54 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
    16cc:	e0 e6       	ldi	r30, 0x60	; 96
    16ce:	f6 e0       	ldi	r31, 0x06	; 6
    16d0:	80 81       	ld	r24, Z
    16d2:	80 68       	ori	r24, 0x80	; 128
    16d4:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    16d6:	e6 e0       	ldi	r30, 0x06	; 6
    16d8:	f0 e2       	ldi	r31, 0x20	; 32
    16da:	84 81       	ldd	r24, Z+4	; 0x04
    16dc:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    16de:	85 81       	ldd	r24, Z+5	; 0x05
    16e0:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    16e2:	86 81       	ldd	r24, Z+6	; 0x06
    16e4:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    16e6:	80 81       	ld	r24, Z
    16e8:	91 81       	ldd	r25, Z+1	; 0x01
    16ea:	a2 81       	ldd	r26, Z+2	; 0x02
    16ec:	b3 81       	ldd	r27, Z+3	; 0x03
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	ab 83       	std	Y+3, r26	; 0x03
    16f4:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    16f6:	60 e2       	ldi	r22, 0x20	; 32
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	ac d2       	rcall	.+1368   	; 0x1c54 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    16fc:	be 01       	movw	r22, r28
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	80 eb       	ldi	r24, 0xB0	; 176
    1704:	99 e0       	ldi	r25, 0x09	; 9
    1706:	ae de       	rcall	.-676    	; 0x1464 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
    1708:	27 96       	adiw	r28, 0x07	; 7
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	08 95       	ret

00001714 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1716:	61 50       	subi	r22, 0x01	; 1
    1718:	71 09       	sbc	r23, r1
    171a:	81 09       	sbc	r24, r1
    171c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    171e:	61 15       	cp	r22, r1
    1720:	71 05       	cpc	r23, r1
    1722:	81 05       	cpc	r24, r1
    1724:	91 05       	cpc	r25, r1
    1726:	b9 f7       	brne	.-18     	; 0x1716 <__portable_avr_delay_cycles+0x2>
    1728:	08 95       	ret

0000172a <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
    172a:	e0 e4       	ldi	r30, 0x40	; 64
    172c:	f6 e0       	ldi	r31, 0x06	; 6
    172e:	94 81       	ldd	r25, Z+4	; 0x04
    1730:	80 e1       	ldi	r24, 0x10	; 16
    1732:	89 27       	eor	r24, r25
    1734:	84 83       	std	Z+4, r24	; 0x04
    1736:	08 95       	ret

00001738 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    1738:	e0 e4       	ldi	r30, 0x40	; 64
    173a:	f6 e0       	ldi	r31, 0x06	; 6
    173c:	84 81       	ldd	r24, Z+4	; 0x04
    173e:	80 61       	ori	r24, 0x10	; 16
    1740:	84 83       	std	Z+4, r24	; 0x04
	
	// Resets the ms5607
	flip_ms5607();
    1742:	f3 df       	rcall	.-26     	; 0x172a <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
    1744:	8e e1       	ldi	r24, 0x1E	; 30
    1746:	b9 d0       	rcall	.+370    	; 0x18ba <spi_write>
	delay_ms(3);
    1748:	60 e8       	ldi	r22, 0x80	; 128
    174a:	7e e3       	ldi	r23, 0x3E	; 62
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    1750:	e1 df       	rcall	.-62     	; 0x1714 <__portable_avr_delay_cycles>
    1752:	eb df       	rcall	.-42     	; 0x172a <flip_ms5607>
	delay_ms(2);
    1754:	6b ea       	ldi	r22, 0xAB	; 171
    1756:	79 e2       	ldi	r23, 0x29	; 41
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	db cf       	rjmp	.-74     	; 0x1714 <__portable_avr_delay_cycles>
    175e:	08 95       	ret

00001760 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
    1766:	e1 df       	rcall	.-62     	; 0x172a <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
    1768:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
    176a:	a7 d0       	rcall	.+334    	; 0x18ba <spi_write>
    176c:	97 d0       	rcall	.+302    	; 0x189c <spi_read>
    176e:	c8 2f       	mov	r28, r24
    1770:	d0 e0       	ldi	r29, 0x00	; 0
    1772:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
    1774:	cc 27       	eor	r28, r28
    1776:	92 d0       	rcall	.+292    	; 0x189c <spi_read>
    1778:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
    177a:	d7 df       	rcall	.-82     	; 0x172a <flip_ms5607>
    177c:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <ms5607_convert_d1>:
    1784:	cf 93       	push	r28

uint32_t ms5607_convert_d1(void)
{
    1786:	df 93       	push	r29
    1788:	00 d0       	rcall	.+0      	; 0x178a <ms5607_convert_d1+0x6>
    178a:	1f 92       	push	r1
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    1790:	19 82       	std	Y+1, r1	; 0x01
    1792:	1a 82       	std	Y+2, r1	; 0x02
    1794:	1b 82       	std	Y+3, r1	; 0x03
    1796:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D1
	flip_ms5607(); // select our spi device
    1798:	c8 df       	rcall	.-112    	; 0x172a <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
    179a:	88 e4       	ldi	r24, 0x48	; 72
    179c:	8e d0       	rcall	.+284    	; 0x18ba <spi_write>
	delay_ms(10);
    179e:	66 e5       	ldi	r22, 0x56	; 86
    17a0:	70 ed       	ldi	r23, 0xD0	; 208
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    17a6:	b6 df       	rcall	.-148    	; 0x1714 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    17a8:	c0 df       	rcall	.-128    	; 0x172a <flip_ms5607>
    17aa:	bf df       	rcall	.-130    	; 0x172a <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	85 d0       	rcall	.+266    	; 0x18ba <spi_write>
    17b0:	75 d0       	rcall	.+234    	; 0x189c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a0 e0       	ldi	r26, 0x00	; 0
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	dc 01       	movw	r26, r24
    17ba:	99 27       	eor	r25, r25
    17bc:	88 27       	eor	r24, r24
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	ab 83       	std	Y+3, r26	; 0x03
    17c4:	bc 83       	std	Y+4, r27	; 0x04
    17c6:	6a d0       	rcall	.+212    	; 0x189c <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    17c8:	49 81       	ldd	r20, Y+1	; 0x01
    17ca:	5a 81       	ldd	r21, Y+2	; 0x02
    17cc:	6b 81       	ldd	r22, Y+3	; 0x03
    17ce:	7c 81       	ldd	r23, Y+4	; 0x04
    17d0:	58 2b       	or	r21, r24
    17d2:	49 83       	std	Y+1, r20	; 0x01
    17d4:	5a 83       	std	Y+2, r21	; 0x02
    17d6:	6b 83       	std	Y+3, r22	; 0x03
    17d8:	7c 83       	std	Y+4, r23	; 0x04
    17da:	60 d0       	rcall	.+192    	; 0x189c <spi_read>
	rx_data |= spi_read();
    17dc:	49 81       	ldd	r20, Y+1	; 0x01
    17de:	5a 81       	ldd	r21, Y+2	; 0x02
    17e0:	6b 81       	ldd	r22, Y+3	; 0x03
    17e2:	7c 81       	ldd	r23, Y+4	; 0x04
    17e4:	48 2b       	or	r20, r24
    17e6:	49 83       	std	Y+1, r20	; 0x01
    17e8:	5a 83       	std	Y+2, r21	; 0x02
    17ea:	6b 83       	std	Y+3, r22	; 0x03
    17ec:	7c 83       	std	Y+4, r23	; 0x04
    17ee:	9d df       	rcall	.-198    	; 0x172a <flip_ms5607>
	flip_ms5607();
    17f0:	69 81       	ldd	r22, Y+1	; 0x01
    17f2:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	24 96       	adiw	r28, 0x04	; 4
    17fa:	cd bf       	out	0x3d, r28	; 61
}
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <ms5607_convert_d2>:
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29

uint32_t ms5607_convert_d2(void)
{
    1808:	00 d0       	rcall	.+0      	; 0x180a <ms5607_convert_d2+0x6>
    180a:	1f 92       	push	r1
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t rx_data = 0; // temporary 16-bit value
    1810:	19 82       	std	Y+1, r1	; 0x01
    1812:	1a 82       	std	Y+2, r1	; 0x02
    1814:	1b 82       	std	Y+3, r1	; 0x03
    1816:	1c 82       	std	Y+4, r1	; 0x04
	// CONVERT D2
	flip_ms5607(); // select our spi device
    1818:	88 df       	rcall	.-240    	; 0x172a <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
    181a:	88 e5       	ldi	r24, 0x58	; 88
    181c:	4e d0       	rcall	.+156    	; 0x18ba <spi_write>
	delay_ms(10);
    181e:	66 e5       	ldi	r22, 0x56	; 86
    1820:	70 ed       	ldi	r23, 0xD0	; 208
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
    1826:	76 df       	rcall	.-276    	; 0x1714 <__portable_avr_delay_cycles>
	
	flip_ms5607();
    1828:	80 df       	rcall	.-256    	; 0x172a <flip_ms5607>
    182a:	7f df       	rcall	.-258    	; 0x172a <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	45 d0       	rcall	.+138    	; 0x18ba <spi_write>
    1830:	35 d0       	rcall	.+106    	; 0x189c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a0 e0       	ldi	r26, 0x00	; 0
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	dc 01       	movw	r26, r24
    183a:	99 27       	eor	r25, r25
    183c:	88 27       	eor	r24, r24
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	ab 83       	std	Y+3, r26	; 0x03
    1844:	bc 83       	std	Y+4, r27	; 0x04
    1846:	2a d0       	rcall	.+84     	; 0x189c <spi_read>
	rx_data |= (uint32_t) spi_read()<<8;
    1848:	49 81       	ldd	r20, Y+1	; 0x01
    184a:	5a 81       	ldd	r21, Y+2	; 0x02
    184c:	6b 81       	ldd	r22, Y+3	; 0x03
    184e:	7c 81       	ldd	r23, Y+4	; 0x04
    1850:	58 2b       	or	r21, r24
    1852:	49 83       	std	Y+1, r20	; 0x01
    1854:	5a 83       	std	Y+2, r21	; 0x02
    1856:	6b 83       	std	Y+3, r22	; 0x03
    1858:	7c 83       	std	Y+4, r23	; 0x04
    185a:	20 d0       	rcall	.+64     	; 0x189c <spi_read>
	rx_data |= spi_read();
    185c:	49 81       	ldd	r20, Y+1	; 0x01
    185e:	5a 81       	ldd	r21, Y+2	; 0x02
    1860:	6b 81       	ldd	r22, Y+3	; 0x03
    1862:	7c 81       	ldd	r23, Y+4	; 0x04
    1864:	48 2b       	or	r20, r24
    1866:	49 83       	std	Y+1, r20	; 0x01
    1868:	5a 83       	std	Y+2, r21	; 0x02
    186a:	6b 83       	std	Y+3, r22	; 0x03
    186c:	7c 83       	std	Y+4, r23	; 0x04
    186e:	5d df       	rcall	.-326    	; 0x172a <flip_ms5607>
	flip_ms5607();
    1870:	69 81       	ldd	r22, Y+1	; 0x01
    1872:	7a 81       	ldd	r23, Y+2	; 0x02
	
	return rx_data;
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	24 96       	adiw	r28, 0x04	; 4
    187a:	cd bf       	out	0x3d, r28	; 61
}
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	08 95       	ret

00001884 <spi_init>:
    1884:	e0 e4       	ldi	r30, 0x40	; 64
    1886:	f6 e0       	ldi	r31, 0x06	; 6
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
    1888:	80 81       	ld	r24, Z
    188a:	80 6b       	ori	r24, 0xB0	; 176
    188c:	80 83       	st	Z, r24
    188e:	68 e0       	ldi	r22, 0x08	; 8
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	e0 d1       	rcall	.+960    	; 0x1c54 <sysclk_enable_module>
    1894:	8c e5       	ldi	r24, 0x5C	; 92
    1896:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    189a:	08 95       	ret

0000189c <spi_read>:
}

volatile uint8_t spi_read(void)
{
	uint8_t oldInterruptState = SREG;
    189c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    189e:	f8 94       	cli
	SPIC.DATA = 0xFF; // make the DATA register something we know
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    18a6:	e0 ec       	ldi	r30, 0xC0	; 192
    18a8:	f8 e0       	ldi	r31, 0x08	; 8
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	88 23       	and	r24, r24
    18ae:	ec f7       	brge	.-6      	; 0x18aa <spi_read+0xe>
	sei();
    18b0:	78 94       	sei
	SREG=oldInterruptState;
    18b2:	9f bf       	out	0x3f, r25	; 63
	return SPIC.DATA; // return the data from this function
    18b4:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    18b8:	08 95       	ret

000018ba <spi_write>:

void spi_write(uint8_t data)
{
	uint8_t oldInterruptState = SREG;
    18ba:	9f b7       	in	r25, 0x3f	; 63
	cli();
    18bc:	f8 94       	cli
	SPIC.DATA = data; // write the data we want to send to the data register
    18be:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
    18c2:	e0 ec       	ldi	r30, 0xC0	; 192
    18c4:	f8 e0       	ldi	r31, 0x08	; 8
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	88 23       	and	r24, r24
    18ca:	ec f7       	brge	.-6      	; 0x18c6 <spi_write+0xc>
	sei();
    18cc:	78 94       	sei
	SREG=oldInterruptState;
    18ce:	9f bf       	out	0x3f, r25	; 63
    18d0:	08 95       	ret

000018d2 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    18d8:	ac dc       	rcall	.-1704   	; 0x1232 <usart_getchar>
    18da:	88 83       	st	Y, r24
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    18e2:	9f cc       	rjmp	.-1730   	; 0x1222 <usart_putchar>
}
    18e4:	08 95       	ret

000018e6 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	27 97       	sbiw	r28, 0x07	; 7
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    18f4:	60 e1       	ldi	r22, 0x10	; 16
    18f6:	85 e0       	ldi	r24, 0x05	; 5
    18f8:	ad d1       	rcall	.+858    	; 0x1c54 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    18fa:	e0 e8       	ldi	r30, 0x80	; 128
    18fc:	f6 e0       	ldi	r31, 0x06	; 6
    18fe:	80 81       	ld	r24, Z
    1900:	88 60       	ori	r24, 0x08	; 8
    1902:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1904:	80 ea       	ldi	r24, 0xA0	; 160
    1906:	9a e0       	ldi	r25, 0x0A	; 10
    1908:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <stdio_base>
    190c:	90 93 89 21 	sts	0x2189, r25	; 0x802189 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1910:	81 e7       	ldi	r24, 0x71	; 113
    1912:	9c e0       	ldi	r25, 0x0C	; 12
    1914:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <ptr_put>
    1918:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    191c:	89 e6       	ldi	r24, 0x69	; 105
    191e:	9c e0       	ldi	r25, 0x0C	; 12
    1920:	80 93 84 21 	sts	0x2184, r24	; 0x802184 <ptr_get>
    1924:	90 93 85 21 	sts	0x2185, r25	; 0x802185 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1928:	ed e0       	ldi	r30, 0x0D	; 13
    192a:	f0 e2       	ldi	r31, 0x20	; 32
    192c:	84 81       	ldd	r24, Z+4	; 0x04
    192e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1930:	85 81       	ldd	r24, Z+5	; 0x05
    1932:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1934:	86 81       	ldd	r24, Z+6	; 0x06
    1936:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	a2 81       	ldd	r26, Z+2	; 0x02
    193e:	b3 81       	ldd	r27, Z+3	; 0x03
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	ab 83       	std	Y+3, r26	; 0x03
    1946:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1948:	60 e1       	ldi	r22, 0x10	; 16
    194a:	85 e0       	ldi	r24, 0x05	; 5
    194c:	83 d1       	rcall	.+774    	; 0x1c54 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    194e:	be 01       	movw	r22, r28
    1950:	6f 5f       	subi	r22, 0xFF	; 255
    1952:	7f 4f       	sbci	r23, 0xFF	; 255
    1954:	80 ea       	ldi	r24, 0xA0	; 160
    1956:	9a e0       	ldi	r25, 0x0A	; 10
    1958:	85 dd       	rcall	.-1270   	; 0x1464 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    195a:	6f e7       	ldi	r22, 0x7F	; 127
    195c:	71 e0       	ldi	r23, 0x01	; 1
    195e:	88 e9       	ldi	r24, 0x98	; 152
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	0e 94 77 25 	call	0x4aee	; 0x4aee <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
    1966:	27 96       	adiw	r28, 0x07	; 7
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <voltage_init>:
#include "voltage.h"
#include <asf.h>


void voltage_init(void)
{
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    197c:	62 e0       	ldi	r22, 0x02	; 2
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	69 d1       	rcall	.+722    	; 0x1c54 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&VOLTAGE_SERIAL);
	VOLTAGE_SERIAL.CTRLA = 0x01; // enable the ADC
    1982:	c0 e0       	ldi	r28, 0x00	; 0
    1984:	d2 e0       	ldi	r29, 0x02	; 2
    1986:	ff 24       	eor	r15, r15
    1988:	f3 94       	inc	r15
    198a:	f8 82       	st	Y, r15
	VOLTAGE_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
    198c:	19 82       	std	Y+1, r1	; 0x01
	VOLTAGE_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    198e:	80 e1       	ldi	r24, 0x10	; 16
    1990:	8a 83       	std	Y+2, r24	; 0x02
	VOLTAGE_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    1992:	85 e0       	ldi	r24, 0x05	; 5
    1994:	8c 83       	std	Y+4, r24	; 0x04
    1996:	61 e2       	ldi	r22, 0x21	; 33
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	71 d1       	rcall	.+738    	; 0x1c80 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    199e:	08 2f       	mov	r16, r24
    19a0:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    19a2:	10 2f       	mov	r17, r16
    19a4:	00 27       	eor	r16, r16
    19a6:	60 e2       	ldi	r22, 0x20	; 32
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	69 d1       	rcall	.+722    	; 0x1c80 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    19ae:	08 2b       	or	r16, r24
	VOLTAGE_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    19b0:	0c 87       	std	Y+12, r16	; 0x0c
    19b2:	1d 87       	std	Y+13, r17	; 0x0d
	
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL = 0x01; // single ended input
    19b4:	f8 a6       	std	Y+40, r15	; 0x28
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
    19b6:	19 a6       	std	Y+41, r1	; 0x29
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	08 95       	ret

000019c4 <voltage_read>:

uint16_t voltage_read(void)
{
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
    19c4:	e0 e0       	ldi	r30, 0x00	; 0
    19c6:	f2 e0       	ldi	r31, 0x02	; 2
    19c8:	80 a5       	ldd	r24, Z+40	; 0x28
    19ca:	80 68       	ori	r24, 0x80	; 128
    19cc:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_SERIAL.VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
    19ce:	83 a5       	ldd	r24, Z+43	; 0x2b
    19d0:	88 23       	and	r24, r24
    19d2:	e9 f3       	breq	.-6      	; 0x19ce <voltage_read+0xa>
	return VOLTAGE_SERIAL.VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
    19d4:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    19d8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    19dc:	08 95       	ret

000019de <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	fc 01       	movw	r30, r24
    19e4:	41 15       	cp	r20, r1
    19e6:	51 05       	cpc	r21, r1
    19e8:	b1 f1       	breq	.+108    	; 0x1a56 <rb16_write+0x78>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	db 01       	movw	r26, r22
    19f6:	a8 0f       	add	r26, r24
    19f8:	b9 1f       	adc	r27, r25
    19fa:	8d 91       	ld	r24, X+
    19fc:	9c 91       	ld	r25, X
    19fe:	a2 81       	ldd	r26, Z+2	; 0x02
    1a00:	b3 81       	ldd	r27, Z+3	; 0x03
    1a02:	aa 0f       	add	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	c6 81       	ldd	r28, Z+6	; 0x06
    1a08:	d7 81       	ldd	r29, Z+7	; 0x07
    1a0a:	ac 0f       	add	r26, r28
    1a0c:	bd 1f       	adc	r27, r29
    1a0e:	8d 93       	st	X+, r24
    1a10:	9c 93       	st	X, r25
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	82 83       	std	Z+2, r24	; 0x02
    1a1a:	93 83       	std	Z+3, r25	; 0x03
    1a1c:	a0 81       	ld	r26, Z
    1a1e:	b1 81       	ldd	r27, Z+1	; 0x01
    1a20:	8a 17       	cp	r24, r26
    1a22:	9b 07       	cpc	r25, r27
    1a24:	11 f4       	brne	.+4      	; 0x1a2a <rb16_write+0x4c>
    1a26:	12 82       	std	Z+2, r1	; 0x02
    1a28:	13 82       	std	Z+3, r1	; 0x03
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	c4 81       	ldd	r28, Z+4	; 0x04
    1a30:	d5 81       	ldd	r29, Z+5	; 0x05
    1a32:	8c 17       	cp	r24, r28
    1a34:	9d 07       	cpc	r25, r29
    1a36:	49 f4       	brne	.+18     	; 0x1a4a <rb16_write+0x6c>
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	a8 17       	cp	r26, r24
    1a3c:	b9 07       	cpc	r27, r25
    1a3e:	19 f0       	breq	.+6      	; 0x1a46 <rb16_write+0x68>
    1a40:	84 83       	std	Z+4, r24	; 0x04
    1a42:	95 83       	std	Z+5, r25	; 0x05
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <rb16_write+0x6c>
    1a46:	14 82       	std	Z+4, r1	; 0x04
    1a48:	15 82       	std	Z+5, r1	; 0x05
    1a4a:	2f 5f       	subi	r18, 0xFF	; 255
    1a4c:	82 2f       	mov	r24, r18
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	84 17       	cp	r24, r20
    1a52:	95 07       	cpc	r25, r21
    1a54:	68 f2       	brcs	.-102    	; 0x19f0 <rb16_write+0x12>
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <rb16_init>:
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	12 82       	std	Z+2, r1	; 0x02
    1a60:	13 82       	std	Z+3, r1	; 0x03
    1a62:	14 82       	std	Z+4, r1	; 0x04
    1a64:	15 82       	std	Z+5, r1	; 0x05
    1a66:	66 83       	std	Z+6, r22	; 0x06
    1a68:	77 83       	std	Z+7, r23	; 0x07
    1a6a:	40 83       	st	Z, r20
    1a6c:	51 83       	std	Z+1, r21	; 0x01
    1a6e:	08 95       	ret

00001a70 <rb16_get_nth>:
    1a70:	dc 01       	movw	r26, r24
    1a72:	12 96       	adiw	r26, 0x02	; 2
    1a74:	ed 91       	ld	r30, X+
    1a76:	fc 91       	ld	r31, X
    1a78:	13 97       	sbiw	r26, 0x03	; 3
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	e8 17       	cp	r30, r24
    1a80:	f9 07       	cpc	r31, r25
    1a82:	78 f0       	brcs	.+30     	; 0x1aa2 <rb16_get_nth+0x32>
    1a84:	e1 50       	subi	r30, 0x01	; 1
    1a86:	f0 48       	sbci	r31, 0x80	; 128
    1a88:	e6 1b       	sub	r30, r22
    1a8a:	f7 0b       	sbc	r31, r23
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	16 96       	adiw	r26, 0x06	; 6
    1a92:	8d 91       	ld	r24, X+
    1a94:	9c 91       	ld	r25, X
    1a96:	17 97       	sbiw	r26, 0x07	; 7
    1a98:	e8 0f       	add	r30, r24
    1a9a:	f9 1f       	adc	r31, r25
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	08 95       	ret
    1aa2:	2d 91       	ld	r18, X+
    1aa4:	3c 91       	ld	r19, X
    1aa6:	11 97       	sbiw	r26, 0x01	; 1
    1aa8:	e2 0f       	add	r30, r18
    1aaa:	f3 1f       	adc	r31, r19
    1aac:	e1 50       	subi	r30, 0x01	; 1
    1aae:	f0 48       	sbci	r31, 0x80	; 128
    1ab0:	e6 1b       	sub	r30, r22
    1ab2:	f7 0b       	sbc	r31, r23
    1ab4:	ee 0f       	add	r30, r30
    1ab6:	ff 1f       	adc	r31, r31
    1ab8:	16 96       	adiw	r26, 0x06	; 6
    1aba:	8d 91       	ld	r24, X+
    1abc:	9c 91       	ld	r25, X
    1abe:	17 97       	sbiw	r26, 0x07	; 7
    1ac0:	e8 0f       	add	r30, r24
    1ac2:	f9 1f       	adc	r31, r25
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	08 95       	ret

00001aca <rb32_write>:
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	41 15       	cp	r20, r1
    1ada:	51 05       	cpc	r21, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <rb32_write+0x16>
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <rb32_write+0x94>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	db 01       	movw	r26, r22
    1af0:	a8 0f       	add	r26, r24
    1af2:	b9 1f       	adc	r27, r25
    1af4:	cd 90       	ld	r12, X+
    1af6:	dd 90       	ld	r13, X+
    1af8:	ed 90       	ld	r14, X+
    1afa:	fc 90       	ld	r15, X
    1afc:	a2 81       	ldd	r26, Z+2	; 0x02
    1afe:	b3 81       	ldd	r27, Z+3	; 0x03
    1b00:	aa 0f       	add	r26, r26
    1b02:	bb 1f       	adc	r27, r27
    1b04:	aa 0f       	add	r26, r26
    1b06:	bb 1f       	adc	r27, r27
    1b08:	86 81       	ldd	r24, Z+6	; 0x06
    1b0a:	97 81       	ldd	r25, Z+7	; 0x07
    1b0c:	a8 0f       	add	r26, r24
    1b0e:	b9 1f       	adc	r27, r25
    1b10:	cd 92       	st	X+, r12
    1b12:	dd 92       	st	X+, r13
    1b14:	ed 92       	st	X+, r14
    1b16:	fc 92       	st	X, r15
    1b18:	13 97       	sbiw	r26, 0x03	; 3
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	82 83       	std	Z+2, r24	; 0x02
    1b22:	93 83       	std	Z+3, r25	; 0x03
    1b24:	a0 81       	ld	r26, Z
    1b26:	b1 81       	ldd	r27, Z+1	; 0x01
    1b28:	8a 17       	cp	r24, r26
    1b2a:	9b 07       	cpc	r25, r27
    1b2c:	11 f4       	brne	.+4      	; 0x1b32 <rb32_write+0x68>
    1b2e:	12 82       	std	Z+2, r1	; 0x02
    1b30:	13 82       	std	Z+3, r1	; 0x03
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	c4 81       	ldd	r28, Z+4	; 0x04
    1b38:	d5 81       	ldd	r29, Z+5	; 0x05
    1b3a:	8c 17       	cp	r24, r28
    1b3c:	9d 07       	cpc	r25, r29
    1b3e:	49 f4       	brne	.+18     	; 0x1b52 <rb32_write+0x88>
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	a8 17       	cp	r26, r24
    1b44:	b9 07       	cpc	r27, r25
    1b46:	19 f0       	breq	.+6      	; 0x1b4e <rb32_write+0x84>
    1b48:	84 83       	std	Z+4, r24	; 0x04
    1b4a:	95 83       	std	Z+5, r25	; 0x05
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <rb32_write+0x88>
    1b4e:	14 82       	std	Z+4, r1	; 0x04
    1b50:	15 82       	std	Z+5, r1	; 0x05
    1b52:	2f 5f       	subi	r18, 0xFF	; 255
    1b54:	82 2f       	mov	r24, r18
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	84 17       	cp	r24, r20
    1b5a:	95 07       	cpc	r25, r21
    1b5c:	20 f2       	brcs	.-120    	; 0x1ae6 <rb32_write+0x1c>
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	08 95       	ret

00001b6c <rb32_init>:
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	12 82       	std	Z+2, r1	; 0x02
    1b70:	13 82       	std	Z+3, r1	; 0x03
    1b72:	14 82       	std	Z+4, r1	; 0x04
    1b74:	15 82       	std	Z+5, r1	; 0x05
    1b76:	66 83       	std	Z+6, r22	; 0x06
    1b78:	77 83       	std	Z+7, r23	; 0x07
    1b7a:	40 83       	st	Z, r20
    1b7c:	51 83       	std	Z+1, r21	; 0x01
    1b7e:	08 95       	ret

00001b80 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    1b80:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    1b82:	12 96       	adiw	r26, 0x02	; 2
    1b84:	ed 91       	ld	r30, X+
    1b86:	fc 91       	ld	r31, X
    1b88:	13 97       	sbiw	r26, 0x03	; 3
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	e8 17       	cp	r30, r24
    1b90:	f9 07       	cpc	r31, r25
    1b92:	98 f0       	brcs	.+38     	; 0x1bba <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    1b94:	e1 50       	subi	r30, 0x01	; 1
    1b96:	f0 4c       	sbci	r31, 0xC0	; 192
    1b98:	e6 1b       	sub	r30, r22
    1b9a:	f7 0b       	sbc	r31, r23
    1b9c:	ee 0f       	add	r30, r30
    1b9e:	ff 1f       	adc	r31, r31
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	16 96       	adiw	r26, 0x06	; 6
    1ba6:	8d 91       	ld	r24, X+
    1ba8:	9c 91       	ld	r25, X
    1baa:	17 97       	sbiw	r26, 0x07	; 7
    1bac:	e8 0f       	add	r30, r24
    1bae:	f9 1f       	adc	r31, r25
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    1bba:	2d 91       	ld	r18, X+
    1bbc:	3c 91       	ld	r19, X
    1bbe:	11 97       	sbiw	r26, 0x01	; 1
    1bc0:	e2 0f       	add	r30, r18
    1bc2:	f3 1f       	adc	r31, r19
    1bc4:	e1 50       	subi	r30, 0x01	; 1
    1bc6:	f0 4c       	sbci	r31, 0xC0	; 192
    1bc8:	e6 1b       	sub	r30, r22
    1bca:	f7 0b       	sbc	r31, r23
    1bcc:	ee 0f       	add	r30, r30
    1bce:	ff 1f       	adc	r31, r31
    1bd0:	ee 0f       	add	r30, r30
    1bd2:	ff 1f       	adc	r31, r31
    1bd4:	16 96       	adiw	r26, 0x06	; 6
    1bd6:	8d 91       	ld	r24, X+
    1bd8:	9c 91       	ld	r25, X
    1bda:	17 97       	sbiw	r26, 0x07	; 7
    1bdc:	e8 0f       	add	r30, r24
    1bde:	f9 1f       	adc	r31, r25
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
}
    1be8:	08 95       	ret

00001bea <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	1f 92       	push	r1
    1bf0:	1f 92       	push	r1
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1bfc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1c00:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1c04:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1c08:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1c0c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1c10:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c14:	8f b7       	in	r24, 0x3f	; 63
    1c16:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1c18:	f8 94       	cli
	return flags;
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1c1c:	e0 e5       	ldi	r30, 0x50	; 80
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	82 60       	ori	r24, 0x02	; 2
    1c24:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c26:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1c28:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1c2a:	81 ff       	sbrs	r24, 1
    1c2c:	fd cf       	rjmp	.-6      	; 0x1c28 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1c2e:	61 e0       	ldi	r22, 0x01	; 1
    1c30:	80 e4       	ldi	r24, 0x40	; 64
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	2f d0       	rcall	.+94     	; 0x1c94 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c36:	8f b7       	in	r24, 0x3f	; 63
    1c38:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1c3a:	f8 94       	cli
	return flags;
    1c3c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1c3e:	e0 e5       	ldi	r30, 0x50	; 80
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8e 7f       	andi	r24, 0xFE	; 254
    1c46:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c48:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	08 95       	ret

00001c54 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	1f 92       	push	r1
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c5e:	9f b7       	in	r25, 0x3f	; 63
    1c60:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1c62:	f8 94       	cli
	return flags;
    1c64:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1c66:	e8 2f       	mov	r30, r24
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	e0 59       	subi	r30, 0x90	; 144
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	60 95       	com	r22
    1c70:	80 81       	ld	r24, Z
    1c72:	68 23       	and	r22, r24
    1c74:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c76:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1c80:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1c84:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1c86:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1c88:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1c8c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1c8e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1c92:	08 95       	ret

00001c94 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1c94:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1c96:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1c98:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1c9a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1c9c:	60 83       	st	Z, r22
	ret                             // Return to caller
    1c9e:	08 95       	ret

00001ca0 <__portable_avr_delay_cycles>:
	ref_pitch = imu_pitch();
	ref_yaw = imu_heading();
}

void release(void){
	servo_release();
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <__portable_avr_delay_cycles+0xa>
    1ca2:	61 50       	subi	r22, 0x01	; 1
    1ca4:	71 09       	sbc	r23, r1
    1ca6:	81 09       	sbc	r24, r1
    1ca8:	91 09       	sbc	r25, r1
    1caa:	61 15       	cp	r22, r1
    1cac:	71 05       	cpc	r23, r1
    1cae:	81 05       	cpc	r24, r1
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	b9 f7       	brne	.-18     	; 0x1ca2 <__portable_avr_delay_cycles+0x2>
    1cb4:	08 95       	ret

00001cb6 <pressure_init>:
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	3e dd       	rcall	.-1412   	; 0x1738 <ms5607_init>
    1cbc:	82 ea       	ldi	r24, 0xA2	; 162
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	4f dd       	rcall	.-1378   	; 0x1760 <ms5607_read>
    1cc2:	c4 e7       	ldi	r28, 0x74	; 116
    1cc4:	d1 e2       	ldi	r29, 0x21	; 33
    1cc6:	88 83       	st	Y, r24
    1cc8:	99 83       	std	Y+1, r25	; 0x01
    1cca:	84 ea       	ldi	r24, 0xA4	; 164
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	48 dd       	rcall	.-1392   	; 0x1760 <ms5607_read>
    1cd0:	8a 83       	std	Y+2, r24	; 0x02
    1cd2:	9b 83       	std	Y+3, r25	; 0x03
    1cd4:	86 ea       	ldi	r24, 0xA6	; 166
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	43 dd       	rcall	.-1402   	; 0x1760 <ms5607_read>
    1cda:	8c 83       	std	Y+4, r24	; 0x04
    1cdc:	9d 83       	std	Y+5, r25	; 0x05
    1cde:	88 ea       	ldi	r24, 0xA8	; 168
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	3e dd       	rcall	.-1412   	; 0x1760 <ms5607_read>
    1ce4:	8e 83       	std	Y+6, r24	; 0x06
    1ce6:	9f 83       	std	Y+7, r25	; 0x07
    1ce8:	8a ea       	ldi	r24, 0xAA	; 170
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	39 dd       	rcall	.-1422   	; 0x1760 <ms5607_read>
    1cee:	88 87       	std	Y+8, r24	; 0x08
    1cf0:	99 87       	std	Y+9, r25	; 0x09
    1cf2:	8c ea       	ldi	r24, 0xAC	; 172
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	34 dd       	rcall	.-1432   	; 0x1760 <ms5607_read>
    1cf8:	8a 87       	std	Y+10, r24	; 0x0a
    1cfa:	9b 87       	std	Y+11, r25	; 0x0b
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	08 95       	ret

00001d02 <gps_init>:
    1d02:	da dc       	rcall	.-1612   	; 0x16b8 <gps_uart_init>
    1d04:	6b ea       	ldi	r22, 0xAB	; 171
    1d06:	79 e2       	ldi	r23, 0x29	; 41
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	c9 df       	rcall	.-110    	; 0x1ca0 <__portable_avr_delay_cycles>
    1d0e:	80 e3       	ldi	r24, 0x30	; 48
    1d10:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    1d14:	08 95       	ret

00001d16 <get_pressure>:
    1d16:	4f 92       	push	r4
    1d18:	5f 92       	push	r5
    1d1a:	6f 92       	push	r6
    1d1c:	7f 92       	push	r7
    1d1e:	8f 92       	push	r8
    1d20:	9f 92       	push	r9
    1d22:	af 92       	push	r10
    1d24:	bf 92       	push	r11
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	28 dd       	rcall	.-1456   	; 0x1784 <ms5607_convert_d1>
    1d34:	6b 01       	movw	r12, r22
    1d36:	7c 01       	movw	r14, r24
    1d38:	65 dd       	rcall	.-1334   	; 0x1804 <ms5607_convert_d2>
    1d3a:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    1d3e:	4b 01       	movw	r8, r22
    1d40:	5c 01       	movw	r10, r24
    1d42:	c4 e7       	ldi	r28, 0x74	; 116
    1d44:	d1 e2       	ldi	r29, 0x21	; 33
    1d46:	68 85       	ldd	r22, Y+8	; 0x08
    1d48:	79 85       	ldd	r23, Y+9	; 0x09
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e8       	ldi	r20, 0x80	; 128
    1d58:	53 e4       	ldi	r21, 0x43	; 67
    1d5a:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1d5e:	9b 01       	movw	r18, r22
    1d60:	ac 01       	movw	r20, r24
    1d62:	c5 01       	movw	r24, r10
    1d64:	b4 01       	movw	r22, r8
    1d66:	0e 94 2a 21 	call	0x4254	; 0x4254 <__subsf3>
    1d6a:	4b 01       	movw	r8, r22
    1d6c:	5c 01       	movw	r10, r24
    1d6e:	6c 81       	ldd	r22, Y+4	; 0x04
    1d70:	7d 81       	ldd	r23, Y+5	; 0x05
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    1d7a:	a5 01       	movw	r20, r10
    1d7c:	94 01       	movw	r18, r8
    1d7e:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	5c e3       	ldi	r21, 0x3C	; 60
    1d8a:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1d8e:	2b 01       	movw	r4, r22
    1d90:	3c 01       	movw	r6, r24
    1d92:	68 81       	ld	r22, Y
    1d94:	79 81       	ldd	r23, Y+1	; 0x01
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e8       	ldi	r20, 0x80	; 128
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1daa:	9b 01       	movw	r18, r22
    1dac:	ac 01       	movw	r20, r24
    1dae:	c3 01       	movw	r24, r6
    1db0:	b2 01       	movw	r22, r4
    1db2:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    1db6:	2b 01       	movw	r4, r22
    1db8:	3c 01       	movw	r6, r24
    1dba:	c7 01       	movw	r24, r14
    1dbc:	b6 01       	movw	r22, r12
    1dbe:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    1dc2:	9b 01       	movw	r18, r22
    1dc4:	ac 01       	movw	r20, r24
    1dc6:	c3 01       	movw	r24, r6
    1dc8:	b2 01       	movw	r22, r4
    1dca:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	55 e3       	ldi	r21, 0x35	; 53
    1dd6:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1dda:	6b 01       	movw	r12, r22
    1ddc:	7c 01       	movw	r14, r24
    1dde:	6e 81       	ldd	r22, Y+6	; 0x06
    1de0:	7f 81       	ldd	r23, Y+7	; 0x07
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    1dea:	a5 01       	movw	r20, r10
    1dec:	94 01       	movw	r18, r8
    1dee:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5c e3       	ldi	r21, 0x3C	; 60
    1dfa:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1dfe:	4b 01       	movw	r8, r22
    1e00:	5c 01       	movw	r10, r24
    1e02:	6a 81       	ldd	r22, Y+2	; 0x02
    1e04:	7b 81       	ldd	r23, Y+3	; 0x03
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	58 e4       	ldi	r21, 0x48	; 72
    1e16:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1e1a:	9b 01       	movw	r18, r22
    1e1c:	ac 01       	movw	r20, r24
    1e1e:	c5 01       	movw	r24, r10
    1e20:	b4 01       	movw	r22, r8
    1e22:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    1e26:	9b 01       	movw	r18, r22
    1e28:	ac 01       	movw	r20, r24
    1e2a:	c7 01       	movw	r24, r14
    1e2c:	b6 01       	movw	r22, r12
    1e2e:	0e 94 2a 21 	call	0x4254	; 0x4254 <__subsf3>
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	58 e3       	ldi	r21, 0x38	; 56
    1e3a:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	ff 90       	pop	r15
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	cf 90       	pop	r12
    1e4a:	bf 90       	pop	r11
    1e4c:	af 90       	pop	r10
    1e4e:	9f 90       	pop	r9
    1e50:	8f 90       	pop	r8
    1e52:	7f 90       	pop	r7
    1e54:	6f 90       	pop	r6
    1e56:	5f 90       	pop	r5
    1e58:	4f 90       	pop	r4
    1e5a:	08 95       	ret

00001e5c <get_altitude>:
    1e5c:	4f 92       	push	r4
    1e5e:	5f 92       	push	r5
    1e60:	6f 92       	push	r6
    1e62:	7f 92       	push	r7
    1e64:	8f 92       	push	r8
    1e66:	9f 92       	push	r9
    1e68:	af 92       	push	r10
    1e6a:	bf 92       	push	r11
    1e6c:	cf 92       	push	r12
    1e6e:	df 92       	push	r13
    1e70:	ef 92       	push	r14
    1e72:	ff 92       	push	r15
    1e74:	2b 01       	movw	r4, r22
    1e76:	3c 01       	movw	r6, r24
    1e78:	c0 90 1f 20 	lds	r12, 0x201F	; 0x80201f <L>
    1e7c:	d0 90 20 20 	lds	r13, 0x2020	; 0x802020 <L+0x1>
    1e80:	e0 90 21 20 	lds	r14, 0x2021	; 0x802021 <L+0x2>
    1e84:	f0 90 22 20 	lds	r15, 0x2022	; 0x802022 <L+0x3>
    1e88:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <R>
    1e8c:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <R+0x1>
    1e90:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <R+0x2>
    1e94:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <R+0x3>
    1e98:	c7 01       	movw	r24, r14
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1ea0:	20 91 1b 20 	lds	r18, 0x201B	; 0x80201b <g_0>
    1ea4:	30 91 1c 20 	lds	r19, 0x201C	; 0x80201c <g_0+0x1>
    1ea8:	40 91 1d 20 	lds	r20, 0x201D	; 0x80201d <g_0+0x2>
    1eac:	50 91 1e 20 	lds	r21, 0x201E	; 0x80201e <g_0+0x3>
    1eb0:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    1eb4:	4b 01       	movw	r8, r22
    1eb6:	5c 01       	movw	r10, r24
    1eb8:	a3 01       	movw	r20, r6
    1eba:	92 01       	movw	r18, r4
    1ebc:	60 91 2b 20 	lds	r22, 0x202B	; 0x80202b <ground_p>
    1ec0:	70 91 2c 20 	lds	r23, 0x202C	; 0x80202c <ground_p+0x1>
    1ec4:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <ground_p+0x2>
    1ec8:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <ground_p+0x3>
    1ecc:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    1ed0:	a5 01       	movw	r20, r10
    1ed2:	94 01       	movw	r18, r8
    1ed4:	0e 94 45 23 	call	0x468a	; 0x468a <pow>
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 2a 21 	call	0x4254	; 0x4254 <__subsf3>
    1ee4:	20 91 27 20 	lds	r18, 0x2027	; 0x802027 <ground_t>
    1ee8:	30 91 28 20 	lds	r19, 0x2028	; 0x802028 <ground_t+0x1>
    1eec:	40 91 29 20 	lds	r20, 0x2029	; 0x802029 <ground_t+0x2>
    1ef0:	50 91 2a 20 	lds	r21, 0x202A	; 0x80202a <ground_t+0x3>
    1ef4:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1ef8:	a7 01       	movw	r20, r14
    1efa:	96 01       	movw	r18, r12
    1efc:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	df 90       	pop	r13
    1f06:	cf 90       	pop	r12
    1f08:	bf 90       	pop	r11
    1f0a:	af 90       	pop	r10
    1f0c:	9f 90       	pop	r9
    1f0e:	8f 90       	pop	r8
    1f10:	7f 90       	pop	r7
    1f12:	6f 90       	pop	r6
    1f14:	5f 90       	pop	r5
    1f16:	4f 90       	pop	r4
    1f18:	08 95       	ret

00001f1a <get_voltage>:
    1f1a:	cf 92       	push	r12
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	50 dd       	rcall	.-1376   	; 0x19c4 <voltage_read>
    1f24:	bc 01       	movw	r22, r24
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    1f2e:	23 e4       	ldi	r18, 0x43	; 67
    1f30:	3e e2       	ldi	r19, 0x2E	; 46
    1f32:	42 e0       	ldi	r20, 0x02	; 2
    1f34:	5a e3       	ldi	r21, 0x3A	; 58
    1f36:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1f3a:	24 ee       	ldi	r18, 0xE4	; 228
    1f3c:	3a e5       	ldi	r19, 0x5A	; 90
    1f3e:	45 ec       	ldi	r20, 0xC5	; 197
    1f40:	5d e3       	ldi	r21, 0x3D	; 61
    1f42:	0e 94 2a 21 	call	0x4254	; 0x4254 <__subsf3>
    1f46:	6b 01       	movw	r12, r22
    1f48:	7c 01       	movw	r14, r24
    1f4a:	2b e2       	ldi	r18, 0x2B	; 43
    1f4c:	35 eb       	ldi	r19, 0xB5	; 181
    1f4e:	42 e1       	ldi	r20, 0x12	; 18
    1f50:	50 e4       	ldi	r21, 0x40	; 64
    1f52:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	c7 01       	movw	r24, r14
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	08 95       	ret

00001f6c <diff>:
    1f6c:	2f 92       	push	r2
    1f6e:	3f 92       	push	r3
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <diff+0x26>
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <diff+0x28>
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	6c 01       	movw	r12, r24
    1f9a:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    1f9e:	88 23       	and	r24, r24
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <diff+0x38>
    1fa2:	6c c0       	rjmp	.+216    	; 0x207c <diff+0x110>
    1fa4:	00 e0       	ldi	r16, 0x00	; 0
    1fa6:	10 e0       	ldi	r17, 0x00	; 0
    1fa8:	41 2c       	mov	r4, r1
    1faa:	51 2c       	mov	r5, r1
    1fac:	32 01       	movw	r6, r4
    1fae:	86 2e       	mov	r8, r22
    1fb0:	91 2c       	mov	r9, r1
    1fb2:	a1 2c       	mov	r10, r1
    1fb4:	b1 2c       	mov	r11, r1
    1fb6:	89 82       	std	Y+1, r8	; 0x01
    1fb8:	9a 82       	std	Y+2, r9	; 0x02
    1fba:	ab 82       	std	Y+3, r10	; 0x03
    1fbc:	bc 82       	std	Y+4, r11	; 0x04
    1fbe:	b8 01       	movw	r22, r16
    1fc0:	c6 01       	movw	r24, r12
    1fc2:	56 dd       	rcall	.-1364   	; 0x1a70 <rb16_get_nth>
    1fc4:	5c 01       	movw	r10, r24
    1fc6:	18 01       	movw	r2, r16
    1fc8:	2f ef       	ldi	r18, 0xFF	; 255
    1fca:	22 1a       	sub	r2, r18
    1fcc:	32 0a       	sbc	r3, r18
    1fce:	b1 01       	movw	r22, r2
    1fd0:	c6 01       	movw	r24, r12
    1fd2:	4e dd       	rcall	.-1380   	; 0x1a70 <rb16_get_nth>
    1fd4:	7c 01       	movw	r14, r24
    1fd6:	b8 01       	movw	r22, r16
    1fd8:	6e 5f       	subi	r22, 0xFE	; 254
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255
    1fdc:	c6 01       	movw	r24, r12
    1fde:	48 dd       	rcall	.-1392   	; 0x1a70 <rb16_get_nth>
    1fe0:	a5 01       	movw	r20, r10
    1fe2:	bb 0c       	add	r11, r11
    1fe4:	66 0b       	sbc	r22, r22
    1fe6:	77 0b       	sbc	r23, r23
    1fe8:	8a 01       	movw	r16, r20
    1fea:	9b 01       	movw	r18, r22
    1fec:	00 0f       	add	r16, r16
    1fee:	11 1f       	adc	r17, r17
    1ff0:	22 1f       	adc	r18, r18
    1ff2:	33 1f       	adc	r19, r19
    1ff4:	40 0f       	add	r20, r16
    1ff6:	51 1f       	adc	r21, r17
    1ff8:	62 1f       	adc	r22, r18
    1ffa:	73 1f       	adc	r23, r19
    1ffc:	87 01       	movw	r16, r14
    1ffe:	ff 0c       	add	r15, r15
    2000:	22 0b       	sbc	r18, r18
    2002:	33 0b       	sbc	r19, r19
    2004:	78 01       	movw	r14, r16
    2006:	89 01       	movw	r16, r18
    2008:	ee 0c       	add	r14, r14
    200a:	ff 1c       	adc	r15, r15
    200c:	00 1f       	adc	r16, r16
    200e:	11 1f       	adc	r17, r17
    2010:	ee 0c       	add	r14, r14
    2012:	ff 1c       	adc	r15, r15
    2014:	00 1f       	adc	r16, r16
    2016:	11 1f       	adc	r17, r17
    2018:	4a 01       	movw	r8, r20
    201a:	5b 01       	movw	r10, r22
    201c:	8e 18       	sub	r8, r14
    201e:	9f 08       	sbc	r9, r15
    2020:	a0 0a       	sbc	r10, r16
    2022:	b1 0a       	sbc	r11, r17
    2024:	ac 01       	movw	r20, r24
    2026:	99 0f       	add	r25, r25
    2028:	66 0b       	sbc	r22, r22
    202a:	77 0b       	sbc	r23, r23
    202c:	d5 01       	movw	r26, r10
    202e:	c4 01       	movw	r24, r8
    2030:	84 0f       	add	r24, r20
    2032:	95 1f       	adc	r25, r21
    2034:	a6 1f       	adc	r26, r22
    2036:	b7 1f       	adc	r27, r23
    2038:	9c 01       	movw	r18, r24
    203a:	ad 01       	movw	r20, r26
    203c:	69 81       	ldd	r22, Y+1	; 0x01
    203e:	7a 81       	ldd	r23, Y+2	; 0x02
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	0e 94 aa 24 	call	0x4954	; 0x4954 <__mulsi3>
    2048:	0e 94 2e 22 	call	0x445c	; 0x445c <__floatsisf>
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	5f e3       	ldi	r21, 0x3F	; 63
    2054:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    2058:	9b 01       	movw	r18, r22
    205a:	ac 01       	movw	r20, r24
    205c:	c3 01       	movw	r24, r6
    205e:	b2 01       	movw	r22, r4
    2060:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    2064:	2b 01       	movw	r4, r22
    2066:	3c 01       	movw	r6, r24
    2068:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    206c:	81 01       	movw	r16, r2
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	22 16       	cp	r2, r18
    2074:	33 06       	cpc	r3, r19
    2076:	08 f4       	brcc	.+2      	; 0x207a <diff+0x10e>
    2078:	a2 cf       	rjmp	.-188    	; 0x1fbe <diff+0x52>
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <diff+0x116>
    207c:	41 2c       	mov	r4, r1
    207e:	51 2c       	mov	r5, r1
    2080:	32 01       	movw	r6, r4
    2082:	68 2f       	mov	r22, r24
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 2e 22 	call	0x445c	; 0x445c <__floatsisf>
    208e:	9b 01       	movw	r18, r22
    2090:	ac 01       	movw	r20, r24
    2092:	c3 01       	movw	r24, r6
    2094:	b2 01       	movw	r22, r4
    2096:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	48 ec       	ldi	r20, 0xC8	; 200
    20a0:	52 e4       	ldi	r21, 0x42	; 66
    20a2:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    20a6:	26 96       	adiw	r28, 0x06	; 6
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	df 90       	pop	r13
    20ba:	cf 90       	pop	r12
    20bc:	bf 90       	pop	r11
    20be:	af 90       	pop	r10
    20c0:	9f 90       	pop	r9
    20c2:	8f 90       	pop	r8
    20c4:	7f 90       	pop	r7
    20c6:	6f 90       	pop	r6
    20c8:	5f 90       	pop	r5
    20ca:	4f 90       	pop	r4
    20cc:	3f 90       	pop	r3
    20ce:	2f 90       	pop	r2
    20d0:	08 95       	ret

000020d2 <data_check>:
    20d2:	3f 92       	push	r3
    20d4:	4f 92       	push	r4
    20d6:	5f 92       	push	r5
    20d8:	6f 92       	push	r6
    20da:	7f 92       	push	r7
    20dc:	8f 92       	push	r8
    20de:	9f 92       	push	r9
    20e0:	af 92       	push	r10
    20e2:	bf 92       	push	r11
    20e4:	cf 92       	push	r12
    20e6:	df 92       	push	r13
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <data_check+0x24>
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <data_check+0x26>
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	8c 01       	movw	r16, r24
    20fe:	19 82       	std	Y+1, r1	; 0x01
    2100:	1a 82       	std	Y+2, r1	; 0x02
    2102:	c1 2c       	mov	r12, r1
    2104:	d1 2c       	mov	r13, r1
    2106:	76 01       	movw	r14, r12
    2108:	69 81       	ldd	r22, Y+1	; 0x01
    210a:	7a 81       	ldd	r23, Y+2	; 0x02
    210c:	c8 01       	movw	r24, r16
    210e:	38 dd       	rcall	.-1424   	; 0x1b80 <rb32_get_nth>
    2110:	4b 01       	movw	r8, r22
    2112:	5c 01       	movw	r10, r24
    2114:	21 e6       	ldi	r18, 0x61	; 97
    2116:	82 1a       	sub	r8, r18
    2118:	2e ea       	ldi	r18, 0xAE	; 174
    211a:	92 0a       	sbc	r9, r18
    211c:	2a e0       	ldi	r18, 0x0A	; 10
    211e:	a2 0a       	sbc	r10, r18
    2120:	b1 08       	sbc	r11, r1
    2122:	2f e7       	ldi	r18, 0x7F	; 127
    2124:	82 16       	cp	r8, r18
    2126:	2a e1       	ldi	r18, 0x1A	; 26
    2128:	92 06       	cpc	r9, r18
    212a:	26 e0       	ldi	r18, 0x06	; 6
    212c:	a2 06       	cpc	r10, r18
    212e:	b1 04       	cpc	r11, r1
    2130:	80 f4       	brcc	.+32     	; 0x2152 <data_check+0x80>
    2132:	0e 94 2e 22 	call	0x445c	; 0x445c <__floatsisf>
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 ea       	ldi	r20, 0xA0	; 160
    213c:	50 e4       	ldi	r21, 0x40	; 64
    213e:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    2142:	9b 01       	movw	r18, r22
    2144:	ac 01       	movw	r20, r24
    2146:	c7 01       	movw	r24, r14
    2148:	b6 01       	movw	r22, r12
    214a:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    214e:	6b 01       	movw	r12, r22
    2150:	7c 01       	movw	r14, r24
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	9a 81       	ldd	r25, Y+2	; 0x02
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	05 97       	sbiw	r24, 0x05	; 5
    215e:	a1 f6       	brne	.-88     	; 0x2108 <data_check+0x36>
    2160:	19 82       	std	Y+1, r1	; 0x01
    2162:	1a 82       	std	Y+2, r1	; 0x02
    2164:	81 2c       	mov	r8, r1
    2166:	91 2c       	mov	r9, r1
    2168:	54 01       	movw	r10, r8
    216a:	69 81       	ldd	r22, Y+1	; 0x01
    216c:	7a 81       	ldd	r23, Y+2	; 0x02
    216e:	c8 01       	movw	r24, r16
    2170:	07 dd       	rcall	.-1522   	; 0x1b80 <rb32_get_nth>
    2172:	2b 01       	movw	r4, r22
    2174:	3c 01       	movw	r6, r24
    2176:	21 e6       	ldi	r18, 0x61	; 97
    2178:	42 1a       	sub	r4, r18
    217a:	2e ea       	ldi	r18, 0xAE	; 174
    217c:	52 0a       	sbc	r5, r18
    217e:	2a e0       	ldi	r18, 0x0A	; 10
    2180:	62 0a       	sbc	r6, r18
    2182:	71 08       	sbc	r7, r1
    2184:	2f e7       	ldi	r18, 0x7F	; 127
    2186:	42 16       	cp	r4, r18
    2188:	2a e1       	ldi	r18, 0x1A	; 26
    218a:	52 06       	cpc	r5, r18
    218c:	26 e0       	ldi	r18, 0x06	; 6
    218e:	62 06       	cpc	r6, r18
    2190:	71 04       	cpc	r7, r1
    2192:	90 f4       	brcc	.+36     	; 0x21b8 <data_check+0xe6>
    2194:	0e 94 2e 22 	call	0x445c	; 0x445c <__floatsisf>
    2198:	a7 01       	movw	r20, r14
    219a:	96 01       	movw	r18, r12
    219c:	0e 94 2a 21 	call	0x4254	; 0x4254 <__subsf3>
    21a0:	9b 01       	movw	r18, r22
    21a2:	ac 01       	movw	r20, r24
    21a4:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    21a8:	9b 01       	movw	r18, r22
    21aa:	ac 01       	movw	r20, r24
    21ac:	c5 01       	movw	r24, r10
    21ae:	b4 01       	movw	r22, r8
    21b0:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    21b4:	4b 01       	movw	r8, r22
    21b6:	5c 01       	movw	r10, r24
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	05 97       	sbiw	r24, 0x05	; 5
    21c4:	91 f6       	brne	.-92     	; 0x216a <data_check+0x98>
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5e e3       	ldi	r21, 0x3E	; 62
    21ce:	c5 01       	movw	r24, r10
    21d0:	b4 01       	movw	r22, r8
    21d2:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    21d6:	69 83       	std	Y+1, r22	; 0x01
    21d8:	7a 83       	std	Y+2, r23	; 0x02
    21da:	8b 83       	std	Y+3, r24	; 0x03
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	1d 82       	std	Y+5, r1	; 0x05
    21e0:	1e 82       	std	Y+6, r1	; 0x06
    21e2:	31 2c       	mov	r3, r1
    21e4:	41 2c       	mov	r4, r1
    21e6:	51 2c       	mov	r5, r1
    21e8:	32 01       	movw	r6, r4
    21ea:	6d 81       	ldd	r22, Y+5	; 0x05
    21ec:	7e 81       	ldd	r23, Y+6	; 0x06
    21ee:	c8 01       	movw	r24, r16
    21f0:	c7 dc       	rcall	.-1650   	; 0x1b80 <rb32_get_nth>
    21f2:	4b 01       	movw	r8, r22
    21f4:	5c 01       	movw	r10, r24
    21f6:	21 e6       	ldi	r18, 0x61	; 97
    21f8:	82 1a       	sub	r8, r18
    21fa:	2e ea       	ldi	r18, 0xAE	; 174
    21fc:	92 0a       	sbc	r9, r18
    21fe:	2a e0       	ldi	r18, 0x0A	; 10
    2200:	a2 0a       	sbc	r10, r18
    2202:	b1 08       	sbc	r11, r1
    2204:	2f e7       	ldi	r18, 0x7F	; 127
    2206:	82 16       	cp	r8, r18
    2208:	2a e1       	ldi	r18, 0x1A	; 26
    220a:	92 06       	cpc	r9, r18
    220c:	26 e0       	ldi	r18, 0x06	; 6
    220e:	a2 06       	cpc	r10, r18
    2210:	b1 04       	cpc	r11, r1
    2212:	50 f5       	brcc	.+84     	; 0x2268 <data_check+0x196>
    2214:	0e 94 2e 22 	call	0x445c	; 0x445c <__floatsisf>
    2218:	4b 01       	movw	r8, r22
    221a:	5c 01       	movw	r10, r24
    221c:	a7 01       	movw	r20, r14
    221e:	96 01       	movw	r18, r12
    2220:	0e 94 2a 21 	call	0x4254	; 0x4254 <__subsf3>
    2224:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2228:	9b 01       	movw	r18, r22
    222a:	77 23       	and	r23, r23
    222c:	24 f4       	brge	.+8      	; 0x2236 <data_check+0x164>
    222e:	22 27       	eor	r18, r18
    2230:	33 27       	eor	r19, r19
    2232:	26 1b       	sub	r18, r22
    2234:	37 0b       	sbc	r19, r23
    2236:	b9 01       	movw	r22, r18
    2238:	33 0f       	add	r19, r19
    223a:	88 0b       	sbc	r24, r24
    223c:	99 0b       	sbc	r25, r25
    223e:	0e 94 2e 22 	call	0x445c	; 0x445c <__floatsisf>
    2242:	9b 01       	movw	r18, r22
    2244:	ac 01       	movw	r20, r24
    2246:	69 81       	ldd	r22, Y+1	; 0x01
    2248:	7a 81       	ldd	r23, Y+2	; 0x02
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	0e 94 de 22 	call	0x45bc	; 0x45bc <__gesf2>
    2252:	88 23       	and	r24, r24
    2254:	4c f0       	brlt	.+18     	; 0x2268 <data_check+0x196>
    2256:	a5 01       	movw	r20, r10
    2258:	94 01       	movw	r18, r8
    225a:	c3 01       	movw	r24, r6
    225c:	b2 01       	movw	r22, r4
    225e:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    2262:	2b 01       	movw	r4, r22
    2264:	3c 01       	movw	r6, r24
    2266:	33 94       	inc	r3
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	01 96       	adiw	r24, 0x01	; 1
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	05 97       	sbiw	r24, 0x05	; 5
    2274:	09 f0       	breq	.+2      	; 0x2278 <data_check+0x1a6>
    2276:	b9 cf       	rjmp	.-142    	; 0x21ea <data_check+0x118>
    2278:	33 20       	and	r3, r3
    227a:	69 f0       	breq	.+26     	; 0x2296 <data_check+0x1c4>
    227c:	63 2d       	mov	r22, r3
    227e:	70 e0       	ldi	r23, 0x00	; 0
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
    228c:	c3 01       	movw	r24, r6
    228e:	b2 01       	movw	r22, r4
    2290:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    2294:	04 c0       	rjmp	.+8      	; 0x229e <data_check+0x1cc>
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	80 e8       	ldi	r24, 0x80	; 128
    229c:	9f eb       	ldi	r25, 0xBF	; 191
    229e:	26 96       	adiw	r28, 0x06	; 6
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	cf 90       	pop	r12
    22b4:	bf 90       	pop	r11
    22b6:	af 90       	pop	r10
    22b8:	9f 90       	pop	r9
    22ba:	8f 90       	pop	r8
    22bc:	7f 90       	pop	r7
    22be:	6f 90       	pop	r6
    22c0:	5f 90       	pop	r5
    22c2:	4f 90       	pop	r4
    22c4:	3f 90       	pop	r3
    22c6:	08 95       	ret

000022c8 <data_collect>:
    22c8:	af 92       	push	r10
    22ca:	bf 92       	push	r11
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	00 d0       	rcall	.+0      	; 0x22de <data_collect+0x16>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <data_collect+0x18>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	5c 01       	movw	r10, r24
    22e6:	8b 01       	movw	r16, r22
    22e8:	16 dd       	rcall	.-1492   	; 0x1d16 <get_pressure>
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e2       	ldi	r20, 0x20	; 32
    22f0:	51 e4       	ldi	r21, 0x41	; 65
    22f2:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    22f6:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    22fa:	69 83       	std	Y+1, r22	; 0x01
    22fc:	7a 83       	std	Y+2, r23	; 0x02
    22fe:	8b 83       	std	Y+3, r24	; 0x03
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	be 01       	movw	r22, r28
    2308:	6f 5f       	subi	r22, 0xFF	; 255
    230a:	7f 4f       	sbci	r23, 0xFF	; 255
    230c:	c8 01       	movw	r24, r16
    230e:	dd db       	rcall	.-2118   	; 0x1aca <rb32_write>
    2310:	c8 01       	movw	r24, r16
    2312:	df de       	rcall	.-578    	; 0x20d2 <data_check>
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    2320:	6b 01       	movw	r12, r22
    2322:	7c 01       	movw	r14, r24
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f eb       	ldi	r21, 0xBF	; 191
    232c:	0e 94 8f 21 	call	0x431e	; 0x431e <__cmpsf2>
    2330:	88 23       	and	r24, r24
    2332:	d1 f1       	breq	.+116    	; 0x23a8 <data_collect+0xe0>
    2334:	c0 92 5f 21 	sts	0x215F, r12	; 0x80215f <press>
    2338:	d0 92 60 21 	sts	0x2160, r13	; 0x802160 <press+0x1>
    233c:	e0 92 61 21 	sts	0x2161, r14	; 0x802161 <press+0x2>
    2340:	f0 92 62 21 	sts	0x2162, r15	; 0x802162 <press+0x3>
    2344:	c7 01       	movw	r24, r14
    2346:	b6 01       	movw	r22, r12
    2348:	89 dd       	rcall	.-1262   	; 0x1e5c <get_altitude>
    234a:	60 93 57 21 	sts	0x2157, r22	; 0x802157 <alt>
    234e:	70 93 58 21 	sts	0x2158, r23	; 0x802158 <alt+0x1>
    2352:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <alt+0x2>
    2356:	90 93 5a 21 	sts	0x215A, r25	; 0x80215a <alt+0x3>
    235a:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <alt>
    235e:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <alt+0x1>
    2362:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <alt+0x2>
    2366:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <alt+0x3>
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	48 ec       	ldi	r20, 0xC8	; 200
    2370:	52 e4       	ldi	r21, 0x42	; 66
    2372:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    2376:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    237a:	6d 83       	std	Y+5, r22	; 0x05
    237c:	7e 83       	std	Y+6, r23	; 0x06
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	be 01       	movw	r22, r28
    2384:	6b 5f       	subi	r22, 0xFB	; 251
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	c5 01       	movw	r24, r10
    238a:	29 db       	rcall	.-2478   	; 0x19de <rb16_write>
    238c:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    2390:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    2394:	c5 01       	movw	r24, r10
    2396:	ea dd       	rcall	.-1068   	; 0x1f6c <diff>
    2398:	60 93 4f 21 	sts	0x214F, r22	; 0x80214f <velocity>
    239c:	70 93 50 21 	sts	0x2150, r23	; 0x802150 <velocity+0x1>
    23a0:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <velocity+0x2>
    23a4:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <velocity+0x3>
    23a8:	83 e3       	ldi	r24, 0x33	; 51
    23aa:	93 e1       	ldi	r25, 0x13	; 19
    23ac:	a5 e9       	ldi	r26, 0x95	; 149
    23ae:	b3 e4       	ldi	r27, 0x43	; 67
    23b0:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <temp>
    23b4:	90 93 5c 21 	sts	0x215C, r25	; 0x80215c <temp+0x1>
    23b8:	a0 93 5d 21 	sts	0x215D, r26	; 0x80215d <temp+0x2>
    23bc:	b0 93 5e 21 	sts	0x215E, r27	; 0x80215e <temp+0x3>
    23c0:	ac dd       	rcall	.-1192   	; 0x1f1a <get_voltage>
    23c2:	60 93 53 21 	sts	0x2153, r22	; 0x802153 <volt>
    23c6:	70 93 54 21 	sts	0x2154, r23	; 0x802154 <volt+0x1>
    23ca:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <volt+0x2>
    23ce:	90 93 56 21 	sts	0x2156, r25	; 0x802156 <volt+0x3>
    23d2:	26 96       	adiw	r28, 0x06	; 6
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	ff 90       	pop	r15
    23e2:	ef 90       	pop	r14
    23e4:	df 90       	pop	r13
    23e6:	cf 90       	pop	r12
    23e8:	bf 90       	pop	r11
    23ea:	af 90       	pop	r10
    23ec:	08 95       	ret

000023ee <state_check>:
    23ee:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <state>
    23f2:	81 30       	cpi	r24, 0x01	; 1
    23f4:	81 f1       	breq	.+96     	; 0x2456 <state_check+0x68>
    23f6:	38 f0       	brcs	.+14     	; 0x2406 <state_check+0x18>
    23f8:	82 30       	cpi	r24, 0x02	; 2
    23fa:	09 f4       	brne	.+2      	; 0x23fe <state_check+0x10>
    23fc:	55 c0       	rjmp	.+170    	; 0x24a8 <state_check+0xba>
    23fe:	83 30       	cpi	r24, 0x03	; 3
    2400:	09 f4       	brne	.+2      	; 0x2404 <state_check+0x16>
    2402:	fc c0       	rjmp	.+504    	; 0x25fc <state_check+0x20e>
    2404:	7c c0       	rjmp	.+248    	; 0x24fe <state_check+0x110>
    2406:	60 91 4f 21 	lds	r22, 0x214F	; 0x80214f <velocity>
    240a:	70 91 50 21 	lds	r23, 0x2150	; 0x802150 <velocity+0x1>
    240e:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <velocity+0x2>
    2412:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <velocity+0x3>
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e4       	ldi	r20, 0x40	; 64
    241c:	50 e4       	ldi	r21, 0x40	; 64
    241e:	0e 94 8f 21 	call	0x431e	; 0x431e <__cmpsf2>
    2422:	88 23       	and	r24, r24
    2424:	0c f0       	brlt	.+2      	; 0x2428 <state_check+0x3a>
    2426:	ea c0       	rjmp	.+468    	; 0x25fc <state_check+0x20e>
    2428:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <alt>
    242c:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <alt+0x1>
    2430:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <alt+0x2>
    2434:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <alt+0x3>
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	41 ee       	ldi	r20, 0xE1	; 225
    243e:	53 e4       	ldi	r21, 0x43	; 67
    2440:	0e 94 de 22 	call	0x45bc	; 0x45bc <__gesf2>
    2444:	18 16       	cp	r1, r24
    2446:	0c f0       	brlt	.+2      	; 0x244a <state_check+0x5c>
    2448:	d9 c0       	rjmp	.+434    	; 0x25fc <state_check+0x20e>
    244a:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <state>
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <state>
    2454:	08 95       	ret
    2456:	60 91 4f 21 	lds	r22, 0x214F	; 0x80214f <velocity>
    245a:	70 91 50 21 	lds	r23, 0x2150	; 0x802150 <velocity+0x1>
    245e:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <velocity+0x2>
    2462:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <velocity+0x3>
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e4       	ldi	r20, 0x40	; 64
    246c:	50 e4       	ldi	r21, 0x40	; 64
    246e:	0e 94 8f 21 	call	0x431e	; 0x431e <__cmpsf2>
    2472:	88 23       	and	r24, r24
    2474:	84 f4       	brge	.+32     	; 0x2496 <state_check+0xa8>
    2476:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <alt>
    247a:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <alt+0x1>
    247e:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <alt+0x2>
    2482:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <alt+0x3>
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	41 ee       	ldi	r20, 0xE1	; 225
    248c:	53 e4       	ldi	r21, 0x43	; 67
    248e:	0e 94 8f 21 	call	0x431e	; 0x431e <__cmpsf2>
    2492:	88 23       	and	r24, r24
    2494:	1c f0       	brlt	.+6      	; 0x249c <state_check+0xae>
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <released>
    249c:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <state>
    24a0:	8f 5f       	subi	r24, 0xFF	; 255
    24a2:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <state>
    24a6:	08 95       	ret
    24a8:	60 91 4f 21 	lds	r22, 0x214F	; 0x80214f <velocity>
    24ac:	70 91 50 21 	lds	r23, 0x2150	; 0x802150 <velocity+0x1>
    24b0:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <velocity+0x2>
    24b4:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <velocity+0x3>
    24b8:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    24bc:	9b 01       	movw	r18, r22
    24be:	77 23       	and	r23, r23
    24c0:	24 f4       	brge	.+8      	; 0x24ca <state_check+0xdc>
    24c2:	22 27       	eor	r18, r18
    24c4:	33 27       	eor	r19, r19
    24c6:	26 1b       	sub	r18, r22
    24c8:	37 0b       	sbc	r19, r23
    24ca:	23 30       	cpi	r18, 0x03	; 3
    24cc:	31 05       	cpc	r19, r1
    24ce:	8c f0       	brlt	.+34     	; 0x24f2 <state_check+0x104>
    24d0:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <alt>
    24d4:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <alt+0x1>
    24d8:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <alt+0x2>
    24dc:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <alt+0x3>
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e2       	ldi	r20, 0x20	; 32
    24e6:	51 e4       	ldi	r21, 0x41	; 65
    24e8:	0e 94 8f 21 	call	0x431e	; 0x431e <__cmpsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	0c f0       	brlt	.+2      	; 0x24f2 <state_check+0x104>
    24f0:	85 c0       	rjmp	.+266    	; 0x25fc <state_check+0x20e>
    24f2:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <state>
    24f6:	8f 5f       	subi	r24, 0xFF	; 255
    24f8:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <state>
    24fc:	08 95       	ret
    24fe:	60 91 4f 21 	lds	r22, 0x214F	; 0x80214f <velocity>
    2502:	70 91 50 21 	lds	r23, 0x2150	; 0x802150 <velocity+0x1>
    2506:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <velocity+0x2>
    250a:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <velocity+0x3>
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e4       	ldi	r20, 0x40	; 64
    2514:	50 e4       	ldi	r21, 0x40	; 64
    2516:	0e 94 de 22 	call	0x45bc	; 0x45bc <__gesf2>
    251a:	18 16       	cp	r1, r24
    251c:	14 f4       	brge	.+4      	; 0x2522 <state_check+0x134>
    251e:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <state>
    2522:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <alt>
    2526:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <alt+0x1>
    252a:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <alt+0x2>
    252e:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <alt+0x3>
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	41 ee       	ldi	r20, 0xE1	; 225
    2538:	53 e4       	ldi	r21, 0x43	; 67
    253a:	0e 94 de 22 	call	0x45bc	; 0x45bc <__gesf2>
    253e:	18 16       	cp	r1, r24
    2540:	9c f4       	brge	.+38     	; 0x2568 <state_check+0x17a>
    2542:	60 91 4f 21 	lds	r22, 0x214F	; 0x80214f <velocity>
    2546:	70 91 50 21 	lds	r23, 0x2150	; 0x802150 <velocity+0x1>
    254a:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <velocity+0x2>
    254e:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <velocity+0x3>
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e4       	ldi	r20, 0x40	; 64
    2558:	50 e4       	ldi	r21, 0x40	; 64
    255a:	0e 94 8f 21 	call	0x431e	; 0x431e <__cmpsf2>
    255e:	88 23       	and	r24, r24
    2560:	1c f4       	brge	.+6      	; 0x2568 <state_check+0x17a>
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <state>
    2568:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <alt>
    256c:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <alt+0x1>
    2570:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <alt+0x2>
    2574:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <alt+0x3>
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	41 ee       	ldi	r20, 0xE1	; 225
    257e:	53 e4       	ldi	r21, 0x43	; 67
    2580:	0e 94 8f 21 	call	0x431e	; 0x431e <__cmpsf2>
    2584:	88 23       	and	r24, r24
    2586:	9c f4       	brge	.+38     	; 0x25ae <state_check+0x1c0>
    2588:	60 91 4f 21 	lds	r22, 0x214F	; 0x80214f <velocity>
    258c:	70 91 50 21 	lds	r23, 0x2150	; 0x802150 <velocity+0x1>
    2590:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <velocity+0x2>
    2594:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <velocity+0x3>
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e4       	ldi	r20, 0x40	; 64
    259e:	50 e4       	ldi	r21, 0x40	; 64
    25a0:	0e 94 8f 21 	call	0x431e	; 0x431e <__cmpsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	1c f4       	brge	.+6      	; 0x25ae <state_check+0x1c0>
    25a8:	82 e0       	ldi	r24, 0x02	; 2
    25aa:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <state>
    25ae:	60 91 4f 21 	lds	r22, 0x214F	; 0x80214f <velocity>
    25b2:	70 91 50 21 	lds	r23, 0x2150	; 0x802150 <velocity+0x1>
    25b6:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <velocity+0x2>
    25ba:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <velocity+0x3>
    25be:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    25c2:	9b 01       	movw	r18, r22
    25c4:	77 23       	and	r23, r23
    25c6:	24 f4       	brge	.+8      	; 0x25d0 <state_check+0x1e2>
    25c8:	22 27       	eor	r18, r18
    25ca:	33 27       	eor	r19, r19
    25cc:	26 1b       	sub	r18, r22
    25ce:	37 0b       	sbc	r19, r23
    25d0:	23 30       	cpi	r18, 0x03	; 3
    25d2:	31 05       	cpc	r19, r1
    25d4:	9c f4       	brge	.+38     	; 0x25fc <state_check+0x20e>
    25d6:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <alt>
    25da:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <alt+0x1>
    25de:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <alt+0x2>
    25e2:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <alt+0x3>
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e2       	ldi	r20, 0x20	; 32
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 8f 21 	call	0x431e	; 0x431e <__cmpsf2>
    25f2:	88 23       	and	r24, r24
    25f4:	1c f4       	brge	.+6      	; 0x25fc <state_check+0x20e>
    25f6:	83 e0       	ldi	r24, 0x03	; 3
    25f8:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <state>
    25fc:	08 95       	ret

000025fe <release_servo_init>:
    25fe:	61 e0       	ldi	r22, 0x01	; 1
    2600:	84 e0       	ldi	r24, 0x04	; 4
    2602:	28 db       	rcall	.-2480   	; 0x1c54 <sysclk_enable_module>
    2604:	64 e0       	ldi	r22, 0x04	; 4
    2606:	84 e0       	ldi	r24, 0x04	; 4
    2608:	25 db       	rcall	.-2486   	; 0x1c54 <sysclk_enable_module>
    260a:	e0 e6       	ldi	r30, 0x60	; 96
    260c:	f6 e0       	ldi	r31, 0x06	; 6
    260e:	80 81       	ld	r24, Z
    2610:	81 60       	ori	r24, 0x01	; 1
    2612:	80 83       	st	Z, r24
    2614:	e0 e0       	ldi	r30, 0x00	; 0
    2616:	f9 e0       	ldi	r31, 0x09	; 9
    2618:	85 e0       	ldi	r24, 0x05	; 5
    261a:	80 83       	st	Z, r24
    261c:	83 e1       	ldi	r24, 0x13	; 19
    261e:	81 83       	std	Z+1, r24	; 0x01
    2620:	80 e1       	ldi	r24, 0x10	; 16
    2622:	97 e2       	ldi	r25, 0x27	; 39
    2624:	86 a3       	std	Z+38, r24	; 0x26
    2626:	97 a3       	std	Z+39, r25	; 0x27
    2628:	86 a1       	ldd	r24, Z+38	; 0x26
    262a:	97 a1       	ldd	r25, Z+39	; 0x27
    262c:	88 55       	subi	r24, 0x58	; 88
    262e:	92 40       	sbci	r25, 0x02	; 2
    2630:	80 a7       	std	Z+40, r24	; 0x28
    2632:	91 a7       	std	Z+41, r25	; 0x29
    2634:	08 95       	ret

00002636 <servo_timer_init>:
    2636:	e0 e6       	ldi	r30, 0x60	; 96
    2638:	f6 e0       	ldi	r31, 0x06	; 6
    263a:	80 81       	ld	r24, Z
    263c:	82 60       	ori	r24, 0x02	; 2
    263e:	80 83       	st	Z, r24
    2640:	08 95       	ret

00002642 <servo_pid>:
    2642:	8f 92       	push	r8
    2644:	9f 92       	push	r9
    2646:	af 92       	push	r10
    2648:	bf 92       	push	r11
    264a:	cf 92       	push	r12
    264c:	df 92       	push	r13
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	7c 01       	movw	r14, r24
    265c:	c0 e0       	ldi	r28, 0x00	; 0
    265e:	d0 e0       	ldi	r29, 0x00	; 0
    2660:	00 e0       	ldi	r16, 0x00	; 0
    2662:	10 e0       	ldi	r17, 0x00	; 0
    2664:	be 01       	movw	r22, r28
    2666:	c7 01       	movw	r24, r14
    2668:	03 da       	rcall	.-3066   	; 0x1a70 <rb16_get_nth>
    266a:	08 0f       	add	r16, r24
    266c:	19 1f       	adc	r17, r25
    266e:	21 96       	adiw	r28, 0x01	; 1
    2670:	ca 30       	cpi	r28, 0x0A	; 10
    2672:	d1 05       	cpc	r29, r1
    2674:	b9 f7       	brne	.-18     	; 0x2664 <servo_pid+0x22>
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	c7 01       	movw	r24, r14
    267c:	f9 d9       	rcall	.-3086   	; 0x1a70 <rb16_get_nth>
    267e:	ec 01       	movw	r28, r24
    2680:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    2684:	70 91 18 20 	lds	r23, 0x2018	; 0x802018 <rate+0x1>
    2688:	c7 01       	movw	r24, r14
    268a:	70 dc       	rcall	.-1824   	; 0x1f6c <diff>
    268c:	6b 01       	movw	r12, r22
    268e:	7c 01       	movw	r14, r24
    2690:	be 01       	movw	r22, r28
    2692:	dd 0f       	add	r29, r29
    2694:	88 0b       	sbc	r24, r24
    2696:	99 0b       	sbc	r25, r25
    2698:	0e 94 2e 22 	call	0x445c	; 0x445c <__floatsisf>
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	a9 01       	movw	r20, r18
    26a2:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	48 ec       	ldi	r20, 0xC8	; 200
    26ac:	52 e4       	ldi	r21, 0x42	; 66
    26ae:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    26b2:	4b 01       	movw	r8, r22
    26b4:	5c 01       	movw	r10, r24
    26b6:	b8 01       	movw	r22, r16
    26b8:	11 0f       	add	r17, r17
    26ba:	88 0b       	sbc	r24, r24
    26bc:	99 0b       	sbc	r25, r25
    26be:	0e 94 2e 22 	call	0x445c	; 0x445c <__floatsisf>
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	a9 01       	movw	r20, r18
    26c8:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	48 ec       	ldi	r20, 0xC8	; 200
    26d2:	52 e4       	ldi	r21, 0x42	; 66
    26d4:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    26d8:	9b 01       	movw	r18, r22
    26da:	ac 01       	movw	r20, r24
    26dc:	c5 01       	movw	r24, r10
    26de:	b4 01       	movw	r22, r8
    26e0:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    26e4:	4b 01       	movw	r8, r22
    26e6:	5c 01       	movw	r10, r24
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	a9 01       	movw	r20, r18
    26ee:	c7 01       	movw	r24, r14
    26f0:	b6 01       	movw	r22, r12
    26f2:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    26f6:	9b 01       	movw	r18, r22
    26f8:	ac 01       	movw	r20, r24
    26fa:	c5 01       	movw	r24, r10
    26fc:	b4 01       	movw	r22, r8
    26fe:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e8       	ldi	r19, 0x80	; 128
    2706:	4b eb       	ldi	r20, 0xBB	; 187
    2708:	54 e4       	ldi	r21, 0x44	; 68
    270a:	0e 94 2b 21 	call	0x4256	; 0x4256 <__addsf3>
    270e:	0e 94 00 22 	call	0x4400	; 0x4400 <__fixunssfsi>
    2712:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <servo_pulse>
    2716:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <servo_pulse+0x1>
    271a:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <servo_pulse>
    271e:	70 91 1a 20 	lds	r23, 0x201A	; 0x80201a <servo_pulse+0x1>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 2c 22 	call	0x4458	; 0x4458 <__floatunsisf>
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4a e7       	ldi	r20, 0x7A	; 122
    2730:	54 e4       	ldi	r21, 0x44	; 68
    2732:	0e 94 93 21 	call	0x4326	; 0x4326 <__divsf3>
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	4a ef       	ldi	r20, 0xFA	; 250
    273c:	53 e4       	ldi	r21, 0x43	; 67
    273e:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    2742:	0e 94 00 22 	call	0x4400	; 0x4400 <__fixunssfsi>
    2746:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    274a:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	df 90       	pop	r13
    275c:	cf 90       	pop	r12
    275e:	bf 90       	pop	r11
    2760:	af 90       	pop	r10
    2762:	9f 90       	pop	r9
    2764:	8f 90       	pop	r8
    2766:	08 95       	ret

00002768 <clock_init>:
    2768:	61 e0       	ldi	r22, 0x01	; 1
    276a:	85 e0       	ldi	r24, 0x05	; 5
    276c:	73 da       	rcall	.-2842   	; 0x1c54 <sysclk_enable_module>
    276e:	e0 e0       	ldi	r30, 0x00	; 0
    2770:	fa e0       	ldi	r31, 0x0A	; 10
    2772:	87 e0       	ldi	r24, 0x07	; 7
    2774:	80 83       	st	Z, r24
    2776:	81 e1       	ldi	r24, 0x11	; 17
    2778:	9a e7       	ldi	r25, 0x7A	; 122
    277a:	86 a3       	std	Z+38, r24	; 0x26
    277c:	97 a3       	std	Z+39, r25	; 0x27
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	86 83       	std	Z+6, r24	; 0x06
    2782:	08 95       	ret

00002784 <buzzer_init>:
    2784:	62 e0       	ldi	r22, 0x02	; 2
    2786:	84 e0       	ldi	r24, 0x04	; 4
    2788:	65 da       	rcall	.-2870   	; 0x1c54 <sysclk_enable_module>
    278a:	64 e0       	ldi	r22, 0x04	; 4
    278c:	84 e0       	ldi	r24, 0x04	; 4
    278e:	62 da       	rcall	.-2876   	; 0x1c54 <sysclk_enable_module>
    2790:	e0 e6       	ldi	r30, 0x60	; 96
    2792:	f6 e0       	ldi	r31, 0x06	; 6
    2794:	80 81       	ld	r24, Z
    2796:	80 61       	ori	r24, 0x10	; 16
    2798:	80 83       	st	Z, r24
    279a:	e0 e4       	ldi	r30, 0x40	; 64
    279c:	f9 e0       	ldi	r31, 0x09	; 9
    279e:	85 e0       	ldi	r24, 0x05	; 5
    27a0:	80 83       	st	Z, r24
    27a2:	83 e1       	ldi	r24, 0x13	; 19
    27a4:	81 83       	std	Z+1, r24	; 0x01
    27a6:	88 eb       	ldi	r24, 0xB8	; 184
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	86 a3       	std	Z+38, r24	; 0x26
    27ac:	97 a3       	std	Z+39, r25	; 0x27
    27ae:	8c e5       	ldi	r24, 0x5C	; 92
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	80 a7       	std	Z+40, r24	; 0x28
    27b4:	91 a7       	std	Z+41, r25	; 0x29
    27b6:	08 95       	ret

000027b8 <cali_alt>:
    27b8:	80 91 5f 21 	lds	r24, 0x215F	; 0x80215f <press>
    27bc:	90 91 60 21 	lds	r25, 0x2160	; 0x802160 <press+0x1>
    27c0:	a0 91 61 21 	lds	r26, 0x2161	; 0x802161 <press+0x2>
    27c4:	b0 91 62 21 	lds	r27, 0x2162	; 0x802162 <press+0x3>
    27c8:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <ground_p>
    27cc:	90 93 2c 20 	sts	0x202C, r25	; 0x80202c <ground_p+0x1>
    27d0:	a0 93 2d 20 	sts	0x202D, r26	; 0x80202d <ground_p+0x2>
    27d4:	b0 93 2e 20 	sts	0x202E, r27	; 0x80202e <ground_p+0x3>
    27d8:	83 e3       	ldi	r24, 0x33	; 51
    27da:	93 e1       	ldi	r25, 0x13	; 19
    27dc:	a5 e9       	ldi	r26, 0x95	; 149
    27de:	b3 e4       	ldi	r27, 0x43	; 67
    27e0:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    27e4:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    27e8:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    27ec:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    27f0:	08 95       	ret

000027f2 <cali_ang>:
    27f2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <imu_heading>
    27f6:	60 93 6f 21 	sts	0x216F, r22	; 0x80216f <ref_yaw>
    27fa:	70 93 70 21 	sts	0x2170, r23	; 0x802170 <ref_yaw+0x1>
    27fe:	80 93 71 21 	sts	0x2171, r24	; 0x802171 <ref_yaw+0x2>
    2802:	90 93 72 21 	sts	0x2172, r25	; 0x802172 <ref_yaw+0x3>
    2806:	08 95       	ret

00002808 <calibrate>:
    2808:	d7 df       	rcall	.-82     	; 0x27b8 <cali_alt>
    280a:	f3 cf       	rjmp	.-26     	; 0x27f2 <cali_ang>
    280c:	08 95       	ret

0000280e <servo_release>:
    280e:	e0 e0       	ldi	r30, 0x00	; 0
    2810:	f9 e0       	ldi	r31, 0x09	; 9
    2812:	86 a1       	ldd	r24, Z+38	; 0x26
    2814:	97 a1       	ldd	r25, Z+39	; 0x27
    2816:	88 5e       	subi	r24, 0xE8	; 232
    2818:	93 40       	sbci	r25, 0x03	; 3
    281a:	80 a7       	std	Z+40, r24	; 0x28
    281c:	91 a7       	std	Z+41, r25	; 0x29
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <released>
    2824:	08 95       	ret

00002826 <servo_close>:
	
	released = 1;
}

void servo_close(void){
	TCD0.CCA = TCD0.PER - 600;
    2826:	e0 e0       	ldi	r30, 0x00	; 0
    2828:	f9 e0       	ldi	r31, 0x09	; 9
    282a:	86 a1       	ldd	r24, Z+38	; 0x26
    282c:	97 a1       	ldd	r25, Z+39	; 0x27
    282e:	88 55       	subi	r24, 0x58	; 88
    2830:	92 40       	sbci	r25, 0x02	; 2
    2832:	80 a7       	std	Z+40, r24	; 0x28
    2834:	91 a7       	std	Z+41, r25	; 0x29
	
	released = 0;
    2836:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <released>
    283a:	08 95       	ret

0000283c <packet>:
}

void packet(void){
    283c:	2f 92       	push	r2
    283e:	3f 92       	push	r3
    2840:	4f 92       	push	r4
    2842:	5f 92       	push	r5
    2844:	6f 92       	push	r6
    2846:	7f 92       	push	r7
    2848:	8f 92       	push	r8
    284a:	9f 92       	push	r9
    284c:	af 92       	push	r10
    284e:	bf 92       	push	r11
    2850:	cf 92       	push	r12
    2852:	df 92       	push	r13
    2854:	ef 92       	push	r14
    2856:	ff 92       	push	r15
    2858:	0f 93       	push	r16
    285a:	1f 93       	push	r17
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	e9 97       	sbiw	r28, 0x39	; 57
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	de bf       	out	0x3e, r29	; 62
	//XBEE_spi_write(str);
	packets++;
    286a:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <packets>
    286e:	90 91 64 21 	lds	r25, 0x2164	; 0x802164 <packets+0x1>
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	80 93 63 21 	sts	0x2163, r24	; 0x802163 <packets>
    2878:	90 93 64 21 	sts	0x2164, r25	; 0x802164 <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
    287c:	60 91 2d 21 	lds	r22, 0x212D	; 0x80212d <angle>
    2880:	70 91 2e 21 	lds	r23, 0x212E	; 0x80212e <angle+0x1>
    2884:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <angle+0x2>
    2888:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <angle+0x3>
    288c:	20 91 83 21 	lds	r18, 0x2183	; 0x802183 <state>
    2890:	29 83       	std	Y+1, r18	; 0x01
    2892:	40 90 31 21 	lds	r4, 0x2131	; 0x802131 <rpm>
    2896:	50 90 32 21 	lds	r5, 0x2132	; 0x802132 <rpm+0x1>
    289a:	60 90 33 21 	lds	r6, 0x2133	; 0x802133 <rpm+0x2>
    289e:	70 90 34 21 	lds	r7, 0x2134	; 0x802134 <rpm+0x3>
    28a2:	80 90 35 21 	lds	r8, 0x2135	; 0x802135 <roll>
    28a6:	90 90 36 21 	lds	r9, 0x2136	; 0x802136 <roll+0x1>
    28aa:	a0 90 37 21 	lds	r10, 0x2137	; 0x802137 <roll+0x2>
    28ae:	b0 90 38 21 	lds	r11, 0x2138	; 0x802138 <roll+0x3>
    28b2:	c0 90 39 21 	lds	r12, 0x2139	; 0x802139 <pitch>
    28b6:	d0 90 3a 21 	lds	r13, 0x213A	; 0x80213a <pitch+0x1>
    28ba:	e0 90 3b 21 	lds	r14, 0x213B	; 0x80213b <pitch+0x2>
    28be:	f0 90 3c 21 	lds	r15, 0x213C	; 0x80213c <pitch+0x3>
    28c2:	40 91 3d 21 	lds	r20, 0x213D	; 0x80213d <gps_sats>
    28c6:	50 91 3e 21 	lds	r21, 0x213E	; 0x80213e <gps_sats+0x1>
    28ca:	48 af       	std	Y+56, r20	; 0x38
    28cc:	59 af       	std	Y+57, r21	; 0x39
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    28ce:	20 91 3f 21 	lds	r18, 0x213F	; 0x80213f <gps_alt>
    28d2:	30 91 40 21 	lds	r19, 0x2140	; 0x802140 <gps_alt+0x1>
    28d6:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <gps_alt+0x2>
    28da:	50 91 42 21 	lds	r21, 0x2142	; 0x802142 <gps_alt+0x3>
    28de:	2a 83       	std	Y+2, r18	; 0x02
    28e0:	3b 83       	std	Y+3, r19	; 0x03
    28e2:	4c 83       	std	Y+4, r20	; 0x04
    28e4:	5d 83       	std	Y+5, r21	; 0x05
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    28e6:	20 91 3f 21 	lds	r18, 0x213F	; 0x80213f <gps_alt>
    28ea:	30 91 40 21 	lds	r19, 0x2140	; 0x802140 <gps_alt+0x1>
    28ee:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <gps_alt+0x2>
    28f2:	50 91 42 21 	lds	r21, 0x2142	; 0x802142 <gps_alt+0x3>
    28f6:	2e 83       	std	Y+6, r18	; 0x06
    28f8:	3f 83       	std	Y+7, r19	; 0x07
    28fa:	48 87       	std	Y+8, r20	; 0x08
    28fc:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    28fe:	20 91 43 21 	lds	r18, 0x2143	; 0x802143 <gps_long>
    2902:	30 91 44 21 	lds	r19, 0x2144	; 0x802144 <gps_long+0x1>
    2906:	40 91 45 21 	lds	r20, 0x2145	; 0x802145 <gps_long+0x2>
    290a:	50 91 46 21 	lds	r21, 0x2146	; 0x802146 <gps_long+0x3>
    290e:	2a 87       	std	Y+10, r18	; 0x0a
    2910:	3b 87       	std	Y+11, r19	; 0x0b
    2912:	4c 87       	std	Y+12, r20	; 0x0c
    2914:	5d 87       	std	Y+13, r21	; 0x0d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2916:	20 91 43 21 	lds	r18, 0x2143	; 0x802143 <gps_long>
    291a:	30 91 44 21 	lds	r19, 0x2144	; 0x802144 <gps_long+0x1>
    291e:	40 91 45 21 	lds	r20, 0x2145	; 0x802145 <gps_long+0x2>
    2922:	50 91 46 21 	lds	r21, 0x2146	; 0x802146 <gps_long+0x3>
    2926:	2e 87       	std	Y+14, r18	; 0x0e
    2928:	3f 87       	std	Y+15, r19	; 0x0f
    292a:	48 8b       	std	Y+16, r20	; 0x10
    292c:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    292e:	20 91 47 21 	lds	r18, 0x2147	; 0x802147 <gps_lat>
    2932:	30 91 48 21 	lds	r19, 0x2148	; 0x802148 <gps_lat+0x1>
    2936:	40 91 49 21 	lds	r20, 0x2149	; 0x802149 <gps_lat+0x2>
    293a:	50 91 4a 21 	lds	r21, 0x214A	; 0x80214a <gps_lat+0x3>
    293e:	2a 8b       	std	Y+18, r18	; 0x12
    2940:	3b 8b       	std	Y+19, r19	; 0x13
    2942:	4c 8b       	std	Y+20, r20	; 0x14
    2944:	5d 8b       	std	Y+21, r21	; 0x15
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2946:	20 91 47 21 	lds	r18, 0x2147	; 0x802147 <gps_lat>
    294a:	30 91 48 21 	lds	r19, 0x2148	; 0x802148 <gps_lat+0x1>
    294e:	40 91 49 21 	lds	r20, 0x2149	; 0x802149 <gps_lat+0x2>
    2952:	50 91 4a 21 	lds	r21, 0x214A	; 0x80214a <gps_lat+0x3>
    2956:	2e 8b       	std	Y+22, r18	; 0x16
    2958:	3f 8b       	std	Y+23, r19	; 0x17
    295a:	48 8f       	std	Y+24, r20	; 0x18
    295c:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    295e:	20 91 4b 21 	lds	r18, 0x214B	; 0x80214b <gps_t>
    2962:	30 91 4c 21 	lds	r19, 0x214C	; 0x80214c <gps_t+0x1>
    2966:	40 91 4d 21 	lds	r20, 0x214D	; 0x80214d <gps_t+0x2>
    296a:	50 91 4e 21 	lds	r21, 0x214E	; 0x80214e <gps_t+0x3>
    296e:	2a 8f       	std	Y+26, r18	; 0x1a
    2970:	3b 8f       	std	Y+27, r19	; 0x1b
    2972:	4c 8f       	std	Y+28, r20	; 0x1c
    2974:	5d 8f       	std	Y+29, r21	; 0x1d
    2976:	20 91 4b 21 	lds	r18, 0x214B	; 0x80214b <gps_t>
    297a:	30 91 4c 21 	lds	r19, 0x214C	; 0x80214c <gps_t+0x1>
    297e:	40 91 4d 21 	lds	r20, 0x214D	; 0x80214d <gps_t+0x2>
    2982:	50 91 4e 21 	lds	r21, 0x214E	; 0x80214e <gps_t+0x3>
    2986:	2e 8f       	std	Y+30, r18	; 0x1e
    2988:	3f 8f       	std	Y+31, r19	; 0x1f
    298a:	48 a3       	std	Y+32, r20	; 0x20
    298c:	59 a3       	std	Y+33, r21	; 0x21
    298e:	20 91 4b 21 	lds	r18, 0x214B	; 0x80214b <gps_t>
    2992:	30 91 4c 21 	lds	r19, 0x214C	; 0x80214c <gps_t+0x1>
    2996:	40 91 4d 21 	lds	r20, 0x214D	; 0x80214d <gps_t+0x2>
    299a:	50 91 4e 21 	lds	r21, 0x214E	; 0x80214e <gps_t+0x3>
    299e:	2a a3       	std	Y+34, r18	; 0x22
    29a0:	3b a3       	std	Y+35, r19	; 0x23
    29a2:	4c a3       	std	Y+36, r20	; 0x24
    29a4:	5d a3       	std	Y+37, r21	; 0x25
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    29a6:	20 91 53 21 	lds	r18, 0x2153	; 0x802153 <volt>
    29aa:	30 91 54 21 	lds	r19, 0x2154	; 0x802154 <volt+0x1>
    29ae:	40 91 55 21 	lds	r20, 0x2155	; 0x802155 <volt+0x2>
    29b2:	50 91 56 21 	lds	r21, 0x2156	; 0x802156 <volt+0x3>
    29b6:	2e a3       	std	Y+38, r18	; 0x26
    29b8:	3f a3       	std	Y+39, r19	; 0x27
    29ba:	48 a7       	std	Y+40, r20	; 0x28
    29bc:	59 a7       	std	Y+41, r21	; 0x29
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
    29be:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <temp>
    29c2:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <temp+0x1>
    29c6:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <temp+0x2>
    29ca:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <temp+0x3>
    29ce:	2a a7       	std	Y+42, r18	; 0x2a
    29d0:	3b a7       	std	Y+43, r19	; 0x2b
    29d2:	4c a7       	std	Y+44, r20	; 0x2c
    29d4:	5d a7       	std	Y+45, r21	; 0x2d
}

void packet(void){
	//XBEE_spi_write(str);
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    29d6:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <press>
    29da:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <press+0x1>
    29de:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <press+0x2>
    29e2:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <press+0x3>
    29e6:	2e a7       	std	Y+46, r18	; 0x2e
    29e8:	3f a7       	std	Y+47, r19	; 0x2f
    29ea:	48 ab       	std	Y+48, r20	; 0x30
    29ec:	59 ab       	std	Y+49, r21	; 0x31
    29ee:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <alt>
    29f2:	30 91 58 21 	lds	r19, 0x2158	; 0x802158 <alt+0x1>
    29f6:	40 91 59 21 	lds	r20, 0x2159	; 0x802159 <alt+0x2>
    29fa:	50 91 5a 21 	lds	r21, 0x215A	; 0x80215a <alt+0x3>
    29fe:	2a ab       	std	Y+50, r18	; 0x32
    2a00:	3b ab       	std	Y+51, r19	; 0x33
    2a02:	4c ab       	std	Y+52, r20	; 0x34
    2a04:	5d ab       	std	Y+53, r21	; 0x35
    2a06:	00 91 63 21 	lds	r16, 0x2163	; 0x802163 <packets>
    2a0a:	10 91 64 21 	lds	r17, 0x2164	; 0x802164 <packets+0x1>
    2a0e:	20 90 67 21 	lds	r2, 0x2167	; 0x802167 <timer>
    2a12:	30 90 68 21 	lds	r3, 0x2168	; 0x802168 <timer+0x1>
    2a16:	40 91 67 21 	lds	r20, 0x2167	; 0x802167 <timer>
    2a1a:	50 91 68 21 	lds	r21, 0x2168	; 0x802168 <timer+0x1>
    2a1e:	4e ab       	std	Y+54, r20	; 0x36
    2a20:	5f ab       	std	Y+55, r21	; 0x37
    2a22:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2a26:	7f 93       	push	r23
    2a28:	6f 93       	push	r22
    2a2a:	1f 92       	push	r1
    2a2c:	59 81       	ldd	r21, Y+1	; 0x01
    2a2e:	5f 93       	push	r21
    2a30:	c3 01       	movw	r24, r6
    2a32:	b2 01       	movw	r22, r4
    2a34:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2a38:	7f 93       	push	r23
    2a3a:	6f 93       	push	r22
    2a3c:	c5 01       	movw	r24, r10
    2a3e:	b4 01       	movw	r22, r8
    2a40:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2a44:	7f 93       	push	r23
    2a46:	6f 93       	push	r22
    2a48:	c7 01       	movw	r24, r14
    2a4a:	b6 01       	movw	r22, r12
    2a4c:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2a50:	7f 93       	push	r23
    2a52:	6f 93       	push	r22
    2a54:	89 ad       	ldd	r24, Y+57	; 0x39
    2a56:	8f 93       	push	r24
    2a58:	98 ad       	ldd	r25, Y+56	; 0x38
    2a5a:	9f 93       	push	r25
    2a5c:	6a 81       	ldd	r22, Y+2	; 0x02
    2a5e:	7b 81       	ldd	r23, Y+3	; 0x03
    2a60:	8c 81       	ldd	r24, Y+4	; 0x04
    2a62:	9d 81       	ldd	r25, Y+5	; 0x05
    2a64:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2a68:	9b 01       	movw	r18, r22
    2a6a:	22 0f       	add	r18, r18
    2a6c:	33 1f       	adc	r19, r19
    2a6e:	66 0f       	add	r22, r22
    2a70:	77 1f       	adc	r23, r23
    2a72:	66 0f       	add	r22, r22
    2a74:	77 1f       	adc	r23, r23
    2a76:	66 0f       	add	r22, r22
    2a78:	77 1f       	adc	r23, r23
    2a7a:	c9 01       	movw	r24, r18
    2a7c:	86 0f       	add	r24, r22
    2a7e:	97 1f       	adc	r25, r23
    2a80:	6a e0       	ldi	r22, 0x0A	; 10
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	0e 94 cd 24 	call	0x499a	; 0x499a <__divmodhi4>
    2a88:	9f 93       	push	r25
    2a8a:	8f 93       	push	r24
    2a8c:	6e 81       	ldd	r22, Y+6	; 0x06
    2a8e:	7f 81       	ldd	r23, Y+7	; 0x07
    2a90:	88 85       	ldd	r24, Y+8	; 0x08
    2a92:	99 85       	ldd	r25, Y+9	; 0x09
    2a94:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2a98:	7f 93       	push	r23
    2a9a:	6f 93       	push	r22
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	34 e2       	ldi	r19, 0x24	; 36
    2aa0:	44 e7       	ldi	r20, 0x74	; 116
    2aa2:	59 e4       	ldi	r21, 0x49	; 73
    2aa4:	6a 85       	ldd	r22, Y+10	; 0x0a
    2aa6:	7b 85       	ldd	r23, Y+11	; 0x0b
    2aa8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aaa:	9d 85       	ldd	r25, Y+13	; 0x0d
    2aac:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    2ab0:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2ab4:	20 e4       	ldi	r18, 0x40	; 64
    2ab6:	32 e4       	ldi	r19, 0x42	; 66
    2ab8:	4f e0       	ldi	r20, 0x0F	; 15
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    2ac0:	9b 01       	movw	r18, r22
    2ac2:	77 23       	and	r23, r23
    2ac4:	24 f4       	brge	.+8      	; 0x2ace <packet+0x292>
    2ac6:	22 27       	eor	r18, r18
    2ac8:	33 27       	eor	r19, r19
    2aca:	26 1b       	sub	r18, r22
    2acc:	37 0b       	sbc	r19, r23
    2ace:	c9 01       	movw	r24, r18
    2ad0:	33 0f       	add	r19, r19
    2ad2:	aa 0b       	sbc	r26, r26
    2ad4:	bb 0b       	sbc	r27, r27
    2ad6:	bf 93       	push	r27
    2ad8:	af 93       	push	r26
    2ada:	9f 93       	push	r25
    2adc:	8f 93       	push	r24
    2ade:	6e 85       	ldd	r22, Y+14	; 0x0e
    2ae0:	7f 85       	ldd	r23, Y+15	; 0x0f
    2ae2:	88 89       	ldd	r24, Y+16	; 0x10
    2ae4:	99 89       	ldd	r25, Y+17	; 0x11
    2ae6:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2aea:	7f 93       	push	r23
    2aec:	6f 93       	push	r22
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	34 e2       	ldi	r19, 0x24	; 36
    2af2:	44 e7       	ldi	r20, 0x74	; 116
    2af4:	59 e4       	ldi	r21, 0x49	; 73
    2af6:	6a 89       	ldd	r22, Y+18	; 0x12
    2af8:	7b 89       	ldd	r23, Y+19	; 0x13
    2afa:	8c 89       	ldd	r24, Y+20	; 0x14
    2afc:	9d 89       	ldd	r25, Y+21	; 0x15
    2afe:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__mulsf3>
    2b02:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2b06:	20 e4       	ldi	r18, 0x40	; 64
    2b08:	32 e4       	ldi	r19, 0x42	; 66
    2b0a:	4f e0       	ldi	r20, 0x0F	; 15
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    2b12:	9f 93       	push	r25
    2b14:	8f 93       	push	r24
    2b16:	7f 93       	push	r23
    2b18:	6f 93       	push	r22
    2b1a:	6e 89       	ldd	r22, Y+22	; 0x16
    2b1c:	7f 89       	ldd	r23, Y+23	; 0x17
    2b1e:	88 8d       	ldd	r24, Y+24	; 0x18
    2b20:	99 8d       	ldd	r25, Y+25	; 0x19
    2b22:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2b26:	7f 93       	push	r23
    2b28:	6f 93       	push	r22
    2b2a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b2c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b30:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b32:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2b36:	0f 2e       	mov	r0, r31
    2b38:	f4 e6       	ldi	r31, 0x64	; 100
    2b3a:	cf 2e       	mov	r12, r31
    2b3c:	d1 2c       	mov	r13, r1
    2b3e:	e1 2c       	mov	r14, r1
    2b40:	f1 2c       	mov	r15, r1
    2b42:	f0 2d       	mov	r31, r0
    2b44:	a7 01       	movw	r20, r14
    2b46:	96 01       	movw	r18, r12
    2b48:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    2b4c:	7f 93       	push	r23
    2b4e:	6f 93       	push	r22
    2b50:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2b52:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2b54:	88 a1       	ldd	r24, Y+32	; 0x20
    2b56:	99 a1       	ldd	r25, Y+33	; 0x21
    2b58:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2b5c:	0f 2e       	mov	r0, r31
    2b5e:	f0 e1       	ldi	r31, 0x10	; 16
    2b60:	8f 2e       	mov	r8, r31
    2b62:	f7 e2       	ldi	r31, 0x27	; 39
    2b64:	9f 2e       	mov	r9, r31
    2b66:	a1 2c       	mov	r10, r1
    2b68:	b1 2c       	mov	r11, r1
    2b6a:	f0 2d       	mov	r31, r0
    2b6c:	a5 01       	movw	r20, r10
    2b6e:	94 01       	movw	r18, r8
    2b70:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    2b74:	a7 01       	movw	r20, r14
    2b76:	96 01       	movw	r18, r12
    2b78:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    2b7c:	3f 93       	push	r19
    2b7e:	2f 93       	push	r18
    2b80:	6a a1       	ldd	r22, Y+34	; 0x22
    2b82:	7b a1       	ldd	r23, Y+35	; 0x23
    2b84:	8c a1       	ldd	r24, Y+36	; 0x24
    2b86:	9d a1       	ldd	r25, Y+37	; 0x25
    2b88:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2b8c:	a5 01       	movw	r20, r10
    2b8e:	94 01       	movw	r18, r8
    2b90:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    2b94:	3f 93       	push	r19
    2b96:	2f 93       	push	r18
    2b98:	6e a1       	ldd	r22, Y+38	; 0x26
    2b9a:	7f a1       	ldd	r23, Y+39	; 0x27
    2b9c:	88 a5       	ldd	r24, Y+40	; 0x28
    2b9e:	99 a5       	ldd	r25, Y+41	; 0x29
    2ba0:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2ba4:	7f 93       	push	r23
    2ba6:	6f 93       	push	r22
    2ba8:	23 e3       	ldi	r18, 0x33	; 51
    2baa:	33 e9       	ldi	r19, 0x93	; 147
    2bac:	48 e8       	ldi	r20, 0x88	; 136
    2bae:	53 e4       	ldi	r21, 0x43	; 67
    2bb0:	6a a5       	ldd	r22, Y+42	; 0x2a
    2bb2:	7b a5       	ldd	r23, Y+43	; 0x2b
    2bb4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bb6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2bb8:	0e 94 2a 21 	call	0x4254	; 0x4254 <__subsf3>
    2bbc:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2bc0:	7f 93       	push	r23
    2bc2:	6f 93       	push	r22
    2bc4:	6e a5       	ldd	r22, Y+46	; 0x2e
    2bc6:	7f a5       	ldd	r23, Y+47	; 0x2f
    2bc8:	88 a9       	ldd	r24, Y+48	; 0x30
    2bca:	99 a9       	ldd	r25, Y+49	; 0x31
    2bcc:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2bd0:	9f 93       	push	r25
    2bd2:	8f 93       	push	r24
    2bd4:	7f 93       	push	r23
    2bd6:	6f 93       	push	r22
    2bd8:	6a a9       	ldd	r22, Y+50	; 0x32
    2bda:	7b a9       	ldd	r23, Y+51	; 0x33
    2bdc:	8c a9       	ldd	r24, Y+52	; 0x34
    2bde:	9d a9       	ldd	r25, Y+53	; 0x35
    2be0:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    2be4:	7f 93       	push	r23
    2be6:	6f 93       	push	r22
    2be8:	1f 93       	push	r17
    2bea:	0f 93       	push	r16
    2bec:	91 01       	movw	r18, r2
    2bee:	ad ec       	ldi	r26, 0xCD	; 205
    2bf0:	bc ec       	ldi	r27, 0xCC	; 204
    2bf2:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <__umulhisi3>
    2bf6:	96 95       	lsr	r25
    2bf8:	87 95       	ror	r24
    2bfa:	96 95       	lsr	r25
    2bfc:	87 95       	ror	r24
    2bfe:	96 95       	lsr	r25
    2c00:	87 95       	ror	r24
    2c02:	9c 01       	movw	r18, r24
    2c04:	22 0f       	add	r18, r18
    2c06:	33 1f       	adc	r19, r19
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	82 0f       	add	r24, r18
    2c16:	93 1f       	adc	r25, r19
    2c18:	28 1a       	sub	r2, r24
    2c1a:	39 0a       	sbc	r3, r25
    2c1c:	3f 92       	push	r3
    2c1e:	2f 92       	push	r2
    2c20:	2e a9       	ldd	r18, Y+54	; 0x36
    2c22:	3f a9       	ldd	r19, Y+55	; 0x37
    2c24:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <__umulhisi3>
    2c28:	96 95       	lsr	r25
    2c2a:	87 95       	ror	r24
    2c2c:	96 95       	lsr	r25
    2c2e:	87 95       	ror	r24
    2c30:	96 95       	lsr	r25
    2c32:	87 95       	ror	r24
    2c34:	9f 93       	push	r25
    2c36:	8f 93       	push	r24
    2c38:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    2c3c:	8f 93       	push	r24
    2c3e:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    2c42:	8f 93       	push	r24
    2c44:	2b ec       	ldi	r18, 0xCB	; 203
    2c46:	31 e2       	ldi	r19, 0x21	; 33
    2c48:	3f 93       	push	r19
    2c4a:	2f 93       	push	r18
    2c4c:	0e 94 04 26 	call	0x4c08	; 0x4c08 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	2b ec       	ldi	r18, 0xCB	; 203
    2c56:	31 e2       	ldi	r19, 0x21	; 33
    2c58:	3f 93       	push	r19
    2c5a:	2f 93       	push	r18
    2c5c:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <printf>
}
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	e9 96       	adiw	r28, 0x39	; 57
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	ef 90       	pop	r14
    2c76:	df 90       	pop	r13
    2c78:	cf 90       	pop	r12
    2c7a:	bf 90       	pop	r11
    2c7c:	af 90       	pop	r10
    2c7e:	9f 90       	pop	r9
    2c80:	8f 90       	pop	r8
    2c82:	7f 90       	pop	r7
    2c84:	6f 90       	pop	r6
    2c86:	5f 90       	pop	r5
    2c88:	4f 90       	pop	r4
    2c8a:	3f 90       	pop	r3
    2c8c:	2f 90       	pop	r2
    2c8e:	08 95       	ret

00002c90 <eeprom_write_const>:

void eeprom_write_const(void){
    2c90:	4f 92       	push	r4
    2c92:	5f 92       	push	r5
    2c94:	6f 92       	push	r6
    2c96:	7f 92       	push	r7
    2c98:	8f 92       	push	r8
    2c9a:	9f 92       	push	r9
    2c9c:	af 92       	push	r10
    2c9e:	bf 92       	push	r11
    2ca0:	cf 92       	push	r12
    2ca2:	df 92       	push	r13
    2ca4:	ef 92       	push	r14
    2ca6:	ff 92       	push	r15
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	a0 97       	sbiw	r28, 0x20	; 32
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	de bf       	out	0x3e, r29	; 62
	uint64_t p = 0;
	uint64_t t = 0;
	
	memcpy(&p, &ground_p, 8);
    2cba:	ab e2       	ldi	r26, 0x2B	; 43
    2cbc:	b0 e2       	ldi	r27, 0x20	; 32
    2cbe:	fc 91       	ld	r31, X
    2cc0:	11 96       	adiw	r26, 0x01	; 1
    2cc2:	5c 90       	ld	r5, X
    2cc4:	11 97       	sbiw	r26, 0x01	; 1
    2cc6:	12 96       	adiw	r26, 0x02	; 2
    2cc8:	6c 90       	ld	r6, X
    2cca:	12 97       	sbiw	r26, 0x02	; 2
    2ccc:	13 96       	adiw	r26, 0x03	; 3
    2cce:	7c 90       	ld	r7, X
    2cd0:	13 97       	sbiw	r26, 0x03	; 3
    2cd2:	14 96       	adiw	r26, 0x04	; 4
    2cd4:	8c 90       	ld	r8, X
    2cd6:	14 97       	sbiw	r26, 0x04	; 4
    2cd8:	15 96       	adiw	r26, 0x05	; 5
    2cda:	9c 90       	ld	r9, X
    2cdc:	15 97       	sbiw	r26, 0x05	; 5
    2cde:	16 96       	adiw	r26, 0x06	; 6
    2ce0:	ac 90       	ld	r10, X
    2ce2:	16 97       	sbiw	r26, 0x06	; 6
    2ce4:	17 96       	adiw	r26, 0x07	; 7
    2ce6:	4c 90       	ld	r4, X
	memcpy(&t, &ground_t, 8);
    2ce8:	a7 e2       	ldi	r26, 0x27	; 39
    2cea:	b0 e2       	ldi	r27, 0x20	; 32
    2cec:	ec 91       	ld	r30, X
    2cee:	11 96       	adiw	r26, 0x01	; 1
    2cf0:	bc 90       	ld	r11, X
    2cf2:	11 97       	sbiw	r26, 0x01	; 1
    2cf4:	12 96       	adiw	r26, 0x02	; 2
    2cf6:	cc 90       	ld	r12, X
    2cf8:	12 97       	sbiw	r26, 0x02	; 2
    2cfa:	13 96       	adiw	r26, 0x03	; 3
    2cfc:	dc 90       	ld	r13, X
    2cfe:	13 97       	sbiw	r26, 0x03	; 3
    2d00:	14 96       	adiw	r26, 0x04	; 4
    2d02:	ec 90       	ld	r14, X
    2d04:	14 97       	sbiw	r26, 0x04	; 4
    2d06:	15 96       	adiw	r26, 0x05	; 5
    2d08:	fc 90       	ld	r15, X
    2d0a:	15 97       	sbiw	r26, 0x05	; 5
    2d0c:	16 96       	adiw	r26, 0x06	; 6
    2d0e:	1c 91       	ld	r17, X
    2d10:	16 97       	sbiw	r26, 0x06	; 6
    2d12:	17 96       	adiw	r26, 0x07	; 7
    2d14:	ac 91       	ld	r26, X

	uint8_t data[] = {p & 0xFF, (p >> 8) & 0xFF, (p >> 16) & 0xFF, (p >> 24) & 0xFF, (p >> 32) & 0xFF, (p >> 40) & 0xFF, (p >> 48) & 0xFF, p >> 56,
    2d16:	f9 83       	std	Y+1, r31	; 0x01
    2d18:	2f 2f       	mov	r18, r31
    2d1a:	35 2d       	mov	r19, r5
    2d1c:	46 2d       	mov	r20, r6
    2d1e:	57 2d       	mov	r21, r7
    2d20:	68 2d       	mov	r22, r8
    2d22:	79 2d       	mov	r23, r9
    2d24:	8a 2d       	mov	r24, r10
    2d26:	94 2d       	mov	r25, r4
    2d28:	08 e0       	ldi	r16, 0x08	; 8
    2d2a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2d2e:	2a 83       	std	Y+2, r18	; 0x02
    2d30:	2f 2f       	mov	r18, r31
    2d32:	35 2d       	mov	r19, r5
    2d34:	46 2d       	mov	r20, r6
    2d36:	57 2d       	mov	r21, r7
    2d38:	68 2d       	mov	r22, r8
    2d3a:	79 2d       	mov	r23, r9
    2d3c:	8a 2d       	mov	r24, r10
    2d3e:	94 2d       	mov	r25, r4
    2d40:	00 e1       	ldi	r16, 0x10	; 16
    2d42:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2d46:	2b 83       	std	Y+3, r18	; 0x03
    2d48:	2f 2f       	mov	r18, r31
    2d4a:	35 2d       	mov	r19, r5
    2d4c:	46 2d       	mov	r20, r6
    2d4e:	57 2d       	mov	r21, r7
    2d50:	68 2d       	mov	r22, r8
    2d52:	79 2d       	mov	r23, r9
    2d54:	8a 2d       	mov	r24, r10
    2d56:	94 2d       	mov	r25, r4
    2d58:	08 e1       	ldi	r16, 0x18	; 24
    2d5a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2d5e:	2c 83       	std	Y+4, r18	; 0x04
    2d60:	2f 2f       	mov	r18, r31
    2d62:	35 2d       	mov	r19, r5
    2d64:	46 2d       	mov	r20, r6
    2d66:	57 2d       	mov	r21, r7
    2d68:	68 2d       	mov	r22, r8
    2d6a:	79 2d       	mov	r23, r9
    2d6c:	8a 2d       	mov	r24, r10
    2d6e:	94 2d       	mov	r25, r4
    2d70:	00 e2       	ldi	r16, 0x20	; 32
    2d72:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2d76:	2d 83       	std	Y+5, r18	; 0x05
    2d78:	2f 2f       	mov	r18, r31
    2d7a:	35 2d       	mov	r19, r5
    2d7c:	46 2d       	mov	r20, r6
    2d7e:	57 2d       	mov	r21, r7
    2d80:	68 2d       	mov	r22, r8
    2d82:	79 2d       	mov	r23, r9
    2d84:	8a 2d       	mov	r24, r10
    2d86:	94 2d       	mov	r25, r4
    2d88:	08 e2       	ldi	r16, 0x28	; 40
    2d8a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2d8e:	2e 83       	std	Y+6, r18	; 0x06
    2d90:	2f 2f       	mov	r18, r31
    2d92:	35 2d       	mov	r19, r5
    2d94:	46 2d       	mov	r20, r6
    2d96:	57 2d       	mov	r21, r7
    2d98:	68 2d       	mov	r22, r8
    2d9a:	79 2d       	mov	r23, r9
    2d9c:	8a 2d       	mov	r24, r10
    2d9e:	94 2d       	mov	r25, r4
    2da0:	00 e3       	ldi	r16, 0x30	; 48
    2da2:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2da6:	2f 83       	std	Y+7, r18	; 0x07
    2da8:	2f 2f       	mov	r18, r31
    2daa:	35 2d       	mov	r19, r5
    2dac:	46 2d       	mov	r20, r6
    2dae:	57 2d       	mov	r21, r7
    2db0:	68 2d       	mov	r22, r8
    2db2:	79 2d       	mov	r23, r9
    2db4:	8a 2d       	mov	r24, r10
    2db6:	94 2d       	mov	r25, r4
    2db8:	08 e3       	ldi	r16, 0x38	; 56
    2dba:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2dbe:	28 87       	std	Y+8, r18	; 0x08
    2dc0:	e9 87       	std	Y+9, r30	; 0x09
    2dc2:	2e 2f       	mov	r18, r30
    2dc4:	3b 2d       	mov	r19, r11
    2dc6:	4c 2d       	mov	r20, r12
    2dc8:	5d 2d       	mov	r21, r13
    2dca:	6e 2d       	mov	r22, r14
    2dcc:	7f 2d       	mov	r23, r15
    2dce:	81 2f       	mov	r24, r17
    2dd0:	9a 2f       	mov	r25, r26
    2dd2:	08 e0       	ldi	r16, 0x08	; 8
    2dd4:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2dd8:	2a 87       	std	Y+10, r18	; 0x0a
    2dda:	2e 2f       	mov	r18, r30
    2ddc:	3b 2d       	mov	r19, r11
    2dde:	4c 2d       	mov	r20, r12
    2de0:	5d 2d       	mov	r21, r13
    2de2:	6e 2d       	mov	r22, r14
    2de4:	7f 2d       	mov	r23, r15
    2de6:	81 2f       	mov	r24, r17
    2de8:	9a 2f       	mov	r25, r26
    2dea:	00 e1       	ldi	r16, 0x10	; 16
    2dec:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2df0:	2b 87       	std	Y+11, r18	; 0x0b
    2df2:	2e 2f       	mov	r18, r30
    2df4:	3b 2d       	mov	r19, r11
    2df6:	4c 2d       	mov	r20, r12
    2df8:	5d 2d       	mov	r21, r13
    2dfa:	6e 2d       	mov	r22, r14
    2dfc:	7f 2d       	mov	r23, r15
    2dfe:	81 2f       	mov	r24, r17
    2e00:	9a 2f       	mov	r25, r26
    2e02:	08 e1       	ldi	r16, 0x18	; 24
    2e04:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2e08:	2c 87       	std	Y+12, r18	; 0x0c
    2e0a:	2e 2f       	mov	r18, r30
    2e0c:	3b 2d       	mov	r19, r11
    2e0e:	4c 2d       	mov	r20, r12
    2e10:	5d 2d       	mov	r21, r13
    2e12:	6e 2d       	mov	r22, r14
    2e14:	7f 2d       	mov	r23, r15
    2e16:	81 2f       	mov	r24, r17
    2e18:	9a 2f       	mov	r25, r26
    2e1a:	00 e2       	ldi	r16, 0x20	; 32
    2e1c:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2e20:	2d 87       	std	Y+13, r18	; 0x0d
    2e22:	2e 2f       	mov	r18, r30
    2e24:	3b 2d       	mov	r19, r11
    2e26:	4c 2d       	mov	r20, r12
    2e28:	5d 2d       	mov	r21, r13
    2e2a:	6e 2d       	mov	r22, r14
    2e2c:	7f 2d       	mov	r23, r15
    2e2e:	81 2f       	mov	r24, r17
    2e30:	9a 2f       	mov	r25, r26
    2e32:	08 e2       	ldi	r16, 0x28	; 40
    2e34:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2e38:	2e 87       	std	Y+14, r18	; 0x0e
    2e3a:	2e 2f       	mov	r18, r30
    2e3c:	3b 2d       	mov	r19, r11
    2e3e:	4c 2d       	mov	r20, r12
    2e40:	5d 2d       	mov	r21, r13
    2e42:	6e 2d       	mov	r22, r14
    2e44:	7f 2d       	mov	r23, r15
    2e46:	81 2f       	mov	r24, r17
    2e48:	9a 2f       	mov	r25, r26
    2e4a:	00 e3       	ldi	r16, 0x30	; 48
    2e4c:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2e50:	2f 87       	std	Y+15, r18	; 0x0f
    2e52:	2e 2f       	mov	r18, r30
    2e54:	3b 2d       	mov	r19, r11
    2e56:	4c 2d       	mov	r20, r12
    2e58:	5d 2d       	mov	r21, r13
    2e5a:	6e 2d       	mov	r22, r14
    2e5c:	7f 2d       	mov	r23, r15
    2e5e:	81 2f       	mov	r24, r17
    2e60:	9a 2f       	mov	r25, r26
    2e62:	08 e3       	ldi	r16, 0x38	; 56
    2e64:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__lshrdi3>
    2e68:	28 8b       	std	Y+16, r18	; 0x10
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
    2e6a:	80 e1       	ldi	r24, 0x10	; 16
    2e6c:	ef e2       	ldi	r30, 0x2F	; 47
    2e6e:	f0 e2       	ldi	r31, 0x20	; 32
    2e70:	de 01       	movw	r26, r28
    2e72:	51 96       	adiw	r26, 0x11	; 17
    2e74:	01 90       	ld	r0, Z+
    2e76:	0d 92       	st	X+, r0
    2e78:	8a 95       	dec	r24
    2e7a:	e1 f7       	brne	.-8      	; 0x2e74 <eeprom_write_const+0x1e4>
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
    2e7c:	83 e3       	ldi	r24, 0x33	; 51
    2e7e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    2e82:	fe 01       	movw	r30, r28
    2e84:	71 96       	adiw	r30, 0x11	; 17
    2e86:	ce 01       	movw	r24, r28
    2e88:	01 96       	adiw	r24, 0x01	; 1
    2e8a:	ae 01       	movw	r20, r28
    2e8c:	4f 5d       	subi	r20, 0xDF	; 223
    2e8e:	5f 4f       	sbci	r21, 0xFF	; 255
	for(uint8_t i = 0; i < 16; i++){
		NVM.ADDR0 = addresses[i];
    2e90:	60 ec       	ldi	r22, 0xC0	; 192
    2e92:	71 e0       	ldi	r23, 0x01	; 1
    2e94:	21 91       	ld	r18, Z+
    2e96:	db 01       	movw	r26, r22
    2e98:	2c 93       	st	X, r18
		NVM.DATA0 = data[i];
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	2d 91       	ld	r18, X+
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	db 01       	movw	r26, r22
    2ea2:	14 96       	adiw	r26, 0x04	; 4
    2ea4:	2c 93       	st	X, r18
					  t & 0xFF, (t >> 8) & 0xFF, (t >> 16) & 0xFF, (t >> 24) & 0xFF, (t >> 32) & 0xFF, (t >> 40) & 0xFF, (t >> 48) & 0xFF, t >> 56,};
	uint8_t addresses[] = {	GROUND_PRESS_ADDR0, GROUND_PRESS_ADDR1, GROUND_PRESS_ADDR2, GROUND_PRESS_ADDR3, GROUND_PRESS_ADDR4, GROUND_PRESS_ADDR5, GROUND_PRESS_ADDR6, GROUND_PRESS_ADDR7,
							GROUND_TEMP_ADDR0,  GROUND_TEMP_ADDR1,  GROUND_TEMP_ADDR2,  GROUND_TEMP_ADDR3,  GROUND_TEMP_ADDR4,  GROUND_TEMP_ADDR5,  GROUND_TEMP_ADDR6,  GROUND_TEMP_ADDR7};

	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 16; i++){
    2ea6:	e4 17       	cp	r30, r20
    2ea8:	f5 07       	cpc	r31, r21
    2eaa:	a1 f7       	brne	.-24     	; 0x2e94 <eeprom_write_const+0x204>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    2eac:	e0 ec       	ldi	r30, 0xC0	; 192
    2eae:	f1 e0       	ldi	r31, 0x01	; 1
    2eb0:	85 e3       	ldi	r24, 0x35	; 53
    2eb2:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    2eb4:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    2eb6:	80 e1       	ldi	r24, 0x10	; 16
    2eb8:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    2eba:	88 ed       	ldi	r24, 0xD8	; 216
    2ebc:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    2ec2:	87 85       	ldd	r24, Z+15	; 0x0f
    2ec4:	88 23       	and	r24, r24
    2ec6:	ec f3       	brlt	.-6      	; 0x2ec2 <eeprom_write_const+0x232>
}
    2ec8:	a0 96       	adiw	r28, 0x20	; 32
    2eca:	cd bf       	out	0x3d, r28	; 61
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	ef 90       	pop	r14
    2eda:	df 90       	pop	r13
    2edc:	cf 90       	pop	r12
    2ede:	bf 90       	pop	r11
    2ee0:	af 90       	pop	r10
    2ee2:	9f 90       	pop	r9
    2ee4:	8f 90       	pop	r8
    2ee6:	7f 90       	pop	r7
    2ee8:	6f 90       	pop	r6
    2eea:	5f 90       	pop	r5
    2eec:	4f 90       	pop	r4
    2eee:	08 95       	ret

00002ef0 <eeprom_read>:
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);
	
	printf("%u, %u\n",b1, b2);
}

uint8_t	eeprom_read(uint16_t address){
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
	NVM.CMD = READ_EEPROM;
    2ef4:	c0 ec       	ldi	r28, 0xC0	; 192
    2ef6:	d1 e0       	ldi	r29, 0x01	; 1
    2ef8:	26 e0       	ldi	r18, 0x06	; 6
    2efa:	2a 87       	std	Y+10, r18	; 0x0a
	NVM.ADDR0 = address & 0xFF;
    2efc:	88 83       	st	Y, r24
	NVM.ADDR1 = address >> 8;
    2efe:	99 83       	std	Y+1, r25	; 0x01
	CCP = CCP_IOREG_MODE;
    2f00:	88 ed       	ldi	r24, 0xD8	; 216
    2f02:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	8b 87       	std	Y+11, r24	; 0x0b
	delay_ms(1);
    2f08:	66 ed       	ldi	r22, 0xD6	; 214
    2f0a:	74 e1       	ldi	r23, 0x14	; 20
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__portable_avr_delay_cycles>
	uint8_t byte = NVM.DATA0;
    2f14:	8c 81       	ldd	r24, Y+4	; 0x04
	return byte;
}
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	08 95       	ret

00002f1c <system_init>:
	}
}


// Sensor functions
void system_init(void){
    2f1c:	2f 92       	push	r2
    2f1e:	3f 92       	push	r3
    2f20:	4f 92       	push	r4
    2f22:	5f 92       	push	r5
    2f24:	6f 92       	push	r6
    2f26:	7f 92       	push	r7
    2f28:	8f 92       	push	r8
    2f2a:	9f 92       	push	r9
    2f2c:	af 92       	push	r10
    2f2e:	bf 92       	push	r11
    2f30:	cf 92       	push	r12
    2f32:	df 92       	push	r13
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	27 97       	sbiw	r28, 0x07	; 7
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	de bf       	out	0x3e, r29	; 62
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    2f4a:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    2f4e:	6b ea       	ldi	r22, 0xAB	; 171
    2f50:	79 e2       	ldi	r23, 0x29	; 41
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__portable_avr_delay_cycles>
	sei();
    2f5a:	78 94       	sei

	// Initialization of pins
	PORTC.DIR = 0xBC; // makes Port C have pins, 7, 5, 4, 3, and 2 be output (0b10111100)
    2f5c:	8c eb       	ldi	r24, 0xBC	; 188
    2f5e:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; // enables lo level interrupts
    2f62:	87 e0       	ldi	r24, 0x07	; 7
    2f64:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// Driver Initialization
	cam_init();
    2f68:	0e 94 2c 0b 	call	0x1658	; 0x1658 <cam_init>
	data_terminal_init();
    2f6c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <data_terminal_init>
	delay_ms(500);
    2f70:	6b ea       	ldi	r22, 0xAB	; 171
    2f72:	70 eb       	ldi	r23, 0xB0	; 176
    2f74:	88 e2       	ldi	r24, 0x28	; 40
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__portable_avr_delay_cycles>

	(*GPS_TERMINAL_SERIAL).CTRLA = USART_RXCINTLVL_HI_gc;
}

void xbee_init(void){
	USARTE0.CTRLA = USART_RXCINTLVL_MED_gc;
    2f7c:	80 e2       	ldi	r24, 0x20	; 32
    2f7e:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	// Driver Initialization
	cam_init();
	data_terminal_init();
	delay_ms(500);
	xbee_init();
	gps_init();
    2f82:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <gps_init>
	buzzer_init();
    2f86:	fe db       	rcall	.-2052   	; 0x2784 <buzzer_init>
	//delay_ms(100);

	thermistor_init();
    2f88:	0e 94 33 0b 	call	0x1666	; 0x1666 <thermistor_init>
	voltage_init();
    2f8c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <voltage_init>
	spi_init();
    2f90:	0e 94 42 0c 	call	0x1884	; 0x1884 <spi_init>
	pressure_init();
    2f94:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <pressure_init>
	//bno_init();
	cam_switch();
    2f98:	0e 94 25 0b 	call	0x164a	; 0x164a <cam_switch>
	clock_init();

	release_servo_init();
    2f9c:	e5 db       	rcall	.-2102   	; 0x2768 <clock_init>
    2f9e:	2f db       	rcall	.-2466   	; 0x25fe <release_servo_init>
	servo_timer_init();
    2fa0:	4a db       	rcall	.-2412   	; 0x2636 <servo_timer_init>

	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	90 e1       	ldi	r25, 0x10	; 16
    2fa6:	a4 df       	rcall	.-184    	; 0x2ef0 <eeprom_read>
    2fa8:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);
    2faa:	8d e2       	ldi	r24, 0x2D	; 45
    2fac:	90 e1       	ldi	r25, 0x10	; 16
    2fae:	a0 df       	rcall	.-192    	; 0x2ef0 <eeprom_read>
    2fb0:	8a 83       	std	Y+2, r24	; 0x02
    2fb2:	99 81       	ldd	r25, Y+1	; 0x01

	if(b1 == b2 && b1 != 0xFF){
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	98 13       	cpse	r25, r24
    2fb8:	f5 c1       	rjmp	.+1002   	; 0x33a4 <system_init+0x488>
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <system_init+0xa6>
    2fc0:	f1 c1       	rjmp	.+994    	; 0x33a4 <system_init+0x488>
    2fc2:	89 e4       	ldi	r24, 0x49	; 73
		printf("Reading EEPROM\n");
    2fc4:	90 e2       	ldi	r25, 0x20	; 32
    2fc6:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <puts>
		uint64_t p =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR7)<<56 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR6)<<48 |
    2fca:	80 e1       	ldi	r24, 0x10	; 16
    2fcc:	90 e1       	ldi	r25, 0x10	; 16
    2fce:	90 df       	rcall	.-224    	; 0x2ef0 <eeprom_read>
    2fd0:	18 2f       	mov	r17, r24
    2fd2:	8f e0       	ldi	r24, 0x0F	; 15
    2fd4:	90 e1       	ldi	r25, 0x10	; 16
    2fd6:	8c df       	rcall	.-232    	; 0x2ef0 <eeprom_read>
    2fd8:	b8 2f       	mov	r27, r24
    2fda:	21 2f       	mov	r18, r17
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e0       	ldi	r20, 0x00	; 0
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	08 e3       	ldi	r16, 0x38	; 56
    2fec:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    2ff0:	12 2f       	mov	r17, r18
    2ff2:	c3 2e       	mov	r12, r19
    2ff4:	f4 2e       	mov	r15, r20
    2ff6:	a5 2f       	mov	r26, r21
    2ff8:	f6 2f       	mov	r31, r22
    2ffa:	e7 2f       	mov	r30, r23
    2ffc:	d8 2e       	mov	r13, r24
    2ffe:	e9 2e       	mov	r14, r25
    3000:	2b 2f       	mov	r18, r27
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	50 e0       	ldi	r21, 0x00	; 0
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	00 e3       	ldi	r16, 0x30	; 48
    3012:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    3016:	12 2b       	or	r17, r18
    3018:	c3 2a       	or	r12, r19
    301a:	f4 2a       	or	r15, r20
    301c:	9a 2e       	mov	r9, r26
    301e:	95 2a       	or	r9, r21
    3020:	af 2e       	mov	r10, r31
    3022:	a6 2a       	or	r10, r22
    3024:	be 2e       	mov	r11, r30
    3026:	b7 2a       	or	r11, r23
    3028:	d8 2a       	or	r13, r24
    302a:	e9 2a       	or	r14, r25
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR5)<<40 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR4)<<32 |
    302c:	8e e0       	ldi	r24, 0x0E	; 14
    302e:	90 e1       	ldi	r25, 0x10	; 16
    3030:	5f df       	rcall	.-322    	; 0x2ef0 <eeprom_read>
    3032:	08 2f       	mov	r16, r24
    3034:	8d e0       	ldi	r24, 0x0D	; 13
    3036:	90 e1       	ldi	r25, 0x10	; 16
    3038:	5b df       	rcall	.-330    	; 0x2ef0 <eeprom_read>
    303a:	28 2e       	mov	r2, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR3)<<24 | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR2)<<16 |
    303c:	8c e0       	ldi	r24, 0x0C	; 12
    303e:	90 e1       	ldi	r25, 0x10	; 16
    3040:	57 df       	rcall	.-338    	; 0x2ef0 <eeprom_read>
    3042:	38 2e       	mov	r3, r24
    3044:	8b e0       	ldi	r24, 0x0B	; 11
    3046:	90 e1       	ldi	r25, 0x10	; 16
    3048:	53 df       	rcall	.-346    	; 0x2ef0 <eeprom_read>
    304a:	48 2e       	mov	r4, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR1)<<8  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_PRESS_ADDR0));
    304c:	8a e0       	ldi	r24, 0x0A	; 10
    304e:	90 e1       	ldi	r25, 0x10	; 16
    3050:	4f df       	rcall	.-354    	; 0x2ef0 <eeprom_read>
    3052:	58 2e       	mov	r5, r24
    3054:	89 e0       	ldi	r24, 0x09	; 9
    3056:	90 e1       	ldi	r25, 0x10	; 16
    3058:	4b df       	rcall	.-362    	; 0x2ef0 <eeprom_read>
    305a:	68 2e       	mov	r6, r24
    305c:	20 2f       	mov	r18, r16
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	60 e0       	ldi	r22, 0x00	; 0
    3066:	70 e0       	ldi	r23, 0x00	; 0
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	08 e2       	ldi	r16, 0x28	; 40
    306e:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    3072:	16 29       	or	r17, r6
    3074:	12 2b       	or	r17, r18
    3076:	c3 2a       	or	r12, r19
    3078:	f4 2a       	or	r15, r20
    307a:	a5 2f       	mov	r26, r21
    307c:	a9 29       	or	r26, r9
    307e:	f6 2f       	mov	r31, r22
    3080:	fa 29       	or	r31, r10
    3082:	e7 2f       	mov	r30, r23
    3084:	eb 29       	or	r30, r11
    3086:	d8 2a       	or	r13, r24
    3088:	e9 2a       	or	r14, r25
    308a:	22 2d       	mov	r18, r2
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e0       	ldi	r20, 0x00	; 0
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	00 e2       	ldi	r16, 0x20	; 32
    309c:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    30a0:	12 2b       	or	r17, r18
    30a2:	c3 2a       	or	r12, r19
    30a4:	f4 2a       	or	r15, r20
    30a6:	a5 2b       	or	r26, r21
    30a8:	f6 2b       	or	r31, r22
    30aa:	e7 2b       	or	r30, r23
    30ac:	d8 2a       	or	r13, r24
    30ae:	e9 2a       	or	r14, r25
    30b0:	23 2d       	mov	r18, r3
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e0       	ldi	r20, 0x00	; 0
    30b6:	50 e0       	ldi	r21, 0x00	; 0
    30b8:	60 e0       	ldi	r22, 0x00	; 0
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	08 e1       	ldi	r16, 0x18	; 24
    30c2:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    30c6:	12 2b       	or	r17, r18
    30c8:	c3 2a       	or	r12, r19
    30ca:	f4 2a       	or	r15, r20
    30cc:	a5 2b       	or	r26, r21
    30ce:	f6 2b       	or	r31, r22
    30d0:	e7 2b       	or	r30, r23
    30d2:	d8 2a       	or	r13, r24
    30d4:	e9 2a       	or	r14, r25
    30d6:	24 2d       	mov	r18, r4
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	00 e1       	ldi	r16, 0x10	; 16
    30e8:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    30ec:	12 2b       	or	r17, r18
    30ee:	c3 2a       	or	r12, r19
    30f0:	f4 2a       	or	r15, r20
    30f2:	a5 2b       	or	r26, r21
    30f4:	f6 2b       	or	r31, r22
    30f6:	e7 2b       	or	r30, r23
    30f8:	d8 2a       	or	r13, r24
    30fa:	e9 2a       	or	r14, r25
    30fc:	25 2d       	mov	r18, r5
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e0       	ldi	r20, 0x00	; 0
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	08 e0       	ldi	r16, 0x08	; 8
    310e:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    3112:	61 2e       	mov	r6, r17
    3114:	62 2a       	or	r6, r18
    3116:	7c 2c       	mov	r7, r12
    3118:	73 2a       	or	r7, r19
    311a:	8f 2c       	mov	r8, r15
    311c:	84 2a       	or	r8, r20
    311e:	9a 2e       	mov	r9, r26
    3120:	95 2a       	or	r9, r21
    3122:	af 2e       	mov	r10, r31
    3124:	a6 2a       	or	r10, r22
    3126:	be 2e       	mov	r11, r30
    3128:	b7 2a       	or	r11, r23
    312a:	d8 2a       	or	r13, r24
    312c:	e9 2a       	or	r14, r25
		uint64_t t =  ((uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR7)<<56  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR6)<<48 |
    312e:	89 e1       	ldi	r24, 0x19	; 25
    3130:	90 e1       	ldi	r25, 0x10	; 16
    3132:	de de       	rcall	.-580    	; 0x2ef0 <eeprom_read>
    3134:	18 2f       	mov	r17, r24
    3136:	88 e1       	ldi	r24, 0x18	; 24
    3138:	90 e1       	ldi	r25, 0x10	; 16
    313a:	da de       	rcall	.-588    	; 0x2ef0 <eeprom_read>
    313c:	48 2e       	mov	r4, r24
    313e:	21 2f       	mov	r18, r17
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e0       	ldi	r20, 0x00	; 0
    3144:	50 e0       	ldi	r21, 0x00	; 0
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	08 e3       	ldi	r16, 0x38	; 56
    3150:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    3154:	c2 2e       	mov	r12, r18
    3156:	53 2e       	mov	r5, r19
    3158:	b4 2f       	mov	r27, r20
    315a:	a5 2f       	mov	r26, r21
    315c:	f6 2f       	mov	r31, r22
    315e:	e7 2f       	mov	r30, r23
    3160:	f8 2e       	mov	r15, r24
    3162:	19 2f       	mov	r17, r25
    3164:	24 2d       	mov	r18, r4
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e0       	ldi	r20, 0x00	; 0
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	00 e3       	ldi	r16, 0x30	; 48
    3176:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    317a:	c2 2a       	or	r12, r18
    317c:	53 2a       	or	r5, r19
    317e:	5f 82       	std	Y+7, r5	; 0x07
    3180:	2b 2e       	mov	r2, r27
    3182:	24 2a       	or	r2, r20
    3184:	3a 2e       	mov	r3, r26
    3186:	35 2a       	or	r3, r21
    3188:	4f 2e       	mov	r4, r31
    318a:	46 2a       	or	r4, r22
    318c:	5e 2e       	mov	r5, r30
    318e:	57 2a       	or	r5, r23
    3190:	f8 2a       	or	r15, r24
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR5)<<40  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR4)<<32 |
    3192:	19 2b       	or	r17, r25
    3194:	87 e1       	ldi	r24, 0x17	; 23
    3196:	90 e1       	ldi	r25, 0x10	; 16
    3198:	ab de       	rcall	.-682    	; 0x2ef0 <eeprom_read>
    319a:	08 2f       	mov	r16, r24
    319c:	86 e1       	ldi	r24, 0x16	; 22
    319e:	90 e1       	ldi	r25, 0x10	; 16
    31a0:	a7 de       	rcall	.-690    	; 0x2ef0 <eeprom_read>
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR3)<<24  | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR2)<<16 |
    31a2:	8b 83       	std	Y+3, r24	; 0x03
    31a4:	85 e1       	ldi	r24, 0x15	; 21
    31a6:	90 e1       	ldi	r25, 0x10	; 16
    31a8:	a3 de       	rcall	.-698    	; 0x2ef0 <eeprom_read>
    31aa:	8c 83       	std	Y+4, r24	; 0x04
    31ac:	84 e1       	ldi	r24, 0x14	; 20
    31ae:	90 e1       	ldi	r25, 0x10	; 16
    31b0:	9f de       	rcall	.-706    	; 0x2ef0 <eeprom_read>
    31b2:	8d 83       	std	Y+5, r24	; 0x05
    31b4:	83 e1       	ldi	r24, 0x13	; 19
					   (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR1)<<8   | (uint64_t) eeprom_read(EEPROM_PAGE|GROUND_TEMP_ADDR0));
    31b6:	90 e1       	ldi	r25, 0x10	; 16
    31b8:	9b de       	rcall	.-714    	; 0x2ef0 <eeprom_read>
    31ba:	8e 83       	std	Y+6, r24	; 0x06
    31bc:	82 e1       	ldi	r24, 0x12	; 18
    31be:	90 e1       	ldi	r25, 0x10	; 16
    31c0:	97 de       	rcall	.-722    	; 0x2ef0 <eeprom_read>
    31c2:	e8 2f       	mov	r30, r24
    31c4:	ab e2       	ldi	r26, 0x2B	; 43
    31c6:	b0 e2       	ldi	r27, 0x20	; 32
    31c8:	6c 92       	st	X, r6
		memcpy(&ground_p, &p, 8);
    31ca:	11 96       	adiw	r26, 0x01	; 1
    31cc:	7c 92       	st	X, r7
    31ce:	11 97       	sbiw	r26, 0x01	; 1
    31d0:	12 96       	adiw	r26, 0x02	; 2
    31d2:	8c 92       	st	X, r8
    31d4:	12 97       	sbiw	r26, 0x02	; 2
    31d6:	13 96       	adiw	r26, 0x03	; 3
    31d8:	9c 92       	st	X, r9
    31da:	13 97       	sbiw	r26, 0x03	; 3
    31dc:	14 96       	adiw	r26, 0x04	; 4
    31de:	ac 92       	st	X, r10
    31e0:	14 97       	sbiw	r26, 0x04	; 4
    31e2:	15 96       	adiw	r26, 0x05	; 5
    31e4:	bc 92       	st	X, r11
    31e6:	15 97       	sbiw	r26, 0x05	; 5
    31e8:	16 96       	adiw	r26, 0x06	; 6
    31ea:	dc 92       	st	X, r13
    31ec:	16 97       	sbiw	r26, 0x06	; 6
    31ee:	17 96       	adiw	r26, 0x07	; 7
    31f0:	ec 92       	st	X, r14
    31f2:	a7 e2       	ldi	r26, 0x27	; 39
    31f4:	b0 e2       	ldi	r27, 0x20	; 32
    31f6:	20 2f       	mov	r18, r16
		memcpy(&ground_t, &t, 8);
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e0       	ldi	r20, 0x00	; 0
    31fc:	50 e0       	ldi	r21, 0x00	; 0
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	08 e2       	ldi	r16, 0x28	; 40
    3208:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    320c:	ce 2a       	or	r12, r30
    320e:	c2 2a       	or	r12, r18
    3210:	bf 80       	ldd	r11, Y+7	; 0x07
    3212:	b3 2a       	or	r11, r19
    3214:	d4 2e       	mov	r13, r20
    3216:	d2 28       	or	r13, r2
    3218:	e5 2e       	mov	r14, r21
    321a:	e3 28       	or	r14, r3
    321c:	f6 2f       	mov	r31, r22
    321e:	f4 29       	or	r31, r4
    3220:	e7 2f       	mov	r30, r23
    3222:	e5 29       	or	r30, r5
    3224:	f8 2a       	or	r15, r24
    3226:	19 2b       	or	r17, r25
    3228:	2b 81       	ldd	r18, Y+3	; 0x03
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e0       	ldi	r20, 0x00	; 0
    322e:	50 e0       	ldi	r21, 0x00	; 0
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	70 e0       	ldi	r23, 0x00	; 0
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	00 e2       	ldi	r16, 0x20	; 32
    323a:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    323e:	c2 2a       	or	r12, r18
    3240:	b3 2a       	or	r11, r19
    3242:	d4 2a       	or	r13, r20
    3244:	e5 2a       	or	r14, r21
    3246:	f6 2b       	or	r31, r22
    3248:	e7 2b       	or	r30, r23
    324a:	f8 2a       	or	r15, r24
    324c:	19 2b       	or	r17, r25
    324e:	2c 81       	ldd	r18, Y+4	; 0x04
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e0       	ldi	r20, 0x00	; 0
    3254:	50 e0       	ldi	r21, 0x00	; 0
    3256:	60 e0       	ldi	r22, 0x00	; 0
    3258:	70 e0       	ldi	r23, 0x00	; 0
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	08 e1       	ldi	r16, 0x18	; 24
    3260:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    3264:	c2 2a       	or	r12, r18
    3266:	b3 2a       	or	r11, r19
    3268:	d4 2a       	or	r13, r20
    326a:	e5 2a       	or	r14, r21
    326c:	f6 2b       	or	r31, r22
    326e:	e7 2b       	or	r30, r23
    3270:	f8 2a       	or	r15, r24
    3272:	19 2b       	or	r17, r25
    3274:	2d 81       	ldd	r18, Y+5	; 0x05
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e0       	ldi	r20, 0x00	; 0
    327a:	50 e0       	ldi	r21, 0x00	; 0
    327c:	60 e0       	ldi	r22, 0x00	; 0
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	00 e1       	ldi	r16, 0x10	; 16
    3286:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    328a:	c2 2a       	or	r12, r18
    328c:	b3 2a       	or	r11, r19
    328e:	d4 2a       	or	r13, r20
    3290:	e5 2a       	or	r14, r21
    3292:	f6 2b       	or	r31, r22
    3294:	e7 2b       	or	r30, r23
    3296:	f8 2a       	or	r15, r24
    3298:	19 2b       	or	r17, r25
    329a:	2e 81       	ldd	r18, Y+6	; 0x06
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	08 e0       	ldi	r16, 0x08	; 8
    32ac:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__ashldi3>
    32b0:	2c 29       	or	r18, r12
    32b2:	2c 93       	st	X, r18
    32b4:	3b 29       	or	r19, r11
    32b6:	11 96       	adiw	r26, 0x01	; 1
    32b8:	3c 93       	st	X, r19
    32ba:	11 97       	sbiw	r26, 0x01	; 1
    32bc:	4d 29       	or	r20, r13
    32be:	12 96       	adiw	r26, 0x02	; 2
    32c0:	4c 93       	st	X, r20
    32c2:	12 97       	sbiw	r26, 0x02	; 2
    32c4:	5e 29       	or	r21, r14
    32c6:	13 96       	adiw	r26, 0x03	; 3
    32c8:	5c 93       	st	X, r21
    32ca:	13 97       	sbiw	r26, 0x03	; 3
    32cc:	6f 2b       	or	r22, r31
    32ce:	14 96       	adiw	r26, 0x04	; 4
    32d0:	6c 93       	st	X, r22
    32d2:	14 97       	sbiw	r26, 0x04	; 4
    32d4:	7e 2b       	or	r23, r30
    32d6:	15 96       	adiw	r26, 0x05	; 5
    32d8:	7c 93       	st	X, r23
    32da:	15 97       	sbiw	r26, 0x05	; 5
    32dc:	8f 29       	or	r24, r15
    32de:	16 96       	adiw	r26, 0x06	; 6
    32e0:	8c 93       	st	X, r24
    32e2:	16 97       	sbiw	r26, 0x06	; 6
    32e4:	91 2b       	or	r25, r17
    32e6:	17 96       	adiw	r26, 0x07	; 7
    32e8:	9c 93       	st	X, r25
    32ea:	81 e0       	ldi	r24, 0x01	; 1
		
		alt = (double) ((int16_t) (eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|ALT_ADDR_BYTE0)));
    32ec:	90 e1       	ldi	r25, 0x10	; 16
    32ee:	00 de       	rcall	.-1024   	; 0x2ef0 <eeprom_read>
    32f0:	18 2f       	mov	r17, r24
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	90 e1       	ldi	r25, 0x10	; 16
    32f6:	fc dd       	rcall	.-1032   	; 0x2ef0 <eeprom_read>
    32f8:	61 2f       	mov	r22, r17
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	76 2f       	mov	r23, r22
    32fe:	66 27       	eor	r22, r22
    3300:	68 2b       	or	r22, r24
    3302:	07 2e       	mov	r0, r23
    3304:	00 0c       	add	r0, r0
    3306:	88 0b       	sbc	r24, r24
    3308:	99 0b       	sbc	r25, r25
    330a:	0e 94 2e 22 	call	0x445c	; 0x445c <__floatsisf>
    330e:	60 93 57 21 	sts	0x2157, r22	; 0x802157 <alt>
    3312:	70 93 58 21 	sts	0x2158, r23	; 0x802158 <alt+0x1>
    3316:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <alt+0x2>
    331a:	90 93 5a 21 	sts	0x215A, r25	; 0x80215a <alt+0x3>
		timer = (uint16_t) (eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|TIME_ADDR_BYTE0));
    331e:	87 e0       	ldi	r24, 0x07	; 7
    3320:	90 e1       	ldi	r25, 0x10	; 16
    3322:	e6 dd       	rcall	.-1076   	; 0x2ef0 <eeprom_read>
    3324:	18 2f       	mov	r17, r24
    3326:	86 e0       	ldi	r24, 0x06	; 6
    3328:	90 e1       	ldi	r25, 0x10	; 16
    332a:	e2 dd       	rcall	.-1084   	; 0x2ef0 <eeprom_read>
    332c:	21 2f       	mov	r18, r17
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	32 2f       	mov	r19, r18
    3332:	22 27       	eor	r18, r18
    3334:	28 2b       	or	r18, r24
    3336:	20 93 67 21 	sts	0x2167, r18	; 0x802167 <timer>
    333a:	30 93 68 21 	sts	0x2168, r19	; 0x802168 <timer+0x1>
    333e:	84 e0       	ldi	r24, 0x04	; 4
    3340:	90 e1       	ldi	r25, 0x10	; 16
		packets = (uint16_t) (eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE1)<<8 | eeprom_read(EEPROM_PAGE|PACKET_ADDR_BYTE0));
    3342:	d6 dd       	rcall	.-1108   	; 0x2ef0 <eeprom_read>
    3344:	18 2f       	mov	r17, r24
    3346:	83 e0       	ldi	r24, 0x03	; 3
    3348:	90 e1       	ldi	r25, 0x10	; 16
    334a:	d2 dd       	rcall	.-1116   	; 0x2ef0 <eeprom_read>
    334c:	21 2f       	mov	r18, r17
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	32 2f       	mov	r19, r18
    3352:	22 27       	eor	r18, r18
    3354:	28 2b       	or	r18, r24
    3356:	20 93 63 21 	sts	0x2163, r18	; 0x802163 <packets>
    335a:	30 93 64 21 	sts	0x2164, r19	; 0x802164 <packets+0x1>
    335e:	60 91 27 20 	lds	r22, 0x2027	; 0x802027 <ground_t>
    3362:	70 91 28 20 	lds	r23, 0x2028	; 0x802028 <ground_t+0x1>

		printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
    3366:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <ground_t+0x2>
    336a:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <ground_t+0x3>
    336e:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    3372:	7f 93       	push	r23
    3374:	6f 93       	push	r22
    3376:	60 91 2b 20 	lds	r22, 0x202B	; 0x80202b <ground_p>
    337a:	70 91 2c 20 	lds	r23, 0x202C	; 0x80202c <ground_p+0x1>
    337e:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <ground_p+0x2>
    3382:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <ground_p+0x3>
    3386:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fixsfsi>
    338a:	9f 93       	push	r25
    338c:	8f 93       	push	r24
    338e:	7f 93       	push	r23
    3390:	6f 93       	push	r22
    3392:	88 e5       	ldi	r24, 0x58	; 88
    3394:	90 e2       	ldi	r25, 0x20	; 32
    3396:	9f 93       	push	r25
    3398:	8f 93       	push	r24
    339a:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <printf>
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	de bf       	out	0x3e, r29	; 62
	// Check EEPROM

	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);

	if(b1 == b2 && b1 != 0xFF){
    33a2:	17 c0       	rjmp	.+46     	; 0x33d2 <system_init+0x4b6>
    33a4:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <get_pressure>

		printf("Ground Pressure: %li\nGround Temperature: %i\n", (int32_t) ground_p, (int16_t) ground_t);
	}
	else{
		// Initialization of variables
		ground_p = get_pressure();
    33a8:	60 93 2b 20 	sts	0x202B, r22	; 0x80202b <ground_p>
    33ac:	70 93 2c 20 	sts	0x202C, r23	; 0x80202c <ground_p+0x1>
    33b0:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p+0x2>
    33b4:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x3>
    33b8:	83 e3       	ldi	r24, 0x33	; 51
    33ba:	93 e1       	ldi	r25, 0x13	; 19
		ground_t = get_temperature();
    33bc:	a5 e9       	ldi	r26, 0x95	; 149
    33be:	b3 e4       	ldi	r27, 0x43	; 67
    33c0:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <ground_t>
    33c4:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <ground_t+0x1>
    33c8:	a0 93 29 20 	sts	0x2029, r26	; 0x802029 <ground_t+0x2>
    33cc:	b0 93 2a 20 	sts	0x202A, r27	; 0x80202a <ground_t+0x3>
    33d0:	5f dc       	rcall	.-1858   	; 0x2c90 <eeprom_write_const>
    33d2:	0d d8       	rcall	.-4070   	; 0x23ee <state_check>

		eeprom_write_const();
    33d4:	27 96       	adiw	r28, 0x07	; 7
    33d6:	cd bf       	out	0x3d, r28	; 61
	}

	state_check();
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	df 91       	pop	r29
}
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	df 90       	pop	r13
    33e8:	cf 90       	pop	r12
    33ea:	bf 90       	pop	r11
    33ec:	af 90       	pop	r10
    33ee:	9f 90       	pop	r9
    33f0:	8f 90       	pop	r8
    33f2:	7f 90       	pop	r7
    33f4:	6f 90       	pop	r6
    33f6:	5f 90       	pop	r5
    33f8:	4f 90       	pop	r4
    33fa:	3f 90       	pop	r3
    33fc:	2f 90       	pop	r2
    33fe:	08 95       	ret

00003400 <eeprom_write>:
    3400:	0f 93       	push	r16
    3402:	1f 93       	push	r17
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

void eeprom_write(void){
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
    340c:	a0 97       	sbiw	r28, 0x20	; 32
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	de bf       	out	0x3e, r29	; 62
	uint16_t a = (uint16_t) ((int16_t) alt); // creates an unsigned int of the altitude
    3412:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <alt>
    3416:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <alt+0x1>
    341a:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <alt+0x2>
    341e:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <alt+0x3>
    3422:	e9 d7       	rcall	.+4050   	; 0x43f6 <__fixsfsi>
    3424:	16 2f       	mov	r17, r22
    3426:	07 2f       	mov	r16, r23
	uint16_t v = (uint16_t) ((int16_t) velocity);
    3428:	60 91 4f 21 	lds	r22, 0x214F	; 0x80214f <velocity>
    342c:	70 91 50 21 	lds	r23, 0x2150	; 0x802150 <velocity+0x1>
    3430:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <velocity+0x2>
    3434:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <velocity+0x3>
    3438:	de d7       	rcall	.+4028   	; 0x43f6 <__fixsfsi>
    343a:	26 2f       	mov	r18, r22
    343c:	37 2f       	mov	r19, r23

	check_write = (check_write + 1) % 100;
    343e:	80 91 69 21 	lds	r24, 0x2169	; 0x802169 <check_write>
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	64 e6       	ldi	r22, 0x64	; 100
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	0e 94 cd 24 	call	0x499a	; 0x499a <__divmodhi4>
    344e:	80 93 69 21 	sts	0x2169, r24	; 0x802169 <check_write>
	
	// saves data and addresses in array
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write};
    3452:	a0 91 63 21 	lds	r26, 0x2163	; 0x802163 <packets>
    3456:	b0 91 64 21 	lds	r27, 0x2164	; 0x802164 <packets+0x1>
    345a:	e0 91 63 21 	lds	r30, 0x2163	; 0x802163 <packets>
    345e:	f0 91 64 21 	lds	r31, 0x2164	; 0x802164 <packets+0x1>
    3462:	60 91 67 21 	lds	r22, 0x2167	; 0x802167 <timer>
    3466:	70 91 68 21 	lds	r23, 0x2168	; 0x802168 <timer+0x1>
    346a:	40 91 67 21 	lds	r20, 0x2167	; 0x802167 <timer>
    346e:	50 91 68 21 	lds	r21, 0x2168	; 0x802168 <timer+0x1>
    3472:	09 83       	std	Y+1, r16	; 0x01
    3474:	1a 83       	std	Y+2, r17	; 0x02
    3476:	bb 83       	std	Y+3, r27	; 0x03
    3478:	ec 83       	std	Y+4, r30	; 0x04
    347a:	7d 83       	std	Y+5, r23	; 0x05
    347c:	4e 83       	std	Y+6, r20	; 0x06
    347e:	3f 83       	std	Y+7, r19	; 0x07
    3480:	28 87       	std	Y+8, r18	; 0x08
    3482:	89 87       	std	Y+9, r24	; 0x09
    3484:	8a 87       	std	Y+10, r24	; 0x0a
    3486:	8a e0       	ldi	r24, 0x0A	; 10
    3488:	fe 01       	movw	r30, r28
    348a:	31 96       	adiw	r30, 0x01	; 1
    348c:	de 01       	movw	r26, r28
    348e:	1b 96       	adiw	r26, 0x0b	; 11
    3490:	01 90       	ld	r0, Z+
    3492:	0d 92       	st	X+, r0
    3494:	8a 95       	dec	r24
    3496:	e1 f7       	brne	.-8      	; 0x3490 <eeprom_write+0x90>
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1};
    3498:	8a e0       	ldi	r24, 0x0A	; 10
    349a:	ef e3       	ldi	r30, 0x3F	; 63
    349c:	f0 e2       	ldi	r31, 0x20	; 32
    349e:	de 01       	movw	r26, r28
    34a0:	55 96       	adiw	r26, 0x15	; 21
    34a2:	01 90       	ld	r0, Z+
    34a4:	0d 92       	st	X+, r0
    34a6:	8a 95       	dec	r24
    34a8:	e1 f7       	brne	.-8      	; 0x34a2 <eeprom_write+0xa2>

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
    34aa:	83 e3       	ldi	r24, 0x33	; 51
    34ac:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < 10; i++){
		NVM.ADDR0 = addresses[i];
    34b4:	e0 ec       	ldi	r30, 0xC0	; 192
    34b6:	f1 e0       	ldi	r31, 0x01	; 1
    34b8:	a5 e1       	ldi	r26, 0x15	; 21
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	ac 0f       	add	r26, r28
    34be:	bd 1f       	adc	r27, r29
    34c0:	a8 0f       	add	r26, r24
    34c2:	b9 1f       	adc	r27, r25
    34c4:	2c 91       	ld	r18, X
    34c6:	20 83       	st	Z, r18
		NVM.DATA0 = data[i];
    34c8:	ab e0       	ldi	r26, 0x0B	; 11
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	ac 0f       	add	r26, r28
    34ce:	bd 1f       	adc	r27, r29
    34d0:	a8 0f       	add	r26, r24
    34d2:	b9 1f       	adc	r27, r25
    34d4:	2c 91       	ld	r18, X
    34d6:	24 83       	std	Z+4, r18	; 0x04
    34d8:	01 96       	adiw	r24, 0x01	; 1
	volatile uint8_t data[] = {a >> 8, a & 0xFF, packets >> 8, packets & 0xFF, timer >> 8, timer & 0xFF, v >> 8, v & 0xFF, check_write, check_write};
	volatile uint8_t addresses[] = {ALT_ADDR_BYTE1, ALT_ADDR_BYTE0, PACKET_ADDR_BYTE1, PACKET_ADDR_BYTE0, TIME_ADDR_BYTE1, TIME_ADDR_BYTE0, VEL_ADDR_BYTE1, VEL_ADDR_BYTE0, CHECK_WRITE_BYTE0, CHECK_WRITE_BYTE1};

	// Writes the NVM Registers to write the buffer
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 10; i++){
    34da:	8a 30       	cpi	r24, 0x0A	; 10
    34dc:	91 05       	cpc	r25, r1
    34de:	61 f7       	brne	.-40     	; 0x34b8 <eeprom_write+0xb8>
		NVM.ADDR0 = addresses[i];
		NVM.DATA0 = data[i];
	}

	// Erases and writes the page buffer
	NVM.CMD = ATOMIC_WRITE_CMD;
    34e0:	e0 ec       	ldi	r30, 0xC0	; 192
    34e2:	f1 e0       	ldi	r31, 0x01	; 1
    34e4:	85 e3       	ldi	r24, 0x35	; 53
    34e6:	82 87       	std	Z+10, r24	; 0x0a
	NVM.ADDR0 = EEPROM_PAGE & 0xFF;
    34e8:	10 82       	st	Z, r1
	NVM.ADDR1 = EEPROM_PAGE >> 8;
    34ea:	80 e1       	ldi	r24, 0x10	; 16
    34ec:	81 83       	std	Z+1, r24	; 0x01
	CCP = CCP_IOREG_MODE;
    34ee:	88 ed       	ldi	r24, 0xD8	; 216
    34f0:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    34f6:	87 85       	ldd	r24, Z+15	; 0x0f
    34f8:	88 23       	and	r24, r24
    34fa:	ec f3       	brlt	.-6      	; 0x34f6 <eeprom_write+0xf6>
	
	volatile uint8_t b1 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE0);
    34fc:	82 e0       	ldi	r24, 0x02	; 2
    34fe:	90 e1       	ldi	r25, 0x10	; 16
    3500:	f7 dc       	rcall	.-1554   	; 0x2ef0 <eeprom_read>
    3502:	8f 8f       	std	Y+31, r24	; 0x1f
	volatile uint8_t b2 = eeprom_read(EEPROM_PAGE|CHECK_WRITE_BYTE1);
    3504:	8d e2       	ldi	r24, 0x2D	; 45
    3506:	90 e1       	ldi	r25, 0x10	; 16
    3508:	f3 dc       	rcall	.-1562   	; 0x2ef0 <eeprom_read>
    350a:	88 a3       	std	Y+32, r24	; 0x20
	
	printf("%u, %u\n",b1, b2);
    350c:	98 a1       	ldd	r25, Y+32	; 0x20
    350e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3510:	1f 92       	push	r1
    3512:	9f 93       	push	r25
    3514:	1f 92       	push	r1
    3516:	8f 93       	push	r24
    3518:	85 e8       	ldi	r24, 0x85	; 133
    351a:	90 e2       	ldi	r25, 0x20	; 32
    351c:	9f 93       	push	r25
    351e:	8f 93       	push	r24
    3520:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <printf>
}
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	a0 96       	adiw	r28, 0x20	; 32
    3532:	cd bf       	out	0x3d, r28	; 61
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	08 95       	ret

00003540 <time_update>:
	TCE0.CTRLA = 0x07; // divisor set to 1024 0x07
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void time_update(void){
    3540:	2f 92       	push	r2
    3542:	3f 92       	push	r3
    3544:	4f 92       	push	r4
    3546:	5f 92       	push	r5
    3548:	6f 92       	push	r6
    354a:	7f 92       	push	r7
    354c:	8f 92       	push	r8
    354e:	9f 92       	push	r9
    3550:	af 92       	push	r10
    3552:	bf 92       	push	r11
    3554:	cf 92       	push	r12
    3556:	df 92       	push	r13
    3558:	ef 92       	push	r14
    355a:	ff 92       	push	r15
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
    3568:	ef 97       	sbiw	r28, 0x3f	; 63
    356a:	cd bf       	out	0x3d, r28	; 61
    356c:	de bf       	out	0x3e, r29	; 62
	packets++;
    356e:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <packets>
    3572:	90 91 64 21 	lds	r25, 0x2164	; 0x802164 <packets+0x1>
    3576:	01 96       	adiw	r24, 0x01	; 1
    3578:	80 93 63 21 	sts	0x2163, r24	; 0x802163 <packets>
    357c:	90 93 64 21 	sts	0x2164, r25	; 0x802164 <packets+0x1>

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    3580:	60 91 2d 21 	lds	r22, 0x212D	; 0x80212d <angle>
    3584:	70 91 2e 21 	lds	r23, 0x212E	; 0x80212e <angle+0x1>
    3588:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <angle+0x2>
    358c:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <angle+0x3>
    3590:	20 91 83 21 	lds	r18, 0x2183	; 0x802183 <state>
    3594:	29 83       	std	Y+1, r18	; 0x01
    3596:	40 90 31 21 	lds	r4, 0x2131	; 0x802131 <rpm>
    359a:	50 90 32 21 	lds	r5, 0x2132	; 0x802132 <rpm+0x1>
    359e:	60 90 33 21 	lds	r6, 0x2133	; 0x802133 <rpm+0x2>
    35a2:	70 90 34 21 	lds	r7, 0x2134	; 0x802134 <rpm+0x3>
    35a6:	80 90 35 21 	lds	r8, 0x2135	; 0x802135 <roll>
    35aa:	90 90 36 21 	lds	r9, 0x2136	; 0x802136 <roll+0x1>
    35ae:	a0 90 37 21 	lds	r10, 0x2137	; 0x802137 <roll+0x2>
    35b2:	b0 90 38 21 	lds	r11, 0x2138	; 0x802138 <roll+0x3>
    35b6:	c0 90 39 21 	lds	r12, 0x2139	; 0x802139 <pitch>
    35ba:	d0 90 3a 21 	lds	r13, 0x213A	; 0x80213a <pitch+0x1>
    35be:	e0 90 3b 21 	lds	r14, 0x213B	; 0x80213b <pitch+0x2>
    35c2:	f0 90 3c 21 	lds	r15, 0x213C	; 0x80213c <pitch+0x3>
    35c6:	40 91 3d 21 	lds	r20, 0x213D	; 0x80213d <gps_sats>
    35ca:	50 91 3e 21 	lds	r21, 0x213E	; 0x80213e <gps_sats+0x1>
    35ce:	4e af       	std	Y+62, r20	; 0x3e
    35d0:	5f af       	std	Y+63, r21	; 0x3f
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    35d2:	20 91 3f 21 	lds	r18, 0x213F	; 0x80213f <gps_alt>
    35d6:	30 91 40 21 	lds	r19, 0x2140	; 0x802140 <gps_alt+0x1>
    35da:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <gps_alt+0x2>
    35de:	50 91 42 21 	lds	r21, 0x2142	; 0x802142 <gps_alt+0x3>
    35e2:	2a 83       	std	Y+2, r18	; 0x02
    35e4:	3b 83       	std	Y+3, r19	; 0x03
    35e6:	4c 83       	std	Y+4, r20	; 0x04
    35e8:	5d 83       	std	Y+5, r21	; 0x05
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    35ea:	20 91 3f 21 	lds	r18, 0x213F	; 0x80213f <gps_alt>
    35ee:	30 91 40 21 	lds	r19, 0x2140	; 0x802140 <gps_alt+0x1>
    35f2:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <gps_alt+0x2>
    35f6:	50 91 42 21 	lds	r21, 0x2142	; 0x802142 <gps_alt+0x3>
    35fa:	2e 83       	std	Y+6, r18	; 0x06
    35fc:	3f 83       	std	Y+7, r19	; 0x07
    35fe:	48 87       	std	Y+8, r20	; 0x08
    3600:	59 87       	std	Y+9, r21	; 0x09
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    3602:	20 91 43 21 	lds	r18, 0x2143	; 0x802143 <gps_long>
    3606:	30 91 44 21 	lds	r19, 0x2144	; 0x802144 <gps_long+0x1>
    360a:	40 91 45 21 	lds	r20, 0x2145	; 0x802145 <gps_long+0x2>
    360e:	50 91 46 21 	lds	r21, 0x2146	; 0x802146 <gps_long+0x3>
    3612:	2a 87       	std	Y+10, r18	; 0x0a
    3614:	3b 87       	std	Y+11, r19	; 0x0b
    3616:	4c 87       	std	Y+12, r20	; 0x0c
    3618:	5d 87       	std	Y+13, r21	; 0x0d
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    361a:	20 91 43 21 	lds	r18, 0x2143	; 0x802143 <gps_long>
    361e:	30 91 44 21 	lds	r19, 0x2144	; 0x802144 <gps_long+0x1>
    3622:	40 91 45 21 	lds	r20, 0x2145	; 0x802145 <gps_long+0x2>
    3626:	50 91 46 21 	lds	r21, 0x2146	; 0x802146 <gps_long+0x3>
    362a:	2e 87       	std	Y+14, r18	; 0x0e
    362c:	3f 87       	std	Y+15, r19	; 0x0f
    362e:	48 8b       	std	Y+16, r20	; 0x10
    3630:	59 8b       	std	Y+17, r21	; 0x11
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    3632:	20 91 47 21 	lds	r18, 0x2147	; 0x802147 <gps_lat>
    3636:	30 91 48 21 	lds	r19, 0x2148	; 0x802148 <gps_lat+0x1>
    363a:	40 91 49 21 	lds	r20, 0x2149	; 0x802149 <gps_lat+0x2>
    363e:	50 91 4a 21 	lds	r21, 0x214A	; 0x80214a <gps_lat+0x3>
    3642:	2a 8b       	std	Y+18, r18	; 0x12
    3644:	3b 8b       	std	Y+19, r19	; 0x13
    3646:	4c 8b       	std	Y+20, r20	; 0x14
    3648:	5d 8b       	std	Y+21, r21	; 0x15
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    364a:	20 91 47 21 	lds	r18, 0x2147	; 0x802147 <gps_lat>
    364e:	30 91 48 21 	lds	r19, 0x2148	; 0x802148 <gps_lat+0x1>
    3652:	40 91 49 21 	lds	r20, 0x2149	; 0x802149 <gps_lat+0x2>
    3656:	50 91 4a 21 	lds	r21, 0x214A	; 0x80214a <gps_lat+0x3>
    365a:	2e 8b       	std	Y+22, r18	; 0x16
    365c:	3f 8b       	std	Y+23, r19	; 0x17
    365e:	48 8f       	std	Y+24, r20	; 0x18
    3660:	59 8f       	std	Y+25, r21	; 0x19
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    3662:	20 91 4b 21 	lds	r18, 0x214B	; 0x80214b <gps_t>
    3666:	30 91 4c 21 	lds	r19, 0x214C	; 0x80214c <gps_t+0x1>
    366a:	40 91 4d 21 	lds	r20, 0x214D	; 0x80214d <gps_t+0x2>
    366e:	50 91 4e 21 	lds	r21, 0x214E	; 0x80214e <gps_t+0x3>
    3672:	2a 8f       	std	Y+26, r18	; 0x1a
    3674:	3b 8f       	std	Y+27, r19	; 0x1b
    3676:	4c 8f       	std	Y+28, r20	; 0x1c
    3678:	5d 8f       	std	Y+29, r21	; 0x1d
    367a:	20 91 4b 21 	lds	r18, 0x214B	; 0x80214b <gps_t>
    367e:	30 91 4c 21 	lds	r19, 0x214C	; 0x80214c <gps_t+0x1>
    3682:	40 91 4d 21 	lds	r20, 0x214D	; 0x80214d <gps_t+0x2>
    3686:	50 91 4e 21 	lds	r21, 0x214E	; 0x80214e <gps_t+0x3>
    368a:	2e 8f       	std	Y+30, r18	; 0x1e
    368c:	3f 8f       	std	Y+31, r19	; 0x1f
    368e:	48 a3       	std	Y+32, r20	; 0x20
    3690:	59 a3       	std	Y+33, r21	; 0x21
    3692:	20 91 4b 21 	lds	r18, 0x214B	; 0x80214b <gps_t>
    3696:	30 91 4c 21 	lds	r19, 0x214C	; 0x80214c <gps_t+0x1>
    369a:	40 91 4d 21 	lds	r20, 0x214D	; 0x80214d <gps_t+0x2>
    369e:	50 91 4e 21 	lds	r21, 0x214E	; 0x80214e <gps_t+0x3>
    36a2:	2a a3       	std	Y+34, r18	; 0x22
    36a4:	3b a3       	std	Y+35, r19	; 0x23
    36a6:	4c a3       	std	Y+36, r20	; 0x24
    36a8:	5d a3       	std	Y+37, r21	; 0x25
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
    36aa:	20 91 53 21 	lds	r18, 0x2153	; 0x802153 <volt>
    36ae:	30 91 54 21 	lds	r19, 0x2154	; 0x802154 <volt+0x1>
    36b2:	40 91 55 21 	lds	r20, 0x2155	; 0x802155 <volt+0x2>
    36b6:	50 91 56 21 	lds	r21, 0x2156	; 0x802156 <volt+0x3>
    36ba:	2e a3       	std	Y+38, r18	; 0x26
    36bc:	3f a3       	std	Y+39, r19	; 0x27
    36be:	48 a7       	std	Y+40, r20	; 0x28
    36c0:	59 a7       	std	Y+41, r21	; 0x29
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    36c2:	20 91 53 21 	lds	r18, 0x2153	; 0x802153 <volt>
    36c6:	30 91 54 21 	lds	r19, 0x2154	; 0x802154 <volt+0x1>
    36ca:	40 91 55 21 	lds	r20, 0x2155	; 0x802155 <volt+0x2>
    36ce:	50 91 56 21 	lds	r21, 0x2156	; 0x802156 <volt+0x3>
    36d2:	2a a7       	std	Y+42, r18	; 0x2a
    36d4:	3b a7       	std	Y+43, r19	; 0x2b
    36d6:	4c a7       	std	Y+44, r20	; 0x2c
    36d8:	5d a7       	std	Y+45, r21	; 0x2d
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				((int16_t) (temp * 10 - 2731.5))%10,			(int16_t)volt,		(int16_t) (volt * 10) % 10,
    36da:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <temp>
    36de:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <temp+0x1>
    36e2:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <temp+0x2>
    36e6:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <temp+0x3>
    36ea:	2e a7       	std	Y+46, r18	; 0x2e
    36ec:	3f a7       	std	Y+47, r19	; 0x2f
    36ee:	48 ab       	std	Y+48, r20	; 0x30
    36f0:	59 ab       	std	Y+49, r21	; 0x31
    36f2:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <temp>
    36f6:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <temp+0x1>
    36fa:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <temp+0x2>
    36fe:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <temp+0x3>
    3702:	2a ab       	std	Y+50, r18	; 0x32
    3704:	3b ab       	std	Y+51, r19	; 0x33
    3706:	4c ab       	std	Y+52, r20	; 0x34
    3708:	5d ab       	std	Y+53, r21	; 0x35
void time_update(void){
	packets++;

	//printf("%i.%i, %i, %li, %i\n", timer/10, timer%10, (int16_t) alt, (int32_t) press, (int16_t) velocity);

	sprintf(str,format,timer,packets,
    370a:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <press>
    370e:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <press+0x1>
    3712:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <press+0x2>
    3716:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <press+0x3>
    371a:	2e ab       	std	Y+54, r18	; 0x36
    371c:	3f ab       	std	Y+55, r19	; 0x37
    371e:	48 af       	std	Y+56, r20	; 0x38
    3720:	59 af       	std	Y+57, r21	; 0x39
    3722:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <alt>
    3726:	30 91 58 21 	lds	r19, 0x2158	; 0x802158 <alt+0x1>
    372a:	40 91 59 21 	lds	r20, 0x2159	; 0x802159 <alt+0x2>
    372e:	50 91 5a 21 	lds	r21, 0x215A	; 0x80215a <alt+0x3>
    3732:	2a af       	std	Y+58, r18	; 0x3a
    3734:	3b af       	std	Y+59, r19	; 0x3b
    3736:	4c af       	std	Y+60, r20	; 0x3c
    3738:	5d af       	std	Y+61, r21	; 0x3d
    373a:	20 90 63 21 	lds	r2, 0x2163	; 0x802163 <packets>
    373e:	30 90 64 21 	lds	r3, 0x2164	; 0x802164 <packets+0x1>
    3742:	00 91 67 21 	lds	r16, 0x2167	; 0x802167 <timer>
    3746:	10 91 68 21 	lds	r17, 0x2168	; 0x802168 <timer+0x1>
    374a:	55 d6       	rcall	.+3242   	; 0x43f6 <__fixsfsi>
    374c:	7f 93       	push	r23
    374e:	6f 93       	push	r22
    3750:	1f 92       	push	r1
    3752:	39 81       	ldd	r19, Y+1	; 0x01
    3754:	3f 93       	push	r19
    3756:	c3 01       	movw	r24, r6
    3758:	b2 01       	movw	r22, r4
    375a:	4d d6       	rcall	.+3226   	; 0x43f6 <__fixsfsi>
    375c:	7f 93       	push	r23
    375e:	6f 93       	push	r22
    3760:	c5 01       	movw	r24, r10
    3762:	b4 01       	movw	r22, r8
    3764:	48 d6       	rcall	.+3216   	; 0x43f6 <__fixsfsi>
    3766:	7f 93       	push	r23
    3768:	6f 93       	push	r22
    376a:	c7 01       	movw	r24, r14
    376c:	b6 01       	movw	r22, r12
    376e:	43 d6       	rcall	.+3206   	; 0x43f6 <__fixsfsi>
    3770:	7f 93       	push	r23
    3772:	6f 93       	push	r22
    3774:	4f ad       	ldd	r20, Y+63	; 0x3f
    3776:	4f 93       	push	r20
    3778:	5e ad       	ldd	r21, Y+62	; 0x3e
    377a:	5f 93       	push	r21
    377c:	6a 81       	ldd	r22, Y+2	; 0x02
    377e:	7b 81       	ldd	r23, Y+3	; 0x03
    3780:	8c 81       	ldd	r24, Y+4	; 0x04
    3782:	9d 81       	ldd	r25, Y+5	; 0x05
    3784:	38 d6       	rcall	.+3184   	; 0x43f6 <__fixsfsi>
    3786:	9b 01       	movw	r18, r22
    3788:	22 0f       	add	r18, r18
    378a:	33 1f       	adc	r19, r19
    378c:	66 0f       	add	r22, r22
    378e:	77 1f       	adc	r23, r23
    3790:	66 0f       	add	r22, r22
    3792:	77 1f       	adc	r23, r23
    3794:	66 0f       	add	r22, r22
    3796:	77 1f       	adc	r23, r23
    3798:	c9 01       	movw	r24, r18
    379a:	86 0f       	add	r24, r22
    379c:	97 1f       	adc	r25, r23
    379e:	6a e0       	ldi	r22, 0x0A	; 10
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	0e 94 cd 24 	call	0x499a	; 0x499a <__divmodhi4>
    37a6:	9f 93       	push	r25
    37a8:	8f 93       	push	r24
    37aa:	6e 81       	ldd	r22, Y+6	; 0x06
    37ac:	7f 81       	ldd	r23, Y+7	; 0x07
    37ae:	88 85       	ldd	r24, Y+8	; 0x08
    37b0:	99 85       	ldd	r25, Y+9	; 0x09
    37b2:	21 d6       	rcall	.+3138   	; 0x43f6 <__fixsfsi>
    37b4:	7f 93       	push	r23
    37b6:	6f 93       	push	r22
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	34 e2       	ldi	r19, 0x24	; 36
    37bc:	44 e7       	ldi	r20, 0x74	; 116
    37be:	59 e4       	ldi	r21, 0x49	; 73
    37c0:	6a 85       	ldd	r22, Y+10	; 0x0a
    37c2:	7b 85       	ldd	r23, Y+11	; 0x0b
    37c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    37c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    37c8:	fd d6       	rcall	.+3578   	; 0x45c4 <__mulsf3>
    37ca:	15 d6       	rcall	.+3114   	; 0x43f6 <__fixsfsi>
    37cc:	20 e4       	ldi	r18, 0x40	; 64
    37ce:	32 e4       	ldi	r19, 0x42	; 66
    37d0:	4f e0       	ldi	r20, 0x0F	; 15
    37d2:	50 e0       	ldi	r21, 0x00	; 0
    37d4:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    37d8:	9b 01       	movw	r18, r22
    37da:	77 23       	and	r23, r23
    37dc:	24 f4       	brge	.+8      	; 0x37e6 <time_update+0x2a6>
    37de:	22 27       	eor	r18, r18
    37e0:	33 27       	eor	r19, r19
    37e2:	26 1b       	sub	r18, r22
    37e4:	37 0b       	sbc	r19, r23
    37e6:	c9 01       	movw	r24, r18
    37e8:	33 0f       	add	r19, r19
    37ea:	aa 0b       	sbc	r26, r26
    37ec:	bb 0b       	sbc	r27, r27
    37ee:	bf 93       	push	r27
    37f0:	af 93       	push	r26
    37f2:	9f 93       	push	r25
    37f4:	8f 93       	push	r24
    37f6:	6e 85       	ldd	r22, Y+14	; 0x0e
    37f8:	7f 85       	ldd	r23, Y+15	; 0x0f
    37fa:	88 89       	ldd	r24, Y+16	; 0x10
    37fc:	99 89       	ldd	r25, Y+17	; 0x11
    37fe:	fb d5       	rcall	.+3062   	; 0x43f6 <__fixsfsi>
    3800:	7f 93       	push	r23
    3802:	6f 93       	push	r22
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	34 e2       	ldi	r19, 0x24	; 36
    3808:	44 e7       	ldi	r20, 0x74	; 116
    380a:	59 e4       	ldi	r21, 0x49	; 73
    380c:	6a 89       	ldd	r22, Y+18	; 0x12
    380e:	7b 89       	ldd	r23, Y+19	; 0x13
    3810:	8c 89       	ldd	r24, Y+20	; 0x14
    3812:	9d 89       	ldd	r25, Y+21	; 0x15
    3814:	d7 d6       	rcall	.+3502   	; 0x45c4 <__mulsf3>
    3816:	ef d5       	rcall	.+3038   	; 0x43f6 <__fixsfsi>
    3818:	20 e4       	ldi	r18, 0x40	; 64
    381a:	32 e4       	ldi	r19, 0x42	; 66
    381c:	4f e0       	ldi	r20, 0x0F	; 15
    381e:	50 e0       	ldi	r21, 0x00	; 0
    3820:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    3824:	9f 93       	push	r25
    3826:	8f 93       	push	r24
    3828:	7f 93       	push	r23
    382a:	6f 93       	push	r22
    382c:	6e 89       	ldd	r22, Y+22	; 0x16
    382e:	7f 89       	ldd	r23, Y+23	; 0x17
    3830:	88 8d       	ldd	r24, Y+24	; 0x18
    3832:	99 8d       	ldd	r25, Y+25	; 0x19
    3834:	e0 d5       	rcall	.+3008   	; 0x43f6 <__fixsfsi>
    3836:	7f 93       	push	r23
    3838:	6f 93       	push	r22
    383a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    383c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    383e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3840:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3842:	d9 d5       	rcall	.+2994   	; 0x43f6 <__fixsfsi>
    3844:	0f 2e       	mov	r0, r31
    3846:	f4 e6       	ldi	r31, 0x64	; 100
    3848:	cf 2e       	mov	r12, r31
    384a:	d1 2c       	mov	r13, r1
    384c:	e1 2c       	mov	r14, r1
    384e:	f1 2c       	mov	r15, r1
    3850:	f0 2d       	mov	r31, r0
    3852:	a7 01       	movw	r20, r14
    3854:	96 01       	movw	r18, r12
    3856:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    385a:	7f 93       	push	r23
    385c:	6f 93       	push	r22
    385e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3860:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3862:	88 a1       	ldd	r24, Y+32	; 0x20
    3864:	99 a1       	ldd	r25, Y+33	; 0x21
    3866:	c7 d5       	rcall	.+2958   	; 0x43f6 <__fixsfsi>
    3868:	0f 2e       	mov	r0, r31
    386a:	f0 e1       	ldi	r31, 0x10	; 16
    386c:	8f 2e       	mov	r8, r31
    386e:	f7 e2       	ldi	r31, 0x27	; 39
    3870:	9f 2e       	mov	r9, r31
    3872:	a1 2c       	mov	r10, r1
    3874:	b1 2c       	mov	r11, r1
    3876:	f0 2d       	mov	r31, r0
    3878:	a5 01       	movw	r20, r10
    387a:	94 01       	movw	r18, r8
    387c:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    3880:	a7 01       	movw	r20, r14
    3882:	96 01       	movw	r18, r12
    3884:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    3888:	3f 93       	push	r19
    388a:	2f 93       	push	r18
    388c:	6a a1       	ldd	r22, Y+34	; 0x22
    388e:	7b a1       	ldd	r23, Y+35	; 0x23
    3890:	8c a1       	ldd	r24, Y+36	; 0x24
    3892:	9d a1       	ldd	r25, Y+37	; 0x25
    3894:	b0 d5       	rcall	.+2912   	; 0x43f6 <__fixsfsi>
    3896:	a5 01       	movw	r20, r10
    3898:	94 01       	movw	r18, r8
    389a:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__divmodsi4>
    389e:	3f 93       	push	r19
    38a0:	2f 93       	push	r18
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	40 e2       	ldi	r20, 0x20	; 32
    38a8:	51 e4       	ldi	r21, 0x41	; 65
    38aa:	6e a1       	ldd	r22, Y+38	; 0x26
    38ac:	7f a1       	ldd	r23, Y+39	; 0x27
    38ae:	88 a5       	ldd	r24, Y+40	; 0x28
    38b0:	99 a5       	ldd	r25, Y+41	; 0x29
    38b2:	88 d6       	rcall	.+3344   	; 0x45c4 <__mulsf3>
    38b4:	a0 d5       	rcall	.+2880   	; 0x43f6 <__fixsfsi>
    38b6:	cb 01       	movw	r24, r22
    38b8:	6a e0       	ldi	r22, 0x0A	; 10
    38ba:	70 e0       	ldi	r23, 0x00	; 0
    38bc:	0e 94 cd 24 	call	0x499a	; 0x499a <__divmodhi4>
    38c0:	9f 93       	push	r25
    38c2:	8f 93       	push	r24
    38c4:	6a a5       	ldd	r22, Y+42	; 0x2a
    38c6:	7b a5       	ldd	r23, Y+43	; 0x2b
    38c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    38ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    38cc:	94 d5       	rcall	.+2856   	; 0x43f6 <__fixsfsi>
    38ce:	7f 93       	push	r23
    38d0:	6f 93       	push	r22
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e2       	ldi	r20, 0x20	; 32
    38d8:	51 e4       	ldi	r21, 0x41	; 65
    38da:	6e a5       	ldd	r22, Y+46	; 0x2e
    38dc:	7f a5       	ldd	r23, Y+47	; 0x2f
    38de:	88 a9       	ldd	r24, Y+48	; 0x30
    38e0:	99 a9       	ldd	r25, Y+49	; 0x31
    38e2:	70 d6       	rcall	.+3296   	; 0x45c4 <__mulsf3>
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	38 eb       	ldi	r19, 0xB8	; 184
    38e8:	4a e2       	ldi	r20, 0x2A	; 42
    38ea:	55 e4       	ldi	r21, 0x45	; 69
    38ec:	b3 d4       	rcall	.+2406   	; 0x4254 <__subsf3>
    38ee:	83 d5       	rcall	.+2822   	; 0x43f6 <__fixsfsi>
    38f0:	cb 01       	movw	r24, r22
    38f2:	6a e0       	ldi	r22, 0x0A	; 10
    38f4:	70 e0       	ldi	r23, 0x00	; 0
    38f6:	0e 94 cd 24 	call	0x499a	; 0x499a <__divmodhi4>
    38fa:	9f 93       	push	r25
    38fc:	8f 93       	push	r24
    38fe:	23 e3       	ldi	r18, 0x33	; 51
    3900:	33 e9       	ldi	r19, 0x93	; 147
    3902:	48 e8       	ldi	r20, 0x88	; 136
    3904:	53 e4       	ldi	r21, 0x43	; 67
    3906:	6a a9       	ldd	r22, Y+50	; 0x32
    3908:	7b a9       	ldd	r23, Y+51	; 0x33
    390a:	8c a9       	ldd	r24, Y+52	; 0x34
    390c:	9d a9       	ldd	r25, Y+53	; 0x35
    390e:	a2 d4       	rcall	.+2372   	; 0x4254 <__subsf3>
    3910:	72 d5       	rcall	.+2788   	; 0x43f6 <__fixsfsi>
    3912:	7f 93       	push	r23
    3914:	6f 93       	push	r22
    3916:	6e a9       	ldd	r22, Y+54	; 0x36
    3918:	7f a9       	ldd	r23, Y+55	; 0x37
    391a:	88 ad       	ldd	r24, Y+56	; 0x38
    391c:	99 ad       	ldd	r25, Y+57	; 0x39
    391e:	6b d5       	rcall	.+2774   	; 0x43f6 <__fixsfsi>
    3920:	9f 93       	push	r25
    3922:	8f 93       	push	r24
    3924:	7f 93       	push	r23
    3926:	6f 93       	push	r22
    3928:	6a ad       	ldd	r22, Y+58	; 0x3a
    392a:	7b ad       	ldd	r23, Y+59	; 0x3b
    392c:	8c ad       	ldd	r24, Y+60	; 0x3c
    392e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3930:	62 d5       	rcall	.+2756   	; 0x43f6 <__fixsfsi>
    3932:	7f 93       	push	r23
    3934:	6f 93       	push	r22
    3936:	3f 92       	push	r3
    3938:	2f 92       	push	r2
    393a:	1f 93       	push	r17
    393c:	0f 93       	push	r16
    393e:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    3942:	8f 93       	push	r24
    3944:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    3948:	8f 93       	push	r24
    394a:	8b ec       	ldi	r24, 0xCB	; 203
    394c:	91 e2       	ldi	r25, 0x21	; 33
    394e:	9f 93       	push	r25
    3950:	8f 93       	push	r24
    3952:	0e 94 04 26 	call	0x4c08	; 0x4c08 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    3956:	cd bf       	out	0x3d, r28	; 61
    3958:	de bf       	out	0x3e, r29	; 62
    395a:	8b ec       	ldi	r24, 0xCB	; 203
    395c:	91 e2       	ldi	r25, 0x21	; 33
    395e:	9f 93       	push	r25
    3960:	8f 93       	push	r24
    3962:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <printf>
	eeprom_write();
    3966:	4c dd       	rcall	.-1384   	; 0x3400 <eeprom_write>
    3968:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <time_flag>

	time_flag = 0;
    396c:	0f 90       	pop	r0
}
    396e:	0f 90       	pop	r0
    3970:	ef 96       	adiw	r28, 0x3f	; 63
    3972:	cd bf       	out	0x3d, r28	; 61
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	1f 91       	pop	r17
    397c:	0f 91       	pop	r16
    397e:	ff 90       	pop	r15
    3980:	ef 90       	pop	r14
    3982:	df 90       	pop	r13
    3984:	cf 90       	pop	r12
    3986:	bf 90       	pop	r11
    3988:	af 90       	pop	r10
    398a:	9f 90       	pop	r9
    398c:	8f 90       	pop	r8
    398e:	7f 90       	pop	r7
    3990:	6f 90       	pop	r6
    3992:	5f 90       	pop	r5
    3994:	4f 90       	pop	r4
    3996:	3f 90       	pop	r3
    3998:	2f 90       	pop	r2
    399a:	08 95       	ret

0000399c <eeprom_erase>:
    399c:	83 e3       	ldi	r24, 0x33	; 51
	uint8_t byte = NVM.DATA0;
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
    399e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	for(uint8_t i = 0; i < 32; i++){
    39a2:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    39a4:	e0 ec       	ldi	r30, 0xC0	; 192
    39a6:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    39a8:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    39aa:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    39ac:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    39ae:	8f 5f       	subi	r24, 0xFF	; 255
    39b0:	80 32       	cpi	r24, 0x20	; 32
    39b2:	d9 f7       	brne	.-10     	; 0x39aa <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}

	NVM.CMD = ERASE_EEPROM;
    39b4:	e0 ec       	ldi	r30, 0xC0	; 192
    39b6:	f1 e0       	ldi	r31, 0x01	; 1
    39b8:	80 e3       	ldi	r24, 0x30	; 48
    39ba:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    39bc:	88 ed       	ldi	r24, 0xD8	; 216
    39be:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    39c4:	87 85       	ldd	r24, Z+15	; 0x0f
    39c6:	88 23       	and	r24, r24
    39c8:	ec f3       	brlt	.-6      	; 0x39c4 <eeprom_erase+0x28>
}
    39ca:	08 95       	ret

000039cc <reset>:
			break;
	}
}

void reset(void){
	eeprom_erase();
    39cc:	e7 df       	rcall	.-50     	; 0x399c <eeprom_erase>

	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    39ce:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    39d0:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    39d2:	98 ed       	ldi	r25, 0xD8	; 216
    39d4:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    39d6:	91 e0       	ldi	r25, 0x01	; 1
    39d8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    39dc:	8f bf       	out	0x3f, r24	; 63
    39de:	08 95       	ret

000039e0 <command>:
	//TCD1.PER = 1907; // 262Hz (middle C)
	TCD1.CCA = 92;
}

void command(uint8_t c){
	switch(c){
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	fc 01       	movw	r30, r24
    39e4:	e1 56       	subi	r30, 0x61	; 97
    39e6:	f1 09       	sbc	r31, r1
    39e8:	e3 31       	cpi	r30, 0x13	; 19
    39ea:	f1 05       	cpc	r31, r1
    39ec:	c8 f4       	brcc	.+50     	; 0x3a20 <command+0x40>
    39ee:	88 27       	eor	r24, r24
    39f0:	e2 50       	subi	r30, 0x02	; 2
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	8f 4f       	sbci	r24, 0xFF	; 255
    39f6:	0c 94 1e 25 	jmp	0x4a3c	; 0x4a3c <__tablejump2__>
		case RESET:
			reset();
    39fa:	e8 cf       	rjmp	.-48     	; 0x39cc <reset>
			break;
    39fc:	08 95       	ret
		case CALIBRATE:
			calibrate();
    39fe:	0c 94 04 14 	jmp	0x2808	; 0x2808 <calibrate>
			break;
    3a02:	08 95       	ret
		case CALIBRATE_ALTITUDE:
			cali_alt();
    3a04:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <cali_alt>
			break;
    3a08:	08 95       	ret
		case CALIBRATE_ANGLE:
			cali_ang();
    3a0a:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <cali_ang>
			break;
    3a0e:	08 95       	ret
		case SERVO_RELEASE:
			servo_release();
    3a10:	0c 94 07 14 	jmp	0x280e	; 0x280e <servo_release>
			break;
    3a14:	08 95       	ret
		case SERVO_CLOSE:
			servo_close();
    3a16:	0c 94 13 14 	jmp	0x2826	; 0x2826 <servo_close>
			break;
    3a1a:	08 95       	ret
		case PACKET:
			packet();
    3a1c:	0c 94 1e 14 	jmp	0x283c	; 0x283c <packet>
    3a20:	08 95       	ret

00003a22 <main>:

char* format = "5343,%i,%i,%i,%li,%i.%i,%i.%i,%02i:%02i:%02i,%i.%li,%i.%li,%i.%i,%i,%i,%i,%i,%i,%i\n";


////////////////////////////// Functions ///////////////////////////////
int main(void){
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	c8 56       	subi	r28, 0x68	; 104
    3a2c:	d1 09       	sbc	r29, r1
    3a2e:	cd bf       	out	0x3d, r28	; 61
    3a30:	de bf       	out	0x3e, r29	; 62
	system_init();
    3a32:	74 da       	rcall	.-2840   	; 0x2f1c <system_init>
	//delay_ms(100);

	PORTD.DIR |= PIN3_bm;
    3a34:	e0 e6       	ldi	r30, 0x60	; 96
    3a36:	f6 e0       	ldi	r31, 0x06	; 6
    3a38:	80 81       	ld	r24, Z
    3a3a:	88 60       	ori	r24, 0x08	; 8
    3a3c:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm;
    3a3e:	84 81       	ldd	r24, Z+4	; 0x04
    3a40:	88 60       	ori	r24, 0x08	; 8
    3a42:	84 83       	std	Z+4, r24	; 0x04
	//PORTA.OUT |= 0x02;

	//printf("Initialized\n");
	//buzzer_init();

	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    3a44:	14 e1       	ldi	r17, 0x14	; 20
    3a46:	be 01       	movw	r22, r28
    3a48:	6f 5f       	subi	r22, 0xFF	; 255
    3a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4c:	fb 01       	movw	r30, r22
    3a4e:	81 2f       	mov	r24, r17
    3a50:	11 92       	st	Z+, r1
    3a52:	8a 95       	dec	r24
    3a54:	e9 f7       	brne	.-6      	; 0x3a50 <main+0x2e>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    3a56:	4a e0       	ldi	r20, 0x0A	; 10
    3a58:	50 e0       	ldi	r21, 0x00	; 0
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	45 96       	adiw	r24, 0x15	; 21
    3a5e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <rb16_init>

	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    3a62:	be 01       	movw	r22, r28
    3a64:	63 5e       	subi	r22, 0xE3	; 227
    3a66:	7f 4f       	sbci	r23, 0xFF	; 255
    3a68:	88 e2       	ldi	r24, 0x28	; 40
    3a6a:	fb 01       	movw	r30, r22
    3a6c:	11 92       	st	Z+, r1
    3a6e:	8a 95       	dec	r24
    3a70:	e9 f7       	brne	.-6      	; 0x3a6c <main+0x4a>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    3a72:	4a e0       	ldi	r20, 0x0A	; 10
    3a74:	50 e0       	ldi	r21, 0x00	; 0
    3a76:	ce 01       	movw	r24, r28
    3a78:	8b 5b       	subi	r24, 0xBB	; 187
    3a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <rb32_init>

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
    3a80:	be 01       	movw	r22, r28
    3a82:	63 5b       	subi	r22, 0xB3	; 179
    3a84:	7f 4f       	sbci	r23, 0xFF	; 255
    3a86:	fb 01       	movw	r30, r22
    3a88:	11 92       	st	Z+, r1
    3a8a:	1a 95       	dec	r17
    3a8c:	e9 f7       	brne	.-6      	; 0x3a88 <main+0x66>
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);
    3a8e:	4a e0       	ldi	r20, 0x0A	; 10
    3a90:	50 e0       	ldi	r21, 0x00	; 0
    3a92:	ce 01       	movw	r24, r28
    3a94:	8f 59       	subi	r24, 0x9F	; 159
    3a96:	9f 4f       	sbci	r25, 0xFF	; 255
    3a98:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <rb16_init>

	uint8_t cam_initialized = 0;
	uint8_t buzzer_initialized = 0;
    3a9c:	00 e0       	ldi	r16, 0x00	; 0

	int16_t direct_array[] = {0,0,0,0,0,0,0,0,0,0};
	RingBuffer16_t directions;	// in hundredths degrees
	rb16_init(&directions, direct_array, (uint16_t) 10);

	uint8_t cam_initialized = 0;
    3a9e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t buzzer_initialized = 0;
	//printf("Before Loop\n");


	while(1){
		printf("In Loop\n");
    3aa0:	8d e8       	ldi	r24, 0x8D	; 141
    3aa2:	90 e2       	ldi	r25, 0x20	; 32
    3aa4:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <puts>
		// Check Sensors
		data_collect(&altitudes,&pressures);
    3aa8:	be 01       	movw	r22, r28
    3aaa:	6b 5b       	subi	r22, 0xBB	; 187
    3aac:	7f 4f       	sbci	r23, 0xFF	; 255
    3aae:	ce 01       	movw	r24, r28
    3ab0:	45 96       	adiw	r24, 0x15	; 21
    3ab2:	0e 94 64 11 	call	0x22c8	; 0x22c8 <data_collect>

		state_check();
    3ab6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <state_check>

		// IMU Check
		//imu_read();

		//Gives each flight state their unique tasks
		switch(state){
    3aba:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <state>
    3abe:	81 30       	cpi	r24, 0x01	; 1
    3ac0:	31 f0       	breq	.+12     	; 0x3ace <main+0xac>
    3ac2:	c8 f1       	brcs	.+114    	; 0x3b36 <main+0x114>
    3ac4:	82 30       	cpi	r24, 0x02	; 2
    3ac6:	39 f0       	breq	.+14     	; 0x3ad6 <main+0xb4>
    3ac8:	83 30       	cpi	r24, 0x03	; 3
    3aca:	79 f1       	breq	.+94     	; 0x3b2a <main+0x108>
    3acc:	32 c0       	rjmp	.+100    	; 0x3b32 <main+0x110>
			case 0:
				break;
			case 1:
				if(!cam_initialized){
    3ace:	11 11       	cpse	r17, r1
    3ad0:	32 c0       	rjmp	.+100    	; 0x3b36 <main+0x114>
					cam_initialized = 1;
    3ad2:	11 e0       	ldi	r17, 0x01	; 1
    3ad4:	30 c0       	rjmp	.+96     	; 0x3b36 <main+0x114>
					//cam_switch();
				}
				break;
			case 2:
				if(!cam_initialized){
    3ad6:	11 11       	cpse	r17, r1
    3ad8:	01 c0       	rjmp	.+2      	; 0x3adc <main+0xba>
					cam_initialized = 1;
    3ada:	11 e0       	ldi	r17, 0x01	; 1
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
    3adc:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <alt>
    3ae0:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <alt+0x1>
    3ae4:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <alt+0x2>
    3ae8:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <alt+0x3>
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	41 ee       	ldi	r20, 0xE1	; 225
    3af2:	53 e4       	ldi	r21, 0x43	; 67
    3af4:	af d3       	rcall	.+1886   	; 0x4254 <__subsf3>
    3af6:	7f d4       	rcall	.+2302   	; 0x43f6 <__fixsfsi>
    3af8:	9b 01       	movw	r18, r22
    3afa:	77 23       	and	r23, r23
    3afc:	24 f4       	brge	.+8      	; 0x3b06 <main+0xe4>
    3afe:	22 27       	eor	r18, r18
    3b00:	33 27       	eor	r19, r19
    3b02:	26 1b       	sub	r18, r22
    3b04:	37 0b       	sbc	r19, r23
    3b06:	2a 30       	cpi	r18, 0x0A	; 10
    3b08:	31 05       	cpc	r19, r1
    3b0a:	2c f4       	brge	.+10     	; 0x3b16 <main+0xf4>
	ref_pitch = imu_pitch();
	ref_yaw = imu_heading();
}

void release(void){
	servo_release();
    3b0c:	0e 94 07 14 	call	0x280e	; 0x280e <servo_release>
					cam_initialized = 1;
					//cam_switch();
				}
				if(abs(alt-450)<EPSILON_ALTITUDE){
					release();				// Releases the payload
					hall_sensor_init();		// Starts hall effect sensor to read rpm
    3b10:	0e 94 1b 0b 	call	0x1636	; 0x1636 <hall_sensor_init>
    3b14:	10 c0       	rjmp	.+32     	; 0x3b36 <main+0x114>
				}
				else if(released){
    3b16:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <released>
    3b1a:	88 23       	and	r24, r24
    3b1c:	61 f0       	breq	.+24     	; 0x3b36 <main+0x114>
					servo_pid(&directions);	// Updates the PID
    3b1e:	ce 01       	movw	r24, r28
    3b20:	8f 59       	subi	r24, 0x9F	; 159
    3b22:	9f 4f       	sbci	r25, 0xFF	; 255
    3b24:	0e 94 21 13 	call	0x2642	; 0x2642 <servo_pid>
    3b28:	06 c0       	rjmp	.+12     	; 0x3b36 <main+0x114>
				}
				break;
			case 3:
				if(!buzzer_initialized){
    3b2a:	01 11       	cpse	r16, r1
    3b2c:	04 c0       	rjmp	.+8      	; 0x3b36 <main+0x114>
					//buzzer_init();
					buzzer_initialized = 1;
    3b2e:	01 e0       	ldi	r16, 0x01	; 1
    3b30:	02 c0       	rjmp	.+4      	; 0x3b36 <main+0x114>
				}
				break;
			default:
				state_check();
    3b32:	0e 94 f7 11 	call	0x23ee	; 0x23ee <state_check>
				break;
		}

		if(time_flag){
    3b36:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <time_flag>
    3b3a:	88 23       	and	r24, r24
			time_update();
    3b3c:	19 f0       	breq	.+6      	; 0x3b44 <main+0x122>
    3b3e:	00 dd       	rcall	.-1536   	; 0x3540 <time_update>
			time_flag = 0;
    3b40:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <time_flag>
		}
		if(xbee_flag){
    3b44:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <xbee_flag>
    3b48:	88 23       	and	r24, r24
			command(xbee_comm);
    3b4a:	39 f0       	breq	.+14     	; 0x3b5a <main+0x138>
    3b4c:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <xbee_comm>
    3b50:	47 df       	rcall	.-370    	; 0x39e0 <command>
			xbee_comm = 0;
    3b52:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <xbee_comm>
			xbee_flag = 0;
    3b56:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <xbee_flag>
		}

		data_packets++;
    3b5a:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <data_packets>
    3b5e:	90 91 66 21 	lds	r25, 0x2166	; 0x802166 <data_packets+0x1>
    3b62:	01 96       	adiw	r24, 0x01	; 1
    3b64:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <data_packets>
    3b68:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <data_packets+0x1>
		if(timer != 0){
    3b6c:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <timer>
    3b70:	90 91 68 21 	lds	r25, 0x2168	; 0x802168 <timer+0x1>
    3b74:	89 2b       	or	r24, r25
    3b76:	09 f4       	brne	.+2      	; 0x3b7a <main+0x158>
    3b78:	93 cf       	rjmp	.-218    	; 0x3aa0 <main+0x7e>
			rate = data_packets / timer;
    3b7a:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <data_packets>
    3b7e:	90 91 66 21 	lds	r25, 0x2166	; 0x802166 <data_packets+0x1>
    3b82:	60 91 67 21 	lds	r22, 0x2167	; 0x802167 <timer>
    3b86:	70 91 68 21 	lds	r23, 0x2168	; 0x802168 <timer+0x1>
    3b8a:	f3 d6       	rcall	.+3558   	; 0x4972 <__udivmodhi4>
    3b8c:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <rate>
    3b90:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <rate+0x1>
    3b94:	85 cf       	rjmp	.-246    	; 0x3aa0 <main+0x7e>

00003b96 <__vector_47>:
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}


ISR(TCE0_OVF_vect){
    3b96:	1f 92       	push	r1
    3b98:	0f 92       	push	r0
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	0f 92       	push	r0
    3b9e:	11 24       	eor	r1, r1
    3ba0:	08 b6       	in	r0, 0x38	; 56
    3ba2:	0f 92       	push	r0
    3ba4:	18 be       	out	0x38, r1	; 56
    3ba6:	8f 93       	push	r24
    3ba8:	9f 93       	push	r25
	timer++;
    3baa:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <timer>
    3bae:	90 91 68 21 	lds	r25, 0x2168	; 0x802168 <timer+0x1>
    3bb2:	01 96       	adiw	r24, 0x01	; 1
    3bb4:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <timer>
    3bb8:	90 93 68 21 	sts	0x2168, r25	; 0x802168 <timer+0x1>
	time_flag = 1;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <time_flag>
}
    3bc2:	9f 91       	pop	r25
    3bc4:	8f 91       	pop	r24
    3bc6:	0f 90       	pop	r0
    3bc8:	08 be       	out	0x38, r0	; 56
    3bca:	0f 90       	pop	r0
    3bcc:	0f be       	out	0x3f, r0	; 63
    3bce:	0f 90       	pop	r0
    3bd0:	1f 90       	pop	r1
    3bd2:	18 95       	reti

00003bd4 <__vector_58>:


ISR(USARTE0_RXC_vect){
    3bd4:	1f 92       	push	r1
    3bd6:	0f 92       	push	r0
    3bd8:	0f b6       	in	r0, 0x3f	; 63
    3bda:	0f 92       	push	r0
    3bdc:	11 24       	eor	r1, r1
    3bde:	08 b6       	in	r0, 0x38	; 56
    3be0:	0f 92       	push	r0
    3be2:	18 be       	out	0x38, r1	; 56
    3be4:	09 b6       	in	r0, 0x39	; 57
    3be6:	0f 92       	push	r0
    3be8:	19 be       	out	0x39, r1	; 57
    3bea:	0b b6       	in	r0, 0x3b	; 59
    3bec:	0f 92       	push	r0
    3bee:	1b be       	out	0x3b, r1	; 59
    3bf0:	2f 93       	push	r18
    3bf2:	3f 93       	push	r19
    3bf4:	4f 93       	push	r20
    3bf6:	5f 93       	push	r21
    3bf8:	6f 93       	push	r22
    3bfa:	7f 93       	push	r23
    3bfc:	8f 93       	push	r24
    3bfe:	9f 93       	push	r25
    3c00:	af 93       	push	r26
    3c02:	bf 93       	push	r27
    3c04:	ef 93       	push	r30
    3c06:	ff 93       	push	r31
	xbee_comm = usart_getchar(UART_TERMINAL_SERIAL);
    3c08:	80 ea       	ldi	r24, 0xA0	; 160
    3c0a:	9a e0       	ldi	r25, 0x0A	; 10
    3c0c:	0e 94 19 09 	call	0x1232	; 0x1232 <usart_getchar>
    3c10:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <xbee_comm>
	xbee_flag = 1;
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <xbee_flag>
}
    3c1a:	ff 91       	pop	r31
    3c1c:	ef 91       	pop	r30
    3c1e:	bf 91       	pop	r27
    3c20:	af 91       	pop	r26
    3c22:	9f 91       	pop	r25
    3c24:	8f 91       	pop	r24
    3c26:	7f 91       	pop	r23
    3c28:	6f 91       	pop	r22
    3c2a:	5f 91       	pop	r21
    3c2c:	4f 91       	pop	r20
    3c2e:	3f 91       	pop	r19
    3c30:	2f 91       	pop	r18
    3c32:	0f 90       	pop	r0
    3c34:	0b be       	out	0x3b, r0	; 59
    3c36:	0f 90       	pop	r0
    3c38:	09 be       	out	0x39, r0	; 57
    3c3a:	0f 90       	pop	r0
    3c3c:	08 be       	out	0x38, r0	; 56
    3c3e:	0f 90       	pop	r0
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	0f 90       	pop	r0
    3c44:	1f 90       	pop	r1
    3c46:	18 95       	reti

00003c48 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    3c48:	1f 92       	push	r1
    3c4a:	0f 92       	push	r0
    3c4c:	0f b6       	in	r0, 0x3f	; 63
    3c4e:	0f 92       	push	r0
    3c50:	11 24       	eor	r1, r1
    3c52:	08 b6       	in	r0, 0x38	; 56
    3c54:	0f 92       	push	r0
    3c56:	18 be       	out	0x38, r1	; 56
    3c58:	09 b6       	in	r0, 0x39	; 57
    3c5a:	0f 92       	push	r0
    3c5c:	19 be       	out	0x39, r1	; 57
    3c5e:	0a b6       	in	r0, 0x3a	; 58
    3c60:	0f 92       	push	r0
    3c62:	1a be       	out	0x3a, r1	; 58
    3c64:	0b b6       	in	r0, 0x3b	; 59
    3c66:	0f 92       	push	r0
    3c68:	1b be       	out	0x3b, r1	; 59
    3c6a:	8f 92       	push	r8
    3c6c:	9f 92       	push	r9
    3c6e:	af 92       	push	r10
    3c70:	bf 92       	push	r11
    3c72:	cf 92       	push	r12
    3c74:	df 92       	push	r13
    3c76:	ef 92       	push	r14
    3c78:	ff 92       	push	r15
    3c7a:	1f 93       	push	r17
    3c7c:	2f 93       	push	r18
    3c7e:	3f 93       	push	r19
    3c80:	4f 93       	push	r20
    3c82:	5f 93       	push	r21
    3c84:	6f 93       	push	r22
    3c86:	7f 93       	push	r23
    3c88:	8f 93       	push	r24
    3c8a:	9f 93       	push	r25
    3c8c:	af 93       	push	r26
    3c8e:	bf 93       	push	r27
    3c90:	ef 93       	push	r30
    3c92:	ff 93       	push	r31
    3c94:	cf 93       	push	r28
    3c96:	df 93       	push	r29
    3c98:	00 d0       	rcall	.+0      	; 0x3c9a <__vector_91+0x52>
    3c9a:	00 d0       	rcall	.+0      	; 0x3c9c <__vector_91+0x54>
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    3ca0:	80 eb       	ldi	r24, 0xB0	; 176
    3ca2:	99 e0       	ldi	r25, 0x09	; 9
    3ca4:	0e 94 19 09 	call	0x1232	; 0x1232 <usart_getchar>
    3ca8:	18 2f       	mov	r17, r24
	//printf("%c",c);

	if(c == (uint8_t) '$'){
    3caa:	84 32       	cpi	r24, 0x24	; 36
    3cac:	51 f4       	brne	.+20     	; 0x3cc2 <__vector_91+0x7a>
		writing = 1;
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <writing>
		pos = 0;
    3cb4:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <pos>
		word_pos = 0;
    3cb8:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <word_pos>
		commas = 0;
    3cbc:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <commas>
    3cc0:	5a c2       	rjmp	.+1204   	; 0x4176 <__stack+0x177>
	}
	else if(c == (uint8_t) '*'){
    3cc2:	8a 32       	cpi	r24, 0x2A	; 42
    3cc4:	29 f4       	brne	.+10     	; 0x3cd0 <__vector_91+0x88>
		commas = 0;
    3cc6:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <commas>
		writing = 0;
    3cca:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <writing>
    3cce:	53 c2       	rjmp	.+1190   	; 0x4176 <__stack+0x177>
	}
	else if(c == (uint8_t) ','){
    3cd0:	8c 32       	cpi	r24, 0x2C	; 44
    3cd2:	09 f0       	breq	.+2      	; 0x3cd6 <__vector_91+0x8e>
    3cd4:	50 c2       	rjmp	.+1184   	; 0x4176 <__stack+0x177>
		gps[0] = 32;
    3cd6:	e7 eb       	ldi	r30, 0xB7	; 183
    3cd8:	f1 e2       	ldi	r31, 0x21	; 33
    3cda:	80 e2       	ldi	r24, 0x20	; 32
    3cdc:	80 83       	st	Z, r24
		if(gps[1] == 32){
    3cde:	81 81       	ldd	r24, Z+1	; 0x01
    3ce0:	80 32       	cpi	r24, 0x20	; 32
    3ce2:	09 f0       	breq	.+2      	; 0x3ce6 <__vector_91+0x9e>
    3ce4:	77 c2       	rjmp	.+1262   	; 0x41d4 <__stack+0x1d5>
			gps[0] = '0';
    3ce6:	80 e3       	ldi	r24, 0x30	; 48
    3ce8:	80 93 b7 21 	sts	0x21B7, r24	; 0x8021b7 <gps>
    3cec:	73 c2       	rjmp	.+1254   	; 0x41d4 <__stack+0x1d5>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    3cee:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <gps>
    3cf2:	8e 32       	cpi	r24, 0x2E	; 46
    3cf4:	09 f0       	breq	.+2      	; 0x3cf8 <__vector_91+0xb0>
    3cf6:	a3 c1       	rjmp	.+838    	; 0x403e <__stack+0x3f>
    3cf8:	a9 c1       	rjmp	.+850    	; 0x404c <__stack+0x4d>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    3cfa:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <gps>
    3cfe:	8e 32       	cpi	r24, 0x2E	; 46
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <__vector_91+0xbc>
    3d02:	ef c0       	rjmp	.+478    	; 0x3ee2 <__vector_91+0x29a>
    3d04:	f5 c0       	rjmp	.+490    	; 0x3ef0 <__vector_91+0x2a8>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    3d06:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <gps>
    3d0a:	8e 32       	cpi	r24, 0x2E	; 46
    3d0c:	09 f0       	breq	.+2      	; 0x3d10 <__vector_91+0xc8>
    3d0e:	52 c0       	rjmp	.+164    	; 0x3db4 <__vector_91+0x16c>
    3d10:	58 c0       	rjmp	.+176    	; 0x3dc2 <__vector_91+0x17a>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    3d12:	91 91       	ld	r25, Z+
    3d14:	9e 32       	cpi	r25, 0x2E	; 46
    3d16:	29 f4       	brne	.+10     	; 0x3d22 <__vector_91+0xda>
    3d18:	01 c0       	rjmp	.+2      	; 0x3d1c <__vector_91+0xd4>
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    3d1c:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <idx>
						break;
    3d20:	03 c0       	rjmp	.+6      	; 0x3d28 <__vector_91+0xe0>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    3d22:	8f 5f       	subi	r24, 0xFF	; 255
    3d24:	8f 30       	cpi	r24, 0x0F	; 15
    3d26:	a9 f7       	brne	.-22     	; 0x3d12 <__vector_91+0xca>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    3d28:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <idx>
    3d2c:	f0 e0       	ldi	r31, 0x00	; 0
    3d2e:	e9 54       	subi	r30, 0x49	; 73
    3d30:	fe 4d       	sbci	r31, 0xDE	; 222
    3d32:	80 e2       	ldi	r24, 0x20	; 32
    3d34:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    3d36:	20 91 6a 21 	lds	r18, 0x216A	; 0x80216a <idx>
    3d3a:	2f 5f       	subi	r18, 0xFF	; 255
    3d3c:	2f 30       	cpi	r18, 0x0F	; 15
    3d3e:	c8 f4       	brcc	.+50     	; 0x3d72 <__vector_91+0x12a>
					if(gps[i] == 32){
    3d40:	82 2f       	mov	r24, r18
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	fc 01       	movw	r30, r24
    3d46:	e9 54       	subi	r30, 0x49	; 73
    3d48:	fe 4d       	sbci	r31, 0xDE	; 222
    3d4a:	30 81       	ld	r19, Z
    3d4c:	30 32       	cpi	r19, 0x20	; 32
    3d4e:	89 f0       	breq	.+34     	; 0x3d72 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    3d50:	40 e2       	ldi	r20, 0x20	; 32
    3d52:	08 c0       	rjmp	.+16     	; 0x3d64 <__vector_91+0x11c>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    3d54:	82 2f       	mov	r24, r18
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	fc 01       	movw	r30, r24
    3d5a:	e9 54       	subi	r30, 0x49	; 73
    3d5c:	fe 4d       	sbci	r31, 0xDE	; 222
    3d5e:	30 81       	ld	r19, Z
    3d60:	30 32       	cpi	r19, 0x20	; 32
    3d62:	39 f0       	breq	.+14     	; 0x3d72 <__vector_91+0x12a>
						break;
					}
					gps[i] = 32;
    3d64:	fc 01       	movw	r30, r24
    3d66:	e9 54       	subi	r30, 0x49	; 73
    3d68:	fe 4d       	sbci	r31, 0xDE	; 222
    3d6a:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    3d6c:	2f 5f       	subi	r18, 0xFF	; 255
    3d6e:	2f 30       	cpi	r18, 0x0F	; 15
    3d70:	89 f7       	brne	.-30     	; 0x3d54 <__vector_91+0x10c>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    3d72:	ce 01       	movw	r24, r28
    3d74:	01 96       	adiw	r24, 0x01	; 1
    3d76:	9f 93       	push	r25
    3d78:	8f 93       	push	r24
    3d7a:	85 e9       	ldi	r24, 0x95	; 149
    3d7c:	90 e2       	ldi	r25, 0x20	; 32
    3d7e:	9f 93       	push	r25
    3d80:	8f 93       	push	r24
    3d82:	87 eb       	ldi	r24, 0xB7	; 183
    3d84:	91 e2       	ldi	r25, 0x21	; 33
    3d86:	9f 93       	push	r25
    3d88:	8f 93       	push	r24
    3d8a:	66 d7       	rcall	.+3788   	; 0x4c58 <sscanf>
				gps_t = (double) val;
    3d8c:	69 81       	ldd	r22, Y+1	; 0x01
    3d8e:	7a 81       	ldd	r23, Y+2	; 0x02
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	9c 81       	ldd	r25, Y+4	; 0x04
    3d94:	63 d3       	rcall	.+1734   	; 0x445c <__floatsisf>
    3d96:	60 93 4b 21 	sts	0x214B, r22	; 0x80214b <gps_t>
    3d9a:	70 93 4c 21 	sts	0x214C, r23	; 0x80214c <gps_t+0x1>
    3d9e:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <gps_t+0x2>
    3da2:	90 93 4e 21 	sts	0x214E, r25	; 0x80214e <gps_t+0x3>
				break;
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	c3 c1       	rjmp	.+902    	; 0x413a <__stack+0x13b>
    3db4:	e8 eb       	ldi	r30, 0xB8	; 184
    3db6:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    3db8:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    3dba:	91 91       	ld	r25, Z+
    3dbc:	9e 32       	cpi	r25, 0x2E	; 46
    3dbe:	29 f4       	brne	.+10     	; 0x3dca <__vector_91+0x182>
    3dc0:	01 c0       	rjmp	.+2      	; 0x3dc4 <__vector_91+0x17c>
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    3dc4:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <idx>
						break;
    3dc8:	03 c0       	rjmp	.+6      	; 0x3dd0 <__vector_91+0x188>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    3dca:	8f 5f       	subi	r24, 0xFF	; 255
    3dcc:	8f 30       	cpi	r24, 0x0F	; 15
    3dce:	a9 f7       	brne	.-22     	; 0x3dba <__vector_91+0x172>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    3dd0:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <idx>
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	e9 54       	subi	r30, 0x49	; 73
    3dd8:	fe 4d       	sbci	r31, 0xDE	; 222
    3dda:	80 e2       	ldi	r24, 0x20	; 32
    3ddc:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    3dde:	20 91 6a 21 	lds	r18, 0x216A	; 0x80216a <idx>
    3de2:	2f 5f       	subi	r18, 0xFF	; 255
    3de4:	2f 30       	cpi	r18, 0x0F	; 15
    3de6:	08 f5       	brcc	.+66     	; 0x3e2a <__vector_91+0x1e2>
					if(gps[i] == 32){
    3de8:	82 2f       	mov	r24, r18
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	fc 01       	movw	r30, r24
    3dee:	e9 54       	subi	r30, 0x49	; 73
    3df0:	fe 4d       	sbci	r31, 0xDE	; 222
    3df2:	30 81       	ld	r19, Z
    3df4:	30 32       	cpi	r19, 0x20	; 32
    3df6:	c9 f0       	breq	.+50     	; 0x3e2a <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    3df8:	50 e2       	ldi	r21, 0x20	; 32
    3dfa:	08 c0       	rjmp	.+16     	; 0x3e0c <__vector_91+0x1c4>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    3dfc:	82 2f       	mov	r24, r18
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	fc 01       	movw	r30, r24
    3e02:	e9 54       	subi	r30, 0x49	; 73
    3e04:	fe 4d       	sbci	r31, 0xDE	; 222
    3e06:	30 81       	ld	r19, Z
    3e08:	30 32       	cpi	r19, 0x20	; 32
    3e0a:	79 f0       	breq	.+30     	; 0x3e2a <__vector_91+0x1e2>
						break;
					}
					dec[i-idx-1] = gps[i];
    3e0c:	40 91 6a 21 	lds	r20, 0x216A	; 0x80216a <idx>
    3e10:	fc 01       	movw	r30, r24
    3e12:	e4 1b       	sub	r30, r20
    3e14:	f1 09       	sbc	r31, r1
    3e16:	eb 53       	subi	r30, 0x3B	; 59
    3e18:	fe 4d       	sbci	r31, 0xDE	; 222
    3e1a:	30 83       	st	Z, r19
					gps[i] = 32;
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	e9 54       	subi	r30, 0x49	; 73
    3e20:	fe 4d       	sbci	r31, 0xDE	; 222
    3e22:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    3e24:	2f 5f       	subi	r18, 0xFF	; 255
    3e26:	2f 30       	cpi	r18, 0x0F	; 15
    3e28:	49 f7       	brne	.-46     	; 0x3dfc <__vector_91+0x1b4>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    3e2a:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <dec>
    3e2e:	80 32       	cpi	r24, 0x20	; 32
    3e30:	19 f4       	brne	.+6      	; 0x3e38 <__vector_91+0x1f0>
					dec[0] = '0';
    3e32:	80 e3       	ldi	r24, 0x30	; 48
    3e34:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <dec>
				}
				sscanf(gps,"%ld",&val);
    3e38:	ce 01       	movw	r24, r28
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	9f 93       	push	r25
    3e3e:	8f 93       	push	r24
    3e40:	85 e9       	ldi	r24, 0x95	; 149
    3e42:	90 e2       	ldi	r25, 0x20	; 32
    3e44:	9f 93       	push	r25
    3e46:	8f 93       	push	r24
    3e48:	87 eb       	ldi	r24, 0xB7	; 183
    3e4a:	91 e2       	ldi	r25, 0x21	; 33
    3e4c:	9f 93       	push	r25
    3e4e:	8f 93       	push	r24
    3e50:	03 d7       	rcall	.+3590   	; 0x4c58 <sscanf>
				sscanf(dec,"%d",&val2);
    3e52:	ce 01       	movw	r24, r28
    3e54:	05 96       	adiw	r24, 0x05	; 5
    3e56:	9f 93       	push	r25
    3e58:	8f 93       	push	r24
    3e5a:	89 e9       	ldi	r24, 0x99	; 153
    3e5c:	90 e2       	ldi	r25, 0x20	; 32
    3e5e:	9f 93       	push	r25
    3e60:	8f 93       	push	r24
    3e62:	86 ec       	ldi	r24, 0xC6	; 198
    3e64:	91 e2       	ldi	r25, 0x21	; 33
    3e66:	9f 93       	push	r25
    3e68:	8f 93       	push	r24
    3e6a:	f6 d6       	rcall	.+3564   	; 0x4c58 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    3e6c:	89 80       	ldd	r8, Y+1	; 0x01
    3e6e:	9a 80       	ldd	r9, Y+2	; 0x02
    3e70:	ab 80       	ldd	r10, Y+3	; 0x03
    3e72:	bc 80       	ldd	r11, Y+4	; 0x04
    3e74:	6d 81       	ldd	r22, Y+5	; 0x05
    3e76:	7e 81       	ldd	r23, Y+6	; 0x06
    3e78:	07 2e       	mov	r0, r23
    3e7a:	00 0c       	add	r0, r0
    3e7c:	88 0b       	sbc	r24, r24
    3e7e:	99 0b       	sbc	r25, r25
    3e80:	ed d2       	rcall	.+1498   	; 0x445c <__floatsisf>
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e4       	ldi	r19, 0x40	; 64
    3e86:	4c e1       	ldi	r20, 0x1C	; 28
    3e88:	56 e4       	ldi	r21, 0x46	; 70
    3e8a:	4d d2       	rcall	.+1178   	; 0x4326 <__divsf3>
    3e8c:	6b 01       	movw	r12, r22
    3e8e:	7c 01       	movw	r14, r24
    3e90:	c5 01       	movw	r24, r10
    3e92:	b4 01       	movw	r22, r8
    3e94:	24 e6       	ldi	r18, 0x64	; 100
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	40 e0       	ldi	r20, 0x00	; 0
    3e9a:	50 e0       	ldi	r21, 0x00	; 0
    3e9c:	b3 d5       	rcall	.+2918   	; 0x4a04 <__divmodsi4>
    3e9e:	49 01       	movw	r8, r18
    3ea0:	5a 01       	movw	r10, r20
    3ea2:	dc d2       	rcall	.+1464   	; 0x445c <__floatsisf>
    3ea4:	9b 01       	movw	r18, r22
    3ea6:	ac 01       	movw	r20, r24
    3ea8:	c7 01       	movw	r24, r14
    3eaa:	b6 01       	movw	r22, r12
    3eac:	d4 d1       	rcall	.+936    	; 0x4256 <__addsf3>
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	40 e7       	ldi	r20, 0x70	; 112
    3eb4:	52 e4       	ldi	r21, 0x42	; 66
    3eb6:	37 d2       	rcall	.+1134   	; 0x4326 <__divsf3>
    3eb8:	6b 01       	movw	r12, r22
    3eba:	7c 01       	movw	r14, r24
    3ebc:	c5 01       	movw	r24, r10
    3ebe:	b4 01       	movw	r22, r8
    3ec0:	cd d2       	rcall	.+1434   	; 0x445c <__floatsisf>
    3ec2:	9b 01       	movw	r18, r22
    3ec4:	ac 01       	movw	r20, r24
    3ec6:	c7 01       	movw	r24, r14
    3ec8:	b6 01       	movw	r22, r12
    3eca:	c5 d1       	rcall	.+906    	; 0x4256 <__addsf3>
    3ecc:	60 93 47 21 	sts	0x2147, r22	; 0x802147 <gps_lat>
    3ed0:	70 93 48 21 	sts	0x2148, r23	; 0x802148 <gps_lat+0x1>
    3ed4:	80 93 49 21 	sts	0x2149, r24	; 0x802149 <gps_lat+0x2>
    3ed8:	90 93 4a 21 	sts	0x214A, r25	; 0x80214a <gps_lat+0x3>
				break;
    3edc:	cd bf       	out	0x3d, r28	; 61
    3ede:	de bf       	out	0x3e, r29	; 62
    3ee0:	2c c1       	rjmp	.+600    	; 0x413a <__stack+0x13b>
    3ee2:	e8 eb       	ldi	r30, 0xB8	; 184
    3ee4:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    3ee8:	91 91       	ld	r25, Z+
    3eea:	9e 32       	cpi	r25, 0x2E	; 46
    3eec:	29 f4       	brne	.+10     	; 0x3ef8 <__vector_91+0x2b0>
    3eee:	01 c0       	rjmp	.+2      	; 0x3ef2 <__vector_91+0x2aa>
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    3ef2:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <idx>
						break;
    3ef6:	03 c0       	rjmp	.+6      	; 0x3efe <__vector_91+0x2b6>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    3ef8:	8f 5f       	subi	r24, 0xFF	; 255
    3efa:	8f 30       	cpi	r24, 0x0F	; 15
    3efc:	a9 f7       	brne	.-22     	; 0x3ee8 <__vector_91+0x2a0>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    3efe:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <idx>
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	e9 54       	subi	r30, 0x49	; 73
    3f06:	fe 4d       	sbci	r31, 0xDE	; 222
    3f08:	80 e2       	ldi	r24, 0x20	; 32
    3f0a:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    3f0c:	20 91 6a 21 	lds	r18, 0x216A	; 0x80216a <idx>
    3f10:	2f 5f       	subi	r18, 0xFF	; 255
    3f12:	2f 30       	cpi	r18, 0x0F	; 15
    3f14:	08 f5       	brcc	.+66     	; 0x3f58 <__vector_91+0x310>
					if(gps[i] == 32){
    3f16:	82 2f       	mov	r24, r18
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	e9 54       	subi	r30, 0x49	; 73
    3f1e:	fe 4d       	sbci	r31, 0xDE	; 222
    3f20:	30 81       	ld	r19, Z
    3f22:	30 32       	cpi	r19, 0x20	; 32
    3f24:	c9 f0       	breq	.+50     	; 0x3f58 <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    3f26:	50 e2       	ldi	r21, 0x20	; 32
    3f28:	08 c0       	rjmp	.+16     	; 0x3f3a <__vector_91+0x2f2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    3f2a:	82 2f       	mov	r24, r18
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	fc 01       	movw	r30, r24
    3f30:	e9 54       	subi	r30, 0x49	; 73
    3f32:	fe 4d       	sbci	r31, 0xDE	; 222
    3f34:	30 81       	ld	r19, Z
    3f36:	30 32       	cpi	r19, 0x20	; 32
    3f38:	79 f0       	breq	.+30     	; 0x3f58 <__vector_91+0x310>
						break;
					}
					dec[i-idx-1] = gps[i];
    3f3a:	40 91 6a 21 	lds	r20, 0x216A	; 0x80216a <idx>
    3f3e:	fc 01       	movw	r30, r24
    3f40:	e4 1b       	sub	r30, r20
    3f42:	f1 09       	sbc	r31, r1
    3f44:	eb 53       	subi	r30, 0x3B	; 59
    3f46:	fe 4d       	sbci	r31, 0xDE	; 222
    3f48:	30 83       	st	Z, r19
					gps[i] = 32;
    3f4a:	fc 01       	movw	r30, r24
    3f4c:	e9 54       	subi	r30, 0x49	; 73
    3f4e:	fe 4d       	sbci	r31, 0xDE	; 222
    3f50:	50 83       	st	Z, r21
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    3f52:	2f 5f       	subi	r18, 0xFF	; 255
    3f54:	2f 30       	cpi	r18, 0x0F	; 15
    3f56:	49 f7       	brne	.-46     	; 0x3f2a <__vector_91+0x2e2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    3f58:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <dec>
    3f5c:	80 32       	cpi	r24, 0x20	; 32
    3f5e:	19 f4       	brne	.+6      	; 0x3f66 <__vector_91+0x31e>
					dec[0] = '0';
    3f60:	80 e3       	ldi	r24, 0x30	; 48
    3f62:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <dec>
				}
				sscanf(gps,"%ld",&val);
    3f66:	ce 01       	movw	r24, r28
    3f68:	01 96       	adiw	r24, 0x01	; 1
    3f6a:	9f 93       	push	r25
    3f6c:	8f 93       	push	r24
    3f6e:	85 e9       	ldi	r24, 0x95	; 149
    3f70:	90 e2       	ldi	r25, 0x20	; 32
    3f72:	9f 93       	push	r25
    3f74:	8f 93       	push	r24
    3f76:	87 eb       	ldi	r24, 0xB7	; 183
    3f78:	91 e2       	ldi	r25, 0x21	; 33
    3f7a:	9f 93       	push	r25
    3f7c:	8f 93       	push	r24
    3f7e:	6c d6       	rcall	.+3288   	; 0x4c58 <sscanf>
				sscanf(dec,"%d",&val2);
    3f80:	ce 01       	movw	r24, r28
    3f82:	05 96       	adiw	r24, 0x05	; 5
    3f84:	9f 93       	push	r25
    3f86:	8f 93       	push	r24
    3f88:	89 e9       	ldi	r24, 0x99	; 153
    3f8a:	90 e2       	ldi	r25, 0x20	; 32
    3f8c:	9f 93       	push	r25
    3f8e:	8f 93       	push	r24
    3f90:	86 ec       	ldi	r24, 0xC6	; 198
    3f92:	91 e2       	ldi	r25, 0x21	; 33
    3f94:	9f 93       	push	r25
    3f96:	8f 93       	push	r24
    3f98:	5f d6       	rcall	.+3262   	; 0x4c58 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    3f9a:	89 80       	ldd	r8, Y+1	; 0x01
    3f9c:	9a 80       	ldd	r9, Y+2	; 0x02
    3f9e:	ab 80       	ldd	r10, Y+3	; 0x03
    3fa0:	bc 80       	ldd	r11, Y+4	; 0x04
    3fa2:	6d 81       	ldd	r22, Y+5	; 0x05
    3fa4:	7e 81       	ldd	r23, Y+6	; 0x06
    3fa6:	07 2e       	mov	r0, r23
    3fa8:	00 0c       	add	r0, r0
    3faa:	88 0b       	sbc	r24, r24
    3fac:	99 0b       	sbc	r25, r25
    3fae:	56 d2       	rcall	.+1196   	; 0x445c <__floatsisf>
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e4       	ldi	r19, 0x40	; 64
    3fb4:	4c e1       	ldi	r20, 0x1C	; 28
    3fb6:	56 e4       	ldi	r21, 0x46	; 70
    3fb8:	b6 d1       	rcall	.+876    	; 0x4326 <__divsf3>
    3fba:	6b 01       	movw	r12, r22
    3fbc:	7c 01       	movw	r14, r24
    3fbe:	c5 01       	movw	r24, r10
    3fc0:	b4 01       	movw	r22, r8
    3fc2:	24 e6       	ldi	r18, 0x64	; 100
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	40 e0       	ldi	r20, 0x00	; 0
    3fc8:	50 e0       	ldi	r21, 0x00	; 0
    3fca:	1c d5       	rcall	.+2616   	; 0x4a04 <__divmodsi4>
    3fcc:	49 01       	movw	r8, r18
    3fce:	5a 01       	movw	r10, r20
    3fd0:	45 d2       	rcall	.+1162   	; 0x445c <__floatsisf>
    3fd2:	9b 01       	movw	r18, r22
    3fd4:	ac 01       	movw	r20, r24
    3fd6:	c7 01       	movw	r24, r14
    3fd8:	b6 01       	movw	r22, r12
    3fda:	3d d1       	rcall	.+634    	; 0x4256 <__addsf3>
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	40 e7       	ldi	r20, 0x70	; 112
    3fe2:	52 e4       	ldi	r21, 0x42	; 66
    3fe4:	a0 d1       	rcall	.+832    	; 0x4326 <__divsf3>
    3fe6:	6b 01       	movw	r12, r22
    3fe8:	7c 01       	movw	r14, r24
    3fea:	c5 01       	movw	r24, r10
    3fec:	b4 01       	movw	r22, r8
    3fee:	36 d2       	rcall	.+1132   	; 0x445c <__floatsisf>
    3ff0:	9b 01       	movw	r18, r22
    3ff2:	ac 01       	movw	r20, r24
    3ff4:	c7 01       	movw	r24, r14
    3ff6:	b6 01       	movw	r22, r12
    3ff8:	2e d1       	rcall	.+604    	; 0x4256 <__addsf3>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	b0 58       	subi	r27, 0x80	; 128
    4000:	80 93 43 21 	sts	0x2143, r24	; 0x802143 <gps_long>
    4004:	90 93 44 21 	sts	0x2144, r25	; 0x802144 <gps_long+0x1>
    4008:	a0 93 45 21 	sts	0x2145, r26	; 0x802145 <gps_long+0x2>
    400c:	b0 93 46 21 	sts	0x2146, r27	; 0x802146 <gps_long+0x3>
    4010:	cd bf       	out	0x3d, r28	; 61
				break;
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	92 c0       	rjmp	.+292    	; 0x413a <__stack+0x13b>
    4016:	8d e3       	ldi	r24, 0x3D	; 61
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    4018:	91 e2       	ldi	r25, 0x21	; 33
    401a:	9f 93       	push	r25
    401c:	8f 93       	push	r24
    401e:	89 e9       	ldi	r24, 0x99	; 153
    4020:	90 e2       	ldi	r25, 0x20	; 32
    4022:	9f 93       	push	r25
    4024:	8f 93       	push	r24
    4026:	87 eb       	ldi	r24, 0xB7	; 183
    4028:	91 e2       	ldi	r25, 0x21	; 33
    402a:	9f 93       	push	r25
    402c:	8f 93       	push	r24
    402e:	14 d6       	rcall	.+3112   	; 0x4c58 <sscanf>
    4030:	0f 90       	pop	r0
    4032:	0f 90       	pop	r0
				break;
    4034:	0f 90       	pop	r0
    4036:	0f 90       	pop	r0
    4038:	0f 90       	pop	r0
    403a:	0f 90       	pop	r0
    403c:	7e c0       	rjmp	.+252    	; 0x413a <__stack+0x13b>
    403e:	e8 eb       	ldi	r30, 0xB8	; 184
    4040:	f1 e2       	ldi	r31, 0x21	; 33
    4042:	81 e0       	ldi	r24, 0x01	; 1
    4044:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4046:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    4048:	29 f4       	brne	.+10     	; 0x4054 <__stack+0x55>
    404a:	01 c0       	rjmp	.+2      	; 0x404e <__stack+0x4f>
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <idx>
						idx = i;
    4052:	03 c0       	rjmp	.+6      	; 0x405a <__stack+0x5b>
    4054:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    4056:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    4058:	a9 f7       	brne	.-22     	; 0x4044 <__stack+0x45>
    405a:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	e9 54       	subi	r30, 0x49	; 73
    4062:	fe 4d       	sbci	r31, 0xDE	; 222
    4064:	80 e2       	ldi	r24, 0x20	; 32
    4066:	80 83       	st	Z, r24
    4068:	20 91 6a 21 	lds	r18, 0x216A	; 0x80216a <idx>
				for(uint8_t i = idx+1; i < 15; i++){
    406c:	2f 5f       	subi	r18, 0xFF	; 255
    406e:	2f 30       	cpi	r18, 0x0F	; 15
    4070:	08 f5       	brcc	.+66     	; 0x40b4 <__stack+0xb5>
    4072:	82 2f       	mov	r24, r18
    4074:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    4076:	fc 01       	movw	r30, r24
    4078:	e9 54       	subi	r30, 0x49	; 73
    407a:	fe 4d       	sbci	r31, 0xDE	; 222
    407c:	30 81       	ld	r19, Z
    407e:	30 32       	cpi	r19, 0x20	; 32
    4080:	c9 f0       	breq	.+50     	; 0x40b4 <__stack+0xb5>
    4082:	50 e2       	ldi	r21, 0x20	; 32
    4084:	08 c0       	rjmp	.+16     	; 0x4096 <__stack+0x97>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    4086:	82 2f       	mov	r24, r18
    4088:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    408a:	fc 01       	movw	r30, r24
    408c:	e9 54       	subi	r30, 0x49	; 73
    408e:	fe 4d       	sbci	r31, 0xDE	; 222
    4090:	30 81       	ld	r19, Z
    4092:	30 32       	cpi	r19, 0x20	; 32
    4094:	79 f0       	breq	.+30     	; 0x40b4 <__stack+0xb5>
    4096:	40 91 6a 21 	lds	r20, 0x216A	; 0x80216a <idx>
						break;
					}
					dec[i-idx-1] = gps[i];
    409a:	fc 01       	movw	r30, r24
    409c:	e4 1b       	sub	r30, r20
    409e:	f1 09       	sbc	r31, r1
    40a0:	eb 53       	subi	r30, 0x3B	; 59
    40a2:	fe 4d       	sbci	r31, 0xDE	; 222
    40a4:	30 83       	st	Z, r19
    40a6:	fc 01       	movw	r30, r24
    40a8:	e9 54       	subi	r30, 0x49	; 73
					gps[i] = 32;
    40aa:	fe 4d       	sbci	r31, 0xDE	; 222
    40ac:	50 83       	st	Z, r21
    40ae:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    40b0:	2f 30       	cpi	r18, 0x0F	; 15
    40b2:	49 f7       	brne	.-46     	; 0x4086 <__stack+0x87>
    40b4:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    40b8:	80 32       	cpi	r24, 0x20	; 32
    40ba:	19 f4       	brne	.+6      	; 0x40c2 <__stack+0xc3>
    40bc:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    40be:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <dec>
    40c2:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    40c4:	01 96       	adiw	r24, 0x01	; 1
    40c6:	9f 93       	push	r25
    40c8:	8f 93       	push	r24
    40ca:	85 e9       	ldi	r24, 0x95	; 149
    40cc:	90 e2       	ldi	r25, 0x20	; 32
    40ce:	9f 93       	push	r25
    40d0:	8f 93       	push	r24
    40d2:	87 eb       	ldi	r24, 0xB7	; 183
    40d4:	91 e2       	ldi	r25, 0x21	; 33
    40d6:	9f 93       	push	r25
    40d8:	8f 93       	push	r24
    40da:	be d5       	rcall	.+2940   	; 0x4c58 <sscanf>
				sscanf(dec,"%d",&val2);
    40dc:	ce 01       	movw	r24, r28
    40de:	05 96       	adiw	r24, 0x05	; 5
    40e0:	9f 93       	push	r25
    40e2:	8f 93       	push	r24
    40e4:	89 e9       	ldi	r24, 0x99	; 153
    40e6:	90 e2       	ldi	r25, 0x20	; 32
    40e8:	9f 93       	push	r25
    40ea:	8f 93       	push	r24
    40ec:	86 ec       	ldi	r24, 0xC6	; 198
    40ee:	91 e2       	ldi	r25, 0x21	; 33
    40f0:	9f 93       	push	r25
    40f2:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    40f4:	b1 d5       	rcall	.+2914   	; 0x4c58 <sscanf>
    40f6:	69 81       	ldd	r22, Y+1	; 0x01
    40f8:	7a 81       	ldd	r23, Y+2	; 0x02
    40fa:	8b 81       	ldd	r24, Y+3	; 0x03
    40fc:	9c 81       	ldd	r25, Y+4	; 0x04
    40fe:	ae d1       	rcall	.+860    	; 0x445c <__floatsisf>
    4100:	6b 01       	movw	r12, r22
    4102:	7c 01       	movw	r14, r24
    4104:	6d 81       	ldd	r22, Y+5	; 0x05
    4106:	7e 81       	ldd	r23, Y+6	; 0x06
    4108:	07 2e       	mov	r0, r23
    410a:	00 0c       	add	r0, r0
    410c:	88 0b       	sbc	r24, r24
    410e:	99 0b       	sbc	r25, r25
    4110:	a5 d1       	rcall	.+842    	; 0x445c <__floatsisf>
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	40 e2       	ldi	r20, 0x20	; 32
    4118:	51 e4       	ldi	r21, 0x41	; 65
    411a:	05 d1       	rcall	.+522    	; 0x4326 <__divsf3>
    411c:	9b 01       	movw	r18, r22
    411e:	ac 01       	movw	r20, r24
    4120:	c7 01       	movw	r24, r14
    4122:	b6 01       	movw	r22, r12
    4124:	98 d0       	rcall	.+304    	; 0x4256 <__addsf3>
    4126:	60 93 3f 21 	sts	0x213F, r22	; 0x80213f <gps_alt>
    412a:	70 93 40 21 	sts	0x2140, r23	; 0x802140 <gps_alt+0x1>
    412e:	80 93 41 21 	sts	0x2141, r24	; 0x802141 <gps_alt+0x2>
    4132:	90 93 42 21 	sts	0x2142, r25	; 0x802142 <gps_alt+0x3>
    4136:	cd bf       	out	0x3d, r28	; 61
    4138:	de bf       	out	0x3e, r29	; 62
    413a:	80 91 6e 21 	lds	r24, 0x216E	; 0x80216e <writing>
				break;
    413e:	88 23       	and	r24, r24
		}

		if(writing){
    4140:	d1 f0       	breq	.+52     	; 0x4176 <__stack+0x177>
    4142:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <idx>
    4146:	80 91 6b 21 	lds	r24, 0x216B	; 0x80216b <commas>
			idx = 0;
    414a:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    414c:	80 93 6b 21 	sts	0x216B, r24	; 0x80216b <commas>
    4150:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <word_pos>
    4154:	e7 eb       	ldi	r30, 0xB7	; 183
			word_pos = 0;
    4156:	f1 e2       	ldi	r31, 0x21	; 33
    4158:	26 ec       	ldi	r18, 0xC6	; 198
    415a:	31 e2       	ldi	r19, 0x21	; 33
    415c:	80 e2       	ldi	r24, 0x20	; 32
    415e:	81 93       	st	Z+, r24
    4160:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    4162:	3f 07       	cpc	r19, r31
    4164:	e1 f7       	brne	.-8      	; 0x415e <__stack+0x15f>

		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    4166:	e6 ec       	ldi	r30, 0xC6	; 198
    4168:	f1 e2       	ldi	r31, 0x21	; 33
    416a:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    416c:	80 83       	st	Z, r24
    416e:	81 83       	std	Z+1, r24	; 0x01
    4170:	82 83       	std	Z+2, r24	; 0x02
    4172:	83 83       	std	Z+3, r24	; 0x03
    4174:	84 83       	std	Z+4, r24	; 0x04
    4176:	80 91 6e 21 	lds	r24, 0x216E	; 0x80216e <writing>
    417a:	88 23       	and	r24, r24
			}
		}
	}

	if(writing){
    417c:	09 f4       	brne	.+2      	; 0x4180 <__stack+0x181>
    417e:	43 c0       	rjmp	.+134    	; 0x4206 <__stack+0x207>
    4180:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <pos>
    4184:	83 30       	cpi	r24, 0x03	; 3
		switch(pos){
    4186:	19 f0       	breq	.+6      	; 0x418e <__stack+0x18f>
    4188:	84 30       	cpi	r24, 0x04	; 4
    418a:	31 f0       	breq	.+12     	; 0x4198 <__stack+0x199>
    418c:	09 c0       	rjmp	.+18     	; 0x41a0 <__stack+0x1a1>
    418e:	17 34       	cpi	r17, 0x47	; 71
    4190:	39 f0       	breq	.+14     	; 0x41a0 <__stack+0x1a1>
    4192:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <writing>
			case 3:
				if(c != 'G'){
    4196:	04 c0       	rjmp	.+8      	; 0x41a0 <__stack+0x1a1>
					writing = 0;
    4198:	17 34       	cpi	r17, 0x47	; 71
    419a:	11 f0       	breq	.+4      	; 0x41a0 <__stack+0x1a1>
    419c:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <writing>
				}
				break;

			case 4:
				if(c != 'G'){
    41a0:	e0 91 6c 21 	lds	r30, 0x216C	; 0x80216c <word_pos>
					writing = 0;
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
				}
				break;
		}
		gps[word_pos] = c;
    41a6:	e9 54       	subi	r30, 0x49	; 73
    41a8:	fe 4d       	sbci	r31, 0xDE	; 222
    41aa:	10 83       	st	Z, r17
    41ac:	80 91 6c 21 	lds	r24, 0x216C	; 0x80216c <word_pos>
    41b0:	8f 5f       	subi	r24, 0xFF	; 255
		word_pos++;
    41b2:	80 93 6c 21 	sts	0x216C, r24	; 0x80216c <word_pos>
    41b6:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <pos>
    41ba:	8f 5f       	subi	r24, 0xFF	; 255
		pos++;
    41bc:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <pos>
    41c0:	22 c0       	rjmp	.+68     	; 0x4206 <__stack+0x207>
    41c2:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <gps>
	}
}
    41c6:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    41c8:	09 f4       	brne	.+2      	; 0x41cc <__stack+0x1cd>
    41ca:	a7 cd       	rjmp	.-1202   	; 0x3d1a <__vector_91+0xd2>
    41cc:	e8 eb       	ldi	r30, 0xB8	; 184
    41ce:	f1 e2       	ldi	r31, 0x21	; 33
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	9f cd       	rjmp	.-1218   	; 0x3d12 <__vector_91+0xca>
    41d4:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    41d6:	1a 82       	std	Y+2, r1	; 0x02
    41d8:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    41da:	1c 82       	std	Y+4, r1	; 0x04
    41dc:	1d 82       	std	Y+5, r1	; 0x05
    41de:	1e 82       	std	Y+6, r1	; 0x06
    41e0:	80 91 6b 21 	lds	r24, 0x216B	; 0x80216b <commas>
		int16_t val2 = 0;
    41e4:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    41e6:	09 f4       	brne	.+2      	; 0x41ea <__stack+0x1eb>
    41e8:	88 cd       	rjmp	.-1264   	; 0x3cfa <__vector_91+0xb2>
    41ea:	30 f4       	brcc	.+12     	; 0x41f8 <__stack+0x1f9>
    41ec:	81 30       	cpi	r24, 0x01	; 1
    41ee:	49 f3       	breq	.-46     	; 0x41c2 <__stack+0x1c3>
    41f0:	82 30       	cpi	r24, 0x02	; 2
    41f2:	09 f4       	brne	.+2      	; 0x41f6 <__stack+0x1f7>
    41f4:	88 cd       	rjmp	.-1264   	; 0x3d06 <__vector_91+0xbe>
    41f6:	a1 cf       	rjmp	.-190    	; 0x413a <__stack+0x13b>
    41f8:	87 30       	cpi	r24, 0x07	; 7
    41fa:	09 f4       	brne	.+2      	; 0x41fe <__stack+0x1ff>
    41fc:	0c cf       	rjmp	.-488    	; 0x4016 <__stack+0x17>
    41fe:	89 30       	cpi	r24, 0x09	; 9
    4200:	09 f4       	brne	.+2      	; 0x4204 <__stack+0x205>
    4202:	75 cd       	rjmp	.-1302   	; 0x3cee <__vector_91+0xa6>
    4204:	9a cf       	rjmp	.-204    	; 0x413a <__stack+0x13b>
    4206:	26 96       	adiw	r28, 0x06	; 6
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    420c:	df 91       	pop	r29
    420e:	cf 91       	pop	r28
    4210:	ff 91       	pop	r31
    4212:	ef 91       	pop	r30
    4214:	bf 91       	pop	r27
    4216:	af 91       	pop	r26
    4218:	9f 91       	pop	r25
    421a:	8f 91       	pop	r24
    421c:	7f 91       	pop	r23
    421e:	6f 91       	pop	r22
    4220:	5f 91       	pop	r21
    4222:	4f 91       	pop	r20
    4224:	3f 91       	pop	r19
    4226:	2f 91       	pop	r18
    4228:	1f 91       	pop	r17
    422a:	ff 90       	pop	r15
    422c:	ef 90       	pop	r14
    422e:	df 90       	pop	r13
    4230:	cf 90       	pop	r12
    4232:	bf 90       	pop	r11
    4234:	af 90       	pop	r10
    4236:	9f 90       	pop	r9
    4238:	8f 90       	pop	r8
    423a:	0f 90       	pop	r0
    423c:	0b be       	out	0x3b, r0	; 59
    423e:	0f 90       	pop	r0
    4240:	0a be       	out	0x3a, r0	; 58
    4242:	0f 90       	pop	r0
    4244:	09 be       	out	0x39, r0	; 57
    4246:	0f 90       	pop	r0
    4248:	08 be       	out	0x38, r0	; 56
    424a:	0f 90       	pop	r0
    424c:	0f be       	out	0x3f, r0	; 63
    424e:	0f 90       	pop	r0
    4250:	1f 90       	pop	r1
    4252:	18 95       	reti

00004254 <__subsf3>:
    4254:	50 58       	subi	r21, 0x80	; 128

00004256 <__addsf3>:
    4256:	bb 27       	eor	r27, r27
    4258:	aa 27       	eor	r26, r26
    425a:	0e d0       	rcall	.+28     	; 0x4278 <__addsf3x>
    425c:	75 c1       	rjmp	.+746    	; 0x4548 <__fp_round>
    425e:	66 d1       	rcall	.+716    	; 0x452c <__fp_pscA>
    4260:	30 f0       	brcs	.+12     	; 0x426e <__addsf3+0x18>
    4262:	6b d1       	rcall	.+726    	; 0x453a <__fp_pscB>
    4264:	20 f0       	brcs	.+8      	; 0x426e <__addsf3+0x18>
    4266:	31 f4       	brne	.+12     	; 0x4274 <__addsf3+0x1e>
    4268:	9f 3f       	cpi	r25, 0xFF	; 255
    426a:	11 f4       	brne	.+4      	; 0x4270 <__addsf3+0x1a>
    426c:	1e f4       	brtc	.+6      	; 0x4274 <__addsf3+0x1e>
    426e:	5b c1       	rjmp	.+694    	; 0x4526 <__fp_nan>
    4270:	0e f4       	brtc	.+2      	; 0x4274 <__addsf3+0x1e>
    4272:	e0 95       	com	r30
    4274:	e7 fb       	bst	r30, 7
    4276:	51 c1       	rjmp	.+674    	; 0x451a <__fp_inf>

00004278 <__addsf3x>:
    4278:	e9 2f       	mov	r30, r25
    427a:	77 d1       	rcall	.+750    	; 0x456a <__fp_split3>
    427c:	80 f3       	brcs	.-32     	; 0x425e <__addsf3+0x8>
    427e:	ba 17       	cp	r27, r26
    4280:	62 07       	cpc	r22, r18
    4282:	73 07       	cpc	r23, r19
    4284:	84 07       	cpc	r24, r20
    4286:	95 07       	cpc	r25, r21
    4288:	18 f0       	brcs	.+6      	; 0x4290 <__addsf3x+0x18>
    428a:	71 f4       	brne	.+28     	; 0x42a8 <__addsf3x+0x30>
    428c:	9e f5       	brtc	.+102    	; 0x42f4 <__addsf3x+0x7c>
    428e:	8f c1       	rjmp	.+798    	; 0x45ae <__fp_zero>
    4290:	0e f4       	brtc	.+2      	; 0x4294 <__addsf3x+0x1c>
    4292:	e0 95       	com	r30
    4294:	0b 2e       	mov	r0, r27
    4296:	ba 2f       	mov	r27, r26
    4298:	a0 2d       	mov	r26, r0
    429a:	0b 01       	movw	r0, r22
    429c:	b9 01       	movw	r22, r18
    429e:	90 01       	movw	r18, r0
    42a0:	0c 01       	movw	r0, r24
    42a2:	ca 01       	movw	r24, r20
    42a4:	a0 01       	movw	r20, r0
    42a6:	11 24       	eor	r1, r1
    42a8:	ff 27       	eor	r31, r31
    42aa:	59 1b       	sub	r21, r25
    42ac:	99 f0       	breq	.+38     	; 0x42d4 <__addsf3x+0x5c>
    42ae:	59 3f       	cpi	r21, 0xF9	; 249
    42b0:	50 f4       	brcc	.+20     	; 0x42c6 <__addsf3x+0x4e>
    42b2:	50 3e       	cpi	r21, 0xE0	; 224
    42b4:	68 f1       	brcs	.+90     	; 0x4310 <__addsf3x+0x98>
    42b6:	1a 16       	cp	r1, r26
    42b8:	f0 40       	sbci	r31, 0x00	; 0
    42ba:	a2 2f       	mov	r26, r18
    42bc:	23 2f       	mov	r18, r19
    42be:	34 2f       	mov	r19, r20
    42c0:	44 27       	eor	r20, r20
    42c2:	58 5f       	subi	r21, 0xF8	; 248
    42c4:	f3 cf       	rjmp	.-26     	; 0x42ac <__addsf3x+0x34>
    42c6:	46 95       	lsr	r20
    42c8:	37 95       	ror	r19
    42ca:	27 95       	ror	r18
    42cc:	a7 95       	ror	r26
    42ce:	f0 40       	sbci	r31, 0x00	; 0
    42d0:	53 95       	inc	r21
    42d2:	c9 f7       	brne	.-14     	; 0x42c6 <__addsf3x+0x4e>
    42d4:	7e f4       	brtc	.+30     	; 0x42f4 <__addsf3x+0x7c>
    42d6:	1f 16       	cp	r1, r31
    42d8:	ba 0b       	sbc	r27, r26
    42da:	62 0b       	sbc	r22, r18
    42dc:	73 0b       	sbc	r23, r19
    42de:	84 0b       	sbc	r24, r20
    42e0:	ba f0       	brmi	.+46     	; 0x4310 <__addsf3x+0x98>
    42e2:	91 50       	subi	r25, 0x01	; 1
    42e4:	a1 f0       	breq	.+40     	; 0x430e <__addsf3x+0x96>
    42e6:	ff 0f       	add	r31, r31
    42e8:	bb 1f       	adc	r27, r27
    42ea:	66 1f       	adc	r22, r22
    42ec:	77 1f       	adc	r23, r23
    42ee:	88 1f       	adc	r24, r24
    42f0:	c2 f7       	brpl	.-16     	; 0x42e2 <__addsf3x+0x6a>
    42f2:	0e c0       	rjmp	.+28     	; 0x4310 <__addsf3x+0x98>
    42f4:	ba 0f       	add	r27, r26
    42f6:	62 1f       	adc	r22, r18
    42f8:	73 1f       	adc	r23, r19
    42fa:	84 1f       	adc	r24, r20
    42fc:	48 f4       	brcc	.+18     	; 0x4310 <__addsf3x+0x98>
    42fe:	87 95       	ror	r24
    4300:	77 95       	ror	r23
    4302:	67 95       	ror	r22
    4304:	b7 95       	ror	r27
    4306:	f7 95       	ror	r31
    4308:	9e 3f       	cpi	r25, 0xFE	; 254
    430a:	08 f0       	brcs	.+2      	; 0x430e <__addsf3x+0x96>
    430c:	b3 cf       	rjmp	.-154    	; 0x4274 <__addsf3+0x1e>
    430e:	93 95       	inc	r25
    4310:	88 0f       	add	r24, r24
    4312:	08 f0       	brcs	.+2      	; 0x4316 <__addsf3x+0x9e>
    4314:	99 27       	eor	r25, r25
    4316:	ee 0f       	add	r30, r30
    4318:	97 95       	ror	r25
    431a:	87 95       	ror	r24
    431c:	08 95       	ret

0000431e <__cmpsf2>:
    431e:	d9 d0       	rcall	.+434    	; 0x44d2 <__fp_cmp>
    4320:	08 f4       	brcc	.+2      	; 0x4324 <__cmpsf2+0x6>
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	08 95       	ret

00004326 <__divsf3>:
    4326:	0c d0       	rcall	.+24     	; 0x4340 <__divsf3x>
    4328:	0f c1       	rjmp	.+542    	; 0x4548 <__fp_round>
    432a:	07 d1       	rcall	.+526    	; 0x453a <__fp_pscB>
    432c:	40 f0       	brcs	.+16     	; 0x433e <__divsf3+0x18>
    432e:	fe d0       	rcall	.+508    	; 0x452c <__fp_pscA>
    4330:	30 f0       	brcs	.+12     	; 0x433e <__divsf3+0x18>
    4332:	21 f4       	brne	.+8      	; 0x433c <__divsf3+0x16>
    4334:	5f 3f       	cpi	r21, 0xFF	; 255
    4336:	19 f0       	breq	.+6      	; 0x433e <__divsf3+0x18>
    4338:	f0 c0       	rjmp	.+480    	; 0x451a <__fp_inf>
    433a:	51 11       	cpse	r21, r1
    433c:	39 c1       	rjmp	.+626    	; 0x45b0 <__fp_szero>
    433e:	f3 c0       	rjmp	.+486    	; 0x4526 <__fp_nan>

00004340 <__divsf3x>:
    4340:	14 d1       	rcall	.+552    	; 0x456a <__fp_split3>
    4342:	98 f3       	brcs	.-26     	; 0x432a <__divsf3+0x4>

00004344 <__divsf3_pse>:
    4344:	99 23       	and	r25, r25
    4346:	c9 f3       	breq	.-14     	; 0x433a <__divsf3+0x14>
    4348:	55 23       	and	r21, r21
    434a:	b1 f3       	breq	.-20     	; 0x4338 <__divsf3+0x12>
    434c:	95 1b       	sub	r25, r21
    434e:	55 0b       	sbc	r21, r21
    4350:	bb 27       	eor	r27, r27
    4352:	aa 27       	eor	r26, r26
    4354:	62 17       	cp	r22, r18
    4356:	73 07       	cpc	r23, r19
    4358:	84 07       	cpc	r24, r20
    435a:	38 f0       	brcs	.+14     	; 0x436a <__divsf3_pse+0x26>
    435c:	9f 5f       	subi	r25, 0xFF	; 255
    435e:	5f 4f       	sbci	r21, 0xFF	; 255
    4360:	22 0f       	add	r18, r18
    4362:	33 1f       	adc	r19, r19
    4364:	44 1f       	adc	r20, r20
    4366:	aa 1f       	adc	r26, r26
    4368:	a9 f3       	breq	.-22     	; 0x4354 <__divsf3_pse+0x10>
    436a:	33 d0       	rcall	.+102    	; 0x43d2 <__divsf3_pse+0x8e>
    436c:	0e 2e       	mov	r0, r30
    436e:	3a f0       	brmi	.+14     	; 0x437e <__divsf3_pse+0x3a>
    4370:	e0 e8       	ldi	r30, 0x80	; 128
    4372:	30 d0       	rcall	.+96     	; 0x43d4 <__divsf3_pse+0x90>
    4374:	91 50       	subi	r25, 0x01	; 1
    4376:	50 40       	sbci	r21, 0x00	; 0
    4378:	e6 95       	lsr	r30
    437a:	00 1c       	adc	r0, r0
    437c:	ca f7       	brpl	.-14     	; 0x4370 <__divsf3_pse+0x2c>
    437e:	29 d0       	rcall	.+82     	; 0x43d2 <__divsf3_pse+0x8e>
    4380:	fe 2f       	mov	r31, r30
    4382:	27 d0       	rcall	.+78     	; 0x43d2 <__divsf3_pse+0x8e>
    4384:	66 0f       	add	r22, r22
    4386:	77 1f       	adc	r23, r23
    4388:	88 1f       	adc	r24, r24
    438a:	bb 1f       	adc	r27, r27
    438c:	26 17       	cp	r18, r22
    438e:	37 07       	cpc	r19, r23
    4390:	48 07       	cpc	r20, r24
    4392:	ab 07       	cpc	r26, r27
    4394:	b0 e8       	ldi	r27, 0x80	; 128
    4396:	09 f0       	breq	.+2      	; 0x439a <__divsf3_pse+0x56>
    4398:	bb 0b       	sbc	r27, r27
    439a:	80 2d       	mov	r24, r0
    439c:	bf 01       	movw	r22, r30
    439e:	ff 27       	eor	r31, r31
    43a0:	93 58       	subi	r25, 0x83	; 131
    43a2:	5f 4f       	sbci	r21, 0xFF	; 255
    43a4:	2a f0       	brmi	.+10     	; 0x43b0 <__divsf3_pse+0x6c>
    43a6:	9e 3f       	cpi	r25, 0xFE	; 254
    43a8:	51 05       	cpc	r21, r1
    43aa:	68 f0       	brcs	.+26     	; 0x43c6 <__divsf3_pse+0x82>
    43ac:	b6 c0       	rjmp	.+364    	; 0x451a <__fp_inf>
    43ae:	00 c1       	rjmp	.+512    	; 0x45b0 <__fp_szero>
    43b0:	5f 3f       	cpi	r21, 0xFF	; 255
    43b2:	ec f3       	brlt	.-6      	; 0x43ae <__divsf3_pse+0x6a>
    43b4:	98 3e       	cpi	r25, 0xE8	; 232
    43b6:	dc f3       	brlt	.-10     	; 0x43ae <__divsf3_pse+0x6a>
    43b8:	86 95       	lsr	r24
    43ba:	77 95       	ror	r23
    43bc:	67 95       	ror	r22
    43be:	b7 95       	ror	r27
    43c0:	f7 95       	ror	r31
    43c2:	9f 5f       	subi	r25, 0xFF	; 255
    43c4:	c9 f7       	brne	.-14     	; 0x43b8 <__divsf3_pse+0x74>
    43c6:	88 0f       	add	r24, r24
    43c8:	91 1d       	adc	r25, r1
    43ca:	96 95       	lsr	r25
    43cc:	87 95       	ror	r24
    43ce:	97 f9       	bld	r25, 7
    43d0:	08 95       	ret
    43d2:	e1 e0       	ldi	r30, 0x01	; 1
    43d4:	66 0f       	add	r22, r22
    43d6:	77 1f       	adc	r23, r23
    43d8:	88 1f       	adc	r24, r24
    43da:	bb 1f       	adc	r27, r27
    43dc:	62 17       	cp	r22, r18
    43de:	73 07       	cpc	r23, r19
    43e0:	84 07       	cpc	r24, r20
    43e2:	ba 07       	cpc	r27, r26
    43e4:	20 f0       	brcs	.+8      	; 0x43ee <__divsf3_pse+0xaa>
    43e6:	62 1b       	sub	r22, r18
    43e8:	73 0b       	sbc	r23, r19
    43ea:	84 0b       	sbc	r24, r20
    43ec:	ba 0b       	sbc	r27, r26
    43ee:	ee 1f       	adc	r30, r30
    43f0:	88 f7       	brcc	.-30     	; 0x43d4 <__divsf3_pse+0x90>
    43f2:	e0 95       	com	r30
    43f4:	08 95       	ret

000043f6 <__fixsfsi>:
    43f6:	04 d0       	rcall	.+8      	; 0x4400 <__fixunssfsi>
    43f8:	68 94       	set
    43fa:	b1 11       	cpse	r27, r1
    43fc:	d9 c0       	rjmp	.+434    	; 0x45b0 <__fp_szero>
    43fe:	08 95       	ret

00004400 <__fixunssfsi>:
    4400:	bc d0       	rcall	.+376    	; 0x457a <__fp_splitA>
    4402:	88 f0       	brcs	.+34     	; 0x4426 <__fixunssfsi+0x26>
    4404:	9f 57       	subi	r25, 0x7F	; 127
    4406:	90 f0       	brcs	.+36     	; 0x442c <__fixunssfsi+0x2c>
    4408:	b9 2f       	mov	r27, r25
    440a:	99 27       	eor	r25, r25
    440c:	b7 51       	subi	r27, 0x17	; 23
    440e:	a0 f0       	brcs	.+40     	; 0x4438 <__fixunssfsi+0x38>
    4410:	d1 f0       	breq	.+52     	; 0x4446 <__fixunssfsi+0x46>
    4412:	66 0f       	add	r22, r22
    4414:	77 1f       	adc	r23, r23
    4416:	88 1f       	adc	r24, r24
    4418:	99 1f       	adc	r25, r25
    441a:	1a f0       	brmi	.+6      	; 0x4422 <__fixunssfsi+0x22>
    441c:	ba 95       	dec	r27
    441e:	c9 f7       	brne	.-14     	; 0x4412 <__fixunssfsi+0x12>
    4420:	12 c0       	rjmp	.+36     	; 0x4446 <__fixunssfsi+0x46>
    4422:	b1 30       	cpi	r27, 0x01	; 1
    4424:	81 f0       	breq	.+32     	; 0x4446 <__fixunssfsi+0x46>
    4426:	c3 d0       	rcall	.+390    	; 0x45ae <__fp_zero>
    4428:	b1 e0       	ldi	r27, 0x01	; 1
    442a:	08 95       	ret
    442c:	c0 c0       	rjmp	.+384    	; 0x45ae <__fp_zero>
    442e:	67 2f       	mov	r22, r23
    4430:	78 2f       	mov	r23, r24
    4432:	88 27       	eor	r24, r24
    4434:	b8 5f       	subi	r27, 0xF8	; 248
    4436:	39 f0       	breq	.+14     	; 0x4446 <__fixunssfsi+0x46>
    4438:	b9 3f       	cpi	r27, 0xF9	; 249
    443a:	cc f3       	brlt	.-14     	; 0x442e <__fixunssfsi+0x2e>
    443c:	86 95       	lsr	r24
    443e:	77 95       	ror	r23
    4440:	67 95       	ror	r22
    4442:	b3 95       	inc	r27
    4444:	d9 f7       	brne	.-10     	; 0x443c <__fixunssfsi+0x3c>
    4446:	3e f4       	brtc	.+14     	; 0x4456 <__fixunssfsi+0x56>
    4448:	90 95       	com	r25
    444a:	80 95       	com	r24
    444c:	70 95       	com	r23
    444e:	61 95       	neg	r22
    4450:	7f 4f       	sbci	r23, 0xFF	; 255
    4452:	8f 4f       	sbci	r24, 0xFF	; 255
    4454:	9f 4f       	sbci	r25, 0xFF	; 255
    4456:	08 95       	ret

00004458 <__floatunsisf>:
    4458:	e8 94       	clt
    445a:	09 c0       	rjmp	.+18     	; 0x446e <__floatsisf+0x12>

0000445c <__floatsisf>:
    445c:	97 fb       	bst	r25, 7
    445e:	3e f4       	brtc	.+14     	; 0x446e <__floatsisf+0x12>
    4460:	90 95       	com	r25
    4462:	80 95       	com	r24
    4464:	70 95       	com	r23
    4466:	61 95       	neg	r22
    4468:	7f 4f       	sbci	r23, 0xFF	; 255
    446a:	8f 4f       	sbci	r24, 0xFF	; 255
    446c:	9f 4f       	sbci	r25, 0xFF	; 255
    446e:	99 23       	and	r25, r25
    4470:	a9 f0       	breq	.+42     	; 0x449c <__floatsisf+0x40>
    4472:	f9 2f       	mov	r31, r25
    4474:	96 e9       	ldi	r25, 0x96	; 150
    4476:	bb 27       	eor	r27, r27
    4478:	93 95       	inc	r25
    447a:	f6 95       	lsr	r31
    447c:	87 95       	ror	r24
    447e:	77 95       	ror	r23
    4480:	67 95       	ror	r22
    4482:	b7 95       	ror	r27
    4484:	f1 11       	cpse	r31, r1
    4486:	f8 cf       	rjmp	.-16     	; 0x4478 <__floatsisf+0x1c>
    4488:	fa f4       	brpl	.+62     	; 0x44c8 <__floatsisf+0x6c>
    448a:	bb 0f       	add	r27, r27
    448c:	11 f4       	brne	.+4      	; 0x4492 <__floatsisf+0x36>
    448e:	60 ff       	sbrs	r22, 0
    4490:	1b c0       	rjmp	.+54     	; 0x44c8 <__floatsisf+0x6c>
    4492:	6f 5f       	subi	r22, 0xFF	; 255
    4494:	7f 4f       	sbci	r23, 0xFF	; 255
    4496:	8f 4f       	sbci	r24, 0xFF	; 255
    4498:	9f 4f       	sbci	r25, 0xFF	; 255
    449a:	16 c0       	rjmp	.+44     	; 0x44c8 <__floatsisf+0x6c>
    449c:	88 23       	and	r24, r24
    449e:	11 f0       	breq	.+4      	; 0x44a4 <__floatsisf+0x48>
    44a0:	96 e9       	ldi	r25, 0x96	; 150
    44a2:	11 c0       	rjmp	.+34     	; 0x44c6 <__floatsisf+0x6a>
    44a4:	77 23       	and	r23, r23
    44a6:	21 f0       	breq	.+8      	; 0x44b0 <__floatsisf+0x54>
    44a8:	9e e8       	ldi	r25, 0x8E	; 142
    44aa:	87 2f       	mov	r24, r23
    44ac:	76 2f       	mov	r23, r22
    44ae:	05 c0       	rjmp	.+10     	; 0x44ba <__floatsisf+0x5e>
    44b0:	66 23       	and	r22, r22
    44b2:	71 f0       	breq	.+28     	; 0x44d0 <__floatsisf+0x74>
    44b4:	96 e8       	ldi	r25, 0x86	; 134
    44b6:	86 2f       	mov	r24, r22
    44b8:	70 e0       	ldi	r23, 0x00	; 0
    44ba:	60 e0       	ldi	r22, 0x00	; 0
    44bc:	2a f0       	brmi	.+10     	; 0x44c8 <__floatsisf+0x6c>
    44be:	9a 95       	dec	r25
    44c0:	66 0f       	add	r22, r22
    44c2:	77 1f       	adc	r23, r23
    44c4:	88 1f       	adc	r24, r24
    44c6:	da f7       	brpl	.-10     	; 0x44be <__floatsisf+0x62>
    44c8:	88 0f       	add	r24, r24
    44ca:	96 95       	lsr	r25
    44cc:	87 95       	ror	r24
    44ce:	97 f9       	bld	r25, 7
    44d0:	08 95       	ret

000044d2 <__fp_cmp>:
    44d2:	99 0f       	add	r25, r25
    44d4:	00 08       	sbc	r0, r0
    44d6:	55 0f       	add	r21, r21
    44d8:	aa 0b       	sbc	r26, r26
    44da:	e0 e8       	ldi	r30, 0x80	; 128
    44dc:	fe ef       	ldi	r31, 0xFE	; 254
    44de:	16 16       	cp	r1, r22
    44e0:	17 06       	cpc	r1, r23
    44e2:	e8 07       	cpc	r30, r24
    44e4:	f9 07       	cpc	r31, r25
    44e6:	c0 f0       	brcs	.+48     	; 0x4518 <__fp_cmp+0x46>
    44e8:	12 16       	cp	r1, r18
    44ea:	13 06       	cpc	r1, r19
    44ec:	e4 07       	cpc	r30, r20
    44ee:	f5 07       	cpc	r31, r21
    44f0:	98 f0       	brcs	.+38     	; 0x4518 <__fp_cmp+0x46>
    44f2:	62 1b       	sub	r22, r18
    44f4:	73 0b       	sbc	r23, r19
    44f6:	84 0b       	sbc	r24, r20
    44f8:	95 0b       	sbc	r25, r21
    44fa:	39 f4       	brne	.+14     	; 0x450a <__fp_cmp+0x38>
    44fc:	0a 26       	eor	r0, r26
    44fe:	61 f0       	breq	.+24     	; 0x4518 <__fp_cmp+0x46>
    4500:	23 2b       	or	r18, r19
    4502:	24 2b       	or	r18, r20
    4504:	25 2b       	or	r18, r21
    4506:	21 f4       	brne	.+8      	; 0x4510 <__fp_cmp+0x3e>
    4508:	08 95       	ret
    450a:	0a 26       	eor	r0, r26
    450c:	09 f4       	brne	.+2      	; 0x4510 <__fp_cmp+0x3e>
    450e:	a1 40       	sbci	r26, 0x01	; 1
    4510:	a6 95       	lsr	r26
    4512:	8f ef       	ldi	r24, 0xFF	; 255
    4514:	81 1d       	adc	r24, r1
    4516:	81 1d       	adc	r24, r1
    4518:	08 95       	ret

0000451a <__fp_inf>:
    451a:	97 f9       	bld	r25, 7
    451c:	9f 67       	ori	r25, 0x7F	; 127
    451e:	80 e8       	ldi	r24, 0x80	; 128
    4520:	70 e0       	ldi	r23, 0x00	; 0
    4522:	60 e0       	ldi	r22, 0x00	; 0
    4524:	08 95       	ret

00004526 <__fp_nan>:
    4526:	9f ef       	ldi	r25, 0xFF	; 255
    4528:	80 ec       	ldi	r24, 0xC0	; 192
    452a:	08 95       	ret

0000452c <__fp_pscA>:
    452c:	00 24       	eor	r0, r0
    452e:	0a 94       	dec	r0
    4530:	16 16       	cp	r1, r22
    4532:	17 06       	cpc	r1, r23
    4534:	18 06       	cpc	r1, r24
    4536:	09 06       	cpc	r0, r25
    4538:	08 95       	ret

0000453a <__fp_pscB>:
    453a:	00 24       	eor	r0, r0
    453c:	0a 94       	dec	r0
    453e:	12 16       	cp	r1, r18
    4540:	13 06       	cpc	r1, r19
    4542:	14 06       	cpc	r1, r20
    4544:	05 06       	cpc	r0, r21
    4546:	08 95       	ret

00004548 <__fp_round>:
    4548:	09 2e       	mov	r0, r25
    454a:	03 94       	inc	r0
    454c:	00 0c       	add	r0, r0
    454e:	11 f4       	brne	.+4      	; 0x4554 <__fp_round+0xc>
    4550:	88 23       	and	r24, r24
    4552:	52 f0       	brmi	.+20     	; 0x4568 <__fp_round+0x20>
    4554:	bb 0f       	add	r27, r27
    4556:	40 f4       	brcc	.+16     	; 0x4568 <__fp_round+0x20>
    4558:	bf 2b       	or	r27, r31
    455a:	11 f4       	brne	.+4      	; 0x4560 <__fp_round+0x18>
    455c:	60 ff       	sbrs	r22, 0
    455e:	04 c0       	rjmp	.+8      	; 0x4568 <__fp_round+0x20>
    4560:	6f 5f       	subi	r22, 0xFF	; 255
    4562:	7f 4f       	sbci	r23, 0xFF	; 255
    4564:	8f 4f       	sbci	r24, 0xFF	; 255
    4566:	9f 4f       	sbci	r25, 0xFF	; 255
    4568:	08 95       	ret

0000456a <__fp_split3>:
    456a:	57 fd       	sbrc	r21, 7
    456c:	90 58       	subi	r25, 0x80	; 128
    456e:	44 0f       	add	r20, r20
    4570:	55 1f       	adc	r21, r21
    4572:	59 f0       	breq	.+22     	; 0x458a <__fp_splitA+0x10>
    4574:	5f 3f       	cpi	r21, 0xFF	; 255
    4576:	71 f0       	breq	.+28     	; 0x4594 <__fp_splitA+0x1a>
    4578:	47 95       	ror	r20

0000457a <__fp_splitA>:
    457a:	88 0f       	add	r24, r24
    457c:	97 fb       	bst	r25, 7
    457e:	99 1f       	adc	r25, r25
    4580:	61 f0       	breq	.+24     	; 0x459a <__fp_splitA+0x20>
    4582:	9f 3f       	cpi	r25, 0xFF	; 255
    4584:	79 f0       	breq	.+30     	; 0x45a4 <__fp_splitA+0x2a>
    4586:	87 95       	ror	r24
    4588:	08 95       	ret
    458a:	12 16       	cp	r1, r18
    458c:	13 06       	cpc	r1, r19
    458e:	14 06       	cpc	r1, r20
    4590:	55 1f       	adc	r21, r21
    4592:	f2 cf       	rjmp	.-28     	; 0x4578 <__fp_split3+0xe>
    4594:	46 95       	lsr	r20
    4596:	f1 df       	rcall	.-30     	; 0x457a <__fp_splitA>
    4598:	08 c0       	rjmp	.+16     	; 0x45aa <__fp_splitA+0x30>
    459a:	16 16       	cp	r1, r22
    459c:	17 06       	cpc	r1, r23
    459e:	18 06       	cpc	r1, r24
    45a0:	99 1f       	adc	r25, r25
    45a2:	f1 cf       	rjmp	.-30     	; 0x4586 <__fp_splitA+0xc>
    45a4:	86 95       	lsr	r24
    45a6:	71 05       	cpc	r23, r1
    45a8:	61 05       	cpc	r22, r1
    45aa:	08 94       	sec
    45ac:	08 95       	ret

000045ae <__fp_zero>:
    45ae:	e8 94       	clt

000045b0 <__fp_szero>:
    45b0:	bb 27       	eor	r27, r27
    45b2:	66 27       	eor	r22, r22
    45b4:	77 27       	eor	r23, r23
    45b6:	cb 01       	movw	r24, r22
    45b8:	97 f9       	bld	r25, 7
    45ba:	08 95       	ret

000045bc <__gesf2>:
    45bc:	8a df       	rcall	.-236    	; 0x44d2 <__fp_cmp>
    45be:	08 f4       	brcc	.+2      	; 0x45c2 <__gesf2+0x6>
    45c0:	8f ef       	ldi	r24, 0xFF	; 255
    45c2:	08 95       	ret

000045c4 <__mulsf3>:
    45c4:	0b d0       	rcall	.+22     	; 0x45dc <__mulsf3x>
    45c6:	c0 cf       	rjmp	.-128    	; 0x4548 <__fp_round>
    45c8:	b1 df       	rcall	.-158    	; 0x452c <__fp_pscA>
    45ca:	28 f0       	brcs	.+10     	; 0x45d6 <__mulsf3+0x12>
    45cc:	b6 df       	rcall	.-148    	; 0x453a <__fp_pscB>
    45ce:	18 f0       	brcs	.+6      	; 0x45d6 <__mulsf3+0x12>
    45d0:	95 23       	and	r25, r21
    45d2:	09 f0       	breq	.+2      	; 0x45d6 <__mulsf3+0x12>
    45d4:	a2 cf       	rjmp	.-188    	; 0x451a <__fp_inf>
    45d6:	a7 cf       	rjmp	.-178    	; 0x4526 <__fp_nan>
    45d8:	11 24       	eor	r1, r1
    45da:	ea cf       	rjmp	.-44     	; 0x45b0 <__fp_szero>

000045dc <__mulsf3x>:
    45dc:	c6 df       	rcall	.-116    	; 0x456a <__fp_split3>
    45de:	a0 f3       	brcs	.-24     	; 0x45c8 <__mulsf3+0x4>

000045e0 <__mulsf3_pse>:
    45e0:	95 9f       	mul	r25, r21
    45e2:	d1 f3       	breq	.-12     	; 0x45d8 <__mulsf3+0x14>
    45e4:	95 0f       	add	r25, r21
    45e6:	50 e0       	ldi	r21, 0x00	; 0
    45e8:	55 1f       	adc	r21, r21
    45ea:	62 9f       	mul	r22, r18
    45ec:	f0 01       	movw	r30, r0
    45ee:	72 9f       	mul	r23, r18
    45f0:	bb 27       	eor	r27, r27
    45f2:	f0 0d       	add	r31, r0
    45f4:	b1 1d       	adc	r27, r1
    45f6:	63 9f       	mul	r22, r19
    45f8:	aa 27       	eor	r26, r26
    45fa:	f0 0d       	add	r31, r0
    45fc:	b1 1d       	adc	r27, r1
    45fe:	aa 1f       	adc	r26, r26
    4600:	64 9f       	mul	r22, r20
    4602:	66 27       	eor	r22, r22
    4604:	b0 0d       	add	r27, r0
    4606:	a1 1d       	adc	r26, r1
    4608:	66 1f       	adc	r22, r22
    460a:	82 9f       	mul	r24, r18
    460c:	22 27       	eor	r18, r18
    460e:	b0 0d       	add	r27, r0
    4610:	a1 1d       	adc	r26, r1
    4612:	62 1f       	adc	r22, r18
    4614:	73 9f       	mul	r23, r19
    4616:	b0 0d       	add	r27, r0
    4618:	a1 1d       	adc	r26, r1
    461a:	62 1f       	adc	r22, r18
    461c:	83 9f       	mul	r24, r19
    461e:	a0 0d       	add	r26, r0
    4620:	61 1d       	adc	r22, r1
    4622:	22 1f       	adc	r18, r18
    4624:	74 9f       	mul	r23, r20
    4626:	33 27       	eor	r19, r19
    4628:	a0 0d       	add	r26, r0
    462a:	61 1d       	adc	r22, r1
    462c:	23 1f       	adc	r18, r19
    462e:	84 9f       	mul	r24, r20
    4630:	60 0d       	add	r22, r0
    4632:	21 1d       	adc	r18, r1
    4634:	82 2f       	mov	r24, r18
    4636:	76 2f       	mov	r23, r22
    4638:	6a 2f       	mov	r22, r26
    463a:	11 24       	eor	r1, r1
    463c:	9f 57       	subi	r25, 0x7F	; 127
    463e:	50 40       	sbci	r21, 0x00	; 0
    4640:	8a f0       	brmi	.+34     	; 0x4664 <__mulsf3_pse+0x84>
    4642:	e1 f0       	breq	.+56     	; 0x467c <__mulsf3_pse+0x9c>
    4644:	88 23       	and	r24, r24
    4646:	4a f0       	brmi	.+18     	; 0x465a <__mulsf3_pse+0x7a>
    4648:	ee 0f       	add	r30, r30
    464a:	ff 1f       	adc	r31, r31
    464c:	bb 1f       	adc	r27, r27
    464e:	66 1f       	adc	r22, r22
    4650:	77 1f       	adc	r23, r23
    4652:	88 1f       	adc	r24, r24
    4654:	91 50       	subi	r25, 0x01	; 1
    4656:	50 40       	sbci	r21, 0x00	; 0
    4658:	a9 f7       	brne	.-22     	; 0x4644 <__mulsf3_pse+0x64>
    465a:	9e 3f       	cpi	r25, 0xFE	; 254
    465c:	51 05       	cpc	r21, r1
    465e:	70 f0       	brcs	.+28     	; 0x467c <__mulsf3_pse+0x9c>
    4660:	5c cf       	rjmp	.-328    	; 0x451a <__fp_inf>
    4662:	a6 cf       	rjmp	.-180    	; 0x45b0 <__fp_szero>
    4664:	5f 3f       	cpi	r21, 0xFF	; 255
    4666:	ec f3       	brlt	.-6      	; 0x4662 <__mulsf3_pse+0x82>
    4668:	98 3e       	cpi	r25, 0xE8	; 232
    466a:	dc f3       	brlt	.-10     	; 0x4662 <__mulsf3_pse+0x82>
    466c:	86 95       	lsr	r24
    466e:	77 95       	ror	r23
    4670:	67 95       	ror	r22
    4672:	b7 95       	ror	r27
    4674:	f7 95       	ror	r31
    4676:	e7 95       	ror	r30
    4678:	9f 5f       	subi	r25, 0xFF	; 255
    467a:	c1 f7       	brne	.-16     	; 0x466c <__mulsf3_pse+0x8c>
    467c:	fe 2b       	or	r31, r30
    467e:	88 0f       	add	r24, r24
    4680:	91 1d       	adc	r25, r1
    4682:	96 95       	lsr	r25
    4684:	87 95       	ror	r24
    4686:	97 f9       	bld	r25, 7
    4688:	08 95       	ret

0000468a <pow>:
    468a:	fa 01       	movw	r30, r20
    468c:	ee 0f       	add	r30, r30
    468e:	ff 1f       	adc	r31, r31
    4690:	30 96       	adiw	r30, 0x00	; 0
    4692:	21 05       	cpc	r18, r1
    4694:	31 05       	cpc	r19, r1
    4696:	99 f1       	breq	.+102    	; 0x46fe <pow+0x74>
    4698:	61 15       	cp	r22, r1
    469a:	71 05       	cpc	r23, r1
    469c:	61 f4       	brne	.+24     	; 0x46b6 <pow+0x2c>
    469e:	80 38       	cpi	r24, 0x80	; 128
    46a0:	bf e3       	ldi	r27, 0x3F	; 63
    46a2:	9b 07       	cpc	r25, r27
    46a4:	49 f1       	breq	.+82     	; 0x46f8 <pow+0x6e>
    46a6:	68 94       	set
    46a8:	90 38       	cpi	r25, 0x80	; 128
    46aa:	81 05       	cpc	r24, r1
    46ac:	61 f0       	breq	.+24     	; 0x46c6 <pow+0x3c>
    46ae:	80 38       	cpi	r24, 0x80	; 128
    46b0:	bf ef       	ldi	r27, 0xFF	; 255
    46b2:	9b 07       	cpc	r25, r27
    46b4:	41 f0       	breq	.+16     	; 0x46c6 <pow+0x3c>
    46b6:	99 23       	and	r25, r25
    46b8:	42 f5       	brpl	.+80     	; 0x470a <pow+0x80>
    46ba:	ff 3f       	cpi	r31, 0xFF	; 255
    46bc:	e1 05       	cpc	r30, r1
    46be:	31 05       	cpc	r19, r1
    46c0:	21 05       	cpc	r18, r1
    46c2:	11 f1       	breq	.+68     	; 0x4708 <pow+0x7e>
    46c4:	e8 94       	clt
    46c6:	08 94       	sec
    46c8:	e7 95       	ror	r30
    46ca:	d9 01       	movw	r26, r18
    46cc:	aa 23       	and	r26, r26
    46ce:	29 f4       	brne	.+10     	; 0x46da <pow+0x50>
    46d0:	ab 2f       	mov	r26, r27
    46d2:	be 2f       	mov	r27, r30
    46d4:	f8 5f       	subi	r31, 0xF8	; 248
    46d6:	d0 f3       	brcs	.-12     	; 0x46cc <pow+0x42>
    46d8:	10 c0       	rjmp	.+32     	; 0x46fa <pow+0x70>
    46da:	ff 5f       	subi	r31, 0xFF	; 255
    46dc:	70 f4       	brcc	.+28     	; 0x46fa <pow+0x70>
    46de:	a6 95       	lsr	r26
    46e0:	e0 f7       	brcc	.-8      	; 0x46da <pow+0x50>
    46e2:	f7 39       	cpi	r31, 0x97	; 151
    46e4:	50 f0       	brcs	.+20     	; 0x46fa <pow+0x70>
    46e6:	19 f0       	breq	.+6      	; 0x46ee <pow+0x64>
    46e8:	ff 3a       	cpi	r31, 0xAF	; 175
    46ea:	38 f4       	brcc	.+14     	; 0x46fa <pow+0x70>
    46ec:	9f 77       	andi	r25, 0x7F	; 127
    46ee:	9f 93       	push	r25
    46f0:	0c d0       	rcall	.+24     	; 0x470a <pow+0x80>
    46f2:	0f 90       	pop	r0
    46f4:	07 fc       	sbrc	r0, 7
    46f6:	90 58       	subi	r25, 0x80	; 128
    46f8:	08 95       	ret
    46fa:	3e f0       	brts	.+14     	; 0x470a <pow+0x80>
    46fc:	14 cf       	rjmp	.-472    	; 0x4526 <__fp_nan>
    46fe:	60 e0       	ldi	r22, 0x00	; 0
    4700:	70 e0       	ldi	r23, 0x00	; 0
    4702:	80 e8       	ldi	r24, 0x80	; 128
    4704:	9f e3       	ldi	r25, 0x3F	; 63
    4706:	08 95       	ret
    4708:	4f e7       	ldi	r20, 0x7F	; 127
    470a:	9f 77       	andi	r25, 0x7F	; 127
    470c:	5f 93       	push	r21
    470e:	4f 93       	push	r20
    4710:	3f 93       	push	r19
    4712:	2f 93       	push	r18
    4714:	9e d0       	rcall	.+316    	; 0x4852 <log>
    4716:	2f 91       	pop	r18
    4718:	3f 91       	pop	r19
    471a:	4f 91       	pop	r20
    471c:	5f 91       	pop	r21
    471e:	52 df       	rcall	.-348    	; 0x45c4 <__mulsf3>
    4720:	05 c0       	rjmp	.+10     	; 0x472c <exp>
    4722:	19 f4       	brne	.+6      	; 0x472a <pow+0xa0>
    4724:	0e f0       	brts	.+2      	; 0x4728 <pow+0x9e>
    4726:	f9 ce       	rjmp	.-526    	; 0x451a <__fp_inf>
    4728:	42 cf       	rjmp	.-380    	; 0x45ae <__fp_zero>
    472a:	fd ce       	rjmp	.-518    	; 0x4526 <__fp_nan>

0000472c <exp>:
    472c:	26 df       	rcall	.-436    	; 0x457a <__fp_splitA>
    472e:	c8 f3       	brcs	.-14     	; 0x4722 <pow+0x98>
    4730:	96 38       	cpi	r25, 0x86	; 134
    4732:	c0 f7       	brcc	.-16     	; 0x4724 <pow+0x9a>
    4734:	07 f8       	bld	r0, 7
    4736:	0f 92       	push	r0
    4738:	e8 94       	clt
    473a:	2b e3       	ldi	r18, 0x3B	; 59
    473c:	3a ea       	ldi	r19, 0xAA	; 170
    473e:	48 eb       	ldi	r20, 0xB8	; 184
    4740:	5f e7       	ldi	r21, 0x7F	; 127
    4742:	4e df       	rcall	.-356    	; 0x45e0 <__mulsf3_pse>
    4744:	0f 92       	push	r0
    4746:	0f 92       	push	r0
    4748:	0f 92       	push	r0
    474a:	4d b7       	in	r20, 0x3d	; 61
    474c:	5e b7       	in	r21, 0x3e	; 62
    474e:	0f 92       	push	r0
    4750:	c0 d0       	rcall	.+384    	; 0x48d2 <modf>
    4752:	e2 e2       	ldi	r30, 0x22	; 34
    4754:	f2 e0       	ldi	r31, 0x02	; 2
    4756:	16 d0       	rcall	.+44     	; 0x4784 <__fp_powser>
    4758:	4f 91       	pop	r20
    475a:	5f 91       	pop	r21
    475c:	ef 91       	pop	r30
    475e:	ff 91       	pop	r31
    4760:	e5 95       	asr	r30
    4762:	ee 1f       	adc	r30, r30
    4764:	ff 1f       	adc	r31, r31
    4766:	49 f0       	breq	.+18     	; 0x477a <exp+0x4e>
    4768:	fe 57       	subi	r31, 0x7E	; 126
    476a:	e0 68       	ori	r30, 0x80	; 128
    476c:	44 27       	eor	r20, r20
    476e:	ee 0f       	add	r30, r30
    4770:	44 1f       	adc	r20, r20
    4772:	fa 95       	dec	r31
    4774:	e1 f7       	brne	.-8      	; 0x476e <exp+0x42>
    4776:	41 95       	neg	r20
    4778:	55 0b       	sbc	r21, r21
    477a:	32 d0       	rcall	.+100    	; 0x47e0 <ldexp>
    477c:	0f 90       	pop	r0
    477e:	07 fe       	sbrs	r0, 7
    4780:	26 c0       	rjmp	.+76     	; 0x47ce <inverse>
    4782:	08 95       	ret

00004784 <__fp_powser>:
    4784:	df 93       	push	r29
    4786:	cf 93       	push	r28
    4788:	1f 93       	push	r17
    478a:	0f 93       	push	r16
    478c:	ff 92       	push	r15
    478e:	ef 92       	push	r14
    4790:	df 92       	push	r13
    4792:	7b 01       	movw	r14, r22
    4794:	8c 01       	movw	r16, r24
    4796:	68 94       	set
    4798:	05 c0       	rjmp	.+10     	; 0x47a4 <__fp_powser+0x20>
    479a:	da 2e       	mov	r13, r26
    479c:	ef 01       	movw	r28, r30
    479e:	1e df       	rcall	.-452    	; 0x45dc <__mulsf3x>
    47a0:	fe 01       	movw	r30, r28
    47a2:	e8 94       	clt
    47a4:	a5 91       	lpm	r26, Z+
    47a6:	25 91       	lpm	r18, Z+
    47a8:	35 91       	lpm	r19, Z+
    47aa:	45 91       	lpm	r20, Z+
    47ac:	55 91       	lpm	r21, Z+
    47ae:	ae f3       	brts	.-22     	; 0x479a <__fp_powser+0x16>
    47b0:	ef 01       	movw	r28, r30
    47b2:	62 dd       	rcall	.-1340   	; 0x4278 <__addsf3x>
    47b4:	fe 01       	movw	r30, r28
    47b6:	97 01       	movw	r18, r14
    47b8:	a8 01       	movw	r20, r16
    47ba:	da 94       	dec	r13
    47bc:	79 f7       	brne	.-34     	; 0x479c <__fp_powser+0x18>
    47be:	df 90       	pop	r13
    47c0:	ef 90       	pop	r14
    47c2:	ff 90       	pop	r15
    47c4:	0f 91       	pop	r16
    47c6:	1f 91       	pop	r17
    47c8:	cf 91       	pop	r28
    47ca:	df 91       	pop	r29
    47cc:	08 95       	ret

000047ce <inverse>:
    47ce:	9b 01       	movw	r18, r22
    47d0:	ac 01       	movw	r20, r24
    47d2:	60 e0       	ldi	r22, 0x00	; 0
    47d4:	70 e0       	ldi	r23, 0x00	; 0
    47d6:	80 e8       	ldi	r24, 0x80	; 128
    47d8:	9f e3       	ldi	r25, 0x3F	; 63
    47da:	a5 cd       	rjmp	.-1206   	; 0x4326 <__divsf3>
    47dc:	9e ce       	rjmp	.-708    	; 0x451a <__fp_inf>
    47de:	ac c0       	rjmp	.+344    	; 0x4938 <__fp_mpack>

000047e0 <ldexp>:
    47e0:	cc de       	rcall	.-616    	; 0x457a <__fp_splitA>
    47e2:	e8 f3       	brcs	.-6      	; 0x47de <inverse+0x10>
    47e4:	99 23       	and	r25, r25
    47e6:	d9 f3       	breq	.-10     	; 0x47de <inverse+0x10>
    47e8:	94 0f       	add	r25, r20
    47ea:	51 1d       	adc	r21, r1
    47ec:	bb f3       	brvs	.-18     	; 0x47dc <inverse+0xe>
    47ee:	91 50       	subi	r25, 0x01	; 1
    47f0:	50 40       	sbci	r21, 0x00	; 0
    47f2:	94 f0       	brlt	.+36     	; 0x4818 <ldexp+0x38>
    47f4:	59 f0       	breq	.+22     	; 0x480c <ldexp+0x2c>
    47f6:	88 23       	and	r24, r24
    47f8:	32 f0       	brmi	.+12     	; 0x4806 <ldexp+0x26>
    47fa:	66 0f       	add	r22, r22
    47fc:	77 1f       	adc	r23, r23
    47fe:	88 1f       	adc	r24, r24
    4800:	91 50       	subi	r25, 0x01	; 1
    4802:	50 40       	sbci	r21, 0x00	; 0
    4804:	c1 f7       	brne	.-16     	; 0x47f6 <ldexp+0x16>
    4806:	9e 3f       	cpi	r25, 0xFE	; 254
    4808:	51 05       	cpc	r21, r1
    480a:	44 f7       	brge	.-48     	; 0x47dc <inverse+0xe>
    480c:	88 0f       	add	r24, r24
    480e:	91 1d       	adc	r25, r1
    4810:	96 95       	lsr	r25
    4812:	87 95       	ror	r24
    4814:	97 f9       	bld	r25, 7
    4816:	08 95       	ret
    4818:	5f 3f       	cpi	r21, 0xFF	; 255
    481a:	ac f0       	brlt	.+42     	; 0x4846 <ldexp+0x66>
    481c:	98 3e       	cpi	r25, 0xE8	; 232
    481e:	9c f0       	brlt	.+38     	; 0x4846 <ldexp+0x66>
    4820:	bb 27       	eor	r27, r27
    4822:	86 95       	lsr	r24
    4824:	77 95       	ror	r23
    4826:	67 95       	ror	r22
    4828:	b7 95       	ror	r27
    482a:	08 f4       	brcc	.+2      	; 0x482e <ldexp+0x4e>
    482c:	b1 60       	ori	r27, 0x01	; 1
    482e:	93 95       	inc	r25
    4830:	c1 f7       	brne	.-16     	; 0x4822 <ldexp+0x42>
    4832:	bb 0f       	add	r27, r27
    4834:	58 f7       	brcc	.-42     	; 0x480c <ldexp+0x2c>
    4836:	11 f4       	brne	.+4      	; 0x483c <ldexp+0x5c>
    4838:	60 ff       	sbrs	r22, 0
    483a:	e8 cf       	rjmp	.-48     	; 0x480c <ldexp+0x2c>
    483c:	6f 5f       	subi	r22, 0xFF	; 255
    483e:	7f 4f       	sbci	r23, 0xFF	; 255
    4840:	8f 4f       	sbci	r24, 0xFF	; 255
    4842:	9f 4f       	sbci	r25, 0xFF	; 255
    4844:	e3 cf       	rjmp	.-58     	; 0x480c <ldexp+0x2c>
    4846:	b4 ce       	rjmp	.-664    	; 0x45b0 <__fp_szero>
    4848:	0e f0       	brts	.+2      	; 0x484c <ldexp+0x6c>
    484a:	76 c0       	rjmp	.+236    	; 0x4938 <__fp_mpack>
    484c:	6c ce       	rjmp	.-808    	; 0x4526 <__fp_nan>
    484e:	68 94       	set
    4850:	64 ce       	rjmp	.-824    	; 0x451a <__fp_inf>

00004852 <log>:
    4852:	93 de       	rcall	.-730    	; 0x457a <__fp_splitA>
    4854:	c8 f3       	brcs	.-14     	; 0x4848 <ldexp+0x68>
    4856:	99 23       	and	r25, r25
    4858:	d1 f3       	breq	.-12     	; 0x484e <ldexp+0x6e>
    485a:	c6 f3       	brts	.-16     	; 0x484c <ldexp+0x6c>
    485c:	df 93       	push	r29
    485e:	cf 93       	push	r28
    4860:	1f 93       	push	r17
    4862:	0f 93       	push	r16
    4864:	ff 92       	push	r15
    4866:	c9 2f       	mov	r28, r25
    4868:	dd 27       	eor	r29, r29
    486a:	88 23       	and	r24, r24
    486c:	2a f0       	brmi	.+10     	; 0x4878 <log+0x26>
    486e:	21 97       	sbiw	r28, 0x01	; 1
    4870:	66 0f       	add	r22, r22
    4872:	77 1f       	adc	r23, r23
    4874:	88 1f       	adc	r24, r24
    4876:	da f7       	brpl	.-10     	; 0x486e <log+0x1c>
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	40 e8       	ldi	r20, 0x80	; 128
    487e:	5f eb       	ldi	r21, 0xBF	; 191
    4880:	9f e3       	ldi	r25, 0x3F	; 63
    4882:	88 39       	cpi	r24, 0x98	; 152
    4884:	20 f0       	brcs	.+8      	; 0x488e <log+0x3c>
    4886:	80 3e       	cpi	r24, 0xE0	; 224
    4888:	30 f0       	brcs	.+12     	; 0x4896 <log+0x44>
    488a:	21 96       	adiw	r28, 0x01	; 1
    488c:	8f 77       	andi	r24, 0x7F	; 127
    488e:	e3 dc       	rcall	.-1594   	; 0x4256 <__addsf3>
    4890:	ea e4       	ldi	r30, 0x4A	; 74
    4892:	f2 e0       	ldi	r31, 0x02	; 2
    4894:	03 c0       	rjmp	.+6      	; 0x489c <log+0x4a>
    4896:	df dc       	rcall	.-1602   	; 0x4256 <__addsf3>
    4898:	e7 e7       	ldi	r30, 0x77	; 119
    489a:	f2 e0       	ldi	r31, 0x02	; 2
    489c:	73 df       	rcall	.-282    	; 0x4784 <__fp_powser>
    489e:	8b 01       	movw	r16, r22
    48a0:	be 01       	movw	r22, r28
    48a2:	ec 01       	movw	r28, r24
    48a4:	fb 2e       	mov	r15, r27
    48a6:	6f 57       	subi	r22, 0x7F	; 127
    48a8:	71 09       	sbc	r23, r1
    48aa:	75 95       	asr	r23
    48ac:	77 1f       	adc	r23, r23
    48ae:	88 0b       	sbc	r24, r24
    48b0:	99 0b       	sbc	r25, r25
    48b2:	d4 dd       	rcall	.-1112   	; 0x445c <__floatsisf>
    48b4:	28 e1       	ldi	r18, 0x18	; 24
    48b6:	32 e7       	ldi	r19, 0x72	; 114
    48b8:	41 e3       	ldi	r20, 0x31	; 49
    48ba:	5f e3       	ldi	r21, 0x3F	; 63
    48bc:	8f de       	rcall	.-738    	; 0x45dc <__mulsf3x>
    48be:	af 2d       	mov	r26, r15
    48c0:	98 01       	movw	r18, r16
    48c2:	ae 01       	movw	r20, r28
    48c4:	ff 90       	pop	r15
    48c6:	0f 91       	pop	r16
    48c8:	1f 91       	pop	r17
    48ca:	cf 91       	pop	r28
    48cc:	df 91       	pop	r29
    48ce:	d4 dc       	rcall	.-1624   	; 0x4278 <__addsf3x>
    48d0:	3b ce       	rjmp	.-906    	; 0x4548 <__fp_round>

000048d2 <modf>:
    48d2:	fa 01       	movw	r30, r20
    48d4:	dc 01       	movw	r26, r24
    48d6:	aa 0f       	add	r26, r26
    48d8:	bb 1f       	adc	r27, r27
    48da:	9b 01       	movw	r18, r22
    48dc:	ac 01       	movw	r20, r24
    48de:	bf 57       	subi	r27, 0x7F	; 127
    48e0:	28 f4       	brcc	.+10     	; 0x48ec <modf+0x1a>
    48e2:	22 27       	eor	r18, r18
    48e4:	33 27       	eor	r19, r19
    48e6:	44 27       	eor	r20, r20
    48e8:	50 78       	andi	r21, 0x80	; 128
    48ea:	1f c0       	rjmp	.+62     	; 0x492a <modf+0x58>
    48ec:	b7 51       	subi	r27, 0x17	; 23
    48ee:	88 f4       	brcc	.+34     	; 0x4912 <modf+0x40>
    48f0:	ab 2f       	mov	r26, r27
    48f2:	00 24       	eor	r0, r0
    48f4:	46 95       	lsr	r20
    48f6:	37 95       	ror	r19
    48f8:	27 95       	ror	r18
    48fa:	01 1c       	adc	r0, r1
    48fc:	a3 95       	inc	r26
    48fe:	d2 f3       	brmi	.-12     	; 0x48f4 <modf+0x22>
    4900:	00 20       	and	r0, r0
    4902:	69 f0       	breq	.+26     	; 0x491e <modf+0x4c>
    4904:	22 0f       	add	r18, r18
    4906:	33 1f       	adc	r19, r19
    4908:	44 1f       	adc	r20, r20
    490a:	b3 95       	inc	r27
    490c:	da f3       	brmi	.-10     	; 0x4904 <modf+0x32>
    490e:	0d d0       	rcall	.+26     	; 0x492a <modf+0x58>
    4910:	a1 cc       	rjmp	.-1726   	; 0x4254 <__subsf3>
    4912:	61 30       	cpi	r22, 0x01	; 1
    4914:	71 05       	cpc	r23, r1
    4916:	a0 e8       	ldi	r26, 0x80	; 128
    4918:	8a 07       	cpc	r24, r26
    491a:	b9 46       	sbci	r27, 0x69	; 105
    491c:	30 f4       	brcc	.+12     	; 0x492a <modf+0x58>
    491e:	9b 01       	movw	r18, r22
    4920:	ac 01       	movw	r20, r24
    4922:	66 27       	eor	r22, r22
    4924:	77 27       	eor	r23, r23
    4926:	88 27       	eor	r24, r24
    4928:	90 78       	andi	r25, 0x80	; 128
    492a:	30 96       	adiw	r30, 0x00	; 0
    492c:	21 f0       	breq	.+8      	; 0x4936 <modf+0x64>
    492e:	20 83       	st	Z, r18
    4930:	31 83       	std	Z+1, r19	; 0x01
    4932:	42 83       	std	Z+2, r20	; 0x02
    4934:	53 83       	std	Z+3, r21	; 0x03
    4936:	08 95       	ret

00004938 <__fp_mpack>:
    4938:	9f 3f       	cpi	r25, 0xFF	; 255
    493a:	31 f0       	breq	.+12     	; 0x4948 <__fp_mpack_finite+0xc>

0000493c <__fp_mpack_finite>:
    493c:	91 50       	subi	r25, 0x01	; 1
    493e:	20 f4       	brcc	.+8      	; 0x4948 <__fp_mpack_finite+0xc>
    4940:	87 95       	ror	r24
    4942:	77 95       	ror	r23
    4944:	67 95       	ror	r22
    4946:	b7 95       	ror	r27
    4948:	88 0f       	add	r24, r24
    494a:	91 1d       	adc	r25, r1
    494c:	96 95       	lsr	r25
    494e:	87 95       	ror	r24
    4950:	97 f9       	bld	r25, 7
    4952:	08 95       	ret

00004954 <__mulsi3>:
    4954:	db 01       	movw	r26, r22
    4956:	8f 93       	push	r24
    4958:	9f 93       	push	r25
    495a:	88 d0       	rcall	.+272    	; 0x4a6c <__muluhisi3>
    495c:	bf 91       	pop	r27
    495e:	af 91       	pop	r26
    4960:	a2 9f       	mul	r26, r18
    4962:	80 0d       	add	r24, r0
    4964:	91 1d       	adc	r25, r1
    4966:	a3 9f       	mul	r26, r19
    4968:	90 0d       	add	r25, r0
    496a:	b2 9f       	mul	r27, r18
    496c:	90 0d       	add	r25, r0
    496e:	11 24       	eor	r1, r1
    4970:	08 95       	ret

00004972 <__udivmodhi4>:
    4972:	aa 1b       	sub	r26, r26
    4974:	bb 1b       	sub	r27, r27
    4976:	51 e1       	ldi	r21, 0x11	; 17
    4978:	07 c0       	rjmp	.+14     	; 0x4988 <__udivmodhi4_ep>

0000497a <__udivmodhi4_loop>:
    497a:	aa 1f       	adc	r26, r26
    497c:	bb 1f       	adc	r27, r27
    497e:	a6 17       	cp	r26, r22
    4980:	b7 07       	cpc	r27, r23
    4982:	10 f0       	brcs	.+4      	; 0x4988 <__udivmodhi4_ep>
    4984:	a6 1b       	sub	r26, r22
    4986:	b7 0b       	sbc	r27, r23

00004988 <__udivmodhi4_ep>:
    4988:	88 1f       	adc	r24, r24
    498a:	99 1f       	adc	r25, r25
    498c:	5a 95       	dec	r21
    498e:	a9 f7       	brne	.-22     	; 0x497a <__udivmodhi4_loop>
    4990:	80 95       	com	r24
    4992:	90 95       	com	r25
    4994:	bc 01       	movw	r22, r24
    4996:	cd 01       	movw	r24, r26
    4998:	08 95       	ret

0000499a <__divmodhi4>:
    499a:	97 fb       	bst	r25, 7
    499c:	07 2e       	mov	r0, r23
    499e:	16 f4       	brtc	.+4      	; 0x49a4 <__divmodhi4+0xa>
    49a0:	00 94       	com	r0
    49a2:	06 d0       	rcall	.+12     	; 0x49b0 <__divmodhi4_neg1>
    49a4:	77 fd       	sbrc	r23, 7
    49a6:	08 d0       	rcall	.+16     	; 0x49b8 <__divmodhi4_neg2>
    49a8:	e4 df       	rcall	.-56     	; 0x4972 <__udivmodhi4>
    49aa:	07 fc       	sbrc	r0, 7
    49ac:	05 d0       	rcall	.+10     	; 0x49b8 <__divmodhi4_neg2>
    49ae:	3e f4       	brtc	.+14     	; 0x49be <__divmodhi4_exit>

000049b0 <__divmodhi4_neg1>:
    49b0:	90 95       	com	r25
    49b2:	81 95       	neg	r24
    49b4:	9f 4f       	sbci	r25, 0xFF	; 255
    49b6:	08 95       	ret

000049b8 <__divmodhi4_neg2>:
    49b8:	70 95       	com	r23
    49ba:	61 95       	neg	r22
    49bc:	7f 4f       	sbci	r23, 0xFF	; 255

000049be <__divmodhi4_exit>:
    49be:	08 95       	ret

000049c0 <__udivmodsi4>:
    49c0:	a1 e2       	ldi	r26, 0x21	; 33
    49c2:	1a 2e       	mov	r1, r26
    49c4:	aa 1b       	sub	r26, r26
    49c6:	bb 1b       	sub	r27, r27
    49c8:	fd 01       	movw	r30, r26
    49ca:	0d c0       	rjmp	.+26     	; 0x49e6 <__udivmodsi4_ep>

000049cc <__udivmodsi4_loop>:
    49cc:	aa 1f       	adc	r26, r26
    49ce:	bb 1f       	adc	r27, r27
    49d0:	ee 1f       	adc	r30, r30
    49d2:	ff 1f       	adc	r31, r31
    49d4:	a2 17       	cp	r26, r18
    49d6:	b3 07       	cpc	r27, r19
    49d8:	e4 07       	cpc	r30, r20
    49da:	f5 07       	cpc	r31, r21
    49dc:	20 f0       	brcs	.+8      	; 0x49e6 <__udivmodsi4_ep>
    49de:	a2 1b       	sub	r26, r18
    49e0:	b3 0b       	sbc	r27, r19
    49e2:	e4 0b       	sbc	r30, r20
    49e4:	f5 0b       	sbc	r31, r21

000049e6 <__udivmodsi4_ep>:
    49e6:	66 1f       	adc	r22, r22
    49e8:	77 1f       	adc	r23, r23
    49ea:	88 1f       	adc	r24, r24
    49ec:	99 1f       	adc	r25, r25
    49ee:	1a 94       	dec	r1
    49f0:	69 f7       	brne	.-38     	; 0x49cc <__udivmodsi4_loop>
    49f2:	60 95       	com	r22
    49f4:	70 95       	com	r23
    49f6:	80 95       	com	r24
    49f8:	90 95       	com	r25
    49fa:	9b 01       	movw	r18, r22
    49fc:	ac 01       	movw	r20, r24
    49fe:	bd 01       	movw	r22, r26
    4a00:	cf 01       	movw	r24, r30
    4a02:	08 95       	ret

00004a04 <__divmodsi4>:
    4a04:	05 2e       	mov	r0, r21
    4a06:	97 fb       	bst	r25, 7
    4a08:	16 f4       	brtc	.+4      	; 0x4a0e <__divmodsi4+0xa>
    4a0a:	00 94       	com	r0
    4a0c:	0f d0       	rcall	.+30     	; 0x4a2c <__negsi2>
    4a0e:	57 fd       	sbrc	r21, 7
    4a10:	05 d0       	rcall	.+10     	; 0x4a1c <__divmodsi4_neg2>
    4a12:	d6 df       	rcall	.-84     	; 0x49c0 <__udivmodsi4>
    4a14:	07 fc       	sbrc	r0, 7
    4a16:	02 d0       	rcall	.+4      	; 0x4a1c <__divmodsi4_neg2>
    4a18:	46 f4       	brtc	.+16     	; 0x4a2a <__divmodsi4_exit>
    4a1a:	08 c0       	rjmp	.+16     	; 0x4a2c <__negsi2>

00004a1c <__divmodsi4_neg2>:
    4a1c:	50 95       	com	r21
    4a1e:	40 95       	com	r20
    4a20:	30 95       	com	r19
    4a22:	21 95       	neg	r18
    4a24:	3f 4f       	sbci	r19, 0xFF	; 255
    4a26:	4f 4f       	sbci	r20, 0xFF	; 255
    4a28:	5f 4f       	sbci	r21, 0xFF	; 255

00004a2a <__divmodsi4_exit>:
    4a2a:	08 95       	ret

00004a2c <__negsi2>:
    4a2c:	90 95       	com	r25
    4a2e:	80 95       	com	r24
    4a30:	70 95       	com	r23
    4a32:	61 95       	neg	r22
    4a34:	7f 4f       	sbci	r23, 0xFF	; 255
    4a36:	8f 4f       	sbci	r24, 0xFF	; 255
    4a38:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3a:	08 95       	ret

00004a3c <__tablejump2__>:
    4a3c:	ee 0f       	add	r30, r30
    4a3e:	ff 1f       	adc	r31, r31
    4a40:	88 1f       	adc	r24, r24
    4a42:	8b bf       	out	0x3b, r24	; 59
    4a44:	07 90       	elpm	r0, Z+
    4a46:	f6 91       	elpm	r31, Z
    4a48:	e0 2d       	mov	r30, r0
    4a4a:	1b be       	out	0x3b, r1	; 59
    4a4c:	19 94       	eijmp

00004a4e <__umulhisi3>:
    4a4e:	a2 9f       	mul	r26, r18
    4a50:	b0 01       	movw	r22, r0
    4a52:	b3 9f       	mul	r27, r19
    4a54:	c0 01       	movw	r24, r0
    4a56:	a3 9f       	mul	r26, r19
    4a58:	70 0d       	add	r23, r0
    4a5a:	81 1d       	adc	r24, r1
    4a5c:	11 24       	eor	r1, r1
    4a5e:	91 1d       	adc	r25, r1
    4a60:	b2 9f       	mul	r27, r18
    4a62:	70 0d       	add	r23, r0
    4a64:	81 1d       	adc	r24, r1
    4a66:	11 24       	eor	r1, r1
    4a68:	91 1d       	adc	r25, r1
    4a6a:	08 95       	ret

00004a6c <__muluhisi3>:
    4a6c:	f0 df       	rcall	.-32     	; 0x4a4e <__umulhisi3>
    4a6e:	a5 9f       	mul	r26, r21
    4a70:	90 0d       	add	r25, r0
    4a72:	b4 9f       	mul	r27, r20
    4a74:	90 0d       	add	r25, r0
    4a76:	a4 9f       	mul	r26, r20
    4a78:	80 0d       	add	r24, r0
    4a7a:	91 1d       	adc	r25, r1
    4a7c:	11 24       	eor	r1, r1
    4a7e:	08 95       	ret

00004a80 <__ashldi3>:
    4a80:	0f 93       	push	r16
    4a82:	08 30       	cpi	r16, 0x08	; 8
    4a84:	90 f0       	brcs	.+36     	; 0x4aaa <__ashldi3+0x2a>
    4a86:	98 2f       	mov	r25, r24
    4a88:	87 2f       	mov	r24, r23
    4a8a:	76 2f       	mov	r23, r22
    4a8c:	65 2f       	mov	r22, r21
    4a8e:	54 2f       	mov	r21, r20
    4a90:	43 2f       	mov	r20, r19
    4a92:	32 2f       	mov	r19, r18
    4a94:	22 27       	eor	r18, r18
    4a96:	08 50       	subi	r16, 0x08	; 8
    4a98:	f4 cf       	rjmp	.-24     	; 0x4a82 <__ashldi3+0x2>
    4a9a:	22 0f       	add	r18, r18
    4a9c:	33 1f       	adc	r19, r19
    4a9e:	44 1f       	adc	r20, r20
    4aa0:	55 1f       	adc	r21, r21
    4aa2:	66 1f       	adc	r22, r22
    4aa4:	77 1f       	adc	r23, r23
    4aa6:	88 1f       	adc	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	0a 95       	dec	r16
    4aac:	b2 f7       	brpl	.-20     	; 0x4a9a <__ashldi3+0x1a>
    4aae:	0f 91       	pop	r16
    4ab0:	08 95       	ret

00004ab2 <__ashrdi3>:
    4ab2:	97 fb       	bst	r25, 7
    4ab4:	10 f8       	bld	r1, 0

00004ab6 <__lshrdi3>:
    4ab6:	16 94       	lsr	r1
    4ab8:	00 08       	sbc	r0, r0
    4aba:	0f 93       	push	r16
    4abc:	08 30       	cpi	r16, 0x08	; 8
    4abe:	98 f0       	brcs	.+38     	; 0x4ae6 <__lshrdi3+0x30>
    4ac0:	08 50       	subi	r16, 0x08	; 8
    4ac2:	23 2f       	mov	r18, r19
    4ac4:	34 2f       	mov	r19, r20
    4ac6:	45 2f       	mov	r20, r21
    4ac8:	56 2f       	mov	r21, r22
    4aca:	67 2f       	mov	r22, r23
    4acc:	78 2f       	mov	r23, r24
    4ace:	89 2f       	mov	r24, r25
    4ad0:	90 2d       	mov	r25, r0
    4ad2:	f4 cf       	rjmp	.-24     	; 0x4abc <__lshrdi3+0x6>
    4ad4:	05 94       	asr	r0
    4ad6:	97 95       	ror	r25
    4ad8:	87 95       	ror	r24
    4ada:	77 95       	ror	r23
    4adc:	67 95       	ror	r22
    4ade:	57 95       	ror	r21
    4ae0:	47 95       	ror	r20
    4ae2:	37 95       	ror	r19
    4ae4:	27 95       	ror	r18
    4ae6:	0a 95       	dec	r16
    4ae8:	aa f7       	brpl	.-22     	; 0x4ad4 <__lshrdi3+0x1e>
    4aea:	0f 91       	pop	r16
    4aec:	08 95       	ret

00004aee <fdevopen>:
    4aee:	0f 93       	push	r16
    4af0:	1f 93       	push	r17
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	00 97       	sbiw	r24, 0x00	; 0
    4af8:	31 f4       	brne	.+12     	; 0x4b06 <fdevopen+0x18>
    4afa:	61 15       	cp	r22, r1
    4afc:	71 05       	cpc	r23, r1
    4afe:	19 f4       	brne	.+6      	; 0x4b06 <fdevopen+0x18>
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	39 c0       	rjmp	.+114    	; 0x4b78 <fdevopen+0x8a>
    4b06:	8b 01       	movw	r16, r22
    4b08:	ec 01       	movw	r28, r24
    4b0a:	6e e0       	ldi	r22, 0x0E	; 14
    4b0c:	70 e0       	ldi	r23, 0x00	; 0
    4b0e:	81 e0       	ldi	r24, 0x01	; 1
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	77 d5       	rcall	.+2798   	; 0x5602 <calloc>
    4b14:	fc 01       	movw	r30, r24
    4b16:	89 2b       	or	r24, r25
    4b18:	99 f3       	breq	.-26     	; 0x4b00 <fdevopen+0x12>
    4b1a:	80 e8       	ldi	r24, 0x80	; 128
    4b1c:	83 83       	std	Z+3, r24	; 0x03
    4b1e:	01 15       	cp	r16, r1
    4b20:	11 05       	cpc	r17, r1
    4b22:	71 f0       	breq	.+28     	; 0x4b40 <fdevopen+0x52>
    4b24:	02 87       	std	Z+10, r16	; 0x0a
    4b26:	13 87       	std	Z+11, r17	; 0x0b
    4b28:	81 e8       	ldi	r24, 0x81	; 129
    4b2a:	83 83       	std	Z+3, r24	; 0x03
    4b2c:	80 91 2f 22 	lds	r24, 0x222F	; 0x80222f <__iob>
    4b30:	90 91 30 22 	lds	r25, 0x2230	; 0x802230 <__iob+0x1>
    4b34:	89 2b       	or	r24, r25
    4b36:	21 f4       	brne	.+8      	; 0x4b40 <fdevopen+0x52>
    4b38:	e0 93 2f 22 	sts	0x222F, r30	; 0x80222f <__iob>
    4b3c:	f0 93 30 22 	sts	0x2230, r31	; 0x802230 <__iob+0x1>
    4b40:	20 97       	sbiw	r28, 0x00	; 0
    4b42:	c9 f0       	breq	.+50     	; 0x4b76 <fdevopen+0x88>
    4b44:	c0 87       	std	Z+8, r28	; 0x08
    4b46:	d1 87       	std	Z+9, r29	; 0x09
    4b48:	83 81       	ldd	r24, Z+3	; 0x03
    4b4a:	82 60       	ori	r24, 0x02	; 2
    4b4c:	83 83       	std	Z+3, r24	; 0x03
    4b4e:	80 91 31 22 	lds	r24, 0x2231	; 0x802231 <__iob+0x2>
    4b52:	90 91 32 22 	lds	r25, 0x2232	; 0x802232 <__iob+0x3>
    4b56:	89 2b       	or	r24, r25
    4b58:	71 f4       	brne	.+28     	; 0x4b76 <fdevopen+0x88>
    4b5a:	e0 93 31 22 	sts	0x2231, r30	; 0x802231 <__iob+0x2>
    4b5e:	f0 93 32 22 	sts	0x2232, r31	; 0x802232 <__iob+0x3>
    4b62:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <__iob+0x4>
    4b66:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <__iob+0x5>
    4b6a:	89 2b       	or	r24, r25
    4b6c:	21 f4       	brne	.+8      	; 0x4b76 <fdevopen+0x88>
    4b6e:	e0 93 33 22 	sts	0x2233, r30	; 0x802233 <__iob+0x4>
    4b72:	f0 93 34 22 	sts	0x2234, r31	; 0x802234 <__iob+0x5>
    4b76:	cf 01       	movw	r24, r30
    4b78:	df 91       	pop	r29
    4b7a:	cf 91       	pop	r28
    4b7c:	1f 91       	pop	r17
    4b7e:	0f 91       	pop	r16
    4b80:	08 95       	ret

00004b82 <printf>:
    4b82:	cf 93       	push	r28
    4b84:	df 93       	push	r29
    4b86:	cd b7       	in	r28, 0x3d	; 61
    4b88:	de b7       	in	r29, 0x3e	; 62
    4b8a:	ae 01       	movw	r20, r28
    4b8c:	4a 5f       	subi	r20, 0xFA	; 250
    4b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b90:	fa 01       	movw	r30, r20
    4b92:	61 91       	ld	r22, Z+
    4b94:	71 91       	ld	r23, Z+
    4b96:	af 01       	movw	r20, r30
    4b98:	80 91 31 22 	lds	r24, 0x2231	; 0x802231 <__iob+0x2>
    4b9c:	90 91 32 22 	lds	r25, 0x2232	; 0x802232 <__iob+0x3>
    4ba0:	76 d0       	rcall	.+236    	; 0x4c8e <vfprintf>
    4ba2:	df 91       	pop	r29
    4ba4:	cf 91       	pop	r28
    4ba6:	08 95       	ret

00004ba8 <puts>:
    4ba8:	0f 93       	push	r16
    4baa:	1f 93       	push	r17
    4bac:	cf 93       	push	r28
    4bae:	df 93       	push	r29
    4bb0:	e0 91 31 22 	lds	r30, 0x2231	; 0x802231 <__iob+0x2>
    4bb4:	f0 91 32 22 	lds	r31, 0x2232	; 0x802232 <__iob+0x3>
    4bb8:	23 81       	ldd	r18, Z+3	; 0x03
    4bba:	21 ff       	sbrs	r18, 1
    4bbc:	1b c0       	rjmp	.+54     	; 0x4bf4 <puts+0x4c>
    4bbe:	8c 01       	movw	r16, r24
    4bc0:	d0 e0       	ldi	r29, 0x00	; 0
    4bc2:	c0 e0       	ldi	r28, 0x00	; 0
    4bc4:	f8 01       	movw	r30, r16
    4bc6:	81 91       	ld	r24, Z+
    4bc8:	8f 01       	movw	r16, r30
    4bca:	60 91 31 22 	lds	r22, 0x2231	; 0x802231 <__iob+0x2>
    4bce:	70 91 32 22 	lds	r23, 0x2232	; 0x802232 <__iob+0x3>
    4bd2:	db 01       	movw	r26, r22
    4bd4:	18 96       	adiw	r26, 0x08	; 8
    4bd6:	ed 91       	ld	r30, X+
    4bd8:	fc 91       	ld	r31, X
    4bda:	19 97       	sbiw	r26, 0x09	; 9
    4bdc:	88 23       	and	r24, r24
    4bde:	31 f0       	breq	.+12     	; 0x4bec <puts+0x44>
    4be0:	19 95       	eicall
    4be2:	89 2b       	or	r24, r25
    4be4:	79 f3       	breq	.-34     	; 0x4bc4 <puts+0x1c>
    4be6:	df ef       	ldi	r29, 0xFF	; 255
    4be8:	cf ef       	ldi	r28, 0xFF	; 255
    4bea:	ec cf       	rjmp	.-40     	; 0x4bc4 <puts+0x1c>
    4bec:	8a e0       	ldi	r24, 0x0A	; 10
    4bee:	19 95       	eicall
    4bf0:	89 2b       	or	r24, r25
    4bf2:	19 f0       	breq	.+6      	; 0x4bfa <puts+0x52>
    4bf4:	8f ef       	ldi	r24, 0xFF	; 255
    4bf6:	9f ef       	ldi	r25, 0xFF	; 255
    4bf8:	02 c0       	rjmp	.+4      	; 0x4bfe <puts+0x56>
    4bfa:	8d 2f       	mov	r24, r29
    4bfc:	9c 2f       	mov	r25, r28
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	1f 91       	pop	r17
    4c04:	0f 91       	pop	r16
    4c06:	08 95       	ret

00004c08 <sprintf>:
    4c08:	0f 93       	push	r16
    4c0a:	1f 93       	push	r17
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	2e 97       	sbiw	r28, 0x0e	; 14
    4c16:	cd bf       	out	0x3d, r28	; 61
    4c18:	de bf       	out	0x3e, r29	; 62
    4c1a:	0e 89       	ldd	r16, Y+22	; 0x16
    4c1c:	1f 89       	ldd	r17, Y+23	; 0x17
    4c1e:	86 e0       	ldi	r24, 0x06	; 6
    4c20:	8c 83       	std	Y+4, r24	; 0x04
    4c22:	09 83       	std	Y+1, r16	; 0x01
    4c24:	1a 83       	std	Y+2, r17	; 0x02
    4c26:	8f ef       	ldi	r24, 0xFF	; 255
    4c28:	9f e7       	ldi	r25, 0x7F	; 127
    4c2a:	8d 83       	std	Y+5, r24	; 0x05
    4c2c:	9e 83       	std	Y+6, r25	; 0x06
    4c2e:	ae 01       	movw	r20, r28
    4c30:	46 5e       	subi	r20, 0xE6	; 230
    4c32:	5f 4f       	sbci	r21, 0xFF	; 255
    4c34:	68 8d       	ldd	r22, Y+24	; 0x18
    4c36:	79 8d       	ldd	r23, Y+25	; 0x19
    4c38:	ce 01       	movw	r24, r28
    4c3a:	01 96       	adiw	r24, 0x01	; 1
    4c3c:	28 d0       	rcall	.+80     	; 0x4c8e <vfprintf>
    4c3e:	ef 81       	ldd	r30, Y+7	; 0x07
    4c40:	f8 85       	ldd	r31, Y+8	; 0x08
    4c42:	e0 0f       	add	r30, r16
    4c44:	f1 1f       	adc	r31, r17
    4c46:	10 82       	st	Z, r1
    4c48:	2e 96       	adiw	r28, 0x0e	; 14
    4c4a:	cd bf       	out	0x3d, r28	; 61
    4c4c:	de bf       	out	0x3e, r29	; 62
    4c4e:	df 91       	pop	r29
    4c50:	cf 91       	pop	r28
    4c52:	1f 91       	pop	r17
    4c54:	0f 91       	pop	r16
    4c56:	08 95       	ret

00004c58 <sscanf>:
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	cd b7       	in	r28, 0x3d	; 61
    4c5e:	de b7       	in	r29, 0x3e	; 62
    4c60:	2e 97       	sbiw	r28, 0x0e	; 14
    4c62:	cd bf       	out	0x3d, r28	; 61
    4c64:	de bf       	out	0x3e, r29	; 62
    4c66:	85 e0       	ldi	r24, 0x05	; 5
    4c68:	8c 83       	std	Y+4, r24	; 0x04
    4c6a:	8c 89       	ldd	r24, Y+20	; 0x14
    4c6c:	9d 89       	ldd	r25, Y+21	; 0x15
    4c6e:	89 83       	std	Y+1, r24	; 0x01
    4c70:	9a 83       	std	Y+2, r25	; 0x02
    4c72:	ae 01       	movw	r20, r28
    4c74:	48 5e       	subi	r20, 0xE8	; 232
    4c76:	5f 4f       	sbci	r21, 0xFF	; 255
    4c78:	6e 89       	ldd	r22, Y+22	; 0x16
    4c7a:	7f 89       	ldd	r23, Y+23	; 0x17
    4c7c:	ce 01       	movw	r24, r28
    4c7e:	01 96       	adiw	r24, 0x01	; 1
    4c80:	a9 d3       	rcall	.+1874   	; 0x53d4 <vfscanf>
    4c82:	2e 96       	adiw	r28, 0x0e	; 14
    4c84:	cd bf       	out	0x3d, r28	; 61
    4c86:	de bf       	out	0x3e, r29	; 62
    4c88:	df 91       	pop	r29
    4c8a:	cf 91       	pop	r28
    4c8c:	08 95       	ret

00004c8e <vfprintf>:
    4c8e:	2f 92       	push	r2
    4c90:	3f 92       	push	r3
    4c92:	4f 92       	push	r4
    4c94:	5f 92       	push	r5
    4c96:	6f 92       	push	r6
    4c98:	7f 92       	push	r7
    4c9a:	8f 92       	push	r8
    4c9c:	9f 92       	push	r9
    4c9e:	af 92       	push	r10
    4ca0:	bf 92       	push	r11
    4ca2:	cf 92       	push	r12
    4ca4:	df 92       	push	r13
    4ca6:	ef 92       	push	r14
    4ca8:	ff 92       	push	r15
    4caa:	0f 93       	push	r16
    4cac:	1f 93       	push	r17
    4cae:	cf 93       	push	r28
    4cb0:	df 93       	push	r29
    4cb2:	cd b7       	in	r28, 0x3d	; 61
    4cb4:	de b7       	in	r29, 0x3e	; 62
    4cb6:	2b 97       	sbiw	r28, 0x0b	; 11
    4cb8:	cd bf       	out	0x3d, r28	; 61
    4cba:	de bf       	out	0x3e, r29	; 62
    4cbc:	6c 01       	movw	r12, r24
    4cbe:	7b 01       	movw	r14, r22
    4cc0:	8a 01       	movw	r16, r20
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	16 82       	std	Z+6, r1	; 0x06
    4cc6:	17 82       	std	Z+7, r1	; 0x07
    4cc8:	83 81       	ldd	r24, Z+3	; 0x03
    4cca:	81 ff       	sbrs	r24, 1
    4ccc:	bf c1       	rjmp	.+894    	; 0x504c <vfprintf+0x3be>
    4cce:	ce 01       	movw	r24, r28
    4cd0:	01 96       	adiw	r24, 0x01	; 1
    4cd2:	3c 01       	movw	r6, r24
    4cd4:	f6 01       	movw	r30, r12
    4cd6:	93 81       	ldd	r25, Z+3	; 0x03
    4cd8:	f7 01       	movw	r30, r14
    4cda:	93 fd       	sbrc	r25, 3
    4cdc:	85 91       	lpm	r24, Z+
    4cde:	93 ff       	sbrs	r25, 3
    4ce0:	81 91       	ld	r24, Z+
    4ce2:	7f 01       	movw	r14, r30
    4ce4:	88 23       	and	r24, r24
    4ce6:	09 f4       	brne	.+2      	; 0x4cea <vfprintf+0x5c>
    4ce8:	ad c1       	rjmp	.+858    	; 0x5044 <vfprintf+0x3b6>
    4cea:	85 32       	cpi	r24, 0x25	; 37
    4cec:	39 f4       	brne	.+14     	; 0x4cfc <vfprintf+0x6e>
    4cee:	93 fd       	sbrc	r25, 3
    4cf0:	85 91       	lpm	r24, Z+
    4cf2:	93 ff       	sbrs	r25, 3
    4cf4:	81 91       	ld	r24, Z+
    4cf6:	7f 01       	movw	r14, r30
    4cf8:	85 32       	cpi	r24, 0x25	; 37
    4cfa:	21 f4       	brne	.+8      	; 0x4d04 <vfprintf+0x76>
    4cfc:	b6 01       	movw	r22, r12
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	29 d6       	rcall	.+3154   	; 0x5954 <fputc>
    4d02:	e8 cf       	rjmp	.-48     	; 0x4cd4 <vfprintf+0x46>
    4d04:	91 2c       	mov	r9, r1
    4d06:	21 2c       	mov	r2, r1
    4d08:	31 2c       	mov	r3, r1
    4d0a:	ff e1       	ldi	r31, 0x1F	; 31
    4d0c:	f3 15       	cp	r31, r3
    4d0e:	d8 f0       	brcs	.+54     	; 0x4d46 <vfprintf+0xb8>
    4d10:	8b 32       	cpi	r24, 0x2B	; 43
    4d12:	79 f0       	breq	.+30     	; 0x4d32 <vfprintf+0xa4>
    4d14:	38 f4       	brcc	.+14     	; 0x4d24 <vfprintf+0x96>
    4d16:	80 32       	cpi	r24, 0x20	; 32
    4d18:	79 f0       	breq	.+30     	; 0x4d38 <vfprintf+0xaa>
    4d1a:	83 32       	cpi	r24, 0x23	; 35
    4d1c:	a1 f4       	brne	.+40     	; 0x4d46 <vfprintf+0xb8>
    4d1e:	23 2d       	mov	r18, r3
    4d20:	20 61       	ori	r18, 0x10	; 16
    4d22:	1d c0       	rjmp	.+58     	; 0x4d5e <vfprintf+0xd0>
    4d24:	8d 32       	cpi	r24, 0x2D	; 45
    4d26:	61 f0       	breq	.+24     	; 0x4d40 <vfprintf+0xb2>
    4d28:	80 33       	cpi	r24, 0x30	; 48
    4d2a:	69 f4       	brne	.+26     	; 0x4d46 <vfprintf+0xb8>
    4d2c:	23 2d       	mov	r18, r3
    4d2e:	21 60       	ori	r18, 0x01	; 1
    4d30:	16 c0       	rjmp	.+44     	; 0x4d5e <vfprintf+0xd0>
    4d32:	83 2d       	mov	r24, r3
    4d34:	82 60       	ori	r24, 0x02	; 2
    4d36:	38 2e       	mov	r3, r24
    4d38:	e3 2d       	mov	r30, r3
    4d3a:	e4 60       	ori	r30, 0x04	; 4
    4d3c:	3e 2e       	mov	r3, r30
    4d3e:	2a c0       	rjmp	.+84     	; 0x4d94 <vfprintf+0x106>
    4d40:	f3 2d       	mov	r31, r3
    4d42:	f8 60       	ori	r31, 0x08	; 8
    4d44:	1d c0       	rjmp	.+58     	; 0x4d80 <vfprintf+0xf2>
    4d46:	37 fc       	sbrc	r3, 7
    4d48:	2d c0       	rjmp	.+90     	; 0x4da4 <vfprintf+0x116>
    4d4a:	20 ed       	ldi	r18, 0xD0	; 208
    4d4c:	28 0f       	add	r18, r24
    4d4e:	2a 30       	cpi	r18, 0x0A	; 10
    4d50:	40 f0       	brcs	.+16     	; 0x4d62 <vfprintf+0xd4>
    4d52:	8e 32       	cpi	r24, 0x2E	; 46
    4d54:	b9 f4       	brne	.+46     	; 0x4d84 <vfprintf+0xf6>
    4d56:	36 fc       	sbrc	r3, 6
    4d58:	75 c1       	rjmp	.+746    	; 0x5044 <vfprintf+0x3b6>
    4d5a:	23 2d       	mov	r18, r3
    4d5c:	20 64       	ori	r18, 0x40	; 64
    4d5e:	32 2e       	mov	r3, r18
    4d60:	19 c0       	rjmp	.+50     	; 0x4d94 <vfprintf+0x106>
    4d62:	36 fe       	sbrs	r3, 6
    4d64:	06 c0       	rjmp	.+12     	; 0x4d72 <vfprintf+0xe4>
    4d66:	8a e0       	ldi	r24, 0x0A	; 10
    4d68:	98 9e       	mul	r9, r24
    4d6a:	20 0d       	add	r18, r0
    4d6c:	11 24       	eor	r1, r1
    4d6e:	92 2e       	mov	r9, r18
    4d70:	11 c0       	rjmp	.+34     	; 0x4d94 <vfprintf+0x106>
    4d72:	ea e0       	ldi	r30, 0x0A	; 10
    4d74:	2e 9e       	mul	r2, r30
    4d76:	20 0d       	add	r18, r0
    4d78:	11 24       	eor	r1, r1
    4d7a:	22 2e       	mov	r2, r18
    4d7c:	f3 2d       	mov	r31, r3
    4d7e:	f0 62       	ori	r31, 0x20	; 32
    4d80:	3f 2e       	mov	r3, r31
    4d82:	08 c0       	rjmp	.+16     	; 0x4d94 <vfprintf+0x106>
    4d84:	8c 36       	cpi	r24, 0x6C	; 108
    4d86:	21 f4       	brne	.+8      	; 0x4d90 <vfprintf+0x102>
    4d88:	83 2d       	mov	r24, r3
    4d8a:	80 68       	ori	r24, 0x80	; 128
    4d8c:	38 2e       	mov	r3, r24
    4d8e:	02 c0       	rjmp	.+4      	; 0x4d94 <vfprintf+0x106>
    4d90:	88 36       	cpi	r24, 0x68	; 104
    4d92:	41 f4       	brne	.+16     	; 0x4da4 <vfprintf+0x116>
    4d94:	f7 01       	movw	r30, r14
    4d96:	93 fd       	sbrc	r25, 3
    4d98:	85 91       	lpm	r24, Z+
    4d9a:	93 ff       	sbrs	r25, 3
    4d9c:	81 91       	ld	r24, Z+
    4d9e:	7f 01       	movw	r14, r30
    4da0:	81 11       	cpse	r24, r1
    4da2:	b3 cf       	rjmp	.-154    	; 0x4d0a <vfprintf+0x7c>
    4da4:	98 2f       	mov	r25, r24
    4da6:	9f 7d       	andi	r25, 0xDF	; 223
    4da8:	95 54       	subi	r25, 0x45	; 69
    4daa:	93 30       	cpi	r25, 0x03	; 3
    4dac:	28 f4       	brcc	.+10     	; 0x4db8 <vfprintf+0x12a>
    4dae:	0c 5f       	subi	r16, 0xFC	; 252
    4db0:	1f 4f       	sbci	r17, 0xFF	; 255
    4db2:	9f e3       	ldi	r25, 0x3F	; 63
    4db4:	99 83       	std	Y+1, r25	; 0x01
    4db6:	0d c0       	rjmp	.+26     	; 0x4dd2 <vfprintf+0x144>
    4db8:	83 36       	cpi	r24, 0x63	; 99
    4dba:	31 f0       	breq	.+12     	; 0x4dc8 <vfprintf+0x13a>
    4dbc:	83 37       	cpi	r24, 0x73	; 115
    4dbe:	71 f0       	breq	.+28     	; 0x4ddc <vfprintf+0x14e>
    4dc0:	83 35       	cpi	r24, 0x53	; 83
    4dc2:	09 f0       	breq	.+2      	; 0x4dc6 <vfprintf+0x138>
    4dc4:	55 c0       	rjmp	.+170    	; 0x4e70 <vfprintf+0x1e2>
    4dc6:	20 c0       	rjmp	.+64     	; 0x4e08 <vfprintf+0x17a>
    4dc8:	f8 01       	movw	r30, r16
    4dca:	80 81       	ld	r24, Z
    4dcc:	89 83       	std	Y+1, r24	; 0x01
    4dce:	0e 5f       	subi	r16, 0xFE	; 254
    4dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    4dd2:	88 24       	eor	r8, r8
    4dd4:	83 94       	inc	r8
    4dd6:	91 2c       	mov	r9, r1
    4dd8:	53 01       	movw	r10, r6
    4dda:	12 c0       	rjmp	.+36     	; 0x4e00 <vfprintf+0x172>
    4ddc:	28 01       	movw	r4, r16
    4dde:	f2 e0       	ldi	r31, 0x02	; 2
    4de0:	4f 0e       	add	r4, r31
    4de2:	51 1c       	adc	r5, r1
    4de4:	f8 01       	movw	r30, r16
    4de6:	a0 80       	ld	r10, Z
    4de8:	b1 80       	ldd	r11, Z+1	; 0x01
    4dea:	36 fe       	sbrs	r3, 6
    4dec:	03 c0       	rjmp	.+6      	; 0x4df4 <vfprintf+0x166>
    4dee:	69 2d       	mov	r22, r9
    4df0:	70 e0       	ldi	r23, 0x00	; 0
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <vfprintf+0x16a>
    4df4:	6f ef       	ldi	r22, 0xFF	; 255
    4df6:	7f ef       	ldi	r23, 0xFF	; 255
    4df8:	c5 01       	movw	r24, r10
    4dfa:	63 d5       	rcall	.+2758   	; 0x58c2 <strnlen>
    4dfc:	4c 01       	movw	r8, r24
    4dfe:	82 01       	movw	r16, r4
    4e00:	f3 2d       	mov	r31, r3
    4e02:	ff 77       	andi	r31, 0x7F	; 127
    4e04:	3f 2e       	mov	r3, r31
    4e06:	15 c0       	rjmp	.+42     	; 0x4e32 <vfprintf+0x1a4>
    4e08:	28 01       	movw	r4, r16
    4e0a:	22 e0       	ldi	r18, 0x02	; 2
    4e0c:	42 0e       	add	r4, r18
    4e0e:	51 1c       	adc	r5, r1
    4e10:	f8 01       	movw	r30, r16
    4e12:	a0 80       	ld	r10, Z
    4e14:	b1 80       	ldd	r11, Z+1	; 0x01
    4e16:	36 fe       	sbrs	r3, 6
    4e18:	03 c0       	rjmp	.+6      	; 0x4e20 <vfprintf+0x192>
    4e1a:	69 2d       	mov	r22, r9
    4e1c:	70 e0       	ldi	r23, 0x00	; 0
    4e1e:	02 c0       	rjmp	.+4      	; 0x4e24 <vfprintf+0x196>
    4e20:	6f ef       	ldi	r22, 0xFF	; 255
    4e22:	7f ef       	ldi	r23, 0xFF	; 255
    4e24:	c5 01       	movw	r24, r10
    4e26:	3b d5       	rcall	.+2678   	; 0x589e <strnlen_P>
    4e28:	4c 01       	movw	r8, r24
    4e2a:	f3 2d       	mov	r31, r3
    4e2c:	f0 68       	ori	r31, 0x80	; 128
    4e2e:	3f 2e       	mov	r3, r31
    4e30:	82 01       	movw	r16, r4
    4e32:	33 fc       	sbrc	r3, 3
    4e34:	19 c0       	rjmp	.+50     	; 0x4e68 <vfprintf+0x1da>
    4e36:	82 2d       	mov	r24, r2
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	88 16       	cp	r8, r24
    4e3c:	99 06       	cpc	r9, r25
    4e3e:	a0 f4       	brcc	.+40     	; 0x4e68 <vfprintf+0x1da>
    4e40:	b6 01       	movw	r22, r12
    4e42:	80 e2       	ldi	r24, 0x20	; 32
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	86 d5       	rcall	.+2828   	; 0x5954 <fputc>
    4e48:	2a 94       	dec	r2
    4e4a:	f5 cf       	rjmp	.-22     	; 0x4e36 <vfprintf+0x1a8>
    4e4c:	f5 01       	movw	r30, r10
    4e4e:	37 fc       	sbrc	r3, 7
    4e50:	85 91       	lpm	r24, Z+
    4e52:	37 fe       	sbrs	r3, 7
    4e54:	81 91       	ld	r24, Z+
    4e56:	5f 01       	movw	r10, r30
    4e58:	b6 01       	movw	r22, r12
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	7b d5       	rcall	.+2806   	; 0x5954 <fputc>
    4e5e:	21 10       	cpse	r2, r1
    4e60:	2a 94       	dec	r2
    4e62:	21 e0       	ldi	r18, 0x01	; 1
    4e64:	82 1a       	sub	r8, r18
    4e66:	91 08       	sbc	r9, r1
    4e68:	81 14       	cp	r8, r1
    4e6a:	91 04       	cpc	r9, r1
    4e6c:	79 f7       	brne	.-34     	; 0x4e4c <vfprintf+0x1be>
    4e6e:	e1 c0       	rjmp	.+450    	; 0x5032 <vfprintf+0x3a4>
    4e70:	84 36       	cpi	r24, 0x64	; 100
    4e72:	11 f0       	breq	.+4      	; 0x4e78 <vfprintf+0x1ea>
    4e74:	89 36       	cpi	r24, 0x69	; 105
    4e76:	39 f5       	brne	.+78     	; 0x4ec6 <vfprintf+0x238>
    4e78:	f8 01       	movw	r30, r16
    4e7a:	37 fe       	sbrs	r3, 7
    4e7c:	07 c0       	rjmp	.+14     	; 0x4e8c <vfprintf+0x1fe>
    4e7e:	60 81       	ld	r22, Z
    4e80:	71 81       	ldd	r23, Z+1	; 0x01
    4e82:	82 81       	ldd	r24, Z+2	; 0x02
    4e84:	93 81       	ldd	r25, Z+3	; 0x03
    4e86:	0c 5f       	subi	r16, 0xFC	; 252
    4e88:	1f 4f       	sbci	r17, 0xFF	; 255
    4e8a:	08 c0       	rjmp	.+16     	; 0x4e9c <vfprintf+0x20e>
    4e8c:	60 81       	ld	r22, Z
    4e8e:	71 81       	ldd	r23, Z+1	; 0x01
    4e90:	07 2e       	mov	r0, r23
    4e92:	00 0c       	add	r0, r0
    4e94:	88 0b       	sbc	r24, r24
    4e96:	99 0b       	sbc	r25, r25
    4e98:	0e 5f       	subi	r16, 0xFE	; 254
    4e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e9c:	f3 2d       	mov	r31, r3
    4e9e:	ff 76       	andi	r31, 0x6F	; 111
    4ea0:	3f 2e       	mov	r3, r31
    4ea2:	97 ff       	sbrs	r25, 7
    4ea4:	09 c0       	rjmp	.+18     	; 0x4eb8 <vfprintf+0x22a>
    4ea6:	90 95       	com	r25
    4ea8:	80 95       	com	r24
    4eaa:	70 95       	com	r23
    4eac:	61 95       	neg	r22
    4eae:	7f 4f       	sbci	r23, 0xFF	; 255
    4eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    4eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb4:	f0 68       	ori	r31, 0x80	; 128
    4eb6:	3f 2e       	mov	r3, r31
    4eb8:	2a e0       	ldi	r18, 0x0A	; 10
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	a3 01       	movw	r20, r6
    4ebe:	9f d5       	rcall	.+2878   	; 0x59fe <__ultoa_invert>
    4ec0:	88 2e       	mov	r8, r24
    4ec2:	86 18       	sub	r8, r6
    4ec4:	44 c0       	rjmp	.+136    	; 0x4f4e <vfprintf+0x2c0>
    4ec6:	85 37       	cpi	r24, 0x75	; 117
    4ec8:	31 f4       	brne	.+12     	; 0x4ed6 <vfprintf+0x248>
    4eca:	23 2d       	mov	r18, r3
    4ecc:	2f 7e       	andi	r18, 0xEF	; 239
    4ece:	b2 2e       	mov	r11, r18
    4ed0:	2a e0       	ldi	r18, 0x0A	; 10
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	25 c0       	rjmp	.+74     	; 0x4f20 <vfprintf+0x292>
    4ed6:	93 2d       	mov	r25, r3
    4ed8:	99 7f       	andi	r25, 0xF9	; 249
    4eda:	b9 2e       	mov	r11, r25
    4edc:	8f 36       	cpi	r24, 0x6F	; 111
    4ede:	c1 f0       	breq	.+48     	; 0x4f10 <vfprintf+0x282>
    4ee0:	18 f4       	brcc	.+6      	; 0x4ee8 <vfprintf+0x25a>
    4ee2:	88 35       	cpi	r24, 0x58	; 88
    4ee4:	79 f0       	breq	.+30     	; 0x4f04 <vfprintf+0x276>
    4ee6:	ae c0       	rjmp	.+348    	; 0x5044 <vfprintf+0x3b6>
    4ee8:	80 37       	cpi	r24, 0x70	; 112
    4eea:	19 f0       	breq	.+6      	; 0x4ef2 <vfprintf+0x264>
    4eec:	88 37       	cpi	r24, 0x78	; 120
    4eee:	21 f0       	breq	.+8      	; 0x4ef8 <vfprintf+0x26a>
    4ef0:	a9 c0       	rjmp	.+338    	; 0x5044 <vfprintf+0x3b6>
    4ef2:	e9 2f       	mov	r30, r25
    4ef4:	e0 61       	ori	r30, 0x10	; 16
    4ef6:	be 2e       	mov	r11, r30
    4ef8:	b4 fe       	sbrs	r11, 4
    4efa:	0d c0       	rjmp	.+26     	; 0x4f16 <vfprintf+0x288>
    4efc:	fb 2d       	mov	r31, r11
    4efe:	f4 60       	ori	r31, 0x04	; 4
    4f00:	bf 2e       	mov	r11, r31
    4f02:	09 c0       	rjmp	.+18     	; 0x4f16 <vfprintf+0x288>
    4f04:	34 fe       	sbrs	r3, 4
    4f06:	0a c0       	rjmp	.+20     	; 0x4f1c <vfprintf+0x28e>
    4f08:	29 2f       	mov	r18, r25
    4f0a:	26 60       	ori	r18, 0x06	; 6
    4f0c:	b2 2e       	mov	r11, r18
    4f0e:	06 c0       	rjmp	.+12     	; 0x4f1c <vfprintf+0x28e>
    4f10:	28 e0       	ldi	r18, 0x08	; 8
    4f12:	30 e0       	ldi	r19, 0x00	; 0
    4f14:	05 c0       	rjmp	.+10     	; 0x4f20 <vfprintf+0x292>
    4f16:	20 e1       	ldi	r18, 0x10	; 16
    4f18:	30 e0       	ldi	r19, 0x00	; 0
    4f1a:	02 c0       	rjmp	.+4      	; 0x4f20 <vfprintf+0x292>
    4f1c:	20 e1       	ldi	r18, 0x10	; 16
    4f1e:	32 e0       	ldi	r19, 0x02	; 2
    4f20:	f8 01       	movw	r30, r16
    4f22:	b7 fe       	sbrs	r11, 7
    4f24:	07 c0       	rjmp	.+14     	; 0x4f34 <vfprintf+0x2a6>
    4f26:	60 81       	ld	r22, Z
    4f28:	71 81       	ldd	r23, Z+1	; 0x01
    4f2a:	82 81       	ldd	r24, Z+2	; 0x02
    4f2c:	93 81       	ldd	r25, Z+3	; 0x03
    4f2e:	0c 5f       	subi	r16, 0xFC	; 252
    4f30:	1f 4f       	sbci	r17, 0xFF	; 255
    4f32:	06 c0       	rjmp	.+12     	; 0x4f40 <vfprintf+0x2b2>
    4f34:	60 81       	ld	r22, Z
    4f36:	71 81       	ldd	r23, Z+1	; 0x01
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	0e 5f       	subi	r16, 0xFE	; 254
    4f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f40:	a3 01       	movw	r20, r6
    4f42:	5d d5       	rcall	.+2746   	; 0x59fe <__ultoa_invert>
    4f44:	88 2e       	mov	r8, r24
    4f46:	86 18       	sub	r8, r6
    4f48:	fb 2d       	mov	r31, r11
    4f4a:	ff 77       	andi	r31, 0x7F	; 127
    4f4c:	3f 2e       	mov	r3, r31
    4f4e:	36 fe       	sbrs	r3, 6
    4f50:	0d c0       	rjmp	.+26     	; 0x4f6c <vfprintf+0x2de>
    4f52:	23 2d       	mov	r18, r3
    4f54:	2e 7f       	andi	r18, 0xFE	; 254
    4f56:	a2 2e       	mov	r10, r18
    4f58:	89 14       	cp	r8, r9
    4f5a:	58 f4       	brcc	.+22     	; 0x4f72 <vfprintf+0x2e4>
    4f5c:	34 fe       	sbrs	r3, 4
    4f5e:	0b c0       	rjmp	.+22     	; 0x4f76 <vfprintf+0x2e8>
    4f60:	32 fc       	sbrc	r3, 2
    4f62:	09 c0       	rjmp	.+18     	; 0x4f76 <vfprintf+0x2e8>
    4f64:	83 2d       	mov	r24, r3
    4f66:	8e 7e       	andi	r24, 0xEE	; 238
    4f68:	a8 2e       	mov	r10, r24
    4f6a:	05 c0       	rjmp	.+10     	; 0x4f76 <vfprintf+0x2e8>
    4f6c:	b8 2c       	mov	r11, r8
    4f6e:	a3 2c       	mov	r10, r3
    4f70:	03 c0       	rjmp	.+6      	; 0x4f78 <vfprintf+0x2ea>
    4f72:	b8 2c       	mov	r11, r8
    4f74:	01 c0       	rjmp	.+2      	; 0x4f78 <vfprintf+0x2ea>
    4f76:	b9 2c       	mov	r11, r9
    4f78:	a4 fe       	sbrs	r10, 4
    4f7a:	0f c0       	rjmp	.+30     	; 0x4f9a <vfprintf+0x30c>
    4f7c:	fe 01       	movw	r30, r28
    4f7e:	e8 0d       	add	r30, r8
    4f80:	f1 1d       	adc	r31, r1
    4f82:	80 81       	ld	r24, Z
    4f84:	80 33       	cpi	r24, 0x30	; 48
    4f86:	21 f4       	brne	.+8      	; 0x4f90 <vfprintf+0x302>
    4f88:	9a 2d       	mov	r25, r10
    4f8a:	99 7e       	andi	r25, 0xE9	; 233
    4f8c:	a9 2e       	mov	r10, r25
    4f8e:	09 c0       	rjmp	.+18     	; 0x4fa2 <vfprintf+0x314>
    4f90:	a2 fe       	sbrs	r10, 2
    4f92:	06 c0       	rjmp	.+12     	; 0x4fa0 <vfprintf+0x312>
    4f94:	b3 94       	inc	r11
    4f96:	b3 94       	inc	r11
    4f98:	04 c0       	rjmp	.+8      	; 0x4fa2 <vfprintf+0x314>
    4f9a:	8a 2d       	mov	r24, r10
    4f9c:	86 78       	andi	r24, 0x86	; 134
    4f9e:	09 f0       	breq	.+2      	; 0x4fa2 <vfprintf+0x314>
    4fa0:	b3 94       	inc	r11
    4fa2:	a3 fc       	sbrc	r10, 3
    4fa4:	10 c0       	rjmp	.+32     	; 0x4fc6 <vfprintf+0x338>
    4fa6:	a0 fe       	sbrs	r10, 0
    4fa8:	06 c0       	rjmp	.+12     	; 0x4fb6 <vfprintf+0x328>
    4faa:	b2 14       	cp	r11, r2
    4fac:	80 f4       	brcc	.+32     	; 0x4fce <vfprintf+0x340>
    4fae:	28 0c       	add	r2, r8
    4fb0:	92 2c       	mov	r9, r2
    4fb2:	9b 18       	sub	r9, r11
    4fb4:	0d c0       	rjmp	.+26     	; 0x4fd0 <vfprintf+0x342>
    4fb6:	b2 14       	cp	r11, r2
    4fb8:	58 f4       	brcc	.+22     	; 0x4fd0 <vfprintf+0x342>
    4fba:	b6 01       	movw	r22, r12
    4fbc:	80 e2       	ldi	r24, 0x20	; 32
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	c9 d4       	rcall	.+2450   	; 0x5954 <fputc>
    4fc2:	b3 94       	inc	r11
    4fc4:	f8 cf       	rjmp	.-16     	; 0x4fb6 <vfprintf+0x328>
    4fc6:	b2 14       	cp	r11, r2
    4fc8:	18 f4       	brcc	.+6      	; 0x4fd0 <vfprintf+0x342>
    4fca:	2b 18       	sub	r2, r11
    4fcc:	02 c0       	rjmp	.+4      	; 0x4fd2 <vfprintf+0x344>
    4fce:	98 2c       	mov	r9, r8
    4fd0:	21 2c       	mov	r2, r1
    4fd2:	a4 fe       	sbrs	r10, 4
    4fd4:	0f c0       	rjmp	.+30     	; 0x4ff4 <vfprintf+0x366>
    4fd6:	b6 01       	movw	r22, r12
    4fd8:	80 e3       	ldi	r24, 0x30	; 48
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	bb d4       	rcall	.+2422   	; 0x5954 <fputc>
    4fde:	a2 fe       	sbrs	r10, 2
    4fe0:	16 c0       	rjmp	.+44     	; 0x500e <vfprintf+0x380>
    4fe2:	a1 fc       	sbrc	r10, 1
    4fe4:	03 c0       	rjmp	.+6      	; 0x4fec <vfprintf+0x35e>
    4fe6:	88 e7       	ldi	r24, 0x78	; 120
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	02 c0       	rjmp	.+4      	; 0x4ff0 <vfprintf+0x362>
    4fec:	88 e5       	ldi	r24, 0x58	; 88
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	b6 01       	movw	r22, r12
    4ff2:	0c c0       	rjmp	.+24     	; 0x500c <vfprintf+0x37e>
    4ff4:	8a 2d       	mov	r24, r10
    4ff6:	86 78       	andi	r24, 0x86	; 134
    4ff8:	51 f0       	breq	.+20     	; 0x500e <vfprintf+0x380>
    4ffa:	a1 fe       	sbrs	r10, 1
    4ffc:	02 c0       	rjmp	.+4      	; 0x5002 <vfprintf+0x374>
    4ffe:	8b e2       	ldi	r24, 0x2B	; 43
    5000:	01 c0       	rjmp	.+2      	; 0x5004 <vfprintf+0x376>
    5002:	80 e2       	ldi	r24, 0x20	; 32
    5004:	a7 fc       	sbrc	r10, 7
    5006:	8d e2       	ldi	r24, 0x2D	; 45
    5008:	b6 01       	movw	r22, r12
    500a:	90 e0       	ldi	r25, 0x00	; 0
    500c:	a3 d4       	rcall	.+2374   	; 0x5954 <fputc>
    500e:	89 14       	cp	r8, r9
    5010:	30 f4       	brcc	.+12     	; 0x501e <vfprintf+0x390>
    5012:	b6 01       	movw	r22, r12
    5014:	80 e3       	ldi	r24, 0x30	; 48
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	9d d4       	rcall	.+2362   	; 0x5954 <fputc>
    501a:	9a 94       	dec	r9
    501c:	f8 cf       	rjmp	.-16     	; 0x500e <vfprintf+0x380>
    501e:	8a 94       	dec	r8
    5020:	f3 01       	movw	r30, r6
    5022:	e8 0d       	add	r30, r8
    5024:	f1 1d       	adc	r31, r1
    5026:	80 81       	ld	r24, Z
    5028:	b6 01       	movw	r22, r12
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	93 d4       	rcall	.+2342   	; 0x5954 <fputc>
    502e:	81 10       	cpse	r8, r1
    5030:	f6 cf       	rjmp	.-20     	; 0x501e <vfprintf+0x390>
    5032:	22 20       	and	r2, r2
    5034:	09 f4       	brne	.+2      	; 0x5038 <vfprintf+0x3aa>
    5036:	4e ce       	rjmp	.-868    	; 0x4cd4 <vfprintf+0x46>
    5038:	b6 01       	movw	r22, r12
    503a:	80 e2       	ldi	r24, 0x20	; 32
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	8a d4       	rcall	.+2324   	; 0x5954 <fputc>
    5040:	2a 94       	dec	r2
    5042:	f7 cf       	rjmp	.-18     	; 0x5032 <vfprintf+0x3a4>
    5044:	f6 01       	movw	r30, r12
    5046:	86 81       	ldd	r24, Z+6	; 0x06
    5048:	97 81       	ldd	r25, Z+7	; 0x07
    504a:	02 c0       	rjmp	.+4      	; 0x5050 <vfprintf+0x3c2>
    504c:	8f ef       	ldi	r24, 0xFF	; 255
    504e:	9f ef       	ldi	r25, 0xFF	; 255
    5050:	2b 96       	adiw	r28, 0x0b	; 11
    5052:	cd bf       	out	0x3d, r28	; 61
    5054:	de bf       	out	0x3e, r29	; 62
    5056:	df 91       	pop	r29
    5058:	cf 91       	pop	r28
    505a:	1f 91       	pop	r17
    505c:	0f 91       	pop	r16
    505e:	ff 90       	pop	r15
    5060:	ef 90       	pop	r14
    5062:	df 90       	pop	r13
    5064:	cf 90       	pop	r12
    5066:	bf 90       	pop	r11
    5068:	af 90       	pop	r10
    506a:	9f 90       	pop	r9
    506c:	8f 90       	pop	r8
    506e:	7f 90       	pop	r7
    5070:	6f 90       	pop	r6
    5072:	5f 90       	pop	r5
    5074:	4f 90       	pop	r4
    5076:	3f 90       	pop	r3
    5078:	2f 90       	pop	r2
    507a:	08 95       	ret

0000507c <putval>:
    507c:	20 fd       	sbrc	r18, 0
    507e:	09 c0       	rjmp	.+18     	; 0x5092 <putval+0x16>
    5080:	fc 01       	movw	r30, r24
    5082:	23 fd       	sbrc	r18, 3
    5084:	05 c0       	rjmp	.+10     	; 0x5090 <putval+0x14>
    5086:	22 ff       	sbrs	r18, 2
    5088:	02 c0       	rjmp	.+4      	; 0x508e <putval+0x12>
    508a:	73 83       	std	Z+3, r23	; 0x03
    508c:	62 83       	std	Z+2, r22	; 0x02
    508e:	51 83       	std	Z+1, r21	; 0x01
    5090:	40 83       	st	Z, r20
    5092:	08 95       	ret

00005094 <mulacc>:
    5094:	44 fd       	sbrc	r20, 4
    5096:	17 c0       	rjmp	.+46     	; 0x50c6 <mulacc+0x32>
    5098:	46 fd       	sbrc	r20, 6
    509a:	17 c0       	rjmp	.+46     	; 0x50ca <mulacc+0x36>
    509c:	ab 01       	movw	r20, r22
    509e:	bc 01       	movw	r22, r24
    50a0:	da 01       	movw	r26, r20
    50a2:	fb 01       	movw	r30, r22
    50a4:	aa 0f       	add	r26, r26
    50a6:	bb 1f       	adc	r27, r27
    50a8:	ee 1f       	adc	r30, r30
    50aa:	ff 1f       	adc	r31, r31
    50ac:	10 94       	com	r1
    50ae:	d1 f7       	brne	.-12     	; 0x50a4 <mulacc+0x10>
    50b0:	4a 0f       	add	r20, r26
    50b2:	5b 1f       	adc	r21, r27
    50b4:	6e 1f       	adc	r22, r30
    50b6:	7f 1f       	adc	r23, r31
    50b8:	cb 01       	movw	r24, r22
    50ba:	ba 01       	movw	r22, r20
    50bc:	66 0f       	add	r22, r22
    50be:	77 1f       	adc	r23, r23
    50c0:	88 1f       	adc	r24, r24
    50c2:	99 1f       	adc	r25, r25
    50c4:	09 c0       	rjmp	.+18     	; 0x50d8 <mulacc+0x44>
    50c6:	33 e0       	ldi	r19, 0x03	; 3
    50c8:	01 c0       	rjmp	.+2      	; 0x50cc <mulacc+0x38>
    50ca:	34 e0       	ldi	r19, 0x04	; 4
    50cc:	66 0f       	add	r22, r22
    50ce:	77 1f       	adc	r23, r23
    50d0:	88 1f       	adc	r24, r24
    50d2:	99 1f       	adc	r25, r25
    50d4:	31 50       	subi	r19, 0x01	; 1
    50d6:	d1 f7       	brne	.-12     	; 0x50cc <mulacc+0x38>
    50d8:	62 0f       	add	r22, r18
    50da:	71 1d       	adc	r23, r1
    50dc:	81 1d       	adc	r24, r1
    50de:	91 1d       	adc	r25, r1
    50e0:	08 95       	ret

000050e2 <skip_spaces>:
    50e2:	0f 93       	push	r16
    50e4:	1f 93       	push	r17
    50e6:	cf 93       	push	r28
    50e8:	df 93       	push	r29
    50ea:	8c 01       	movw	r16, r24
    50ec:	c8 01       	movw	r24, r16
    50ee:	f4 d3       	rcall	.+2024   	; 0x58d8 <fgetc>
    50f0:	ec 01       	movw	r28, r24
    50f2:	97 fd       	sbrc	r25, 7
    50f4:	06 c0       	rjmp	.+12     	; 0x5102 <skip_spaces+0x20>
    50f6:	c0 d3       	rcall	.+1920   	; 0x5878 <isspace>
    50f8:	89 2b       	or	r24, r25
    50fa:	c1 f7       	brne	.-16     	; 0x50ec <skip_spaces+0xa>
    50fc:	b8 01       	movw	r22, r16
    50fe:	ce 01       	movw	r24, r28
    5100:	65 d4       	rcall	.+2250   	; 0x59cc <ungetc>
    5102:	ce 01       	movw	r24, r28
    5104:	df 91       	pop	r29
    5106:	cf 91       	pop	r28
    5108:	1f 91       	pop	r17
    510a:	0f 91       	pop	r16
    510c:	08 95       	ret

0000510e <conv_int>:
    510e:	8f 92       	push	r8
    5110:	9f 92       	push	r9
    5112:	af 92       	push	r10
    5114:	bf 92       	push	r11
    5116:	ef 92       	push	r14
    5118:	ff 92       	push	r15
    511a:	0f 93       	push	r16
    511c:	1f 93       	push	r17
    511e:	cf 93       	push	r28
    5120:	df 93       	push	r29
    5122:	8c 01       	movw	r16, r24
    5124:	d6 2f       	mov	r29, r22
    5126:	7a 01       	movw	r14, r20
    5128:	b2 2e       	mov	r11, r18
    512a:	d6 d3       	rcall	.+1964   	; 0x58d8 <fgetc>
    512c:	9c 01       	movw	r18, r24
    512e:	33 27       	eor	r19, r19
    5130:	2b 32       	cpi	r18, 0x2B	; 43
    5132:	31 05       	cpc	r19, r1
    5134:	31 f0       	breq	.+12     	; 0x5142 <conv_int+0x34>
    5136:	2d 32       	cpi	r18, 0x2D	; 45
    5138:	31 05       	cpc	r19, r1
    513a:	59 f4       	brne	.+22     	; 0x5152 <conv_int+0x44>
    513c:	8b 2d       	mov	r24, r11
    513e:	80 68       	ori	r24, 0x80	; 128
    5140:	b8 2e       	mov	r11, r24
    5142:	d1 50       	subi	r29, 0x01	; 1
    5144:	11 f4       	brne	.+4      	; 0x514a <conv_int+0x3c>
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	61 c0       	rjmp	.+194    	; 0x520c <conv_int+0xfe>
    514a:	c8 01       	movw	r24, r16
    514c:	c5 d3       	rcall	.+1930   	; 0x58d8 <fgetc>
    514e:	97 fd       	sbrc	r25, 7
    5150:	fa cf       	rjmp	.-12     	; 0x5146 <conv_int+0x38>
    5152:	cb 2d       	mov	r28, r11
    5154:	cd 7f       	andi	r28, 0xFD	; 253
    5156:	2b 2d       	mov	r18, r11
    5158:	20 73       	andi	r18, 0x30	; 48
    515a:	f9 f4       	brne	.+62     	; 0x519a <conv_int+0x8c>
    515c:	80 33       	cpi	r24, 0x30	; 48
    515e:	e9 f4       	brne	.+58     	; 0x519a <conv_int+0x8c>
    5160:	aa 24       	eor	r10, r10
    5162:	aa 94       	dec	r10
    5164:	ad 0e       	add	r10, r29
    5166:	09 f4       	brne	.+2      	; 0x516a <conv_int+0x5c>
    5168:	3e c0       	rjmp	.+124    	; 0x51e6 <conv_int+0xd8>
    516a:	c8 01       	movw	r24, r16
    516c:	b5 d3       	rcall	.+1898   	; 0x58d8 <fgetc>
    516e:	97 fd       	sbrc	r25, 7
    5170:	3a c0       	rjmp	.+116    	; 0x51e6 <conv_int+0xd8>
    5172:	9c 01       	movw	r18, r24
    5174:	2f 7d       	andi	r18, 0xDF	; 223
    5176:	33 27       	eor	r19, r19
    5178:	28 35       	cpi	r18, 0x58	; 88
    517a:	31 05       	cpc	r19, r1
    517c:	41 f4       	brne	.+16     	; 0x518e <conv_int+0x80>
    517e:	c2 64       	ori	r28, 0x42	; 66
    5180:	d2 50       	subi	r29, 0x02	; 2
    5182:	89 f1       	breq	.+98     	; 0x51e6 <conv_int+0xd8>
    5184:	c8 01       	movw	r24, r16
    5186:	a8 d3       	rcall	.+1872   	; 0x58d8 <fgetc>
    5188:	97 ff       	sbrs	r25, 7
    518a:	07 c0       	rjmp	.+14     	; 0x519a <conv_int+0x8c>
    518c:	2c c0       	rjmp	.+88     	; 0x51e6 <conv_int+0xd8>
    518e:	b6 fe       	sbrs	r11, 6
    5190:	02 c0       	rjmp	.+4      	; 0x5196 <conv_int+0x88>
    5192:	c2 60       	ori	r28, 0x02	; 2
    5194:	01 c0       	rjmp	.+2      	; 0x5198 <conv_int+0x8a>
    5196:	c2 61       	ori	r28, 0x12	; 18
    5198:	da 2d       	mov	r29, r10
    519a:	81 2c       	mov	r8, r1
    519c:	91 2c       	mov	r9, r1
    519e:	54 01       	movw	r10, r8
    51a0:	20 ed       	ldi	r18, 0xD0	; 208
    51a2:	28 0f       	add	r18, r24
    51a4:	28 30       	cpi	r18, 0x08	; 8
    51a6:	78 f0       	brcs	.+30     	; 0x51c6 <conv_int+0xb8>
    51a8:	c4 ff       	sbrs	r28, 4
    51aa:	03 c0       	rjmp	.+6      	; 0x51b2 <conv_int+0xa4>
    51ac:	b8 01       	movw	r22, r16
    51ae:	0e d4       	rcall	.+2076   	; 0x59cc <ungetc>
    51b0:	17 c0       	rjmp	.+46     	; 0x51e0 <conv_int+0xd2>
    51b2:	2a 30       	cpi	r18, 0x0A	; 10
    51b4:	40 f0       	brcs	.+16     	; 0x51c6 <conv_int+0xb8>
    51b6:	c6 ff       	sbrs	r28, 6
    51b8:	f9 cf       	rjmp	.-14     	; 0x51ac <conv_int+0x9e>
    51ba:	2f 7d       	andi	r18, 0xDF	; 223
    51bc:	3f ee       	ldi	r19, 0xEF	; 239
    51be:	32 0f       	add	r19, r18
    51c0:	36 30       	cpi	r19, 0x06	; 6
    51c2:	a0 f7       	brcc	.-24     	; 0x51ac <conv_int+0x9e>
    51c4:	27 50       	subi	r18, 0x07	; 7
    51c6:	4c 2f       	mov	r20, r28
    51c8:	c5 01       	movw	r24, r10
    51ca:	b4 01       	movw	r22, r8
    51cc:	63 df       	rcall	.-314    	; 0x5094 <mulacc>
    51ce:	4b 01       	movw	r8, r22
    51d0:	5c 01       	movw	r10, r24
    51d2:	c2 60       	ori	r28, 0x02	; 2
    51d4:	d1 50       	subi	r29, 0x01	; 1
    51d6:	51 f0       	breq	.+20     	; 0x51ec <conv_int+0xde>
    51d8:	c8 01       	movw	r24, r16
    51da:	7e d3       	rcall	.+1788   	; 0x58d8 <fgetc>
    51dc:	97 ff       	sbrs	r25, 7
    51de:	e0 cf       	rjmp	.-64     	; 0x51a0 <conv_int+0x92>
    51e0:	c1 fd       	sbrc	r28, 1
    51e2:	04 c0       	rjmp	.+8      	; 0x51ec <conv_int+0xde>
    51e4:	b0 cf       	rjmp	.-160    	; 0x5146 <conv_int+0x38>
    51e6:	81 2c       	mov	r8, r1
    51e8:	91 2c       	mov	r9, r1
    51ea:	54 01       	movw	r10, r8
    51ec:	c7 ff       	sbrs	r28, 7
    51ee:	08 c0       	rjmp	.+16     	; 0x5200 <conv_int+0xf2>
    51f0:	b0 94       	com	r11
    51f2:	a0 94       	com	r10
    51f4:	90 94       	com	r9
    51f6:	80 94       	com	r8
    51f8:	81 1c       	adc	r8, r1
    51fa:	91 1c       	adc	r9, r1
    51fc:	a1 1c       	adc	r10, r1
    51fe:	b1 1c       	adc	r11, r1
    5200:	2c 2f       	mov	r18, r28
    5202:	b5 01       	movw	r22, r10
    5204:	a4 01       	movw	r20, r8
    5206:	c7 01       	movw	r24, r14
    5208:	39 df       	rcall	.-398    	; 0x507c <putval>
    520a:	81 e0       	ldi	r24, 0x01	; 1
    520c:	df 91       	pop	r29
    520e:	cf 91       	pop	r28
    5210:	1f 91       	pop	r17
    5212:	0f 91       	pop	r16
    5214:	ff 90       	pop	r15
    5216:	ef 90       	pop	r14
    5218:	bf 90       	pop	r11
    521a:	af 90       	pop	r10
    521c:	9f 90       	pop	r9
    521e:	8f 90       	pop	r8
    5220:	08 95       	ret

00005222 <conv_brk>:
    5222:	5f 92       	push	r5
    5224:	6f 92       	push	r6
    5226:	7f 92       	push	r7
    5228:	8f 92       	push	r8
    522a:	9f 92       	push	r9
    522c:	af 92       	push	r10
    522e:	bf 92       	push	r11
    5230:	cf 92       	push	r12
    5232:	df 92       	push	r13
    5234:	ef 92       	push	r14
    5236:	ff 92       	push	r15
    5238:	0f 93       	push	r16
    523a:	1f 93       	push	r17
    523c:	cf 93       	push	r28
    523e:	df 93       	push	r29
    5240:	cd b7       	in	r28, 0x3d	; 61
    5242:	de b7       	in	r29, 0x3e	; 62
    5244:	a0 97       	sbiw	r28, 0x20	; 32
    5246:	cd bf       	out	0x3d, r28	; 61
    5248:	de bf       	out	0x3e, r29	; 62
    524a:	5c 01       	movw	r10, r24
    524c:	96 2e       	mov	r9, r22
    524e:	7a 01       	movw	r14, r20
    5250:	f9 01       	movw	r30, r18
    5252:	8e 01       	movw	r16, r28
    5254:	0f 5f       	subi	r16, 0xFF	; 255
    5256:	1f 4f       	sbci	r17, 0xFF	; 255
    5258:	68 01       	movw	r12, r16
    525a:	80 e2       	ldi	r24, 0x20	; 32
    525c:	d8 01       	movw	r26, r16
    525e:	1d 92       	st	X+, r1
    5260:	8a 95       	dec	r24
    5262:	e9 f7       	brne	.-6      	; 0x525e <conv_brk+0x3c>
    5264:	d5 01       	movw	r26, r10
    5266:	13 96       	adiw	r26, 0x03	; 3
    5268:	8c 90       	ld	r8, X
    526a:	80 e0       	ldi	r24, 0x00	; 0
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	61 2c       	mov	r6, r1
    5270:	71 2c       	mov	r7, r1
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	61 e0       	ldi	r22, 0x01	; 1
    5276:	70 e0       	ldi	r23, 0x00	; 0
    5278:	83 fc       	sbrc	r8, 3
    527a:	25 91       	lpm	r18, Z+
    527c:	83 fe       	sbrs	r8, 3
    527e:	21 91       	ld	r18, Z+
    5280:	8f 01       	movw	r16, r30
    5282:	52 2e       	mov	r5, r18
    5284:	21 11       	cpse	r18, r1
    5286:	03 c0       	rjmp	.+6      	; 0x528e <conv_brk+0x6c>
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	90 c0       	rjmp	.+288    	; 0x53ae <conv_brk+0x18c>
    528e:	2e 35       	cpi	r18, 0x5E	; 94
    5290:	11 f4       	brne	.+4      	; 0x5296 <conv_brk+0x74>
    5292:	00 97       	sbiw	r24, 0x00	; 0
    5294:	51 f1       	breq	.+84     	; 0x52ea <conv_brk+0xc8>
    5296:	43 2f       	mov	r20, r19
    5298:	50 e0       	ldi	r21, 0x00	; 0
    529a:	48 17       	cp	r20, r24
    529c:	59 07       	cpc	r21, r25
    529e:	3c f4       	brge	.+14     	; 0x52ae <conv_brk+0x8c>
    52a0:	2d 35       	cpi	r18, 0x5D	; 93
    52a2:	59 f1       	breq	.+86     	; 0x52fa <conv_brk+0xd8>
    52a4:	2d 32       	cpi	r18, 0x2D	; 45
    52a6:	19 f4       	brne	.+6      	; 0x52ae <conv_brk+0x8c>
    52a8:	77 20       	and	r7, r7
    52aa:	09 f1       	breq	.+66     	; 0x52ee <conv_brk+0xcc>
    52ac:	03 c0       	rjmp	.+6      	; 0x52b4 <conv_brk+0x92>
    52ae:	77 20       	and	r7, r7
    52b0:	09 f4       	brne	.+2      	; 0x52b4 <conv_brk+0x92>
    52b2:	68 c0       	rjmp	.+208    	; 0x5384 <conv_brk+0x162>
    52b4:	45 2d       	mov	r20, r5
    52b6:	46 95       	lsr	r20
    52b8:	46 95       	lsr	r20
    52ba:	46 95       	lsr	r20
    52bc:	d6 01       	movw	r26, r12
    52be:	a4 0f       	add	r26, r20
    52c0:	b1 1d       	adc	r27, r1
    52c2:	45 2d       	mov	r20, r5
    52c4:	47 70       	andi	r20, 0x07	; 7
    52c6:	8b 01       	movw	r16, r22
    52c8:	02 c0       	rjmp	.+4      	; 0x52ce <conv_brk+0xac>
    52ca:	00 0f       	add	r16, r16
    52cc:	11 1f       	adc	r17, r17
    52ce:	4a 95       	dec	r20
    52d0:	e2 f7       	brpl	.-8      	; 0x52ca <conv_brk+0xa8>
    52d2:	a8 01       	movw	r20, r16
    52d4:	5c 91       	ld	r21, X
    52d6:	45 2b       	or	r20, r21
    52d8:	4c 93       	st	X, r20
    52da:	65 14       	cp	r6, r5
    52dc:	59 f0       	breq	.+22     	; 0x52f4 <conv_brk+0xd2>
    52de:	56 14       	cp	r5, r6
    52e0:	10 f4       	brcc	.+4      	; 0x52e6 <conv_brk+0xc4>
    52e2:	53 94       	inc	r5
    52e4:	e7 cf       	rjmp	.-50     	; 0x52b4 <conv_brk+0x92>
    52e6:	5a 94       	dec	r5
    52e8:	e5 cf       	rjmp	.-54     	; 0x52b4 <conv_brk+0x92>
    52ea:	31 e0       	ldi	r19, 0x01	; 1
    52ec:	04 c0       	rjmp	.+8      	; 0x52f6 <conv_brk+0xd4>
    52ee:	77 24       	eor	r7, r7
    52f0:	73 94       	inc	r7
    52f2:	01 c0       	rjmp	.+2      	; 0x52f6 <conv_brk+0xd4>
    52f4:	71 2c       	mov	r7, r1
    52f6:	01 96       	adiw	r24, 0x01	; 1
    52f8:	bf cf       	rjmp	.-130    	; 0x5278 <conv_brk+0x56>
    52fa:	77 20       	and	r7, r7
    52fc:	19 f0       	breq	.+6      	; 0x5304 <conv_brk+0xe2>
    52fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5300:	80 62       	ori	r24, 0x20	; 32
    5302:	8e 83       	std	Y+6, r24	; 0x06
    5304:	31 11       	cpse	r19, r1
    5306:	03 c0       	rjmp	.+6      	; 0x530e <conv_brk+0xec>
    5308:	88 24       	eor	r8, r8
    530a:	83 94       	inc	r8
    530c:	17 c0       	rjmp	.+46     	; 0x533c <conv_brk+0x11a>
    530e:	f6 01       	movw	r30, r12
    5310:	9e 01       	movw	r18, r28
    5312:	2f 5d       	subi	r18, 0xDF	; 223
    5314:	3f 4f       	sbci	r19, 0xFF	; 255
    5316:	80 81       	ld	r24, Z
    5318:	80 95       	com	r24
    531a:	81 93       	st	Z+, r24
    531c:	2e 17       	cp	r18, r30
    531e:	3f 07       	cpc	r19, r31
    5320:	d1 f7       	brne	.-12     	; 0x5316 <conv_brk+0xf4>
    5322:	f2 cf       	rjmp	.-28     	; 0x5308 <conv_brk+0xe6>
    5324:	e1 14       	cp	r14, r1
    5326:	f1 04       	cpc	r15, r1
    5328:	29 f0       	breq	.+10     	; 0x5334 <conv_brk+0x112>
    532a:	d7 01       	movw	r26, r14
    532c:	8c 93       	st	X, r24
    532e:	f7 01       	movw	r30, r14
    5330:	31 96       	adiw	r30, 0x01	; 1
    5332:	7f 01       	movw	r14, r30
    5334:	9a 94       	dec	r9
    5336:	81 2c       	mov	r8, r1
    5338:	99 20       	and	r9, r9
    533a:	e9 f0       	breq	.+58     	; 0x5376 <conv_brk+0x154>
    533c:	c5 01       	movw	r24, r10
    533e:	cc d2       	rcall	.+1432   	; 0x58d8 <fgetc>
    5340:	97 fd       	sbrc	r25, 7
    5342:	17 c0       	rjmp	.+46     	; 0x5372 <conv_brk+0x150>
    5344:	fc 01       	movw	r30, r24
    5346:	ff 27       	eor	r31, r31
    5348:	23 e0       	ldi	r18, 0x03	; 3
    534a:	f5 95       	asr	r31
    534c:	e7 95       	ror	r30
    534e:	2a 95       	dec	r18
    5350:	e1 f7       	brne	.-8      	; 0x534a <conv_brk+0x128>
    5352:	ec 0d       	add	r30, r12
    5354:	fd 1d       	adc	r31, r13
    5356:	20 81       	ld	r18, Z
    5358:	30 e0       	ldi	r19, 0x00	; 0
    535a:	ac 01       	movw	r20, r24
    535c:	47 70       	andi	r20, 0x07	; 7
    535e:	55 27       	eor	r21, r21
    5360:	02 c0       	rjmp	.+4      	; 0x5366 <conv_brk+0x144>
    5362:	35 95       	asr	r19
    5364:	27 95       	ror	r18
    5366:	4a 95       	dec	r20
    5368:	e2 f7       	brpl	.-8      	; 0x5362 <conv_brk+0x140>
    536a:	20 fd       	sbrc	r18, 0
    536c:	db cf       	rjmp	.-74     	; 0x5324 <conv_brk+0x102>
    536e:	b5 01       	movw	r22, r10
    5370:	2d d3       	rcall	.+1626   	; 0x59cc <ungetc>
    5372:	81 10       	cpse	r8, r1
    5374:	89 cf       	rjmp	.-238    	; 0x5288 <conv_brk+0x66>
    5376:	e1 14       	cp	r14, r1
    5378:	f1 04       	cpc	r15, r1
    537a:	11 f0       	breq	.+4      	; 0x5380 <conv_brk+0x15e>
    537c:	d7 01       	movw	r26, r14
    537e:	1c 92       	st	X, r1
    5380:	c8 01       	movw	r24, r16
    5382:	15 c0       	rjmp	.+42     	; 0x53ae <conv_brk+0x18c>
    5384:	42 2f       	mov	r20, r18
    5386:	46 95       	lsr	r20
    5388:	46 95       	lsr	r20
    538a:	46 95       	lsr	r20
    538c:	d6 01       	movw	r26, r12
    538e:	a4 0f       	add	r26, r20
    5390:	b1 1d       	adc	r27, r1
    5392:	42 2f       	mov	r20, r18
    5394:	47 70       	andi	r20, 0x07	; 7
    5396:	8b 01       	movw	r16, r22
    5398:	02 c0       	rjmp	.+4      	; 0x539e <conv_brk+0x17c>
    539a:	00 0f       	add	r16, r16
    539c:	11 1f       	adc	r17, r17
    539e:	4a 95       	dec	r20
    53a0:	e2 f7       	brpl	.-8      	; 0x539a <conv_brk+0x178>
    53a2:	a8 01       	movw	r20, r16
    53a4:	5c 91       	ld	r21, X
    53a6:	45 2b       	or	r20, r21
    53a8:	4c 93       	st	X, r20
    53aa:	62 2e       	mov	r6, r18
    53ac:	a4 cf       	rjmp	.-184    	; 0x52f6 <conv_brk+0xd4>
    53ae:	a0 96       	adiw	r28, 0x20	; 32
    53b0:	cd bf       	out	0x3d, r28	; 61
    53b2:	de bf       	out	0x3e, r29	; 62
    53b4:	df 91       	pop	r29
    53b6:	cf 91       	pop	r28
    53b8:	1f 91       	pop	r17
    53ba:	0f 91       	pop	r16
    53bc:	ff 90       	pop	r15
    53be:	ef 90       	pop	r14
    53c0:	df 90       	pop	r13
    53c2:	cf 90       	pop	r12
    53c4:	bf 90       	pop	r11
    53c6:	af 90       	pop	r10
    53c8:	9f 90       	pop	r9
    53ca:	8f 90       	pop	r8
    53cc:	7f 90       	pop	r7
    53ce:	6f 90       	pop	r6
    53d0:	5f 90       	pop	r5
    53d2:	08 95       	ret

000053d4 <vfscanf>:
    53d4:	5f 92       	push	r5
    53d6:	6f 92       	push	r6
    53d8:	7f 92       	push	r7
    53da:	8f 92       	push	r8
    53dc:	9f 92       	push	r9
    53de:	af 92       	push	r10
    53e0:	bf 92       	push	r11
    53e2:	cf 92       	push	r12
    53e4:	df 92       	push	r13
    53e6:	ef 92       	push	r14
    53e8:	ff 92       	push	r15
    53ea:	0f 93       	push	r16
    53ec:	1f 93       	push	r17
    53ee:	cf 93       	push	r28
    53f0:	df 93       	push	r29
    53f2:	6c 01       	movw	r12, r24
    53f4:	eb 01       	movw	r28, r22
    53f6:	5a 01       	movw	r10, r20
    53f8:	fc 01       	movw	r30, r24
    53fa:	16 82       	std	Z+6, r1	; 0x06
    53fc:	17 82       	std	Z+7, r1	; 0x07
    53fe:	51 2c       	mov	r5, r1
    5400:	f6 01       	movw	r30, r12
    5402:	e3 80       	ldd	r14, Z+3	; 0x03
    5404:	fe 01       	movw	r30, r28
    5406:	e3 fc       	sbrc	r14, 3
    5408:	85 91       	lpm	r24, Z+
    540a:	e3 fe       	sbrs	r14, 3
    540c:	81 91       	ld	r24, Z+
    540e:	18 2f       	mov	r17, r24
    5410:	ef 01       	movw	r28, r30
    5412:	88 23       	and	r24, r24
    5414:	09 f4       	brne	.+2      	; 0x5418 <vfscanf+0x44>
    5416:	e0 c0       	rjmp	.+448    	; 0x55d8 <vfscanf+0x204>
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	2e d2       	rcall	.+1116   	; 0x5878 <isspace>
    541c:	89 2b       	or	r24, r25
    541e:	19 f0       	breq	.+6      	; 0x5426 <vfscanf+0x52>
    5420:	c6 01       	movw	r24, r12
    5422:	5f de       	rcall	.-834    	; 0x50e2 <skip_spaces>
    5424:	ed cf       	rjmp	.-38     	; 0x5400 <vfscanf+0x2c>
    5426:	15 32       	cpi	r17, 0x25	; 37
    5428:	41 f4       	brne	.+16     	; 0x543a <vfscanf+0x66>
    542a:	fe 01       	movw	r30, r28
    542c:	e3 fc       	sbrc	r14, 3
    542e:	15 91       	lpm	r17, Z+
    5430:	e3 fe       	sbrs	r14, 3
    5432:	11 91       	ld	r17, Z+
    5434:	ef 01       	movw	r28, r30
    5436:	15 32       	cpi	r17, 0x25	; 37
    5438:	71 f4       	brne	.+28     	; 0x5456 <vfscanf+0x82>
    543a:	c6 01       	movw	r24, r12
    543c:	4d d2       	rcall	.+1178   	; 0x58d8 <fgetc>
    543e:	97 fd       	sbrc	r25, 7
    5440:	c9 c0       	rjmp	.+402    	; 0x55d4 <vfscanf+0x200>
    5442:	41 2f       	mov	r20, r17
    5444:	50 e0       	ldi	r21, 0x00	; 0
    5446:	9c 01       	movw	r18, r24
    5448:	33 27       	eor	r19, r19
    544a:	24 17       	cp	r18, r20
    544c:	35 07       	cpc	r19, r21
    544e:	c1 f2       	breq	.-80     	; 0x5400 <vfscanf+0x2c>
    5450:	b6 01       	movw	r22, r12
    5452:	bc d2       	rcall	.+1400   	; 0x59cc <ungetc>
    5454:	c1 c0       	rjmp	.+386    	; 0x55d8 <vfscanf+0x204>
    5456:	1a 32       	cpi	r17, 0x2A	; 42
    5458:	39 f4       	brne	.+14     	; 0x5468 <vfscanf+0x94>
    545a:	e3 fc       	sbrc	r14, 3
    545c:	15 91       	lpm	r17, Z+
    545e:	e3 fe       	sbrs	r14, 3
    5460:	11 91       	ld	r17, Z+
    5462:	ef 01       	movw	r28, r30
    5464:	01 e0       	ldi	r16, 0x01	; 1
    5466:	01 c0       	rjmp	.+2      	; 0x546a <vfscanf+0x96>
    5468:	00 e0       	ldi	r16, 0x00	; 0
    546a:	f1 2c       	mov	r15, r1
    546c:	20 ed       	ldi	r18, 0xD0	; 208
    546e:	21 0f       	add	r18, r17
    5470:	2a 30       	cpi	r18, 0x0A	; 10
    5472:	78 f4       	brcc	.+30     	; 0x5492 <vfscanf+0xbe>
    5474:	02 60       	ori	r16, 0x02	; 2
    5476:	6f 2d       	mov	r22, r15
    5478:	70 e0       	ldi	r23, 0x00	; 0
    547a:	80 e0       	ldi	r24, 0x00	; 0
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	40 e2       	ldi	r20, 0x20	; 32
    5480:	09 de       	rcall	.-1006   	; 0x5094 <mulacc>
    5482:	f6 2e       	mov	r15, r22
    5484:	fe 01       	movw	r30, r28
    5486:	e3 fc       	sbrc	r14, 3
    5488:	15 91       	lpm	r17, Z+
    548a:	e3 fe       	sbrs	r14, 3
    548c:	11 91       	ld	r17, Z+
    548e:	ef 01       	movw	r28, r30
    5490:	ed cf       	rjmp	.-38     	; 0x546c <vfscanf+0x98>
    5492:	01 ff       	sbrs	r16, 1
    5494:	03 c0       	rjmp	.+6      	; 0x549c <vfscanf+0xc8>
    5496:	f1 10       	cpse	r15, r1
    5498:	03 c0       	rjmp	.+6      	; 0x54a0 <vfscanf+0xcc>
    549a:	9e c0       	rjmp	.+316    	; 0x55d8 <vfscanf+0x204>
    549c:	ff 24       	eor	r15, r15
    549e:	fa 94       	dec	r15
    54a0:	18 36       	cpi	r17, 0x68	; 104
    54a2:	19 f0       	breq	.+6      	; 0x54aa <vfscanf+0xd6>
    54a4:	1c 36       	cpi	r17, 0x6C	; 108
    54a6:	51 f0       	breq	.+20     	; 0x54bc <vfscanf+0xe8>
    54a8:	10 c0       	rjmp	.+32     	; 0x54ca <vfscanf+0xf6>
    54aa:	fe 01       	movw	r30, r28
    54ac:	e3 fc       	sbrc	r14, 3
    54ae:	15 91       	lpm	r17, Z+
    54b0:	e3 fe       	sbrs	r14, 3
    54b2:	11 91       	ld	r17, Z+
    54b4:	ef 01       	movw	r28, r30
    54b6:	18 36       	cpi	r17, 0x68	; 104
    54b8:	41 f4       	brne	.+16     	; 0x54ca <vfscanf+0xf6>
    54ba:	08 60       	ori	r16, 0x08	; 8
    54bc:	04 60       	ori	r16, 0x04	; 4
    54be:	fe 01       	movw	r30, r28
    54c0:	e3 fc       	sbrc	r14, 3
    54c2:	15 91       	lpm	r17, Z+
    54c4:	e3 fe       	sbrs	r14, 3
    54c6:	11 91       	ld	r17, Z+
    54c8:	ef 01       	movw	r28, r30
    54ca:	11 23       	and	r17, r17
    54cc:	09 f4       	brne	.+2      	; 0x54d0 <vfscanf+0xfc>
    54ce:	84 c0       	rjmp	.+264    	; 0x55d8 <vfscanf+0x204>
    54d0:	61 2f       	mov	r22, r17
    54d2:	70 e0       	ldi	r23, 0x00	; 0
    54d4:	84 ea       	ldi	r24, 0xA4	; 164
    54d6:	92 e0       	ldi	r25, 0x02	; 2
    54d8:	d7 d1       	rcall	.+942    	; 0x5888 <strchr_P>
    54da:	89 2b       	or	r24, r25
    54dc:	09 f4       	brne	.+2      	; 0x54e0 <vfscanf+0x10c>
    54de:	7c c0       	rjmp	.+248    	; 0x55d8 <vfscanf+0x204>
    54e0:	00 fd       	sbrc	r16, 0
    54e2:	07 c0       	rjmp	.+14     	; 0x54f2 <vfscanf+0x11e>
    54e4:	f5 01       	movw	r30, r10
    54e6:	80 80       	ld	r8, Z
    54e8:	91 80       	ldd	r9, Z+1	; 0x01
    54ea:	c5 01       	movw	r24, r10
    54ec:	02 96       	adiw	r24, 0x02	; 2
    54ee:	5c 01       	movw	r10, r24
    54f0:	02 c0       	rjmp	.+4      	; 0x54f6 <vfscanf+0x122>
    54f2:	81 2c       	mov	r8, r1
    54f4:	91 2c       	mov	r9, r1
    54f6:	1e 36       	cpi	r17, 0x6E	; 110
    54f8:	49 f4       	brne	.+18     	; 0x550c <vfscanf+0x138>
    54fa:	f6 01       	movw	r30, r12
    54fc:	46 81       	ldd	r20, Z+6	; 0x06
    54fe:	57 81       	ldd	r21, Z+7	; 0x07
    5500:	60 e0       	ldi	r22, 0x00	; 0
    5502:	70 e0       	ldi	r23, 0x00	; 0
    5504:	20 2f       	mov	r18, r16
    5506:	c4 01       	movw	r24, r8
    5508:	b9 dd       	rcall	.-1166   	; 0x507c <putval>
    550a:	7a cf       	rjmp	.-268    	; 0x5400 <vfscanf+0x2c>
    550c:	13 36       	cpi	r17, 0x63	; 99
    550e:	a1 f4       	brne	.+40     	; 0x5538 <vfscanf+0x164>
    5510:	01 fd       	sbrc	r16, 1
    5512:	02 c0       	rjmp	.+4      	; 0x5518 <vfscanf+0x144>
    5514:	ff 24       	eor	r15, r15
    5516:	f3 94       	inc	r15
    5518:	c6 01       	movw	r24, r12
    551a:	de d1       	rcall	.+956    	; 0x58d8 <fgetc>
    551c:	97 fd       	sbrc	r25, 7
    551e:	5a c0       	rjmp	.+180    	; 0x55d4 <vfscanf+0x200>
    5520:	81 14       	cp	r8, r1
    5522:	91 04       	cpc	r9, r1
    5524:	29 f0       	breq	.+10     	; 0x5530 <vfscanf+0x15c>
    5526:	f4 01       	movw	r30, r8
    5528:	80 83       	st	Z, r24
    552a:	c4 01       	movw	r24, r8
    552c:	01 96       	adiw	r24, 0x01	; 1
    552e:	4c 01       	movw	r8, r24
    5530:	fa 94       	dec	r15
    5532:	f1 10       	cpse	r15, r1
    5534:	f1 cf       	rjmp	.-30     	; 0x5518 <vfscanf+0x144>
    5536:	4a c0       	rjmp	.+148    	; 0x55cc <vfscanf+0x1f8>
    5538:	1b 35       	cpi	r17, 0x5B	; 91
    553a:	51 f4       	brne	.+20     	; 0x5550 <vfscanf+0x17c>
    553c:	9e 01       	movw	r18, r28
    553e:	a4 01       	movw	r20, r8
    5540:	6f 2d       	mov	r22, r15
    5542:	c6 01       	movw	r24, r12
    5544:	6e de       	rcall	.-804    	; 0x5222 <conv_brk>
    5546:	ec 01       	movw	r28, r24
    5548:	89 2b       	or	r24, r25
    554a:	09 f0       	breq	.+2      	; 0x554e <vfscanf+0x17a>
    554c:	3f c0       	rjmp	.+126    	; 0x55cc <vfscanf+0x1f8>
    554e:	39 c0       	rjmp	.+114    	; 0x55c2 <vfscanf+0x1ee>
    5550:	c6 01       	movw	r24, r12
    5552:	c7 dd       	rcall	.-1138   	; 0x50e2 <skip_spaces>
    5554:	97 fd       	sbrc	r25, 7
    5556:	3e c0       	rjmp	.+124    	; 0x55d4 <vfscanf+0x200>
    5558:	1f 36       	cpi	r17, 0x6F	; 111
    555a:	49 f1       	breq	.+82     	; 0x55ae <vfscanf+0x1da>
    555c:	28 f4       	brcc	.+10     	; 0x5568 <vfscanf+0x194>
    555e:	14 36       	cpi	r17, 0x64	; 100
    5560:	21 f1       	breq	.+72     	; 0x55aa <vfscanf+0x1d6>
    5562:	19 36       	cpi	r17, 0x69	; 105
    5564:	39 f1       	breq	.+78     	; 0x55b4 <vfscanf+0x1e0>
    5566:	25 c0       	rjmp	.+74     	; 0x55b2 <vfscanf+0x1de>
    5568:	13 37       	cpi	r17, 0x73	; 115
    556a:	71 f0       	breq	.+28     	; 0x5588 <vfscanf+0x1b4>
    556c:	15 37       	cpi	r17, 0x75	; 117
    556e:	e9 f0       	breq	.+58     	; 0x55aa <vfscanf+0x1d6>
    5570:	20 c0       	rjmp	.+64     	; 0x55b2 <vfscanf+0x1de>
    5572:	81 14       	cp	r8, r1
    5574:	91 04       	cpc	r9, r1
    5576:	29 f0       	breq	.+10     	; 0x5582 <vfscanf+0x1ae>
    5578:	f4 01       	movw	r30, r8
    557a:	60 82       	st	Z, r6
    557c:	c4 01       	movw	r24, r8
    557e:	01 96       	adiw	r24, 0x01	; 1
    5580:	4c 01       	movw	r8, r24
    5582:	fa 94       	dec	r15
    5584:	ff 20       	and	r15, r15
    5586:	59 f0       	breq	.+22     	; 0x559e <vfscanf+0x1ca>
    5588:	c6 01       	movw	r24, r12
    558a:	a6 d1       	rcall	.+844    	; 0x58d8 <fgetc>
    558c:	3c 01       	movw	r6, r24
    558e:	97 fd       	sbrc	r25, 7
    5590:	06 c0       	rjmp	.+12     	; 0x559e <vfscanf+0x1ca>
    5592:	72 d1       	rcall	.+740    	; 0x5878 <isspace>
    5594:	89 2b       	or	r24, r25
    5596:	69 f3       	breq	.-38     	; 0x5572 <vfscanf+0x19e>
    5598:	b6 01       	movw	r22, r12
    559a:	c3 01       	movw	r24, r6
    559c:	17 d2       	rcall	.+1070   	; 0x59cc <ungetc>
    559e:	81 14       	cp	r8, r1
    55a0:	91 04       	cpc	r9, r1
    55a2:	a1 f0       	breq	.+40     	; 0x55cc <vfscanf+0x1f8>
    55a4:	f4 01       	movw	r30, r8
    55a6:	10 82       	st	Z, r1
    55a8:	11 c0       	rjmp	.+34     	; 0x55cc <vfscanf+0x1f8>
    55aa:	00 62       	ori	r16, 0x20	; 32
    55ac:	03 c0       	rjmp	.+6      	; 0x55b4 <vfscanf+0x1e0>
    55ae:	00 61       	ori	r16, 0x10	; 16
    55b0:	01 c0       	rjmp	.+2      	; 0x55b4 <vfscanf+0x1e0>
    55b2:	00 64       	ori	r16, 0x40	; 64
    55b4:	20 2f       	mov	r18, r16
    55b6:	a4 01       	movw	r20, r8
    55b8:	6f 2d       	mov	r22, r15
    55ba:	c6 01       	movw	r24, r12
    55bc:	a8 dd       	rcall	.-1200   	; 0x510e <conv_int>
    55be:	81 11       	cpse	r24, r1
    55c0:	05 c0       	rjmp	.+10     	; 0x55cc <vfscanf+0x1f8>
    55c2:	f6 01       	movw	r30, r12
    55c4:	83 81       	ldd	r24, Z+3	; 0x03
    55c6:	80 73       	andi	r24, 0x30	; 48
    55c8:	29 f4       	brne	.+10     	; 0x55d4 <vfscanf+0x200>
    55ca:	06 c0       	rjmp	.+12     	; 0x55d8 <vfscanf+0x204>
    55cc:	00 fd       	sbrc	r16, 0
    55ce:	18 cf       	rjmp	.-464    	; 0x5400 <vfscanf+0x2c>
    55d0:	53 94       	inc	r5
    55d2:	16 cf       	rjmp	.-468    	; 0x5400 <vfscanf+0x2c>
    55d4:	55 20       	and	r5, r5
    55d6:	19 f0       	breq	.+6      	; 0x55de <vfscanf+0x20a>
    55d8:	85 2d       	mov	r24, r5
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	02 c0       	rjmp	.+4      	; 0x55e2 <vfscanf+0x20e>
    55de:	8f ef       	ldi	r24, 0xFF	; 255
    55e0:	9f ef       	ldi	r25, 0xFF	; 255
    55e2:	df 91       	pop	r29
    55e4:	cf 91       	pop	r28
    55e6:	1f 91       	pop	r17
    55e8:	0f 91       	pop	r16
    55ea:	ff 90       	pop	r15
    55ec:	ef 90       	pop	r14
    55ee:	df 90       	pop	r13
    55f0:	cf 90       	pop	r12
    55f2:	bf 90       	pop	r11
    55f4:	af 90       	pop	r10
    55f6:	9f 90       	pop	r9
    55f8:	8f 90       	pop	r8
    55fa:	7f 90       	pop	r7
    55fc:	6f 90       	pop	r6
    55fe:	5f 90       	pop	r5
    5600:	08 95       	ret

00005602 <calloc>:
    5602:	0f 93       	push	r16
    5604:	1f 93       	push	r17
    5606:	cf 93       	push	r28
    5608:	df 93       	push	r29
    560a:	86 9f       	mul	r24, r22
    560c:	80 01       	movw	r16, r0
    560e:	87 9f       	mul	r24, r23
    5610:	10 0d       	add	r17, r0
    5612:	96 9f       	mul	r25, r22
    5614:	10 0d       	add	r17, r0
    5616:	11 24       	eor	r1, r1
    5618:	c8 01       	movw	r24, r16
    561a:	0d d0       	rcall	.+26     	; 0x5636 <malloc>
    561c:	ec 01       	movw	r28, r24
    561e:	00 97       	sbiw	r24, 0x00	; 0
    5620:	21 f0       	breq	.+8      	; 0x562a <calloc+0x28>
    5622:	a8 01       	movw	r20, r16
    5624:	60 e0       	ldi	r22, 0x00	; 0
    5626:	70 e0       	ldi	r23, 0x00	; 0
    5628:	45 d1       	rcall	.+650    	; 0x58b4 <memset>
    562a:	ce 01       	movw	r24, r28
    562c:	df 91       	pop	r29
    562e:	cf 91       	pop	r28
    5630:	1f 91       	pop	r17
    5632:	0f 91       	pop	r16
    5634:	08 95       	ret

00005636 <malloc>:
    5636:	0f 93       	push	r16
    5638:	1f 93       	push	r17
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	82 30       	cpi	r24, 0x02	; 2
    5640:	91 05       	cpc	r25, r1
    5642:	10 f4       	brcc	.+4      	; 0x5648 <malloc+0x12>
    5644:	82 e0       	ldi	r24, 0x02	; 2
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	e0 91 37 22 	lds	r30, 0x2237	; 0x802237 <__flp>
    564c:	f0 91 38 22 	lds	r31, 0x2238	; 0x802238 <__flp+0x1>
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	a0 e0       	ldi	r26, 0x00	; 0
    5656:	b0 e0       	ldi	r27, 0x00	; 0
    5658:	30 97       	sbiw	r30, 0x00	; 0
    565a:	19 f1       	breq	.+70     	; 0x56a2 <malloc+0x6c>
    565c:	40 81       	ld	r20, Z
    565e:	51 81       	ldd	r21, Z+1	; 0x01
    5660:	02 81       	ldd	r16, Z+2	; 0x02
    5662:	13 81       	ldd	r17, Z+3	; 0x03
    5664:	48 17       	cp	r20, r24
    5666:	59 07       	cpc	r21, r25
    5668:	c8 f0       	brcs	.+50     	; 0x569c <malloc+0x66>
    566a:	84 17       	cp	r24, r20
    566c:	95 07       	cpc	r25, r21
    566e:	69 f4       	brne	.+26     	; 0x568a <malloc+0x54>
    5670:	10 97       	sbiw	r26, 0x00	; 0
    5672:	31 f0       	breq	.+12     	; 0x5680 <malloc+0x4a>
    5674:	12 96       	adiw	r26, 0x02	; 2
    5676:	0c 93       	st	X, r16
    5678:	12 97       	sbiw	r26, 0x02	; 2
    567a:	13 96       	adiw	r26, 0x03	; 3
    567c:	1c 93       	st	X, r17
    567e:	27 c0       	rjmp	.+78     	; 0x56ce <malloc+0x98>
    5680:	00 93 37 22 	sts	0x2237, r16	; 0x802237 <__flp>
    5684:	10 93 38 22 	sts	0x2238, r17	; 0x802238 <__flp+0x1>
    5688:	22 c0       	rjmp	.+68     	; 0x56ce <malloc+0x98>
    568a:	21 15       	cp	r18, r1
    568c:	31 05       	cpc	r19, r1
    568e:	19 f0       	breq	.+6      	; 0x5696 <malloc+0x60>
    5690:	42 17       	cp	r20, r18
    5692:	53 07       	cpc	r21, r19
    5694:	18 f4       	brcc	.+6      	; 0x569c <malloc+0x66>
    5696:	9a 01       	movw	r18, r20
    5698:	bd 01       	movw	r22, r26
    569a:	ef 01       	movw	r28, r30
    569c:	df 01       	movw	r26, r30
    569e:	f8 01       	movw	r30, r16
    56a0:	db cf       	rjmp	.-74     	; 0x5658 <malloc+0x22>
    56a2:	21 15       	cp	r18, r1
    56a4:	31 05       	cpc	r19, r1
    56a6:	f9 f0       	breq	.+62     	; 0x56e6 <malloc+0xb0>
    56a8:	28 1b       	sub	r18, r24
    56aa:	39 0b       	sbc	r19, r25
    56ac:	24 30       	cpi	r18, 0x04	; 4
    56ae:	31 05       	cpc	r19, r1
    56b0:	80 f4       	brcc	.+32     	; 0x56d2 <malloc+0x9c>
    56b2:	8a 81       	ldd	r24, Y+2	; 0x02
    56b4:	9b 81       	ldd	r25, Y+3	; 0x03
    56b6:	61 15       	cp	r22, r1
    56b8:	71 05       	cpc	r23, r1
    56ba:	21 f0       	breq	.+8      	; 0x56c4 <malloc+0x8e>
    56bc:	fb 01       	movw	r30, r22
    56be:	82 83       	std	Z+2, r24	; 0x02
    56c0:	93 83       	std	Z+3, r25	; 0x03
    56c2:	04 c0       	rjmp	.+8      	; 0x56cc <malloc+0x96>
    56c4:	80 93 37 22 	sts	0x2237, r24	; 0x802237 <__flp>
    56c8:	90 93 38 22 	sts	0x2238, r25	; 0x802238 <__flp+0x1>
    56cc:	fe 01       	movw	r30, r28
    56ce:	32 96       	adiw	r30, 0x02	; 2
    56d0:	44 c0       	rjmp	.+136    	; 0x575a <malloc+0x124>
    56d2:	fe 01       	movw	r30, r28
    56d4:	e2 0f       	add	r30, r18
    56d6:	f3 1f       	adc	r31, r19
    56d8:	81 93       	st	Z+, r24
    56da:	91 93       	st	Z+, r25
    56dc:	22 50       	subi	r18, 0x02	; 2
    56de:	31 09       	sbc	r19, r1
    56e0:	28 83       	st	Y, r18
    56e2:	39 83       	std	Y+1, r19	; 0x01
    56e4:	3a c0       	rjmp	.+116    	; 0x575a <malloc+0x124>
    56e6:	20 91 35 22 	lds	r18, 0x2235	; 0x802235 <__brkval>
    56ea:	30 91 36 22 	lds	r19, 0x2236	; 0x802236 <__brkval+0x1>
    56ee:	23 2b       	or	r18, r19
    56f0:	41 f4       	brne	.+16     	; 0x5702 <malloc+0xcc>
    56f2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    56f6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    56fa:	20 93 35 22 	sts	0x2235, r18	; 0x802235 <__brkval>
    56fe:	30 93 36 22 	sts	0x2236, r19	; 0x802236 <__brkval+0x1>
    5702:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    5706:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    570a:	21 15       	cp	r18, r1
    570c:	31 05       	cpc	r19, r1
    570e:	41 f4       	brne	.+16     	; 0x5720 <malloc+0xea>
    5710:	2d b7       	in	r18, 0x3d	; 61
    5712:	3e b7       	in	r19, 0x3e	; 62
    5714:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5718:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    571c:	24 1b       	sub	r18, r20
    571e:	35 0b       	sbc	r19, r21
    5720:	e0 91 35 22 	lds	r30, 0x2235	; 0x802235 <__brkval>
    5724:	f0 91 36 22 	lds	r31, 0x2236	; 0x802236 <__brkval+0x1>
    5728:	e2 17       	cp	r30, r18
    572a:	f3 07       	cpc	r31, r19
    572c:	a0 f4       	brcc	.+40     	; 0x5756 <malloc+0x120>
    572e:	2e 1b       	sub	r18, r30
    5730:	3f 0b       	sbc	r19, r31
    5732:	28 17       	cp	r18, r24
    5734:	39 07       	cpc	r19, r25
    5736:	78 f0       	brcs	.+30     	; 0x5756 <malloc+0x120>
    5738:	ac 01       	movw	r20, r24
    573a:	4e 5f       	subi	r20, 0xFE	; 254
    573c:	5f 4f       	sbci	r21, 0xFF	; 255
    573e:	24 17       	cp	r18, r20
    5740:	35 07       	cpc	r19, r21
    5742:	48 f0       	brcs	.+18     	; 0x5756 <malloc+0x120>
    5744:	4e 0f       	add	r20, r30
    5746:	5f 1f       	adc	r21, r31
    5748:	40 93 35 22 	sts	0x2235, r20	; 0x802235 <__brkval>
    574c:	50 93 36 22 	sts	0x2236, r21	; 0x802236 <__brkval+0x1>
    5750:	81 93       	st	Z+, r24
    5752:	91 93       	st	Z+, r25
    5754:	02 c0       	rjmp	.+4      	; 0x575a <malloc+0x124>
    5756:	e0 e0       	ldi	r30, 0x00	; 0
    5758:	f0 e0       	ldi	r31, 0x00	; 0
    575a:	cf 01       	movw	r24, r30
    575c:	df 91       	pop	r29
    575e:	cf 91       	pop	r28
    5760:	1f 91       	pop	r17
    5762:	0f 91       	pop	r16
    5764:	08 95       	ret

00005766 <free>:
    5766:	cf 93       	push	r28
    5768:	df 93       	push	r29
    576a:	00 97       	sbiw	r24, 0x00	; 0
    576c:	09 f4       	brne	.+2      	; 0x5770 <free+0xa>
    576e:	81 c0       	rjmp	.+258    	; 0x5872 <free+0x10c>
    5770:	fc 01       	movw	r30, r24
    5772:	32 97       	sbiw	r30, 0x02	; 2
    5774:	12 82       	std	Z+2, r1	; 0x02
    5776:	13 82       	std	Z+3, r1	; 0x03
    5778:	a0 91 37 22 	lds	r26, 0x2237	; 0x802237 <__flp>
    577c:	b0 91 38 22 	lds	r27, 0x2238	; 0x802238 <__flp+0x1>
    5780:	10 97       	sbiw	r26, 0x00	; 0
    5782:	81 f4       	brne	.+32     	; 0x57a4 <free+0x3e>
    5784:	20 81       	ld	r18, Z
    5786:	31 81       	ldd	r19, Z+1	; 0x01
    5788:	82 0f       	add	r24, r18
    578a:	93 1f       	adc	r25, r19
    578c:	20 91 35 22 	lds	r18, 0x2235	; 0x802235 <__brkval>
    5790:	30 91 36 22 	lds	r19, 0x2236	; 0x802236 <__brkval+0x1>
    5794:	28 17       	cp	r18, r24
    5796:	39 07       	cpc	r19, r25
    5798:	51 f5       	brne	.+84     	; 0x57ee <free+0x88>
    579a:	e0 93 35 22 	sts	0x2235, r30	; 0x802235 <__brkval>
    579e:	f0 93 36 22 	sts	0x2236, r31	; 0x802236 <__brkval+0x1>
    57a2:	67 c0       	rjmp	.+206    	; 0x5872 <free+0x10c>
    57a4:	ed 01       	movw	r28, r26
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	ce 17       	cp	r28, r30
    57ac:	df 07       	cpc	r29, r31
    57ae:	40 f4       	brcc	.+16     	; 0x57c0 <free+0x5a>
    57b0:	4a 81       	ldd	r20, Y+2	; 0x02
    57b2:	5b 81       	ldd	r21, Y+3	; 0x03
    57b4:	9e 01       	movw	r18, r28
    57b6:	41 15       	cp	r20, r1
    57b8:	51 05       	cpc	r21, r1
    57ba:	f1 f0       	breq	.+60     	; 0x57f8 <free+0x92>
    57bc:	ea 01       	movw	r28, r20
    57be:	f5 cf       	rjmp	.-22     	; 0x57aa <free+0x44>
    57c0:	c2 83       	std	Z+2, r28	; 0x02
    57c2:	d3 83       	std	Z+3, r29	; 0x03
    57c4:	40 81       	ld	r20, Z
    57c6:	51 81       	ldd	r21, Z+1	; 0x01
    57c8:	84 0f       	add	r24, r20
    57ca:	95 1f       	adc	r25, r21
    57cc:	c8 17       	cp	r28, r24
    57ce:	d9 07       	cpc	r29, r25
    57d0:	59 f4       	brne	.+22     	; 0x57e8 <free+0x82>
    57d2:	88 81       	ld	r24, Y
    57d4:	99 81       	ldd	r25, Y+1	; 0x01
    57d6:	84 0f       	add	r24, r20
    57d8:	95 1f       	adc	r25, r21
    57da:	02 96       	adiw	r24, 0x02	; 2
    57dc:	80 83       	st	Z, r24
    57de:	91 83       	std	Z+1, r25	; 0x01
    57e0:	8a 81       	ldd	r24, Y+2	; 0x02
    57e2:	9b 81       	ldd	r25, Y+3	; 0x03
    57e4:	82 83       	std	Z+2, r24	; 0x02
    57e6:	93 83       	std	Z+3, r25	; 0x03
    57e8:	21 15       	cp	r18, r1
    57ea:	31 05       	cpc	r19, r1
    57ec:	29 f4       	brne	.+10     	; 0x57f8 <free+0x92>
    57ee:	e0 93 37 22 	sts	0x2237, r30	; 0x802237 <__flp>
    57f2:	f0 93 38 22 	sts	0x2238, r31	; 0x802238 <__flp+0x1>
    57f6:	3d c0       	rjmp	.+122    	; 0x5872 <free+0x10c>
    57f8:	e9 01       	movw	r28, r18
    57fa:	ea 83       	std	Y+2, r30	; 0x02
    57fc:	fb 83       	std	Y+3, r31	; 0x03
    57fe:	49 91       	ld	r20, Y+
    5800:	59 91       	ld	r21, Y+
    5802:	c4 0f       	add	r28, r20
    5804:	d5 1f       	adc	r29, r21
    5806:	ec 17       	cp	r30, r28
    5808:	fd 07       	cpc	r31, r29
    580a:	61 f4       	brne	.+24     	; 0x5824 <free+0xbe>
    580c:	80 81       	ld	r24, Z
    580e:	91 81       	ldd	r25, Z+1	; 0x01
    5810:	84 0f       	add	r24, r20
    5812:	95 1f       	adc	r25, r21
    5814:	02 96       	adiw	r24, 0x02	; 2
    5816:	e9 01       	movw	r28, r18
    5818:	88 83       	st	Y, r24
    581a:	99 83       	std	Y+1, r25	; 0x01
    581c:	82 81       	ldd	r24, Z+2	; 0x02
    581e:	93 81       	ldd	r25, Z+3	; 0x03
    5820:	8a 83       	std	Y+2, r24	; 0x02
    5822:	9b 83       	std	Y+3, r25	; 0x03
    5824:	e0 e0       	ldi	r30, 0x00	; 0
    5826:	f0 e0       	ldi	r31, 0x00	; 0
    5828:	12 96       	adiw	r26, 0x02	; 2
    582a:	8d 91       	ld	r24, X+
    582c:	9c 91       	ld	r25, X
    582e:	13 97       	sbiw	r26, 0x03	; 3
    5830:	00 97       	sbiw	r24, 0x00	; 0
    5832:	19 f0       	breq	.+6      	; 0x583a <free+0xd4>
    5834:	fd 01       	movw	r30, r26
    5836:	dc 01       	movw	r26, r24
    5838:	f7 cf       	rjmp	.-18     	; 0x5828 <free+0xc2>
    583a:	8d 91       	ld	r24, X+
    583c:	9c 91       	ld	r25, X
    583e:	11 97       	sbiw	r26, 0x01	; 1
    5840:	9d 01       	movw	r18, r26
    5842:	2e 5f       	subi	r18, 0xFE	; 254
    5844:	3f 4f       	sbci	r19, 0xFF	; 255
    5846:	82 0f       	add	r24, r18
    5848:	93 1f       	adc	r25, r19
    584a:	20 91 35 22 	lds	r18, 0x2235	; 0x802235 <__brkval>
    584e:	30 91 36 22 	lds	r19, 0x2236	; 0x802236 <__brkval+0x1>
    5852:	28 17       	cp	r18, r24
    5854:	39 07       	cpc	r19, r25
    5856:	69 f4       	brne	.+26     	; 0x5872 <free+0x10c>
    5858:	30 97       	sbiw	r30, 0x00	; 0
    585a:	29 f4       	brne	.+10     	; 0x5866 <free+0x100>
    585c:	10 92 37 22 	sts	0x2237, r1	; 0x802237 <__flp>
    5860:	10 92 38 22 	sts	0x2238, r1	; 0x802238 <__flp+0x1>
    5864:	02 c0       	rjmp	.+4      	; 0x586a <free+0x104>
    5866:	12 82       	std	Z+2, r1	; 0x02
    5868:	13 82       	std	Z+3, r1	; 0x03
    586a:	a0 93 35 22 	sts	0x2235, r26	; 0x802235 <__brkval>
    586e:	b0 93 36 22 	sts	0x2236, r27	; 0x802236 <__brkval+0x1>
    5872:	df 91       	pop	r29
    5874:	cf 91       	pop	r28
    5876:	08 95       	ret

00005878 <isspace>:
    5878:	91 11       	cpse	r25, r1
    587a:	1f c1       	rjmp	.+574    	; 0x5aba <__ctype_isfalse>
    587c:	80 32       	cpi	r24, 0x20	; 32
    587e:	19 f0       	breq	.+6      	; 0x5886 <isspace+0xe>
    5880:	89 50       	subi	r24, 0x09	; 9
    5882:	85 50       	subi	r24, 0x05	; 5
    5884:	d0 f7       	brcc	.-12     	; 0x587a <isspace+0x2>
    5886:	08 95       	ret

00005888 <strchr_P>:
    5888:	fc 01       	movw	r30, r24
    588a:	05 90       	lpm	r0, Z+
    588c:	06 16       	cp	r0, r22
    588e:	21 f0       	breq	.+8      	; 0x5898 <strchr_P+0x10>
    5890:	00 20       	and	r0, r0
    5892:	d9 f7       	brne	.-10     	; 0x588a <strchr_P+0x2>
    5894:	c0 01       	movw	r24, r0
    5896:	08 95       	ret
    5898:	31 97       	sbiw	r30, 0x01	; 1
    589a:	cf 01       	movw	r24, r30
    589c:	08 95       	ret

0000589e <strnlen_P>:
    589e:	fc 01       	movw	r30, r24
    58a0:	05 90       	lpm	r0, Z+
    58a2:	61 50       	subi	r22, 0x01	; 1
    58a4:	70 40       	sbci	r23, 0x00	; 0
    58a6:	01 10       	cpse	r0, r1
    58a8:	d8 f7       	brcc	.-10     	; 0x58a0 <strnlen_P+0x2>
    58aa:	80 95       	com	r24
    58ac:	90 95       	com	r25
    58ae:	8e 0f       	add	r24, r30
    58b0:	9f 1f       	adc	r25, r31
    58b2:	08 95       	ret

000058b4 <memset>:
    58b4:	dc 01       	movw	r26, r24
    58b6:	01 c0       	rjmp	.+2      	; 0x58ba <memset+0x6>
    58b8:	6d 93       	st	X+, r22
    58ba:	41 50       	subi	r20, 0x01	; 1
    58bc:	50 40       	sbci	r21, 0x00	; 0
    58be:	e0 f7       	brcc	.-8      	; 0x58b8 <memset+0x4>
    58c0:	08 95       	ret

000058c2 <strnlen>:
    58c2:	fc 01       	movw	r30, r24
    58c4:	61 50       	subi	r22, 0x01	; 1
    58c6:	70 40       	sbci	r23, 0x00	; 0
    58c8:	01 90       	ld	r0, Z+
    58ca:	01 10       	cpse	r0, r1
    58cc:	d8 f7       	brcc	.-10     	; 0x58c4 <strnlen+0x2>
    58ce:	80 95       	com	r24
    58d0:	90 95       	com	r25
    58d2:	8e 0f       	add	r24, r30
    58d4:	9f 1f       	adc	r25, r31
    58d6:	08 95       	ret

000058d8 <fgetc>:
    58d8:	cf 93       	push	r28
    58da:	df 93       	push	r29
    58dc:	ec 01       	movw	r28, r24
    58de:	2b 81       	ldd	r18, Y+3	; 0x03
    58e0:	20 ff       	sbrs	r18, 0
    58e2:	33 c0       	rjmp	.+102    	; 0x594a <fgetc+0x72>
    58e4:	26 ff       	sbrs	r18, 6
    58e6:	0a c0       	rjmp	.+20     	; 0x58fc <fgetc+0x24>
    58e8:	2f 7b       	andi	r18, 0xBF	; 191
    58ea:	2b 83       	std	Y+3, r18	; 0x03
    58ec:	8e 81       	ldd	r24, Y+6	; 0x06
    58ee:	9f 81       	ldd	r25, Y+7	; 0x07
    58f0:	01 96       	adiw	r24, 0x01	; 1
    58f2:	8e 83       	std	Y+6, r24	; 0x06
    58f4:	9f 83       	std	Y+7, r25	; 0x07
    58f6:	8a 81       	ldd	r24, Y+2	; 0x02
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	29 c0       	rjmp	.+82     	; 0x594e <fgetc+0x76>
    58fc:	22 ff       	sbrs	r18, 2
    58fe:	0f c0       	rjmp	.+30     	; 0x591e <fgetc+0x46>
    5900:	e8 81       	ld	r30, Y
    5902:	f9 81       	ldd	r31, Y+1	; 0x01
    5904:	80 81       	ld	r24, Z
    5906:	08 2e       	mov	r0, r24
    5908:	00 0c       	add	r0, r0
    590a:	99 0b       	sbc	r25, r25
    590c:	00 97       	sbiw	r24, 0x00	; 0
    590e:	19 f4       	brne	.+6      	; 0x5916 <fgetc+0x3e>
    5910:	20 62       	ori	r18, 0x20	; 32
    5912:	2b 83       	std	Y+3, r18	; 0x03
    5914:	1a c0       	rjmp	.+52     	; 0x594a <fgetc+0x72>
    5916:	31 96       	adiw	r30, 0x01	; 1
    5918:	e8 83       	st	Y, r30
    591a:	f9 83       	std	Y+1, r31	; 0x01
    591c:	0e c0       	rjmp	.+28     	; 0x593a <fgetc+0x62>
    591e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5920:	fb 85       	ldd	r31, Y+11	; 0x0b
    5922:	19 95       	eicall
    5924:	97 ff       	sbrs	r25, 7
    5926:	09 c0       	rjmp	.+18     	; 0x593a <fgetc+0x62>
    5928:	2b 81       	ldd	r18, Y+3	; 0x03
    592a:	01 96       	adiw	r24, 0x01	; 1
    592c:	11 f0       	breq	.+4      	; 0x5932 <fgetc+0x5a>
    592e:	80 e2       	ldi	r24, 0x20	; 32
    5930:	01 c0       	rjmp	.+2      	; 0x5934 <fgetc+0x5c>
    5932:	80 e1       	ldi	r24, 0x10	; 16
    5934:	82 2b       	or	r24, r18
    5936:	8b 83       	std	Y+3, r24	; 0x03
    5938:	08 c0       	rjmp	.+16     	; 0x594a <fgetc+0x72>
    593a:	2e 81       	ldd	r18, Y+6	; 0x06
    593c:	3f 81       	ldd	r19, Y+7	; 0x07
    593e:	2f 5f       	subi	r18, 0xFF	; 255
    5940:	3f 4f       	sbci	r19, 0xFF	; 255
    5942:	2e 83       	std	Y+6, r18	; 0x06
    5944:	3f 83       	std	Y+7, r19	; 0x07
    5946:	99 27       	eor	r25, r25
    5948:	02 c0       	rjmp	.+4      	; 0x594e <fgetc+0x76>
    594a:	8f ef       	ldi	r24, 0xFF	; 255
    594c:	9f ef       	ldi	r25, 0xFF	; 255
    594e:	df 91       	pop	r29
    5950:	cf 91       	pop	r28
    5952:	08 95       	ret

00005954 <fputc>:
    5954:	0f 93       	push	r16
    5956:	1f 93       	push	r17
    5958:	cf 93       	push	r28
    595a:	df 93       	push	r29
    595c:	fb 01       	movw	r30, r22
    595e:	23 81       	ldd	r18, Z+3	; 0x03
    5960:	21 fd       	sbrc	r18, 1
    5962:	03 c0       	rjmp	.+6      	; 0x596a <fputc+0x16>
    5964:	8f ef       	ldi	r24, 0xFF	; 255
    5966:	9f ef       	ldi	r25, 0xFF	; 255
    5968:	2c c0       	rjmp	.+88     	; 0x59c2 <fputc+0x6e>
    596a:	22 ff       	sbrs	r18, 2
    596c:	16 c0       	rjmp	.+44     	; 0x599a <fputc+0x46>
    596e:	46 81       	ldd	r20, Z+6	; 0x06
    5970:	57 81       	ldd	r21, Z+7	; 0x07
    5972:	24 81       	ldd	r18, Z+4	; 0x04
    5974:	35 81       	ldd	r19, Z+5	; 0x05
    5976:	42 17       	cp	r20, r18
    5978:	53 07       	cpc	r21, r19
    597a:	44 f4       	brge	.+16     	; 0x598c <fputc+0x38>
    597c:	a0 81       	ld	r26, Z
    597e:	b1 81       	ldd	r27, Z+1	; 0x01
    5980:	9d 01       	movw	r18, r26
    5982:	2f 5f       	subi	r18, 0xFF	; 255
    5984:	3f 4f       	sbci	r19, 0xFF	; 255
    5986:	20 83       	st	Z, r18
    5988:	31 83       	std	Z+1, r19	; 0x01
    598a:	8c 93       	st	X, r24
    598c:	26 81       	ldd	r18, Z+6	; 0x06
    598e:	37 81       	ldd	r19, Z+7	; 0x07
    5990:	2f 5f       	subi	r18, 0xFF	; 255
    5992:	3f 4f       	sbci	r19, 0xFF	; 255
    5994:	26 83       	std	Z+6, r18	; 0x06
    5996:	37 83       	std	Z+7, r19	; 0x07
    5998:	14 c0       	rjmp	.+40     	; 0x59c2 <fputc+0x6e>
    599a:	8b 01       	movw	r16, r22
    599c:	ec 01       	movw	r28, r24
    599e:	fb 01       	movw	r30, r22
    59a0:	00 84       	ldd	r0, Z+8	; 0x08
    59a2:	f1 85       	ldd	r31, Z+9	; 0x09
    59a4:	e0 2d       	mov	r30, r0
    59a6:	19 95       	eicall
    59a8:	89 2b       	or	r24, r25
    59aa:	e1 f6       	brne	.-72     	; 0x5964 <fputc+0x10>
    59ac:	d8 01       	movw	r26, r16
    59ae:	16 96       	adiw	r26, 0x06	; 6
    59b0:	8d 91       	ld	r24, X+
    59b2:	9c 91       	ld	r25, X
    59b4:	17 97       	sbiw	r26, 0x07	; 7
    59b6:	01 96       	adiw	r24, 0x01	; 1
    59b8:	16 96       	adiw	r26, 0x06	; 6
    59ba:	8d 93       	st	X+, r24
    59bc:	9c 93       	st	X, r25
    59be:	17 97       	sbiw	r26, 0x07	; 7
    59c0:	ce 01       	movw	r24, r28
    59c2:	df 91       	pop	r29
    59c4:	cf 91       	pop	r28
    59c6:	1f 91       	pop	r17
    59c8:	0f 91       	pop	r16
    59ca:	08 95       	ret

000059cc <ungetc>:
    59cc:	fb 01       	movw	r30, r22
    59ce:	23 81       	ldd	r18, Z+3	; 0x03
    59d0:	20 ff       	sbrs	r18, 0
    59d2:	12 c0       	rjmp	.+36     	; 0x59f8 <ungetc+0x2c>
    59d4:	26 fd       	sbrc	r18, 6
    59d6:	10 c0       	rjmp	.+32     	; 0x59f8 <ungetc+0x2c>
    59d8:	8f 3f       	cpi	r24, 0xFF	; 255
    59da:	3f ef       	ldi	r19, 0xFF	; 255
    59dc:	93 07       	cpc	r25, r19
    59de:	61 f0       	breq	.+24     	; 0x59f8 <ungetc+0x2c>
    59e0:	82 83       	std	Z+2, r24	; 0x02
    59e2:	2f 7d       	andi	r18, 0xDF	; 223
    59e4:	20 64       	ori	r18, 0x40	; 64
    59e6:	23 83       	std	Z+3, r18	; 0x03
    59e8:	26 81       	ldd	r18, Z+6	; 0x06
    59ea:	37 81       	ldd	r19, Z+7	; 0x07
    59ec:	21 50       	subi	r18, 0x01	; 1
    59ee:	31 09       	sbc	r19, r1
    59f0:	26 83       	std	Z+6, r18	; 0x06
    59f2:	37 83       	std	Z+7, r19	; 0x07
    59f4:	99 27       	eor	r25, r25
    59f6:	08 95       	ret
    59f8:	8f ef       	ldi	r24, 0xFF	; 255
    59fa:	9f ef       	ldi	r25, 0xFF	; 255
    59fc:	08 95       	ret

000059fe <__ultoa_invert>:
    59fe:	fa 01       	movw	r30, r20
    5a00:	aa 27       	eor	r26, r26
    5a02:	28 30       	cpi	r18, 0x08	; 8
    5a04:	51 f1       	breq	.+84     	; 0x5a5a <__ultoa_invert+0x5c>
    5a06:	20 31       	cpi	r18, 0x10	; 16
    5a08:	81 f1       	breq	.+96     	; 0x5a6a <__ultoa_invert+0x6c>
    5a0a:	e8 94       	clt
    5a0c:	6f 93       	push	r22
    5a0e:	6e 7f       	andi	r22, 0xFE	; 254
    5a10:	6e 5f       	subi	r22, 0xFE	; 254
    5a12:	7f 4f       	sbci	r23, 0xFF	; 255
    5a14:	8f 4f       	sbci	r24, 0xFF	; 255
    5a16:	9f 4f       	sbci	r25, 0xFF	; 255
    5a18:	af 4f       	sbci	r26, 0xFF	; 255
    5a1a:	b1 e0       	ldi	r27, 0x01	; 1
    5a1c:	3e d0       	rcall	.+124    	; 0x5a9a <__ultoa_invert+0x9c>
    5a1e:	b4 e0       	ldi	r27, 0x04	; 4
    5a20:	3c d0       	rcall	.+120    	; 0x5a9a <__ultoa_invert+0x9c>
    5a22:	67 0f       	add	r22, r23
    5a24:	78 1f       	adc	r23, r24
    5a26:	89 1f       	adc	r24, r25
    5a28:	9a 1f       	adc	r25, r26
    5a2a:	a1 1d       	adc	r26, r1
    5a2c:	68 0f       	add	r22, r24
    5a2e:	79 1f       	adc	r23, r25
    5a30:	8a 1f       	adc	r24, r26
    5a32:	91 1d       	adc	r25, r1
    5a34:	a1 1d       	adc	r26, r1
    5a36:	6a 0f       	add	r22, r26
    5a38:	71 1d       	adc	r23, r1
    5a3a:	81 1d       	adc	r24, r1
    5a3c:	91 1d       	adc	r25, r1
    5a3e:	a1 1d       	adc	r26, r1
    5a40:	20 d0       	rcall	.+64     	; 0x5a82 <__ultoa_invert+0x84>
    5a42:	09 f4       	brne	.+2      	; 0x5a46 <__ultoa_invert+0x48>
    5a44:	68 94       	set
    5a46:	3f 91       	pop	r19
    5a48:	2a e0       	ldi	r18, 0x0A	; 10
    5a4a:	26 9f       	mul	r18, r22
    5a4c:	11 24       	eor	r1, r1
    5a4e:	30 19       	sub	r19, r0
    5a50:	30 5d       	subi	r19, 0xD0	; 208
    5a52:	31 93       	st	Z+, r19
    5a54:	de f6       	brtc	.-74     	; 0x5a0c <__ultoa_invert+0xe>
    5a56:	cf 01       	movw	r24, r30
    5a58:	08 95       	ret
    5a5a:	46 2f       	mov	r20, r22
    5a5c:	47 70       	andi	r20, 0x07	; 7
    5a5e:	40 5d       	subi	r20, 0xD0	; 208
    5a60:	41 93       	st	Z+, r20
    5a62:	b3 e0       	ldi	r27, 0x03	; 3
    5a64:	0f d0       	rcall	.+30     	; 0x5a84 <__ultoa_invert+0x86>
    5a66:	c9 f7       	brne	.-14     	; 0x5a5a <__ultoa_invert+0x5c>
    5a68:	f6 cf       	rjmp	.-20     	; 0x5a56 <__ultoa_invert+0x58>
    5a6a:	46 2f       	mov	r20, r22
    5a6c:	4f 70       	andi	r20, 0x0F	; 15
    5a6e:	40 5d       	subi	r20, 0xD0	; 208
    5a70:	4a 33       	cpi	r20, 0x3A	; 58
    5a72:	18 f0       	brcs	.+6      	; 0x5a7a <__ultoa_invert+0x7c>
    5a74:	49 5d       	subi	r20, 0xD9	; 217
    5a76:	31 fd       	sbrc	r19, 1
    5a78:	40 52       	subi	r20, 0x20	; 32
    5a7a:	41 93       	st	Z+, r20
    5a7c:	02 d0       	rcall	.+4      	; 0x5a82 <__ultoa_invert+0x84>
    5a7e:	a9 f7       	brne	.-22     	; 0x5a6a <__ultoa_invert+0x6c>
    5a80:	ea cf       	rjmp	.-44     	; 0x5a56 <__ultoa_invert+0x58>
    5a82:	b4 e0       	ldi	r27, 0x04	; 4
    5a84:	a6 95       	lsr	r26
    5a86:	97 95       	ror	r25
    5a88:	87 95       	ror	r24
    5a8a:	77 95       	ror	r23
    5a8c:	67 95       	ror	r22
    5a8e:	ba 95       	dec	r27
    5a90:	c9 f7       	brne	.-14     	; 0x5a84 <__ultoa_invert+0x86>
    5a92:	00 97       	sbiw	r24, 0x00	; 0
    5a94:	61 05       	cpc	r22, r1
    5a96:	71 05       	cpc	r23, r1
    5a98:	08 95       	ret
    5a9a:	9b 01       	movw	r18, r22
    5a9c:	ac 01       	movw	r20, r24
    5a9e:	0a 2e       	mov	r0, r26
    5aa0:	06 94       	lsr	r0
    5aa2:	57 95       	ror	r21
    5aa4:	47 95       	ror	r20
    5aa6:	37 95       	ror	r19
    5aa8:	27 95       	ror	r18
    5aaa:	ba 95       	dec	r27
    5aac:	c9 f7       	brne	.-14     	; 0x5aa0 <__ultoa_invert+0xa2>
    5aae:	62 0f       	add	r22, r18
    5ab0:	73 1f       	adc	r23, r19
    5ab2:	84 1f       	adc	r24, r20
    5ab4:	95 1f       	adc	r25, r21
    5ab6:	a0 1d       	adc	r26, r0
    5ab8:	08 95       	ret

00005aba <__ctype_isfalse>:
    5aba:	99 27       	eor	r25, r25
    5abc:	88 27       	eor	r24, r24

00005abe <__ctype_istrue>:
    5abe:	08 95       	ret

00005ac0 <_exit>:
    5ac0:	f8 94       	cli

00005ac2 <__stop_program>:
    5ac2:	ff cf       	rjmp	.-2      	; 0x5ac2 <__stop_program>
