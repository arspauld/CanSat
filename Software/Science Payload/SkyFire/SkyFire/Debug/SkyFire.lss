
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00802000  00002442  000024d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008020a2  008020a2  00002578  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f628  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000555e  00000000  00000000  00011fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000063e1  00000000  00000000  00017502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d30  00000000  00000000  0001d8e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032a7f  00000000  00000000  0001e614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003aab  00000000  00000000  00051093  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  00054b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000026e9  00000000  00000000  00054e46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c1       	rjmp	.+636    	; 0x27e <__ctors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c1       	rjmp	.+672    	; 0x2ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c1       	rjmp	.+620    	; 0x2ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c1       	rjmp	.+612    	; 0x2ca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c1       	rjmp	.+608    	; 0x2ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bad_interrupt>
      9a:	00 00       	nop
      9c:	36 c2       	rjmp	.+1132   	; 0x50a <__vector_39>
      9e:	00 00       	nop
      a0:	71 c2       	rjmp	.+1250   	; 0x584 <__vector_40>
      a2:	00 00       	nop
      a4:	ac c2       	rjmp	.+1368   	; 0x5fe <__vector_41>
      a6:	00 00       	nop
      a8:	e7 c2       	rjmp	.+1486   	; 0x678 <__vector_42>
      aa:	00 00       	nop
      ac:	0e c1       	rjmp	.+540    	; 0x2ca <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0c c1       	rjmp	.+536    	; 0x2ca <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0a c1       	rjmp	.+532    	; 0x2ca <__bad_interrupt>
      b6:	00 00       	nop
      b8:	08 c1       	rjmp	.+528    	; 0x2ca <__bad_interrupt>
      ba:	00 00       	nop
      bc:	06 c1       	rjmp	.+524    	; 0x2ca <__bad_interrupt>
      be:	00 00       	nop
      c0:	04 c1       	rjmp	.+520    	; 0x2ca <__bad_interrupt>
      c2:	00 00       	nop
      c4:	02 c1       	rjmp	.+516    	; 0x2ca <__bad_interrupt>
      c6:	00 00       	nop
      c8:	00 c1       	rjmp	.+512    	; 0x2ca <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fe c0       	rjmp	.+508    	; 0x2ca <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fc c0       	rjmp	.+504    	; 0x2ca <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fa c0       	rjmp	.+500    	; 0x2ca <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f8 c0       	rjmp	.+496    	; 0x2ca <__bad_interrupt>
      da:	00 00       	nop
      dc:	f6 c0       	rjmp	.+492    	; 0x2ca <__bad_interrupt>
      de:	00 00       	nop
      e0:	f4 c0       	rjmp	.+488    	; 0x2ca <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f2 c0       	rjmp	.+484    	; 0x2ca <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f0 c0       	rjmp	.+480    	; 0x2ca <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ee c0       	rjmp	.+476    	; 0x2ca <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ec c0       	rjmp	.+472    	; 0x2ca <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ea c0       	rjmp	.+468    	; 0x2ca <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e8 c0       	rjmp	.+464    	; 0x2ca <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e6 c0       	rjmp	.+460    	; 0x2ca <__bad_interrupt>
      fe:	00 00       	nop
     100:	e4 c0       	rjmp	.+456    	; 0x2ca <__bad_interrupt>
     102:	00 00       	nop
     104:	e2 c0       	rjmp	.+452    	; 0x2ca <__bad_interrupt>
     106:	00 00       	nop
     108:	e0 c0       	rjmp	.+448    	; 0x2ca <__bad_interrupt>
     10a:	00 00       	nop
     10c:	de c0       	rjmp	.+444    	; 0x2ca <__bad_interrupt>
     10e:	00 00       	nop
     110:	dc c0       	rjmp	.+440    	; 0x2ca <__bad_interrupt>
     112:	00 00       	nop
     114:	da c0       	rjmp	.+436    	; 0x2ca <__bad_interrupt>
     116:	00 00       	nop
     118:	d8 c0       	rjmp	.+432    	; 0x2ca <__bad_interrupt>
     11a:	00 00       	nop
     11c:	02 c1       	rjmp	.+516    	; 0x322 <__vector_71>
     11e:	00 00       	nop
     120:	3d c1       	rjmp	.+634    	; 0x39c <__vector_72>
     122:	00 00       	nop
     124:	78 c1       	rjmp	.+752    	; 0x416 <__vector_73>
     126:	00 00       	nop
     128:	b3 c1       	rjmp	.+870    	; 0x490 <__vector_74>
     12a:	00 00       	nop
     12c:	ce c0       	rjmp	.+412    	; 0x2ca <__bad_interrupt>
     12e:	00 00       	nop
     130:	cc c0       	rjmp	.+408    	; 0x2ca <__bad_interrupt>
     132:	00 00       	nop
     134:	ca c0       	rjmp	.+404    	; 0x2ca <__bad_interrupt>
     136:	00 00       	nop
     138:	c8 c0       	rjmp	.+400    	; 0x2ca <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c6 c0       	rjmp	.+396    	; 0x2ca <__bad_interrupt>
     13e:	00 00       	nop
     140:	c4 c0       	rjmp	.+392    	; 0x2ca <__bad_interrupt>
     142:	00 00       	nop
     144:	c2 c0       	rjmp	.+388    	; 0x2ca <__bad_interrupt>
     146:	00 00       	nop
     148:	c0 c0       	rjmp	.+384    	; 0x2ca <__bad_interrupt>
     14a:	00 00       	nop
     14c:	be c0       	rjmp	.+380    	; 0x2ca <__bad_interrupt>
     14e:	00 00       	nop
     150:	bc c0       	rjmp	.+376    	; 0x2ca <__bad_interrupt>
     152:	00 00       	nop
     154:	ba c0       	rjmp	.+372    	; 0x2ca <__bad_interrupt>
     156:	00 00       	nop
     158:	b8 c0       	rjmp	.+368    	; 0x2ca <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b6 c0       	rjmp	.+364    	; 0x2ca <__bad_interrupt>
     15e:	00 00       	nop
     160:	b4 c0       	rjmp	.+360    	; 0x2ca <__bad_interrupt>
     162:	00 00       	nop
     164:	b2 c0       	rjmp	.+356    	; 0x2ca <__bad_interrupt>
     166:	00 00       	nop
     168:	b0 c0       	rjmp	.+352    	; 0x2ca <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ae c0       	rjmp	.+348    	; 0x2ca <__bad_interrupt>
     16e:	00 00       	nop
     170:	ac c0       	rjmp	.+344    	; 0x2ca <__bad_interrupt>
     172:	00 00       	nop
     174:	aa c0       	rjmp	.+340    	; 0x2ca <__bad_interrupt>
     176:	00 00       	nop
     178:	a8 c0       	rjmp	.+336    	; 0x2ca <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a6 c0       	rjmp	.+332    	; 0x2ca <__bad_interrupt>
     17e:	00 00       	nop
     180:	a4 c0       	rjmp	.+328    	; 0x2ca <__bad_interrupt>
     182:	00 00       	nop
     184:	a2 c0       	rjmp	.+324    	; 0x2ca <__bad_interrupt>
     186:	00 00       	nop
     188:	a0 c0       	rjmp	.+320    	; 0x2ca <__bad_interrupt>
     18a:	00 00       	nop
     18c:	9e c0       	rjmp	.+316    	; 0x2ca <__bad_interrupt>
     18e:	00 00       	nop
     190:	9c c0       	rjmp	.+312    	; 0x2ca <__bad_interrupt>
     192:	00 00       	nop
     194:	9a c0       	rjmp	.+308    	; 0x2ca <__bad_interrupt>
     196:	00 00       	nop
     198:	98 c0       	rjmp	.+304    	; 0x2ca <__bad_interrupt>
     19a:	00 00       	nop
     19c:	96 c0       	rjmp	.+300    	; 0x2ca <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	94 c0       	rjmp	.+296    	; 0x2ca <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	92 c0       	rjmp	.+292    	; 0x2ca <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	90 c0       	rjmp	.+288    	; 0x2ca <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	8e c0       	rjmp	.+284    	; 0x2ca <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8c c0       	rjmp	.+280    	; 0x2ca <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8a c0       	rjmp	.+276    	; 0x2ca <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	88 c0       	rjmp	.+272    	; 0x2ca <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	86 c0       	rjmp	.+268    	; 0x2ca <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	84 c0       	rjmp	.+264    	; 0x2ca <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	82 c0       	rjmp	.+260    	; 0x2ca <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	80 c0       	rjmp	.+256    	; 0x2ca <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	7e c0       	rjmp	.+252    	; 0x2ca <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7c c0       	rjmp	.+248    	; 0x2ca <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7a c0       	rjmp	.+244    	; 0x2ca <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	78 c0       	rjmp	.+240    	; 0x2ca <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	76 c0       	rjmp	.+236    	; 0x2ca <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	74 c0       	rjmp	.+232    	; 0x2ca <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	72 c0       	rjmp	.+228    	; 0x2ca <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	70 c0       	rjmp	.+224    	; 0x2ca <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	6e c0       	rjmp	.+220    	; 0x2ca <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6c c0       	rjmp	.+216    	; 0x2ca <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6a c0       	rjmp	.+212    	; 0x2ca <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	68 c0       	rjmp	.+208    	; 0x2ca <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <usart_init_rs232+0x11c>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
     254:	00 00       	nop
     256:	07 63       	ori	r16, 0x37	; 55
     258:	42 36       	cpi	r20, 0x62	; 98
     25a:	b7 9b       	sbis	0x16, 7	; 22
     25c:	d8 a7       	std	Y+40, r29	; 0x28
     25e:	1a 39       	cpi	r17, 0x9A	; 154
     260:	68 56       	subi	r22, 0x68	; 104
     262:	18 ae       	std	Y+56, r1	; 0x38
     264:	ba ab       	std	Y+50, r27	; 0x32
     266:	55 8c       	ldd	r5, Z+29	; 0x1d
     268:	1d 3c       	cpi	r17, 0xCD	; 205
     26a:	b7 cc       	rjmp	.-1682   	; 0xfffffbda <__eeprom_end+0xff7efbda>
     26c:	57 63       	ori	r21, 0x37	; 55
     26e:	bd 6d       	ori	r27, 0xDD	; 221
     270:	ed fd       	.word	0xfded	; ????
     272:	75 3e       	cpi	r23, 0xE5	; 229
     274:	f6 17       	cp	r31, r22
     276:	72 31       	cpi	r23, 0x12	; 18
     278:	bf 00       	.word	0x00bf	; ????
     27a:	00 00       	nop
     27c:	80 3f       	cpi	r24, 0xF0	; 240

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df e3       	ldi	r29, 0x3F	; 63
     288:	de bf       	out	0x3e, r29	; 62
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	0c bf       	out	0x3c, r16	; 60
     28e:	18 be       	out	0x38, r1	; 56
     290:	19 be       	out	0x39, r1	; 57
     292:	1a be       	out	0x3a, r1	; 58
     294:	1b be       	out	0x3b, r1	; 59

00000296 <__do_copy_data>:
     296:	10 e2       	ldi	r17, 0x20	; 32
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e2       	ldi	r27, 0x20	; 32
     29c:	e2 e4       	ldi	r30, 0x42	; 66
     29e:	f4 e2       	ldi	r31, 0x24	; 36
     2a0:	00 e0       	ldi	r16, 0x00	; 0
     2a2:	0b bf       	out	0x3b, r16	; 59
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x14>
     2a6:	07 90       	elpm	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	a2 3a       	cpi	r26, 0xA2	; 162
     2ac:	b1 07       	cpc	r27, r17
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0x10>
     2b0:	1b be       	out	0x3b, r1	; 59

000002b2 <__do_clear_bss>:
     2b2:	20 e2       	ldi	r18, 0x20	; 32
     2b4:	a2 ea       	ldi	r26, 0xA2	; 162
     2b6:	b0 e2       	ldi	r27, 0x20	; 32
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a7 3c       	cpi	r26, 0xC7	; 199
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <main>
     2c6:	0c 94 1f 12 	jmp	0x243e	; 0x243e <_exit>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	1f 92       	push	r1
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2d6:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <stdio_base>
     2da:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <stdio_base+0x1>
     2de:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <ptr_get>
     2e2:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <ptr_get+0x1>
     2e6:	be 01       	movw	r22, r28
     2e8:	6f 5f       	subi	r22, 0xFF	; 255
     2ea:	7f 4f       	sbci	r23, 0xFF	; 255
     2ec:	19 95       	eicall
	return c;
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     2f0:	08 2e       	mov	r0, r24
     2f2:	00 0c       	add	r0, r0
     2f4:	99 0b       	sbc	r25, r25
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2fe:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     300:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <stdio_base>
     304:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <stdio_base+0x1>
     308:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <ptr_put>
     30c:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <ptr_put+0x1>
     310:	19 95       	eicall
     312:	99 23       	and	r25, r25
     314:	1c f0       	brlt	.+6      	; 0x31c <_write+0x1e>
		return -1;
	}
	return 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     320:	08 95       	ret

00000322 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	08 b6       	in	r0, 0x38	; 56
     32e:	0f 92       	push	r0
     330:	18 be       	out	0x38, r1	; 56
     332:	09 b6       	in	r0, 0x39	; 57
     334:	0f 92       	push	r0
     336:	19 be       	out	0x39, r1	; 57
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	1b be       	out	0x3b, r1	; 59
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     356:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     35a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     35e:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <adca_callback>
     362:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <adca_callback+0x1>
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	19 95       	eicall
}
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	7f 91       	pop	r23
     37c:	6f 91       	pop	r22
     37e:	5f 91       	pop	r21
     380:	4f 91       	pop	r20
     382:	3f 91       	pop	r19
     384:	2f 91       	pop	r18
     386:	0f 90       	pop	r0
     388:	0b be       	out	0x3b, r0	; 59
     38a:	0f 90       	pop	r0
     38c:	09 be       	out	0x39, r0	; 57
     38e:	0f 90       	pop	r0
     390:	08 be       	out	0x38, r0	; 56
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	08 b6       	in	r0, 0x38	; 56
     3a8:	0f 92       	push	r0
     3aa:	18 be       	out	0x38, r1	; 56
     3ac:	09 b6       	in	r0, 0x39	; 57
     3ae:	0f 92       	push	r0
     3b0:	19 be       	out	0x39, r1	; 57
     3b2:	0b b6       	in	r0, 0x3b	; 59
     3b4:	0f 92       	push	r0
     3b6:	1b be       	out	0x3b, r1	; 59
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3d0:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3d4:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d8:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <adca_callback>
     3dc:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <adca_callback+0x1>
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	19 95       	eicall
}
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	bf 91       	pop	r27
     3ee:	af 91       	pop	r26
     3f0:	9f 91       	pop	r25
     3f2:	8f 91       	pop	r24
     3f4:	7f 91       	pop	r23
     3f6:	6f 91       	pop	r22
     3f8:	5f 91       	pop	r21
     3fa:	4f 91       	pop	r20
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0b be       	out	0x3b, r0	; 59
     404:	0f 90       	pop	r0
     406:	09 be       	out	0x39, r0	; 57
     408:	0f 90       	pop	r0
     40a:	08 be       	out	0x38, r0	; 56
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	08 b6       	in	r0, 0x38	; 56
     422:	0f 92       	push	r0
     424:	18 be       	out	0x38, r1	; 56
     426:	09 b6       	in	r0, 0x39	; 57
     428:	0f 92       	push	r0
     42a:	19 be       	out	0x39, r1	; 57
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	1b be       	out	0x3b, r1	; 59
     432:	2f 93       	push	r18
     434:	3f 93       	push	r19
     436:	4f 93       	push	r20
     438:	5f 93       	push	r21
     43a:	6f 93       	push	r22
     43c:	7f 93       	push	r23
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	af 93       	push	r26
     444:	bf 93       	push	r27
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     44a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     44e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     452:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <adca_callback>
     456:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <adca_callback+0x1>
     45a:	64 e0       	ldi	r22, 0x04	; 4
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	19 95       	eicall
}
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0b be       	out	0x3b, r0	; 59
     47e:	0f 90       	pop	r0
     480:	09 be       	out	0x39, r0	; 57
     482:	0f 90       	pop	r0
     484:	08 be       	out	0x38, r0	; 56
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	08 b6       	in	r0, 0x38	; 56
     49c:	0f 92       	push	r0
     49e:	18 be       	out	0x38, r1	; 56
     4a0:	09 b6       	in	r0, 0x39	; 57
     4a2:	0f 92       	push	r0
     4a4:	19 be       	out	0x39, r1	; 57
     4a6:	0b b6       	in	r0, 0x3b	; 59
     4a8:	0f 92       	push	r0
     4aa:	1b be       	out	0x3b, r1	; 59
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4c4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4cc:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <adca_callback>
     4d0:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <adca_callback+0x1>
     4d4:	68 e0       	ldi	r22, 0x08	; 8
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	19 95       	eicall
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0b be       	out	0x3b, r0	; 59
     4f8:	0f 90       	pop	r0
     4fa:	09 be       	out	0x39, r0	; 57
     4fc:	0f 90       	pop	r0
     4fe:	08 be       	out	0x38, r0	; 56
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	08 b6       	in	r0, 0x38	; 56
     516:	0f 92       	push	r0
     518:	18 be       	out	0x38, r1	; 56
     51a:	09 b6       	in	r0, 0x39	; 57
     51c:	0f 92       	push	r0
     51e:	19 be       	out	0x39, r1	; 57
     520:	0b b6       	in	r0, 0x3b	; 59
     522:	0f 92       	push	r0
     524:	1b be       	out	0x3b, r1	; 59
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     53e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     542:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     546:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <adcb_callback>
     54a:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <adcb_callback+0x1>
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	19 95       	eicall
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0b be       	out	0x3b, r0	; 59
     572:	0f 90       	pop	r0
     574:	09 be       	out	0x39, r0	; 57
     576:	0f 90       	pop	r0
     578:	08 be       	out	0x38, r0	; 56
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	08 b6       	in	r0, 0x38	; 56
     590:	0f 92       	push	r0
     592:	18 be       	out	0x38, r1	; 56
     594:	09 b6       	in	r0, 0x39	; 57
     596:	0f 92       	push	r0
     598:	19 be       	out	0x39, r1	; 57
     59a:	0b b6       	in	r0, 0x3b	; 59
     59c:	0f 92       	push	r0
     59e:	1b be       	out	0x3b, r1	; 59
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5bc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5c0:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <adcb_callback>
     5c4:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <adcb_callback+0x1>
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	19 95       	eicall
}
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	09 be       	out	0x39, r0	; 57
     5f0:	0f 90       	pop	r0
     5f2:	08 be       	out	0x38, r0	; 56
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	08 b6       	in	r0, 0x38	; 56
     60a:	0f 92       	push	r0
     60c:	18 be       	out	0x38, r1	; 56
     60e:	09 b6       	in	r0, 0x39	; 57
     610:	0f 92       	push	r0
     612:	19 be       	out	0x39, r1	; 57
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	1b be       	out	0x3b, r1	; 59
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     632:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     636:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     63a:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <adcb_callback>
     63e:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <adcb_callback+0x1>
     642:	64 e0       	ldi	r22, 0x04	; 4
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	19 95       	eicall
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0b be       	out	0x3b, r0	; 59
     666:	0f 90       	pop	r0
     668:	09 be       	out	0x39, r0	; 57
     66a:	0f 90       	pop	r0
     66c:	08 be       	out	0x38, r0	; 56
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	08 b6       	in	r0, 0x38	; 56
     684:	0f 92       	push	r0
     686:	18 be       	out	0x38, r1	; 56
     688:	09 b6       	in	r0, 0x39	; 57
     68a:	0f 92       	push	r0
     68c:	19 be       	out	0x39, r1	; 57
     68e:	0b b6       	in	r0, 0x3b	; 59
     690:	0f 92       	push	r0
     692:	1b be       	out	0x3b, r1	; 59
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	ef 93       	push	r30
     6aa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6ac:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6b0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6b4:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <adcb_callback>
     6b8:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <adcb_callback+0x1>
     6bc:	68 e0       	ldi	r22, 0x08	; 8
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	19 95       	eicall
}
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0b be       	out	0x3b, r0	; 59
     6e0:	0f 90       	pop	r0
     6e2:	09 be       	out	0x39, r0	; 57
     6e4:	0f 90       	pop	r0
     6e6:	08 be       	out	0x38, r0	; 56
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6f2:	fc 01       	movw	r30, r24
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	95 ff       	sbrs	r25, 5
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <usart_putchar+0x2>
     6fa:	60 83       	st	Z, r22
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret

00000702 <usart_getchar>:
     702:	fc 01       	movw	r30, r24
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	99 23       	and	r25, r25
     708:	ec f7       	brge	.-6      	; 0x704 <usart_getchar+0x2>
     70a:	80 81       	ld	r24, Z
     70c:	08 95       	ret

0000070e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     70e:	4f 92       	push	r4
     710:	5f 92       	push	r5
     712:	6f 92       	push	r6
     714:	7f 92       	push	r7
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	7c 01       	movw	r14, r24
     72a:	4a 01       	movw	r8, r20
     72c:	5b 01       	movw	r10, r22
     72e:	28 01       	movw	r4, r16
     730:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     732:	fc 01       	movw	r30, r24
     734:	84 81       	ldd	r24, Z+4	; 0x04
     736:	82 ff       	sbrs	r24, 2
     738:	16 c0       	rjmp	.+44     	; 0x766 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     73a:	d9 01       	movw	r26, r18
     73c:	c8 01       	movw	r24, r16
     73e:	68 94       	set
     740:	12 f8       	bld	r1, 2
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	16 94       	lsr	r1
     74c:	d1 f7       	brne	.-12     	; 0x742 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     74e:	b9 01       	movw	r22, r18
     750:	a8 01       	movw	r20, r16
     752:	03 2e       	mov	r0, r19
     754:	36 e1       	ldi	r19, 0x16	; 22
     756:	76 95       	lsr	r23
     758:	67 95       	ror	r22
     75a:	57 95       	ror	r21
     75c:	47 95       	ror	r20
     75e:	3a 95       	dec	r19
     760:	d1 f7       	brne	.-12     	; 0x756 <usart_set_baudrate+0x48>
     762:	30 2d       	mov	r19, r0
     764:	15 c0       	rjmp	.+42     	; 0x790 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     766:	d9 01       	movw	r26, r18
     768:	c8 01       	movw	r24, r16
     76a:	68 94       	set
     76c:	13 f8       	bld	r1, 3
     76e:	b6 95       	lsr	r27
     770:	a7 95       	ror	r26
     772:	97 95       	ror	r25
     774:	87 95       	ror	r24
     776:	16 94       	lsr	r1
     778:	d1 f7       	brne	.-12     	; 0x76e <usart_set_baudrate+0x60>
		min_rate /= 2;
     77a:	b9 01       	movw	r22, r18
     77c:	a8 01       	movw	r20, r16
     77e:	03 2e       	mov	r0, r19
     780:	37 e1       	ldi	r19, 0x17	; 23
     782:	76 95       	lsr	r23
     784:	67 95       	ror	r22
     786:	57 95       	ror	r21
     788:	47 95       	ror	r20
     78a:	3a 95       	dec	r19
     78c:	d1 f7       	brne	.-12     	; 0x782 <usart_set_baudrate+0x74>
     78e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     790:	88 15       	cp	r24, r8
     792:	99 05       	cpc	r25, r9
     794:	aa 05       	cpc	r26, r10
     796:	bb 05       	cpc	r27, r11
     798:	08 f4       	brcc	.+2      	; 0x79c <usart_set_baudrate+0x8e>
     79a:	a6 c0       	rjmp	.+332    	; 0x8e8 <usart_set_baudrate+0x1da>
     79c:	84 16       	cp	r8, r20
     79e:	95 06       	cpc	r9, r21
     7a0:	a6 06       	cpc	r10, r22
     7a2:	b7 06       	cpc	r11, r23
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <usart_set_baudrate+0x9a>
     7a6:	a2 c0       	rjmp	.+324    	; 0x8ec <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7a8:	f7 01       	movw	r30, r14
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	82 fd       	sbrc	r24, 2
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <usart_set_baudrate+0xaa>
		baud *= 2;
     7b0:	88 0c       	add	r8, r8
     7b2:	99 1c       	adc	r9, r9
     7b4:	aa 1c       	adc	r10, r10
     7b6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7b8:	c3 01       	movw	r24, r6
     7ba:	b2 01       	movw	r22, r4
     7bc:	a5 01       	movw	r20, r10
     7be:	94 01       	movw	r18, r8
     7c0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7c4:	2f 3f       	cpi	r18, 0xFF	; 255
     7c6:	31 05       	cpc	r19, r1
     7c8:	41 05       	cpc	r20, r1
     7ca:	51 05       	cpc	r21, r1
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <usart_set_baudrate+0xc2>
     7ce:	90 c0       	rjmp	.+288    	; 0x8f0 <usart_set_baudrate+0x1e2>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	c9 ef       	ldi	r28, 0xF9	; 249
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <usart_set_baudrate+0xd8>
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	4a 07       	cpc	r20, r26
     7e2:	5b 07       	cpc	r21, r27
     7e4:	58 f0       	brcs	.+22     	; 0x7fc <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	aa 1f       	adc	r26, r26
     7ec:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     7ee:	cd 3f       	cpi	r28, 0xFD	; 253
     7f0:	0c f4       	brge	.+2      	; 0x7f4 <usart_set_baudrate+0xe6>
			limit |= 1;
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7f6:	c7 30       	cpi	r28, 0x07	; 7
     7f8:	89 f7       	brne	.-30     	; 0x7dc <usart_set_baudrate+0xce>
     7fa:	4f c0       	rjmp	.+158    	; 0x89a <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     7fc:	cc 23       	and	r28, r28
     7fe:	0c f0       	brlt	.+2      	; 0x802 <usart_set_baudrate+0xf4>
     800:	4c c0       	rjmp	.+152    	; 0x89a <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     802:	d5 01       	movw	r26, r10
     804:	c4 01       	movw	r24, r8
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	aa 1f       	adc	r26, r26
     80c:	bb 1f       	adc	r27, r27
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	aa 1f       	adc	r26, r26
     81c:	bb 1f       	adc	r27, r27
     81e:	48 1a       	sub	r4, r24
     820:	59 0a       	sbc	r5, r25
     822:	6a 0a       	sbc	r6, r26
     824:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     826:	ce 3f       	cpi	r28, 0xFE	; 254
     828:	f4 f4       	brge	.+60     	; 0x866 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     82a:	8d ef       	ldi	r24, 0xFD	; 253
     82c:	9f ef       	ldi	r25, 0xFF	; 255
     82e:	8c 1b       	sub	r24, r28
     830:	91 09       	sbc	r25, r1
     832:	c7 fd       	sbrc	r28, 7
     834:	93 95       	inc	r25
     836:	04 c0       	rjmp	.+8      	; 0x840 <usart_set_baudrate+0x132>
     838:	44 0c       	add	r4, r4
     83a:	55 1c       	adc	r5, r5
     83c:	66 1c       	adc	r6, r6
     83e:	77 1c       	adc	r7, r7
     840:	8a 95       	dec	r24
     842:	d2 f7       	brpl	.-12     	; 0x838 <usart_set_baudrate+0x12a>
     844:	d5 01       	movw	r26, r10
     846:	c4 01       	movw	r24, r8
     848:	b6 95       	lsr	r27
     84a:	a7 95       	ror	r26
     84c:	97 95       	ror	r25
     84e:	87 95       	ror	r24
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	64 0d       	add	r22, r4
     856:	75 1d       	adc	r23, r5
     858:	86 1d       	adc	r24, r6
     85a:	97 1d       	adc	r25, r7
     85c:	a5 01       	movw	r20, r10
     85e:	94 01       	movw	r18, r8
     860:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodsi4>
     864:	37 c0       	rjmp	.+110    	; 0x8d4 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	8c 0f       	add	r24, r28
     86a:	a5 01       	movw	r20, r10
     86c:	94 01       	movw	r18, r8
     86e:	04 c0       	rjmp	.+8      	; 0x878 <usart_set_baudrate+0x16a>
     870:	22 0f       	add	r18, r18
     872:	33 1f       	adc	r19, r19
     874:	44 1f       	adc	r20, r20
     876:	55 1f       	adc	r21, r21
     878:	8a 95       	dec	r24
     87a:	d2 f7       	brpl	.-12     	; 0x870 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     87c:	da 01       	movw	r26, r20
     87e:	c9 01       	movw	r24, r18
     880:	b6 95       	lsr	r27
     882:	a7 95       	ror	r26
     884:	97 95       	ror	r25
     886:	87 95       	ror	r24
     888:	bc 01       	movw	r22, r24
     88a:	cd 01       	movw	r24, r26
     88c:	64 0d       	add	r22, r4
     88e:	75 1d       	adc	r23, r5
     890:	86 1d       	adc	r24, r6
     892:	97 1d       	adc	r25, r7
     894:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodsi4>
     898:	1d c0       	rjmp	.+58     	; 0x8d4 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	8c 0f       	add	r24, r28
     89e:	a5 01       	movw	r20, r10
     8a0:	94 01       	movw	r18, r8
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <usart_set_baudrate+0x19e>
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	44 1f       	adc	r20, r20
     8aa:	55 1f       	adc	r21, r21
     8ac:	8a 95       	dec	r24
     8ae:	d2 f7       	brpl	.-12     	; 0x8a4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8b0:	da 01       	movw	r26, r20
     8b2:	c9 01       	movw	r24, r18
     8b4:	b6 95       	lsr	r27
     8b6:	a7 95       	ror	r26
     8b8:	97 95       	ror	r25
     8ba:	87 95       	ror	r24
     8bc:	bc 01       	movw	r22, r24
     8be:	cd 01       	movw	r24, r26
     8c0:	64 0d       	add	r22, r4
     8c2:	75 1d       	adc	r23, r5
     8c4:	86 1d       	adc	r24, r6
     8c6:	97 1d       	adc	r25, r7
     8c8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodsi4>
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	31 09       	sbc	r19, r1
     8d0:	41 09       	sbc	r20, r1
     8d2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8d4:	83 2f       	mov	r24, r19
     8d6:	8f 70       	andi	r24, 0x0F	; 15
     8d8:	c2 95       	swap	r28
     8da:	c0 7f       	andi	r28, 0xF0	; 240
     8dc:	c8 2b       	or	r28, r24
     8de:	f7 01       	movw	r30, r14
     8e0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8e2:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	18 c0       	rjmp	.+48     	; 0x918 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	16 c0       	rjmp	.+44     	; 0x918 <usart_set_baudrate+0x20a>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	14 c0       	rjmp	.+40     	; 0x918 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8f0:	d5 01       	movw	r26, r10
     8f2:	c4 01       	movw	r24, r8
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	aa 1f       	adc	r26, r26
     8fa:	bb 1f       	adc	r27, r27
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	aa 1f       	adc	r26, r26
     902:	bb 1f       	adc	r27, r27
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	aa 1f       	adc	r26, r26
     90a:	bb 1f       	adc	r27, r27
     90c:	48 1a       	sub	r4, r24
     90e:	59 0a       	sbc	r5, r25
     910:	6a 0a       	sbc	r6, r26
     912:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     914:	c9 ef       	ldi	r28, 0xF9	; 249
     916:	89 cf       	rjmp	.-238    	; 0x82a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	9f 90       	pop	r9
     928:	8f 90       	pop	r8
     92a:	7f 90       	pop	r7
     92c:	6f 90       	pop	r6
     92e:	5f 90       	pop	r5
     930:	4f 90       	pop	r4
     932:	08 95       	ret

00000934 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	09 f4       	brne	.+2      	; 0x946 <usart_init_rs232+0x12>
     944:	36 c1       	rjmp	.+620    	; 0xbb2 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     946:	80 3c       	cpi	r24, 0xC0	; 192
     948:	91 05       	cpc	r25, r1
     94a:	21 f4       	brne	.+8      	; 0x954 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     94c:	60 e1       	ldi	r22, 0x10	; 16
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	b6 d2       	rcall	.+1388   	; 0xebe <sysclk_enable_module>
     952:	2f c1       	rjmp	.+606    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     954:	c0 34       	cpi	r28, 0x40	; 64
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	d8 07       	cpc	r29, r24
     95a:	21 f4       	brne	.+8      	; 0x964 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     95c:	68 e0       	ldi	r22, 0x08	; 8
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	ae d2       	rcall	.+1372   	; 0xebe <sysclk_enable_module>
     962:	27 c1       	rjmp	.+590    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     964:	c1 15       	cp	r28, r1
     966:	e4 e0       	ldi	r30, 0x04	; 4
     968:	de 07       	cpc	r29, r30
     96a:	21 f4       	brne	.+8      	; 0x974 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     96c:	64 e0       	ldi	r22, 0x04	; 4
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	a6 d2       	rcall	.+1356   	; 0xebe <sysclk_enable_module>
     972:	1f c1       	rjmp	.+574    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     974:	c0 38       	cpi	r28, 0x80	; 128
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     97a:	21 f4       	brne	.+8      	; 0x984 <usart_init_rs232+0x50>
     97c:	62 e0       	ldi	r22, 0x02	; 2
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	9e d2       	rcall	.+1340   	; 0xebe <sysclk_enable_module>
     982:	17 c1       	rjmp	.+558    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     984:	c1 15       	cp	r28, r1
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     98a:	21 f4       	brne	.+8      	; 0x994 <usart_init_rs232+0x60>
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	96 d2       	rcall	.+1324   	; 0xebe <sysclk_enable_module>
     992:	0f c1       	rjmp	.+542    	; 0xbb2 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     994:	c0 38       	cpi	r28, 0x80	; 128
     996:	e3 e0       	ldi	r30, 0x03	; 3
     998:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     99a:	21 f4       	brne	.+8      	; 0x9a4 <usart_init_rs232+0x70>
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	8e d2       	rcall	.+1308   	; 0xebe <sysclk_enable_module>
     9a2:	07 c1       	rjmp	.+526    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     9a4:	c0 39       	cpi	r28, 0x90	; 144
     9a6:	f3 e0       	ldi	r31, 0x03	; 3
     9a8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <usart_init_rs232+0x80>
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	86 d2       	rcall	.+1292   	; 0xebe <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9b2:	ff c0       	rjmp	.+510    	; 0xbb2 <usart_init_rs232+0x27e>
     9b4:	c1 15       	cp	r28, r1
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9ba:	21 f4       	brne	.+8      	; 0x9c4 <usart_init_rs232+0x90>
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	7e d2       	rcall	.+1276   	; 0xebe <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     9c2:	f7 c0       	rjmp	.+494    	; 0xbb2 <usart_init_rs232+0x27e>
     9c4:	c0 34       	cpi	r28, 0x40	; 64
     9c6:	e2 e0       	ldi	r30, 0x02	; 2
     9c8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <usart_init_rs232+0xa0>
     9cc:	62 e0       	ldi	r22, 0x02	; 2
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	76 d2       	rcall	.+1260   	; 0xebe <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9d2:	ef c0       	rjmp	.+478    	; 0xbb2 <usart_init_rs232+0x27e>
     9d4:	c1 15       	cp	r28, r1
     9d6:	f3 e0       	ldi	r31, 0x03	; 3
     9d8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9da:	21 f4       	brne	.+8      	; 0x9e4 <usart_init_rs232+0xb0>
     9dc:	64 e0       	ldi	r22, 0x04	; 4
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	6e d2       	rcall	.+1244   	; 0xebe <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9e2:	e7 c0       	rjmp	.+462    	; 0xbb2 <usart_init_rs232+0x27e>
     9e4:	c0 32       	cpi	r28, 0x20	; 32
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <usart_init_rs232+0xc0>
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	66 d2       	rcall	.+1228   	; 0xebe <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9f2:	df c0       	rjmp	.+446    	; 0xbb2 <usart_init_rs232+0x27e>
     9f4:	c1 15       	cp	r28, r1
     9f6:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9f8:	de 07       	cpc	r29, r30
     9fa:	21 f4       	brne	.+8      	; 0xa04 <usart_init_rs232+0xd0>
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	5e d2       	rcall	.+1212   	; 0xebe <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a02:	d7 c0       	rjmp	.+430    	; 0xbb2 <usart_init_rs232+0x27e>
     a04:	c1 15       	cp	r28, r1
     a06:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a08:	df 07       	cpc	r29, r31
     a0a:	21 f4       	brne	.+8      	; 0xa14 <usart_init_rs232+0xe0>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	56 d2       	rcall	.+1196   	; 0xebe <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     a12:	cf c0       	rjmp	.+414    	; 0xbb2 <usart_init_rs232+0x27e>
     a14:	c1 15       	cp	r28, r1
     a16:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a18:	d8 07       	cpc	r29, r24
     a1a:	21 f4       	brne	.+8      	; 0xa24 <usart_init_rs232+0xf0>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	4e d2       	rcall	.+1180   	; 0xebe <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     a22:	c7 c0       	rjmp	.+398    	; 0xbb2 <usart_init_rs232+0x27e>
     a24:	c1 15       	cp	r28, r1
     a26:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     a28:	de 07       	cpc	r29, r30
     a2a:	21 f4       	brne	.+8      	; 0xa34 <usart_init_rs232+0x100>
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a30:	46 d2       	rcall	.+1164   	; 0xebe <sysclk_enable_module>
     a32:	bf c0       	rjmp	.+382    	; 0xbb2 <usart_init_rs232+0x27e>
     a34:	c0 34       	cpi	r28, 0x40	; 64
     a36:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a38:	df 07       	cpc	r29, r31
     a3a:	21 f4       	brne	.+8      	; 0xa44 <usart_init_rs232+0x110>
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a40:	3e d2       	rcall	.+1148   	; 0xebe <sysclk_enable_module>
     a42:	b7 c0       	rjmp	.+366    	; 0xbb2 <usart_init_rs232+0x27e>
     a44:	c0 34       	cpi	r28, 0x40	; 64
     a46:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a48:	d8 07       	cpc	r29, r24
     a4a:	21 f4       	brne	.+8      	; 0xa54 <usart_init_rs232+0x120>
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a50:	36 d2       	rcall	.+1132   	; 0xebe <sysclk_enable_module>
     a52:	af c0       	rjmp	.+350    	; 0xbb2 <usart_init_rs232+0x27e>
     a54:	c0 34       	cpi	r28, 0x40	; 64
     a56:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a58:	de 07       	cpc	r29, r30
     a5a:	21 f4       	brne	.+8      	; 0xa64 <usart_init_rs232+0x130>
     a5c:	62 e0       	ldi	r22, 0x02	; 2
     a5e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a60:	2e d2       	rcall	.+1116   	; 0xebe <sysclk_enable_module>
     a62:	a7 c0       	rjmp	.+334    	; 0xbb2 <usart_init_rs232+0x27e>
     a64:	c0 34       	cpi	r28, 0x40	; 64
     a66:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a68:	df 07       	cpc	r29, r31
     a6a:	21 f4       	brne	.+8      	; 0xa74 <usart_init_rs232+0x140>
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a70:	26 d2       	rcall	.+1100   	; 0xebe <sysclk_enable_module>
     a72:	9f c0       	rjmp	.+318    	; 0xbb2 <usart_init_rs232+0x27e>
     a74:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	d8 07       	cpc	r29, r24
     a7a:	21 f4       	brne	.+8      	; 0xa84 <usart_init_rs232+0x150>
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a80:	1e d2       	rcall	.+1084   	; 0xebe <sysclk_enable_module>
     a82:	97 c0       	rjmp	.+302    	; 0xbb2 <usart_init_rs232+0x27e>
     a84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a86:	e9 e0       	ldi	r30, 0x09	; 9
     a88:	de 07       	cpc	r29, r30
     a8a:	21 f4       	brne	.+8      	; 0xa94 <usart_init_rs232+0x160>
     a8c:	64 e0       	ldi	r22, 0x04	; 4
     a8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a90:	16 d2       	rcall	.+1068   	; 0xebe <sysclk_enable_module>
     a92:	8f c0       	rjmp	.+286    	; 0xbb2 <usart_init_rs232+0x27e>
     a94:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a96:	fa e0       	ldi	r31, 0x0A	; 10
     a98:	df 07       	cpc	r29, r31
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <usart_init_rs232+0x170>
     a9c:	64 e0       	ldi	r22, 0x04	; 4
     a9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     aa0:	0e d2       	rcall	.+1052   	; 0xebe <sysclk_enable_module>
     aa2:	87 c0       	rjmp	.+270    	; 0xbb2 <usart_init_rs232+0x27e>
     aa4:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     aa6:	8b e0       	ldi	r24, 0x0B	; 11
     aa8:	d8 07       	cpc	r29, r24
     aaa:	21 f4       	brne	.+8      	; 0xab4 <usart_init_rs232+0x180>
     aac:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     aae:	86 e0       	ldi	r24, 0x06	; 6
     ab0:	06 d2       	rcall	.+1036   	; 0xebe <sysclk_enable_module>
     ab2:	7f c0       	rjmp	.+254    	; 0xbb2 <usart_init_rs232+0x27e>
     ab4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     ab6:	e8 e0       	ldi	r30, 0x08	; 8
     ab8:	de 07       	cpc	r29, r30
     aba:	21 f4       	brne	.+8      	; 0xac4 <usart_init_rs232+0x190>
     abc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	fe d1       	rcall	.+1020   	; 0xebe <sysclk_enable_module>
     ac2:	77 c0       	rjmp	.+238    	; 0xbb2 <usart_init_rs232+0x27e>
     ac4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ac6:	f9 e0       	ldi	r31, 0x09	; 9
     ac8:	df 07       	cpc	r29, r31
     aca:	21 f4       	brne	.+8      	; 0xad4 <usart_init_rs232+0x1a0>
     acc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     ace:	84 e0       	ldi	r24, 0x04	; 4
     ad0:	f6 d1       	rcall	.+1004   	; 0xebe <sysclk_enable_module>
     ad2:	6f c0       	rjmp	.+222    	; 0xbb2 <usart_init_rs232+0x27e>
     ad4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	d8 07       	cpc	r29, r24
     ada:	21 f4       	brne	.+8      	; 0xae4 <usart_init_rs232+0x1b0>
     adc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     ade:	85 e0       	ldi	r24, 0x05	; 5
     ae0:	ee d1       	rcall	.+988    	; 0xebe <sysclk_enable_module>
     ae2:	67 c0       	rjmp	.+206    	; 0xbb2 <usart_init_rs232+0x27e>
     ae4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     ae6:	eb e0       	ldi	r30, 0x0B	; 11
     ae8:	de 07       	cpc	r29, r30
     aea:	21 f4       	brne	.+8      	; 0xaf4 <usart_init_rs232+0x1c0>
     aec:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	e6 d1       	rcall	.+972    	; 0xebe <sysclk_enable_module>
     af2:	5f c0       	rjmp	.+190    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     af4:	c0 3a       	cpi	r28, 0xA0	; 160
     af6:	f8 e0       	ldi	r31, 0x08	; 8
     af8:	df 07       	cpc	r29, r31
     afa:	21 f4       	brne	.+8      	; 0xb04 <usart_init_rs232+0x1d0>
     afc:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	de d1       	rcall	.+956    	; 0xebe <sysclk_enable_module>
     b02:	57 c0       	rjmp	.+174    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     b04:	c0 3a       	cpi	r28, 0xA0	; 160
     b06:	89 e0       	ldi	r24, 0x09	; 9
     b08:	d8 07       	cpc	r29, r24
     b0a:	21 f4       	brne	.+8      	; 0xb14 <usart_init_rs232+0x1e0>
     b0c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	d6 d1       	rcall	.+940    	; 0xebe <sysclk_enable_module>
     b12:	4f c0       	rjmp	.+158    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b14:	c0 3a       	cpi	r28, 0xA0	; 160
     b16:	ea e0       	ldi	r30, 0x0A	; 10
     b18:	de 07       	cpc	r29, r30
     b1a:	21 f4       	brne	.+8      	; 0xb24 <usart_init_rs232+0x1f0>
     b1c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     b1e:	85 e0       	ldi	r24, 0x05	; 5
     b20:	ce d1       	rcall	.+924    	; 0xebe <sysclk_enable_module>
     b22:	47 c0       	rjmp	.+142    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     b24:	c0 3a       	cpi	r28, 0xA0	; 160
     b26:	fb e0       	ldi	r31, 0x0B	; 11
     b28:	df 07       	cpc	r29, r31
     b2a:	21 f4       	brne	.+8      	; 0xb34 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b2c:	60 e1       	ldi	r22, 0x10	; 16
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	c6 d1       	rcall	.+908    	; 0xebe <sysclk_enable_module>
     b32:	3f c0       	rjmp	.+126    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b34:	c0 3b       	cpi	r28, 0xB0	; 176
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	d8 07       	cpc	r29, r24
     b3a:	21 f4       	brne	.+8      	; 0xb44 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b3c:	60 e2       	ldi	r22, 0x20	; 32
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	be d1       	rcall	.+892    	; 0xebe <sysclk_enable_module>
     b42:	37 c0       	rjmp	.+110    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b44:	c0 3b       	cpi	r28, 0xB0	; 176
     b46:	e9 e0       	ldi	r30, 0x09	; 9
     b48:	de 07       	cpc	r29, r30
     b4a:	21 f4       	brne	.+8      	; 0xb54 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b4c:	60 e2       	ldi	r22, 0x20	; 32
     b4e:	84 e0       	ldi	r24, 0x04	; 4
     b50:	b6 d1       	rcall	.+876    	; 0xebe <sysclk_enable_module>
     b52:	2f c0       	rjmp	.+94     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b54:	c0 3b       	cpi	r28, 0xB0	; 176
     b56:	fa e0       	ldi	r31, 0x0A	; 10
     b58:	df 07       	cpc	r29, r31
     b5a:	21 f4       	brne	.+8      	; 0xb64 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b5c:	60 e2       	ldi	r22, 0x20	; 32
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	ae d1       	rcall	.+860    	; 0xebe <sysclk_enable_module>
     b62:	27 c0       	rjmp	.+78     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b64:	c0 3b       	cpi	r28, 0xB0	; 176
     b66:	8b e0       	ldi	r24, 0x0B	; 11
     b68:	d8 07       	cpc	r29, r24
     b6a:	21 f4       	brne	.+8      	; 0xb74 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b6c:	60 e2       	ldi	r22, 0x20	; 32
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	a6 d1       	rcall	.+844    	; 0xebe <sysclk_enable_module>
     b72:	1f c0       	rjmp	.+62     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b74:	c0 38       	cpi	r28, 0x80	; 128
     b76:	e4 e0       	ldi	r30, 0x04	; 4
     b78:	de 07       	cpc	r29, r30
     b7a:	21 f4       	brne	.+8      	; 0xb84 <usart_init_rs232+0x250>
     b7c:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	9e d1       	rcall	.+828    	; 0xebe <sysclk_enable_module>
     b82:	17 c0       	rjmp	.+46     	; 0xbb2 <usart_init_rs232+0x27e>
     b84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b86:	f4 e0       	ldi	r31, 0x04	; 4
     b88:	df 07       	cpc	r29, r31
     b8a:	21 f4       	brne	.+8      	; 0xb94 <usart_init_rs232+0x260>
     b8c:	60 e4       	ldi	r22, 0x40	; 64
     b8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b90:	96 d1       	rcall	.+812    	; 0xebe <sysclk_enable_module>
     b92:	0f c0       	rjmp	.+30     	; 0xbb2 <usart_init_rs232+0x27e>
     b94:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	d8 07       	cpc	r29, r24
     b9a:	21 f4       	brne	.+8      	; 0xba4 <usart_init_rs232+0x270>
     b9c:	60 e4       	ldi	r22, 0x40	; 64
     b9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     ba0:	8e d1       	rcall	.+796    	; 0xebe <sysclk_enable_module>
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <usart_init_rs232+0x27e>
     ba4:	c0 3b       	cpi	r28, 0xB0	; 176
     ba6:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     ba8:	de 07       	cpc	r29, r30
     baa:	19 f4       	brne	.+6      	; 0xbb2 <usart_init_rs232+0x27e>
     bac:	60 e4       	ldi	r22, 0x40	; 64
     bae:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     bb0:	86 d1       	rcall	.+780    	; 0xebe <sysclk_enable_module>
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     bb6:	8d 83       	std	Y+5, r24	; 0x05
     bb8:	f8 01       	movw	r30, r16
     bba:	95 81       	ldd	r25, Z+5	; 0x05
     bbc:	84 81       	ldd	r24, Z+4	; 0x04
     bbe:	89 2b       	or	r24, r25
     bc0:	96 81       	ldd	r25, Z+6	; 0x06
     bc2:	91 11       	cpse	r25, r1
     bc4:	98 e0       	ldi	r25, 0x08	; 8
     bc6:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     bc8:	8d 83       	std	Y+5, r24	; 0x05
     bca:	f8 01       	movw	r30, r16
     bcc:	40 81       	ld	r20, Z
     bce:	51 81       	ldd	r21, Z+1	; 0x01
     bd0:	62 81       	ldd	r22, Z+2	; 0x02
     bd2:	73 81       	ldd	r23, Z+3	; 0x03
     bd4:	00 e8       	ldi	r16, 0x80	; 128
     bd6:	14 e8       	ldi	r17, 0x84	; 132
     bd8:	2e e1       	ldi	r18, 0x1E	; 30
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	ce 01       	movw	r24, r28
     bde:	97 dd       	rcall	.-1234   	; 0x70e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	98 60       	ori	r25, 0x08	; 8
     be4:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	90 61       	ori	r25, 0x10	; 16
     bea:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     bf8:	61 50       	subi	r22, 0x01	; 1
     bfa:	71 09       	sbc	r23, r1
     bfc:	81 09       	sbc	r24, r1
     bfe:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     c00:	61 15       	cp	r22, r1
     c02:	71 05       	cpc	r23, r1
     c04:	81 05       	cpc	r24, r1
     c06:	91 05       	cpc	r25, r1
     c08:	b9 f7       	brne	.-18     	; 0xbf8 <__portable_avr_delay_cycles+0x2>
     c0a:	08 95       	ret

00000c0c <ms5607_read>:
#define CMD_MS5607_CONVERT_D1	0x48
#define CMD_MS5607_CONVERT_D2	0x58
#define MS5607_PORT				0x10

uint16_t ms5607_read(uint16_t comm)
{
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	spi_select(MS5607_PORT); // select our spi device
     c12:	80 e1       	ldi	r24, 0x10	; 16
     c14:	66 d0       	rcall	.+204    	; 0xce2 <spi_select>
	spi_write(comm); // write a specified command to ask for data
     c16:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     c18:	75 d0       	rcall	.+234    	; 0xd04 <spi_write>
     c1a:	69 d0       	rcall	.+210    	; 0xcee <spi_read>
     c1c:	c8 2f       	mov	r28, r24
     c1e:	d0 e0       	ldi	r29, 0x00	; 0
     c20:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     c22:	cc 27       	eor	r28, r28
     c24:	64 d0       	rcall	.+200    	; 0xcee <spi_read>
	
	spi_select(MS5607_PORT); // end spi exchange
     c26:	c8 2b       	or	r28, r24
     c28:	80 e1       	ldi	r24, 0x10	; 16
     c2a:	5b d0       	rcall	.+182    	; 0xce2 <spi_select>
	
	return rx_data; // return the 16-bit value
}
     c2c:	ce 01       	movw	r24, r28
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <ms5607_convert_d1>:

uint32_t ms5607_convert_d1(void)
{
     c34:	cf 92       	push	r12
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	spi_select(MS5607_PORT); // select our spi device
     c3c:	80 e1       	ldi	r24, 0x10	; 16
     c3e:	51 d0       	rcall	.+162    	; 0xce2 <spi_select>
	spi_write(CMD_MS5607_CONVERT_D1); // write a specified command to ask for data
     c40:	88 e4       	ldi	r24, 0x48	; 72
     c42:	60 d0       	rcall	.+192    	; 0xd04 <spi_write>
	delay_ms(10);
     c44:	66 e0       	ldi	r22, 0x06	; 6
     c46:	7d e0       	ldi	r23, 0x0D	; 13
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
	spi_select(MS5607_PORT);
     c4c:	d4 df       	rcall	.-88     	; 0xbf6 <__portable_avr_delay_cycles>
     c4e:	80 e1       	ldi	r24, 0x10	; 16
	
	spi_select(MS5607_PORT);
     c50:	48 d0       	rcall	.+144    	; 0xce2 <spi_select>
     c52:	80 e1       	ldi	r24, 0x10	; 16
	spi_write(CMD_MS5607_READ_ADC);
     c54:	46 d0       	rcall	.+140    	; 0xce2 <spi_select>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	55 d0       	rcall	.+170    	; 0xd04 <spi_write>
	rx_data  = (uint32_t) spi_read()<<16;
     c5a:	49 d0       	rcall	.+146    	; 0xcee <spi_read>
     c5c:	c8 2e       	mov	r12, r24
     c5e:	d1 2c       	mov	r13, r1
     c60:	e1 2c       	mov	r14, r1
     c62:	f1 2c       	mov	r15, r1
     c64:	76 01       	movw	r14, r12
     c66:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     c68:	cc 24       	eor	r12, r12
     c6a:	41 d0       	rcall	.+130    	; 0xcee <spi_read>
     c6c:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     c6e:	3f d0       	rcall	.+126    	; 0xcee <spi_read>
     c70:	c8 2a       	or	r12, r24
     c72:	80 e1       	ldi	r24, 0x10	; 16
	spi_select(MS5607_PORT);
     c74:	36 d0       	rcall	.+108    	; 0xce2 <spi_select>
     c76:	c7 01       	movw	r24, r14
     c78:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
     c82:	08 95       	ret

00000c84 <ms5607_convert_d2>:
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	spi_select(MS5607_PORT); // select our spi device
     c8c:	80 e1       	ldi	r24, 0x10	; 16
     c8e:	29 d0       	rcall	.+82     	; 0xce2 <spi_select>
	spi_write(CMD_MS5607_CONVERT_D2); // write a specified command to ask for data
     c90:	88 e5       	ldi	r24, 0x58	; 88
     c92:	38 d0       	rcall	.+112    	; 0xd04 <spi_write>
	delay_ms(10);
     c94:	66 e0       	ldi	r22, 0x06	; 6
     c96:	7d e0       	ldi	r23, 0x0D	; 13
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
	spi_select(MS5607_PORT);
     c9c:	ac df       	rcall	.-168    	; 0xbf6 <__portable_avr_delay_cycles>
     c9e:	80 e1       	ldi	r24, 0x10	; 16
	
	spi_select(MS5607_PORT);
     ca0:	20 d0       	rcall	.+64     	; 0xce2 <spi_select>
     ca2:	80 e1       	ldi	r24, 0x10	; 16
	spi_write(CMD_MS5607_READ_ADC);
     ca4:	1e d0       	rcall	.+60     	; 0xce2 <spi_select>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	2d d0       	rcall	.+90     	; 0xd04 <spi_write>
	rx_data  = (uint32_t) spi_read()<<16;
     caa:	21 d0       	rcall	.+66     	; 0xcee <spi_read>
     cac:	c8 2e       	mov	r12, r24
     cae:	d1 2c       	mov	r13, r1
     cb0:	e1 2c       	mov	r14, r1
     cb2:	f1 2c       	mov	r15, r1
     cb4:	76 01       	movw	r14, r12
     cb6:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     cb8:	cc 24       	eor	r12, r12
     cba:	19 d0       	rcall	.+50     	; 0xcee <spi_read>
     cbc:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     cbe:	17 d0       	rcall	.+46     	; 0xcee <spi_read>
     cc0:	c8 2a       	or	r12, r24
     cc2:	80 e1       	ldi	r24, 0x10	; 16
	spi_select(MS5607_PORT);
     cc4:	0e d0       	rcall	.+28     	; 0xce2 <spi_select>
     cc6:	c7 01       	movw	r24, r14
     cc8:	b6 01       	movw	r22, r12
	
	return rx_data;
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	08 95       	ret

00000cd4 <spi_init>:
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     cd4:	68 e0       	ldi	r22, 0x08	; 8
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	f2 d0       	rcall	.+484    	; 0xebe <sysclk_enable_module>
#include "spi_controller.h"

void spi_init(void)
{
	sysclk_enable_peripheral_clock(&SPIC);
	SPIC.CTRL = 0x51; //enables SPI and puts a  prescaler of 16
     cda:	81 e5       	ldi	r24, 0x51	; 81
     cdc:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     ce0:	08 95       	ret

00000ce2 <spi_select>:
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     ce2:	e0 e4       	ldi	r30, 0x40	; 64
     ce4:	f6 e0       	ldi	r31, 0x06	; 6
     ce6:	94 81       	ldd	r25, Z+4	; 0x04
     ce8:	89 27       	eor	r24, r25
     cea:	84 83       	std	Z+4, r24	; 0x04
     cec:	08 95       	ret

00000cee <spi_read>:
}

uint8_t spi_read(void)
{
	SPIC.DATA = 0xFF; // make the DATA register something we know
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait for the SPI interrupt flag to let us know the transfer is complete
     cf4:	e0 ec       	ldi	r30, 0xC0	; 192
     cf6:	f8 e0       	ldi	r31, 0x08	; 8
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	88 23       	and	r24, r24
     cfc:	ec f7       	brge	.-6      	; 0xcf8 <spi_read+0xa>
	
	return SPIC.DATA; // return the data from this function
     cfe:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     d02:	08 95       	ret

00000d04 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     d04:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     d08:	e0 ec       	ldi	r30, 0xC0	; 192
     d0a:	f8 e0       	ldi	r31, 0x08	; 8
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	88 23       	and	r24, r24
     d10:	ec f7       	brge	.-6      	; 0xd0c <spi_write+0x8>
     d12:	08 95       	ret

00000d14 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     d1a:	f3 dc       	rcall	.-1562   	; 0x702 <usart_getchar>
     d1c:	88 83       	st	Y, r24
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     d24:	e6 cc       	rjmp	.-1588   	; 0x6f2 <usart_putchar>
}
     d26:	08 95       	ret

00000d28 <uart_terminal_init>:

#include <asf.h>
#include "uart.h"

void uart_terminal_init()
{
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	27 97       	sbiw	r28, 0x07	; 7
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     d36:	60 e1       	ldi	r22, 0x10	; 16
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	c1 d0       	rcall	.+386    	; 0xebe <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     d3c:	e0 e8       	ldi	r30, 0x80	; 128
     d3e:	f6 e0       	ldi	r31, 0x06	; 6
     d40:	80 81       	ld	r24, Z
     d42:	88 60       	ori	r24, 0x08	; 8
     d44:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     d46:	80 ea       	ldi	r24, 0xA0	; 160
     d48:	9a e0       	ldi	r25, 0x0A	; 10
     d4a:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <stdio_base>
     d4e:	90 93 b8 20 	sts	0x20B8, r25	; 0x8020b8 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     d52:	82 e9       	ldi	r24, 0x92	; 146
     d54:	96 e0       	ldi	r25, 0x06	; 6
     d56:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <ptr_put>
     d5a:	90 93 b6 20 	sts	0x20B6, r25	; 0x8020b6 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     d5e:	8a e8       	ldi	r24, 0x8A	; 138
     d60:	96 e0       	ldi	r25, 0x06	; 6
     d62:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <ptr_get>
     d66:	90 93 b4 20 	sts	0x20B4, r25	; 0x8020b4 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     d6a:	e6 e0       	ldi	r30, 0x06	; 6
     d6c:	f0 e2       	ldi	r31, 0x20	; 32
     d6e:	84 81       	ldd	r24, Z+4	; 0x04
     d70:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     d72:	85 81       	ldd	r24, Z+5	; 0x05
     d74:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     d76:	86 81       	ldd	r24, Z+6	; 0x06
     d78:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     d7a:	80 81       	ld	r24, Z
     d7c:	91 81       	ldd	r25, Z+1	; 0x01
     d7e:	a2 81       	ldd	r26, Z+2	; 0x02
     d80:	b3 81       	ldd	r27, Z+3	; 0x03
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	ab 83       	std	Y+3, r26	; 0x03
     d88:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     d8a:	60 e1       	ldi	r22, 0x10	; 16
     d8c:	85 e0       	ldi	r24, 0x05	; 5
     d8e:	97 d0       	rcall	.+302    	; 0xebe <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     d90:	be 01       	movw	r22, r28
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	80 ea       	ldi	r24, 0xA0	; 160
     d98:	9a e0       	ldi	r25, 0x0A	; 10
     d9a:	cc dd       	rcall	.-1128   	; 0x934 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     d9c:	66 e6       	ldi	r22, 0x66	; 102
     d9e:	71 e0       	ldi	r23, 0x01	; 1
     da0:	8f e7       	ldi	r24, 0x7F	; 127
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	d6 d6       	rcall	.+3500   	; 0x1b52 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
	
     da6:	27 96       	adiw	r28, 0x07	; 7
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	fc 01       	movw	r30, r24
     db8:	41 15       	cp	r20, r1
     dba:	51 05       	cpc	r21, r1
     dbc:	b1 f1       	breq	.+108    	; 0xe2a <rb16_write+0x78>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	db 01       	movw	r26, r22
     dca:	a8 0f       	add	r26, r24
     dcc:	b9 1f       	adc	r27, r25
     dce:	8d 91       	ld	r24, X+
     dd0:	9c 91       	ld	r25, X
     dd2:	a2 81       	ldd	r26, Z+2	; 0x02
     dd4:	b3 81       	ldd	r27, Z+3	; 0x03
     dd6:	aa 0f       	add	r26, r26
     dd8:	bb 1f       	adc	r27, r27
     dda:	c6 81       	ldd	r28, Z+6	; 0x06
     ddc:	d7 81       	ldd	r29, Z+7	; 0x07
     dde:	ac 0f       	add	r26, r28
     de0:	bd 1f       	adc	r27, r29
     de2:	8d 93       	st	X+, r24
     de4:	9c 93       	st	X, r25
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	82 83       	std	Z+2, r24	; 0x02
     dee:	93 83       	std	Z+3, r25	; 0x03
     df0:	a0 81       	ld	r26, Z
     df2:	b1 81       	ldd	r27, Z+1	; 0x01
     df4:	8a 17       	cp	r24, r26
     df6:	9b 07       	cpc	r25, r27
     df8:	11 f4       	brne	.+4      	; 0xdfe <rb16_write+0x4c>
     dfa:	12 82       	std	Z+2, r1	; 0x02
     dfc:	13 82       	std	Z+3, r1	; 0x03
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	c4 81       	ldd	r28, Z+4	; 0x04
     e04:	d5 81       	ldd	r29, Z+5	; 0x05
     e06:	8c 17       	cp	r24, r28
     e08:	9d 07       	cpc	r25, r29
     e0a:	49 f4       	brne	.+18     	; 0xe1e <rb16_write+0x6c>
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	a8 17       	cp	r26, r24
     e10:	b9 07       	cpc	r27, r25
     e12:	19 f0       	breq	.+6      	; 0xe1a <rb16_write+0x68>
     e14:	84 83       	std	Z+4, r24	; 0x04
     e16:	95 83       	std	Z+5, r25	; 0x05
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <rb16_write+0x6c>
     e1a:	14 82       	std	Z+4, r1	; 0x04
     e1c:	15 82       	std	Z+5, r1	; 0x05
     e1e:	2f 5f       	subi	r18, 0xFF	; 255
     e20:	82 2f       	mov	r24, r18
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	84 17       	cp	r24, r20
     e26:	95 07       	cpc	r25, r21
     e28:	68 f2       	brcs	.-102    	; 0xdc4 <rb16_write+0x12>
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <rb16_init>:
     e30:	fc 01       	movw	r30, r24
     e32:	12 82       	std	Z+2, r1	; 0x02
     e34:	13 82       	std	Z+3, r1	; 0x03
     e36:	14 82       	std	Z+4, r1	; 0x04
     e38:	15 82       	std	Z+5, r1	; 0x05
     e3a:	66 83       	std	Z+6, r22	; 0x06
     e3c:	77 83       	std	Z+7, r23	; 0x07
     e3e:	40 83       	st	Z, r20
     e40:	51 83       	std	Z+1, r21	; 0x01
     e42:	08 95       	ret

00000e44 <rb16_get_nth>:
	}
}

int16_t rb16_get_nth(RingBuffer16_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     e44:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     e46:	12 96       	adiw	r26, 0x02	; 2
     e48:	ed 91       	ld	r30, X+
     e4a:	fc 91       	ld	r31, X
     e4c:	13 97       	sbiw	r26, 0x03	; 3
     e4e:	cb 01       	movw	r24, r22
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	e8 17       	cp	r30, r24
     e54:	f9 07       	cpc	r31, r25
     e56:	78 f0       	brcs	.+30     	; 0xe76 <rb16_get_nth+0x32>
		return buffer->buffer[buffer->head - index - 1];
     e58:	e1 50       	subi	r30, 0x01	; 1
     e5a:	f0 48       	sbci	r31, 0x80	; 128
     e5c:	e6 1b       	sub	r30, r22
     e5e:	f7 0b       	sbc	r31, r23
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	16 96       	adiw	r26, 0x06	; 6
     e66:	8d 91       	ld	r24, X+
     e68:	9c 91       	ld	r25, X
     e6a:	17 97       	sbiw	r26, 0x07	; 7
     e6c:	e8 0f       	add	r30, r24
     e6e:	f9 1f       	adc	r31, r25
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     e76:	2d 91       	ld	r18, X+
     e78:	3c 91       	ld	r19, X
     e7a:	11 97       	sbiw	r26, 0x01	; 1
     e7c:	e2 0f       	add	r30, r18
     e7e:	f3 1f       	adc	r31, r19
     e80:	e1 50       	subi	r30, 0x01	; 1
     e82:	f0 48       	sbci	r31, 0x80	; 128
     e84:	e6 1b       	sub	r30, r22
     e86:	f7 0b       	sbc	r31, r23
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	16 96       	adiw	r26, 0x06	; 6
     e8e:	8d 91       	ld	r24, X+
     e90:	9c 91       	ld	r25, X
     e92:	17 97       	sbiw	r26, 0x07	; 7
     e94:	e8 0f       	add	r30, r24
     e96:	f9 1f       	adc	r31, r25
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
}
     e9c:	08 95       	ret

00000e9e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     ea4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     ea8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     eac:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     eb0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     eb4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     eb8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     ebc:	08 95       	ret

00000ebe <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ec8:	9f b7       	in	r25, 0x3f	; 63
     eca:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     ecc:	f8 94       	cli
	return flags;
     ece:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     ed0:	e8 2f       	mov	r30, r24
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	e0 59       	subi	r30, 0x90	; 144
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	60 95       	com	r22
     eda:	80 81       	ld	r24, Z
     edc:	68 23       	and	r22, r24
     ede:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ee0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     ee2:	0f 90       	pop	r0
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <__portable_avr_delay_cycles>:
	uint16_t reading = adc_read();
	double voltage = (.000495 * reading + .5016); // m and b are collected from testing
	double resistance = 6720 * (3.3 - voltage) / voltage; // 6720 is the resistance of the steady resistor
	val = (uint16_t) (100 / (3.354016E-3 + 2.569850E-4 * log(resistance / 10000) + 2.620131E-6 * pow(log(resistance / 10000), 2) + 6.383091E-8 * pow(log(resistance / 10000), 3))); // returns the temperature in hundredths of kelvin
	return val / 100.0; //returns the temperature in kelvin
}
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <__portable_avr_delay_cycles+0xa>
     eec:	61 50       	subi	r22, 0x01	; 1
     eee:	71 09       	sbc	r23, r1
     ef0:	81 09       	sbc	r24, r1
     ef2:	91 09       	sbc	r25, r1
     ef4:	61 15       	cp	r22, r1
     ef6:	71 05       	cpc	r23, r1
     ef8:	81 05       	cpc	r24, r1
     efa:	91 05       	cpc	r25, r1
     efc:	b9 f7       	brne	.-18     	; 0xeec <__portable_avr_delay_cycles+0x2>
     efe:	08 95       	ret

00000f00 <ms5607_init>:
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	80 e1       	ldi	r24, 0x10	; 16
     f06:	ed de       	rcall	.-550    	; 0xce2 <spi_select>
     f08:	8e e1       	ldi	r24, 0x1E	; 30
     f0a:	fc de       	rcall	.-520    	; 0xd04 <spi_write>
     f0c:	68 ee       	ldi	r22, 0xE8	; 232
     f0e:	73 e0       	ldi	r23, 0x03	; 3
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	ea df       	rcall	.-44     	; 0xeea <__portable_avr_delay_cycles>
     f16:	80 e1       	ldi	r24, 0x10	; 16
     f18:	e4 de       	rcall	.-568    	; 0xce2 <spi_select>
     f1a:	6b e9       	ldi	r22, 0x9B	; 155
     f1c:	72 e0       	ldi	r23, 0x02	; 2
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	e3 df       	rcall	.-58     	; 0xeea <__portable_avr_delay_cycles>
     f24:	82 ea       	ldi	r24, 0xA2	; 162
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	71 de       	rcall	.-798    	; 0xc0c <ms5607_read>
     f2a:	c2 ea       	ldi	r28, 0xA2	; 162
     f2c:	d0 e2       	ldi	r29, 0x20	; 32
     f2e:	88 83       	st	Y, r24
     f30:	99 83       	std	Y+1, r25	; 0x01
     f32:	84 ea       	ldi	r24, 0xA4	; 164
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	6a de       	rcall	.-812    	; 0xc0c <ms5607_read>
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	9b 83       	std	Y+3, r25	; 0x03
     f3c:	86 ea       	ldi	r24, 0xA6	; 166
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	65 de       	rcall	.-822    	; 0xc0c <ms5607_read>
     f42:	8c 83       	std	Y+4, r24	; 0x04
     f44:	9d 83       	std	Y+5, r25	; 0x05
     f46:	88 ea       	ldi	r24, 0xA8	; 168
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	60 de       	rcall	.-832    	; 0xc0c <ms5607_read>
     f4c:	8e 83       	std	Y+6, r24	; 0x06
     f4e:	9f 83       	std	Y+7, r25	; 0x07
     f50:	8a ea       	ldi	r24, 0xAA	; 170
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	5b de       	rcall	.-842    	; 0xc0c <ms5607_read>
     f56:	88 87       	std	Y+8, r24	; 0x08
     f58:	99 87       	std	Y+9, r25	; 0x09
     f5a:	8c ea       	ldi	r24, 0xAC	; 172
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	56 de       	rcall	.-852    	; 0xc0c <ms5607_read>
     f60:	8a 87       	std	Y+10, r24	; 0x0a
     f62:	9b 87       	std	Y+11, r25	; 0x0b
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <get_pressure>:
     f6a:	2f 92       	push	r2
     f6c:	3f 92       	push	r3
     f6e:	4f 92       	push	r4
     f70:	5f 92       	push	r5
     f72:	6f 92       	push	r6
     f74:	7f 92       	push	r7
     f76:	8f 92       	push	r8
     f78:	9f 92       	push	r9
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	52 de       	rcall	.-860    	; 0xc34 <ms5607_convert_d1>
     f90:	2b 01       	movw	r4, r22
     f92:	3c 01       	movw	r6, r24
     f94:	77 de       	rcall	.-786    	; 0xc84 <ms5607_convert_d2>
     f96:	4b 01       	movw	r8, r22
     f98:	5c 01       	movw	r10, r24
     f9a:	c2 ea       	ldi	r28, 0xA2	; 162
     f9c:	d0 e2       	ldi	r29, 0x20	; 32
     f9e:	48 85       	ldd	r20, Y+8	; 0x08
     fa0:	59 85       	ldd	r21, Y+9	; 0x09
     fa2:	24 2f       	mov	r18, r20
     fa4:	35 2f       	mov	r19, r21
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 e0       	ldi	r16, 0x08	; 8
     fb4:	ac d5       	rcall	.+2904   	; 0x1b0e <__ashldi3>
     fb6:	22 2e       	mov	r2, r18
     fb8:	33 2e       	mov	r3, r19
     fba:	b4 2f       	mov	r27, r20
     fbc:	a5 2f       	mov	r26, r21
     fbe:	f6 2f       	mov	r31, r22
     fc0:	e7 2f       	mov	r30, r23
     fc2:	08 2f       	mov	r16, r24
     fc4:	19 2f       	mov	r17, r25
     fc6:	28 2d       	mov	r18, r8
     fc8:	39 2d       	mov	r19, r9
     fca:	4a 2d       	mov	r20, r10
     fcc:	5b 2d       	mov	r21, r11
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a2 2c       	mov	r10, r2
     fd8:	b3 2c       	mov	r11, r3
     fda:	cb 2e       	mov	r12, r27
     fdc:	da 2e       	mov	r13, r26
     fde:	ef 2e       	mov	r14, r31
     fe0:	fe 2e       	mov	r15, r30
     fe2:	ae d5       	rcall	.+2908   	; 0x1b40 <__subdi3>
     fe4:	1b d3       	rcall	.+1590   	; 0x161c <__floatundisf>
     fe6:	4b 01       	movw	r8, r22
     fe8:	5c 01       	movw	r10, r24
     fea:	6c 81       	ldd	r22, Y+4	; 0x04
     fec:	7d 81       	ldd	r23, Y+5	; 0x05
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	d7 d2       	rcall	.+1454   	; 0x15a2 <__floatunsisf>
     ff4:	a5 01       	movw	r20, r10
     ff6:	94 01       	movw	r18, r8
     ff8:	e5 d3       	rcall	.+1994   	; 0x17c4 <__mulsf3>
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	5c e3       	ldi	r21, 0x3C	; 60
    1002:	e0 d3       	rcall	.+1984   	; 0x17c4 <__mulsf3>
    1004:	6b 01       	movw	r12, r22
    1006:	7c 01       	movw	r14, r24
    1008:	48 81       	ld	r20, Y
    100a:	59 81       	ldd	r21, Y+1	; 0x01
    100c:	24 2f       	mov	r18, r20
    100e:	35 2f       	mov	r19, r21
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	00 e1       	ldi	r16, 0x10	; 16
    101e:	77 d5       	rcall	.+2798   	; 0x1b0e <__ashldi3>
    1020:	fd d2       	rcall	.+1530   	; 0x161c <__floatundisf>
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	c7 01       	movw	r24, r14
    1028:	b6 01       	movw	r22, r12
    102a:	be d1       	rcall	.+892    	; 0x13a8 <__addsf3>
    102c:	6b 01       	movw	r12, r22
    102e:	7c 01       	movw	r14, r24
    1030:	c3 01       	movw	r24, r6
    1032:	b2 01       	movw	r22, r4
    1034:	b6 d2       	rcall	.+1388   	; 0x15a2 <__floatunsisf>
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	c7 01       	movw	r24, r14
    103c:	b6 01       	movw	r22, r12
    103e:	c2 d3       	rcall	.+1924   	; 0x17c4 <__mulsf3>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	55 e3       	ldi	r21, 0x35	; 53
    1048:	bd d3       	rcall	.+1914   	; 0x17c4 <__mulsf3>
    104a:	6b 01       	movw	r12, r22
    104c:	7c 01       	movw	r14, r24
    104e:	6e 81       	ldd	r22, Y+6	; 0x06
    1050:	7f 81       	ldd	r23, Y+7	; 0x07
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a5 d2       	rcall	.+1354   	; 0x15a2 <__floatunsisf>
    1058:	a5 01       	movw	r20, r10
    105a:	94 01       	movw	r18, r8
    105c:	b3 d3       	rcall	.+1894   	; 0x17c4 <__mulsf3>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e8       	ldi	r20, 0x80	; 128
    1064:	5c e3       	ldi	r21, 0x3C	; 60
    1066:	ae d3       	rcall	.+1884   	; 0x17c4 <__mulsf3>
    1068:	4b 01       	movw	r8, r22
    106a:	5c 01       	movw	r10, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	9b 81       	ldd	r25, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	39 2f       	mov	r19, r25
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	01 e1       	ldi	r16, 0x11	; 17
    1082:	45 d5       	rcall	.+2698   	; 0x1b0e <__ashldi3>
    1084:	cb d2       	rcall	.+1430   	; 0x161c <__floatundisf>
    1086:	9b 01       	movw	r18, r22
    1088:	ac 01       	movw	r20, r24
    108a:	c5 01       	movw	r24, r10
    108c:	b4 01       	movw	r22, r8
    108e:	8c d1       	rcall	.+792    	; 0x13a8 <__addsf3>
    1090:	9b 01       	movw	r18, r22
    1092:	ac 01       	movw	r20, r24
    1094:	c7 01       	movw	r24, r14
    1096:	b6 01       	movw	r22, r12
    1098:	86 d1       	rcall	.+780    	; 0x13a6 <__subsf3>
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	58 e3       	ldi	r21, 0x38	; 56
    10a2:	90 d3       	rcall	.+1824   	; 0x17c4 <__mulsf3>
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	bf 90       	pop	r11
    10b6:	af 90       	pop	r10
    10b8:	9f 90       	pop	r9
    10ba:	8f 90       	pop	r8
    10bc:	7f 90       	pop	r7
    10be:	6f 90       	pop	r6
    10c0:	5f 90       	pop	r5
    10c2:	4f 90       	pop	r4
    10c4:	3f 90       	pop	r3
    10c6:	2f 90       	pop	r2
    10c8:	08 95       	ret

000010ca <get_altitude>:

double get_altitude(double press){
    10ca:	4f 92       	push	r4
    10cc:	5f 92       	push	r5
    10ce:	6f 92       	push	r6
    10d0:	7f 92       	push	r7
    10d2:	8f 92       	push	r8
    10d4:	9f 92       	push	r9
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	2b 01       	movw	r4, r22
    10e4:	3c 01       	movw	r6, r24
	double val = 0;
	val = ground_t * (pow(ground_p / press, R * L / g_0) - 1) / L;
    10e6:	c0 90 11 20 	lds	r12, 0x2011	; 0x802011 <L>
    10ea:	d0 90 12 20 	lds	r13, 0x2012	; 0x802012 <L+0x1>
    10ee:	e0 90 13 20 	lds	r14, 0x2013	; 0x802013 <L+0x2>
    10f2:	f0 90 14 20 	lds	r15, 0x2014	; 0x802014 <L+0x3>
    10f6:	20 91 15 20 	lds	r18, 0x2015	; 0x802015 <R>
    10fa:	30 91 16 20 	lds	r19, 0x2016	; 0x802016 <R+0x1>
    10fe:	40 91 17 20 	lds	r20, 0x2017	; 0x802017 <R+0x2>
    1102:	50 91 18 20 	lds	r21, 0x2018	; 0x802018 <R+0x3>
    1106:	c7 01       	movw	r24, r14
    1108:	b6 01       	movw	r22, r12
    110a:	5c d3       	rcall	.+1720   	; 0x17c4 <__mulsf3>
    110c:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <g_0>
    1110:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <g_0+0x1>
    1114:	40 91 0f 20 	lds	r20, 0x200F	; 0x80200f <g_0+0x2>
    1118:	50 91 10 20 	lds	r21, 0x2010	; 0x802010 <g_0+0x3>
    111c:	a9 d1       	rcall	.+850    	; 0x1470 <__divsf3>
    111e:	4b 01       	movw	r8, r22
    1120:	5c 01       	movw	r10, r24
    1122:	a3 01       	movw	r20, r6
    1124:	92 01       	movw	r18, r4
    1126:	60 91 1d 20 	lds	r22, 0x201D	; 0x80201d <ground_p>
    112a:	70 91 1e 20 	lds	r23, 0x201E	; 0x80201e <ground_p+0x1>
    112e:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <ground_p+0x2>
    1132:	90 91 20 20 	lds	r25, 0x2020	; 0x802020 <ground_p+0x3>
    1136:	9c d1       	rcall	.+824    	; 0x1470 <__divsf3>
    1138:	a5 01       	movw	r20, r10
    113a:	94 01       	movw	r18, r8
    113c:	a6 d3       	rcall	.+1868   	; 0x188a <pow>
	return val;		//returns altitude in meters
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	2f d1       	rcall	.+606    	; 0x13a6 <__subsf3>
    1148:	20 91 19 20 	lds	r18, 0x2019	; 0x802019 <ground_t>
    114c:	30 91 1a 20 	lds	r19, 0x201A	; 0x80201a <ground_t+0x1>
    1150:	40 91 1b 20 	lds	r20, 0x201B	; 0x80201b <ground_t+0x2>
    1154:	50 91 1c 20 	lds	r21, 0x201C	; 0x80201c <ground_t+0x3>
    1158:	35 d3       	rcall	.+1642   	; 0x17c4 <__mulsf3>
    115a:	a7 01       	movw	r20, r14
    115c:	96 01       	movw	r18, r12
    115e:	88 d1       	rcall	.+784    	; 0x1470 <__divsf3>
}
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	bf 90       	pop	r11
    116a:	af 90       	pop	r10
    116c:	9f 90       	pop	r9
    116e:	8f 90       	pop	r8
    1170:	7f 90       	pop	r7
    1172:	6f 90       	pop	r6
    1174:	5f 90       	pop	r5
    1176:	4f 90       	pop	r4
    1178:	08 95       	ret

0000117a <system_init>:


// Sensor functions
void system_init(void){
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    117a:	91 de       	rcall	.-734    	; 0xe9e <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    117c:	6b e9       	ldi	r22, 0x9B	; 155
    117e:	72 e0       	ldi	r23, 0x02	; 2
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	b2 de       	rcall	.-668    	; 0xeea <__portable_avr_delay_cycles>
	
	// Initialization of pins
	PORTC.DIR = 0xBB; // makes Port C have pins, 7, 5, 4, 3, 1, 0 be output (0b10111011)
    1186:	e0 e4       	ldi	r30, 0x40	; 64
    1188:	f6 e0       	ldi	r31, 0x06	; 6
    118a:	8b eb       	ldi	r24, 0xBB	; 187
    118c:	80 83       	st	Z, r24
	PORTC.OUT = 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    118e:	80 e1       	ldi	r24, 0x10	; 16
    1190:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL = PMIC_LOLVLEN_bm; // enables lo level interrupts
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Driver Initialization
	uart_terminal_init();
    1198:	c7 dd       	rcall	.-1138   	; 0xd28 <uart_terminal_init>
	delay_ms(2);
    119a:	6b e9       	ldi	r22, 0x9B	; 155
    119c:	72 e0       	ldi	r23, 0x02	; 2
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a3 de       	rcall	.-698    	; 0xeea <__portable_avr_delay_cycles>
	
//	adc_init();
	delay_ms(2);
    11a4:	6b e9       	ldi	r22, 0x9B	; 155
    11a6:	72 e0       	ldi	r23, 0x02	; 2
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
	
	spi_init();
    11ac:	9e de       	rcall	.-708    	; 0xeea <__portable_avr_delay_cycles>
	delay_ms(2);
    11ae:	92 dd       	rcall	.-1244   	; 0xcd4 <spi_init>
    11b0:	6b e9       	ldi	r22, 0x9B	; 155
    11b2:	72 e0       	ldi	r23, 0x02	; 2
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
	
	ms5607_init();
    11b8:	98 de       	rcall	.-720    	; 0xeea <__portable_avr_delay_cycles>
    11ba:	a2 de       	rcall	.-700    	; 0xf00 <ms5607_init>
	delay_ms(2);
    11bc:	6b e9       	ldi	r22, 0x9B	; 155
    11be:	72 e0       	ldi	r23, 0x02	; 2
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	92 de       	rcall	.-732    	; 0xeea <__portable_avr_delay_cycles>
    11c6:	d1 de       	rcall	.-606    	; 0xf6a <get_pressure>
	
	
	// Initialization of variables
	ground_p = get_pressure();
    11c8:	60 93 1d 20 	sts	0x201D, r22	; 0x80201d <ground_p>
    11cc:	70 93 1e 20 	sts	0x201E, r23	; 0x80201e <ground_p+0x1>
    11d0:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <ground_p+0x2>
    11d4:	90 93 20 20 	sts	0x2020, r25	; 0x802020 <ground_p+0x3>
    11d8:	78 df       	rcall	.-272    	; 0x10ca <get_altitude>
	//ground_t = get_temperature();
	ground_a = get_altitude(ground_p);
    11da:	60 93 ae 20 	sts	0x20AE, r22	; 0x8020ae <ground_a>
    11de:	70 93 af 20 	sts	0x20AF, r23	; 0x8020af <ground_a+0x1>
    11e2:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <ground_a+0x2>
    11e6:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <ground_a+0x3>
    11ea:	08 95       	ret

000011ec <get_velocity>:
    11ec:	2f 92       	push	r2
    11ee:	3f 92       	push	r3
	val = ground_t * (pow(ground_p / press, R * L / g_0) - 1) / L;
	return val;		//returns altitude in meters
}

// Approximates the Velocity from past five altitudes
double get_velocity(RingBuffer16_t* altitudes, uint8_t frequency){
    11f0:	4f 92       	push	r4
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	00 d0       	rcall	.+0      	; 0x1212 <get_velocity+0x26>
    1212:	1f 92       	push	r1
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	9a 83       	std	Y+2, r25	; 0x02
	double vel = 0;
	for(uint16_t i = 0; i < 5; i++){
    121c:	1b 82       	std	Y+3, r1	; 0x03
    121e:	1c 82       	std	Y+4, r1	; 0x04
	return val;		//returns altitude in meters
}

// Approximates the Velocity from past five altitudes
double get_velocity(RingBuffer16_t* altitudes, uint8_t frequency){
	double vel = 0;
    1220:	41 2c       	mov	r4, r1
    1222:	51 2c       	mov	r5, r1
    1224:	32 01       	movw	r6, r4
	for(uint16_t i = 0; i < 5; i++){
		int16_t new = rb16_get_nth(altitudes,i);
		int16_t old = rb16_get_nth(altitudes,i+1);
		vel += (double) ((new - old) * frequency);
    1226:	26 2e       	mov	r2, r22
    1228:	31 2c       	mov	r3, r1
		printf("Old: %5i, New: %5i, Vel: %5i\n", old, new, (int16_t) (vel/5.0));
    122a:	0f 2e       	mov	r0, r31
    122c:	f1 e2       	ldi	r31, 0x21	; 33
    122e:	cf 2e       	mov	r12, r31
    1230:	f0 e2       	ldi	r31, 0x20	; 32
    1232:	df 2e       	mov	r13, r31
    1234:	f0 2d       	mov	r31, r0

// Approximates the Velocity from past five altitudes
double get_velocity(RingBuffer16_t* altitudes, uint8_t frequency){
	double vel = 0;
	for(uint16_t i = 0; i < 5; i++){
		int16_t new = rb16_get_nth(altitudes,i);
    1236:	6b 81       	ldd	r22, Y+3	; 0x03
    1238:	7c 81       	ldd	r23, Y+4	; 0x04
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	9a 81       	ldd	r25, Y+2	; 0x02
    123e:	02 de       	rcall	.-1020   	; 0xe44 <rb16_get_nth>
    1240:	7c 01       	movw	r14, r24
		int16_t old = rb16_get_nth(altitudes,i+1);
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	9c 83       	std	Y+4, r25	; 0x04
    124c:	bc 01       	movw	r22, r24
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	f8 dd       	rcall	.-1040   	; 0xe44 <rb16_get_nth>
    1254:	8c 01       	movw	r16, r24
		vel += (double) ((new - old) * frequency);
    1256:	c7 01       	movw	r24, r14
    1258:	80 1b       	sub	r24, r16
    125a:	91 0b       	sbc	r25, r17
    125c:	82 9d       	mul	r24, r2
    125e:	b0 01       	movw	r22, r0
    1260:	83 9d       	mul	r24, r3
    1262:	70 0d       	add	r23, r0
    1264:	92 9d       	mul	r25, r2
    1266:	70 0d       	add	r23, r0
    1268:	11 24       	eor	r1, r1
    126a:	07 2e       	mov	r0, r23
    126c:	00 0c       	add	r0, r0
    126e:	88 0b       	sbc	r24, r24
    1270:	99 0b       	sbc	r25, r25
    1272:	99 d1       	rcall	.+818    	; 0x15a6 <__floatsisf>
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	c3 01       	movw	r24, r6
    127a:	b2 01       	movw	r22, r4
    127c:	95 d0       	rcall	.+298    	; 0x13a8 <__addsf3>
    127e:	2b 01       	movw	r4, r22
    1280:	3c 01       	movw	r6, r24
		printf("Old: %5i, New: %5i, Vel: %5i\n", old, new, (int16_t) (vel/5.0));
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 ea       	ldi	r20, 0xA0	; 160
    1288:	50 e4       	ldi	r21, 0x40	; 64
    128a:	f2 d0       	rcall	.+484    	; 0x1470 <__divsf3>
    128c:	4b 01       	movw	r8, r22
    128e:	5c 01       	movw	r10, r24
    1290:	57 d1       	rcall	.+686    	; 0x1540 <__fixsfsi>
    1292:	7f 93       	push	r23
    1294:	6f 93       	push	r22
    1296:	ff 92       	push	r15
    1298:	ef 92       	push	r14
    129a:	1f 93       	push	r17
    129c:	0f 93       	push	r16
    129e:	df 92       	push	r13
    12a0:	cf 92       	push	r12
    12a2:	a1 d4       	rcall	.+2370   	; 0x1be6 <printf>
}

// Approximates the Velocity from past five altitudes
double get_velocity(RingBuffer16_t* altitudes, uint8_t frequency){
	double vel = 0;
	for(uint16_t i = 0; i < 5; i++){
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	05 97       	sbiw	r24, 0x05	; 5
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <get_velocity+0xc6>
    12b0:	c2 cf       	rjmp	.-124    	; 0x1236 <get_velocity+0x4a>
		vel += (double) ((new - old) * frequency);
		printf("Old: %5i, New: %5i, Vel: %5i\n", old, new, (int16_t) (vel/5.0));
	}
	vel /= 5.0;
	return vel;
}
    12b2:	c5 01       	movw	r24, r10
    12b4:	b4 01       	movw	r22, r8
    12b6:	24 96       	adiw	r28, 0x04	; 4
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	9f 90       	pop	r9
    12d2:	8f 90       	pop	r8
    12d4:	7f 90       	pop	r7
    12d6:	6f 90       	pop	r6
    12d8:	5f 90       	pop	r5
    12da:	4f 90       	pop	r4
    12dc:	3f 90       	pop	r3
    12de:	2f 90       	pop	r2
    12e0:	08 95       	ret

000012e2 <main>:
uint16_t c[] = {0,0,0,0,0,0};


////////////////////////////// Functions ///////////////////////////////
int main (void)
{
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	6e 97       	sbiw	r28, 0x1e	; 30
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	de bf       	out	0x3e, r29	; 62
	system_init();
    12f0:	44 df       	rcall	.-376    	; 0x117a <system_init>
	
	int16_t alt_array[10];
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    12f2:	4a e0       	ldi	r20, 0x0A	; 10
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	be 01       	movw	r22, r28
    12f8:	6f 5f       	subi	r22, 0xFF	; 255
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	ce 01       	movw	r24, r28
    12fe:	45 96       	adiw	r24, 0x15	; 21
    1300:	97 dd       	rcall	.-1234   	; 0xe30 <rb16_init>
	uint8_t mem_array[10];
	RingBufferu8_t gcs_comms;
	rbu8_init(&gcs_comms, mem_array, 10);
	*/
	
	printf("Initialized\n");
    1302:	8f e3       	ldi	r24, 0x3F	; 63
    1304:	90 e2       	ldi	r25, 0x20	; 32
    1306:	82 d4       	rcall	.+2308   	; 0x1c0c <puts>
		double press = get_pressure();
		double temp = 288.15; //get_temperature();
		double alt = get_altitude(press);
		int16_t a[] = {(int16_t) (alt*100)};
		rb16_write(&altitudes, &a, 1);
		printf("%i\n", a[0]);
    1308:	0f 2e       	mov	r0, r31
    130a:	f3 e8       	ldi	r31, 0x83	; 131
    130c:	8f 2e       	mov	r8, r31
    130e:	f0 e2       	ldi	r31, 0x20	; 32
    1310:	9f 2e       	mov	r9, r31
    1312:	f0 2d       	mov	r31, r0
		double velocity = get_velocity(&altitudes, 2);
		//printf("%li\n",(int32_t)press);
		printf("Pressure (Pa): %li, Altitude (cm): %i, Velocity (cm/s): %i\n", (int32_t) (press*10), (int16_t) (alt * 100), (int16_t) velocity);
    1314:	0f 2e       	mov	r0, r31
    1316:	fb e4       	ldi	r31, 0x4B	; 75
    1318:	af 2e       	mov	r10, r31
    131a:	f0 e2       	ldi	r31, 0x20	; 32
    131c:	bf 2e       	mov	r11, r31
    131e:	f0 2d       	mov	r31, r0
	
	printf("Initialized\n");
	
	while(1){
		//Gives each flight state their unique tasks
		switch(state){
    1320:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <state>
    1324:	84 30       	cpi	r24, 0x04	; 4
			case 2:
				break;
			case 3:
				break;
			default:
				state = 0;
    1326:	10 f0       	brcs	.+4      	; 0x132c <main+0x4a>
    1328:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <state>
				break;
		}
		
		
		// Check Sensors
		double press = get_pressure();
    132c:	1e de       	rcall	.-964    	; 0xf6a <get_pressure>
    132e:	6b 01       	movw	r12, r22
		double temp = 288.15; //get_temperature();
		double alt = get_altitude(press);
    1330:	7c 01       	movw	r14, r24
		int16_t a[] = {(int16_t) (alt*100)};
    1332:	cb de       	rcall	.-618    	; 0x10ca <get_altitude>
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	48 ec       	ldi	r20, 0xC8	; 200
    133a:	52 e4       	ldi	r21, 0x42	; 66
    133c:	43 d2       	rcall	.+1158   	; 0x17c4 <__mulsf3>
    133e:	00 d1       	rcall	.+512    	; 0x1540 <__fixsfsi>
    1340:	16 2f       	mov	r17, r22
    1342:	07 2f       	mov	r16, r23
    1344:	6d 8f       	std	Y+29, r22	; 0x1d
    1346:	7e 8f       	std	Y+30, r23	; 0x1e
		rb16_write(&altitudes, &a, 1);
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	be 01       	movw	r22, r28
    134e:	63 5e       	subi	r22, 0xE3	; 227
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	ce 01       	movw	r24, r28
    1354:	45 96       	adiw	r24, 0x15	; 21
		printf("%i\n", a[0]);
    1356:	2d dd       	rcall	.-1446   	; 0xdb2 <rb16_write>
    1358:	8e 8d       	ldd	r24, Y+30	; 0x1e
    135a:	8f 93       	push	r24
    135c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    135e:	8f 93       	push	r24
    1360:	9f 92       	push	r9
		double velocity = get_velocity(&altitudes, 2);
    1362:	8f 92       	push	r8
    1364:	40 d4       	rcall	.+2176   	; 0x1be6 <printf>
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	ce 01       	movw	r24, r28
    136a:	45 96       	adiw	r24, 0x15	; 21
		//printf("%li\n",(int32_t)press);
		printf("Pressure (Pa): %li, Altitude (cm): %i, Velocity (cm/s): %i\n", (int32_t) (press*10), (int16_t) (alt * 100), (int16_t) velocity);
    136c:	3f df       	rcall	.-386    	; 0x11ec <get_velocity>
    136e:	e8 d0       	rcall	.+464    	; 0x1540 <__fixsfsi>
    1370:	7f 93       	push	r23
    1372:	6f 93       	push	r22
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e2       	ldi	r20, 0x20	; 32
    137e:	51 e4       	ldi	r21, 0x41	; 65
    1380:	c7 01       	movw	r24, r14
    1382:	b6 01       	movw	r22, r12
    1384:	1f d2       	rcall	.+1086   	; 0x17c4 <__mulsf3>
    1386:	dc d0       	rcall	.+440    	; 0x1540 <__fixsfsi>
    1388:	9f 93       	push	r25
    138a:	8f 93       	push	r24
    138c:	7f 93       	push	r23
    138e:	6f 93       	push	r22
    1390:	bf 92       	push	r11
    1392:	af 92       	push	r10
		delay_ms(500);
    1394:	28 d4       	rcall	.+2128   	; 0x1be6 <printf>
    1396:	6b e0       	ldi	r22, 0x0B	; 11
    1398:	7b e8       	ldi	r23, 0x8B	; 139
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a5 dd       	rcall	.-1206   	; 0xeea <__portable_avr_delay_cycles>
	}
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	bd cf       	rjmp	.-134    	; 0x1320 <main+0x3e>

000013a6 <__subsf3>:
    13a6:	50 58       	subi	r21, 0x80	; 128

000013a8 <__addsf3>:
    13a8:	bb 27       	eor	r27, r27
    13aa:	aa 27       	eor	r26, r26
    13ac:	0e d0       	rcall	.+28     	; 0x13ca <__addsf3x>
    13ae:	8b c1       	rjmp	.+790    	; 0x16c6 <__fp_round>
    13b0:	7c d1       	rcall	.+760    	; 0x16aa <__fp_pscA>
    13b2:	30 f0       	brcs	.+12     	; 0x13c0 <__addsf3+0x18>
    13b4:	81 d1       	rcall	.+770    	; 0x16b8 <__fp_pscB>
    13b6:	20 f0       	brcs	.+8      	; 0x13c0 <__addsf3+0x18>
    13b8:	31 f4       	brne	.+12     	; 0x13c6 <__addsf3+0x1e>
    13ba:	9f 3f       	cpi	r25, 0xFF	; 255
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <__addsf3+0x1a>
    13be:	1e f4       	brtc	.+6      	; 0x13c6 <__addsf3+0x1e>
    13c0:	71 c1       	rjmp	.+738    	; 0x16a4 <__fp_nan>
    13c2:	0e f4       	brtc	.+2      	; 0x13c6 <__addsf3+0x1e>
    13c4:	e0 95       	com	r30
    13c6:	e7 fb       	bst	r30, 7
    13c8:	67 c1       	rjmp	.+718    	; 0x1698 <__fp_inf>

000013ca <__addsf3x>:
    13ca:	e9 2f       	mov	r30, r25
    13cc:	8d d1       	rcall	.+794    	; 0x16e8 <__fp_split3>
    13ce:	80 f3       	brcs	.-32     	; 0x13b0 <__addsf3+0x8>
    13d0:	ba 17       	cp	r27, r26
    13d2:	62 07       	cpc	r22, r18
    13d4:	73 07       	cpc	r23, r19
    13d6:	84 07       	cpc	r24, r20
    13d8:	95 07       	cpc	r25, r21
    13da:	18 f0       	brcs	.+6      	; 0x13e2 <__addsf3x+0x18>
    13dc:	71 f4       	brne	.+28     	; 0x13fa <__addsf3x+0x30>
    13de:	9e f5       	brtc	.+102    	; 0x1446 <__addsf3x+0x7c>
    13e0:	a5 c1       	rjmp	.+842    	; 0x172c <__fp_zero>
    13e2:	0e f4       	brtc	.+2      	; 0x13e6 <__addsf3x+0x1c>
    13e4:	e0 95       	com	r30
    13e6:	0b 2e       	mov	r0, r27
    13e8:	ba 2f       	mov	r27, r26
    13ea:	a0 2d       	mov	r26, r0
    13ec:	0b 01       	movw	r0, r22
    13ee:	b9 01       	movw	r22, r18
    13f0:	90 01       	movw	r18, r0
    13f2:	0c 01       	movw	r0, r24
    13f4:	ca 01       	movw	r24, r20
    13f6:	a0 01       	movw	r20, r0
    13f8:	11 24       	eor	r1, r1
    13fa:	ff 27       	eor	r31, r31
    13fc:	59 1b       	sub	r21, r25
    13fe:	99 f0       	breq	.+38     	; 0x1426 <__addsf3x+0x5c>
    1400:	59 3f       	cpi	r21, 0xF9	; 249
    1402:	50 f4       	brcc	.+20     	; 0x1418 <__addsf3x+0x4e>
    1404:	50 3e       	cpi	r21, 0xE0	; 224
    1406:	68 f1       	brcs	.+90     	; 0x1462 <__addsf3x+0x98>
    1408:	1a 16       	cp	r1, r26
    140a:	f0 40       	sbci	r31, 0x00	; 0
    140c:	a2 2f       	mov	r26, r18
    140e:	23 2f       	mov	r18, r19
    1410:	34 2f       	mov	r19, r20
    1412:	44 27       	eor	r20, r20
    1414:	58 5f       	subi	r21, 0xF8	; 248
    1416:	f3 cf       	rjmp	.-26     	; 0x13fe <__addsf3x+0x34>
    1418:	46 95       	lsr	r20
    141a:	37 95       	ror	r19
    141c:	27 95       	ror	r18
    141e:	a7 95       	ror	r26
    1420:	f0 40       	sbci	r31, 0x00	; 0
    1422:	53 95       	inc	r21
    1424:	c9 f7       	brne	.-14     	; 0x1418 <__addsf3x+0x4e>
    1426:	7e f4       	brtc	.+30     	; 0x1446 <__addsf3x+0x7c>
    1428:	1f 16       	cp	r1, r31
    142a:	ba 0b       	sbc	r27, r26
    142c:	62 0b       	sbc	r22, r18
    142e:	73 0b       	sbc	r23, r19
    1430:	84 0b       	sbc	r24, r20
    1432:	ba f0       	brmi	.+46     	; 0x1462 <__addsf3x+0x98>
    1434:	91 50       	subi	r25, 0x01	; 1
    1436:	a1 f0       	breq	.+40     	; 0x1460 <__addsf3x+0x96>
    1438:	ff 0f       	add	r31, r31
    143a:	bb 1f       	adc	r27, r27
    143c:	66 1f       	adc	r22, r22
    143e:	77 1f       	adc	r23, r23
    1440:	88 1f       	adc	r24, r24
    1442:	c2 f7       	brpl	.-16     	; 0x1434 <__addsf3x+0x6a>
    1444:	0e c0       	rjmp	.+28     	; 0x1462 <__addsf3x+0x98>
    1446:	ba 0f       	add	r27, r26
    1448:	62 1f       	adc	r22, r18
    144a:	73 1f       	adc	r23, r19
    144c:	84 1f       	adc	r24, r20
    144e:	48 f4       	brcc	.+18     	; 0x1462 <__addsf3x+0x98>
    1450:	87 95       	ror	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	b7 95       	ror	r27
    1458:	f7 95       	ror	r31
    145a:	9e 3f       	cpi	r25, 0xFE	; 254
    145c:	08 f0       	brcs	.+2      	; 0x1460 <__addsf3x+0x96>
    145e:	b3 cf       	rjmp	.-154    	; 0x13c6 <__addsf3+0x1e>
    1460:	93 95       	inc	r25
    1462:	88 0f       	add	r24, r24
    1464:	08 f0       	brcs	.+2      	; 0x1468 <__addsf3x+0x9e>
    1466:	99 27       	eor	r25, r25
    1468:	ee 0f       	add	r30, r30
    146a:	97 95       	ror	r25
    146c:	87 95       	ror	r24
    146e:	08 95       	ret

00001470 <__divsf3>:
    1470:	0c d0       	rcall	.+24     	; 0x148a <__divsf3x>
    1472:	29 c1       	rjmp	.+594    	; 0x16c6 <__fp_round>
    1474:	21 d1       	rcall	.+578    	; 0x16b8 <__fp_pscB>
    1476:	40 f0       	brcs	.+16     	; 0x1488 <__divsf3+0x18>
    1478:	18 d1       	rcall	.+560    	; 0x16aa <__fp_pscA>
    147a:	30 f0       	brcs	.+12     	; 0x1488 <__divsf3+0x18>
    147c:	21 f4       	brne	.+8      	; 0x1486 <__divsf3+0x16>
    147e:	5f 3f       	cpi	r21, 0xFF	; 255
    1480:	19 f0       	breq	.+6      	; 0x1488 <__divsf3+0x18>
    1482:	0a c1       	rjmp	.+532    	; 0x1698 <__fp_inf>
    1484:	51 11       	cpse	r21, r1
    1486:	53 c1       	rjmp	.+678    	; 0x172e <__fp_szero>
    1488:	0d c1       	rjmp	.+538    	; 0x16a4 <__fp_nan>

0000148a <__divsf3x>:
    148a:	2e d1       	rcall	.+604    	; 0x16e8 <__fp_split3>
    148c:	98 f3       	brcs	.-26     	; 0x1474 <__divsf3+0x4>

0000148e <__divsf3_pse>:
    148e:	99 23       	and	r25, r25
    1490:	c9 f3       	breq	.-14     	; 0x1484 <__divsf3+0x14>
    1492:	55 23       	and	r21, r21
    1494:	b1 f3       	breq	.-20     	; 0x1482 <__divsf3+0x12>
    1496:	95 1b       	sub	r25, r21
    1498:	55 0b       	sbc	r21, r21
    149a:	bb 27       	eor	r27, r27
    149c:	aa 27       	eor	r26, r26
    149e:	62 17       	cp	r22, r18
    14a0:	73 07       	cpc	r23, r19
    14a2:	84 07       	cpc	r24, r20
    14a4:	38 f0       	brcs	.+14     	; 0x14b4 <__divsf3_pse+0x26>
    14a6:	9f 5f       	subi	r25, 0xFF	; 255
    14a8:	5f 4f       	sbci	r21, 0xFF	; 255
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	44 1f       	adc	r20, r20
    14b0:	aa 1f       	adc	r26, r26
    14b2:	a9 f3       	breq	.-22     	; 0x149e <__divsf3_pse+0x10>
    14b4:	33 d0       	rcall	.+102    	; 0x151c <__divsf3_pse+0x8e>
    14b6:	0e 2e       	mov	r0, r30
    14b8:	3a f0       	brmi	.+14     	; 0x14c8 <__divsf3_pse+0x3a>
    14ba:	e0 e8       	ldi	r30, 0x80	; 128
    14bc:	30 d0       	rcall	.+96     	; 0x151e <__divsf3_pse+0x90>
    14be:	91 50       	subi	r25, 0x01	; 1
    14c0:	50 40       	sbci	r21, 0x00	; 0
    14c2:	e6 95       	lsr	r30
    14c4:	00 1c       	adc	r0, r0
    14c6:	ca f7       	brpl	.-14     	; 0x14ba <__divsf3_pse+0x2c>
    14c8:	29 d0       	rcall	.+82     	; 0x151c <__divsf3_pse+0x8e>
    14ca:	fe 2f       	mov	r31, r30
    14cc:	27 d0       	rcall	.+78     	; 0x151c <__divsf3_pse+0x8e>
    14ce:	66 0f       	add	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	88 1f       	adc	r24, r24
    14d4:	bb 1f       	adc	r27, r27
    14d6:	26 17       	cp	r18, r22
    14d8:	37 07       	cpc	r19, r23
    14da:	48 07       	cpc	r20, r24
    14dc:	ab 07       	cpc	r26, r27
    14de:	b0 e8       	ldi	r27, 0x80	; 128
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <__divsf3_pse+0x56>
    14e2:	bb 0b       	sbc	r27, r27
    14e4:	80 2d       	mov	r24, r0
    14e6:	bf 01       	movw	r22, r30
    14e8:	ff 27       	eor	r31, r31
    14ea:	93 58       	subi	r25, 0x83	; 131
    14ec:	5f 4f       	sbci	r21, 0xFF	; 255
    14ee:	2a f0       	brmi	.+10     	; 0x14fa <__divsf3_pse+0x6c>
    14f0:	9e 3f       	cpi	r25, 0xFE	; 254
    14f2:	51 05       	cpc	r21, r1
    14f4:	68 f0       	brcs	.+26     	; 0x1510 <__divsf3_pse+0x82>
    14f6:	d0 c0       	rjmp	.+416    	; 0x1698 <__fp_inf>
    14f8:	1a c1       	rjmp	.+564    	; 0x172e <__fp_szero>
    14fa:	5f 3f       	cpi	r21, 0xFF	; 255
    14fc:	ec f3       	brlt	.-6      	; 0x14f8 <__divsf3_pse+0x6a>
    14fe:	98 3e       	cpi	r25, 0xE8	; 232
    1500:	dc f3       	brlt	.-10     	; 0x14f8 <__divsf3_pse+0x6a>
    1502:	86 95       	lsr	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	b7 95       	ror	r27
    150a:	f7 95       	ror	r31
    150c:	9f 5f       	subi	r25, 0xFF	; 255
    150e:	c9 f7       	brne	.-14     	; 0x1502 <__divsf3_pse+0x74>
    1510:	88 0f       	add	r24, r24
    1512:	91 1d       	adc	r25, r1
    1514:	96 95       	lsr	r25
    1516:	87 95       	ror	r24
    1518:	97 f9       	bld	r25, 7
    151a:	08 95       	ret
    151c:	e1 e0       	ldi	r30, 0x01	; 1
    151e:	66 0f       	add	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	bb 1f       	adc	r27, r27
    1526:	62 17       	cp	r22, r18
    1528:	73 07       	cpc	r23, r19
    152a:	84 07       	cpc	r24, r20
    152c:	ba 07       	cpc	r27, r26
    152e:	20 f0       	brcs	.+8      	; 0x1538 <__divsf3_pse+0xaa>
    1530:	62 1b       	sub	r22, r18
    1532:	73 0b       	sbc	r23, r19
    1534:	84 0b       	sbc	r24, r20
    1536:	ba 0b       	sbc	r27, r26
    1538:	ee 1f       	adc	r30, r30
    153a:	88 f7       	brcc	.-30     	; 0x151e <__divsf3_pse+0x90>
    153c:	e0 95       	com	r30
    153e:	08 95       	ret

00001540 <__fixsfsi>:
    1540:	04 d0       	rcall	.+8      	; 0x154a <__fixunssfsi>
    1542:	68 94       	set
    1544:	b1 11       	cpse	r27, r1
    1546:	f3 c0       	rjmp	.+486    	; 0x172e <__fp_szero>
    1548:	08 95       	ret

0000154a <__fixunssfsi>:
    154a:	d6 d0       	rcall	.+428    	; 0x16f8 <__fp_splitA>
    154c:	88 f0       	brcs	.+34     	; 0x1570 <__fixunssfsi+0x26>
    154e:	9f 57       	subi	r25, 0x7F	; 127
    1550:	90 f0       	brcs	.+36     	; 0x1576 <__fixunssfsi+0x2c>
    1552:	b9 2f       	mov	r27, r25
    1554:	99 27       	eor	r25, r25
    1556:	b7 51       	subi	r27, 0x17	; 23
    1558:	a0 f0       	brcs	.+40     	; 0x1582 <__fixunssfsi+0x38>
    155a:	d1 f0       	breq	.+52     	; 0x1590 <__fixunssfsi+0x46>
    155c:	66 0f       	add	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	1a f0       	brmi	.+6      	; 0x156c <__fixunssfsi+0x22>
    1566:	ba 95       	dec	r27
    1568:	c9 f7       	brne	.-14     	; 0x155c <__fixunssfsi+0x12>
    156a:	12 c0       	rjmp	.+36     	; 0x1590 <__fixunssfsi+0x46>
    156c:	b1 30       	cpi	r27, 0x01	; 1
    156e:	81 f0       	breq	.+32     	; 0x1590 <__fixunssfsi+0x46>
    1570:	dd d0       	rcall	.+442    	; 0x172c <__fp_zero>
    1572:	b1 e0       	ldi	r27, 0x01	; 1
    1574:	08 95       	ret
    1576:	da c0       	rjmp	.+436    	; 0x172c <__fp_zero>
    1578:	67 2f       	mov	r22, r23
    157a:	78 2f       	mov	r23, r24
    157c:	88 27       	eor	r24, r24
    157e:	b8 5f       	subi	r27, 0xF8	; 248
    1580:	39 f0       	breq	.+14     	; 0x1590 <__fixunssfsi+0x46>
    1582:	b9 3f       	cpi	r27, 0xF9	; 249
    1584:	cc f3       	brlt	.-14     	; 0x1578 <__fixunssfsi+0x2e>
    1586:	86 95       	lsr	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b3 95       	inc	r27
    158e:	d9 f7       	brne	.-10     	; 0x1586 <__fixunssfsi+0x3c>
    1590:	3e f4       	brtc	.+14     	; 0x15a0 <__fixunssfsi+0x56>
    1592:	90 95       	com	r25
    1594:	80 95       	com	r24
    1596:	70 95       	com	r23
    1598:	61 95       	neg	r22
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	8f 4f       	sbci	r24, 0xFF	; 255
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	08 95       	ret

000015a2 <__floatunsisf>:
    15a2:	e8 94       	clt
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <__floatsisf+0x12>

000015a6 <__floatsisf>:
    15a6:	97 fb       	bst	r25, 7
    15a8:	3e f4       	brtc	.+14     	; 0x15b8 <__floatsisf+0x12>
    15aa:	90 95       	com	r25
    15ac:	80 95       	com	r24
    15ae:	70 95       	com	r23
    15b0:	61 95       	neg	r22
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	8f 4f       	sbci	r24, 0xFF	; 255
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	99 23       	and	r25, r25
    15ba:	a9 f0       	breq	.+42     	; 0x15e6 <__floatsisf+0x40>
    15bc:	f9 2f       	mov	r31, r25
    15be:	96 e9       	ldi	r25, 0x96	; 150
    15c0:	bb 27       	eor	r27, r27
    15c2:	93 95       	inc	r25
    15c4:	f6 95       	lsr	r31
    15c6:	87 95       	ror	r24
    15c8:	77 95       	ror	r23
    15ca:	67 95       	ror	r22
    15cc:	b7 95       	ror	r27
    15ce:	f1 11       	cpse	r31, r1
    15d0:	f8 cf       	rjmp	.-16     	; 0x15c2 <__floatsisf+0x1c>
    15d2:	fa f4       	brpl	.+62     	; 0x1612 <__floatsisf+0x6c>
    15d4:	bb 0f       	add	r27, r27
    15d6:	11 f4       	brne	.+4      	; 0x15dc <__floatsisf+0x36>
    15d8:	60 ff       	sbrs	r22, 0
    15da:	1b c0       	rjmp	.+54     	; 0x1612 <__floatsisf+0x6c>
    15dc:	6f 5f       	subi	r22, 0xFF	; 255
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	16 c0       	rjmp	.+44     	; 0x1612 <__floatsisf+0x6c>
    15e6:	88 23       	and	r24, r24
    15e8:	11 f0       	breq	.+4      	; 0x15ee <__floatsisf+0x48>
    15ea:	96 e9       	ldi	r25, 0x96	; 150
    15ec:	11 c0       	rjmp	.+34     	; 0x1610 <__floatsisf+0x6a>
    15ee:	77 23       	and	r23, r23
    15f0:	21 f0       	breq	.+8      	; 0x15fa <__floatsisf+0x54>
    15f2:	9e e8       	ldi	r25, 0x8E	; 142
    15f4:	87 2f       	mov	r24, r23
    15f6:	76 2f       	mov	r23, r22
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <__floatsisf+0x5e>
    15fa:	66 23       	and	r22, r22
    15fc:	71 f0       	breq	.+28     	; 0x161a <__floatsisf+0x74>
    15fe:	96 e8       	ldi	r25, 0x86	; 134
    1600:	86 2f       	mov	r24, r22
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	2a f0       	brmi	.+10     	; 0x1612 <__floatsisf+0x6c>
    1608:	9a 95       	dec	r25
    160a:	66 0f       	add	r22, r22
    160c:	77 1f       	adc	r23, r23
    160e:	88 1f       	adc	r24, r24
    1610:	da f7       	brpl	.-10     	; 0x1608 <__floatsisf+0x62>
    1612:	88 0f       	add	r24, r24
    1614:	96 95       	lsr	r25
    1616:	87 95       	ror	r24
    1618:	97 f9       	bld	r25, 7
    161a:	08 95       	ret

0000161c <__floatundisf>:
    161c:	e8 94       	clt

0000161e <__fp_di2sf>:
    161e:	f9 2f       	mov	r31, r25
    1620:	96 eb       	ldi	r25, 0xB6	; 182
    1622:	ff 23       	and	r31, r31
    1624:	81 f0       	breq	.+32     	; 0x1646 <__fp_di2sf+0x28>
    1626:	12 16       	cp	r1, r18
    1628:	13 06       	cpc	r1, r19
    162a:	14 06       	cpc	r1, r20
    162c:	44 0b       	sbc	r20, r20
    162e:	93 95       	inc	r25
    1630:	f6 95       	lsr	r31
    1632:	87 95       	ror	r24
    1634:	77 95       	ror	r23
    1636:	67 95       	ror	r22
    1638:	57 95       	ror	r21
    163a:	40 40       	sbci	r20, 0x00	; 0
    163c:	ff 23       	and	r31, r31
    163e:	b9 f7       	brne	.-18     	; 0x162e <__fp_di2sf+0x10>
    1640:	1b c0       	rjmp	.+54     	; 0x1678 <__fp_di2sf+0x5a>
    1642:	99 27       	eor	r25, r25
    1644:	08 95       	ret
    1646:	88 23       	and	r24, r24
    1648:	51 f4       	brne	.+20     	; 0x165e <__fp_di2sf+0x40>
    164a:	98 50       	subi	r25, 0x08	; 8
    164c:	d2 f7       	brpl	.-12     	; 0x1642 <__fp_di2sf+0x24>
    164e:	87 2b       	or	r24, r23
    1650:	76 2f       	mov	r23, r22
    1652:	65 2f       	mov	r22, r21
    1654:	54 2f       	mov	r21, r20
    1656:	43 2f       	mov	r20, r19
    1658:	32 2f       	mov	r19, r18
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	b1 f3       	breq	.-20     	; 0x164a <__fp_di2sf+0x2c>
    165e:	12 16       	cp	r1, r18
    1660:	13 06       	cpc	r1, r19
    1662:	14 06       	cpc	r1, r20
    1664:	44 0b       	sbc	r20, r20
    1666:	88 23       	and	r24, r24
    1668:	3a f0       	brmi	.+14     	; 0x1678 <__fp_di2sf+0x5a>
    166a:	9a 95       	dec	r25
    166c:	44 0f       	add	r20, r20
    166e:	55 1f       	adc	r21, r21
    1670:	66 1f       	adc	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24
    1676:	ca f7       	brpl	.-14     	; 0x166a <__fp_di2sf+0x4c>
    1678:	55 23       	and	r21, r21
    167a:	4a f4       	brpl	.+18     	; 0x168e <__fp_di2sf+0x70>
    167c:	44 0f       	add	r20, r20
    167e:	55 1f       	adc	r21, r21
    1680:	11 f4       	brne	.+4      	; 0x1686 <__fp_di2sf+0x68>
    1682:	60 ff       	sbrs	r22, 0
    1684:	04 c0       	rjmp	.+8      	; 0x168e <__fp_di2sf+0x70>
    1686:	6f 5f       	subi	r22, 0xFF	; 255
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	8f 4f       	sbci	r24, 0xFF	; 255
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	88 0f       	add	r24, r24
    1690:	96 95       	lsr	r25
    1692:	87 95       	ror	r24
    1694:	97 f9       	bld	r25, 7
    1696:	08 95       	ret

00001698 <__fp_inf>:
    1698:	97 f9       	bld	r25, 7
    169a:	9f 67       	ori	r25, 0x7F	; 127
    169c:	80 e8       	ldi	r24, 0x80	; 128
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	08 95       	ret

000016a4 <__fp_nan>:
    16a4:	9f ef       	ldi	r25, 0xFF	; 255
    16a6:	80 ec       	ldi	r24, 0xC0	; 192
    16a8:	08 95       	ret

000016aa <__fp_pscA>:
    16aa:	00 24       	eor	r0, r0
    16ac:	0a 94       	dec	r0
    16ae:	16 16       	cp	r1, r22
    16b0:	17 06       	cpc	r1, r23
    16b2:	18 06       	cpc	r1, r24
    16b4:	09 06       	cpc	r0, r25
    16b6:	08 95       	ret

000016b8 <__fp_pscB>:
    16b8:	00 24       	eor	r0, r0
    16ba:	0a 94       	dec	r0
    16bc:	12 16       	cp	r1, r18
    16be:	13 06       	cpc	r1, r19
    16c0:	14 06       	cpc	r1, r20
    16c2:	05 06       	cpc	r0, r21
    16c4:	08 95       	ret

000016c6 <__fp_round>:
    16c6:	09 2e       	mov	r0, r25
    16c8:	03 94       	inc	r0
    16ca:	00 0c       	add	r0, r0
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <__fp_round+0xc>
    16ce:	88 23       	and	r24, r24
    16d0:	52 f0       	brmi	.+20     	; 0x16e6 <__fp_round+0x20>
    16d2:	bb 0f       	add	r27, r27
    16d4:	40 f4       	brcc	.+16     	; 0x16e6 <__fp_round+0x20>
    16d6:	bf 2b       	or	r27, r31
    16d8:	11 f4       	brne	.+4      	; 0x16de <__fp_round+0x18>
    16da:	60 ff       	sbrs	r22, 0
    16dc:	04 c0       	rjmp	.+8      	; 0x16e6 <__fp_round+0x20>
    16de:	6f 5f       	subi	r22, 0xFF	; 255
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	8f 4f       	sbci	r24, 0xFF	; 255
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	08 95       	ret

000016e8 <__fp_split3>:
    16e8:	57 fd       	sbrc	r21, 7
    16ea:	90 58       	subi	r25, 0x80	; 128
    16ec:	44 0f       	add	r20, r20
    16ee:	55 1f       	adc	r21, r21
    16f0:	59 f0       	breq	.+22     	; 0x1708 <__fp_splitA+0x10>
    16f2:	5f 3f       	cpi	r21, 0xFF	; 255
    16f4:	71 f0       	breq	.+28     	; 0x1712 <__fp_splitA+0x1a>
    16f6:	47 95       	ror	r20

000016f8 <__fp_splitA>:
    16f8:	88 0f       	add	r24, r24
    16fa:	97 fb       	bst	r25, 7
    16fc:	99 1f       	adc	r25, r25
    16fe:	61 f0       	breq	.+24     	; 0x1718 <__fp_splitA+0x20>
    1700:	9f 3f       	cpi	r25, 0xFF	; 255
    1702:	79 f0       	breq	.+30     	; 0x1722 <__fp_splitA+0x2a>
    1704:	87 95       	ror	r24
    1706:	08 95       	ret
    1708:	12 16       	cp	r1, r18
    170a:	13 06       	cpc	r1, r19
    170c:	14 06       	cpc	r1, r20
    170e:	55 1f       	adc	r21, r21
    1710:	f2 cf       	rjmp	.-28     	; 0x16f6 <__fp_split3+0xe>
    1712:	46 95       	lsr	r20
    1714:	f1 df       	rcall	.-30     	; 0x16f8 <__fp_splitA>
    1716:	08 c0       	rjmp	.+16     	; 0x1728 <__fp_splitA+0x30>
    1718:	16 16       	cp	r1, r22
    171a:	17 06       	cpc	r1, r23
    171c:	18 06       	cpc	r1, r24
    171e:	99 1f       	adc	r25, r25
    1720:	f1 cf       	rjmp	.-30     	; 0x1704 <__fp_splitA+0xc>
    1722:	86 95       	lsr	r24
    1724:	71 05       	cpc	r23, r1
    1726:	61 05       	cpc	r22, r1
    1728:	08 94       	sec
    172a:	08 95       	ret

0000172c <__fp_zero>:
    172c:	e8 94       	clt

0000172e <__fp_szero>:
    172e:	bb 27       	eor	r27, r27
    1730:	66 27       	eor	r22, r22
    1732:	77 27       	eor	r23, r23
    1734:	cb 01       	movw	r24, r22
    1736:	97 f9       	bld	r25, 7
    1738:	08 95       	ret
    173a:	0e f0       	brts	.+2      	; 0x173e <__fp_szero+0x10>
    173c:	23 c1       	rjmp	.+582    	; 0x1984 <__fp_mpack>
    173e:	b2 cf       	rjmp	.-156    	; 0x16a4 <__fp_nan>
    1740:	68 94       	set
    1742:	aa cf       	rjmp	.-172    	; 0x1698 <__fp_inf>

00001744 <log>:
    1744:	d9 df       	rcall	.-78     	; 0x16f8 <__fp_splitA>
    1746:	c8 f3       	brcs	.-14     	; 0x173a <__fp_szero+0xc>
    1748:	99 23       	and	r25, r25
    174a:	d1 f3       	breq	.-12     	; 0x1740 <__fp_szero+0x12>
    174c:	c6 f3       	brts	.-16     	; 0x173e <__fp_szero+0x10>
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	1f 93       	push	r17
    1754:	0f 93       	push	r16
    1756:	ff 92       	push	r15
    1758:	c9 2f       	mov	r28, r25
    175a:	dd 27       	eor	r29, r29
    175c:	88 23       	and	r24, r24
    175e:	2a f0       	brmi	.+10     	; 0x176a <log+0x26>
    1760:	21 97       	sbiw	r28, 0x01	; 1
    1762:	66 0f       	add	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	88 1f       	adc	r24, r24
    1768:	da f7       	brpl	.-10     	; 0x1760 <log+0x1c>
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f eb       	ldi	r21, 0xBF	; 191
    1772:	9f e3       	ldi	r25, 0x3F	; 63
    1774:	88 39       	cpi	r24, 0x98	; 152
    1776:	20 f0       	brcs	.+8      	; 0x1780 <log+0x3c>
    1778:	80 3e       	cpi	r24, 0xE0	; 224
    177a:	30 f0       	brcs	.+12     	; 0x1788 <log+0x44>
    177c:	21 96       	adiw	r28, 0x01	; 1
    177e:	8f 77       	andi	r24, 0x7F	; 127
    1780:	13 de       	rcall	.-986    	; 0x13a8 <__addsf3>
    1782:	ec ef       	ldi	r30, 0xFC	; 252
    1784:	f1 e0       	ldi	r31, 0x01	; 1
    1786:	03 c0       	rjmp	.+6      	; 0x178e <log+0x4a>
    1788:	0f de       	rcall	.-994    	; 0x13a8 <__addsf3>
    178a:	e9 e2       	ldi	r30, 0x29	; 41
    178c:	f2 e0       	ldi	r31, 0x02	; 2
    178e:	08 d1       	rcall	.+528    	; 0x19a0 <__fp_powser>
    1790:	8b 01       	movw	r16, r22
    1792:	be 01       	movw	r22, r28
    1794:	ec 01       	movw	r28, r24
    1796:	fb 2e       	mov	r15, r27
    1798:	6f 57       	subi	r22, 0x7F	; 127
    179a:	71 09       	sbc	r23, r1
    179c:	75 95       	asr	r23
    179e:	77 1f       	adc	r23, r23
    17a0:	88 0b       	sbc	r24, r24
    17a2:	99 0b       	sbc	r25, r25
    17a4:	00 df       	rcall	.-512    	; 0x15a6 <__floatsisf>
    17a6:	28 e1       	ldi	r18, 0x18	; 24
    17a8:	32 e7       	ldi	r19, 0x72	; 114
    17aa:	41 e3       	ldi	r20, 0x31	; 49
    17ac:	5f e3       	ldi	r21, 0x3F	; 63
    17ae:	16 d0       	rcall	.+44     	; 0x17dc <__mulsf3x>
    17b0:	af 2d       	mov	r26, r15
    17b2:	98 01       	movw	r18, r16
    17b4:	ae 01       	movw	r20, r28
    17b6:	ff 90       	pop	r15
    17b8:	0f 91       	pop	r16
    17ba:	1f 91       	pop	r17
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	04 de       	rcall	.-1016   	; 0x13ca <__addsf3x>
    17c2:	81 cf       	rjmp	.-254    	; 0x16c6 <__fp_round>

000017c4 <__mulsf3>:
    17c4:	0b d0       	rcall	.+22     	; 0x17dc <__mulsf3x>
    17c6:	7f cf       	rjmp	.-258    	; 0x16c6 <__fp_round>
    17c8:	70 df       	rcall	.-288    	; 0x16aa <__fp_pscA>
    17ca:	28 f0       	brcs	.+10     	; 0x17d6 <__mulsf3+0x12>
    17cc:	75 df       	rcall	.-278    	; 0x16b8 <__fp_pscB>
    17ce:	18 f0       	brcs	.+6      	; 0x17d6 <__mulsf3+0x12>
    17d0:	95 23       	and	r25, r21
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <__mulsf3+0x12>
    17d4:	61 cf       	rjmp	.-318    	; 0x1698 <__fp_inf>
    17d6:	66 cf       	rjmp	.-308    	; 0x16a4 <__fp_nan>
    17d8:	11 24       	eor	r1, r1
    17da:	a9 cf       	rjmp	.-174    	; 0x172e <__fp_szero>

000017dc <__mulsf3x>:
    17dc:	85 df       	rcall	.-246    	; 0x16e8 <__fp_split3>
    17de:	a0 f3       	brcs	.-24     	; 0x17c8 <__mulsf3+0x4>

000017e0 <__mulsf3_pse>:
    17e0:	95 9f       	mul	r25, r21
    17e2:	d1 f3       	breq	.-12     	; 0x17d8 <__mulsf3+0x14>
    17e4:	95 0f       	add	r25, r21
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	55 1f       	adc	r21, r21
    17ea:	62 9f       	mul	r22, r18
    17ec:	f0 01       	movw	r30, r0
    17ee:	72 9f       	mul	r23, r18
    17f0:	bb 27       	eor	r27, r27
    17f2:	f0 0d       	add	r31, r0
    17f4:	b1 1d       	adc	r27, r1
    17f6:	63 9f       	mul	r22, r19
    17f8:	aa 27       	eor	r26, r26
    17fa:	f0 0d       	add	r31, r0
    17fc:	b1 1d       	adc	r27, r1
    17fe:	aa 1f       	adc	r26, r26
    1800:	64 9f       	mul	r22, r20
    1802:	66 27       	eor	r22, r22
    1804:	b0 0d       	add	r27, r0
    1806:	a1 1d       	adc	r26, r1
    1808:	66 1f       	adc	r22, r22
    180a:	82 9f       	mul	r24, r18
    180c:	22 27       	eor	r18, r18
    180e:	b0 0d       	add	r27, r0
    1810:	a1 1d       	adc	r26, r1
    1812:	62 1f       	adc	r22, r18
    1814:	73 9f       	mul	r23, r19
    1816:	b0 0d       	add	r27, r0
    1818:	a1 1d       	adc	r26, r1
    181a:	62 1f       	adc	r22, r18
    181c:	83 9f       	mul	r24, r19
    181e:	a0 0d       	add	r26, r0
    1820:	61 1d       	adc	r22, r1
    1822:	22 1f       	adc	r18, r18
    1824:	74 9f       	mul	r23, r20
    1826:	33 27       	eor	r19, r19
    1828:	a0 0d       	add	r26, r0
    182a:	61 1d       	adc	r22, r1
    182c:	23 1f       	adc	r18, r19
    182e:	84 9f       	mul	r24, r20
    1830:	60 0d       	add	r22, r0
    1832:	21 1d       	adc	r18, r1
    1834:	82 2f       	mov	r24, r18
    1836:	76 2f       	mov	r23, r22
    1838:	6a 2f       	mov	r22, r26
    183a:	11 24       	eor	r1, r1
    183c:	9f 57       	subi	r25, 0x7F	; 127
    183e:	50 40       	sbci	r21, 0x00	; 0
    1840:	8a f0       	brmi	.+34     	; 0x1864 <__mulsf3_pse+0x84>
    1842:	e1 f0       	breq	.+56     	; 0x187c <__mulsf3_pse+0x9c>
    1844:	88 23       	and	r24, r24
    1846:	4a f0       	brmi	.+18     	; 0x185a <__mulsf3_pse+0x7a>
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	bb 1f       	adc	r27, r27
    184e:	66 1f       	adc	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	91 50       	subi	r25, 0x01	; 1
    1856:	50 40       	sbci	r21, 0x00	; 0
    1858:	a9 f7       	brne	.-22     	; 0x1844 <__mulsf3_pse+0x64>
    185a:	9e 3f       	cpi	r25, 0xFE	; 254
    185c:	51 05       	cpc	r21, r1
    185e:	70 f0       	brcs	.+28     	; 0x187c <__mulsf3_pse+0x9c>
    1860:	1b cf       	rjmp	.-458    	; 0x1698 <__fp_inf>
    1862:	65 cf       	rjmp	.-310    	; 0x172e <__fp_szero>
    1864:	5f 3f       	cpi	r21, 0xFF	; 255
    1866:	ec f3       	brlt	.-6      	; 0x1862 <__mulsf3_pse+0x82>
    1868:	98 3e       	cpi	r25, 0xE8	; 232
    186a:	dc f3       	brlt	.-10     	; 0x1862 <__mulsf3_pse+0x82>
    186c:	86 95       	lsr	r24
    186e:	77 95       	ror	r23
    1870:	67 95       	ror	r22
    1872:	b7 95       	ror	r27
    1874:	f7 95       	ror	r31
    1876:	e7 95       	ror	r30
    1878:	9f 5f       	subi	r25, 0xFF	; 255
    187a:	c1 f7       	brne	.-16     	; 0x186c <__mulsf3_pse+0x8c>
    187c:	fe 2b       	or	r31, r30
    187e:	88 0f       	add	r24, r24
    1880:	91 1d       	adc	r25, r1
    1882:	96 95       	lsr	r25
    1884:	87 95       	ror	r24
    1886:	97 f9       	bld	r25, 7
    1888:	08 95       	ret

0000188a <pow>:
    188a:	fa 01       	movw	r30, r20
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	30 96       	adiw	r30, 0x00	; 0
    1892:	21 05       	cpc	r18, r1
    1894:	31 05       	cpc	r19, r1
    1896:	99 f1       	breq	.+102    	; 0x18fe <pow+0x74>
    1898:	61 15       	cp	r22, r1
    189a:	71 05       	cpc	r23, r1
    189c:	61 f4       	brne	.+24     	; 0x18b6 <pow+0x2c>
    189e:	80 38       	cpi	r24, 0x80	; 128
    18a0:	bf e3       	ldi	r27, 0x3F	; 63
    18a2:	9b 07       	cpc	r25, r27
    18a4:	49 f1       	breq	.+82     	; 0x18f8 <pow+0x6e>
    18a6:	68 94       	set
    18a8:	90 38       	cpi	r25, 0x80	; 128
    18aa:	81 05       	cpc	r24, r1
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <pow+0x3c>
    18ae:	80 38       	cpi	r24, 0x80	; 128
    18b0:	bf ef       	ldi	r27, 0xFF	; 255
    18b2:	9b 07       	cpc	r25, r27
    18b4:	41 f0       	breq	.+16     	; 0x18c6 <pow+0x3c>
    18b6:	99 23       	and	r25, r25
    18b8:	42 f5       	brpl	.+80     	; 0x190a <pow+0x80>
    18ba:	ff 3f       	cpi	r31, 0xFF	; 255
    18bc:	e1 05       	cpc	r30, r1
    18be:	31 05       	cpc	r19, r1
    18c0:	21 05       	cpc	r18, r1
    18c2:	11 f1       	breq	.+68     	; 0x1908 <pow+0x7e>
    18c4:	e8 94       	clt
    18c6:	08 94       	sec
    18c8:	e7 95       	ror	r30
    18ca:	d9 01       	movw	r26, r18
    18cc:	aa 23       	and	r26, r26
    18ce:	29 f4       	brne	.+10     	; 0x18da <pow+0x50>
    18d0:	ab 2f       	mov	r26, r27
    18d2:	be 2f       	mov	r27, r30
    18d4:	f8 5f       	subi	r31, 0xF8	; 248
    18d6:	d0 f3       	brcs	.-12     	; 0x18cc <pow+0x42>
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <pow+0x70>
    18da:	ff 5f       	subi	r31, 0xFF	; 255
    18dc:	70 f4       	brcc	.+28     	; 0x18fa <pow+0x70>
    18de:	a6 95       	lsr	r26
    18e0:	e0 f7       	brcc	.-8      	; 0x18da <pow+0x50>
    18e2:	f7 39       	cpi	r31, 0x97	; 151
    18e4:	50 f0       	brcs	.+20     	; 0x18fa <pow+0x70>
    18e6:	19 f0       	breq	.+6      	; 0x18ee <pow+0x64>
    18e8:	ff 3a       	cpi	r31, 0xAF	; 175
    18ea:	38 f4       	brcc	.+14     	; 0x18fa <pow+0x70>
    18ec:	9f 77       	andi	r25, 0x7F	; 127
    18ee:	9f 93       	push	r25
    18f0:	0c d0       	rcall	.+24     	; 0x190a <pow+0x80>
    18f2:	0f 90       	pop	r0
    18f4:	07 fc       	sbrc	r0, 7
    18f6:	90 58       	subi	r25, 0x80	; 128
    18f8:	08 95       	ret
    18fa:	3e f0       	brts	.+14     	; 0x190a <pow+0x80>
    18fc:	d3 ce       	rjmp	.-602    	; 0x16a4 <__fp_nan>
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	80 e8       	ldi	r24, 0x80	; 128
    1904:	9f e3       	ldi	r25, 0x3F	; 63
    1906:	08 95       	ret
    1908:	4f e7       	ldi	r20, 0x7F	; 127
    190a:	9f 77       	andi	r25, 0x7F	; 127
    190c:	5f 93       	push	r21
    190e:	4f 93       	push	r20
    1910:	3f 93       	push	r19
    1912:	2f 93       	push	r18
    1914:	17 df       	rcall	.-466    	; 0x1744 <log>
    1916:	2f 91       	pop	r18
    1918:	3f 91       	pop	r19
    191a:	4f 91       	pop	r20
    191c:	5f 91       	pop	r21
    191e:	52 df       	rcall	.-348    	; 0x17c4 <__mulsf3>
    1920:	05 c0       	rjmp	.+10     	; 0x192c <exp>
    1922:	19 f4       	brne	.+6      	; 0x192a <pow+0xa0>
    1924:	0e f0       	brts	.+2      	; 0x1928 <pow+0x9e>
    1926:	b8 ce       	rjmp	.-656    	; 0x1698 <__fp_inf>
    1928:	01 cf       	rjmp	.-510    	; 0x172c <__fp_zero>
    192a:	bc ce       	rjmp	.-648    	; 0x16a4 <__fp_nan>

0000192c <exp>:
    192c:	e5 de       	rcall	.-566    	; 0x16f8 <__fp_splitA>
    192e:	c8 f3       	brcs	.-14     	; 0x1922 <pow+0x98>
    1930:	96 38       	cpi	r25, 0x86	; 134
    1932:	c0 f7       	brcc	.-16     	; 0x1924 <pow+0x9a>
    1934:	07 f8       	bld	r0, 7
    1936:	0f 92       	push	r0
    1938:	e8 94       	clt
    193a:	2b e3       	ldi	r18, 0x3B	; 59
    193c:	3a ea       	ldi	r19, 0xAA	; 170
    193e:	48 eb       	ldi	r20, 0xB8	; 184
    1940:	5f e7       	ldi	r21, 0x7F	; 127
    1942:	4e df       	rcall	.-356    	; 0x17e0 <__mulsf3_pse>
    1944:	0f 92       	push	r0
    1946:	0f 92       	push	r0
    1948:	0f 92       	push	r0
    194a:	4d b7       	in	r20, 0x3d	; 61
    194c:	5e b7       	in	r21, 0x3e	; 62
    194e:	0f 92       	push	r0
    1950:	89 d0       	rcall	.+274    	; 0x1a64 <modf>
    1952:	e6 e5       	ldi	r30, 0x56	; 86
    1954:	f2 e0       	ldi	r31, 0x02	; 2
    1956:	24 d0       	rcall	.+72     	; 0x19a0 <__fp_powser>
    1958:	4f 91       	pop	r20
    195a:	5f 91       	pop	r21
    195c:	ef 91       	pop	r30
    195e:	ff 91       	pop	r31
    1960:	e5 95       	asr	r30
    1962:	ee 1f       	adc	r30, r30
    1964:	ff 1f       	adc	r31, r31
    1966:	49 f0       	breq	.+18     	; 0x197a <exp+0x4e>
    1968:	fe 57       	subi	r31, 0x7E	; 126
    196a:	e0 68       	ori	r30, 0x80	; 128
    196c:	44 27       	eor	r20, r20
    196e:	ee 0f       	add	r30, r30
    1970:	44 1f       	adc	r20, r20
    1972:	fa 95       	dec	r31
    1974:	e1 f7       	brne	.-8      	; 0x196e <exp+0x42>
    1976:	41 95       	neg	r20
    1978:	55 0b       	sbc	r21, r21
    197a:	40 d0       	rcall	.+128    	; 0x19fc <ldexp>
    197c:	0f 90       	pop	r0
    197e:	07 fe       	sbrs	r0, 7
    1980:	34 c0       	rjmp	.+104    	; 0x19ea <inverse>
    1982:	08 95       	ret

00001984 <__fp_mpack>:
    1984:	9f 3f       	cpi	r25, 0xFF	; 255
    1986:	31 f0       	breq	.+12     	; 0x1994 <__fp_mpack_finite+0xc>

00001988 <__fp_mpack_finite>:
    1988:	91 50       	subi	r25, 0x01	; 1
    198a:	20 f4       	brcc	.+8      	; 0x1994 <__fp_mpack_finite+0xc>
    198c:	87 95       	ror	r24
    198e:	77 95       	ror	r23
    1990:	67 95       	ror	r22
    1992:	b7 95       	ror	r27
    1994:	88 0f       	add	r24, r24
    1996:	91 1d       	adc	r25, r1
    1998:	96 95       	lsr	r25
    199a:	87 95       	ror	r24
    199c:	97 f9       	bld	r25, 7
    199e:	08 95       	ret

000019a0 <__fp_powser>:
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	1f 93       	push	r17
    19a6:	0f 93       	push	r16
    19a8:	ff 92       	push	r15
    19aa:	ef 92       	push	r14
    19ac:	df 92       	push	r13
    19ae:	7b 01       	movw	r14, r22
    19b0:	8c 01       	movw	r16, r24
    19b2:	68 94       	set
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <__fp_powser+0x20>
    19b6:	da 2e       	mov	r13, r26
    19b8:	ef 01       	movw	r28, r30
    19ba:	10 df       	rcall	.-480    	; 0x17dc <__mulsf3x>
    19bc:	fe 01       	movw	r30, r28
    19be:	e8 94       	clt
    19c0:	a5 91       	lpm	r26, Z+
    19c2:	25 91       	lpm	r18, Z+
    19c4:	35 91       	lpm	r19, Z+
    19c6:	45 91       	lpm	r20, Z+
    19c8:	55 91       	lpm	r21, Z+
    19ca:	ae f3       	brts	.-22     	; 0x19b6 <__fp_powser+0x16>
    19cc:	ef 01       	movw	r28, r30
    19ce:	fd dc       	rcall	.-1542   	; 0x13ca <__addsf3x>
    19d0:	fe 01       	movw	r30, r28
    19d2:	97 01       	movw	r18, r14
    19d4:	a8 01       	movw	r20, r16
    19d6:	da 94       	dec	r13
    19d8:	79 f7       	brne	.-34     	; 0x19b8 <__fp_powser+0x18>
    19da:	df 90       	pop	r13
    19dc:	ef 90       	pop	r14
    19de:	ff 90       	pop	r15
    19e0:	0f 91       	pop	r16
    19e2:	1f 91       	pop	r17
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <inverse>:
    19ea:	9b 01       	movw	r18, r22
    19ec:	ac 01       	movw	r20, r24
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	80 e8       	ldi	r24, 0x80	; 128
    19f4:	9f e3       	ldi	r25, 0x3F	; 63
    19f6:	3c cd       	rjmp	.-1416   	; 0x1470 <__divsf3>
    19f8:	4f ce       	rjmp	.-866    	; 0x1698 <__fp_inf>
    19fa:	c4 cf       	rjmp	.-120    	; 0x1984 <__fp_mpack>

000019fc <ldexp>:
    19fc:	7d de       	rcall	.-774    	; 0x16f8 <__fp_splitA>
    19fe:	e8 f3       	brcs	.-6      	; 0x19fa <inverse+0x10>
    1a00:	99 23       	and	r25, r25
    1a02:	d9 f3       	breq	.-10     	; 0x19fa <inverse+0x10>
    1a04:	94 0f       	add	r25, r20
    1a06:	51 1d       	adc	r21, r1
    1a08:	bb f3       	brvs	.-18     	; 0x19f8 <inverse+0xe>
    1a0a:	91 50       	subi	r25, 0x01	; 1
    1a0c:	50 40       	sbci	r21, 0x00	; 0
    1a0e:	94 f0       	brlt	.+36     	; 0x1a34 <ldexp+0x38>
    1a10:	59 f0       	breq	.+22     	; 0x1a28 <ldexp+0x2c>
    1a12:	88 23       	and	r24, r24
    1a14:	32 f0       	brmi	.+12     	; 0x1a22 <ldexp+0x26>
    1a16:	66 0f       	add	r22, r22
    1a18:	77 1f       	adc	r23, r23
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	91 50       	subi	r25, 0x01	; 1
    1a1e:	50 40       	sbci	r21, 0x00	; 0
    1a20:	c1 f7       	brne	.-16     	; 0x1a12 <ldexp+0x16>
    1a22:	9e 3f       	cpi	r25, 0xFE	; 254
    1a24:	51 05       	cpc	r21, r1
    1a26:	44 f7       	brge	.-48     	; 0x19f8 <inverse+0xe>
    1a28:	88 0f       	add	r24, r24
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	97 f9       	bld	r25, 7
    1a32:	08 95       	ret
    1a34:	5f 3f       	cpi	r21, 0xFF	; 255
    1a36:	ac f0       	brlt	.+42     	; 0x1a62 <ldexp+0x66>
    1a38:	98 3e       	cpi	r25, 0xE8	; 232
    1a3a:	9c f0       	brlt	.+38     	; 0x1a62 <ldexp+0x66>
    1a3c:	bb 27       	eor	r27, r27
    1a3e:	86 95       	lsr	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	b7 95       	ror	r27
    1a46:	08 f4       	brcc	.+2      	; 0x1a4a <ldexp+0x4e>
    1a48:	b1 60       	ori	r27, 0x01	; 1
    1a4a:	93 95       	inc	r25
    1a4c:	c1 f7       	brne	.-16     	; 0x1a3e <ldexp+0x42>
    1a4e:	bb 0f       	add	r27, r27
    1a50:	58 f7       	brcc	.-42     	; 0x1a28 <ldexp+0x2c>
    1a52:	11 f4       	brne	.+4      	; 0x1a58 <ldexp+0x5c>
    1a54:	60 ff       	sbrs	r22, 0
    1a56:	e8 cf       	rjmp	.-48     	; 0x1a28 <ldexp+0x2c>
    1a58:	6f 5f       	subi	r22, 0xFF	; 255
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	e3 cf       	rjmp	.-58     	; 0x1a28 <ldexp+0x2c>
    1a62:	65 ce       	rjmp	.-822    	; 0x172e <__fp_szero>

00001a64 <modf>:
    1a64:	fa 01       	movw	r30, r20
    1a66:	dc 01       	movw	r26, r24
    1a68:	aa 0f       	add	r26, r26
    1a6a:	bb 1f       	adc	r27, r27
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	ac 01       	movw	r20, r24
    1a70:	bf 57       	subi	r27, 0x7F	; 127
    1a72:	28 f4       	brcc	.+10     	; 0x1a7e <modf+0x1a>
    1a74:	22 27       	eor	r18, r18
    1a76:	33 27       	eor	r19, r19
    1a78:	44 27       	eor	r20, r20
    1a7a:	50 78       	andi	r21, 0x80	; 128
    1a7c:	1f c0       	rjmp	.+62     	; 0x1abc <modf+0x58>
    1a7e:	b7 51       	subi	r27, 0x17	; 23
    1a80:	88 f4       	brcc	.+34     	; 0x1aa4 <modf+0x40>
    1a82:	ab 2f       	mov	r26, r27
    1a84:	00 24       	eor	r0, r0
    1a86:	46 95       	lsr	r20
    1a88:	37 95       	ror	r19
    1a8a:	27 95       	ror	r18
    1a8c:	01 1c       	adc	r0, r1
    1a8e:	a3 95       	inc	r26
    1a90:	d2 f3       	brmi	.-12     	; 0x1a86 <modf+0x22>
    1a92:	00 20       	and	r0, r0
    1a94:	69 f0       	breq	.+26     	; 0x1ab0 <modf+0x4c>
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	44 1f       	adc	r20, r20
    1a9c:	b3 95       	inc	r27
    1a9e:	da f3       	brmi	.-10     	; 0x1a96 <modf+0x32>
    1aa0:	0d d0       	rcall	.+26     	; 0x1abc <modf+0x58>
    1aa2:	81 cc       	rjmp	.-1790   	; 0x13a6 <__subsf3>
    1aa4:	61 30       	cpi	r22, 0x01	; 1
    1aa6:	71 05       	cpc	r23, r1
    1aa8:	a0 e8       	ldi	r26, 0x80	; 128
    1aaa:	8a 07       	cpc	r24, r26
    1aac:	b9 46       	sbci	r27, 0x69	; 105
    1aae:	30 f4       	brcc	.+12     	; 0x1abc <modf+0x58>
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	66 27       	eor	r22, r22
    1ab6:	77 27       	eor	r23, r23
    1ab8:	88 27       	eor	r24, r24
    1aba:	90 78       	andi	r25, 0x80	; 128
    1abc:	30 96       	adiw	r30, 0x00	; 0
    1abe:	21 f0       	breq	.+8      	; 0x1ac8 <modf+0x64>
    1ac0:	20 83       	st	Z, r18
    1ac2:	31 83       	std	Z+1, r19	; 0x01
    1ac4:	42 83       	std	Z+2, r20	; 0x02
    1ac6:	53 83       	std	Z+3, r21	; 0x03
    1ac8:	08 95       	ret

00001aca <__udivmodsi4>:
    1aca:	a1 e2       	ldi	r26, 0x21	; 33
    1acc:	1a 2e       	mov	r1, r26
    1ace:	aa 1b       	sub	r26, r26
    1ad0:	bb 1b       	sub	r27, r27
    1ad2:	fd 01       	movw	r30, r26
    1ad4:	0d c0       	rjmp	.+26     	; 0x1af0 <__udivmodsi4_ep>

00001ad6 <__udivmodsi4_loop>:
    1ad6:	aa 1f       	adc	r26, r26
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	ee 1f       	adc	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	a2 17       	cp	r26, r18
    1ae0:	b3 07       	cpc	r27, r19
    1ae2:	e4 07       	cpc	r30, r20
    1ae4:	f5 07       	cpc	r31, r21
    1ae6:	20 f0       	brcs	.+8      	; 0x1af0 <__udivmodsi4_ep>
    1ae8:	a2 1b       	sub	r26, r18
    1aea:	b3 0b       	sbc	r27, r19
    1aec:	e4 0b       	sbc	r30, r20
    1aee:	f5 0b       	sbc	r31, r21

00001af0 <__udivmodsi4_ep>:
    1af0:	66 1f       	adc	r22, r22
    1af2:	77 1f       	adc	r23, r23
    1af4:	88 1f       	adc	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	1a 94       	dec	r1
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <__udivmodsi4_loop>
    1afc:	60 95       	com	r22
    1afe:	70 95       	com	r23
    1b00:	80 95       	com	r24
    1b02:	90 95       	com	r25
    1b04:	9b 01       	movw	r18, r22
    1b06:	ac 01       	movw	r20, r24
    1b08:	bd 01       	movw	r22, r26
    1b0a:	cf 01       	movw	r24, r30
    1b0c:	08 95       	ret

00001b0e <__ashldi3>:
    1b0e:	0f 93       	push	r16
    1b10:	08 30       	cpi	r16, 0x08	; 8
    1b12:	90 f0       	brcs	.+36     	; 0x1b38 <__ashldi3+0x2a>
    1b14:	98 2f       	mov	r25, r24
    1b16:	87 2f       	mov	r24, r23
    1b18:	76 2f       	mov	r23, r22
    1b1a:	65 2f       	mov	r22, r21
    1b1c:	54 2f       	mov	r21, r20
    1b1e:	43 2f       	mov	r20, r19
    1b20:	32 2f       	mov	r19, r18
    1b22:	22 27       	eor	r18, r18
    1b24:	08 50       	subi	r16, 0x08	; 8
    1b26:	f4 cf       	rjmp	.-24     	; 0x1b10 <__ashldi3+0x2>
    1b28:	22 0f       	add	r18, r18
    1b2a:	33 1f       	adc	r19, r19
    1b2c:	44 1f       	adc	r20, r20
    1b2e:	55 1f       	adc	r21, r21
    1b30:	66 1f       	adc	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 95       	dec	r16
    1b3a:	b2 f7       	brpl	.-20     	; 0x1b28 <__ashldi3+0x1a>
    1b3c:	0f 91       	pop	r16
    1b3e:	08 95       	ret

00001b40 <__subdi3>:
    1b40:	2a 19       	sub	r18, r10
    1b42:	3b 09       	sbc	r19, r11
    1b44:	4c 09       	sbc	r20, r12
    1b46:	5d 09       	sbc	r21, r13
    1b48:	6e 09       	sbc	r22, r14
    1b4a:	7f 09       	sbc	r23, r15
    1b4c:	80 0b       	sbc	r24, r16
    1b4e:	91 0b       	sbc	r25, r17
    1b50:	08 95       	ret

00001b52 <fdevopen>:
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	31 f4       	brne	.+12     	; 0x1b6a <fdevopen+0x18>
    1b5e:	61 15       	cp	r22, r1
    1b60:	71 05       	cpc	r23, r1
    1b62:	19 f4       	brne	.+6      	; 0x1b6a <fdevopen+0x18>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	39 c0       	rjmp	.+114    	; 0x1bdc <fdevopen+0x8a>
    1b6a:	8b 01       	movw	r16, r22
    1b6c:	ec 01       	movw	r28, r24
    1b6e:	6e e0       	ldi	r22, 0x0E	; 14
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	71 d2       	rcall	.+1250   	; 0x205a <calloc>
    1b78:	fc 01       	movw	r30, r24
    1b7a:	89 2b       	or	r24, r25
    1b7c:	99 f3       	breq	.-26     	; 0x1b64 <fdevopen+0x12>
    1b7e:	80 e8       	ldi	r24, 0x80	; 128
    1b80:	83 83       	std	Z+3, r24	; 0x03
    1b82:	01 15       	cp	r16, r1
    1b84:	11 05       	cpc	r17, r1
    1b86:	71 f0       	breq	.+28     	; 0x1ba4 <fdevopen+0x52>
    1b88:	02 87       	std	Z+10, r16	; 0x0a
    1b8a:	13 87       	std	Z+11, r17	; 0x0b
    1b8c:	81 e8       	ldi	r24, 0x81	; 129
    1b8e:	83 83       	std	Z+3, r24	; 0x03
    1b90:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <__iob>
    1b94:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <__iob+0x1>
    1b98:	89 2b       	or	r24, r25
    1b9a:	21 f4       	brne	.+8      	; 0x1ba4 <fdevopen+0x52>
    1b9c:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <__iob>
    1ba0:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <__iob+0x1>
    1ba4:	20 97       	sbiw	r28, 0x00	; 0
    1ba6:	c9 f0       	breq	.+50     	; 0x1bda <fdevopen+0x88>
    1ba8:	c0 87       	std	Z+8, r28	; 0x08
    1baa:	d1 87       	std	Z+9, r29	; 0x09
    1bac:	83 81       	ldd	r24, Z+3	; 0x03
    1bae:	82 60       	ori	r24, 0x02	; 2
    1bb0:	83 83       	std	Z+3, r24	; 0x03
    1bb2:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <__iob+0x2>
    1bb6:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <__iob+0x3>
    1bba:	89 2b       	or	r24, r25
    1bbc:	71 f4       	brne	.+28     	; 0x1bda <fdevopen+0x88>
    1bbe:	e0 93 bf 20 	sts	0x20BF, r30	; 0x8020bf <__iob+0x2>
    1bc2:	f0 93 c0 20 	sts	0x20C0, r31	; 0x8020c0 <__iob+0x3>
    1bc6:	80 91 c1 20 	lds	r24, 0x20C1	; 0x8020c1 <__iob+0x4>
    1bca:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <__iob+0x5>
    1bce:	89 2b       	or	r24, r25
    1bd0:	21 f4       	brne	.+8      	; 0x1bda <fdevopen+0x88>
    1bd2:	e0 93 c1 20 	sts	0x20C1, r30	; 0x8020c1 <__iob+0x4>
    1bd6:	f0 93 c2 20 	sts	0x20C2, r31	; 0x8020c2 <__iob+0x5>
    1bda:	cf 01       	movw	r24, r30
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret

00001be6 <printf>:
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	ae 01       	movw	r20, r28
    1bf0:	4a 5f       	subi	r20, 0xFA	; 250
    1bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf4:	fa 01       	movw	r30, r20
    1bf6:	61 91       	ld	r22, Z+
    1bf8:	71 91       	ld	r23, Z+
    1bfa:	af 01       	movw	r20, r30
    1bfc:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <__iob+0x2>
    1c00:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <__iob+0x3>
    1c04:	33 d0       	rcall	.+102    	; 0x1c6c <vfprintf>
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	08 95       	ret

00001c0c <puts>:
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <__iob+0x2>
    1c18:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <__iob+0x3>
    1c1c:	23 81       	ldd	r18, Z+3	; 0x03
    1c1e:	21 ff       	sbrs	r18, 1
    1c20:	1b c0       	rjmp	.+54     	; 0x1c58 <puts+0x4c>
    1c22:	8c 01       	movw	r16, r24
    1c24:	d0 e0       	ldi	r29, 0x00	; 0
    1c26:	c0 e0       	ldi	r28, 0x00	; 0
    1c28:	f8 01       	movw	r30, r16
    1c2a:	81 91       	ld	r24, Z+
    1c2c:	8f 01       	movw	r16, r30
    1c2e:	60 91 bf 20 	lds	r22, 0x20BF	; 0x8020bf <__iob+0x2>
    1c32:	70 91 c0 20 	lds	r23, 0x20C0	; 0x8020c0 <__iob+0x3>
    1c36:	db 01       	movw	r26, r22
    1c38:	18 96       	adiw	r26, 0x08	; 8
    1c3a:	ed 91       	ld	r30, X+
    1c3c:	fc 91       	ld	r31, X
    1c3e:	19 97       	sbiw	r26, 0x09	; 9
    1c40:	88 23       	and	r24, r24
    1c42:	31 f0       	breq	.+12     	; 0x1c50 <puts+0x44>
    1c44:	19 95       	eicall
    1c46:	89 2b       	or	r24, r25
    1c48:	79 f3       	breq	.-34     	; 0x1c28 <puts+0x1c>
    1c4a:	df ef       	ldi	r29, 0xFF	; 255
    1c4c:	cf ef       	ldi	r28, 0xFF	; 255
    1c4e:	ec cf       	rjmp	.-40     	; 0x1c28 <puts+0x1c>
    1c50:	8a e0       	ldi	r24, 0x0A	; 10
    1c52:	19 95       	eicall
    1c54:	89 2b       	or	r24, r25
    1c56:	19 f0       	breq	.+6      	; 0x1c5e <puts+0x52>
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	9f ef       	ldi	r25, 0xFF	; 255
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <puts+0x56>
    1c5e:	8d 2f       	mov	r24, r29
    1c60:	9c 2f       	mov	r25, r28
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	08 95       	ret

00001c6c <vfprintf>:
    1c6c:	2f 92       	push	r2
    1c6e:	3f 92       	push	r3
    1c70:	4f 92       	push	r4
    1c72:	5f 92       	push	r5
    1c74:	6f 92       	push	r6
    1c76:	7f 92       	push	r7
    1c78:	8f 92       	push	r8
    1c7a:	9f 92       	push	r9
    1c7c:	af 92       	push	r10
    1c7e:	bf 92       	push	r11
    1c80:	cf 92       	push	r12
    1c82:	df 92       	push	r13
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	2b 97       	sbiw	r28, 0x0b	; 11
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	6c 01       	movw	r12, r24
    1c9c:	7b 01       	movw	r14, r22
    1c9e:	8a 01       	movw	r16, r20
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	16 82       	std	Z+6, r1	; 0x06
    1ca4:	17 82       	std	Z+7, r1	; 0x07
    1ca6:	83 81       	ldd	r24, Z+3	; 0x03
    1ca8:	81 ff       	sbrs	r24, 1
    1caa:	bf c1       	rjmp	.+894    	; 0x202a <vfprintf+0x3be>
    1cac:	ce 01       	movw	r24, r28
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	3c 01       	movw	r6, r24
    1cb2:	f6 01       	movw	r30, r12
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	93 fd       	sbrc	r25, 3
    1cba:	85 91       	lpm	r24, Z+
    1cbc:	93 ff       	sbrs	r25, 3
    1cbe:	81 91       	ld	r24, Z+
    1cc0:	7f 01       	movw	r14, r30
    1cc2:	88 23       	and	r24, r24
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <vfprintf+0x5c>
    1cc6:	ad c1       	rjmp	.+858    	; 0x2022 <vfprintf+0x3b6>
    1cc8:	85 32       	cpi	r24, 0x25	; 37
    1cca:	39 f4       	brne	.+14     	; 0x1cda <vfprintf+0x6e>
    1ccc:	93 fd       	sbrc	r25, 3
    1cce:	85 91       	lpm	r24, Z+
    1cd0:	93 ff       	sbrs	r25, 3
    1cd2:	81 91       	ld	r24, Z+
    1cd4:	7f 01       	movw	r14, r30
    1cd6:	85 32       	cpi	r24, 0x25	; 37
    1cd8:	21 f4       	brne	.+8      	; 0x1ce2 <vfprintf+0x76>
    1cda:	b6 01       	movw	r22, r12
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	15 d3       	rcall	.+1578   	; 0x230a <fputc>
    1ce0:	e8 cf       	rjmp	.-48     	; 0x1cb2 <vfprintf+0x46>
    1ce2:	91 2c       	mov	r9, r1
    1ce4:	21 2c       	mov	r2, r1
    1ce6:	31 2c       	mov	r3, r1
    1ce8:	ff e1       	ldi	r31, 0x1F	; 31
    1cea:	f3 15       	cp	r31, r3
    1cec:	d8 f0       	brcs	.+54     	; 0x1d24 <vfprintf+0xb8>
    1cee:	8b 32       	cpi	r24, 0x2B	; 43
    1cf0:	79 f0       	breq	.+30     	; 0x1d10 <vfprintf+0xa4>
    1cf2:	38 f4       	brcc	.+14     	; 0x1d02 <vfprintf+0x96>
    1cf4:	80 32       	cpi	r24, 0x20	; 32
    1cf6:	79 f0       	breq	.+30     	; 0x1d16 <vfprintf+0xaa>
    1cf8:	83 32       	cpi	r24, 0x23	; 35
    1cfa:	a1 f4       	brne	.+40     	; 0x1d24 <vfprintf+0xb8>
    1cfc:	23 2d       	mov	r18, r3
    1cfe:	20 61       	ori	r18, 0x10	; 16
    1d00:	1d c0       	rjmp	.+58     	; 0x1d3c <vfprintf+0xd0>
    1d02:	8d 32       	cpi	r24, 0x2D	; 45
    1d04:	61 f0       	breq	.+24     	; 0x1d1e <vfprintf+0xb2>
    1d06:	80 33       	cpi	r24, 0x30	; 48
    1d08:	69 f4       	brne	.+26     	; 0x1d24 <vfprintf+0xb8>
    1d0a:	23 2d       	mov	r18, r3
    1d0c:	21 60       	ori	r18, 0x01	; 1
    1d0e:	16 c0       	rjmp	.+44     	; 0x1d3c <vfprintf+0xd0>
    1d10:	83 2d       	mov	r24, r3
    1d12:	82 60       	ori	r24, 0x02	; 2
    1d14:	38 2e       	mov	r3, r24
    1d16:	e3 2d       	mov	r30, r3
    1d18:	e4 60       	ori	r30, 0x04	; 4
    1d1a:	3e 2e       	mov	r3, r30
    1d1c:	2a c0       	rjmp	.+84     	; 0x1d72 <vfprintf+0x106>
    1d1e:	f3 2d       	mov	r31, r3
    1d20:	f8 60       	ori	r31, 0x08	; 8
    1d22:	1d c0       	rjmp	.+58     	; 0x1d5e <vfprintf+0xf2>
    1d24:	37 fc       	sbrc	r3, 7
    1d26:	2d c0       	rjmp	.+90     	; 0x1d82 <vfprintf+0x116>
    1d28:	20 ed       	ldi	r18, 0xD0	; 208
    1d2a:	28 0f       	add	r18, r24
    1d2c:	2a 30       	cpi	r18, 0x0A	; 10
    1d2e:	40 f0       	brcs	.+16     	; 0x1d40 <vfprintf+0xd4>
    1d30:	8e 32       	cpi	r24, 0x2E	; 46
    1d32:	b9 f4       	brne	.+46     	; 0x1d62 <vfprintf+0xf6>
    1d34:	36 fc       	sbrc	r3, 6
    1d36:	75 c1       	rjmp	.+746    	; 0x2022 <vfprintf+0x3b6>
    1d38:	23 2d       	mov	r18, r3
    1d3a:	20 64       	ori	r18, 0x40	; 64
    1d3c:	32 2e       	mov	r3, r18
    1d3e:	19 c0       	rjmp	.+50     	; 0x1d72 <vfprintf+0x106>
    1d40:	36 fe       	sbrs	r3, 6
    1d42:	06 c0       	rjmp	.+12     	; 0x1d50 <vfprintf+0xe4>
    1d44:	8a e0       	ldi	r24, 0x0A	; 10
    1d46:	98 9e       	mul	r9, r24
    1d48:	20 0d       	add	r18, r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	92 2e       	mov	r9, r18
    1d4e:	11 c0       	rjmp	.+34     	; 0x1d72 <vfprintf+0x106>
    1d50:	ea e0       	ldi	r30, 0x0A	; 10
    1d52:	2e 9e       	mul	r2, r30
    1d54:	20 0d       	add	r18, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	22 2e       	mov	r2, r18
    1d5a:	f3 2d       	mov	r31, r3
    1d5c:	f0 62       	ori	r31, 0x20	; 32
    1d5e:	3f 2e       	mov	r3, r31
    1d60:	08 c0       	rjmp	.+16     	; 0x1d72 <vfprintf+0x106>
    1d62:	8c 36       	cpi	r24, 0x6C	; 108
    1d64:	21 f4       	brne	.+8      	; 0x1d6e <vfprintf+0x102>
    1d66:	83 2d       	mov	r24, r3
    1d68:	80 68       	ori	r24, 0x80	; 128
    1d6a:	38 2e       	mov	r3, r24
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <vfprintf+0x106>
    1d6e:	88 36       	cpi	r24, 0x68	; 104
    1d70:	41 f4       	brne	.+16     	; 0x1d82 <vfprintf+0x116>
    1d72:	f7 01       	movw	r30, r14
    1d74:	93 fd       	sbrc	r25, 3
    1d76:	85 91       	lpm	r24, Z+
    1d78:	93 ff       	sbrs	r25, 3
    1d7a:	81 91       	ld	r24, Z+
    1d7c:	7f 01       	movw	r14, r30
    1d7e:	81 11       	cpse	r24, r1
    1d80:	b3 cf       	rjmp	.-154    	; 0x1ce8 <vfprintf+0x7c>
    1d82:	98 2f       	mov	r25, r24
    1d84:	9f 7d       	andi	r25, 0xDF	; 223
    1d86:	95 54       	subi	r25, 0x45	; 69
    1d88:	93 30       	cpi	r25, 0x03	; 3
    1d8a:	28 f4       	brcc	.+10     	; 0x1d96 <vfprintf+0x12a>
    1d8c:	0c 5f       	subi	r16, 0xFC	; 252
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	9f e3       	ldi	r25, 0x3F	; 63
    1d92:	99 83       	std	Y+1, r25	; 0x01
    1d94:	0d c0       	rjmp	.+26     	; 0x1db0 <vfprintf+0x144>
    1d96:	83 36       	cpi	r24, 0x63	; 99
    1d98:	31 f0       	breq	.+12     	; 0x1da6 <vfprintf+0x13a>
    1d9a:	83 37       	cpi	r24, 0x73	; 115
    1d9c:	71 f0       	breq	.+28     	; 0x1dba <vfprintf+0x14e>
    1d9e:	83 35       	cpi	r24, 0x53	; 83
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <vfprintf+0x138>
    1da2:	55 c0       	rjmp	.+170    	; 0x1e4e <vfprintf+0x1e2>
    1da4:	20 c0       	rjmp	.+64     	; 0x1de6 <vfprintf+0x17a>
    1da6:	f8 01       	movw	r30, r16
    1da8:	80 81       	ld	r24, Z
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	0e 5f       	subi	r16, 0xFE	; 254
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	88 24       	eor	r8, r8
    1db2:	83 94       	inc	r8
    1db4:	91 2c       	mov	r9, r1
    1db6:	53 01       	movw	r10, r6
    1db8:	12 c0       	rjmp	.+36     	; 0x1dde <vfprintf+0x172>
    1dba:	28 01       	movw	r4, r16
    1dbc:	f2 e0       	ldi	r31, 0x02	; 2
    1dbe:	4f 0e       	add	r4, r31
    1dc0:	51 1c       	adc	r5, r1
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	a0 80       	ld	r10, Z
    1dc6:	b1 80       	ldd	r11, Z+1	; 0x01
    1dc8:	36 fe       	sbrs	r3, 6
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <vfprintf+0x166>
    1dcc:	69 2d       	mov	r22, r9
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0x16a>
    1dd2:	6f ef       	ldi	r22, 0xFF	; 255
    1dd4:	7f ef       	ldi	r23, 0xFF	; 255
    1dd6:	c5 01       	movw	r24, r10
    1dd8:	8d d2       	rcall	.+1306   	; 0x22f4 <strnlen>
    1dda:	4c 01       	movw	r8, r24
    1ddc:	82 01       	movw	r16, r4
    1dde:	f3 2d       	mov	r31, r3
    1de0:	ff 77       	andi	r31, 0x7F	; 127
    1de2:	3f 2e       	mov	r3, r31
    1de4:	15 c0       	rjmp	.+42     	; 0x1e10 <vfprintf+0x1a4>
    1de6:	28 01       	movw	r4, r16
    1de8:	22 e0       	ldi	r18, 0x02	; 2
    1dea:	42 0e       	add	r4, r18
    1dec:	51 1c       	adc	r5, r1
    1dee:	f8 01       	movw	r30, r16
    1df0:	a0 80       	ld	r10, Z
    1df2:	b1 80       	ldd	r11, Z+1	; 0x01
    1df4:	36 fe       	sbrs	r3, 6
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <vfprintf+0x192>
    1df8:	69 2d       	mov	r22, r9
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <vfprintf+0x196>
    1dfe:	6f ef       	ldi	r22, 0xFF	; 255
    1e00:	7f ef       	ldi	r23, 0xFF	; 255
    1e02:	c5 01       	movw	r24, r10
    1e04:	65 d2       	rcall	.+1226   	; 0x22d0 <strnlen_P>
    1e06:	4c 01       	movw	r8, r24
    1e08:	f3 2d       	mov	r31, r3
    1e0a:	f0 68       	ori	r31, 0x80	; 128
    1e0c:	3f 2e       	mov	r3, r31
    1e0e:	82 01       	movw	r16, r4
    1e10:	33 fc       	sbrc	r3, 3
    1e12:	19 c0       	rjmp	.+50     	; 0x1e46 <vfprintf+0x1da>
    1e14:	82 2d       	mov	r24, r2
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	88 16       	cp	r8, r24
    1e1a:	99 06       	cpc	r9, r25
    1e1c:	a0 f4       	brcc	.+40     	; 0x1e46 <vfprintf+0x1da>
    1e1e:	b6 01       	movw	r22, r12
    1e20:	80 e2       	ldi	r24, 0x20	; 32
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	72 d2       	rcall	.+1252   	; 0x230a <fputc>
    1e26:	2a 94       	dec	r2
    1e28:	f5 cf       	rjmp	.-22     	; 0x1e14 <vfprintf+0x1a8>
    1e2a:	f5 01       	movw	r30, r10
    1e2c:	37 fc       	sbrc	r3, 7
    1e2e:	85 91       	lpm	r24, Z+
    1e30:	37 fe       	sbrs	r3, 7
    1e32:	81 91       	ld	r24, Z+
    1e34:	5f 01       	movw	r10, r30
    1e36:	b6 01       	movw	r22, r12
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	67 d2       	rcall	.+1230   	; 0x230a <fputc>
    1e3c:	21 10       	cpse	r2, r1
    1e3e:	2a 94       	dec	r2
    1e40:	21 e0       	ldi	r18, 0x01	; 1
    1e42:	82 1a       	sub	r8, r18
    1e44:	91 08       	sbc	r9, r1
    1e46:	81 14       	cp	r8, r1
    1e48:	91 04       	cpc	r9, r1
    1e4a:	79 f7       	brne	.-34     	; 0x1e2a <vfprintf+0x1be>
    1e4c:	e1 c0       	rjmp	.+450    	; 0x2010 <vfprintf+0x3a4>
    1e4e:	84 36       	cpi	r24, 0x64	; 100
    1e50:	11 f0       	breq	.+4      	; 0x1e56 <vfprintf+0x1ea>
    1e52:	89 36       	cpi	r24, 0x69	; 105
    1e54:	39 f5       	brne	.+78     	; 0x1ea4 <vfprintf+0x238>
    1e56:	f8 01       	movw	r30, r16
    1e58:	37 fe       	sbrs	r3, 7
    1e5a:	07 c0       	rjmp	.+14     	; 0x1e6a <vfprintf+0x1fe>
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	0c 5f       	subi	r16, 0xFC	; 252
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	08 c0       	rjmp	.+16     	; 0x1e7a <vfprintf+0x20e>
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	07 2e       	mov	r0, r23
    1e70:	00 0c       	add	r0, r0
    1e72:	88 0b       	sbc	r24, r24
    1e74:	99 0b       	sbc	r25, r25
    1e76:	0e 5f       	subi	r16, 0xFE	; 254
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	f3 2d       	mov	r31, r3
    1e7c:	ff 76       	andi	r31, 0x6F	; 111
    1e7e:	3f 2e       	mov	r3, r31
    1e80:	97 ff       	sbrs	r25, 7
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <vfprintf+0x22a>
    1e84:	90 95       	com	r25
    1e86:	80 95       	com	r24
    1e88:	70 95       	com	r23
    1e8a:	61 95       	neg	r22
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	f0 68       	ori	r31, 0x80	; 128
    1e94:	3f 2e       	mov	r3, r31
    1e96:	2a e0       	ldi	r18, 0x0A	; 10
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	a3 01       	movw	r20, r6
    1e9c:	72 d2       	rcall	.+1252   	; 0x2382 <__ultoa_invert>
    1e9e:	88 2e       	mov	r8, r24
    1ea0:	86 18       	sub	r8, r6
    1ea2:	44 c0       	rjmp	.+136    	; 0x1f2c <vfprintf+0x2c0>
    1ea4:	85 37       	cpi	r24, 0x75	; 117
    1ea6:	31 f4       	brne	.+12     	; 0x1eb4 <vfprintf+0x248>
    1ea8:	23 2d       	mov	r18, r3
    1eaa:	2f 7e       	andi	r18, 0xEF	; 239
    1eac:	b2 2e       	mov	r11, r18
    1eae:	2a e0       	ldi	r18, 0x0A	; 10
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	25 c0       	rjmp	.+74     	; 0x1efe <vfprintf+0x292>
    1eb4:	93 2d       	mov	r25, r3
    1eb6:	99 7f       	andi	r25, 0xF9	; 249
    1eb8:	b9 2e       	mov	r11, r25
    1eba:	8f 36       	cpi	r24, 0x6F	; 111
    1ebc:	c1 f0       	breq	.+48     	; 0x1eee <vfprintf+0x282>
    1ebe:	18 f4       	brcc	.+6      	; 0x1ec6 <vfprintf+0x25a>
    1ec0:	88 35       	cpi	r24, 0x58	; 88
    1ec2:	79 f0       	breq	.+30     	; 0x1ee2 <vfprintf+0x276>
    1ec4:	ae c0       	rjmp	.+348    	; 0x2022 <vfprintf+0x3b6>
    1ec6:	80 37       	cpi	r24, 0x70	; 112
    1ec8:	19 f0       	breq	.+6      	; 0x1ed0 <vfprintf+0x264>
    1eca:	88 37       	cpi	r24, 0x78	; 120
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <vfprintf+0x26a>
    1ece:	a9 c0       	rjmp	.+338    	; 0x2022 <vfprintf+0x3b6>
    1ed0:	e9 2f       	mov	r30, r25
    1ed2:	e0 61       	ori	r30, 0x10	; 16
    1ed4:	be 2e       	mov	r11, r30
    1ed6:	b4 fe       	sbrs	r11, 4
    1ed8:	0d c0       	rjmp	.+26     	; 0x1ef4 <vfprintf+0x288>
    1eda:	fb 2d       	mov	r31, r11
    1edc:	f4 60       	ori	r31, 0x04	; 4
    1ede:	bf 2e       	mov	r11, r31
    1ee0:	09 c0       	rjmp	.+18     	; 0x1ef4 <vfprintf+0x288>
    1ee2:	34 fe       	sbrs	r3, 4
    1ee4:	0a c0       	rjmp	.+20     	; 0x1efa <vfprintf+0x28e>
    1ee6:	29 2f       	mov	r18, r25
    1ee8:	26 60       	ori	r18, 0x06	; 6
    1eea:	b2 2e       	mov	r11, r18
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <vfprintf+0x28e>
    1eee:	28 e0       	ldi	r18, 0x08	; 8
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	05 c0       	rjmp	.+10     	; 0x1efe <vfprintf+0x292>
    1ef4:	20 e1       	ldi	r18, 0x10	; 16
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <vfprintf+0x292>
    1efa:	20 e1       	ldi	r18, 0x10	; 16
    1efc:	32 e0       	ldi	r19, 0x02	; 2
    1efe:	f8 01       	movw	r30, r16
    1f00:	b7 fe       	sbrs	r11, 7
    1f02:	07 c0       	rjmp	.+14     	; 0x1f12 <vfprintf+0x2a6>
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	0c 5f       	subi	r16, 0xFC	; 252
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	06 c0       	rjmp	.+12     	; 0x1f1e <vfprintf+0x2b2>
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 5f       	subi	r16, 0xFE	; 254
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	a3 01       	movw	r20, r6
    1f20:	30 d2       	rcall	.+1120   	; 0x2382 <__ultoa_invert>
    1f22:	88 2e       	mov	r8, r24
    1f24:	86 18       	sub	r8, r6
    1f26:	fb 2d       	mov	r31, r11
    1f28:	ff 77       	andi	r31, 0x7F	; 127
    1f2a:	3f 2e       	mov	r3, r31
    1f2c:	36 fe       	sbrs	r3, 6
    1f2e:	0d c0       	rjmp	.+26     	; 0x1f4a <vfprintf+0x2de>
    1f30:	23 2d       	mov	r18, r3
    1f32:	2e 7f       	andi	r18, 0xFE	; 254
    1f34:	a2 2e       	mov	r10, r18
    1f36:	89 14       	cp	r8, r9
    1f38:	58 f4       	brcc	.+22     	; 0x1f50 <vfprintf+0x2e4>
    1f3a:	34 fe       	sbrs	r3, 4
    1f3c:	0b c0       	rjmp	.+22     	; 0x1f54 <vfprintf+0x2e8>
    1f3e:	32 fc       	sbrc	r3, 2
    1f40:	09 c0       	rjmp	.+18     	; 0x1f54 <vfprintf+0x2e8>
    1f42:	83 2d       	mov	r24, r3
    1f44:	8e 7e       	andi	r24, 0xEE	; 238
    1f46:	a8 2e       	mov	r10, r24
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <vfprintf+0x2e8>
    1f4a:	b8 2c       	mov	r11, r8
    1f4c:	a3 2c       	mov	r10, r3
    1f4e:	03 c0       	rjmp	.+6      	; 0x1f56 <vfprintf+0x2ea>
    1f50:	b8 2c       	mov	r11, r8
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <vfprintf+0x2ea>
    1f54:	b9 2c       	mov	r11, r9
    1f56:	a4 fe       	sbrs	r10, 4
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <vfprintf+0x30c>
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e8 0d       	add	r30, r8
    1f5e:	f1 1d       	adc	r31, r1
    1f60:	80 81       	ld	r24, Z
    1f62:	80 33       	cpi	r24, 0x30	; 48
    1f64:	21 f4       	brne	.+8      	; 0x1f6e <vfprintf+0x302>
    1f66:	9a 2d       	mov	r25, r10
    1f68:	99 7e       	andi	r25, 0xE9	; 233
    1f6a:	a9 2e       	mov	r10, r25
    1f6c:	09 c0       	rjmp	.+18     	; 0x1f80 <vfprintf+0x314>
    1f6e:	a2 fe       	sbrs	r10, 2
    1f70:	06 c0       	rjmp	.+12     	; 0x1f7e <vfprintf+0x312>
    1f72:	b3 94       	inc	r11
    1f74:	b3 94       	inc	r11
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <vfprintf+0x314>
    1f78:	8a 2d       	mov	r24, r10
    1f7a:	86 78       	andi	r24, 0x86	; 134
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <vfprintf+0x314>
    1f7e:	b3 94       	inc	r11
    1f80:	a3 fc       	sbrc	r10, 3
    1f82:	10 c0       	rjmp	.+32     	; 0x1fa4 <vfprintf+0x338>
    1f84:	a0 fe       	sbrs	r10, 0
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <vfprintf+0x328>
    1f88:	b2 14       	cp	r11, r2
    1f8a:	80 f4       	brcc	.+32     	; 0x1fac <vfprintf+0x340>
    1f8c:	28 0c       	add	r2, r8
    1f8e:	92 2c       	mov	r9, r2
    1f90:	9b 18       	sub	r9, r11
    1f92:	0d c0       	rjmp	.+26     	; 0x1fae <vfprintf+0x342>
    1f94:	b2 14       	cp	r11, r2
    1f96:	58 f4       	brcc	.+22     	; 0x1fae <vfprintf+0x342>
    1f98:	b6 01       	movw	r22, r12
    1f9a:	80 e2       	ldi	r24, 0x20	; 32
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	b5 d1       	rcall	.+874    	; 0x230a <fputc>
    1fa0:	b3 94       	inc	r11
    1fa2:	f8 cf       	rjmp	.-16     	; 0x1f94 <vfprintf+0x328>
    1fa4:	b2 14       	cp	r11, r2
    1fa6:	18 f4       	brcc	.+6      	; 0x1fae <vfprintf+0x342>
    1fa8:	2b 18       	sub	r2, r11
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <vfprintf+0x344>
    1fac:	98 2c       	mov	r9, r8
    1fae:	21 2c       	mov	r2, r1
    1fb0:	a4 fe       	sbrs	r10, 4
    1fb2:	0f c0       	rjmp	.+30     	; 0x1fd2 <vfprintf+0x366>
    1fb4:	b6 01       	movw	r22, r12
    1fb6:	80 e3       	ldi	r24, 0x30	; 48
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a7 d1       	rcall	.+846    	; 0x230a <fputc>
    1fbc:	a2 fe       	sbrs	r10, 2
    1fbe:	16 c0       	rjmp	.+44     	; 0x1fec <vfprintf+0x380>
    1fc0:	a1 fc       	sbrc	r10, 1
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <vfprintf+0x35e>
    1fc4:	88 e7       	ldi	r24, 0x78	; 120
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <vfprintf+0x362>
    1fca:	88 e5       	ldi	r24, 0x58	; 88
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	b6 01       	movw	r22, r12
    1fd0:	0c c0       	rjmp	.+24     	; 0x1fea <vfprintf+0x37e>
    1fd2:	8a 2d       	mov	r24, r10
    1fd4:	86 78       	andi	r24, 0x86	; 134
    1fd6:	51 f0       	breq	.+20     	; 0x1fec <vfprintf+0x380>
    1fd8:	a1 fe       	sbrs	r10, 1
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <vfprintf+0x374>
    1fdc:	8b e2       	ldi	r24, 0x2B	; 43
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <vfprintf+0x376>
    1fe0:	80 e2       	ldi	r24, 0x20	; 32
    1fe2:	a7 fc       	sbrc	r10, 7
    1fe4:	8d e2       	ldi	r24, 0x2D	; 45
    1fe6:	b6 01       	movw	r22, r12
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	8f d1       	rcall	.+798    	; 0x230a <fputc>
    1fec:	89 14       	cp	r8, r9
    1fee:	30 f4       	brcc	.+12     	; 0x1ffc <vfprintf+0x390>
    1ff0:	b6 01       	movw	r22, r12
    1ff2:	80 e3       	ldi	r24, 0x30	; 48
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	89 d1       	rcall	.+786    	; 0x230a <fputc>
    1ff8:	9a 94       	dec	r9
    1ffa:	f8 cf       	rjmp	.-16     	; 0x1fec <vfprintf+0x380>
    1ffc:	8a 94       	dec	r8
    1ffe:	f3 01       	movw	r30, r6
    2000:	e8 0d       	add	r30, r8
    2002:	f1 1d       	adc	r31, r1
    2004:	80 81       	ld	r24, Z
    2006:	b6 01       	movw	r22, r12
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	7f d1       	rcall	.+766    	; 0x230a <fputc>
    200c:	81 10       	cpse	r8, r1
    200e:	f6 cf       	rjmp	.-20     	; 0x1ffc <vfprintf+0x390>
    2010:	22 20       	and	r2, r2
    2012:	09 f4       	brne	.+2      	; 0x2016 <vfprintf+0x3aa>
    2014:	4e ce       	rjmp	.-868    	; 0x1cb2 <vfprintf+0x46>
    2016:	b6 01       	movw	r22, r12
    2018:	80 e2       	ldi	r24, 0x20	; 32
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	76 d1       	rcall	.+748    	; 0x230a <fputc>
    201e:	2a 94       	dec	r2
    2020:	f7 cf       	rjmp	.-18     	; 0x2010 <vfprintf+0x3a4>
    2022:	f6 01       	movw	r30, r12
    2024:	86 81       	ldd	r24, Z+6	; 0x06
    2026:	97 81       	ldd	r25, Z+7	; 0x07
    2028:	02 c0       	rjmp	.+4      	; 0x202e <vfprintf+0x3c2>
    202a:	8f ef       	ldi	r24, 0xFF	; 255
    202c:	9f ef       	ldi	r25, 0xFF	; 255
    202e:	2b 96       	adiw	r28, 0x0b	; 11
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	df 90       	pop	r13
    2042:	cf 90       	pop	r12
    2044:	bf 90       	pop	r11
    2046:	af 90       	pop	r10
    2048:	9f 90       	pop	r9
    204a:	8f 90       	pop	r8
    204c:	7f 90       	pop	r7
    204e:	6f 90       	pop	r6
    2050:	5f 90       	pop	r5
    2052:	4f 90       	pop	r4
    2054:	3f 90       	pop	r3
    2056:	2f 90       	pop	r2
    2058:	08 95       	ret

0000205a <calloc>:
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	86 9f       	mul	r24, r22
    2064:	80 01       	movw	r16, r0
    2066:	87 9f       	mul	r24, r23
    2068:	10 0d       	add	r17, r0
    206a:	96 9f       	mul	r25, r22
    206c:	10 0d       	add	r17, r0
    206e:	11 24       	eor	r1, r1
    2070:	c8 01       	movw	r24, r16
    2072:	0d d0       	rcall	.+26     	; 0x208e <malloc>
    2074:	ec 01       	movw	r28, r24
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	21 f0       	breq	.+8      	; 0x2082 <calloc+0x28>
    207a:	a8 01       	movw	r20, r16
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	32 d1       	rcall	.+612    	; 0x22e6 <memset>
    2082:	ce 01       	movw	r24, r28
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	08 95       	ret

0000208e <malloc>:
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	91 05       	cpc	r25, r1
    209a:	10 f4       	brcc	.+4      	; 0x20a0 <malloc+0x12>
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <__flp>
    20a4:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <__flp+0x1>
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	a0 e0       	ldi	r26, 0x00	; 0
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	30 97       	sbiw	r30, 0x00	; 0
    20b2:	19 f1       	breq	.+70     	; 0x20fa <malloc+0x6c>
    20b4:	40 81       	ld	r20, Z
    20b6:	51 81       	ldd	r21, Z+1	; 0x01
    20b8:	02 81       	ldd	r16, Z+2	; 0x02
    20ba:	13 81       	ldd	r17, Z+3	; 0x03
    20bc:	48 17       	cp	r20, r24
    20be:	59 07       	cpc	r21, r25
    20c0:	c8 f0       	brcs	.+50     	; 0x20f4 <malloc+0x66>
    20c2:	84 17       	cp	r24, r20
    20c4:	95 07       	cpc	r25, r21
    20c6:	69 f4       	brne	.+26     	; 0x20e2 <malloc+0x54>
    20c8:	10 97       	sbiw	r26, 0x00	; 0
    20ca:	31 f0       	breq	.+12     	; 0x20d8 <malloc+0x4a>
    20cc:	12 96       	adiw	r26, 0x02	; 2
    20ce:	0c 93       	st	X, r16
    20d0:	12 97       	sbiw	r26, 0x02	; 2
    20d2:	13 96       	adiw	r26, 0x03	; 3
    20d4:	1c 93       	st	X, r17
    20d6:	27 c0       	rjmp	.+78     	; 0x2126 <malloc+0x98>
    20d8:	00 93 c5 20 	sts	0x20C5, r16	; 0x8020c5 <__flp>
    20dc:	10 93 c6 20 	sts	0x20C6, r17	; 0x8020c6 <__flp+0x1>
    20e0:	22 c0       	rjmp	.+68     	; 0x2126 <malloc+0x98>
    20e2:	21 15       	cp	r18, r1
    20e4:	31 05       	cpc	r19, r1
    20e6:	19 f0       	breq	.+6      	; 0x20ee <malloc+0x60>
    20e8:	42 17       	cp	r20, r18
    20ea:	53 07       	cpc	r21, r19
    20ec:	18 f4       	brcc	.+6      	; 0x20f4 <malloc+0x66>
    20ee:	9a 01       	movw	r18, r20
    20f0:	bd 01       	movw	r22, r26
    20f2:	ef 01       	movw	r28, r30
    20f4:	df 01       	movw	r26, r30
    20f6:	f8 01       	movw	r30, r16
    20f8:	db cf       	rjmp	.-74     	; 0x20b0 <malloc+0x22>
    20fa:	21 15       	cp	r18, r1
    20fc:	31 05       	cpc	r19, r1
    20fe:	f9 f0       	breq	.+62     	; 0x213e <malloc+0xb0>
    2100:	28 1b       	sub	r18, r24
    2102:	39 0b       	sbc	r19, r25
    2104:	24 30       	cpi	r18, 0x04	; 4
    2106:	31 05       	cpc	r19, r1
    2108:	80 f4       	brcc	.+32     	; 0x212a <malloc+0x9c>
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	61 15       	cp	r22, r1
    2110:	71 05       	cpc	r23, r1
    2112:	21 f0       	breq	.+8      	; 0x211c <malloc+0x8e>
    2114:	fb 01       	movw	r30, r22
    2116:	82 83       	std	Z+2, r24	; 0x02
    2118:	93 83       	std	Z+3, r25	; 0x03
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <malloc+0x96>
    211c:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <__flp>
    2120:	90 93 c6 20 	sts	0x20C6, r25	; 0x8020c6 <__flp+0x1>
    2124:	fe 01       	movw	r30, r28
    2126:	32 96       	adiw	r30, 0x02	; 2
    2128:	44 c0       	rjmp	.+136    	; 0x21b2 <malloc+0x124>
    212a:	fe 01       	movw	r30, r28
    212c:	e2 0f       	add	r30, r18
    212e:	f3 1f       	adc	r31, r19
    2130:	81 93       	st	Z+, r24
    2132:	91 93       	st	Z+, r25
    2134:	22 50       	subi	r18, 0x02	; 2
    2136:	31 09       	sbc	r19, r1
    2138:	28 83       	st	Y, r18
    213a:	39 83       	std	Y+1, r19	; 0x01
    213c:	3a c0       	rjmp	.+116    	; 0x21b2 <malloc+0x124>
    213e:	20 91 c3 20 	lds	r18, 0x20C3	; 0x8020c3 <__brkval>
    2142:	30 91 c4 20 	lds	r19, 0x20C4	; 0x8020c4 <__brkval+0x1>
    2146:	23 2b       	or	r18, r19
    2148:	41 f4       	brne	.+16     	; 0x215a <malloc+0xcc>
    214a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    214e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2152:	20 93 c3 20 	sts	0x20C3, r18	; 0x8020c3 <__brkval>
    2156:	30 93 c4 20 	sts	0x20C4, r19	; 0x8020c4 <__brkval+0x1>
    215a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    215e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    2162:	21 15       	cp	r18, r1
    2164:	31 05       	cpc	r19, r1
    2166:	41 f4       	brne	.+16     	; 0x2178 <malloc+0xea>
    2168:	2d b7       	in	r18, 0x3d	; 61
    216a:	3e b7       	in	r19, 0x3e	; 62
    216c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2170:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2174:	24 1b       	sub	r18, r20
    2176:	35 0b       	sbc	r19, r21
    2178:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <__brkval>
    217c:	f0 91 c4 20 	lds	r31, 0x20C4	; 0x8020c4 <__brkval+0x1>
    2180:	e2 17       	cp	r30, r18
    2182:	f3 07       	cpc	r31, r19
    2184:	a0 f4       	brcc	.+40     	; 0x21ae <malloc+0x120>
    2186:	2e 1b       	sub	r18, r30
    2188:	3f 0b       	sbc	r19, r31
    218a:	28 17       	cp	r18, r24
    218c:	39 07       	cpc	r19, r25
    218e:	78 f0       	brcs	.+30     	; 0x21ae <malloc+0x120>
    2190:	ac 01       	movw	r20, r24
    2192:	4e 5f       	subi	r20, 0xFE	; 254
    2194:	5f 4f       	sbci	r21, 0xFF	; 255
    2196:	24 17       	cp	r18, r20
    2198:	35 07       	cpc	r19, r21
    219a:	48 f0       	brcs	.+18     	; 0x21ae <malloc+0x120>
    219c:	4e 0f       	add	r20, r30
    219e:	5f 1f       	adc	r21, r31
    21a0:	40 93 c3 20 	sts	0x20C3, r20	; 0x8020c3 <__brkval>
    21a4:	50 93 c4 20 	sts	0x20C4, r21	; 0x8020c4 <__brkval+0x1>
    21a8:	81 93       	st	Z+, r24
    21aa:	91 93       	st	Z+, r25
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <malloc+0x124>
    21ae:	e0 e0       	ldi	r30, 0x00	; 0
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	cf 01       	movw	r24, r30
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	08 95       	ret

000021be <free>:
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <free+0xa>
    21c6:	81 c0       	rjmp	.+258    	; 0x22ca <free+0x10c>
    21c8:	fc 01       	movw	r30, r24
    21ca:	32 97       	sbiw	r30, 0x02	; 2
    21cc:	12 82       	std	Z+2, r1	; 0x02
    21ce:	13 82       	std	Z+3, r1	; 0x03
    21d0:	a0 91 c5 20 	lds	r26, 0x20C5	; 0x8020c5 <__flp>
    21d4:	b0 91 c6 20 	lds	r27, 0x20C6	; 0x8020c6 <__flp+0x1>
    21d8:	10 97       	sbiw	r26, 0x00	; 0
    21da:	81 f4       	brne	.+32     	; 0x21fc <free+0x3e>
    21dc:	20 81       	ld	r18, Z
    21de:	31 81       	ldd	r19, Z+1	; 0x01
    21e0:	82 0f       	add	r24, r18
    21e2:	93 1f       	adc	r25, r19
    21e4:	20 91 c3 20 	lds	r18, 0x20C3	; 0x8020c3 <__brkval>
    21e8:	30 91 c4 20 	lds	r19, 0x20C4	; 0x8020c4 <__brkval+0x1>
    21ec:	28 17       	cp	r18, r24
    21ee:	39 07       	cpc	r19, r25
    21f0:	51 f5       	brne	.+84     	; 0x2246 <free+0x88>
    21f2:	e0 93 c3 20 	sts	0x20C3, r30	; 0x8020c3 <__brkval>
    21f6:	f0 93 c4 20 	sts	0x20C4, r31	; 0x8020c4 <__brkval+0x1>
    21fa:	67 c0       	rjmp	.+206    	; 0x22ca <free+0x10c>
    21fc:	ed 01       	movw	r28, r26
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	ce 17       	cp	r28, r30
    2204:	df 07       	cpc	r29, r31
    2206:	40 f4       	brcc	.+16     	; 0x2218 <free+0x5a>
    2208:	4a 81       	ldd	r20, Y+2	; 0x02
    220a:	5b 81       	ldd	r21, Y+3	; 0x03
    220c:	9e 01       	movw	r18, r28
    220e:	41 15       	cp	r20, r1
    2210:	51 05       	cpc	r21, r1
    2212:	f1 f0       	breq	.+60     	; 0x2250 <free+0x92>
    2214:	ea 01       	movw	r28, r20
    2216:	f5 cf       	rjmp	.-22     	; 0x2202 <free+0x44>
    2218:	c2 83       	std	Z+2, r28	; 0x02
    221a:	d3 83       	std	Z+3, r29	; 0x03
    221c:	40 81       	ld	r20, Z
    221e:	51 81       	ldd	r21, Z+1	; 0x01
    2220:	84 0f       	add	r24, r20
    2222:	95 1f       	adc	r25, r21
    2224:	c8 17       	cp	r28, r24
    2226:	d9 07       	cpc	r29, r25
    2228:	59 f4       	brne	.+22     	; 0x2240 <free+0x82>
    222a:	88 81       	ld	r24, Y
    222c:	99 81       	ldd	r25, Y+1	; 0x01
    222e:	84 0f       	add	r24, r20
    2230:	95 1f       	adc	r25, r21
    2232:	02 96       	adiw	r24, 0x02	; 2
    2234:	80 83       	st	Z, r24
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	82 83       	std	Z+2, r24	; 0x02
    223e:	93 83       	std	Z+3, r25	; 0x03
    2240:	21 15       	cp	r18, r1
    2242:	31 05       	cpc	r19, r1
    2244:	29 f4       	brne	.+10     	; 0x2250 <free+0x92>
    2246:	e0 93 c5 20 	sts	0x20C5, r30	; 0x8020c5 <__flp>
    224a:	f0 93 c6 20 	sts	0x20C6, r31	; 0x8020c6 <__flp+0x1>
    224e:	3d c0       	rjmp	.+122    	; 0x22ca <free+0x10c>
    2250:	e9 01       	movw	r28, r18
    2252:	ea 83       	std	Y+2, r30	; 0x02
    2254:	fb 83       	std	Y+3, r31	; 0x03
    2256:	49 91       	ld	r20, Y+
    2258:	59 91       	ld	r21, Y+
    225a:	c4 0f       	add	r28, r20
    225c:	d5 1f       	adc	r29, r21
    225e:	ec 17       	cp	r30, r28
    2260:	fd 07       	cpc	r31, r29
    2262:	61 f4       	brne	.+24     	; 0x227c <free+0xbe>
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	84 0f       	add	r24, r20
    226a:	95 1f       	adc	r25, r21
    226c:	02 96       	adiw	r24, 0x02	; 2
    226e:	e9 01       	movw	r28, r18
    2270:	88 83       	st	Y, r24
    2272:	99 83       	std	Y+1, r25	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	8a 83       	std	Y+2, r24	; 0x02
    227a:	9b 83       	std	Y+3, r25	; 0x03
    227c:	e0 e0       	ldi	r30, 0x00	; 0
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	12 96       	adiw	r26, 0x02	; 2
    2282:	8d 91       	ld	r24, X+
    2284:	9c 91       	ld	r25, X
    2286:	13 97       	sbiw	r26, 0x03	; 3
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	19 f0       	breq	.+6      	; 0x2292 <free+0xd4>
    228c:	fd 01       	movw	r30, r26
    228e:	dc 01       	movw	r26, r24
    2290:	f7 cf       	rjmp	.-18     	; 0x2280 <free+0xc2>
    2292:	8d 91       	ld	r24, X+
    2294:	9c 91       	ld	r25, X
    2296:	11 97       	sbiw	r26, 0x01	; 1
    2298:	9d 01       	movw	r18, r26
    229a:	2e 5f       	subi	r18, 0xFE	; 254
    229c:	3f 4f       	sbci	r19, 0xFF	; 255
    229e:	82 0f       	add	r24, r18
    22a0:	93 1f       	adc	r25, r19
    22a2:	20 91 c3 20 	lds	r18, 0x20C3	; 0x8020c3 <__brkval>
    22a6:	30 91 c4 20 	lds	r19, 0x20C4	; 0x8020c4 <__brkval+0x1>
    22aa:	28 17       	cp	r18, r24
    22ac:	39 07       	cpc	r19, r25
    22ae:	69 f4       	brne	.+26     	; 0x22ca <free+0x10c>
    22b0:	30 97       	sbiw	r30, 0x00	; 0
    22b2:	29 f4       	brne	.+10     	; 0x22be <free+0x100>
    22b4:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <__flp>
    22b8:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <__flp+0x1>
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <free+0x104>
    22be:	12 82       	std	Z+2, r1	; 0x02
    22c0:	13 82       	std	Z+3, r1	; 0x03
    22c2:	a0 93 c3 20 	sts	0x20C3, r26	; 0x8020c3 <__brkval>
    22c6:	b0 93 c4 20 	sts	0x20C4, r27	; 0x8020c4 <__brkval+0x1>
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <strnlen_P>:
    22d0:	fc 01       	movw	r30, r24
    22d2:	05 90       	lpm	r0, Z+
    22d4:	61 50       	subi	r22, 0x01	; 1
    22d6:	70 40       	sbci	r23, 0x00	; 0
    22d8:	01 10       	cpse	r0, r1
    22da:	d8 f7       	brcc	.-10     	; 0x22d2 <strnlen_P+0x2>
    22dc:	80 95       	com	r24
    22de:	90 95       	com	r25
    22e0:	8e 0f       	add	r24, r30
    22e2:	9f 1f       	adc	r25, r31
    22e4:	08 95       	ret

000022e6 <memset>:
    22e6:	dc 01       	movw	r26, r24
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <memset+0x6>
    22ea:	6d 93       	st	X+, r22
    22ec:	41 50       	subi	r20, 0x01	; 1
    22ee:	50 40       	sbci	r21, 0x00	; 0
    22f0:	e0 f7       	brcc	.-8      	; 0x22ea <memset+0x4>
    22f2:	08 95       	ret

000022f4 <strnlen>:
    22f4:	fc 01       	movw	r30, r24
    22f6:	61 50       	subi	r22, 0x01	; 1
    22f8:	70 40       	sbci	r23, 0x00	; 0
    22fa:	01 90       	ld	r0, Z+
    22fc:	01 10       	cpse	r0, r1
    22fe:	d8 f7       	brcc	.-10     	; 0x22f6 <strnlen+0x2>
    2300:	80 95       	com	r24
    2302:	90 95       	com	r25
    2304:	8e 0f       	add	r24, r30
    2306:	9f 1f       	adc	r25, r31
    2308:	08 95       	ret

0000230a <fputc>:
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	fb 01       	movw	r30, r22
    2314:	23 81       	ldd	r18, Z+3	; 0x03
    2316:	21 fd       	sbrc	r18, 1
    2318:	03 c0       	rjmp	.+6      	; 0x2320 <fputc+0x16>
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	9f ef       	ldi	r25, 0xFF	; 255
    231e:	2c c0       	rjmp	.+88     	; 0x2378 <fputc+0x6e>
    2320:	22 ff       	sbrs	r18, 2
    2322:	16 c0       	rjmp	.+44     	; 0x2350 <fputc+0x46>
    2324:	46 81       	ldd	r20, Z+6	; 0x06
    2326:	57 81       	ldd	r21, Z+7	; 0x07
    2328:	24 81       	ldd	r18, Z+4	; 0x04
    232a:	35 81       	ldd	r19, Z+5	; 0x05
    232c:	42 17       	cp	r20, r18
    232e:	53 07       	cpc	r21, r19
    2330:	44 f4       	brge	.+16     	; 0x2342 <fputc+0x38>
    2332:	a0 81       	ld	r26, Z
    2334:	b1 81       	ldd	r27, Z+1	; 0x01
    2336:	9d 01       	movw	r18, r26
    2338:	2f 5f       	subi	r18, 0xFF	; 255
    233a:	3f 4f       	sbci	r19, 0xFF	; 255
    233c:	20 83       	st	Z, r18
    233e:	31 83       	std	Z+1, r19	; 0x01
    2340:	8c 93       	st	X, r24
    2342:	26 81       	ldd	r18, Z+6	; 0x06
    2344:	37 81       	ldd	r19, Z+7	; 0x07
    2346:	2f 5f       	subi	r18, 0xFF	; 255
    2348:	3f 4f       	sbci	r19, 0xFF	; 255
    234a:	26 83       	std	Z+6, r18	; 0x06
    234c:	37 83       	std	Z+7, r19	; 0x07
    234e:	14 c0       	rjmp	.+40     	; 0x2378 <fputc+0x6e>
    2350:	8b 01       	movw	r16, r22
    2352:	ec 01       	movw	r28, r24
    2354:	fb 01       	movw	r30, r22
    2356:	00 84       	ldd	r0, Z+8	; 0x08
    2358:	f1 85       	ldd	r31, Z+9	; 0x09
    235a:	e0 2d       	mov	r30, r0
    235c:	19 95       	eicall
    235e:	89 2b       	or	r24, r25
    2360:	e1 f6       	brne	.-72     	; 0x231a <fputc+0x10>
    2362:	d8 01       	movw	r26, r16
    2364:	16 96       	adiw	r26, 0x06	; 6
    2366:	8d 91       	ld	r24, X+
    2368:	9c 91       	ld	r25, X
    236a:	17 97       	sbiw	r26, 0x07	; 7
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	16 96       	adiw	r26, 0x06	; 6
    2370:	8d 93       	st	X+, r24
    2372:	9c 93       	st	X, r25
    2374:	17 97       	sbiw	r26, 0x07	; 7
    2376:	ce 01       	movw	r24, r28
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	08 95       	ret

00002382 <__ultoa_invert>:
    2382:	fa 01       	movw	r30, r20
    2384:	aa 27       	eor	r26, r26
    2386:	28 30       	cpi	r18, 0x08	; 8
    2388:	51 f1       	breq	.+84     	; 0x23de <__ultoa_invert+0x5c>
    238a:	20 31       	cpi	r18, 0x10	; 16
    238c:	81 f1       	breq	.+96     	; 0x23ee <__ultoa_invert+0x6c>
    238e:	e8 94       	clt
    2390:	6f 93       	push	r22
    2392:	6e 7f       	andi	r22, 0xFE	; 254
    2394:	6e 5f       	subi	r22, 0xFE	; 254
    2396:	7f 4f       	sbci	r23, 0xFF	; 255
    2398:	8f 4f       	sbci	r24, 0xFF	; 255
    239a:	9f 4f       	sbci	r25, 0xFF	; 255
    239c:	af 4f       	sbci	r26, 0xFF	; 255
    239e:	b1 e0       	ldi	r27, 0x01	; 1
    23a0:	3e d0       	rcall	.+124    	; 0x241e <__ultoa_invert+0x9c>
    23a2:	b4 e0       	ldi	r27, 0x04	; 4
    23a4:	3c d0       	rcall	.+120    	; 0x241e <__ultoa_invert+0x9c>
    23a6:	67 0f       	add	r22, r23
    23a8:	78 1f       	adc	r23, r24
    23aa:	89 1f       	adc	r24, r25
    23ac:	9a 1f       	adc	r25, r26
    23ae:	a1 1d       	adc	r26, r1
    23b0:	68 0f       	add	r22, r24
    23b2:	79 1f       	adc	r23, r25
    23b4:	8a 1f       	adc	r24, r26
    23b6:	91 1d       	adc	r25, r1
    23b8:	a1 1d       	adc	r26, r1
    23ba:	6a 0f       	add	r22, r26
    23bc:	71 1d       	adc	r23, r1
    23be:	81 1d       	adc	r24, r1
    23c0:	91 1d       	adc	r25, r1
    23c2:	a1 1d       	adc	r26, r1
    23c4:	20 d0       	rcall	.+64     	; 0x2406 <__ultoa_invert+0x84>
    23c6:	09 f4       	brne	.+2      	; 0x23ca <__ultoa_invert+0x48>
    23c8:	68 94       	set
    23ca:	3f 91       	pop	r19
    23cc:	2a e0       	ldi	r18, 0x0A	; 10
    23ce:	26 9f       	mul	r18, r22
    23d0:	11 24       	eor	r1, r1
    23d2:	30 19       	sub	r19, r0
    23d4:	30 5d       	subi	r19, 0xD0	; 208
    23d6:	31 93       	st	Z+, r19
    23d8:	de f6       	brtc	.-74     	; 0x2390 <__ultoa_invert+0xe>
    23da:	cf 01       	movw	r24, r30
    23dc:	08 95       	ret
    23de:	46 2f       	mov	r20, r22
    23e0:	47 70       	andi	r20, 0x07	; 7
    23e2:	40 5d       	subi	r20, 0xD0	; 208
    23e4:	41 93       	st	Z+, r20
    23e6:	b3 e0       	ldi	r27, 0x03	; 3
    23e8:	0f d0       	rcall	.+30     	; 0x2408 <__ultoa_invert+0x86>
    23ea:	c9 f7       	brne	.-14     	; 0x23de <__ultoa_invert+0x5c>
    23ec:	f6 cf       	rjmp	.-20     	; 0x23da <__ultoa_invert+0x58>
    23ee:	46 2f       	mov	r20, r22
    23f0:	4f 70       	andi	r20, 0x0F	; 15
    23f2:	40 5d       	subi	r20, 0xD0	; 208
    23f4:	4a 33       	cpi	r20, 0x3A	; 58
    23f6:	18 f0       	brcs	.+6      	; 0x23fe <__ultoa_invert+0x7c>
    23f8:	49 5d       	subi	r20, 0xD9	; 217
    23fa:	31 fd       	sbrc	r19, 1
    23fc:	40 52       	subi	r20, 0x20	; 32
    23fe:	41 93       	st	Z+, r20
    2400:	02 d0       	rcall	.+4      	; 0x2406 <__ultoa_invert+0x84>
    2402:	a9 f7       	brne	.-22     	; 0x23ee <__ultoa_invert+0x6c>
    2404:	ea cf       	rjmp	.-44     	; 0x23da <__ultoa_invert+0x58>
    2406:	b4 e0       	ldi	r27, 0x04	; 4
    2408:	a6 95       	lsr	r26
    240a:	97 95       	ror	r25
    240c:	87 95       	ror	r24
    240e:	77 95       	ror	r23
    2410:	67 95       	ror	r22
    2412:	ba 95       	dec	r27
    2414:	c9 f7       	brne	.-14     	; 0x2408 <__ultoa_invert+0x86>
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	61 05       	cpc	r22, r1
    241a:	71 05       	cpc	r23, r1
    241c:	08 95       	ret
    241e:	9b 01       	movw	r18, r22
    2420:	ac 01       	movw	r20, r24
    2422:	0a 2e       	mov	r0, r26
    2424:	06 94       	lsr	r0
    2426:	57 95       	ror	r21
    2428:	47 95       	ror	r20
    242a:	37 95       	ror	r19
    242c:	27 95       	ror	r18
    242e:	ba 95       	dec	r27
    2430:	c9 f7       	brne	.-14     	; 0x2424 <__ultoa_invert+0xa2>
    2432:	62 0f       	add	r22, r18
    2434:	73 1f       	adc	r23, r19
    2436:	84 1f       	adc	r24, r20
    2438:	95 1f       	adc	r25, r21
    243a:	a0 1d       	adc	r26, r0
    243c:	08 95       	ret

0000243e <_exit>:
    243e:	f8 94       	cli

00002440 <__stop_program>:
    2440:	ff cf       	rjmp	.-2      	; 0x2440 <__stop_program>
