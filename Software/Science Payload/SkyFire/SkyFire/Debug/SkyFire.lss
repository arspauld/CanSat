
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00802000  000022ec  00002380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00802056  00802056  000023d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f5d3  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005557  00000000  00000000  00011daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000063c3  00000000  00000000  00017306  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d14  00000000  00000000  0001d6cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032a7f  00000000  00000000  0001e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000039b4  00000000  00000000  00050e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00054813  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000026e9  00000000  00000000  00054b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c1       	rjmp	.+636    	; 0x27e <__ctors_end>
       2:	00 00       	nop
       4:	61 c1       	rjmp	.+706    	; 0x2c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	35 c2       	rjmp	.+1130   	; 0x508 <__vector_39>
      9e:	00 00       	nop
      a0:	70 c2       	rjmp	.+1248   	; 0x582 <__vector_40>
      a2:	00 00       	nop
      a4:	ab c2       	rjmp	.+1366   	; 0x5fc <__vector_41>
      a6:	00 00       	nop
      a8:	e6 c2       	rjmp	.+1484   	; 0x676 <__vector_42>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	05 c1       	rjmp	.+522    	; 0x2c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f1 c0       	rjmp	.+482    	; 0x2c8 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ef c0       	rjmp	.+478    	; 0x2c8 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ed c0       	rjmp	.+474    	; 0x2c8 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	eb c0       	rjmp	.+470    	; 0x2c8 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	e9 c0       	rjmp	.+466    	; 0x2c8 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e7 c0       	rjmp	.+462    	; 0x2c8 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e5 c0       	rjmp	.+458    	; 0x2c8 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e3 c0       	rjmp	.+454    	; 0x2c8 <__bad_interrupt>
     102:	00 00       	nop
     104:	e1 c0       	rjmp	.+450    	; 0x2c8 <__bad_interrupt>
     106:	00 00       	nop
     108:	df c0       	rjmp	.+446    	; 0x2c8 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	dd c0       	rjmp	.+442    	; 0x2c8 <__bad_interrupt>
     10e:	00 00       	nop
     110:	db c0       	rjmp	.+438    	; 0x2c8 <__bad_interrupt>
     112:	00 00       	nop
     114:	d9 c0       	rjmp	.+434    	; 0x2c8 <__bad_interrupt>
     116:	00 00       	nop
     118:	d7 c0       	rjmp	.+430    	; 0x2c8 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	01 c1       	rjmp	.+514    	; 0x320 <__vector_71>
     11e:	00 00       	nop
     120:	3c c1       	rjmp	.+632    	; 0x39a <__vector_72>
     122:	00 00       	nop
     124:	77 c1       	rjmp	.+750    	; 0x414 <__vector_73>
     126:	00 00       	nop
     128:	b2 c1       	rjmp	.+868    	; 0x48e <__vector_74>
     12a:	00 00       	nop
     12c:	cd c0       	rjmp	.+410    	; 0x2c8 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cb c0       	rjmp	.+406    	; 0x2c8 <__bad_interrupt>
     132:	00 00       	nop
     134:	c9 c0       	rjmp	.+402    	; 0x2c8 <__bad_interrupt>
     136:	00 00       	nop
     138:	c7 c0       	rjmp	.+398    	; 0x2c8 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c5 c0       	rjmp	.+394    	; 0x2c8 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c3 c0       	rjmp	.+390    	; 0x2c8 <__bad_interrupt>
     142:	00 00       	nop
     144:	c1 c0       	rjmp	.+386    	; 0x2c8 <__bad_interrupt>
     146:	00 00       	nop
     148:	bf c0       	rjmp	.+382    	; 0x2c8 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	bd c0       	rjmp	.+378    	; 0x2c8 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bb c0       	rjmp	.+374    	; 0x2c8 <__bad_interrupt>
     152:	00 00       	nop
     154:	b9 c0       	rjmp	.+370    	; 0x2c8 <__bad_interrupt>
     156:	00 00       	nop
     158:	b7 c0       	rjmp	.+366    	; 0x2c8 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b5 c0       	rjmp	.+362    	; 0x2c8 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b3 c0       	rjmp	.+358    	; 0x2c8 <__bad_interrupt>
     162:	00 00       	nop
     164:	b1 c0       	rjmp	.+354    	; 0x2c8 <__bad_interrupt>
     166:	00 00       	nop
     168:	af c0       	rjmp	.+350    	; 0x2c8 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ad c0       	rjmp	.+346    	; 0x2c8 <__bad_interrupt>
     16e:	00 00       	nop
     170:	ab c0       	rjmp	.+342    	; 0x2c8 <__bad_interrupt>
     172:	00 00       	nop
     174:	a9 c0       	rjmp	.+338    	; 0x2c8 <__bad_interrupt>
     176:	00 00       	nop
     178:	a7 c0       	rjmp	.+334    	; 0x2c8 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a5 c0       	rjmp	.+330    	; 0x2c8 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a3 c0       	rjmp	.+326    	; 0x2c8 <__bad_interrupt>
     182:	00 00       	nop
     184:	a1 c0       	rjmp	.+322    	; 0x2c8 <__bad_interrupt>
     186:	00 00       	nop
     188:	9f c0       	rjmp	.+318    	; 0x2c8 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	9d c0       	rjmp	.+314    	; 0x2c8 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9b c0       	rjmp	.+310    	; 0x2c8 <__bad_interrupt>
     192:	00 00       	nop
     194:	99 c0       	rjmp	.+306    	; 0x2c8 <__bad_interrupt>
     196:	00 00       	nop
     198:	97 c0       	rjmp	.+302    	; 0x2c8 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	95 c0       	rjmp	.+298    	; 0x2c8 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	93 c0       	rjmp	.+294    	; 0x2c8 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	91 c0       	rjmp	.+290    	; 0x2c8 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	8f c0       	rjmp	.+286    	; 0x2c8 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	8d c0       	rjmp	.+282    	; 0x2c8 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8b c0       	rjmp	.+278    	; 0x2c8 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	89 c0       	rjmp	.+274    	; 0x2c8 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	87 c0       	rjmp	.+270    	; 0x2c8 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	85 c0       	rjmp	.+266    	; 0x2c8 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	83 c0       	rjmp	.+262    	; 0x2c8 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	81 c0       	rjmp	.+258    	; 0x2c8 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	7f c0       	rjmp	.+254    	; 0x2c8 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	7d c0       	rjmp	.+250    	; 0x2c8 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7b c0       	rjmp	.+246    	; 0x2c8 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	79 c0       	rjmp	.+242    	; 0x2c8 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	77 c0       	rjmp	.+238    	; 0x2c8 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	75 c0       	rjmp	.+234    	; 0x2c8 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	73 c0       	rjmp	.+230    	; 0x2c8 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	71 c0       	rjmp	.+226    	; 0x2c8 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	6f c0       	rjmp	.+222    	; 0x2c8 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	6d c0       	rjmp	.+218    	; 0x2c8 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6b c0       	rjmp	.+214    	; 0x2c8 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	69 c0       	rjmp	.+210    	; 0x2c8 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	67 c0       	rjmp	.+206    	; 0x2c8 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <usart_init_rs232+0x11e>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
     254:	00 00       	nop
     256:	07 63       	ori	r16, 0x37	; 55
     258:	42 36       	cpi	r20, 0x62	; 98
     25a:	b7 9b       	sbis	0x16, 7	; 22
     25c:	d8 a7       	std	Y+40, r29	; 0x28
     25e:	1a 39       	cpi	r17, 0x9A	; 154
     260:	68 56       	subi	r22, 0x68	; 104
     262:	18 ae       	std	Y+56, r1	; 0x38
     264:	ba ab       	std	Y+50, r27	; 0x32
     266:	55 8c       	ldd	r5, Z+29	; 0x1d
     268:	1d 3c       	cpi	r17, 0xCD	; 205
     26a:	b7 cc       	rjmp	.-1682   	; 0xfffffbda <__eeprom_end+0xff7efbda>
     26c:	57 63       	ori	r21, 0x37	; 55
     26e:	bd 6d       	ori	r27, 0xDD	; 221
     270:	ed fd       	.word	0xfded	; ????
     272:	75 3e       	cpi	r23, 0xE5	; 229
     274:	f6 17       	cp	r31, r22
     276:	72 31       	cpi	r23, 0x12	; 18
     278:	bf 00       	.word	0x00bf	; ????
     27a:	00 00       	nop
     27c:	80 3f       	cpi	r24, 0xF0	; 240

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df e3       	ldi	r29, 0x3F	; 63
     288:	de bf       	out	0x3e, r29	; 62
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	0c bf       	out	0x3c, r16	; 60
     28e:	18 be       	out	0x38, r1	; 56
     290:	19 be       	out	0x39, r1	; 57
     292:	1a be       	out	0x3a, r1	; 58
     294:	1b be       	out	0x3b, r1	; 59

00000296 <__do_copy_data>:
     296:	10 e2       	ldi	r17, 0x20	; 32
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e2       	ldi	r27, 0x20	; 32
     29c:	ec ee       	ldi	r30, 0xEC	; 236
     29e:	f2 e2       	ldi	r31, 0x22	; 34
     2a0:	00 e0       	ldi	r16, 0x00	; 0
     2a2:	0b bf       	out	0x3b, r16	; 59
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x14>
     2a6:	07 90       	elpm	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	a6 35       	cpi	r26, 0x56	; 86
     2ac:	b1 07       	cpc	r27, r17
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0x10>
     2b0:	1b be       	out	0x3b, r1	; 59

000002b2 <__do_clear_bss>:
     2b2:	20 e2       	ldi	r18, 0x20	; 32
     2b4:	a6 e5       	ldi	r26, 0x56	; 86
     2b6:	b0 e2       	ldi	r27, 0x20	; 32
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	ab 37       	cpi	r26, 0x7B	; 123
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	66 d7       	rcall	.+3788   	; 0x1190 <main>
     2c4:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	1f 92       	push	r1
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2d4:	80 91 6b 20 	lds	r24, 0x206B	; 0x80206b <stdio_base>
     2d8:	90 91 6c 20 	lds	r25, 0x206C	; 0x80206c <stdio_base+0x1>
     2dc:	e0 91 67 20 	lds	r30, 0x2067	; 0x802067 <ptr_get>
     2e0:	f0 91 68 20 	lds	r31, 0x2068	; 0x802068 <ptr_get+0x1>
     2e4:	be 01       	movw	r22, r28
     2e6:	6f 5f       	subi	r22, 0xFF	; 255
     2e8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ea:	19 95       	eicall
	return c;
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
}
     2ee:	08 2e       	mov	r0, r24
     2f0:	00 0c       	add	r0, r0
     2f2:	99 0b       	sbc	r25, r25
     2f4:	0f 90       	pop	r0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2fc:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     2fe:	80 91 6b 20 	lds	r24, 0x206B	; 0x80206b <stdio_base>
     302:	90 91 6c 20 	lds	r25, 0x206C	; 0x80206c <stdio_base+0x1>
     306:	e0 91 69 20 	lds	r30, 0x2069	; 0x802069 <ptr_put>
     30a:	f0 91 6a 20 	lds	r31, 0x206A	; 0x80206a <ptr_put+0x1>
     30e:	19 95       	eicall
     310:	99 23       	and	r25, r25
     312:	1c f0       	brlt	.+6      	; 0x31a <_write+0x1e>
		return -1;
	}
	return 1;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     31e:	08 95       	ret

00000320 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     320:	1f 92       	push	r1
     322:	0f 92       	push	r0
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	0f 92       	push	r0
     328:	11 24       	eor	r1, r1
     32a:	08 b6       	in	r0, 0x38	; 56
     32c:	0f 92       	push	r0
     32e:	18 be       	out	0x38, r1	; 56
     330:	09 b6       	in	r0, 0x39	; 57
     332:	0f 92       	push	r0
     334:	19 be       	out	0x39, r1	; 57
     336:	0b b6       	in	r0, 0x3b	; 59
     338:	0f 92       	push	r0
     33a:	1b be       	out	0x3b, r1	; 59
     33c:	2f 93       	push	r18
     33e:	3f 93       	push	r19
     340:	4f 93       	push	r20
     342:	5f 93       	push	r21
     344:	6f 93       	push	r22
     346:	7f 93       	push	r23
     348:	8f 93       	push	r24
     34a:	9f 93       	push	r25
     34c:	af 93       	push	r26
     34e:	bf 93       	push	r27
     350:	ef 93       	push	r30
     352:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     354:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     358:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     35c:	e0 91 6f 20 	lds	r30, 0x206F	; 0x80206f <adca_callback>
     360:	f0 91 70 20 	lds	r31, 0x2070	; 0x802070 <adca_callback+0x1>
     364:	61 e0       	ldi	r22, 0x01	; 1
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	92 e0       	ldi	r25, 0x02	; 2
     36a:	19 95       	eicall
}
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	bf 91       	pop	r27
     372:	af 91       	pop	r26
     374:	9f 91       	pop	r25
     376:	8f 91       	pop	r24
     378:	7f 91       	pop	r23
     37a:	6f 91       	pop	r22
     37c:	5f 91       	pop	r21
     37e:	4f 91       	pop	r20
     380:	3f 91       	pop	r19
     382:	2f 91       	pop	r18
     384:	0f 90       	pop	r0
     386:	0b be       	out	0x3b, r0	; 59
     388:	0f 90       	pop	r0
     38a:	09 be       	out	0x39, r0	; 57
     38c:	0f 90       	pop	r0
     38e:	08 be       	out	0x38, r0	; 56
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	08 b6       	in	r0, 0x38	; 56
     3a6:	0f 92       	push	r0
     3a8:	18 be       	out	0x38, r1	; 56
     3aa:	09 b6       	in	r0, 0x39	; 57
     3ac:	0f 92       	push	r0
     3ae:	19 be       	out	0x39, r1	; 57
     3b0:	0b b6       	in	r0, 0x3b	; 59
     3b2:	0f 92       	push	r0
     3b4:	1b be       	out	0x3b, r1	; 59
     3b6:	2f 93       	push	r18
     3b8:	3f 93       	push	r19
     3ba:	4f 93       	push	r20
     3bc:	5f 93       	push	r21
     3be:	6f 93       	push	r22
     3c0:	7f 93       	push	r23
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
     3ca:	ef 93       	push	r30
     3cc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3ce:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3d2:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d6:	e0 91 6f 20 	lds	r30, 0x206F	; 0x80206f <adca_callback>
     3da:	f0 91 70 20 	lds	r31, 0x2070	; 0x802070 <adca_callback+0x1>
     3de:	62 e0       	ldi	r22, 0x02	; 2
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	19 95       	eicall
}
     3e6:	ff 91       	pop	r31
     3e8:	ef 91       	pop	r30
     3ea:	bf 91       	pop	r27
     3ec:	af 91       	pop	r26
     3ee:	9f 91       	pop	r25
     3f0:	8f 91       	pop	r24
     3f2:	7f 91       	pop	r23
     3f4:	6f 91       	pop	r22
     3f6:	5f 91       	pop	r21
     3f8:	4f 91       	pop	r20
     3fa:	3f 91       	pop	r19
     3fc:	2f 91       	pop	r18
     3fe:	0f 90       	pop	r0
     400:	0b be       	out	0x3b, r0	; 59
     402:	0f 90       	pop	r0
     404:	09 be       	out	0x39, r0	; 57
     406:	0f 90       	pop	r0
     408:	08 be       	out	0x38, r0	; 56
     40a:	0f 90       	pop	r0
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	0f 90       	pop	r0
     410:	1f 90       	pop	r1
     412:	18 95       	reti

00000414 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	08 b6       	in	r0, 0x38	; 56
     420:	0f 92       	push	r0
     422:	18 be       	out	0x38, r1	; 56
     424:	09 b6       	in	r0, 0x39	; 57
     426:	0f 92       	push	r0
     428:	19 be       	out	0x39, r1	; 57
     42a:	0b b6       	in	r0, 0x3b	; 59
     42c:	0f 92       	push	r0
     42e:	1b be       	out	0x3b, r1	; 59
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	4f 93       	push	r20
     436:	5f 93       	push	r21
     438:	6f 93       	push	r22
     43a:	7f 93       	push	r23
     43c:	8f 93       	push	r24
     43e:	9f 93       	push	r25
     440:	af 93       	push	r26
     442:	bf 93       	push	r27
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     448:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     44c:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     450:	e0 91 6f 20 	lds	r30, 0x206F	; 0x80206f <adca_callback>
     454:	f0 91 70 20 	lds	r31, 0x2070	; 0x802070 <adca_callback+0x1>
     458:	64 e0       	ldi	r22, 0x04	; 4
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	19 95       	eicall
}
     460:	ff 91       	pop	r31
     462:	ef 91       	pop	r30
     464:	bf 91       	pop	r27
     466:	af 91       	pop	r26
     468:	9f 91       	pop	r25
     46a:	8f 91       	pop	r24
     46c:	7f 91       	pop	r23
     46e:	6f 91       	pop	r22
     470:	5f 91       	pop	r21
     472:	4f 91       	pop	r20
     474:	3f 91       	pop	r19
     476:	2f 91       	pop	r18
     478:	0f 90       	pop	r0
     47a:	0b be       	out	0x3b, r0	; 59
     47c:	0f 90       	pop	r0
     47e:	09 be       	out	0x39, r0	; 57
     480:	0f 90       	pop	r0
     482:	08 be       	out	0x38, r0	; 56
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
     498:	08 b6       	in	r0, 0x38	; 56
     49a:	0f 92       	push	r0
     49c:	18 be       	out	0x38, r1	; 56
     49e:	09 b6       	in	r0, 0x39	; 57
     4a0:	0f 92       	push	r0
     4a2:	19 be       	out	0x39, r1	; 57
     4a4:	0b b6       	in	r0, 0x3b	; 59
     4a6:	0f 92       	push	r0
     4a8:	1b be       	out	0x3b, r1	; 59
     4aa:	2f 93       	push	r18
     4ac:	3f 93       	push	r19
     4ae:	4f 93       	push	r20
     4b0:	5f 93       	push	r21
     4b2:	6f 93       	push	r22
     4b4:	7f 93       	push	r23
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	ef 93       	push	r30
     4c0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4c2:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c6:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4ca:	e0 91 6f 20 	lds	r30, 0x206F	; 0x80206f <adca_callback>
     4ce:	f0 91 70 20 	lds	r31, 0x2070	; 0x802070 <adca_callback+0x1>
     4d2:	68 e0       	ldi	r22, 0x08	; 8
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	92 e0       	ldi	r25, 0x02	; 2
     4d8:	19 95       	eicall
}
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0b be       	out	0x3b, r0	; 59
     4f6:	0f 90       	pop	r0
     4f8:	09 be       	out	0x39, r0	; 57
     4fa:	0f 90       	pop	r0
     4fc:	08 be       	out	0x38, r0	; 56
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	08 b6       	in	r0, 0x38	; 56
     514:	0f 92       	push	r0
     516:	18 be       	out	0x38, r1	; 56
     518:	09 b6       	in	r0, 0x39	; 57
     51a:	0f 92       	push	r0
     51c:	19 be       	out	0x39, r1	; 57
     51e:	0b b6       	in	r0, 0x3b	; 59
     520:	0f 92       	push	r0
     522:	1b be       	out	0x3b, r1	; 59
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     53c:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     540:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     544:	e0 91 6d 20 	lds	r30, 0x206D	; 0x80206d <adcb_callback>
     548:	f0 91 6e 20 	lds	r31, 0x206E	; 0x80206e <adcb_callback+0x1>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	80 e4       	ldi	r24, 0x40	; 64
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	19 95       	eicall
}
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	7f 91       	pop	r23
     562:	6f 91       	pop	r22
     564:	5f 91       	pop	r21
     566:	4f 91       	pop	r20
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	0f 90       	pop	r0
     56e:	0b be       	out	0x3b, r0	; 59
     570:	0f 90       	pop	r0
     572:	09 be       	out	0x39, r0	; 57
     574:	0f 90       	pop	r0
     576:	08 be       	out	0x38, r0	; 56
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	08 b6       	in	r0, 0x38	; 56
     58e:	0f 92       	push	r0
     590:	18 be       	out	0x38, r1	; 56
     592:	09 b6       	in	r0, 0x39	; 57
     594:	0f 92       	push	r0
     596:	19 be       	out	0x39, r1	; 57
     598:	0b b6       	in	r0, 0x3b	; 59
     59a:	0f 92       	push	r0
     59c:	1b be       	out	0x3b, r1	; 59
     59e:	2f 93       	push	r18
     5a0:	3f 93       	push	r19
     5a2:	4f 93       	push	r20
     5a4:	5f 93       	push	r21
     5a6:	6f 93       	push	r22
     5a8:	7f 93       	push	r23
     5aa:	8f 93       	push	r24
     5ac:	9f 93       	push	r25
     5ae:	af 93       	push	r26
     5b0:	bf 93       	push	r27
     5b2:	ef 93       	push	r30
     5b4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b6:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5ba:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5be:	e0 91 6d 20 	lds	r30, 0x206D	; 0x80206d <adcb_callback>
     5c2:	f0 91 6e 20 	lds	r31, 0x206E	; 0x80206e <adcb_callback+0x1>
     5c6:	62 e0       	ldi	r22, 0x02	; 2
     5c8:	80 e4       	ldi	r24, 0x40	; 64
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	19 95       	eicall
}
     5ce:	ff 91       	pop	r31
     5d0:	ef 91       	pop	r30
     5d2:	bf 91       	pop	r27
     5d4:	af 91       	pop	r26
     5d6:	9f 91       	pop	r25
     5d8:	8f 91       	pop	r24
     5da:	7f 91       	pop	r23
     5dc:	6f 91       	pop	r22
     5de:	5f 91       	pop	r21
     5e0:	4f 91       	pop	r20
     5e2:	3f 91       	pop	r19
     5e4:	2f 91       	pop	r18
     5e6:	0f 90       	pop	r0
     5e8:	0b be       	out	0x3b, r0	; 59
     5ea:	0f 90       	pop	r0
     5ec:	09 be       	out	0x39, r0	; 57
     5ee:	0f 90       	pop	r0
     5f0:	08 be       	out	0x38, r0	; 56
     5f2:	0f 90       	pop	r0
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	0f 90       	pop	r0
     5f8:	1f 90       	pop	r1
     5fa:	18 95       	reti

000005fc <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	08 b6       	in	r0, 0x38	; 56
     608:	0f 92       	push	r0
     60a:	18 be       	out	0x38, r1	; 56
     60c:	09 b6       	in	r0, 0x39	; 57
     60e:	0f 92       	push	r0
     610:	19 be       	out	0x39, r1	; 57
     612:	0b b6       	in	r0, 0x3b	; 59
     614:	0f 92       	push	r0
     616:	1b be       	out	0x3b, r1	; 59
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	ef 93       	push	r30
     62e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     630:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     634:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     638:	e0 91 6d 20 	lds	r30, 0x206D	; 0x80206d <adcb_callback>
     63c:	f0 91 6e 20 	lds	r31, 0x206E	; 0x80206e <adcb_callback+0x1>
     640:	64 e0       	ldi	r22, 0x04	; 4
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	19 95       	eicall
}
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	0b be       	out	0x3b, r0	; 59
     664:	0f 90       	pop	r0
     666:	09 be       	out	0x39, r0	; 57
     668:	0f 90       	pop	r0
     66a:	08 be       	out	0x38, r0	; 56
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	08 b6       	in	r0, 0x38	; 56
     682:	0f 92       	push	r0
     684:	18 be       	out	0x38, r1	; 56
     686:	09 b6       	in	r0, 0x39	; 57
     688:	0f 92       	push	r0
     68a:	19 be       	out	0x39, r1	; 57
     68c:	0b b6       	in	r0, 0x3b	; 59
     68e:	0f 92       	push	r0
     690:	1b be       	out	0x3b, r1	; 59
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6aa:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6ae:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6b2:	e0 91 6d 20 	lds	r30, 0x206D	; 0x80206d <adcb_callback>
     6b6:	f0 91 6e 20 	lds	r31, 0x206E	; 0x80206e <adcb_callback+0x1>
     6ba:	68 e0       	ldi	r22, 0x08	; 8
     6bc:	80 e4       	ldi	r24, 0x40	; 64
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	19 95       	eicall
}
     6c2:	ff 91       	pop	r31
     6c4:	ef 91       	pop	r30
     6c6:	bf 91       	pop	r27
     6c8:	af 91       	pop	r26
     6ca:	9f 91       	pop	r25
     6cc:	8f 91       	pop	r24
     6ce:	7f 91       	pop	r23
     6d0:	6f 91       	pop	r22
     6d2:	5f 91       	pop	r21
     6d4:	4f 91       	pop	r20
     6d6:	3f 91       	pop	r19
     6d8:	2f 91       	pop	r18
     6da:	0f 90       	pop	r0
     6dc:	0b be       	out	0x3b, r0	; 59
     6de:	0f 90       	pop	r0
     6e0:	09 be       	out	0x39, r0	; 57
     6e2:	0f 90       	pop	r0
     6e4:	08 be       	out	0x38, r0	; 56
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6f0:	fc 01       	movw	r30, r24
     6f2:	91 81       	ldd	r25, Z+1	; 0x01
     6f4:	95 ff       	sbrs	r25, 5
     6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <usart_putchar+0x2>
     6f8:	60 83       	st	Z, r22
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	08 95       	ret

00000700 <usart_getchar>:
     700:	fc 01       	movw	r30, r24
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	99 23       	and	r25, r25
     706:	ec f7       	brge	.-6      	; 0x702 <usart_getchar+0x2>
     708:	80 81       	ld	r24, Z
     70a:	08 95       	ret

0000070c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     70c:	4f 92       	push	r4
     70e:	5f 92       	push	r5
     710:	6f 92       	push	r6
     712:	7f 92       	push	r7
     714:	8f 92       	push	r8
     716:	9f 92       	push	r9
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	7c 01       	movw	r14, r24
     728:	4a 01       	movw	r8, r20
     72a:	5b 01       	movw	r10, r22
     72c:	28 01       	movw	r4, r16
     72e:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     730:	fc 01       	movw	r30, r24
     732:	84 81       	ldd	r24, Z+4	; 0x04
     734:	82 ff       	sbrs	r24, 2
     736:	16 c0       	rjmp	.+44     	; 0x764 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     738:	d9 01       	movw	r26, r18
     73a:	c8 01       	movw	r24, r16
     73c:	68 94       	set
     73e:	12 f8       	bld	r1, 2
     740:	b6 95       	lsr	r27
     742:	a7 95       	ror	r26
     744:	97 95       	ror	r25
     746:	87 95       	ror	r24
     748:	16 94       	lsr	r1
     74a:	d1 f7       	brne	.-12     	; 0x740 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     74c:	b9 01       	movw	r22, r18
     74e:	a8 01       	movw	r20, r16
     750:	03 2e       	mov	r0, r19
     752:	36 e1       	ldi	r19, 0x16	; 22
     754:	76 95       	lsr	r23
     756:	67 95       	ror	r22
     758:	57 95       	ror	r21
     75a:	47 95       	ror	r20
     75c:	3a 95       	dec	r19
     75e:	d1 f7       	brne	.-12     	; 0x754 <usart_set_baudrate+0x48>
     760:	30 2d       	mov	r19, r0
     762:	15 c0       	rjmp	.+42     	; 0x78e <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     764:	d9 01       	movw	r26, r18
     766:	c8 01       	movw	r24, r16
     768:	68 94       	set
     76a:	13 f8       	bld	r1, 3
     76c:	b6 95       	lsr	r27
     76e:	a7 95       	ror	r26
     770:	97 95       	ror	r25
     772:	87 95       	ror	r24
     774:	16 94       	lsr	r1
     776:	d1 f7       	brne	.-12     	; 0x76c <usart_set_baudrate+0x60>
		min_rate /= 2;
     778:	b9 01       	movw	r22, r18
     77a:	a8 01       	movw	r20, r16
     77c:	03 2e       	mov	r0, r19
     77e:	37 e1       	ldi	r19, 0x17	; 23
     780:	76 95       	lsr	r23
     782:	67 95       	ror	r22
     784:	57 95       	ror	r21
     786:	47 95       	ror	r20
     788:	3a 95       	dec	r19
     78a:	d1 f7       	brne	.-12     	; 0x780 <usart_set_baudrate+0x74>
     78c:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     78e:	88 15       	cp	r24, r8
     790:	99 05       	cpc	r25, r9
     792:	aa 05       	cpc	r26, r10
     794:	bb 05       	cpc	r27, r11
     796:	08 f4       	brcc	.+2      	; 0x79a <usart_set_baudrate+0x8e>
     798:	a6 c0       	rjmp	.+332    	; 0x8e6 <usart_set_baudrate+0x1da>
     79a:	84 16       	cp	r8, r20
     79c:	95 06       	cpc	r9, r21
     79e:	a6 06       	cpc	r10, r22
     7a0:	b7 06       	cpc	r11, r23
     7a2:	08 f4       	brcc	.+2      	; 0x7a6 <usart_set_baudrate+0x9a>
     7a4:	a2 c0       	rjmp	.+324    	; 0x8ea <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7a6:	f7 01       	movw	r30, r14
     7a8:	84 81       	ldd	r24, Z+4	; 0x04
     7aa:	82 fd       	sbrc	r24, 2
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <usart_set_baudrate+0xaa>
		baud *= 2;
     7ae:	88 0c       	add	r8, r8
     7b0:	99 1c       	adc	r9, r9
     7b2:	aa 1c       	adc	r10, r10
     7b4:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7b6:	c3 01       	movw	r24, r6
     7b8:	b2 01       	movw	r22, r4
     7ba:	a5 01       	movw	r20, r10
     7bc:	94 01       	movw	r18, r8
     7be:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7c2:	2f 3f       	cpi	r18, 0xFF	; 255
     7c4:	31 05       	cpc	r19, r1
     7c6:	41 05       	cpc	r20, r1
     7c8:	51 05       	cpc	r21, r1
     7ca:	08 f4       	brcc	.+2      	; 0x7ce <usart_set_baudrate+0xc2>
     7cc:	90 c0       	rjmp	.+288    	; 0x8ee <usart_set_baudrate+0x1e2>
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	a0 e0       	ldi	r26, 0x00	; 0
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	c9 ef       	ldi	r28, 0xF9	; 249
     7d8:	05 c0       	rjmp	.+10     	; 0x7e4 <usart_set_baudrate+0xd8>
     7da:	28 17       	cp	r18, r24
     7dc:	39 07       	cpc	r19, r25
     7de:	4a 07       	cpc	r20, r26
     7e0:	5b 07       	cpc	r21, r27
     7e2:	58 f0       	brcs	.+22     	; 0x7fa <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	aa 1f       	adc	r26, r26
     7ea:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     7ec:	cd 3f       	cpi	r28, 0xFD	; 253
     7ee:	0c f4       	brge	.+2      	; 0x7f2 <usart_set_baudrate+0xe6>
			limit |= 1;
     7f0:	81 60       	ori	r24, 0x01	; 1
     7f2:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7f4:	c7 30       	cpi	r28, 0x07	; 7
     7f6:	89 f7       	brne	.-30     	; 0x7da <usart_set_baudrate+0xce>
     7f8:	4f c0       	rjmp	.+158    	; 0x898 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     7fa:	cc 23       	and	r28, r28
     7fc:	0c f0       	brlt	.+2      	; 0x800 <usart_set_baudrate+0xf4>
     7fe:	4c c0       	rjmp	.+152    	; 0x898 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     800:	d5 01       	movw	r26, r10
     802:	c4 01       	movw	r24, r8
     804:	88 0f       	add	r24, r24
     806:	99 1f       	adc	r25, r25
     808:	aa 1f       	adc	r26, r26
     80a:	bb 1f       	adc	r27, r27
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	aa 1f       	adc	r26, r26
     812:	bb 1f       	adc	r27, r27
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	aa 1f       	adc	r26, r26
     81a:	bb 1f       	adc	r27, r27
     81c:	48 1a       	sub	r4, r24
     81e:	59 0a       	sbc	r5, r25
     820:	6a 0a       	sbc	r6, r26
     822:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     824:	ce 3f       	cpi	r28, 0xFE	; 254
     826:	f4 f4       	brge	.+60     	; 0x864 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     828:	8d ef       	ldi	r24, 0xFD	; 253
     82a:	9f ef       	ldi	r25, 0xFF	; 255
     82c:	8c 1b       	sub	r24, r28
     82e:	91 09       	sbc	r25, r1
     830:	c7 fd       	sbrc	r28, 7
     832:	93 95       	inc	r25
     834:	04 c0       	rjmp	.+8      	; 0x83e <usart_set_baudrate+0x132>
     836:	44 0c       	add	r4, r4
     838:	55 1c       	adc	r5, r5
     83a:	66 1c       	adc	r6, r6
     83c:	77 1c       	adc	r7, r7
     83e:	8a 95       	dec	r24
     840:	d2 f7       	brpl	.-12     	; 0x836 <usart_set_baudrate+0x12a>
     842:	d5 01       	movw	r26, r10
     844:	c4 01       	movw	r24, r8
     846:	b6 95       	lsr	r27
     848:	a7 95       	ror	r26
     84a:	97 95       	ror	r25
     84c:	87 95       	ror	r24
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	64 0d       	add	r22, r4
     854:	75 1d       	adc	r23, r5
     856:	86 1d       	adc	r24, r6
     858:	97 1d       	adc	r25, r7
     85a:	a5 01       	movw	r20, r10
     85c:	94 01       	movw	r18, r8
     85e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__udivmodsi4>
     862:	37 c0       	rjmp	.+110    	; 0x8d2 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	8c 0f       	add	r24, r28
     868:	a5 01       	movw	r20, r10
     86a:	94 01       	movw	r18, r8
     86c:	04 c0       	rjmp	.+8      	; 0x876 <usart_set_baudrate+0x16a>
     86e:	22 0f       	add	r18, r18
     870:	33 1f       	adc	r19, r19
     872:	44 1f       	adc	r20, r20
     874:	55 1f       	adc	r21, r21
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     87a:	da 01       	movw	r26, r20
     87c:	c9 01       	movw	r24, r18
     87e:	b6 95       	lsr	r27
     880:	a7 95       	ror	r26
     882:	97 95       	ror	r25
     884:	87 95       	ror	r24
     886:	bc 01       	movw	r22, r24
     888:	cd 01       	movw	r24, r26
     88a:	64 0d       	add	r22, r4
     88c:	75 1d       	adc	r23, r5
     88e:	86 1d       	adc	r24, r6
     890:	97 1d       	adc	r25, r7
     892:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__udivmodsi4>
     896:	1d c0       	rjmp	.+58     	; 0x8d2 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	8c 0f       	add	r24, r28
     89c:	a5 01       	movw	r20, r10
     89e:	94 01       	movw	r18, r8
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <usart_set_baudrate+0x19e>
     8a2:	22 0f       	add	r18, r18
     8a4:	33 1f       	adc	r19, r19
     8a6:	44 1f       	adc	r20, r20
     8a8:	55 1f       	adc	r21, r21
     8aa:	8a 95       	dec	r24
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	b6 95       	lsr	r27
     8b4:	a7 95       	ror	r26
     8b6:	97 95       	ror	r25
     8b8:	87 95       	ror	r24
     8ba:	bc 01       	movw	r22, r24
     8bc:	cd 01       	movw	r24, r26
     8be:	64 0d       	add	r22, r4
     8c0:	75 1d       	adc	r23, r5
     8c2:	86 1d       	adc	r24, r6
     8c4:	97 1d       	adc	r25, r7
     8c6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__udivmodsi4>
     8ca:	21 50       	subi	r18, 0x01	; 1
     8cc:	31 09       	sbc	r19, r1
     8ce:	41 09       	sbc	r20, r1
     8d0:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8d2:	83 2f       	mov	r24, r19
     8d4:	8f 70       	andi	r24, 0x0F	; 15
     8d6:	c2 95       	swap	r28
     8d8:	c0 7f       	andi	r28, 0xF0	; 240
     8da:	c8 2b       	or	r28, r24
     8dc:	f7 01       	movw	r30, r14
     8de:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8e0:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	18 c0       	rjmp	.+48     	; 0x916 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	16 c0       	rjmp	.+44     	; 0x916 <usart_set_baudrate+0x20a>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	14 c0       	rjmp	.+40     	; 0x916 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8ee:	d5 01       	movw	r26, r10
     8f0:	c4 01       	movw	r24, r8
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	aa 1f       	adc	r26, r26
     8f8:	bb 1f       	adc	r27, r27
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	aa 1f       	adc	r26, r26
     900:	bb 1f       	adc	r27, r27
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	aa 1f       	adc	r26, r26
     908:	bb 1f       	adc	r27, r27
     90a:	48 1a       	sub	r4, r24
     90c:	59 0a       	sbc	r5, r25
     90e:	6a 0a       	sbc	r6, r26
     910:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     912:	c9 ef       	ldi	r28, 0xF9	; 249
     914:	89 cf       	rjmp	.-238    	; 0x828 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	9f 90       	pop	r9
     926:	8f 90       	pop	r8
     928:	7f 90       	pop	r7
     92a:	6f 90       	pop	r6
     92c:	5f 90       	pop	r5
     92e:	4f 90       	pop	r4
     930:	08 95       	ret

00000932 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
     93c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	09 f4       	brne	.+2      	; 0x944 <usart_init_rs232+0x12>
     942:	36 c1       	rjmp	.+620    	; 0xbb0 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     944:	80 3c       	cpi	r24, 0xC0	; 192
     946:	91 05       	cpc	r25, r1
     948:	21 f4       	brne	.+8      	; 0x952 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     94a:	60 e1       	ldi	r22, 0x10	; 16
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	89 d2       	rcall	.+1298   	; 0xe62 <sysclk_enable_module>
     950:	2f c1       	rjmp	.+606    	; 0xbb0 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     952:	c0 34       	cpi	r28, 0x40	; 64
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	d8 07       	cpc	r29, r24
     958:	21 f4       	brne	.+8      	; 0x962 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     95a:	68 e0       	ldi	r22, 0x08	; 8
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	81 d2       	rcall	.+1282   	; 0xe62 <sysclk_enable_module>
     960:	27 c1       	rjmp	.+590    	; 0xbb0 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     962:	c1 15       	cp	r28, r1
     964:	e4 e0       	ldi	r30, 0x04	; 4
     966:	de 07       	cpc	r29, r30
     968:	21 f4       	brne	.+8      	; 0x972 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     96a:	64 e0       	ldi	r22, 0x04	; 4
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	79 d2       	rcall	.+1266   	; 0xe62 <sysclk_enable_module>
     970:	1f c1       	rjmp	.+574    	; 0xbb0 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     972:	c0 38       	cpi	r28, 0x80	; 128
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     978:	21 f4       	brne	.+8      	; 0x982 <usart_init_rs232+0x50>
     97a:	62 e0       	ldi	r22, 0x02	; 2
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	71 d2       	rcall	.+1250   	; 0xe62 <sysclk_enable_module>
     980:	17 c1       	rjmp	.+558    	; 0xbb0 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     982:	c1 15       	cp	r28, r1
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     988:	21 f4       	brne	.+8      	; 0x992 <usart_init_rs232+0x60>
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	69 d2       	rcall	.+1234   	; 0xe62 <sysclk_enable_module>
     990:	0f c1       	rjmp	.+542    	; 0xbb0 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     992:	c0 38       	cpi	r28, 0x80	; 128
     994:	e3 e0       	ldi	r30, 0x03	; 3
     996:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     998:	21 f4       	brne	.+8      	; 0x9a2 <usart_init_rs232+0x70>
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	61 d2       	rcall	.+1218   	; 0xe62 <sysclk_enable_module>
     9a0:	07 c1       	rjmp	.+526    	; 0xbb0 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     9a2:	c0 39       	cpi	r28, 0x90	; 144
     9a4:	f3 e0       	ldi	r31, 0x03	; 3
     9a6:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <usart_init_rs232+0x80>
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	59 d2       	rcall	.+1202   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9b0:	ff c0       	rjmp	.+510    	; 0xbb0 <usart_init_rs232+0x27e>
     9b2:	c1 15       	cp	r28, r1
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9b8:	21 f4       	brne	.+8      	; 0x9c2 <usart_init_rs232+0x90>
     9ba:	62 e0       	ldi	r22, 0x02	; 2
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	51 d2       	rcall	.+1186   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     9c0:	f7 c0       	rjmp	.+494    	; 0xbb0 <usart_init_rs232+0x27e>
     9c2:	c0 34       	cpi	r28, 0x40	; 64
     9c4:	e2 e0       	ldi	r30, 0x02	; 2
     9c6:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9c8:	21 f4       	brne	.+8      	; 0x9d2 <usart_init_rs232+0xa0>
     9ca:	62 e0       	ldi	r22, 0x02	; 2
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	49 d2       	rcall	.+1170   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9d0:	ef c0       	rjmp	.+478    	; 0xbb0 <usart_init_rs232+0x27e>
     9d2:	c1 15       	cp	r28, r1
     9d4:	f3 e0       	ldi	r31, 0x03	; 3
     9d6:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <usart_init_rs232+0xb0>
     9da:	64 e0       	ldi	r22, 0x04	; 4
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	41 d2       	rcall	.+1154   	; 0xe62 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9e0:	e7 c0       	rjmp	.+462    	; 0xbb0 <usart_init_rs232+0x27e>
     9e2:	c0 32       	cpi	r28, 0x20	; 32
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <usart_init_rs232+0xc0>
     9ea:	64 e0       	ldi	r22, 0x04	; 4
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	39 d2       	rcall	.+1138   	; 0xe62 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9f0:	df c0       	rjmp	.+446    	; 0xbb0 <usart_init_rs232+0x27e>
     9f2:	c1 15       	cp	r28, r1
     9f4:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9f6:	de 07       	cpc	r29, r30
     9f8:	21 f4       	brne	.+8      	; 0xa02 <usart_init_rs232+0xd0>
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	31 d2       	rcall	.+1122   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a00:	d7 c0       	rjmp	.+430    	; 0xbb0 <usart_init_rs232+0x27e>
     a02:	c1 15       	cp	r28, r1
     a04:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a06:	df 07       	cpc	r29, r31
     a08:	21 f4       	brne	.+8      	; 0xa12 <usart_init_rs232+0xe0>
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	84 e0       	ldi	r24, 0x04	; 4
     a0e:	29 d2       	rcall	.+1106   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     a10:	cf c0       	rjmp	.+414    	; 0xbb0 <usart_init_rs232+0x27e>
     a12:	c1 15       	cp	r28, r1
     a14:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a16:	d8 07       	cpc	r29, r24
     a18:	21 f4       	brne	.+8      	; 0xa22 <usart_init_rs232+0xf0>
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	85 e0       	ldi	r24, 0x05	; 5
     a1e:	21 d2       	rcall	.+1090   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     a20:	c7 c0       	rjmp	.+398    	; 0xbb0 <usart_init_rs232+0x27e>
     a22:	c1 15       	cp	r28, r1
     a24:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     a26:	de 07       	cpc	r29, r30
     a28:	21 f4       	brne	.+8      	; 0xa32 <usart_init_rs232+0x100>
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a2e:	19 d2       	rcall	.+1074   	; 0xe62 <sysclk_enable_module>
     a30:	bf c0       	rjmp	.+382    	; 0xbb0 <usart_init_rs232+0x27e>
     a32:	c0 34       	cpi	r28, 0x40	; 64
     a34:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a36:	df 07       	cpc	r29, r31
     a38:	21 f4       	brne	.+8      	; 0xa42 <usart_init_rs232+0x110>
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a3e:	11 d2       	rcall	.+1058   	; 0xe62 <sysclk_enable_module>
     a40:	b7 c0       	rjmp	.+366    	; 0xbb0 <usart_init_rs232+0x27e>
     a42:	c0 34       	cpi	r28, 0x40	; 64
     a44:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a46:	d8 07       	cpc	r29, r24
     a48:	21 f4       	brne	.+8      	; 0xa52 <usart_init_rs232+0x120>
     a4a:	62 e0       	ldi	r22, 0x02	; 2
     a4c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a4e:	09 d2       	rcall	.+1042   	; 0xe62 <sysclk_enable_module>
     a50:	af c0       	rjmp	.+350    	; 0xbb0 <usart_init_rs232+0x27e>
     a52:	c0 34       	cpi	r28, 0x40	; 64
     a54:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a56:	de 07       	cpc	r29, r30
     a58:	21 f4       	brne	.+8      	; 0xa62 <usart_init_rs232+0x130>
     a5a:	62 e0       	ldi	r22, 0x02	; 2
     a5c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a5e:	01 d2       	rcall	.+1026   	; 0xe62 <sysclk_enable_module>
     a60:	a7 c0       	rjmp	.+334    	; 0xbb0 <usart_init_rs232+0x27e>
     a62:	c0 34       	cpi	r28, 0x40	; 64
     a64:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a66:	df 07       	cpc	r29, r31
     a68:	21 f4       	brne	.+8      	; 0xa72 <usart_init_rs232+0x140>
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a6e:	f9 d1       	rcall	.+1010   	; 0xe62 <sysclk_enable_module>
     a70:	9f c0       	rjmp	.+318    	; 0xbb0 <usart_init_rs232+0x27e>
     a72:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a74:	88 e0       	ldi	r24, 0x08	; 8
     a76:	d8 07       	cpc	r29, r24
     a78:	21 f4       	brne	.+8      	; 0xa82 <usart_init_rs232+0x150>
     a7a:	64 e0       	ldi	r22, 0x04	; 4
     a7c:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a7e:	f1 d1       	rcall	.+994    	; 0xe62 <sysclk_enable_module>
     a80:	97 c0       	rjmp	.+302    	; 0xbb0 <usart_init_rs232+0x27e>
     a82:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a84:	e9 e0       	ldi	r30, 0x09	; 9
     a86:	de 07       	cpc	r29, r30
     a88:	21 f4       	brne	.+8      	; 0xa92 <usart_init_rs232+0x160>
     a8a:	64 e0       	ldi	r22, 0x04	; 4
     a8c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a8e:	e9 d1       	rcall	.+978    	; 0xe62 <sysclk_enable_module>
     a90:	8f c0       	rjmp	.+286    	; 0xbb0 <usart_init_rs232+0x27e>
     a92:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a94:	fa e0       	ldi	r31, 0x0A	; 10
     a96:	df 07       	cpc	r29, r31
     a98:	21 f4       	brne	.+8      	; 0xaa2 <usart_init_rs232+0x170>
     a9a:	64 e0       	ldi	r22, 0x04	; 4
     a9c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     a9e:	e1 d1       	rcall	.+962    	; 0xe62 <sysclk_enable_module>
     aa0:	87 c0       	rjmp	.+270    	; 0xbb0 <usart_init_rs232+0x27e>
     aa2:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     aa4:	8b e0       	ldi	r24, 0x0B	; 11
     aa6:	d8 07       	cpc	r29, r24
     aa8:	21 f4       	brne	.+8      	; 0xab2 <usart_init_rs232+0x180>
     aaa:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     aac:	86 e0       	ldi	r24, 0x06	; 6
     aae:	d9 d1       	rcall	.+946    	; 0xe62 <sysclk_enable_module>
     ab0:	7f c0       	rjmp	.+254    	; 0xbb0 <usart_init_rs232+0x27e>
     ab2:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     ab4:	e8 e0       	ldi	r30, 0x08	; 8
     ab6:	de 07       	cpc	r29, r30
     ab8:	21 f4       	brne	.+8      	; 0xac2 <usart_init_rs232+0x190>
     aba:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     abc:	83 e0       	ldi	r24, 0x03	; 3
     abe:	d1 d1       	rcall	.+930    	; 0xe62 <sysclk_enable_module>
     ac0:	77 c0       	rjmp	.+238    	; 0xbb0 <usart_init_rs232+0x27e>
     ac2:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ac4:	f9 e0       	ldi	r31, 0x09	; 9
     ac6:	df 07       	cpc	r29, r31
     ac8:	21 f4       	brne	.+8      	; 0xad2 <usart_init_rs232+0x1a0>
     aca:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     acc:	84 e0       	ldi	r24, 0x04	; 4
     ace:	c9 d1       	rcall	.+914    	; 0xe62 <sysclk_enable_module>
     ad0:	6f c0       	rjmp	.+222    	; 0xbb0 <usart_init_rs232+0x27e>
     ad2:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ad4:	8a e0       	ldi	r24, 0x0A	; 10
     ad6:	d8 07       	cpc	r29, r24
     ad8:	21 f4       	brne	.+8      	; 0xae2 <usart_init_rs232+0x1b0>
     ada:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     adc:	85 e0       	ldi	r24, 0x05	; 5
     ade:	c1 d1       	rcall	.+898    	; 0xe62 <sysclk_enable_module>
     ae0:	67 c0       	rjmp	.+206    	; 0xbb0 <usart_init_rs232+0x27e>
     ae2:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     ae4:	eb e0       	ldi	r30, 0x0B	; 11
     ae6:	de 07       	cpc	r29, r30
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <usart_init_rs232+0x1c0>
     aea:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     aec:	86 e0       	ldi	r24, 0x06	; 6
     aee:	b9 d1       	rcall	.+882    	; 0xe62 <sysclk_enable_module>
     af0:	5f c0       	rjmp	.+190    	; 0xbb0 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     af2:	c0 3a       	cpi	r28, 0xA0	; 160
     af4:	f8 e0       	ldi	r31, 0x08	; 8
     af6:	df 07       	cpc	r29, r31
     af8:	21 f4       	brne	.+8      	; 0xb02 <usart_init_rs232+0x1d0>
     afa:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     afc:	83 e0       	ldi	r24, 0x03	; 3
     afe:	b1 d1       	rcall	.+866    	; 0xe62 <sysclk_enable_module>
     b00:	57 c0       	rjmp	.+174    	; 0xbb0 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     b02:	c0 3a       	cpi	r28, 0xA0	; 160
     b04:	89 e0       	ldi	r24, 0x09	; 9
     b06:	d8 07       	cpc	r29, r24
     b08:	21 f4       	brne	.+8      	; 0xb12 <usart_init_rs232+0x1e0>
     b0a:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     b0c:	84 e0       	ldi	r24, 0x04	; 4
     b0e:	a9 d1       	rcall	.+850    	; 0xe62 <sysclk_enable_module>
     b10:	4f c0       	rjmp	.+158    	; 0xbb0 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b12:	c0 3a       	cpi	r28, 0xA0	; 160
     b14:	ea e0       	ldi	r30, 0x0A	; 10
     b16:	de 07       	cpc	r29, r30
     b18:	21 f4       	brne	.+8      	; 0xb22 <usart_init_rs232+0x1f0>
     b1a:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     b1c:	85 e0       	ldi	r24, 0x05	; 5
     b1e:	a1 d1       	rcall	.+834    	; 0xe62 <sysclk_enable_module>
     b20:	47 c0       	rjmp	.+142    	; 0xbb0 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     b22:	c0 3a       	cpi	r28, 0xA0	; 160
     b24:	fb e0       	ldi	r31, 0x0B	; 11
     b26:	df 07       	cpc	r29, r31
     b28:	21 f4       	brne	.+8      	; 0xb32 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b2a:	60 e1       	ldi	r22, 0x10	; 16
     b2c:	86 e0       	ldi	r24, 0x06	; 6
     b2e:	99 d1       	rcall	.+818    	; 0xe62 <sysclk_enable_module>
     b30:	3f c0       	rjmp	.+126    	; 0xbb0 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b32:	c0 3b       	cpi	r28, 0xB0	; 176
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	d8 07       	cpc	r29, r24
     b38:	21 f4       	brne	.+8      	; 0xb42 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b3a:	60 e2       	ldi	r22, 0x20	; 32
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	91 d1       	rcall	.+802    	; 0xe62 <sysclk_enable_module>
     b40:	37 c0       	rjmp	.+110    	; 0xbb0 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b42:	c0 3b       	cpi	r28, 0xB0	; 176
     b44:	e9 e0       	ldi	r30, 0x09	; 9
     b46:	de 07       	cpc	r29, r30
     b48:	21 f4       	brne	.+8      	; 0xb52 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b4a:	60 e2       	ldi	r22, 0x20	; 32
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	89 d1       	rcall	.+786    	; 0xe62 <sysclk_enable_module>
     b50:	2f c0       	rjmp	.+94     	; 0xbb0 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b52:	c0 3b       	cpi	r28, 0xB0	; 176
     b54:	fa e0       	ldi	r31, 0x0A	; 10
     b56:	df 07       	cpc	r29, r31
     b58:	21 f4       	brne	.+8      	; 0xb62 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b5a:	60 e2       	ldi	r22, 0x20	; 32
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	81 d1       	rcall	.+770    	; 0xe62 <sysclk_enable_module>
     b60:	27 c0       	rjmp	.+78     	; 0xbb0 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b62:	c0 3b       	cpi	r28, 0xB0	; 176
     b64:	8b e0       	ldi	r24, 0x0B	; 11
     b66:	d8 07       	cpc	r29, r24
     b68:	21 f4       	brne	.+8      	; 0xb72 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b6a:	60 e2       	ldi	r22, 0x20	; 32
     b6c:	86 e0       	ldi	r24, 0x06	; 6
     b6e:	79 d1       	rcall	.+754    	; 0xe62 <sysclk_enable_module>
     b70:	1f c0       	rjmp	.+62     	; 0xbb0 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b72:	c0 38       	cpi	r28, 0x80	; 128
     b74:	e4 e0       	ldi	r30, 0x04	; 4
     b76:	de 07       	cpc	r29, r30
     b78:	21 f4       	brne	.+8      	; 0xb82 <usart_init_rs232+0x250>
     b7a:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	71 d1       	rcall	.+738    	; 0xe62 <sysclk_enable_module>
     b80:	17 c0       	rjmp	.+46     	; 0xbb0 <usart_init_rs232+0x27e>
     b82:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b84:	f4 e0       	ldi	r31, 0x04	; 4
     b86:	df 07       	cpc	r29, r31
     b88:	21 f4       	brne	.+8      	; 0xb92 <usart_init_rs232+0x260>
     b8a:	60 e4       	ldi	r22, 0x40	; 64
     b8c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b8e:	69 d1       	rcall	.+722    	; 0xe62 <sysclk_enable_module>
     b90:	0f c0       	rjmp	.+30     	; 0xbb0 <usart_init_rs232+0x27e>
     b92:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b94:	84 e0       	ldi	r24, 0x04	; 4
     b96:	d8 07       	cpc	r29, r24
     b98:	21 f4       	brne	.+8      	; 0xba2 <usart_init_rs232+0x270>
     b9a:	60 e4       	ldi	r22, 0x40	; 64
     b9c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     b9e:	61 d1       	rcall	.+706    	; 0xe62 <sysclk_enable_module>
     ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <usart_init_rs232+0x27e>
     ba2:	c0 3b       	cpi	r28, 0xB0	; 176
     ba4:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     ba6:	de 07       	cpc	r29, r30
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <usart_init_rs232+0x27e>
     baa:	60 e4       	ldi	r22, 0x40	; 64
     bac:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     bae:	59 d1       	rcall	.+690    	; 0xe62 <sysclk_enable_module>
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     bb4:	8d 83       	std	Y+5, r24	; 0x05
     bb6:	f8 01       	movw	r30, r16
     bb8:	95 81       	ldd	r25, Z+5	; 0x05
     bba:	84 81       	ldd	r24, Z+4	; 0x04
     bbc:	89 2b       	or	r24, r25
     bbe:	96 81       	ldd	r25, Z+6	; 0x06
     bc0:	91 11       	cpse	r25, r1
     bc2:	98 e0       	ldi	r25, 0x08	; 8
     bc4:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     bc6:	8d 83       	std	Y+5, r24	; 0x05
     bc8:	f8 01       	movw	r30, r16
     bca:	40 81       	ld	r20, Z
     bcc:	51 81       	ldd	r21, Z+1	; 0x01
     bce:	62 81       	ldd	r22, Z+2	; 0x02
     bd0:	73 81       	ldd	r23, Z+3	; 0x03
     bd2:	00 e8       	ldi	r16, 0x80	; 128
     bd4:	14 e8       	ldi	r17, 0x84	; 132
     bd6:	2e e1       	ldi	r18, 0x1E	; 30
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	ce 01       	movw	r24, r28
     bdc:	97 dd       	rcall	.-1234   	; 0x70c <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	98 60       	ori	r25, 0x08	; 8
     be2:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	90 61       	ori	r25, 0x10	; 16
     be8:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	08 95       	ret

00000bf4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     bf4:	04 c0       	rjmp	.+8      	; 0xbfe <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     bf6:	61 50       	subi	r22, 0x01	; 1
     bf8:	71 09       	sbc	r23, r1
     bfa:	81 09       	sbc	r24, r1
     bfc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     bfe:	61 15       	cp	r22, r1
     c00:	71 05       	cpc	r23, r1
     c02:	81 05       	cpc	r24, r1
     c04:	91 05       	cpc	r25, r1
     c06:	b9 f7       	brne	.-18     	; 0xbf6 <__portable_avr_delay_cycles+0x2>
     c08:	08 95       	ret

00000c0a <ms5607_read>:
#define CMD_MS5607_CONVERT_D1	0x48
#define CMD_MS5607_CONVERT_D2	0x58
#define MS5607_PORT				0x10

uint16_t ms5607_read(uint16_t comm)
{
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	spi_select(MS5607_PORT); // select our spi device
     c10:	80 e1       	ldi	r24, 0x10	; 16
     c12:	66 d0       	rcall	.+204    	; 0xce0 <spi_select>
	spi_write(comm); // write a specified command to ask for data
     c14:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     c16:	75 d0       	rcall	.+234    	; 0xd02 <spi_write>
     c18:	69 d0       	rcall	.+210    	; 0xcec <spi_read>
     c1a:	c8 2f       	mov	r28, r24
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
     c1e:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     c20:	cc 27       	eor	r28, r28
     c22:	64 d0       	rcall	.+200    	; 0xcec <spi_read>
	
	spi_select(MS5607_PORT); // end spi exchange
     c24:	c8 2b       	or	r28, r24
     c26:	80 e1       	ldi	r24, 0x10	; 16
     c28:	5b d0       	rcall	.+182    	; 0xce0 <spi_select>
	
	return rx_data; // return the 16-bit value
}
     c2a:	ce 01       	movw	r24, r28
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <ms5607_convert_d1>:

uint32_t ms5607_convert_d1(void)
{
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	spi_select(MS5607_PORT); // select our spi device
     c3a:	80 e1       	ldi	r24, 0x10	; 16
     c3c:	51 d0       	rcall	.+162    	; 0xce0 <spi_select>
	spi_write(CMD_MS5607_CONVERT_D1); // write a specified command to ask for data
     c3e:	88 e4       	ldi	r24, 0x48	; 72
     c40:	60 d0       	rcall	.+192    	; 0xd02 <spi_write>
	delay_ms(10);
     c42:	66 e0       	ldi	r22, 0x06	; 6
     c44:	7d e0       	ldi	r23, 0x0D	; 13
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
	spi_select(MS5607_PORT);
     c4a:	d4 df       	rcall	.-88     	; 0xbf4 <__portable_avr_delay_cycles>
     c4c:	80 e1       	ldi	r24, 0x10	; 16
	
	spi_select(MS5607_PORT);
     c4e:	48 d0       	rcall	.+144    	; 0xce0 <spi_select>
     c50:	80 e1       	ldi	r24, 0x10	; 16
	spi_write(CMD_MS5607_READ_ADC);
     c52:	46 d0       	rcall	.+140    	; 0xce0 <spi_select>
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	55 d0       	rcall	.+170    	; 0xd02 <spi_write>
	rx_data  = (uint32_t) spi_read()<<16;
     c58:	49 d0       	rcall	.+146    	; 0xcec <spi_read>
     c5a:	c8 2e       	mov	r12, r24
     c5c:	d1 2c       	mov	r13, r1
     c5e:	e1 2c       	mov	r14, r1
     c60:	f1 2c       	mov	r15, r1
     c62:	76 01       	movw	r14, r12
     c64:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     c66:	cc 24       	eor	r12, r12
     c68:	41 d0       	rcall	.+130    	; 0xcec <spi_read>
     c6a:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     c6c:	3f d0       	rcall	.+126    	; 0xcec <spi_read>
     c6e:	c8 2a       	or	r12, r24
     c70:	80 e1       	ldi	r24, 0x10	; 16
	spi_select(MS5607_PORT);
     c72:	36 d0       	rcall	.+108    	; 0xce0 <spi_select>
     c74:	c7 01       	movw	r24, r14
     c76:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	08 95       	ret

00000c82 <ms5607_convert_d2>:
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	spi_select(MS5607_PORT); // select our spi device
     c8a:	80 e1       	ldi	r24, 0x10	; 16
     c8c:	29 d0       	rcall	.+82     	; 0xce0 <spi_select>
	spi_write(CMD_MS5607_CONVERT_D2); // write a specified command to ask for data
     c8e:	88 e5       	ldi	r24, 0x58	; 88
     c90:	38 d0       	rcall	.+112    	; 0xd02 <spi_write>
	delay_ms(10);
     c92:	66 e0       	ldi	r22, 0x06	; 6
     c94:	7d e0       	ldi	r23, 0x0D	; 13
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
	spi_select(MS5607_PORT);
     c9a:	ac df       	rcall	.-168    	; 0xbf4 <__portable_avr_delay_cycles>
     c9c:	80 e1       	ldi	r24, 0x10	; 16
	
	spi_select(MS5607_PORT);
     c9e:	20 d0       	rcall	.+64     	; 0xce0 <spi_select>
     ca0:	80 e1       	ldi	r24, 0x10	; 16
	spi_write(CMD_MS5607_READ_ADC);
     ca2:	1e d0       	rcall	.+60     	; 0xce0 <spi_select>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	2d d0       	rcall	.+90     	; 0xd02 <spi_write>
	rx_data  = (uint32_t) spi_read()<<16;
     ca8:	21 d0       	rcall	.+66     	; 0xcec <spi_read>
     caa:	c8 2e       	mov	r12, r24
     cac:	d1 2c       	mov	r13, r1
     cae:	e1 2c       	mov	r14, r1
     cb0:	f1 2c       	mov	r15, r1
     cb2:	76 01       	movw	r14, r12
     cb4:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     cb6:	cc 24       	eor	r12, r12
     cb8:	19 d0       	rcall	.+50     	; 0xcec <spi_read>
     cba:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     cbc:	17 d0       	rcall	.+46     	; 0xcec <spi_read>
     cbe:	c8 2a       	or	r12, r24
     cc0:	80 e1       	ldi	r24, 0x10	; 16
	spi_select(MS5607_PORT);
     cc2:	0e d0       	rcall	.+28     	; 0xce0 <spi_select>
     cc4:	c7 01       	movw	r24, r14
     cc6:	b6 01       	movw	r22, r12
	
	return rx_data;
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	08 95       	ret

00000cd2 <spi_init>:
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     cd2:	68 e0       	ldi	r22, 0x08	; 8
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	c5 d0       	rcall	.+394    	; 0xe62 <sysclk_enable_module>
#include "spi_controller.h"

void spi_init(void)
{
	sysclk_enable_peripheral_clock(&SPIC);
	SPIC.CTRL = 0x51; //enables SPI and puts a  prescaler of 16
     cd8:	81 e5       	ldi	r24, 0x51	; 81
     cda:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     cde:	08 95       	ret

00000ce0 <spi_select>:
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     ce0:	e0 e4       	ldi	r30, 0x40	; 64
     ce2:	f6 e0       	ldi	r31, 0x06	; 6
     ce4:	94 81       	ldd	r25, Z+4	; 0x04
     ce6:	89 27       	eor	r24, r25
     ce8:	84 83       	std	Z+4, r24	; 0x04
     cea:	08 95       	ret

00000cec <spi_read>:
}

uint8_t spi_read(void)
{
	SPIC.DATA = 0xFF; // make the DATA register something we know
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait for the SPI interrupt flag to let us know the transfer is complete
     cf2:	e0 ec       	ldi	r30, 0xC0	; 192
     cf4:	f8 e0       	ldi	r31, 0x08	; 8
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	88 23       	and	r24, r24
     cfa:	ec f7       	brge	.-6      	; 0xcf6 <spi_read+0xa>
	
	return SPIC.DATA; // return the data from this function
     cfc:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     d00:	08 95       	ret

00000d02 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     d02:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     d06:	e0 ec       	ldi	r30, 0xC0	; 192
     d08:	f8 e0       	ldi	r31, 0x08	; 8
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	88 23       	and	r24, r24
     d0e:	ec f7       	brge	.-6      	; 0xd0a <spi_write+0x8>
     d10:	08 95       	ret

00000d12 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     d18:	f3 dc       	rcall	.-1562   	; 0x700 <usart_getchar>
     d1a:	88 83       	st	Y, r24
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     d22:	e6 cc       	rjmp	.-1588   	; 0x6f0 <usart_putchar>
}
     d24:	08 95       	ret

00000d26 <uart_terminal_init>:

#include <asf.h>
#include "uart.h"

void uart_terminal_init()
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	27 97       	sbiw	r28, 0x07	; 7
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     d34:	60 e1       	ldi	r22, 0x10	; 16
     d36:	85 e0       	ldi	r24, 0x05	; 5
     d38:	94 d0       	rcall	.+296    	; 0xe62 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     d3a:	e0 e8       	ldi	r30, 0x80	; 128
     d3c:	f6 e0       	ldi	r31, 0x06	; 6
     d3e:	80 81       	ld	r24, Z
     d40:	88 60       	ori	r24, 0x08	; 8
     d42:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     d44:	80 ea       	ldi	r24, 0xA0	; 160
     d46:	9a e0       	ldi	r25, 0x0A	; 10
     d48:	80 93 6b 20 	sts	0x206B, r24	; 0x80206b <stdio_base>
     d4c:	90 93 6c 20 	sts	0x206C, r25	; 0x80206c <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     d50:	81 e9       	ldi	r24, 0x91	; 145
     d52:	96 e0       	ldi	r25, 0x06	; 6
     d54:	80 93 69 20 	sts	0x2069, r24	; 0x802069 <ptr_put>
     d58:	90 93 6a 20 	sts	0x206A, r25	; 0x80206a <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     d5c:	89 e8       	ldi	r24, 0x89	; 137
     d5e:	96 e0       	ldi	r25, 0x06	; 6
     d60:	80 93 67 20 	sts	0x2067, r24	; 0x802067 <ptr_get>
     d64:	90 93 68 20 	sts	0x2068, r25	; 0x802068 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     d68:	e6 e0       	ldi	r30, 0x06	; 6
     d6a:	f0 e2       	ldi	r31, 0x20	; 32
     d6c:	84 81       	ldd	r24, Z+4	; 0x04
     d6e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     d70:	85 81       	ldd	r24, Z+5	; 0x05
     d72:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     d74:	86 81       	ldd	r24, Z+6	; 0x06
     d76:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	a2 81       	ldd	r26, Z+2	; 0x02
     d7e:	b3 81       	ldd	r27, Z+3	; 0x03
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	ab 83       	std	Y+3, r26	; 0x03
     d86:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     d88:	60 e1       	ldi	r22, 0x10	; 16
     d8a:	85 e0       	ldi	r24, 0x05	; 5
     d8c:	6a d0       	rcall	.+212    	; 0xe62 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     d8e:	be 01       	movw	r22, r28
     d90:	6f 5f       	subi	r22, 0xFF	; 255
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	80 ea       	ldi	r24, 0xA0	; 160
     d96:	9a e0       	ldi	r25, 0x0A	; 10
     d98:	cc dd       	rcall	.-1128   	; 0x932 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     d9a:	65 e6       	ldi	r22, 0x65	; 101
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	8e e7       	ldi	r24, 0x7E	; 126
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	2c d6       	rcall	.+3160   	; 0x19fc <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
	
     da4:	27 96       	adiw	r28, 0x07	; 7
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <rb16_write>:

//--------------16 bit signed functions--------------------
void rb16_write(RingBuffer16_t* buffer, const int16_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	fc 01       	movw	r30, r24
	for (uint8_t i = 0; i < length; i++)
     db6:	41 15       	cp	r20, r1
     db8:	51 05       	cpc	r21, r1
     dba:	b1 f1       	breq	.+108    	; 0xe28 <rb16_write+0x78>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	20 e0       	ldi	r18, 0x00	; 0
	{
		buffer->buffer[buffer->head] = data[i]; // data can be not be access greater length-1
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	db 01       	movw	r26, r22
     dc8:	a8 0f       	add	r26, r24
     dca:	b9 1f       	adc	r27, r25
     dcc:	8d 91       	ld	r24, X+
     dce:	9c 91       	ld	r25, X
     dd0:	a2 81       	ldd	r26, Z+2	; 0x02
     dd2:	b3 81       	ldd	r27, Z+3	; 0x03
     dd4:	aa 0f       	add	r26, r26
     dd6:	bb 1f       	adc	r27, r27
     dd8:	c6 81       	ldd	r28, Z+6	; 0x06
     dda:	d7 81       	ldd	r29, Z+7	; 0x07
     ddc:	ac 0f       	add	r26, r28
     dde:	bd 1f       	adc	r27, r29
     de0:	8d 93       	st	X+, r24
     de2:	9c 93       	st	X, r25
		buffer->head++;
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	82 83       	std	Z+2, r24	; 0x02
     dec:	93 83       	std	Z+3, r25	; 0x03
		
		if (buffer->head == buffer->array_length) //Next value to write to is beyond the end of the array
     dee:	a0 81       	ld	r26, Z
     df0:	b1 81       	ldd	r27, Z+1	; 0x01
     df2:	8a 17       	cp	r24, r26
     df4:	9b 07       	cpc	r25, r27
     df6:	11 f4       	brne	.+4      	; 0xdfc <rb16_write+0x4c>
		{
			buffer->head = 0;
     df8:	12 82       	std	Z+2, r1	; 0x02
     dfa:	13 82       	std	Z+3, r1	; 0x03
		} // end if
		
		if (buffer->head == buffer->tail)
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	93 81       	ldd	r25, Z+3	; 0x03
     e00:	c4 81       	ldd	r28, Z+4	; 0x04
     e02:	d5 81       	ldd	r29, Z+5	; 0x05
     e04:	8c 17       	cp	r24, r28
     e06:	9d 07       	cpc	r25, r29
     e08:	49 f4       	brne	.+18     	; 0xe1c <rb16_write+0x6c>
		{
			buffer->tail++;
     e0a:	01 96       	adiw	r24, 0x01	; 1
			
			if (buffer->tail == buffer->array_length){
     e0c:	a8 17       	cp	r26, r24
     e0e:	b9 07       	cpc	r27, r25
     e10:	19 f0       	breq	.+6      	; 0xe18 <rb16_write+0x68>
			buffer->head = 0;
		} // end if
		
		if (buffer->head == buffer->tail)
		{
			buffer->tail++;
     e12:	84 83       	std	Z+4, r24	; 0x04
     e14:	95 83       	std	Z+5, r25	; 0x05
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <rb16_write+0x6c>
			
			if (buffer->tail == buffer->array_length){
				buffer->tail = 0;
     e18:	14 82       	std	Z+4, r1	; 0x04
     e1a:	15 82       	std	Z+5, r1	; 0x05
//--------------16 bit signed functions--------------------
void rb16_write(RingBuffer16_t* buffer, const int16_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
	for (uint8_t i = 0; i < length; i++)
     e1c:	2f 5f       	subi	r18, 0xFF	; 255
     e1e:	82 2f       	mov	r24, r18
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	84 17       	cp	r24, r20
     e24:	95 07       	cpc	r25, r21
     e26:	68 f2       	brcs	.-102    	; 0xdc2 <rb16_write+0x12>
			if (buffer->tail == buffer->array_length){
				buffer->tail = 0;
			}// end if
		} // end if
	} // end for
} // end write_to_ring_buffer
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <rb16_init>:
void rb16_init(RingBuffer16_t* buffer, int16_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
     e2e:	fc 01       	movw	r30, r24
	buffer->head = 0; //Beginning of array
     e30:	12 82       	std	Z+2, r1	; 0x02
     e32:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
     e34:	14 82       	std	Z+4, r1	; 0x04
     e36:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
     e38:	66 83       	std	Z+6, r22	; 0x06
     e3a:	77 83       	std	Z+7, r23	; 0x07
	buffer->array_length = backing_array_length;
     e3c:	40 83       	st	Z, r20
     e3e:	51 83       	std	Z+1, r21	; 0x01
     e40:	08 95       	ret

00000e42 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     e48:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     e4c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     e50:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     e54:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     e58:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     e5c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     e60:	08 95       	ret

00000e62 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	1f 92       	push	r1
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e6c:	9f b7       	in	r25, 0x3f	; 63
     e6e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e70:	f8 94       	cli
	return flags;
     e72:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e74:	e8 2f       	mov	r30, r24
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	e0 59       	subi	r30, 0x90	; 144
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	60 95       	com	r22
     e7e:	80 81       	ld	r24, Z
     e80:	68 23       	and	r22, r24
     e82:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e84:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     e86:	0f 90       	pop	r0
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <__portable_avr_delay_cycles>:
	uint16_t reading = adc_read();
	double voltage = (.000495 * reading + .5016); // m and b are collected from testing
	double resistance = 6720 * (3.3 - voltage) / voltage; // 6720 is the resistance of the steady resistor
	val = (uint16_t) (100 / (3.354016E-3 + 2.569850E-4 * log(resistance / 10000) + 2.620131E-6 * pow(log(resistance / 10000), 2) + 6.383091E-8 * pow(log(resistance / 10000), 3))); // returns the temperature in hundredths of kelvin
	return val / 100.0; //returns the temperature in kelvin
}
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <__portable_avr_delay_cycles+0xa>
     e90:	61 50       	subi	r22, 0x01	; 1
     e92:	71 09       	sbc	r23, r1
     e94:	81 09       	sbc	r24, r1
     e96:	91 09       	sbc	r25, r1
     e98:	61 15       	cp	r22, r1
     e9a:	71 05       	cpc	r23, r1
     e9c:	81 05       	cpc	r24, r1
     e9e:	91 05       	cpc	r25, r1
     ea0:	b9 f7       	brne	.-18     	; 0xe90 <__portable_avr_delay_cycles+0x2>
     ea2:	08 95       	ret

00000ea4 <ms5607_init>:
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	80 e1       	ldi	r24, 0x10	; 16
     eaa:	1a df       	rcall	.-460    	; 0xce0 <spi_select>
     eac:	8e e1       	ldi	r24, 0x1E	; 30
     eae:	29 df       	rcall	.-430    	; 0xd02 <spi_write>
     eb0:	68 ee       	ldi	r22, 0xE8	; 232
     eb2:	73 e0       	ldi	r23, 0x03	; 3
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	ea df       	rcall	.-44     	; 0xe8e <__portable_avr_delay_cycles>
     eba:	80 e1       	ldi	r24, 0x10	; 16
     ebc:	11 df       	rcall	.-478    	; 0xce0 <spi_select>
     ebe:	6b e9       	ldi	r22, 0x9B	; 155
     ec0:	72 e0       	ldi	r23, 0x02	; 2
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	e3 df       	rcall	.-58     	; 0xe8e <__portable_avr_delay_cycles>
     ec8:	82 ea       	ldi	r24, 0xA2	; 162
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9e de       	rcall	.-708    	; 0xc0a <ms5607_read>
     ece:	c6 e5       	ldi	r28, 0x56	; 86
     ed0:	d0 e2       	ldi	r29, 0x20	; 32
     ed2:	88 83       	st	Y, r24
     ed4:	99 83       	std	Y+1, r25	; 0x01
     ed6:	84 ea       	ldi	r24, 0xA4	; 164
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	97 de       	rcall	.-722    	; 0xc0a <ms5607_read>
     edc:	8a 83       	std	Y+2, r24	; 0x02
     ede:	9b 83       	std	Y+3, r25	; 0x03
     ee0:	86 ea       	ldi	r24, 0xA6	; 166
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	92 de       	rcall	.-732    	; 0xc0a <ms5607_read>
     ee6:	8c 83       	std	Y+4, r24	; 0x04
     ee8:	9d 83       	std	Y+5, r25	; 0x05
     eea:	88 ea       	ldi	r24, 0xA8	; 168
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	8d de       	rcall	.-742    	; 0xc0a <ms5607_read>
     ef0:	8e 83       	std	Y+6, r24	; 0x06
     ef2:	9f 83       	std	Y+7, r25	; 0x07
     ef4:	8a ea       	ldi	r24, 0xAA	; 170
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	88 de       	rcall	.-752    	; 0xc0a <ms5607_read>
     efa:	88 87       	std	Y+8, r24	; 0x08
     efc:	99 87       	std	Y+9, r25	; 0x09
     efe:	8c ea       	ldi	r24, 0xAC	; 172
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	83 de       	rcall	.-762    	; 0xc0a <ms5607_read>
     f04:	8a 87       	std	Y+10, r24	; 0x0a
     f06:	9b 87       	std	Y+11, r25	; 0x0b
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <get_pressure>:
     f0e:	2f 92       	push	r2
     f10:	3f 92       	push	r3
     f12:	4f 92       	push	r4
     f14:	5f 92       	push	r5
     f16:	6f 92       	push	r6
     f18:	7f 92       	push	r7
     f1a:	8f 92       	push	r8
     f1c:	9f 92       	push	r9
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	7f de       	rcall	.-770    	; 0xc32 <ms5607_convert_d1>
     f34:	2b 01       	movw	r4, r22
     f36:	3c 01       	movw	r6, r24
     f38:	a4 de       	rcall	.-696    	; 0xc82 <ms5607_convert_d2>
     f3a:	4b 01       	movw	r8, r22
     f3c:	5c 01       	movw	r10, r24
     f3e:	c6 e5       	ldi	r28, 0x56	; 86
     f40:	d0 e2       	ldi	r29, 0x20	; 32
     f42:	48 85       	ldd	r20, Y+8	; 0x08
     f44:	59 85       	ldd	r21, Y+9	; 0x09
     f46:	24 2f       	mov	r18, r20
     f48:	35 2f       	mov	r19, r21
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	08 e0       	ldi	r16, 0x08	; 8
     f58:	2f d5       	rcall	.+2654   	; 0x19b8 <__ashldi3>
     f5a:	22 2e       	mov	r2, r18
     f5c:	33 2e       	mov	r3, r19
     f5e:	b4 2f       	mov	r27, r20
     f60:	a5 2f       	mov	r26, r21
     f62:	f6 2f       	mov	r31, r22
     f64:	e7 2f       	mov	r30, r23
     f66:	08 2f       	mov	r16, r24
     f68:	19 2f       	mov	r17, r25
     f6a:	28 2d       	mov	r18, r8
     f6c:	39 2d       	mov	r19, r9
     f6e:	4a 2d       	mov	r20, r10
     f70:	5b 2d       	mov	r21, r11
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a2 2c       	mov	r10, r2
     f7c:	b3 2c       	mov	r11, r3
     f7e:	cb 2e       	mov	r12, r27
     f80:	da 2e       	mov	r13, r26
     f82:	ef 2e       	mov	r14, r31
     f84:	fe 2e       	mov	r15, r30
     f86:	31 d5       	rcall	.+2658   	; 0x19ea <__subdi3>
     f88:	9e d2       	rcall	.+1340   	; 0x14c6 <__floatundisf>
     f8a:	4b 01       	movw	r8, r22
     f8c:	5c 01       	movw	r10, r24
     f8e:	6c 81       	ldd	r22, Y+4	; 0x04
     f90:	7d 81       	ldd	r23, Y+5	; 0x05
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	5a d2       	rcall	.+1204   	; 0x144c <__floatunsisf>
     f98:	a5 01       	movw	r20, r10
     f9a:	94 01       	movw	r18, r8
     f9c:	68 d3       	rcall	.+1744   	; 0x166e <__mulsf3>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	5c e3       	ldi	r21, 0x3C	; 60
     fa6:	63 d3       	rcall	.+1734   	; 0x166e <__mulsf3>
     fa8:	6b 01       	movw	r12, r22
     faa:	7c 01       	movw	r14, r24
     fac:	48 81       	ld	r20, Y
     fae:	59 81       	ldd	r21, Y+1	; 0x01
     fb0:	24 2f       	mov	r18, r20
     fb2:	35 2f       	mov	r19, r21
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	00 e1       	ldi	r16, 0x10	; 16
     fc2:	fa d4       	rcall	.+2548   	; 0x19b8 <__ashldi3>
     fc4:	80 d2       	rcall	.+1280   	; 0x14c6 <__floatundisf>
     fc6:	9b 01       	movw	r18, r22
     fc8:	ac 01       	movw	r20, r24
     fca:	c7 01       	movw	r24, r14
     fcc:	b6 01       	movw	r22, r12
     fce:	41 d1       	rcall	.+642    	; 0x1252 <__addsf3>
     fd0:	6b 01       	movw	r12, r22
     fd2:	7c 01       	movw	r14, r24
     fd4:	c3 01       	movw	r24, r6
     fd6:	b2 01       	movw	r22, r4
     fd8:	39 d2       	rcall	.+1138   	; 0x144c <__floatunsisf>
     fda:	9b 01       	movw	r18, r22
     fdc:	ac 01       	movw	r20, r24
     fde:	c7 01       	movw	r24, r14
     fe0:	b6 01       	movw	r22, r12
     fe2:	45 d3       	rcall	.+1674   	; 0x166e <__mulsf3>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	55 e3       	ldi	r21, 0x35	; 53
     fec:	40 d3       	rcall	.+1664   	; 0x166e <__mulsf3>
     fee:	6b 01       	movw	r12, r22
     ff0:	7c 01       	movw	r14, r24
     ff2:	6e 81       	ldd	r22, Y+6	; 0x06
     ff4:	7f 81       	ldd	r23, Y+7	; 0x07
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	28 d2       	rcall	.+1104   	; 0x144c <__floatunsisf>
     ffc:	a5 01       	movw	r20, r10
     ffe:	94 01       	movw	r18, r8
    1000:	36 d3       	rcall	.+1644   	; 0x166e <__mulsf3>
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5c e3       	ldi	r21, 0x3C	; 60
    100a:	31 d3       	rcall	.+1634   	; 0x166e <__mulsf3>
    100c:	4b 01       	movw	r8, r22
    100e:	5c 01       	movw	r10, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	28 2f       	mov	r18, r24
    1016:	39 2f       	mov	r19, r25
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	01 e1       	ldi	r16, 0x11	; 17
    1026:	c8 d4       	rcall	.+2448   	; 0x19b8 <__ashldi3>
    1028:	4e d2       	rcall	.+1180   	; 0x14c6 <__floatundisf>
    102a:	9b 01       	movw	r18, r22
    102c:	ac 01       	movw	r20, r24
    102e:	c5 01       	movw	r24, r10
    1030:	b4 01       	movw	r22, r8
    1032:	0f d1       	rcall	.+542    	; 0x1252 <__addsf3>
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	c7 01       	movw	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	09 d1       	rcall	.+530    	; 0x1250 <__subsf3>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	58 e3       	ldi	r21, 0x38	; 56
    1046:	13 d3       	rcall	.+1574   	; 0x166e <__mulsf3>
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	9f 90       	pop	r9
    105e:	8f 90       	pop	r8
    1060:	7f 90       	pop	r7
    1062:	6f 90       	pop	r6
    1064:	5f 90       	pop	r5
    1066:	4f 90       	pop	r4
    1068:	3f 90       	pop	r3
    106a:	2f 90       	pop	r2
    106c:	08 95       	ret

0000106e <get_altitude>:

double get_altitude(double press){
    106e:	4f 92       	push	r4
    1070:	5f 92       	push	r5
    1072:	6f 92       	push	r6
    1074:	7f 92       	push	r7
    1076:	8f 92       	push	r8
    1078:	9f 92       	push	r9
    107a:	af 92       	push	r10
    107c:	bf 92       	push	r11
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	2b 01       	movw	r4, r22
    1088:	3c 01       	movw	r6, r24
	double val = 0;
	val = ground_t * (pow(ground_p / press, R * L / g_0) - 1) / L;
    108a:	c0 90 11 20 	lds	r12, 0x2011	; 0x802011 <L>
    108e:	d0 90 12 20 	lds	r13, 0x2012	; 0x802012 <L+0x1>
    1092:	e0 90 13 20 	lds	r14, 0x2013	; 0x802013 <L+0x2>
    1096:	f0 90 14 20 	lds	r15, 0x2014	; 0x802014 <L+0x3>
    109a:	20 91 15 20 	lds	r18, 0x2015	; 0x802015 <R>
    109e:	30 91 16 20 	lds	r19, 0x2016	; 0x802016 <R+0x1>
    10a2:	40 91 17 20 	lds	r20, 0x2017	; 0x802017 <R+0x2>
    10a6:	50 91 18 20 	lds	r21, 0x2018	; 0x802018 <R+0x3>
    10aa:	c7 01       	movw	r24, r14
    10ac:	b6 01       	movw	r22, r12
    10ae:	df d2       	rcall	.+1470   	; 0x166e <__mulsf3>
    10b0:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <g_0>
    10b4:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <g_0+0x1>
    10b8:	40 91 0f 20 	lds	r20, 0x200F	; 0x80200f <g_0+0x2>
    10bc:	50 91 10 20 	lds	r21, 0x2010	; 0x802010 <g_0+0x3>
    10c0:	2c d1       	rcall	.+600    	; 0x131a <__divsf3>
    10c2:	4b 01       	movw	r8, r22
    10c4:	5c 01       	movw	r10, r24
    10c6:	a3 01       	movw	r20, r6
    10c8:	92 01       	movw	r18, r4
    10ca:	60 91 1d 20 	lds	r22, 0x201D	; 0x80201d <ground_p>
    10ce:	70 91 1e 20 	lds	r23, 0x201E	; 0x80201e <ground_p+0x1>
    10d2:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <ground_p+0x2>
    10d6:	90 91 20 20 	lds	r25, 0x2020	; 0x802020 <ground_p+0x3>
    10da:	1f d1       	rcall	.+574    	; 0x131a <__divsf3>
    10dc:	a5 01       	movw	r20, r10
    10de:	94 01       	movw	r18, r8
    10e0:	29 d3       	rcall	.+1618   	; 0x1734 <pow>
	return val;		//returns altitude in meters
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	b2 d0       	rcall	.+356    	; 0x1250 <__subsf3>
    10ec:	20 91 19 20 	lds	r18, 0x2019	; 0x802019 <ground_t>
    10f0:	30 91 1a 20 	lds	r19, 0x201A	; 0x80201a <ground_t+0x1>
    10f4:	40 91 1b 20 	lds	r20, 0x201B	; 0x80201b <ground_t+0x2>
    10f8:	50 91 1c 20 	lds	r21, 0x201C	; 0x80201c <ground_t+0x3>
    10fc:	b8 d2       	rcall	.+1392   	; 0x166e <__mulsf3>
    10fe:	a7 01       	movw	r20, r14
    1100:	96 01       	movw	r18, r12
    1102:	0b d1       	rcall	.+534    	; 0x131a <__divsf3>
}
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	bf 90       	pop	r11
    110e:	af 90       	pop	r10
    1110:	9f 90       	pop	r9
    1112:	8f 90       	pop	r8
    1114:	7f 90       	pop	r7
    1116:	6f 90       	pop	r6
    1118:	5f 90       	pop	r5
    111a:	4f 90       	pop	r4
    111c:	08 95       	ret

0000111e <system_init>:


// Sensor functions
void system_init(void){
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    111e:	91 de       	rcall	.-734    	; 0xe42 <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    1120:	6b e9       	ldi	r22, 0x9B	; 155
    1122:	72 e0       	ldi	r23, 0x02	; 2
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	b2 de       	rcall	.-668    	; 0xe8e <__portable_avr_delay_cycles>
	
	// Initialization of pins
	PORTC.DIR = 0xBB; // makes Port C have pins, 7, 5, 4, 3, 1, 0 be output (0b10111011)
    112a:	e0 e4       	ldi	r30, 0x40	; 64
    112c:	f6 e0       	ldi	r31, 0x06	; 6
    112e:	8b eb       	ldi	r24, 0xBB	; 187
    1130:	80 83       	st	Z, r24
	PORTC.OUT = 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    1132:	80 e1       	ldi	r24, 0x10	; 16
    1134:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL = PMIC_LOLVLEN_bm; // enables lo level interrupts
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Driver Initialization
	uart_terminal_init();
    113c:	f4 dd       	rcall	.-1048   	; 0xd26 <uart_terminal_init>
	delay_ms(2);
    113e:	6b e9       	ldi	r22, 0x9B	; 155
    1140:	72 e0       	ldi	r23, 0x02	; 2
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a3 de       	rcall	.-698    	; 0xe8e <__portable_avr_delay_cycles>
	
//	adc_init();
	delay_ms(2);
    1148:	6b e9       	ldi	r22, 0x9B	; 155
    114a:	72 e0       	ldi	r23, 0x02	; 2
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
	
	spi_init();
    1150:	9e de       	rcall	.-708    	; 0xe8e <__portable_avr_delay_cycles>
	delay_ms(2);
    1152:	bf dd       	rcall	.-1154   	; 0xcd2 <spi_init>
    1154:	6b e9       	ldi	r22, 0x9B	; 155
    1156:	72 e0       	ldi	r23, 0x02	; 2
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
	
	ms5607_init();
    115c:	98 de       	rcall	.-720    	; 0xe8e <__portable_avr_delay_cycles>
    115e:	a2 de       	rcall	.-700    	; 0xea4 <ms5607_init>
	delay_ms(2);
    1160:	6b e9       	ldi	r22, 0x9B	; 155
    1162:	72 e0       	ldi	r23, 0x02	; 2
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	92 de       	rcall	.-732    	; 0xe8e <__portable_avr_delay_cycles>
    116a:	d1 de       	rcall	.-606    	; 0xf0e <get_pressure>
	
	
	// Initialization of variables
	ground_p = get_pressure();
    116c:	60 93 1d 20 	sts	0x201D, r22	; 0x80201d <ground_p>
    1170:	70 93 1e 20 	sts	0x201E, r23	; 0x80201e <ground_p+0x1>
    1174:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <ground_p+0x2>
    1178:	90 93 20 20 	sts	0x2020, r25	; 0x802020 <ground_p+0x3>
    117c:	78 df       	rcall	.-272    	; 0x106e <get_altitude>
	//ground_t = get_temperature();
	ground_a = get_altitude(ground_p);
    117e:	60 93 62 20 	sts	0x2062, r22	; 0x802062 <ground_a>
    1182:	70 93 63 20 	sts	0x2063, r23	; 0x802063 <ground_a+0x1>
    1186:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <ground_a+0x2>
    118a:	90 93 65 20 	sts	0x2065, r25	; 0x802065 <ground_a+0x3>
    118e:	08 95       	ret

00001190 <main>:
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
uint16_t c[] = {0,0,0,0,0,0};


////////////////////////////// Functions ///////////////////////////////
int main (void)
{
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	6e 97       	sbiw	r28, 0x1e	; 30
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	de bf       	out	0x3e, r29	; 62
	system_init();
    119e:	bf df       	rcall	.-130    	; 0x111e <system_init>
	
	int16_t alt_array[10];
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    11a0:	4a e0       	ldi	r20, 0x0A	; 10
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	be 01       	movw	r22, r28
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	ce 01       	movw	r24, r28
    11ac:	45 96       	adiw	r24, 0x15	; 21
    11ae:	3f de       	rcall	.-898    	; 0xe2e <rb16_init>
	uint8_t mem_array[10];
	RingBufferu8_t gcs_comms;
	rbu8_init(&gcs_comms, mem_array, 10);
	*/
	
	printf("Initialized\n");
    11b0:	81 e2       	ldi	r24, 0x21	; 33
    11b2:	90 e2       	ldi	r25, 0x20	; 32
    11b4:	80 d4       	rcall	.+2304   	; 0x1ab6 <puts>
		
		// Check Sensors
		double press = get_pressure();
		double temp = 288.15; //get_temperature();
		double alt = get_altitude(press);
		int16_t a = (int16_t) alt*100;
    11b6:	0f 2e       	mov	r0, r31
    11b8:	f4 e6       	ldi	r31, 0x64	; 100
    11ba:	5f 2e       	mov	r5, r31
    11bc:	f0 2d       	mov	r31, r0
		rb16_write(&altitudes, &a, 1);
		//printf("%li\n",(int32_t)press);
		printf("%li, %i, %i\n", (int32_t) (press*10), (int16_t) (alt * 100), (int16_t) (temp * 100));
    11be:	0f 2e       	mov	r0, r31
    11c0:	f0 e7       	ldi	r31, 0x70	; 112
    11c2:	6f 2e       	mov	r6, r31
    11c4:	f0 2d       	mov	r31, r0
    11c6:	0f 2e       	mov	r0, r31
    11c8:	ff e8       	ldi	r31, 0x8F	; 143
    11ca:	7f 2e       	mov	r7, r31
    11cc:	f0 2d       	mov	r31, r0
    11ce:	0d e2       	ldi	r16, 0x2D	; 45
    11d0:	10 e2       	ldi	r17, 0x20	; 32
	
	printf("Initialized\n");
	
	while(1){
		//Gives each flight state their unique tasks
		switch(state){
    11d2:	80 91 66 20 	lds	r24, 0x2066	; 0x802066 <state>
    11d6:	84 30       	cpi	r24, 0x04	; 4
			case 2:
				break;
			case 3:
				break;
			default:
				state = 0;
    11d8:	10 f0       	brcs	.+4      	; 0x11de <main+0x4e>
    11da:	10 92 66 20 	sts	0x2066, r1	; 0x802066 <state>
				break;
		}
		
		
		// Check Sensors
		double press = get_pressure();
    11de:	97 de       	rcall	.-722    	; 0xf0e <get_pressure>
    11e0:	6b 01       	movw	r12, r22
		double temp = 288.15; //get_temperature();
		double alt = get_altitude(press);
    11e2:	7c 01       	movw	r14, r24
    11e4:	44 df       	rcall	.-376    	; 0x106e <get_altitude>
    11e6:	4b 01       	movw	r8, r22
    11e8:	5c 01       	movw	r10, r24
		int16_t a = (int16_t) alt*100;
    11ea:	ff d0       	rcall	.+510    	; 0x13ea <__fixsfsi>
    11ec:	56 9e       	mul	r5, r22
    11ee:	90 01       	movw	r18, r0
    11f0:	57 9e       	mul	r5, r23
    11f2:	30 0d       	add	r19, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	2d 8f       	std	Y+29, r18	; 0x1d
    11f8:	3e 8f       	std	Y+30, r19	; 0x1e
    11fa:	41 e0       	ldi	r20, 0x01	; 1
		rb16_write(&altitudes, &a, 1);
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	be 01       	movw	r22, r28
    1200:	63 5e       	subi	r22, 0xE3	; 227
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	ce 01       	movw	r24, r28
    1206:	45 96       	adiw	r24, 0x15	; 21
    1208:	d3 dd       	rcall	.-1114   	; 0xdb0 <rb16_write>
    120a:	6f 92       	push	r6
		//printf("%li\n",(int32_t)press);
		printf("%li, %i, %i\n", (int32_t) (press*10), (int16_t) (alt * 100), (int16_t) (temp * 100));
    120c:	7f 92       	push	r7
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	48 ec       	ldi	r20, 0xC8	; 200
    1214:	52 e4       	ldi	r21, 0x42	; 66
    1216:	c5 01       	movw	r24, r10
    1218:	b4 01       	movw	r22, r8
    121a:	29 d2       	rcall	.+1106   	; 0x166e <__mulsf3>
    121c:	e6 d0       	rcall	.+460    	; 0x13ea <__fixsfsi>
    121e:	7f 93       	push	r23
    1220:	6f 93       	push	r22
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e2       	ldi	r20, 0x20	; 32
    1228:	51 e4       	ldi	r21, 0x41	; 65
    122a:	c7 01       	movw	r24, r14
    122c:	b6 01       	movw	r22, r12
    122e:	1f d2       	rcall	.+1086   	; 0x166e <__mulsf3>
    1230:	dc d0       	rcall	.+440    	; 0x13ea <__fixsfsi>
    1232:	9f 93       	push	r25
    1234:	8f 93       	push	r24
    1236:	7f 93       	push	r23
    1238:	6f 93       	push	r22
    123a:	1f 93       	push	r17
    123c:	0f 93       	push	r16
    123e:	28 d4       	rcall	.+2128   	; 0x1a90 <printf>
		delay_ms(500);
    1240:	6b e0       	ldi	r22, 0x0B	; 11
    1242:	7b e8       	ldi	r23, 0x8B	; 139
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	22 de       	rcall	.-956    	; 0xe8e <__portable_avr_delay_cycles>
    124a:	cd bf       	out	0x3d, r28	; 61
	}
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	c1 cf       	rjmp	.-126    	; 0x11d2 <main+0x42>

00001250 <__subsf3>:
    1250:	50 58       	subi	r21, 0x80	; 128

00001252 <__addsf3>:
    1252:	bb 27       	eor	r27, r27
    1254:	aa 27       	eor	r26, r26
    1256:	0e d0       	rcall	.+28     	; 0x1274 <__addsf3x>
    1258:	8b c1       	rjmp	.+790    	; 0x1570 <__fp_round>
    125a:	7c d1       	rcall	.+760    	; 0x1554 <__fp_pscA>
    125c:	30 f0       	brcs	.+12     	; 0x126a <__addsf3+0x18>
    125e:	81 d1       	rcall	.+770    	; 0x1562 <__fp_pscB>
    1260:	20 f0       	brcs	.+8      	; 0x126a <__addsf3+0x18>
    1262:	31 f4       	brne	.+12     	; 0x1270 <__addsf3+0x1e>
    1264:	9f 3f       	cpi	r25, 0xFF	; 255
    1266:	11 f4       	brne	.+4      	; 0x126c <__addsf3+0x1a>
    1268:	1e f4       	brtc	.+6      	; 0x1270 <__addsf3+0x1e>
    126a:	71 c1       	rjmp	.+738    	; 0x154e <__fp_nan>
    126c:	0e f4       	brtc	.+2      	; 0x1270 <__addsf3+0x1e>
    126e:	e0 95       	com	r30
    1270:	e7 fb       	bst	r30, 7
    1272:	67 c1       	rjmp	.+718    	; 0x1542 <__fp_inf>

00001274 <__addsf3x>:
    1274:	e9 2f       	mov	r30, r25
    1276:	8d d1       	rcall	.+794    	; 0x1592 <__fp_split3>
    1278:	80 f3       	brcs	.-32     	; 0x125a <__addsf3+0x8>
    127a:	ba 17       	cp	r27, r26
    127c:	62 07       	cpc	r22, r18
    127e:	73 07       	cpc	r23, r19
    1280:	84 07       	cpc	r24, r20
    1282:	95 07       	cpc	r25, r21
    1284:	18 f0       	brcs	.+6      	; 0x128c <__addsf3x+0x18>
    1286:	71 f4       	brne	.+28     	; 0x12a4 <__addsf3x+0x30>
    1288:	9e f5       	brtc	.+102    	; 0x12f0 <__addsf3x+0x7c>
    128a:	a5 c1       	rjmp	.+842    	; 0x15d6 <__fp_zero>
    128c:	0e f4       	brtc	.+2      	; 0x1290 <__addsf3x+0x1c>
    128e:	e0 95       	com	r30
    1290:	0b 2e       	mov	r0, r27
    1292:	ba 2f       	mov	r27, r26
    1294:	a0 2d       	mov	r26, r0
    1296:	0b 01       	movw	r0, r22
    1298:	b9 01       	movw	r22, r18
    129a:	90 01       	movw	r18, r0
    129c:	0c 01       	movw	r0, r24
    129e:	ca 01       	movw	r24, r20
    12a0:	a0 01       	movw	r20, r0
    12a2:	11 24       	eor	r1, r1
    12a4:	ff 27       	eor	r31, r31
    12a6:	59 1b       	sub	r21, r25
    12a8:	99 f0       	breq	.+38     	; 0x12d0 <__addsf3x+0x5c>
    12aa:	59 3f       	cpi	r21, 0xF9	; 249
    12ac:	50 f4       	brcc	.+20     	; 0x12c2 <__addsf3x+0x4e>
    12ae:	50 3e       	cpi	r21, 0xE0	; 224
    12b0:	68 f1       	brcs	.+90     	; 0x130c <__addsf3x+0x98>
    12b2:	1a 16       	cp	r1, r26
    12b4:	f0 40       	sbci	r31, 0x00	; 0
    12b6:	a2 2f       	mov	r26, r18
    12b8:	23 2f       	mov	r18, r19
    12ba:	34 2f       	mov	r19, r20
    12bc:	44 27       	eor	r20, r20
    12be:	58 5f       	subi	r21, 0xF8	; 248
    12c0:	f3 cf       	rjmp	.-26     	; 0x12a8 <__addsf3x+0x34>
    12c2:	46 95       	lsr	r20
    12c4:	37 95       	ror	r19
    12c6:	27 95       	ror	r18
    12c8:	a7 95       	ror	r26
    12ca:	f0 40       	sbci	r31, 0x00	; 0
    12cc:	53 95       	inc	r21
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <__addsf3x+0x4e>
    12d0:	7e f4       	brtc	.+30     	; 0x12f0 <__addsf3x+0x7c>
    12d2:	1f 16       	cp	r1, r31
    12d4:	ba 0b       	sbc	r27, r26
    12d6:	62 0b       	sbc	r22, r18
    12d8:	73 0b       	sbc	r23, r19
    12da:	84 0b       	sbc	r24, r20
    12dc:	ba f0       	brmi	.+46     	; 0x130c <__addsf3x+0x98>
    12de:	91 50       	subi	r25, 0x01	; 1
    12e0:	a1 f0       	breq	.+40     	; 0x130a <__addsf3x+0x96>
    12e2:	ff 0f       	add	r31, r31
    12e4:	bb 1f       	adc	r27, r27
    12e6:	66 1f       	adc	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	c2 f7       	brpl	.-16     	; 0x12de <__addsf3x+0x6a>
    12ee:	0e c0       	rjmp	.+28     	; 0x130c <__addsf3x+0x98>
    12f0:	ba 0f       	add	r27, r26
    12f2:	62 1f       	adc	r22, r18
    12f4:	73 1f       	adc	r23, r19
    12f6:	84 1f       	adc	r24, r20
    12f8:	48 f4       	brcc	.+18     	; 0x130c <__addsf3x+0x98>
    12fa:	87 95       	ror	r24
    12fc:	77 95       	ror	r23
    12fe:	67 95       	ror	r22
    1300:	b7 95       	ror	r27
    1302:	f7 95       	ror	r31
    1304:	9e 3f       	cpi	r25, 0xFE	; 254
    1306:	08 f0       	brcs	.+2      	; 0x130a <__addsf3x+0x96>
    1308:	b3 cf       	rjmp	.-154    	; 0x1270 <__addsf3+0x1e>
    130a:	93 95       	inc	r25
    130c:	88 0f       	add	r24, r24
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__addsf3x+0x9e>
    1310:	99 27       	eor	r25, r25
    1312:	ee 0f       	add	r30, r30
    1314:	97 95       	ror	r25
    1316:	87 95       	ror	r24
    1318:	08 95       	ret

0000131a <__divsf3>:
    131a:	0c d0       	rcall	.+24     	; 0x1334 <__divsf3x>
    131c:	29 c1       	rjmp	.+594    	; 0x1570 <__fp_round>
    131e:	21 d1       	rcall	.+578    	; 0x1562 <__fp_pscB>
    1320:	40 f0       	brcs	.+16     	; 0x1332 <__divsf3+0x18>
    1322:	18 d1       	rcall	.+560    	; 0x1554 <__fp_pscA>
    1324:	30 f0       	brcs	.+12     	; 0x1332 <__divsf3+0x18>
    1326:	21 f4       	brne	.+8      	; 0x1330 <__divsf3+0x16>
    1328:	5f 3f       	cpi	r21, 0xFF	; 255
    132a:	19 f0       	breq	.+6      	; 0x1332 <__divsf3+0x18>
    132c:	0a c1       	rjmp	.+532    	; 0x1542 <__fp_inf>
    132e:	51 11       	cpse	r21, r1
    1330:	53 c1       	rjmp	.+678    	; 0x15d8 <__fp_szero>
    1332:	0d c1       	rjmp	.+538    	; 0x154e <__fp_nan>

00001334 <__divsf3x>:
    1334:	2e d1       	rcall	.+604    	; 0x1592 <__fp_split3>
    1336:	98 f3       	brcs	.-26     	; 0x131e <__divsf3+0x4>

00001338 <__divsf3_pse>:
    1338:	99 23       	and	r25, r25
    133a:	c9 f3       	breq	.-14     	; 0x132e <__divsf3+0x14>
    133c:	55 23       	and	r21, r21
    133e:	b1 f3       	breq	.-20     	; 0x132c <__divsf3+0x12>
    1340:	95 1b       	sub	r25, r21
    1342:	55 0b       	sbc	r21, r21
    1344:	bb 27       	eor	r27, r27
    1346:	aa 27       	eor	r26, r26
    1348:	62 17       	cp	r22, r18
    134a:	73 07       	cpc	r23, r19
    134c:	84 07       	cpc	r24, r20
    134e:	38 f0       	brcs	.+14     	; 0x135e <__divsf3_pse+0x26>
    1350:	9f 5f       	subi	r25, 0xFF	; 255
    1352:	5f 4f       	sbci	r21, 0xFF	; 255
    1354:	22 0f       	add	r18, r18
    1356:	33 1f       	adc	r19, r19
    1358:	44 1f       	adc	r20, r20
    135a:	aa 1f       	adc	r26, r26
    135c:	a9 f3       	breq	.-22     	; 0x1348 <__divsf3_pse+0x10>
    135e:	33 d0       	rcall	.+102    	; 0x13c6 <__divsf3_pse+0x8e>
    1360:	0e 2e       	mov	r0, r30
    1362:	3a f0       	brmi	.+14     	; 0x1372 <__divsf3_pse+0x3a>
    1364:	e0 e8       	ldi	r30, 0x80	; 128
    1366:	30 d0       	rcall	.+96     	; 0x13c8 <__divsf3_pse+0x90>
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	50 40       	sbci	r21, 0x00	; 0
    136c:	e6 95       	lsr	r30
    136e:	00 1c       	adc	r0, r0
    1370:	ca f7       	brpl	.-14     	; 0x1364 <__divsf3_pse+0x2c>
    1372:	29 d0       	rcall	.+82     	; 0x13c6 <__divsf3_pse+0x8e>
    1374:	fe 2f       	mov	r31, r30
    1376:	27 d0       	rcall	.+78     	; 0x13c6 <__divsf3_pse+0x8e>
    1378:	66 0f       	add	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	bb 1f       	adc	r27, r27
    1380:	26 17       	cp	r18, r22
    1382:	37 07       	cpc	r19, r23
    1384:	48 07       	cpc	r20, r24
    1386:	ab 07       	cpc	r26, r27
    1388:	b0 e8       	ldi	r27, 0x80	; 128
    138a:	09 f0       	breq	.+2      	; 0x138e <__divsf3_pse+0x56>
    138c:	bb 0b       	sbc	r27, r27
    138e:	80 2d       	mov	r24, r0
    1390:	bf 01       	movw	r22, r30
    1392:	ff 27       	eor	r31, r31
    1394:	93 58       	subi	r25, 0x83	; 131
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	2a f0       	brmi	.+10     	; 0x13a4 <__divsf3_pse+0x6c>
    139a:	9e 3f       	cpi	r25, 0xFE	; 254
    139c:	51 05       	cpc	r21, r1
    139e:	68 f0       	brcs	.+26     	; 0x13ba <__divsf3_pse+0x82>
    13a0:	d0 c0       	rjmp	.+416    	; 0x1542 <__fp_inf>
    13a2:	1a c1       	rjmp	.+564    	; 0x15d8 <__fp_szero>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	ec f3       	brlt	.-6      	; 0x13a2 <__divsf3_pse+0x6a>
    13a8:	98 3e       	cpi	r25, 0xE8	; 232
    13aa:	dc f3       	brlt	.-10     	; 0x13a2 <__divsf3_pse+0x6a>
    13ac:	86 95       	lsr	r24
    13ae:	77 95       	ror	r23
    13b0:	67 95       	ror	r22
    13b2:	b7 95       	ror	r27
    13b4:	f7 95       	ror	r31
    13b6:	9f 5f       	subi	r25, 0xFF	; 255
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <__divsf3_pse+0x74>
    13ba:	88 0f       	add	r24, r24
    13bc:	91 1d       	adc	r25, r1
    13be:	96 95       	lsr	r25
    13c0:	87 95       	ror	r24
    13c2:	97 f9       	bld	r25, 7
    13c4:	08 95       	ret
    13c6:	e1 e0       	ldi	r30, 0x01	; 1
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	bb 1f       	adc	r27, r27
    13d0:	62 17       	cp	r22, r18
    13d2:	73 07       	cpc	r23, r19
    13d4:	84 07       	cpc	r24, r20
    13d6:	ba 07       	cpc	r27, r26
    13d8:	20 f0       	brcs	.+8      	; 0x13e2 <__divsf3_pse+0xaa>
    13da:	62 1b       	sub	r22, r18
    13dc:	73 0b       	sbc	r23, r19
    13de:	84 0b       	sbc	r24, r20
    13e0:	ba 0b       	sbc	r27, r26
    13e2:	ee 1f       	adc	r30, r30
    13e4:	88 f7       	brcc	.-30     	; 0x13c8 <__divsf3_pse+0x90>
    13e6:	e0 95       	com	r30
    13e8:	08 95       	ret

000013ea <__fixsfsi>:
    13ea:	04 d0       	rcall	.+8      	; 0x13f4 <__fixunssfsi>
    13ec:	68 94       	set
    13ee:	b1 11       	cpse	r27, r1
    13f0:	f3 c0       	rjmp	.+486    	; 0x15d8 <__fp_szero>
    13f2:	08 95       	ret

000013f4 <__fixunssfsi>:
    13f4:	d6 d0       	rcall	.+428    	; 0x15a2 <__fp_splitA>
    13f6:	88 f0       	brcs	.+34     	; 0x141a <__fixunssfsi+0x26>
    13f8:	9f 57       	subi	r25, 0x7F	; 127
    13fa:	90 f0       	brcs	.+36     	; 0x1420 <__fixunssfsi+0x2c>
    13fc:	b9 2f       	mov	r27, r25
    13fe:	99 27       	eor	r25, r25
    1400:	b7 51       	subi	r27, 0x17	; 23
    1402:	a0 f0       	brcs	.+40     	; 0x142c <__fixunssfsi+0x38>
    1404:	d1 f0       	breq	.+52     	; 0x143a <__fixunssfsi+0x46>
    1406:	66 0f       	add	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	1a f0       	brmi	.+6      	; 0x1416 <__fixunssfsi+0x22>
    1410:	ba 95       	dec	r27
    1412:	c9 f7       	brne	.-14     	; 0x1406 <__fixunssfsi+0x12>
    1414:	12 c0       	rjmp	.+36     	; 0x143a <__fixunssfsi+0x46>
    1416:	b1 30       	cpi	r27, 0x01	; 1
    1418:	81 f0       	breq	.+32     	; 0x143a <__fixunssfsi+0x46>
    141a:	dd d0       	rcall	.+442    	; 0x15d6 <__fp_zero>
    141c:	b1 e0       	ldi	r27, 0x01	; 1
    141e:	08 95       	ret
    1420:	da c0       	rjmp	.+436    	; 0x15d6 <__fp_zero>
    1422:	67 2f       	mov	r22, r23
    1424:	78 2f       	mov	r23, r24
    1426:	88 27       	eor	r24, r24
    1428:	b8 5f       	subi	r27, 0xF8	; 248
    142a:	39 f0       	breq	.+14     	; 0x143a <__fixunssfsi+0x46>
    142c:	b9 3f       	cpi	r27, 0xF9	; 249
    142e:	cc f3       	brlt	.-14     	; 0x1422 <__fixunssfsi+0x2e>
    1430:	86 95       	lsr	r24
    1432:	77 95       	ror	r23
    1434:	67 95       	ror	r22
    1436:	b3 95       	inc	r27
    1438:	d9 f7       	brne	.-10     	; 0x1430 <__fixunssfsi+0x3c>
    143a:	3e f4       	brtc	.+14     	; 0x144a <__fixunssfsi+0x56>
    143c:	90 95       	com	r25
    143e:	80 95       	com	r24
    1440:	70 95       	com	r23
    1442:	61 95       	neg	r22
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	8f 4f       	sbci	r24, 0xFF	; 255
    1448:	9f 4f       	sbci	r25, 0xFF	; 255
    144a:	08 95       	ret

0000144c <__floatunsisf>:
    144c:	e8 94       	clt
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <__floatsisf+0x12>

00001450 <__floatsisf>:
    1450:	97 fb       	bst	r25, 7
    1452:	3e f4       	brtc	.+14     	; 0x1462 <__floatsisf+0x12>
    1454:	90 95       	com	r25
    1456:	80 95       	com	r24
    1458:	70 95       	com	r23
    145a:	61 95       	neg	r22
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	8f 4f       	sbci	r24, 0xFF	; 255
    1460:	9f 4f       	sbci	r25, 0xFF	; 255
    1462:	99 23       	and	r25, r25
    1464:	a9 f0       	breq	.+42     	; 0x1490 <__floatsisf+0x40>
    1466:	f9 2f       	mov	r31, r25
    1468:	96 e9       	ldi	r25, 0x96	; 150
    146a:	bb 27       	eor	r27, r27
    146c:	93 95       	inc	r25
    146e:	f6 95       	lsr	r31
    1470:	87 95       	ror	r24
    1472:	77 95       	ror	r23
    1474:	67 95       	ror	r22
    1476:	b7 95       	ror	r27
    1478:	f1 11       	cpse	r31, r1
    147a:	f8 cf       	rjmp	.-16     	; 0x146c <__floatsisf+0x1c>
    147c:	fa f4       	brpl	.+62     	; 0x14bc <__floatsisf+0x6c>
    147e:	bb 0f       	add	r27, r27
    1480:	11 f4       	brne	.+4      	; 0x1486 <__floatsisf+0x36>
    1482:	60 ff       	sbrs	r22, 0
    1484:	1b c0       	rjmp	.+54     	; 0x14bc <__floatsisf+0x6c>
    1486:	6f 5f       	subi	r22, 0xFF	; 255
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	8f 4f       	sbci	r24, 0xFF	; 255
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	16 c0       	rjmp	.+44     	; 0x14bc <__floatsisf+0x6c>
    1490:	88 23       	and	r24, r24
    1492:	11 f0       	breq	.+4      	; 0x1498 <__floatsisf+0x48>
    1494:	96 e9       	ldi	r25, 0x96	; 150
    1496:	11 c0       	rjmp	.+34     	; 0x14ba <__floatsisf+0x6a>
    1498:	77 23       	and	r23, r23
    149a:	21 f0       	breq	.+8      	; 0x14a4 <__floatsisf+0x54>
    149c:	9e e8       	ldi	r25, 0x8E	; 142
    149e:	87 2f       	mov	r24, r23
    14a0:	76 2f       	mov	r23, r22
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <__floatsisf+0x5e>
    14a4:	66 23       	and	r22, r22
    14a6:	71 f0       	breq	.+28     	; 0x14c4 <__floatsisf+0x74>
    14a8:	96 e8       	ldi	r25, 0x86	; 134
    14aa:	86 2f       	mov	r24, r22
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	2a f0       	brmi	.+10     	; 0x14bc <__floatsisf+0x6c>
    14b2:	9a 95       	dec	r25
    14b4:	66 0f       	add	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	da f7       	brpl	.-10     	; 0x14b2 <__floatsisf+0x62>
    14bc:	88 0f       	add	r24, r24
    14be:	96 95       	lsr	r25
    14c0:	87 95       	ror	r24
    14c2:	97 f9       	bld	r25, 7
    14c4:	08 95       	ret

000014c6 <__floatundisf>:
    14c6:	e8 94       	clt

000014c8 <__fp_di2sf>:
    14c8:	f9 2f       	mov	r31, r25
    14ca:	96 eb       	ldi	r25, 0xB6	; 182
    14cc:	ff 23       	and	r31, r31
    14ce:	81 f0       	breq	.+32     	; 0x14f0 <__fp_di2sf+0x28>
    14d0:	12 16       	cp	r1, r18
    14d2:	13 06       	cpc	r1, r19
    14d4:	14 06       	cpc	r1, r20
    14d6:	44 0b       	sbc	r20, r20
    14d8:	93 95       	inc	r25
    14da:	f6 95       	lsr	r31
    14dc:	87 95       	ror	r24
    14de:	77 95       	ror	r23
    14e0:	67 95       	ror	r22
    14e2:	57 95       	ror	r21
    14e4:	40 40       	sbci	r20, 0x00	; 0
    14e6:	ff 23       	and	r31, r31
    14e8:	b9 f7       	brne	.-18     	; 0x14d8 <__fp_di2sf+0x10>
    14ea:	1b c0       	rjmp	.+54     	; 0x1522 <__fp_di2sf+0x5a>
    14ec:	99 27       	eor	r25, r25
    14ee:	08 95       	ret
    14f0:	88 23       	and	r24, r24
    14f2:	51 f4       	brne	.+20     	; 0x1508 <__fp_di2sf+0x40>
    14f4:	98 50       	subi	r25, 0x08	; 8
    14f6:	d2 f7       	brpl	.-12     	; 0x14ec <__fp_di2sf+0x24>
    14f8:	87 2b       	or	r24, r23
    14fa:	76 2f       	mov	r23, r22
    14fc:	65 2f       	mov	r22, r21
    14fe:	54 2f       	mov	r21, r20
    1500:	43 2f       	mov	r20, r19
    1502:	32 2f       	mov	r19, r18
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	b1 f3       	breq	.-20     	; 0x14f4 <__fp_di2sf+0x2c>
    1508:	12 16       	cp	r1, r18
    150a:	13 06       	cpc	r1, r19
    150c:	14 06       	cpc	r1, r20
    150e:	44 0b       	sbc	r20, r20
    1510:	88 23       	and	r24, r24
    1512:	3a f0       	brmi	.+14     	; 0x1522 <__fp_di2sf+0x5a>
    1514:	9a 95       	dec	r25
    1516:	44 0f       	add	r20, r20
    1518:	55 1f       	adc	r21, r21
    151a:	66 1f       	adc	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	ca f7       	brpl	.-14     	; 0x1514 <__fp_di2sf+0x4c>
    1522:	55 23       	and	r21, r21
    1524:	4a f4       	brpl	.+18     	; 0x1538 <__fp_di2sf+0x70>
    1526:	44 0f       	add	r20, r20
    1528:	55 1f       	adc	r21, r21
    152a:	11 f4       	brne	.+4      	; 0x1530 <__fp_di2sf+0x68>
    152c:	60 ff       	sbrs	r22, 0
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <__fp_di2sf+0x70>
    1530:	6f 5f       	subi	r22, 0xFF	; 255
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	8f 4f       	sbci	r24, 0xFF	; 255
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	88 0f       	add	r24, r24
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret

00001542 <__fp_inf>:
    1542:	97 f9       	bld	r25, 7
    1544:	9f 67       	ori	r25, 0x7F	; 127
    1546:	80 e8       	ldi	r24, 0x80	; 128
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	08 95       	ret

0000154e <__fp_nan>:
    154e:	9f ef       	ldi	r25, 0xFF	; 255
    1550:	80 ec       	ldi	r24, 0xC0	; 192
    1552:	08 95       	ret

00001554 <__fp_pscA>:
    1554:	00 24       	eor	r0, r0
    1556:	0a 94       	dec	r0
    1558:	16 16       	cp	r1, r22
    155a:	17 06       	cpc	r1, r23
    155c:	18 06       	cpc	r1, r24
    155e:	09 06       	cpc	r0, r25
    1560:	08 95       	ret

00001562 <__fp_pscB>:
    1562:	00 24       	eor	r0, r0
    1564:	0a 94       	dec	r0
    1566:	12 16       	cp	r1, r18
    1568:	13 06       	cpc	r1, r19
    156a:	14 06       	cpc	r1, r20
    156c:	05 06       	cpc	r0, r21
    156e:	08 95       	ret

00001570 <__fp_round>:
    1570:	09 2e       	mov	r0, r25
    1572:	03 94       	inc	r0
    1574:	00 0c       	add	r0, r0
    1576:	11 f4       	brne	.+4      	; 0x157c <__fp_round+0xc>
    1578:	88 23       	and	r24, r24
    157a:	52 f0       	brmi	.+20     	; 0x1590 <__fp_round+0x20>
    157c:	bb 0f       	add	r27, r27
    157e:	40 f4       	brcc	.+16     	; 0x1590 <__fp_round+0x20>
    1580:	bf 2b       	or	r27, r31
    1582:	11 f4       	brne	.+4      	; 0x1588 <__fp_round+0x18>
    1584:	60 ff       	sbrs	r22, 0
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <__fp_round+0x20>
    1588:	6f 5f       	subi	r22, 0xFF	; 255
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	8f 4f       	sbci	r24, 0xFF	; 255
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	08 95       	ret

00001592 <__fp_split3>:
    1592:	57 fd       	sbrc	r21, 7
    1594:	90 58       	subi	r25, 0x80	; 128
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	59 f0       	breq	.+22     	; 0x15b2 <__fp_splitA+0x10>
    159c:	5f 3f       	cpi	r21, 0xFF	; 255
    159e:	71 f0       	breq	.+28     	; 0x15bc <__fp_splitA+0x1a>
    15a0:	47 95       	ror	r20

000015a2 <__fp_splitA>:
    15a2:	88 0f       	add	r24, r24
    15a4:	97 fb       	bst	r25, 7
    15a6:	99 1f       	adc	r25, r25
    15a8:	61 f0       	breq	.+24     	; 0x15c2 <__fp_splitA+0x20>
    15aa:	9f 3f       	cpi	r25, 0xFF	; 255
    15ac:	79 f0       	breq	.+30     	; 0x15cc <__fp_splitA+0x2a>
    15ae:	87 95       	ror	r24
    15b0:	08 95       	ret
    15b2:	12 16       	cp	r1, r18
    15b4:	13 06       	cpc	r1, r19
    15b6:	14 06       	cpc	r1, r20
    15b8:	55 1f       	adc	r21, r21
    15ba:	f2 cf       	rjmp	.-28     	; 0x15a0 <__fp_split3+0xe>
    15bc:	46 95       	lsr	r20
    15be:	f1 df       	rcall	.-30     	; 0x15a2 <__fp_splitA>
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <__fp_splitA+0x30>
    15c2:	16 16       	cp	r1, r22
    15c4:	17 06       	cpc	r1, r23
    15c6:	18 06       	cpc	r1, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	f1 cf       	rjmp	.-30     	; 0x15ae <__fp_splitA+0xc>
    15cc:	86 95       	lsr	r24
    15ce:	71 05       	cpc	r23, r1
    15d0:	61 05       	cpc	r22, r1
    15d2:	08 94       	sec
    15d4:	08 95       	ret

000015d6 <__fp_zero>:
    15d6:	e8 94       	clt

000015d8 <__fp_szero>:
    15d8:	bb 27       	eor	r27, r27
    15da:	66 27       	eor	r22, r22
    15dc:	77 27       	eor	r23, r23
    15de:	cb 01       	movw	r24, r22
    15e0:	97 f9       	bld	r25, 7
    15e2:	08 95       	ret
    15e4:	0e f0       	brts	.+2      	; 0x15e8 <__fp_szero+0x10>
    15e6:	23 c1       	rjmp	.+582    	; 0x182e <__fp_mpack>
    15e8:	b2 cf       	rjmp	.-156    	; 0x154e <__fp_nan>
    15ea:	68 94       	set
    15ec:	aa cf       	rjmp	.-172    	; 0x1542 <__fp_inf>

000015ee <log>:
    15ee:	d9 df       	rcall	.-78     	; 0x15a2 <__fp_splitA>
    15f0:	c8 f3       	brcs	.-14     	; 0x15e4 <__fp_szero+0xc>
    15f2:	99 23       	and	r25, r25
    15f4:	d1 f3       	breq	.-12     	; 0x15ea <__fp_szero+0x12>
    15f6:	c6 f3       	brts	.-16     	; 0x15e8 <__fp_szero+0x10>
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	1f 93       	push	r17
    15fe:	0f 93       	push	r16
    1600:	ff 92       	push	r15
    1602:	c9 2f       	mov	r28, r25
    1604:	dd 27       	eor	r29, r29
    1606:	88 23       	and	r24, r24
    1608:	2a f0       	brmi	.+10     	; 0x1614 <log+0x26>
    160a:	21 97       	sbiw	r28, 0x01	; 1
    160c:	66 0f       	add	r22, r22
    160e:	77 1f       	adc	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	da f7       	brpl	.-10     	; 0x160a <log+0x1c>
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e8       	ldi	r20, 0x80	; 128
    161a:	5f eb       	ldi	r21, 0xBF	; 191
    161c:	9f e3       	ldi	r25, 0x3F	; 63
    161e:	88 39       	cpi	r24, 0x98	; 152
    1620:	20 f0       	brcs	.+8      	; 0x162a <log+0x3c>
    1622:	80 3e       	cpi	r24, 0xE0	; 224
    1624:	30 f0       	brcs	.+12     	; 0x1632 <log+0x44>
    1626:	21 96       	adiw	r28, 0x01	; 1
    1628:	8f 77       	andi	r24, 0x7F	; 127
    162a:	13 de       	rcall	.-986    	; 0x1252 <__addsf3>
    162c:	ec ef       	ldi	r30, 0xFC	; 252
    162e:	f1 e0       	ldi	r31, 0x01	; 1
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <log+0x4a>
    1632:	0f de       	rcall	.-994    	; 0x1252 <__addsf3>
    1634:	e9 e2       	ldi	r30, 0x29	; 41
    1636:	f2 e0       	ldi	r31, 0x02	; 2
    1638:	08 d1       	rcall	.+528    	; 0x184a <__fp_powser>
    163a:	8b 01       	movw	r16, r22
    163c:	be 01       	movw	r22, r28
    163e:	ec 01       	movw	r28, r24
    1640:	fb 2e       	mov	r15, r27
    1642:	6f 57       	subi	r22, 0x7F	; 127
    1644:	71 09       	sbc	r23, r1
    1646:	75 95       	asr	r23
    1648:	77 1f       	adc	r23, r23
    164a:	88 0b       	sbc	r24, r24
    164c:	99 0b       	sbc	r25, r25
    164e:	00 df       	rcall	.-512    	; 0x1450 <__floatsisf>
    1650:	28 e1       	ldi	r18, 0x18	; 24
    1652:	32 e7       	ldi	r19, 0x72	; 114
    1654:	41 e3       	ldi	r20, 0x31	; 49
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	16 d0       	rcall	.+44     	; 0x1686 <__mulsf3x>
    165a:	af 2d       	mov	r26, r15
    165c:	98 01       	movw	r18, r16
    165e:	ae 01       	movw	r20, r28
    1660:	ff 90       	pop	r15
    1662:	0f 91       	pop	r16
    1664:	1f 91       	pop	r17
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	04 de       	rcall	.-1016   	; 0x1274 <__addsf3x>
    166c:	81 cf       	rjmp	.-254    	; 0x1570 <__fp_round>

0000166e <__mulsf3>:
    166e:	0b d0       	rcall	.+22     	; 0x1686 <__mulsf3x>
    1670:	7f cf       	rjmp	.-258    	; 0x1570 <__fp_round>
    1672:	70 df       	rcall	.-288    	; 0x1554 <__fp_pscA>
    1674:	28 f0       	brcs	.+10     	; 0x1680 <__mulsf3+0x12>
    1676:	75 df       	rcall	.-278    	; 0x1562 <__fp_pscB>
    1678:	18 f0       	brcs	.+6      	; 0x1680 <__mulsf3+0x12>
    167a:	95 23       	and	r25, r21
    167c:	09 f0       	breq	.+2      	; 0x1680 <__mulsf3+0x12>
    167e:	61 cf       	rjmp	.-318    	; 0x1542 <__fp_inf>
    1680:	66 cf       	rjmp	.-308    	; 0x154e <__fp_nan>
    1682:	11 24       	eor	r1, r1
    1684:	a9 cf       	rjmp	.-174    	; 0x15d8 <__fp_szero>

00001686 <__mulsf3x>:
    1686:	85 df       	rcall	.-246    	; 0x1592 <__fp_split3>
    1688:	a0 f3       	brcs	.-24     	; 0x1672 <__mulsf3+0x4>

0000168a <__mulsf3_pse>:
    168a:	95 9f       	mul	r25, r21
    168c:	d1 f3       	breq	.-12     	; 0x1682 <__mulsf3+0x14>
    168e:	95 0f       	add	r25, r21
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	55 1f       	adc	r21, r21
    1694:	62 9f       	mul	r22, r18
    1696:	f0 01       	movw	r30, r0
    1698:	72 9f       	mul	r23, r18
    169a:	bb 27       	eor	r27, r27
    169c:	f0 0d       	add	r31, r0
    169e:	b1 1d       	adc	r27, r1
    16a0:	63 9f       	mul	r22, r19
    16a2:	aa 27       	eor	r26, r26
    16a4:	f0 0d       	add	r31, r0
    16a6:	b1 1d       	adc	r27, r1
    16a8:	aa 1f       	adc	r26, r26
    16aa:	64 9f       	mul	r22, r20
    16ac:	66 27       	eor	r22, r22
    16ae:	b0 0d       	add	r27, r0
    16b0:	a1 1d       	adc	r26, r1
    16b2:	66 1f       	adc	r22, r22
    16b4:	82 9f       	mul	r24, r18
    16b6:	22 27       	eor	r18, r18
    16b8:	b0 0d       	add	r27, r0
    16ba:	a1 1d       	adc	r26, r1
    16bc:	62 1f       	adc	r22, r18
    16be:	73 9f       	mul	r23, r19
    16c0:	b0 0d       	add	r27, r0
    16c2:	a1 1d       	adc	r26, r1
    16c4:	62 1f       	adc	r22, r18
    16c6:	83 9f       	mul	r24, r19
    16c8:	a0 0d       	add	r26, r0
    16ca:	61 1d       	adc	r22, r1
    16cc:	22 1f       	adc	r18, r18
    16ce:	74 9f       	mul	r23, r20
    16d0:	33 27       	eor	r19, r19
    16d2:	a0 0d       	add	r26, r0
    16d4:	61 1d       	adc	r22, r1
    16d6:	23 1f       	adc	r18, r19
    16d8:	84 9f       	mul	r24, r20
    16da:	60 0d       	add	r22, r0
    16dc:	21 1d       	adc	r18, r1
    16de:	82 2f       	mov	r24, r18
    16e0:	76 2f       	mov	r23, r22
    16e2:	6a 2f       	mov	r22, r26
    16e4:	11 24       	eor	r1, r1
    16e6:	9f 57       	subi	r25, 0x7F	; 127
    16e8:	50 40       	sbci	r21, 0x00	; 0
    16ea:	8a f0       	brmi	.+34     	; 0x170e <__mulsf3_pse+0x84>
    16ec:	e1 f0       	breq	.+56     	; 0x1726 <__mulsf3_pse+0x9c>
    16ee:	88 23       	and	r24, r24
    16f0:	4a f0       	brmi	.+18     	; 0x1704 <__mulsf3_pse+0x7a>
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	bb 1f       	adc	r27, r27
    16f8:	66 1f       	adc	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	91 50       	subi	r25, 0x01	; 1
    1700:	50 40       	sbci	r21, 0x00	; 0
    1702:	a9 f7       	brne	.-22     	; 0x16ee <__mulsf3_pse+0x64>
    1704:	9e 3f       	cpi	r25, 0xFE	; 254
    1706:	51 05       	cpc	r21, r1
    1708:	70 f0       	brcs	.+28     	; 0x1726 <__mulsf3_pse+0x9c>
    170a:	1b cf       	rjmp	.-458    	; 0x1542 <__fp_inf>
    170c:	65 cf       	rjmp	.-310    	; 0x15d8 <__fp_szero>
    170e:	5f 3f       	cpi	r21, 0xFF	; 255
    1710:	ec f3       	brlt	.-6      	; 0x170c <__mulsf3_pse+0x82>
    1712:	98 3e       	cpi	r25, 0xE8	; 232
    1714:	dc f3       	brlt	.-10     	; 0x170c <__mulsf3_pse+0x82>
    1716:	86 95       	lsr	r24
    1718:	77 95       	ror	r23
    171a:	67 95       	ror	r22
    171c:	b7 95       	ror	r27
    171e:	f7 95       	ror	r31
    1720:	e7 95       	ror	r30
    1722:	9f 5f       	subi	r25, 0xFF	; 255
    1724:	c1 f7       	brne	.-16     	; 0x1716 <__mulsf3_pse+0x8c>
    1726:	fe 2b       	or	r31, r30
    1728:	88 0f       	add	r24, r24
    172a:	91 1d       	adc	r25, r1
    172c:	96 95       	lsr	r25
    172e:	87 95       	ror	r24
    1730:	97 f9       	bld	r25, 7
    1732:	08 95       	ret

00001734 <pow>:
    1734:	fa 01       	movw	r30, r20
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	30 96       	adiw	r30, 0x00	; 0
    173c:	21 05       	cpc	r18, r1
    173e:	31 05       	cpc	r19, r1
    1740:	99 f1       	breq	.+102    	; 0x17a8 <pow+0x74>
    1742:	61 15       	cp	r22, r1
    1744:	71 05       	cpc	r23, r1
    1746:	61 f4       	brne	.+24     	; 0x1760 <pow+0x2c>
    1748:	80 38       	cpi	r24, 0x80	; 128
    174a:	bf e3       	ldi	r27, 0x3F	; 63
    174c:	9b 07       	cpc	r25, r27
    174e:	49 f1       	breq	.+82     	; 0x17a2 <pow+0x6e>
    1750:	68 94       	set
    1752:	90 38       	cpi	r25, 0x80	; 128
    1754:	81 05       	cpc	r24, r1
    1756:	61 f0       	breq	.+24     	; 0x1770 <pow+0x3c>
    1758:	80 38       	cpi	r24, 0x80	; 128
    175a:	bf ef       	ldi	r27, 0xFF	; 255
    175c:	9b 07       	cpc	r25, r27
    175e:	41 f0       	breq	.+16     	; 0x1770 <pow+0x3c>
    1760:	99 23       	and	r25, r25
    1762:	42 f5       	brpl	.+80     	; 0x17b4 <pow+0x80>
    1764:	ff 3f       	cpi	r31, 0xFF	; 255
    1766:	e1 05       	cpc	r30, r1
    1768:	31 05       	cpc	r19, r1
    176a:	21 05       	cpc	r18, r1
    176c:	11 f1       	breq	.+68     	; 0x17b2 <pow+0x7e>
    176e:	e8 94       	clt
    1770:	08 94       	sec
    1772:	e7 95       	ror	r30
    1774:	d9 01       	movw	r26, r18
    1776:	aa 23       	and	r26, r26
    1778:	29 f4       	brne	.+10     	; 0x1784 <pow+0x50>
    177a:	ab 2f       	mov	r26, r27
    177c:	be 2f       	mov	r27, r30
    177e:	f8 5f       	subi	r31, 0xF8	; 248
    1780:	d0 f3       	brcs	.-12     	; 0x1776 <pow+0x42>
    1782:	10 c0       	rjmp	.+32     	; 0x17a4 <pow+0x70>
    1784:	ff 5f       	subi	r31, 0xFF	; 255
    1786:	70 f4       	brcc	.+28     	; 0x17a4 <pow+0x70>
    1788:	a6 95       	lsr	r26
    178a:	e0 f7       	brcc	.-8      	; 0x1784 <pow+0x50>
    178c:	f7 39       	cpi	r31, 0x97	; 151
    178e:	50 f0       	brcs	.+20     	; 0x17a4 <pow+0x70>
    1790:	19 f0       	breq	.+6      	; 0x1798 <pow+0x64>
    1792:	ff 3a       	cpi	r31, 0xAF	; 175
    1794:	38 f4       	brcc	.+14     	; 0x17a4 <pow+0x70>
    1796:	9f 77       	andi	r25, 0x7F	; 127
    1798:	9f 93       	push	r25
    179a:	0c d0       	rcall	.+24     	; 0x17b4 <pow+0x80>
    179c:	0f 90       	pop	r0
    179e:	07 fc       	sbrc	r0, 7
    17a0:	90 58       	subi	r25, 0x80	; 128
    17a2:	08 95       	ret
    17a4:	3e f0       	brts	.+14     	; 0x17b4 <pow+0x80>
    17a6:	d3 ce       	rjmp	.-602    	; 0x154e <__fp_nan>
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 e8       	ldi	r24, 0x80	; 128
    17ae:	9f e3       	ldi	r25, 0x3F	; 63
    17b0:	08 95       	ret
    17b2:	4f e7       	ldi	r20, 0x7F	; 127
    17b4:	9f 77       	andi	r25, 0x7F	; 127
    17b6:	5f 93       	push	r21
    17b8:	4f 93       	push	r20
    17ba:	3f 93       	push	r19
    17bc:	2f 93       	push	r18
    17be:	17 df       	rcall	.-466    	; 0x15ee <log>
    17c0:	2f 91       	pop	r18
    17c2:	3f 91       	pop	r19
    17c4:	4f 91       	pop	r20
    17c6:	5f 91       	pop	r21
    17c8:	52 df       	rcall	.-348    	; 0x166e <__mulsf3>
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <exp>
    17cc:	19 f4       	brne	.+6      	; 0x17d4 <pow+0xa0>
    17ce:	0e f0       	brts	.+2      	; 0x17d2 <pow+0x9e>
    17d0:	b8 ce       	rjmp	.-656    	; 0x1542 <__fp_inf>
    17d2:	01 cf       	rjmp	.-510    	; 0x15d6 <__fp_zero>
    17d4:	bc ce       	rjmp	.-648    	; 0x154e <__fp_nan>

000017d6 <exp>:
    17d6:	e5 de       	rcall	.-566    	; 0x15a2 <__fp_splitA>
    17d8:	c8 f3       	brcs	.-14     	; 0x17cc <pow+0x98>
    17da:	96 38       	cpi	r25, 0x86	; 134
    17dc:	c0 f7       	brcc	.-16     	; 0x17ce <pow+0x9a>
    17de:	07 f8       	bld	r0, 7
    17e0:	0f 92       	push	r0
    17e2:	e8 94       	clt
    17e4:	2b e3       	ldi	r18, 0x3B	; 59
    17e6:	3a ea       	ldi	r19, 0xAA	; 170
    17e8:	48 eb       	ldi	r20, 0xB8	; 184
    17ea:	5f e7       	ldi	r21, 0x7F	; 127
    17ec:	4e df       	rcall	.-356    	; 0x168a <__mulsf3_pse>
    17ee:	0f 92       	push	r0
    17f0:	0f 92       	push	r0
    17f2:	0f 92       	push	r0
    17f4:	4d b7       	in	r20, 0x3d	; 61
    17f6:	5e b7       	in	r21, 0x3e	; 62
    17f8:	0f 92       	push	r0
    17fa:	89 d0       	rcall	.+274    	; 0x190e <modf>
    17fc:	e6 e5       	ldi	r30, 0x56	; 86
    17fe:	f2 e0       	ldi	r31, 0x02	; 2
    1800:	24 d0       	rcall	.+72     	; 0x184a <__fp_powser>
    1802:	4f 91       	pop	r20
    1804:	5f 91       	pop	r21
    1806:	ef 91       	pop	r30
    1808:	ff 91       	pop	r31
    180a:	e5 95       	asr	r30
    180c:	ee 1f       	adc	r30, r30
    180e:	ff 1f       	adc	r31, r31
    1810:	49 f0       	breq	.+18     	; 0x1824 <exp+0x4e>
    1812:	fe 57       	subi	r31, 0x7E	; 126
    1814:	e0 68       	ori	r30, 0x80	; 128
    1816:	44 27       	eor	r20, r20
    1818:	ee 0f       	add	r30, r30
    181a:	44 1f       	adc	r20, r20
    181c:	fa 95       	dec	r31
    181e:	e1 f7       	brne	.-8      	; 0x1818 <exp+0x42>
    1820:	41 95       	neg	r20
    1822:	55 0b       	sbc	r21, r21
    1824:	40 d0       	rcall	.+128    	; 0x18a6 <ldexp>
    1826:	0f 90       	pop	r0
    1828:	07 fe       	sbrs	r0, 7
    182a:	34 c0       	rjmp	.+104    	; 0x1894 <inverse>
    182c:	08 95       	ret

0000182e <__fp_mpack>:
    182e:	9f 3f       	cpi	r25, 0xFF	; 255
    1830:	31 f0       	breq	.+12     	; 0x183e <__fp_mpack_finite+0xc>

00001832 <__fp_mpack_finite>:
    1832:	91 50       	subi	r25, 0x01	; 1
    1834:	20 f4       	brcc	.+8      	; 0x183e <__fp_mpack_finite+0xc>
    1836:	87 95       	ror	r24
    1838:	77 95       	ror	r23
    183a:	67 95       	ror	r22
    183c:	b7 95       	ror	r27
    183e:	88 0f       	add	r24, r24
    1840:	91 1d       	adc	r25, r1
    1842:	96 95       	lsr	r25
    1844:	87 95       	ror	r24
    1846:	97 f9       	bld	r25, 7
    1848:	08 95       	ret

0000184a <__fp_powser>:
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	1f 93       	push	r17
    1850:	0f 93       	push	r16
    1852:	ff 92       	push	r15
    1854:	ef 92       	push	r14
    1856:	df 92       	push	r13
    1858:	7b 01       	movw	r14, r22
    185a:	8c 01       	movw	r16, r24
    185c:	68 94       	set
    185e:	05 c0       	rjmp	.+10     	; 0x186a <__fp_powser+0x20>
    1860:	da 2e       	mov	r13, r26
    1862:	ef 01       	movw	r28, r30
    1864:	10 df       	rcall	.-480    	; 0x1686 <__mulsf3x>
    1866:	fe 01       	movw	r30, r28
    1868:	e8 94       	clt
    186a:	a5 91       	lpm	r26, Z+
    186c:	25 91       	lpm	r18, Z+
    186e:	35 91       	lpm	r19, Z+
    1870:	45 91       	lpm	r20, Z+
    1872:	55 91       	lpm	r21, Z+
    1874:	ae f3       	brts	.-22     	; 0x1860 <__fp_powser+0x16>
    1876:	ef 01       	movw	r28, r30
    1878:	fd dc       	rcall	.-1542   	; 0x1274 <__addsf3x>
    187a:	fe 01       	movw	r30, r28
    187c:	97 01       	movw	r18, r14
    187e:	a8 01       	movw	r20, r16
    1880:	da 94       	dec	r13
    1882:	79 f7       	brne	.-34     	; 0x1862 <__fp_powser+0x18>
    1884:	df 90       	pop	r13
    1886:	ef 90       	pop	r14
    1888:	ff 90       	pop	r15
    188a:	0f 91       	pop	r16
    188c:	1f 91       	pop	r17
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <inverse>:
    1894:	9b 01       	movw	r18, r22
    1896:	ac 01       	movw	r20, r24
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	80 e8       	ldi	r24, 0x80	; 128
    189e:	9f e3       	ldi	r25, 0x3F	; 63
    18a0:	3c cd       	rjmp	.-1416   	; 0x131a <__divsf3>
    18a2:	4f ce       	rjmp	.-866    	; 0x1542 <__fp_inf>
    18a4:	c4 cf       	rjmp	.-120    	; 0x182e <__fp_mpack>

000018a6 <ldexp>:
    18a6:	7d de       	rcall	.-774    	; 0x15a2 <__fp_splitA>
    18a8:	e8 f3       	brcs	.-6      	; 0x18a4 <inverse+0x10>
    18aa:	99 23       	and	r25, r25
    18ac:	d9 f3       	breq	.-10     	; 0x18a4 <inverse+0x10>
    18ae:	94 0f       	add	r25, r20
    18b0:	51 1d       	adc	r21, r1
    18b2:	bb f3       	brvs	.-18     	; 0x18a2 <inverse+0xe>
    18b4:	91 50       	subi	r25, 0x01	; 1
    18b6:	50 40       	sbci	r21, 0x00	; 0
    18b8:	94 f0       	brlt	.+36     	; 0x18de <ldexp+0x38>
    18ba:	59 f0       	breq	.+22     	; 0x18d2 <ldexp+0x2c>
    18bc:	88 23       	and	r24, r24
    18be:	32 f0       	brmi	.+12     	; 0x18cc <ldexp+0x26>
    18c0:	66 0f       	add	r22, r22
    18c2:	77 1f       	adc	r23, r23
    18c4:	88 1f       	adc	r24, r24
    18c6:	91 50       	subi	r25, 0x01	; 1
    18c8:	50 40       	sbci	r21, 0x00	; 0
    18ca:	c1 f7       	brne	.-16     	; 0x18bc <ldexp+0x16>
    18cc:	9e 3f       	cpi	r25, 0xFE	; 254
    18ce:	51 05       	cpc	r21, r1
    18d0:	44 f7       	brge	.-48     	; 0x18a2 <inverse+0xe>
    18d2:	88 0f       	add	r24, r24
    18d4:	91 1d       	adc	r25, r1
    18d6:	96 95       	lsr	r25
    18d8:	87 95       	ror	r24
    18da:	97 f9       	bld	r25, 7
    18dc:	08 95       	ret
    18de:	5f 3f       	cpi	r21, 0xFF	; 255
    18e0:	ac f0       	brlt	.+42     	; 0x190c <ldexp+0x66>
    18e2:	98 3e       	cpi	r25, 0xE8	; 232
    18e4:	9c f0       	brlt	.+38     	; 0x190c <ldexp+0x66>
    18e6:	bb 27       	eor	r27, r27
    18e8:	86 95       	lsr	r24
    18ea:	77 95       	ror	r23
    18ec:	67 95       	ror	r22
    18ee:	b7 95       	ror	r27
    18f0:	08 f4       	brcc	.+2      	; 0x18f4 <ldexp+0x4e>
    18f2:	b1 60       	ori	r27, 0x01	; 1
    18f4:	93 95       	inc	r25
    18f6:	c1 f7       	brne	.-16     	; 0x18e8 <ldexp+0x42>
    18f8:	bb 0f       	add	r27, r27
    18fa:	58 f7       	brcc	.-42     	; 0x18d2 <ldexp+0x2c>
    18fc:	11 f4       	brne	.+4      	; 0x1902 <ldexp+0x5c>
    18fe:	60 ff       	sbrs	r22, 0
    1900:	e8 cf       	rjmp	.-48     	; 0x18d2 <ldexp+0x2c>
    1902:	6f 5f       	subi	r22, 0xFF	; 255
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	8f 4f       	sbci	r24, 0xFF	; 255
    1908:	9f 4f       	sbci	r25, 0xFF	; 255
    190a:	e3 cf       	rjmp	.-58     	; 0x18d2 <ldexp+0x2c>
    190c:	65 ce       	rjmp	.-822    	; 0x15d8 <__fp_szero>

0000190e <modf>:
    190e:	fa 01       	movw	r30, r20
    1910:	dc 01       	movw	r26, r24
    1912:	aa 0f       	add	r26, r26
    1914:	bb 1f       	adc	r27, r27
    1916:	9b 01       	movw	r18, r22
    1918:	ac 01       	movw	r20, r24
    191a:	bf 57       	subi	r27, 0x7F	; 127
    191c:	28 f4       	brcc	.+10     	; 0x1928 <modf+0x1a>
    191e:	22 27       	eor	r18, r18
    1920:	33 27       	eor	r19, r19
    1922:	44 27       	eor	r20, r20
    1924:	50 78       	andi	r21, 0x80	; 128
    1926:	1f c0       	rjmp	.+62     	; 0x1966 <modf+0x58>
    1928:	b7 51       	subi	r27, 0x17	; 23
    192a:	88 f4       	brcc	.+34     	; 0x194e <modf+0x40>
    192c:	ab 2f       	mov	r26, r27
    192e:	00 24       	eor	r0, r0
    1930:	46 95       	lsr	r20
    1932:	37 95       	ror	r19
    1934:	27 95       	ror	r18
    1936:	01 1c       	adc	r0, r1
    1938:	a3 95       	inc	r26
    193a:	d2 f3       	brmi	.-12     	; 0x1930 <modf+0x22>
    193c:	00 20       	and	r0, r0
    193e:	69 f0       	breq	.+26     	; 0x195a <modf+0x4c>
    1940:	22 0f       	add	r18, r18
    1942:	33 1f       	adc	r19, r19
    1944:	44 1f       	adc	r20, r20
    1946:	b3 95       	inc	r27
    1948:	da f3       	brmi	.-10     	; 0x1940 <modf+0x32>
    194a:	0d d0       	rcall	.+26     	; 0x1966 <modf+0x58>
    194c:	81 cc       	rjmp	.-1790   	; 0x1250 <__subsf3>
    194e:	61 30       	cpi	r22, 0x01	; 1
    1950:	71 05       	cpc	r23, r1
    1952:	a0 e8       	ldi	r26, 0x80	; 128
    1954:	8a 07       	cpc	r24, r26
    1956:	b9 46       	sbci	r27, 0x69	; 105
    1958:	30 f4       	brcc	.+12     	; 0x1966 <modf+0x58>
    195a:	9b 01       	movw	r18, r22
    195c:	ac 01       	movw	r20, r24
    195e:	66 27       	eor	r22, r22
    1960:	77 27       	eor	r23, r23
    1962:	88 27       	eor	r24, r24
    1964:	90 78       	andi	r25, 0x80	; 128
    1966:	30 96       	adiw	r30, 0x00	; 0
    1968:	21 f0       	breq	.+8      	; 0x1972 <modf+0x64>
    196a:	20 83       	st	Z, r18
    196c:	31 83       	std	Z+1, r19	; 0x01
    196e:	42 83       	std	Z+2, r20	; 0x02
    1970:	53 83       	std	Z+3, r21	; 0x03
    1972:	08 95       	ret

00001974 <__udivmodsi4>:
    1974:	a1 e2       	ldi	r26, 0x21	; 33
    1976:	1a 2e       	mov	r1, r26
    1978:	aa 1b       	sub	r26, r26
    197a:	bb 1b       	sub	r27, r27
    197c:	fd 01       	movw	r30, r26
    197e:	0d c0       	rjmp	.+26     	; 0x199a <__udivmodsi4_ep>

00001980 <__udivmodsi4_loop>:
    1980:	aa 1f       	adc	r26, r26
    1982:	bb 1f       	adc	r27, r27
    1984:	ee 1f       	adc	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	a2 17       	cp	r26, r18
    198a:	b3 07       	cpc	r27, r19
    198c:	e4 07       	cpc	r30, r20
    198e:	f5 07       	cpc	r31, r21
    1990:	20 f0       	brcs	.+8      	; 0x199a <__udivmodsi4_ep>
    1992:	a2 1b       	sub	r26, r18
    1994:	b3 0b       	sbc	r27, r19
    1996:	e4 0b       	sbc	r30, r20
    1998:	f5 0b       	sbc	r31, r21

0000199a <__udivmodsi4_ep>:
    199a:	66 1f       	adc	r22, r22
    199c:	77 1f       	adc	r23, r23
    199e:	88 1f       	adc	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	1a 94       	dec	r1
    19a4:	69 f7       	brne	.-38     	; 0x1980 <__udivmodsi4_loop>
    19a6:	60 95       	com	r22
    19a8:	70 95       	com	r23
    19aa:	80 95       	com	r24
    19ac:	90 95       	com	r25
    19ae:	9b 01       	movw	r18, r22
    19b0:	ac 01       	movw	r20, r24
    19b2:	bd 01       	movw	r22, r26
    19b4:	cf 01       	movw	r24, r30
    19b6:	08 95       	ret

000019b8 <__ashldi3>:
    19b8:	0f 93       	push	r16
    19ba:	08 30       	cpi	r16, 0x08	; 8
    19bc:	90 f0       	brcs	.+36     	; 0x19e2 <__ashldi3+0x2a>
    19be:	98 2f       	mov	r25, r24
    19c0:	87 2f       	mov	r24, r23
    19c2:	76 2f       	mov	r23, r22
    19c4:	65 2f       	mov	r22, r21
    19c6:	54 2f       	mov	r21, r20
    19c8:	43 2f       	mov	r20, r19
    19ca:	32 2f       	mov	r19, r18
    19cc:	22 27       	eor	r18, r18
    19ce:	08 50       	subi	r16, 0x08	; 8
    19d0:	f4 cf       	rjmp	.-24     	; 0x19ba <__ashldi3+0x2>
    19d2:	22 0f       	add	r18, r18
    19d4:	33 1f       	adc	r19, r19
    19d6:	44 1f       	adc	r20, r20
    19d8:	55 1f       	adc	r21, r21
    19da:	66 1f       	adc	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 95       	dec	r16
    19e4:	b2 f7       	brpl	.-20     	; 0x19d2 <__ashldi3+0x1a>
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <__subdi3>:
    19ea:	2a 19       	sub	r18, r10
    19ec:	3b 09       	sbc	r19, r11
    19ee:	4c 09       	sbc	r20, r12
    19f0:	5d 09       	sbc	r21, r13
    19f2:	6e 09       	sbc	r22, r14
    19f4:	7f 09       	sbc	r23, r15
    19f6:	80 0b       	sbc	r24, r16
    19f8:	91 0b       	sbc	r25, r17
    19fa:	08 95       	ret

000019fc <fdevopen>:
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	31 f4       	brne	.+12     	; 0x1a14 <fdevopen+0x18>
    1a08:	61 15       	cp	r22, r1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	19 f4       	brne	.+6      	; 0x1a14 <fdevopen+0x18>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	39 c0       	rjmp	.+114    	; 0x1a86 <fdevopen+0x8a>
    1a14:	8b 01       	movw	r16, r22
    1a16:	ec 01       	movw	r28, r24
    1a18:	6e e0       	ldi	r22, 0x0E	; 14
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	71 d2       	rcall	.+1250   	; 0x1f04 <calloc>
    1a22:	fc 01       	movw	r30, r24
    1a24:	89 2b       	or	r24, r25
    1a26:	99 f3       	breq	.-26     	; 0x1a0e <fdevopen+0x12>
    1a28:	80 e8       	ldi	r24, 0x80	; 128
    1a2a:	83 83       	std	Z+3, r24	; 0x03
    1a2c:	01 15       	cp	r16, r1
    1a2e:	11 05       	cpc	r17, r1
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <fdevopen+0x52>
    1a32:	02 87       	std	Z+10, r16	; 0x0a
    1a34:	13 87       	std	Z+11, r17	; 0x0b
    1a36:	81 e8       	ldi	r24, 0x81	; 129
    1a38:	83 83       	std	Z+3, r24	; 0x03
    1a3a:	80 91 71 20 	lds	r24, 0x2071	; 0x802071 <__iob>
    1a3e:	90 91 72 20 	lds	r25, 0x2072	; 0x802072 <__iob+0x1>
    1a42:	89 2b       	or	r24, r25
    1a44:	21 f4       	brne	.+8      	; 0x1a4e <fdevopen+0x52>
    1a46:	e0 93 71 20 	sts	0x2071, r30	; 0x802071 <__iob>
    1a4a:	f0 93 72 20 	sts	0x2072, r31	; 0x802072 <__iob+0x1>
    1a4e:	20 97       	sbiw	r28, 0x00	; 0
    1a50:	c9 f0       	breq	.+50     	; 0x1a84 <fdevopen+0x88>
    1a52:	c0 87       	std	Z+8, r28	; 0x08
    1a54:	d1 87       	std	Z+9, r29	; 0x09
    1a56:	83 81       	ldd	r24, Z+3	; 0x03
    1a58:	82 60       	ori	r24, 0x02	; 2
    1a5a:	83 83       	std	Z+3, r24	; 0x03
    1a5c:	80 91 73 20 	lds	r24, 0x2073	; 0x802073 <__iob+0x2>
    1a60:	90 91 74 20 	lds	r25, 0x2074	; 0x802074 <__iob+0x3>
    1a64:	89 2b       	or	r24, r25
    1a66:	71 f4       	brne	.+28     	; 0x1a84 <fdevopen+0x88>
    1a68:	e0 93 73 20 	sts	0x2073, r30	; 0x802073 <__iob+0x2>
    1a6c:	f0 93 74 20 	sts	0x2074, r31	; 0x802074 <__iob+0x3>
    1a70:	80 91 75 20 	lds	r24, 0x2075	; 0x802075 <__iob+0x4>
    1a74:	90 91 76 20 	lds	r25, 0x2076	; 0x802076 <__iob+0x5>
    1a78:	89 2b       	or	r24, r25
    1a7a:	21 f4       	brne	.+8      	; 0x1a84 <fdevopen+0x88>
    1a7c:	e0 93 75 20 	sts	0x2075, r30	; 0x802075 <__iob+0x4>
    1a80:	f0 93 76 20 	sts	0x2076, r31	; 0x802076 <__iob+0x5>
    1a84:	cf 01       	movw	r24, r30
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <printf>:
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	ae 01       	movw	r20, r28
    1a9a:	4a 5f       	subi	r20, 0xFA	; 250
    1a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9e:	fa 01       	movw	r30, r20
    1aa0:	61 91       	ld	r22, Z+
    1aa2:	71 91       	ld	r23, Z+
    1aa4:	af 01       	movw	r20, r30
    1aa6:	80 91 73 20 	lds	r24, 0x2073	; 0x802073 <__iob+0x2>
    1aaa:	90 91 74 20 	lds	r25, 0x2074	; 0x802074 <__iob+0x3>
    1aae:	33 d0       	rcall	.+102    	; 0x1b16 <vfprintf>
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	08 95       	ret

00001ab6 <puts>:
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	e0 91 73 20 	lds	r30, 0x2073	; 0x802073 <__iob+0x2>
    1ac2:	f0 91 74 20 	lds	r31, 0x2074	; 0x802074 <__iob+0x3>
    1ac6:	23 81       	ldd	r18, Z+3	; 0x03
    1ac8:	21 ff       	sbrs	r18, 1
    1aca:	1b c0       	rjmp	.+54     	; 0x1b02 <puts+0x4c>
    1acc:	8c 01       	movw	r16, r24
    1ace:	d0 e0       	ldi	r29, 0x00	; 0
    1ad0:	c0 e0       	ldi	r28, 0x00	; 0
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	81 91       	ld	r24, Z+
    1ad6:	8f 01       	movw	r16, r30
    1ad8:	60 91 73 20 	lds	r22, 0x2073	; 0x802073 <__iob+0x2>
    1adc:	70 91 74 20 	lds	r23, 0x2074	; 0x802074 <__iob+0x3>
    1ae0:	db 01       	movw	r26, r22
    1ae2:	18 96       	adiw	r26, 0x08	; 8
    1ae4:	ed 91       	ld	r30, X+
    1ae6:	fc 91       	ld	r31, X
    1ae8:	19 97       	sbiw	r26, 0x09	; 9
    1aea:	88 23       	and	r24, r24
    1aec:	31 f0       	breq	.+12     	; 0x1afa <puts+0x44>
    1aee:	19 95       	eicall
    1af0:	89 2b       	or	r24, r25
    1af2:	79 f3       	breq	.-34     	; 0x1ad2 <puts+0x1c>
    1af4:	df ef       	ldi	r29, 0xFF	; 255
    1af6:	cf ef       	ldi	r28, 0xFF	; 255
    1af8:	ec cf       	rjmp	.-40     	; 0x1ad2 <puts+0x1c>
    1afa:	8a e0       	ldi	r24, 0x0A	; 10
    1afc:	19 95       	eicall
    1afe:	89 2b       	or	r24, r25
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <puts+0x52>
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	9f ef       	ldi	r25, 0xFF	; 255
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <puts+0x56>
    1b08:	8d 2f       	mov	r24, r29
    1b0a:	9c 2f       	mov	r25, r28
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	08 95       	ret

00001b16 <vfprintf>:
    1b16:	2f 92       	push	r2
    1b18:	3f 92       	push	r3
    1b1a:	4f 92       	push	r4
    1b1c:	5f 92       	push	r5
    1b1e:	6f 92       	push	r6
    1b20:	7f 92       	push	r7
    1b22:	8f 92       	push	r8
    1b24:	9f 92       	push	r9
    1b26:	af 92       	push	r10
    1b28:	bf 92       	push	r11
    1b2a:	cf 92       	push	r12
    1b2c:	df 92       	push	r13
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	2b 97       	sbiw	r28, 0x0b	; 11
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	6c 01       	movw	r12, r24
    1b46:	7b 01       	movw	r14, r22
    1b48:	8a 01       	movw	r16, r20
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	16 82       	std	Z+6, r1	; 0x06
    1b4e:	17 82       	std	Z+7, r1	; 0x07
    1b50:	83 81       	ldd	r24, Z+3	; 0x03
    1b52:	81 ff       	sbrs	r24, 1
    1b54:	bf c1       	rjmp	.+894    	; 0x1ed4 <vfprintf+0x3be>
    1b56:	ce 01       	movw	r24, r28
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	3c 01       	movw	r6, r24
    1b5c:	f6 01       	movw	r30, r12
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	f7 01       	movw	r30, r14
    1b62:	93 fd       	sbrc	r25, 3
    1b64:	85 91       	lpm	r24, Z+
    1b66:	93 ff       	sbrs	r25, 3
    1b68:	81 91       	ld	r24, Z+
    1b6a:	7f 01       	movw	r14, r30
    1b6c:	88 23       	and	r24, r24
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <vfprintf+0x5c>
    1b70:	ad c1       	rjmp	.+858    	; 0x1ecc <vfprintf+0x3b6>
    1b72:	85 32       	cpi	r24, 0x25	; 37
    1b74:	39 f4       	brne	.+14     	; 0x1b84 <vfprintf+0x6e>
    1b76:	93 fd       	sbrc	r25, 3
    1b78:	85 91       	lpm	r24, Z+
    1b7a:	93 ff       	sbrs	r25, 3
    1b7c:	81 91       	ld	r24, Z+
    1b7e:	7f 01       	movw	r14, r30
    1b80:	85 32       	cpi	r24, 0x25	; 37
    1b82:	21 f4       	brne	.+8      	; 0x1b8c <vfprintf+0x76>
    1b84:	b6 01       	movw	r22, r12
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	15 d3       	rcall	.+1578   	; 0x21b4 <fputc>
    1b8a:	e8 cf       	rjmp	.-48     	; 0x1b5c <vfprintf+0x46>
    1b8c:	91 2c       	mov	r9, r1
    1b8e:	21 2c       	mov	r2, r1
    1b90:	31 2c       	mov	r3, r1
    1b92:	ff e1       	ldi	r31, 0x1F	; 31
    1b94:	f3 15       	cp	r31, r3
    1b96:	d8 f0       	brcs	.+54     	; 0x1bce <vfprintf+0xb8>
    1b98:	8b 32       	cpi	r24, 0x2B	; 43
    1b9a:	79 f0       	breq	.+30     	; 0x1bba <vfprintf+0xa4>
    1b9c:	38 f4       	brcc	.+14     	; 0x1bac <vfprintf+0x96>
    1b9e:	80 32       	cpi	r24, 0x20	; 32
    1ba0:	79 f0       	breq	.+30     	; 0x1bc0 <vfprintf+0xaa>
    1ba2:	83 32       	cpi	r24, 0x23	; 35
    1ba4:	a1 f4       	brne	.+40     	; 0x1bce <vfprintf+0xb8>
    1ba6:	23 2d       	mov	r18, r3
    1ba8:	20 61       	ori	r18, 0x10	; 16
    1baa:	1d c0       	rjmp	.+58     	; 0x1be6 <vfprintf+0xd0>
    1bac:	8d 32       	cpi	r24, 0x2D	; 45
    1bae:	61 f0       	breq	.+24     	; 0x1bc8 <vfprintf+0xb2>
    1bb0:	80 33       	cpi	r24, 0x30	; 48
    1bb2:	69 f4       	brne	.+26     	; 0x1bce <vfprintf+0xb8>
    1bb4:	23 2d       	mov	r18, r3
    1bb6:	21 60       	ori	r18, 0x01	; 1
    1bb8:	16 c0       	rjmp	.+44     	; 0x1be6 <vfprintf+0xd0>
    1bba:	83 2d       	mov	r24, r3
    1bbc:	82 60       	ori	r24, 0x02	; 2
    1bbe:	38 2e       	mov	r3, r24
    1bc0:	e3 2d       	mov	r30, r3
    1bc2:	e4 60       	ori	r30, 0x04	; 4
    1bc4:	3e 2e       	mov	r3, r30
    1bc6:	2a c0       	rjmp	.+84     	; 0x1c1c <vfprintf+0x106>
    1bc8:	f3 2d       	mov	r31, r3
    1bca:	f8 60       	ori	r31, 0x08	; 8
    1bcc:	1d c0       	rjmp	.+58     	; 0x1c08 <vfprintf+0xf2>
    1bce:	37 fc       	sbrc	r3, 7
    1bd0:	2d c0       	rjmp	.+90     	; 0x1c2c <vfprintf+0x116>
    1bd2:	20 ed       	ldi	r18, 0xD0	; 208
    1bd4:	28 0f       	add	r18, r24
    1bd6:	2a 30       	cpi	r18, 0x0A	; 10
    1bd8:	40 f0       	brcs	.+16     	; 0x1bea <vfprintf+0xd4>
    1bda:	8e 32       	cpi	r24, 0x2E	; 46
    1bdc:	b9 f4       	brne	.+46     	; 0x1c0c <vfprintf+0xf6>
    1bde:	36 fc       	sbrc	r3, 6
    1be0:	75 c1       	rjmp	.+746    	; 0x1ecc <vfprintf+0x3b6>
    1be2:	23 2d       	mov	r18, r3
    1be4:	20 64       	ori	r18, 0x40	; 64
    1be6:	32 2e       	mov	r3, r18
    1be8:	19 c0       	rjmp	.+50     	; 0x1c1c <vfprintf+0x106>
    1bea:	36 fe       	sbrs	r3, 6
    1bec:	06 c0       	rjmp	.+12     	; 0x1bfa <vfprintf+0xe4>
    1bee:	8a e0       	ldi	r24, 0x0A	; 10
    1bf0:	98 9e       	mul	r9, r24
    1bf2:	20 0d       	add	r18, r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	92 2e       	mov	r9, r18
    1bf8:	11 c0       	rjmp	.+34     	; 0x1c1c <vfprintf+0x106>
    1bfa:	ea e0       	ldi	r30, 0x0A	; 10
    1bfc:	2e 9e       	mul	r2, r30
    1bfe:	20 0d       	add	r18, r0
    1c00:	11 24       	eor	r1, r1
    1c02:	22 2e       	mov	r2, r18
    1c04:	f3 2d       	mov	r31, r3
    1c06:	f0 62       	ori	r31, 0x20	; 32
    1c08:	3f 2e       	mov	r3, r31
    1c0a:	08 c0       	rjmp	.+16     	; 0x1c1c <vfprintf+0x106>
    1c0c:	8c 36       	cpi	r24, 0x6C	; 108
    1c0e:	21 f4       	brne	.+8      	; 0x1c18 <vfprintf+0x102>
    1c10:	83 2d       	mov	r24, r3
    1c12:	80 68       	ori	r24, 0x80	; 128
    1c14:	38 2e       	mov	r3, r24
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <vfprintf+0x106>
    1c18:	88 36       	cpi	r24, 0x68	; 104
    1c1a:	41 f4       	brne	.+16     	; 0x1c2c <vfprintf+0x116>
    1c1c:	f7 01       	movw	r30, r14
    1c1e:	93 fd       	sbrc	r25, 3
    1c20:	85 91       	lpm	r24, Z+
    1c22:	93 ff       	sbrs	r25, 3
    1c24:	81 91       	ld	r24, Z+
    1c26:	7f 01       	movw	r14, r30
    1c28:	81 11       	cpse	r24, r1
    1c2a:	b3 cf       	rjmp	.-154    	; 0x1b92 <vfprintf+0x7c>
    1c2c:	98 2f       	mov	r25, r24
    1c2e:	9f 7d       	andi	r25, 0xDF	; 223
    1c30:	95 54       	subi	r25, 0x45	; 69
    1c32:	93 30       	cpi	r25, 0x03	; 3
    1c34:	28 f4       	brcc	.+10     	; 0x1c40 <vfprintf+0x12a>
    1c36:	0c 5f       	subi	r16, 0xFC	; 252
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	9f e3       	ldi	r25, 0x3F	; 63
    1c3c:	99 83       	std	Y+1, r25	; 0x01
    1c3e:	0d c0       	rjmp	.+26     	; 0x1c5a <vfprintf+0x144>
    1c40:	83 36       	cpi	r24, 0x63	; 99
    1c42:	31 f0       	breq	.+12     	; 0x1c50 <vfprintf+0x13a>
    1c44:	83 37       	cpi	r24, 0x73	; 115
    1c46:	71 f0       	breq	.+28     	; 0x1c64 <vfprintf+0x14e>
    1c48:	83 35       	cpi	r24, 0x53	; 83
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <vfprintf+0x138>
    1c4c:	55 c0       	rjmp	.+170    	; 0x1cf8 <vfprintf+0x1e2>
    1c4e:	20 c0       	rjmp	.+64     	; 0x1c90 <vfprintf+0x17a>
    1c50:	f8 01       	movw	r30, r16
    1c52:	80 81       	ld	r24, Z
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	0e 5f       	subi	r16, 0xFE	; 254
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	88 24       	eor	r8, r8
    1c5c:	83 94       	inc	r8
    1c5e:	91 2c       	mov	r9, r1
    1c60:	53 01       	movw	r10, r6
    1c62:	12 c0       	rjmp	.+36     	; 0x1c88 <vfprintf+0x172>
    1c64:	28 01       	movw	r4, r16
    1c66:	f2 e0       	ldi	r31, 0x02	; 2
    1c68:	4f 0e       	add	r4, r31
    1c6a:	51 1c       	adc	r5, r1
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	a0 80       	ld	r10, Z
    1c70:	b1 80       	ldd	r11, Z+1	; 0x01
    1c72:	36 fe       	sbrs	r3, 6
    1c74:	03 c0       	rjmp	.+6      	; 0x1c7c <vfprintf+0x166>
    1c76:	69 2d       	mov	r22, r9
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <vfprintf+0x16a>
    1c7c:	6f ef       	ldi	r22, 0xFF	; 255
    1c7e:	7f ef       	ldi	r23, 0xFF	; 255
    1c80:	c5 01       	movw	r24, r10
    1c82:	8d d2       	rcall	.+1306   	; 0x219e <strnlen>
    1c84:	4c 01       	movw	r8, r24
    1c86:	82 01       	movw	r16, r4
    1c88:	f3 2d       	mov	r31, r3
    1c8a:	ff 77       	andi	r31, 0x7F	; 127
    1c8c:	3f 2e       	mov	r3, r31
    1c8e:	15 c0       	rjmp	.+42     	; 0x1cba <vfprintf+0x1a4>
    1c90:	28 01       	movw	r4, r16
    1c92:	22 e0       	ldi	r18, 0x02	; 2
    1c94:	42 0e       	add	r4, r18
    1c96:	51 1c       	adc	r5, r1
    1c98:	f8 01       	movw	r30, r16
    1c9a:	a0 80       	ld	r10, Z
    1c9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1c9e:	36 fe       	sbrs	r3, 6
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <vfprintf+0x192>
    1ca2:	69 2d       	mov	r22, r9
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <vfprintf+0x196>
    1ca8:	6f ef       	ldi	r22, 0xFF	; 255
    1caa:	7f ef       	ldi	r23, 0xFF	; 255
    1cac:	c5 01       	movw	r24, r10
    1cae:	65 d2       	rcall	.+1226   	; 0x217a <strnlen_P>
    1cb0:	4c 01       	movw	r8, r24
    1cb2:	f3 2d       	mov	r31, r3
    1cb4:	f0 68       	ori	r31, 0x80	; 128
    1cb6:	3f 2e       	mov	r3, r31
    1cb8:	82 01       	movw	r16, r4
    1cba:	33 fc       	sbrc	r3, 3
    1cbc:	19 c0       	rjmp	.+50     	; 0x1cf0 <vfprintf+0x1da>
    1cbe:	82 2d       	mov	r24, r2
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	88 16       	cp	r8, r24
    1cc4:	99 06       	cpc	r9, r25
    1cc6:	a0 f4       	brcc	.+40     	; 0x1cf0 <vfprintf+0x1da>
    1cc8:	b6 01       	movw	r22, r12
    1cca:	80 e2       	ldi	r24, 0x20	; 32
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	72 d2       	rcall	.+1252   	; 0x21b4 <fputc>
    1cd0:	2a 94       	dec	r2
    1cd2:	f5 cf       	rjmp	.-22     	; 0x1cbe <vfprintf+0x1a8>
    1cd4:	f5 01       	movw	r30, r10
    1cd6:	37 fc       	sbrc	r3, 7
    1cd8:	85 91       	lpm	r24, Z+
    1cda:	37 fe       	sbrs	r3, 7
    1cdc:	81 91       	ld	r24, Z+
    1cde:	5f 01       	movw	r10, r30
    1ce0:	b6 01       	movw	r22, r12
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	67 d2       	rcall	.+1230   	; 0x21b4 <fputc>
    1ce6:	21 10       	cpse	r2, r1
    1ce8:	2a 94       	dec	r2
    1cea:	21 e0       	ldi	r18, 0x01	; 1
    1cec:	82 1a       	sub	r8, r18
    1cee:	91 08       	sbc	r9, r1
    1cf0:	81 14       	cp	r8, r1
    1cf2:	91 04       	cpc	r9, r1
    1cf4:	79 f7       	brne	.-34     	; 0x1cd4 <vfprintf+0x1be>
    1cf6:	e1 c0       	rjmp	.+450    	; 0x1eba <vfprintf+0x3a4>
    1cf8:	84 36       	cpi	r24, 0x64	; 100
    1cfa:	11 f0       	breq	.+4      	; 0x1d00 <vfprintf+0x1ea>
    1cfc:	89 36       	cpi	r24, 0x69	; 105
    1cfe:	39 f5       	brne	.+78     	; 0x1d4e <vfprintf+0x238>
    1d00:	f8 01       	movw	r30, r16
    1d02:	37 fe       	sbrs	r3, 7
    1d04:	07 c0       	rjmp	.+14     	; 0x1d14 <vfprintf+0x1fe>
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	0c 5f       	subi	r16, 0xFC	; 252
    1d10:	1f 4f       	sbci	r17, 0xFF	; 255
    1d12:	08 c0       	rjmp	.+16     	; 0x1d24 <vfprintf+0x20e>
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	07 2e       	mov	r0, r23
    1d1a:	00 0c       	add	r0, r0
    1d1c:	88 0b       	sbc	r24, r24
    1d1e:	99 0b       	sbc	r25, r25
    1d20:	0e 5f       	subi	r16, 0xFE	; 254
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	f3 2d       	mov	r31, r3
    1d26:	ff 76       	andi	r31, 0x6F	; 111
    1d28:	3f 2e       	mov	r3, r31
    1d2a:	97 ff       	sbrs	r25, 7
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <vfprintf+0x22a>
    1d2e:	90 95       	com	r25
    1d30:	80 95       	com	r24
    1d32:	70 95       	com	r23
    1d34:	61 95       	neg	r22
    1d36:	7f 4f       	sbci	r23, 0xFF	; 255
    1d38:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3c:	f0 68       	ori	r31, 0x80	; 128
    1d3e:	3f 2e       	mov	r3, r31
    1d40:	2a e0       	ldi	r18, 0x0A	; 10
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	a3 01       	movw	r20, r6
    1d46:	72 d2       	rcall	.+1252   	; 0x222c <__ultoa_invert>
    1d48:	88 2e       	mov	r8, r24
    1d4a:	86 18       	sub	r8, r6
    1d4c:	44 c0       	rjmp	.+136    	; 0x1dd6 <vfprintf+0x2c0>
    1d4e:	85 37       	cpi	r24, 0x75	; 117
    1d50:	31 f4       	brne	.+12     	; 0x1d5e <vfprintf+0x248>
    1d52:	23 2d       	mov	r18, r3
    1d54:	2f 7e       	andi	r18, 0xEF	; 239
    1d56:	b2 2e       	mov	r11, r18
    1d58:	2a e0       	ldi	r18, 0x0A	; 10
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	25 c0       	rjmp	.+74     	; 0x1da8 <vfprintf+0x292>
    1d5e:	93 2d       	mov	r25, r3
    1d60:	99 7f       	andi	r25, 0xF9	; 249
    1d62:	b9 2e       	mov	r11, r25
    1d64:	8f 36       	cpi	r24, 0x6F	; 111
    1d66:	c1 f0       	breq	.+48     	; 0x1d98 <vfprintf+0x282>
    1d68:	18 f4       	brcc	.+6      	; 0x1d70 <vfprintf+0x25a>
    1d6a:	88 35       	cpi	r24, 0x58	; 88
    1d6c:	79 f0       	breq	.+30     	; 0x1d8c <vfprintf+0x276>
    1d6e:	ae c0       	rjmp	.+348    	; 0x1ecc <vfprintf+0x3b6>
    1d70:	80 37       	cpi	r24, 0x70	; 112
    1d72:	19 f0       	breq	.+6      	; 0x1d7a <vfprintf+0x264>
    1d74:	88 37       	cpi	r24, 0x78	; 120
    1d76:	21 f0       	breq	.+8      	; 0x1d80 <vfprintf+0x26a>
    1d78:	a9 c0       	rjmp	.+338    	; 0x1ecc <vfprintf+0x3b6>
    1d7a:	e9 2f       	mov	r30, r25
    1d7c:	e0 61       	ori	r30, 0x10	; 16
    1d7e:	be 2e       	mov	r11, r30
    1d80:	b4 fe       	sbrs	r11, 4
    1d82:	0d c0       	rjmp	.+26     	; 0x1d9e <vfprintf+0x288>
    1d84:	fb 2d       	mov	r31, r11
    1d86:	f4 60       	ori	r31, 0x04	; 4
    1d88:	bf 2e       	mov	r11, r31
    1d8a:	09 c0       	rjmp	.+18     	; 0x1d9e <vfprintf+0x288>
    1d8c:	34 fe       	sbrs	r3, 4
    1d8e:	0a c0       	rjmp	.+20     	; 0x1da4 <vfprintf+0x28e>
    1d90:	29 2f       	mov	r18, r25
    1d92:	26 60       	ori	r18, 0x06	; 6
    1d94:	b2 2e       	mov	r11, r18
    1d96:	06 c0       	rjmp	.+12     	; 0x1da4 <vfprintf+0x28e>
    1d98:	28 e0       	ldi	r18, 0x08	; 8
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	05 c0       	rjmp	.+10     	; 0x1da8 <vfprintf+0x292>
    1d9e:	20 e1       	ldi	r18, 0x10	; 16
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <vfprintf+0x292>
    1da4:	20 e1       	ldi	r18, 0x10	; 16
    1da6:	32 e0       	ldi	r19, 0x02	; 2
    1da8:	f8 01       	movw	r30, r16
    1daa:	b7 fe       	sbrs	r11, 7
    1dac:	07 c0       	rjmp	.+14     	; 0x1dbc <vfprintf+0x2a6>
    1dae:	60 81       	ld	r22, Z
    1db0:	71 81       	ldd	r23, Z+1	; 0x01
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	0c 5f       	subi	r16, 0xFC	; 252
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	06 c0       	rjmp	.+12     	; 0x1dc8 <vfprintf+0x2b2>
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 5f       	subi	r16, 0xFE	; 254
    1dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc8:	a3 01       	movw	r20, r6
    1dca:	30 d2       	rcall	.+1120   	; 0x222c <__ultoa_invert>
    1dcc:	88 2e       	mov	r8, r24
    1dce:	86 18       	sub	r8, r6
    1dd0:	fb 2d       	mov	r31, r11
    1dd2:	ff 77       	andi	r31, 0x7F	; 127
    1dd4:	3f 2e       	mov	r3, r31
    1dd6:	36 fe       	sbrs	r3, 6
    1dd8:	0d c0       	rjmp	.+26     	; 0x1df4 <vfprintf+0x2de>
    1dda:	23 2d       	mov	r18, r3
    1ddc:	2e 7f       	andi	r18, 0xFE	; 254
    1dde:	a2 2e       	mov	r10, r18
    1de0:	89 14       	cp	r8, r9
    1de2:	58 f4       	brcc	.+22     	; 0x1dfa <vfprintf+0x2e4>
    1de4:	34 fe       	sbrs	r3, 4
    1de6:	0b c0       	rjmp	.+22     	; 0x1dfe <vfprintf+0x2e8>
    1de8:	32 fc       	sbrc	r3, 2
    1dea:	09 c0       	rjmp	.+18     	; 0x1dfe <vfprintf+0x2e8>
    1dec:	83 2d       	mov	r24, r3
    1dee:	8e 7e       	andi	r24, 0xEE	; 238
    1df0:	a8 2e       	mov	r10, r24
    1df2:	05 c0       	rjmp	.+10     	; 0x1dfe <vfprintf+0x2e8>
    1df4:	b8 2c       	mov	r11, r8
    1df6:	a3 2c       	mov	r10, r3
    1df8:	03 c0       	rjmp	.+6      	; 0x1e00 <vfprintf+0x2ea>
    1dfa:	b8 2c       	mov	r11, r8
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <vfprintf+0x2ea>
    1dfe:	b9 2c       	mov	r11, r9
    1e00:	a4 fe       	sbrs	r10, 4
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <vfprintf+0x30c>
    1e04:	fe 01       	movw	r30, r28
    1e06:	e8 0d       	add	r30, r8
    1e08:	f1 1d       	adc	r31, r1
    1e0a:	80 81       	ld	r24, Z
    1e0c:	80 33       	cpi	r24, 0x30	; 48
    1e0e:	21 f4       	brne	.+8      	; 0x1e18 <vfprintf+0x302>
    1e10:	9a 2d       	mov	r25, r10
    1e12:	99 7e       	andi	r25, 0xE9	; 233
    1e14:	a9 2e       	mov	r10, r25
    1e16:	09 c0       	rjmp	.+18     	; 0x1e2a <vfprintf+0x314>
    1e18:	a2 fe       	sbrs	r10, 2
    1e1a:	06 c0       	rjmp	.+12     	; 0x1e28 <vfprintf+0x312>
    1e1c:	b3 94       	inc	r11
    1e1e:	b3 94       	inc	r11
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <vfprintf+0x314>
    1e22:	8a 2d       	mov	r24, r10
    1e24:	86 78       	andi	r24, 0x86	; 134
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <vfprintf+0x314>
    1e28:	b3 94       	inc	r11
    1e2a:	a3 fc       	sbrc	r10, 3
    1e2c:	10 c0       	rjmp	.+32     	; 0x1e4e <vfprintf+0x338>
    1e2e:	a0 fe       	sbrs	r10, 0
    1e30:	06 c0       	rjmp	.+12     	; 0x1e3e <vfprintf+0x328>
    1e32:	b2 14       	cp	r11, r2
    1e34:	80 f4       	brcc	.+32     	; 0x1e56 <vfprintf+0x340>
    1e36:	28 0c       	add	r2, r8
    1e38:	92 2c       	mov	r9, r2
    1e3a:	9b 18       	sub	r9, r11
    1e3c:	0d c0       	rjmp	.+26     	; 0x1e58 <vfprintf+0x342>
    1e3e:	b2 14       	cp	r11, r2
    1e40:	58 f4       	brcc	.+22     	; 0x1e58 <vfprintf+0x342>
    1e42:	b6 01       	movw	r22, r12
    1e44:	80 e2       	ldi	r24, 0x20	; 32
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	b5 d1       	rcall	.+874    	; 0x21b4 <fputc>
    1e4a:	b3 94       	inc	r11
    1e4c:	f8 cf       	rjmp	.-16     	; 0x1e3e <vfprintf+0x328>
    1e4e:	b2 14       	cp	r11, r2
    1e50:	18 f4       	brcc	.+6      	; 0x1e58 <vfprintf+0x342>
    1e52:	2b 18       	sub	r2, r11
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <vfprintf+0x344>
    1e56:	98 2c       	mov	r9, r8
    1e58:	21 2c       	mov	r2, r1
    1e5a:	a4 fe       	sbrs	r10, 4
    1e5c:	0f c0       	rjmp	.+30     	; 0x1e7c <vfprintf+0x366>
    1e5e:	b6 01       	movw	r22, r12
    1e60:	80 e3       	ldi	r24, 0x30	; 48
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a7 d1       	rcall	.+846    	; 0x21b4 <fputc>
    1e66:	a2 fe       	sbrs	r10, 2
    1e68:	16 c0       	rjmp	.+44     	; 0x1e96 <vfprintf+0x380>
    1e6a:	a1 fc       	sbrc	r10, 1
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <vfprintf+0x35e>
    1e6e:	88 e7       	ldi	r24, 0x78	; 120
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <vfprintf+0x362>
    1e74:	88 e5       	ldi	r24, 0x58	; 88
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	b6 01       	movw	r22, r12
    1e7a:	0c c0       	rjmp	.+24     	; 0x1e94 <vfprintf+0x37e>
    1e7c:	8a 2d       	mov	r24, r10
    1e7e:	86 78       	andi	r24, 0x86	; 134
    1e80:	51 f0       	breq	.+20     	; 0x1e96 <vfprintf+0x380>
    1e82:	a1 fe       	sbrs	r10, 1
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <vfprintf+0x374>
    1e86:	8b e2       	ldi	r24, 0x2B	; 43
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <vfprintf+0x376>
    1e8a:	80 e2       	ldi	r24, 0x20	; 32
    1e8c:	a7 fc       	sbrc	r10, 7
    1e8e:	8d e2       	ldi	r24, 0x2D	; 45
    1e90:	b6 01       	movw	r22, r12
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	8f d1       	rcall	.+798    	; 0x21b4 <fputc>
    1e96:	89 14       	cp	r8, r9
    1e98:	30 f4       	brcc	.+12     	; 0x1ea6 <vfprintf+0x390>
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	80 e3       	ldi	r24, 0x30	; 48
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	89 d1       	rcall	.+786    	; 0x21b4 <fputc>
    1ea2:	9a 94       	dec	r9
    1ea4:	f8 cf       	rjmp	.-16     	; 0x1e96 <vfprintf+0x380>
    1ea6:	8a 94       	dec	r8
    1ea8:	f3 01       	movw	r30, r6
    1eaa:	e8 0d       	add	r30, r8
    1eac:	f1 1d       	adc	r31, r1
    1eae:	80 81       	ld	r24, Z
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	7f d1       	rcall	.+766    	; 0x21b4 <fputc>
    1eb6:	81 10       	cpse	r8, r1
    1eb8:	f6 cf       	rjmp	.-20     	; 0x1ea6 <vfprintf+0x390>
    1eba:	22 20       	and	r2, r2
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <vfprintf+0x3aa>
    1ebe:	4e ce       	rjmp	.-868    	; 0x1b5c <vfprintf+0x46>
    1ec0:	b6 01       	movw	r22, r12
    1ec2:	80 e2       	ldi	r24, 0x20	; 32
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	76 d1       	rcall	.+748    	; 0x21b4 <fputc>
    1ec8:	2a 94       	dec	r2
    1eca:	f7 cf       	rjmp	.-18     	; 0x1eba <vfprintf+0x3a4>
    1ecc:	f6 01       	movw	r30, r12
    1ece:	86 81       	ldd	r24, Z+6	; 0x06
    1ed0:	97 81       	ldd	r25, Z+7	; 0x07
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <vfprintf+0x3c2>
    1ed4:	8f ef       	ldi	r24, 0xFF	; 255
    1ed6:	9f ef       	ldi	r25, 0xFF	; 255
    1ed8:	2b 96       	adiw	r28, 0x0b	; 11
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	ef 90       	pop	r14
    1eea:	df 90       	pop	r13
    1eec:	cf 90       	pop	r12
    1eee:	bf 90       	pop	r11
    1ef0:	af 90       	pop	r10
    1ef2:	9f 90       	pop	r9
    1ef4:	8f 90       	pop	r8
    1ef6:	7f 90       	pop	r7
    1ef8:	6f 90       	pop	r6
    1efa:	5f 90       	pop	r5
    1efc:	4f 90       	pop	r4
    1efe:	3f 90       	pop	r3
    1f00:	2f 90       	pop	r2
    1f02:	08 95       	ret

00001f04 <calloc>:
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	86 9f       	mul	r24, r22
    1f0e:	80 01       	movw	r16, r0
    1f10:	87 9f       	mul	r24, r23
    1f12:	10 0d       	add	r17, r0
    1f14:	96 9f       	mul	r25, r22
    1f16:	10 0d       	add	r17, r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	c8 01       	movw	r24, r16
    1f1c:	0d d0       	rcall	.+26     	; 0x1f38 <malloc>
    1f1e:	ec 01       	movw	r28, r24
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	21 f0       	breq	.+8      	; 0x1f2c <calloc+0x28>
    1f24:	a8 01       	movw	r20, r16
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	70 e0       	ldi	r23, 0x00	; 0
    1f2a:	32 d1       	rcall	.+612    	; 0x2190 <memset>
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

00001f38 <malloc>:
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	82 30       	cpi	r24, 0x02	; 2
    1f42:	91 05       	cpc	r25, r1
    1f44:	10 f4       	brcc	.+4      	; 0x1f4a <malloc+0x12>
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	e0 91 79 20 	lds	r30, 0x2079	; 0x802079 <__flp>
    1f4e:	f0 91 7a 20 	lds	r31, 0x207A	; 0x80207a <__flp+0x1>
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	a0 e0       	ldi	r26, 0x00	; 0
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	30 97       	sbiw	r30, 0x00	; 0
    1f5c:	19 f1       	breq	.+70     	; 0x1fa4 <malloc+0x6c>
    1f5e:	40 81       	ld	r20, Z
    1f60:	51 81       	ldd	r21, Z+1	; 0x01
    1f62:	02 81       	ldd	r16, Z+2	; 0x02
    1f64:	13 81       	ldd	r17, Z+3	; 0x03
    1f66:	48 17       	cp	r20, r24
    1f68:	59 07       	cpc	r21, r25
    1f6a:	c8 f0       	brcs	.+50     	; 0x1f9e <malloc+0x66>
    1f6c:	84 17       	cp	r24, r20
    1f6e:	95 07       	cpc	r25, r21
    1f70:	69 f4       	brne	.+26     	; 0x1f8c <malloc+0x54>
    1f72:	10 97       	sbiw	r26, 0x00	; 0
    1f74:	31 f0       	breq	.+12     	; 0x1f82 <malloc+0x4a>
    1f76:	12 96       	adiw	r26, 0x02	; 2
    1f78:	0c 93       	st	X, r16
    1f7a:	12 97       	sbiw	r26, 0x02	; 2
    1f7c:	13 96       	adiw	r26, 0x03	; 3
    1f7e:	1c 93       	st	X, r17
    1f80:	27 c0       	rjmp	.+78     	; 0x1fd0 <malloc+0x98>
    1f82:	00 93 79 20 	sts	0x2079, r16	; 0x802079 <__flp>
    1f86:	10 93 7a 20 	sts	0x207A, r17	; 0x80207a <__flp+0x1>
    1f8a:	22 c0       	rjmp	.+68     	; 0x1fd0 <malloc+0x98>
    1f8c:	21 15       	cp	r18, r1
    1f8e:	31 05       	cpc	r19, r1
    1f90:	19 f0       	breq	.+6      	; 0x1f98 <malloc+0x60>
    1f92:	42 17       	cp	r20, r18
    1f94:	53 07       	cpc	r21, r19
    1f96:	18 f4       	brcc	.+6      	; 0x1f9e <malloc+0x66>
    1f98:	9a 01       	movw	r18, r20
    1f9a:	bd 01       	movw	r22, r26
    1f9c:	ef 01       	movw	r28, r30
    1f9e:	df 01       	movw	r26, r30
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	db cf       	rjmp	.-74     	; 0x1f5a <malloc+0x22>
    1fa4:	21 15       	cp	r18, r1
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	f9 f0       	breq	.+62     	; 0x1fe8 <malloc+0xb0>
    1faa:	28 1b       	sub	r18, r24
    1fac:	39 0b       	sbc	r19, r25
    1fae:	24 30       	cpi	r18, 0x04	; 4
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	80 f4       	brcc	.+32     	; 0x1fd4 <malloc+0x9c>
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	61 15       	cp	r22, r1
    1fba:	71 05       	cpc	r23, r1
    1fbc:	21 f0       	breq	.+8      	; 0x1fc6 <malloc+0x8e>
    1fbe:	fb 01       	movw	r30, r22
    1fc0:	82 83       	std	Z+2, r24	; 0x02
    1fc2:	93 83       	std	Z+3, r25	; 0x03
    1fc4:	04 c0       	rjmp	.+8      	; 0x1fce <malloc+0x96>
    1fc6:	80 93 79 20 	sts	0x2079, r24	; 0x802079 <__flp>
    1fca:	90 93 7a 20 	sts	0x207A, r25	; 0x80207a <__flp+0x1>
    1fce:	fe 01       	movw	r30, r28
    1fd0:	32 96       	adiw	r30, 0x02	; 2
    1fd2:	44 c0       	rjmp	.+136    	; 0x205c <malloc+0x124>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e2 0f       	add	r30, r18
    1fd8:	f3 1f       	adc	r31, r19
    1fda:	81 93       	st	Z+, r24
    1fdc:	91 93       	st	Z+, r25
    1fde:	22 50       	subi	r18, 0x02	; 2
    1fe0:	31 09       	sbc	r19, r1
    1fe2:	28 83       	st	Y, r18
    1fe4:	39 83       	std	Y+1, r19	; 0x01
    1fe6:	3a c0       	rjmp	.+116    	; 0x205c <malloc+0x124>
    1fe8:	20 91 77 20 	lds	r18, 0x2077	; 0x802077 <__brkval>
    1fec:	30 91 78 20 	lds	r19, 0x2078	; 0x802078 <__brkval+0x1>
    1ff0:	23 2b       	or	r18, r19
    1ff2:	41 f4       	brne	.+16     	; 0x2004 <malloc+0xcc>
    1ff4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1ff8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1ffc:	20 93 77 20 	sts	0x2077, r18	; 0x802077 <__brkval>
    2000:	30 93 78 20 	sts	0x2078, r19	; 0x802078 <__brkval+0x1>
    2004:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    2008:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    200c:	21 15       	cp	r18, r1
    200e:	31 05       	cpc	r19, r1
    2010:	41 f4       	brne	.+16     	; 0x2022 <malloc+0xea>
    2012:	2d b7       	in	r18, 0x3d	; 61
    2014:	3e b7       	in	r19, 0x3e	; 62
    2016:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    201a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    201e:	24 1b       	sub	r18, r20
    2020:	35 0b       	sbc	r19, r21
    2022:	e0 91 77 20 	lds	r30, 0x2077	; 0x802077 <__brkval>
    2026:	f0 91 78 20 	lds	r31, 0x2078	; 0x802078 <__brkval+0x1>
    202a:	e2 17       	cp	r30, r18
    202c:	f3 07       	cpc	r31, r19
    202e:	a0 f4       	brcc	.+40     	; 0x2058 <malloc+0x120>
    2030:	2e 1b       	sub	r18, r30
    2032:	3f 0b       	sbc	r19, r31
    2034:	28 17       	cp	r18, r24
    2036:	39 07       	cpc	r19, r25
    2038:	78 f0       	brcs	.+30     	; 0x2058 <malloc+0x120>
    203a:	ac 01       	movw	r20, r24
    203c:	4e 5f       	subi	r20, 0xFE	; 254
    203e:	5f 4f       	sbci	r21, 0xFF	; 255
    2040:	24 17       	cp	r18, r20
    2042:	35 07       	cpc	r19, r21
    2044:	48 f0       	brcs	.+18     	; 0x2058 <malloc+0x120>
    2046:	4e 0f       	add	r20, r30
    2048:	5f 1f       	adc	r21, r31
    204a:	40 93 77 20 	sts	0x2077, r20	; 0x802077 <__brkval>
    204e:	50 93 78 20 	sts	0x2078, r21	; 0x802078 <__brkval+0x1>
    2052:	81 93       	st	Z+, r24
    2054:	91 93       	st	Z+, r25
    2056:	02 c0       	rjmp	.+4      	; 0x205c <malloc+0x124>
    2058:	e0 e0       	ldi	r30, 0x00	; 0
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	cf 01       	movw	r24, r30
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	08 95       	ret

00002068 <free>:
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	09 f4       	brne	.+2      	; 0x2072 <free+0xa>
    2070:	81 c0       	rjmp	.+258    	; 0x2174 <free+0x10c>
    2072:	fc 01       	movw	r30, r24
    2074:	32 97       	sbiw	r30, 0x02	; 2
    2076:	12 82       	std	Z+2, r1	; 0x02
    2078:	13 82       	std	Z+3, r1	; 0x03
    207a:	a0 91 79 20 	lds	r26, 0x2079	; 0x802079 <__flp>
    207e:	b0 91 7a 20 	lds	r27, 0x207A	; 0x80207a <__flp+0x1>
    2082:	10 97       	sbiw	r26, 0x00	; 0
    2084:	81 f4       	brne	.+32     	; 0x20a6 <free+0x3e>
    2086:	20 81       	ld	r18, Z
    2088:	31 81       	ldd	r19, Z+1	; 0x01
    208a:	82 0f       	add	r24, r18
    208c:	93 1f       	adc	r25, r19
    208e:	20 91 77 20 	lds	r18, 0x2077	; 0x802077 <__brkval>
    2092:	30 91 78 20 	lds	r19, 0x2078	; 0x802078 <__brkval+0x1>
    2096:	28 17       	cp	r18, r24
    2098:	39 07       	cpc	r19, r25
    209a:	51 f5       	brne	.+84     	; 0x20f0 <free+0x88>
    209c:	e0 93 77 20 	sts	0x2077, r30	; 0x802077 <__brkval>
    20a0:	f0 93 78 20 	sts	0x2078, r31	; 0x802078 <__brkval+0x1>
    20a4:	67 c0       	rjmp	.+206    	; 0x2174 <free+0x10c>
    20a6:	ed 01       	movw	r28, r26
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	ce 17       	cp	r28, r30
    20ae:	df 07       	cpc	r29, r31
    20b0:	40 f4       	brcc	.+16     	; 0x20c2 <free+0x5a>
    20b2:	4a 81       	ldd	r20, Y+2	; 0x02
    20b4:	5b 81       	ldd	r21, Y+3	; 0x03
    20b6:	9e 01       	movw	r18, r28
    20b8:	41 15       	cp	r20, r1
    20ba:	51 05       	cpc	r21, r1
    20bc:	f1 f0       	breq	.+60     	; 0x20fa <free+0x92>
    20be:	ea 01       	movw	r28, r20
    20c0:	f5 cf       	rjmp	.-22     	; 0x20ac <free+0x44>
    20c2:	c2 83       	std	Z+2, r28	; 0x02
    20c4:	d3 83       	std	Z+3, r29	; 0x03
    20c6:	40 81       	ld	r20, Z
    20c8:	51 81       	ldd	r21, Z+1	; 0x01
    20ca:	84 0f       	add	r24, r20
    20cc:	95 1f       	adc	r25, r21
    20ce:	c8 17       	cp	r28, r24
    20d0:	d9 07       	cpc	r29, r25
    20d2:	59 f4       	brne	.+22     	; 0x20ea <free+0x82>
    20d4:	88 81       	ld	r24, Y
    20d6:	99 81       	ldd	r25, Y+1	; 0x01
    20d8:	84 0f       	add	r24, r20
    20da:	95 1f       	adc	r25, r21
    20dc:	02 96       	adiw	r24, 0x02	; 2
    20de:	80 83       	st	Z, r24
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	9b 81       	ldd	r25, Y+3	; 0x03
    20e6:	82 83       	std	Z+2, r24	; 0x02
    20e8:	93 83       	std	Z+3, r25	; 0x03
    20ea:	21 15       	cp	r18, r1
    20ec:	31 05       	cpc	r19, r1
    20ee:	29 f4       	brne	.+10     	; 0x20fa <free+0x92>
    20f0:	e0 93 79 20 	sts	0x2079, r30	; 0x802079 <__flp>
    20f4:	f0 93 7a 20 	sts	0x207A, r31	; 0x80207a <__flp+0x1>
    20f8:	3d c0       	rjmp	.+122    	; 0x2174 <free+0x10c>
    20fa:	e9 01       	movw	r28, r18
    20fc:	ea 83       	std	Y+2, r30	; 0x02
    20fe:	fb 83       	std	Y+3, r31	; 0x03
    2100:	49 91       	ld	r20, Y+
    2102:	59 91       	ld	r21, Y+
    2104:	c4 0f       	add	r28, r20
    2106:	d5 1f       	adc	r29, r21
    2108:	ec 17       	cp	r30, r28
    210a:	fd 07       	cpc	r31, r29
    210c:	61 f4       	brne	.+24     	; 0x2126 <free+0xbe>
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	84 0f       	add	r24, r20
    2114:	95 1f       	adc	r25, r21
    2116:	02 96       	adiw	r24, 0x02	; 2
    2118:	e9 01       	movw	r28, r18
    211a:	88 83       	st	Y, r24
    211c:	99 83       	std	Y+1, r25	; 0x01
    211e:	82 81       	ldd	r24, Z+2	; 0x02
    2120:	93 81       	ldd	r25, Z+3	; 0x03
    2122:	8a 83       	std	Y+2, r24	; 0x02
    2124:	9b 83       	std	Y+3, r25	; 0x03
    2126:	e0 e0       	ldi	r30, 0x00	; 0
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	12 96       	adiw	r26, 0x02	; 2
    212c:	8d 91       	ld	r24, X+
    212e:	9c 91       	ld	r25, X
    2130:	13 97       	sbiw	r26, 0x03	; 3
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	19 f0       	breq	.+6      	; 0x213c <free+0xd4>
    2136:	fd 01       	movw	r30, r26
    2138:	dc 01       	movw	r26, r24
    213a:	f7 cf       	rjmp	.-18     	; 0x212a <free+0xc2>
    213c:	8d 91       	ld	r24, X+
    213e:	9c 91       	ld	r25, X
    2140:	11 97       	sbiw	r26, 0x01	; 1
    2142:	9d 01       	movw	r18, r26
    2144:	2e 5f       	subi	r18, 0xFE	; 254
    2146:	3f 4f       	sbci	r19, 0xFF	; 255
    2148:	82 0f       	add	r24, r18
    214a:	93 1f       	adc	r25, r19
    214c:	20 91 77 20 	lds	r18, 0x2077	; 0x802077 <__brkval>
    2150:	30 91 78 20 	lds	r19, 0x2078	; 0x802078 <__brkval+0x1>
    2154:	28 17       	cp	r18, r24
    2156:	39 07       	cpc	r19, r25
    2158:	69 f4       	brne	.+26     	; 0x2174 <free+0x10c>
    215a:	30 97       	sbiw	r30, 0x00	; 0
    215c:	29 f4       	brne	.+10     	; 0x2168 <free+0x100>
    215e:	10 92 79 20 	sts	0x2079, r1	; 0x802079 <__flp>
    2162:	10 92 7a 20 	sts	0x207A, r1	; 0x80207a <__flp+0x1>
    2166:	02 c0       	rjmp	.+4      	; 0x216c <free+0x104>
    2168:	12 82       	std	Z+2, r1	; 0x02
    216a:	13 82       	std	Z+3, r1	; 0x03
    216c:	a0 93 77 20 	sts	0x2077, r26	; 0x802077 <__brkval>
    2170:	b0 93 78 20 	sts	0x2078, r27	; 0x802078 <__brkval+0x1>
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	08 95       	ret

0000217a <strnlen_P>:
    217a:	fc 01       	movw	r30, r24
    217c:	05 90       	lpm	r0, Z+
    217e:	61 50       	subi	r22, 0x01	; 1
    2180:	70 40       	sbci	r23, 0x00	; 0
    2182:	01 10       	cpse	r0, r1
    2184:	d8 f7       	brcc	.-10     	; 0x217c <strnlen_P+0x2>
    2186:	80 95       	com	r24
    2188:	90 95       	com	r25
    218a:	8e 0f       	add	r24, r30
    218c:	9f 1f       	adc	r25, r31
    218e:	08 95       	ret

00002190 <memset>:
    2190:	dc 01       	movw	r26, r24
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <memset+0x6>
    2194:	6d 93       	st	X+, r22
    2196:	41 50       	subi	r20, 0x01	; 1
    2198:	50 40       	sbci	r21, 0x00	; 0
    219a:	e0 f7       	brcc	.-8      	; 0x2194 <memset+0x4>
    219c:	08 95       	ret

0000219e <strnlen>:
    219e:	fc 01       	movw	r30, r24
    21a0:	61 50       	subi	r22, 0x01	; 1
    21a2:	70 40       	sbci	r23, 0x00	; 0
    21a4:	01 90       	ld	r0, Z+
    21a6:	01 10       	cpse	r0, r1
    21a8:	d8 f7       	brcc	.-10     	; 0x21a0 <strnlen+0x2>
    21aa:	80 95       	com	r24
    21ac:	90 95       	com	r25
    21ae:	8e 0f       	add	r24, r30
    21b0:	9f 1f       	adc	r25, r31
    21b2:	08 95       	ret

000021b4 <fputc>:
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	fb 01       	movw	r30, r22
    21be:	23 81       	ldd	r18, Z+3	; 0x03
    21c0:	21 fd       	sbrc	r18, 1
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <fputc+0x16>
    21c4:	8f ef       	ldi	r24, 0xFF	; 255
    21c6:	9f ef       	ldi	r25, 0xFF	; 255
    21c8:	2c c0       	rjmp	.+88     	; 0x2222 <fputc+0x6e>
    21ca:	22 ff       	sbrs	r18, 2
    21cc:	16 c0       	rjmp	.+44     	; 0x21fa <fputc+0x46>
    21ce:	46 81       	ldd	r20, Z+6	; 0x06
    21d0:	57 81       	ldd	r21, Z+7	; 0x07
    21d2:	24 81       	ldd	r18, Z+4	; 0x04
    21d4:	35 81       	ldd	r19, Z+5	; 0x05
    21d6:	42 17       	cp	r20, r18
    21d8:	53 07       	cpc	r21, r19
    21da:	44 f4       	brge	.+16     	; 0x21ec <fputc+0x38>
    21dc:	a0 81       	ld	r26, Z
    21de:	b1 81       	ldd	r27, Z+1	; 0x01
    21e0:	9d 01       	movw	r18, r26
    21e2:	2f 5f       	subi	r18, 0xFF	; 255
    21e4:	3f 4f       	sbci	r19, 0xFF	; 255
    21e6:	20 83       	st	Z, r18
    21e8:	31 83       	std	Z+1, r19	; 0x01
    21ea:	8c 93       	st	X, r24
    21ec:	26 81       	ldd	r18, Z+6	; 0x06
    21ee:	37 81       	ldd	r19, Z+7	; 0x07
    21f0:	2f 5f       	subi	r18, 0xFF	; 255
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	26 83       	std	Z+6, r18	; 0x06
    21f6:	37 83       	std	Z+7, r19	; 0x07
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <fputc+0x6e>
    21fa:	8b 01       	movw	r16, r22
    21fc:	ec 01       	movw	r28, r24
    21fe:	fb 01       	movw	r30, r22
    2200:	00 84       	ldd	r0, Z+8	; 0x08
    2202:	f1 85       	ldd	r31, Z+9	; 0x09
    2204:	e0 2d       	mov	r30, r0
    2206:	19 95       	eicall
    2208:	89 2b       	or	r24, r25
    220a:	e1 f6       	brne	.-72     	; 0x21c4 <fputc+0x10>
    220c:	d8 01       	movw	r26, r16
    220e:	16 96       	adiw	r26, 0x06	; 6
    2210:	8d 91       	ld	r24, X+
    2212:	9c 91       	ld	r25, X
    2214:	17 97       	sbiw	r26, 0x07	; 7
    2216:	01 96       	adiw	r24, 0x01	; 1
    2218:	16 96       	adiw	r26, 0x06	; 6
    221a:	8d 93       	st	X+, r24
    221c:	9c 93       	st	X, r25
    221e:	17 97       	sbiw	r26, 0x07	; 7
    2220:	ce 01       	movw	r24, r28
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	08 95       	ret

0000222c <__ultoa_invert>:
    222c:	fa 01       	movw	r30, r20
    222e:	aa 27       	eor	r26, r26
    2230:	28 30       	cpi	r18, 0x08	; 8
    2232:	51 f1       	breq	.+84     	; 0x2288 <__ultoa_invert+0x5c>
    2234:	20 31       	cpi	r18, 0x10	; 16
    2236:	81 f1       	breq	.+96     	; 0x2298 <__ultoa_invert+0x6c>
    2238:	e8 94       	clt
    223a:	6f 93       	push	r22
    223c:	6e 7f       	andi	r22, 0xFE	; 254
    223e:	6e 5f       	subi	r22, 0xFE	; 254
    2240:	7f 4f       	sbci	r23, 0xFF	; 255
    2242:	8f 4f       	sbci	r24, 0xFF	; 255
    2244:	9f 4f       	sbci	r25, 0xFF	; 255
    2246:	af 4f       	sbci	r26, 0xFF	; 255
    2248:	b1 e0       	ldi	r27, 0x01	; 1
    224a:	3e d0       	rcall	.+124    	; 0x22c8 <__ultoa_invert+0x9c>
    224c:	b4 e0       	ldi	r27, 0x04	; 4
    224e:	3c d0       	rcall	.+120    	; 0x22c8 <__ultoa_invert+0x9c>
    2250:	67 0f       	add	r22, r23
    2252:	78 1f       	adc	r23, r24
    2254:	89 1f       	adc	r24, r25
    2256:	9a 1f       	adc	r25, r26
    2258:	a1 1d       	adc	r26, r1
    225a:	68 0f       	add	r22, r24
    225c:	79 1f       	adc	r23, r25
    225e:	8a 1f       	adc	r24, r26
    2260:	91 1d       	adc	r25, r1
    2262:	a1 1d       	adc	r26, r1
    2264:	6a 0f       	add	r22, r26
    2266:	71 1d       	adc	r23, r1
    2268:	81 1d       	adc	r24, r1
    226a:	91 1d       	adc	r25, r1
    226c:	a1 1d       	adc	r26, r1
    226e:	20 d0       	rcall	.+64     	; 0x22b0 <__ultoa_invert+0x84>
    2270:	09 f4       	brne	.+2      	; 0x2274 <__ultoa_invert+0x48>
    2272:	68 94       	set
    2274:	3f 91       	pop	r19
    2276:	2a e0       	ldi	r18, 0x0A	; 10
    2278:	26 9f       	mul	r18, r22
    227a:	11 24       	eor	r1, r1
    227c:	30 19       	sub	r19, r0
    227e:	30 5d       	subi	r19, 0xD0	; 208
    2280:	31 93       	st	Z+, r19
    2282:	de f6       	brtc	.-74     	; 0x223a <__ultoa_invert+0xe>
    2284:	cf 01       	movw	r24, r30
    2286:	08 95       	ret
    2288:	46 2f       	mov	r20, r22
    228a:	47 70       	andi	r20, 0x07	; 7
    228c:	40 5d       	subi	r20, 0xD0	; 208
    228e:	41 93       	st	Z+, r20
    2290:	b3 e0       	ldi	r27, 0x03	; 3
    2292:	0f d0       	rcall	.+30     	; 0x22b2 <__ultoa_invert+0x86>
    2294:	c9 f7       	brne	.-14     	; 0x2288 <__ultoa_invert+0x5c>
    2296:	f6 cf       	rjmp	.-20     	; 0x2284 <__ultoa_invert+0x58>
    2298:	46 2f       	mov	r20, r22
    229a:	4f 70       	andi	r20, 0x0F	; 15
    229c:	40 5d       	subi	r20, 0xD0	; 208
    229e:	4a 33       	cpi	r20, 0x3A	; 58
    22a0:	18 f0       	brcs	.+6      	; 0x22a8 <__ultoa_invert+0x7c>
    22a2:	49 5d       	subi	r20, 0xD9	; 217
    22a4:	31 fd       	sbrc	r19, 1
    22a6:	40 52       	subi	r20, 0x20	; 32
    22a8:	41 93       	st	Z+, r20
    22aa:	02 d0       	rcall	.+4      	; 0x22b0 <__ultoa_invert+0x84>
    22ac:	a9 f7       	brne	.-22     	; 0x2298 <__ultoa_invert+0x6c>
    22ae:	ea cf       	rjmp	.-44     	; 0x2284 <__ultoa_invert+0x58>
    22b0:	b4 e0       	ldi	r27, 0x04	; 4
    22b2:	a6 95       	lsr	r26
    22b4:	97 95       	ror	r25
    22b6:	87 95       	ror	r24
    22b8:	77 95       	ror	r23
    22ba:	67 95       	ror	r22
    22bc:	ba 95       	dec	r27
    22be:	c9 f7       	brne	.-14     	; 0x22b2 <__ultoa_invert+0x86>
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	61 05       	cpc	r22, r1
    22c4:	71 05       	cpc	r23, r1
    22c6:	08 95       	ret
    22c8:	9b 01       	movw	r18, r22
    22ca:	ac 01       	movw	r20, r24
    22cc:	0a 2e       	mov	r0, r26
    22ce:	06 94       	lsr	r0
    22d0:	57 95       	ror	r21
    22d2:	47 95       	ror	r20
    22d4:	37 95       	ror	r19
    22d6:	27 95       	ror	r18
    22d8:	ba 95       	dec	r27
    22da:	c9 f7       	brne	.-14     	; 0x22ce <__ultoa_invert+0xa2>
    22dc:	62 0f       	add	r22, r18
    22de:	73 1f       	adc	r23, r19
    22e0:	84 1f       	adc	r24, r20
    22e2:	95 1f       	adc	r25, r21
    22e4:	a0 1d       	adc	r26, r0
    22e6:	08 95       	ret

000022e8 <_exit>:
    22e8:	f8 94       	cli

000022ea <__stop_program>:
    22ea:	ff cf       	rjmp	.-2      	; 0x22ea <__stop_program>
