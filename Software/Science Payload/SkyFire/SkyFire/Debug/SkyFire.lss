
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000497c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00802000  0000497c  00004a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000df  008020c0  008020c0  00004ad0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00004b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014737  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a4a  00000000  00000000  0001978f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008f98  00000000  00000000  0001e1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001408  00000000  00000000  00027174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d606  00000000  00000000  0002857c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000056f8  00000000  00000000  00055b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  0005b27a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003734  00000000  00000000  0005b702  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c1       	rjmp	.+754    	; 0x2f4 <__ctors_end>
       2:	00 00       	nop
       4:	9d c1       	rjmp	.+826    	; 0x340 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c1       	rjmp	.+822    	; 0x340 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c1       	rjmp	.+818    	; 0x340 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c1       	rjmp	.+814    	; 0x340 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c1       	rjmp	.+810    	; 0x340 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c1       	rjmp	.+806    	; 0x340 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c1       	rjmp	.+802    	; 0x340 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c1       	rjmp	.+798    	; 0x340 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c1       	rjmp	.+794    	; 0x340 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c1       	rjmp	.+790    	; 0x340 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c1       	rjmp	.+786    	; 0x340 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c1       	rjmp	.+782    	; 0x340 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c1       	rjmp	.+778    	; 0x340 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__vector_14>
      3c:	81 c1       	rjmp	.+770    	; 0x340 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c1       	rjmp	.+766    	; 0x340 <__bad_interrupt>
      42:	00 00       	nop
      44:	7d c1       	rjmp	.+762    	; 0x340 <__bad_interrupt>
      46:	00 00       	nop
      48:	7b c1       	rjmp	.+758    	; 0x340 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c1       	rjmp	.+754    	; 0x340 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c1       	rjmp	.+750    	; 0x340 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c1       	rjmp	.+746    	; 0x340 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c1       	rjmp	.+742    	; 0x340 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c1       	rjmp	.+738    	; 0x340 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c1       	rjmp	.+734    	; 0x340 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c1       	rjmp	.+730    	; 0x340 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c1       	rjmp	.+726    	; 0x340 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c1       	rjmp	.+722    	; 0x340 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c1       	rjmp	.+718    	; 0x340 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c1       	rjmp	.+714    	; 0x340 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c1       	rjmp	.+710    	; 0x340 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c1       	rjmp	.+706    	; 0x340 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c1       	rjmp	.+702    	; 0x340 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c1       	rjmp	.+698    	; 0x340 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c1       	rjmp	.+694    	; 0x340 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c1       	rjmp	.+690    	; 0x340 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c1       	rjmp	.+686    	; 0x340 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c1       	rjmp	.+682    	; 0x340 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c1       	rjmp	.+678    	; 0x340 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c1       	rjmp	.+674    	; 0x340 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c1       	rjmp	.+670    	; 0x340 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c1       	rjmp	.+666    	; 0x340 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c1       	rjmp	.+662    	; 0x340 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c1       	rjmp	.+658    	; 0x340 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c1       	rjmp	.+654    	; 0x340 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c1       	rjmp	.+650    	; 0x340 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c1       	rjmp	.+646    	; 0x340 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__vector_47>
      c0:	3f c1       	rjmp	.+638    	; 0x340 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c1       	rjmp	.+634    	; 0x340 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c1       	rjmp	.+630    	; 0x340 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c1       	rjmp	.+626    	; 0x340 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c1       	rjmp	.+622    	; 0x340 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c1       	rjmp	.+618    	; 0x340 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c1       	rjmp	.+614    	; 0x340 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c1       	rjmp	.+610    	; 0x340 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c1       	rjmp	.+606    	; 0x340 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2d c1       	rjmp	.+602    	; 0x340 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__vector_58>
      ec:	29 c1       	rjmp	.+594    	; 0x340 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	27 c1       	rjmp	.+590    	; 0x340 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	25 c1       	rjmp	.+586    	; 0x340 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	23 c1       	rjmp	.+582    	; 0x340 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	21 c1       	rjmp	.+578    	; 0x340 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1f c1       	rjmp	.+574    	; 0x340 <__bad_interrupt>
     102:	00 00       	nop
     104:	1d c1       	rjmp	.+570    	; 0x340 <__bad_interrupt>
     106:	00 00       	nop
     108:	1b c1       	rjmp	.+566    	; 0x340 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	19 c1       	rjmp	.+562    	; 0x340 <__bad_interrupt>
     10e:	00 00       	nop
     110:	17 c1       	rjmp	.+558    	; 0x340 <__bad_interrupt>
     112:	00 00       	nop
     114:	15 c1       	rjmp	.+554    	; 0x340 <__bad_interrupt>
     116:	00 00       	nop
     118:	13 c1       	rjmp	.+550    	; 0x340 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	3d c1       	rjmp	.+634    	; 0x398 <__vector_71>
     11e:	00 00       	nop
     120:	78 c1       	rjmp	.+752    	; 0x412 <__vector_72>
     122:	00 00       	nop
     124:	b3 c1       	rjmp	.+870    	; 0x48c <__vector_73>
     126:	00 00       	nop
     128:	ee c1       	rjmp	.+988    	; 0x506 <__vector_74>
     12a:	00 00       	nop
     12c:	09 c1       	rjmp	.+530    	; 0x340 <__bad_interrupt>
     12e:	00 00       	nop
     130:	07 c1       	rjmp	.+526    	; 0x340 <__bad_interrupt>
     132:	00 00       	nop
     134:	05 c1       	rjmp	.+522    	; 0x340 <__bad_interrupt>
     136:	00 00       	nop
     138:	03 c1       	rjmp	.+518    	; 0x340 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	01 c1       	rjmp	.+514    	; 0x340 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ff c0       	rjmp	.+510    	; 0x340 <__bad_interrupt>
     142:	00 00       	nop
     144:	fd c0       	rjmp	.+506    	; 0x340 <__bad_interrupt>
     146:	00 00       	nop
     148:	fb c0       	rjmp	.+502    	; 0x340 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f9 c0       	rjmp	.+498    	; 0x340 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f7 c0       	rjmp	.+494    	; 0x340 <__bad_interrupt>
     152:	00 00       	nop
     154:	f5 c0       	rjmp	.+490    	; 0x340 <__bad_interrupt>
     156:	00 00       	nop
     158:	f3 c0       	rjmp	.+486    	; 0x340 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f1 c0       	rjmp	.+482    	; 0x340 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ef c0       	rjmp	.+478    	; 0x340 <__bad_interrupt>
     162:	00 00       	nop
     164:	ed c0       	rjmp	.+474    	; 0x340 <__bad_interrupt>
     166:	00 00       	nop
     168:	eb c0       	rjmp	.+470    	; 0x340 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__vector_91>
     170:	e7 c0       	rjmp	.+462    	; 0x340 <__bad_interrupt>
     172:	00 00       	nop
     174:	e5 c0       	rjmp	.+458    	; 0x340 <__bad_interrupt>
     176:	00 00       	nop
     178:	e3 c0       	rjmp	.+454    	; 0x340 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e1 c0       	rjmp	.+450    	; 0x340 <__bad_interrupt>
     17e:	00 00       	nop
     180:	df c0       	rjmp	.+446    	; 0x340 <__bad_interrupt>
     182:	00 00       	nop
     184:	dd c0       	rjmp	.+442    	; 0x340 <__bad_interrupt>
     186:	00 00       	nop
     188:	db c0       	rjmp	.+438    	; 0x340 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d9 c0       	rjmp	.+434    	; 0x340 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d7 c0       	rjmp	.+430    	; 0x340 <__bad_interrupt>
     192:	00 00       	nop
     194:	d5 c0       	rjmp	.+426    	; 0x340 <__bad_interrupt>
     196:	00 00       	nop
     198:	d3 c0       	rjmp	.+422    	; 0x340 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d1 c0       	rjmp	.+418    	; 0x340 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	cf c0       	rjmp	.+414    	; 0x340 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	cd c0       	rjmp	.+410    	; 0x340 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cb c0       	rjmp	.+406    	; 0x340 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c9 c0       	rjmp	.+402    	; 0x340 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c7 c0       	rjmp	.+398    	; 0x340 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c5 c0       	rjmp	.+394    	; 0x340 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c3 c0       	rjmp	.+390    	; 0x340 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c1 c0       	rjmp	.+386    	; 0x340 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	bf c0       	rjmp	.+382    	; 0x340 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	bd c0       	rjmp	.+378    	; 0x340 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	bb c0       	rjmp	.+374    	; 0x340 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b9 c0       	rjmp	.+370    	; 0x340 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b7 c0       	rjmp	.+366    	; 0x340 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b5 c0       	rjmp	.+362    	; 0x340 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b3 c0       	rjmp	.+358    	; 0x340 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b1 c0       	rjmp	.+354    	; 0x340 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	af c0       	rjmp	.+350    	; 0x340 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ad c0       	rjmp	.+346    	; 0x340 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ab c0       	rjmp	.+342    	; 0x340 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a9 c0       	rjmp	.+338    	; 0x340 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a7 c0       	rjmp	.+334    	; 0x340 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a5 c0       	rjmp	.+330    	; 0x340 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a3 c0       	rjmp	.+326    	; 0x340 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	03 6e       	ori	r16, 0xE3	; 227
     1fe:	db 36       	cpi	r29, 0x6B	; 107
     200:	3d 9a       	sbi	0x07, 5	; 7
     202:	99 99       	sbic	0x13, 1	; 19
     204:	99 3d       	cpi	r25, 0xD9	; 217
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	3e 00       	.word	0x003e	; ????
     20c:	00 00       	nop
     20e:	80 3f       	cpi	r24, 0xF0	; 240
     210:	08 4a       	sbci	r16, 0xA8	; 168
     212:	d7 3b       	cpi	r29, 0xB7	; 183
     214:	3b ce       	rjmp	.-906    	; 0xfffffe8c <__eeprom_end+0xff7efe8c>
     216:	01 6e       	ori	r16, 0xE1	; 225
     218:	84 bc       	out	0x24, r8	; 36
     21a:	bf fd       	.word	0xfdbf	; ????
     21c:	c1 2f       	mov	r28, r17
     21e:	3d 6c       	ori	r19, 0xCD	; 205
     220:	74 31       	cpi	r23, 0x14	; 20
     222:	9a bd       	out	0x2a, r25	; 42
     224:	56 83       	std	Z+6, r21	; 0x06
     226:	3d da       	rcall	.-2950   	; 0xfffff6a2 <__eeprom_end+0xff7ef6a2>
     228:	3d 00       	.word	0x003d	; ????
     22a:	c7 7f       	andi	r28, 0xF7	; 247
     22c:	11 be       	out	0x31, r1	; 49
     22e:	d9 e4       	ldi	r29, 0x49	; 73
     230:	bb 4c       	sbci	r27, 0xCB	; 203
     232:	3e 91       	ld	r19, -X
     234:	6b aa       	std	Y+51, r6	; 0x33
     236:	aa be       	out	0x3a, r10	; 58
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	3f 07       	cpc	r19, r31
     23e:	2c 7a       	andi	r18, 0xAC	; 172
     240:	a5 ba       	out	0x15, r10	; 21
     242:	6c c5       	rjmp	.+2776   	; 0xd1c <rb16_write+0x40>
     244:	90 da       	rcall	.-2784   	; 0xfffff766 <__eeprom_end+0xff7ef766>
     246:	3b 93       	.word	0x933b	; ????
     248:	65 fc       	sbrc	r6, 5
     24a:	8b bc       	out	0x2b, r8	; 43
     24c:	53 f8       	bld	r5, 3
     24e:	10 fd       	sbrc	r17, 0
     250:	3c 56       	subi	r19, 0x6C	; 108
     252:	92 83       	std	Z+2, r25	; 0x02
     254:	4d bd       	out	0x2d, r20	; 45
     256:	87 9d       	mul	r24, r7
     258:	3a b6       	in	r3, 0x3a	; 58
     25a:	3d cb       	rjmp	.-2438   	; 0xfffff8d6 <__eeprom_end+0xff7ef8d6>
     25c:	c9 bf       	out	0x39, r28	; 57
     25e:	5b be       	out	0x3b, r5	; 59
     260:	73 da       	rcall	.-2842   	; 0xfffff748 <__eeprom_end+0xff7ef748>
     262:	0f c9       	rjmp	.-3554   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     264:	3f 07       	cpc	r19, r31
     266:	63 42       	sbci	r22, 0x23	; 35
     268:	36 b7       	in	r19, 0x36	; 54
     26a:	9b d8       	rcall	.-3786   	; 0xfffff3a2 <__eeprom_end+0xff7ef3a2>
     26c:	a7 1a       	sub	r10, r23
     26e:	39 68       	ori	r19, 0x89	; 137
     270:	56 18       	sub	r5, r6
     272:	ae ba       	out	0x1e, r10	; 30
     274:	ab 55       	subi	r26, 0x5B	; 91
     276:	8c 1d       	adc	r24, r12
     278:	3c b7       	in	r19, 0x3c	; 60
     27a:	cc 57       	subi	r28, 0x7C	; 124
     27c:	63 bd       	out	0x23, r22	; 35
     27e:	6d ed       	ldi	r22, 0xDD	; 221
     280:	fd 75       	andi	r31, 0x5D	; 93
     282:	3e f6       	brtc	.-114    	; 0x212 <__SREG__+0x1d3>
     284:	17 72       	andi	r17, 0x27	; 39
     286:	31 bf       	out	0x31, r19	; 49
     288:	00 00       	nop
     28a:	00 80       	ld	r0, Z
     28c:	3f 08       	sbc	r3, r15
     28e:	00 00       	nop
     290:	00 be       	out	0x30, r0	; 48
     292:	92 24       	eor	r9, r2
     294:	49 12       	cpse	r4, r25
     296:	3e ab       	std	Y+54, r19	; 0x36
     298:	aa aa       	std	Y+50, r10	; 0x32
     29a:	2a be       	out	0x3a, r2	; 58
     29c:	cd cc       	rjmp	.-1638   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
     29e:	cc 4c       	sbci	r28, 0xCC	; 204
     2a0:	3e 00       	.word	0x003e	; ????
     2a2:	00 00       	nop
     2a4:	80 be       	out	0x30, r8	; 48
     2a6:	ab aa       	std	Y+51, r10	; 0x33
     2a8:	aa aa       	std	Y+50, r10	; 0x32
     2aa:	3e 00       	.word	0x003e	; ????
     2ac:	00 00       	nop
     2ae:	00 bf       	out	0x30, r16	; 48
     2b0:	00 00       	nop
     2b2:	00 80       	ld	r0, Z
     2b4:	3f 00       	.word	0x003f	; ????
     2b6:	00 00       	nop
     2b8:	00 00       	nop
     2ba:	08 41       	sbci	r16, 0x18	; 24
     2bc:	78 d3       	rcall	.+1776   	; 0x9ae <bno085_init+0x1a>
     2be:	bb 43       	sbci	r27, 0x3B	; 59
     2c0:	87 d1       	rcall	.+782    	; 0x5d0 <usart_set_baudrate+0x34>
     2c2:	13 3d       	cpi	r17, 0xD3	; 211
     2c4:	19 0e       	add	r1, r25
     2c6:	3c c3       	rjmp	.+1656   	; 0x940 <usart_init_rs232+0x17e>
     2c8:	bd 42       	sbci	r27, 0x2D	; 45
     2ca:	82 ad       	ldd	r24, Z+58	; 0x3a
     2cc:	2b 3e       	cpi	r18, 0xEB	; 235
     2ce:	68 ec       	ldi	r22, 0xC8	; 200
     2d0:	82 76       	andi	r24, 0x62	; 98
     2d2:	be d9       	rcall	.-3204   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     2d4:	8f e1       	ldi	r24, 0x1F	; 31
     2d6:	a9 3e       	cpi	r26, 0xE9	; 233
     2d8:	4c 80       	ldd	r4, Y+4	; 0x04
     2da:	ef ff       	.word	0xffef	; ????
     2dc:	be 01       	movw	r22, r28
     2de:	c4 ff       	sbrs	r28, 4
     2e0:	7f 3f       	cpi	r23, 0xFF	; 255
     2e2:	00 00       	nop
     2e4:	00 00       	nop
	...

000002e8 <__trampolines_end>:
     2e8:	63 64       	ori	r22, 0x43	; 67
     2ea:	69 6e       	ori	r22, 0xE9	; 233
     2ec:	6f 70       	andi	r22, 0x0F	; 15
     2ee:	73 75       	andi	r23, 0x53	; 83
     2f0:	78 58       	subi	r23, 0x88	; 136
     2f2:	5b 00       	.word	0x005b	; ????

000002f4 <__ctors_end>:
     2f4:	11 24       	eor	r1, r1
     2f6:	1f be       	out	0x3f, r1	; 63
     2f8:	cf ef       	ldi	r28, 0xFF	; 255
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	df e3       	ldi	r29, 0x3F	; 63
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	0c bf       	out	0x3c, r16	; 60
     304:	18 be       	out	0x38, r1	; 56
     306:	19 be       	out	0x39, r1	; 57
     308:	1a be       	out	0x3a, r1	; 58
     30a:	1b be       	out	0x3b, r1	; 59

0000030c <__do_copy_data>:
     30c:	10 e2       	ldi	r17, 0x20	; 32
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b0 e2       	ldi	r27, 0x20	; 32
     312:	ec e7       	ldi	r30, 0x7C	; 124
     314:	f9 e4       	ldi	r31, 0x49	; 73
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0b bf       	out	0x3b, r16	; 59
     31a:	02 c0       	rjmp	.+4      	; 0x320 <__do_copy_data+0x14>
     31c:	07 90       	elpm	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	a0 3c       	cpi	r26, 0xC0	; 192
     322:	b1 07       	cpc	r27, r17
     324:	d9 f7       	brne	.-10     	; 0x31c <__do_copy_data+0x10>
     326:	1b be       	out	0x3b, r1	; 59

00000328 <__do_clear_bss>:
     328:	21 e2       	ldi	r18, 0x21	; 33
     32a:	a0 ec       	ldi	r26, 0xC0	; 192
     32c:	b0 e2       	ldi	r27, 0x20	; 32
     32e:	01 c0       	rjmp	.+2      	; 0x332 <.do_clear_bss_start>

00000330 <.do_clear_bss_loop>:
     330:	1d 92       	st	X+, r1

00000332 <.do_clear_bss_start>:
     332:	af 39       	cpi	r26, 0x9F	; 159
     334:	b2 07       	cpc	r27, r18
     336:	e1 f7       	brne	.-8      	; 0x330 <.do_clear_bss_loop>
     338:	0e 94 05 11 	call	0x220a	; 0x220a <main>
     33c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <_exit>

00000340 <__bad_interrupt>:
     340:	5f ce       	rjmp	.-834    	; 0x0 <__vectors>

00000342 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	1f 92       	push	r1
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     34c:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <stdio_base>
     350:	90 91 1a 21 	lds	r25, 0x211A	; 0x80211a <stdio_base+0x1>
     354:	e0 91 15 21 	lds	r30, 0x2115	; 0x802115 <ptr_get>
     358:	f0 91 16 21 	lds	r31, 0x2116	; 0x802116 <ptr_get+0x1>
     35c:	be 01       	movw	r22, r28
     35e:	6f 5f       	subi	r22, 0xFF	; 255
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	19 95       	eicall
	return c;
     364:	89 81       	ldd	r24, Y+1	; 0x01
}
     366:	08 2e       	mov	r0, r24
     368:	00 0c       	add	r0, r0
     36a:	99 0b       	sbc	r25, r25
     36c:	0f 90       	pop	r0
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     374:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     376:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <stdio_base>
     37a:	90 91 1a 21 	lds	r25, 0x211A	; 0x80211a <stdio_base+0x1>
     37e:	e0 91 17 21 	lds	r30, 0x2117	; 0x802117 <ptr_put>
     382:	f0 91 18 21 	lds	r31, 0x2118	; 0x802118 <ptr_put+0x1>
     386:	19 95       	eicall
     388:	99 23       	and	r25, r25
     38a:	1c f0       	brlt	.+6      	; 0x392 <_write+0x1e>
		return -1;
	}
	return 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     396:	08 95       	ret

00000398 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	08 b6       	in	r0, 0x38	; 56
     3a4:	0f 92       	push	r0
     3a6:	18 be       	out	0x38, r1	; 56
     3a8:	09 b6       	in	r0, 0x39	; 57
     3aa:	0f 92       	push	r0
     3ac:	19 be       	out	0x39, r1	; 57
     3ae:	0b b6       	in	r0, 0x3b	; 59
     3b0:	0f 92       	push	r0
     3b2:	1b be       	out	0x3b, r1	; 59
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
     3c6:	bf 93       	push	r27
     3c8:	ef 93       	push	r30
     3ca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     3cc:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     3d0:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     3d4:	e0 91 1b 21 	lds	r30, 0x211B	; 0x80211b <adca_callback>
     3d8:	f0 91 1c 21 	lds	r31, 0x211C	; 0x80211c <adca_callback+0x1>
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	19 95       	eicall
}
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0b be       	out	0x3b, r0	; 59
     400:	0f 90       	pop	r0
     402:	09 be       	out	0x39, r0	; 57
     404:	0f 90       	pop	r0
     406:	08 be       	out	0x38, r0	; 56
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	08 b6       	in	r0, 0x38	; 56
     41e:	0f 92       	push	r0
     420:	18 be       	out	0x38, r1	; 56
     422:	09 b6       	in	r0, 0x39	; 57
     424:	0f 92       	push	r0
     426:	19 be       	out	0x39, r1	; 57
     428:	0b b6       	in	r0, 0x3b	; 59
     42a:	0f 92       	push	r0
     42c:	1b be       	out	0x3b, r1	; 59
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     446:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     44a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     44e:	e0 91 1b 21 	lds	r30, 0x211B	; 0x80211b <adca_callback>
     452:	f0 91 1c 21 	lds	r31, 0x211C	; 0x80211c <adca_callback+0x1>
     456:	62 e0       	ldi	r22, 0x02	; 2
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	19 95       	eicall
}
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	7f 91       	pop	r23
     46c:	6f 91       	pop	r22
     46e:	5f 91       	pop	r21
     470:	4f 91       	pop	r20
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0b be       	out	0x3b, r0	; 59
     47a:	0f 90       	pop	r0
     47c:	09 be       	out	0x39, r0	; 57
     47e:	0f 90       	pop	r0
     480:	08 be       	out	0x38, r0	; 56
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	08 b6       	in	r0, 0x38	; 56
     498:	0f 92       	push	r0
     49a:	18 be       	out	0x38, r1	; 56
     49c:	09 b6       	in	r0, 0x39	; 57
     49e:	0f 92       	push	r0
     4a0:	19 be       	out	0x39, r1	; 57
     4a2:	0b b6       	in	r0, 0x3b	; 59
     4a4:	0f 92       	push	r0
     4a6:	1b be       	out	0x3b, r1	; 59
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	5f 93       	push	r21
     4b0:	6f 93       	push	r22
     4b2:	7f 93       	push	r23
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
     4bc:	ef 93       	push	r30
     4be:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     4c0:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     4c4:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     4c8:	e0 91 1b 21 	lds	r30, 0x211B	; 0x80211b <adca_callback>
     4cc:	f0 91 1c 21 	lds	r31, 0x211C	; 0x80211c <adca_callback+0x1>
     4d0:	64 e0       	ldi	r22, 0x04	; 4
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	19 95       	eicall
}
     4d8:	ff 91       	pop	r31
     4da:	ef 91       	pop	r30
     4dc:	bf 91       	pop	r27
     4de:	af 91       	pop	r26
     4e0:	9f 91       	pop	r25
     4e2:	8f 91       	pop	r24
     4e4:	7f 91       	pop	r23
     4e6:	6f 91       	pop	r22
     4e8:	5f 91       	pop	r21
     4ea:	4f 91       	pop	r20
     4ec:	3f 91       	pop	r19
     4ee:	2f 91       	pop	r18
     4f0:	0f 90       	pop	r0
     4f2:	0b be       	out	0x3b, r0	; 59
     4f4:	0f 90       	pop	r0
     4f6:	09 be       	out	0x39, r0	; 57
     4f8:	0f 90       	pop	r0
     4fa:	08 be       	out	0x38, r0	; 56
     4fc:	0f 90       	pop	r0
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	0f 90       	pop	r0
     502:	1f 90       	pop	r1
     504:	18 95       	reti

00000506 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     506:	1f 92       	push	r1
     508:	0f 92       	push	r0
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	0f 92       	push	r0
     50e:	11 24       	eor	r1, r1
     510:	08 b6       	in	r0, 0x38	; 56
     512:	0f 92       	push	r0
     514:	18 be       	out	0x38, r1	; 56
     516:	09 b6       	in	r0, 0x39	; 57
     518:	0f 92       	push	r0
     51a:	19 be       	out	0x39, r1	; 57
     51c:	0b b6       	in	r0, 0x3b	; 59
     51e:	0f 92       	push	r0
     520:	1b be       	out	0x3b, r1	; 59
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     53a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     53e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     542:	e0 91 1b 21 	lds	r30, 0x211B	; 0x80211b <adca_callback>
     546:	f0 91 1c 21 	lds	r31, 0x211C	; 0x80211c <adca_callback+0x1>
     54a:	68 e0       	ldi	r22, 0x08	; 8
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	19 95       	eicall
}
     552:	ff 91       	pop	r31
     554:	ef 91       	pop	r30
     556:	bf 91       	pop	r27
     558:	af 91       	pop	r26
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	7f 91       	pop	r23
     560:	6f 91       	pop	r22
     562:	5f 91       	pop	r21
     564:	4f 91       	pop	r20
     566:	3f 91       	pop	r19
     568:	2f 91       	pop	r18
     56a:	0f 90       	pop	r0
     56c:	0b be       	out	0x3b, r0	; 59
     56e:	0f 90       	pop	r0
     570:	09 be       	out	0x39, r0	; 57
     572:	0f 90       	pop	r0
     574:	08 be       	out	0x38, r0	; 56
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     580:	fc 01       	movw	r30, r24
     582:	91 81       	ldd	r25, Z+1	; 0x01
     584:	95 ff       	sbrs	r25, 5
     586:	fd cf       	rjmp	.-6      	; 0x582 <usart_putchar+0x2>
     588:	60 83       	st	Z, r22
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	08 95       	ret

00000590 <usart_getchar>:
     590:	fc 01       	movw	r30, r24
     592:	91 81       	ldd	r25, Z+1	; 0x01
     594:	99 23       	and	r25, r25
     596:	ec f7       	brge	.-6      	; 0x592 <usart_getchar+0x2>
     598:	80 81       	ld	r24, Z
     59a:	08 95       	ret

0000059c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	8f 92       	push	r8
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	7c 01       	movw	r14, r24
     5b8:	4a 01       	movw	r8, r20
     5ba:	5b 01       	movw	r10, r22
     5bc:	28 01       	movw	r4, r16
     5be:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5c0:	fc 01       	movw	r30, r24
     5c2:	84 81       	ldd	r24, Z+4	; 0x04
     5c4:	82 ff       	sbrs	r24, 2
     5c6:	16 c0       	rjmp	.+44     	; 0x5f4 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     5c8:	d9 01       	movw	r26, r18
     5ca:	c8 01       	movw	r24, r16
     5cc:	68 94       	set
     5ce:	12 f8       	bld	r1, 2
     5d0:	b6 95       	lsr	r27
     5d2:	a7 95       	ror	r26
     5d4:	97 95       	ror	r25
     5d6:	87 95       	ror	r24
     5d8:	16 94       	lsr	r1
     5da:	d1 f7       	brne	.-12     	; 0x5d0 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     5dc:	b9 01       	movw	r22, r18
     5de:	a8 01       	movw	r20, r16
     5e0:	03 2e       	mov	r0, r19
     5e2:	36 e1       	ldi	r19, 0x16	; 22
     5e4:	76 95       	lsr	r23
     5e6:	67 95       	ror	r22
     5e8:	57 95       	ror	r21
     5ea:	47 95       	ror	r20
     5ec:	3a 95       	dec	r19
     5ee:	d1 f7       	brne	.-12     	; 0x5e4 <usart_set_baudrate+0x48>
     5f0:	30 2d       	mov	r19, r0
     5f2:	15 c0       	rjmp	.+42     	; 0x61e <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     5f4:	d9 01       	movw	r26, r18
     5f6:	c8 01       	movw	r24, r16
     5f8:	68 94       	set
     5fa:	13 f8       	bld	r1, 3
     5fc:	b6 95       	lsr	r27
     5fe:	a7 95       	ror	r26
     600:	97 95       	ror	r25
     602:	87 95       	ror	r24
     604:	16 94       	lsr	r1
     606:	d1 f7       	brne	.-12     	; 0x5fc <usart_set_baudrate+0x60>
		min_rate /= 2;
     608:	b9 01       	movw	r22, r18
     60a:	a8 01       	movw	r20, r16
     60c:	03 2e       	mov	r0, r19
     60e:	37 e1       	ldi	r19, 0x17	; 23
     610:	76 95       	lsr	r23
     612:	67 95       	ror	r22
     614:	57 95       	ror	r21
     616:	47 95       	ror	r20
     618:	3a 95       	dec	r19
     61a:	d1 f7       	brne	.-12     	; 0x610 <usart_set_baudrate+0x74>
     61c:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     61e:	88 15       	cp	r24, r8
     620:	99 05       	cpc	r25, r9
     622:	aa 05       	cpc	r26, r10
     624:	bb 05       	cpc	r27, r11
     626:	08 f4       	brcc	.+2      	; 0x62a <usart_set_baudrate+0x8e>
     628:	a6 c0       	rjmp	.+332    	; 0x776 <usart_set_baudrate+0x1da>
     62a:	84 16       	cp	r8, r20
     62c:	95 06       	cpc	r9, r21
     62e:	a6 06       	cpc	r10, r22
     630:	b7 06       	cpc	r11, r23
     632:	08 f4       	brcc	.+2      	; 0x636 <usart_set_baudrate+0x9a>
     634:	a2 c0       	rjmp	.+324    	; 0x77a <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     636:	f7 01       	movw	r30, r14
     638:	84 81       	ldd	r24, Z+4	; 0x04
     63a:	82 fd       	sbrc	r24, 2
     63c:	04 c0       	rjmp	.+8      	; 0x646 <usart_set_baudrate+0xaa>
		baud *= 2;
     63e:	88 0c       	add	r8, r8
     640:	99 1c       	adc	r9, r9
     642:	aa 1c       	adc	r10, r10
     644:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     646:	c3 01       	movw	r24, r6
     648:	b2 01       	movw	r22, r4
     64a:	a5 01       	movw	r20, r10
     64c:	94 01       	movw	r18, r8
     64e:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     652:	2f 3f       	cpi	r18, 0xFF	; 255
     654:	31 05       	cpc	r19, r1
     656:	41 05       	cpc	r20, r1
     658:	51 05       	cpc	r21, r1
     65a:	08 f4       	brcc	.+2      	; 0x65e <usart_set_baudrate+0xc2>
     65c:	90 c0       	rjmp	.+288    	; 0x77e <usart_set_baudrate+0x1e2>
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	a0 e0       	ldi	r26, 0x00	; 0
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	c9 ef       	ldi	r28, 0xF9	; 249
     668:	05 c0       	rjmp	.+10     	; 0x674 <usart_set_baudrate+0xd8>
     66a:	28 17       	cp	r18, r24
     66c:	39 07       	cpc	r19, r25
     66e:	4a 07       	cpc	r20, r26
     670:	5b 07       	cpc	r21, r27
     672:	58 f0       	brcs	.+22     	; 0x68a <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	aa 1f       	adc	r26, r26
     67a:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     67c:	cd 3f       	cpi	r28, 0xFD	; 253
     67e:	0c f4       	brge	.+2      	; 0x682 <usart_set_baudrate+0xe6>
			limit |= 1;
     680:	81 60       	ori	r24, 0x01	; 1
     682:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     684:	c7 30       	cpi	r28, 0x07	; 7
     686:	89 f7       	brne	.-30     	; 0x66a <usart_set_baudrate+0xce>
     688:	4f c0       	rjmp	.+158    	; 0x728 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     68a:	cc 23       	and	r28, r28
     68c:	0c f0       	brlt	.+2      	; 0x690 <usart_set_baudrate+0xf4>
     68e:	4c c0       	rjmp	.+152    	; 0x728 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     690:	d5 01       	movw	r26, r10
     692:	c4 01       	movw	r24, r8
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	aa 1f       	adc	r26, r26
     69a:	bb 1f       	adc	r27, r27
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	aa 1f       	adc	r26, r26
     6aa:	bb 1f       	adc	r27, r27
     6ac:	48 1a       	sub	r4, r24
     6ae:	59 0a       	sbc	r5, r25
     6b0:	6a 0a       	sbc	r6, r26
     6b2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     6b4:	ce 3f       	cpi	r28, 0xFE	; 254
     6b6:	f4 f4       	brge	.+60     	; 0x6f4 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     6b8:	8d ef       	ldi	r24, 0xFD	; 253
     6ba:	9f ef       	ldi	r25, 0xFF	; 255
     6bc:	8c 1b       	sub	r24, r28
     6be:	91 09       	sbc	r25, r1
     6c0:	c7 fd       	sbrc	r28, 7
     6c2:	93 95       	inc	r25
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <usart_set_baudrate+0x132>
     6c6:	44 0c       	add	r4, r4
     6c8:	55 1c       	adc	r5, r5
     6ca:	66 1c       	adc	r6, r6
     6cc:	77 1c       	adc	r7, r7
     6ce:	8a 95       	dec	r24
     6d0:	d2 f7       	brpl	.-12     	; 0x6c6 <usart_set_baudrate+0x12a>
     6d2:	d5 01       	movw	r26, r10
     6d4:	c4 01       	movw	r24, r8
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	bc 01       	movw	r22, r24
     6e0:	cd 01       	movw	r24, r26
     6e2:	64 0d       	add	r22, r4
     6e4:	75 1d       	adc	r23, r5
     6e6:	86 1d       	adc	r24, r6
     6e8:	97 1d       	adc	r25, r7
     6ea:	a5 01       	movw	r20, r10
     6ec:	94 01       	movw	r18, r8
     6ee:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
     6f2:	37 c0       	rjmp	.+110    	; 0x762 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	8c 0f       	add	r24, r28
     6f8:	a5 01       	movw	r20, r10
     6fa:	94 01       	movw	r18, r8
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <usart_set_baudrate+0x16a>
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	44 1f       	adc	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	8a 95       	dec	r24
     708:	d2 f7       	brpl	.-12     	; 0x6fe <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     70a:	da 01       	movw	r26, r20
     70c:	c9 01       	movw	r24, r18
     70e:	b6 95       	lsr	r27
     710:	a7 95       	ror	r26
     712:	97 95       	ror	r25
     714:	87 95       	ror	r24
     716:	bc 01       	movw	r22, r24
     718:	cd 01       	movw	r24, r26
     71a:	64 0d       	add	r22, r4
     71c:	75 1d       	adc	r23, r5
     71e:	86 1d       	adc	r24, r6
     720:	97 1d       	adc	r25, r7
     722:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
     726:	1d c0       	rjmp	.+58     	; 0x762 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	8c 0f       	add	r24, r28
     72c:	a5 01       	movw	r20, r10
     72e:	94 01       	movw	r18, r8
     730:	04 c0       	rjmp	.+8      	; 0x73a <usart_set_baudrate+0x19e>
     732:	22 0f       	add	r18, r18
     734:	33 1f       	adc	r19, r19
     736:	44 1f       	adc	r20, r20
     738:	55 1f       	adc	r21, r21
     73a:	8a 95       	dec	r24
     73c:	d2 f7       	brpl	.-12     	; 0x732 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     73e:	da 01       	movw	r26, r20
     740:	c9 01       	movw	r24, r18
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	bc 01       	movw	r22, r24
     74c:	cd 01       	movw	r24, r26
     74e:	64 0d       	add	r22, r4
     750:	75 1d       	adc	r23, r5
     752:	86 1d       	adc	r24, r6
     754:	97 1d       	adc	r25, r7
     756:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
     75a:	21 50       	subi	r18, 0x01	; 1
     75c:	31 09       	sbc	r19, r1
     75e:	41 09       	sbc	r20, r1
     760:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     762:	83 2f       	mov	r24, r19
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	c2 95       	swap	r28
     768:	c0 7f       	andi	r28, 0xF0	; 240
     76a:	c8 2b       	or	r28, r24
     76c:	f7 01       	movw	r30, r14
     76e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     770:	26 83       	std	Z+6, r18	; 0x06

	return true;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	18 c0       	rjmp	.+48     	; 0x7a6 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	16 c0       	rjmp	.+44     	; 0x7a6 <usart_set_baudrate+0x20a>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	14 c0       	rjmp	.+40     	; 0x7a6 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     77e:	d5 01       	movw	r26, r10
     780:	c4 01       	movw	r24, r8
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	aa 1f       	adc	r26, r26
     788:	bb 1f       	adc	r27, r27
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	aa 1f       	adc	r26, r26
     790:	bb 1f       	adc	r27, r27
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	aa 1f       	adc	r26, r26
     798:	bb 1f       	adc	r27, r27
     79a:	48 1a       	sub	r4, r24
     79c:	59 0a       	sbc	r5, r25
     79e:	6a 0a       	sbc	r6, r26
     7a0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7a2:	c9 ef       	ldi	r28, 0xF9	; 249
     7a4:	89 cf       	rjmp	.-238    	; 0x6b8 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	7f 90       	pop	r7
     7ba:	6f 90       	pop	r6
     7bc:	5f 90       	pop	r5
     7be:	4f 90       	pop	r4
     7c0:	08 95       	ret

000007c2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ec 01       	movw	r28, r24
     7cc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <usart_init_rs232+0x12>
     7d2:	be c0       	rjmp	.+380    	; 0x950 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     7d4:	80 3c       	cpi	r24, 0xC0	; 192
     7d6:	91 05       	cpc	r25, r1
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     7da:	60 e1       	ldi	r22, 0x10	; 16
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	b9 d3       	rcall	.+1906   	; 0xf52 <sysclk_enable_module>
     7e0:	b7 c0       	rjmp	.+366    	; 0x950 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     7e2:	c1 15       	cp	r28, r1
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	d8 07       	cpc	r29, r24
     7e8:	21 f4       	brne	.+8      	; 0x7f2 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     7ea:	64 e0       	ldi	r22, 0x04	; 4
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	b1 d3       	rcall	.+1890   	; 0xf52 <sysclk_enable_module>
     7f0:	af c0       	rjmp	.+350    	; 0x950 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     7f2:	c0 38       	cpi	r28, 0x80	; 128
     7f4:	e1 e0       	ldi	r30, 0x01	; 1
     7f6:	de 07       	cpc	r29, r30
     7f8:	21 f4       	brne	.+8      	; 0x802 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	a9 d3       	rcall	.+1874   	; 0xf52 <sysclk_enable_module>
     800:	a7 c0       	rjmp	.+334    	; 0x950 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     802:	c1 15       	cp	r28, r1
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     808:	21 f4       	brne	.+8      	; 0x812 <usart_init_rs232+0x50>
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	a1 d3       	rcall	.+1858   	; 0xf52 <sysclk_enable_module>
     810:	9f c0       	rjmp	.+318    	; 0x950 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     812:	c0 38       	cpi	r28, 0x80	; 128
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     818:	21 f4       	brne	.+8      	; 0x822 <usart_init_rs232+0x60>
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	99 d3       	rcall	.+1842   	; 0xf52 <sysclk_enable_module>
     820:	97 c0       	rjmp	.+302    	; 0x950 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     822:	c1 15       	cp	r28, r1
     824:	e2 e0       	ldi	r30, 0x02	; 2
     826:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     828:	21 f4       	brne	.+8      	; 0x832 <usart_init_rs232+0x70>
     82a:	62 e0       	ldi	r22, 0x02	; 2
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	91 d3       	rcall	.+1826   	; 0xf52 <sysclk_enable_module>
     830:	8f c0       	rjmp	.+286    	; 0x950 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     832:	c0 32       	cpi	r28, 0x20	; 32
     834:	f3 e0       	ldi	r31, 0x03	; 3
     836:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     838:	21 f4       	brne	.+8      	; 0x842 <usart_init_rs232+0x80>
     83a:	64 e0       	ldi	r22, 0x04	; 4
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	89 d3       	rcall	.+1810   	; 0xf52 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     840:	87 c0       	rjmp	.+270    	; 0x950 <usart_init_rs232+0x18e>
     842:	c1 15       	cp	r28, r1
     844:	88 e0       	ldi	r24, 0x08	; 8
     846:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     848:	21 f4       	brne	.+8      	; 0x852 <usart_init_rs232+0x90>
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	81 d3       	rcall	.+1794   	; 0xf52 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     850:	7f c0       	rjmp	.+254    	; 0x950 <usart_init_rs232+0x18e>
     852:	c1 15       	cp	r28, r1
     854:	e9 e0       	ldi	r30, 0x09	; 9
     856:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     858:	21 f4       	brne	.+8      	; 0x862 <usart_init_rs232+0xa0>
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	84 e0       	ldi	r24, 0x04	; 4
     85e:	79 d3       	rcall	.+1778   	; 0xf52 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     860:	77 c0       	rjmp	.+238    	; 0x950 <usart_init_rs232+0x18e>
     862:	c1 15       	cp	r28, r1
     864:	fa e0       	ldi	r31, 0x0A	; 10
     866:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     868:	21 f4       	brne	.+8      	; 0x872 <usart_init_rs232+0xb0>
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	71 d3       	rcall	.+1762   	; 0xf52 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     870:	6f c0       	rjmp	.+222    	; 0x950 <usart_init_rs232+0x18e>
     872:	c0 34       	cpi	r28, 0x40	; 64
     874:	88 e0       	ldi	r24, 0x08	; 8
     876:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     878:	21 f4       	brne	.+8      	; 0x882 <usart_init_rs232+0xc0>
     87a:	62 e0       	ldi	r22, 0x02	; 2
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	69 d3       	rcall	.+1746   	; 0xf52 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     880:	67 c0       	rjmp	.+206    	; 0x950 <usart_init_rs232+0x18e>
     882:	c0 34       	cpi	r28, 0x40	; 64
     884:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     886:	de 07       	cpc	r29, r30
     888:	21 f4       	brne	.+8      	; 0x892 <usart_init_rs232+0xd0>
     88a:	62 e0       	ldi	r22, 0x02	; 2
     88c:	84 e0       	ldi	r24, 0x04	; 4
     88e:	61 d3       	rcall	.+1730   	; 0xf52 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     890:	5f c0       	rjmp	.+190    	; 0x950 <usart_init_rs232+0x18e>
     892:	c0 39       	cpi	r28, 0x90	; 144
     894:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     896:	df 07       	cpc	r29, r31
     898:	21 f4       	brne	.+8      	; 0x8a2 <usart_init_rs232+0xe0>
     89a:	64 e0       	ldi	r22, 0x04	; 4
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	59 d3       	rcall	.+1714   	; 0xf52 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     8a0:	57 c0       	rjmp	.+174    	; 0x950 <usart_init_rs232+0x18e>
     8a2:	c0 39       	cpi	r28, 0x90	; 144
     8a4:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     8a6:	d8 07       	cpc	r29, r24
     8a8:	21 f4       	brne	.+8      	; 0x8b2 <usart_init_rs232+0xf0>
     8aa:	64 e0       	ldi	r22, 0x04	; 4
     8ac:	84 e0       	ldi	r24, 0x04	; 4
     8ae:	51 d3       	rcall	.+1698   	; 0xf52 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     8b0:	4f c0       	rjmp	.+158    	; 0x950 <usart_init_rs232+0x18e>
     8b2:	c0 39       	cpi	r28, 0x90	; 144
     8b4:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     8b6:	de 07       	cpc	r29, r30
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <usart_init_rs232+0x100>
     8ba:	64 e0       	ldi	r22, 0x04	; 4
     8bc:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     8be:	49 d3       	rcall	.+1682   	; 0xf52 <sysclk_enable_module>
     8c0:	47 c0       	rjmp	.+142    	; 0x950 <usart_init_rs232+0x18e>
     8c2:	c0 3c       	cpi	r28, 0xC0	; 192
     8c4:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     8c6:	df 07       	cpc	r29, r31
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <usart_init_rs232+0x110>
     8ca:	68 e0       	ldi	r22, 0x08	; 8
     8cc:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     8ce:	41 d3       	rcall	.+1666   	; 0xf52 <sysclk_enable_module>
     8d0:	3f c0       	rjmp	.+126    	; 0x950 <usart_init_rs232+0x18e>
     8d2:	c0 3c       	cpi	r28, 0xC0	; 192
     8d4:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     8d6:	d8 07       	cpc	r29, r24
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <usart_init_rs232+0x120>
     8da:	68 e0       	ldi	r22, 0x08	; 8
     8dc:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     8de:	39 d3       	rcall	.+1650   	; 0xf52 <sysclk_enable_module>
     8e0:	37 c0       	rjmp	.+110    	; 0x950 <usart_init_rs232+0x18e>
     8e2:	c0 3a       	cpi	r28, 0xA0	; 160
     8e4:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     8e6:	de 07       	cpc	r29, r30
     8e8:	21 f4       	brne	.+8      	; 0x8f2 <usart_init_rs232+0x130>
     8ea:	60 e1       	ldi	r22, 0x10	; 16
     8ec:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     8ee:	31 d3       	rcall	.+1634   	; 0xf52 <sysclk_enable_module>
     8f0:	2f c0       	rjmp	.+94     	; 0x950 <usart_init_rs232+0x18e>
     8f2:	c0 3a       	cpi	r28, 0xA0	; 160
     8f4:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     8f6:	df 07       	cpc	r29, r31
     8f8:	21 f4       	brne	.+8      	; 0x902 <usart_init_rs232+0x140>
     8fa:	60 e1       	ldi	r22, 0x10	; 16
     8fc:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     8fe:	29 d3       	rcall	.+1618   	; 0xf52 <sysclk_enable_module>
     900:	27 c0       	rjmp	.+78     	; 0x950 <usart_init_rs232+0x18e>
     902:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     904:	8a e0       	ldi	r24, 0x0A	; 10
     906:	d8 07       	cpc	r29, r24
     908:	21 f4       	brne	.+8      	; 0x912 <usart_init_rs232+0x150>
     90a:	60 e1       	ldi	r22, 0x10	; 16
     90c:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     90e:	21 d3       	rcall	.+1602   	; 0xf52 <sysclk_enable_module>
     910:	1f c0       	rjmp	.+62     	; 0x950 <usart_init_rs232+0x18e>
     912:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     914:	e8 e0       	ldi	r30, 0x08	; 8
     916:	de 07       	cpc	r29, r30
     918:	21 f4       	brne	.+8      	; 0x922 <usart_init_rs232+0x160>
     91a:	60 e2       	ldi	r22, 0x20	; 32
     91c:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     91e:	19 d3       	rcall	.+1586   	; 0xf52 <sysclk_enable_module>
     920:	17 c0       	rjmp	.+46     	; 0x950 <usart_init_rs232+0x18e>
     922:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     924:	f9 e0       	ldi	r31, 0x09	; 9
     926:	df 07       	cpc	r29, r31
     928:	21 f4       	brne	.+8      	; 0x932 <usart_init_rs232+0x170>
     92a:	60 e2       	ldi	r22, 0x20	; 32
     92c:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     92e:	11 d3       	rcall	.+1570   	; 0xf52 <sysclk_enable_module>
     930:	0f c0       	rjmp	.+30     	; 0x950 <usart_init_rs232+0x18e>
     932:	c0 38       	cpi	r28, 0x80	; 128
     934:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     936:	d8 07       	cpc	r29, r24
     938:	21 f4       	brne	.+8      	; 0x942 <usart_init_rs232+0x180>
     93a:	60 e4       	ldi	r22, 0x40	; 64
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	09 d3       	rcall	.+1554   	; 0xf52 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     940:	07 c0       	rjmp	.+14     	; 0x950 <usart_init_rs232+0x18e>
     942:	c0 3a       	cpi	r28, 0xA0	; 160
     944:	e4 e0       	ldi	r30, 0x04	; 4
     946:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     948:	19 f4       	brne	.+6      	; 0x950 <usart_init_rs232+0x18e>
     94a:	60 e4       	ldi	r22, 0x40	; 64
     94c:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     94e:	01 d3       	rcall	.+1538   	; 0xf52 <sysclk_enable_module>
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     954:	8d 83       	std	Y+5, r24	; 0x05
     956:	f8 01       	movw	r30, r16
     958:	95 81       	ldd	r25, Z+5	; 0x05
     95a:	84 81       	ldd	r24, Z+4	; 0x04
     95c:	89 2b       	or	r24, r25
     95e:	96 81       	ldd	r25, Z+6	; 0x06
     960:	91 11       	cpse	r25, r1
     962:	98 e0       	ldi	r25, 0x08	; 8
     964:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     966:	8d 83       	std	Y+5, r24	; 0x05
     968:	f8 01       	movw	r30, r16
     96a:	40 81       	ld	r20, Z
     96c:	51 81       	ldd	r21, Z+1	; 0x01
     96e:	62 81       	ldd	r22, Z+2	; 0x02
     970:	73 81       	ldd	r23, Z+3	; 0x03
     972:	00 e0       	ldi	r16, 0x00	; 0
     974:	18 e4       	ldi	r17, 0x48	; 72
     976:	28 ee       	ldi	r18, 0xE8	; 232
     978:	31 e0       	ldi	r19, 0x01	; 1
     97a:	ce 01       	movw	r24, r28
     97c:	0f de       	rcall	.-994    	; 0x59c <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	98 60       	ori	r25, 0x08	; 8
     982:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	90 61       	ori	r25, 0x10	; 16
     988:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <bno085_init>:
#include "spi_controller.h"
#include "BNO085.h"

uint8_t SeqNum = 0;

void bno085_init(void){
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	64 97       	sbiw	r28, 0x14	; 20
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	de bf       	out	0x3e, r29	; 62
	BNO085_SS_TERMINAL.OUT |= BNO085_SS_PIN;
     9aa:	e0 e4       	ldi	r30, 0x40	; 64
     9ac:	f6 e0       	ldi	r31, 0x06	; 6
     9ae:	84 81       	ldd	r24, Z+4	; 0x04
     9b0:	88 60       	ori	r24, 0x08	; 8
     9b2:	84 83       	std	Z+4, r24	; 0x04
		
	uint16_t length	= 0x0014;	// 20
	uint8_t data[] = {
     9b4:	84 e1       	ldi	r24, 0x14	; 20
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	1a 82       	std	Y+2, r1	; 0x02
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	8b 83       	std	Y+3, r24	; 0x03
     9be:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <__data_end>
     9c2:	8c 83       	std	Y+4, r24	; 0x04
     9c4:	85 e0       	ldi	r24, 0x05	; 5
     9c6:	8d 83       	std	Y+5, r24	; 0x05
     9c8:	8b e0       	ldi	r24, 0x0B	; 11
     9ca:	8e 83       	std	Y+6, r24	; 0x06
     9cc:	1f 82       	std	Y+7, r1	; 0x07
     9ce:	18 86       	std	Y+8, r1	; 0x08
     9d0:	80 e5       	ldi	r24, 0x50	; 80
     9d2:	89 87       	std	Y+9, r24	; 0x09
     9d4:	83 ec       	ldi	r24, 0xC3	; 195
     9d6:	8a 87       	std	Y+10, r24	; 0x0a
     9d8:	1b 86       	std	Y+11, r1	; 0x0b
     9da:	1c 86       	std	Y+12, r1	; 0x0c
     9dc:	80 ea       	ldi	r24, 0xA0	; 160
     9de:	8d 87       	std	Y+13, r24	; 0x0d
     9e0:	86 e8       	ldi	r24, 0x86	; 134
     9e2:	8e 87       	std	Y+14, r24	; 0x0e
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	8f 87       	std	Y+15, r24	; 0x0f
     9e8:	18 8a       	std	Y+16, r1	; 0x10
     9ea:	19 8a       	std	Y+17, r1	; 0x11
     9ec:	1a 8a       	std	Y+18, r1	; 0x12
     9ee:	1b 8a       	std	Y+19, r1	; 0x13
     9f0:	1c 8a       	std	Y+20, r1	; 0x14
		(ROT_VECT_SENS_SPEC >> 8) & 0xFF,
		(ROT_VECT_SENS_SPEC >> 16) & 0xFF,
		ROT_VECT_SENS_SPEC >> 24,
	};
	
	spi_select(BNO085_SS_PIN);
     9f2:	88 e0       	ldi	r24, 0x08	; 8
     9f4:	0a d1       	rcall	.+532    	; 0xc0a <spi_select>
     9f6:	8e 01       	movw	r16, r28
     9f8:	0f 5f       	subi	r16, 0xFF	; 255
     9fa:	1f 4f       	sbci	r17, 0xFF	; 255
     9fc:	7e 01       	movw	r14, r28
     9fe:	85 e1       	ldi	r24, 0x15	; 21
     a00:	e8 0e       	add	r14, r24
     a02:	f1 1c       	adc	r15, r1
	for(uint8_t i = 0; i < length; i++){
		spi_write(data[i]);
     a04:	f8 01       	movw	r30, r16
     a06:	81 91       	ld	r24, Z+
     a08:	8f 01       	movw	r16, r30
     a0a:	10 d1       	rcall	.+544    	; 0xc2c <spi_write>
		(ROT_VECT_SENS_SPEC >> 16) & 0xFF,
		ROT_VECT_SENS_SPEC >> 24,
	};
	
	spi_select(BNO085_SS_PIN);
	for(uint8_t i = 0; i < length; i++){
     a0c:	0e 15       	cp	r16, r14
     a0e:	1f 05       	cpc	r17, r15
		spi_write(data[i]);
	}
	spi_select(BNO085_SS_PIN);
     a10:	c9 f7       	brne	.-14     	; 0xa04 <bno085_init+0x70>
     a12:	88 e0       	ldi	r24, 0x08	; 8
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     a14:	fa d0       	rcall	.+500    	; 0xc0a <spi_select>
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	9b d2       	rcall	.+1334   	; 0xf52 <sysclk_enable_module>
	
	
	sysclk_enable_peripheral_clock(&TCC0); // starts peripheral clock

	TCC0.CTRLA = 0x05; // divisor set to 64
     a1c:	e0 e0       	ldi	r30, 0x00	; 0
     a1e:	f8 e0       	ldi	r31, 0x08	; 8
     a20:	85 e0       	ldi	r24, 0x05	; 5
     a22:	80 83       	st	Z, r24
	TCC0.PER = 25000; // 20 Hz
     a24:	88 ea       	ldi	r24, 0xA8	; 168
     a26:	91 e6       	ldi	r25, 0x61	; 97
     a28:	86 a3       	std	Z+38, r24	; 0x26
     a2a:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	86 83       	std	Z+6, r24	; 0x06
}
     a30:	64 96       	adiw	r28, 0x14	; 20
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	08 95       	ret

00000a44 <bno085_read>:

void bno085_read(uint8_t* data){
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	8c 01       	movw	r16, r24
	spi_select(BNO085_SS_PIN);
     a4e:	88 e0       	ldi	r24, 0x08	; 8
     a50:	dc d0       	rcall	.+440    	; 0xc0a <spi_select>
     a52:	e8 01       	movw	r28, r16
     a54:	0e 5e       	subi	r16, 0xEE	; 238
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t i = 0; i < 18; i++){
		data[i] = spi_read();
     a58:	de d0       	rcall	.+444    	; 0xc16 <spi_read>
     a5a:	89 93       	st	Y+, r24
     a5c:	c0 17       	cp	r28, r16
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void bno085_read(uint8_t* data){
	spi_select(BNO085_SS_PIN);
	for(uint8_t i = 0; i < 18; i++){
     a5e:	d1 07       	cpc	r29, r17
     a60:	d9 f7       	brne	.-10     	; 0xa58 <bno085_read+0x14>
		data[i] = spi_read();
	}
	spi_select(BNO085_SS_PIN);
     a62:	88 e0       	ldi	r24, 0x08	; 8
     a64:	d2 d0       	rcall	.+420    	; 0xc0a <spi_select>
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     a70:	08 95       	ret

00000a72 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= 0x08; // Sets A3 to output
     a72:	e0 e0       	ldi	r30, 0x00	; 0
     a74:	f6 e0       	ldi	r31, 0x06	; 6
     a76:	80 81       	ld	r24, Z
     a78:	88 60       	ori	r24, 0x08	; 8
     a7a:	80 83       	st	Z, r24
     a7c:	08 95       	ret

00000a7e <cam_switch>:
}

void cam_switch(void){
	PORTA.OUT ^= 0x08; // Changes A3 from high to low or vice-versa
     a7e:	e0 e0       	ldi	r30, 0x00	; 0
     a80:	f6 e0       	ldi	r31, 0x06	; 6
     a82:	94 81       	ldd	r25, Z+4	; 0x04
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	89 27       	eor	r24, r25
     a88:	84 83       	std	Z+4, r24	; 0x04
     a8a:	08 95       	ret

00000a8c <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	27 97       	sbiw	r28, 0x07	; 7
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     a9a:	60 e2       	ldi	r22, 0x20	; 32
     a9c:	84 e0       	ldi	r24, 0x04	; 4
     a9e:	59 d2       	rcall	.+1202   	; 0xf52 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     aa0:	e0 e6       	ldi	r30, 0x60	; 96
     aa2:	f6 e0       	ldi	r31, 0x06	; 6
     aa4:	80 81       	ld	r24, Z
     aa6:	80 68       	ori	r24, 0x80	; 128
     aa8:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     aaa:	e6 e0       	ldi	r30, 0x06	; 6
     aac:	f0 e2       	ldi	r31, 0x20	; 32
     aae:	84 81       	ldd	r24, Z+4	; 0x04
     ab0:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     ab2:	85 81       	ldd	r24, Z+5	; 0x05
     ab4:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     ab6:	86 81       	ldd	r24, Z+6	; 0x06
     ab8:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     aba:	80 81       	ld	r24, Z
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	a2 81       	ldd	r26, Z+2	; 0x02
     ac0:	b3 81       	ldd	r27, Z+3	; 0x03
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	9a 83       	std	Y+2, r25	; 0x02
     ac6:	ab 83       	std	Y+3, r26	; 0x03
     ac8:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     aca:	60 e2       	ldi	r22, 0x20	; 32
     acc:	84 e0       	ldi	r24, 0x04	; 4
     ace:	41 d2       	rcall	.+1154   	; 0xf52 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     ad0:	be 01       	movw	r22, r28
     ad2:	6f 5f       	subi	r22, 0xFF	; 255
     ad4:	7f 4f       	sbci	r23, 0xFF	; 255
     ad6:	80 eb       	ldi	r24, 0xB0	; 176
     ad8:	99 e0       	ldi	r25, 0x09	; 9
     ada:	73 de       	rcall	.-794    	; 0x7c2 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     adc:	27 96       	adiw	r28, 0x07	; 7
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     aea:	61 50       	subi	r22, 0x01	; 1
     aec:	71 09       	sbc	r23, r1
     aee:	81 09       	sbc	r24, r1
     af0:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     af2:	61 15       	cp	r22, r1
     af4:	71 05       	cpc	r23, r1
     af6:	81 05       	cpc	r24, r1
     af8:	91 05       	cpc	r25, r1
     afa:	b9 f7       	brne	.-18     	; 0xaea <__portable_avr_delay_cycles+0x2>
     afc:	08 95       	ret

00000afe <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     afe:	e0 e4       	ldi	r30, 0x40	; 64
     b00:	f6 e0       	ldi	r31, 0x06	; 6
     b02:	94 81       	ldd	r25, Z+4	; 0x04
     b04:	80 e1       	ldi	r24, 0x10	; 16
     b06:	89 27       	eor	r24, r25
     b08:	84 83       	std	Z+4, r24	; 0x04
     b0a:	08 95       	ret

00000b0c <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     b0c:	e0 e4       	ldi	r30, 0x40	; 64
     b0e:	f6 e0       	ldi	r31, 0x06	; 6
     b10:	84 81       	ldd	r24, Z+4	; 0x04
     b12:	80 61       	ori	r24, 0x10	; 16
     b14:	84 83       	std	Z+4, r24	; 0x04
	delay_ms(5);
     b16:	6b e2       	ldi	r22, 0x2B	; 43
     b18:	78 e6       	ldi	r23, 0x68	; 104
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	e4 df       	rcall	.-56     	; 0xae8 <__portable_avr_delay_cycles>
	
	// Resets the ms5607
	flip_ms5607();
     b20:	ee df       	rcall	.-36     	; 0xafe <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     b22:	8e e1       	ldi	r24, 0x1E	; 30
     b24:	83 d0       	rcall	.+262    	; 0xc2c <spi_write>
     b26:	60 e8       	ldi	r22, 0x80	; 128
	delay_ms(3);
     b28:	7e e3       	ldi	r23, 0x3E	; 62
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	dc df       	rcall	.-72     	; 0xae8 <__portable_avr_delay_cycles>
	flip_ms5607();
     b30:	e6 df       	rcall	.-52     	; 0xafe <flip_ms5607>
	delay_ms(2);
     b32:	6b ea       	ldi	r22, 0xAB	; 171
     b34:	79 e2       	ldi	r23, 0x29	; 41
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	d6 cf       	rjmp	.-84     	; 0xae8 <__portable_avr_delay_cycles>
     b3c:	08 95       	ret

00000b3e <ms5607_read>:
     b3e:	cf 93       	push	r28
}

uint16_t ms5607_read(uint16_t comm)
{
     b40:	df 93       	push	r29
     b42:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     b44:	dc df       	rcall	.-72     	; 0xafe <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     b46:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     b48:	71 d0       	rcall	.+226    	; 0xc2c <spi_write>
     b4a:	65 d0       	rcall	.+202    	; 0xc16 <spi_read>
     b4c:	c8 2f       	mov	r28, r24
     b4e:	d0 e0       	ldi	r29, 0x00	; 0
     b50:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     b52:	cc 27       	eor	r28, r28
     b54:	60 d0       	rcall	.+192    	; 0xc16 <spi_read>
     b56:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     b58:	d2 df       	rcall	.-92     	; 0xafe <flip_ms5607>
     b5a:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <ms5607_convert_d1>:
     b62:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     b6a:	c9 df       	rcall	.-110    	; 0xafe <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     b6c:	88 e4       	ldi	r24, 0x48	; 72
     b6e:	5e d0       	rcall	.+188    	; 0xc2c <spi_write>
	delay_ms(10);
     b70:	66 e5       	ldi	r22, 0x56	; 86
     b72:	70 ed       	ldi	r23, 0xD0	; 208
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     b78:	b7 df       	rcall	.-146    	; 0xae8 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     b7a:	c1 df       	rcall	.-126    	; 0xafe <flip_ms5607>
     b7c:	c0 df       	rcall	.-128    	; 0xafe <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	55 d0       	rcall	.+170    	; 0xc2c <spi_write>
     b82:	49 d0       	rcall	.+146    	; 0xc16 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     b84:	c8 2e       	mov	r12, r24
     b86:	d1 2c       	mov	r13, r1
     b88:	e1 2c       	mov	r14, r1
     b8a:	f1 2c       	mov	r15, r1
     b8c:	76 01       	movw	r14, r12
     b8e:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     b90:	cc 24       	eor	r12, r12
     b92:	41 d0       	rcall	.+130    	; 0xc16 <spi_read>
     b94:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     b96:	3f d0       	rcall	.+126    	; 0xc16 <spi_read>
     b98:	c8 2a       	or	r12, r24
     b9a:	b1 df       	rcall	.-158    	; 0xafe <flip_ms5607>
	flip_ms5607();
     b9c:	c7 01       	movw	r24, r14
     b9e:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	08 95       	ret

00000baa <ms5607_convert_d2>:
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     bb2:	a5 df       	rcall	.-182    	; 0xafe <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     bb4:	88 e5       	ldi	r24, 0x58	; 88
     bb6:	3a d0       	rcall	.+116    	; 0xc2c <spi_write>
	delay_ms(10);
     bb8:	66 e5       	ldi	r22, 0x56	; 86
     bba:	70 ed       	ldi	r23, 0xD0	; 208
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     bc0:	93 df       	rcall	.-218    	; 0xae8 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     bc2:	9d df       	rcall	.-198    	; 0xafe <flip_ms5607>
     bc4:	9c df       	rcall	.-200    	; 0xafe <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	31 d0       	rcall	.+98     	; 0xc2c <spi_write>
     bca:	25 d0       	rcall	.+74     	; 0xc16 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     bcc:	c8 2e       	mov	r12, r24
     bce:	d1 2c       	mov	r13, r1
     bd0:	e1 2c       	mov	r14, r1
     bd2:	f1 2c       	mov	r15, r1
     bd4:	76 01       	movw	r14, r12
     bd6:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     bd8:	cc 24       	eor	r12, r12
     bda:	1d d0       	rcall	.+58     	; 0xc16 <spi_read>
     bdc:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     bde:	1b d0       	rcall	.+54     	; 0xc16 <spi_read>
     be0:	c8 2a       	or	r12, r24
     be2:	8d df       	rcall	.-230    	; 0xafe <flip_ms5607>
	flip_ms5607();
     be4:	c7 01       	movw	r24, r14
     be6:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	08 95       	ret

00000bf2 <spi_init>:
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     bf2:	68 e0       	ldi	r22, 0x08	; 8
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	ad d1       	rcall	.+858    	; 0xf52 <sysclk_enable_module>
#include "spi_controller.h"

void spi_init(void)
{
	sysclk_enable_peripheral_clock(&SPIC);
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
     bf8:	8c e5       	ldi	r24, 0x5C	; 92
     bfa:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	PORTC.DIR |= 0b10110000; 
     bfe:	e0 e4       	ldi	r30, 0x40	; 64
     c00:	f6 e0       	ldi	r31, 0x06	; 6
     c02:	80 81       	ld	r24, Z
     c04:	80 6b       	ori	r24, 0xB0	; 176
     c06:	80 83       	st	Z, r24
     c08:	08 95       	ret

00000c0a <spi_select>:
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     c0a:	e0 e4       	ldi	r30, 0x40	; 64
     c0c:	f6 e0       	ldi	r31, 0x06	; 6
     c0e:	94 81       	ldd	r25, Z+4	; 0x04
     c10:	89 27       	eor	r24, r25
     c12:	84 83       	std	Z+4, r24	; 0x04
     c14:	08 95       	ret

00000c16 <spi_read>:
}

uint8_t spi_read(void)
{
	SPIC.DATA = 0xFF; // make the DATA register something we know
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
     c1c:	e0 ec       	ldi	r30, 0xC0	; 192
     c1e:	f8 e0       	ldi	r31, 0x08	; 8
     c20:	82 81       	ldd	r24, Z+2	; 0x02
     c22:	88 23       	and	r24, r24
     c24:	ec f7       	brge	.-6      	; 0xc20 <spi_read+0xa>
	
	return SPIC.DATA; // return the data from this function
     c26:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     c2a:	08 95       	ret

00000c2c <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     c2c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     c30:	e0 ec       	ldi	r30, 0xC0	; 192
     c32:	f8 e0       	ldi	r31, 0x08	; 8
     c34:	82 81       	ldd	r24, Z+2	; 0x02
     c36:	88 23       	and	r24, r24
     c38:	ec f7       	brge	.-6      	; 0xc34 <spi_write+0x8>
     c3a:	08 95       	ret

00000c3c <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     c42:	a6 dc       	rcall	.-1716   	; 0x590 <usart_getchar>
     c44:	88 83       	st	Y, r24
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     c4c:	99 cc       	rjmp	.-1742   	; 0x580 <usart_putchar>
}
     c4e:	08 95       	ret

00000c50 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	27 97       	sbiw	r28, 0x07	; 7
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     c5e:	60 e1       	ldi	r22, 0x10	; 16
     c60:	85 e0       	ldi	r24, 0x05	; 5
     c62:	77 d1       	rcall	.+750    	; 0xf52 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     c64:	e0 e8       	ldi	r30, 0x80	; 128
     c66:	f6 e0       	ldi	r31, 0x06	; 6
     c68:	80 81       	ld	r24, Z
     c6a:	88 60       	ori	r24, 0x08	; 8
     c6c:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     c6e:	80 ea       	ldi	r24, 0xA0	; 160
     c70:	9a e0       	ldi	r25, 0x0A	; 10
     c72:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <stdio_base>
     c76:	90 93 1a 21 	sts	0x211A, r25	; 0x80211a <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c7a:	86 e2       	ldi	r24, 0x26	; 38
     c7c:	96 e0       	ldi	r25, 0x06	; 6
     c7e:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <ptr_put>
     c82:	90 93 18 21 	sts	0x2118, r25	; 0x802118 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     c86:	8e e1       	ldi	r24, 0x1E	; 30
     c88:	96 e0       	ldi	r25, 0x06	; 6
     c8a:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <ptr_get>
     c8e:	90 93 16 21 	sts	0x2116, r25	; 0x802116 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c92:	ed e0       	ldi	r30, 0x0D	; 13
     c94:	f0 e2       	ldi	r31, 0x20	; 32
     c96:	84 81       	ldd	r24, Z+4	; 0x04
     c98:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c9a:	85 81       	ldd	r24, Z+5	; 0x05
     c9c:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c9e:	86 81       	ldd	r24, Z+6	; 0x06
     ca0:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	a2 81       	ldd	r26, Z+2	; 0x02
     ca8:	b3 81       	ldd	r27, Z+3	; 0x03
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	ab 83       	std	Y+3, r26	; 0x03
     cb0:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     cb2:	60 e1       	ldi	r22, 0x10	; 16
     cb4:	85 e0       	ldi	r24, 0x05	; 5
     cb6:	4d d1       	rcall	.+666    	; 0xf52 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     cb8:	be 01       	movw	r22, r28
     cba:	6f 5f       	subi	r22, 0xFF	; 255
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	80 ea       	ldi	r24, 0xA0	; 160
     cc0:	9a e0       	ldi	r25, 0x0A	; 10
     cc2:	7f dd       	rcall	.-1282   	; 0x7c2 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     cc4:	61 ea       	ldi	r22, 0xA1	; 161
     cc6:	71 e0       	ldi	r23, 0x01	; 1
     cc8:	8a eb       	ldi	r24, 0xBA	; 186
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
     cd0:	27 96       	adiw	r28, 0x07	; 7
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	fc 01       	movw	r30, r24
     ce2:	41 15       	cp	r20, r1
     ce4:	51 05       	cpc	r21, r1
     ce6:	b1 f1       	breq	.+108    	; 0xd54 <rb16_write+0x78>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	db 01       	movw	r26, r22
     cf4:	a8 0f       	add	r26, r24
     cf6:	b9 1f       	adc	r27, r25
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	a2 81       	ldd	r26, Z+2	; 0x02
     cfe:	b3 81       	ldd	r27, Z+3	; 0x03
     d00:	aa 0f       	add	r26, r26
     d02:	bb 1f       	adc	r27, r27
     d04:	c6 81       	ldd	r28, Z+6	; 0x06
     d06:	d7 81       	ldd	r29, Z+7	; 0x07
     d08:	ac 0f       	add	r26, r28
     d0a:	bd 1f       	adc	r27, r29
     d0c:	8d 93       	st	X+, r24
     d0e:	9c 93       	st	X, r25
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	82 83       	std	Z+2, r24	; 0x02
     d18:	93 83       	std	Z+3, r25	; 0x03
     d1a:	a0 81       	ld	r26, Z
     d1c:	b1 81       	ldd	r27, Z+1	; 0x01
     d1e:	8a 17       	cp	r24, r26
     d20:	9b 07       	cpc	r25, r27
     d22:	11 f4       	brne	.+4      	; 0xd28 <rb16_write+0x4c>
     d24:	12 82       	std	Z+2, r1	; 0x02
     d26:	13 82       	std	Z+3, r1	; 0x03
     d28:	82 81       	ldd	r24, Z+2	; 0x02
     d2a:	93 81       	ldd	r25, Z+3	; 0x03
     d2c:	c4 81       	ldd	r28, Z+4	; 0x04
     d2e:	d5 81       	ldd	r29, Z+5	; 0x05
     d30:	8c 17       	cp	r24, r28
     d32:	9d 07       	cpc	r25, r29
     d34:	49 f4       	brne	.+18     	; 0xd48 <rb16_write+0x6c>
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	a8 17       	cp	r26, r24
     d3a:	b9 07       	cpc	r27, r25
     d3c:	19 f0       	breq	.+6      	; 0xd44 <rb16_write+0x68>
     d3e:	84 83       	std	Z+4, r24	; 0x04
     d40:	95 83       	std	Z+5, r25	; 0x05
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <rb16_write+0x6c>
     d44:	14 82       	std	Z+4, r1	; 0x04
     d46:	15 82       	std	Z+5, r1	; 0x05
     d48:	2f 5f       	subi	r18, 0xFF	; 255
     d4a:	82 2f       	mov	r24, r18
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	84 17       	cp	r24, r20
     d50:	95 07       	cpc	r25, r21
     d52:	68 f2       	brcs	.-102    	; 0xcee <rb16_write+0x12>
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <rb16_init>:
     d5a:	fc 01       	movw	r30, r24
     d5c:	12 82       	std	Z+2, r1	; 0x02
     d5e:	13 82       	std	Z+3, r1	; 0x03
     d60:	14 82       	std	Z+4, r1	; 0x04
     d62:	15 82       	std	Z+5, r1	; 0x05
     d64:	66 83       	std	Z+6, r22	; 0x06
     d66:	77 83       	std	Z+7, r23	; 0x07
     d68:	40 83       	st	Z, r20
     d6a:	51 83       	std	Z+1, r21	; 0x01
     d6c:	08 95       	ret

00000d6e <rb16_get_nth>:
     d6e:	dc 01       	movw	r26, r24
     d70:	12 96       	adiw	r26, 0x02	; 2
     d72:	ed 91       	ld	r30, X+
     d74:	fc 91       	ld	r31, X
     d76:	13 97       	sbiw	r26, 0x03	; 3
     d78:	cb 01       	movw	r24, r22
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	e8 17       	cp	r30, r24
     d7e:	f9 07       	cpc	r31, r25
     d80:	78 f0       	brcs	.+30     	; 0xda0 <rb16_get_nth+0x32>
     d82:	e1 50       	subi	r30, 0x01	; 1
     d84:	f0 48       	sbci	r31, 0x80	; 128
     d86:	e6 1b       	sub	r30, r22
     d88:	f7 0b       	sbc	r31, r23
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	16 96       	adiw	r26, 0x06	; 6
     d90:	8d 91       	ld	r24, X+
     d92:	9c 91       	ld	r25, X
     d94:	17 97       	sbiw	r26, 0x07	; 7
     d96:	e8 0f       	add	r30, r24
     d98:	f9 1f       	adc	r31, r25
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	08 95       	ret
     da0:	2d 91       	ld	r18, X+
     da2:	3c 91       	ld	r19, X
     da4:	11 97       	sbiw	r26, 0x01	; 1
     da6:	e2 0f       	add	r30, r18
     da8:	f3 1f       	adc	r31, r19
     daa:	e1 50       	subi	r30, 0x01	; 1
     dac:	f0 48       	sbci	r31, 0x80	; 128
     dae:	e6 1b       	sub	r30, r22
     db0:	f7 0b       	sbc	r31, r23
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	16 96       	adiw	r26, 0x06	; 6
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	17 97       	sbiw	r26, 0x07	; 7
     dbe:	e8 0f       	add	r30, r24
     dc0:	f9 1f       	adc	r31, r25
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	08 95       	ret

00000dc8 <rb32_write>:
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	fc 01       	movw	r30, r24
     dd6:	41 15       	cp	r20, r1
     dd8:	51 05       	cpc	r21, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <rb32_write+0x16>
     ddc:	3f c0       	rjmp	.+126    	; 0xe5c <rb32_write+0x94>
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	db 01       	movw	r26, r22
     dee:	a8 0f       	add	r26, r24
     df0:	b9 1f       	adc	r27, r25
     df2:	cd 90       	ld	r12, X+
     df4:	dd 90       	ld	r13, X+
     df6:	ed 90       	ld	r14, X+
     df8:	fc 90       	ld	r15, X
     dfa:	a2 81       	ldd	r26, Z+2	; 0x02
     dfc:	b3 81       	ldd	r27, Z+3	; 0x03
     dfe:	aa 0f       	add	r26, r26
     e00:	bb 1f       	adc	r27, r27
     e02:	aa 0f       	add	r26, r26
     e04:	bb 1f       	adc	r27, r27
     e06:	86 81       	ldd	r24, Z+6	; 0x06
     e08:	97 81       	ldd	r25, Z+7	; 0x07
     e0a:	a8 0f       	add	r26, r24
     e0c:	b9 1f       	adc	r27, r25
     e0e:	cd 92       	st	X+, r12
     e10:	dd 92       	st	X+, r13
     e12:	ed 92       	st	X+, r14
     e14:	fc 92       	st	X, r15
     e16:	13 97       	sbiw	r26, 0x03	; 3
     e18:	82 81       	ldd	r24, Z+2	; 0x02
     e1a:	93 81       	ldd	r25, Z+3	; 0x03
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	82 83       	std	Z+2, r24	; 0x02
     e20:	93 83       	std	Z+3, r25	; 0x03
     e22:	a0 81       	ld	r26, Z
     e24:	b1 81       	ldd	r27, Z+1	; 0x01
     e26:	8a 17       	cp	r24, r26
     e28:	9b 07       	cpc	r25, r27
     e2a:	11 f4       	brne	.+4      	; 0xe30 <rb32_write+0x68>
     e2c:	12 82       	std	Z+2, r1	; 0x02
     e2e:	13 82       	std	Z+3, r1	; 0x03
     e30:	82 81       	ldd	r24, Z+2	; 0x02
     e32:	93 81       	ldd	r25, Z+3	; 0x03
     e34:	c4 81       	ldd	r28, Z+4	; 0x04
     e36:	d5 81       	ldd	r29, Z+5	; 0x05
     e38:	8c 17       	cp	r24, r28
     e3a:	9d 07       	cpc	r25, r29
     e3c:	49 f4       	brne	.+18     	; 0xe50 <rb32_write+0x88>
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	a8 17       	cp	r26, r24
     e42:	b9 07       	cpc	r27, r25
     e44:	19 f0       	breq	.+6      	; 0xe4c <rb32_write+0x84>
     e46:	84 83       	std	Z+4, r24	; 0x04
     e48:	95 83       	std	Z+5, r25	; 0x05
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <rb32_write+0x88>
     e4c:	14 82       	std	Z+4, r1	; 0x04
     e4e:	15 82       	std	Z+5, r1	; 0x05
     e50:	2f 5f       	subi	r18, 0xFF	; 255
     e52:	82 2f       	mov	r24, r18
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	84 17       	cp	r24, r20
     e58:	95 07       	cpc	r25, r21
     e5a:	20 f2       	brcs	.-120    	; 0xde4 <rb32_write+0x1c>
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	cf 90       	pop	r12
     e68:	08 95       	ret

00000e6a <rb32_init>:
     e6a:	fc 01       	movw	r30, r24
     e6c:	12 82       	std	Z+2, r1	; 0x02
     e6e:	13 82       	std	Z+3, r1	; 0x03
     e70:	14 82       	std	Z+4, r1	; 0x04
     e72:	15 82       	std	Z+5, r1	; 0x05
     e74:	66 83       	std	Z+6, r22	; 0x06
     e76:	77 83       	std	Z+7, r23	; 0x07
     e78:	40 83       	st	Z, r20
     e7a:	51 83       	std	Z+1, r21	; 0x01
     e7c:	08 95       	ret

00000e7e <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     e7e:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     e80:	12 96       	adiw	r26, 0x02	; 2
     e82:	ed 91       	ld	r30, X+
     e84:	fc 91       	ld	r31, X
     e86:	13 97       	sbiw	r26, 0x03	; 3
     e88:	cb 01       	movw	r24, r22
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	e8 17       	cp	r30, r24
     e8e:	f9 07       	cpc	r31, r25
     e90:	98 f0       	brcs	.+38     	; 0xeb8 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     e92:	e1 50       	subi	r30, 0x01	; 1
     e94:	f0 4c       	sbci	r31, 0xC0	; 192
     e96:	e6 1b       	sub	r30, r22
     e98:	f7 0b       	sbc	r31, r23
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	16 96       	adiw	r26, 0x06	; 6
     ea4:	8d 91       	ld	r24, X+
     ea6:	9c 91       	ld	r25, X
     ea8:	17 97       	sbiw	r26, 0x07	; 7
     eaa:	e8 0f       	add	r30, r24
     eac:	f9 1f       	adc	r31, r25
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     eb8:	2d 91       	ld	r18, X+
     eba:	3c 91       	ld	r19, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	e2 0f       	add	r30, r18
     ec0:	f3 1f       	adc	r31, r19
     ec2:	e1 50       	subi	r30, 0x01	; 1
     ec4:	f0 4c       	sbci	r31, 0xC0	; 192
     ec6:	e6 1b       	sub	r30, r22
     ec8:	f7 0b       	sbc	r31, r23
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	16 96       	adiw	r26, 0x06	; 6
     ed4:	8d 91       	ld	r24, X+
     ed6:	9c 91       	ld	r25, X
     ed8:	17 97       	sbiw	r26, 0x07	; 7
     eda:	e8 0f       	add	r30, r24
     edc:	f9 1f       	adc	r31, r25
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
}
     ee6:	08 95       	ret

00000ee8 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	1f 92       	push	r1
     eee:	1f 92       	push	r1
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     efa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     efe:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     f02:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     f06:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     f0a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     f0e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f12:	8f b7       	in	r24, 0x3f	; 63
     f14:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f16:	f8 94       	cli
	return flags;
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f1a:	e0 e5       	ldi	r30, 0x50	; 80
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	82 60       	ori	r24, 0x02	; 2
     f22:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f24:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f26:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f28:	81 ff       	sbrs	r24, 1
     f2a:	fd cf       	rjmp	.-6      	; 0xf26 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	80 e4       	ldi	r24, 0x40	; 64
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	25 d0       	rcall	.+74     	; 0xf7e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f34:	8f b7       	in	r24, 0x3f	; 63
     f36:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f38:	f8 94       	cli
	return flags;
     f3a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     f3c:	e0 e5       	ldi	r30, 0x50	; 80
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8e 7f       	andi	r24, 0xFE	; 254
     f44:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f46:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	1f 92       	push	r1
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f5c:	9f b7       	in	r25, 0x3f	; 63
     f5e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f60:	f8 94       	cli
	return flags;
     f62:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     f64:	e8 2f       	mov	r30, r24
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	e0 59       	subi	r30, 0x90	; 144
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 95       	com	r22
     f6e:	80 81       	ld	r24, Z
     f70:	68 23       	and	r22, r24
     f72:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f74:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     f76:	0f 90       	pop	r0
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     f7e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     f80:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     f82:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     f84:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     f86:	60 83       	st	Z, r22
	ret                             // Return to caller
     f88:	08 95       	ret

00000f8a <__portable_avr_delay_cycles>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	delay_ms(1);
	uint8_t byte = NVM.DATA0;
	return byte;
}
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <__portable_avr_delay_cycles+0xa>
     f8c:	61 50       	subi	r22, 0x01	; 1
     f8e:	71 09       	sbc	r23, r1
     f90:	81 09       	sbc	r24, r1
     f92:	91 09       	sbc	r25, r1
     f94:	61 15       	cp	r22, r1
     f96:	71 05       	cpc	r23, r1
     f98:	81 05       	cpc	r24, r1
     f9a:	91 05       	cpc	r25, r1
     f9c:	b9 f7       	brne	.-18     	; 0xf8c <__portable_avr_delay_cycles+0x2>
     f9e:	08 95       	ret

00000fa0 <pressure_init>:
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	b3 dd       	rcall	.-1178   	; 0xb0c <ms5607_init>
     fa6:	82 ea       	ldi	r24, 0xA2	; 162
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	c9 dd       	rcall	.-1134   	; 0xb3e <ms5607_read>
     fac:	c2 e0       	ldi	r28, 0x02	; 2
     fae:	d1 e2       	ldi	r29, 0x21	; 33
     fb0:	88 83       	st	Y, r24
     fb2:	99 83       	std	Y+1, r25	; 0x01
     fb4:	84 ea       	ldi	r24, 0xA4	; 164
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	c2 dd       	rcall	.-1148   	; 0xb3e <ms5607_read>
     fba:	8a 83       	std	Y+2, r24	; 0x02
     fbc:	9b 83       	std	Y+3, r25	; 0x03
     fbe:	86 ea       	ldi	r24, 0xA6	; 166
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	bd dd       	rcall	.-1158   	; 0xb3e <ms5607_read>
     fc4:	8c 83       	std	Y+4, r24	; 0x04
     fc6:	9d 83       	std	Y+5, r25	; 0x05
     fc8:	88 ea       	ldi	r24, 0xA8	; 168
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	b8 dd       	rcall	.-1168   	; 0xb3e <ms5607_read>
     fce:	8e 83       	std	Y+6, r24	; 0x06
     fd0:	9f 83       	std	Y+7, r25	; 0x07
     fd2:	8a ea       	ldi	r24, 0xAA	; 170
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	b3 dd       	rcall	.-1178   	; 0xb3e <ms5607_read>
     fd8:	88 87       	std	Y+8, r24	; 0x08
     fda:	99 87       	std	Y+9, r25	; 0x09
     fdc:	8c ea       	ldi	r24, 0xAC	; 172
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	ae dd       	rcall	.-1188   	; 0xb3e <ms5607_read>
     fe2:	8a 87       	std	Y+10, r24	; 0x0a
     fe4:	9b 87       	std	Y+11, r25	; 0x0b
     fe6:	9f 93       	push	r25
     fe8:	8f 93       	push	r24
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	8f 93       	push	r24
     fee:	88 85       	ldd	r24, Y+8	; 0x08
     ff0:	8f 93       	push	r24
     ff2:	8f 81       	ldd	r24, Y+7	; 0x07
     ff4:	8f 93       	push	r24
     ff6:	8e 81       	ldd	r24, Y+6	; 0x06
     ff8:	8f 93       	push	r24
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	8f 93       	push	r24
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	8f 93       	push	r24
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	8f 93       	push	r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	8f 93       	push	r24
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	8f 93       	push	r24
    100e:	88 81       	ld	r24, Y
    1010:	8f 93       	push	r24
    1012:	86 ea       	ldi	r24, 0xA6	; 166
    1014:	90 e2       	ldi	r25, 0x20	; 32
    1016:	9f 93       	push	r25
    1018:	8f 93       	push	r24
    101a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <printf>
    101e:	8d b7       	in	r24, 0x3d	; 61
    1020:	9e b7       	in	r25, 0x3e	; 62
    1022:	0e 96       	adiw	r24, 0x0e	; 14
    1024:	8d bf       	out	0x3d, r24	; 61
    1026:	9e bf       	out	0x3e, r25	; 62
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <gps_init>:
    102e:	2e dd       	rcall	.-1444   	; 0xa8c <gps_uart_init>
    1030:	6b ea       	ldi	r22, 0xAB	; 171
    1032:	79 e2       	ldi	r23, 0x29	; 41
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a8 df       	rcall	.-176    	; 0xf8a <__portable_avr_delay_cycles>
    103a:	80 e3       	ldi	r24, 0x30	; 48
    103c:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    1040:	08 95       	ret

00001042 <release>:
    1042:	80 eb       	ldi	r24, 0xB0	; 176
    1044:	94 e0       	ldi	r25, 0x04	; 4
    1046:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    104a:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <released>
    1054:	08 95       	ret

00001056 <get_pressure>:
    1056:	4f 92       	push	r4
    1058:	5f 92       	push	r5
    105a:	6f 92       	push	r6
    105c:	7f 92       	push	r7
    105e:	8f 92       	push	r8
    1060:	9f 92       	push	r9
    1062:	af 92       	push	r10
    1064:	bf 92       	push	r11
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	77 dd       	rcall	.-1298   	; 0xb62 <ms5607_convert_d1>
    1074:	6b 01       	movw	r12, r22
    1076:	7c 01       	movw	r14, r24
    1078:	98 dd       	rcall	.-1232   	; 0xbaa <ms5607_convert_d2>
    107a:	0e 94 4c 19 	call	0x3298	; 0x3298 <__floatunsisf>
    107e:	4b 01       	movw	r8, r22
    1080:	5c 01       	movw	r10, r24
    1082:	c2 e0       	ldi	r28, 0x02	; 2
    1084:	d1 e2       	ldi	r29, 0x21	; 33
    1086:	68 85       	ldd	r22, Y+8	; 0x08
    1088:	79 85       	ldd	r23, Y+9	; 0x09
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 4c 19 	call	0x3298	; 0x3298 <__floatunsisf>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e8       	ldi	r20, 0x80	; 128
    1098:	53 e4       	ldi	r21, 0x43	; 67
    109a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    109e:	9b 01       	movw	r18, r22
    10a0:	ac 01       	movw	r20, r24
    10a2:	c5 01       	movw	r24, r10
    10a4:	b4 01       	movw	r22, r8
    10a6:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    10aa:	4b 01       	movw	r8, r22
    10ac:	5c 01       	movw	r10, r24
    10ae:	6c 81       	ldd	r22, Y+4	; 0x04
    10b0:	7d 81       	ldd	r23, Y+5	; 0x05
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 4c 19 	call	0x3298	; 0x3298 <__floatunsisf>
    10ba:	a5 01       	movw	r20, r10
    10bc:	94 01       	movw	r18, r8
    10be:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	5c e3       	ldi	r21, 0x3C	; 60
    10ca:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    10ce:	2b 01       	movw	r4, r22
    10d0:	3c 01       	movw	r6, r24
    10d2:	68 81       	ld	r22, Y
    10d4:	79 81       	ldd	r23, Y+1	; 0x01
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 4c 19 	call	0x3298	; 0x3298 <__floatunsisf>
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	57 e4       	ldi	r21, 0x47	; 71
    10e6:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	c3 01       	movw	r24, r6
    10f0:	b2 01       	movw	r22, r4
    10f2:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    10f6:	2b 01       	movw	r4, r22
    10f8:	3c 01       	movw	r6, r24
    10fa:	c7 01       	movw	r24, r14
    10fc:	b6 01       	movw	r22, r12
    10fe:	0e 94 4c 19 	call	0x3298	; 0x3298 <__floatunsisf>
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24
    1106:	c3 01       	movw	r24, r6
    1108:	b2 01       	movw	r22, r4
    110a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	55 e3       	ldi	r21, 0x35	; 53
    1116:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    111a:	6b 01       	movw	r12, r22
    111c:	7c 01       	movw	r14, r24
    111e:	6e 81       	ldd	r22, Y+6	; 0x06
    1120:	7f 81       	ldd	r23, Y+7	; 0x07
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 4c 19 	call	0x3298	; 0x3298 <__floatunsisf>
    112a:	a5 01       	movw	r20, r10
    112c:	94 01       	movw	r18, r8
    112e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5c e3       	ldi	r21, 0x3C	; 60
    113a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    113e:	4b 01       	movw	r8, r22
    1140:	5c 01       	movw	r10, r24
    1142:	6a 81       	ldd	r22, Y+2	; 0x02
    1144:	7b 81       	ldd	r23, Y+3	; 0x03
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 4c 19 	call	0x3298	; 0x3298 <__floatunsisf>
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	58 e4       	ldi	r21, 0x48	; 72
    1156:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    115a:	9b 01       	movw	r18, r22
    115c:	ac 01       	movw	r20, r24
    115e:	c5 01       	movw	r24, r10
    1160:	b4 01       	movw	r22, r8
    1162:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	c7 01       	movw	r24, r14
    116c:	b6 01       	movw	r22, r12
    116e:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	58 e3       	ldi	r21, 0x38	; 56
    117a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	bf 90       	pop	r11
    118c:	af 90       	pop	r10
    118e:	9f 90       	pop	r9
    1190:	8f 90       	pop	r8
    1192:	7f 90       	pop	r7
    1194:	6f 90       	pop	r6
    1196:	5f 90       	pop	r5
    1198:	4f 90       	pop	r4
    119a:	08 95       	ret

0000119c <get_altitude>:
    119c:	4f 92       	push	r4
    119e:	5f 92       	push	r5
    11a0:	6f 92       	push	r6
    11a2:	7f 92       	push	r7
    11a4:	8f 92       	push	r8
    11a6:	9f 92       	push	r9
    11a8:	af 92       	push	r10
    11aa:	bf 92       	push	r11
    11ac:	cf 92       	push	r12
    11ae:	df 92       	push	r13
    11b0:	ef 92       	push	r14
    11b2:	ff 92       	push	r15
    11b4:	2b 01       	movw	r4, r22
    11b6:	3c 01       	movw	r6, r24
    11b8:	c0 90 21 20 	lds	r12, 0x2021	; 0x802021 <L>
    11bc:	d0 90 22 20 	lds	r13, 0x2022	; 0x802022 <L+0x1>
    11c0:	e0 90 23 20 	lds	r14, 0x2023	; 0x802023 <L+0x2>
    11c4:	f0 90 24 20 	lds	r15, 0x2024	; 0x802024 <L+0x3>
    11c8:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <R>
    11cc:	30 91 26 20 	lds	r19, 0x2026	; 0x802026 <R+0x1>
    11d0:	40 91 27 20 	lds	r20, 0x2027	; 0x802027 <R+0x2>
    11d4:	50 91 28 20 	lds	r21, 0x2028	; 0x802028 <R+0x3>
    11d8:	c7 01       	movw	r24, r14
    11da:	b6 01       	movw	r22, r12
    11dc:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    11e0:	20 91 1d 20 	lds	r18, 0x201D	; 0x80201d <g_0>
    11e4:	30 91 1e 20 	lds	r19, 0x201E	; 0x80201e <g_0+0x1>
    11e8:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <g_0+0x2>
    11ec:	50 91 20 20 	lds	r21, 0x2020	; 0x802020 <g_0+0x3>
    11f0:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    11f4:	4b 01       	movw	r8, r22
    11f6:	5c 01       	movw	r10, r24
    11f8:	a3 01       	movw	r20, r6
    11fa:	92 01       	movw	r18, r4
    11fc:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    1200:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    1204:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    1208:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    120c:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    1210:	a5 01       	movw	r20, r10
    1212:	94 01       	movw	r18, r8
    1214:	0e 94 cd 1a 	call	0x359a	; 0x359a <pow>
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    1224:	20 91 29 20 	lds	r18, 0x2029	; 0x802029 <ground_t>
    1228:	30 91 2a 20 	lds	r19, 0x202A	; 0x80202a <ground_t+0x1>
    122c:	40 91 2b 20 	lds	r20, 0x202B	; 0x80202b <ground_t+0x2>
    1230:	50 91 2c 20 	lds	r21, 0x202C	; 0x80202c <ground_t+0x3>
    1234:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1238:	a7 01       	movw	r20, r14
    123a:	96 01       	movw	r18, r12
    123c:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    1240:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <ground_a>
    1244:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <ground_a+0x1>
    1248:	40 91 10 21 	lds	r20, 0x2110	; 0x802110 <ground_a+0x2>
    124c:	50 91 11 21 	lds	r21, 0x2111	; 0x802111 <ground_a+0x3>
    1250:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	df 90       	pop	r13
    125a:	cf 90       	pop	r12
    125c:	bf 90       	pop	r11
    125e:	af 90       	pop	r10
    1260:	9f 90       	pop	r9
    1262:	8f 90       	pop	r8
    1264:	7f 90       	pop	r7
    1266:	6f 90       	pop	r6
    1268:	5f 90       	pop	r5
    126a:	4f 90       	pop	r4
    126c:	08 95       	ret

0000126e <diff>:
    126e:	2f 92       	push	r2
    1270:	3f 92       	push	r3
    1272:	4f 92       	push	r4
    1274:	5f 92       	push	r5
    1276:	6f 92       	push	r6
    1278:	7f 92       	push	r7
    127a:	8f 92       	push	r8
    127c:	9f 92       	push	r9
    127e:	af 92       	push	r10
    1280:	bf 92       	push	r11
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	00 d0       	rcall	.+0      	; 0x1294 <diff+0x26>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <diff+0x28>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	6c 01       	movw	r12, r24
    129c:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    12a0:	88 23       	and	r24, r24
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <diff+0x38>
    12a4:	6c c0       	rjmp	.+216    	; 0x137e <diff+0x110>
    12a6:	00 e0       	ldi	r16, 0x00	; 0
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	41 2c       	mov	r4, r1
    12ac:	51 2c       	mov	r5, r1
    12ae:	32 01       	movw	r6, r4
    12b0:	86 2e       	mov	r8, r22
    12b2:	91 2c       	mov	r9, r1
    12b4:	a1 2c       	mov	r10, r1
    12b6:	b1 2c       	mov	r11, r1
    12b8:	89 82       	std	Y+1, r8	; 0x01
    12ba:	9a 82       	std	Y+2, r9	; 0x02
    12bc:	ab 82       	std	Y+3, r10	; 0x03
    12be:	bc 82       	std	Y+4, r11	; 0x04
    12c0:	b8 01       	movw	r22, r16
    12c2:	c6 01       	movw	r24, r12
    12c4:	54 dd       	rcall	.-1368   	; 0xd6e <rb16_get_nth>
    12c6:	5c 01       	movw	r10, r24
    12c8:	18 01       	movw	r2, r16
    12ca:	2f ef       	ldi	r18, 0xFF	; 255
    12cc:	22 1a       	sub	r2, r18
    12ce:	32 0a       	sbc	r3, r18
    12d0:	b1 01       	movw	r22, r2
    12d2:	c6 01       	movw	r24, r12
    12d4:	4c dd       	rcall	.-1384   	; 0xd6e <rb16_get_nth>
    12d6:	7c 01       	movw	r14, r24
    12d8:	b8 01       	movw	r22, r16
    12da:	6e 5f       	subi	r22, 0xFE	; 254
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	c6 01       	movw	r24, r12
    12e0:	46 dd       	rcall	.-1396   	; 0xd6e <rb16_get_nth>
    12e2:	a5 01       	movw	r20, r10
    12e4:	bb 0c       	add	r11, r11
    12e6:	66 0b       	sbc	r22, r22
    12e8:	77 0b       	sbc	r23, r23
    12ea:	8a 01       	movw	r16, r20
    12ec:	9b 01       	movw	r18, r22
    12ee:	00 0f       	add	r16, r16
    12f0:	11 1f       	adc	r17, r17
    12f2:	22 1f       	adc	r18, r18
    12f4:	33 1f       	adc	r19, r19
    12f6:	40 0f       	add	r20, r16
    12f8:	51 1f       	adc	r21, r17
    12fa:	62 1f       	adc	r22, r18
    12fc:	73 1f       	adc	r23, r19
    12fe:	87 01       	movw	r16, r14
    1300:	ff 0c       	add	r15, r15
    1302:	22 0b       	sbc	r18, r18
    1304:	33 0b       	sbc	r19, r19
    1306:	78 01       	movw	r14, r16
    1308:	89 01       	movw	r16, r18
    130a:	ee 0c       	add	r14, r14
    130c:	ff 1c       	adc	r15, r15
    130e:	00 1f       	adc	r16, r16
    1310:	11 1f       	adc	r17, r17
    1312:	ee 0c       	add	r14, r14
    1314:	ff 1c       	adc	r15, r15
    1316:	00 1f       	adc	r16, r16
    1318:	11 1f       	adc	r17, r17
    131a:	4a 01       	movw	r8, r20
    131c:	5b 01       	movw	r10, r22
    131e:	8e 18       	sub	r8, r14
    1320:	9f 08       	sbc	r9, r15
    1322:	a0 0a       	sbc	r10, r16
    1324:	b1 0a       	sbc	r11, r17
    1326:	ac 01       	movw	r20, r24
    1328:	99 0f       	add	r25, r25
    132a:	66 0b       	sbc	r22, r22
    132c:	77 0b       	sbc	r23, r23
    132e:	d5 01       	movw	r26, r10
    1330:	c4 01       	movw	r24, r8
    1332:	84 0f       	add	r24, r20
    1334:	95 1f       	adc	r25, r21
    1336:	a6 1f       	adc	r26, r22
    1338:	b7 1f       	adc	r27, r23
    133a:	9c 01       	movw	r18, r24
    133c:	ad 01       	movw	r20, r26
    133e:	69 81       	ldd	r22, Y+1	; 0x01
    1340:	7a 81       	ldd	r23, Y+2	; 0x02
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__mulsi3>
    134a:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatsisf>
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	5f e3       	ldi	r21, 0x3F	; 63
    1356:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	c3 01       	movw	r24, r6
    1360:	b2 01       	movw	r22, r4
    1362:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1366:	2b 01       	movw	r4, r22
    1368:	3c 01       	movw	r6, r24
    136a:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    136e:	81 01       	movw	r16, r2
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	22 16       	cp	r2, r18
    1376:	33 06       	cpc	r3, r19
    1378:	08 f4       	brcc	.+2      	; 0x137c <diff+0x10e>
    137a:	a2 cf       	rjmp	.-188    	; 0x12c0 <diff+0x52>
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <diff+0x116>
    137e:	41 2c       	mov	r4, r1
    1380:	51 2c       	mov	r5, r1
    1382:	32 01       	movw	r6, r4
    1384:	68 2f       	mov	r22, r24
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatsisf>
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
    1394:	c3 01       	movw	r24, r6
    1396:	b2 01       	movw	r22, r4
    1398:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	48 ec       	ldi	r20, 0xC8	; 200
    13a2:	52 e4       	ldi	r21, 0x42	; 66
    13a4:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    13a8:	26 96       	adiw	r28, 0x06	; 6
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	9f 90       	pop	r9
    13c4:	8f 90       	pop	r8
    13c6:	7f 90       	pop	r7
    13c8:	6f 90       	pop	r6
    13ca:	5f 90       	pop	r5
    13cc:	4f 90       	pop	r4
    13ce:	3f 90       	pop	r3
    13d0:	2f 90       	pop	r2
    13d2:	08 95       	ret

000013d4 <data_check>:
    13d4:	3f 92       	push	r3
    13d6:	4f 92       	push	r4
    13d8:	5f 92       	push	r5
    13da:	6f 92       	push	r6
    13dc:	7f 92       	push	r7
    13de:	8f 92       	push	r8
    13e0:	9f 92       	push	r9
    13e2:	af 92       	push	r10
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <data_check+0x24>
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <data_check+0x26>
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	8c 01       	movw	r16, r24
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	1a 82       	std	Y+2, r1	; 0x02
    1404:	c1 2c       	mov	r12, r1
    1406:	d1 2c       	mov	r13, r1
    1408:	76 01       	movw	r14, r12
    140a:	69 81       	ldd	r22, Y+1	; 0x01
    140c:	7a 81       	ldd	r23, Y+2	; 0x02
    140e:	c8 01       	movw	r24, r16
    1410:	36 dd       	rcall	.-1428   	; 0xe7e <rb32_get_nth>
    1412:	4b 01       	movw	r8, r22
    1414:	5c 01       	movw	r10, r24
    1416:	21 ea       	ldi	r18, 0xA1	; 161
    1418:	82 1a       	sub	r8, r18
    141a:	26 e8       	ldi	r18, 0x86	; 134
    141c:	92 0a       	sbc	r9, r18
    141e:	21 e0       	ldi	r18, 0x01	; 1
    1420:	a2 0a       	sbc	r10, r18
    1422:	b1 08       	sbc	r11, r1
    1424:	2f ed       	ldi	r18, 0xDF	; 223
    1426:	82 16       	cp	r8, r18
    1428:	2f e0       	ldi	r18, 0x0F	; 15
    142a:	92 06       	cpc	r9, r18
    142c:	27 e9       	ldi	r18, 0x97	; 151
    142e:	a2 06       	cpc	r10, r18
    1430:	b1 04       	cpc	r11, r1
    1432:	80 f4       	brcc	.+32     	; 0x1454 <data_check+0x80>
    1434:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatsisf>
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 ea       	ldi	r20, 0xA0	; 160
    143e:	50 e4       	ldi	r21, 0x40	; 64
    1440:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    1444:	9b 01       	movw	r18, r22
    1446:	ac 01       	movw	r20, r24
    1448:	c7 01       	movw	r24, r14
    144a:	b6 01       	movw	r22, r12
    144c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1450:	6b 01       	movw	r12, r22
    1452:	7c 01       	movw	r14, r24
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	05 97       	sbiw	r24, 0x05	; 5
    1460:	a1 f6       	brne	.-88     	; 0x140a <data_check+0x36>
    1462:	19 82       	std	Y+1, r1	; 0x01
    1464:	1a 82       	std	Y+2, r1	; 0x02
    1466:	81 2c       	mov	r8, r1
    1468:	91 2c       	mov	r9, r1
    146a:	54 01       	movw	r10, r8
    146c:	69 81       	ldd	r22, Y+1	; 0x01
    146e:	7a 81       	ldd	r23, Y+2	; 0x02
    1470:	c8 01       	movw	r24, r16
    1472:	05 dd       	rcall	.-1526   	; 0xe7e <rb32_get_nth>
    1474:	2b 01       	movw	r4, r22
    1476:	3c 01       	movw	r6, r24
    1478:	21 ea       	ldi	r18, 0xA1	; 161
    147a:	42 1a       	sub	r4, r18
    147c:	26 e8       	ldi	r18, 0x86	; 134
    147e:	52 0a       	sbc	r5, r18
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	62 0a       	sbc	r6, r18
    1484:	71 08       	sbc	r7, r1
    1486:	2f ed       	ldi	r18, 0xDF	; 223
    1488:	42 16       	cp	r4, r18
    148a:	2f e0       	ldi	r18, 0x0F	; 15
    148c:	52 06       	cpc	r5, r18
    148e:	27 e9       	ldi	r18, 0x97	; 151
    1490:	62 06       	cpc	r6, r18
    1492:	71 04       	cpc	r7, r1
    1494:	90 f4       	brcc	.+36     	; 0x14ba <data_check+0xe6>
    1496:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatsisf>
    149a:	a7 01       	movw	r20, r14
    149c:	96 01       	movw	r18, r12
    149e:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    14a2:	9b 01       	movw	r18, r22
    14a4:	ac 01       	movw	r20, r24
    14a6:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	c5 01       	movw	r24, r10
    14b0:	b4 01       	movw	r22, r8
    14b2:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    14b6:	4b 01       	movw	r8, r22
    14b8:	5c 01       	movw	r10, r24
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	9a 83       	std	Y+2, r25	; 0x02
    14c4:	05 97       	sbiw	r24, 0x05	; 5
    14c6:	91 f6       	brne	.-92     	; 0x146c <data_check+0x98>
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5e e3       	ldi	r21, 0x3E	; 62
    14d0:	c5 01       	movw	r24, r10
    14d2:	b4 01       	movw	r22, r8
    14d4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    14d8:	69 83       	std	Y+1, r22	; 0x01
    14da:	7a 83       	std	Y+2, r23	; 0x02
    14dc:	8b 83       	std	Y+3, r24	; 0x03
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	1d 82       	std	Y+5, r1	; 0x05
    14e2:	1e 82       	std	Y+6, r1	; 0x06
    14e4:	31 2c       	mov	r3, r1
    14e6:	41 2c       	mov	r4, r1
    14e8:	51 2c       	mov	r5, r1
    14ea:	32 01       	movw	r6, r4
    14ec:	6d 81       	ldd	r22, Y+5	; 0x05
    14ee:	7e 81       	ldd	r23, Y+6	; 0x06
    14f0:	c8 01       	movw	r24, r16
    14f2:	c5 dc       	rcall	.-1654   	; 0xe7e <rb32_get_nth>
    14f4:	4b 01       	movw	r8, r22
    14f6:	5c 01       	movw	r10, r24
    14f8:	21 ea       	ldi	r18, 0xA1	; 161
    14fa:	82 1a       	sub	r8, r18
    14fc:	26 e8       	ldi	r18, 0x86	; 134
    14fe:	92 0a       	sbc	r9, r18
    1500:	21 e0       	ldi	r18, 0x01	; 1
    1502:	a2 0a       	sbc	r10, r18
    1504:	b1 08       	sbc	r11, r1
    1506:	2f ed       	ldi	r18, 0xDF	; 223
    1508:	82 16       	cp	r8, r18
    150a:	2f e0       	ldi	r18, 0x0F	; 15
    150c:	92 06       	cpc	r9, r18
    150e:	27 e9       	ldi	r18, 0x97	; 151
    1510:	a2 06       	cpc	r10, r18
    1512:	b1 04       	cpc	r11, r1
    1514:	50 f5       	brcc	.+84     	; 0x156a <data_check+0x196>
    1516:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatsisf>
    151a:	4b 01       	movw	r8, r22
    151c:	5c 01       	movw	r10, r24
    151e:	a7 01       	movw	r20, r14
    1520:	96 01       	movw	r18, r12
    1522:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    1526:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    152a:	9b 01       	movw	r18, r22
    152c:	77 23       	and	r23, r23
    152e:	24 f4       	brge	.+8      	; 0x1538 <data_check+0x164>
    1530:	22 27       	eor	r18, r18
    1532:	33 27       	eor	r19, r19
    1534:	26 1b       	sub	r18, r22
    1536:	37 0b       	sbc	r19, r23
    1538:	b9 01       	movw	r22, r18
    153a:	33 0f       	add	r19, r19
    153c:	88 0b       	sbc	r24, r24
    153e:	99 0b       	sbc	r25, r25
    1540:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatsisf>
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	69 81       	ldd	r22, Y+1	; 0x01
    154a:	7a 81       	ldd	r23, Y+2	; 0x02
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	0e 94 5f 1a 	call	0x34be	; 0x34be <__gesf2>
    1554:	88 23       	and	r24, r24
    1556:	4c f0       	brlt	.+18     	; 0x156a <data_check+0x196>
    1558:	a5 01       	movw	r20, r10
    155a:	94 01       	movw	r18, r8
    155c:	c3 01       	movw	r24, r6
    155e:	b2 01       	movw	r22, r4
    1560:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1564:	2b 01       	movw	r4, r22
    1566:	3c 01       	movw	r6, r24
    1568:	33 94       	inc	r3
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	05 97       	sbiw	r24, 0x05	; 5
    1576:	09 f0       	breq	.+2      	; 0x157a <data_check+0x1a6>
    1578:	b9 cf       	rjmp	.-142    	; 0x14ec <data_check+0x118>
    157a:	33 20       	and	r3, r3
    157c:	69 f0       	breq	.+26     	; 0x1598 <data_check+0x1c4>
    157e:	63 2d       	mov	r22, r3
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 4c 19 	call	0x3298	; 0x3298 <__floatunsisf>
    158a:	9b 01       	movw	r18, r22
    158c:	ac 01       	movw	r20, r24
    158e:	c3 01       	movw	r24, r6
    1590:	b2 01       	movw	r22, r4
    1592:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <data_check+0x1cc>
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	80 e8       	ldi	r24, 0x80	; 128
    159e:	9f eb       	ldi	r25, 0xBF	; 191
    15a0:	26 96       	adiw	r28, 0x06	; 6
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	6f 90       	pop	r6
    15c2:	5f 90       	pop	r5
    15c4:	4f 90       	pop	r4
    15c6:	3f 90       	pop	r3
    15c8:	08 95       	ret

000015ca <data_collect>:
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <data_collect+0x16>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <data_collect+0x18>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	5c 01       	movw	r10, r24
    15e8:	8b 01       	movw	r16, r22
    15ea:	35 dd       	rcall	.-1430   	; 0x1056 <get_pressure>
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    15f8:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    15fc:	69 83       	std	Y+1, r22	; 0x01
    15fe:	7a 83       	std	Y+2, r23	; 0x02
    1600:	8b 83       	std	Y+3, r24	; 0x03
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	be 01       	movw	r22, r28
    160a:	6f 5f       	subi	r22, 0xFF	; 255
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	c8 01       	movw	r24, r16
    1610:	db db       	rcall	.-2122   	; 0xdc8 <rb32_write>
    1612:	c8 01       	movw	r24, r16
    1614:	df de       	rcall	.-578    	; 0x13d4 <data_check>
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e2       	ldi	r20, 0x20	; 32
    161c:	51 e4       	ldi	r21, 0x41	; 65
    161e:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    1622:	6b 01       	movw	r12, r22
    1624:	7c 01       	movw	r14, r24
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f eb       	ldi	r21, 0xBF	; 191
    162e:	0e 94 75 18 	call	0x30ea	; 0x30ea <__cmpsf2>
    1632:	88 23       	and	r24, r24
    1634:	81 f1       	breq	.+96     	; 0x1696 <data_collect+0xcc>
    1636:	c0 92 f3 20 	sts	0x20F3, r12	; 0x8020f3 <press>
    163a:	d0 92 f4 20 	sts	0x20F4, r13	; 0x8020f4 <press+0x1>
    163e:	e0 92 f5 20 	sts	0x20F5, r14	; 0x8020f5 <press+0x2>
    1642:	f0 92 f6 20 	sts	0x20F6, r15	; 0x8020f6 <press+0x3>
    1646:	c7 01       	movw	r24, r14
    1648:	b6 01       	movw	r22, r12
    164a:	a8 dd       	rcall	.-1200   	; 0x119c <get_altitude>
    164c:	60 93 eb 20 	sts	0x20EB, r22	; 0x8020eb <alt>
    1650:	70 93 ec 20 	sts	0x20EC, r23	; 0x8020ec <alt+0x1>
    1654:	80 93 ed 20 	sts	0x20ED, r24	; 0x8020ed <alt+0x2>
    1658:	90 93 ee 20 	sts	0x20EE, r25	; 0x8020ee <alt+0x3>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	48 ec       	ldi	r20, 0xC8	; 200
    1662:	52 e4       	ldi	r21, 0x42	; 66
    1664:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1668:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    166c:	6d 83       	std	Y+5, r22	; 0x05
    166e:	7e 83       	std	Y+6, r23	; 0x06
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	be 01       	movw	r22, r28
    1676:	6b 5f       	subi	r22, 0xFB	; 251
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	c5 01       	movw	r24, r10
    167c:	2f db       	rcall	.-2466   	; 0xcdc <rb16_write>
    167e:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    1682:	c5 01       	movw	r24, r10
    1684:	f4 dd       	rcall	.-1048   	; 0x126e <diff>
    1686:	60 93 e3 20 	sts	0x20E3, r22	; 0x8020e3 <velocity>
    168a:	70 93 e4 20 	sts	0x20E4, r23	; 0x8020e4 <velocity+0x1>
    168e:	80 93 e5 20 	sts	0x20E5, r24	; 0x8020e5 <velocity+0x2>
    1692:	90 93 e6 20 	sts	0x20E6, r25	; 0x8020e6 <velocity+0x3>
    1696:	83 e3       	ldi	r24, 0x33	; 51
    1698:	93 e1       	ldi	r25, 0x13	; 19
    169a:	a0 e9       	ldi	r26, 0x90	; 144
    169c:	b3 e4       	ldi	r27, 0x43	; 67
    169e:	80 93 ef 20 	sts	0x20EF, r24	; 0x8020ef <temp>
    16a2:	90 93 f0 20 	sts	0x20F0, r25	; 0x8020f0 <temp+0x1>
    16a6:	a0 93 f1 20 	sts	0x20F1, r26	; 0x8020f1 <temp+0x2>
    16aa:	b0 93 f2 20 	sts	0x20F2, r27	; 0x8020f2 <temp+0x3>
    16ae:	26 96       	adiw	r28, 0x06	; 6
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	df 90       	pop	r13
    16c2:	cf 90       	pop	r12
    16c4:	bf 90       	pop	r11
    16c6:	af 90       	pop	r10
    16c8:	08 95       	ret

000016ca <quaternion2euler>:
    16ca:	4f 92       	push	r4
    16cc:	5f 92       	push	r5
    16ce:	6f 92       	push	r6
    16d0:	7f 92       	push	r7
    16d2:	8f 92       	push	r8
    16d4:	9f 92       	push	r9
    16d6:	af 92       	push	r10
    16d8:	bf 92       	push	r11
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	68 97       	sbiw	r28, 0x18	; 24
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	6d 8b       	std	Y+21, r22	; 0x15
    16f6:	7e 8b       	std	Y+22, r23	; 0x16
    16f8:	8f 8b       	std	Y+23, r24	; 0x17
    16fa:	98 8f       	std	Y+24, r25	; 0x18
    16fc:	2d 83       	std	Y+5, r18	; 0x05
    16fe:	3e 83       	std	Y+6, r19	; 0x06
    1700:	4f 83       	std	Y+7, r20	; 0x07
    1702:	58 87       	std	Y+8, r21	; 0x08
    1704:	e9 86       	std	Y+9, r14	; 0x09
    1706:	fa 86       	std	Y+10, r15	; 0x0a
    1708:	0b 87       	std	Y+11, r16	; 0x0b
    170a:	1c 87       	std	Y+12, r17	; 0x0c
    170c:	a8 01       	movw	r20, r16
    170e:	97 01       	movw	r18, r14
    1710:	c8 01       	movw	r24, r16
    1712:	b7 01       	movw	r22, r14
    1714:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1718:	69 8b       	std	Y+17, r22	; 0x11
    171a:	7a 8b       	std	Y+18, r23	; 0x12
    171c:	8b 8b       	std	Y+19, r24	; 0x13
    171e:	9c 8b       	std	Y+20, r25	; 0x14
    1720:	2d 81       	ldd	r18, Y+5	; 0x05
    1722:	3e 81       	ldd	r19, Y+6	; 0x06
    1724:	4f 81       	ldd	r20, Y+7	; 0x07
    1726:	58 85       	ldd	r21, Y+8	; 0x08
    1728:	ca 01       	movw	r24, r20
    172a:	b9 01       	movw	r22, r18
    172c:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1730:	29 89       	ldd	r18, Y+17	; 0x11
    1732:	3a 89       	ldd	r19, Y+18	; 0x12
    1734:	4b 89       	ldd	r20, Y+19	; 0x13
    1736:	5c 89       	ldd	r21, Y+20	; 0x14
    1738:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1744:	9b 01       	movw	r18, r22
    1746:	ac 01       	movw	r20, r24
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	80 e8       	ldi	r24, 0x80	; 128
    174e:	9f e3       	ldi	r25, 0x3F	; 63
    1750:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    1754:	2b 01       	movw	r4, r22
    1756:	3c 01       	movw	r6, r24
    1758:	2d 81       	ldd	r18, Y+5	; 0x05
    175a:	3e 81       	ldd	r19, Y+6	; 0x06
    175c:	4f 81       	ldd	r20, Y+7	; 0x07
    175e:	58 85       	ldd	r21, Y+8	; 0x08
    1760:	6d 89       	ldd	r22, Y+21	; 0x15
    1762:	7e 89       	ldd	r23, Y+22	; 0x16
    1764:	8f 89       	ldd	r24, Y+23	; 0x17
    1766:	98 8d       	ldd	r25, Y+24	; 0x18
    1768:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    176c:	69 83       	std	Y+1, r22	; 0x01
    176e:	7a 83       	std	Y+2, r23	; 0x02
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	a6 01       	movw	r20, r12
    1776:	95 01       	movw	r18, r10
    1778:	c8 01       	movw	r24, r16
    177a:	b7 01       	movw	r22, r14
    177c:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1780:	9b 01       	movw	r18, r22
    1782:	ac 01       	movw	r20, r24
    1784:	69 81       	ldd	r22, Y+1	; 0x01
    1786:	7a 81       	ldd	r23, Y+2	; 0x02
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1798:	a3 01       	movw	r20, r6
    179a:	92 01       	movw	r18, r4
    179c:	0e 94 22 18 	call	0x3044	; 0x3044 <atan2>
    17a0:	6d 87       	std	Y+13, r22	; 0x0d
    17a2:	7e 87       	std	Y+14, r23	; 0x0e
    17a4:	8f 87       	std	Y+15, r24	; 0x0f
    17a6:	98 8b       	std	Y+16, r25	; 0x10
    17a8:	a8 01       	movw	r20, r16
    17aa:	97 01       	movw	r18, r14
    17ac:	6d 89       	ldd	r22, Y+21	; 0x15
    17ae:	7e 89       	ldd	r23, Y+22	; 0x16
    17b0:	8f 89       	ldd	r24, Y+23	; 0x17
    17b2:	98 8d       	ldd	r25, Y+24	; 0x18
    17b4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    17b8:	2b 01       	movw	r4, r22
    17ba:	3c 01       	movw	r6, r24
    17bc:	a6 01       	movw	r20, r12
    17be:	95 01       	movw	r18, r10
    17c0:	6d 81       	ldd	r22, Y+5	; 0x05
    17c2:	7e 81       	ldd	r23, Y+6	; 0x06
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	98 85       	ldd	r25, Y+8	; 0x08
    17c8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	c3 01       	movw	r24, r6
    17d2:	b2 01       	movw	r22, r4
    17d4:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    17d8:	9b 01       	movw	r18, r22
    17da:	ac 01       	movw	r20, r24
    17dc:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    17e0:	2b 01       	movw	r4, r22
    17e2:	3c 01       	movw	r6, r24
    17e4:	9f 77       	andi	r25, 0x7F	; 127
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 5f 1a 	call	0x34be	; 0x34be <__gesf2>
    17f2:	88 23       	and	r24, r24
    17f4:	5c f0       	brlt	.+22     	; 0x180c <quaternion2euler+0x142>
    17f6:	8b ed       	ldi	r24, 0xDB	; 219
    17f8:	9f e0       	ldi	r25, 0x0F	; 15
    17fa:	a9 ec       	ldi	r26, 0xC9	; 201
    17fc:	bf e3       	ldi	r27, 0x3F	; 63
    17fe:	77 fa       	bst	r7, 7
    1800:	b7 f9       	bld	r27, 7
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	ab 83       	std	Y+3, r26	; 0x03
    1808:	bc 83       	std	Y+4, r27	; 0x04
    180a:	08 c0       	rjmp	.+16     	; 0x181c <quaternion2euler+0x152>
    180c:	c3 01       	movw	r24, r6
    180e:	b2 01       	movw	r22, r4
    1810:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <asin>
    1814:	69 83       	std	Y+1, r22	; 0x01
    1816:	7a 83       	std	Y+2, r23	; 0x02
    1818:	8b 83       	std	Y+3, r24	; 0x03
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	a6 01       	movw	r20, r12
    181e:	95 01       	movw	r18, r10
    1820:	c6 01       	movw	r24, r12
    1822:	b5 01       	movw	r22, r10
    1824:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1828:	29 89       	ldd	r18, Y+17	; 0x11
    182a:	3a 89       	ldd	r19, Y+18	; 0x12
    182c:	4b 89       	ldd	r20, Y+19	; 0x13
    182e:	5c 89       	ldd	r21, Y+20	; 0x14
    1830:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1834:	9b 01       	movw	r18, r22
    1836:	ac 01       	movw	r20, r24
    1838:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    183c:	9b 01       	movw	r18, r22
    183e:	ac 01       	movw	r20, r24
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	80 e8       	ldi	r24, 0x80	; 128
    1846:	9f e3       	ldi	r25, 0x3F	; 63
    1848:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    184c:	69 8b       	std	Y+17, r22	; 0x11
    184e:	7a 8b       	std	Y+18, r23	; 0x12
    1850:	8b 8b       	std	Y+19, r24	; 0x13
    1852:	9c 8b       	std	Y+20, r25	; 0x14
    1854:	a6 01       	movw	r20, r12
    1856:	95 01       	movw	r18, r10
    1858:	6d 89       	ldd	r22, Y+21	; 0x15
    185a:	7e 89       	ldd	r23, Y+22	; 0x16
    185c:	8f 89       	ldd	r24, Y+23	; 0x17
    185e:	98 8d       	ldd	r25, Y+24	; 0x18
    1860:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1864:	2b 01       	movw	r4, r22
    1866:	3c 01       	movw	r6, r24
    1868:	29 85       	ldd	r18, Y+9	; 0x09
    186a:	3a 85       	ldd	r19, Y+10	; 0x0a
    186c:	4b 85       	ldd	r20, Y+11	; 0x0b
    186e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1870:	6d 81       	ldd	r22, Y+5	; 0x05
    1872:	7e 81       	ldd	r23, Y+6	; 0x06
    1874:	8f 81       	ldd	r24, Y+7	; 0x07
    1876:	98 85       	ldd	r25, Y+8	; 0x08
    1878:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	c3 01       	movw	r24, r6
    1882:	b2 01       	movw	r22, r4
    1884:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1890:	29 89       	ldd	r18, Y+17	; 0x11
    1892:	3a 89       	ldd	r19, Y+18	; 0x12
    1894:	4b 89       	ldd	r20, Y+19	; 0x13
    1896:	5c 89       	ldd	r21, Y+20	; 0x14
    1898:	0e 94 22 18 	call	0x3044	; 0x3044 <atan2>
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	44 e3       	ldi	r20, 0x34	; 52
    18a2:	53 e4       	ldi	r21, 0x43	; 67
    18a4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    18a8:	2b ed       	ldi	r18, 0xDB	; 219
    18aa:	3f e0       	ldi	r19, 0x0F	; 15
    18ac:	49 e4       	ldi	r20, 0x49	; 73
    18ae:	50 e4       	ldi	r21, 0x40	; 64
    18b0:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    18b4:	60 93 c9 20 	sts	0x20C9, r22	; 0x8020c9 <roll>
    18b8:	70 93 ca 20 	sts	0x20CA, r23	; 0x8020ca <roll+0x1>
    18bc:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <roll+0x2>
    18c0:	90 93 cc 20 	sts	0x20CC, r25	; 0x8020cc <roll+0x3>
    18c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    18c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    18c8:	4f 85       	ldd	r20, Y+15	; 0x0f
    18ca:	58 89       	ldd	r21, Y+16	; 0x10
    18cc:	ca 01       	movw	r24, r20
    18ce:	b9 01       	movw	r22, r18
    18d0:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    18d4:	4b 01       	movw	r8, r22
    18d6:	5c 01       	movw	r10, r24
    18d8:	29 81       	ldd	r18, Y+1	; 0x01
    18da:	3a 81       	ldd	r19, Y+2	; 0x02
    18dc:	4b 81       	ldd	r20, Y+3	; 0x03
    18de:	5c 81       	ldd	r21, Y+4	; 0x04
    18e0:	ca 01       	movw	r24, r20
    18e2:	b9 01       	movw	r22, r18
    18e4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    18e8:	9b 01       	movw	r18, r22
    18ea:	ac 01       	movw	r20, r24
    18ec:	c5 01       	movw	r24, r10
    18ee:	b4 01       	movw	r22, r8
    18f0:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    18f4:	0e 94 1d 1b 	call	0x363a	; 0x363a <sqrt>
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	44 e3       	ldi	r20, 0x34	; 52
    18fe:	53 e4       	ldi	r21, 0x43	; 67
    1900:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1904:	2b ed       	ldi	r18, 0xDB	; 219
    1906:	3f e0       	ldi	r19, 0x0F	; 15
    1908:	49 e4       	ldi	r20, 0x49	; 73
    190a:	50 e4       	ldi	r21, 0x40	; 64
    190c:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    1910:	60 93 cd 20 	sts	0x20CD, r22	; 0x8020cd <pitch>
    1914:	70 93 ce 20 	sts	0x20CE, r23	; 0x8020ce <pitch+0x1>
    1918:	80 93 cf 20 	sts	0x20CF, r24	; 0x8020cf <pitch+0x2>
    191c:	90 93 d0 20 	sts	0x20D0, r25	; 0x8020d0 <pitch+0x3>
    1920:	68 96       	adiw	r28, 0x18	; 24
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	bf 90       	pop	r11
    1938:	af 90       	pop	r10
    193a:	9f 90       	pop	r9
    193c:	8f 90       	pop	r8
    193e:	7f 90       	pop	r7
    1940:	6f 90       	pop	r6
    1942:	5f 90       	pop	r5
    1944:	4f 90       	pop	r4
    1946:	08 95       	ret

00001948 <state_check>:
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	c0 90 e3 20 	lds	r12, 0x20E3	; 0x8020e3 <velocity>
    1954:	d0 90 e4 20 	lds	r13, 0x20E4	; 0x8020e4 <velocity+0x1>
    1958:	e0 90 e5 20 	lds	r14, 0x20E5	; 0x8020e5 <velocity+0x2>
    195c:	f0 90 e6 20 	lds	r15, 0x20E6	; 0x8020e6 <velocity+0x3>
    1960:	c7 01       	movw	r24, r14
    1962:	b6 01       	movw	r22, r12
    1964:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1968:	9b 01       	movw	r18, r22
    196a:	77 23       	and	r23, r23
    196c:	24 f4       	brge	.+8      	; 0x1976 <state_check+0x2e>
    196e:	22 27       	eor	r18, r18
    1970:	33 27       	eor	r19, r19
    1972:	26 1b       	sub	r18, r22
    1974:	37 0b       	sbc	r19, r23
    1976:	26 30       	cpi	r18, 0x06	; 6
    1978:	31 05       	cpc	r19, r1
    197a:	8c f0       	brlt	.+34     	; 0x199e <state_check+0x56>
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	a9 01       	movw	r20, r18
    1982:	c7 01       	movw	r24, r14
    1984:	b6 01       	movw	r22, r12
    1986:	0e 94 75 18 	call	0x30ea	; 0x30ea <__cmpsf2>
    198a:	88 23       	and	r24, r24
    198c:	24 f0       	brlt	.+8      	; 0x1996 <state_check+0x4e>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <state>
    1994:	24 c0       	rjmp	.+72     	; 0x19de <state_check+0x96>
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <state>
    199c:	20 c0       	rjmp	.+64     	; 0x19de <state_check+0x96>
    199e:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <state>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	48 e4       	ldi	r20, 0x48	; 72
    19a8:	52 e4       	ldi	r21, 0x42	; 66
    19aa:	60 91 eb 20 	lds	r22, 0x20EB	; 0x8020eb <alt>
    19ae:	70 91 ec 20 	lds	r23, 0x20EC	; 0x8020ec <alt+0x1>
    19b2:	80 91 ed 20 	lds	r24, 0x20ED	; 0x8020ed <alt+0x2>
    19b6:	90 91 ee 20 	lds	r25, 0x20EE	; 0x8020ee <alt+0x3>
    19ba:	0e 94 5f 1a 	call	0x34be	; 0x34be <__gesf2>
    19be:	18 16       	cp	r1, r24
    19c0:	24 f0       	brlt	.+8      	; 0x19ca <state_check+0x82>
    19c2:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <reset_received>
    19c6:	88 23       	and	r24, r24
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <state_check+0x88>
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <state>
    19d0:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <released>
    19d4:	88 23       	and	r24, r24
    19d6:	19 f0       	breq	.+6      	; 0x19de <state_check+0x96>
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <state>
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	08 95       	ret

000019e8 <release_servo_init>:
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	84 e0       	ldi	r24, 0x04	; 4
    19ec:	b2 da       	rcall	.-2716   	; 0xf52 <sysclk_enable_module>
    19ee:	64 e0       	ldi	r22, 0x04	; 4
    19f0:	84 e0       	ldi	r24, 0x04	; 4
    19f2:	af da       	rcall	.-2722   	; 0xf52 <sysclk_enable_module>
    19f4:	e0 e6       	ldi	r30, 0x60	; 96
    19f6:	f6 e0       	ldi	r31, 0x06	; 6
    19f8:	80 81       	ld	r24, Z
    19fa:	81 60       	ori	r24, 0x01	; 1
    19fc:	80 83       	st	Z, r24
    19fe:	e0 e0       	ldi	r30, 0x00	; 0
    1a00:	f9 e0       	ldi	r31, 0x09	; 9
    1a02:	85 e0       	ldi	r24, 0x05	; 5
    1a04:	80 83       	st	Z, r24
    1a06:	83 e1       	ldi	r24, 0x13	; 19
    1a08:	81 83       	std	Z+1, r24	; 0x01
    1a0a:	80 e1       	ldi	r24, 0x10	; 16
    1a0c:	97 e2       	ldi	r25, 0x27	; 39
    1a0e:	86 a3       	std	Z+38, r24	; 0x26
    1a10:	97 a3       	std	Z+39, r25	; 0x27
    1a12:	8e ee       	ldi	r24, 0xEE	; 238
    1a14:	92 e0       	ldi	r25, 0x02	; 2
    1a16:	80 a7       	std	Z+40, r24	; 0x28
    1a18:	91 a7       	std	Z+41, r25	; 0x29
    1a1a:	08 95       	ret

00001a1c <servo_pid>:
    1a1c:	8f 92       	push	r8
    1a1e:	9f 92       	push	r9
    1a20:	af 92       	push	r10
    1a22:	bf 92       	push	r11
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	7c 01       	movw	r14, r24
    1a36:	c0 e0       	ldi	r28, 0x00	; 0
    1a38:	d0 e0       	ldi	r29, 0x00	; 0
    1a3a:	00 e0       	ldi	r16, 0x00	; 0
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
    1a3e:	be 01       	movw	r22, r28
    1a40:	c7 01       	movw	r24, r14
    1a42:	95 d9       	rcall	.-3286   	; 0xd6e <rb16_get_nth>
    1a44:	08 0f       	add	r16, r24
    1a46:	19 1f       	adc	r17, r25
    1a48:	21 96       	adiw	r28, 0x01	; 1
    1a4a:	ca 30       	cpi	r28, 0x0A	; 10
    1a4c:	d1 05       	cpc	r29, r1
    1a4e:	b9 f7       	brne	.-18     	; 0x1a3e <servo_pid+0x22>
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	c7 01       	movw	r24, r14
    1a56:	8b d9       	rcall	.-3306   	; 0xd6e <rb16_get_nth>
    1a58:	ec 01       	movw	r28, r24
    1a5a:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    1a5e:	c7 01       	movw	r24, r14
    1a60:	06 dc       	rcall	.-2036   	; 0x126e <diff>
    1a62:	6b 01       	movw	r12, r22
    1a64:	7c 01       	movw	r14, r24
    1a66:	be 01       	movw	r22, r28
    1a68:	dd 0f       	add	r29, r29
    1a6a:	88 0b       	sbc	r24, r24
    1a6c:	99 0b       	sbc	r25, r25
    1a6e:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatsisf>
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	a9 01       	movw	r20, r18
    1a78:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	48 ec       	ldi	r20, 0xC8	; 200
    1a82:	52 e4       	ldi	r21, 0x42	; 66
    1a84:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    1a88:	4b 01       	movw	r8, r22
    1a8a:	5c 01       	movw	r10, r24
    1a8c:	b8 01       	movw	r22, r16
    1a8e:	11 0f       	add	r17, r17
    1a90:	88 0b       	sbc	r24, r24
    1a92:	99 0b       	sbc	r25, r25
    1a94:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatsisf>
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	a9 01       	movw	r20, r18
    1a9e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	48 ec       	ldi	r20, 0xC8	; 200
    1aa8:	52 e4       	ldi	r21, 0x42	; 66
    1aaa:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    1aae:	9b 01       	movw	r18, r22
    1ab0:	ac 01       	movw	r20, r24
    1ab2:	c5 01       	movw	r24, r10
    1ab4:	b4 01       	movw	r22, r8
    1ab6:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1aba:	4b 01       	movw	r8, r22
    1abc:	5c 01       	movw	r10, r24
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	c7 01       	movw	r24, r14
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	c5 01       	movw	r24, r10
    1ad2:	b4 01       	movw	r22, r8
    1ad4:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e8       	ldi	r19, 0x80	; 128
    1adc:	4b eb       	ldi	r20, 0xBB	; 187
    1ade:	54 e4       	ldi	r21, 0x44	; 68
    1ae0:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__addsf3>
    1ae4:	0e 94 20 19 	call	0x3240	; 0x3240 <__fixunssfsi>
    1ae8:	60 93 1b 20 	sts	0x201B, r22	; 0x80201b <servo_pulse>
    1aec:	70 93 1c 20 	sts	0x201C, r23	; 0x80201c <servo_pulse+0x1>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 4c 19 	call	0x3298	; 0x3298 <__floatunsisf>
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4a e7       	ldi	r20, 0x7A	; 122
    1afe:	54 e4       	ldi	r21, 0x44	; 68
    1b00:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__divsf3>
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a ef       	ldi	r20, 0xFA	; 250
    1b0a:	53 e4       	ldi	r21, 0x43	; 67
    1b0c:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1b10:	0e 94 20 19 	call	0x3240	; 0x3240 <__fixunssfsi>
    1b14:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1b18:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	08 95       	ret

00001b36 <clock_init>:
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	85 e0       	ldi	r24, 0x05	; 5
    1b3a:	0b da       	rcall	.-3050   	; 0xf52 <sysclk_enable_module>
    1b3c:	e0 e0       	ldi	r30, 0x00	; 0
    1b3e:	fa e0       	ldi	r31, 0x0A	; 10
    1b40:	87 e0       	ldi	r24, 0x07	; 7
    1b42:	80 83       	st	Z, r24
    1b44:	81 e1       	ldi	r24, 0x11	; 17
    1b46:	9a e7       	ldi	r25, 0x7A	; 122
    1b48:	86 a3       	std	Z+38, r24	; 0x26
    1b4a:	97 a3       	std	Z+39, r25	; 0x27
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	86 83       	std	Z+6, r24	; 0x06
    1b50:	08 95       	ret

00001b52 <cali_alt>:
    1b52:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <press>
    1b56:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <press+0x1>
    1b5a:	a0 91 f5 20 	lds	r26, 0x20F5	; 0x8020f5 <press+0x2>
    1b5e:	b0 91 f6 20 	lds	r27, 0x20F6	; 0x8020f6 <press+0x3>
    1b62:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p>
    1b66:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x1>
    1b6a:	a0 93 2f 20 	sts	0x202F, r26	; 0x80202f <ground_p+0x2>
    1b6e:	b0 93 30 20 	sts	0x2030, r27	; 0x802030 <ground_p+0x3>
    1b72:	83 e3       	ldi	r24, 0x33	; 51
    1b74:	93 e1       	ldi	r25, 0x13	; 19
    1b76:	a0 e9       	ldi	r26, 0x90	; 144
    1b78:	b3 e4       	ldi	r27, 0x43	; 67
    1b7a:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <ground_t>
    1b7e:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <ground_t+0x1>
    1b82:	a0 93 2b 20 	sts	0x202B, r26	; 0x80202b <ground_t+0x2>
    1b86:	b0 93 2c 20 	sts	0x202C, r27	; 0x80202c <ground_t+0x3>
    1b8a:	08 95       	ret

00001b8c <send_gps>:
    1b8c:	8f 92       	push	r8
    1b8e:	9f 92       	push	r9
    1b90:	af 92       	push	r10
    1b92:	bf 92       	push	r11
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	c6 54       	subi	r28, 0x46	; 70
    1baa:	d1 09       	sbc	r29, r1
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	60 91 d7 20 	lds	r22, 0x20D7	; 0x8020d7 <gps_long>
    1bb4:	70 91 d8 20 	lds	r23, 0x20D8	; 0x8020d8 <gps_long+0x1>
    1bb8:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <gps_long+0x2>
    1bbc:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <gps_long+0x3>
    1bc0:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1bc4:	16 2f       	mov	r17, r22
    1bc6:	07 2f       	mov	r16, r23
    1bc8:	c0 90 db 20 	lds	r12, 0x20DB	; 0x8020db <gps_lat>
    1bcc:	d0 90 dc 20 	lds	r13, 0x20DC	; 0x8020dc <gps_lat+0x1>
    1bd0:	e0 90 dd 20 	lds	r14, 0x20DD	; 0x8020dd <gps_lat+0x2>
    1bd4:	f0 90 de 20 	lds	r15, 0x20DE	; 0x8020de <gps_lat+0x3>
    1bd8:	a6 2f       	mov	r26, r22
    1bda:	b7 2f       	mov	r27, r23
    1bdc:	bb 23       	and	r27, r27
    1bde:	1c f4       	brge	.+6      	; 0x1be6 <send_gps+0x5a>
    1be0:	b1 95       	neg	r27
    1be2:	a1 95       	neg	r26
    1be4:	b1 09       	sbc	r27, r1
    1be6:	20 e4       	ldi	r18, 0x40	; 64
    1be8:	32 e4       	ldi	r19, 0x42	; 66
    1bea:	4f e0       	ldi	r20, 0x0F	; 15
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__mulshisi3>
    1bf2:	0f 2e       	mov	r0, r31
    1bf4:	f0 e4       	ldi	r31, 0x40	; 64
    1bf6:	8f 2e       	mov	r8, r31
    1bf8:	f2 e4       	ldi	r31, 0x42	; 66
    1bfa:	9f 2e       	mov	r9, r31
    1bfc:	ff e0       	ldi	r31, 0x0F	; 15
    1bfe:	af 2e       	mov	r10, r31
    1c00:	b1 2c       	mov	r11, r1
    1c02:	f0 2d       	mov	r31, r0
    1c04:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    1c08:	9f 93       	push	r25
    1c0a:	8f 93       	push	r24
    1c0c:	7f 93       	push	r23
    1c0e:	6f 93       	push	r22
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	34 e2       	ldi	r19, 0x24	; 36
    1c18:	44 e7       	ldi	r20, 0x74	; 116
    1c1a:	59 e4       	ldi	r21, 0x49	; 73
    1c1c:	c7 01       	movw	r24, r14
    1c1e:	b6 01       	movw	r22, r12
    1c20:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1c24:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1c28:	a5 01       	movw	r20, r10
    1c2a:	94 01       	movw	r18, r8
    1c2c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    1c30:	9f 93       	push	r25
    1c32:	8f 93       	push	r24
    1c34:	7f 93       	push	r23
    1c36:	6f 93       	push	r22
    1c38:	c7 01       	movw	r24, r14
    1c3a:	b6 01       	movw	r22, r12
    1c3c:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1c40:	7f 93       	push	r23
    1c42:	6f 93       	push	r22
    1c44:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <gps_msg+0x1>
    1c48:	8f 93       	push	r24
    1c4a:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <gps_msg>
    1c4e:	8f 93       	push	r24
    1c50:	8e 01       	movw	r16, r28
    1c52:	0f 5f       	subi	r16, 0xFF	; 255
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	1f 93       	push	r17
    1c58:	0f 93       	push	r16
    1c5a:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <sprintf>
    1c5e:	1f 93       	push	r17
    1c60:	0f 93       	push	r16
    1c62:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <printf>
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	ca 5b       	subi	r28, 0xBA	; 186
    1c6c:	df 4f       	sbci	r29, 0xFF	; 255
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	df 90       	pop	r13
    1c80:	cf 90       	pop	r12
    1c82:	bf 90       	pop	r11
    1c84:	af 90       	pop	r10
    1c86:	9f 90       	pop	r9
    1c88:	8f 90       	pop	r8
    1c8a:	08 95       	ret

00001c8c <packet>:
    1c8c:	4f 92       	push	r4
    1c8e:	5f 92       	push	r5
    1c90:	6f 92       	push	r6
    1c92:	7f 92       	push	r7
    1c94:	8f 92       	push	r8
    1c96:	9f 92       	push	r9
    1c98:	af 92       	push	r10
    1c9a:	bf 92       	push	r11
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	c0 91 f7 20 	lds	r28, 0x20F7	; 0x8020f7 <packets>
    1cb0:	d0 91 f8 20 	lds	r29, 0x20F8	; 0x8020f8 <packets+0x1>
    1cb4:	21 96       	adiw	r28, 0x01	; 1
    1cb6:	c0 93 f7 20 	sts	0x20F7, r28	; 0x8020f7 <packets>
    1cba:	d0 93 f8 20 	sts	0x20F8, r29	; 0x8020f8 <packets+0x1>
    1cbe:	60 91 d3 20 	lds	r22, 0x20D3	; 0x8020d3 <gps_alt>
    1cc2:	70 91 d4 20 	lds	r23, 0x20D4	; 0x8020d4 <gps_alt+0x1>
    1cc6:	80 91 d5 20 	lds	r24, 0x20D5	; 0x8020d5 <gps_alt+0x2>
    1cca:	90 91 d6 20 	lds	r25, 0x20D6	; 0x8020d6 <gps_alt+0x3>
    1cce:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1cd2:	16 2f       	mov	r17, r22
    1cd4:	07 2f       	mov	r16, r23
    1cd6:	40 90 d7 20 	lds	r4, 0x20D7	; 0x8020d7 <gps_long>
    1cda:	50 90 d8 20 	lds	r5, 0x20D8	; 0x8020d8 <gps_long+0x1>
    1cde:	60 90 d9 20 	lds	r6, 0x20D9	; 0x8020d9 <gps_long+0x2>
    1ce2:	70 90 da 20 	lds	r7, 0x20DA	; 0x8020da <gps_long+0x3>
    1ce6:	80 90 db 20 	lds	r8, 0x20DB	; 0x8020db <gps_lat>
    1cea:	90 90 dc 20 	lds	r9, 0x20DC	; 0x8020dc <gps_lat+0x1>
    1cee:	a0 90 dd 20 	lds	r10, 0x20DD	; 0x8020dd <gps_lat+0x2>
    1cf2:	b0 90 de 20 	lds	r11, 0x20DE	; 0x8020de <gps_lat+0x3>
    1cf6:	60 91 df 20 	lds	r22, 0x20DF	; 0x8020df <gps_t>
    1cfa:	70 91 e0 20 	lds	r23, 0x20E0	; 0x8020e0 <gps_t+0x1>
    1cfe:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <gps_t+0x2>
    1d02:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <gps_t+0x3>
    1d06:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1d0a:	6b 01       	movw	r12, r22
    1d0c:	7c 01       	movw	r14, r24
    1d0e:	60 91 c1 20 	lds	r22, 0x20C1	; 0x8020c1 <angle>
    1d12:	70 91 c2 20 	lds	r23, 0x20C2	; 0x8020c2 <angle+0x1>
    1d16:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <angle+0x2>
    1d1a:	90 91 c4 20 	lds	r25, 0x20C4	; 0x8020c4 <angle+0x3>
    1d1e:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1d22:	7f 93       	push	r23
    1d24:	6f 93       	push	r22
    1d26:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <state>
    1d2a:	1f 92       	push	r1
    1d2c:	8f 93       	push	r24
    1d2e:	60 91 c5 20 	lds	r22, 0x20C5	; 0x8020c5 <rpm>
    1d32:	70 91 c6 20 	lds	r23, 0x20C6	; 0x8020c6 <rpm+0x1>
    1d36:	80 91 c7 20 	lds	r24, 0x20C7	; 0x8020c7 <rpm+0x2>
    1d3a:	90 91 c8 20 	lds	r25, 0x20C8	; 0x8020c8 <rpm+0x3>
    1d3e:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1d42:	7f 93       	push	r23
    1d44:	6f 93       	push	r22
    1d46:	60 91 c9 20 	lds	r22, 0x20C9	; 0x8020c9 <roll>
    1d4a:	70 91 ca 20 	lds	r23, 0x20CA	; 0x8020ca <roll+0x1>
    1d4e:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <roll+0x2>
    1d52:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <roll+0x3>
    1d56:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1d5a:	7f 93       	push	r23
    1d5c:	6f 93       	push	r22
    1d5e:	60 91 cd 20 	lds	r22, 0x20CD	; 0x8020cd <pitch>
    1d62:	70 91 ce 20 	lds	r23, 0x20CE	; 0x8020ce <pitch+0x1>
    1d66:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <pitch+0x2>
    1d6a:	90 91 d0 20 	lds	r25, 0x20D0	; 0x8020d0 <pitch+0x3>
    1d6e:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1d72:	7f 93       	push	r23
    1d74:	6f 93       	push	r22
    1d76:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <gps_sats+0x1>
    1d7a:	8f 93       	push	r24
    1d7c:	80 91 d1 20 	lds	r24, 0x20D1	; 0x8020d1 <gps_sats>
    1d80:	8f 93       	push	r24
    1d82:	81 2f       	mov	r24, r17
    1d84:	90 2f       	mov	r25, r16
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	22 0f       	add	r18, r18
    1d8e:	33 1f       	adc	r19, r19
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	82 0f       	add	r24, r18
    1d96:	93 1f       	adc	r25, r19
    1d98:	6a e0       	ldi	r22, 0x0A	; 10
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__divmodhi4>
    1da0:	9f 93       	push	r25
    1da2:	8f 93       	push	r24
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	34 e2       	ldi	r19, 0x24	; 36
    1dac:	44 e7       	ldi	r20, 0x74	; 116
    1dae:	59 e4       	ldi	r21, 0x49	; 73
    1db0:	c3 01       	movw	r24, r6
    1db2:	b2 01       	movw	r22, r4
    1db4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1db8:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1dbc:	20 e4       	ldi	r18, 0x40	; 64
    1dbe:	32 e4       	ldi	r19, 0x42	; 66
    1dc0:	4f e0       	ldi	r20, 0x0F	; 15
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    1dc8:	9b 01       	movw	r18, r22
    1dca:	77 23       	and	r23, r23
    1dcc:	24 f4       	brge	.+8      	; 0x1dd6 <packet+0x14a>
    1dce:	22 27       	eor	r18, r18
    1dd0:	33 27       	eor	r19, r19
    1dd2:	26 1b       	sub	r18, r22
    1dd4:	37 0b       	sbc	r19, r23
    1dd6:	c9 01       	movw	r24, r18
    1dd8:	33 0f       	add	r19, r19
    1dda:	aa 0b       	sbc	r26, r26
    1ddc:	bb 0b       	sbc	r27, r27
    1dde:	bf 93       	push	r27
    1de0:	af 93       	push	r26
    1de2:	9f 93       	push	r25
    1de4:	8f 93       	push	r24
    1de6:	c3 01       	movw	r24, r6
    1de8:	b2 01       	movw	r22, r4
    1dea:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1dee:	7f 93       	push	r23
    1df0:	6f 93       	push	r22
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	34 e2       	ldi	r19, 0x24	; 36
    1df6:	44 e7       	ldi	r20, 0x74	; 116
    1df8:	59 e4       	ldi	r21, 0x49	; 73
    1dfa:	c5 01       	movw	r24, r10
    1dfc:	b4 01       	movw	r22, r8
    1dfe:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    1e02:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1e06:	20 e4       	ldi	r18, 0x40	; 64
    1e08:	32 e4       	ldi	r19, 0x42	; 66
    1e0a:	4f e0       	ldi	r20, 0x0F	; 15
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    1e12:	9f 93       	push	r25
    1e14:	8f 93       	push	r24
    1e16:	7f 93       	push	r23
    1e18:	6f 93       	push	r22
    1e1a:	c5 01       	movw	r24, r10
    1e1c:	b4 01       	movw	r22, r8
    1e1e:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1e22:	7f 93       	push	r23
    1e24:	6f 93       	push	r22
    1e26:	0f 2e       	mov	r0, r31
    1e28:	f4 e6       	ldi	r31, 0x64	; 100
    1e2a:	8f 2e       	mov	r8, r31
    1e2c:	91 2c       	mov	r9, r1
    1e2e:	a1 2c       	mov	r10, r1
    1e30:	b1 2c       	mov	r11, r1
    1e32:	f0 2d       	mov	r31, r0
    1e34:	c7 01       	movw	r24, r14
    1e36:	b6 01       	movw	r22, r12
    1e38:	a5 01       	movw	r20, r10
    1e3a:	94 01       	movw	r18, r8
    1e3c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    1e40:	7f 93       	push	r23
    1e42:	6f 93       	push	r22
    1e44:	c7 01       	movw	r24, r14
    1e46:	b6 01       	movw	r22, r12
    1e48:	20 e1       	ldi	r18, 0x10	; 16
    1e4a:	37 e2       	ldi	r19, 0x27	; 39
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    1e54:	12 2f       	mov	r17, r18
    1e56:	03 2f       	mov	r16, r19
    1e58:	a5 01       	movw	r20, r10
    1e5a:	94 01       	movw	r18, r8
    1e5c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    1e60:	3f 93       	push	r19
    1e62:	2f 93       	push	r18
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	60 91 e7 20 	lds	r22, 0x20E7	; 0x8020e7 <volt>
    1e6c:	70 91 e8 20 	lds	r23, 0x20E8	; 0x8020e8 <volt+0x1>
    1e70:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <volt+0x2>
    1e74:	90 91 ea 20 	lds	r25, 0x20EA	; 0x8020ea <volt+0x3>
    1e78:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1e7c:	7f 93       	push	r23
    1e7e:	6f 93       	push	r22
    1e80:	23 e3       	ldi	r18, 0x33	; 51
    1e82:	33 e9       	ldi	r19, 0x93	; 147
    1e84:	48 e8       	ldi	r20, 0x88	; 136
    1e86:	53 e4       	ldi	r21, 0x43	; 67
    1e88:	60 91 ef 20 	lds	r22, 0x20EF	; 0x8020ef <temp>
    1e8c:	70 91 f0 20 	lds	r23, 0x20F0	; 0x8020f0 <temp+0x1>
    1e90:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <temp+0x2>
    1e94:	90 91 f2 20 	lds	r25, 0x20F2	; 0x8020f2 <temp+0x3>
    1e98:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__subsf3>
    1e9c:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1ea0:	7f 93       	push	r23
    1ea2:	6f 93       	push	r22
    1ea4:	60 91 f3 20 	lds	r22, 0x20F3	; 0x8020f3 <press>
    1ea8:	70 91 f4 20 	lds	r23, 0x20F4	; 0x8020f4 <press+0x1>
    1eac:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <press+0x2>
    1eb0:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <press+0x3>
    1eb4:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1eb8:	9f 93       	push	r25
    1eba:	8f 93       	push	r24
    1ebc:	7f 93       	push	r23
    1ebe:	6f 93       	push	r22
    1ec0:	60 91 eb 20 	lds	r22, 0x20EB	; 0x8020eb <alt>
    1ec4:	70 91 ec 20 	lds	r23, 0x20EC	; 0x8020ec <alt+0x1>
    1ec8:	80 91 ed 20 	lds	r24, 0x20ED	; 0x8020ed <alt+0x2>
    1ecc:	90 91 ee 20 	lds	r25, 0x20EE	; 0x8020ee <alt+0x3>
    1ed0:	0e 94 1b 19 	call	0x3236	; 0x3236 <__fixsfsi>
    1ed4:	7f 93       	push	r23
    1ed6:	6f 93       	push	r22
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	80 91 fc 20 	lds	r24, 0x20FC	; 0x8020fc <timer+0x1>
    1ee0:	8f 93       	push	r24
    1ee2:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <timer>
    1ee6:	8f 93       	push	r24
    1ee8:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    1eec:	8f 93       	push	r24
    1eee:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    1ef2:	8f 93       	push	r24
    1ef4:	c1 e3       	ldi	r28, 0x31	; 49
    1ef6:	d1 e2       	ldi	r29, 0x21	; 33
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <sprintf>
    1f00:	8d b7       	in	r24, 0x3d	; 61
    1f02:	9e b7       	in	r25, 0x3e	; 62
    1f04:	c4 96       	adiw	r24, 0x34	; 52
    1f06:	8d bf       	out	0x3d, r24	; 61
    1f08:	9e bf       	out	0x3e, r25	; 62
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <printf>
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	df 90       	pop	r13
    1f24:	cf 90       	pop	r12
    1f26:	bf 90       	pop	r11
    1f28:	af 90       	pop	r10
    1f2a:	9f 90       	pop	r9
    1f2c:	8f 90       	pop	r8
    1f2e:	7f 90       	pop	r7
    1f30:	6f 90       	pop	r6
    1f32:	5f 90       	pop	r5
    1f34:	4f 90       	pop	r4
    1f36:	08 95       	ret

00001f38 <eeprom_write_const>:
    1f38:	5f 92       	push	r5
    1f3a:	6f 92       	push	r6
    1f3c:	7f 92       	push	r7
    1f3e:	8f 92       	push	r8
    1f40:	9f 92       	push	r9
    1f42:	af 92       	push	r10
    1f44:	bf 92       	push	r11
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	a0 97       	sbiw	r28, 0x20	; 32
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    1f64:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    1f68:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    1f6c:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    1f70:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__fixunssfdi>
    1f74:	12 2f       	mov	r17, r18
    1f76:	63 2e       	mov	r6, r19
    1f78:	74 2e       	mov	r7, r20
    1f7a:	85 2e       	mov	r8, r21
    1f7c:	96 2e       	mov	r9, r22
    1f7e:	a7 2e       	mov	r10, r23
    1f80:	b8 2e       	mov	r11, r24
    1f82:	c9 2e       	mov	r12, r25
    1f84:	60 91 29 20 	lds	r22, 0x2029	; 0x802029 <ground_t>
    1f88:	70 91 2a 20 	lds	r23, 0x202A	; 0x80202a <ground_t+0x1>
    1f8c:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <ground_t+0x2>
    1f90:	90 91 2c 20 	lds	r25, 0x202C	; 0x80202c <ground_t+0x3>
    1f94:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__fixunssfdi>
    1f98:	e2 2f       	mov	r30, r18
    1f9a:	53 2e       	mov	r5, r19
    1f9c:	d4 2e       	mov	r13, r20
    1f9e:	e5 2e       	mov	r14, r21
    1fa0:	f6 2e       	mov	r15, r22
    1fa2:	b7 2f       	mov	r27, r23
    1fa4:	a8 2f       	mov	r26, r24
    1fa6:	f9 2f       	mov	r31, r25
    1fa8:	19 83       	std	Y+1, r17	; 0x01
    1faa:	21 2f       	mov	r18, r17
    1fac:	36 2d       	mov	r19, r6
    1fae:	47 2d       	mov	r20, r7
    1fb0:	58 2d       	mov	r21, r8
    1fb2:	69 2d       	mov	r22, r9
    1fb4:	7a 2d       	mov	r23, r10
    1fb6:	8b 2d       	mov	r24, r11
    1fb8:	9c 2d       	mov	r25, r12
    1fba:	08 e0       	ldi	r16, 0x08	; 8
    1fbc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    1fc0:	2a 83       	std	Y+2, r18	; 0x02
    1fc2:	21 2f       	mov	r18, r17
    1fc4:	36 2d       	mov	r19, r6
    1fc6:	47 2d       	mov	r20, r7
    1fc8:	58 2d       	mov	r21, r8
    1fca:	69 2d       	mov	r22, r9
    1fcc:	7a 2d       	mov	r23, r10
    1fce:	8b 2d       	mov	r24, r11
    1fd0:	9c 2d       	mov	r25, r12
    1fd2:	00 e1       	ldi	r16, 0x10	; 16
    1fd4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    1fd8:	2b 83       	std	Y+3, r18	; 0x03
    1fda:	21 2f       	mov	r18, r17
    1fdc:	36 2d       	mov	r19, r6
    1fde:	47 2d       	mov	r20, r7
    1fe0:	58 2d       	mov	r21, r8
    1fe2:	69 2d       	mov	r22, r9
    1fe4:	7a 2d       	mov	r23, r10
    1fe6:	8b 2d       	mov	r24, r11
    1fe8:	9c 2d       	mov	r25, r12
    1fea:	08 e1       	ldi	r16, 0x18	; 24
    1fec:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    1ff0:	2c 83       	std	Y+4, r18	; 0x04
    1ff2:	21 2f       	mov	r18, r17
    1ff4:	36 2d       	mov	r19, r6
    1ff6:	47 2d       	mov	r20, r7
    1ff8:	58 2d       	mov	r21, r8
    1ffa:	69 2d       	mov	r22, r9
    1ffc:	7a 2d       	mov	r23, r10
    1ffe:	8b 2d       	mov	r24, r11
    2000:	9c 2d       	mov	r25, r12
    2002:	00 e2       	ldi	r16, 0x20	; 32
    2004:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    2008:	2d 83       	std	Y+5, r18	; 0x05
    200a:	21 2f       	mov	r18, r17
    200c:	36 2d       	mov	r19, r6
    200e:	47 2d       	mov	r20, r7
    2010:	58 2d       	mov	r21, r8
    2012:	69 2d       	mov	r22, r9
    2014:	7a 2d       	mov	r23, r10
    2016:	8b 2d       	mov	r24, r11
    2018:	9c 2d       	mov	r25, r12
    201a:	08 e2       	ldi	r16, 0x28	; 40
    201c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    2020:	2e 83       	std	Y+6, r18	; 0x06
    2022:	21 2f       	mov	r18, r17
    2024:	36 2d       	mov	r19, r6
    2026:	47 2d       	mov	r20, r7
    2028:	58 2d       	mov	r21, r8
    202a:	69 2d       	mov	r22, r9
    202c:	7a 2d       	mov	r23, r10
    202e:	8b 2d       	mov	r24, r11
    2030:	9c 2d       	mov	r25, r12
    2032:	00 e3       	ldi	r16, 0x30	; 48
    2034:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    2038:	2f 83       	std	Y+7, r18	; 0x07
    203a:	21 2f       	mov	r18, r17
    203c:	36 2d       	mov	r19, r6
    203e:	47 2d       	mov	r20, r7
    2040:	58 2d       	mov	r21, r8
    2042:	69 2d       	mov	r22, r9
    2044:	7a 2d       	mov	r23, r10
    2046:	8b 2d       	mov	r24, r11
    2048:	9c 2d       	mov	r25, r12
    204a:	08 e3       	ldi	r16, 0x38	; 56
    204c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    2050:	28 87       	std	Y+8, r18	; 0x08
    2052:	e9 87       	std	Y+9, r30	; 0x09
    2054:	2e 2f       	mov	r18, r30
    2056:	35 2d       	mov	r19, r5
    2058:	4d 2d       	mov	r20, r13
    205a:	5e 2d       	mov	r21, r14
    205c:	6f 2d       	mov	r22, r15
    205e:	7b 2f       	mov	r23, r27
    2060:	8a 2f       	mov	r24, r26
    2062:	9f 2f       	mov	r25, r31
    2064:	08 e0       	ldi	r16, 0x08	; 8
    2066:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    206a:	2a 87       	std	Y+10, r18	; 0x0a
    206c:	2e 2f       	mov	r18, r30
    206e:	35 2d       	mov	r19, r5
    2070:	4d 2d       	mov	r20, r13
    2072:	5e 2d       	mov	r21, r14
    2074:	6f 2d       	mov	r22, r15
    2076:	7b 2f       	mov	r23, r27
    2078:	8a 2f       	mov	r24, r26
    207a:	9f 2f       	mov	r25, r31
    207c:	00 e1       	ldi	r16, 0x10	; 16
    207e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    2082:	2b 87       	std	Y+11, r18	; 0x0b
    2084:	2e 2f       	mov	r18, r30
    2086:	35 2d       	mov	r19, r5
    2088:	4d 2d       	mov	r20, r13
    208a:	5e 2d       	mov	r21, r14
    208c:	6f 2d       	mov	r22, r15
    208e:	7b 2f       	mov	r23, r27
    2090:	8a 2f       	mov	r24, r26
    2092:	9f 2f       	mov	r25, r31
    2094:	08 e1       	ldi	r16, 0x18	; 24
    2096:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    209a:	2c 87       	std	Y+12, r18	; 0x0c
    209c:	2e 2f       	mov	r18, r30
    209e:	35 2d       	mov	r19, r5
    20a0:	4d 2d       	mov	r20, r13
    20a2:	5e 2d       	mov	r21, r14
    20a4:	6f 2d       	mov	r22, r15
    20a6:	7b 2f       	mov	r23, r27
    20a8:	8a 2f       	mov	r24, r26
    20aa:	9f 2f       	mov	r25, r31
    20ac:	00 e2       	ldi	r16, 0x20	; 32
    20ae:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    20b2:	2d 87       	std	Y+13, r18	; 0x0d
    20b4:	2e 2f       	mov	r18, r30
    20b6:	35 2d       	mov	r19, r5
    20b8:	4d 2d       	mov	r20, r13
    20ba:	5e 2d       	mov	r21, r14
    20bc:	6f 2d       	mov	r22, r15
    20be:	7b 2f       	mov	r23, r27
    20c0:	8a 2f       	mov	r24, r26
    20c2:	9f 2f       	mov	r25, r31
    20c4:	08 e2       	ldi	r16, 0x28	; 40
    20c6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    20ca:	2e 87       	std	Y+14, r18	; 0x0e
    20cc:	2e 2f       	mov	r18, r30
    20ce:	35 2d       	mov	r19, r5
    20d0:	4d 2d       	mov	r20, r13
    20d2:	5e 2d       	mov	r21, r14
    20d4:	6f 2d       	mov	r22, r15
    20d6:	7b 2f       	mov	r23, r27
    20d8:	8a 2f       	mov	r24, r26
    20da:	9f 2f       	mov	r25, r31
    20dc:	00 e3       	ldi	r16, 0x30	; 48
    20de:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    20e2:	2f 87       	std	Y+15, r18	; 0x0f
    20e4:	2e 2f       	mov	r18, r30
    20e6:	35 2d       	mov	r19, r5
    20e8:	4d 2d       	mov	r20, r13
    20ea:	5e 2d       	mov	r21, r14
    20ec:	6f 2d       	mov	r22, r15
    20ee:	7b 2f       	mov	r23, r27
    20f0:	8a 2f       	mov	r24, r26
    20f2:	9f 2f       	mov	r25, r31
    20f4:	08 e3       	ldi	r16, 0x38	; 56
    20f6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__lshrdi3>
    20fa:	28 8b       	std	Y+16, r18	; 0x10
    20fc:	80 e1       	ldi	r24, 0x10	; 16
    20fe:	e1 e3       	ldi	r30, 0x31	; 49
    2100:	f0 e2       	ldi	r31, 0x20	; 32
    2102:	de 01       	movw	r26, r28
    2104:	51 96       	adiw	r26, 0x11	; 17
    2106:	01 90       	ld	r0, Z+
    2108:	0d 92       	st	X+, r0
    210a:	8a 95       	dec	r24
    210c:	e1 f7       	brne	.-8      	; 0x2106 <eeprom_write_const+0x1ce>
    210e:	83 e3       	ldi	r24, 0x33	; 51
    2110:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    2114:	fe 01       	movw	r30, r28
    2116:	71 96       	adiw	r30, 0x11	; 17
    2118:	ce 01       	movw	r24, r28
    211a:	01 96       	adiw	r24, 0x01	; 1
    211c:	ae 01       	movw	r20, r28
    211e:	4f 5d       	subi	r20, 0xDF	; 223
    2120:	5f 4f       	sbci	r21, 0xFF	; 255
    2122:	60 ec       	ldi	r22, 0xC0	; 192
    2124:	71 e0       	ldi	r23, 0x01	; 1
    2126:	21 91       	ld	r18, Z+
    2128:	db 01       	movw	r26, r22
    212a:	2c 93       	st	X, r18
    212c:	dc 01       	movw	r26, r24
    212e:	2d 91       	ld	r18, X+
    2130:	cd 01       	movw	r24, r26
    2132:	db 01       	movw	r26, r22
    2134:	14 96       	adiw	r26, 0x04	; 4
    2136:	2c 93       	st	X, r18
    2138:	e4 17       	cp	r30, r20
    213a:	f5 07       	cpc	r31, r21
    213c:	a1 f7       	brne	.-24     	; 0x2126 <eeprom_write_const+0x1ee>
    213e:	e0 ec       	ldi	r30, 0xC0	; 192
    2140:	f1 e0       	ldi	r31, 0x01	; 1
    2142:	85 e3       	ldi	r24, 0x35	; 53
    2144:	82 87       	std	Z+10, r24	; 0x0a
    2146:	10 82       	st	Z, r1
    2148:	80 e1       	ldi	r24, 0x10	; 16
    214a:	81 83       	std	Z+1, r24	; 0x01
    214c:	88 ed       	ldi	r24, 0xD8	; 216
    214e:	84 bf       	out	0x34, r24	; 52
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	83 87       	std	Z+11, r24	; 0x0b
    2154:	87 85       	ldd	r24, Z+15	; 0x0f
    2156:	88 23       	and	r24, r24
    2158:	ec f3       	brlt	.-6      	; 0x2154 <eeprom_write_const+0x21c>
    215a:	a0 96       	adiw	r28, 0x20	; 32
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ff 90       	pop	r15
    216a:	ef 90       	pop	r14
    216c:	df 90       	pop	r13
    216e:	cf 90       	pop	r12
    2170:	bf 90       	pop	r11
    2172:	af 90       	pop	r10
    2174:	9f 90       	pop	r9
    2176:	8f 90       	pop	r8
    2178:	7f 90       	pop	r7
    217a:	6f 90       	pop	r6
    217c:	5f 90       	pop	r5
    217e:	08 95       	ret

00002180 <system_init>:
    2180:	0e 94 74 07 	call	0xee8	; 0xee8 <sysclk_init>
    2184:	6b ea       	ldi	r22, 0xAB	; 171
    2186:	79 e2       	ldi	r23, 0x29	; 41
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__portable_avr_delay_cycles>
    2190:	78 94       	sei
    2192:	8c eb       	ldi	r24, 0xBC	; 188
    2194:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    2198:	87 e0       	ldi	r24, 0x07	; 7
    219a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    219e:	0e 94 28 06 	call	0xc50	; 0xc50 <data_terminal_init>
    21a2:	6b ea       	ldi	r22, 0xAB	; 171
    21a4:	70 eb       	ldi	r23, 0xB0	; 176
    21a6:	88 e2       	ldi	r24, 0x28	; 40
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__portable_avr_delay_cycles>
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
    21b4:	0e 94 17 08 	call	0x102e	; 0x102e <gps_init>
    21b8:	17 dc       	rcall	.-2002   	; 0x19e8 <release_servo_init>
    21ba:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <spi_init>
    21be:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <pressure_init>
    21c2:	0e 94 ca 04 	call	0x994	; 0x994 <bno085_init>
    21c6:	0e 94 39 05 	call	0xa72	; 0xa72 <cam_init>
    21ca:	b5 dc       	rcall	.-1686   	; 0x1b36 <clock_init>
    21cc:	66 e5       	ldi	r22, 0x56	; 86
    21ce:	70 ed       	ldi	r23, 0xD0	; 208
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__portable_avr_delay_cycles>
    21d8:	b7 db       	rcall	.-2194   	; 0x1948 <state_check>
    21da:	0e 94 2b 08 	call	0x1056	; 0x1056 <get_pressure>
    21de:	60 93 2d 20 	sts	0x202D, r22	; 0x80202d <ground_p>
    21e2:	70 93 2e 20 	sts	0x202E, r23	; 0x80202e <ground_p+0x1>
    21e6:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <ground_p+0x2>
    21ea:	90 93 30 20 	sts	0x2030, r25	; 0x802030 <ground_p+0x3>
    21ee:	83 e3       	ldi	r24, 0x33	; 51
    21f0:	93 e1       	ldi	r25, 0x13	; 19
    21f2:	a0 e9       	ldi	r26, 0x90	; 144
    21f4:	b3 e4       	ldi	r27, 0x43	; 67
    21f6:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <ground_t>
    21fa:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <ground_t+0x1>
    21fe:	a0 93 2b 20 	sts	0x202B, r26	; 0x80202b <ground_t+0x2>
    2202:	b0 93 2c 20 	sts	0x202C, r27	; 0x80202c <ground_t+0x3>
    2206:	98 ce       	rjmp	.-720    	; 0x1f38 <eeprom_write_const>
    2208:	08 95       	ret

0000220a <main>:
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	c8 56       	subi	r28, 0x68	; 104
    2214:	d1 09       	sbc	r29, r1
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	b2 df       	rcall	.-156    	; 0x2180 <system_init>
    221c:	14 e1       	ldi	r17, 0x14	; 20
    221e:	be 01       	movw	r22, r28
    2220:	6f 5f       	subi	r22, 0xFF	; 255
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	fb 01       	movw	r30, r22
    2226:	81 2f       	mov	r24, r17
    2228:	11 92       	st	Z+, r1
    222a:	8a 95       	dec	r24
    222c:	e9 f7       	brne	.-6      	; 0x2228 <main+0x1e>
    222e:	4a e0       	ldi	r20, 0x0A	; 10
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	ce 01       	movw	r24, r28
    2234:	45 96       	adiw	r24, 0x15	; 21
    2236:	0e 94 ad 06 	call	0xd5a	; 0xd5a <rb16_init>
    223a:	be 01       	movw	r22, r28
    223c:	63 5e       	subi	r22, 0xE3	; 227
    223e:	7f 4f       	sbci	r23, 0xFF	; 255
    2240:	88 e2       	ldi	r24, 0x28	; 40
    2242:	fb 01       	movw	r30, r22
    2244:	11 92       	st	Z+, r1
    2246:	8a 95       	dec	r24
    2248:	e9 f7       	brne	.-6      	; 0x2244 <main+0x3a>
    224a:	4a e0       	ldi	r20, 0x0A	; 10
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	ce 01       	movw	r24, r28
    2250:	8b 5b       	subi	r24, 0xBB	; 187
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	0e 94 35 07 	call	0xe6a	; 0xe6a <rb32_init>
    2258:	be 01       	movw	r22, r28
    225a:	63 5b       	subi	r22, 0xB3	; 179
    225c:	7f 4f       	sbci	r23, 0xFF	; 255
    225e:	fb 01       	movw	r30, r22
    2260:	11 92       	st	Z+, r1
    2262:	1a 95       	dec	r17
    2264:	e9 f7       	brne	.-6      	; 0x2260 <main+0x56>
    2266:	4a e0       	ldi	r20, 0x0A	; 10
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	ce 01       	movw	r24, r28
    226c:	8f 59       	subi	r24, 0x9F	; 159
    226e:	9f 4f       	sbci	r25, 0xFF	; 255
    2270:	0e 94 ad 06 	call	0xd5a	; 0xd5a <rb16_init>
    2274:	00 e0       	ldi	r16, 0x00	; 0
    2276:	10 e0       	ldi	r17, 0x00	; 0
    2278:	be 01       	movw	r22, r28
    227a:	6b 5b       	subi	r22, 0xBB	; 187
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	ce 01       	movw	r24, r28
    2280:	45 96       	adiw	r24, 0x15	; 21
    2282:	a3 d9       	rcall	.-3258   	; 0x15ca <data_collect>
    2284:	61 db       	rcall	.-2366   	; 0x1948 <state_check>
    2286:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <state>
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	41 f0       	breq	.+16     	; 0x229e <main+0x94>
    228e:	08 f4       	brcc	.+2      	; 0x2292 <main+0x88>
    2290:	48 c0       	rjmp	.+144    	; 0x2322 <main+0x118>
    2292:	82 30       	cpi	r24, 0x02	; 2
    2294:	d1 f0       	breq	.+52     	; 0x22ca <main+0xc0>
    2296:	83 30       	cpi	r24, 0x03	; 3
    2298:	09 f4       	brne	.+2      	; 0x229c <main+0x92>
    229a:	3d c0       	rjmp	.+122    	; 0x2316 <main+0x10c>
    229c:	40 c0       	rjmp	.+128    	; 0x231e <main+0x114>
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	46 e1       	ldi	r20, 0x16	; 22
    22a4:	54 e4       	ldi	r21, 0x44	; 68
    22a6:	60 91 eb 20 	lds	r22, 0x20EB	; 0x8020eb <alt>
    22aa:	70 91 ec 20 	lds	r23, 0x20EC	; 0x8020ec <alt+0x1>
    22ae:	80 91 ed 20 	lds	r24, 0x20ED	; 0x8020ed <alt+0x2>
    22b2:	90 91 ee 20 	lds	r25, 0x20EE	; 0x8020ee <alt+0x3>
    22b6:	0e 94 5f 1a 	call	0x34be	; 0x34be <__gesf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	94 f5       	brge	.+100    	; 0x2322 <main+0x118>
    22be:	11 11       	cpse	r17, r1
    22c0:	30 c0       	rjmp	.+96     	; 0x2322 <main+0x118>
    22c2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <cam_switch>
    22c6:	11 e0       	ldi	r17, 0x01	; 1
    22c8:	2c c0       	rjmp	.+88     	; 0x2322 <main+0x118>
    22ca:	11 11       	cpse	r17, r1
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <main+0xca>
    22ce:	0e 94 3f 05 	call	0xa7e	; 0xa7e <cam_switch>
    22d2:	11 e0       	ldi	r17, 0x01	; 1
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	41 ee       	ldi	r20, 0xE1	; 225
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	60 91 eb 20 	lds	r22, 0x20EB	; 0x8020eb <alt>
    22e0:	70 91 ec 20 	lds	r23, 0x20EC	; 0x8020ec <alt+0x1>
    22e4:	80 91 ed 20 	lds	r24, 0x20ED	; 0x8020ed <alt+0x2>
    22e8:	90 91 ee 20 	lds	r25, 0x20EE	; 0x8020ee <alt+0x3>
    22ec:	20 d6       	rcall	.+3136   	; 0x2f2e <__subsf3>
    22ee:	a3 d7       	rcall	.+3910   	; 0x3236 <__fixsfsi>
    22f0:	67 5f       	subi	r22, 0xF7	; 247
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	63 31       	cpi	r22, 0x13	; 19
    22f6:	71 05       	cpc	r23, r1
    22f8:	28 f4       	brcc	.+10     	; 0x2304 <main+0xfa>
    22fa:	0e 94 21 08 	call	0x1042	; 0x1042 <release>
    22fe:	0e 94 38 05 	call	0xa70	; 0xa70 <hall_sensor_init>
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <main+0x118>
    2304:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <released>
    2308:	88 23       	and	r24, r24
    230a:	59 f0       	breq	.+22     	; 0x2322 <main+0x118>
    230c:	ce 01       	movw	r24, r28
    230e:	8f 59       	subi	r24, 0x9F	; 159
    2310:	9f 4f       	sbci	r25, 0xFF	; 255
    2312:	84 db       	rcall	.-2296   	; 0x1a1c <servo_pid>
    2314:	06 c0       	rjmp	.+12     	; 0x2322 <main+0x118>
    2316:	01 11       	cpse	r16, r1
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <main+0x118>
    231a:	01 e0       	ldi	r16, 0x01	; 1
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <main+0x118>
    231e:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <state>
    2322:	80 91 f9 20 	lds	r24, 0x20F9	; 0x8020f9 <data_packets>
    2326:	90 91 fa 20 	lds	r25, 0x20FA	; 0x8020fa <data_packets+0x1>
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	80 93 f9 20 	sts	0x20F9, r24	; 0x8020f9 <data_packets>
    2330:	90 93 fa 20 	sts	0x20FA, r25	; 0x8020fa <data_packets+0x1>
    2334:	60 91 fb 20 	lds	r22, 0x20FB	; 0x8020fb <timer>
    2338:	70 91 fc 20 	lds	r23, 0x20FC	; 0x8020fc <timer+0x1>
    233c:	61 15       	cp	r22, r1
    233e:	71 05       	cpc	r23, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <main+0x13a>
    2342:	9a cf       	rjmp	.-204    	; 0x2278 <main+0x6e>
    2344:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__udivmodhi4>
    2348:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <rate>
    234c:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <rate+0x1>
    2350:	93 cf       	rjmp	.-218    	; 0x2278 <main+0x6e>

00002352 <eeprom_write>:
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	2c 97       	sbiw	r28, 0x0c	; 12
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	60 91 eb 20 	lds	r22, 0x20EB	; 0x8020eb <alt>
    2364:	70 91 ec 20 	lds	r23, 0x20EC	; 0x8020ec <alt+0x1>
    2368:	80 91 ed 20 	lds	r24, 0x20ED	; 0x8020ed <alt+0x2>
    236c:	90 91 ee 20 	lds	r25, 0x20EE	; 0x8020ee <alt+0x3>
    2370:	62 d7       	rcall	.+3780   	; 0x3236 <__fixsfsi>
    2372:	79 83       	std	Y+1, r23	; 0x01
    2374:	6a 83       	std	Y+2, r22	; 0x02
    2376:	80 91 f7 20 	lds	r24, 0x20F7	; 0x8020f7 <packets>
    237a:	90 91 f8 20 	lds	r25, 0x20F8	; 0x8020f8 <packets+0x1>
    237e:	9b 83       	std	Y+3, r25	; 0x03
    2380:	8c 83       	std	Y+4, r24	; 0x04
    2382:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <timer>
    2386:	90 91 fc 20 	lds	r25, 0x20FC	; 0x8020fc <timer+0x1>
    238a:	9d 83       	std	Y+5, r25	; 0x05
    238c:	8e 83       	std	Y+6, r24	; 0x06
    238e:	86 e0       	ldi	r24, 0x06	; 6
    2390:	e1 e4       	ldi	r30, 0x41	; 65
    2392:	f0 e2       	ldi	r31, 0x20	; 32
    2394:	de 01       	movw	r26, r28
    2396:	17 96       	adiw	r26, 0x07	; 7
    2398:	01 90       	ld	r0, Z+
    239a:	0d 92       	st	X+, r0
    239c:	8a 95       	dec	r24
    239e:	e1 f7       	brne	.-8      	; 0x2398 <eeprom_write+0x46>
    23a0:	83 e3       	ldi	r24, 0x33	; 51
    23a2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    23a6:	fe 01       	movw	r30, r28
    23a8:	37 96       	adiw	r30, 0x07	; 7
    23aa:	ce 01       	movw	r24, r28
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	ae 01       	movw	r20, r28
    23b0:	43 5f       	subi	r20, 0xF3	; 243
    23b2:	5f 4f       	sbci	r21, 0xFF	; 255
    23b4:	60 ec       	ldi	r22, 0xC0	; 192
    23b6:	71 e0       	ldi	r23, 0x01	; 1
    23b8:	21 91       	ld	r18, Z+
    23ba:	db 01       	movw	r26, r22
    23bc:	2c 93       	st	X, r18
    23be:	dc 01       	movw	r26, r24
    23c0:	2d 91       	ld	r18, X+
    23c2:	cd 01       	movw	r24, r26
    23c4:	db 01       	movw	r26, r22
    23c6:	14 96       	adiw	r26, 0x04	; 4
    23c8:	2c 93       	st	X, r18
    23ca:	e4 17       	cp	r30, r20
    23cc:	f5 07       	cpc	r31, r21
    23ce:	a1 f7       	brne	.-24     	; 0x23b8 <eeprom_write+0x66>
    23d0:	e0 ec       	ldi	r30, 0xC0	; 192
    23d2:	f1 e0       	ldi	r31, 0x01	; 1
    23d4:	85 e3       	ldi	r24, 0x35	; 53
    23d6:	82 87       	std	Z+10, r24	; 0x0a
    23d8:	10 82       	st	Z, r1
    23da:	80 e1       	ldi	r24, 0x10	; 16
    23dc:	81 83       	std	Z+1, r24	; 0x01
    23de:	88 ed       	ldi	r24, 0xD8	; 216
    23e0:	84 bf       	out	0x34, r24	; 52
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	83 87       	std	Z+11, r24	; 0x0b
    23e6:	87 85       	ldd	r24, Z+15	; 0x0f
    23e8:	88 23       	and	r24, r24
    23ea:	ec f3       	brlt	.-6      	; 0x23e6 <eeprom_write+0x94>
    23ec:	2c 96       	adiw	r28, 0x0c	; 12
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	08 95       	ret

000023f8 <eeprom_erase>:

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
    23f8:	83 e3       	ldi	r24, 0x33	; 51
    23fa:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	for(uint8_t i = 0; i < 32; i++){
    23fe:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    2400:	e0 ec       	ldi	r30, 0xC0	; 192
    2402:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    2404:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    2406:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    2408:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    240a:	8f 5f       	subi	r24, 0xFF	; 255
    240c:	80 32       	cpi	r24, 0x20	; 32
    240e:	d9 f7       	brne	.-10     	; 0x2406 <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}
	
	NVM.CMD = ERASE_EEPROM;
    2410:	e0 ec       	ldi	r30, 0xC0	; 192
    2412:	f1 e0       	ldi	r31, 0x01	; 1
    2414:	80 e3       	ldi	r24, 0x30	; 48
    2416:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    2418:	88 ed       	ldi	r24, 0xD8	; 216
    241a:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    2420:	87 85       	ldd	r24, Z+15	; 0x0f
    2422:	88 23       	and	r24, r24
    2424:	ec f3       	brlt	.-6      	; 0x2420 <eeprom_erase+0x28>
}
    2426:	08 95       	ret

00002428 <reset>:
void buzzer_init(void){
	//////
}

void reset(void){
	eeprom_erase();
    2428:	e7 df       	rcall	.-50     	; 0x23f8 <eeprom_erase>
	
	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    242a:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    242c:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    242e:	98 ed       	ldi	r25, 0xD8	; 216
    2430:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    2432:	91 e0       	ldi	r25, 0x01	; 1
    2434:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    2438:	8f bf       	out	0x3f, r24	; 63
    243a:	08 95       	ret

0000243c <__vector_14>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

ISR(TCC0_OVF_vect){
    243c:	1f 92       	push	r1
    243e:	0f 92       	push	r0
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	0f 92       	push	r0
    2444:	11 24       	eor	r1, r1
    2446:	08 b6       	in	r0, 0x38	; 56
    2448:	0f 92       	push	r0
    244a:	18 be       	out	0x38, r1	; 56
    244c:	09 b6       	in	r0, 0x39	; 57
    244e:	0f 92       	push	r0
    2450:	19 be       	out	0x39, r1	; 57
    2452:	0a b6       	in	r0, 0x3a	; 58
    2454:	0f 92       	push	r0
    2456:	1a be       	out	0x3a, r1	; 58
    2458:	0b b6       	in	r0, 0x3b	; 59
    245a:	0f 92       	push	r0
    245c:	1b be       	out	0x3b, r1	; 59
    245e:	4f 92       	push	r4
    2460:	5f 92       	push	r5
    2462:	6f 92       	push	r6
    2464:	7f 92       	push	r7
    2466:	af 92       	push	r10
    2468:	bf 92       	push	r11
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	2f 93       	push	r18
    2478:	3f 93       	push	r19
    247a:	4f 93       	push	r20
    247c:	5f 93       	push	r21
    247e:	6f 93       	push	r22
    2480:	7f 93       	push	r23
    2482:	8f 93       	push	r24
    2484:	9f 93       	push	r25
    2486:	af 93       	push	r26
    2488:	bf 93       	push	r27
    248a:	ef 93       	push	r30
    248c:	ff 93       	push	r31
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	66 97       	sbiw	r28, 0x16	; 22
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	de bf       	out	0x3e, r29	; 62
	//printf("In Bosch Interrupt\n");
	uint8_t data[18];
	bno085_read(data);
    249c:	ce 01       	movw	r24, r28
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	0e 94 22 05 	call	0xa44	; 0xa44 <bno085_read>
	double x = ((data[5]<<8) | data[4]) * QSCALE;
	double y = ((data[7]<<8) | data[6]) * QSCALE;
	double z = ((data[9]<<8) | data[8]) * QSCALE;
	double w = ((data[11]<<8) | data[10]) * QSCALE;
	
	quaternion2euler(w, x, y, z);
    24a4:	6a 85       	ldd	r22, Y+10	; 0x0a
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	76 2f       	mov	r23, r22
    24aa:	66 27       	eor	r22, r22
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	68 2b       	or	r22, r24
    24b0:	07 2e       	mov	r0, r23
    24b2:	00 0c       	add	r0, r0
    24b4:	88 0b       	sbc	r24, r24
    24b6:	99 0b       	sbc	r25, r25
    24b8:	f1 d6       	rcall	.+3554   	; 0x329c <__floatsisf>
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	58 e3       	ldi	r21, 0x38	; 56
    24c2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3>
    24c6:	5b 01       	movw	r10, r22
    24c8:	6c 01       	movw	r12, r24
    24ca:	68 85       	ldd	r22, Y+8	; 0x08
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	76 2f       	mov	r23, r22
    24d0:	66 27       	eor	r22, r22
    24d2:	8f 81       	ldd	r24, Y+7	; 0x07
    24d4:	68 2b       	or	r22, r24
    24d6:	07 2e       	mov	r0, r23
    24d8:	00 0c       	add	r0, r0
    24da:	88 0b       	sbc	r24, r24
    24dc:	99 0b       	sbc	r25, r25
    24de:	de d6       	rcall	.+3516   	; 0x329c <__floatsisf>
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	58 e3       	ldi	r21, 0x38	; 56
    24e8:	f5 d7       	rcall	.+4074   	; 0x34d4 <__mulsf3>
    24ea:	2b 01       	movw	r4, r22
    24ec:	3c 01       	movw	r6, r24
    24ee:	6e 81       	ldd	r22, Y+6	; 0x06
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	76 2f       	mov	r23, r22
    24f4:	66 27       	eor	r22, r22
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	68 2b       	or	r22, r24
    24fa:	07 2e       	mov	r0, r23
    24fc:	00 0c       	add	r0, r0
    24fe:	88 0b       	sbc	r24, r24
    2500:	99 0b       	sbc	r25, r25
    2502:	cc d6       	rcall	.+3480   	; 0x329c <__floatsisf>
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	58 e3       	ldi	r21, 0x38	; 56
    250c:	e3 d7       	rcall	.+4038   	; 0x34d4 <__mulsf3>
    250e:	6b 8b       	std	Y+19, r22	; 0x13
    2510:	7c 8b       	std	Y+20, r23	; 0x14
    2512:	8d 8b       	std	Y+21, r24	; 0x15
    2514:	9e 8b       	std	Y+22, r25	; 0x16
    2516:	6c 85       	ldd	r22, Y+12	; 0x0c
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	76 2f       	mov	r23, r22
    251c:	66 27       	eor	r22, r22
    251e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2520:	68 2b       	or	r22, r24
    2522:	07 2e       	mov	r0, r23
    2524:	00 0c       	add	r0, r0
    2526:	88 0b       	sbc	r24, r24
    2528:	99 0b       	sbc	r25, r25
    252a:	b8 d6       	rcall	.+3440   	; 0x329c <__floatsisf>
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e8       	ldi	r20, 0x80	; 128
    2532:	58 e3       	ldi	r21, 0x38	; 56
    2534:	cf d7       	rcall	.+3998   	; 0x34d4 <__mulsf3>
    2536:	83 01       	movw	r16, r6
    2538:	72 01       	movw	r14, r4
    253a:	2b 89       	ldd	r18, Y+19	; 0x13
    253c:	3c 89       	ldd	r19, Y+20	; 0x14
    253e:	4d 89       	ldd	r20, Y+21	; 0x15
    2540:	5e 89       	ldd	r21, Y+22	; 0x16
    2542:	c3 d8       	rcall	.-3706   	; 0x16ca <quaternion2euler>
}
    2544:	66 96       	adiw	r28, 0x16	; 22
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	ff 91       	pop	r31
    2550:	ef 91       	pop	r30
    2552:	bf 91       	pop	r27
    2554:	af 91       	pop	r26
    2556:	9f 91       	pop	r25
    2558:	8f 91       	pop	r24
    255a:	7f 91       	pop	r23
    255c:	6f 91       	pop	r22
    255e:	5f 91       	pop	r21
    2560:	4f 91       	pop	r20
    2562:	3f 91       	pop	r19
    2564:	2f 91       	pop	r18
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	ff 90       	pop	r15
    256c:	ef 90       	pop	r14
    256e:	df 90       	pop	r13
    2570:	cf 90       	pop	r12
    2572:	bf 90       	pop	r11
    2574:	af 90       	pop	r10
    2576:	7f 90       	pop	r7
    2578:	6f 90       	pop	r6
    257a:	5f 90       	pop	r5
    257c:	4f 90       	pop	r4
    257e:	0f 90       	pop	r0
    2580:	0b be       	out	0x3b, r0	; 59
    2582:	0f 90       	pop	r0
    2584:	0a be       	out	0x3a, r0	; 58
    2586:	0f 90       	pop	r0
    2588:	09 be       	out	0x39, r0	; 57
    258a:	0f 90       	pop	r0
    258c:	08 be       	out	0x38, r0	; 56
    258e:	0f 90       	pop	r0
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	0f 90       	pop	r0
    2594:	1f 90       	pop	r1
    2596:	18 95       	reti

00002598 <__vector_47>:

ISR(TCE0_OVF_vect){
    2598:	1f 92       	push	r1
    259a:	0f 92       	push	r0
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	0f 92       	push	r0
    25a0:	11 24       	eor	r1, r1
    25a2:	08 b6       	in	r0, 0x38	; 56
    25a4:	0f 92       	push	r0
    25a6:	18 be       	out	0x38, r1	; 56
    25a8:	09 b6       	in	r0, 0x39	; 57
    25aa:	0f 92       	push	r0
    25ac:	19 be       	out	0x39, r1	; 57
    25ae:	0a b6       	in	r0, 0x3a	; 58
    25b0:	0f 92       	push	r0
    25b2:	1a be       	out	0x3a, r1	; 58
    25b4:	0b b6       	in	r0, 0x3b	; 59
    25b6:	0f 92       	push	r0
    25b8:	1b be       	out	0x3b, r1	; 59
    25ba:	2f 92       	push	r2
    25bc:	3f 92       	push	r3
    25be:	4f 92       	push	r4
    25c0:	5f 92       	push	r5
    25c2:	6f 92       	push	r6
    25c4:	7f 92       	push	r7
    25c6:	8f 92       	push	r8
    25c8:	9f 92       	push	r9
    25ca:	af 92       	push	r10
    25cc:	bf 92       	push	r11
    25ce:	cf 92       	push	r12
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	2f 93       	push	r18
    25dc:	3f 93       	push	r19
    25de:	4f 93       	push	r20
    25e0:	5f 93       	push	r21
    25e2:	6f 93       	push	r22
    25e4:	7f 93       	push	r23
    25e6:	8f 93       	push	r24
    25e8:	9f 93       	push	r25
    25ea:	af 93       	push	r26
    25ec:	bf 93       	push	r27
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	ef 93       	push	r30
    25f4:	ff 93       	push	r31
	timer++;
    25f6:	00 91 fb 20 	lds	r16, 0x20FB	; 0x8020fb <timer>
    25fa:	10 91 fc 20 	lds	r17, 0x20FC	; 0x8020fc <timer+0x1>
    25fe:	0f 5f       	subi	r16, 0xFF	; 255
    2600:	1f 4f       	sbci	r17, 0xFF	; 255
    2602:	00 93 fb 20 	sts	0x20FB, r16	; 0x8020fb <timer>
    2606:	10 93 fc 20 	sts	0x20FC, r17	; 0x8020fc <timer+0x1>
	packets++;
    260a:	c0 91 f7 20 	lds	r28, 0x20F7	; 0x8020f7 <packets>
    260e:	d0 91 f8 20 	lds	r29, 0x20F8	; 0x8020f8 <packets+0x1>
    2612:	21 96       	adiw	r28, 0x01	; 1
    2614:	c0 93 f7 20 	sts	0x20F7, r28	; 0x8020f7 <packets>
    2618:	d0 93 f8 20 	sts	0x20F8, r29	; 0x8020f8 <packets+0x1>
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    261c:	60 91 d3 20 	lds	r22, 0x20D3	; 0x8020d3 <gps_alt>
    2620:	70 91 d4 20 	lds	r23, 0x20D4	; 0x8020d4 <gps_alt+0x1>
    2624:	80 91 d5 20 	lds	r24, 0x20D5	; 0x8020d5 <gps_alt+0x2>
    2628:	90 91 d6 20 	lds	r25, 0x20D6	; 0x8020d6 <gps_alt+0x3>
    262c:	04 d6       	rcall	.+3080   	; 0x3236 <__fixsfsi>
    262e:	36 2e       	mov	r3, r22
    2630:	27 2e       	mov	r2, r23
	timer++;
	packets++;
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2632:	40 90 d7 20 	lds	r4, 0x20D7	; 0x8020d7 <gps_long>
    2636:	50 90 d8 20 	lds	r5, 0x20D8	; 0x8020d8 <gps_long+0x1>
    263a:	60 90 d9 20 	lds	r6, 0x20D9	; 0x8020d9 <gps_long+0x2>
    263e:	70 90 da 20 	lds	r7, 0x20DA	; 0x8020da <gps_long+0x3>
    2642:	80 90 db 20 	lds	r8, 0x20DB	; 0x8020db <gps_lat>
    2646:	90 90 dc 20 	lds	r9, 0x20DC	; 0x8020dc <gps_lat+0x1>
    264a:	a0 90 dd 20 	lds	r10, 0x20DD	; 0x8020dd <gps_lat+0x2>
    264e:	b0 90 de 20 	lds	r11, 0x20DE	; 0x8020de <gps_lat+0x3>
ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    2652:	60 91 df 20 	lds	r22, 0x20DF	; 0x8020df <gps_t>
    2656:	70 91 e0 20 	lds	r23, 0x20E0	; 0x8020e0 <gps_t+0x1>
    265a:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <gps_t+0x2>
    265e:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <gps_t+0x3>
    2662:	e9 d5       	rcall	.+3026   	; 0x3236 <__fixsfsi>
    2664:	6b 01       	movw	r12, r22
    2666:	7c 01       	movw	r14, r24
}

ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer,packets,
    2668:	60 91 c1 20 	lds	r22, 0x20C1	; 0x8020c1 <angle>
    266c:	70 91 c2 20 	lds	r23, 0x20C2	; 0x8020c2 <angle+0x1>
    2670:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <angle+0x2>
    2674:	90 91 c4 20 	lds	r25, 0x20C4	; 0x8020c4 <angle+0x3>
    2678:	de d5       	rcall	.+3004   	; 0x3236 <__fixsfsi>
    267a:	7f 93       	push	r23
    267c:	6f 93       	push	r22
    267e:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <state>
    2682:	1f 92       	push	r1
    2684:	8f 93       	push	r24
    2686:	60 91 c5 20 	lds	r22, 0x20C5	; 0x8020c5 <rpm>
    268a:	70 91 c6 20 	lds	r23, 0x20C6	; 0x8020c6 <rpm+0x1>
    268e:	80 91 c7 20 	lds	r24, 0x20C7	; 0x8020c7 <rpm+0x2>
    2692:	90 91 c8 20 	lds	r25, 0x20C8	; 0x8020c8 <rpm+0x3>
    2696:	cf d5       	rcall	.+2974   	; 0x3236 <__fixsfsi>
    2698:	7f 93       	push	r23
    269a:	6f 93       	push	r22
    269c:	60 91 c9 20 	lds	r22, 0x20C9	; 0x8020c9 <roll>
    26a0:	70 91 ca 20 	lds	r23, 0x20CA	; 0x8020ca <roll+0x1>
    26a4:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <roll+0x2>
    26a8:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <roll+0x3>
    26ac:	c4 d5       	rcall	.+2952   	; 0x3236 <__fixsfsi>
    26ae:	7f 93       	push	r23
    26b0:	6f 93       	push	r22
    26b2:	60 91 cd 20 	lds	r22, 0x20CD	; 0x8020cd <pitch>
    26b6:	70 91 ce 20 	lds	r23, 0x20CE	; 0x8020ce <pitch+0x1>
    26ba:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <pitch+0x2>
    26be:	90 91 d0 20 	lds	r25, 0x20D0	; 0x8020d0 <pitch+0x3>
    26c2:	b9 d5       	rcall	.+2930   	; 0x3236 <__fixsfsi>
    26c4:	7f 93       	push	r23
    26c6:	6f 93       	push	r22
    26c8:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <gps_sats+0x1>
    26cc:	8f 93       	push	r24
    26ce:	80 91 d1 20 	lds	r24, 0x20D1	; 0x8020d1 <gps_sats>
    26d2:	8f 93       	push	r24
    26d4:	83 2d       	mov	r24, r3
    26d6:	92 2d       	mov	r25, r2
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	9c 01       	movw	r18, r24
    26de:	22 0f       	add	r18, r18
    26e0:	33 1f       	adc	r19, r19
    26e2:	22 0f       	add	r18, r18
    26e4:	33 1f       	adc	r19, r19
    26e6:	82 0f       	add	r24, r18
    26e8:	93 1f       	adc	r25, r19
    26ea:	6a e0       	ldi	r22, 0x0A	; 10
    26ec:	70 e0       	ldi	r23, 0x00	; 0
    26ee:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__divmodhi4>
    26f2:	9f 93       	push	r25
    26f4:	8f 93       	push	r24
    26f6:	2f 92       	push	r2
    26f8:	3f 92       	push	r3
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	34 e2       	ldi	r19, 0x24	; 36
    26fe:	44 e7       	ldi	r20, 0x74	; 116
    2700:	59 e4       	ldi	r21, 0x49	; 73
    2702:	c3 01       	movw	r24, r6
    2704:	b2 01       	movw	r22, r4
    2706:	e6 d6       	rcall	.+3532   	; 0x34d4 <__mulsf3>
    2708:	96 d5       	rcall	.+2860   	; 0x3236 <__fixsfsi>
    270a:	20 e4       	ldi	r18, 0x40	; 64
    270c:	32 e4       	ldi	r19, 0x42	; 66
    270e:	4f e0       	ldi	r20, 0x0F	; 15
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    2716:	9b 01       	movw	r18, r22
    2718:	77 23       	and	r23, r23
    271a:	24 f4       	brge	.+8      	; 0x2724 <__vector_47+0x18c>
    271c:	22 27       	eor	r18, r18
    271e:	33 27       	eor	r19, r19
    2720:	26 1b       	sub	r18, r22
    2722:	37 0b       	sbc	r19, r23
    2724:	c9 01       	movw	r24, r18
    2726:	33 0f       	add	r19, r19
    2728:	aa 0b       	sbc	r26, r26
    272a:	bb 0b       	sbc	r27, r27
    272c:	bf 93       	push	r27
    272e:	af 93       	push	r26
    2730:	9f 93       	push	r25
    2732:	8f 93       	push	r24
    2734:	c3 01       	movw	r24, r6
    2736:	b2 01       	movw	r22, r4
    2738:	7e d5       	rcall	.+2812   	; 0x3236 <__fixsfsi>
    273a:	7f 93       	push	r23
    273c:	6f 93       	push	r22
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	34 e2       	ldi	r19, 0x24	; 36
    2742:	44 e7       	ldi	r20, 0x74	; 116
    2744:	59 e4       	ldi	r21, 0x49	; 73
    2746:	c5 01       	movw	r24, r10
    2748:	b4 01       	movw	r22, r8
    274a:	c4 d6       	rcall	.+3464   	; 0x34d4 <__mulsf3>
    274c:	74 d5       	rcall	.+2792   	; 0x3236 <__fixsfsi>
    274e:	20 e4       	ldi	r18, 0x40	; 64
    2750:	32 e4       	ldi	r19, 0x42	; 66
    2752:	4f e0       	ldi	r20, 0x0F	; 15
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    275a:	9f 93       	push	r25
    275c:	8f 93       	push	r24
    275e:	7f 93       	push	r23
    2760:	6f 93       	push	r22
    2762:	c5 01       	movw	r24, r10
    2764:	b4 01       	movw	r22, r8
    2766:	67 d5       	rcall	.+2766   	; 0x3236 <__fixsfsi>
    2768:	7f 93       	push	r23
    276a:	6f 93       	push	r22
    276c:	0f 2e       	mov	r0, r31
    276e:	f4 e6       	ldi	r31, 0x64	; 100
    2770:	8f 2e       	mov	r8, r31
    2772:	91 2c       	mov	r9, r1
    2774:	a1 2c       	mov	r10, r1
    2776:	b1 2c       	mov	r11, r1
    2778:	f0 2d       	mov	r31, r0
    277a:	c7 01       	movw	r24, r14
    277c:	b6 01       	movw	r22, r12
    277e:	a5 01       	movw	r20, r10
    2780:	94 01       	movw	r18, r8
    2782:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    2786:	7f 93       	push	r23
    2788:	6f 93       	push	r22
    278a:	c7 01       	movw	r24, r14
    278c:	b6 01       	movw	r22, r12
    278e:	20 e1       	ldi	r18, 0x10	; 16
    2790:	37 e2       	ldi	r19, 0x27	; 39
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    279a:	f2 2e       	mov	r15, r18
    279c:	e3 2e       	mov	r14, r19
    279e:	a5 01       	movw	r20, r10
    27a0:	94 01       	movw	r18, r8
    27a2:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__divmodsi4>
    27a6:	3f 93       	push	r19
    27a8:	2f 93       	push	r18
    27aa:	ef 92       	push	r14
    27ac:	ff 92       	push	r15
    27ae:	60 91 e7 20 	lds	r22, 0x20E7	; 0x8020e7 <volt>
    27b2:	70 91 e8 20 	lds	r23, 0x20E8	; 0x8020e8 <volt+0x1>
    27b6:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <volt+0x2>
    27ba:	90 91 ea 20 	lds	r25, 0x20EA	; 0x8020ea <volt+0x3>
    27be:	3b d5       	rcall	.+2678   	; 0x3236 <__fixsfsi>
    27c0:	7f 93       	push	r23
    27c2:	6f 93       	push	r22
    27c4:	23 e3       	ldi	r18, 0x33	; 51
    27c6:	33 e9       	ldi	r19, 0x93	; 147
    27c8:	48 e8       	ldi	r20, 0x88	; 136
    27ca:	53 e4       	ldi	r21, 0x43	; 67
    27cc:	60 91 ef 20 	lds	r22, 0x20EF	; 0x8020ef <temp>
    27d0:	70 91 f0 20 	lds	r23, 0x20F0	; 0x8020f0 <temp+0x1>
    27d4:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <temp+0x2>
    27d8:	90 91 f2 20 	lds	r25, 0x20F2	; 0x8020f2 <temp+0x3>
    27dc:	a8 d3       	rcall	.+1872   	; 0x2f2e <__subsf3>
    27de:	2b d5       	rcall	.+2646   	; 0x3236 <__fixsfsi>
    27e0:	7f 93       	push	r23
    27e2:	6f 93       	push	r22
    27e4:	60 91 f3 20 	lds	r22, 0x20F3	; 0x8020f3 <press>
    27e8:	70 91 f4 20 	lds	r23, 0x20F4	; 0x8020f4 <press+0x1>
    27ec:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <press+0x2>
    27f0:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <press+0x3>
    27f4:	20 d5       	rcall	.+2624   	; 0x3236 <__fixsfsi>
    27f6:	9f 93       	push	r25
    27f8:	8f 93       	push	r24
    27fa:	7f 93       	push	r23
    27fc:	6f 93       	push	r22
    27fe:	60 91 eb 20 	lds	r22, 0x20EB	; 0x8020eb <alt>
    2802:	70 91 ec 20 	lds	r23, 0x20EC	; 0x8020ec <alt+0x1>
    2806:	80 91 ed 20 	lds	r24, 0x20ED	; 0x8020ed <alt+0x2>
    280a:	90 91 ee 20 	lds	r25, 0x20EE	; 0x8020ee <alt+0x3>
    280e:	13 d5       	rcall	.+2598   	; 0x3236 <__fixsfsi>
    2810:	7f 93       	push	r23
    2812:	6f 93       	push	r22
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	1f 93       	push	r17
    281a:	0f 93       	push	r16
    281c:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    2820:	8f 93       	push	r24
    2822:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    2826:	8f 93       	push	r24
    2828:	c1 e3       	ldi	r28, 0x31	; 49
    282a:	d1 e2       	ldi	r29, 0x21	; 33
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    2834:	8d b7       	in	r24, 0x3d	; 61
    2836:	9e b7       	in	r25, 0x3e	; 62
    2838:	c4 96       	adiw	r24, 0x34	; 52
    283a:	8d bf       	out	0x3d, r24	; 61
    283c:	9e bf       	out	0x3e, r25	; 62
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <printf>
	
	// Updates EEPROM
	eeprom_write();
    2846:	85 dd       	rcall	.-1270   	; 0x2352 <eeprom_write>
    2848:	0f 90       	pop	r0
	uint8_t byte0 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE0);
	uint8_t byte1 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE1);
	uint16_t a = (uint16_t) ((byte1<<8) | byte0);
	printf("%u\n", a);
	*/
}
    284a:	0f 90       	pop	r0
    284c:	ff 91       	pop	r31
    284e:	ef 91       	pop	r30
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	bf 91       	pop	r27
    2856:	af 91       	pop	r26
    2858:	9f 91       	pop	r25
    285a:	8f 91       	pop	r24
    285c:	7f 91       	pop	r23
    285e:	6f 91       	pop	r22
    2860:	5f 91       	pop	r21
    2862:	4f 91       	pop	r20
    2864:	3f 91       	pop	r19
    2866:	2f 91       	pop	r18
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	ff 90       	pop	r15
    286e:	ef 90       	pop	r14
    2870:	df 90       	pop	r13
    2872:	cf 90       	pop	r12
    2874:	bf 90       	pop	r11
    2876:	af 90       	pop	r10
    2878:	9f 90       	pop	r9
    287a:	8f 90       	pop	r8
    287c:	7f 90       	pop	r7
    287e:	6f 90       	pop	r6
    2880:	5f 90       	pop	r5
    2882:	4f 90       	pop	r4
    2884:	3f 90       	pop	r3
    2886:	2f 90       	pop	r2
    2888:	0f 90       	pop	r0
    288a:	0b be       	out	0x3b, r0	; 59
    288c:	0f 90       	pop	r0
    288e:	0a be       	out	0x3a, r0	; 58
    2890:	0f 90       	pop	r0
    2892:	09 be       	out	0x39, r0	; 57
    2894:	0f 90       	pop	r0
    2896:	08 be       	out	0x38, r0	; 56
    2898:	0f 90       	pop	r0
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	0f 90       	pop	r0
    289e:	1f 90       	pop	r1
    28a0:	18 95       	reti

000028a2 <__vector_58>:
    28a2:	1f 92       	push	r1

ISR(USARTE0_RXC_vect){
    28a4:	0f 92       	push	r0
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	0f 92       	push	r0
    28aa:	11 24       	eor	r1, r1
    28ac:	08 b6       	in	r0, 0x38	; 56
    28ae:	0f 92       	push	r0
    28b0:	18 be       	out	0x38, r1	; 56
    28b2:	09 b6       	in	r0, 0x39	; 57
    28b4:	0f 92       	push	r0
    28b6:	19 be       	out	0x39, r1	; 57
    28b8:	0b b6       	in	r0, 0x3b	; 59
    28ba:	0f 92       	push	r0
    28bc:	1b be       	out	0x3b, r1	; 59
    28be:	2f 93       	push	r18
    28c0:	3f 93       	push	r19
    28c2:	4f 93       	push	r20
    28c4:	5f 93       	push	r21
    28c6:	6f 93       	push	r22
    28c8:	7f 93       	push	r23
    28ca:	8f 93       	push	r24
    28cc:	9f 93       	push	r25
    28ce:	af 93       	push	r26
    28d0:	bf 93       	push	r27
    28d2:	ef 93       	push	r30
    28d4:	ff 93       	push	r31
	uint8_t c = usart_getchar(UART_TERMINAL_SERIAL);
    28d6:	80 ea       	ldi	r24, 0xA0	; 160
    28d8:	9a e0       	ldi	r25, 0x0A	; 10
    28da:	0e 94 c8 02 	call	0x590	; 0x590 <usart_getchar>
	//printf("%c\n", c);
	
	switch(c){
    28de:	84 36       	cpi	r24, 0x64	; 100
    28e0:	91 f0       	breq	.+36     	; 0x2906 <__vector_58+0x64>
    28e2:	28 f4       	brcc	.+10     	; 0x28ee <__vector_58+0x4c>
    28e4:	81 36       	cpi	r24, 0x61	; 97
    28e6:	69 f0       	breq	.+26     	; 0x2902 <__vector_58+0x60>
    28e8:	83 36       	cpi	r24, 0x63	; 99
    28ea:	49 f0       	breq	.+18     	; 0x28fe <__vector_58+0x5c>
    28ec:	0d c0       	rjmp	.+26     	; 0x2908 <__vector_58+0x66>
    28ee:	85 36       	cpi	r24, 0x65	; 101
    28f0:	21 f0       	breq	.+8      	; 0x28fa <__vector_58+0x58>
    28f2:	86 36       	cpi	r24, 0x66	; 102
    28f4:	49 f4       	brne	.+18     	; 0x2908 <__vector_58+0x66>
		case RESET:
		//printf("RESET\n");
		reset();
    28f6:	98 dd       	rcall	.-1232   	; 0x2428 <reset>

	SREG=oldInterruptState;
}

void calibrate(void){
	cali_alt();
    28f8:	07 c0       	rjmp	.+14     	; 0x2908 <__vector_58+0x66>
    28fa:	2b d9       	rcall	.-3498   	; 0x1b52 <cali_alt>
		case CALIBRATE:
		calibrate();
		//printf("CALIBRATE\n");
		break;
		case CALIBRATE_ALTITUDE:
		cali_alt();
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <__vector_58+0x66>
		case CALIBRATE_ANGLE:
		cali_ang();
		//printf("CALIBRATE_ANGLE\n");
		break;
		case SEND_GPS_LOCATION:
		send_gps();
    28fe:	29 d9       	rcall	.-3502   	; 0x1b52 <cali_alt>
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <__vector_58+0x66>
		//printf("SEND_GPS_LOCATION\n");
		break;
    2902:	44 d9       	rcall	.-3448   	; 0x1b8c <send_gps>
		case PACKET:
		packet();
    2904:	01 c0       	rjmp	.+2      	; 0x2908 <__vector_58+0x66>
    2906:	c2 d9       	rcall	.-3196   	; 0x1c8c <packet>
		//printf("PACKET\n");
		break;
	}
}
    2908:	ff 91       	pop	r31
    290a:	ef 91       	pop	r30
    290c:	bf 91       	pop	r27
    290e:	af 91       	pop	r26
    2910:	9f 91       	pop	r25
    2912:	8f 91       	pop	r24
    2914:	7f 91       	pop	r23
    2916:	6f 91       	pop	r22
    2918:	5f 91       	pop	r21
    291a:	4f 91       	pop	r20
    291c:	3f 91       	pop	r19
    291e:	2f 91       	pop	r18
    2920:	0f 90       	pop	r0
    2922:	0b be       	out	0x3b, r0	; 59
    2924:	0f 90       	pop	r0
    2926:	09 be       	out	0x39, r0	; 57
    2928:	0f 90       	pop	r0
    292a:	08 be       	out	0x38, r0	; 56
    292c:	0f 90       	pop	r0
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	0f 90       	pop	r0
    2932:	1f 90       	pop	r1
    2934:	18 95       	reti

00002936 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    2936:	1f 92       	push	r1
    2938:	0f 92       	push	r0
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	0f 92       	push	r0
    293e:	11 24       	eor	r1, r1
    2940:	08 b6       	in	r0, 0x38	; 56
    2942:	0f 92       	push	r0
    2944:	18 be       	out	0x38, r1	; 56
    2946:	09 b6       	in	r0, 0x39	; 57
    2948:	0f 92       	push	r0
    294a:	19 be       	out	0x39, r1	; 57
    294c:	0a b6       	in	r0, 0x3a	; 58
    294e:	0f 92       	push	r0
    2950:	1a be       	out	0x3a, r1	; 58
    2952:	0b b6       	in	r0, 0x3b	; 59
    2954:	0f 92       	push	r0
    2956:	1b be       	out	0x3b, r1	; 59
    2958:	8f 92       	push	r8
    295a:	9f 92       	push	r9
    295c:	af 92       	push	r10
    295e:	bf 92       	push	r11
    2960:	cf 92       	push	r12
    2962:	df 92       	push	r13
    2964:	ef 92       	push	r14
    2966:	ff 92       	push	r15
    2968:	1f 93       	push	r17
    296a:	2f 93       	push	r18
    296c:	3f 93       	push	r19
    296e:	4f 93       	push	r20
    2970:	5f 93       	push	r21
    2972:	6f 93       	push	r22
    2974:	7f 93       	push	r23
    2976:	8f 93       	push	r24
    2978:	9f 93       	push	r25
    297a:	af 93       	push	r26
    297c:	bf 93       	push	r27
    297e:	ef 93       	push	r30
    2980:	ff 93       	push	r31
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	00 d0       	rcall	.+0      	; 0x2988 <__vector_91+0x52>
    2988:	00 d0       	rcall	.+0      	; 0x298a <__vector_91+0x54>
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    298e:	80 eb       	ldi	r24, 0xB0	; 176
    2990:	99 e0       	ldi	r25, 0x09	; 9
    2992:	0e 94 c8 02 	call	0x590	; 0x590 <usart_getchar>
    2996:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    2998:	84 32       	cpi	r24, 0x24	; 36
    299a:	49 f4       	brne	.+18     	; 0x29ae <__vector_91+0x78>
		writing = 1;
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <writing>
		pos = 0;
		word_pos = 0;
    29a2:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <word_pos>
		commas = 0;
    29a6:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	69 c2       	rjmp	.+1234   	; 0x2e80 <__vector_91+0x54a>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    29ae:	8a 32       	cpi	r24, 0x2A	; 42
    29b0:	29 f4       	brne	.+10     	; 0x29bc <__vector_91+0x86>
		commas = 0;
    29b2:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <commas>
		writing = 0;
    29b6:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <writing>
    29ba:	92 c2       	rjmp	.+1316   	; 0x2ee0 <__vector_91+0x5aa>
	}
	else if(c == (uint8_t) ','){
    29bc:	8c 32       	cpi	r24, 0x2C	; 44
    29be:	09 f0       	breq	.+2      	; 0x29c2 <__vector_91+0x8c>
    29c0:	4a c2       	rjmp	.+1172   	; 0x2e56 <__vector_91+0x520>
		gps[0] = 32;
    29c2:	ed e1       	ldi	r30, 0x1D	; 29
    29c4:	f1 e2       	ldi	r31, 0x21	; 33
    29c6:	80 e2       	ldi	r24, 0x20	; 32
    29c8:	80 83       	st	Z, r24
		if(gps[1] == 32){
    29ca:	81 81       	ldd	r24, Z+1	; 0x01
    29cc:	80 32       	cpi	r24, 0x20	; 32
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <__vector_91+0x9c>
    29d0:	6e c2       	rjmp	.+1244   	; 0x2eae <__vector_91+0x578>
			gps[0] = '0';
    29d2:	80 e3       	ldi	r24, 0x30	; 48
    29d4:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <gps>
    29d8:	6a c2       	rjmp	.+1236   	; 0x2eae <__vector_91+0x578>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    29da:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <gps>
    29de:	8e 32       	cpi	r24, 0x2E	; 46
    29e0:	09 f0       	breq	.+2      	; 0x29e4 <__vector_91+0xae>
    29e2:	9f c1       	rjmp	.+830    	; 0x2d22 <__vector_91+0x3ec>
    29e4:	a5 c1       	rjmp	.+842    	; 0x2d30 <__vector_91+0x3fa>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    29e6:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <gps>
    29ea:	8e 32       	cpi	r24, 0x2E	; 46
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <__vector_91+0xba>
    29ee:	ed c0       	rjmp	.+474    	; 0x2bca <__vector_91+0x294>
    29f0:	f3 c0       	rjmp	.+486    	; 0x2bd8 <__vector_91+0x2a2>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    29f2:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <gps>
    29f6:	8e 32       	cpi	r24, 0x2E	; 46
    29f8:	09 f0       	breq	.+2      	; 0x29fc <__vector_91+0xc6>
    29fa:	52 c0       	rjmp	.+164    	; 0x2aa0 <__vector_91+0x16a>
    29fc:	58 c0       	rjmp	.+176    	; 0x2aae <__vector_91+0x178>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    29fe:	91 91       	ld	r25, Z+
    2a00:	9e 32       	cpi	r25, 0x2E	; 46
    2a02:	29 f4       	brne	.+10     	; 0x2a0e <__vector_91+0xd8>
    2a04:	01 c0       	rjmp	.+2      	; 0x2a08 <__vector_91+0xd2>
    2a06:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2a08:	80 93 fd 20 	sts	0x20FD, r24	; 0x8020fd <idx>
						break;
    2a0c:	03 c0       	rjmp	.+6      	; 0x2a14 <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2a0e:	8f 5f       	subi	r24, 0xFF	; 255
    2a10:	8f 30       	cpi	r24, 0x0F	; 15
    2a12:	a9 f7       	brne	.-22     	; 0x29fe <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2a14:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <idx>
    2a18:	e2 2f       	mov	r30, r18
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	e3 5e       	subi	r30, 0xE3	; 227
    2a1e:	fe 4d       	sbci	r31, 0xDE	; 222
    2a20:	80 e2       	ldi	r24, 0x20	; 32
    2a22:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2a24:	2f 5f       	subi	r18, 0xFF	; 255
    2a26:	2f 30       	cpi	r18, 0x0F	; 15
    2a28:	c8 f4       	brcc	.+50     	; 0x2a5c <__vector_91+0x126>
					if(gps[i] == 32){
    2a2a:	82 2f       	mov	r24, r18
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	fc 01       	movw	r30, r24
    2a30:	e3 5e       	subi	r30, 0xE3	; 227
    2a32:	fe 4d       	sbci	r31, 0xDE	; 222
    2a34:	30 81       	ld	r19, Z
    2a36:	30 32       	cpi	r19, 0x20	; 32
    2a38:	89 f0       	breq	.+34     	; 0x2a5c <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2a3a:	40 e2       	ldi	r20, 0x20	; 32
    2a3c:	08 c0       	rjmp	.+16     	; 0x2a4e <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2a3e:	82 2f       	mov	r24, r18
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	fc 01       	movw	r30, r24
    2a44:	e3 5e       	subi	r30, 0xE3	; 227
    2a46:	fe 4d       	sbci	r31, 0xDE	; 222
    2a48:	30 81       	ld	r19, Z
    2a4a:	30 32       	cpi	r19, 0x20	; 32
    2a4c:	39 f0       	breq	.+14     	; 0x2a5c <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2a4e:	fc 01       	movw	r30, r24
    2a50:	e3 5e       	subi	r30, 0xE3	; 227
    2a52:	fe 4d       	sbci	r31, 0xDE	; 222
    2a54:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2a56:	2f 5f       	subi	r18, 0xFF	; 255
    2a58:	2f 30       	cpi	r18, 0x0F	; 15
    2a5a:	89 f7       	brne	.-30     	; 0x2a3e <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	9f 93       	push	r25
    2a62:	8f 93       	push	r24
    2a64:	89 eb       	ldi	r24, 0xB9	; 185
    2a66:	90 e2       	ldi	r25, 0x20	; 32
    2a68:	9f 93       	push	r25
    2a6a:	8f 93       	push	r24
    2a6c:	8d e1       	ldi	r24, 0x1D	; 29
    2a6e:	91 e2       	ldi	r25, 0x21	; 33
    2a70:	9f 93       	push	r25
    2a72:	8f 93       	push	r24
    2a74:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <sscanf>
				gps_t = (double) val;
    2a78:	69 81       	ldd	r22, Y+1	; 0x01
    2a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	0d d4       	rcall	.+2074   	; 0x329c <__floatsisf>
    2a82:	60 93 df 20 	sts	0x20DF, r22	; 0x8020df <gps_t>
    2a86:	70 93 e0 20 	sts	0x20E0, r23	; 0x8020e0 <gps_t+0x1>
    2a8a:	80 93 e1 20 	sts	0x20E1, r24	; 0x8020e1 <gps_t+0x2>
    2a8e:	90 93 e2 20 	sts	0x20E2, r25	; 0x8020e2 <gps_t+0x3>
				break;
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	bd c1       	rjmp	.+890    	; 0x2e1a <__vector_91+0x4e4>
    2aa0:	ee e1       	ldi	r30, 0x1E	; 30
    2aa2:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2aa6:	91 91       	ld	r25, Z+
    2aa8:	9e 32       	cpi	r25, 0x2E	; 46
    2aaa:	29 f4       	brne	.+10     	; 0x2ab6 <__vector_91+0x180>
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <__vector_91+0x17a>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2ab0:	80 93 fd 20 	sts	0x20FD, r24	; 0x8020fd <idx>
						break;
    2ab4:	03 c0       	rjmp	.+6      	; 0x2abc <__vector_91+0x186>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	8f 30       	cpi	r24, 0x0F	; 15
    2aba:	a9 f7       	brne	.-22     	; 0x2aa6 <__vector_91+0x170>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2abc:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <idx>
    2ac0:	42 2f       	mov	r20, r18
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	fa 01       	movw	r30, r20
    2ac6:	e3 5e       	subi	r30, 0xE3	; 227
    2ac8:	fe 4d       	sbci	r31, 0xDE	; 222
    2aca:	80 e2       	ldi	r24, 0x20	; 32
    2acc:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2ace:	2f 5f       	subi	r18, 0xFF	; 255
    2ad0:	2f 30       	cpi	r18, 0x0F	; 15
    2ad2:	f8 f4       	brcc	.+62     	; 0x2b12 <__vector_91+0x1dc>
					if(gps[i] == 32){
    2ad4:	82 2f       	mov	r24, r18
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	fc 01       	movw	r30, r24
    2ada:	e3 5e       	subi	r30, 0xE3	; 227
    2adc:	fe 4d       	sbci	r31, 0xDE	; 222
    2ade:	30 81       	ld	r19, Z
    2ae0:	30 32       	cpi	r19, 0x20	; 32
    2ae2:	b9 f0       	breq	.+46     	; 0x2b12 <__vector_91+0x1dc>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2ae4:	60 e2       	ldi	r22, 0x20	; 32
    2ae6:	08 c0       	rjmp	.+16     	; 0x2af8 <__vector_91+0x1c2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2ae8:	82 2f       	mov	r24, r18
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	fc 01       	movw	r30, r24
    2aee:	e3 5e       	subi	r30, 0xE3	; 227
    2af0:	fe 4d       	sbci	r31, 0xDE	; 222
    2af2:	30 81       	ld	r19, Z
    2af4:	30 32       	cpi	r19, 0x20	; 32
    2af6:	69 f0       	breq	.+26     	; 0x2b12 <__vector_91+0x1dc>
						break;
					}
					dec[i-idx-1] = gps[i];
    2af8:	fc 01       	movw	r30, r24
    2afa:	e4 1b       	sub	r30, r20
    2afc:	f5 0b       	sbc	r31, r21
    2afe:	e5 5d       	subi	r30, 0xD5	; 213
    2b00:	fe 4d       	sbci	r31, 0xDE	; 222
    2b02:	30 83       	st	Z, r19
					gps[i] = 32;
    2b04:	fc 01       	movw	r30, r24
    2b06:	e3 5e       	subi	r30, 0xE3	; 227
    2b08:	fe 4d       	sbci	r31, 0xDE	; 222
    2b0a:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2b0c:	2f 5f       	subi	r18, 0xFF	; 255
    2b0e:	2f 30       	cpi	r18, 0x0F	; 15
    2b10:	59 f7       	brne	.-42     	; 0x2ae8 <__vector_91+0x1b2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2b12:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <dec>
    2b16:	80 32       	cpi	r24, 0x20	; 32
    2b18:	19 f4       	brne	.+6      	; 0x2b20 <__vector_91+0x1ea>
					dec[0] = '0';
    2b1a:	80 e3       	ldi	r24, 0x30	; 48
    2b1c:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <dec>
				}
				sscanf(gps,"%ld",&val);
    2b20:	ce 01       	movw	r24, r28
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	9f 93       	push	r25
    2b26:	8f 93       	push	r24
    2b28:	89 eb       	ldi	r24, 0xB9	; 185
    2b2a:	90 e2       	ldi	r25, 0x20	; 32
    2b2c:	9f 93       	push	r25
    2b2e:	8f 93       	push	r24
    2b30:	8d e1       	ldi	r24, 0x1D	; 29
    2b32:	91 e2       	ldi	r25, 0x21	; 33
    2b34:	9f 93       	push	r25
    2b36:	8f 93       	push	r24
    2b38:	eb d7       	rcall	.+4054   	; 0x3b10 <sscanf>
				sscanf(dec,"%d",&val2);
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	05 96       	adiw	r24, 0x05	; 5
    2b3e:	9f 93       	push	r25
    2b40:	8f 93       	push	r24
    2b42:	8d eb       	ldi	r24, 0xBD	; 189
    2b44:	90 e2       	ldi	r25, 0x20	; 32
    2b46:	9f 93       	push	r25
    2b48:	8f 93       	push	r24
    2b4a:	8c e2       	ldi	r24, 0x2C	; 44
    2b4c:	91 e2       	ldi	r25, 0x21	; 33
    2b4e:	9f 93       	push	r25
    2b50:	8f 93       	push	r24
    2b52:	de d7       	rcall	.+4028   	; 0x3b10 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    2b54:	89 80       	ldd	r8, Y+1	; 0x01
    2b56:	9a 80       	ldd	r9, Y+2	; 0x02
    2b58:	ab 80       	ldd	r10, Y+3	; 0x03
    2b5a:	bc 80       	ldd	r11, Y+4	; 0x04
    2b5c:	6d 81       	ldd	r22, Y+5	; 0x05
    2b5e:	7e 81       	ldd	r23, Y+6	; 0x06
    2b60:	07 2e       	mov	r0, r23
    2b62:	00 0c       	add	r0, r0
    2b64:	88 0b       	sbc	r24, r24
    2b66:	99 0b       	sbc	r25, r25
    2b68:	99 d3       	rcall	.+1842   	; 0x329c <__floatsisf>
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e4       	ldi	r19, 0x40	; 64
    2b6e:	4c e1       	ldi	r20, 0x1C	; 28
    2b70:	56 e4       	ldi	r21, 0x46	; 70
    2b72:	bf d2       	rcall	.+1406   	; 0x30f2 <__divsf3>
    2b74:	6b 01       	movw	r12, r22
    2b76:	7c 01       	movw	r14, r24
    2b78:	c5 01       	movw	r24, r10
    2b7a:	b4 01       	movw	r22, r8
    2b7c:	24 e6       	ldi	r18, 0x64	; 100
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e0       	ldi	r20, 0x00	; 0
    2b82:	50 e0       	ldi	r21, 0x00	; 0
    2b84:	e7 d6       	rcall	.+3534   	; 0x3954 <__divmodsi4>
    2b86:	49 01       	movw	r8, r18
    2b88:	5a 01       	movw	r10, r20
    2b8a:	88 d3       	rcall	.+1808   	; 0x329c <__floatsisf>
    2b8c:	9b 01       	movw	r18, r22
    2b8e:	ac 01       	movw	r20, r24
    2b90:	c7 01       	movw	r24, r14
    2b92:	b6 01       	movw	r22, r12
    2b94:	cd d1       	rcall	.+922    	; 0x2f30 <__addsf3>
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e7       	ldi	r20, 0x70	; 112
    2b9c:	52 e4       	ldi	r21, 0x42	; 66
    2b9e:	a9 d2       	rcall	.+1362   	; 0x30f2 <__divsf3>
    2ba0:	6b 01       	movw	r12, r22
    2ba2:	7c 01       	movw	r14, r24
    2ba4:	c5 01       	movw	r24, r10
    2ba6:	b4 01       	movw	r22, r8
    2ba8:	79 d3       	rcall	.+1778   	; 0x329c <__floatsisf>
    2baa:	9b 01       	movw	r18, r22
    2bac:	ac 01       	movw	r20, r24
    2bae:	c7 01       	movw	r24, r14
    2bb0:	b6 01       	movw	r22, r12
    2bb2:	be d1       	rcall	.+892    	; 0x2f30 <__addsf3>
    2bb4:	60 93 db 20 	sts	0x20DB, r22	; 0x8020db <gps_lat>
    2bb8:	70 93 dc 20 	sts	0x20DC, r23	; 0x8020dc <gps_lat+0x1>
    2bbc:	80 93 dd 20 	sts	0x20DD, r24	; 0x8020dd <gps_lat+0x2>
    2bc0:	90 93 de 20 	sts	0x20DE, r25	; 0x8020de <gps_lat+0x3>
				break;
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	28 c1       	rjmp	.+592    	; 0x2e1a <__vector_91+0x4e4>
    2bca:	ee e1       	ldi	r30, 0x1E	; 30
    2bcc:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2bce:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2bd0:	91 91       	ld	r25, Z+
    2bd2:	9e 32       	cpi	r25, 0x2E	; 46
    2bd4:	29 f4       	brne	.+10     	; 0x2be0 <__vector_91+0x2aa>
    2bd6:	01 c0       	rjmp	.+2      	; 0x2bda <__vector_91+0x2a4>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2bda:	80 93 fd 20 	sts	0x20FD, r24	; 0x8020fd <idx>
						break;
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <__vector_91+0x2b0>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2be0:	8f 5f       	subi	r24, 0xFF	; 255
    2be2:	8f 30       	cpi	r24, 0x0F	; 15
    2be4:	a9 f7       	brne	.-22     	; 0x2bd0 <__vector_91+0x29a>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2be6:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <idx>
    2bea:	42 2f       	mov	r20, r18
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	fa 01       	movw	r30, r20
    2bf0:	e3 5e       	subi	r30, 0xE3	; 227
    2bf2:	fe 4d       	sbci	r31, 0xDE	; 222
    2bf4:	80 e2       	ldi	r24, 0x20	; 32
    2bf6:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2bf8:	2f 5f       	subi	r18, 0xFF	; 255
    2bfa:	2f 30       	cpi	r18, 0x0F	; 15
    2bfc:	f8 f4       	brcc	.+62     	; 0x2c3c <__vector_91+0x306>
					if(gps[i] == 32){
    2bfe:	82 2f       	mov	r24, r18
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	fc 01       	movw	r30, r24
    2c04:	e3 5e       	subi	r30, 0xE3	; 227
    2c06:	fe 4d       	sbci	r31, 0xDE	; 222
    2c08:	30 81       	ld	r19, Z
    2c0a:	30 32       	cpi	r19, 0x20	; 32
    2c0c:	b9 f0       	breq	.+46     	; 0x2c3c <__vector_91+0x306>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2c0e:	60 e2       	ldi	r22, 0x20	; 32
    2c10:	08 c0       	rjmp	.+16     	; 0x2c22 <__vector_91+0x2ec>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2c12:	82 2f       	mov	r24, r18
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	fc 01       	movw	r30, r24
    2c18:	e3 5e       	subi	r30, 0xE3	; 227
    2c1a:	fe 4d       	sbci	r31, 0xDE	; 222
    2c1c:	30 81       	ld	r19, Z
    2c1e:	30 32       	cpi	r19, 0x20	; 32
    2c20:	69 f0       	breq	.+26     	; 0x2c3c <__vector_91+0x306>
						break;
					}
					dec[i-idx-1] = gps[i];
    2c22:	fc 01       	movw	r30, r24
    2c24:	e4 1b       	sub	r30, r20
    2c26:	f5 0b       	sbc	r31, r21
    2c28:	e5 5d       	subi	r30, 0xD5	; 213
    2c2a:	fe 4d       	sbci	r31, 0xDE	; 222
    2c2c:	30 83       	st	Z, r19
					gps[i] = 32;
    2c2e:	fc 01       	movw	r30, r24
    2c30:	e3 5e       	subi	r30, 0xE3	; 227
    2c32:	fe 4d       	sbci	r31, 0xDE	; 222
    2c34:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2c36:	2f 5f       	subi	r18, 0xFF	; 255
    2c38:	2f 30       	cpi	r18, 0x0F	; 15
    2c3a:	59 f7       	brne	.-42     	; 0x2c12 <__vector_91+0x2dc>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2c3c:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <dec>
    2c40:	80 32       	cpi	r24, 0x20	; 32
    2c42:	19 f4       	brne	.+6      	; 0x2c4a <__vector_91+0x314>
					dec[0] = '0';
    2c44:	80 e3       	ldi	r24, 0x30	; 48
    2c46:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <dec>
				}
				sscanf(gps,"%ld",&val);
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	01 96       	adiw	r24, 0x01	; 1
    2c4e:	9f 93       	push	r25
    2c50:	8f 93       	push	r24
    2c52:	89 eb       	ldi	r24, 0xB9	; 185
    2c54:	90 e2       	ldi	r25, 0x20	; 32
    2c56:	9f 93       	push	r25
    2c58:	8f 93       	push	r24
    2c5a:	8d e1       	ldi	r24, 0x1D	; 29
    2c5c:	91 e2       	ldi	r25, 0x21	; 33
    2c5e:	9f 93       	push	r25
    2c60:	8f 93       	push	r24
    2c62:	56 d7       	rcall	.+3756   	; 0x3b10 <sscanf>
				sscanf(dec,"%d",&val2);
    2c64:	ce 01       	movw	r24, r28
    2c66:	05 96       	adiw	r24, 0x05	; 5
    2c68:	9f 93       	push	r25
    2c6a:	8f 93       	push	r24
    2c6c:	8d eb       	ldi	r24, 0xBD	; 189
    2c6e:	90 e2       	ldi	r25, 0x20	; 32
    2c70:	9f 93       	push	r25
    2c72:	8f 93       	push	r24
    2c74:	8c e2       	ldi	r24, 0x2C	; 44
    2c76:	91 e2       	ldi	r25, 0x21	; 33
    2c78:	9f 93       	push	r25
    2c7a:	8f 93       	push	r24
    2c7c:	49 d7       	rcall	.+3730   	; 0x3b10 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    2c7e:	89 80       	ldd	r8, Y+1	; 0x01
    2c80:	9a 80       	ldd	r9, Y+2	; 0x02
    2c82:	ab 80       	ldd	r10, Y+3	; 0x03
    2c84:	bc 80       	ldd	r11, Y+4	; 0x04
    2c86:	6d 81       	ldd	r22, Y+5	; 0x05
    2c88:	7e 81       	ldd	r23, Y+6	; 0x06
    2c8a:	07 2e       	mov	r0, r23
    2c8c:	00 0c       	add	r0, r0
    2c8e:	88 0b       	sbc	r24, r24
    2c90:	99 0b       	sbc	r25, r25
    2c92:	04 d3       	rcall	.+1544   	; 0x329c <__floatsisf>
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e4       	ldi	r19, 0x40	; 64
    2c98:	4c e1       	ldi	r20, 0x1C	; 28
    2c9a:	56 e4       	ldi	r21, 0x46	; 70
    2c9c:	2a d2       	rcall	.+1108   	; 0x30f2 <__divsf3>
    2c9e:	6b 01       	movw	r12, r22
    2ca0:	7c 01       	movw	r14, r24
    2ca2:	c5 01       	movw	r24, r10
    2ca4:	b4 01       	movw	r22, r8
    2ca6:	24 e6       	ldi	r18, 0x64	; 100
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	52 d6       	rcall	.+3236   	; 0x3954 <__divmodsi4>
    2cb0:	49 01       	movw	r8, r18
    2cb2:	5a 01       	movw	r10, r20
    2cb4:	f3 d2       	rcall	.+1510   	; 0x329c <__floatsisf>
    2cb6:	9b 01       	movw	r18, r22
    2cb8:	ac 01       	movw	r20, r24
    2cba:	c7 01       	movw	r24, r14
    2cbc:	b6 01       	movw	r22, r12
    2cbe:	38 d1       	rcall	.+624    	; 0x2f30 <__addsf3>
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e7       	ldi	r20, 0x70	; 112
    2cc6:	52 e4       	ldi	r21, 0x42	; 66
    2cc8:	14 d2       	rcall	.+1064   	; 0x30f2 <__divsf3>
    2cca:	6b 01       	movw	r12, r22
    2ccc:	7c 01       	movw	r14, r24
    2cce:	c5 01       	movw	r24, r10
    2cd0:	b4 01       	movw	r22, r8
    2cd2:	e4 d2       	rcall	.+1480   	; 0x329c <__floatsisf>
    2cd4:	9b 01       	movw	r18, r22
    2cd6:	ac 01       	movw	r20, r24
    2cd8:	c7 01       	movw	r24, r14
    2cda:	b6 01       	movw	r22, r12
    2cdc:	29 d1       	rcall	.+594    	; 0x2f30 <__addsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	b0 58       	subi	r27, 0x80	; 128
    2ce4:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <gps_long>
    2ce8:	90 93 d8 20 	sts	0x20D8, r25	; 0x8020d8 <gps_long+0x1>
    2cec:	a0 93 d9 20 	sts	0x20D9, r26	; 0x8020d9 <gps_long+0x2>
    2cf0:	b0 93 da 20 	sts	0x20DA, r27	; 0x8020da <gps_long+0x3>
    2cf4:	cd bf       	out	0x3d, r28	; 61
				break;
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	90 c0       	rjmp	.+288    	; 0x2e1a <__vector_91+0x4e4>
    2cfa:	81 ed       	ldi	r24, 0xD1	; 209
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    2cfc:	90 e2       	ldi	r25, 0x20	; 32
    2cfe:	9f 93       	push	r25
    2d00:	8f 93       	push	r24
    2d02:	8d eb       	ldi	r24, 0xBD	; 189
    2d04:	90 e2       	ldi	r25, 0x20	; 32
    2d06:	9f 93       	push	r25
    2d08:	8f 93       	push	r24
    2d0a:	8d e1       	ldi	r24, 0x1D	; 29
    2d0c:	91 e2       	ldi	r25, 0x21	; 33
    2d0e:	9f 93       	push	r25
    2d10:	8f 93       	push	r24
    2d12:	fe d6       	rcall	.+3580   	; 0x3b10 <sscanf>
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
				break;
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	7c c0       	rjmp	.+248    	; 0x2e1a <__vector_91+0x4e4>
    2d22:	ee e1       	ldi	r30, 0x1E	; 30
    2d24:	f1 e2       	ldi	r31, 0x21	; 33
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2d2a:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    2d2c:	29 f4       	brne	.+10     	; 0x2d38 <__vector_91+0x402>
    2d2e:	01 c0       	rjmp	.+2      	; 0x2d32 <__vector_91+0x3fc>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	80 93 fd 20 	sts	0x20FD, r24	; 0x8020fd <idx>
						idx = i;
    2d36:	03 c0       	rjmp	.+6      	; 0x2d3e <__vector_91+0x408>
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    2d3a:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2d3c:	a9 f7       	brne	.-22     	; 0x2d28 <__vector_91+0x3f2>
    2d3e:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2d42:	42 2f       	mov	r20, r18
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	fa 01       	movw	r30, r20
    2d48:	e3 5e       	subi	r30, 0xE3	; 227
    2d4a:	fe 4d       	sbci	r31, 0xDE	; 222
    2d4c:	80 e2       	ldi	r24, 0x20	; 32
    2d4e:	80 83       	st	Z, r24
    2d50:	2f 5f       	subi	r18, 0xFF	; 255
    2d52:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    2d54:	f8 f4       	brcc	.+62     	; 0x2d94 <__vector_91+0x45e>
    2d56:	82 2f       	mov	r24, r18
    2d58:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	e3 5e       	subi	r30, 0xE3	; 227
    2d5e:	fe 4d       	sbci	r31, 0xDE	; 222
    2d60:	30 81       	ld	r19, Z
    2d62:	30 32       	cpi	r19, 0x20	; 32
    2d64:	b9 f0       	breq	.+46     	; 0x2d94 <__vector_91+0x45e>
    2d66:	60 e2       	ldi	r22, 0x20	; 32
    2d68:	08 c0       	rjmp	.+16     	; 0x2d7a <__vector_91+0x444>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2d6a:	82 2f       	mov	r24, r18
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2d6e:	fc 01       	movw	r30, r24
    2d70:	e3 5e       	subi	r30, 0xE3	; 227
    2d72:	fe 4d       	sbci	r31, 0xDE	; 222
    2d74:	30 81       	ld	r19, Z
    2d76:	30 32       	cpi	r19, 0x20	; 32
    2d78:	69 f0       	breq	.+26     	; 0x2d94 <__vector_91+0x45e>
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    2d7e:	f5 0b       	sbc	r31, r21
    2d80:	e5 5d       	subi	r30, 0xD5	; 213
    2d82:	fe 4d       	sbci	r31, 0xDE	; 222
    2d84:	30 83       	st	Z, r19
    2d86:	fc 01       	movw	r30, r24
    2d88:	e3 5e       	subi	r30, 0xE3	; 227
					gps[i] = 32;
    2d8a:	fe 4d       	sbci	r31, 0xDE	; 222
    2d8c:	60 83       	st	Z, r22
    2d8e:	2f 5f       	subi	r18, 0xFF	; 255
    2d90:	2f 30       	cpi	r18, 0x0F	; 15
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2d92:	59 f7       	brne	.-42     	; 0x2d6a <__vector_91+0x434>
    2d94:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2d98:	80 32       	cpi	r24, 0x20	; 32
    2d9a:	19 f4       	brne	.+6      	; 0x2da2 <__vector_91+0x46c>
    2d9c:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    2d9e:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <dec>
    2da2:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    2da4:	01 96       	adiw	r24, 0x01	; 1
    2da6:	9f 93       	push	r25
    2da8:	8f 93       	push	r24
    2daa:	89 eb       	ldi	r24, 0xB9	; 185
    2dac:	90 e2       	ldi	r25, 0x20	; 32
    2dae:	9f 93       	push	r25
    2db0:	8f 93       	push	r24
    2db2:	8d e1       	ldi	r24, 0x1D	; 29
    2db4:	91 e2       	ldi	r25, 0x21	; 33
    2db6:	9f 93       	push	r25
    2db8:	8f 93       	push	r24
    2dba:	aa d6       	rcall	.+3412   	; 0x3b10 <sscanf>
				sscanf(dec,"%d",&val2);
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	05 96       	adiw	r24, 0x05	; 5
    2dc0:	9f 93       	push	r25
    2dc2:	8f 93       	push	r24
    2dc4:	8d eb       	ldi	r24, 0xBD	; 189
    2dc6:	90 e2       	ldi	r25, 0x20	; 32
    2dc8:	9f 93       	push	r25
    2dca:	8f 93       	push	r24
    2dcc:	8c e2       	ldi	r24, 0x2C	; 44
    2dce:	91 e2       	ldi	r25, 0x21	; 33
    2dd0:	9f 93       	push	r25
    2dd2:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    2dd4:	9d d6       	rcall	.+3386   	; 0x3b10 <sscanf>
    2dd6:	69 81       	ldd	r22, Y+1	; 0x01
    2dd8:	7a 81       	ldd	r23, Y+2	; 0x02
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dde:	5e d2       	rcall	.+1212   	; 0x329c <__floatsisf>
    2de0:	6b 01       	movw	r12, r22
    2de2:	7c 01       	movw	r14, r24
    2de4:	6d 81       	ldd	r22, Y+5	; 0x05
    2de6:	7e 81       	ldd	r23, Y+6	; 0x06
    2de8:	07 2e       	mov	r0, r23
    2dea:	00 0c       	add	r0, r0
    2dec:	88 0b       	sbc	r24, r24
    2dee:	99 0b       	sbc	r25, r25
    2df0:	55 d2       	rcall	.+1194   	; 0x329c <__floatsisf>
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e2       	ldi	r20, 0x20	; 32
    2df8:	51 e4       	ldi	r21, 0x41	; 65
    2dfa:	7b d1       	rcall	.+758    	; 0x30f2 <__divsf3>
    2dfc:	9b 01       	movw	r18, r22
    2dfe:	ac 01       	movw	r20, r24
    2e00:	c7 01       	movw	r24, r14
    2e02:	b6 01       	movw	r22, r12
    2e04:	95 d0       	rcall	.+298    	; 0x2f30 <__addsf3>
    2e06:	60 93 d3 20 	sts	0x20D3, r22	; 0x8020d3 <gps_alt>
    2e0a:	70 93 d4 20 	sts	0x20D4, r23	; 0x8020d4 <gps_alt+0x1>
    2e0e:	80 93 d5 20 	sts	0x20D5, r24	; 0x8020d5 <gps_alt+0x2>
    2e12:	90 93 d6 20 	sts	0x20D6, r25	; 0x8020d6 <gps_alt+0x3>
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	de bf       	out	0x3e, r29	; 62
				break;
    2e1a:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <writing>
		}
	
		if(writing){
    2e1e:	88 23       	and	r24, r24
    2e20:	d1 f0       	breq	.+52     	; 0x2e56 <__vector_91+0x520>
    2e22:	10 92 fd 20 	sts	0x20FD, r1	; 0x8020fd <idx>
			idx = 0;
    2e26:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <commas>
			commas++;
    2e2a:	8f 5f       	subi	r24, 0xFF	; 255
    2e2c:	80 93 fe 20 	sts	0x20FE, r24	; 0x8020fe <commas>
    2e30:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <word_pos>
			word_pos = 0;
    2e34:	ed e1       	ldi	r30, 0x1D	; 29
    2e36:	f1 e2       	ldi	r31, 0x21	; 33
    2e38:	2c e2       	ldi	r18, 0x2C	; 44
    2e3a:	31 e2       	ldi	r19, 0x21	; 33
    2e3c:	80 e2       	ldi	r24, 0x20	; 32
    2e3e:	81 93       	st	Z+, r24
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2e40:	2e 17       	cp	r18, r30
    2e42:	3f 07       	cpc	r19, r31
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2e44:	e1 f7       	brne	.-8      	; 0x2e3e <__vector_91+0x508>
    2e46:	ec e2       	ldi	r30, 0x2C	; 44
    2e48:	f1 e2       	ldi	r31, 0x21	; 33
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2e4a:	80 e2       	ldi	r24, 0x20	; 32
    2e4c:	80 83       	st	Z, r24
    2e4e:	81 83       	std	Z+1, r24	; 0x01
    2e50:	82 83       	std	Z+2, r24	; 0x02
    2e52:	83 83       	std	Z+3, r24	; 0x03
    2e54:	84 83       	std	Z+4, r24	; 0x04
    2e56:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <writing>
			}
		}
	}
		
	if(writing){
    2e5a:	88 23       	and	r24, r24
    2e5c:	09 f4       	brne	.+2      	; 0x2e60 <__vector_91+0x52a>
    2e5e:	40 c0       	rjmp	.+128    	; 0x2ee0 <__vector_91+0x5aa>
    2e60:	90 91 00 21 	lds	r25, 0x2100	; 0x802100 <pos>
		switch(pos){
    2e64:	93 30       	cpi	r25, 0x03	; 3
    2e66:	19 f0       	breq	.+6      	; 0x2e6e <__vector_91+0x538>
    2e68:	94 30       	cpi	r25, 0x04	; 4
    2e6a:	31 f0       	breq	.+12     	; 0x2e78 <__vector_91+0x542>
    2e6c:	09 c0       	rjmp	.+18     	; 0x2e80 <__vector_91+0x54a>
    2e6e:	17 34       	cpi	r17, 0x47	; 71
    2e70:	39 f0       	breq	.+14     	; 0x2e80 <__vector_91+0x54a>
			case 3:
				if(c != 'G'){
    2e72:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <writing>
					writing = 0;
    2e76:	04 c0       	rjmp	.+8      	; 0x2e80 <__vector_91+0x54a>
    2e78:	17 34       	cpi	r17, 0x47	; 71
    2e7a:	11 f0       	breq	.+4      	; 0x2e80 <__vector_91+0x54a>
				}
				break;
				
			case 4:
				if(c != 'G'){
    2e7c:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <writing>
					writing = 0;
    2e80:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <word_pos>
				}
				break;
		}
		gps[word_pos] = c;
    2e84:	e8 2f       	mov	r30, r24
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	e3 5e       	subi	r30, 0xE3	; 227
    2e8a:	fe 4d       	sbci	r31, 0xDE	; 222
    2e8c:	10 83       	st	Z, r17
    2e8e:	8f 5f       	subi	r24, 0xFF	; 255
    2e90:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <word_pos>
		word_pos++;
    2e94:	9f 5f       	subi	r25, 0xFF	; 255
    2e96:	90 93 00 21 	sts	0x2100, r25	; 0x802100 <pos>
		pos++;
    2e9a:	22 c0       	rjmp	.+68     	; 0x2ee0 <__vector_91+0x5aa>
    2e9c:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <gps>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2ea0:	8e 32       	cpi	r24, 0x2E	; 46
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <__vector_91+0x570>
    2ea4:	b0 cd       	rjmp	.-1184   	; 0x2a06 <__vector_91+0xd0>
    2ea6:	ee e1       	ldi	r30, 0x1E	; 30
    2ea8:	f1 e2       	ldi	r31, 0x21	; 33
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	a8 cd       	rjmp	.-1200   	; 0x29fe <__vector_91+0xc8>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2eae:	19 82       	std	Y+1, r1	; 0x01
    2eb0:	1a 82       	std	Y+2, r1	; 0x02
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    2eb2:	1b 82       	std	Y+3, r1	; 0x03
    2eb4:	1c 82       	std	Y+4, r1	; 0x04
    2eb6:	1d 82       	std	Y+5, r1	; 0x05
    2eb8:	1e 82       	std	Y+6, r1	; 0x06
		int16_t val2 = 0;
    2eba:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <commas>
		switch(commas){
    2ebe:	84 30       	cpi	r24, 0x04	; 4
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <__vector_91+0x58e>
    2ec2:	91 cd       	rjmp	.-1246   	; 0x29e6 <__vector_91+0xb0>
    2ec4:	30 f4       	brcc	.+12     	; 0x2ed2 <__vector_91+0x59c>
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	49 f3       	breq	.-46     	; 0x2e9c <__vector_91+0x566>
    2eca:	82 30       	cpi	r24, 0x02	; 2
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <__vector_91+0x59a>
    2ece:	91 cd       	rjmp	.-1246   	; 0x29f2 <__vector_91+0xbc>
    2ed0:	a4 cf       	rjmp	.-184    	; 0x2e1a <__vector_91+0x4e4>
    2ed2:	87 30       	cpi	r24, 0x07	; 7
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <__vector_91+0x5a2>
    2ed6:	11 cf       	rjmp	.-478    	; 0x2cfa <__vector_91+0x3c4>
    2ed8:	89 30       	cpi	r24, 0x09	; 9
    2eda:	09 f4       	brne	.+2      	; 0x2ede <__vector_91+0x5a8>
    2edc:	7e cd       	rjmp	.-1284   	; 0x29da <__vector_91+0xa4>
    2ede:	9d cf       	rjmp	.-198    	; 0x2e1a <__vector_91+0x4e4>
    2ee0:	26 96       	adiw	r28, 0x06	; 6
    2ee2:	cd bf       	out	0x3d, r28	; 61
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	ff 91       	pop	r31
    2eec:	ef 91       	pop	r30
    2eee:	bf 91       	pop	r27
    2ef0:	af 91       	pop	r26
    2ef2:	9f 91       	pop	r25
    2ef4:	8f 91       	pop	r24
    2ef6:	7f 91       	pop	r23
    2ef8:	6f 91       	pop	r22
    2efa:	5f 91       	pop	r21
    2efc:	4f 91       	pop	r20
    2efe:	3f 91       	pop	r19
    2f00:	2f 91       	pop	r18
    2f02:	1f 91       	pop	r17
    2f04:	ff 90       	pop	r15
    2f06:	ef 90       	pop	r14
    2f08:	df 90       	pop	r13
    2f0a:	cf 90       	pop	r12
    2f0c:	bf 90       	pop	r11
    2f0e:	af 90       	pop	r10
    2f10:	9f 90       	pop	r9
    2f12:	8f 90       	pop	r8
    2f14:	0f 90       	pop	r0
    2f16:	0b be       	out	0x3b, r0	; 59
    2f18:	0f 90       	pop	r0
    2f1a:	0a be       	out	0x3a, r0	; 58
    2f1c:	0f 90       	pop	r0
    2f1e:	09 be       	out	0x39, r0	; 57
    2f20:	0f 90       	pop	r0
    2f22:	08 be       	out	0x38, r0	; 56
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <__subsf3>:
    2f2e:	50 58       	subi	r21, 0x80	; 128

00002f30 <__addsf3>:
    2f30:	bb 27       	eor	r27, r27
    2f32:	aa 27       	eor	r26, r26
    2f34:	0e d0       	rcall	.+28     	; 0x2f52 <__addsf3x>
    2f36:	89 c2       	rjmp	.+1298   	; 0x344a <__fp_round>
    2f38:	7a d2       	rcall	.+1268   	; 0x342e <__fp_pscA>
    2f3a:	30 f0       	brcs	.+12     	; 0x2f48 <__addsf3+0x18>
    2f3c:	7f d2       	rcall	.+1278   	; 0x343c <__fp_pscB>
    2f3e:	20 f0       	brcs	.+8      	; 0x2f48 <__addsf3+0x18>
    2f40:	31 f4       	brne	.+12     	; 0x2f4e <__addsf3+0x1e>
    2f42:	9f 3f       	cpi	r25, 0xFF	; 255
    2f44:	11 f4       	brne	.+4      	; 0x2f4a <__addsf3+0x1a>
    2f46:	1e f4       	brtc	.+6      	; 0x2f4e <__addsf3+0x1e>
    2f48:	29 c2       	rjmp	.+1106   	; 0x339c <__fp_nan>
    2f4a:	0e f4       	brtc	.+2      	; 0x2f4e <__addsf3+0x1e>
    2f4c:	e0 95       	com	r30
    2f4e:	e7 fb       	bst	r30, 7
    2f50:	1f c2       	rjmp	.+1086   	; 0x3390 <__fp_inf>

00002f52 <__addsf3x>:
    2f52:	e9 2f       	mov	r30, r25
    2f54:	8b d2       	rcall	.+1302   	; 0x346c <__fp_split3>
    2f56:	80 f3       	brcs	.-32     	; 0x2f38 <__addsf3+0x8>
    2f58:	ba 17       	cp	r27, r26
    2f5a:	62 07       	cpc	r22, r18
    2f5c:	73 07       	cpc	r23, r19
    2f5e:	84 07       	cpc	r24, r20
    2f60:	95 07       	cpc	r25, r21
    2f62:	18 f0       	brcs	.+6      	; 0x2f6a <__addsf3x+0x18>
    2f64:	71 f4       	brne	.+28     	; 0x2f82 <__addsf3x+0x30>
    2f66:	9e f5       	brtc	.+102    	; 0x2fce <__addsf3x+0x7c>
    2f68:	a3 c2       	rjmp	.+1350   	; 0x34b0 <__fp_zero>
    2f6a:	0e f4       	brtc	.+2      	; 0x2f6e <__addsf3x+0x1c>
    2f6c:	e0 95       	com	r30
    2f6e:	0b 2e       	mov	r0, r27
    2f70:	ba 2f       	mov	r27, r26
    2f72:	a0 2d       	mov	r26, r0
    2f74:	0b 01       	movw	r0, r22
    2f76:	b9 01       	movw	r22, r18
    2f78:	90 01       	movw	r18, r0
    2f7a:	0c 01       	movw	r0, r24
    2f7c:	ca 01       	movw	r24, r20
    2f7e:	a0 01       	movw	r20, r0
    2f80:	11 24       	eor	r1, r1
    2f82:	ff 27       	eor	r31, r31
    2f84:	59 1b       	sub	r21, r25
    2f86:	99 f0       	breq	.+38     	; 0x2fae <__addsf3x+0x5c>
    2f88:	59 3f       	cpi	r21, 0xF9	; 249
    2f8a:	50 f4       	brcc	.+20     	; 0x2fa0 <__addsf3x+0x4e>
    2f8c:	50 3e       	cpi	r21, 0xE0	; 224
    2f8e:	68 f1       	brcs	.+90     	; 0x2fea <__addsf3x+0x98>
    2f90:	1a 16       	cp	r1, r26
    2f92:	f0 40       	sbci	r31, 0x00	; 0
    2f94:	a2 2f       	mov	r26, r18
    2f96:	23 2f       	mov	r18, r19
    2f98:	34 2f       	mov	r19, r20
    2f9a:	44 27       	eor	r20, r20
    2f9c:	58 5f       	subi	r21, 0xF8	; 248
    2f9e:	f3 cf       	rjmp	.-26     	; 0x2f86 <__addsf3x+0x34>
    2fa0:	46 95       	lsr	r20
    2fa2:	37 95       	ror	r19
    2fa4:	27 95       	ror	r18
    2fa6:	a7 95       	ror	r26
    2fa8:	f0 40       	sbci	r31, 0x00	; 0
    2faa:	53 95       	inc	r21
    2fac:	c9 f7       	brne	.-14     	; 0x2fa0 <__addsf3x+0x4e>
    2fae:	7e f4       	brtc	.+30     	; 0x2fce <__addsf3x+0x7c>
    2fb0:	1f 16       	cp	r1, r31
    2fb2:	ba 0b       	sbc	r27, r26
    2fb4:	62 0b       	sbc	r22, r18
    2fb6:	73 0b       	sbc	r23, r19
    2fb8:	84 0b       	sbc	r24, r20
    2fba:	ba f0       	brmi	.+46     	; 0x2fea <__addsf3x+0x98>
    2fbc:	91 50       	subi	r25, 0x01	; 1
    2fbe:	a1 f0       	breq	.+40     	; 0x2fe8 <__addsf3x+0x96>
    2fc0:	ff 0f       	add	r31, r31
    2fc2:	bb 1f       	adc	r27, r27
    2fc4:	66 1f       	adc	r22, r22
    2fc6:	77 1f       	adc	r23, r23
    2fc8:	88 1f       	adc	r24, r24
    2fca:	c2 f7       	brpl	.-16     	; 0x2fbc <__addsf3x+0x6a>
    2fcc:	0e c0       	rjmp	.+28     	; 0x2fea <__addsf3x+0x98>
    2fce:	ba 0f       	add	r27, r26
    2fd0:	62 1f       	adc	r22, r18
    2fd2:	73 1f       	adc	r23, r19
    2fd4:	84 1f       	adc	r24, r20
    2fd6:	48 f4       	brcc	.+18     	; 0x2fea <__addsf3x+0x98>
    2fd8:	87 95       	ror	r24
    2fda:	77 95       	ror	r23
    2fdc:	67 95       	ror	r22
    2fde:	b7 95       	ror	r27
    2fe0:	f7 95       	ror	r31
    2fe2:	9e 3f       	cpi	r25, 0xFE	; 254
    2fe4:	08 f0       	brcs	.+2      	; 0x2fe8 <__addsf3x+0x96>
    2fe6:	b3 cf       	rjmp	.-154    	; 0x2f4e <__addsf3+0x1e>
    2fe8:	93 95       	inc	r25
    2fea:	88 0f       	add	r24, r24
    2fec:	08 f0       	brcs	.+2      	; 0x2ff0 <__addsf3x+0x9e>
    2fee:	99 27       	eor	r25, r25
    2ff0:	ee 0f       	add	r30, r30
    2ff2:	97 95       	ror	r25
    2ff4:	87 95       	ror	r24
    2ff6:	08 95       	ret

00002ff8 <asin>:
    2ff8:	9f 93       	push	r25
    2ffa:	9f 77       	andi	r25, 0x7F	; 127
    2ffc:	ee e3       	ldi	r30, 0x3E	; 62
    2ffe:	89 37       	cpi	r24, 0x79	; 121
    3000:	9e 07       	cpc	r25, r30
    3002:	20 f4       	brcc	.+8      	; 0x300c <asin+0x14>
    3004:	ec ef       	ldi	r30, 0xFC	; 252
    3006:	f1 e0       	ldi	r31, 0x01	; 1
    3008:	01 d2       	rcall	.+1026   	; 0x340c <__fp_powsodd>
    300a:	09 c0       	rjmp	.+18     	; 0x301e <asin+0x26>
    300c:	82 d1       	rcall	.+772    	; 0x3312 <__fp_arccos>
    300e:	90 58       	subi	r25, 0x80	; 128
    3010:	a2 ea       	ldi	r26, 0xA2	; 162
    3012:	2a ed       	ldi	r18, 0xDA	; 218
    3014:	3f e0       	ldi	r19, 0x0F	; 15
    3016:	49 ec       	ldi	r20, 0xC9	; 201
    3018:	5f e3       	ldi	r21, 0x3F	; 63
    301a:	9b df       	rcall	.-202    	; 0x2f52 <__addsf3x>
    301c:	16 d2       	rcall	.+1068   	; 0x344a <__fp_round>
    301e:	0f 90       	pop	r0
    3020:	07 fc       	sbrc	r0, 7
    3022:	90 58       	subi	r25, 0x80	; 128
    3024:	08 95       	ret
    3026:	03 d2       	rcall	.+1030   	; 0x342e <__fp_pscA>
    3028:	58 f0       	brcs	.+22     	; 0x3040 <asin+0x48>
    302a:	80 e8       	ldi	r24, 0x80	; 128
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	09 f4       	brne	.+2      	; 0x3032 <asin+0x3a>
    3030:	9e ef       	ldi	r25, 0xFE	; 254
    3032:	04 d2       	rcall	.+1032   	; 0x343c <__fp_pscB>
    3034:	28 f0       	brcs	.+10     	; 0x3040 <asin+0x48>
    3036:	40 e8       	ldi	r20, 0x80	; 128
    3038:	51 e0       	ldi	r21, 0x01	; 1
    303a:	59 f4       	brne	.+22     	; 0x3052 <atan2+0xe>
    303c:	5e ef       	ldi	r21, 0xFE	; 254
    303e:	09 c0       	rjmp	.+18     	; 0x3052 <atan2+0xe>
    3040:	ad c1       	rjmp	.+858    	; 0x339c <__fp_nan>
    3042:	36 c2       	rjmp	.+1132   	; 0x34b0 <__fp_zero>

00003044 <atan2>:
    3044:	e9 2f       	mov	r30, r25
    3046:	e0 78       	andi	r30, 0x80	; 128
    3048:	11 d2       	rcall	.+1058   	; 0x346c <__fp_split3>
    304a:	68 f3       	brcs	.-38     	; 0x3026 <asin+0x2e>
    304c:	09 2e       	mov	r0, r25
    304e:	05 2a       	or	r0, r21
    3050:	c1 f3       	breq	.-16     	; 0x3042 <asin+0x4a>
    3052:	26 17       	cp	r18, r22
    3054:	37 07       	cpc	r19, r23
    3056:	48 07       	cpc	r20, r24
    3058:	59 07       	cpc	r21, r25
    305a:	38 f0       	brcs	.+14     	; 0x306a <atan2+0x26>
    305c:	0e 2e       	mov	r0, r30
    305e:	07 f8       	bld	r0, 7
    3060:	e0 25       	eor	r30, r0
    3062:	69 f0       	breq	.+26     	; 0x307e <atan2+0x3a>
    3064:	e0 25       	eor	r30, r0
    3066:	e0 64       	ori	r30, 0x40	; 64
    3068:	0a c0       	rjmp	.+20     	; 0x307e <atan2+0x3a>
    306a:	ef 63       	ori	r30, 0x3F	; 63
    306c:	07 f8       	bld	r0, 7
    306e:	00 94       	com	r0
    3070:	07 fa       	bst	r0, 7
    3072:	db 01       	movw	r26, r22
    3074:	b9 01       	movw	r22, r18
    3076:	9d 01       	movw	r18, r26
    3078:	dc 01       	movw	r26, r24
    307a:	ca 01       	movw	r24, r20
    307c:	ad 01       	movw	r20, r26
    307e:	ef 93       	push	r30
    3080:	47 d0       	rcall	.+142    	; 0x3110 <__divsf3_pse>
    3082:	e3 d1       	rcall	.+966    	; 0x344a <__fp_round>
    3084:	0a d0       	rcall	.+20     	; 0x309a <atan>
    3086:	5f 91       	pop	r21
    3088:	55 23       	and	r21, r21
    308a:	31 f0       	breq	.+12     	; 0x3098 <atan2+0x54>
    308c:	2b ed       	ldi	r18, 0xDB	; 219
    308e:	3f e0       	ldi	r19, 0x0F	; 15
    3090:	49 e4       	ldi	r20, 0x49	; 73
    3092:	50 fd       	sbrc	r21, 0
    3094:	49 ec       	ldi	r20, 0xC9	; 201
    3096:	4c cf       	rjmp	.-360    	; 0x2f30 <__addsf3>
    3098:	08 95       	ret

0000309a <atan>:
    309a:	df 93       	push	r29
    309c:	dd 27       	eor	r29, r29
    309e:	b9 2f       	mov	r27, r25
    30a0:	bf 77       	andi	r27, 0x7F	; 127
    30a2:	40 e8       	ldi	r20, 0x80	; 128
    30a4:	5f e3       	ldi	r21, 0x3F	; 63
    30a6:	16 16       	cp	r1, r22
    30a8:	17 06       	cpc	r1, r23
    30aa:	48 07       	cpc	r20, r24
    30ac:	5b 07       	cpc	r21, r27
    30ae:	10 f4       	brcc	.+4      	; 0x30b4 <atan+0x1a>
    30b0:	d9 2f       	mov	r29, r25
    30b2:	09 d2       	rcall	.+1042   	; 0x34c6 <inverse>
    30b4:	9f 93       	push	r25
    30b6:	8f 93       	push	r24
    30b8:	7f 93       	push	r23
    30ba:	6f 93       	push	r22
    30bc:	fc d2       	rcall	.+1528   	; 0x36b6 <square>
    30be:	e0 e1       	ldi	r30, 0x10	; 16
    30c0:	f2 e0       	ldi	r31, 0x02	; 2
    30c2:	7f d1       	rcall	.+766    	; 0x33c2 <__fp_powser>
    30c4:	c2 d1       	rcall	.+900    	; 0x344a <__fp_round>
    30c6:	2f 91       	pop	r18
    30c8:	3f 91       	pop	r19
    30ca:	4f 91       	pop	r20
    30cc:	5f 91       	pop	r21
    30ce:	0e d2       	rcall	.+1052   	; 0x34ec <__mulsf3x>
    30d0:	dd 23       	and	r29, r29
    30d2:	49 f0       	breq	.+18     	; 0x30e6 <atan+0x4c>
    30d4:	90 58       	subi	r25, 0x80	; 128
    30d6:	a2 ea       	ldi	r26, 0xA2	; 162
    30d8:	2a ed       	ldi	r18, 0xDA	; 218
    30da:	3f e0       	ldi	r19, 0x0F	; 15
    30dc:	49 ec       	ldi	r20, 0xC9	; 201
    30de:	5f e3       	ldi	r21, 0x3F	; 63
    30e0:	d0 78       	andi	r29, 0x80	; 128
    30e2:	5d 27       	eor	r21, r29
    30e4:	36 df       	rcall	.-404    	; 0x2f52 <__addsf3x>
    30e6:	df 91       	pop	r29
    30e8:	b0 c1       	rjmp	.+864    	; 0x344a <__fp_round>

000030ea <__cmpsf2>:
    30ea:	2e d1       	rcall	.+604    	; 0x3348 <__fp_cmp>
    30ec:	08 f4       	brcc	.+2      	; 0x30f0 <__cmpsf2+0x6>
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	08 95       	ret

000030f2 <__divsf3>:
    30f2:	0c d0       	rcall	.+24     	; 0x310c <__divsf3x>
    30f4:	aa c1       	rjmp	.+852    	; 0x344a <__fp_round>
    30f6:	a2 d1       	rcall	.+836    	; 0x343c <__fp_pscB>
    30f8:	40 f0       	brcs	.+16     	; 0x310a <__divsf3+0x18>
    30fa:	99 d1       	rcall	.+818    	; 0x342e <__fp_pscA>
    30fc:	30 f0       	brcs	.+12     	; 0x310a <__divsf3+0x18>
    30fe:	21 f4       	brne	.+8      	; 0x3108 <__divsf3+0x16>
    3100:	5f 3f       	cpi	r21, 0xFF	; 255
    3102:	19 f0       	breq	.+6      	; 0x310a <__divsf3+0x18>
    3104:	45 c1       	rjmp	.+650    	; 0x3390 <__fp_inf>
    3106:	51 11       	cpse	r21, r1
    3108:	d4 c1       	rjmp	.+936    	; 0x34b2 <__fp_szero>
    310a:	48 c1       	rjmp	.+656    	; 0x339c <__fp_nan>

0000310c <__divsf3x>:
    310c:	af d1       	rcall	.+862    	; 0x346c <__fp_split3>
    310e:	98 f3       	brcs	.-26     	; 0x30f6 <__divsf3+0x4>

00003110 <__divsf3_pse>:
    3110:	99 23       	and	r25, r25
    3112:	c9 f3       	breq	.-14     	; 0x3106 <__divsf3+0x14>
    3114:	55 23       	and	r21, r21
    3116:	b1 f3       	breq	.-20     	; 0x3104 <__divsf3+0x12>
    3118:	95 1b       	sub	r25, r21
    311a:	55 0b       	sbc	r21, r21
    311c:	bb 27       	eor	r27, r27
    311e:	aa 27       	eor	r26, r26
    3120:	62 17       	cp	r22, r18
    3122:	73 07       	cpc	r23, r19
    3124:	84 07       	cpc	r24, r20
    3126:	38 f0       	brcs	.+14     	; 0x3136 <__divsf3_pse+0x26>
    3128:	9f 5f       	subi	r25, 0xFF	; 255
    312a:	5f 4f       	sbci	r21, 0xFF	; 255
    312c:	22 0f       	add	r18, r18
    312e:	33 1f       	adc	r19, r19
    3130:	44 1f       	adc	r20, r20
    3132:	aa 1f       	adc	r26, r26
    3134:	a9 f3       	breq	.-22     	; 0x3120 <__divsf3_pse+0x10>
    3136:	33 d0       	rcall	.+102    	; 0x319e <__divsf3_pse+0x8e>
    3138:	0e 2e       	mov	r0, r30
    313a:	3a f0       	brmi	.+14     	; 0x314a <__divsf3_pse+0x3a>
    313c:	e0 e8       	ldi	r30, 0x80	; 128
    313e:	30 d0       	rcall	.+96     	; 0x31a0 <__divsf3_pse+0x90>
    3140:	91 50       	subi	r25, 0x01	; 1
    3142:	50 40       	sbci	r21, 0x00	; 0
    3144:	e6 95       	lsr	r30
    3146:	00 1c       	adc	r0, r0
    3148:	ca f7       	brpl	.-14     	; 0x313c <__divsf3_pse+0x2c>
    314a:	29 d0       	rcall	.+82     	; 0x319e <__divsf3_pse+0x8e>
    314c:	fe 2f       	mov	r31, r30
    314e:	27 d0       	rcall	.+78     	; 0x319e <__divsf3_pse+0x8e>
    3150:	66 0f       	add	r22, r22
    3152:	77 1f       	adc	r23, r23
    3154:	88 1f       	adc	r24, r24
    3156:	bb 1f       	adc	r27, r27
    3158:	26 17       	cp	r18, r22
    315a:	37 07       	cpc	r19, r23
    315c:	48 07       	cpc	r20, r24
    315e:	ab 07       	cpc	r26, r27
    3160:	b0 e8       	ldi	r27, 0x80	; 128
    3162:	09 f0       	breq	.+2      	; 0x3166 <__divsf3_pse+0x56>
    3164:	bb 0b       	sbc	r27, r27
    3166:	80 2d       	mov	r24, r0
    3168:	bf 01       	movw	r22, r30
    316a:	ff 27       	eor	r31, r31
    316c:	93 58       	subi	r25, 0x83	; 131
    316e:	5f 4f       	sbci	r21, 0xFF	; 255
    3170:	2a f0       	brmi	.+10     	; 0x317c <__divsf3_pse+0x6c>
    3172:	9e 3f       	cpi	r25, 0xFE	; 254
    3174:	51 05       	cpc	r21, r1
    3176:	68 f0       	brcs	.+26     	; 0x3192 <__divsf3_pse+0x82>
    3178:	0b c1       	rjmp	.+534    	; 0x3390 <__fp_inf>
    317a:	9b c1       	rjmp	.+822    	; 0x34b2 <__fp_szero>
    317c:	5f 3f       	cpi	r21, 0xFF	; 255
    317e:	ec f3       	brlt	.-6      	; 0x317a <__divsf3_pse+0x6a>
    3180:	98 3e       	cpi	r25, 0xE8	; 232
    3182:	dc f3       	brlt	.-10     	; 0x317a <__divsf3_pse+0x6a>
    3184:	86 95       	lsr	r24
    3186:	77 95       	ror	r23
    3188:	67 95       	ror	r22
    318a:	b7 95       	ror	r27
    318c:	f7 95       	ror	r31
    318e:	9f 5f       	subi	r25, 0xFF	; 255
    3190:	c9 f7       	brne	.-14     	; 0x3184 <__divsf3_pse+0x74>
    3192:	88 0f       	add	r24, r24
    3194:	91 1d       	adc	r25, r1
    3196:	96 95       	lsr	r25
    3198:	87 95       	ror	r24
    319a:	97 f9       	bld	r25, 7
    319c:	08 95       	ret
    319e:	e1 e0       	ldi	r30, 0x01	; 1
    31a0:	66 0f       	add	r22, r22
    31a2:	77 1f       	adc	r23, r23
    31a4:	88 1f       	adc	r24, r24
    31a6:	bb 1f       	adc	r27, r27
    31a8:	62 17       	cp	r22, r18
    31aa:	73 07       	cpc	r23, r19
    31ac:	84 07       	cpc	r24, r20
    31ae:	ba 07       	cpc	r27, r26
    31b0:	20 f0       	brcs	.+8      	; 0x31ba <__divsf3_pse+0xaa>
    31b2:	62 1b       	sub	r22, r18
    31b4:	73 0b       	sbc	r23, r19
    31b6:	84 0b       	sbc	r24, r20
    31b8:	ba 0b       	sbc	r27, r26
    31ba:	ee 1f       	adc	r30, r30
    31bc:	88 f7       	brcc	.-30     	; 0x31a0 <__divsf3_pse+0x90>
    31be:	e0 95       	com	r30
    31c0:	08 95       	ret

000031c2 <__fixsfdi>:
    31c2:	be e3       	ldi	r27, 0x3E	; 62
    31c4:	04 d0       	rcall	.+8      	; 0x31ce <__fixunssfdi+0x2>
    31c6:	08 f4       	brcc	.+2      	; 0x31ca <__fixsfdi+0x8>
    31c8:	90 e8       	ldi	r25, 0x80	; 128
    31ca:	08 95       	ret

000031cc <__fixunssfdi>:
    31cc:	bf e3       	ldi	r27, 0x3F	; 63
    31ce:	22 27       	eor	r18, r18
    31d0:	33 27       	eor	r19, r19
    31d2:	a9 01       	movw	r20, r18
    31d4:	53 d1       	rcall	.+678    	; 0x347c <__fp_splitA>
    31d6:	58 f1       	brcs	.+86     	; 0x322e <__fixunssfdi+0x62>
    31d8:	9f 57       	subi	r25, 0x7F	; 127
    31da:	40 f1       	brcs	.+80     	; 0x322c <__fixunssfdi+0x60>
    31dc:	b9 17       	cp	r27, r25
    31de:	38 f1       	brcs	.+78     	; 0x322e <__fixunssfdi+0x62>
    31e0:	bf e3       	ldi	r27, 0x3F	; 63
    31e2:	b9 1b       	sub	r27, r25
    31e4:	99 27       	eor	r25, r25
    31e6:	b8 50       	subi	r27, 0x08	; 8
    31e8:	3a f4       	brpl	.+14     	; 0x31f8 <__fixunssfdi+0x2c>
    31ea:	66 0f       	add	r22, r22
    31ec:	77 1f       	adc	r23, r23
    31ee:	88 1f       	adc	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	b3 95       	inc	r27
    31f4:	d2 f3       	brmi	.-12     	; 0x31ea <__fixunssfdi+0x1e>
    31f6:	16 c0       	rjmp	.+44     	; 0x3224 <__fixunssfdi+0x58>
    31f8:	b8 50       	subi	r27, 0x08	; 8
    31fa:	4a f0       	brmi	.+18     	; 0x320e <__fixunssfdi+0x42>
    31fc:	23 2f       	mov	r18, r19
    31fe:	34 2f       	mov	r19, r20
    3200:	45 2f       	mov	r20, r21
    3202:	56 2f       	mov	r21, r22
    3204:	67 2f       	mov	r22, r23
    3206:	78 2f       	mov	r23, r24
    3208:	88 27       	eor	r24, r24
    320a:	b8 50       	subi	r27, 0x08	; 8
    320c:	ba f7       	brpl	.-18     	; 0x31fc <__fixunssfdi+0x30>
    320e:	b8 5f       	subi	r27, 0xF8	; 248
    3210:	49 f0       	breq	.+18     	; 0x3224 <__fixunssfdi+0x58>
    3212:	86 95       	lsr	r24
    3214:	77 95       	ror	r23
    3216:	67 95       	ror	r22
    3218:	57 95       	ror	r21
    321a:	47 95       	ror	r20
    321c:	37 95       	ror	r19
    321e:	27 95       	ror	r18
    3220:	ba 95       	dec	r27
    3222:	b9 f7       	brne	.-18     	; 0x3212 <__fixunssfdi+0x46>
    3224:	0e f4       	brtc	.+2      	; 0x3228 <__fixunssfdi+0x5c>
    3226:	bd d0       	rcall	.+378    	; 0x33a2 <__fp_negdi>
    3228:	88 94       	clc
    322a:	08 95       	ret
    322c:	88 94       	clc
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	70 e0       	ldi	r23, 0x00	; 0
    3232:	cb 01       	movw	r24, r22
    3234:	08 95       	ret

00003236 <__fixsfsi>:
    3236:	04 d0       	rcall	.+8      	; 0x3240 <__fixunssfsi>
    3238:	68 94       	set
    323a:	b1 11       	cpse	r27, r1
    323c:	3a c1       	rjmp	.+628    	; 0x34b2 <__fp_szero>
    323e:	08 95       	ret

00003240 <__fixunssfsi>:
    3240:	1d d1       	rcall	.+570    	; 0x347c <__fp_splitA>
    3242:	88 f0       	brcs	.+34     	; 0x3266 <__fixunssfsi+0x26>
    3244:	9f 57       	subi	r25, 0x7F	; 127
    3246:	90 f0       	brcs	.+36     	; 0x326c <__fixunssfsi+0x2c>
    3248:	b9 2f       	mov	r27, r25
    324a:	99 27       	eor	r25, r25
    324c:	b7 51       	subi	r27, 0x17	; 23
    324e:	a0 f0       	brcs	.+40     	; 0x3278 <__fixunssfsi+0x38>
    3250:	d1 f0       	breq	.+52     	; 0x3286 <__fixunssfsi+0x46>
    3252:	66 0f       	add	r22, r22
    3254:	77 1f       	adc	r23, r23
    3256:	88 1f       	adc	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	1a f0       	brmi	.+6      	; 0x3262 <__fixunssfsi+0x22>
    325c:	ba 95       	dec	r27
    325e:	c9 f7       	brne	.-14     	; 0x3252 <__fixunssfsi+0x12>
    3260:	12 c0       	rjmp	.+36     	; 0x3286 <__fixunssfsi+0x46>
    3262:	b1 30       	cpi	r27, 0x01	; 1
    3264:	81 f0       	breq	.+32     	; 0x3286 <__fixunssfsi+0x46>
    3266:	24 d1       	rcall	.+584    	; 0x34b0 <__fp_zero>
    3268:	b1 e0       	ldi	r27, 0x01	; 1
    326a:	08 95       	ret
    326c:	21 c1       	rjmp	.+578    	; 0x34b0 <__fp_zero>
    326e:	67 2f       	mov	r22, r23
    3270:	78 2f       	mov	r23, r24
    3272:	88 27       	eor	r24, r24
    3274:	b8 5f       	subi	r27, 0xF8	; 248
    3276:	39 f0       	breq	.+14     	; 0x3286 <__fixunssfsi+0x46>
    3278:	b9 3f       	cpi	r27, 0xF9	; 249
    327a:	cc f3       	brlt	.-14     	; 0x326e <__fixunssfsi+0x2e>
    327c:	86 95       	lsr	r24
    327e:	77 95       	ror	r23
    3280:	67 95       	ror	r22
    3282:	b3 95       	inc	r27
    3284:	d9 f7       	brne	.-10     	; 0x327c <__fixunssfsi+0x3c>
    3286:	3e f4       	brtc	.+14     	; 0x3296 <__fixunssfsi+0x56>
    3288:	90 95       	com	r25
    328a:	80 95       	com	r24
    328c:	70 95       	com	r23
    328e:	61 95       	neg	r22
    3290:	7f 4f       	sbci	r23, 0xFF	; 255
    3292:	8f 4f       	sbci	r24, 0xFF	; 255
    3294:	9f 4f       	sbci	r25, 0xFF	; 255
    3296:	08 95       	ret

00003298 <__floatunsisf>:
    3298:	e8 94       	clt
    329a:	09 c0       	rjmp	.+18     	; 0x32ae <__floatsisf+0x12>

0000329c <__floatsisf>:
    329c:	97 fb       	bst	r25, 7
    329e:	3e f4       	brtc	.+14     	; 0x32ae <__floatsisf+0x12>
    32a0:	90 95       	com	r25
    32a2:	80 95       	com	r24
    32a4:	70 95       	com	r23
    32a6:	61 95       	neg	r22
    32a8:	7f 4f       	sbci	r23, 0xFF	; 255
    32aa:	8f 4f       	sbci	r24, 0xFF	; 255
    32ac:	9f 4f       	sbci	r25, 0xFF	; 255
    32ae:	99 23       	and	r25, r25
    32b0:	a9 f0       	breq	.+42     	; 0x32dc <__floatsisf+0x40>
    32b2:	f9 2f       	mov	r31, r25
    32b4:	96 e9       	ldi	r25, 0x96	; 150
    32b6:	bb 27       	eor	r27, r27
    32b8:	93 95       	inc	r25
    32ba:	f6 95       	lsr	r31
    32bc:	87 95       	ror	r24
    32be:	77 95       	ror	r23
    32c0:	67 95       	ror	r22
    32c2:	b7 95       	ror	r27
    32c4:	f1 11       	cpse	r31, r1
    32c6:	f8 cf       	rjmp	.-16     	; 0x32b8 <__floatsisf+0x1c>
    32c8:	fa f4       	brpl	.+62     	; 0x3308 <__floatsisf+0x6c>
    32ca:	bb 0f       	add	r27, r27
    32cc:	11 f4       	brne	.+4      	; 0x32d2 <__floatsisf+0x36>
    32ce:	60 ff       	sbrs	r22, 0
    32d0:	1b c0       	rjmp	.+54     	; 0x3308 <__floatsisf+0x6c>
    32d2:	6f 5f       	subi	r22, 0xFF	; 255
    32d4:	7f 4f       	sbci	r23, 0xFF	; 255
    32d6:	8f 4f       	sbci	r24, 0xFF	; 255
    32d8:	9f 4f       	sbci	r25, 0xFF	; 255
    32da:	16 c0       	rjmp	.+44     	; 0x3308 <__floatsisf+0x6c>
    32dc:	88 23       	and	r24, r24
    32de:	11 f0       	breq	.+4      	; 0x32e4 <__floatsisf+0x48>
    32e0:	96 e9       	ldi	r25, 0x96	; 150
    32e2:	11 c0       	rjmp	.+34     	; 0x3306 <__floatsisf+0x6a>
    32e4:	77 23       	and	r23, r23
    32e6:	21 f0       	breq	.+8      	; 0x32f0 <__floatsisf+0x54>
    32e8:	9e e8       	ldi	r25, 0x8E	; 142
    32ea:	87 2f       	mov	r24, r23
    32ec:	76 2f       	mov	r23, r22
    32ee:	05 c0       	rjmp	.+10     	; 0x32fa <__floatsisf+0x5e>
    32f0:	66 23       	and	r22, r22
    32f2:	71 f0       	breq	.+28     	; 0x3310 <__floatsisf+0x74>
    32f4:	96 e8       	ldi	r25, 0x86	; 134
    32f6:	86 2f       	mov	r24, r22
    32f8:	70 e0       	ldi	r23, 0x00	; 0
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	2a f0       	brmi	.+10     	; 0x3308 <__floatsisf+0x6c>
    32fe:	9a 95       	dec	r25
    3300:	66 0f       	add	r22, r22
    3302:	77 1f       	adc	r23, r23
    3304:	88 1f       	adc	r24, r24
    3306:	da f7       	brpl	.-10     	; 0x32fe <__floatsisf+0x62>
    3308:	88 0f       	add	r24, r24
    330a:	96 95       	lsr	r25
    330c:	87 95       	ror	r24
    330e:	97 f9       	bld	r25, 7
    3310:	08 95       	ret

00003312 <__fp_arccos>:
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	1f 93       	push	r17
    3318:	0f 93       	push	r16
    331a:	8b 01       	movw	r16, r22
    331c:	ec 01       	movw	r28, r24
    331e:	ed e3       	ldi	r30, 0x3D	; 61
    3320:	f2 e0       	ldi	r31, 0x02	; 2
    3322:	4f d0       	rcall	.+158    	; 0x33c2 <__fp_powser>
    3324:	92 d0       	rcall	.+292    	; 0x344a <__fp_round>
    3326:	98 01       	movw	r18, r16
    3328:	ae 01       	movw	r20, r28
    332a:	8b 01       	movw	r16, r22
    332c:	ec 01       	movw	r28, r24
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	70 e0       	ldi	r23, 0x00	; 0
    3332:	80 e8       	ldi	r24, 0x80	; 128
    3334:	9f e3       	ldi	r25, 0x3F	; 63
    3336:	fb dd       	rcall	.-1034   	; 0x2f2e <__subsf3>
    3338:	80 d1       	rcall	.+768    	; 0x363a <sqrt>
    333a:	98 01       	movw	r18, r16
    333c:	ae 01       	movw	r20, r28
    333e:	0f 91       	pop	r16
    3340:	1f 91       	pop	r17
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	d2 c0       	rjmp	.+420    	; 0x34ec <__mulsf3x>

00003348 <__fp_cmp>:
    3348:	99 0f       	add	r25, r25
    334a:	00 08       	sbc	r0, r0
    334c:	55 0f       	add	r21, r21
    334e:	aa 0b       	sbc	r26, r26
    3350:	e0 e8       	ldi	r30, 0x80	; 128
    3352:	fe ef       	ldi	r31, 0xFE	; 254
    3354:	16 16       	cp	r1, r22
    3356:	17 06       	cpc	r1, r23
    3358:	e8 07       	cpc	r30, r24
    335a:	f9 07       	cpc	r31, r25
    335c:	c0 f0       	brcs	.+48     	; 0x338e <__fp_cmp+0x46>
    335e:	12 16       	cp	r1, r18
    3360:	13 06       	cpc	r1, r19
    3362:	e4 07       	cpc	r30, r20
    3364:	f5 07       	cpc	r31, r21
    3366:	98 f0       	brcs	.+38     	; 0x338e <__fp_cmp+0x46>
    3368:	62 1b       	sub	r22, r18
    336a:	73 0b       	sbc	r23, r19
    336c:	84 0b       	sbc	r24, r20
    336e:	95 0b       	sbc	r25, r21
    3370:	39 f4       	brne	.+14     	; 0x3380 <__fp_cmp+0x38>
    3372:	0a 26       	eor	r0, r26
    3374:	61 f0       	breq	.+24     	; 0x338e <__fp_cmp+0x46>
    3376:	23 2b       	or	r18, r19
    3378:	24 2b       	or	r18, r20
    337a:	25 2b       	or	r18, r21
    337c:	21 f4       	brne	.+8      	; 0x3386 <__fp_cmp+0x3e>
    337e:	08 95       	ret
    3380:	0a 26       	eor	r0, r26
    3382:	09 f4       	brne	.+2      	; 0x3386 <__fp_cmp+0x3e>
    3384:	a1 40       	sbci	r26, 0x01	; 1
    3386:	a6 95       	lsr	r26
    3388:	8f ef       	ldi	r24, 0xFF	; 255
    338a:	81 1d       	adc	r24, r1
    338c:	81 1d       	adc	r24, r1
    338e:	08 95       	ret

00003390 <__fp_inf>:
    3390:	97 f9       	bld	r25, 7
    3392:	9f 67       	ori	r25, 0x7F	; 127
    3394:	80 e8       	ldi	r24, 0x80	; 128
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	60 e0       	ldi	r22, 0x00	; 0
    339a:	08 95       	ret

0000339c <__fp_nan>:
    339c:	9f ef       	ldi	r25, 0xFF	; 255
    339e:	80 ec       	ldi	r24, 0xC0	; 192
    33a0:	08 95       	ret

000033a2 <__fp_negdi>:
    33a2:	90 95       	com	r25
    33a4:	80 95       	com	r24
    33a6:	70 95       	com	r23
    33a8:	60 95       	com	r22
    33aa:	50 95       	com	r21
    33ac:	40 95       	com	r20
    33ae:	30 95       	com	r19
    33b0:	21 95       	neg	r18
    33b2:	3f 4f       	sbci	r19, 0xFF	; 255
    33b4:	4f 4f       	sbci	r20, 0xFF	; 255
    33b6:	5f 4f       	sbci	r21, 0xFF	; 255
    33b8:	6f 4f       	sbci	r22, 0xFF	; 255
    33ba:	7f 4f       	sbci	r23, 0xFF	; 255
    33bc:	8f 4f       	sbci	r24, 0xFF	; 255
    33be:	9f 4f       	sbci	r25, 0xFF	; 255
    33c0:	08 95       	ret

000033c2 <__fp_powser>:
    33c2:	df 93       	push	r29
    33c4:	cf 93       	push	r28
    33c6:	1f 93       	push	r17
    33c8:	0f 93       	push	r16
    33ca:	ff 92       	push	r15
    33cc:	ef 92       	push	r14
    33ce:	df 92       	push	r13
    33d0:	7b 01       	movw	r14, r22
    33d2:	8c 01       	movw	r16, r24
    33d4:	68 94       	set
    33d6:	05 c0       	rjmp	.+10     	; 0x33e2 <__fp_powser+0x20>
    33d8:	da 2e       	mov	r13, r26
    33da:	ef 01       	movw	r28, r30
    33dc:	87 d0       	rcall	.+270    	; 0x34ec <__mulsf3x>
    33de:	fe 01       	movw	r30, r28
    33e0:	e8 94       	clt
    33e2:	a5 91       	lpm	r26, Z+
    33e4:	25 91       	lpm	r18, Z+
    33e6:	35 91       	lpm	r19, Z+
    33e8:	45 91       	lpm	r20, Z+
    33ea:	55 91       	lpm	r21, Z+
    33ec:	ae f3       	brts	.-22     	; 0x33d8 <__fp_powser+0x16>
    33ee:	ef 01       	movw	r28, r30
    33f0:	b0 dd       	rcall	.-1184   	; 0x2f52 <__addsf3x>
    33f2:	fe 01       	movw	r30, r28
    33f4:	97 01       	movw	r18, r14
    33f6:	a8 01       	movw	r20, r16
    33f8:	da 94       	dec	r13
    33fa:	79 f7       	brne	.-34     	; 0x33da <__fp_powser+0x18>
    33fc:	df 90       	pop	r13
    33fe:	ef 90       	pop	r14
    3400:	ff 90       	pop	r15
    3402:	0f 91       	pop	r16
    3404:	1f 91       	pop	r17
    3406:	cf 91       	pop	r28
    3408:	df 91       	pop	r29
    340a:	08 95       	ret

0000340c <__fp_powsodd>:
    340c:	9f 93       	push	r25
    340e:	8f 93       	push	r24
    3410:	7f 93       	push	r23
    3412:	6f 93       	push	r22
    3414:	ff 93       	push	r31
    3416:	ef 93       	push	r30
    3418:	9b 01       	movw	r18, r22
    341a:	ac 01       	movw	r20, r24
    341c:	5b d0       	rcall	.+182    	; 0x34d4 <__mulsf3>
    341e:	ef 91       	pop	r30
    3420:	ff 91       	pop	r31
    3422:	cf df       	rcall	.-98     	; 0x33c2 <__fp_powser>
    3424:	2f 91       	pop	r18
    3426:	3f 91       	pop	r19
    3428:	4f 91       	pop	r20
    342a:	5f 91       	pop	r21
    342c:	53 c0       	rjmp	.+166    	; 0x34d4 <__mulsf3>

0000342e <__fp_pscA>:
    342e:	00 24       	eor	r0, r0
    3430:	0a 94       	dec	r0
    3432:	16 16       	cp	r1, r22
    3434:	17 06       	cpc	r1, r23
    3436:	18 06       	cpc	r1, r24
    3438:	09 06       	cpc	r0, r25
    343a:	08 95       	ret

0000343c <__fp_pscB>:
    343c:	00 24       	eor	r0, r0
    343e:	0a 94       	dec	r0
    3440:	12 16       	cp	r1, r18
    3442:	13 06       	cpc	r1, r19
    3444:	14 06       	cpc	r1, r20
    3446:	05 06       	cpc	r0, r21
    3448:	08 95       	ret

0000344a <__fp_round>:
    344a:	09 2e       	mov	r0, r25
    344c:	03 94       	inc	r0
    344e:	00 0c       	add	r0, r0
    3450:	11 f4       	brne	.+4      	; 0x3456 <__fp_round+0xc>
    3452:	88 23       	and	r24, r24
    3454:	52 f0       	brmi	.+20     	; 0x346a <__fp_round+0x20>
    3456:	bb 0f       	add	r27, r27
    3458:	40 f4       	brcc	.+16     	; 0x346a <__fp_round+0x20>
    345a:	bf 2b       	or	r27, r31
    345c:	11 f4       	brne	.+4      	; 0x3462 <__fp_round+0x18>
    345e:	60 ff       	sbrs	r22, 0
    3460:	04 c0       	rjmp	.+8      	; 0x346a <__fp_round+0x20>
    3462:	6f 5f       	subi	r22, 0xFF	; 255
    3464:	7f 4f       	sbci	r23, 0xFF	; 255
    3466:	8f 4f       	sbci	r24, 0xFF	; 255
    3468:	9f 4f       	sbci	r25, 0xFF	; 255
    346a:	08 95       	ret

0000346c <__fp_split3>:
    346c:	57 fd       	sbrc	r21, 7
    346e:	90 58       	subi	r25, 0x80	; 128
    3470:	44 0f       	add	r20, r20
    3472:	55 1f       	adc	r21, r21
    3474:	59 f0       	breq	.+22     	; 0x348c <__fp_splitA+0x10>
    3476:	5f 3f       	cpi	r21, 0xFF	; 255
    3478:	71 f0       	breq	.+28     	; 0x3496 <__fp_splitA+0x1a>
    347a:	47 95       	ror	r20

0000347c <__fp_splitA>:
    347c:	88 0f       	add	r24, r24
    347e:	97 fb       	bst	r25, 7
    3480:	99 1f       	adc	r25, r25
    3482:	61 f0       	breq	.+24     	; 0x349c <__fp_splitA+0x20>
    3484:	9f 3f       	cpi	r25, 0xFF	; 255
    3486:	79 f0       	breq	.+30     	; 0x34a6 <__fp_splitA+0x2a>
    3488:	87 95       	ror	r24
    348a:	08 95       	ret
    348c:	12 16       	cp	r1, r18
    348e:	13 06       	cpc	r1, r19
    3490:	14 06       	cpc	r1, r20
    3492:	55 1f       	adc	r21, r21
    3494:	f2 cf       	rjmp	.-28     	; 0x347a <__fp_split3+0xe>
    3496:	46 95       	lsr	r20
    3498:	f1 df       	rcall	.-30     	; 0x347c <__fp_splitA>
    349a:	08 c0       	rjmp	.+16     	; 0x34ac <__fp_splitA+0x30>
    349c:	16 16       	cp	r1, r22
    349e:	17 06       	cpc	r1, r23
    34a0:	18 06       	cpc	r1, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	f1 cf       	rjmp	.-30     	; 0x3488 <__fp_splitA+0xc>
    34a6:	86 95       	lsr	r24
    34a8:	71 05       	cpc	r23, r1
    34aa:	61 05       	cpc	r22, r1
    34ac:	08 94       	sec
    34ae:	08 95       	ret

000034b0 <__fp_zero>:
    34b0:	e8 94       	clt

000034b2 <__fp_szero>:
    34b2:	bb 27       	eor	r27, r27
    34b4:	66 27       	eor	r22, r22
    34b6:	77 27       	eor	r23, r23
    34b8:	cb 01       	movw	r24, r22
    34ba:	97 f9       	bld	r25, 7
    34bc:	08 95       	ret

000034be <__gesf2>:
    34be:	44 df       	rcall	.-376    	; 0x3348 <__fp_cmp>
    34c0:	08 f4       	brcc	.+2      	; 0x34c4 <__gesf2+0x6>
    34c2:	8f ef       	ldi	r24, 0xFF	; 255
    34c4:	08 95       	ret

000034c6 <inverse>:
    34c6:	9b 01       	movw	r18, r22
    34c8:	ac 01       	movw	r20, r24
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	80 e8       	ldi	r24, 0x80	; 128
    34d0:	9f e3       	ldi	r25, 0x3F	; 63
    34d2:	0f ce       	rjmp	.-994    	; 0x30f2 <__divsf3>

000034d4 <__mulsf3>:
    34d4:	0b d0       	rcall	.+22     	; 0x34ec <__mulsf3x>
    34d6:	b9 cf       	rjmp	.-142    	; 0x344a <__fp_round>
    34d8:	aa df       	rcall	.-172    	; 0x342e <__fp_pscA>
    34da:	28 f0       	brcs	.+10     	; 0x34e6 <__mulsf3+0x12>
    34dc:	af df       	rcall	.-162    	; 0x343c <__fp_pscB>
    34de:	18 f0       	brcs	.+6      	; 0x34e6 <__mulsf3+0x12>
    34e0:	95 23       	and	r25, r21
    34e2:	09 f0       	breq	.+2      	; 0x34e6 <__mulsf3+0x12>
    34e4:	55 cf       	rjmp	.-342    	; 0x3390 <__fp_inf>
    34e6:	5a cf       	rjmp	.-332    	; 0x339c <__fp_nan>
    34e8:	11 24       	eor	r1, r1
    34ea:	e3 cf       	rjmp	.-58     	; 0x34b2 <__fp_szero>

000034ec <__mulsf3x>:
    34ec:	bf df       	rcall	.-130    	; 0x346c <__fp_split3>
    34ee:	a0 f3       	brcs	.-24     	; 0x34d8 <__mulsf3+0x4>

000034f0 <__mulsf3_pse>:
    34f0:	95 9f       	mul	r25, r21
    34f2:	d1 f3       	breq	.-12     	; 0x34e8 <__mulsf3+0x14>
    34f4:	95 0f       	add	r25, r21
    34f6:	50 e0       	ldi	r21, 0x00	; 0
    34f8:	55 1f       	adc	r21, r21
    34fa:	62 9f       	mul	r22, r18
    34fc:	f0 01       	movw	r30, r0
    34fe:	72 9f       	mul	r23, r18
    3500:	bb 27       	eor	r27, r27
    3502:	f0 0d       	add	r31, r0
    3504:	b1 1d       	adc	r27, r1
    3506:	63 9f       	mul	r22, r19
    3508:	aa 27       	eor	r26, r26
    350a:	f0 0d       	add	r31, r0
    350c:	b1 1d       	adc	r27, r1
    350e:	aa 1f       	adc	r26, r26
    3510:	64 9f       	mul	r22, r20
    3512:	66 27       	eor	r22, r22
    3514:	b0 0d       	add	r27, r0
    3516:	a1 1d       	adc	r26, r1
    3518:	66 1f       	adc	r22, r22
    351a:	82 9f       	mul	r24, r18
    351c:	22 27       	eor	r18, r18
    351e:	b0 0d       	add	r27, r0
    3520:	a1 1d       	adc	r26, r1
    3522:	62 1f       	adc	r22, r18
    3524:	73 9f       	mul	r23, r19
    3526:	b0 0d       	add	r27, r0
    3528:	a1 1d       	adc	r26, r1
    352a:	62 1f       	adc	r22, r18
    352c:	83 9f       	mul	r24, r19
    352e:	a0 0d       	add	r26, r0
    3530:	61 1d       	adc	r22, r1
    3532:	22 1f       	adc	r18, r18
    3534:	74 9f       	mul	r23, r20
    3536:	33 27       	eor	r19, r19
    3538:	a0 0d       	add	r26, r0
    353a:	61 1d       	adc	r22, r1
    353c:	23 1f       	adc	r18, r19
    353e:	84 9f       	mul	r24, r20
    3540:	60 0d       	add	r22, r0
    3542:	21 1d       	adc	r18, r1
    3544:	82 2f       	mov	r24, r18
    3546:	76 2f       	mov	r23, r22
    3548:	6a 2f       	mov	r22, r26
    354a:	11 24       	eor	r1, r1
    354c:	9f 57       	subi	r25, 0x7F	; 127
    354e:	50 40       	sbci	r21, 0x00	; 0
    3550:	8a f0       	brmi	.+34     	; 0x3574 <__mulsf3_pse+0x84>
    3552:	e1 f0       	breq	.+56     	; 0x358c <__mulsf3_pse+0x9c>
    3554:	88 23       	and	r24, r24
    3556:	4a f0       	brmi	.+18     	; 0x356a <__mulsf3_pse+0x7a>
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	bb 1f       	adc	r27, r27
    355e:	66 1f       	adc	r22, r22
    3560:	77 1f       	adc	r23, r23
    3562:	88 1f       	adc	r24, r24
    3564:	91 50       	subi	r25, 0x01	; 1
    3566:	50 40       	sbci	r21, 0x00	; 0
    3568:	a9 f7       	brne	.-22     	; 0x3554 <__mulsf3_pse+0x64>
    356a:	9e 3f       	cpi	r25, 0xFE	; 254
    356c:	51 05       	cpc	r21, r1
    356e:	70 f0       	brcs	.+28     	; 0x358c <__mulsf3_pse+0x9c>
    3570:	0f cf       	rjmp	.-482    	; 0x3390 <__fp_inf>
    3572:	9f cf       	rjmp	.-194    	; 0x34b2 <__fp_szero>
    3574:	5f 3f       	cpi	r21, 0xFF	; 255
    3576:	ec f3       	brlt	.-6      	; 0x3572 <__mulsf3_pse+0x82>
    3578:	98 3e       	cpi	r25, 0xE8	; 232
    357a:	dc f3       	brlt	.-10     	; 0x3572 <__mulsf3_pse+0x82>
    357c:	86 95       	lsr	r24
    357e:	77 95       	ror	r23
    3580:	67 95       	ror	r22
    3582:	b7 95       	ror	r27
    3584:	f7 95       	ror	r31
    3586:	e7 95       	ror	r30
    3588:	9f 5f       	subi	r25, 0xFF	; 255
    358a:	c1 f7       	brne	.-16     	; 0x357c <__mulsf3_pse+0x8c>
    358c:	fe 2b       	or	r31, r30
    358e:	88 0f       	add	r24, r24
    3590:	91 1d       	adc	r25, r1
    3592:	96 95       	lsr	r25
    3594:	87 95       	ror	r24
    3596:	97 f9       	bld	r25, 7
    3598:	08 95       	ret

0000359a <pow>:
    359a:	fa 01       	movw	r30, r20
    359c:	ee 0f       	add	r30, r30
    359e:	ff 1f       	adc	r31, r31
    35a0:	30 96       	adiw	r30, 0x00	; 0
    35a2:	21 05       	cpc	r18, r1
    35a4:	31 05       	cpc	r19, r1
    35a6:	99 f1       	breq	.+102    	; 0x360e <pow+0x74>
    35a8:	61 15       	cp	r22, r1
    35aa:	71 05       	cpc	r23, r1
    35ac:	61 f4       	brne	.+24     	; 0x35c6 <pow+0x2c>
    35ae:	80 38       	cpi	r24, 0x80	; 128
    35b0:	bf e3       	ldi	r27, 0x3F	; 63
    35b2:	9b 07       	cpc	r25, r27
    35b4:	49 f1       	breq	.+82     	; 0x3608 <pow+0x6e>
    35b6:	68 94       	set
    35b8:	90 38       	cpi	r25, 0x80	; 128
    35ba:	81 05       	cpc	r24, r1
    35bc:	61 f0       	breq	.+24     	; 0x35d6 <pow+0x3c>
    35be:	80 38       	cpi	r24, 0x80	; 128
    35c0:	bf ef       	ldi	r27, 0xFF	; 255
    35c2:	9b 07       	cpc	r25, r27
    35c4:	41 f0       	breq	.+16     	; 0x35d6 <pow+0x3c>
    35c6:	99 23       	and	r25, r25
    35c8:	42 f5       	brpl	.+80     	; 0x361a <pow+0x80>
    35ca:	ff 3f       	cpi	r31, 0xFF	; 255
    35cc:	e1 05       	cpc	r30, r1
    35ce:	31 05       	cpc	r19, r1
    35d0:	21 05       	cpc	r18, r1
    35d2:	11 f1       	breq	.+68     	; 0x3618 <pow+0x7e>
    35d4:	e8 94       	clt
    35d6:	08 94       	sec
    35d8:	e7 95       	ror	r30
    35da:	d9 01       	movw	r26, r18
    35dc:	aa 23       	and	r26, r26
    35de:	29 f4       	brne	.+10     	; 0x35ea <pow+0x50>
    35e0:	ab 2f       	mov	r26, r27
    35e2:	be 2f       	mov	r27, r30
    35e4:	f8 5f       	subi	r31, 0xF8	; 248
    35e6:	d0 f3       	brcs	.-12     	; 0x35dc <pow+0x42>
    35e8:	10 c0       	rjmp	.+32     	; 0x360a <pow+0x70>
    35ea:	ff 5f       	subi	r31, 0xFF	; 255
    35ec:	70 f4       	brcc	.+28     	; 0x360a <pow+0x70>
    35ee:	a6 95       	lsr	r26
    35f0:	e0 f7       	brcc	.-8      	; 0x35ea <pow+0x50>
    35f2:	f7 39       	cpi	r31, 0x97	; 151
    35f4:	50 f0       	brcs	.+20     	; 0x360a <pow+0x70>
    35f6:	19 f0       	breq	.+6      	; 0x35fe <pow+0x64>
    35f8:	ff 3a       	cpi	r31, 0xAF	; 175
    35fa:	38 f4       	brcc	.+14     	; 0x360a <pow+0x70>
    35fc:	9f 77       	andi	r25, 0x7F	; 127
    35fe:	9f 93       	push	r25
    3600:	0c d0       	rcall	.+24     	; 0x361a <pow+0x80>
    3602:	0f 90       	pop	r0
    3604:	07 fc       	sbrc	r0, 7
    3606:	90 58       	subi	r25, 0x80	; 128
    3608:	08 95       	ret
    360a:	3e f0       	brts	.+14     	; 0x361a <pow+0x80>
    360c:	c7 ce       	rjmp	.-626    	; 0x339c <__fp_nan>
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	70 e0       	ldi	r23, 0x00	; 0
    3612:	80 e8       	ldi	r24, 0x80	; 128
    3614:	9f e3       	ldi	r25, 0x3F	; 63
    3616:	08 95       	ret
    3618:	4f e7       	ldi	r20, 0x7F	; 127
    361a:	9f 77       	andi	r25, 0x7F	; 127
    361c:	5f 93       	push	r21
    361e:	4f 93       	push	r20
    3620:	3f 93       	push	r19
    3622:	2f 93       	push	r18
    3624:	cc d0       	rcall	.+408    	; 0x37be <log>
    3626:	2f 91       	pop	r18
    3628:	3f 91       	pop	r19
    362a:	4f 91       	pop	r20
    362c:	5f 91       	pop	r21
    362e:	52 df       	rcall	.-348    	; 0x34d4 <__mulsf3>
    3630:	4a c0       	rjmp	.+148    	; 0x36c6 <exp>
    3632:	11 f4       	brne	.+4      	; 0x3638 <pow+0x9e>
    3634:	0e f4       	brtc	.+2      	; 0x3638 <pow+0x9e>
    3636:	b2 ce       	rjmp	.-668    	; 0x339c <__fp_nan>
    3638:	72 c0       	rjmp	.+228    	; 0x371e <__fp_mpack>

0000363a <sqrt>:
    363a:	20 df       	rcall	.-448    	; 0x347c <__fp_splitA>
    363c:	d0 f3       	brcs	.-12     	; 0x3632 <pow+0x98>
    363e:	99 23       	and	r25, r25
    3640:	d9 f3       	breq	.-10     	; 0x3638 <pow+0x9e>
    3642:	ce f3       	brts	.-14     	; 0x3636 <pow+0x9c>
    3644:	9f 57       	subi	r25, 0x7F	; 127
    3646:	55 0b       	sbc	r21, r21
    3648:	87 ff       	sbrs	r24, 7
    364a:	77 d0       	rcall	.+238    	; 0x373a <__fp_norm2>
    364c:	00 24       	eor	r0, r0
    364e:	a0 e6       	ldi	r26, 0x60	; 96
    3650:	40 ea       	ldi	r20, 0xA0	; 160
    3652:	90 01       	movw	r18, r0
    3654:	80 58       	subi	r24, 0x80	; 128
    3656:	56 95       	lsr	r21
    3658:	97 95       	ror	r25
    365a:	28 f4       	brcc	.+10     	; 0x3666 <sqrt+0x2c>
    365c:	80 5c       	subi	r24, 0xC0	; 192
    365e:	66 0f       	add	r22, r22
    3660:	77 1f       	adc	r23, r23
    3662:	88 1f       	adc	r24, r24
    3664:	20 f0       	brcs	.+8      	; 0x366e <sqrt+0x34>
    3666:	26 17       	cp	r18, r22
    3668:	37 07       	cpc	r19, r23
    366a:	48 07       	cpc	r20, r24
    366c:	30 f4       	brcc	.+12     	; 0x367a <sqrt+0x40>
    366e:	62 1b       	sub	r22, r18
    3670:	73 0b       	sbc	r23, r19
    3672:	84 0b       	sbc	r24, r20
    3674:	20 29       	or	r18, r0
    3676:	31 29       	or	r19, r1
    3678:	4a 2b       	or	r20, r26
    367a:	a6 95       	lsr	r26
    367c:	17 94       	ror	r1
    367e:	07 94       	ror	r0
    3680:	20 25       	eor	r18, r0
    3682:	31 25       	eor	r19, r1
    3684:	4a 27       	eor	r20, r26
    3686:	58 f7       	brcc	.-42     	; 0x365e <sqrt+0x24>
    3688:	66 0f       	add	r22, r22
    368a:	77 1f       	adc	r23, r23
    368c:	88 1f       	adc	r24, r24
    368e:	20 f0       	brcs	.+8      	; 0x3698 <sqrt+0x5e>
    3690:	26 17       	cp	r18, r22
    3692:	37 07       	cpc	r19, r23
    3694:	48 07       	cpc	r20, r24
    3696:	30 f4       	brcc	.+12     	; 0x36a4 <sqrt+0x6a>
    3698:	62 0b       	sbc	r22, r18
    369a:	73 0b       	sbc	r23, r19
    369c:	84 0b       	sbc	r24, r20
    369e:	20 0d       	add	r18, r0
    36a0:	31 1d       	adc	r19, r1
    36a2:	41 1d       	adc	r20, r1
    36a4:	a0 95       	com	r26
    36a6:	81 f7       	brne	.-32     	; 0x3688 <sqrt+0x4e>
    36a8:	b9 01       	movw	r22, r18
    36aa:	84 2f       	mov	r24, r20
    36ac:	91 58       	subi	r25, 0x81	; 129
    36ae:	88 0f       	add	r24, r24
    36b0:	96 95       	lsr	r25
    36b2:	87 95       	ror	r24
    36b4:	08 95       	ret

000036b6 <square>:
    36b6:	9b 01       	movw	r18, r22
    36b8:	ac 01       	movw	r20, r24
    36ba:	0c cf       	rjmp	.-488    	; 0x34d4 <__mulsf3>
    36bc:	19 f4       	brne	.+6      	; 0x36c4 <square+0xe>
    36be:	0e f0       	brts	.+2      	; 0x36c2 <square+0xc>
    36c0:	67 ce       	rjmp	.-818    	; 0x3390 <__fp_inf>
    36c2:	f6 ce       	rjmp	.-532    	; 0x34b0 <__fp_zero>
    36c4:	6b ce       	rjmp	.-810    	; 0x339c <__fp_nan>

000036c6 <exp>:
    36c6:	da de       	rcall	.-588    	; 0x347c <__fp_splitA>
    36c8:	c8 f3       	brcs	.-14     	; 0x36bc <square+0x6>
    36ca:	96 38       	cpi	r25, 0x86	; 134
    36cc:	c0 f7       	brcc	.-16     	; 0x36be <square+0x8>
    36ce:	07 f8       	bld	r0, 7
    36d0:	0f 92       	push	r0
    36d2:	e8 94       	clt
    36d4:	2b e3       	ldi	r18, 0x3B	; 59
    36d6:	3a ea       	ldi	r19, 0xAA	; 170
    36d8:	48 eb       	ldi	r20, 0xB8	; 184
    36da:	5f e7       	ldi	r21, 0x7F	; 127
    36dc:	09 df       	rcall	.-494    	; 0x34f0 <__mulsf3_pse>
    36de:	0f 92       	push	r0
    36e0:	0f 92       	push	r0
    36e2:	0f 92       	push	r0
    36e4:	4d b7       	in	r20, 0x3d	; 61
    36e6:	5e b7       	in	r21, 0x3e	; 62
    36e8:	0f 92       	push	r0
    36ea:	a9 d0       	rcall	.+338    	; 0x383e <modf>
    36ec:	e5 e6       	ldi	r30, 0x65	; 101
    36ee:	f2 e0       	ldi	r31, 0x02	; 2
    36f0:	68 de       	rcall	.-816    	; 0x33c2 <__fp_powser>
    36f2:	4f 91       	pop	r20
    36f4:	5f 91       	pop	r21
    36f6:	ef 91       	pop	r30
    36f8:	ff 91       	pop	r31
    36fa:	e5 95       	asr	r30
    36fc:	ee 1f       	adc	r30, r30
    36fe:	ff 1f       	adc	r31, r31
    3700:	49 f0       	breq	.+18     	; 0x3714 <exp+0x4e>
    3702:	fe 57       	subi	r31, 0x7E	; 126
    3704:	e0 68       	ori	r30, 0x80	; 128
    3706:	44 27       	eor	r20, r20
    3708:	ee 0f       	add	r30, r30
    370a:	44 1f       	adc	r20, r20
    370c:	fa 95       	dec	r31
    370e:	e1 f7       	brne	.-8      	; 0x3708 <exp+0x42>
    3710:	41 95       	neg	r20
    3712:	55 0b       	sbc	r21, r21
    3714:	1b d0       	rcall	.+54     	; 0x374c <ldexp>
    3716:	0f 90       	pop	r0
    3718:	07 fe       	sbrs	r0, 7
    371a:	d5 ce       	rjmp	.-598    	; 0x34c6 <inverse>
    371c:	08 95       	ret

0000371e <__fp_mpack>:
    371e:	9f 3f       	cpi	r25, 0xFF	; 255
    3720:	31 f0       	breq	.+12     	; 0x372e <__fp_mpack_finite+0xc>

00003722 <__fp_mpack_finite>:
    3722:	91 50       	subi	r25, 0x01	; 1
    3724:	20 f4       	brcc	.+8      	; 0x372e <__fp_mpack_finite+0xc>
    3726:	87 95       	ror	r24
    3728:	77 95       	ror	r23
    372a:	67 95       	ror	r22
    372c:	b7 95       	ror	r27
    372e:	88 0f       	add	r24, r24
    3730:	91 1d       	adc	r25, r1
    3732:	96 95       	lsr	r25
    3734:	87 95       	ror	r24
    3736:	97 f9       	bld	r25, 7
    3738:	08 95       	ret

0000373a <__fp_norm2>:
    373a:	91 50       	subi	r25, 0x01	; 1
    373c:	50 40       	sbci	r21, 0x00	; 0
    373e:	66 0f       	add	r22, r22
    3740:	77 1f       	adc	r23, r23
    3742:	88 1f       	adc	r24, r24
    3744:	d2 f7       	brpl	.-12     	; 0x373a <__fp_norm2>
    3746:	08 95       	ret
    3748:	23 ce       	rjmp	.-954    	; 0x3390 <__fp_inf>
    374a:	e9 cf       	rjmp	.-46     	; 0x371e <__fp_mpack>

0000374c <ldexp>:
    374c:	97 de       	rcall	.-722    	; 0x347c <__fp_splitA>
    374e:	e8 f3       	brcs	.-6      	; 0x374a <__fp_norm2+0x10>
    3750:	99 23       	and	r25, r25
    3752:	d9 f3       	breq	.-10     	; 0x374a <__fp_norm2+0x10>
    3754:	94 0f       	add	r25, r20
    3756:	51 1d       	adc	r21, r1
    3758:	bb f3       	brvs	.-18     	; 0x3748 <__fp_norm2+0xe>
    375a:	91 50       	subi	r25, 0x01	; 1
    375c:	50 40       	sbci	r21, 0x00	; 0
    375e:	94 f0       	brlt	.+36     	; 0x3784 <ldexp+0x38>
    3760:	59 f0       	breq	.+22     	; 0x3778 <ldexp+0x2c>
    3762:	88 23       	and	r24, r24
    3764:	32 f0       	brmi	.+12     	; 0x3772 <ldexp+0x26>
    3766:	66 0f       	add	r22, r22
    3768:	77 1f       	adc	r23, r23
    376a:	88 1f       	adc	r24, r24
    376c:	91 50       	subi	r25, 0x01	; 1
    376e:	50 40       	sbci	r21, 0x00	; 0
    3770:	c1 f7       	brne	.-16     	; 0x3762 <ldexp+0x16>
    3772:	9e 3f       	cpi	r25, 0xFE	; 254
    3774:	51 05       	cpc	r21, r1
    3776:	44 f7       	brge	.-48     	; 0x3748 <__fp_norm2+0xe>
    3778:	88 0f       	add	r24, r24
    377a:	91 1d       	adc	r25, r1
    377c:	96 95       	lsr	r25
    377e:	87 95       	ror	r24
    3780:	97 f9       	bld	r25, 7
    3782:	08 95       	ret
    3784:	5f 3f       	cpi	r21, 0xFF	; 255
    3786:	ac f0       	brlt	.+42     	; 0x37b2 <ldexp+0x66>
    3788:	98 3e       	cpi	r25, 0xE8	; 232
    378a:	9c f0       	brlt	.+38     	; 0x37b2 <ldexp+0x66>
    378c:	bb 27       	eor	r27, r27
    378e:	86 95       	lsr	r24
    3790:	77 95       	ror	r23
    3792:	67 95       	ror	r22
    3794:	b7 95       	ror	r27
    3796:	08 f4       	brcc	.+2      	; 0x379a <ldexp+0x4e>
    3798:	b1 60       	ori	r27, 0x01	; 1
    379a:	93 95       	inc	r25
    379c:	c1 f7       	brne	.-16     	; 0x378e <ldexp+0x42>
    379e:	bb 0f       	add	r27, r27
    37a0:	58 f7       	brcc	.-42     	; 0x3778 <ldexp+0x2c>
    37a2:	11 f4       	brne	.+4      	; 0x37a8 <ldexp+0x5c>
    37a4:	60 ff       	sbrs	r22, 0
    37a6:	e8 cf       	rjmp	.-48     	; 0x3778 <ldexp+0x2c>
    37a8:	6f 5f       	subi	r22, 0xFF	; 255
    37aa:	7f 4f       	sbci	r23, 0xFF	; 255
    37ac:	8f 4f       	sbci	r24, 0xFF	; 255
    37ae:	9f 4f       	sbci	r25, 0xFF	; 255
    37b0:	e3 cf       	rjmp	.-58     	; 0x3778 <ldexp+0x2c>
    37b2:	7f ce       	rjmp	.-770    	; 0x34b2 <__fp_szero>
    37b4:	0e f0       	brts	.+2      	; 0x37b8 <ldexp+0x6c>
    37b6:	b3 cf       	rjmp	.-154    	; 0x371e <__fp_mpack>
    37b8:	f1 cd       	rjmp	.-1054   	; 0x339c <__fp_nan>
    37ba:	68 94       	set
    37bc:	e9 cd       	rjmp	.-1070   	; 0x3390 <__fp_inf>

000037be <log>:
    37be:	5e de       	rcall	.-836    	; 0x347c <__fp_splitA>
    37c0:	c8 f3       	brcs	.-14     	; 0x37b4 <ldexp+0x68>
    37c2:	99 23       	and	r25, r25
    37c4:	d1 f3       	breq	.-12     	; 0x37ba <ldexp+0x6e>
    37c6:	c6 f3       	brts	.-16     	; 0x37b8 <ldexp+0x6c>
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	1f 93       	push	r17
    37ce:	0f 93       	push	r16
    37d0:	ff 92       	push	r15
    37d2:	c9 2f       	mov	r28, r25
    37d4:	dd 27       	eor	r29, r29
    37d6:	88 23       	and	r24, r24
    37d8:	2a f0       	brmi	.+10     	; 0x37e4 <log+0x26>
    37da:	21 97       	sbiw	r28, 0x01	; 1
    37dc:	66 0f       	add	r22, r22
    37de:	77 1f       	adc	r23, r23
    37e0:	88 1f       	adc	r24, r24
    37e2:	da f7       	brpl	.-10     	; 0x37da <log+0x1c>
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	40 e8       	ldi	r20, 0x80	; 128
    37ea:	5f eb       	ldi	r21, 0xBF	; 191
    37ec:	9f e3       	ldi	r25, 0x3F	; 63
    37ee:	88 39       	cpi	r24, 0x98	; 152
    37f0:	20 f0       	brcs	.+8      	; 0x37fa <log+0x3c>
    37f2:	80 3e       	cpi	r24, 0xE0	; 224
    37f4:	30 f0       	brcs	.+12     	; 0x3802 <log+0x44>
    37f6:	21 96       	adiw	r28, 0x01	; 1
    37f8:	8f 77       	andi	r24, 0x7F	; 127
    37fa:	9a db       	rcall	.-2252   	; 0x2f30 <__addsf3>
    37fc:	ed e8       	ldi	r30, 0x8D	; 141
    37fe:	f2 e0       	ldi	r31, 0x02	; 2
    3800:	03 c0       	rjmp	.+6      	; 0x3808 <log+0x4a>
    3802:	96 db       	rcall	.-2260   	; 0x2f30 <__addsf3>
    3804:	ea eb       	ldi	r30, 0xBA	; 186
    3806:	f2 e0       	ldi	r31, 0x02	; 2
    3808:	dc dd       	rcall	.-1096   	; 0x33c2 <__fp_powser>
    380a:	8b 01       	movw	r16, r22
    380c:	be 01       	movw	r22, r28
    380e:	ec 01       	movw	r28, r24
    3810:	fb 2e       	mov	r15, r27
    3812:	6f 57       	subi	r22, 0x7F	; 127
    3814:	71 09       	sbc	r23, r1
    3816:	75 95       	asr	r23
    3818:	77 1f       	adc	r23, r23
    381a:	88 0b       	sbc	r24, r24
    381c:	99 0b       	sbc	r25, r25
    381e:	3e dd       	rcall	.-1412   	; 0x329c <__floatsisf>
    3820:	28 e1       	ldi	r18, 0x18	; 24
    3822:	32 e7       	ldi	r19, 0x72	; 114
    3824:	41 e3       	ldi	r20, 0x31	; 49
    3826:	5f e3       	ldi	r21, 0x3F	; 63
    3828:	61 de       	rcall	.-830    	; 0x34ec <__mulsf3x>
    382a:	af 2d       	mov	r26, r15
    382c:	98 01       	movw	r18, r16
    382e:	ae 01       	movw	r20, r28
    3830:	ff 90       	pop	r15
    3832:	0f 91       	pop	r16
    3834:	1f 91       	pop	r17
    3836:	cf 91       	pop	r28
    3838:	df 91       	pop	r29
    383a:	8b db       	rcall	.-2282   	; 0x2f52 <__addsf3x>
    383c:	06 ce       	rjmp	.-1012   	; 0x344a <__fp_round>

0000383e <modf>:
    383e:	fa 01       	movw	r30, r20
    3840:	dc 01       	movw	r26, r24
    3842:	aa 0f       	add	r26, r26
    3844:	bb 1f       	adc	r27, r27
    3846:	9b 01       	movw	r18, r22
    3848:	ac 01       	movw	r20, r24
    384a:	bf 57       	subi	r27, 0x7F	; 127
    384c:	28 f4       	brcc	.+10     	; 0x3858 <modf+0x1a>
    384e:	22 27       	eor	r18, r18
    3850:	33 27       	eor	r19, r19
    3852:	44 27       	eor	r20, r20
    3854:	50 78       	andi	r21, 0x80	; 128
    3856:	1f c0       	rjmp	.+62     	; 0x3896 <modf+0x58>
    3858:	b7 51       	subi	r27, 0x17	; 23
    385a:	88 f4       	brcc	.+34     	; 0x387e <modf+0x40>
    385c:	ab 2f       	mov	r26, r27
    385e:	00 24       	eor	r0, r0
    3860:	46 95       	lsr	r20
    3862:	37 95       	ror	r19
    3864:	27 95       	ror	r18
    3866:	01 1c       	adc	r0, r1
    3868:	a3 95       	inc	r26
    386a:	d2 f3       	brmi	.-12     	; 0x3860 <modf+0x22>
    386c:	00 20       	and	r0, r0
    386e:	69 f0       	breq	.+26     	; 0x388a <modf+0x4c>
    3870:	22 0f       	add	r18, r18
    3872:	33 1f       	adc	r19, r19
    3874:	44 1f       	adc	r20, r20
    3876:	b3 95       	inc	r27
    3878:	da f3       	brmi	.-10     	; 0x3870 <modf+0x32>
    387a:	0d d0       	rcall	.+26     	; 0x3896 <modf+0x58>
    387c:	58 cb       	rjmp	.-2384   	; 0x2f2e <__subsf3>
    387e:	61 30       	cpi	r22, 0x01	; 1
    3880:	71 05       	cpc	r23, r1
    3882:	a0 e8       	ldi	r26, 0x80	; 128
    3884:	8a 07       	cpc	r24, r26
    3886:	b9 46       	sbci	r27, 0x69	; 105
    3888:	30 f4       	brcc	.+12     	; 0x3896 <modf+0x58>
    388a:	9b 01       	movw	r18, r22
    388c:	ac 01       	movw	r20, r24
    388e:	66 27       	eor	r22, r22
    3890:	77 27       	eor	r23, r23
    3892:	88 27       	eor	r24, r24
    3894:	90 78       	andi	r25, 0x80	; 128
    3896:	30 96       	adiw	r30, 0x00	; 0
    3898:	21 f0       	breq	.+8      	; 0x38a2 <modf+0x64>
    389a:	20 83       	st	Z, r18
    389c:	31 83       	std	Z+1, r19	; 0x01
    389e:	42 83       	std	Z+2, r20	; 0x02
    38a0:	53 83       	std	Z+3, r21	; 0x03
    38a2:	08 95       	ret

000038a4 <__mulsi3>:
    38a4:	db 01       	movw	r26, r22
    38a6:	8f 93       	push	r24
    38a8:	9f 93       	push	r25
    38aa:	70 d0       	rcall	.+224    	; 0x398c <__muluhisi3>
    38ac:	bf 91       	pop	r27
    38ae:	af 91       	pop	r26
    38b0:	a2 9f       	mul	r26, r18
    38b2:	80 0d       	add	r24, r0
    38b4:	91 1d       	adc	r25, r1
    38b6:	a3 9f       	mul	r26, r19
    38b8:	90 0d       	add	r25, r0
    38ba:	b2 9f       	mul	r27, r18
    38bc:	90 0d       	add	r25, r0
    38be:	11 24       	eor	r1, r1
    38c0:	08 95       	ret

000038c2 <__udivmodhi4>:
    38c2:	aa 1b       	sub	r26, r26
    38c4:	bb 1b       	sub	r27, r27
    38c6:	51 e1       	ldi	r21, 0x11	; 17
    38c8:	07 c0       	rjmp	.+14     	; 0x38d8 <__udivmodhi4_ep>

000038ca <__udivmodhi4_loop>:
    38ca:	aa 1f       	adc	r26, r26
    38cc:	bb 1f       	adc	r27, r27
    38ce:	a6 17       	cp	r26, r22
    38d0:	b7 07       	cpc	r27, r23
    38d2:	10 f0       	brcs	.+4      	; 0x38d8 <__udivmodhi4_ep>
    38d4:	a6 1b       	sub	r26, r22
    38d6:	b7 0b       	sbc	r27, r23

000038d8 <__udivmodhi4_ep>:
    38d8:	88 1f       	adc	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	5a 95       	dec	r21
    38de:	a9 f7       	brne	.-22     	; 0x38ca <__udivmodhi4_loop>
    38e0:	80 95       	com	r24
    38e2:	90 95       	com	r25
    38e4:	bc 01       	movw	r22, r24
    38e6:	cd 01       	movw	r24, r26
    38e8:	08 95       	ret

000038ea <__divmodhi4>:
    38ea:	97 fb       	bst	r25, 7
    38ec:	07 2e       	mov	r0, r23
    38ee:	16 f4       	brtc	.+4      	; 0x38f4 <__divmodhi4+0xa>
    38f0:	00 94       	com	r0
    38f2:	06 d0       	rcall	.+12     	; 0x3900 <__divmodhi4_neg1>
    38f4:	77 fd       	sbrc	r23, 7
    38f6:	08 d0       	rcall	.+16     	; 0x3908 <__divmodhi4_neg2>
    38f8:	e4 df       	rcall	.-56     	; 0x38c2 <__udivmodhi4>
    38fa:	07 fc       	sbrc	r0, 7
    38fc:	05 d0       	rcall	.+10     	; 0x3908 <__divmodhi4_neg2>
    38fe:	3e f4       	brtc	.+14     	; 0x390e <__divmodhi4_exit>

00003900 <__divmodhi4_neg1>:
    3900:	90 95       	com	r25
    3902:	81 95       	neg	r24
    3904:	9f 4f       	sbci	r25, 0xFF	; 255
    3906:	08 95       	ret

00003908 <__divmodhi4_neg2>:
    3908:	70 95       	com	r23
    390a:	61 95       	neg	r22
    390c:	7f 4f       	sbci	r23, 0xFF	; 255

0000390e <__divmodhi4_exit>:
    390e:	08 95       	ret

00003910 <__udivmodsi4>:
    3910:	a1 e2       	ldi	r26, 0x21	; 33
    3912:	1a 2e       	mov	r1, r26
    3914:	aa 1b       	sub	r26, r26
    3916:	bb 1b       	sub	r27, r27
    3918:	fd 01       	movw	r30, r26
    391a:	0d c0       	rjmp	.+26     	; 0x3936 <__udivmodsi4_ep>

0000391c <__udivmodsi4_loop>:
    391c:	aa 1f       	adc	r26, r26
    391e:	bb 1f       	adc	r27, r27
    3920:	ee 1f       	adc	r30, r30
    3922:	ff 1f       	adc	r31, r31
    3924:	a2 17       	cp	r26, r18
    3926:	b3 07       	cpc	r27, r19
    3928:	e4 07       	cpc	r30, r20
    392a:	f5 07       	cpc	r31, r21
    392c:	20 f0       	brcs	.+8      	; 0x3936 <__udivmodsi4_ep>
    392e:	a2 1b       	sub	r26, r18
    3930:	b3 0b       	sbc	r27, r19
    3932:	e4 0b       	sbc	r30, r20
    3934:	f5 0b       	sbc	r31, r21

00003936 <__udivmodsi4_ep>:
    3936:	66 1f       	adc	r22, r22
    3938:	77 1f       	adc	r23, r23
    393a:	88 1f       	adc	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	1a 94       	dec	r1
    3940:	69 f7       	brne	.-38     	; 0x391c <__udivmodsi4_loop>
    3942:	60 95       	com	r22
    3944:	70 95       	com	r23
    3946:	80 95       	com	r24
    3948:	90 95       	com	r25
    394a:	9b 01       	movw	r18, r22
    394c:	ac 01       	movw	r20, r24
    394e:	bd 01       	movw	r22, r26
    3950:	cf 01       	movw	r24, r30
    3952:	08 95       	ret

00003954 <__divmodsi4>:
    3954:	05 2e       	mov	r0, r21
    3956:	97 fb       	bst	r25, 7
    3958:	16 f4       	brtc	.+4      	; 0x395e <__divmodsi4+0xa>
    395a:	00 94       	com	r0
    395c:	0f d0       	rcall	.+30     	; 0x397c <__negsi2>
    395e:	57 fd       	sbrc	r21, 7
    3960:	05 d0       	rcall	.+10     	; 0x396c <__divmodsi4_neg2>
    3962:	d6 df       	rcall	.-84     	; 0x3910 <__udivmodsi4>
    3964:	07 fc       	sbrc	r0, 7
    3966:	02 d0       	rcall	.+4      	; 0x396c <__divmodsi4_neg2>
    3968:	46 f4       	brtc	.+16     	; 0x397a <__divmodsi4_exit>
    396a:	08 c0       	rjmp	.+16     	; 0x397c <__negsi2>

0000396c <__divmodsi4_neg2>:
    396c:	50 95       	com	r21
    396e:	40 95       	com	r20
    3970:	30 95       	com	r19
    3972:	21 95       	neg	r18
    3974:	3f 4f       	sbci	r19, 0xFF	; 255
    3976:	4f 4f       	sbci	r20, 0xFF	; 255
    3978:	5f 4f       	sbci	r21, 0xFF	; 255

0000397a <__divmodsi4_exit>:
    397a:	08 95       	ret

0000397c <__negsi2>:
    397c:	90 95       	com	r25
    397e:	80 95       	com	r24
    3980:	70 95       	com	r23
    3982:	61 95       	neg	r22
    3984:	7f 4f       	sbci	r23, 0xFF	; 255
    3986:	8f 4f       	sbci	r24, 0xFF	; 255
    3988:	9f 4f       	sbci	r25, 0xFF	; 255
    398a:	08 95       	ret

0000398c <__muluhisi3>:
    398c:	2d d0       	rcall	.+90     	; 0x39e8 <__umulhisi3>
    398e:	a5 9f       	mul	r26, r21
    3990:	90 0d       	add	r25, r0
    3992:	b4 9f       	mul	r27, r20
    3994:	90 0d       	add	r25, r0
    3996:	a4 9f       	mul	r26, r20
    3998:	80 0d       	add	r24, r0
    399a:	91 1d       	adc	r25, r1
    399c:	11 24       	eor	r1, r1
    399e:	08 95       	ret

000039a0 <__mulshisi3>:
    39a0:	b7 ff       	sbrs	r27, 7
    39a2:	f4 cf       	rjmp	.-24     	; 0x398c <__muluhisi3>

000039a4 <__mulohisi3>:
    39a4:	f3 df       	rcall	.-26     	; 0x398c <__muluhisi3>
    39a6:	82 1b       	sub	r24, r18
    39a8:	93 0b       	sbc	r25, r19
    39aa:	08 95       	ret

000039ac <__ashrdi3>:
    39ac:	97 fb       	bst	r25, 7
    39ae:	10 f8       	bld	r1, 0

000039b0 <__lshrdi3>:
    39b0:	16 94       	lsr	r1
    39b2:	00 08       	sbc	r0, r0
    39b4:	0f 93       	push	r16
    39b6:	08 30       	cpi	r16, 0x08	; 8
    39b8:	98 f0       	brcs	.+38     	; 0x39e0 <__lshrdi3+0x30>
    39ba:	08 50       	subi	r16, 0x08	; 8
    39bc:	23 2f       	mov	r18, r19
    39be:	34 2f       	mov	r19, r20
    39c0:	45 2f       	mov	r20, r21
    39c2:	56 2f       	mov	r21, r22
    39c4:	67 2f       	mov	r22, r23
    39c6:	78 2f       	mov	r23, r24
    39c8:	89 2f       	mov	r24, r25
    39ca:	90 2d       	mov	r25, r0
    39cc:	f4 cf       	rjmp	.-24     	; 0x39b6 <__lshrdi3+0x6>
    39ce:	05 94       	asr	r0
    39d0:	97 95       	ror	r25
    39d2:	87 95       	ror	r24
    39d4:	77 95       	ror	r23
    39d6:	67 95       	ror	r22
    39d8:	57 95       	ror	r21
    39da:	47 95       	ror	r20
    39dc:	37 95       	ror	r19
    39de:	27 95       	ror	r18
    39e0:	0a 95       	dec	r16
    39e2:	aa f7       	brpl	.-22     	; 0x39ce <__lshrdi3+0x1e>
    39e4:	0f 91       	pop	r16
    39e6:	08 95       	ret

000039e8 <__umulhisi3>:
    39e8:	a2 9f       	mul	r26, r18
    39ea:	b0 01       	movw	r22, r0
    39ec:	b3 9f       	mul	r27, r19
    39ee:	c0 01       	movw	r24, r0
    39f0:	a3 9f       	mul	r26, r19
    39f2:	70 0d       	add	r23, r0
    39f4:	81 1d       	adc	r24, r1
    39f6:	11 24       	eor	r1, r1
    39f8:	91 1d       	adc	r25, r1
    39fa:	b2 9f       	mul	r27, r18
    39fc:	70 0d       	add	r23, r0
    39fe:	81 1d       	adc	r24, r1
    3a00:	11 24       	eor	r1, r1
    3a02:	91 1d       	adc	r25, r1
    3a04:	08 95       	ret

00003a06 <fdevopen>:
    3a06:	0f 93       	push	r16
    3a08:	1f 93       	push	r17
    3a0a:	cf 93       	push	r28
    3a0c:	df 93       	push	r29
    3a0e:	00 97       	sbiw	r24, 0x00	; 0
    3a10:	31 f4       	brne	.+12     	; 0x3a1e <fdevopen+0x18>
    3a12:	61 15       	cp	r22, r1
    3a14:	71 05       	cpc	r23, r1
    3a16:	19 f4       	brne	.+6      	; 0x3a1e <fdevopen+0x18>
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	39 c0       	rjmp	.+114    	; 0x3a90 <fdevopen+0x8a>
    3a1e:	8b 01       	movw	r16, r22
    3a20:	ec 01       	movw	r28, r24
    3a22:	6e e0       	ldi	r22, 0x0E	; 14
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	47 d5       	rcall	.+2702   	; 0x44ba <calloc>
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	89 2b       	or	r24, r25
    3a30:	99 f3       	breq	.-26     	; 0x3a18 <fdevopen+0x12>
    3a32:	80 e8       	ldi	r24, 0x80	; 128
    3a34:	83 83       	std	Z+3, r24	; 0x03
    3a36:	01 15       	cp	r16, r1
    3a38:	11 05       	cpc	r17, r1
    3a3a:	71 f0       	breq	.+28     	; 0x3a58 <fdevopen+0x52>
    3a3c:	02 87       	std	Z+10, r16	; 0x0a
    3a3e:	13 87       	std	Z+11, r17	; 0x0b
    3a40:	81 e8       	ldi	r24, 0x81	; 129
    3a42:	83 83       	std	Z+3, r24	; 0x03
    3a44:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <__iob>
    3a48:	90 91 96 21 	lds	r25, 0x2196	; 0x802196 <__iob+0x1>
    3a4c:	89 2b       	or	r24, r25
    3a4e:	21 f4       	brne	.+8      	; 0x3a58 <fdevopen+0x52>
    3a50:	e0 93 95 21 	sts	0x2195, r30	; 0x802195 <__iob>
    3a54:	f0 93 96 21 	sts	0x2196, r31	; 0x802196 <__iob+0x1>
    3a58:	20 97       	sbiw	r28, 0x00	; 0
    3a5a:	c9 f0       	breq	.+50     	; 0x3a8e <fdevopen+0x88>
    3a5c:	c0 87       	std	Z+8, r28	; 0x08
    3a5e:	d1 87       	std	Z+9, r29	; 0x09
    3a60:	83 81       	ldd	r24, Z+3	; 0x03
    3a62:	82 60       	ori	r24, 0x02	; 2
    3a64:	83 83       	std	Z+3, r24	; 0x03
    3a66:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <__iob+0x2>
    3a6a:	90 91 98 21 	lds	r25, 0x2198	; 0x802198 <__iob+0x3>
    3a6e:	89 2b       	or	r24, r25
    3a70:	71 f4       	brne	.+28     	; 0x3a8e <fdevopen+0x88>
    3a72:	e0 93 97 21 	sts	0x2197, r30	; 0x802197 <__iob+0x2>
    3a76:	f0 93 98 21 	sts	0x2198, r31	; 0x802198 <__iob+0x3>
    3a7a:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <__iob+0x4>
    3a7e:	90 91 9a 21 	lds	r25, 0x219A	; 0x80219a <__iob+0x5>
    3a82:	89 2b       	or	r24, r25
    3a84:	21 f4       	brne	.+8      	; 0x3a8e <fdevopen+0x88>
    3a86:	e0 93 99 21 	sts	0x2199, r30	; 0x802199 <__iob+0x4>
    3a8a:	f0 93 9a 21 	sts	0x219A, r31	; 0x80219a <__iob+0x5>
    3a8e:	cf 01       	movw	r24, r30
    3a90:	df 91       	pop	r29
    3a92:	cf 91       	pop	r28
    3a94:	1f 91       	pop	r17
    3a96:	0f 91       	pop	r16
    3a98:	08 95       	ret

00003a9a <printf>:
    3a9a:	cf 93       	push	r28
    3a9c:	df 93       	push	r29
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
    3aa2:	ae 01       	movw	r20, r28
    3aa4:	4a 5f       	subi	r20, 0xFA	; 250
    3aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    3aa8:	fa 01       	movw	r30, r20
    3aaa:	61 91       	ld	r22, Z+
    3aac:	71 91       	ld	r23, Z+
    3aae:	af 01       	movw	r20, r30
    3ab0:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <__iob+0x2>
    3ab4:	90 91 98 21 	lds	r25, 0x2198	; 0x802198 <__iob+0x3>
    3ab8:	46 d0       	rcall	.+140    	; 0x3b46 <vfprintf>
    3aba:	df 91       	pop	r29
    3abc:	cf 91       	pop	r28
    3abe:	08 95       	ret

00003ac0 <sprintf>:
    3ac0:	0f 93       	push	r16
    3ac2:	1f 93       	push	r17
    3ac4:	cf 93       	push	r28
    3ac6:	df 93       	push	r29
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	2e 97       	sbiw	r28, 0x0e	; 14
    3ace:	cd bf       	out	0x3d, r28	; 61
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	0e 89       	ldd	r16, Y+22	; 0x16
    3ad4:	1f 89       	ldd	r17, Y+23	; 0x17
    3ad6:	86 e0       	ldi	r24, 0x06	; 6
    3ad8:	8c 83       	std	Y+4, r24	; 0x04
    3ada:	09 83       	std	Y+1, r16	; 0x01
    3adc:	1a 83       	std	Y+2, r17	; 0x02
    3ade:	8f ef       	ldi	r24, 0xFF	; 255
    3ae0:	9f e7       	ldi	r25, 0x7F	; 127
    3ae2:	8d 83       	std	Y+5, r24	; 0x05
    3ae4:	9e 83       	std	Y+6, r25	; 0x06
    3ae6:	ae 01       	movw	r20, r28
    3ae8:	46 5e       	subi	r20, 0xE6	; 230
    3aea:	5f 4f       	sbci	r21, 0xFF	; 255
    3aec:	68 8d       	ldd	r22, Y+24	; 0x18
    3aee:	79 8d       	ldd	r23, Y+25	; 0x19
    3af0:	ce 01       	movw	r24, r28
    3af2:	01 96       	adiw	r24, 0x01	; 1
    3af4:	28 d0       	rcall	.+80     	; 0x3b46 <vfprintf>
    3af6:	ef 81       	ldd	r30, Y+7	; 0x07
    3af8:	f8 85       	ldd	r31, Y+8	; 0x08
    3afa:	e0 0f       	add	r30, r16
    3afc:	f1 1f       	adc	r31, r17
    3afe:	10 82       	st	Z, r1
    3b00:	2e 96       	adiw	r28, 0x0e	; 14
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	df 91       	pop	r29
    3b08:	cf 91       	pop	r28
    3b0a:	1f 91       	pop	r17
    3b0c:	0f 91       	pop	r16
    3b0e:	08 95       	ret

00003b10 <sscanf>:
    3b10:	cf 93       	push	r28
    3b12:	df 93       	push	r29
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	2e 97       	sbiw	r28, 0x0e	; 14
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	de bf       	out	0x3e, r29	; 62
    3b1e:	85 e0       	ldi	r24, 0x05	; 5
    3b20:	8c 83       	std	Y+4, r24	; 0x04
    3b22:	8c 89       	ldd	r24, Y+20	; 0x14
    3b24:	9d 89       	ldd	r25, Y+21	; 0x15
    3b26:	89 83       	std	Y+1, r24	; 0x01
    3b28:	9a 83       	std	Y+2, r25	; 0x02
    3b2a:	ae 01       	movw	r20, r28
    3b2c:	48 5e       	subi	r20, 0xE8	; 232
    3b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b30:	6e 89       	ldd	r22, Y+22	; 0x16
    3b32:	7f 89       	ldd	r23, Y+23	; 0x17
    3b34:	ce 01       	movw	r24, r28
    3b36:	01 96       	adiw	r24, 0x01	; 1
    3b38:	a9 d3       	rcall	.+1874   	; 0x428c <vfscanf>
    3b3a:	2e 96       	adiw	r28, 0x0e	; 14
    3b3c:	cd bf       	out	0x3d, r28	; 61
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	08 95       	ret

00003b46 <vfprintf>:
    3b46:	2f 92       	push	r2
    3b48:	3f 92       	push	r3
    3b4a:	4f 92       	push	r4
    3b4c:	5f 92       	push	r5
    3b4e:	6f 92       	push	r6
    3b50:	7f 92       	push	r7
    3b52:	8f 92       	push	r8
    3b54:	9f 92       	push	r9
    3b56:	af 92       	push	r10
    3b58:	bf 92       	push	r11
    3b5a:	cf 92       	push	r12
    3b5c:	df 92       	push	r13
    3b5e:	ef 92       	push	r14
    3b60:	ff 92       	push	r15
    3b62:	0f 93       	push	r16
    3b64:	1f 93       	push	r17
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	2b 97       	sbiw	r28, 0x0b	; 11
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	de bf       	out	0x3e, r29	; 62
    3b74:	6c 01       	movw	r12, r24
    3b76:	7b 01       	movw	r14, r22
    3b78:	8a 01       	movw	r16, r20
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	16 82       	std	Z+6, r1	; 0x06
    3b7e:	17 82       	std	Z+7, r1	; 0x07
    3b80:	83 81       	ldd	r24, Z+3	; 0x03
    3b82:	81 ff       	sbrs	r24, 1
    3b84:	bf c1       	rjmp	.+894    	; 0x3f04 <vfprintf+0x3be>
    3b86:	ce 01       	movw	r24, r28
    3b88:	01 96       	adiw	r24, 0x01	; 1
    3b8a:	3c 01       	movw	r6, r24
    3b8c:	f6 01       	movw	r30, r12
    3b8e:	93 81       	ldd	r25, Z+3	; 0x03
    3b90:	f7 01       	movw	r30, r14
    3b92:	93 fd       	sbrc	r25, 3
    3b94:	85 91       	lpm	r24, Z+
    3b96:	93 ff       	sbrs	r25, 3
    3b98:	81 91       	ld	r24, Z+
    3b9a:	7f 01       	movw	r14, r30
    3b9c:	88 23       	and	r24, r24
    3b9e:	09 f4       	brne	.+2      	; 0x3ba2 <vfprintf+0x5c>
    3ba0:	ad c1       	rjmp	.+858    	; 0x3efc <vfprintf+0x3b6>
    3ba2:	85 32       	cpi	r24, 0x25	; 37
    3ba4:	39 f4       	brne	.+14     	; 0x3bb4 <vfprintf+0x6e>
    3ba6:	93 fd       	sbrc	r25, 3
    3ba8:	85 91       	lpm	r24, Z+
    3baa:	93 ff       	sbrs	r25, 3
    3bac:	81 91       	ld	r24, Z+
    3bae:	7f 01       	movw	r14, r30
    3bb0:	85 32       	cpi	r24, 0x25	; 37
    3bb2:	21 f4       	brne	.+8      	; 0x3bbc <vfprintf+0x76>
    3bb4:	b6 01       	movw	r22, r12
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	29 d6       	rcall	.+3154   	; 0x480c <fputc>
    3bba:	e8 cf       	rjmp	.-48     	; 0x3b8c <vfprintf+0x46>
    3bbc:	91 2c       	mov	r9, r1
    3bbe:	21 2c       	mov	r2, r1
    3bc0:	31 2c       	mov	r3, r1
    3bc2:	ff e1       	ldi	r31, 0x1F	; 31
    3bc4:	f3 15       	cp	r31, r3
    3bc6:	d8 f0       	brcs	.+54     	; 0x3bfe <vfprintf+0xb8>
    3bc8:	8b 32       	cpi	r24, 0x2B	; 43
    3bca:	79 f0       	breq	.+30     	; 0x3bea <vfprintf+0xa4>
    3bcc:	38 f4       	brcc	.+14     	; 0x3bdc <vfprintf+0x96>
    3bce:	80 32       	cpi	r24, 0x20	; 32
    3bd0:	79 f0       	breq	.+30     	; 0x3bf0 <vfprintf+0xaa>
    3bd2:	83 32       	cpi	r24, 0x23	; 35
    3bd4:	a1 f4       	brne	.+40     	; 0x3bfe <vfprintf+0xb8>
    3bd6:	23 2d       	mov	r18, r3
    3bd8:	20 61       	ori	r18, 0x10	; 16
    3bda:	1d c0       	rjmp	.+58     	; 0x3c16 <vfprintf+0xd0>
    3bdc:	8d 32       	cpi	r24, 0x2D	; 45
    3bde:	61 f0       	breq	.+24     	; 0x3bf8 <vfprintf+0xb2>
    3be0:	80 33       	cpi	r24, 0x30	; 48
    3be2:	69 f4       	brne	.+26     	; 0x3bfe <vfprintf+0xb8>
    3be4:	23 2d       	mov	r18, r3
    3be6:	21 60       	ori	r18, 0x01	; 1
    3be8:	16 c0       	rjmp	.+44     	; 0x3c16 <vfprintf+0xd0>
    3bea:	83 2d       	mov	r24, r3
    3bec:	82 60       	ori	r24, 0x02	; 2
    3bee:	38 2e       	mov	r3, r24
    3bf0:	e3 2d       	mov	r30, r3
    3bf2:	e4 60       	ori	r30, 0x04	; 4
    3bf4:	3e 2e       	mov	r3, r30
    3bf6:	2a c0       	rjmp	.+84     	; 0x3c4c <vfprintf+0x106>
    3bf8:	f3 2d       	mov	r31, r3
    3bfa:	f8 60       	ori	r31, 0x08	; 8
    3bfc:	1d c0       	rjmp	.+58     	; 0x3c38 <vfprintf+0xf2>
    3bfe:	37 fc       	sbrc	r3, 7
    3c00:	2d c0       	rjmp	.+90     	; 0x3c5c <vfprintf+0x116>
    3c02:	20 ed       	ldi	r18, 0xD0	; 208
    3c04:	28 0f       	add	r18, r24
    3c06:	2a 30       	cpi	r18, 0x0A	; 10
    3c08:	40 f0       	brcs	.+16     	; 0x3c1a <vfprintf+0xd4>
    3c0a:	8e 32       	cpi	r24, 0x2E	; 46
    3c0c:	b9 f4       	brne	.+46     	; 0x3c3c <vfprintf+0xf6>
    3c0e:	36 fc       	sbrc	r3, 6
    3c10:	75 c1       	rjmp	.+746    	; 0x3efc <vfprintf+0x3b6>
    3c12:	23 2d       	mov	r18, r3
    3c14:	20 64       	ori	r18, 0x40	; 64
    3c16:	32 2e       	mov	r3, r18
    3c18:	19 c0       	rjmp	.+50     	; 0x3c4c <vfprintf+0x106>
    3c1a:	36 fe       	sbrs	r3, 6
    3c1c:	06 c0       	rjmp	.+12     	; 0x3c2a <vfprintf+0xe4>
    3c1e:	8a e0       	ldi	r24, 0x0A	; 10
    3c20:	98 9e       	mul	r9, r24
    3c22:	20 0d       	add	r18, r0
    3c24:	11 24       	eor	r1, r1
    3c26:	92 2e       	mov	r9, r18
    3c28:	11 c0       	rjmp	.+34     	; 0x3c4c <vfprintf+0x106>
    3c2a:	ea e0       	ldi	r30, 0x0A	; 10
    3c2c:	2e 9e       	mul	r2, r30
    3c2e:	20 0d       	add	r18, r0
    3c30:	11 24       	eor	r1, r1
    3c32:	22 2e       	mov	r2, r18
    3c34:	f3 2d       	mov	r31, r3
    3c36:	f0 62       	ori	r31, 0x20	; 32
    3c38:	3f 2e       	mov	r3, r31
    3c3a:	08 c0       	rjmp	.+16     	; 0x3c4c <vfprintf+0x106>
    3c3c:	8c 36       	cpi	r24, 0x6C	; 108
    3c3e:	21 f4       	brne	.+8      	; 0x3c48 <vfprintf+0x102>
    3c40:	83 2d       	mov	r24, r3
    3c42:	80 68       	ori	r24, 0x80	; 128
    3c44:	38 2e       	mov	r3, r24
    3c46:	02 c0       	rjmp	.+4      	; 0x3c4c <vfprintf+0x106>
    3c48:	88 36       	cpi	r24, 0x68	; 104
    3c4a:	41 f4       	brne	.+16     	; 0x3c5c <vfprintf+0x116>
    3c4c:	f7 01       	movw	r30, r14
    3c4e:	93 fd       	sbrc	r25, 3
    3c50:	85 91       	lpm	r24, Z+
    3c52:	93 ff       	sbrs	r25, 3
    3c54:	81 91       	ld	r24, Z+
    3c56:	7f 01       	movw	r14, r30
    3c58:	81 11       	cpse	r24, r1
    3c5a:	b3 cf       	rjmp	.-154    	; 0x3bc2 <vfprintf+0x7c>
    3c5c:	98 2f       	mov	r25, r24
    3c5e:	9f 7d       	andi	r25, 0xDF	; 223
    3c60:	95 54       	subi	r25, 0x45	; 69
    3c62:	93 30       	cpi	r25, 0x03	; 3
    3c64:	28 f4       	brcc	.+10     	; 0x3c70 <vfprintf+0x12a>
    3c66:	0c 5f       	subi	r16, 0xFC	; 252
    3c68:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6a:	9f e3       	ldi	r25, 0x3F	; 63
    3c6c:	99 83       	std	Y+1, r25	; 0x01
    3c6e:	0d c0       	rjmp	.+26     	; 0x3c8a <vfprintf+0x144>
    3c70:	83 36       	cpi	r24, 0x63	; 99
    3c72:	31 f0       	breq	.+12     	; 0x3c80 <vfprintf+0x13a>
    3c74:	83 37       	cpi	r24, 0x73	; 115
    3c76:	71 f0       	breq	.+28     	; 0x3c94 <vfprintf+0x14e>
    3c78:	83 35       	cpi	r24, 0x53	; 83
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <vfprintf+0x138>
    3c7c:	55 c0       	rjmp	.+170    	; 0x3d28 <vfprintf+0x1e2>
    3c7e:	20 c0       	rjmp	.+64     	; 0x3cc0 <vfprintf+0x17a>
    3c80:	f8 01       	movw	r30, r16
    3c82:	80 81       	ld	r24, Z
    3c84:	89 83       	std	Y+1, r24	; 0x01
    3c86:	0e 5f       	subi	r16, 0xFE	; 254
    3c88:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8a:	88 24       	eor	r8, r8
    3c8c:	83 94       	inc	r8
    3c8e:	91 2c       	mov	r9, r1
    3c90:	53 01       	movw	r10, r6
    3c92:	12 c0       	rjmp	.+36     	; 0x3cb8 <vfprintf+0x172>
    3c94:	28 01       	movw	r4, r16
    3c96:	f2 e0       	ldi	r31, 0x02	; 2
    3c98:	4f 0e       	add	r4, r31
    3c9a:	51 1c       	adc	r5, r1
    3c9c:	f8 01       	movw	r30, r16
    3c9e:	a0 80       	ld	r10, Z
    3ca0:	b1 80       	ldd	r11, Z+1	; 0x01
    3ca2:	36 fe       	sbrs	r3, 6
    3ca4:	03 c0       	rjmp	.+6      	; 0x3cac <vfprintf+0x166>
    3ca6:	69 2d       	mov	r22, r9
    3ca8:	70 e0       	ldi	r23, 0x00	; 0
    3caa:	02 c0       	rjmp	.+4      	; 0x3cb0 <vfprintf+0x16a>
    3cac:	6f ef       	ldi	r22, 0xFF	; 255
    3cae:	7f ef       	ldi	r23, 0xFF	; 255
    3cb0:	c5 01       	movw	r24, r10
    3cb2:	63 d5       	rcall	.+2758   	; 0x477a <strnlen>
    3cb4:	4c 01       	movw	r8, r24
    3cb6:	82 01       	movw	r16, r4
    3cb8:	f3 2d       	mov	r31, r3
    3cba:	ff 77       	andi	r31, 0x7F	; 127
    3cbc:	3f 2e       	mov	r3, r31
    3cbe:	15 c0       	rjmp	.+42     	; 0x3cea <vfprintf+0x1a4>
    3cc0:	28 01       	movw	r4, r16
    3cc2:	22 e0       	ldi	r18, 0x02	; 2
    3cc4:	42 0e       	add	r4, r18
    3cc6:	51 1c       	adc	r5, r1
    3cc8:	f8 01       	movw	r30, r16
    3cca:	a0 80       	ld	r10, Z
    3ccc:	b1 80       	ldd	r11, Z+1	; 0x01
    3cce:	36 fe       	sbrs	r3, 6
    3cd0:	03 c0       	rjmp	.+6      	; 0x3cd8 <vfprintf+0x192>
    3cd2:	69 2d       	mov	r22, r9
    3cd4:	70 e0       	ldi	r23, 0x00	; 0
    3cd6:	02 c0       	rjmp	.+4      	; 0x3cdc <vfprintf+0x196>
    3cd8:	6f ef       	ldi	r22, 0xFF	; 255
    3cda:	7f ef       	ldi	r23, 0xFF	; 255
    3cdc:	c5 01       	movw	r24, r10
    3cde:	3b d5       	rcall	.+2678   	; 0x4756 <strnlen_P>
    3ce0:	4c 01       	movw	r8, r24
    3ce2:	f3 2d       	mov	r31, r3
    3ce4:	f0 68       	ori	r31, 0x80	; 128
    3ce6:	3f 2e       	mov	r3, r31
    3ce8:	82 01       	movw	r16, r4
    3cea:	33 fc       	sbrc	r3, 3
    3cec:	19 c0       	rjmp	.+50     	; 0x3d20 <vfprintf+0x1da>
    3cee:	82 2d       	mov	r24, r2
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	88 16       	cp	r8, r24
    3cf4:	99 06       	cpc	r9, r25
    3cf6:	a0 f4       	brcc	.+40     	; 0x3d20 <vfprintf+0x1da>
    3cf8:	b6 01       	movw	r22, r12
    3cfa:	80 e2       	ldi	r24, 0x20	; 32
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	86 d5       	rcall	.+2828   	; 0x480c <fputc>
    3d00:	2a 94       	dec	r2
    3d02:	f5 cf       	rjmp	.-22     	; 0x3cee <vfprintf+0x1a8>
    3d04:	f5 01       	movw	r30, r10
    3d06:	37 fc       	sbrc	r3, 7
    3d08:	85 91       	lpm	r24, Z+
    3d0a:	37 fe       	sbrs	r3, 7
    3d0c:	81 91       	ld	r24, Z+
    3d0e:	5f 01       	movw	r10, r30
    3d10:	b6 01       	movw	r22, r12
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	7b d5       	rcall	.+2806   	; 0x480c <fputc>
    3d16:	21 10       	cpse	r2, r1
    3d18:	2a 94       	dec	r2
    3d1a:	21 e0       	ldi	r18, 0x01	; 1
    3d1c:	82 1a       	sub	r8, r18
    3d1e:	91 08       	sbc	r9, r1
    3d20:	81 14       	cp	r8, r1
    3d22:	91 04       	cpc	r9, r1
    3d24:	79 f7       	brne	.-34     	; 0x3d04 <vfprintf+0x1be>
    3d26:	e1 c0       	rjmp	.+450    	; 0x3eea <vfprintf+0x3a4>
    3d28:	84 36       	cpi	r24, 0x64	; 100
    3d2a:	11 f0       	breq	.+4      	; 0x3d30 <vfprintf+0x1ea>
    3d2c:	89 36       	cpi	r24, 0x69	; 105
    3d2e:	39 f5       	brne	.+78     	; 0x3d7e <vfprintf+0x238>
    3d30:	f8 01       	movw	r30, r16
    3d32:	37 fe       	sbrs	r3, 7
    3d34:	07 c0       	rjmp	.+14     	; 0x3d44 <vfprintf+0x1fe>
    3d36:	60 81       	ld	r22, Z
    3d38:	71 81       	ldd	r23, Z+1	; 0x01
    3d3a:	82 81       	ldd	r24, Z+2	; 0x02
    3d3c:	93 81       	ldd	r25, Z+3	; 0x03
    3d3e:	0c 5f       	subi	r16, 0xFC	; 252
    3d40:	1f 4f       	sbci	r17, 0xFF	; 255
    3d42:	08 c0       	rjmp	.+16     	; 0x3d54 <vfprintf+0x20e>
    3d44:	60 81       	ld	r22, Z
    3d46:	71 81       	ldd	r23, Z+1	; 0x01
    3d48:	07 2e       	mov	r0, r23
    3d4a:	00 0c       	add	r0, r0
    3d4c:	88 0b       	sbc	r24, r24
    3d4e:	99 0b       	sbc	r25, r25
    3d50:	0e 5f       	subi	r16, 0xFE	; 254
    3d52:	1f 4f       	sbci	r17, 0xFF	; 255
    3d54:	f3 2d       	mov	r31, r3
    3d56:	ff 76       	andi	r31, 0x6F	; 111
    3d58:	3f 2e       	mov	r3, r31
    3d5a:	97 ff       	sbrs	r25, 7
    3d5c:	09 c0       	rjmp	.+18     	; 0x3d70 <vfprintf+0x22a>
    3d5e:	90 95       	com	r25
    3d60:	80 95       	com	r24
    3d62:	70 95       	com	r23
    3d64:	61 95       	neg	r22
    3d66:	7f 4f       	sbci	r23, 0xFF	; 255
    3d68:	8f 4f       	sbci	r24, 0xFF	; 255
    3d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6c:	f0 68       	ori	r31, 0x80	; 128
    3d6e:	3f 2e       	mov	r3, r31
    3d70:	2a e0       	ldi	r18, 0x0A	; 10
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	a3 01       	movw	r20, r6
    3d76:	9f d5       	rcall	.+2878   	; 0x48b6 <__ultoa_invert>
    3d78:	88 2e       	mov	r8, r24
    3d7a:	86 18       	sub	r8, r6
    3d7c:	44 c0       	rjmp	.+136    	; 0x3e06 <vfprintf+0x2c0>
    3d7e:	85 37       	cpi	r24, 0x75	; 117
    3d80:	31 f4       	brne	.+12     	; 0x3d8e <vfprintf+0x248>
    3d82:	23 2d       	mov	r18, r3
    3d84:	2f 7e       	andi	r18, 0xEF	; 239
    3d86:	b2 2e       	mov	r11, r18
    3d88:	2a e0       	ldi	r18, 0x0A	; 10
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	25 c0       	rjmp	.+74     	; 0x3dd8 <vfprintf+0x292>
    3d8e:	93 2d       	mov	r25, r3
    3d90:	99 7f       	andi	r25, 0xF9	; 249
    3d92:	b9 2e       	mov	r11, r25
    3d94:	8f 36       	cpi	r24, 0x6F	; 111
    3d96:	c1 f0       	breq	.+48     	; 0x3dc8 <vfprintf+0x282>
    3d98:	18 f4       	brcc	.+6      	; 0x3da0 <vfprintf+0x25a>
    3d9a:	88 35       	cpi	r24, 0x58	; 88
    3d9c:	79 f0       	breq	.+30     	; 0x3dbc <vfprintf+0x276>
    3d9e:	ae c0       	rjmp	.+348    	; 0x3efc <vfprintf+0x3b6>
    3da0:	80 37       	cpi	r24, 0x70	; 112
    3da2:	19 f0       	breq	.+6      	; 0x3daa <vfprintf+0x264>
    3da4:	88 37       	cpi	r24, 0x78	; 120
    3da6:	21 f0       	breq	.+8      	; 0x3db0 <vfprintf+0x26a>
    3da8:	a9 c0       	rjmp	.+338    	; 0x3efc <vfprintf+0x3b6>
    3daa:	e9 2f       	mov	r30, r25
    3dac:	e0 61       	ori	r30, 0x10	; 16
    3dae:	be 2e       	mov	r11, r30
    3db0:	b4 fe       	sbrs	r11, 4
    3db2:	0d c0       	rjmp	.+26     	; 0x3dce <vfprintf+0x288>
    3db4:	fb 2d       	mov	r31, r11
    3db6:	f4 60       	ori	r31, 0x04	; 4
    3db8:	bf 2e       	mov	r11, r31
    3dba:	09 c0       	rjmp	.+18     	; 0x3dce <vfprintf+0x288>
    3dbc:	34 fe       	sbrs	r3, 4
    3dbe:	0a c0       	rjmp	.+20     	; 0x3dd4 <vfprintf+0x28e>
    3dc0:	29 2f       	mov	r18, r25
    3dc2:	26 60       	ori	r18, 0x06	; 6
    3dc4:	b2 2e       	mov	r11, r18
    3dc6:	06 c0       	rjmp	.+12     	; 0x3dd4 <vfprintf+0x28e>
    3dc8:	28 e0       	ldi	r18, 0x08	; 8
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	05 c0       	rjmp	.+10     	; 0x3dd8 <vfprintf+0x292>
    3dce:	20 e1       	ldi	r18, 0x10	; 16
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	02 c0       	rjmp	.+4      	; 0x3dd8 <vfprintf+0x292>
    3dd4:	20 e1       	ldi	r18, 0x10	; 16
    3dd6:	32 e0       	ldi	r19, 0x02	; 2
    3dd8:	f8 01       	movw	r30, r16
    3dda:	b7 fe       	sbrs	r11, 7
    3ddc:	07 c0       	rjmp	.+14     	; 0x3dec <vfprintf+0x2a6>
    3dde:	60 81       	ld	r22, Z
    3de0:	71 81       	ldd	r23, Z+1	; 0x01
    3de2:	82 81       	ldd	r24, Z+2	; 0x02
    3de4:	93 81       	ldd	r25, Z+3	; 0x03
    3de6:	0c 5f       	subi	r16, 0xFC	; 252
    3de8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dea:	06 c0       	rjmp	.+12     	; 0x3df8 <vfprintf+0x2b2>
    3dec:	60 81       	ld	r22, Z
    3dee:	71 81       	ldd	r23, Z+1	; 0x01
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 5f       	subi	r16, 0xFE	; 254
    3df6:	1f 4f       	sbci	r17, 0xFF	; 255
    3df8:	a3 01       	movw	r20, r6
    3dfa:	5d d5       	rcall	.+2746   	; 0x48b6 <__ultoa_invert>
    3dfc:	88 2e       	mov	r8, r24
    3dfe:	86 18       	sub	r8, r6
    3e00:	fb 2d       	mov	r31, r11
    3e02:	ff 77       	andi	r31, 0x7F	; 127
    3e04:	3f 2e       	mov	r3, r31
    3e06:	36 fe       	sbrs	r3, 6
    3e08:	0d c0       	rjmp	.+26     	; 0x3e24 <vfprintf+0x2de>
    3e0a:	23 2d       	mov	r18, r3
    3e0c:	2e 7f       	andi	r18, 0xFE	; 254
    3e0e:	a2 2e       	mov	r10, r18
    3e10:	89 14       	cp	r8, r9
    3e12:	58 f4       	brcc	.+22     	; 0x3e2a <vfprintf+0x2e4>
    3e14:	34 fe       	sbrs	r3, 4
    3e16:	0b c0       	rjmp	.+22     	; 0x3e2e <vfprintf+0x2e8>
    3e18:	32 fc       	sbrc	r3, 2
    3e1a:	09 c0       	rjmp	.+18     	; 0x3e2e <vfprintf+0x2e8>
    3e1c:	83 2d       	mov	r24, r3
    3e1e:	8e 7e       	andi	r24, 0xEE	; 238
    3e20:	a8 2e       	mov	r10, r24
    3e22:	05 c0       	rjmp	.+10     	; 0x3e2e <vfprintf+0x2e8>
    3e24:	b8 2c       	mov	r11, r8
    3e26:	a3 2c       	mov	r10, r3
    3e28:	03 c0       	rjmp	.+6      	; 0x3e30 <vfprintf+0x2ea>
    3e2a:	b8 2c       	mov	r11, r8
    3e2c:	01 c0       	rjmp	.+2      	; 0x3e30 <vfprintf+0x2ea>
    3e2e:	b9 2c       	mov	r11, r9
    3e30:	a4 fe       	sbrs	r10, 4
    3e32:	0f c0       	rjmp	.+30     	; 0x3e52 <vfprintf+0x30c>
    3e34:	fe 01       	movw	r30, r28
    3e36:	e8 0d       	add	r30, r8
    3e38:	f1 1d       	adc	r31, r1
    3e3a:	80 81       	ld	r24, Z
    3e3c:	80 33       	cpi	r24, 0x30	; 48
    3e3e:	21 f4       	brne	.+8      	; 0x3e48 <vfprintf+0x302>
    3e40:	9a 2d       	mov	r25, r10
    3e42:	99 7e       	andi	r25, 0xE9	; 233
    3e44:	a9 2e       	mov	r10, r25
    3e46:	09 c0       	rjmp	.+18     	; 0x3e5a <vfprintf+0x314>
    3e48:	a2 fe       	sbrs	r10, 2
    3e4a:	06 c0       	rjmp	.+12     	; 0x3e58 <vfprintf+0x312>
    3e4c:	b3 94       	inc	r11
    3e4e:	b3 94       	inc	r11
    3e50:	04 c0       	rjmp	.+8      	; 0x3e5a <vfprintf+0x314>
    3e52:	8a 2d       	mov	r24, r10
    3e54:	86 78       	andi	r24, 0x86	; 134
    3e56:	09 f0       	breq	.+2      	; 0x3e5a <vfprintf+0x314>
    3e58:	b3 94       	inc	r11
    3e5a:	a3 fc       	sbrc	r10, 3
    3e5c:	10 c0       	rjmp	.+32     	; 0x3e7e <vfprintf+0x338>
    3e5e:	a0 fe       	sbrs	r10, 0
    3e60:	06 c0       	rjmp	.+12     	; 0x3e6e <vfprintf+0x328>
    3e62:	b2 14       	cp	r11, r2
    3e64:	80 f4       	brcc	.+32     	; 0x3e86 <vfprintf+0x340>
    3e66:	28 0c       	add	r2, r8
    3e68:	92 2c       	mov	r9, r2
    3e6a:	9b 18       	sub	r9, r11
    3e6c:	0d c0       	rjmp	.+26     	; 0x3e88 <vfprintf+0x342>
    3e6e:	b2 14       	cp	r11, r2
    3e70:	58 f4       	brcc	.+22     	; 0x3e88 <vfprintf+0x342>
    3e72:	b6 01       	movw	r22, r12
    3e74:	80 e2       	ldi	r24, 0x20	; 32
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	c9 d4       	rcall	.+2450   	; 0x480c <fputc>
    3e7a:	b3 94       	inc	r11
    3e7c:	f8 cf       	rjmp	.-16     	; 0x3e6e <vfprintf+0x328>
    3e7e:	b2 14       	cp	r11, r2
    3e80:	18 f4       	brcc	.+6      	; 0x3e88 <vfprintf+0x342>
    3e82:	2b 18       	sub	r2, r11
    3e84:	02 c0       	rjmp	.+4      	; 0x3e8a <vfprintf+0x344>
    3e86:	98 2c       	mov	r9, r8
    3e88:	21 2c       	mov	r2, r1
    3e8a:	a4 fe       	sbrs	r10, 4
    3e8c:	0f c0       	rjmp	.+30     	; 0x3eac <vfprintf+0x366>
    3e8e:	b6 01       	movw	r22, r12
    3e90:	80 e3       	ldi	r24, 0x30	; 48
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	bb d4       	rcall	.+2422   	; 0x480c <fputc>
    3e96:	a2 fe       	sbrs	r10, 2
    3e98:	16 c0       	rjmp	.+44     	; 0x3ec6 <vfprintf+0x380>
    3e9a:	a1 fc       	sbrc	r10, 1
    3e9c:	03 c0       	rjmp	.+6      	; 0x3ea4 <vfprintf+0x35e>
    3e9e:	88 e7       	ldi	r24, 0x78	; 120
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	02 c0       	rjmp	.+4      	; 0x3ea8 <vfprintf+0x362>
    3ea4:	88 e5       	ldi	r24, 0x58	; 88
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	b6 01       	movw	r22, r12
    3eaa:	0c c0       	rjmp	.+24     	; 0x3ec4 <vfprintf+0x37e>
    3eac:	8a 2d       	mov	r24, r10
    3eae:	86 78       	andi	r24, 0x86	; 134
    3eb0:	51 f0       	breq	.+20     	; 0x3ec6 <vfprintf+0x380>
    3eb2:	a1 fe       	sbrs	r10, 1
    3eb4:	02 c0       	rjmp	.+4      	; 0x3eba <vfprintf+0x374>
    3eb6:	8b e2       	ldi	r24, 0x2B	; 43
    3eb8:	01 c0       	rjmp	.+2      	; 0x3ebc <vfprintf+0x376>
    3eba:	80 e2       	ldi	r24, 0x20	; 32
    3ebc:	a7 fc       	sbrc	r10, 7
    3ebe:	8d e2       	ldi	r24, 0x2D	; 45
    3ec0:	b6 01       	movw	r22, r12
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	a3 d4       	rcall	.+2374   	; 0x480c <fputc>
    3ec6:	89 14       	cp	r8, r9
    3ec8:	30 f4       	brcc	.+12     	; 0x3ed6 <vfprintf+0x390>
    3eca:	b6 01       	movw	r22, r12
    3ecc:	80 e3       	ldi	r24, 0x30	; 48
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	9d d4       	rcall	.+2362   	; 0x480c <fputc>
    3ed2:	9a 94       	dec	r9
    3ed4:	f8 cf       	rjmp	.-16     	; 0x3ec6 <vfprintf+0x380>
    3ed6:	8a 94       	dec	r8
    3ed8:	f3 01       	movw	r30, r6
    3eda:	e8 0d       	add	r30, r8
    3edc:	f1 1d       	adc	r31, r1
    3ede:	80 81       	ld	r24, Z
    3ee0:	b6 01       	movw	r22, r12
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	93 d4       	rcall	.+2342   	; 0x480c <fputc>
    3ee6:	81 10       	cpse	r8, r1
    3ee8:	f6 cf       	rjmp	.-20     	; 0x3ed6 <vfprintf+0x390>
    3eea:	22 20       	and	r2, r2
    3eec:	09 f4       	brne	.+2      	; 0x3ef0 <vfprintf+0x3aa>
    3eee:	4e ce       	rjmp	.-868    	; 0x3b8c <vfprintf+0x46>
    3ef0:	b6 01       	movw	r22, r12
    3ef2:	80 e2       	ldi	r24, 0x20	; 32
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	8a d4       	rcall	.+2324   	; 0x480c <fputc>
    3ef8:	2a 94       	dec	r2
    3efa:	f7 cf       	rjmp	.-18     	; 0x3eea <vfprintf+0x3a4>
    3efc:	f6 01       	movw	r30, r12
    3efe:	86 81       	ldd	r24, Z+6	; 0x06
    3f00:	97 81       	ldd	r25, Z+7	; 0x07
    3f02:	02 c0       	rjmp	.+4      	; 0x3f08 <vfprintf+0x3c2>
    3f04:	8f ef       	ldi	r24, 0xFF	; 255
    3f06:	9f ef       	ldi	r25, 0xFF	; 255
    3f08:	2b 96       	adiw	r28, 0x0b	; 11
    3f0a:	cd bf       	out	0x3d, r28	; 61
    3f0c:	de bf       	out	0x3e, r29	; 62
    3f0e:	df 91       	pop	r29
    3f10:	cf 91       	pop	r28
    3f12:	1f 91       	pop	r17
    3f14:	0f 91       	pop	r16
    3f16:	ff 90       	pop	r15
    3f18:	ef 90       	pop	r14
    3f1a:	df 90       	pop	r13
    3f1c:	cf 90       	pop	r12
    3f1e:	bf 90       	pop	r11
    3f20:	af 90       	pop	r10
    3f22:	9f 90       	pop	r9
    3f24:	8f 90       	pop	r8
    3f26:	7f 90       	pop	r7
    3f28:	6f 90       	pop	r6
    3f2a:	5f 90       	pop	r5
    3f2c:	4f 90       	pop	r4
    3f2e:	3f 90       	pop	r3
    3f30:	2f 90       	pop	r2
    3f32:	08 95       	ret

00003f34 <putval>:
    3f34:	20 fd       	sbrc	r18, 0
    3f36:	09 c0       	rjmp	.+18     	; 0x3f4a <putval+0x16>
    3f38:	fc 01       	movw	r30, r24
    3f3a:	23 fd       	sbrc	r18, 3
    3f3c:	05 c0       	rjmp	.+10     	; 0x3f48 <putval+0x14>
    3f3e:	22 ff       	sbrs	r18, 2
    3f40:	02 c0       	rjmp	.+4      	; 0x3f46 <putval+0x12>
    3f42:	73 83       	std	Z+3, r23	; 0x03
    3f44:	62 83       	std	Z+2, r22	; 0x02
    3f46:	51 83       	std	Z+1, r21	; 0x01
    3f48:	40 83       	st	Z, r20
    3f4a:	08 95       	ret

00003f4c <mulacc>:
    3f4c:	44 fd       	sbrc	r20, 4
    3f4e:	17 c0       	rjmp	.+46     	; 0x3f7e <mulacc+0x32>
    3f50:	46 fd       	sbrc	r20, 6
    3f52:	17 c0       	rjmp	.+46     	; 0x3f82 <mulacc+0x36>
    3f54:	ab 01       	movw	r20, r22
    3f56:	bc 01       	movw	r22, r24
    3f58:	da 01       	movw	r26, r20
    3f5a:	fb 01       	movw	r30, r22
    3f5c:	aa 0f       	add	r26, r26
    3f5e:	bb 1f       	adc	r27, r27
    3f60:	ee 1f       	adc	r30, r30
    3f62:	ff 1f       	adc	r31, r31
    3f64:	10 94       	com	r1
    3f66:	d1 f7       	brne	.-12     	; 0x3f5c <mulacc+0x10>
    3f68:	4a 0f       	add	r20, r26
    3f6a:	5b 1f       	adc	r21, r27
    3f6c:	6e 1f       	adc	r22, r30
    3f6e:	7f 1f       	adc	r23, r31
    3f70:	cb 01       	movw	r24, r22
    3f72:	ba 01       	movw	r22, r20
    3f74:	66 0f       	add	r22, r22
    3f76:	77 1f       	adc	r23, r23
    3f78:	88 1f       	adc	r24, r24
    3f7a:	99 1f       	adc	r25, r25
    3f7c:	09 c0       	rjmp	.+18     	; 0x3f90 <mulacc+0x44>
    3f7e:	33 e0       	ldi	r19, 0x03	; 3
    3f80:	01 c0       	rjmp	.+2      	; 0x3f84 <mulacc+0x38>
    3f82:	34 e0       	ldi	r19, 0x04	; 4
    3f84:	66 0f       	add	r22, r22
    3f86:	77 1f       	adc	r23, r23
    3f88:	88 1f       	adc	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	31 50       	subi	r19, 0x01	; 1
    3f8e:	d1 f7       	brne	.-12     	; 0x3f84 <mulacc+0x38>
    3f90:	62 0f       	add	r22, r18
    3f92:	71 1d       	adc	r23, r1
    3f94:	81 1d       	adc	r24, r1
    3f96:	91 1d       	adc	r25, r1
    3f98:	08 95       	ret

00003f9a <skip_spaces>:
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	8c 01       	movw	r16, r24
    3fa4:	c8 01       	movw	r24, r16
    3fa6:	f4 d3       	rcall	.+2024   	; 0x4790 <fgetc>
    3fa8:	ec 01       	movw	r28, r24
    3faa:	97 fd       	sbrc	r25, 7
    3fac:	06 c0       	rjmp	.+12     	; 0x3fba <skip_spaces+0x20>
    3fae:	c0 d3       	rcall	.+1920   	; 0x4730 <isspace>
    3fb0:	89 2b       	or	r24, r25
    3fb2:	c1 f7       	brne	.-16     	; 0x3fa4 <skip_spaces+0xa>
    3fb4:	b8 01       	movw	r22, r16
    3fb6:	ce 01       	movw	r24, r28
    3fb8:	65 d4       	rcall	.+2250   	; 0x4884 <ungetc>
    3fba:	ce 01       	movw	r24, r28
    3fbc:	df 91       	pop	r29
    3fbe:	cf 91       	pop	r28
    3fc0:	1f 91       	pop	r17
    3fc2:	0f 91       	pop	r16
    3fc4:	08 95       	ret

00003fc6 <conv_int>:
    3fc6:	8f 92       	push	r8
    3fc8:	9f 92       	push	r9
    3fca:	af 92       	push	r10
    3fcc:	bf 92       	push	r11
    3fce:	ef 92       	push	r14
    3fd0:	ff 92       	push	r15
    3fd2:	0f 93       	push	r16
    3fd4:	1f 93       	push	r17
    3fd6:	cf 93       	push	r28
    3fd8:	df 93       	push	r29
    3fda:	8c 01       	movw	r16, r24
    3fdc:	d6 2f       	mov	r29, r22
    3fde:	7a 01       	movw	r14, r20
    3fe0:	b2 2e       	mov	r11, r18
    3fe2:	d6 d3       	rcall	.+1964   	; 0x4790 <fgetc>
    3fe4:	9c 01       	movw	r18, r24
    3fe6:	33 27       	eor	r19, r19
    3fe8:	2b 32       	cpi	r18, 0x2B	; 43
    3fea:	31 05       	cpc	r19, r1
    3fec:	31 f0       	breq	.+12     	; 0x3ffa <conv_int+0x34>
    3fee:	2d 32       	cpi	r18, 0x2D	; 45
    3ff0:	31 05       	cpc	r19, r1
    3ff2:	59 f4       	brne	.+22     	; 0x400a <__stack+0xb>
    3ff4:	8b 2d       	mov	r24, r11
    3ff6:	80 68       	ori	r24, 0x80	; 128
    3ff8:	b8 2e       	mov	r11, r24
    3ffa:	d1 50       	subi	r29, 0x01	; 1
    3ffc:	11 f4       	brne	.+4      	; 0x4002 <__stack+0x3>
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	61 c0       	rjmp	.+194    	; 0x40c4 <__stack+0xc5>
    4002:	c8 01       	movw	r24, r16
    4004:	c5 d3       	rcall	.+1930   	; 0x4790 <fgetc>
    4006:	97 fd       	sbrc	r25, 7
    4008:	fa cf       	rjmp	.-12     	; 0x3ffe <conv_int+0x38>
    400a:	cb 2d       	mov	r28, r11
    400c:	cd 7f       	andi	r28, 0xFD	; 253
    400e:	2b 2d       	mov	r18, r11
    4010:	20 73       	andi	r18, 0x30	; 48
    4012:	f9 f4       	brne	.+62     	; 0x4052 <__stack+0x53>
    4014:	80 33       	cpi	r24, 0x30	; 48
    4016:	e9 f4       	brne	.+58     	; 0x4052 <__stack+0x53>
    4018:	aa 24       	eor	r10, r10
    401a:	aa 94       	dec	r10
    401c:	ad 0e       	add	r10, r29
    401e:	09 f4       	brne	.+2      	; 0x4022 <__stack+0x23>
    4020:	3e c0       	rjmp	.+124    	; 0x409e <__stack+0x9f>
    4022:	c8 01       	movw	r24, r16
    4024:	b5 d3       	rcall	.+1898   	; 0x4790 <fgetc>
    4026:	97 fd       	sbrc	r25, 7
    4028:	3a c0       	rjmp	.+116    	; 0x409e <__stack+0x9f>
    402a:	9c 01       	movw	r18, r24
    402c:	2f 7d       	andi	r18, 0xDF	; 223
    402e:	33 27       	eor	r19, r19
    4030:	28 35       	cpi	r18, 0x58	; 88
    4032:	31 05       	cpc	r19, r1
    4034:	41 f4       	brne	.+16     	; 0x4046 <__stack+0x47>
    4036:	c2 64       	ori	r28, 0x42	; 66
    4038:	d2 50       	subi	r29, 0x02	; 2
    403a:	89 f1       	breq	.+98     	; 0x409e <__stack+0x9f>
    403c:	c8 01       	movw	r24, r16
    403e:	a8 d3       	rcall	.+1872   	; 0x4790 <fgetc>
    4040:	97 ff       	sbrs	r25, 7
    4042:	07 c0       	rjmp	.+14     	; 0x4052 <__stack+0x53>
    4044:	2c c0       	rjmp	.+88     	; 0x409e <__stack+0x9f>
    4046:	b6 fe       	sbrs	r11, 6
    4048:	02 c0       	rjmp	.+4      	; 0x404e <__stack+0x4f>
    404a:	c2 60       	ori	r28, 0x02	; 2
    404c:	01 c0       	rjmp	.+2      	; 0x4050 <__stack+0x51>
    404e:	c2 61       	ori	r28, 0x12	; 18
    4050:	da 2d       	mov	r29, r10
    4052:	81 2c       	mov	r8, r1
    4054:	91 2c       	mov	r9, r1
    4056:	54 01       	movw	r10, r8
    4058:	20 ed       	ldi	r18, 0xD0	; 208
    405a:	28 0f       	add	r18, r24
    405c:	28 30       	cpi	r18, 0x08	; 8
    405e:	78 f0       	brcs	.+30     	; 0x407e <__stack+0x7f>
    4060:	c4 ff       	sbrs	r28, 4
    4062:	03 c0       	rjmp	.+6      	; 0x406a <__stack+0x6b>
    4064:	b8 01       	movw	r22, r16
    4066:	0e d4       	rcall	.+2076   	; 0x4884 <ungetc>
    4068:	17 c0       	rjmp	.+46     	; 0x4098 <__stack+0x99>
    406a:	2a 30       	cpi	r18, 0x0A	; 10
    406c:	40 f0       	brcs	.+16     	; 0x407e <__stack+0x7f>
    406e:	c6 ff       	sbrs	r28, 6
    4070:	f9 cf       	rjmp	.-14     	; 0x4064 <__stack+0x65>
    4072:	2f 7d       	andi	r18, 0xDF	; 223
    4074:	3f ee       	ldi	r19, 0xEF	; 239
    4076:	32 0f       	add	r19, r18
    4078:	36 30       	cpi	r19, 0x06	; 6
    407a:	a0 f7       	brcc	.-24     	; 0x4064 <__stack+0x65>
    407c:	27 50       	subi	r18, 0x07	; 7
    407e:	4c 2f       	mov	r20, r28
    4080:	c5 01       	movw	r24, r10
    4082:	b4 01       	movw	r22, r8
    4084:	63 df       	rcall	.-314    	; 0x3f4c <mulacc>
    4086:	4b 01       	movw	r8, r22
    4088:	5c 01       	movw	r10, r24
    408a:	c2 60       	ori	r28, 0x02	; 2
    408c:	d1 50       	subi	r29, 0x01	; 1
    408e:	51 f0       	breq	.+20     	; 0x40a4 <__stack+0xa5>
    4090:	c8 01       	movw	r24, r16
    4092:	7e d3       	rcall	.+1788   	; 0x4790 <fgetc>
    4094:	97 ff       	sbrs	r25, 7
    4096:	e0 cf       	rjmp	.-64     	; 0x4058 <__stack+0x59>
    4098:	c1 fd       	sbrc	r28, 1
    409a:	04 c0       	rjmp	.+8      	; 0x40a4 <__stack+0xa5>
    409c:	b0 cf       	rjmp	.-160    	; 0x3ffe <conv_int+0x38>
    409e:	81 2c       	mov	r8, r1
    40a0:	91 2c       	mov	r9, r1
    40a2:	54 01       	movw	r10, r8
    40a4:	c7 ff       	sbrs	r28, 7
    40a6:	08 c0       	rjmp	.+16     	; 0x40b8 <__stack+0xb9>
    40a8:	b0 94       	com	r11
    40aa:	a0 94       	com	r10
    40ac:	90 94       	com	r9
    40ae:	80 94       	com	r8
    40b0:	81 1c       	adc	r8, r1
    40b2:	91 1c       	adc	r9, r1
    40b4:	a1 1c       	adc	r10, r1
    40b6:	b1 1c       	adc	r11, r1
    40b8:	2c 2f       	mov	r18, r28
    40ba:	b5 01       	movw	r22, r10
    40bc:	a4 01       	movw	r20, r8
    40be:	c7 01       	movw	r24, r14
    40c0:	39 df       	rcall	.-398    	; 0x3f34 <putval>
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	df 91       	pop	r29
    40c6:	cf 91       	pop	r28
    40c8:	1f 91       	pop	r17
    40ca:	0f 91       	pop	r16
    40cc:	ff 90       	pop	r15
    40ce:	ef 90       	pop	r14
    40d0:	bf 90       	pop	r11
    40d2:	af 90       	pop	r10
    40d4:	9f 90       	pop	r9
    40d6:	8f 90       	pop	r8
    40d8:	08 95       	ret

000040da <conv_brk>:
    40da:	5f 92       	push	r5
    40dc:	6f 92       	push	r6
    40de:	7f 92       	push	r7
    40e0:	8f 92       	push	r8
    40e2:	9f 92       	push	r9
    40e4:	af 92       	push	r10
    40e6:	bf 92       	push	r11
    40e8:	cf 92       	push	r12
    40ea:	df 92       	push	r13
    40ec:	ef 92       	push	r14
    40ee:	ff 92       	push	r15
    40f0:	0f 93       	push	r16
    40f2:	1f 93       	push	r17
    40f4:	cf 93       	push	r28
    40f6:	df 93       	push	r29
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	a0 97       	sbiw	r28, 0x20	; 32
    40fe:	cd bf       	out	0x3d, r28	; 61
    4100:	de bf       	out	0x3e, r29	; 62
    4102:	5c 01       	movw	r10, r24
    4104:	96 2e       	mov	r9, r22
    4106:	7a 01       	movw	r14, r20
    4108:	f9 01       	movw	r30, r18
    410a:	8e 01       	movw	r16, r28
    410c:	0f 5f       	subi	r16, 0xFF	; 255
    410e:	1f 4f       	sbci	r17, 0xFF	; 255
    4110:	68 01       	movw	r12, r16
    4112:	80 e2       	ldi	r24, 0x20	; 32
    4114:	d8 01       	movw	r26, r16
    4116:	1d 92       	st	X+, r1
    4118:	8a 95       	dec	r24
    411a:	e9 f7       	brne	.-6      	; 0x4116 <conv_brk+0x3c>
    411c:	d5 01       	movw	r26, r10
    411e:	13 96       	adiw	r26, 0x03	; 3
    4120:	8c 90       	ld	r8, X
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	61 2c       	mov	r6, r1
    4128:	71 2c       	mov	r7, r1
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	61 e0       	ldi	r22, 0x01	; 1
    412e:	70 e0       	ldi	r23, 0x00	; 0
    4130:	83 fc       	sbrc	r8, 3
    4132:	25 91       	lpm	r18, Z+
    4134:	83 fe       	sbrs	r8, 3
    4136:	21 91       	ld	r18, Z+
    4138:	8f 01       	movw	r16, r30
    413a:	52 2e       	mov	r5, r18
    413c:	21 11       	cpse	r18, r1
    413e:	03 c0       	rjmp	.+6      	; 0x4146 <conv_brk+0x6c>
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	90 c0       	rjmp	.+288    	; 0x4266 <conv_brk+0x18c>
    4146:	2e 35       	cpi	r18, 0x5E	; 94
    4148:	11 f4       	brne	.+4      	; 0x414e <conv_brk+0x74>
    414a:	00 97       	sbiw	r24, 0x00	; 0
    414c:	51 f1       	breq	.+84     	; 0x41a2 <conv_brk+0xc8>
    414e:	43 2f       	mov	r20, r19
    4150:	50 e0       	ldi	r21, 0x00	; 0
    4152:	48 17       	cp	r20, r24
    4154:	59 07       	cpc	r21, r25
    4156:	3c f4       	brge	.+14     	; 0x4166 <conv_brk+0x8c>
    4158:	2d 35       	cpi	r18, 0x5D	; 93
    415a:	59 f1       	breq	.+86     	; 0x41b2 <conv_brk+0xd8>
    415c:	2d 32       	cpi	r18, 0x2D	; 45
    415e:	19 f4       	brne	.+6      	; 0x4166 <conv_brk+0x8c>
    4160:	77 20       	and	r7, r7
    4162:	09 f1       	breq	.+66     	; 0x41a6 <conv_brk+0xcc>
    4164:	03 c0       	rjmp	.+6      	; 0x416c <conv_brk+0x92>
    4166:	77 20       	and	r7, r7
    4168:	09 f4       	brne	.+2      	; 0x416c <conv_brk+0x92>
    416a:	68 c0       	rjmp	.+208    	; 0x423c <conv_brk+0x162>
    416c:	45 2d       	mov	r20, r5
    416e:	46 95       	lsr	r20
    4170:	46 95       	lsr	r20
    4172:	46 95       	lsr	r20
    4174:	d6 01       	movw	r26, r12
    4176:	a4 0f       	add	r26, r20
    4178:	b1 1d       	adc	r27, r1
    417a:	45 2d       	mov	r20, r5
    417c:	47 70       	andi	r20, 0x07	; 7
    417e:	8b 01       	movw	r16, r22
    4180:	02 c0       	rjmp	.+4      	; 0x4186 <conv_brk+0xac>
    4182:	00 0f       	add	r16, r16
    4184:	11 1f       	adc	r17, r17
    4186:	4a 95       	dec	r20
    4188:	e2 f7       	brpl	.-8      	; 0x4182 <conv_brk+0xa8>
    418a:	a8 01       	movw	r20, r16
    418c:	5c 91       	ld	r21, X
    418e:	45 2b       	or	r20, r21
    4190:	4c 93       	st	X, r20
    4192:	65 14       	cp	r6, r5
    4194:	59 f0       	breq	.+22     	; 0x41ac <conv_brk+0xd2>
    4196:	56 14       	cp	r5, r6
    4198:	10 f4       	brcc	.+4      	; 0x419e <conv_brk+0xc4>
    419a:	53 94       	inc	r5
    419c:	e7 cf       	rjmp	.-50     	; 0x416c <conv_brk+0x92>
    419e:	5a 94       	dec	r5
    41a0:	e5 cf       	rjmp	.-54     	; 0x416c <conv_brk+0x92>
    41a2:	31 e0       	ldi	r19, 0x01	; 1
    41a4:	04 c0       	rjmp	.+8      	; 0x41ae <conv_brk+0xd4>
    41a6:	77 24       	eor	r7, r7
    41a8:	73 94       	inc	r7
    41aa:	01 c0       	rjmp	.+2      	; 0x41ae <conv_brk+0xd4>
    41ac:	71 2c       	mov	r7, r1
    41ae:	01 96       	adiw	r24, 0x01	; 1
    41b0:	bf cf       	rjmp	.-130    	; 0x4130 <conv_brk+0x56>
    41b2:	77 20       	and	r7, r7
    41b4:	19 f0       	breq	.+6      	; 0x41bc <conv_brk+0xe2>
    41b6:	8e 81       	ldd	r24, Y+6	; 0x06
    41b8:	80 62       	ori	r24, 0x20	; 32
    41ba:	8e 83       	std	Y+6, r24	; 0x06
    41bc:	31 11       	cpse	r19, r1
    41be:	03 c0       	rjmp	.+6      	; 0x41c6 <conv_brk+0xec>
    41c0:	88 24       	eor	r8, r8
    41c2:	83 94       	inc	r8
    41c4:	17 c0       	rjmp	.+46     	; 0x41f4 <conv_brk+0x11a>
    41c6:	f6 01       	movw	r30, r12
    41c8:	9e 01       	movw	r18, r28
    41ca:	2f 5d       	subi	r18, 0xDF	; 223
    41cc:	3f 4f       	sbci	r19, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	80 95       	com	r24
    41d2:	81 93       	st	Z+, r24
    41d4:	2e 17       	cp	r18, r30
    41d6:	3f 07       	cpc	r19, r31
    41d8:	d1 f7       	brne	.-12     	; 0x41ce <conv_brk+0xf4>
    41da:	f2 cf       	rjmp	.-28     	; 0x41c0 <conv_brk+0xe6>
    41dc:	e1 14       	cp	r14, r1
    41de:	f1 04       	cpc	r15, r1
    41e0:	29 f0       	breq	.+10     	; 0x41ec <conv_brk+0x112>
    41e2:	d7 01       	movw	r26, r14
    41e4:	8c 93       	st	X, r24
    41e6:	f7 01       	movw	r30, r14
    41e8:	31 96       	adiw	r30, 0x01	; 1
    41ea:	7f 01       	movw	r14, r30
    41ec:	9a 94       	dec	r9
    41ee:	81 2c       	mov	r8, r1
    41f0:	99 20       	and	r9, r9
    41f2:	e9 f0       	breq	.+58     	; 0x422e <conv_brk+0x154>
    41f4:	c5 01       	movw	r24, r10
    41f6:	cc d2       	rcall	.+1432   	; 0x4790 <fgetc>
    41f8:	97 fd       	sbrc	r25, 7
    41fa:	17 c0       	rjmp	.+46     	; 0x422a <conv_brk+0x150>
    41fc:	fc 01       	movw	r30, r24
    41fe:	ff 27       	eor	r31, r31
    4200:	23 e0       	ldi	r18, 0x03	; 3
    4202:	f5 95       	asr	r31
    4204:	e7 95       	ror	r30
    4206:	2a 95       	dec	r18
    4208:	e1 f7       	brne	.-8      	; 0x4202 <conv_brk+0x128>
    420a:	ec 0d       	add	r30, r12
    420c:	fd 1d       	adc	r31, r13
    420e:	20 81       	ld	r18, Z
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	ac 01       	movw	r20, r24
    4214:	47 70       	andi	r20, 0x07	; 7
    4216:	55 27       	eor	r21, r21
    4218:	02 c0       	rjmp	.+4      	; 0x421e <conv_brk+0x144>
    421a:	35 95       	asr	r19
    421c:	27 95       	ror	r18
    421e:	4a 95       	dec	r20
    4220:	e2 f7       	brpl	.-8      	; 0x421a <conv_brk+0x140>
    4222:	20 fd       	sbrc	r18, 0
    4224:	db cf       	rjmp	.-74     	; 0x41dc <conv_brk+0x102>
    4226:	b5 01       	movw	r22, r10
    4228:	2d d3       	rcall	.+1626   	; 0x4884 <ungetc>
    422a:	81 10       	cpse	r8, r1
    422c:	89 cf       	rjmp	.-238    	; 0x4140 <conv_brk+0x66>
    422e:	e1 14       	cp	r14, r1
    4230:	f1 04       	cpc	r15, r1
    4232:	11 f0       	breq	.+4      	; 0x4238 <conv_brk+0x15e>
    4234:	d7 01       	movw	r26, r14
    4236:	1c 92       	st	X, r1
    4238:	c8 01       	movw	r24, r16
    423a:	15 c0       	rjmp	.+42     	; 0x4266 <conv_brk+0x18c>
    423c:	42 2f       	mov	r20, r18
    423e:	46 95       	lsr	r20
    4240:	46 95       	lsr	r20
    4242:	46 95       	lsr	r20
    4244:	d6 01       	movw	r26, r12
    4246:	a4 0f       	add	r26, r20
    4248:	b1 1d       	adc	r27, r1
    424a:	42 2f       	mov	r20, r18
    424c:	47 70       	andi	r20, 0x07	; 7
    424e:	8b 01       	movw	r16, r22
    4250:	02 c0       	rjmp	.+4      	; 0x4256 <conv_brk+0x17c>
    4252:	00 0f       	add	r16, r16
    4254:	11 1f       	adc	r17, r17
    4256:	4a 95       	dec	r20
    4258:	e2 f7       	brpl	.-8      	; 0x4252 <conv_brk+0x178>
    425a:	a8 01       	movw	r20, r16
    425c:	5c 91       	ld	r21, X
    425e:	45 2b       	or	r20, r21
    4260:	4c 93       	st	X, r20
    4262:	62 2e       	mov	r6, r18
    4264:	a4 cf       	rjmp	.-184    	; 0x41ae <conv_brk+0xd4>
    4266:	a0 96       	adiw	r28, 0x20	; 32
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	de bf       	out	0x3e, r29	; 62
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	1f 91       	pop	r17
    4272:	0f 91       	pop	r16
    4274:	ff 90       	pop	r15
    4276:	ef 90       	pop	r14
    4278:	df 90       	pop	r13
    427a:	cf 90       	pop	r12
    427c:	bf 90       	pop	r11
    427e:	af 90       	pop	r10
    4280:	9f 90       	pop	r9
    4282:	8f 90       	pop	r8
    4284:	7f 90       	pop	r7
    4286:	6f 90       	pop	r6
    4288:	5f 90       	pop	r5
    428a:	08 95       	ret

0000428c <vfscanf>:
    428c:	5f 92       	push	r5
    428e:	6f 92       	push	r6
    4290:	7f 92       	push	r7
    4292:	8f 92       	push	r8
    4294:	9f 92       	push	r9
    4296:	af 92       	push	r10
    4298:	bf 92       	push	r11
    429a:	cf 92       	push	r12
    429c:	df 92       	push	r13
    429e:	ef 92       	push	r14
    42a0:	ff 92       	push	r15
    42a2:	0f 93       	push	r16
    42a4:	1f 93       	push	r17
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	6c 01       	movw	r12, r24
    42ac:	eb 01       	movw	r28, r22
    42ae:	5a 01       	movw	r10, r20
    42b0:	fc 01       	movw	r30, r24
    42b2:	16 82       	std	Z+6, r1	; 0x06
    42b4:	17 82       	std	Z+7, r1	; 0x07
    42b6:	51 2c       	mov	r5, r1
    42b8:	f6 01       	movw	r30, r12
    42ba:	e3 80       	ldd	r14, Z+3	; 0x03
    42bc:	fe 01       	movw	r30, r28
    42be:	e3 fc       	sbrc	r14, 3
    42c0:	85 91       	lpm	r24, Z+
    42c2:	e3 fe       	sbrs	r14, 3
    42c4:	81 91       	ld	r24, Z+
    42c6:	18 2f       	mov	r17, r24
    42c8:	ef 01       	movw	r28, r30
    42ca:	88 23       	and	r24, r24
    42cc:	09 f4       	brne	.+2      	; 0x42d0 <vfscanf+0x44>
    42ce:	e0 c0       	rjmp	.+448    	; 0x4490 <vfscanf+0x204>
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	2e d2       	rcall	.+1116   	; 0x4730 <isspace>
    42d4:	89 2b       	or	r24, r25
    42d6:	19 f0       	breq	.+6      	; 0x42de <vfscanf+0x52>
    42d8:	c6 01       	movw	r24, r12
    42da:	5f de       	rcall	.-834    	; 0x3f9a <skip_spaces>
    42dc:	ed cf       	rjmp	.-38     	; 0x42b8 <vfscanf+0x2c>
    42de:	15 32       	cpi	r17, 0x25	; 37
    42e0:	41 f4       	brne	.+16     	; 0x42f2 <vfscanf+0x66>
    42e2:	fe 01       	movw	r30, r28
    42e4:	e3 fc       	sbrc	r14, 3
    42e6:	15 91       	lpm	r17, Z+
    42e8:	e3 fe       	sbrs	r14, 3
    42ea:	11 91       	ld	r17, Z+
    42ec:	ef 01       	movw	r28, r30
    42ee:	15 32       	cpi	r17, 0x25	; 37
    42f0:	71 f4       	brne	.+28     	; 0x430e <vfscanf+0x82>
    42f2:	c6 01       	movw	r24, r12
    42f4:	4d d2       	rcall	.+1178   	; 0x4790 <fgetc>
    42f6:	97 fd       	sbrc	r25, 7
    42f8:	c9 c0       	rjmp	.+402    	; 0x448c <vfscanf+0x200>
    42fa:	41 2f       	mov	r20, r17
    42fc:	50 e0       	ldi	r21, 0x00	; 0
    42fe:	9c 01       	movw	r18, r24
    4300:	33 27       	eor	r19, r19
    4302:	24 17       	cp	r18, r20
    4304:	35 07       	cpc	r19, r21
    4306:	c1 f2       	breq	.-80     	; 0x42b8 <vfscanf+0x2c>
    4308:	b6 01       	movw	r22, r12
    430a:	bc d2       	rcall	.+1400   	; 0x4884 <ungetc>
    430c:	c1 c0       	rjmp	.+386    	; 0x4490 <vfscanf+0x204>
    430e:	1a 32       	cpi	r17, 0x2A	; 42
    4310:	39 f4       	brne	.+14     	; 0x4320 <vfscanf+0x94>
    4312:	e3 fc       	sbrc	r14, 3
    4314:	15 91       	lpm	r17, Z+
    4316:	e3 fe       	sbrs	r14, 3
    4318:	11 91       	ld	r17, Z+
    431a:	ef 01       	movw	r28, r30
    431c:	01 e0       	ldi	r16, 0x01	; 1
    431e:	01 c0       	rjmp	.+2      	; 0x4322 <vfscanf+0x96>
    4320:	00 e0       	ldi	r16, 0x00	; 0
    4322:	f1 2c       	mov	r15, r1
    4324:	20 ed       	ldi	r18, 0xD0	; 208
    4326:	21 0f       	add	r18, r17
    4328:	2a 30       	cpi	r18, 0x0A	; 10
    432a:	78 f4       	brcc	.+30     	; 0x434a <vfscanf+0xbe>
    432c:	02 60       	ori	r16, 0x02	; 2
    432e:	6f 2d       	mov	r22, r15
    4330:	70 e0       	ldi	r23, 0x00	; 0
    4332:	80 e0       	ldi	r24, 0x00	; 0
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	40 e2       	ldi	r20, 0x20	; 32
    4338:	09 de       	rcall	.-1006   	; 0x3f4c <mulacc>
    433a:	f6 2e       	mov	r15, r22
    433c:	fe 01       	movw	r30, r28
    433e:	e3 fc       	sbrc	r14, 3
    4340:	15 91       	lpm	r17, Z+
    4342:	e3 fe       	sbrs	r14, 3
    4344:	11 91       	ld	r17, Z+
    4346:	ef 01       	movw	r28, r30
    4348:	ed cf       	rjmp	.-38     	; 0x4324 <vfscanf+0x98>
    434a:	01 ff       	sbrs	r16, 1
    434c:	03 c0       	rjmp	.+6      	; 0x4354 <vfscanf+0xc8>
    434e:	f1 10       	cpse	r15, r1
    4350:	03 c0       	rjmp	.+6      	; 0x4358 <vfscanf+0xcc>
    4352:	9e c0       	rjmp	.+316    	; 0x4490 <vfscanf+0x204>
    4354:	ff 24       	eor	r15, r15
    4356:	fa 94       	dec	r15
    4358:	18 36       	cpi	r17, 0x68	; 104
    435a:	19 f0       	breq	.+6      	; 0x4362 <vfscanf+0xd6>
    435c:	1c 36       	cpi	r17, 0x6C	; 108
    435e:	51 f0       	breq	.+20     	; 0x4374 <vfscanf+0xe8>
    4360:	10 c0       	rjmp	.+32     	; 0x4382 <vfscanf+0xf6>
    4362:	fe 01       	movw	r30, r28
    4364:	e3 fc       	sbrc	r14, 3
    4366:	15 91       	lpm	r17, Z+
    4368:	e3 fe       	sbrs	r14, 3
    436a:	11 91       	ld	r17, Z+
    436c:	ef 01       	movw	r28, r30
    436e:	18 36       	cpi	r17, 0x68	; 104
    4370:	41 f4       	brne	.+16     	; 0x4382 <vfscanf+0xf6>
    4372:	08 60       	ori	r16, 0x08	; 8
    4374:	04 60       	ori	r16, 0x04	; 4
    4376:	fe 01       	movw	r30, r28
    4378:	e3 fc       	sbrc	r14, 3
    437a:	15 91       	lpm	r17, Z+
    437c:	e3 fe       	sbrs	r14, 3
    437e:	11 91       	ld	r17, Z+
    4380:	ef 01       	movw	r28, r30
    4382:	11 23       	and	r17, r17
    4384:	09 f4       	brne	.+2      	; 0x4388 <vfscanf+0xfc>
    4386:	84 c0       	rjmp	.+264    	; 0x4490 <vfscanf+0x204>
    4388:	61 2f       	mov	r22, r17
    438a:	70 e0       	ldi	r23, 0x00	; 0
    438c:	88 ee       	ldi	r24, 0xE8	; 232
    438e:	92 e0       	ldi	r25, 0x02	; 2
    4390:	d7 d1       	rcall	.+942    	; 0x4740 <strchr_P>
    4392:	89 2b       	or	r24, r25
    4394:	09 f4       	brne	.+2      	; 0x4398 <vfscanf+0x10c>
    4396:	7c c0       	rjmp	.+248    	; 0x4490 <vfscanf+0x204>
    4398:	00 fd       	sbrc	r16, 0
    439a:	07 c0       	rjmp	.+14     	; 0x43aa <vfscanf+0x11e>
    439c:	f5 01       	movw	r30, r10
    439e:	80 80       	ld	r8, Z
    43a0:	91 80       	ldd	r9, Z+1	; 0x01
    43a2:	c5 01       	movw	r24, r10
    43a4:	02 96       	adiw	r24, 0x02	; 2
    43a6:	5c 01       	movw	r10, r24
    43a8:	02 c0       	rjmp	.+4      	; 0x43ae <vfscanf+0x122>
    43aa:	81 2c       	mov	r8, r1
    43ac:	91 2c       	mov	r9, r1
    43ae:	1e 36       	cpi	r17, 0x6E	; 110
    43b0:	49 f4       	brne	.+18     	; 0x43c4 <vfscanf+0x138>
    43b2:	f6 01       	movw	r30, r12
    43b4:	46 81       	ldd	r20, Z+6	; 0x06
    43b6:	57 81       	ldd	r21, Z+7	; 0x07
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	70 e0       	ldi	r23, 0x00	; 0
    43bc:	20 2f       	mov	r18, r16
    43be:	c4 01       	movw	r24, r8
    43c0:	b9 dd       	rcall	.-1166   	; 0x3f34 <putval>
    43c2:	7a cf       	rjmp	.-268    	; 0x42b8 <vfscanf+0x2c>
    43c4:	13 36       	cpi	r17, 0x63	; 99
    43c6:	a1 f4       	brne	.+40     	; 0x43f0 <vfscanf+0x164>
    43c8:	01 fd       	sbrc	r16, 1
    43ca:	02 c0       	rjmp	.+4      	; 0x43d0 <vfscanf+0x144>
    43cc:	ff 24       	eor	r15, r15
    43ce:	f3 94       	inc	r15
    43d0:	c6 01       	movw	r24, r12
    43d2:	de d1       	rcall	.+956    	; 0x4790 <fgetc>
    43d4:	97 fd       	sbrc	r25, 7
    43d6:	5a c0       	rjmp	.+180    	; 0x448c <vfscanf+0x200>
    43d8:	81 14       	cp	r8, r1
    43da:	91 04       	cpc	r9, r1
    43dc:	29 f0       	breq	.+10     	; 0x43e8 <vfscanf+0x15c>
    43de:	f4 01       	movw	r30, r8
    43e0:	80 83       	st	Z, r24
    43e2:	c4 01       	movw	r24, r8
    43e4:	01 96       	adiw	r24, 0x01	; 1
    43e6:	4c 01       	movw	r8, r24
    43e8:	fa 94       	dec	r15
    43ea:	f1 10       	cpse	r15, r1
    43ec:	f1 cf       	rjmp	.-30     	; 0x43d0 <vfscanf+0x144>
    43ee:	4a c0       	rjmp	.+148    	; 0x4484 <vfscanf+0x1f8>
    43f0:	1b 35       	cpi	r17, 0x5B	; 91
    43f2:	51 f4       	brne	.+20     	; 0x4408 <vfscanf+0x17c>
    43f4:	9e 01       	movw	r18, r28
    43f6:	a4 01       	movw	r20, r8
    43f8:	6f 2d       	mov	r22, r15
    43fa:	c6 01       	movw	r24, r12
    43fc:	6e de       	rcall	.-804    	; 0x40da <conv_brk>
    43fe:	ec 01       	movw	r28, r24
    4400:	89 2b       	or	r24, r25
    4402:	09 f0       	breq	.+2      	; 0x4406 <vfscanf+0x17a>
    4404:	3f c0       	rjmp	.+126    	; 0x4484 <vfscanf+0x1f8>
    4406:	39 c0       	rjmp	.+114    	; 0x447a <vfscanf+0x1ee>
    4408:	c6 01       	movw	r24, r12
    440a:	c7 dd       	rcall	.-1138   	; 0x3f9a <skip_spaces>
    440c:	97 fd       	sbrc	r25, 7
    440e:	3e c0       	rjmp	.+124    	; 0x448c <vfscanf+0x200>
    4410:	1f 36       	cpi	r17, 0x6F	; 111
    4412:	49 f1       	breq	.+82     	; 0x4466 <vfscanf+0x1da>
    4414:	28 f4       	brcc	.+10     	; 0x4420 <vfscanf+0x194>
    4416:	14 36       	cpi	r17, 0x64	; 100
    4418:	21 f1       	breq	.+72     	; 0x4462 <vfscanf+0x1d6>
    441a:	19 36       	cpi	r17, 0x69	; 105
    441c:	39 f1       	breq	.+78     	; 0x446c <vfscanf+0x1e0>
    441e:	25 c0       	rjmp	.+74     	; 0x446a <vfscanf+0x1de>
    4420:	13 37       	cpi	r17, 0x73	; 115
    4422:	71 f0       	breq	.+28     	; 0x4440 <vfscanf+0x1b4>
    4424:	15 37       	cpi	r17, 0x75	; 117
    4426:	e9 f0       	breq	.+58     	; 0x4462 <vfscanf+0x1d6>
    4428:	20 c0       	rjmp	.+64     	; 0x446a <vfscanf+0x1de>
    442a:	81 14       	cp	r8, r1
    442c:	91 04       	cpc	r9, r1
    442e:	29 f0       	breq	.+10     	; 0x443a <vfscanf+0x1ae>
    4430:	f4 01       	movw	r30, r8
    4432:	60 82       	st	Z, r6
    4434:	c4 01       	movw	r24, r8
    4436:	01 96       	adiw	r24, 0x01	; 1
    4438:	4c 01       	movw	r8, r24
    443a:	fa 94       	dec	r15
    443c:	ff 20       	and	r15, r15
    443e:	59 f0       	breq	.+22     	; 0x4456 <vfscanf+0x1ca>
    4440:	c6 01       	movw	r24, r12
    4442:	a6 d1       	rcall	.+844    	; 0x4790 <fgetc>
    4444:	3c 01       	movw	r6, r24
    4446:	97 fd       	sbrc	r25, 7
    4448:	06 c0       	rjmp	.+12     	; 0x4456 <vfscanf+0x1ca>
    444a:	72 d1       	rcall	.+740    	; 0x4730 <isspace>
    444c:	89 2b       	or	r24, r25
    444e:	69 f3       	breq	.-38     	; 0x442a <vfscanf+0x19e>
    4450:	b6 01       	movw	r22, r12
    4452:	c3 01       	movw	r24, r6
    4454:	17 d2       	rcall	.+1070   	; 0x4884 <ungetc>
    4456:	81 14       	cp	r8, r1
    4458:	91 04       	cpc	r9, r1
    445a:	a1 f0       	breq	.+40     	; 0x4484 <vfscanf+0x1f8>
    445c:	f4 01       	movw	r30, r8
    445e:	10 82       	st	Z, r1
    4460:	11 c0       	rjmp	.+34     	; 0x4484 <vfscanf+0x1f8>
    4462:	00 62       	ori	r16, 0x20	; 32
    4464:	03 c0       	rjmp	.+6      	; 0x446c <vfscanf+0x1e0>
    4466:	00 61       	ori	r16, 0x10	; 16
    4468:	01 c0       	rjmp	.+2      	; 0x446c <vfscanf+0x1e0>
    446a:	00 64       	ori	r16, 0x40	; 64
    446c:	20 2f       	mov	r18, r16
    446e:	a4 01       	movw	r20, r8
    4470:	6f 2d       	mov	r22, r15
    4472:	c6 01       	movw	r24, r12
    4474:	a8 dd       	rcall	.-1200   	; 0x3fc6 <conv_int>
    4476:	81 11       	cpse	r24, r1
    4478:	05 c0       	rjmp	.+10     	; 0x4484 <vfscanf+0x1f8>
    447a:	f6 01       	movw	r30, r12
    447c:	83 81       	ldd	r24, Z+3	; 0x03
    447e:	80 73       	andi	r24, 0x30	; 48
    4480:	29 f4       	brne	.+10     	; 0x448c <vfscanf+0x200>
    4482:	06 c0       	rjmp	.+12     	; 0x4490 <vfscanf+0x204>
    4484:	00 fd       	sbrc	r16, 0
    4486:	18 cf       	rjmp	.-464    	; 0x42b8 <vfscanf+0x2c>
    4488:	53 94       	inc	r5
    448a:	16 cf       	rjmp	.-468    	; 0x42b8 <vfscanf+0x2c>
    448c:	55 20       	and	r5, r5
    448e:	19 f0       	breq	.+6      	; 0x4496 <vfscanf+0x20a>
    4490:	85 2d       	mov	r24, r5
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	02 c0       	rjmp	.+4      	; 0x449a <vfscanf+0x20e>
    4496:	8f ef       	ldi	r24, 0xFF	; 255
    4498:	9f ef       	ldi	r25, 0xFF	; 255
    449a:	df 91       	pop	r29
    449c:	cf 91       	pop	r28
    449e:	1f 91       	pop	r17
    44a0:	0f 91       	pop	r16
    44a2:	ff 90       	pop	r15
    44a4:	ef 90       	pop	r14
    44a6:	df 90       	pop	r13
    44a8:	cf 90       	pop	r12
    44aa:	bf 90       	pop	r11
    44ac:	af 90       	pop	r10
    44ae:	9f 90       	pop	r9
    44b0:	8f 90       	pop	r8
    44b2:	7f 90       	pop	r7
    44b4:	6f 90       	pop	r6
    44b6:	5f 90       	pop	r5
    44b8:	08 95       	ret

000044ba <calloc>:
    44ba:	0f 93       	push	r16
    44bc:	1f 93       	push	r17
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	86 9f       	mul	r24, r22
    44c4:	80 01       	movw	r16, r0
    44c6:	87 9f       	mul	r24, r23
    44c8:	10 0d       	add	r17, r0
    44ca:	96 9f       	mul	r25, r22
    44cc:	10 0d       	add	r17, r0
    44ce:	11 24       	eor	r1, r1
    44d0:	c8 01       	movw	r24, r16
    44d2:	0d d0       	rcall	.+26     	; 0x44ee <malloc>
    44d4:	ec 01       	movw	r28, r24
    44d6:	00 97       	sbiw	r24, 0x00	; 0
    44d8:	21 f0       	breq	.+8      	; 0x44e2 <calloc+0x28>
    44da:	a8 01       	movw	r20, r16
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	70 e0       	ldi	r23, 0x00	; 0
    44e0:	45 d1       	rcall	.+650    	; 0x476c <memset>
    44e2:	ce 01       	movw	r24, r28
    44e4:	df 91       	pop	r29
    44e6:	cf 91       	pop	r28
    44e8:	1f 91       	pop	r17
    44ea:	0f 91       	pop	r16
    44ec:	08 95       	ret

000044ee <malloc>:
    44ee:	0f 93       	push	r16
    44f0:	1f 93       	push	r17
    44f2:	cf 93       	push	r28
    44f4:	df 93       	push	r29
    44f6:	82 30       	cpi	r24, 0x02	; 2
    44f8:	91 05       	cpc	r25, r1
    44fa:	10 f4       	brcc	.+4      	; 0x4500 <malloc+0x12>
    44fc:	82 e0       	ldi	r24, 0x02	; 2
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	e0 91 9d 21 	lds	r30, 0x219D	; 0x80219d <__flp>
    4504:	f0 91 9e 21 	lds	r31, 0x219E	; 0x80219e <__flp+0x1>
    4508:	20 e0       	ldi	r18, 0x00	; 0
    450a:	30 e0       	ldi	r19, 0x00	; 0
    450c:	a0 e0       	ldi	r26, 0x00	; 0
    450e:	b0 e0       	ldi	r27, 0x00	; 0
    4510:	30 97       	sbiw	r30, 0x00	; 0
    4512:	19 f1       	breq	.+70     	; 0x455a <malloc+0x6c>
    4514:	40 81       	ld	r20, Z
    4516:	51 81       	ldd	r21, Z+1	; 0x01
    4518:	02 81       	ldd	r16, Z+2	; 0x02
    451a:	13 81       	ldd	r17, Z+3	; 0x03
    451c:	48 17       	cp	r20, r24
    451e:	59 07       	cpc	r21, r25
    4520:	c8 f0       	brcs	.+50     	; 0x4554 <malloc+0x66>
    4522:	84 17       	cp	r24, r20
    4524:	95 07       	cpc	r25, r21
    4526:	69 f4       	brne	.+26     	; 0x4542 <malloc+0x54>
    4528:	10 97       	sbiw	r26, 0x00	; 0
    452a:	31 f0       	breq	.+12     	; 0x4538 <malloc+0x4a>
    452c:	12 96       	adiw	r26, 0x02	; 2
    452e:	0c 93       	st	X, r16
    4530:	12 97       	sbiw	r26, 0x02	; 2
    4532:	13 96       	adiw	r26, 0x03	; 3
    4534:	1c 93       	st	X, r17
    4536:	27 c0       	rjmp	.+78     	; 0x4586 <malloc+0x98>
    4538:	00 93 9d 21 	sts	0x219D, r16	; 0x80219d <__flp>
    453c:	10 93 9e 21 	sts	0x219E, r17	; 0x80219e <__flp+0x1>
    4540:	22 c0       	rjmp	.+68     	; 0x4586 <malloc+0x98>
    4542:	21 15       	cp	r18, r1
    4544:	31 05       	cpc	r19, r1
    4546:	19 f0       	breq	.+6      	; 0x454e <malloc+0x60>
    4548:	42 17       	cp	r20, r18
    454a:	53 07       	cpc	r21, r19
    454c:	18 f4       	brcc	.+6      	; 0x4554 <malloc+0x66>
    454e:	9a 01       	movw	r18, r20
    4550:	bd 01       	movw	r22, r26
    4552:	ef 01       	movw	r28, r30
    4554:	df 01       	movw	r26, r30
    4556:	f8 01       	movw	r30, r16
    4558:	db cf       	rjmp	.-74     	; 0x4510 <malloc+0x22>
    455a:	21 15       	cp	r18, r1
    455c:	31 05       	cpc	r19, r1
    455e:	f9 f0       	breq	.+62     	; 0x459e <malloc+0xb0>
    4560:	28 1b       	sub	r18, r24
    4562:	39 0b       	sbc	r19, r25
    4564:	24 30       	cpi	r18, 0x04	; 4
    4566:	31 05       	cpc	r19, r1
    4568:	80 f4       	brcc	.+32     	; 0x458a <malloc+0x9c>
    456a:	8a 81       	ldd	r24, Y+2	; 0x02
    456c:	9b 81       	ldd	r25, Y+3	; 0x03
    456e:	61 15       	cp	r22, r1
    4570:	71 05       	cpc	r23, r1
    4572:	21 f0       	breq	.+8      	; 0x457c <malloc+0x8e>
    4574:	fb 01       	movw	r30, r22
    4576:	82 83       	std	Z+2, r24	; 0x02
    4578:	93 83       	std	Z+3, r25	; 0x03
    457a:	04 c0       	rjmp	.+8      	; 0x4584 <malloc+0x96>
    457c:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <__flp>
    4580:	90 93 9e 21 	sts	0x219E, r25	; 0x80219e <__flp+0x1>
    4584:	fe 01       	movw	r30, r28
    4586:	32 96       	adiw	r30, 0x02	; 2
    4588:	44 c0       	rjmp	.+136    	; 0x4612 <malloc+0x124>
    458a:	fe 01       	movw	r30, r28
    458c:	e2 0f       	add	r30, r18
    458e:	f3 1f       	adc	r31, r19
    4590:	81 93       	st	Z+, r24
    4592:	91 93       	st	Z+, r25
    4594:	22 50       	subi	r18, 0x02	; 2
    4596:	31 09       	sbc	r19, r1
    4598:	28 83       	st	Y, r18
    459a:	39 83       	std	Y+1, r19	; 0x01
    459c:	3a c0       	rjmp	.+116    	; 0x4612 <malloc+0x124>
    459e:	20 91 9b 21 	lds	r18, 0x219B	; 0x80219b <__brkval>
    45a2:	30 91 9c 21 	lds	r19, 0x219C	; 0x80219c <__brkval+0x1>
    45a6:	23 2b       	or	r18, r19
    45a8:	41 f4       	brne	.+16     	; 0x45ba <malloc+0xcc>
    45aa:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    45ae:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    45b2:	20 93 9b 21 	sts	0x219B, r18	; 0x80219b <__brkval>
    45b6:	30 93 9c 21 	sts	0x219C, r19	; 0x80219c <__brkval+0x1>
    45ba:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    45be:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    45c2:	21 15       	cp	r18, r1
    45c4:	31 05       	cpc	r19, r1
    45c6:	41 f4       	brne	.+16     	; 0x45d8 <malloc+0xea>
    45c8:	2d b7       	in	r18, 0x3d	; 61
    45ca:	3e b7       	in	r19, 0x3e	; 62
    45cc:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    45d0:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    45d4:	24 1b       	sub	r18, r20
    45d6:	35 0b       	sbc	r19, r21
    45d8:	e0 91 9b 21 	lds	r30, 0x219B	; 0x80219b <__brkval>
    45dc:	f0 91 9c 21 	lds	r31, 0x219C	; 0x80219c <__brkval+0x1>
    45e0:	e2 17       	cp	r30, r18
    45e2:	f3 07       	cpc	r31, r19
    45e4:	a0 f4       	brcc	.+40     	; 0x460e <malloc+0x120>
    45e6:	2e 1b       	sub	r18, r30
    45e8:	3f 0b       	sbc	r19, r31
    45ea:	28 17       	cp	r18, r24
    45ec:	39 07       	cpc	r19, r25
    45ee:	78 f0       	brcs	.+30     	; 0x460e <malloc+0x120>
    45f0:	ac 01       	movw	r20, r24
    45f2:	4e 5f       	subi	r20, 0xFE	; 254
    45f4:	5f 4f       	sbci	r21, 0xFF	; 255
    45f6:	24 17       	cp	r18, r20
    45f8:	35 07       	cpc	r19, r21
    45fa:	48 f0       	brcs	.+18     	; 0x460e <malloc+0x120>
    45fc:	4e 0f       	add	r20, r30
    45fe:	5f 1f       	adc	r21, r31
    4600:	40 93 9b 21 	sts	0x219B, r20	; 0x80219b <__brkval>
    4604:	50 93 9c 21 	sts	0x219C, r21	; 0x80219c <__brkval+0x1>
    4608:	81 93       	st	Z+, r24
    460a:	91 93       	st	Z+, r25
    460c:	02 c0       	rjmp	.+4      	; 0x4612 <malloc+0x124>
    460e:	e0 e0       	ldi	r30, 0x00	; 0
    4610:	f0 e0       	ldi	r31, 0x00	; 0
    4612:	cf 01       	movw	r24, r30
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	1f 91       	pop	r17
    461a:	0f 91       	pop	r16
    461c:	08 95       	ret

0000461e <free>:
    461e:	cf 93       	push	r28
    4620:	df 93       	push	r29
    4622:	00 97       	sbiw	r24, 0x00	; 0
    4624:	09 f4       	brne	.+2      	; 0x4628 <free+0xa>
    4626:	81 c0       	rjmp	.+258    	; 0x472a <free+0x10c>
    4628:	fc 01       	movw	r30, r24
    462a:	32 97       	sbiw	r30, 0x02	; 2
    462c:	12 82       	std	Z+2, r1	; 0x02
    462e:	13 82       	std	Z+3, r1	; 0x03
    4630:	a0 91 9d 21 	lds	r26, 0x219D	; 0x80219d <__flp>
    4634:	b0 91 9e 21 	lds	r27, 0x219E	; 0x80219e <__flp+0x1>
    4638:	10 97       	sbiw	r26, 0x00	; 0
    463a:	81 f4       	brne	.+32     	; 0x465c <free+0x3e>
    463c:	20 81       	ld	r18, Z
    463e:	31 81       	ldd	r19, Z+1	; 0x01
    4640:	82 0f       	add	r24, r18
    4642:	93 1f       	adc	r25, r19
    4644:	20 91 9b 21 	lds	r18, 0x219B	; 0x80219b <__brkval>
    4648:	30 91 9c 21 	lds	r19, 0x219C	; 0x80219c <__brkval+0x1>
    464c:	28 17       	cp	r18, r24
    464e:	39 07       	cpc	r19, r25
    4650:	51 f5       	brne	.+84     	; 0x46a6 <free+0x88>
    4652:	e0 93 9b 21 	sts	0x219B, r30	; 0x80219b <__brkval>
    4656:	f0 93 9c 21 	sts	0x219C, r31	; 0x80219c <__brkval+0x1>
    465a:	67 c0       	rjmp	.+206    	; 0x472a <free+0x10c>
    465c:	ed 01       	movw	r28, r26
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	ce 17       	cp	r28, r30
    4664:	df 07       	cpc	r29, r31
    4666:	40 f4       	brcc	.+16     	; 0x4678 <free+0x5a>
    4668:	4a 81       	ldd	r20, Y+2	; 0x02
    466a:	5b 81       	ldd	r21, Y+3	; 0x03
    466c:	9e 01       	movw	r18, r28
    466e:	41 15       	cp	r20, r1
    4670:	51 05       	cpc	r21, r1
    4672:	f1 f0       	breq	.+60     	; 0x46b0 <free+0x92>
    4674:	ea 01       	movw	r28, r20
    4676:	f5 cf       	rjmp	.-22     	; 0x4662 <free+0x44>
    4678:	c2 83       	std	Z+2, r28	; 0x02
    467a:	d3 83       	std	Z+3, r29	; 0x03
    467c:	40 81       	ld	r20, Z
    467e:	51 81       	ldd	r21, Z+1	; 0x01
    4680:	84 0f       	add	r24, r20
    4682:	95 1f       	adc	r25, r21
    4684:	c8 17       	cp	r28, r24
    4686:	d9 07       	cpc	r29, r25
    4688:	59 f4       	brne	.+22     	; 0x46a0 <free+0x82>
    468a:	88 81       	ld	r24, Y
    468c:	99 81       	ldd	r25, Y+1	; 0x01
    468e:	84 0f       	add	r24, r20
    4690:	95 1f       	adc	r25, r21
    4692:	02 96       	adiw	r24, 0x02	; 2
    4694:	80 83       	st	Z, r24
    4696:	91 83       	std	Z+1, r25	; 0x01
    4698:	8a 81       	ldd	r24, Y+2	; 0x02
    469a:	9b 81       	ldd	r25, Y+3	; 0x03
    469c:	82 83       	std	Z+2, r24	; 0x02
    469e:	93 83       	std	Z+3, r25	; 0x03
    46a0:	21 15       	cp	r18, r1
    46a2:	31 05       	cpc	r19, r1
    46a4:	29 f4       	brne	.+10     	; 0x46b0 <free+0x92>
    46a6:	e0 93 9d 21 	sts	0x219D, r30	; 0x80219d <__flp>
    46aa:	f0 93 9e 21 	sts	0x219E, r31	; 0x80219e <__flp+0x1>
    46ae:	3d c0       	rjmp	.+122    	; 0x472a <free+0x10c>
    46b0:	e9 01       	movw	r28, r18
    46b2:	ea 83       	std	Y+2, r30	; 0x02
    46b4:	fb 83       	std	Y+3, r31	; 0x03
    46b6:	49 91       	ld	r20, Y+
    46b8:	59 91       	ld	r21, Y+
    46ba:	c4 0f       	add	r28, r20
    46bc:	d5 1f       	adc	r29, r21
    46be:	ec 17       	cp	r30, r28
    46c0:	fd 07       	cpc	r31, r29
    46c2:	61 f4       	brne	.+24     	; 0x46dc <free+0xbe>
    46c4:	80 81       	ld	r24, Z
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	84 0f       	add	r24, r20
    46ca:	95 1f       	adc	r25, r21
    46cc:	02 96       	adiw	r24, 0x02	; 2
    46ce:	e9 01       	movw	r28, r18
    46d0:	88 83       	st	Y, r24
    46d2:	99 83       	std	Y+1, r25	; 0x01
    46d4:	82 81       	ldd	r24, Z+2	; 0x02
    46d6:	93 81       	ldd	r25, Z+3	; 0x03
    46d8:	8a 83       	std	Y+2, r24	; 0x02
    46da:	9b 83       	std	Y+3, r25	; 0x03
    46dc:	e0 e0       	ldi	r30, 0x00	; 0
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	12 96       	adiw	r26, 0x02	; 2
    46e2:	8d 91       	ld	r24, X+
    46e4:	9c 91       	ld	r25, X
    46e6:	13 97       	sbiw	r26, 0x03	; 3
    46e8:	00 97       	sbiw	r24, 0x00	; 0
    46ea:	19 f0       	breq	.+6      	; 0x46f2 <free+0xd4>
    46ec:	fd 01       	movw	r30, r26
    46ee:	dc 01       	movw	r26, r24
    46f0:	f7 cf       	rjmp	.-18     	; 0x46e0 <free+0xc2>
    46f2:	8d 91       	ld	r24, X+
    46f4:	9c 91       	ld	r25, X
    46f6:	11 97       	sbiw	r26, 0x01	; 1
    46f8:	9d 01       	movw	r18, r26
    46fa:	2e 5f       	subi	r18, 0xFE	; 254
    46fc:	3f 4f       	sbci	r19, 0xFF	; 255
    46fe:	82 0f       	add	r24, r18
    4700:	93 1f       	adc	r25, r19
    4702:	20 91 9b 21 	lds	r18, 0x219B	; 0x80219b <__brkval>
    4706:	30 91 9c 21 	lds	r19, 0x219C	; 0x80219c <__brkval+0x1>
    470a:	28 17       	cp	r18, r24
    470c:	39 07       	cpc	r19, r25
    470e:	69 f4       	brne	.+26     	; 0x472a <free+0x10c>
    4710:	30 97       	sbiw	r30, 0x00	; 0
    4712:	29 f4       	brne	.+10     	; 0x471e <free+0x100>
    4714:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <__flp>
    4718:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <__flp+0x1>
    471c:	02 c0       	rjmp	.+4      	; 0x4722 <free+0x104>
    471e:	12 82       	std	Z+2, r1	; 0x02
    4720:	13 82       	std	Z+3, r1	; 0x03
    4722:	a0 93 9b 21 	sts	0x219B, r26	; 0x80219b <__brkval>
    4726:	b0 93 9c 21 	sts	0x219C, r27	; 0x80219c <__brkval+0x1>
    472a:	df 91       	pop	r29
    472c:	cf 91       	pop	r28
    472e:	08 95       	ret

00004730 <isspace>:
    4730:	91 11       	cpse	r25, r1
    4732:	1f c1       	rjmp	.+574    	; 0x4972 <__ctype_isfalse>
    4734:	80 32       	cpi	r24, 0x20	; 32
    4736:	19 f0       	breq	.+6      	; 0x473e <isspace+0xe>
    4738:	89 50       	subi	r24, 0x09	; 9
    473a:	85 50       	subi	r24, 0x05	; 5
    473c:	d0 f7       	brcc	.-12     	; 0x4732 <isspace+0x2>
    473e:	08 95       	ret

00004740 <strchr_P>:
    4740:	fc 01       	movw	r30, r24
    4742:	05 90       	lpm	r0, Z+
    4744:	06 16       	cp	r0, r22
    4746:	21 f0       	breq	.+8      	; 0x4750 <strchr_P+0x10>
    4748:	00 20       	and	r0, r0
    474a:	d9 f7       	brne	.-10     	; 0x4742 <strchr_P+0x2>
    474c:	c0 01       	movw	r24, r0
    474e:	08 95       	ret
    4750:	31 97       	sbiw	r30, 0x01	; 1
    4752:	cf 01       	movw	r24, r30
    4754:	08 95       	ret

00004756 <strnlen_P>:
    4756:	fc 01       	movw	r30, r24
    4758:	05 90       	lpm	r0, Z+
    475a:	61 50       	subi	r22, 0x01	; 1
    475c:	70 40       	sbci	r23, 0x00	; 0
    475e:	01 10       	cpse	r0, r1
    4760:	d8 f7       	brcc	.-10     	; 0x4758 <strnlen_P+0x2>
    4762:	80 95       	com	r24
    4764:	90 95       	com	r25
    4766:	8e 0f       	add	r24, r30
    4768:	9f 1f       	adc	r25, r31
    476a:	08 95       	ret

0000476c <memset>:
    476c:	dc 01       	movw	r26, r24
    476e:	01 c0       	rjmp	.+2      	; 0x4772 <memset+0x6>
    4770:	6d 93       	st	X+, r22
    4772:	41 50       	subi	r20, 0x01	; 1
    4774:	50 40       	sbci	r21, 0x00	; 0
    4776:	e0 f7       	brcc	.-8      	; 0x4770 <memset+0x4>
    4778:	08 95       	ret

0000477a <strnlen>:
    477a:	fc 01       	movw	r30, r24
    477c:	61 50       	subi	r22, 0x01	; 1
    477e:	70 40       	sbci	r23, 0x00	; 0
    4780:	01 90       	ld	r0, Z+
    4782:	01 10       	cpse	r0, r1
    4784:	d8 f7       	brcc	.-10     	; 0x477c <strnlen+0x2>
    4786:	80 95       	com	r24
    4788:	90 95       	com	r25
    478a:	8e 0f       	add	r24, r30
    478c:	9f 1f       	adc	r25, r31
    478e:	08 95       	ret

00004790 <fgetc>:
    4790:	cf 93       	push	r28
    4792:	df 93       	push	r29
    4794:	ec 01       	movw	r28, r24
    4796:	2b 81       	ldd	r18, Y+3	; 0x03
    4798:	20 ff       	sbrs	r18, 0
    479a:	33 c0       	rjmp	.+102    	; 0x4802 <fgetc+0x72>
    479c:	26 ff       	sbrs	r18, 6
    479e:	0a c0       	rjmp	.+20     	; 0x47b4 <fgetc+0x24>
    47a0:	2f 7b       	andi	r18, 0xBF	; 191
    47a2:	2b 83       	std	Y+3, r18	; 0x03
    47a4:	8e 81       	ldd	r24, Y+6	; 0x06
    47a6:	9f 81       	ldd	r25, Y+7	; 0x07
    47a8:	01 96       	adiw	r24, 0x01	; 1
    47aa:	8e 83       	std	Y+6, r24	; 0x06
    47ac:	9f 83       	std	Y+7, r25	; 0x07
    47ae:	8a 81       	ldd	r24, Y+2	; 0x02
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	29 c0       	rjmp	.+82     	; 0x4806 <fgetc+0x76>
    47b4:	22 ff       	sbrs	r18, 2
    47b6:	0f c0       	rjmp	.+30     	; 0x47d6 <fgetc+0x46>
    47b8:	e8 81       	ld	r30, Y
    47ba:	f9 81       	ldd	r31, Y+1	; 0x01
    47bc:	80 81       	ld	r24, Z
    47be:	08 2e       	mov	r0, r24
    47c0:	00 0c       	add	r0, r0
    47c2:	99 0b       	sbc	r25, r25
    47c4:	00 97       	sbiw	r24, 0x00	; 0
    47c6:	19 f4       	brne	.+6      	; 0x47ce <fgetc+0x3e>
    47c8:	20 62       	ori	r18, 0x20	; 32
    47ca:	2b 83       	std	Y+3, r18	; 0x03
    47cc:	1a c0       	rjmp	.+52     	; 0x4802 <fgetc+0x72>
    47ce:	31 96       	adiw	r30, 0x01	; 1
    47d0:	e8 83       	st	Y, r30
    47d2:	f9 83       	std	Y+1, r31	; 0x01
    47d4:	0e c0       	rjmp	.+28     	; 0x47f2 <fgetc+0x62>
    47d6:	ea 85       	ldd	r30, Y+10	; 0x0a
    47d8:	fb 85       	ldd	r31, Y+11	; 0x0b
    47da:	19 95       	eicall
    47dc:	97 ff       	sbrs	r25, 7
    47de:	09 c0       	rjmp	.+18     	; 0x47f2 <fgetc+0x62>
    47e0:	2b 81       	ldd	r18, Y+3	; 0x03
    47e2:	01 96       	adiw	r24, 0x01	; 1
    47e4:	11 f0       	breq	.+4      	; 0x47ea <fgetc+0x5a>
    47e6:	80 e2       	ldi	r24, 0x20	; 32
    47e8:	01 c0       	rjmp	.+2      	; 0x47ec <fgetc+0x5c>
    47ea:	80 e1       	ldi	r24, 0x10	; 16
    47ec:	82 2b       	or	r24, r18
    47ee:	8b 83       	std	Y+3, r24	; 0x03
    47f0:	08 c0       	rjmp	.+16     	; 0x4802 <fgetc+0x72>
    47f2:	2e 81       	ldd	r18, Y+6	; 0x06
    47f4:	3f 81       	ldd	r19, Y+7	; 0x07
    47f6:	2f 5f       	subi	r18, 0xFF	; 255
    47f8:	3f 4f       	sbci	r19, 0xFF	; 255
    47fa:	2e 83       	std	Y+6, r18	; 0x06
    47fc:	3f 83       	std	Y+7, r19	; 0x07
    47fe:	99 27       	eor	r25, r25
    4800:	02 c0       	rjmp	.+4      	; 0x4806 <fgetc+0x76>
    4802:	8f ef       	ldi	r24, 0xFF	; 255
    4804:	9f ef       	ldi	r25, 0xFF	; 255
    4806:	df 91       	pop	r29
    4808:	cf 91       	pop	r28
    480a:	08 95       	ret

0000480c <fputc>:
    480c:	0f 93       	push	r16
    480e:	1f 93       	push	r17
    4810:	cf 93       	push	r28
    4812:	df 93       	push	r29
    4814:	fb 01       	movw	r30, r22
    4816:	23 81       	ldd	r18, Z+3	; 0x03
    4818:	21 fd       	sbrc	r18, 1
    481a:	03 c0       	rjmp	.+6      	; 0x4822 <fputc+0x16>
    481c:	8f ef       	ldi	r24, 0xFF	; 255
    481e:	9f ef       	ldi	r25, 0xFF	; 255
    4820:	2c c0       	rjmp	.+88     	; 0x487a <fputc+0x6e>
    4822:	22 ff       	sbrs	r18, 2
    4824:	16 c0       	rjmp	.+44     	; 0x4852 <fputc+0x46>
    4826:	46 81       	ldd	r20, Z+6	; 0x06
    4828:	57 81       	ldd	r21, Z+7	; 0x07
    482a:	24 81       	ldd	r18, Z+4	; 0x04
    482c:	35 81       	ldd	r19, Z+5	; 0x05
    482e:	42 17       	cp	r20, r18
    4830:	53 07       	cpc	r21, r19
    4832:	44 f4       	brge	.+16     	; 0x4844 <fputc+0x38>
    4834:	a0 81       	ld	r26, Z
    4836:	b1 81       	ldd	r27, Z+1	; 0x01
    4838:	9d 01       	movw	r18, r26
    483a:	2f 5f       	subi	r18, 0xFF	; 255
    483c:	3f 4f       	sbci	r19, 0xFF	; 255
    483e:	20 83       	st	Z, r18
    4840:	31 83       	std	Z+1, r19	; 0x01
    4842:	8c 93       	st	X, r24
    4844:	26 81       	ldd	r18, Z+6	; 0x06
    4846:	37 81       	ldd	r19, Z+7	; 0x07
    4848:	2f 5f       	subi	r18, 0xFF	; 255
    484a:	3f 4f       	sbci	r19, 0xFF	; 255
    484c:	26 83       	std	Z+6, r18	; 0x06
    484e:	37 83       	std	Z+7, r19	; 0x07
    4850:	14 c0       	rjmp	.+40     	; 0x487a <fputc+0x6e>
    4852:	8b 01       	movw	r16, r22
    4854:	ec 01       	movw	r28, r24
    4856:	fb 01       	movw	r30, r22
    4858:	00 84       	ldd	r0, Z+8	; 0x08
    485a:	f1 85       	ldd	r31, Z+9	; 0x09
    485c:	e0 2d       	mov	r30, r0
    485e:	19 95       	eicall
    4860:	89 2b       	or	r24, r25
    4862:	e1 f6       	brne	.-72     	; 0x481c <fputc+0x10>
    4864:	d8 01       	movw	r26, r16
    4866:	16 96       	adiw	r26, 0x06	; 6
    4868:	8d 91       	ld	r24, X+
    486a:	9c 91       	ld	r25, X
    486c:	17 97       	sbiw	r26, 0x07	; 7
    486e:	01 96       	adiw	r24, 0x01	; 1
    4870:	16 96       	adiw	r26, 0x06	; 6
    4872:	8d 93       	st	X+, r24
    4874:	9c 93       	st	X, r25
    4876:	17 97       	sbiw	r26, 0x07	; 7
    4878:	ce 01       	movw	r24, r28
    487a:	df 91       	pop	r29
    487c:	cf 91       	pop	r28
    487e:	1f 91       	pop	r17
    4880:	0f 91       	pop	r16
    4882:	08 95       	ret

00004884 <ungetc>:
    4884:	fb 01       	movw	r30, r22
    4886:	23 81       	ldd	r18, Z+3	; 0x03
    4888:	20 ff       	sbrs	r18, 0
    488a:	12 c0       	rjmp	.+36     	; 0x48b0 <ungetc+0x2c>
    488c:	26 fd       	sbrc	r18, 6
    488e:	10 c0       	rjmp	.+32     	; 0x48b0 <ungetc+0x2c>
    4890:	8f 3f       	cpi	r24, 0xFF	; 255
    4892:	3f ef       	ldi	r19, 0xFF	; 255
    4894:	93 07       	cpc	r25, r19
    4896:	61 f0       	breq	.+24     	; 0x48b0 <ungetc+0x2c>
    4898:	82 83       	std	Z+2, r24	; 0x02
    489a:	2f 7d       	andi	r18, 0xDF	; 223
    489c:	20 64       	ori	r18, 0x40	; 64
    489e:	23 83       	std	Z+3, r18	; 0x03
    48a0:	26 81       	ldd	r18, Z+6	; 0x06
    48a2:	37 81       	ldd	r19, Z+7	; 0x07
    48a4:	21 50       	subi	r18, 0x01	; 1
    48a6:	31 09       	sbc	r19, r1
    48a8:	26 83       	std	Z+6, r18	; 0x06
    48aa:	37 83       	std	Z+7, r19	; 0x07
    48ac:	99 27       	eor	r25, r25
    48ae:	08 95       	ret
    48b0:	8f ef       	ldi	r24, 0xFF	; 255
    48b2:	9f ef       	ldi	r25, 0xFF	; 255
    48b4:	08 95       	ret

000048b6 <__ultoa_invert>:
    48b6:	fa 01       	movw	r30, r20
    48b8:	aa 27       	eor	r26, r26
    48ba:	28 30       	cpi	r18, 0x08	; 8
    48bc:	51 f1       	breq	.+84     	; 0x4912 <__ultoa_invert+0x5c>
    48be:	20 31       	cpi	r18, 0x10	; 16
    48c0:	81 f1       	breq	.+96     	; 0x4922 <__ultoa_invert+0x6c>
    48c2:	e8 94       	clt
    48c4:	6f 93       	push	r22
    48c6:	6e 7f       	andi	r22, 0xFE	; 254
    48c8:	6e 5f       	subi	r22, 0xFE	; 254
    48ca:	7f 4f       	sbci	r23, 0xFF	; 255
    48cc:	8f 4f       	sbci	r24, 0xFF	; 255
    48ce:	9f 4f       	sbci	r25, 0xFF	; 255
    48d0:	af 4f       	sbci	r26, 0xFF	; 255
    48d2:	b1 e0       	ldi	r27, 0x01	; 1
    48d4:	3e d0       	rcall	.+124    	; 0x4952 <__ultoa_invert+0x9c>
    48d6:	b4 e0       	ldi	r27, 0x04	; 4
    48d8:	3c d0       	rcall	.+120    	; 0x4952 <__ultoa_invert+0x9c>
    48da:	67 0f       	add	r22, r23
    48dc:	78 1f       	adc	r23, r24
    48de:	89 1f       	adc	r24, r25
    48e0:	9a 1f       	adc	r25, r26
    48e2:	a1 1d       	adc	r26, r1
    48e4:	68 0f       	add	r22, r24
    48e6:	79 1f       	adc	r23, r25
    48e8:	8a 1f       	adc	r24, r26
    48ea:	91 1d       	adc	r25, r1
    48ec:	a1 1d       	adc	r26, r1
    48ee:	6a 0f       	add	r22, r26
    48f0:	71 1d       	adc	r23, r1
    48f2:	81 1d       	adc	r24, r1
    48f4:	91 1d       	adc	r25, r1
    48f6:	a1 1d       	adc	r26, r1
    48f8:	20 d0       	rcall	.+64     	; 0x493a <__ultoa_invert+0x84>
    48fa:	09 f4       	brne	.+2      	; 0x48fe <__ultoa_invert+0x48>
    48fc:	68 94       	set
    48fe:	3f 91       	pop	r19
    4900:	2a e0       	ldi	r18, 0x0A	; 10
    4902:	26 9f       	mul	r18, r22
    4904:	11 24       	eor	r1, r1
    4906:	30 19       	sub	r19, r0
    4908:	30 5d       	subi	r19, 0xD0	; 208
    490a:	31 93       	st	Z+, r19
    490c:	de f6       	brtc	.-74     	; 0x48c4 <__ultoa_invert+0xe>
    490e:	cf 01       	movw	r24, r30
    4910:	08 95       	ret
    4912:	46 2f       	mov	r20, r22
    4914:	47 70       	andi	r20, 0x07	; 7
    4916:	40 5d       	subi	r20, 0xD0	; 208
    4918:	41 93       	st	Z+, r20
    491a:	b3 e0       	ldi	r27, 0x03	; 3
    491c:	0f d0       	rcall	.+30     	; 0x493c <__ultoa_invert+0x86>
    491e:	c9 f7       	brne	.-14     	; 0x4912 <__ultoa_invert+0x5c>
    4920:	f6 cf       	rjmp	.-20     	; 0x490e <__ultoa_invert+0x58>
    4922:	46 2f       	mov	r20, r22
    4924:	4f 70       	andi	r20, 0x0F	; 15
    4926:	40 5d       	subi	r20, 0xD0	; 208
    4928:	4a 33       	cpi	r20, 0x3A	; 58
    492a:	18 f0       	brcs	.+6      	; 0x4932 <__ultoa_invert+0x7c>
    492c:	49 5d       	subi	r20, 0xD9	; 217
    492e:	31 fd       	sbrc	r19, 1
    4930:	40 52       	subi	r20, 0x20	; 32
    4932:	41 93       	st	Z+, r20
    4934:	02 d0       	rcall	.+4      	; 0x493a <__ultoa_invert+0x84>
    4936:	a9 f7       	brne	.-22     	; 0x4922 <__ultoa_invert+0x6c>
    4938:	ea cf       	rjmp	.-44     	; 0x490e <__ultoa_invert+0x58>
    493a:	b4 e0       	ldi	r27, 0x04	; 4
    493c:	a6 95       	lsr	r26
    493e:	97 95       	ror	r25
    4940:	87 95       	ror	r24
    4942:	77 95       	ror	r23
    4944:	67 95       	ror	r22
    4946:	ba 95       	dec	r27
    4948:	c9 f7       	brne	.-14     	; 0x493c <__ultoa_invert+0x86>
    494a:	00 97       	sbiw	r24, 0x00	; 0
    494c:	61 05       	cpc	r22, r1
    494e:	71 05       	cpc	r23, r1
    4950:	08 95       	ret
    4952:	9b 01       	movw	r18, r22
    4954:	ac 01       	movw	r20, r24
    4956:	0a 2e       	mov	r0, r26
    4958:	06 94       	lsr	r0
    495a:	57 95       	ror	r21
    495c:	47 95       	ror	r20
    495e:	37 95       	ror	r19
    4960:	27 95       	ror	r18
    4962:	ba 95       	dec	r27
    4964:	c9 f7       	brne	.-14     	; 0x4958 <__ultoa_invert+0xa2>
    4966:	62 0f       	add	r22, r18
    4968:	73 1f       	adc	r23, r19
    496a:	84 1f       	adc	r24, r20
    496c:	95 1f       	adc	r25, r21
    496e:	a0 1d       	adc	r26, r0
    4970:	08 95       	ret

00004972 <__ctype_isfalse>:
    4972:	99 27       	eor	r25, r25
    4974:	88 27       	eor	r24, r24

00004976 <__ctype_istrue>:
    4976:	08 95       	ret

00004978 <_exit>:
    4978:	f8 94       	cli

0000497a <__stop_program>:
    497a:	ff cf       	rjmp	.-2      	; 0x497a <__stop_program>
