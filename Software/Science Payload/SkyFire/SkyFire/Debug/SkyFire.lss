
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000170  00802000  000022a2  00002336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00802170  00802170  000024a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00002518  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011739  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000561c  00000000  00000000  00013ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e47  00000000  00000000  0001960d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e04  00000000  00000000  0001f454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033236  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c61  00000000  00000000  0005348e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  000570ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002441  00000000  00000000  00057407  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c1       	rjmp	.+636    	; 0x27e <__ctors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c1       	rjmp	.+672    	; 0x2ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c1       	rjmp	.+620    	; 0x2ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_25>
      68:	30 c1       	rjmp	.+608    	; 0x2ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bad_interrupt>
      9a:	00 00       	nop
      9c:	36 c2       	rjmp	.+1132   	; 0x50a <__vector_39>
      9e:	00 00       	nop
      a0:	71 c2       	rjmp	.+1250   	; 0x584 <__vector_40>
      a2:	00 00       	nop
      a4:	ac c2       	rjmp	.+1368   	; 0x5fe <__vector_41>
      a6:	00 00       	nop
      a8:	e7 c2       	rjmp	.+1486   	; 0x678 <__vector_42>
      aa:	00 00       	nop
      ac:	0e c1       	rjmp	.+540    	; 0x2ca <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0c c1       	rjmp	.+536    	; 0x2ca <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0a c1       	rjmp	.+532    	; 0x2ca <__bad_interrupt>
      b6:	00 00       	nop
      b8:	08 c1       	rjmp	.+528    	; 0x2ca <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_47>
      c0:	04 c1       	rjmp	.+520    	; 0x2ca <__bad_interrupt>
      c2:	00 00       	nop
      c4:	02 c1       	rjmp	.+516    	; 0x2ca <__bad_interrupt>
      c6:	00 00       	nop
      c8:	00 c1       	rjmp	.+512    	; 0x2ca <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fe c0       	rjmp	.+508    	; 0x2ca <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fc c0       	rjmp	.+504    	; 0x2ca <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fa c0       	rjmp	.+500    	; 0x2ca <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f8 c0       	rjmp	.+496    	; 0x2ca <__bad_interrupt>
      da:	00 00       	nop
      dc:	f6 c0       	rjmp	.+492    	; 0x2ca <__bad_interrupt>
      de:	00 00       	nop
      e0:	f4 c0       	rjmp	.+488    	; 0x2ca <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f2 c0       	rjmp	.+484    	; 0x2ca <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f0 c0       	rjmp	.+480    	; 0x2ca <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ee c0       	rjmp	.+476    	; 0x2ca <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ec c0       	rjmp	.+472    	; 0x2ca <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ea c0       	rjmp	.+468    	; 0x2ca <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e8 c0       	rjmp	.+464    	; 0x2ca <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e6 c0       	rjmp	.+460    	; 0x2ca <__bad_interrupt>
      fe:	00 00       	nop
     100:	e4 c0       	rjmp	.+456    	; 0x2ca <__bad_interrupt>
     102:	00 00       	nop
     104:	e2 c0       	rjmp	.+452    	; 0x2ca <__bad_interrupt>
     106:	00 00       	nop
     108:	e0 c0       	rjmp	.+448    	; 0x2ca <__bad_interrupt>
     10a:	00 00       	nop
     10c:	de c0       	rjmp	.+444    	; 0x2ca <__bad_interrupt>
     10e:	00 00       	nop
     110:	dc c0       	rjmp	.+440    	; 0x2ca <__bad_interrupt>
     112:	00 00       	nop
     114:	da c0       	rjmp	.+436    	; 0x2ca <__bad_interrupt>
     116:	00 00       	nop
     118:	d8 c0       	rjmp	.+432    	; 0x2ca <__bad_interrupt>
     11a:	00 00       	nop
     11c:	02 c1       	rjmp	.+516    	; 0x322 <__vector_71>
     11e:	00 00       	nop
     120:	3d c1       	rjmp	.+634    	; 0x39c <__vector_72>
     122:	00 00       	nop
     124:	78 c1       	rjmp	.+752    	; 0x416 <__vector_73>
     126:	00 00       	nop
     128:	b3 c1       	rjmp	.+870    	; 0x490 <__vector_74>
     12a:	00 00       	nop
     12c:	ce c0       	rjmp	.+412    	; 0x2ca <__bad_interrupt>
     12e:	00 00       	nop
     130:	cc c0       	rjmp	.+408    	; 0x2ca <__bad_interrupt>
     132:	00 00       	nop
     134:	ca c0       	rjmp	.+404    	; 0x2ca <__bad_interrupt>
     136:	00 00       	nop
     138:	c8 c0       	rjmp	.+400    	; 0x2ca <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c6 c0       	rjmp	.+396    	; 0x2ca <__bad_interrupt>
     13e:	00 00       	nop
     140:	c4 c0       	rjmp	.+392    	; 0x2ca <__bad_interrupt>
     142:	00 00       	nop
     144:	c2 c0       	rjmp	.+388    	; 0x2ca <__bad_interrupt>
     146:	00 00       	nop
     148:	c0 c0       	rjmp	.+384    	; 0x2ca <__bad_interrupt>
     14a:	00 00       	nop
     14c:	be c0       	rjmp	.+380    	; 0x2ca <__bad_interrupt>
     14e:	00 00       	nop
     150:	bc c0       	rjmp	.+376    	; 0x2ca <__bad_interrupt>
     152:	00 00       	nop
     154:	ba c0       	rjmp	.+372    	; 0x2ca <__bad_interrupt>
     156:	00 00       	nop
     158:	b8 c0       	rjmp	.+368    	; 0x2ca <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b6 c0       	rjmp	.+364    	; 0x2ca <__bad_interrupt>
     15e:	00 00       	nop
     160:	b4 c0       	rjmp	.+360    	; 0x2ca <__bad_interrupt>
     162:	00 00       	nop
     164:	b2 c0       	rjmp	.+356    	; 0x2ca <__bad_interrupt>
     166:	00 00       	nop
     168:	b0 c0       	rjmp	.+352    	; 0x2ca <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ae c0       	rjmp	.+348    	; 0x2ca <__bad_interrupt>
     16e:	00 00       	nop
     170:	ac c0       	rjmp	.+344    	; 0x2ca <__bad_interrupt>
     172:	00 00       	nop
     174:	aa c0       	rjmp	.+340    	; 0x2ca <__bad_interrupt>
     176:	00 00       	nop
     178:	a8 c0       	rjmp	.+336    	; 0x2ca <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a6 c0       	rjmp	.+332    	; 0x2ca <__bad_interrupt>
     17e:	00 00       	nop
     180:	a4 c0       	rjmp	.+328    	; 0x2ca <__bad_interrupt>
     182:	00 00       	nop
     184:	a2 c0       	rjmp	.+324    	; 0x2ca <__bad_interrupt>
     186:	00 00       	nop
     188:	a0 c0       	rjmp	.+320    	; 0x2ca <__bad_interrupt>
     18a:	00 00       	nop
     18c:	9e c0       	rjmp	.+316    	; 0x2ca <__bad_interrupt>
     18e:	00 00       	nop
     190:	9c c0       	rjmp	.+312    	; 0x2ca <__bad_interrupt>
     192:	00 00       	nop
     194:	9a c0       	rjmp	.+308    	; 0x2ca <__bad_interrupt>
     196:	00 00       	nop
     198:	98 c0       	rjmp	.+304    	; 0x2ca <__bad_interrupt>
     19a:	00 00       	nop
     19c:	96 c0       	rjmp	.+300    	; 0x2ca <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	94 c0       	rjmp	.+296    	; 0x2ca <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	92 c0       	rjmp	.+292    	; 0x2ca <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	90 c0       	rjmp	.+288    	; 0x2ca <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	8e c0       	rjmp	.+284    	; 0x2ca <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8c c0       	rjmp	.+280    	; 0x2ca <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8a c0       	rjmp	.+276    	; 0x2ca <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	88 c0       	rjmp	.+272    	; 0x2ca <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	86 c0       	rjmp	.+268    	; 0x2ca <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	84 c0       	rjmp	.+264    	; 0x2ca <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	82 c0       	rjmp	.+260    	; 0x2ca <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	80 c0       	rjmp	.+256    	; 0x2ca <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	7e c0       	rjmp	.+252    	; 0x2ca <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7c c0       	rjmp	.+248    	; 0x2ca <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7a c0       	rjmp	.+244    	; 0x2ca <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	78 c0       	rjmp	.+240    	; 0x2ca <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	76 c0       	rjmp	.+236    	; 0x2ca <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	74 c0       	rjmp	.+232    	; 0x2ca <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	72 c0       	rjmp	.+228    	; 0x2ca <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	70 c0       	rjmp	.+224    	; 0x2ca <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	6e c0       	rjmp	.+220    	; 0x2ca <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6c c0       	rjmp	.+216    	; 0x2ca <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6a c0       	rjmp	.+212    	; 0x2ca <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	68 c0       	rjmp	.+208    	; 0x2ca <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <usart_init_rs232+0x144>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df e3       	ldi	r29, 0x3F	; 63
     288:	de bf       	out	0x3e, r29	; 62
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	0c bf       	out	0x3c, r16	; 60
     28e:	18 be       	out	0x38, r1	; 56
     290:	19 be       	out	0x39, r1	; 57
     292:	1a be       	out	0x3a, r1	; 58
     294:	1b be       	out	0x3b, r1	; 59

00000296 <__do_copy_data>:
     296:	11 e2       	ldi	r17, 0x21	; 33
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e2       	ldi	r27, 0x20	; 32
     29c:	e2 ea       	ldi	r30, 0xA2	; 162
     29e:	f2 e2       	ldi	r31, 0x22	; 34
     2a0:	00 e0       	ldi	r16, 0x00	; 0
     2a2:	0b bf       	out	0x3b, r16	; 59
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x14>
     2a6:	07 90       	elpm	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	a0 37       	cpi	r26, 0x70	; 112
     2ac:	b1 07       	cpc	r27, r17
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0x10>
     2b0:	1b be       	out	0x3b, r1	; 59

000002b2 <__do_clear_bss>:
     2b2:	21 e2       	ldi	r18, 0x21	; 33
     2b4:	a0 e7       	ldi	r26, 0x70	; 112
     2b6:	b1 e2       	ldi	r27, 0x21	; 33
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a9 39       	cpi	r26, 0x99	; 153
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <main>
     2c6:	0c 94 4f 11 	jmp	0x229e	; 0x229e <_exit>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	1f 92       	push	r1
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2d6:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <stdio_base>
     2da:	90 91 8a 21 	lds	r25, 0x218A	; 0x80218a <stdio_base+0x1>
     2de:	e0 91 85 21 	lds	r30, 0x2185	; 0x802185 <ptr_get>
     2e2:	f0 91 86 21 	lds	r31, 0x2186	; 0x802186 <ptr_get+0x1>
     2e6:	be 01       	movw	r22, r28
     2e8:	6f 5f       	subi	r22, 0xFF	; 255
     2ea:	7f 4f       	sbci	r23, 0xFF	; 255
     2ec:	19 95       	eicall
	return c;
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     2f0:	08 2e       	mov	r0, r24
     2f2:	00 0c       	add	r0, r0
     2f4:	99 0b       	sbc	r25, r25
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2fe:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     300:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <stdio_base>
     304:	90 91 8a 21 	lds	r25, 0x218A	; 0x80218a <stdio_base+0x1>
     308:	e0 91 87 21 	lds	r30, 0x2187	; 0x802187 <ptr_put>
     30c:	f0 91 88 21 	lds	r31, 0x2188	; 0x802188 <ptr_put+0x1>
     310:	19 95       	eicall
     312:	99 23       	and	r25, r25
     314:	1c f0       	brlt	.+6      	; 0x31c <_write+0x1e>
		return -1;
	}
	return 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     320:	08 95       	ret

00000322 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	08 b6       	in	r0, 0x38	; 56
     32e:	0f 92       	push	r0
     330:	18 be       	out	0x38, r1	; 56
     332:	09 b6       	in	r0, 0x39	; 57
     334:	0f 92       	push	r0
     336:	19 be       	out	0x39, r1	; 57
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	1b be       	out	0x3b, r1	; 59
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     356:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     35a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     35e:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <adca_callback>
     362:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <adca_callback+0x1>
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	19 95       	eicall
}
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	7f 91       	pop	r23
     37c:	6f 91       	pop	r22
     37e:	5f 91       	pop	r21
     380:	4f 91       	pop	r20
     382:	3f 91       	pop	r19
     384:	2f 91       	pop	r18
     386:	0f 90       	pop	r0
     388:	0b be       	out	0x3b, r0	; 59
     38a:	0f 90       	pop	r0
     38c:	09 be       	out	0x39, r0	; 57
     38e:	0f 90       	pop	r0
     390:	08 be       	out	0x38, r0	; 56
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	08 b6       	in	r0, 0x38	; 56
     3a8:	0f 92       	push	r0
     3aa:	18 be       	out	0x38, r1	; 56
     3ac:	09 b6       	in	r0, 0x39	; 57
     3ae:	0f 92       	push	r0
     3b0:	19 be       	out	0x39, r1	; 57
     3b2:	0b b6       	in	r0, 0x3b	; 59
     3b4:	0f 92       	push	r0
     3b6:	1b be       	out	0x3b, r1	; 59
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3d0:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3d4:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d8:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <adca_callback>
     3dc:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <adca_callback+0x1>
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	19 95       	eicall
}
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	bf 91       	pop	r27
     3ee:	af 91       	pop	r26
     3f0:	9f 91       	pop	r25
     3f2:	8f 91       	pop	r24
     3f4:	7f 91       	pop	r23
     3f6:	6f 91       	pop	r22
     3f8:	5f 91       	pop	r21
     3fa:	4f 91       	pop	r20
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0b be       	out	0x3b, r0	; 59
     404:	0f 90       	pop	r0
     406:	09 be       	out	0x39, r0	; 57
     408:	0f 90       	pop	r0
     40a:	08 be       	out	0x38, r0	; 56
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	08 b6       	in	r0, 0x38	; 56
     422:	0f 92       	push	r0
     424:	18 be       	out	0x38, r1	; 56
     426:	09 b6       	in	r0, 0x39	; 57
     428:	0f 92       	push	r0
     42a:	19 be       	out	0x39, r1	; 57
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	1b be       	out	0x3b, r1	; 59
     432:	2f 93       	push	r18
     434:	3f 93       	push	r19
     436:	4f 93       	push	r20
     438:	5f 93       	push	r21
     43a:	6f 93       	push	r22
     43c:	7f 93       	push	r23
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	af 93       	push	r26
     444:	bf 93       	push	r27
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     44a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     44e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     452:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <adca_callback>
     456:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <adca_callback+0x1>
     45a:	64 e0       	ldi	r22, 0x04	; 4
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	19 95       	eicall
}
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0b be       	out	0x3b, r0	; 59
     47e:	0f 90       	pop	r0
     480:	09 be       	out	0x39, r0	; 57
     482:	0f 90       	pop	r0
     484:	08 be       	out	0x38, r0	; 56
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	08 b6       	in	r0, 0x38	; 56
     49c:	0f 92       	push	r0
     49e:	18 be       	out	0x38, r1	; 56
     4a0:	09 b6       	in	r0, 0x39	; 57
     4a2:	0f 92       	push	r0
     4a4:	19 be       	out	0x39, r1	; 57
     4a6:	0b b6       	in	r0, 0x3b	; 59
     4a8:	0f 92       	push	r0
     4aa:	1b be       	out	0x3b, r1	; 59
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4c4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4cc:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <adca_callback>
     4d0:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <adca_callback+0x1>
     4d4:	68 e0       	ldi	r22, 0x08	; 8
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	19 95       	eicall
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0b be       	out	0x3b, r0	; 59
     4f8:	0f 90       	pop	r0
     4fa:	09 be       	out	0x39, r0	; 57
     4fc:	0f 90       	pop	r0
     4fe:	08 be       	out	0x38, r0	; 56
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	08 b6       	in	r0, 0x38	; 56
     516:	0f 92       	push	r0
     518:	18 be       	out	0x38, r1	; 56
     51a:	09 b6       	in	r0, 0x39	; 57
     51c:	0f 92       	push	r0
     51e:	19 be       	out	0x39, r1	; 57
     520:	0b b6       	in	r0, 0x3b	; 59
     522:	0f 92       	push	r0
     524:	1b be       	out	0x3b, r1	; 59
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     53e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     542:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     546:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <adcb_callback>
     54a:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <adcb_callback+0x1>
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	19 95       	eicall
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0b be       	out	0x3b, r0	; 59
     572:	0f 90       	pop	r0
     574:	09 be       	out	0x39, r0	; 57
     576:	0f 90       	pop	r0
     578:	08 be       	out	0x38, r0	; 56
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	08 b6       	in	r0, 0x38	; 56
     590:	0f 92       	push	r0
     592:	18 be       	out	0x38, r1	; 56
     594:	09 b6       	in	r0, 0x39	; 57
     596:	0f 92       	push	r0
     598:	19 be       	out	0x39, r1	; 57
     59a:	0b b6       	in	r0, 0x3b	; 59
     59c:	0f 92       	push	r0
     59e:	1b be       	out	0x3b, r1	; 59
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5bc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5c0:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <adcb_callback>
     5c4:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <adcb_callback+0x1>
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	19 95       	eicall
}
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	09 be       	out	0x39, r0	; 57
     5f0:	0f 90       	pop	r0
     5f2:	08 be       	out	0x38, r0	; 56
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	08 b6       	in	r0, 0x38	; 56
     60a:	0f 92       	push	r0
     60c:	18 be       	out	0x38, r1	; 56
     60e:	09 b6       	in	r0, 0x39	; 57
     610:	0f 92       	push	r0
     612:	19 be       	out	0x39, r1	; 57
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	1b be       	out	0x3b, r1	; 59
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     632:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     636:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     63a:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <adcb_callback>
     63e:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <adcb_callback+0x1>
     642:	64 e0       	ldi	r22, 0x04	; 4
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	19 95       	eicall
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0b be       	out	0x3b, r0	; 59
     666:	0f 90       	pop	r0
     668:	09 be       	out	0x39, r0	; 57
     66a:	0f 90       	pop	r0
     66c:	08 be       	out	0x38, r0	; 56
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	08 b6       	in	r0, 0x38	; 56
     684:	0f 92       	push	r0
     686:	18 be       	out	0x38, r1	; 56
     688:	09 b6       	in	r0, 0x39	; 57
     68a:	0f 92       	push	r0
     68c:	19 be       	out	0x39, r1	; 57
     68e:	0b b6       	in	r0, 0x3b	; 59
     690:	0f 92       	push	r0
     692:	1b be       	out	0x3b, r1	; 59
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	ef 93       	push	r30
     6aa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6ac:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6b0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6b4:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <adcb_callback>
     6b8:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <adcb_callback+0x1>
     6bc:	68 e0       	ldi	r22, 0x08	; 8
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	19 95       	eicall
}
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0b be       	out	0x3b, r0	; 59
     6e0:	0f 90       	pop	r0
     6e2:	09 be       	out	0x39, r0	; 57
     6e4:	0f 90       	pop	r0
     6e6:	08 be       	out	0x38, r0	; 56
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6f2:	fc 01       	movw	r30, r24
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	95 ff       	sbrs	r25, 5
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <usart_putchar+0x2>
     6fa:	60 83       	st	Z, r22
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret

00000702 <usart_getchar>:
     702:	fc 01       	movw	r30, r24
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	99 23       	and	r25, r25
     708:	ec f7       	brge	.-6      	; 0x704 <usart_getchar+0x2>
     70a:	80 81       	ld	r24, Z
     70c:	08 95       	ret

0000070e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     70e:	4f 92       	push	r4
     710:	5f 92       	push	r5
     712:	6f 92       	push	r6
     714:	7f 92       	push	r7
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	7c 01       	movw	r14, r24
     72a:	4a 01       	movw	r8, r20
     72c:	5b 01       	movw	r10, r22
     72e:	28 01       	movw	r4, r16
     730:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     732:	fc 01       	movw	r30, r24
     734:	84 81       	ldd	r24, Z+4	; 0x04
     736:	82 ff       	sbrs	r24, 2
     738:	16 c0       	rjmp	.+44     	; 0x766 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     73a:	d9 01       	movw	r26, r18
     73c:	c8 01       	movw	r24, r16
     73e:	68 94       	set
     740:	12 f8       	bld	r1, 2
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	16 94       	lsr	r1
     74c:	d1 f7       	brne	.-12     	; 0x742 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     74e:	b9 01       	movw	r22, r18
     750:	a8 01       	movw	r20, r16
     752:	03 2e       	mov	r0, r19
     754:	36 e1       	ldi	r19, 0x16	; 22
     756:	76 95       	lsr	r23
     758:	67 95       	ror	r22
     75a:	57 95       	ror	r21
     75c:	47 95       	ror	r20
     75e:	3a 95       	dec	r19
     760:	d1 f7       	brne	.-12     	; 0x756 <usart_set_baudrate+0x48>
     762:	30 2d       	mov	r19, r0
     764:	15 c0       	rjmp	.+42     	; 0x790 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     766:	d9 01       	movw	r26, r18
     768:	c8 01       	movw	r24, r16
     76a:	68 94       	set
     76c:	13 f8       	bld	r1, 3
     76e:	b6 95       	lsr	r27
     770:	a7 95       	ror	r26
     772:	97 95       	ror	r25
     774:	87 95       	ror	r24
     776:	16 94       	lsr	r1
     778:	d1 f7       	brne	.-12     	; 0x76e <usart_set_baudrate+0x60>
		min_rate /= 2;
     77a:	b9 01       	movw	r22, r18
     77c:	a8 01       	movw	r20, r16
     77e:	03 2e       	mov	r0, r19
     780:	37 e1       	ldi	r19, 0x17	; 23
     782:	76 95       	lsr	r23
     784:	67 95       	ror	r22
     786:	57 95       	ror	r21
     788:	47 95       	ror	r20
     78a:	3a 95       	dec	r19
     78c:	d1 f7       	brne	.-12     	; 0x782 <usart_set_baudrate+0x74>
     78e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     790:	88 15       	cp	r24, r8
     792:	99 05       	cpc	r25, r9
     794:	aa 05       	cpc	r26, r10
     796:	bb 05       	cpc	r27, r11
     798:	08 f4       	brcc	.+2      	; 0x79c <usart_set_baudrate+0x8e>
     79a:	a6 c0       	rjmp	.+332    	; 0x8e8 <usart_set_baudrate+0x1da>
     79c:	84 16       	cp	r8, r20
     79e:	95 06       	cpc	r9, r21
     7a0:	a6 06       	cpc	r10, r22
     7a2:	b7 06       	cpc	r11, r23
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <usart_set_baudrate+0x9a>
     7a6:	a2 c0       	rjmp	.+324    	; 0x8ec <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7a8:	f7 01       	movw	r30, r14
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	82 fd       	sbrc	r24, 2
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <usart_set_baudrate+0xaa>
		baud *= 2;
     7b0:	88 0c       	add	r8, r8
     7b2:	99 1c       	adc	r9, r9
     7b4:	aa 1c       	adc	r10, r10
     7b6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7b8:	c3 01       	movw	r24, r6
     7ba:	b2 01       	movw	r22, r4
     7bc:	a5 01       	movw	r20, r10
     7be:	94 01       	movw	r18, r8
     7c0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7c4:	2f 3f       	cpi	r18, 0xFF	; 255
     7c6:	31 05       	cpc	r19, r1
     7c8:	41 05       	cpc	r20, r1
     7ca:	51 05       	cpc	r21, r1
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <usart_set_baudrate+0xc2>
     7ce:	90 c0       	rjmp	.+288    	; 0x8f0 <usart_set_baudrate+0x1e2>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	c9 ef       	ldi	r28, 0xF9	; 249
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <usart_set_baudrate+0xd8>
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	4a 07       	cpc	r20, r26
     7e2:	5b 07       	cpc	r21, r27
     7e4:	58 f0       	brcs	.+22     	; 0x7fc <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	aa 1f       	adc	r26, r26
     7ec:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     7ee:	cd 3f       	cpi	r28, 0xFD	; 253
     7f0:	0c f4       	brge	.+2      	; 0x7f4 <usart_set_baudrate+0xe6>
			limit |= 1;
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7f6:	c7 30       	cpi	r28, 0x07	; 7
     7f8:	89 f7       	brne	.-30     	; 0x7dc <usart_set_baudrate+0xce>
     7fa:	4f c0       	rjmp	.+158    	; 0x89a <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     7fc:	cc 23       	and	r28, r28
     7fe:	0c f0       	brlt	.+2      	; 0x802 <usart_set_baudrate+0xf4>
     800:	4c c0       	rjmp	.+152    	; 0x89a <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     802:	d5 01       	movw	r26, r10
     804:	c4 01       	movw	r24, r8
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	aa 1f       	adc	r26, r26
     80c:	bb 1f       	adc	r27, r27
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	aa 1f       	adc	r26, r26
     81c:	bb 1f       	adc	r27, r27
     81e:	48 1a       	sub	r4, r24
     820:	59 0a       	sbc	r5, r25
     822:	6a 0a       	sbc	r6, r26
     824:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     826:	ce 3f       	cpi	r28, 0xFE	; 254
     828:	f4 f4       	brge	.+60     	; 0x866 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     82a:	8d ef       	ldi	r24, 0xFD	; 253
     82c:	9f ef       	ldi	r25, 0xFF	; 255
     82e:	8c 1b       	sub	r24, r28
     830:	91 09       	sbc	r25, r1
     832:	c7 fd       	sbrc	r28, 7
     834:	93 95       	inc	r25
     836:	04 c0       	rjmp	.+8      	; 0x840 <usart_set_baudrate+0x132>
     838:	44 0c       	add	r4, r4
     83a:	55 1c       	adc	r5, r5
     83c:	66 1c       	adc	r6, r6
     83e:	77 1c       	adc	r7, r7
     840:	8a 95       	dec	r24
     842:	d2 f7       	brpl	.-12     	; 0x838 <usart_set_baudrate+0x12a>
     844:	d5 01       	movw	r26, r10
     846:	c4 01       	movw	r24, r8
     848:	b6 95       	lsr	r27
     84a:	a7 95       	ror	r26
     84c:	97 95       	ror	r25
     84e:	87 95       	ror	r24
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	64 0d       	add	r22, r4
     856:	75 1d       	adc	r23, r5
     858:	86 1d       	adc	r24, r6
     85a:	97 1d       	adc	r25, r7
     85c:	a5 01       	movw	r20, r10
     85e:	94 01       	movw	r18, r8
     860:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__udivmodsi4>
     864:	37 c0       	rjmp	.+110    	; 0x8d4 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	8c 0f       	add	r24, r28
     86a:	a5 01       	movw	r20, r10
     86c:	94 01       	movw	r18, r8
     86e:	04 c0       	rjmp	.+8      	; 0x878 <usart_set_baudrate+0x16a>
     870:	22 0f       	add	r18, r18
     872:	33 1f       	adc	r19, r19
     874:	44 1f       	adc	r20, r20
     876:	55 1f       	adc	r21, r21
     878:	8a 95       	dec	r24
     87a:	d2 f7       	brpl	.-12     	; 0x870 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     87c:	da 01       	movw	r26, r20
     87e:	c9 01       	movw	r24, r18
     880:	b6 95       	lsr	r27
     882:	a7 95       	ror	r26
     884:	97 95       	ror	r25
     886:	87 95       	ror	r24
     888:	bc 01       	movw	r22, r24
     88a:	cd 01       	movw	r24, r26
     88c:	64 0d       	add	r22, r4
     88e:	75 1d       	adc	r23, r5
     890:	86 1d       	adc	r24, r6
     892:	97 1d       	adc	r25, r7
     894:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__udivmodsi4>
     898:	1d c0       	rjmp	.+58     	; 0x8d4 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	8c 0f       	add	r24, r28
     89e:	a5 01       	movw	r20, r10
     8a0:	94 01       	movw	r18, r8
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <usart_set_baudrate+0x19e>
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	44 1f       	adc	r20, r20
     8aa:	55 1f       	adc	r21, r21
     8ac:	8a 95       	dec	r24
     8ae:	d2 f7       	brpl	.-12     	; 0x8a4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8b0:	da 01       	movw	r26, r20
     8b2:	c9 01       	movw	r24, r18
     8b4:	b6 95       	lsr	r27
     8b6:	a7 95       	ror	r26
     8b8:	97 95       	ror	r25
     8ba:	87 95       	ror	r24
     8bc:	bc 01       	movw	r22, r24
     8be:	cd 01       	movw	r24, r26
     8c0:	64 0d       	add	r22, r4
     8c2:	75 1d       	adc	r23, r5
     8c4:	86 1d       	adc	r24, r6
     8c6:	97 1d       	adc	r25, r7
     8c8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__udivmodsi4>
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	31 09       	sbc	r19, r1
     8d0:	41 09       	sbc	r20, r1
     8d2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8d4:	83 2f       	mov	r24, r19
     8d6:	8f 70       	andi	r24, 0x0F	; 15
     8d8:	c2 95       	swap	r28
     8da:	c0 7f       	andi	r28, 0xF0	; 240
     8dc:	c8 2b       	or	r28, r24
     8de:	f7 01       	movw	r30, r14
     8e0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8e2:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	18 c0       	rjmp	.+48     	; 0x918 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	16 c0       	rjmp	.+44     	; 0x918 <usart_set_baudrate+0x20a>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	14 c0       	rjmp	.+40     	; 0x918 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8f0:	d5 01       	movw	r26, r10
     8f2:	c4 01       	movw	r24, r8
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	aa 1f       	adc	r26, r26
     8fa:	bb 1f       	adc	r27, r27
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	aa 1f       	adc	r26, r26
     902:	bb 1f       	adc	r27, r27
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	aa 1f       	adc	r26, r26
     90a:	bb 1f       	adc	r27, r27
     90c:	48 1a       	sub	r4, r24
     90e:	59 0a       	sbc	r5, r25
     910:	6a 0a       	sbc	r6, r26
     912:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     914:	c9 ef       	ldi	r28, 0xF9	; 249
     916:	89 cf       	rjmp	.-238    	; 0x82a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	9f 90       	pop	r9
     928:	8f 90       	pop	r8
     92a:	7f 90       	pop	r7
     92c:	6f 90       	pop	r6
     92e:	5f 90       	pop	r5
     930:	4f 90       	pop	r4
     932:	08 95       	ret

00000934 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	09 f4       	brne	.+2      	; 0x946 <usart_init_rs232+0x12>
     944:	36 c1       	rjmp	.+620    	; 0xbb2 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     946:	80 3c       	cpi	r24, 0xC0	; 192
     948:	91 05       	cpc	r25, r1
     94a:	21 f4       	brne	.+8      	; 0x954 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     94c:	60 e1       	ldi	r22, 0x10	; 16
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	2d d3       	rcall	.+1626   	; 0xfac <sysclk_enable_module>
     952:	2f c1       	rjmp	.+606    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     954:	c0 34       	cpi	r28, 0x40	; 64
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	d8 07       	cpc	r29, r24
     95a:	21 f4       	brne	.+8      	; 0x964 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     95c:	68 e0       	ldi	r22, 0x08	; 8
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	25 d3       	rcall	.+1610   	; 0xfac <sysclk_enable_module>
     962:	27 c1       	rjmp	.+590    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     964:	c1 15       	cp	r28, r1
     966:	e4 e0       	ldi	r30, 0x04	; 4
     968:	de 07       	cpc	r29, r30
     96a:	21 f4       	brne	.+8      	; 0x974 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     96c:	64 e0       	ldi	r22, 0x04	; 4
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	1d d3       	rcall	.+1594   	; 0xfac <sysclk_enable_module>
     972:	1f c1       	rjmp	.+574    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     974:	c0 38       	cpi	r28, 0x80	; 128
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     97a:	21 f4       	brne	.+8      	; 0x984 <usart_init_rs232+0x50>
     97c:	62 e0       	ldi	r22, 0x02	; 2
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	15 d3       	rcall	.+1578   	; 0xfac <sysclk_enable_module>
     982:	17 c1       	rjmp	.+558    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     984:	c1 15       	cp	r28, r1
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     98a:	21 f4       	brne	.+8      	; 0x994 <usart_init_rs232+0x60>
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0d d3       	rcall	.+1562   	; 0xfac <sysclk_enable_module>
     992:	0f c1       	rjmp	.+542    	; 0xbb2 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     994:	c0 38       	cpi	r28, 0x80	; 128
     996:	e3 e0       	ldi	r30, 0x03	; 3
     998:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     99a:	21 f4       	brne	.+8      	; 0x9a4 <usart_init_rs232+0x70>
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	05 d3       	rcall	.+1546   	; 0xfac <sysclk_enable_module>
     9a2:	07 c1       	rjmp	.+526    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     9a4:	c0 39       	cpi	r28, 0x90	; 144
     9a6:	f3 e0       	ldi	r31, 0x03	; 3
     9a8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <usart_init_rs232+0x80>
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	fd d2       	rcall	.+1530   	; 0xfac <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9b2:	ff c0       	rjmp	.+510    	; 0xbb2 <usart_init_rs232+0x27e>
     9b4:	c1 15       	cp	r28, r1
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9ba:	21 f4       	brne	.+8      	; 0x9c4 <usart_init_rs232+0x90>
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	f5 d2       	rcall	.+1514   	; 0xfac <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     9c2:	f7 c0       	rjmp	.+494    	; 0xbb2 <usart_init_rs232+0x27e>
     9c4:	c0 34       	cpi	r28, 0x40	; 64
     9c6:	e2 e0       	ldi	r30, 0x02	; 2
     9c8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <usart_init_rs232+0xa0>
     9cc:	62 e0       	ldi	r22, 0x02	; 2
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	ed d2       	rcall	.+1498   	; 0xfac <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9d2:	ef c0       	rjmp	.+478    	; 0xbb2 <usart_init_rs232+0x27e>
     9d4:	c1 15       	cp	r28, r1
     9d6:	f3 e0       	ldi	r31, 0x03	; 3
     9d8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9da:	21 f4       	brne	.+8      	; 0x9e4 <usart_init_rs232+0xb0>
     9dc:	64 e0       	ldi	r22, 0x04	; 4
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	e5 d2       	rcall	.+1482   	; 0xfac <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9e2:	e7 c0       	rjmp	.+462    	; 0xbb2 <usart_init_rs232+0x27e>
     9e4:	c0 32       	cpi	r28, 0x20	; 32
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <usart_init_rs232+0xc0>
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	dd d2       	rcall	.+1466   	; 0xfac <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9f2:	df c0       	rjmp	.+446    	; 0xbb2 <usart_init_rs232+0x27e>
     9f4:	c1 15       	cp	r28, r1
     9f6:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9f8:	de 07       	cpc	r29, r30
     9fa:	21 f4       	brne	.+8      	; 0xa04 <usart_init_rs232+0xd0>
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	d5 d2       	rcall	.+1450   	; 0xfac <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a02:	d7 c0       	rjmp	.+430    	; 0xbb2 <usart_init_rs232+0x27e>
     a04:	c1 15       	cp	r28, r1
     a06:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a08:	df 07       	cpc	r29, r31
     a0a:	21 f4       	brne	.+8      	; 0xa14 <usart_init_rs232+0xe0>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	cd d2       	rcall	.+1434   	; 0xfac <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     a12:	cf c0       	rjmp	.+414    	; 0xbb2 <usart_init_rs232+0x27e>
     a14:	c1 15       	cp	r28, r1
     a16:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a18:	d8 07       	cpc	r29, r24
     a1a:	21 f4       	brne	.+8      	; 0xa24 <usart_init_rs232+0xf0>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	c5 d2       	rcall	.+1418   	; 0xfac <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     a22:	c7 c0       	rjmp	.+398    	; 0xbb2 <usart_init_rs232+0x27e>
     a24:	c1 15       	cp	r28, r1
     a26:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     a28:	de 07       	cpc	r29, r30
     a2a:	21 f4       	brne	.+8      	; 0xa34 <usart_init_rs232+0x100>
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a30:	bd d2       	rcall	.+1402   	; 0xfac <sysclk_enable_module>
     a32:	bf c0       	rjmp	.+382    	; 0xbb2 <usart_init_rs232+0x27e>
     a34:	c0 34       	cpi	r28, 0x40	; 64
     a36:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a38:	df 07       	cpc	r29, r31
     a3a:	21 f4       	brne	.+8      	; 0xa44 <usart_init_rs232+0x110>
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a40:	b5 d2       	rcall	.+1386   	; 0xfac <sysclk_enable_module>
     a42:	b7 c0       	rjmp	.+366    	; 0xbb2 <usart_init_rs232+0x27e>
     a44:	c0 34       	cpi	r28, 0x40	; 64
     a46:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a48:	d8 07       	cpc	r29, r24
     a4a:	21 f4       	brne	.+8      	; 0xa54 <usart_init_rs232+0x120>
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a50:	ad d2       	rcall	.+1370   	; 0xfac <sysclk_enable_module>
     a52:	af c0       	rjmp	.+350    	; 0xbb2 <usart_init_rs232+0x27e>
     a54:	c0 34       	cpi	r28, 0x40	; 64
     a56:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a58:	de 07       	cpc	r29, r30
     a5a:	21 f4       	brne	.+8      	; 0xa64 <usart_init_rs232+0x130>
     a5c:	62 e0       	ldi	r22, 0x02	; 2
     a5e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a60:	a5 d2       	rcall	.+1354   	; 0xfac <sysclk_enable_module>
     a62:	a7 c0       	rjmp	.+334    	; 0xbb2 <usart_init_rs232+0x27e>
     a64:	c0 34       	cpi	r28, 0x40	; 64
     a66:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a68:	df 07       	cpc	r29, r31
     a6a:	21 f4       	brne	.+8      	; 0xa74 <usart_init_rs232+0x140>
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a70:	9d d2       	rcall	.+1338   	; 0xfac <sysclk_enable_module>
     a72:	9f c0       	rjmp	.+318    	; 0xbb2 <usart_init_rs232+0x27e>
     a74:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	d8 07       	cpc	r29, r24
     a7a:	21 f4       	brne	.+8      	; 0xa84 <usart_init_rs232+0x150>
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a80:	95 d2       	rcall	.+1322   	; 0xfac <sysclk_enable_module>
     a82:	97 c0       	rjmp	.+302    	; 0xbb2 <usart_init_rs232+0x27e>
     a84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a86:	e9 e0       	ldi	r30, 0x09	; 9
     a88:	de 07       	cpc	r29, r30
     a8a:	21 f4       	brne	.+8      	; 0xa94 <usart_init_rs232+0x160>
     a8c:	64 e0       	ldi	r22, 0x04	; 4
     a8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a90:	8d d2       	rcall	.+1306   	; 0xfac <sysclk_enable_module>
     a92:	8f c0       	rjmp	.+286    	; 0xbb2 <usart_init_rs232+0x27e>
     a94:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a96:	fa e0       	ldi	r31, 0x0A	; 10
     a98:	df 07       	cpc	r29, r31
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <usart_init_rs232+0x170>
     a9c:	64 e0       	ldi	r22, 0x04	; 4
     a9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     aa0:	85 d2       	rcall	.+1290   	; 0xfac <sysclk_enable_module>
     aa2:	87 c0       	rjmp	.+270    	; 0xbb2 <usart_init_rs232+0x27e>
     aa4:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     aa6:	8b e0       	ldi	r24, 0x0B	; 11
     aa8:	d8 07       	cpc	r29, r24
     aaa:	21 f4       	brne	.+8      	; 0xab4 <usart_init_rs232+0x180>
     aac:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     aae:	86 e0       	ldi	r24, 0x06	; 6
     ab0:	7d d2       	rcall	.+1274   	; 0xfac <sysclk_enable_module>
     ab2:	7f c0       	rjmp	.+254    	; 0xbb2 <usart_init_rs232+0x27e>
     ab4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     ab6:	e8 e0       	ldi	r30, 0x08	; 8
     ab8:	de 07       	cpc	r29, r30
     aba:	21 f4       	brne	.+8      	; 0xac4 <usart_init_rs232+0x190>
     abc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	75 d2       	rcall	.+1258   	; 0xfac <sysclk_enable_module>
     ac2:	77 c0       	rjmp	.+238    	; 0xbb2 <usart_init_rs232+0x27e>
     ac4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ac6:	f9 e0       	ldi	r31, 0x09	; 9
     ac8:	df 07       	cpc	r29, r31
     aca:	21 f4       	brne	.+8      	; 0xad4 <usart_init_rs232+0x1a0>
     acc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     ace:	84 e0       	ldi	r24, 0x04	; 4
     ad0:	6d d2       	rcall	.+1242   	; 0xfac <sysclk_enable_module>
     ad2:	6f c0       	rjmp	.+222    	; 0xbb2 <usart_init_rs232+0x27e>
     ad4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	d8 07       	cpc	r29, r24
     ada:	21 f4       	brne	.+8      	; 0xae4 <usart_init_rs232+0x1b0>
     adc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     ade:	85 e0       	ldi	r24, 0x05	; 5
     ae0:	65 d2       	rcall	.+1226   	; 0xfac <sysclk_enable_module>
     ae2:	67 c0       	rjmp	.+206    	; 0xbb2 <usart_init_rs232+0x27e>
     ae4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     ae6:	eb e0       	ldi	r30, 0x0B	; 11
     ae8:	de 07       	cpc	r29, r30
     aea:	21 f4       	brne	.+8      	; 0xaf4 <usart_init_rs232+0x1c0>
     aec:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	5d d2       	rcall	.+1210   	; 0xfac <sysclk_enable_module>
     af2:	5f c0       	rjmp	.+190    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     af4:	c0 3a       	cpi	r28, 0xA0	; 160
     af6:	f8 e0       	ldi	r31, 0x08	; 8
     af8:	df 07       	cpc	r29, r31
     afa:	21 f4       	brne	.+8      	; 0xb04 <usart_init_rs232+0x1d0>
     afc:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	55 d2       	rcall	.+1194   	; 0xfac <sysclk_enable_module>
     b02:	57 c0       	rjmp	.+174    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     b04:	c0 3a       	cpi	r28, 0xA0	; 160
     b06:	89 e0       	ldi	r24, 0x09	; 9
     b08:	d8 07       	cpc	r29, r24
     b0a:	21 f4       	brne	.+8      	; 0xb14 <usart_init_rs232+0x1e0>
     b0c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	4d d2       	rcall	.+1178   	; 0xfac <sysclk_enable_module>
     b12:	4f c0       	rjmp	.+158    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b14:	c0 3a       	cpi	r28, 0xA0	; 160
     b16:	ea e0       	ldi	r30, 0x0A	; 10
     b18:	de 07       	cpc	r29, r30
     b1a:	21 f4       	brne	.+8      	; 0xb24 <usart_init_rs232+0x1f0>
     b1c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     b1e:	85 e0       	ldi	r24, 0x05	; 5
     b20:	45 d2       	rcall	.+1162   	; 0xfac <sysclk_enable_module>
     b22:	47 c0       	rjmp	.+142    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     b24:	c0 3a       	cpi	r28, 0xA0	; 160
     b26:	fb e0       	ldi	r31, 0x0B	; 11
     b28:	df 07       	cpc	r29, r31
     b2a:	21 f4       	brne	.+8      	; 0xb34 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b2c:	60 e1       	ldi	r22, 0x10	; 16
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	3d d2       	rcall	.+1146   	; 0xfac <sysclk_enable_module>
     b32:	3f c0       	rjmp	.+126    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b34:	c0 3b       	cpi	r28, 0xB0	; 176
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	d8 07       	cpc	r29, r24
     b3a:	21 f4       	brne	.+8      	; 0xb44 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b3c:	60 e2       	ldi	r22, 0x20	; 32
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	35 d2       	rcall	.+1130   	; 0xfac <sysclk_enable_module>
     b42:	37 c0       	rjmp	.+110    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b44:	c0 3b       	cpi	r28, 0xB0	; 176
     b46:	e9 e0       	ldi	r30, 0x09	; 9
     b48:	de 07       	cpc	r29, r30
     b4a:	21 f4       	brne	.+8      	; 0xb54 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b4c:	60 e2       	ldi	r22, 0x20	; 32
     b4e:	84 e0       	ldi	r24, 0x04	; 4
     b50:	2d d2       	rcall	.+1114   	; 0xfac <sysclk_enable_module>
     b52:	2f c0       	rjmp	.+94     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b54:	c0 3b       	cpi	r28, 0xB0	; 176
     b56:	fa e0       	ldi	r31, 0x0A	; 10
     b58:	df 07       	cpc	r29, r31
     b5a:	21 f4       	brne	.+8      	; 0xb64 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b5c:	60 e2       	ldi	r22, 0x20	; 32
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	25 d2       	rcall	.+1098   	; 0xfac <sysclk_enable_module>
     b62:	27 c0       	rjmp	.+78     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b64:	c0 3b       	cpi	r28, 0xB0	; 176
     b66:	8b e0       	ldi	r24, 0x0B	; 11
     b68:	d8 07       	cpc	r29, r24
     b6a:	21 f4       	brne	.+8      	; 0xb74 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b6c:	60 e2       	ldi	r22, 0x20	; 32
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	1d d2       	rcall	.+1082   	; 0xfac <sysclk_enable_module>
     b72:	1f c0       	rjmp	.+62     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b74:	c0 38       	cpi	r28, 0x80	; 128
     b76:	e4 e0       	ldi	r30, 0x04	; 4
     b78:	de 07       	cpc	r29, r30
     b7a:	21 f4       	brne	.+8      	; 0xb84 <usart_init_rs232+0x250>
     b7c:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	15 d2       	rcall	.+1066   	; 0xfac <sysclk_enable_module>
     b82:	17 c0       	rjmp	.+46     	; 0xbb2 <usart_init_rs232+0x27e>
     b84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b86:	f4 e0       	ldi	r31, 0x04	; 4
     b88:	df 07       	cpc	r29, r31
     b8a:	21 f4       	brne	.+8      	; 0xb94 <usart_init_rs232+0x260>
     b8c:	60 e4       	ldi	r22, 0x40	; 64
     b8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b90:	0d d2       	rcall	.+1050   	; 0xfac <sysclk_enable_module>
     b92:	0f c0       	rjmp	.+30     	; 0xbb2 <usart_init_rs232+0x27e>
     b94:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	d8 07       	cpc	r29, r24
     b9a:	21 f4       	brne	.+8      	; 0xba4 <usart_init_rs232+0x270>
     b9c:	60 e4       	ldi	r22, 0x40	; 64
     b9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     ba0:	05 d2       	rcall	.+1034   	; 0xfac <sysclk_enable_module>
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <usart_init_rs232+0x27e>
     ba4:	c0 3b       	cpi	r28, 0xB0	; 176
     ba6:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     ba8:	de 07       	cpc	r29, r30
     baa:	19 f4       	brne	.+6      	; 0xbb2 <usart_init_rs232+0x27e>
     bac:	60 e4       	ldi	r22, 0x40	; 64
     bae:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     bb0:	fd d1       	rcall	.+1018   	; 0xfac <sysclk_enable_module>
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     bb6:	8d 83       	std	Y+5, r24	; 0x05
     bb8:	f8 01       	movw	r30, r16
     bba:	95 81       	ldd	r25, Z+5	; 0x05
     bbc:	84 81       	ldd	r24, Z+4	; 0x04
     bbe:	89 2b       	or	r24, r25
     bc0:	96 81       	ldd	r25, Z+6	; 0x06
     bc2:	91 11       	cpse	r25, r1
     bc4:	98 e0       	ldi	r25, 0x08	; 8
     bc6:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     bc8:	8d 83       	std	Y+5, r24	; 0x05
     bca:	f8 01       	movw	r30, r16
     bcc:	40 81       	ld	r20, Z
     bce:	51 81       	ldd	r21, Z+1	; 0x01
     bd0:	62 81       	ldd	r22, Z+2	; 0x02
     bd2:	73 81       	ldd	r23, Z+3	; 0x03
     bd4:	00 e0       	ldi	r16, 0x00	; 0
     bd6:	18 e4       	ldi	r17, 0x48	; 72
     bd8:	28 ee       	ldi	r18, 0xE8	; 232
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	ce 01       	movw	r24, r28
     bde:	97 dd       	rcall	.-1234   	; 0x70e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	98 60       	ori	r25, 0x08	; 8
     be4:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	90 61       	ori	r25, 0x10	; 16
     bea:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     bfc:	82 dd       	rcall	.-1276   	; 0x702 <usart_getchar>
     bfe:	88 83       	st	Y, r24
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     c06:	75 cd       	rjmp	.-1302   	; 0x6f2 <usart_putchar>
}
     c08:	08 95       	ret

00000c0a <data_terminal_init>:

#include <asf.h>
#include "uart.h"

void data_terminal_init()
{
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	27 97       	sbiw	r28, 0x07	; 7
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     c18:	60 e1       	ldi	r22, 0x10	; 16
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	c7 d1       	rcall	.+910    	; 0xfac <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     c1e:	e0 e8       	ldi	r30, 0x80	; 128
     c20:	f6 e0       	ldi	r31, 0x06	; 6
     c22:	80 81       	ld	r24, Z
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     c28:	80 ea       	ldi	r24, 0xA0	; 160
     c2a:	9a e0       	ldi	r25, 0x0A	; 10
     c2c:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <stdio_base>
     c30:	90 93 8a 21 	sts	0x218A, r25	; 0x80218a <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	96 e0       	ldi	r25, 0x06	; 6
     c38:	80 93 87 21 	sts	0x2187, r24	; 0x802187 <ptr_put>
     c3c:	90 93 88 21 	sts	0x2188, r25	; 0x802188 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     c40:	8b ef       	ldi	r24, 0xFB	; 251
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	80 93 85 21 	sts	0x2185, r24	; 0x802185 <ptr_get>
     c48:	90 93 86 21 	sts	0x2186, r25	; 0x802186 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c4c:	e6 e0       	ldi	r30, 0x06	; 6
     c4e:	f0 e2       	ldi	r31, 0x20	; 32
     c50:	84 81       	ldd	r24, Z+4	; 0x04
     c52:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c54:	85 81       	ldd	r24, Z+5	; 0x05
     c56:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c58:	86 81       	ldd	r24, Z+6	; 0x06
     c5a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	a2 81       	ldd	r26, Z+2	; 0x02
     c62:	b3 81       	ldd	r27, Z+3	; 0x03
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	ab 83       	std	Y+3, r26	; 0x03
     c6a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     c6c:	60 e1       	ldi	r22, 0x10	; 16
     c6e:	85 e0       	ldi	r24, 0x05	; 5
     c70:	9d d1       	rcall	.+826    	; 0xfac <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c72:	be 01       	movw	r22, r28
     c74:	6f 5f       	subi	r22, 0xFF	; 255
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	80 ea       	ldi	r24, 0xA0	; 160
     c7a:	9a e0       	ldi	r25, 0x0A	; 10
     c7c:	5b de       	rcall	.-842    	; 0x934 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     c7e:	66 e6       	ldi	r22, 0x66	; 102
     c80:	71 e0       	ldi	r23, 0x01	; 1
     c82:	8f e7       	ldi	r24, 0x7F	; 127
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
     c8a:	27 96       	adiw	r28, 0x07	; 7
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <XBEE_uart_init>:

#include <asf.h>
#include <string.h>
#include "xbee.h"

void XBEE_uart_init(void){
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	27 97       	sbiw	r28, 0x07	; 7
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     ca4:	60 e1       	ldi	r22, 0x10	; 16
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	81 d1       	rcall	.+770    	; 0xfac <sysclk_enable_module>
		.charlength =	XBEE_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	XBEE_TERMINAL_SERIAL_PARITY,
		.stopbits	=	XBEE_TERMINAL_SERIAL_STOP_BIT
	};
	
	XBEE_TERMINAL_PORT.DIR |= XBEE_TERMINAL_TX_PIN; // Puts pin to output
     caa:	e0 e4       	ldi	r30, 0x40	; 64
     cac:	f6 e0       	ldi	r31, 0x06	; 6
     cae:	80 81       	ld	r24, Z
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     cb4:	ed e0       	ldi	r30, 0x0D	; 13
     cb6:	f0 e2       	ldi	r31, 0x20	; 32
     cb8:	84 81       	ldd	r24, Z+4	; 0x04
     cba:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     cbc:	85 81       	ldd	r24, Z+5	; 0x05
     cbe:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     cc0:	86 81       	ldd	r24, Z+6	; 0x06
     cc2:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	a2 81       	ldd	r26, Z+2	; 0x02
     cca:	b3 81       	ldd	r27, Z+3	; 0x03
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	ab 83       	std	Y+3, r26	; 0x03
     cd2:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
     cd4:	60 e1       	ldi	r22, 0x10	; 16
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	69 d1       	rcall	.+722    	; 0xfac <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     cda:	be 01       	movw	r22, r28
     cdc:	6f 5f       	subi	r22, 0xFF	; 255
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	80 ea       	ldi	r24, 0xA0	; 160
     ce2:	98 e0       	ldi	r25, 0x08	; 8
     ce4:	27 de       	rcall	.-946    	; 0x934 <usart_init_rs232>
	
	usart_serial_init(XBEE_TERMINAL_SERIAL,&XBEE_config);
}
     ce6:	27 96       	adiw	r28, 0x07	; 7
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <XBEE_write>:

void XBEE_write(char* data){
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(data); i++){
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <XBEE_write+0x1c>
		usart_putchar(XBEE_TERMINAL_SERIAL, (uint8_t) data[i]);
     cfe:	fe 01       	movw	r30, r28
     d00:	e8 0f       	add	r30, r24
     d02:	f9 1f       	adc	r31, r25
     d04:	60 81       	ld	r22, Z
     d06:	80 ea       	ldi	r24, 0xA0	; 160
     d08:	98 e0       	ldi	r25, 0x08	; 8
     d0a:	f3 dc       	rcall	.-1562   	; 0x6f2 <usart_putchar>
	
	usart_serial_init(XBEE_TERMINAL_SERIAL,&XBEE_config);
}

void XBEE_write(char* data){
	for(uint8_t i = 0; i < strlen(data); i++){
     d0c:	1f 5f       	subi	r17, 0xFF	; 255
     d0e:	81 2f       	mov	r24, r17
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	fe 01       	movw	r30, r28
     d14:	01 90       	ld	r0, Z+
     d16:	00 20       	and	r0, r0
     d18:	e9 f7       	brne	.-6      	; 0xd14 <XBEE_write+0x22>
     d1a:	31 97       	sbiw	r30, 0x01	; 1
     d1c:	ec 1b       	sub	r30, r28
     d1e:	fd 0b       	sbc	r31, r29
     d20:	8e 17       	cp	r24, r30
     d22:	9f 07       	cpc	r25, r31
     d24:	60 f3       	brcs	.-40     	; 0xcfe <XBEE_write+0xc>
		usart_putchar(XBEE_TERMINAL_SERIAL, (uint8_t) data[i]);
	}
	usart_putchar(XBEE_TERMINAL_SERIAL, 10);
     d26:	6a e0       	ldi	r22, 0x0A	; 10
     d28:	80 ea       	ldi	r24, 0xA0	; 160
     d2a:	98 e0       	ldi	r25, 0x08	; 8
     d2c:	e2 dc       	rcall	.-1596   	; 0x6f2 <usart_putchar>
}
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	fc 01       	movw	r30, r24
     d3c:	41 15       	cp	r20, r1
     d3e:	51 05       	cpc	r21, r1
     d40:	b1 f1       	breq	.+108    	; 0xdae <rb16_write+0x78>
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	db 01       	movw	r26, r22
     d4e:	a8 0f       	add	r26, r24
     d50:	b9 1f       	adc	r27, r25
     d52:	8d 91       	ld	r24, X+
     d54:	9c 91       	ld	r25, X
     d56:	a2 81       	ldd	r26, Z+2	; 0x02
     d58:	b3 81       	ldd	r27, Z+3	; 0x03
     d5a:	aa 0f       	add	r26, r26
     d5c:	bb 1f       	adc	r27, r27
     d5e:	c6 81       	ldd	r28, Z+6	; 0x06
     d60:	d7 81       	ldd	r29, Z+7	; 0x07
     d62:	ac 0f       	add	r26, r28
     d64:	bd 1f       	adc	r27, r29
     d66:	8d 93       	st	X+, r24
     d68:	9c 93       	st	X, r25
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	82 83       	std	Z+2, r24	; 0x02
     d72:	93 83       	std	Z+3, r25	; 0x03
     d74:	a0 81       	ld	r26, Z
     d76:	b1 81       	ldd	r27, Z+1	; 0x01
     d78:	8a 17       	cp	r24, r26
     d7a:	9b 07       	cpc	r25, r27
     d7c:	11 f4       	brne	.+4      	; 0xd82 <rb16_write+0x4c>
     d7e:	12 82       	std	Z+2, r1	; 0x02
     d80:	13 82       	std	Z+3, r1	; 0x03
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	c4 81       	ldd	r28, Z+4	; 0x04
     d88:	d5 81       	ldd	r29, Z+5	; 0x05
     d8a:	8c 17       	cp	r24, r28
     d8c:	9d 07       	cpc	r25, r29
     d8e:	49 f4       	brne	.+18     	; 0xda2 <rb16_write+0x6c>
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	a8 17       	cp	r26, r24
     d94:	b9 07       	cpc	r27, r25
     d96:	19 f0       	breq	.+6      	; 0xd9e <rb16_write+0x68>
     d98:	84 83       	std	Z+4, r24	; 0x04
     d9a:	95 83       	std	Z+5, r25	; 0x05
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <rb16_write+0x6c>
     d9e:	14 82       	std	Z+4, r1	; 0x04
     da0:	15 82       	std	Z+5, r1	; 0x05
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	82 2f       	mov	r24, r18
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	84 17       	cp	r24, r20
     daa:	95 07       	cpc	r25, r21
     dac:	68 f2       	brcs	.-102    	; 0xd48 <rb16_write+0x12>
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <rb16_init>:
     db4:	fc 01       	movw	r30, r24
     db6:	12 82       	std	Z+2, r1	; 0x02
     db8:	13 82       	std	Z+3, r1	; 0x03
     dba:	14 82       	std	Z+4, r1	; 0x04
     dbc:	15 82       	std	Z+5, r1	; 0x05
     dbe:	66 83       	std	Z+6, r22	; 0x06
     dc0:	77 83       	std	Z+7, r23	; 0x07
     dc2:	40 83       	st	Z, r20
     dc4:	51 83       	std	Z+1, r21	; 0x01
     dc6:	08 95       	ret

00000dc8 <rb16_get_nth>:
     dc8:	dc 01       	movw	r26, r24
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	ed 91       	ld	r30, X+
     dce:	fc 91       	ld	r31, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	cb 01       	movw	r24, r22
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	e8 17       	cp	r30, r24
     dd8:	f9 07       	cpc	r31, r25
     dda:	78 f0       	brcs	.+30     	; 0xdfa <rb16_get_nth+0x32>
     ddc:	e1 50       	subi	r30, 0x01	; 1
     dde:	f0 48       	sbci	r31, 0x80	; 128
     de0:	e6 1b       	sub	r30, r22
     de2:	f7 0b       	sbc	r31, r23
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	16 96       	adiw	r26, 0x06	; 6
     dea:	8d 91       	ld	r24, X+
     dec:	9c 91       	ld	r25, X
     dee:	17 97       	sbiw	r26, 0x07	; 7
     df0:	e8 0f       	add	r30, r24
     df2:	f9 1f       	adc	r31, r25
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	08 95       	ret
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	11 97       	sbiw	r26, 0x01	; 1
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	e1 50       	subi	r30, 0x01	; 1
     e06:	f0 48       	sbci	r31, 0x80	; 128
     e08:	e6 1b       	sub	r30, r22
     e0a:	f7 0b       	sbc	r31, r23
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	16 96       	adiw	r26, 0x06	; 6
     e12:	8d 91       	ld	r24, X+
     e14:	9c 91       	ld	r25, X
     e16:	17 97       	sbiw	r26, 0x07	; 7
     e18:	e8 0f       	add	r30, r24
     e1a:	f9 1f       	adc	r31, r25
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	08 95       	ret

00000e22 <rb32_write>:
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	fc 01       	movw	r30, r24
     e30:	41 15       	cp	r20, r1
     e32:	51 05       	cpc	r21, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <rb32_write+0x16>
     e36:	3f c0       	rjmp	.+126    	; 0xeb6 <rb32_write+0x94>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	db 01       	movw	r26, r22
     e48:	a8 0f       	add	r26, r24
     e4a:	b9 1f       	adc	r27, r25
     e4c:	cd 90       	ld	r12, X+
     e4e:	dd 90       	ld	r13, X+
     e50:	ed 90       	ld	r14, X+
     e52:	fc 90       	ld	r15, X
     e54:	a2 81       	ldd	r26, Z+2	; 0x02
     e56:	b3 81       	ldd	r27, Z+3	; 0x03
     e58:	aa 0f       	add	r26, r26
     e5a:	bb 1f       	adc	r27, r27
     e5c:	aa 0f       	add	r26, r26
     e5e:	bb 1f       	adc	r27, r27
     e60:	86 81       	ldd	r24, Z+6	; 0x06
     e62:	97 81       	ldd	r25, Z+7	; 0x07
     e64:	a8 0f       	add	r26, r24
     e66:	b9 1f       	adc	r27, r25
     e68:	cd 92       	st	X+, r12
     e6a:	dd 92       	st	X+, r13
     e6c:	ed 92       	st	X+, r14
     e6e:	fc 92       	st	X, r15
     e70:	13 97       	sbiw	r26, 0x03	; 3
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	82 83       	std	Z+2, r24	; 0x02
     e7a:	93 83       	std	Z+3, r25	; 0x03
     e7c:	a0 81       	ld	r26, Z
     e7e:	b1 81       	ldd	r27, Z+1	; 0x01
     e80:	8a 17       	cp	r24, r26
     e82:	9b 07       	cpc	r25, r27
     e84:	11 f4       	brne	.+4      	; 0xe8a <rb32_write+0x68>
     e86:	12 82       	std	Z+2, r1	; 0x02
     e88:	13 82       	std	Z+3, r1	; 0x03
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	c4 81       	ldd	r28, Z+4	; 0x04
     e90:	d5 81       	ldd	r29, Z+5	; 0x05
     e92:	8c 17       	cp	r24, r28
     e94:	9d 07       	cpc	r25, r29
     e96:	49 f4       	brne	.+18     	; 0xeaa <rb32_write+0x88>
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	a8 17       	cp	r26, r24
     e9c:	b9 07       	cpc	r27, r25
     e9e:	19 f0       	breq	.+6      	; 0xea6 <rb32_write+0x84>
     ea0:	84 83       	std	Z+4, r24	; 0x04
     ea2:	95 83       	std	Z+5, r25	; 0x05
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <rb32_write+0x88>
     ea6:	14 82       	std	Z+4, r1	; 0x04
     ea8:	15 82       	std	Z+5, r1	; 0x05
     eaa:	2f 5f       	subi	r18, 0xFF	; 255
     eac:	82 2f       	mov	r24, r18
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	84 17       	cp	r24, r20
     eb2:	95 07       	cpc	r25, r21
     eb4:	20 f2       	brcs	.-120    	; 0xe3e <rb32_write+0x1c>
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	cf 90       	pop	r12
     ec2:	08 95       	ret

00000ec4 <rb32_init>:
     ec4:	fc 01       	movw	r30, r24
     ec6:	12 82       	std	Z+2, r1	; 0x02
     ec8:	13 82       	std	Z+3, r1	; 0x03
     eca:	14 82       	std	Z+4, r1	; 0x04
     ecc:	15 82       	std	Z+5, r1	; 0x05
     ece:	66 83       	std	Z+6, r22	; 0x06
     ed0:	77 83       	std	Z+7, r23	; 0x07
     ed2:	40 83       	st	Z, r20
     ed4:	51 83       	std	Z+1, r21	; 0x01
     ed6:	08 95       	ret

00000ed8 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     ed8:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     eda:	12 96       	adiw	r26, 0x02	; 2
     edc:	ed 91       	ld	r30, X+
     ede:	fc 91       	ld	r31, X
     ee0:	13 97       	sbiw	r26, 0x03	; 3
     ee2:	cb 01       	movw	r24, r22
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	e8 17       	cp	r30, r24
     ee8:	f9 07       	cpc	r31, r25
     eea:	98 f0       	brcs	.+38     	; 0xf12 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     eec:	e1 50       	subi	r30, 0x01	; 1
     eee:	f0 4c       	sbci	r31, 0xC0	; 192
     ef0:	e6 1b       	sub	r30, r22
     ef2:	f7 0b       	sbc	r31, r23
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	ee 0f       	add	r30, r30
     efa:	ff 1f       	adc	r31, r31
     efc:	16 96       	adiw	r26, 0x06	; 6
     efe:	8d 91       	ld	r24, X+
     f00:	9c 91       	ld	r25, X
     f02:	17 97       	sbiw	r26, 0x07	; 7
     f04:	e8 0f       	add	r30, r24
     f06:	f9 1f       	adc	r31, r25
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     f12:	2d 91       	ld	r18, X+
     f14:	3c 91       	ld	r19, X
     f16:	11 97       	sbiw	r26, 0x01	; 1
     f18:	e2 0f       	add	r30, r18
     f1a:	f3 1f       	adc	r31, r19
     f1c:	e1 50       	subi	r30, 0x01	; 1
     f1e:	f0 4c       	sbci	r31, 0xC0	; 192
     f20:	e6 1b       	sub	r30, r22
     f22:	f7 0b       	sbc	r31, r23
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	16 96       	adiw	r26, 0x06	; 6
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	17 97       	sbiw	r26, 0x07	; 7
     f34:	e8 0f       	add	r30, r24
     f36:	f9 1f       	adc	r31, r25
     f38:	60 81       	ld	r22, Z
     f3a:	71 81       	ldd	r23, Z+1	; 0x01
     f3c:	82 81       	ldd	r24, Z+2	; 0x02
     f3e:	93 81       	ldd	r25, Z+3	; 0x03
}
     f40:	08 95       	ret

00000f42 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	1f 92       	push	r1
     f48:	1f 92       	push	r1
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     f54:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     f58:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     f5c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     f60:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     f64:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     f68:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f6c:	8f b7       	in	r24, 0x3f	; 63
     f6e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f70:	f8 94       	cli
	return flags;
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f74:	e0 e5       	ldi	r30, 0x50	; 80
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	82 60       	ori	r24, 0x02	; 2
     f7c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f7e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f80:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f82:	81 ff       	sbrs	r24, 1
     f84:	fd cf       	rjmp	.-6      	; 0xf80 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	80 e4       	ldi	r24, 0x40	; 64
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	25 d0       	rcall	.+74     	; 0xfd8 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f8e:	8f b7       	in	r24, 0x3f	; 63
     f90:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f92:	f8 94       	cli
	return flags;
     f94:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     f96:	e0 e5       	ldi	r30, 0x50	; 80
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8e 7f       	andi	r24, 0xFE	; 254
     f9e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fa0:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	1f 92       	push	r1
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fb6:	9f b7       	in	r25, 0x3f	; 63
     fb8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     fba:	f8 94       	cli
	return flags;
     fbc:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     fbe:	e8 2f       	mov	r30, r24
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	e0 59       	subi	r30, 0x90	; 144
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	60 95       	com	r22
     fc8:	80 81       	ld	r24, Z
     fca:	68 23       	and	r22, r24
     fcc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fce:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     fd0:	0f 90       	pop	r0
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     fd8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     fda:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     fdc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     fde:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     fe0:	60 83       	st	Z, r22
	ret                             // Return to caller
     fe2:	08 95       	ret

00000fe4 <__portable_avr_delay_cycles>:
	TCD1.CCA = (uint16_t) ((TCD1.PER) * (servo_on_time_us / 1000.0)); // makes the waveform be created for a duty cycle
}

void servo_timer_alt(void){
	TCD1.CCA = (uint16_t) ((TCD0.PER) * (servo_on_time_us / 1000.0)); // makes the waveform be created for a duty cycle
}
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <__portable_avr_delay_cycles+0xa>
     fe6:	61 50       	subi	r22, 0x01	; 1
     fe8:	71 09       	sbc	r23, r1
     fea:	81 09       	sbc	r24, r1
     fec:	91 09       	sbc	r25, r1
     fee:	61 15       	cp	r22, r1
     ff0:	71 05       	cpc	r23, r1
     ff2:	81 05       	cpc	r24, r1
     ff4:	91 05       	cpc	r25, r1
     ff6:	b9 f7       	brne	.-18     	; 0xfe6 <__portable_avr_delay_cycles+0x2>
     ff8:	08 95       	ret

00000ffa <xbee_init>:
     ffa:	4d de       	rcall	.-870    	; 0xc96 <XBEE_uart_init>
     ffc:	6b ea       	ldi	r22, 0xAB	; 171
     ffe:	79 e2       	ldi	r23, 0x29	; 41
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	ef df       	rcall	.-34     	; 0xfe4 <__portable_avr_delay_cycles>
    1006:	80 e1       	ldi	r24, 0x10	; 16
    1008:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    100c:	08 95       	ret

0000100e <get_altitude>:
    100e:	4f 92       	push	r4
    1010:	5f 92       	push	r5
    1012:	6f 92       	push	r6
    1014:	7f 92       	push	r7
    1016:	8f 92       	push	r8
    1018:	9f 92       	push	r9
    101a:	af 92       	push	r10
    101c:	bf 92       	push	r11
    101e:	cf 92       	push	r12
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	2b 01       	movw	r4, r22
    1028:	3c 01       	movw	r6, r24
    102a:	c0 90 1b 20 	lds	r12, 0x201B	; 0x80201b <L>
    102e:	d0 90 1c 20 	lds	r13, 0x201C	; 0x80201c <L+0x1>
    1032:	e0 90 1d 20 	lds	r14, 0x201D	; 0x80201d <L+0x2>
    1036:	f0 90 1e 20 	lds	r15, 0x201E	; 0x80201e <L+0x3>
    103a:	20 91 1f 20 	lds	r18, 0x201F	; 0x80201f <R>
    103e:	30 91 20 20 	lds	r19, 0x2020	; 0x802020 <R+0x1>
    1042:	40 91 21 20 	lds	r20, 0x2021	; 0x802021 <R+0x2>
    1046:	50 91 22 20 	lds	r21, 0x2022	; 0x802022 <R+0x3>
    104a:	c7 01       	movw	r24, r14
    104c:	b6 01       	movw	r22, r12
    104e:	04 d5       	rcall	.+2568   	; 0x1a58 <__mulsf3>
    1050:	20 91 17 20 	lds	r18, 0x2017	; 0x802017 <g_0>
    1054:	30 91 18 20 	lds	r19, 0x2018	; 0x802018 <g_0+0x1>
    1058:	40 91 19 20 	lds	r20, 0x2019	; 0x802019 <g_0+0x2>
    105c:	50 91 1a 20 	lds	r21, 0x201A	; 0x80201a <g_0+0x3>
    1060:	ac d3       	rcall	.+1880   	; 0x17ba <__divsf3>
    1062:	4b 01       	movw	r8, r22
    1064:	5c 01       	movw	r10, r24
    1066:	a3 01       	movw	r20, r6
    1068:	92 01       	movw	r18, r4
    106a:	60 91 27 20 	lds	r22, 0x2027	; 0x802027 <ground_p>
    106e:	70 91 28 20 	lds	r23, 0x2028	; 0x802028 <ground_p+0x1>
    1072:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <ground_p+0x2>
    1076:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <ground_p+0x3>
    107a:	9f d3       	rcall	.+1854   	; 0x17ba <__divsf3>
    107c:	a5 01       	movw	r20, r10
    107e:	94 01       	movw	r18, r8
    1080:	4e d5       	rcall	.+2716   	; 0x1b1e <pow>
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	2e d3       	rcall	.+1628   	; 0x16e8 <__subsf3>
    108c:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <ground_t>
    1090:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <ground_t+0x1>
    1094:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <ground_t+0x2>
    1098:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <ground_t+0x3>
    109c:	dd d4       	rcall	.+2490   	; 0x1a58 <__mulsf3>
    109e:	a7 01       	movw	r20, r14
    10a0:	96 01       	movw	r18, r12
    10a2:	8b d3       	rcall	.+1814   	; 0x17ba <__divsf3>
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	7f 90       	pop	r7
    10b6:	6f 90       	pop	r6
    10b8:	5f 90       	pop	r5
    10ba:	4f 90       	pop	r4
    10bc:	08 95       	ret

000010be <get_velocity>:
    10be:	2f 92       	push	r2
    10c0:	3f 92       	push	r3
    10c2:	4f 92       	push	r4
    10c4:	5f 92       	push	r5
    10c6:	6f 92       	push	r6
    10c8:	7f 92       	push	r7
    10ca:	8f 92       	push	r8
    10cc:	9f 92       	push	r9
    10ce:	af 92       	push	r10
    10d0:	bf 92       	push	r11
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <get_velocity+0x26>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <get_velocity+0x28>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	6c 01       	movw	r12, r24
    10ec:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    10f0:	88 23       	and	r24, r24
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <get_velocity+0x38>
    10f4:	68 c0       	rjmp	.+208    	; 0x11c6 <get_velocity+0x108>
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	10 e0       	ldi	r17, 0x00	; 0
    10fa:	41 2c       	mov	r4, r1
    10fc:	51 2c       	mov	r5, r1
    10fe:	32 01       	movw	r6, r4
    1100:	86 2e       	mov	r8, r22
    1102:	91 2c       	mov	r9, r1
    1104:	a1 2c       	mov	r10, r1
    1106:	b1 2c       	mov	r11, r1
    1108:	89 82       	std	Y+1, r8	; 0x01
    110a:	9a 82       	std	Y+2, r9	; 0x02
    110c:	ab 82       	std	Y+3, r10	; 0x03
    110e:	bc 82       	std	Y+4, r11	; 0x04
    1110:	b8 01       	movw	r22, r16
    1112:	c6 01       	movw	r24, r12
    1114:	59 de       	rcall	.-846    	; 0xdc8 <rb16_get_nth>
    1116:	5c 01       	movw	r10, r24
    1118:	18 01       	movw	r2, r16
    111a:	2f ef       	ldi	r18, 0xFF	; 255
    111c:	22 1a       	sub	r2, r18
    111e:	32 0a       	sbc	r3, r18
    1120:	b1 01       	movw	r22, r2
    1122:	c6 01       	movw	r24, r12
    1124:	51 de       	rcall	.-862    	; 0xdc8 <rb16_get_nth>
    1126:	7c 01       	movw	r14, r24
    1128:	b8 01       	movw	r22, r16
    112a:	6e 5f       	subi	r22, 0xFE	; 254
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	c6 01       	movw	r24, r12
    1130:	4b de       	rcall	.-874    	; 0xdc8 <rb16_get_nth>
    1132:	a5 01       	movw	r20, r10
    1134:	bb 0c       	add	r11, r11
    1136:	66 0b       	sbc	r22, r22
    1138:	77 0b       	sbc	r23, r23
    113a:	8a 01       	movw	r16, r20
    113c:	9b 01       	movw	r18, r22
    113e:	00 0f       	add	r16, r16
    1140:	11 1f       	adc	r17, r17
    1142:	22 1f       	adc	r18, r18
    1144:	33 1f       	adc	r19, r19
    1146:	40 0f       	add	r20, r16
    1148:	51 1f       	adc	r21, r17
    114a:	62 1f       	adc	r22, r18
    114c:	73 1f       	adc	r23, r19
    114e:	87 01       	movw	r16, r14
    1150:	ff 0c       	add	r15, r15
    1152:	22 0b       	sbc	r18, r18
    1154:	33 0b       	sbc	r19, r19
    1156:	78 01       	movw	r14, r16
    1158:	89 01       	movw	r16, r18
    115a:	ee 0c       	add	r14, r14
    115c:	ff 1c       	adc	r15, r15
    115e:	00 1f       	adc	r16, r16
    1160:	11 1f       	adc	r17, r17
    1162:	ee 0c       	add	r14, r14
    1164:	ff 1c       	adc	r15, r15
    1166:	00 1f       	adc	r16, r16
    1168:	11 1f       	adc	r17, r17
    116a:	4a 01       	movw	r8, r20
    116c:	5b 01       	movw	r10, r22
    116e:	8e 18       	sub	r8, r14
    1170:	9f 08       	sbc	r9, r15
    1172:	a0 0a       	sbc	r10, r16
    1174:	b1 0a       	sbc	r11, r17
    1176:	ac 01       	movw	r20, r24
    1178:	99 0f       	add	r25, r25
    117a:	66 0b       	sbc	r22, r22
    117c:	77 0b       	sbc	r23, r23
    117e:	d5 01       	movw	r26, r10
    1180:	c4 01       	movw	r24, r8
    1182:	84 0f       	add	r24, r20
    1184:	95 1f       	adc	r25, r21
    1186:	a6 1f       	adc	r26, r22
    1188:	b7 1f       	adc	r27, r23
    118a:	9c 01       	movw	r18, r24
    118c:	ad 01       	movw	r20, r26
    118e:	69 81       	ldd	r22, Y+1	; 0x01
    1190:	7a 81       	ldd	r23, Y+2	; 0x02
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	28 d6       	rcall	.+3152   	; 0x1de8 <__mulsi3>
    1198:	ab d3       	rcall	.+1878   	; 0x18f0 <__floatsisf>
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	5f e3       	ldi	r21, 0x3F	; 63
    11a2:	5a d4       	rcall	.+2228   	; 0x1a58 <__mulsf3>
    11a4:	9b 01       	movw	r18, r22
    11a6:	ac 01       	movw	r20, r24
    11a8:	c3 01       	movw	r24, r6
    11aa:	b2 01       	movw	r22, r4
    11ac:	9e d2       	rcall	.+1340   	; 0x16ea <__addsf3>
    11ae:	2b 01       	movw	r4, r22
    11b0:	3c 01       	movw	r6, r24
    11b2:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    11b6:	81 01       	movw	r16, r2
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	22 16       	cp	r2, r18
    11be:	33 06       	cpc	r3, r19
    11c0:	08 f4       	brcc	.+2      	; 0x11c4 <get_velocity+0x106>
    11c2:	a6 cf       	rjmp	.-180    	; 0x1110 <get_velocity+0x52>
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <get_velocity+0x10e>
    11c6:	41 2c       	mov	r4, r1
    11c8:	51 2c       	mov	r5, r1
    11ca:	32 01       	movw	r6, r4
    11cc:	68 2f       	mov	r22, r24
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	8d d3       	rcall	.+1818   	; 0x18f0 <__floatsisf>
    11d6:	9b 01       	movw	r18, r22
    11d8:	ac 01       	movw	r20, r24
    11da:	c3 01       	movw	r24, r6
    11dc:	b2 01       	movw	r22, r4
    11de:	ed d2       	rcall	.+1498   	; 0x17ba <__divsf3>
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	48 ec       	ldi	r20, 0xC8	; 200
    11e6:	52 e4       	ldi	r21, 0x42	; 66
    11e8:	e8 d2       	rcall	.+1488   	; 0x17ba <__divsf3>
    11ea:	26 96       	adiw	r28, 0x06	; 6
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	df 90       	pop	r13
    11fe:	cf 90       	pop	r12
    1200:	bf 90       	pop	r11
    1202:	af 90       	pop	r10
    1204:	9f 90       	pop	r9
    1206:	8f 90       	pop	r8
    1208:	7f 90       	pop	r7
    120a:	6f 90       	pop	r6
    120c:	5f 90       	pop	r5
    120e:	4f 90       	pop	r4
    1210:	3f 90       	pop	r3
    1212:	2f 90       	pop	r2
    1214:	08 95       	ret

00001216 <data_check>:
    1216:	3f 92       	push	r3
    1218:	4f 92       	push	r4
    121a:	5f 92       	push	r5
    121c:	6f 92       	push	r6
    121e:	7f 92       	push	r7
    1220:	8f 92       	push	r8
    1222:	9f 92       	push	r9
    1224:	af 92       	push	r10
    1226:	bf 92       	push	r11
    1228:	cf 92       	push	r12
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	00 d0       	rcall	.+0      	; 0x123a <data_check+0x24>
    123a:	00 d0       	rcall	.+0      	; 0x123c <data_check+0x26>
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	8c 01       	movw	r16, r24
    1242:	19 82       	std	Y+1, r1	; 0x01
    1244:	1a 82       	std	Y+2, r1	; 0x02
    1246:	c1 2c       	mov	r12, r1
    1248:	d1 2c       	mov	r13, r1
    124a:	76 01       	movw	r14, r12
    124c:	69 81       	ldd	r22, Y+1	; 0x01
    124e:	7a 81       	ldd	r23, Y+2	; 0x02
    1250:	c8 01       	movw	r24, r16
    1252:	42 de       	rcall	.-892    	; 0xed8 <rb32_get_nth>
    1254:	4b 01       	movw	r8, r22
    1256:	5c 01       	movw	r10, r24
    1258:	21 ea       	ldi	r18, 0xA1	; 161
    125a:	82 1a       	sub	r8, r18
    125c:	26 e8       	ldi	r18, 0x86	; 134
    125e:	92 0a       	sbc	r9, r18
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	a2 0a       	sbc	r10, r18
    1264:	b1 08       	sbc	r11, r1
    1266:	2f ed       	ldi	r18, 0xDF	; 223
    1268:	82 16       	cp	r8, r18
    126a:	2f e0       	ldi	r18, 0x0F	; 15
    126c:	92 06       	cpc	r9, r18
    126e:	27 e9       	ldi	r18, 0x97	; 151
    1270:	a2 06       	cpc	r10, r18
    1272:	b1 04       	cpc	r11, r1
    1274:	68 f4       	brcc	.+26     	; 0x1290 <data_check+0x7a>
    1276:	3c d3       	rcall	.+1656   	; 0x18f0 <__floatsisf>
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 ea       	ldi	r20, 0xA0	; 160
    127e:	50 e4       	ldi	r21, 0x40	; 64
    1280:	9c d2       	rcall	.+1336   	; 0x17ba <__divsf3>
    1282:	9b 01       	movw	r18, r22
    1284:	ac 01       	movw	r20, r24
    1286:	c7 01       	movw	r24, r14
    1288:	b6 01       	movw	r22, r12
    128a:	2f d2       	rcall	.+1118   	; 0x16ea <__addsf3>
    128c:	6b 01       	movw	r12, r22
    128e:	7c 01       	movw	r14, r24
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	05 97       	sbiw	r24, 0x05	; 5
    129c:	b9 f6       	brne	.-82     	; 0x124c <data_check+0x36>
    129e:	19 82       	std	Y+1, r1	; 0x01
    12a0:	1a 82       	std	Y+2, r1	; 0x02
    12a2:	81 2c       	mov	r8, r1
    12a4:	91 2c       	mov	r9, r1
    12a6:	54 01       	movw	r10, r8
    12a8:	69 81       	ldd	r22, Y+1	; 0x01
    12aa:	7a 81       	ldd	r23, Y+2	; 0x02
    12ac:	c8 01       	movw	r24, r16
    12ae:	14 de       	rcall	.-984    	; 0xed8 <rb32_get_nth>
    12b0:	2b 01       	movw	r4, r22
    12b2:	3c 01       	movw	r6, r24
    12b4:	21 ea       	ldi	r18, 0xA1	; 161
    12b6:	42 1a       	sub	r4, r18
    12b8:	26 e8       	ldi	r18, 0x86	; 134
    12ba:	52 0a       	sbc	r5, r18
    12bc:	21 e0       	ldi	r18, 0x01	; 1
    12be:	62 0a       	sbc	r6, r18
    12c0:	71 08       	sbc	r7, r1
    12c2:	2f ed       	ldi	r18, 0xDF	; 223
    12c4:	42 16       	cp	r4, r18
    12c6:	2f e0       	ldi	r18, 0x0F	; 15
    12c8:	52 06       	cpc	r5, r18
    12ca:	27 e9       	ldi	r18, 0x97	; 151
    12cc:	62 06       	cpc	r6, r18
    12ce:	71 04       	cpc	r7, r1
    12d0:	70 f4       	brcc	.+28     	; 0x12ee <data_check+0xd8>
    12d2:	0e d3       	rcall	.+1564   	; 0x18f0 <__floatsisf>
    12d4:	a7 01       	movw	r20, r14
    12d6:	96 01       	movw	r18, r12
    12d8:	07 d2       	rcall	.+1038   	; 0x16e8 <__subsf3>
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	bc d3       	rcall	.+1912   	; 0x1a58 <__mulsf3>
    12e0:	9b 01       	movw	r18, r22
    12e2:	ac 01       	movw	r20, r24
    12e4:	c5 01       	movw	r24, r10
    12e6:	b4 01       	movw	r22, r8
    12e8:	00 d2       	rcall	.+1024   	; 0x16ea <__addsf3>
    12ea:	4b 01       	movw	r8, r22
    12ec:	5c 01       	movw	r10, r24
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	05 97       	sbiw	r24, 0x05	; 5
    12fa:	b1 f6       	brne	.-84     	; 0x12a8 <data_check+0x92>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5e e3       	ldi	r21, 0x3E	; 62
    1304:	c5 01       	movw	r24, r10
    1306:	b4 01       	movw	r22, r8
    1308:	a7 d3       	rcall	.+1870   	; 0x1a58 <__mulsf3>
    130a:	69 83       	std	Y+1, r22	; 0x01
    130c:	7a 83       	std	Y+2, r23	; 0x02
    130e:	8b 83       	std	Y+3, r24	; 0x03
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	1d 82       	std	Y+5, r1	; 0x05
    1314:	1e 82       	std	Y+6, r1	; 0x06
    1316:	31 2c       	mov	r3, r1
    1318:	41 2c       	mov	r4, r1
    131a:	51 2c       	mov	r5, r1
    131c:	32 01       	movw	r6, r4
    131e:	6d 81       	ldd	r22, Y+5	; 0x05
    1320:	7e 81       	ldd	r23, Y+6	; 0x06
    1322:	c8 01       	movw	r24, r16
    1324:	d9 dd       	rcall	.-1102   	; 0xed8 <rb32_get_nth>
    1326:	4b 01       	movw	r8, r22
    1328:	5c 01       	movw	r10, r24
    132a:	21 ea       	ldi	r18, 0xA1	; 161
    132c:	82 1a       	sub	r8, r18
    132e:	26 e8       	ldi	r18, 0x86	; 134
    1330:	92 0a       	sbc	r9, r18
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	a2 0a       	sbc	r10, r18
    1336:	b1 08       	sbc	r11, r1
    1338:	2f ed       	ldi	r18, 0xDF	; 223
    133a:	82 16       	cp	r8, r18
    133c:	2f e0       	ldi	r18, 0x0F	; 15
    133e:	92 06       	cpc	r9, r18
    1340:	27 e9       	ldi	r18, 0x97	; 151
    1342:	a2 06       	cpc	r10, r18
    1344:	b1 04       	cpc	r11, r1
    1346:	20 f5       	brcc	.+72     	; 0x1390 <data_check+0x17a>
    1348:	d3 d2       	rcall	.+1446   	; 0x18f0 <__floatsisf>
    134a:	4b 01       	movw	r8, r22
    134c:	5c 01       	movw	r10, r24
    134e:	a7 01       	movw	r20, r14
    1350:	96 01       	movw	r18, r12
    1352:	ca d1       	rcall	.+916    	; 0x16e8 <__subsf3>
    1354:	9a d2       	rcall	.+1332   	; 0x188a <__fixsfsi>
    1356:	9b 01       	movw	r18, r22
    1358:	77 23       	and	r23, r23
    135a:	24 f4       	brge	.+8      	; 0x1364 <data_check+0x14e>
    135c:	22 27       	eor	r18, r18
    135e:	33 27       	eor	r19, r19
    1360:	26 1b       	sub	r18, r22
    1362:	37 0b       	sbc	r19, r23
    1364:	b9 01       	movw	r22, r18
    1366:	33 0f       	add	r19, r19
    1368:	88 0b       	sbc	r24, r24
    136a:	99 0b       	sbc	r25, r25
    136c:	c1 d2       	rcall	.+1410   	; 0x18f0 <__floatsisf>
    136e:	9b 01       	movw	r18, r22
    1370:	ac 01       	movw	r20, r24
    1372:	69 81       	ldd	r22, Y+1	; 0x01
    1374:	7a 81       	ldd	r23, Y+2	; 0x02
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	6a d3       	rcall	.+1748   	; 0x1a50 <__gesf2>
    137c:	88 23       	and	r24, r24
    137e:	44 f0       	brlt	.+16     	; 0x1390 <data_check+0x17a>
    1380:	a5 01       	movw	r20, r10
    1382:	94 01       	movw	r18, r8
    1384:	c3 01       	movw	r24, r6
    1386:	b2 01       	movw	r22, r4
    1388:	b0 d1       	rcall	.+864    	; 0x16ea <__addsf3>
    138a:	2b 01       	movw	r4, r22
    138c:	3c 01       	movw	r6, r24
    138e:	33 94       	inc	r3
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	05 97       	sbiw	r24, 0x05	; 5
    139c:	09 f0       	breq	.+2      	; 0x13a0 <data_check+0x18a>
    139e:	bf cf       	rjmp	.-130    	; 0x131e <data_check+0x108>
    13a0:	33 20       	and	r3, r3
    13a2:	59 f0       	breq	.+22     	; 0x13ba <data_check+0x1a4>
    13a4:	63 2d       	mov	r22, r3
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9f d2       	rcall	.+1342   	; 0x18ec <__floatunsisf>
    13ae:	9b 01       	movw	r18, r22
    13b0:	ac 01       	movw	r20, r24
    13b2:	c3 01       	movw	r24, r6
    13b4:	b2 01       	movw	r22, r4
    13b6:	01 d2       	rcall	.+1026   	; 0x17ba <__divsf3>
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <data_check+0x1ac>
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	80 e8       	ldi	r24, 0x80	; 128
    13c0:	9f eb       	ldi	r25, 0xBF	; 191
    13c2:	26 96       	adiw	r28, 0x06	; 6
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	cf 90       	pop	r12
    13d8:	bf 90       	pop	r11
    13da:	af 90       	pop	r10
    13dc:	9f 90       	pop	r9
    13de:	8f 90       	pop	r8
    13e0:	7f 90       	pop	r7
    13e2:	6f 90       	pop	r6
    13e4:	5f 90       	pop	r5
    13e6:	4f 90       	pop	r4
    13e8:	3f 90       	pop	r3
    13ea:	08 95       	ret

000013ec <data_collect>:
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	00 d0       	rcall	.+0      	; 0x1402 <data_collect+0x16>
    1402:	00 d0       	rcall	.+0      	; 0x1404 <data_collect+0x18>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	5c 01       	movw	r10, r24
    140a:	8b 01       	movw	r16, r22
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	96 e7       	ldi	r25, 0x76	; 118
    1410:	af e0       	ldi	r26, 0x0F	; 15
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	ab 83       	std	Y+3, r26	; 0x03
    141a:	bc 83       	std	Y+4, r27	; 0x04
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	be 01       	movw	r22, r28
    1422:	6f 5f       	subi	r22, 0xFF	; 255
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	c8 01       	movw	r24, r16
    1428:	fc dc       	rcall	.-1544   	; 0xe22 <rb32_write>
    142a:	c8 01       	movw	r24, r16
    142c:	f4 de       	rcall	.-536    	; 0x1216 <data_check>
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	c1 d1       	rcall	.+898    	; 0x17ba <__divsf3>
    1438:	6b 01       	movw	r12, r22
    143a:	7c 01       	movw	r14, r24
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f eb       	ldi	r21, 0xBF	; 191
    1444:	b6 d1       	rcall	.+876    	; 0x17b2 <__cmpsf2>
    1446:	88 23       	and	r24, r24
    1448:	71 f1       	breq	.+92     	; 0x14a6 <data_collect+0xba>
    144a:	c0 92 7c 21 	sts	0x217C, r12	; 0x80217c <press>
    144e:	d0 92 7d 21 	sts	0x217D, r13	; 0x80217d <press+0x1>
    1452:	e0 92 7e 21 	sts	0x217E, r14	; 0x80217e <press+0x2>
    1456:	f0 92 7f 21 	sts	0x217F, r15	; 0x80217f <press+0x3>
    145a:	c7 01       	movw	r24, r14
    145c:	b6 01       	movw	r22, r12
    145e:	d7 dd       	rcall	.-1106   	; 0x100e <get_altitude>
    1460:	60 93 74 21 	sts	0x2174, r22	; 0x802174 <alt>
    1464:	70 93 75 21 	sts	0x2175, r23	; 0x802175 <alt+0x1>
    1468:	80 93 76 21 	sts	0x2176, r24	; 0x802176 <alt+0x2>
    146c:	90 93 77 21 	sts	0x2177, r25	; 0x802177 <alt+0x3>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	48 ec       	ldi	r20, 0xC8	; 200
    1476:	52 e4       	ldi	r21, 0x42	; 66
    1478:	ef d2       	rcall	.+1502   	; 0x1a58 <__mulsf3>
    147a:	07 d2       	rcall	.+1038   	; 0x188a <__fixsfsi>
    147c:	6d 83       	std	Y+5, r22	; 0x05
    147e:	7e 83       	std	Y+6, r23	; 0x06
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	be 01       	movw	r22, r28
    1486:	6b 5f       	subi	r22, 0xFB	; 251
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	c5 01       	movw	r24, r10
    148c:	54 dc       	rcall	.-1880   	; 0xd36 <rb16_write>
    148e:	60 91 15 20 	lds	r22, 0x2015	; 0x802015 <rate>
    1492:	c5 01       	movw	r24, r10
    1494:	14 de       	rcall	.-984    	; 0x10be <get_velocity>
    1496:	60 93 70 21 	sts	0x2170, r22	; 0x802170 <__data_end>
    149a:	70 93 71 21 	sts	0x2171, r23	; 0x802171 <__data_end+0x1>
    149e:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <__data_end+0x2>
    14a2:	90 93 73 21 	sts	0x2173, r25	; 0x802173 <__data_end+0x3>
    14a6:	83 e3       	ldi	r24, 0x33	; 51
    14a8:	93 e1       	ldi	r25, 0x13	; 19
    14aa:	a0 e9       	ldi	r26, 0x90	; 144
    14ac:	b3 e4       	ldi	r27, 0x43	; 67
    14ae:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <temp>
    14b2:	90 93 79 21 	sts	0x2179, r25	; 0x802179 <temp+0x1>
    14b6:	a0 93 7a 21 	sts	0x217A, r26	; 0x80217a <temp+0x2>
    14ba:	b0 93 7b 21 	sts	0x217B, r27	; 0x80217b <temp+0x3>
    14be:	26 96       	adiw	r28, 0x06	; 6
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	08 95       	ret

000014da <clock_init>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    14da:	61 e0       	ldi	r22, 0x01	; 1
    14dc:	85 e0       	ldi	r24, 0x05	; 5
    14de:	66 dd       	rcall	.-1332   	; 0xfac <sysclk_enable_module>

void clock_init(void){
	sysclk_enable_peripheral_clock(&TCE0); // starts peripheral clock

	TCE0.CTRLA = 0x07; // divisor set to 1024
    14e0:	e0 e0       	ldi	r30, 0x00	; 0
    14e2:	fa e0       	ldi	r31, 0x0A	; 10
    14e4:	87 e0       	ldi	r24, 0x07	; 7
    14e6:	80 83       	st	Z, r24
	TCE0.PER = 31249; // 1 Hz
    14e8:	81 e1       	ldi	r24, 0x11	; 17
    14ea:	9a e7       	ldi	r25, 0x7A	; 122
    14ec:	86 a3       	std	Z+38, r24	; 0x26
    14ee:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	86 83       	std	Z+6, r24	; 0x06
    14f4:	08 95       	ret

000014f6 <system_init>:


// Sensor functions
void system_init(void){
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    14f6:	25 dd       	rcall	.-1462   	; 0xf42 <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    14f8:	6b ea       	ldi	r22, 0xAB	; 171
    14fa:	79 e2       	ldi	r23, 0x29	; 41
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	71 dd       	rcall	.-1310   	; 0xfe4 <__portable_avr_delay_cycles>
	sei();
    1502:	78 94       	sei
	
	// Initialization of pins
	PORTC.DIR = 0xBB; // makes Port C have pins, 7, 5, 4, 3, 1, 0 be output (0b10111011)
    1504:	e0 e4       	ldi	r30, 0x40	; 64
    1506:	f6 e0       	ldi	r31, 0x06	; 6
    1508:	8b eb       	ldi	r24, 0xBB	; 187
    150a:	80 83       	st	Z, r24
	PORTC.OUT = 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    150c:	80 e1       	ldi	r24, 0x10	; 16
    150e:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL = PMIC_LOLVLEN_bm; // enables lo level interrupts
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Driver Initialization
	data_terminal_init();
    1516:	79 db       	rcall	.-2318   	; 0xc0a <data_terminal_init>
	delay_ms(2);
    1518:	6b ea       	ldi	r22, 0xAB	; 171
    151a:	79 e2       	ldi	r23, 0x29	; 41
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	61 dd       	rcall	.-1342   	; 0xfe4 <__portable_avr_delay_cycles>
	
//	thermistor_init();
	delay_ms(2);
    1522:	6b ea       	ldi	r22, 0xAB	; 171
    1524:	79 e2       	ldi	r23, 0x29	; 41
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	5c dd       	rcall	.-1352   	; 0xfe4 <__portable_avr_delay_cycles>
	
//	spi_init();
	delay_ms(2);
    152c:	6b ea       	ldi	r22, 0xAB	; 171
    152e:	79 e2       	ldi	r23, 0x29	; 41
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	57 dd       	rcall	.-1362   	; 0xfe4 <__portable_avr_delay_cycles>
	
//	pressure_init();
	delay_ms(2);
    1536:	6b ea       	ldi	r22, 0xAB	; 171
    1538:	79 e2       	ldi	r23, 0x29	; 41
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	52 dd       	rcall	.-1372   	; 0xfe4 <__portable_avr_delay_cycles>
	
	xbee_init();
    1540:	5c dd       	rcall	.-1352   	; 0xffa <xbee_init>
    1542:	cb df       	rcall	.-106    	; 0x14da <clock_init>
	//gps_init();
	
	clock_init();
    1544:	66 e5       	ldi	r22, 0x56	; 86
    1546:	70 ed       	ldi	r23, 0xD0	; 208
//	servo_timer_init();
	
	delay_ms(10);
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	4b cd       	rjmp	.-1386   	; 0xfe4 <__portable_avr_delay_cycles>
    154e:	08 95       	ret

00001550 <main>:
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	cd b7       	in	r28, 0x3d	; 61
double angle = 0;			// Angle of Bonus Direction	


////////////////////////////// Functions ///////////////////////////////
int main (void)
{
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	cc 54       	subi	r28, 0x4C	; 76
    155a:	d1 09       	sbc	r29, r1
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	de bf       	out	0x3e, r29	; 62
	system_init();
    1560:	ca df       	rcall	.-108    	; 0x14f6 <system_init>
	
	printf("time, packets, rate, pressure, temp, altitude, velocity, state\n");
    1562:	8b ed       	ldi	r24, 0xDB	; 219
    1564:	90 e2       	ldi	r25, 0x20	; 32
    1566:	ed d4       	rcall	.+2522   	; 0x1f42 <puts>
	
	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    1568:	be 01       	movw	r22, r28
    156a:	6f 5f       	subi	r22, 0xFF	; 255
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	84 e1       	ldi	r24, 0x14	; 20
    1570:	fb 01       	movw	r30, r22
    1572:	11 92       	st	Z+, r1
    1574:	8a 95       	dec	r24
    1576:	e9 f7       	brne	.-6      	; 0x1572 <main+0x22>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    1578:	4a e0       	ldi	r20, 0x0A	; 10
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	ce 01       	movw	r24, r28
    157e:	45 96       	adiw	r24, 0x15	; 21
    1580:	19 dc       	rcall	.-1998   	; 0xdb4 <rb16_init>
	
	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    1582:	be 01       	movw	r22, r28
    1584:	63 5e       	subi	r22, 0xE3	; 227
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	88 e2       	ldi	r24, 0x28	; 40
    158a:	fb 01       	movw	r30, r22
    158c:	11 92       	st	Z+, r1
    158e:	8a 95       	dec	r24
    1590:	e9 f7       	brne	.-6      	; 0x158c <main+0x3c>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    1592:	4a e0       	ldi	r20, 0x0A	; 10
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	ce 01       	movw	r24, r28
    1598:	8b 5b       	subi	r24, 0xBB	; 187
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	93 dc       	rcall	.-1754   	; 0xec4 <rb32_init>
	
	while(1){
		// Check Sensors
		data_collect(&altitudes,&pressures);
    159e:	be 01       	movw	r22, r28
    15a0:	6b 5b       	subi	r22, 0xBB	; 187
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	ce 01       	movw	r24, r28
    15a6:	45 96       	adiw	r24, 0x15	; 21
    15a8:	21 df       	rcall	.-446    	; 0x13ec <data_collect>
		
		// Checks State
		//state_check();
		
		//Gives each flight state their unique tasks
		switch(state){
    15aa:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <state>
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	10 f0       	brcs	.+4      	; 0x15b6 <main+0x66>
			case 2:
				break;
			case 3:
				break;
			default:
				state = 0;
    15b2:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <state>
				break;
		}	
		
		packets++;
    15b6:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <packets>
    15ba:	90 91 81 21 	lds	r25, 0x2181	; 0x802181 <packets+0x1>
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <packets>
    15c4:	90 93 81 21 	sts	0x2181, r25	; 0x802181 <packets+0x1>
		if(timer != 0){
    15c8:	60 91 82 21 	lds	r22, 0x2182	; 0x802182 <timer>
    15cc:	70 91 83 21 	lds	r23, 0x2183	; 0x802183 <timer+0x1>
    15d0:	61 15       	cp	r22, r1
    15d2:	71 05       	cpc	r23, r1
			rate = packets / timer;
    15d4:	29 f0       	breq	.+10     	; 0x15e0 <main+0x90>
    15d6:	17 d4       	rcall	.+2094   	; 0x1e06 <__udivmodhi4>
    15d8:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <rate>
    15dc:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <rate+0x1>
		//XBEE_write(str);
		
		
		char* mess = "5343,26,20,100,97065,15\0";
		//printf("Sending...\n%s\n", mess);
		XBEE_write(mess);
    15e0:	8b eb       	ldi	r24, 0xBB	; 187
    15e2:	90 e2       	ldi	r25, 0x20	; 32
		
		
		delay_ms(500);
    15e4:	86 db       	rcall	.-2292   	; 0xcf2 <XBEE_write>
    15e6:	6b ea       	ldi	r22, 0xAB	; 171
    15e8:	70 eb       	ldi	r23, 0xB0	; 176
    15ea:	88 e2       	ldi	r24, 0x28	; 40
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	fa dc       	rcall	.-1548   	; 0xfe4 <__portable_avr_delay_cycles>
	}
    15f0:	d6 cf       	rjmp	.-84     	; 0x159e <main+0x4e>

000015f2 <__vector_47>:
	TCE0.CTRLA = 0x07; // divisor set to 1024
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

ISR(TCE0_OVF_vect){
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	11 24       	eor	r1, r1
    15fc:	08 b6       	in	r0, 0x38	; 56
    15fe:	0f 92       	push	r0
    1600:	18 be       	out	0x38, r1	; 56
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
	timer++;
    1606:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <timer>
    160a:	90 91 83 21 	lds	r25, 0x2183	; 0x802183 <timer+0x1>
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <timer>
    1614:	90 93 83 21 	sts	0x2183, r25	; 0x802183 <timer+0x1>
}
    1618:	9f 91       	pop	r25
    161a:	8f 91       	pop	r24
    161c:	0f 90       	pop	r0
    161e:	08 be       	out	0x38, r0	; 56
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	0f 90       	pop	r0
    1626:	1f 90       	pop	r1
    1628:	18 95       	reti

0000162a <__vector_25>:

ISR(USARTC0_RXC_vect){
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	08 b6       	in	r0, 0x38	; 56
    1636:	0f 92       	push	r0
    1638:	18 be       	out	0x38, r1	; 56
    163a:	09 b6       	in	r0, 0x39	; 57
    163c:	0f 92       	push	r0
    163e:	19 be       	out	0x39, r1	; 57
    1640:	0b b6       	in	r0, 0x3b	; 59
    1642:	0f 92       	push	r0
    1644:	1b be       	out	0x3b, r1	; 59
    1646:	2f 93       	push	r18
    1648:	3f 93       	push	r19
    164a:	4f 93       	push	r20
    164c:	5f 93       	push	r21
    164e:	6f 93       	push	r22
    1650:	7f 93       	push	r23
    1652:	8f 93       	push	r24
    1654:	9f 93       	push	r25
    1656:	af 93       	push	r26
    1658:	bf 93       	push	r27
    165a:	cf 93       	push	r28
    165c:	ef 93       	push	r30
    165e:	ff 93       	push	r31
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    1660:	80 ea       	ldi	r24, 0xA0	; 160
    1662:	98 e0       	ldi	r25, 0x08	; 8
    1664:	4e d8       	rcall	.-3940   	; 0x702 <usart_getchar>
    1666:	c8 2f       	mov	r28, r24
	printf("%c", c);
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	66 d4       	rcall	.+2252   	; 0x1f38 <putchar>
	
	switch(c){
    166c:	cc 3c       	cpi	r28, 0xCC	; 204
    166e:	c9 f0       	breq	.+50     	; 0x16a2 <__vector_25+0x78>
    1670:	28 f4       	brcc	.+10     	; 0x167c <__vector_25+0x52>
    1672:	ca 3a       	cpi	r28, 0xAA	; 170
    1674:	f1 f0       	breq	.+60     	; 0x16b2 <__vector_25+0x88>
    1676:	cb 3b       	cpi	r28, 0xBB	; 187
    1678:	c1 f0       	breq	.+48     	; 0x16aa <__vector_25+0x80>
    167a:	1e c0       	rjmp	.+60     	; 0x16b8 <__vector_25+0x8e>
    167c:	ce 3e       	cpi	r28, 0xEE	; 238
    167e:	49 f0       	breq	.+18     	; 0x1692 <__vector_25+0x68>
    1680:	cf 3f       	cpi	r28, 0xFF	; 255
    1682:	19 f0       	breq	.+6      	; 0x168a <__vector_25+0x60>
    1684:	cd 3d       	cpi	r28, 0xDD	; 221
    1686:	c1 f4       	brne	.+48     	; 0x16b8 <__vector_25+0x8e>
    1688:	08 c0       	rjmp	.+16     	; 0x169a <__vector_25+0x70>
		case RESET:
			printf("RESET\n");
    168a:	8a e1       	ldi	r24, 0x1A	; 26
    168c:	91 e2       	ldi	r25, 0x21	; 33
    168e:	59 d4       	rcall	.+2226   	; 0x1f42 <puts>
			break;
    1690:	13 c0       	rjmp	.+38     	; 0x16b8 <__vector_25+0x8e>
		case CALIBRATE:
			printf("CALIBRATE\n");
    1692:	80 e2       	ldi	r24, 0x20	; 32
    1694:	91 e2       	ldi	r25, 0x21	; 33
    1696:	55 d4       	rcall	.+2218   	; 0x1f42 <puts>
			break;
		case CALIBRATE_CAMERA:
			printf("CALIBRATE_CAMERA\n");
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <__vector_25+0x8e>
    169a:	8a e2       	ldi	r24, 0x2A	; 42
    169c:	91 e2       	ldi	r25, 0x21	; 33
			break;
    169e:	51 d4       	rcall	.+2210   	; 0x1f42 <puts>
		case CALIBRATE_ALTITUDE:
			printf("CALIBRATE_ALTITUDE\n");
    16a0:	0b c0       	rjmp	.+22     	; 0x16b8 <__vector_25+0x8e>
    16a2:	8b e3       	ldi	r24, 0x3B	; 59
    16a4:	91 e2       	ldi	r25, 0x21	; 33
			break;
    16a6:	4d d4       	rcall	.+2202   	; 0x1f42 <puts>
		case CALIBRATE_ANGLE:
			printf("CALIBRATE_ANGLE\n");
    16a8:	07 c0       	rjmp	.+14     	; 0x16b8 <__vector_25+0x8e>
    16aa:	8e e4       	ldi	r24, 0x4E	; 78
    16ac:	91 e2       	ldi	r25, 0x21	; 33
			break;
    16ae:	49 d4       	rcall	.+2194   	; 0x1f42 <puts>
		case SEND_GPS_LOCATION:
			printf("SEND_GPS_LOCATION\n");
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <__vector_25+0x8e>
    16b2:	8e e5       	ldi	r24, 0x5E	; 94
    16b4:	91 e2       	ldi	r25, 0x21	; 33
    16b6:	45 d4       	rcall	.+2186   	; 0x1f42 <puts>
			break;
	}
}
    16b8:	ff 91       	pop	r31
    16ba:	ef 91       	pop	r30
    16bc:	cf 91       	pop	r28
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0b be       	out	0x3b, r0	; 59
    16d6:	0f 90       	pop	r0
    16d8:	09 be       	out	0x39, r0	; 57
    16da:	0f 90       	pop	r0
    16dc:	08 be       	out	0x38, r0	; 56
    16de:	0f 90       	pop	r0
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	0f 90       	pop	r0
    16e4:	1f 90       	pop	r1
    16e6:	18 95       	reti

000016e8 <__subsf3>:
    16e8:	50 58       	subi	r21, 0x80	; 128

000016ea <__addsf3>:
    16ea:	bb 27       	eor	r27, r27
    16ec:	aa 27       	eor	r26, r26
    16ee:	0e d0       	rcall	.+28     	; 0x170c <__addsf3x>
    16f0:	75 c1       	rjmp	.+746    	; 0x19dc <__fp_round>
    16f2:	66 d1       	rcall	.+716    	; 0x19c0 <__fp_pscA>
    16f4:	30 f0       	brcs	.+12     	; 0x1702 <__addsf3+0x18>
    16f6:	6b d1       	rcall	.+726    	; 0x19ce <__fp_pscB>
    16f8:	20 f0       	brcs	.+8      	; 0x1702 <__addsf3+0x18>
    16fa:	31 f4       	brne	.+12     	; 0x1708 <__addsf3+0x1e>
    16fc:	9f 3f       	cpi	r25, 0xFF	; 255
    16fe:	11 f4       	brne	.+4      	; 0x1704 <__addsf3+0x1a>
    1700:	1e f4       	brtc	.+6      	; 0x1708 <__addsf3+0x1e>
    1702:	5b c1       	rjmp	.+694    	; 0x19ba <__fp_nan>
    1704:	0e f4       	brtc	.+2      	; 0x1708 <__addsf3+0x1e>
    1706:	e0 95       	com	r30
    1708:	e7 fb       	bst	r30, 7
    170a:	51 c1       	rjmp	.+674    	; 0x19ae <__fp_inf>

0000170c <__addsf3x>:
    170c:	e9 2f       	mov	r30, r25
    170e:	77 d1       	rcall	.+750    	; 0x19fe <__fp_split3>
    1710:	80 f3       	brcs	.-32     	; 0x16f2 <__addsf3+0x8>
    1712:	ba 17       	cp	r27, r26
    1714:	62 07       	cpc	r22, r18
    1716:	73 07       	cpc	r23, r19
    1718:	84 07       	cpc	r24, r20
    171a:	95 07       	cpc	r25, r21
    171c:	18 f0       	brcs	.+6      	; 0x1724 <__addsf3x+0x18>
    171e:	71 f4       	brne	.+28     	; 0x173c <__addsf3x+0x30>
    1720:	9e f5       	brtc	.+102    	; 0x1788 <__addsf3x+0x7c>
    1722:	8f c1       	rjmp	.+798    	; 0x1a42 <__fp_zero>
    1724:	0e f4       	brtc	.+2      	; 0x1728 <__addsf3x+0x1c>
    1726:	e0 95       	com	r30
    1728:	0b 2e       	mov	r0, r27
    172a:	ba 2f       	mov	r27, r26
    172c:	a0 2d       	mov	r26, r0
    172e:	0b 01       	movw	r0, r22
    1730:	b9 01       	movw	r22, r18
    1732:	90 01       	movw	r18, r0
    1734:	0c 01       	movw	r0, r24
    1736:	ca 01       	movw	r24, r20
    1738:	a0 01       	movw	r20, r0
    173a:	11 24       	eor	r1, r1
    173c:	ff 27       	eor	r31, r31
    173e:	59 1b       	sub	r21, r25
    1740:	99 f0       	breq	.+38     	; 0x1768 <__addsf3x+0x5c>
    1742:	59 3f       	cpi	r21, 0xF9	; 249
    1744:	50 f4       	brcc	.+20     	; 0x175a <__addsf3x+0x4e>
    1746:	50 3e       	cpi	r21, 0xE0	; 224
    1748:	68 f1       	brcs	.+90     	; 0x17a4 <__addsf3x+0x98>
    174a:	1a 16       	cp	r1, r26
    174c:	f0 40       	sbci	r31, 0x00	; 0
    174e:	a2 2f       	mov	r26, r18
    1750:	23 2f       	mov	r18, r19
    1752:	34 2f       	mov	r19, r20
    1754:	44 27       	eor	r20, r20
    1756:	58 5f       	subi	r21, 0xF8	; 248
    1758:	f3 cf       	rjmp	.-26     	; 0x1740 <__addsf3x+0x34>
    175a:	46 95       	lsr	r20
    175c:	37 95       	ror	r19
    175e:	27 95       	ror	r18
    1760:	a7 95       	ror	r26
    1762:	f0 40       	sbci	r31, 0x00	; 0
    1764:	53 95       	inc	r21
    1766:	c9 f7       	brne	.-14     	; 0x175a <__addsf3x+0x4e>
    1768:	7e f4       	brtc	.+30     	; 0x1788 <__addsf3x+0x7c>
    176a:	1f 16       	cp	r1, r31
    176c:	ba 0b       	sbc	r27, r26
    176e:	62 0b       	sbc	r22, r18
    1770:	73 0b       	sbc	r23, r19
    1772:	84 0b       	sbc	r24, r20
    1774:	ba f0       	brmi	.+46     	; 0x17a4 <__addsf3x+0x98>
    1776:	91 50       	subi	r25, 0x01	; 1
    1778:	a1 f0       	breq	.+40     	; 0x17a2 <__addsf3x+0x96>
    177a:	ff 0f       	add	r31, r31
    177c:	bb 1f       	adc	r27, r27
    177e:	66 1f       	adc	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	88 1f       	adc	r24, r24
    1784:	c2 f7       	brpl	.-16     	; 0x1776 <__addsf3x+0x6a>
    1786:	0e c0       	rjmp	.+28     	; 0x17a4 <__addsf3x+0x98>
    1788:	ba 0f       	add	r27, r26
    178a:	62 1f       	adc	r22, r18
    178c:	73 1f       	adc	r23, r19
    178e:	84 1f       	adc	r24, r20
    1790:	48 f4       	brcc	.+18     	; 0x17a4 <__addsf3x+0x98>
    1792:	87 95       	ror	r24
    1794:	77 95       	ror	r23
    1796:	67 95       	ror	r22
    1798:	b7 95       	ror	r27
    179a:	f7 95       	ror	r31
    179c:	9e 3f       	cpi	r25, 0xFE	; 254
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <__addsf3x+0x96>
    17a0:	b3 cf       	rjmp	.-154    	; 0x1708 <__addsf3+0x1e>
    17a2:	93 95       	inc	r25
    17a4:	88 0f       	add	r24, r24
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <__addsf3x+0x9e>
    17a8:	99 27       	eor	r25, r25
    17aa:	ee 0f       	add	r30, r30
    17ac:	97 95       	ror	r25
    17ae:	87 95       	ror	r24
    17b0:	08 95       	ret

000017b2 <__cmpsf2>:
    17b2:	d9 d0       	rcall	.+434    	; 0x1966 <__fp_cmp>
    17b4:	08 f4       	brcc	.+2      	; 0x17b8 <__cmpsf2+0x6>
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	08 95       	ret

000017ba <__divsf3>:
    17ba:	0c d0       	rcall	.+24     	; 0x17d4 <__divsf3x>
    17bc:	0f c1       	rjmp	.+542    	; 0x19dc <__fp_round>
    17be:	07 d1       	rcall	.+526    	; 0x19ce <__fp_pscB>
    17c0:	40 f0       	brcs	.+16     	; 0x17d2 <__divsf3+0x18>
    17c2:	fe d0       	rcall	.+508    	; 0x19c0 <__fp_pscA>
    17c4:	30 f0       	brcs	.+12     	; 0x17d2 <__divsf3+0x18>
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <__divsf3+0x16>
    17c8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <__divsf3+0x18>
    17cc:	f0 c0       	rjmp	.+480    	; 0x19ae <__fp_inf>
    17ce:	51 11       	cpse	r21, r1
    17d0:	39 c1       	rjmp	.+626    	; 0x1a44 <__fp_szero>
    17d2:	f3 c0       	rjmp	.+486    	; 0x19ba <__fp_nan>

000017d4 <__divsf3x>:
    17d4:	14 d1       	rcall	.+552    	; 0x19fe <__fp_split3>
    17d6:	98 f3       	brcs	.-26     	; 0x17be <__divsf3+0x4>

000017d8 <__divsf3_pse>:
    17d8:	99 23       	and	r25, r25
    17da:	c9 f3       	breq	.-14     	; 0x17ce <__divsf3+0x14>
    17dc:	55 23       	and	r21, r21
    17de:	b1 f3       	breq	.-20     	; 0x17cc <__divsf3+0x12>
    17e0:	95 1b       	sub	r25, r21
    17e2:	55 0b       	sbc	r21, r21
    17e4:	bb 27       	eor	r27, r27
    17e6:	aa 27       	eor	r26, r26
    17e8:	62 17       	cp	r22, r18
    17ea:	73 07       	cpc	r23, r19
    17ec:	84 07       	cpc	r24, r20
    17ee:	38 f0       	brcs	.+14     	; 0x17fe <__divsf3_pse+0x26>
    17f0:	9f 5f       	subi	r25, 0xFF	; 255
    17f2:	5f 4f       	sbci	r21, 0xFF	; 255
    17f4:	22 0f       	add	r18, r18
    17f6:	33 1f       	adc	r19, r19
    17f8:	44 1f       	adc	r20, r20
    17fa:	aa 1f       	adc	r26, r26
    17fc:	a9 f3       	breq	.-22     	; 0x17e8 <__divsf3_pse+0x10>
    17fe:	33 d0       	rcall	.+102    	; 0x1866 <__divsf3_pse+0x8e>
    1800:	0e 2e       	mov	r0, r30
    1802:	3a f0       	brmi	.+14     	; 0x1812 <__divsf3_pse+0x3a>
    1804:	e0 e8       	ldi	r30, 0x80	; 128
    1806:	30 d0       	rcall	.+96     	; 0x1868 <__divsf3_pse+0x90>
    1808:	91 50       	subi	r25, 0x01	; 1
    180a:	50 40       	sbci	r21, 0x00	; 0
    180c:	e6 95       	lsr	r30
    180e:	00 1c       	adc	r0, r0
    1810:	ca f7       	brpl	.-14     	; 0x1804 <__divsf3_pse+0x2c>
    1812:	29 d0       	rcall	.+82     	; 0x1866 <__divsf3_pse+0x8e>
    1814:	fe 2f       	mov	r31, r30
    1816:	27 d0       	rcall	.+78     	; 0x1866 <__divsf3_pse+0x8e>
    1818:	66 0f       	add	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	bb 1f       	adc	r27, r27
    1820:	26 17       	cp	r18, r22
    1822:	37 07       	cpc	r19, r23
    1824:	48 07       	cpc	r20, r24
    1826:	ab 07       	cpc	r26, r27
    1828:	b0 e8       	ldi	r27, 0x80	; 128
    182a:	09 f0       	breq	.+2      	; 0x182e <__divsf3_pse+0x56>
    182c:	bb 0b       	sbc	r27, r27
    182e:	80 2d       	mov	r24, r0
    1830:	bf 01       	movw	r22, r30
    1832:	ff 27       	eor	r31, r31
    1834:	93 58       	subi	r25, 0x83	; 131
    1836:	5f 4f       	sbci	r21, 0xFF	; 255
    1838:	2a f0       	brmi	.+10     	; 0x1844 <__divsf3_pse+0x6c>
    183a:	9e 3f       	cpi	r25, 0xFE	; 254
    183c:	51 05       	cpc	r21, r1
    183e:	68 f0       	brcs	.+26     	; 0x185a <__divsf3_pse+0x82>
    1840:	b6 c0       	rjmp	.+364    	; 0x19ae <__fp_inf>
    1842:	00 c1       	rjmp	.+512    	; 0x1a44 <__fp_szero>
    1844:	5f 3f       	cpi	r21, 0xFF	; 255
    1846:	ec f3       	brlt	.-6      	; 0x1842 <__divsf3_pse+0x6a>
    1848:	98 3e       	cpi	r25, 0xE8	; 232
    184a:	dc f3       	brlt	.-10     	; 0x1842 <__divsf3_pse+0x6a>
    184c:	86 95       	lsr	r24
    184e:	77 95       	ror	r23
    1850:	67 95       	ror	r22
    1852:	b7 95       	ror	r27
    1854:	f7 95       	ror	r31
    1856:	9f 5f       	subi	r25, 0xFF	; 255
    1858:	c9 f7       	brne	.-14     	; 0x184c <__divsf3_pse+0x74>
    185a:	88 0f       	add	r24, r24
    185c:	91 1d       	adc	r25, r1
    185e:	96 95       	lsr	r25
    1860:	87 95       	ror	r24
    1862:	97 f9       	bld	r25, 7
    1864:	08 95       	ret
    1866:	e1 e0       	ldi	r30, 0x01	; 1
    1868:	66 0f       	add	r22, r22
    186a:	77 1f       	adc	r23, r23
    186c:	88 1f       	adc	r24, r24
    186e:	bb 1f       	adc	r27, r27
    1870:	62 17       	cp	r22, r18
    1872:	73 07       	cpc	r23, r19
    1874:	84 07       	cpc	r24, r20
    1876:	ba 07       	cpc	r27, r26
    1878:	20 f0       	brcs	.+8      	; 0x1882 <__divsf3_pse+0xaa>
    187a:	62 1b       	sub	r22, r18
    187c:	73 0b       	sbc	r23, r19
    187e:	84 0b       	sbc	r24, r20
    1880:	ba 0b       	sbc	r27, r26
    1882:	ee 1f       	adc	r30, r30
    1884:	88 f7       	brcc	.-30     	; 0x1868 <__divsf3_pse+0x90>
    1886:	e0 95       	com	r30
    1888:	08 95       	ret

0000188a <__fixsfsi>:
    188a:	04 d0       	rcall	.+8      	; 0x1894 <__fixunssfsi>
    188c:	68 94       	set
    188e:	b1 11       	cpse	r27, r1
    1890:	d9 c0       	rjmp	.+434    	; 0x1a44 <__fp_szero>
    1892:	08 95       	ret

00001894 <__fixunssfsi>:
    1894:	bc d0       	rcall	.+376    	; 0x1a0e <__fp_splitA>
    1896:	88 f0       	brcs	.+34     	; 0x18ba <__fixunssfsi+0x26>
    1898:	9f 57       	subi	r25, 0x7F	; 127
    189a:	90 f0       	brcs	.+36     	; 0x18c0 <__fixunssfsi+0x2c>
    189c:	b9 2f       	mov	r27, r25
    189e:	99 27       	eor	r25, r25
    18a0:	b7 51       	subi	r27, 0x17	; 23
    18a2:	a0 f0       	brcs	.+40     	; 0x18cc <__fixunssfsi+0x38>
    18a4:	d1 f0       	breq	.+52     	; 0x18da <__fixunssfsi+0x46>
    18a6:	66 0f       	add	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	88 1f       	adc	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	1a f0       	brmi	.+6      	; 0x18b6 <__fixunssfsi+0x22>
    18b0:	ba 95       	dec	r27
    18b2:	c9 f7       	brne	.-14     	; 0x18a6 <__fixunssfsi+0x12>
    18b4:	12 c0       	rjmp	.+36     	; 0x18da <__fixunssfsi+0x46>
    18b6:	b1 30       	cpi	r27, 0x01	; 1
    18b8:	81 f0       	breq	.+32     	; 0x18da <__fixunssfsi+0x46>
    18ba:	c3 d0       	rcall	.+390    	; 0x1a42 <__fp_zero>
    18bc:	b1 e0       	ldi	r27, 0x01	; 1
    18be:	08 95       	ret
    18c0:	c0 c0       	rjmp	.+384    	; 0x1a42 <__fp_zero>
    18c2:	67 2f       	mov	r22, r23
    18c4:	78 2f       	mov	r23, r24
    18c6:	88 27       	eor	r24, r24
    18c8:	b8 5f       	subi	r27, 0xF8	; 248
    18ca:	39 f0       	breq	.+14     	; 0x18da <__fixunssfsi+0x46>
    18cc:	b9 3f       	cpi	r27, 0xF9	; 249
    18ce:	cc f3       	brlt	.-14     	; 0x18c2 <__fixunssfsi+0x2e>
    18d0:	86 95       	lsr	r24
    18d2:	77 95       	ror	r23
    18d4:	67 95       	ror	r22
    18d6:	b3 95       	inc	r27
    18d8:	d9 f7       	brne	.-10     	; 0x18d0 <__fixunssfsi+0x3c>
    18da:	3e f4       	brtc	.+14     	; 0x18ea <__fixunssfsi+0x56>
    18dc:	90 95       	com	r25
    18de:	80 95       	com	r24
    18e0:	70 95       	com	r23
    18e2:	61 95       	neg	r22
    18e4:	7f 4f       	sbci	r23, 0xFF	; 255
    18e6:	8f 4f       	sbci	r24, 0xFF	; 255
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	08 95       	ret

000018ec <__floatunsisf>:
    18ec:	e8 94       	clt
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <__floatsisf+0x12>

000018f0 <__floatsisf>:
    18f0:	97 fb       	bst	r25, 7
    18f2:	3e f4       	brtc	.+14     	; 0x1902 <__floatsisf+0x12>
    18f4:	90 95       	com	r25
    18f6:	80 95       	com	r24
    18f8:	70 95       	com	r23
    18fa:	61 95       	neg	r22
    18fc:	7f 4f       	sbci	r23, 0xFF	; 255
    18fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1900:	9f 4f       	sbci	r25, 0xFF	; 255
    1902:	99 23       	and	r25, r25
    1904:	a9 f0       	breq	.+42     	; 0x1930 <__floatsisf+0x40>
    1906:	f9 2f       	mov	r31, r25
    1908:	96 e9       	ldi	r25, 0x96	; 150
    190a:	bb 27       	eor	r27, r27
    190c:	93 95       	inc	r25
    190e:	f6 95       	lsr	r31
    1910:	87 95       	ror	r24
    1912:	77 95       	ror	r23
    1914:	67 95       	ror	r22
    1916:	b7 95       	ror	r27
    1918:	f1 11       	cpse	r31, r1
    191a:	f8 cf       	rjmp	.-16     	; 0x190c <__floatsisf+0x1c>
    191c:	fa f4       	brpl	.+62     	; 0x195c <__floatsisf+0x6c>
    191e:	bb 0f       	add	r27, r27
    1920:	11 f4       	brne	.+4      	; 0x1926 <__floatsisf+0x36>
    1922:	60 ff       	sbrs	r22, 0
    1924:	1b c0       	rjmp	.+54     	; 0x195c <__floatsisf+0x6c>
    1926:	6f 5f       	subi	r22, 0xFF	; 255
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	8f 4f       	sbci	r24, 0xFF	; 255
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	16 c0       	rjmp	.+44     	; 0x195c <__floatsisf+0x6c>
    1930:	88 23       	and	r24, r24
    1932:	11 f0       	breq	.+4      	; 0x1938 <__floatsisf+0x48>
    1934:	96 e9       	ldi	r25, 0x96	; 150
    1936:	11 c0       	rjmp	.+34     	; 0x195a <__floatsisf+0x6a>
    1938:	77 23       	and	r23, r23
    193a:	21 f0       	breq	.+8      	; 0x1944 <__floatsisf+0x54>
    193c:	9e e8       	ldi	r25, 0x8E	; 142
    193e:	87 2f       	mov	r24, r23
    1940:	76 2f       	mov	r23, r22
    1942:	05 c0       	rjmp	.+10     	; 0x194e <__floatsisf+0x5e>
    1944:	66 23       	and	r22, r22
    1946:	71 f0       	breq	.+28     	; 0x1964 <__floatsisf+0x74>
    1948:	96 e8       	ldi	r25, 0x86	; 134
    194a:	86 2f       	mov	r24, r22
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	2a f0       	brmi	.+10     	; 0x195c <__floatsisf+0x6c>
    1952:	9a 95       	dec	r25
    1954:	66 0f       	add	r22, r22
    1956:	77 1f       	adc	r23, r23
    1958:	88 1f       	adc	r24, r24
    195a:	da f7       	brpl	.-10     	; 0x1952 <__floatsisf+0x62>
    195c:	88 0f       	add	r24, r24
    195e:	96 95       	lsr	r25
    1960:	87 95       	ror	r24
    1962:	97 f9       	bld	r25, 7
    1964:	08 95       	ret

00001966 <__fp_cmp>:
    1966:	99 0f       	add	r25, r25
    1968:	00 08       	sbc	r0, r0
    196a:	55 0f       	add	r21, r21
    196c:	aa 0b       	sbc	r26, r26
    196e:	e0 e8       	ldi	r30, 0x80	; 128
    1970:	fe ef       	ldi	r31, 0xFE	; 254
    1972:	16 16       	cp	r1, r22
    1974:	17 06       	cpc	r1, r23
    1976:	e8 07       	cpc	r30, r24
    1978:	f9 07       	cpc	r31, r25
    197a:	c0 f0       	brcs	.+48     	; 0x19ac <__fp_cmp+0x46>
    197c:	12 16       	cp	r1, r18
    197e:	13 06       	cpc	r1, r19
    1980:	e4 07       	cpc	r30, r20
    1982:	f5 07       	cpc	r31, r21
    1984:	98 f0       	brcs	.+38     	; 0x19ac <__fp_cmp+0x46>
    1986:	62 1b       	sub	r22, r18
    1988:	73 0b       	sbc	r23, r19
    198a:	84 0b       	sbc	r24, r20
    198c:	95 0b       	sbc	r25, r21
    198e:	39 f4       	brne	.+14     	; 0x199e <__fp_cmp+0x38>
    1990:	0a 26       	eor	r0, r26
    1992:	61 f0       	breq	.+24     	; 0x19ac <__fp_cmp+0x46>
    1994:	23 2b       	or	r18, r19
    1996:	24 2b       	or	r18, r20
    1998:	25 2b       	or	r18, r21
    199a:	21 f4       	brne	.+8      	; 0x19a4 <__fp_cmp+0x3e>
    199c:	08 95       	ret
    199e:	0a 26       	eor	r0, r26
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <__fp_cmp+0x3e>
    19a2:	a1 40       	sbci	r26, 0x01	; 1
    19a4:	a6 95       	lsr	r26
    19a6:	8f ef       	ldi	r24, 0xFF	; 255
    19a8:	81 1d       	adc	r24, r1
    19aa:	81 1d       	adc	r24, r1
    19ac:	08 95       	ret

000019ae <__fp_inf>:
    19ae:	97 f9       	bld	r25, 7
    19b0:	9f 67       	ori	r25, 0x7F	; 127
    19b2:	80 e8       	ldi	r24, 0x80	; 128
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	08 95       	ret

000019ba <__fp_nan>:
    19ba:	9f ef       	ldi	r25, 0xFF	; 255
    19bc:	80 ec       	ldi	r24, 0xC0	; 192
    19be:	08 95       	ret

000019c0 <__fp_pscA>:
    19c0:	00 24       	eor	r0, r0
    19c2:	0a 94       	dec	r0
    19c4:	16 16       	cp	r1, r22
    19c6:	17 06       	cpc	r1, r23
    19c8:	18 06       	cpc	r1, r24
    19ca:	09 06       	cpc	r0, r25
    19cc:	08 95       	ret

000019ce <__fp_pscB>:
    19ce:	00 24       	eor	r0, r0
    19d0:	0a 94       	dec	r0
    19d2:	12 16       	cp	r1, r18
    19d4:	13 06       	cpc	r1, r19
    19d6:	14 06       	cpc	r1, r20
    19d8:	05 06       	cpc	r0, r21
    19da:	08 95       	ret

000019dc <__fp_round>:
    19dc:	09 2e       	mov	r0, r25
    19de:	03 94       	inc	r0
    19e0:	00 0c       	add	r0, r0
    19e2:	11 f4       	brne	.+4      	; 0x19e8 <__fp_round+0xc>
    19e4:	88 23       	and	r24, r24
    19e6:	52 f0       	brmi	.+20     	; 0x19fc <__fp_round+0x20>
    19e8:	bb 0f       	add	r27, r27
    19ea:	40 f4       	brcc	.+16     	; 0x19fc <__fp_round+0x20>
    19ec:	bf 2b       	or	r27, r31
    19ee:	11 f4       	brne	.+4      	; 0x19f4 <__fp_round+0x18>
    19f0:	60 ff       	sbrs	r22, 0
    19f2:	04 c0       	rjmp	.+8      	; 0x19fc <__fp_round+0x20>
    19f4:	6f 5f       	subi	r22, 0xFF	; 255
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	8f 4f       	sbci	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	08 95       	ret

000019fe <__fp_split3>:
    19fe:	57 fd       	sbrc	r21, 7
    1a00:	90 58       	subi	r25, 0x80	; 128
    1a02:	44 0f       	add	r20, r20
    1a04:	55 1f       	adc	r21, r21
    1a06:	59 f0       	breq	.+22     	; 0x1a1e <__fp_splitA+0x10>
    1a08:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0a:	71 f0       	breq	.+28     	; 0x1a28 <__fp_splitA+0x1a>
    1a0c:	47 95       	ror	r20

00001a0e <__fp_splitA>:
    1a0e:	88 0f       	add	r24, r24
    1a10:	97 fb       	bst	r25, 7
    1a12:	99 1f       	adc	r25, r25
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <__fp_splitA+0x20>
    1a16:	9f 3f       	cpi	r25, 0xFF	; 255
    1a18:	79 f0       	breq	.+30     	; 0x1a38 <__fp_splitA+0x2a>
    1a1a:	87 95       	ror	r24
    1a1c:	08 95       	ret
    1a1e:	12 16       	cp	r1, r18
    1a20:	13 06       	cpc	r1, r19
    1a22:	14 06       	cpc	r1, r20
    1a24:	55 1f       	adc	r21, r21
    1a26:	f2 cf       	rjmp	.-28     	; 0x1a0c <__fp_split3+0xe>
    1a28:	46 95       	lsr	r20
    1a2a:	f1 df       	rcall	.-30     	; 0x1a0e <__fp_splitA>
    1a2c:	08 c0       	rjmp	.+16     	; 0x1a3e <__fp_splitA+0x30>
    1a2e:	16 16       	cp	r1, r22
    1a30:	17 06       	cpc	r1, r23
    1a32:	18 06       	cpc	r1, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	f1 cf       	rjmp	.-30     	; 0x1a1a <__fp_splitA+0xc>
    1a38:	86 95       	lsr	r24
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	61 05       	cpc	r22, r1
    1a3e:	08 94       	sec
    1a40:	08 95       	ret

00001a42 <__fp_zero>:
    1a42:	e8 94       	clt

00001a44 <__fp_szero>:
    1a44:	bb 27       	eor	r27, r27
    1a46:	66 27       	eor	r22, r22
    1a48:	77 27       	eor	r23, r23
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	97 f9       	bld	r25, 7
    1a4e:	08 95       	ret

00001a50 <__gesf2>:
    1a50:	8a df       	rcall	.-236    	; 0x1966 <__fp_cmp>
    1a52:	08 f4       	brcc	.+2      	; 0x1a56 <__gesf2+0x6>
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	08 95       	ret

00001a58 <__mulsf3>:
    1a58:	0b d0       	rcall	.+22     	; 0x1a70 <__mulsf3x>
    1a5a:	c0 cf       	rjmp	.-128    	; 0x19dc <__fp_round>
    1a5c:	b1 df       	rcall	.-158    	; 0x19c0 <__fp_pscA>
    1a5e:	28 f0       	brcs	.+10     	; 0x1a6a <__mulsf3+0x12>
    1a60:	b6 df       	rcall	.-148    	; 0x19ce <__fp_pscB>
    1a62:	18 f0       	brcs	.+6      	; 0x1a6a <__mulsf3+0x12>
    1a64:	95 23       	and	r25, r21
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <__mulsf3+0x12>
    1a68:	a2 cf       	rjmp	.-188    	; 0x19ae <__fp_inf>
    1a6a:	a7 cf       	rjmp	.-178    	; 0x19ba <__fp_nan>
    1a6c:	11 24       	eor	r1, r1
    1a6e:	ea cf       	rjmp	.-44     	; 0x1a44 <__fp_szero>

00001a70 <__mulsf3x>:
    1a70:	c6 df       	rcall	.-116    	; 0x19fe <__fp_split3>
    1a72:	a0 f3       	brcs	.-24     	; 0x1a5c <__mulsf3+0x4>

00001a74 <__mulsf3_pse>:
    1a74:	95 9f       	mul	r25, r21
    1a76:	d1 f3       	breq	.-12     	; 0x1a6c <__mulsf3+0x14>
    1a78:	95 0f       	add	r25, r21
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	55 1f       	adc	r21, r21
    1a7e:	62 9f       	mul	r22, r18
    1a80:	f0 01       	movw	r30, r0
    1a82:	72 9f       	mul	r23, r18
    1a84:	bb 27       	eor	r27, r27
    1a86:	f0 0d       	add	r31, r0
    1a88:	b1 1d       	adc	r27, r1
    1a8a:	63 9f       	mul	r22, r19
    1a8c:	aa 27       	eor	r26, r26
    1a8e:	f0 0d       	add	r31, r0
    1a90:	b1 1d       	adc	r27, r1
    1a92:	aa 1f       	adc	r26, r26
    1a94:	64 9f       	mul	r22, r20
    1a96:	66 27       	eor	r22, r22
    1a98:	b0 0d       	add	r27, r0
    1a9a:	a1 1d       	adc	r26, r1
    1a9c:	66 1f       	adc	r22, r22
    1a9e:	82 9f       	mul	r24, r18
    1aa0:	22 27       	eor	r18, r18
    1aa2:	b0 0d       	add	r27, r0
    1aa4:	a1 1d       	adc	r26, r1
    1aa6:	62 1f       	adc	r22, r18
    1aa8:	73 9f       	mul	r23, r19
    1aaa:	b0 0d       	add	r27, r0
    1aac:	a1 1d       	adc	r26, r1
    1aae:	62 1f       	adc	r22, r18
    1ab0:	83 9f       	mul	r24, r19
    1ab2:	a0 0d       	add	r26, r0
    1ab4:	61 1d       	adc	r22, r1
    1ab6:	22 1f       	adc	r18, r18
    1ab8:	74 9f       	mul	r23, r20
    1aba:	33 27       	eor	r19, r19
    1abc:	a0 0d       	add	r26, r0
    1abe:	61 1d       	adc	r22, r1
    1ac0:	23 1f       	adc	r18, r19
    1ac2:	84 9f       	mul	r24, r20
    1ac4:	60 0d       	add	r22, r0
    1ac6:	21 1d       	adc	r18, r1
    1ac8:	82 2f       	mov	r24, r18
    1aca:	76 2f       	mov	r23, r22
    1acc:	6a 2f       	mov	r22, r26
    1ace:	11 24       	eor	r1, r1
    1ad0:	9f 57       	subi	r25, 0x7F	; 127
    1ad2:	50 40       	sbci	r21, 0x00	; 0
    1ad4:	8a f0       	brmi	.+34     	; 0x1af8 <__mulsf3_pse+0x84>
    1ad6:	e1 f0       	breq	.+56     	; 0x1b10 <__mulsf3_pse+0x9c>
    1ad8:	88 23       	and	r24, r24
    1ada:	4a f0       	brmi	.+18     	; 0x1aee <__mulsf3_pse+0x7a>
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	66 1f       	adc	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	91 50       	subi	r25, 0x01	; 1
    1aea:	50 40       	sbci	r21, 0x00	; 0
    1aec:	a9 f7       	brne	.-22     	; 0x1ad8 <__mulsf3_pse+0x64>
    1aee:	9e 3f       	cpi	r25, 0xFE	; 254
    1af0:	51 05       	cpc	r21, r1
    1af2:	70 f0       	brcs	.+28     	; 0x1b10 <__mulsf3_pse+0x9c>
    1af4:	5c cf       	rjmp	.-328    	; 0x19ae <__fp_inf>
    1af6:	a6 cf       	rjmp	.-180    	; 0x1a44 <__fp_szero>
    1af8:	5f 3f       	cpi	r21, 0xFF	; 255
    1afa:	ec f3       	brlt	.-6      	; 0x1af6 <__mulsf3_pse+0x82>
    1afc:	98 3e       	cpi	r25, 0xE8	; 232
    1afe:	dc f3       	brlt	.-10     	; 0x1af6 <__mulsf3_pse+0x82>
    1b00:	86 95       	lsr	r24
    1b02:	77 95       	ror	r23
    1b04:	67 95       	ror	r22
    1b06:	b7 95       	ror	r27
    1b08:	f7 95       	ror	r31
    1b0a:	e7 95       	ror	r30
    1b0c:	9f 5f       	subi	r25, 0xFF	; 255
    1b0e:	c1 f7       	brne	.-16     	; 0x1b00 <__mulsf3_pse+0x8c>
    1b10:	fe 2b       	or	r31, r30
    1b12:	88 0f       	add	r24, r24
    1b14:	91 1d       	adc	r25, r1
    1b16:	96 95       	lsr	r25
    1b18:	87 95       	ror	r24
    1b1a:	97 f9       	bld	r25, 7
    1b1c:	08 95       	ret

00001b1e <pow>:
    1b1e:	fa 01       	movw	r30, r20
    1b20:	ee 0f       	add	r30, r30
    1b22:	ff 1f       	adc	r31, r31
    1b24:	30 96       	adiw	r30, 0x00	; 0
    1b26:	21 05       	cpc	r18, r1
    1b28:	31 05       	cpc	r19, r1
    1b2a:	99 f1       	breq	.+102    	; 0x1b92 <pow+0x74>
    1b2c:	61 15       	cp	r22, r1
    1b2e:	71 05       	cpc	r23, r1
    1b30:	61 f4       	brne	.+24     	; 0x1b4a <pow+0x2c>
    1b32:	80 38       	cpi	r24, 0x80	; 128
    1b34:	bf e3       	ldi	r27, 0x3F	; 63
    1b36:	9b 07       	cpc	r25, r27
    1b38:	49 f1       	breq	.+82     	; 0x1b8c <pow+0x6e>
    1b3a:	68 94       	set
    1b3c:	90 38       	cpi	r25, 0x80	; 128
    1b3e:	81 05       	cpc	r24, r1
    1b40:	61 f0       	breq	.+24     	; 0x1b5a <pow+0x3c>
    1b42:	80 38       	cpi	r24, 0x80	; 128
    1b44:	bf ef       	ldi	r27, 0xFF	; 255
    1b46:	9b 07       	cpc	r25, r27
    1b48:	41 f0       	breq	.+16     	; 0x1b5a <pow+0x3c>
    1b4a:	99 23       	and	r25, r25
    1b4c:	42 f5       	brpl	.+80     	; 0x1b9e <pow+0x80>
    1b4e:	ff 3f       	cpi	r31, 0xFF	; 255
    1b50:	e1 05       	cpc	r30, r1
    1b52:	31 05       	cpc	r19, r1
    1b54:	21 05       	cpc	r18, r1
    1b56:	11 f1       	breq	.+68     	; 0x1b9c <pow+0x7e>
    1b58:	e8 94       	clt
    1b5a:	08 94       	sec
    1b5c:	e7 95       	ror	r30
    1b5e:	d9 01       	movw	r26, r18
    1b60:	aa 23       	and	r26, r26
    1b62:	29 f4       	brne	.+10     	; 0x1b6e <pow+0x50>
    1b64:	ab 2f       	mov	r26, r27
    1b66:	be 2f       	mov	r27, r30
    1b68:	f8 5f       	subi	r31, 0xF8	; 248
    1b6a:	d0 f3       	brcs	.-12     	; 0x1b60 <pow+0x42>
    1b6c:	10 c0       	rjmp	.+32     	; 0x1b8e <pow+0x70>
    1b6e:	ff 5f       	subi	r31, 0xFF	; 255
    1b70:	70 f4       	brcc	.+28     	; 0x1b8e <pow+0x70>
    1b72:	a6 95       	lsr	r26
    1b74:	e0 f7       	brcc	.-8      	; 0x1b6e <pow+0x50>
    1b76:	f7 39       	cpi	r31, 0x97	; 151
    1b78:	50 f0       	brcs	.+20     	; 0x1b8e <pow+0x70>
    1b7a:	19 f0       	breq	.+6      	; 0x1b82 <pow+0x64>
    1b7c:	ff 3a       	cpi	r31, 0xAF	; 175
    1b7e:	38 f4       	brcc	.+14     	; 0x1b8e <pow+0x70>
    1b80:	9f 77       	andi	r25, 0x7F	; 127
    1b82:	9f 93       	push	r25
    1b84:	0c d0       	rcall	.+24     	; 0x1b9e <pow+0x80>
    1b86:	0f 90       	pop	r0
    1b88:	07 fc       	sbrc	r0, 7
    1b8a:	90 58       	subi	r25, 0x80	; 128
    1b8c:	08 95       	ret
    1b8e:	3e f0       	brts	.+14     	; 0x1b9e <pow+0x80>
    1b90:	14 cf       	rjmp	.-472    	; 0x19ba <__fp_nan>
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	80 e8       	ldi	r24, 0x80	; 128
    1b98:	9f e3       	ldi	r25, 0x3F	; 63
    1b9a:	08 95       	ret
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	9f 77       	andi	r25, 0x7F	; 127
    1ba0:	5f 93       	push	r21
    1ba2:	4f 93       	push	r20
    1ba4:	3f 93       	push	r19
    1ba6:	2f 93       	push	r18
    1ba8:	9e d0       	rcall	.+316    	; 0x1ce6 <log>
    1baa:	2f 91       	pop	r18
    1bac:	3f 91       	pop	r19
    1bae:	4f 91       	pop	r20
    1bb0:	5f 91       	pop	r21
    1bb2:	52 df       	rcall	.-348    	; 0x1a58 <__mulsf3>
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <exp>
    1bb6:	19 f4       	brne	.+6      	; 0x1bbe <pow+0xa0>
    1bb8:	0e f0       	brts	.+2      	; 0x1bbc <pow+0x9e>
    1bba:	f9 ce       	rjmp	.-526    	; 0x19ae <__fp_inf>
    1bbc:	42 cf       	rjmp	.-380    	; 0x1a42 <__fp_zero>
    1bbe:	fd ce       	rjmp	.-518    	; 0x19ba <__fp_nan>

00001bc0 <exp>:
    1bc0:	26 df       	rcall	.-436    	; 0x1a0e <__fp_splitA>
    1bc2:	c8 f3       	brcs	.-14     	; 0x1bb6 <pow+0x98>
    1bc4:	96 38       	cpi	r25, 0x86	; 134
    1bc6:	c0 f7       	brcc	.-16     	; 0x1bb8 <pow+0x9a>
    1bc8:	07 f8       	bld	r0, 7
    1bca:	0f 92       	push	r0
    1bcc:	e8 94       	clt
    1bce:	2b e3       	ldi	r18, 0x3B	; 59
    1bd0:	3a ea       	ldi	r19, 0xAA	; 170
    1bd2:	48 eb       	ldi	r20, 0xB8	; 184
    1bd4:	5f e7       	ldi	r21, 0x7F	; 127
    1bd6:	4e df       	rcall	.-356    	; 0x1a74 <__mulsf3_pse>
    1bd8:	0f 92       	push	r0
    1bda:	0f 92       	push	r0
    1bdc:	0f 92       	push	r0
    1bde:	4d b7       	in	r20, 0x3d	; 61
    1be0:	5e b7       	in	r21, 0x3e	; 62
    1be2:	0f 92       	push	r0
    1be4:	c0 d0       	rcall	.+384    	; 0x1d66 <modf>
    1be6:	ec ef       	ldi	r30, 0xFC	; 252
    1be8:	f1 e0       	ldi	r31, 0x01	; 1
    1bea:	16 d0       	rcall	.+44     	; 0x1c18 <__fp_powser>
    1bec:	4f 91       	pop	r20
    1bee:	5f 91       	pop	r21
    1bf0:	ef 91       	pop	r30
    1bf2:	ff 91       	pop	r31
    1bf4:	e5 95       	asr	r30
    1bf6:	ee 1f       	adc	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	49 f0       	breq	.+18     	; 0x1c0e <exp+0x4e>
    1bfc:	fe 57       	subi	r31, 0x7E	; 126
    1bfe:	e0 68       	ori	r30, 0x80	; 128
    1c00:	44 27       	eor	r20, r20
    1c02:	ee 0f       	add	r30, r30
    1c04:	44 1f       	adc	r20, r20
    1c06:	fa 95       	dec	r31
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <exp+0x42>
    1c0a:	41 95       	neg	r20
    1c0c:	55 0b       	sbc	r21, r21
    1c0e:	32 d0       	rcall	.+100    	; 0x1c74 <ldexp>
    1c10:	0f 90       	pop	r0
    1c12:	07 fe       	sbrs	r0, 7
    1c14:	26 c0       	rjmp	.+76     	; 0x1c62 <inverse>
    1c16:	08 95       	ret

00001c18 <__fp_powser>:
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	1f 93       	push	r17
    1c1e:	0f 93       	push	r16
    1c20:	ff 92       	push	r15
    1c22:	ef 92       	push	r14
    1c24:	df 92       	push	r13
    1c26:	7b 01       	movw	r14, r22
    1c28:	8c 01       	movw	r16, r24
    1c2a:	68 94       	set
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <__fp_powser+0x20>
    1c2e:	da 2e       	mov	r13, r26
    1c30:	ef 01       	movw	r28, r30
    1c32:	1e df       	rcall	.-452    	; 0x1a70 <__mulsf3x>
    1c34:	fe 01       	movw	r30, r28
    1c36:	e8 94       	clt
    1c38:	a5 91       	lpm	r26, Z+
    1c3a:	25 91       	lpm	r18, Z+
    1c3c:	35 91       	lpm	r19, Z+
    1c3e:	45 91       	lpm	r20, Z+
    1c40:	55 91       	lpm	r21, Z+
    1c42:	ae f3       	brts	.-22     	; 0x1c2e <__fp_powser+0x16>
    1c44:	ef 01       	movw	r28, r30
    1c46:	62 dd       	rcall	.-1340   	; 0x170c <__addsf3x>
    1c48:	fe 01       	movw	r30, r28
    1c4a:	97 01       	movw	r18, r14
    1c4c:	a8 01       	movw	r20, r16
    1c4e:	da 94       	dec	r13
    1c50:	79 f7       	brne	.-34     	; 0x1c30 <__fp_powser+0x18>
    1c52:	df 90       	pop	r13
    1c54:	ef 90       	pop	r14
    1c56:	ff 90       	pop	r15
    1c58:	0f 91       	pop	r16
    1c5a:	1f 91       	pop	r17
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <inverse>:
    1c62:	9b 01       	movw	r18, r22
    1c64:	ac 01       	movw	r20, r24
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	80 e8       	ldi	r24, 0x80	; 128
    1c6c:	9f e3       	ldi	r25, 0x3F	; 63
    1c6e:	a5 cd       	rjmp	.-1206   	; 0x17ba <__divsf3>
    1c70:	9e ce       	rjmp	.-708    	; 0x19ae <__fp_inf>
    1c72:	ac c0       	rjmp	.+344    	; 0x1dcc <__fp_mpack>

00001c74 <ldexp>:
    1c74:	cc de       	rcall	.-616    	; 0x1a0e <__fp_splitA>
    1c76:	e8 f3       	brcs	.-6      	; 0x1c72 <inverse+0x10>
    1c78:	99 23       	and	r25, r25
    1c7a:	d9 f3       	breq	.-10     	; 0x1c72 <inverse+0x10>
    1c7c:	94 0f       	add	r25, r20
    1c7e:	51 1d       	adc	r21, r1
    1c80:	bb f3       	brvs	.-18     	; 0x1c70 <inverse+0xe>
    1c82:	91 50       	subi	r25, 0x01	; 1
    1c84:	50 40       	sbci	r21, 0x00	; 0
    1c86:	94 f0       	brlt	.+36     	; 0x1cac <ldexp+0x38>
    1c88:	59 f0       	breq	.+22     	; 0x1ca0 <ldexp+0x2c>
    1c8a:	88 23       	and	r24, r24
    1c8c:	32 f0       	brmi	.+12     	; 0x1c9a <ldexp+0x26>
    1c8e:	66 0f       	add	r22, r22
    1c90:	77 1f       	adc	r23, r23
    1c92:	88 1f       	adc	r24, r24
    1c94:	91 50       	subi	r25, 0x01	; 1
    1c96:	50 40       	sbci	r21, 0x00	; 0
    1c98:	c1 f7       	brne	.-16     	; 0x1c8a <ldexp+0x16>
    1c9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c9c:	51 05       	cpc	r21, r1
    1c9e:	44 f7       	brge	.-48     	; 0x1c70 <inverse+0xe>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	91 1d       	adc	r25, r1
    1ca4:	96 95       	lsr	r25
    1ca6:	87 95       	ror	r24
    1ca8:	97 f9       	bld	r25, 7
    1caa:	08 95       	ret
    1cac:	5f 3f       	cpi	r21, 0xFF	; 255
    1cae:	ac f0       	brlt	.+42     	; 0x1cda <ldexp+0x66>
    1cb0:	98 3e       	cpi	r25, 0xE8	; 232
    1cb2:	9c f0       	brlt	.+38     	; 0x1cda <ldexp+0x66>
    1cb4:	bb 27       	eor	r27, r27
    1cb6:	86 95       	lsr	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	b7 95       	ror	r27
    1cbe:	08 f4       	brcc	.+2      	; 0x1cc2 <ldexp+0x4e>
    1cc0:	b1 60       	ori	r27, 0x01	; 1
    1cc2:	93 95       	inc	r25
    1cc4:	c1 f7       	brne	.-16     	; 0x1cb6 <ldexp+0x42>
    1cc6:	bb 0f       	add	r27, r27
    1cc8:	58 f7       	brcc	.-42     	; 0x1ca0 <ldexp+0x2c>
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <ldexp+0x5c>
    1ccc:	60 ff       	sbrs	r22, 0
    1cce:	e8 cf       	rjmp	.-48     	; 0x1ca0 <ldexp+0x2c>
    1cd0:	6f 5f       	subi	r22, 0xFF	; 255
    1cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	e3 cf       	rjmp	.-58     	; 0x1ca0 <ldexp+0x2c>
    1cda:	b4 ce       	rjmp	.-664    	; 0x1a44 <__fp_szero>
    1cdc:	0e f0       	brts	.+2      	; 0x1ce0 <ldexp+0x6c>
    1cde:	76 c0       	rjmp	.+236    	; 0x1dcc <__fp_mpack>
    1ce0:	6c ce       	rjmp	.-808    	; 0x19ba <__fp_nan>
    1ce2:	68 94       	set
    1ce4:	64 ce       	rjmp	.-824    	; 0x19ae <__fp_inf>

00001ce6 <log>:
    1ce6:	93 de       	rcall	.-730    	; 0x1a0e <__fp_splitA>
    1ce8:	c8 f3       	brcs	.-14     	; 0x1cdc <ldexp+0x68>
    1cea:	99 23       	and	r25, r25
    1cec:	d1 f3       	breq	.-12     	; 0x1ce2 <ldexp+0x6e>
    1cee:	c6 f3       	brts	.-16     	; 0x1ce0 <ldexp+0x6c>
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	1f 93       	push	r17
    1cf6:	0f 93       	push	r16
    1cf8:	ff 92       	push	r15
    1cfa:	c9 2f       	mov	r28, r25
    1cfc:	dd 27       	eor	r29, r29
    1cfe:	88 23       	and	r24, r24
    1d00:	2a f0       	brmi	.+10     	; 0x1d0c <log+0x26>
    1d02:	21 97       	sbiw	r28, 0x01	; 1
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	da f7       	brpl	.-10     	; 0x1d02 <log+0x1c>
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f eb       	ldi	r21, 0xBF	; 191
    1d14:	9f e3       	ldi	r25, 0x3F	; 63
    1d16:	88 39       	cpi	r24, 0x98	; 152
    1d18:	20 f0       	brcs	.+8      	; 0x1d22 <log+0x3c>
    1d1a:	80 3e       	cpi	r24, 0xE0	; 224
    1d1c:	30 f0       	brcs	.+12     	; 0x1d2a <log+0x44>
    1d1e:	21 96       	adiw	r28, 0x01	; 1
    1d20:	8f 77       	andi	r24, 0x7F	; 127
    1d22:	e3 dc       	rcall	.-1594   	; 0x16ea <__addsf3>
    1d24:	e4 e2       	ldi	r30, 0x24	; 36
    1d26:	f2 e0       	ldi	r31, 0x02	; 2
    1d28:	03 c0       	rjmp	.+6      	; 0x1d30 <log+0x4a>
    1d2a:	df dc       	rcall	.-1602   	; 0x16ea <__addsf3>
    1d2c:	e1 e5       	ldi	r30, 0x51	; 81
    1d2e:	f2 e0       	ldi	r31, 0x02	; 2
    1d30:	73 df       	rcall	.-282    	; 0x1c18 <__fp_powser>
    1d32:	8b 01       	movw	r16, r22
    1d34:	be 01       	movw	r22, r28
    1d36:	ec 01       	movw	r28, r24
    1d38:	fb 2e       	mov	r15, r27
    1d3a:	6f 57       	subi	r22, 0x7F	; 127
    1d3c:	71 09       	sbc	r23, r1
    1d3e:	75 95       	asr	r23
    1d40:	77 1f       	adc	r23, r23
    1d42:	88 0b       	sbc	r24, r24
    1d44:	99 0b       	sbc	r25, r25
    1d46:	d4 dd       	rcall	.-1112   	; 0x18f0 <__floatsisf>
    1d48:	28 e1       	ldi	r18, 0x18	; 24
    1d4a:	32 e7       	ldi	r19, 0x72	; 114
    1d4c:	41 e3       	ldi	r20, 0x31	; 49
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	8f de       	rcall	.-738    	; 0x1a70 <__mulsf3x>
    1d52:	af 2d       	mov	r26, r15
    1d54:	98 01       	movw	r18, r16
    1d56:	ae 01       	movw	r20, r28
    1d58:	ff 90       	pop	r15
    1d5a:	0f 91       	pop	r16
    1d5c:	1f 91       	pop	r17
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	d4 dc       	rcall	.-1624   	; 0x170c <__addsf3x>
    1d64:	3b ce       	rjmp	.-906    	; 0x19dc <__fp_round>

00001d66 <modf>:
    1d66:	fa 01       	movw	r30, r20
    1d68:	dc 01       	movw	r26, r24
    1d6a:	aa 0f       	add	r26, r26
    1d6c:	bb 1f       	adc	r27, r27
    1d6e:	9b 01       	movw	r18, r22
    1d70:	ac 01       	movw	r20, r24
    1d72:	bf 57       	subi	r27, 0x7F	; 127
    1d74:	28 f4       	brcc	.+10     	; 0x1d80 <modf+0x1a>
    1d76:	22 27       	eor	r18, r18
    1d78:	33 27       	eor	r19, r19
    1d7a:	44 27       	eor	r20, r20
    1d7c:	50 78       	andi	r21, 0x80	; 128
    1d7e:	1f c0       	rjmp	.+62     	; 0x1dbe <modf+0x58>
    1d80:	b7 51       	subi	r27, 0x17	; 23
    1d82:	88 f4       	brcc	.+34     	; 0x1da6 <modf+0x40>
    1d84:	ab 2f       	mov	r26, r27
    1d86:	00 24       	eor	r0, r0
    1d88:	46 95       	lsr	r20
    1d8a:	37 95       	ror	r19
    1d8c:	27 95       	ror	r18
    1d8e:	01 1c       	adc	r0, r1
    1d90:	a3 95       	inc	r26
    1d92:	d2 f3       	brmi	.-12     	; 0x1d88 <modf+0x22>
    1d94:	00 20       	and	r0, r0
    1d96:	69 f0       	breq	.+26     	; 0x1db2 <modf+0x4c>
    1d98:	22 0f       	add	r18, r18
    1d9a:	33 1f       	adc	r19, r19
    1d9c:	44 1f       	adc	r20, r20
    1d9e:	b3 95       	inc	r27
    1da0:	da f3       	brmi	.-10     	; 0x1d98 <modf+0x32>
    1da2:	0d d0       	rcall	.+26     	; 0x1dbe <modf+0x58>
    1da4:	a1 cc       	rjmp	.-1726   	; 0x16e8 <__subsf3>
    1da6:	61 30       	cpi	r22, 0x01	; 1
    1da8:	71 05       	cpc	r23, r1
    1daa:	a0 e8       	ldi	r26, 0x80	; 128
    1dac:	8a 07       	cpc	r24, r26
    1dae:	b9 46       	sbci	r27, 0x69	; 105
    1db0:	30 f4       	brcc	.+12     	; 0x1dbe <modf+0x58>
    1db2:	9b 01       	movw	r18, r22
    1db4:	ac 01       	movw	r20, r24
    1db6:	66 27       	eor	r22, r22
    1db8:	77 27       	eor	r23, r23
    1dba:	88 27       	eor	r24, r24
    1dbc:	90 78       	andi	r25, 0x80	; 128
    1dbe:	30 96       	adiw	r30, 0x00	; 0
    1dc0:	21 f0       	breq	.+8      	; 0x1dca <modf+0x64>
    1dc2:	20 83       	st	Z, r18
    1dc4:	31 83       	std	Z+1, r19	; 0x01
    1dc6:	42 83       	std	Z+2, r20	; 0x02
    1dc8:	53 83       	std	Z+3, r21	; 0x03
    1dca:	08 95       	ret

00001dcc <__fp_mpack>:
    1dcc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dce:	31 f0       	breq	.+12     	; 0x1ddc <__fp_mpack_finite+0xc>

00001dd0 <__fp_mpack_finite>:
    1dd0:	91 50       	subi	r25, 0x01	; 1
    1dd2:	20 f4       	brcc	.+8      	; 0x1ddc <__fp_mpack_finite+0xc>
    1dd4:	87 95       	ror	r24
    1dd6:	77 95       	ror	r23
    1dd8:	67 95       	ror	r22
    1dda:	b7 95       	ror	r27
    1ddc:	88 0f       	add	r24, r24
    1dde:	91 1d       	adc	r25, r1
    1de0:	96 95       	lsr	r25
    1de2:	87 95       	ror	r24
    1de4:	97 f9       	bld	r25, 7
    1de6:	08 95       	ret

00001de8 <__mulsi3>:
    1de8:	db 01       	movw	r26, r22
    1dea:	8f 93       	push	r24
    1dec:	9f 93       	push	r25
    1dee:	41 d0       	rcall	.+130    	; 0x1e72 <__muluhisi3>
    1df0:	bf 91       	pop	r27
    1df2:	af 91       	pop	r26
    1df4:	a2 9f       	mul	r26, r18
    1df6:	80 0d       	add	r24, r0
    1df8:	91 1d       	adc	r25, r1
    1dfa:	a3 9f       	mul	r26, r19
    1dfc:	90 0d       	add	r25, r0
    1dfe:	b2 9f       	mul	r27, r18
    1e00:	90 0d       	add	r25, r0
    1e02:	11 24       	eor	r1, r1
    1e04:	08 95       	ret

00001e06 <__udivmodhi4>:
    1e06:	aa 1b       	sub	r26, r26
    1e08:	bb 1b       	sub	r27, r27
    1e0a:	51 e1       	ldi	r21, 0x11	; 17
    1e0c:	07 c0       	rjmp	.+14     	; 0x1e1c <__udivmodhi4_ep>

00001e0e <__udivmodhi4_loop>:
    1e0e:	aa 1f       	adc	r26, r26
    1e10:	bb 1f       	adc	r27, r27
    1e12:	a6 17       	cp	r26, r22
    1e14:	b7 07       	cpc	r27, r23
    1e16:	10 f0       	brcs	.+4      	; 0x1e1c <__udivmodhi4_ep>
    1e18:	a6 1b       	sub	r26, r22
    1e1a:	b7 0b       	sbc	r27, r23

00001e1c <__udivmodhi4_ep>:
    1e1c:	88 1f       	adc	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	5a 95       	dec	r21
    1e22:	a9 f7       	brne	.-22     	; 0x1e0e <__udivmodhi4_loop>
    1e24:	80 95       	com	r24
    1e26:	90 95       	com	r25
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	08 95       	ret

00001e2e <__udivmodsi4>:
    1e2e:	a1 e2       	ldi	r26, 0x21	; 33
    1e30:	1a 2e       	mov	r1, r26
    1e32:	aa 1b       	sub	r26, r26
    1e34:	bb 1b       	sub	r27, r27
    1e36:	fd 01       	movw	r30, r26
    1e38:	0d c0       	rjmp	.+26     	; 0x1e54 <__udivmodsi4_ep>

00001e3a <__udivmodsi4_loop>:
    1e3a:	aa 1f       	adc	r26, r26
    1e3c:	bb 1f       	adc	r27, r27
    1e3e:	ee 1f       	adc	r30, r30
    1e40:	ff 1f       	adc	r31, r31
    1e42:	a2 17       	cp	r26, r18
    1e44:	b3 07       	cpc	r27, r19
    1e46:	e4 07       	cpc	r30, r20
    1e48:	f5 07       	cpc	r31, r21
    1e4a:	20 f0       	brcs	.+8      	; 0x1e54 <__udivmodsi4_ep>
    1e4c:	a2 1b       	sub	r26, r18
    1e4e:	b3 0b       	sbc	r27, r19
    1e50:	e4 0b       	sbc	r30, r20
    1e52:	f5 0b       	sbc	r31, r21

00001e54 <__udivmodsi4_ep>:
    1e54:	66 1f       	adc	r22, r22
    1e56:	77 1f       	adc	r23, r23
    1e58:	88 1f       	adc	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	1a 94       	dec	r1
    1e5e:	69 f7       	brne	.-38     	; 0x1e3a <__udivmodsi4_loop>
    1e60:	60 95       	com	r22
    1e62:	70 95       	com	r23
    1e64:	80 95       	com	r24
    1e66:	90 95       	com	r25
    1e68:	9b 01       	movw	r18, r22
    1e6a:	ac 01       	movw	r20, r24
    1e6c:	bd 01       	movw	r22, r26
    1e6e:	cf 01       	movw	r24, r30
    1e70:	08 95       	ret

00001e72 <__muluhisi3>:
    1e72:	09 d0       	rcall	.+18     	; 0x1e86 <__umulhisi3>
    1e74:	a5 9f       	mul	r26, r21
    1e76:	90 0d       	add	r25, r0
    1e78:	b4 9f       	mul	r27, r20
    1e7a:	90 0d       	add	r25, r0
    1e7c:	a4 9f       	mul	r26, r20
    1e7e:	80 0d       	add	r24, r0
    1e80:	91 1d       	adc	r25, r1
    1e82:	11 24       	eor	r1, r1
    1e84:	08 95       	ret

00001e86 <__umulhisi3>:
    1e86:	a2 9f       	mul	r26, r18
    1e88:	b0 01       	movw	r22, r0
    1e8a:	b3 9f       	mul	r27, r19
    1e8c:	c0 01       	movw	r24, r0
    1e8e:	a3 9f       	mul	r26, r19
    1e90:	70 0d       	add	r23, r0
    1e92:	81 1d       	adc	r24, r1
    1e94:	11 24       	eor	r1, r1
    1e96:	91 1d       	adc	r25, r1
    1e98:	b2 9f       	mul	r27, r18
    1e9a:	70 0d       	add	r23, r0
    1e9c:	81 1d       	adc	r24, r1
    1e9e:	11 24       	eor	r1, r1
    1ea0:	91 1d       	adc	r25, r1
    1ea2:	08 95       	ret

00001ea4 <fdevopen>:
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	31 f4       	brne	.+12     	; 0x1ebc <fdevopen+0x18>
    1eb0:	61 15       	cp	r22, r1
    1eb2:	71 05       	cpc	r23, r1
    1eb4:	19 f4       	brne	.+6      	; 0x1ebc <fdevopen+0x18>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	39 c0       	rjmp	.+114    	; 0x1f2e <fdevopen+0x8a>
    1ebc:	8b 01       	movw	r16, r22
    1ebe:	ec 01       	movw	r28, r24
    1ec0:	6e e0       	ldi	r22, 0x0E	; 14
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	6c d0       	rcall	.+216    	; 0x1fa2 <calloc>
    1eca:	fc 01       	movw	r30, r24
    1ecc:	89 2b       	or	r24, r25
    1ece:	99 f3       	breq	.-26     	; 0x1eb6 <fdevopen+0x12>
    1ed0:	80 e8       	ldi	r24, 0x80	; 128
    1ed2:	83 83       	std	Z+3, r24	; 0x03
    1ed4:	01 15       	cp	r16, r1
    1ed6:	11 05       	cpc	r17, r1
    1ed8:	71 f0       	breq	.+28     	; 0x1ef6 <fdevopen+0x52>
    1eda:	02 87       	std	Z+10, r16	; 0x0a
    1edc:	13 87       	std	Z+11, r17	; 0x0b
    1ede:	81 e8       	ldi	r24, 0x81	; 129
    1ee0:	83 83       	std	Z+3, r24	; 0x03
    1ee2:	80 91 8f 21 	lds	r24, 0x218F	; 0x80218f <__iob>
    1ee6:	90 91 90 21 	lds	r25, 0x2190	; 0x802190 <__iob+0x1>
    1eea:	89 2b       	or	r24, r25
    1eec:	21 f4       	brne	.+8      	; 0x1ef6 <fdevopen+0x52>
    1eee:	e0 93 8f 21 	sts	0x218F, r30	; 0x80218f <__iob>
    1ef2:	f0 93 90 21 	sts	0x2190, r31	; 0x802190 <__iob+0x1>
    1ef6:	20 97       	sbiw	r28, 0x00	; 0
    1ef8:	c9 f0       	breq	.+50     	; 0x1f2c <fdevopen+0x88>
    1efa:	c0 87       	std	Z+8, r28	; 0x08
    1efc:	d1 87       	std	Z+9, r29	; 0x09
    1efe:	83 81       	ldd	r24, Z+3	; 0x03
    1f00:	82 60       	ori	r24, 0x02	; 2
    1f02:	83 83       	std	Z+3, r24	; 0x03
    1f04:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <__iob+0x2>
    1f08:	90 91 92 21 	lds	r25, 0x2192	; 0x802192 <__iob+0x3>
    1f0c:	89 2b       	or	r24, r25
    1f0e:	71 f4       	brne	.+28     	; 0x1f2c <fdevopen+0x88>
    1f10:	e0 93 91 21 	sts	0x2191, r30	; 0x802191 <__iob+0x2>
    1f14:	f0 93 92 21 	sts	0x2192, r31	; 0x802192 <__iob+0x3>
    1f18:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <__iob+0x4>
    1f1c:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <__iob+0x5>
    1f20:	89 2b       	or	r24, r25
    1f22:	21 f4       	brne	.+8      	; 0x1f2c <fdevopen+0x88>
    1f24:	e0 93 93 21 	sts	0x2193, r30	; 0x802193 <__iob+0x4>
    1f28:	f0 93 94 21 	sts	0x2194, r31	; 0x802194 <__iob+0x5>
    1f2c:	cf 01       	movw	r24, r30
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

00001f38 <putchar>:
    1f38:	60 91 91 21 	lds	r22, 0x2191	; 0x802191 <__iob+0x2>
    1f3c:	70 91 92 21 	lds	r23, 0x2192	; 0x802192 <__iob+0x3>
    1f40:	72 c1       	rjmp	.+740    	; 0x2226 <fputc>

00001f42 <puts>:
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	e0 91 91 21 	lds	r30, 0x2191	; 0x802191 <__iob+0x2>
    1f4e:	f0 91 92 21 	lds	r31, 0x2192	; 0x802192 <__iob+0x3>
    1f52:	23 81       	ldd	r18, Z+3	; 0x03
    1f54:	21 ff       	sbrs	r18, 1
    1f56:	1b c0       	rjmp	.+54     	; 0x1f8e <puts+0x4c>
    1f58:	8c 01       	movw	r16, r24
    1f5a:	d0 e0       	ldi	r29, 0x00	; 0
    1f5c:	c0 e0       	ldi	r28, 0x00	; 0
    1f5e:	f8 01       	movw	r30, r16
    1f60:	81 91       	ld	r24, Z+
    1f62:	8f 01       	movw	r16, r30
    1f64:	60 91 91 21 	lds	r22, 0x2191	; 0x802191 <__iob+0x2>
    1f68:	70 91 92 21 	lds	r23, 0x2192	; 0x802192 <__iob+0x3>
    1f6c:	db 01       	movw	r26, r22
    1f6e:	18 96       	adiw	r26, 0x08	; 8
    1f70:	ed 91       	ld	r30, X+
    1f72:	fc 91       	ld	r31, X
    1f74:	19 97       	sbiw	r26, 0x09	; 9
    1f76:	88 23       	and	r24, r24
    1f78:	31 f0       	breq	.+12     	; 0x1f86 <puts+0x44>
    1f7a:	19 95       	eicall
    1f7c:	89 2b       	or	r24, r25
    1f7e:	79 f3       	breq	.-34     	; 0x1f5e <puts+0x1c>
    1f80:	df ef       	ldi	r29, 0xFF	; 255
    1f82:	cf ef       	ldi	r28, 0xFF	; 255
    1f84:	ec cf       	rjmp	.-40     	; 0x1f5e <puts+0x1c>
    1f86:	8a e0       	ldi	r24, 0x0A	; 10
    1f88:	19 95       	eicall
    1f8a:	89 2b       	or	r24, r25
    1f8c:	19 f0       	breq	.+6      	; 0x1f94 <puts+0x52>
    1f8e:	8f ef       	ldi	r24, 0xFF	; 255
    1f90:	9f ef       	ldi	r25, 0xFF	; 255
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <puts+0x56>
    1f94:	8d 2f       	mov	r24, r29
    1f96:	9c 2f       	mov	r25, r28
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <calloc>:
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	86 9f       	mul	r24, r22
    1fac:	80 01       	movw	r16, r0
    1fae:	87 9f       	mul	r24, r23
    1fb0:	10 0d       	add	r17, r0
    1fb2:	96 9f       	mul	r25, r22
    1fb4:	10 0d       	add	r17, r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	c8 01       	movw	r24, r16
    1fba:	0d d0       	rcall	.+26     	; 0x1fd6 <malloc>
    1fbc:	ec 01       	movw	r28, r24
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	21 f0       	breq	.+8      	; 0x1fca <calloc+0x28>
    1fc2:	a8 01       	movw	r20, r16
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	27 d1       	rcall	.+590    	; 0x2218 <memset>
    1fca:	ce 01       	movw	r24, r28
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	08 95       	ret

00001fd6 <malloc>:
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	10 f4       	brcc	.+4      	; 0x1fe8 <malloc+0x12>
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	e0 91 97 21 	lds	r30, 0x2197	; 0x802197 <__flp>
    1fec:	f0 91 98 21 	lds	r31, 0x2198	; 0x802198 <__flp+0x1>
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	30 97       	sbiw	r30, 0x00	; 0
    1ffa:	19 f1       	breq	.+70     	; 0x2042 <malloc+0x6c>
    1ffc:	40 81       	ld	r20, Z
    1ffe:	51 81       	ldd	r21, Z+1	; 0x01
    2000:	02 81       	ldd	r16, Z+2	; 0x02
    2002:	13 81       	ldd	r17, Z+3	; 0x03
    2004:	48 17       	cp	r20, r24
    2006:	59 07       	cpc	r21, r25
    2008:	c8 f0       	brcs	.+50     	; 0x203c <malloc+0x66>
    200a:	84 17       	cp	r24, r20
    200c:	95 07       	cpc	r25, r21
    200e:	69 f4       	brne	.+26     	; 0x202a <malloc+0x54>
    2010:	10 97       	sbiw	r26, 0x00	; 0
    2012:	31 f0       	breq	.+12     	; 0x2020 <malloc+0x4a>
    2014:	12 96       	adiw	r26, 0x02	; 2
    2016:	0c 93       	st	X, r16
    2018:	12 97       	sbiw	r26, 0x02	; 2
    201a:	13 96       	adiw	r26, 0x03	; 3
    201c:	1c 93       	st	X, r17
    201e:	27 c0       	rjmp	.+78     	; 0x206e <malloc+0x98>
    2020:	00 93 97 21 	sts	0x2197, r16	; 0x802197 <__flp>
    2024:	10 93 98 21 	sts	0x2198, r17	; 0x802198 <__flp+0x1>
    2028:	22 c0       	rjmp	.+68     	; 0x206e <malloc+0x98>
    202a:	21 15       	cp	r18, r1
    202c:	31 05       	cpc	r19, r1
    202e:	19 f0       	breq	.+6      	; 0x2036 <malloc+0x60>
    2030:	42 17       	cp	r20, r18
    2032:	53 07       	cpc	r21, r19
    2034:	18 f4       	brcc	.+6      	; 0x203c <malloc+0x66>
    2036:	9a 01       	movw	r18, r20
    2038:	bd 01       	movw	r22, r26
    203a:	ef 01       	movw	r28, r30
    203c:	df 01       	movw	r26, r30
    203e:	f8 01       	movw	r30, r16
    2040:	db cf       	rjmp	.-74     	; 0x1ff8 <malloc+0x22>
    2042:	21 15       	cp	r18, r1
    2044:	31 05       	cpc	r19, r1
    2046:	f9 f0       	breq	.+62     	; 0x2086 <malloc+0xb0>
    2048:	28 1b       	sub	r18, r24
    204a:	39 0b       	sbc	r19, r25
    204c:	24 30       	cpi	r18, 0x04	; 4
    204e:	31 05       	cpc	r19, r1
    2050:	80 f4       	brcc	.+32     	; 0x2072 <malloc+0x9c>
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	9b 81       	ldd	r25, Y+3	; 0x03
    2056:	61 15       	cp	r22, r1
    2058:	71 05       	cpc	r23, r1
    205a:	21 f0       	breq	.+8      	; 0x2064 <malloc+0x8e>
    205c:	fb 01       	movw	r30, r22
    205e:	82 83       	std	Z+2, r24	; 0x02
    2060:	93 83       	std	Z+3, r25	; 0x03
    2062:	04 c0       	rjmp	.+8      	; 0x206c <malloc+0x96>
    2064:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <__flp>
    2068:	90 93 98 21 	sts	0x2198, r25	; 0x802198 <__flp+0x1>
    206c:	fe 01       	movw	r30, r28
    206e:	32 96       	adiw	r30, 0x02	; 2
    2070:	44 c0       	rjmp	.+136    	; 0x20fa <malloc+0x124>
    2072:	fe 01       	movw	r30, r28
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	81 93       	st	Z+, r24
    207a:	91 93       	st	Z+, r25
    207c:	22 50       	subi	r18, 0x02	; 2
    207e:	31 09       	sbc	r19, r1
    2080:	28 83       	st	Y, r18
    2082:	39 83       	std	Y+1, r19	; 0x01
    2084:	3a c0       	rjmp	.+116    	; 0x20fa <malloc+0x124>
    2086:	20 91 95 21 	lds	r18, 0x2195	; 0x802195 <__brkval>
    208a:	30 91 96 21 	lds	r19, 0x2196	; 0x802196 <__brkval+0x1>
    208e:	23 2b       	or	r18, r19
    2090:	41 f4       	brne	.+16     	; 0x20a2 <malloc+0xcc>
    2092:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2096:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    209a:	20 93 95 21 	sts	0x2195, r18	; 0x802195 <__brkval>
    209e:	30 93 96 21 	sts	0x2196, r19	; 0x802196 <__brkval+0x1>
    20a2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    20a6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    20aa:	21 15       	cp	r18, r1
    20ac:	31 05       	cpc	r19, r1
    20ae:	41 f4       	brne	.+16     	; 0x20c0 <malloc+0xea>
    20b0:	2d b7       	in	r18, 0x3d	; 61
    20b2:	3e b7       	in	r19, 0x3e	; 62
    20b4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    20b8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    20bc:	24 1b       	sub	r18, r20
    20be:	35 0b       	sbc	r19, r21
    20c0:	e0 91 95 21 	lds	r30, 0x2195	; 0x802195 <__brkval>
    20c4:	f0 91 96 21 	lds	r31, 0x2196	; 0x802196 <__brkval+0x1>
    20c8:	e2 17       	cp	r30, r18
    20ca:	f3 07       	cpc	r31, r19
    20cc:	a0 f4       	brcc	.+40     	; 0x20f6 <malloc+0x120>
    20ce:	2e 1b       	sub	r18, r30
    20d0:	3f 0b       	sbc	r19, r31
    20d2:	28 17       	cp	r18, r24
    20d4:	39 07       	cpc	r19, r25
    20d6:	78 f0       	brcs	.+30     	; 0x20f6 <malloc+0x120>
    20d8:	ac 01       	movw	r20, r24
    20da:	4e 5f       	subi	r20, 0xFE	; 254
    20dc:	5f 4f       	sbci	r21, 0xFF	; 255
    20de:	24 17       	cp	r18, r20
    20e0:	35 07       	cpc	r19, r21
    20e2:	48 f0       	brcs	.+18     	; 0x20f6 <malloc+0x120>
    20e4:	4e 0f       	add	r20, r30
    20e6:	5f 1f       	adc	r21, r31
    20e8:	40 93 95 21 	sts	0x2195, r20	; 0x802195 <__brkval>
    20ec:	50 93 96 21 	sts	0x2196, r21	; 0x802196 <__brkval+0x1>
    20f0:	81 93       	st	Z+, r24
    20f2:	91 93       	st	Z+, r25
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <malloc+0x124>
    20f6:	e0 e0       	ldi	r30, 0x00	; 0
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	cf 01       	movw	r24, r30
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	08 95       	ret

00002106 <free>:
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	09 f4       	brne	.+2      	; 0x2110 <free+0xa>
    210e:	81 c0       	rjmp	.+258    	; 0x2212 <free+0x10c>
    2110:	fc 01       	movw	r30, r24
    2112:	32 97       	sbiw	r30, 0x02	; 2
    2114:	12 82       	std	Z+2, r1	; 0x02
    2116:	13 82       	std	Z+3, r1	; 0x03
    2118:	a0 91 97 21 	lds	r26, 0x2197	; 0x802197 <__flp>
    211c:	b0 91 98 21 	lds	r27, 0x2198	; 0x802198 <__flp+0x1>
    2120:	10 97       	sbiw	r26, 0x00	; 0
    2122:	81 f4       	brne	.+32     	; 0x2144 <free+0x3e>
    2124:	20 81       	ld	r18, Z
    2126:	31 81       	ldd	r19, Z+1	; 0x01
    2128:	82 0f       	add	r24, r18
    212a:	93 1f       	adc	r25, r19
    212c:	20 91 95 21 	lds	r18, 0x2195	; 0x802195 <__brkval>
    2130:	30 91 96 21 	lds	r19, 0x2196	; 0x802196 <__brkval+0x1>
    2134:	28 17       	cp	r18, r24
    2136:	39 07       	cpc	r19, r25
    2138:	51 f5       	brne	.+84     	; 0x218e <free+0x88>
    213a:	e0 93 95 21 	sts	0x2195, r30	; 0x802195 <__brkval>
    213e:	f0 93 96 21 	sts	0x2196, r31	; 0x802196 <__brkval+0x1>
    2142:	67 c0       	rjmp	.+206    	; 0x2212 <free+0x10c>
    2144:	ed 01       	movw	r28, r26
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	ce 17       	cp	r28, r30
    214c:	df 07       	cpc	r29, r31
    214e:	40 f4       	brcc	.+16     	; 0x2160 <free+0x5a>
    2150:	4a 81       	ldd	r20, Y+2	; 0x02
    2152:	5b 81       	ldd	r21, Y+3	; 0x03
    2154:	9e 01       	movw	r18, r28
    2156:	41 15       	cp	r20, r1
    2158:	51 05       	cpc	r21, r1
    215a:	f1 f0       	breq	.+60     	; 0x2198 <free+0x92>
    215c:	ea 01       	movw	r28, r20
    215e:	f5 cf       	rjmp	.-22     	; 0x214a <free+0x44>
    2160:	c2 83       	std	Z+2, r28	; 0x02
    2162:	d3 83       	std	Z+3, r29	; 0x03
    2164:	40 81       	ld	r20, Z
    2166:	51 81       	ldd	r21, Z+1	; 0x01
    2168:	84 0f       	add	r24, r20
    216a:	95 1f       	adc	r25, r21
    216c:	c8 17       	cp	r28, r24
    216e:	d9 07       	cpc	r29, r25
    2170:	59 f4       	brne	.+22     	; 0x2188 <free+0x82>
    2172:	88 81       	ld	r24, Y
    2174:	99 81       	ldd	r25, Y+1	; 0x01
    2176:	84 0f       	add	r24, r20
    2178:	95 1f       	adc	r25, r21
    217a:	02 96       	adiw	r24, 0x02	; 2
    217c:	80 83       	st	Z, r24
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	82 83       	std	Z+2, r24	; 0x02
    2186:	93 83       	std	Z+3, r25	; 0x03
    2188:	21 15       	cp	r18, r1
    218a:	31 05       	cpc	r19, r1
    218c:	29 f4       	brne	.+10     	; 0x2198 <free+0x92>
    218e:	e0 93 97 21 	sts	0x2197, r30	; 0x802197 <__flp>
    2192:	f0 93 98 21 	sts	0x2198, r31	; 0x802198 <__flp+0x1>
    2196:	3d c0       	rjmp	.+122    	; 0x2212 <free+0x10c>
    2198:	e9 01       	movw	r28, r18
    219a:	ea 83       	std	Y+2, r30	; 0x02
    219c:	fb 83       	std	Y+3, r31	; 0x03
    219e:	49 91       	ld	r20, Y+
    21a0:	59 91       	ld	r21, Y+
    21a2:	c4 0f       	add	r28, r20
    21a4:	d5 1f       	adc	r29, r21
    21a6:	ec 17       	cp	r30, r28
    21a8:	fd 07       	cpc	r31, r29
    21aa:	61 f4       	brne	.+24     	; 0x21c4 <free+0xbe>
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	84 0f       	add	r24, r20
    21b2:	95 1f       	adc	r25, r21
    21b4:	02 96       	adiw	r24, 0x02	; 2
    21b6:	e9 01       	movw	r28, r18
    21b8:	88 83       	st	Y, r24
    21ba:	99 83       	std	Y+1, r25	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	8a 83       	std	Y+2, r24	; 0x02
    21c2:	9b 83       	std	Y+3, r25	; 0x03
    21c4:	e0 e0       	ldi	r30, 0x00	; 0
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	12 96       	adiw	r26, 0x02	; 2
    21ca:	8d 91       	ld	r24, X+
    21cc:	9c 91       	ld	r25, X
    21ce:	13 97       	sbiw	r26, 0x03	; 3
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	19 f0       	breq	.+6      	; 0x21da <free+0xd4>
    21d4:	fd 01       	movw	r30, r26
    21d6:	dc 01       	movw	r26, r24
    21d8:	f7 cf       	rjmp	.-18     	; 0x21c8 <free+0xc2>
    21da:	8d 91       	ld	r24, X+
    21dc:	9c 91       	ld	r25, X
    21de:	11 97       	sbiw	r26, 0x01	; 1
    21e0:	9d 01       	movw	r18, r26
    21e2:	2e 5f       	subi	r18, 0xFE	; 254
    21e4:	3f 4f       	sbci	r19, 0xFF	; 255
    21e6:	82 0f       	add	r24, r18
    21e8:	93 1f       	adc	r25, r19
    21ea:	20 91 95 21 	lds	r18, 0x2195	; 0x802195 <__brkval>
    21ee:	30 91 96 21 	lds	r19, 0x2196	; 0x802196 <__brkval+0x1>
    21f2:	28 17       	cp	r18, r24
    21f4:	39 07       	cpc	r19, r25
    21f6:	69 f4       	brne	.+26     	; 0x2212 <free+0x10c>
    21f8:	30 97       	sbiw	r30, 0x00	; 0
    21fa:	29 f4       	brne	.+10     	; 0x2206 <free+0x100>
    21fc:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <__flp>
    2200:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <__flp+0x1>
    2204:	02 c0       	rjmp	.+4      	; 0x220a <free+0x104>
    2206:	12 82       	std	Z+2, r1	; 0x02
    2208:	13 82       	std	Z+3, r1	; 0x03
    220a:	a0 93 95 21 	sts	0x2195, r26	; 0x802195 <__brkval>
    220e:	b0 93 96 21 	sts	0x2196, r27	; 0x802196 <__brkval+0x1>
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	08 95       	ret

00002218 <memset>:
    2218:	dc 01       	movw	r26, r24
    221a:	01 c0       	rjmp	.+2      	; 0x221e <memset+0x6>
    221c:	6d 93       	st	X+, r22
    221e:	41 50       	subi	r20, 0x01	; 1
    2220:	50 40       	sbci	r21, 0x00	; 0
    2222:	e0 f7       	brcc	.-8      	; 0x221c <memset+0x4>
    2224:	08 95       	ret

00002226 <fputc>:
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	fb 01       	movw	r30, r22
    2230:	23 81       	ldd	r18, Z+3	; 0x03
    2232:	21 fd       	sbrc	r18, 1
    2234:	03 c0       	rjmp	.+6      	; 0x223c <fputc+0x16>
    2236:	8f ef       	ldi	r24, 0xFF	; 255
    2238:	9f ef       	ldi	r25, 0xFF	; 255
    223a:	2c c0       	rjmp	.+88     	; 0x2294 <fputc+0x6e>
    223c:	22 ff       	sbrs	r18, 2
    223e:	16 c0       	rjmp	.+44     	; 0x226c <fputc+0x46>
    2240:	46 81       	ldd	r20, Z+6	; 0x06
    2242:	57 81       	ldd	r21, Z+7	; 0x07
    2244:	24 81       	ldd	r18, Z+4	; 0x04
    2246:	35 81       	ldd	r19, Z+5	; 0x05
    2248:	42 17       	cp	r20, r18
    224a:	53 07       	cpc	r21, r19
    224c:	44 f4       	brge	.+16     	; 0x225e <fputc+0x38>
    224e:	a0 81       	ld	r26, Z
    2250:	b1 81       	ldd	r27, Z+1	; 0x01
    2252:	9d 01       	movw	r18, r26
    2254:	2f 5f       	subi	r18, 0xFF	; 255
    2256:	3f 4f       	sbci	r19, 0xFF	; 255
    2258:	20 83       	st	Z, r18
    225a:	31 83       	std	Z+1, r19	; 0x01
    225c:	8c 93       	st	X, r24
    225e:	26 81       	ldd	r18, Z+6	; 0x06
    2260:	37 81       	ldd	r19, Z+7	; 0x07
    2262:	2f 5f       	subi	r18, 0xFF	; 255
    2264:	3f 4f       	sbci	r19, 0xFF	; 255
    2266:	26 83       	std	Z+6, r18	; 0x06
    2268:	37 83       	std	Z+7, r19	; 0x07
    226a:	14 c0       	rjmp	.+40     	; 0x2294 <fputc+0x6e>
    226c:	8b 01       	movw	r16, r22
    226e:	ec 01       	movw	r28, r24
    2270:	fb 01       	movw	r30, r22
    2272:	00 84       	ldd	r0, Z+8	; 0x08
    2274:	f1 85       	ldd	r31, Z+9	; 0x09
    2276:	e0 2d       	mov	r30, r0
    2278:	19 95       	eicall
    227a:	89 2b       	or	r24, r25
    227c:	e1 f6       	brne	.-72     	; 0x2236 <fputc+0x10>
    227e:	d8 01       	movw	r26, r16
    2280:	16 96       	adiw	r26, 0x06	; 6
    2282:	8d 91       	ld	r24, X+
    2284:	9c 91       	ld	r25, X
    2286:	17 97       	sbiw	r26, 0x07	; 7
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	16 96       	adiw	r26, 0x06	; 6
    228c:	8d 93       	st	X+, r24
    228e:	9c 93       	st	X, r25
    2290:	17 97       	sbiw	r26, 0x07	; 7
    2292:	ce 01       	movw	r24, r28
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	08 95       	ret

0000229e <_exit>:
    229e:	f8 94       	cli

000022a0 <__stop_program>:
    22a0:	ff cf       	rjmp	.-2      	; 0x22a0 <__stop_program>
