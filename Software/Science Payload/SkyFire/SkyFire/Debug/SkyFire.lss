
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00802000  00003b36  00003bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  008020ae  008020ae  00003c78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00003d18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014528  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b69  00000000  00000000  00018718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008e13  00000000  00000000  0001d281  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000106c  00000000  00000000  00026094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d25f  00000000  00000000  00027100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045d6  00000000  00000000  0005435f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000478  00000000  00000000  00058935  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003459  00000000  00000000  00058dad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__vector_47>
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f6 c0       	rjmp	.+492    	; 0x2d6 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
     102:	00 00       	nop
     104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
     106:	00 00       	nop
     108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
     112:	00 00       	nop
     114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
     116:	00 00       	nop
     118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
     136:	00 00       	nop
     138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
     142:	00 00       	nop
     144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
     146:	00 00       	nop
     148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
     152:	00 00       	nop
     154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
     156:	00 00       	nop
     158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
     162:	00 00       	nop
     164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
     166:	00 00       	nop
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__vector_91>
     170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
     172:	00 00       	nop
     174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
     176:	00 00       	nop
     178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
     182:	00 00       	nop
     184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
     186:	00 00       	nop
     188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
     192:	00 00       	nop
     194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
     196:	00 00       	nop
     198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6e c0       	rjmp	.+220    	; 0x2d6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <ms5607_convert_d2+0x28>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	63 64       	ori	r22, 0x43	; 67
     280:	69 6e       	ori	r22, 0xE9	; 233
     282:	6f 70       	andi	r22, 0x0F	; 15
     284:	73 75       	andi	r23, 0x53	; 83
     286:	78 58       	subi	r23, 0x88	; 136
     288:	5b 00       	.word	0x005b	; ????

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df e3       	ldi	r29, 0x3F	; 63
     294:	de bf       	out	0x3e, r29	; 62
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0c bf       	out	0x3c, r16	; 60
     29a:	18 be       	out	0x38, r1	; 56
     29c:	19 be       	out	0x39, r1	; 57
     29e:	1a be       	out	0x3a, r1	; 58
     2a0:	1b be       	out	0x3b, r1	; 59

000002a2 <__do_copy_data>:
     2a2:	10 e2       	ldi	r17, 0x20	; 32
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e2       	ldi	r27, 0x20	; 32
     2a8:	e6 e3       	ldi	r30, 0x36	; 54
     2aa:	fb e3       	ldi	r31, 0x3B	; 59
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	ae 3a       	cpi	r26, 0xAE	; 174
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>
     2bc:	1b be       	out	0x3b, r1	; 59

000002be <__do_clear_bss>:
     2be:	21 e2       	ldi	r18, 0x21	; 33
     2c0:	ae ea       	ldi	r26, 0xAE	; 174
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	aa 38       	cpi	r26, 0x8A	; 138
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 1f 0c 	call	0x183e	; 0x183e <main>
     2d2:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2e2:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <stdio_base>
     2e6:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <stdio_base+0x1>
     2ea:	e0 91 00 21 	lds	r30, 0x2100	; 0x802100 <ptr_get>
     2ee:	f0 91 01 21 	lds	r31, 0x2101	; 0x802101 <ptr_get+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	19 95       	eicall
	return c;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     30a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     30c:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <stdio_base>
     310:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <stdio_base+0x1>
     314:	e0 91 02 21 	lds	r30, 0x2102	; 0x802102 <ptr_put>
     318:	f0 91 03 21 	lds	r31, 0x2103	; 0x802103 <ptr_put+0x1>
     31c:	19 95       	eicall
     31e:	99 23       	and	r25, r25
     320:	1c f0       	brlt	.+6      	; 0x328 <_write+0x1e>
		return -1;
	}
	return 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <adca_callback>
     36e:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <adca_callback>
     3e8:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <adca_callback>
     462:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <adca_callback>
     4dc:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     516:	fc 01       	movw	r30, r24
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	95 ff       	sbrs	r25, 5
     51c:	fd cf       	rjmp	.-6      	; 0x518 <usart_putchar+0x2>
     51e:	60 83       	st	Z, r22
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <usart_getchar>:
     526:	fc 01       	movw	r30, r24
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	99 23       	and	r25, r25
     52c:	ec f7       	brge	.-6      	; 0x528 <usart_getchar+0x2>
     52e:	80 81       	ld	r24, Z
     530:	08 95       	ret

00000532 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     532:	4f 92       	push	r4
     534:	5f 92       	push	r5
     536:	6f 92       	push	r6
     538:	7f 92       	push	r7
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	7c 01       	movw	r14, r24
     54e:	4a 01       	movw	r8, r20
     550:	5b 01       	movw	r10, r22
     552:	28 01       	movw	r4, r16
     554:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     556:	fc 01       	movw	r30, r24
     558:	84 81       	ldd	r24, Z+4	; 0x04
     55a:	82 ff       	sbrs	r24, 2
     55c:	16 c0       	rjmp	.+44     	; 0x58a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     55e:	d9 01       	movw	r26, r18
     560:	c8 01       	movw	r24, r16
     562:	68 94       	set
     564:	12 f8       	bld	r1, 2
     566:	b6 95       	lsr	r27
     568:	a7 95       	ror	r26
     56a:	97 95       	ror	r25
     56c:	87 95       	ror	r24
     56e:	16 94       	lsr	r1
     570:	d1 f7       	brne	.-12     	; 0x566 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     572:	b9 01       	movw	r22, r18
     574:	a8 01       	movw	r20, r16
     576:	03 2e       	mov	r0, r19
     578:	36 e1       	ldi	r19, 0x16	; 22
     57a:	76 95       	lsr	r23
     57c:	67 95       	ror	r22
     57e:	57 95       	ror	r21
     580:	47 95       	ror	r20
     582:	3a 95       	dec	r19
     584:	d1 f7       	brne	.-12     	; 0x57a <usart_set_baudrate+0x48>
     586:	30 2d       	mov	r19, r0
     588:	15 c0       	rjmp	.+42     	; 0x5b4 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     58a:	d9 01       	movw	r26, r18
     58c:	c8 01       	movw	r24, r16
     58e:	68 94       	set
     590:	13 f8       	bld	r1, 3
     592:	b6 95       	lsr	r27
     594:	a7 95       	ror	r26
     596:	97 95       	ror	r25
     598:	87 95       	ror	r24
     59a:	16 94       	lsr	r1
     59c:	d1 f7       	brne	.-12     	; 0x592 <usart_set_baudrate+0x60>
		min_rate /= 2;
     59e:	b9 01       	movw	r22, r18
     5a0:	a8 01       	movw	r20, r16
     5a2:	03 2e       	mov	r0, r19
     5a4:	37 e1       	ldi	r19, 0x17	; 23
     5a6:	76 95       	lsr	r23
     5a8:	67 95       	ror	r22
     5aa:	57 95       	ror	r21
     5ac:	47 95       	ror	r20
     5ae:	3a 95       	dec	r19
     5b0:	d1 f7       	brne	.-12     	; 0x5a6 <usart_set_baudrate+0x74>
     5b2:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     5b4:	88 15       	cp	r24, r8
     5b6:	99 05       	cpc	r25, r9
     5b8:	aa 05       	cpc	r26, r10
     5ba:	bb 05       	cpc	r27, r11
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <usart_set_baudrate+0x8e>
     5be:	a6 c0       	rjmp	.+332    	; 0x70c <usart_set_baudrate+0x1da>
     5c0:	84 16       	cp	r8, r20
     5c2:	95 06       	cpc	r9, r21
     5c4:	a6 06       	cpc	r10, r22
     5c6:	b7 06       	cpc	r11, r23
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <usart_set_baudrate+0x9a>
     5ca:	a2 c0       	rjmp	.+324    	; 0x710 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5cc:	f7 01       	movw	r30, r14
     5ce:	84 81       	ldd	r24, Z+4	; 0x04
     5d0:	82 fd       	sbrc	r24, 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <usart_set_baudrate+0xaa>
		baud *= 2;
     5d4:	88 0c       	add	r8, r8
     5d6:	99 1c       	adc	r9, r9
     5d8:	aa 1c       	adc	r10, r10
     5da:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     5dc:	c3 01       	movw	r24, r6
     5de:	b2 01       	movw	r22, r4
     5e0:	a5 01       	movw	r20, r10
     5e2:	94 01       	movw	r18, r8
     5e4:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     5e8:	2f 3f       	cpi	r18, 0xFF	; 255
     5ea:	31 05       	cpc	r19, r1
     5ec:	41 05       	cpc	r20, r1
     5ee:	51 05       	cpc	r21, r1
     5f0:	08 f4       	brcc	.+2      	; 0x5f4 <usart_set_baudrate+0xc2>
     5f2:	90 c0       	rjmp	.+288    	; 0x714 <usart_set_baudrate+0x1e2>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e0       	ldi	r26, 0x00	; 0
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	c9 ef       	ldi	r28, 0xF9	; 249
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <usart_set_baudrate+0xd8>
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	4a 07       	cpc	r20, r26
     606:	5b 07       	cpc	r21, r27
     608:	58 f0       	brcs	.+22     	; 0x620 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	aa 1f       	adc	r26, r26
     610:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     612:	cd 3f       	cpi	r28, 0xFD	; 253
     614:	0c f4       	brge	.+2      	; 0x618 <usart_set_baudrate+0xe6>
			limit |= 1;
     616:	81 60       	ori	r24, 0x01	; 1
     618:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     61a:	c7 30       	cpi	r28, 0x07	; 7
     61c:	89 f7       	brne	.-30     	; 0x600 <usart_set_baudrate+0xce>
     61e:	4f c0       	rjmp	.+158    	; 0x6be <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     620:	cc 23       	and	r28, r28
     622:	0c f0       	brlt	.+2      	; 0x626 <usart_set_baudrate+0xf4>
     624:	4c c0       	rjmp	.+152    	; 0x6be <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     626:	d5 01       	movw	r26, r10
     628:	c4 01       	movw	r24, r8
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	aa 1f       	adc	r26, r26
     630:	bb 1f       	adc	r27, r27
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	aa 1f       	adc	r26, r26
     638:	bb 1f       	adc	r27, r27
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	aa 1f       	adc	r26, r26
     640:	bb 1f       	adc	r27, r27
     642:	48 1a       	sub	r4, r24
     644:	59 0a       	sbc	r5, r25
     646:	6a 0a       	sbc	r6, r26
     648:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     64a:	ce 3f       	cpi	r28, 0xFE	; 254
     64c:	f4 f4       	brge	.+60     	; 0x68a <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     64e:	8d ef       	ldi	r24, 0xFD	; 253
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	8c 1b       	sub	r24, r28
     654:	91 09       	sbc	r25, r1
     656:	c7 fd       	sbrc	r28, 7
     658:	93 95       	inc	r25
     65a:	04 c0       	rjmp	.+8      	; 0x664 <usart_set_baudrate+0x132>
     65c:	44 0c       	add	r4, r4
     65e:	55 1c       	adc	r5, r5
     660:	66 1c       	adc	r6, r6
     662:	77 1c       	adc	r7, r7
     664:	8a 95       	dec	r24
     666:	d2 f7       	brpl	.-12     	; 0x65c <usart_set_baudrate+0x12a>
     668:	d5 01       	movw	r26, r10
     66a:	c4 01       	movw	r24, r8
     66c:	b6 95       	lsr	r27
     66e:	a7 95       	ror	r26
     670:	97 95       	ror	r25
     672:	87 95       	ror	r24
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	64 0d       	add	r22, r4
     67a:	75 1d       	adc	r23, r5
     67c:	86 1d       	adc	r24, r6
     67e:	97 1d       	adc	r25, r7
     680:	a5 01       	movw	r20, r10
     682:	94 01       	movw	r18, r8
     684:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__udivmodsi4>
     688:	37 c0       	rjmp	.+110    	; 0x6f8 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	8c 0f       	add	r24, r28
     68e:	a5 01       	movw	r20, r10
     690:	94 01       	movw	r18, r8
     692:	04 c0       	rjmp	.+8      	; 0x69c <usart_set_baudrate+0x16a>
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	44 1f       	adc	r20, r20
     69a:	55 1f       	adc	r21, r21
     69c:	8a 95       	dec	r24
     69e:	d2 f7       	brpl	.-12     	; 0x694 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     6a0:	da 01       	movw	r26, r20
     6a2:	c9 01       	movw	r24, r18
     6a4:	b6 95       	lsr	r27
     6a6:	a7 95       	ror	r26
     6a8:	97 95       	ror	r25
     6aa:	87 95       	ror	r24
     6ac:	bc 01       	movw	r22, r24
     6ae:	cd 01       	movw	r24, r26
     6b0:	64 0d       	add	r22, r4
     6b2:	75 1d       	adc	r23, r5
     6b4:	86 1d       	adc	r24, r6
     6b6:	97 1d       	adc	r25, r7
     6b8:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__udivmodsi4>
     6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	8c 0f       	add	r24, r28
     6c2:	a5 01       	movw	r20, r10
     6c4:	94 01       	movw	r18, r8
     6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <usart_set_baudrate+0x19e>
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	44 1f       	adc	r20, r20
     6ce:	55 1f       	adc	r21, r21
     6d0:	8a 95       	dec	r24
     6d2:	d2 f7       	brpl	.-12     	; 0x6c8 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     6d4:	da 01       	movw	r26, r20
     6d6:	c9 01       	movw	r24, r18
     6d8:	b6 95       	lsr	r27
     6da:	a7 95       	ror	r26
     6dc:	97 95       	ror	r25
     6de:	87 95       	ror	r24
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	64 0d       	add	r22, r4
     6e6:	75 1d       	adc	r23, r5
     6e8:	86 1d       	adc	r24, r6
     6ea:	97 1d       	adc	r25, r7
     6ec:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__udivmodsi4>
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	31 09       	sbc	r19, r1
     6f4:	41 09       	sbc	r20, r1
     6f6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     6f8:	83 2f       	mov	r24, r19
     6fa:	8f 70       	andi	r24, 0x0F	; 15
     6fc:	c2 95       	swap	r28
     6fe:	c0 7f       	andi	r28, 0xF0	; 240
     700:	c8 2b       	or	r28, r24
     702:	f7 01       	movw	r30, r14
     704:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     706:	26 83       	std	Z+6, r18	; 0x06

	return true;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	18 c0       	rjmp	.+48     	; 0x73c <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	16 c0       	rjmp	.+44     	; 0x73c <usart_set_baudrate+0x20a>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	14 c0       	rjmp	.+40     	; 0x73c <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     714:	d5 01       	movw	r26, r10
     716:	c4 01       	movw	r24, r8
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	aa 1f       	adc	r26, r26
     71e:	bb 1f       	adc	r27, r27
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	aa 1f       	adc	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	aa 1f       	adc	r26, r26
     72e:	bb 1f       	adc	r27, r27
     730:	48 1a       	sub	r4, r24
     732:	59 0a       	sbc	r5, r25
     734:	6a 0a       	sbc	r6, r26
     736:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     738:	c9 ef       	ldi	r28, 0xF9	; 249
     73a:	89 cf       	rjmp	.-238    	; 0x64e <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	7f 90       	pop	r7
     750:	6f 90       	pop	r6
     752:	5f 90       	pop	r5
     754:	4f 90       	pop	r4
     756:	08 95       	ret

00000758 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	09 f4       	brne	.+2      	; 0x76a <usart_init_rs232+0x12>
     768:	be c0       	rjmp	.+380    	; 0x8e6 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     76a:	80 3c       	cpi	r24, 0xC0	; 192
     76c:	91 05       	cpc	r25, r1
     76e:	21 f4       	brne	.+8      	; 0x778 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     770:	60 e1       	ldi	r22, 0x10	; 16
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	76 d3       	rcall	.+1772   	; 0xe62 <sysclk_enable_module>
     776:	b7 c0       	rjmp	.+366    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     778:	c1 15       	cp	r28, r1
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	d8 07       	cpc	r29, r24
     77e:	21 f4       	brne	.+8      	; 0x788 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     780:	64 e0       	ldi	r22, 0x04	; 4
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	6e d3       	rcall	.+1756   	; 0xe62 <sysclk_enable_module>
     786:	af c0       	rjmp	.+350    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     788:	c0 38       	cpi	r28, 0x80	; 128
     78a:	e1 e0       	ldi	r30, 0x01	; 1
     78c:	de 07       	cpc	r29, r30
     78e:	21 f4       	brne	.+8      	; 0x798 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     790:	62 e0       	ldi	r22, 0x02	; 2
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	66 d3       	rcall	.+1740   	; 0xe62 <sysclk_enable_module>
     796:	a7 c0       	rjmp	.+334    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     798:	c1 15       	cp	r28, r1
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     79e:	21 f4       	brne	.+8      	; 0x7a8 <usart_init_rs232+0x50>
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	5e d3       	rcall	.+1724   	; 0xe62 <sysclk_enable_module>
     7a6:	9f c0       	rjmp	.+318    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     7a8:	c0 38       	cpi	r28, 0x80	; 128
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <usart_init_rs232+0x60>
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	56 d3       	rcall	.+1708   	; 0xe62 <sysclk_enable_module>
     7b6:	97 c0       	rjmp	.+302    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     7b8:	c1 15       	cp	r28, r1
     7ba:	e2 e0       	ldi	r30, 0x02	; 2
     7bc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     7be:	21 f4       	brne	.+8      	; 0x7c8 <usart_init_rs232+0x70>
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	4e d3       	rcall	.+1692   	; 0xe62 <sysclk_enable_module>
     7c6:	8f c0       	rjmp	.+286    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     7c8:	c0 32       	cpi	r28, 0x20	; 32
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     7ce:	21 f4       	brne	.+8      	; 0x7d8 <usart_init_rs232+0x80>
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	46 d3       	rcall	.+1676   	; 0xe62 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     7d6:	87 c0       	rjmp	.+270    	; 0x8e6 <usart_init_rs232+0x18e>
     7d8:	c1 15       	cp	r28, r1
     7da:	88 e0       	ldi	r24, 0x08	; 8
     7dc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     7de:	21 f4       	brne	.+8      	; 0x7e8 <usart_init_rs232+0x90>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	3e d3       	rcall	.+1660   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     7e6:	7f c0       	rjmp	.+254    	; 0x8e6 <usart_init_rs232+0x18e>
     7e8:	c1 15       	cp	r28, r1
     7ea:	e9 e0       	ldi	r30, 0x09	; 9
     7ec:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <usart_init_rs232+0xa0>
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	36 d3       	rcall	.+1644   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     7f6:	77 c0       	rjmp	.+238    	; 0x8e6 <usart_init_rs232+0x18e>
     7f8:	c1 15       	cp	r28, r1
     7fa:	fa e0       	ldi	r31, 0x0A	; 10
     7fc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     7fe:	21 f4       	brne	.+8      	; 0x808 <usart_init_rs232+0xb0>
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	2e d3       	rcall	.+1628   	; 0xe62 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     806:	6f c0       	rjmp	.+222    	; 0x8e6 <usart_init_rs232+0x18e>
     808:	c0 34       	cpi	r28, 0x40	; 64
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     80e:	21 f4       	brne	.+8      	; 0x818 <usart_init_rs232+0xc0>
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	26 d3       	rcall	.+1612   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     816:	67 c0       	rjmp	.+206    	; 0x8e6 <usart_init_rs232+0x18e>
     818:	c0 34       	cpi	r28, 0x40	; 64
     81a:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     81c:	de 07       	cpc	r29, r30
     81e:	21 f4       	brne	.+8      	; 0x828 <usart_init_rs232+0xd0>
     820:	62 e0       	ldi	r22, 0x02	; 2
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	1e d3       	rcall	.+1596   	; 0xe62 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     826:	5f c0       	rjmp	.+190    	; 0x8e6 <usart_init_rs232+0x18e>
     828:	c0 39       	cpi	r28, 0x90	; 144
     82a:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     82c:	df 07       	cpc	r29, r31
     82e:	21 f4       	brne	.+8      	; 0x838 <usart_init_rs232+0xe0>
     830:	64 e0       	ldi	r22, 0x04	; 4
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	16 d3       	rcall	.+1580   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     836:	57 c0       	rjmp	.+174    	; 0x8e6 <usart_init_rs232+0x18e>
     838:	c0 39       	cpi	r28, 0x90	; 144
     83a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     83c:	d8 07       	cpc	r29, r24
     83e:	21 f4       	brne	.+8      	; 0x848 <usart_init_rs232+0xf0>
     840:	64 e0       	ldi	r22, 0x04	; 4
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	0e d3       	rcall	.+1564   	; 0xe62 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     846:	4f c0       	rjmp	.+158    	; 0x8e6 <usart_init_rs232+0x18e>
     848:	c0 39       	cpi	r28, 0x90	; 144
     84a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     84c:	de 07       	cpc	r29, r30
     84e:	21 f4       	brne	.+8      	; 0x858 <usart_init_rs232+0x100>
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     854:	06 d3       	rcall	.+1548   	; 0xe62 <sysclk_enable_module>
     856:	47 c0       	rjmp	.+142    	; 0x8e6 <usart_init_rs232+0x18e>
     858:	c0 3c       	cpi	r28, 0xC0	; 192
     85a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     85c:	df 07       	cpc	r29, r31
     85e:	21 f4       	brne	.+8      	; 0x868 <usart_init_rs232+0x110>
     860:	68 e0       	ldi	r22, 0x08	; 8
     862:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     864:	fe d2       	rcall	.+1532   	; 0xe62 <sysclk_enable_module>
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <usart_init_rs232+0x18e>
     868:	c0 3c       	cpi	r28, 0xC0	; 192
     86a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     86c:	d8 07       	cpc	r29, r24
     86e:	21 f4       	brne	.+8      	; 0x878 <usart_init_rs232+0x120>
     870:	68 e0       	ldi	r22, 0x08	; 8
     872:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     874:	f6 d2       	rcall	.+1516   	; 0xe62 <sysclk_enable_module>
     876:	37 c0       	rjmp	.+110    	; 0x8e6 <usart_init_rs232+0x18e>
     878:	c0 3a       	cpi	r28, 0xA0	; 160
     87a:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     87c:	de 07       	cpc	r29, r30
     87e:	21 f4       	brne	.+8      	; 0x888 <usart_init_rs232+0x130>
     880:	60 e1       	ldi	r22, 0x10	; 16
     882:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     884:	ee d2       	rcall	.+1500   	; 0xe62 <sysclk_enable_module>
     886:	2f c0       	rjmp	.+94     	; 0x8e6 <usart_init_rs232+0x18e>
     888:	c0 3a       	cpi	r28, 0xA0	; 160
     88a:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     88c:	df 07       	cpc	r29, r31
     88e:	21 f4       	brne	.+8      	; 0x898 <usart_init_rs232+0x140>
     890:	60 e1       	ldi	r22, 0x10	; 16
     892:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     894:	e6 d2       	rcall	.+1484   	; 0xe62 <sysclk_enable_module>
     896:	27 c0       	rjmp	.+78     	; 0x8e6 <usart_init_rs232+0x18e>
     898:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	d8 07       	cpc	r29, r24
     89e:	21 f4       	brne	.+8      	; 0x8a8 <usart_init_rs232+0x150>
     8a0:	60 e1       	ldi	r22, 0x10	; 16
     8a2:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     8a4:	de d2       	rcall	.+1468   	; 0xe62 <sysclk_enable_module>
     8a6:	1f c0       	rjmp	.+62     	; 0x8e6 <usart_init_rs232+0x18e>
     8a8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     8aa:	e8 e0       	ldi	r30, 0x08	; 8
     8ac:	de 07       	cpc	r29, r30
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <usart_init_rs232+0x160>
     8b0:	60 e2       	ldi	r22, 0x20	; 32
     8b2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     8b4:	d6 d2       	rcall	.+1452   	; 0xe62 <sysclk_enable_module>
     8b6:	17 c0       	rjmp	.+46     	; 0x8e6 <usart_init_rs232+0x18e>
     8b8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     8ba:	f9 e0       	ldi	r31, 0x09	; 9
     8bc:	df 07       	cpc	r29, r31
     8be:	21 f4       	brne	.+8      	; 0x8c8 <usart_init_rs232+0x170>
     8c0:	60 e2       	ldi	r22, 0x20	; 32
     8c2:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     8c4:	ce d2       	rcall	.+1436   	; 0xe62 <sysclk_enable_module>
     8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <usart_init_rs232+0x18e>
     8c8:	c0 38       	cpi	r28, 0x80	; 128
     8ca:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     8cc:	d8 07       	cpc	r29, r24
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <usart_init_rs232+0x180>
     8d0:	60 e4       	ldi	r22, 0x40	; 64
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	c6 d2       	rcall	.+1420   	; 0xe62 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <usart_init_rs232+0x18e>
     8d8:	c0 3a       	cpi	r28, 0xA0	; 160
     8da:	e4 e0       	ldi	r30, 0x04	; 4
     8dc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     8de:	19 f4       	brne	.+6      	; 0x8e6 <usart_init_rs232+0x18e>
     8e0:	60 e4       	ldi	r22, 0x40	; 64
     8e2:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     8e4:	be d2       	rcall	.+1404   	; 0xe62 <sysclk_enable_module>
     8e6:	8d 81       	ldd	r24, Y+5	; 0x05
     8e8:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     8ea:	8d 83       	std	Y+5, r24	; 0x05
     8ec:	f8 01       	movw	r30, r16
     8ee:	95 81       	ldd	r25, Z+5	; 0x05
     8f0:	84 81       	ldd	r24, Z+4	; 0x04
     8f2:	89 2b       	or	r24, r25
     8f4:	96 81       	ldd	r25, Z+6	; 0x06
     8f6:	91 11       	cpse	r25, r1
     8f8:	98 e0       	ldi	r25, 0x08	; 8
     8fa:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     8fc:	8d 83       	std	Y+5, r24	; 0x05
     8fe:	f8 01       	movw	r30, r16
     900:	40 81       	ld	r20, Z
     902:	51 81       	ldd	r21, Z+1	; 0x01
     904:	62 81       	ldd	r22, Z+2	; 0x02
     906:	73 81       	ldd	r23, Z+3	; 0x03
     908:	00 e0       	ldi	r16, 0x00	; 0
     90a:	18 e4       	ldi	r17, 0x48	; 72
     90c:	28 ee       	ldi	r18, 0xE8	; 232
     90e:	31 e0       	ldi	r19, 0x01	; 1
     910:	ce 01       	movw	r24, r28
     912:	0f de       	rcall	.-994    	; 0x532 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	98 60       	ori	r25, 0x08	; 8
     918:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	90 61       	ori	r25, 0x10	; 16
     91e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     92a:	08 95       	ret

0000092c <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= 0x08; // Sets A3 to output
     92c:	e0 e0       	ldi	r30, 0x00	; 0
     92e:	f6 e0       	ldi	r31, 0x06	; 6
     930:	80 81       	ld	r24, Z
     932:	88 60       	ori	r24, 0x08	; 8
     934:	80 83       	st	Z, r24
     936:	08 95       	ret

00000938 <cam_switch>:
}

void cam_switch(void){
	PORTA.OUT ^= 0x08; // Changes A3 from high to low or vice-versa
     938:	e0 e0       	ldi	r30, 0x00	; 0
     93a:	f6 e0       	ldi	r31, 0x06	; 6
     93c:	94 81       	ldd	r25, Z+4	; 0x04
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	89 27       	eor	r24, r25
     942:	84 83       	std	Z+4, r24	; 0x04
     944:	08 95       	ret

00000946 <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	27 97       	sbiw	r28, 0x07	; 7
     950:	cd bf       	out	0x3d, r28	; 61
     952:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     954:	60 e2       	ldi	r22, 0x20	; 32
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	84 d2       	rcall	.+1288   	; 0xe62 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     95a:	e0 e6       	ldi	r30, 0x60	; 96
     95c:	f6 e0       	ldi	r31, 0x06	; 6
     95e:	80 81       	ld	r24, Z
     960:	80 68       	ori	r24, 0x80	; 128
     962:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	f0 e2       	ldi	r31, 0x20	; 32
     968:	84 81       	ldd	r24, Z+4	; 0x04
     96a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     96c:	85 81       	ldd	r24, Z+5	; 0x05
     96e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     970:	86 81       	ldd	r24, Z+6	; 0x06
     972:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	a2 81       	ldd	r26, Z+2	; 0x02
     97a:	b3 81       	ldd	r27, Z+3	; 0x03
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	ab 83       	std	Y+3, r26	; 0x03
     982:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     984:	60 e2       	ldi	r22, 0x20	; 32
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	6c d2       	rcall	.+1240   	; 0xe62 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     98a:	be 01       	movw	r22, r28
     98c:	6f 5f       	subi	r22, 0xFF	; 255
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	80 eb       	ldi	r24, 0xB0	; 176
     992:	99 e0       	ldi	r25, 0x09	; 9
     994:	e1 de       	rcall	.-574    	; 0x758 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     996:	27 96       	adiw	r28, 0x07	; 7
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     9a4:	61 50       	subi	r22, 0x01	; 1
     9a6:	71 09       	sbc	r23, r1
     9a8:	81 09       	sbc	r24, r1
     9aa:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     9ac:	61 15       	cp	r22, r1
     9ae:	71 05       	cpc	r23, r1
     9b0:	81 05       	cpc	r24, r1
     9b2:	91 05       	cpc	r25, r1
     9b4:	b9 f7       	brne	.-18     	; 0x9a4 <__portable_avr_delay_cycles+0x2>
     9b6:	08 95       	ret

000009b8 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     9b8:	e0 e4       	ldi	r30, 0x40	; 64
     9ba:	f6 e0       	ldi	r31, 0x06	; 6
     9bc:	94 81       	ldd	r25, Z+4	; 0x04
     9be:	80 e1       	ldi	r24, 0x10	; 16
     9c0:	89 27       	eor	r24, r25
     9c2:	84 83       	std	Z+4, r24	; 0x04
     9c4:	08 95       	ret

000009c6 <ms5607_init>:
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	// Resets the ms5607
	flip_ms5607();
     9c6:	f8 df       	rcall	.-16     	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     9c8:	8e e1       	ldi	r24, 0x1E	; 30
     9ca:	7d d0       	rcall	.+250    	; 0xac6 <spi_write>
	delay_ms(3);
     9cc:	60 e8       	ldi	r22, 0x80	; 128
     9ce:	7e e3       	ldi	r23, 0x3E	; 62
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     9d4:	e6 df       	rcall	.-52     	; 0x9a2 <__portable_avr_delay_cycles>
     9d6:	f0 df       	rcall	.-32     	; 0x9b8 <flip_ms5607>
	delay_ms(2);
     9d8:	6b ea       	ldi	r22, 0xAB	; 171
     9da:	79 e2       	ldi	r23, 0x29	; 41
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	e0 cf       	rjmp	.-64     	; 0x9a2 <__portable_avr_delay_cycles>
     9e2:	08 95       	ret

000009e4 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     9ea:	e6 df       	rcall	.-52     	; 0x9b8 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     9ec:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     9ee:	6b d0       	rcall	.+214    	; 0xac6 <spi_write>
     9f0:	5a d0       	rcall	.+180    	; 0xaa6 <spi_read>
     9f2:	c8 2f       	mov	r28, r24
     9f4:	d0 e0       	ldi	r29, 0x00	; 0
     9f6:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     9f8:	cc 27       	eor	r28, r28
     9fa:	55 d0       	rcall	.+170    	; 0xaa6 <spi_read>
     9fc:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     9fe:	dc df       	rcall	.-72     	; 0x9b8 <flip_ms5607>
     a00:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <ms5607_convert_d1>:
     a08:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     a0a:	df 92       	push	r13
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     a10:	d3 df       	rcall	.-90     	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     a12:	88 e4       	ldi	r24, 0x48	; 72
     a14:	58 d0       	rcall	.+176    	; 0xac6 <spi_write>
	delay_ms(10);
     a16:	66 e5       	ldi	r22, 0x56	; 86
     a18:	70 ed       	ldi	r23, 0xD0	; 208
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a1e:	c1 df       	rcall	.-126    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a20:	cb df       	rcall	.-106    	; 0x9b8 <flip_ms5607>
     a22:	ca df       	rcall	.-108    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	4f d0       	rcall	.+158    	; 0xac6 <spi_write>
     a28:	3e d0       	rcall	.+124    	; 0xaa6 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a2a:	c8 2e       	mov	r12, r24
     a2c:	d1 2c       	mov	r13, r1
     a2e:	e1 2c       	mov	r14, r1
     a30:	f1 2c       	mov	r15, r1
     a32:	76 01       	movw	r14, r12
     a34:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a36:	cc 24       	eor	r12, r12
     a38:	36 d0       	rcall	.+108    	; 0xaa6 <spi_read>
     a3a:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a3c:	34 d0       	rcall	.+104    	; 0xaa6 <spi_read>
     a3e:	c8 2a       	or	r12, r24
     a40:	bb df       	rcall	.-138    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a42:	c7 01       	movw	r24, r14
     a44:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <ms5607_convert_d2>:
     a50:	cf 92       	push	r12
     a52:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     a58:	af df       	rcall	.-162    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     a5a:	88 e5       	ldi	r24, 0x58	; 88
     a5c:	34 d0       	rcall	.+104    	; 0xac6 <spi_write>
	delay_ms(10);
     a5e:	66 e5       	ldi	r22, 0x56	; 86
     a60:	70 ed       	ldi	r23, 0xD0	; 208
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a66:	9d df       	rcall	.-198    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a68:	a7 df       	rcall	.-178    	; 0x9b8 <flip_ms5607>
     a6a:	a6 df       	rcall	.-180    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	2b d0       	rcall	.+86     	; 0xac6 <spi_write>
     a70:	1a d0       	rcall	.+52     	; 0xaa6 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	e1 2c       	mov	r14, r1
     a78:	f1 2c       	mov	r15, r1
     a7a:	76 01       	movw	r14, r12
     a7c:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a7e:	cc 24       	eor	r12, r12
     a80:	12 d0       	rcall	.+36     	; 0xaa6 <spi_read>
     a82:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a84:	10 d0       	rcall	.+32     	; 0xaa6 <spi_read>
     a86:	c8 2a       	or	r12, r24
     a88:	97 df       	rcall	.-210    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	08 95       	ret

00000a98 <spi_init>:
     a98:	68 e0       	ldi	r22, 0x08	; 8
     a9a:	83 e0       	ldi	r24, 0x03	; 3
	SPIC.CTRL = 0x51; //enables SPI and puts a  prescaler of 16
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     a9c:	e2 d1       	rcall	.+964    	; 0xe62 <sysclk_enable_module>
     a9e:	81 e5       	ldi	r24, 0x51	; 81
     aa0:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     aa4:	08 95       	ret

00000aa6 <spi_read>:

uint8_t spi_read(void)
{
	uint8_t iter_max = 100;
	uint8_t count = 0;
	SPIC.DATA = 0xFF; // make the DATA register something we know
     aa6:	e0 ec       	ldi	r30, 0xC0	; 192
     aa8:	f8 e0       	ldi	r31, 0x08	; 8
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS>>7) && count < iter_max){ // wait for the SPI interrupt flag to let us know the transfer is complete
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	88 23       	and	r24, r24
     ab2:	34 f0       	brlt	.+12     	; 0xac0 <spi_read+0x1a>
     ab4:	84 e6       	ldi	r24, 0x64	; 100
     ab6:	92 81       	ldd	r25, Z+2	; 0x02
     ab8:	99 23       	and	r25, r25
     aba:	14 f0       	brlt	.+4      	; 0xac0 <spi_read+0x1a>
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	d9 f7       	brne	.-10     	; 0xab6 <spi_read+0x10>
		count++;	
	}
	
	return SPIC.DATA; // return the data from this function
     ac0:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     ac4:	08 95       	ret

00000ac6 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     ac6:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     aca:	e0 ec       	ldi	r30, 0xC0	; 192
     acc:	f8 e0       	ldi	r31, 0x08	; 8
     ace:	82 81       	ldd	r24, Z+2	; 0x02
     ad0:	88 23       	and	r24, r24
     ad2:	ec f7       	brge	.-6      	; 0xace <spi_write+0x8>
     ad4:	08 95       	ret

00000ad6 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     adc:	24 dd       	rcall	.-1464   	; 0x526 <usart_getchar>
     ade:	88 83       	st	Y, r24
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     ae6:	17 cd       	rjmp	.-1490   	; 0x516 <usart_putchar>
}
     ae8:	08 95       	ret

00000aea <data_terminal_init>:

#include <asf.h>
#include "data_logger.h"

void data_terminal_init()
{
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	27 97       	sbiw	r28, 0x07	; 7
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     af8:	60 e1       	ldi	r22, 0x10	; 16
     afa:	85 e0       	ldi	r24, 0x05	; 5
     afc:	b2 d1       	rcall	.+868    	; 0xe62 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     afe:	e0 e8       	ldi	r30, 0x80	; 128
     b00:	f6 e0       	ldi	r31, 0x06	; 6
     b02:	80 81       	ld	r24, Z
     b04:	88 60       	ori	r24, 0x08	; 8
     b06:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     b08:	80 ea       	ldi	r24, 0xA0	; 160
     b0a:	9a e0       	ldi	r25, 0x0A	; 10
     b0c:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <stdio_base>
     b10:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     b14:	83 e7       	ldi	r24, 0x73	; 115
     b16:	95 e0       	ldi	r25, 0x05	; 5
     b18:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <ptr_put>
     b1c:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     b20:	8b e6       	ldi	r24, 0x6B	; 107
     b22:	95 e0       	ldi	r25, 0x05	; 5
     b24:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <ptr_get>
     b28:	90 93 01 21 	sts	0x2101, r25	; 0x802101 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     b2c:	ed e0       	ldi	r30, 0x0D	; 13
     b2e:	f0 e2       	ldi	r31, 0x20	; 32
     b30:	84 81       	ldd	r24, Z+4	; 0x04
     b32:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     b34:	85 81       	ldd	r24, Z+5	; 0x05
     b36:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     b38:	86 81       	ldd	r24, Z+6	; 0x06
     b3a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     b3c:	80 81       	ld	r24, Z
     b3e:	91 81       	ldd	r25, Z+1	; 0x01
     b40:	a2 81       	ldd	r26, Z+2	; 0x02
     b42:	b3 81       	ldd	r27, Z+3	; 0x03
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	ab 83       	std	Y+3, r26	; 0x03
     b4a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     b4c:	60 e1       	ldi	r22, 0x10	; 16
     b4e:	85 e0       	ldi	r24, 0x05	; 5
     b50:	88 d1       	rcall	.+784    	; 0xe62 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     b52:	be 01       	movw	r22, r28
     b54:	6f 5f       	subi	r22, 0xFF	; 255
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	80 ea       	ldi	r24, 0xA0	; 160
     b5a:	9a e0       	ldi	r25, 0x0A	; 10
     b5c:	fd dd       	rcall	.-1030   	; 0x758 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     b5e:	6c e6       	ldi	r22, 0x6C	; 108
     b60:	71 e0       	ldi	r23, 0x01	; 1
     b62:	85 e8       	ldi	r24, 0x85	; 133
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
     b6a:	27 96       	adiw	r28, 0x07	; 7
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <__portable_avr_delay_cycles>:
}

uint8_t XBEE_uart_read(void){
	uint8_t c = usart_getchar(XBEE_TERMINAL_SERIAL);
	return c;
}
     b76:	04 c0       	rjmp	.+8      	; 0xb80 <__portable_avr_delay_cycles+0xa>
     b78:	61 50       	subi	r22, 0x01	; 1
     b7a:	71 09       	sbc	r23, r1
     b7c:	81 09       	sbc	r24, r1
     b7e:	91 09       	sbc	r25, r1
     b80:	61 15       	cp	r22, r1
     b82:	71 05       	cpc	r23, r1
     b84:	81 05       	cpc	r24, r1
     b86:	91 05       	cpc	r25, r1
     b88:	b9 f7       	brne	.-18     	; 0xb78 <__portable_avr_delay_cycles+0x2>
     b8a:	08 95       	ret

00000b8c <XBEE_spi_init>:
     b8c:	e0 e4       	ldi	r30, 0x40	; 64
     b8e:	f6 e0       	ldi	r31, 0x06	; 6
     b90:	80 81       	ld	r24, Z
     b92:	84 60       	ori	r24, 0x04	; 4
     b94:	80 83       	st	Z, r24
     b96:	08 95       	ret

00000b98 <flip_XBEE>:
	flip_XBEE();
	return data;
}

void flip_XBEE(void){
	XBEE_SS_PORT.OUT ^= XBEE_SS_PIN;
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f6 e0       	ldi	r31, 0x06	; 6
     b9c:	94 81       	ldd	r25, Z+4	; 0x04
     b9e:	84 e0       	ldi	r24, 0x04	; 4
     ba0:	89 27       	eor	r24, r25
     ba2:	84 83       	std	Z+4, r24	; 0x04
     ba4:	08 95       	ret

00000ba6 <XBEE_spi_write>:
uint8_t XBEE_uart_read(void){
	uint8_t c = usart_getchar(XBEE_TERMINAL_SERIAL);
	return c;
}

void XBEE_spi_write(char* data){
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	ec 01       	movw	r28, r24
	flip_XBEE();
     bae:	f4 df       	rcall	.-24     	; 0xb98 <flip_XBEE>
	for(uint8_t i = 0; i < strlen(data); i++){
     bb0:	10 e0       	ldi	r17, 0x00	; 0
     bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <XBEE_spi_write+0x1a>
		spi_write((uint8_t) data[i]);
     bb4:	fe 01       	movw	r30, r28
     bb6:	e8 0f       	add	r30, r24
     bb8:	f9 1f       	adc	r31, r25
     bba:	80 81       	ld	r24, Z
     bbc:	84 df       	rcall	.-248    	; 0xac6 <spi_write>
	return c;
}

void XBEE_spi_write(char* data){
	flip_XBEE();
	for(uint8_t i = 0; i < strlen(data); i++){
     bbe:	1f 5f       	subi	r17, 0xFF	; 255
     bc0:	81 2f       	mov	r24, r17
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	fe 01       	movw	r30, r28
     bc6:	01 90       	ld	r0, Z+
     bc8:	00 20       	and	r0, r0
     bca:	e9 f7       	brne	.-6      	; 0xbc6 <XBEE_spi_write+0x20>
     bcc:	31 97       	sbiw	r30, 0x01	; 1
     bce:	ec 1b       	sub	r30, r28
     bd0:	fd 0b       	sbc	r31, r29
     bd2:	8e 17       	cp	r24, r30
     bd4:	9f 07       	cpc	r25, r31
     bd6:	70 f3       	brcs	.-36     	; 0xbb4 <XBEE_spi_write+0xe>
		spi_write((uint8_t) data[i]);
	}
	delay_ms(5);
     bd8:	6b e2       	ldi	r22, 0x2B	; 43
     bda:	78 e6       	ldi	r23, 0x68	; 104
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
	flip_XBEE();
     be0:	ca df       	rcall	.-108    	; 0xb76 <__portable_avr_delay_cycles>
     be2:	da df       	rcall	.-76     	; 0xb98 <flip_XBEE>
	//usart_putchar(XBEE_TERMINAL_SERIAL, 10);
}
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	08 95       	ret

00000bec <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	fc 01       	movw	r30, r24
     bf2:	41 15       	cp	r20, r1
     bf4:	51 05       	cpc	r21, r1
     bf6:	b1 f1       	breq	.+108    	; 0xc64 <rb16_write+0x78>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	db 01       	movw	r26, r22
     c04:	a8 0f       	add	r26, r24
     c06:	b9 1f       	adc	r27, r25
     c08:	8d 91       	ld	r24, X+
     c0a:	9c 91       	ld	r25, X
     c0c:	a2 81       	ldd	r26, Z+2	; 0x02
     c0e:	b3 81       	ldd	r27, Z+3	; 0x03
     c10:	aa 0f       	add	r26, r26
     c12:	bb 1f       	adc	r27, r27
     c14:	c6 81       	ldd	r28, Z+6	; 0x06
     c16:	d7 81       	ldd	r29, Z+7	; 0x07
     c18:	ac 0f       	add	r26, r28
     c1a:	bd 1f       	adc	r27, r29
     c1c:	8d 93       	st	X+, r24
     c1e:	9c 93       	st	X, r25
     c20:	82 81       	ldd	r24, Z+2	; 0x02
     c22:	93 81       	ldd	r25, Z+3	; 0x03
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	82 83       	std	Z+2, r24	; 0x02
     c28:	93 83       	std	Z+3, r25	; 0x03
     c2a:	a0 81       	ld	r26, Z
     c2c:	b1 81       	ldd	r27, Z+1	; 0x01
     c2e:	8a 17       	cp	r24, r26
     c30:	9b 07       	cpc	r25, r27
     c32:	11 f4       	brne	.+4      	; 0xc38 <rb16_write+0x4c>
     c34:	12 82       	std	Z+2, r1	; 0x02
     c36:	13 82       	std	Z+3, r1	; 0x03
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	c4 81       	ldd	r28, Z+4	; 0x04
     c3e:	d5 81       	ldd	r29, Z+5	; 0x05
     c40:	8c 17       	cp	r24, r28
     c42:	9d 07       	cpc	r25, r29
     c44:	49 f4       	brne	.+18     	; 0xc58 <rb16_write+0x6c>
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	a8 17       	cp	r26, r24
     c4a:	b9 07       	cpc	r27, r25
     c4c:	19 f0       	breq	.+6      	; 0xc54 <rb16_write+0x68>
     c4e:	84 83       	std	Z+4, r24	; 0x04
     c50:	95 83       	std	Z+5, r25	; 0x05
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <rb16_write+0x6c>
     c54:	14 82       	std	Z+4, r1	; 0x04
     c56:	15 82       	std	Z+5, r1	; 0x05
     c58:	2f 5f       	subi	r18, 0xFF	; 255
     c5a:	82 2f       	mov	r24, r18
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	84 17       	cp	r24, r20
     c60:	95 07       	cpc	r25, r21
     c62:	68 f2       	brcs	.-102    	; 0xbfe <rb16_write+0x12>
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <rb16_init>:
     c6a:	fc 01       	movw	r30, r24
     c6c:	12 82       	std	Z+2, r1	; 0x02
     c6e:	13 82       	std	Z+3, r1	; 0x03
     c70:	14 82       	std	Z+4, r1	; 0x04
     c72:	15 82       	std	Z+5, r1	; 0x05
     c74:	66 83       	std	Z+6, r22	; 0x06
     c76:	77 83       	std	Z+7, r23	; 0x07
     c78:	40 83       	st	Z, r20
     c7a:	51 83       	std	Z+1, r21	; 0x01
     c7c:	08 95       	ret

00000c7e <rb16_get_nth>:
     c7e:	dc 01       	movw	r26, r24
     c80:	12 96       	adiw	r26, 0x02	; 2
     c82:	ed 91       	ld	r30, X+
     c84:	fc 91       	ld	r31, X
     c86:	13 97       	sbiw	r26, 0x03	; 3
     c88:	cb 01       	movw	r24, r22
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	e8 17       	cp	r30, r24
     c8e:	f9 07       	cpc	r31, r25
     c90:	78 f0       	brcs	.+30     	; 0xcb0 <rb16_get_nth+0x32>
     c92:	e1 50       	subi	r30, 0x01	; 1
     c94:	f0 48       	sbci	r31, 0x80	; 128
     c96:	e6 1b       	sub	r30, r22
     c98:	f7 0b       	sbc	r31, r23
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	16 96       	adiw	r26, 0x06	; 6
     ca0:	8d 91       	ld	r24, X+
     ca2:	9c 91       	ld	r25, X
     ca4:	17 97       	sbiw	r26, 0x07	; 7
     ca6:	e8 0f       	add	r30, r24
     ca8:	f9 1f       	adc	r31, r25
     caa:	80 81       	ld	r24, Z
     cac:	91 81       	ldd	r25, Z+1	; 0x01
     cae:	08 95       	ret
     cb0:	2d 91       	ld	r18, X+
     cb2:	3c 91       	ld	r19, X
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	e1 50       	subi	r30, 0x01	; 1
     cbc:	f0 48       	sbci	r31, 0x80	; 128
     cbe:	e6 1b       	sub	r30, r22
     cc0:	f7 0b       	sbc	r31, r23
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	16 96       	adiw	r26, 0x06	; 6
     cc8:	8d 91       	ld	r24, X+
     cca:	9c 91       	ld	r25, X
     ccc:	17 97       	sbiw	r26, 0x07	; 7
     cce:	e8 0f       	add	r30, r24
     cd0:	f9 1f       	adc	r31, r25
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	08 95       	ret

00000cd8 <rb32_write>:
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	fc 01       	movw	r30, r24
     ce6:	41 15       	cp	r20, r1
     ce8:	51 05       	cpc	r21, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <rb32_write+0x16>
     cec:	3f c0       	rjmp	.+126    	; 0xd6c <rb32_write+0x94>
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	db 01       	movw	r26, r22
     cfe:	a8 0f       	add	r26, r24
     d00:	b9 1f       	adc	r27, r25
     d02:	cd 90       	ld	r12, X+
     d04:	dd 90       	ld	r13, X+
     d06:	ed 90       	ld	r14, X+
     d08:	fc 90       	ld	r15, X
     d0a:	a2 81       	ldd	r26, Z+2	; 0x02
     d0c:	b3 81       	ldd	r27, Z+3	; 0x03
     d0e:	aa 0f       	add	r26, r26
     d10:	bb 1f       	adc	r27, r27
     d12:	aa 0f       	add	r26, r26
     d14:	bb 1f       	adc	r27, r27
     d16:	86 81       	ldd	r24, Z+6	; 0x06
     d18:	97 81       	ldd	r25, Z+7	; 0x07
     d1a:	a8 0f       	add	r26, r24
     d1c:	b9 1f       	adc	r27, r25
     d1e:	cd 92       	st	X+, r12
     d20:	dd 92       	st	X+, r13
     d22:	ed 92       	st	X+, r14
     d24:	fc 92       	st	X, r15
     d26:	13 97       	sbiw	r26, 0x03	; 3
     d28:	82 81       	ldd	r24, Z+2	; 0x02
     d2a:	93 81       	ldd	r25, Z+3	; 0x03
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	82 83       	std	Z+2, r24	; 0x02
     d30:	93 83       	std	Z+3, r25	; 0x03
     d32:	a0 81       	ld	r26, Z
     d34:	b1 81       	ldd	r27, Z+1	; 0x01
     d36:	8a 17       	cp	r24, r26
     d38:	9b 07       	cpc	r25, r27
     d3a:	11 f4       	brne	.+4      	; 0xd40 <rb32_write+0x68>
     d3c:	12 82       	std	Z+2, r1	; 0x02
     d3e:	13 82       	std	Z+3, r1	; 0x03
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	c4 81       	ldd	r28, Z+4	; 0x04
     d46:	d5 81       	ldd	r29, Z+5	; 0x05
     d48:	8c 17       	cp	r24, r28
     d4a:	9d 07       	cpc	r25, r29
     d4c:	49 f4       	brne	.+18     	; 0xd60 <rb32_write+0x88>
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	a8 17       	cp	r26, r24
     d52:	b9 07       	cpc	r27, r25
     d54:	19 f0       	breq	.+6      	; 0xd5c <rb32_write+0x84>
     d56:	84 83       	std	Z+4, r24	; 0x04
     d58:	95 83       	std	Z+5, r25	; 0x05
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <rb32_write+0x88>
     d5c:	14 82       	std	Z+4, r1	; 0x04
     d5e:	15 82       	std	Z+5, r1	; 0x05
     d60:	2f 5f       	subi	r18, 0xFF	; 255
     d62:	82 2f       	mov	r24, r18
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	84 17       	cp	r24, r20
     d68:	95 07       	cpc	r25, r21
     d6a:	20 f2       	brcs	.-120    	; 0xcf4 <rb32_write+0x1c>
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	08 95       	ret

00000d7a <rb32_init>:
     d7a:	fc 01       	movw	r30, r24
     d7c:	12 82       	std	Z+2, r1	; 0x02
     d7e:	13 82       	std	Z+3, r1	; 0x03
     d80:	14 82       	std	Z+4, r1	; 0x04
     d82:	15 82       	std	Z+5, r1	; 0x05
     d84:	66 83       	std	Z+6, r22	; 0x06
     d86:	77 83       	std	Z+7, r23	; 0x07
     d88:	40 83       	st	Z, r20
     d8a:	51 83       	std	Z+1, r21	; 0x01
     d8c:	08 95       	ret

00000d8e <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     d8e:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     d90:	12 96       	adiw	r26, 0x02	; 2
     d92:	ed 91       	ld	r30, X+
     d94:	fc 91       	ld	r31, X
     d96:	13 97       	sbiw	r26, 0x03	; 3
     d98:	cb 01       	movw	r24, r22
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	e8 17       	cp	r30, r24
     d9e:	f9 07       	cpc	r31, r25
     da0:	98 f0       	brcs	.+38     	; 0xdc8 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     da2:	e1 50       	subi	r30, 0x01	; 1
     da4:	f0 4c       	sbci	r31, 0xC0	; 192
     da6:	e6 1b       	sub	r30, r22
     da8:	f7 0b       	sbc	r31, r23
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	16 96       	adiw	r26, 0x06	; 6
     db4:	8d 91       	ld	r24, X+
     db6:	9c 91       	ld	r25, X
     db8:	17 97       	sbiw	r26, 0x07	; 7
     dba:	e8 0f       	add	r30, r24
     dbc:	f9 1f       	adc	r31, r25
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     dc8:	2d 91       	ld	r18, X+
     dca:	3c 91       	ld	r19, X
     dcc:	11 97       	sbiw	r26, 0x01	; 1
     dce:	e2 0f       	add	r30, r18
     dd0:	f3 1f       	adc	r31, r19
     dd2:	e1 50       	subi	r30, 0x01	; 1
     dd4:	f0 4c       	sbci	r31, 0xC0	; 192
     dd6:	e6 1b       	sub	r30, r22
     dd8:	f7 0b       	sbc	r31, r23
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	16 96       	adiw	r26, 0x06	; 6
     de4:	8d 91       	ld	r24, X+
     de6:	9c 91       	ld	r25, X
     de8:	17 97       	sbiw	r26, 0x07	; 7
     dea:	e8 0f       	add	r30, r24
     dec:	f9 1f       	adc	r31, r25
     dee:	60 81       	ld	r22, Z
     df0:	71 81       	ldd	r23, Z+1	; 0x01
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	93 81       	ldd	r25, Z+3	; 0x03
}
     df6:	08 95       	ret

00000df8 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	1f 92       	push	r1
     dfe:	1f 92       	push	r1
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     e0a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     e0e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     e12:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     e16:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     e1a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     e1e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e22:	8f b7       	in	r24, 0x3f	; 63
     e24:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     e26:	f8 94       	cli
	return flags;
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e2a:	e0 e5       	ldi	r30, 0x50	; 80
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	82 60       	ori	r24, 0x02	; 2
     e32:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e34:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e36:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e38:	81 ff       	sbrs	r24, 1
     e3a:	fd cf       	rjmp	.-6      	; 0xe36 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	80 e4       	ldi	r24, 0x40	; 64
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	25 d0       	rcall	.+74     	; 0xe8e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e44:	8f b7       	in	r24, 0x3f	; 63
     e46:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e48:	f8 94       	cli
	return flags;
     e4a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     e4c:	e0 e5       	ldi	r30, 0x50	; 80
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8e 7f       	andi	r24, 0xFE	; 254
     e54:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e56:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	1f 92       	push	r1
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e6c:	9f b7       	in	r25, 0x3f	; 63
     e6e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e70:	f8 94       	cli
	return flags;
     e72:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e74:	e8 2f       	mov	r30, r24
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	e0 59       	subi	r30, 0x90	; 144
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	60 95       	com	r22
     e7e:	80 81       	ld	r24, Z
     e80:	68 23       	and	r22, r24
     e82:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e84:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     e86:	0f 90       	pop	r0
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e8e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e90:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e92:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e94:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e96:	60 83       	st	Z, r22
	ret                             // Return to caller
     e98:	08 95       	ret

00000e9a <__portable_avr_delay_cycles>:
		case SEND_GPS_LOCATION:
			send_gps();
			//printf("SEND_GPS_LOCATION\n");
			break;
		case PACKET:
			packet();
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <__portable_avr_delay_cycles+0xa>
     e9c:	61 50       	subi	r22, 0x01	; 1
     e9e:	71 09       	sbc	r23, r1
     ea0:	81 09       	sbc	r24, r1
     ea2:	91 09       	sbc	r25, r1
     ea4:	61 15       	cp	r22, r1
     ea6:	71 05       	cpc	r23, r1
     ea8:	81 05       	cpc	r24, r1
     eaa:	91 05       	cpc	r25, r1
     eac:	b9 f7       	brne	.-18     	; 0xe9c <__portable_avr_delay_cycles+0x2>
     eae:	08 95       	ret

00000eb0 <pressure_init>:
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	88 dd       	rcall	.-1264   	; 0x9c6 <ms5607_init>
     eb6:	82 ea       	ldi	r24, 0xA2	; 162
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	94 dd       	rcall	.-1240   	; 0x9e4 <ms5607_read>
     ebc:	cd ee       	ldi	r28, 0xED	; 237
     ebe:	d0 e2       	ldi	r29, 0x20	; 32
     ec0:	88 83       	st	Y, r24
     ec2:	99 83       	std	Y+1, r25	; 0x01
     ec4:	84 ea       	ldi	r24, 0xA4	; 164
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8d dd       	rcall	.-1254   	; 0x9e4 <ms5607_read>
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	9b 83       	std	Y+3, r25	; 0x03
     ece:	86 ea       	ldi	r24, 0xA6	; 166
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	88 dd       	rcall	.-1264   	; 0x9e4 <ms5607_read>
     ed4:	8c 83       	std	Y+4, r24	; 0x04
     ed6:	9d 83       	std	Y+5, r25	; 0x05
     ed8:	88 ea       	ldi	r24, 0xA8	; 168
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	83 dd       	rcall	.-1274   	; 0x9e4 <ms5607_read>
     ede:	8e 83       	std	Y+6, r24	; 0x06
     ee0:	9f 83       	std	Y+7, r25	; 0x07
     ee2:	8a ea       	ldi	r24, 0xAA	; 170
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	7e dd       	rcall	.-1284   	; 0x9e4 <ms5607_read>
     ee8:	88 87       	std	Y+8, r24	; 0x08
     eea:	99 87       	std	Y+9, r25	; 0x09
     eec:	8c ea       	ldi	r24, 0xAC	; 172
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	79 dd       	rcall	.-1294   	; 0x9e4 <ms5607_read>
     ef2:	8a 87       	std	Y+10, r24	; 0x0a
     ef4:	9b 87       	std	Y+11, r25	; 0x0b
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	89 85       	ldd	r24, Y+9	; 0x09
     efc:	8f 93       	push	r24
     efe:	88 85       	ldd	r24, Y+8	; 0x08
     f00:	8f 93       	push	r24
     f02:	8f 81       	ldd	r24, Y+7	; 0x07
     f04:	8f 93       	push	r24
     f06:	8e 81       	ldd	r24, Y+6	; 0x06
     f08:	8f 93       	push	r24
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	8f 93       	push	r24
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	8f 93       	push	r24
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	8f 93       	push	r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	8f 93       	push	r24
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	8f 93       	push	r24
     f1e:	88 81       	ld	r24, Y
     f20:	8f 93       	push	r24
     f22:	8f e8       	ldi	r24, 0x8F	; 143
     f24:	90 e2       	ldi	r25, 0x20	; 32
     f26:	9f 93       	push	r25
     f28:	8f 93       	push	r24
     f2a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <printf>
     f2e:	8d b7       	in	r24, 0x3d	; 61
     f30:	9e b7       	in	r25, 0x3e	; 62
     f32:	0e 96       	adiw	r24, 0x0e	; 14
     f34:	8d bf       	out	0x3d, r24	; 61
     f36:	9e bf       	out	0x3e, r25	; 62
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <gps_init>:
     f3e:	03 dd       	rcall	.-1530   	; 0x946 <gps_uart_init>
     f40:	6b ea       	ldi	r22, 0xAB	; 171
     f42:	79 e2       	ldi	r23, 0x29	; 41
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a8 df       	rcall	.-176    	; 0xe9a <__portable_avr_delay_cycles>
     f4a:	80 e3       	ldi	r24, 0x30	; 48
     f4c:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
     f50:	08 95       	ret

00000f52 <get_pressure>:
     f52:	4f 92       	push	r4
     f54:	5f 92       	push	r5
     f56:	6f 92       	push	r6
     f58:	7f 92       	push	r7
     f5a:	8f 92       	push	r8
     f5c:	9f 92       	push	r9
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	4b dd       	rcall	.-1386   	; 0xa08 <ms5607_convert_d1>
     f72:	6b 01       	movw	r12, r22
     f74:	7c 01       	movw	r14, r24
     f76:	6c dd       	rcall	.-1320   	; 0xa50 <ms5607_convert_d2>
     f78:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__floatunsisf>
     f7c:	4b 01       	movw	r8, r22
     f7e:	5c 01       	movw	r10, r24
     f80:	cd ee       	ldi	r28, 0xED	; 237
     f82:	d0 e2       	ldi	r29, 0x20	; 32
     f84:	68 85       	ldd	r22, Y+8	; 0x08
     f86:	79 85       	ldd	r23, Y+9	; 0x09
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__floatunsisf>
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	53 e4       	ldi	r21, 0x43	; 67
     f98:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
     f9c:	9b 01       	movw	r18, r22
     f9e:	ac 01       	movw	r20, r24
     fa0:	c5 01       	movw	r24, r10
     fa2:	b4 01       	movw	r22, r8
     fa4:	0e 94 2d 11 	call	0x225a	; 0x225a <__subsf3>
     fa8:	4b 01       	movw	r8, r22
     faa:	5c 01       	movw	r10, r24
     fac:	6c 81       	ldd	r22, Y+4	; 0x04
     fae:	7d 81       	ldd	r23, Y+5	; 0x05
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__floatunsisf>
     fb8:	a5 01       	movw	r20, r10
     fba:	94 01       	movw	r18, r8
     fbc:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	5c e3       	ldi	r21, 0x3C	; 60
     fc8:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
     fcc:	2b 01       	movw	r4, r22
     fce:	3c 01       	movw	r6, r24
     fd0:	68 81       	ld	r22, Y
     fd2:	79 81       	ldd	r23, Y+1	; 0x01
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__floatunsisf>
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	57 e4       	ldi	r21, 0x47	; 71
     fe4:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
     fe8:	9b 01       	movw	r18, r22
     fea:	ac 01       	movw	r20, r24
     fec:	c3 01       	movw	r24, r6
     fee:	b2 01       	movw	r22, r4
     ff0:	0e 94 2e 11 	call	0x225c	; 0x225c <__addsf3>
     ff4:	2b 01       	movw	r4, r22
     ff6:	3c 01       	movw	r6, r24
     ff8:	c7 01       	movw	r24, r14
     ffa:	b6 01       	movw	r22, r12
     ffc:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__floatunsisf>
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	c3 01       	movw	r24, r6
    1006:	b2 01       	movw	r22, r4
    1008:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	55 e3       	ldi	r21, 0x35	; 53
    1014:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    1018:	6b 01       	movw	r12, r22
    101a:	7c 01       	movw	r14, r24
    101c:	6e 81       	ldd	r22, Y+6	; 0x06
    101e:	7f 81       	ldd	r23, Y+7	; 0x07
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__floatunsisf>
    1028:	a5 01       	movw	r20, r10
    102a:	94 01       	movw	r18, r8
    102c:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e8       	ldi	r20, 0x80	; 128
    1036:	5c e3       	ldi	r21, 0x3C	; 60
    1038:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    103c:	4b 01       	movw	r8, r22
    103e:	5c 01       	movw	r10, r24
    1040:	6a 81       	ldd	r22, Y+2	; 0x02
    1042:	7b 81       	ldd	r23, Y+3	; 0x03
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__floatunsisf>
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	58 e4       	ldi	r21, 0x48	; 72
    1054:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    1058:	9b 01       	movw	r18, r22
    105a:	ac 01       	movw	r20, r24
    105c:	c5 01       	movw	r24, r10
    105e:	b4 01       	movw	r22, r8
    1060:	0e 94 2e 11 	call	0x225c	; 0x225c <__addsf3>
    1064:	9b 01       	movw	r18, r22
    1066:	ac 01       	movw	r20, r24
    1068:	c7 01       	movw	r24, r14
    106a:	b6 01       	movw	r22, r12
    106c:	0e 94 2d 11 	call	0x225a	; 0x225a <__subsf3>
    1070:	0e 94 03 12 	call	0x2406	; 0x2406 <__fixunssfdi>
    1074:	0f e0       	ldi	r16, 0x0F	; 15
    1076:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <__lshrdi3>
    107a:	0e 94 a6 12 	call	0x254c	; 0x254c <__floatundisf>
    107e:	6b 01       	movw	r12, r22
    1080:	7c 01       	movw	r14, r24
    1082:	0e 94 38 12 	call	0x2470	; 0x2470 <__fixsfsi>
    1086:	9f 93       	push	r25
    1088:	8f 93       	push	r24
    108a:	7f 93       	push	r23
    108c:	6f 93       	push	r22
    108e:	82 ea       	ldi	r24, 0xA2	; 162
    1090:	90 e2       	ldi	r25, 0x20	; 32
    1092:	9f 93       	push	r25
    1094:	8f 93       	push	r24
    1096:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <printf>
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	c7 01       	movw	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	bf 90       	pop	r11
    10ba:	af 90       	pop	r10
    10bc:	9f 90       	pop	r9
    10be:	8f 90       	pop	r8
    10c0:	7f 90       	pop	r7
    10c2:	6f 90       	pop	r6
    10c4:	5f 90       	pop	r5
    10c6:	4f 90       	pop	r4
    10c8:	08 95       	ret

000010ca <get_altitude>:
    10ca:	4f 92       	push	r4
    10cc:	5f 92       	push	r5
    10ce:	6f 92       	push	r6
    10d0:	7f 92       	push	r7
    10d2:	8f 92       	push	r8
    10d4:	9f 92       	push	r9
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	2b 01       	movw	r4, r22
    10e4:	3c 01       	movw	r6, r24
    10e6:	c0 90 1d 20 	lds	r12, 0x201D	; 0x80201d <L>
    10ea:	d0 90 1e 20 	lds	r13, 0x201E	; 0x80201e <L+0x1>
    10ee:	e0 90 1f 20 	lds	r14, 0x201F	; 0x80201f <L+0x2>
    10f2:	f0 90 20 20 	lds	r15, 0x2020	; 0x802020 <L+0x3>
    10f6:	20 91 21 20 	lds	r18, 0x2021	; 0x802021 <R>
    10fa:	30 91 22 20 	lds	r19, 0x2022	; 0x802022 <R+0x1>
    10fe:	40 91 23 20 	lds	r20, 0x2023	; 0x802023 <R+0x2>
    1102:	50 91 24 20 	lds	r21, 0x2024	; 0x802024 <R+0x3>
    1106:	c7 01       	movw	r24, r14
    1108:	b6 01       	movw	r22, r12
    110a:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    110e:	20 91 19 20 	lds	r18, 0x2019	; 0x802019 <g_0>
    1112:	30 91 1a 20 	lds	r19, 0x201A	; 0x80201a <g_0+0x1>
    1116:	40 91 1b 20 	lds	r20, 0x201B	; 0x80201b <g_0+0x2>
    111a:	50 91 1c 20 	lds	r21, 0x201C	; 0x80201c <g_0+0x3>
    111e:	0e 94 96 11 	call	0x232c	; 0x232c <__divsf3>
    1122:	4b 01       	movw	r8, r22
    1124:	5c 01       	movw	r10, r24
    1126:	a3 01       	movw	r20, r6
    1128:	92 01       	movw	r18, r4
    112a:	60 91 29 20 	lds	r22, 0x2029	; 0x802029 <ground_p>
    112e:	70 91 2a 20 	lds	r23, 0x202A	; 0x80202a <ground_p+0x1>
    1132:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <ground_p+0x2>
    1136:	90 91 2c 20 	lds	r25, 0x202C	; 0x80202c <ground_p+0x3>
    113a:	0e 94 96 11 	call	0x232c	; 0x232c <__divsf3>
    113e:	a5 01       	movw	r20, r10
    1140:	94 01       	movw	r18, r8
    1142:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <pow>
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e8       	ldi	r20, 0x80	; 128
    114c:	5f e3       	ldi	r21, 0x3F	; 63
    114e:	0e 94 2d 11 	call	0x225a	; 0x225a <__subsf3>
    1152:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <ground_t>
    1156:	30 91 26 20 	lds	r19, 0x2026	; 0x802026 <ground_t+0x1>
    115a:	40 91 27 20 	lds	r20, 0x2027	; 0x802027 <ground_t+0x2>
    115e:	50 91 28 20 	lds	r21, 0x2028	; 0x802028 <ground_t+0x3>
    1162:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    1166:	a7 01       	movw	r20, r14
    1168:	96 01       	movw	r18, r12
    116a:	0e 94 96 11 	call	0x232c	; 0x232c <__divsf3>
    116e:	20 91 f9 20 	lds	r18, 0x20F9	; 0x8020f9 <ground_a>
    1172:	30 91 fa 20 	lds	r19, 0x20FA	; 0x8020fa <ground_a+0x1>
    1176:	40 91 fb 20 	lds	r20, 0x20FB	; 0x8020fb <ground_a+0x2>
    117a:	50 91 fc 20 	lds	r21, 0x20FC	; 0x8020fc <ground_a+0x3>
    117e:	0e 94 2d 11 	call	0x225a	; 0x225a <__subsf3>
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	bf 90       	pop	r11
    118c:	af 90       	pop	r10
    118e:	9f 90       	pop	r9
    1190:	8f 90       	pop	r8
    1192:	7f 90       	pop	r7
    1194:	6f 90       	pop	r6
    1196:	5f 90       	pop	r5
    1198:	4f 90       	pop	r4
    119a:	08 95       	ret

0000119c <diff>:
    119c:	2f 92       	push	r2
    119e:	3f 92       	push	r3
    11a0:	4f 92       	push	r4
    11a2:	5f 92       	push	r5
    11a4:	6f 92       	push	r6
    11a6:	7f 92       	push	r7
    11a8:	8f 92       	push	r8
    11aa:	9f 92       	push	r9
    11ac:	af 92       	push	r10
    11ae:	bf 92       	push	r11
    11b0:	cf 92       	push	r12
    11b2:	df 92       	push	r13
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <diff+0x26>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <diff+0x28>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	6c 01       	movw	r12, r24
    11ca:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    11ce:	88 23       	and	r24, r24
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <diff+0x38>
    11d2:	6b c0       	rjmp	.+214    	; 0x12aa <diff+0x10e>
    11d4:	00 e0       	ldi	r16, 0x00	; 0
    11d6:	10 e0       	ldi	r17, 0x00	; 0
    11d8:	41 2c       	mov	r4, r1
    11da:	51 2c       	mov	r5, r1
    11dc:	32 01       	movw	r6, r4
    11de:	86 2e       	mov	r8, r22
    11e0:	91 2c       	mov	r9, r1
    11e2:	a1 2c       	mov	r10, r1
    11e4:	b1 2c       	mov	r11, r1
    11e6:	89 82       	std	Y+1, r8	; 0x01
    11e8:	9a 82       	std	Y+2, r9	; 0x02
    11ea:	ab 82       	std	Y+3, r10	; 0x03
    11ec:	bc 82       	std	Y+4, r11	; 0x04
    11ee:	b8 01       	movw	r22, r16
    11f0:	c6 01       	movw	r24, r12
    11f2:	45 dd       	rcall	.-1398   	; 0xc7e <rb16_get_nth>
    11f4:	5c 01       	movw	r10, r24
    11f6:	18 01       	movw	r2, r16
    11f8:	2f ef       	ldi	r18, 0xFF	; 255
    11fa:	22 1a       	sub	r2, r18
    11fc:	32 0a       	sbc	r3, r18
    11fe:	b1 01       	movw	r22, r2
    1200:	c6 01       	movw	r24, r12
    1202:	3d dd       	rcall	.-1414   	; 0xc7e <rb16_get_nth>
    1204:	7c 01       	movw	r14, r24
    1206:	b8 01       	movw	r22, r16
    1208:	6e 5f       	subi	r22, 0xFE	; 254
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	c6 01       	movw	r24, r12
    120e:	37 dd       	rcall	.-1426   	; 0xc7e <rb16_get_nth>
    1210:	a5 01       	movw	r20, r10
    1212:	bb 0c       	add	r11, r11
    1214:	66 0b       	sbc	r22, r22
    1216:	77 0b       	sbc	r23, r23
    1218:	8a 01       	movw	r16, r20
    121a:	9b 01       	movw	r18, r22
    121c:	00 0f       	add	r16, r16
    121e:	11 1f       	adc	r17, r17
    1220:	22 1f       	adc	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	40 0f       	add	r20, r16
    1226:	51 1f       	adc	r21, r17
    1228:	62 1f       	adc	r22, r18
    122a:	73 1f       	adc	r23, r19
    122c:	87 01       	movw	r16, r14
    122e:	ff 0c       	add	r15, r15
    1230:	22 0b       	sbc	r18, r18
    1232:	33 0b       	sbc	r19, r19
    1234:	78 01       	movw	r14, r16
    1236:	89 01       	movw	r16, r18
    1238:	ee 0c       	add	r14, r14
    123a:	ff 1c       	adc	r15, r15
    123c:	00 1f       	adc	r16, r16
    123e:	11 1f       	adc	r17, r17
    1240:	ee 0c       	add	r14, r14
    1242:	ff 1c       	adc	r15, r15
    1244:	00 1f       	adc	r16, r16
    1246:	11 1f       	adc	r17, r17
    1248:	4a 01       	movw	r8, r20
    124a:	5b 01       	movw	r10, r22
    124c:	8e 18       	sub	r8, r14
    124e:	9f 08       	sbc	r9, r15
    1250:	a0 0a       	sbc	r10, r16
    1252:	b1 0a       	sbc	r11, r17
    1254:	ac 01       	movw	r20, r24
    1256:	99 0f       	add	r25, r25
    1258:	66 0b       	sbc	r22, r22
    125a:	77 0b       	sbc	r23, r23
    125c:	d5 01       	movw	r26, r10
    125e:	c4 01       	movw	r24, r8
    1260:	84 0f       	add	r24, r20
    1262:	95 1f       	adc	r25, r21
    1264:	a6 1f       	adc	r26, r22
    1266:	b7 1f       	adc	r27, r23
    1268:	9c 01       	movw	r18, r24
    126a:	ad 01       	movw	r20, r26
    126c:	69 81       	ldd	r22, Y+1	; 0x01
    126e:	7a 81       	ldd	r23, Y+2	; 0x02
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__mulsi3>
    1278:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	5f e3       	ldi	r21, 0x3F	; 63
    1284:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    1288:	9b 01       	movw	r18, r22
    128a:	ac 01       	movw	r20, r24
    128c:	c3 01       	movw	r24, r6
    128e:	b2 01       	movw	r22, r4
    1290:	e5 d7       	rcall	.+4042   	; 0x225c <__addsf3>
    1292:	2b 01       	movw	r4, r22
    1294:	3c 01       	movw	r6, r24
    1296:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    129a:	81 01       	movw	r16, r2
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	22 16       	cp	r2, r18
    12a2:	33 06       	cpc	r3, r19
    12a4:	08 f4       	brcc	.+2      	; 0x12a8 <diff+0x10c>
    12a6:	a3 cf       	rjmp	.-186    	; 0x11ee <diff+0x52>
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <diff+0x114>
    12aa:	41 2c       	mov	r4, r1
    12ac:	51 2c       	mov	r5, r1
    12ae:	32 01       	movw	r6, r4
    12b0:	68 2f       	mov	r22, r24
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
    12bc:	9b 01       	movw	r18, r22
    12be:	ac 01       	movw	r20, r24
    12c0:	c3 01       	movw	r24, r6
    12c2:	b2 01       	movw	r22, r4
    12c4:	0e 94 96 11 	call	0x232c	; 0x232c <__divsf3>
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	48 ec       	ldi	r20, 0xC8	; 200
    12ce:	52 e4       	ldi	r21, 0x42	; 66
    12d0:	0e 94 96 11 	call	0x232c	; 0x232c <__divsf3>
    12d4:	26 96       	adiw	r28, 0x06	; 6
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	bf 90       	pop	r11
    12ec:	af 90       	pop	r10
    12ee:	9f 90       	pop	r9
    12f0:	8f 90       	pop	r8
    12f2:	7f 90       	pop	r7
    12f4:	6f 90       	pop	r6
    12f6:	5f 90       	pop	r5
    12f8:	4f 90       	pop	r4
    12fa:	3f 90       	pop	r3
    12fc:	2f 90       	pop	r2
    12fe:	08 95       	ret

00001300 <data_check>:
    1300:	3f 92       	push	r3
    1302:	4f 92       	push	r4
    1304:	5f 92       	push	r5
    1306:	6f 92       	push	r6
    1308:	7f 92       	push	r7
    130a:	8f 92       	push	r8
    130c:	9f 92       	push	r9
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	00 d0       	rcall	.+0      	; 0x1324 <data_check+0x24>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <data_check+0x26>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	8c 01       	movw	r16, r24
    132c:	19 82       	std	Y+1, r1	; 0x01
    132e:	1a 82       	std	Y+2, r1	; 0x02
    1330:	c1 2c       	mov	r12, r1
    1332:	d1 2c       	mov	r13, r1
    1334:	76 01       	movw	r14, r12
    1336:	69 81       	ldd	r22, Y+1	; 0x01
    1338:	7a 81       	ldd	r23, Y+2	; 0x02
    133a:	c8 01       	movw	r24, r16
    133c:	28 dd       	rcall	.-1456   	; 0xd8e <rb32_get_nth>
    133e:	4b 01       	movw	r8, r22
    1340:	5c 01       	movw	r10, r24
    1342:	21 ea       	ldi	r18, 0xA1	; 161
    1344:	82 1a       	sub	r8, r18
    1346:	26 e8       	ldi	r18, 0x86	; 134
    1348:	92 0a       	sbc	r9, r18
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	a2 0a       	sbc	r10, r18
    134e:	b1 08       	sbc	r11, r1
    1350:	2f ed       	ldi	r18, 0xDF	; 223
    1352:	82 16       	cp	r8, r18
    1354:	2f e0       	ldi	r18, 0x0F	; 15
    1356:	92 06       	cpc	r9, r18
    1358:	27 e9       	ldi	r18, 0x97	; 151
    135a:	a2 06       	cpc	r10, r18
    135c:	b1 04       	cpc	r11, r1
    135e:	70 f4       	brcc	.+28     	; 0x137c <data_check+0x7c>
    1360:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 ea       	ldi	r20, 0xA0	; 160
    136a:	50 e4       	ldi	r21, 0x40	; 64
    136c:	df d7       	rcall	.+4030   	; 0x232c <__divsf3>
    136e:	9b 01       	movw	r18, r22
    1370:	ac 01       	movw	r20, r24
    1372:	c7 01       	movw	r24, r14
    1374:	b6 01       	movw	r22, r12
    1376:	72 d7       	rcall	.+3812   	; 0x225c <__addsf3>
    1378:	6b 01       	movw	r12, r22
    137a:	7c 01       	movw	r14, r24
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	9a 81       	ldd	r25, Y+2	; 0x02
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	05 97       	sbiw	r24, 0x05	; 5
    1388:	b1 f6       	brne	.-84     	; 0x1336 <data_check+0x36>
    138a:	19 82       	std	Y+1, r1	; 0x01
    138c:	1a 82       	std	Y+2, r1	; 0x02
    138e:	81 2c       	mov	r8, r1
    1390:	91 2c       	mov	r9, r1
    1392:	54 01       	movw	r10, r8
    1394:	69 81       	ldd	r22, Y+1	; 0x01
    1396:	7a 81       	ldd	r23, Y+2	; 0x02
    1398:	c8 01       	movw	r24, r16
    139a:	f9 dc       	rcall	.-1550   	; 0xd8e <rb32_get_nth>
    139c:	2b 01       	movw	r4, r22
    139e:	3c 01       	movw	r6, r24
    13a0:	21 ea       	ldi	r18, 0xA1	; 161
    13a2:	42 1a       	sub	r4, r18
    13a4:	26 e8       	ldi	r18, 0x86	; 134
    13a6:	52 0a       	sbc	r5, r18
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	62 0a       	sbc	r6, r18
    13ac:	71 08       	sbc	r7, r1
    13ae:	2f ed       	ldi	r18, 0xDF	; 223
    13b0:	42 16       	cp	r4, r18
    13b2:	2f e0       	ldi	r18, 0x0F	; 15
    13b4:	52 06       	cpc	r5, r18
    13b6:	27 e9       	ldi	r18, 0x97	; 151
    13b8:	62 06       	cpc	r6, r18
    13ba:	71 04       	cpc	r7, r1
    13bc:	80 f4       	brcc	.+32     	; 0x13de <data_check+0xde>
    13be:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
    13c2:	a7 01       	movw	r20, r14
    13c4:	96 01       	movw	r18, r12
    13c6:	49 d7       	rcall	.+3730   	; 0x225a <__subsf3>
    13c8:	9b 01       	movw	r18, r22
    13ca:	ac 01       	movw	r20, r24
    13cc:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    13d0:	9b 01       	movw	r18, r22
    13d2:	ac 01       	movw	r20, r24
    13d4:	c5 01       	movw	r24, r10
    13d6:	b4 01       	movw	r22, r8
    13d8:	41 d7       	rcall	.+3714   	; 0x225c <__addsf3>
    13da:	4b 01       	movw	r8, r22
    13dc:	5c 01       	movw	r10, r24
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	9a 83       	std	Y+2, r25	; 0x02
    13e8:	05 97       	sbiw	r24, 0x05	; 5
    13ea:	a1 f6       	brne	.-88     	; 0x1394 <data_check+0x94>
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e8       	ldi	r20, 0x80	; 128
    13f2:	5e e3       	ldi	r21, 0x3E	; 62
    13f4:	c5 01       	movw	r24, r10
    13f6:	b4 01       	movw	r22, r8
    13f8:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    13fc:	69 83       	std	Y+1, r22	; 0x01
    13fe:	7a 83       	std	Y+2, r23	; 0x02
    1400:	8b 83       	std	Y+3, r24	; 0x03
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	1d 82       	std	Y+5, r1	; 0x05
    1406:	1e 82       	std	Y+6, r1	; 0x06
    1408:	31 2c       	mov	r3, r1
    140a:	41 2c       	mov	r4, r1
    140c:	51 2c       	mov	r5, r1
    140e:	32 01       	movw	r6, r4
    1410:	6d 81       	ldd	r22, Y+5	; 0x05
    1412:	7e 81       	ldd	r23, Y+6	; 0x06
    1414:	c8 01       	movw	r24, r16
    1416:	bb dc       	rcall	.-1674   	; 0xd8e <rb32_get_nth>
    1418:	4b 01       	movw	r8, r22
    141a:	5c 01       	movw	r10, r24
    141c:	21 ea       	ldi	r18, 0xA1	; 161
    141e:	82 1a       	sub	r8, r18
    1420:	26 e8       	ldi	r18, 0x86	; 134
    1422:	92 0a       	sbc	r9, r18
    1424:	21 e0       	ldi	r18, 0x01	; 1
    1426:	a2 0a       	sbc	r10, r18
    1428:	b1 08       	sbc	r11, r1
    142a:	2f ed       	ldi	r18, 0xDF	; 223
    142c:	82 16       	cp	r8, r18
    142e:	2f e0       	ldi	r18, 0x0F	; 15
    1430:	92 06       	cpc	r9, r18
    1432:	27 e9       	ldi	r18, 0x97	; 151
    1434:	a2 06       	cpc	r10, r18
    1436:	b1 04       	cpc	r11, r1
    1438:	40 f5       	brcc	.+80     	; 0x148a <data_check+0x18a>
    143a:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
    143e:	4b 01       	movw	r8, r22
    1440:	5c 01       	movw	r10, r24
    1442:	a7 01       	movw	r20, r14
    1444:	96 01       	movw	r18, r12
    1446:	09 d7       	rcall	.+3602   	; 0x225a <__subsf3>
    1448:	0e 94 38 12 	call	0x2470	; 0x2470 <__fixsfsi>
    144c:	9b 01       	movw	r18, r22
    144e:	77 23       	and	r23, r23
    1450:	24 f4       	brge	.+8      	; 0x145a <data_check+0x15a>
    1452:	22 27       	eor	r18, r18
    1454:	33 27       	eor	r19, r19
    1456:	26 1b       	sub	r18, r22
    1458:	37 0b       	sbc	r19, r23
    145a:	b9 01       	movw	r22, r18
    145c:	33 0f       	add	r19, r19
    145e:	88 0b       	sbc	r24, r24
    1460:	99 0b       	sbc	r25, r25
    1462:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
    1466:	9b 01       	movw	r18, r22
    1468:	ac 01       	movw	r20, r24
    146a:	69 81       	ldd	r22, Y+1	; 0x01
    146c:	7a 81       	ldd	r23, Y+2	; 0x02
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__gesf2>
    1476:	88 23       	and	r24, r24
    1478:	44 f0       	brlt	.+16     	; 0x148a <data_check+0x18a>
    147a:	a5 01       	movw	r20, r10
    147c:	94 01       	movw	r18, r8
    147e:	c3 01       	movw	r24, r6
    1480:	b2 01       	movw	r22, r4
    1482:	ec d6       	rcall	.+3544   	; 0x225c <__addsf3>
    1484:	2b 01       	movw	r4, r22
    1486:	3c 01       	movw	r6, r24
    1488:	33 94       	inc	r3
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	05 97       	sbiw	r24, 0x05	; 5
    1496:	09 f0       	breq	.+2      	; 0x149a <data_check+0x19a>
    1498:	bb cf       	rjmp	.-138    	; 0x1410 <data_check+0x110>
    149a:	33 20       	and	r3, r3
    149c:	61 f0       	breq	.+24     	; 0x14b6 <data_check+0x1b6>
    149e:	63 2d       	mov	r22, r3
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__floatunsisf>
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	c3 01       	movw	r24, r6
    14b0:	b2 01       	movw	r22, r4
    14b2:	3c d7       	rcall	.+3704   	; 0x232c <__divsf3>
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <data_check+0x1be>
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	80 e8       	ldi	r24, 0x80	; 128
    14bc:	9f eb       	ldi	r25, 0xBF	; 191
    14be:	26 96       	adiw	r28, 0x06	; 6
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	9f 90       	pop	r9
    14da:	8f 90       	pop	r8
    14dc:	7f 90       	pop	r7
    14de:	6f 90       	pop	r6
    14e0:	5f 90       	pop	r5
    14e2:	4f 90       	pop	r4
    14e4:	3f 90       	pop	r3
    14e6:	08 95       	ret

000014e8 <data_collect>:
    14e8:	af 92       	push	r10
    14ea:	bf 92       	push	r11
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <data_collect+0x16>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <data_collect+0x18>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	5c 01       	movw	r10, r24
    1506:	8b 01       	movw	r16, r22
    1508:	24 dd       	rcall	.-1464   	; 0xf52 <get_pressure>
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e2       	ldi	r20, 0x20	; 32
    1510:	51 e4       	ldi	r21, 0x41	; 65
    1512:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    1516:	ac d7       	rcall	.+3928   	; 0x2470 <__fixsfsi>
    1518:	69 83       	std	Y+1, r22	; 0x01
    151a:	7a 83       	std	Y+2, r23	; 0x02
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	9c 83       	std	Y+4, r25	; 0x04
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	be 01       	movw	r22, r28
    1526:	6f 5f       	subi	r22, 0xFF	; 255
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	c8 01       	movw	r24, r16
    152c:	d5 db       	rcall	.-2134   	; 0xcd8 <rb32_write>
    152e:	c8 01       	movw	r24, r16
    1530:	e7 de       	rcall	.-562    	; 0x1300 <data_check>
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e2       	ldi	r20, 0x20	; 32
    1538:	51 e4       	ldi	r21, 0x41	; 65
    153a:	f8 d6       	rcall	.+3568   	; 0x232c <__divsf3>
    153c:	6b 01       	movw	r12, r22
    153e:	7c 01       	movw	r14, r24
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f eb       	ldi	r21, 0xBF	; 191
    1548:	ed d6       	rcall	.+3546   	; 0x2324 <__cmpsf2>
    154a:	88 23       	and	r24, r24
    154c:	79 f1       	breq	.+94     	; 0x15ac <data_collect+0xc4>
    154e:	c0 92 e0 20 	sts	0x20E0, r12	; 0x8020e0 <press>
    1552:	d0 92 e1 20 	sts	0x20E1, r13	; 0x8020e1 <press+0x1>
    1556:	e0 92 e2 20 	sts	0x20E2, r14	; 0x8020e2 <press+0x2>
    155a:	f0 92 e3 20 	sts	0x20E3, r15	; 0x8020e3 <press+0x3>
    155e:	c7 01       	movw	r24, r14
    1560:	b6 01       	movw	r22, r12
    1562:	b3 dd       	rcall	.-1178   	; 0x10ca <get_altitude>
    1564:	60 93 d8 20 	sts	0x20D8, r22	; 0x8020d8 <alt>
    1568:	70 93 d9 20 	sts	0x20D9, r23	; 0x8020d9 <alt+0x1>
    156c:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <alt+0x2>
    1570:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <alt+0x3>
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	48 ec       	ldi	r20, 0xC8	; 200
    157a:	52 e4       	ldi	r21, 0x42	; 66
    157c:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    1580:	77 d7       	rcall	.+3822   	; 0x2470 <__fixsfsi>
    1582:	6d 83       	std	Y+5, r22	; 0x05
    1584:	7e 83       	std	Y+6, r23	; 0x06
    1586:	41 e0       	ldi	r20, 0x01	; 1
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	be 01       	movw	r22, r28
    158c:	6b 5f       	subi	r22, 0xFB	; 251
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	c5 01       	movw	r24, r10
    1592:	2c db       	rcall	.-2472   	; 0xbec <rb16_write>
    1594:	60 91 15 20 	lds	r22, 0x2015	; 0x802015 <rate>
    1598:	c5 01       	movw	r24, r10
    159a:	00 de       	rcall	.-1024   	; 0x119c <diff>
    159c:	60 93 d0 20 	sts	0x20D0, r22	; 0x8020d0 <velocity>
    15a0:	70 93 d1 20 	sts	0x20D1, r23	; 0x8020d1 <velocity+0x1>
    15a4:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <velocity+0x2>
    15a8:	90 93 d3 20 	sts	0x20D3, r25	; 0x8020d3 <velocity+0x3>
    15ac:	83 e3       	ldi	r24, 0x33	; 51
    15ae:	93 e1       	ldi	r25, 0x13	; 19
    15b0:	a0 e9       	ldi	r26, 0x90	; 144
    15b2:	b3 e4       	ldi	r27, 0x43	; 67
    15b4:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <temp>
    15b8:	90 93 dd 20 	sts	0x20DD, r25	; 0x8020dd <temp+0x1>
    15bc:	a0 93 de 20 	sts	0x20DE, r26	; 0x8020de <temp+0x2>
    15c0:	b0 93 df 20 	sts	0x20DF, r27	; 0x8020df <temp+0x3>
    15c4:	26 96       	adiw	r28, 0x06	; 6
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	ff 90       	pop	r15
    15d4:	ef 90       	pop	r14
    15d6:	df 90       	pop	r13
    15d8:	cf 90       	pop	r12
    15da:	bf 90       	pop	r11
    15dc:	af 90       	pop	r10
    15de:	08 95       	ret

000015e0 <state_check>:
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	c0 90 d0 20 	lds	r12, 0x20D0	; 0x8020d0 <velocity>
    15ec:	d0 90 d1 20 	lds	r13, 0x20D1	; 0x8020d1 <velocity+0x1>
    15f0:	e0 90 d2 20 	lds	r14, 0x20D2	; 0x8020d2 <velocity+0x2>
    15f4:	f0 90 d3 20 	lds	r15, 0x20D3	; 0x8020d3 <velocity+0x3>
    15f8:	c7 01       	movw	r24, r14
    15fa:	b6 01       	movw	r22, r12
    15fc:	39 d7       	rcall	.+3698   	; 0x2470 <__fixsfsi>
    15fe:	9b 01       	movw	r18, r22
    1600:	77 23       	and	r23, r23
    1602:	24 f4       	brge	.+8      	; 0x160c <state_check+0x2c>
    1604:	22 27       	eor	r18, r18
    1606:	33 27       	eor	r19, r19
    1608:	26 1b       	sub	r18, r22
    160a:	37 0b       	sbc	r19, r23
    160c:	26 30       	cpi	r18, 0x06	; 6
    160e:	31 05       	cpc	r19, r1
    1610:	84 f0       	brlt	.+32     	; 0x1632 <state_check+0x52>
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	a9 01       	movw	r20, r18
    1618:	c7 01       	movw	r24, r14
    161a:	b6 01       	movw	r22, r12
    161c:	83 d6       	rcall	.+3334   	; 0x2324 <__cmpsf2>
    161e:	88 23       	and	r24, r24
    1620:	24 f0       	brlt	.+8      	; 0x162a <state_check+0x4a>
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <state>
    1628:	24 c0       	rjmp	.+72     	; 0x1672 <state_check+0x92>
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <state>
    1630:	20 c0       	rjmp	.+64     	; 0x1672 <state_check+0x92>
    1632:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <state>
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	48 e4       	ldi	r20, 0x48	; 72
    163c:	52 e4       	ldi	r21, 0x42	; 66
    163e:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    1642:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    1646:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    164a:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    164e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__gesf2>
    1652:	18 16       	cp	r1, r24
    1654:	24 f0       	brlt	.+8      	; 0x165e <state_check+0x7e>
    1656:	80 91 fd 20 	lds	r24, 0x20FD	; 0x8020fd <reset_received>
    165a:	88 23       	and	r24, r24
    165c:	19 f0       	breq	.+6      	; 0x1664 <state_check+0x84>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <state>
    1664:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <released>
    1668:	88 23       	and	r24, r24
    166a:	19 f0       	breq	.+6      	; 0x1672 <state_check+0x92>
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <state>
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	08 95       	ret

0000167c <servo_pid>:
    167c:	8f 92       	push	r8
    167e:	9f 92       	push	r9
    1680:	af 92       	push	r10
    1682:	bf 92       	push	r11
    1684:	cf 92       	push	r12
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	7c 01       	movw	r14, r24
    1696:	c0 e0       	ldi	r28, 0x00	; 0
    1698:	d0 e0       	ldi	r29, 0x00	; 0
    169a:	00 e0       	ldi	r16, 0x00	; 0
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	be 01       	movw	r22, r28
    16a0:	c7 01       	movw	r24, r14
    16a2:	ed da       	rcall	.-2598   	; 0xc7e <rb16_get_nth>
    16a4:	08 0f       	add	r16, r24
    16a6:	19 1f       	adc	r17, r25
    16a8:	21 96       	adiw	r28, 0x01	; 1
    16aa:	ca 30       	cpi	r28, 0x0A	; 10
    16ac:	d1 05       	cpc	r29, r1
    16ae:	b9 f7       	brne	.-18     	; 0x169e <servo_pid+0x22>
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	c7 01       	movw	r24, r14
    16b6:	e3 da       	rcall	.-2618   	; 0xc7e <rb16_get_nth>
    16b8:	ec 01       	movw	r28, r24
    16ba:	60 91 15 20 	lds	r22, 0x2015	; 0x802015 <rate>
    16be:	c7 01       	movw	r24, r14
    16c0:	6d dd       	rcall	.-1318   	; 0x119c <diff>
    16c2:	6b 01       	movw	r12, r22
    16c4:	7c 01       	movw	r14, r24
    16c6:	be 01       	movw	r22, r28
    16c8:	dd 0f       	add	r29, r29
    16ca:	88 0b       	sbc	r24, r24
    16cc:	99 0b       	sbc	r25, r25
    16ce:	03 d7       	rcall	.+3590   	; 0x24d6 <__floatsisf>
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	a9 01       	movw	r20, r18
    16d6:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	48 ec       	ldi	r20, 0xC8	; 200
    16e0:	52 e4       	ldi	r21, 0x42	; 66
    16e2:	24 d6       	rcall	.+3144   	; 0x232c <__divsf3>
    16e4:	4b 01       	movw	r8, r22
    16e6:	5c 01       	movw	r10, r24
    16e8:	b8 01       	movw	r22, r16
    16ea:	11 0f       	add	r17, r17
    16ec:	88 0b       	sbc	r24, r24
    16ee:	99 0b       	sbc	r25, r25
    16f0:	f2 d6       	rcall	.+3556   	; 0x24d6 <__floatsisf>
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	f0 d7       	rcall	.+4064   	; 0x26da <__mulsf3>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	48 ec       	ldi	r20, 0xC8	; 200
    1700:	52 e4       	ldi	r21, 0x42	; 66
    1702:	14 d6       	rcall	.+3112   	; 0x232c <__divsf3>
    1704:	9b 01       	movw	r18, r22
    1706:	ac 01       	movw	r20, r24
    1708:	c5 01       	movw	r24, r10
    170a:	b4 01       	movw	r22, r8
    170c:	a7 d5       	rcall	.+2894   	; 0x225c <__addsf3>
    170e:	4b 01       	movw	r8, r22
    1710:	5c 01       	movw	r10, r24
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	a9 01       	movw	r20, r18
    1718:	c7 01       	movw	r24, r14
    171a:	b6 01       	movw	r22, r12
    171c:	de d7       	rcall	.+4028   	; 0x26da <__mulsf3>
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	c5 01       	movw	r24, r10
    1724:	b4 01       	movw	r22, r8
    1726:	9a d5       	rcall	.+2868   	; 0x225c <__addsf3>
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e8       	ldi	r19, 0x80	; 128
    172c:	4b eb       	ldi	r20, 0xBB	; 187
    172e:	54 e4       	ldi	r21, 0x44	; 68
    1730:	95 d5       	rcall	.+2858   	; 0x225c <__addsf3>
    1732:	a3 d6       	rcall	.+3398   	; 0x247a <__fixunssfsi>
    1734:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <servo_pulse>
    1738:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <servo_pulse+0x1>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	c8 d6       	rcall	.+3472   	; 0x24d2 <__floatunsisf>
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	4a e7       	ldi	r20, 0x7A	; 122
    1748:	54 e4       	ldi	r21, 0x44	; 68
    174a:	f0 d5       	rcall	.+3040   	; 0x232c <__divsf3>
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	53 e4       	ldi	r21, 0x43	; 67
    1754:	c2 d7       	rcall	.+3972   	; 0x26da <__mulsf3>
    1756:	91 d6       	rcall	.+3362   	; 0x247a <__fixunssfsi>
    1758:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    175c:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	df 90       	pop	r13
    176e:	cf 90       	pop	r12
    1770:	bf 90       	pop	r11
    1772:	af 90       	pop	r10
    1774:	9f 90       	pop	r9
    1776:	8f 90       	pop	r8
    1778:	08 95       	ret

0000177a <clock_init>:
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	85 e0       	ldi	r24, 0x05	; 5
    177e:	71 db       	rcall	.-2334   	; 0xe62 <sysclk_enable_module>
    1780:	e0 e0       	ldi	r30, 0x00	; 0
    1782:	fa e0       	ldi	r31, 0x0A	; 10
    1784:	87 e0       	ldi	r24, 0x07	; 7
    1786:	80 83       	st	Z, r24
    1788:	81 e1       	ldi	r24, 0x11	; 17
    178a:	9a e7       	ldi	r25, 0x7A	; 122
    178c:	86 a3       	std	Z+38, r24	; 0x26
    178e:	97 a3       	std	Z+39, r25	; 0x27
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	86 83       	std	Z+6, r24	; 0x06
    1794:	08 95       	ret

00001796 <system_init>:
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	2e db       	rcall	.-2468   	; 0xdf8 <sysclk_init>
    179c:	6b ea       	ldi	r22, 0xAB	; 171
    179e:	79 e2       	ldi	r23, 0x29	; 41
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	7a db       	rcall	.-2316   	; 0xe9a <__portable_avr_delay_cycles>
    17a6:	78 94       	sei
    17a8:	e0 e4       	ldi	r30, 0x40	; 64
    17aa:	f6 e0       	ldi	r31, 0x06	; 6
    17ac:	8c eb       	ldi	r24, 0xBC	; 188
    17ae:	80 83       	st	Z, r24
    17b0:	80 e1       	ldi	r24, 0x10	; 16
    17b2:	84 83       	std	Z+4, r24	; 0x04
    17b4:	87 e0       	ldi	r24, 0x07	; 7
    17b6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    17ba:	97 d9       	rcall	.-3282   	; 0xaea <data_terminal_init>
    17bc:	6b ea       	ldi	r22, 0xAB	; 171
    17be:	70 eb       	ldi	r23, 0xB0	; 176
    17c0:	88 e2       	ldi	r24, 0x28	; 40
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	6a db       	rcall	.-2348   	; 0xe9a <__portable_avr_delay_cycles>
    17c6:	6b ea       	ldi	r22, 0xAB	; 171
    17c8:	79 e2       	ldi	r23, 0x29	; 41
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	65 db       	rcall	.-2358   	; 0xe9a <__portable_avr_delay_cycles>
    17d0:	63 d9       	rcall	.-3386   	; 0xa98 <spi_init>
    17d2:	6b ea       	ldi	r22, 0xAB	; 171
    17d4:	79 e2       	ldi	r23, 0x29	; 41
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	5f db       	rcall	.-2370   	; 0xe9a <__portable_avr_delay_cycles>
    17dc:	69 db       	rcall	.-2350   	; 0xeb0 <pressure_init>
    17de:	6b ea       	ldi	r22, 0xAB	; 171
    17e0:	79 e2       	ldi	r23, 0x29	; 41
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	59 db       	rcall	.-2382   	; 0xe9a <__portable_avr_delay_cycles>
    17e8:	d1 d9       	rcall	.-3166   	; 0xb8c <XBEE_spi_init>
    17ea:	a9 db       	rcall	.-2222   	; 0xf3e <gps_init>
    17ec:	c6 df       	rcall	.-116    	; 0x177a <clock_init>
    17ee:	9e d8       	rcall	.-3780   	; 0x92c <cam_init>
    17f0:	66 e5       	ldi	r22, 0x56	; 86
    17f2:	70 ed       	ldi	r23, 0xD0	; 208
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	50 db       	rcall	.-2400   	; 0xe9a <__portable_avr_delay_cycles>
    17fa:	f2 de       	rcall	.-540    	; 0x15e0 <state_check>
    17fc:	aa db       	rcall	.-2220   	; 0xf52 <get_pressure>
    17fe:	60 93 29 20 	sts	0x2029, r22	; 0x802029 <ground_p>
    1802:	70 93 2a 20 	sts	0x202A, r23	; 0x80202a <ground_p+0x1>
    1806:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <ground_p+0x2>
    180a:	90 93 2c 20 	sts	0x202C, r25	; 0x80202c <ground_p+0x3>
    180e:	03 e3       	ldi	r16, 0x33	; 51
    1810:	13 e1       	ldi	r17, 0x13	; 19
    1812:	20 e9       	ldi	r18, 0x90	; 144
    1814:	33 e4       	ldi	r19, 0x43	; 67
    1816:	00 93 25 20 	sts	0x2025, r16	; 0x802025 <ground_t>
    181a:	10 93 26 20 	sts	0x2026, r17	; 0x802026 <ground_t+0x1>
    181e:	20 93 27 20 	sts	0x2027, r18	; 0x802027 <ground_t+0x2>
    1822:	30 93 28 20 	sts	0x2028, r19	; 0x802028 <ground_t+0x3>
    1826:	51 dc       	rcall	.-1886   	; 0x10ca <get_altitude>
    1828:	60 93 f9 20 	sts	0x20F9, r22	; 0x8020f9 <ground_a>
    182c:	70 93 fa 20 	sts	0x20FA, r23	; 0x8020fa <ground_a+0x1>
    1830:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <ground_a+0x2>
    1834:	90 93 fc 20 	sts	0x20FC, r25	; 0x8020fc <ground_a+0x3>
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	08 95       	ret

0000183e <main>:
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	ce 56       	subi	r28, 0x6E	; 110
    1848:	d1 09       	sbc	r29, r1
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	a3 df       	rcall	.-186    	; 0x1796 <system_init>
    1850:	66 e5       	ldi	r22, 0x56	; 86
    1852:	73 e2       	ldi	r23, 0x23	; 35
    1854:	88 e0       	ldi	r24, 0x08	; 8
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	20 db       	rcall	.-2496   	; 0xe9a <__portable_avr_delay_cycles>
    185a:	14 e1       	ldi	r17, 0x14	; 20
    185c:	be 01       	movw	r22, r28
    185e:	6f 5f       	subi	r22, 0xFF	; 255
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	fb 01       	movw	r30, r22
    1864:	21 2f       	mov	r18, r17
    1866:	11 92       	st	Z+, r1
    1868:	2a 95       	dec	r18
    186a:	e9 f7       	brne	.-6      	; 0x1866 <main+0x28>
    186c:	4a e0       	ldi	r20, 0x0A	; 10
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	ce 01       	movw	r24, r28
    1872:	45 96       	adiw	r24, 0x15	; 21
    1874:	fa d9       	rcall	.-3084   	; 0xc6a <rb16_init>
    1876:	be 01       	movw	r22, r28
    1878:	63 5e       	subi	r22, 0xE3	; 227
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	88 e2       	ldi	r24, 0x28	; 40
    187e:	fb 01       	movw	r30, r22
    1880:	11 92       	st	Z+, r1
    1882:	8a 95       	dec	r24
    1884:	e9 f7       	brne	.-6      	; 0x1880 <main+0x42>
    1886:	4a e0       	ldi	r20, 0x0A	; 10
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	ce 01       	movw	r24, r28
    188c:	8b 5b       	subi	r24, 0xBB	; 187
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	74 da       	rcall	.-2840   	; 0xd7a <rb32_init>
    1892:	be 01       	movw	r22, r28
    1894:	63 5b       	subi	r22, 0xB3	; 179
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	fb 01       	movw	r30, r22
    189a:	11 92       	st	Z+, r1
    189c:	1a 95       	dec	r17
    189e:	e9 f7       	brne	.-6      	; 0x189a <main+0x5c>
    18a0:	4a e0       	ldi	r20, 0x0A	; 10
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	ce 01       	movw	r24, r28
    18a6:	8f 59       	subi	r24, 0x9F	; 159
    18a8:	9f 4f       	sbci	r25, 0xFF	; 255
    18aa:	df d9       	rcall	.-3138   	; 0xc6a <rb16_init>
    18ac:	af 96       	adiw	r28, 0x2f	; 47
    18ae:	1f ae       	std	Y+63, r1	; 0x3f
    18b0:	af 97       	sbiw	r28, 0x2f	; 47
    18b2:	ae 96       	adiw	r28, 0x2e	; 46
    18b4:	1f ae       	std	Y+63, r1	; 0x3f
    18b6:	ae 97       	sbiw	r28, 0x2e	; 46
    18b8:	0f 2e       	mov	r0, r31
    18ba:	fc e1       	ldi	r31, 0x1C	; 28
    18bc:	cf 2e       	mov	r12, r31
    18be:	f1 e2       	ldi	r31, 0x21	; 33
    18c0:	df 2e       	mov	r13, r31
    18c2:	f0 2d       	mov	r31, r0
    18c4:	be 01       	movw	r22, r28
    18c6:	6b 5b       	subi	r22, 0xBB	; 187
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	ce 01       	movw	r24, r28
    18cc:	45 96       	adiw	r24, 0x15	; 21
    18ce:	0c de       	rcall	.-1000   	; 0x14e8 <data_collect>
    18d0:	87 de       	rcall	.-754    	; 0x15e0 <state_check>
    18d2:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <state>
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	41 f0       	breq	.+16     	; 0x18ea <main+0xac>
    18da:	08 f4       	brcc	.+2      	; 0x18de <main+0xa0>
    18dc:	58 c0       	rjmp	.+176    	; 0x198e <main+0x150>
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	f9 f0       	breq	.+62     	; 0x1920 <main+0xe2>
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <main+0xaa>
    18e6:	47 c0       	rjmp	.+142    	; 0x1976 <main+0x138>
    18e8:	50 c0       	rjmp	.+160    	; 0x198a <main+0x14c>
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	46 e1       	ldi	r20, 0x16	; 22
    18f0:	54 e4       	ldi	r21, 0x44	; 68
    18f2:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    18f6:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    18fa:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    18fe:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    1902:	e7 d6       	rcall	.+3534   	; 0x26d2 <__gesf2>
    1904:	18 16       	cp	r1, r24
    1906:	0c f0       	brlt	.+2      	; 0x190a <main+0xcc>
    1908:	42 c0       	rjmp	.+132    	; 0x198e <main+0x150>
    190a:	ae 96       	adiw	r28, 0x2e	; 46
    190c:	ff ad       	ldd	r31, Y+63	; 0x3f
    190e:	ae 97       	sbiw	r28, 0x2e	; 46
    1910:	f1 11       	cpse	r31, r1
    1912:	3d c0       	rjmp	.+122    	; 0x198e <main+0x150>
    1914:	11 d8       	rcall	.-4062   	; 0x938 <cam_switch>
    1916:	21 e0       	ldi	r18, 0x01	; 1
    1918:	ae 96       	adiw	r28, 0x2e	; 46
    191a:	2f af       	std	Y+63, r18	; 0x3f
    191c:	ae 97       	sbiw	r28, 0x2e	; 46
    191e:	37 c0       	rjmp	.+110    	; 0x198e <main+0x150>
    1920:	ae 96       	adiw	r28, 0x2e	; 46
    1922:	8f ad       	ldd	r24, Y+63	; 0x3f
    1924:	ae 97       	sbiw	r28, 0x2e	; 46
    1926:	81 11       	cpse	r24, r1
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <main+0xf6>
    192a:	06 d8       	rcall	.-4084   	; 0x938 <cam_switch>
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	ae 96       	adiw	r28, 0x2e	; 46
    1930:	9f af       	std	Y+63, r25	; 0x3f
    1932:	ae 97       	sbiw	r28, 0x2e	; 46
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	41 ee       	ldi	r20, 0xE1	; 225
    193a:	53 e4       	ldi	r21, 0x43	; 67
    193c:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    1940:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    1944:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    1948:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    194c:	86 d4       	rcall	.+2316   	; 0x225a <__subsf3>
    194e:	90 d5       	rcall	.+2848   	; 0x2470 <__fixsfsi>
    1950:	67 5f       	subi	r22, 0xF7	; 247
    1952:	7f 4f       	sbci	r23, 0xFF	; 255
    1954:	63 31       	cpi	r22, 0x13	; 19
    1956:	71 05       	cpc	r23, r1
    1958:	28 f4       	brcc	.+10     	; 0x1964 <main+0x126>
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	80 93 fe 20 	sts	0x20FE, r24	; 0x8020fe <released>
    1960:	0e 94 95 04 	call	0x92a	; 0x92a <hall_sensor_init>
    1964:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <released>
    1968:	88 23       	and	r24, r24
    196a:	89 f0       	breq	.+34     	; 0x198e <main+0x150>
    196c:	ce 01       	movw	r24, r28
    196e:	8f 59       	subi	r24, 0x9F	; 159
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	84 de       	rcall	.-760    	; 0x167c <servo_pid>
    1974:	0c c0       	rjmp	.+24     	; 0x198e <main+0x150>
    1976:	af 96       	adiw	r28, 0x2f	; 47
    1978:	ef ad       	ldd	r30, Y+63	; 0x3f
    197a:	af 97       	sbiw	r28, 0x2f	; 47
    197c:	e1 11       	cpse	r30, r1
    197e:	07 c0       	rjmp	.+14     	; 0x198e <main+0x150>
    1980:	f1 e0       	ldi	r31, 0x01	; 1
    1982:	af 96       	adiw	r28, 0x2f	; 47
    1984:	ff af       	std	Y+63, r31	; 0x3f
    1986:	af 97       	sbiw	r28, 0x2f	; 47
    1988:	02 c0       	rjmp	.+4      	; 0x198e <main+0x150>
    198a:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <state>
    198e:	e0 90 e4 20 	lds	r14, 0x20E4	; 0x8020e4 <packets>
    1992:	f0 90 e5 20 	lds	r15, 0x20E5	; 0x8020e5 <packets+0x1>
    1996:	2f ef       	ldi	r18, 0xFF	; 255
    1998:	e2 1a       	sub	r14, r18
    199a:	f2 0a       	sbc	r15, r18
    199c:	e0 92 e4 20 	sts	0x20E4, r14	; 0x8020e4 <packets>
    19a0:	f0 92 e5 20 	sts	0x20E5, r15	; 0x8020e5 <packets+0x1>
    19a4:	20 90 e6 20 	lds	r2, 0x20E6	; 0x8020e6 <timer>
    19a8:	30 90 e7 20 	lds	r3, 0x20E7	; 0x8020e7 <timer+0x1>
    19ac:	21 14       	cp	r2, r1
    19ae:	31 04       	cpc	r3, r1
    19b0:	41 f0       	breq	.+16     	; 0x19c2 <main+0x184>
    19b2:	c7 01       	movw	r24, r14
    19b4:	b1 01       	movw	r22, r2
    19b6:	0e 94 44 15 	call	0x2a88	; 0x2a88 <__udivmodhi4>
    19ba:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <rate>
    19be:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <rate+0x1>
    19c2:	60 91 c0 20 	lds	r22, 0x20C0	; 0x8020c0 <gps_alt>
    19c6:	70 91 c1 20 	lds	r23, 0x20C1	; 0x8020c1 <gps_alt+0x1>
    19ca:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <gps_alt+0x2>
    19ce:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <gps_alt+0x3>
    19d2:	4e d5       	rcall	.+2716   	; 0x2470 <__fixsfsi>
    19d4:	16 2f       	mov	r17, r22
    19d6:	07 2f       	mov	r16, r23
    19d8:	80 90 c4 20 	lds	r8, 0x20C4	; 0x8020c4 <gps_long>
    19dc:	90 90 c5 20 	lds	r9, 0x20C5	; 0x8020c5 <gps_long+0x1>
    19e0:	a0 90 c6 20 	lds	r10, 0x20C6	; 0x8020c6 <gps_long+0x2>
    19e4:	b0 90 c7 20 	lds	r11, 0x20C7	; 0x8020c7 <gps_long+0x3>
    19e8:	40 90 c8 20 	lds	r4, 0x20C8	; 0x8020c8 <gps_lat>
    19ec:	50 90 c9 20 	lds	r5, 0x20C9	; 0x8020c9 <gps_lat+0x1>
    19f0:	60 90 ca 20 	lds	r6, 0x20CA	; 0x8020ca <gps_lat+0x2>
    19f4:	70 90 cb 20 	lds	r7, 0x20CB	; 0x8020cb <gps_lat+0x3>
    19f8:	60 91 cc 20 	lds	r22, 0x20CC	; 0x8020cc <gps_t>
    19fc:	70 91 cd 20 	lds	r23, 0x20CD	; 0x8020cd <gps_t+0x1>
    1a00:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <gps_t+0x2>
    1a04:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <gps_t+0x3>
    1a08:	33 d5       	rcall	.+2662   	; 0x2470 <__fixsfsi>
    1a0a:	ad 96       	adiw	r28, 0x2d	; 45
    1a0c:	6c af       	std	Y+60, r22	; 0x3c
    1a0e:	7d af       	std	Y+61, r23	; 0x3d
    1a10:	8e af       	std	Y+62, r24	; 0x3e
    1a12:	9f af       	std	Y+63, r25	; 0x3f
    1a14:	ad 97       	sbiw	r28, 0x2d	; 45
    1a16:	1f 92       	push	r1
    1a18:	1f 92       	push	r1
    1a1a:	60 91 ae 20 	lds	r22, 0x20AE	; 0x8020ae <__data_end>
    1a1e:	70 91 af 20 	lds	r23, 0x20AF	; 0x8020af <__data_end+0x1>
    1a22:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <__data_end+0x2>
    1a26:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <__data_end+0x3>
    1a2a:	22 d5       	rcall	.+2628   	; 0x2470 <__fixsfsi>
    1a2c:	7f 93       	push	r23
    1a2e:	6f 93       	push	r22
    1a30:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <state>
    1a34:	1f 92       	push	r1
    1a36:	8f 93       	push	r24
    1a38:	60 91 b2 20 	lds	r22, 0x20B2	; 0x8020b2 <rpm>
    1a3c:	70 91 b3 20 	lds	r23, 0x20B3	; 0x8020b3 <rpm+0x1>
    1a40:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <rpm+0x2>
    1a44:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <rpm+0x3>
    1a48:	13 d5       	rcall	.+2598   	; 0x2470 <__fixsfsi>
    1a4a:	7f 93       	push	r23
    1a4c:	6f 93       	push	r22
    1a4e:	60 91 b6 20 	lds	r22, 0x20B6	; 0x8020b6 <roll>
    1a52:	70 91 b7 20 	lds	r23, 0x20B7	; 0x8020b7 <roll+0x1>
    1a56:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <roll+0x2>
    1a5a:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <roll+0x3>
    1a5e:	08 d5       	rcall	.+2576   	; 0x2470 <__fixsfsi>
    1a60:	7f 93       	push	r23
    1a62:	6f 93       	push	r22
    1a64:	60 91 ba 20 	lds	r22, 0x20BA	; 0x8020ba <pitch>
    1a68:	70 91 bb 20 	lds	r23, 0x20BB	; 0x8020bb <pitch+0x1>
    1a6c:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <pitch+0x2>
    1a70:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <pitch+0x3>
    1a74:	fd d4       	rcall	.+2554   	; 0x2470 <__fixsfsi>
    1a76:	7f 93       	push	r23
    1a78:	6f 93       	push	r22
    1a7a:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <gps_sats+0x1>
    1a7e:	8f 93       	push	r24
    1a80:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <gps_sats>
    1a84:	8f 93       	push	r24
    1a86:	81 2f       	mov	r24, r17
    1a88:	90 2f       	mov	r25, r16
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	9c 01       	movw	r18, r24
    1a90:	22 0f       	add	r18, r18
    1a92:	33 1f       	adc	r19, r19
    1a94:	22 0f       	add	r18, r18
    1a96:	33 1f       	adc	r19, r19
    1a98:	82 0f       	add	r24, r18
    1a9a:	93 1f       	adc	r25, r19
    1a9c:	6a e0       	ldi	r22, 0x0A	; 10
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__divmodhi4>
    1aa4:	9f 93       	push	r25
    1aa6:	8f 93       	push	r24
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	34 e2       	ldi	r19, 0x24	; 36
    1ab0:	44 e7       	ldi	r20, 0x74	; 116
    1ab2:	59 e4       	ldi	r21, 0x49	; 73
    1ab4:	c5 01       	movw	r24, r10
    1ab6:	b4 01       	movw	r22, r8
    1ab8:	10 d6       	rcall	.+3104   	; 0x26da <__mulsf3>
    1aba:	da d4       	rcall	.+2484   	; 0x2470 <__fixsfsi>
    1abc:	20 e4       	ldi	r18, 0x40	; 64
    1abe:	32 e4       	ldi	r19, 0x42	; 66
    1ac0:	4f e0       	ldi	r20, 0x0F	; 15
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__divmodsi4>
    1ac8:	9b 01       	movw	r18, r22
    1aca:	77 23       	and	r23, r23
    1acc:	24 f4       	brge	.+8      	; 0x1ad6 <main+0x298>
    1ace:	22 27       	eor	r18, r18
    1ad0:	33 27       	eor	r19, r19
    1ad2:	26 1b       	sub	r18, r22
    1ad4:	37 0b       	sbc	r19, r23
    1ad6:	3f 93       	push	r19
    1ad8:	2f 93       	push	r18
    1ada:	c5 01       	movw	r24, r10
    1adc:	b4 01       	movw	r22, r8
    1ade:	c8 d4       	rcall	.+2448   	; 0x2470 <__fixsfsi>
    1ae0:	7f 93       	push	r23
    1ae2:	6f 93       	push	r22
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	34 e2       	ldi	r19, 0x24	; 36
    1ae8:	44 e7       	ldi	r20, 0x74	; 116
    1aea:	59 e4       	ldi	r21, 0x49	; 73
    1aec:	c3 01       	movw	r24, r6
    1aee:	b2 01       	movw	r22, r4
    1af0:	f4 d5       	rcall	.+3048   	; 0x26da <__mulsf3>
    1af2:	be d4       	rcall	.+2428   	; 0x2470 <__fixsfsi>
    1af4:	20 e4       	ldi	r18, 0x40	; 64
    1af6:	32 e4       	ldi	r19, 0x42	; 66
    1af8:	4f e0       	ldi	r20, 0x0F	; 15
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__divmodsi4>
    1b00:	9f 93       	push	r25
    1b02:	8f 93       	push	r24
    1b04:	7f 93       	push	r23
    1b06:	6f 93       	push	r22
    1b08:	c3 01       	movw	r24, r6
    1b0a:	b2 01       	movw	r22, r4
    1b0c:	b1 d4       	rcall	.+2402   	; 0x2470 <__fixsfsi>
    1b0e:	7f 93       	push	r23
    1b10:	6f 93       	push	r22
    1b12:	ad 96       	adiw	r28, 0x2d	; 45
    1b14:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b16:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b18:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b1c:	ad 97       	sbiw	r28, 0x2d	; 45
    1b1e:	24 e6       	ldi	r18, 0x64	; 100
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	f9 d7       	rcall	.+4082   	; 0x2b1a <__divmodsi4>
    1b28:	7f 93       	push	r23
    1b2a:	6f 93       	push	r22
    1b2c:	ad 96       	adiw	r28, 0x2d	; 45
    1b2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b30:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b32:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b34:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b36:	ad 97       	sbiw	r28, 0x2d	; 45
    1b38:	20 e1       	ldi	r18, 0x10	; 16
    1b3a:	37 e2       	ldi	r19, 0x27	; 39
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	ec d7       	rcall	.+4056   	; 0x2b1a <__divmodsi4>
    1b42:	12 2f       	mov	r17, r18
    1b44:	03 2f       	mov	r16, r19
    1b46:	24 e6       	ldi	r18, 0x64	; 100
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	e5 d7       	rcall	.+4042   	; 0x2b1a <__divmodsi4>
    1b50:	3f 93       	push	r19
    1b52:	2f 93       	push	r18
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	60 91 d4 20 	lds	r22, 0x20D4	; 0x8020d4 <volt>
    1b5c:	70 91 d5 20 	lds	r23, 0x20D5	; 0x8020d5 <volt+0x1>
    1b60:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <volt+0x2>
    1b64:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <volt+0x3>
    1b68:	83 d4       	rcall	.+2310   	; 0x2470 <__fixsfsi>
    1b6a:	7f 93       	push	r23
    1b6c:	6f 93       	push	r22
    1b6e:	23 e3       	ldi	r18, 0x33	; 51
    1b70:	33 e9       	ldi	r19, 0x93	; 147
    1b72:	48 e8       	ldi	r20, 0x88	; 136
    1b74:	53 e4       	ldi	r21, 0x43	; 67
    1b76:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <temp>
    1b7a:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <temp+0x1>
    1b7e:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <temp+0x2>
    1b82:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <temp+0x3>
    1b86:	69 d3       	rcall	.+1746   	; 0x225a <__subsf3>
    1b88:	73 d4       	rcall	.+2278   	; 0x2470 <__fixsfsi>
    1b8a:	7f 93       	push	r23
    1b8c:	6f 93       	push	r22
    1b8e:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <press>
    1b92:	70 91 e1 20 	lds	r23, 0x20E1	; 0x8020e1 <press+0x1>
    1b96:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <press+0x2>
    1b9a:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <press+0x3>
    1b9e:	68 d4       	rcall	.+2256   	; 0x2470 <__fixsfsi>
    1ba0:	9f 93       	push	r25
    1ba2:	8f 93       	push	r24
    1ba4:	7f 93       	push	r23
    1ba6:	6f 93       	push	r22
    1ba8:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    1bac:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    1bb0:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    1bb4:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    1bb8:	5b d4       	rcall	.+2230   	; 0x2470 <__fixsfsi>
    1bba:	7f 93       	push	r23
    1bbc:	6f 93       	push	r22
    1bbe:	ff 92       	push	r15
    1bc0:	ef 92       	push	r14
    1bc2:	3f 92       	push	r3
    1bc4:	2f 92       	push	r2
    1bc6:	8d e2       	ldi	r24, 0x2D	; 45
    1bc8:	90 e2       	ldi	r25, 0x20	; 32
    1bca:	9f 93       	push	r25
    1bcc:	8f 93       	push	r24
    1bce:	df 92       	push	r13
    1bd0:	cf 92       	push	r12
    1bd2:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <sprintf>
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	df 92       	push	r13
    1bdc:	cf 92       	push	r12
    1bde:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <printf>
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	6e ce       	rjmp	.-804    	; 0x18c4 <main+0x86>

00001be8 <__vector_47>:
			//printf("PACKET\n");
			break;
	}
}

ISR(TCE0_OVF_vect){
    1be8:	1f 92       	push	r1
    1bea:	0f 92       	push	r0
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	0f 92       	push	r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	08 b6       	in	r0, 0x38	; 56
    1bf4:	0f 92       	push	r0
    1bf6:	18 be       	out	0x38, r1	; 56
    1bf8:	09 b6       	in	r0, 0x39	; 57
    1bfa:	0f 92       	push	r0
    1bfc:	19 be       	out	0x39, r1	; 57
    1bfe:	0b b6       	in	r0, 0x3b	; 59
    1c00:	0f 92       	push	r0
    1c02:	1b be       	out	0x3b, r1	; 59
    1c04:	2f 93       	push	r18
    1c06:	3f 93       	push	r19
    1c08:	4f 93       	push	r20
    1c0a:	5f 93       	push	r21
    1c0c:	6f 93       	push	r22
    1c0e:	7f 93       	push	r23
    1c10:	8f 93       	push	r24
    1c12:	9f 93       	push	r25
    1c14:	af 93       	push	r26
    1c16:	bf 93       	push	r27
    1c18:	ef 93       	push	r30
    1c1a:	ff 93       	push	r31
	timer++;
    1c1c:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <timer>
    1c20:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <timer+0x1>
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <timer>
    1c2a:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <timer+0x1>
	//printf(str);
	XBEE_spi_write(str);
    1c2e:	8c e1       	ldi	r24, 0x1C	; 28
    1c30:	91 e2       	ldi	r25, 0x21	; 33
    1c32:	0e 94 d3 05 	call	0xba6	; 0xba6 <XBEE_spi_write>
}
    1c36:	ff 91       	pop	r31
    1c38:	ef 91       	pop	r30
    1c3a:	bf 91       	pop	r27
    1c3c:	af 91       	pop	r26
    1c3e:	9f 91       	pop	r25
    1c40:	8f 91       	pop	r24
    1c42:	7f 91       	pop	r23
    1c44:	6f 91       	pop	r22
    1c46:	5f 91       	pop	r21
    1c48:	4f 91       	pop	r20
    1c4a:	3f 91       	pop	r19
    1c4c:	2f 91       	pop	r18
    1c4e:	0f 90       	pop	r0
    1c50:	0b be       	out	0x3b, r0	; 59
    1c52:	0f 90       	pop	r0
    1c54:	09 be       	out	0x39, r0	; 57
    1c56:	0f 90       	pop	r0
    1c58:	08 be       	out	0x38, r0	; 56
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <__vector_91>:
	xbee_command(c);
}
*/

// GPS recording
ISR(USARTD1_RXC_vect){
    1c64:	1f 92       	push	r1
    1c66:	0f 92       	push	r0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	0f 92       	push	r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	08 b6       	in	r0, 0x38	; 56
    1c70:	0f 92       	push	r0
    1c72:	18 be       	out	0x38, r1	; 56
    1c74:	09 b6       	in	r0, 0x39	; 57
    1c76:	0f 92       	push	r0
    1c78:	19 be       	out	0x39, r1	; 57
    1c7a:	0a b6       	in	r0, 0x3a	; 58
    1c7c:	0f 92       	push	r0
    1c7e:	1a be       	out	0x3a, r1	; 58
    1c80:	0b b6       	in	r0, 0x3b	; 59
    1c82:	0f 92       	push	r0
    1c84:	1b be       	out	0x3b, r1	; 59
    1c86:	8f 92       	push	r8
    1c88:	9f 92       	push	r9
    1c8a:	af 92       	push	r10
    1c8c:	bf 92       	push	r11
    1c8e:	cf 92       	push	r12
    1c90:	df 92       	push	r13
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	1f 93       	push	r17
    1c98:	2f 93       	push	r18
    1c9a:	3f 93       	push	r19
    1c9c:	4f 93       	push	r20
    1c9e:	5f 93       	push	r21
    1ca0:	6f 93       	push	r22
    1ca2:	7f 93       	push	r23
    1ca4:	8f 93       	push	r24
    1ca6:	9f 93       	push	r25
    1ca8:	af 93       	push	r26
    1caa:	bf 93       	push	r27
    1cac:	ef 93       	push	r30
    1cae:	ff 93       	push	r31
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <__vector_91+0x52>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <__vector_91+0x54>
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    1cbc:	80 eb       	ldi	r24, 0xB0	; 176
    1cbe:	99 e0       	ldi	r25, 0x09	; 9
    1cc0:	0e 94 93 02 	call	0x526	; 0x526 <usart_getchar>
    1cc4:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    1cc6:	84 32       	cpi	r24, 0x24	; 36
    1cc8:	49 f4       	brne	.+18     	; 0x1cdc <__vector_91+0x78>
		writing = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <writing>
		pos = 0;
		word_pos = 0;
    1cd0:	10 92 ea 20 	sts	0x20EA, r1	; 0x8020ea <word_pos>
		commas = 0;
    1cd4:	10 92 e9 20 	sts	0x20E9, r1	; 0x8020e9 <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	68 c2       	rjmp	.+1232   	; 0x21ac <__vector_91+0x548>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    1cdc:	8a 32       	cpi	r24, 0x2A	; 42
    1cde:	29 f4       	brne	.+10     	; 0x1cea <__vector_91+0x86>
		commas = 0;
    1ce0:	10 92 e9 20 	sts	0x20E9, r1	; 0x8020e9 <commas>
		writing = 0;
    1ce4:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <writing>
    1ce8:	91 c2       	rjmp	.+1314   	; 0x220c <__vector_91+0x5a8>
	}
	else if(c == (uint8_t) ','){
    1cea:	8c 32       	cpi	r24, 0x2C	; 44
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <__vector_91+0x8c>
    1cee:	49 c2       	rjmp	.+1170   	; 0x2182 <__vector_91+0x51e>
		gps[0] = 32;
    1cf0:	e8 e0       	ldi	r30, 0x08	; 8
    1cf2:	f1 e2       	ldi	r31, 0x21	; 33
    1cf4:	80 e2       	ldi	r24, 0x20	; 32
    1cf6:	80 83       	st	Z, r24
		if(gps[1] == 32){
    1cf8:	81 81       	ldd	r24, Z+1	; 0x01
    1cfa:	80 32       	cpi	r24, 0x20	; 32
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <__vector_91+0x9c>
    1cfe:	6d c2       	rjmp	.+1242   	; 0x21da <__vector_91+0x576>
			gps[0] = '0';
    1d00:	80 e3       	ldi	r24, 0x30	; 48
    1d02:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <gps>
    1d06:	69 c2       	rjmp	.+1234   	; 0x21da <__vector_91+0x576>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d08:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <gps>
    1d0c:	8e 32       	cpi	r24, 0x2E	; 46
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <__vector_91+0xae>
    1d10:	9e c1       	rjmp	.+828    	; 0x204e <__vector_91+0x3ea>
    1d12:	a4 c1       	rjmp	.+840    	; 0x205c <__vector_91+0x3f8>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d14:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <gps>
    1d18:	8e 32       	cpi	r24, 0x2E	; 46
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <__vector_91+0xba>
    1d1c:	ec c0       	rjmp	.+472    	; 0x1ef6 <__vector_91+0x292>
    1d1e:	f2 c0       	rjmp	.+484    	; 0x1f04 <__vector_91+0x2a0>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d20:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <gps>
    1d24:	8e 32       	cpi	r24, 0x2E	; 46
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <__vector_91+0xc6>
    1d28:	51 c0       	rjmp	.+162    	; 0x1dcc <__vector_91+0x168>
    1d2a:	57 c0       	rjmp	.+174    	; 0x1dda <__vector_91+0x176>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d2c:	91 91       	ld	r25, Z+
    1d2e:	9e 32       	cpi	r25, 0x2E	; 46
    1d30:	29 f4       	brne	.+10     	; 0x1d3c <__vector_91+0xd8>
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <__vector_91+0xd2>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1d36:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <idx>
						break;
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    1d3c:	8f 5f       	subi	r24, 0xFF	; 255
    1d3e:	8f 30       	cpi	r24, 0x0F	; 15
    1d40:	a9 f7       	brne	.-22     	; 0x1d2c <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1d42:	20 91 e8 20 	lds	r18, 0x20E8	; 0x8020e8 <idx>
    1d46:	e2 2f       	mov	r30, r18
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	e8 5f       	subi	r30, 0xF8	; 248
    1d4c:	fe 4d       	sbci	r31, 0xDE	; 222
    1d4e:	80 e2       	ldi	r24, 0x20	; 32
    1d50:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1d52:	2f 5f       	subi	r18, 0xFF	; 255
    1d54:	2f 30       	cpi	r18, 0x0F	; 15
    1d56:	c8 f4       	brcc	.+50     	; 0x1d8a <__vector_91+0x126>
					if(gps[i] == 32){
    1d58:	82 2f       	mov	r24, r18
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	e8 5f       	subi	r30, 0xF8	; 248
    1d60:	fe 4d       	sbci	r31, 0xDE	; 222
    1d62:	30 81       	ld	r19, Z
    1d64:	30 32       	cpi	r19, 0x20	; 32
    1d66:	89 f0       	breq	.+34     	; 0x1d8a <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	08 c0       	rjmp	.+16     	; 0x1d7c <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    1d6c:	82 2f       	mov	r24, r18
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	fc 01       	movw	r30, r24
    1d72:	e8 5f       	subi	r30, 0xF8	; 248
    1d74:	fe 4d       	sbci	r31, 0xDE	; 222
    1d76:	30 81       	ld	r19, Z
    1d78:	30 32       	cpi	r19, 0x20	; 32
    1d7a:	39 f0       	breq	.+14     	; 0x1d8a <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	e8 5f       	subi	r30, 0xF8	; 248
    1d80:	fe 4d       	sbci	r31, 0xDE	; 222
    1d82:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
    1d86:	2f 30       	cpi	r18, 0x0F	; 15
    1d88:	89 f7       	brne	.-30     	; 0x1d6c <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	9f 93       	push	r25
    1d90:	8f 93       	push	r24
    1d92:	87 ea       	ldi	r24, 0xA7	; 167
    1d94:	90 e2       	ldi	r25, 0x20	; 32
    1d96:	9f 93       	push	r25
    1d98:	8f 93       	push	r24
    1d9a:	88 e0       	ldi	r24, 0x08	; 8
    1d9c:	91 e2       	ldi	r25, 0x21	; 33
    1d9e:	9f 93       	push	r25
    1da0:	8f 93       	push	r24
    1da2:	93 d7       	rcall	.+3878   	; 0x2cca <sscanf>
				gps_t = (double) val;
    1da4:	69 81       	ldd	r22, Y+1	; 0x01
    1da6:	7a 81       	ldd	r23, Y+2	; 0x02
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	94 d3       	rcall	.+1832   	; 0x24d6 <__floatsisf>
    1dae:	60 93 cc 20 	sts	0x20CC, r22	; 0x8020cc <gps_t>
    1db2:	70 93 cd 20 	sts	0x20CD, r23	; 0x8020cd <gps_t+0x1>
    1db6:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <gps_t+0x2>
    1dba:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <gps_t+0x3>
				break;
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	bd c1       	rjmp	.+890    	; 0x2146 <__vector_91+0x4e2>
    1dcc:	e9 e0       	ldi	r30, 0x09	; 9
    1dce:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    1dd2:	91 91       	ld	r25, Z+
    1dd4:	9e 32       	cpi	r25, 0x2E	; 46
    1dd6:	29 f4       	brne	.+10     	; 0x1de2 <__vector_91+0x17e>
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <__vector_91+0x178>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1ddc:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <idx>
						break;
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <__vector_91+0x184>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    1de2:	8f 5f       	subi	r24, 0xFF	; 255
    1de4:	8f 30       	cpi	r24, 0x0F	; 15
    1de6:	a9 f7       	brne	.-22     	; 0x1dd2 <__vector_91+0x16e>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1de8:	20 91 e8 20 	lds	r18, 0x20E8	; 0x8020e8 <idx>
    1dec:	42 2f       	mov	r20, r18
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	fa 01       	movw	r30, r20
    1df2:	e8 5f       	subi	r30, 0xF8	; 248
    1df4:	fe 4d       	sbci	r31, 0xDE	; 222
    1df6:	80 e2       	ldi	r24, 0x20	; 32
    1df8:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1dfa:	2f 5f       	subi	r18, 0xFF	; 255
    1dfc:	2f 30       	cpi	r18, 0x0F	; 15
    1dfe:	f8 f4       	brcc	.+62     	; 0x1e3e <__vector_91+0x1da>
					if(gps[i] == 32){
    1e00:	82 2f       	mov	r24, r18
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	fc 01       	movw	r30, r24
    1e06:	e8 5f       	subi	r30, 0xF8	; 248
    1e08:	fe 4d       	sbci	r31, 0xDE	; 222
    1e0a:	30 81       	ld	r19, Z
    1e0c:	30 32       	cpi	r19, 0x20	; 32
    1e0e:	b9 f0       	breq	.+46     	; 0x1e3e <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    1e10:	60 e2       	ldi	r22, 0x20	; 32
    1e12:	08 c0       	rjmp	.+16     	; 0x1e24 <__vector_91+0x1c0>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    1e14:	82 2f       	mov	r24, r18
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	fc 01       	movw	r30, r24
    1e1a:	e8 5f       	subi	r30, 0xF8	; 248
    1e1c:	fe 4d       	sbci	r31, 0xDE	; 222
    1e1e:	30 81       	ld	r19, Z
    1e20:	30 32       	cpi	r19, 0x20	; 32
    1e22:	69 f0       	breq	.+26     	; 0x1e3e <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
    1e24:	fc 01       	movw	r30, r24
    1e26:	e4 1b       	sub	r30, r20
    1e28:	f5 0b       	sbc	r31, r21
    1e2a:	ea 5e       	subi	r30, 0xEA	; 234
    1e2c:	fe 4d       	sbci	r31, 0xDE	; 222
    1e2e:	30 83       	st	Z, r19
					gps[i] = 32;
    1e30:	fc 01       	movw	r30, r24
    1e32:	e8 5f       	subi	r30, 0xF8	; 248
    1e34:	fe 4d       	sbci	r31, 0xDE	; 222
    1e36:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    1e38:	2f 5f       	subi	r18, 0xFF	; 255
    1e3a:	2f 30       	cpi	r18, 0x0F	; 15
    1e3c:	59 f7       	brne	.-42     	; 0x1e14 <__vector_91+0x1b0>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    1e3e:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <dec>
    1e42:	80 32       	cpi	r24, 0x20	; 32
    1e44:	19 f4       	brne	.+6      	; 0x1e4c <__vector_91+0x1e8>
					dec[0] = '0';
    1e46:	80 e3       	ldi	r24, 0x30	; 48
    1e48:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <dec>
				}
				sscanf(gps,"%ld",&val);
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	9f 93       	push	r25
    1e52:	8f 93       	push	r24
    1e54:	87 ea       	ldi	r24, 0xA7	; 167
    1e56:	90 e2       	ldi	r25, 0x20	; 32
    1e58:	9f 93       	push	r25
    1e5a:	8f 93       	push	r24
    1e5c:	88 e0       	ldi	r24, 0x08	; 8
    1e5e:	91 e2       	ldi	r25, 0x21	; 33
    1e60:	9f 93       	push	r25
    1e62:	8f 93       	push	r24
    1e64:	32 d7       	rcall	.+3684   	; 0x2cca <sscanf>
				sscanf(dec,"%d",&val2);
    1e66:	ce 01       	movw	r24, r28
    1e68:	05 96       	adiw	r24, 0x05	; 5
    1e6a:	9f 93       	push	r25
    1e6c:	8f 93       	push	r24
    1e6e:	8b ea       	ldi	r24, 0xAB	; 171
    1e70:	90 e2       	ldi	r25, 0x20	; 32
    1e72:	9f 93       	push	r25
    1e74:	8f 93       	push	r24
    1e76:	87 e1       	ldi	r24, 0x17	; 23
    1e78:	91 e2       	ldi	r25, 0x21	; 33
    1e7a:	9f 93       	push	r25
    1e7c:	8f 93       	push	r24
    1e7e:	25 d7       	rcall	.+3658   	; 0x2cca <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    1e80:	89 80       	ldd	r8, Y+1	; 0x01
    1e82:	9a 80       	ldd	r9, Y+2	; 0x02
    1e84:	ab 80       	ldd	r10, Y+3	; 0x03
    1e86:	bc 80       	ldd	r11, Y+4	; 0x04
    1e88:	6d 81       	ldd	r22, Y+5	; 0x05
    1e8a:	7e 81       	ldd	r23, Y+6	; 0x06
    1e8c:	07 2e       	mov	r0, r23
    1e8e:	00 0c       	add	r0, r0
    1e90:	88 0b       	sbc	r24, r24
    1e92:	99 0b       	sbc	r25, r25
    1e94:	20 d3       	rcall	.+1600   	; 0x24d6 <__floatsisf>
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e4       	ldi	r19, 0x40	; 64
    1e9a:	4c e1       	ldi	r20, 0x1C	; 28
    1e9c:	56 e4       	ldi	r21, 0x46	; 70
    1e9e:	46 d2       	rcall	.+1164   	; 0x232c <__divsf3>
    1ea0:	6b 01       	movw	r12, r22
    1ea2:	7c 01       	movw	r14, r24
    1ea4:	c5 01       	movw	r24, r10
    1ea6:	b4 01       	movw	r22, r8
    1ea8:	24 e6       	ldi	r18, 0x64	; 100
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	34 d6       	rcall	.+3176   	; 0x2b1a <__divmodsi4>
    1eb2:	49 01       	movw	r8, r18
    1eb4:	5a 01       	movw	r10, r20
    1eb6:	0f d3       	rcall	.+1566   	; 0x24d6 <__floatsisf>
    1eb8:	9b 01       	movw	r18, r22
    1eba:	ac 01       	movw	r20, r24
    1ebc:	c7 01       	movw	r24, r14
    1ebe:	b6 01       	movw	r22, r12
    1ec0:	cd d1       	rcall	.+922    	; 0x225c <__addsf3>
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e7       	ldi	r20, 0x70	; 112
    1ec8:	52 e4       	ldi	r21, 0x42	; 66
    1eca:	30 d2       	rcall	.+1120   	; 0x232c <__divsf3>
    1ecc:	6b 01       	movw	r12, r22
    1ece:	7c 01       	movw	r14, r24
    1ed0:	c5 01       	movw	r24, r10
    1ed2:	b4 01       	movw	r22, r8
    1ed4:	00 d3       	rcall	.+1536   	; 0x24d6 <__floatsisf>
    1ed6:	9b 01       	movw	r18, r22
    1ed8:	ac 01       	movw	r20, r24
    1eda:	c7 01       	movw	r24, r14
    1edc:	b6 01       	movw	r22, r12
    1ede:	be d1       	rcall	.+892    	; 0x225c <__addsf3>
    1ee0:	60 93 c8 20 	sts	0x20C8, r22	; 0x8020c8 <gps_lat>
    1ee4:	70 93 c9 20 	sts	0x20C9, r23	; 0x8020c9 <gps_lat+0x1>
    1ee8:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <gps_lat+0x2>
    1eec:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <gps_lat+0x3>
				break;
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	28 c1       	rjmp	.+592    	; 0x2146 <__vector_91+0x4e2>
    1ef6:	e9 e0       	ldi	r30, 0x09	; 9
    1ef8:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    1efa:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    1efc:	91 91       	ld	r25, Z+
    1efe:	9e 32       	cpi	r25, 0x2E	; 46
    1f00:	29 f4       	brne	.+10     	; 0x1f0c <__vector_91+0x2a8>
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <__vector_91+0x2a2>
    1f04:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1f06:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <idx>
						break;
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <__vector_91+0x2ae>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    1f0c:	8f 5f       	subi	r24, 0xFF	; 255
    1f0e:	8f 30       	cpi	r24, 0x0F	; 15
    1f10:	a9 f7       	brne	.-22     	; 0x1efc <__vector_91+0x298>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1f12:	20 91 e8 20 	lds	r18, 0x20E8	; 0x8020e8 <idx>
    1f16:	42 2f       	mov	r20, r18
    1f18:	50 e0       	ldi	r21, 0x00	; 0
    1f1a:	fa 01       	movw	r30, r20
    1f1c:	e8 5f       	subi	r30, 0xF8	; 248
    1f1e:	fe 4d       	sbci	r31, 0xDE	; 222
    1f20:	80 e2       	ldi	r24, 0x20	; 32
    1f22:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
    1f26:	2f 30       	cpi	r18, 0x0F	; 15
    1f28:	f8 f4       	brcc	.+62     	; 0x1f68 <__vector_91+0x304>
					if(gps[i] == 32){
    1f2a:	82 2f       	mov	r24, r18
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	fc 01       	movw	r30, r24
    1f30:	e8 5f       	subi	r30, 0xF8	; 248
    1f32:	fe 4d       	sbci	r31, 0xDE	; 222
    1f34:	30 81       	ld	r19, Z
    1f36:	30 32       	cpi	r19, 0x20	; 32
    1f38:	b9 f0       	breq	.+46     	; 0x1f68 <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    1f3a:	60 e2       	ldi	r22, 0x20	; 32
    1f3c:	08 c0       	rjmp	.+16     	; 0x1f4e <__vector_91+0x2ea>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    1f3e:	82 2f       	mov	r24, r18
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	fc 01       	movw	r30, r24
    1f44:	e8 5f       	subi	r30, 0xF8	; 248
    1f46:	fe 4d       	sbci	r31, 0xDE	; 222
    1f48:	30 81       	ld	r19, Z
    1f4a:	30 32       	cpi	r19, 0x20	; 32
    1f4c:	69 f0       	breq	.+26     	; 0x1f68 <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e4 1b       	sub	r30, r20
    1f52:	f5 0b       	sbc	r31, r21
    1f54:	ea 5e       	subi	r30, 0xEA	; 234
    1f56:	fe 4d       	sbci	r31, 0xDE	; 222
    1f58:	30 83       	st	Z, r19
					gps[i] = 32;
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	e8 5f       	subi	r30, 0xF8	; 248
    1f5e:	fe 4d       	sbci	r31, 0xDE	; 222
    1f60:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    1f62:	2f 5f       	subi	r18, 0xFF	; 255
    1f64:	2f 30       	cpi	r18, 0x0F	; 15
    1f66:	59 f7       	brne	.-42     	; 0x1f3e <__vector_91+0x2da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    1f68:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <dec>
    1f6c:	80 32       	cpi	r24, 0x20	; 32
    1f6e:	19 f4       	brne	.+6      	; 0x1f76 <__vector_91+0x312>
					dec[0] = '0';
    1f70:	80 e3       	ldi	r24, 0x30	; 48
    1f72:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <dec>
				}
				sscanf(gps,"%ld",&val);
    1f76:	ce 01       	movw	r24, r28
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	9f 93       	push	r25
    1f7c:	8f 93       	push	r24
    1f7e:	87 ea       	ldi	r24, 0xA7	; 167
    1f80:	90 e2       	ldi	r25, 0x20	; 32
    1f82:	9f 93       	push	r25
    1f84:	8f 93       	push	r24
    1f86:	88 e0       	ldi	r24, 0x08	; 8
    1f88:	91 e2       	ldi	r25, 0x21	; 33
    1f8a:	9f 93       	push	r25
    1f8c:	8f 93       	push	r24
    1f8e:	9d d6       	rcall	.+3386   	; 0x2cca <sscanf>
				sscanf(dec,"%d",&val2);
    1f90:	ce 01       	movw	r24, r28
    1f92:	05 96       	adiw	r24, 0x05	; 5
    1f94:	9f 93       	push	r25
    1f96:	8f 93       	push	r24
    1f98:	8b ea       	ldi	r24, 0xAB	; 171
    1f9a:	90 e2       	ldi	r25, 0x20	; 32
    1f9c:	9f 93       	push	r25
    1f9e:	8f 93       	push	r24
    1fa0:	87 e1       	ldi	r24, 0x17	; 23
    1fa2:	91 e2       	ldi	r25, 0x21	; 33
    1fa4:	9f 93       	push	r25
    1fa6:	8f 93       	push	r24
    1fa8:	90 d6       	rcall	.+3360   	; 0x2cca <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    1faa:	89 80       	ldd	r8, Y+1	; 0x01
    1fac:	9a 80       	ldd	r9, Y+2	; 0x02
    1fae:	ab 80       	ldd	r10, Y+3	; 0x03
    1fb0:	bc 80       	ldd	r11, Y+4	; 0x04
    1fb2:	6d 81       	ldd	r22, Y+5	; 0x05
    1fb4:	7e 81       	ldd	r23, Y+6	; 0x06
    1fb6:	07 2e       	mov	r0, r23
    1fb8:	00 0c       	add	r0, r0
    1fba:	88 0b       	sbc	r24, r24
    1fbc:	99 0b       	sbc	r25, r25
    1fbe:	8b d2       	rcall	.+1302   	; 0x24d6 <__floatsisf>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e4       	ldi	r19, 0x40	; 64
    1fc4:	4c e1       	ldi	r20, 0x1C	; 28
    1fc6:	56 e4       	ldi	r21, 0x46	; 70
    1fc8:	b1 d1       	rcall	.+866    	; 0x232c <__divsf3>
    1fca:	6b 01       	movw	r12, r22
    1fcc:	7c 01       	movw	r14, r24
    1fce:	c5 01       	movw	r24, r10
    1fd0:	b4 01       	movw	r22, r8
    1fd2:	24 e6       	ldi	r18, 0x64	; 100
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	9f d5       	rcall	.+2878   	; 0x2b1a <__divmodsi4>
    1fdc:	49 01       	movw	r8, r18
    1fde:	5a 01       	movw	r10, r20
    1fe0:	7a d2       	rcall	.+1268   	; 0x24d6 <__floatsisf>
    1fe2:	9b 01       	movw	r18, r22
    1fe4:	ac 01       	movw	r20, r24
    1fe6:	c7 01       	movw	r24, r14
    1fe8:	b6 01       	movw	r22, r12
    1fea:	38 d1       	rcall	.+624    	; 0x225c <__addsf3>
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e7       	ldi	r20, 0x70	; 112
    1ff2:	52 e4       	ldi	r21, 0x42	; 66
    1ff4:	9b d1       	rcall	.+822    	; 0x232c <__divsf3>
    1ff6:	6b 01       	movw	r12, r22
    1ff8:	7c 01       	movw	r14, r24
    1ffa:	c5 01       	movw	r24, r10
    1ffc:	b4 01       	movw	r22, r8
    1ffe:	6b d2       	rcall	.+1238   	; 0x24d6 <__floatsisf>
    2000:	9b 01       	movw	r18, r22
    2002:	ac 01       	movw	r20, r24
    2004:	c7 01       	movw	r24, r14
    2006:	b6 01       	movw	r22, r12
    2008:	29 d1       	rcall	.+594    	; 0x225c <__addsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	b0 58       	subi	r27, 0x80	; 128
    2010:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <gps_long>
    2014:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <gps_long+0x1>
    2018:	a0 93 c6 20 	sts	0x20C6, r26	; 0x8020c6 <gps_long+0x2>
    201c:	b0 93 c7 20 	sts	0x20C7, r27	; 0x8020c7 <gps_long+0x3>
    2020:	cd bf       	out	0x3d, r28	; 61
				break;
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	90 c0       	rjmp	.+288    	; 0x2146 <__vector_91+0x4e2>
    2026:	8e eb       	ldi	r24, 0xBE	; 190
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    2028:	90 e2       	ldi	r25, 0x20	; 32
    202a:	9f 93       	push	r25
    202c:	8f 93       	push	r24
    202e:	8b ea       	ldi	r24, 0xAB	; 171
    2030:	90 e2       	ldi	r25, 0x20	; 32
    2032:	9f 93       	push	r25
    2034:	8f 93       	push	r24
    2036:	88 e0       	ldi	r24, 0x08	; 8
    2038:	91 e2       	ldi	r25, 0x21	; 33
    203a:	9f 93       	push	r25
    203c:	8f 93       	push	r24
    203e:	45 d6       	rcall	.+3210   	; 0x2cca <sscanf>
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
				break;
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	7c c0       	rjmp	.+248    	; 0x2146 <__vector_91+0x4e2>
    204e:	e9 e0       	ldi	r30, 0x09	; 9
    2050:	f1 e2       	ldi	r31, 0x21	; 33
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2056:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    2058:	29 f4       	brne	.+10     	; 0x2064 <__vector_91+0x400>
    205a:	01 c0       	rjmp	.+2      	; 0x205e <__vector_91+0x3fa>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <idx>
						idx = i;
    2062:	03 c0       	rjmp	.+6      	; 0x206a <__vector_91+0x406>
    2064:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    2066:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2068:	a9 f7       	brne	.-22     	; 0x2054 <__vector_91+0x3f0>
    206a:	20 91 e8 20 	lds	r18, 0x20E8	; 0x8020e8 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    206e:	42 2f       	mov	r20, r18
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	fa 01       	movw	r30, r20
    2074:	e8 5f       	subi	r30, 0xF8	; 248
    2076:	fe 4d       	sbci	r31, 0xDE	; 222
    2078:	80 e2       	ldi	r24, 0x20	; 32
    207a:	80 83       	st	Z, r24
    207c:	2f 5f       	subi	r18, 0xFF	; 255
    207e:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    2080:	f8 f4       	brcc	.+62     	; 0x20c0 <__vector_91+0x45c>
    2082:	82 2f       	mov	r24, r18
    2084:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    2086:	fc 01       	movw	r30, r24
    2088:	e8 5f       	subi	r30, 0xF8	; 248
    208a:	fe 4d       	sbci	r31, 0xDE	; 222
    208c:	30 81       	ld	r19, Z
    208e:	30 32       	cpi	r19, 0x20	; 32
    2090:	b9 f0       	breq	.+46     	; 0x20c0 <__vector_91+0x45c>
    2092:	60 e2       	ldi	r22, 0x20	; 32
    2094:	08 c0       	rjmp	.+16     	; 0x20a6 <__vector_91+0x442>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2096:	82 2f       	mov	r24, r18
    2098:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    209a:	fc 01       	movw	r30, r24
    209c:	e8 5f       	subi	r30, 0xF8	; 248
    209e:	fe 4d       	sbci	r31, 0xDE	; 222
    20a0:	30 81       	ld	r19, Z
    20a2:	30 32       	cpi	r19, 0x20	; 32
    20a4:	69 f0       	breq	.+26     	; 0x20c0 <__vector_91+0x45c>
    20a6:	fc 01       	movw	r30, r24
    20a8:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    20aa:	f5 0b       	sbc	r31, r21
    20ac:	ea 5e       	subi	r30, 0xEA	; 234
    20ae:	fe 4d       	sbci	r31, 0xDE	; 222
    20b0:	30 83       	st	Z, r19
    20b2:	fc 01       	movw	r30, r24
    20b4:	e8 5f       	subi	r30, 0xF8	; 248
					gps[i] = 32;
    20b6:	fe 4d       	sbci	r31, 0xDE	; 222
    20b8:	60 83       	st	Z, r22
    20ba:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    20bc:	2f 30       	cpi	r18, 0x0F	; 15
    20be:	59 f7       	brne	.-42     	; 0x2096 <__vector_91+0x432>
    20c0:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    20c4:	80 32       	cpi	r24, 0x20	; 32
    20c6:	19 f4       	brne	.+6      	; 0x20ce <__vector_91+0x46a>
    20c8:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    20ca:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <dec>
    20ce:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	9f 93       	push	r25
    20d4:	8f 93       	push	r24
    20d6:	87 ea       	ldi	r24, 0xA7	; 167
    20d8:	90 e2       	ldi	r25, 0x20	; 32
    20da:	9f 93       	push	r25
    20dc:	8f 93       	push	r24
    20de:	88 e0       	ldi	r24, 0x08	; 8
    20e0:	91 e2       	ldi	r25, 0x21	; 33
    20e2:	9f 93       	push	r25
    20e4:	8f 93       	push	r24
    20e6:	f1 d5       	rcall	.+3042   	; 0x2cca <sscanf>
				sscanf(dec,"%d",&val2);
    20e8:	ce 01       	movw	r24, r28
    20ea:	05 96       	adiw	r24, 0x05	; 5
    20ec:	9f 93       	push	r25
    20ee:	8f 93       	push	r24
    20f0:	8b ea       	ldi	r24, 0xAB	; 171
    20f2:	90 e2       	ldi	r25, 0x20	; 32
    20f4:	9f 93       	push	r25
    20f6:	8f 93       	push	r24
    20f8:	87 e1       	ldi	r24, 0x17	; 23
    20fa:	91 e2       	ldi	r25, 0x21	; 33
    20fc:	9f 93       	push	r25
    20fe:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    2100:	e4 d5       	rcall	.+3016   	; 0x2cca <sscanf>
    2102:	69 81       	ldd	r22, Y+1	; 0x01
    2104:	7a 81       	ldd	r23, Y+2	; 0x02
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	e5 d1       	rcall	.+970    	; 0x24d6 <__floatsisf>
    210c:	6b 01       	movw	r12, r22
    210e:	7c 01       	movw	r14, r24
    2110:	6d 81       	ldd	r22, Y+5	; 0x05
    2112:	7e 81       	ldd	r23, Y+6	; 0x06
    2114:	07 2e       	mov	r0, r23
    2116:	00 0c       	add	r0, r0
    2118:	88 0b       	sbc	r24, r24
    211a:	99 0b       	sbc	r25, r25
    211c:	dc d1       	rcall	.+952    	; 0x24d6 <__floatsisf>
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	02 d1       	rcall	.+516    	; 0x232c <__divsf3>
    2128:	9b 01       	movw	r18, r22
    212a:	ac 01       	movw	r20, r24
    212c:	c7 01       	movw	r24, r14
    212e:	b6 01       	movw	r22, r12
    2130:	95 d0       	rcall	.+298    	; 0x225c <__addsf3>
    2132:	60 93 c0 20 	sts	0x20C0, r22	; 0x8020c0 <gps_alt>
    2136:	70 93 c1 20 	sts	0x20C1, r23	; 0x8020c1 <gps_alt+0x1>
    213a:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <gps_alt+0x2>
    213e:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <gps_alt+0x3>
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <writing>
				break;
    214a:	88 23       	and	r24, r24
		}
	
		if(writing){
    214c:	d1 f0       	breq	.+52     	; 0x2182 <__vector_91+0x51e>
    214e:	10 92 e8 20 	sts	0x20E8, r1	; 0x8020e8 <idx>
    2152:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <commas>
			idx = 0;
    2156:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    2158:	80 93 e9 20 	sts	0x20E9, r24	; 0x8020e9 <commas>
    215c:	10 92 ea 20 	sts	0x20EA, r1	; 0x8020ea <word_pos>
    2160:	e8 e0       	ldi	r30, 0x08	; 8
			word_pos = 0;
    2162:	f1 e2       	ldi	r31, 0x21	; 33
    2164:	27 e1       	ldi	r18, 0x17	; 23
    2166:	31 e2       	ldi	r19, 0x21	; 33
    2168:	80 e2       	ldi	r24, 0x20	; 32
    216a:	81 93       	st	Z+, r24
    216c:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    216e:	3f 07       	cpc	r19, r31
    2170:	e1 f7       	brne	.-8      	; 0x216a <__vector_91+0x506>
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2172:	e7 e1       	ldi	r30, 0x17	; 23
    2174:	f1 e2       	ldi	r31, 0x21	; 33
    2176:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2178:	80 83       	st	Z, r24
    217a:	81 83       	std	Z+1, r24	; 0x01
    217c:	82 83       	std	Z+2, r24	; 0x02
    217e:	83 83       	std	Z+3, r24	; 0x03
    2180:	84 83       	std	Z+4, r24	; 0x04
    2182:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <writing>
    2186:	88 23       	and	r24, r24
			}
		}
	}
		
	if(writing){
    2188:	09 f4       	brne	.+2      	; 0x218c <__vector_91+0x528>
    218a:	40 c0       	rjmp	.+128    	; 0x220c <__vector_91+0x5a8>
    218c:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <pos>
    2190:	93 30       	cpi	r25, 0x03	; 3
		switch(pos){
    2192:	19 f0       	breq	.+6      	; 0x219a <__vector_91+0x536>
    2194:	94 30       	cpi	r25, 0x04	; 4
    2196:	31 f0       	breq	.+12     	; 0x21a4 <__vector_91+0x540>
    2198:	09 c0       	rjmp	.+18     	; 0x21ac <__vector_91+0x548>
    219a:	17 34       	cpi	r17, 0x47	; 71
    219c:	39 f0       	breq	.+14     	; 0x21ac <__vector_91+0x548>
    219e:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <writing>
			case 3:
				if(c != 'G'){
    21a2:	04 c0       	rjmp	.+8      	; 0x21ac <__vector_91+0x548>
					writing = 0;
    21a4:	17 34       	cpi	r17, 0x47	; 71
    21a6:	11 f0       	breq	.+4      	; 0x21ac <__vector_91+0x548>
    21a8:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <writing>
				}
				break;
				
			case 4:
				if(c != 'G'){
    21ac:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <word_pos>
					writing = 0;
    21b0:	e8 2f       	mov	r30, r24
				}
				break;
		}
		gps[word_pos] = c;
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	e8 5f       	subi	r30, 0xF8	; 248
    21b6:	fe 4d       	sbci	r31, 0xDE	; 222
    21b8:	10 83       	st	Z, r17
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
    21bc:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <word_pos>
		word_pos++;
    21c0:	9f 5f       	subi	r25, 0xFF	; 255
    21c2:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <pos>
		pos++;
    21c6:	22 c0       	rjmp	.+68     	; 0x220c <__vector_91+0x5a8>
    21c8:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <gps>
	}
}
    21cc:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <__vector_91+0x56e>
    21d0:	b1 cd       	rjmp	.-1182   	; 0x1d34 <__vector_91+0xd0>
    21d2:	e9 e0       	ldi	r30, 0x09	; 9
    21d4:	f1 e2       	ldi	r31, 0x21	; 33
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	a9 cd       	rjmp	.-1198   	; 0x1d2c <__vector_91+0xc8>
    21da:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    21dc:	1a 82       	std	Y+2, r1	; 0x02
    21de:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    21e0:	1c 82       	std	Y+4, r1	; 0x04
    21e2:	1d 82       	std	Y+5, r1	; 0x05
    21e4:	1e 82       	std	Y+6, r1	; 0x06
    21e6:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <commas>
		int16_t val2 = 0;
    21ea:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__vector_91+0x58c>
    21ee:	92 cd       	rjmp	.-1244   	; 0x1d14 <__vector_91+0xb0>
    21f0:	30 f4       	brcc	.+12     	; 0x21fe <__vector_91+0x59a>
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	49 f3       	breq	.-46     	; 0x21c8 <__vector_91+0x564>
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	09 f4       	brne	.+2      	; 0x21fc <__vector_91+0x598>
    21fa:	92 cd       	rjmp	.-1244   	; 0x1d20 <__vector_91+0xbc>
    21fc:	a4 cf       	rjmp	.-184    	; 0x2146 <__vector_91+0x4e2>
    21fe:	87 30       	cpi	r24, 0x07	; 7
    2200:	09 f4       	brne	.+2      	; 0x2204 <__vector_91+0x5a0>
    2202:	11 cf       	rjmp	.-478    	; 0x2026 <__vector_91+0x3c2>
    2204:	89 30       	cpi	r24, 0x09	; 9
    2206:	09 f4       	brne	.+2      	; 0x220a <__vector_91+0x5a6>
    2208:	7f cd       	rjmp	.-1282   	; 0x1d08 <__vector_91+0xa4>
    220a:	9d cf       	rjmp	.-198    	; 0x2146 <__vector_91+0x4e2>
    220c:	26 96       	adiw	r28, 0x06	; 6
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	ff 91       	pop	r31
    2218:	ef 91       	pop	r30
    221a:	bf 91       	pop	r27
    221c:	af 91       	pop	r26
    221e:	9f 91       	pop	r25
    2220:	8f 91       	pop	r24
    2222:	7f 91       	pop	r23
    2224:	6f 91       	pop	r22
    2226:	5f 91       	pop	r21
    2228:	4f 91       	pop	r20
    222a:	3f 91       	pop	r19
    222c:	2f 91       	pop	r18
    222e:	1f 91       	pop	r17
    2230:	ff 90       	pop	r15
    2232:	ef 90       	pop	r14
    2234:	df 90       	pop	r13
    2236:	cf 90       	pop	r12
    2238:	bf 90       	pop	r11
    223a:	af 90       	pop	r10
    223c:	9f 90       	pop	r9
    223e:	8f 90       	pop	r8
    2240:	0f 90       	pop	r0
    2242:	0b be       	out	0x3b, r0	; 59
    2244:	0f 90       	pop	r0
    2246:	0a be       	out	0x3a, r0	; 58
    2248:	0f 90       	pop	r0
    224a:	09 be       	out	0x39, r0	; 57
    224c:	0f 90       	pop	r0
    224e:	08 be       	out	0x38, r0	; 56
    2250:	0f 90       	pop	r0
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	0f 90       	pop	r0
    2256:	1f 90       	pop	r1
    2258:	18 95       	reti

0000225a <__subsf3>:
    225a:	50 58       	subi	r21, 0x80	; 128

0000225c <__addsf3>:
    225c:	bb 27       	eor	r27, r27
    225e:	aa 27       	eor	r26, r26
    2260:	0e d0       	rcall	.+28     	; 0x227e <__addsf3x>
    2262:	fd c1       	rjmp	.+1018   	; 0x265e <__fp_round>
    2264:	ee d1       	rcall	.+988    	; 0x2642 <__fp_pscA>
    2266:	30 f0       	brcs	.+12     	; 0x2274 <__addsf3+0x18>
    2268:	f3 d1       	rcall	.+998    	; 0x2650 <__fp_pscB>
    226a:	20 f0       	brcs	.+8      	; 0x2274 <__addsf3+0x18>
    226c:	31 f4       	brne	.+12     	; 0x227a <__addsf3+0x1e>
    226e:	9f 3f       	cpi	r25, 0xFF	; 255
    2270:	11 f4       	brne	.+4      	; 0x2276 <__addsf3+0x1a>
    2272:	1e f4       	brtc	.+6      	; 0x227a <__addsf3+0x1e>
    2274:	d3 c1       	rjmp	.+934    	; 0x261c <__fp_nan>
    2276:	0e f4       	brtc	.+2      	; 0x227a <__addsf3+0x1e>
    2278:	e0 95       	com	r30
    227a:	e7 fb       	bst	r30, 7
    227c:	c9 c1       	rjmp	.+914    	; 0x2610 <__fp_inf>

0000227e <__addsf3x>:
    227e:	e9 2f       	mov	r30, r25
    2280:	ff d1       	rcall	.+1022   	; 0x2680 <__fp_split3>
    2282:	80 f3       	brcs	.-32     	; 0x2264 <__addsf3+0x8>
    2284:	ba 17       	cp	r27, r26
    2286:	62 07       	cpc	r22, r18
    2288:	73 07       	cpc	r23, r19
    228a:	84 07       	cpc	r24, r20
    228c:	95 07       	cpc	r25, r21
    228e:	18 f0       	brcs	.+6      	; 0x2296 <__addsf3x+0x18>
    2290:	71 f4       	brne	.+28     	; 0x22ae <__addsf3x+0x30>
    2292:	9e f5       	brtc	.+102    	; 0x22fa <__addsf3x+0x7c>
    2294:	17 c2       	rjmp	.+1070   	; 0x26c4 <__fp_zero>
    2296:	0e f4       	brtc	.+2      	; 0x229a <__addsf3x+0x1c>
    2298:	e0 95       	com	r30
    229a:	0b 2e       	mov	r0, r27
    229c:	ba 2f       	mov	r27, r26
    229e:	a0 2d       	mov	r26, r0
    22a0:	0b 01       	movw	r0, r22
    22a2:	b9 01       	movw	r22, r18
    22a4:	90 01       	movw	r18, r0
    22a6:	0c 01       	movw	r0, r24
    22a8:	ca 01       	movw	r24, r20
    22aa:	a0 01       	movw	r20, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	ff 27       	eor	r31, r31
    22b0:	59 1b       	sub	r21, r25
    22b2:	99 f0       	breq	.+38     	; 0x22da <__addsf3x+0x5c>
    22b4:	59 3f       	cpi	r21, 0xF9	; 249
    22b6:	50 f4       	brcc	.+20     	; 0x22cc <__addsf3x+0x4e>
    22b8:	50 3e       	cpi	r21, 0xE0	; 224
    22ba:	68 f1       	brcs	.+90     	; 0x2316 <__addsf3x+0x98>
    22bc:	1a 16       	cp	r1, r26
    22be:	f0 40       	sbci	r31, 0x00	; 0
    22c0:	a2 2f       	mov	r26, r18
    22c2:	23 2f       	mov	r18, r19
    22c4:	34 2f       	mov	r19, r20
    22c6:	44 27       	eor	r20, r20
    22c8:	58 5f       	subi	r21, 0xF8	; 248
    22ca:	f3 cf       	rjmp	.-26     	; 0x22b2 <__addsf3x+0x34>
    22cc:	46 95       	lsr	r20
    22ce:	37 95       	ror	r19
    22d0:	27 95       	ror	r18
    22d2:	a7 95       	ror	r26
    22d4:	f0 40       	sbci	r31, 0x00	; 0
    22d6:	53 95       	inc	r21
    22d8:	c9 f7       	brne	.-14     	; 0x22cc <__addsf3x+0x4e>
    22da:	7e f4       	brtc	.+30     	; 0x22fa <__addsf3x+0x7c>
    22dc:	1f 16       	cp	r1, r31
    22de:	ba 0b       	sbc	r27, r26
    22e0:	62 0b       	sbc	r22, r18
    22e2:	73 0b       	sbc	r23, r19
    22e4:	84 0b       	sbc	r24, r20
    22e6:	ba f0       	brmi	.+46     	; 0x2316 <__addsf3x+0x98>
    22e8:	91 50       	subi	r25, 0x01	; 1
    22ea:	a1 f0       	breq	.+40     	; 0x2314 <__addsf3x+0x96>
    22ec:	ff 0f       	add	r31, r31
    22ee:	bb 1f       	adc	r27, r27
    22f0:	66 1f       	adc	r22, r22
    22f2:	77 1f       	adc	r23, r23
    22f4:	88 1f       	adc	r24, r24
    22f6:	c2 f7       	brpl	.-16     	; 0x22e8 <__addsf3x+0x6a>
    22f8:	0e c0       	rjmp	.+28     	; 0x2316 <__addsf3x+0x98>
    22fa:	ba 0f       	add	r27, r26
    22fc:	62 1f       	adc	r22, r18
    22fe:	73 1f       	adc	r23, r19
    2300:	84 1f       	adc	r24, r20
    2302:	48 f4       	brcc	.+18     	; 0x2316 <__addsf3x+0x98>
    2304:	87 95       	ror	r24
    2306:	77 95       	ror	r23
    2308:	67 95       	ror	r22
    230a:	b7 95       	ror	r27
    230c:	f7 95       	ror	r31
    230e:	9e 3f       	cpi	r25, 0xFE	; 254
    2310:	08 f0       	brcs	.+2      	; 0x2314 <__addsf3x+0x96>
    2312:	b3 cf       	rjmp	.-154    	; 0x227a <__addsf3+0x1e>
    2314:	93 95       	inc	r25
    2316:	88 0f       	add	r24, r24
    2318:	08 f0       	brcs	.+2      	; 0x231c <__addsf3x+0x9e>
    231a:	99 27       	eor	r25, r25
    231c:	ee 0f       	add	r30, r30
    231e:	97 95       	ror	r25
    2320:	87 95       	ror	r24
    2322:	08 95       	ret

00002324 <__cmpsf2>:
    2324:	51 d1       	rcall	.+674    	; 0x25c8 <__fp_cmp>
    2326:	08 f4       	brcc	.+2      	; 0x232a <__cmpsf2+0x6>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	08 95       	ret

0000232c <__divsf3>:
    232c:	0c d0       	rcall	.+24     	; 0x2346 <__divsf3x>
    232e:	97 c1       	rjmp	.+814    	; 0x265e <__fp_round>
    2330:	8f d1       	rcall	.+798    	; 0x2650 <__fp_pscB>
    2332:	40 f0       	brcs	.+16     	; 0x2344 <__divsf3+0x18>
    2334:	86 d1       	rcall	.+780    	; 0x2642 <__fp_pscA>
    2336:	30 f0       	brcs	.+12     	; 0x2344 <__divsf3+0x18>
    2338:	21 f4       	brne	.+8      	; 0x2342 <__divsf3+0x16>
    233a:	5f 3f       	cpi	r21, 0xFF	; 255
    233c:	19 f0       	breq	.+6      	; 0x2344 <__divsf3+0x18>
    233e:	68 c1       	rjmp	.+720    	; 0x2610 <__fp_inf>
    2340:	51 11       	cpse	r21, r1
    2342:	c1 c1       	rjmp	.+898    	; 0x26c6 <__fp_szero>
    2344:	6b c1       	rjmp	.+726    	; 0x261c <__fp_nan>

00002346 <__divsf3x>:
    2346:	9c d1       	rcall	.+824    	; 0x2680 <__fp_split3>
    2348:	98 f3       	brcs	.-26     	; 0x2330 <__divsf3+0x4>

0000234a <__divsf3_pse>:
    234a:	99 23       	and	r25, r25
    234c:	c9 f3       	breq	.-14     	; 0x2340 <__divsf3+0x14>
    234e:	55 23       	and	r21, r21
    2350:	b1 f3       	breq	.-20     	; 0x233e <__divsf3+0x12>
    2352:	95 1b       	sub	r25, r21
    2354:	55 0b       	sbc	r21, r21
    2356:	bb 27       	eor	r27, r27
    2358:	aa 27       	eor	r26, r26
    235a:	62 17       	cp	r22, r18
    235c:	73 07       	cpc	r23, r19
    235e:	84 07       	cpc	r24, r20
    2360:	38 f0       	brcs	.+14     	; 0x2370 <__divsf3_pse+0x26>
    2362:	9f 5f       	subi	r25, 0xFF	; 255
    2364:	5f 4f       	sbci	r21, 0xFF	; 255
    2366:	22 0f       	add	r18, r18
    2368:	33 1f       	adc	r19, r19
    236a:	44 1f       	adc	r20, r20
    236c:	aa 1f       	adc	r26, r26
    236e:	a9 f3       	breq	.-22     	; 0x235a <__divsf3_pse+0x10>
    2370:	33 d0       	rcall	.+102    	; 0x23d8 <__divsf3_pse+0x8e>
    2372:	0e 2e       	mov	r0, r30
    2374:	3a f0       	brmi	.+14     	; 0x2384 <__divsf3_pse+0x3a>
    2376:	e0 e8       	ldi	r30, 0x80	; 128
    2378:	30 d0       	rcall	.+96     	; 0x23da <__divsf3_pse+0x90>
    237a:	91 50       	subi	r25, 0x01	; 1
    237c:	50 40       	sbci	r21, 0x00	; 0
    237e:	e6 95       	lsr	r30
    2380:	00 1c       	adc	r0, r0
    2382:	ca f7       	brpl	.-14     	; 0x2376 <__divsf3_pse+0x2c>
    2384:	29 d0       	rcall	.+82     	; 0x23d8 <__divsf3_pse+0x8e>
    2386:	fe 2f       	mov	r31, r30
    2388:	27 d0       	rcall	.+78     	; 0x23d8 <__divsf3_pse+0x8e>
    238a:	66 0f       	add	r22, r22
    238c:	77 1f       	adc	r23, r23
    238e:	88 1f       	adc	r24, r24
    2390:	bb 1f       	adc	r27, r27
    2392:	26 17       	cp	r18, r22
    2394:	37 07       	cpc	r19, r23
    2396:	48 07       	cpc	r20, r24
    2398:	ab 07       	cpc	r26, r27
    239a:	b0 e8       	ldi	r27, 0x80	; 128
    239c:	09 f0       	breq	.+2      	; 0x23a0 <__divsf3_pse+0x56>
    239e:	bb 0b       	sbc	r27, r27
    23a0:	80 2d       	mov	r24, r0
    23a2:	bf 01       	movw	r22, r30
    23a4:	ff 27       	eor	r31, r31
    23a6:	93 58       	subi	r25, 0x83	; 131
    23a8:	5f 4f       	sbci	r21, 0xFF	; 255
    23aa:	2a f0       	brmi	.+10     	; 0x23b6 <__divsf3_pse+0x6c>
    23ac:	9e 3f       	cpi	r25, 0xFE	; 254
    23ae:	51 05       	cpc	r21, r1
    23b0:	68 f0       	brcs	.+26     	; 0x23cc <__divsf3_pse+0x82>
    23b2:	2e c1       	rjmp	.+604    	; 0x2610 <__fp_inf>
    23b4:	88 c1       	rjmp	.+784    	; 0x26c6 <__fp_szero>
    23b6:	5f 3f       	cpi	r21, 0xFF	; 255
    23b8:	ec f3       	brlt	.-6      	; 0x23b4 <__divsf3_pse+0x6a>
    23ba:	98 3e       	cpi	r25, 0xE8	; 232
    23bc:	dc f3       	brlt	.-10     	; 0x23b4 <__divsf3_pse+0x6a>
    23be:	86 95       	lsr	r24
    23c0:	77 95       	ror	r23
    23c2:	67 95       	ror	r22
    23c4:	b7 95       	ror	r27
    23c6:	f7 95       	ror	r31
    23c8:	9f 5f       	subi	r25, 0xFF	; 255
    23ca:	c9 f7       	brne	.-14     	; 0x23be <__divsf3_pse+0x74>
    23cc:	88 0f       	add	r24, r24
    23ce:	91 1d       	adc	r25, r1
    23d0:	96 95       	lsr	r25
    23d2:	87 95       	ror	r24
    23d4:	97 f9       	bld	r25, 7
    23d6:	08 95       	ret
    23d8:	e1 e0       	ldi	r30, 0x01	; 1
    23da:	66 0f       	add	r22, r22
    23dc:	77 1f       	adc	r23, r23
    23de:	88 1f       	adc	r24, r24
    23e0:	bb 1f       	adc	r27, r27
    23e2:	62 17       	cp	r22, r18
    23e4:	73 07       	cpc	r23, r19
    23e6:	84 07       	cpc	r24, r20
    23e8:	ba 07       	cpc	r27, r26
    23ea:	20 f0       	brcs	.+8      	; 0x23f4 <__divsf3_pse+0xaa>
    23ec:	62 1b       	sub	r22, r18
    23ee:	73 0b       	sbc	r23, r19
    23f0:	84 0b       	sbc	r24, r20
    23f2:	ba 0b       	sbc	r27, r26
    23f4:	ee 1f       	adc	r30, r30
    23f6:	88 f7       	brcc	.-30     	; 0x23da <__divsf3_pse+0x90>
    23f8:	e0 95       	com	r30
    23fa:	08 95       	ret

000023fc <__fixsfdi>:
    23fc:	be e3       	ldi	r27, 0x3E	; 62
    23fe:	04 d0       	rcall	.+8      	; 0x2408 <__fixunssfdi+0x2>
    2400:	08 f4       	brcc	.+2      	; 0x2404 <__fixsfdi+0x8>
    2402:	90 e8       	ldi	r25, 0x80	; 128
    2404:	08 95       	ret

00002406 <__fixunssfdi>:
    2406:	bf e3       	ldi	r27, 0x3F	; 63
    2408:	22 27       	eor	r18, r18
    240a:	33 27       	eor	r19, r19
    240c:	a9 01       	movw	r20, r18
    240e:	40 d1       	rcall	.+640    	; 0x2690 <__fp_splitA>
    2410:	58 f1       	brcs	.+86     	; 0x2468 <__fixunssfdi+0x62>
    2412:	9f 57       	subi	r25, 0x7F	; 127
    2414:	40 f1       	brcs	.+80     	; 0x2466 <__fixunssfdi+0x60>
    2416:	b9 17       	cp	r27, r25
    2418:	38 f1       	brcs	.+78     	; 0x2468 <__fixunssfdi+0x62>
    241a:	bf e3       	ldi	r27, 0x3F	; 63
    241c:	b9 1b       	sub	r27, r25
    241e:	99 27       	eor	r25, r25
    2420:	b8 50       	subi	r27, 0x08	; 8
    2422:	3a f4       	brpl	.+14     	; 0x2432 <__fixunssfdi+0x2c>
    2424:	66 0f       	add	r22, r22
    2426:	77 1f       	adc	r23, r23
    2428:	88 1f       	adc	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	b3 95       	inc	r27
    242e:	d2 f3       	brmi	.-12     	; 0x2424 <__fixunssfdi+0x1e>
    2430:	16 c0       	rjmp	.+44     	; 0x245e <__fixunssfdi+0x58>
    2432:	b8 50       	subi	r27, 0x08	; 8
    2434:	4a f0       	brmi	.+18     	; 0x2448 <__fixunssfdi+0x42>
    2436:	23 2f       	mov	r18, r19
    2438:	34 2f       	mov	r19, r20
    243a:	45 2f       	mov	r20, r21
    243c:	56 2f       	mov	r21, r22
    243e:	67 2f       	mov	r22, r23
    2440:	78 2f       	mov	r23, r24
    2442:	88 27       	eor	r24, r24
    2444:	b8 50       	subi	r27, 0x08	; 8
    2446:	ba f7       	brpl	.-18     	; 0x2436 <__fixunssfdi+0x30>
    2448:	b8 5f       	subi	r27, 0xF8	; 248
    244a:	49 f0       	breq	.+18     	; 0x245e <__fixunssfdi+0x58>
    244c:	86 95       	lsr	r24
    244e:	77 95       	ror	r23
    2450:	67 95       	ror	r22
    2452:	57 95       	ror	r21
    2454:	47 95       	ror	r20
    2456:	37 95       	ror	r19
    2458:	27 95       	ror	r18
    245a:	ba 95       	dec	r27
    245c:	b9 f7       	brne	.-18     	; 0x244c <__fixunssfdi+0x46>
    245e:	0e f4       	brtc	.+2      	; 0x2462 <__fixunssfdi+0x5c>
    2460:	e0 d0       	rcall	.+448    	; 0x2622 <__fp_negdi>
    2462:	88 94       	clc
    2464:	08 95       	ret
    2466:	88 94       	clc
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	cb 01       	movw	r24, r22
    246e:	08 95       	ret

00002470 <__fixsfsi>:
    2470:	04 d0       	rcall	.+8      	; 0x247a <__fixunssfsi>
    2472:	68 94       	set
    2474:	b1 11       	cpse	r27, r1
    2476:	27 c1       	rjmp	.+590    	; 0x26c6 <__fp_szero>
    2478:	08 95       	ret

0000247a <__fixunssfsi>:
    247a:	0a d1       	rcall	.+532    	; 0x2690 <__fp_splitA>
    247c:	88 f0       	brcs	.+34     	; 0x24a0 <__fixunssfsi+0x26>
    247e:	9f 57       	subi	r25, 0x7F	; 127
    2480:	90 f0       	brcs	.+36     	; 0x24a6 <__fixunssfsi+0x2c>
    2482:	b9 2f       	mov	r27, r25
    2484:	99 27       	eor	r25, r25
    2486:	b7 51       	subi	r27, 0x17	; 23
    2488:	a0 f0       	brcs	.+40     	; 0x24b2 <__fixunssfsi+0x38>
    248a:	d1 f0       	breq	.+52     	; 0x24c0 <__fixunssfsi+0x46>
    248c:	66 0f       	add	r22, r22
    248e:	77 1f       	adc	r23, r23
    2490:	88 1f       	adc	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	1a f0       	brmi	.+6      	; 0x249c <__fixunssfsi+0x22>
    2496:	ba 95       	dec	r27
    2498:	c9 f7       	brne	.-14     	; 0x248c <__fixunssfsi+0x12>
    249a:	12 c0       	rjmp	.+36     	; 0x24c0 <__fixunssfsi+0x46>
    249c:	b1 30       	cpi	r27, 0x01	; 1
    249e:	81 f0       	breq	.+32     	; 0x24c0 <__fixunssfsi+0x46>
    24a0:	11 d1       	rcall	.+546    	; 0x26c4 <__fp_zero>
    24a2:	b1 e0       	ldi	r27, 0x01	; 1
    24a4:	08 95       	ret
    24a6:	0e c1       	rjmp	.+540    	; 0x26c4 <__fp_zero>
    24a8:	67 2f       	mov	r22, r23
    24aa:	78 2f       	mov	r23, r24
    24ac:	88 27       	eor	r24, r24
    24ae:	b8 5f       	subi	r27, 0xF8	; 248
    24b0:	39 f0       	breq	.+14     	; 0x24c0 <__fixunssfsi+0x46>
    24b2:	b9 3f       	cpi	r27, 0xF9	; 249
    24b4:	cc f3       	brlt	.-14     	; 0x24a8 <__fixunssfsi+0x2e>
    24b6:	86 95       	lsr	r24
    24b8:	77 95       	ror	r23
    24ba:	67 95       	ror	r22
    24bc:	b3 95       	inc	r27
    24be:	d9 f7       	brne	.-10     	; 0x24b6 <__fixunssfsi+0x3c>
    24c0:	3e f4       	brtc	.+14     	; 0x24d0 <__fixunssfsi+0x56>
    24c2:	90 95       	com	r25
    24c4:	80 95       	com	r24
    24c6:	70 95       	com	r23
    24c8:	61 95       	neg	r22
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	8f 4f       	sbci	r24, 0xFF	; 255
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	08 95       	ret

000024d2 <__floatunsisf>:
    24d2:	e8 94       	clt
    24d4:	09 c0       	rjmp	.+18     	; 0x24e8 <__floatsisf+0x12>

000024d6 <__floatsisf>:
    24d6:	97 fb       	bst	r25, 7
    24d8:	3e f4       	brtc	.+14     	; 0x24e8 <__floatsisf+0x12>
    24da:	90 95       	com	r25
    24dc:	80 95       	com	r24
    24de:	70 95       	com	r23
    24e0:	61 95       	neg	r22
    24e2:	7f 4f       	sbci	r23, 0xFF	; 255
    24e4:	8f 4f       	sbci	r24, 0xFF	; 255
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	99 23       	and	r25, r25
    24ea:	a9 f0       	breq	.+42     	; 0x2516 <__floatsisf+0x40>
    24ec:	f9 2f       	mov	r31, r25
    24ee:	96 e9       	ldi	r25, 0x96	; 150
    24f0:	bb 27       	eor	r27, r27
    24f2:	93 95       	inc	r25
    24f4:	f6 95       	lsr	r31
    24f6:	87 95       	ror	r24
    24f8:	77 95       	ror	r23
    24fa:	67 95       	ror	r22
    24fc:	b7 95       	ror	r27
    24fe:	f1 11       	cpse	r31, r1
    2500:	f8 cf       	rjmp	.-16     	; 0x24f2 <__floatsisf+0x1c>
    2502:	fa f4       	brpl	.+62     	; 0x2542 <__floatsisf+0x6c>
    2504:	bb 0f       	add	r27, r27
    2506:	11 f4       	brne	.+4      	; 0x250c <__floatsisf+0x36>
    2508:	60 ff       	sbrs	r22, 0
    250a:	1b c0       	rjmp	.+54     	; 0x2542 <__floatsisf+0x6c>
    250c:	6f 5f       	subi	r22, 0xFF	; 255
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	16 c0       	rjmp	.+44     	; 0x2542 <__floatsisf+0x6c>
    2516:	88 23       	and	r24, r24
    2518:	11 f0       	breq	.+4      	; 0x251e <__floatsisf+0x48>
    251a:	96 e9       	ldi	r25, 0x96	; 150
    251c:	11 c0       	rjmp	.+34     	; 0x2540 <__floatsisf+0x6a>
    251e:	77 23       	and	r23, r23
    2520:	21 f0       	breq	.+8      	; 0x252a <__floatsisf+0x54>
    2522:	9e e8       	ldi	r25, 0x8E	; 142
    2524:	87 2f       	mov	r24, r23
    2526:	76 2f       	mov	r23, r22
    2528:	05 c0       	rjmp	.+10     	; 0x2534 <__floatsisf+0x5e>
    252a:	66 23       	and	r22, r22
    252c:	71 f0       	breq	.+28     	; 0x254a <__floatsisf+0x74>
    252e:	96 e8       	ldi	r25, 0x86	; 134
    2530:	86 2f       	mov	r24, r22
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	2a f0       	brmi	.+10     	; 0x2542 <__floatsisf+0x6c>
    2538:	9a 95       	dec	r25
    253a:	66 0f       	add	r22, r22
    253c:	77 1f       	adc	r23, r23
    253e:	88 1f       	adc	r24, r24
    2540:	da f7       	brpl	.-10     	; 0x2538 <__floatsisf+0x62>
    2542:	88 0f       	add	r24, r24
    2544:	96 95       	lsr	r25
    2546:	87 95       	ror	r24
    2548:	97 f9       	bld	r25, 7
    254a:	08 95       	ret

0000254c <__floatundisf>:
    254c:	e8 94       	clt

0000254e <__fp_di2sf>:
    254e:	f9 2f       	mov	r31, r25
    2550:	96 eb       	ldi	r25, 0xB6	; 182
    2552:	ff 23       	and	r31, r31
    2554:	81 f0       	breq	.+32     	; 0x2576 <__fp_di2sf+0x28>
    2556:	12 16       	cp	r1, r18
    2558:	13 06       	cpc	r1, r19
    255a:	14 06       	cpc	r1, r20
    255c:	44 0b       	sbc	r20, r20
    255e:	93 95       	inc	r25
    2560:	f6 95       	lsr	r31
    2562:	87 95       	ror	r24
    2564:	77 95       	ror	r23
    2566:	67 95       	ror	r22
    2568:	57 95       	ror	r21
    256a:	40 40       	sbci	r20, 0x00	; 0
    256c:	ff 23       	and	r31, r31
    256e:	b9 f7       	brne	.-18     	; 0x255e <__fp_di2sf+0x10>
    2570:	1b c0       	rjmp	.+54     	; 0x25a8 <__fp_di2sf+0x5a>
    2572:	99 27       	eor	r25, r25
    2574:	08 95       	ret
    2576:	88 23       	and	r24, r24
    2578:	51 f4       	brne	.+20     	; 0x258e <__fp_di2sf+0x40>
    257a:	98 50       	subi	r25, 0x08	; 8
    257c:	d2 f7       	brpl	.-12     	; 0x2572 <__fp_di2sf+0x24>
    257e:	87 2b       	or	r24, r23
    2580:	76 2f       	mov	r23, r22
    2582:	65 2f       	mov	r22, r21
    2584:	54 2f       	mov	r21, r20
    2586:	43 2f       	mov	r20, r19
    2588:	32 2f       	mov	r19, r18
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	b1 f3       	breq	.-20     	; 0x257a <__fp_di2sf+0x2c>
    258e:	12 16       	cp	r1, r18
    2590:	13 06       	cpc	r1, r19
    2592:	14 06       	cpc	r1, r20
    2594:	44 0b       	sbc	r20, r20
    2596:	88 23       	and	r24, r24
    2598:	3a f0       	brmi	.+14     	; 0x25a8 <__fp_di2sf+0x5a>
    259a:	9a 95       	dec	r25
    259c:	44 0f       	add	r20, r20
    259e:	55 1f       	adc	r21, r21
    25a0:	66 1f       	adc	r22, r22
    25a2:	77 1f       	adc	r23, r23
    25a4:	88 1f       	adc	r24, r24
    25a6:	ca f7       	brpl	.-14     	; 0x259a <__fp_di2sf+0x4c>
    25a8:	55 23       	and	r21, r21
    25aa:	4a f4       	brpl	.+18     	; 0x25be <__fp_di2sf+0x70>
    25ac:	44 0f       	add	r20, r20
    25ae:	55 1f       	adc	r21, r21
    25b0:	11 f4       	brne	.+4      	; 0x25b6 <__fp_di2sf+0x68>
    25b2:	60 ff       	sbrs	r22, 0
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <__fp_di2sf+0x70>
    25b6:	6f 5f       	subi	r22, 0xFF	; 255
    25b8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ba:	8f 4f       	sbci	r24, 0xFF	; 255
    25bc:	9f 4f       	sbci	r25, 0xFF	; 255
    25be:	88 0f       	add	r24, r24
    25c0:	96 95       	lsr	r25
    25c2:	87 95       	ror	r24
    25c4:	97 f9       	bld	r25, 7
    25c6:	08 95       	ret

000025c8 <__fp_cmp>:
    25c8:	99 0f       	add	r25, r25
    25ca:	00 08       	sbc	r0, r0
    25cc:	55 0f       	add	r21, r21
    25ce:	aa 0b       	sbc	r26, r26
    25d0:	e0 e8       	ldi	r30, 0x80	; 128
    25d2:	fe ef       	ldi	r31, 0xFE	; 254
    25d4:	16 16       	cp	r1, r22
    25d6:	17 06       	cpc	r1, r23
    25d8:	e8 07       	cpc	r30, r24
    25da:	f9 07       	cpc	r31, r25
    25dc:	c0 f0       	brcs	.+48     	; 0x260e <__fp_cmp+0x46>
    25de:	12 16       	cp	r1, r18
    25e0:	13 06       	cpc	r1, r19
    25e2:	e4 07       	cpc	r30, r20
    25e4:	f5 07       	cpc	r31, r21
    25e6:	98 f0       	brcs	.+38     	; 0x260e <__fp_cmp+0x46>
    25e8:	62 1b       	sub	r22, r18
    25ea:	73 0b       	sbc	r23, r19
    25ec:	84 0b       	sbc	r24, r20
    25ee:	95 0b       	sbc	r25, r21
    25f0:	39 f4       	brne	.+14     	; 0x2600 <__fp_cmp+0x38>
    25f2:	0a 26       	eor	r0, r26
    25f4:	61 f0       	breq	.+24     	; 0x260e <__fp_cmp+0x46>
    25f6:	23 2b       	or	r18, r19
    25f8:	24 2b       	or	r18, r20
    25fa:	25 2b       	or	r18, r21
    25fc:	21 f4       	brne	.+8      	; 0x2606 <__fp_cmp+0x3e>
    25fe:	08 95       	ret
    2600:	0a 26       	eor	r0, r26
    2602:	09 f4       	brne	.+2      	; 0x2606 <__fp_cmp+0x3e>
    2604:	a1 40       	sbci	r26, 0x01	; 1
    2606:	a6 95       	lsr	r26
    2608:	8f ef       	ldi	r24, 0xFF	; 255
    260a:	81 1d       	adc	r24, r1
    260c:	81 1d       	adc	r24, r1
    260e:	08 95       	ret

00002610 <__fp_inf>:
    2610:	97 f9       	bld	r25, 7
    2612:	9f 67       	ori	r25, 0x7F	; 127
    2614:	80 e8       	ldi	r24, 0x80	; 128
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	08 95       	ret

0000261c <__fp_nan>:
    261c:	9f ef       	ldi	r25, 0xFF	; 255
    261e:	80 ec       	ldi	r24, 0xC0	; 192
    2620:	08 95       	ret

00002622 <__fp_negdi>:
    2622:	90 95       	com	r25
    2624:	80 95       	com	r24
    2626:	70 95       	com	r23
    2628:	60 95       	com	r22
    262a:	50 95       	com	r21
    262c:	40 95       	com	r20
    262e:	30 95       	com	r19
    2630:	21 95       	neg	r18
    2632:	3f 4f       	sbci	r19, 0xFF	; 255
    2634:	4f 4f       	sbci	r20, 0xFF	; 255
    2636:	5f 4f       	sbci	r21, 0xFF	; 255
    2638:	6f 4f       	sbci	r22, 0xFF	; 255
    263a:	7f 4f       	sbci	r23, 0xFF	; 255
    263c:	8f 4f       	sbci	r24, 0xFF	; 255
    263e:	9f 4f       	sbci	r25, 0xFF	; 255
    2640:	08 95       	ret

00002642 <__fp_pscA>:
    2642:	00 24       	eor	r0, r0
    2644:	0a 94       	dec	r0
    2646:	16 16       	cp	r1, r22
    2648:	17 06       	cpc	r1, r23
    264a:	18 06       	cpc	r1, r24
    264c:	09 06       	cpc	r0, r25
    264e:	08 95       	ret

00002650 <__fp_pscB>:
    2650:	00 24       	eor	r0, r0
    2652:	0a 94       	dec	r0
    2654:	12 16       	cp	r1, r18
    2656:	13 06       	cpc	r1, r19
    2658:	14 06       	cpc	r1, r20
    265a:	05 06       	cpc	r0, r21
    265c:	08 95       	ret

0000265e <__fp_round>:
    265e:	09 2e       	mov	r0, r25
    2660:	03 94       	inc	r0
    2662:	00 0c       	add	r0, r0
    2664:	11 f4       	brne	.+4      	; 0x266a <__fp_round+0xc>
    2666:	88 23       	and	r24, r24
    2668:	52 f0       	brmi	.+20     	; 0x267e <__fp_round+0x20>
    266a:	bb 0f       	add	r27, r27
    266c:	40 f4       	brcc	.+16     	; 0x267e <__fp_round+0x20>
    266e:	bf 2b       	or	r27, r31
    2670:	11 f4       	brne	.+4      	; 0x2676 <__fp_round+0x18>
    2672:	60 ff       	sbrs	r22, 0
    2674:	04 c0       	rjmp	.+8      	; 0x267e <__fp_round+0x20>
    2676:	6f 5f       	subi	r22, 0xFF	; 255
    2678:	7f 4f       	sbci	r23, 0xFF	; 255
    267a:	8f 4f       	sbci	r24, 0xFF	; 255
    267c:	9f 4f       	sbci	r25, 0xFF	; 255
    267e:	08 95       	ret

00002680 <__fp_split3>:
    2680:	57 fd       	sbrc	r21, 7
    2682:	90 58       	subi	r25, 0x80	; 128
    2684:	44 0f       	add	r20, r20
    2686:	55 1f       	adc	r21, r21
    2688:	59 f0       	breq	.+22     	; 0x26a0 <__fp_splitA+0x10>
    268a:	5f 3f       	cpi	r21, 0xFF	; 255
    268c:	71 f0       	breq	.+28     	; 0x26aa <__fp_splitA+0x1a>
    268e:	47 95       	ror	r20

00002690 <__fp_splitA>:
    2690:	88 0f       	add	r24, r24
    2692:	97 fb       	bst	r25, 7
    2694:	99 1f       	adc	r25, r25
    2696:	61 f0       	breq	.+24     	; 0x26b0 <__fp_splitA+0x20>
    2698:	9f 3f       	cpi	r25, 0xFF	; 255
    269a:	79 f0       	breq	.+30     	; 0x26ba <__fp_splitA+0x2a>
    269c:	87 95       	ror	r24
    269e:	08 95       	ret
    26a0:	12 16       	cp	r1, r18
    26a2:	13 06       	cpc	r1, r19
    26a4:	14 06       	cpc	r1, r20
    26a6:	55 1f       	adc	r21, r21
    26a8:	f2 cf       	rjmp	.-28     	; 0x268e <__fp_split3+0xe>
    26aa:	46 95       	lsr	r20
    26ac:	f1 df       	rcall	.-30     	; 0x2690 <__fp_splitA>
    26ae:	08 c0       	rjmp	.+16     	; 0x26c0 <__fp_splitA+0x30>
    26b0:	16 16       	cp	r1, r22
    26b2:	17 06       	cpc	r1, r23
    26b4:	18 06       	cpc	r1, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	f1 cf       	rjmp	.-30     	; 0x269c <__fp_splitA+0xc>
    26ba:	86 95       	lsr	r24
    26bc:	71 05       	cpc	r23, r1
    26be:	61 05       	cpc	r22, r1
    26c0:	08 94       	sec
    26c2:	08 95       	ret

000026c4 <__fp_zero>:
    26c4:	e8 94       	clt

000026c6 <__fp_szero>:
    26c6:	bb 27       	eor	r27, r27
    26c8:	66 27       	eor	r22, r22
    26ca:	77 27       	eor	r23, r23
    26cc:	cb 01       	movw	r24, r22
    26ce:	97 f9       	bld	r25, 7
    26d0:	08 95       	ret

000026d2 <__gesf2>:
    26d2:	7a df       	rcall	.-268    	; 0x25c8 <__fp_cmp>
    26d4:	08 f4       	brcc	.+2      	; 0x26d8 <__gesf2+0x6>
    26d6:	8f ef       	ldi	r24, 0xFF	; 255
    26d8:	08 95       	ret

000026da <__mulsf3>:
    26da:	0b d0       	rcall	.+22     	; 0x26f2 <__mulsf3x>
    26dc:	c0 cf       	rjmp	.-128    	; 0x265e <__fp_round>
    26de:	b1 df       	rcall	.-158    	; 0x2642 <__fp_pscA>
    26e0:	28 f0       	brcs	.+10     	; 0x26ec <__mulsf3+0x12>
    26e2:	b6 df       	rcall	.-148    	; 0x2650 <__fp_pscB>
    26e4:	18 f0       	brcs	.+6      	; 0x26ec <__mulsf3+0x12>
    26e6:	95 23       	and	r25, r21
    26e8:	09 f0       	breq	.+2      	; 0x26ec <__mulsf3+0x12>
    26ea:	92 cf       	rjmp	.-220    	; 0x2610 <__fp_inf>
    26ec:	97 cf       	rjmp	.-210    	; 0x261c <__fp_nan>
    26ee:	11 24       	eor	r1, r1
    26f0:	ea cf       	rjmp	.-44     	; 0x26c6 <__fp_szero>

000026f2 <__mulsf3x>:
    26f2:	c6 df       	rcall	.-116    	; 0x2680 <__fp_split3>
    26f4:	a0 f3       	brcs	.-24     	; 0x26de <__mulsf3+0x4>

000026f6 <__mulsf3_pse>:
    26f6:	95 9f       	mul	r25, r21
    26f8:	d1 f3       	breq	.-12     	; 0x26ee <__mulsf3+0x14>
    26fa:	95 0f       	add	r25, r21
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	55 1f       	adc	r21, r21
    2700:	62 9f       	mul	r22, r18
    2702:	f0 01       	movw	r30, r0
    2704:	72 9f       	mul	r23, r18
    2706:	bb 27       	eor	r27, r27
    2708:	f0 0d       	add	r31, r0
    270a:	b1 1d       	adc	r27, r1
    270c:	63 9f       	mul	r22, r19
    270e:	aa 27       	eor	r26, r26
    2710:	f0 0d       	add	r31, r0
    2712:	b1 1d       	adc	r27, r1
    2714:	aa 1f       	adc	r26, r26
    2716:	64 9f       	mul	r22, r20
    2718:	66 27       	eor	r22, r22
    271a:	b0 0d       	add	r27, r0
    271c:	a1 1d       	adc	r26, r1
    271e:	66 1f       	adc	r22, r22
    2720:	82 9f       	mul	r24, r18
    2722:	22 27       	eor	r18, r18
    2724:	b0 0d       	add	r27, r0
    2726:	a1 1d       	adc	r26, r1
    2728:	62 1f       	adc	r22, r18
    272a:	73 9f       	mul	r23, r19
    272c:	b0 0d       	add	r27, r0
    272e:	a1 1d       	adc	r26, r1
    2730:	62 1f       	adc	r22, r18
    2732:	83 9f       	mul	r24, r19
    2734:	a0 0d       	add	r26, r0
    2736:	61 1d       	adc	r22, r1
    2738:	22 1f       	adc	r18, r18
    273a:	74 9f       	mul	r23, r20
    273c:	33 27       	eor	r19, r19
    273e:	a0 0d       	add	r26, r0
    2740:	61 1d       	adc	r22, r1
    2742:	23 1f       	adc	r18, r19
    2744:	84 9f       	mul	r24, r20
    2746:	60 0d       	add	r22, r0
    2748:	21 1d       	adc	r18, r1
    274a:	82 2f       	mov	r24, r18
    274c:	76 2f       	mov	r23, r22
    274e:	6a 2f       	mov	r22, r26
    2750:	11 24       	eor	r1, r1
    2752:	9f 57       	subi	r25, 0x7F	; 127
    2754:	50 40       	sbci	r21, 0x00	; 0
    2756:	8a f0       	brmi	.+34     	; 0x277a <__mulsf3_pse+0x84>
    2758:	e1 f0       	breq	.+56     	; 0x2792 <__mulsf3_pse+0x9c>
    275a:	88 23       	and	r24, r24
    275c:	4a f0       	brmi	.+18     	; 0x2770 <__mulsf3_pse+0x7a>
    275e:	ee 0f       	add	r30, r30
    2760:	ff 1f       	adc	r31, r31
    2762:	bb 1f       	adc	r27, r27
    2764:	66 1f       	adc	r22, r22
    2766:	77 1f       	adc	r23, r23
    2768:	88 1f       	adc	r24, r24
    276a:	91 50       	subi	r25, 0x01	; 1
    276c:	50 40       	sbci	r21, 0x00	; 0
    276e:	a9 f7       	brne	.-22     	; 0x275a <__mulsf3_pse+0x64>
    2770:	9e 3f       	cpi	r25, 0xFE	; 254
    2772:	51 05       	cpc	r21, r1
    2774:	70 f0       	brcs	.+28     	; 0x2792 <__mulsf3_pse+0x9c>
    2776:	4c cf       	rjmp	.-360    	; 0x2610 <__fp_inf>
    2778:	a6 cf       	rjmp	.-180    	; 0x26c6 <__fp_szero>
    277a:	5f 3f       	cpi	r21, 0xFF	; 255
    277c:	ec f3       	brlt	.-6      	; 0x2778 <__mulsf3_pse+0x82>
    277e:	98 3e       	cpi	r25, 0xE8	; 232
    2780:	dc f3       	brlt	.-10     	; 0x2778 <__mulsf3_pse+0x82>
    2782:	86 95       	lsr	r24
    2784:	77 95       	ror	r23
    2786:	67 95       	ror	r22
    2788:	b7 95       	ror	r27
    278a:	f7 95       	ror	r31
    278c:	e7 95       	ror	r30
    278e:	9f 5f       	subi	r25, 0xFF	; 255
    2790:	c1 f7       	brne	.-16     	; 0x2782 <__mulsf3_pse+0x8c>
    2792:	fe 2b       	or	r31, r30
    2794:	88 0f       	add	r24, r24
    2796:	91 1d       	adc	r25, r1
    2798:	96 95       	lsr	r25
    279a:	87 95       	ror	r24
    279c:	97 f9       	bld	r25, 7
    279e:	08 95       	ret

000027a0 <pow>:
    27a0:	fa 01       	movw	r30, r20
    27a2:	ee 0f       	add	r30, r30
    27a4:	ff 1f       	adc	r31, r31
    27a6:	30 96       	adiw	r30, 0x00	; 0
    27a8:	21 05       	cpc	r18, r1
    27aa:	31 05       	cpc	r19, r1
    27ac:	99 f1       	breq	.+102    	; 0x2814 <pow+0x74>
    27ae:	61 15       	cp	r22, r1
    27b0:	71 05       	cpc	r23, r1
    27b2:	61 f4       	brne	.+24     	; 0x27cc <pow+0x2c>
    27b4:	80 38       	cpi	r24, 0x80	; 128
    27b6:	bf e3       	ldi	r27, 0x3F	; 63
    27b8:	9b 07       	cpc	r25, r27
    27ba:	49 f1       	breq	.+82     	; 0x280e <pow+0x6e>
    27bc:	68 94       	set
    27be:	90 38       	cpi	r25, 0x80	; 128
    27c0:	81 05       	cpc	r24, r1
    27c2:	61 f0       	breq	.+24     	; 0x27dc <pow+0x3c>
    27c4:	80 38       	cpi	r24, 0x80	; 128
    27c6:	bf ef       	ldi	r27, 0xFF	; 255
    27c8:	9b 07       	cpc	r25, r27
    27ca:	41 f0       	breq	.+16     	; 0x27dc <pow+0x3c>
    27cc:	99 23       	and	r25, r25
    27ce:	42 f5       	brpl	.+80     	; 0x2820 <pow+0x80>
    27d0:	ff 3f       	cpi	r31, 0xFF	; 255
    27d2:	e1 05       	cpc	r30, r1
    27d4:	31 05       	cpc	r19, r1
    27d6:	21 05       	cpc	r18, r1
    27d8:	11 f1       	breq	.+68     	; 0x281e <pow+0x7e>
    27da:	e8 94       	clt
    27dc:	08 94       	sec
    27de:	e7 95       	ror	r30
    27e0:	d9 01       	movw	r26, r18
    27e2:	aa 23       	and	r26, r26
    27e4:	29 f4       	brne	.+10     	; 0x27f0 <pow+0x50>
    27e6:	ab 2f       	mov	r26, r27
    27e8:	be 2f       	mov	r27, r30
    27ea:	f8 5f       	subi	r31, 0xF8	; 248
    27ec:	d0 f3       	brcs	.-12     	; 0x27e2 <pow+0x42>
    27ee:	10 c0       	rjmp	.+32     	; 0x2810 <pow+0x70>
    27f0:	ff 5f       	subi	r31, 0xFF	; 255
    27f2:	70 f4       	brcc	.+28     	; 0x2810 <pow+0x70>
    27f4:	a6 95       	lsr	r26
    27f6:	e0 f7       	brcc	.-8      	; 0x27f0 <pow+0x50>
    27f8:	f7 39       	cpi	r31, 0x97	; 151
    27fa:	50 f0       	brcs	.+20     	; 0x2810 <pow+0x70>
    27fc:	19 f0       	breq	.+6      	; 0x2804 <pow+0x64>
    27fe:	ff 3a       	cpi	r31, 0xAF	; 175
    2800:	38 f4       	brcc	.+14     	; 0x2810 <pow+0x70>
    2802:	9f 77       	andi	r25, 0x7F	; 127
    2804:	9f 93       	push	r25
    2806:	0c d0       	rcall	.+24     	; 0x2820 <pow+0x80>
    2808:	0f 90       	pop	r0
    280a:	07 fc       	sbrc	r0, 7
    280c:	90 58       	subi	r25, 0x80	; 128
    280e:	08 95       	ret
    2810:	3e f0       	brts	.+14     	; 0x2820 <pow+0x80>
    2812:	04 cf       	rjmp	.-504    	; 0x261c <__fp_nan>
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	80 e8       	ldi	r24, 0x80	; 128
    281a:	9f e3       	ldi	r25, 0x3F	; 63
    281c:	08 95       	ret
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	9f 77       	andi	r25, 0x7F	; 127
    2822:	5f 93       	push	r21
    2824:	4f 93       	push	r20
    2826:	3f 93       	push	r19
    2828:	2f 93       	push	r18
    282a:	9e d0       	rcall	.+316    	; 0x2968 <log>
    282c:	2f 91       	pop	r18
    282e:	3f 91       	pop	r19
    2830:	4f 91       	pop	r20
    2832:	5f 91       	pop	r21
    2834:	52 df       	rcall	.-348    	; 0x26da <__mulsf3>
    2836:	05 c0       	rjmp	.+10     	; 0x2842 <exp>
    2838:	19 f4       	brne	.+6      	; 0x2840 <pow+0xa0>
    283a:	0e f0       	brts	.+2      	; 0x283e <pow+0x9e>
    283c:	e9 ce       	rjmp	.-558    	; 0x2610 <__fp_inf>
    283e:	42 cf       	rjmp	.-380    	; 0x26c4 <__fp_zero>
    2840:	ed ce       	rjmp	.-550    	; 0x261c <__fp_nan>

00002842 <exp>:
    2842:	26 df       	rcall	.-436    	; 0x2690 <__fp_splitA>
    2844:	c8 f3       	brcs	.-14     	; 0x2838 <pow+0x98>
    2846:	96 38       	cpi	r25, 0x86	; 134
    2848:	c0 f7       	brcc	.-16     	; 0x283a <pow+0x9a>
    284a:	07 f8       	bld	r0, 7
    284c:	0f 92       	push	r0
    284e:	e8 94       	clt
    2850:	2b e3       	ldi	r18, 0x3B	; 59
    2852:	3a ea       	ldi	r19, 0xAA	; 170
    2854:	48 eb       	ldi	r20, 0xB8	; 184
    2856:	5f e7       	ldi	r21, 0x7F	; 127
    2858:	4e df       	rcall	.-356    	; 0x26f6 <__mulsf3_pse>
    285a:	0f 92       	push	r0
    285c:	0f 92       	push	r0
    285e:	0f 92       	push	r0
    2860:	4d b7       	in	r20, 0x3d	; 61
    2862:	5e b7       	in	r21, 0x3e	; 62
    2864:	0f 92       	push	r0
    2866:	c0 d0       	rcall	.+384    	; 0x29e8 <modf>
    2868:	ec ef       	ldi	r30, 0xFC	; 252
    286a:	f1 e0       	ldi	r31, 0x01	; 1
    286c:	16 d0       	rcall	.+44     	; 0x289a <__fp_powser>
    286e:	4f 91       	pop	r20
    2870:	5f 91       	pop	r21
    2872:	ef 91       	pop	r30
    2874:	ff 91       	pop	r31
    2876:	e5 95       	asr	r30
    2878:	ee 1f       	adc	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	49 f0       	breq	.+18     	; 0x2890 <exp+0x4e>
    287e:	fe 57       	subi	r31, 0x7E	; 126
    2880:	e0 68       	ori	r30, 0x80	; 128
    2882:	44 27       	eor	r20, r20
    2884:	ee 0f       	add	r30, r30
    2886:	44 1f       	adc	r20, r20
    2888:	fa 95       	dec	r31
    288a:	e1 f7       	brne	.-8      	; 0x2884 <exp+0x42>
    288c:	41 95       	neg	r20
    288e:	55 0b       	sbc	r21, r21
    2890:	32 d0       	rcall	.+100    	; 0x28f6 <ldexp>
    2892:	0f 90       	pop	r0
    2894:	07 fe       	sbrs	r0, 7
    2896:	26 c0       	rjmp	.+76     	; 0x28e4 <inverse>
    2898:	08 95       	ret

0000289a <__fp_powser>:
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	1f 93       	push	r17
    28a0:	0f 93       	push	r16
    28a2:	ff 92       	push	r15
    28a4:	ef 92       	push	r14
    28a6:	df 92       	push	r13
    28a8:	7b 01       	movw	r14, r22
    28aa:	8c 01       	movw	r16, r24
    28ac:	68 94       	set
    28ae:	05 c0       	rjmp	.+10     	; 0x28ba <__fp_powser+0x20>
    28b0:	da 2e       	mov	r13, r26
    28b2:	ef 01       	movw	r28, r30
    28b4:	1e df       	rcall	.-452    	; 0x26f2 <__mulsf3x>
    28b6:	fe 01       	movw	r30, r28
    28b8:	e8 94       	clt
    28ba:	a5 91       	lpm	r26, Z+
    28bc:	25 91       	lpm	r18, Z+
    28be:	35 91       	lpm	r19, Z+
    28c0:	45 91       	lpm	r20, Z+
    28c2:	55 91       	lpm	r21, Z+
    28c4:	ae f3       	brts	.-22     	; 0x28b0 <__fp_powser+0x16>
    28c6:	ef 01       	movw	r28, r30
    28c8:	da dc       	rcall	.-1612   	; 0x227e <__addsf3x>
    28ca:	fe 01       	movw	r30, r28
    28cc:	97 01       	movw	r18, r14
    28ce:	a8 01       	movw	r20, r16
    28d0:	da 94       	dec	r13
    28d2:	79 f7       	brne	.-34     	; 0x28b2 <__fp_powser+0x18>
    28d4:	df 90       	pop	r13
    28d6:	ef 90       	pop	r14
    28d8:	ff 90       	pop	r15
    28da:	0f 91       	pop	r16
    28dc:	1f 91       	pop	r17
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <inverse>:
    28e4:	9b 01       	movw	r18, r22
    28e6:	ac 01       	movw	r20, r24
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	80 e8       	ldi	r24, 0x80	; 128
    28ee:	9f e3       	ldi	r25, 0x3F	; 63
    28f0:	1d cd       	rjmp	.-1478   	; 0x232c <__divsf3>
    28f2:	8e ce       	rjmp	.-740    	; 0x2610 <__fp_inf>
    28f4:	ac c0       	rjmp	.+344    	; 0x2a4e <__fp_mpack>

000028f6 <ldexp>:
    28f6:	cc de       	rcall	.-616    	; 0x2690 <__fp_splitA>
    28f8:	e8 f3       	brcs	.-6      	; 0x28f4 <inverse+0x10>
    28fa:	99 23       	and	r25, r25
    28fc:	d9 f3       	breq	.-10     	; 0x28f4 <inverse+0x10>
    28fe:	94 0f       	add	r25, r20
    2900:	51 1d       	adc	r21, r1
    2902:	bb f3       	brvs	.-18     	; 0x28f2 <inverse+0xe>
    2904:	91 50       	subi	r25, 0x01	; 1
    2906:	50 40       	sbci	r21, 0x00	; 0
    2908:	94 f0       	brlt	.+36     	; 0x292e <ldexp+0x38>
    290a:	59 f0       	breq	.+22     	; 0x2922 <ldexp+0x2c>
    290c:	88 23       	and	r24, r24
    290e:	32 f0       	brmi	.+12     	; 0x291c <ldexp+0x26>
    2910:	66 0f       	add	r22, r22
    2912:	77 1f       	adc	r23, r23
    2914:	88 1f       	adc	r24, r24
    2916:	91 50       	subi	r25, 0x01	; 1
    2918:	50 40       	sbci	r21, 0x00	; 0
    291a:	c1 f7       	brne	.-16     	; 0x290c <ldexp+0x16>
    291c:	9e 3f       	cpi	r25, 0xFE	; 254
    291e:	51 05       	cpc	r21, r1
    2920:	44 f7       	brge	.-48     	; 0x28f2 <inverse+0xe>
    2922:	88 0f       	add	r24, r24
    2924:	91 1d       	adc	r25, r1
    2926:	96 95       	lsr	r25
    2928:	87 95       	ror	r24
    292a:	97 f9       	bld	r25, 7
    292c:	08 95       	ret
    292e:	5f 3f       	cpi	r21, 0xFF	; 255
    2930:	ac f0       	brlt	.+42     	; 0x295c <ldexp+0x66>
    2932:	98 3e       	cpi	r25, 0xE8	; 232
    2934:	9c f0       	brlt	.+38     	; 0x295c <ldexp+0x66>
    2936:	bb 27       	eor	r27, r27
    2938:	86 95       	lsr	r24
    293a:	77 95       	ror	r23
    293c:	67 95       	ror	r22
    293e:	b7 95       	ror	r27
    2940:	08 f4       	brcc	.+2      	; 0x2944 <ldexp+0x4e>
    2942:	b1 60       	ori	r27, 0x01	; 1
    2944:	93 95       	inc	r25
    2946:	c1 f7       	brne	.-16     	; 0x2938 <ldexp+0x42>
    2948:	bb 0f       	add	r27, r27
    294a:	58 f7       	brcc	.-42     	; 0x2922 <ldexp+0x2c>
    294c:	11 f4       	brne	.+4      	; 0x2952 <ldexp+0x5c>
    294e:	60 ff       	sbrs	r22, 0
    2950:	e8 cf       	rjmp	.-48     	; 0x2922 <ldexp+0x2c>
    2952:	6f 5f       	subi	r22, 0xFF	; 255
    2954:	7f 4f       	sbci	r23, 0xFF	; 255
    2956:	8f 4f       	sbci	r24, 0xFF	; 255
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	e3 cf       	rjmp	.-58     	; 0x2922 <ldexp+0x2c>
    295c:	b4 ce       	rjmp	.-664    	; 0x26c6 <__fp_szero>
    295e:	0e f0       	brts	.+2      	; 0x2962 <ldexp+0x6c>
    2960:	76 c0       	rjmp	.+236    	; 0x2a4e <__fp_mpack>
    2962:	5c ce       	rjmp	.-840    	; 0x261c <__fp_nan>
    2964:	68 94       	set
    2966:	54 ce       	rjmp	.-856    	; 0x2610 <__fp_inf>

00002968 <log>:
    2968:	93 de       	rcall	.-730    	; 0x2690 <__fp_splitA>
    296a:	c8 f3       	brcs	.-14     	; 0x295e <ldexp+0x68>
    296c:	99 23       	and	r25, r25
    296e:	d1 f3       	breq	.-12     	; 0x2964 <ldexp+0x6e>
    2970:	c6 f3       	brts	.-16     	; 0x2962 <ldexp+0x6c>
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	1f 93       	push	r17
    2978:	0f 93       	push	r16
    297a:	ff 92       	push	r15
    297c:	c9 2f       	mov	r28, r25
    297e:	dd 27       	eor	r29, r29
    2980:	88 23       	and	r24, r24
    2982:	2a f0       	brmi	.+10     	; 0x298e <log+0x26>
    2984:	21 97       	sbiw	r28, 0x01	; 1
    2986:	66 0f       	add	r22, r22
    2988:	77 1f       	adc	r23, r23
    298a:	88 1f       	adc	r24, r24
    298c:	da f7       	brpl	.-10     	; 0x2984 <log+0x1c>
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e8       	ldi	r20, 0x80	; 128
    2994:	5f eb       	ldi	r21, 0xBF	; 191
    2996:	9f e3       	ldi	r25, 0x3F	; 63
    2998:	88 39       	cpi	r24, 0x98	; 152
    299a:	20 f0       	brcs	.+8      	; 0x29a4 <log+0x3c>
    299c:	80 3e       	cpi	r24, 0xE0	; 224
    299e:	30 f0       	brcs	.+12     	; 0x29ac <log+0x44>
    29a0:	21 96       	adiw	r28, 0x01	; 1
    29a2:	8f 77       	andi	r24, 0x7F	; 127
    29a4:	5b dc       	rcall	.-1866   	; 0x225c <__addsf3>
    29a6:	e4 e2       	ldi	r30, 0x24	; 36
    29a8:	f2 e0       	ldi	r31, 0x02	; 2
    29aa:	03 c0       	rjmp	.+6      	; 0x29b2 <log+0x4a>
    29ac:	57 dc       	rcall	.-1874   	; 0x225c <__addsf3>
    29ae:	e1 e5       	ldi	r30, 0x51	; 81
    29b0:	f2 e0       	ldi	r31, 0x02	; 2
    29b2:	73 df       	rcall	.-282    	; 0x289a <__fp_powser>
    29b4:	8b 01       	movw	r16, r22
    29b6:	be 01       	movw	r22, r28
    29b8:	ec 01       	movw	r28, r24
    29ba:	fb 2e       	mov	r15, r27
    29bc:	6f 57       	subi	r22, 0x7F	; 127
    29be:	71 09       	sbc	r23, r1
    29c0:	75 95       	asr	r23
    29c2:	77 1f       	adc	r23, r23
    29c4:	88 0b       	sbc	r24, r24
    29c6:	99 0b       	sbc	r25, r25
    29c8:	86 dd       	rcall	.-1268   	; 0x24d6 <__floatsisf>
    29ca:	28 e1       	ldi	r18, 0x18	; 24
    29cc:	32 e7       	ldi	r19, 0x72	; 114
    29ce:	41 e3       	ldi	r20, 0x31	; 49
    29d0:	5f e3       	ldi	r21, 0x3F	; 63
    29d2:	8f de       	rcall	.-738    	; 0x26f2 <__mulsf3x>
    29d4:	af 2d       	mov	r26, r15
    29d6:	98 01       	movw	r18, r16
    29d8:	ae 01       	movw	r20, r28
    29da:	ff 90       	pop	r15
    29dc:	0f 91       	pop	r16
    29de:	1f 91       	pop	r17
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	4c dc       	rcall	.-1896   	; 0x227e <__addsf3x>
    29e6:	3b ce       	rjmp	.-906    	; 0x265e <__fp_round>

000029e8 <modf>:
    29e8:	fa 01       	movw	r30, r20
    29ea:	dc 01       	movw	r26, r24
    29ec:	aa 0f       	add	r26, r26
    29ee:	bb 1f       	adc	r27, r27
    29f0:	9b 01       	movw	r18, r22
    29f2:	ac 01       	movw	r20, r24
    29f4:	bf 57       	subi	r27, 0x7F	; 127
    29f6:	28 f4       	brcc	.+10     	; 0x2a02 <modf+0x1a>
    29f8:	22 27       	eor	r18, r18
    29fa:	33 27       	eor	r19, r19
    29fc:	44 27       	eor	r20, r20
    29fe:	50 78       	andi	r21, 0x80	; 128
    2a00:	1f c0       	rjmp	.+62     	; 0x2a40 <modf+0x58>
    2a02:	b7 51       	subi	r27, 0x17	; 23
    2a04:	88 f4       	brcc	.+34     	; 0x2a28 <modf+0x40>
    2a06:	ab 2f       	mov	r26, r27
    2a08:	00 24       	eor	r0, r0
    2a0a:	46 95       	lsr	r20
    2a0c:	37 95       	ror	r19
    2a0e:	27 95       	ror	r18
    2a10:	01 1c       	adc	r0, r1
    2a12:	a3 95       	inc	r26
    2a14:	d2 f3       	brmi	.-12     	; 0x2a0a <modf+0x22>
    2a16:	00 20       	and	r0, r0
    2a18:	69 f0       	breq	.+26     	; 0x2a34 <modf+0x4c>
    2a1a:	22 0f       	add	r18, r18
    2a1c:	33 1f       	adc	r19, r19
    2a1e:	44 1f       	adc	r20, r20
    2a20:	b3 95       	inc	r27
    2a22:	da f3       	brmi	.-10     	; 0x2a1a <modf+0x32>
    2a24:	0d d0       	rcall	.+26     	; 0x2a40 <modf+0x58>
    2a26:	19 cc       	rjmp	.-1998   	; 0x225a <__subsf3>
    2a28:	61 30       	cpi	r22, 0x01	; 1
    2a2a:	71 05       	cpc	r23, r1
    2a2c:	a0 e8       	ldi	r26, 0x80	; 128
    2a2e:	8a 07       	cpc	r24, r26
    2a30:	b9 46       	sbci	r27, 0x69	; 105
    2a32:	30 f4       	brcc	.+12     	; 0x2a40 <modf+0x58>
    2a34:	9b 01       	movw	r18, r22
    2a36:	ac 01       	movw	r20, r24
    2a38:	66 27       	eor	r22, r22
    2a3a:	77 27       	eor	r23, r23
    2a3c:	88 27       	eor	r24, r24
    2a3e:	90 78       	andi	r25, 0x80	; 128
    2a40:	30 96       	adiw	r30, 0x00	; 0
    2a42:	21 f0       	breq	.+8      	; 0x2a4c <modf+0x64>
    2a44:	20 83       	st	Z, r18
    2a46:	31 83       	std	Z+1, r19	; 0x01
    2a48:	42 83       	std	Z+2, r20	; 0x02
    2a4a:	53 83       	std	Z+3, r21	; 0x03
    2a4c:	08 95       	ret

00002a4e <__fp_mpack>:
    2a4e:	9f 3f       	cpi	r25, 0xFF	; 255
    2a50:	31 f0       	breq	.+12     	; 0x2a5e <__fp_mpack_finite+0xc>

00002a52 <__fp_mpack_finite>:
    2a52:	91 50       	subi	r25, 0x01	; 1
    2a54:	20 f4       	brcc	.+8      	; 0x2a5e <__fp_mpack_finite+0xc>
    2a56:	87 95       	ror	r24
    2a58:	77 95       	ror	r23
    2a5a:	67 95       	ror	r22
    2a5c:	b7 95       	ror	r27
    2a5e:	88 0f       	add	r24, r24
    2a60:	91 1d       	adc	r25, r1
    2a62:	96 95       	lsr	r25
    2a64:	87 95       	ror	r24
    2a66:	97 f9       	bld	r25, 7
    2a68:	08 95       	ret

00002a6a <__mulsi3>:
    2a6a:	db 01       	movw	r26, r22
    2a6c:	8f 93       	push	r24
    2a6e:	9f 93       	push	r25
    2a70:	70 d0       	rcall	.+224    	; 0x2b52 <__muluhisi3>
    2a72:	bf 91       	pop	r27
    2a74:	af 91       	pop	r26
    2a76:	a2 9f       	mul	r26, r18
    2a78:	80 0d       	add	r24, r0
    2a7a:	91 1d       	adc	r25, r1
    2a7c:	a3 9f       	mul	r26, r19
    2a7e:	90 0d       	add	r25, r0
    2a80:	b2 9f       	mul	r27, r18
    2a82:	90 0d       	add	r25, r0
    2a84:	11 24       	eor	r1, r1
    2a86:	08 95       	ret

00002a88 <__udivmodhi4>:
    2a88:	aa 1b       	sub	r26, r26
    2a8a:	bb 1b       	sub	r27, r27
    2a8c:	51 e1       	ldi	r21, 0x11	; 17
    2a8e:	07 c0       	rjmp	.+14     	; 0x2a9e <__udivmodhi4_ep>

00002a90 <__udivmodhi4_loop>:
    2a90:	aa 1f       	adc	r26, r26
    2a92:	bb 1f       	adc	r27, r27
    2a94:	a6 17       	cp	r26, r22
    2a96:	b7 07       	cpc	r27, r23
    2a98:	10 f0       	brcs	.+4      	; 0x2a9e <__udivmodhi4_ep>
    2a9a:	a6 1b       	sub	r26, r22
    2a9c:	b7 0b       	sbc	r27, r23

00002a9e <__udivmodhi4_ep>:
    2a9e:	88 1f       	adc	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	5a 95       	dec	r21
    2aa4:	a9 f7       	brne	.-22     	; 0x2a90 <__udivmodhi4_loop>
    2aa6:	80 95       	com	r24
    2aa8:	90 95       	com	r25
    2aaa:	bc 01       	movw	r22, r24
    2aac:	cd 01       	movw	r24, r26
    2aae:	08 95       	ret

00002ab0 <__divmodhi4>:
    2ab0:	97 fb       	bst	r25, 7
    2ab2:	07 2e       	mov	r0, r23
    2ab4:	16 f4       	brtc	.+4      	; 0x2aba <__divmodhi4+0xa>
    2ab6:	00 94       	com	r0
    2ab8:	06 d0       	rcall	.+12     	; 0x2ac6 <__divmodhi4_neg1>
    2aba:	77 fd       	sbrc	r23, 7
    2abc:	08 d0       	rcall	.+16     	; 0x2ace <__divmodhi4_neg2>
    2abe:	e4 df       	rcall	.-56     	; 0x2a88 <__udivmodhi4>
    2ac0:	07 fc       	sbrc	r0, 7
    2ac2:	05 d0       	rcall	.+10     	; 0x2ace <__divmodhi4_neg2>
    2ac4:	3e f4       	brtc	.+14     	; 0x2ad4 <__divmodhi4_exit>

00002ac6 <__divmodhi4_neg1>:
    2ac6:	90 95       	com	r25
    2ac8:	81 95       	neg	r24
    2aca:	9f 4f       	sbci	r25, 0xFF	; 255
    2acc:	08 95       	ret

00002ace <__divmodhi4_neg2>:
    2ace:	70 95       	com	r23
    2ad0:	61 95       	neg	r22
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255

00002ad4 <__divmodhi4_exit>:
    2ad4:	08 95       	ret

00002ad6 <__udivmodsi4>:
    2ad6:	a1 e2       	ldi	r26, 0x21	; 33
    2ad8:	1a 2e       	mov	r1, r26
    2ada:	aa 1b       	sub	r26, r26
    2adc:	bb 1b       	sub	r27, r27
    2ade:	fd 01       	movw	r30, r26
    2ae0:	0d c0       	rjmp	.+26     	; 0x2afc <__udivmodsi4_ep>

00002ae2 <__udivmodsi4_loop>:
    2ae2:	aa 1f       	adc	r26, r26
    2ae4:	bb 1f       	adc	r27, r27
    2ae6:	ee 1f       	adc	r30, r30
    2ae8:	ff 1f       	adc	r31, r31
    2aea:	a2 17       	cp	r26, r18
    2aec:	b3 07       	cpc	r27, r19
    2aee:	e4 07       	cpc	r30, r20
    2af0:	f5 07       	cpc	r31, r21
    2af2:	20 f0       	brcs	.+8      	; 0x2afc <__udivmodsi4_ep>
    2af4:	a2 1b       	sub	r26, r18
    2af6:	b3 0b       	sbc	r27, r19
    2af8:	e4 0b       	sbc	r30, r20
    2afa:	f5 0b       	sbc	r31, r21

00002afc <__udivmodsi4_ep>:
    2afc:	66 1f       	adc	r22, r22
    2afe:	77 1f       	adc	r23, r23
    2b00:	88 1f       	adc	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	1a 94       	dec	r1
    2b06:	69 f7       	brne	.-38     	; 0x2ae2 <__udivmodsi4_loop>
    2b08:	60 95       	com	r22
    2b0a:	70 95       	com	r23
    2b0c:	80 95       	com	r24
    2b0e:	90 95       	com	r25
    2b10:	9b 01       	movw	r18, r22
    2b12:	ac 01       	movw	r20, r24
    2b14:	bd 01       	movw	r22, r26
    2b16:	cf 01       	movw	r24, r30
    2b18:	08 95       	ret

00002b1a <__divmodsi4>:
    2b1a:	05 2e       	mov	r0, r21
    2b1c:	97 fb       	bst	r25, 7
    2b1e:	16 f4       	brtc	.+4      	; 0x2b24 <__divmodsi4+0xa>
    2b20:	00 94       	com	r0
    2b22:	0f d0       	rcall	.+30     	; 0x2b42 <__negsi2>
    2b24:	57 fd       	sbrc	r21, 7
    2b26:	05 d0       	rcall	.+10     	; 0x2b32 <__divmodsi4_neg2>
    2b28:	d6 df       	rcall	.-84     	; 0x2ad6 <__udivmodsi4>
    2b2a:	07 fc       	sbrc	r0, 7
    2b2c:	02 d0       	rcall	.+4      	; 0x2b32 <__divmodsi4_neg2>
    2b2e:	46 f4       	brtc	.+16     	; 0x2b40 <__divmodsi4_exit>
    2b30:	08 c0       	rjmp	.+16     	; 0x2b42 <__negsi2>

00002b32 <__divmodsi4_neg2>:
    2b32:	50 95       	com	r21
    2b34:	40 95       	com	r20
    2b36:	30 95       	com	r19
    2b38:	21 95       	neg	r18
    2b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3c:	4f 4f       	sbci	r20, 0xFF	; 255
    2b3e:	5f 4f       	sbci	r21, 0xFF	; 255

00002b40 <__divmodsi4_exit>:
    2b40:	08 95       	ret

00002b42 <__negsi2>:
    2b42:	90 95       	com	r25
    2b44:	80 95       	com	r24
    2b46:	70 95       	com	r23
    2b48:	61 95       	neg	r22
    2b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b50:	08 95       	ret

00002b52 <__muluhisi3>:
    2b52:	27 d0       	rcall	.+78     	; 0x2ba2 <__umulhisi3>
    2b54:	a5 9f       	mul	r26, r21
    2b56:	90 0d       	add	r25, r0
    2b58:	b4 9f       	mul	r27, r20
    2b5a:	90 0d       	add	r25, r0
    2b5c:	a4 9f       	mul	r26, r20
    2b5e:	80 0d       	add	r24, r0
    2b60:	91 1d       	adc	r25, r1
    2b62:	11 24       	eor	r1, r1
    2b64:	08 95       	ret

00002b66 <__ashrdi3>:
    2b66:	97 fb       	bst	r25, 7
    2b68:	10 f8       	bld	r1, 0

00002b6a <__lshrdi3>:
    2b6a:	16 94       	lsr	r1
    2b6c:	00 08       	sbc	r0, r0
    2b6e:	0f 93       	push	r16
    2b70:	08 30       	cpi	r16, 0x08	; 8
    2b72:	98 f0       	brcs	.+38     	; 0x2b9a <__lshrdi3+0x30>
    2b74:	08 50       	subi	r16, 0x08	; 8
    2b76:	23 2f       	mov	r18, r19
    2b78:	34 2f       	mov	r19, r20
    2b7a:	45 2f       	mov	r20, r21
    2b7c:	56 2f       	mov	r21, r22
    2b7e:	67 2f       	mov	r22, r23
    2b80:	78 2f       	mov	r23, r24
    2b82:	89 2f       	mov	r24, r25
    2b84:	90 2d       	mov	r25, r0
    2b86:	f4 cf       	rjmp	.-24     	; 0x2b70 <__lshrdi3+0x6>
    2b88:	05 94       	asr	r0
    2b8a:	97 95       	ror	r25
    2b8c:	87 95       	ror	r24
    2b8e:	77 95       	ror	r23
    2b90:	67 95       	ror	r22
    2b92:	57 95       	ror	r21
    2b94:	47 95       	ror	r20
    2b96:	37 95       	ror	r19
    2b98:	27 95       	ror	r18
    2b9a:	0a 95       	dec	r16
    2b9c:	aa f7       	brpl	.-22     	; 0x2b88 <__lshrdi3+0x1e>
    2b9e:	0f 91       	pop	r16
    2ba0:	08 95       	ret

00002ba2 <__umulhisi3>:
    2ba2:	a2 9f       	mul	r26, r18
    2ba4:	b0 01       	movw	r22, r0
    2ba6:	b3 9f       	mul	r27, r19
    2ba8:	c0 01       	movw	r24, r0
    2baa:	a3 9f       	mul	r26, r19
    2bac:	70 0d       	add	r23, r0
    2bae:	81 1d       	adc	r24, r1
    2bb0:	11 24       	eor	r1, r1
    2bb2:	91 1d       	adc	r25, r1
    2bb4:	b2 9f       	mul	r27, r18
    2bb6:	70 0d       	add	r23, r0
    2bb8:	81 1d       	adc	r24, r1
    2bba:	11 24       	eor	r1, r1
    2bbc:	91 1d       	adc	r25, r1
    2bbe:	08 95       	ret

00002bc0 <fdevopen>:
    2bc0:	0f 93       	push	r16
    2bc2:	1f 93       	push	r17
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	31 f4       	brne	.+12     	; 0x2bd8 <fdevopen+0x18>
    2bcc:	61 15       	cp	r22, r1
    2bce:	71 05       	cpc	r23, r1
    2bd0:	19 f4       	brne	.+6      	; 0x2bd8 <fdevopen+0x18>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	39 c0       	rjmp	.+114    	; 0x2c4a <fdevopen+0x8a>
    2bd8:	8b 01       	movw	r16, r22
    2bda:	ec 01       	movw	r28, r24
    2bdc:	6e e0       	ldi	r22, 0x0E	; 14
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	47 d5       	rcall	.+2702   	; 0x3674 <calloc>
    2be6:	fc 01       	movw	r30, r24
    2be8:	89 2b       	or	r24, r25
    2bea:	99 f3       	breq	.-26     	; 0x2bd2 <fdevopen+0x12>
    2bec:	80 e8       	ldi	r24, 0x80	; 128
    2bee:	83 83       	std	Z+3, r24	; 0x03
    2bf0:	01 15       	cp	r16, r1
    2bf2:	11 05       	cpc	r17, r1
    2bf4:	71 f0       	breq	.+28     	; 0x2c12 <fdevopen+0x52>
    2bf6:	02 87       	std	Z+10, r16	; 0x0a
    2bf8:	13 87       	std	Z+11, r17	; 0x0b
    2bfa:	81 e8       	ldi	r24, 0x81	; 129
    2bfc:	83 83       	std	Z+3, r24	; 0x03
    2bfe:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <__iob>
    2c02:	90 91 81 21 	lds	r25, 0x2181	; 0x802181 <__iob+0x1>
    2c06:	89 2b       	or	r24, r25
    2c08:	21 f4       	brne	.+8      	; 0x2c12 <fdevopen+0x52>
    2c0a:	e0 93 80 21 	sts	0x2180, r30	; 0x802180 <__iob>
    2c0e:	f0 93 81 21 	sts	0x2181, r31	; 0x802181 <__iob+0x1>
    2c12:	20 97       	sbiw	r28, 0x00	; 0
    2c14:	c9 f0       	breq	.+50     	; 0x2c48 <fdevopen+0x88>
    2c16:	c0 87       	std	Z+8, r28	; 0x08
    2c18:	d1 87       	std	Z+9, r29	; 0x09
    2c1a:	83 81       	ldd	r24, Z+3	; 0x03
    2c1c:	82 60       	ori	r24, 0x02	; 2
    2c1e:	83 83       	std	Z+3, r24	; 0x03
    2c20:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <__iob+0x2>
    2c24:	90 91 83 21 	lds	r25, 0x2183	; 0x802183 <__iob+0x3>
    2c28:	89 2b       	or	r24, r25
    2c2a:	71 f4       	brne	.+28     	; 0x2c48 <fdevopen+0x88>
    2c2c:	e0 93 82 21 	sts	0x2182, r30	; 0x802182 <__iob+0x2>
    2c30:	f0 93 83 21 	sts	0x2183, r31	; 0x802183 <__iob+0x3>
    2c34:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <__iob+0x4>
    2c38:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <__iob+0x5>
    2c3c:	89 2b       	or	r24, r25
    2c3e:	21 f4       	brne	.+8      	; 0x2c48 <fdevopen+0x88>
    2c40:	e0 93 84 21 	sts	0x2184, r30	; 0x802184 <__iob+0x4>
    2c44:	f0 93 85 21 	sts	0x2185, r31	; 0x802185 <__iob+0x5>
    2c48:	cf 01       	movw	r24, r30
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	08 95       	ret

00002c54 <printf>:
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	ae 01       	movw	r20, r28
    2c5e:	4a 5f       	subi	r20, 0xFA	; 250
    2c60:	5f 4f       	sbci	r21, 0xFF	; 255
    2c62:	fa 01       	movw	r30, r20
    2c64:	61 91       	ld	r22, Z+
    2c66:	71 91       	ld	r23, Z+
    2c68:	af 01       	movw	r20, r30
    2c6a:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <__iob+0x2>
    2c6e:	90 91 83 21 	lds	r25, 0x2183	; 0x802183 <__iob+0x3>
    2c72:	46 d0       	rcall	.+140    	; 0x2d00 <vfprintf>
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	08 95       	ret

00002c7a <sprintf>:
    2c7a:	0f 93       	push	r16
    2c7c:	1f 93       	push	r17
    2c7e:	cf 93       	push	r28
    2c80:	df 93       	push	r29
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	2e 97       	sbiw	r28, 0x0e	; 14
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0e 89       	ldd	r16, Y+22	; 0x16
    2c8e:	1f 89       	ldd	r17, Y+23	; 0x17
    2c90:	86 e0       	ldi	r24, 0x06	; 6
    2c92:	8c 83       	std	Y+4, r24	; 0x04
    2c94:	09 83       	std	Y+1, r16	; 0x01
    2c96:	1a 83       	std	Y+2, r17	; 0x02
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	9f e7       	ldi	r25, 0x7F	; 127
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	ae 01       	movw	r20, r28
    2ca2:	46 5e       	subi	r20, 0xE6	; 230
    2ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca6:	68 8d       	ldd	r22, Y+24	; 0x18
    2ca8:	79 8d       	ldd	r23, Y+25	; 0x19
    2caa:	ce 01       	movw	r24, r28
    2cac:	01 96       	adiw	r24, 0x01	; 1
    2cae:	28 d0       	rcall	.+80     	; 0x2d00 <vfprintf>
    2cb0:	ef 81       	ldd	r30, Y+7	; 0x07
    2cb2:	f8 85       	ldd	r31, Y+8	; 0x08
    2cb4:	e0 0f       	add	r30, r16
    2cb6:	f1 1f       	adc	r31, r17
    2cb8:	10 82       	st	Z, r1
    2cba:	2e 96       	adiw	r28, 0x0e	; 14
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	08 95       	ret

00002cca <sscanf>:
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	2e 97       	sbiw	r28, 0x0e	; 14
    2cd4:	cd bf       	out	0x3d, r28	; 61
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	85 e0       	ldi	r24, 0x05	; 5
    2cda:	8c 83       	std	Y+4, r24	; 0x04
    2cdc:	8c 89       	ldd	r24, Y+20	; 0x14
    2cde:	9d 89       	ldd	r25, Y+21	; 0x15
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	9a 83       	std	Y+2, r25	; 0x02
    2ce4:	ae 01       	movw	r20, r28
    2ce6:	48 5e       	subi	r20, 0xE8	; 232
    2ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    2cea:	6e 89       	ldd	r22, Y+22	; 0x16
    2cec:	7f 89       	ldd	r23, Y+23	; 0x17
    2cee:	ce 01       	movw	r24, r28
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	a9 d3       	rcall	.+1874   	; 0x3446 <vfscanf>
    2cf4:	2e 96       	adiw	r28, 0x0e	; 14
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	08 95       	ret

00002d00 <vfprintf>:
    2d00:	2f 92       	push	r2
    2d02:	3f 92       	push	r3
    2d04:	4f 92       	push	r4
    2d06:	5f 92       	push	r5
    2d08:	6f 92       	push	r6
    2d0a:	7f 92       	push	r7
    2d0c:	8f 92       	push	r8
    2d0e:	9f 92       	push	r9
    2d10:	af 92       	push	r10
    2d12:	bf 92       	push	r11
    2d14:	cf 92       	push	r12
    2d16:	df 92       	push	r13
    2d18:	ef 92       	push	r14
    2d1a:	ff 92       	push	r15
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	2b 97       	sbiw	r28, 0x0b	; 11
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	6c 01       	movw	r12, r24
    2d30:	7b 01       	movw	r14, r22
    2d32:	8a 01       	movw	r16, r20
    2d34:	fc 01       	movw	r30, r24
    2d36:	16 82       	std	Z+6, r1	; 0x06
    2d38:	17 82       	std	Z+7, r1	; 0x07
    2d3a:	83 81       	ldd	r24, Z+3	; 0x03
    2d3c:	81 ff       	sbrs	r24, 1
    2d3e:	bf c1       	rjmp	.+894    	; 0x30be <vfprintf+0x3be>
    2d40:	ce 01       	movw	r24, r28
    2d42:	01 96       	adiw	r24, 0x01	; 1
    2d44:	3c 01       	movw	r6, r24
    2d46:	f6 01       	movw	r30, r12
    2d48:	93 81       	ldd	r25, Z+3	; 0x03
    2d4a:	f7 01       	movw	r30, r14
    2d4c:	93 fd       	sbrc	r25, 3
    2d4e:	85 91       	lpm	r24, Z+
    2d50:	93 ff       	sbrs	r25, 3
    2d52:	81 91       	ld	r24, Z+
    2d54:	7f 01       	movw	r14, r30
    2d56:	88 23       	and	r24, r24
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <vfprintf+0x5c>
    2d5a:	ad c1       	rjmp	.+858    	; 0x30b6 <vfprintf+0x3b6>
    2d5c:	85 32       	cpi	r24, 0x25	; 37
    2d5e:	39 f4       	brne	.+14     	; 0x2d6e <vfprintf+0x6e>
    2d60:	93 fd       	sbrc	r25, 3
    2d62:	85 91       	lpm	r24, Z+
    2d64:	93 ff       	sbrs	r25, 3
    2d66:	81 91       	ld	r24, Z+
    2d68:	7f 01       	movw	r14, r30
    2d6a:	85 32       	cpi	r24, 0x25	; 37
    2d6c:	21 f4       	brne	.+8      	; 0x2d76 <vfprintf+0x76>
    2d6e:	b6 01       	movw	r22, r12
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	29 d6       	rcall	.+3154   	; 0x39c6 <fputc>
    2d74:	e8 cf       	rjmp	.-48     	; 0x2d46 <vfprintf+0x46>
    2d76:	91 2c       	mov	r9, r1
    2d78:	21 2c       	mov	r2, r1
    2d7a:	31 2c       	mov	r3, r1
    2d7c:	ff e1       	ldi	r31, 0x1F	; 31
    2d7e:	f3 15       	cp	r31, r3
    2d80:	d8 f0       	brcs	.+54     	; 0x2db8 <vfprintf+0xb8>
    2d82:	8b 32       	cpi	r24, 0x2B	; 43
    2d84:	79 f0       	breq	.+30     	; 0x2da4 <vfprintf+0xa4>
    2d86:	38 f4       	brcc	.+14     	; 0x2d96 <vfprintf+0x96>
    2d88:	80 32       	cpi	r24, 0x20	; 32
    2d8a:	79 f0       	breq	.+30     	; 0x2daa <vfprintf+0xaa>
    2d8c:	83 32       	cpi	r24, 0x23	; 35
    2d8e:	a1 f4       	brne	.+40     	; 0x2db8 <vfprintf+0xb8>
    2d90:	23 2d       	mov	r18, r3
    2d92:	20 61       	ori	r18, 0x10	; 16
    2d94:	1d c0       	rjmp	.+58     	; 0x2dd0 <vfprintf+0xd0>
    2d96:	8d 32       	cpi	r24, 0x2D	; 45
    2d98:	61 f0       	breq	.+24     	; 0x2db2 <vfprintf+0xb2>
    2d9a:	80 33       	cpi	r24, 0x30	; 48
    2d9c:	69 f4       	brne	.+26     	; 0x2db8 <vfprintf+0xb8>
    2d9e:	23 2d       	mov	r18, r3
    2da0:	21 60       	ori	r18, 0x01	; 1
    2da2:	16 c0       	rjmp	.+44     	; 0x2dd0 <vfprintf+0xd0>
    2da4:	83 2d       	mov	r24, r3
    2da6:	82 60       	ori	r24, 0x02	; 2
    2da8:	38 2e       	mov	r3, r24
    2daa:	e3 2d       	mov	r30, r3
    2dac:	e4 60       	ori	r30, 0x04	; 4
    2dae:	3e 2e       	mov	r3, r30
    2db0:	2a c0       	rjmp	.+84     	; 0x2e06 <vfprintf+0x106>
    2db2:	f3 2d       	mov	r31, r3
    2db4:	f8 60       	ori	r31, 0x08	; 8
    2db6:	1d c0       	rjmp	.+58     	; 0x2df2 <vfprintf+0xf2>
    2db8:	37 fc       	sbrc	r3, 7
    2dba:	2d c0       	rjmp	.+90     	; 0x2e16 <vfprintf+0x116>
    2dbc:	20 ed       	ldi	r18, 0xD0	; 208
    2dbe:	28 0f       	add	r18, r24
    2dc0:	2a 30       	cpi	r18, 0x0A	; 10
    2dc2:	40 f0       	brcs	.+16     	; 0x2dd4 <vfprintf+0xd4>
    2dc4:	8e 32       	cpi	r24, 0x2E	; 46
    2dc6:	b9 f4       	brne	.+46     	; 0x2df6 <vfprintf+0xf6>
    2dc8:	36 fc       	sbrc	r3, 6
    2dca:	75 c1       	rjmp	.+746    	; 0x30b6 <vfprintf+0x3b6>
    2dcc:	23 2d       	mov	r18, r3
    2dce:	20 64       	ori	r18, 0x40	; 64
    2dd0:	32 2e       	mov	r3, r18
    2dd2:	19 c0       	rjmp	.+50     	; 0x2e06 <vfprintf+0x106>
    2dd4:	36 fe       	sbrs	r3, 6
    2dd6:	06 c0       	rjmp	.+12     	; 0x2de4 <vfprintf+0xe4>
    2dd8:	8a e0       	ldi	r24, 0x0A	; 10
    2dda:	98 9e       	mul	r9, r24
    2ddc:	20 0d       	add	r18, r0
    2dde:	11 24       	eor	r1, r1
    2de0:	92 2e       	mov	r9, r18
    2de2:	11 c0       	rjmp	.+34     	; 0x2e06 <vfprintf+0x106>
    2de4:	ea e0       	ldi	r30, 0x0A	; 10
    2de6:	2e 9e       	mul	r2, r30
    2de8:	20 0d       	add	r18, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	22 2e       	mov	r2, r18
    2dee:	f3 2d       	mov	r31, r3
    2df0:	f0 62       	ori	r31, 0x20	; 32
    2df2:	3f 2e       	mov	r3, r31
    2df4:	08 c0       	rjmp	.+16     	; 0x2e06 <vfprintf+0x106>
    2df6:	8c 36       	cpi	r24, 0x6C	; 108
    2df8:	21 f4       	brne	.+8      	; 0x2e02 <vfprintf+0x102>
    2dfa:	83 2d       	mov	r24, r3
    2dfc:	80 68       	ori	r24, 0x80	; 128
    2dfe:	38 2e       	mov	r3, r24
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <vfprintf+0x106>
    2e02:	88 36       	cpi	r24, 0x68	; 104
    2e04:	41 f4       	brne	.+16     	; 0x2e16 <vfprintf+0x116>
    2e06:	f7 01       	movw	r30, r14
    2e08:	93 fd       	sbrc	r25, 3
    2e0a:	85 91       	lpm	r24, Z+
    2e0c:	93 ff       	sbrs	r25, 3
    2e0e:	81 91       	ld	r24, Z+
    2e10:	7f 01       	movw	r14, r30
    2e12:	81 11       	cpse	r24, r1
    2e14:	b3 cf       	rjmp	.-154    	; 0x2d7c <vfprintf+0x7c>
    2e16:	98 2f       	mov	r25, r24
    2e18:	9f 7d       	andi	r25, 0xDF	; 223
    2e1a:	95 54       	subi	r25, 0x45	; 69
    2e1c:	93 30       	cpi	r25, 0x03	; 3
    2e1e:	28 f4       	brcc	.+10     	; 0x2e2a <vfprintf+0x12a>
    2e20:	0c 5f       	subi	r16, 0xFC	; 252
    2e22:	1f 4f       	sbci	r17, 0xFF	; 255
    2e24:	9f e3       	ldi	r25, 0x3F	; 63
    2e26:	99 83       	std	Y+1, r25	; 0x01
    2e28:	0d c0       	rjmp	.+26     	; 0x2e44 <vfprintf+0x144>
    2e2a:	83 36       	cpi	r24, 0x63	; 99
    2e2c:	31 f0       	breq	.+12     	; 0x2e3a <vfprintf+0x13a>
    2e2e:	83 37       	cpi	r24, 0x73	; 115
    2e30:	71 f0       	breq	.+28     	; 0x2e4e <vfprintf+0x14e>
    2e32:	83 35       	cpi	r24, 0x53	; 83
    2e34:	09 f0       	breq	.+2      	; 0x2e38 <vfprintf+0x138>
    2e36:	55 c0       	rjmp	.+170    	; 0x2ee2 <vfprintf+0x1e2>
    2e38:	20 c0       	rjmp	.+64     	; 0x2e7a <vfprintf+0x17a>
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	80 81       	ld	r24, Z
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	0e 5f       	subi	r16, 0xFE	; 254
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	88 24       	eor	r8, r8
    2e46:	83 94       	inc	r8
    2e48:	91 2c       	mov	r9, r1
    2e4a:	53 01       	movw	r10, r6
    2e4c:	12 c0       	rjmp	.+36     	; 0x2e72 <vfprintf+0x172>
    2e4e:	28 01       	movw	r4, r16
    2e50:	f2 e0       	ldi	r31, 0x02	; 2
    2e52:	4f 0e       	add	r4, r31
    2e54:	51 1c       	adc	r5, r1
    2e56:	f8 01       	movw	r30, r16
    2e58:	a0 80       	ld	r10, Z
    2e5a:	b1 80       	ldd	r11, Z+1	; 0x01
    2e5c:	36 fe       	sbrs	r3, 6
    2e5e:	03 c0       	rjmp	.+6      	; 0x2e66 <vfprintf+0x166>
    2e60:	69 2d       	mov	r22, r9
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <vfprintf+0x16a>
    2e66:	6f ef       	ldi	r22, 0xFF	; 255
    2e68:	7f ef       	ldi	r23, 0xFF	; 255
    2e6a:	c5 01       	movw	r24, r10
    2e6c:	63 d5       	rcall	.+2758   	; 0x3934 <strnlen>
    2e6e:	4c 01       	movw	r8, r24
    2e70:	82 01       	movw	r16, r4
    2e72:	f3 2d       	mov	r31, r3
    2e74:	ff 77       	andi	r31, 0x7F	; 127
    2e76:	3f 2e       	mov	r3, r31
    2e78:	15 c0       	rjmp	.+42     	; 0x2ea4 <vfprintf+0x1a4>
    2e7a:	28 01       	movw	r4, r16
    2e7c:	22 e0       	ldi	r18, 0x02	; 2
    2e7e:	42 0e       	add	r4, r18
    2e80:	51 1c       	adc	r5, r1
    2e82:	f8 01       	movw	r30, r16
    2e84:	a0 80       	ld	r10, Z
    2e86:	b1 80       	ldd	r11, Z+1	; 0x01
    2e88:	36 fe       	sbrs	r3, 6
    2e8a:	03 c0       	rjmp	.+6      	; 0x2e92 <vfprintf+0x192>
    2e8c:	69 2d       	mov	r22, r9
    2e8e:	70 e0       	ldi	r23, 0x00	; 0
    2e90:	02 c0       	rjmp	.+4      	; 0x2e96 <vfprintf+0x196>
    2e92:	6f ef       	ldi	r22, 0xFF	; 255
    2e94:	7f ef       	ldi	r23, 0xFF	; 255
    2e96:	c5 01       	movw	r24, r10
    2e98:	3b d5       	rcall	.+2678   	; 0x3910 <strnlen_P>
    2e9a:	4c 01       	movw	r8, r24
    2e9c:	f3 2d       	mov	r31, r3
    2e9e:	f0 68       	ori	r31, 0x80	; 128
    2ea0:	3f 2e       	mov	r3, r31
    2ea2:	82 01       	movw	r16, r4
    2ea4:	33 fc       	sbrc	r3, 3
    2ea6:	19 c0       	rjmp	.+50     	; 0x2eda <vfprintf+0x1da>
    2ea8:	82 2d       	mov	r24, r2
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	88 16       	cp	r8, r24
    2eae:	99 06       	cpc	r9, r25
    2eb0:	a0 f4       	brcc	.+40     	; 0x2eda <vfprintf+0x1da>
    2eb2:	b6 01       	movw	r22, r12
    2eb4:	80 e2       	ldi	r24, 0x20	; 32
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	86 d5       	rcall	.+2828   	; 0x39c6 <fputc>
    2eba:	2a 94       	dec	r2
    2ebc:	f5 cf       	rjmp	.-22     	; 0x2ea8 <vfprintf+0x1a8>
    2ebe:	f5 01       	movw	r30, r10
    2ec0:	37 fc       	sbrc	r3, 7
    2ec2:	85 91       	lpm	r24, Z+
    2ec4:	37 fe       	sbrs	r3, 7
    2ec6:	81 91       	ld	r24, Z+
    2ec8:	5f 01       	movw	r10, r30
    2eca:	b6 01       	movw	r22, r12
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	7b d5       	rcall	.+2806   	; 0x39c6 <fputc>
    2ed0:	21 10       	cpse	r2, r1
    2ed2:	2a 94       	dec	r2
    2ed4:	21 e0       	ldi	r18, 0x01	; 1
    2ed6:	82 1a       	sub	r8, r18
    2ed8:	91 08       	sbc	r9, r1
    2eda:	81 14       	cp	r8, r1
    2edc:	91 04       	cpc	r9, r1
    2ede:	79 f7       	brne	.-34     	; 0x2ebe <vfprintf+0x1be>
    2ee0:	e1 c0       	rjmp	.+450    	; 0x30a4 <vfprintf+0x3a4>
    2ee2:	84 36       	cpi	r24, 0x64	; 100
    2ee4:	11 f0       	breq	.+4      	; 0x2eea <vfprintf+0x1ea>
    2ee6:	89 36       	cpi	r24, 0x69	; 105
    2ee8:	39 f5       	brne	.+78     	; 0x2f38 <vfprintf+0x238>
    2eea:	f8 01       	movw	r30, r16
    2eec:	37 fe       	sbrs	r3, 7
    2eee:	07 c0       	rjmp	.+14     	; 0x2efe <vfprintf+0x1fe>
    2ef0:	60 81       	ld	r22, Z
    2ef2:	71 81       	ldd	r23, Z+1	; 0x01
    2ef4:	82 81       	ldd	r24, Z+2	; 0x02
    2ef6:	93 81       	ldd	r25, Z+3	; 0x03
    2ef8:	0c 5f       	subi	r16, 0xFC	; 252
    2efa:	1f 4f       	sbci	r17, 0xFF	; 255
    2efc:	08 c0       	rjmp	.+16     	; 0x2f0e <vfprintf+0x20e>
    2efe:	60 81       	ld	r22, Z
    2f00:	71 81       	ldd	r23, Z+1	; 0x01
    2f02:	07 2e       	mov	r0, r23
    2f04:	00 0c       	add	r0, r0
    2f06:	88 0b       	sbc	r24, r24
    2f08:	99 0b       	sbc	r25, r25
    2f0a:	0e 5f       	subi	r16, 0xFE	; 254
    2f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0e:	f3 2d       	mov	r31, r3
    2f10:	ff 76       	andi	r31, 0x6F	; 111
    2f12:	3f 2e       	mov	r3, r31
    2f14:	97 ff       	sbrs	r25, 7
    2f16:	09 c0       	rjmp	.+18     	; 0x2f2a <vfprintf+0x22a>
    2f18:	90 95       	com	r25
    2f1a:	80 95       	com	r24
    2f1c:	70 95       	com	r23
    2f1e:	61 95       	neg	r22
    2f20:	7f 4f       	sbci	r23, 0xFF	; 255
    2f22:	8f 4f       	sbci	r24, 0xFF	; 255
    2f24:	9f 4f       	sbci	r25, 0xFF	; 255
    2f26:	f0 68       	ori	r31, 0x80	; 128
    2f28:	3f 2e       	mov	r3, r31
    2f2a:	2a e0       	ldi	r18, 0x0A	; 10
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	a3 01       	movw	r20, r6
    2f30:	9f d5       	rcall	.+2878   	; 0x3a70 <__ultoa_invert>
    2f32:	88 2e       	mov	r8, r24
    2f34:	86 18       	sub	r8, r6
    2f36:	44 c0       	rjmp	.+136    	; 0x2fc0 <vfprintf+0x2c0>
    2f38:	85 37       	cpi	r24, 0x75	; 117
    2f3a:	31 f4       	brne	.+12     	; 0x2f48 <vfprintf+0x248>
    2f3c:	23 2d       	mov	r18, r3
    2f3e:	2f 7e       	andi	r18, 0xEF	; 239
    2f40:	b2 2e       	mov	r11, r18
    2f42:	2a e0       	ldi	r18, 0x0A	; 10
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	25 c0       	rjmp	.+74     	; 0x2f92 <vfprintf+0x292>
    2f48:	93 2d       	mov	r25, r3
    2f4a:	99 7f       	andi	r25, 0xF9	; 249
    2f4c:	b9 2e       	mov	r11, r25
    2f4e:	8f 36       	cpi	r24, 0x6F	; 111
    2f50:	c1 f0       	breq	.+48     	; 0x2f82 <vfprintf+0x282>
    2f52:	18 f4       	brcc	.+6      	; 0x2f5a <vfprintf+0x25a>
    2f54:	88 35       	cpi	r24, 0x58	; 88
    2f56:	79 f0       	breq	.+30     	; 0x2f76 <vfprintf+0x276>
    2f58:	ae c0       	rjmp	.+348    	; 0x30b6 <vfprintf+0x3b6>
    2f5a:	80 37       	cpi	r24, 0x70	; 112
    2f5c:	19 f0       	breq	.+6      	; 0x2f64 <vfprintf+0x264>
    2f5e:	88 37       	cpi	r24, 0x78	; 120
    2f60:	21 f0       	breq	.+8      	; 0x2f6a <vfprintf+0x26a>
    2f62:	a9 c0       	rjmp	.+338    	; 0x30b6 <vfprintf+0x3b6>
    2f64:	e9 2f       	mov	r30, r25
    2f66:	e0 61       	ori	r30, 0x10	; 16
    2f68:	be 2e       	mov	r11, r30
    2f6a:	b4 fe       	sbrs	r11, 4
    2f6c:	0d c0       	rjmp	.+26     	; 0x2f88 <vfprintf+0x288>
    2f6e:	fb 2d       	mov	r31, r11
    2f70:	f4 60       	ori	r31, 0x04	; 4
    2f72:	bf 2e       	mov	r11, r31
    2f74:	09 c0       	rjmp	.+18     	; 0x2f88 <vfprintf+0x288>
    2f76:	34 fe       	sbrs	r3, 4
    2f78:	0a c0       	rjmp	.+20     	; 0x2f8e <vfprintf+0x28e>
    2f7a:	29 2f       	mov	r18, r25
    2f7c:	26 60       	ori	r18, 0x06	; 6
    2f7e:	b2 2e       	mov	r11, r18
    2f80:	06 c0       	rjmp	.+12     	; 0x2f8e <vfprintf+0x28e>
    2f82:	28 e0       	ldi	r18, 0x08	; 8
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	05 c0       	rjmp	.+10     	; 0x2f92 <vfprintf+0x292>
    2f88:	20 e1       	ldi	r18, 0x10	; 16
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	02 c0       	rjmp	.+4      	; 0x2f92 <vfprintf+0x292>
    2f8e:	20 e1       	ldi	r18, 0x10	; 16
    2f90:	32 e0       	ldi	r19, 0x02	; 2
    2f92:	f8 01       	movw	r30, r16
    2f94:	b7 fe       	sbrs	r11, 7
    2f96:	07 c0       	rjmp	.+14     	; 0x2fa6 <vfprintf+0x2a6>
    2f98:	60 81       	ld	r22, Z
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	0c 5f       	subi	r16, 0xFC	; 252
    2fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa4:	06 c0       	rjmp	.+12     	; 0x2fb2 <vfprintf+0x2b2>
    2fa6:	60 81       	ld	r22, Z
    2fa8:	71 81       	ldd	r23, Z+1	; 0x01
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	0e 5f       	subi	r16, 0xFE	; 254
    2fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb2:	a3 01       	movw	r20, r6
    2fb4:	5d d5       	rcall	.+2746   	; 0x3a70 <__ultoa_invert>
    2fb6:	88 2e       	mov	r8, r24
    2fb8:	86 18       	sub	r8, r6
    2fba:	fb 2d       	mov	r31, r11
    2fbc:	ff 77       	andi	r31, 0x7F	; 127
    2fbe:	3f 2e       	mov	r3, r31
    2fc0:	36 fe       	sbrs	r3, 6
    2fc2:	0d c0       	rjmp	.+26     	; 0x2fde <vfprintf+0x2de>
    2fc4:	23 2d       	mov	r18, r3
    2fc6:	2e 7f       	andi	r18, 0xFE	; 254
    2fc8:	a2 2e       	mov	r10, r18
    2fca:	89 14       	cp	r8, r9
    2fcc:	58 f4       	brcc	.+22     	; 0x2fe4 <vfprintf+0x2e4>
    2fce:	34 fe       	sbrs	r3, 4
    2fd0:	0b c0       	rjmp	.+22     	; 0x2fe8 <vfprintf+0x2e8>
    2fd2:	32 fc       	sbrc	r3, 2
    2fd4:	09 c0       	rjmp	.+18     	; 0x2fe8 <vfprintf+0x2e8>
    2fd6:	83 2d       	mov	r24, r3
    2fd8:	8e 7e       	andi	r24, 0xEE	; 238
    2fda:	a8 2e       	mov	r10, r24
    2fdc:	05 c0       	rjmp	.+10     	; 0x2fe8 <vfprintf+0x2e8>
    2fde:	b8 2c       	mov	r11, r8
    2fe0:	a3 2c       	mov	r10, r3
    2fe2:	03 c0       	rjmp	.+6      	; 0x2fea <vfprintf+0x2ea>
    2fe4:	b8 2c       	mov	r11, r8
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <vfprintf+0x2ea>
    2fe8:	b9 2c       	mov	r11, r9
    2fea:	a4 fe       	sbrs	r10, 4
    2fec:	0f c0       	rjmp	.+30     	; 0x300c <vfprintf+0x30c>
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e8 0d       	add	r30, r8
    2ff2:	f1 1d       	adc	r31, r1
    2ff4:	80 81       	ld	r24, Z
    2ff6:	80 33       	cpi	r24, 0x30	; 48
    2ff8:	21 f4       	brne	.+8      	; 0x3002 <vfprintf+0x302>
    2ffa:	9a 2d       	mov	r25, r10
    2ffc:	99 7e       	andi	r25, 0xE9	; 233
    2ffe:	a9 2e       	mov	r10, r25
    3000:	09 c0       	rjmp	.+18     	; 0x3014 <vfprintf+0x314>
    3002:	a2 fe       	sbrs	r10, 2
    3004:	06 c0       	rjmp	.+12     	; 0x3012 <vfprintf+0x312>
    3006:	b3 94       	inc	r11
    3008:	b3 94       	inc	r11
    300a:	04 c0       	rjmp	.+8      	; 0x3014 <vfprintf+0x314>
    300c:	8a 2d       	mov	r24, r10
    300e:	86 78       	andi	r24, 0x86	; 134
    3010:	09 f0       	breq	.+2      	; 0x3014 <vfprintf+0x314>
    3012:	b3 94       	inc	r11
    3014:	a3 fc       	sbrc	r10, 3
    3016:	10 c0       	rjmp	.+32     	; 0x3038 <vfprintf+0x338>
    3018:	a0 fe       	sbrs	r10, 0
    301a:	06 c0       	rjmp	.+12     	; 0x3028 <vfprintf+0x328>
    301c:	b2 14       	cp	r11, r2
    301e:	80 f4       	brcc	.+32     	; 0x3040 <vfprintf+0x340>
    3020:	28 0c       	add	r2, r8
    3022:	92 2c       	mov	r9, r2
    3024:	9b 18       	sub	r9, r11
    3026:	0d c0       	rjmp	.+26     	; 0x3042 <vfprintf+0x342>
    3028:	b2 14       	cp	r11, r2
    302a:	58 f4       	brcc	.+22     	; 0x3042 <vfprintf+0x342>
    302c:	b6 01       	movw	r22, r12
    302e:	80 e2       	ldi	r24, 0x20	; 32
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	c9 d4       	rcall	.+2450   	; 0x39c6 <fputc>
    3034:	b3 94       	inc	r11
    3036:	f8 cf       	rjmp	.-16     	; 0x3028 <vfprintf+0x328>
    3038:	b2 14       	cp	r11, r2
    303a:	18 f4       	brcc	.+6      	; 0x3042 <vfprintf+0x342>
    303c:	2b 18       	sub	r2, r11
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <vfprintf+0x344>
    3040:	98 2c       	mov	r9, r8
    3042:	21 2c       	mov	r2, r1
    3044:	a4 fe       	sbrs	r10, 4
    3046:	0f c0       	rjmp	.+30     	; 0x3066 <vfprintf+0x366>
    3048:	b6 01       	movw	r22, r12
    304a:	80 e3       	ldi	r24, 0x30	; 48
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	bb d4       	rcall	.+2422   	; 0x39c6 <fputc>
    3050:	a2 fe       	sbrs	r10, 2
    3052:	16 c0       	rjmp	.+44     	; 0x3080 <vfprintf+0x380>
    3054:	a1 fc       	sbrc	r10, 1
    3056:	03 c0       	rjmp	.+6      	; 0x305e <vfprintf+0x35e>
    3058:	88 e7       	ldi	r24, 0x78	; 120
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <vfprintf+0x362>
    305e:	88 e5       	ldi	r24, 0x58	; 88
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	b6 01       	movw	r22, r12
    3064:	0c c0       	rjmp	.+24     	; 0x307e <vfprintf+0x37e>
    3066:	8a 2d       	mov	r24, r10
    3068:	86 78       	andi	r24, 0x86	; 134
    306a:	51 f0       	breq	.+20     	; 0x3080 <vfprintf+0x380>
    306c:	a1 fe       	sbrs	r10, 1
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <vfprintf+0x374>
    3070:	8b e2       	ldi	r24, 0x2B	; 43
    3072:	01 c0       	rjmp	.+2      	; 0x3076 <vfprintf+0x376>
    3074:	80 e2       	ldi	r24, 0x20	; 32
    3076:	a7 fc       	sbrc	r10, 7
    3078:	8d e2       	ldi	r24, 0x2D	; 45
    307a:	b6 01       	movw	r22, r12
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	a3 d4       	rcall	.+2374   	; 0x39c6 <fputc>
    3080:	89 14       	cp	r8, r9
    3082:	30 f4       	brcc	.+12     	; 0x3090 <vfprintf+0x390>
    3084:	b6 01       	movw	r22, r12
    3086:	80 e3       	ldi	r24, 0x30	; 48
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9d d4       	rcall	.+2362   	; 0x39c6 <fputc>
    308c:	9a 94       	dec	r9
    308e:	f8 cf       	rjmp	.-16     	; 0x3080 <vfprintf+0x380>
    3090:	8a 94       	dec	r8
    3092:	f3 01       	movw	r30, r6
    3094:	e8 0d       	add	r30, r8
    3096:	f1 1d       	adc	r31, r1
    3098:	80 81       	ld	r24, Z
    309a:	b6 01       	movw	r22, r12
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	93 d4       	rcall	.+2342   	; 0x39c6 <fputc>
    30a0:	81 10       	cpse	r8, r1
    30a2:	f6 cf       	rjmp	.-20     	; 0x3090 <vfprintf+0x390>
    30a4:	22 20       	and	r2, r2
    30a6:	09 f4       	brne	.+2      	; 0x30aa <vfprintf+0x3aa>
    30a8:	4e ce       	rjmp	.-868    	; 0x2d46 <vfprintf+0x46>
    30aa:	b6 01       	movw	r22, r12
    30ac:	80 e2       	ldi	r24, 0x20	; 32
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	8a d4       	rcall	.+2324   	; 0x39c6 <fputc>
    30b2:	2a 94       	dec	r2
    30b4:	f7 cf       	rjmp	.-18     	; 0x30a4 <vfprintf+0x3a4>
    30b6:	f6 01       	movw	r30, r12
    30b8:	86 81       	ldd	r24, Z+6	; 0x06
    30ba:	97 81       	ldd	r25, Z+7	; 0x07
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <vfprintf+0x3c2>
    30be:	8f ef       	ldi	r24, 0xFF	; 255
    30c0:	9f ef       	ldi	r25, 0xFF	; 255
    30c2:	2b 96       	adiw	r28, 0x0b	; 11
    30c4:	cd bf       	out	0x3d, r28	; 61
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	1f 91       	pop	r17
    30ce:	0f 91       	pop	r16
    30d0:	ff 90       	pop	r15
    30d2:	ef 90       	pop	r14
    30d4:	df 90       	pop	r13
    30d6:	cf 90       	pop	r12
    30d8:	bf 90       	pop	r11
    30da:	af 90       	pop	r10
    30dc:	9f 90       	pop	r9
    30de:	8f 90       	pop	r8
    30e0:	7f 90       	pop	r7
    30e2:	6f 90       	pop	r6
    30e4:	5f 90       	pop	r5
    30e6:	4f 90       	pop	r4
    30e8:	3f 90       	pop	r3
    30ea:	2f 90       	pop	r2
    30ec:	08 95       	ret

000030ee <putval>:
    30ee:	20 fd       	sbrc	r18, 0
    30f0:	09 c0       	rjmp	.+18     	; 0x3104 <putval+0x16>
    30f2:	fc 01       	movw	r30, r24
    30f4:	23 fd       	sbrc	r18, 3
    30f6:	05 c0       	rjmp	.+10     	; 0x3102 <putval+0x14>
    30f8:	22 ff       	sbrs	r18, 2
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <putval+0x12>
    30fc:	73 83       	std	Z+3, r23	; 0x03
    30fe:	62 83       	std	Z+2, r22	; 0x02
    3100:	51 83       	std	Z+1, r21	; 0x01
    3102:	40 83       	st	Z, r20
    3104:	08 95       	ret

00003106 <mulacc>:
    3106:	44 fd       	sbrc	r20, 4
    3108:	17 c0       	rjmp	.+46     	; 0x3138 <mulacc+0x32>
    310a:	46 fd       	sbrc	r20, 6
    310c:	17 c0       	rjmp	.+46     	; 0x313c <mulacc+0x36>
    310e:	ab 01       	movw	r20, r22
    3110:	bc 01       	movw	r22, r24
    3112:	da 01       	movw	r26, r20
    3114:	fb 01       	movw	r30, r22
    3116:	aa 0f       	add	r26, r26
    3118:	bb 1f       	adc	r27, r27
    311a:	ee 1f       	adc	r30, r30
    311c:	ff 1f       	adc	r31, r31
    311e:	10 94       	com	r1
    3120:	d1 f7       	brne	.-12     	; 0x3116 <mulacc+0x10>
    3122:	4a 0f       	add	r20, r26
    3124:	5b 1f       	adc	r21, r27
    3126:	6e 1f       	adc	r22, r30
    3128:	7f 1f       	adc	r23, r31
    312a:	cb 01       	movw	r24, r22
    312c:	ba 01       	movw	r22, r20
    312e:	66 0f       	add	r22, r22
    3130:	77 1f       	adc	r23, r23
    3132:	88 1f       	adc	r24, r24
    3134:	99 1f       	adc	r25, r25
    3136:	09 c0       	rjmp	.+18     	; 0x314a <mulacc+0x44>
    3138:	33 e0       	ldi	r19, 0x03	; 3
    313a:	01 c0       	rjmp	.+2      	; 0x313e <mulacc+0x38>
    313c:	34 e0       	ldi	r19, 0x04	; 4
    313e:	66 0f       	add	r22, r22
    3140:	77 1f       	adc	r23, r23
    3142:	88 1f       	adc	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	31 50       	subi	r19, 0x01	; 1
    3148:	d1 f7       	brne	.-12     	; 0x313e <mulacc+0x38>
    314a:	62 0f       	add	r22, r18
    314c:	71 1d       	adc	r23, r1
    314e:	81 1d       	adc	r24, r1
    3150:	91 1d       	adc	r25, r1
    3152:	08 95       	ret

00003154 <skip_spaces>:
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	8c 01       	movw	r16, r24
    315e:	c8 01       	movw	r24, r16
    3160:	f4 d3       	rcall	.+2024   	; 0x394a <fgetc>
    3162:	ec 01       	movw	r28, r24
    3164:	97 fd       	sbrc	r25, 7
    3166:	06 c0       	rjmp	.+12     	; 0x3174 <skip_spaces+0x20>
    3168:	c0 d3       	rcall	.+1920   	; 0x38ea <isspace>
    316a:	89 2b       	or	r24, r25
    316c:	c1 f7       	brne	.-16     	; 0x315e <skip_spaces+0xa>
    316e:	b8 01       	movw	r22, r16
    3170:	ce 01       	movw	r24, r28
    3172:	65 d4       	rcall	.+2250   	; 0x3a3e <ungetc>
    3174:	ce 01       	movw	r24, r28
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	1f 91       	pop	r17
    317c:	0f 91       	pop	r16
    317e:	08 95       	ret

00003180 <conv_int>:
    3180:	8f 92       	push	r8
    3182:	9f 92       	push	r9
    3184:	af 92       	push	r10
    3186:	bf 92       	push	r11
    3188:	ef 92       	push	r14
    318a:	ff 92       	push	r15
    318c:	0f 93       	push	r16
    318e:	1f 93       	push	r17
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	8c 01       	movw	r16, r24
    3196:	d6 2f       	mov	r29, r22
    3198:	7a 01       	movw	r14, r20
    319a:	b2 2e       	mov	r11, r18
    319c:	d6 d3       	rcall	.+1964   	; 0x394a <fgetc>
    319e:	9c 01       	movw	r18, r24
    31a0:	33 27       	eor	r19, r19
    31a2:	2b 32       	cpi	r18, 0x2B	; 43
    31a4:	31 05       	cpc	r19, r1
    31a6:	31 f0       	breq	.+12     	; 0x31b4 <conv_int+0x34>
    31a8:	2d 32       	cpi	r18, 0x2D	; 45
    31aa:	31 05       	cpc	r19, r1
    31ac:	59 f4       	brne	.+22     	; 0x31c4 <conv_int+0x44>
    31ae:	8b 2d       	mov	r24, r11
    31b0:	80 68       	ori	r24, 0x80	; 128
    31b2:	b8 2e       	mov	r11, r24
    31b4:	d1 50       	subi	r29, 0x01	; 1
    31b6:	11 f4       	brne	.+4      	; 0x31bc <conv_int+0x3c>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	61 c0       	rjmp	.+194    	; 0x327e <conv_int+0xfe>
    31bc:	c8 01       	movw	r24, r16
    31be:	c5 d3       	rcall	.+1930   	; 0x394a <fgetc>
    31c0:	97 fd       	sbrc	r25, 7
    31c2:	fa cf       	rjmp	.-12     	; 0x31b8 <conv_int+0x38>
    31c4:	cb 2d       	mov	r28, r11
    31c6:	cd 7f       	andi	r28, 0xFD	; 253
    31c8:	2b 2d       	mov	r18, r11
    31ca:	20 73       	andi	r18, 0x30	; 48
    31cc:	f9 f4       	brne	.+62     	; 0x320c <conv_int+0x8c>
    31ce:	80 33       	cpi	r24, 0x30	; 48
    31d0:	e9 f4       	brne	.+58     	; 0x320c <conv_int+0x8c>
    31d2:	aa 24       	eor	r10, r10
    31d4:	aa 94       	dec	r10
    31d6:	ad 0e       	add	r10, r29
    31d8:	09 f4       	brne	.+2      	; 0x31dc <conv_int+0x5c>
    31da:	3e c0       	rjmp	.+124    	; 0x3258 <conv_int+0xd8>
    31dc:	c8 01       	movw	r24, r16
    31de:	b5 d3       	rcall	.+1898   	; 0x394a <fgetc>
    31e0:	97 fd       	sbrc	r25, 7
    31e2:	3a c0       	rjmp	.+116    	; 0x3258 <conv_int+0xd8>
    31e4:	9c 01       	movw	r18, r24
    31e6:	2f 7d       	andi	r18, 0xDF	; 223
    31e8:	33 27       	eor	r19, r19
    31ea:	28 35       	cpi	r18, 0x58	; 88
    31ec:	31 05       	cpc	r19, r1
    31ee:	41 f4       	brne	.+16     	; 0x3200 <conv_int+0x80>
    31f0:	c2 64       	ori	r28, 0x42	; 66
    31f2:	d2 50       	subi	r29, 0x02	; 2
    31f4:	89 f1       	breq	.+98     	; 0x3258 <conv_int+0xd8>
    31f6:	c8 01       	movw	r24, r16
    31f8:	a8 d3       	rcall	.+1872   	; 0x394a <fgetc>
    31fa:	97 ff       	sbrs	r25, 7
    31fc:	07 c0       	rjmp	.+14     	; 0x320c <conv_int+0x8c>
    31fe:	2c c0       	rjmp	.+88     	; 0x3258 <conv_int+0xd8>
    3200:	b6 fe       	sbrs	r11, 6
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <conv_int+0x88>
    3204:	c2 60       	ori	r28, 0x02	; 2
    3206:	01 c0       	rjmp	.+2      	; 0x320a <conv_int+0x8a>
    3208:	c2 61       	ori	r28, 0x12	; 18
    320a:	da 2d       	mov	r29, r10
    320c:	81 2c       	mov	r8, r1
    320e:	91 2c       	mov	r9, r1
    3210:	54 01       	movw	r10, r8
    3212:	20 ed       	ldi	r18, 0xD0	; 208
    3214:	28 0f       	add	r18, r24
    3216:	28 30       	cpi	r18, 0x08	; 8
    3218:	78 f0       	brcs	.+30     	; 0x3238 <conv_int+0xb8>
    321a:	c4 ff       	sbrs	r28, 4
    321c:	03 c0       	rjmp	.+6      	; 0x3224 <conv_int+0xa4>
    321e:	b8 01       	movw	r22, r16
    3220:	0e d4       	rcall	.+2076   	; 0x3a3e <ungetc>
    3222:	17 c0       	rjmp	.+46     	; 0x3252 <conv_int+0xd2>
    3224:	2a 30       	cpi	r18, 0x0A	; 10
    3226:	40 f0       	brcs	.+16     	; 0x3238 <conv_int+0xb8>
    3228:	c6 ff       	sbrs	r28, 6
    322a:	f9 cf       	rjmp	.-14     	; 0x321e <conv_int+0x9e>
    322c:	2f 7d       	andi	r18, 0xDF	; 223
    322e:	3f ee       	ldi	r19, 0xEF	; 239
    3230:	32 0f       	add	r19, r18
    3232:	36 30       	cpi	r19, 0x06	; 6
    3234:	a0 f7       	brcc	.-24     	; 0x321e <conv_int+0x9e>
    3236:	27 50       	subi	r18, 0x07	; 7
    3238:	4c 2f       	mov	r20, r28
    323a:	c5 01       	movw	r24, r10
    323c:	b4 01       	movw	r22, r8
    323e:	63 df       	rcall	.-314    	; 0x3106 <mulacc>
    3240:	4b 01       	movw	r8, r22
    3242:	5c 01       	movw	r10, r24
    3244:	c2 60       	ori	r28, 0x02	; 2
    3246:	d1 50       	subi	r29, 0x01	; 1
    3248:	51 f0       	breq	.+20     	; 0x325e <conv_int+0xde>
    324a:	c8 01       	movw	r24, r16
    324c:	7e d3       	rcall	.+1788   	; 0x394a <fgetc>
    324e:	97 ff       	sbrs	r25, 7
    3250:	e0 cf       	rjmp	.-64     	; 0x3212 <conv_int+0x92>
    3252:	c1 fd       	sbrc	r28, 1
    3254:	04 c0       	rjmp	.+8      	; 0x325e <conv_int+0xde>
    3256:	b0 cf       	rjmp	.-160    	; 0x31b8 <conv_int+0x38>
    3258:	81 2c       	mov	r8, r1
    325a:	91 2c       	mov	r9, r1
    325c:	54 01       	movw	r10, r8
    325e:	c7 ff       	sbrs	r28, 7
    3260:	08 c0       	rjmp	.+16     	; 0x3272 <conv_int+0xf2>
    3262:	b0 94       	com	r11
    3264:	a0 94       	com	r10
    3266:	90 94       	com	r9
    3268:	80 94       	com	r8
    326a:	81 1c       	adc	r8, r1
    326c:	91 1c       	adc	r9, r1
    326e:	a1 1c       	adc	r10, r1
    3270:	b1 1c       	adc	r11, r1
    3272:	2c 2f       	mov	r18, r28
    3274:	b5 01       	movw	r22, r10
    3276:	a4 01       	movw	r20, r8
    3278:	c7 01       	movw	r24, r14
    327a:	39 df       	rcall	.-398    	; 0x30ee <putval>
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	ff 90       	pop	r15
    3288:	ef 90       	pop	r14
    328a:	bf 90       	pop	r11
    328c:	af 90       	pop	r10
    328e:	9f 90       	pop	r9
    3290:	8f 90       	pop	r8
    3292:	08 95       	ret

00003294 <conv_brk>:
    3294:	5f 92       	push	r5
    3296:	6f 92       	push	r6
    3298:	7f 92       	push	r7
    329a:	8f 92       	push	r8
    329c:	9f 92       	push	r9
    329e:	af 92       	push	r10
    32a0:	bf 92       	push	r11
    32a2:	cf 92       	push	r12
    32a4:	df 92       	push	r13
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	a0 97       	sbiw	r28, 0x20	; 32
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	5c 01       	movw	r10, r24
    32be:	96 2e       	mov	r9, r22
    32c0:	7a 01       	movw	r14, r20
    32c2:	f9 01       	movw	r30, r18
    32c4:	8e 01       	movw	r16, r28
    32c6:	0f 5f       	subi	r16, 0xFF	; 255
    32c8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ca:	68 01       	movw	r12, r16
    32cc:	80 e2       	ldi	r24, 0x20	; 32
    32ce:	d8 01       	movw	r26, r16
    32d0:	1d 92       	st	X+, r1
    32d2:	8a 95       	dec	r24
    32d4:	e9 f7       	brne	.-6      	; 0x32d0 <conv_brk+0x3c>
    32d6:	d5 01       	movw	r26, r10
    32d8:	13 96       	adiw	r26, 0x03	; 3
    32da:	8c 90       	ld	r8, X
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	61 2c       	mov	r6, r1
    32e2:	71 2c       	mov	r7, r1
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	61 e0       	ldi	r22, 0x01	; 1
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	83 fc       	sbrc	r8, 3
    32ec:	25 91       	lpm	r18, Z+
    32ee:	83 fe       	sbrs	r8, 3
    32f0:	21 91       	ld	r18, Z+
    32f2:	8f 01       	movw	r16, r30
    32f4:	52 2e       	mov	r5, r18
    32f6:	21 11       	cpse	r18, r1
    32f8:	03 c0       	rjmp	.+6      	; 0x3300 <conv_brk+0x6c>
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	90 c0       	rjmp	.+288    	; 0x3420 <conv_brk+0x18c>
    3300:	2e 35       	cpi	r18, 0x5E	; 94
    3302:	11 f4       	brne	.+4      	; 0x3308 <conv_brk+0x74>
    3304:	00 97       	sbiw	r24, 0x00	; 0
    3306:	51 f1       	breq	.+84     	; 0x335c <conv_brk+0xc8>
    3308:	43 2f       	mov	r20, r19
    330a:	50 e0       	ldi	r21, 0x00	; 0
    330c:	48 17       	cp	r20, r24
    330e:	59 07       	cpc	r21, r25
    3310:	3c f4       	brge	.+14     	; 0x3320 <conv_brk+0x8c>
    3312:	2d 35       	cpi	r18, 0x5D	; 93
    3314:	59 f1       	breq	.+86     	; 0x336c <conv_brk+0xd8>
    3316:	2d 32       	cpi	r18, 0x2D	; 45
    3318:	19 f4       	brne	.+6      	; 0x3320 <conv_brk+0x8c>
    331a:	77 20       	and	r7, r7
    331c:	09 f1       	breq	.+66     	; 0x3360 <conv_brk+0xcc>
    331e:	03 c0       	rjmp	.+6      	; 0x3326 <conv_brk+0x92>
    3320:	77 20       	and	r7, r7
    3322:	09 f4       	brne	.+2      	; 0x3326 <conv_brk+0x92>
    3324:	68 c0       	rjmp	.+208    	; 0x33f6 <conv_brk+0x162>
    3326:	45 2d       	mov	r20, r5
    3328:	46 95       	lsr	r20
    332a:	46 95       	lsr	r20
    332c:	46 95       	lsr	r20
    332e:	d6 01       	movw	r26, r12
    3330:	a4 0f       	add	r26, r20
    3332:	b1 1d       	adc	r27, r1
    3334:	45 2d       	mov	r20, r5
    3336:	47 70       	andi	r20, 0x07	; 7
    3338:	8b 01       	movw	r16, r22
    333a:	02 c0       	rjmp	.+4      	; 0x3340 <conv_brk+0xac>
    333c:	00 0f       	add	r16, r16
    333e:	11 1f       	adc	r17, r17
    3340:	4a 95       	dec	r20
    3342:	e2 f7       	brpl	.-8      	; 0x333c <conv_brk+0xa8>
    3344:	a8 01       	movw	r20, r16
    3346:	5c 91       	ld	r21, X
    3348:	45 2b       	or	r20, r21
    334a:	4c 93       	st	X, r20
    334c:	65 14       	cp	r6, r5
    334e:	59 f0       	breq	.+22     	; 0x3366 <conv_brk+0xd2>
    3350:	56 14       	cp	r5, r6
    3352:	10 f4       	brcc	.+4      	; 0x3358 <conv_brk+0xc4>
    3354:	53 94       	inc	r5
    3356:	e7 cf       	rjmp	.-50     	; 0x3326 <conv_brk+0x92>
    3358:	5a 94       	dec	r5
    335a:	e5 cf       	rjmp	.-54     	; 0x3326 <conv_brk+0x92>
    335c:	31 e0       	ldi	r19, 0x01	; 1
    335e:	04 c0       	rjmp	.+8      	; 0x3368 <conv_brk+0xd4>
    3360:	77 24       	eor	r7, r7
    3362:	73 94       	inc	r7
    3364:	01 c0       	rjmp	.+2      	; 0x3368 <conv_brk+0xd4>
    3366:	71 2c       	mov	r7, r1
    3368:	01 96       	adiw	r24, 0x01	; 1
    336a:	bf cf       	rjmp	.-130    	; 0x32ea <conv_brk+0x56>
    336c:	77 20       	and	r7, r7
    336e:	19 f0       	breq	.+6      	; 0x3376 <conv_brk+0xe2>
    3370:	8e 81       	ldd	r24, Y+6	; 0x06
    3372:	80 62       	ori	r24, 0x20	; 32
    3374:	8e 83       	std	Y+6, r24	; 0x06
    3376:	31 11       	cpse	r19, r1
    3378:	03 c0       	rjmp	.+6      	; 0x3380 <conv_brk+0xec>
    337a:	88 24       	eor	r8, r8
    337c:	83 94       	inc	r8
    337e:	17 c0       	rjmp	.+46     	; 0x33ae <conv_brk+0x11a>
    3380:	f6 01       	movw	r30, r12
    3382:	9e 01       	movw	r18, r28
    3384:	2f 5d       	subi	r18, 0xDF	; 223
    3386:	3f 4f       	sbci	r19, 0xFF	; 255
    3388:	80 81       	ld	r24, Z
    338a:	80 95       	com	r24
    338c:	81 93       	st	Z+, r24
    338e:	2e 17       	cp	r18, r30
    3390:	3f 07       	cpc	r19, r31
    3392:	d1 f7       	brne	.-12     	; 0x3388 <conv_brk+0xf4>
    3394:	f2 cf       	rjmp	.-28     	; 0x337a <conv_brk+0xe6>
    3396:	e1 14       	cp	r14, r1
    3398:	f1 04       	cpc	r15, r1
    339a:	29 f0       	breq	.+10     	; 0x33a6 <conv_brk+0x112>
    339c:	d7 01       	movw	r26, r14
    339e:	8c 93       	st	X, r24
    33a0:	f7 01       	movw	r30, r14
    33a2:	31 96       	adiw	r30, 0x01	; 1
    33a4:	7f 01       	movw	r14, r30
    33a6:	9a 94       	dec	r9
    33a8:	81 2c       	mov	r8, r1
    33aa:	99 20       	and	r9, r9
    33ac:	e9 f0       	breq	.+58     	; 0x33e8 <conv_brk+0x154>
    33ae:	c5 01       	movw	r24, r10
    33b0:	cc d2       	rcall	.+1432   	; 0x394a <fgetc>
    33b2:	97 fd       	sbrc	r25, 7
    33b4:	17 c0       	rjmp	.+46     	; 0x33e4 <conv_brk+0x150>
    33b6:	fc 01       	movw	r30, r24
    33b8:	ff 27       	eor	r31, r31
    33ba:	23 e0       	ldi	r18, 0x03	; 3
    33bc:	f5 95       	asr	r31
    33be:	e7 95       	ror	r30
    33c0:	2a 95       	dec	r18
    33c2:	e1 f7       	brne	.-8      	; 0x33bc <conv_brk+0x128>
    33c4:	ec 0d       	add	r30, r12
    33c6:	fd 1d       	adc	r31, r13
    33c8:	20 81       	ld	r18, Z
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	ac 01       	movw	r20, r24
    33ce:	47 70       	andi	r20, 0x07	; 7
    33d0:	55 27       	eor	r21, r21
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <conv_brk+0x144>
    33d4:	35 95       	asr	r19
    33d6:	27 95       	ror	r18
    33d8:	4a 95       	dec	r20
    33da:	e2 f7       	brpl	.-8      	; 0x33d4 <conv_brk+0x140>
    33dc:	20 fd       	sbrc	r18, 0
    33de:	db cf       	rjmp	.-74     	; 0x3396 <conv_brk+0x102>
    33e0:	b5 01       	movw	r22, r10
    33e2:	2d d3       	rcall	.+1626   	; 0x3a3e <ungetc>
    33e4:	81 10       	cpse	r8, r1
    33e6:	89 cf       	rjmp	.-238    	; 0x32fa <conv_brk+0x66>
    33e8:	e1 14       	cp	r14, r1
    33ea:	f1 04       	cpc	r15, r1
    33ec:	11 f0       	breq	.+4      	; 0x33f2 <conv_brk+0x15e>
    33ee:	d7 01       	movw	r26, r14
    33f0:	1c 92       	st	X, r1
    33f2:	c8 01       	movw	r24, r16
    33f4:	15 c0       	rjmp	.+42     	; 0x3420 <conv_brk+0x18c>
    33f6:	42 2f       	mov	r20, r18
    33f8:	46 95       	lsr	r20
    33fa:	46 95       	lsr	r20
    33fc:	46 95       	lsr	r20
    33fe:	d6 01       	movw	r26, r12
    3400:	a4 0f       	add	r26, r20
    3402:	b1 1d       	adc	r27, r1
    3404:	42 2f       	mov	r20, r18
    3406:	47 70       	andi	r20, 0x07	; 7
    3408:	8b 01       	movw	r16, r22
    340a:	02 c0       	rjmp	.+4      	; 0x3410 <conv_brk+0x17c>
    340c:	00 0f       	add	r16, r16
    340e:	11 1f       	adc	r17, r17
    3410:	4a 95       	dec	r20
    3412:	e2 f7       	brpl	.-8      	; 0x340c <conv_brk+0x178>
    3414:	a8 01       	movw	r20, r16
    3416:	5c 91       	ld	r21, X
    3418:	45 2b       	or	r20, r21
    341a:	4c 93       	st	X, r20
    341c:	62 2e       	mov	r6, r18
    341e:	a4 cf       	rjmp	.-184    	; 0x3368 <conv_brk+0xd4>
    3420:	a0 96       	adiw	r28, 0x20	; 32
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	bf 90       	pop	r11
    3438:	af 90       	pop	r10
    343a:	9f 90       	pop	r9
    343c:	8f 90       	pop	r8
    343e:	7f 90       	pop	r7
    3440:	6f 90       	pop	r6
    3442:	5f 90       	pop	r5
    3444:	08 95       	ret

00003446 <vfscanf>:
    3446:	5f 92       	push	r5
    3448:	6f 92       	push	r6
    344a:	7f 92       	push	r7
    344c:	8f 92       	push	r8
    344e:	9f 92       	push	r9
    3450:	af 92       	push	r10
    3452:	bf 92       	push	r11
    3454:	cf 92       	push	r12
    3456:	df 92       	push	r13
    3458:	ef 92       	push	r14
    345a:	ff 92       	push	r15
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    3464:	6c 01       	movw	r12, r24
    3466:	eb 01       	movw	r28, r22
    3468:	5a 01       	movw	r10, r20
    346a:	fc 01       	movw	r30, r24
    346c:	16 82       	std	Z+6, r1	; 0x06
    346e:	17 82       	std	Z+7, r1	; 0x07
    3470:	51 2c       	mov	r5, r1
    3472:	f6 01       	movw	r30, r12
    3474:	e3 80       	ldd	r14, Z+3	; 0x03
    3476:	fe 01       	movw	r30, r28
    3478:	e3 fc       	sbrc	r14, 3
    347a:	85 91       	lpm	r24, Z+
    347c:	e3 fe       	sbrs	r14, 3
    347e:	81 91       	ld	r24, Z+
    3480:	18 2f       	mov	r17, r24
    3482:	ef 01       	movw	r28, r30
    3484:	88 23       	and	r24, r24
    3486:	09 f4       	brne	.+2      	; 0x348a <vfscanf+0x44>
    3488:	e0 c0       	rjmp	.+448    	; 0x364a <vfscanf+0x204>
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	2e d2       	rcall	.+1116   	; 0x38ea <isspace>
    348e:	89 2b       	or	r24, r25
    3490:	19 f0       	breq	.+6      	; 0x3498 <vfscanf+0x52>
    3492:	c6 01       	movw	r24, r12
    3494:	5f de       	rcall	.-834    	; 0x3154 <skip_spaces>
    3496:	ed cf       	rjmp	.-38     	; 0x3472 <vfscanf+0x2c>
    3498:	15 32       	cpi	r17, 0x25	; 37
    349a:	41 f4       	brne	.+16     	; 0x34ac <vfscanf+0x66>
    349c:	fe 01       	movw	r30, r28
    349e:	e3 fc       	sbrc	r14, 3
    34a0:	15 91       	lpm	r17, Z+
    34a2:	e3 fe       	sbrs	r14, 3
    34a4:	11 91       	ld	r17, Z+
    34a6:	ef 01       	movw	r28, r30
    34a8:	15 32       	cpi	r17, 0x25	; 37
    34aa:	71 f4       	brne	.+28     	; 0x34c8 <vfscanf+0x82>
    34ac:	c6 01       	movw	r24, r12
    34ae:	4d d2       	rcall	.+1178   	; 0x394a <fgetc>
    34b0:	97 fd       	sbrc	r25, 7
    34b2:	c9 c0       	rjmp	.+402    	; 0x3646 <vfscanf+0x200>
    34b4:	41 2f       	mov	r20, r17
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	9c 01       	movw	r18, r24
    34ba:	33 27       	eor	r19, r19
    34bc:	24 17       	cp	r18, r20
    34be:	35 07       	cpc	r19, r21
    34c0:	c1 f2       	breq	.-80     	; 0x3472 <vfscanf+0x2c>
    34c2:	b6 01       	movw	r22, r12
    34c4:	bc d2       	rcall	.+1400   	; 0x3a3e <ungetc>
    34c6:	c1 c0       	rjmp	.+386    	; 0x364a <vfscanf+0x204>
    34c8:	1a 32       	cpi	r17, 0x2A	; 42
    34ca:	39 f4       	brne	.+14     	; 0x34da <vfscanf+0x94>
    34cc:	e3 fc       	sbrc	r14, 3
    34ce:	15 91       	lpm	r17, Z+
    34d0:	e3 fe       	sbrs	r14, 3
    34d2:	11 91       	ld	r17, Z+
    34d4:	ef 01       	movw	r28, r30
    34d6:	01 e0       	ldi	r16, 0x01	; 1
    34d8:	01 c0       	rjmp	.+2      	; 0x34dc <vfscanf+0x96>
    34da:	00 e0       	ldi	r16, 0x00	; 0
    34dc:	f1 2c       	mov	r15, r1
    34de:	20 ed       	ldi	r18, 0xD0	; 208
    34e0:	21 0f       	add	r18, r17
    34e2:	2a 30       	cpi	r18, 0x0A	; 10
    34e4:	78 f4       	brcc	.+30     	; 0x3504 <vfscanf+0xbe>
    34e6:	02 60       	ori	r16, 0x02	; 2
    34e8:	6f 2d       	mov	r22, r15
    34ea:	70 e0       	ldi	r23, 0x00	; 0
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	40 e2       	ldi	r20, 0x20	; 32
    34f2:	09 de       	rcall	.-1006   	; 0x3106 <mulacc>
    34f4:	f6 2e       	mov	r15, r22
    34f6:	fe 01       	movw	r30, r28
    34f8:	e3 fc       	sbrc	r14, 3
    34fa:	15 91       	lpm	r17, Z+
    34fc:	e3 fe       	sbrs	r14, 3
    34fe:	11 91       	ld	r17, Z+
    3500:	ef 01       	movw	r28, r30
    3502:	ed cf       	rjmp	.-38     	; 0x34de <vfscanf+0x98>
    3504:	01 ff       	sbrs	r16, 1
    3506:	03 c0       	rjmp	.+6      	; 0x350e <vfscanf+0xc8>
    3508:	f1 10       	cpse	r15, r1
    350a:	03 c0       	rjmp	.+6      	; 0x3512 <vfscanf+0xcc>
    350c:	9e c0       	rjmp	.+316    	; 0x364a <vfscanf+0x204>
    350e:	ff 24       	eor	r15, r15
    3510:	fa 94       	dec	r15
    3512:	18 36       	cpi	r17, 0x68	; 104
    3514:	19 f0       	breq	.+6      	; 0x351c <vfscanf+0xd6>
    3516:	1c 36       	cpi	r17, 0x6C	; 108
    3518:	51 f0       	breq	.+20     	; 0x352e <vfscanf+0xe8>
    351a:	10 c0       	rjmp	.+32     	; 0x353c <vfscanf+0xf6>
    351c:	fe 01       	movw	r30, r28
    351e:	e3 fc       	sbrc	r14, 3
    3520:	15 91       	lpm	r17, Z+
    3522:	e3 fe       	sbrs	r14, 3
    3524:	11 91       	ld	r17, Z+
    3526:	ef 01       	movw	r28, r30
    3528:	18 36       	cpi	r17, 0x68	; 104
    352a:	41 f4       	brne	.+16     	; 0x353c <vfscanf+0xf6>
    352c:	08 60       	ori	r16, 0x08	; 8
    352e:	04 60       	ori	r16, 0x04	; 4
    3530:	fe 01       	movw	r30, r28
    3532:	e3 fc       	sbrc	r14, 3
    3534:	15 91       	lpm	r17, Z+
    3536:	e3 fe       	sbrs	r14, 3
    3538:	11 91       	ld	r17, Z+
    353a:	ef 01       	movw	r28, r30
    353c:	11 23       	and	r17, r17
    353e:	09 f4       	brne	.+2      	; 0x3542 <vfscanf+0xfc>
    3540:	84 c0       	rjmp	.+264    	; 0x364a <vfscanf+0x204>
    3542:	61 2f       	mov	r22, r17
    3544:	70 e0       	ldi	r23, 0x00	; 0
    3546:	8e e7       	ldi	r24, 0x7E	; 126
    3548:	92 e0       	ldi	r25, 0x02	; 2
    354a:	d7 d1       	rcall	.+942    	; 0x38fa <strchr_P>
    354c:	89 2b       	or	r24, r25
    354e:	09 f4       	brne	.+2      	; 0x3552 <vfscanf+0x10c>
    3550:	7c c0       	rjmp	.+248    	; 0x364a <vfscanf+0x204>
    3552:	00 fd       	sbrc	r16, 0
    3554:	07 c0       	rjmp	.+14     	; 0x3564 <vfscanf+0x11e>
    3556:	f5 01       	movw	r30, r10
    3558:	80 80       	ld	r8, Z
    355a:	91 80       	ldd	r9, Z+1	; 0x01
    355c:	c5 01       	movw	r24, r10
    355e:	02 96       	adiw	r24, 0x02	; 2
    3560:	5c 01       	movw	r10, r24
    3562:	02 c0       	rjmp	.+4      	; 0x3568 <vfscanf+0x122>
    3564:	81 2c       	mov	r8, r1
    3566:	91 2c       	mov	r9, r1
    3568:	1e 36       	cpi	r17, 0x6E	; 110
    356a:	49 f4       	brne	.+18     	; 0x357e <vfscanf+0x138>
    356c:	f6 01       	movw	r30, r12
    356e:	46 81       	ldd	r20, Z+6	; 0x06
    3570:	57 81       	ldd	r21, Z+7	; 0x07
    3572:	60 e0       	ldi	r22, 0x00	; 0
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	20 2f       	mov	r18, r16
    3578:	c4 01       	movw	r24, r8
    357a:	b9 dd       	rcall	.-1166   	; 0x30ee <putval>
    357c:	7a cf       	rjmp	.-268    	; 0x3472 <vfscanf+0x2c>
    357e:	13 36       	cpi	r17, 0x63	; 99
    3580:	a1 f4       	brne	.+40     	; 0x35aa <vfscanf+0x164>
    3582:	01 fd       	sbrc	r16, 1
    3584:	02 c0       	rjmp	.+4      	; 0x358a <vfscanf+0x144>
    3586:	ff 24       	eor	r15, r15
    3588:	f3 94       	inc	r15
    358a:	c6 01       	movw	r24, r12
    358c:	de d1       	rcall	.+956    	; 0x394a <fgetc>
    358e:	97 fd       	sbrc	r25, 7
    3590:	5a c0       	rjmp	.+180    	; 0x3646 <vfscanf+0x200>
    3592:	81 14       	cp	r8, r1
    3594:	91 04       	cpc	r9, r1
    3596:	29 f0       	breq	.+10     	; 0x35a2 <vfscanf+0x15c>
    3598:	f4 01       	movw	r30, r8
    359a:	80 83       	st	Z, r24
    359c:	c4 01       	movw	r24, r8
    359e:	01 96       	adiw	r24, 0x01	; 1
    35a0:	4c 01       	movw	r8, r24
    35a2:	fa 94       	dec	r15
    35a4:	f1 10       	cpse	r15, r1
    35a6:	f1 cf       	rjmp	.-30     	; 0x358a <vfscanf+0x144>
    35a8:	4a c0       	rjmp	.+148    	; 0x363e <vfscanf+0x1f8>
    35aa:	1b 35       	cpi	r17, 0x5B	; 91
    35ac:	51 f4       	brne	.+20     	; 0x35c2 <vfscanf+0x17c>
    35ae:	9e 01       	movw	r18, r28
    35b0:	a4 01       	movw	r20, r8
    35b2:	6f 2d       	mov	r22, r15
    35b4:	c6 01       	movw	r24, r12
    35b6:	6e de       	rcall	.-804    	; 0x3294 <conv_brk>
    35b8:	ec 01       	movw	r28, r24
    35ba:	89 2b       	or	r24, r25
    35bc:	09 f0       	breq	.+2      	; 0x35c0 <vfscanf+0x17a>
    35be:	3f c0       	rjmp	.+126    	; 0x363e <vfscanf+0x1f8>
    35c0:	39 c0       	rjmp	.+114    	; 0x3634 <vfscanf+0x1ee>
    35c2:	c6 01       	movw	r24, r12
    35c4:	c7 dd       	rcall	.-1138   	; 0x3154 <skip_spaces>
    35c6:	97 fd       	sbrc	r25, 7
    35c8:	3e c0       	rjmp	.+124    	; 0x3646 <vfscanf+0x200>
    35ca:	1f 36       	cpi	r17, 0x6F	; 111
    35cc:	49 f1       	breq	.+82     	; 0x3620 <vfscanf+0x1da>
    35ce:	28 f4       	brcc	.+10     	; 0x35da <vfscanf+0x194>
    35d0:	14 36       	cpi	r17, 0x64	; 100
    35d2:	21 f1       	breq	.+72     	; 0x361c <vfscanf+0x1d6>
    35d4:	19 36       	cpi	r17, 0x69	; 105
    35d6:	39 f1       	breq	.+78     	; 0x3626 <vfscanf+0x1e0>
    35d8:	25 c0       	rjmp	.+74     	; 0x3624 <vfscanf+0x1de>
    35da:	13 37       	cpi	r17, 0x73	; 115
    35dc:	71 f0       	breq	.+28     	; 0x35fa <vfscanf+0x1b4>
    35de:	15 37       	cpi	r17, 0x75	; 117
    35e0:	e9 f0       	breq	.+58     	; 0x361c <vfscanf+0x1d6>
    35e2:	20 c0       	rjmp	.+64     	; 0x3624 <vfscanf+0x1de>
    35e4:	81 14       	cp	r8, r1
    35e6:	91 04       	cpc	r9, r1
    35e8:	29 f0       	breq	.+10     	; 0x35f4 <vfscanf+0x1ae>
    35ea:	f4 01       	movw	r30, r8
    35ec:	60 82       	st	Z, r6
    35ee:	c4 01       	movw	r24, r8
    35f0:	01 96       	adiw	r24, 0x01	; 1
    35f2:	4c 01       	movw	r8, r24
    35f4:	fa 94       	dec	r15
    35f6:	ff 20       	and	r15, r15
    35f8:	59 f0       	breq	.+22     	; 0x3610 <vfscanf+0x1ca>
    35fa:	c6 01       	movw	r24, r12
    35fc:	a6 d1       	rcall	.+844    	; 0x394a <fgetc>
    35fe:	3c 01       	movw	r6, r24
    3600:	97 fd       	sbrc	r25, 7
    3602:	06 c0       	rjmp	.+12     	; 0x3610 <vfscanf+0x1ca>
    3604:	72 d1       	rcall	.+740    	; 0x38ea <isspace>
    3606:	89 2b       	or	r24, r25
    3608:	69 f3       	breq	.-38     	; 0x35e4 <vfscanf+0x19e>
    360a:	b6 01       	movw	r22, r12
    360c:	c3 01       	movw	r24, r6
    360e:	17 d2       	rcall	.+1070   	; 0x3a3e <ungetc>
    3610:	81 14       	cp	r8, r1
    3612:	91 04       	cpc	r9, r1
    3614:	a1 f0       	breq	.+40     	; 0x363e <vfscanf+0x1f8>
    3616:	f4 01       	movw	r30, r8
    3618:	10 82       	st	Z, r1
    361a:	11 c0       	rjmp	.+34     	; 0x363e <vfscanf+0x1f8>
    361c:	00 62       	ori	r16, 0x20	; 32
    361e:	03 c0       	rjmp	.+6      	; 0x3626 <vfscanf+0x1e0>
    3620:	00 61       	ori	r16, 0x10	; 16
    3622:	01 c0       	rjmp	.+2      	; 0x3626 <vfscanf+0x1e0>
    3624:	00 64       	ori	r16, 0x40	; 64
    3626:	20 2f       	mov	r18, r16
    3628:	a4 01       	movw	r20, r8
    362a:	6f 2d       	mov	r22, r15
    362c:	c6 01       	movw	r24, r12
    362e:	a8 dd       	rcall	.-1200   	; 0x3180 <conv_int>
    3630:	81 11       	cpse	r24, r1
    3632:	05 c0       	rjmp	.+10     	; 0x363e <vfscanf+0x1f8>
    3634:	f6 01       	movw	r30, r12
    3636:	83 81       	ldd	r24, Z+3	; 0x03
    3638:	80 73       	andi	r24, 0x30	; 48
    363a:	29 f4       	brne	.+10     	; 0x3646 <vfscanf+0x200>
    363c:	06 c0       	rjmp	.+12     	; 0x364a <vfscanf+0x204>
    363e:	00 fd       	sbrc	r16, 0
    3640:	18 cf       	rjmp	.-464    	; 0x3472 <vfscanf+0x2c>
    3642:	53 94       	inc	r5
    3644:	16 cf       	rjmp	.-468    	; 0x3472 <vfscanf+0x2c>
    3646:	55 20       	and	r5, r5
    3648:	19 f0       	breq	.+6      	; 0x3650 <vfscanf+0x20a>
    364a:	85 2d       	mov	r24, r5
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <vfscanf+0x20e>
    3650:	8f ef       	ldi	r24, 0xFF	; 255
    3652:	9f ef       	ldi	r25, 0xFF	; 255
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	1f 91       	pop	r17
    365a:	0f 91       	pop	r16
    365c:	ff 90       	pop	r15
    365e:	ef 90       	pop	r14
    3660:	df 90       	pop	r13
    3662:	cf 90       	pop	r12
    3664:	bf 90       	pop	r11
    3666:	af 90       	pop	r10
    3668:	9f 90       	pop	r9
    366a:	8f 90       	pop	r8
    366c:	7f 90       	pop	r7
    366e:	6f 90       	pop	r6
    3670:	5f 90       	pop	r5
    3672:	08 95       	ret

00003674 <calloc>:
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	86 9f       	mul	r24, r22
    367e:	80 01       	movw	r16, r0
    3680:	87 9f       	mul	r24, r23
    3682:	10 0d       	add	r17, r0
    3684:	96 9f       	mul	r25, r22
    3686:	10 0d       	add	r17, r0
    3688:	11 24       	eor	r1, r1
    368a:	c8 01       	movw	r24, r16
    368c:	0d d0       	rcall	.+26     	; 0x36a8 <malloc>
    368e:	ec 01       	movw	r28, r24
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	21 f0       	breq	.+8      	; 0x369c <calloc+0x28>
    3694:	a8 01       	movw	r20, r16
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	45 d1       	rcall	.+650    	; 0x3926 <memset>
    369c:	ce 01       	movw	r24, r28
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	08 95       	ret

000036a8 <malloc>:
    36a8:	0f 93       	push	r16
    36aa:	1f 93       	push	r17
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	82 30       	cpi	r24, 0x02	; 2
    36b2:	91 05       	cpc	r25, r1
    36b4:	10 f4       	brcc	.+4      	; 0x36ba <malloc+0x12>
    36b6:	82 e0       	ldi	r24, 0x02	; 2
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	e0 91 88 21 	lds	r30, 0x2188	; 0x802188 <__flp>
    36be:	f0 91 89 21 	lds	r31, 0x2189	; 0x802189 <__flp+0x1>
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	a0 e0       	ldi	r26, 0x00	; 0
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	30 97       	sbiw	r30, 0x00	; 0
    36cc:	19 f1       	breq	.+70     	; 0x3714 <malloc+0x6c>
    36ce:	40 81       	ld	r20, Z
    36d0:	51 81       	ldd	r21, Z+1	; 0x01
    36d2:	02 81       	ldd	r16, Z+2	; 0x02
    36d4:	13 81       	ldd	r17, Z+3	; 0x03
    36d6:	48 17       	cp	r20, r24
    36d8:	59 07       	cpc	r21, r25
    36da:	c8 f0       	brcs	.+50     	; 0x370e <malloc+0x66>
    36dc:	84 17       	cp	r24, r20
    36de:	95 07       	cpc	r25, r21
    36e0:	69 f4       	brne	.+26     	; 0x36fc <malloc+0x54>
    36e2:	10 97       	sbiw	r26, 0x00	; 0
    36e4:	31 f0       	breq	.+12     	; 0x36f2 <malloc+0x4a>
    36e6:	12 96       	adiw	r26, 0x02	; 2
    36e8:	0c 93       	st	X, r16
    36ea:	12 97       	sbiw	r26, 0x02	; 2
    36ec:	13 96       	adiw	r26, 0x03	; 3
    36ee:	1c 93       	st	X, r17
    36f0:	27 c0       	rjmp	.+78     	; 0x3740 <malloc+0x98>
    36f2:	00 93 88 21 	sts	0x2188, r16	; 0x802188 <__flp>
    36f6:	10 93 89 21 	sts	0x2189, r17	; 0x802189 <__flp+0x1>
    36fa:	22 c0       	rjmp	.+68     	; 0x3740 <malloc+0x98>
    36fc:	21 15       	cp	r18, r1
    36fe:	31 05       	cpc	r19, r1
    3700:	19 f0       	breq	.+6      	; 0x3708 <malloc+0x60>
    3702:	42 17       	cp	r20, r18
    3704:	53 07       	cpc	r21, r19
    3706:	18 f4       	brcc	.+6      	; 0x370e <malloc+0x66>
    3708:	9a 01       	movw	r18, r20
    370a:	bd 01       	movw	r22, r26
    370c:	ef 01       	movw	r28, r30
    370e:	df 01       	movw	r26, r30
    3710:	f8 01       	movw	r30, r16
    3712:	db cf       	rjmp	.-74     	; 0x36ca <malloc+0x22>
    3714:	21 15       	cp	r18, r1
    3716:	31 05       	cpc	r19, r1
    3718:	f9 f0       	breq	.+62     	; 0x3758 <malloc+0xb0>
    371a:	28 1b       	sub	r18, r24
    371c:	39 0b       	sbc	r19, r25
    371e:	24 30       	cpi	r18, 0x04	; 4
    3720:	31 05       	cpc	r19, r1
    3722:	80 f4       	brcc	.+32     	; 0x3744 <malloc+0x9c>
    3724:	8a 81       	ldd	r24, Y+2	; 0x02
    3726:	9b 81       	ldd	r25, Y+3	; 0x03
    3728:	61 15       	cp	r22, r1
    372a:	71 05       	cpc	r23, r1
    372c:	21 f0       	breq	.+8      	; 0x3736 <malloc+0x8e>
    372e:	fb 01       	movw	r30, r22
    3730:	82 83       	std	Z+2, r24	; 0x02
    3732:	93 83       	std	Z+3, r25	; 0x03
    3734:	04 c0       	rjmp	.+8      	; 0x373e <malloc+0x96>
    3736:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <__flp>
    373a:	90 93 89 21 	sts	0x2189, r25	; 0x802189 <__flp+0x1>
    373e:	fe 01       	movw	r30, r28
    3740:	32 96       	adiw	r30, 0x02	; 2
    3742:	44 c0       	rjmp	.+136    	; 0x37cc <malloc+0x124>
    3744:	fe 01       	movw	r30, r28
    3746:	e2 0f       	add	r30, r18
    3748:	f3 1f       	adc	r31, r19
    374a:	81 93       	st	Z+, r24
    374c:	91 93       	st	Z+, r25
    374e:	22 50       	subi	r18, 0x02	; 2
    3750:	31 09       	sbc	r19, r1
    3752:	28 83       	st	Y, r18
    3754:	39 83       	std	Y+1, r19	; 0x01
    3756:	3a c0       	rjmp	.+116    	; 0x37cc <malloc+0x124>
    3758:	20 91 86 21 	lds	r18, 0x2186	; 0x802186 <__brkval>
    375c:	30 91 87 21 	lds	r19, 0x2187	; 0x802187 <__brkval+0x1>
    3760:	23 2b       	or	r18, r19
    3762:	41 f4       	brne	.+16     	; 0x3774 <malloc+0xcc>
    3764:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3768:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    376c:	20 93 86 21 	sts	0x2186, r18	; 0x802186 <__brkval>
    3770:	30 93 87 21 	sts	0x2187, r19	; 0x802187 <__brkval+0x1>
    3774:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3778:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    377c:	21 15       	cp	r18, r1
    377e:	31 05       	cpc	r19, r1
    3780:	41 f4       	brne	.+16     	; 0x3792 <malloc+0xea>
    3782:	2d b7       	in	r18, 0x3d	; 61
    3784:	3e b7       	in	r19, 0x3e	; 62
    3786:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    378a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    378e:	24 1b       	sub	r18, r20
    3790:	35 0b       	sbc	r19, r21
    3792:	e0 91 86 21 	lds	r30, 0x2186	; 0x802186 <__brkval>
    3796:	f0 91 87 21 	lds	r31, 0x2187	; 0x802187 <__brkval+0x1>
    379a:	e2 17       	cp	r30, r18
    379c:	f3 07       	cpc	r31, r19
    379e:	a0 f4       	brcc	.+40     	; 0x37c8 <malloc+0x120>
    37a0:	2e 1b       	sub	r18, r30
    37a2:	3f 0b       	sbc	r19, r31
    37a4:	28 17       	cp	r18, r24
    37a6:	39 07       	cpc	r19, r25
    37a8:	78 f0       	brcs	.+30     	; 0x37c8 <malloc+0x120>
    37aa:	ac 01       	movw	r20, r24
    37ac:	4e 5f       	subi	r20, 0xFE	; 254
    37ae:	5f 4f       	sbci	r21, 0xFF	; 255
    37b0:	24 17       	cp	r18, r20
    37b2:	35 07       	cpc	r19, r21
    37b4:	48 f0       	brcs	.+18     	; 0x37c8 <malloc+0x120>
    37b6:	4e 0f       	add	r20, r30
    37b8:	5f 1f       	adc	r21, r31
    37ba:	40 93 86 21 	sts	0x2186, r20	; 0x802186 <__brkval>
    37be:	50 93 87 21 	sts	0x2187, r21	; 0x802187 <__brkval+0x1>
    37c2:	81 93       	st	Z+, r24
    37c4:	91 93       	st	Z+, r25
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <malloc+0x124>
    37c8:	e0 e0       	ldi	r30, 0x00	; 0
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	cf 01       	movw	r24, r30
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	08 95       	ret

000037d8 <free>:
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	00 97       	sbiw	r24, 0x00	; 0
    37de:	09 f4       	brne	.+2      	; 0x37e2 <free+0xa>
    37e0:	81 c0       	rjmp	.+258    	; 0x38e4 <free+0x10c>
    37e2:	fc 01       	movw	r30, r24
    37e4:	32 97       	sbiw	r30, 0x02	; 2
    37e6:	12 82       	std	Z+2, r1	; 0x02
    37e8:	13 82       	std	Z+3, r1	; 0x03
    37ea:	a0 91 88 21 	lds	r26, 0x2188	; 0x802188 <__flp>
    37ee:	b0 91 89 21 	lds	r27, 0x2189	; 0x802189 <__flp+0x1>
    37f2:	10 97       	sbiw	r26, 0x00	; 0
    37f4:	81 f4       	brne	.+32     	; 0x3816 <free+0x3e>
    37f6:	20 81       	ld	r18, Z
    37f8:	31 81       	ldd	r19, Z+1	; 0x01
    37fa:	82 0f       	add	r24, r18
    37fc:	93 1f       	adc	r25, r19
    37fe:	20 91 86 21 	lds	r18, 0x2186	; 0x802186 <__brkval>
    3802:	30 91 87 21 	lds	r19, 0x2187	; 0x802187 <__brkval+0x1>
    3806:	28 17       	cp	r18, r24
    3808:	39 07       	cpc	r19, r25
    380a:	51 f5       	brne	.+84     	; 0x3860 <free+0x88>
    380c:	e0 93 86 21 	sts	0x2186, r30	; 0x802186 <__brkval>
    3810:	f0 93 87 21 	sts	0x2187, r31	; 0x802187 <__brkval+0x1>
    3814:	67 c0       	rjmp	.+206    	; 0x38e4 <free+0x10c>
    3816:	ed 01       	movw	r28, r26
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	ce 17       	cp	r28, r30
    381e:	df 07       	cpc	r29, r31
    3820:	40 f4       	brcc	.+16     	; 0x3832 <free+0x5a>
    3822:	4a 81       	ldd	r20, Y+2	; 0x02
    3824:	5b 81       	ldd	r21, Y+3	; 0x03
    3826:	9e 01       	movw	r18, r28
    3828:	41 15       	cp	r20, r1
    382a:	51 05       	cpc	r21, r1
    382c:	f1 f0       	breq	.+60     	; 0x386a <free+0x92>
    382e:	ea 01       	movw	r28, r20
    3830:	f5 cf       	rjmp	.-22     	; 0x381c <free+0x44>
    3832:	c2 83       	std	Z+2, r28	; 0x02
    3834:	d3 83       	std	Z+3, r29	; 0x03
    3836:	40 81       	ld	r20, Z
    3838:	51 81       	ldd	r21, Z+1	; 0x01
    383a:	84 0f       	add	r24, r20
    383c:	95 1f       	adc	r25, r21
    383e:	c8 17       	cp	r28, r24
    3840:	d9 07       	cpc	r29, r25
    3842:	59 f4       	brne	.+22     	; 0x385a <free+0x82>
    3844:	88 81       	ld	r24, Y
    3846:	99 81       	ldd	r25, Y+1	; 0x01
    3848:	84 0f       	add	r24, r20
    384a:	95 1f       	adc	r25, r21
    384c:	02 96       	adiw	r24, 0x02	; 2
    384e:	80 83       	st	Z, r24
    3850:	91 83       	std	Z+1, r25	; 0x01
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	9b 81       	ldd	r25, Y+3	; 0x03
    3856:	82 83       	std	Z+2, r24	; 0x02
    3858:	93 83       	std	Z+3, r25	; 0x03
    385a:	21 15       	cp	r18, r1
    385c:	31 05       	cpc	r19, r1
    385e:	29 f4       	brne	.+10     	; 0x386a <free+0x92>
    3860:	e0 93 88 21 	sts	0x2188, r30	; 0x802188 <__flp>
    3864:	f0 93 89 21 	sts	0x2189, r31	; 0x802189 <__flp+0x1>
    3868:	3d c0       	rjmp	.+122    	; 0x38e4 <free+0x10c>
    386a:	e9 01       	movw	r28, r18
    386c:	ea 83       	std	Y+2, r30	; 0x02
    386e:	fb 83       	std	Y+3, r31	; 0x03
    3870:	49 91       	ld	r20, Y+
    3872:	59 91       	ld	r21, Y+
    3874:	c4 0f       	add	r28, r20
    3876:	d5 1f       	adc	r29, r21
    3878:	ec 17       	cp	r30, r28
    387a:	fd 07       	cpc	r31, r29
    387c:	61 f4       	brne	.+24     	; 0x3896 <free+0xbe>
    387e:	80 81       	ld	r24, Z
    3880:	91 81       	ldd	r25, Z+1	; 0x01
    3882:	84 0f       	add	r24, r20
    3884:	95 1f       	adc	r25, r21
    3886:	02 96       	adiw	r24, 0x02	; 2
    3888:	e9 01       	movw	r28, r18
    388a:	88 83       	st	Y, r24
    388c:	99 83       	std	Y+1, r25	; 0x01
    388e:	82 81       	ldd	r24, Z+2	; 0x02
    3890:	93 81       	ldd	r25, Z+3	; 0x03
    3892:	8a 83       	std	Y+2, r24	; 0x02
    3894:	9b 83       	std	Y+3, r25	; 0x03
    3896:	e0 e0       	ldi	r30, 0x00	; 0
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	12 96       	adiw	r26, 0x02	; 2
    389c:	8d 91       	ld	r24, X+
    389e:	9c 91       	ld	r25, X
    38a0:	13 97       	sbiw	r26, 0x03	; 3
    38a2:	00 97       	sbiw	r24, 0x00	; 0
    38a4:	19 f0       	breq	.+6      	; 0x38ac <free+0xd4>
    38a6:	fd 01       	movw	r30, r26
    38a8:	dc 01       	movw	r26, r24
    38aa:	f7 cf       	rjmp	.-18     	; 0x389a <free+0xc2>
    38ac:	8d 91       	ld	r24, X+
    38ae:	9c 91       	ld	r25, X
    38b0:	11 97       	sbiw	r26, 0x01	; 1
    38b2:	9d 01       	movw	r18, r26
    38b4:	2e 5f       	subi	r18, 0xFE	; 254
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	82 0f       	add	r24, r18
    38ba:	93 1f       	adc	r25, r19
    38bc:	20 91 86 21 	lds	r18, 0x2186	; 0x802186 <__brkval>
    38c0:	30 91 87 21 	lds	r19, 0x2187	; 0x802187 <__brkval+0x1>
    38c4:	28 17       	cp	r18, r24
    38c6:	39 07       	cpc	r19, r25
    38c8:	69 f4       	brne	.+26     	; 0x38e4 <free+0x10c>
    38ca:	30 97       	sbiw	r30, 0x00	; 0
    38cc:	29 f4       	brne	.+10     	; 0x38d8 <free+0x100>
    38ce:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <__flp>
    38d2:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <__flp+0x1>
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <free+0x104>
    38d8:	12 82       	std	Z+2, r1	; 0x02
    38da:	13 82       	std	Z+3, r1	; 0x03
    38dc:	a0 93 86 21 	sts	0x2186, r26	; 0x802186 <__brkval>
    38e0:	b0 93 87 21 	sts	0x2187, r27	; 0x802187 <__brkval+0x1>
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	08 95       	ret

000038ea <isspace>:
    38ea:	91 11       	cpse	r25, r1
    38ec:	1f c1       	rjmp	.+574    	; 0x3b2c <__ctype_isfalse>
    38ee:	80 32       	cpi	r24, 0x20	; 32
    38f0:	19 f0       	breq	.+6      	; 0x38f8 <isspace+0xe>
    38f2:	89 50       	subi	r24, 0x09	; 9
    38f4:	85 50       	subi	r24, 0x05	; 5
    38f6:	d0 f7       	brcc	.-12     	; 0x38ec <isspace+0x2>
    38f8:	08 95       	ret

000038fa <strchr_P>:
    38fa:	fc 01       	movw	r30, r24
    38fc:	05 90       	lpm	r0, Z+
    38fe:	06 16       	cp	r0, r22
    3900:	21 f0       	breq	.+8      	; 0x390a <strchr_P+0x10>
    3902:	00 20       	and	r0, r0
    3904:	d9 f7       	brne	.-10     	; 0x38fc <strchr_P+0x2>
    3906:	c0 01       	movw	r24, r0
    3908:	08 95       	ret
    390a:	31 97       	sbiw	r30, 0x01	; 1
    390c:	cf 01       	movw	r24, r30
    390e:	08 95       	ret

00003910 <strnlen_P>:
    3910:	fc 01       	movw	r30, r24
    3912:	05 90       	lpm	r0, Z+
    3914:	61 50       	subi	r22, 0x01	; 1
    3916:	70 40       	sbci	r23, 0x00	; 0
    3918:	01 10       	cpse	r0, r1
    391a:	d8 f7       	brcc	.-10     	; 0x3912 <strnlen_P+0x2>
    391c:	80 95       	com	r24
    391e:	90 95       	com	r25
    3920:	8e 0f       	add	r24, r30
    3922:	9f 1f       	adc	r25, r31
    3924:	08 95       	ret

00003926 <memset>:
    3926:	dc 01       	movw	r26, r24
    3928:	01 c0       	rjmp	.+2      	; 0x392c <memset+0x6>
    392a:	6d 93       	st	X+, r22
    392c:	41 50       	subi	r20, 0x01	; 1
    392e:	50 40       	sbci	r21, 0x00	; 0
    3930:	e0 f7       	brcc	.-8      	; 0x392a <memset+0x4>
    3932:	08 95       	ret

00003934 <strnlen>:
    3934:	fc 01       	movw	r30, r24
    3936:	61 50       	subi	r22, 0x01	; 1
    3938:	70 40       	sbci	r23, 0x00	; 0
    393a:	01 90       	ld	r0, Z+
    393c:	01 10       	cpse	r0, r1
    393e:	d8 f7       	brcc	.-10     	; 0x3936 <strnlen+0x2>
    3940:	80 95       	com	r24
    3942:	90 95       	com	r25
    3944:	8e 0f       	add	r24, r30
    3946:	9f 1f       	adc	r25, r31
    3948:	08 95       	ret

0000394a <fgetc>:
    394a:	cf 93       	push	r28
    394c:	df 93       	push	r29
    394e:	ec 01       	movw	r28, r24
    3950:	2b 81       	ldd	r18, Y+3	; 0x03
    3952:	20 ff       	sbrs	r18, 0
    3954:	33 c0       	rjmp	.+102    	; 0x39bc <fgetc+0x72>
    3956:	26 ff       	sbrs	r18, 6
    3958:	0a c0       	rjmp	.+20     	; 0x396e <fgetc+0x24>
    395a:	2f 7b       	andi	r18, 0xBF	; 191
    395c:	2b 83       	std	Y+3, r18	; 0x03
    395e:	8e 81       	ldd	r24, Y+6	; 0x06
    3960:	9f 81       	ldd	r25, Y+7	; 0x07
    3962:	01 96       	adiw	r24, 0x01	; 1
    3964:	8e 83       	std	Y+6, r24	; 0x06
    3966:	9f 83       	std	Y+7, r25	; 0x07
    3968:	8a 81       	ldd	r24, Y+2	; 0x02
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	29 c0       	rjmp	.+82     	; 0x39c0 <fgetc+0x76>
    396e:	22 ff       	sbrs	r18, 2
    3970:	0f c0       	rjmp	.+30     	; 0x3990 <fgetc+0x46>
    3972:	e8 81       	ld	r30, Y
    3974:	f9 81       	ldd	r31, Y+1	; 0x01
    3976:	80 81       	ld	r24, Z
    3978:	08 2e       	mov	r0, r24
    397a:	00 0c       	add	r0, r0
    397c:	99 0b       	sbc	r25, r25
    397e:	00 97       	sbiw	r24, 0x00	; 0
    3980:	19 f4       	brne	.+6      	; 0x3988 <fgetc+0x3e>
    3982:	20 62       	ori	r18, 0x20	; 32
    3984:	2b 83       	std	Y+3, r18	; 0x03
    3986:	1a c0       	rjmp	.+52     	; 0x39bc <fgetc+0x72>
    3988:	31 96       	adiw	r30, 0x01	; 1
    398a:	e8 83       	st	Y, r30
    398c:	f9 83       	std	Y+1, r31	; 0x01
    398e:	0e c0       	rjmp	.+28     	; 0x39ac <fgetc+0x62>
    3990:	ea 85       	ldd	r30, Y+10	; 0x0a
    3992:	fb 85       	ldd	r31, Y+11	; 0x0b
    3994:	19 95       	eicall
    3996:	97 ff       	sbrs	r25, 7
    3998:	09 c0       	rjmp	.+18     	; 0x39ac <fgetc+0x62>
    399a:	2b 81       	ldd	r18, Y+3	; 0x03
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	11 f0       	breq	.+4      	; 0x39a4 <fgetc+0x5a>
    39a0:	80 e2       	ldi	r24, 0x20	; 32
    39a2:	01 c0       	rjmp	.+2      	; 0x39a6 <fgetc+0x5c>
    39a4:	80 e1       	ldi	r24, 0x10	; 16
    39a6:	82 2b       	or	r24, r18
    39a8:	8b 83       	std	Y+3, r24	; 0x03
    39aa:	08 c0       	rjmp	.+16     	; 0x39bc <fgetc+0x72>
    39ac:	2e 81       	ldd	r18, Y+6	; 0x06
    39ae:	3f 81       	ldd	r19, Y+7	; 0x07
    39b0:	2f 5f       	subi	r18, 0xFF	; 255
    39b2:	3f 4f       	sbci	r19, 0xFF	; 255
    39b4:	2e 83       	std	Y+6, r18	; 0x06
    39b6:	3f 83       	std	Y+7, r19	; 0x07
    39b8:	99 27       	eor	r25, r25
    39ba:	02 c0       	rjmp	.+4      	; 0x39c0 <fgetc+0x76>
    39bc:	8f ef       	ldi	r24, 0xFF	; 255
    39be:	9f ef       	ldi	r25, 0xFF	; 255
    39c0:	df 91       	pop	r29
    39c2:	cf 91       	pop	r28
    39c4:	08 95       	ret

000039c6 <fputc>:
    39c6:	0f 93       	push	r16
    39c8:	1f 93       	push	r17
    39ca:	cf 93       	push	r28
    39cc:	df 93       	push	r29
    39ce:	fb 01       	movw	r30, r22
    39d0:	23 81       	ldd	r18, Z+3	; 0x03
    39d2:	21 fd       	sbrc	r18, 1
    39d4:	03 c0       	rjmp	.+6      	; 0x39dc <fputc+0x16>
    39d6:	8f ef       	ldi	r24, 0xFF	; 255
    39d8:	9f ef       	ldi	r25, 0xFF	; 255
    39da:	2c c0       	rjmp	.+88     	; 0x3a34 <fputc+0x6e>
    39dc:	22 ff       	sbrs	r18, 2
    39de:	16 c0       	rjmp	.+44     	; 0x3a0c <fputc+0x46>
    39e0:	46 81       	ldd	r20, Z+6	; 0x06
    39e2:	57 81       	ldd	r21, Z+7	; 0x07
    39e4:	24 81       	ldd	r18, Z+4	; 0x04
    39e6:	35 81       	ldd	r19, Z+5	; 0x05
    39e8:	42 17       	cp	r20, r18
    39ea:	53 07       	cpc	r21, r19
    39ec:	44 f4       	brge	.+16     	; 0x39fe <fputc+0x38>
    39ee:	a0 81       	ld	r26, Z
    39f0:	b1 81       	ldd	r27, Z+1	; 0x01
    39f2:	9d 01       	movw	r18, r26
    39f4:	2f 5f       	subi	r18, 0xFF	; 255
    39f6:	3f 4f       	sbci	r19, 0xFF	; 255
    39f8:	20 83       	st	Z, r18
    39fa:	31 83       	std	Z+1, r19	; 0x01
    39fc:	8c 93       	st	X, r24
    39fe:	26 81       	ldd	r18, Z+6	; 0x06
    3a00:	37 81       	ldd	r19, Z+7	; 0x07
    3a02:	2f 5f       	subi	r18, 0xFF	; 255
    3a04:	3f 4f       	sbci	r19, 0xFF	; 255
    3a06:	26 83       	std	Z+6, r18	; 0x06
    3a08:	37 83       	std	Z+7, r19	; 0x07
    3a0a:	14 c0       	rjmp	.+40     	; 0x3a34 <fputc+0x6e>
    3a0c:	8b 01       	movw	r16, r22
    3a0e:	ec 01       	movw	r28, r24
    3a10:	fb 01       	movw	r30, r22
    3a12:	00 84       	ldd	r0, Z+8	; 0x08
    3a14:	f1 85       	ldd	r31, Z+9	; 0x09
    3a16:	e0 2d       	mov	r30, r0
    3a18:	19 95       	eicall
    3a1a:	89 2b       	or	r24, r25
    3a1c:	e1 f6       	brne	.-72     	; 0x39d6 <fputc+0x10>
    3a1e:	d8 01       	movw	r26, r16
    3a20:	16 96       	adiw	r26, 0x06	; 6
    3a22:	8d 91       	ld	r24, X+
    3a24:	9c 91       	ld	r25, X
    3a26:	17 97       	sbiw	r26, 0x07	; 7
    3a28:	01 96       	adiw	r24, 0x01	; 1
    3a2a:	16 96       	adiw	r26, 0x06	; 6
    3a2c:	8d 93       	st	X+, r24
    3a2e:	9c 93       	st	X, r25
    3a30:	17 97       	sbiw	r26, 0x07	; 7
    3a32:	ce 01       	movw	r24, r28
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	08 95       	ret

00003a3e <ungetc>:
    3a3e:	fb 01       	movw	r30, r22
    3a40:	23 81       	ldd	r18, Z+3	; 0x03
    3a42:	20 ff       	sbrs	r18, 0
    3a44:	12 c0       	rjmp	.+36     	; 0x3a6a <ungetc+0x2c>
    3a46:	26 fd       	sbrc	r18, 6
    3a48:	10 c0       	rjmp	.+32     	; 0x3a6a <ungetc+0x2c>
    3a4a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a4c:	3f ef       	ldi	r19, 0xFF	; 255
    3a4e:	93 07       	cpc	r25, r19
    3a50:	61 f0       	breq	.+24     	; 0x3a6a <ungetc+0x2c>
    3a52:	82 83       	std	Z+2, r24	; 0x02
    3a54:	2f 7d       	andi	r18, 0xDF	; 223
    3a56:	20 64       	ori	r18, 0x40	; 64
    3a58:	23 83       	std	Z+3, r18	; 0x03
    3a5a:	26 81       	ldd	r18, Z+6	; 0x06
    3a5c:	37 81       	ldd	r19, Z+7	; 0x07
    3a5e:	21 50       	subi	r18, 0x01	; 1
    3a60:	31 09       	sbc	r19, r1
    3a62:	26 83       	std	Z+6, r18	; 0x06
    3a64:	37 83       	std	Z+7, r19	; 0x07
    3a66:	99 27       	eor	r25, r25
    3a68:	08 95       	ret
    3a6a:	8f ef       	ldi	r24, 0xFF	; 255
    3a6c:	9f ef       	ldi	r25, 0xFF	; 255
    3a6e:	08 95       	ret

00003a70 <__ultoa_invert>:
    3a70:	fa 01       	movw	r30, r20
    3a72:	aa 27       	eor	r26, r26
    3a74:	28 30       	cpi	r18, 0x08	; 8
    3a76:	51 f1       	breq	.+84     	; 0x3acc <__ultoa_invert+0x5c>
    3a78:	20 31       	cpi	r18, 0x10	; 16
    3a7a:	81 f1       	breq	.+96     	; 0x3adc <__ultoa_invert+0x6c>
    3a7c:	e8 94       	clt
    3a7e:	6f 93       	push	r22
    3a80:	6e 7f       	andi	r22, 0xFE	; 254
    3a82:	6e 5f       	subi	r22, 0xFE	; 254
    3a84:	7f 4f       	sbci	r23, 0xFF	; 255
    3a86:	8f 4f       	sbci	r24, 0xFF	; 255
    3a88:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8a:	af 4f       	sbci	r26, 0xFF	; 255
    3a8c:	b1 e0       	ldi	r27, 0x01	; 1
    3a8e:	3e d0       	rcall	.+124    	; 0x3b0c <__ultoa_invert+0x9c>
    3a90:	b4 e0       	ldi	r27, 0x04	; 4
    3a92:	3c d0       	rcall	.+120    	; 0x3b0c <__ultoa_invert+0x9c>
    3a94:	67 0f       	add	r22, r23
    3a96:	78 1f       	adc	r23, r24
    3a98:	89 1f       	adc	r24, r25
    3a9a:	9a 1f       	adc	r25, r26
    3a9c:	a1 1d       	adc	r26, r1
    3a9e:	68 0f       	add	r22, r24
    3aa0:	79 1f       	adc	r23, r25
    3aa2:	8a 1f       	adc	r24, r26
    3aa4:	91 1d       	adc	r25, r1
    3aa6:	a1 1d       	adc	r26, r1
    3aa8:	6a 0f       	add	r22, r26
    3aaa:	71 1d       	adc	r23, r1
    3aac:	81 1d       	adc	r24, r1
    3aae:	91 1d       	adc	r25, r1
    3ab0:	a1 1d       	adc	r26, r1
    3ab2:	20 d0       	rcall	.+64     	; 0x3af4 <__ultoa_invert+0x84>
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <__ultoa_invert+0x48>
    3ab6:	68 94       	set
    3ab8:	3f 91       	pop	r19
    3aba:	2a e0       	ldi	r18, 0x0A	; 10
    3abc:	26 9f       	mul	r18, r22
    3abe:	11 24       	eor	r1, r1
    3ac0:	30 19       	sub	r19, r0
    3ac2:	30 5d       	subi	r19, 0xD0	; 208
    3ac4:	31 93       	st	Z+, r19
    3ac6:	de f6       	brtc	.-74     	; 0x3a7e <__ultoa_invert+0xe>
    3ac8:	cf 01       	movw	r24, r30
    3aca:	08 95       	ret
    3acc:	46 2f       	mov	r20, r22
    3ace:	47 70       	andi	r20, 0x07	; 7
    3ad0:	40 5d       	subi	r20, 0xD0	; 208
    3ad2:	41 93       	st	Z+, r20
    3ad4:	b3 e0       	ldi	r27, 0x03	; 3
    3ad6:	0f d0       	rcall	.+30     	; 0x3af6 <__ultoa_invert+0x86>
    3ad8:	c9 f7       	brne	.-14     	; 0x3acc <__ultoa_invert+0x5c>
    3ada:	f6 cf       	rjmp	.-20     	; 0x3ac8 <__ultoa_invert+0x58>
    3adc:	46 2f       	mov	r20, r22
    3ade:	4f 70       	andi	r20, 0x0F	; 15
    3ae0:	40 5d       	subi	r20, 0xD0	; 208
    3ae2:	4a 33       	cpi	r20, 0x3A	; 58
    3ae4:	18 f0       	brcs	.+6      	; 0x3aec <__ultoa_invert+0x7c>
    3ae6:	49 5d       	subi	r20, 0xD9	; 217
    3ae8:	31 fd       	sbrc	r19, 1
    3aea:	40 52       	subi	r20, 0x20	; 32
    3aec:	41 93       	st	Z+, r20
    3aee:	02 d0       	rcall	.+4      	; 0x3af4 <__ultoa_invert+0x84>
    3af0:	a9 f7       	brne	.-22     	; 0x3adc <__ultoa_invert+0x6c>
    3af2:	ea cf       	rjmp	.-44     	; 0x3ac8 <__ultoa_invert+0x58>
    3af4:	b4 e0       	ldi	r27, 0x04	; 4
    3af6:	a6 95       	lsr	r26
    3af8:	97 95       	ror	r25
    3afa:	87 95       	ror	r24
    3afc:	77 95       	ror	r23
    3afe:	67 95       	ror	r22
    3b00:	ba 95       	dec	r27
    3b02:	c9 f7       	brne	.-14     	; 0x3af6 <__ultoa_invert+0x86>
    3b04:	00 97       	sbiw	r24, 0x00	; 0
    3b06:	61 05       	cpc	r22, r1
    3b08:	71 05       	cpc	r23, r1
    3b0a:	08 95       	ret
    3b0c:	9b 01       	movw	r18, r22
    3b0e:	ac 01       	movw	r20, r24
    3b10:	0a 2e       	mov	r0, r26
    3b12:	06 94       	lsr	r0
    3b14:	57 95       	ror	r21
    3b16:	47 95       	ror	r20
    3b18:	37 95       	ror	r19
    3b1a:	27 95       	ror	r18
    3b1c:	ba 95       	dec	r27
    3b1e:	c9 f7       	brne	.-14     	; 0x3b12 <__ultoa_invert+0xa2>
    3b20:	62 0f       	add	r22, r18
    3b22:	73 1f       	adc	r23, r19
    3b24:	84 1f       	adc	r24, r20
    3b26:	95 1f       	adc	r25, r21
    3b28:	a0 1d       	adc	r26, r0
    3b2a:	08 95       	ret

00003b2c <__ctype_isfalse>:
    3b2c:	99 27       	eor	r25, r25
    3b2e:	88 27       	eor	r24, r24

00003b30 <__ctype_istrue>:
    3b30:	08 95       	ret

00003b32 <_exit>:
    3b32:	f8 94       	cli

00003b34 <__stop_program>:
    3b34:	ff cf       	rjmp	.-2      	; 0x3b34 <__stop_program>
