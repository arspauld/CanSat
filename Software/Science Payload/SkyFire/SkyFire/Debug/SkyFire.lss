
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00802000  00003b48  00003bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  008020b6  008020b6  00003c92  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00003d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000145ca  00000000  00000000  00004218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b02  00000000  00000000  000187e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008ea7  00000000  00000000  0001d2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000109c  00000000  00000000  0002618c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d405  00000000  00000000  00027228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000463b  00000000  00000000  0005462d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  00058c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000355b  00000000  00000000  000590f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__vector_47>
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f6 c0       	rjmp	.+492    	; 0x2d6 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
     102:	00 00       	nop
     104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
     106:	00 00       	nop
     108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
     112:	00 00       	nop
     114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
     116:	00 00       	nop
     118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
     136:	00 00       	nop
     138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
     142:	00 00       	nop
     144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
     146:	00 00       	nop
     148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
     152:	00 00       	nop
     154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
     156:	00 00       	nop
     158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
     162:	00 00       	nop
     164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
     166:	00 00       	nop
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__vector_91>
     170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
     172:	00 00       	nop
     174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
     176:	00 00       	nop
     178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
     182:	00 00       	nop
     184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
     186:	00 00       	nop
     188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
     192:	00 00       	nop
     194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
     196:	00 00       	nop
     198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6e c0       	rjmp	.+220    	; 0x2d6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <ms5607_convert_d2+0x14>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	63 64       	ori	r22, 0x43	; 67
     280:	69 6e       	ori	r22, 0xE9	; 233
     282:	6f 70       	andi	r22, 0x0F	; 15
     284:	73 75       	andi	r23, 0x53	; 83
     286:	78 58       	subi	r23, 0x88	; 136
     288:	5b 00       	.word	0x005b	; ????

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df e3       	ldi	r29, 0x3F	; 63
     294:	de bf       	out	0x3e, r29	; 62
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0c bf       	out	0x3c, r16	; 60
     29a:	18 be       	out	0x38, r1	; 56
     29c:	19 be       	out	0x39, r1	; 57
     29e:	1a be       	out	0x3a, r1	; 58
     2a0:	1b be       	out	0x3b, r1	; 59

000002a2 <__do_copy_data>:
     2a2:	10 e2       	ldi	r17, 0x20	; 32
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e2       	ldi	r27, 0x20	; 32
     2a8:	e8 e4       	ldi	r30, 0x48	; 72
     2aa:	fb e3       	ldi	r31, 0x3B	; 59
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	a6 3b       	cpi	r26, 0xB6	; 182
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>
     2bc:	1b be       	out	0x3b, r1	; 59

000002be <__do_clear_bss>:
     2be:	21 e2       	ldi	r18, 0x21	; 33
     2c0:	a6 eb       	ldi	r26, 0xB6	; 182
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	a2 39       	cpi	r26, 0x92	; 146
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 20 0c 	call	0x1840	; 0x1840 <main>
     2d2:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2e2:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <stdio_base>
     2e6:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <stdio_base+0x1>
     2ea:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <ptr_get>
     2ee:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <ptr_get+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	19 95       	eicall
	return c;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     30a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     30c:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <stdio_base>
     310:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <stdio_base+0x1>
     314:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <ptr_put>
     318:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <ptr_put+0x1>
     31c:	19 95       	eicall
     31e:	99 23       	and	r25, r25
     320:	1c f0       	brlt	.+6      	; 0x328 <_write+0x1e>
		return -1;
	}
	return 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <adca_callback>
     36e:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <adca_callback>
     3e8:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <adca_callback>
     462:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <adca_callback>
     4dc:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     516:	fc 01       	movw	r30, r24
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	95 ff       	sbrs	r25, 5
     51c:	fd cf       	rjmp	.-6      	; 0x518 <usart_putchar+0x2>
     51e:	60 83       	st	Z, r22
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <usart_getchar>:
     526:	fc 01       	movw	r30, r24
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	99 23       	and	r25, r25
     52c:	ec f7       	brge	.-6      	; 0x528 <usart_getchar+0x2>
     52e:	80 81       	ld	r24, Z
     530:	08 95       	ret

00000532 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     532:	4f 92       	push	r4
     534:	5f 92       	push	r5
     536:	6f 92       	push	r6
     538:	7f 92       	push	r7
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	7c 01       	movw	r14, r24
     54e:	4a 01       	movw	r8, r20
     550:	5b 01       	movw	r10, r22
     552:	28 01       	movw	r4, r16
     554:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     556:	fc 01       	movw	r30, r24
     558:	84 81       	ldd	r24, Z+4	; 0x04
     55a:	82 ff       	sbrs	r24, 2
     55c:	16 c0       	rjmp	.+44     	; 0x58a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     55e:	d9 01       	movw	r26, r18
     560:	c8 01       	movw	r24, r16
     562:	68 94       	set
     564:	12 f8       	bld	r1, 2
     566:	b6 95       	lsr	r27
     568:	a7 95       	ror	r26
     56a:	97 95       	ror	r25
     56c:	87 95       	ror	r24
     56e:	16 94       	lsr	r1
     570:	d1 f7       	brne	.-12     	; 0x566 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     572:	b9 01       	movw	r22, r18
     574:	a8 01       	movw	r20, r16
     576:	03 2e       	mov	r0, r19
     578:	36 e1       	ldi	r19, 0x16	; 22
     57a:	76 95       	lsr	r23
     57c:	67 95       	ror	r22
     57e:	57 95       	ror	r21
     580:	47 95       	ror	r20
     582:	3a 95       	dec	r19
     584:	d1 f7       	brne	.-12     	; 0x57a <usart_set_baudrate+0x48>
     586:	30 2d       	mov	r19, r0
     588:	15 c0       	rjmp	.+42     	; 0x5b4 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     58a:	d9 01       	movw	r26, r18
     58c:	c8 01       	movw	r24, r16
     58e:	68 94       	set
     590:	13 f8       	bld	r1, 3
     592:	b6 95       	lsr	r27
     594:	a7 95       	ror	r26
     596:	97 95       	ror	r25
     598:	87 95       	ror	r24
     59a:	16 94       	lsr	r1
     59c:	d1 f7       	brne	.-12     	; 0x592 <usart_set_baudrate+0x60>
		min_rate /= 2;
     59e:	b9 01       	movw	r22, r18
     5a0:	a8 01       	movw	r20, r16
     5a2:	03 2e       	mov	r0, r19
     5a4:	37 e1       	ldi	r19, 0x17	; 23
     5a6:	76 95       	lsr	r23
     5a8:	67 95       	ror	r22
     5aa:	57 95       	ror	r21
     5ac:	47 95       	ror	r20
     5ae:	3a 95       	dec	r19
     5b0:	d1 f7       	brne	.-12     	; 0x5a6 <usart_set_baudrate+0x74>
     5b2:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     5b4:	88 15       	cp	r24, r8
     5b6:	99 05       	cpc	r25, r9
     5b8:	aa 05       	cpc	r26, r10
     5ba:	bb 05       	cpc	r27, r11
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <usart_set_baudrate+0x8e>
     5be:	a6 c0       	rjmp	.+332    	; 0x70c <usart_set_baudrate+0x1da>
     5c0:	84 16       	cp	r8, r20
     5c2:	95 06       	cpc	r9, r21
     5c4:	a6 06       	cpc	r10, r22
     5c6:	b7 06       	cpc	r11, r23
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <usart_set_baudrate+0x9a>
     5ca:	a2 c0       	rjmp	.+324    	; 0x710 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5cc:	f7 01       	movw	r30, r14
     5ce:	84 81       	ldd	r24, Z+4	; 0x04
     5d0:	82 fd       	sbrc	r24, 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <usart_set_baudrate+0xaa>
		baud *= 2;
     5d4:	88 0c       	add	r8, r8
     5d6:	99 1c       	adc	r9, r9
     5d8:	aa 1c       	adc	r10, r10
     5da:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     5dc:	c3 01       	movw	r24, r6
     5de:	b2 01       	movw	r22, r4
     5e0:	a5 01       	movw	r20, r10
     5e2:	94 01       	movw	r18, r8
     5e4:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     5e8:	2f 3f       	cpi	r18, 0xFF	; 255
     5ea:	31 05       	cpc	r19, r1
     5ec:	41 05       	cpc	r20, r1
     5ee:	51 05       	cpc	r21, r1
     5f0:	08 f4       	brcc	.+2      	; 0x5f4 <usart_set_baudrate+0xc2>
     5f2:	90 c0       	rjmp	.+288    	; 0x714 <usart_set_baudrate+0x1e2>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e0       	ldi	r26, 0x00	; 0
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	c9 ef       	ldi	r28, 0xF9	; 249
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <usart_set_baudrate+0xd8>
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	4a 07       	cpc	r20, r26
     606:	5b 07       	cpc	r21, r27
     608:	58 f0       	brcs	.+22     	; 0x620 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	aa 1f       	adc	r26, r26
     610:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     612:	cd 3f       	cpi	r28, 0xFD	; 253
     614:	0c f4       	brge	.+2      	; 0x618 <usart_set_baudrate+0xe6>
			limit |= 1;
     616:	81 60       	ori	r24, 0x01	; 1
     618:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     61a:	c7 30       	cpi	r28, 0x07	; 7
     61c:	89 f7       	brne	.-30     	; 0x600 <usart_set_baudrate+0xce>
     61e:	4f c0       	rjmp	.+158    	; 0x6be <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     620:	cc 23       	and	r28, r28
     622:	0c f0       	brlt	.+2      	; 0x626 <usart_set_baudrate+0xf4>
     624:	4c c0       	rjmp	.+152    	; 0x6be <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     626:	d5 01       	movw	r26, r10
     628:	c4 01       	movw	r24, r8
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	aa 1f       	adc	r26, r26
     630:	bb 1f       	adc	r27, r27
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	aa 1f       	adc	r26, r26
     638:	bb 1f       	adc	r27, r27
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	aa 1f       	adc	r26, r26
     640:	bb 1f       	adc	r27, r27
     642:	48 1a       	sub	r4, r24
     644:	59 0a       	sbc	r5, r25
     646:	6a 0a       	sbc	r6, r26
     648:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     64a:	ce 3f       	cpi	r28, 0xFE	; 254
     64c:	f4 f4       	brge	.+60     	; 0x68a <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     64e:	8d ef       	ldi	r24, 0xFD	; 253
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	8c 1b       	sub	r24, r28
     654:	91 09       	sbc	r25, r1
     656:	c7 fd       	sbrc	r28, 7
     658:	93 95       	inc	r25
     65a:	04 c0       	rjmp	.+8      	; 0x664 <usart_set_baudrate+0x132>
     65c:	44 0c       	add	r4, r4
     65e:	55 1c       	adc	r5, r5
     660:	66 1c       	adc	r6, r6
     662:	77 1c       	adc	r7, r7
     664:	8a 95       	dec	r24
     666:	d2 f7       	brpl	.-12     	; 0x65c <usart_set_baudrate+0x12a>
     668:	d5 01       	movw	r26, r10
     66a:	c4 01       	movw	r24, r8
     66c:	b6 95       	lsr	r27
     66e:	a7 95       	ror	r26
     670:	97 95       	ror	r25
     672:	87 95       	ror	r24
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	64 0d       	add	r22, r4
     67a:	75 1d       	adc	r23, r5
     67c:	86 1d       	adc	r24, r6
     67e:	97 1d       	adc	r25, r7
     680:	a5 01       	movw	r20, r10
     682:	94 01       	movw	r18, r8
     684:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodsi4>
     688:	37 c0       	rjmp	.+110    	; 0x6f8 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	8c 0f       	add	r24, r28
     68e:	a5 01       	movw	r20, r10
     690:	94 01       	movw	r18, r8
     692:	04 c0       	rjmp	.+8      	; 0x69c <usart_set_baudrate+0x16a>
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	44 1f       	adc	r20, r20
     69a:	55 1f       	adc	r21, r21
     69c:	8a 95       	dec	r24
     69e:	d2 f7       	brpl	.-12     	; 0x694 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     6a0:	da 01       	movw	r26, r20
     6a2:	c9 01       	movw	r24, r18
     6a4:	b6 95       	lsr	r27
     6a6:	a7 95       	ror	r26
     6a8:	97 95       	ror	r25
     6aa:	87 95       	ror	r24
     6ac:	bc 01       	movw	r22, r24
     6ae:	cd 01       	movw	r24, r26
     6b0:	64 0d       	add	r22, r4
     6b2:	75 1d       	adc	r23, r5
     6b4:	86 1d       	adc	r24, r6
     6b6:	97 1d       	adc	r25, r7
     6b8:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodsi4>
     6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	8c 0f       	add	r24, r28
     6c2:	a5 01       	movw	r20, r10
     6c4:	94 01       	movw	r18, r8
     6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <usart_set_baudrate+0x19e>
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	44 1f       	adc	r20, r20
     6ce:	55 1f       	adc	r21, r21
     6d0:	8a 95       	dec	r24
     6d2:	d2 f7       	brpl	.-12     	; 0x6c8 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     6d4:	da 01       	movw	r26, r20
     6d6:	c9 01       	movw	r24, r18
     6d8:	b6 95       	lsr	r27
     6da:	a7 95       	ror	r26
     6dc:	97 95       	ror	r25
     6de:	87 95       	ror	r24
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	64 0d       	add	r22, r4
     6e6:	75 1d       	adc	r23, r5
     6e8:	86 1d       	adc	r24, r6
     6ea:	97 1d       	adc	r25, r7
     6ec:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodsi4>
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	31 09       	sbc	r19, r1
     6f4:	41 09       	sbc	r20, r1
     6f6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     6f8:	83 2f       	mov	r24, r19
     6fa:	8f 70       	andi	r24, 0x0F	; 15
     6fc:	c2 95       	swap	r28
     6fe:	c0 7f       	andi	r28, 0xF0	; 240
     700:	c8 2b       	or	r28, r24
     702:	f7 01       	movw	r30, r14
     704:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     706:	26 83       	std	Z+6, r18	; 0x06

	return true;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	18 c0       	rjmp	.+48     	; 0x73c <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	16 c0       	rjmp	.+44     	; 0x73c <usart_set_baudrate+0x20a>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	14 c0       	rjmp	.+40     	; 0x73c <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     714:	d5 01       	movw	r26, r10
     716:	c4 01       	movw	r24, r8
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	aa 1f       	adc	r26, r26
     71e:	bb 1f       	adc	r27, r27
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	aa 1f       	adc	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	aa 1f       	adc	r26, r26
     72e:	bb 1f       	adc	r27, r27
     730:	48 1a       	sub	r4, r24
     732:	59 0a       	sbc	r5, r25
     734:	6a 0a       	sbc	r6, r26
     736:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     738:	c9 ef       	ldi	r28, 0xF9	; 249
     73a:	89 cf       	rjmp	.-238    	; 0x64e <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	7f 90       	pop	r7
     750:	6f 90       	pop	r6
     752:	5f 90       	pop	r5
     754:	4f 90       	pop	r4
     756:	08 95       	ret

00000758 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	09 f4       	brne	.+2      	; 0x76a <usart_init_rs232+0x12>
     768:	be c0       	rjmp	.+380    	; 0x8e6 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     76a:	80 3c       	cpi	r24, 0xC0	; 192
     76c:	91 05       	cpc	r25, r1
     76e:	21 f4       	brne	.+8      	; 0x778 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     770:	60 e1       	ldi	r22, 0x10	; 16
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	78 d3       	rcall	.+1776   	; 0xe66 <sysclk_enable_module>
     776:	b7 c0       	rjmp	.+366    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     778:	c1 15       	cp	r28, r1
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	d8 07       	cpc	r29, r24
     77e:	21 f4       	brne	.+8      	; 0x788 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     780:	64 e0       	ldi	r22, 0x04	; 4
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	70 d3       	rcall	.+1760   	; 0xe66 <sysclk_enable_module>
     786:	af c0       	rjmp	.+350    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     788:	c0 38       	cpi	r28, 0x80	; 128
     78a:	e1 e0       	ldi	r30, 0x01	; 1
     78c:	de 07       	cpc	r29, r30
     78e:	21 f4       	brne	.+8      	; 0x798 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     790:	62 e0       	ldi	r22, 0x02	; 2
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	68 d3       	rcall	.+1744   	; 0xe66 <sysclk_enable_module>
     796:	a7 c0       	rjmp	.+334    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     798:	c1 15       	cp	r28, r1
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     79e:	21 f4       	brne	.+8      	; 0x7a8 <usart_init_rs232+0x50>
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	60 d3       	rcall	.+1728   	; 0xe66 <sysclk_enable_module>
     7a6:	9f c0       	rjmp	.+318    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     7a8:	c0 38       	cpi	r28, 0x80	; 128
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <usart_init_rs232+0x60>
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	58 d3       	rcall	.+1712   	; 0xe66 <sysclk_enable_module>
     7b6:	97 c0       	rjmp	.+302    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     7b8:	c1 15       	cp	r28, r1
     7ba:	e2 e0       	ldi	r30, 0x02	; 2
     7bc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     7be:	21 f4       	brne	.+8      	; 0x7c8 <usart_init_rs232+0x70>
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	50 d3       	rcall	.+1696   	; 0xe66 <sysclk_enable_module>
     7c6:	8f c0       	rjmp	.+286    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     7c8:	c0 32       	cpi	r28, 0x20	; 32
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     7ce:	21 f4       	brne	.+8      	; 0x7d8 <usart_init_rs232+0x80>
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	48 d3       	rcall	.+1680   	; 0xe66 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     7d6:	87 c0       	rjmp	.+270    	; 0x8e6 <usart_init_rs232+0x18e>
     7d8:	c1 15       	cp	r28, r1
     7da:	88 e0       	ldi	r24, 0x08	; 8
     7dc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     7de:	21 f4       	brne	.+8      	; 0x7e8 <usart_init_rs232+0x90>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	40 d3       	rcall	.+1664   	; 0xe66 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     7e6:	7f c0       	rjmp	.+254    	; 0x8e6 <usart_init_rs232+0x18e>
     7e8:	c1 15       	cp	r28, r1
     7ea:	e9 e0       	ldi	r30, 0x09	; 9
     7ec:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <usart_init_rs232+0xa0>
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	38 d3       	rcall	.+1648   	; 0xe66 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     7f6:	77 c0       	rjmp	.+238    	; 0x8e6 <usart_init_rs232+0x18e>
     7f8:	c1 15       	cp	r28, r1
     7fa:	fa e0       	ldi	r31, 0x0A	; 10
     7fc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     7fe:	21 f4       	brne	.+8      	; 0x808 <usart_init_rs232+0xb0>
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	30 d3       	rcall	.+1632   	; 0xe66 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     806:	6f c0       	rjmp	.+222    	; 0x8e6 <usart_init_rs232+0x18e>
     808:	c0 34       	cpi	r28, 0x40	; 64
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     80e:	21 f4       	brne	.+8      	; 0x818 <usart_init_rs232+0xc0>
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	28 d3       	rcall	.+1616   	; 0xe66 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     816:	67 c0       	rjmp	.+206    	; 0x8e6 <usart_init_rs232+0x18e>
     818:	c0 34       	cpi	r28, 0x40	; 64
     81a:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     81c:	de 07       	cpc	r29, r30
     81e:	21 f4       	brne	.+8      	; 0x828 <usart_init_rs232+0xd0>
     820:	62 e0       	ldi	r22, 0x02	; 2
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	20 d3       	rcall	.+1600   	; 0xe66 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     826:	5f c0       	rjmp	.+190    	; 0x8e6 <usart_init_rs232+0x18e>
     828:	c0 39       	cpi	r28, 0x90	; 144
     82a:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     82c:	df 07       	cpc	r29, r31
     82e:	21 f4       	brne	.+8      	; 0x838 <usart_init_rs232+0xe0>
     830:	64 e0       	ldi	r22, 0x04	; 4
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	18 d3       	rcall	.+1584   	; 0xe66 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     836:	57 c0       	rjmp	.+174    	; 0x8e6 <usart_init_rs232+0x18e>
     838:	c0 39       	cpi	r28, 0x90	; 144
     83a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     83c:	d8 07       	cpc	r29, r24
     83e:	21 f4       	brne	.+8      	; 0x848 <usart_init_rs232+0xf0>
     840:	64 e0       	ldi	r22, 0x04	; 4
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	10 d3       	rcall	.+1568   	; 0xe66 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     846:	4f c0       	rjmp	.+158    	; 0x8e6 <usart_init_rs232+0x18e>
     848:	c0 39       	cpi	r28, 0x90	; 144
     84a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     84c:	de 07       	cpc	r29, r30
     84e:	21 f4       	brne	.+8      	; 0x858 <usart_init_rs232+0x100>
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     854:	08 d3       	rcall	.+1552   	; 0xe66 <sysclk_enable_module>
     856:	47 c0       	rjmp	.+142    	; 0x8e6 <usart_init_rs232+0x18e>
     858:	c0 3c       	cpi	r28, 0xC0	; 192
     85a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     85c:	df 07       	cpc	r29, r31
     85e:	21 f4       	brne	.+8      	; 0x868 <usart_init_rs232+0x110>
     860:	68 e0       	ldi	r22, 0x08	; 8
     862:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     864:	00 d3       	rcall	.+1536   	; 0xe66 <sysclk_enable_module>
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <usart_init_rs232+0x18e>
     868:	c0 3c       	cpi	r28, 0xC0	; 192
     86a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     86c:	d8 07       	cpc	r29, r24
     86e:	21 f4       	brne	.+8      	; 0x878 <usart_init_rs232+0x120>
     870:	68 e0       	ldi	r22, 0x08	; 8
     872:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     874:	f8 d2       	rcall	.+1520   	; 0xe66 <sysclk_enable_module>
     876:	37 c0       	rjmp	.+110    	; 0x8e6 <usart_init_rs232+0x18e>
     878:	c0 3a       	cpi	r28, 0xA0	; 160
     87a:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     87c:	de 07       	cpc	r29, r30
     87e:	21 f4       	brne	.+8      	; 0x888 <usart_init_rs232+0x130>
     880:	60 e1       	ldi	r22, 0x10	; 16
     882:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     884:	f0 d2       	rcall	.+1504   	; 0xe66 <sysclk_enable_module>
     886:	2f c0       	rjmp	.+94     	; 0x8e6 <usart_init_rs232+0x18e>
     888:	c0 3a       	cpi	r28, 0xA0	; 160
     88a:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     88c:	df 07       	cpc	r29, r31
     88e:	21 f4       	brne	.+8      	; 0x898 <usart_init_rs232+0x140>
     890:	60 e1       	ldi	r22, 0x10	; 16
     892:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     894:	e8 d2       	rcall	.+1488   	; 0xe66 <sysclk_enable_module>
     896:	27 c0       	rjmp	.+78     	; 0x8e6 <usart_init_rs232+0x18e>
     898:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	d8 07       	cpc	r29, r24
     89e:	21 f4       	brne	.+8      	; 0x8a8 <usart_init_rs232+0x150>
     8a0:	60 e1       	ldi	r22, 0x10	; 16
     8a2:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     8a4:	e0 d2       	rcall	.+1472   	; 0xe66 <sysclk_enable_module>
     8a6:	1f c0       	rjmp	.+62     	; 0x8e6 <usart_init_rs232+0x18e>
     8a8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     8aa:	e8 e0       	ldi	r30, 0x08	; 8
     8ac:	de 07       	cpc	r29, r30
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <usart_init_rs232+0x160>
     8b0:	60 e2       	ldi	r22, 0x20	; 32
     8b2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     8b4:	d8 d2       	rcall	.+1456   	; 0xe66 <sysclk_enable_module>
     8b6:	17 c0       	rjmp	.+46     	; 0x8e6 <usart_init_rs232+0x18e>
     8b8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     8ba:	f9 e0       	ldi	r31, 0x09	; 9
     8bc:	df 07       	cpc	r29, r31
     8be:	21 f4       	brne	.+8      	; 0x8c8 <usart_init_rs232+0x170>
     8c0:	60 e2       	ldi	r22, 0x20	; 32
     8c2:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     8c4:	d0 d2       	rcall	.+1440   	; 0xe66 <sysclk_enable_module>
     8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <usart_init_rs232+0x18e>
     8c8:	c0 38       	cpi	r28, 0x80	; 128
     8ca:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     8cc:	d8 07       	cpc	r29, r24
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <usart_init_rs232+0x180>
     8d0:	60 e4       	ldi	r22, 0x40	; 64
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	c8 d2       	rcall	.+1424   	; 0xe66 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <usart_init_rs232+0x18e>
     8d8:	c0 3a       	cpi	r28, 0xA0	; 160
     8da:	e4 e0       	ldi	r30, 0x04	; 4
     8dc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     8de:	19 f4       	brne	.+6      	; 0x8e6 <usart_init_rs232+0x18e>
     8e0:	60 e4       	ldi	r22, 0x40	; 64
     8e2:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     8e4:	c0 d2       	rcall	.+1408   	; 0xe66 <sysclk_enable_module>
     8e6:	8d 81       	ldd	r24, Y+5	; 0x05
     8e8:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     8ea:	8d 83       	std	Y+5, r24	; 0x05
     8ec:	f8 01       	movw	r30, r16
     8ee:	95 81       	ldd	r25, Z+5	; 0x05
     8f0:	84 81       	ldd	r24, Z+4	; 0x04
     8f2:	89 2b       	or	r24, r25
     8f4:	96 81       	ldd	r25, Z+6	; 0x06
     8f6:	91 11       	cpse	r25, r1
     8f8:	98 e0       	ldi	r25, 0x08	; 8
     8fa:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     8fc:	8d 83       	std	Y+5, r24	; 0x05
     8fe:	f8 01       	movw	r30, r16
     900:	40 81       	ld	r20, Z
     902:	51 81       	ldd	r21, Z+1	; 0x01
     904:	62 81       	ldd	r22, Z+2	; 0x02
     906:	73 81       	ldd	r23, Z+3	; 0x03
     908:	00 e0       	ldi	r16, 0x00	; 0
     90a:	18 e4       	ldi	r17, 0x48	; 72
     90c:	28 ee       	ldi	r18, 0xE8	; 232
     90e:	31 e0       	ldi	r19, 0x01	; 1
     910:	ce 01       	movw	r24, r28
     912:	0f de       	rcall	.-994    	; 0x532 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	98 60       	ori	r25, 0x08	; 8
     918:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	90 61       	ori	r25, 0x10	; 16
     91e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     92a:	08 95       	ret

0000092c <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= 0x08; // Sets A3 to output
     92c:	e0 e0       	ldi	r30, 0x00	; 0
     92e:	f6 e0       	ldi	r31, 0x06	; 6
     930:	80 81       	ld	r24, Z
     932:	88 60       	ori	r24, 0x08	; 8
     934:	80 83       	st	Z, r24
     936:	08 95       	ret

00000938 <cam_switch>:
}

void cam_switch(void){
	PORTA.OUT ^= 0x08; // Changes A3 from high to low or vice-versa
     938:	e0 e0       	ldi	r30, 0x00	; 0
     93a:	f6 e0       	ldi	r31, 0x06	; 6
     93c:	94 81       	ldd	r25, Z+4	; 0x04
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	89 27       	eor	r24, r25
     942:	84 83       	std	Z+4, r24	; 0x04
     944:	08 95       	ret

00000946 <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	27 97       	sbiw	r28, 0x07	; 7
     950:	cd bf       	out	0x3d, r28	; 61
     952:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     954:	60 e2       	ldi	r22, 0x20	; 32
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	86 d2       	rcall	.+1292   	; 0xe66 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     95a:	e0 e6       	ldi	r30, 0x60	; 96
     95c:	f6 e0       	ldi	r31, 0x06	; 6
     95e:	80 81       	ld	r24, Z
     960:	80 68       	ori	r24, 0x80	; 128
     962:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	f0 e2       	ldi	r31, 0x20	; 32
     968:	84 81       	ldd	r24, Z+4	; 0x04
     96a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     96c:	85 81       	ldd	r24, Z+5	; 0x05
     96e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     970:	86 81       	ldd	r24, Z+6	; 0x06
     972:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	a2 81       	ldd	r26, Z+2	; 0x02
     97a:	b3 81       	ldd	r27, Z+3	; 0x03
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	ab 83       	std	Y+3, r26	; 0x03
     982:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     984:	60 e2       	ldi	r22, 0x20	; 32
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	6e d2       	rcall	.+1244   	; 0xe66 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     98a:	be 01       	movw	r22, r28
     98c:	6f 5f       	subi	r22, 0xFF	; 255
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	80 eb       	ldi	r24, 0xB0	; 176
     992:	99 e0       	ldi	r25, 0x09	; 9
     994:	e1 de       	rcall	.-574    	; 0x758 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     996:	27 96       	adiw	r28, 0x07	; 7
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     9a4:	61 50       	subi	r22, 0x01	; 1
     9a6:	71 09       	sbc	r23, r1
     9a8:	81 09       	sbc	r24, r1
     9aa:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     9ac:	61 15       	cp	r22, r1
     9ae:	71 05       	cpc	r23, r1
     9b0:	81 05       	cpc	r24, r1
     9b2:	91 05       	cpc	r25, r1
     9b4:	b9 f7       	brne	.-18     	; 0x9a4 <__portable_avr_delay_cycles+0x2>
     9b6:	08 95       	ret

000009b8 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     9b8:	e0 e4       	ldi	r30, 0x40	; 64
     9ba:	f6 e0       	ldi	r31, 0x06	; 6
     9bc:	94 81       	ldd	r25, Z+4	; 0x04
     9be:	80 e1       	ldi	r24, 0x10	; 16
     9c0:	89 27       	eor	r24, r25
     9c2:	84 83       	std	Z+4, r24	; 0x04
     9c4:	08 95       	ret

000009c6 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     9c6:	e0 e4       	ldi	r30, 0x40	; 64
     9c8:	f6 e0       	ldi	r31, 0x06	; 6
     9ca:	84 81       	ldd	r24, Z+4	; 0x04
     9cc:	80 61       	ori	r24, 0x10	; 16
     9ce:	84 83       	std	Z+4, r24	; 0x04
	delay_ms(5);
     9d0:	6b e2       	ldi	r22, 0x2B	; 43
     9d2:	78 e6       	ldi	r23, 0x68	; 104
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	e4 df       	rcall	.-56     	; 0x9a2 <__portable_avr_delay_cycles>
	
	// Resets the ms5607
	flip_ms5607();
     9da:	ee df       	rcall	.-36     	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     9dc:	8e e1       	ldi	r24, 0x1E	; 30
     9de:	82 d0       	rcall	.+260    	; 0xae4 <spi_write>
     9e0:	60 e8       	ldi	r22, 0x80	; 128
	delay_ms(3);
     9e2:	7e e3       	ldi	r23, 0x3E	; 62
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	dc df       	rcall	.-72     	; 0x9a2 <__portable_avr_delay_cycles>
	flip_ms5607();
     9ea:	e6 df       	rcall	.-52     	; 0x9b8 <flip_ms5607>
	delay_ms(2);
     9ec:	6b ea       	ldi	r22, 0xAB	; 171
     9ee:	79 e2       	ldi	r23, 0x29	; 41
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	d6 cf       	rjmp	.-84     	; 0x9a2 <__portable_avr_delay_cycles>
     9f6:	08 95       	ret

000009f8 <ms5607_read>:
     9f8:	cf 93       	push	r28
}

uint16_t ms5607_read(uint16_t comm)
{
     9fa:	df 93       	push	r29
     9fc:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     9fe:	dc df       	rcall	.-72     	; 0x9b8 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     a00:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     a02:	70 d0       	rcall	.+224    	; 0xae4 <spi_write>
     a04:	5f d0       	rcall	.+190    	; 0xac4 <spi_read>
     a06:	c8 2f       	mov	r28, r24
     a08:	d0 e0       	ldi	r29, 0x00	; 0
     a0a:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     a0c:	cc 27       	eor	r28, r28
     a0e:	5a d0       	rcall	.+180    	; 0xac4 <spi_read>
     a10:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     a12:	d2 df       	rcall	.-92     	; 0x9b8 <flip_ms5607>
     a14:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <ms5607_convert_d1>:
     a1c:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     a24:	c9 df       	rcall	.-110    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     a26:	88 e4       	ldi	r24, 0x48	; 72
     a28:	5d d0       	rcall	.+186    	; 0xae4 <spi_write>
	delay_ms(10);
     a2a:	66 e5       	ldi	r22, 0x56	; 86
     a2c:	70 ed       	ldi	r23, 0xD0	; 208
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a32:	b7 df       	rcall	.-146    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a34:	c1 df       	rcall	.-126    	; 0x9b8 <flip_ms5607>
     a36:	c0 df       	rcall	.-128    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	54 d0       	rcall	.+168    	; 0xae4 <spi_write>
     a3c:	43 d0       	rcall	.+134    	; 0xac4 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a3e:	c8 2e       	mov	r12, r24
     a40:	d1 2c       	mov	r13, r1
     a42:	e1 2c       	mov	r14, r1
     a44:	f1 2c       	mov	r15, r1
     a46:	76 01       	movw	r14, r12
     a48:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a4a:	cc 24       	eor	r12, r12
     a4c:	3b d0       	rcall	.+118    	; 0xac4 <spi_read>
     a4e:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a50:	39 d0       	rcall	.+114    	; 0xac4 <spi_read>
     a52:	c8 2a       	or	r12, r24
     a54:	b1 df       	rcall	.-158    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a56:	c7 01       	movw	r24, r14
     a58:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	08 95       	ret

00000a64 <ms5607_convert_d2>:
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     a6c:	a5 df       	rcall	.-182    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     a6e:	88 e5       	ldi	r24, 0x58	; 88
     a70:	39 d0       	rcall	.+114    	; 0xae4 <spi_write>
	delay_ms(10);
     a72:	66 e5       	ldi	r22, 0x56	; 86
     a74:	70 ed       	ldi	r23, 0xD0	; 208
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a7a:	93 df       	rcall	.-218    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a7c:	9d df       	rcall	.-198    	; 0x9b8 <flip_ms5607>
     a7e:	9c df       	rcall	.-200    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	30 d0       	rcall	.+96     	; 0xae4 <spi_write>
     a84:	1f d0       	rcall	.+62     	; 0xac4 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a86:	c8 2e       	mov	r12, r24
     a88:	d1 2c       	mov	r13, r1
     a8a:	e1 2c       	mov	r14, r1
     a8c:	f1 2c       	mov	r15, r1
     a8e:	76 01       	movw	r14, r12
     a90:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a92:	cc 24       	eor	r12, r12
     a94:	17 d0       	rcall	.+46     	; 0xac4 <spi_read>
     a96:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a98:	15 d0       	rcall	.+42     	; 0xac4 <spi_read>
     a9a:	c8 2a       	or	r12, r24
     a9c:	8d df       	rcall	.-230    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a9e:	c7 01       	movw	r24, r14
     aa0:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <spi_init>:
     aac:	68 e0       	ldi	r22, 0x08	; 8
     aae:	83 e0       	ldi	r24, 0x03	; 3
	PORTC.DIR |= 0b10110000; 
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     ab0:	da d1       	rcall	.+948    	; 0xe66 <sysclk_enable_module>
     ab2:	81 e5       	ldi	r24, 0x51	; 81
     ab4:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     ab8:	e0 e4       	ldi	r30, 0x40	; 64
     aba:	f6 e0       	ldi	r31, 0x06	; 6
     abc:	80 81       	ld	r24, Z
     abe:	80 6b       	ori	r24, 0xB0	; 176
     ac0:	80 83       	st	Z, r24
     ac2:	08 95       	ret

00000ac4 <spi_read>:

uint8_t spi_read(void)
{
	uint8_t iter_max = 100;
	uint8_t count = 0;
	SPIC.DATA = 0xFF; // make the DATA register something we know
     ac4:	e0 ec       	ldi	r30, 0xC0	; 192
     ac6:	f8 e0       	ldi	r31, 0x08	; 8
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS>>7) && count < iter_max){ // wait for the SPI interrupt flag to let us know the transfer is complete
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	88 23       	and	r24, r24
     ad0:	34 f0       	brlt	.+12     	; 0xade <spi_read+0x1a>
     ad2:	84 e6       	ldi	r24, 0x64	; 100
     ad4:	92 81       	ldd	r25, Z+2	; 0x02
     ad6:	99 23       	and	r25, r25
     ad8:	14 f0       	brlt	.+4      	; 0xade <spi_read+0x1a>
     ada:	81 50       	subi	r24, 0x01	; 1
     adc:	d9 f7       	brne	.-10     	; 0xad4 <spi_read+0x10>
		count++;	
	}
	
	return SPIC.DATA; // return the data from this function
     ade:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     ae2:	08 95       	ret

00000ae4 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     ae4:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     ae8:	e0 ec       	ldi	r30, 0xC0	; 192
     aea:	f8 e0       	ldi	r31, 0x08	; 8
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	88 23       	and	r24, r24
     af0:	ec f7       	brge	.-6      	; 0xaec <spi_write+0x8>
     af2:	08 95       	ret

00000af4 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     afa:	15 dd       	rcall	.-1494   	; 0x526 <usart_getchar>
     afc:	88 83       	st	Y, r24
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     b04:	08 cd       	rjmp	.-1520   	; 0x516 <usart_putchar>
}
     b06:	08 95       	ret

00000b08 <data_terminal_init>:

#include <asf.h>
#include "data_logger.h"

void data_terminal_init()
{
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	27 97       	sbiw	r28, 0x07	; 7
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b16:	60 e1       	ldi	r22, 0x10	; 16
     b18:	85 e0       	ldi	r24, 0x05	; 5
     b1a:	a5 d1       	rcall	.+842    	; 0xe66 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     b1c:	e0 e8       	ldi	r30, 0x80	; 128
     b1e:	f6 e0       	ldi	r31, 0x06	; 6
     b20:	80 81       	ld	r24, Z
     b22:	88 60       	ori	r24, 0x08	; 8
     b24:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     b26:	80 ea       	ldi	r24, 0xA0	; 160
     b28:	9a e0       	ldi	r25, 0x0A	; 10
     b2a:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <stdio_base>
     b2e:	90 93 0d 21 	sts	0x210D, r25	; 0x80210d <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     b32:	82 e8       	ldi	r24, 0x82	; 130
     b34:	95 e0       	ldi	r25, 0x05	; 5
     b36:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <ptr_put>
     b3a:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     b3e:	8a e7       	ldi	r24, 0x7A	; 122
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <ptr_get>
     b46:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     b4a:	ed e0       	ldi	r30, 0x0D	; 13
     b4c:	f0 e2       	ldi	r31, 0x20	; 32
     b4e:	84 81       	ldd	r24, Z+4	; 0x04
     b50:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     b52:	85 81       	ldd	r24, Z+5	; 0x05
     b54:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     b56:	86 81       	ldd	r24, Z+6	; 0x06
     b58:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	a2 81       	ldd	r26, Z+2	; 0x02
     b60:	b3 81       	ldd	r27, Z+3	; 0x03
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	ab 83       	std	Y+3, r26	; 0x03
     b68:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     b6a:	60 e1       	ldi	r22, 0x10	; 16
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	7b d1       	rcall	.+758    	; 0xe66 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     b70:	be 01       	movw	r22, r28
     b72:	6f 5f       	subi	r22, 0xFF	; 255
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	80 ea       	ldi	r24, 0xA0	; 160
     b78:	9a e0       	ldi	r25, 0x0A	; 10
     b7a:	ee dd       	rcall	.-1060   	; 0x758 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     b7c:	6c e6       	ldi	r22, 0x6C	; 108
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	85 e8       	ldi	r24, 0x85	; 133
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
     b88:	27 96       	adiw	r28, 0x07	; 7
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <XBEE_spi_init>:
}

uint8_t XBEE_uart_read(void){
	uint8_t c = usart_getchar(XBEE_TERMINAL_SERIAL);
	return c;
}
     b94:	e0 e4       	ldi	r30, 0x40	; 64
     b96:	f6 e0       	ldi	r31, 0x06	; 6
     b98:	80 81       	ld	r24, Z
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	80 83       	st	Z, r24
     b9e:	84 81       	ldd	r24, Z+4	; 0x04
     ba0:	84 60       	ori	r24, 0x04	; 4
     ba2:	84 83       	std	Z+4, r24	; 0x04
     ba4:	08 95       	ret

00000ba6 <flip_XBEE>:
	flip_XBEE();
	return data;
}

void flip_XBEE(void){
	XBEE_SS_PORT.OUT ^= XBEE_SS_PIN;
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f6 e0       	ldi	r31, 0x06	; 6
     baa:	94 81       	ldd	r25, Z+4	; 0x04
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	89 27       	eor	r24, r25
     bb0:	84 83       	std	Z+4, r24	; 0x04
     bb2:	08 95       	ret

00000bb4 <XBEE_spi_write>:
uint8_t XBEE_uart_read(void){
	uint8_t c = usart_getchar(XBEE_TERMINAL_SERIAL);
	return c;
}

void XBEE_spi_write(char* data){
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	ec 01       	movw	r28, r24
	flip_XBEE();
     bbc:	f4 df       	rcall	.-24     	; 0xba6 <flip_XBEE>
	for(uint8_t i = 0; i < strlen(data); i++){
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <XBEE_spi_write+0x1a>
		spi_write((uint8_t) data[i]);
     bc2:	fe 01       	movw	r30, r28
     bc4:	e8 0f       	add	r30, r24
     bc6:	f9 1f       	adc	r31, r25
     bc8:	80 81       	ld	r24, Z
     bca:	8c df       	rcall	.-232    	; 0xae4 <spi_write>
	return c;
}

void XBEE_spi_write(char* data){
	flip_XBEE();
	for(uint8_t i = 0; i < strlen(data); i++){
     bcc:	1f 5f       	subi	r17, 0xFF	; 255
     bce:	81 2f       	mov	r24, r17
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	fe 01       	movw	r30, r28
     bd4:	01 90       	ld	r0, Z+
     bd6:	00 20       	and	r0, r0
     bd8:	e9 f7       	brne	.-6      	; 0xbd4 <XBEE_spi_write+0x20>
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	ec 1b       	sub	r30, r28
     bde:	fd 0b       	sbc	r31, r29
     be0:	8e 17       	cp	r24, r30
     be2:	9f 07       	cpc	r25, r31
		spi_write((uint8_t) data[i]);
	}
	//delay_ms(5);
	flip_XBEE();
     be4:	70 f3       	brcs	.-36     	; 0xbc2 <XBEE_spi_write+0xe>
     be6:	df df       	rcall	.-66     	; 0xba6 <flip_XBEE>
	//usart_putchar(XBEE_TERMINAL_SERIAL, 10);
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	08 95       	ret

00000bf0 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	fc 01       	movw	r30, r24
     bf6:	41 15       	cp	r20, r1
     bf8:	51 05       	cpc	r21, r1
     bfa:	b1 f1       	breq	.+108    	; 0xc68 <rb16_write+0x78>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	db 01       	movw	r26, r22
     c08:	a8 0f       	add	r26, r24
     c0a:	b9 1f       	adc	r27, r25
     c0c:	8d 91       	ld	r24, X+
     c0e:	9c 91       	ld	r25, X
     c10:	a2 81       	ldd	r26, Z+2	; 0x02
     c12:	b3 81       	ldd	r27, Z+3	; 0x03
     c14:	aa 0f       	add	r26, r26
     c16:	bb 1f       	adc	r27, r27
     c18:	c6 81       	ldd	r28, Z+6	; 0x06
     c1a:	d7 81       	ldd	r29, Z+7	; 0x07
     c1c:	ac 0f       	add	r26, r28
     c1e:	bd 1f       	adc	r27, r29
     c20:	8d 93       	st	X+, r24
     c22:	9c 93       	st	X, r25
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	93 81       	ldd	r25, Z+3	; 0x03
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	82 83       	std	Z+2, r24	; 0x02
     c2c:	93 83       	std	Z+3, r25	; 0x03
     c2e:	a0 81       	ld	r26, Z
     c30:	b1 81       	ldd	r27, Z+1	; 0x01
     c32:	8a 17       	cp	r24, r26
     c34:	9b 07       	cpc	r25, r27
     c36:	11 f4       	brne	.+4      	; 0xc3c <rb16_write+0x4c>
     c38:	12 82       	std	Z+2, r1	; 0x02
     c3a:	13 82       	std	Z+3, r1	; 0x03
     c3c:	82 81       	ldd	r24, Z+2	; 0x02
     c3e:	93 81       	ldd	r25, Z+3	; 0x03
     c40:	c4 81       	ldd	r28, Z+4	; 0x04
     c42:	d5 81       	ldd	r29, Z+5	; 0x05
     c44:	8c 17       	cp	r24, r28
     c46:	9d 07       	cpc	r25, r29
     c48:	49 f4       	brne	.+18     	; 0xc5c <rb16_write+0x6c>
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	a8 17       	cp	r26, r24
     c4e:	b9 07       	cpc	r27, r25
     c50:	19 f0       	breq	.+6      	; 0xc58 <rb16_write+0x68>
     c52:	84 83       	std	Z+4, r24	; 0x04
     c54:	95 83       	std	Z+5, r25	; 0x05
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <rb16_write+0x6c>
     c58:	14 82       	std	Z+4, r1	; 0x04
     c5a:	15 82       	std	Z+5, r1	; 0x05
     c5c:	2f 5f       	subi	r18, 0xFF	; 255
     c5e:	82 2f       	mov	r24, r18
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	84 17       	cp	r24, r20
     c64:	95 07       	cpc	r25, r21
     c66:	68 f2       	brcs	.-102    	; 0xc02 <rb16_write+0x12>
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <rb16_init>:
     c6e:	fc 01       	movw	r30, r24
     c70:	12 82       	std	Z+2, r1	; 0x02
     c72:	13 82       	std	Z+3, r1	; 0x03
     c74:	14 82       	std	Z+4, r1	; 0x04
     c76:	15 82       	std	Z+5, r1	; 0x05
     c78:	66 83       	std	Z+6, r22	; 0x06
     c7a:	77 83       	std	Z+7, r23	; 0x07
     c7c:	40 83       	st	Z, r20
     c7e:	51 83       	std	Z+1, r21	; 0x01
     c80:	08 95       	ret

00000c82 <rb16_get_nth>:
     c82:	dc 01       	movw	r26, r24
     c84:	12 96       	adiw	r26, 0x02	; 2
     c86:	ed 91       	ld	r30, X+
     c88:	fc 91       	ld	r31, X
     c8a:	13 97       	sbiw	r26, 0x03	; 3
     c8c:	cb 01       	movw	r24, r22
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	e8 17       	cp	r30, r24
     c92:	f9 07       	cpc	r31, r25
     c94:	78 f0       	brcs	.+30     	; 0xcb4 <rb16_get_nth+0x32>
     c96:	e1 50       	subi	r30, 0x01	; 1
     c98:	f0 48       	sbci	r31, 0x80	; 128
     c9a:	e6 1b       	sub	r30, r22
     c9c:	f7 0b       	sbc	r31, r23
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	16 96       	adiw	r26, 0x06	; 6
     ca4:	8d 91       	ld	r24, X+
     ca6:	9c 91       	ld	r25, X
     ca8:	17 97       	sbiw	r26, 0x07	; 7
     caa:	e8 0f       	add	r30, r24
     cac:	f9 1f       	adc	r31, r25
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	08 95       	ret
     cb4:	2d 91       	ld	r18, X+
     cb6:	3c 91       	ld	r19, X
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	e2 0f       	add	r30, r18
     cbc:	f3 1f       	adc	r31, r19
     cbe:	e1 50       	subi	r30, 0x01	; 1
     cc0:	f0 48       	sbci	r31, 0x80	; 128
     cc2:	e6 1b       	sub	r30, r22
     cc4:	f7 0b       	sbc	r31, r23
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	16 96       	adiw	r26, 0x06	; 6
     ccc:	8d 91       	ld	r24, X+
     cce:	9c 91       	ld	r25, X
     cd0:	17 97       	sbiw	r26, 0x07	; 7
     cd2:	e8 0f       	add	r30, r24
     cd4:	f9 1f       	adc	r31, r25
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	08 95       	ret

00000cdc <rb32_write>:
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	fc 01       	movw	r30, r24
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <rb32_write+0x16>
     cf0:	3f c0       	rjmp	.+126    	; 0xd70 <rb32_write+0x94>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	db 01       	movw	r26, r22
     d02:	a8 0f       	add	r26, r24
     d04:	b9 1f       	adc	r27, r25
     d06:	cd 90       	ld	r12, X+
     d08:	dd 90       	ld	r13, X+
     d0a:	ed 90       	ld	r14, X+
     d0c:	fc 90       	ld	r15, X
     d0e:	a2 81       	ldd	r26, Z+2	; 0x02
     d10:	b3 81       	ldd	r27, Z+3	; 0x03
     d12:	aa 0f       	add	r26, r26
     d14:	bb 1f       	adc	r27, r27
     d16:	aa 0f       	add	r26, r26
     d18:	bb 1f       	adc	r27, r27
     d1a:	86 81       	ldd	r24, Z+6	; 0x06
     d1c:	97 81       	ldd	r25, Z+7	; 0x07
     d1e:	a8 0f       	add	r26, r24
     d20:	b9 1f       	adc	r27, r25
     d22:	cd 92       	st	X+, r12
     d24:	dd 92       	st	X+, r13
     d26:	ed 92       	st	X+, r14
     d28:	fc 92       	st	X, r15
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	82 83       	std	Z+2, r24	; 0x02
     d34:	93 83       	std	Z+3, r25	; 0x03
     d36:	a0 81       	ld	r26, Z
     d38:	b1 81       	ldd	r27, Z+1	; 0x01
     d3a:	8a 17       	cp	r24, r26
     d3c:	9b 07       	cpc	r25, r27
     d3e:	11 f4       	brne	.+4      	; 0xd44 <rb32_write+0x68>
     d40:	12 82       	std	Z+2, r1	; 0x02
     d42:	13 82       	std	Z+3, r1	; 0x03
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	c4 81       	ldd	r28, Z+4	; 0x04
     d4a:	d5 81       	ldd	r29, Z+5	; 0x05
     d4c:	8c 17       	cp	r24, r28
     d4e:	9d 07       	cpc	r25, r29
     d50:	49 f4       	brne	.+18     	; 0xd64 <rb32_write+0x88>
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	a8 17       	cp	r26, r24
     d56:	b9 07       	cpc	r27, r25
     d58:	19 f0       	breq	.+6      	; 0xd60 <rb32_write+0x84>
     d5a:	84 83       	std	Z+4, r24	; 0x04
     d5c:	95 83       	std	Z+5, r25	; 0x05
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <rb32_write+0x88>
     d60:	14 82       	std	Z+4, r1	; 0x04
     d62:	15 82       	std	Z+5, r1	; 0x05
     d64:	2f 5f       	subi	r18, 0xFF	; 255
     d66:	82 2f       	mov	r24, r18
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	84 17       	cp	r24, r20
     d6c:	95 07       	cpc	r25, r21
     d6e:	20 f2       	brcs	.-120    	; 0xcf8 <rb32_write+0x1c>
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	08 95       	ret

00000d7e <rb32_init>:
     d7e:	fc 01       	movw	r30, r24
     d80:	12 82       	std	Z+2, r1	; 0x02
     d82:	13 82       	std	Z+3, r1	; 0x03
     d84:	14 82       	std	Z+4, r1	; 0x04
     d86:	15 82       	std	Z+5, r1	; 0x05
     d88:	66 83       	std	Z+6, r22	; 0x06
     d8a:	77 83       	std	Z+7, r23	; 0x07
     d8c:	40 83       	st	Z, r20
     d8e:	51 83       	std	Z+1, r21	; 0x01
     d90:	08 95       	ret

00000d92 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     d92:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     d94:	12 96       	adiw	r26, 0x02	; 2
     d96:	ed 91       	ld	r30, X+
     d98:	fc 91       	ld	r31, X
     d9a:	13 97       	sbiw	r26, 0x03	; 3
     d9c:	cb 01       	movw	r24, r22
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	e8 17       	cp	r30, r24
     da2:	f9 07       	cpc	r31, r25
     da4:	98 f0       	brcs	.+38     	; 0xdcc <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     da6:	e1 50       	subi	r30, 0x01	; 1
     da8:	f0 4c       	sbci	r31, 0xC0	; 192
     daa:	e6 1b       	sub	r30, r22
     dac:	f7 0b       	sbc	r31, r23
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	16 96       	adiw	r26, 0x06	; 6
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	17 97       	sbiw	r26, 0x07	; 7
     dbe:	e8 0f       	add	r30, r24
     dc0:	f9 1f       	adc	r31, r25
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	11 97       	sbiw	r26, 0x01	; 1
     dd2:	e2 0f       	add	r30, r18
     dd4:	f3 1f       	adc	r31, r19
     dd6:	e1 50       	subi	r30, 0x01	; 1
     dd8:	f0 4c       	sbci	r31, 0xC0	; 192
     dda:	e6 1b       	sub	r30, r22
     ddc:	f7 0b       	sbc	r31, r23
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	16 96       	adiw	r26, 0x06	; 6
     de8:	8d 91       	ld	r24, X+
     dea:	9c 91       	ld	r25, X
     dec:	17 97       	sbiw	r26, 0x07	; 7
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
}
     dfa:	08 95       	ret

00000dfc <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	1f 92       	push	r1
     e02:	1f 92       	push	r1
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     e0e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     e12:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     e16:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     e1a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     e1e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     e22:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e26:	8f b7       	in	r24, 0x3f	; 63
     e28:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     e2a:	f8 94       	cli
	return flags;
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e2e:	e0 e5       	ldi	r30, 0x50	; 80
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e38:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e3c:	81 ff       	sbrs	r24, 1
     e3e:	fd cf       	rjmp	.-6      	; 0xe3a <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	80 e4       	ldi	r24, 0x40	; 64
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	25 d0       	rcall	.+74     	; 0xe92 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e48:	8f b7       	in	r24, 0x3f	; 63
     e4a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e4c:	f8 94       	cli
	return flags;
     e4e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     e50:	e0 e5       	ldi	r30, 0x50	; 80
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	8e 7f       	andi	r24, 0xFE	; 254
     e58:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e5a:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	1f 92       	push	r1
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e70:	9f b7       	in	r25, 0x3f	; 63
     e72:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e74:	f8 94       	cli
	return flags;
     e76:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e78:	e8 2f       	mov	r30, r24
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	e0 59       	subi	r30, 0x90	; 144
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	60 95       	com	r22
     e82:	80 81       	ld	r24, Z
     e84:	68 23       	and	r22, r24
     e86:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e88:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     e8a:	0f 90       	pop	r0
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e92:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e94:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e96:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e98:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e9a:	60 83       	st	Z, r22
	ret                             // Return to caller
     e9c:	08 95       	ret

00000e9e <__portable_avr_delay_cycles>:

uint8_t	eeprom_read(uint16_t address){
	return 0;
}

void eeprom_erase(void){
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <__portable_avr_delay_cycles+0xa>
     ea0:	61 50       	subi	r22, 0x01	; 1
     ea2:	71 09       	sbc	r23, r1
     ea4:	81 09       	sbc	r24, r1
     ea6:	91 09       	sbc	r25, r1
     ea8:	61 15       	cp	r22, r1
     eaa:	71 05       	cpc	r23, r1
     eac:	81 05       	cpc	r24, r1
     eae:	91 05       	cpc	r25, r1
     eb0:	b9 f7       	brne	.-18     	; 0xea0 <__portable_avr_delay_cycles+0x2>
     eb2:	08 95       	ret

00000eb4 <pressure_init>:
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	86 dd       	rcall	.-1268   	; 0x9c6 <ms5607_init>
     eba:	82 ea       	ldi	r24, 0xA2	; 162
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9c dd       	rcall	.-1224   	; 0x9f8 <ms5607_read>
     ec0:	c5 ef       	ldi	r28, 0xF5	; 245
     ec2:	d0 e2       	ldi	r29, 0x20	; 32
     ec4:	88 83       	st	Y, r24
     ec6:	99 83       	std	Y+1, r25	; 0x01
     ec8:	84 ea       	ldi	r24, 0xA4	; 164
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	95 dd       	rcall	.-1238   	; 0x9f8 <ms5607_read>
     ece:	8a 83       	std	Y+2, r24	; 0x02
     ed0:	9b 83       	std	Y+3, r25	; 0x03
     ed2:	86 ea       	ldi	r24, 0xA6	; 166
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 dd       	rcall	.-1248   	; 0x9f8 <ms5607_read>
     ed8:	8c 83       	std	Y+4, r24	; 0x04
     eda:	9d 83       	std	Y+5, r25	; 0x05
     edc:	88 ea       	ldi	r24, 0xA8	; 168
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	8b dd       	rcall	.-1258   	; 0x9f8 <ms5607_read>
     ee2:	8e 83       	std	Y+6, r24	; 0x06
     ee4:	9f 83       	std	Y+7, r25	; 0x07
     ee6:	8a ea       	ldi	r24, 0xAA	; 170
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	86 dd       	rcall	.-1268   	; 0x9f8 <ms5607_read>
     eec:	88 87       	std	Y+8, r24	; 0x08
     eee:	99 87       	std	Y+9, r25	; 0x09
     ef0:	8c ea       	ldi	r24, 0xAC	; 172
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	81 dd       	rcall	.-1278   	; 0x9f8 <ms5607_read>
     ef6:	8a 87       	std	Y+10, r24	; 0x0a
     ef8:	9b 87       	std	Y+11, r25	; 0x0b
     efa:	9f 93       	push	r25
     efc:	8f 93       	push	r24
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	8f 93       	push	r24
     f02:	88 85       	ldd	r24, Y+8	; 0x08
     f04:	8f 93       	push	r24
     f06:	8f 81       	ldd	r24, Y+7	; 0x07
     f08:	8f 93       	push	r24
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	8f 93       	push	r24
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	8f 93       	push	r24
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	8f 93       	push	r24
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	8f 93       	push	r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	8f 93       	push	r24
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	8f 93       	push	r24
     f22:	88 81       	ld	r24, Y
     f24:	8f 93       	push	r24
     f26:	87 e9       	ldi	r24, 0x97	; 151
     f28:	90 e2       	ldi	r25, 0x20	; 32
     f2a:	9f 93       	push	r25
     f2c:	8f 93       	push	r24
     f2e:	0e 94 33 16 	call	0x2c66	; 0x2c66 <printf>
     f32:	8d b7       	in	r24, 0x3d	; 61
     f34:	9e b7       	in	r25, 0x3e	; 62
     f36:	0e 96       	adiw	r24, 0x0e	; 14
     f38:	8d bf       	out	0x3d, r24	; 61
     f3a:	9e bf       	out	0x3e, r25	; 62
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <gps_init>:
     f42:	01 dd       	rcall	.-1534   	; 0x946 <gps_uart_init>
     f44:	6b ea       	ldi	r22, 0xAB	; 171
     f46:	79 e2       	ldi	r23, 0x29	; 41
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a8 df       	rcall	.-176    	; 0xe9e <__portable_avr_delay_cycles>
     f4e:	80 e3       	ldi	r24, 0x30	; 48
     f50:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
     f54:	08 95       	ret

00000f56 <get_pressure>:
     f56:	4f 92       	push	r4
     f58:	5f 92       	push	r5
     f5a:	6f 92       	push	r6
     f5c:	7f 92       	push	r7
     f5e:	8f 92       	push	r8
     f60:	9f 92       	push	r9
     f62:	af 92       	push	r10
     f64:	bf 92       	push	r11
     f66:	cf 92       	push	r12
     f68:	df 92       	push	r13
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	53 dd       	rcall	.-1370   	; 0xa1c <ms5607_convert_d1>
     f76:	6b 01       	movw	r12, r22
     f78:	7c 01       	movw	r14, r24
     f7a:	74 dd       	rcall	.-1304   	; 0xa64 <ms5607_convert_d2>
     f7c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__floatunsisf>
     f80:	4b 01       	movw	r8, r22
     f82:	5c 01       	movw	r10, r24
     f84:	c5 ef       	ldi	r28, 0xF5	; 245
     f86:	d0 e2       	ldi	r29, 0x20	; 32
     f88:	68 85       	ldd	r22, Y+8	; 0x08
     f8a:	79 85       	ldd	r23, Y+9	; 0x09
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__floatunsisf>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e8       	ldi	r20, 0x80	; 128
     f9a:	53 e4       	ldi	r21, 0x43	; 67
     f9c:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	c5 01       	movw	r24, r10
     fa6:	b4 01       	movw	r22, r8
     fa8:	0e 94 36 11 	call	0x226c	; 0x226c <__subsf3>
     fac:	4b 01       	movw	r8, r22
     fae:	5c 01       	movw	r10, r24
     fb0:	6c 81       	ldd	r22, Y+4	; 0x04
     fb2:	7d 81       	ldd	r23, Y+5	; 0x05
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__floatunsisf>
     fbc:	a5 01       	movw	r20, r10
     fbe:	94 01       	movw	r18, r8
     fc0:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	5c e3       	ldi	r21, 0x3C	; 60
     fcc:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
     fd0:	2b 01       	movw	r4, r22
     fd2:	3c 01       	movw	r6, r24
     fd4:	68 81       	ld	r22, Y
     fd6:	79 81       	ldd	r23, Y+1	; 0x01
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__floatunsisf>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e8       	ldi	r20, 0x80	; 128
     fe6:	57 e4       	ldi	r21, 0x47	; 71
     fe8:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
     fec:	9b 01       	movw	r18, r22
     fee:	ac 01       	movw	r20, r24
     ff0:	c3 01       	movw	r24, r6
     ff2:	b2 01       	movw	r22, r4
     ff4:	0e 94 37 11 	call	0x226e	; 0x226e <__addsf3>
     ff8:	2b 01       	movw	r4, r22
     ffa:	3c 01       	movw	r6, r24
     ffc:	c7 01       	movw	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__floatunsisf>
    1004:	9b 01       	movw	r18, r22
    1006:	ac 01       	movw	r20, r24
    1008:	c3 01       	movw	r24, r6
    100a:	b2 01       	movw	r22, r4
    100c:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	55 e3       	ldi	r21, 0x35	; 53
    1018:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    101c:	6b 01       	movw	r12, r22
    101e:	7c 01       	movw	r14, r24
    1020:	6e 81       	ldd	r22, Y+6	; 0x06
    1022:	7f 81       	ldd	r23, Y+7	; 0x07
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__floatunsisf>
    102c:	a5 01       	movw	r20, r10
    102e:	94 01       	movw	r18, r8
    1030:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5c e3       	ldi	r21, 0x3C	; 60
    103c:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    1040:	4b 01       	movw	r8, r22
    1042:	5c 01       	movw	r10, r24
    1044:	6a 81       	ldd	r22, Y+2	; 0x02
    1046:	7b 81       	ldd	r23, Y+3	; 0x03
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__floatunsisf>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	58 e4       	ldi	r21, 0x48	; 72
    1058:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
    1060:	c5 01       	movw	r24, r10
    1062:	b4 01       	movw	r22, r8
    1064:	0e 94 37 11 	call	0x226e	; 0x226e <__addsf3>
    1068:	9b 01       	movw	r18, r22
    106a:	ac 01       	movw	r20, r24
    106c:	c7 01       	movw	r24, r14
    106e:	b6 01       	movw	r22, r12
    1070:	0e 94 36 11 	call	0x226c	; 0x226c <__subsf3>
    1074:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fixunssfdi>
    1078:	0f e0       	ldi	r16, 0x0F	; 15
    107a:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__lshrdi3>
    107e:	0e 94 af 12 	call	0x255e	; 0x255e <__floatundisf>
    1082:	6b 01       	movw	r12, r22
    1084:	7c 01       	movw	r14, r24
    1086:	0e 94 41 12 	call	0x2482	; 0x2482 <__fixsfsi>
    108a:	9f 93       	push	r25
    108c:	8f 93       	push	r24
    108e:	7f 93       	push	r23
    1090:	6f 93       	push	r22
    1092:	8a ea       	ldi	r24, 0xAA	; 170
    1094:	90 e2       	ldi	r25, 0x20	; 32
    1096:	9f 93       	push	r25
    1098:	8f 93       	push	r24
    109a:	0e 94 33 16 	call	0x2c66	; 0x2c66 <printf>
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	c7 01       	movw	r24, r14
    10ac:	b6 01       	movw	r22, r12
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	af 90       	pop	r10
    10c0:	9f 90       	pop	r9
    10c2:	8f 90       	pop	r8
    10c4:	7f 90       	pop	r7
    10c6:	6f 90       	pop	r6
    10c8:	5f 90       	pop	r5
    10ca:	4f 90       	pop	r4
    10cc:	08 95       	ret

000010ce <get_altitude>:
    10ce:	4f 92       	push	r4
    10d0:	5f 92       	push	r5
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	2b 01       	movw	r4, r22
    10e8:	3c 01       	movw	r6, r24
    10ea:	c0 90 1f 20 	lds	r12, 0x201F	; 0x80201f <L>
    10ee:	d0 90 20 20 	lds	r13, 0x2020	; 0x802020 <L+0x1>
    10f2:	e0 90 21 20 	lds	r14, 0x2021	; 0x802021 <L+0x2>
    10f6:	f0 90 22 20 	lds	r15, 0x2022	; 0x802022 <L+0x3>
    10fa:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <R>
    10fe:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <R+0x1>
    1102:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <R+0x2>
    1106:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <R+0x3>
    110a:	c7 01       	movw	r24, r14
    110c:	b6 01       	movw	r22, r12
    110e:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    1112:	20 91 1b 20 	lds	r18, 0x201B	; 0x80201b <g_0>
    1116:	30 91 1c 20 	lds	r19, 0x201C	; 0x80201c <g_0+0x1>
    111a:	40 91 1d 20 	lds	r20, 0x201D	; 0x80201d <g_0+0x2>
    111e:	50 91 1e 20 	lds	r21, 0x201E	; 0x80201e <g_0+0x3>
    1122:	0e 94 9f 11 	call	0x233e	; 0x233e <__divsf3>
    1126:	4b 01       	movw	r8, r22
    1128:	5c 01       	movw	r10, r24
    112a:	a3 01       	movw	r20, r6
    112c:	92 01       	movw	r18, r4
    112e:	60 91 2b 20 	lds	r22, 0x202B	; 0x80202b <ground_p>
    1132:	70 91 2c 20 	lds	r23, 0x202C	; 0x80202c <ground_p+0x1>
    1136:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <ground_p+0x2>
    113a:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <ground_p+0x3>
    113e:	0e 94 9f 11 	call	0x233e	; 0x233e <__divsf3>
    1142:	a5 01       	movw	r20, r10
    1144:	94 01       	movw	r18, r8
    1146:	0e 94 05 14 	call	0x280a	; 0x280a <pow>
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e8       	ldi	r20, 0x80	; 128
    1150:	5f e3       	ldi	r21, 0x3F	; 63
    1152:	0e 94 36 11 	call	0x226c	; 0x226c <__subsf3>
    1156:	20 91 27 20 	lds	r18, 0x2027	; 0x802027 <ground_t>
    115a:	30 91 28 20 	lds	r19, 0x2028	; 0x802028 <ground_t+0x1>
    115e:	40 91 29 20 	lds	r20, 0x2029	; 0x802029 <ground_t+0x2>
    1162:	50 91 2a 20 	lds	r21, 0x202A	; 0x80202a <ground_t+0x3>
    1166:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    116a:	a7 01       	movw	r20, r14
    116c:	96 01       	movw	r18, r12
    116e:	0e 94 9f 11 	call	0x233e	; 0x233e <__divsf3>
    1172:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <ground_a>
    1176:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <ground_a+0x1>
    117a:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <ground_a+0x2>
    117e:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <ground_a+0x3>
    1182:	0e 94 36 11 	call	0x226c	; 0x226c <__subsf3>
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	bf 90       	pop	r11
    1190:	af 90       	pop	r10
    1192:	9f 90       	pop	r9
    1194:	8f 90       	pop	r8
    1196:	7f 90       	pop	r7
    1198:	6f 90       	pop	r6
    119a:	5f 90       	pop	r5
    119c:	4f 90       	pop	r4
    119e:	08 95       	ret

000011a0 <diff>:
    11a0:	2f 92       	push	r2
    11a2:	3f 92       	push	r3
    11a4:	4f 92       	push	r4
    11a6:	5f 92       	push	r5
    11a8:	6f 92       	push	r6
    11aa:	7f 92       	push	r7
    11ac:	8f 92       	push	r8
    11ae:	9f 92       	push	r9
    11b0:	af 92       	push	r10
    11b2:	bf 92       	push	r11
    11b4:	cf 92       	push	r12
    11b6:	df 92       	push	r13
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <diff+0x26>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <diff+0x28>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	6c 01       	movw	r12, r24
    11ce:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    11d2:	88 23       	and	r24, r24
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <diff+0x38>
    11d6:	6b c0       	rjmp	.+214    	; 0x12ae <diff+0x10e>
    11d8:	00 e0       	ldi	r16, 0x00	; 0
    11da:	10 e0       	ldi	r17, 0x00	; 0
    11dc:	41 2c       	mov	r4, r1
    11de:	51 2c       	mov	r5, r1
    11e0:	32 01       	movw	r6, r4
    11e2:	86 2e       	mov	r8, r22
    11e4:	91 2c       	mov	r9, r1
    11e6:	a1 2c       	mov	r10, r1
    11e8:	b1 2c       	mov	r11, r1
    11ea:	89 82       	std	Y+1, r8	; 0x01
    11ec:	9a 82       	std	Y+2, r9	; 0x02
    11ee:	ab 82       	std	Y+3, r10	; 0x03
    11f0:	bc 82       	std	Y+4, r11	; 0x04
    11f2:	b8 01       	movw	r22, r16
    11f4:	c6 01       	movw	r24, r12
    11f6:	45 dd       	rcall	.-1398   	; 0xc82 <rb16_get_nth>
    11f8:	5c 01       	movw	r10, r24
    11fa:	18 01       	movw	r2, r16
    11fc:	2f ef       	ldi	r18, 0xFF	; 255
    11fe:	22 1a       	sub	r2, r18
    1200:	32 0a       	sbc	r3, r18
    1202:	b1 01       	movw	r22, r2
    1204:	c6 01       	movw	r24, r12
    1206:	3d dd       	rcall	.-1414   	; 0xc82 <rb16_get_nth>
    1208:	7c 01       	movw	r14, r24
    120a:	b8 01       	movw	r22, r16
    120c:	6e 5f       	subi	r22, 0xFE	; 254
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	c6 01       	movw	r24, r12
    1212:	37 dd       	rcall	.-1426   	; 0xc82 <rb16_get_nth>
    1214:	a5 01       	movw	r20, r10
    1216:	bb 0c       	add	r11, r11
    1218:	66 0b       	sbc	r22, r22
    121a:	77 0b       	sbc	r23, r23
    121c:	8a 01       	movw	r16, r20
    121e:	9b 01       	movw	r18, r22
    1220:	00 0f       	add	r16, r16
    1222:	11 1f       	adc	r17, r17
    1224:	22 1f       	adc	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	40 0f       	add	r20, r16
    122a:	51 1f       	adc	r21, r17
    122c:	62 1f       	adc	r22, r18
    122e:	73 1f       	adc	r23, r19
    1230:	87 01       	movw	r16, r14
    1232:	ff 0c       	add	r15, r15
    1234:	22 0b       	sbc	r18, r18
    1236:	33 0b       	sbc	r19, r19
    1238:	78 01       	movw	r14, r16
    123a:	89 01       	movw	r16, r18
    123c:	ee 0c       	add	r14, r14
    123e:	ff 1c       	adc	r15, r15
    1240:	00 1f       	adc	r16, r16
    1242:	11 1f       	adc	r17, r17
    1244:	ee 0c       	add	r14, r14
    1246:	ff 1c       	adc	r15, r15
    1248:	00 1f       	adc	r16, r16
    124a:	11 1f       	adc	r17, r17
    124c:	4a 01       	movw	r8, r20
    124e:	5b 01       	movw	r10, r22
    1250:	8e 18       	sub	r8, r14
    1252:	9f 08       	sbc	r9, r15
    1254:	a0 0a       	sbc	r10, r16
    1256:	b1 0a       	sbc	r11, r17
    1258:	ac 01       	movw	r20, r24
    125a:	99 0f       	add	r25, r25
    125c:	66 0b       	sbc	r22, r22
    125e:	77 0b       	sbc	r23, r23
    1260:	d5 01       	movw	r26, r10
    1262:	c4 01       	movw	r24, r8
    1264:	84 0f       	add	r24, r20
    1266:	95 1f       	adc	r25, r21
    1268:	a6 1f       	adc	r26, r22
    126a:	b7 1f       	adc	r27, r23
    126c:	9c 01       	movw	r18, r24
    126e:	ad 01       	movw	r20, r26
    1270:	69 81       	ldd	r22, Y+1	; 0x01
    1272:	7a 81       	ldd	r23, Y+2	; 0x02
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__mulsi3>
    127c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatsisf>
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	5f e3       	ldi	r21, 0x3F	; 63
    1288:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    128c:	9b 01       	movw	r18, r22
    128e:	ac 01       	movw	r20, r24
    1290:	c3 01       	movw	r24, r6
    1292:	b2 01       	movw	r22, r4
    1294:	ec d7       	rcall	.+4056   	; 0x226e <__addsf3>
    1296:	2b 01       	movw	r4, r22
    1298:	3c 01       	movw	r6, r24
    129a:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    129e:	81 01       	movw	r16, r2
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	22 16       	cp	r2, r18
    12a6:	33 06       	cpc	r3, r19
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <diff+0x10c>
    12aa:	a3 cf       	rjmp	.-186    	; 0x11f2 <diff+0x52>
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <diff+0x114>
    12ae:	41 2c       	mov	r4, r1
    12b0:	51 2c       	mov	r5, r1
    12b2:	32 01       	movw	r6, r4
    12b4:	68 2f       	mov	r22, r24
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatsisf>
    12c0:	9b 01       	movw	r18, r22
    12c2:	ac 01       	movw	r20, r24
    12c4:	c3 01       	movw	r24, r6
    12c6:	b2 01       	movw	r22, r4
    12c8:	0e 94 9f 11 	call	0x233e	; 0x233e <__divsf3>
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	48 ec       	ldi	r20, 0xC8	; 200
    12d2:	52 e4       	ldi	r21, 0x42	; 66
    12d4:	0e 94 9f 11 	call	0x233e	; 0x233e <__divsf3>
    12d8:	26 96       	adiw	r28, 0x06	; 6
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	cf 90       	pop	r12
    12ee:	bf 90       	pop	r11
    12f0:	af 90       	pop	r10
    12f2:	9f 90       	pop	r9
    12f4:	8f 90       	pop	r8
    12f6:	7f 90       	pop	r7
    12f8:	6f 90       	pop	r6
    12fa:	5f 90       	pop	r5
    12fc:	4f 90       	pop	r4
    12fe:	3f 90       	pop	r3
    1300:	2f 90       	pop	r2
    1302:	08 95       	ret

00001304 <data_check>:
    1304:	3f 92       	push	r3
    1306:	4f 92       	push	r4
    1308:	5f 92       	push	r5
    130a:	6f 92       	push	r6
    130c:	7f 92       	push	r7
    130e:	8f 92       	push	r8
    1310:	9f 92       	push	r9
    1312:	af 92       	push	r10
    1314:	bf 92       	push	r11
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	00 d0       	rcall	.+0      	; 0x1328 <data_check+0x24>
    1328:	00 d0       	rcall	.+0      	; 0x132a <data_check+0x26>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	8c 01       	movw	r16, r24
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	1a 82       	std	Y+2, r1	; 0x02
    1334:	c1 2c       	mov	r12, r1
    1336:	d1 2c       	mov	r13, r1
    1338:	76 01       	movw	r14, r12
    133a:	69 81       	ldd	r22, Y+1	; 0x01
    133c:	7a 81       	ldd	r23, Y+2	; 0x02
    133e:	c8 01       	movw	r24, r16
    1340:	28 dd       	rcall	.-1456   	; 0xd92 <rb32_get_nth>
    1342:	4b 01       	movw	r8, r22
    1344:	5c 01       	movw	r10, r24
    1346:	21 ea       	ldi	r18, 0xA1	; 161
    1348:	82 1a       	sub	r8, r18
    134a:	26 e8       	ldi	r18, 0x86	; 134
    134c:	92 0a       	sbc	r9, r18
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	a2 0a       	sbc	r10, r18
    1352:	b1 08       	sbc	r11, r1
    1354:	2f ed       	ldi	r18, 0xDF	; 223
    1356:	82 16       	cp	r8, r18
    1358:	2f e0       	ldi	r18, 0x0F	; 15
    135a:	92 06       	cpc	r9, r18
    135c:	27 e9       	ldi	r18, 0x97	; 151
    135e:	a2 06       	cpc	r10, r18
    1360:	b1 04       	cpc	r11, r1
    1362:	70 f4       	brcc	.+28     	; 0x1380 <data_check+0x7c>
    1364:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatsisf>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 ea       	ldi	r20, 0xA0	; 160
    136e:	50 e4       	ldi	r21, 0x40	; 64
    1370:	e6 d7       	rcall	.+4044   	; 0x233e <__divsf3>
    1372:	9b 01       	movw	r18, r22
    1374:	ac 01       	movw	r20, r24
    1376:	c7 01       	movw	r24, r14
    1378:	b6 01       	movw	r22, r12
    137a:	79 d7       	rcall	.+3826   	; 0x226e <__addsf3>
    137c:	6b 01       	movw	r12, r22
    137e:	7c 01       	movw	r14, r24
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	05 97       	sbiw	r24, 0x05	; 5
    138c:	b1 f6       	brne	.-84     	; 0x133a <data_check+0x36>
    138e:	19 82       	std	Y+1, r1	; 0x01
    1390:	1a 82       	std	Y+2, r1	; 0x02
    1392:	81 2c       	mov	r8, r1
    1394:	91 2c       	mov	r9, r1
    1396:	54 01       	movw	r10, r8
    1398:	69 81       	ldd	r22, Y+1	; 0x01
    139a:	7a 81       	ldd	r23, Y+2	; 0x02
    139c:	c8 01       	movw	r24, r16
    139e:	f9 dc       	rcall	.-1550   	; 0xd92 <rb32_get_nth>
    13a0:	2b 01       	movw	r4, r22
    13a2:	3c 01       	movw	r6, r24
    13a4:	21 ea       	ldi	r18, 0xA1	; 161
    13a6:	42 1a       	sub	r4, r18
    13a8:	26 e8       	ldi	r18, 0x86	; 134
    13aa:	52 0a       	sbc	r5, r18
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	62 0a       	sbc	r6, r18
    13b0:	71 08       	sbc	r7, r1
    13b2:	2f ed       	ldi	r18, 0xDF	; 223
    13b4:	42 16       	cp	r4, r18
    13b6:	2f e0       	ldi	r18, 0x0F	; 15
    13b8:	52 06       	cpc	r5, r18
    13ba:	27 e9       	ldi	r18, 0x97	; 151
    13bc:	62 06       	cpc	r6, r18
    13be:	71 04       	cpc	r7, r1
    13c0:	80 f4       	brcc	.+32     	; 0x13e2 <data_check+0xde>
    13c2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatsisf>
    13c6:	a7 01       	movw	r20, r14
    13c8:	96 01       	movw	r18, r12
    13ca:	50 d7       	rcall	.+3744   	; 0x226c <__subsf3>
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    13d4:	9b 01       	movw	r18, r22
    13d6:	ac 01       	movw	r20, r24
    13d8:	c5 01       	movw	r24, r10
    13da:	b4 01       	movw	r22, r8
    13dc:	48 d7       	rcall	.+3728   	; 0x226e <__addsf3>
    13de:	4b 01       	movw	r8, r22
    13e0:	5c 01       	movw	r10, r24
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	05 97       	sbiw	r24, 0x05	; 5
    13ee:	a1 f6       	brne	.-88     	; 0x1398 <data_check+0x94>
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5e e3       	ldi	r21, 0x3E	; 62
    13f8:	c5 01       	movw	r24, r10
    13fa:	b4 01       	movw	r22, r8
    13fc:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    1400:	69 83       	std	Y+1, r22	; 0x01
    1402:	7a 83       	std	Y+2, r23	; 0x02
    1404:	8b 83       	std	Y+3, r24	; 0x03
    1406:	9c 83       	std	Y+4, r25	; 0x04
    1408:	1d 82       	std	Y+5, r1	; 0x05
    140a:	1e 82       	std	Y+6, r1	; 0x06
    140c:	31 2c       	mov	r3, r1
    140e:	41 2c       	mov	r4, r1
    1410:	51 2c       	mov	r5, r1
    1412:	32 01       	movw	r6, r4
    1414:	6d 81       	ldd	r22, Y+5	; 0x05
    1416:	7e 81       	ldd	r23, Y+6	; 0x06
    1418:	c8 01       	movw	r24, r16
    141a:	bb dc       	rcall	.-1674   	; 0xd92 <rb32_get_nth>
    141c:	4b 01       	movw	r8, r22
    141e:	5c 01       	movw	r10, r24
    1420:	21 ea       	ldi	r18, 0xA1	; 161
    1422:	82 1a       	sub	r8, r18
    1424:	26 e8       	ldi	r18, 0x86	; 134
    1426:	92 0a       	sbc	r9, r18
    1428:	21 e0       	ldi	r18, 0x01	; 1
    142a:	a2 0a       	sbc	r10, r18
    142c:	b1 08       	sbc	r11, r1
    142e:	2f ed       	ldi	r18, 0xDF	; 223
    1430:	82 16       	cp	r8, r18
    1432:	2f e0       	ldi	r18, 0x0F	; 15
    1434:	92 06       	cpc	r9, r18
    1436:	27 e9       	ldi	r18, 0x97	; 151
    1438:	a2 06       	cpc	r10, r18
    143a:	b1 04       	cpc	r11, r1
    143c:	40 f5       	brcc	.+80     	; 0x148e <data_check+0x18a>
    143e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatsisf>
    1442:	4b 01       	movw	r8, r22
    1444:	5c 01       	movw	r10, r24
    1446:	a7 01       	movw	r20, r14
    1448:	96 01       	movw	r18, r12
    144a:	10 d7       	rcall	.+3616   	; 0x226c <__subsf3>
    144c:	0e 94 41 12 	call	0x2482	; 0x2482 <__fixsfsi>
    1450:	9b 01       	movw	r18, r22
    1452:	77 23       	and	r23, r23
    1454:	24 f4       	brge	.+8      	; 0x145e <data_check+0x15a>
    1456:	22 27       	eor	r18, r18
    1458:	33 27       	eor	r19, r19
    145a:	26 1b       	sub	r18, r22
    145c:	37 0b       	sbc	r19, r23
    145e:	b9 01       	movw	r22, r18
    1460:	33 0f       	add	r19, r19
    1462:	88 0b       	sbc	r24, r24
    1464:	99 0b       	sbc	r25, r25
    1466:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatsisf>
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	69 81       	ldd	r22, Y+1	; 0x01
    1470:	7a 81       	ldd	r23, Y+2	; 0x02
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	0e 94 97 13 	call	0x272e	; 0x272e <__gesf2>
    147a:	88 23       	and	r24, r24
    147c:	44 f0       	brlt	.+16     	; 0x148e <data_check+0x18a>
    147e:	a5 01       	movw	r20, r10
    1480:	94 01       	movw	r18, r8
    1482:	c3 01       	movw	r24, r6
    1484:	b2 01       	movw	r22, r4
    1486:	f3 d6       	rcall	.+3558   	; 0x226e <__addsf3>
    1488:	2b 01       	movw	r4, r22
    148a:	3c 01       	movw	r6, r24
    148c:	33 94       	inc	r3
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	05 97       	sbiw	r24, 0x05	; 5
    149a:	09 f0       	breq	.+2      	; 0x149e <data_check+0x19a>
    149c:	bb cf       	rjmp	.-138    	; 0x1414 <data_check+0x110>
    149e:	33 20       	and	r3, r3
    14a0:	61 f0       	breq	.+24     	; 0x14ba <data_check+0x1b6>
    14a2:	63 2d       	mov	r22, r3
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__floatunsisf>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	c3 01       	movw	r24, r6
    14b4:	b2 01       	movw	r22, r4
    14b6:	43 d7       	rcall	.+3718   	; 0x233e <__divsf3>
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <data_check+0x1be>
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	80 e8       	ldi	r24, 0x80	; 128
    14c0:	9f eb       	ldi	r25, 0xBF	; 191
    14c2:	26 96       	adiw	r28, 0x06	; 6
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	bf 90       	pop	r11
    14da:	af 90       	pop	r10
    14dc:	9f 90       	pop	r9
    14de:	8f 90       	pop	r8
    14e0:	7f 90       	pop	r7
    14e2:	6f 90       	pop	r6
    14e4:	5f 90       	pop	r5
    14e6:	4f 90       	pop	r4
    14e8:	3f 90       	pop	r3
    14ea:	08 95       	ret

000014ec <data_collect>:
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	00 d0       	rcall	.+0      	; 0x1502 <data_collect+0x16>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <data_collect+0x18>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	5c 01       	movw	r10, r24
    150a:	8b 01       	movw	r16, r22
    150c:	24 dd       	rcall	.-1464   	; 0xf56 <get_pressure>
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    151a:	b3 d7       	rcall	.+3942   	; 0x2482 <__fixsfsi>
    151c:	69 83       	std	Y+1, r22	; 0x01
    151e:	7a 83       	std	Y+2, r23	; 0x02
    1520:	8b 83       	std	Y+3, r24	; 0x03
    1522:	9c 83       	std	Y+4, r25	; 0x04
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	be 01       	movw	r22, r28
    152a:	6f 5f       	subi	r22, 0xFF	; 255
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	c8 01       	movw	r24, r16
    1530:	d5 db       	rcall	.-2134   	; 0xcdc <rb32_write>
    1532:	c8 01       	movw	r24, r16
    1534:	e7 de       	rcall	.-562    	; 0x1304 <data_check>
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	ff d6       	rcall	.+3582   	; 0x233e <__divsf3>
    1540:	6b 01       	movw	r12, r22
    1542:	7c 01       	movw	r14, r24
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e8       	ldi	r20, 0x80	; 128
    154a:	5f eb       	ldi	r21, 0xBF	; 191
    154c:	f4 d6       	rcall	.+3560   	; 0x2336 <__cmpsf2>
    154e:	88 23       	and	r24, r24
    1550:	79 f1       	breq	.+94     	; 0x15b0 <data_collect+0xc4>
    1552:	c0 92 e8 20 	sts	0x20E8, r12	; 0x8020e8 <press>
    1556:	d0 92 e9 20 	sts	0x20E9, r13	; 0x8020e9 <press+0x1>
    155a:	e0 92 ea 20 	sts	0x20EA, r14	; 0x8020ea <press+0x2>
    155e:	f0 92 eb 20 	sts	0x20EB, r15	; 0x8020eb <press+0x3>
    1562:	c7 01       	movw	r24, r14
    1564:	b6 01       	movw	r22, r12
    1566:	b3 dd       	rcall	.-1178   	; 0x10ce <get_altitude>
    1568:	60 93 e0 20 	sts	0x20E0, r22	; 0x8020e0 <alt>
    156c:	70 93 e1 20 	sts	0x20E1, r23	; 0x8020e1 <alt+0x1>
    1570:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <alt+0x2>
    1574:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <alt+0x3>
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	48 ec       	ldi	r20, 0xC8	; 200
    157e:	52 e4       	ldi	r21, 0x42	; 66
    1580:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    1584:	7e d7       	rcall	.+3836   	; 0x2482 <__fixsfsi>
    1586:	6d 83       	std	Y+5, r22	; 0x05
    1588:	7e 83       	std	Y+6, r23	; 0x06
    158a:	41 e0       	ldi	r20, 0x01	; 1
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	be 01       	movw	r22, r28
    1590:	6b 5f       	subi	r22, 0xFB	; 251
    1592:	7f 4f       	sbci	r23, 0xFF	; 255
    1594:	c5 01       	movw	r24, r10
    1596:	2c db       	rcall	.-2472   	; 0xbf0 <rb16_write>
    1598:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    159c:	c5 01       	movw	r24, r10
    159e:	00 de       	rcall	.-1024   	; 0x11a0 <diff>
    15a0:	60 93 d8 20 	sts	0x20D8, r22	; 0x8020d8 <velocity>
    15a4:	70 93 d9 20 	sts	0x20D9, r23	; 0x8020d9 <velocity+0x1>
    15a8:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <velocity+0x2>
    15ac:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <velocity+0x3>
    15b0:	83 e3       	ldi	r24, 0x33	; 51
    15b2:	93 e1       	ldi	r25, 0x13	; 19
    15b4:	a0 e9       	ldi	r26, 0x90	; 144
    15b6:	b3 e4       	ldi	r27, 0x43	; 67
    15b8:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <temp>
    15bc:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <temp+0x1>
    15c0:	a0 93 e6 20 	sts	0x20E6, r26	; 0x8020e6 <temp+0x2>
    15c4:	b0 93 e7 20 	sts	0x20E7, r27	; 0x8020e7 <temp+0x3>
    15c8:	26 96       	adiw	r28, 0x06	; 6
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	08 95       	ret

000015e4 <state_check>:
    15e4:	cf 92       	push	r12
    15e6:	df 92       	push	r13
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	c0 90 d8 20 	lds	r12, 0x20D8	; 0x8020d8 <velocity>
    15f0:	d0 90 d9 20 	lds	r13, 0x20D9	; 0x8020d9 <velocity+0x1>
    15f4:	e0 90 da 20 	lds	r14, 0x20DA	; 0x8020da <velocity+0x2>
    15f8:	f0 90 db 20 	lds	r15, 0x20DB	; 0x8020db <velocity+0x3>
    15fc:	c7 01       	movw	r24, r14
    15fe:	b6 01       	movw	r22, r12
    1600:	40 d7       	rcall	.+3712   	; 0x2482 <__fixsfsi>
    1602:	9b 01       	movw	r18, r22
    1604:	77 23       	and	r23, r23
    1606:	24 f4       	brge	.+8      	; 0x1610 <state_check+0x2c>
    1608:	22 27       	eor	r18, r18
    160a:	33 27       	eor	r19, r19
    160c:	26 1b       	sub	r18, r22
    160e:	37 0b       	sbc	r19, r23
    1610:	26 30       	cpi	r18, 0x06	; 6
    1612:	31 05       	cpc	r19, r1
    1614:	84 f0       	brlt	.+32     	; 0x1636 <state_check+0x52>
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	c7 01       	movw	r24, r14
    161e:	b6 01       	movw	r22, r12
    1620:	8a d6       	rcall	.+3348   	; 0x2336 <__cmpsf2>
    1622:	88 23       	and	r24, r24
    1624:	24 f0       	brlt	.+8      	; 0x162e <state_check+0x4a>
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <state>
    162c:	24 c0       	rjmp	.+72     	; 0x1676 <state_check+0x92>
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <state>
    1634:	20 c0       	rjmp	.+64     	; 0x1676 <state_check+0x92>
    1636:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <state>
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	48 e4       	ldi	r20, 0x48	; 72
    1640:	52 e4       	ldi	r21, 0x42	; 66
    1642:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <alt>
    1646:	70 91 e1 20 	lds	r23, 0x20E1	; 0x8020e1 <alt+0x1>
    164a:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <alt+0x2>
    164e:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <alt+0x3>
    1652:	0e 94 97 13 	call	0x272e	; 0x272e <__gesf2>
    1656:	18 16       	cp	r1, r24
    1658:	24 f0       	brlt	.+8      	; 0x1662 <state_check+0x7e>
    165a:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <reset_received>
    165e:	88 23       	and	r24, r24
    1660:	19 f0       	breq	.+6      	; 0x1668 <state_check+0x84>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <state>
    1668:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <released>
    166c:	88 23       	and	r24, r24
    166e:	19 f0       	breq	.+6      	; 0x1676 <state_check+0x92>
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <state>
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	df 90       	pop	r13
    167c:	cf 90       	pop	r12
    167e:	08 95       	ret

00001680 <servo_pid>:
    1680:	8f 92       	push	r8
    1682:	9f 92       	push	r9
    1684:	af 92       	push	r10
    1686:	bf 92       	push	r11
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	7c 01       	movw	r14, r24
    169a:	c0 e0       	ldi	r28, 0x00	; 0
    169c:	d0 e0       	ldi	r29, 0x00	; 0
    169e:	00 e0       	ldi	r16, 0x00	; 0
    16a0:	10 e0       	ldi	r17, 0x00	; 0
    16a2:	be 01       	movw	r22, r28
    16a4:	c7 01       	movw	r24, r14
    16a6:	ed da       	rcall	.-2598   	; 0xc82 <rb16_get_nth>
    16a8:	08 0f       	add	r16, r24
    16aa:	19 1f       	adc	r17, r25
    16ac:	21 96       	adiw	r28, 0x01	; 1
    16ae:	ca 30       	cpi	r28, 0x0A	; 10
    16b0:	d1 05       	cpc	r29, r1
    16b2:	b9 f7       	brne	.-18     	; 0x16a2 <servo_pid+0x22>
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	c7 01       	movw	r24, r14
    16ba:	e3 da       	rcall	.-2618   	; 0xc82 <rb16_get_nth>
    16bc:	ec 01       	movw	r28, r24
    16be:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    16c2:	c7 01       	movw	r24, r14
    16c4:	6d dd       	rcall	.-1318   	; 0x11a0 <diff>
    16c6:	6b 01       	movw	r12, r22
    16c8:	7c 01       	movw	r14, r24
    16ca:	be 01       	movw	r22, r28
    16cc:	dd 0f       	add	r29, r29
    16ce:	88 0b       	sbc	r24, r24
    16d0:	99 0b       	sbc	r25, r25
    16d2:	0a d7       	rcall	.+3604   	; 0x24e8 <__floatsisf>
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	a9 01       	movw	r20, r18
    16da:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	48 ec       	ldi	r20, 0xC8	; 200
    16e4:	52 e4       	ldi	r21, 0x42	; 66
    16e6:	2b d6       	rcall	.+3158   	; 0x233e <__divsf3>
    16e8:	4b 01       	movw	r8, r22
    16ea:	5c 01       	movw	r10, r24
    16ec:	b8 01       	movw	r22, r16
    16ee:	11 0f       	add	r17, r17
    16f0:	88 0b       	sbc	r24, r24
    16f2:	99 0b       	sbc	r25, r25
    16f4:	f9 d6       	rcall	.+3570   	; 0x24e8 <__floatsisf>
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	a9 01       	movw	r20, r18
    16fc:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	48 ec       	ldi	r20, 0xC8	; 200
    1706:	52 e4       	ldi	r21, 0x42	; 66
    1708:	1a d6       	rcall	.+3124   	; 0x233e <__divsf3>
    170a:	9b 01       	movw	r18, r22
    170c:	ac 01       	movw	r20, r24
    170e:	c5 01       	movw	r24, r10
    1710:	b4 01       	movw	r22, r8
    1712:	ad d5       	rcall	.+2906   	; 0x226e <__addsf3>
    1714:	4b 01       	movw	r8, r22
    1716:	5c 01       	movw	r10, r24
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	a9 01       	movw	r20, r18
    171e:	c7 01       	movw	r24, r14
    1720:	b6 01       	movw	r22, r12
    1722:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3>
    1726:	9b 01       	movw	r18, r22
    1728:	ac 01       	movw	r20, r24
    172a:	c5 01       	movw	r24, r10
    172c:	b4 01       	movw	r22, r8
    172e:	9f d5       	rcall	.+2878   	; 0x226e <__addsf3>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e8       	ldi	r19, 0x80	; 128
    1734:	4b eb       	ldi	r20, 0xBB	; 187
    1736:	54 e4       	ldi	r21, 0x44	; 68
    1738:	9a d5       	rcall	.+2868   	; 0x226e <__addsf3>
    173a:	a8 d6       	rcall	.+3408   	; 0x248c <__fixunssfsi>
    173c:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <servo_pulse>
    1740:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <servo_pulse+0x1>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	cd d6       	rcall	.+3482   	; 0x24e4 <__floatunsisf>
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a e7       	ldi	r20, 0x7A	; 122
    1750:	54 e4       	ldi	r21, 0x44	; 68
    1752:	f5 d5       	rcall	.+3050   	; 0x233e <__divsf3>
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4a ef       	ldi	r20, 0xFA	; 250
    175a:	53 e4       	ldi	r21, 0x43	; 67
    175c:	f3 d7       	rcall	.+4070   	; 0x2744 <__mulsf3>
    175e:	96 d6       	rcall	.+3372   	; 0x248c <__fixunssfsi>
    1760:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1764:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	bf 90       	pop	r11
    177a:	af 90       	pop	r10
    177c:	9f 90       	pop	r9
    177e:	8f 90       	pop	r8
    1780:	08 95       	ret

00001782 <clock_init>:
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	85 e0       	ldi	r24, 0x05	; 5
    1786:	6f db       	rcall	.-2338   	; 0xe66 <sysclk_enable_module>
    1788:	e0 e0       	ldi	r30, 0x00	; 0
    178a:	fa e0       	ldi	r31, 0x0A	; 10
    178c:	87 e0       	ldi	r24, 0x07	; 7
    178e:	80 83       	st	Z, r24
    1790:	81 e1       	ldi	r24, 0x11	; 17
    1792:	9a e7       	ldi	r25, 0x7A	; 122
    1794:	86 a3       	std	Z+38, r24	; 0x26
    1796:	97 a3       	std	Z+39, r25	; 0x27
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	86 83       	std	Z+6, r24	; 0x06
    179c:	08 95       	ret

0000179e <system_init>:
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	2c db       	rcall	.-2472   	; 0xdfc <sysclk_init>
    17a4:	6b ea       	ldi	r22, 0xAB	; 171
    17a6:	79 e2       	ldi	r23, 0x29	; 41
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	78 db       	rcall	.-2320   	; 0xe9e <__portable_avr_delay_cycles>
    17ae:	78 94       	sei
    17b0:	8c eb       	ldi	r24, 0xBC	; 188
    17b2:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    17b6:	87 e0       	ldi	r24, 0x07	; 7
    17b8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    17bc:	a5 d9       	rcall	.-3254   	; 0xb08 <data_terminal_init>
    17be:	6b ea       	ldi	r22, 0xAB	; 171
    17c0:	70 eb       	ldi	r23, 0xB0	; 176
    17c2:	88 e2       	ldi	r24, 0x28	; 40
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	6b db       	rcall	.-2346   	; 0xe9e <__portable_avr_delay_cycles>
    17c8:	6b ea       	ldi	r22, 0xAB	; 171
    17ca:	79 e2       	ldi	r23, 0x29	; 41
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	66 db       	rcall	.-2356   	; 0xe9e <__portable_avr_delay_cycles>
    17d2:	6c d9       	rcall	.-3368   	; 0xaac <spi_init>
    17d4:	6b ea       	ldi	r22, 0xAB	; 171
    17d6:	79 e2       	ldi	r23, 0x29	; 41
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	60 db       	rcall	.-2368   	; 0xe9e <__portable_avr_delay_cycles>
    17de:	6a db       	rcall	.-2348   	; 0xeb4 <pressure_init>
    17e0:	6b ea       	ldi	r22, 0xAB	; 171
    17e2:	79 e2       	ldi	r23, 0x29	; 41
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	5a db       	rcall	.-2380   	; 0xe9e <__portable_avr_delay_cycles>
    17ea:	d4 d9       	rcall	.-3160   	; 0xb94 <XBEE_spi_init>
    17ec:	aa db       	rcall	.-2220   	; 0xf42 <gps_init>
    17ee:	c9 df       	rcall	.-110    	; 0x1782 <clock_init>
    17f0:	9d d8       	rcall	.-3782   	; 0x92c <cam_init>
    17f2:	66 e5       	ldi	r22, 0x56	; 86
    17f4:	70 ed       	ldi	r23, 0xD0	; 208
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	51 db       	rcall	.-2398   	; 0xe9e <__portable_avr_delay_cycles>
    17fc:	f3 de       	rcall	.-538    	; 0x15e4 <state_check>
    17fe:	ab db       	rcall	.-2218   	; 0xf56 <get_pressure>
    1800:	60 93 2b 20 	sts	0x202B, r22	; 0x80202b <ground_p>
    1804:	70 93 2c 20 	sts	0x202C, r23	; 0x80202c <ground_p+0x1>
    1808:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p+0x2>
    180c:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x3>
    1810:	03 e3       	ldi	r16, 0x33	; 51
    1812:	13 e1       	ldi	r17, 0x13	; 19
    1814:	20 e9       	ldi	r18, 0x90	; 144
    1816:	33 e4       	ldi	r19, 0x43	; 67
    1818:	00 93 27 20 	sts	0x2027, r16	; 0x802027 <ground_t>
    181c:	10 93 28 20 	sts	0x2028, r17	; 0x802028 <ground_t+0x1>
    1820:	20 93 29 20 	sts	0x2029, r18	; 0x802029 <ground_t+0x2>
    1824:	30 93 2a 20 	sts	0x202A, r19	; 0x80202a <ground_t+0x3>
    1828:	52 dc       	rcall	.-1884   	; 0x10ce <get_altitude>
    182a:	60 93 01 21 	sts	0x2101, r22	; 0x802101 <ground_a>
    182e:	70 93 02 21 	sts	0x2102, r23	; 0x802102 <ground_a+0x1>
    1832:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <ground_a+0x2>
    1836:	90 93 04 21 	sts	0x2104, r25	; 0x802104 <ground_a+0x3>
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <main>:
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	ce 56       	subi	r28, 0x6E	; 110
    184a:	d1 09       	sbc	r29, r1
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	a6 df       	rcall	.-180    	; 0x179e <system_init>
    1852:	66 e5       	ldi	r22, 0x56	; 86
    1854:	73 e2       	ldi	r23, 0x23	; 35
    1856:	88 e0       	ldi	r24, 0x08	; 8
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	21 db       	rcall	.-2494   	; 0xe9e <__portable_avr_delay_cycles>
    185c:	14 e1       	ldi	r17, 0x14	; 20
    185e:	be 01       	movw	r22, r28
    1860:	6f 5f       	subi	r22, 0xFF	; 255
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	fb 01       	movw	r30, r22
    1866:	81 2f       	mov	r24, r17
    1868:	11 92       	st	Z+, r1
    186a:	8a 95       	dec	r24
    186c:	e9 f7       	brne	.-6      	; 0x1868 <main+0x28>
    186e:	4a e0       	ldi	r20, 0x0A	; 10
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	ce 01       	movw	r24, r28
    1874:	45 96       	adiw	r24, 0x15	; 21
    1876:	fb d9       	rcall	.-3082   	; 0xc6e <rb16_init>
    1878:	be 01       	movw	r22, r28
    187a:	63 5e       	subi	r22, 0xE3	; 227
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	88 e2       	ldi	r24, 0x28	; 40
    1880:	fb 01       	movw	r30, r22
    1882:	11 92       	st	Z+, r1
    1884:	8a 95       	dec	r24
    1886:	e9 f7       	brne	.-6      	; 0x1882 <main+0x42>
    1888:	4a e0       	ldi	r20, 0x0A	; 10
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	ce 01       	movw	r24, r28
    188e:	8b 5b       	subi	r24, 0xBB	; 187
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	75 da       	rcall	.-2838   	; 0xd7e <rb32_init>
    1894:	be 01       	movw	r22, r28
    1896:	63 5b       	subi	r22, 0xB3	; 179
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	fb 01       	movw	r30, r22
    189c:	11 92       	st	Z+, r1
    189e:	1a 95       	dec	r17
    18a0:	e9 f7       	brne	.-6      	; 0x189c <main+0x5c>
    18a2:	4a e0       	ldi	r20, 0x0A	; 10
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	ce 01       	movw	r24, r28
    18a8:	8f 59       	subi	r24, 0x9F	; 159
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	e0 d9       	rcall	.-3136   	; 0xc6e <rb16_init>
    18ae:	af 96       	adiw	r28, 0x2f	; 47
    18b0:	1f ae       	std	Y+63, r1	; 0x3f
    18b2:	af 97       	sbiw	r28, 0x2f	; 47
    18b4:	ae 96       	adiw	r28, 0x2e	; 46
    18b6:	1f ae       	std	Y+63, r1	; 0x3f
    18b8:	ae 97       	sbiw	r28, 0x2e	; 46
    18ba:	0f 2e       	mov	r0, r31
    18bc:	f4 e2       	ldi	r31, 0x24	; 36
    18be:	cf 2e       	mov	r12, r31
    18c0:	f1 e2       	ldi	r31, 0x21	; 33
    18c2:	df 2e       	mov	r13, r31
    18c4:	f0 2d       	mov	r31, r0
    18c6:	be 01       	movw	r22, r28
    18c8:	6b 5b       	subi	r22, 0xBB	; 187
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	ce 01       	movw	r24, r28
    18ce:	45 96       	adiw	r24, 0x15	; 21
    18d0:	0d de       	rcall	.-998    	; 0x14ec <data_collect>
    18d2:	88 de       	rcall	.-752    	; 0x15e4 <state_check>
    18d4:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <state>
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	41 f0       	breq	.+16     	; 0x18ec <main+0xac>
    18dc:	08 f4       	brcc	.+2      	; 0x18e0 <main+0xa0>
    18de:	58 c0       	rjmp	.+176    	; 0x1990 <main+0x150>
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	f9 f0       	breq	.+62     	; 0x1922 <main+0xe2>
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	09 f4       	brne	.+2      	; 0x18ea <main+0xaa>
    18e8:	47 c0       	rjmp	.+142    	; 0x1978 <main+0x138>
    18ea:	50 c0       	rjmp	.+160    	; 0x198c <main+0x14c>
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	46 e1       	ldi	r20, 0x16	; 22
    18f2:	54 e4       	ldi	r21, 0x44	; 68
    18f4:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <alt>
    18f8:	70 91 e1 20 	lds	r23, 0x20E1	; 0x8020e1 <alt+0x1>
    18fc:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <alt+0x2>
    1900:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <alt+0x3>
    1904:	14 d7       	rcall	.+3624   	; 0x272e <__gesf2>
    1906:	18 16       	cp	r1, r24
    1908:	0c f0       	brlt	.+2      	; 0x190c <main+0xcc>
    190a:	42 c0       	rjmp	.+132    	; 0x1990 <main+0x150>
    190c:	ae 96       	adiw	r28, 0x2e	; 46
    190e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1910:	ae 97       	sbiw	r28, 0x2e	; 46
    1912:	f1 11       	cpse	r31, r1
    1914:	3d c0       	rjmp	.+122    	; 0x1990 <main+0x150>
    1916:	10 d8       	rcall	.-4064   	; 0x938 <cam_switch>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	ae 96       	adiw	r28, 0x2e	; 46
    191c:	8f af       	std	Y+63, r24	; 0x3f
    191e:	ae 97       	sbiw	r28, 0x2e	; 46
    1920:	37 c0       	rjmp	.+110    	; 0x1990 <main+0x150>
    1922:	ae 96       	adiw	r28, 0x2e	; 46
    1924:	9f ad       	ldd	r25, Y+63	; 0x3f
    1926:	ae 97       	sbiw	r28, 0x2e	; 46
    1928:	91 11       	cpse	r25, r1
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <main+0xf6>
    192c:	05 d8       	rcall	.-4086   	; 0x938 <cam_switch>
    192e:	e1 e0       	ldi	r30, 0x01	; 1
    1930:	ae 96       	adiw	r28, 0x2e	; 46
    1932:	ef af       	std	Y+63, r30	; 0x3f
    1934:	ae 97       	sbiw	r28, 0x2e	; 46
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	41 ee       	ldi	r20, 0xE1	; 225
    193c:	53 e4       	ldi	r21, 0x43	; 67
    193e:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <alt>
    1942:	70 91 e1 20 	lds	r23, 0x20E1	; 0x8020e1 <alt+0x1>
    1946:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <alt+0x2>
    194a:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <alt+0x3>
    194e:	8e d4       	rcall	.+2332   	; 0x226c <__subsf3>
    1950:	98 d5       	rcall	.+2864   	; 0x2482 <__fixsfsi>
    1952:	67 5f       	subi	r22, 0xF7	; 247
    1954:	7f 4f       	sbci	r23, 0xFF	; 255
    1956:	63 31       	cpi	r22, 0x13	; 19
    1958:	71 05       	cpc	r23, r1
    195a:	28 f4       	brcc	.+10     	; 0x1966 <main+0x126>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <released>
    1962:	0e 94 95 04 	call	0x92a	; 0x92a <hall_sensor_init>
    1966:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <released>
    196a:	88 23       	and	r24, r24
    196c:	89 f0       	breq	.+34     	; 0x1990 <main+0x150>
    196e:	ce 01       	movw	r24, r28
    1970:	8f 59       	subi	r24, 0x9F	; 159
    1972:	9f 4f       	sbci	r25, 0xFF	; 255
    1974:	85 de       	rcall	.-758    	; 0x1680 <servo_pid>
    1976:	0c c0       	rjmp	.+24     	; 0x1990 <main+0x150>
    1978:	af 96       	adiw	r28, 0x2f	; 47
    197a:	ff ad       	ldd	r31, Y+63	; 0x3f
    197c:	af 97       	sbiw	r28, 0x2f	; 47
    197e:	f1 11       	cpse	r31, r1
    1980:	07 c0       	rjmp	.+14     	; 0x1990 <main+0x150>
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	af 96       	adiw	r28, 0x2f	; 47
    1986:	8f af       	std	Y+63, r24	; 0x3f
    1988:	af 97       	sbiw	r28, 0x2f	; 47
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <main+0x150>
    198c:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <state>
    1990:	e0 90 ec 20 	lds	r14, 0x20EC	; 0x8020ec <packets>
    1994:	f0 90 ed 20 	lds	r15, 0x20ED	; 0x8020ed <packets+0x1>
    1998:	9f ef       	ldi	r25, 0xFF	; 255
    199a:	e9 1a       	sub	r14, r25
    199c:	f9 0a       	sbc	r15, r25
    199e:	e0 92 ec 20 	sts	0x20EC, r14	; 0x8020ec <packets>
    19a2:	f0 92 ed 20 	sts	0x20ED, r15	; 0x8020ed <packets+0x1>
    19a6:	20 90 ee 20 	lds	r2, 0x20EE	; 0x8020ee <timer>
    19aa:	30 90 ef 20 	lds	r3, 0x20EF	; 0x8020ef <timer+0x1>
    19ae:	21 14       	cp	r2, r1
    19b0:	31 04       	cpc	r3, r1
    19b2:	41 f0       	breq	.+16     	; 0x19c4 <main+0x184>
    19b4:	c7 01       	movw	r24, r14
    19b6:	b1 01       	movw	r22, r2
    19b8:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    19bc:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <rate>
    19c0:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <rate+0x1>
    19c4:	60 91 c8 20 	lds	r22, 0x20C8	; 0x8020c8 <gps_alt>
    19c8:	70 91 c9 20 	lds	r23, 0x20C9	; 0x8020c9 <gps_alt+0x1>
    19cc:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <gps_alt+0x2>
    19d0:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <gps_alt+0x3>
    19d4:	56 d5       	rcall	.+2732   	; 0x2482 <__fixsfsi>
    19d6:	16 2f       	mov	r17, r22
    19d8:	07 2f       	mov	r16, r23
    19da:	80 90 cc 20 	lds	r8, 0x20CC	; 0x8020cc <gps_long>
    19de:	90 90 cd 20 	lds	r9, 0x20CD	; 0x8020cd <gps_long+0x1>
    19e2:	a0 90 ce 20 	lds	r10, 0x20CE	; 0x8020ce <gps_long+0x2>
    19e6:	b0 90 cf 20 	lds	r11, 0x20CF	; 0x8020cf <gps_long+0x3>
    19ea:	40 90 d0 20 	lds	r4, 0x20D0	; 0x8020d0 <gps_lat>
    19ee:	50 90 d1 20 	lds	r5, 0x20D1	; 0x8020d1 <gps_lat+0x1>
    19f2:	60 90 d2 20 	lds	r6, 0x20D2	; 0x8020d2 <gps_lat+0x2>
    19f6:	70 90 d3 20 	lds	r7, 0x20D3	; 0x8020d3 <gps_lat+0x3>
    19fa:	60 91 d4 20 	lds	r22, 0x20D4	; 0x8020d4 <gps_t>
    19fe:	70 91 d5 20 	lds	r23, 0x20D5	; 0x8020d5 <gps_t+0x1>
    1a02:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <gps_t+0x2>
    1a06:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <gps_t+0x3>
    1a0a:	3b d5       	rcall	.+2678   	; 0x2482 <__fixsfsi>
    1a0c:	ad 96       	adiw	r28, 0x2d	; 45
    1a0e:	6c af       	std	Y+60, r22	; 0x3c
    1a10:	7d af       	std	Y+61, r23	; 0x3d
    1a12:	8e af       	std	Y+62, r24	; 0x3e
    1a14:	9f af       	std	Y+63, r25	; 0x3f
    1a16:	ad 97       	sbiw	r28, 0x2d	; 45
    1a18:	1f 92       	push	r1
    1a1a:	1f 92       	push	r1
    1a1c:	60 91 b6 20 	lds	r22, 0x20B6	; 0x8020b6 <__data_end>
    1a20:	70 91 b7 20 	lds	r23, 0x20B7	; 0x8020b7 <__data_end+0x1>
    1a24:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <__data_end+0x2>
    1a28:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <__data_end+0x3>
    1a2c:	2a d5       	rcall	.+2644   	; 0x2482 <__fixsfsi>
    1a2e:	7f 93       	push	r23
    1a30:	6f 93       	push	r22
    1a32:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <state>
    1a36:	1f 92       	push	r1
    1a38:	8f 93       	push	r24
    1a3a:	60 91 ba 20 	lds	r22, 0x20BA	; 0x8020ba <rpm>
    1a3e:	70 91 bb 20 	lds	r23, 0x20BB	; 0x8020bb <rpm+0x1>
    1a42:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <rpm+0x2>
    1a46:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <rpm+0x3>
    1a4a:	1b d5       	rcall	.+2614   	; 0x2482 <__fixsfsi>
    1a4c:	7f 93       	push	r23
    1a4e:	6f 93       	push	r22
    1a50:	60 91 be 20 	lds	r22, 0x20BE	; 0x8020be <roll>
    1a54:	70 91 bf 20 	lds	r23, 0x20BF	; 0x8020bf <roll+0x1>
    1a58:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <roll+0x2>
    1a5c:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <roll+0x3>
    1a60:	10 d5       	rcall	.+2592   	; 0x2482 <__fixsfsi>
    1a62:	7f 93       	push	r23
    1a64:	6f 93       	push	r22
    1a66:	60 91 c2 20 	lds	r22, 0x20C2	; 0x8020c2 <pitch>
    1a6a:	70 91 c3 20 	lds	r23, 0x20C3	; 0x8020c3 <pitch+0x1>
    1a6e:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <pitch+0x2>
    1a72:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <pitch+0x3>
    1a76:	05 d5       	rcall	.+2570   	; 0x2482 <__fixsfsi>
    1a78:	7f 93       	push	r23
    1a7a:	6f 93       	push	r22
    1a7c:	80 91 c7 20 	lds	r24, 0x20C7	; 0x8020c7 <gps_sats+0x1>
    1a80:	8f 93       	push	r24
    1a82:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <gps_sats>
    1a86:	8f 93       	push	r24
    1a88:	81 2f       	mov	r24, r17
    1a8a:	90 2f       	mov	r25, r16
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	9c 01       	movw	r18, r24
    1a92:	22 0f       	add	r18, r18
    1a94:	33 1f       	adc	r19, r19
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	82 0f       	add	r24, r18
    1a9c:	93 1f       	adc	r25, r19
    1a9e:	6a e0       	ldi	r22, 0x0A	; 10
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__divmodhi4>
    1aa6:	9f 93       	push	r25
    1aa8:	8f 93       	push	r24
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	34 e2       	ldi	r19, 0x24	; 36
    1ab2:	44 e7       	ldi	r20, 0x74	; 116
    1ab4:	59 e4       	ldi	r21, 0x49	; 73
    1ab6:	c5 01       	movw	r24, r10
    1ab8:	b4 01       	movw	r22, r8
    1aba:	44 d6       	rcall	.+3208   	; 0x2744 <__mulsf3>
    1abc:	e2 d4       	rcall	.+2500   	; 0x2482 <__fixsfsi>
    1abe:	20 e4       	ldi	r18, 0x40	; 64
    1ac0:	32 e4       	ldi	r19, 0x42	; 66
    1ac2:	4f e0       	ldi	r20, 0x0F	; 15
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__divmodsi4>
    1aca:	9b 01       	movw	r18, r22
    1acc:	77 23       	and	r23, r23
    1ace:	24 f4       	brge	.+8      	; 0x1ad8 <main+0x298>
    1ad0:	22 27       	eor	r18, r18
    1ad2:	33 27       	eor	r19, r19
    1ad4:	26 1b       	sub	r18, r22
    1ad6:	37 0b       	sbc	r19, r23
    1ad8:	c9 01       	movw	r24, r18
    1ada:	33 0f       	add	r19, r19
    1adc:	aa 0b       	sbc	r26, r26
    1ade:	bb 0b       	sbc	r27, r27
    1ae0:	bf 93       	push	r27
    1ae2:	af 93       	push	r26
    1ae4:	9f 93       	push	r25
    1ae6:	8f 93       	push	r24
    1ae8:	c5 01       	movw	r24, r10
    1aea:	b4 01       	movw	r22, r8
    1aec:	ca d4       	rcall	.+2452   	; 0x2482 <__fixsfsi>
    1aee:	7f 93       	push	r23
    1af0:	6f 93       	push	r22
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	34 e2       	ldi	r19, 0x24	; 36
    1af6:	44 e7       	ldi	r20, 0x74	; 116
    1af8:	59 e4       	ldi	r21, 0x49	; 73
    1afa:	c3 01       	movw	r24, r6
    1afc:	b2 01       	movw	r22, r4
    1afe:	22 d6       	rcall	.+3140   	; 0x2744 <__mulsf3>
    1b00:	c0 d4       	rcall	.+2432   	; 0x2482 <__fixsfsi>
    1b02:	20 e4       	ldi	r18, 0x40	; 64
    1b04:	32 e4       	ldi	r19, 0x42	; 66
    1b06:	4f e0       	ldi	r20, 0x0F	; 15
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__divmodsi4>
    1b0e:	9f 93       	push	r25
    1b10:	8f 93       	push	r24
    1b12:	7f 93       	push	r23
    1b14:	6f 93       	push	r22
    1b16:	c3 01       	movw	r24, r6
    1b18:	b2 01       	movw	r22, r4
    1b1a:	b3 d4       	rcall	.+2406   	; 0x2482 <__fixsfsi>
    1b1c:	7f 93       	push	r23
    1b1e:	6f 93       	push	r22
    1b20:	ad 96       	adiw	r28, 0x2d	; 45
    1b22:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b24:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b26:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b28:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b2a:	ad 97       	sbiw	r28, 0x2d	; 45
    1b2c:	24 e6       	ldi	r18, 0x64	; 100
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	fb d7       	rcall	.+4086   	; 0x2b2c <__divmodsi4>
    1b36:	7f 93       	push	r23
    1b38:	6f 93       	push	r22
    1b3a:	ad 96       	adiw	r28, 0x2d	; 45
    1b3c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b3e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b40:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b42:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b44:	ad 97       	sbiw	r28, 0x2d	; 45
    1b46:	20 e1       	ldi	r18, 0x10	; 16
    1b48:	37 e2       	ldi	r19, 0x27	; 39
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	ee d7       	rcall	.+4060   	; 0x2b2c <__divmodsi4>
    1b50:	12 2f       	mov	r17, r18
    1b52:	03 2f       	mov	r16, r19
    1b54:	24 e6       	ldi	r18, 0x64	; 100
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	e7 d7       	rcall	.+4046   	; 0x2b2c <__divmodsi4>
    1b5e:	3f 93       	push	r19
    1b60:	2f 93       	push	r18
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <volt>
    1b6a:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <volt+0x1>
    1b6e:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <volt+0x2>
    1b72:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <volt+0x3>
    1b76:	85 d4       	rcall	.+2314   	; 0x2482 <__fixsfsi>
    1b78:	7f 93       	push	r23
    1b7a:	6f 93       	push	r22
    1b7c:	23 e3       	ldi	r18, 0x33	; 51
    1b7e:	33 e9       	ldi	r19, 0x93	; 147
    1b80:	48 e8       	ldi	r20, 0x88	; 136
    1b82:	53 e4       	ldi	r21, 0x43	; 67
    1b84:	60 91 e4 20 	lds	r22, 0x20E4	; 0x8020e4 <temp>
    1b88:	70 91 e5 20 	lds	r23, 0x20E5	; 0x8020e5 <temp+0x1>
    1b8c:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <temp+0x2>
    1b90:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <temp+0x3>
    1b94:	6b d3       	rcall	.+1750   	; 0x226c <__subsf3>
    1b96:	75 d4       	rcall	.+2282   	; 0x2482 <__fixsfsi>
    1b98:	7f 93       	push	r23
    1b9a:	6f 93       	push	r22
    1b9c:	60 91 e8 20 	lds	r22, 0x20E8	; 0x8020e8 <press>
    1ba0:	70 91 e9 20 	lds	r23, 0x20E9	; 0x8020e9 <press+0x1>
    1ba4:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <press+0x2>
    1ba8:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <press+0x3>
    1bac:	6a d4       	rcall	.+2260   	; 0x2482 <__fixsfsi>
    1bae:	9f 93       	push	r25
    1bb0:	8f 93       	push	r24
    1bb2:	7f 93       	push	r23
    1bb4:	6f 93       	push	r22
    1bb6:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <alt>
    1bba:	70 91 e1 20 	lds	r23, 0x20E1	; 0x8020e1 <alt+0x1>
    1bbe:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <alt+0x2>
    1bc2:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <alt+0x3>
    1bc6:	5d d4       	rcall	.+2234   	; 0x2482 <__fixsfsi>
    1bc8:	7f 93       	push	r23
    1bca:	6f 93       	push	r22
    1bcc:	ff 92       	push	r15
    1bce:	ef 92       	push	r14
    1bd0:	3f 92       	push	r3
    1bd2:	2f 92       	push	r2
    1bd4:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    1bd8:	8f 93       	push	r24
    1bda:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    1bde:	8f 93       	push	r24
    1be0:	df 92       	push	r13
    1be2:	cf 92       	push	r12
    1be4:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <sprintf>
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	df 92       	push	r13
    1bee:	cf 92       	push	r12
    1bf0:	0e 94 33 16 	call	0x2c66	; 0x2c66 <printf>
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	66 ce       	rjmp	.-820    	; 0x18c6 <main+0x86>

00001bfa <__vector_47>:
	
}

ISR(TCE0_OVF_vect){
    1bfa:	1f 92       	push	r1
    1bfc:	0f 92       	push	r0
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	0f 92       	push	r0
    1c02:	11 24       	eor	r1, r1
    1c04:	08 b6       	in	r0, 0x38	; 56
    1c06:	0f 92       	push	r0
    1c08:	18 be       	out	0x38, r1	; 56
    1c0a:	09 b6       	in	r0, 0x39	; 57
    1c0c:	0f 92       	push	r0
    1c0e:	19 be       	out	0x39, r1	; 57
    1c10:	0b b6       	in	r0, 0x3b	; 59
    1c12:	0f 92       	push	r0
    1c14:	1b be       	out	0x3b, r1	; 59
    1c16:	2f 93       	push	r18
    1c18:	3f 93       	push	r19
    1c1a:	4f 93       	push	r20
    1c1c:	5f 93       	push	r21
    1c1e:	6f 93       	push	r22
    1c20:	7f 93       	push	r23
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	af 93       	push	r26
    1c28:	bf 93       	push	r27
    1c2a:	ef 93       	push	r30
    1c2c:	ff 93       	push	r31
	timer++;
    1c2e:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <timer>
    1c32:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <timer+0x1>
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <timer>
    1c3c:	90 93 ef 20 	sts	0x20EF, r25	; 0x8020ef <timer+0x1>
	//printf(str);
	XBEE_spi_write(str);
    1c40:	84 e2       	ldi	r24, 0x24	; 36
    1c42:	91 e2       	ldi	r25, 0x21	; 33
    1c44:	0e 94 da 05 	call	0xbb4	; 0xbb4 <XBEE_spi_write>
}
    1c48:	ff 91       	pop	r31
    1c4a:	ef 91       	pop	r30
    1c4c:	bf 91       	pop	r27
    1c4e:	af 91       	pop	r26
    1c50:	9f 91       	pop	r25
    1c52:	8f 91       	pop	r24
    1c54:	7f 91       	pop	r23
    1c56:	6f 91       	pop	r22
    1c58:	5f 91       	pop	r21
    1c5a:	4f 91       	pop	r20
    1c5c:	3f 91       	pop	r19
    1c5e:	2f 91       	pop	r18
    1c60:	0f 90       	pop	r0
    1c62:	0b be       	out	0x3b, r0	; 59
    1c64:	0f 90       	pop	r0
    1c66:	09 be       	out	0x39, r0	; 57
    1c68:	0f 90       	pop	r0
    1c6a:	08 be       	out	0x38, r0	; 56
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <__vector_91>:
	xbee_command(c);
}
*/

// GPS recording
ISR(USARTD1_RXC_vect){
    1c76:	1f 92       	push	r1
    1c78:	0f 92       	push	r0
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	0f 92       	push	r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	08 b6       	in	r0, 0x38	; 56
    1c82:	0f 92       	push	r0
    1c84:	18 be       	out	0x38, r1	; 56
    1c86:	09 b6       	in	r0, 0x39	; 57
    1c88:	0f 92       	push	r0
    1c8a:	19 be       	out	0x39, r1	; 57
    1c8c:	0a b6       	in	r0, 0x3a	; 58
    1c8e:	0f 92       	push	r0
    1c90:	1a be       	out	0x3a, r1	; 58
    1c92:	0b b6       	in	r0, 0x3b	; 59
    1c94:	0f 92       	push	r0
    1c96:	1b be       	out	0x3b, r1	; 59
    1c98:	8f 92       	push	r8
    1c9a:	9f 92       	push	r9
    1c9c:	af 92       	push	r10
    1c9e:	bf 92       	push	r11
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	1f 93       	push	r17
    1caa:	2f 93       	push	r18
    1cac:	3f 93       	push	r19
    1cae:	4f 93       	push	r20
    1cb0:	5f 93       	push	r21
    1cb2:	6f 93       	push	r22
    1cb4:	7f 93       	push	r23
    1cb6:	8f 93       	push	r24
    1cb8:	9f 93       	push	r25
    1cba:	af 93       	push	r26
    1cbc:	bf 93       	push	r27
    1cbe:	ef 93       	push	r30
    1cc0:	ff 93       	push	r31
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <__vector_91+0x52>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <__vector_91+0x54>
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    1cce:	80 eb       	ldi	r24, 0xB0	; 176
    1cd0:	99 e0       	ldi	r25, 0x09	; 9
    1cd2:	0e 94 93 02 	call	0x526	; 0x526 <usart_getchar>
    1cd6:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    1cd8:	84 32       	cpi	r24, 0x24	; 36
    1cda:	49 f4       	brne	.+18     	; 0x1cee <__vector_91+0x78>
		writing = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <writing>
		pos = 0;
		word_pos = 0;
    1ce2:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <word_pos>
		commas = 0;
    1ce6:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	68 c2       	rjmp	.+1232   	; 0x21be <__vector_91+0x548>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    1cee:	8a 32       	cpi	r24, 0x2A	; 42
    1cf0:	29 f4       	brne	.+10     	; 0x1cfc <__vector_91+0x86>
		commas = 0;
    1cf2:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <commas>
		writing = 0;
    1cf6:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <writing>
    1cfa:	91 c2       	rjmp	.+1314   	; 0x221e <__vector_91+0x5a8>
	}
	else if(c == (uint8_t) ','){
    1cfc:	8c 32       	cpi	r24, 0x2C	; 44
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <__vector_91+0x8c>
    1d00:	49 c2       	rjmp	.+1170   	; 0x2194 <__vector_91+0x51e>
		gps[0] = 32;
    1d02:	e0 e1       	ldi	r30, 0x10	; 16
    1d04:	f1 e2       	ldi	r31, 0x21	; 33
    1d06:	80 e2       	ldi	r24, 0x20	; 32
    1d08:	80 83       	st	Z, r24
		if(gps[1] == 32){
    1d0a:	81 81       	ldd	r24, Z+1	; 0x01
    1d0c:	80 32       	cpi	r24, 0x20	; 32
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <__vector_91+0x9c>
    1d10:	6d c2       	rjmp	.+1242   	; 0x21ec <__vector_91+0x576>
			gps[0] = '0';
    1d12:	80 e3       	ldi	r24, 0x30	; 48
    1d14:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <gps>
    1d18:	69 c2       	rjmp	.+1234   	; 0x21ec <__vector_91+0x576>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d1a:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <gps>
    1d1e:	8e 32       	cpi	r24, 0x2E	; 46
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <__vector_91+0xae>
    1d22:	9e c1       	rjmp	.+828    	; 0x2060 <__vector_91+0x3ea>
    1d24:	a4 c1       	rjmp	.+840    	; 0x206e <__vector_91+0x3f8>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d26:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <gps>
    1d2a:	8e 32       	cpi	r24, 0x2E	; 46
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <__vector_91+0xba>
    1d2e:	ec c0       	rjmp	.+472    	; 0x1f08 <__vector_91+0x292>
    1d30:	f2 c0       	rjmp	.+484    	; 0x1f16 <__vector_91+0x2a0>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d32:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <gps>
    1d36:	8e 32       	cpi	r24, 0x2E	; 46
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <__vector_91+0xc6>
    1d3a:	51 c0       	rjmp	.+162    	; 0x1dde <__vector_91+0x168>
    1d3c:	57 c0       	rjmp	.+174    	; 0x1dec <__vector_91+0x176>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d3e:	91 91       	ld	r25, Z+
    1d40:	9e 32       	cpi	r25, 0x2E	; 46
    1d42:	29 f4       	brne	.+10     	; 0x1d4e <__vector_91+0xd8>
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <__vector_91+0xd2>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1d48:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <idx>
						break;
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    1d4e:	8f 5f       	subi	r24, 0xFF	; 255
    1d50:	8f 30       	cpi	r24, 0x0F	; 15
    1d52:	a9 f7       	brne	.-22     	; 0x1d3e <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1d54:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <idx>
    1d58:	e2 2f       	mov	r30, r18
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	e0 5f       	subi	r30, 0xF0	; 240
    1d5e:	fe 4d       	sbci	r31, 0xDE	; 222
    1d60:	80 e2       	ldi	r24, 0x20	; 32
    1d62:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1d64:	2f 5f       	subi	r18, 0xFF	; 255
    1d66:	2f 30       	cpi	r18, 0x0F	; 15
    1d68:	c8 f4       	brcc	.+50     	; 0x1d9c <__vector_91+0x126>
					if(gps[i] == 32){
    1d6a:	82 2f       	mov	r24, r18
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	fc 01       	movw	r30, r24
    1d70:	e0 5f       	subi	r30, 0xF0	; 240
    1d72:	fe 4d       	sbci	r31, 0xDE	; 222
    1d74:	30 81       	ld	r19, Z
    1d76:	30 32       	cpi	r19, 0x20	; 32
    1d78:	89 f0       	breq	.+34     	; 0x1d9c <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	08 c0       	rjmp	.+16     	; 0x1d8e <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    1d7e:	82 2f       	mov	r24, r18
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	fc 01       	movw	r30, r24
    1d84:	e0 5f       	subi	r30, 0xF0	; 240
    1d86:	fe 4d       	sbci	r31, 0xDE	; 222
    1d88:	30 81       	ld	r19, Z
    1d8a:	30 32       	cpi	r19, 0x20	; 32
    1d8c:	39 f0       	breq	.+14     	; 0x1d9c <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e0 5f       	subi	r30, 0xF0	; 240
    1d92:	fe 4d       	sbci	r31, 0xDE	; 222
    1d94:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    1d96:	2f 5f       	subi	r18, 0xFF	; 255
    1d98:	2f 30       	cpi	r18, 0x0F	; 15
    1d9a:	89 f7       	brne	.-30     	; 0x1d7e <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	9f 93       	push	r25
    1da2:	8f 93       	push	r24
    1da4:	8f ea       	ldi	r24, 0xAF	; 175
    1da6:	90 e2       	ldi	r25, 0x20	; 32
    1da8:	9f 93       	push	r25
    1daa:	8f 93       	push	r24
    1dac:	80 e1       	ldi	r24, 0x10	; 16
    1dae:	91 e2       	ldi	r25, 0x21	; 33
    1db0:	9f 93       	push	r25
    1db2:	8f 93       	push	r24
    1db4:	93 d7       	rcall	.+3878   	; 0x2cdc <sscanf>
				gps_t = (double) val;
    1db6:	69 81       	ldd	r22, Y+1	; 0x01
    1db8:	7a 81       	ldd	r23, Y+2	; 0x02
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	94 d3       	rcall	.+1832   	; 0x24e8 <__floatsisf>
    1dc0:	60 93 d4 20 	sts	0x20D4, r22	; 0x8020d4 <gps_t>
    1dc4:	70 93 d5 20 	sts	0x20D5, r23	; 0x8020d5 <gps_t+0x1>
    1dc8:	80 93 d6 20 	sts	0x20D6, r24	; 0x8020d6 <gps_t+0x2>
    1dcc:	90 93 d7 20 	sts	0x20D7, r25	; 0x8020d7 <gps_t+0x3>
				break;
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	bd c1       	rjmp	.+890    	; 0x2158 <__vector_91+0x4e2>
    1dde:	e1 e1       	ldi	r30, 0x11	; 17
    1de0:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    1de2:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    1de4:	91 91       	ld	r25, Z+
    1de6:	9e 32       	cpi	r25, 0x2E	; 46
    1de8:	29 f4       	brne	.+10     	; 0x1df4 <__vector_91+0x17e>
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <__vector_91+0x178>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1dee:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <idx>
						break;
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <__vector_91+0x184>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	8f 30       	cpi	r24, 0x0F	; 15
    1df8:	a9 f7       	brne	.-22     	; 0x1de4 <__vector_91+0x16e>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1dfa:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <idx>
    1dfe:	42 2f       	mov	r20, r18
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	fa 01       	movw	r30, r20
    1e04:	e0 5f       	subi	r30, 0xF0	; 240
    1e06:	fe 4d       	sbci	r31, 0xDE	; 222
    1e08:	80 e2       	ldi	r24, 0x20	; 32
    1e0a:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1e0c:	2f 5f       	subi	r18, 0xFF	; 255
    1e0e:	2f 30       	cpi	r18, 0x0F	; 15
    1e10:	f8 f4       	brcc	.+62     	; 0x1e50 <__vector_91+0x1da>
					if(gps[i] == 32){
    1e12:	82 2f       	mov	r24, r18
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	fc 01       	movw	r30, r24
    1e18:	e0 5f       	subi	r30, 0xF0	; 240
    1e1a:	fe 4d       	sbci	r31, 0xDE	; 222
    1e1c:	30 81       	ld	r19, Z
    1e1e:	30 32       	cpi	r19, 0x20	; 32
    1e20:	b9 f0       	breq	.+46     	; 0x1e50 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    1e22:	60 e2       	ldi	r22, 0x20	; 32
    1e24:	08 c0       	rjmp	.+16     	; 0x1e36 <__vector_91+0x1c0>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    1e26:	82 2f       	mov	r24, r18
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e0 5f       	subi	r30, 0xF0	; 240
    1e2e:	fe 4d       	sbci	r31, 0xDE	; 222
    1e30:	30 81       	ld	r19, Z
    1e32:	30 32       	cpi	r19, 0x20	; 32
    1e34:	69 f0       	breq	.+26     	; 0x1e50 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
    1e36:	fc 01       	movw	r30, r24
    1e38:	e4 1b       	sub	r30, r20
    1e3a:	f5 0b       	sbc	r31, r21
    1e3c:	e2 5e       	subi	r30, 0xE2	; 226
    1e3e:	fe 4d       	sbci	r31, 0xDE	; 222
    1e40:	30 83       	st	Z, r19
					gps[i] = 32;
    1e42:	fc 01       	movw	r30, r24
    1e44:	e0 5f       	subi	r30, 0xF0	; 240
    1e46:	fe 4d       	sbci	r31, 0xDE	; 222
    1e48:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    1e4a:	2f 5f       	subi	r18, 0xFF	; 255
    1e4c:	2f 30       	cpi	r18, 0x0F	; 15
    1e4e:	59 f7       	brne	.-42     	; 0x1e26 <__vector_91+0x1b0>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    1e50:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <dec>
    1e54:	80 32       	cpi	r24, 0x20	; 32
    1e56:	19 f4       	brne	.+6      	; 0x1e5e <__vector_91+0x1e8>
					dec[0] = '0';
    1e58:	80 e3       	ldi	r24, 0x30	; 48
    1e5a:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <dec>
				}
				sscanf(gps,"%ld",&val);
    1e5e:	ce 01       	movw	r24, r28
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	9f 93       	push	r25
    1e64:	8f 93       	push	r24
    1e66:	8f ea       	ldi	r24, 0xAF	; 175
    1e68:	90 e2       	ldi	r25, 0x20	; 32
    1e6a:	9f 93       	push	r25
    1e6c:	8f 93       	push	r24
    1e6e:	80 e1       	ldi	r24, 0x10	; 16
    1e70:	91 e2       	ldi	r25, 0x21	; 33
    1e72:	9f 93       	push	r25
    1e74:	8f 93       	push	r24
    1e76:	32 d7       	rcall	.+3684   	; 0x2cdc <sscanf>
				sscanf(dec,"%d",&val2);
    1e78:	ce 01       	movw	r24, r28
    1e7a:	05 96       	adiw	r24, 0x05	; 5
    1e7c:	9f 93       	push	r25
    1e7e:	8f 93       	push	r24
    1e80:	83 eb       	ldi	r24, 0xB3	; 179
    1e82:	90 e2       	ldi	r25, 0x20	; 32
    1e84:	9f 93       	push	r25
    1e86:	8f 93       	push	r24
    1e88:	8f e1       	ldi	r24, 0x1F	; 31
    1e8a:	91 e2       	ldi	r25, 0x21	; 33
    1e8c:	9f 93       	push	r25
    1e8e:	8f 93       	push	r24
    1e90:	25 d7       	rcall	.+3658   	; 0x2cdc <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    1e92:	89 80       	ldd	r8, Y+1	; 0x01
    1e94:	9a 80       	ldd	r9, Y+2	; 0x02
    1e96:	ab 80       	ldd	r10, Y+3	; 0x03
    1e98:	bc 80       	ldd	r11, Y+4	; 0x04
    1e9a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e9c:	7e 81       	ldd	r23, Y+6	; 0x06
    1e9e:	07 2e       	mov	r0, r23
    1ea0:	00 0c       	add	r0, r0
    1ea2:	88 0b       	sbc	r24, r24
    1ea4:	99 0b       	sbc	r25, r25
    1ea6:	20 d3       	rcall	.+1600   	; 0x24e8 <__floatsisf>
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e4       	ldi	r19, 0x40	; 64
    1eac:	4c e1       	ldi	r20, 0x1C	; 28
    1eae:	56 e4       	ldi	r21, 0x46	; 70
    1eb0:	46 d2       	rcall	.+1164   	; 0x233e <__divsf3>
    1eb2:	6b 01       	movw	r12, r22
    1eb4:	7c 01       	movw	r14, r24
    1eb6:	c5 01       	movw	r24, r10
    1eb8:	b4 01       	movw	r22, r8
    1eba:	24 e6       	ldi	r18, 0x64	; 100
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	34 d6       	rcall	.+3176   	; 0x2b2c <__divmodsi4>
    1ec4:	49 01       	movw	r8, r18
    1ec6:	5a 01       	movw	r10, r20
    1ec8:	0f d3       	rcall	.+1566   	; 0x24e8 <__floatsisf>
    1eca:	9b 01       	movw	r18, r22
    1ecc:	ac 01       	movw	r20, r24
    1ece:	c7 01       	movw	r24, r14
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	cd d1       	rcall	.+922    	; 0x226e <__addsf3>
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e7       	ldi	r20, 0x70	; 112
    1eda:	52 e4       	ldi	r21, 0x42	; 66
    1edc:	30 d2       	rcall	.+1120   	; 0x233e <__divsf3>
    1ede:	6b 01       	movw	r12, r22
    1ee0:	7c 01       	movw	r14, r24
    1ee2:	c5 01       	movw	r24, r10
    1ee4:	b4 01       	movw	r22, r8
    1ee6:	00 d3       	rcall	.+1536   	; 0x24e8 <__floatsisf>
    1ee8:	9b 01       	movw	r18, r22
    1eea:	ac 01       	movw	r20, r24
    1eec:	c7 01       	movw	r24, r14
    1eee:	b6 01       	movw	r22, r12
    1ef0:	be d1       	rcall	.+892    	; 0x226e <__addsf3>
    1ef2:	60 93 d0 20 	sts	0x20D0, r22	; 0x8020d0 <gps_lat>
    1ef6:	70 93 d1 20 	sts	0x20D1, r23	; 0x8020d1 <gps_lat+0x1>
    1efa:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <gps_lat+0x2>
    1efe:	90 93 d3 20 	sts	0x20D3, r25	; 0x8020d3 <gps_lat+0x3>
				break;
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	28 c1       	rjmp	.+592    	; 0x2158 <__vector_91+0x4e2>
    1f08:	e1 e1       	ldi	r30, 0x11	; 17
    1f0a:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    1f0e:	91 91       	ld	r25, Z+
    1f10:	9e 32       	cpi	r25, 0x2E	; 46
    1f12:	29 f4       	brne	.+10     	; 0x1f1e <__vector_91+0x2a8>
    1f14:	01 c0       	rjmp	.+2      	; 0x1f18 <__vector_91+0x2a2>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1f18:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <idx>
						break;
    1f1c:	03 c0       	rjmp	.+6      	; 0x1f24 <__vector_91+0x2ae>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    1f1e:	8f 5f       	subi	r24, 0xFF	; 255
    1f20:	8f 30       	cpi	r24, 0x0F	; 15
    1f22:	a9 f7       	brne	.-22     	; 0x1f0e <__vector_91+0x298>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1f24:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <idx>
    1f28:	42 2f       	mov	r20, r18
    1f2a:	50 e0       	ldi	r21, 0x00	; 0
    1f2c:	fa 01       	movw	r30, r20
    1f2e:	e0 5f       	subi	r30, 0xF0	; 240
    1f30:	fe 4d       	sbci	r31, 0xDE	; 222
    1f32:	80 e2       	ldi	r24, 0x20	; 32
    1f34:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1f36:	2f 5f       	subi	r18, 0xFF	; 255
    1f38:	2f 30       	cpi	r18, 0x0F	; 15
    1f3a:	f8 f4       	brcc	.+62     	; 0x1f7a <__vector_91+0x304>
					if(gps[i] == 32){
    1f3c:	82 2f       	mov	r24, r18
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	fc 01       	movw	r30, r24
    1f42:	e0 5f       	subi	r30, 0xF0	; 240
    1f44:	fe 4d       	sbci	r31, 0xDE	; 222
    1f46:	30 81       	ld	r19, Z
    1f48:	30 32       	cpi	r19, 0x20	; 32
    1f4a:	b9 f0       	breq	.+46     	; 0x1f7a <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    1f4c:	60 e2       	ldi	r22, 0x20	; 32
    1f4e:	08 c0       	rjmp	.+16     	; 0x1f60 <__vector_91+0x2ea>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    1f50:	82 2f       	mov	r24, r18
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	fc 01       	movw	r30, r24
    1f56:	e0 5f       	subi	r30, 0xF0	; 240
    1f58:	fe 4d       	sbci	r31, 0xDE	; 222
    1f5a:	30 81       	ld	r19, Z
    1f5c:	30 32       	cpi	r19, 0x20	; 32
    1f5e:	69 f0       	breq	.+26     	; 0x1f7a <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
    1f60:	fc 01       	movw	r30, r24
    1f62:	e4 1b       	sub	r30, r20
    1f64:	f5 0b       	sbc	r31, r21
    1f66:	e2 5e       	subi	r30, 0xE2	; 226
    1f68:	fe 4d       	sbci	r31, 0xDE	; 222
    1f6a:	30 83       	st	Z, r19
					gps[i] = 32;
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	e0 5f       	subi	r30, 0xF0	; 240
    1f70:	fe 4d       	sbci	r31, 0xDE	; 222
    1f72:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    1f74:	2f 5f       	subi	r18, 0xFF	; 255
    1f76:	2f 30       	cpi	r18, 0x0F	; 15
    1f78:	59 f7       	brne	.-42     	; 0x1f50 <__vector_91+0x2da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    1f7a:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <dec>
    1f7e:	80 32       	cpi	r24, 0x20	; 32
    1f80:	19 f4       	brne	.+6      	; 0x1f88 <__vector_91+0x312>
					dec[0] = '0';
    1f82:	80 e3       	ldi	r24, 0x30	; 48
    1f84:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <dec>
				}
				sscanf(gps,"%ld",&val);
    1f88:	ce 01       	movw	r24, r28
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	9f 93       	push	r25
    1f8e:	8f 93       	push	r24
    1f90:	8f ea       	ldi	r24, 0xAF	; 175
    1f92:	90 e2       	ldi	r25, 0x20	; 32
    1f94:	9f 93       	push	r25
    1f96:	8f 93       	push	r24
    1f98:	80 e1       	ldi	r24, 0x10	; 16
    1f9a:	91 e2       	ldi	r25, 0x21	; 33
    1f9c:	9f 93       	push	r25
    1f9e:	8f 93       	push	r24
    1fa0:	9d d6       	rcall	.+3386   	; 0x2cdc <sscanf>
				sscanf(dec,"%d",&val2);
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	05 96       	adiw	r24, 0x05	; 5
    1fa6:	9f 93       	push	r25
    1fa8:	8f 93       	push	r24
    1faa:	83 eb       	ldi	r24, 0xB3	; 179
    1fac:	90 e2       	ldi	r25, 0x20	; 32
    1fae:	9f 93       	push	r25
    1fb0:	8f 93       	push	r24
    1fb2:	8f e1       	ldi	r24, 0x1F	; 31
    1fb4:	91 e2       	ldi	r25, 0x21	; 33
    1fb6:	9f 93       	push	r25
    1fb8:	8f 93       	push	r24
    1fba:	90 d6       	rcall	.+3360   	; 0x2cdc <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    1fbc:	89 80       	ldd	r8, Y+1	; 0x01
    1fbe:	9a 80       	ldd	r9, Y+2	; 0x02
    1fc0:	ab 80       	ldd	r10, Y+3	; 0x03
    1fc2:	bc 80       	ldd	r11, Y+4	; 0x04
    1fc4:	6d 81       	ldd	r22, Y+5	; 0x05
    1fc6:	7e 81       	ldd	r23, Y+6	; 0x06
    1fc8:	07 2e       	mov	r0, r23
    1fca:	00 0c       	add	r0, r0
    1fcc:	88 0b       	sbc	r24, r24
    1fce:	99 0b       	sbc	r25, r25
    1fd0:	8b d2       	rcall	.+1302   	; 0x24e8 <__floatsisf>
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e4       	ldi	r19, 0x40	; 64
    1fd6:	4c e1       	ldi	r20, 0x1C	; 28
    1fd8:	56 e4       	ldi	r21, 0x46	; 70
    1fda:	b1 d1       	rcall	.+866    	; 0x233e <__divsf3>
    1fdc:	6b 01       	movw	r12, r22
    1fde:	7c 01       	movw	r14, r24
    1fe0:	c5 01       	movw	r24, r10
    1fe2:	b4 01       	movw	r22, r8
    1fe4:	24 e6       	ldi	r18, 0x64	; 100
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	9f d5       	rcall	.+2878   	; 0x2b2c <__divmodsi4>
    1fee:	49 01       	movw	r8, r18
    1ff0:	5a 01       	movw	r10, r20
    1ff2:	7a d2       	rcall	.+1268   	; 0x24e8 <__floatsisf>
    1ff4:	9b 01       	movw	r18, r22
    1ff6:	ac 01       	movw	r20, r24
    1ff8:	c7 01       	movw	r24, r14
    1ffa:	b6 01       	movw	r22, r12
    1ffc:	38 d1       	rcall	.+624    	; 0x226e <__addsf3>
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e7       	ldi	r20, 0x70	; 112
    2004:	52 e4       	ldi	r21, 0x42	; 66
    2006:	9b d1       	rcall	.+822    	; 0x233e <__divsf3>
    2008:	6b 01       	movw	r12, r22
    200a:	7c 01       	movw	r14, r24
    200c:	c5 01       	movw	r24, r10
    200e:	b4 01       	movw	r22, r8
    2010:	6b d2       	rcall	.+1238   	; 0x24e8 <__floatsisf>
    2012:	9b 01       	movw	r18, r22
    2014:	ac 01       	movw	r20, r24
    2016:	c7 01       	movw	r24, r14
    2018:	b6 01       	movw	r22, r12
    201a:	29 d1       	rcall	.+594    	; 0x226e <__addsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	b0 58       	subi	r27, 0x80	; 128
    2022:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <gps_long>
    2026:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <gps_long+0x1>
    202a:	a0 93 ce 20 	sts	0x20CE, r26	; 0x8020ce <gps_long+0x2>
    202e:	b0 93 cf 20 	sts	0x20CF, r27	; 0x8020cf <gps_long+0x3>
    2032:	cd bf       	out	0x3d, r28	; 61
				break;
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	90 c0       	rjmp	.+288    	; 0x2158 <__vector_91+0x4e2>
    2038:	86 ec       	ldi	r24, 0xC6	; 198
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    203a:	90 e2       	ldi	r25, 0x20	; 32
    203c:	9f 93       	push	r25
    203e:	8f 93       	push	r24
    2040:	83 eb       	ldi	r24, 0xB3	; 179
    2042:	90 e2       	ldi	r25, 0x20	; 32
    2044:	9f 93       	push	r25
    2046:	8f 93       	push	r24
    2048:	80 e1       	ldi	r24, 0x10	; 16
    204a:	91 e2       	ldi	r25, 0x21	; 33
    204c:	9f 93       	push	r25
    204e:	8f 93       	push	r24
    2050:	45 d6       	rcall	.+3210   	; 0x2cdc <sscanf>
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
				break;
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	7c c0       	rjmp	.+248    	; 0x2158 <__vector_91+0x4e2>
    2060:	e1 e1       	ldi	r30, 0x11	; 17
    2062:	f1 e2       	ldi	r31, 0x21	; 33
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2068:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    206a:	29 f4       	brne	.+10     	; 0x2076 <__vector_91+0x400>
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <__vector_91+0x3fa>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <idx>
						idx = i;
    2074:	03 c0       	rjmp	.+6      	; 0x207c <__vector_91+0x406>
    2076:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    2078:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    207a:	a9 f7       	brne	.-22     	; 0x2066 <__vector_91+0x3f0>
    207c:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2080:	42 2f       	mov	r20, r18
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	fa 01       	movw	r30, r20
    2086:	e0 5f       	subi	r30, 0xF0	; 240
    2088:	fe 4d       	sbci	r31, 0xDE	; 222
    208a:	80 e2       	ldi	r24, 0x20	; 32
    208c:	80 83       	st	Z, r24
    208e:	2f 5f       	subi	r18, 0xFF	; 255
    2090:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    2092:	f8 f4       	brcc	.+62     	; 0x20d2 <__vector_91+0x45c>
    2094:	82 2f       	mov	r24, r18
    2096:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    2098:	fc 01       	movw	r30, r24
    209a:	e0 5f       	subi	r30, 0xF0	; 240
    209c:	fe 4d       	sbci	r31, 0xDE	; 222
    209e:	30 81       	ld	r19, Z
    20a0:	30 32       	cpi	r19, 0x20	; 32
    20a2:	b9 f0       	breq	.+46     	; 0x20d2 <__vector_91+0x45c>
    20a4:	60 e2       	ldi	r22, 0x20	; 32
    20a6:	08 c0       	rjmp	.+16     	; 0x20b8 <__vector_91+0x442>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    20a8:	82 2f       	mov	r24, r18
    20aa:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    20ac:	fc 01       	movw	r30, r24
    20ae:	e0 5f       	subi	r30, 0xF0	; 240
    20b0:	fe 4d       	sbci	r31, 0xDE	; 222
    20b2:	30 81       	ld	r19, Z
    20b4:	30 32       	cpi	r19, 0x20	; 32
    20b6:	69 f0       	breq	.+26     	; 0x20d2 <__vector_91+0x45c>
    20b8:	fc 01       	movw	r30, r24
    20ba:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    20bc:	f5 0b       	sbc	r31, r21
    20be:	e2 5e       	subi	r30, 0xE2	; 226
    20c0:	fe 4d       	sbci	r31, 0xDE	; 222
    20c2:	30 83       	st	Z, r19
    20c4:	fc 01       	movw	r30, r24
    20c6:	e0 5f       	subi	r30, 0xF0	; 240
					gps[i] = 32;
    20c8:	fe 4d       	sbci	r31, 0xDE	; 222
    20ca:	60 83       	st	Z, r22
    20cc:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    20ce:	2f 30       	cpi	r18, 0x0F	; 15
    20d0:	59 f7       	brne	.-42     	; 0x20a8 <__vector_91+0x432>
    20d2:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    20d6:	80 32       	cpi	r24, 0x20	; 32
    20d8:	19 f4       	brne	.+6      	; 0x20e0 <__vector_91+0x46a>
    20da:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    20dc:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <dec>
    20e0:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	9f 93       	push	r25
    20e6:	8f 93       	push	r24
    20e8:	8f ea       	ldi	r24, 0xAF	; 175
    20ea:	90 e2       	ldi	r25, 0x20	; 32
    20ec:	9f 93       	push	r25
    20ee:	8f 93       	push	r24
    20f0:	80 e1       	ldi	r24, 0x10	; 16
    20f2:	91 e2       	ldi	r25, 0x21	; 33
    20f4:	9f 93       	push	r25
    20f6:	8f 93       	push	r24
    20f8:	f1 d5       	rcall	.+3042   	; 0x2cdc <sscanf>
				sscanf(dec,"%d",&val2);
    20fa:	ce 01       	movw	r24, r28
    20fc:	05 96       	adiw	r24, 0x05	; 5
    20fe:	9f 93       	push	r25
    2100:	8f 93       	push	r24
    2102:	83 eb       	ldi	r24, 0xB3	; 179
    2104:	90 e2       	ldi	r25, 0x20	; 32
    2106:	9f 93       	push	r25
    2108:	8f 93       	push	r24
    210a:	8f e1       	ldi	r24, 0x1F	; 31
    210c:	91 e2       	ldi	r25, 0x21	; 33
    210e:	9f 93       	push	r25
    2110:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    2112:	e4 d5       	rcall	.+3016   	; 0x2cdc <sscanf>
    2114:	69 81       	ldd	r22, Y+1	; 0x01
    2116:	7a 81       	ldd	r23, Y+2	; 0x02
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	9c 81       	ldd	r25, Y+4	; 0x04
    211c:	e5 d1       	rcall	.+970    	; 0x24e8 <__floatsisf>
    211e:	6b 01       	movw	r12, r22
    2120:	7c 01       	movw	r14, r24
    2122:	6d 81       	ldd	r22, Y+5	; 0x05
    2124:	7e 81       	ldd	r23, Y+6	; 0x06
    2126:	07 2e       	mov	r0, r23
    2128:	00 0c       	add	r0, r0
    212a:	88 0b       	sbc	r24, r24
    212c:	99 0b       	sbc	r25, r25
    212e:	dc d1       	rcall	.+952    	; 0x24e8 <__floatsisf>
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	02 d1       	rcall	.+516    	; 0x233e <__divsf3>
    213a:	9b 01       	movw	r18, r22
    213c:	ac 01       	movw	r20, r24
    213e:	c7 01       	movw	r24, r14
    2140:	b6 01       	movw	r22, r12
    2142:	95 d0       	rcall	.+298    	; 0x226e <__addsf3>
    2144:	60 93 c8 20 	sts	0x20C8, r22	; 0x8020c8 <gps_alt>
    2148:	70 93 c9 20 	sts	0x20C9, r23	; 0x8020c9 <gps_alt+0x1>
    214c:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <gps_alt+0x2>
    2150:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <gps_alt+0x3>
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <writing>
				break;
    215c:	88 23       	and	r24, r24
		}
	
		if(writing){
    215e:	d1 f0       	breq	.+52     	; 0x2194 <__vector_91+0x51e>
    2160:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <idx>
    2164:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <commas>
			idx = 0;
    2168:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    216a:	80 93 f1 20 	sts	0x20F1, r24	; 0x8020f1 <commas>
    216e:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <word_pos>
    2172:	e0 e1       	ldi	r30, 0x10	; 16
			word_pos = 0;
    2174:	f1 e2       	ldi	r31, 0x21	; 33
    2176:	2f e1       	ldi	r18, 0x1F	; 31
    2178:	31 e2       	ldi	r19, 0x21	; 33
    217a:	80 e2       	ldi	r24, 0x20	; 32
    217c:	81 93       	st	Z+, r24
    217e:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2180:	3f 07       	cpc	r19, r31
    2182:	e1 f7       	brne	.-8      	; 0x217c <__vector_91+0x506>
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2184:	ef e1       	ldi	r30, 0x1F	; 31
    2186:	f1 e2       	ldi	r31, 0x21	; 33
    2188:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    218a:	80 83       	st	Z, r24
    218c:	81 83       	std	Z+1, r24	; 0x01
    218e:	82 83       	std	Z+2, r24	; 0x02
    2190:	83 83       	std	Z+3, r24	; 0x03
    2192:	84 83       	std	Z+4, r24	; 0x04
    2194:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <writing>
    2198:	88 23       	and	r24, r24
			}
		}
	}
		
	if(writing){
    219a:	09 f4       	brne	.+2      	; 0x219e <__vector_91+0x528>
    219c:	40 c0       	rjmp	.+128    	; 0x221e <__vector_91+0x5a8>
    219e:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <pos>
    21a2:	93 30       	cpi	r25, 0x03	; 3
		switch(pos){
    21a4:	19 f0       	breq	.+6      	; 0x21ac <__vector_91+0x536>
    21a6:	94 30       	cpi	r25, 0x04	; 4
    21a8:	31 f0       	breq	.+12     	; 0x21b6 <__vector_91+0x540>
    21aa:	09 c0       	rjmp	.+18     	; 0x21be <__vector_91+0x548>
    21ac:	17 34       	cpi	r17, 0x47	; 71
    21ae:	39 f0       	breq	.+14     	; 0x21be <__vector_91+0x548>
    21b0:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <writing>
			case 3:
				if(c != 'G'){
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <__vector_91+0x548>
					writing = 0;
    21b6:	17 34       	cpi	r17, 0x47	; 71
    21b8:	11 f0       	breq	.+4      	; 0x21be <__vector_91+0x548>
    21ba:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <writing>
				}
				break;
				
			case 4:
				if(c != 'G'){
    21be:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <word_pos>
					writing = 0;
    21c2:	e8 2f       	mov	r30, r24
				}
				break;
		}
		gps[word_pos] = c;
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	e0 5f       	subi	r30, 0xF0	; 240
    21c8:	fe 4d       	sbci	r31, 0xDE	; 222
    21ca:	10 83       	st	Z, r17
    21cc:	8f 5f       	subi	r24, 0xFF	; 255
    21ce:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <word_pos>
		word_pos++;
    21d2:	9f 5f       	subi	r25, 0xFF	; 255
    21d4:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <pos>
		pos++;
    21d8:	22 c0       	rjmp	.+68     	; 0x221e <__vector_91+0x5a8>
    21da:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <gps>
	}
}
    21de:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <__vector_91+0x56e>
    21e2:	b1 cd       	rjmp	.-1182   	; 0x1d46 <__vector_91+0xd0>
    21e4:	e1 e1       	ldi	r30, 0x11	; 17
    21e6:	f1 e2       	ldi	r31, 0x21	; 33
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	a9 cd       	rjmp	.-1198   	; 0x1d3e <__vector_91+0xc8>
    21ec:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    21ee:	1a 82       	std	Y+2, r1	; 0x02
    21f0:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    21f2:	1c 82       	std	Y+4, r1	; 0x04
    21f4:	1d 82       	std	Y+5, r1	; 0x05
    21f6:	1e 82       	std	Y+6, r1	; 0x06
    21f8:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <commas>
		int16_t val2 = 0;
    21fc:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    21fe:	09 f4       	brne	.+2      	; 0x2202 <__vector_91+0x58c>
    2200:	92 cd       	rjmp	.-1244   	; 0x1d26 <__vector_91+0xb0>
    2202:	30 f4       	brcc	.+12     	; 0x2210 <__vector_91+0x59a>
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	49 f3       	breq	.-46     	; 0x21da <__vector_91+0x564>
    2208:	82 30       	cpi	r24, 0x02	; 2
    220a:	09 f4       	brne	.+2      	; 0x220e <__vector_91+0x598>
    220c:	92 cd       	rjmp	.-1244   	; 0x1d32 <__vector_91+0xbc>
    220e:	a4 cf       	rjmp	.-184    	; 0x2158 <__vector_91+0x4e2>
    2210:	87 30       	cpi	r24, 0x07	; 7
    2212:	09 f4       	brne	.+2      	; 0x2216 <__vector_91+0x5a0>
    2214:	11 cf       	rjmp	.-478    	; 0x2038 <__vector_91+0x3c2>
    2216:	89 30       	cpi	r24, 0x09	; 9
    2218:	09 f4       	brne	.+2      	; 0x221c <__vector_91+0x5a6>
    221a:	7f cd       	rjmp	.-1282   	; 0x1d1a <__vector_91+0xa4>
    221c:	9d cf       	rjmp	.-198    	; 0x2158 <__vector_91+0x4e2>
    221e:	26 96       	adiw	r28, 0x06	; 6
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	ff 91       	pop	r31
    222a:	ef 91       	pop	r30
    222c:	bf 91       	pop	r27
    222e:	af 91       	pop	r26
    2230:	9f 91       	pop	r25
    2232:	8f 91       	pop	r24
    2234:	7f 91       	pop	r23
    2236:	6f 91       	pop	r22
    2238:	5f 91       	pop	r21
    223a:	4f 91       	pop	r20
    223c:	3f 91       	pop	r19
    223e:	2f 91       	pop	r18
    2240:	1f 91       	pop	r17
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	cf 90       	pop	r12
    224a:	bf 90       	pop	r11
    224c:	af 90       	pop	r10
    224e:	9f 90       	pop	r9
    2250:	8f 90       	pop	r8
    2252:	0f 90       	pop	r0
    2254:	0b be       	out	0x3b, r0	; 59
    2256:	0f 90       	pop	r0
    2258:	0a be       	out	0x3a, r0	; 58
    225a:	0f 90       	pop	r0
    225c:	09 be       	out	0x39, r0	; 57
    225e:	0f 90       	pop	r0
    2260:	08 be       	out	0x38, r0	; 56
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	0f 90       	pop	r0
    2268:	1f 90       	pop	r1
    226a:	18 95       	reti

0000226c <__subsf3>:
    226c:	50 58       	subi	r21, 0x80	; 128

0000226e <__addsf3>:
    226e:	bb 27       	eor	r27, r27
    2270:	aa 27       	eor	r26, r26
    2272:	0e d0       	rcall	.+28     	; 0x2290 <__addsf3x>
    2274:	22 c2       	rjmp	.+1092   	; 0x26ba <__fp_round>
    2276:	13 d2       	rcall	.+1062   	; 0x269e <__fp_pscA>
    2278:	30 f0       	brcs	.+12     	; 0x2286 <__addsf3+0x18>
    227a:	18 d2       	rcall	.+1072   	; 0x26ac <__fp_pscB>
    227c:	20 f0       	brcs	.+8      	; 0x2286 <__addsf3+0x18>
    227e:	31 f4       	brne	.+12     	; 0x228c <__addsf3+0x1e>
    2280:	9f 3f       	cpi	r25, 0xFF	; 255
    2282:	11 f4       	brne	.+4      	; 0x2288 <__addsf3+0x1a>
    2284:	1e f4       	brtc	.+6      	; 0x228c <__addsf3+0x1e>
    2286:	d3 c1       	rjmp	.+934    	; 0x262e <__fp_nan>
    2288:	0e f4       	brtc	.+2      	; 0x228c <__addsf3+0x1e>
    228a:	e0 95       	com	r30
    228c:	e7 fb       	bst	r30, 7
    228e:	c9 c1       	rjmp	.+914    	; 0x2622 <__fp_inf>

00002290 <__addsf3x>:
    2290:	e9 2f       	mov	r30, r25
    2292:	24 d2       	rcall	.+1096   	; 0x26dc <__fp_split3>
    2294:	80 f3       	brcs	.-32     	; 0x2276 <__addsf3+0x8>
    2296:	ba 17       	cp	r27, r26
    2298:	62 07       	cpc	r22, r18
    229a:	73 07       	cpc	r23, r19
    229c:	84 07       	cpc	r24, r20
    229e:	95 07       	cpc	r25, r21
    22a0:	18 f0       	brcs	.+6      	; 0x22a8 <__addsf3x+0x18>
    22a2:	71 f4       	brne	.+28     	; 0x22c0 <__addsf3x+0x30>
    22a4:	9e f5       	brtc	.+102    	; 0x230c <__addsf3x+0x7c>
    22a6:	3c c2       	rjmp	.+1144   	; 0x2720 <__fp_zero>
    22a8:	0e f4       	brtc	.+2      	; 0x22ac <__addsf3x+0x1c>
    22aa:	e0 95       	com	r30
    22ac:	0b 2e       	mov	r0, r27
    22ae:	ba 2f       	mov	r27, r26
    22b0:	a0 2d       	mov	r26, r0
    22b2:	0b 01       	movw	r0, r22
    22b4:	b9 01       	movw	r22, r18
    22b6:	90 01       	movw	r18, r0
    22b8:	0c 01       	movw	r0, r24
    22ba:	ca 01       	movw	r24, r20
    22bc:	a0 01       	movw	r20, r0
    22be:	11 24       	eor	r1, r1
    22c0:	ff 27       	eor	r31, r31
    22c2:	59 1b       	sub	r21, r25
    22c4:	99 f0       	breq	.+38     	; 0x22ec <__addsf3x+0x5c>
    22c6:	59 3f       	cpi	r21, 0xF9	; 249
    22c8:	50 f4       	brcc	.+20     	; 0x22de <__addsf3x+0x4e>
    22ca:	50 3e       	cpi	r21, 0xE0	; 224
    22cc:	68 f1       	brcs	.+90     	; 0x2328 <__addsf3x+0x98>
    22ce:	1a 16       	cp	r1, r26
    22d0:	f0 40       	sbci	r31, 0x00	; 0
    22d2:	a2 2f       	mov	r26, r18
    22d4:	23 2f       	mov	r18, r19
    22d6:	34 2f       	mov	r19, r20
    22d8:	44 27       	eor	r20, r20
    22da:	58 5f       	subi	r21, 0xF8	; 248
    22dc:	f3 cf       	rjmp	.-26     	; 0x22c4 <__addsf3x+0x34>
    22de:	46 95       	lsr	r20
    22e0:	37 95       	ror	r19
    22e2:	27 95       	ror	r18
    22e4:	a7 95       	ror	r26
    22e6:	f0 40       	sbci	r31, 0x00	; 0
    22e8:	53 95       	inc	r21
    22ea:	c9 f7       	brne	.-14     	; 0x22de <__addsf3x+0x4e>
    22ec:	7e f4       	brtc	.+30     	; 0x230c <__addsf3x+0x7c>
    22ee:	1f 16       	cp	r1, r31
    22f0:	ba 0b       	sbc	r27, r26
    22f2:	62 0b       	sbc	r22, r18
    22f4:	73 0b       	sbc	r23, r19
    22f6:	84 0b       	sbc	r24, r20
    22f8:	ba f0       	brmi	.+46     	; 0x2328 <__addsf3x+0x98>
    22fa:	91 50       	subi	r25, 0x01	; 1
    22fc:	a1 f0       	breq	.+40     	; 0x2326 <__addsf3x+0x96>
    22fe:	ff 0f       	add	r31, r31
    2300:	bb 1f       	adc	r27, r27
    2302:	66 1f       	adc	r22, r22
    2304:	77 1f       	adc	r23, r23
    2306:	88 1f       	adc	r24, r24
    2308:	c2 f7       	brpl	.-16     	; 0x22fa <__addsf3x+0x6a>
    230a:	0e c0       	rjmp	.+28     	; 0x2328 <__addsf3x+0x98>
    230c:	ba 0f       	add	r27, r26
    230e:	62 1f       	adc	r22, r18
    2310:	73 1f       	adc	r23, r19
    2312:	84 1f       	adc	r24, r20
    2314:	48 f4       	brcc	.+18     	; 0x2328 <__addsf3x+0x98>
    2316:	87 95       	ror	r24
    2318:	77 95       	ror	r23
    231a:	67 95       	ror	r22
    231c:	b7 95       	ror	r27
    231e:	f7 95       	ror	r31
    2320:	9e 3f       	cpi	r25, 0xFE	; 254
    2322:	08 f0       	brcs	.+2      	; 0x2326 <__addsf3x+0x96>
    2324:	b3 cf       	rjmp	.-154    	; 0x228c <__addsf3+0x1e>
    2326:	93 95       	inc	r25
    2328:	88 0f       	add	r24, r24
    232a:	08 f0       	brcs	.+2      	; 0x232e <__addsf3x+0x9e>
    232c:	99 27       	eor	r25, r25
    232e:	ee 0f       	add	r30, r30
    2330:	97 95       	ror	r25
    2332:	87 95       	ror	r24
    2334:	08 95       	ret

00002336 <__cmpsf2>:
    2336:	51 d1       	rcall	.+674    	; 0x25da <__fp_cmp>
    2338:	08 f4       	brcc	.+2      	; 0x233c <__cmpsf2+0x6>
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	08 95       	ret

0000233e <__divsf3>:
    233e:	0c d0       	rcall	.+24     	; 0x2358 <__divsf3x>
    2340:	bc c1       	rjmp	.+888    	; 0x26ba <__fp_round>
    2342:	b4 d1       	rcall	.+872    	; 0x26ac <__fp_pscB>
    2344:	40 f0       	brcs	.+16     	; 0x2356 <__divsf3+0x18>
    2346:	ab d1       	rcall	.+854    	; 0x269e <__fp_pscA>
    2348:	30 f0       	brcs	.+12     	; 0x2356 <__divsf3+0x18>
    234a:	21 f4       	brne	.+8      	; 0x2354 <__divsf3+0x16>
    234c:	5f 3f       	cpi	r21, 0xFF	; 255
    234e:	19 f0       	breq	.+6      	; 0x2356 <__divsf3+0x18>
    2350:	68 c1       	rjmp	.+720    	; 0x2622 <__fp_inf>
    2352:	51 11       	cpse	r21, r1
    2354:	e6 c1       	rjmp	.+972    	; 0x2722 <__fp_szero>
    2356:	6b c1       	rjmp	.+726    	; 0x262e <__fp_nan>

00002358 <__divsf3x>:
    2358:	c1 d1       	rcall	.+898    	; 0x26dc <__fp_split3>
    235a:	98 f3       	brcs	.-26     	; 0x2342 <__divsf3+0x4>

0000235c <__divsf3_pse>:
    235c:	99 23       	and	r25, r25
    235e:	c9 f3       	breq	.-14     	; 0x2352 <__divsf3+0x14>
    2360:	55 23       	and	r21, r21
    2362:	b1 f3       	breq	.-20     	; 0x2350 <__divsf3+0x12>
    2364:	95 1b       	sub	r25, r21
    2366:	55 0b       	sbc	r21, r21
    2368:	bb 27       	eor	r27, r27
    236a:	aa 27       	eor	r26, r26
    236c:	62 17       	cp	r22, r18
    236e:	73 07       	cpc	r23, r19
    2370:	84 07       	cpc	r24, r20
    2372:	38 f0       	brcs	.+14     	; 0x2382 <__divsf3_pse+0x26>
    2374:	9f 5f       	subi	r25, 0xFF	; 255
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	22 0f       	add	r18, r18
    237a:	33 1f       	adc	r19, r19
    237c:	44 1f       	adc	r20, r20
    237e:	aa 1f       	adc	r26, r26
    2380:	a9 f3       	breq	.-22     	; 0x236c <__divsf3_pse+0x10>
    2382:	33 d0       	rcall	.+102    	; 0x23ea <__divsf3_pse+0x8e>
    2384:	0e 2e       	mov	r0, r30
    2386:	3a f0       	brmi	.+14     	; 0x2396 <__divsf3_pse+0x3a>
    2388:	e0 e8       	ldi	r30, 0x80	; 128
    238a:	30 d0       	rcall	.+96     	; 0x23ec <__divsf3_pse+0x90>
    238c:	91 50       	subi	r25, 0x01	; 1
    238e:	50 40       	sbci	r21, 0x00	; 0
    2390:	e6 95       	lsr	r30
    2392:	00 1c       	adc	r0, r0
    2394:	ca f7       	brpl	.-14     	; 0x2388 <__divsf3_pse+0x2c>
    2396:	29 d0       	rcall	.+82     	; 0x23ea <__divsf3_pse+0x8e>
    2398:	fe 2f       	mov	r31, r30
    239a:	27 d0       	rcall	.+78     	; 0x23ea <__divsf3_pse+0x8e>
    239c:	66 0f       	add	r22, r22
    239e:	77 1f       	adc	r23, r23
    23a0:	88 1f       	adc	r24, r24
    23a2:	bb 1f       	adc	r27, r27
    23a4:	26 17       	cp	r18, r22
    23a6:	37 07       	cpc	r19, r23
    23a8:	48 07       	cpc	r20, r24
    23aa:	ab 07       	cpc	r26, r27
    23ac:	b0 e8       	ldi	r27, 0x80	; 128
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <__divsf3_pse+0x56>
    23b0:	bb 0b       	sbc	r27, r27
    23b2:	80 2d       	mov	r24, r0
    23b4:	bf 01       	movw	r22, r30
    23b6:	ff 27       	eor	r31, r31
    23b8:	93 58       	subi	r25, 0x83	; 131
    23ba:	5f 4f       	sbci	r21, 0xFF	; 255
    23bc:	2a f0       	brmi	.+10     	; 0x23c8 <__divsf3_pse+0x6c>
    23be:	9e 3f       	cpi	r25, 0xFE	; 254
    23c0:	51 05       	cpc	r21, r1
    23c2:	68 f0       	brcs	.+26     	; 0x23de <__divsf3_pse+0x82>
    23c4:	2e c1       	rjmp	.+604    	; 0x2622 <__fp_inf>
    23c6:	ad c1       	rjmp	.+858    	; 0x2722 <__fp_szero>
    23c8:	5f 3f       	cpi	r21, 0xFF	; 255
    23ca:	ec f3       	brlt	.-6      	; 0x23c6 <__divsf3_pse+0x6a>
    23cc:	98 3e       	cpi	r25, 0xE8	; 232
    23ce:	dc f3       	brlt	.-10     	; 0x23c6 <__divsf3_pse+0x6a>
    23d0:	86 95       	lsr	r24
    23d2:	77 95       	ror	r23
    23d4:	67 95       	ror	r22
    23d6:	b7 95       	ror	r27
    23d8:	f7 95       	ror	r31
    23da:	9f 5f       	subi	r25, 0xFF	; 255
    23dc:	c9 f7       	brne	.-14     	; 0x23d0 <__divsf3_pse+0x74>
    23de:	88 0f       	add	r24, r24
    23e0:	91 1d       	adc	r25, r1
    23e2:	96 95       	lsr	r25
    23e4:	87 95       	ror	r24
    23e6:	97 f9       	bld	r25, 7
    23e8:	08 95       	ret
    23ea:	e1 e0       	ldi	r30, 0x01	; 1
    23ec:	66 0f       	add	r22, r22
    23ee:	77 1f       	adc	r23, r23
    23f0:	88 1f       	adc	r24, r24
    23f2:	bb 1f       	adc	r27, r27
    23f4:	62 17       	cp	r22, r18
    23f6:	73 07       	cpc	r23, r19
    23f8:	84 07       	cpc	r24, r20
    23fa:	ba 07       	cpc	r27, r26
    23fc:	20 f0       	brcs	.+8      	; 0x2406 <__divsf3_pse+0xaa>
    23fe:	62 1b       	sub	r22, r18
    2400:	73 0b       	sbc	r23, r19
    2402:	84 0b       	sbc	r24, r20
    2404:	ba 0b       	sbc	r27, r26
    2406:	ee 1f       	adc	r30, r30
    2408:	88 f7       	brcc	.-30     	; 0x23ec <__divsf3_pse+0x90>
    240a:	e0 95       	com	r30
    240c:	08 95       	ret

0000240e <__fixsfdi>:
    240e:	be e3       	ldi	r27, 0x3E	; 62
    2410:	04 d0       	rcall	.+8      	; 0x241a <__fixunssfdi+0x2>
    2412:	08 f4       	brcc	.+2      	; 0x2416 <__fixsfdi+0x8>
    2414:	90 e8       	ldi	r25, 0x80	; 128
    2416:	08 95       	ret

00002418 <__fixunssfdi>:
    2418:	bf e3       	ldi	r27, 0x3F	; 63
    241a:	22 27       	eor	r18, r18
    241c:	33 27       	eor	r19, r19
    241e:	a9 01       	movw	r20, r18
    2420:	65 d1       	rcall	.+714    	; 0x26ec <__fp_splitA>
    2422:	58 f1       	brcs	.+86     	; 0x247a <__fixunssfdi+0x62>
    2424:	9f 57       	subi	r25, 0x7F	; 127
    2426:	40 f1       	brcs	.+80     	; 0x2478 <__fixunssfdi+0x60>
    2428:	b9 17       	cp	r27, r25
    242a:	38 f1       	brcs	.+78     	; 0x247a <__fixunssfdi+0x62>
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	b9 1b       	sub	r27, r25
    2430:	99 27       	eor	r25, r25
    2432:	b8 50       	subi	r27, 0x08	; 8
    2434:	3a f4       	brpl	.+14     	; 0x2444 <__fixunssfdi+0x2c>
    2436:	66 0f       	add	r22, r22
    2438:	77 1f       	adc	r23, r23
    243a:	88 1f       	adc	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	b3 95       	inc	r27
    2440:	d2 f3       	brmi	.-12     	; 0x2436 <__fixunssfdi+0x1e>
    2442:	16 c0       	rjmp	.+44     	; 0x2470 <__fixunssfdi+0x58>
    2444:	b8 50       	subi	r27, 0x08	; 8
    2446:	4a f0       	brmi	.+18     	; 0x245a <__fixunssfdi+0x42>
    2448:	23 2f       	mov	r18, r19
    244a:	34 2f       	mov	r19, r20
    244c:	45 2f       	mov	r20, r21
    244e:	56 2f       	mov	r21, r22
    2450:	67 2f       	mov	r22, r23
    2452:	78 2f       	mov	r23, r24
    2454:	88 27       	eor	r24, r24
    2456:	b8 50       	subi	r27, 0x08	; 8
    2458:	ba f7       	brpl	.-18     	; 0x2448 <__fixunssfdi+0x30>
    245a:	b8 5f       	subi	r27, 0xF8	; 248
    245c:	49 f0       	breq	.+18     	; 0x2470 <__fixunssfdi+0x58>
    245e:	86 95       	lsr	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	57 95       	ror	r21
    2466:	47 95       	ror	r20
    2468:	37 95       	ror	r19
    246a:	27 95       	ror	r18
    246c:	ba 95       	dec	r27
    246e:	b9 f7       	brne	.-18     	; 0x245e <__fixunssfdi+0x46>
    2470:	0e f4       	brtc	.+2      	; 0x2474 <__fixunssfdi+0x5c>
    2472:	e0 d0       	rcall	.+448    	; 0x2634 <__fp_negdi>
    2474:	88 94       	clc
    2476:	08 95       	ret
    2478:	88 94       	clc
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	cb 01       	movw	r24, r22
    2480:	08 95       	ret

00002482 <__fixsfsi>:
    2482:	04 d0       	rcall	.+8      	; 0x248c <__fixunssfsi>
    2484:	68 94       	set
    2486:	b1 11       	cpse	r27, r1
    2488:	4c c1       	rjmp	.+664    	; 0x2722 <__fp_szero>
    248a:	08 95       	ret

0000248c <__fixunssfsi>:
    248c:	2f d1       	rcall	.+606    	; 0x26ec <__fp_splitA>
    248e:	88 f0       	brcs	.+34     	; 0x24b2 <__fixunssfsi+0x26>
    2490:	9f 57       	subi	r25, 0x7F	; 127
    2492:	90 f0       	brcs	.+36     	; 0x24b8 <__fixunssfsi+0x2c>
    2494:	b9 2f       	mov	r27, r25
    2496:	99 27       	eor	r25, r25
    2498:	b7 51       	subi	r27, 0x17	; 23
    249a:	a0 f0       	brcs	.+40     	; 0x24c4 <__fixunssfsi+0x38>
    249c:	d1 f0       	breq	.+52     	; 0x24d2 <__fixunssfsi+0x46>
    249e:	66 0f       	add	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	88 1f       	adc	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	1a f0       	brmi	.+6      	; 0x24ae <__fixunssfsi+0x22>
    24a8:	ba 95       	dec	r27
    24aa:	c9 f7       	brne	.-14     	; 0x249e <__fixunssfsi+0x12>
    24ac:	12 c0       	rjmp	.+36     	; 0x24d2 <__fixunssfsi+0x46>
    24ae:	b1 30       	cpi	r27, 0x01	; 1
    24b0:	81 f0       	breq	.+32     	; 0x24d2 <__fixunssfsi+0x46>
    24b2:	36 d1       	rcall	.+620    	; 0x2720 <__fp_zero>
    24b4:	b1 e0       	ldi	r27, 0x01	; 1
    24b6:	08 95       	ret
    24b8:	33 c1       	rjmp	.+614    	; 0x2720 <__fp_zero>
    24ba:	67 2f       	mov	r22, r23
    24bc:	78 2f       	mov	r23, r24
    24be:	88 27       	eor	r24, r24
    24c0:	b8 5f       	subi	r27, 0xF8	; 248
    24c2:	39 f0       	breq	.+14     	; 0x24d2 <__fixunssfsi+0x46>
    24c4:	b9 3f       	cpi	r27, 0xF9	; 249
    24c6:	cc f3       	brlt	.-14     	; 0x24ba <__fixunssfsi+0x2e>
    24c8:	86 95       	lsr	r24
    24ca:	77 95       	ror	r23
    24cc:	67 95       	ror	r22
    24ce:	b3 95       	inc	r27
    24d0:	d9 f7       	brne	.-10     	; 0x24c8 <__fixunssfsi+0x3c>
    24d2:	3e f4       	brtc	.+14     	; 0x24e2 <__fixunssfsi+0x56>
    24d4:	90 95       	com	r25
    24d6:	80 95       	com	r24
    24d8:	70 95       	com	r23
    24da:	61 95       	neg	r22
    24dc:	7f 4f       	sbci	r23, 0xFF	; 255
    24de:	8f 4f       	sbci	r24, 0xFF	; 255
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	08 95       	ret

000024e4 <__floatunsisf>:
    24e4:	e8 94       	clt
    24e6:	09 c0       	rjmp	.+18     	; 0x24fa <__floatsisf+0x12>

000024e8 <__floatsisf>:
    24e8:	97 fb       	bst	r25, 7
    24ea:	3e f4       	brtc	.+14     	; 0x24fa <__floatsisf+0x12>
    24ec:	90 95       	com	r25
    24ee:	80 95       	com	r24
    24f0:	70 95       	com	r23
    24f2:	61 95       	neg	r22
    24f4:	7f 4f       	sbci	r23, 0xFF	; 255
    24f6:	8f 4f       	sbci	r24, 0xFF	; 255
    24f8:	9f 4f       	sbci	r25, 0xFF	; 255
    24fa:	99 23       	and	r25, r25
    24fc:	a9 f0       	breq	.+42     	; 0x2528 <__floatsisf+0x40>
    24fe:	f9 2f       	mov	r31, r25
    2500:	96 e9       	ldi	r25, 0x96	; 150
    2502:	bb 27       	eor	r27, r27
    2504:	93 95       	inc	r25
    2506:	f6 95       	lsr	r31
    2508:	87 95       	ror	r24
    250a:	77 95       	ror	r23
    250c:	67 95       	ror	r22
    250e:	b7 95       	ror	r27
    2510:	f1 11       	cpse	r31, r1
    2512:	f8 cf       	rjmp	.-16     	; 0x2504 <__floatsisf+0x1c>
    2514:	fa f4       	brpl	.+62     	; 0x2554 <__floatsisf+0x6c>
    2516:	bb 0f       	add	r27, r27
    2518:	11 f4       	brne	.+4      	; 0x251e <__floatsisf+0x36>
    251a:	60 ff       	sbrs	r22, 0
    251c:	1b c0       	rjmp	.+54     	; 0x2554 <__floatsisf+0x6c>
    251e:	6f 5f       	subi	r22, 0xFF	; 255
    2520:	7f 4f       	sbci	r23, 0xFF	; 255
    2522:	8f 4f       	sbci	r24, 0xFF	; 255
    2524:	9f 4f       	sbci	r25, 0xFF	; 255
    2526:	16 c0       	rjmp	.+44     	; 0x2554 <__floatsisf+0x6c>
    2528:	88 23       	and	r24, r24
    252a:	11 f0       	breq	.+4      	; 0x2530 <__floatsisf+0x48>
    252c:	96 e9       	ldi	r25, 0x96	; 150
    252e:	11 c0       	rjmp	.+34     	; 0x2552 <__floatsisf+0x6a>
    2530:	77 23       	and	r23, r23
    2532:	21 f0       	breq	.+8      	; 0x253c <__floatsisf+0x54>
    2534:	9e e8       	ldi	r25, 0x8E	; 142
    2536:	87 2f       	mov	r24, r23
    2538:	76 2f       	mov	r23, r22
    253a:	05 c0       	rjmp	.+10     	; 0x2546 <__floatsisf+0x5e>
    253c:	66 23       	and	r22, r22
    253e:	71 f0       	breq	.+28     	; 0x255c <__floatsisf+0x74>
    2540:	96 e8       	ldi	r25, 0x86	; 134
    2542:	86 2f       	mov	r24, r22
    2544:	70 e0       	ldi	r23, 0x00	; 0
    2546:	60 e0       	ldi	r22, 0x00	; 0
    2548:	2a f0       	brmi	.+10     	; 0x2554 <__floatsisf+0x6c>
    254a:	9a 95       	dec	r25
    254c:	66 0f       	add	r22, r22
    254e:	77 1f       	adc	r23, r23
    2550:	88 1f       	adc	r24, r24
    2552:	da f7       	brpl	.-10     	; 0x254a <__floatsisf+0x62>
    2554:	88 0f       	add	r24, r24
    2556:	96 95       	lsr	r25
    2558:	87 95       	ror	r24
    255a:	97 f9       	bld	r25, 7
    255c:	08 95       	ret

0000255e <__floatundisf>:
    255e:	e8 94       	clt

00002560 <__fp_di2sf>:
    2560:	f9 2f       	mov	r31, r25
    2562:	96 eb       	ldi	r25, 0xB6	; 182
    2564:	ff 23       	and	r31, r31
    2566:	81 f0       	breq	.+32     	; 0x2588 <__fp_di2sf+0x28>
    2568:	12 16       	cp	r1, r18
    256a:	13 06       	cpc	r1, r19
    256c:	14 06       	cpc	r1, r20
    256e:	44 0b       	sbc	r20, r20
    2570:	93 95       	inc	r25
    2572:	f6 95       	lsr	r31
    2574:	87 95       	ror	r24
    2576:	77 95       	ror	r23
    2578:	67 95       	ror	r22
    257a:	57 95       	ror	r21
    257c:	40 40       	sbci	r20, 0x00	; 0
    257e:	ff 23       	and	r31, r31
    2580:	b9 f7       	brne	.-18     	; 0x2570 <__fp_di2sf+0x10>
    2582:	1b c0       	rjmp	.+54     	; 0x25ba <__fp_di2sf+0x5a>
    2584:	99 27       	eor	r25, r25
    2586:	08 95       	ret
    2588:	88 23       	and	r24, r24
    258a:	51 f4       	brne	.+20     	; 0x25a0 <__fp_di2sf+0x40>
    258c:	98 50       	subi	r25, 0x08	; 8
    258e:	d2 f7       	brpl	.-12     	; 0x2584 <__fp_di2sf+0x24>
    2590:	87 2b       	or	r24, r23
    2592:	76 2f       	mov	r23, r22
    2594:	65 2f       	mov	r22, r21
    2596:	54 2f       	mov	r21, r20
    2598:	43 2f       	mov	r20, r19
    259a:	32 2f       	mov	r19, r18
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	b1 f3       	breq	.-20     	; 0x258c <__fp_di2sf+0x2c>
    25a0:	12 16       	cp	r1, r18
    25a2:	13 06       	cpc	r1, r19
    25a4:	14 06       	cpc	r1, r20
    25a6:	44 0b       	sbc	r20, r20
    25a8:	88 23       	and	r24, r24
    25aa:	3a f0       	brmi	.+14     	; 0x25ba <__fp_di2sf+0x5a>
    25ac:	9a 95       	dec	r25
    25ae:	44 0f       	add	r20, r20
    25b0:	55 1f       	adc	r21, r21
    25b2:	66 1f       	adc	r22, r22
    25b4:	77 1f       	adc	r23, r23
    25b6:	88 1f       	adc	r24, r24
    25b8:	ca f7       	brpl	.-14     	; 0x25ac <__fp_di2sf+0x4c>
    25ba:	55 23       	and	r21, r21
    25bc:	4a f4       	brpl	.+18     	; 0x25d0 <__fp_di2sf+0x70>
    25be:	44 0f       	add	r20, r20
    25c0:	55 1f       	adc	r21, r21
    25c2:	11 f4       	brne	.+4      	; 0x25c8 <__fp_di2sf+0x68>
    25c4:	60 ff       	sbrs	r22, 0
    25c6:	04 c0       	rjmp	.+8      	; 0x25d0 <__fp_di2sf+0x70>
    25c8:	6f 5f       	subi	r22, 0xFF	; 255
    25ca:	7f 4f       	sbci	r23, 0xFF	; 255
    25cc:	8f 4f       	sbci	r24, 0xFF	; 255
    25ce:	9f 4f       	sbci	r25, 0xFF	; 255
    25d0:	88 0f       	add	r24, r24
    25d2:	96 95       	lsr	r25
    25d4:	87 95       	ror	r24
    25d6:	97 f9       	bld	r25, 7
    25d8:	08 95       	ret

000025da <__fp_cmp>:
    25da:	99 0f       	add	r25, r25
    25dc:	00 08       	sbc	r0, r0
    25de:	55 0f       	add	r21, r21
    25e0:	aa 0b       	sbc	r26, r26
    25e2:	e0 e8       	ldi	r30, 0x80	; 128
    25e4:	fe ef       	ldi	r31, 0xFE	; 254
    25e6:	16 16       	cp	r1, r22
    25e8:	17 06       	cpc	r1, r23
    25ea:	e8 07       	cpc	r30, r24
    25ec:	f9 07       	cpc	r31, r25
    25ee:	c0 f0       	brcs	.+48     	; 0x2620 <__fp_cmp+0x46>
    25f0:	12 16       	cp	r1, r18
    25f2:	13 06       	cpc	r1, r19
    25f4:	e4 07       	cpc	r30, r20
    25f6:	f5 07       	cpc	r31, r21
    25f8:	98 f0       	brcs	.+38     	; 0x2620 <__fp_cmp+0x46>
    25fa:	62 1b       	sub	r22, r18
    25fc:	73 0b       	sbc	r23, r19
    25fe:	84 0b       	sbc	r24, r20
    2600:	95 0b       	sbc	r25, r21
    2602:	39 f4       	brne	.+14     	; 0x2612 <__fp_cmp+0x38>
    2604:	0a 26       	eor	r0, r26
    2606:	61 f0       	breq	.+24     	; 0x2620 <__fp_cmp+0x46>
    2608:	23 2b       	or	r18, r19
    260a:	24 2b       	or	r18, r20
    260c:	25 2b       	or	r18, r21
    260e:	21 f4       	brne	.+8      	; 0x2618 <__fp_cmp+0x3e>
    2610:	08 95       	ret
    2612:	0a 26       	eor	r0, r26
    2614:	09 f4       	brne	.+2      	; 0x2618 <__fp_cmp+0x3e>
    2616:	a1 40       	sbci	r26, 0x01	; 1
    2618:	a6 95       	lsr	r26
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	81 1d       	adc	r24, r1
    261e:	81 1d       	adc	r24, r1
    2620:	08 95       	ret

00002622 <__fp_inf>:
    2622:	97 f9       	bld	r25, 7
    2624:	9f 67       	ori	r25, 0x7F	; 127
    2626:	80 e8       	ldi	r24, 0x80	; 128
    2628:	70 e0       	ldi	r23, 0x00	; 0
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	08 95       	ret

0000262e <__fp_nan>:
    262e:	9f ef       	ldi	r25, 0xFF	; 255
    2630:	80 ec       	ldi	r24, 0xC0	; 192
    2632:	08 95       	ret

00002634 <__fp_negdi>:
    2634:	90 95       	com	r25
    2636:	80 95       	com	r24
    2638:	70 95       	com	r23
    263a:	60 95       	com	r22
    263c:	50 95       	com	r21
    263e:	40 95       	com	r20
    2640:	30 95       	com	r19
    2642:	21 95       	neg	r18
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	4f 4f       	sbci	r20, 0xFF	; 255
    2648:	5f 4f       	sbci	r21, 0xFF	; 255
    264a:	6f 4f       	sbci	r22, 0xFF	; 255
    264c:	7f 4f       	sbci	r23, 0xFF	; 255
    264e:	8f 4f       	sbci	r24, 0xFF	; 255
    2650:	9f 4f       	sbci	r25, 0xFF	; 255
    2652:	08 95       	ret

00002654 <__fp_powser>:
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	1f 93       	push	r17
    265a:	0f 93       	push	r16
    265c:	ff 92       	push	r15
    265e:	ef 92       	push	r14
    2660:	df 92       	push	r13
    2662:	7b 01       	movw	r14, r22
    2664:	8c 01       	movw	r16, r24
    2666:	68 94       	set
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <__fp_powser+0x20>
    266a:	da 2e       	mov	r13, r26
    266c:	ef 01       	movw	r28, r30
    266e:	76 d0       	rcall	.+236    	; 0x275c <__mulsf3x>
    2670:	fe 01       	movw	r30, r28
    2672:	e8 94       	clt
    2674:	a5 91       	lpm	r26, Z+
    2676:	25 91       	lpm	r18, Z+
    2678:	35 91       	lpm	r19, Z+
    267a:	45 91       	lpm	r20, Z+
    267c:	55 91       	lpm	r21, Z+
    267e:	ae f3       	brts	.-22     	; 0x266a <__fp_powser+0x16>
    2680:	ef 01       	movw	r28, r30
    2682:	06 de       	rcall	.-1012   	; 0x2290 <__addsf3x>
    2684:	fe 01       	movw	r30, r28
    2686:	97 01       	movw	r18, r14
    2688:	a8 01       	movw	r20, r16
    268a:	da 94       	dec	r13
    268c:	79 f7       	brne	.-34     	; 0x266c <__fp_powser+0x18>
    268e:	df 90       	pop	r13
    2690:	ef 90       	pop	r14
    2692:	ff 90       	pop	r15
    2694:	0f 91       	pop	r16
    2696:	1f 91       	pop	r17
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <__fp_pscA>:
    269e:	00 24       	eor	r0, r0
    26a0:	0a 94       	dec	r0
    26a2:	16 16       	cp	r1, r22
    26a4:	17 06       	cpc	r1, r23
    26a6:	18 06       	cpc	r1, r24
    26a8:	09 06       	cpc	r0, r25
    26aa:	08 95       	ret

000026ac <__fp_pscB>:
    26ac:	00 24       	eor	r0, r0
    26ae:	0a 94       	dec	r0
    26b0:	12 16       	cp	r1, r18
    26b2:	13 06       	cpc	r1, r19
    26b4:	14 06       	cpc	r1, r20
    26b6:	05 06       	cpc	r0, r21
    26b8:	08 95       	ret

000026ba <__fp_round>:
    26ba:	09 2e       	mov	r0, r25
    26bc:	03 94       	inc	r0
    26be:	00 0c       	add	r0, r0
    26c0:	11 f4       	brne	.+4      	; 0x26c6 <__fp_round+0xc>
    26c2:	88 23       	and	r24, r24
    26c4:	52 f0       	brmi	.+20     	; 0x26da <__fp_round+0x20>
    26c6:	bb 0f       	add	r27, r27
    26c8:	40 f4       	brcc	.+16     	; 0x26da <__fp_round+0x20>
    26ca:	bf 2b       	or	r27, r31
    26cc:	11 f4       	brne	.+4      	; 0x26d2 <__fp_round+0x18>
    26ce:	60 ff       	sbrs	r22, 0
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <__fp_round+0x20>
    26d2:	6f 5f       	subi	r22, 0xFF	; 255
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	8f 4f       	sbci	r24, 0xFF	; 255
    26d8:	9f 4f       	sbci	r25, 0xFF	; 255
    26da:	08 95       	ret

000026dc <__fp_split3>:
    26dc:	57 fd       	sbrc	r21, 7
    26de:	90 58       	subi	r25, 0x80	; 128
    26e0:	44 0f       	add	r20, r20
    26e2:	55 1f       	adc	r21, r21
    26e4:	59 f0       	breq	.+22     	; 0x26fc <__fp_splitA+0x10>
    26e6:	5f 3f       	cpi	r21, 0xFF	; 255
    26e8:	71 f0       	breq	.+28     	; 0x2706 <__fp_splitA+0x1a>
    26ea:	47 95       	ror	r20

000026ec <__fp_splitA>:
    26ec:	88 0f       	add	r24, r24
    26ee:	97 fb       	bst	r25, 7
    26f0:	99 1f       	adc	r25, r25
    26f2:	61 f0       	breq	.+24     	; 0x270c <__fp_splitA+0x20>
    26f4:	9f 3f       	cpi	r25, 0xFF	; 255
    26f6:	79 f0       	breq	.+30     	; 0x2716 <__fp_splitA+0x2a>
    26f8:	87 95       	ror	r24
    26fa:	08 95       	ret
    26fc:	12 16       	cp	r1, r18
    26fe:	13 06       	cpc	r1, r19
    2700:	14 06       	cpc	r1, r20
    2702:	55 1f       	adc	r21, r21
    2704:	f2 cf       	rjmp	.-28     	; 0x26ea <__fp_split3+0xe>
    2706:	46 95       	lsr	r20
    2708:	f1 df       	rcall	.-30     	; 0x26ec <__fp_splitA>
    270a:	08 c0       	rjmp	.+16     	; 0x271c <__fp_splitA+0x30>
    270c:	16 16       	cp	r1, r22
    270e:	17 06       	cpc	r1, r23
    2710:	18 06       	cpc	r1, r24
    2712:	99 1f       	adc	r25, r25
    2714:	f1 cf       	rjmp	.-30     	; 0x26f8 <__fp_splitA+0xc>
    2716:	86 95       	lsr	r24
    2718:	71 05       	cpc	r23, r1
    271a:	61 05       	cpc	r22, r1
    271c:	08 94       	sec
    271e:	08 95       	ret

00002720 <__fp_zero>:
    2720:	e8 94       	clt

00002722 <__fp_szero>:
    2722:	bb 27       	eor	r27, r27
    2724:	66 27       	eor	r22, r22
    2726:	77 27       	eor	r23, r23
    2728:	cb 01       	movw	r24, r22
    272a:	97 f9       	bld	r25, 7
    272c:	08 95       	ret

0000272e <__gesf2>:
    272e:	55 df       	rcall	.-342    	; 0x25da <__fp_cmp>
    2730:	08 f4       	brcc	.+2      	; 0x2734 <__gesf2+0x6>
    2732:	8f ef       	ldi	r24, 0xFF	; 255
    2734:	08 95       	ret

00002736 <inverse>:
    2736:	9b 01       	movw	r18, r22
    2738:	ac 01       	movw	r20, r24
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	80 e8       	ldi	r24, 0x80	; 128
    2740:	9f e3       	ldi	r25, 0x3F	; 63
    2742:	fd cd       	rjmp	.-1030   	; 0x233e <__divsf3>

00002744 <__mulsf3>:
    2744:	0b d0       	rcall	.+22     	; 0x275c <__mulsf3x>
    2746:	b9 cf       	rjmp	.-142    	; 0x26ba <__fp_round>
    2748:	aa df       	rcall	.-172    	; 0x269e <__fp_pscA>
    274a:	28 f0       	brcs	.+10     	; 0x2756 <__mulsf3+0x12>
    274c:	af df       	rcall	.-162    	; 0x26ac <__fp_pscB>
    274e:	18 f0       	brcs	.+6      	; 0x2756 <__mulsf3+0x12>
    2750:	95 23       	and	r25, r21
    2752:	09 f0       	breq	.+2      	; 0x2756 <__mulsf3+0x12>
    2754:	66 cf       	rjmp	.-308    	; 0x2622 <__fp_inf>
    2756:	6b cf       	rjmp	.-298    	; 0x262e <__fp_nan>
    2758:	11 24       	eor	r1, r1
    275a:	e3 cf       	rjmp	.-58     	; 0x2722 <__fp_szero>

0000275c <__mulsf3x>:
    275c:	bf df       	rcall	.-130    	; 0x26dc <__fp_split3>
    275e:	a0 f3       	brcs	.-24     	; 0x2748 <__mulsf3+0x4>

00002760 <__mulsf3_pse>:
    2760:	95 9f       	mul	r25, r21
    2762:	d1 f3       	breq	.-12     	; 0x2758 <__mulsf3+0x14>
    2764:	95 0f       	add	r25, r21
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	55 1f       	adc	r21, r21
    276a:	62 9f       	mul	r22, r18
    276c:	f0 01       	movw	r30, r0
    276e:	72 9f       	mul	r23, r18
    2770:	bb 27       	eor	r27, r27
    2772:	f0 0d       	add	r31, r0
    2774:	b1 1d       	adc	r27, r1
    2776:	63 9f       	mul	r22, r19
    2778:	aa 27       	eor	r26, r26
    277a:	f0 0d       	add	r31, r0
    277c:	b1 1d       	adc	r27, r1
    277e:	aa 1f       	adc	r26, r26
    2780:	64 9f       	mul	r22, r20
    2782:	66 27       	eor	r22, r22
    2784:	b0 0d       	add	r27, r0
    2786:	a1 1d       	adc	r26, r1
    2788:	66 1f       	adc	r22, r22
    278a:	82 9f       	mul	r24, r18
    278c:	22 27       	eor	r18, r18
    278e:	b0 0d       	add	r27, r0
    2790:	a1 1d       	adc	r26, r1
    2792:	62 1f       	adc	r22, r18
    2794:	73 9f       	mul	r23, r19
    2796:	b0 0d       	add	r27, r0
    2798:	a1 1d       	adc	r26, r1
    279a:	62 1f       	adc	r22, r18
    279c:	83 9f       	mul	r24, r19
    279e:	a0 0d       	add	r26, r0
    27a0:	61 1d       	adc	r22, r1
    27a2:	22 1f       	adc	r18, r18
    27a4:	74 9f       	mul	r23, r20
    27a6:	33 27       	eor	r19, r19
    27a8:	a0 0d       	add	r26, r0
    27aa:	61 1d       	adc	r22, r1
    27ac:	23 1f       	adc	r18, r19
    27ae:	84 9f       	mul	r24, r20
    27b0:	60 0d       	add	r22, r0
    27b2:	21 1d       	adc	r18, r1
    27b4:	82 2f       	mov	r24, r18
    27b6:	76 2f       	mov	r23, r22
    27b8:	6a 2f       	mov	r22, r26
    27ba:	11 24       	eor	r1, r1
    27bc:	9f 57       	subi	r25, 0x7F	; 127
    27be:	50 40       	sbci	r21, 0x00	; 0
    27c0:	8a f0       	brmi	.+34     	; 0x27e4 <__mulsf3_pse+0x84>
    27c2:	e1 f0       	breq	.+56     	; 0x27fc <__mulsf3_pse+0x9c>
    27c4:	88 23       	and	r24, r24
    27c6:	4a f0       	brmi	.+18     	; 0x27da <__mulsf3_pse+0x7a>
    27c8:	ee 0f       	add	r30, r30
    27ca:	ff 1f       	adc	r31, r31
    27cc:	bb 1f       	adc	r27, r27
    27ce:	66 1f       	adc	r22, r22
    27d0:	77 1f       	adc	r23, r23
    27d2:	88 1f       	adc	r24, r24
    27d4:	91 50       	subi	r25, 0x01	; 1
    27d6:	50 40       	sbci	r21, 0x00	; 0
    27d8:	a9 f7       	brne	.-22     	; 0x27c4 <__mulsf3_pse+0x64>
    27da:	9e 3f       	cpi	r25, 0xFE	; 254
    27dc:	51 05       	cpc	r21, r1
    27de:	70 f0       	brcs	.+28     	; 0x27fc <__mulsf3_pse+0x9c>
    27e0:	20 cf       	rjmp	.-448    	; 0x2622 <__fp_inf>
    27e2:	9f cf       	rjmp	.-194    	; 0x2722 <__fp_szero>
    27e4:	5f 3f       	cpi	r21, 0xFF	; 255
    27e6:	ec f3       	brlt	.-6      	; 0x27e2 <__mulsf3_pse+0x82>
    27e8:	98 3e       	cpi	r25, 0xE8	; 232
    27ea:	dc f3       	brlt	.-10     	; 0x27e2 <__mulsf3_pse+0x82>
    27ec:	86 95       	lsr	r24
    27ee:	77 95       	ror	r23
    27f0:	67 95       	ror	r22
    27f2:	b7 95       	ror	r27
    27f4:	f7 95       	ror	r31
    27f6:	e7 95       	ror	r30
    27f8:	9f 5f       	subi	r25, 0xFF	; 255
    27fa:	c1 f7       	brne	.-16     	; 0x27ec <__mulsf3_pse+0x8c>
    27fc:	fe 2b       	or	r31, r30
    27fe:	88 0f       	add	r24, r24
    2800:	91 1d       	adc	r25, r1
    2802:	96 95       	lsr	r25
    2804:	87 95       	ror	r24
    2806:	97 f9       	bld	r25, 7
    2808:	08 95       	ret

0000280a <pow>:
    280a:	fa 01       	movw	r30, r20
    280c:	ee 0f       	add	r30, r30
    280e:	ff 1f       	adc	r31, r31
    2810:	30 96       	adiw	r30, 0x00	; 0
    2812:	21 05       	cpc	r18, r1
    2814:	31 05       	cpc	r19, r1
    2816:	99 f1       	breq	.+102    	; 0x287e <pow+0x74>
    2818:	61 15       	cp	r22, r1
    281a:	71 05       	cpc	r23, r1
    281c:	61 f4       	brne	.+24     	; 0x2836 <pow+0x2c>
    281e:	80 38       	cpi	r24, 0x80	; 128
    2820:	bf e3       	ldi	r27, 0x3F	; 63
    2822:	9b 07       	cpc	r25, r27
    2824:	49 f1       	breq	.+82     	; 0x2878 <pow+0x6e>
    2826:	68 94       	set
    2828:	90 38       	cpi	r25, 0x80	; 128
    282a:	81 05       	cpc	r24, r1
    282c:	61 f0       	breq	.+24     	; 0x2846 <pow+0x3c>
    282e:	80 38       	cpi	r24, 0x80	; 128
    2830:	bf ef       	ldi	r27, 0xFF	; 255
    2832:	9b 07       	cpc	r25, r27
    2834:	41 f0       	breq	.+16     	; 0x2846 <pow+0x3c>
    2836:	99 23       	and	r25, r25
    2838:	42 f5       	brpl	.+80     	; 0x288a <pow+0x80>
    283a:	ff 3f       	cpi	r31, 0xFF	; 255
    283c:	e1 05       	cpc	r30, r1
    283e:	31 05       	cpc	r19, r1
    2840:	21 05       	cpc	r18, r1
    2842:	11 f1       	breq	.+68     	; 0x2888 <pow+0x7e>
    2844:	e8 94       	clt
    2846:	08 94       	sec
    2848:	e7 95       	ror	r30
    284a:	d9 01       	movw	r26, r18
    284c:	aa 23       	and	r26, r26
    284e:	29 f4       	brne	.+10     	; 0x285a <pow+0x50>
    2850:	ab 2f       	mov	r26, r27
    2852:	be 2f       	mov	r27, r30
    2854:	f8 5f       	subi	r31, 0xF8	; 248
    2856:	d0 f3       	brcs	.-12     	; 0x284c <pow+0x42>
    2858:	10 c0       	rjmp	.+32     	; 0x287a <pow+0x70>
    285a:	ff 5f       	subi	r31, 0xFF	; 255
    285c:	70 f4       	brcc	.+28     	; 0x287a <pow+0x70>
    285e:	a6 95       	lsr	r26
    2860:	e0 f7       	brcc	.-8      	; 0x285a <pow+0x50>
    2862:	f7 39       	cpi	r31, 0x97	; 151
    2864:	50 f0       	brcs	.+20     	; 0x287a <pow+0x70>
    2866:	19 f0       	breq	.+6      	; 0x286e <pow+0x64>
    2868:	ff 3a       	cpi	r31, 0xAF	; 175
    286a:	38 f4       	brcc	.+14     	; 0x287a <pow+0x70>
    286c:	9f 77       	andi	r25, 0x7F	; 127
    286e:	9f 93       	push	r25
    2870:	0c d0       	rcall	.+24     	; 0x288a <pow+0x80>
    2872:	0f 90       	pop	r0
    2874:	07 fc       	sbrc	r0, 7
    2876:	90 58       	subi	r25, 0x80	; 128
    2878:	08 95       	ret
    287a:	3e f0       	brts	.+14     	; 0x288a <pow+0x80>
    287c:	d8 ce       	rjmp	.-592    	; 0x262e <__fp_nan>
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	80 e8       	ldi	r24, 0x80	; 128
    2884:	9f e3       	ldi	r25, 0x3F	; 63
    2886:	08 95       	ret
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	9f 77       	andi	r25, 0x7F	; 127
    288c:	5f 93       	push	r21
    288e:	4f 93       	push	r20
    2890:	3f 93       	push	r19
    2892:	2f 93       	push	r18
    2894:	80 d0       	rcall	.+256    	; 0x2996 <log>
    2896:	2f 91       	pop	r18
    2898:	3f 91       	pop	r19
    289a:	4f 91       	pop	r20
    289c:	5f 91       	pop	r21
    289e:	52 df       	rcall	.-348    	; 0x2744 <__mulsf3>
    28a0:	05 c0       	rjmp	.+10     	; 0x28ac <exp>
    28a2:	19 f4       	brne	.+6      	; 0x28aa <pow+0xa0>
    28a4:	0e f0       	brts	.+2      	; 0x28a8 <pow+0x9e>
    28a6:	bd ce       	rjmp	.-646    	; 0x2622 <__fp_inf>
    28a8:	3b cf       	rjmp	.-394    	; 0x2720 <__fp_zero>
    28aa:	c1 ce       	rjmp	.-638    	; 0x262e <__fp_nan>

000028ac <exp>:
    28ac:	1f df       	rcall	.-450    	; 0x26ec <__fp_splitA>
    28ae:	c8 f3       	brcs	.-14     	; 0x28a2 <pow+0x98>
    28b0:	96 38       	cpi	r25, 0x86	; 134
    28b2:	c0 f7       	brcc	.-16     	; 0x28a4 <pow+0x9a>
    28b4:	07 f8       	bld	r0, 7
    28b6:	0f 92       	push	r0
    28b8:	e8 94       	clt
    28ba:	2b e3       	ldi	r18, 0x3B	; 59
    28bc:	3a ea       	ldi	r19, 0xAA	; 170
    28be:	48 eb       	ldi	r20, 0xB8	; 184
    28c0:	5f e7       	ldi	r21, 0x7F	; 127
    28c2:	4e df       	rcall	.-356    	; 0x2760 <__mulsf3_pse>
    28c4:	0f 92       	push	r0
    28c6:	0f 92       	push	r0
    28c8:	0f 92       	push	r0
    28ca:	4d b7       	in	r20, 0x3d	; 61
    28cc:	5e b7       	in	r21, 0x3e	; 62
    28ce:	0f 92       	push	r0
    28d0:	a2 d0       	rcall	.+324    	; 0x2a16 <modf>
    28d2:	ec ef       	ldi	r30, 0xFC	; 252
    28d4:	f1 e0       	ldi	r31, 0x01	; 1
    28d6:	be de       	rcall	.-644    	; 0x2654 <__fp_powser>
    28d8:	4f 91       	pop	r20
    28da:	5f 91       	pop	r21
    28dc:	ef 91       	pop	r30
    28de:	ff 91       	pop	r31
    28e0:	e5 95       	asr	r30
    28e2:	ee 1f       	adc	r30, r30
    28e4:	ff 1f       	adc	r31, r31
    28e6:	49 f0       	breq	.+18     	; 0x28fa <exp+0x4e>
    28e8:	fe 57       	subi	r31, 0x7E	; 126
    28ea:	e0 68       	ori	r30, 0x80	; 128
    28ec:	44 27       	eor	r20, r20
    28ee:	ee 0f       	add	r30, r30
    28f0:	44 1f       	adc	r20, r20
    28f2:	fa 95       	dec	r31
    28f4:	e1 f7       	brne	.-8      	; 0x28ee <exp+0x42>
    28f6:	41 95       	neg	r20
    28f8:	55 0b       	sbc	r21, r21
    28fa:	14 d0       	rcall	.+40     	; 0x2924 <ldexp>
    28fc:	0f 90       	pop	r0
    28fe:	07 fe       	sbrs	r0, 7
    2900:	1a cf       	rjmp	.-460    	; 0x2736 <inverse>
    2902:	08 95       	ret

00002904 <__fp_mpack>:
    2904:	9f 3f       	cpi	r25, 0xFF	; 255
    2906:	31 f0       	breq	.+12     	; 0x2914 <__fp_mpack_finite+0xc>

00002908 <__fp_mpack_finite>:
    2908:	91 50       	subi	r25, 0x01	; 1
    290a:	20 f4       	brcc	.+8      	; 0x2914 <__fp_mpack_finite+0xc>
    290c:	87 95       	ror	r24
    290e:	77 95       	ror	r23
    2910:	67 95       	ror	r22
    2912:	b7 95       	ror	r27
    2914:	88 0f       	add	r24, r24
    2916:	91 1d       	adc	r25, r1
    2918:	96 95       	lsr	r25
    291a:	87 95       	ror	r24
    291c:	97 f9       	bld	r25, 7
    291e:	08 95       	ret
    2920:	80 ce       	rjmp	.-768    	; 0x2622 <__fp_inf>
    2922:	f0 cf       	rjmp	.-32     	; 0x2904 <__fp_mpack>

00002924 <ldexp>:
    2924:	e3 de       	rcall	.-570    	; 0x26ec <__fp_splitA>
    2926:	e8 f3       	brcs	.-6      	; 0x2922 <__fp_mpack_finite+0x1a>
    2928:	99 23       	and	r25, r25
    292a:	d9 f3       	breq	.-10     	; 0x2922 <__fp_mpack_finite+0x1a>
    292c:	94 0f       	add	r25, r20
    292e:	51 1d       	adc	r21, r1
    2930:	bb f3       	brvs	.-18     	; 0x2920 <__fp_mpack_finite+0x18>
    2932:	91 50       	subi	r25, 0x01	; 1
    2934:	50 40       	sbci	r21, 0x00	; 0
    2936:	94 f0       	brlt	.+36     	; 0x295c <ldexp+0x38>
    2938:	59 f0       	breq	.+22     	; 0x2950 <ldexp+0x2c>
    293a:	88 23       	and	r24, r24
    293c:	32 f0       	brmi	.+12     	; 0x294a <ldexp+0x26>
    293e:	66 0f       	add	r22, r22
    2940:	77 1f       	adc	r23, r23
    2942:	88 1f       	adc	r24, r24
    2944:	91 50       	subi	r25, 0x01	; 1
    2946:	50 40       	sbci	r21, 0x00	; 0
    2948:	c1 f7       	brne	.-16     	; 0x293a <ldexp+0x16>
    294a:	9e 3f       	cpi	r25, 0xFE	; 254
    294c:	51 05       	cpc	r21, r1
    294e:	44 f7       	brge	.-48     	; 0x2920 <__fp_mpack_finite+0x18>
    2950:	88 0f       	add	r24, r24
    2952:	91 1d       	adc	r25, r1
    2954:	96 95       	lsr	r25
    2956:	87 95       	ror	r24
    2958:	97 f9       	bld	r25, 7
    295a:	08 95       	ret
    295c:	5f 3f       	cpi	r21, 0xFF	; 255
    295e:	ac f0       	brlt	.+42     	; 0x298a <ldexp+0x66>
    2960:	98 3e       	cpi	r25, 0xE8	; 232
    2962:	9c f0       	brlt	.+38     	; 0x298a <ldexp+0x66>
    2964:	bb 27       	eor	r27, r27
    2966:	86 95       	lsr	r24
    2968:	77 95       	ror	r23
    296a:	67 95       	ror	r22
    296c:	b7 95       	ror	r27
    296e:	08 f4       	brcc	.+2      	; 0x2972 <ldexp+0x4e>
    2970:	b1 60       	ori	r27, 0x01	; 1
    2972:	93 95       	inc	r25
    2974:	c1 f7       	brne	.-16     	; 0x2966 <ldexp+0x42>
    2976:	bb 0f       	add	r27, r27
    2978:	58 f7       	brcc	.-42     	; 0x2950 <ldexp+0x2c>
    297a:	11 f4       	brne	.+4      	; 0x2980 <ldexp+0x5c>
    297c:	60 ff       	sbrs	r22, 0
    297e:	e8 cf       	rjmp	.-48     	; 0x2950 <ldexp+0x2c>
    2980:	6f 5f       	subi	r22, 0xFF	; 255
    2982:	7f 4f       	sbci	r23, 0xFF	; 255
    2984:	8f 4f       	sbci	r24, 0xFF	; 255
    2986:	9f 4f       	sbci	r25, 0xFF	; 255
    2988:	e3 cf       	rjmp	.-58     	; 0x2950 <ldexp+0x2c>
    298a:	cb ce       	rjmp	.-618    	; 0x2722 <__fp_szero>
    298c:	0e f0       	brts	.+2      	; 0x2990 <ldexp+0x6c>
    298e:	ba cf       	rjmp	.-140    	; 0x2904 <__fp_mpack>
    2990:	4e ce       	rjmp	.-868    	; 0x262e <__fp_nan>
    2992:	68 94       	set
    2994:	46 ce       	rjmp	.-884    	; 0x2622 <__fp_inf>

00002996 <log>:
    2996:	aa de       	rcall	.-684    	; 0x26ec <__fp_splitA>
    2998:	c8 f3       	brcs	.-14     	; 0x298c <ldexp+0x68>
    299a:	99 23       	and	r25, r25
    299c:	d1 f3       	breq	.-12     	; 0x2992 <ldexp+0x6e>
    299e:	c6 f3       	brts	.-16     	; 0x2990 <ldexp+0x6c>
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	1f 93       	push	r17
    29a6:	0f 93       	push	r16
    29a8:	ff 92       	push	r15
    29aa:	c9 2f       	mov	r28, r25
    29ac:	dd 27       	eor	r29, r29
    29ae:	88 23       	and	r24, r24
    29b0:	2a f0       	brmi	.+10     	; 0x29bc <log+0x26>
    29b2:	21 97       	sbiw	r28, 0x01	; 1
    29b4:	66 0f       	add	r22, r22
    29b6:	77 1f       	adc	r23, r23
    29b8:	88 1f       	adc	r24, r24
    29ba:	da f7       	brpl	.-10     	; 0x29b2 <log+0x1c>
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e8       	ldi	r20, 0x80	; 128
    29c2:	5f eb       	ldi	r21, 0xBF	; 191
    29c4:	9f e3       	ldi	r25, 0x3F	; 63
    29c6:	88 39       	cpi	r24, 0x98	; 152
    29c8:	20 f0       	brcs	.+8      	; 0x29d2 <log+0x3c>
    29ca:	80 3e       	cpi	r24, 0xE0	; 224
    29cc:	30 f0       	brcs	.+12     	; 0x29da <log+0x44>
    29ce:	21 96       	adiw	r28, 0x01	; 1
    29d0:	8f 77       	andi	r24, 0x7F	; 127
    29d2:	4d dc       	rcall	.-1894   	; 0x226e <__addsf3>
    29d4:	e4 e2       	ldi	r30, 0x24	; 36
    29d6:	f2 e0       	ldi	r31, 0x02	; 2
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <log+0x4a>
    29da:	49 dc       	rcall	.-1902   	; 0x226e <__addsf3>
    29dc:	e1 e5       	ldi	r30, 0x51	; 81
    29de:	f2 e0       	ldi	r31, 0x02	; 2
    29e0:	39 de       	rcall	.-910    	; 0x2654 <__fp_powser>
    29e2:	8b 01       	movw	r16, r22
    29e4:	be 01       	movw	r22, r28
    29e6:	ec 01       	movw	r28, r24
    29e8:	fb 2e       	mov	r15, r27
    29ea:	6f 57       	subi	r22, 0x7F	; 127
    29ec:	71 09       	sbc	r23, r1
    29ee:	75 95       	asr	r23
    29f0:	77 1f       	adc	r23, r23
    29f2:	88 0b       	sbc	r24, r24
    29f4:	99 0b       	sbc	r25, r25
    29f6:	78 dd       	rcall	.-1296   	; 0x24e8 <__floatsisf>
    29f8:	28 e1       	ldi	r18, 0x18	; 24
    29fa:	32 e7       	ldi	r19, 0x72	; 114
    29fc:	41 e3       	ldi	r20, 0x31	; 49
    29fe:	5f e3       	ldi	r21, 0x3F	; 63
    2a00:	ad de       	rcall	.-678    	; 0x275c <__mulsf3x>
    2a02:	af 2d       	mov	r26, r15
    2a04:	98 01       	movw	r18, r16
    2a06:	ae 01       	movw	r20, r28
    2a08:	ff 90       	pop	r15
    2a0a:	0f 91       	pop	r16
    2a0c:	1f 91       	pop	r17
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	3e dc       	rcall	.-1924   	; 0x2290 <__addsf3x>
    2a14:	52 ce       	rjmp	.-860    	; 0x26ba <__fp_round>

00002a16 <modf>:
    2a16:	fa 01       	movw	r30, r20
    2a18:	dc 01       	movw	r26, r24
    2a1a:	aa 0f       	add	r26, r26
    2a1c:	bb 1f       	adc	r27, r27
    2a1e:	9b 01       	movw	r18, r22
    2a20:	ac 01       	movw	r20, r24
    2a22:	bf 57       	subi	r27, 0x7F	; 127
    2a24:	28 f4       	brcc	.+10     	; 0x2a30 <modf+0x1a>
    2a26:	22 27       	eor	r18, r18
    2a28:	33 27       	eor	r19, r19
    2a2a:	44 27       	eor	r20, r20
    2a2c:	50 78       	andi	r21, 0x80	; 128
    2a2e:	1f c0       	rjmp	.+62     	; 0x2a6e <modf+0x58>
    2a30:	b7 51       	subi	r27, 0x17	; 23
    2a32:	88 f4       	brcc	.+34     	; 0x2a56 <modf+0x40>
    2a34:	ab 2f       	mov	r26, r27
    2a36:	00 24       	eor	r0, r0
    2a38:	46 95       	lsr	r20
    2a3a:	37 95       	ror	r19
    2a3c:	27 95       	ror	r18
    2a3e:	01 1c       	adc	r0, r1
    2a40:	a3 95       	inc	r26
    2a42:	d2 f3       	brmi	.-12     	; 0x2a38 <modf+0x22>
    2a44:	00 20       	and	r0, r0
    2a46:	69 f0       	breq	.+26     	; 0x2a62 <modf+0x4c>
    2a48:	22 0f       	add	r18, r18
    2a4a:	33 1f       	adc	r19, r19
    2a4c:	44 1f       	adc	r20, r20
    2a4e:	b3 95       	inc	r27
    2a50:	da f3       	brmi	.-10     	; 0x2a48 <modf+0x32>
    2a52:	0d d0       	rcall	.+26     	; 0x2a6e <modf+0x58>
    2a54:	0b cc       	rjmp	.-2026   	; 0x226c <__subsf3>
    2a56:	61 30       	cpi	r22, 0x01	; 1
    2a58:	71 05       	cpc	r23, r1
    2a5a:	a0 e8       	ldi	r26, 0x80	; 128
    2a5c:	8a 07       	cpc	r24, r26
    2a5e:	b9 46       	sbci	r27, 0x69	; 105
    2a60:	30 f4       	brcc	.+12     	; 0x2a6e <modf+0x58>
    2a62:	9b 01       	movw	r18, r22
    2a64:	ac 01       	movw	r20, r24
    2a66:	66 27       	eor	r22, r22
    2a68:	77 27       	eor	r23, r23
    2a6a:	88 27       	eor	r24, r24
    2a6c:	90 78       	andi	r25, 0x80	; 128
    2a6e:	30 96       	adiw	r30, 0x00	; 0
    2a70:	21 f0       	breq	.+8      	; 0x2a7a <modf+0x64>
    2a72:	20 83       	st	Z, r18
    2a74:	31 83       	std	Z+1, r19	; 0x01
    2a76:	42 83       	std	Z+2, r20	; 0x02
    2a78:	53 83       	std	Z+3, r21	; 0x03
    2a7a:	08 95       	ret

00002a7c <__mulsi3>:
    2a7c:	db 01       	movw	r26, r22
    2a7e:	8f 93       	push	r24
    2a80:	9f 93       	push	r25
    2a82:	70 d0       	rcall	.+224    	; 0x2b64 <__muluhisi3>
    2a84:	bf 91       	pop	r27
    2a86:	af 91       	pop	r26
    2a88:	a2 9f       	mul	r26, r18
    2a8a:	80 0d       	add	r24, r0
    2a8c:	91 1d       	adc	r25, r1
    2a8e:	a3 9f       	mul	r26, r19
    2a90:	90 0d       	add	r25, r0
    2a92:	b2 9f       	mul	r27, r18
    2a94:	90 0d       	add	r25, r0
    2a96:	11 24       	eor	r1, r1
    2a98:	08 95       	ret

00002a9a <__udivmodhi4>:
    2a9a:	aa 1b       	sub	r26, r26
    2a9c:	bb 1b       	sub	r27, r27
    2a9e:	51 e1       	ldi	r21, 0x11	; 17
    2aa0:	07 c0       	rjmp	.+14     	; 0x2ab0 <__udivmodhi4_ep>

00002aa2 <__udivmodhi4_loop>:
    2aa2:	aa 1f       	adc	r26, r26
    2aa4:	bb 1f       	adc	r27, r27
    2aa6:	a6 17       	cp	r26, r22
    2aa8:	b7 07       	cpc	r27, r23
    2aaa:	10 f0       	brcs	.+4      	; 0x2ab0 <__udivmodhi4_ep>
    2aac:	a6 1b       	sub	r26, r22
    2aae:	b7 0b       	sbc	r27, r23

00002ab0 <__udivmodhi4_ep>:
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	5a 95       	dec	r21
    2ab6:	a9 f7       	brne	.-22     	; 0x2aa2 <__udivmodhi4_loop>
    2ab8:	80 95       	com	r24
    2aba:	90 95       	com	r25
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	08 95       	ret

00002ac2 <__divmodhi4>:
    2ac2:	97 fb       	bst	r25, 7
    2ac4:	07 2e       	mov	r0, r23
    2ac6:	16 f4       	brtc	.+4      	; 0x2acc <__divmodhi4+0xa>
    2ac8:	00 94       	com	r0
    2aca:	06 d0       	rcall	.+12     	; 0x2ad8 <__divmodhi4_neg1>
    2acc:	77 fd       	sbrc	r23, 7
    2ace:	08 d0       	rcall	.+16     	; 0x2ae0 <__divmodhi4_neg2>
    2ad0:	e4 df       	rcall	.-56     	; 0x2a9a <__udivmodhi4>
    2ad2:	07 fc       	sbrc	r0, 7
    2ad4:	05 d0       	rcall	.+10     	; 0x2ae0 <__divmodhi4_neg2>
    2ad6:	3e f4       	brtc	.+14     	; 0x2ae6 <__divmodhi4_exit>

00002ad8 <__divmodhi4_neg1>:
    2ad8:	90 95       	com	r25
    2ada:	81 95       	neg	r24
    2adc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ade:	08 95       	ret

00002ae0 <__divmodhi4_neg2>:
    2ae0:	70 95       	com	r23
    2ae2:	61 95       	neg	r22
    2ae4:	7f 4f       	sbci	r23, 0xFF	; 255

00002ae6 <__divmodhi4_exit>:
    2ae6:	08 95       	ret

00002ae8 <__udivmodsi4>:
    2ae8:	a1 e2       	ldi	r26, 0x21	; 33
    2aea:	1a 2e       	mov	r1, r26
    2aec:	aa 1b       	sub	r26, r26
    2aee:	bb 1b       	sub	r27, r27
    2af0:	fd 01       	movw	r30, r26
    2af2:	0d c0       	rjmp	.+26     	; 0x2b0e <__udivmodsi4_ep>

00002af4 <__udivmodsi4_loop>:
    2af4:	aa 1f       	adc	r26, r26
    2af6:	bb 1f       	adc	r27, r27
    2af8:	ee 1f       	adc	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	a2 17       	cp	r26, r18
    2afe:	b3 07       	cpc	r27, r19
    2b00:	e4 07       	cpc	r30, r20
    2b02:	f5 07       	cpc	r31, r21
    2b04:	20 f0       	brcs	.+8      	; 0x2b0e <__udivmodsi4_ep>
    2b06:	a2 1b       	sub	r26, r18
    2b08:	b3 0b       	sbc	r27, r19
    2b0a:	e4 0b       	sbc	r30, r20
    2b0c:	f5 0b       	sbc	r31, r21

00002b0e <__udivmodsi4_ep>:
    2b0e:	66 1f       	adc	r22, r22
    2b10:	77 1f       	adc	r23, r23
    2b12:	88 1f       	adc	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	1a 94       	dec	r1
    2b18:	69 f7       	brne	.-38     	; 0x2af4 <__udivmodsi4_loop>
    2b1a:	60 95       	com	r22
    2b1c:	70 95       	com	r23
    2b1e:	80 95       	com	r24
    2b20:	90 95       	com	r25
    2b22:	9b 01       	movw	r18, r22
    2b24:	ac 01       	movw	r20, r24
    2b26:	bd 01       	movw	r22, r26
    2b28:	cf 01       	movw	r24, r30
    2b2a:	08 95       	ret

00002b2c <__divmodsi4>:
    2b2c:	05 2e       	mov	r0, r21
    2b2e:	97 fb       	bst	r25, 7
    2b30:	16 f4       	brtc	.+4      	; 0x2b36 <__divmodsi4+0xa>
    2b32:	00 94       	com	r0
    2b34:	0f d0       	rcall	.+30     	; 0x2b54 <__negsi2>
    2b36:	57 fd       	sbrc	r21, 7
    2b38:	05 d0       	rcall	.+10     	; 0x2b44 <__divmodsi4_neg2>
    2b3a:	d6 df       	rcall	.-84     	; 0x2ae8 <__udivmodsi4>
    2b3c:	07 fc       	sbrc	r0, 7
    2b3e:	02 d0       	rcall	.+4      	; 0x2b44 <__divmodsi4_neg2>
    2b40:	46 f4       	brtc	.+16     	; 0x2b52 <__divmodsi4_exit>
    2b42:	08 c0       	rjmp	.+16     	; 0x2b54 <__negsi2>

00002b44 <__divmodsi4_neg2>:
    2b44:	50 95       	com	r21
    2b46:	40 95       	com	r20
    2b48:	30 95       	com	r19
    2b4a:	21 95       	neg	r18
    2b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4e:	4f 4f       	sbci	r20, 0xFF	; 255
    2b50:	5f 4f       	sbci	r21, 0xFF	; 255

00002b52 <__divmodsi4_exit>:
    2b52:	08 95       	ret

00002b54 <__negsi2>:
    2b54:	90 95       	com	r25
    2b56:	80 95       	com	r24
    2b58:	70 95       	com	r23
    2b5a:	61 95       	neg	r22
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b60:	9f 4f       	sbci	r25, 0xFF	; 255
    2b62:	08 95       	ret

00002b64 <__muluhisi3>:
    2b64:	27 d0       	rcall	.+78     	; 0x2bb4 <__umulhisi3>
    2b66:	a5 9f       	mul	r26, r21
    2b68:	90 0d       	add	r25, r0
    2b6a:	b4 9f       	mul	r27, r20
    2b6c:	90 0d       	add	r25, r0
    2b6e:	a4 9f       	mul	r26, r20
    2b70:	80 0d       	add	r24, r0
    2b72:	91 1d       	adc	r25, r1
    2b74:	11 24       	eor	r1, r1
    2b76:	08 95       	ret

00002b78 <__ashrdi3>:
    2b78:	97 fb       	bst	r25, 7
    2b7a:	10 f8       	bld	r1, 0

00002b7c <__lshrdi3>:
    2b7c:	16 94       	lsr	r1
    2b7e:	00 08       	sbc	r0, r0
    2b80:	0f 93       	push	r16
    2b82:	08 30       	cpi	r16, 0x08	; 8
    2b84:	98 f0       	brcs	.+38     	; 0x2bac <__lshrdi3+0x30>
    2b86:	08 50       	subi	r16, 0x08	; 8
    2b88:	23 2f       	mov	r18, r19
    2b8a:	34 2f       	mov	r19, r20
    2b8c:	45 2f       	mov	r20, r21
    2b8e:	56 2f       	mov	r21, r22
    2b90:	67 2f       	mov	r22, r23
    2b92:	78 2f       	mov	r23, r24
    2b94:	89 2f       	mov	r24, r25
    2b96:	90 2d       	mov	r25, r0
    2b98:	f4 cf       	rjmp	.-24     	; 0x2b82 <__lshrdi3+0x6>
    2b9a:	05 94       	asr	r0
    2b9c:	97 95       	ror	r25
    2b9e:	87 95       	ror	r24
    2ba0:	77 95       	ror	r23
    2ba2:	67 95       	ror	r22
    2ba4:	57 95       	ror	r21
    2ba6:	47 95       	ror	r20
    2ba8:	37 95       	ror	r19
    2baa:	27 95       	ror	r18
    2bac:	0a 95       	dec	r16
    2bae:	aa f7       	brpl	.-22     	; 0x2b9a <__lshrdi3+0x1e>
    2bb0:	0f 91       	pop	r16
    2bb2:	08 95       	ret

00002bb4 <__umulhisi3>:
    2bb4:	a2 9f       	mul	r26, r18
    2bb6:	b0 01       	movw	r22, r0
    2bb8:	b3 9f       	mul	r27, r19
    2bba:	c0 01       	movw	r24, r0
    2bbc:	a3 9f       	mul	r26, r19
    2bbe:	70 0d       	add	r23, r0
    2bc0:	81 1d       	adc	r24, r1
    2bc2:	11 24       	eor	r1, r1
    2bc4:	91 1d       	adc	r25, r1
    2bc6:	b2 9f       	mul	r27, r18
    2bc8:	70 0d       	add	r23, r0
    2bca:	81 1d       	adc	r24, r1
    2bcc:	11 24       	eor	r1, r1
    2bce:	91 1d       	adc	r25, r1
    2bd0:	08 95       	ret

00002bd2 <fdevopen>:
    2bd2:	0f 93       	push	r16
    2bd4:	1f 93       	push	r17
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	31 f4       	brne	.+12     	; 0x2bea <fdevopen+0x18>
    2bde:	61 15       	cp	r22, r1
    2be0:	71 05       	cpc	r23, r1
    2be2:	19 f4       	brne	.+6      	; 0x2bea <fdevopen+0x18>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	39 c0       	rjmp	.+114    	; 0x2c5c <fdevopen+0x8a>
    2bea:	8b 01       	movw	r16, r22
    2bec:	ec 01       	movw	r28, r24
    2bee:	6e e0       	ldi	r22, 0x0E	; 14
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	47 d5       	rcall	.+2702   	; 0x3686 <calloc>
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	89 2b       	or	r24, r25
    2bfc:	99 f3       	breq	.-26     	; 0x2be4 <fdevopen+0x12>
    2bfe:	80 e8       	ldi	r24, 0x80	; 128
    2c00:	83 83       	std	Z+3, r24	; 0x03
    2c02:	01 15       	cp	r16, r1
    2c04:	11 05       	cpc	r17, r1
    2c06:	71 f0       	breq	.+28     	; 0x2c24 <fdevopen+0x52>
    2c08:	02 87       	std	Z+10, r16	; 0x0a
    2c0a:	13 87       	std	Z+11, r17	; 0x0b
    2c0c:	81 e8       	ldi	r24, 0x81	; 129
    2c0e:	83 83       	std	Z+3, r24	; 0x03
    2c10:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <__iob>
    2c14:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <__iob+0x1>
    2c18:	89 2b       	or	r24, r25
    2c1a:	21 f4       	brne	.+8      	; 0x2c24 <fdevopen+0x52>
    2c1c:	e0 93 88 21 	sts	0x2188, r30	; 0x802188 <__iob>
    2c20:	f0 93 89 21 	sts	0x2189, r31	; 0x802189 <__iob+0x1>
    2c24:	20 97       	sbiw	r28, 0x00	; 0
    2c26:	c9 f0       	breq	.+50     	; 0x2c5a <fdevopen+0x88>
    2c28:	c0 87       	std	Z+8, r28	; 0x08
    2c2a:	d1 87       	std	Z+9, r29	; 0x09
    2c2c:	83 81       	ldd	r24, Z+3	; 0x03
    2c2e:	82 60       	ori	r24, 0x02	; 2
    2c30:	83 83       	std	Z+3, r24	; 0x03
    2c32:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <__iob+0x2>
    2c36:	90 91 8b 21 	lds	r25, 0x218B	; 0x80218b <__iob+0x3>
    2c3a:	89 2b       	or	r24, r25
    2c3c:	71 f4       	brne	.+28     	; 0x2c5a <fdevopen+0x88>
    2c3e:	e0 93 8a 21 	sts	0x218A, r30	; 0x80218a <__iob+0x2>
    2c42:	f0 93 8b 21 	sts	0x218B, r31	; 0x80218b <__iob+0x3>
    2c46:	80 91 8c 21 	lds	r24, 0x218C	; 0x80218c <__iob+0x4>
    2c4a:	90 91 8d 21 	lds	r25, 0x218D	; 0x80218d <__iob+0x5>
    2c4e:	89 2b       	or	r24, r25
    2c50:	21 f4       	brne	.+8      	; 0x2c5a <fdevopen+0x88>
    2c52:	e0 93 8c 21 	sts	0x218C, r30	; 0x80218c <__iob+0x4>
    2c56:	f0 93 8d 21 	sts	0x218D, r31	; 0x80218d <__iob+0x5>
    2c5a:	cf 01       	movw	r24, r30
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	08 95       	ret

00002c66 <printf>:
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	ae 01       	movw	r20, r28
    2c70:	4a 5f       	subi	r20, 0xFA	; 250
    2c72:	5f 4f       	sbci	r21, 0xFF	; 255
    2c74:	fa 01       	movw	r30, r20
    2c76:	61 91       	ld	r22, Z+
    2c78:	71 91       	ld	r23, Z+
    2c7a:	af 01       	movw	r20, r30
    2c7c:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <__iob+0x2>
    2c80:	90 91 8b 21 	lds	r25, 0x218B	; 0x80218b <__iob+0x3>
    2c84:	46 d0       	rcall	.+140    	; 0x2d12 <vfprintf>
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	08 95       	ret

00002c8c <sprintf>:
    2c8c:	0f 93       	push	r16
    2c8e:	1f 93       	push	r17
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	2e 97       	sbiw	r28, 0x0e	; 14
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0e 89       	ldd	r16, Y+22	; 0x16
    2ca0:	1f 89       	ldd	r17, Y+23	; 0x17
    2ca2:	86 e0       	ldi	r24, 0x06	; 6
    2ca4:	8c 83       	std	Y+4, r24	; 0x04
    2ca6:	09 83       	std	Y+1, r16	; 0x01
    2ca8:	1a 83       	std	Y+2, r17	; 0x02
    2caa:	8f ef       	ldi	r24, 0xFF	; 255
    2cac:	9f e7       	ldi	r25, 0x7F	; 127
    2cae:	8d 83       	std	Y+5, r24	; 0x05
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	ae 01       	movw	r20, r28
    2cb4:	46 5e       	subi	r20, 0xE6	; 230
    2cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb8:	68 8d       	ldd	r22, Y+24	; 0x18
    2cba:	79 8d       	ldd	r23, Y+25	; 0x19
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	28 d0       	rcall	.+80     	; 0x2d12 <vfprintf>
    2cc2:	ef 81       	ldd	r30, Y+7	; 0x07
    2cc4:	f8 85       	ldd	r31, Y+8	; 0x08
    2cc6:	e0 0f       	add	r30, r16
    2cc8:	f1 1f       	adc	r31, r17
    2cca:	10 82       	st	Z, r1
    2ccc:	2e 96       	adiw	r28, 0x0e	; 14
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	de bf       	out	0x3e, r29	; 62
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	08 95       	ret

00002cdc <sscanf>:
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	2e 97       	sbiw	r28, 0x0e	; 14
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	85 e0       	ldi	r24, 0x05	; 5
    2cec:	8c 83       	std	Y+4, r24	; 0x04
    2cee:	8c 89       	ldd	r24, Y+20	; 0x14
    2cf0:	9d 89       	ldd	r25, Y+21	; 0x15
    2cf2:	89 83       	std	Y+1, r24	; 0x01
    2cf4:	9a 83       	std	Y+2, r25	; 0x02
    2cf6:	ae 01       	movw	r20, r28
    2cf8:	48 5e       	subi	r20, 0xE8	; 232
    2cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    2cfc:	6e 89       	ldd	r22, Y+22	; 0x16
    2cfe:	7f 89       	ldd	r23, Y+23	; 0x17
    2d00:	ce 01       	movw	r24, r28
    2d02:	01 96       	adiw	r24, 0x01	; 1
    2d04:	a9 d3       	rcall	.+1874   	; 0x3458 <vfscanf>
    2d06:	2e 96       	adiw	r28, 0x0e	; 14
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	08 95       	ret

00002d12 <vfprintf>:
    2d12:	2f 92       	push	r2
    2d14:	3f 92       	push	r3
    2d16:	4f 92       	push	r4
    2d18:	5f 92       	push	r5
    2d1a:	6f 92       	push	r6
    2d1c:	7f 92       	push	r7
    2d1e:	8f 92       	push	r8
    2d20:	9f 92       	push	r9
    2d22:	af 92       	push	r10
    2d24:	bf 92       	push	r11
    2d26:	cf 92       	push	r12
    2d28:	df 92       	push	r13
    2d2a:	ef 92       	push	r14
    2d2c:	ff 92       	push	r15
    2d2e:	0f 93       	push	r16
    2d30:	1f 93       	push	r17
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	2b 97       	sbiw	r28, 0x0b	; 11
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	6c 01       	movw	r12, r24
    2d42:	7b 01       	movw	r14, r22
    2d44:	8a 01       	movw	r16, r20
    2d46:	fc 01       	movw	r30, r24
    2d48:	16 82       	std	Z+6, r1	; 0x06
    2d4a:	17 82       	std	Z+7, r1	; 0x07
    2d4c:	83 81       	ldd	r24, Z+3	; 0x03
    2d4e:	81 ff       	sbrs	r24, 1
    2d50:	bf c1       	rjmp	.+894    	; 0x30d0 <vfprintf+0x3be>
    2d52:	ce 01       	movw	r24, r28
    2d54:	01 96       	adiw	r24, 0x01	; 1
    2d56:	3c 01       	movw	r6, r24
    2d58:	f6 01       	movw	r30, r12
    2d5a:	93 81       	ldd	r25, Z+3	; 0x03
    2d5c:	f7 01       	movw	r30, r14
    2d5e:	93 fd       	sbrc	r25, 3
    2d60:	85 91       	lpm	r24, Z+
    2d62:	93 ff       	sbrs	r25, 3
    2d64:	81 91       	ld	r24, Z+
    2d66:	7f 01       	movw	r14, r30
    2d68:	88 23       	and	r24, r24
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <vfprintf+0x5c>
    2d6c:	ad c1       	rjmp	.+858    	; 0x30c8 <vfprintf+0x3b6>
    2d6e:	85 32       	cpi	r24, 0x25	; 37
    2d70:	39 f4       	brne	.+14     	; 0x2d80 <vfprintf+0x6e>
    2d72:	93 fd       	sbrc	r25, 3
    2d74:	85 91       	lpm	r24, Z+
    2d76:	93 ff       	sbrs	r25, 3
    2d78:	81 91       	ld	r24, Z+
    2d7a:	7f 01       	movw	r14, r30
    2d7c:	85 32       	cpi	r24, 0x25	; 37
    2d7e:	21 f4       	brne	.+8      	; 0x2d88 <vfprintf+0x76>
    2d80:	b6 01       	movw	r22, r12
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	29 d6       	rcall	.+3154   	; 0x39d8 <fputc>
    2d86:	e8 cf       	rjmp	.-48     	; 0x2d58 <vfprintf+0x46>
    2d88:	91 2c       	mov	r9, r1
    2d8a:	21 2c       	mov	r2, r1
    2d8c:	31 2c       	mov	r3, r1
    2d8e:	ff e1       	ldi	r31, 0x1F	; 31
    2d90:	f3 15       	cp	r31, r3
    2d92:	d8 f0       	brcs	.+54     	; 0x2dca <vfprintf+0xb8>
    2d94:	8b 32       	cpi	r24, 0x2B	; 43
    2d96:	79 f0       	breq	.+30     	; 0x2db6 <vfprintf+0xa4>
    2d98:	38 f4       	brcc	.+14     	; 0x2da8 <vfprintf+0x96>
    2d9a:	80 32       	cpi	r24, 0x20	; 32
    2d9c:	79 f0       	breq	.+30     	; 0x2dbc <vfprintf+0xaa>
    2d9e:	83 32       	cpi	r24, 0x23	; 35
    2da0:	a1 f4       	brne	.+40     	; 0x2dca <vfprintf+0xb8>
    2da2:	23 2d       	mov	r18, r3
    2da4:	20 61       	ori	r18, 0x10	; 16
    2da6:	1d c0       	rjmp	.+58     	; 0x2de2 <vfprintf+0xd0>
    2da8:	8d 32       	cpi	r24, 0x2D	; 45
    2daa:	61 f0       	breq	.+24     	; 0x2dc4 <vfprintf+0xb2>
    2dac:	80 33       	cpi	r24, 0x30	; 48
    2dae:	69 f4       	brne	.+26     	; 0x2dca <vfprintf+0xb8>
    2db0:	23 2d       	mov	r18, r3
    2db2:	21 60       	ori	r18, 0x01	; 1
    2db4:	16 c0       	rjmp	.+44     	; 0x2de2 <vfprintf+0xd0>
    2db6:	83 2d       	mov	r24, r3
    2db8:	82 60       	ori	r24, 0x02	; 2
    2dba:	38 2e       	mov	r3, r24
    2dbc:	e3 2d       	mov	r30, r3
    2dbe:	e4 60       	ori	r30, 0x04	; 4
    2dc0:	3e 2e       	mov	r3, r30
    2dc2:	2a c0       	rjmp	.+84     	; 0x2e18 <vfprintf+0x106>
    2dc4:	f3 2d       	mov	r31, r3
    2dc6:	f8 60       	ori	r31, 0x08	; 8
    2dc8:	1d c0       	rjmp	.+58     	; 0x2e04 <vfprintf+0xf2>
    2dca:	37 fc       	sbrc	r3, 7
    2dcc:	2d c0       	rjmp	.+90     	; 0x2e28 <vfprintf+0x116>
    2dce:	20 ed       	ldi	r18, 0xD0	; 208
    2dd0:	28 0f       	add	r18, r24
    2dd2:	2a 30       	cpi	r18, 0x0A	; 10
    2dd4:	40 f0       	brcs	.+16     	; 0x2de6 <vfprintf+0xd4>
    2dd6:	8e 32       	cpi	r24, 0x2E	; 46
    2dd8:	b9 f4       	brne	.+46     	; 0x2e08 <vfprintf+0xf6>
    2dda:	36 fc       	sbrc	r3, 6
    2ddc:	75 c1       	rjmp	.+746    	; 0x30c8 <vfprintf+0x3b6>
    2dde:	23 2d       	mov	r18, r3
    2de0:	20 64       	ori	r18, 0x40	; 64
    2de2:	32 2e       	mov	r3, r18
    2de4:	19 c0       	rjmp	.+50     	; 0x2e18 <vfprintf+0x106>
    2de6:	36 fe       	sbrs	r3, 6
    2de8:	06 c0       	rjmp	.+12     	; 0x2df6 <vfprintf+0xe4>
    2dea:	8a e0       	ldi	r24, 0x0A	; 10
    2dec:	98 9e       	mul	r9, r24
    2dee:	20 0d       	add	r18, r0
    2df0:	11 24       	eor	r1, r1
    2df2:	92 2e       	mov	r9, r18
    2df4:	11 c0       	rjmp	.+34     	; 0x2e18 <vfprintf+0x106>
    2df6:	ea e0       	ldi	r30, 0x0A	; 10
    2df8:	2e 9e       	mul	r2, r30
    2dfa:	20 0d       	add	r18, r0
    2dfc:	11 24       	eor	r1, r1
    2dfe:	22 2e       	mov	r2, r18
    2e00:	f3 2d       	mov	r31, r3
    2e02:	f0 62       	ori	r31, 0x20	; 32
    2e04:	3f 2e       	mov	r3, r31
    2e06:	08 c0       	rjmp	.+16     	; 0x2e18 <vfprintf+0x106>
    2e08:	8c 36       	cpi	r24, 0x6C	; 108
    2e0a:	21 f4       	brne	.+8      	; 0x2e14 <vfprintf+0x102>
    2e0c:	83 2d       	mov	r24, r3
    2e0e:	80 68       	ori	r24, 0x80	; 128
    2e10:	38 2e       	mov	r3, r24
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <vfprintf+0x106>
    2e14:	88 36       	cpi	r24, 0x68	; 104
    2e16:	41 f4       	brne	.+16     	; 0x2e28 <vfprintf+0x116>
    2e18:	f7 01       	movw	r30, r14
    2e1a:	93 fd       	sbrc	r25, 3
    2e1c:	85 91       	lpm	r24, Z+
    2e1e:	93 ff       	sbrs	r25, 3
    2e20:	81 91       	ld	r24, Z+
    2e22:	7f 01       	movw	r14, r30
    2e24:	81 11       	cpse	r24, r1
    2e26:	b3 cf       	rjmp	.-154    	; 0x2d8e <vfprintf+0x7c>
    2e28:	98 2f       	mov	r25, r24
    2e2a:	9f 7d       	andi	r25, 0xDF	; 223
    2e2c:	95 54       	subi	r25, 0x45	; 69
    2e2e:	93 30       	cpi	r25, 0x03	; 3
    2e30:	28 f4       	brcc	.+10     	; 0x2e3c <vfprintf+0x12a>
    2e32:	0c 5f       	subi	r16, 0xFC	; 252
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	9f e3       	ldi	r25, 0x3F	; 63
    2e38:	99 83       	std	Y+1, r25	; 0x01
    2e3a:	0d c0       	rjmp	.+26     	; 0x2e56 <vfprintf+0x144>
    2e3c:	83 36       	cpi	r24, 0x63	; 99
    2e3e:	31 f0       	breq	.+12     	; 0x2e4c <vfprintf+0x13a>
    2e40:	83 37       	cpi	r24, 0x73	; 115
    2e42:	71 f0       	breq	.+28     	; 0x2e60 <vfprintf+0x14e>
    2e44:	83 35       	cpi	r24, 0x53	; 83
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <vfprintf+0x138>
    2e48:	55 c0       	rjmp	.+170    	; 0x2ef4 <vfprintf+0x1e2>
    2e4a:	20 c0       	rjmp	.+64     	; 0x2e8c <vfprintf+0x17a>
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	80 81       	ld	r24, Z
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	0e 5f       	subi	r16, 0xFE	; 254
    2e54:	1f 4f       	sbci	r17, 0xFF	; 255
    2e56:	88 24       	eor	r8, r8
    2e58:	83 94       	inc	r8
    2e5a:	91 2c       	mov	r9, r1
    2e5c:	53 01       	movw	r10, r6
    2e5e:	12 c0       	rjmp	.+36     	; 0x2e84 <vfprintf+0x172>
    2e60:	28 01       	movw	r4, r16
    2e62:	f2 e0       	ldi	r31, 0x02	; 2
    2e64:	4f 0e       	add	r4, r31
    2e66:	51 1c       	adc	r5, r1
    2e68:	f8 01       	movw	r30, r16
    2e6a:	a0 80       	ld	r10, Z
    2e6c:	b1 80       	ldd	r11, Z+1	; 0x01
    2e6e:	36 fe       	sbrs	r3, 6
    2e70:	03 c0       	rjmp	.+6      	; 0x2e78 <vfprintf+0x166>
    2e72:	69 2d       	mov	r22, r9
    2e74:	70 e0       	ldi	r23, 0x00	; 0
    2e76:	02 c0       	rjmp	.+4      	; 0x2e7c <vfprintf+0x16a>
    2e78:	6f ef       	ldi	r22, 0xFF	; 255
    2e7a:	7f ef       	ldi	r23, 0xFF	; 255
    2e7c:	c5 01       	movw	r24, r10
    2e7e:	63 d5       	rcall	.+2758   	; 0x3946 <strnlen>
    2e80:	4c 01       	movw	r8, r24
    2e82:	82 01       	movw	r16, r4
    2e84:	f3 2d       	mov	r31, r3
    2e86:	ff 77       	andi	r31, 0x7F	; 127
    2e88:	3f 2e       	mov	r3, r31
    2e8a:	15 c0       	rjmp	.+42     	; 0x2eb6 <vfprintf+0x1a4>
    2e8c:	28 01       	movw	r4, r16
    2e8e:	22 e0       	ldi	r18, 0x02	; 2
    2e90:	42 0e       	add	r4, r18
    2e92:	51 1c       	adc	r5, r1
    2e94:	f8 01       	movw	r30, r16
    2e96:	a0 80       	ld	r10, Z
    2e98:	b1 80       	ldd	r11, Z+1	; 0x01
    2e9a:	36 fe       	sbrs	r3, 6
    2e9c:	03 c0       	rjmp	.+6      	; 0x2ea4 <vfprintf+0x192>
    2e9e:	69 2d       	mov	r22, r9
    2ea0:	70 e0       	ldi	r23, 0x00	; 0
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <vfprintf+0x196>
    2ea4:	6f ef       	ldi	r22, 0xFF	; 255
    2ea6:	7f ef       	ldi	r23, 0xFF	; 255
    2ea8:	c5 01       	movw	r24, r10
    2eaa:	3b d5       	rcall	.+2678   	; 0x3922 <strnlen_P>
    2eac:	4c 01       	movw	r8, r24
    2eae:	f3 2d       	mov	r31, r3
    2eb0:	f0 68       	ori	r31, 0x80	; 128
    2eb2:	3f 2e       	mov	r3, r31
    2eb4:	82 01       	movw	r16, r4
    2eb6:	33 fc       	sbrc	r3, 3
    2eb8:	19 c0       	rjmp	.+50     	; 0x2eec <vfprintf+0x1da>
    2eba:	82 2d       	mov	r24, r2
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	88 16       	cp	r8, r24
    2ec0:	99 06       	cpc	r9, r25
    2ec2:	a0 f4       	brcc	.+40     	; 0x2eec <vfprintf+0x1da>
    2ec4:	b6 01       	movw	r22, r12
    2ec6:	80 e2       	ldi	r24, 0x20	; 32
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	86 d5       	rcall	.+2828   	; 0x39d8 <fputc>
    2ecc:	2a 94       	dec	r2
    2ece:	f5 cf       	rjmp	.-22     	; 0x2eba <vfprintf+0x1a8>
    2ed0:	f5 01       	movw	r30, r10
    2ed2:	37 fc       	sbrc	r3, 7
    2ed4:	85 91       	lpm	r24, Z+
    2ed6:	37 fe       	sbrs	r3, 7
    2ed8:	81 91       	ld	r24, Z+
    2eda:	5f 01       	movw	r10, r30
    2edc:	b6 01       	movw	r22, r12
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	7b d5       	rcall	.+2806   	; 0x39d8 <fputc>
    2ee2:	21 10       	cpse	r2, r1
    2ee4:	2a 94       	dec	r2
    2ee6:	21 e0       	ldi	r18, 0x01	; 1
    2ee8:	82 1a       	sub	r8, r18
    2eea:	91 08       	sbc	r9, r1
    2eec:	81 14       	cp	r8, r1
    2eee:	91 04       	cpc	r9, r1
    2ef0:	79 f7       	brne	.-34     	; 0x2ed0 <vfprintf+0x1be>
    2ef2:	e1 c0       	rjmp	.+450    	; 0x30b6 <vfprintf+0x3a4>
    2ef4:	84 36       	cpi	r24, 0x64	; 100
    2ef6:	11 f0       	breq	.+4      	; 0x2efc <vfprintf+0x1ea>
    2ef8:	89 36       	cpi	r24, 0x69	; 105
    2efa:	39 f5       	brne	.+78     	; 0x2f4a <vfprintf+0x238>
    2efc:	f8 01       	movw	r30, r16
    2efe:	37 fe       	sbrs	r3, 7
    2f00:	07 c0       	rjmp	.+14     	; 0x2f10 <vfprintf+0x1fe>
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	0c 5f       	subi	r16, 0xFC	; 252
    2f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0e:	08 c0       	rjmp	.+16     	; 0x2f20 <vfprintf+0x20e>
    2f10:	60 81       	ld	r22, Z
    2f12:	71 81       	ldd	r23, Z+1	; 0x01
    2f14:	07 2e       	mov	r0, r23
    2f16:	00 0c       	add	r0, r0
    2f18:	88 0b       	sbc	r24, r24
    2f1a:	99 0b       	sbc	r25, r25
    2f1c:	0e 5f       	subi	r16, 0xFE	; 254
    2f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f20:	f3 2d       	mov	r31, r3
    2f22:	ff 76       	andi	r31, 0x6F	; 111
    2f24:	3f 2e       	mov	r3, r31
    2f26:	97 ff       	sbrs	r25, 7
    2f28:	09 c0       	rjmp	.+18     	; 0x2f3c <vfprintf+0x22a>
    2f2a:	90 95       	com	r25
    2f2c:	80 95       	com	r24
    2f2e:	70 95       	com	r23
    2f30:	61 95       	neg	r22
    2f32:	7f 4f       	sbci	r23, 0xFF	; 255
    2f34:	8f 4f       	sbci	r24, 0xFF	; 255
    2f36:	9f 4f       	sbci	r25, 0xFF	; 255
    2f38:	f0 68       	ori	r31, 0x80	; 128
    2f3a:	3f 2e       	mov	r3, r31
    2f3c:	2a e0       	ldi	r18, 0x0A	; 10
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	a3 01       	movw	r20, r6
    2f42:	9f d5       	rcall	.+2878   	; 0x3a82 <__ultoa_invert>
    2f44:	88 2e       	mov	r8, r24
    2f46:	86 18       	sub	r8, r6
    2f48:	44 c0       	rjmp	.+136    	; 0x2fd2 <vfprintf+0x2c0>
    2f4a:	85 37       	cpi	r24, 0x75	; 117
    2f4c:	31 f4       	brne	.+12     	; 0x2f5a <vfprintf+0x248>
    2f4e:	23 2d       	mov	r18, r3
    2f50:	2f 7e       	andi	r18, 0xEF	; 239
    2f52:	b2 2e       	mov	r11, r18
    2f54:	2a e0       	ldi	r18, 0x0A	; 10
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	25 c0       	rjmp	.+74     	; 0x2fa4 <vfprintf+0x292>
    2f5a:	93 2d       	mov	r25, r3
    2f5c:	99 7f       	andi	r25, 0xF9	; 249
    2f5e:	b9 2e       	mov	r11, r25
    2f60:	8f 36       	cpi	r24, 0x6F	; 111
    2f62:	c1 f0       	breq	.+48     	; 0x2f94 <vfprintf+0x282>
    2f64:	18 f4       	brcc	.+6      	; 0x2f6c <vfprintf+0x25a>
    2f66:	88 35       	cpi	r24, 0x58	; 88
    2f68:	79 f0       	breq	.+30     	; 0x2f88 <vfprintf+0x276>
    2f6a:	ae c0       	rjmp	.+348    	; 0x30c8 <vfprintf+0x3b6>
    2f6c:	80 37       	cpi	r24, 0x70	; 112
    2f6e:	19 f0       	breq	.+6      	; 0x2f76 <vfprintf+0x264>
    2f70:	88 37       	cpi	r24, 0x78	; 120
    2f72:	21 f0       	breq	.+8      	; 0x2f7c <vfprintf+0x26a>
    2f74:	a9 c0       	rjmp	.+338    	; 0x30c8 <vfprintf+0x3b6>
    2f76:	e9 2f       	mov	r30, r25
    2f78:	e0 61       	ori	r30, 0x10	; 16
    2f7a:	be 2e       	mov	r11, r30
    2f7c:	b4 fe       	sbrs	r11, 4
    2f7e:	0d c0       	rjmp	.+26     	; 0x2f9a <vfprintf+0x288>
    2f80:	fb 2d       	mov	r31, r11
    2f82:	f4 60       	ori	r31, 0x04	; 4
    2f84:	bf 2e       	mov	r11, r31
    2f86:	09 c0       	rjmp	.+18     	; 0x2f9a <vfprintf+0x288>
    2f88:	34 fe       	sbrs	r3, 4
    2f8a:	0a c0       	rjmp	.+20     	; 0x2fa0 <vfprintf+0x28e>
    2f8c:	29 2f       	mov	r18, r25
    2f8e:	26 60       	ori	r18, 0x06	; 6
    2f90:	b2 2e       	mov	r11, r18
    2f92:	06 c0       	rjmp	.+12     	; 0x2fa0 <vfprintf+0x28e>
    2f94:	28 e0       	ldi	r18, 0x08	; 8
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	05 c0       	rjmp	.+10     	; 0x2fa4 <vfprintf+0x292>
    2f9a:	20 e1       	ldi	r18, 0x10	; 16
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	02 c0       	rjmp	.+4      	; 0x2fa4 <vfprintf+0x292>
    2fa0:	20 e1       	ldi	r18, 0x10	; 16
    2fa2:	32 e0       	ldi	r19, 0x02	; 2
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	b7 fe       	sbrs	r11, 7
    2fa8:	07 c0       	rjmp	.+14     	; 0x2fb8 <vfprintf+0x2a6>
    2faa:	60 81       	ld	r22, Z
    2fac:	71 81       	ldd	r23, Z+1	; 0x01
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	93 81       	ldd	r25, Z+3	; 0x03
    2fb2:	0c 5f       	subi	r16, 0xFC	; 252
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	06 c0       	rjmp	.+12     	; 0x2fc4 <vfprintf+0x2b2>
    2fb8:	60 81       	ld	r22, Z
    2fba:	71 81       	ldd	r23, Z+1	; 0x01
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	0e 5f       	subi	r16, 0xFE	; 254
    2fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc4:	a3 01       	movw	r20, r6
    2fc6:	5d d5       	rcall	.+2746   	; 0x3a82 <__ultoa_invert>
    2fc8:	88 2e       	mov	r8, r24
    2fca:	86 18       	sub	r8, r6
    2fcc:	fb 2d       	mov	r31, r11
    2fce:	ff 77       	andi	r31, 0x7F	; 127
    2fd0:	3f 2e       	mov	r3, r31
    2fd2:	36 fe       	sbrs	r3, 6
    2fd4:	0d c0       	rjmp	.+26     	; 0x2ff0 <vfprintf+0x2de>
    2fd6:	23 2d       	mov	r18, r3
    2fd8:	2e 7f       	andi	r18, 0xFE	; 254
    2fda:	a2 2e       	mov	r10, r18
    2fdc:	89 14       	cp	r8, r9
    2fde:	58 f4       	brcc	.+22     	; 0x2ff6 <vfprintf+0x2e4>
    2fe0:	34 fe       	sbrs	r3, 4
    2fe2:	0b c0       	rjmp	.+22     	; 0x2ffa <vfprintf+0x2e8>
    2fe4:	32 fc       	sbrc	r3, 2
    2fe6:	09 c0       	rjmp	.+18     	; 0x2ffa <vfprintf+0x2e8>
    2fe8:	83 2d       	mov	r24, r3
    2fea:	8e 7e       	andi	r24, 0xEE	; 238
    2fec:	a8 2e       	mov	r10, r24
    2fee:	05 c0       	rjmp	.+10     	; 0x2ffa <vfprintf+0x2e8>
    2ff0:	b8 2c       	mov	r11, r8
    2ff2:	a3 2c       	mov	r10, r3
    2ff4:	03 c0       	rjmp	.+6      	; 0x2ffc <vfprintf+0x2ea>
    2ff6:	b8 2c       	mov	r11, r8
    2ff8:	01 c0       	rjmp	.+2      	; 0x2ffc <vfprintf+0x2ea>
    2ffa:	b9 2c       	mov	r11, r9
    2ffc:	a4 fe       	sbrs	r10, 4
    2ffe:	0f c0       	rjmp	.+30     	; 0x301e <vfprintf+0x30c>
    3000:	fe 01       	movw	r30, r28
    3002:	e8 0d       	add	r30, r8
    3004:	f1 1d       	adc	r31, r1
    3006:	80 81       	ld	r24, Z
    3008:	80 33       	cpi	r24, 0x30	; 48
    300a:	21 f4       	brne	.+8      	; 0x3014 <vfprintf+0x302>
    300c:	9a 2d       	mov	r25, r10
    300e:	99 7e       	andi	r25, 0xE9	; 233
    3010:	a9 2e       	mov	r10, r25
    3012:	09 c0       	rjmp	.+18     	; 0x3026 <vfprintf+0x314>
    3014:	a2 fe       	sbrs	r10, 2
    3016:	06 c0       	rjmp	.+12     	; 0x3024 <vfprintf+0x312>
    3018:	b3 94       	inc	r11
    301a:	b3 94       	inc	r11
    301c:	04 c0       	rjmp	.+8      	; 0x3026 <vfprintf+0x314>
    301e:	8a 2d       	mov	r24, r10
    3020:	86 78       	andi	r24, 0x86	; 134
    3022:	09 f0       	breq	.+2      	; 0x3026 <vfprintf+0x314>
    3024:	b3 94       	inc	r11
    3026:	a3 fc       	sbrc	r10, 3
    3028:	10 c0       	rjmp	.+32     	; 0x304a <vfprintf+0x338>
    302a:	a0 fe       	sbrs	r10, 0
    302c:	06 c0       	rjmp	.+12     	; 0x303a <vfprintf+0x328>
    302e:	b2 14       	cp	r11, r2
    3030:	80 f4       	brcc	.+32     	; 0x3052 <vfprintf+0x340>
    3032:	28 0c       	add	r2, r8
    3034:	92 2c       	mov	r9, r2
    3036:	9b 18       	sub	r9, r11
    3038:	0d c0       	rjmp	.+26     	; 0x3054 <vfprintf+0x342>
    303a:	b2 14       	cp	r11, r2
    303c:	58 f4       	brcc	.+22     	; 0x3054 <vfprintf+0x342>
    303e:	b6 01       	movw	r22, r12
    3040:	80 e2       	ldi	r24, 0x20	; 32
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	c9 d4       	rcall	.+2450   	; 0x39d8 <fputc>
    3046:	b3 94       	inc	r11
    3048:	f8 cf       	rjmp	.-16     	; 0x303a <vfprintf+0x328>
    304a:	b2 14       	cp	r11, r2
    304c:	18 f4       	brcc	.+6      	; 0x3054 <vfprintf+0x342>
    304e:	2b 18       	sub	r2, r11
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <vfprintf+0x344>
    3052:	98 2c       	mov	r9, r8
    3054:	21 2c       	mov	r2, r1
    3056:	a4 fe       	sbrs	r10, 4
    3058:	0f c0       	rjmp	.+30     	; 0x3078 <vfprintf+0x366>
    305a:	b6 01       	movw	r22, r12
    305c:	80 e3       	ldi	r24, 0x30	; 48
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	bb d4       	rcall	.+2422   	; 0x39d8 <fputc>
    3062:	a2 fe       	sbrs	r10, 2
    3064:	16 c0       	rjmp	.+44     	; 0x3092 <vfprintf+0x380>
    3066:	a1 fc       	sbrc	r10, 1
    3068:	03 c0       	rjmp	.+6      	; 0x3070 <vfprintf+0x35e>
    306a:	88 e7       	ldi	r24, 0x78	; 120
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <vfprintf+0x362>
    3070:	88 e5       	ldi	r24, 0x58	; 88
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	b6 01       	movw	r22, r12
    3076:	0c c0       	rjmp	.+24     	; 0x3090 <vfprintf+0x37e>
    3078:	8a 2d       	mov	r24, r10
    307a:	86 78       	andi	r24, 0x86	; 134
    307c:	51 f0       	breq	.+20     	; 0x3092 <vfprintf+0x380>
    307e:	a1 fe       	sbrs	r10, 1
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <vfprintf+0x374>
    3082:	8b e2       	ldi	r24, 0x2B	; 43
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <vfprintf+0x376>
    3086:	80 e2       	ldi	r24, 0x20	; 32
    3088:	a7 fc       	sbrc	r10, 7
    308a:	8d e2       	ldi	r24, 0x2D	; 45
    308c:	b6 01       	movw	r22, r12
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	a3 d4       	rcall	.+2374   	; 0x39d8 <fputc>
    3092:	89 14       	cp	r8, r9
    3094:	30 f4       	brcc	.+12     	; 0x30a2 <vfprintf+0x390>
    3096:	b6 01       	movw	r22, r12
    3098:	80 e3       	ldi	r24, 0x30	; 48
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	9d d4       	rcall	.+2362   	; 0x39d8 <fputc>
    309e:	9a 94       	dec	r9
    30a0:	f8 cf       	rjmp	.-16     	; 0x3092 <vfprintf+0x380>
    30a2:	8a 94       	dec	r8
    30a4:	f3 01       	movw	r30, r6
    30a6:	e8 0d       	add	r30, r8
    30a8:	f1 1d       	adc	r31, r1
    30aa:	80 81       	ld	r24, Z
    30ac:	b6 01       	movw	r22, r12
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	93 d4       	rcall	.+2342   	; 0x39d8 <fputc>
    30b2:	81 10       	cpse	r8, r1
    30b4:	f6 cf       	rjmp	.-20     	; 0x30a2 <vfprintf+0x390>
    30b6:	22 20       	and	r2, r2
    30b8:	09 f4       	brne	.+2      	; 0x30bc <vfprintf+0x3aa>
    30ba:	4e ce       	rjmp	.-868    	; 0x2d58 <vfprintf+0x46>
    30bc:	b6 01       	movw	r22, r12
    30be:	80 e2       	ldi	r24, 0x20	; 32
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	8a d4       	rcall	.+2324   	; 0x39d8 <fputc>
    30c4:	2a 94       	dec	r2
    30c6:	f7 cf       	rjmp	.-18     	; 0x30b6 <vfprintf+0x3a4>
    30c8:	f6 01       	movw	r30, r12
    30ca:	86 81       	ldd	r24, Z+6	; 0x06
    30cc:	97 81       	ldd	r25, Z+7	; 0x07
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <vfprintf+0x3c2>
    30d0:	8f ef       	ldi	r24, 0xFF	; 255
    30d2:	9f ef       	ldi	r25, 0xFF	; 255
    30d4:	2b 96       	adiw	r28, 0x0b	; 11
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	0f 91       	pop	r16
    30e2:	ff 90       	pop	r15
    30e4:	ef 90       	pop	r14
    30e6:	df 90       	pop	r13
    30e8:	cf 90       	pop	r12
    30ea:	bf 90       	pop	r11
    30ec:	af 90       	pop	r10
    30ee:	9f 90       	pop	r9
    30f0:	8f 90       	pop	r8
    30f2:	7f 90       	pop	r7
    30f4:	6f 90       	pop	r6
    30f6:	5f 90       	pop	r5
    30f8:	4f 90       	pop	r4
    30fa:	3f 90       	pop	r3
    30fc:	2f 90       	pop	r2
    30fe:	08 95       	ret

00003100 <putval>:
    3100:	20 fd       	sbrc	r18, 0
    3102:	09 c0       	rjmp	.+18     	; 0x3116 <putval+0x16>
    3104:	fc 01       	movw	r30, r24
    3106:	23 fd       	sbrc	r18, 3
    3108:	05 c0       	rjmp	.+10     	; 0x3114 <putval+0x14>
    310a:	22 ff       	sbrs	r18, 2
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <putval+0x12>
    310e:	73 83       	std	Z+3, r23	; 0x03
    3110:	62 83       	std	Z+2, r22	; 0x02
    3112:	51 83       	std	Z+1, r21	; 0x01
    3114:	40 83       	st	Z, r20
    3116:	08 95       	ret

00003118 <mulacc>:
    3118:	44 fd       	sbrc	r20, 4
    311a:	17 c0       	rjmp	.+46     	; 0x314a <mulacc+0x32>
    311c:	46 fd       	sbrc	r20, 6
    311e:	17 c0       	rjmp	.+46     	; 0x314e <mulacc+0x36>
    3120:	ab 01       	movw	r20, r22
    3122:	bc 01       	movw	r22, r24
    3124:	da 01       	movw	r26, r20
    3126:	fb 01       	movw	r30, r22
    3128:	aa 0f       	add	r26, r26
    312a:	bb 1f       	adc	r27, r27
    312c:	ee 1f       	adc	r30, r30
    312e:	ff 1f       	adc	r31, r31
    3130:	10 94       	com	r1
    3132:	d1 f7       	brne	.-12     	; 0x3128 <mulacc+0x10>
    3134:	4a 0f       	add	r20, r26
    3136:	5b 1f       	adc	r21, r27
    3138:	6e 1f       	adc	r22, r30
    313a:	7f 1f       	adc	r23, r31
    313c:	cb 01       	movw	r24, r22
    313e:	ba 01       	movw	r22, r20
    3140:	66 0f       	add	r22, r22
    3142:	77 1f       	adc	r23, r23
    3144:	88 1f       	adc	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	09 c0       	rjmp	.+18     	; 0x315c <mulacc+0x44>
    314a:	33 e0       	ldi	r19, 0x03	; 3
    314c:	01 c0       	rjmp	.+2      	; 0x3150 <mulacc+0x38>
    314e:	34 e0       	ldi	r19, 0x04	; 4
    3150:	66 0f       	add	r22, r22
    3152:	77 1f       	adc	r23, r23
    3154:	88 1f       	adc	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	31 50       	subi	r19, 0x01	; 1
    315a:	d1 f7       	brne	.-12     	; 0x3150 <mulacc+0x38>
    315c:	62 0f       	add	r22, r18
    315e:	71 1d       	adc	r23, r1
    3160:	81 1d       	adc	r24, r1
    3162:	91 1d       	adc	r25, r1
    3164:	08 95       	ret

00003166 <skip_spaces>:
    3166:	0f 93       	push	r16
    3168:	1f 93       	push	r17
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	8c 01       	movw	r16, r24
    3170:	c8 01       	movw	r24, r16
    3172:	f4 d3       	rcall	.+2024   	; 0x395c <fgetc>
    3174:	ec 01       	movw	r28, r24
    3176:	97 fd       	sbrc	r25, 7
    3178:	06 c0       	rjmp	.+12     	; 0x3186 <skip_spaces+0x20>
    317a:	c0 d3       	rcall	.+1920   	; 0x38fc <isspace>
    317c:	89 2b       	or	r24, r25
    317e:	c1 f7       	brne	.-16     	; 0x3170 <skip_spaces+0xa>
    3180:	b8 01       	movw	r22, r16
    3182:	ce 01       	movw	r24, r28
    3184:	65 d4       	rcall	.+2250   	; 0x3a50 <ungetc>
    3186:	ce 01       	movw	r24, r28
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	1f 91       	pop	r17
    318e:	0f 91       	pop	r16
    3190:	08 95       	ret

00003192 <conv_int>:
    3192:	8f 92       	push	r8
    3194:	9f 92       	push	r9
    3196:	af 92       	push	r10
    3198:	bf 92       	push	r11
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	8c 01       	movw	r16, r24
    31a8:	d6 2f       	mov	r29, r22
    31aa:	7a 01       	movw	r14, r20
    31ac:	b2 2e       	mov	r11, r18
    31ae:	d6 d3       	rcall	.+1964   	; 0x395c <fgetc>
    31b0:	9c 01       	movw	r18, r24
    31b2:	33 27       	eor	r19, r19
    31b4:	2b 32       	cpi	r18, 0x2B	; 43
    31b6:	31 05       	cpc	r19, r1
    31b8:	31 f0       	breq	.+12     	; 0x31c6 <conv_int+0x34>
    31ba:	2d 32       	cpi	r18, 0x2D	; 45
    31bc:	31 05       	cpc	r19, r1
    31be:	59 f4       	brne	.+22     	; 0x31d6 <conv_int+0x44>
    31c0:	8b 2d       	mov	r24, r11
    31c2:	80 68       	ori	r24, 0x80	; 128
    31c4:	b8 2e       	mov	r11, r24
    31c6:	d1 50       	subi	r29, 0x01	; 1
    31c8:	11 f4       	brne	.+4      	; 0x31ce <conv_int+0x3c>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	61 c0       	rjmp	.+194    	; 0x3290 <conv_int+0xfe>
    31ce:	c8 01       	movw	r24, r16
    31d0:	c5 d3       	rcall	.+1930   	; 0x395c <fgetc>
    31d2:	97 fd       	sbrc	r25, 7
    31d4:	fa cf       	rjmp	.-12     	; 0x31ca <conv_int+0x38>
    31d6:	cb 2d       	mov	r28, r11
    31d8:	cd 7f       	andi	r28, 0xFD	; 253
    31da:	2b 2d       	mov	r18, r11
    31dc:	20 73       	andi	r18, 0x30	; 48
    31de:	f9 f4       	brne	.+62     	; 0x321e <conv_int+0x8c>
    31e0:	80 33       	cpi	r24, 0x30	; 48
    31e2:	e9 f4       	brne	.+58     	; 0x321e <conv_int+0x8c>
    31e4:	aa 24       	eor	r10, r10
    31e6:	aa 94       	dec	r10
    31e8:	ad 0e       	add	r10, r29
    31ea:	09 f4       	brne	.+2      	; 0x31ee <conv_int+0x5c>
    31ec:	3e c0       	rjmp	.+124    	; 0x326a <conv_int+0xd8>
    31ee:	c8 01       	movw	r24, r16
    31f0:	b5 d3       	rcall	.+1898   	; 0x395c <fgetc>
    31f2:	97 fd       	sbrc	r25, 7
    31f4:	3a c0       	rjmp	.+116    	; 0x326a <conv_int+0xd8>
    31f6:	9c 01       	movw	r18, r24
    31f8:	2f 7d       	andi	r18, 0xDF	; 223
    31fa:	33 27       	eor	r19, r19
    31fc:	28 35       	cpi	r18, 0x58	; 88
    31fe:	31 05       	cpc	r19, r1
    3200:	41 f4       	brne	.+16     	; 0x3212 <conv_int+0x80>
    3202:	c2 64       	ori	r28, 0x42	; 66
    3204:	d2 50       	subi	r29, 0x02	; 2
    3206:	89 f1       	breq	.+98     	; 0x326a <conv_int+0xd8>
    3208:	c8 01       	movw	r24, r16
    320a:	a8 d3       	rcall	.+1872   	; 0x395c <fgetc>
    320c:	97 ff       	sbrs	r25, 7
    320e:	07 c0       	rjmp	.+14     	; 0x321e <conv_int+0x8c>
    3210:	2c c0       	rjmp	.+88     	; 0x326a <conv_int+0xd8>
    3212:	b6 fe       	sbrs	r11, 6
    3214:	02 c0       	rjmp	.+4      	; 0x321a <conv_int+0x88>
    3216:	c2 60       	ori	r28, 0x02	; 2
    3218:	01 c0       	rjmp	.+2      	; 0x321c <conv_int+0x8a>
    321a:	c2 61       	ori	r28, 0x12	; 18
    321c:	da 2d       	mov	r29, r10
    321e:	81 2c       	mov	r8, r1
    3220:	91 2c       	mov	r9, r1
    3222:	54 01       	movw	r10, r8
    3224:	20 ed       	ldi	r18, 0xD0	; 208
    3226:	28 0f       	add	r18, r24
    3228:	28 30       	cpi	r18, 0x08	; 8
    322a:	78 f0       	brcs	.+30     	; 0x324a <conv_int+0xb8>
    322c:	c4 ff       	sbrs	r28, 4
    322e:	03 c0       	rjmp	.+6      	; 0x3236 <conv_int+0xa4>
    3230:	b8 01       	movw	r22, r16
    3232:	0e d4       	rcall	.+2076   	; 0x3a50 <ungetc>
    3234:	17 c0       	rjmp	.+46     	; 0x3264 <conv_int+0xd2>
    3236:	2a 30       	cpi	r18, 0x0A	; 10
    3238:	40 f0       	brcs	.+16     	; 0x324a <conv_int+0xb8>
    323a:	c6 ff       	sbrs	r28, 6
    323c:	f9 cf       	rjmp	.-14     	; 0x3230 <conv_int+0x9e>
    323e:	2f 7d       	andi	r18, 0xDF	; 223
    3240:	3f ee       	ldi	r19, 0xEF	; 239
    3242:	32 0f       	add	r19, r18
    3244:	36 30       	cpi	r19, 0x06	; 6
    3246:	a0 f7       	brcc	.-24     	; 0x3230 <conv_int+0x9e>
    3248:	27 50       	subi	r18, 0x07	; 7
    324a:	4c 2f       	mov	r20, r28
    324c:	c5 01       	movw	r24, r10
    324e:	b4 01       	movw	r22, r8
    3250:	63 df       	rcall	.-314    	; 0x3118 <mulacc>
    3252:	4b 01       	movw	r8, r22
    3254:	5c 01       	movw	r10, r24
    3256:	c2 60       	ori	r28, 0x02	; 2
    3258:	d1 50       	subi	r29, 0x01	; 1
    325a:	51 f0       	breq	.+20     	; 0x3270 <conv_int+0xde>
    325c:	c8 01       	movw	r24, r16
    325e:	7e d3       	rcall	.+1788   	; 0x395c <fgetc>
    3260:	97 ff       	sbrs	r25, 7
    3262:	e0 cf       	rjmp	.-64     	; 0x3224 <conv_int+0x92>
    3264:	c1 fd       	sbrc	r28, 1
    3266:	04 c0       	rjmp	.+8      	; 0x3270 <conv_int+0xde>
    3268:	b0 cf       	rjmp	.-160    	; 0x31ca <conv_int+0x38>
    326a:	81 2c       	mov	r8, r1
    326c:	91 2c       	mov	r9, r1
    326e:	54 01       	movw	r10, r8
    3270:	c7 ff       	sbrs	r28, 7
    3272:	08 c0       	rjmp	.+16     	; 0x3284 <conv_int+0xf2>
    3274:	b0 94       	com	r11
    3276:	a0 94       	com	r10
    3278:	90 94       	com	r9
    327a:	80 94       	com	r8
    327c:	81 1c       	adc	r8, r1
    327e:	91 1c       	adc	r9, r1
    3280:	a1 1c       	adc	r10, r1
    3282:	b1 1c       	adc	r11, r1
    3284:	2c 2f       	mov	r18, r28
    3286:	b5 01       	movw	r22, r10
    3288:	a4 01       	movw	r20, r8
    328a:	c7 01       	movw	r24, r14
    328c:	39 df       	rcall	.-398    	; 0x3100 <putval>
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	1f 91       	pop	r17
    3296:	0f 91       	pop	r16
    3298:	ff 90       	pop	r15
    329a:	ef 90       	pop	r14
    329c:	bf 90       	pop	r11
    329e:	af 90       	pop	r10
    32a0:	9f 90       	pop	r9
    32a2:	8f 90       	pop	r8
    32a4:	08 95       	ret

000032a6 <conv_brk>:
    32a6:	5f 92       	push	r5
    32a8:	6f 92       	push	r6
    32aa:	7f 92       	push	r7
    32ac:	8f 92       	push	r8
    32ae:	9f 92       	push	r9
    32b0:	af 92       	push	r10
    32b2:	bf 92       	push	r11
    32b4:	cf 92       	push	r12
    32b6:	df 92       	push	r13
    32b8:	ef 92       	push	r14
    32ba:	ff 92       	push	r15
    32bc:	0f 93       	push	r16
    32be:	1f 93       	push	r17
    32c0:	cf 93       	push	r28
    32c2:	df 93       	push	r29
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	a0 97       	sbiw	r28, 0x20	; 32
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	5c 01       	movw	r10, r24
    32d0:	96 2e       	mov	r9, r22
    32d2:	7a 01       	movw	r14, r20
    32d4:	f9 01       	movw	r30, r18
    32d6:	8e 01       	movw	r16, r28
    32d8:	0f 5f       	subi	r16, 0xFF	; 255
    32da:	1f 4f       	sbci	r17, 0xFF	; 255
    32dc:	68 01       	movw	r12, r16
    32de:	80 e2       	ldi	r24, 0x20	; 32
    32e0:	d8 01       	movw	r26, r16
    32e2:	1d 92       	st	X+, r1
    32e4:	8a 95       	dec	r24
    32e6:	e9 f7       	brne	.-6      	; 0x32e2 <conv_brk+0x3c>
    32e8:	d5 01       	movw	r26, r10
    32ea:	13 96       	adiw	r26, 0x03	; 3
    32ec:	8c 90       	ld	r8, X
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	61 2c       	mov	r6, r1
    32f4:	71 2c       	mov	r7, r1
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	61 e0       	ldi	r22, 0x01	; 1
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	83 fc       	sbrc	r8, 3
    32fe:	25 91       	lpm	r18, Z+
    3300:	83 fe       	sbrs	r8, 3
    3302:	21 91       	ld	r18, Z+
    3304:	8f 01       	movw	r16, r30
    3306:	52 2e       	mov	r5, r18
    3308:	21 11       	cpse	r18, r1
    330a:	03 c0       	rjmp	.+6      	; 0x3312 <conv_brk+0x6c>
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	90 c0       	rjmp	.+288    	; 0x3432 <conv_brk+0x18c>
    3312:	2e 35       	cpi	r18, 0x5E	; 94
    3314:	11 f4       	brne	.+4      	; 0x331a <conv_brk+0x74>
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	51 f1       	breq	.+84     	; 0x336e <conv_brk+0xc8>
    331a:	43 2f       	mov	r20, r19
    331c:	50 e0       	ldi	r21, 0x00	; 0
    331e:	48 17       	cp	r20, r24
    3320:	59 07       	cpc	r21, r25
    3322:	3c f4       	brge	.+14     	; 0x3332 <conv_brk+0x8c>
    3324:	2d 35       	cpi	r18, 0x5D	; 93
    3326:	59 f1       	breq	.+86     	; 0x337e <conv_brk+0xd8>
    3328:	2d 32       	cpi	r18, 0x2D	; 45
    332a:	19 f4       	brne	.+6      	; 0x3332 <conv_brk+0x8c>
    332c:	77 20       	and	r7, r7
    332e:	09 f1       	breq	.+66     	; 0x3372 <conv_brk+0xcc>
    3330:	03 c0       	rjmp	.+6      	; 0x3338 <conv_brk+0x92>
    3332:	77 20       	and	r7, r7
    3334:	09 f4       	brne	.+2      	; 0x3338 <conv_brk+0x92>
    3336:	68 c0       	rjmp	.+208    	; 0x3408 <conv_brk+0x162>
    3338:	45 2d       	mov	r20, r5
    333a:	46 95       	lsr	r20
    333c:	46 95       	lsr	r20
    333e:	46 95       	lsr	r20
    3340:	d6 01       	movw	r26, r12
    3342:	a4 0f       	add	r26, r20
    3344:	b1 1d       	adc	r27, r1
    3346:	45 2d       	mov	r20, r5
    3348:	47 70       	andi	r20, 0x07	; 7
    334a:	8b 01       	movw	r16, r22
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <conv_brk+0xac>
    334e:	00 0f       	add	r16, r16
    3350:	11 1f       	adc	r17, r17
    3352:	4a 95       	dec	r20
    3354:	e2 f7       	brpl	.-8      	; 0x334e <conv_brk+0xa8>
    3356:	a8 01       	movw	r20, r16
    3358:	5c 91       	ld	r21, X
    335a:	45 2b       	or	r20, r21
    335c:	4c 93       	st	X, r20
    335e:	65 14       	cp	r6, r5
    3360:	59 f0       	breq	.+22     	; 0x3378 <conv_brk+0xd2>
    3362:	56 14       	cp	r5, r6
    3364:	10 f4       	brcc	.+4      	; 0x336a <conv_brk+0xc4>
    3366:	53 94       	inc	r5
    3368:	e7 cf       	rjmp	.-50     	; 0x3338 <conv_brk+0x92>
    336a:	5a 94       	dec	r5
    336c:	e5 cf       	rjmp	.-54     	; 0x3338 <conv_brk+0x92>
    336e:	31 e0       	ldi	r19, 0x01	; 1
    3370:	04 c0       	rjmp	.+8      	; 0x337a <conv_brk+0xd4>
    3372:	77 24       	eor	r7, r7
    3374:	73 94       	inc	r7
    3376:	01 c0       	rjmp	.+2      	; 0x337a <conv_brk+0xd4>
    3378:	71 2c       	mov	r7, r1
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	bf cf       	rjmp	.-130    	; 0x32fc <conv_brk+0x56>
    337e:	77 20       	and	r7, r7
    3380:	19 f0       	breq	.+6      	; 0x3388 <conv_brk+0xe2>
    3382:	8e 81       	ldd	r24, Y+6	; 0x06
    3384:	80 62       	ori	r24, 0x20	; 32
    3386:	8e 83       	std	Y+6, r24	; 0x06
    3388:	31 11       	cpse	r19, r1
    338a:	03 c0       	rjmp	.+6      	; 0x3392 <conv_brk+0xec>
    338c:	88 24       	eor	r8, r8
    338e:	83 94       	inc	r8
    3390:	17 c0       	rjmp	.+46     	; 0x33c0 <conv_brk+0x11a>
    3392:	f6 01       	movw	r30, r12
    3394:	9e 01       	movw	r18, r28
    3396:	2f 5d       	subi	r18, 0xDF	; 223
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	80 81       	ld	r24, Z
    339c:	80 95       	com	r24
    339e:	81 93       	st	Z+, r24
    33a0:	2e 17       	cp	r18, r30
    33a2:	3f 07       	cpc	r19, r31
    33a4:	d1 f7       	brne	.-12     	; 0x339a <conv_brk+0xf4>
    33a6:	f2 cf       	rjmp	.-28     	; 0x338c <conv_brk+0xe6>
    33a8:	e1 14       	cp	r14, r1
    33aa:	f1 04       	cpc	r15, r1
    33ac:	29 f0       	breq	.+10     	; 0x33b8 <conv_brk+0x112>
    33ae:	d7 01       	movw	r26, r14
    33b0:	8c 93       	st	X, r24
    33b2:	f7 01       	movw	r30, r14
    33b4:	31 96       	adiw	r30, 0x01	; 1
    33b6:	7f 01       	movw	r14, r30
    33b8:	9a 94       	dec	r9
    33ba:	81 2c       	mov	r8, r1
    33bc:	99 20       	and	r9, r9
    33be:	e9 f0       	breq	.+58     	; 0x33fa <conv_brk+0x154>
    33c0:	c5 01       	movw	r24, r10
    33c2:	cc d2       	rcall	.+1432   	; 0x395c <fgetc>
    33c4:	97 fd       	sbrc	r25, 7
    33c6:	17 c0       	rjmp	.+46     	; 0x33f6 <conv_brk+0x150>
    33c8:	fc 01       	movw	r30, r24
    33ca:	ff 27       	eor	r31, r31
    33cc:	23 e0       	ldi	r18, 0x03	; 3
    33ce:	f5 95       	asr	r31
    33d0:	e7 95       	ror	r30
    33d2:	2a 95       	dec	r18
    33d4:	e1 f7       	brne	.-8      	; 0x33ce <conv_brk+0x128>
    33d6:	ec 0d       	add	r30, r12
    33d8:	fd 1d       	adc	r31, r13
    33da:	20 81       	ld	r18, Z
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	ac 01       	movw	r20, r24
    33e0:	47 70       	andi	r20, 0x07	; 7
    33e2:	55 27       	eor	r21, r21
    33e4:	02 c0       	rjmp	.+4      	; 0x33ea <conv_brk+0x144>
    33e6:	35 95       	asr	r19
    33e8:	27 95       	ror	r18
    33ea:	4a 95       	dec	r20
    33ec:	e2 f7       	brpl	.-8      	; 0x33e6 <conv_brk+0x140>
    33ee:	20 fd       	sbrc	r18, 0
    33f0:	db cf       	rjmp	.-74     	; 0x33a8 <conv_brk+0x102>
    33f2:	b5 01       	movw	r22, r10
    33f4:	2d d3       	rcall	.+1626   	; 0x3a50 <ungetc>
    33f6:	81 10       	cpse	r8, r1
    33f8:	89 cf       	rjmp	.-238    	; 0x330c <conv_brk+0x66>
    33fa:	e1 14       	cp	r14, r1
    33fc:	f1 04       	cpc	r15, r1
    33fe:	11 f0       	breq	.+4      	; 0x3404 <conv_brk+0x15e>
    3400:	d7 01       	movw	r26, r14
    3402:	1c 92       	st	X, r1
    3404:	c8 01       	movw	r24, r16
    3406:	15 c0       	rjmp	.+42     	; 0x3432 <conv_brk+0x18c>
    3408:	42 2f       	mov	r20, r18
    340a:	46 95       	lsr	r20
    340c:	46 95       	lsr	r20
    340e:	46 95       	lsr	r20
    3410:	d6 01       	movw	r26, r12
    3412:	a4 0f       	add	r26, r20
    3414:	b1 1d       	adc	r27, r1
    3416:	42 2f       	mov	r20, r18
    3418:	47 70       	andi	r20, 0x07	; 7
    341a:	8b 01       	movw	r16, r22
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <conv_brk+0x17c>
    341e:	00 0f       	add	r16, r16
    3420:	11 1f       	adc	r17, r17
    3422:	4a 95       	dec	r20
    3424:	e2 f7       	brpl	.-8      	; 0x341e <conv_brk+0x178>
    3426:	a8 01       	movw	r20, r16
    3428:	5c 91       	ld	r21, X
    342a:	45 2b       	or	r20, r21
    342c:	4c 93       	st	X, r20
    342e:	62 2e       	mov	r6, r18
    3430:	a4 cf       	rjmp	.-184    	; 0x337a <conv_brk+0xd4>
    3432:	a0 96       	adiw	r28, 0x20	; 32
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	ff 90       	pop	r15
    3442:	ef 90       	pop	r14
    3444:	df 90       	pop	r13
    3446:	cf 90       	pop	r12
    3448:	bf 90       	pop	r11
    344a:	af 90       	pop	r10
    344c:	9f 90       	pop	r9
    344e:	8f 90       	pop	r8
    3450:	7f 90       	pop	r7
    3452:	6f 90       	pop	r6
    3454:	5f 90       	pop	r5
    3456:	08 95       	ret

00003458 <vfscanf>:
    3458:	5f 92       	push	r5
    345a:	6f 92       	push	r6
    345c:	7f 92       	push	r7
    345e:	8f 92       	push	r8
    3460:	9f 92       	push	r9
    3462:	af 92       	push	r10
    3464:	bf 92       	push	r11
    3466:	cf 92       	push	r12
    3468:	df 92       	push	r13
    346a:	ef 92       	push	r14
    346c:	ff 92       	push	r15
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	6c 01       	movw	r12, r24
    3478:	eb 01       	movw	r28, r22
    347a:	5a 01       	movw	r10, r20
    347c:	fc 01       	movw	r30, r24
    347e:	16 82       	std	Z+6, r1	; 0x06
    3480:	17 82       	std	Z+7, r1	; 0x07
    3482:	51 2c       	mov	r5, r1
    3484:	f6 01       	movw	r30, r12
    3486:	e3 80       	ldd	r14, Z+3	; 0x03
    3488:	fe 01       	movw	r30, r28
    348a:	e3 fc       	sbrc	r14, 3
    348c:	85 91       	lpm	r24, Z+
    348e:	e3 fe       	sbrs	r14, 3
    3490:	81 91       	ld	r24, Z+
    3492:	18 2f       	mov	r17, r24
    3494:	ef 01       	movw	r28, r30
    3496:	88 23       	and	r24, r24
    3498:	09 f4       	brne	.+2      	; 0x349c <vfscanf+0x44>
    349a:	e0 c0       	rjmp	.+448    	; 0x365c <vfscanf+0x204>
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	2e d2       	rcall	.+1116   	; 0x38fc <isspace>
    34a0:	89 2b       	or	r24, r25
    34a2:	19 f0       	breq	.+6      	; 0x34aa <vfscanf+0x52>
    34a4:	c6 01       	movw	r24, r12
    34a6:	5f de       	rcall	.-834    	; 0x3166 <skip_spaces>
    34a8:	ed cf       	rjmp	.-38     	; 0x3484 <vfscanf+0x2c>
    34aa:	15 32       	cpi	r17, 0x25	; 37
    34ac:	41 f4       	brne	.+16     	; 0x34be <vfscanf+0x66>
    34ae:	fe 01       	movw	r30, r28
    34b0:	e3 fc       	sbrc	r14, 3
    34b2:	15 91       	lpm	r17, Z+
    34b4:	e3 fe       	sbrs	r14, 3
    34b6:	11 91       	ld	r17, Z+
    34b8:	ef 01       	movw	r28, r30
    34ba:	15 32       	cpi	r17, 0x25	; 37
    34bc:	71 f4       	brne	.+28     	; 0x34da <vfscanf+0x82>
    34be:	c6 01       	movw	r24, r12
    34c0:	4d d2       	rcall	.+1178   	; 0x395c <fgetc>
    34c2:	97 fd       	sbrc	r25, 7
    34c4:	c9 c0       	rjmp	.+402    	; 0x3658 <vfscanf+0x200>
    34c6:	41 2f       	mov	r20, r17
    34c8:	50 e0       	ldi	r21, 0x00	; 0
    34ca:	9c 01       	movw	r18, r24
    34cc:	33 27       	eor	r19, r19
    34ce:	24 17       	cp	r18, r20
    34d0:	35 07       	cpc	r19, r21
    34d2:	c1 f2       	breq	.-80     	; 0x3484 <vfscanf+0x2c>
    34d4:	b6 01       	movw	r22, r12
    34d6:	bc d2       	rcall	.+1400   	; 0x3a50 <ungetc>
    34d8:	c1 c0       	rjmp	.+386    	; 0x365c <vfscanf+0x204>
    34da:	1a 32       	cpi	r17, 0x2A	; 42
    34dc:	39 f4       	brne	.+14     	; 0x34ec <vfscanf+0x94>
    34de:	e3 fc       	sbrc	r14, 3
    34e0:	15 91       	lpm	r17, Z+
    34e2:	e3 fe       	sbrs	r14, 3
    34e4:	11 91       	ld	r17, Z+
    34e6:	ef 01       	movw	r28, r30
    34e8:	01 e0       	ldi	r16, 0x01	; 1
    34ea:	01 c0       	rjmp	.+2      	; 0x34ee <vfscanf+0x96>
    34ec:	00 e0       	ldi	r16, 0x00	; 0
    34ee:	f1 2c       	mov	r15, r1
    34f0:	20 ed       	ldi	r18, 0xD0	; 208
    34f2:	21 0f       	add	r18, r17
    34f4:	2a 30       	cpi	r18, 0x0A	; 10
    34f6:	78 f4       	brcc	.+30     	; 0x3516 <vfscanf+0xbe>
    34f8:	02 60       	ori	r16, 0x02	; 2
    34fa:	6f 2d       	mov	r22, r15
    34fc:	70 e0       	ldi	r23, 0x00	; 0
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	40 e2       	ldi	r20, 0x20	; 32
    3504:	09 de       	rcall	.-1006   	; 0x3118 <mulacc>
    3506:	f6 2e       	mov	r15, r22
    3508:	fe 01       	movw	r30, r28
    350a:	e3 fc       	sbrc	r14, 3
    350c:	15 91       	lpm	r17, Z+
    350e:	e3 fe       	sbrs	r14, 3
    3510:	11 91       	ld	r17, Z+
    3512:	ef 01       	movw	r28, r30
    3514:	ed cf       	rjmp	.-38     	; 0x34f0 <vfscanf+0x98>
    3516:	01 ff       	sbrs	r16, 1
    3518:	03 c0       	rjmp	.+6      	; 0x3520 <vfscanf+0xc8>
    351a:	f1 10       	cpse	r15, r1
    351c:	03 c0       	rjmp	.+6      	; 0x3524 <vfscanf+0xcc>
    351e:	9e c0       	rjmp	.+316    	; 0x365c <vfscanf+0x204>
    3520:	ff 24       	eor	r15, r15
    3522:	fa 94       	dec	r15
    3524:	18 36       	cpi	r17, 0x68	; 104
    3526:	19 f0       	breq	.+6      	; 0x352e <vfscanf+0xd6>
    3528:	1c 36       	cpi	r17, 0x6C	; 108
    352a:	51 f0       	breq	.+20     	; 0x3540 <vfscanf+0xe8>
    352c:	10 c0       	rjmp	.+32     	; 0x354e <vfscanf+0xf6>
    352e:	fe 01       	movw	r30, r28
    3530:	e3 fc       	sbrc	r14, 3
    3532:	15 91       	lpm	r17, Z+
    3534:	e3 fe       	sbrs	r14, 3
    3536:	11 91       	ld	r17, Z+
    3538:	ef 01       	movw	r28, r30
    353a:	18 36       	cpi	r17, 0x68	; 104
    353c:	41 f4       	brne	.+16     	; 0x354e <vfscanf+0xf6>
    353e:	08 60       	ori	r16, 0x08	; 8
    3540:	04 60       	ori	r16, 0x04	; 4
    3542:	fe 01       	movw	r30, r28
    3544:	e3 fc       	sbrc	r14, 3
    3546:	15 91       	lpm	r17, Z+
    3548:	e3 fe       	sbrs	r14, 3
    354a:	11 91       	ld	r17, Z+
    354c:	ef 01       	movw	r28, r30
    354e:	11 23       	and	r17, r17
    3550:	09 f4       	brne	.+2      	; 0x3554 <vfscanf+0xfc>
    3552:	84 c0       	rjmp	.+264    	; 0x365c <vfscanf+0x204>
    3554:	61 2f       	mov	r22, r17
    3556:	70 e0       	ldi	r23, 0x00	; 0
    3558:	8e e7       	ldi	r24, 0x7E	; 126
    355a:	92 e0       	ldi	r25, 0x02	; 2
    355c:	d7 d1       	rcall	.+942    	; 0x390c <strchr_P>
    355e:	89 2b       	or	r24, r25
    3560:	09 f4       	brne	.+2      	; 0x3564 <vfscanf+0x10c>
    3562:	7c c0       	rjmp	.+248    	; 0x365c <vfscanf+0x204>
    3564:	00 fd       	sbrc	r16, 0
    3566:	07 c0       	rjmp	.+14     	; 0x3576 <vfscanf+0x11e>
    3568:	f5 01       	movw	r30, r10
    356a:	80 80       	ld	r8, Z
    356c:	91 80       	ldd	r9, Z+1	; 0x01
    356e:	c5 01       	movw	r24, r10
    3570:	02 96       	adiw	r24, 0x02	; 2
    3572:	5c 01       	movw	r10, r24
    3574:	02 c0       	rjmp	.+4      	; 0x357a <vfscanf+0x122>
    3576:	81 2c       	mov	r8, r1
    3578:	91 2c       	mov	r9, r1
    357a:	1e 36       	cpi	r17, 0x6E	; 110
    357c:	49 f4       	brne	.+18     	; 0x3590 <vfscanf+0x138>
    357e:	f6 01       	movw	r30, r12
    3580:	46 81       	ldd	r20, Z+6	; 0x06
    3582:	57 81       	ldd	r21, Z+7	; 0x07
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	20 2f       	mov	r18, r16
    358a:	c4 01       	movw	r24, r8
    358c:	b9 dd       	rcall	.-1166   	; 0x3100 <putval>
    358e:	7a cf       	rjmp	.-268    	; 0x3484 <vfscanf+0x2c>
    3590:	13 36       	cpi	r17, 0x63	; 99
    3592:	a1 f4       	brne	.+40     	; 0x35bc <vfscanf+0x164>
    3594:	01 fd       	sbrc	r16, 1
    3596:	02 c0       	rjmp	.+4      	; 0x359c <vfscanf+0x144>
    3598:	ff 24       	eor	r15, r15
    359a:	f3 94       	inc	r15
    359c:	c6 01       	movw	r24, r12
    359e:	de d1       	rcall	.+956    	; 0x395c <fgetc>
    35a0:	97 fd       	sbrc	r25, 7
    35a2:	5a c0       	rjmp	.+180    	; 0x3658 <vfscanf+0x200>
    35a4:	81 14       	cp	r8, r1
    35a6:	91 04       	cpc	r9, r1
    35a8:	29 f0       	breq	.+10     	; 0x35b4 <vfscanf+0x15c>
    35aa:	f4 01       	movw	r30, r8
    35ac:	80 83       	st	Z, r24
    35ae:	c4 01       	movw	r24, r8
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	4c 01       	movw	r8, r24
    35b4:	fa 94       	dec	r15
    35b6:	f1 10       	cpse	r15, r1
    35b8:	f1 cf       	rjmp	.-30     	; 0x359c <vfscanf+0x144>
    35ba:	4a c0       	rjmp	.+148    	; 0x3650 <vfscanf+0x1f8>
    35bc:	1b 35       	cpi	r17, 0x5B	; 91
    35be:	51 f4       	brne	.+20     	; 0x35d4 <vfscanf+0x17c>
    35c0:	9e 01       	movw	r18, r28
    35c2:	a4 01       	movw	r20, r8
    35c4:	6f 2d       	mov	r22, r15
    35c6:	c6 01       	movw	r24, r12
    35c8:	6e de       	rcall	.-804    	; 0x32a6 <conv_brk>
    35ca:	ec 01       	movw	r28, r24
    35cc:	89 2b       	or	r24, r25
    35ce:	09 f0       	breq	.+2      	; 0x35d2 <vfscanf+0x17a>
    35d0:	3f c0       	rjmp	.+126    	; 0x3650 <vfscanf+0x1f8>
    35d2:	39 c0       	rjmp	.+114    	; 0x3646 <vfscanf+0x1ee>
    35d4:	c6 01       	movw	r24, r12
    35d6:	c7 dd       	rcall	.-1138   	; 0x3166 <skip_spaces>
    35d8:	97 fd       	sbrc	r25, 7
    35da:	3e c0       	rjmp	.+124    	; 0x3658 <vfscanf+0x200>
    35dc:	1f 36       	cpi	r17, 0x6F	; 111
    35de:	49 f1       	breq	.+82     	; 0x3632 <vfscanf+0x1da>
    35e0:	28 f4       	brcc	.+10     	; 0x35ec <vfscanf+0x194>
    35e2:	14 36       	cpi	r17, 0x64	; 100
    35e4:	21 f1       	breq	.+72     	; 0x362e <vfscanf+0x1d6>
    35e6:	19 36       	cpi	r17, 0x69	; 105
    35e8:	39 f1       	breq	.+78     	; 0x3638 <vfscanf+0x1e0>
    35ea:	25 c0       	rjmp	.+74     	; 0x3636 <vfscanf+0x1de>
    35ec:	13 37       	cpi	r17, 0x73	; 115
    35ee:	71 f0       	breq	.+28     	; 0x360c <vfscanf+0x1b4>
    35f0:	15 37       	cpi	r17, 0x75	; 117
    35f2:	e9 f0       	breq	.+58     	; 0x362e <vfscanf+0x1d6>
    35f4:	20 c0       	rjmp	.+64     	; 0x3636 <vfscanf+0x1de>
    35f6:	81 14       	cp	r8, r1
    35f8:	91 04       	cpc	r9, r1
    35fa:	29 f0       	breq	.+10     	; 0x3606 <vfscanf+0x1ae>
    35fc:	f4 01       	movw	r30, r8
    35fe:	60 82       	st	Z, r6
    3600:	c4 01       	movw	r24, r8
    3602:	01 96       	adiw	r24, 0x01	; 1
    3604:	4c 01       	movw	r8, r24
    3606:	fa 94       	dec	r15
    3608:	ff 20       	and	r15, r15
    360a:	59 f0       	breq	.+22     	; 0x3622 <vfscanf+0x1ca>
    360c:	c6 01       	movw	r24, r12
    360e:	a6 d1       	rcall	.+844    	; 0x395c <fgetc>
    3610:	3c 01       	movw	r6, r24
    3612:	97 fd       	sbrc	r25, 7
    3614:	06 c0       	rjmp	.+12     	; 0x3622 <vfscanf+0x1ca>
    3616:	72 d1       	rcall	.+740    	; 0x38fc <isspace>
    3618:	89 2b       	or	r24, r25
    361a:	69 f3       	breq	.-38     	; 0x35f6 <vfscanf+0x19e>
    361c:	b6 01       	movw	r22, r12
    361e:	c3 01       	movw	r24, r6
    3620:	17 d2       	rcall	.+1070   	; 0x3a50 <ungetc>
    3622:	81 14       	cp	r8, r1
    3624:	91 04       	cpc	r9, r1
    3626:	a1 f0       	breq	.+40     	; 0x3650 <vfscanf+0x1f8>
    3628:	f4 01       	movw	r30, r8
    362a:	10 82       	st	Z, r1
    362c:	11 c0       	rjmp	.+34     	; 0x3650 <vfscanf+0x1f8>
    362e:	00 62       	ori	r16, 0x20	; 32
    3630:	03 c0       	rjmp	.+6      	; 0x3638 <vfscanf+0x1e0>
    3632:	00 61       	ori	r16, 0x10	; 16
    3634:	01 c0       	rjmp	.+2      	; 0x3638 <vfscanf+0x1e0>
    3636:	00 64       	ori	r16, 0x40	; 64
    3638:	20 2f       	mov	r18, r16
    363a:	a4 01       	movw	r20, r8
    363c:	6f 2d       	mov	r22, r15
    363e:	c6 01       	movw	r24, r12
    3640:	a8 dd       	rcall	.-1200   	; 0x3192 <conv_int>
    3642:	81 11       	cpse	r24, r1
    3644:	05 c0       	rjmp	.+10     	; 0x3650 <vfscanf+0x1f8>
    3646:	f6 01       	movw	r30, r12
    3648:	83 81       	ldd	r24, Z+3	; 0x03
    364a:	80 73       	andi	r24, 0x30	; 48
    364c:	29 f4       	brne	.+10     	; 0x3658 <vfscanf+0x200>
    364e:	06 c0       	rjmp	.+12     	; 0x365c <vfscanf+0x204>
    3650:	00 fd       	sbrc	r16, 0
    3652:	18 cf       	rjmp	.-464    	; 0x3484 <vfscanf+0x2c>
    3654:	53 94       	inc	r5
    3656:	16 cf       	rjmp	.-468    	; 0x3484 <vfscanf+0x2c>
    3658:	55 20       	and	r5, r5
    365a:	19 f0       	breq	.+6      	; 0x3662 <vfscanf+0x20a>
    365c:	85 2d       	mov	r24, r5
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	02 c0       	rjmp	.+4      	; 0x3666 <vfscanf+0x20e>
    3662:	8f ef       	ldi	r24, 0xFF	; 255
    3664:	9f ef       	ldi	r25, 0xFF	; 255
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	ff 90       	pop	r15
    3670:	ef 90       	pop	r14
    3672:	df 90       	pop	r13
    3674:	cf 90       	pop	r12
    3676:	bf 90       	pop	r11
    3678:	af 90       	pop	r10
    367a:	9f 90       	pop	r9
    367c:	8f 90       	pop	r8
    367e:	7f 90       	pop	r7
    3680:	6f 90       	pop	r6
    3682:	5f 90       	pop	r5
    3684:	08 95       	ret

00003686 <calloc>:
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
    368e:	86 9f       	mul	r24, r22
    3690:	80 01       	movw	r16, r0
    3692:	87 9f       	mul	r24, r23
    3694:	10 0d       	add	r17, r0
    3696:	96 9f       	mul	r25, r22
    3698:	10 0d       	add	r17, r0
    369a:	11 24       	eor	r1, r1
    369c:	c8 01       	movw	r24, r16
    369e:	0d d0       	rcall	.+26     	; 0x36ba <malloc>
    36a0:	ec 01       	movw	r28, r24
    36a2:	00 97       	sbiw	r24, 0x00	; 0
    36a4:	21 f0       	breq	.+8      	; 0x36ae <calloc+0x28>
    36a6:	a8 01       	movw	r20, r16
    36a8:	60 e0       	ldi	r22, 0x00	; 0
    36aa:	70 e0       	ldi	r23, 0x00	; 0
    36ac:	45 d1       	rcall	.+650    	; 0x3938 <memset>
    36ae:	ce 01       	movw	r24, r28
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	1f 91       	pop	r17
    36b6:	0f 91       	pop	r16
    36b8:	08 95       	ret

000036ba <malloc>:
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	82 30       	cpi	r24, 0x02	; 2
    36c4:	91 05       	cpc	r25, r1
    36c6:	10 f4       	brcc	.+4      	; 0x36cc <malloc+0x12>
    36c8:	82 e0       	ldi	r24, 0x02	; 2
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	e0 91 90 21 	lds	r30, 0x2190	; 0x802190 <__flp>
    36d0:	f0 91 91 21 	lds	r31, 0x2191	; 0x802191 <__flp+0x1>
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	a0 e0       	ldi	r26, 0x00	; 0
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	30 97       	sbiw	r30, 0x00	; 0
    36de:	19 f1       	breq	.+70     	; 0x3726 <malloc+0x6c>
    36e0:	40 81       	ld	r20, Z
    36e2:	51 81       	ldd	r21, Z+1	; 0x01
    36e4:	02 81       	ldd	r16, Z+2	; 0x02
    36e6:	13 81       	ldd	r17, Z+3	; 0x03
    36e8:	48 17       	cp	r20, r24
    36ea:	59 07       	cpc	r21, r25
    36ec:	c8 f0       	brcs	.+50     	; 0x3720 <malloc+0x66>
    36ee:	84 17       	cp	r24, r20
    36f0:	95 07       	cpc	r25, r21
    36f2:	69 f4       	brne	.+26     	; 0x370e <malloc+0x54>
    36f4:	10 97       	sbiw	r26, 0x00	; 0
    36f6:	31 f0       	breq	.+12     	; 0x3704 <malloc+0x4a>
    36f8:	12 96       	adiw	r26, 0x02	; 2
    36fa:	0c 93       	st	X, r16
    36fc:	12 97       	sbiw	r26, 0x02	; 2
    36fe:	13 96       	adiw	r26, 0x03	; 3
    3700:	1c 93       	st	X, r17
    3702:	27 c0       	rjmp	.+78     	; 0x3752 <malloc+0x98>
    3704:	00 93 90 21 	sts	0x2190, r16	; 0x802190 <__flp>
    3708:	10 93 91 21 	sts	0x2191, r17	; 0x802191 <__flp+0x1>
    370c:	22 c0       	rjmp	.+68     	; 0x3752 <malloc+0x98>
    370e:	21 15       	cp	r18, r1
    3710:	31 05       	cpc	r19, r1
    3712:	19 f0       	breq	.+6      	; 0x371a <malloc+0x60>
    3714:	42 17       	cp	r20, r18
    3716:	53 07       	cpc	r21, r19
    3718:	18 f4       	brcc	.+6      	; 0x3720 <malloc+0x66>
    371a:	9a 01       	movw	r18, r20
    371c:	bd 01       	movw	r22, r26
    371e:	ef 01       	movw	r28, r30
    3720:	df 01       	movw	r26, r30
    3722:	f8 01       	movw	r30, r16
    3724:	db cf       	rjmp	.-74     	; 0x36dc <malloc+0x22>
    3726:	21 15       	cp	r18, r1
    3728:	31 05       	cpc	r19, r1
    372a:	f9 f0       	breq	.+62     	; 0x376a <malloc+0xb0>
    372c:	28 1b       	sub	r18, r24
    372e:	39 0b       	sbc	r19, r25
    3730:	24 30       	cpi	r18, 0x04	; 4
    3732:	31 05       	cpc	r19, r1
    3734:	80 f4       	brcc	.+32     	; 0x3756 <malloc+0x9c>
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	9b 81       	ldd	r25, Y+3	; 0x03
    373a:	61 15       	cp	r22, r1
    373c:	71 05       	cpc	r23, r1
    373e:	21 f0       	breq	.+8      	; 0x3748 <malloc+0x8e>
    3740:	fb 01       	movw	r30, r22
    3742:	82 83       	std	Z+2, r24	; 0x02
    3744:	93 83       	std	Z+3, r25	; 0x03
    3746:	04 c0       	rjmp	.+8      	; 0x3750 <malloc+0x96>
    3748:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <__flp>
    374c:	90 93 91 21 	sts	0x2191, r25	; 0x802191 <__flp+0x1>
    3750:	fe 01       	movw	r30, r28
    3752:	32 96       	adiw	r30, 0x02	; 2
    3754:	44 c0       	rjmp	.+136    	; 0x37de <malloc+0x124>
    3756:	fe 01       	movw	r30, r28
    3758:	e2 0f       	add	r30, r18
    375a:	f3 1f       	adc	r31, r19
    375c:	81 93       	st	Z+, r24
    375e:	91 93       	st	Z+, r25
    3760:	22 50       	subi	r18, 0x02	; 2
    3762:	31 09       	sbc	r19, r1
    3764:	28 83       	st	Y, r18
    3766:	39 83       	std	Y+1, r19	; 0x01
    3768:	3a c0       	rjmp	.+116    	; 0x37de <malloc+0x124>
    376a:	20 91 8e 21 	lds	r18, 0x218E	; 0x80218e <__brkval>
    376e:	30 91 8f 21 	lds	r19, 0x218F	; 0x80218f <__brkval+0x1>
    3772:	23 2b       	or	r18, r19
    3774:	41 f4       	brne	.+16     	; 0x3786 <malloc+0xcc>
    3776:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    377a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    377e:	20 93 8e 21 	sts	0x218E, r18	; 0x80218e <__brkval>
    3782:	30 93 8f 21 	sts	0x218F, r19	; 0x80218f <__brkval+0x1>
    3786:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    378a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    378e:	21 15       	cp	r18, r1
    3790:	31 05       	cpc	r19, r1
    3792:	41 f4       	brne	.+16     	; 0x37a4 <malloc+0xea>
    3794:	2d b7       	in	r18, 0x3d	; 61
    3796:	3e b7       	in	r19, 0x3e	; 62
    3798:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    379c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    37a0:	24 1b       	sub	r18, r20
    37a2:	35 0b       	sbc	r19, r21
    37a4:	e0 91 8e 21 	lds	r30, 0x218E	; 0x80218e <__brkval>
    37a8:	f0 91 8f 21 	lds	r31, 0x218F	; 0x80218f <__brkval+0x1>
    37ac:	e2 17       	cp	r30, r18
    37ae:	f3 07       	cpc	r31, r19
    37b0:	a0 f4       	brcc	.+40     	; 0x37da <malloc+0x120>
    37b2:	2e 1b       	sub	r18, r30
    37b4:	3f 0b       	sbc	r19, r31
    37b6:	28 17       	cp	r18, r24
    37b8:	39 07       	cpc	r19, r25
    37ba:	78 f0       	brcs	.+30     	; 0x37da <malloc+0x120>
    37bc:	ac 01       	movw	r20, r24
    37be:	4e 5f       	subi	r20, 0xFE	; 254
    37c0:	5f 4f       	sbci	r21, 0xFF	; 255
    37c2:	24 17       	cp	r18, r20
    37c4:	35 07       	cpc	r19, r21
    37c6:	48 f0       	brcs	.+18     	; 0x37da <malloc+0x120>
    37c8:	4e 0f       	add	r20, r30
    37ca:	5f 1f       	adc	r21, r31
    37cc:	40 93 8e 21 	sts	0x218E, r20	; 0x80218e <__brkval>
    37d0:	50 93 8f 21 	sts	0x218F, r21	; 0x80218f <__brkval+0x1>
    37d4:	81 93       	st	Z+, r24
    37d6:	91 93       	st	Z+, r25
    37d8:	02 c0       	rjmp	.+4      	; 0x37de <malloc+0x124>
    37da:	e0 e0       	ldi	r30, 0x00	; 0
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	cf 01       	movw	r24, r30
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	08 95       	ret

000037ea <free>:
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	00 97       	sbiw	r24, 0x00	; 0
    37f0:	09 f4       	brne	.+2      	; 0x37f4 <free+0xa>
    37f2:	81 c0       	rjmp	.+258    	; 0x38f6 <free+0x10c>
    37f4:	fc 01       	movw	r30, r24
    37f6:	32 97       	sbiw	r30, 0x02	; 2
    37f8:	12 82       	std	Z+2, r1	; 0x02
    37fa:	13 82       	std	Z+3, r1	; 0x03
    37fc:	a0 91 90 21 	lds	r26, 0x2190	; 0x802190 <__flp>
    3800:	b0 91 91 21 	lds	r27, 0x2191	; 0x802191 <__flp+0x1>
    3804:	10 97       	sbiw	r26, 0x00	; 0
    3806:	81 f4       	brne	.+32     	; 0x3828 <free+0x3e>
    3808:	20 81       	ld	r18, Z
    380a:	31 81       	ldd	r19, Z+1	; 0x01
    380c:	82 0f       	add	r24, r18
    380e:	93 1f       	adc	r25, r19
    3810:	20 91 8e 21 	lds	r18, 0x218E	; 0x80218e <__brkval>
    3814:	30 91 8f 21 	lds	r19, 0x218F	; 0x80218f <__brkval+0x1>
    3818:	28 17       	cp	r18, r24
    381a:	39 07       	cpc	r19, r25
    381c:	51 f5       	brne	.+84     	; 0x3872 <free+0x88>
    381e:	e0 93 8e 21 	sts	0x218E, r30	; 0x80218e <__brkval>
    3822:	f0 93 8f 21 	sts	0x218F, r31	; 0x80218f <__brkval+0x1>
    3826:	67 c0       	rjmp	.+206    	; 0x38f6 <free+0x10c>
    3828:	ed 01       	movw	r28, r26
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	ce 17       	cp	r28, r30
    3830:	df 07       	cpc	r29, r31
    3832:	40 f4       	brcc	.+16     	; 0x3844 <free+0x5a>
    3834:	4a 81       	ldd	r20, Y+2	; 0x02
    3836:	5b 81       	ldd	r21, Y+3	; 0x03
    3838:	9e 01       	movw	r18, r28
    383a:	41 15       	cp	r20, r1
    383c:	51 05       	cpc	r21, r1
    383e:	f1 f0       	breq	.+60     	; 0x387c <free+0x92>
    3840:	ea 01       	movw	r28, r20
    3842:	f5 cf       	rjmp	.-22     	; 0x382e <free+0x44>
    3844:	c2 83       	std	Z+2, r28	; 0x02
    3846:	d3 83       	std	Z+3, r29	; 0x03
    3848:	40 81       	ld	r20, Z
    384a:	51 81       	ldd	r21, Z+1	; 0x01
    384c:	84 0f       	add	r24, r20
    384e:	95 1f       	adc	r25, r21
    3850:	c8 17       	cp	r28, r24
    3852:	d9 07       	cpc	r29, r25
    3854:	59 f4       	brne	.+22     	; 0x386c <free+0x82>
    3856:	88 81       	ld	r24, Y
    3858:	99 81       	ldd	r25, Y+1	; 0x01
    385a:	84 0f       	add	r24, r20
    385c:	95 1f       	adc	r25, r21
    385e:	02 96       	adiw	r24, 0x02	; 2
    3860:	80 83       	st	Z, r24
    3862:	91 83       	std	Z+1, r25	; 0x01
    3864:	8a 81       	ldd	r24, Y+2	; 0x02
    3866:	9b 81       	ldd	r25, Y+3	; 0x03
    3868:	82 83       	std	Z+2, r24	; 0x02
    386a:	93 83       	std	Z+3, r25	; 0x03
    386c:	21 15       	cp	r18, r1
    386e:	31 05       	cpc	r19, r1
    3870:	29 f4       	brne	.+10     	; 0x387c <free+0x92>
    3872:	e0 93 90 21 	sts	0x2190, r30	; 0x802190 <__flp>
    3876:	f0 93 91 21 	sts	0x2191, r31	; 0x802191 <__flp+0x1>
    387a:	3d c0       	rjmp	.+122    	; 0x38f6 <free+0x10c>
    387c:	e9 01       	movw	r28, r18
    387e:	ea 83       	std	Y+2, r30	; 0x02
    3880:	fb 83       	std	Y+3, r31	; 0x03
    3882:	49 91       	ld	r20, Y+
    3884:	59 91       	ld	r21, Y+
    3886:	c4 0f       	add	r28, r20
    3888:	d5 1f       	adc	r29, r21
    388a:	ec 17       	cp	r30, r28
    388c:	fd 07       	cpc	r31, r29
    388e:	61 f4       	brne	.+24     	; 0x38a8 <free+0xbe>
    3890:	80 81       	ld	r24, Z
    3892:	91 81       	ldd	r25, Z+1	; 0x01
    3894:	84 0f       	add	r24, r20
    3896:	95 1f       	adc	r25, r21
    3898:	02 96       	adiw	r24, 0x02	; 2
    389a:	e9 01       	movw	r28, r18
    389c:	88 83       	st	Y, r24
    389e:	99 83       	std	Y+1, r25	; 0x01
    38a0:	82 81       	ldd	r24, Z+2	; 0x02
    38a2:	93 81       	ldd	r25, Z+3	; 0x03
    38a4:	8a 83       	std	Y+2, r24	; 0x02
    38a6:	9b 83       	std	Y+3, r25	; 0x03
    38a8:	e0 e0       	ldi	r30, 0x00	; 0
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	12 96       	adiw	r26, 0x02	; 2
    38ae:	8d 91       	ld	r24, X+
    38b0:	9c 91       	ld	r25, X
    38b2:	13 97       	sbiw	r26, 0x03	; 3
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	19 f0       	breq	.+6      	; 0x38be <free+0xd4>
    38b8:	fd 01       	movw	r30, r26
    38ba:	dc 01       	movw	r26, r24
    38bc:	f7 cf       	rjmp	.-18     	; 0x38ac <free+0xc2>
    38be:	8d 91       	ld	r24, X+
    38c0:	9c 91       	ld	r25, X
    38c2:	11 97       	sbiw	r26, 0x01	; 1
    38c4:	9d 01       	movw	r18, r26
    38c6:	2e 5f       	subi	r18, 0xFE	; 254
    38c8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ca:	82 0f       	add	r24, r18
    38cc:	93 1f       	adc	r25, r19
    38ce:	20 91 8e 21 	lds	r18, 0x218E	; 0x80218e <__brkval>
    38d2:	30 91 8f 21 	lds	r19, 0x218F	; 0x80218f <__brkval+0x1>
    38d6:	28 17       	cp	r18, r24
    38d8:	39 07       	cpc	r19, r25
    38da:	69 f4       	brne	.+26     	; 0x38f6 <free+0x10c>
    38dc:	30 97       	sbiw	r30, 0x00	; 0
    38de:	29 f4       	brne	.+10     	; 0x38ea <free+0x100>
    38e0:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <__flp>
    38e4:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <__flp+0x1>
    38e8:	02 c0       	rjmp	.+4      	; 0x38ee <free+0x104>
    38ea:	12 82       	std	Z+2, r1	; 0x02
    38ec:	13 82       	std	Z+3, r1	; 0x03
    38ee:	a0 93 8e 21 	sts	0x218E, r26	; 0x80218e <__brkval>
    38f2:	b0 93 8f 21 	sts	0x218F, r27	; 0x80218f <__brkval+0x1>
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	08 95       	ret

000038fc <isspace>:
    38fc:	91 11       	cpse	r25, r1
    38fe:	1f c1       	rjmp	.+574    	; 0x3b3e <__ctype_isfalse>
    3900:	80 32       	cpi	r24, 0x20	; 32
    3902:	19 f0       	breq	.+6      	; 0x390a <isspace+0xe>
    3904:	89 50       	subi	r24, 0x09	; 9
    3906:	85 50       	subi	r24, 0x05	; 5
    3908:	d0 f7       	brcc	.-12     	; 0x38fe <isspace+0x2>
    390a:	08 95       	ret

0000390c <strchr_P>:
    390c:	fc 01       	movw	r30, r24
    390e:	05 90       	lpm	r0, Z+
    3910:	06 16       	cp	r0, r22
    3912:	21 f0       	breq	.+8      	; 0x391c <strchr_P+0x10>
    3914:	00 20       	and	r0, r0
    3916:	d9 f7       	brne	.-10     	; 0x390e <strchr_P+0x2>
    3918:	c0 01       	movw	r24, r0
    391a:	08 95       	ret
    391c:	31 97       	sbiw	r30, 0x01	; 1
    391e:	cf 01       	movw	r24, r30
    3920:	08 95       	ret

00003922 <strnlen_P>:
    3922:	fc 01       	movw	r30, r24
    3924:	05 90       	lpm	r0, Z+
    3926:	61 50       	subi	r22, 0x01	; 1
    3928:	70 40       	sbci	r23, 0x00	; 0
    392a:	01 10       	cpse	r0, r1
    392c:	d8 f7       	brcc	.-10     	; 0x3924 <strnlen_P+0x2>
    392e:	80 95       	com	r24
    3930:	90 95       	com	r25
    3932:	8e 0f       	add	r24, r30
    3934:	9f 1f       	adc	r25, r31
    3936:	08 95       	ret

00003938 <memset>:
    3938:	dc 01       	movw	r26, r24
    393a:	01 c0       	rjmp	.+2      	; 0x393e <memset+0x6>
    393c:	6d 93       	st	X+, r22
    393e:	41 50       	subi	r20, 0x01	; 1
    3940:	50 40       	sbci	r21, 0x00	; 0
    3942:	e0 f7       	brcc	.-8      	; 0x393c <memset+0x4>
    3944:	08 95       	ret

00003946 <strnlen>:
    3946:	fc 01       	movw	r30, r24
    3948:	61 50       	subi	r22, 0x01	; 1
    394a:	70 40       	sbci	r23, 0x00	; 0
    394c:	01 90       	ld	r0, Z+
    394e:	01 10       	cpse	r0, r1
    3950:	d8 f7       	brcc	.-10     	; 0x3948 <strnlen+0x2>
    3952:	80 95       	com	r24
    3954:	90 95       	com	r25
    3956:	8e 0f       	add	r24, r30
    3958:	9f 1f       	adc	r25, r31
    395a:	08 95       	ret

0000395c <fgetc>:
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
    3960:	ec 01       	movw	r28, r24
    3962:	2b 81       	ldd	r18, Y+3	; 0x03
    3964:	20 ff       	sbrs	r18, 0
    3966:	33 c0       	rjmp	.+102    	; 0x39ce <fgetc+0x72>
    3968:	26 ff       	sbrs	r18, 6
    396a:	0a c0       	rjmp	.+20     	; 0x3980 <fgetc+0x24>
    396c:	2f 7b       	andi	r18, 0xBF	; 191
    396e:	2b 83       	std	Y+3, r18	; 0x03
    3970:	8e 81       	ldd	r24, Y+6	; 0x06
    3972:	9f 81       	ldd	r25, Y+7	; 0x07
    3974:	01 96       	adiw	r24, 0x01	; 1
    3976:	8e 83       	std	Y+6, r24	; 0x06
    3978:	9f 83       	std	Y+7, r25	; 0x07
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	29 c0       	rjmp	.+82     	; 0x39d2 <fgetc+0x76>
    3980:	22 ff       	sbrs	r18, 2
    3982:	0f c0       	rjmp	.+30     	; 0x39a2 <fgetc+0x46>
    3984:	e8 81       	ld	r30, Y
    3986:	f9 81       	ldd	r31, Y+1	; 0x01
    3988:	80 81       	ld	r24, Z
    398a:	08 2e       	mov	r0, r24
    398c:	00 0c       	add	r0, r0
    398e:	99 0b       	sbc	r25, r25
    3990:	00 97       	sbiw	r24, 0x00	; 0
    3992:	19 f4       	brne	.+6      	; 0x399a <fgetc+0x3e>
    3994:	20 62       	ori	r18, 0x20	; 32
    3996:	2b 83       	std	Y+3, r18	; 0x03
    3998:	1a c0       	rjmp	.+52     	; 0x39ce <fgetc+0x72>
    399a:	31 96       	adiw	r30, 0x01	; 1
    399c:	e8 83       	st	Y, r30
    399e:	f9 83       	std	Y+1, r31	; 0x01
    39a0:	0e c0       	rjmp	.+28     	; 0x39be <fgetc+0x62>
    39a2:	ea 85       	ldd	r30, Y+10	; 0x0a
    39a4:	fb 85       	ldd	r31, Y+11	; 0x0b
    39a6:	19 95       	eicall
    39a8:	97 ff       	sbrs	r25, 7
    39aa:	09 c0       	rjmp	.+18     	; 0x39be <fgetc+0x62>
    39ac:	2b 81       	ldd	r18, Y+3	; 0x03
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	11 f0       	breq	.+4      	; 0x39b6 <fgetc+0x5a>
    39b2:	80 e2       	ldi	r24, 0x20	; 32
    39b4:	01 c0       	rjmp	.+2      	; 0x39b8 <fgetc+0x5c>
    39b6:	80 e1       	ldi	r24, 0x10	; 16
    39b8:	82 2b       	or	r24, r18
    39ba:	8b 83       	std	Y+3, r24	; 0x03
    39bc:	08 c0       	rjmp	.+16     	; 0x39ce <fgetc+0x72>
    39be:	2e 81       	ldd	r18, Y+6	; 0x06
    39c0:	3f 81       	ldd	r19, Y+7	; 0x07
    39c2:	2f 5f       	subi	r18, 0xFF	; 255
    39c4:	3f 4f       	sbci	r19, 0xFF	; 255
    39c6:	2e 83       	std	Y+6, r18	; 0x06
    39c8:	3f 83       	std	Y+7, r19	; 0x07
    39ca:	99 27       	eor	r25, r25
    39cc:	02 c0       	rjmp	.+4      	; 0x39d2 <fgetc+0x76>
    39ce:	8f ef       	ldi	r24, 0xFF	; 255
    39d0:	9f ef       	ldi	r25, 0xFF	; 255
    39d2:	df 91       	pop	r29
    39d4:	cf 91       	pop	r28
    39d6:	08 95       	ret

000039d8 <fputc>:
    39d8:	0f 93       	push	r16
    39da:	1f 93       	push	r17
    39dc:	cf 93       	push	r28
    39de:	df 93       	push	r29
    39e0:	fb 01       	movw	r30, r22
    39e2:	23 81       	ldd	r18, Z+3	; 0x03
    39e4:	21 fd       	sbrc	r18, 1
    39e6:	03 c0       	rjmp	.+6      	; 0x39ee <fputc+0x16>
    39e8:	8f ef       	ldi	r24, 0xFF	; 255
    39ea:	9f ef       	ldi	r25, 0xFF	; 255
    39ec:	2c c0       	rjmp	.+88     	; 0x3a46 <fputc+0x6e>
    39ee:	22 ff       	sbrs	r18, 2
    39f0:	16 c0       	rjmp	.+44     	; 0x3a1e <fputc+0x46>
    39f2:	46 81       	ldd	r20, Z+6	; 0x06
    39f4:	57 81       	ldd	r21, Z+7	; 0x07
    39f6:	24 81       	ldd	r18, Z+4	; 0x04
    39f8:	35 81       	ldd	r19, Z+5	; 0x05
    39fa:	42 17       	cp	r20, r18
    39fc:	53 07       	cpc	r21, r19
    39fe:	44 f4       	brge	.+16     	; 0x3a10 <fputc+0x38>
    3a00:	a0 81       	ld	r26, Z
    3a02:	b1 81       	ldd	r27, Z+1	; 0x01
    3a04:	9d 01       	movw	r18, r26
    3a06:	2f 5f       	subi	r18, 0xFF	; 255
    3a08:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0a:	20 83       	st	Z, r18
    3a0c:	31 83       	std	Z+1, r19	; 0x01
    3a0e:	8c 93       	st	X, r24
    3a10:	26 81       	ldd	r18, Z+6	; 0x06
    3a12:	37 81       	ldd	r19, Z+7	; 0x07
    3a14:	2f 5f       	subi	r18, 0xFF	; 255
    3a16:	3f 4f       	sbci	r19, 0xFF	; 255
    3a18:	26 83       	std	Z+6, r18	; 0x06
    3a1a:	37 83       	std	Z+7, r19	; 0x07
    3a1c:	14 c0       	rjmp	.+40     	; 0x3a46 <fputc+0x6e>
    3a1e:	8b 01       	movw	r16, r22
    3a20:	ec 01       	movw	r28, r24
    3a22:	fb 01       	movw	r30, r22
    3a24:	00 84       	ldd	r0, Z+8	; 0x08
    3a26:	f1 85       	ldd	r31, Z+9	; 0x09
    3a28:	e0 2d       	mov	r30, r0
    3a2a:	19 95       	eicall
    3a2c:	89 2b       	or	r24, r25
    3a2e:	e1 f6       	brne	.-72     	; 0x39e8 <fputc+0x10>
    3a30:	d8 01       	movw	r26, r16
    3a32:	16 96       	adiw	r26, 0x06	; 6
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	17 97       	sbiw	r26, 0x07	; 7
    3a3a:	01 96       	adiw	r24, 0x01	; 1
    3a3c:	16 96       	adiw	r26, 0x06	; 6
    3a3e:	8d 93       	st	X+, r24
    3a40:	9c 93       	st	X, r25
    3a42:	17 97       	sbiw	r26, 0x07	; 7
    3a44:	ce 01       	movw	r24, r28
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	08 95       	ret

00003a50 <ungetc>:
    3a50:	fb 01       	movw	r30, r22
    3a52:	23 81       	ldd	r18, Z+3	; 0x03
    3a54:	20 ff       	sbrs	r18, 0
    3a56:	12 c0       	rjmp	.+36     	; 0x3a7c <ungetc+0x2c>
    3a58:	26 fd       	sbrc	r18, 6
    3a5a:	10 c0       	rjmp	.+32     	; 0x3a7c <ungetc+0x2c>
    3a5c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a5e:	3f ef       	ldi	r19, 0xFF	; 255
    3a60:	93 07       	cpc	r25, r19
    3a62:	61 f0       	breq	.+24     	; 0x3a7c <ungetc+0x2c>
    3a64:	82 83       	std	Z+2, r24	; 0x02
    3a66:	2f 7d       	andi	r18, 0xDF	; 223
    3a68:	20 64       	ori	r18, 0x40	; 64
    3a6a:	23 83       	std	Z+3, r18	; 0x03
    3a6c:	26 81       	ldd	r18, Z+6	; 0x06
    3a6e:	37 81       	ldd	r19, Z+7	; 0x07
    3a70:	21 50       	subi	r18, 0x01	; 1
    3a72:	31 09       	sbc	r19, r1
    3a74:	26 83       	std	Z+6, r18	; 0x06
    3a76:	37 83       	std	Z+7, r19	; 0x07
    3a78:	99 27       	eor	r25, r25
    3a7a:	08 95       	ret
    3a7c:	8f ef       	ldi	r24, 0xFF	; 255
    3a7e:	9f ef       	ldi	r25, 0xFF	; 255
    3a80:	08 95       	ret

00003a82 <__ultoa_invert>:
    3a82:	fa 01       	movw	r30, r20
    3a84:	aa 27       	eor	r26, r26
    3a86:	28 30       	cpi	r18, 0x08	; 8
    3a88:	51 f1       	breq	.+84     	; 0x3ade <__ultoa_invert+0x5c>
    3a8a:	20 31       	cpi	r18, 0x10	; 16
    3a8c:	81 f1       	breq	.+96     	; 0x3aee <__ultoa_invert+0x6c>
    3a8e:	e8 94       	clt
    3a90:	6f 93       	push	r22
    3a92:	6e 7f       	andi	r22, 0xFE	; 254
    3a94:	6e 5f       	subi	r22, 0xFE	; 254
    3a96:	7f 4f       	sbci	r23, 0xFF	; 255
    3a98:	8f 4f       	sbci	r24, 0xFF	; 255
    3a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9c:	af 4f       	sbci	r26, 0xFF	; 255
    3a9e:	b1 e0       	ldi	r27, 0x01	; 1
    3aa0:	3e d0       	rcall	.+124    	; 0x3b1e <__ultoa_invert+0x9c>
    3aa2:	b4 e0       	ldi	r27, 0x04	; 4
    3aa4:	3c d0       	rcall	.+120    	; 0x3b1e <__ultoa_invert+0x9c>
    3aa6:	67 0f       	add	r22, r23
    3aa8:	78 1f       	adc	r23, r24
    3aaa:	89 1f       	adc	r24, r25
    3aac:	9a 1f       	adc	r25, r26
    3aae:	a1 1d       	adc	r26, r1
    3ab0:	68 0f       	add	r22, r24
    3ab2:	79 1f       	adc	r23, r25
    3ab4:	8a 1f       	adc	r24, r26
    3ab6:	91 1d       	adc	r25, r1
    3ab8:	a1 1d       	adc	r26, r1
    3aba:	6a 0f       	add	r22, r26
    3abc:	71 1d       	adc	r23, r1
    3abe:	81 1d       	adc	r24, r1
    3ac0:	91 1d       	adc	r25, r1
    3ac2:	a1 1d       	adc	r26, r1
    3ac4:	20 d0       	rcall	.+64     	; 0x3b06 <__ultoa_invert+0x84>
    3ac6:	09 f4       	brne	.+2      	; 0x3aca <__ultoa_invert+0x48>
    3ac8:	68 94       	set
    3aca:	3f 91       	pop	r19
    3acc:	2a e0       	ldi	r18, 0x0A	; 10
    3ace:	26 9f       	mul	r18, r22
    3ad0:	11 24       	eor	r1, r1
    3ad2:	30 19       	sub	r19, r0
    3ad4:	30 5d       	subi	r19, 0xD0	; 208
    3ad6:	31 93       	st	Z+, r19
    3ad8:	de f6       	brtc	.-74     	; 0x3a90 <__ultoa_invert+0xe>
    3ada:	cf 01       	movw	r24, r30
    3adc:	08 95       	ret
    3ade:	46 2f       	mov	r20, r22
    3ae0:	47 70       	andi	r20, 0x07	; 7
    3ae2:	40 5d       	subi	r20, 0xD0	; 208
    3ae4:	41 93       	st	Z+, r20
    3ae6:	b3 e0       	ldi	r27, 0x03	; 3
    3ae8:	0f d0       	rcall	.+30     	; 0x3b08 <__ultoa_invert+0x86>
    3aea:	c9 f7       	brne	.-14     	; 0x3ade <__ultoa_invert+0x5c>
    3aec:	f6 cf       	rjmp	.-20     	; 0x3ada <__ultoa_invert+0x58>
    3aee:	46 2f       	mov	r20, r22
    3af0:	4f 70       	andi	r20, 0x0F	; 15
    3af2:	40 5d       	subi	r20, 0xD0	; 208
    3af4:	4a 33       	cpi	r20, 0x3A	; 58
    3af6:	18 f0       	brcs	.+6      	; 0x3afe <__ultoa_invert+0x7c>
    3af8:	49 5d       	subi	r20, 0xD9	; 217
    3afa:	31 fd       	sbrc	r19, 1
    3afc:	40 52       	subi	r20, 0x20	; 32
    3afe:	41 93       	st	Z+, r20
    3b00:	02 d0       	rcall	.+4      	; 0x3b06 <__ultoa_invert+0x84>
    3b02:	a9 f7       	brne	.-22     	; 0x3aee <__ultoa_invert+0x6c>
    3b04:	ea cf       	rjmp	.-44     	; 0x3ada <__ultoa_invert+0x58>
    3b06:	b4 e0       	ldi	r27, 0x04	; 4
    3b08:	a6 95       	lsr	r26
    3b0a:	97 95       	ror	r25
    3b0c:	87 95       	ror	r24
    3b0e:	77 95       	ror	r23
    3b10:	67 95       	ror	r22
    3b12:	ba 95       	dec	r27
    3b14:	c9 f7       	brne	.-14     	; 0x3b08 <__ultoa_invert+0x86>
    3b16:	00 97       	sbiw	r24, 0x00	; 0
    3b18:	61 05       	cpc	r22, r1
    3b1a:	71 05       	cpc	r23, r1
    3b1c:	08 95       	ret
    3b1e:	9b 01       	movw	r18, r22
    3b20:	ac 01       	movw	r20, r24
    3b22:	0a 2e       	mov	r0, r26
    3b24:	06 94       	lsr	r0
    3b26:	57 95       	ror	r21
    3b28:	47 95       	ror	r20
    3b2a:	37 95       	ror	r19
    3b2c:	27 95       	ror	r18
    3b2e:	ba 95       	dec	r27
    3b30:	c9 f7       	brne	.-14     	; 0x3b24 <__ultoa_invert+0xa2>
    3b32:	62 0f       	add	r22, r18
    3b34:	73 1f       	adc	r23, r19
    3b36:	84 1f       	adc	r24, r20
    3b38:	95 1f       	adc	r25, r21
    3b3a:	a0 1d       	adc	r26, r0
    3b3c:	08 95       	ret

00003b3e <__ctype_isfalse>:
    3b3e:	99 27       	eor	r25, r25
    3b40:	88 27       	eor	r24, r24

00003b42 <__ctype_istrue>:
    3b42:	08 95       	ret

00003b44 <_exit>:
    3b44:	f8 94       	cli

00003b46 <__stop_program>:
    3b46:	ff cf       	rjmp	.-2      	; 0x3b46 <__stop_program>
