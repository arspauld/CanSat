
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ac6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00802000  00004ac6  00004b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000df  008020b0  008020b0  00004c0a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004c0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000540  00000000  00000000  00004ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000167f6  00000000  00000000  000051e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004d26  00000000  00000000  0001b9de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009a37  00000000  00000000  00020704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001468  00000000  00000000  0002a13c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d668  00000000  00000000  0002b5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000580e  00000000  00000000  00058c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c8  00000000  00000000  0005e420  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003a54  00000000  00000000  0005e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c1       	rjmp	.+754    	; 0x2f4 <__ctors_end>
       2:	00 00       	nop
       4:	9d c1       	rjmp	.+826    	; 0x340 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c1       	rjmp	.+822    	; 0x340 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c1       	rjmp	.+818    	; 0x340 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c1       	rjmp	.+814    	; 0x340 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c1       	rjmp	.+810    	; 0x340 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c1       	rjmp	.+806    	; 0x340 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c1       	rjmp	.+802    	; 0x340 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c1       	rjmp	.+798    	; 0x340 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c1       	rjmp	.+794    	; 0x340 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c1       	rjmp	.+790    	; 0x340 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c1       	rjmp	.+786    	; 0x340 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c1       	rjmp	.+782    	; 0x340 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c1       	rjmp	.+778    	; 0x340 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__vector_14>
      3c:	81 c1       	rjmp	.+770    	; 0x340 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c1       	rjmp	.+766    	; 0x340 <__bad_interrupt>
      42:	00 00       	nop
      44:	7d c1       	rjmp	.+762    	; 0x340 <__bad_interrupt>
      46:	00 00       	nop
      48:	7b c1       	rjmp	.+758    	; 0x340 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c1       	rjmp	.+754    	; 0x340 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c1       	rjmp	.+750    	; 0x340 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c1       	rjmp	.+746    	; 0x340 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c1       	rjmp	.+742    	; 0x340 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c1       	rjmp	.+738    	; 0x340 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c1       	rjmp	.+734    	; 0x340 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c1       	rjmp	.+730    	; 0x340 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c1       	rjmp	.+726    	; 0x340 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c1       	rjmp	.+722    	; 0x340 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c1       	rjmp	.+718    	; 0x340 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c1       	rjmp	.+714    	; 0x340 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c1       	rjmp	.+710    	; 0x340 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c1       	rjmp	.+706    	; 0x340 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c1       	rjmp	.+702    	; 0x340 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c1       	rjmp	.+698    	; 0x340 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c1       	rjmp	.+694    	; 0x340 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c1       	rjmp	.+690    	; 0x340 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c1       	rjmp	.+686    	; 0x340 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c1       	rjmp	.+682    	; 0x340 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c1       	rjmp	.+678    	; 0x340 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c1       	rjmp	.+674    	; 0x340 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c1       	rjmp	.+670    	; 0x340 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c1       	rjmp	.+666    	; 0x340 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c1       	rjmp	.+662    	; 0x340 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c1       	rjmp	.+658    	; 0x340 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c1       	rjmp	.+654    	; 0x340 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c1       	rjmp	.+650    	; 0x340 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c1       	rjmp	.+646    	; 0x340 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__vector_47>
      c0:	3f c1       	rjmp	.+638    	; 0x340 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c1       	rjmp	.+634    	; 0x340 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c1       	rjmp	.+630    	; 0x340 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c1       	rjmp	.+626    	; 0x340 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c1       	rjmp	.+622    	; 0x340 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c1       	rjmp	.+618    	; 0x340 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c1       	rjmp	.+614    	; 0x340 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c1       	rjmp	.+610    	; 0x340 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c1       	rjmp	.+606    	; 0x340 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2d c1       	rjmp	.+602    	; 0x340 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__vector_58>
      ec:	29 c1       	rjmp	.+594    	; 0x340 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	27 c1       	rjmp	.+590    	; 0x340 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	25 c1       	rjmp	.+586    	; 0x340 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	23 c1       	rjmp	.+582    	; 0x340 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	21 c1       	rjmp	.+578    	; 0x340 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1f c1       	rjmp	.+574    	; 0x340 <__bad_interrupt>
     102:	00 00       	nop
     104:	1d c1       	rjmp	.+570    	; 0x340 <__bad_interrupt>
     106:	00 00       	nop
     108:	1b c1       	rjmp	.+566    	; 0x340 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	19 c1       	rjmp	.+562    	; 0x340 <__bad_interrupt>
     10e:	00 00       	nop
     110:	17 c1       	rjmp	.+558    	; 0x340 <__bad_interrupt>
     112:	00 00       	nop
     114:	15 c1       	rjmp	.+554    	; 0x340 <__bad_interrupt>
     116:	00 00       	nop
     118:	13 c1       	rjmp	.+550    	; 0x340 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	3d c1       	rjmp	.+634    	; 0x398 <__vector_71>
     11e:	00 00       	nop
     120:	78 c1       	rjmp	.+752    	; 0x412 <__vector_72>
     122:	00 00       	nop
     124:	b3 c1       	rjmp	.+870    	; 0x48c <__vector_73>
     126:	00 00       	nop
     128:	ee c1       	rjmp	.+988    	; 0x506 <__vector_74>
     12a:	00 00       	nop
     12c:	09 c1       	rjmp	.+530    	; 0x340 <__bad_interrupt>
     12e:	00 00       	nop
     130:	07 c1       	rjmp	.+526    	; 0x340 <__bad_interrupt>
     132:	00 00       	nop
     134:	05 c1       	rjmp	.+522    	; 0x340 <__bad_interrupt>
     136:	00 00       	nop
     138:	03 c1       	rjmp	.+518    	; 0x340 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	01 c1       	rjmp	.+514    	; 0x340 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ff c0       	rjmp	.+510    	; 0x340 <__bad_interrupt>
     142:	00 00       	nop
     144:	fd c0       	rjmp	.+506    	; 0x340 <__bad_interrupt>
     146:	00 00       	nop
     148:	fb c0       	rjmp	.+502    	; 0x340 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f9 c0       	rjmp	.+498    	; 0x340 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f7 c0       	rjmp	.+494    	; 0x340 <__bad_interrupt>
     152:	00 00       	nop
     154:	f5 c0       	rjmp	.+490    	; 0x340 <__bad_interrupt>
     156:	00 00       	nop
     158:	f3 c0       	rjmp	.+486    	; 0x340 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f1 c0       	rjmp	.+482    	; 0x340 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ef c0       	rjmp	.+478    	; 0x340 <__bad_interrupt>
     162:	00 00       	nop
     164:	ed c0       	rjmp	.+474    	; 0x340 <__bad_interrupt>
     166:	00 00       	nop
     168:	eb c0       	rjmp	.+470    	; 0x340 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <__vector_91>
     170:	e7 c0       	rjmp	.+462    	; 0x340 <__bad_interrupt>
     172:	00 00       	nop
     174:	e5 c0       	rjmp	.+458    	; 0x340 <__bad_interrupt>
     176:	00 00       	nop
     178:	e3 c0       	rjmp	.+454    	; 0x340 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e1 c0       	rjmp	.+450    	; 0x340 <__bad_interrupt>
     17e:	00 00       	nop
     180:	df c0       	rjmp	.+446    	; 0x340 <__bad_interrupt>
     182:	00 00       	nop
     184:	dd c0       	rjmp	.+442    	; 0x340 <__bad_interrupt>
     186:	00 00       	nop
     188:	db c0       	rjmp	.+438    	; 0x340 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d9 c0       	rjmp	.+434    	; 0x340 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d7 c0       	rjmp	.+430    	; 0x340 <__bad_interrupt>
     192:	00 00       	nop
     194:	d5 c0       	rjmp	.+426    	; 0x340 <__bad_interrupt>
     196:	00 00       	nop
     198:	d3 c0       	rjmp	.+422    	; 0x340 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d1 c0       	rjmp	.+418    	; 0x340 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	cf c0       	rjmp	.+414    	; 0x340 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	cd c0       	rjmp	.+410    	; 0x340 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cb c0       	rjmp	.+406    	; 0x340 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c9 c0       	rjmp	.+402    	; 0x340 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c7 c0       	rjmp	.+398    	; 0x340 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c5 c0       	rjmp	.+394    	; 0x340 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c3 c0       	rjmp	.+390    	; 0x340 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c1 c0       	rjmp	.+386    	; 0x340 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	bf c0       	rjmp	.+382    	; 0x340 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	bd c0       	rjmp	.+378    	; 0x340 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	bb c0       	rjmp	.+374    	; 0x340 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b9 c0       	rjmp	.+370    	; 0x340 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b7 c0       	rjmp	.+366    	; 0x340 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b5 c0       	rjmp	.+362    	; 0x340 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b3 c0       	rjmp	.+358    	; 0x340 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b1 c0       	rjmp	.+354    	; 0x340 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	af c0       	rjmp	.+350    	; 0x340 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ad c0       	rjmp	.+346    	; 0x340 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ab c0       	rjmp	.+342    	; 0x340 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a9 c0       	rjmp	.+338    	; 0x340 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a7 c0       	rjmp	.+334    	; 0x340 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a5 c0       	rjmp	.+330    	; 0x340 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a3 c0       	rjmp	.+326    	; 0x340 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	03 6e       	ori	r16, 0xE3	; 227
     1fe:	db 36       	cpi	r29, 0x6B	; 107
     200:	3d 9a       	sbi	0x07, 5	; 7
     202:	99 99       	sbic	0x13, 1	; 19
     204:	99 3d       	cpi	r25, 0xD9	; 217
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	3e 00       	.word	0x003e	; ????
     20c:	00 00       	nop
     20e:	80 3f       	cpi	r24, 0xF0	; 240
     210:	08 4a       	sbci	r16, 0xA8	; 168
     212:	d7 3b       	cpi	r29, 0xB7	; 183
     214:	3b ce       	rjmp	.-906    	; 0xfffffe8c <__eeprom_end+0xff7efe8c>
     216:	01 6e       	ori	r16, 0xE1	; 225
     218:	84 bc       	out	0x24, r8	; 36
     21a:	bf fd       	.word	0xfdbf	; ????
     21c:	c1 2f       	mov	r28, r17
     21e:	3d 6c       	ori	r19, 0xCD	; 205
     220:	74 31       	cpi	r23, 0x14	; 20
     222:	9a bd       	out	0x2a, r25	; 42
     224:	56 83       	std	Z+6, r21	; 0x06
     226:	3d da       	rcall	.-2950   	; 0xfffff6a2 <__eeprom_end+0xff7ef6a2>
     228:	3d 00       	.word	0x003d	; ????
     22a:	c7 7f       	andi	r28, 0xF7	; 247
     22c:	11 be       	out	0x31, r1	; 49
     22e:	d9 e4       	ldi	r29, 0x49	; 73
     230:	bb 4c       	sbci	r27, 0xCB	; 203
     232:	3e 91       	ld	r19, -X
     234:	6b aa       	std	Y+51, r6	; 0x33
     236:	aa be       	out	0x3a, r10	; 58
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	3f 07       	cpc	r19, r31
     23e:	2c 7a       	andi	r18, 0xAC	; 172
     240:	a5 ba       	out	0x15, r10	; 21
     242:	6c c5       	rjmp	.+2776   	; 0xd1c <data_terminal_init+0x5e>
     244:	90 da       	rcall	.-2784   	; 0xfffff766 <__eeprom_end+0xff7ef766>
     246:	3b 93       	.word	0x933b	; ????
     248:	65 fc       	sbrc	r6, 5
     24a:	8b bc       	out	0x2b, r8	; 43
     24c:	53 f8       	bld	r5, 3
     24e:	10 fd       	sbrc	r17, 0
     250:	3c 56       	subi	r19, 0x6C	; 108
     252:	92 83       	std	Z+2, r25	; 0x02
     254:	4d bd       	out	0x2d, r20	; 45
     256:	87 9d       	mul	r24, r7
     258:	3a b6       	in	r3, 0x3a	; 58
     25a:	3d cb       	rjmp	.-2438   	; 0xfffff8d6 <__eeprom_end+0xff7ef8d6>
     25c:	c9 bf       	out	0x39, r28	; 57
     25e:	5b be       	out	0x3b, r5	; 59
     260:	73 da       	rcall	.-2842   	; 0xfffff748 <__eeprom_end+0xff7ef748>
     262:	0f c9       	rjmp	.-3554   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     264:	3f 07       	cpc	r19, r31
     266:	63 42       	sbci	r22, 0x23	; 35
     268:	36 b7       	in	r19, 0x36	; 54
     26a:	9b d8       	rcall	.-3786   	; 0xfffff3a2 <__eeprom_end+0xff7ef3a2>
     26c:	a7 1a       	sub	r10, r23
     26e:	39 68       	ori	r19, 0x89	; 137
     270:	56 18       	sub	r5, r6
     272:	ae ba       	out	0x1e, r10	; 30
     274:	ab 55       	subi	r26, 0x5B	; 91
     276:	8c 1d       	adc	r24, r12
     278:	3c b7       	in	r19, 0x3c	; 60
     27a:	cc 57       	subi	r28, 0x7C	; 124
     27c:	63 bd       	out	0x23, r22	; 35
     27e:	6d ed       	ldi	r22, 0xDD	; 221
     280:	fd 75       	andi	r31, 0x5D	; 93
     282:	3e f6       	brtc	.-114    	; 0x212 <__SREG__+0x1d3>
     284:	17 72       	andi	r17, 0x27	; 39
     286:	31 bf       	out	0x31, r19	; 49
     288:	00 00       	nop
     28a:	00 80       	ld	r0, Z
     28c:	3f 08       	sbc	r3, r15
     28e:	00 00       	nop
     290:	00 be       	out	0x30, r0	; 48
     292:	92 24       	eor	r9, r2
     294:	49 12       	cpse	r4, r25
     296:	3e ab       	std	Y+54, r19	; 0x36
     298:	aa aa       	std	Y+50, r10	; 0x32
     29a:	2a be       	out	0x3a, r2	; 58
     29c:	cd cc       	rjmp	.-1638   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
     29e:	cc 4c       	sbci	r28, 0xCC	; 204
     2a0:	3e 00       	.word	0x003e	; ????
     2a2:	00 00       	nop
     2a4:	80 be       	out	0x30, r8	; 48
     2a6:	ab aa       	std	Y+51, r10	; 0x33
     2a8:	aa aa       	std	Y+50, r10	; 0x32
     2aa:	3e 00       	.word	0x003e	; ????
     2ac:	00 00       	nop
     2ae:	00 bf       	out	0x30, r16	; 48
     2b0:	00 00       	nop
     2b2:	00 80       	ld	r0, Z
     2b4:	3f 00       	.word	0x003f	; ????
     2b6:	00 00       	nop
     2b8:	00 00       	nop
     2ba:	08 41       	sbci	r16, 0x18	; 24
     2bc:	78 d3       	rcall	.+1776   	; 0x9ae <bno085_init+0x1a>
     2be:	bb 43       	sbci	r27, 0x3B	; 59
     2c0:	87 d1       	rcall	.+782    	; 0x5d0 <usart_set_baudrate+0x34>
     2c2:	13 3d       	cpi	r17, 0xD3	; 211
     2c4:	19 0e       	add	r1, r25
     2c6:	3c c3       	rjmp	.+1656   	; 0x940 <usart_init_rs232+0x17e>
     2c8:	bd 42       	sbci	r27, 0x2D	; 45
     2ca:	82 ad       	ldd	r24, Z+58	; 0x3a
     2cc:	2b 3e       	cpi	r18, 0xEB	; 235
     2ce:	68 ec       	ldi	r22, 0xC8	; 200
     2d0:	82 76       	andi	r24, 0x62	; 98
     2d2:	be d9       	rcall	.-3204   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     2d4:	8f e1       	ldi	r24, 0x1F	; 31
     2d6:	a9 3e       	cpi	r26, 0xE9	; 233
     2d8:	4c 80       	ldd	r4, Y+4	; 0x04
     2da:	ef ff       	.word	0xffef	; ????
     2dc:	be 01       	movw	r22, r28
     2de:	c4 ff       	sbrs	r28, 4
     2e0:	7f 3f       	cpi	r23, 0xFF	; 255
     2e2:	00 00       	nop
     2e4:	00 00       	nop
	...

000002e8 <__trampolines_end>:
     2e8:	63 64       	ori	r22, 0x43	; 67
     2ea:	69 6e       	ori	r22, 0xE9	; 233
     2ec:	6f 70       	andi	r22, 0x0F	; 15
     2ee:	73 75       	andi	r23, 0x53	; 83
     2f0:	78 58       	subi	r23, 0x88	; 136
     2f2:	5b 00       	.word	0x005b	; ????

000002f4 <__ctors_end>:
     2f4:	11 24       	eor	r1, r1
     2f6:	1f be       	out	0x3f, r1	; 63
     2f8:	cf ef       	ldi	r28, 0xFF	; 255
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	df e3       	ldi	r29, 0x3F	; 63
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	0c bf       	out	0x3c, r16	; 60
     304:	18 be       	out	0x38, r1	; 56
     306:	19 be       	out	0x39, r1	; 57
     308:	1a be       	out	0x3a, r1	; 58
     30a:	1b be       	out	0x3b, r1	; 59

0000030c <__do_copy_data>:
     30c:	10 e2       	ldi	r17, 0x20	; 32
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b0 e2       	ldi	r27, 0x20	; 32
     312:	e6 ec       	ldi	r30, 0xC6	; 198
     314:	fa e4       	ldi	r31, 0x4A	; 74
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0b bf       	out	0x3b, r16	; 59
     31a:	02 c0       	rjmp	.+4      	; 0x320 <__do_copy_data+0x14>
     31c:	07 90       	elpm	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	a0 3b       	cpi	r26, 0xB0	; 176
     322:	b1 07       	cpc	r27, r17
     324:	d9 f7       	brne	.-10     	; 0x31c <__do_copy_data+0x10>
     326:	1b be       	out	0x3b, r1	; 59

00000328 <__do_clear_bss>:
     328:	21 e2       	ldi	r18, 0x21	; 33
     32a:	a0 eb       	ldi	r26, 0xB0	; 176
     32c:	b0 e2       	ldi	r27, 0x20	; 32
     32e:	01 c0       	rjmp	.+2      	; 0x332 <.do_clear_bss_start>

00000330 <.do_clear_bss_loop>:
     330:	1d 92       	st	X+, r1

00000332 <.do_clear_bss_start>:
     332:	af 38       	cpi	r26, 0x8F	; 143
     334:	b2 07       	cpc	r27, r18
     336:	e1 f7       	brne	.-8      	; 0x330 <.do_clear_bss_loop>
     338:	0e 94 81 11 	call	0x2302	; 0x2302 <main>
     33c:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <_exit>

00000340 <__bad_interrupt>:
     340:	5f ce       	rjmp	.-834    	; 0x0 <__vectors>

00000342 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	1f 92       	push	r1
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     34c:	80 91 09 21 	lds	r24, 0x2109	; 0x802109 <stdio_base>
     350:	90 91 0a 21 	lds	r25, 0x210A	; 0x80210a <stdio_base+0x1>
     354:	e0 91 05 21 	lds	r30, 0x2105	; 0x802105 <ptr_get>
     358:	f0 91 06 21 	lds	r31, 0x2106	; 0x802106 <ptr_get+0x1>
     35c:	be 01       	movw	r22, r28
     35e:	6f 5f       	subi	r22, 0xFF	; 255
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	19 95       	eicall
	return c;
     364:	89 81       	ldd	r24, Y+1	; 0x01
}
     366:	08 2e       	mov	r0, r24
     368:	00 0c       	add	r0, r0
     36a:	99 0b       	sbc	r25, r25
     36c:	0f 90       	pop	r0
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     374:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     376:	80 91 09 21 	lds	r24, 0x2109	; 0x802109 <stdio_base>
     37a:	90 91 0a 21 	lds	r25, 0x210A	; 0x80210a <stdio_base+0x1>
     37e:	e0 91 07 21 	lds	r30, 0x2107	; 0x802107 <ptr_put>
     382:	f0 91 08 21 	lds	r31, 0x2108	; 0x802108 <ptr_put+0x1>
     386:	19 95       	eicall
     388:	99 23       	and	r25, r25
     38a:	1c f0       	brlt	.+6      	; 0x392 <_write+0x1e>
		return -1;
	}
	return 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     396:	08 95       	ret

00000398 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	08 b6       	in	r0, 0x38	; 56
     3a4:	0f 92       	push	r0
     3a6:	18 be       	out	0x38, r1	; 56
     3a8:	09 b6       	in	r0, 0x39	; 57
     3aa:	0f 92       	push	r0
     3ac:	19 be       	out	0x39, r1	; 57
     3ae:	0b b6       	in	r0, 0x3b	; 59
     3b0:	0f 92       	push	r0
     3b2:	1b be       	out	0x3b, r1	; 59
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
     3c6:	bf 93       	push	r27
     3c8:	ef 93       	push	r30
     3ca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     3cc:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     3d0:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     3d4:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <adca_callback>
     3d8:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <adca_callback+0x1>
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	19 95       	eicall
}
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0b be       	out	0x3b, r0	; 59
     400:	0f 90       	pop	r0
     402:	09 be       	out	0x39, r0	; 57
     404:	0f 90       	pop	r0
     406:	08 be       	out	0x38, r0	; 56
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	08 b6       	in	r0, 0x38	; 56
     41e:	0f 92       	push	r0
     420:	18 be       	out	0x38, r1	; 56
     422:	09 b6       	in	r0, 0x39	; 57
     424:	0f 92       	push	r0
     426:	19 be       	out	0x39, r1	; 57
     428:	0b b6       	in	r0, 0x3b	; 59
     42a:	0f 92       	push	r0
     42c:	1b be       	out	0x3b, r1	; 59
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     446:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     44a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     44e:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <adca_callback>
     452:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <adca_callback+0x1>
     456:	62 e0       	ldi	r22, 0x02	; 2
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	19 95       	eicall
}
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	7f 91       	pop	r23
     46c:	6f 91       	pop	r22
     46e:	5f 91       	pop	r21
     470:	4f 91       	pop	r20
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0b be       	out	0x3b, r0	; 59
     47a:	0f 90       	pop	r0
     47c:	09 be       	out	0x39, r0	; 57
     47e:	0f 90       	pop	r0
     480:	08 be       	out	0x38, r0	; 56
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	08 b6       	in	r0, 0x38	; 56
     498:	0f 92       	push	r0
     49a:	18 be       	out	0x38, r1	; 56
     49c:	09 b6       	in	r0, 0x39	; 57
     49e:	0f 92       	push	r0
     4a0:	19 be       	out	0x39, r1	; 57
     4a2:	0b b6       	in	r0, 0x3b	; 59
     4a4:	0f 92       	push	r0
     4a6:	1b be       	out	0x3b, r1	; 59
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	5f 93       	push	r21
     4b0:	6f 93       	push	r22
     4b2:	7f 93       	push	r23
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
     4bc:	ef 93       	push	r30
     4be:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     4c0:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     4c4:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     4c8:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <adca_callback>
     4cc:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <adca_callback+0x1>
     4d0:	64 e0       	ldi	r22, 0x04	; 4
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	19 95       	eicall
}
     4d8:	ff 91       	pop	r31
     4da:	ef 91       	pop	r30
     4dc:	bf 91       	pop	r27
     4de:	af 91       	pop	r26
     4e0:	9f 91       	pop	r25
     4e2:	8f 91       	pop	r24
     4e4:	7f 91       	pop	r23
     4e6:	6f 91       	pop	r22
     4e8:	5f 91       	pop	r21
     4ea:	4f 91       	pop	r20
     4ec:	3f 91       	pop	r19
     4ee:	2f 91       	pop	r18
     4f0:	0f 90       	pop	r0
     4f2:	0b be       	out	0x3b, r0	; 59
     4f4:	0f 90       	pop	r0
     4f6:	09 be       	out	0x39, r0	; 57
     4f8:	0f 90       	pop	r0
     4fa:	08 be       	out	0x38, r0	; 56
     4fc:	0f 90       	pop	r0
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	0f 90       	pop	r0
     502:	1f 90       	pop	r1
     504:	18 95       	reti

00000506 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     506:	1f 92       	push	r1
     508:	0f 92       	push	r0
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	0f 92       	push	r0
     50e:	11 24       	eor	r1, r1
     510:	08 b6       	in	r0, 0x38	; 56
     512:	0f 92       	push	r0
     514:	18 be       	out	0x38, r1	; 56
     516:	09 b6       	in	r0, 0x39	; 57
     518:	0f 92       	push	r0
     51a:	19 be       	out	0x39, r1	; 57
     51c:	0b b6       	in	r0, 0x3b	; 59
     51e:	0f 92       	push	r0
     520:	1b be       	out	0x3b, r1	; 59
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     53a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     53e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     542:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <adca_callback>
     546:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <adca_callback+0x1>
     54a:	68 e0       	ldi	r22, 0x08	; 8
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	19 95       	eicall
}
     552:	ff 91       	pop	r31
     554:	ef 91       	pop	r30
     556:	bf 91       	pop	r27
     558:	af 91       	pop	r26
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	7f 91       	pop	r23
     560:	6f 91       	pop	r22
     562:	5f 91       	pop	r21
     564:	4f 91       	pop	r20
     566:	3f 91       	pop	r19
     568:	2f 91       	pop	r18
     56a:	0f 90       	pop	r0
     56c:	0b be       	out	0x3b, r0	; 59
     56e:	0f 90       	pop	r0
     570:	09 be       	out	0x39, r0	; 57
     572:	0f 90       	pop	r0
     574:	08 be       	out	0x38, r0	; 56
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     580:	fc 01       	movw	r30, r24
     582:	91 81       	ldd	r25, Z+1	; 0x01
     584:	95 ff       	sbrs	r25, 5
     586:	fd cf       	rjmp	.-6      	; 0x582 <usart_putchar+0x2>
     588:	60 83       	st	Z, r22
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	08 95       	ret

00000590 <usart_getchar>:
     590:	fc 01       	movw	r30, r24
     592:	91 81       	ldd	r25, Z+1	; 0x01
     594:	99 23       	and	r25, r25
     596:	ec f7       	brge	.-6      	; 0x592 <usart_getchar+0x2>
     598:	80 81       	ld	r24, Z
     59a:	08 95       	ret

0000059c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	8f 92       	push	r8
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	7c 01       	movw	r14, r24
     5b8:	4a 01       	movw	r8, r20
     5ba:	5b 01       	movw	r10, r22
     5bc:	28 01       	movw	r4, r16
     5be:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5c0:	fc 01       	movw	r30, r24
     5c2:	84 81       	ldd	r24, Z+4	; 0x04
     5c4:	82 ff       	sbrs	r24, 2
     5c6:	16 c0       	rjmp	.+44     	; 0x5f4 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     5c8:	d9 01       	movw	r26, r18
     5ca:	c8 01       	movw	r24, r16
     5cc:	68 94       	set
     5ce:	12 f8       	bld	r1, 2
     5d0:	b6 95       	lsr	r27
     5d2:	a7 95       	ror	r26
     5d4:	97 95       	ror	r25
     5d6:	87 95       	ror	r24
     5d8:	16 94       	lsr	r1
     5da:	d1 f7       	brne	.-12     	; 0x5d0 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     5dc:	b9 01       	movw	r22, r18
     5de:	a8 01       	movw	r20, r16
     5e0:	03 2e       	mov	r0, r19
     5e2:	36 e1       	ldi	r19, 0x16	; 22
     5e4:	76 95       	lsr	r23
     5e6:	67 95       	ror	r22
     5e8:	57 95       	ror	r21
     5ea:	47 95       	ror	r20
     5ec:	3a 95       	dec	r19
     5ee:	d1 f7       	brne	.-12     	; 0x5e4 <usart_set_baudrate+0x48>
     5f0:	30 2d       	mov	r19, r0
     5f2:	15 c0       	rjmp	.+42     	; 0x61e <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     5f4:	d9 01       	movw	r26, r18
     5f6:	c8 01       	movw	r24, r16
     5f8:	68 94       	set
     5fa:	13 f8       	bld	r1, 3
     5fc:	b6 95       	lsr	r27
     5fe:	a7 95       	ror	r26
     600:	97 95       	ror	r25
     602:	87 95       	ror	r24
     604:	16 94       	lsr	r1
     606:	d1 f7       	brne	.-12     	; 0x5fc <usart_set_baudrate+0x60>
		min_rate /= 2;
     608:	b9 01       	movw	r22, r18
     60a:	a8 01       	movw	r20, r16
     60c:	03 2e       	mov	r0, r19
     60e:	37 e1       	ldi	r19, 0x17	; 23
     610:	76 95       	lsr	r23
     612:	67 95       	ror	r22
     614:	57 95       	ror	r21
     616:	47 95       	ror	r20
     618:	3a 95       	dec	r19
     61a:	d1 f7       	brne	.-12     	; 0x610 <usart_set_baudrate+0x74>
     61c:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     61e:	88 15       	cp	r24, r8
     620:	99 05       	cpc	r25, r9
     622:	aa 05       	cpc	r26, r10
     624:	bb 05       	cpc	r27, r11
     626:	08 f4       	brcc	.+2      	; 0x62a <usart_set_baudrate+0x8e>
     628:	a6 c0       	rjmp	.+332    	; 0x776 <usart_set_baudrate+0x1da>
     62a:	84 16       	cp	r8, r20
     62c:	95 06       	cpc	r9, r21
     62e:	a6 06       	cpc	r10, r22
     630:	b7 06       	cpc	r11, r23
     632:	08 f4       	brcc	.+2      	; 0x636 <usart_set_baudrate+0x9a>
     634:	a2 c0       	rjmp	.+324    	; 0x77a <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     636:	f7 01       	movw	r30, r14
     638:	84 81       	ldd	r24, Z+4	; 0x04
     63a:	82 fd       	sbrc	r24, 2
     63c:	04 c0       	rjmp	.+8      	; 0x646 <usart_set_baudrate+0xaa>
		baud *= 2;
     63e:	88 0c       	add	r8, r8
     640:	99 1c       	adc	r9, r9
     642:	aa 1c       	adc	r10, r10
     644:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     646:	c3 01       	movw	r24, r6
     648:	b2 01       	movw	r22, r4
     64a:	a5 01       	movw	r20, r10
     64c:	94 01       	movw	r18, r8
     64e:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     652:	2f 3f       	cpi	r18, 0xFF	; 255
     654:	31 05       	cpc	r19, r1
     656:	41 05       	cpc	r20, r1
     658:	51 05       	cpc	r21, r1
     65a:	08 f4       	brcc	.+2      	; 0x65e <usart_set_baudrate+0xc2>
     65c:	90 c0       	rjmp	.+288    	; 0x77e <usart_set_baudrate+0x1e2>
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	a0 e0       	ldi	r26, 0x00	; 0
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	c9 ef       	ldi	r28, 0xF9	; 249
     668:	05 c0       	rjmp	.+10     	; 0x674 <usart_set_baudrate+0xd8>
     66a:	28 17       	cp	r18, r24
     66c:	39 07       	cpc	r19, r25
     66e:	4a 07       	cpc	r20, r26
     670:	5b 07       	cpc	r21, r27
     672:	58 f0       	brcs	.+22     	; 0x68a <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	aa 1f       	adc	r26, r26
     67a:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     67c:	cd 3f       	cpi	r28, 0xFD	; 253
     67e:	0c f4       	brge	.+2      	; 0x682 <usart_set_baudrate+0xe6>
			limit |= 1;
     680:	81 60       	ori	r24, 0x01	; 1
     682:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     684:	c7 30       	cpi	r28, 0x07	; 7
     686:	89 f7       	brne	.-30     	; 0x66a <usart_set_baudrate+0xce>
     688:	4f c0       	rjmp	.+158    	; 0x728 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     68a:	cc 23       	and	r28, r28
     68c:	0c f0       	brlt	.+2      	; 0x690 <usart_set_baudrate+0xf4>
     68e:	4c c0       	rjmp	.+152    	; 0x728 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     690:	d5 01       	movw	r26, r10
     692:	c4 01       	movw	r24, r8
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	aa 1f       	adc	r26, r26
     69a:	bb 1f       	adc	r27, r27
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	aa 1f       	adc	r26, r26
     6aa:	bb 1f       	adc	r27, r27
     6ac:	48 1a       	sub	r4, r24
     6ae:	59 0a       	sbc	r5, r25
     6b0:	6a 0a       	sbc	r6, r26
     6b2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     6b4:	ce 3f       	cpi	r28, 0xFE	; 254
     6b6:	f4 f4       	brge	.+60     	; 0x6f4 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     6b8:	8d ef       	ldi	r24, 0xFD	; 253
     6ba:	9f ef       	ldi	r25, 0xFF	; 255
     6bc:	8c 1b       	sub	r24, r28
     6be:	91 09       	sbc	r25, r1
     6c0:	c7 fd       	sbrc	r28, 7
     6c2:	93 95       	inc	r25
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <usart_set_baudrate+0x132>
     6c6:	44 0c       	add	r4, r4
     6c8:	55 1c       	adc	r5, r5
     6ca:	66 1c       	adc	r6, r6
     6cc:	77 1c       	adc	r7, r7
     6ce:	8a 95       	dec	r24
     6d0:	d2 f7       	brpl	.-12     	; 0x6c6 <usart_set_baudrate+0x12a>
     6d2:	d5 01       	movw	r26, r10
     6d4:	c4 01       	movw	r24, r8
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	bc 01       	movw	r22, r24
     6e0:	cd 01       	movw	r24, r26
     6e2:	64 0d       	add	r22, r4
     6e4:	75 1d       	adc	r23, r5
     6e6:	86 1d       	adc	r24, r6
     6e8:	97 1d       	adc	r25, r7
     6ea:	a5 01       	movw	r20, r10
     6ec:	94 01       	movw	r18, r8
     6ee:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
     6f2:	37 c0       	rjmp	.+110    	; 0x762 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	8c 0f       	add	r24, r28
     6f8:	a5 01       	movw	r20, r10
     6fa:	94 01       	movw	r18, r8
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <usart_set_baudrate+0x16a>
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	44 1f       	adc	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	8a 95       	dec	r24
     708:	d2 f7       	brpl	.-12     	; 0x6fe <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     70a:	da 01       	movw	r26, r20
     70c:	c9 01       	movw	r24, r18
     70e:	b6 95       	lsr	r27
     710:	a7 95       	ror	r26
     712:	97 95       	ror	r25
     714:	87 95       	ror	r24
     716:	bc 01       	movw	r22, r24
     718:	cd 01       	movw	r24, r26
     71a:	64 0d       	add	r22, r4
     71c:	75 1d       	adc	r23, r5
     71e:	86 1d       	adc	r24, r6
     720:	97 1d       	adc	r25, r7
     722:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
     726:	1d c0       	rjmp	.+58     	; 0x762 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	8c 0f       	add	r24, r28
     72c:	a5 01       	movw	r20, r10
     72e:	94 01       	movw	r18, r8
     730:	04 c0       	rjmp	.+8      	; 0x73a <usart_set_baudrate+0x19e>
     732:	22 0f       	add	r18, r18
     734:	33 1f       	adc	r19, r19
     736:	44 1f       	adc	r20, r20
     738:	55 1f       	adc	r21, r21
     73a:	8a 95       	dec	r24
     73c:	d2 f7       	brpl	.-12     	; 0x732 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     73e:	da 01       	movw	r26, r20
     740:	c9 01       	movw	r24, r18
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	bc 01       	movw	r22, r24
     74c:	cd 01       	movw	r24, r26
     74e:	64 0d       	add	r22, r4
     750:	75 1d       	adc	r23, r5
     752:	86 1d       	adc	r24, r6
     754:	97 1d       	adc	r25, r7
     756:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
     75a:	21 50       	subi	r18, 0x01	; 1
     75c:	31 09       	sbc	r19, r1
     75e:	41 09       	sbc	r20, r1
     760:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     762:	83 2f       	mov	r24, r19
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	c2 95       	swap	r28
     768:	c0 7f       	andi	r28, 0xF0	; 240
     76a:	c8 2b       	or	r28, r24
     76c:	f7 01       	movw	r30, r14
     76e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     770:	26 83       	std	Z+6, r18	; 0x06

	return true;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	18 c0       	rjmp	.+48     	; 0x7a6 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	16 c0       	rjmp	.+44     	; 0x7a6 <usart_set_baudrate+0x20a>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	14 c0       	rjmp	.+40     	; 0x7a6 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     77e:	d5 01       	movw	r26, r10
     780:	c4 01       	movw	r24, r8
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	aa 1f       	adc	r26, r26
     788:	bb 1f       	adc	r27, r27
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	aa 1f       	adc	r26, r26
     790:	bb 1f       	adc	r27, r27
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	aa 1f       	adc	r26, r26
     798:	bb 1f       	adc	r27, r27
     79a:	48 1a       	sub	r4, r24
     79c:	59 0a       	sbc	r5, r25
     79e:	6a 0a       	sbc	r6, r26
     7a0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7a2:	c9 ef       	ldi	r28, 0xF9	; 249
     7a4:	89 cf       	rjmp	.-238    	; 0x6b8 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	7f 90       	pop	r7
     7ba:	6f 90       	pop	r6
     7bc:	5f 90       	pop	r5
     7be:	4f 90       	pop	r4
     7c0:	08 95       	ret

000007c2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ec 01       	movw	r28, r24
     7cc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <usart_init_rs232+0x12>
     7d2:	be c0       	rjmp	.+380    	; 0x950 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     7d4:	80 3c       	cpi	r24, 0xC0	; 192
     7d6:	91 05       	cpc	r25, r1
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     7da:	60 e1       	ldi	r22, 0x10	; 16
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	f0 d3       	rcall	.+2016   	; 0xfc0 <sysclk_enable_module>
     7e0:	b7 c0       	rjmp	.+366    	; 0x950 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     7e2:	c1 15       	cp	r28, r1
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	d8 07       	cpc	r29, r24
     7e8:	21 f4       	brne	.+8      	; 0x7f2 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     7ea:	64 e0       	ldi	r22, 0x04	; 4
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	e8 d3       	rcall	.+2000   	; 0xfc0 <sysclk_enable_module>
     7f0:	af c0       	rjmp	.+350    	; 0x950 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     7f2:	c0 38       	cpi	r28, 0x80	; 128
     7f4:	e1 e0       	ldi	r30, 0x01	; 1
     7f6:	de 07       	cpc	r29, r30
     7f8:	21 f4       	brne	.+8      	; 0x802 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	e0 d3       	rcall	.+1984   	; 0xfc0 <sysclk_enable_module>
     800:	a7 c0       	rjmp	.+334    	; 0x950 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     802:	c1 15       	cp	r28, r1
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     808:	21 f4       	brne	.+8      	; 0x812 <usart_init_rs232+0x50>
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	d8 d3       	rcall	.+1968   	; 0xfc0 <sysclk_enable_module>
     810:	9f c0       	rjmp	.+318    	; 0x950 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     812:	c0 38       	cpi	r28, 0x80	; 128
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     818:	21 f4       	brne	.+8      	; 0x822 <usart_init_rs232+0x60>
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	d0 d3       	rcall	.+1952   	; 0xfc0 <sysclk_enable_module>
     820:	97 c0       	rjmp	.+302    	; 0x950 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     822:	c1 15       	cp	r28, r1
     824:	e2 e0       	ldi	r30, 0x02	; 2
     826:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     828:	21 f4       	brne	.+8      	; 0x832 <usart_init_rs232+0x70>
     82a:	62 e0       	ldi	r22, 0x02	; 2
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	c8 d3       	rcall	.+1936   	; 0xfc0 <sysclk_enable_module>
     830:	8f c0       	rjmp	.+286    	; 0x950 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     832:	c0 32       	cpi	r28, 0x20	; 32
     834:	f3 e0       	ldi	r31, 0x03	; 3
     836:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     838:	21 f4       	brne	.+8      	; 0x842 <usart_init_rs232+0x80>
     83a:	64 e0       	ldi	r22, 0x04	; 4
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	c0 d3       	rcall	.+1920   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     840:	87 c0       	rjmp	.+270    	; 0x950 <usart_init_rs232+0x18e>
     842:	c1 15       	cp	r28, r1
     844:	88 e0       	ldi	r24, 0x08	; 8
     846:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     848:	21 f4       	brne	.+8      	; 0x852 <usart_init_rs232+0x90>
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	b8 d3       	rcall	.+1904   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     850:	7f c0       	rjmp	.+254    	; 0x950 <usart_init_rs232+0x18e>
     852:	c1 15       	cp	r28, r1
     854:	e9 e0       	ldi	r30, 0x09	; 9
     856:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     858:	21 f4       	brne	.+8      	; 0x862 <usart_init_rs232+0xa0>
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	84 e0       	ldi	r24, 0x04	; 4
     85e:	b0 d3       	rcall	.+1888   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     860:	77 c0       	rjmp	.+238    	; 0x950 <usart_init_rs232+0x18e>
     862:	c1 15       	cp	r28, r1
     864:	fa e0       	ldi	r31, 0x0A	; 10
     866:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     868:	21 f4       	brne	.+8      	; 0x872 <usart_init_rs232+0xb0>
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	a8 d3       	rcall	.+1872   	; 0xfc0 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     870:	6f c0       	rjmp	.+222    	; 0x950 <usart_init_rs232+0x18e>
     872:	c0 34       	cpi	r28, 0x40	; 64
     874:	88 e0       	ldi	r24, 0x08	; 8
     876:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     878:	21 f4       	brne	.+8      	; 0x882 <usart_init_rs232+0xc0>
     87a:	62 e0       	ldi	r22, 0x02	; 2
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	a0 d3       	rcall	.+1856   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     880:	67 c0       	rjmp	.+206    	; 0x950 <usart_init_rs232+0x18e>
     882:	c0 34       	cpi	r28, 0x40	; 64
     884:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     886:	de 07       	cpc	r29, r30
     888:	21 f4       	brne	.+8      	; 0x892 <usart_init_rs232+0xd0>
     88a:	62 e0       	ldi	r22, 0x02	; 2
     88c:	84 e0       	ldi	r24, 0x04	; 4
     88e:	98 d3       	rcall	.+1840   	; 0xfc0 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     890:	5f c0       	rjmp	.+190    	; 0x950 <usart_init_rs232+0x18e>
     892:	c0 39       	cpi	r28, 0x90	; 144
     894:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     896:	df 07       	cpc	r29, r31
     898:	21 f4       	brne	.+8      	; 0x8a2 <usart_init_rs232+0xe0>
     89a:	64 e0       	ldi	r22, 0x04	; 4
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	90 d3       	rcall	.+1824   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     8a0:	57 c0       	rjmp	.+174    	; 0x950 <usart_init_rs232+0x18e>
     8a2:	c0 39       	cpi	r28, 0x90	; 144
     8a4:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     8a6:	d8 07       	cpc	r29, r24
     8a8:	21 f4       	brne	.+8      	; 0x8b2 <usart_init_rs232+0xf0>
     8aa:	64 e0       	ldi	r22, 0x04	; 4
     8ac:	84 e0       	ldi	r24, 0x04	; 4
     8ae:	88 d3       	rcall	.+1808   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     8b0:	4f c0       	rjmp	.+158    	; 0x950 <usart_init_rs232+0x18e>
     8b2:	c0 39       	cpi	r28, 0x90	; 144
     8b4:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     8b6:	de 07       	cpc	r29, r30
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <usart_init_rs232+0x100>
     8ba:	64 e0       	ldi	r22, 0x04	; 4
     8bc:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     8be:	80 d3       	rcall	.+1792   	; 0xfc0 <sysclk_enable_module>
     8c0:	47 c0       	rjmp	.+142    	; 0x950 <usart_init_rs232+0x18e>
     8c2:	c0 3c       	cpi	r28, 0xC0	; 192
     8c4:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     8c6:	df 07       	cpc	r29, r31
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <usart_init_rs232+0x110>
     8ca:	68 e0       	ldi	r22, 0x08	; 8
     8cc:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     8ce:	78 d3       	rcall	.+1776   	; 0xfc0 <sysclk_enable_module>
     8d0:	3f c0       	rjmp	.+126    	; 0x950 <usart_init_rs232+0x18e>
     8d2:	c0 3c       	cpi	r28, 0xC0	; 192
     8d4:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     8d6:	d8 07       	cpc	r29, r24
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <usart_init_rs232+0x120>
     8da:	68 e0       	ldi	r22, 0x08	; 8
     8dc:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     8de:	70 d3       	rcall	.+1760   	; 0xfc0 <sysclk_enable_module>
     8e0:	37 c0       	rjmp	.+110    	; 0x950 <usart_init_rs232+0x18e>
     8e2:	c0 3a       	cpi	r28, 0xA0	; 160
     8e4:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     8e6:	de 07       	cpc	r29, r30
     8e8:	21 f4       	brne	.+8      	; 0x8f2 <usart_init_rs232+0x130>
     8ea:	60 e1       	ldi	r22, 0x10	; 16
     8ec:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     8ee:	68 d3       	rcall	.+1744   	; 0xfc0 <sysclk_enable_module>
     8f0:	2f c0       	rjmp	.+94     	; 0x950 <usart_init_rs232+0x18e>
     8f2:	c0 3a       	cpi	r28, 0xA0	; 160
     8f4:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     8f6:	df 07       	cpc	r29, r31
     8f8:	21 f4       	brne	.+8      	; 0x902 <usart_init_rs232+0x140>
     8fa:	60 e1       	ldi	r22, 0x10	; 16
     8fc:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     8fe:	60 d3       	rcall	.+1728   	; 0xfc0 <sysclk_enable_module>
     900:	27 c0       	rjmp	.+78     	; 0x950 <usart_init_rs232+0x18e>
     902:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     904:	8a e0       	ldi	r24, 0x0A	; 10
     906:	d8 07       	cpc	r29, r24
     908:	21 f4       	brne	.+8      	; 0x912 <usart_init_rs232+0x150>
     90a:	60 e1       	ldi	r22, 0x10	; 16
     90c:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     90e:	58 d3       	rcall	.+1712   	; 0xfc0 <sysclk_enable_module>
     910:	1f c0       	rjmp	.+62     	; 0x950 <usart_init_rs232+0x18e>
     912:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     914:	e8 e0       	ldi	r30, 0x08	; 8
     916:	de 07       	cpc	r29, r30
     918:	21 f4       	brne	.+8      	; 0x922 <usart_init_rs232+0x160>
     91a:	60 e2       	ldi	r22, 0x20	; 32
     91c:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     91e:	50 d3       	rcall	.+1696   	; 0xfc0 <sysclk_enable_module>
     920:	17 c0       	rjmp	.+46     	; 0x950 <usart_init_rs232+0x18e>
     922:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     924:	f9 e0       	ldi	r31, 0x09	; 9
     926:	df 07       	cpc	r29, r31
     928:	21 f4       	brne	.+8      	; 0x932 <usart_init_rs232+0x170>
     92a:	60 e2       	ldi	r22, 0x20	; 32
     92c:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     92e:	48 d3       	rcall	.+1680   	; 0xfc0 <sysclk_enable_module>
     930:	0f c0       	rjmp	.+30     	; 0x950 <usart_init_rs232+0x18e>
     932:	c0 38       	cpi	r28, 0x80	; 128
     934:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     936:	d8 07       	cpc	r29, r24
     938:	21 f4       	brne	.+8      	; 0x942 <usart_init_rs232+0x180>
     93a:	60 e4       	ldi	r22, 0x40	; 64
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	40 d3       	rcall	.+1664   	; 0xfc0 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     940:	07 c0       	rjmp	.+14     	; 0x950 <usart_init_rs232+0x18e>
     942:	c0 3a       	cpi	r28, 0xA0	; 160
     944:	e4 e0       	ldi	r30, 0x04	; 4
     946:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     948:	19 f4       	brne	.+6      	; 0x950 <usart_init_rs232+0x18e>
     94a:	60 e4       	ldi	r22, 0x40	; 64
     94c:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     94e:	38 d3       	rcall	.+1648   	; 0xfc0 <sysclk_enable_module>
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     954:	8d 83       	std	Y+5, r24	; 0x05
     956:	f8 01       	movw	r30, r16
     958:	95 81       	ldd	r25, Z+5	; 0x05
     95a:	84 81       	ldd	r24, Z+4	; 0x04
     95c:	89 2b       	or	r24, r25
     95e:	96 81       	ldd	r25, Z+6	; 0x06
     960:	91 11       	cpse	r25, r1
     962:	98 e0       	ldi	r25, 0x08	; 8
     964:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     966:	8d 83       	std	Y+5, r24	; 0x05
     968:	f8 01       	movw	r30, r16
     96a:	40 81       	ld	r20, Z
     96c:	51 81       	ldd	r21, Z+1	; 0x01
     96e:	62 81       	ldd	r22, Z+2	; 0x02
     970:	73 81       	ldd	r23, Z+3	; 0x03
     972:	00 e0       	ldi	r16, 0x00	; 0
     974:	18 e4       	ldi	r17, 0x48	; 72
     976:	28 ee       	ldi	r18, 0xE8	; 232
     978:	31 e0       	ldi	r19, 0x01	; 1
     97a:	ce 01       	movw	r24, r28
     97c:	0f de       	rcall	.-994    	; 0x59c <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	98 60       	ori	r25, 0x08	; 8
     982:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	90 61       	ori	r25, 0x10	; 16
     988:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <bno085_init>:
#include "spi_controller.h"
#include "BNO085.h"

uint8_t SeqNum = 0;

void bno085_init(void){
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	64 97       	sbiw	r28, 0x14	; 20
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	de bf       	out	0x3e, r29	; 62
	BNO085_SS_TERMINAL.OUT |= BNO085_SS_PIN;
     9aa:	e0 e4       	ldi	r30, 0x40	; 64
     9ac:	f6 e0       	ldi	r31, 0x06	; 6
     9ae:	84 81       	ldd	r24, Z+4	; 0x04
     9b0:	88 60       	ori	r24, 0x08	; 8
     9b2:	84 83       	std	Z+4, r24	; 0x04
		
	uint16_t length	= 0x0014;	// 20
	uint8_t data[] = {
     9b4:	84 e1       	ldi	r24, 0x14	; 20
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	1a 82       	std	Y+2, r1	; 0x02
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	8b 83       	std	Y+3, r24	; 0x03
     9be:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <__data_end>
     9c2:	8c 83       	std	Y+4, r24	; 0x04
     9c4:	85 e0       	ldi	r24, 0x05	; 5
     9c6:	8d 83       	std	Y+5, r24	; 0x05
     9c8:	8b e0       	ldi	r24, 0x0B	; 11
     9ca:	8e 83       	std	Y+6, r24	; 0x06
     9cc:	1f 82       	std	Y+7, r1	; 0x07
     9ce:	18 86       	std	Y+8, r1	; 0x08
     9d0:	80 e5       	ldi	r24, 0x50	; 80
     9d2:	89 87       	std	Y+9, r24	; 0x09
     9d4:	83 ec       	ldi	r24, 0xC3	; 195
     9d6:	8a 87       	std	Y+10, r24	; 0x0a
     9d8:	1b 86       	std	Y+11, r1	; 0x0b
     9da:	1c 86       	std	Y+12, r1	; 0x0c
     9dc:	80 ea       	ldi	r24, 0xA0	; 160
     9de:	8d 87       	std	Y+13, r24	; 0x0d
     9e0:	86 e8       	ldi	r24, 0x86	; 134
     9e2:	8e 87       	std	Y+14, r24	; 0x0e
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	8f 87       	std	Y+15, r24	; 0x0f
     9e8:	18 8a       	std	Y+16, r1	; 0x10
     9ea:	19 8a       	std	Y+17, r1	; 0x11
     9ec:	1a 8a       	std	Y+18, r1	; 0x12
     9ee:	1b 8a       	std	Y+19, r1	; 0x13
     9f0:	1c 8a       	std	Y+20, r1	; 0x14
		(ROT_VECT_SENS_SPEC >> 8) & 0xFF,
		(ROT_VECT_SENS_SPEC >> 16) & 0xFF,
		ROT_VECT_SENS_SPEC >> 24,
	};
	
	spi_select(BNO085_SS_PIN);
     9f2:	88 e0       	ldi	r24, 0x08	; 8
     9f4:	41 d1       	rcall	.+642    	; 0xc78 <spi_select>
     9f6:	8e 01       	movw	r16, r28
     9f8:	0f 5f       	subi	r16, 0xFF	; 255
     9fa:	1f 4f       	sbci	r17, 0xFF	; 255
     9fc:	7e 01       	movw	r14, r28
     9fe:	85 e1       	ldi	r24, 0x15	; 21
     a00:	e8 0e       	add	r14, r24
     a02:	f1 1c       	adc	r15, r1
	for(uint8_t i = 0; i < length; i++){
		spi_write(data[i]);
     a04:	f8 01       	movw	r30, r16
     a06:	81 91       	ld	r24, Z+
     a08:	8f 01       	movw	r16, r30
     a0a:	47 d1       	rcall	.+654    	; 0xc9a <spi_write>
		(ROT_VECT_SENS_SPEC >> 16) & 0xFF,
		ROT_VECT_SENS_SPEC >> 24,
	};
	
	spi_select(BNO085_SS_PIN);
	for(uint8_t i = 0; i < length; i++){
     a0c:	0e 15       	cp	r16, r14
     a0e:	1f 05       	cpc	r17, r15
		spi_write(data[i]);
	}
	spi_select(BNO085_SS_PIN);
     a10:	c9 f7       	brne	.-14     	; 0xa04 <bno085_init+0x70>
     a12:	88 e0       	ldi	r24, 0x08	; 8
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     a14:	31 d1       	rcall	.+610    	; 0xc78 <spi_select>
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	d2 d2       	rcall	.+1444   	; 0xfc0 <sysclk_enable_module>
	
	
	sysclk_enable_peripheral_clock(&TCC0); // starts peripheral clock

	TCC0.CTRLA = 0x05; // divisor set to 64
     a1c:	e0 e0       	ldi	r30, 0x00	; 0
     a1e:	f8 e0       	ldi	r31, 0x08	; 8
     a20:	85 e0       	ldi	r24, 0x05	; 5
     a22:	80 83       	st	Z, r24
	TCC0.PER = 25000; // 20 Hz
     a24:	88 ea       	ldi	r24, 0xA8	; 168
     a26:	91 e6       	ldi	r25, 0x61	; 97
     a28:	86 a3       	std	Z+38, r24	; 0x26
     a2a:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	86 83       	std	Z+6, r24	; 0x06
}
     a30:	64 96       	adiw	r28, 0x14	; 20
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	08 95       	ret

00000a44 <bno085_read>:

void bno085_read(uint8_t* data){
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	8c 01       	movw	r16, r24
	spi_select(BNO085_SS_PIN);
     a4e:	88 e0       	ldi	r24, 0x08	; 8
     a50:	13 d1       	rcall	.+550    	; 0xc78 <spi_select>
     a52:	e8 01       	movw	r28, r16
     a54:	0e 5e       	subi	r16, 0xEE	; 238
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t i = 0; i < 18; i++){
		data[i] = spi_read();
     a58:	15 d1       	rcall	.+554    	; 0xc84 <spi_read>
     a5a:	89 93       	st	Y+, r24
     a5c:	c0 17       	cp	r28, r16
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void bno085_read(uint8_t* data){
	spi_select(BNO085_SS_PIN);
	for(uint8_t i = 0; i < 18; i++){
     a5e:	d1 07       	cpc	r29, r17
     a60:	d9 f7       	brne	.-10     	; 0xa58 <bno085_read+0x14>
		data[i] = spi_read();
	}
	spi_select(BNO085_SS_PIN);
     a62:	88 e0       	ldi	r24, 0x08	; 8
     a64:	09 d1       	rcall	.+530    	; 0xc78 <spi_select>
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     a70:	08 95       	ret

00000a72 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= 0x08; // Sets A3 to output
     a72:	e0 e0       	ldi	r30, 0x00	; 0
     a74:	f6 e0       	ldi	r31, 0x06	; 6
     a76:	80 81       	ld	r24, Z
     a78:	88 60       	ori	r24, 0x08	; 8
     a7a:	80 83       	st	Z, r24
     a7c:	08 95       	ret

00000a7e <cam_switch>:
}

void cam_switch(void){
	PORTA.OUT ^= 0x08; // Changes A3 from high to low or vice-versa
     a7e:	e0 e0       	ldi	r30, 0x00	; 0
     a80:	f6 e0       	ldi	r31, 0x06	; 6
     a82:	94 81       	ldd	r25, Z+4	; 0x04
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	89 27       	eor	r24, r25
     a88:	84 83       	std	Z+4, r24	; 0x04
     a8a:	08 95       	ret

00000a8c <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	92 d2       	rcall	.+1316   	; 0xfc0 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
     a9c:	c0 e0       	ldi	r28, 0x00	; 0
     a9e:	d2 e0       	ldi	r29, 0x02	; 2
     aa0:	ff 24       	eor	r15, r15
     aa2:	f3 94       	inc	r15
     aa4:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
     aa6:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
     aa8:	80 e1       	ldi	r24, 0x10	; 16
     aaa:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
     aac:	85 e0       	ldi	r24, 0x05	; 5
     aae:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     ab0:	61 e2       	ldi	r22, 0x21	; 33
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	9a d2       	rcall	.+1332   	; 0xfec <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     ab8:	08 2f       	mov	r16, r24
     aba:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     abc:	10 2f       	mov	r17, r16
     abe:	00 27       	eor	r16, r16
     ac0:	60 e2       	ldi	r22, 0x20	; 32
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	92 d2       	rcall	.+1316   	; 0xfec <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     ac8:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
     aca:	0c 87       	std	Y+12, r16	; 0x0c
     acc:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
     ace:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 0	
     ad0:	80 e3       	ldi	r24, 0x30	; 48
     ad2:	89 a3       	std	Y+33, r24	; 0x21
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	08 95       	ret

00000ae0 <thermistor_read>:

uint16_t thermistor_read(void)
{
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL |= 0x80; // start the conversion
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f2 e0       	ldi	r31, 0x02	; 2
     ae4:	80 a1       	ldd	r24, Z+32	; 0x20
     ae6:	80 68       	ori	r24, 0x80	; 128
     ae8:	80 a3       	std	Z+32, r24	; 0x20
	while(!(THERMISTOR_SERIAL.THERMISTOR_CHANNEL.INTFLAGS)); // wait until the conversion is done
     aea:	83 a1       	ldd	r24, Z+35	; 0x23
     aec:	88 23       	and	r24, r24
     aee:	e9 f3       	breq	.-6      	; 0xaea <thermistor_read+0xa>
	return THERMISTOR_SERIAL.THERMISTOR_CHANNEL.RES; // return the 12-bit result as a uint16_t
     af0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     af4:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     af8:	08 95       	ret

00000afa <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	27 97       	sbiw	r28, 0x07	; 7
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b08:	60 e2       	ldi	r22, 0x20	; 32
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	59 d2       	rcall	.+1202   	; 0xfc0 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     b0e:	e0 e6       	ldi	r30, 0x60	; 96
     b10:	f6 e0       	ldi	r31, 0x06	; 6
     b12:	80 81       	ld	r24, Z
     b14:	80 68       	ori	r24, 0x80	; 128
     b16:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     b18:	e6 e0       	ldi	r30, 0x06	; 6
     b1a:	f0 e2       	ldi	r31, 0x20	; 32
     b1c:	84 81       	ldd	r24, Z+4	; 0x04
     b1e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     b20:	85 81       	ldd	r24, Z+5	; 0x05
     b22:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     b24:	86 81       	ldd	r24, Z+6	; 0x06
     b26:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     b28:	80 81       	ld	r24, Z
     b2a:	91 81       	ldd	r25, Z+1	; 0x01
     b2c:	a2 81       	ldd	r26, Z+2	; 0x02
     b2e:	b3 81       	ldd	r27, Z+3	; 0x03
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	9a 83       	std	Y+2, r25	; 0x02
     b34:	ab 83       	std	Y+3, r26	; 0x03
     b36:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     b38:	60 e2       	ldi	r22, 0x20	; 32
     b3a:	84 e0       	ldi	r24, 0x04	; 4
     b3c:	41 d2       	rcall	.+1154   	; 0xfc0 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     b3e:	be 01       	movw	r22, r28
     b40:	6f 5f       	subi	r22, 0xFF	; 255
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	80 eb       	ldi	r24, 0xB0	; 176
     b46:	99 e0       	ldi	r25, 0x09	; 9
     b48:	3c de       	rcall	.-904    	; 0x7c2 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     b4a:	27 96       	adiw	r28, 0x07	; 7
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	de bf       	out	0x3e, r29	; 62
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     b58:	61 50       	subi	r22, 0x01	; 1
     b5a:	71 09       	sbc	r23, r1
     b5c:	81 09       	sbc	r24, r1
     b5e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     b60:	61 15       	cp	r22, r1
     b62:	71 05       	cpc	r23, r1
     b64:	81 05       	cpc	r24, r1
     b66:	91 05       	cpc	r25, r1
     b68:	b9 f7       	brne	.-18     	; 0xb58 <__portable_avr_delay_cycles+0x2>
     b6a:	08 95       	ret

00000b6c <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     b6c:	e0 e4       	ldi	r30, 0x40	; 64
     b6e:	f6 e0       	ldi	r31, 0x06	; 6
     b70:	94 81       	ldd	r25, Z+4	; 0x04
     b72:	80 e1       	ldi	r24, 0x10	; 16
     b74:	89 27       	eor	r24, r25
     b76:	84 83       	std	Z+4, r24	; 0x04
     b78:	08 95       	ret

00000b7a <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     b7a:	e0 e4       	ldi	r30, 0x40	; 64
     b7c:	f6 e0       	ldi	r31, 0x06	; 6
     b7e:	84 81       	ldd	r24, Z+4	; 0x04
     b80:	80 61       	ori	r24, 0x10	; 16
     b82:	84 83       	std	Z+4, r24	; 0x04
	delay_ms(5);
     b84:	6b e2       	ldi	r22, 0x2B	; 43
     b86:	78 e6       	ldi	r23, 0x68	; 104
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	e4 df       	rcall	.-56     	; 0xb56 <__portable_avr_delay_cycles>
	
	// Resets the ms5607
	flip_ms5607();
     b8e:	ee df       	rcall	.-36     	; 0xb6c <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     b90:	8e e1       	ldi	r24, 0x1E	; 30
     b92:	83 d0       	rcall	.+262    	; 0xc9a <spi_write>
     b94:	60 e8       	ldi	r22, 0x80	; 128
	delay_ms(3);
     b96:	7e e3       	ldi	r23, 0x3E	; 62
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	dc df       	rcall	.-72     	; 0xb56 <__portable_avr_delay_cycles>
	flip_ms5607();
     b9e:	e6 df       	rcall	.-52     	; 0xb6c <flip_ms5607>
	delay_ms(2);
     ba0:	6b ea       	ldi	r22, 0xAB	; 171
     ba2:	79 e2       	ldi	r23, 0x29	; 41
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	d6 cf       	rjmp	.-84     	; 0xb56 <__portable_avr_delay_cycles>
     baa:	08 95       	ret

00000bac <ms5607_read>:
     bac:	cf 93       	push	r28
}

uint16_t ms5607_read(uint16_t comm)
{
     bae:	df 93       	push	r29
     bb0:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     bb2:	dc df       	rcall	.-72     	; 0xb6c <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     bb4:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     bb6:	71 d0       	rcall	.+226    	; 0xc9a <spi_write>
     bb8:	65 d0       	rcall	.+202    	; 0xc84 <spi_read>
     bba:	c8 2f       	mov	r28, r24
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
     bbe:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     bc0:	cc 27       	eor	r28, r28
     bc2:	60 d0       	rcall	.+192    	; 0xc84 <spi_read>
     bc4:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     bc6:	d2 df       	rcall	.-92     	; 0xb6c <flip_ms5607>
     bc8:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <ms5607_convert_d1>:
     bd0:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     bd8:	c9 df       	rcall	.-110    	; 0xb6c <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     bda:	88 e4       	ldi	r24, 0x48	; 72
     bdc:	5e d0       	rcall	.+188    	; 0xc9a <spi_write>
	delay_ms(10);
     bde:	66 e5       	ldi	r22, 0x56	; 86
     be0:	70 ed       	ldi	r23, 0xD0	; 208
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     be6:	b7 df       	rcall	.-146    	; 0xb56 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     be8:	c1 df       	rcall	.-126    	; 0xb6c <flip_ms5607>
     bea:	c0 df       	rcall	.-128    	; 0xb6c <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	55 d0       	rcall	.+170    	; 0xc9a <spi_write>
     bf0:	49 d0       	rcall	.+146    	; 0xc84 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     bf2:	c8 2e       	mov	r12, r24
     bf4:	d1 2c       	mov	r13, r1
     bf6:	e1 2c       	mov	r14, r1
     bf8:	f1 2c       	mov	r15, r1
     bfa:	76 01       	movw	r14, r12
     bfc:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     bfe:	cc 24       	eor	r12, r12
     c00:	41 d0       	rcall	.+130    	; 0xc84 <spi_read>
     c02:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     c04:	3f d0       	rcall	.+126    	; 0xc84 <spi_read>
     c06:	c8 2a       	or	r12, r24
     c08:	b1 df       	rcall	.-158    	; 0xb6c <flip_ms5607>
	flip_ms5607();
     c0a:	c7 01       	movw	r24, r14
     c0c:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     c0e:	ff 90       	pop	r15
     c10:	ef 90       	pop	r14
     c12:	df 90       	pop	r13
     c14:	cf 90       	pop	r12
     c16:	08 95       	ret

00000c18 <ms5607_convert_d2>:
     c18:	cf 92       	push	r12
     c1a:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     c20:	a5 df       	rcall	.-182    	; 0xb6c <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     c22:	88 e5       	ldi	r24, 0x58	; 88
     c24:	3a d0       	rcall	.+116    	; 0xc9a <spi_write>
	delay_ms(10);
     c26:	66 e5       	ldi	r22, 0x56	; 86
     c28:	70 ed       	ldi	r23, 0xD0	; 208
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     c2e:	93 df       	rcall	.-218    	; 0xb56 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     c30:	9d df       	rcall	.-198    	; 0xb6c <flip_ms5607>
     c32:	9c df       	rcall	.-200    	; 0xb6c <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	31 d0       	rcall	.+98     	; 0xc9a <spi_write>
     c38:	25 d0       	rcall	.+74     	; 0xc84 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     c3a:	c8 2e       	mov	r12, r24
     c3c:	d1 2c       	mov	r13, r1
     c3e:	e1 2c       	mov	r14, r1
     c40:	f1 2c       	mov	r15, r1
     c42:	76 01       	movw	r14, r12
     c44:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     c46:	cc 24       	eor	r12, r12
     c48:	1d d0       	rcall	.+58     	; 0xc84 <spi_read>
     c4a:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     c4c:	1b d0       	rcall	.+54     	; 0xc84 <spi_read>
     c4e:	c8 2a       	or	r12, r24
     c50:	8d df       	rcall	.-230    	; 0xb6c <flip_ms5607>
	flip_ms5607();
     c52:	c7 01       	movw	r24, r14
     c54:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	08 95       	ret

00000c60 <spi_init>:
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c60:	68 e0       	ldi	r22, 0x08	; 8
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	ad d1       	rcall	.+858    	; 0xfc0 <sysclk_enable_module>
#include "spi_controller.h"

void spi_init(void)
{
	sysclk_enable_peripheral_clock(&SPIC);
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
     c66:	8c e5       	ldi	r24, 0x5C	; 92
     c68:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	PORTC.DIR |= 0b10110000; 
     c6c:	e0 e4       	ldi	r30, 0x40	; 64
     c6e:	f6 e0       	ldi	r31, 0x06	; 6
     c70:	80 81       	ld	r24, Z
     c72:	80 6b       	ori	r24, 0xB0	; 176
     c74:	80 83       	st	Z, r24
     c76:	08 95       	ret

00000c78 <spi_select>:
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     c78:	e0 e4       	ldi	r30, 0x40	; 64
     c7a:	f6 e0       	ldi	r31, 0x06	; 6
     c7c:	94 81       	ldd	r25, Z+4	; 0x04
     c7e:	89 27       	eor	r24, r25
     c80:	84 83       	std	Z+4, r24	; 0x04
     c82:	08 95       	ret

00000c84 <spi_read>:

uint8_t spi_read(void)
{
	uint8_t count = 0;
	uint8_t counter = 100;
	SPIC.DATA = 0xFF; // make the DATA register something we know
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7) & (count < counter)){
     c8a:	e0 ec       	ldi	r30, 0xC0	; 192
     c8c:	f8 e0       	ldi	r31, 0x08	; 8
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	88 23       	and	r24, r24
     c92:	ec f7       	brge	.-6      	; 0xc8e <spi_read+0xa>
		//count++;
	}
	
	return SPIC.DATA; // return the data from this function
     c94:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     c98:	08 95       	ret

00000c9a <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     c9a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     c9e:	e0 ec       	ldi	r30, 0xC0	; 192
     ca0:	f8 e0       	ldi	r31, 0x08	; 8
     ca2:	82 81       	ldd	r24, Z+2	; 0x02
     ca4:	88 23       	and	r24, r24
     ca6:	ec f7       	brge	.-6      	; 0xca2 <spi_write+0x8>
     ca8:	08 95       	ret

00000caa <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     cb0:	6f dc       	rcall	.-1826   	; 0x590 <usart_getchar>
     cb2:	88 83       	st	Y, r24
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     cba:	62 cc       	rjmp	.-1852   	; 0x580 <usart_putchar>
}
     cbc:	08 95       	ret

00000cbe <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	27 97       	sbiw	r28, 0x07	; 7
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     ccc:	60 e1       	ldi	r22, 0x10	; 16
     cce:	85 e0       	ldi	r24, 0x05	; 5
     cd0:	77 d1       	rcall	.+750    	; 0xfc0 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     cd2:	e0 e8       	ldi	r30, 0x80	; 128
     cd4:	f6 e0       	ldi	r31, 0x06	; 6
     cd6:	80 81       	ld	r24, Z
     cd8:	88 60       	ori	r24, 0x08	; 8
     cda:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     cdc:	80 ea       	ldi	r24, 0xA0	; 160
     cde:	9a e0       	ldi	r25, 0x0A	; 10
     ce0:	80 93 09 21 	sts	0x2109, r24	; 0x802109 <stdio_base>
     ce4:	90 93 0a 21 	sts	0x210A, r25	; 0x80210a <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     ce8:	8d e5       	ldi	r24, 0x5D	; 93
     cea:	96 e0       	ldi	r25, 0x06	; 6
     cec:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <ptr_put>
     cf0:	90 93 08 21 	sts	0x2108, r25	; 0x802108 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     cf4:	85 e5       	ldi	r24, 0x55	; 85
     cf6:	96 e0       	ldi	r25, 0x06	; 6
     cf8:	80 93 05 21 	sts	0x2105, r24	; 0x802105 <ptr_get>
     cfc:	90 93 06 21 	sts	0x2106, r25	; 0x802106 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     d00:	ed e0       	ldi	r30, 0x0D	; 13
     d02:	f0 e2       	ldi	r31, 0x20	; 32
     d04:	84 81       	ldd	r24, Z+4	; 0x04
     d06:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     d08:	85 81       	ldd	r24, Z+5	; 0x05
     d0a:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     d0c:	86 81       	ldd	r24, Z+6	; 0x06
     d0e:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	a2 81       	ldd	r26, Z+2	; 0x02
     d16:	b3 81       	ldd	r27, Z+3	; 0x03
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	ab 83       	std	Y+3, r26	; 0x03
     d1e:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     d20:	60 e1       	ldi	r22, 0x10	; 16
     d22:	85 e0       	ldi	r24, 0x05	; 5
     d24:	4d d1       	rcall	.+666    	; 0xfc0 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     d26:	be 01       	movw	r22, r28
     d28:	6f 5f       	subi	r22, 0xFF	; 255
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	80 ea       	ldi	r24, 0xA0	; 160
     d2e:	9a e0       	ldi	r25, 0x0A	; 10
     d30:	48 dd       	rcall	.-1392   	; 0x7c2 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     d32:	61 ea       	ldi	r22, 0xA1	; 161
     d34:	71 e0       	ldi	r23, 0x01	; 1
     d36:	8a eb       	ldi	r24, 0xBA	; 186
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
     d3e:	27 96       	adiw	r28, 0x07	; 7
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	fc 01       	movw	r30, r24
     d50:	41 15       	cp	r20, r1
     d52:	51 05       	cpc	r21, r1
     d54:	b1 f1       	breq	.+108    	; 0xdc2 <rb16_write+0x78>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	db 01       	movw	r26, r22
     d62:	a8 0f       	add	r26, r24
     d64:	b9 1f       	adc	r27, r25
     d66:	8d 91       	ld	r24, X+
     d68:	9c 91       	ld	r25, X
     d6a:	a2 81       	ldd	r26, Z+2	; 0x02
     d6c:	b3 81       	ldd	r27, Z+3	; 0x03
     d6e:	aa 0f       	add	r26, r26
     d70:	bb 1f       	adc	r27, r27
     d72:	c6 81       	ldd	r28, Z+6	; 0x06
     d74:	d7 81       	ldd	r29, Z+7	; 0x07
     d76:	ac 0f       	add	r26, r28
     d78:	bd 1f       	adc	r27, r29
     d7a:	8d 93       	st	X+, r24
     d7c:	9c 93       	st	X, r25
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	82 83       	std	Z+2, r24	; 0x02
     d86:	93 83       	std	Z+3, r25	; 0x03
     d88:	a0 81       	ld	r26, Z
     d8a:	b1 81       	ldd	r27, Z+1	; 0x01
     d8c:	8a 17       	cp	r24, r26
     d8e:	9b 07       	cpc	r25, r27
     d90:	11 f4       	brne	.+4      	; 0xd96 <rb16_write+0x4c>
     d92:	12 82       	std	Z+2, r1	; 0x02
     d94:	13 82       	std	Z+3, r1	; 0x03
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	c4 81       	ldd	r28, Z+4	; 0x04
     d9c:	d5 81       	ldd	r29, Z+5	; 0x05
     d9e:	8c 17       	cp	r24, r28
     da0:	9d 07       	cpc	r25, r29
     da2:	49 f4       	brne	.+18     	; 0xdb6 <rb16_write+0x6c>
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	a8 17       	cp	r26, r24
     da8:	b9 07       	cpc	r27, r25
     daa:	19 f0       	breq	.+6      	; 0xdb2 <rb16_write+0x68>
     dac:	84 83       	std	Z+4, r24	; 0x04
     dae:	95 83       	std	Z+5, r25	; 0x05
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <rb16_write+0x6c>
     db2:	14 82       	std	Z+4, r1	; 0x04
     db4:	15 82       	std	Z+5, r1	; 0x05
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	82 2f       	mov	r24, r18
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	84 17       	cp	r24, r20
     dbe:	95 07       	cpc	r25, r21
     dc0:	68 f2       	brcs	.-102    	; 0xd5c <rb16_write+0x12>
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <rb16_init>:
     dc8:	fc 01       	movw	r30, r24
     dca:	12 82       	std	Z+2, r1	; 0x02
     dcc:	13 82       	std	Z+3, r1	; 0x03
     dce:	14 82       	std	Z+4, r1	; 0x04
     dd0:	15 82       	std	Z+5, r1	; 0x05
     dd2:	66 83       	std	Z+6, r22	; 0x06
     dd4:	77 83       	std	Z+7, r23	; 0x07
     dd6:	40 83       	st	Z, r20
     dd8:	51 83       	std	Z+1, r21	; 0x01
     dda:	08 95       	ret

00000ddc <rb16_get_nth>:
     ddc:	dc 01       	movw	r26, r24
     dde:	12 96       	adiw	r26, 0x02	; 2
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	13 97       	sbiw	r26, 0x03	; 3
     de6:	cb 01       	movw	r24, r22
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	e8 17       	cp	r30, r24
     dec:	f9 07       	cpc	r31, r25
     dee:	78 f0       	brcs	.+30     	; 0xe0e <rb16_get_nth+0x32>
     df0:	e1 50       	subi	r30, 0x01	; 1
     df2:	f0 48       	sbci	r31, 0x80	; 128
     df4:	e6 1b       	sub	r30, r22
     df6:	f7 0b       	sbc	r31, r23
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	16 96       	adiw	r26, 0x06	; 6
     dfe:	8d 91       	ld	r24, X+
     e00:	9c 91       	ld	r25, X
     e02:	17 97       	sbiw	r26, 0x07	; 7
     e04:	e8 0f       	add	r30, r24
     e06:	f9 1f       	adc	r31, r25
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	08 95       	ret
     e0e:	2d 91       	ld	r18, X+
     e10:	3c 91       	ld	r19, X
     e12:	11 97       	sbiw	r26, 0x01	; 1
     e14:	e2 0f       	add	r30, r18
     e16:	f3 1f       	adc	r31, r19
     e18:	e1 50       	subi	r30, 0x01	; 1
     e1a:	f0 48       	sbci	r31, 0x80	; 128
     e1c:	e6 1b       	sub	r30, r22
     e1e:	f7 0b       	sbc	r31, r23
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	16 96       	adiw	r26, 0x06	; 6
     e26:	8d 91       	ld	r24, X+
     e28:	9c 91       	ld	r25, X
     e2a:	17 97       	sbiw	r26, 0x07	; 7
     e2c:	e8 0f       	add	r30, r24
     e2e:	f9 1f       	adc	r31, r25
     e30:	80 81       	ld	r24, Z
     e32:	91 81       	ldd	r25, Z+1	; 0x01
     e34:	08 95       	ret

00000e36 <rb32_write>:
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	fc 01       	movw	r30, r24
     e44:	41 15       	cp	r20, r1
     e46:	51 05       	cpc	r21, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <rb32_write+0x16>
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <rb32_write+0x94>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	db 01       	movw	r26, r22
     e5c:	a8 0f       	add	r26, r24
     e5e:	b9 1f       	adc	r27, r25
     e60:	cd 90       	ld	r12, X+
     e62:	dd 90       	ld	r13, X+
     e64:	ed 90       	ld	r14, X+
     e66:	fc 90       	ld	r15, X
     e68:	a2 81       	ldd	r26, Z+2	; 0x02
     e6a:	b3 81       	ldd	r27, Z+3	; 0x03
     e6c:	aa 0f       	add	r26, r26
     e6e:	bb 1f       	adc	r27, r27
     e70:	aa 0f       	add	r26, r26
     e72:	bb 1f       	adc	r27, r27
     e74:	86 81       	ldd	r24, Z+6	; 0x06
     e76:	97 81       	ldd	r25, Z+7	; 0x07
     e78:	a8 0f       	add	r26, r24
     e7a:	b9 1f       	adc	r27, r25
     e7c:	cd 92       	st	X+, r12
     e7e:	dd 92       	st	X+, r13
     e80:	ed 92       	st	X+, r14
     e82:	fc 92       	st	X, r15
     e84:	13 97       	sbiw	r26, 0x03	; 3
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	82 83       	std	Z+2, r24	; 0x02
     e8e:	93 83       	std	Z+3, r25	; 0x03
     e90:	a0 81       	ld	r26, Z
     e92:	b1 81       	ldd	r27, Z+1	; 0x01
     e94:	8a 17       	cp	r24, r26
     e96:	9b 07       	cpc	r25, r27
     e98:	11 f4       	brne	.+4      	; 0xe9e <rb32_write+0x68>
     e9a:	12 82       	std	Z+2, r1	; 0x02
     e9c:	13 82       	std	Z+3, r1	; 0x03
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	c4 81       	ldd	r28, Z+4	; 0x04
     ea4:	d5 81       	ldd	r29, Z+5	; 0x05
     ea6:	8c 17       	cp	r24, r28
     ea8:	9d 07       	cpc	r25, r29
     eaa:	49 f4       	brne	.+18     	; 0xebe <rb32_write+0x88>
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	a8 17       	cp	r26, r24
     eb0:	b9 07       	cpc	r27, r25
     eb2:	19 f0       	breq	.+6      	; 0xeba <rb32_write+0x84>
     eb4:	84 83       	std	Z+4, r24	; 0x04
     eb6:	95 83       	std	Z+5, r25	; 0x05
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <rb32_write+0x88>
     eba:	14 82       	std	Z+4, r1	; 0x04
     ebc:	15 82       	std	Z+5, r1	; 0x05
     ebe:	2f 5f       	subi	r18, 0xFF	; 255
     ec0:	82 2f       	mov	r24, r18
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	84 17       	cp	r24, r20
     ec6:	95 07       	cpc	r25, r21
     ec8:	20 f2       	brcs	.-120    	; 0xe52 <rb32_write+0x1c>
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	08 95       	ret

00000ed8 <rb32_init>:
     ed8:	fc 01       	movw	r30, r24
     eda:	12 82       	std	Z+2, r1	; 0x02
     edc:	13 82       	std	Z+3, r1	; 0x03
     ede:	14 82       	std	Z+4, r1	; 0x04
     ee0:	15 82       	std	Z+5, r1	; 0x05
     ee2:	66 83       	std	Z+6, r22	; 0x06
     ee4:	77 83       	std	Z+7, r23	; 0x07
     ee6:	40 83       	st	Z, r20
     ee8:	51 83       	std	Z+1, r21	; 0x01
     eea:	08 95       	ret

00000eec <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     eec:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     eee:	12 96       	adiw	r26, 0x02	; 2
     ef0:	ed 91       	ld	r30, X+
     ef2:	fc 91       	ld	r31, X
     ef4:	13 97       	sbiw	r26, 0x03	; 3
     ef6:	cb 01       	movw	r24, r22
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	e8 17       	cp	r30, r24
     efc:	f9 07       	cpc	r31, r25
     efe:	98 f0       	brcs	.+38     	; 0xf26 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     f00:	e1 50       	subi	r30, 0x01	; 1
     f02:	f0 4c       	sbci	r31, 0xC0	; 192
     f04:	e6 1b       	sub	r30, r22
     f06:	f7 0b       	sbc	r31, r23
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	16 96       	adiw	r26, 0x06	; 6
     f12:	8d 91       	ld	r24, X+
     f14:	9c 91       	ld	r25, X
     f16:	17 97       	sbiw	r26, 0x07	; 7
     f18:	e8 0f       	add	r30, r24
     f1a:	f9 1f       	adc	r31, r25
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     f26:	2d 91       	ld	r18, X+
     f28:	3c 91       	ld	r19, X
     f2a:	11 97       	sbiw	r26, 0x01	; 1
     f2c:	e2 0f       	add	r30, r18
     f2e:	f3 1f       	adc	r31, r19
     f30:	e1 50       	subi	r30, 0x01	; 1
     f32:	f0 4c       	sbci	r31, 0xC0	; 192
     f34:	e6 1b       	sub	r30, r22
     f36:	f7 0b       	sbc	r31, r23
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	ee 0f       	add	r30, r30
     f3e:	ff 1f       	adc	r31, r31
     f40:	16 96       	adiw	r26, 0x06	; 6
     f42:	8d 91       	ld	r24, X+
     f44:	9c 91       	ld	r25, X
     f46:	17 97       	sbiw	r26, 0x07	; 7
     f48:	e8 0f       	add	r30, r24
     f4a:	f9 1f       	adc	r31, r25
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
}
     f54:	08 95       	ret

00000f56 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	1f 92       	push	r1
     f5c:	1f 92       	push	r1
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     f68:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     f6c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     f70:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     f74:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     f78:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     f7c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f80:	8f b7       	in	r24, 0x3f	; 63
     f82:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f84:	f8 94       	cli
	return flags;
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f88:	e0 e5       	ldi	r30, 0x50	; 80
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	82 60       	ori	r24, 0x02	; 2
     f90:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f92:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f94:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f96:	81 ff       	sbrs	r24, 1
     f98:	fd cf       	rjmp	.-6      	; 0xf94 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	80 e4       	ldi	r24, 0x40	; 64
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	2f d0       	rcall	.+94     	; 0x1000 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fa2:	8f b7       	in	r24, 0x3f	; 63
     fa4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fa6:	f8 94       	cli
	return flags;
     fa8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     faa:	e0 e5       	ldi	r30, 0x50	; 80
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8e 7f       	andi	r24, 0xFE	; 254
     fb2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fb4:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	1f 92       	push	r1
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fca:	9f b7       	in	r25, 0x3f	; 63
     fcc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     fce:	f8 94       	cli
	return flags;
     fd0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     fd2:	e8 2f       	mov	r30, r24
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	e0 59       	subi	r30, 0x90	; 144
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	60 95       	com	r22
     fdc:	80 81       	ld	r24, Z
     fde:	68 23       	and	r22, r24
     fe0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fe2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     fec:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     ff0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     ff2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     ff4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     ff8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     ffa:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     ffe:	08 95       	ret

00001000 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1000:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1002:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1004:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1006:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1008:	60 83       	st	Z, r22
	ret                             // Return to caller
    100a:	08 95       	ret

0000100c <__portable_avr_delay_cycles>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	delay_ms(1);
	uint8_t byte = NVM.DATA0;
	return byte;
}
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <__portable_avr_delay_cycles+0xa>
    100e:	61 50       	subi	r22, 0x01	; 1
    1010:	71 09       	sbc	r23, r1
    1012:	81 09       	sbc	r24, r1
    1014:	91 09       	sbc	r25, r1
    1016:	61 15       	cp	r22, r1
    1018:	71 05       	cpc	r23, r1
    101a:	81 05       	cpc	r24, r1
    101c:	91 05       	cpc	r25, r1
    101e:	b9 f7       	brne	.-18     	; 0x100e <__portable_avr_delay_cycles+0x2>
    1020:	08 95       	ret

00001022 <pressure_init>:
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	a9 dd       	rcall	.-1198   	; 0xb7a <ms5607_init>
    1028:	82 ea       	ldi	r24, 0xA2	; 162
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	bf dd       	rcall	.-1154   	; 0xbac <ms5607_read>
    102e:	c2 ef       	ldi	r28, 0xF2	; 242
    1030:	d0 e2       	ldi	r29, 0x20	; 32
    1032:	88 83       	st	Y, r24
    1034:	99 83       	std	Y+1, r25	; 0x01
    1036:	84 ea       	ldi	r24, 0xA4	; 164
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b8 dd       	rcall	.-1168   	; 0xbac <ms5607_read>
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	9b 83       	std	Y+3, r25	; 0x03
    1040:	86 ea       	ldi	r24, 0xA6	; 166
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	b3 dd       	rcall	.-1178   	; 0xbac <ms5607_read>
    1046:	8c 83       	std	Y+4, r24	; 0x04
    1048:	9d 83       	std	Y+5, r25	; 0x05
    104a:	88 ea       	ldi	r24, 0xA8	; 168
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	ae dd       	rcall	.-1188   	; 0xbac <ms5607_read>
    1050:	8e 83       	std	Y+6, r24	; 0x06
    1052:	9f 83       	std	Y+7, r25	; 0x07
    1054:	8a ea       	ldi	r24, 0xAA	; 170
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a9 dd       	rcall	.-1198   	; 0xbac <ms5607_read>
    105a:	88 87       	std	Y+8, r24	; 0x08
    105c:	99 87       	std	Y+9, r25	; 0x09
    105e:	8c ea       	ldi	r24, 0xAC	; 172
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a4 dd       	rcall	.-1208   	; 0xbac <ms5607_read>
    1064:	8a 87       	std	Y+10, r24	; 0x0a
    1066:	9b 87       	std	Y+11, r25	; 0x0b
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <gps_init>:
    106e:	45 dd       	rcall	.-1398   	; 0xafa <gps_uart_init>
    1070:	6b ea       	ldi	r22, 0xAB	; 171
    1072:	79 e2       	ldi	r23, 0x29	; 41
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	c9 df       	rcall	.-110    	; 0x100c <__portable_avr_delay_cycles>
    107a:	80 e3       	ldi	r24, 0x30	; 48
    107c:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    1080:	08 95       	ret

00001082 <release>:
    1082:	80 eb       	ldi	r24, 0xB0	; 176
    1084:	94 e0       	ldi	r25, 0x04	; 4
    1086:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    108a:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <released>
    1094:	08 95       	ret

00001096 <get_pressure>:
    1096:	4f 92       	push	r4
    1098:	5f 92       	push	r5
    109a:	6f 92       	push	r6
    109c:	7f 92       	push	r7
    109e:	8f 92       	push	r8
    10a0:	9f 92       	push	r9
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	6b ea       	ldi	r22, 0xAB	; 171
    10b4:	76 ea       	ldi	r23, 0xA6	; 166
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a8 df       	rcall	.-176    	; 0x100c <__portable_avr_delay_cycles>
    10bc:	89 dd       	rcall	.-1262   	; 0xbd0 <ms5607_convert_d1>
    10be:	6b 01       	movw	r12, r22
    10c0:	7c 01       	movw	r14, r24
    10c2:	6b ea       	ldi	r22, 0xAB	; 171
    10c4:	76 ea       	ldi	r23, 0xA6	; 166
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 df       	rcall	.-192    	; 0x100c <__portable_avr_delay_cycles>
    10cc:	a5 dd       	rcall	.-1206   	; 0xc18 <ms5607_convert_d2>
    10ce:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__floatunsisf>
    10d2:	4b 01       	movw	r8, r22
    10d4:	5c 01       	movw	r10, r24
    10d6:	c2 ef       	ldi	r28, 0xF2	; 242
    10d8:	d0 e2       	ldi	r29, 0x20	; 32
    10da:	68 85       	ldd	r22, Y+8	; 0x08
    10dc:	79 85       	ldd	r23, Y+9	; 0x09
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__floatunsisf>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e8       	ldi	r20, 0x80	; 128
    10ec:	53 e4       	ldi	r21, 0x43	; 67
    10ee:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	c5 01       	movw	r24, r10
    10f8:	b4 01       	movw	r22, r8
    10fa:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    10fe:	4b 01       	movw	r8, r22
    1100:	5c 01       	movw	r10, r24
    1102:	6c 81       	ldd	r22, Y+4	; 0x04
    1104:	7d 81       	ldd	r23, Y+5	; 0x05
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__floatunsisf>
    110e:	a5 01       	movw	r20, r10
    1110:	94 01       	movw	r18, r8
    1112:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	5c e3       	ldi	r21, 0x3C	; 60
    111e:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1122:	2b 01       	movw	r4, r22
    1124:	3c 01       	movw	r6, r24
    1126:	68 81       	ld	r22, Y
    1128:	79 81       	ldd	r23, Y+1	; 0x01
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__floatunsisf>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	57 e4       	ldi	r21, 0x47	; 71
    113a:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    113e:	9b 01       	movw	r18, r22
    1140:	ac 01       	movw	r20, r24
    1142:	c3 01       	movw	r24, r6
    1144:	b2 01       	movw	r22, r4
    1146:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    114a:	2b 01       	movw	r4, r22
    114c:	3c 01       	movw	r6, r24
    114e:	c7 01       	movw	r24, r14
    1150:	b6 01       	movw	r22, r12
    1152:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__floatunsisf>
    1156:	9b 01       	movw	r18, r22
    1158:	ac 01       	movw	r20, r24
    115a:	c3 01       	movw	r24, r6
    115c:	b2 01       	movw	r22, r4
    115e:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	55 e3       	ldi	r21, 0x35	; 53
    116a:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    116e:	6b 01       	movw	r12, r22
    1170:	7c 01       	movw	r14, r24
    1172:	6e 81       	ldd	r22, Y+6	; 0x06
    1174:	7f 81       	ldd	r23, Y+7	; 0x07
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__floatunsisf>
    117e:	a5 01       	movw	r20, r10
    1180:	94 01       	movw	r18, r8
    1182:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e8       	ldi	r20, 0x80	; 128
    118c:	5c e3       	ldi	r21, 0x3C	; 60
    118e:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1192:	4b 01       	movw	r8, r22
    1194:	5c 01       	movw	r10, r24
    1196:	6a 81       	ldd	r22, Y+2	; 0x02
    1198:	7b 81       	ldd	r23, Y+3	; 0x03
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__floatunsisf>
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	58 e4       	ldi	r21, 0x48	; 72
    11aa:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
    11b2:	c5 01       	movw	r24, r10
    11b4:	b4 01       	movw	r22, r8
    11b6:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	c7 01       	movw	r24, r14
    11c0:	b6 01       	movw	r22, r12
    11c2:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	58 e3       	ldi	r21, 0x38	; 56
    11ce:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	bf 90       	pop	r11
    11e0:	af 90       	pop	r10
    11e2:	9f 90       	pop	r9
    11e4:	8f 90       	pop	r8
    11e6:	7f 90       	pop	r7
    11e8:	6f 90       	pop	r6
    11ea:	5f 90       	pop	r5
    11ec:	4f 90       	pop	r4
    11ee:	08 95       	ret

000011f0 <get_altitude>:
    11f0:	4f 92       	push	r4
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	2b 01       	movw	r4, r22
    120a:	3c 01       	movw	r6, r24
    120c:	c0 90 21 20 	lds	r12, 0x2021	; 0x802021 <L>
    1210:	d0 90 22 20 	lds	r13, 0x2022	; 0x802022 <L+0x1>
    1214:	e0 90 23 20 	lds	r14, 0x2023	; 0x802023 <L+0x2>
    1218:	f0 90 24 20 	lds	r15, 0x2024	; 0x802024 <L+0x3>
    121c:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <R>
    1220:	30 91 26 20 	lds	r19, 0x2026	; 0x802026 <R+0x1>
    1224:	40 91 27 20 	lds	r20, 0x2027	; 0x802027 <R+0x2>
    1228:	50 91 28 20 	lds	r21, 0x2028	; 0x802028 <R+0x3>
    122c:	c7 01       	movw	r24, r14
    122e:	b6 01       	movw	r22, r12
    1230:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1234:	20 91 1d 20 	lds	r18, 0x201D	; 0x80201d <g_0>
    1238:	30 91 1e 20 	lds	r19, 0x201E	; 0x80201e <g_0+0x1>
    123c:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <g_0+0x2>
    1240:	50 91 20 20 	lds	r21, 0x2020	; 0x802020 <g_0+0x3>
    1244:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    1248:	4b 01       	movw	r8, r22
    124a:	5c 01       	movw	r10, r24
    124c:	a3 01       	movw	r20, r6
    124e:	92 01       	movw	r18, r4
    1250:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    1254:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    1258:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    125c:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    1260:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    1264:	a5 01       	movw	r20, r10
    1266:	94 01       	movw	r18, r8
    1268:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <pow>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    1278:	20 91 29 20 	lds	r18, 0x2029	; 0x802029 <ground_t>
    127c:	30 91 2a 20 	lds	r19, 0x202A	; 0x80202a <ground_t+0x1>
    1280:	40 91 2b 20 	lds	r20, 0x202B	; 0x80202b <ground_t+0x2>
    1284:	50 91 2c 20 	lds	r21, 0x202C	; 0x80202c <ground_t+0x3>
    1288:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    128c:	a7 01       	movw	r20, r14
    128e:	96 01       	movw	r18, r12
    1290:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    1294:	20 91 fe 20 	lds	r18, 0x20FE	; 0x8020fe <ground_a>
    1298:	30 91 ff 20 	lds	r19, 0x20FF	; 0x8020ff <ground_a+0x1>
    129c:	40 91 00 21 	lds	r20, 0x2100	; 0x802100 <ground_a+0x2>
    12a0:	50 91 01 21 	lds	r21, 0x2101	; 0x802101 <ground_a+0x3>
    12a4:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	9f 90       	pop	r9
    12b6:	8f 90       	pop	r8
    12b8:	7f 90       	pop	r7
    12ba:	6f 90       	pop	r6
    12bc:	5f 90       	pop	r5
    12be:	4f 90       	pop	r4
    12c0:	08 95       	ret

000012c2 <diff>:
    12c2:	2f 92       	push	r2
    12c4:	3f 92       	push	r3
    12c6:	4f 92       	push	r4
    12c8:	5f 92       	push	r5
    12ca:	6f 92       	push	r6
    12cc:	7f 92       	push	r7
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <diff+0x26>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <diff+0x28>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	6c 01       	movw	r12, r24
    12f0:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    12f4:	88 23       	and	r24, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <diff+0x38>
    12f8:	6c c0       	rjmp	.+216    	; 0x13d2 <diff+0x110>
    12fa:	00 e0       	ldi	r16, 0x00	; 0
    12fc:	10 e0       	ldi	r17, 0x00	; 0
    12fe:	41 2c       	mov	r4, r1
    1300:	51 2c       	mov	r5, r1
    1302:	32 01       	movw	r6, r4
    1304:	86 2e       	mov	r8, r22
    1306:	91 2c       	mov	r9, r1
    1308:	a1 2c       	mov	r10, r1
    130a:	b1 2c       	mov	r11, r1
    130c:	89 82       	std	Y+1, r8	; 0x01
    130e:	9a 82       	std	Y+2, r9	; 0x02
    1310:	ab 82       	std	Y+3, r10	; 0x03
    1312:	bc 82       	std	Y+4, r11	; 0x04
    1314:	b8 01       	movw	r22, r16
    1316:	c6 01       	movw	r24, r12
    1318:	61 dd       	rcall	.-1342   	; 0xddc <rb16_get_nth>
    131a:	5c 01       	movw	r10, r24
    131c:	18 01       	movw	r2, r16
    131e:	2f ef       	ldi	r18, 0xFF	; 255
    1320:	22 1a       	sub	r2, r18
    1322:	32 0a       	sbc	r3, r18
    1324:	b1 01       	movw	r22, r2
    1326:	c6 01       	movw	r24, r12
    1328:	59 dd       	rcall	.-1358   	; 0xddc <rb16_get_nth>
    132a:	7c 01       	movw	r14, r24
    132c:	b8 01       	movw	r22, r16
    132e:	6e 5f       	subi	r22, 0xFE	; 254
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	c6 01       	movw	r24, r12
    1334:	53 dd       	rcall	.-1370   	; 0xddc <rb16_get_nth>
    1336:	a5 01       	movw	r20, r10
    1338:	bb 0c       	add	r11, r11
    133a:	66 0b       	sbc	r22, r22
    133c:	77 0b       	sbc	r23, r23
    133e:	8a 01       	movw	r16, r20
    1340:	9b 01       	movw	r18, r22
    1342:	00 0f       	add	r16, r16
    1344:	11 1f       	adc	r17, r17
    1346:	22 1f       	adc	r18, r18
    1348:	33 1f       	adc	r19, r19
    134a:	40 0f       	add	r20, r16
    134c:	51 1f       	adc	r21, r17
    134e:	62 1f       	adc	r22, r18
    1350:	73 1f       	adc	r23, r19
    1352:	87 01       	movw	r16, r14
    1354:	ff 0c       	add	r15, r15
    1356:	22 0b       	sbc	r18, r18
    1358:	33 0b       	sbc	r19, r19
    135a:	78 01       	movw	r14, r16
    135c:	89 01       	movw	r16, r18
    135e:	ee 0c       	add	r14, r14
    1360:	ff 1c       	adc	r15, r15
    1362:	00 1f       	adc	r16, r16
    1364:	11 1f       	adc	r17, r17
    1366:	ee 0c       	add	r14, r14
    1368:	ff 1c       	adc	r15, r15
    136a:	00 1f       	adc	r16, r16
    136c:	11 1f       	adc	r17, r17
    136e:	4a 01       	movw	r8, r20
    1370:	5b 01       	movw	r10, r22
    1372:	8e 18       	sub	r8, r14
    1374:	9f 08       	sbc	r9, r15
    1376:	a0 0a       	sbc	r10, r16
    1378:	b1 0a       	sbc	r11, r17
    137a:	ac 01       	movw	r20, r24
    137c:	99 0f       	add	r25, r25
    137e:	66 0b       	sbc	r22, r22
    1380:	77 0b       	sbc	r23, r23
    1382:	d5 01       	movw	r26, r10
    1384:	c4 01       	movw	r24, r8
    1386:	84 0f       	add	r24, r20
    1388:	95 1f       	adc	r25, r21
    138a:	a6 1f       	adc	r26, r22
    138c:	b7 1f       	adc	r27, r23
    138e:	9c 01       	movw	r18, r24
    1390:	ad 01       	movw	r20, r26
    1392:	69 81       	ldd	r22, Y+1	; 0x01
    1394:	7a 81       	ldd	r23, Y+2	; 0x02
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__mulsi3>
    139e:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatsisf>
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	5f e3       	ldi	r21, 0x3F	; 63
    13aa:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    13ae:	9b 01       	movw	r18, r22
    13b0:	ac 01       	movw	r20, r24
    13b2:	c3 01       	movw	r24, r6
    13b4:	b2 01       	movw	r22, r4
    13b6:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    13ba:	2b 01       	movw	r4, r22
    13bc:	3c 01       	movw	r6, r24
    13be:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    13c2:	81 01       	movw	r16, r2
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	22 16       	cp	r2, r18
    13ca:	33 06       	cpc	r3, r19
    13cc:	08 f4       	brcc	.+2      	; 0x13d0 <diff+0x10e>
    13ce:	a2 cf       	rjmp	.-188    	; 0x1314 <diff+0x52>
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <diff+0x116>
    13d2:	41 2c       	mov	r4, r1
    13d4:	51 2c       	mov	r5, r1
    13d6:	32 01       	movw	r6, r4
    13d8:	68 2f       	mov	r22, r24
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatsisf>
    13e4:	9b 01       	movw	r18, r22
    13e6:	ac 01       	movw	r20, r24
    13e8:	c3 01       	movw	r24, r6
    13ea:	b2 01       	movw	r22, r4
    13ec:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	48 ec       	ldi	r20, 0xC8	; 200
    13f6:	52 e4       	ldi	r21, 0x42	; 66
    13f8:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    13fc:	26 96       	adiw	r28, 0x06	; 6
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	ff 90       	pop	r15
    140c:	ef 90       	pop	r14
    140e:	df 90       	pop	r13
    1410:	cf 90       	pop	r12
    1412:	bf 90       	pop	r11
    1414:	af 90       	pop	r10
    1416:	9f 90       	pop	r9
    1418:	8f 90       	pop	r8
    141a:	7f 90       	pop	r7
    141c:	6f 90       	pop	r6
    141e:	5f 90       	pop	r5
    1420:	4f 90       	pop	r4
    1422:	3f 90       	pop	r3
    1424:	2f 90       	pop	r2
    1426:	08 95       	ret

00001428 <data_check>:
    1428:	3f 92       	push	r3
    142a:	4f 92       	push	r4
    142c:	5f 92       	push	r5
    142e:	6f 92       	push	r6
    1430:	7f 92       	push	r7
    1432:	8f 92       	push	r8
    1434:	9f 92       	push	r9
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	00 d0       	rcall	.+0      	; 0x144c <data_check+0x24>
    144c:	00 d0       	rcall	.+0      	; 0x144e <data_check+0x26>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	8c 01       	movw	r16, r24
    1454:	19 82       	std	Y+1, r1	; 0x01
    1456:	1a 82       	std	Y+2, r1	; 0x02
    1458:	c1 2c       	mov	r12, r1
    145a:	d1 2c       	mov	r13, r1
    145c:	76 01       	movw	r14, r12
    145e:	69 81       	ldd	r22, Y+1	; 0x01
    1460:	7a 81       	ldd	r23, Y+2	; 0x02
    1462:	c8 01       	movw	r24, r16
    1464:	43 dd       	rcall	.-1402   	; 0xeec <rb32_get_nth>
    1466:	4b 01       	movw	r8, r22
    1468:	5c 01       	movw	r10, r24
    146a:	21 ea       	ldi	r18, 0xA1	; 161
    146c:	82 1a       	sub	r8, r18
    146e:	26 e8       	ldi	r18, 0x86	; 134
    1470:	92 0a       	sbc	r9, r18
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	a2 0a       	sbc	r10, r18
    1476:	b1 08       	sbc	r11, r1
    1478:	2f ed       	ldi	r18, 0xDF	; 223
    147a:	82 16       	cp	r8, r18
    147c:	2f e0       	ldi	r18, 0x0F	; 15
    147e:	92 06       	cpc	r9, r18
    1480:	27 e9       	ldi	r18, 0x97	; 151
    1482:	a2 06       	cpc	r10, r18
    1484:	b1 04       	cpc	r11, r1
    1486:	80 f4       	brcc	.+32     	; 0x14a8 <data_check+0x80>
    1488:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatsisf>
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 ea       	ldi	r20, 0xA0	; 160
    1492:	50 e4       	ldi	r21, 0x40	; 64
    1494:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    1498:	9b 01       	movw	r18, r22
    149a:	ac 01       	movw	r20, r24
    149c:	c7 01       	movw	r24, r14
    149e:	b6 01       	movw	r22, r12
    14a0:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    14a4:	6b 01       	movw	r12, r22
    14a6:	7c 01       	movw	r14, r24
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	05 97       	sbiw	r24, 0x05	; 5
    14b4:	a1 f6       	brne	.-88     	; 0x145e <data_check+0x36>
    14b6:	19 82       	std	Y+1, r1	; 0x01
    14b8:	1a 82       	std	Y+2, r1	; 0x02
    14ba:	81 2c       	mov	r8, r1
    14bc:	91 2c       	mov	r9, r1
    14be:	54 01       	movw	r10, r8
    14c0:	69 81       	ldd	r22, Y+1	; 0x01
    14c2:	7a 81       	ldd	r23, Y+2	; 0x02
    14c4:	c8 01       	movw	r24, r16
    14c6:	12 dd       	rcall	.-1500   	; 0xeec <rb32_get_nth>
    14c8:	2b 01       	movw	r4, r22
    14ca:	3c 01       	movw	r6, r24
    14cc:	21 ea       	ldi	r18, 0xA1	; 161
    14ce:	42 1a       	sub	r4, r18
    14d0:	26 e8       	ldi	r18, 0x86	; 134
    14d2:	52 0a       	sbc	r5, r18
    14d4:	21 e0       	ldi	r18, 0x01	; 1
    14d6:	62 0a       	sbc	r6, r18
    14d8:	71 08       	sbc	r7, r1
    14da:	2f ed       	ldi	r18, 0xDF	; 223
    14dc:	42 16       	cp	r4, r18
    14de:	2f e0       	ldi	r18, 0x0F	; 15
    14e0:	52 06       	cpc	r5, r18
    14e2:	27 e9       	ldi	r18, 0x97	; 151
    14e4:	62 06       	cpc	r6, r18
    14e6:	71 04       	cpc	r7, r1
    14e8:	90 f4       	brcc	.+36     	; 0x150e <data_check+0xe6>
    14ea:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatsisf>
    14ee:	a7 01       	movw	r20, r14
    14f0:	96 01       	movw	r18, r12
    14f2:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    14f6:	9b 01       	movw	r18, r22
    14f8:	ac 01       	movw	r20, r24
    14fa:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	c5 01       	movw	r24, r10
    1504:	b4 01       	movw	r22, r8
    1506:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    150a:	4b 01       	movw	r8, r22
    150c:	5c 01       	movw	r10, r24
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	9a 83       	std	Y+2, r25	; 0x02
    1518:	05 97       	sbiw	r24, 0x05	; 5
    151a:	91 f6       	brne	.-92     	; 0x14c0 <data_check+0x98>
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e8       	ldi	r20, 0x80	; 128
    1522:	5e e3       	ldi	r21, 0x3E	; 62
    1524:	c5 01       	movw	r24, r10
    1526:	b4 01       	movw	r22, r8
    1528:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    152c:	69 83       	std	Y+1, r22	; 0x01
    152e:	7a 83       	std	Y+2, r23	; 0x02
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	1d 82       	std	Y+5, r1	; 0x05
    1536:	1e 82       	std	Y+6, r1	; 0x06
    1538:	31 2c       	mov	r3, r1
    153a:	41 2c       	mov	r4, r1
    153c:	51 2c       	mov	r5, r1
    153e:	32 01       	movw	r6, r4
    1540:	6d 81       	ldd	r22, Y+5	; 0x05
    1542:	7e 81       	ldd	r23, Y+6	; 0x06
    1544:	c8 01       	movw	r24, r16
    1546:	d2 dc       	rcall	.-1628   	; 0xeec <rb32_get_nth>
    1548:	4b 01       	movw	r8, r22
    154a:	5c 01       	movw	r10, r24
    154c:	21 ea       	ldi	r18, 0xA1	; 161
    154e:	82 1a       	sub	r8, r18
    1550:	26 e8       	ldi	r18, 0x86	; 134
    1552:	92 0a       	sbc	r9, r18
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	a2 0a       	sbc	r10, r18
    1558:	b1 08       	sbc	r11, r1
    155a:	2f ed       	ldi	r18, 0xDF	; 223
    155c:	82 16       	cp	r8, r18
    155e:	2f e0       	ldi	r18, 0x0F	; 15
    1560:	92 06       	cpc	r9, r18
    1562:	27 e9       	ldi	r18, 0x97	; 151
    1564:	a2 06       	cpc	r10, r18
    1566:	b1 04       	cpc	r11, r1
    1568:	50 f5       	brcc	.+84     	; 0x15be <data_check+0x196>
    156a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatsisf>
    156e:	4b 01       	movw	r8, r22
    1570:	5c 01       	movw	r10, r24
    1572:	a7 01       	movw	r20, r14
    1574:	96 01       	movw	r18, r12
    1576:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    157a:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    157e:	9b 01       	movw	r18, r22
    1580:	77 23       	and	r23, r23
    1582:	24 f4       	brge	.+8      	; 0x158c <data_check+0x164>
    1584:	22 27       	eor	r18, r18
    1586:	33 27       	eor	r19, r19
    1588:	26 1b       	sub	r18, r22
    158a:	37 0b       	sbc	r19, r23
    158c:	b9 01       	movw	r22, r18
    158e:	33 0f       	add	r19, r19
    1590:	88 0b       	sbc	r24, r24
    1592:	99 0b       	sbc	r25, r25
    1594:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatsisf>
    1598:	9b 01       	movw	r18, r22
    159a:	ac 01       	movw	r20, r24
    159c:	69 81       	ldd	r22, Y+1	; 0x01
    159e:	7a 81       	ldd	r23, Y+2	; 0x02
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	0e 94 04 1b 	call	0x3608	; 0x3608 <__gesf2>
    15a8:	88 23       	and	r24, r24
    15aa:	4c f0       	brlt	.+18     	; 0x15be <data_check+0x196>
    15ac:	a5 01       	movw	r20, r10
    15ae:	94 01       	movw	r18, r8
    15b0:	c3 01       	movw	r24, r6
    15b2:	b2 01       	movw	r22, r4
    15b4:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    15b8:	2b 01       	movw	r4, r22
    15ba:	3c 01       	movw	r6, r24
    15bc:	33 94       	inc	r3
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	8d 83       	std	Y+5, r24	; 0x05
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	05 97       	sbiw	r24, 0x05	; 5
    15ca:	09 f0       	breq	.+2      	; 0x15ce <data_check+0x1a6>
    15cc:	b9 cf       	rjmp	.-142    	; 0x1540 <data_check+0x118>
    15ce:	33 20       	and	r3, r3
    15d0:	69 f0       	breq	.+26     	; 0x15ec <data_check+0x1c4>
    15d2:	63 2d       	mov	r22, r3
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__floatunsisf>
    15de:	9b 01       	movw	r18, r22
    15e0:	ac 01       	movw	r20, r24
    15e2:	c3 01       	movw	r24, r6
    15e4:	b2 01       	movw	r22, r4
    15e6:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <data_check+0x1cc>
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	80 e8       	ldi	r24, 0x80	; 128
    15f2:	9f eb       	ldi	r25, 0xBF	; 191
    15f4:	26 96       	adiw	r28, 0x06	; 6
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	bf 90       	pop	r11
    160c:	af 90       	pop	r10
    160e:	9f 90       	pop	r9
    1610:	8f 90       	pop	r8
    1612:	7f 90       	pop	r7
    1614:	6f 90       	pop	r6
    1616:	5f 90       	pop	r5
    1618:	4f 90       	pop	r4
    161a:	3f 90       	pop	r3
    161c:	08 95       	ret

0000161e <data_collect>:
    161e:	af 92       	push	r10
    1620:	bf 92       	push	r11
    1622:	cf 92       	push	r12
    1624:	df 92       	push	r13
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	00 d0       	rcall	.+0      	; 0x1634 <data_collect+0x16>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <data_collect+0x18>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	5c 01       	movw	r10, r24
    163c:	8b 01       	movw	r16, r22
    163e:	2b dd       	rcall	.-1450   	; 0x1096 <get_pressure>
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    164c:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1650:	69 83       	std	Y+1, r22	; 0x01
    1652:	7a 83       	std	Y+2, r23	; 0x02
    1654:	8b 83       	std	Y+3, r24	; 0x03
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	be 01       	movw	r22, r28
    165e:	6f 5f       	subi	r22, 0xFF	; 255
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	c8 01       	movw	r24, r16
    1664:	e8 db       	rcall	.-2096   	; 0xe36 <rb32_write>
    1666:	c8 01       	movw	r24, r16
    1668:	df de       	rcall	.-578    	; 0x1428 <data_check>
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    1676:	6b 01       	movw	r12, r22
    1678:	7c 01       	movw	r14, r24
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	5f eb       	ldi	r21, 0xBF	; 191
    1682:	0e 94 1a 19 	call	0x3234	; 0x3234 <__cmpsf2>
    1686:	88 23       	and	r24, r24
    1688:	81 f1       	breq	.+96     	; 0x16ea <data_collect+0xcc>
    168a:	c0 92 e3 20 	sts	0x20E3, r12	; 0x8020e3 <press>
    168e:	d0 92 e4 20 	sts	0x20E4, r13	; 0x8020e4 <press+0x1>
    1692:	e0 92 e5 20 	sts	0x20E5, r14	; 0x8020e5 <press+0x2>
    1696:	f0 92 e6 20 	sts	0x20E6, r15	; 0x8020e6 <press+0x3>
    169a:	c7 01       	movw	r24, r14
    169c:	b6 01       	movw	r22, r12
    169e:	a8 dd       	rcall	.-1200   	; 0x11f0 <get_altitude>
    16a0:	60 93 db 20 	sts	0x20DB, r22	; 0x8020db <alt>
    16a4:	70 93 dc 20 	sts	0x20DC, r23	; 0x8020dc <alt+0x1>
    16a8:	80 93 dd 20 	sts	0x20DD, r24	; 0x8020dd <alt+0x2>
    16ac:	90 93 de 20 	sts	0x20DE, r25	; 0x8020de <alt+0x3>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	48 ec       	ldi	r20, 0xC8	; 200
    16b6:	52 e4       	ldi	r21, 0x42	; 66
    16b8:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    16bc:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    16c0:	6d 83       	std	Y+5, r22	; 0x05
    16c2:	7e 83       	std	Y+6, r23	; 0x06
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	be 01       	movw	r22, r28
    16ca:	6b 5f       	subi	r22, 0xFB	; 251
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	c5 01       	movw	r24, r10
    16d0:	3c db       	rcall	.-2440   	; 0xd4a <rb16_write>
    16d2:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    16d6:	c5 01       	movw	r24, r10
    16d8:	f4 dd       	rcall	.-1048   	; 0x12c2 <diff>
    16da:	60 93 d3 20 	sts	0x20D3, r22	; 0x8020d3 <velocity>
    16de:	70 93 d4 20 	sts	0x20D4, r23	; 0x8020d4 <velocity+0x1>
    16e2:	80 93 d5 20 	sts	0x20D5, r24	; 0x8020d5 <velocity+0x2>
    16e6:	90 93 d6 20 	sts	0x20D6, r25	; 0x8020d6 <velocity+0x3>
    16ea:	fa d9       	rcall	.-3084   	; 0xae0 <thermistor_read>
    16ec:	83 e3       	ldi	r24, 0x33	; 51
    16ee:	93 e1       	ldi	r25, 0x13	; 19
    16f0:	a0 e9       	ldi	r26, 0x90	; 144
    16f2:	b3 e4       	ldi	r27, 0x43	; 67
    16f4:	80 93 df 20 	sts	0x20DF, r24	; 0x8020df <temp>
    16f8:	90 93 e0 20 	sts	0x20E0, r25	; 0x8020e0 <temp+0x1>
    16fc:	a0 93 e1 20 	sts	0x20E1, r26	; 0x8020e1 <temp+0x2>
    1700:	b0 93 e2 20 	sts	0x20E2, r27	; 0x8020e2 <temp+0x3>
    1704:	26 96       	adiw	r28, 0x06	; 6
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	08 95       	ret

00001720 <quaternion2euler>:
    1720:	4f 92       	push	r4
    1722:	5f 92       	push	r5
    1724:	6f 92       	push	r6
    1726:	7f 92       	push	r7
    1728:	8f 92       	push	r8
    172a:	9f 92       	push	r9
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	68 97       	sbiw	r28, 0x18	; 24
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	6d 8b       	std	Y+21, r22	; 0x15
    174c:	7e 8b       	std	Y+22, r23	; 0x16
    174e:	8f 8b       	std	Y+23, r24	; 0x17
    1750:	98 8f       	std	Y+24, r25	; 0x18
    1752:	2d 83       	std	Y+5, r18	; 0x05
    1754:	3e 83       	std	Y+6, r19	; 0x06
    1756:	4f 83       	std	Y+7, r20	; 0x07
    1758:	58 87       	std	Y+8, r21	; 0x08
    175a:	e9 86       	std	Y+9, r14	; 0x09
    175c:	fa 86       	std	Y+10, r15	; 0x0a
    175e:	0b 87       	std	Y+11, r16	; 0x0b
    1760:	1c 87       	std	Y+12, r17	; 0x0c
    1762:	a8 01       	movw	r20, r16
    1764:	97 01       	movw	r18, r14
    1766:	c8 01       	movw	r24, r16
    1768:	b7 01       	movw	r22, r14
    176a:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    176e:	69 8b       	std	Y+17, r22	; 0x11
    1770:	7a 8b       	std	Y+18, r23	; 0x12
    1772:	8b 8b       	std	Y+19, r24	; 0x13
    1774:	9c 8b       	std	Y+20, r25	; 0x14
    1776:	2d 81       	ldd	r18, Y+5	; 0x05
    1778:	3e 81       	ldd	r19, Y+6	; 0x06
    177a:	4f 81       	ldd	r20, Y+7	; 0x07
    177c:	58 85       	ldd	r21, Y+8	; 0x08
    177e:	ca 01       	movw	r24, r20
    1780:	b9 01       	movw	r22, r18
    1782:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1786:	29 89       	ldd	r18, Y+17	; 0x11
    1788:	3a 89       	ldd	r19, Y+18	; 0x12
    178a:	4b 89       	ldd	r20, Y+19	; 0x13
    178c:	5c 89       	ldd	r21, Y+20	; 0x14
    178e:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    1792:	9b 01       	movw	r18, r22
    1794:	ac 01       	movw	r20, r24
    1796:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    179a:	9b 01       	movw	r18, r22
    179c:	ac 01       	movw	r20, r24
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	80 e8       	ldi	r24, 0x80	; 128
    17a4:	9f e3       	ldi	r25, 0x3F	; 63
    17a6:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    17aa:	2b 01       	movw	r4, r22
    17ac:	3c 01       	movw	r6, r24
    17ae:	2d 81       	ldd	r18, Y+5	; 0x05
    17b0:	3e 81       	ldd	r19, Y+6	; 0x06
    17b2:	4f 81       	ldd	r20, Y+7	; 0x07
    17b4:	58 85       	ldd	r21, Y+8	; 0x08
    17b6:	6d 89       	ldd	r22, Y+21	; 0x15
    17b8:	7e 89       	ldd	r23, Y+22	; 0x16
    17ba:	8f 89       	ldd	r24, Y+23	; 0x17
    17bc:	98 8d       	ldd	r25, Y+24	; 0x18
    17be:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    17c2:	69 83       	std	Y+1, r22	; 0x01
    17c4:	7a 83       	std	Y+2, r23	; 0x02
    17c6:	8b 83       	std	Y+3, r24	; 0x03
    17c8:	9c 83       	std	Y+4, r25	; 0x04
    17ca:	a6 01       	movw	r20, r12
    17cc:	95 01       	movw	r18, r10
    17ce:	c8 01       	movw	r24, r16
    17d0:	b7 01       	movw	r22, r14
    17d2:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    17d6:	9b 01       	movw	r18, r22
    17d8:	ac 01       	movw	r20, r24
    17da:	69 81       	ldd	r22, Y+1	; 0x01
    17dc:	7a 81       	ldd	r23, Y+2	; 0x02
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    17e6:	9b 01       	movw	r18, r22
    17e8:	ac 01       	movw	r20, r24
    17ea:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    17ee:	a3 01       	movw	r20, r6
    17f0:	92 01       	movw	r18, r4
    17f2:	0e 94 c7 18 	call	0x318e	; 0x318e <atan2>
    17f6:	6d 87       	std	Y+13, r22	; 0x0d
    17f8:	7e 87       	std	Y+14, r23	; 0x0e
    17fa:	8f 87       	std	Y+15, r24	; 0x0f
    17fc:	98 8b       	std	Y+16, r25	; 0x10
    17fe:	a8 01       	movw	r20, r16
    1800:	97 01       	movw	r18, r14
    1802:	6d 89       	ldd	r22, Y+21	; 0x15
    1804:	7e 89       	ldd	r23, Y+22	; 0x16
    1806:	8f 89       	ldd	r24, Y+23	; 0x17
    1808:	98 8d       	ldd	r25, Y+24	; 0x18
    180a:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    180e:	2b 01       	movw	r4, r22
    1810:	3c 01       	movw	r6, r24
    1812:	a6 01       	movw	r20, r12
    1814:	95 01       	movw	r18, r10
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	c3 01       	movw	r24, r6
    1828:	b2 01       	movw	r22, r4
    182a:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    182e:	9b 01       	movw	r18, r22
    1830:	ac 01       	movw	r20, r24
    1832:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    1836:	2b 01       	movw	r4, r22
    1838:	3c 01       	movw	r6, r24
    183a:	9f 77       	andi	r25, 0x7F	; 127
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 04 1b 	call	0x3608	; 0x3608 <__gesf2>
    1848:	88 23       	and	r24, r24
    184a:	5c f0       	brlt	.+22     	; 0x1862 <quaternion2euler+0x142>
    184c:	8b ed       	ldi	r24, 0xDB	; 219
    184e:	9f e0       	ldi	r25, 0x0F	; 15
    1850:	a9 ec       	ldi	r26, 0xC9	; 201
    1852:	bf e3       	ldi	r27, 0x3F	; 63
    1854:	77 fa       	bst	r7, 7
    1856:	b7 f9       	bld	r27, 7
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	ab 83       	std	Y+3, r26	; 0x03
    185e:	bc 83       	std	Y+4, r27	; 0x04
    1860:	08 c0       	rjmp	.+16     	; 0x1872 <quaternion2euler+0x152>
    1862:	c3 01       	movw	r24, r6
    1864:	b2 01       	movw	r22, r4
    1866:	0e 94 a1 18 	call	0x3142	; 0x3142 <asin>
    186a:	69 83       	std	Y+1, r22	; 0x01
    186c:	7a 83       	std	Y+2, r23	; 0x02
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	a6 01       	movw	r20, r12
    1874:	95 01       	movw	r18, r10
    1876:	c6 01       	movw	r24, r12
    1878:	b5 01       	movw	r22, r10
    187a:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    187e:	29 89       	ldd	r18, Y+17	; 0x11
    1880:	3a 89       	ldd	r19, Y+18	; 0x12
    1882:	4b 89       	ldd	r20, Y+19	; 0x13
    1884:	5c 89       	ldd	r21, Y+20	; 0x14
    1886:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    188a:	9b 01       	movw	r18, r22
    188c:	ac 01       	movw	r20, r24
    188e:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    1892:	9b 01       	movw	r18, r22
    1894:	ac 01       	movw	r20, r24
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 e8       	ldi	r24, 0x80	; 128
    189c:	9f e3       	ldi	r25, 0x3F	; 63
    189e:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    18a2:	69 8b       	std	Y+17, r22	; 0x11
    18a4:	7a 8b       	std	Y+18, r23	; 0x12
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
    18a8:	9c 8b       	std	Y+20, r25	; 0x14
    18aa:	a6 01       	movw	r20, r12
    18ac:	95 01       	movw	r18, r10
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    18ba:	2b 01       	movw	r4, r22
    18bc:	3c 01       	movw	r6, r24
    18be:	29 85       	ldd	r18, Y+9	; 0x09
    18c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    18c2:	4b 85       	ldd	r20, Y+11	; 0x0b
    18c4:	5c 85       	ldd	r21, Y+12	; 0x0c
    18c6:	6d 81       	ldd	r22, Y+5	; 0x05
    18c8:	7e 81       	ldd	r23, Y+6	; 0x06
    18ca:	8f 81       	ldd	r24, Y+7	; 0x07
    18cc:	98 85       	ldd	r25, Y+8	; 0x08
    18ce:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    18d2:	9b 01       	movw	r18, r22
    18d4:	ac 01       	movw	r20, r24
    18d6:	c3 01       	movw	r24, r6
    18d8:	b2 01       	movw	r22, r4
    18da:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    18e6:	29 89       	ldd	r18, Y+17	; 0x11
    18e8:	3a 89       	ldd	r19, Y+18	; 0x12
    18ea:	4b 89       	ldd	r20, Y+19	; 0x13
    18ec:	5c 89       	ldd	r21, Y+20	; 0x14
    18ee:	0e 94 c7 18 	call	0x318e	; 0x318e <atan2>
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	44 e3       	ldi	r20, 0x34	; 52
    18f8:	53 e4       	ldi	r21, 0x43	; 67
    18fa:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    18fe:	2b ed       	ldi	r18, 0xDB	; 219
    1900:	3f e0       	ldi	r19, 0x0F	; 15
    1902:	49 e4       	ldi	r20, 0x49	; 73
    1904:	50 e4       	ldi	r21, 0x40	; 64
    1906:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    190a:	60 93 b9 20 	sts	0x20B9, r22	; 0x8020b9 <roll>
    190e:	70 93 ba 20 	sts	0x20BA, r23	; 0x8020ba <roll+0x1>
    1912:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <roll+0x2>
    1916:	90 93 bc 20 	sts	0x20BC, r25	; 0x8020bc <roll+0x3>
    191a:	2d 85       	ldd	r18, Y+13	; 0x0d
    191c:	3e 85       	ldd	r19, Y+14	; 0x0e
    191e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1920:	58 89       	ldd	r21, Y+16	; 0x10
    1922:	ca 01       	movw	r24, r20
    1924:	b9 01       	movw	r22, r18
    1926:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    192a:	4b 01       	movw	r8, r22
    192c:	5c 01       	movw	r10, r24
    192e:	29 81       	ldd	r18, Y+1	; 0x01
    1930:	3a 81       	ldd	r19, Y+2	; 0x02
    1932:	4b 81       	ldd	r20, Y+3	; 0x03
    1934:	5c 81       	ldd	r21, Y+4	; 0x04
    1936:	ca 01       	movw	r24, r20
    1938:	b9 01       	movw	r22, r18
    193a:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    193e:	9b 01       	movw	r18, r22
    1940:	ac 01       	movw	r20, r24
    1942:	c5 01       	movw	r24, r10
    1944:	b4 01       	movw	r22, r8
    1946:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    194a:	0e 94 c2 1b 	call	0x3784	; 0x3784 <sqrt>
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	44 e3       	ldi	r20, 0x34	; 52
    1954:	53 e4       	ldi	r21, 0x43	; 67
    1956:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    195a:	2b ed       	ldi	r18, 0xDB	; 219
    195c:	3f e0       	ldi	r19, 0x0F	; 15
    195e:	49 e4       	ldi	r20, 0x49	; 73
    1960:	50 e4       	ldi	r21, 0x40	; 64
    1962:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    1966:	60 93 bd 20 	sts	0x20BD, r22	; 0x8020bd <pitch>
    196a:	70 93 be 20 	sts	0x20BE, r23	; 0x8020be <pitch+0x1>
    196e:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <pitch+0x2>
    1972:	90 93 c0 20 	sts	0x20C0, r25	; 0x8020c0 <pitch+0x3>
    1976:	68 96       	adiw	r28, 0x18	; 24
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	bf 90       	pop	r11
    198e:	af 90       	pop	r10
    1990:	9f 90       	pop	r9
    1992:	8f 90       	pop	r8
    1994:	7f 90       	pop	r7
    1996:	6f 90       	pop	r6
    1998:	5f 90       	pop	r5
    199a:	4f 90       	pop	r4
    199c:	08 95       	ret

0000199e <state_check>:
    199e:	cf 92       	push	r12
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	c0 90 d3 20 	lds	r12, 0x20D3	; 0x8020d3 <velocity>
    19aa:	d0 90 d4 20 	lds	r13, 0x20D4	; 0x8020d4 <velocity+0x1>
    19ae:	e0 90 d5 20 	lds	r14, 0x20D5	; 0x8020d5 <velocity+0x2>
    19b2:	f0 90 d6 20 	lds	r15, 0x20D6	; 0x8020d6 <velocity+0x3>
    19b6:	c7 01       	movw	r24, r14
    19b8:	b6 01       	movw	r22, r12
    19ba:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    19be:	9b 01       	movw	r18, r22
    19c0:	77 23       	and	r23, r23
    19c2:	24 f4       	brge	.+8      	; 0x19cc <state_check+0x2e>
    19c4:	22 27       	eor	r18, r18
    19c6:	33 27       	eor	r19, r19
    19c8:	26 1b       	sub	r18, r22
    19ca:	37 0b       	sbc	r19, r23
    19cc:	26 30       	cpi	r18, 0x06	; 6
    19ce:	31 05       	cpc	r19, r1
    19d0:	8c f0       	brlt	.+34     	; 0x19f4 <state_check+0x56>
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	a9 01       	movw	r20, r18
    19d8:	c7 01       	movw	r24, r14
    19da:	b6 01       	movw	r22, r12
    19dc:	0e 94 1a 19 	call	0x3234	; 0x3234 <__cmpsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	24 f0       	brlt	.+8      	; 0x19ec <state_check+0x4e>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <state>
    19ea:	24 c0       	rjmp	.+72     	; 0x1a34 <state_check+0x96>
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <state>
    19f2:	20 c0       	rjmp	.+64     	; 0x1a34 <state_check+0x96>
    19f4:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <state>
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	48 e4       	ldi	r20, 0x48	; 72
    19fe:	52 e4       	ldi	r21, 0x42	; 66
    1a00:	60 91 db 20 	lds	r22, 0x20DB	; 0x8020db <alt>
    1a04:	70 91 dc 20 	lds	r23, 0x20DC	; 0x8020dc <alt+0x1>
    1a08:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <alt+0x2>
    1a0c:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <alt+0x3>
    1a10:	0e 94 04 1b 	call	0x3608	; 0x3608 <__gesf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	24 f0       	brlt	.+8      	; 0x1a20 <state_check+0x82>
    1a18:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <reset_received>
    1a1c:	88 23       	and	r24, r24
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <state_check+0x88>
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <state>
    1a26:	80 91 03 21 	lds	r24, 0x2103	; 0x802103 <released>
    1a2a:	88 23       	and	r24, r24
    1a2c:	19 f0       	breq	.+6      	; 0x1a34 <state_check+0x96>
    1a2e:	83 e0       	ldi	r24, 0x03	; 3
    1a30:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <state>
    1a34:	ff 90       	pop	r15
    1a36:	ef 90       	pop	r14
    1a38:	df 90       	pop	r13
    1a3a:	cf 90       	pop	r12
    1a3c:	08 95       	ret

00001a3e <release_servo_init>:
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	be da       	rcall	.-2692   	; 0xfc0 <sysclk_enable_module>
    1a44:	64 e0       	ldi	r22, 0x04	; 4
    1a46:	84 e0       	ldi	r24, 0x04	; 4
    1a48:	bb da       	rcall	.-2698   	; 0xfc0 <sysclk_enable_module>
    1a4a:	e0 e6       	ldi	r30, 0x60	; 96
    1a4c:	f6 e0       	ldi	r31, 0x06	; 6
    1a4e:	80 81       	ld	r24, Z
    1a50:	81 60       	ori	r24, 0x01	; 1
    1a52:	80 83       	st	Z, r24
    1a54:	e0 e0       	ldi	r30, 0x00	; 0
    1a56:	f9 e0       	ldi	r31, 0x09	; 9
    1a58:	85 e0       	ldi	r24, 0x05	; 5
    1a5a:	80 83       	st	Z, r24
    1a5c:	83 e1       	ldi	r24, 0x13	; 19
    1a5e:	81 83       	std	Z+1, r24	; 0x01
    1a60:	80 e1       	ldi	r24, 0x10	; 16
    1a62:	97 e2       	ldi	r25, 0x27	; 39
    1a64:	86 a3       	std	Z+38, r24	; 0x26
    1a66:	97 a3       	std	Z+39, r25	; 0x27
    1a68:	80 e2       	ldi	r24, 0x20	; 32
    1a6a:	93 e0       	ldi	r25, 0x03	; 3
    1a6c:	80 a7       	std	Z+40, r24	; 0x28
    1a6e:	91 a7       	std	Z+41, r25	; 0x29
    1a70:	08 95       	ret

00001a72 <servo_pid>:
    1a72:	8f 92       	push	r8
    1a74:	9f 92       	push	r9
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	7c 01       	movw	r14, r24
    1a8c:	c0 e0       	ldi	r28, 0x00	; 0
    1a8e:	d0 e0       	ldi	r29, 0x00	; 0
    1a90:	00 e0       	ldi	r16, 0x00	; 0
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	be 01       	movw	r22, r28
    1a96:	c7 01       	movw	r24, r14
    1a98:	a1 d9       	rcall	.-3262   	; 0xddc <rb16_get_nth>
    1a9a:	08 0f       	add	r16, r24
    1a9c:	19 1f       	adc	r17, r25
    1a9e:	21 96       	adiw	r28, 0x01	; 1
    1aa0:	ca 30       	cpi	r28, 0x0A	; 10
    1aa2:	d1 05       	cpc	r29, r1
    1aa4:	b9 f7       	brne	.-18     	; 0x1a94 <servo_pid+0x22>
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	c7 01       	movw	r24, r14
    1aac:	97 d9       	rcall	.-3282   	; 0xddc <rb16_get_nth>
    1aae:	ec 01       	movw	r28, r24
    1ab0:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	05 dc       	rcall	.-2038   	; 0x12c2 <diff>
    1ab8:	6b 01       	movw	r12, r22
    1aba:	7c 01       	movw	r14, r24
    1abc:	be 01       	movw	r22, r28
    1abe:	dd 0f       	add	r29, r29
    1ac0:	88 0b       	sbc	r24, r24
    1ac2:	99 0b       	sbc	r25, r25
    1ac4:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatsisf>
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	a9 01       	movw	r20, r18
    1ace:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	48 ec       	ldi	r20, 0xC8	; 200
    1ad8:	52 e4       	ldi	r21, 0x42	; 66
    1ada:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    1ade:	4b 01       	movw	r8, r22
    1ae0:	5c 01       	movw	r10, r24
    1ae2:	b8 01       	movw	r22, r16
    1ae4:	11 0f       	add	r17, r17
    1ae6:	88 0b       	sbc	r24, r24
    1ae8:	99 0b       	sbc	r25, r25
    1aea:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatsisf>
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	a9 01       	movw	r20, r18
    1af4:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	48 ec       	ldi	r20, 0xC8	; 200
    1afe:	52 e4       	ldi	r21, 0x42	; 66
    1b00:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    1b04:	9b 01       	movw	r18, r22
    1b06:	ac 01       	movw	r20, r24
    1b08:	c5 01       	movw	r24, r10
    1b0a:	b4 01       	movw	r22, r8
    1b0c:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    1b10:	4b 01       	movw	r8, r22
    1b12:	5c 01       	movw	r10, r24
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	a9 01       	movw	r20, r18
    1b1a:	c7 01       	movw	r24, r14
    1b1c:	b6 01       	movw	r22, r12
    1b1e:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1b22:	9b 01       	movw	r18, r22
    1b24:	ac 01       	movw	r20, r24
    1b26:	c5 01       	movw	r24, r10
    1b28:	b4 01       	movw	r22, r8
    1b2a:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e8       	ldi	r19, 0x80	; 128
    1b32:	4b eb       	ldi	r20, 0xBB	; 187
    1b34:	54 e4       	ldi	r21, 0x44	; 68
    1b36:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3>
    1b3a:	0e 94 c5 19 	call	0x338a	; 0x338a <__fixunssfsi>
    1b3e:	60 93 1b 20 	sts	0x201B, r22	; 0x80201b <servo_pulse>
    1b42:	70 93 1c 20 	sts	0x201C, r23	; 0x80201c <servo_pulse+0x1>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__floatunsisf>
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	4a e7       	ldi	r20, 0x7A	; 122
    1b54:	54 e4       	ldi	r21, 0x44	; 68
    1b56:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3>
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a ef       	ldi	r20, 0xFA	; 250
    1b60:	53 e4       	ldi	r21, 0x43	; 67
    1b62:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1b66:	0e 94 c5 19 	call	0x338a	; 0x338a <__fixunssfsi>
    1b6a:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1b6e:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	9f 90       	pop	r9
    1b88:	8f 90       	pop	r8
    1b8a:	08 95       	ret

00001b8c <clock_init>:
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	85 e0       	ldi	r24, 0x05	; 5
    1b90:	17 da       	rcall	.-3026   	; 0xfc0 <sysclk_enable_module>
    1b92:	e0 e0       	ldi	r30, 0x00	; 0
    1b94:	fa e0       	ldi	r31, 0x0A	; 10
    1b96:	87 e0       	ldi	r24, 0x07	; 7
    1b98:	80 83       	st	Z, r24
    1b9a:	88 e0       	ldi	r24, 0x08	; 8
    1b9c:	9d e3       	ldi	r25, 0x3D	; 61
    1b9e:	86 a3       	std	Z+38, r24	; 0x26
    1ba0:	97 a3       	std	Z+39, r25	; 0x27
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	86 83       	std	Z+6, r24	; 0x06
    1ba6:	08 95       	ret

00001ba8 <buzzer_init>:
    1ba8:	62 e0       	ldi	r22, 0x02	; 2
    1baa:	84 e0       	ldi	r24, 0x04	; 4
    1bac:	09 da       	rcall	.-3054   	; 0xfc0 <sysclk_enable_module>
    1bae:	64 e0       	ldi	r22, 0x04	; 4
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
    1bb2:	06 da       	rcall	.-3060   	; 0xfc0 <sysclk_enable_module>
    1bb4:	e0 e6       	ldi	r30, 0x60	; 96
    1bb6:	f6 e0       	ldi	r31, 0x06	; 6
    1bb8:	80 81       	ld	r24, Z
    1bba:	80 61       	ori	r24, 0x10	; 16
    1bbc:	80 83       	st	Z, r24
    1bbe:	e0 e4       	ldi	r30, 0x40	; 64
    1bc0:	f9 e0       	ldi	r31, 0x09	; 9
    1bc2:	85 e0       	ldi	r24, 0x05	; 5
    1bc4:	80 83       	st	Z, r24
    1bc6:	83 e1       	ldi	r24, 0x13	; 19
    1bc8:	81 83       	std	Z+1, r24	; 0x01
    1bca:	88 eb       	ldi	r24, 0xB8	; 184
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	86 a3       	std	Z+38, r24	; 0x26
    1bd0:	97 a3       	std	Z+39, r25	; 0x27
    1bd2:	8c e5       	ldi	r24, 0x5C	; 92
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	80 a7       	std	Z+40, r24	; 0x28
    1bd8:	91 a7       	std	Z+41, r25	; 0x29
    1bda:	08 95       	ret

00001bdc <cali_alt>:
    1bdc:	80 91 e3 20 	lds	r24, 0x20E3	; 0x8020e3 <press>
    1be0:	90 91 e4 20 	lds	r25, 0x20E4	; 0x8020e4 <press+0x1>
    1be4:	a0 91 e5 20 	lds	r26, 0x20E5	; 0x8020e5 <press+0x2>
    1be8:	b0 91 e6 20 	lds	r27, 0x20E6	; 0x8020e6 <press+0x3>
    1bec:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p>
    1bf0:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x1>
    1bf4:	a0 93 2f 20 	sts	0x202F, r26	; 0x80202f <ground_p+0x2>
    1bf8:	b0 93 30 20 	sts	0x2030, r27	; 0x802030 <ground_p+0x3>
    1bfc:	0e 94 70 05 	call	0xae0	; 0xae0 <thermistor_read>
    1c00:	83 e3       	ldi	r24, 0x33	; 51
    1c02:	93 e1       	ldi	r25, 0x13	; 19
    1c04:	a0 e9       	ldi	r26, 0x90	; 144
    1c06:	b3 e4       	ldi	r27, 0x43	; 67
    1c08:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <ground_t>
    1c0c:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <ground_t+0x1>
    1c10:	a0 93 2b 20 	sts	0x202B, r26	; 0x80202b <ground_t+0x2>
    1c14:	b0 93 2c 20 	sts	0x202C, r27	; 0x80202c <ground_t+0x3>
    1c18:	08 95       	ret

00001c1a <send_gps>:
    1c1a:	8f 92       	push	r8
    1c1c:	9f 92       	push	r9
    1c1e:	af 92       	push	r10
    1c20:	bf 92       	push	r11
    1c22:	cf 92       	push	r12
    1c24:	df 92       	push	r13
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	c6 54       	subi	r28, 0x46	; 70
    1c38:	d1 09       	sbc	r29, r1
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	60 91 c7 20 	lds	r22, 0x20C7	; 0x8020c7 <gps_long>
    1c42:	70 91 c8 20 	lds	r23, 0x20C8	; 0x8020c8 <gps_long+0x1>
    1c46:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <gps_long+0x2>
    1c4a:	90 91 ca 20 	lds	r25, 0x20CA	; 0x8020ca <gps_long+0x3>
    1c4e:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1c52:	16 2f       	mov	r17, r22
    1c54:	07 2f       	mov	r16, r23
    1c56:	c0 90 cb 20 	lds	r12, 0x20CB	; 0x8020cb <gps_lat>
    1c5a:	d0 90 cc 20 	lds	r13, 0x20CC	; 0x8020cc <gps_lat+0x1>
    1c5e:	e0 90 cd 20 	lds	r14, 0x20CD	; 0x8020cd <gps_lat+0x2>
    1c62:	f0 90 ce 20 	lds	r15, 0x20CE	; 0x8020ce <gps_lat+0x3>
    1c66:	a6 2f       	mov	r26, r22
    1c68:	b7 2f       	mov	r27, r23
    1c6a:	bb 23       	and	r27, r27
    1c6c:	1c f4       	brge	.+6      	; 0x1c74 <send_gps+0x5a>
    1c6e:	b1 95       	neg	r27
    1c70:	a1 95       	neg	r26
    1c72:	b1 09       	sbc	r27, r1
    1c74:	20 e4       	ldi	r18, 0x40	; 64
    1c76:	32 e4       	ldi	r19, 0x42	; 66
    1c78:	4f e0       	ldi	r20, 0x0F	; 15
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__mulshisi3>
    1c80:	0f 2e       	mov	r0, r31
    1c82:	f0 e4       	ldi	r31, 0x40	; 64
    1c84:	8f 2e       	mov	r8, r31
    1c86:	f2 e4       	ldi	r31, 0x42	; 66
    1c88:	9f 2e       	mov	r9, r31
    1c8a:	ff e0       	ldi	r31, 0x0F	; 15
    1c8c:	af 2e       	mov	r10, r31
    1c8e:	b1 2c       	mov	r11, r1
    1c90:	f0 2d       	mov	r31, r0
    1c92:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    1c96:	9f 93       	push	r25
    1c98:	8f 93       	push	r24
    1c9a:	7f 93       	push	r23
    1c9c:	6f 93       	push	r22
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	34 e2       	ldi	r19, 0x24	; 36
    1ca6:	44 e7       	ldi	r20, 0x74	; 116
    1ca8:	59 e4       	ldi	r21, 0x49	; 73
    1caa:	c7 01       	movw	r24, r14
    1cac:	b6 01       	movw	r22, r12
    1cae:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1cb2:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1cb6:	a5 01       	movw	r20, r10
    1cb8:	94 01       	movw	r18, r8
    1cba:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    1cbe:	9f 93       	push	r25
    1cc0:	8f 93       	push	r24
    1cc2:	7f 93       	push	r23
    1cc4:	6f 93       	push	r22
    1cc6:	c7 01       	movw	r24, r14
    1cc8:	b6 01       	movw	r22, r12
    1cca:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1cce:	7f 93       	push	r23
    1cd0:	6f 93       	push	r22
    1cd2:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <gps_msg+0x1>
    1cd6:	8f 93       	push	r24
    1cd8:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <gps_msg>
    1cdc:	8f 93       	push	r24
    1cde:	8e 01       	movw	r16, r28
    1ce0:	0f 5f       	subi	r16, 0xFF	; 255
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	1f 93       	push	r17
    1ce6:	0f 93       	push	r16
    1ce8:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <sprintf>
    1cec:	1f 93       	push	r17
    1cee:	0f 93       	push	r16
    1cf0:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <printf>
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	ca 5b       	subi	r28, 0xBA	; 186
    1cfa:	df 4f       	sbci	r29, 0xFF	; 255
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	08 95       	ret

00001d1a <packet>:
    1d1a:	2f 92       	push	r2
    1d1c:	3f 92       	push	r3
    1d1e:	4f 92       	push	r4
    1d20:	5f 92       	push	r5
    1d22:	6f 92       	push	r6
    1d24:	7f 92       	push	r7
    1d26:	8f 92       	push	r8
    1d28:	9f 92       	push	r9
    1d2a:	af 92       	push	r10
    1d2c:	bf 92       	push	r11
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	00 91 e7 20 	lds	r16, 0x20E7	; 0x8020e7 <packets>
    1d42:	10 91 e8 20 	lds	r17, 0x20E8	; 0x8020e8 <packets+0x1>
    1d46:	0f 5f       	subi	r16, 0xFF	; 255
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	00 93 e7 20 	sts	0x20E7, r16	; 0x8020e7 <packets>
    1d4e:	10 93 e8 20 	sts	0x20E8, r17	; 0x8020e8 <packets+0x1>
    1d52:	60 91 c3 20 	lds	r22, 0x20C3	; 0x8020c3 <gps_alt>
    1d56:	70 91 c4 20 	lds	r23, 0x20C4	; 0x8020c4 <gps_alt+0x1>
    1d5a:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <gps_alt+0x2>
    1d5e:	90 91 c6 20 	lds	r25, 0x20C6	; 0x8020c6 <gps_alt+0x3>
    1d62:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1d66:	36 2e       	mov	r3, r22
    1d68:	27 2e       	mov	r2, r23
    1d6a:	40 90 c7 20 	lds	r4, 0x20C7	; 0x8020c7 <gps_long>
    1d6e:	50 90 c8 20 	lds	r5, 0x20C8	; 0x8020c8 <gps_long+0x1>
    1d72:	60 90 c9 20 	lds	r6, 0x20C9	; 0x8020c9 <gps_long+0x2>
    1d76:	70 90 ca 20 	lds	r7, 0x20CA	; 0x8020ca <gps_long+0x3>
    1d7a:	80 90 cb 20 	lds	r8, 0x20CB	; 0x8020cb <gps_lat>
    1d7e:	90 90 cc 20 	lds	r9, 0x20CC	; 0x8020cc <gps_lat+0x1>
    1d82:	a0 90 cd 20 	lds	r10, 0x20CD	; 0x8020cd <gps_lat+0x2>
    1d86:	b0 90 ce 20 	lds	r11, 0x20CE	; 0x8020ce <gps_lat+0x3>
    1d8a:	60 91 cf 20 	lds	r22, 0x20CF	; 0x8020cf <gps_t>
    1d8e:	70 91 d0 20 	lds	r23, 0x20D0	; 0x8020d0 <gps_t+0x1>
    1d92:	80 91 d1 20 	lds	r24, 0x20D1	; 0x8020d1 <gps_t+0x2>
    1d96:	90 91 d2 20 	lds	r25, 0x20D2	; 0x8020d2 <gps_t+0x3>
    1d9a:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1d9e:	6b 01       	movw	r12, r22
    1da0:	7c 01       	movw	r14, r24
    1da2:	c0 91 eb 20 	lds	r28, 0x20EB	; 0x8020eb <timer>
    1da6:	d0 91 ec 20 	lds	r29, 0x20EC	; 0x8020ec <timer+0x1>
    1daa:	60 91 b1 20 	lds	r22, 0x20B1	; 0x8020b1 <angle>
    1dae:	70 91 b2 20 	lds	r23, 0x20B2	; 0x8020b2 <angle+0x1>
    1db2:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <angle+0x2>
    1db6:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <angle+0x3>
    1dba:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1dbe:	7f 93       	push	r23
    1dc0:	6f 93       	push	r22
    1dc2:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <state>
    1dc6:	1f 92       	push	r1
    1dc8:	8f 93       	push	r24
    1dca:	60 91 b5 20 	lds	r22, 0x20B5	; 0x8020b5 <rpm>
    1dce:	70 91 b6 20 	lds	r23, 0x20B6	; 0x8020b6 <rpm+0x1>
    1dd2:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <rpm+0x2>
    1dd6:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <rpm+0x3>
    1dda:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1dde:	7f 93       	push	r23
    1de0:	6f 93       	push	r22
    1de2:	60 91 b9 20 	lds	r22, 0x20B9	; 0x8020b9 <roll>
    1de6:	70 91 ba 20 	lds	r23, 0x20BA	; 0x8020ba <roll+0x1>
    1dea:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <roll+0x2>
    1dee:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <roll+0x3>
    1df2:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1df6:	7f 93       	push	r23
    1df8:	6f 93       	push	r22
    1dfa:	60 91 bd 20 	lds	r22, 0x20BD	; 0x8020bd <pitch>
    1dfe:	70 91 be 20 	lds	r23, 0x20BE	; 0x8020be <pitch+0x1>
    1e02:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <pitch+0x2>
    1e06:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <pitch+0x3>
    1e0a:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1e0e:	7f 93       	push	r23
    1e10:	6f 93       	push	r22
    1e12:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <gps_sats+0x1>
    1e16:	8f 93       	push	r24
    1e18:	80 91 c1 20 	lds	r24, 0x20C1	; 0x8020c1 <gps_sats>
    1e1c:	8f 93       	push	r24
    1e1e:	83 2d       	mov	r24, r3
    1e20:	92 2d       	mov	r25, r2
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	9c 01       	movw	r18, r24
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	22 0f       	add	r18, r18
    1e2e:	33 1f       	adc	r19, r19
    1e30:	82 0f       	add	r24, r18
    1e32:	93 1f       	adc	r25, r19
    1e34:	6a e0       	ldi	r22, 0x0A	; 10
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__divmodhi4>
    1e3c:	9f 93       	push	r25
    1e3e:	8f 93       	push	r24
    1e40:	2f 92       	push	r2
    1e42:	3f 92       	push	r3
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	34 e2       	ldi	r19, 0x24	; 36
    1e48:	44 e7       	ldi	r20, 0x74	; 116
    1e4a:	59 e4       	ldi	r21, 0x49	; 73
    1e4c:	c3 01       	movw	r24, r6
    1e4e:	b2 01       	movw	r22, r4
    1e50:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1e54:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1e58:	20 e4       	ldi	r18, 0x40	; 64
    1e5a:	32 e4       	ldi	r19, 0x42	; 66
    1e5c:	4f e0       	ldi	r20, 0x0F	; 15
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    1e64:	9b 01       	movw	r18, r22
    1e66:	77 23       	and	r23, r23
    1e68:	24 f4       	brge	.+8      	; 0x1e72 <packet+0x158>
    1e6a:	22 27       	eor	r18, r18
    1e6c:	33 27       	eor	r19, r19
    1e6e:	26 1b       	sub	r18, r22
    1e70:	37 0b       	sbc	r19, r23
    1e72:	c9 01       	movw	r24, r18
    1e74:	33 0f       	add	r19, r19
    1e76:	aa 0b       	sbc	r26, r26
    1e78:	bb 0b       	sbc	r27, r27
    1e7a:	bf 93       	push	r27
    1e7c:	af 93       	push	r26
    1e7e:	9f 93       	push	r25
    1e80:	8f 93       	push	r24
    1e82:	c3 01       	movw	r24, r6
    1e84:	b2 01       	movw	r22, r4
    1e86:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1e8a:	7f 93       	push	r23
    1e8c:	6f 93       	push	r22
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	34 e2       	ldi	r19, 0x24	; 36
    1e92:	44 e7       	ldi	r20, 0x74	; 116
    1e94:	59 e4       	ldi	r21, 0x49	; 73
    1e96:	c5 01       	movw	r24, r10
    1e98:	b4 01       	movw	r22, r8
    1e9a:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    1e9e:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1ea2:	20 e4       	ldi	r18, 0x40	; 64
    1ea4:	32 e4       	ldi	r19, 0x42	; 66
    1ea6:	4f e0       	ldi	r20, 0x0F	; 15
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    1eae:	9f 93       	push	r25
    1eb0:	8f 93       	push	r24
    1eb2:	7f 93       	push	r23
    1eb4:	6f 93       	push	r22
    1eb6:	c5 01       	movw	r24, r10
    1eb8:	b4 01       	movw	r22, r8
    1eba:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1ebe:	7f 93       	push	r23
    1ec0:	6f 93       	push	r22
    1ec2:	0f 2e       	mov	r0, r31
    1ec4:	f4 e6       	ldi	r31, 0x64	; 100
    1ec6:	8f 2e       	mov	r8, r31
    1ec8:	91 2c       	mov	r9, r1
    1eca:	a1 2c       	mov	r10, r1
    1ecc:	b1 2c       	mov	r11, r1
    1ece:	f0 2d       	mov	r31, r0
    1ed0:	c7 01       	movw	r24, r14
    1ed2:	b6 01       	movw	r22, r12
    1ed4:	a5 01       	movw	r20, r10
    1ed6:	94 01       	movw	r18, r8
    1ed8:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    1edc:	7f 93       	push	r23
    1ede:	6f 93       	push	r22
    1ee0:	c7 01       	movw	r24, r14
    1ee2:	b6 01       	movw	r22, r12
    1ee4:	20 e1       	ldi	r18, 0x10	; 16
    1ee6:	37 e2       	ldi	r19, 0x27	; 39
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    1ef0:	f2 2e       	mov	r15, r18
    1ef2:	e3 2e       	mov	r14, r19
    1ef4:	a5 01       	movw	r20, r10
    1ef6:	94 01       	movw	r18, r8
    1ef8:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    1efc:	3f 93       	push	r19
    1efe:	2f 93       	push	r18
    1f00:	ef 92       	push	r14
    1f02:	ff 92       	push	r15
    1f04:	60 91 d7 20 	lds	r22, 0x20D7	; 0x8020d7 <volt>
    1f08:	70 91 d8 20 	lds	r23, 0x20D8	; 0x8020d8 <volt+0x1>
    1f0c:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <volt+0x2>
    1f10:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <volt+0x3>
    1f14:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1f18:	7f 93       	push	r23
    1f1a:	6f 93       	push	r22
    1f1c:	23 e3       	ldi	r18, 0x33	; 51
    1f1e:	33 e9       	ldi	r19, 0x93	; 147
    1f20:	48 e8       	ldi	r20, 0x88	; 136
    1f22:	53 e4       	ldi	r21, 0x43	; 67
    1f24:	60 91 df 20 	lds	r22, 0x20DF	; 0x8020df <temp>
    1f28:	70 91 e0 20 	lds	r23, 0x20E0	; 0x8020e0 <temp+0x1>
    1f2c:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <temp+0x2>
    1f30:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <temp+0x3>
    1f34:	0e 94 3c 18 	call	0x3078	; 0x3078 <__subsf3>
    1f38:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1f3c:	7f 93       	push	r23
    1f3e:	6f 93       	push	r22
    1f40:	60 91 e3 20 	lds	r22, 0x20E3	; 0x8020e3 <press>
    1f44:	70 91 e4 20 	lds	r23, 0x20E4	; 0x8020e4 <press+0x1>
    1f48:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <press+0x2>
    1f4c:	90 91 e6 20 	lds	r25, 0x20E6	; 0x8020e6 <press+0x3>
    1f50:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1f54:	9f 93       	push	r25
    1f56:	8f 93       	push	r24
    1f58:	7f 93       	push	r23
    1f5a:	6f 93       	push	r22
    1f5c:	60 91 db 20 	lds	r22, 0x20DB	; 0x8020db <alt>
    1f60:	70 91 dc 20 	lds	r23, 0x20DC	; 0x8020dc <alt+0x1>
    1f64:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <alt+0x2>
    1f68:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <alt+0x3>
    1f6c:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fixsfsi>
    1f70:	7f 93       	push	r23
    1f72:	6f 93       	push	r22
    1f74:	1f 93       	push	r17
    1f76:	0f 93       	push	r16
    1f78:	9e 01       	movw	r18, r28
    1f7a:	ad ec       	ldi	r26, 0xCD	; 205
    1f7c:	bc ec       	ldi	r27, 0xCC	; 204
    1f7e:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__umulhisi3>
    1f82:	96 95       	lsr	r25
    1f84:	87 95       	ror	r24
    1f86:	96 95       	lsr	r25
    1f88:	87 95       	ror	r24
    1f8a:	96 95       	lsr	r25
    1f8c:	87 95       	ror	r24
    1f8e:	9c 01       	movw	r18, r24
    1f90:	22 0f       	add	r18, r18
    1f92:	33 1f       	adc	r19, r19
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	82 0f       	add	r24, r18
    1fa2:	93 1f       	adc	r25, r19
    1fa4:	9e 01       	movw	r18, r28
    1fa6:	28 1b       	sub	r18, r24
    1fa8:	39 0b       	sbc	r19, r25
    1faa:	c9 01       	movw	r24, r18
    1fac:	9f 93       	push	r25
    1fae:	2f 93       	push	r18
    1fb0:	9e 01       	movw	r18, r28
    1fb2:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__umulhisi3>
    1fb6:	96 95       	lsr	r25
    1fb8:	87 95       	ror	r24
    1fba:	96 95       	lsr	r25
    1fbc:	87 95       	ror	r24
    1fbe:	96 95       	lsr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	9f 93       	push	r25
    1fc4:	8f 93       	push	r24
    1fc6:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    1fca:	8f 93       	push	r24
    1fcc:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    1fd0:	8f 93       	push	r24
    1fd2:	c1 e2       	ldi	r28, 0x21	; 33
    1fd4:	d1 e2       	ldi	r29, 0x21	; 33
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <sprintf>
    1fde:	2d b7       	in	r18, 0x3d	; 61
    1fe0:	3e b7       	in	r19, 0x3e	; 62
    1fe2:	2a 5c       	subi	r18, 0xCA	; 202
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	2d bf       	out	0x3d, r18	; 61
    1fe8:	3e bf       	out	0x3e, r19	; 62
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <printf>
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	ff 90       	pop	r15
    2000:	ef 90       	pop	r14
    2002:	df 90       	pop	r13
    2004:	cf 90       	pop	r12
    2006:	bf 90       	pop	r11
    2008:	af 90       	pop	r10
    200a:	9f 90       	pop	r9
    200c:	8f 90       	pop	r8
    200e:	7f 90       	pop	r7
    2010:	6f 90       	pop	r6
    2012:	5f 90       	pop	r5
    2014:	4f 90       	pop	r4
    2016:	3f 90       	pop	r3
    2018:	2f 90       	pop	r2
    201a:	08 95       	ret

0000201c <eeprom_write_const>:
    201c:	5f 92       	push	r5
    201e:	6f 92       	push	r6
    2020:	7f 92       	push	r7
    2022:	8f 92       	push	r8
    2024:	9f 92       	push	r9
    2026:	af 92       	push	r10
    2028:	bf 92       	push	r11
    202a:	cf 92       	push	r12
    202c:	df 92       	push	r13
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	a0 97       	sbiw	r28, 0x20	; 32
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    2048:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    204c:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    2050:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    2054:	0e 94 8b 19 	call	0x3316	; 0x3316 <__fixunssfdi>
    2058:	12 2f       	mov	r17, r18
    205a:	63 2e       	mov	r6, r19
    205c:	74 2e       	mov	r7, r20
    205e:	85 2e       	mov	r8, r21
    2060:	96 2e       	mov	r9, r22
    2062:	a7 2e       	mov	r10, r23
    2064:	b8 2e       	mov	r11, r24
    2066:	c9 2e       	mov	r12, r25
    2068:	60 91 29 20 	lds	r22, 0x2029	; 0x802029 <ground_t>
    206c:	70 91 2a 20 	lds	r23, 0x202A	; 0x80202a <ground_t+0x1>
    2070:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <ground_t+0x2>
    2074:	90 91 2c 20 	lds	r25, 0x202C	; 0x80202c <ground_t+0x3>
    2078:	0e 94 8b 19 	call	0x3316	; 0x3316 <__fixunssfdi>
    207c:	e2 2f       	mov	r30, r18
    207e:	53 2e       	mov	r5, r19
    2080:	d4 2e       	mov	r13, r20
    2082:	e5 2e       	mov	r14, r21
    2084:	f6 2e       	mov	r15, r22
    2086:	b7 2f       	mov	r27, r23
    2088:	a8 2f       	mov	r26, r24
    208a:	f9 2f       	mov	r31, r25
    208c:	19 83       	std	Y+1, r17	; 0x01
    208e:	21 2f       	mov	r18, r17
    2090:	36 2d       	mov	r19, r6
    2092:	47 2d       	mov	r20, r7
    2094:	58 2d       	mov	r21, r8
    2096:	69 2d       	mov	r22, r9
    2098:	7a 2d       	mov	r23, r10
    209a:	8b 2d       	mov	r24, r11
    209c:	9c 2d       	mov	r25, r12
    209e:	08 e0       	ldi	r16, 0x08	; 8
    20a0:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    20a4:	2a 83       	std	Y+2, r18	; 0x02
    20a6:	21 2f       	mov	r18, r17
    20a8:	36 2d       	mov	r19, r6
    20aa:	47 2d       	mov	r20, r7
    20ac:	58 2d       	mov	r21, r8
    20ae:	69 2d       	mov	r22, r9
    20b0:	7a 2d       	mov	r23, r10
    20b2:	8b 2d       	mov	r24, r11
    20b4:	9c 2d       	mov	r25, r12
    20b6:	00 e1       	ldi	r16, 0x10	; 16
    20b8:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    20bc:	2b 83       	std	Y+3, r18	; 0x03
    20be:	21 2f       	mov	r18, r17
    20c0:	36 2d       	mov	r19, r6
    20c2:	47 2d       	mov	r20, r7
    20c4:	58 2d       	mov	r21, r8
    20c6:	69 2d       	mov	r22, r9
    20c8:	7a 2d       	mov	r23, r10
    20ca:	8b 2d       	mov	r24, r11
    20cc:	9c 2d       	mov	r25, r12
    20ce:	08 e1       	ldi	r16, 0x18	; 24
    20d0:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    20d4:	2c 83       	std	Y+4, r18	; 0x04
    20d6:	21 2f       	mov	r18, r17
    20d8:	36 2d       	mov	r19, r6
    20da:	47 2d       	mov	r20, r7
    20dc:	58 2d       	mov	r21, r8
    20de:	69 2d       	mov	r22, r9
    20e0:	7a 2d       	mov	r23, r10
    20e2:	8b 2d       	mov	r24, r11
    20e4:	9c 2d       	mov	r25, r12
    20e6:	00 e2       	ldi	r16, 0x20	; 32
    20e8:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    20ec:	2d 83       	std	Y+5, r18	; 0x05
    20ee:	21 2f       	mov	r18, r17
    20f0:	36 2d       	mov	r19, r6
    20f2:	47 2d       	mov	r20, r7
    20f4:	58 2d       	mov	r21, r8
    20f6:	69 2d       	mov	r22, r9
    20f8:	7a 2d       	mov	r23, r10
    20fa:	8b 2d       	mov	r24, r11
    20fc:	9c 2d       	mov	r25, r12
    20fe:	08 e2       	ldi	r16, 0x28	; 40
    2100:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    2104:	2e 83       	std	Y+6, r18	; 0x06
    2106:	21 2f       	mov	r18, r17
    2108:	36 2d       	mov	r19, r6
    210a:	47 2d       	mov	r20, r7
    210c:	58 2d       	mov	r21, r8
    210e:	69 2d       	mov	r22, r9
    2110:	7a 2d       	mov	r23, r10
    2112:	8b 2d       	mov	r24, r11
    2114:	9c 2d       	mov	r25, r12
    2116:	00 e3       	ldi	r16, 0x30	; 48
    2118:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    211c:	2f 83       	std	Y+7, r18	; 0x07
    211e:	21 2f       	mov	r18, r17
    2120:	36 2d       	mov	r19, r6
    2122:	47 2d       	mov	r20, r7
    2124:	58 2d       	mov	r21, r8
    2126:	69 2d       	mov	r22, r9
    2128:	7a 2d       	mov	r23, r10
    212a:	8b 2d       	mov	r24, r11
    212c:	9c 2d       	mov	r25, r12
    212e:	08 e3       	ldi	r16, 0x38	; 56
    2130:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    2134:	28 87       	std	Y+8, r18	; 0x08
    2136:	e9 87       	std	Y+9, r30	; 0x09
    2138:	2e 2f       	mov	r18, r30
    213a:	35 2d       	mov	r19, r5
    213c:	4d 2d       	mov	r20, r13
    213e:	5e 2d       	mov	r21, r14
    2140:	6f 2d       	mov	r22, r15
    2142:	7b 2f       	mov	r23, r27
    2144:	8a 2f       	mov	r24, r26
    2146:	9f 2f       	mov	r25, r31
    2148:	08 e0       	ldi	r16, 0x08	; 8
    214a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    214e:	2a 87       	std	Y+10, r18	; 0x0a
    2150:	2e 2f       	mov	r18, r30
    2152:	35 2d       	mov	r19, r5
    2154:	4d 2d       	mov	r20, r13
    2156:	5e 2d       	mov	r21, r14
    2158:	6f 2d       	mov	r22, r15
    215a:	7b 2f       	mov	r23, r27
    215c:	8a 2f       	mov	r24, r26
    215e:	9f 2f       	mov	r25, r31
    2160:	00 e1       	ldi	r16, 0x10	; 16
    2162:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    2166:	2b 87       	std	Y+11, r18	; 0x0b
    2168:	2e 2f       	mov	r18, r30
    216a:	35 2d       	mov	r19, r5
    216c:	4d 2d       	mov	r20, r13
    216e:	5e 2d       	mov	r21, r14
    2170:	6f 2d       	mov	r22, r15
    2172:	7b 2f       	mov	r23, r27
    2174:	8a 2f       	mov	r24, r26
    2176:	9f 2f       	mov	r25, r31
    2178:	08 e1       	ldi	r16, 0x18	; 24
    217a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    217e:	2c 87       	std	Y+12, r18	; 0x0c
    2180:	2e 2f       	mov	r18, r30
    2182:	35 2d       	mov	r19, r5
    2184:	4d 2d       	mov	r20, r13
    2186:	5e 2d       	mov	r21, r14
    2188:	6f 2d       	mov	r22, r15
    218a:	7b 2f       	mov	r23, r27
    218c:	8a 2f       	mov	r24, r26
    218e:	9f 2f       	mov	r25, r31
    2190:	00 e2       	ldi	r16, 0x20	; 32
    2192:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    2196:	2d 87       	std	Y+13, r18	; 0x0d
    2198:	2e 2f       	mov	r18, r30
    219a:	35 2d       	mov	r19, r5
    219c:	4d 2d       	mov	r20, r13
    219e:	5e 2d       	mov	r21, r14
    21a0:	6f 2d       	mov	r22, r15
    21a2:	7b 2f       	mov	r23, r27
    21a4:	8a 2f       	mov	r24, r26
    21a6:	9f 2f       	mov	r25, r31
    21a8:	08 e2       	ldi	r16, 0x28	; 40
    21aa:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    21ae:	2e 87       	std	Y+14, r18	; 0x0e
    21b0:	2e 2f       	mov	r18, r30
    21b2:	35 2d       	mov	r19, r5
    21b4:	4d 2d       	mov	r20, r13
    21b6:	5e 2d       	mov	r21, r14
    21b8:	6f 2d       	mov	r22, r15
    21ba:	7b 2f       	mov	r23, r27
    21bc:	8a 2f       	mov	r24, r26
    21be:	9f 2f       	mov	r25, r31
    21c0:	00 e3       	ldi	r16, 0x30	; 48
    21c2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    21c6:	2f 87       	std	Y+15, r18	; 0x0f
    21c8:	2e 2f       	mov	r18, r30
    21ca:	35 2d       	mov	r19, r5
    21cc:	4d 2d       	mov	r20, r13
    21ce:	5e 2d       	mov	r21, r14
    21d0:	6f 2d       	mov	r22, r15
    21d2:	7b 2f       	mov	r23, r27
    21d4:	8a 2f       	mov	r24, r26
    21d6:	9f 2f       	mov	r25, r31
    21d8:	08 e3       	ldi	r16, 0x38	; 56
    21da:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__lshrdi3>
    21de:	28 8b       	std	Y+16, r18	; 0x10
    21e0:	80 e1       	ldi	r24, 0x10	; 16
    21e2:	e1 e3       	ldi	r30, 0x31	; 49
    21e4:	f0 e2       	ldi	r31, 0x20	; 32
    21e6:	de 01       	movw	r26, r28
    21e8:	51 96       	adiw	r26, 0x11	; 17
    21ea:	01 90       	ld	r0, Z+
    21ec:	0d 92       	st	X+, r0
    21ee:	8a 95       	dec	r24
    21f0:	e1 f7       	brne	.-8      	; 0x21ea <eeprom_write_const+0x1ce>
    21f2:	83 e3       	ldi	r24, 0x33	; 51
    21f4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    21f8:	fe 01       	movw	r30, r28
    21fa:	71 96       	adiw	r30, 0x11	; 17
    21fc:	ce 01       	movw	r24, r28
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	ae 01       	movw	r20, r28
    2202:	4f 5d       	subi	r20, 0xDF	; 223
    2204:	5f 4f       	sbci	r21, 0xFF	; 255
    2206:	60 ec       	ldi	r22, 0xC0	; 192
    2208:	71 e0       	ldi	r23, 0x01	; 1
    220a:	21 91       	ld	r18, Z+
    220c:	db 01       	movw	r26, r22
    220e:	2c 93       	st	X, r18
    2210:	dc 01       	movw	r26, r24
    2212:	2d 91       	ld	r18, X+
    2214:	cd 01       	movw	r24, r26
    2216:	db 01       	movw	r26, r22
    2218:	14 96       	adiw	r26, 0x04	; 4
    221a:	2c 93       	st	X, r18
    221c:	e4 17       	cp	r30, r20
    221e:	f5 07       	cpc	r31, r21
    2220:	a1 f7       	brne	.-24     	; 0x220a <eeprom_write_const+0x1ee>
    2222:	e0 ec       	ldi	r30, 0xC0	; 192
    2224:	f1 e0       	ldi	r31, 0x01	; 1
    2226:	85 e3       	ldi	r24, 0x35	; 53
    2228:	82 87       	std	Z+10, r24	; 0x0a
    222a:	10 82       	st	Z, r1
    222c:	80 e1       	ldi	r24, 0x10	; 16
    222e:	81 83       	std	Z+1, r24	; 0x01
    2230:	88 ed       	ldi	r24, 0xD8	; 216
    2232:	84 bf       	out	0x34, r24	; 52
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	83 87       	std	Z+11, r24	; 0x0b
    2238:	87 85       	ldd	r24, Z+15	; 0x0f
    223a:	88 23       	and	r24, r24
    223c:	ec f3       	brlt	.-6      	; 0x2238 <eeprom_write_const+0x21c>
    223e:	a0 96       	adiw	r28, 0x20	; 32
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	df 90       	pop	r13
    2252:	cf 90       	pop	r12
    2254:	bf 90       	pop	r11
    2256:	af 90       	pop	r10
    2258:	9f 90       	pop	r9
    225a:	8f 90       	pop	r8
    225c:	7f 90       	pop	r7
    225e:	6f 90       	pop	r6
    2260:	5f 90       	pop	r5
    2262:	08 95       	ret

00002264 <system_init>:
    2264:	0e 94 ab 07 	call	0xf56	; 0xf56 <sysclk_init>
    2268:	6b ea       	ldi	r22, 0xAB	; 171
    226a:	79 e2       	ldi	r23, 0x29	; 41
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 06 08 	call	0x100c	; 0x100c <__portable_avr_delay_cycles>
    2274:	78 94       	sei
    2276:	8c eb       	ldi	r24, 0xBC	; 188
    2278:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    227c:	87 e0       	ldi	r24, 0x07	; 7
    227e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2282:	0e 94 5f 06 	call	0xcbe	; 0xcbe <data_terminal_init>
    2286:	6b ea       	ldi	r22, 0xAB	; 171
    2288:	70 eb       	ldi	r23, 0xB0	; 176
    228a:	88 e2       	ldi	r24, 0x28	; 40
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 06 08 	call	0x100c	; 0x100c <__portable_avr_delay_cycles>
    2292:	80 e2       	ldi	r24, 0x20	; 32
    2294:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
    2298:	0e 94 37 08 	call	0x106e	; 0x106e <gps_init>
    229c:	66 e5       	ldi	r22, 0x56	; 86
    229e:	73 e2       	ldi	r23, 0x23	; 35
    22a0:	88 e0       	ldi	r24, 0x08	; 8
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 06 08 	call	0x100c	; 0x100c <__portable_avr_delay_cycles>
    22a8:	ca db       	rcall	.-2156   	; 0x1a3e <release_servo_init>
    22aa:	0e 94 46 05 	call	0xa8c	; 0xa8c <thermistor_init>
    22ae:	0e 94 30 06 	call	0xc60	; 0xc60 <spi_init>
    22b2:	0e 94 11 08 	call	0x1022	; 0x1022 <pressure_init>
    22b6:	0e 94 ca 04 	call	0x994	; 0x994 <bno085_init>
    22ba:	0e 94 39 05 	call	0xa72	; 0xa72 <cam_init>
    22be:	66 dc       	rcall	.-1844   	; 0x1b8c <clock_init>
    22c0:	66 e5       	ldi	r22, 0x56	; 86
    22c2:	70 ed       	ldi	r23, 0xD0	; 208
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 94 06 08 	call	0x100c	; 0x100c <__portable_avr_delay_cycles>
    22cc:	68 db       	rcall	.-2352   	; 0x199e <state_check>
    22ce:	0e 94 4b 08 	call	0x1096	; 0x1096 <get_pressure>
    22d2:	60 93 2d 20 	sts	0x202D, r22	; 0x80202d <ground_p>
    22d6:	70 93 2e 20 	sts	0x202E, r23	; 0x80202e <ground_p+0x1>
    22da:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <ground_p+0x2>
    22de:	90 93 30 20 	sts	0x2030, r25	; 0x802030 <ground_p+0x3>
    22e2:	0e 94 70 05 	call	0xae0	; 0xae0 <thermistor_read>
    22e6:	83 e3       	ldi	r24, 0x33	; 51
    22e8:	93 e1       	ldi	r25, 0x13	; 19
    22ea:	a0 e9       	ldi	r26, 0x90	; 144
    22ec:	b3 e4       	ldi	r27, 0x43	; 67
    22ee:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <ground_t>
    22f2:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <ground_t+0x1>
    22f6:	a0 93 2b 20 	sts	0x202B, r26	; 0x80202b <ground_t+0x2>
    22fa:	b0 93 2c 20 	sts	0x202C, r27	; 0x80202c <ground_t+0x3>
    22fe:	8e ce       	rjmp	.-740    	; 0x201c <eeprom_write_const>
    2300:	08 95       	ret

00002302 <main>:
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	c8 56       	subi	r28, 0x68	; 104
    230c:	d1 09       	sbc	r29, r1
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	a8 df       	rcall	.-176    	; 0x2264 <system_init>
    2314:	14 e1       	ldi	r17, 0x14	; 20
    2316:	be 01       	movw	r22, r28
    2318:	6f 5f       	subi	r22, 0xFF	; 255
    231a:	7f 4f       	sbci	r23, 0xFF	; 255
    231c:	fb 01       	movw	r30, r22
    231e:	81 2f       	mov	r24, r17
    2320:	11 92       	st	Z+, r1
    2322:	8a 95       	dec	r24
    2324:	e9 f7       	brne	.-6      	; 0x2320 <main+0x1e>
    2326:	4a e0       	ldi	r20, 0x0A	; 10
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	ce 01       	movw	r24, r28
    232c:	45 96       	adiw	r24, 0x15	; 21
    232e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <rb16_init>
    2332:	be 01       	movw	r22, r28
    2334:	63 5e       	subi	r22, 0xE3	; 227
    2336:	7f 4f       	sbci	r23, 0xFF	; 255
    2338:	88 e2       	ldi	r24, 0x28	; 40
    233a:	fb 01       	movw	r30, r22
    233c:	11 92       	st	Z+, r1
    233e:	8a 95       	dec	r24
    2340:	e9 f7       	brne	.-6      	; 0x233c <main+0x3a>
    2342:	4a e0       	ldi	r20, 0x0A	; 10
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	ce 01       	movw	r24, r28
    2348:	8b 5b       	subi	r24, 0xBB	; 187
    234a:	9f 4f       	sbci	r25, 0xFF	; 255
    234c:	0e 94 6c 07 	call	0xed8	; 0xed8 <rb32_init>
    2350:	be 01       	movw	r22, r28
    2352:	63 5b       	subi	r22, 0xB3	; 179
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	fb 01       	movw	r30, r22
    2358:	11 92       	st	Z+, r1
    235a:	1a 95       	dec	r17
    235c:	e9 f7       	brne	.-6      	; 0x2358 <main+0x56>
    235e:	4a e0       	ldi	r20, 0x0A	; 10
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	ce 01       	movw	r24, r28
    2364:	8f 59       	subi	r24, 0x9F	; 159
    2366:	9f 4f       	sbci	r25, 0xFF	; 255
    2368:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <rb16_init>
    236c:	00 e0       	ldi	r16, 0x00	; 0
    236e:	10 e0       	ldi	r17, 0x00	; 0
    2370:	be 01       	movw	r22, r28
    2372:	6b 5b       	subi	r22, 0xBB	; 187
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	ce 01       	movw	r24, r28
    2378:	45 96       	adiw	r24, 0x15	; 21
    237a:	51 d9       	rcall	.-3422   	; 0x161e <data_collect>
    237c:	10 db       	rcall	.-2528   	; 0x199e <state_check>
    237e:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <state>
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	41 f0       	breq	.+16     	; 0x2396 <main+0x94>
    2386:	08 f4       	brcc	.+2      	; 0x238a <main+0x88>
    2388:	49 c0       	rjmp	.+146    	; 0x241c <main+0x11a>
    238a:	82 30       	cpi	r24, 0x02	; 2
    238c:	d1 f0       	breq	.+52     	; 0x23c2 <main+0xc0>
    238e:	83 30       	cpi	r24, 0x03	; 3
    2390:	09 f4       	brne	.+2      	; 0x2394 <main+0x92>
    2392:	3d c0       	rjmp	.+122    	; 0x240e <main+0x10c>
    2394:	41 c0       	rjmp	.+130    	; 0x2418 <main+0x116>
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	46 e1       	ldi	r20, 0x16	; 22
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	60 91 db 20 	lds	r22, 0x20DB	; 0x8020db <alt>
    23a2:	70 91 dc 20 	lds	r23, 0x20DC	; 0x8020dc <alt+0x1>
    23a6:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <alt+0x2>
    23aa:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <alt+0x3>
    23ae:	0e 94 04 1b 	call	0x3608	; 0x3608 <__gesf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	9c f5       	brge	.+102    	; 0x241c <main+0x11a>
    23b6:	11 11       	cpse	r17, r1
    23b8:	31 c0       	rjmp	.+98     	; 0x241c <main+0x11a>
    23ba:	0e 94 3f 05 	call	0xa7e	; 0xa7e <cam_switch>
    23be:	11 e0       	ldi	r17, 0x01	; 1
    23c0:	2d c0       	rjmp	.+90     	; 0x241c <main+0x11a>
    23c2:	11 11       	cpse	r17, r1
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <main+0xca>
    23c6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <cam_switch>
    23ca:	11 e0       	ldi	r17, 0x01	; 1
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	41 ee       	ldi	r20, 0xE1	; 225
    23d2:	53 e4       	ldi	r21, 0x43	; 67
    23d4:	60 91 db 20 	lds	r22, 0x20DB	; 0x8020db <alt>
    23d8:	70 91 dc 20 	lds	r23, 0x20DC	; 0x8020dc <alt+0x1>
    23dc:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <alt+0x2>
    23e0:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <alt+0x3>
    23e4:	49 d6       	rcall	.+3218   	; 0x3078 <__subsf3>
    23e6:	cc d7       	rcall	.+3992   	; 0x3380 <__fixsfsi>
    23e8:	67 5f       	subi	r22, 0xF7	; 247
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	63 31       	cpi	r22, 0x13	; 19
    23ee:	71 05       	cpc	r23, r1
    23f0:	28 f4       	brcc	.+10     	; 0x23fc <main+0xfa>
    23f2:	0e 94 41 08 	call	0x1082	; 0x1082 <release>
    23f6:	0e 94 38 05 	call	0xa70	; 0xa70 <hall_sensor_init>
    23fa:	10 c0       	rjmp	.+32     	; 0x241c <main+0x11a>
    23fc:	80 91 03 21 	lds	r24, 0x2103	; 0x802103 <released>
    2400:	88 23       	and	r24, r24
    2402:	61 f0       	breq	.+24     	; 0x241c <main+0x11a>
    2404:	ce 01       	movw	r24, r28
    2406:	8f 59       	subi	r24, 0x9F	; 159
    2408:	9f 4f       	sbci	r25, 0xFF	; 255
    240a:	33 db       	rcall	.-2458   	; 0x1a72 <servo_pid>
    240c:	07 c0       	rjmp	.+14     	; 0x241c <main+0x11a>
    240e:	01 11       	cpse	r16, r1
    2410:	05 c0       	rjmp	.+10     	; 0x241c <main+0x11a>
    2412:	ca db       	rcall	.-2156   	; 0x1ba8 <buzzer_init>
    2414:	01 e0       	ldi	r16, 0x01	; 1
    2416:	02 c0       	rjmp	.+4      	; 0x241c <main+0x11a>
    2418:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <state>
    241c:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <data_packets>
    2420:	90 91 ea 20 	lds	r25, 0x20EA	; 0x8020ea <data_packets+0x1>
    2424:	01 96       	adiw	r24, 0x01	; 1
    2426:	80 93 e9 20 	sts	0x20E9, r24	; 0x8020e9 <data_packets>
    242a:	90 93 ea 20 	sts	0x20EA, r25	; 0x8020ea <data_packets+0x1>
    242e:	60 91 eb 20 	lds	r22, 0x20EB	; 0x8020eb <timer>
    2432:	70 91 ec 20 	lds	r23, 0x20EC	; 0x8020ec <timer+0x1>
    2436:	61 15       	cp	r22, r1
    2438:	71 05       	cpc	r23, r1
    243a:	09 f4       	brne	.+2      	; 0x243e <main+0x13c>
    243c:	99 cf       	rjmp	.-206    	; 0x2370 <main+0x6e>
    243e:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__udivmodhi4>
    2442:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <rate>
    2446:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <rate+0x1>
    244a:	92 cf       	rjmp	.-220    	; 0x2370 <main+0x6e>

0000244c <eeprom_write>:
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	2c 97       	sbiw	r28, 0x0c	; 12
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	60 91 db 20 	lds	r22, 0x20DB	; 0x8020db <alt>
    245e:	70 91 dc 20 	lds	r23, 0x20DC	; 0x8020dc <alt+0x1>
    2462:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <alt+0x2>
    2466:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <alt+0x3>
    246a:	8a d7       	rcall	.+3860   	; 0x3380 <__fixsfsi>
    246c:	79 83       	std	Y+1, r23	; 0x01
    246e:	6a 83       	std	Y+2, r22	; 0x02
    2470:	80 91 e7 20 	lds	r24, 0x20E7	; 0x8020e7 <packets>
    2474:	90 91 e8 20 	lds	r25, 0x20E8	; 0x8020e8 <packets+0x1>
    2478:	9b 83       	std	Y+3, r25	; 0x03
    247a:	8c 83       	std	Y+4, r24	; 0x04
    247c:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <timer>
    2480:	90 91 ec 20 	lds	r25, 0x20EC	; 0x8020ec <timer+0x1>
    2484:	9d 83       	std	Y+5, r25	; 0x05
    2486:	8e 83       	std	Y+6, r24	; 0x06
    2488:	86 e0       	ldi	r24, 0x06	; 6
    248a:	e1 e4       	ldi	r30, 0x41	; 65
    248c:	f0 e2       	ldi	r31, 0x20	; 32
    248e:	de 01       	movw	r26, r28
    2490:	17 96       	adiw	r26, 0x07	; 7
    2492:	01 90       	ld	r0, Z+
    2494:	0d 92       	st	X+, r0
    2496:	8a 95       	dec	r24
    2498:	e1 f7       	brne	.-8      	; 0x2492 <eeprom_write+0x46>
    249a:	83 e3       	ldi	r24, 0x33	; 51
    249c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    24a0:	fe 01       	movw	r30, r28
    24a2:	37 96       	adiw	r30, 0x07	; 7
    24a4:	ce 01       	movw	r24, r28
    24a6:	01 96       	adiw	r24, 0x01	; 1
    24a8:	ae 01       	movw	r20, r28
    24aa:	43 5f       	subi	r20, 0xF3	; 243
    24ac:	5f 4f       	sbci	r21, 0xFF	; 255
    24ae:	60 ec       	ldi	r22, 0xC0	; 192
    24b0:	71 e0       	ldi	r23, 0x01	; 1
    24b2:	21 91       	ld	r18, Z+
    24b4:	db 01       	movw	r26, r22
    24b6:	2c 93       	st	X, r18
    24b8:	dc 01       	movw	r26, r24
    24ba:	2d 91       	ld	r18, X+
    24bc:	cd 01       	movw	r24, r26
    24be:	db 01       	movw	r26, r22
    24c0:	14 96       	adiw	r26, 0x04	; 4
    24c2:	2c 93       	st	X, r18
    24c4:	e4 17       	cp	r30, r20
    24c6:	f5 07       	cpc	r31, r21
    24c8:	a1 f7       	brne	.-24     	; 0x24b2 <eeprom_write+0x66>
    24ca:	e0 ec       	ldi	r30, 0xC0	; 192
    24cc:	f1 e0       	ldi	r31, 0x01	; 1
    24ce:	85 e3       	ldi	r24, 0x35	; 53
    24d0:	82 87       	std	Z+10, r24	; 0x0a
    24d2:	10 82       	st	Z, r1
    24d4:	80 e1       	ldi	r24, 0x10	; 16
    24d6:	81 83       	std	Z+1, r24	; 0x01
    24d8:	88 ed       	ldi	r24, 0xD8	; 216
    24da:	84 bf       	out	0x34, r24	; 52
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	83 87       	std	Z+11, r24	; 0x0b
    24e0:	87 85       	ldd	r24, Z+15	; 0x0f
    24e2:	88 23       	and	r24, r24
    24e4:	ec f3       	brlt	.-6      	; 0x24e0 <eeprom_write+0x94>
    24e6:	2c 96       	adiw	r28, 0x0c	; 12
    24e8:	cd bf       	out	0x3d, r28	; 61
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <eeprom_erase>:

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
    24f2:	83 e3       	ldi	r24, 0x33	; 51
    24f4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	for(uint8_t i = 0; i < 32; i++){
    24f8:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    24fa:	e0 ec       	ldi	r30, 0xC0	; 192
    24fc:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    24fe:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    2500:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    2502:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	80 32       	cpi	r24, 0x20	; 32
    2508:	d9 f7       	brne	.-10     	; 0x2500 <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}
	
	NVM.CMD = ERASE_EEPROM;
    250a:	e0 ec       	ldi	r30, 0xC0	; 192
    250c:	f1 e0       	ldi	r31, 0x01	; 1
    250e:	80 e3       	ldi	r24, 0x30	; 48
    2510:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    2512:	88 ed       	ldi	r24, 0xD8	; 216
    2514:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    251a:	87 85       	ldd	r24, Z+15	; 0x0f
    251c:	88 23       	and	r24, r24
    251e:	ec f3       	brlt	.-6      	; 0x251a <eeprom_erase+0x28>
}
    2520:	08 95       	ret

00002522 <reset>:
	TCD1.PER = 184; // 2700hz
	TCD1.CCA = 92;
}

void reset(void){
	eeprom_erase();
    2522:	e7 df       	rcall	.-50     	; 0x24f2 <eeprom_erase>
	
	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    2524:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    2526:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    2528:	98 ed       	ldi	r25, 0xD8	; 216
    252a:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    2532:	8f bf       	out	0x3f, r24	; 63
    2534:	08 95       	ret

00002536 <__vector_14>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

ISR(TCC0_OVF_vect){
    2536:	1f 92       	push	r1
    2538:	0f 92       	push	r0
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	0f 92       	push	r0
    253e:	11 24       	eor	r1, r1
    2540:	08 b6       	in	r0, 0x38	; 56
    2542:	0f 92       	push	r0
    2544:	18 be       	out	0x38, r1	; 56
    2546:	09 b6       	in	r0, 0x39	; 57
    2548:	0f 92       	push	r0
    254a:	19 be       	out	0x39, r1	; 57
    254c:	0a b6       	in	r0, 0x3a	; 58
    254e:	0f 92       	push	r0
    2550:	1a be       	out	0x3a, r1	; 58
    2552:	0b b6       	in	r0, 0x3b	; 59
    2554:	0f 92       	push	r0
    2556:	1b be       	out	0x3b, r1	; 59
    2558:	4f 92       	push	r4
    255a:	5f 92       	push	r5
    255c:	6f 92       	push	r6
    255e:	7f 92       	push	r7
    2560:	af 92       	push	r10
    2562:	bf 92       	push	r11
    2564:	cf 92       	push	r12
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	2f 93       	push	r18
    2572:	3f 93       	push	r19
    2574:	4f 93       	push	r20
    2576:	5f 93       	push	r21
    2578:	6f 93       	push	r22
    257a:	7f 93       	push	r23
    257c:	8f 93       	push	r24
    257e:	9f 93       	push	r25
    2580:	af 93       	push	r26
    2582:	bf 93       	push	r27
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	66 97       	sbiw	r28, 0x16	; 22
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	de bf       	out	0x3e, r29	; 62
	//printf("In Bosch Interrupt\n");
	uint8_t data[18];
	bno085_read(data);
    2596:	ce 01       	movw	r24, r28
    2598:	01 96       	adiw	r24, 0x01	; 1
    259a:	0e 94 22 05 	call	0xa44	; 0xa44 <bno085_read>
	double x = ((data[5]<<8) | data[4]) * QSCALE;
	double y = ((data[7]<<8) | data[6]) * QSCALE;
	double z = ((data[9]<<8) | data[8]) * QSCALE;
	double w = ((data[11]<<8) | data[10]) * QSCALE;
	
	quaternion2euler(w, x, y, z);
    259e:	6a 85       	ldd	r22, Y+10	; 0x0a
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	76 2f       	mov	r23, r22
    25a4:	66 27       	eor	r22, r22
    25a6:	89 85       	ldd	r24, Y+9	; 0x09
    25a8:	68 2b       	or	r22, r24
    25aa:	07 2e       	mov	r0, r23
    25ac:	00 0c       	add	r0, r0
    25ae:	88 0b       	sbc	r24, r24
    25b0:	99 0b       	sbc	r25, r25
    25b2:	19 d7       	rcall	.+3634   	; 0x33e6 <__floatsisf>
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e8       	ldi	r20, 0x80	; 128
    25ba:	58 e3       	ldi	r21, 0x38	; 56
    25bc:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    25c0:	5b 01       	movw	r10, r22
    25c2:	6c 01       	movw	r12, r24
    25c4:	68 85       	ldd	r22, Y+8	; 0x08
    25c6:	70 e0       	ldi	r23, 0x00	; 0
    25c8:	76 2f       	mov	r23, r22
    25ca:	66 27       	eor	r22, r22
    25cc:	8f 81       	ldd	r24, Y+7	; 0x07
    25ce:	68 2b       	or	r22, r24
    25d0:	07 2e       	mov	r0, r23
    25d2:	00 0c       	add	r0, r0
    25d4:	88 0b       	sbc	r24, r24
    25d6:	99 0b       	sbc	r25, r25
    25d8:	06 d7       	rcall	.+3596   	; 0x33e6 <__floatsisf>
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	58 e3       	ldi	r21, 0x38	; 56
    25e2:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    25e6:	2b 01       	movw	r4, r22
    25e8:	3c 01       	movw	r6, r24
    25ea:	6e 81       	ldd	r22, Y+6	; 0x06
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	76 2f       	mov	r23, r22
    25f0:	66 27       	eor	r22, r22
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	68 2b       	or	r22, r24
    25f6:	07 2e       	mov	r0, r23
    25f8:	00 0c       	add	r0, r0
    25fa:	88 0b       	sbc	r24, r24
    25fc:	99 0b       	sbc	r25, r25
    25fe:	f3 d6       	rcall	.+3558   	; 0x33e6 <__floatsisf>
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	58 e3       	ldi	r21, 0x38	; 56
    2608:	0e 94 0f 1b 	call	0x361e	; 0x361e <__mulsf3>
    260c:	6b 8b       	std	Y+19, r22	; 0x13
    260e:	7c 8b       	std	Y+20, r23	; 0x14
    2610:	8d 8b       	std	Y+21, r24	; 0x15
    2612:	9e 8b       	std	Y+22, r25	; 0x16
    2614:	6c 85       	ldd	r22, Y+12	; 0x0c
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	76 2f       	mov	r23, r22
    261a:	66 27       	eor	r22, r22
    261c:	8b 85       	ldd	r24, Y+11	; 0x0b
    261e:	68 2b       	or	r22, r24
    2620:	07 2e       	mov	r0, r23
    2622:	00 0c       	add	r0, r0
    2624:	88 0b       	sbc	r24, r24
    2626:	99 0b       	sbc	r25, r25
    2628:	de d6       	rcall	.+3516   	; 0x33e6 <__floatsisf>
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	58 e3       	ldi	r21, 0x38	; 56
    2632:	f5 d7       	rcall	.+4074   	; 0x361e <__mulsf3>
    2634:	83 01       	movw	r16, r6
    2636:	72 01       	movw	r14, r4
    2638:	2b 89       	ldd	r18, Y+19	; 0x13
    263a:	3c 89       	ldd	r19, Y+20	; 0x14
    263c:	4d 89       	ldd	r20, Y+21	; 0x15
    263e:	5e 89       	ldd	r21, Y+22	; 0x16
    2640:	6f d8       	rcall	.-3874   	; 0x1720 <quaternion2euler>
}
    2642:	66 96       	adiw	r28, 0x16	; 22
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	bf 91       	pop	r27
    2652:	af 91       	pop	r26
    2654:	9f 91       	pop	r25
    2656:	8f 91       	pop	r24
    2658:	7f 91       	pop	r23
    265a:	6f 91       	pop	r22
    265c:	5f 91       	pop	r21
    265e:	4f 91       	pop	r20
    2660:	3f 91       	pop	r19
    2662:	2f 91       	pop	r18
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	ff 90       	pop	r15
    266a:	ef 90       	pop	r14
    266c:	df 90       	pop	r13
    266e:	cf 90       	pop	r12
    2670:	bf 90       	pop	r11
    2672:	af 90       	pop	r10
    2674:	7f 90       	pop	r7
    2676:	6f 90       	pop	r6
    2678:	5f 90       	pop	r5
    267a:	4f 90       	pop	r4
    267c:	0f 90       	pop	r0
    267e:	0b be       	out	0x3b, r0	; 59
    2680:	0f 90       	pop	r0
    2682:	0a be       	out	0x3a, r0	; 58
    2684:	0f 90       	pop	r0
    2686:	09 be       	out	0x39, r0	; 57
    2688:	0f 90       	pop	r0
    268a:	08 be       	out	0x38, r0	; 56
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0
    2692:	1f 90       	pop	r1
    2694:	18 95       	reti

00002696 <__vector_47>:

ISR(TCE0_OVF_vect){
    2696:	1f 92       	push	r1
    2698:	0f 92       	push	r0
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	0f 92       	push	r0
    269e:	11 24       	eor	r1, r1
    26a0:	08 b6       	in	r0, 0x38	; 56
    26a2:	0f 92       	push	r0
    26a4:	18 be       	out	0x38, r1	; 56
    26a6:	09 b6       	in	r0, 0x39	; 57
    26a8:	0f 92       	push	r0
    26aa:	19 be       	out	0x39, r1	; 57
    26ac:	0a b6       	in	r0, 0x3a	; 58
    26ae:	0f 92       	push	r0
    26b0:	1a be       	out	0x3a, r1	; 58
    26b2:	0b b6       	in	r0, 0x3b	; 59
    26b4:	0f 92       	push	r0
    26b6:	1b be       	out	0x3b, r1	; 59
    26b8:	2f 92       	push	r2
    26ba:	3f 92       	push	r3
    26bc:	4f 92       	push	r4
    26be:	5f 92       	push	r5
    26c0:	6f 92       	push	r6
    26c2:	7f 92       	push	r7
    26c4:	8f 92       	push	r8
    26c6:	9f 92       	push	r9
    26c8:	af 92       	push	r10
    26ca:	bf 92       	push	r11
    26cc:	cf 92       	push	r12
    26ce:	df 92       	push	r13
    26d0:	ef 92       	push	r14
    26d2:	ff 92       	push	r15
    26d4:	0f 93       	push	r16
    26d6:	1f 93       	push	r17
    26d8:	2f 93       	push	r18
    26da:	3f 93       	push	r19
    26dc:	4f 93       	push	r20
    26de:	5f 93       	push	r21
    26e0:	6f 93       	push	r22
    26e2:	7f 93       	push	r23
    26e4:	8f 93       	push	r24
    26e6:	9f 93       	push	r25
    26e8:	af 93       	push	r26
    26ea:	bf 93       	push	r27
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	ef 93       	push	r30
    26f2:	ff 93       	push	r31
	timer+=5;
    26f4:	c0 91 eb 20 	lds	r28, 0x20EB	; 0x8020eb <timer>
    26f8:	d0 91 ec 20 	lds	r29, 0x20EC	; 0x8020ec <timer+0x1>
    26fc:	25 96       	adiw	r28, 0x05	; 5
    26fe:	c0 93 eb 20 	sts	0x20EB, r28	; 0x8020eb <timer>
    2702:	d0 93 ec 20 	sts	0x20EC, r29	; 0x8020ec <timer+0x1>
	packets++;
    2706:	00 91 e7 20 	lds	r16, 0x20E7	; 0x8020e7 <packets>
    270a:	10 91 e8 20 	lds	r17, 0x20E8	; 0x8020e8 <packets+0x1>
    270e:	0f 5f       	subi	r16, 0xFF	; 255
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	00 93 e7 20 	sts	0x20E7, r16	; 0x8020e7 <packets>
    2716:	10 93 e8 20 	sts	0x20E8, r17	; 0x8020e8 <packets+0x1>
	sprintf(str,format,timer/10,timer%10,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    271a:	60 91 c3 20 	lds	r22, 0x20C3	; 0x8020c3 <gps_alt>
    271e:	70 91 c4 20 	lds	r23, 0x20C4	; 0x8020c4 <gps_alt+0x1>
    2722:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <gps_alt+0x2>
    2726:	90 91 c6 20 	lds	r25, 0x20C6	; 0x8020c6 <gps_alt+0x3>
    272a:	2a d6       	rcall	.+3156   	; 0x3380 <__fixsfsi>
    272c:	36 2e       	mov	r3, r22
    272e:	27 2e       	mov	r2, r23
	timer+=5;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2730:	40 90 c7 20 	lds	r4, 0x20C7	; 0x8020c7 <gps_long>
    2734:	50 90 c8 20 	lds	r5, 0x20C8	; 0x8020c8 <gps_long+0x1>
    2738:	60 90 c9 20 	lds	r6, 0x20C9	; 0x8020c9 <gps_long+0x2>
    273c:	70 90 ca 20 	lds	r7, 0x20CA	; 0x8020ca <gps_long+0x3>
    2740:	80 90 cb 20 	lds	r8, 0x20CB	; 0x8020cb <gps_lat>
    2744:	90 90 cc 20 	lds	r9, 0x20CC	; 0x8020cc <gps_lat+0x1>
    2748:	a0 90 cd 20 	lds	r10, 0x20CD	; 0x8020cd <gps_lat+0x2>
    274c:	b0 90 ce 20 	lds	r11, 0x20CE	; 0x8020ce <gps_lat+0x3>
ISR(TCE0_OVF_vect){
	timer+=5;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    2750:	60 91 cf 20 	lds	r22, 0x20CF	; 0x8020cf <gps_t>
    2754:	70 91 d0 20 	lds	r23, 0x20D0	; 0x8020d0 <gps_t+0x1>
    2758:	80 91 d1 20 	lds	r24, 0x20D1	; 0x8020d1 <gps_t+0x2>
    275c:	90 91 d2 20 	lds	r25, 0x20D2	; 0x8020d2 <gps_t+0x3>
    2760:	0f d6       	rcall	.+3102   	; 0x3380 <__fixsfsi>
    2762:	6b 01       	movw	r12, r22
    2764:	7c 01       	movw	r14, r24
}

ISR(TCE0_OVF_vect){
	timer+=5;
	packets++;
	sprintf(str,format,timer/10,timer%10,packets,
    2766:	60 91 b1 20 	lds	r22, 0x20B1	; 0x8020b1 <angle>
    276a:	70 91 b2 20 	lds	r23, 0x20B2	; 0x8020b2 <angle+0x1>
    276e:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <angle+0x2>
    2772:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <angle+0x3>
    2776:	04 d6       	rcall	.+3080   	; 0x3380 <__fixsfsi>
    2778:	7f 93       	push	r23
    277a:	6f 93       	push	r22
    277c:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <state>
    2780:	1f 92       	push	r1
    2782:	8f 93       	push	r24
    2784:	60 91 b5 20 	lds	r22, 0x20B5	; 0x8020b5 <rpm>
    2788:	70 91 b6 20 	lds	r23, 0x20B6	; 0x8020b6 <rpm+0x1>
    278c:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <rpm+0x2>
    2790:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <rpm+0x3>
    2794:	f5 d5       	rcall	.+3050   	; 0x3380 <__fixsfsi>
    2796:	7f 93       	push	r23
    2798:	6f 93       	push	r22
    279a:	60 91 b9 20 	lds	r22, 0x20B9	; 0x8020b9 <roll>
    279e:	70 91 ba 20 	lds	r23, 0x20BA	; 0x8020ba <roll+0x1>
    27a2:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <roll+0x2>
    27a6:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <roll+0x3>
    27aa:	ea d5       	rcall	.+3028   	; 0x3380 <__fixsfsi>
    27ac:	7f 93       	push	r23
    27ae:	6f 93       	push	r22
    27b0:	60 91 bd 20 	lds	r22, 0x20BD	; 0x8020bd <pitch>
    27b4:	70 91 be 20 	lds	r23, 0x20BE	; 0x8020be <pitch+0x1>
    27b8:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <pitch+0x2>
    27bc:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <pitch+0x3>
    27c0:	df d5       	rcall	.+3006   	; 0x3380 <__fixsfsi>
    27c2:	7f 93       	push	r23
    27c4:	6f 93       	push	r22
    27c6:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <gps_sats+0x1>
    27ca:	8f 93       	push	r24
    27cc:	80 91 c1 20 	lds	r24, 0x20C1	; 0x8020c1 <gps_sats>
    27d0:	8f 93       	push	r24
    27d2:	83 2d       	mov	r24, r3
    27d4:	92 2d       	mov	r25, r2
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	9c 01       	movw	r18, r24
    27dc:	22 0f       	add	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	22 0f       	add	r18, r18
    27e2:	33 1f       	adc	r19, r19
    27e4:	82 0f       	add	r24, r18
    27e6:	93 1f       	adc	r25, r19
    27e8:	6a e0       	ldi	r22, 0x0A	; 10
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__divmodhi4>
    27f0:	9f 93       	push	r25
    27f2:	8f 93       	push	r24
    27f4:	2f 92       	push	r2
    27f6:	3f 92       	push	r3
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	34 e2       	ldi	r19, 0x24	; 36
    27fc:	44 e7       	ldi	r20, 0x74	; 116
    27fe:	59 e4       	ldi	r21, 0x49	; 73
    2800:	c3 01       	movw	r24, r6
    2802:	b2 01       	movw	r22, r4
    2804:	0c d7       	rcall	.+3608   	; 0x361e <__mulsf3>
    2806:	bc d5       	rcall	.+2936   	; 0x3380 <__fixsfsi>
    2808:	20 e4       	ldi	r18, 0x40	; 64
    280a:	32 e4       	ldi	r19, 0x42	; 66
    280c:	4f e0       	ldi	r20, 0x0F	; 15
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    2814:	9b 01       	movw	r18, r22
    2816:	77 23       	and	r23, r23
    2818:	24 f4       	brge	.+8      	; 0x2822 <__vector_47+0x18c>
    281a:	22 27       	eor	r18, r18
    281c:	33 27       	eor	r19, r19
    281e:	26 1b       	sub	r18, r22
    2820:	37 0b       	sbc	r19, r23
    2822:	c9 01       	movw	r24, r18
    2824:	33 0f       	add	r19, r19
    2826:	aa 0b       	sbc	r26, r26
    2828:	bb 0b       	sbc	r27, r27
    282a:	bf 93       	push	r27
    282c:	af 93       	push	r26
    282e:	9f 93       	push	r25
    2830:	8f 93       	push	r24
    2832:	c3 01       	movw	r24, r6
    2834:	b2 01       	movw	r22, r4
    2836:	a4 d5       	rcall	.+2888   	; 0x3380 <__fixsfsi>
    2838:	7f 93       	push	r23
    283a:	6f 93       	push	r22
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	34 e2       	ldi	r19, 0x24	; 36
    2840:	44 e7       	ldi	r20, 0x74	; 116
    2842:	59 e4       	ldi	r21, 0x49	; 73
    2844:	c5 01       	movw	r24, r10
    2846:	b4 01       	movw	r22, r8
    2848:	ea d6       	rcall	.+3540   	; 0x361e <__mulsf3>
    284a:	9a d5       	rcall	.+2868   	; 0x3380 <__fixsfsi>
    284c:	20 e4       	ldi	r18, 0x40	; 64
    284e:	32 e4       	ldi	r19, 0x42	; 66
    2850:	4f e0       	ldi	r20, 0x0F	; 15
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    2858:	9f 93       	push	r25
    285a:	8f 93       	push	r24
    285c:	7f 93       	push	r23
    285e:	6f 93       	push	r22
    2860:	c5 01       	movw	r24, r10
    2862:	b4 01       	movw	r22, r8
    2864:	8d d5       	rcall	.+2842   	; 0x3380 <__fixsfsi>
    2866:	7f 93       	push	r23
    2868:	6f 93       	push	r22
    286a:	0f 2e       	mov	r0, r31
    286c:	f4 e6       	ldi	r31, 0x64	; 100
    286e:	8f 2e       	mov	r8, r31
    2870:	91 2c       	mov	r9, r1
    2872:	a1 2c       	mov	r10, r1
    2874:	b1 2c       	mov	r11, r1
    2876:	f0 2d       	mov	r31, r0
    2878:	c7 01       	movw	r24, r14
    287a:	b6 01       	movw	r22, r12
    287c:	a5 01       	movw	r20, r10
    287e:	94 01       	movw	r18, r8
    2880:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    2884:	7f 93       	push	r23
    2886:	6f 93       	push	r22
    2888:	c7 01       	movw	r24, r14
    288a:	b6 01       	movw	r22, r12
    288c:	20 e1       	ldi	r18, 0x10	; 16
    288e:	37 e2       	ldi	r19, 0x27	; 39
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	50 e0       	ldi	r21, 0x00	; 0
    2894:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    2898:	f2 2e       	mov	r15, r18
    289a:	e3 2e       	mov	r14, r19
    289c:	a5 01       	movw	r20, r10
    289e:	94 01       	movw	r18, r8
    28a0:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    28a4:	3f 93       	push	r19
    28a6:	2f 93       	push	r18
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	60 91 d7 20 	lds	r22, 0x20D7	; 0x8020d7 <volt>
    28b0:	70 91 d8 20 	lds	r23, 0x20D8	; 0x8020d8 <volt+0x1>
    28b4:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <volt+0x2>
    28b8:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <volt+0x3>
    28bc:	61 d5       	rcall	.+2754   	; 0x3380 <__fixsfsi>
    28be:	7f 93       	push	r23
    28c0:	6f 93       	push	r22
    28c2:	23 e3       	ldi	r18, 0x33	; 51
    28c4:	33 e9       	ldi	r19, 0x93	; 147
    28c6:	48 e8       	ldi	r20, 0x88	; 136
    28c8:	53 e4       	ldi	r21, 0x43	; 67
    28ca:	60 91 df 20 	lds	r22, 0x20DF	; 0x8020df <temp>
    28ce:	70 91 e0 20 	lds	r23, 0x20E0	; 0x8020e0 <temp+0x1>
    28d2:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <temp+0x2>
    28d6:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <temp+0x3>
    28da:	ce d3       	rcall	.+1948   	; 0x3078 <__subsf3>
    28dc:	51 d5       	rcall	.+2722   	; 0x3380 <__fixsfsi>
    28de:	7f 93       	push	r23
    28e0:	6f 93       	push	r22
    28e2:	60 91 e3 20 	lds	r22, 0x20E3	; 0x8020e3 <press>
    28e6:	70 91 e4 20 	lds	r23, 0x20E4	; 0x8020e4 <press+0x1>
    28ea:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <press+0x2>
    28ee:	90 91 e6 20 	lds	r25, 0x20E6	; 0x8020e6 <press+0x3>
    28f2:	46 d5       	rcall	.+2700   	; 0x3380 <__fixsfsi>
    28f4:	9f 93       	push	r25
    28f6:	8f 93       	push	r24
    28f8:	7f 93       	push	r23
    28fa:	6f 93       	push	r22
    28fc:	60 91 db 20 	lds	r22, 0x20DB	; 0x8020db <alt>
    2900:	70 91 dc 20 	lds	r23, 0x20DC	; 0x8020dc <alt+0x1>
    2904:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <alt+0x2>
    2908:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <alt+0x3>
    290c:	39 d5       	rcall	.+2674   	; 0x3380 <__fixsfsi>
    290e:	7f 93       	push	r23
    2910:	6f 93       	push	r22
    2912:	1f 93       	push	r17
    2914:	0f 93       	push	r16
    2916:	9e 01       	movw	r18, r28
    2918:	ad ec       	ldi	r26, 0xCD	; 205
    291a:	bc ec       	ldi	r27, 0xCC	; 204
    291c:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__umulhisi3>
    2920:	96 95       	lsr	r25
    2922:	87 95       	ror	r24
    2924:	96 95       	lsr	r25
    2926:	87 95       	ror	r24
    2928:	96 95       	lsr	r25
    292a:	87 95       	ror	r24
    292c:	9c 01       	movw	r18, r24
    292e:	22 0f       	add	r18, r18
    2930:	33 1f       	adc	r19, r19
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	82 0f       	add	r24, r18
    2940:	93 1f       	adc	r25, r19
    2942:	9e 01       	movw	r18, r28
    2944:	28 1b       	sub	r18, r24
    2946:	39 0b       	sbc	r19, r25
    2948:	c9 01       	movw	r24, r18
    294a:	9f 93       	push	r25
    294c:	2f 93       	push	r18
    294e:	9e 01       	movw	r18, r28
    2950:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__umulhisi3>
    2954:	96 95       	lsr	r25
    2956:	87 95       	ror	r24
    2958:	96 95       	lsr	r25
    295a:	87 95       	ror	r24
    295c:	96 95       	lsr	r25
    295e:	87 95       	ror	r24
    2960:	9f 93       	push	r25
    2962:	8f 93       	push	r24
    2964:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    2968:	8f 93       	push	r24
    296a:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    296e:	8f 93       	push	r24
    2970:	c1 e2       	ldi	r28, 0x21	; 33
    2972:	d1 e2       	ldi	r29, 0x21	; 33
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    297c:	2d b7       	in	r18, 0x3d	; 61
    297e:	3e b7       	in	r19, 0x3e	; 62
    2980:	2a 5c       	subi	r18, 0xCA	; 202
    2982:	3f 4f       	sbci	r19, 0xFF	; 255
    2984:	2d bf       	out	0x3d, r18	; 61
    2986:	3e bf       	out	0x3e, r19	; 62
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <printf>
	
	// Updates EEPROM
	eeprom_write();
    2990:	5d dd       	rcall	.-1350   	; 0x244c <eeprom_write>
    2992:	0f 90       	pop	r0
	uint8_t byte0 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE0);
	uint8_t byte1 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE1);
	uint16_t a = (uint16_t) ((byte1<<8) | byte0);
	printf("%u\n", a);
	*/
}
    2994:	0f 90       	pop	r0
    2996:	ff 91       	pop	r31
    2998:	ef 91       	pop	r30
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	bf 91       	pop	r27
    29a0:	af 91       	pop	r26
    29a2:	9f 91       	pop	r25
    29a4:	8f 91       	pop	r24
    29a6:	7f 91       	pop	r23
    29a8:	6f 91       	pop	r22
    29aa:	5f 91       	pop	r21
    29ac:	4f 91       	pop	r20
    29ae:	3f 91       	pop	r19
    29b0:	2f 91       	pop	r18
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	ff 90       	pop	r15
    29b8:	ef 90       	pop	r14
    29ba:	df 90       	pop	r13
    29bc:	cf 90       	pop	r12
    29be:	bf 90       	pop	r11
    29c0:	af 90       	pop	r10
    29c2:	9f 90       	pop	r9
    29c4:	8f 90       	pop	r8
    29c6:	7f 90       	pop	r7
    29c8:	6f 90       	pop	r6
    29ca:	5f 90       	pop	r5
    29cc:	4f 90       	pop	r4
    29ce:	3f 90       	pop	r3
    29d0:	2f 90       	pop	r2
    29d2:	0f 90       	pop	r0
    29d4:	0b be       	out	0x3b, r0	; 59
    29d6:	0f 90       	pop	r0
    29d8:	0a be       	out	0x3a, r0	; 58
    29da:	0f 90       	pop	r0
    29dc:	09 be       	out	0x39, r0	; 57
    29de:	0f 90       	pop	r0
    29e0:	08 be       	out	0x38, r0	; 56
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	0f 90       	pop	r0
    29e8:	1f 90       	pop	r1
    29ea:	18 95       	reti

000029ec <__vector_58>:
    29ec:	1f 92       	push	r1

ISR(USARTE0_RXC_vect){
    29ee:	0f 92       	push	r0
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	0f 92       	push	r0
    29f4:	11 24       	eor	r1, r1
    29f6:	08 b6       	in	r0, 0x38	; 56
    29f8:	0f 92       	push	r0
    29fa:	18 be       	out	0x38, r1	; 56
    29fc:	09 b6       	in	r0, 0x39	; 57
    29fe:	0f 92       	push	r0
    2a00:	19 be       	out	0x39, r1	; 57
    2a02:	0b b6       	in	r0, 0x3b	; 59
    2a04:	0f 92       	push	r0
    2a06:	1b be       	out	0x3b, r1	; 59
    2a08:	2f 93       	push	r18
    2a0a:	3f 93       	push	r19
    2a0c:	4f 93       	push	r20
    2a0e:	5f 93       	push	r21
    2a10:	6f 93       	push	r22
    2a12:	7f 93       	push	r23
    2a14:	8f 93       	push	r24
    2a16:	9f 93       	push	r25
    2a18:	af 93       	push	r26
    2a1a:	bf 93       	push	r27
    2a1c:	ef 93       	push	r30
    2a1e:	ff 93       	push	r31
	uint8_t c = usart_getchar(UART_TERMINAL_SERIAL);
    2a20:	80 ea       	ldi	r24, 0xA0	; 160
    2a22:	9a e0       	ldi	r25, 0x0A	; 10
    2a24:	0e 94 c8 02 	call	0x590	; 0x590 <usart_getchar>
	//printf("%c\n", c);
	
	switch(c){
    2a28:	84 36       	cpi	r24, 0x64	; 100
    2a2a:	91 f0       	breq	.+36     	; 0x2a50 <__vector_58+0x64>
    2a2c:	28 f4       	brcc	.+10     	; 0x2a38 <__vector_58+0x4c>
    2a2e:	81 36       	cpi	r24, 0x61	; 97
    2a30:	69 f0       	breq	.+26     	; 0x2a4c <__vector_58+0x60>
    2a32:	83 36       	cpi	r24, 0x63	; 99
    2a34:	49 f0       	breq	.+18     	; 0x2a48 <__vector_58+0x5c>
    2a36:	0d c0       	rjmp	.+26     	; 0x2a52 <__vector_58+0x66>
    2a38:	85 36       	cpi	r24, 0x65	; 101
    2a3a:	21 f0       	breq	.+8      	; 0x2a44 <__vector_58+0x58>
    2a3c:	86 36       	cpi	r24, 0x66	; 102
    2a3e:	49 f4       	brne	.+18     	; 0x2a52 <__vector_58+0x66>
		case RESET:
		//printf("RESET\n");
		reset();
    2a40:	70 dd       	rcall	.-1312   	; 0x2522 <reset>

	SREG=oldInterruptState;
}

void calibrate(void){
	cali_alt();
    2a42:	07 c0       	rjmp	.+14     	; 0x2a52 <__vector_58+0x66>
    2a44:	cb d8       	rcall	.-3690   	; 0x1bdc <cali_alt>
		case CALIBRATE:
		calibrate();
		//printf("CALIBRATE\n");
		break;
		case CALIBRATE_ALTITUDE:
		cali_alt();
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <__vector_58+0x66>
		case CALIBRATE_ANGLE:
		cali_ang();
		//printf("CALIBRATE_ANGLE\n");
		break;
		case SEND_GPS_LOCATION:
		send_gps();
    2a48:	c9 d8       	rcall	.-3694   	; 0x1bdc <cali_alt>
    2a4a:	03 c0       	rjmp	.+6      	; 0x2a52 <__vector_58+0x66>
		//printf("SEND_GPS_LOCATION\n");
		break;
    2a4c:	e6 d8       	rcall	.-3636   	; 0x1c1a <send_gps>
		case PACKET:
		packet();
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <__vector_58+0x66>
    2a50:	64 d9       	rcall	.-3384   	; 0x1d1a <packet>
		//printf("PACKET\n");
		break;
	}
}
    2a52:	ff 91       	pop	r31
    2a54:	ef 91       	pop	r30
    2a56:	bf 91       	pop	r27
    2a58:	af 91       	pop	r26
    2a5a:	9f 91       	pop	r25
    2a5c:	8f 91       	pop	r24
    2a5e:	7f 91       	pop	r23
    2a60:	6f 91       	pop	r22
    2a62:	5f 91       	pop	r21
    2a64:	4f 91       	pop	r20
    2a66:	3f 91       	pop	r19
    2a68:	2f 91       	pop	r18
    2a6a:	0f 90       	pop	r0
    2a6c:	0b be       	out	0x3b, r0	; 59
    2a6e:	0f 90       	pop	r0
    2a70:	09 be       	out	0x39, r0	; 57
    2a72:	0f 90       	pop	r0
    2a74:	08 be       	out	0x38, r0	; 56
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    2a80:	1f 92       	push	r1
    2a82:	0f 92       	push	r0
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	0f 92       	push	r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	08 b6       	in	r0, 0x38	; 56
    2a8c:	0f 92       	push	r0
    2a8e:	18 be       	out	0x38, r1	; 56
    2a90:	09 b6       	in	r0, 0x39	; 57
    2a92:	0f 92       	push	r0
    2a94:	19 be       	out	0x39, r1	; 57
    2a96:	0a b6       	in	r0, 0x3a	; 58
    2a98:	0f 92       	push	r0
    2a9a:	1a be       	out	0x3a, r1	; 58
    2a9c:	0b b6       	in	r0, 0x3b	; 59
    2a9e:	0f 92       	push	r0
    2aa0:	1b be       	out	0x3b, r1	; 59
    2aa2:	8f 92       	push	r8
    2aa4:	9f 92       	push	r9
    2aa6:	af 92       	push	r10
    2aa8:	bf 92       	push	r11
    2aaa:	cf 92       	push	r12
    2aac:	df 92       	push	r13
    2aae:	ef 92       	push	r14
    2ab0:	ff 92       	push	r15
    2ab2:	1f 93       	push	r17
    2ab4:	2f 93       	push	r18
    2ab6:	3f 93       	push	r19
    2ab8:	4f 93       	push	r20
    2aba:	5f 93       	push	r21
    2abc:	6f 93       	push	r22
    2abe:	7f 93       	push	r23
    2ac0:	8f 93       	push	r24
    2ac2:	9f 93       	push	r25
    2ac4:	af 93       	push	r26
    2ac6:	bf 93       	push	r27
    2ac8:	ef 93       	push	r30
    2aca:	ff 93       	push	r31
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <__vector_91+0x52>
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <__vector_91+0x54>
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    2ad8:	80 eb       	ldi	r24, 0xB0	; 176
    2ada:	99 e0       	ldi	r25, 0x09	; 9
    2adc:	0e 94 c8 02 	call	0x590	; 0x590 <usart_getchar>
    2ae0:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    2ae2:	84 32       	cpi	r24, 0x24	; 36
    2ae4:	49 f4       	brne	.+18     	; 0x2af8 <__vector_91+0x78>
		writing = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	80 93 f1 20 	sts	0x20F1, r24	; 0x8020f1 <writing>
		pos = 0;
		word_pos = 0;
    2aec:	10 92 ef 20 	sts	0x20EF, r1	; 0x8020ef <word_pos>
		commas = 0;
    2af0:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	69 c2       	rjmp	.+1234   	; 0x2fca <__vector_91+0x54a>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    2af8:	8a 32       	cpi	r24, 0x2A	; 42
    2afa:	29 f4       	brne	.+10     	; 0x2b06 <__vector_91+0x86>
		commas = 0;
    2afc:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <commas>
		writing = 0;
    2b00:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <writing>
    2b04:	92 c2       	rjmp	.+1316   	; 0x302a <__vector_91+0x5aa>
	}
	else if(c == (uint8_t) ','){
    2b06:	8c 32       	cpi	r24, 0x2C	; 44
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <__vector_91+0x8c>
    2b0a:	4a c2       	rjmp	.+1172   	; 0x2fa0 <__vector_91+0x520>
		gps[0] = 32;
    2b0c:	ed e0       	ldi	r30, 0x0D	; 13
    2b0e:	f1 e2       	ldi	r31, 0x21	; 33
    2b10:	80 e2       	ldi	r24, 0x20	; 32
    2b12:	80 83       	st	Z, r24
		if(gps[1] == 32){
    2b14:	81 81       	ldd	r24, Z+1	; 0x01
    2b16:	80 32       	cpi	r24, 0x20	; 32
    2b18:	09 f0       	breq	.+2      	; 0x2b1c <__vector_91+0x9c>
    2b1a:	6e c2       	rjmp	.+1244   	; 0x2ff8 <__vector_91+0x578>
			gps[0] = '0';
    2b1c:	80 e3       	ldi	r24, 0x30	; 48
    2b1e:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <gps>
    2b22:	6a c2       	rjmp	.+1236   	; 0x2ff8 <__vector_91+0x578>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2b24:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <gps>
    2b28:	8e 32       	cpi	r24, 0x2E	; 46
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <__vector_91+0xae>
    2b2c:	9f c1       	rjmp	.+830    	; 0x2e6c <__vector_91+0x3ec>
    2b2e:	a5 c1       	rjmp	.+842    	; 0x2e7a <__vector_91+0x3fa>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2b30:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <gps>
    2b34:	8e 32       	cpi	r24, 0x2E	; 46
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <__vector_91+0xba>
    2b38:	ed c0       	rjmp	.+474    	; 0x2d14 <__vector_91+0x294>
    2b3a:	f3 c0       	rjmp	.+486    	; 0x2d22 <__vector_91+0x2a2>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2b3c:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <gps>
    2b40:	8e 32       	cpi	r24, 0x2E	; 46
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <__vector_91+0xc6>
    2b44:	52 c0       	rjmp	.+164    	; 0x2bea <__vector_91+0x16a>
    2b46:	58 c0       	rjmp	.+176    	; 0x2bf8 <__vector_91+0x178>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2b48:	91 91       	ld	r25, Z+
    2b4a:	9e 32       	cpi	r25, 0x2E	; 46
    2b4c:	29 f4       	brne	.+10     	; 0x2b58 <__vector_91+0xd8>
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <__vector_91+0xd2>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2b52:	80 93 ed 20 	sts	0x20ED, r24	; 0x8020ed <idx>
						break;
    2b56:	03 c0       	rjmp	.+6      	; 0x2b5e <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	8f 30       	cpi	r24, 0x0F	; 15
    2b5c:	a9 f7       	brne	.-22     	; 0x2b48 <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2b5e:	20 91 ed 20 	lds	r18, 0x20ED	; 0x8020ed <idx>
    2b62:	e2 2f       	mov	r30, r18
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	e3 5f       	subi	r30, 0xF3	; 243
    2b68:	fe 4d       	sbci	r31, 0xDE	; 222
    2b6a:	80 e2       	ldi	r24, 0x20	; 32
    2b6c:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2b6e:	2f 5f       	subi	r18, 0xFF	; 255
    2b70:	2f 30       	cpi	r18, 0x0F	; 15
    2b72:	c8 f4       	brcc	.+50     	; 0x2ba6 <__vector_91+0x126>
					if(gps[i] == 32){
    2b74:	82 2f       	mov	r24, r18
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	fc 01       	movw	r30, r24
    2b7a:	e3 5f       	subi	r30, 0xF3	; 243
    2b7c:	fe 4d       	sbci	r31, 0xDE	; 222
    2b7e:	30 81       	ld	r19, Z
    2b80:	30 32       	cpi	r19, 0x20	; 32
    2b82:	89 f0       	breq	.+34     	; 0x2ba6 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2b84:	40 e2       	ldi	r20, 0x20	; 32
    2b86:	08 c0       	rjmp	.+16     	; 0x2b98 <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2b88:	82 2f       	mov	r24, r18
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	e3 5f       	subi	r30, 0xF3	; 243
    2b90:	fe 4d       	sbci	r31, 0xDE	; 222
    2b92:	30 81       	ld	r19, Z
    2b94:	30 32       	cpi	r19, 0x20	; 32
    2b96:	39 f0       	breq	.+14     	; 0x2ba6 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2b98:	fc 01       	movw	r30, r24
    2b9a:	e3 5f       	subi	r30, 0xF3	; 243
    2b9c:	fe 4d       	sbci	r31, 0xDE	; 222
    2b9e:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2ba0:	2f 5f       	subi	r18, 0xFF	; 255
    2ba2:	2f 30       	cpi	r18, 0x0F	; 15
    2ba4:	89 f7       	brne	.-30     	; 0x2b88 <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	01 96       	adiw	r24, 0x01	; 1
    2baa:	9f 93       	push	r25
    2bac:	8f 93       	push	r24
    2bae:	89 ea       	ldi	r24, 0xA9	; 169
    2bb0:	90 e2       	ldi	r25, 0x20	; 32
    2bb2:	9f 93       	push	r25
    2bb4:	8f 93       	push	r24
    2bb6:	8d e0       	ldi	r24, 0x0D	; 13
    2bb8:	91 e2       	ldi	r25, 0x21	; 33
    2bba:	9f 93       	push	r25
    2bbc:	8f 93       	push	r24
    2bbe:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <sscanf>
				gps_t = (double) val;
    2bc2:	69 81       	ldd	r22, Y+1	; 0x01
    2bc4:	7a 81       	ldd	r23, Y+2	; 0x02
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bca:	0d d4       	rcall	.+2074   	; 0x33e6 <__floatsisf>
    2bcc:	60 93 cf 20 	sts	0x20CF, r22	; 0x8020cf <gps_t>
    2bd0:	70 93 d0 20 	sts	0x20D0, r23	; 0x8020d0 <gps_t+0x1>
    2bd4:	80 93 d1 20 	sts	0x20D1, r24	; 0x8020d1 <gps_t+0x2>
    2bd8:	90 93 d2 20 	sts	0x20D2, r25	; 0x8020d2 <gps_t+0x3>
				break;
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	bd c1       	rjmp	.+890    	; 0x2f64 <__vector_91+0x4e4>
    2bea:	ee e0       	ldi	r30, 0x0E	; 14
    2bec:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2bee:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2bf0:	91 91       	ld	r25, Z+
    2bf2:	9e 32       	cpi	r25, 0x2E	; 46
    2bf4:	29 f4       	brne	.+10     	; 0x2c00 <__vector_91+0x180>
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <__vector_91+0x17a>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2bfa:	80 93 ed 20 	sts	0x20ED, r24	; 0x8020ed <idx>
						break;
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <__vector_91+0x186>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2c00:	8f 5f       	subi	r24, 0xFF	; 255
    2c02:	8f 30       	cpi	r24, 0x0F	; 15
    2c04:	a9 f7       	brne	.-22     	; 0x2bf0 <__vector_91+0x170>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2c06:	20 91 ed 20 	lds	r18, 0x20ED	; 0x8020ed <idx>
    2c0a:	42 2f       	mov	r20, r18
    2c0c:	50 e0       	ldi	r21, 0x00	; 0
    2c0e:	fa 01       	movw	r30, r20
    2c10:	e3 5f       	subi	r30, 0xF3	; 243
    2c12:	fe 4d       	sbci	r31, 0xDE	; 222
    2c14:	80 e2       	ldi	r24, 0x20	; 32
    2c16:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2c18:	2f 5f       	subi	r18, 0xFF	; 255
    2c1a:	2f 30       	cpi	r18, 0x0F	; 15
    2c1c:	f8 f4       	brcc	.+62     	; 0x2c5c <__vector_91+0x1dc>
					if(gps[i] == 32){
    2c1e:	82 2f       	mov	r24, r18
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	fc 01       	movw	r30, r24
    2c24:	e3 5f       	subi	r30, 0xF3	; 243
    2c26:	fe 4d       	sbci	r31, 0xDE	; 222
    2c28:	30 81       	ld	r19, Z
    2c2a:	30 32       	cpi	r19, 0x20	; 32
    2c2c:	b9 f0       	breq	.+46     	; 0x2c5c <__vector_91+0x1dc>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2c2e:	60 e2       	ldi	r22, 0x20	; 32
    2c30:	08 c0       	rjmp	.+16     	; 0x2c42 <__vector_91+0x1c2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2c32:	82 2f       	mov	r24, r18
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	fc 01       	movw	r30, r24
    2c38:	e3 5f       	subi	r30, 0xF3	; 243
    2c3a:	fe 4d       	sbci	r31, 0xDE	; 222
    2c3c:	30 81       	ld	r19, Z
    2c3e:	30 32       	cpi	r19, 0x20	; 32
    2c40:	69 f0       	breq	.+26     	; 0x2c5c <__vector_91+0x1dc>
						break;
					}
					dec[i-idx-1] = gps[i];
    2c42:	fc 01       	movw	r30, r24
    2c44:	e4 1b       	sub	r30, r20
    2c46:	f5 0b       	sbc	r31, r21
    2c48:	e5 5e       	subi	r30, 0xE5	; 229
    2c4a:	fe 4d       	sbci	r31, 0xDE	; 222
    2c4c:	30 83       	st	Z, r19
					gps[i] = 32;
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e3 5f       	subi	r30, 0xF3	; 243
    2c52:	fe 4d       	sbci	r31, 0xDE	; 222
    2c54:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2c56:	2f 5f       	subi	r18, 0xFF	; 255
    2c58:	2f 30       	cpi	r18, 0x0F	; 15
    2c5a:	59 f7       	brne	.-42     	; 0x2c32 <__vector_91+0x1b2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2c5c:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <dec>
    2c60:	80 32       	cpi	r24, 0x20	; 32
    2c62:	19 f4       	brne	.+6      	; 0x2c6a <__vector_91+0x1ea>
					dec[0] = '0';
    2c64:	80 e3       	ldi	r24, 0x30	; 48
    2c66:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <dec>
				}
				sscanf(gps,"%ld",&val);
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	9f 93       	push	r25
    2c70:	8f 93       	push	r24
    2c72:	89 ea       	ldi	r24, 0xA9	; 169
    2c74:	90 e2       	ldi	r25, 0x20	; 32
    2c76:	9f 93       	push	r25
    2c78:	8f 93       	push	r24
    2c7a:	8d e0       	ldi	r24, 0x0D	; 13
    2c7c:	91 e2       	ldi	r25, 0x21	; 33
    2c7e:	9f 93       	push	r25
    2c80:	8f 93       	push	r24
    2c82:	eb d7       	rcall	.+4054   	; 0x3c5a <sscanf>
				sscanf(dec,"%d",&val2);
    2c84:	ce 01       	movw	r24, r28
    2c86:	05 96       	adiw	r24, 0x05	; 5
    2c88:	9f 93       	push	r25
    2c8a:	8f 93       	push	r24
    2c8c:	8d ea       	ldi	r24, 0xAD	; 173
    2c8e:	90 e2       	ldi	r25, 0x20	; 32
    2c90:	9f 93       	push	r25
    2c92:	8f 93       	push	r24
    2c94:	8c e1       	ldi	r24, 0x1C	; 28
    2c96:	91 e2       	ldi	r25, 0x21	; 33
    2c98:	9f 93       	push	r25
    2c9a:	8f 93       	push	r24
    2c9c:	de d7       	rcall	.+4028   	; 0x3c5a <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    2c9e:	89 80       	ldd	r8, Y+1	; 0x01
    2ca0:	9a 80       	ldd	r9, Y+2	; 0x02
    2ca2:	ab 80       	ldd	r10, Y+3	; 0x03
    2ca4:	bc 80       	ldd	r11, Y+4	; 0x04
    2ca6:	6d 81       	ldd	r22, Y+5	; 0x05
    2ca8:	7e 81       	ldd	r23, Y+6	; 0x06
    2caa:	07 2e       	mov	r0, r23
    2cac:	00 0c       	add	r0, r0
    2cae:	88 0b       	sbc	r24, r24
    2cb0:	99 0b       	sbc	r25, r25
    2cb2:	99 d3       	rcall	.+1842   	; 0x33e6 <__floatsisf>
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e4       	ldi	r19, 0x40	; 64
    2cb8:	4c e1       	ldi	r20, 0x1C	; 28
    2cba:	56 e4       	ldi	r21, 0x46	; 70
    2cbc:	bf d2       	rcall	.+1406   	; 0x323c <__divsf3>
    2cbe:	6b 01       	movw	r12, r22
    2cc0:	7c 01       	movw	r14, r24
    2cc2:	c5 01       	movw	r24, r10
    2cc4:	b4 01       	movw	r22, r8
    2cc6:	24 e6       	ldi	r18, 0x64	; 100
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	e7 d6       	rcall	.+3534   	; 0x3a9e <__divmodsi4>
    2cd0:	49 01       	movw	r8, r18
    2cd2:	5a 01       	movw	r10, r20
    2cd4:	88 d3       	rcall	.+1808   	; 0x33e6 <__floatsisf>
    2cd6:	9b 01       	movw	r18, r22
    2cd8:	ac 01       	movw	r20, r24
    2cda:	c7 01       	movw	r24, r14
    2cdc:	b6 01       	movw	r22, r12
    2cde:	cd d1       	rcall	.+922    	; 0x307a <__addsf3>
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e7       	ldi	r20, 0x70	; 112
    2ce6:	52 e4       	ldi	r21, 0x42	; 66
    2ce8:	a9 d2       	rcall	.+1362   	; 0x323c <__divsf3>
    2cea:	6b 01       	movw	r12, r22
    2cec:	7c 01       	movw	r14, r24
    2cee:	c5 01       	movw	r24, r10
    2cf0:	b4 01       	movw	r22, r8
    2cf2:	79 d3       	rcall	.+1778   	; 0x33e6 <__floatsisf>
    2cf4:	9b 01       	movw	r18, r22
    2cf6:	ac 01       	movw	r20, r24
    2cf8:	c7 01       	movw	r24, r14
    2cfa:	b6 01       	movw	r22, r12
    2cfc:	be d1       	rcall	.+892    	; 0x307a <__addsf3>
    2cfe:	60 93 cb 20 	sts	0x20CB, r22	; 0x8020cb <gps_lat>
    2d02:	70 93 cc 20 	sts	0x20CC, r23	; 0x8020cc <gps_lat+0x1>
    2d06:	80 93 cd 20 	sts	0x20CD, r24	; 0x8020cd <gps_lat+0x2>
    2d0a:	90 93 ce 20 	sts	0x20CE, r25	; 0x8020ce <gps_lat+0x3>
				break;
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	28 c1       	rjmp	.+592    	; 0x2f64 <__vector_91+0x4e4>
    2d14:	ee e0       	ldi	r30, 0x0E	; 14
    2d16:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2d18:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2d1a:	91 91       	ld	r25, Z+
    2d1c:	9e 32       	cpi	r25, 0x2E	; 46
    2d1e:	29 f4       	brne	.+10     	; 0x2d2a <__vector_91+0x2aa>
    2d20:	01 c0       	rjmp	.+2      	; 0x2d24 <__vector_91+0x2a4>
    2d22:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2d24:	80 93 ed 20 	sts	0x20ED, r24	; 0x8020ed <idx>
						break;
    2d28:	03 c0       	rjmp	.+6      	; 0x2d30 <__vector_91+0x2b0>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	8f 30       	cpi	r24, 0x0F	; 15
    2d2e:	a9 f7       	brne	.-22     	; 0x2d1a <__vector_91+0x29a>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2d30:	20 91 ed 20 	lds	r18, 0x20ED	; 0x8020ed <idx>
    2d34:	42 2f       	mov	r20, r18
    2d36:	50 e0       	ldi	r21, 0x00	; 0
    2d38:	fa 01       	movw	r30, r20
    2d3a:	e3 5f       	subi	r30, 0xF3	; 243
    2d3c:	fe 4d       	sbci	r31, 0xDE	; 222
    2d3e:	80 e2       	ldi	r24, 0x20	; 32
    2d40:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2d42:	2f 5f       	subi	r18, 0xFF	; 255
    2d44:	2f 30       	cpi	r18, 0x0F	; 15
    2d46:	f8 f4       	brcc	.+62     	; 0x2d86 <__vector_91+0x306>
					if(gps[i] == 32){
    2d48:	82 2f       	mov	r24, r18
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	e3 5f       	subi	r30, 0xF3	; 243
    2d50:	fe 4d       	sbci	r31, 0xDE	; 222
    2d52:	30 81       	ld	r19, Z
    2d54:	30 32       	cpi	r19, 0x20	; 32
    2d56:	b9 f0       	breq	.+46     	; 0x2d86 <__vector_91+0x306>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2d58:	60 e2       	ldi	r22, 0x20	; 32
    2d5a:	08 c0       	rjmp	.+16     	; 0x2d6c <__vector_91+0x2ec>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2d5c:	82 2f       	mov	r24, r18
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	fc 01       	movw	r30, r24
    2d62:	e3 5f       	subi	r30, 0xF3	; 243
    2d64:	fe 4d       	sbci	r31, 0xDE	; 222
    2d66:	30 81       	ld	r19, Z
    2d68:	30 32       	cpi	r19, 0x20	; 32
    2d6a:	69 f0       	breq	.+26     	; 0x2d86 <__vector_91+0x306>
						break;
					}
					dec[i-idx-1] = gps[i];
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	e4 1b       	sub	r30, r20
    2d70:	f5 0b       	sbc	r31, r21
    2d72:	e5 5e       	subi	r30, 0xE5	; 229
    2d74:	fe 4d       	sbci	r31, 0xDE	; 222
    2d76:	30 83       	st	Z, r19
					gps[i] = 32;
    2d78:	fc 01       	movw	r30, r24
    2d7a:	e3 5f       	subi	r30, 0xF3	; 243
    2d7c:	fe 4d       	sbci	r31, 0xDE	; 222
    2d7e:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2d80:	2f 5f       	subi	r18, 0xFF	; 255
    2d82:	2f 30       	cpi	r18, 0x0F	; 15
    2d84:	59 f7       	brne	.-42     	; 0x2d5c <__vector_91+0x2dc>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2d86:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <dec>
    2d8a:	80 32       	cpi	r24, 0x20	; 32
    2d8c:	19 f4       	brne	.+6      	; 0x2d94 <__vector_91+0x314>
					dec[0] = '0';
    2d8e:	80 e3       	ldi	r24, 0x30	; 48
    2d90:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <dec>
				}
				sscanf(gps,"%ld",&val);
    2d94:	ce 01       	movw	r24, r28
    2d96:	01 96       	adiw	r24, 0x01	; 1
    2d98:	9f 93       	push	r25
    2d9a:	8f 93       	push	r24
    2d9c:	89 ea       	ldi	r24, 0xA9	; 169
    2d9e:	90 e2       	ldi	r25, 0x20	; 32
    2da0:	9f 93       	push	r25
    2da2:	8f 93       	push	r24
    2da4:	8d e0       	ldi	r24, 0x0D	; 13
    2da6:	91 e2       	ldi	r25, 0x21	; 33
    2da8:	9f 93       	push	r25
    2daa:	8f 93       	push	r24
    2dac:	56 d7       	rcall	.+3756   	; 0x3c5a <sscanf>
				sscanf(dec,"%d",&val2);
    2dae:	ce 01       	movw	r24, r28
    2db0:	05 96       	adiw	r24, 0x05	; 5
    2db2:	9f 93       	push	r25
    2db4:	8f 93       	push	r24
    2db6:	8d ea       	ldi	r24, 0xAD	; 173
    2db8:	90 e2       	ldi	r25, 0x20	; 32
    2dba:	9f 93       	push	r25
    2dbc:	8f 93       	push	r24
    2dbe:	8c e1       	ldi	r24, 0x1C	; 28
    2dc0:	91 e2       	ldi	r25, 0x21	; 33
    2dc2:	9f 93       	push	r25
    2dc4:	8f 93       	push	r24
    2dc6:	49 d7       	rcall	.+3730   	; 0x3c5a <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    2dc8:	89 80       	ldd	r8, Y+1	; 0x01
    2dca:	9a 80       	ldd	r9, Y+2	; 0x02
    2dcc:	ab 80       	ldd	r10, Y+3	; 0x03
    2dce:	bc 80       	ldd	r11, Y+4	; 0x04
    2dd0:	6d 81       	ldd	r22, Y+5	; 0x05
    2dd2:	7e 81       	ldd	r23, Y+6	; 0x06
    2dd4:	07 2e       	mov	r0, r23
    2dd6:	00 0c       	add	r0, r0
    2dd8:	88 0b       	sbc	r24, r24
    2dda:	99 0b       	sbc	r25, r25
    2ddc:	04 d3       	rcall	.+1544   	; 0x33e6 <__floatsisf>
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e4       	ldi	r19, 0x40	; 64
    2de2:	4c e1       	ldi	r20, 0x1C	; 28
    2de4:	56 e4       	ldi	r21, 0x46	; 70
    2de6:	2a d2       	rcall	.+1108   	; 0x323c <__divsf3>
    2de8:	6b 01       	movw	r12, r22
    2dea:	7c 01       	movw	r14, r24
    2dec:	c5 01       	movw	r24, r10
    2dee:	b4 01       	movw	r22, r8
    2df0:	24 e6       	ldi	r18, 0x64	; 100
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	50 e0       	ldi	r21, 0x00	; 0
    2df8:	52 d6       	rcall	.+3236   	; 0x3a9e <__divmodsi4>
    2dfa:	49 01       	movw	r8, r18
    2dfc:	5a 01       	movw	r10, r20
    2dfe:	f3 d2       	rcall	.+1510   	; 0x33e6 <__floatsisf>
    2e00:	9b 01       	movw	r18, r22
    2e02:	ac 01       	movw	r20, r24
    2e04:	c7 01       	movw	r24, r14
    2e06:	b6 01       	movw	r22, r12
    2e08:	38 d1       	rcall	.+624    	; 0x307a <__addsf3>
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e7       	ldi	r20, 0x70	; 112
    2e10:	52 e4       	ldi	r21, 0x42	; 66
    2e12:	14 d2       	rcall	.+1064   	; 0x323c <__divsf3>
    2e14:	6b 01       	movw	r12, r22
    2e16:	7c 01       	movw	r14, r24
    2e18:	c5 01       	movw	r24, r10
    2e1a:	b4 01       	movw	r22, r8
    2e1c:	e4 d2       	rcall	.+1480   	; 0x33e6 <__floatsisf>
    2e1e:	9b 01       	movw	r18, r22
    2e20:	ac 01       	movw	r20, r24
    2e22:	c7 01       	movw	r24, r14
    2e24:	b6 01       	movw	r22, r12
    2e26:	29 d1       	rcall	.+594    	; 0x307a <__addsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	b0 58       	subi	r27, 0x80	; 128
    2e2e:	80 93 c7 20 	sts	0x20C7, r24	; 0x8020c7 <gps_long>
    2e32:	90 93 c8 20 	sts	0x20C8, r25	; 0x8020c8 <gps_long+0x1>
    2e36:	a0 93 c9 20 	sts	0x20C9, r26	; 0x8020c9 <gps_long+0x2>
    2e3a:	b0 93 ca 20 	sts	0x20CA, r27	; 0x8020ca <gps_long+0x3>
    2e3e:	cd bf       	out	0x3d, r28	; 61
				break;
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	90 c0       	rjmp	.+288    	; 0x2f64 <__vector_91+0x4e4>
    2e44:	81 ec       	ldi	r24, 0xC1	; 193
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    2e46:	90 e2       	ldi	r25, 0x20	; 32
    2e48:	9f 93       	push	r25
    2e4a:	8f 93       	push	r24
    2e4c:	8d ea       	ldi	r24, 0xAD	; 173
    2e4e:	90 e2       	ldi	r25, 0x20	; 32
    2e50:	9f 93       	push	r25
    2e52:	8f 93       	push	r24
    2e54:	8d e0       	ldi	r24, 0x0D	; 13
    2e56:	91 e2       	ldi	r25, 0x21	; 33
    2e58:	9f 93       	push	r25
    2e5a:	8f 93       	push	r24
    2e5c:	fe d6       	rcall	.+3580   	; 0x3c5a <sscanf>
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
				break;
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	7c c0       	rjmp	.+248    	; 0x2f64 <__vector_91+0x4e4>
    2e6c:	ee e0       	ldi	r30, 0x0E	; 14
    2e6e:	f1 e2       	ldi	r31, 0x21	; 33
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2e74:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    2e76:	29 f4       	brne	.+10     	; 0x2e82 <__vector_91+0x402>
    2e78:	01 c0       	rjmp	.+2      	; 0x2e7c <__vector_91+0x3fc>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	80 93 ed 20 	sts	0x20ED, r24	; 0x8020ed <idx>
						idx = i;
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <__vector_91+0x408>
    2e82:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    2e84:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2e86:	a9 f7       	brne	.-22     	; 0x2e72 <__vector_91+0x3f2>
    2e88:	20 91 ed 20 	lds	r18, 0x20ED	; 0x8020ed <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2e8c:	42 2f       	mov	r20, r18
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	fa 01       	movw	r30, r20
    2e92:	e3 5f       	subi	r30, 0xF3	; 243
    2e94:	fe 4d       	sbci	r31, 0xDE	; 222
    2e96:	80 e2       	ldi	r24, 0x20	; 32
    2e98:	80 83       	st	Z, r24
    2e9a:	2f 5f       	subi	r18, 0xFF	; 255
    2e9c:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    2e9e:	f8 f4       	brcc	.+62     	; 0x2ede <__vector_91+0x45e>
    2ea0:	82 2f       	mov	r24, r18
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	e3 5f       	subi	r30, 0xF3	; 243
    2ea8:	fe 4d       	sbci	r31, 0xDE	; 222
    2eaa:	30 81       	ld	r19, Z
    2eac:	30 32       	cpi	r19, 0x20	; 32
    2eae:	b9 f0       	breq	.+46     	; 0x2ede <__vector_91+0x45e>
    2eb0:	60 e2       	ldi	r22, 0x20	; 32
    2eb2:	08 c0       	rjmp	.+16     	; 0x2ec4 <__vector_91+0x444>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2eb4:	82 2f       	mov	r24, r18
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2eb8:	fc 01       	movw	r30, r24
    2eba:	e3 5f       	subi	r30, 0xF3	; 243
    2ebc:	fe 4d       	sbci	r31, 0xDE	; 222
    2ebe:	30 81       	ld	r19, Z
    2ec0:	30 32       	cpi	r19, 0x20	; 32
    2ec2:	69 f0       	breq	.+26     	; 0x2ede <__vector_91+0x45e>
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    2ec8:	f5 0b       	sbc	r31, r21
    2eca:	e5 5e       	subi	r30, 0xE5	; 229
    2ecc:	fe 4d       	sbci	r31, 0xDE	; 222
    2ece:	30 83       	st	Z, r19
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	e3 5f       	subi	r30, 0xF3	; 243
					gps[i] = 32;
    2ed4:	fe 4d       	sbci	r31, 0xDE	; 222
    2ed6:	60 83       	st	Z, r22
    2ed8:	2f 5f       	subi	r18, 0xFF	; 255
    2eda:	2f 30       	cpi	r18, 0x0F	; 15
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2edc:	59 f7       	brne	.-42     	; 0x2eb4 <__vector_91+0x434>
    2ede:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2ee2:	80 32       	cpi	r24, 0x20	; 32
    2ee4:	19 f4       	brne	.+6      	; 0x2eec <__vector_91+0x46c>
    2ee6:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    2ee8:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <dec>
    2eec:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    2eee:	01 96       	adiw	r24, 0x01	; 1
    2ef0:	9f 93       	push	r25
    2ef2:	8f 93       	push	r24
    2ef4:	89 ea       	ldi	r24, 0xA9	; 169
    2ef6:	90 e2       	ldi	r25, 0x20	; 32
    2ef8:	9f 93       	push	r25
    2efa:	8f 93       	push	r24
    2efc:	8d e0       	ldi	r24, 0x0D	; 13
    2efe:	91 e2       	ldi	r25, 0x21	; 33
    2f00:	9f 93       	push	r25
    2f02:	8f 93       	push	r24
    2f04:	aa d6       	rcall	.+3412   	; 0x3c5a <sscanf>
				sscanf(dec,"%d",&val2);
    2f06:	ce 01       	movw	r24, r28
    2f08:	05 96       	adiw	r24, 0x05	; 5
    2f0a:	9f 93       	push	r25
    2f0c:	8f 93       	push	r24
    2f0e:	8d ea       	ldi	r24, 0xAD	; 173
    2f10:	90 e2       	ldi	r25, 0x20	; 32
    2f12:	9f 93       	push	r25
    2f14:	8f 93       	push	r24
    2f16:	8c e1       	ldi	r24, 0x1C	; 28
    2f18:	91 e2       	ldi	r25, 0x21	; 33
    2f1a:	9f 93       	push	r25
    2f1c:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    2f1e:	9d d6       	rcall	.+3386   	; 0x3c5a <sscanf>
    2f20:	69 81       	ldd	r22, Y+1	; 0x01
    2f22:	7a 81       	ldd	r23, Y+2	; 0x02
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	5e d2       	rcall	.+1212   	; 0x33e6 <__floatsisf>
    2f2a:	6b 01       	movw	r12, r22
    2f2c:	7c 01       	movw	r14, r24
    2f2e:	6d 81       	ldd	r22, Y+5	; 0x05
    2f30:	7e 81       	ldd	r23, Y+6	; 0x06
    2f32:	07 2e       	mov	r0, r23
    2f34:	00 0c       	add	r0, r0
    2f36:	88 0b       	sbc	r24, r24
    2f38:	99 0b       	sbc	r25, r25
    2f3a:	55 d2       	rcall	.+1194   	; 0x33e6 <__floatsisf>
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e2       	ldi	r20, 0x20	; 32
    2f42:	51 e4       	ldi	r21, 0x41	; 65
    2f44:	7b d1       	rcall	.+758    	; 0x323c <__divsf3>
    2f46:	9b 01       	movw	r18, r22
    2f48:	ac 01       	movw	r20, r24
    2f4a:	c7 01       	movw	r24, r14
    2f4c:	b6 01       	movw	r22, r12
    2f4e:	95 d0       	rcall	.+298    	; 0x307a <__addsf3>
    2f50:	60 93 c3 20 	sts	0x20C3, r22	; 0x8020c3 <gps_alt>
    2f54:	70 93 c4 20 	sts	0x20C4, r23	; 0x8020c4 <gps_alt+0x1>
    2f58:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <gps_alt+0x2>
    2f5c:	90 93 c6 20 	sts	0x20C6, r25	; 0x8020c6 <gps_alt+0x3>
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	de bf       	out	0x3e, r29	; 62
				break;
    2f64:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <writing>
		}
	
		if(writing){
    2f68:	88 23       	and	r24, r24
    2f6a:	d1 f0       	breq	.+52     	; 0x2fa0 <__vector_91+0x520>
    2f6c:	10 92 ed 20 	sts	0x20ED, r1	; 0x8020ed <idx>
			idx = 0;
    2f70:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <commas>
			commas++;
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <commas>
    2f7a:	10 92 ef 20 	sts	0x20EF, r1	; 0x8020ef <word_pos>
			word_pos = 0;
    2f7e:	ed e0       	ldi	r30, 0x0D	; 13
    2f80:	f1 e2       	ldi	r31, 0x21	; 33
    2f82:	2c e1       	ldi	r18, 0x1C	; 28
    2f84:	31 e2       	ldi	r19, 0x21	; 33
    2f86:	80 e2       	ldi	r24, 0x20	; 32
    2f88:	81 93       	st	Z+, r24
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2f8a:	2e 17       	cp	r18, r30
    2f8c:	3f 07       	cpc	r19, r31
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2f8e:	e1 f7       	brne	.-8      	; 0x2f88 <__vector_91+0x508>
    2f90:	ec e1       	ldi	r30, 0x1C	; 28
    2f92:	f1 e2       	ldi	r31, 0x21	; 33
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2f94:	80 e2       	ldi	r24, 0x20	; 32
    2f96:	80 83       	st	Z, r24
    2f98:	81 83       	std	Z+1, r24	; 0x01
    2f9a:	82 83       	std	Z+2, r24	; 0x02
    2f9c:	83 83       	std	Z+3, r24	; 0x03
    2f9e:	84 83       	std	Z+4, r24	; 0x04
    2fa0:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <writing>
			}
		}
	}
		
	if(writing){
    2fa4:	88 23       	and	r24, r24
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <__vector_91+0x52a>
    2fa8:	40 c0       	rjmp	.+128    	; 0x302a <__vector_91+0x5aa>
    2faa:	90 91 f0 20 	lds	r25, 0x20F0	; 0x8020f0 <pos>
		switch(pos){
    2fae:	93 30       	cpi	r25, 0x03	; 3
    2fb0:	19 f0       	breq	.+6      	; 0x2fb8 <__vector_91+0x538>
    2fb2:	94 30       	cpi	r25, 0x04	; 4
    2fb4:	31 f0       	breq	.+12     	; 0x2fc2 <__vector_91+0x542>
    2fb6:	09 c0       	rjmp	.+18     	; 0x2fca <__vector_91+0x54a>
    2fb8:	17 34       	cpi	r17, 0x47	; 71
    2fba:	39 f0       	breq	.+14     	; 0x2fca <__vector_91+0x54a>
			case 3:
				if(c != 'G'){
    2fbc:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <writing>
					writing = 0;
    2fc0:	04 c0       	rjmp	.+8      	; 0x2fca <__vector_91+0x54a>
    2fc2:	17 34       	cpi	r17, 0x47	; 71
    2fc4:	11 f0       	breq	.+4      	; 0x2fca <__vector_91+0x54a>
				}
				break;
				
			case 4:
				if(c != 'G'){
    2fc6:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <writing>
					writing = 0;
    2fca:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <word_pos>
				}
				break;
		}
		gps[word_pos] = c;
    2fce:	e8 2f       	mov	r30, r24
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	e3 5f       	subi	r30, 0xF3	; 243
    2fd4:	fe 4d       	sbci	r31, 0xDE	; 222
    2fd6:	10 83       	st	Z, r17
    2fd8:	8f 5f       	subi	r24, 0xFF	; 255
    2fda:	80 93 ef 20 	sts	0x20EF, r24	; 0x8020ef <word_pos>
		word_pos++;
    2fde:	9f 5f       	subi	r25, 0xFF	; 255
    2fe0:	90 93 f0 20 	sts	0x20F0, r25	; 0x8020f0 <pos>
		pos++;
    2fe4:	22 c0       	rjmp	.+68     	; 0x302a <__vector_91+0x5aa>
    2fe6:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <gps>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2fea:	8e 32       	cpi	r24, 0x2E	; 46
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <__vector_91+0x570>
    2fee:	b0 cd       	rjmp	.-1184   	; 0x2b50 <__vector_91+0xd0>
    2ff0:	ee e0       	ldi	r30, 0x0E	; 14
    2ff2:	f1 e2       	ldi	r31, 0x21	; 33
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	a8 cd       	rjmp	.-1200   	; 0x2b48 <__vector_91+0xc8>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2ff8:	19 82       	std	Y+1, r1	; 0x01
    2ffa:	1a 82       	std	Y+2, r1	; 0x02
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    2ffc:	1b 82       	std	Y+3, r1	; 0x03
    2ffe:	1c 82       	std	Y+4, r1	; 0x04
    3000:	1d 82       	std	Y+5, r1	; 0x05
    3002:	1e 82       	std	Y+6, r1	; 0x06
		int16_t val2 = 0;
    3004:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <commas>
		switch(commas){
    3008:	84 30       	cpi	r24, 0x04	; 4
    300a:	09 f4       	brne	.+2      	; 0x300e <__vector_91+0x58e>
    300c:	91 cd       	rjmp	.-1246   	; 0x2b30 <__vector_91+0xb0>
    300e:	30 f4       	brcc	.+12     	; 0x301c <__vector_91+0x59c>
    3010:	81 30       	cpi	r24, 0x01	; 1
    3012:	49 f3       	breq	.-46     	; 0x2fe6 <__vector_91+0x566>
    3014:	82 30       	cpi	r24, 0x02	; 2
    3016:	09 f4       	brne	.+2      	; 0x301a <__vector_91+0x59a>
    3018:	91 cd       	rjmp	.-1246   	; 0x2b3c <__vector_91+0xbc>
    301a:	a4 cf       	rjmp	.-184    	; 0x2f64 <__vector_91+0x4e4>
    301c:	87 30       	cpi	r24, 0x07	; 7
    301e:	09 f4       	brne	.+2      	; 0x3022 <__vector_91+0x5a2>
    3020:	11 cf       	rjmp	.-478    	; 0x2e44 <__vector_91+0x3c4>
    3022:	89 30       	cpi	r24, 0x09	; 9
    3024:	09 f4       	brne	.+2      	; 0x3028 <__vector_91+0x5a8>
    3026:	7e cd       	rjmp	.-1284   	; 0x2b24 <__vector_91+0xa4>
    3028:	9d cf       	rjmp	.-198    	; 0x2f64 <__vector_91+0x4e4>
    302a:	26 96       	adiw	r28, 0x06	; 6
    302c:	cd bf       	out	0x3d, r28	; 61
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	ff 91       	pop	r31
    3036:	ef 91       	pop	r30
    3038:	bf 91       	pop	r27
    303a:	af 91       	pop	r26
    303c:	9f 91       	pop	r25
    303e:	8f 91       	pop	r24
    3040:	7f 91       	pop	r23
    3042:	6f 91       	pop	r22
    3044:	5f 91       	pop	r21
    3046:	4f 91       	pop	r20
    3048:	3f 91       	pop	r19
    304a:	2f 91       	pop	r18
    304c:	1f 91       	pop	r17
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	df 90       	pop	r13
    3054:	cf 90       	pop	r12
    3056:	bf 90       	pop	r11
    3058:	af 90       	pop	r10
    305a:	9f 90       	pop	r9
    305c:	8f 90       	pop	r8
    305e:	0f 90       	pop	r0
    3060:	0b be       	out	0x3b, r0	; 59
    3062:	0f 90       	pop	r0
    3064:	0a be       	out	0x3a, r0	; 58
    3066:	0f 90       	pop	r0
    3068:	09 be       	out	0x39, r0	; 57
    306a:	0f 90       	pop	r0
    306c:	08 be       	out	0x38, r0	; 56
    306e:	0f 90       	pop	r0
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	0f 90       	pop	r0
    3074:	1f 90       	pop	r1
    3076:	18 95       	reti

00003078 <__subsf3>:
    3078:	50 58       	subi	r21, 0x80	; 128

0000307a <__addsf3>:
    307a:	bb 27       	eor	r27, r27
    307c:	aa 27       	eor	r26, r26
    307e:	0e d0       	rcall	.+28     	; 0x309c <__addsf3x>
    3080:	89 c2       	rjmp	.+1298   	; 0x3594 <__fp_round>
    3082:	7a d2       	rcall	.+1268   	; 0x3578 <__fp_pscA>
    3084:	30 f0       	brcs	.+12     	; 0x3092 <__addsf3+0x18>
    3086:	7f d2       	rcall	.+1278   	; 0x3586 <__fp_pscB>
    3088:	20 f0       	brcs	.+8      	; 0x3092 <__addsf3+0x18>
    308a:	31 f4       	brne	.+12     	; 0x3098 <__addsf3+0x1e>
    308c:	9f 3f       	cpi	r25, 0xFF	; 255
    308e:	11 f4       	brne	.+4      	; 0x3094 <__addsf3+0x1a>
    3090:	1e f4       	brtc	.+6      	; 0x3098 <__addsf3+0x1e>
    3092:	29 c2       	rjmp	.+1106   	; 0x34e6 <__fp_nan>
    3094:	0e f4       	brtc	.+2      	; 0x3098 <__addsf3+0x1e>
    3096:	e0 95       	com	r30
    3098:	e7 fb       	bst	r30, 7
    309a:	1f c2       	rjmp	.+1086   	; 0x34da <__fp_inf>

0000309c <__addsf3x>:
    309c:	e9 2f       	mov	r30, r25
    309e:	8b d2       	rcall	.+1302   	; 0x35b6 <__fp_split3>
    30a0:	80 f3       	brcs	.-32     	; 0x3082 <__addsf3+0x8>
    30a2:	ba 17       	cp	r27, r26
    30a4:	62 07       	cpc	r22, r18
    30a6:	73 07       	cpc	r23, r19
    30a8:	84 07       	cpc	r24, r20
    30aa:	95 07       	cpc	r25, r21
    30ac:	18 f0       	brcs	.+6      	; 0x30b4 <__addsf3x+0x18>
    30ae:	71 f4       	brne	.+28     	; 0x30cc <__addsf3x+0x30>
    30b0:	9e f5       	brtc	.+102    	; 0x3118 <__addsf3x+0x7c>
    30b2:	a3 c2       	rjmp	.+1350   	; 0x35fa <__fp_zero>
    30b4:	0e f4       	brtc	.+2      	; 0x30b8 <__addsf3x+0x1c>
    30b6:	e0 95       	com	r30
    30b8:	0b 2e       	mov	r0, r27
    30ba:	ba 2f       	mov	r27, r26
    30bc:	a0 2d       	mov	r26, r0
    30be:	0b 01       	movw	r0, r22
    30c0:	b9 01       	movw	r22, r18
    30c2:	90 01       	movw	r18, r0
    30c4:	0c 01       	movw	r0, r24
    30c6:	ca 01       	movw	r24, r20
    30c8:	a0 01       	movw	r20, r0
    30ca:	11 24       	eor	r1, r1
    30cc:	ff 27       	eor	r31, r31
    30ce:	59 1b       	sub	r21, r25
    30d0:	99 f0       	breq	.+38     	; 0x30f8 <__addsf3x+0x5c>
    30d2:	59 3f       	cpi	r21, 0xF9	; 249
    30d4:	50 f4       	brcc	.+20     	; 0x30ea <__addsf3x+0x4e>
    30d6:	50 3e       	cpi	r21, 0xE0	; 224
    30d8:	68 f1       	brcs	.+90     	; 0x3134 <__addsf3x+0x98>
    30da:	1a 16       	cp	r1, r26
    30dc:	f0 40       	sbci	r31, 0x00	; 0
    30de:	a2 2f       	mov	r26, r18
    30e0:	23 2f       	mov	r18, r19
    30e2:	34 2f       	mov	r19, r20
    30e4:	44 27       	eor	r20, r20
    30e6:	58 5f       	subi	r21, 0xF8	; 248
    30e8:	f3 cf       	rjmp	.-26     	; 0x30d0 <__addsf3x+0x34>
    30ea:	46 95       	lsr	r20
    30ec:	37 95       	ror	r19
    30ee:	27 95       	ror	r18
    30f0:	a7 95       	ror	r26
    30f2:	f0 40       	sbci	r31, 0x00	; 0
    30f4:	53 95       	inc	r21
    30f6:	c9 f7       	brne	.-14     	; 0x30ea <__addsf3x+0x4e>
    30f8:	7e f4       	brtc	.+30     	; 0x3118 <__addsf3x+0x7c>
    30fa:	1f 16       	cp	r1, r31
    30fc:	ba 0b       	sbc	r27, r26
    30fe:	62 0b       	sbc	r22, r18
    3100:	73 0b       	sbc	r23, r19
    3102:	84 0b       	sbc	r24, r20
    3104:	ba f0       	brmi	.+46     	; 0x3134 <__addsf3x+0x98>
    3106:	91 50       	subi	r25, 0x01	; 1
    3108:	a1 f0       	breq	.+40     	; 0x3132 <__addsf3x+0x96>
    310a:	ff 0f       	add	r31, r31
    310c:	bb 1f       	adc	r27, r27
    310e:	66 1f       	adc	r22, r22
    3110:	77 1f       	adc	r23, r23
    3112:	88 1f       	adc	r24, r24
    3114:	c2 f7       	brpl	.-16     	; 0x3106 <__addsf3x+0x6a>
    3116:	0e c0       	rjmp	.+28     	; 0x3134 <__addsf3x+0x98>
    3118:	ba 0f       	add	r27, r26
    311a:	62 1f       	adc	r22, r18
    311c:	73 1f       	adc	r23, r19
    311e:	84 1f       	adc	r24, r20
    3120:	48 f4       	brcc	.+18     	; 0x3134 <__addsf3x+0x98>
    3122:	87 95       	ror	r24
    3124:	77 95       	ror	r23
    3126:	67 95       	ror	r22
    3128:	b7 95       	ror	r27
    312a:	f7 95       	ror	r31
    312c:	9e 3f       	cpi	r25, 0xFE	; 254
    312e:	08 f0       	brcs	.+2      	; 0x3132 <__addsf3x+0x96>
    3130:	b3 cf       	rjmp	.-154    	; 0x3098 <__addsf3+0x1e>
    3132:	93 95       	inc	r25
    3134:	88 0f       	add	r24, r24
    3136:	08 f0       	brcs	.+2      	; 0x313a <__addsf3x+0x9e>
    3138:	99 27       	eor	r25, r25
    313a:	ee 0f       	add	r30, r30
    313c:	97 95       	ror	r25
    313e:	87 95       	ror	r24
    3140:	08 95       	ret

00003142 <asin>:
    3142:	9f 93       	push	r25
    3144:	9f 77       	andi	r25, 0x7F	; 127
    3146:	ee e3       	ldi	r30, 0x3E	; 62
    3148:	89 37       	cpi	r24, 0x79	; 121
    314a:	9e 07       	cpc	r25, r30
    314c:	20 f4       	brcc	.+8      	; 0x3156 <asin+0x14>
    314e:	ec ef       	ldi	r30, 0xFC	; 252
    3150:	f1 e0       	ldi	r31, 0x01	; 1
    3152:	01 d2       	rcall	.+1026   	; 0x3556 <__fp_powsodd>
    3154:	09 c0       	rjmp	.+18     	; 0x3168 <asin+0x26>
    3156:	82 d1       	rcall	.+772    	; 0x345c <__fp_arccos>
    3158:	90 58       	subi	r25, 0x80	; 128
    315a:	a2 ea       	ldi	r26, 0xA2	; 162
    315c:	2a ed       	ldi	r18, 0xDA	; 218
    315e:	3f e0       	ldi	r19, 0x0F	; 15
    3160:	49 ec       	ldi	r20, 0xC9	; 201
    3162:	5f e3       	ldi	r21, 0x3F	; 63
    3164:	9b df       	rcall	.-202    	; 0x309c <__addsf3x>
    3166:	16 d2       	rcall	.+1068   	; 0x3594 <__fp_round>
    3168:	0f 90       	pop	r0
    316a:	07 fc       	sbrc	r0, 7
    316c:	90 58       	subi	r25, 0x80	; 128
    316e:	08 95       	ret
    3170:	03 d2       	rcall	.+1030   	; 0x3578 <__fp_pscA>
    3172:	58 f0       	brcs	.+22     	; 0x318a <asin+0x48>
    3174:	80 e8       	ldi	r24, 0x80	; 128
    3176:	91 e0       	ldi	r25, 0x01	; 1
    3178:	09 f4       	brne	.+2      	; 0x317c <asin+0x3a>
    317a:	9e ef       	ldi	r25, 0xFE	; 254
    317c:	04 d2       	rcall	.+1032   	; 0x3586 <__fp_pscB>
    317e:	28 f0       	brcs	.+10     	; 0x318a <asin+0x48>
    3180:	40 e8       	ldi	r20, 0x80	; 128
    3182:	51 e0       	ldi	r21, 0x01	; 1
    3184:	59 f4       	brne	.+22     	; 0x319c <atan2+0xe>
    3186:	5e ef       	ldi	r21, 0xFE	; 254
    3188:	09 c0       	rjmp	.+18     	; 0x319c <atan2+0xe>
    318a:	ad c1       	rjmp	.+858    	; 0x34e6 <__fp_nan>
    318c:	36 c2       	rjmp	.+1132   	; 0x35fa <__fp_zero>

0000318e <atan2>:
    318e:	e9 2f       	mov	r30, r25
    3190:	e0 78       	andi	r30, 0x80	; 128
    3192:	11 d2       	rcall	.+1058   	; 0x35b6 <__fp_split3>
    3194:	68 f3       	brcs	.-38     	; 0x3170 <asin+0x2e>
    3196:	09 2e       	mov	r0, r25
    3198:	05 2a       	or	r0, r21
    319a:	c1 f3       	breq	.-16     	; 0x318c <asin+0x4a>
    319c:	26 17       	cp	r18, r22
    319e:	37 07       	cpc	r19, r23
    31a0:	48 07       	cpc	r20, r24
    31a2:	59 07       	cpc	r21, r25
    31a4:	38 f0       	brcs	.+14     	; 0x31b4 <atan2+0x26>
    31a6:	0e 2e       	mov	r0, r30
    31a8:	07 f8       	bld	r0, 7
    31aa:	e0 25       	eor	r30, r0
    31ac:	69 f0       	breq	.+26     	; 0x31c8 <atan2+0x3a>
    31ae:	e0 25       	eor	r30, r0
    31b0:	e0 64       	ori	r30, 0x40	; 64
    31b2:	0a c0       	rjmp	.+20     	; 0x31c8 <atan2+0x3a>
    31b4:	ef 63       	ori	r30, 0x3F	; 63
    31b6:	07 f8       	bld	r0, 7
    31b8:	00 94       	com	r0
    31ba:	07 fa       	bst	r0, 7
    31bc:	db 01       	movw	r26, r22
    31be:	b9 01       	movw	r22, r18
    31c0:	9d 01       	movw	r18, r26
    31c2:	dc 01       	movw	r26, r24
    31c4:	ca 01       	movw	r24, r20
    31c6:	ad 01       	movw	r20, r26
    31c8:	ef 93       	push	r30
    31ca:	47 d0       	rcall	.+142    	; 0x325a <__divsf3_pse>
    31cc:	e3 d1       	rcall	.+966    	; 0x3594 <__fp_round>
    31ce:	0a d0       	rcall	.+20     	; 0x31e4 <atan>
    31d0:	5f 91       	pop	r21
    31d2:	55 23       	and	r21, r21
    31d4:	31 f0       	breq	.+12     	; 0x31e2 <atan2+0x54>
    31d6:	2b ed       	ldi	r18, 0xDB	; 219
    31d8:	3f e0       	ldi	r19, 0x0F	; 15
    31da:	49 e4       	ldi	r20, 0x49	; 73
    31dc:	50 fd       	sbrc	r21, 0
    31de:	49 ec       	ldi	r20, 0xC9	; 201
    31e0:	4c cf       	rjmp	.-360    	; 0x307a <__addsf3>
    31e2:	08 95       	ret

000031e4 <atan>:
    31e4:	df 93       	push	r29
    31e6:	dd 27       	eor	r29, r29
    31e8:	b9 2f       	mov	r27, r25
    31ea:	bf 77       	andi	r27, 0x7F	; 127
    31ec:	40 e8       	ldi	r20, 0x80	; 128
    31ee:	5f e3       	ldi	r21, 0x3F	; 63
    31f0:	16 16       	cp	r1, r22
    31f2:	17 06       	cpc	r1, r23
    31f4:	48 07       	cpc	r20, r24
    31f6:	5b 07       	cpc	r21, r27
    31f8:	10 f4       	brcc	.+4      	; 0x31fe <atan+0x1a>
    31fa:	d9 2f       	mov	r29, r25
    31fc:	09 d2       	rcall	.+1042   	; 0x3610 <inverse>
    31fe:	9f 93       	push	r25
    3200:	8f 93       	push	r24
    3202:	7f 93       	push	r23
    3204:	6f 93       	push	r22
    3206:	fc d2       	rcall	.+1528   	; 0x3800 <square>
    3208:	e0 e1       	ldi	r30, 0x10	; 16
    320a:	f2 e0       	ldi	r31, 0x02	; 2
    320c:	7f d1       	rcall	.+766    	; 0x350c <__fp_powser>
    320e:	c2 d1       	rcall	.+900    	; 0x3594 <__fp_round>
    3210:	2f 91       	pop	r18
    3212:	3f 91       	pop	r19
    3214:	4f 91       	pop	r20
    3216:	5f 91       	pop	r21
    3218:	0e d2       	rcall	.+1052   	; 0x3636 <__mulsf3x>
    321a:	dd 23       	and	r29, r29
    321c:	49 f0       	breq	.+18     	; 0x3230 <atan+0x4c>
    321e:	90 58       	subi	r25, 0x80	; 128
    3220:	a2 ea       	ldi	r26, 0xA2	; 162
    3222:	2a ed       	ldi	r18, 0xDA	; 218
    3224:	3f e0       	ldi	r19, 0x0F	; 15
    3226:	49 ec       	ldi	r20, 0xC9	; 201
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	d0 78       	andi	r29, 0x80	; 128
    322c:	5d 27       	eor	r21, r29
    322e:	36 df       	rcall	.-404    	; 0x309c <__addsf3x>
    3230:	df 91       	pop	r29
    3232:	b0 c1       	rjmp	.+864    	; 0x3594 <__fp_round>

00003234 <__cmpsf2>:
    3234:	2e d1       	rcall	.+604    	; 0x3492 <__fp_cmp>
    3236:	08 f4       	brcc	.+2      	; 0x323a <__cmpsf2+0x6>
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	08 95       	ret

0000323c <__divsf3>:
    323c:	0c d0       	rcall	.+24     	; 0x3256 <__divsf3x>
    323e:	aa c1       	rjmp	.+852    	; 0x3594 <__fp_round>
    3240:	a2 d1       	rcall	.+836    	; 0x3586 <__fp_pscB>
    3242:	40 f0       	brcs	.+16     	; 0x3254 <__divsf3+0x18>
    3244:	99 d1       	rcall	.+818    	; 0x3578 <__fp_pscA>
    3246:	30 f0       	brcs	.+12     	; 0x3254 <__divsf3+0x18>
    3248:	21 f4       	brne	.+8      	; 0x3252 <__divsf3+0x16>
    324a:	5f 3f       	cpi	r21, 0xFF	; 255
    324c:	19 f0       	breq	.+6      	; 0x3254 <__divsf3+0x18>
    324e:	45 c1       	rjmp	.+650    	; 0x34da <__fp_inf>
    3250:	51 11       	cpse	r21, r1
    3252:	d4 c1       	rjmp	.+936    	; 0x35fc <__fp_szero>
    3254:	48 c1       	rjmp	.+656    	; 0x34e6 <__fp_nan>

00003256 <__divsf3x>:
    3256:	af d1       	rcall	.+862    	; 0x35b6 <__fp_split3>
    3258:	98 f3       	brcs	.-26     	; 0x3240 <__divsf3+0x4>

0000325a <__divsf3_pse>:
    325a:	99 23       	and	r25, r25
    325c:	c9 f3       	breq	.-14     	; 0x3250 <__divsf3+0x14>
    325e:	55 23       	and	r21, r21
    3260:	b1 f3       	breq	.-20     	; 0x324e <__divsf3+0x12>
    3262:	95 1b       	sub	r25, r21
    3264:	55 0b       	sbc	r21, r21
    3266:	bb 27       	eor	r27, r27
    3268:	aa 27       	eor	r26, r26
    326a:	62 17       	cp	r22, r18
    326c:	73 07       	cpc	r23, r19
    326e:	84 07       	cpc	r24, r20
    3270:	38 f0       	brcs	.+14     	; 0x3280 <__divsf3_pse+0x26>
    3272:	9f 5f       	subi	r25, 0xFF	; 255
    3274:	5f 4f       	sbci	r21, 0xFF	; 255
    3276:	22 0f       	add	r18, r18
    3278:	33 1f       	adc	r19, r19
    327a:	44 1f       	adc	r20, r20
    327c:	aa 1f       	adc	r26, r26
    327e:	a9 f3       	breq	.-22     	; 0x326a <__divsf3_pse+0x10>
    3280:	33 d0       	rcall	.+102    	; 0x32e8 <__divsf3_pse+0x8e>
    3282:	0e 2e       	mov	r0, r30
    3284:	3a f0       	brmi	.+14     	; 0x3294 <__divsf3_pse+0x3a>
    3286:	e0 e8       	ldi	r30, 0x80	; 128
    3288:	30 d0       	rcall	.+96     	; 0x32ea <__divsf3_pse+0x90>
    328a:	91 50       	subi	r25, 0x01	; 1
    328c:	50 40       	sbci	r21, 0x00	; 0
    328e:	e6 95       	lsr	r30
    3290:	00 1c       	adc	r0, r0
    3292:	ca f7       	brpl	.-14     	; 0x3286 <__divsf3_pse+0x2c>
    3294:	29 d0       	rcall	.+82     	; 0x32e8 <__divsf3_pse+0x8e>
    3296:	fe 2f       	mov	r31, r30
    3298:	27 d0       	rcall	.+78     	; 0x32e8 <__divsf3_pse+0x8e>
    329a:	66 0f       	add	r22, r22
    329c:	77 1f       	adc	r23, r23
    329e:	88 1f       	adc	r24, r24
    32a0:	bb 1f       	adc	r27, r27
    32a2:	26 17       	cp	r18, r22
    32a4:	37 07       	cpc	r19, r23
    32a6:	48 07       	cpc	r20, r24
    32a8:	ab 07       	cpc	r26, r27
    32aa:	b0 e8       	ldi	r27, 0x80	; 128
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <__divsf3_pse+0x56>
    32ae:	bb 0b       	sbc	r27, r27
    32b0:	80 2d       	mov	r24, r0
    32b2:	bf 01       	movw	r22, r30
    32b4:	ff 27       	eor	r31, r31
    32b6:	93 58       	subi	r25, 0x83	; 131
    32b8:	5f 4f       	sbci	r21, 0xFF	; 255
    32ba:	2a f0       	brmi	.+10     	; 0x32c6 <__divsf3_pse+0x6c>
    32bc:	9e 3f       	cpi	r25, 0xFE	; 254
    32be:	51 05       	cpc	r21, r1
    32c0:	68 f0       	brcs	.+26     	; 0x32dc <__divsf3_pse+0x82>
    32c2:	0b c1       	rjmp	.+534    	; 0x34da <__fp_inf>
    32c4:	9b c1       	rjmp	.+822    	; 0x35fc <__fp_szero>
    32c6:	5f 3f       	cpi	r21, 0xFF	; 255
    32c8:	ec f3       	brlt	.-6      	; 0x32c4 <__divsf3_pse+0x6a>
    32ca:	98 3e       	cpi	r25, 0xE8	; 232
    32cc:	dc f3       	brlt	.-10     	; 0x32c4 <__divsf3_pse+0x6a>
    32ce:	86 95       	lsr	r24
    32d0:	77 95       	ror	r23
    32d2:	67 95       	ror	r22
    32d4:	b7 95       	ror	r27
    32d6:	f7 95       	ror	r31
    32d8:	9f 5f       	subi	r25, 0xFF	; 255
    32da:	c9 f7       	brne	.-14     	; 0x32ce <__divsf3_pse+0x74>
    32dc:	88 0f       	add	r24, r24
    32de:	91 1d       	adc	r25, r1
    32e0:	96 95       	lsr	r25
    32e2:	87 95       	ror	r24
    32e4:	97 f9       	bld	r25, 7
    32e6:	08 95       	ret
    32e8:	e1 e0       	ldi	r30, 0x01	; 1
    32ea:	66 0f       	add	r22, r22
    32ec:	77 1f       	adc	r23, r23
    32ee:	88 1f       	adc	r24, r24
    32f0:	bb 1f       	adc	r27, r27
    32f2:	62 17       	cp	r22, r18
    32f4:	73 07       	cpc	r23, r19
    32f6:	84 07       	cpc	r24, r20
    32f8:	ba 07       	cpc	r27, r26
    32fa:	20 f0       	brcs	.+8      	; 0x3304 <__divsf3_pse+0xaa>
    32fc:	62 1b       	sub	r22, r18
    32fe:	73 0b       	sbc	r23, r19
    3300:	84 0b       	sbc	r24, r20
    3302:	ba 0b       	sbc	r27, r26
    3304:	ee 1f       	adc	r30, r30
    3306:	88 f7       	brcc	.-30     	; 0x32ea <__divsf3_pse+0x90>
    3308:	e0 95       	com	r30
    330a:	08 95       	ret

0000330c <__fixsfdi>:
    330c:	be e3       	ldi	r27, 0x3E	; 62
    330e:	04 d0       	rcall	.+8      	; 0x3318 <__fixunssfdi+0x2>
    3310:	08 f4       	brcc	.+2      	; 0x3314 <__fixsfdi+0x8>
    3312:	90 e8       	ldi	r25, 0x80	; 128
    3314:	08 95       	ret

00003316 <__fixunssfdi>:
    3316:	bf e3       	ldi	r27, 0x3F	; 63
    3318:	22 27       	eor	r18, r18
    331a:	33 27       	eor	r19, r19
    331c:	a9 01       	movw	r20, r18
    331e:	53 d1       	rcall	.+678    	; 0x35c6 <__fp_splitA>
    3320:	58 f1       	brcs	.+86     	; 0x3378 <__fixunssfdi+0x62>
    3322:	9f 57       	subi	r25, 0x7F	; 127
    3324:	40 f1       	brcs	.+80     	; 0x3376 <__fixunssfdi+0x60>
    3326:	b9 17       	cp	r27, r25
    3328:	38 f1       	brcs	.+78     	; 0x3378 <__fixunssfdi+0x62>
    332a:	bf e3       	ldi	r27, 0x3F	; 63
    332c:	b9 1b       	sub	r27, r25
    332e:	99 27       	eor	r25, r25
    3330:	b8 50       	subi	r27, 0x08	; 8
    3332:	3a f4       	brpl	.+14     	; 0x3342 <__fixunssfdi+0x2c>
    3334:	66 0f       	add	r22, r22
    3336:	77 1f       	adc	r23, r23
    3338:	88 1f       	adc	r24, r24
    333a:	99 1f       	adc	r25, r25
    333c:	b3 95       	inc	r27
    333e:	d2 f3       	brmi	.-12     	; 0x3334 <__fixunssfdi+0x1e>
    3340:	16 c0       	rjmp	.+44     	; 0x336e <__fixunssfdi+0x58>
    3342:	b8 50       	subi	r27, 0x08	; 8
    3344:	4a f0       	brmi	.+18     	; 0x3358 <__fixunssfdi+0x42>
    3346:	23 2f       	mov	r18, r19
    3348:	34 2f       	mov	r19, r20
    334a:	45 2f       	mov	r20, r21
    334c:	56 2f       	mov	r21, r22
    334e:	67 2f       	mov	r22, r23
    3350:	78 2f       	mov	r23, r24
    3352:	88 27       	eor	r24, r24
    3354:	b8 50       	subi	r27, 0x08	; 8
    3356:	ba f7       	brpl	.-18     	; 0x3346 <__fixunssfdi+0x30>
    3358:	b8 5f       	subi	r27, 0xF8	; 248
    335a:	49 f0       	breq	.+18     	; 0x336e <__fixunssfdi+0x58>
    335c:	86 95       	lsr	r24
    335e:	77 95       	ror	r23
    3360:	67 95       	ror	r22
    3362:	57 95       	ror	r21
    3364:	47 95       	ror	r20
    3366:	37 95       	ror	r19
    3368:	27 95       	ror	r18
    336a:	ba 95       	dec	r27
    336c:	b9 f7       	brne	.-18     	; 0x335c <__fixunssfdi+0x46>
    336e:	0e f4       	brtc	.+2      	; 0x3372 <__fixunssfdi+0x5c>
    3370:	bd d0       	rcall	.+378    	; 0x34ec <__fp_negdi>
    3372:	88 94       	clc
    3374:	08 95       	ret
    3376:	88 94       	clc
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	70 e0       	ldi	r23, 0x00	; 0
    337c:	cb 01       	movw	r24, r22
    337e:	08 95       	ret

00003380 <__fixsfsi>:
    3380:	04 d0       	rcall	.+8      	; 0x338a <__fixunssfsi>
    3382:	68 94       	set
    3384:	b1 11       	cpse	r27, r1
    3386:	3a c1       	rjmp	.+628    	; 0x35fc <__fp_szero>
    3388:	08 95       	ret

0000338a <__fixunssfsi>:
    338a:	1d d1       	rcall	.+570    	; 0x35c6 <__fp_splitA>
    338c:	88 f0       	brcs	.+34     	; 0x33b0 <__fixunssfsi+0x26>
    338e:	9f 57       	subi	r25, 0x7F	; 127
    3390:	90 f0       	brcs	.+36     	; 0x33b6 <__fixunssfsi+0x2c>
    3392:	b9 2f       	mov	r27, r25
    3394:	99 27       	eor	r25, r25
    3396:	b7 51       	subi	r27, 0x17	; 23
    3398:	a0 f0       	brcs	.+40     	; 0x33c2 <__fixunssfsi+0x38>
    339a:	d1 f0       	breq	.+52     	; 0x33d0 <__fixunssfsi+0x46>
    339c:	66 0f       	add	r22, r22
    339e:	77 1f       	adc	r23, r23
    33a0:	88 1f       	adc	r24, r24
    33a2:	99 1f       	adc	r25, r25
    33a4:	1a f0       	brmi	.+6      	; 0x33ac <__fixunssfsi+0x22>
    33a6:	ba 95       	dec	r27
    33a8:	c9 f7       	brne	.-14     	; 0x339c <__fixunssfsi+0x12>
    33aa:	12 c0       	rjmp	.+36     	; 0x33d0 <__fixunssfsi+0x46>
    33ac:	b1 30       	cpi	r27, 0x01	; 1
    33ae:	81 f0       	breq	.+32     	; 0x33d0 <__fixunssfsi+0x46>
    33b0:	24 d1       	rcall	.+584    	; 0x35fa <__fp_zero>
    33b2:	b1 e0       	ldi	r27, 0x01	; 1
    33b4:	08 95       	ret
    33b6:	21 c1       	rjmp	.+578    	; 0x35fa <__fp_zero>
    33b8:	67 2f       	mov	r22, r23
    33ba:	78 2f       	mov	r23, r24
    33bc:	88 27       	eor	r24, r24
    33be:	b8 5f       	subi	r27, 0xF8	; 248
    33c0:	39 f0       	breq	.+14     	; 0x33d0 <__fixunssfsi+0x46>
    33c2:	b9 3f       	cpi	r27, 0xF9	; 249
    33c4:	cc f3       	brlt	.-14     	; 0x33b8 <__fixunssfsi+0x2e>
    33c6:	86 95       	lsr	r24
    33c8:	77 95       	ror	r23
    33ca:	67 95       	ror	r22
    33cc:	b3 95       	inc	r27
    33ce:	d9 f7       	brne	.-10     	; 0x33c6 <__fixunssfsi+0x3c>
    33d0:	3e f4       	brtc	.+14     	; 0x33e0 <__fixunssfsi+0x56>
    33d2:	90 95       	com	r25
    33d4:	80 95       	com	r24
    33d6:	70 95       	com	r23
    33d8:	61 95       	neg	r22
    33da:	7f 4f       	sbci	r23, 0xFF	; 255
    33dc:	8f 4f       	sbci	r24, 0xFF	; 255
    33de:	9f 4f       	sbci	r25, 0xFF	; 255
    33e0:	08 95       	ret

000033e2 <__floatunsisf>:
    33e2:	e8 94       	clt
    33e4:	09 c0       	rjmp	.+18     	; 0x33f8 <__floatsisf+0x12>

000033e6 <__floatsisf>:
    33e6:	97 fb       	bst	r25, 7
    33e8:	3e f4       	brtc	.+14     	; 0x33f8 <__floatsisf+0x12>
    33ea:	90 95       	com	r25
    33ec:	80 95       	com	r24
    33ee:	70 95       	com	r23
    33f0:	61 95       	neg	r22
    33f2:	7f 4f       	sbci	r23, 0xFF	; 255
    33f4:	8f 4f       	sbci	r24, 0xFF	; 255
    33f6:	9f 4f       	sbci	r25, 0xFF	; 255
    33f8:	99 23       	and	r25, r25
    33fa:	a9 f0       	breq	.+42     	; 0x3426 <__floatsisf+0x40>
    33fc:	f9 2f       	mov	r31, r25
    33fe:	96 e9       	ldi	r25, 0x96	; 150
    3400:	bb 27       	eor	r27, r27
    3402:	93 95       	inc	r25
    3404:	f6 95       	lsr	r31
    3406:	87 95       	ror	r24
    3408:	77 95       	ror	r23
    340a:	67 95       	ror	r22
    340c:	b7 95       	ror	r27
    340e:	f1 11       	cpse	r31, r1
    3410:	f8 cf       	rjmp	.-16     	; 0x3402 <__floatsisf+0x1c>
    3412:	fa f4       	brpl	.+62     	; 0x3452 <__floatsisf+0x6c>
    3414:	bb 0f       	add	r27, r27
    3416:	11 f4       	brne	.+4      	; 0x341c <__floatsisf+0x36>
    3418:	60 ff       	sbrs	r22, 0
    341a:	1b c0       	rjmp	.+54     	; 0x3452 <__floatsisf+0x6c>
    341c:	6f 5f       	subi	r22, 0xFF	; 255
    341e:	7f 4f       	sbci	r23, 0xFF	; 255
    3420:	8f 4f       	sbci	r24, 0xFF	; 255
    3422:	9f 4f       	sbci	r25, 0xFF	; 255
    3424:	16 c0       	rjmp	.+44     	; 0x3452 <__floatsisf+0x6c>
    3426:	88 23       	and	r24, r24
    3428:	11 f0       	breq	.+4      	; 0x342e <__floatsisf+0x48>
    342a:	96 e9       	ldi	r25, 0x96	; 150
    342c:	11 c0       	rjmp	.+34     	; 0x3450 <__floatsisf+0x6a>
    342e:	77 23       	and	r23, r23
    3430:	21 f0       	breq	.+8      	; 0x343a <__floatsisf+0x54>
    3432:	9e e8       	ldi	r25, 0x8E	; 142
    3434:	87 2f       	mov	r24, r23
    3436:	76 2f       	mov	r23, r22
    3438:	05 c0       	rjmp	.+10     	; 0x3444 <__floatsisf+0x5e>
    343a:	66 23       	and	r22, r22
    343c:	71 f0       	breq	.+28     	; 0x345a <__floatsisf+0x74>
    343e:	96 e8       	ldi	r25, 0x86	; 134
    3440:	86 2f       	mov	r24, r22
    3442:	70 e0       	ldi	r23, 0x00	; 0
    3444:	60 e0       	ldi	r22, 0x00	; 0
    3446:	2a f0       	brmi	.+10     	; 0x3452 <__floatsisf+0x6c>
    3448:	9a 95       	dec	r25
    344a:	66 0f       	add	r22, r22
    344c:	77 1f       	adc	r23, r23
    344e:	88 1f       	adc	r24, r24
    3450:	da f7       	brpl	.-10     	; 0x3448 <__floatsisf+0x62>
    3452:	88 0f       	add	r24, r24
    3454:	96 95       	lsr	r25
    3456:	87 95       	ror	r24
    3458:	97 f9       	bld	r25, 7
    345a:	08 95       	ret

0000345c <__fp_arccos>:
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	1f 93       	push	r17
    3462:	0f 93       	push	r16
    3464:	8b 01       	movw	r16, r22
    3466:	ec 01       	movw	r28, r24
    3468:	ed e3       	ldi	r30, 0x3D	; 61
    346a:	f2 e0       	ldi	r31, 0x02	; 2
    346c:	4f d0       	rcall	.+158    	; 0x350c <__fp_powser>
    346e:	92 d0       	rcall	.+292    	; 0x3594 <__fp_round>
    3470:	98 01       	movw	r18, r16
    3472:	ae 01       	movw	r20, r28
    3474:	8b 01       	movw	r16, r22
    3476:	ec 01       	movw	r28, r24
    3478:	60 e0       	ldi	r22, 0x00	; 0
    347a:	70 e0       	ldi	r23, 0x00	; 0
    347c:	80 e8       	ldi	r24, 0x80	; 128
    347e:	9f e3       	ldi	r25, 0x3F	; 63
    3480:	fb dd       	rcall	.-1034   	; 0x3078 <__subsf3>
    3482:	80 d1       	rcall	.+768    	; 0x3784 <sqrt>
    3484:	98 01       	movw	r18, r16
    3486:	ae 01       	movw	r20, r28
    3488:	0f 91       	pop	r16
    348a:	1f 91       	pop	r17
    348c:	cf 91       	pop	r28
    348e:	df 91       	pop	r29
    3490:	d2 c0       	rjmp	.+420    	; 0x3636 <__mulsf3x>

00003492 <__fp_cmp>:
    3492:	99 0f       	add	r25, r25
    3494:	00 08       	sbc	r0, r0
    3496:	55 0f       	add	r21, r21
    3498:	aa 0b       	sbc	r26, r26
    349a:	e0 e8       	ldi	r30, 0x80	; 128
    349c:	fe ef       	ldi	r31, 0xFE	; 254
    349e:	16 16       	cp	r1, r22
    34a0:	17 06       	cpc	r1, r23
    34a2:	e8 07       	cpc	r30, r24
    34a4:	f9 07       	cpc	r31, r25
    34a6:	c0 f0       	brcs	.+48     	; 0x34d8 <__fp_cmp+0x46>
    34a8:	12 16       	cp	r1, r18
    34aa:	13 06       	cpc	r1, r19
    34ac:	e4 07       	cpc	r30, r20
    34ae:	f5 07       	cpc	r31, r21
    34b0:	98 f0       	brcs	.+38     	; 0x34d8 <__fp_cmp+0x46>
    34b2:	62 1b       	sub	r22, r18
    34b4:	73 0b       	sbc	r23, r19
    34b6:	84 0b       	sbc	r24, r20
    34b8:	95 0b       	sbc	r25, r21
    34ba:	39 f4       	brne	.+14     	; 0x34ca <__fp_cmp+0x38>
    34bc:	0a 26       	eor	r0, r26
    34be:	61 f0       	breq	.+24     	; 0x34d8 <__fp_cmp+0x46>
    34c0:	23 2b       	or	r18, r19
    34c2:	24 2b       	or	r18, r20
    34c4:	25 2b       	or	r18, r21
    34c6:	21 f4       	brne	.+8      	; 0x34d0 <__fp_cmp+0x3e>
    34c8:	08 95       	ret
    34ca:	0a 26       	eor	r0, r26
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <__fp_cmp+0x3e>
    34ce:	a1 40       	sbci	r26, 0x01	; 1
    34d0:	a6 95       	lsr	r26
    34d2:	8f ef       	ldi	r24, 0xFF	; 255
    34d4:	81 1d       	adc	r24, r1
    34d6:	81 1d       	adc	r24, r1
    34d8:	08 95       	ret

000034da <__fp_inf>:
    34da:	97 f9       	bld	r25, 7
    34dc:	9f 67       	ori	r25, 0x7F	; 127
    34de:	80 e8       	ldi	r24, 0x80	; 128
    34e0:	70 e0       	ldi	r23, 0x00	; 0
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	08 95       	ret

000034e6 <__fp_nan>:
    34e6:	9f ef       	ldi	r25, 0xFF	; 255
    34e8:	80 ec       	ldi	r24, 0xC0	; 192
    34ea:	08 95       	ret

000034ec <__fp_negdi>:
    34ec:	90 95       	com	r25
    34ee:	80 95       	com	r24
    34f0:	70 95       	com	r23
    34f2:	60 95       	com	r22
    34f4:	50 95       	com	r21
    34f6:	40 95       	com	r20
    34f8:	30 95       	com	r19
    34fa:	21 95       	neg	r18
    34fc:	3f 4f       	sbci	r19, 0xFF	; 255
    34fe:	4f 4f       	sbci	r20, 0xFF	; 255
    3500:	5f 4f       	sbci	r21, 0xFF	; 255
    3502:	6f 4f       	sbci	r22, 0xFF	; 255
    3504:	7f 4f       	sbci	r23, 0xFF	; 255
    3506:	8f 4f       	sbci	r24, 0xFF	; 255
    3508:	9f 4f       	sbci	r25, 0xFF	; 255
    350a:	08 95       	ret

0000350c <__fp_powser>:
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	1f 93       	push	r17
    3512:	0f 93       	push	r16
    3514:	ff 92       	push	r15
    3516:	ef 92       	push	r14
    3518:	df 92       	push	r13
    351a:	7b 01       	movw	r14, r22
    351c:	8c 01       	movw	r16, r24
    351e:	68 94       	set
    3520:	05 c0       	rjmp	.+10     	; 0x352c <__fp_powser+0x20>
    3522:	da 2e       	mov	r13, r26
    3524:	ef 01       	movw	r28, r30
    3526:	87 d0       	rcall	.+270    	; 0x3636 <__mulsf3x>
    3528:	fe 01       	movw	r30, r28
    352a:	e8 94       	clt
    352c:	a5 91       	lpm	r26, Z+
    352e:	25 91       	lpm	r18, Z+
    3530:	35 91       	lpm	r19, Z+
    3532:	45 91       	lpm	r20, Z+
    3534:	55 91       	lpm	r21, Z+
    3536:	ae f3       	brts	.-22     	; 0x3522 <__fp_powser+0x16>
    3538:	ef 01       	movw	r28, r30
    353a:	b0 dd       	rcall	.-1184   	; 0x309c <__addsf3x>
    353c:	fe 01       	movw	r30, r28
    353e:	97 01       	movw	r18, r14
    3540:	a8 01       	movw	r20, r16
    3542:	da 94       	dec	r13
    3544:	79 f7       	brne	.-34     	; 0x3524 <__fp_powser+0x18>
    3546:	df 90       	pop	r13
    3548:	ef 90       	pop	r14
    354a:	ff 90       	pop	r15
    354c:	0f 91       	pop	r16
    354e:	1f 91       	pop	r17
    3550:	cf 91       	pop	r28
    3552:	df 91       	pop	r29
    3554:	08 95       	ret

00003556 <__fp_powsodd>:
    3556:	9f 93       	push	r25
    3558:	8f 93       	push	r24
    355a:	7f 93       	push	r23
    355c:	6f 93       	push	r22
    355e:	ff 93       	push	r31
    3560:	ef 93       	push	r30
    3562:	9b 01       	movw	r18, r22
    3564:	ac 01       	movw	r20, r24
    3566:	5b d0       	rcall	.+182    	; 0x361e <__mulsf3>
    3568:	ef 91       	pop	r30
    356a:	ff 91       	pop	r31
    356c:	cf df       	rcall	.-98     	; 0x350c <__fp_powser>
    356e:	2f 91       	pop	r18
    3570:	3f 91       	pop	r19
    3572:	4f 91       	pop	r20
    3574:	5f 91       	pop	r21
    3576:	53 c0       	rjmp	.+166    	; 0x361e <__mulsf3>

00003578 <__fp_pscA>:
    3578:	00 24       	eor	r0, r0
    357a:	0a 94       	dec	r0
    357c:	16 16       	cp	r1, r22
    357e:	17 06       	cpc	r1, r23
    3580:	18 06       	cpc	r1, r24
    3582:	09 06       	cpc	r0, r25
    3584:	08 95       	ret

00003586 <__fp_pscB>:
    3586:	00 24       	eor	r0, r0
    3588:	0a 94       	dec	r0
    358a:	12 16       	cp	r1, r18
    358c:	13 06       	cpc	r1, r19
    358e:	14 06       	cpc	r1, r20
    3590:	05 06       	cpc	r0, r21
    3592:	08 95       	ret

00003594 <__fp_round>:
    3594:	09 2e       	mov	r0, r25
    3596:	03 94       	inc	r0
    3598:	00 0c       	add	r0, r0
    359a:	11 f4       	brne	.+4      	; 0x35a0 <__fp_round+0xc>
    359c:	88 23       	and	r24, r24
    359e:	52 f0       	brmi	.+20     	; 0x35b4 <__fp_round+0x20>
    35a0:	bb 0f       	add	r27, r27
    35a2:	40 f4       	brcc	.+16     	; 0x35b4 <__fp_round+0x20>
    35a4:	bf 2b       	or	r27, r31
    35a6:	11 f4       	brne	.+4      	; 0x35ac <__fp_round+0x18>
    35a8:	60 ff       	sbrs	r22, 0
    35aa:	04 c0       	rjmp	.+8      	; 0x35b4 <__fp_round+0x20>
    35ac:	6f 5f       	subi	r22, 0xFF	; 255
    35ae:	7f 4f       	sbci	r23, 0xFF	; 255
    35b0:	8f 4f       	sbci	r24, 0xFF	; 255
    35b2:	9f 4f       	sbci	r25, 0xFF	; 255
    35b4:	08 95       	ret

000035b6 <__fp_split3>:
    35b6:	57 fd       	sbrc	r21, 7
    35b8:	90 58       	subi	r25, 0x80	; 128
    35ba:	44 0f       	add	r20, r20
    35bc:	55 1f       	adc	r21, r21
    35be:	59 f0       	breq	.+22     	; 0x35d6 <__fp_splitA+0x10>
    35c0:	5f 3f       	cpi	r21, 0xFF	; 255
    35c2:	71 f0       	breq	.+28     	; 0x35e0 <__fp_splitA+0x1a>
    35c4:	47 95       	ror	r20

000035c6 <__fp_splitA>:
    35c6:	88 0f       	add	r24, r24
    35c8:	97 fb       	bst	r25, 7
    35ca:	99 1f       	adc	r25, r25
    35cc:	61 f0       	breq	.+24     	; 0x35e6 <__fp_splitA+0x20>
    35ce:	9f 3f       	cpi	r25, 0xFF	; 255
    35d0:	79 f0       	breq	.+30     	; 0x35f0 <__fp_splitA+0x2a>
    35d2:	87 95       	ror	r24
    35d4:	08 95       	ret
    35d6:	12 16       	cp	r1, r18
    35d8:	13 06       	cpc	r1, r19
    35da:	14 06       	cpc	r1, r20
    35dc:	55 1f       	adc	r21, r21
    35de:	f2 cf       	rjmp	.-28     	; 0x35c4 <__fp_split3+0xe>
    35e0:	46 95       	lsr	r20
    35e2:	f1 df       	rcall	.-30     	; 0x35c6 <__fp_splitA>
    35e4:	08 c0       	rjmp	.+16     	; 0x35f6 <__fp_splitA+0x30>
    35e6:	16 16       	cp	r1, r22
    35e8:	17 06       	cpc	r1, r23
    35ea:	18 06       	cpc	r1, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	f1 cf       	rjmp	.-30     	; 0x35d2 <__fp_splitA+0xc>
    35f0:	86 95       	lsr	r24
    35f2:	71 05       	cpc	r23, r1
    35f4:	61 05       	cpc	r22, r1
    35f6:	08 94       	sec
    35f8:	08 95       	ret

000035fa <__fp_zero>:
    35fa:	e8 94       	clt

000035fc <__fp_szero>:
    35fc:	bb 27       	eor	r27, r27
    35fe:	66 27       	eor	r22, r22
    3600:	77 27       	eor	r23, r23
    3602:	cb 01       	movw	r24, r22
    3604:	97 f9       	bld	r25, 7
    3606:	08 95       	ret

00003608 <__gesf2>:
    3608:	44 df       	rcall	.-376    	; 0x3492 <__fp_cmp>
    360a:	08 f4       	brcc	.+2      	; 0x360e <__gesf2+0x6>
    360c:	8f ef       	ldi	r24, 0xFF	; 255
    360e:	08 95       	ret

00003610 <inverse>:
    3610:	9b 01       	movw	r18, r22
    3612:	ac 01       	movw	r20, r24
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	80 e8       	ldi	r24, 0x80	; 128
    361a:	9f e3       	ldi	r25, 0x3F	; 63
    361c:	0f ce       	rjmp	.-994    	; 0x323c <__divsf3>

0000361e <__mulsf3>:
    361e:	0b d0       	rcall	.+22     	; 0x3636 <__mulsf3x>
    3620:	b9 cf       	rjmp	.-142    	; 0x3594 <__fp_round>
    3622:	aa df       	rcall	.-172    	; 0x3578 <__fp_pscA>
    3624:	28 f0       	brcs	.+10     	; 0x3630 <__mulsf3+0x12>
    3626:	af df       	rcall	.-162    	; 0x3586 <__fp_pscB>
    3628:	18 f0       	brcs	.+6      	; 0x3630 <__mulsf3+0x12>
    362a:	95 23       	and	r25, r21
    362c:	09 f0       	breq	.+2      	; 0x3630 <__mulsf3+0x12>
    362e:	55 cf       	rjmp	.-342    	; 0x34da <__fp_inf>
    3630:	5a cf       	rjmp	.-332    	; 0x34e6 <__fp_nan>
    3632:	11 24       	eor	r1, r1
    3634:	e3 cf       	rjmp	.-58     	; 0x35fc <__fp_szero>

00003636 <__mulsf3x>:
    3636:	bf df       	rcall	.-130    	; 0x35b6 <__fp_split3>
    3638:	a0 f3       	brcs	.-24     	; 0x3622 <__mulsf3+0x4>

0000363a <__mulsf3_pse>:
    363a:	95 9f       	mul	r25, r21
    363c:	d1 f3       	breq	.-12     	; 0x3632 <__mulsf3+0x14>
    363e:	95 0f       	add	r25, r21
    3640:	50 e0       	ldi	r21, 0x00	; 0
    3642:	55 1f       	adc	r21, r21
    3644:	62 9f       	mul	r22, r18
    3646:	f0 01       	movw	r30, r0
    3648:	72 9f       	mul	r23, r18
    364a:	bb 27       	eor	r27, r27
    364c:	f0 0d       	add	r31, r0
    364e:	b1 1d       	adc	r27, r1
    3650:	63 9f       	mul	r22, r19
    3652:	aa 27       	eor	r26, r26
    3654:	f0 0d       	add	r31, r0
    3656:	b1 1d       	adc	r27, r1
    3658:	aa 1f       	adc	r26, r26
    365a:	64 9f       	mul	r22, r20
    365c:	66 27       	eor	r22, r22
    365e:	b0 0d       	add	r27, r0
    3660:	a1 1d       	adc	r26, r1
    3662:	66 1f       	adc	r22, r22
    3664:	82 9f       	mul	r24, r18
    3666:	22 27       	eor	r18, r18
    3668:	b0 0d       	add	r27, r0
    366a:	a1 1d       	adc	r26, r1
    366c:	62 1f       	adc	r22, r18
    366e:	73 9f       	mul	r23, r19
    3670:	b0 0d       	add	r27, r0
    3672:	a1 1d       	adc	r26, r1
    3674:	62 1f       	adc	r22, r18
    3676:	83 9f       	mul	r24, r19
    3678:	a0 0d       	add	r26, r0
    367a:	61 1d       	adc	r22, r1
    367c:	22 1f       	adc	r18, r18
    367e:	74 9f       	mul	r23, r20
    3680:	33 27       	eor	r19, r19
    3682:	a0 0d       	add	r26, r0
    3684:	61 1d       	adc	r22, r1
    3686:	23 1f       	adc	r18, r19
    3688:	84 9f       	mul	r24, r20
    368a:	60 0d       	add	r22, r0
    368c:	21 1d       	adc	r18, r1
    368e:	82 2f       	mov	r24, r18
    3690:	76 2f       	mov	r23, r22
    3692:	6a 2f       	mov	r22, r26
    3694:	11 24       	eor	r1, r1
    3696:	9f 57       	subi	r25, 0x7F	; 127
    3698:	50 40       	sbci	r21, 0x00	; 0
    369a:	8a f0       	brmi	.+34     	; 0x36be <__mulsf3_pse+0x84>
    369c:	e1 f0       	breq	.+56     	; 0x36d6 <__mulsf3_pse+0x9c>
    369e:	88 23       	and	r24, r24
    36a0:	4a f0       	brmi	.+18     	; 0x36b4 <__mulsf3_pse+0x7a>
    36a2:	ee 0f       	add	r30, r30
    36a4:	ff 1f       	adc	r31, r31
    36a6:	bb 1f       	adc	r27, r27
    36a8:	66 1f       	adc	r22, r22
    36aa:	77 1f       	adc	r23, r23
    36ac:	88 1f       	adc	r24, r24
    36ae:	91 50       	subi	r25, 0x01	; 1
    36b0:	50 40       	sbci	r21, 0x00	; 0
    36b2:	a9 f7       	brne	.-22     	; 0x369e <__mulsf3_pse+0x64>
    36b4:	9e 3f       	cpi	r25, 0xFE	; 254
    36b6:	51 05       	cpc	r21, r1
    36b8:	70 f0       	brcs	.+28     	; 0x36d6 <__mulsf3_pse+0x9c>
    36ba:	0f cf       	rjmp	.-482    	; 0x34da <__fp_inf>
    36bc:	9f cf       	rjmp	.-194    	; 0x35fc <__fp_szero>
    36be:	5f 3f       	cpi	r21, 0xFF	; 255
    36c0:	ec f3       	brlt	.-6      	; 0x36bc <__mulsf3_pse+0x82>
    36c2:	98 3e       	cpi	r25, 0xE8	; 232
    36c4:	dc f3       	brlt	.-10     	; 0x36bc <__mulsf3_pse+0x82>
    36c6:	86 95       	lsr	r24
    36c8:	77 95       	ror	r23
    36ca:	67 95       	ror	r22
    36cc:	b7 95       	ror	r27
    36ce:	f7 95       	ror	r31
    36d0:	e7 95       	ror	r30
    36d2:	9f 5f       	subi	r25, 0xFF	; 255
    36d4:	c1 f7       	brne	.-16     	; 0x36c6 <__mulsf3_pse+0x8c>
    36d6:	fe 2b       	or	r31, r30
    36d8:	88 0f       	add	r24, r24
    36da:	91 1d       	adc	r25, r1
    36dc:	96 95       	lsr	r25
    36de:	87 95       	ror	r24
    36e0:	97 f9       	bld	r25, 7
    36e2:	08 95       	ret

000036e4 <pow>:
    36e4:	fa 01       	movw	r30, r20
    36e6:	ee 0f       	add	r30, r30
    36e8:	ff 1f       	adc	r31, r31
    36ea:	30 96       	adiw	r30, 0x00	; 0
    36ec:	21 05       	cpc	r18, r1
    36ee:	31 05       	cpc	r19, r1
    36f0:	99 f1       	breq	.+102    	; 0x3758 <pow+0x74>
    36f2:	61 15       	cp	r22, r1
    36f4:	71 05       	cpc	r23, r1
    36f6:	61 f4       	brne	.+24     	; 0x3710 <pow+0x2c>
    36f8:	80 38       	cpi	r24, 0x80	; 128
    36fa:	bf e3       	ldi	r27, 0x3F	; 63
    36fc:	9b 07       	cpc	r25, r27
    36fe:	49 f1       	breq	.+82     	; 0x3752 <pow+0x6e>
    3700:	68 94       	set
    3702:	90 38       	cpi	r25, 0x80	; 128
    3704:	81 05       	cpc	r24, r1
    3706:	61 f0       	breq	.+24     	; 0x3720 <pow+0x3c>
    3708:	80 38       	cpi	r24, 0x80	; 128
    370a:	bf ef       	ldi	r27, 0xFF	; 255
    370c:	9b 07       	cpc	r25, r27
    370e:	41 f0       	breq	.+16     	; 0x3720 <pow+0x3c>
    3710:	99 23       	and	r25, r25
    3712:	42 f5       	brpl	.+80     	; 0x3764 <pow+0x80>
    3714:	ff 3f       	cpi	r31, 0xFF	; 255
    3716:	e1 05       	cpc	r30, r1
    3718:	31 05       	cpc	r19, r1
    371a:	21 05       	cpc	r18, r1
    371c:	11 f1       	breq	.+68     	; 0x3762 <pow+0x7e>
    371e:	e8 94       	clt
    3720:	08 94       	sec
    3722:	e7 95       	ror	r30
    3724:	d9 01       	movw	r26, r18
    3726:	aa 23       	and	r26, r26
    3728:	29 f4       	brne	.+10     	; 0x3734 <pow+0x50>
    372a:	ab 2f       	mov	r26, r27
    372c:	be 2f       	mov	r27, r30
    372e:	f8 5f       	subi	r31, 0xF8	; 248
    3730:	d0 f3       	brcs	.-12     	; 0x3726 <pow+0x42>
    3732:	10 c0       	rjmp	.+32     	; 0x3754 <pow+0x70>
    3734:	ff 5f       	subi	r31, 0xFF	; 255
    3736:	70 f4       	brcc	.+28     	; 0x3754 <pow+0x70>
    3738:	a6 95       	lsr	r26
    373a:	e0 f7       	brcc	.-8      	; 0x3734 <pow+0x50>
    373c:	f7 39       	cpi	r31, 0x97	; 151
    373e:	50 f0       	brcs	.+20     	; 0x3754 <pow+0x70>
    3740:	19 f0       	breq	.+6      	; 0x3748 <pow+0x64>
    3742:	ff 3a       	cpi	r31, 0xAF	; 175
    3744:	38 f4       	brcc	.+14     	; 0x3754 <pow+0x70>
    3746:	9f 77       	andi	r25, 0x7F	; 127
    3748:	9f 93       	push	r25
    374a:	0c d0       	rcall	.+24     	; 0x3764 <pow+0x80>
    374c:	0f 90       	pop	r0
    374e:	07 fc       	sbrc	r0, 7
    3750:	90 58       	subi	r25, 0x80	; 128
    3752:	08 95       	ret
    3754:	3e f0       	brts	.+14     	; 0x3764 <pow+0x80>
    3756:	c7 ce       	rjmp	.-626    	; 0x34e6 <__fp_nan>
    3758:	60 e0       	ldi	r22, 0x00	; 0
    375a:	70 e0       	ldi	r23, 0x00	; 0
    375c:	80 e8       	ldi	r24, 0x80	; 128
    375e:	9f e3       	ldi	r25, 0x3F	; 63
    3760:	08 95       	ret
    3762:	4f e7       	ldi	r20, 0x7F	; 127
    3764:	9f 77       	andi	r25, 0x7F	; 127
    3766:	5f 93       	push	r21
    3768:	4f 93       	push	r20
    376a:	3f 93       	push	r19
    376c:	2f 93       	push	r18
    376e:	cc d0       	rcall	.+408    	; 0x3908 <log>
    3770:	2f 91       	pop	r18
    3772:	3f 91       	pop	r19
    3774:	4f 91       	pop	r20
    3776:	5f 91       	pop	r21
    3778:	52 df       	rcall	.-348    	; 0x361e <__mulsf3>
    377a:	4a c0       	rjmp	.+148    	; 0x3810 <exp>
    377c:	11 f4       	brne	.+4      	; 0x3782 <pow+0x9e>
    377e:	0e f4       	brtc	.+2      	; 0x3782 <pow+0x9e>
    3780:	b2 ce       	rjmp	.-668    	; 0x34e6 <__fp_nan>
    3782:	72 c0       	rjmp	.+228    	; 0x3868 <__fp_mpack>

00003784 <sqrt>:
    3784:	20 df       	rcall	.-448    	; 0x35c6 <__fp_splitA>
    3786:	d0 f3       	brcs	.-12     	; 0x377c <pow+0x98>
    3788:	99 23       	and	r25, r25
    378a:	d9 f3       	breq	.-10     	; 0x3782 <pow+0x9e>
    378c:	ce f3       	brts	.-14     	; 0x3780 <pow+0x9c>
    378e:	9f 57       	subi	r25, 0x7F	; 127
    3790:	55 0b       	sbc	r21, r21
    3792:	87 ff       	sbrs	r24, 7
    3794:	77 d0       	rcall	.+238    	; 0x3884 <__fp_norm2>
    3796:	00 24       	eor	r0, r0
    3798:	a0 e6       	ldi	r26, 0x60	; 96
    379a:	40 ea       	ldi	r20, 0xA0	; 160
    379c:	90 01       	movw	r18, r0
    379e:	80 58       	subi	r24, 0x80	; 128
    37a0:	56 95       	lsr	r21
    37a2:	97 95       	ror	r25
    37a4:	28 f4       	brcc	.+10     	; 0x37b0 <sqrt+0x2c>
    37a6:	80 5c       	subi	r24, 0xC0	; 192
    37a8:	66 0f       	add	r22, r22
    37aa:	77 1f       	adc	r23, r23
    37ac:	88 1f       	adc	r24, r24
    37ae:	20 f0       	brcs	.+8      	; 0x37b8 <sqrt+0x34>
    37b0:	26 17       	cp	r18, r22
    37b2:	37 07       	cpc	r19, r23
    37b4:	48 07       	cpc	r20, r24
    37b6:	30 f4       	brcc	.+12     	; 0x37c4 <sqrt+0x40>
    37b8:	62 1b       	sub	r22, r18
    37ba:	73 0b       	sbc	r23, r19
    37bc:	84 0b       	sbc	r24, r20
    37be:	20 29       	or	r18, r0
    37c0:	31 29       	or	r19, r1
    37c2:	4a 2b       	or	r20, r26
    37c4:	a6 95       	lsr	r26
    37c6:	17 94       	ror	r1
    37c8:	07 94       	ror	r0
    37ca:	20 25       	eor	r18, r0
    37cc:	31 25       	eor	r19, r1
    37ce:	4a 27       	eor	r20, r26
    37d0:	58 f7       	brcc	.-42     	; 0x37a8 <sqrt+0x24>
    37d2:	66 0f       	add	r22, r22
    37d4:	77 1f       	adc	r23, r23
    37d6:	88 1f       	adc	r24, r24
    37d8:	20 f0       	brcs	.+8      	; 0x37e2 <sqrt+0x5e>
    37da:	26 17       	cp	r18, r22
    37dc:	37 07       	cpc	r19, r23
    37de:	48 07       	cpc	r20, r24
    37e0:	30 f4       	brcc	.+12     	; 0x37ee <sqrt+0x6a>
    37e2:	62 0b       	sbc	r22, r18
    37e4:	73 0b       	sbc	r23, r19
    37e6:	84 0b       	sbc	r24, r20
    37e8:	20 0d       	add	r18, r0
    37ea:	31 1d       	adc	r19, r1
    37ec:	41 1d       	adc	r20, r1
    37ee:	a0 95       	com	r26
    37f0:	81 f7       	brne	.-32     	; 0x37d2 <sqrt+0x4e>
    37f2:	b9 01       	movw	r22, r18
    37f4:	84 2f       	mov	r24, r20
    37f6:	91 58       	subi	r25, 0x81	; 129
    37f8:	88 0f       	add	r24, r24
    37fa:	96 95       	lsr	r25
    37fc:	87 95       	ror	r24
    37fe:	08 95       	ret

00003800 <square>:
    3800:	9b 01       	movw	r18, r22
    3802:	ac 01       	movw	r20, r24
    3804:	0c cf       	rjmp	.-488    	; 0x361e <__mulsf3>
    3806:	19 f4       	brne	.+6      	; 0x380e <square+0xe>
    3808:	0e f0       	brts	.+2      	; 0x380c <square+0xc>
    380a:	67 ce       	rjmp	.-818    	; 0x34da <__fp_inf>
    380c:	f6 ce       	rjmp	.-532    	; 0x35fa <__fp_zero>
    380e:	6b ce       	rjmp	.-810    	; 0x34e6 <__fp_nan>

00003810 <exp>:
    3810:	da de       	rcall	.-588    	; 0x35c6 <__fp_splitA>
    3812:	c8 f3       	brcs	.-14     	; 0x3806 <square+0x6>
    3814:	96 38       	cpi	r25, 0x86	; 134
    3816:	c0 f7       	brcc	.-16     	; 0x3808 <square+0x8>
    3818:	07 f8       	bld	r0, 7
    381a:	0f 92       	push	r0
    381c:	e8 94       	clt
    381e:	2b e3       	ldi	r18, 0x3B	; 59
    3820:	3a ea       	ldi	r19, 0xAA	; 170
    3822:	48 eb       	ldi	r20, 0xB8	; 184
    3824:	5f e7       	ldi	r21, 0x7F	; 127
    3826:	09 df       	rcall	.-494    	; 0x363a <__mulsf3_pse>
    3828:	0f 92       	push	r0
    382a:	0f 92       	push	r0
    382c:	0f 92       	push	r0
    382e:	4d b7       	in	r20, 0x3d	; 61
    3830:	5e b7       	in	r21, 0x3e	; 62
    3832:	0f 92       	push	r0
    3834:	a9 d0       	rcall	.+338    	; 0x3988 <modf>
    3836:	e5 e6       	ldi	r30, 0x65	; 101
    3838:	f2 e0       	ldi	r31, 0x02	; 2
    383a:	68 de       	rcall	.-816    	; 0x350c <__fp_powser>
    383c:	4f 91       	pop	r20
    383e:	5f 91       	pop	r21
    3840:	ef 91       	pop	r30
    3842:	ff 91       	pop	r31
    3844:	e5 95       	asr	r30
    3846:	ee 1f       	adc	r30, r30
    3848:	ff 1f       	adc	r31, r31
    384a:	49 f0       	breq	.+18     	; 0x385e <exp+0x4e>
    384c:	fe 57       	subi	r31, 0x7E	; 126
    384e:	e0 68       	ori	r30, 0x80	; 128
    3850:	44 27       	eor	r20, r20
    3852:	ee 0f       	add	r30, r30
    3854:	44 1f       	adc	r20, r20
    3856:	fa 95       	dec	r31
    3858:	e1 f7       	brne	.-8      	; 0x3852 <exp+0x42>
    385a:	41 95       	neg	r20
    385c:	55 0b       	sbc	r21, r21
    385e:	1b d0       	rcall	.+54     	; 0x3896 <ldexp>
    3860:	0f 90       	pop	r0
    3862:	07 fe       	sbrs	r0, 7
    3864:	d5 ce       	rjmp	.-598    	; 0x3610 <inverse>
    3866:	08 95       	ret

00003868 <__fp_mpack>:
    3868:	9f 3f       	cpi	r25, 0xFF	; 255
    386a:	31 f0       	breq	.+12     	; 0x3878 <__fp_mpack_finite+0xc>

0000386c <__fp_mpack_finite>:
    386c:	91 50       	subi	r25, 0x01	; 1
    386e:	20 f4       	brcc	.+8      	; 0x3878 <__fp_mpack_finite+0xc>
    3870:	87 95       	ror	r24
    3872:	77 95       	ror	r23
    3874:	67 95       	ror	r22
    3876:	b7 95       	ror	r27
    3878:	88 0f       	add	r24, r24
    387a:	91 1d       	adc	r25, r1
    387c:	96 95       	lsr	r25
    387e:	87 95       	ror	r24
    3880:	97 f9       	bld	r25, 7
    3882:	08 95       	ret

00003884 <__fp_norm2>:
    3884:	91 50       	subi	r25, 0x01	; 1
    3886:	50 40       	sbci	r21, 0x00	; 0
    3888:	66 0f       	add	r22, r22
    388a:	77 1f       	adc	r23, r23
    388c:	88 1f       	adc	r24, r24
    388e:	d2 f7       	brpl	.-12     	; 0x3884 <__fp_norm2>
    3890:	08 95       	ret
    3892:	23 ce       	rjmp	.-954    	; 0x34da <__fp_inf>
    3894:	e9 cf       	rjmp	.-46     	; 0x3868 <__fp_mpack>

00003896 <ldexp>:
    3896:	97 de       	rcall	.-722    	; 0x35c6 <__fp_splitA>
    3898:	e8 f3       	brcs	.-6      	; 0x3894 <__fp_norm2+0x10>
    389a:	99 23       	and	r25, r25
    389c:	d9 f3       	breq	.-10     	; 0x3894 <__fp_norm2+0x10>
    389e:	94 0f       	add	r25, r20
    38a0:	51 1d       	adc	r21, r1
    38a2:	bb f3       	brvs	.-18     	; 0x3892 <__fp_norm2+0xe>
    38a4:	91 50       	subi	r25, 0x01	; 1
    38a6:	50 40       	sbci	r21, 0x00	; 0
    38a8:	94 f0       	brlt	.+36     	; 0x38ce <ldexp+0x38>
    38aa:	59 f0       	breq	.+22     	; 0x38c2 <ldexp+0x2c>
    38ac:	88 23       	and	r24, r24
    38ae:	32 f0       	brmi	.+12     	; 0x38bc <ldexp+0x26>
    38b0:	66 0f       	add	r22, r22
    38b2:	77 1f       	adc	r23, r23
    38b4:	88 1f       	adc	r24, r24
    38b6:	91 50       	subi	r25, 0x01	; 1
    38b8:	50 40       	sbci	r21, 0x00	; 0
    38ba:	c1 f7       	brne	.-16     	; 0x38ac <ldexp+0x16>
    38bc:	9e 3f       	cpi	r25, 0xFE	; 254
    38be:	51 05       	cpc	r21, r1
    38c0:	44 f7       	brge	.-48     	; 0x3892 <__fp_norm2+0xe>
    38c2:	88 0f       	add	r24, r24
    38c4:	91 1d       	adc	r25, r1
    38c6:	96 95       	lsr	r25
    38c8:	87 95       	ror	r24
    38ca:	97 f9       	bld	r25, 7
    38cc:	08 95       	ret
    38ce:	5f 3f       	cpi	r21, 0xFF	; 255
    38d0:	ac f0       	brlt	.+42     	; 0x38fc <ldexp+0x66>
    38d2:	98 3e       	cpi	r25, 0xE8	; 232
    38d4:	9c f0       	brlt	.+38     	; 0x38fc <ldexp+0x66>
    38d6:	bb 27       	eor	r27, r27
    38d8:	86 95       	lsr	r24
    38da:	77 95       	ror	r23
    38dc:	67 95       	ror	r22
    38de:	b7 95       	ror	r27
    38e0:	08 f4       	brcc	.+2      	; 0x38e4 <ldexp+0x4e>
    38e2:	b1 60       	ori	r27, 0x01	; 1
    38e4:	93 95       	inc	r25
    38e6:	c1 f7       	brne	.-16     	; 0x38d8 <ldexp+0x42>
    38e8:	bb 0f       	add	r27, r27
    38ea:	58 f7       	brcc	.-42     	; 0x38c2 <ldexp+0x2c>
    38ec:	11 f4       	brne	.+4      	; 0x38f2 <ldexp+0x5c>
    38ee:	60 ff       	sbrs	r22, 0
    38f0:	e8 cf       	rjmp	.-48     	; 0x38c2 <ldexp+0x2c>
    38f2:	6f 5f       	subi	r22, 0xFF	; 255
    38f4:	7f 4f       	sbci	r23, 0xFF	; 255
    38f6:	8f 4f       	sbci	r24, 0xFF	; 255
    38f8:	9f 4f       	sbci	r25, 0xFF	; 255
    38fa:	e3 cf       	rjmp	.-58     	; 0x38c2 <ldexp+0x2c>
    38fc:	7f ce       	rjmp	.-770    	; 0x35fc <__fp_szero>
    38fe:	0e f0       	brts	.+2      	; 0x3902 <ldexp+0x6c>
    3900:	b3 cf       	rjmp	.-154    	; 0x3868 <__fp_mpack>
    3902:	f1 cd       	rjmp	.-1054   	; 0x34e6 <__fp_nan>
    3904:	68 94       	set
    3906:	e9 cd       	rjmp	.-1070   	; 0x34da <__fp_inf>

00003908 <log>:
    3908:	5e de       	rcall	.-836    	; 0x35c6 <__fp_splitA>
    390a:	c8 f3       	brcs	.-14     	; 0x38fe <ldexp+0x68>
    390c:	99 23       	and	r25, r25
    390e:	d1 f3       	breq	.-12     	; 0x3904 <ldexp+0x6e>
    3910:	c6 f3       	brts	.-16     	; 0x3902 <ldexp+0x6c>
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	1f 93       	push	r17
    3918:	0f 93       	push	r16
    391a:	ff 92       	push	r15
    391c:	c9 2f       	mov	r28, r25
    391e:	dd 27       	eor	r29, r29
    3920:	88 23       	and	r24, r24
    3922:	2a f0       	brmi	.+10     	; 0x392e <log+0x26>
    3924:	21 97       	sbiw	r28, 0x01	; 1
    3926:	66 0f       	add	r22, r22
    3928:	77 1f       	adc	r23, r23
    392a:	88 1f       	adc	r24, r24
    392c:	da f7       	brpl	.-10     	; 0x3924 <log+0x1c>
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	40 e8       	ldi	r20, 0x80	; 128
    3934:	5f eb       	ldi	r21, 0xBF	; 191
    3936:	9f e3       	ldi	r25, 0x3F	; 63
    3938:	88 39       	cpi	r24, 0x98	; 152
    393a:	20 f0       	brcs	.+8      	; 0x3944 <log+0x3c>
    393c:	80 3e       	cpi	r24, 0xE0	; 224
    393e:	30 f0       	brcs	.+12     	; 0x394c <log+0x44>
    3940:	21 96       	adiw	r28, 0x01	; 1
    3942:	8f 77       	andi	r24, 0x7F	; 127
    3944:	9a db       	rcall	.-2252   	; 0x307a <__addsf3>
    3946:	ed e8       	ldi	r30, 0x8D	; 141
    3948:	f2 e0       	ldi	r31, 0x02	; 2
    394a:	03 c0       	rjmp	.+6      	; 0x3952 <log+0x4a>
    394c:	96 db       	rcall	.-2260   	; 0x307a <__addsf3>
    394e:	ea eb       	ldi	r30, 0xBA	; 186
    3950:	f2 e0       	ldi	r31, 0x02	; 2
    3952:	dc dd       	rcall	.-1096   	; 0x350c <__fp_powser>
    3954:	8b 01       	movw	r16, r22
    3956:	be 01       	movw	r22, r28
    3958:	ec 01       	movw	r28, r24
    395a:	fb 2e       	mov	r15, r27
    395c:	6f 57       	subi	r22, 0x7F	; 127
    395e:	71 09       	sbc	r23, r1
    3960:	75 95       	asr	r23
    3962:	77 1f       	adc	r23, r23
    3964:	88 0b       	sbc	r24, r24
    3966:	99 0b       	sbc	r25, r25
    3968:	3e dd       	rcall	.-1412   	; 0x33e6 <__floatsisf>
    396a:	28 e1       	ldi	r18, 0x18	; 24
    396c:	32 e7       	ldi	r19, 0x72	; 114
    396e:	41 e3       	ldi	r20, 0x31	; 49
    3970:	5f e3       	ldi	r21, 0x3F	; 63
    3972:	61 de       	rcall	.-830    	; 0x3636 <__mulsf3x>
    3974:	af 2d       	mov	r26, r15
    3976:	98 01       	movw	r18, r16
    3978:	ae 01       	movw	r20, r28
    397a:	ff 90       	pop	r15
    397c:	0f 91       	pop	r16
    397e:	1f 91       	pop	r17
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	8b db       	rcall	.-2282   	; 0x309c <__addsf3x>
    3986:	06 ce       	rjmp	.-1012   	; 0x3594 <__fp_round>

00003988 <modf>:
    3988:	fa 01       	movw	r30, r20
    398a:	dc 01       	movw	r26, r24
    398c:	aa 0f       	add	r26, r26
    398e:	bb 1f       	adc	r27, r27
    3990:	9b 01       	movw	r18, r22
    3992:	ac 01       	movw	r20, r24
    3994:	bf 57       	subi	r27, 0x7F	; 127
    3996:	28 f4       	brcc	.+10     	; 0x39a2 <modf+0x1a>
    3998:	22 27       	eor	r18, r18
    399a:	33 27       	eor	r19, r19
    399c:	44 27       	eor	r20, r20
    399e:	50 78       	andi	r21, 0x80	; 128
    39a0:	1f c0       	rjmp	.+62     	; 0x39e0 <modf+0x58>
    39a2:	b7 51       	subi	r27, 0x17	; 23
    39a4:	88 f4       	brcc	.+34     	; 0x39c8 <modf+0x40>
    39a6:	ab 2f       	mov	r26, r27
    39a8:	00 24       	eor	r0, r0
    39aa:	46 95       	lsr	r20
    39ac:	37 95       	ror	r19
    39ae:	27 95       	ror	r18
    39b0:	01 1c       	adc	r0, r1
    39b2:	a3 95       	inc	r26
    39b4:	d2 f3       	brmi	.-12     	; 0x39aa <modf+0x22>
    39b6:	00 20       	and	r0, r0
    39b8:	69 f0       	breq	.+26     	; 0x39d4 <modf+0x4c>
    39ba:	22 0f       	add	r18, r18
    39bc:	33 1f       	adc	r19, r19
    39be:	44 1f       	adc	r20, r20
    39c0:	b3 95       	inc	r27
    39c2:	da f3       	brmi	.-10     	; 0x39ba <modf+0x32>
    39c4:	0d d0       	rcall	.+26     	; 0x39e0 <modf+0x58>
    39c6:	58 cb       	rjmp	.-2384   	; 0x3078 <__subsf3>
    39c8:	61 30       	cpi	r22, 0x01	; 1
    39ca:	71 05       	cpc	r23, r1
    39cc:	a0 e8       	ldi	r26, 0x80	; 128
    39ce:	8a 07       	cpc	r24, r26
    39d0:	b9 46       	sbci	r27, 0x69	; 105
    39d2:	30 f4       	brcc	.+12     	; 0x39e0 <modf+0x58>
    39d4:	9b 01       	movw	r18, r22
    39d6:	ac 01       	movw	r20, r24
    39d8:	66 27       	eor	r22, r22
    39da:	77 27       	eor	r23, r23
    39dc:	88 27       	eor	r24, r24
    39de:	90 78       	andi	r25, 0x80	; 128
    39e0:	30 96       	adiw	r30, 0x00	; 0
    39e2:	21 f0       	breq	.+8      	; 0x39ec <modf+0x64>
    39e4:	20 83       	st	Z, r18
    39e6:	31 83       	std	Z+1, r19	; 0x01
    39e8:	42 83       	std	Z+2, r20	; 0x02
    39ea:	53 83       	std	Z+3, r21	; 0x03
    39ec:	08 95       	ret

000039ee <__mulsi3>:
    39ee:	db 01       	movw	r26, r22
    39f0:	8f 93       	push	r24
    39f2:	9f 93       	push	r25
    39f4:	7f d0       	rcall	.+254    	; 0x3af4 <__muluhisi3>
    39f6:	bf 91       	pop	r27
    39f8:	af 91       	pop	r26
    39fa:	a2 9f       	mul	r26, r18
    39fc:	80 0d       	add	r24, r0
    39fe:	91 1d       	adc	r25, r1
    3a00:	a3 9f       	mul	r26, r19
    3a02:	90 0d       	add	r25, r0
    3a04:	b2 9f       	mul	r27, r18
    3a06:	90 0d       	add	r25, r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	08 95       	ret

00003a0c <__udivmodhi4>:
    3a0c:	aa 1b       	sub	r26, r26
    3a0e:	bb 1b       	sub	r27, r27
    3a10:	51 e1       	ldi	r21, 0x11	; 17
    3a12:	07 c0       	rjmp	.+14     	; 0x3a22 <__udivmodhi4_ep>

00003a14 <__udivmodhi4_loop>:
    3a14:	aa 1f       	adc	r26, r26
    3a16:	bb 1f       	adc	r27, r27
    3a18:	a6 17       	cp	r26, r22
    3a1a:	b7 07       	cpc	r27, r23
    3a1c:	10 f0       	brcs	.+4      	; 0x3a22 <__udivmodhi4_ep>
    3a1e:	a6 1b       	sub	r26, r22
    3a20:	b7 0b       	sbc	r27, r23

00003a22 <__udivmodhi4_ep>:
    3a22:	88 1f       	adc	r24, r24
    3a24:	99 1f       	adc	r25, r25
    3a26:	5a 95       	dec	r21
    3a28:	a9 f7       	brne	.-22     	; 0x3a14 <__udivmodhi4_loop>
    3a2a:	80 95       	com	r24
    3a2c:	90 95       	com	r25
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	08 95       	ret

00003a34 <__divmodhi4>:
    3a34:	97 fb       	bst	r25, 7
    3a36:	07 2e       	mov	r0, r23
    3a38:	16 f4       	brtc	.+4      	; 0x3a3e <__divmodhi4+0xa>
    3a3a:	00 94       	com	r0
    3a3c:	06 d0       	rcall	.+12     	; 0x3a4a <__divmodhi4_neg1>
    3a3e:	77 fd       	sbrc	r23, 7
    3a40:	08 d0       	rcall	.+16     	; 0x3a52 <__divmodhi4_neg2>
    3a42:	e4 df       	rcall	.-56     	; 0x3a0c <__udivmodhi4>
    3a44:	07 fc       	sbrc	r0, 7
    3a46:	05 d0       	rcall	.+10     	; 0x3a52 <__divmodhi4_neg2>
    3a48:	3e f4       	brtc	.+14     	; 0x3a58 <__divmodhi4_exit>

00003a4a <__divmodhi4_neg1>:
    3a4a:	90 95       	com	r25
    3a4c:	81 95       	neg	r24
    3a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a50:	08 95       	ret

00003a52 <__divmodhi4_neg2>:
    3a52:	70 95       	com	r23
    3a54:	61 95       	neg	r22
    3a56:	7f 4f       	sbci	r23, 0xFF	; 255

00003a58 <__divmodhi4_exit>:
    3a58:	08 95       	ret

00003a5a <__udivmodsi4>:
    3a5a:	a1 e2       	ldi	r26, 0x21	; 33
    3a5c:	1a 2e       	mov	r1, r26
    3a5e:	aa 1b       	sub	r26, r26
    3a60:	bb 1b       	sub	r27, r27
    3a62:	fd 01       	movw	r30, r26
    3a64:	0d c0       	rjmp	.+26     	; 0x3a80 <__udivmodsi4_ep>

00003a66 <__udivmodsi4_loop>:
    3a66:	aa 1f       	adc	r26, r26
    3a68:	bb 1f       	adc	r27, r27
    3a6a:	ee 1f       	adc	r30, r30
    3a6c:	ff 1f       	adc	r31, r31
    3a6e:	a2 17       	cp	r26, r18
    3a70:	b3 07       	cpc	r27, r19
    3a72:	e4 07       	cpc	r30, r20
    3a74:	f5 07       	cpc	r31, r21
    3a76:	20 f0       	brcs	.+8      	; 0x3a80 <__udivmodsi4_ep>
    3a78:	a2 1b       	sub	r26, r18
    3a7a:	b3 0b       	sbc	r27, r19
    3a7c:	e4 0b       	sbc	r30, r20
    3a7e:	f5 0b       	sbc	r31, r21

00003a80 <__udivmodsi4_ep>:
    3a80:	66 1f       	adc	r22, r22
    3a82:	77 1f       	adc	r23, r23
    3a84:	88 1f       	adc	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	1a 94       	dec	r1
    3a8a:	69 f7       	brne	.-38     	; 0x3a66 <__udivmodsi4_loop>
    3a8c:	60 95       	com	r22
    3a8e:	70 95       	com	r23
    3a90:	80 95       	com	r24
    3a92:	90 95       	com	r25
    3a94:	9b 01       	movw	r18, r22
    3a96:	ac 01       	movw	r20, r24
    3a98:	bd 01       	movw	r22, r26
    3a9a:	cf 01       	movw	r24, r30
    3a9c:	08 95       	ret

00003a9e <__divmodsi4>:
    3a9e:	05 2e       	mov	r0, r21
    3aa0:	97 fb       	bst	r25, 7
    3aa2:	16 f4       	brtc	.+4      	; 0x3aa8 <__divmodsi4+0xa>
    3aa4:	00 94       	com	r0
    3aa6:	0f d0       	rcall	.+30     	; 0x3ac6 <__negsi2>
    3aa8:	57 fd       	sbrc	r21, 7
    3aaa:	05 d0       	rcall	.+10     	; 0x3ab6 <__divmodsi4_neg2>
    3aac:	d6 df       	rcall	.-84     	; 0x3a5a <__udivmodsi4>
    3aae:	07 fc       	sbrc	r0, 7
    3ab0:	02 d0       	rcall	.+4      	; 0x3ab6 <__divmodsi4_neg2>
    3ab2:	46 f4       	brtc	.+16     	; 0x3ac4 <__divmodsi4_exit>
    3ab4:	08 c0       	rjmp	.+16     	; 0x3ac6 <__negsi2>

00003ab6 <__divmodsi4_neg2>:
    3ab6:	50 95       	com	r21
    3ab8:	40 95       	com	r20
    3aba:	30 95       	com	r19
    3abc:	21 95       	neg	r18
    3abe:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac0:	4f 4f       	sbci	r20, 0xFF	; 255
    3ac2:	5f 4f       	sbci	r21, 0xFF	; 255

00003ac4 <__divmodsi4_exit>:
    3ac4:	08 95       	ret

00003ac6 <__negsi2>:
    3ac6:	90 95       	com	r25
    3ac8:	80 95       	com	r24
    3aca:	70 95       	com	r23
    3acc:	61 95       	neg	r22
    3ace:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad4:	08 95       	ret

00003ad6 <__umulhisi3>:
    3ad6:	a2 9f       	mul	r26, r18
    3ad8:	b0 01       	movw	r22, r0
    3ada:	b3 9f       	mul	r27, r19
    3adc:	c0 01       	movw	r24, r0
    3ade:	a3 9f       	mul	r26, r19
    3ae0:	70 0d       	add	r23, r0
    3ae2:	81 1d       	adc	r24, r1
    3ae4:	11 24       	eor	r1, r1
    3ae6:	91 1d       	adc	r25, r1
    3ae8:	b2 9f       	mul	r27, r18
    3aea:	70 0d       	add	r23, r0
    3aec:	81 1d       	adc	r24, r1
    3aee:	11 24       	eor	r1, r1
    3af0:	91 1d       	adc	r25, r1
    3af2:	08 95       	ret

00003af4 <__muluhisi3>:
    3af4:	f0 df       	rcall	.-32     	; 0x3ad6 <__umulhisi3>
    3af6:	a5 9f       	mul	r26, r21
    3af8:	90 0d       	add	r25, r0
    3afa:	b4 9f       	mul	r27, r20
    3afc:	90 0d       	add	r25, r0
    3afe:	a4 9f       	mul	r26, r20
    3b00:	80 0d       	add	r24, r0
    3b02:	91 1d       	adc	r25, r1
    3b04:	11 24       	eor	r1, r1
    3b06:	08 95       	ret

00003b08 <__mulshisi3>:
    3b08:	b7 ff       	sbrs	r27, 7
    3b0a:	f4 cf       	rjmp	.-24     	; 0x3af4 <__muluhisi3>

00003b0c <__mulohisi3>:
    3b0c:	f3 df       	rcall	.-26     	; 0x3af4 <__muluhisi3>
    3b0e:	82 1b       	sub	r24, r18
    3b10:	93 0b       	sbc	r25, r19
    3b12:	08 95       	ret

00003b14 <__ashrdi3>:
    3b14:	97 fb       	bst	r25, 7
    3b16:	10 f8       	bld	r1, 0

00003b18 <__lshrdi3>:
    3b18:	16 94       	lsr	r1
    3b1a:	00 08       	sbc	r0, r0
    3b1c:	0f 93       	push	r16
    3b1e:	08 30       	cpi	r16, 0x08	; 8
    3b20:	98 f0       	brcs	.+38     	; 0x3b48 <__lshrdi3+0x30>
    3b22:	08 50       	subi	r16, 0x08	; 8
    3b24:	23 2f       	mov	r18, r19
    3b26:	34 2f       	mov	r19, r20
    3b28:	45 2f       	mov	r20, r21
    3b2a:	56 2f       	mov	r21, r22
    3b2c:	67 2f       	mov	r22, r23
    3b2e:	78 2f       	mov	r23, r24
    3b30:	89 2f       	mov	r24, r25
    3b32:	90 2d       	mov	r25, r0
    3b34:	f4 cf       	rjmp	.-24     	; 0x3b1e <__lshrdi3+0x6>
    3b36:	05 94       	asr	r0
    3b38:	97 95       	ror	r25
    3b3a:	87 95       	ror	r24
    3b3c:	77 95       	ror	r23
    3b3e:	67 95       	ror	r22
    3b40:	57 95       	ror	r21
    3b42:	47 95       	ror	r20
    3b44:	37 95       	ror	r19
    3b46:	27 95       	ror	r18
    3b48:	0a 95       	dec	r16
    3b4a:	aa f7       	brpl	.-22     	; 0x3b36 <__lshrdi3+0x1e>
    3b4c:	0f 91       	pop	r16
    3b4e:	08 95       	ret

00003b50 <fdevopen>:
    3b50:	0f 93       	push	r16
    3b52:	1f 93       	push	r17
    3b54:	cf 93       	push	r28
    3b56:	df 93       	push	r29
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	31 f4       	brne	.+12     	; 0x3b68 <fdevopen+0x18>
    3b5c:	61 15       	cp	r22, r1
    3b5e:	71 05       	cpc	r23, r1
    3b60:	19 f4       	brne	.+6      	; 0x3b68 <fdevopen+0x18>
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	39 c0       	rjmp	.+114    	; 0x3bda <fdevopen+0x8a>
    3b68:	8b 01       	movw	r16, r22
    3b6a:	ec 01       	movw	r28, r24
    3b6c:	6e e0       	ldi	r22, 0x0E	; 14
    3b6e:	70 e0       	ldi	r23, 0x00	; 0
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	47 d5       	rcall	.+2702   	; 0x4604 <calloc>
    3b76:	fc 01       	movw	r30, r24
    3b78:	89 2b       	or	r24, r25
    3b7a:	99 f3       	breq	.-26     	; 0x3b62 <fdevopen+0x12>
    3b7c:	80 e8       	ldi	r24, 0x80	; 128
    3b7e:	83 83       	std	Z+3, r24	; 0x03
    3b80:	01 15       	cp	r16, r1
    3b82:	11 05       	cpc	r17, r1
    3b84:	71 f0       	breq	.+28     	; 0x3ba2 <fdevopen+0x52>
    3b86:	02 87       	std	Z+10, r16	; 0x0a
    3b88:	13 87       	std	Z+11, r17	; 0x0b
    3b8a:	81 e8       	ldi	r24, 0x81	; 129
    3b8c:	83 83       	std	Z+3, r24	; 0x03
    3b8e:	80 91 85 21 	lds	r24, 0x2185	; 0x802185 <__iob>
    3b92:	90 91 86 21 	lds	r25, 0x2186	; 0x802186 <__iob+0x1>
    3b96:	89 2b       	or	r24, r25
    3b98:	21 f4       	brne	.+8      	; 0x3ba2 <fdevopen+0x52>
    3b9a:	e0 93 85 21 	sts	0x2185, r30	; 0x802185 <__iob>
    3b9e:	f0 93 86 21 	sts	0x2186, r31	; 0x802186 <__iob+0x1>
    3ba2:	20 97       	sbiw	r28, 0x00	; 0
    3ba4:	c9 f0       	breq	.+50     	; 0x3bd8 <fdevopen+0x88>
    3ba6:	c0 87       	std	Z+8, r28	; 0x08
    3ba8:	d1 87       	std	Z+9, r29	; 0x09
    3baa:	83 81       	ldd	r24, Z+3	; 0x03
    3bac:	82 60       	ori	r24, 0x02	; 2
    3bae:	83 83       	std	Z+3, r24	; 0x03
    3bb0:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <__iob+0x2>
    3bb4:	90 91 88 21 	lds	r25, 0x2188	; 0x802188 <__iob+0x3>
    3bb8:	89 2b       	or	r24, r25
    3bba:	71 f4       	brne	.+28     	; 0x3bd8 <fdevopen+0x88>
    3bbc:	e0 93 87 21 	sts	0x2187, r30	; 0x802187 <__iob+0x2>
    3bc0:	f0 93 88 21 	sts	0x2188, r31	; 0x802188 <__iob+0x3>
    3bc4:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <__iob+0x4>
    3bc8:	90 91 8a 21 	lds	r25, 0x218A	; 0x80218a <__iob+0x5>
    3bcc:	89 2b       	or	r24, r25
    3bce:	21 f4       	brne	.+8      	; 0x3bd8 <fdevopen+0x88>
    3bd0:	e0 93 89 21 	sts	0x2189, r30	; 0x802189 <__iob+0x4>
    3bd4:	f0 93 8a 21 	sts	0x218A, r31	; 0x80218a <__iob+0x5>
    3bd8:	cf 01       	movw	r24, r30
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	1f 91       	pop	r17
    3be0:	0f 91       	pop	r16
    3be2:	08 95       	ret

00003be4 <printf>:
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    3bec:	ae 01       	movw	r20, r28
    3bee:	4a 5f       	subi	r20, 0xFA	; 250
    3bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    3bf2:	fa 01       	movw	r30, r20
    3bf4:	61 91       	ld	r22, Z+
    3bf6:	71 91       	ld	r23, Z+
    3bf8:	af 01       	movw	r20, r30
    3bfa:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <__iob+0x2>
    3bfe:	90 91 88 21 	lds	r25, 0x2188	; 0x802188 <__iob+0x3>
    3c02:	46 d0       	rcall	.+140    	; 0x3c90 <vfprintf>
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	08 95       	ret

00003c0a <sprintf>:
    3c0a:	0f 93       	push	r16
    3c0c:	1f 93       	push	r17
    3c0e:	cf 93       	push	r28
    3c10:	df 93       	push	r29
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	2e 97       	sbiw	r28, 0x0e	; 14
    3c18:	cd bf       	out	0x3d, r28	; 61
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0e 89       	ldd	r16, Y+22	; 0x16
    3c1e:	1f 89       	ldd	r17, Y+23	; 0x17
    3c20:	86 e0       	ldi	r24, 0x06	; 6
    3c22:	8c 83       	std	Y+4, r24	; 0x04
    3c24:	09 83       	std	Y+1, r16	; 0x01
    3c26:	1a 83       	std	Y+2, r17	; 0x02
    3c28:	8f ef       	ldi	r24, 0xFF	; 255
    3c2a:	9f e7       	ldi	r25, 0x7F	; 127
    3c2c:	8d 83       	std	Y+5, r24	; 0x05
    3c2e:	9e 83       	std	Y+6, r25	; 0x06
    3c30:	ae 01       	movw	r20, r28
    3c32:	46 5e       	subi	r20, 0xE6	; 230
    3c34:	5f 4f       	sbci	r21, 0xFF	; 255
    3c36:	68 8d       	ldd	r22, Y+24	; 0x18
    3c38:	79 8d       	ldd	r23, Y+25	; 0x19
    3c3a:	ce 01       	movw	r24, r28
    3c3c:	01 96       	adiw	r24, 0x01	; 1
    3c3e:	28 d0       	rcall	.+80     	; 0x3c90 <vfprintf>
    3c40:	ef 81       	ldd	r30, Y+7	; 0x07
    3c42:	f8 85       	ldd	r31, Y+8	; 0x08
    3c44:	e0 0f       	add	r30, r16
    3c46:	f1 1f       	adc	r31, r17
    3c48:	10 82       	st	Z, r1
    3c4a:	2e 96       	adiw	r28, 0x0e	; 14
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	1f 91       	pop	r17
    3c56:	0f 91       	pop	r16
    3c58:	08 95       	ret

00003c5a <sscanf>:
    3c5a:	cf 93       	push	r28
    3c5c:	df 93       	push	r29
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	2e 97       	sbiw	r28, 0x0e	; 14
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	85 e0       	ldi	r24, 0x05	; 5
    3c6a:	8c 83       	std	Y+4, r24	; 0x04
    3c6c:	8c 89       	ldd	r24, Y+20	; 0x14
    3c6e:	9d 89       	ldd	r25, Y+21	; 0x15
    3c70:	89 83       	std	Y+1, r24	; 0x01
    3c72:	9a 83       	std	Y+2, r25	; 0x02
    3c74:	ae 01       	movw	r20, r28
    3c76:	48 5e       	subi	r20, 0xE8	; 232
    3c78:	5f 4f       	sbci	r21, 0xFF	; 255
    3c7a:	6e 89       	ldd	r22, Y+22	; 0x16
    3c7c:	7f 89       	ldd	r23, Y+23	; 0x17
    3c7e:	ce 01       	movw	r24, r28
    3c80:	01 96       	adiw	r24, 0x01	; 1
    3c82:	a9 d3       	rcall	.+1874   	; 0x43d6 <vfscanf>
    3c84:	2e 96       	adiw	r28, 0x0e	; 14
    3c86:	cd bf       	out	0x3d, r28	; 61
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	08 95       	ret

00003c90 <vfprintf>:
    3c90:	2f 92       	push	r2
    3c92:	3f 92       	push	r3
    3c94:	4f 92       	push	r4
    3c96:	5f 92       	push	r5
    3c98:	6f 92       	push	r6
    3c9a:	7f 92       	push	r7
    3c9c:	8f 92       	push	r8
    3c9e:	9f 92       	push	r9
    3ca0:	af 92       	push	r10
    3ca2:	bf 92       	push	r11
    3ca4:	cf 92       	push	r12
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	2b 97       	sbiw	r28, 0x0b	; 11
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	de bf       	out	0x3e, r29	; 62
    3cbe:	6c 01       	movw	r12, r24
    3cc0:	7b 01       	movw	r14, r22
    3cc2:	8a 01       	movw	r16, r20
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	16 82       	std	Z+6, r1	; 0x06
    3cc8:	17 82       	std	Z+7, r1	; 0x07
    3cca:	83 81       	ldd	r24, Z+3	; 0x03
    3ccc:	81 ff       	sbrs	r24, 1
    3cce:	bf c1       	rjmp	.+894    	; 0x404e <__stack+0x4f>
    3cd0:	ce 01       	movw	r24, r28
    3cd2:	01 96       	adiw	r24, 0x01	; 1
    3cd4:	3c 01       	movw	r6, r24
    3cd6:	f6 01       	movw	r30, r12
    3cd8:	93 81       	ldd	r25, Z+3	; 0x03
    3cda:	f7 01       	movw	r30, r14
    3cdc:	93 fd       	sbrc	r25, 3
    3cde:	85 91       	lpm	r24, Z+
    3ce0:	93 ff       	sbrs	r25, 3
    3ce2:	81 91       	ld	r24, Z+
    3ce4:	7f 01       	movw	r14, r30
    3ce6:	88 23       	and	r24, r24
    3ce8:	09 f4       	brne	.+2      	; 0x3cec <vfprintf+0x5c>
    3cea:	ad c1       	rjmp	.+858    	; 0x4046 <__stack+0x47>
    3cec:	85 32       	cpi	r24, 0x25	; 37
    3cee:	39 f4       	brne	.+14     	; 0x3cfe <vfprintf+0x6e>
    3cf0:	93 fd       	sbrc	r25, 3
    3cf2:	85 91       	lpm	r24, Z+
    3cf4:	93 ff       	sbrs	r25, 3
    3cf6:	81 91       	ld	r24, Z+
    3cf8:	7f 01       	movw	r14, r30
    3cfa:	85 32       	cpi	r24, 0x25	; 37
    3cfc:	21 f4       	brne	.+8      	; 0x3d06 <vfprintf+0x76>
    3cfe:	b6 01       	movw	r22, r12
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	29 d6       	rcall	.+3154   	; 0x4956 <fputc>
    3d04:	e8 cf       	rjmp	.-48     	; 0x3cd6 <vfprintf+0x46>
    3d06:	91 2c       	mov	r9, r1
    3d08:	21 2c       	mov	r2, r1
    3d0a:	31 2c       	mov	r3, r1
    3d0c:	ff e1       	ldi	r31, 0x1F	; 31
    3d0e:	f3 15       	cp	r31, r3
    3d10:	d8 f0       	brcs	.+54     	; 0x3d48 <vfprintf+0xb8>
    3d12:	8b 32       	cpi	r24, 0x2B	; 43
    3d14:	79 f0       	breq	.+30     	; 0x3d34 <vfprintf+0xa4>
    3d16:	38 f4       	brcc	.+14     	; 0x3d26 <vfprintf+0x96>
    3d18:	80 32       	cpi	r24, 0x20	; 32
    3d1a:	79 f0       	breq	.+30     	; 0x3d3a <vfprintf+0xaa>
    3d1c:	83 32       	cpi	r24, 0x23	; 35
    3d1e:	a1 f4       	brne	.+40     	; 0x3d48 <vfprintf+0xb8>
    3d20:	23 2d       	mov	r18, r3
    3d22:	20 61       	ori	r18, 0x10	; 16
    3d24:	1d c0       	rjmp	.+58     	; 0x3d60 <vfprintf+0xd0>
    3d26:	8d 32       	cpi	r24, 0x2D	; 45
    3d28:	61 f0       	breq	.+24     	; 0x3d42 <vfprintf+0xb2>
    3d2a:	80 33       	cpi	r24, 0x30	; 48
    3d2c:	69 f4       	brne	.+26     	; 0x3d48 <vfprintf+0xb8>
    3d2e:	23 2d       	mov	r18, r3
    3d30:	21 60       	ori	r18, 0x01	; 1
    3d32:	16 c0       	rjmp	.+44     	; 0x3d60 <vfprintf+0xd0>
    3d34:	83 2d       	mov	r24, r3
    3d36:	82 60       	ori	r24, 0x02	; 2
    3d38:	38 2e       	mov	r3, r24
    3d3a:	e3 2d       	mov	r30, r3
    3d3c:	e4 60       	ori	r30, 0x04	; 4
    3d3e:	3e 2e       	mov	r3, r30
    3d40:	2a c0       	rjmp	.+84     	; 0x3d96 <vfprintf+0x106>
    3d42:	f3 2d       	mov	r31, r3
    3d44:	f8 60       	ori	r31, 0x08	; 8
    3d46:	1d c0       	rjmp	.+58     	; 0x3d82 <vfprintf+0xf2>
    3d48:	37 fc       	sbrc	r3, 7
    3d4a:	2d c0       	rjmp	.+90     	; 0x3da6 <vfprintf+0x116>
    3d4c:	20 ed       	ldi	r18, 0xD0	; 208
    3d4e:	28 0f       	add	r18, r24
    3d50:	2a 30       	cpi	r18, 0x0A	; 10
    3d52:	40 f0       	brcs	.+16     	; 0x3d64 <vfprintf+0xd4>
    3d54:	8e 32       	cpi	r24, 0x2E	; 46
    3d56:	b9 f4       	brne	.+46     	; 0x3d86 <vfprintf+0xf6>
    3d58:	36 fc       	sbrc	r3, 6
    3d5a:	75 c1       	rjmp	.+746    	; 0x4046 <__stack+0x47>
    3d5c:	23 2d       	mov	r18, r3
    3d5e:	20 64       	ori	r18, 0x40	; 64
    3d60:	32 2e       	mov	r3, r18
    3d62:	19 c0       	rjmp	.+50     	; 0x3d96 <vfprintf+0x106>
    3d64:	36 fe       	sbrs	r3, 6
    3d66:	06 c0       	rjmp	.+12     	; 0x3d74 <vfprintf+0xe4>
    3d68:	8a e0       	ldi	r24, 0x0A	; 10
    3d6a:	98 9e       	mul	r9, r24
    3d6c:	20 0d       	add	r18, r0
    3d6e:	11 24       	eor	r1, r1
    3d70:	92 2e       	mov	r9, r18
    3d72:	11 c0       	rjmp	.+34     	; 0x3d96 <vfprintf+0x106>
    3d74:	ea e0       	ldi	r30, 0x0A	; 10
    3d76:	2e 9e       	mul	r2, r30
    3d78:	20 0d       	add	r18, r0
    3d7a:	11 24       	eor	r1, r1
    3d7c:	22 2e       	mov	r2, r18
    3d7e:	f3 2d       	mov	r31, r3
    3d80:	f0 62       	ori	r31, 0x20	; 32
    3d82:	3f 2e       	mov	r3, r31
    3d84:	08 c0       	rjmp	.+16     	; 0x3d96 <vfprintf+0x106>
    3d86:	8c 36       	cpi	r24, 0x6C	; 108
    3d88:	21 f4       	brne	.+8      	; 0x3d92 <vfprintf+0x102>
    3d8a:	83 2d       	mov	r24, r3
    3d8c:	80 68       	ori	r24, 0x80	; 128
    3d8e:	38 2e       	mov	r3, r24
    3d90:	02 c0       	rjmp	.+4      	; 0x3d96 <vfprintf+0x106>
    3d92:	88 36       	cpi	r24, 0x68	; 104
    3d94:	41 f4       	brne	.+16     	; 0x3da6 <vfprintf+0x116>
    3d96:	f7 01       	movw	r30, r14
    3d98:	93 fd       	sbrc	r25, 3
    3d9a:	85 91       	lpm	r24, Z+
    3d9c:	93 ff       	sbrs	r25, 3
    3d9e:	81 91       	ld	r24, Z+
    3da0:	7f 01       	movw	r14, r30
    3da2:	81 11       	cpse	r24, r1
    3da4:	b3 cf       	rjmp	.-154    	; 0x3d0c <vfprintf+0x7c>
    3da6:	98 2f       	mov	r25, r24
    3da8:	9f 7d       	andi	r25, 0xDF	; 223
    3daa:	95 54       	subi	r25, 0x45	; 69
    3dac:	93 30       	cpi	r25, 0x03	; 3
    3dae:	28 f4       	brcc	.+10     	; 0x3dba <vfprintf+0x12a>
    3db0:	0c 5f       	subi	r16, 0xFC	; 252
    3db2:	1f 4f       	sbci	r17, 0xFF	; 255
    3db4:	9f e3       	ldi	r25, 0x3F	; 63
    3db6:	99 83       	std	Y+1, r25	; 0x01
    3db8:	0d c0       	rjmp	.+26     	; 0x3dd4 <vfprintf+0x144>
    3dba:	83 36       	cpi	r24, 0x63	; 99
    3dbc:	31 f0       	breq	.+12     	; 0x3dca <vfprintf+0x13a>
    3dbe:	83 37       	cpi	r24, 0x73	; 115
    3dc0:	71 f0       	breq	.+28     	; 0x3dde <vfprintf+0x14e>
    3dc2:	83 35       	cpi	r24, 0x53	; 83
    3dc4:	09 f0       	breq	.+2      	; 0x3dc8 <vfprintf+0x138>
    3dc6:	55 c0       	rjmp	.+170    	; 0x3e72 <vfprintf+0x1e2>
    3dc8:	20 c0       	rjmp	.+64     	; 0x3e0a <vfprintf+0x17a>
    3dca:	f8 01       	movw	r30, r16
    3dcc:	80 81       	ld	r24, Z
    3dce:	89 83       	std	Y+1, r24	; 0x01
    3dd0:	0e 5f       	subi	r16, 0xFE	; 254
    3dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd4:	88 24       	eor	r8, r8
    3dd6:	83 94       	inc	r8
    3dd8:	91 2c       	mov	r9, r1
    3dda:	53 01       	movw	r10, r6
    3ddc:	12 c0       	rjmp	.+36     	; 0x3e02 <vfprintf+0x172>
    3dde:	28 01       	movw	r4, r16
    3de0:	f2 e0       	ldi	r31, 0x02	; 2
    3de2:	4f 0e       	add	r4, r31
    3de4:	51 1c       	adc	r5, r1
    3de6:	f8 01       	movw	r30, r16
    3de8:	a0 80       	ld	r10, Z
    3dea:	b1 80       	ldd	r11, Z+1	; 0x01
    3dec:	36 fe       	sbrs	r3, 6
    3dee:	03 c0       	rjmp	.+6      	; 0x3df6 <vfprintf+0x166>
    3df0:	69 2d       	mov	r22, r9
    3df2:	70 e0       	ldi	r23, 0x00	; 0
    3df4:	02 c0       	rjmp	.+4      	; 0x3dfa <vfprintf+0x16a>
    3df6:	6f ef       	ldi	r22, 0xFF	; 255
    3df8:	7f ef       	ldi	r23, 0xFF	; 255
    3dfa:	c5 01       	movw	r24, r10
    3dfc:	63 d5       	rcall	.+2758   	; 0x48c4 <strnlen>
    3dfe:	4c 01       	movw	r8, r24
    3e00:	82 01       	movw	r16, r4
    3e02:	f3 2d       	mov	r31, r3
    3e04:	ff 77       	andi	r31, 0x7F	; 127
    3e06:	3f 2e       	mov	r3, r31
    3e08:	15 c0       	rjmp	.+42     	; 0x3e34 <vfprintf+0x1a4>
    3e0a:	28 01       	movw	r4, r16
    3e0c:	22 e0       	ldi	r18, 0x02	; 2
    3e0e:	42 0e       	add	r4, r18
    3e10:	51 1c       	adc	r5, r1
    3e12:	f8 01       	movw	r30, r16
    3e14:	a0 80       	ld	r10, Z
    3e16:	b1 80       	ldd	r11, Z+1	; 0x01
    3e18:	36 fe       	sbrs	r3, 6
    3e1a:	03 c0       	rjmp	.+6      	; 0x3e22 <vfprintf+0x192>
    3e1c:	69 2d       	mov	r22, r9
    3e1e:	70 e0       	ldi	r23, 0x00	; 0
    3e20:	02 c0       	rjmp	.+4      	; 0x3e26 <vfprintf+0x196>
    3e22:	6f ef       	ldi	r22, 0xFF	; 255
    3e24:	7f ef       	ldi	r23, 0xFF	; 255
    3e26:	c5 01       	movw	r24, r10
    3e28:	3b d5       	rcall	.+2678   	; 0x48a0 <strnlen_P>
    3e2a:	4c 01       	movw	r8, r24
    3e2c:	f3 2d       	mov	r31, r3
    3e2e:	f0 68       	ori	r31, 0x80	; 128
    3e30:	3f 2e       	mov	r3, r31
    3e32:	82 01       	movw	r16, r4
    3e34:	33 fc       	sbrc	r3, 3
    3e36:	19 c0       	rjmp	.+50     	; 0x3e6a <vfprintf+0x1da>
    3e38:	82 2d       	mov	r24, r2
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	88 16       	cp	r8, r24
    3e3e:	99 06       	cpc	r9, r25
    3e40:	a0 f4       	brcc	.+40     	; 0x3e6a <vfprintf+0x1da>
    3e42:	b6 01       	movw	r22, r12
    3e44:	80 e2       	ldi	r24, 0x20	; 32
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	86 d5       	rcall	.+2828   	; 0x4956 <fputc>
    3e4a:	2a 94       	dec	r2
    3e4c:	f5 cf       	rjmp	.-22     	; 0x3e38 <vfprintf+0x1a8>
    3e4e:	f5 01       	movw	r30, r10
    3e50:	37 fc       	sbrc	r3, 7
    3e52:	85 91       	lpm	r24, Z+
    3e54:	37 fe       	sbrs	r3, 7
    3e56:	81 91       	ld	r24, Z+
    3e58:	5f 01       	movw	r10, r30
    3e5a:	b6 01       	movw	r22, r12
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	7b d5       	rcall	.+2806   	; 0x4956 <fputc>
    3e60:	21 10       	cpse	r2, r1
    3e62:	2a 94       	dec	r2
    3e64:	21 e0       	ldi	r18, 0x01	; 1
    3e66:	82 1a       	sub	r8, r18
    3e68:	91 08       	sbc	r9, r1
    3e6a:	81 14       	cp	r8, r1
    3e6c:	91 04       	cpc	r9, r1
    3e6e:	79 f7       	brne	.-34     	; 0x3e4e <vfprintf+0x1be>
    3e70:	e1 c0       	rjmp	.+450    	; 0x4034 <__stack+0x35>
    3e72:	84 36       	cpi	r24, 0x64	; 100
    3e74:	11 f0       	breq	.+4      	; 0x3e7a <vfprintf+0x1ea>
    3e76:	89 36       	cpi	r24, 0x69	; 105
    3e78:	39 f5       	brne	.+78     	; 0x3ec8 <vfprintf+0x238>
    3e7a:	f8 01       	movw	r30, r16
    3e7c:	37 fe       	sbrs	r3, 7
    3e7e:	07 c0       	rjmp	.+14     	; 0x3e8e <vfprintf+0x1fe>
    3e80:	60 81       	ld	r22, Z
    3e82:	71 81       	ldd	r23, Z+1	; 0x01
    3e84:	82 81       	ldd	r24, Z+2	; 0x02
    3e86:	93 81       	ldd	r25, Z+3	; 0x03
    3e88:	0c 5f       	subi	r16, 0xFC	; 252
    3e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8c:	08 c0       	rjmp	.+16     	; 0x3e9e <vfprintf+0x20e>
    3e8e:	60 81       	ld	r22, Z
    3e90:	71 81       	ldd	r23, Z+1	; 0x01
    3e92:	07 2e       	mov	r0, r23
    3e94:	00 0c       	add	r0, r0
    3e96:	88 0b       	sbc	r24, r24
    3e98:	99 0b       	sbc	r25, r25
    3e9a:	0e 5f       	subi	r16, 0xFE	; 254
    3e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e9e:	f3 2d       	mov	r31, r3
    3ea0:	ff 76       	andi	r31, 0x6F	; 111
    3ea2:	3f 2e       	mov	r3, r31
    3ea4:	97 ff       	sbrs	r25, 7
    3ea6:	09 c0       	rjmp	.+18     	; 0x3eba <vfprintf+0x22a>
    3ea8:	90 95       	com	r25
    3eaa:	80 95       	com	r24
    3eac:	70 95       	com	r23
    3eae:	61 95       	neg	r22
    3eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb2:	8f 4f       	sbci	r24, 0xFF	; 255
    3eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb6:	f0 68       	ori	r31, 0x80	; 128
    3eb8:	3f 2e       	mov	r3, r31
    3eba:	2a e0       	ldi	r18, 0x0A	; 10
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	a3 01       	movw	r20, r6
    3ec0:	9f d5       	rcall	.+2878   	; 0x4a00 <__ultoa_invert>
    3ec2:	88 2e       	mov	r8, r24
    3ec4:	86 18       	sub	r8, r6
    3ec6:	44 c0       	rjmp	.+136    	; 0x3f50 <vfprintf+0x2c0>
    3ec8:	85 37       	cpi	r24, 0x75	; 117
    3eca:	31 f4       	brne	.+12     	; 0x3ed8 <vfprintf+0x248>
    3ecc:	23 2d       	mov	r18, r3
    3ece:	2f 7e       	andi	r18, 0xEF	; 239
    3ed0:	b2 2e       	mov	r11, r18
    3ed2:	2a e0       	ldi	r18, 0x0A	; 10
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	25 c0       	rjmp	.+74     	; 0x3f22 <vfprintf+0x292>
    3ed8:	93 2d       	mov	r25, r3
    3eda:	99 7f       	andi	r25, 0xF9	; 249
    3edc:	b9 2e       	mov	r11, r25
    3ede:	8f 36       	cpi	r24, 0x6F	; 111
    3ee0:	c1 f0       	breq	.+48     	; 0x3f12 <vfprintf+0x282>
    3ee2:	18 f4       	brcc	.+6      	; 0x3eea <vfprintf+0x25a>
    3ee4:	88 35       	cpi	r24, 0x58	; 88
    3ee6:	79 f0       	breq	.+30     	; 0x3f06 <vfprintf+0x276>
    3ee8:	ae c0       	rjmp	.+348    	; 0x4046 <__stack+0x47>
    3eea:	80 37       	cpi	r24, 0x70	; 112
    3eec:	19 f0       	breq	.+6      	; 0x3ef4 <vfprintf+0x264>
    3eee:	88 37       	cpi	r24, 0x78	; 120
    3ef0:	21 f0       	breq	.+8      	; 0x3efa <vfprintf+0x26a>
    3ef2:	a9 c0       	rjmp	.+338    	; 0x4046 <__stack+0x47>
    3ef4:	e9 2f       	mov	r30, r25
    3ef6:	e0 61       	ori	r30, 0x10	; 16
    3ef8:	be 2e       	mov	r11, r30
    3efa:	b4 fe       	sbrs	r11, 4
    3efc:	0d c0       	rjmp	.+26     	; 0x3f18 <vfprintf+0x288>
    3efe:	fb 2d       	mov	r31, r11
    3f00:	f4 60       	ori	r31, 0x04	; 4
    3f02:	bf 2e       	mov	r11, r31
    3f04:	09 c0       	rjmp	.+18     	; 0x3f18 <vfprintf+0x288>
    3f06:	34 fe       	sbrs	r3, 4
    3f08:	0a c0       	rjmp	.+20     	; 0x3f1e <vfprintf+0x28e>
    3f0a:	29 2f       	mov	r18, r25
    3f0c:	26 60       	ori	r18, 0x06	; 6
    3f0e:	b2 2e       	mov	r11, r18
    3f10:	06 c0       	rjmp	.+12     	; 0x3f1e <vfprintf+0x28e>
    3f12:	28 e0       	ldi	r18, 0x08	; 8
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	05 c0       	rjmp	.+10     	; 0x3f22 <vfprintf+0x292>
    3f18:	20 e1       	ldi	r18, 0x10	; 16
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	02 c0       	rjmp	.+4      	; 0x3f22 <vfprintf+0x292>
    3f1e:	20 e1       	ldi	r18, 0x10	; 16
    3f20:	32 e0       	ldi	r19, 0x02	; 2
    3f22:	f8 01       	movw	r30, r16
    3f24:	b7 fe       	sbrs	r11, 7
    3f26:	07 c0       	rjmp	.+14     	; 0x3f36 <vfprintf+0x2a6>
    3f28:	60 81       	ld	r22, Z
    3f2a:	71 81       	ldd	r23, Z+1	; 0x01
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	93 81       	ldd	r25, Z+3	; 0x03
    3f30:	0c 5f       	subi	r16, 0xFC	; 252
    3f32:	1f 4f       	sbci	r17, 0xFF	; 255
    3f34:	06 c0       	rjmp	.+12     	; 0x3f42 <vfprintf+0x2b2>
    3f36:	60 81       	ld	r22, Z
    3f38:	71 81       	ldd	r23, Z+1	; 0x01
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	0e 5f       	subi	r16, 0xFE	; 254
    3f40:	1f 4f       	sbci	r17, 0xFF	; 255
    3f42:	a3 01       	movw	r20, r6
    3f44:	5d d5       	rcall	.+2746   	; 0x4a00 <__ultoa_invert>
    3f46:	88 2e       	mov	r8, r24
    3f48:	86 18       	sub	r8, r6
    3f4a:	fb 2d       	mov	r31, r11
    3f4c:	ff 77       	andi	r31, 0x7F	; 127
    3f4e:	3f 2e       	mov	r3, r31
    3f50:	36 fe       	sbrs	r3, 6
    3f52:	0d c0       	rjmp	.+26     	; 0x3f6e <vfprintf+0x2de>
    3f54:	23 2d       	mov	r18, r3
    3f56:	2e 7f       	andi	r18, 0xFE	; 254
    3f58:	a2 2e       	mov	r10, r18
    3f5a:	89 14       	cp	r8, r9
    3f5c:	58 f4       	brcc	.+22     	; 0x3f74 <vfprintf+0x2e4>
    3f5e:	34 fe       	sbrs	r3, 4
    3f60:	0b c0       	rjmp	.+22     	; 0x3f78 <vfprintf+0x2e8>
    3f62:	32 fc       	sbrc	r3, 2
    3f64:	09 c0       	rjmp	.+18     	; 0x3f78 <vfprintf+0x2e8>
    3f66:	83 2d       	mov	r24, r3
    3f68:	8e 7e       	andi	r24, 0xEE	; 238
    3f6a:	a8 2e       	mov	r10, r24
    3f6c:	05 c0       	rjmp	.+10     	; 0x3f78 <vfprintf+0x2e8>
    3f6e:	b8 2c       	mov	r11, r8
    3f70:	a3 2c       	mov	r10, r3
    3f72:	03 c0       	rjmp	.+6      	; 0x3f7a <vfprintf+0x2ea>
    3f74:	b8 2c       	mov	r11, r8
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <vfprintf+0x2ea>
    3f78:	b9 2c       	mov	r11, r9
    3f7a:	a4 fe       	sbrs	r10, 4
    3f7c:	0f c0       	rjmp	.+30     	; 0x3f9c <vfprintf+0x30c>
    3f7e:	fe 01       	movw	r30, r28
    3f80:	e8 0d       	add	r30, r8
    3f82:	f1 1d       	adc	r31, r1
    3f84:	80 81       	ld	r24, Z
    3f86:	80 33       	cpi	r24, 0x30	; 48
    3f88:	21 f4       	brne	.+8      	; 0x3f92 <vfprintf+0x302>
    3f8a:	9a 2d       	mov	r25, r10
    3f8c:	99 7e       	andi	r25, 0xE9	; 233
    3f8e:	a9 2e       	mov	r10, r25
    3f90:	09 c0       	rjmp	.+18     	; 0x3fa4 <vfprintf+0x314>
    3f92:	a2 fe       	sbrs	r10, 2
    3f94:	06 c0       	rjmp	.+12     	; 0x3fa2 <vfprintf+0x312>
    3f96:	b3 94       	inc	r11
    3f98:	b3 94       	inc	r11
    3f9a:	04 c0       	rjmp	.+8      	; 0x3fa4 <vfprintf+0x314>
    3f9c:	8a 2d       	mov	r24, r10
    3f9e:	86 78       	andi	r24, 0x86	; 134
    3fa0:	09 f0       	breq	.+2      	; 0x3fa4 <vfprintf+0x314>
    3fa2:	b3 94       	inc	r11
    3fa4:	a3 fc       	sbrc	r10, 3
    3fa6:	10 c0       	rjmp	.+32     	; 0x3fc8 <vfprintf+0x338>
    3fa8:	a0 fe       	sbrs	r10, 0
    3faa:	06 c0       	rjmp	.+12     	; 0x3fb8 <vfprintf+0x328>
    3fac:	b2 14       	cp	r11, r2
    3fae:	80 f4       	brcc	.+32     	; 0x3fd0 <vfprintf+0x340>
    3fb0:	28 0c       	add	r2, r8
    3fb2:	92 2c       	mov	r9, r2
    3fb4:	9b 18       	sub	r9, r11
    3fb6:	0d c0       	rjmp	.+26     	; 0x3fd2 <vfprintf+0x342>
    3fb8:	b2 14       	cp	r11, r2
    3fba:	58 f4       	brcc	.+22     	; 0x3fd2 <vfprintf+0x342>
    3fbc:	b6 01       	movw	r22, r12
    3fbe:	80 e2       	ldi	r24, 0x20	; 32
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	c9 d4       	rcall	.+2450   	; 0x4956 <fputc>
    3fc4:	b3 94       	inc	r11
    3fc6:	f8 cf       	rjmp	.-16     	; 0x3fb8 <vfprintf+0x328>
    3fc8:	b2 14       	cp	r11, r2
    3fca:	18 f4       	brcc	.+6      	; 0x3fd2 <vfprintf+0x342>
    3fcc:	2b 18       	sub	r2, r11
    3fce:	02 c0       	rjmp	.+4      	; 0x3fd4 <vfprintf+0x344>
    3fd0:	98 2c       	mov	r9, r8
    3fd2:	21 2c       	mov	r2, r1
    3fd4:	a4 fe       	sbrs	r10, 4
    3fd6:	0f c0       	rjmp	.+30     	; 0x3ff6 <vfprintf+0x366>
    3fd8:	b6 01       	movw	r22, r12
    3fda:	80 e3       	ldi	r24, 0x30	; 48
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	bb d4       	rcall	.+2422   	; 0x4956 <fputc>
    3fe0:	a2 fe       	sbrs	r10, 2
    3fe2:	16 c0       	rjmp	.+44     	; 0x4010 <__stack+0x11>
    3fe4:	a1 fc       	sbrc	r10, 1
    3fe6:	03 c0       	rjmp	.+6      	; 0x3fee <vfprintf+0x35e>
    3fe8:	88 e7       	ldi	r24, 0x78	; 120
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <vfprintf+0x362>
    3fee:	88 e5       	ldi	r24, 0x58	; 88
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	b6 01       	movw	r22, r12
    3ff4:	0c c0       	rjmp	.+24     	; 0x400e <__stack+0xf>
    3ff6:	8a 2d       	mov	r24, r10
    3ff8:	86 78       	andi	r24, 0x86	; 134
    3ffa:	51 f0       	breq	.+20     	; 0x4010 <__stack+0x11>
    3ffc:	a1 fe       	sbrs	r10, 1
    3ffe:	02 c0       	rjmp	.+4      	; 0x4004 <__stack+0x5>
    4000:	8b e2       	ldi	r24, 0x2B	; 43
    4002:	01 c0       	rjmp	.+2      	; 0x4006 <__stack+0x7>
    4004:	80 e2       	ldi	r24, 0x20	; 32
    4006:	a7 fc       	sbrc	r10, 7
    4008:	8d e2       	ldi	r24, 0x2D	; 45
    400a:	b6 01       	movw	r22, r12
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	a3 d4       	rcall	.+2374   	; 0x4956 <fputc>
    4010:	89 14       	cp	r8, r9
    4012:	30 f4       	brcc	.+12     	; 0x4020 <__stack+0x21>
    4014:	b6 01       	movw	r22, r12
    4016:	80 e3       	ldi	r24, 0x30	; 48
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	9d d4       	rcall	.+2362   	; 0x4956 <fputc>
    401c:	9a 94       	dec	r9
    401e:	f8 cf       	rjmp	.-16     	; 0x4010 <__stack+0x11>
    4020:	8a 94       	dec	r8
    4022:	f3 01       	movw	r30, r6
    4024:	e8 0d       	add	r30, r8
    4026:	f1 1d       	adc	r31, r1
    4028:	80 81       	ld	r24, Z
    402a:	b6 01       	movw	r22, r12
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	93 d4       	rcall	.+2342   	; 0x4956 <fputc>
    4030:	81 10       	cpse	r8, r1
    4032:	f6 cf       	rjmp	.-20     	; 0x4020 <__stack+0x21>
    4034:	22 20       	and	r2, r2
    4036:	09 f4       	brne	.+2      	; 0x403a <__stack+0x3b>
    4038:	4e ce       	rjmp	.-868    	; 0x3cd6 <vfprintf+0x46>
    403a:	b6 01       	movw	r22, r12
    403c:	80 e2       	ldi	r24, 0x20	; 32
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	8a d4       	rcall	.+2324   	; 0x4956 <fputc>
    4042:	2a 94       	dec	r2
    4044:	f7 cf       	rjmp	.-18     	; 0x4034 <__stack+0x35>
    4046:	f6 01       	movw	r30, r12
    4048:	86 81       	ldd	r24, Z+6	; 0x06
    404a:	97 81       	ldd	r25, Z+7	; 0x07
    404c:	02 c0       	rjmp	.+4      	; 0x4052 <__stack+0x53>
    404e:	8f ef       	ldi	r24, 0xFF	; 255
    4050:	9f ef       	ldi	r25, 0xFF	; 255
    4052:	2b 96       	adiw	r28, 0x0b	; 11
    4054:	cd bf       	out	0x3d, r28	; 61
    4056:	de bf       	out	0x3e, r29	; 62
    4058:	df 91       	pop	r29
    405a:	cf 91       	pop	r28
    405c:	1f 91       	pop	r17
    405e:	0f 91       	pop	r16
    4060:	ff 90       	pop	r15
    4062:	ef 90       	pop	r14
    4064:	df 90       	pop	r13
    4066:	cf 90       	pop	r12
    4068:	bf 90       	pop	r11
    406a:	af 90       	pop	r10
    406c:	9f 90       	pop	r9
    406e:	8f 90       	pop	r8
    4070:	7f 90       	pop	r7
    4072:	6f 90       	pop	r6
    4074:	5f 90       	pop	r5
    4076:	4f 90       	pop	r4
    4078:	3f 90       	pop	r3
    407a:	2f 90       	pop	r2
    407c:	08 95       	ret

0000407e <putval>:
    407e:	20 fd       	sbrc	r18, 0
    4080:	09 c0       	rjmp	.+18     	; 0x4094 <putval+0x16>
    4082:	fc 01       	movw	r30, r24
    4084:	23 fd       	sbrc	r18, 3
    4086:	05 c0       	rjmp	.+10     	; 0x4092 <putval+0x14>
    4088:	22 ff       	sbrs	r18, 2
    408a:	02 c0       	rjmp	.+4      	; 0x4090 <putval+0x12>
    408c:	73 83       	std	Z+3, r23	; 0x03
    408e:	62 83       	std	Z+2, r22	; 0x02
    4090:	51 83       	std	Z+1, r21	; 0x01
    4092:	40 83       	st	Z, r20
    4094:	08 95       	ret

00004096 <mulacc>:
    4096:	44 fd       	sbrc	r20, 4
    4098:	17 c0       	rjmp	.+46     	; 0x40c8 <mulacc+0x32>
    409a:	46 fd       	sbrc	r20, 6
    409c:	17 c0       	rjmp	.+46     	; 0x40cc <mulacc+0x36>
    409e:	ab 01       	movw	r20, r22
    40a0:	bc 01       	movw	r22, r24
    40a2:	da 01       	movw	r26, r20
    40a4:	fb 01       	movw	r30, r22
    40a6:	aa 0f       	add	r26, r26
    40a8:	bb 1f       	adc	r27, r27
    40aa:	ee 1f       	adc	r30, r30
    40ac:	ff 1f       	adc	r31, r31
    40ae:	10 94       	com	r1
    40b0:	d1 f7       	brne	.-12     	; 0x40a6 <mulacc+0x10>
    40b2:	4a 0f       	add	r20, r26
    40b4:	5b 1f       	adc	r21, r27
    40b6:	6e 1f       	adc	r22, r30
    40b8:	7f 1f       	adc	r23, r31
    40ba:	cb 01       	movw	r24, r22
    40bc:	ba 01       	movw	r22, r20
    40be:	66 0f       	add	r22, r22
    40c0:	77 1f       	adc	r23, r23
    40c2:	88 1f       	adc	r24, r24
    40c4:	99 1f       	adc	r25, r25
    40c6:	09 c0       	rjmp	.+18     	; 0x40da <mulacc+0x44>
    40c8:	33 e0       	ldi	r19, 0x03	; 3
    40ca:	01 c0       	rjmp	.+2      	; 0x40ce <mulacc+0x38>
    40cc:	34 e0       	ldi	r19, 0x04	; 4
    40ce:	66 0f       	add	r22, r22
    40d0:	77 1f       	adc	r23, r23
    40d2:	88 1f       	adc	r24, r24
    40d4:	99 1f       	adc	r25, r25
    40d6:	31 50       	subi	r19, 0x01	; 1
    40d8:	d1 f7       	brne	.-12     	; 0x40ce <mulacc+0x38>
    40da:	62 0f       	add	r22, r18
    40dc:	71 1d       	adc	r23, r1
    40de:	81 1d       	adc	r24, r1
    40e0:	91 1d       	adc	r25, r1
    40e2:	08 95       	ret

000040e4 <skip_spaces>:
    40e4:	0f 93       	push	r16
    40e6:	1f 93       	push	r17
    40e8:	cf 93       	push	r28
    40ea:	df 93       	push	r29
    40ec:	8c 01       	movw	r16, r24
    40ee:	c8 01       	movw	r24, r16
    40f0:	f4 d3       	rcall	.+2024   	; 0x48da <fgetc>
    40f2:	ec 01       	movw	r28, r24
    40f4:	97 fd       	sbrc	r25, 7
    40f6:	06 c0       	rjmp	.+12     	; 0x4104 <skip_spaces+0x20>
    40f8:	c0 d3       	rcall	.+1920   	; 0x487a <isspace>
    40fa:	89 2b       	or	r24, r25
    40fc:	c1 f7       	brne	.-16     	; 0x40ee <skip_spaces+0xa>
    40fe:	b8 01       	movw	r22, r16
    4100:	ce 01       	movw	r24, r28
    4102:	65 d4       	rcall	.+2250   	; 0x49ce <ungetc>
    4104:	ce 01       	movw	r24, r28
    4106:	df 91       	pop	r29
    4108:	cf 91       	pop	r28
    410a:	1f 91       	pop	r17
    410c:	0f 91       	pop	r16
    410e:	08 95       	ret

00004110 <conv_int>:
    4110:	8f 92       	push	r8
    4112:	9f 92       	push	r9
    4114:	af 92       	push	r10
    4116:	bf 92       	push	r11
    4118:	ef 92       	push	r14
    411a:	ff 92       	push	r15
    411c:	0f 93       	push	r16
    411e:	1f 93       	push	r17
    4120:	cf 93       	push	r28
    4122:	df 93       	push	r29
    4124:	8c 01       	movw	r16, r24
    4126:	d6 2f       	mov	r29, r22
    4128:	7a 01       	movw	r14, r20
    412a:	b2 2e       	mov	r11, r18
    412c:	d6 d3       	rcall	.+1964   	; 0x48da <fgetc>
    412e:	9c 01       	movw	r18, r24
    4130:	33 27       	eor	r19, r19
    4132:	2b 32       	cpi	r18, 0x2B	; 43
    4134:	31 05       	cpc	r19, r1
    4136:	31 f0       	breq	.+12     	; 0x4144 <conv_int+0x34>
    4138:	2d 32       	cpi	r18, 0x2D	; 45
    413a:	31 05       	cpc	r19, r1
    413c:	59 f4       	brne	.+22     	; 0x4154 <conv_int+0x44>
    413e:	8b 2d       	mov	r24, r11
    4140:	80 68       	ori	r24, 0x80	; 128
    4142:	b8 2e       	mov	r11, r24
    4144:	d1 50       	subi	r29, 0x01	; 1
    4146:	11 f4       	brne	.+4      	; 0x414c <conv_int+0x3c>
    4148:	80 e0       	ldi	r24, 0x00	; 0
    414a:	61 c0       	rjmp	.+194    	; 0x420e <conv_int+0xfe>
    414c:	c8 01       	movw	r24, r16
    414e:	c5 d3       	rcall	.+1930   	; 0x48da <fgetc>
    4150:	97 fd       	sbrc	r25, 7
    4152:	fa cf       	rjmp	.-12     	; 0x4148 <conv_int+0x38>
    4154:	cb 2d       	mov	r28, r11
    4156:	cd 7f       	andi	r28, 0xFD	; 253
    4158:	2b 2d       	mov	r18, r11
    415a:	20 73       	andi	r18, 0x30	; 48
    415c:	f9 f4       	brne	.+62     	; 0x419c <conv_int+0x8c>
    415e:	80 33       	cpi	r24, 0x30	; 48
    4160:	e9 f4       	brne	.+58     	; 0x419c <conv_int+0x8c>
    4162:	aa 24       	eor	r10, r10
    4164:	aa 94       	dec	r10
    4166:	ad 0e       	add	r10, r29
    4168:	09 f4       	brne	.+2      	; 0x416c <conv_int+0x5c>
    416a:	3e c0       	rjmp	.+124    	; 0x41e8 <conv_int+0xd8>
    416c:	c8 01       	movw	r24, r16
    416e:	b5 d3       	rcall	.+1898   	; 0x48da <fgetc>
    4170:	97 fd       	sbrc	r25, 7
    4172:	3a c0       	rjmp	.+116    	; 0x41e8 <conv_int+0xd8>
    4174:	9c 01       	movw	r18, r24
    4176:	2f 7d       	andi	r18, 0xDF	; 223
    4178:	33 27       	eor	r19, r19
    417a:	28 35       	cpi	r18, 0x58	; 88
    417c:	31 05       	cpc	r19, r1
    417e:	41 f4       	brne	.+16     	; 0x4190 <conv_int+0x80>
    4180:	c2 64       	ori	r28, 0x42	; 66
    4182:	d2 50       	subi	r29, 0x02	; 2
    4184:	89 f1       	breq	.+98     	; 0x41e8 <conv_int+0xd8>
    4186:	c8 01       	movw	r24, r16
    4188:	a8 d3       	rcall	.+1872   	; 0x48da <fgetc>
    418a:	97 ff       	sbrs	r25, 7
    418c:	07 c0       	rjmp	.+14     	; 0x419c <conv_int+0x8c>
    418e:	2c c0       	rjmp	.+88     	; 0x41e8 <conv_int+0xd8>
    4190:	b6 fe       	sbrs	r11, 6
    4192:	02 c0       	rjmp	.+4      	; 0x4198 <conv_int+0x88>
    4194:	c2 60       	ori	r28, 0x02	; 2
    4196:	01 c0       	rjmp	.+2      	; 0x419a <conv_int+0x8a>
    4198:	c2 61       	ori	r28, 0x12	; 18
    419a:	da 2d       	mov	r29, r10
    419c:	81 2c       	mov	r8, r1
    419e:	91 2c       	mov	r9, r1
    41a0:	54 01       	movw	r10, r8
    41a2:	20 ed       	ldi	r18, 0xD0	; 208
    41a4:	28 0f       	add	r18, r24
    41a6:	28 30       	cpi	r18, 0x08	; 8
    41a8:	78 f0       	brcs	.+30     	; 0x41c8 <conv_int+0xb8>
    41aa:	c4 ff       	sbrs	r28, 4
    41ac:	03 c0       	rjmp	.+6      	; 0x41b4 <conv_int+0xa4>
    41ae:	b8 01       	movw	r22, r16
    41b0:	0e d4       	rcall	.+2076   	; 0x49ce <ungetc>
    41b2:	17 c0       	rjmp	.+46     	; 0x41e2 <conv_int+0xd2>
    41b4:	2a 30       	cpi	r18, 0x0A	; 10
    41b6:	40 f0       	brcs	.+16     	; 0x41c8 <conv_int+0xb8>
    41b8:	c6 ff       	sbrs	r28, 6
    41ba:	f9 cf       	rjmp	.-14     	; 0x41ae <conv_int+0x9e>
    41bc:	2f 7d       	andi	r18, 0xDF	; 223
    41be:	3f ee       	ldi	r19, 0xEF	; 239
    41c0:	32 0f       	add	r19, r18
    41c2:	36 30       	cpi	r19, 0x06	; 6
    41c4:	a0 f7       	brcc	.-24     	; 0x41ae <conv_int+0x9e>
    41c6:	27 50       	subi	r18, 0x07	; 7
    41c8:	4c 2f       	mov	r20, r28
    41ca:	c5 01       	movw	r24, r10
    41cc:	b4 01       	movw	r22, r8
    41ce:	63 df       	rcall	.-314    	; 0x4096 <mulacc>
    41d0:	4b 01       	movw	r8, r22
    41d2:	5c 01       	movw	r10, r24
    41d4:	c2 60       	ori	r28, 0x02	; 2
    41d6:	d1 50       	subi	r29, 0x01	; 1
    41d8:	51 f0       	breq	.+20     	; 0x41ee <conv_int+0xde>
    41da:	c8 01       	movw	r24, r16
    41dc:	7e d3       	rcall	.+1788   	; 0x48da <fgetc>
    41de:	97 ff       	sbrs	r25, 7
    41e0:	e0 cf       	rjmp	.-64     	; 0x41a2 <conv_int+0x92>
    41e2:	c1 fd       	sbrc	r28, 1
    41e4:	04 c0       	rjmp	.+8      	; 0x41ee <conv_int+0xde>
    41e6:	b0 cf       	rjmp	.-160    	; 0x4148 <conv_int+0x38>
    41e8:	81 2c       	mov	r8, r1
    41ea:	91 2c       	mov	r9, r1
    41ec:	54 01       	movw	r10, r8
    41ee:	c7 ff       	sbrs	r28, 7
    41f0:	08 c0       	rjmp	.+16     	; 0x4202 <conv_int+0xf2>
    41f2:	b0 94       	com	r11
    41f4:	a0 94       	com	r10
    41f6:	90 94       	com	r9
    41f8:	80 94       	com	r8
    41fa:	81 1c       	adc	r8, r1
    41fc:	91 1c       	adc	r9, r1
    41fe:	a1 1c       	adc	r10, r1
    4200:	b1 1c       	adc	r11, r1
    4202:	2c 2f       	mov	r18, r28
    4204:	b5 01       	movw	r22, r10
    4206:	a4 01       	movw	r20, r8
    4208:	c7 01       	movw	r24, r14
    420a:	39 df       	rcall	.-398    	; 0x407e <putval>
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	1f 91       	pop	r17
    4214:	0f 91       	pop	r16
    4216:	ff 90       	pop	r15
    4218:	ef 90       	pop	r14
    421a:	bf 90       	pop	r11
    421c:	af 90       	pop	r10
    421e:	9f 90       	pop	r9
    4220:	8f 90       	pop	r8
    4222:	08 95       	ret

00004224 <conv_brk>:
    4224:	5f 92       	push	r5
    4226:	6f 92       	push	r6
    4228:	7f 92       	push	r7
    422a:	8f 92       	push	r8
    422c:	9f 92       	push	r9
    422e:	af 92       	push	r10
    4230:	bf 92       	push	r11
    4232:	cf 92       	push	r12
    4234:	df 92       	push	r13
    4236:	ef 92       	push	r14
    4238:	ff 92       	push	r15
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	cf 93       	push	r28
    4240:	df 93       	push	r29
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62
    4246:	a0 97       	sbiw	r28, 0x20	; 32
    4248:	cd bf       	out	0x3d, r28	; 61
    424a:	de bf       	out	0x3e, r29	; 62
    424c:	5c 01       	movw	r10, r24
    424e:	96 2e       	mov	r9, r22
    4250:	7a 01       	movw	r14, r20
    4252:	f9 01       	movw	r30, r18
    4254:	8e 01       	movw	r16, r28
    4256:	0f 5f       	subi	r16, 0xFF	; 255
    4258:	1f 4f       	sbci	r17, 0xFF	; 255
    425a:	68 01       	movw	r12, r16
    425c:	80 e2       	ldi	r24, 0x20	; 32
    425e:	d8 01       	movw	r26, r16
    4260:	1d 92       	st	X+, r1
    4262:	8a 95       	dec	r24
    4264:	e9 f7       	brne	.-6      	; 0x4260 <conv_brk+0x3c>
    4266:	d5 01       	movw	r26, r10
    4268:	13 96       	adiw	r26, 0x03	; 3
    426a:	8c 90       	ld	r8, X
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	61 2c       	mov	r6, r1
    4272:	71 2c       	mov	r7, r1
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	61 e0       	ldi	r22, 0x01	; 1
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	83 fc       	sbrc	r8, 3
    427c:	25 91       	lpm	r18, Z+
    427e:	83 fe       	sbrs	r8, 3
    4280:	21 91       	ld	r18, Z+
    4282:	8f 01       	movw	r16, r30
    4284:	52 2e       	mov	r5, r18
    4286:	21 11       	cpse	r18, r1
    4288:	03 c0       	rjmp	.+6      	; 0x4290 <conv_brk+0x6c>
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	90 c0       	rjmp	.+288    	; 0x43b0 <conv_brk+0x18c>
    4290:	2e 35       	cpi	r18, 0x5E	; 94
    4292:	11 f4       	brne	.+4      	; 0x4298 <conv_brk+0x74>
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	51 f1       	breq	.+84     	; 0x42ec <conv_brk+0xc8>
    4298:	43 2f       	mov	r20, r19
    429a:	50 e0       	ldi	r21, 0x00	; 0
    429c:	48 17       	cp	r20, r24
    429e:	59 07       	cpc	r21, r25
    42a0:	3c f4       	brge	.+14     	; 0x42b0 <conv_brk+0x8c>
    42a2:	2d 35       	cpi	r18, 0x5D	; 93
    42a4:	59 f1       	breq	.+86     	; 0x42fc <conv_brk+0xd8>
    42a6:	2d 32       	cpi	r18, 0x2D	; 45
    42a8:	19 f4       	brne	.+6      	; 0x42b0 <conv_brk+0x8c>
    42aa:	77 20       	and	r7, r7
    42ac:	09 f1       	breq	.+66     	; 0x42f0 <conv_brk+0xcc>
    42ae:	03 c0       	rjmp	.+6      	; 0x42b6 <conv_brk+0x92>
    42b0:	77 20       	and	r7, r7
    42b2:	09 f4       	brne	.+2      	; 0x42b6 <conv_brk+0x92>
    42b4:	68 c0       	rjmp	.+208    	; 0x4386 <conv_brk+0x162>
    42b6:	45 2d       	mov	r20, r5
    42b8:	46 95       	lsr	r20
    42ba:	46 95       	lsr	r20
    42bc:	46 95       	lsr	r20
    42be:	d6 01       	movw	r26, r12
    42c0:	a4 0f       	add	r26, r20
    42c2:	b1 1d       	adc	r27, r1
    42c4:	45 2d       	mov	r20, r5
    42c6:	47 70       	andi	r20, 0x07	; 7
    42c8:	8b 01       	movw	r16, r22
    42ca:	02 c0       	rjmp	.+4      	; 0x42d0 <conv_brk+0xac>
    42cc:	00 0f       	add	r16, r16
    42ce:	11 1f       	adc	r17, r17
    42d0:	4a 95       	dec	r20
    42d2:	e2 f7       	brpl	.-8      	; 0x42cc <conv_brk+0xa8>
    42d4:	a8 01       	movw	r20, r16
    42d6:	5c 91       	ld	r21, X
    42d8:	45 2b       	or	r20, r21
    42da:	4c 93       	st	X, r20
    42dc:	65 14       	cp	r6, r5
    42de:	59 f0       	breq	.+22     	; 0x42f6 <conv_brk+0xd2>
    42e0:	56 14       	cp	r5, r6
    42e2:	10 f4       	brcc	.+4      	; 0x42e8 <conv_brk+0xc4>
    42e4:	53 94       	inc	r5
    42e6:	e7 cf       	rjmp	.-50     	; 0x42b6 <conv_brk+0x92>
    42e8:	5a 94       	dec	r5
    42ea:	e5 cf       	rjmp	.-54     	; 0x42b6 <conv_brk+0x92>
    42ec:	31 e0       	ldi	r19, 0x01	; 1
    42ee:	04 c0       	rjmp	.+8      	; 0x42f8 <conv_brk+0xd4>
    42f0:	77 24       	eor	r7, r7
    42f2:	73 94       	inc	r7
    42f4:	01 c0       	rjmp	.+2      	; 0x42f8 <conv_brk+0xd4>
    42f6:	71 2c       	mov	r7, r1
    42f8:	01 96       	adiw	r24, 0x01	; 1
    42fa:	bf cf       	rjmp	.-130    	; 0x427a <conv_brk+0x56>
    42fc:	77 20       	and	r7, r7
    42fe:	19 f0       	breq	.+6      	; 0x4306 <conv_brk+0xe2>
    4300:	8e 81       	ldd	r24, Y+6	; 0x06
    4302:	80 62       	ori	r24, 0x20	; 32
    4304:	8e 83       	std	Y+6, r24	; 0x06
    4306:	31 11       	cpse	r19, r1
    4308:	03 c0       	rjmp	.+6      	; 0x4310 <conv_brk+0xec>
    430a:	88 24       	eor	r8, r8
    430c:	83 94       	inc	r8
    430e:	17 c0       	rjmp	.+46     	; 0x433e <conv_brk+0x11a>
    4310:	f6 01       	movw	r30, r12
    4312:	9e 01       	movw	r18, r28
    4314:	2f 5d       	subi	r18, 0xDF	; 223
    4316:	3f 4f       	sbci	r19, 0xFF	; 255
    4318:	80 81       	ld	r24, Z
    431a:	80 95       	com	r24
    431c:	81 93       	st	Z+, r24
    431e:	2e 17       	cp	r18, r30
    4320:	3f 07       	cpc	r19, r31
    4322:	d1 f7       	brne	.-12     	; 0x4318 <conv_brk+0xf4>
    4324:	f2 cf       	rjmp	.-28     	; 0x430a <conv_brk+0xe6>
    4326:	e1 14       	cp	r14, r1
    4328:	f1 04       	cpc	r15, r1
    432a:	29 f0       	breq	.+10     	; 0x4336 <conv_brk+0x112>
    432c:	d7 01       	movw	r26, r14
    432e:	8c 93       	st	X, r24
    4330:	f7 01       	movw	r30, r14
    4332:	31 96       	adiw	r30, 0x01	; 1
    4334:	7f 01       	movw	r14, r30
    4336:	9a 94       	dec	r9
    4338:	81 2c       	mov	r8, r1
    433a:	99 20       	and	r9, r9
    433c:	e9 f0       	breq	.+58     	; 0x4378 <conv_brk+0x154>
    433e:	c5 01       	movw	r24, r10
    4340:	cc d2       	rcall	.+1432   	; 0x48da <fgetc>
    4342:	97 fd       	sbrc	r25, 7
    4344:	17 c0       	rjmp	.+46     	; 0x4374 <conv_brk+0x150>
    4346:	fc 01       	movw	r30, r24
    4348:	ff 27       	eor	r31, r31
    434a:	23 e0       	ldi	r18, 0x03	; 3
    434c:	f5 95       	asr	r31
    434e:	e7 95       	ror	r30
    4350:	2a 95       	dec	r18
    4352:	e1 f7       	brne	.-8      	; 0x434c <conv_brk+0x128>
    4354:	ec 0d       	add	r30, r12
    4356:	fd 1d       	adc	r31, r13
    4358:	20 81       	ld	r18, Z
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	ac 01       	movw	r20, r24
    435e:	47 70       	andi	r20, 0x07	; 7
    4360:	55 27       	eor	r21, r21
    4362:	02 c0       	rjmp	.+4      	; 0x4368 <conv_brk+0x144>
    4364:	35 95       	asr	r19
    4366:	27 95       	ror	r18
    4368:	4a 95       	dec	r20
    436a:	e2 f7       	brpl	.-8      	; 0x4364 <conv_brk+0x140>
    436c:	20 fd       	sbrc	r18, 0
    436e:	db cf       	rjmp	.-74     	; 0x4326 <conv_brk+0x102>
    4370:	b5 01       	movw	r22, r10
    4372:	2d d3       	rcall	.+1626   	; 0x49ce <ungetc>
    4374:	81 10       	cpse	r8, r1
    4376:	89 cf       	rjmp	.-238    	; 0x428a <conv_brk+0x66>
    4378:	e1 14       	cp	r14, r1
    437a:	f1 04       	cpc	r15, r1
    437c:	11 f0       	breq	.+4      	; 0x4382 <conv_brk+0x15e>
    437e:	d7 01       	movw	r26, r14
    4380:	1c 92       	st	X, r1
    4382:	c8 01       	movw	r24, r16
    4384:	15 c0       	rjmp	.+42     	; 0x43b0 <conv_brk+0x18c>
    4386:	42 2f       	mov	r20, r18
    4388:	46 95       	lsr	r20
    438a:	46 95       	lsr	r20
    438c:	46 95       	lsr	r20
    438e:	d6 01       	movw	r26, r12
    4390:	a4 0f       	add	r26, r20
    4392:	b1 1d       	adc	r27, r1
    4394:	42 2f       	mov	r20, r18
    4396:	47 70       	andi	r20, 0x07	; 7
    4398:	8b 01       	movw	r16, r22
    439a:	02 c0       	rjmp	.+4      	; 0x43a0 <conv_brk+0x17c>
    439c:	00 0f       	add	r16, r16
    439e:	11 1f       	adc	r17, r17
    43a0:	4a 95       	dec	r20
    43a2:	e2 f7       	brpl	.-8      	; 0x439c <conv_brk+0x178>
    43a4:	a8 01       	movw	r20, r16
    43a6:	5c 91       	ld	r21, X
    43a8:	45 2b       	or	r20, r21
    43aa:	4c 93       	st	X, r20
    43ac:	62 2e       	mov	r6, r18
    43ae:	a4 cf       	rjmp	.-184    	; 0x42f8 <conv_brk+0xd4>
    43b0:	a0 96       	adiw	r28, 0x20	; 32
    43b2:	cd bf       	out	0x3d, r28	; 61
    43b4:	de bf       	out	0x3e, r29	; 62
    43b6:	df 91       	pop	r29
    43b8:	cf 91       	pop	r28
    43ba:	1f 91       	pop	r17
    43bc:	0f 91       	pop	r16
    43be:	ff 90       	pop	r15
    43c0:	ef 90       	pop	r14
    43c2:	df 90       	pop	r13
    43c4:	cf 90       	pop	r12
    43c6:	bf 90       	pop	r11
    43c8:	af 90       	pop	r10
    43ca:	9f 90       	pop	r9
    43cc:	8f 90       	pop	r8
    43ce:	7f 90       	pop	r7
    43d0:	6f 90       	pop	r6
    43d2:	5f 90       	pop	r5
    43d4:	08 95       	ret

000043d6 <vfscanf>:
    43d6:	5f 92       	push	r5
    43d8:	6f 92       	push	r6
    43da:	7f 92       	push	r7
    43dc:	8f 92       	push	r8
    43de:	9f 92       	push	r9
    43e0:	af 92       	push	r10
    43e2:	bf 92       	push	r11
    43e4:	cf 92       	push	r12
    43e6:	df 92       	push	r13
    43e8:	ef 92       	push	r14
    43ea:	ff 92       	push	r15
    43ec:	0f 93       	push	r16
    43ee:	1f 93       	push	r17
    43f0:	cf 93       	push	r28
    43f2:	df 93       	push	r29
    43f4:	6c 01       	movw	r12, r24
    43f6:	eb 01       	movw	r28, r22
    43f8:	5a 01       	movw	r10, r20
    43fa:	fc 01       	movw	r30, r24
    43fc:	16 82       	std	Z+6, r1	; 0x06
    43fe:	17 82       	std	Z+7, r1	; 0x07
    4400:	51 2c       	mov	r5, r1
    4402:	f6 01       	movw	r30, r12
    4404:	e3 80       	ldd	r14, Z+3	; 0x03
    4406:	fe 01       	movw	r30, r28
    4408:	e3 fc       	sbrc	r14, 3
    440a:	85 91       	lpm	r24, Z+
    440c:	e3 fe       	sbrs	r14, 3
    440e:	81 91       	ld	r24, Z+
    4410:	18 2f       	mov	r17, r24
    4412:	ef 01       	movw	r28, r30
    4414:	88 23       	and	r24, r24
    4416:	09 f4       	brne	.+2      	; 0x441a <vfscanf+0x44>
    4418:	e0 c0       	rjmp	.+448    	; 0x45da <vfscanf+0x204>
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	2e d2       	rcall	.+1116   	; 0x487a <isspace>
    441e:	89 2b       	or	r24, r25
    4420:	19 f0       	breq	.+6      	; 0x4428 <vfscanf+0x52>
    4422:	c6 01       	movw	r24, r12
    4424:	5f de       	rcall	.-834    	; 0x40e4 <skip_spaces>
    4426:	ed cf       	rjmp	.-38     	; 0x4402 <vfscanf+0x2c>
    4428:	15 32       	cpi	r17, 0x25	; 37
    442a:	41 f4       	brne	.+16     	; 0x443c <vfscanf+0x66>
    442c:	fe 01       	movw	r30, r28
    442e:	e3 fc       	sbrc	r14, 3
    4430:	15 91       	lpm	r17, Z+
    4432:	e3 fe       	sbrs	r14, 3
    4434:	11 91       	ld	r17, Z+
    4436:	ef 01       	movw	r28, r30
    4438:	15 32       	cpi	r17, 0x25	; 37
    443a:	71 f4       	brne	.+28     	; 0x4458 <vfscanf+0x82>
    443c:	c6 01       	movw	r24, r12
    443e:	4d d2       	rcall	.+1178   	; 0x48da <fgetc>
    4440:	97 fd       	sbrc	r25, 7
    4442:	c9 c0       	rjmp	.+402    	; 0x45d6 <vfscanf+0x200>
    4444:	41 2f       	mov	r20, r17
    4446:	50 e0       	ldi	r21, 0x00	; 0
    4448:	9c 01       	movw	r18, r24
    444a:	33 27       	eor	r19, r19
    444c:	24 17       	cp	r18, r20
    444e:	35 07       	cpc	r19, r21
    4450:	c1 f2       	breq	.-80     	; 0x4402 <vfscanf+0x2c>
    4452:	b6 01       	movw	r22, r12
    4454:	bc d2       	rcall	.+1400   	; 0x49ce <ungetc>
    4456:	c1 c0       	rjmp	.+386    	; 0x45da <vfscanf+0x204>
    4458:	1a 32       	cpi	r17, 0x2A	; 42
    445a:	39 f4       	brne	.+14     	; 0x446a <vfscanf+0x94>
    445c:	e3 fc       	sbrc	r14, 3
    445e:	15 91       	lpm	r17, Z+
    4460:	e3 fe       	sbrs	r14, 3
    4462:	11 91       	ld	r17, Z+
    4464:	ef 01       	movw	r28, r30
    4466:	01 e0       	ldi	r16, 0x01	; 1
    4468:	01 c0       	rjmp	.+2      	; 0x446c <vfscanf+0x96>
    446a:	00 e0       	ldi	r16, 0x00	; 0
    446c:	f1 2c       	mov	r15, r1
    446e:	20 ed       	ldi	r18, 0xD0	; 208
    4470:	21 0f       	add	r18, r17
    4472:	2a 30       	cpi	r18, 0x0A	; 10
    4474:	78 f4       	brcc	.+30     	; 0x4494 <vfscanf+0xbe>
    4476:	02 60       	ori	r16, 0x02	; 2
    4478:	6f 2d       	mov	r22, r15
    447a:	70 e0       	ldi	r23, 0x00	; 0
    447c:	80 e0       	ldi	r24, 0x00	; 0
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	40 e2       	ldi	r20, 0x20	; 32
    4482:	09 de       	rcall	.-1006   	; 0x4096 <mulacc>
    4484:	f6 2e       	mov	r15, r22
    4486:	fe 01       	movw	r30, r28
    4488:	e3 fc       	sbrc	r14, 3
    448a:	15 91       	lpm	r17, Z+
    448c:	e3 fe       	sbrs	r14, 3
    448e:	11 91       	ld	r17, Z+
    4490:	ef 01       	movw	r28, r30
    4492:	ed cf       	rjmp	.-38     	; 0x446e <vfscanf+0x98>
    4494:	01 ff       	sbrs	r16, 1
    4496:	03 c0       	rjmp	.+6      	; 0x449e <vfscanf+0xc8>
    4498:	f1 10       	cpse	r15, r1
    449a:	03 c0       	rjmp	.+6      	; 0x44a2 <vfscanf+0xcc>
    449c:	9e c0       	rjmp	.+316    	; 0x45da <vfscanf+0x204>
    449e:	ff 24       	eor	r15, r15
    44a0:	fa 94       	dec	r15
    44a2:	18 36       	cpi	r17, 0x68	; 104
    44a4:	19 f0       	breq	.+6      	; 0x44ac <vfscanf+0xd6>
    44a6:	1c 36       	cpi	r17, 0x6C	; 108
    44a8:	51 f0       	breq	.+20     	; 0x44be <vfscanf+0xe8>
    44aa:	10 c0       	rjmp	.+32     	; 0x44cc <vfscanf+0xf6>
    44ac:	fe 01       	movw	r30, r28
    44ae:	e3 fc       	sbrc	r14, 3
    44b0:	15 91       	lpm	r17, Z+
    44b2:	e3 fe       	sbrs	r14, 3
    44b4:	11 91       	ld	r17, Z+
    44b6:	ef 01       	movw	r28, r30
    44b8:	18 36       	cpi	r17, 0x68	; 104
    44ba:	41 f4       	brne	.+16     	; 0x44cc <vfscanf+0xf6>
    44bc:	08 60       	ori	r16, 0x08	; 8
    44be:	04 60       	ori	r16, 0x04	; 4
    44c0:	fe 01       	movw	r30, r28
    44c2:	e3 fc       	sbrc	r14, 3
    44c4:	15 91       	lpm	r17, Z+
    44c6:	e3 fe       	sbrs	r14, 3
    44c8:	11 91       	ld	r17, Z+
    44ca:	ef 01       	movw	r28, r30
    44cc:	11 23       	and	r17, r17
    44ce:	09 f4       	brne	.+2      	; 0x44d2 <vfscanf+0xfc>
    44d0:	84 c0       	rjmp	.+264    	; 0x45da <vfscanf+0x204>
    44d2:	61 2f       	mov	r22, r17
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	88 ee       	ldi	r24, 0xE8	; 232
    44d8:	92 e0       	ldi	r25, 0x02	; 2
    44da:	d7 d1       	rcall	.+942    	; 0x488a <strchr_P>
    44dc:	89 2b       	or	r24, r25
    44de:	09 f4       	brne	.+2      	; 0x44e2 <vfscanf+0x10c>
    44e0:	7c c0       	rjmp	.+248    	; 0x45da <vfscanf+0x204>
    44e2:	00 fd       	sbrc	r16, 0
    44e4:	07 c0       	rjmp	.+14     	; 0x44f4 <vfscanf+0x11e>
    44e6:	f5 01       	movw	r30, r10
    44e8:	80 80       	ld	r8, Z
    44ea:	91 80       	ldd	r9, Z+1	; 0x01
    44ec:	c5 01       	movw	r24, r10
    44ee:	02 96       	adiw	r24, 0x02	; 2
    44f0:	5c 01       	movw	r10, r24
    44f2:	02 c0       	rjmp	.+4      	; 0x44f8 <vfscanf+0x122>
    44f4:	81 2c       	mov	r8, r1
    44f6:	91 2c       	mov	r9, r1
    44f8:	1e 36       	cpi	r17, 0x6E	; 110
    44fa:	49 f4       	brne	.+18     	; 0x450e <vfscanf+0x138>
    44fc:	f6 01       	movw	r30, r12
    44fe:	46 81       	ldd	r20, Z+6	; 0x06
    4500:	57 81       	ldd	r21, Z+7	; 0x07
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	20 2f       	mov	r18, r16
    4508:	c4 01       	movw	r24, r8
    450a:	b9 dd       	rcall	.-1166   	; 0x407e <putval>
    450c:	7a cf       	rjmp	.-268    	; 0x4402 <vfscanf+0x2c>
    450e:	13 36       	cpi	r17, 0x63	; 99
    4510:	a1 f4       	brne	.+40     	; 0x453a <vfscanf+0x164>
    4512:	01 fd       	sbrc	r16, 1
    4514:	02 c0       	rjmp	.+4      	; 0x451a <vfscanf+0x144>
    4516:	ff 24       	eor	r15, r15
    4518:	f3 94       	inc	r15
    451a:	c6 01       	movw	r24, r12
    451c:	de d1       	rcall	.+956    	; 0x48da <fgetc>
    451e:	97 fd       	sbrc	r25, 7
    4520:	5a c0       	rjmp	.+180    	; 0x45d6 <vfscanf+0x200>
    4522:	81 14       	cp	r8, r1
    4524:	91 04       	cpc	r9, r1
    4526:	29 f0       	breq	.+10     	; 0x4532 <vfscanf+0x15c>
    4528:	f4 01       	movw	r30, r8
    452a:	80 83       	st	Z, r24
    452c:	c4 01       	movw	r24, r8
    452e:	01 96       	adiw	r24, 0x01	; 1
    4530:	4c 01       	movw	r8, r24
    4532:	fa 94       	dec	r15
    4534:	f1 10       	cpse	r15, r1
    4536:	f1 cf       	rjmp	.-30     	; 0x451a <vfscanf+0x144>
    4538:	4a c0       	rjmp	.+148    	; 0x45ce <vfscanf+0x1f8>
    453a:	1b 35       	cpi	r17, 0x5B	; 91
    453c:	51 f4       	brne	.+20     	; 0x4552 <vfscanf+0x17c>
    453e:	9e 01       	movw	r18, r28
    4540:	a4 01       	movw	r20, r8
    4542:	6f 2d       	mov	r22, r15
    4544:	c6 01       	movw	r24, r12
    4546:	6e de       	rcall	.-804    	; 0x4224 <conv_brk>
    4548:	ec 01       	movw	r28, r24
    454a:	89 2b       	or	r24, r25
    454c:	09 f0       	breq	.+2      	; 0x4550 <vfscanf+0x17a>
    454e:	3f c0       	rjmp	.+126    	; 0x45ce <vfscanf+0x1f8>
    4550:	39 c0       	rjmp	.+114    	; 0x45c4 <vfscanf+0x1ee>
    4552:	c6 01       	movw	r24, r12
    4554:	c7 dd       	rcall	.-1138   	; 0x40e4 <skip_spaces>
    4556:	97 fd       	sbrc	r25, 7
    4558:	3e c0       	rjmp	.+124    	; 0x45d6 <vfscanf+0x200>
    455a:	1f 36       	cpi	r17, 0x6F	; 111
    455c:	49 f1       	breq	.+82     	; 0x45b0 <vfscanf+0x1da>
    455e:	28 f4       	brcc	.+10     	; 0x456a <vfscanf+0x194>
    4560:	14 36       	cpi	r17, 0x64	; 100
    4562:	21 f1       	breq	.+72     	; 0x45ac <vfscanf+0x1d6>
    4564:	19 36       	cpi	r17, 0x69	; 105
    4566:	39 f1       	breq	.+78     	; 0x45b6 <vfscanf+0x1e0>
    4568:	25 c0       	rjmp	.+74     	; 0x45b4 <vfscanf+0x1de>
    456a:	13 37       	cpi	r17, 0x73	; 115
    456c:	71 f0       	breq	.+28     	; 0x458a <vfscanf+0x1b4>
    456e:	15 37       	cpi	r17, 0x75	; 117
    4570:	e9 f0       	breq	.+58     	; 0x45ac <vfscanf+0x1d6>
    4572:	20 c0       	rjmp	.+64     	; 0x45b4 <vfscanf+0x1de>
    4574:	81 14       	cp	r8, r1
    4576:	91 04       	cpc	r9, r1
    4578:	29 f0       	breq	.+10     	; 0x4584 <vfscanf+0x1ae>
    457a:	f4 01       	movw	r30, r8
    457c:	60 82       	st	Z, r6
    457e:	c4 01       	movw	r24, r8
    4580:	01 96       	adiw	r24, 0x01	; 1
    4582:	4c 01       	movw	r8, r24
    4584:	fa 94       	dec	r15
    4586:	ff 20       	and	r15, r15
    4588:	59 f0       	breq	.+22     	; 0x45a0 <vfscanf+0x1ca>
    458a:	c6 01       	movw	r24, r12
    458c:	a6 d1       	rcall	.+844    	; 0x48da <fgetc>
    458e:	3c 01       	movw	r6, r24
    4590:	97 fd       	sbrc	r25, 7
    4592:	06 c0       	rjmp	.+12     	; 0x45a0 <vfscanf+0x1ca>
    4594:	72 d1       	rcall	.+740    	; 0x487a <isspace>
    4596:	89 2b       	or	r24, r25
    4598:	69 f3       	breq	.-38     	; 0x4574 <vfscanf+0x19e>
    459a:	b6 01       	movw	r22, r12
    459c:	c3 01       	movw	r24, r6
    459e:	17 d2       	rcall	.+1070   	; 0x49ce <ungetc>
    45a0:	81 14       	cp	r8, r1
    45a2:	91 04       	cpc	r9, r1
    45a4:	a1 f0       	breq	.+40     	; 0x45ce <vfscanf+0x1f8>
    45a6:	f4 01       	movw	r30, r8
    45a8:	10 82       	st	Z, r1
    45aa:	11 c0       	rjmp	.+34     	; 0x45ce <vfscanf+0x1f8>
    45ac:	00 62       	ori	r16, 0x20	; 32
    45ae:	03 c0       	rjmp	.+6      	; 0x45b6 <vfscanf+0x1e0>
    45b0:	00 61       	ori	r16, 0x10	; 16
    45b2:	01 c0       	rjmp	.+2      	; 0x45b6 <vfscanf+0x1e0>
    45b4:	00 64       	ori	r16, 0x40	; 64
    45b6:	20 2f       	mov	r18, r16
    45b8:	a4 01       	movw	r20, r8
    45ba:	6f 2d       	mov	r22, r15
    45bc:	c6 01       	movw	r24, r12
    45be:	a8 dd       	rcall	.-1200   	; 0x4110 <conv_int>
    45c0:	81 11       	cpse	r24, r1
    45c2:	05 c0       	rjmp	.+10     	; 0x45ce <vfscanf+0x1f8>
    45c4:	f6 01       	movw	r30, r12
    45c6:	83 81       	ldd	r24, Z+3	; 0x03
    45c8:	80 73       	andi	r24, 0x30	; 48
    45ca:	29 f4       	brne	.+10     	; 0x45d6 <vfscanf+0x200>
    45cc:	06 c0       	rjmp	.+12     	; 0x45da <vfscanf+0x204>
    45ce:	00 fd       	sbrc	r16, 0
    45d0:	18 cf       	rjmp	.-464    	; 0x4402 <vfscanf+0x2c>
    45d2:	53 94       	inc	r5
    45d4:	16 cf       	rjmp	.-468    	; 0x4402 <vfscanf+0x2c>
    45d6:	55 20       	and	r5, r5
    45d8:	19 f0       	breq	.+6      	; 0x45e0 <vfscanf+0x20a>
    45da:	85 2d       	mov	r24, r5
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	02 c0       	rjmp	.+4      	; 0x45e4 <vfscanf+0x20e>
    45e0:	8f ef       	ldi	r24, 0xFF	; 255
    45e2:	9f ef       	ldi	r25, 0xFF	; 255
    45e4:	df 91       	pop	r29
    45e6:	cf 91       	pop	r28
    45e8:	1f 91       	pop	r17
    45ea:	0f 91       	pop	r16
    45ec:	ff 90       	pop	r15
    45ee:	ef 90       	pop	r14
    45f0:	df 90       	pop	r13
    45f2:	cf 90       	pop	r12
    45f4:	bf 90       	pop	r11
    45f6:	af 90       	pop	r10
    45f8:	9f 90       	pop	r9
    45fa:	8f 90       	pop	r8
    45fc:	7f 90       	pop	r7
    45fe:	6f 90       	pop	r6
    4600:	5f 90       	pop	r5
    4602:	08 95       	ret

00004604 <calloc>:
    4604:	0f 93       	push	r16
    4606:	1f 93       	push	r17
    4608:	cf 93       	push	r28
    460a:	df 93       	push	r29
    460c:	86 9f       	mul	r24, r22
    460e:	80 01       	movw	r16, r0
    4610:	87 9f       	mul	r24, r23
    4612:	10 0d       	add	r17, r0
    4614:	96 9f       	mul	r25, r22
    4616:	10 0d       	add	r17, r0
    4618:	11 24       	eor	r1, r1
    461a:	c8 01       	movw	r24, r16
    461c:	0d d0       	rcall	.+26     	; 0x4638 <malloc>
    461e:	ec 01       	movw	r28, r24
    4620:	00 97       	sbiw	r24, 0x00	; 0
    4622:	21 f0       	breq	.+8      	; 0x462c <calloc+0x28>
    4624:	a8 01       	movw	r20, r16
    4626:	60 e0       	ldi	r22, 0x00	; 0
    4628:	70 e0       	ldi	r23, 0x00	; 0
    462a:	45 d1       	rcall	.+650    	; 0x48b6 <memset>
    462c:	ce 01       	movw	r24, r28
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	1f 91       	pop	r17
    4634:	0f 91       	pop	r16
    4636:	08 95       	ret

00004638 <malloc>:
    4638:	0f 93       	push	r16
    463a:	1f 93       	push	r17
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
    4640:	82 30       	cpi	r24, 0x02	; 2
    4642:	91 05       	cpc	r25, r1
    4644:	10 f4       	brcc	.+4      	; 0x464a <malloc+0x12>
    4646:	82 e0       	ldi	r24, 0x02	; 2
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <__flp>
    464e:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <__flp+0x1>
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	a0 e0       	ldi	r26, 0x00	; 0
    4658:	b0 e0       	ldi	r27, 0x00	; 0
    465a:	30 97       	sbiw	r30, 0x00	; 0
    465c:	19 f1       	breq	.+70     	; 0x46a4 <malloc+0x6c>
    465e:	40 81       	ld	r20, Z
    4660:	51 81       	ldd	r21, Z+1	; 0x01
    4662:	02 81       	ldd	r16, Z+2	; 0x02
    4664:	13 81       	ldd	r17, Z+3	; 0x03
    4666:	48 17       	cp	r20, r24
    4668:	59 07       	cpc	r21, r25
    466a:	c8 f0       	brcs	.+50     	; 0x469e <malloc+0x66>
    466c:	84 17       	cp	r24, r20
    466e:	95 07       	cpc	r25, r21
    4670:	69 f4       	brne	.+26     	; 0x468c <malloc+0x54>
    4672:	10 97       	sbiw	r26, 0x00	; 0
    4674:	31 f0       	breq	.+12     	; 0x4682 <malloc+0x4a>
    4676:	12 96       	adiw	r26, 0x02	; 2
    4678:	0c 93       	st	X, r16
    467a:	12 97       	sbiw	r26, 0x02	; 2
    467c:	13 96       	adiw	r26, 0x03	; 3
    467e:	1c 93       	st	X, r17
    4680:	27 c0       	rjmp	.+78     	; 0x46d0 <malloc+0x98>
    4682:	00 93 8d 21 	sts	0x218D, r16	; 0x80218d <__flp>
    4686:	10 93 8e 21 	sts	0x218E, r17	; 0x80218e <__flp+0x1>
    468a:	22 c0       	rjmp	.+68     	; 0x46d0 <malloc+0x98>
    468c:	21 15       	cp	r18, r1
    468e:	31 05       	cpc	r19, r1
    4690:	19 f0       	breq	.+6      	; 0x4698 <malloc+0x60>
    4692:	42 17       	cp	r20, r18
    4694:	53 07       	cpc	r21, r19
    4696:	18 f4       	brcc	.+6      	; 0x469e <malloc+0x66>
    4698:	9a 01       	movw	r18, r20
    469a:	bd 01       	movw	r22, r26
    469c:	ef 01       	movw	r28, r30
    469e:	df 01       	movw	r26, r30
    46a0:	f8 01       	movw	r30, r16
    46a2:	db cf       	rjmp	.-74     	; 0x465a <malloc+0x22>
    46a4:	21 15       	cp	r18, r1
    46a6:	31 05       	cpc	r19, r1
    46a8:	f9 f0       	breq	.+62     	; 0x46e8 <malloc+0xb0>
    46aa:	28 1b       	sub	r18, r24
    46ac:	39 0b       	sbc	r19, r25
    46ae:	24 30       	cpi	r18, 0x04	; 4
    46b0:	31 05       	cpc	r19, r1
    46b2:	80 f4       	brcc	.+32     	; 0x46d4 <malloc+0x9c>
    46b4:	8a 81       	ldd	r24, Y+2	; 0x02
    46b6:	9b 81       	ldd	r25, Y+3	; 0x03
    46b8:	61 15       	cp	r22, r1
    46ba:	71 05       	cpc	r23, r1
    46bc:	21 f0       	breq	.+8      	; 0x46c6 <malloc+0x8e>
    46be:	fb 01       	movw	r30, r22
    46c0:	82 83       	std	Z+2, r24	; 0x02
    46c2:	93 83       	std	Z+3, r25	; 0x03
    46c4:	04 c0       	rjmp	.+8      	; 0x46ce <malloc+0x96>
    46c6:	80 93 8d 21 	sts	0x218D, r24	; 0x80218d <__flp>
    46ca:	90 93 8e 21 	sts	0x218E, r25	; 0x80218e <__flp+0x1>
    46ce:	fe 01       	movw	r30, r28
    46d0:	32 96       	adiw	r30, 0x02	; 2
    46d2:	44 c0       	rjmp	.+136    	; 0x475c <malloc+0x124>
    46d4:	fe 01       	movw	r30, r28
    46d6:	e2 0f       	add	r30, r18
    46d8:	f3 1f       	adc	r31, r19
    46da:	81 93       	st	Z+, r24
    46dc:	91 93       	st	Z+, r25
    46de:	22 50       	subi	r18, 0x02	; 2
    46e0:	31 09       	sbc	r19, r1
    46e2:	28 83       	st	Y, r18
    46e4:	39 83       	std	Y+1, r19	; 0x01
    46e6:	3a c0       	rjmp	.+116    	; 0x475c <malloc+0x124>
    46e8:	20 91 8b 21 	lds	r18, 0x218B	; 0x80218b <__brkval>
    46ec:	30 91 8c 21 	lds	r19, 0x218C	; 0x80218c <__brkval+0x1>
    46f0:	23 2b       	or	r18, r19
    46f2:	41 f4       	brne	.+16     	; 0x4704 <malloc+0xcc>
    46f4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    46f8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    46fc:	20 93 8b 21 	sts	0x218B, r18	; 0x80218b <__brkval>
    4700:	30 93 8c 21 	sts	0x218C, r19	; 0x80218c <__brkval+0x1>
    4704:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4708:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    470c:	21 15       	cp	r18, r1
    470e:	31 05       	cpc	r19, r1
    4710:	41 f4       	brne	.+16     	; 0x4722 <malloc+0xea>
    4712:	2d b7       	in	r18, 0x3d	; 61
    4714:	3e b7       	in	r19, 0x3e	; 62
    4716:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    471a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    471e:	24 1b       	sub	r18, r20
    4720:	35 0b       	sbc	r19, r21
    4722:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <__brkval>
    4726:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <__brkval+0x1>
    472a:	e2 17       	cp	r30, r18
    472c:	f3 07       	cpc	r31, r19
    472e:	a0 f4       	brcc	.+40     	; 0x4758 <malloc+0x120>
    4730:	2e 1b       	sub	r18, r30
    4732:	3f 0b       	sbc	r19, r31
    4734:	28 17       	cp	r18, r24
    4736:	39 07       	cpc	r19, r25
    4738:	78 f0       	brcs	.+30     	; 0x4758 <malloc+0x120>
    473a:	ac 01       	movw	r20, r24
    473c:	4e 5f       	subi	r20, 0xFE	; 254
    473e:	5f 4f       	sbci	r21, 0xFF	; 255
    4740:	24 17       	cp	r18, r20
    4742:	35 07       	cpc	r19, r21
    4744:	48 f0       	brcs	.+18     	; 0x4758 <malloc+0x120>
    4746:	4e 0f       	add	r20, r30
    4748:	5f 1f       	adc	r21, r31
    474a:	40 93 8b 21 	sts	0x218B, r20	; 0x80218b <__brkval>
    474e:	50 93 8c 21 	sts	0x218C, r21	; 0x80218c <__brkval+0x1>
    4752:	81 93       	st	Z+, r24
    4754:	91 93       	st	Z+, r25
    4756:	02 c0       	rjmp	.+4      	; 0x475c <malloc+0x124>
    4758:	e0 e0       	ldi	r30, 0x00	; 0
    475a:	f0 e0       	ldi	r31, 0x00	; 0
    475c:	cf 01       	movw	r24, r30
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	1f 91       	pop	r17
    4764:	0f 91       	pop	r16
    4766:	08 95       	ret

00004768 <free>:
    4768:	cf 93       	push	r28
    476a:	df 93       	push	r29
    476c:	00 97       	sbiw	r24, 0x00	; 0
    476e:	09 f4       	brne	.+2      	; 0x4772 <free+0xa>
    4770:	81 c0       	rjmp	.+258    	; 0x4874 <free+0x10c>
    4772:	fc 01       	movw	r30, r24
    4774:	32 97       	sbiw	r30, 0x02	; 2
    4776:	12 82       	std	Z+2, r1	; 0x02
    4778:	13 82       	std	Z+3, r1	; 0x03
    477a:	a0 91 8d 21 	lds	r26, 0x218D	; 0x80218d <__flp>
    477e:	b0 91 8e 21 	lds	r27, 0x218E	; 0x80218e <__flp+0x1>
    4782:	10 97       	sbiw	r26, 0x00	; 0
    4784:	81 f4       	brne	.+32     	; 0x47a6 <free+0x3e>
    4786:	20 81       	ld	r18, Z
    4788:	31 81       	ldd	r19, Z+1	; 0x01
    478a:	82 0f       	add	r24, r18
    478c:	93 1f       	adc	r25, r19
    478e:	20 91 8b 21 	lds	r18, 0x218B	; 0x80218b <__brkval>
    4792:	30 91 8c 21 	lds	r19, 0x218C	; 0x80218c <__brkval+0x1>
    4796:	28 17       	cp	r18, r24
    4798:	39 07       	cpc	r19, r25
    479a:	51 f5       	brne	.+84     	; 0x47f0 <free+0x88>
    479c:	e0 93 8b 21 	sts	0x218B, r30	; 0x80218b <__brkval>
    47a0:	f0 93 8c 21 	sts	0x218C, r31	; 0x80218c <__brkval+0x1>
    47a4:	67 c0       	rjmp	.+206    	; 0x4874 <free+0x10c>
    47a6:	ed 01       	movw	r28, r26
    47a8:	20 e0       	ldi	r18, 0x00	; 0
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	ce 17       	cp	r28, r30
    47ae:	df 07       	cpc	r29, r31
    47b0:	40 f4       	brcc	.+16     	; 0x47c2 <free+0x5a>
    47b2:	4a 81       	ldd	r20, Y+2	; 0x02
    47b4:	5b 81       	ldd	r21, Y+3	; 0x03
    47b6:	9e 01       	movw	r18, r28
    47b8:	41 15       	cp	r20, r1
    47ba:	51 05       	cpc	r21, r1
    47bc:	f1 f0       	breq	.+60     	; 0x47fa <free+0x92>
    47be:	ea 01       	movw	r28, r20
    47c0:	f5 cf       	rjmp	.-22     	; 0x47ac <free+0x44>
    47c2:	c2 83       	std	Z+2, r28	; 0x02
    47c4:	d3 83       	std	Z+3, r29	; 0x03
    47c6:	40 81       	ld	r20, Z
    47c8:	51 81       	ldd	r21, Z+1	; 0x01
    47ca:	84 0f       	add	r24, r20
    47cc:	95 1f       	adc	r25, r21
    47ce:	c8 17       	cp	r28, r24
    47d0:	d9 07       	cpc	r29, r25
    47d2:	59 f4       	brne	.+22     	; 0x47ea <free+0x82>
    47d4:	88 81       	ld	r24, Y
    47d6:	99 81       	ldd	r25, Y+1	; 0x01
    47d8:	84 0f       	add	r24, r20
    47da:	95 1f       	adc	r25, r21
    47dc:	02 96       	adiw	r24, 0x02	; 2
    47de:	80 83       	st	Z, r24
    47e0:	91 83       	std	Z+1, r25	; 0x01
    47e2:	8a 81       	ldd	r24, Y+2	; 0x02
    47e4:	9b 81       	ldd	r25, Y+3	; 0x03
    47e6:	82 83       	std	Z+2, r24	; 0x02
    47e8:	93 83       	std	Z+3, r25	; 0x03
    47ea:	21 15       	cp	r18, r1
    47ec:	31 05       	cpc	r19, r1
    47ee:	29 f4       	brne	.+10     	; 0x47fa <free+0x92>
    47f0:	e0 93 8d 21 	sts	0x218D, r30	; 0x80218d <__flp>
    47f4:	f0 93 8e 21 	sts	0x218E, r31	; 0x80218e <__flp+0x1>
    47f8:	3d c0       	rjmp	.+122    	; 0x4874 <free+0x10c>
    47fa:	e9 01       	movw	r28, r18
    47fc:	ea 83       	std	Y+2, r30	; 0x02
    47fe:	fb 83       	std	Y+3, r31	; 0x03
    4800:	49 91       	ld	r20, Y+
    4802:	59 91       	ld	r21, Y+
    4804:	c4 0f       	add	r28, r20
    4806:	d5 1f       	adc	r29, r21
    4808:	ec 17       	cp	r30, r28
    480a:	fd 07       	cpc	r31, r29
    480c:	61 f4       	brne	.+24     	; 0x4826 <free+0xbe>
    480e:	80 81       	ld	r24, Z
    4810:	91 81       	ldd	r25, Z+1	; 0x01
    4812:	84 0f       	add	r24, r20
    4814:	95 1f       	adc	r25, r21
    4816:	02 96       	adiw	r24, 0x02	; 2
    4818:	e9 01       	movw	r28, r18
    481a:	88 83       	st	Y, r24
    481c:	99 83       	std	Y+1, r25	; 0x01
    481e:	82 81       	ldd	r24, Z+2	; 0x02
    4820:	93 81       	ldd	r25, Z+3	; 0x03
    4822:	8a 83       	std	Y+2, r24	; 0x02
    4824:	9b 83       	std	Y+3, r25	; 0x03
    4826:	e0 e0       	ldi	r30, 0x00	; 0
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	12 96       	adiw	r26, 0x02	; 2
    482c:	8d 91       	ld	r24, X+
    482e:	9c 91       	ld	r25, X
    4830:	13 97       	sbiw	r26, 0x03	; 3
    4832:	00 97       	sbiw	r24, 0x00	; 0
    4834:	19 f0       	breq	.+6      	; 0x483c <free+0xd4>
    4836:	fd 01       	movw	r30, r26
    4838:	dc 01       	movw	r26, r24
    483a:	f7 cf       	rjmp	.-18     	; 0x482a <free+0xc2>
    483c:	8d 91       	ld	r24, X+
    483e:	9c 91       	ld	r25, X
    4840:	11 97       	sbiw	r26, 0x01	; 1
    4842:	9d 01       	movw	r18, r26
    4844:	2e 5f       	subi	r18, 0xFE	; 254
    4846:	3f 4f       	sbci	r19, 0xFF	; 255
    4848:	82 0f       	add	r24, r18
    484a:	93 1f       	adc	r25, r19
    484c:	20 91 8b 21 	lds	r18, 0x218B	; 0x80218b <__brkval>
    4850:	30 91 8c 21 	lds	r19, 0x218C	; 0x80218c <__brkval+0x1>
    4854:	28 17       	cp	r18, r24
    4856:	39 07       	cpc	r19, r25
    4858:	69 f4       	brne	.+26     	; 0x4874 <free+0x10c>
    485a:	30 97       	sbiw	r30, 0x00	; 0
    485c:	29 f4       	brne	.+10     	; 0x4868 <free+0x100>
    485e:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <__flp>
    4862:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <__flp+0x1>
    4866:	02 c0       	rjmp	.+4      	; 0x486c <free+0x104>
    4868:	12 82       	std	Z+2, r1	; 0x02
    486a:	13 82       	std	Z+3, r1	; 0x03
    486c:	a0 93 8b 21 	sts	0x218B, r26	; 0x80218b <__brkval>
    4870:	b0 93 8c 21 	sts	0x218C, r27	; 0x80218c <__brkval+0x1>
    4874:	df 91       	pop	r29
    4876:	cf 91       	pop	r28
    4878:	08 95       	ret

0000487a <isspace>:
    487a:	91 11       	cpse	r25, r1
    487c:	1f c1       	rjmp	.+574    	; 0x4abc <__ctype_isfalse>
    487e:	80 32       	cpi	r24, 0x20	; 32
    4880:	19 f0       	breq	.+6      	; 0x4888 <isspace+0xe>
    4882:	89 50       	subi	r24, 0x09	; 9
    4884:	85 50       	subi	r24, 0x05	; 5
    4886:	d0 f7       	brcc	.-12     	; 0x487c <isspace+0x2>
    4888:	08 95       	ret

0000488a <strchr_P>:
    488a:	fc 01       	movw	r30, r24
    488c:	05 90       	lpm	r0, Z+
    488e:	06 16       	cp	r0, r22
    4890:	21 f0       	breq	.+8      	; 0x489a <strchr_P+0x10>
    4892:	00 20       	and	r0, r0
    4894:	d9 f7       	brne	.-10     	; 0x488c <strchr_P+0x2>
    4896:	c0 01       	movw	r24, r0
    4898:	08 95       	ret
    489a:	31 97       	sbiw	r30, 0x01	; 1
    489c:	cf 01       	movw	r24, r30
    489e:	08 95       	ret

000048a0 <strnlen_P>:
    48a0:	fc 01       	movw	r30, r24
    48a2:	05 90       	lpm	r0, Z+
    48a4:	61 50       	subi	r22, 0x01	; 1
    48a6:	70 40       	sbci	r23, 0x00	; 0
    48a8:	01 10       	cpse	r0, r1
    48aa:	d8 f7       	brcc	.-10     	; 0x48a2 <strnlen_P+0x2>
    48ac:	80 95       	com	r24
    48ae:	90 95       	com	r25
    48b0:	8e 0f       	add	r24, r30
    48b2:	9f 1f       	adc	r25, r31
    48b4:	08 95       	ret

000048b6 <memset>:
    48b6:	dc 01       	movw	r26, r24
    48b8:	01 c0       	rjmp	.+2      	; 0x48bc <memset+0x6>
    48ba:	6d 93       	st	X+, r22
    48bc:	41 50       	subi	r20, 0x01	; 1
    48be:	50 40       	sbci	r21, 0x00	; 0
    48c0:	e0 f7       	brcc	.-8      	; 0x48ba <memset+0x4>
    48c2:	08 95       	ret

000048c4 <strnlen>:
    48c4:	fc 01       	movw	r30, r24
    48c6:	61 50       	subi	r22, 0x01	; 1
    48c8:	70 40       	sbci	r23, 0x00	; 0
    48ca:	01 90       	ld	r0, Z+
    48cc:	01 10       	cpse	r0, r1
    48ce:	d8 f7       	brcc	.-10     	; 0x48c6 <strnlen+0x2>
    48d0:	80 95       	com	r24
    48d2:	90 95       	com	r25
    48d4:	8e 0f       	add	r24, r30
    48d6:	9f 1f       	adc	r25, r31
    48d8:	08 95       	ret

000048da <fgetc>:
    48da:	cf 93       	push	r28
    48dc:	df 93       	push	r29
    48de:	ec 01       	movw	r28, r24
    48e0:	2b 81       	ldd	r18, Y+3	; 0x03
    48e2:	20 ff       	sbrs	r18, 0
    48e4:	33 c0       	rjmp	.+102    	; 0x494c <fgetc+0x72>
    48e6:	26 ff       	sbrs	r18, 6
    48e8:	0a c0       	rjmp	.+20     	; 0x48fe <fgetc+0x24>
    48ea:	2f 7b       	andi	r18, 0xBF	; 191
    48ec:	2b 83       	std	Y+3, r18	; 0x03
    48ee:	8e 81       	ldd	r24, Y+6	; 0x06
    48f0:	9f 81       	ldd	r25, Y+7	; 0x07
    48f2:	01 96       	adiw	r24, 0x01	; 1
    48f4:	8e 83       	std	Y+6, r24	; 0x06
    48f6:	9f 83       	std	Y+7, r25	; 0x07
    48f8:	8a 81       	ldd	r24, Y+2	; 0x02
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	29 c0       	rjmp	.+82     	; 0x4950 <fgetc+0x76>
    48fe:	22 ff       	sbrs	r18, 2
    4900:	0f c0       	rjmp	.+30     	; 0x4920 <fgetc+0x46>
    4902:	e8 81       	ld	r30, Y
    4904:	f9 81       	ldd	r31, Y+1	; 0x01
    4906:	80 81       	ld	r24, Z
    4908:	08 2e       	mov	r0, r24
    490a:	00 0c       	add	r0, r0
    490c:	99 0b       	sbc	r25, r25
    490e:	00 97       	sbiw	r24, 0x00	; 0
    4910:	19 f4       	brne	.+6      	; 0x4918 <fgetc+0x3e>
    4912:	20 62       	ori	r18, 0x20	; 32
    4914:	2b 83       	std	Y+3, r18	; 0x03
    4916:	1a c0       	rjmp	.+52     	; 0x494c <fgetc+0x72>
    4918:	31 96       	adiw	r30, 0x01	; 1
    491a:	e8 83       	st	Y, r30
    491c:	f9 83       	std	Y+1, r31	; 0x01
    491e:	0e c0       	rjmp	.+28     	; 0x493c <fgetc+0x62>
    4920:	ea 85       	ldd	r30, Y+10	; 0x0a
    4922:	fb 85       	ldd	r31, Y+11	; 0x0b
    4924:	19 95       	eicall
    4926:	97 ff       	sbrs	r25, 7
    4928:	09 c0       	rjmp	.+18     	; 0x493c <fgetc+0x62>
    492a:	2b 81       	ldd	r18, Y+3	; 0x03
    492c:	01 96       	adiw	r24, 0x01	; 1
    492e:	11 f0       	breq	.+4      	; 0x4934 <fgetc+0x5a>
    4930:	80 e2       	ldi	r24, 0x20	; 32
    4932:	01 c0       	rjmp	.+2      	; 0x4936 <fgetc+0x5c>
    4934:	80 e1       	ldi	r24, 0x10	; 16
    4936:	82 2b       	or	r24, r18
    4938:	8b 83       	std	Y+3, r24	; 0x03
    493a:	08 c0       	rjmp	.+16     	; 0x494c <fgetc+0x72>
    493c:	2e 81       	ldd	r18, Y+6	; 0x06
    493e:	3f 81       	ldd	r19, Y+7	; 0x07
    4940:	2f 5f       	subi	r18, 0xFF	; 255
    4942:	3f 4f       	sbci	r19, 0xFF	; 255
    4944:	2e 83       	std	Y+6, r18	; 0x06
    4946:	3f 83       	std	Y+7, r19	; 0x07
    4948:	99 27       	eor	r25, r25
    494a:	02 c0       	rjmp	.+4      	; 0x4950 <fgetc+0x76>
    494c:	8f ef       	ldi	r24, 0xFF	; 255
    494e:	9f ef       	ldi	r25, 0xFF	; 255
    4950:	df 91       	pop	r29
    4952:	cf 91       	pop	r28
    4954:	08 95       	ret

00004956 <fputc>:
    4956:	0f 93       	push	r16
    4958:	1f 93       	push	r17
    495a:	cf 93       	push	r28
    495c:	df 93       	push	r29
    495e:	fb 01       	movw	r30, r22
    4960:	23 81       	ldd	r18, Z+3	; 0x03
    4962:	21 fd       	sbrc	r18, 1
    4964:	03 c0       	rjmp	.+6      	; 0x496c <fputc+0x16>
    4966:	8f ef       	ldi	r24, 0xFF	; 255
    4968:	9f ef       	ldi	r25, 0xFF	; 255
    496a:	2c c0       	rjmp	.+88     	; 0x49c4 <fputc+0x6e>
    496c:	22 ff       	sbrs	r18, 2
    496e:	16 c0       	rjmp	.+44     	; 0x499c <fputc+0x46>
    4970:	46 81       	ldd	r20, Z+6	; 0x06
    4972:	57 81       	ldd	r21, Z+7	; 0x07
    4974:	24 81       	ldd	r18, Z+4	; 0x04
    4976:	35 81       	ldd	r19, Z+5	; 0x05
    4978:	42 17       	cp	r20, r18
    497a:	53 07       	cpc	r21, r19
    497c:	44 f4       	brge	.+16     	; 0x498e <fputc+0x38>
    497e:	a0 81       	ld	r26, Z
    4980:	b1 81       	ldd	r27, Z+1	; 0x01
    4982:	9d 01       	movw	r18, r26
    4984:	2f 5f       	subi	r18, 0xFF	; 255
    4986:	3f 4f       	sbci	r19, 0xFF	; 255
    4988:	20 83       	st	Z, r18
    498a:	31 83       	std	Z+1, r19	; 0x01
    498c:	8c 93       	st	X, r24
    498e:	26 81       	ldd	r18, Z+6	; 0x06
    4990:	37 81       	ldd	r19, Z+7	; 0x07
    4992:	2f 5f       	subi	r18, 0xFF	; 255
    4994:	3f 4f       	sbci	r19, 0xFF	; 255
    4996:	26 83       	std	Z+6, r18	; 0x06
    4998:	37 83       	std	Z+7, r19	; 0x07
    499a:	14 c0       	rjmp	.+40     	; 0x49c4 <fputc+0x6e>
    499c:	8b 01       	movw	r16, r22
    499e:	ec 01       	movw	r28, r24
    49a0:	fb 01       	movw	r30, r22
    49a2:	00 84       	ldd	r0, Z+8	; 0x08
    49a4:	f1 85       	ldd	r31, Z+9	; 0x09
    49a6:	e0 2d       	mov	r30, r0
    49a8:	19 95       	eicall
    49aa:	89 2b       	or	r24, r25
    49ac:	e1 f6       	brne	.-72     	; 0x4966 <fputc+0x10>
    49ae:	d8 01       	movw	r26, r16
    49b0:	16 96       	adiw	r26, 0x06	; 6
    49b2:	8d 91       	ld	r24, X+
    49b4:	9c 91       	ld	r25, X
    49b6:	17 97       	sbiw	r26, 0x07	; 7
    49b8:	01 96       	adiw	r24, 0x01	; 1
    49ba:	16 96       	adiw	r26, 0x06	; 6
    49bc:	8d 93       	st	X+, r24
    49be:	9c 93       	st	X, r25
    49c0:	17 97       	sbiw	r26, 0x07	; 7
    49c2:	ce 01       	movw	r24, r28
    49c4:	df 91       	pop	r29
    49c6:	cf 91       	pop	r28
    49c8:	1f 91       	pop	r17
    49ca:	0f 91       	pop	r16
    49cc:	08 95       	ret

000049ce <ungetc>:
    49ce:	fb 01       	movw	r30, r22
    49d0:	23 81       	ldd	r18, Z+3	; 0x03
    49d2:	20 ff       	sbrs	r18, 0
    49d4:	12 c0       	rjmp	.+36     	; 0x49fa <ungetc+0x2c>
    49d6:	26 fd       	sbrc	r18, 6
    49d8:	10 c0       	rjmp	.+32     	; 0x49fa <ungetc+0x2c>
    49da:	8f 3f       	cpi	r24, 0xFF	; 255
    49dc:	3f ef       	ldi	r19, 0xFF	; 255
    49de:	93 07       	cpc	r25, r19
    49e0:	61 f0       	breq	.+24     	; 0x49fa <ungetc+0x2c>
    49e2:	82 83       	std	Z+2, r24	; 0x02
    49e4:	2f 7d       	andi	r18, 0xDF	; 223
    49e6:	20 64       	ori	r18, 0x40	; 64
    49e8:	23 83       	std	Z+3, r18	; 0x03
    49ea:	26 81       	ldd	r18, Z+6	; 0x06
    49ec:	37 81       	ldd	r19, Z+7	; 0x07
    49ee:	21 50       	subi	r18, 0x01	; 1
    49f0:	31 09       	sbc	r19, r1
    49f2:	26 83       	std	Z+6, r18	; 0x06
    49f4:	37 83       	std	Z+7, r19	; 0x07
    49f6:	99 27       	eor	r25, r25
    49f8:	08 95       	ret
    49fa:	8f ef       	ldi	r24, 0xFF	; 255
    49fc:	9f ef       	ldi	r25, 0xFF	; 255
    49fe:	08 95       	ret

00004a00 <__ultoa_invert>:
    4a00:	fa 01       	movw	r30, r20
    4a02:	aa 27       	eor	r26, r26
    4a04:	28 30       	cpi	r18, 0x08	; 8
    4a06:	51 f1       	breq	.+84     	; 0x4a5c <__ultoa_invert+0x5c>
    4a08:	20 31       	cpi	r18, 0x10	; 16
    4a0a:	81 f1       	breq	.+96     	; 0x4a6c <__ultoa_invert+0x6c>
    4a0c:	e8 94       	clt
    4a0e:	6f 93       	push	r22
    4a10:	6e 7f       	andi	r22, 0xFE	; 254
    4a12:	6e 5f       	subi	r22, 0xFE	; 254
    4a14:	7f 4f       	sbci	r23, 0xFF	; 255
    4a16:	8f 4f       	sbci	r24, 0xFF	; 255
    4a18:	9f 4f       	sbci	r25, 0xFF	; 255
    4a1a:	af 4f       	sbci	r26, 0xFF	; 255
    4a1c:	b1 e0       	ldi	r27, 0x01	; 1
    4a1e:	3e d0       	rcall	.+124    	; 0x4a9c <__ultoa_invert+0x9c>
    4a20:	b4 e0       	ldi	r27, 0x04	; 4
    4a22:	3c d0       	rcall	.+120    	; 0x4a9c <__ultoa_invert+0x9c>
    4a24:	67 0f       	add	r22, r23
    4a26:	78 1f       	adc	r23, r24
    4a28:	89 1f       	adc	r24, r25
    4a2a:	9a 1f       	adc	r25, r26
    4a2c:	a1 1d       	adc	r26, r1
    4a2e:	68 0f       	add	r22, r24
    4a30:	79 1f       	adc	r23, r25
    4a32:	8a 1f       	adc	r24, r26
    4a34:	91 1d       	adc	r25, r1
    4a36:	a1 1d       	adc	r26, r1
    4a38:	6a 0f       	add	r22, r26
    4a3a:	71 1d       	adc	r23, r1
    4a3c:	81 1d       	adc	r24, r1
    4a3e:	91 1d       	adc	r25, r1
    4a40:	a1 1d       	adc	r26, r1
    4a42:	20 d0       	rcall	.+64     	; 0x4a84 <__ultoa_invert+0x84>
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <__ultoa_invert+0x48>
    4a46:	68 94       	set
    4a48:	3f 91       	pop	r19
    4a4a:	2a e0       	ldi	r18, 0x0A	; 10
    4a4c:	26 9f       	mul	r18, r22
    4a4e:	11 24       	eor	r1, r1
    4a50:	30 19       	sub	r19, r0
    4a52:	30 5d       	subi	r19, 0xD0	; 208
    4a54:	31 93       	st	Z+, r19
    4a56:	de f6       	brtc	.-74     	; 0x4a0e <__ultoa_invert+0xe>
    4a58:	cf 01       	movw	r24, r30
    4a5a:	08 95       	ret
    4a5c:	46 2f       	mov	r20, r22
    4a5e:	47 70       	andi	r20, 0x07	; 7
    4a60:	40 5d       	subi	r20, 0xD0	; 208
    4a62:	41 93       	st	Z+, r20
    4a64:	b3 e0       	ldi	r27, 0x03	; 3
    4a66:	0f d0       	rcall	.+30     	; 0x4a86 <__ultoa_invert+0x86>
    4a68:	c9 f7       	brne	.-14     	; 0x4a5c <__ultoa_invert+0x5c>
    4a6a:	f6 cf       	rjmp	.-20     	; 0x4a58 <__ultoa_invert+0x58>
    4a6c:	46 2f       	mov	r20, r22
    4a6e:	4f 70       	andi	r20, 0x0F	; 15
    4a70:	40 5d       	subi	r20, 0xD0	; 208
    4a72:	4a 33       	cpi	r20, 0x3A	; 58
    4a74:	18 f0       	brcs	.+6      	; 0x4a7c <__ultoa_invert+0x7c>
    4a76:	49 5d       	subi	r20, 0xD9	; 217
    4a78:	31 fd       	sbrc	r19, 1
    4a7a:	40 52       	subi	r20, 0x20	; 32
    4a7c:	41 93       	st	Z+, r20
    4a7e:	02 d0       	rcall	.+4      	; 0x4a84 <__ultoa_invert+0x84>
    4a80:	a9 f7       	brne	.-22     	; 0x4a6c <__ultoa_invert+0x6c>
    4a82:	ea cf       	rjmp	.-44     	; 0x4a58 <__ultoa_invert+0x58>
    4a84:	b4 e0       	ldi	r27, 0x04	; 4
    4a86:	a6 95       	lsr	r26
    4a88:	97 95       	ror	r25
    4a8a:	87 95       	ror	r24
    4a8c:	77 95       	ror	r23
    4a8e:	67 95       	ror	r22
    4a90:	ba 95       	dec	r27
    4a92:	c9 f7       	brne	.-14     	; 0x4a86 <__ultoa_invert+0x86>
    4a94:	00 97       	sbiw	r24, 0x00	; 0
    4a96:	61 05       	cpc	r22, r1
    4a98:	71 05       	cpc	r23, r1
    4a9a:	08 95       	ret
    4a9c:	9b 01       	movw	r18, r22
    4a9e:	ac 01       	movw	r20, r24
    4aa0:	0a 2e       	mov	r0, r26
    4aa2:	06 94       	lsr	r0
    4aa4:	57 95       	ror	r21
    4aa6:	47 95       	ror	r20
    4aa8:	37 95       	ror	r19
    4aaa:	27 95       	ror	r18
    4aac:	ba 95       	dec	r27
    4aae:	c9 f7       	brne	.-14     	; 0x4aa2 <__ultoa_invert+0xa2>
    4ab0:	62 0f       	add	r22, r18
    4ab2:	73 1f       	adc	r23, r19
    4ab4:	84 1f       	adc	r24, r20
    4ab6:	95 1f       	adc	r25, r21
    4ab8:	a0 1d       	adc	r26, r0
    4aba:	08 95       	ret

00004abc <__ctype_isfalse>:
    4abc:	99 27       	eor	r25, r25
    4abe:	88 27       	eor	r24, r24

00004ac0 <__ctype_istrue>:
    4ac0:	08 95       	ret

00004ac2 <_exit>:
    4ac2:	f8 94       	cli

00004ac4 <__stop_program>:
    4ac4:	ff cf       	rjmp	.-2      	; 0x4ac4 <__stop_program>
