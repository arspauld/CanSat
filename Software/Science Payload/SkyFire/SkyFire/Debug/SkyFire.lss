
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00802000  00002984  00002a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080206c  0080206c  00002a84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ae0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00002b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011aab  00000000  00000000  00002f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000057f8  00000000  00000000  000149b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000673b  00000000  00000000  0001a1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e80  00000000  00000000  000208e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032d09  00000000  00000000  00021768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ee8  00000000  00000000  00054471  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  00058359  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002739  00000000  00000000  000586a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c1       	rjmp	.+636    	; 0x27e <__ctors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c1       	rjmp	.+672    	; 0x2ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c1       	rjmp	.+620    	; 0x2ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c1       	rjmp	.+612    	; 0x2ca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c1       	rjmp	.+608    	; 0x2ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bad_interrupt>
      9a:	00 00       	nop
      9c:	36 c2       	rjmp	.+1132   	; 0x50a <__vector_39>
      9e:	00 00       	nop
      a0:	71 c2       	rjmp	.+1250   	; 0x584 <__vector_40>
      a2:	00 00       	nop
      a4:	ac c2       	rjmp	.+1368   	; 0x5fe <__vector_41>
      a6:	00 00       	nop
      a8:	e7 c2       	rjmp	.+1486   	; 0x678 <__vector_42>
      aa:	00 00       	nop
      ac:	0e c1       	rjmp	.+540    	; 0x2ca <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0c c1       	rjmp	.+536    	; 0x2ca <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0a c1       	rjmp	.+532    	; 0x2ca <__bad_interrupt>
      b6:	00 00       	nop
      b8:	08 c1       	rjmp	.+528    	; 0x2ca <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__vector_47>
      c0:	04 c1       	rjmp	.+520    	; 0x2ca <__bad_interrupt>
      c2:	00 00       	nop
      c4:	02 c1       	rjmp	.+516    	; 0x2ca <__bad_interrupt>
      c6:	00 00       	nop
      c8:	00 c1       	rjmp	.+512    	; 0x2ca <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fe c0       	rjmp	.+508    	; 0x2ca <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fc c0       	rjmp	.+504    	; 0x2ca <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fa c0       	rjmp	.+500    	; 0x2ca <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f8 c0       	rjmp	.+496    	; 0x2ca <__bad_interrupt>
      da:	00 00       	nop
      dc:	f6 c0       	rjmp	.+492    	; 0x2ca <__bad_interrupt>
      de:	00 00       	nop
      e0:	f4 c0       	rjmp	.+488    	; 0x2ca <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f2 c0       	rjmp	.+484    	; 0x2ca <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f0 c0       	rjmp	.+480    	; 0x2ca <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ee c0       	rjmp	.+476    	; 0x2ca <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ec c0       	rjmp	.+472    	; 0x2ca <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ea c0       	rjmp	.+468    	; 0x2ca <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e8 c0       	rjmp	.+464    	; 0x2ca <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e6 c0       	rjmp	.+460    	; 0x2ca <__bad_interrupt>
      fe:	00 00       	nop
     100:	e4 c0       	rjmp	.+456    	; 0x2ca <__bad_interrupt>
     102:	00 00       	nop
     104:	e2 c0       	rjmp	.+452    	; 0x2ca <__bad_interrupt>
     106:	00 00       	nop
     108:	e0 c0       	rjmp	.+448    	; 0x2ca <__bad_interrupt>
     10a:	00 00       	nop
     10c:	de c0       	rjmp	.+444    	; 0x2ca <__bad_interrupt>
     10e:	00 00       	nop
     110:	dc c0       	rjmp	.+440    	; 0x2ca <__bad_interrupt>
     112:	00 00       	nop
     114:	da c0       	rjmp	.+436    	; 0x2ca <__bad_interrupt>
     116:	00 00       	nop
     118:	d8 c0       	rjmp	.+432    	; 0x2ca <__bad_interrupt>
     11a:	00 00       	nop
     11c:	02 c1       	rjmp	.+516    	; 0x322 <__vector_71>
     11e:	00 00       	nop
     120:	3d c1       	rjmp	.+634    	; 0x39c <__vector_72>
     122:	00 00       	nop
     124:	78 c1       	rjmp	.+752    	; 0x416 <__vector_73>
     126:	00 00       	nop
     128:	b3 c1       	rjmp	.+870    	; 0x490 <__vector_74>
     12a:	00 00       	nop
     12c:	ce c0       	rjmp	.+412    	; 0x2ca <__bad_interrupt>
     12e:	00 00       	nop
     130:	cc c0       	rjmp	.+408    	; 0x2ca <__bad_interrupt>
     132:	00 00       	nop
     134:	ca c0       	rjmp	.+404    	; 0x2ca <__bad_interrupt>
     136:	00 00       	nop
     138:	c8 c0       	rjmp	.+400    	; 0x2ca <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c6 c0       	rjmp	.+396    	; 0x2ca <__bad_interrupt>
     13e:	00 00       	nop
     140:	c4 c0       	rjmp	.+392    	; 0x2ca <__bad_interrupt>
     142:	00 00       	nop
     144:	c2 c0       	rjmp	.+388    	; 0x2ca <__bad_interrupt>
     146:	00 00       	nop
     148:	c0 c0       	rjmp	.+384    	; 0x2ca <__bad_interrupt>
     14a:	00 00       	nop
     14c:	be c0       	rjmp	.+380    	; 0x2ca <__bad_interrupt>
     14e:	00 00       	nop
     150:	bc c0       	rjmp	.+376    	; 0x2ca <__bad_interrupt>
     152:	00 00       	nop
     154:	ba c0       	rjmp	.+372    	; 0x2ca <__bad_interrupt>
     156:	00 00       	nop
     158:	b8 c0       	rjmp	.+368    	; 0x2ca <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b6 c0       	rjmp	.+364    	; 0x2ca <__bad_interrupt>
     15e:	00 00       	nop
     160:	b4 c0       	rjmp	.+360    	; 0x2ca <__bad_interrupt>
     162:	00 00       	nop
     164:	b2 c0       	rjmp	.+356    	; 0x2ca <__bad_interrupt>
     166:	00 00       	nop
     168:	b0 c0       	rjmp	.+352    	; 0x2ca <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ae c0       	rjmp	.+348    	; 0x2ca <__bad_interrupt>
     16e:	00 00       	nop
     170:	ac c0       	rjmp	.+344    	; 0x2ca <__bad_interrupt>
     172:	00 00       	nop
     174:	aa c0       	rjmp	.+340    	; 0x2ca <__bad_interrupt>
     176:	00 00       	nop
     178:	a8 c0       	rjmp	.+336    	; 0x2ca <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a6 c0       	rjmp	.+332    	; 0x2ca <__bad_interrupt>
     17e:	00 00       	nop
     180:	a4 c0       	rjmp	.+328    	; 0x2ca <__bad_interrupt>
     182:	00 00       	nop
     184:	a2 c0       	rjmp	.+324    	; 0x2ca <__bad_interrupt>
     186:	00 00       	nop
     188:	a0 c0       	rjmp	.+320    	; 0x2ca <__bad_interrupt>
     18a:	00 00       	nop
     18c:	9e c0       	rjmp	.+316    	; 0x2ca <__bad_interrupt>
     18e:	00 00       	nop
     190:	9c c0       	rjmp	.+312    	; 0x2ca <__bad_interrupt>
     192:	00 00       	nop
     194:	9a c0       	rjmp	.+308    	; 0x2ca <__bad_interrupt>
     196:	00 00       	nop
     198:	98 c0       	rjmp	.+304    	; 0x2ca <__bad_interrupt>
     19a:	00 00       	nop
     19c:	96 c0       	rjmp	.+300    	; 0x2ca <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	94 c0       	rjmp	.+296    	; 0x2ca <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	92 c0       	rjmp	.+292    	; 0x2ca <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	90 c0       	rjmp	.+288    	; 0x2ca <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	8e c0       	rjmp	.+284    	; 0x2ca <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8c c0       	rjmp	.+280    	; 0x2ca <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8a c0       	rjmp	.+276    	; 0x2ca <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	88 c0       	rjmp	.+272    	; 0x2ca <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	86 c0       	rjmp	.+268    	; 0x2ca <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	84 c0       	rjmp	.+264    	; 0x2ca <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	82 c0       	rjmp	.+260    	; 0x2ca <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	80 c0       	rjmp	.+256    	; 0x2ca <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	7e c0       	rjmp	.+252    	; 0x2ca <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7c c0       	rjmp	.+248    	; 0x2ca <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7a c0       	rjmp	.+244    	; 0x2ca <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	78 c0       	rjmp	.+240    	; 0x2ca <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	76 c0       	rjmp	.+236    	; 0x2ca <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	74 c0       	rjmp	.+232    	; 0x2ca <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	72 c0       	rjmp	.+228    	; 0x2ca <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	70 c0       	rjmp	.+224    	; 0x2ca <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	6e c0       	rjmp	.+220    	; 0x2ca <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6c c0       	rjmp	.+216    	; 0x2ca <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6a c0       	rjmp	.+212    	; 0x2ca <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	68 c0       	rjmp	.+208    	; 0x2ca <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <usart_init_rs232+0x144>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df e3       	ldi	r29, 0x3F	; 63
     288:	de bf       	out	0x3e, r29	; 62
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	0c bf       	out	0x3c, r16	; 60
     28e:	18 be       	out	0x38, r1	; 56
     290:	19 be       	out	0x39, r1	; 57
     292:	1a be       	out	0x3a, r1	; 58
     294:	1b be       	out	0x3b, r1	; 59

00000296 <__do_copy_data>:
     296:	10 e2       	ldi	r17, 0x20	; 32
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e2       	ldi	r27, 0x20	; 32
     29c:	e4 e8       	ldi	r30, 0x84	; 132
     29e:	f9 e2       	ldi	r31, 0x29	; 41
     2a0:	00 e0       	ldi	r16, 0x00	; 0
     2a2:	0b bf       	out	0x3b, r16	; 59
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x14>
     2a6:	07 90       	elpm	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	ac 36       	cpi	r26, 0x6C	; 108
     2ac:	b1 07       	cpc	r27, r17
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0x10>
     2b0:	1b be       	out	0x3b, r1	; 59

000002b2 <__do_clear_bss>:
     2b2:	20 e2       	ldi	r18, 0x20	; 32
     2b4:	ac e6       	ldi	r26, 0x6C	; 108
     2b6:	b0 e2       	ldi	r27, 0x20	; 32
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a5 3a       	cpi	r26, 0xA5	; 165
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <main>
     2c6:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <_exit>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	1f 92       	push	r1
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2d6:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <stdio_base>
     2da:	90 91 96 20 	lds	r25, 0x2096	; 0x802096 <stdio_base+0x1>
     2de:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <ptr_get>
     2e2:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <ptr_get+0x1>
     2e6:	be 01       	movw	r22, r28
     2e8:	6f 5f       	subi	r22, 0xFF	; 255
     2ea:	7f 4f       	sbci	r23, 0xFF	; 255
     2ec:	19 95       	eicall
	return c;
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     2f0:	08 2e       	mov	r0, r24
     2f2:	00 0c       	add	r0, r0
     2f4:	99 0b       	sbc	r25, r25
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2fe:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     300:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <stdio_base>
     304:	90 91 96 20 	lds	r25, 0x2096	; 0x802096 <stdio_base+0x1>
     308:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <ptr_put>
     30c:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <ptr_put+0x1>
     310:	19 95       	eicall
     312:	99 23       	and	r25, r25
     314:	1c f0       	brlt	.+6      	; 0x31c <_write+0x1e>
		return -1;
	}
	return 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     320:	08 95       	ret

00000322 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	08 b6       	in	r0, 0x38	; 56
     32e:	0f 92       	push	r0
     330:	18 be       	out	0x38, r1	; 56
     332:	09 b6       	in	r0, 0x39	; 57
     334:	0f 92       	push	r0
     336:	19 be       	out	0x39, r1	; 57
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	1b be       	out	0x3b, r1	; 59
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     356:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     35a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     35e:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <adca_callback>
     362:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <adca_callback+0x1>
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	19 95       	eicall
}
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	7f 91       	pop	r23
     37c:	6f 91       	pop	r22
     37e:	5f 91       	pop	r21
     380:	4f 91       	pop	r20
     382:	3f 91       	pop	r19
     384:	2f 91       	pop	r18
     386:	0f 90       	pop	r0
     388:	0b be       	out	0x3b, r0	; 59
     38a:	0f 90       	pop	r0
     38c:	09 be       	out	0x39, r0	; 57
     38e:	0f 90       	pop	r0
     390:	08 be       	out	0x38, r0	; 56
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	08 b6       	in	r0, 0x38	; 56
     3a8:	0f 92       	push	r0
     3aa:	18 be       	out	0x38, r1	; 56
     3ac:	09 b6       	in	r0, 0x39	; 57
     3ae:	0f 92       	push	r0
     3b0:	19 be       	out	0x39, r1	; 57
     3b2:	0b b6       	in	r0, 0x3b	; 59
     3b4:	0f 92       	push	r0
     3b6:	1b be       	out	0x3b, r1	; 59
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3d0:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3d4:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d8:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <adca_callback>
     3dc:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <adca_callback+0x1>
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	19 95       	eicall
}
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	bf 91       	pop	r27
     3ee:	af 91       	pop	r26
     3f0:	9f 91       	pop	r25
     3f2:	8f 91       	pop	r24
     3f4:	7f 91       	pop	r23
     3f6:	6f 91       	pop	r22
     3f8:	5f 91       	pop	r21
     3fa:	4f 91       	pop	r20
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0b be       	out	0x3b, r0	; 59
     404:	0f 90       	pop	r0
     406:	09 be       	out	0x39, r0	; 57
     408:	0f 90       	pop	r0
     40a:	08 be       	out	0x38, r0	; 56
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	08 b6       	in	r0, 0x38	; 56
     422:	0f 92       	push	r0
     424:	18 be       	out	0x38, r1	; 56
     426:	09 b6       	in	r0, 0x39	; 57
     428:	0f 92       	push	r0
     42a:	19 be       	out	0x39, r1	; 57
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	1b be       	out	0x3b, r1	; 59
     432:	2f 93       	push	r18
     434:	3f 93       	push	r19
     436:	4f 93       	push	r20
     438:	5f 93       	push	r21
     43a:	6f 93       	push	r22
     43c:	7f 93       	push	r23
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	af 93       	push	r26
     444:	bf 93       	push	r27
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     44a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     44e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     452:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <adca_callback>
     456:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <adca_callback+0x1>
     45a:	64 e0       	ldi	r22, 0x04	; 4
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	19 95       	eicall
}
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0b be       	out	0x3b, r0	; 59
     47e:	0f 90       	pop	r0
     480:	09 be       	out	0x39, r0	; 57
     482:	0f 90       	pop	r0
     484:	08 be       	out	0x38, r0	; 56
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	08 b6       	in	r0, 0x38	; 56
     49c:	0f 92       	push	r0
     49e:	18 be       	out	0x38, r1	; 56
     4a0:	09 b6       	in	r0, 0x39	; 57
     4a2:	0f 92       	push	r0
     4a4:	19 be       	out	0x39, r1	; 57
     4a6:	0b b6       	in	r0, 0x3b	; 59
     4a8:	0f 92       	push	r0
     4aa:	1b be       	out	0x3b, r1	; 59
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4c4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4cc:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <adca_callback>
     4d0:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <adca_callback+0x1>
     4d4:	68 e0       	ldi	r22, 0x08	; 8
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	19 95       	eicall
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0b be       	out	0x3b, r0	; 59
     4f8:	0f 90       	pop	r0
     4fa:	09 be       	out	0x39, r0	; 57
     4fc:	0f 90       	pop	r0
     4fe:	08 be       	out	0x38, r0	; 56
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	08 b6       	in	r0, 0x38	; 56
     516:	0f 92       	push	r0
     518:	18 be       	out	0x38, r1	; 56
     51a:	09 b6       	in	r0, 0x39	; 57
     51c:	0f 92       	push	r0
     51e:	19 be       	out	0x39, r1	; 57
     520:	0b b6       	in	r0, 0x3b	; 59
     522:	0f 92       	push	r0
     524:	1b be       	out	0x3b, r1	; 59
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     53e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     542:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     546:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <adcb_callback>
     54a:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <adcb_callback+0x1>
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	19 95       	eicall
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0b be       	out	0x3b, r0	; 59
     572:	0f 90       	pop	r0
     574:	09 be       	out	0x39, r0	; 57
     576:	0f 90       	pop	r0
     578:	08 be       	out	0x38, r0	; 56
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	08 b6       	in	r0, 0x38	; 56
     590:	0f 92       	push	r0
     592:	18 be       	out	0x38, r1	; 56
     594:	09 b6       	in	r0, 0x39	; 57
     596:	0f 92       	push	r0
     598:	19 be       	out	0x39, r1	; 57
     59a:	0b b6       	in	r0, 0x3b	; 59
     59c:	0f 92       	push	r0
     59e:	1b be       	out	0x3b, r1	; 59
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5bc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5c0:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <adcb_callback>
     5c4:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <adcb_callback+0x1>
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	19 95       	eicall
}
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	09 be       	out	0x39, r0	; 57
     5f0:	0f 90       	pop	r0
     5f2:	08 be       	out	0x38, r0	; 56
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	08 b6       	in	r0, 0x38	; 56
     60a:	0f 92       	push	r0
     60c:	18 be       	out	0x38, r1	; 56
     60e:	09 b6       	in	r0, 0x39	; 57
     610:	0f 92       	push	r0
     612:	19 be       	out	0x39, r1	; 57
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	1b be       	out	0x3b, r1	; 59
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     632:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     636:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     63a:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <adcb_callback>
     63e:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <adcb_callback+0x1>
     642:	64 e0       	ldi	r22, 0x04	; 4
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	19 95       	eicall
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0b be       	out	0x3b, r0	; 59
     666:	0f 90       	pop	r0
     668:	09 be       	out	0x39, r0	; 57
     66a:	0f 90       	pop	r0
     66c:	08 be       	out	0x38, r0	; 56
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	08 b6       	in	r0, 0x38	; 56
     684:	0f 92       	push	r0
     686:	18 be       	out	0x38, r1	; 56
     688:	09 b6       	in	r0, 0x39	; 57
     68a:	0f 92       	push	r0
     68c:	19 be       	out	0x39, r1	; 57
     68e:	0b b6       	in	r0, 0x3b	; 59
     690:	0f 92       	push	r0
     692:	1b be       	out	0x3b, r1	; 59
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	ef 93       	push	r30
     6aa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6ac:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6b0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6b4:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <adcb_callback>
     6b8:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <adcb_callback+0x1>
     6bc:	68 e0       	ldi	r22, 0x08	; 8
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	19 95       	eicall
}
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0b be       	out	0x3b, r0	; 59
     6e0:	0f 90       	pop	r0
     6e2:	09 be       	out	0x39, r0	; 57
     6e4:	0f 90       	pop	r0
     6e6:	08 be       	out	0x38, r0	; 56
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6f2:	fc 01       	movw	r30, r24
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	95 ff       	sbrs	r25, 5
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <usart_putchar+0x2>
     6fa:	60 83       	st	Z, r22
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret

00000702 <usart_getchar>:
     702:	fc 01       	movw	r30, r24
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	99 23       	and	r25, r25
     708:	ec f7       	brge	.-6      	; 0x704 <usart_getchar+0x2>
     70a:	80 81       	ld	r24, Z
     70c:	08 95       	ret

0000070e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     70e:	4f 92       	push	r4
     710:	5f 92       	push	r5
     712:	6f 92       	push	r6
     714:	7f 92       	push	r7
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	7c 01       	movw	r14, r24
     72a:	4a 01       	movw	r8, r20
     72c:	5b 01       	movw	r10, r22
     72e:	28 01       	movw	r4, r16
     730:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     732:	fc 01       	movw	r30, r24
     734:	84 81       	ldd	r24, Z+4	; 0x04
     736:	82 ff       	sbrs	r24, 2
     738:	16 c0       	rjmp	.+44     	; 0x766 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     73a:	d9 01       	movw	r26, r18
     73c:	c8 01       	movw	r24, r16
     73e:	68 94       	set
     740:	12 f8       	bld	r1, 2
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	16 94       	lsr	r1
     74c:	d1 f7       	brne	.-12     	; 0x742 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     74e:	b9 01       	movw	r22, r18
     750:	a8 01       	movw	r20, r16
     752:	03 2e       	mov	r0, r19
     754:	36 e1       	ldi	r19, 0x16	; 22
     756:	76 95       	lsr	r23
     758:	67 95       	ror	r22
     75a:	57 95       	ror	r21
     75c:	47 95       	ror	r20
     75e:	3a 95       	dec	r19
     760:	d1 f7       	brne	.-12     	; 0x756 <usart_set_baudrate+0x48>
     762:	30 2d       	mov	r19, r0
     764:	15 c0       	rjmp	.+42     	; 0x790 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     766:	d9 01       	movw	r26, r18
     768:	c8 01       	movw	r24, r16
     76a:	68 94       	set
     76c:	13 f8       	bld	r1, 3
     76e:	b6 95       	lsr	r27
     770:	a7 95       	ror	r26
     772:	97 95       	ror	r25
     774:	87 95       	ror	r24
     776:	16 94       	lsr	r1
     778:	d1 f7       	brne	.-12     	; 0x76e <usart_set_baudrate+0x60>
		min_rate /= 2;
     77a:	b9 01       	movw	r22, r18
     77c:	a8 01       	movw	r20, r16
     77e:	03 2e       	mov	r0, r19
     780:	37 e1       	ldi	r19, 0x17	; 23
     782:	76 95       	lsr	r23
     784:	67 95       	ror	r22
     786:	57 95       	ror	r21
     788:	47 95       	ror	r20
     78a:	3a 95       	dec	r19
     78c:	d1 f7       	brne	.-12     	; 0x782 <usart_set_baudrate+0x74>
     78e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     790:	88 15       	cp	r24, r8
     792:	99 05       	cpc	r25, r9
     794:	aa 05       	cpc	r26, r10
     796:	bb 05       	cpc	r27, r11
     798:	08 f4       	brcc	.+2      	; 0x79c <usart_set_baudrate+0x8e>
     79a:	a6 c0       	rjmp	.+332    	; 0x8e8 <usart_set_baudrate+0x1da>
     79c:	84 16       	cp	r8, r20
     79e:	95 06       	cpc	r9, r21
     7a0:	a6 06       	cpc	r10, r22
     7a2:	b7 06       	cpc	r11, r23
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <usart_set_baudrate+0x9a>
     7a6:	a2 c0       	rjmp	.+324    	; 0x8ec <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7a8:	f7 01       	movw	r30, r14
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	82 fd       	sbrc	r24, 2
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <usart_set_baudrate+0xaa>
		baud *= 2;
     7b0:	88 0c       	add	r8, r8
     7b2:	99 1c       	adc	r9, r9
     7b4:	aa 1c       	adc	r10, r10
     7b6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7b8:	c3 01       	movw	r24, r6
     7ba:	b2 01       	movw	r22, r4
     7bc:	a5 01       	movw	r20, r10
     7be:	94 01       	movw	r18, r8
     7c0:	0e 94 0f 10 	call	0x201e	; 0x201e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7c4:	2f 3f       	cpi	r18, 0xFF	; 255
     7c6:	31 05       	cpc	r19, r1
     7c8:	41 05       	cpc	r20, r1
     7ca:	51 05       	cpc	r21, r1
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <usart_set_baudrate+0xc2>
     7ce:	90 c0       	rjmp	.+288    	; 0x8f0 <usart_set_baudrate+0x1e2>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	c9 ef       	ldi	r28, 0xF9	; 249
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <usart_set_baudrate+0xd8>
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	4a 07       	cpc	r20, r26
     7e2:	5b 07       	cpc	r21, r27
     7e4:	58 f0       	brcs	.+22     	; 0x7fc <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	aa 1f       	adc	r26, r26
     7ec:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     7ee:	cd 3f       	cpi	r28, 0xFD	; 253
     7f0:	0c f4       	brge	.+2      	; 0x7f4 <usart_set_baudrate+0xe6>
			limit |= 1;
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7f6:	c7 30       	cpi	r28, 0x07	; 7
     7f8:	89 f7       	brne	.-30     	; 0x7dc <usart_set_baudrate+0xce>
     7fa:	4f c0       	rjmp	.+158    	; 0x89a <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     7fc:	cc 23       	and	r28, r28
     7fe:	0c f0       	brlt	.+2      	; 0x802 <usart_set_baudrate+0xf4>
     800:	4c c0       	rjmp	.+152    	; 0x89a <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     802:	d5 01       	movw	r26, r10
     804:	c4 01       	movw	r24, r8
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	aa 1f       	adc	r26, r26
     80c:	bb 1f       	adc	r27, r27
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	aa 1f       	adc	r26, r26
     81c:	bb 1f       	adc	r27, r27
     81e:	48 1a       	sub	r4, r24
     820:	59 0a       	sbc	r5, r25
     822:	6a 0a       	sbc	r6, r26
     824:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     826:	ce 3f       	cpi	r28, 0xFE	; 254
     828:	f4 f4       	brge	.+60     	; 0x866 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     82a:	8d ef       	ldi	r24, 0xFD	; 253
     82c:	9f ef       	ldi	r25, 0xFF	; 255
     82e:	8c 1b       	sub	r24, r28
     830:	91 09       	sbc	r25, r1
     832:	c7 fd       	sbrc	r28, 7
     834:	93 95       	inc	r25
     836:	04 c0       	rjmp	.+8      	; 0x840 <usart_set_baudrate+0x132>
     838:	44 0c       	add	r4, r4
     83a:	55 1c       	adc	r5, r5
     83c:	66 1c       	adc	r6, r6
     83e:	77 1c       	adc	r7, r7
     840:	8a 95       	dec	r24
     842:	d2 f7       	brpl	.-12     	; 0x838 <usart_set_baudrate+0x12a>
     844:	d5 01       	movw	r26, r10
     846:	c4 01       	movw	r24, r8
     848:	b6 95       	lsr	r27
     84a:	a7 95       	ror	r26
     84c:	97 95       	ror	r25
     84e:	87 95       	ror	r24
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	64 0d       	add	r22, r4
     856:	75 1d       	adc	r23, r5
     858:	86 1d       	adc	r24, r6
     85a:	97 1d       	adc	r25, r7
     85c:	a5 01       	movw	r20, r10
     85e:	94 01       	movw	r18, r8
     860:	0e 94 0f 10 	call	0x201e	; 0x201e <__udivmodsi4>
     864:	37 c0       	rjmp	.+110    	; 0x8d4 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	8c 0f       	add	r24, r28
     86a:	a5 01       	movw	r20, r10
     86c:	94 01       	movw	r18, r8
     86e:	04 c0       	rjmp	.+8      	; 0x878 <usart_set_baudrate+0x16a>
     870:	22 0f       	add	r18, r18
     872:	33 1f       	adc	r19, r19
     874:	44 1f       	adc	r20, r20
     876:	55 1f       	adc	r21, r21
     878:	8a 95       	dec	r24
     87a:	d2 f7       	brpl	.-12     	; 0x870 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     87c:	da 01       	movw	r26, r20
     87e:	c9 01       	movw	r24, r18
     880:	b6 95       	lsr	r27
     882:	a7 95       	ror	r26
     884:	97 95       	ror	r25
     886:	87 95       	ror	r24
     888:	bc 01       	movw	r22, r24
     88a:	cd 01       	movw	r24, r26
     88c:	64 0d       	add	r22, r4
     88e:	75 1d       	adc	r23, r5
     890:	86 1d       	adc	r24, r6
     892:	97 1d       	adc	r25, r7
     894:	0e 94 0f 10 	call	0x201e	; 0x201e <__udivmodsi4>
     898:	1d c0       	rjmp	.+58     	; 0x8d4 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	8c 0f       	add	r24, r28
     89e:	a5 01       	movw	r20, r10
     8a0:	94 01       	movw	r18, r8
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <usart_set_baudrate+0x19e>
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	44 1f       	adc	r20, r20
     8aa:	55 1f       	adc	r21, r21
     8ac:	8a 95       	dec	r24
     8ae:	d2 f7       	brpl	.-12     	; 0x8a4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8b0:	da 01       	movw	r26, r20
     8b2:	c9 01       	movw	r24, r18
     8b4:	b6 95       	lsr	r27
     8b6:	a7 95       	ror	r26
     8b8:	97 95       	ror	r25
     8ba:	87 95       	ror	r24
     8bc:	bc 01       	movw	r22, r24
     8be:	cd 01       	movw	r24, r26
     8c0:	64 0d       	add	r22, r4
     8c2:	75 1d       	adc	r23, r5
     8c4:	86 1d       	adc	r24, r6
     8c6:	97 1d       	adc	r25, r7
     8c8:	0e 94 0f 10 	call	0x201e	; 0x201e <__udivmodsi4>
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	31 09       	sbc	r19, r1
     8d0:	41 09       	sbc	r20, r1
     8d2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8d4:	83 2f       	mov	r24, r19
     8d6:	8f 70       	andi	r24, 0x0F	; 15
     8d8:	c2 95       	swap	r28
     8da:	c0 7f       	andi	r28, 0xF0	; 240
     8dc:	c8 2b       	or	r28, r24
     8de:	f7 01       	movw	r30, r14
     8e0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8e2:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	18 c0       	rjmp	.+48     	; 0x918 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	16 c0       	rjmp	.+44     	; 0x918 <usart_set_baudrate+0x20a>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	14 c0       	rjmp	.+40     	; 0x918 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8f0:	d5 01       	movw	r26, r10
     8f2:	c4 01       	movw	r24, r8
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	aa 1f       	adc	r26, r26
     8fa:	bb 1f       	adc	r27, r27
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	aa 1f       	adc	r26, r26
     902:	bb 1f       	adc	r27, r27
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	aa 1f       	adc	r26, r26
     90a:	bb 1f       	adc	r27, r27
     90c:	48 1a       	sub	r4, r24
     90e:	59 0a       	sbc	r5, r25
     910:	6a 0a       	sbc	r6, r26
     912:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     914:	c9 ef       	ldi	r28, 0xF9	; 249
     916:	89 cf       	rjmp	.-238    	; 0x82a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	9f 90       	pop	r9
     928:	8f 90       	pop	r8
     92a:	7f 90       	pop	r7
     92c:	6f 90       	pop	r6
     92e:	5f 90       	pop	r5
     930:	4f 90       	pop	r4
     932:	08 95       	ret

00000934 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	09 f4       	brne	.+2      	; 0x946 <usart_init_rs232+0x12>
     944:	36 c1       	rjmp	.+620    	; 0xbb2 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     946:	80 3c       	cpi	r24, 0xC0	; 192
     948:	91 05       	cpc	r25, r1
     94a:	21 f4       	brne	.+8      	; 0x954 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     94c:	60 e1       	ldi	r22, 0x10	; 16
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	7c d3       	rcall	.+1784   	; 0x104a <sysclk_enable_module>
     952:	2f c1       	rjmp	.+606    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     954:	c0 34       	cpi	r28, 0x40	; 64
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	d8 07       	cpc	r29, r24
     95a:	21 f4       	brne	.+8      	; 0x964 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     95c:	68 e0       	ldi	r22, 0x08	; 8
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	74 d3       	rcall	.+1768   	; 0x104a <sysclk_enable_module>
     962:	27 c1       	rjmp	.+590    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     964:	c1 15       	cp	r28, r1
     966:	e4 e0       	ldi	r30, 0x04	; 4
     968:	de 07       	cpc	r29, r30
     96a:	21 f4       	brne	.+8      	; 0x974 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     96c:	64 e0       	ldi	r22, 0x04	; 4
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	6c d3       	rcall	.+1752   	; 0x104a <sysclk_enable_module>
     972:	1f c1       	rjmp	.+574    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     974:	c0 38       	cpi	r28, 0x80	; 128
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     97a:	21 f4       	brne	.+8      	; 0x984 <usart_init_rs232+0x50>
     97c:	62 e0       	ldi	r22, 0x02	; 2
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	64 d3       	rcall	.+1736   	; 0x104a <sysclk_enable_module>
     982:	17 c1       	rjmp	.+558    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     984:	c1 15       	cp	r28, r1
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     98a:	21 f4       	brne	.+8      	; 0x994 <usart_init_rs232+0x60>
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	5c d3       	rcall	.+1720   	; 0x104a <sysclk_enable_module>
     992:	0f c1       	rjmp	.+542    	; 0xbb2 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     994:	c0 38       	cpi	r28, 0x80	; 128
     996:	e3 e0       	ldi	r30, 0x03	; 3
     998:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     99a:	21 f4       	brne	.+8      	; 0x9a4 <usart_init_rs232+0x70>
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	54 d3       	rcall	.+1704   	; 0x104a <sysclk_enable_module>
     9a2:	07 c1       	rjmp	.+526    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     9a4:	c0 39       	cpi	r28, 0x90	; 144
     9a6:	f3 e0       	ldi	r31, 0x03	; 3
     9a8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <usart_init_rs232+0x80>
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	4c d3       	rcall	.+1688   	; 0x104a <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9b2:	ff c0       	rjmp	.+510    	; 0xbb2 <usart_init_rs232+0x27e>
     9b4:	c1 15       	cp	r28, r1
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9ba:	21 f4       	brne	.+8      	; 0x9c4 <usart_init_rs232+0x90>
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	44 d3       	rcall	.+1672   	; 0x104a <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     9c2:	f7 c0       	rjmp	.+494    	; 0xbb2 <usart_init_rs232+0x27e>
     9c4:	c0 34       	cpi	r28, 0x40	; 64
     9c6:	e2 e0       	ldi	r30, 0x02	; 2
     9c8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <usart_init_rs232+0xa0>
     9cc:	62 e0       	ldi	r22, 0x02	; 2
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	3c d3       	rcall	.+1656   	; 0x104a <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9d2:	ef c0       	rjmp	.+478    	; 0xbb2 <usart_init_rs232+0x27e>
     9d4:	c1 15       	cp	r28, r1
     9d6:	f3 e0       	ldi	r31, 0x03	; 3
     9d8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9da:	21 f4       	brne	.+8      	; 0x9e4 <usart_init_rs232+0xb0>
     9dc:	64 e0       	ldi	r22, 0x04	; 4
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	34 d3       	rcall	.+1640   	; 0x104a <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9e2:	e7 c0       	rjmp	.+462    	; 0xbb2 <usart_init_rs232+0x27e>
     9e4:	c0 32       	cpi	r28, 0x20	; 32
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <usart_init_rs232+0xc0>
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	2c d3       	rcall	.+1624   	; 0x104a <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9f2:	df c0       	rjmp	.+446    	; 0xbb2 <usart_init_rs232+0x27e>
     9f4:	c1 15       	cp	r28, r1
     9f6:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9f8:	de 07       	cpc	r29, r30
     9fa:	21 f4       	brne	.+8      	; 0xa04 <usart_init_rs232+0xd0>
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	24 d3       	rcall	.+1608   	; 0x104a <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a02:	d7 c0       	rjmp	.+430    	; 0xbb2 <usart_init_rs232+0x27e>
     a04:	c1 15       	cp	r28, r1
     a06:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a08:	df 07       	cpc	r29, r31
     a0a:	21 f4       	brne	.+8      	; 0xa14 <usart_init_rs232+0xe0>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	1c d3       	rcall	.+1592   	; 0x104a <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     a12:	cf c0       	rjmp	.+414    	; 0xbb2 <usart_init_rs232+0x27e>
     a14:	c1 15       	cp	r28, r1
     a16:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a18:	d8 07       	cpc	r29, r24
     a1a:	21 f4       	brne	.+8      	; 0xa24 <usart_init_rs232+0xf0>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	14 d3       	rcall	.+1576   	; 0x104a <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     a22:	c7 c0       	rjmp	.+398    	; 0xbb2 <usart_init_rs232+0x27e>
     a24:	c1 15       	cp	r28, r1
     a26:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     a28:	de 07       	cpc	r29, r30
     a2a:	21 f4       	brne	.+8      	; 0xa34 <usart_init_rs232+0x100>
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a30:	0c d3       	rcall	.+1560   	; 0x104a <sysclk_enable_module>
     a32:	bf c0       	rjmp	.+382    	; 0xbb2 <usart_init_rs232+0x27e>
     a34:	c0 34       	cpi	r28, 0x40	; 64
     a36:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a38:	df 07       	cpc	r29, r31
     a3a:	21 f4       	brne	.+8      	; 0xa44 <usart_init_rs232+0x110>
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a40:	04 d3       	rcall	.+1544   	; 0x104a <sysclk_enable_module>
     a42:	b7 c0       	rjmp	.+366    	; 0xbb2 <usart_init_rs232+0x27e>
     a44:	c0 34       	cpi	r28, 0x40	; 64
     a46:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a48:	d8 07       	cpc	r29, r24
     a4a:	21 f4       	brne	.+8      	; 0xa54 <usart_init_rs232+0x120>
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a50:	fc d2       	rcall	.+1528   	; 0x104a <sysclk_enable_module>
     a52:	af c0       	rjmp	.+350    	; 0xbb2 <usart_init_rs232+0x27e>
     a54:	c0 34       	cpi	r28, 0x40	; 64
     a56:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a58:	de 07       	cpc	r29, r30
     a5a:	21 f4       	brne	.+8      	; 0xa64 <usart_init_rs232+0x130>
     a5c:	62 e0       	ldi	r22, 0x02	; 2
     a5e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a60:	f4 d2       	rcall	.+1512   	; 0x104a <sysclk_enable_module>
     a62:	a7 c0       	rjmp	.+334    	; 0xbb2 <usart_init_rs232+0x27e>
     a64:	c0 34       	cpi	r28, 0x40	; 64
     a66:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a68:	df 07       	cpc	r29, r31
     a6a:	21 f4       	brne	.+8      	; 0xa74 <usart_init_rs232+0x140>
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a70:	ec d2       	rcall	.+1496   	; 0x104a <sysclk_enable_module>
     a72:	9f c0       	rjmp	.+318    	; 0xbb2 <usart_init_rs232+0x27e>
     a74:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	d8 07       	cpc	r29, r24
     a7a:	21 f4       	brne	.+8      	; 0xa84 <usart_init_rs232+0x150>
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a80:	e4 d2       	rcall	.+1480   	; 0x104a <sysclk_enable_module>
     a82:	97 c0       	rjmp	.+302    	; 0xbb2 <usart_init_rs232+0x27e>
     a84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a86:	e9 e0       	ldi	r30, 0x09	; 9
     a88:	de 07       	cpc	r29, r30
     a8a:	21 f4       	brne	.+8      	; 0xa94 <usart_init_rs232+0x160>
     a8c:	64 e0       	ldi	r22, 0x04	; 4
     a8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a90:	dc d2       	rcall	.+1464   	; 0x104a <sysclk_enable_module>
     a92:	8f c0       	rjmp	.+286    	; 0xbb2 <usart_init_rs232+0x27e>
     a94:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a96:	fa e0       	ldi	r31, 0x0A	; 10
     a98:	df 07       	cpc	r29, r31
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <usart_init_rs232+0x170>
     a9c:	64 e0       	ldi	r22, 0x04	; 4
     a9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     aa0:	d4 d2       	rcall	.+1448   	; 0x104a <sysclk_enable_module>
     aa2:	87 c0       	rjmp	.+270    	; 0xbb2 <usart_init_rs232+0x27e>
     aa4:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     aa6:	8b e0       	ldi	r24, 0x0B	; 11
     aa8:	d8 07       	cpc	r29, r24
     aaa:	21 f4       	brne	.+8      	; 0xab4 <usart_init_rs232+0x180>
     aac:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     aae:	86 e0       	ldi	r24, 0x06	; 6
     ab0:	cc d2       	rcall	.+1432   	; 0x104a <sysclk_enable_module>
     ab2:	7f c0       	rjmp	.+254    	; 0xbb2 <usart_init_rs232+0x27e>
     ab4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     ab6:	e8 e0       	ldi	r30, 0x08	; 8
     ab8:	de 07       	cpc	r29, r30
     aba:	21 f4       	brne	.+8      	; 0xac4 <usart_init_rs232+0x190>
     abc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	c4 d2       	rcall	.+1416   	; 0x104a <sysclk_enable_module>
     ac2:	77 c0       	rjmp	.+238    	; 0xbb2 <usart_init_rs232+0x27e>
     ac4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ac6:	f9 e0       	ldi	r31, 0x09	; 9
     ac8:	df 07       	cpc	r29, r31
     aca:	21 f4       	brne	.+8      	; 0xad4 <usart_init_rs232+0x1a0>
     acc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     ace:	84 e0       	ldi	r24, 0x04	; 4
     ad0:	bc d2       	rcall	.+1400   	; 0x104a <sysclk_enable_module>
     ad2:	6f c0       	rjmp	.+222    	; 0xbb2 <usart_init_rs232+0x27e>
     ad4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	d8 07       	cpc	r29, r24
     ada:	21 f4       	brne	.+8      	; 0xae4 <usart_init_rs232+0x1b0>
     adc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     ade:	85 e0       	ldi	r24, 0x05	; 5
     ae0:	b4 d2       	rcall	.+1384   	; 0x104a <sysclk_enable_module>
     ae2:	67 c0       	rjmp	.+206    	; 0xbb2 <usart_init_rs232+0x27e>
     ae4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     ae6:	eb e0       	ldi	r30, 0x0B	; 11
     ae8:	de 07       	cpc	r29, r30
     aea:	21 f4       	brne	.+8      	; 0xaf4 <usart_init_rs232+0x1c0>
     aec:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	ac d2       	rcall	.+1368   	; 0x104a <sysclk_enable_module>
     af2:	5f c0       	rjmp	.+190    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     af4:	c0 3a       	cpi	r28, 0xA0	; 160
     af6:	f8 e0       	ldi	r31, 0x08	; 8
     af8:	df 07       	cpc	r29, r31
     afa:	21 f4       	brne	.+8      	; 0xb04 <usart_init_rs232+0x1d0>
     afc:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	a4 d2       	rcall	.+1352   	; 0x104a <sysclk_enable_module>
     b02:	57 c0       	rjmp	.+174    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     b04:	c0 3a       	cpi	r28, 0xA0	; 160
     b06:	89 e0       	ldi	r24, 0x09	; 9
     b08:	d8 07       	cpc	r29, r24
     b0a:	21 f4       	brne	.+8      	; 0xb14 <usart_init_rs232+0x1e0>
     b0c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	9c d2       	rcall	.+1336   	; 0x104a <sysclk_enable_module>
     b12:	4f c0       	rjmp	.+158    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b14:	c0 3a       	cpi	r28, 0xA0	; 160
     b16:	ea e0       	ldi	r30, 0x0A	; 10
     b18:	de 07       	cpc	r29, r30
     b1a:	21 f4       	brne	.+8      	; 0xb24 <usart_init_rs232+0x1f0>
     b1c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     b1e:	85 e0       	ldi	r24, 0x05	; 5
     b20:	94 d2       	rcall	.+1320   	; 0x104a <sysclk_enable_module>
     b22:	47 c0       	rjmp	.+142    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     b24:	c0 3a       	cpi	r28, 0xA0	; 160
     b26:	fb e0       	ldi	r31, 0x0B	; 11
     b28:	df 07       	cpc	r29, r31
     b2a:	21 f4       	brne	.+8      	; 0xb34 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b2c:	60 e1       	ldi	r22, 0x10	; 16
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	8c d2       	rcall	.+1304   	; 0x104a <sysclk_enable_module>
     b32:	3f c0       	rjmp	.+126    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b34:	c0 3b       	cpi	r28, 0xB0	; 176
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	d8 07       	cpc	r29, r24
     b3a:	21 f4       	brne	.+8      	; 0xb44 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b3c:	60 e2       	ldi	r22, 0x20	; 32
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	84 d2       	rcall	.+1288   	; 0x104a <sysclk_enable_module>
     b42:	37 c0       	rjmp	.+110    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b44:	c0 3b       	cpi	r28, 0xB0	; 176
     b46:	e9 e0       	ldi	r30, 0x09	; 9
     b48:	de 07       	cpc	r29, r30
     b4a:	21 f4       	brne	.+8      	; 0xb54 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b4c:	60 e2       	ldi	r22, 0x20	; 32
     b4e:	84 e0       	ldi	r24, 0x04	; 4
     b50:	7c d2       	rcall	.+1272   	; 0x104a <sysclk_enable_module>
     b52:	2f c0       	rjmp	.+94     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b54:	c0 3b       	cpi	r28, 0xB0	; 176
     b56:	fa e0       	ldi	r31, 0x0A	; 10
     b58:	df 07       	cpc	r29, r31
     b5a:	21 f4       	brne	.+8      	; 0xb64 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b5c:	60 e2       	ldi	r22, 0x20	; 32
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	74 d2       	rcall	.+1256   	; 0x104a <sysclk_enable_module>
     b62:	27 c0       	rjmp	.+78     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b64:	c0 3b       	cpi	r28, 0xB0	; 176
     b66:	8b e0       	ldi	r24, 0x0B	; 11
     b68:	d8 07       	cpc	r29, r24
     b6a:	21 f4       	brne	.+8      	; 0xb74 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b6c:	60 e2       	ldi	r22, 0x20	; 32
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	6c d2       	rcall	.+1240   	; 0x104a <sysclk_enable_module>
     b72:	1f c0       	rjmp	.+62     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b74:	c0 38       	cpi	r28, 0x80	; 128
     b76:	e4 e0       	ldi	r30, 0x04	; 4
     b78:	de 07       	cpc	r29, r30
     b7a:	21 f4       	brne	.+8      	; 0xb84 <usart_init_rs232+0x250>
     b7c:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	64 d2       	rcall	.+1224   	; 0x104a <sysclk_enable_module>
     b82:	17 c0       	rjmp	.+46     	; 0xbb2 <usart_init_rs232+0x27e>
     b84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b86:	f4 e0       	ldi	r31, 0x04	; 4
     b88:	df 07       	cpc	r29, r31
     b8a:	21 f4       	brne	.+8      	; 0xb94 <usart_init_rs232+0x260>
     b8c:	60 e4       	ldi	r22, 0x40	; 64
     b8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b90:	5c d2       	rcall	.+1208   	; 0x104a <sysclk_enable_module>
     b92:	0f c0       	rjmp	.+30     	; 0xbb2 <usart_init_rs232+0x27e>
     b94:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	d8 07       	cpc	r29, r24
     b9a:	21 f4       	brne	.+8      	; 0xba4 <usart_init_rs232+0x270>
     b9c:	60 e4       	ldi	r22, 0x40	; 64
     b9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     ba0:	54 d2       	rcall	.+1192   	; 0x104a <sysclk_enable_module>
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <usart_init_rs232+0x27e>
     ba4:	c0 3b       	cpi	r28, 0xB0	; 176
     ba6:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     ba8:	de 07       	cpc	r29, r30
     baa:	19 f4       	brne	.+6      	; 0xbb2 <usart_init_rs232+0x27e>
     bac:	60 e4       	ldi	r22, 0x40	; 64
     bae:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     bb0:	4c d2       	rcall	.+1176   	; 0x104a <sysclk_enable_module>
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     bb6:	8d 83       	std	Y+5, r24	; 0x05
     bb8:	f8 01       	movw	r30, r16
     bba:	95 81       	ldd	r25, Z+5	; 0x05
     bbc:	84 81       	ldd	r24, Z+4	; 0x04
     bbe:	89 2b       	or	r24, r25
     bc0:	96 81       	ldd	r25, Z+6	; 0x06
     bc2:	91 11       	cpse	r25, r1
     bc4:	98 e0       	ldi	r25, 0x08	; 8
     bc6:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     bc8:	8d 83       	std	Y+5, r24	; 0x05
     bca:	f8 01       	movw	r30, r16
     bcc:	40 81       	ld	r20, Z
     bce:	51 81       	ldd	r21, Z+1	; 0x01
     bd0:	62 81       	ldd	r22, Z+2	; 0x02
     bd2:	73 81       	ldd	r23, Z+3	; 0x03
     bd4:	00 e0       	ldi	r16, 0x00	; 0
     bd6:	18 e4       	ldi	r17, 0x48	; 72
     bd8:	28 ee       	ldi	r18, 0xE8	; 232
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	ce 01       	movw	r24, r28
     bde:	97 dd       	rcall	.-1234   	; 0x70e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	98 60       	ori	r25, 0x08	; 8
     be4:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	90 61       	ori	r25, 0x10	; 16
     bea:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     bf8:	61 50       	subi	r22, 0x01	; 1
     bfa:	71 09       	sbc	r23, r1
     bfc:	81 09       	sbc	r24, r1
     bfe:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     c00:	61 15       	cp	r22, r1
     c02:	71 05       	cpc	r23, r1
     c04:	81 05       	cpc	r24, r1
     c06:	91 05       	cpc	r25, r1
     c08:	b9 f7       	brne	.-18     	; 0xbf8 <__portable_avr_delay_cycles+0x2>
     c0a:	08 95       	ret

00000c0c <flip_ms5607>:
	rx_data |= spi_read();
	flip_ms5607();
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     c0c:	e0 e4       	ldi	r30, 0x40	; 64
     c0e:	f6 e0       	ldi	r31, 0x06	; 6
     c10:	94 81       	ldd	r25, Z+4	; 0x04
     c12:	80 e1       	ldi	r24, 0x10	; 16
     c14:	89 27       	eor	r24, r25
     c16:	84 83       	std	Z+4, r24	; 0x04
     c18:	08 95       	ret

00000c1a <ms5607_init>:
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	// Resets the ms5607
	flip_ms5607();
     c1a:	f8 df       	rcall	.-16     	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     c1c:	8e e1       	ldi	r24, 0x1E	; 30
     c1e:	78 d0       	rcall	.+240    	; 0xd10 <spi_write>
	delay_ms(3);
     c20:	60 e8       	ldi	r22, 0x80	; 128
     c22:	7e e3       	ldi	r23, 0x3E	; 62
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     c28:	e6 df       	rcall	.-52     	; 0xbf6 <__portable_avr_delay_cycles>
     c2a:	f0 df       	rcall	.-32     	; 0xc0c <flip_ms5607>
	delay_ms(2);
     c2c:	6b ea       	ldi	r22, 0xAB	; 171
     c2e:	79 e2       	ldi	r23, 0x29	; 41
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	e0 cf       	rjmp	.-64     	; 0xbf6 <__portable_avr_delay_cycles>
     c36:	08 95       	ret

00000c38 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     c3e:	e6 df       	rcall	.-52     	; 0xc0c <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     c40:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     c42:	66 d0       	rcall	.+204    	; 0xd10 <spi_write>
     c44:	5a d0       	rcall	.+180    	; 0xcfa <spi_read>
     c46:	c8 2f       	mov	r28, r24
     c48:	d0 e0       	ldi	r29, 0x00	; 0
     c4a:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     c4c:	cc 27       	eor	r28, r28
     c4e:	55 d0       	rcall	.+170    	; 0xcfa <spi_read>
     c50:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     c52:	dc df       	rcall	.-72     	; 0xc0c <flip_ms5607>
     c54:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <ms5607_convert_d1>:
     c5c:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     c64:	d3 df       	rcall	.-90     	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     c66:	88 e4       	ldi	r24, 0x48	; 72
     c68:	53 d0       	rcall	.+166    	; 0xd10 <spi_write>
	delay_ms(10);
     c6a:	66 e5       	ldi	r22, 0x56	; 86
     c6c:	70 ed       	ldi	r23, 0xD0	; 208
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     c72:	c1 df       	rcall	.-126    	; 0xbf6 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     c74:	cb df       	rcall	.-106    	; 0xc0c <flip_ms5607>
     c76:	ca df       	rcall	.-108    	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	4a d0       	rcall	.+148    	; 0xd10 <spi_write>
     c7c:	3e d0       	rcall	.+124    	; 0xcfa <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     c7e:	c8 2e       	mov	r12, r24
     c80:	d1 2c       	mov	r13, r1
     c82:	e1 2c       	mov	r14, r1
     c84:	f1 2c       	mov	r15, r1
     c86:	76 01       	movw	r14, r12
     c88:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     c8a:	cc 24       	eor	r12, r12
     c8c:	36 d0       	rcall	.+108    	; 0xcfa <spi_read>
     c8e:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     c90:	34 d0       	rcall	.+104    	; 0xcfa <spi_read>
     c92:	c8 2a       	or	r12, r24
     c94:	bb df       	rcall	.-138    	; 0xc0c <flip_ms5607>
	flip_ms5607();
     c96:	c7 01       	movw	r24, r14
     c98:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	08 95       	ret

00000ca4 <ms5607_convert_d2>:
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     cac:	af df       	rcall	.-162    	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     cae:	88 e5       	ldi	r24, 0x58	; 88
     cb0:	2f d0       	rcall	.+94     	; 0xd10 <spi_write>
	delay_ms(10);
     cb2:	66 e5       	ldi	r22, 0x56	; 86
     cb4:	70 ed       	ldi	r23, 0xD0	; 208
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     cba:	9d df       	rcall	.-198    	; 0xbf6 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     cbc:	a7 df       	rcall	.-178    	; 0xc0c <flip_ms5607>
     cbe:	a6 df       	rcall	.-180    	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	26 d0       	rcall	.+76     	; 0xd10 <spi_write>
     cc4:	1a d0       	rcall	.+52     	; 0xcfa <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     cc6:	c8 2e       	mov	r12, r24
     cc8:	d1 2c       	mov	r13, r1
     cca:	e1 2c       	mov	r14, r1
     ccc:	f1 2c       	mov	r15, r1
     cce:	76 01       	movw	r14, r12
     cd0:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     cd2:	cc 24       	eor	r12, r12
     cd4:	12 d0       	rcall	.+36     	; 0xcfa <spi_read>
     cd6:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     cd8:	10 d0       	rcall	.+32     	; 0xcfa <spi_read>
     cda:	c8 2a       	or	r12, r24
     cdc:	97 df       	rcall	.-210    	; 0xc0c <flip_ms5607>
	flip_ms5607();
     cde:	c7 01       	movw	r24, r14
     ce0:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	08 95       	ret

00000cec <spi_init>:
     cec:	68 e0       	ldi	r22, 0x08	; 8
     cee:	83 e0       	ldi	r24, 0x03	; 3
	SPIC.CTRL = 0x51; //enables SPI and puts a  prescaler of 16
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     cf0:	ac d1       	rcall	.+856    	; 0x104a <sysclk_enable_module>
     cf2:	81 e5       	ldi	r24, 0x51	; 81
     cf4:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     cf8:	08 95       	ret

00000cfa <spi_read>:
}

uint8_t spi_read(void)
{
	SPIC.DATA = 0xFF; // make the DATA register something we know
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait for the SPI interrupt flag to let us know the transfer is complete
     d00:	e0 ec       	ldi	r30, 0xC0	; 192
     d02:	f8 e0       	ldi	r31, 0x08	; 8
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	88 23       	and	r24, r24
     d08:	ec f7       	brge	.-6      	; 0xd04 <spi_read+0xa>
	
	return SPIC.DATA; // return the data from this function
     d0a:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     d0e:	08 95       	ret

00000d10 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     d10:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     d14:	e0 ec       	ldi	r30, 0xC0	; 192
     d16:	f8 e0       	ldi	r31, 0x08	; 8
     d18:	82 81       	ldd	r24, Z+2	; 0x02
     d1a:	88 23       	and	r24, r24
     d1c:	ec f7       	brge	.-6      	; 0xd18 <spi_write+0x8>
     d1e:	08 95       	ret

00000d20 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     d26:	ed dc       	rcall	.-1574   	; 0x702 <usart_getchar>
     d28:	88 83       	st	Y, r24
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     d30:	e0 cc       	rjmp	.-1600   	; 0x6f2 <usart_putchar>
}
     d32:	08 95       	ret

00000d34 <data_terminal_init>:

#include <asf.h>
#include "uart.h"

void data_terminal_init()
{
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	27 97       	sbiw	r28, 0x07	; 7
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     d42:	60 e1       	ldi	r22, 0x10	; 16
     d44:	85 e0       	ldi	r24, 0x05	; 5
     d46:	81 d1       	rcall	.+770    	; 0x104a <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     d48:	e0 e8       	ldi	r30, 0x80	; 128
     d4a:	f6 e0       	ldi	r31, 0x06	; 6
     d4c:	80 81       	ld	r24, Z
     d4e:	88 60       	ori	r24, 0x08	; 8
     d50:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     d52:	80 ea       	ldi	r24, 0xA0	; 160
     d54:	9a e0       	ldi	r25, 0x0A	; 10
     d56:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <stdio_base>
     d5a:	90 93 96 20 	sts	0x2096, r25	; 0x802096 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     d5e:	88 e9       	ldi	r24, 0x98	; 152
     d60:	96 e0       	ldi	r25, 0x06	; 6
     d62:	80 93 93 20 	sts	0x2093, r24	; 0x802093 <ptr_put>
     d66:	90 93 94 20 	sts	0x2094, r25	; 0x802094 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     d6a:	80 e9       	ldi	r24, 0x90	; 144
     d6c:	96 e0       	ldi	r25, 0x06	; 6
     d6e:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <ptr_get>
     d72:	90 93 92 20 	sts	0x2092, r25	; 0x802092 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     d76:	e6 e0       	ldi	r30, 0x06	; 6
     d78:	f0 e2       	ldi	r31, 0x20	; 32
     d7a:	84 81       	ldd	r24, Z+4	; 0x04
     d7c:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     d7e:	85 81       	ldd	r24, Z+5	; 0x05
     d80:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     d82:	86 81       	ldd	r24, Z+6	; 0x06
     d84:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	a2 81       	ldd	r26, Z+2	; 0x02
     d8c:	b3 81       	ldd	r27, Z+3	; 0x03
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	ab 83       	std	Y+3, r26	; 0x03
     d94:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     d96:	60 e1       	ldi	r22, 0x10	; 16
     d98:	85 e0       	ldi	r24, 0x05	; 5
     d9a:	57 d1       	rcall	.+686    	; 0x104a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     d9c:	be 01       	movw	r22, r28
     d9e:	6f 5f       	subi	r22, 0xFF	; 255
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	80 ea       	ldi	r24, 0xA0	; 160
     da4:	9a e0       	ldi	r25, 0x0A	; 10
     da6:	c6 dd       	rcall	.-1140   	; 0x934 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     da8:	66 e6       	ldi	r22, 0x66	; 102
     daa:	71 e0       	ldi	r23, 0x01	; 1
     dac:	8f e7       	ldi	r24, 0x7F	; 127
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 4a 10 	call	0x2094	; 0x2094 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
	
     db4:	27 96       	adiw	r28, 0x07	; 7
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <rbu8_init>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     dc0:	fc 01       	movw	r30, r24
     dc2:	12 82       	std	Z+2, r1	; 0x02
     dc4:	13 82       	std	Z+3, r1	; 0x03
     dc6:	14 82       	std	Z+4, r1	; 0x04
     dc8:	15 82       	std	Z+5, r1	; 0x05
     dca:	66 83       	std	Z+6, r22	; 0x06
     dcc:	77 83       	std	Z+7, r23	; 0x07
     dce:	40 83       	st	Z, r20
     dd0:	51 83       	std	Z+1, r21	; 0x01
     dd2:	08 95       	ret

00000dd4 <rb16_write>:
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	fc 01       	movw	r30, r24
     dda:	41 15       	cp	r20, r1
     ddc:	51 05       	cpc	r21, r1
     dde:	b1 f1       	breq	.+108    	; 0xe4c <rb16_write+0x78>
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	db 01       	movw	r26, r22
     dec:	a8 0f       	add	r26, r24
     dee:	b9 1f       	adc	r27, r25
     df0:	8d 91       	ld	r24, X+
     df2:	9c 91       	ld	r25, X
     df4:	a2 81       	ldd	r26, Z+2	; 0x02
     df6:	b3 81       	ldd	r27, Z+3	; 0x03
     df8:	aa 0f       	add	r26, r26
     dfa:	bb 1f       	adc	r27, r27
     dfc:	c6 81       	ldd	r28, Z+6	; 0x06
     dfe:	d7 81       	ldd	r29, Z+7	; 0x07
     e00:	ac 0f       	add	r26, r28
     e02:	bd 1f       	adc	r27, r29
     e04:	8d 93       	st	X+, r24
     e06:	9c 93       	st	X, r25
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	82 83       	std	Z+2, r24	; 0x02
     e10:	93 83       	std	Z+3, r25	; 0x03
     e12:	a0 81       	ld	r26, Z
     e14:	b1 81       	ldd	r27, Z+1	; 0x01
     e16:	8a 17       	cp	r24, r26
     e18:	9b 07       	cpc	r25, r27
     e1a:	11 f4       	brne	.+4      	; 0xe20 <rb16_write+0x4c>
     e1c:	12 82       	std	Z+2, r1	; 0x02
     e1e:	13 82       	std	Z+3, r1	; 0x03
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	93 81       	ldd	r25, Z+3	; 0x03
     e24:	c4 81       	ldd	r28, Z+4	; 0x04
     e26:	d5 81       	ldd	r29, Z+5	; 0x05
     e28:	8c 17       	cp	r24, r28
     e2a:	9d 07       	cpc	r25, r29
     e2c:	49 f4       	brne	.+18     	; 0xe40 <rb16_write+0x6c>
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	a8 17       	cp	r26, r24
     e32:	b9 07       	cpc	r27, r25
     e34:	19 f0       	breq	.+6      	; 0xe3c <rb16_write+0x68>
     e36:	84 83       	std	Z+4, r24	; 0x04
     e38:	95 83       	std	Z+5, r25	; 0x05
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <rb16_write+0x6c>
     e3c:	14 82       	std	Z+4, r1	; 0x04
     e3e:	15 82       	std	Z+5, r1	; 0x05
     e40:	2f 5f       	subi	r18, 0xFF	; 255
     e42:	82 2f       	mov	r24, r18
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	84 17       	cp	r24, r20
     e48:	95 07       	cpc	r25, r21
     e4a:	68 f2       	brcs	.-102    	; 0xde6 <rb16_write+0x12>
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <rb16_init>:
     e52:	fc 01       	movw	r30, r24
     e54:	12 82       	std	Z+2, r1	; 0x02
     e56:	13 82       	std	Z+3, r1	; 0x03
     e58:	14 82       	std	Z+4, r1	; 0x04
     e5a:	15 82       	std	Z+5, r1	; 0x05
     e5c:	66 83       	std	Z+6, r22	; 0x06
     e5e:	77 83       	std	Z+7, r23	; 0x07
     e60:	40 83       	st	Z, r20
     e62:	51 83       	std	Z+1, r21	; 0x01
     e64:	08 95       	ret

00000e66 <rb16_get_nth>:
     e66:	dc 01       	movw	r26, r24
     e68:	12 96       	adiw	r26, 0x02	; 2
     e6a:	ed 91       	ld	r30, X+
     e6c:	fc 91       	ld	r31, X
     e6e:	13 97       	sbiw	r26, 0x03	; 3
     e70:	cb 01       	movw	r24, r22
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	e8 17       	cp	r30, r24
     e76:	f9 07       	cpc	r31, r25
     e78:	78 f0       	brcs	.+30     	; 0xe98 <rb16_get_nth+0x32>
     e7a:	e1 50       	subi	r30, 0x01	; 1
     e7c:	f0 48       	sbci	r31, 0x80	; 128
     e7e:	e6 1b       	sub	r30, r22
     e80:	f7 0b       	sbc	r31, r23
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	16 96       	adiw	r26, 0x06	; 6
     e88:	8d 91       	ld	r24, X+
     e8a:	9c 91       	ld	r25, X
     e8c:	17 97       	sbiw	r26, 0x07	; 7
     e8e:	e8 0f       	add	r30, r24
     e90:	f9 1f       	adc	r31, r25
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	08 95       	ret
     e98:	2d 91       	ld	r18, X+
     e9a:	3c 91       	ld	r19, X
     e9c:	11 97       	sbiw	r26, 0x01	; 1
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	e1 50       	subi	r30, 0x01	; 1
     ea4:	f0 48       	sbci	r31, 0x80	; 128
     ea6:	e6 1b       	sub	r30, r22
     ea8:	f7 0b       	sbc	r31, r23
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	16 96       	adiw	r26, 0x06	; 6
     eb0:	8d 91       	ld	r24, X+
     eb2:	9c 91       	ld	r25, X
     eb4:	17 97       	sbiw	r26, 0x07	; 7
     eb6:	e8 0f       	add	r30, r24
     eb8:	f9 1f       	adc	r31, r25
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	08 95       	ret

00000ec0 <rb32_write>:
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	fc 01       	movw	r30, r24
     ece:	41 15       	cp	r20, r1
     ed0:	51 05       	cpc	r21, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <rb32_write+0x16>
     ed4:	3f c0       	rjmp	.+126    	; 0xf54 <rb32_write+0x94>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	db 01       	movw	r26, r22
     ee6:	a8 0f       	add	r26, r24
     ee8:	b9 1f       	adc	r27, r25
     eea:	cd 90       	ld	r12, X+
     eec:	dd 90       	ld	r13, X+
     eee:	ed 90       	ld	r14, X+
     ef0:	fc 90       	ld	r15, X
     ef2:	a2 81       	ldd	r26, Z+2	; 0x02
     ef4:	b3 81       	ldd	r27, Z+3	; 0x03
     ef6:	aa 0f       	add	r26, r26
     ef8:	bb 1f       	adc	r27, r27
     efa:	aa 0f       	add	r26, r26
     efc:	bb 1f       	adc	r27, r27
     efe:	86 81       	ldd	r24, Z+6	; 0x06
     f00:	97 81       	ldd	r25, Z+7	; 0x07
     f02:	a8 0f       	add	r26, r24
     f04:	b9 1f       	adc	r27, r25
     f06:	cd 92       	st	X+, r12
     f08:	dd 92       	st	X+, r13
     f0a:	ed 92       	st	X+, r14
     f0c:	fc 92       	st	X, r15
     f0e:	13 97       	sbiw	r26, 0x03	; 3
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	82 83       	std	Z+2, r24	; 0x02
     f18:	93 83       	std	Z+3, r25	; 0x03
     f1a:	a0 81       	ld	r26, Z
     f1c:	b1 81       	ldd	r27, Z+1	; 0x01
     f1e:	8a 17       	cp	r24, r26
     f20:	9b 07       	cpc	r25, r27
     f22:	11 f4       	brne	.+4      	; 0xf28 <rb32_write+0x68>
     f24:	12 82       	std	Z+2, r1	; 0x02
     f26:	13 82       	std	Z+3, r1	; 0x03
     f28:	82 81       	ldd	r24, Z+2	; 0x02
     f2a:	93 81       	ldd	r25, Z+3	; 0x03
     f2c:	c4 81       	ldd	r28, Z+4	; 0x04
     f2e:	d5 81       	ldd	r29, Z+5	; 0x05
     f30:	8c 17       	cp	r24, r28
     f32:	9d 07       	cpc	r25, r29
     f34:	49 f4       	brne	.+18     	; 0xf48 <rb32_write+0x88>
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	a8 17       	cp	r26, r24
     f3a:	b9 07       	cpc	r27, r25
     f3c:	19 f0       	breq	.+6      	; 0xf44 <rb32_write+0x84>
     f3e:	84 83       	std	Z+4, r24	; 0x04
     f40:	95 83       	std	Z+5, r25	; 0x05
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <rb32_write+0x88>
     f44:	14 82       	std	Z+4, r1	; 0x04
     f46:	15 82       	std	Z+5, r1	; 0x05
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	82 2f       	mov	r24, r18
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	84 17       	cp	r24, r20
     f50:	95 07       	cpc	r25, r21
     f52:	20 f2       	brcs	.-120    	; 0xedc <rb32_write+0x1c>
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	08 95       	ret

00000f62 <rb32_init>:
     f62:	fc 01       	movw	r30, r24
     f64:	12 82       	std	Z+2, r1	; 0x02
     f66:	13 82       	std	Z+3, r1	; 0x03
     f68:	14 82       	std	Z+4, r1	; 0x04
     f6a:	15 82       	std	Z+5, r1	; 0x05
     f6c:	66 83       	std	Z+6, r22	; 0x06
     f6e:	77 83       	std	Z+7, r23	; 0x07
     f70:	40 83       	st	Z, r20
     f72:	51 83       	std	Z+1, r21	; 0x01
     f74:	08 95       	ret

00000f76 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     f76:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     f78:	12 96       	adiw	r26, 0x02	; 2
     f7a:	ed 91       	ld	r30, X+
     f7c:	fc 91       	ld	r31, X
     f7e:	13 97       	sbiw	r26, 0x03	; 3
     f80:	cb 01       	movw	r24, r22
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	e8 17       	cp	r30, r24
     f86:	f9 07       	cpc	r31, r25
     f88:	98 f0       	brcs	.+38     	; 0xfb0 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     f8a:	e1 50       	subi	r30, 0x01	; 1
     f8c:	f0 4c       	sbci	r31, 0xC0	; 192
     f8e:	e6 1b       	sub	r30, r22
     f90:	f7 0b       	sbc	r31, r23
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	16 96       	adiw	r26, 0x06	; 6
     f9c:	8d 91       	ld	r24, X+
     f9e:	9c 91       	ld	r25, X
     fa0:	17 97       	sbiw	r26, 0x07	; 7
     fa2:	e8 0f       	add	r30, r24
     fa4:	f9 1f       	adc	r31, r25
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     fb0:	2d 91       	ld	r18, X+
     fb2:	3c 91       	ld	r19, X
     fb4:	11 97       	sbiw	r26, 0x01	; 1
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	e1 50       	subi	r30, 0x01	; 1
     fbc:	f0 4c       	sbci	r31, 0xC0	; 192
     fbe:	e6 1b       	sub	r30, r22
     fc0:	f7 0b       	sbc	r31, r23
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	16 96       	adiw	r26, 0x06	; 6
     fcc:	8d 91       	ld	r24, X+
     fce:	9c 91       	ld	r25, X
     fd0:	17 97       	sbiw	r26, 0x07	; 7
     fd2:	e8 0f       	add	r30, r24
     fd4:	f9 1f       	adc	r31, r25
     fd6:	60 81       	ld	r22, Z
     fd8:	71 81       	ldd	r23, Z+1	; 0x01
     fda:	82 81       	ldd	r24, Z+2	; 0x02
     fdc:	93 81       	ldd	r25, Z+3	; 0x03
}
     fde:	08 95       	ret

00000fe0 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	1f 92       	push	r1
     fe6:	1f 92       	push	r1
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     ff2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     ff6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     ffa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     ffe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1002:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1006:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    100a:	8f b7       	in	r24, 0x3f	; 63
    100c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    100e:	f8 94       	cli
	return flags;
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1012:	e0 e5       	ldi	r30, 0x50	; 80
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    101c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    101e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1020:	81 ff       	sbrs	r24, 1
    1022:	fd cf       	rjmp	.-6      	; 0x101e <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	80 e4       	ldi	r24, 0x40	; 64
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	25 d0       	rcall	.+74     	; 0x1076 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    102c:	8f b7       	in	r24, 0x3f	; 63
    102e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1030:	f8 94       	cli
	return flags;
    1032:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1034:	e0 e5       	ldi	r30, 0x50	; 80
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8e 7f       	andi	r24, 0xFE	; 254
    103c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    103e:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	1f 92       	push	r1
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1054:	9f b7       	in	r25, 0x3f	; 63
    1056:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1058:	f8 94       	cli
	return flags;
    105a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    105c:	e8 2f       	mov	r30, r24
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	e0 59       	subi	r30, 0x90	; 144
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	60 95       	com	r22
    1066:	80 81       	ld	r24, Z
    1068:	68 23       	and	r22, r24
    106a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    106c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    106e:	0f 90       	pop	r0
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1076:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1078:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    107a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    107c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    107e:	60 83       	st	Z, r22
	ret                             // Return to caller
    1080:	08 95       	ret

00001082 <__portable_avr_delay_cycles>:
	TCD0.CCA = (uint16_t) ((TCD0.PER) * (servo_on_time_us / 1000.0)); // makes the waveform be created for a duty cycle
}

void servo_timer_alt(void){
	TCD0.CCA = (uint16_t) ((TCD0.PER) * (servo_on_time_us / 1000.0)); // makes the waveform be created for a duty cycle
}
    1082:	04 c0       	rjmp	.+8      	; 0x108c <__portable_avr_delay_cycles+0xa>
    1084:	61 50       	subi	r22, 0x01	; 1
    1086:	71 09       	sbc	r23, r1
    1088:	81 09       	sbc	r24, r1
    108a:	91 09       	sbc	r25, r1
    108c:	61 15       	cp	r22, r1
    108e:	71 05       	cpc	r23, r1
    1090:	81 05       	cpc	r24, r1
    1092:	91 05       	cpc	r25, r1
    1094:	b9 f7       	brne	.-18     	; 0x1084 <__portable_avr_delay_cycles+0x2>
    1096:	08 95       	ret

00001098 <pressure_init>:
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	be dd       	rcall	.-1156   	; 0xc1a <ms5607_init>
    109e:	82 ea       	ldi	r24, 0xA2	; 162
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	ca dd       	rcall	.-1132   	; 0xc38 <ms5607_read>
    10a4:	c0 e8       	ldi	r28, 0x80	; 128
    10a6:	d0 e2       	ldi	r29, 0x20	; 32
    10a8:	88 83       	st	Y, r24
    10aa:	99 83       	std	Y+1, r25	; 0x01
    10ac:	84 ea       	ldi	r24, 0xA4	; 164
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	c3 dd       	rcall	.-1146   	; 0xc38 <ms5607_read>
    10b2:	8a 83       	std	Y+2, r24	; 0x02
    10b4:	9b 83       	std	Y+3, r25	; 0x03
    10b6:	86 ea       	ldi	r24, 0xA6	; 166
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	be dd       	rcall	.-1156   	; 0xc38 <ms5607_read>
    10bc:	8c 83       	std	Y+4, r24	; 0x04
    10be:	9d 83       	std	Y+5, r25	; 0x05
    10c0:	88 ea       	ldi	r24, 0xA8	; 168
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	b9 dd       	rcall	.-1166   	; 0xc38 <ms5607_read>
    10c6:	8e 83       	std	Y+6, r24	; 0x06
    10c8:	9f 83       	std	Y+7, r25	; 0x07
    10ca:	8a ea       	ldi	r24, 0xAA	; 170
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	b4 dd       	rcall	.-1176   	; 0xc38 <ms5607_read>
    10d0:	88 87       	std	Y+8, r24	; 0x08
    10d2:	99 87       	std	Y+9, r25	; 0x09
    10d4:	8c ea       	ldi	r24, 0xAC	; 172
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	af dd       	rcall	.-1186   	; 0xc38 <ms5607_read>
    10da:	8a 87       	std	Y+10, r24	; 0x0a
    10dc:	9b 87       	std	Y+11, r25	; 0x0b
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <get_pressure>:
    10e4:	4f 92       	push	r4
    10e6:	5f 92       	push	r5
    10e8:	6f 92       	push	r6
    10ea:	7f 92       	push	r7
    10ec:	8f 92       	push	r8
    10ee:	9f 92       	push	r9
    10f0:	af 92       	push	r10
    10f2:	bf 92       	push	r11
    10f4:	cf 92       	push	r12
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	ad dd       	rcall	.-1190   	; 0xc5c <ms5607_convert_d1>
    1102:	6b 01       	movw	r12, r22
    1104:	7c 01       	movw	r14, r24
    1106:	ce dd       	rcall	.-1124   	; 0xca4 <ms5607_convert_d2>
    1108:	fd d4       	rcall	.+2554   	; 0x1b04 <__floatunsisf>
    110a:	4b 01       	movw	r8, r22
    110c:	5c 01       	movw	r10, r24
    110e:	c0 e8       	ldi	r28, 0x80	; 128
    1110:	d0 e2       	ldi	r29, 0x20	; 32
    1112:	68 85       	ldd	r22, Y+8	; 0x08
    1114:	79 85       	ldd	r23, Y+9	; 0x09
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	f4 d4       	rcall	.+2536   	; 0x1b04 <__floatunsisf>
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e8       	ldi	r20, 0x80	; 128
    1122:	53 e4       	ldi	r21, 0x43	; 67
    1124:	a5 d5       	rcall	.+2890   	; 0x1c70 <__mulsf3>
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	c5 01       	movw	r24, r10
    112c:	b4 01       	movw	r22, r8
    112e:	e8 d3       	rcall	.+2000   	; 0x1900 <__subsf3>
    1130:	4b 01       	movw	r8, r22
    1132:	5c 01       	movw	r10, r24
    1134:	6c 81       	ldd	r22, Y+4	; 0x04
    1136:	7d 81       	ldd	r23, Y+5	; 0x05
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	e3 d4       	rcall	.+2502   	; 0x1b04 <__floatunsisf>
    113e:	a5 01       	movw	r20, r10
    1140:	94 01       	movw	r18, r8
    1142:	96 d5       	rcall	.+2860   	; 0x1c70 <__mulsf3>
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	5c e3       	ldi	r21, 0x3C	; 60
    114c:	91 d5       	rcall	.+2850   	; 0x1c70 <__mulsf3>
    114e:	2b 01       	movw	r4, r22
    1150:	3c 01       	movw	r6, r24
    1152:	68 81       	ld	r22, Y
    1154:	79 81       	ldd	r23, Y+1	; 0x01
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	d4 d4       	rcall	.+2472   	; 0x1b04 <__floatunsisf>
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e8       	ldi	r20, 0x80	; 128
    1162:	57 e4       	ldi	r21, 0x47	; 71
    1164:	85 d5       	rcall	.+2826   	; 0x1c70 <__mulsf3>
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	c3 01       	movw	r24, r6
    116c:	b2 01       	movw	r22, r4
    116e:	c9 d3       	rcall	.+1938   	; 0x1902 <__addsf3>
    1170:	2b 01       	movw	r4, r22
    1172:	3c 01       	movw	r6, r24
    1174:	c7 01       	movw	r24, r14
    1176:	b6 01       	movw	r22, r12
    1178:	c5 d4       	rcall	.+2442   	; 0x1b04 <__floatunsisf>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	c3 01       	movw	r24, r6
    1180:	b2 01       	movw	r22, r4
    1182:	76 d5       	rcall	.+2796   	; 0x1c70 <__mulsf3>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	55 e3       	ldi	r21, 0x35	; 53
    118c:	71 d5       	rcall	.+2786   	; 0x1c70 <__mulsf3>
    118e:	6b 01       	movw	r12, r22
    1190:	7c 01       	movw	r14, r24
    1192:	6e 81       	ldd	r22, Y+6	; 0x06
    1194:	7f 81       	ldd	r23, Y+7	; 0x07
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	b4 d4       	rcall	.+2408   	; 0x1b04 <__floatunsisf>
    119c:	a5 01       	movw	r20, r10
    119e:	94 01       	movw	r18, r8
    11a0:	67 d5       	rcall	.+2766   	; 0x1c70 <__mulsf3>
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	5c e3       	ldi	r21, 0x3C	; 60
    11aa:	62 d5       	rcall	.+2756   	; 0x1c70 <__mulsf3>
    11ac:	4b 01       	movw	r8, r22
    11ae:	5c 01       	movw	r10, r24
    11b0:	6a 81       	ldd	r22, Y+2	; 0x02
    11b2:	7b 81       	ldd	r23, Y+3	; 0x03
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a5 d4       	rcall	.+2378   	; 0x1b04 <__floatunsisf>
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	58 e4       	ldi	r21, 0x48	; 72
    11c2:	56 d5       	rcall	.+2732   	; 0x1c70 <__mulsf3>
    11c4:	9b 01       	movw	r18, r22
    11c6:	ac 01       	movw	r20, r24
    11c8:	c5 01       	movw	r24, r10
    11ca:	b4 01       	movw	r22, r8
    11cc:	9a d3       	rcall	.+1844   	; 0x1902 <__addsf3>
    11ce:	9b 01       	movw	r18, r22
    11d0:	ac 01       	movw	r20, r24
    11d2:	c7 01       	movw	r24, r14
    11d4:	b6 01       	movw	r22, r12
    11d6:	94 d3       	rcall	.+1832   	; 0x1900 <__subsf3>
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	58 e3       	ldi	r21, 0x38	; 56
    11e0:	47 d5       	rcall	.+2702   	; 0x1c70 <__mulsf3>
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	af 90       	pop	r10
    11f2:	9f 90       	pop	r9
    11f4:	8f 90       	pop	r8
    11f6:	7f 90       	pop	r7
    11f8:	6f 90       	pop	r6
    11fa:	5f 90       	pop	r5
    11fc:	4f 90       	pop	r4
    11fe:	08 95       	ret

00001200 <get_altitude>:
    1200:	4f 92       	push	r4
    1202:	5f 92       	push	r5
    1204:	6f 92       	push	r6
    1206:	7f 92       	push	r7
    1208:	8f 92       	push	r8
    120a:	9f 92       	push	r9
    120c:	af 92       	push	r10
    120e:	bf 92       	push	r11
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	2b 01       	movw	r4, r22
    121a:	3c 01       	movw	r6, r24
    121c:	c0 90 14 20 	lds	r12, 0x2014	; 0x802014 <L>
    1220:	d0 90 15 20 	lds	r13, 0x2015	; 0x802015 <L+0x1>
    1224:	e0 90 16 20 	lds	r14, 0x2016	; 0x802016 <L+0x2>
    1228:	f0 90 17 20 	lds	r15, 0x2017	; 0x802017 <L+0x3>
    122c:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <R>
    1230:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <R+0x1>
    1234:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <R+0x2>
    1238:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <R+0x3>
    123c:	c7 01       	movw	r24, r14
    123e:	b6 01       	movw	r22, r12
    1240:	17 d5       	rcall	.+2606   	; 0x1c70 <__mulsf3>
    1242:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <g_0>
    1246:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <g_0+0x1>
    124a:	40 91 12 20 	lds	r20, 0x2012	; 0x802012 <g_0+0x2>
    124e:	50 91 13 20 	lds	r21, 0x2013	; 0x802013 <g_0+0x3>
    1252:	bf d3       	rcall	.+1918   	; 0x19d2 <__divsf3>
    1254:	4b 01       	movw	r8, r22
    1256:	5c 01       	movw	r10, r24
    1258:	a3 01       	movw	r20, r6
    125a:	92 01       	movw	r18, r4
    125c:	60 91 20 20 	lds	r22, 0x2020	; 0x802020 <ground_p>
    1260:	70 91 21 20 	lds	r23, 0x2021	; 0x802021 <ground_p+0x1>
    1264:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <ground_p+0x2>
    1268:	90 91 23 20 	lds	r25, 0x2023	; 0x802023 <ground_p+0x3>
    126c:	b2 d3       	rcall	.+1892   	; 0x19d2 <__divsf3>
    126e:	a5 01       	movw	r20, r10
    1270:	94 01       	movw	r18, r8
    1272:	61 d5       	rcall	.+2754   	; 0x1d36 <pow>
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	41 d3       	rcall	.+1666   	; 0x1900 <__subsf3>
    127e:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <ground_t>
    1282:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <ground_t+0x1>
    1286:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <ground_t+0x2>
    128a:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <ground_t+0x3>
    128e:	f0 d4       	rcall	.+2528   	; 0x1c70 <__mulsf3>
    1290:	a7 01       	movw	r20, r14
    1292:	96 01       	movw	r18, r12
    1294:	9e d3       	rcall	.+1852   	; 0x19d2 <__divsf3>
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	9f 90       	pop	r9
    12a4:	8f 90       	pop	r8
    12a6:	7f 90       	pop	r7
    12a8:	6f 90       	pop	r6
    12aa:	5f 90       	pop	r5
    12ac:	4f 90       	pop	r4
    12ae:	08 95       	ret

000012b0 <get_velocity>:
    12b0:	2f 92       	push	r2
    12b2:	3f 92       	push	r3
    12b4:	4f 92       	push	r4
    12b6:	5f 92       	push	r5
    12b8:	6f 92       	push	r6
    12ba:	7f 92       	push	r7
    12bc:	8f 92       	push	r8
    12be:	9f 92       	push	r9
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <get_velocity+0x26>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <get_velocity+0x28>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	6c 01       	movw	r12, r24
    12de:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <data_samples>
    12e2:	88 23       	and	r24, r24
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <get_velocity+0x38>
    12e6:	68 c0       	rjmp	.+208    	; 0x13b8 <get_velocity+0x108>
    12e8:	00 e0       	ldi	r16, 0x00	; 0
    12ea:	10 e0       	ldi	r17, 0x00	; 0
    12ec:	41 2c       	mov	r4, r1
    12ee:	51 2c       	mov	r5, r1
    12f0:	32 01       	movw	r6, r4
    12f2:	86 2e       	mov	r8, r22
    12f4:	91 2c       	mov	r9, r1
    12f6:	a1 2c       	mov	r10, r1
    12f8:	b1 2c       	mov	r11, r1
    12fa:	89 82       	std	Y+1, r8	; 0x01
    12fc:	9a 82       	std	Y+2, r9	; 0x02
    12fe:	ab 82       	std	Y+3, r10	; 0x03
    1300:	bc 82       	std	Y+4, r11	; 0x04
    1302:	b8 01       	movw	r22, r16
    1304:	c6 01       	movw	r24, r12
    1306:	af dd       	rcall	.-1186   	; 0xe66 <rb16_get_nth>
    1308:	5c 01       	movw	r10, r24
    130a:	18 01       	movw	r2, r16
    130c:	2f ef       	ldi	r18, 0xFF	; 255
    130e:	22 1a       	sub	r2, r18
    1310:	32 0a       	sbc	r3, r18
    1312:	b1 01       	movw	r22, r2
    1314:	c6 01       	movw	r24, r12
    1316:	a7 dd       	rcall	.-1202   	; 0xe66 <rb16_get_nth>
    1318:	7c 01       	movw	r14, r24
    131a:	b8 01       	movw	r22, r16
    131c:	6e 5f       	subi	r22, 0xFE	; 254
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	c6 01       	movw	r24, r12
    1322:	a1 dd       	rcall	.-1214   	; 0xe66 <rb16_get_nth>
    1324:	a5 01       	movw	r20, r10
    1326:	bb 0c       	add	r11, r11
    1328:	66 0b       	sbc	r22, r22
    132a:	77 0b       	sbc	r23, r23
    132c:	8a 01       	movw	r16, r20
    132e:	9b 01       	movw	r18, r22
    1330:	00 0f       	add	r16, r16
    1332:	11 1f       	adc	r17, r17
    1334:	22 1f       	adc	r18, r18
    1336:	33 1f       	adc	r19, r19
    1338:	40 0f       	add	r20, r16
    133a:	51 1f       	adc	r21, r17
    133c:	62 1f       	adc	r22, r18
    133e:	73 1f       	adc	r23, r19
    1340:	87 01       	movw	r16, r14
    1342:	ff 0c       	add	r15, r15
    1344:	22 0b       	sbc	r18, r18
    1346:	33 0b       	sbc	r19, r19
    1348:	78 01       	movw	r14, r16
    134a:	89 01       	movw	r16, r18
    134c:	ee 0c       	add	r14, r14
    134e:	ff 1c       	adc	r15, r15
    1350:	00 1f       	adc	r16, r16
    1352:	11 1f       	adc	r17, r17
    1354:	ee 0c       	add	r14, r14
    1356:	ff 1c       	adc	r15, r15
    1358:	00 1f       	adc	r16, r16
    135a:	11 1f       	adc	r17, r17
    135c:	4a 01       	movw	r8, r20
    135e:	5b 01       	movw	r10, r22
    1360:	8e 18       	sub	r8, r14
    1362:	9f 08       	sbc	r9, r15
    1364:	a0 0a       	sbc	r10, r16
    1366:	b1 0a       	sbc	r11, r17
    1368:	ac 01       	movw	r20, r24
    136a:	99 0f       	add	r25, r25
    136c:	66 0b       	sbc	r22, r22
    136e:	77 0b       	sbc	r23, r23
    1370:	d5 01       	movw	r26, r10
    1372:	c4 01       	movw	r24, r8
    1374:	84 0f       	add	r24, r20
    1376:	95 1f       	adc	r25, r21
    1378:	a6 1f       	adc	r26, r22
    137a:	b7 1f       	adc	r27, r23
    137c:	9c 01       	movw	r18, r24
    137e:	ad 01       	movw	r20, r26
    1380:	69 81       	ldd	r22, Y+1	; 0x01
    1382:	7a 81       	ldd	r23, Y+2	; 0x02
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	3b d6       	rcall	.+3190   	; 0x2000 <__mulsi3>
    138a:	be d3       	rcall	.+1916   	; 0x1b08 <__floatsisf>
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	6d d4       	rcall	.+2266   	; 0x1c70 <__mulsf3>
    1396:	9b 01       	movw	r18, r22
    1398:	ac 01       	movw	r20, r24
    139a:	c3 01       	movw	r24, r6
    139c:	b2 01       	movw	r22, r4
    139e:	b1 d2       	rcall	.+1378   	; 0x1902 <__addsf3>
    13a0:	2b 01       	movw	r4, r22
    13a2:	3c 01       	movw	r6, r24
    13a4:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <data_samples>
    13a8:	81 01       	movw	r16, r2
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	22 16       	cp	r2, r18
    13b0:	33 06       	cpc	r3, r19
    13b2:	08 f4       	brcc	.+2      	; 0x13b6 <get_velocity+0x106>
    13b4:	a6 cf       	rjmp	.-180    	; 0x1302 <get_velocity+0x52>
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <get_velocity+0x10e>
    13b8:	41 2c       	mov	r4, r1
    13ba:	51 2c       	mov	r5, r1
    13bc:	32 01       	movw	r6, r4
    13be:	68 2f       	mov	r22, r24
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 d3       	rcall	.+1856   	; 0x1b08 <__floatsisf>
    13c8:	9b 01       	movw	r18, r22
    13ca:	ac 01       	movw	r20, r24
    13cc:	c3 01       	movw	r24, r6
    13ce:	b2 01       	movw	r22, r4
    13d0:	00 d3       	rcall	.+1536   	; 0x19d2 <__divsf3>
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	48 ec       	ldi	r20, 0xC8	; 200
    13d8:	52 e4       	ldi	r21, 0x42	; 66
    13da:	fb d2       	rcall	.+1526   	; 0x19d2 <__divsf3>
    13dc:	26 96       	adiw	r28, 0x06	; 6
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	bf 90       	pop	r11
    13f4:	af 90       	pop	r10
    13f6:	9f 90       	pop	r9
    13f8:	8f 90       	pop	r8
    13fa:	7f 90       	pop	r7
    13fc:	6f 90       	pop	r6
    13fe:	5f 90       	pop	r5
    1400:	4f 90       	pop	r4
    1402:	3f 90       	pop	r3
    1404:	2f 90       	pop	r2
    1406:	08 95       	ret

00001408 <data_check>:
    1408:	3f 92       	push	r3
    140a:	4f 92       	push	r4
    140c:	5f 92       	push	r5
    140e:	6f 92       	push	r6
    1410:	7f 92       	push	r7
    1412:	8f 92       	push	r8
    1414:	9f 92       	push	r9
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	00 d0       	rcall	.+0      	; 0x142c <data_check+0x24>
    142c:	00 d0       	rcall	.+0      	; 0x142e <data_check+0x26>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	8c 01       	movw	r16, r24
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	1a 82       	std	Y+2, r1	; 0x02
    1438:	c1 2c       	mov	r12, r1
    143a:	d1 2c       	mov	r13, r1
    143c:	76 01       	movw	r14, r12
    143e:	69 81       	ldd	r22, Y+1	; 0x01
    1440:	7a 81       	ldd	r23, Y+2	; 0x02
    1442:	c8 01       	movw	r24, r16
    1444:	98 dd       	rcall	.-1232   	; 0xf76 <rb32_get_nth>
    1446:	4b 01       	movw	r8, r22
    1448:	5c 01       	movw	r10, r24
    144a:	21 e1       	ldi	r18, 0x11	; 17
    144c:	82 1a       	sub	r8, r18
    144e:	27 e2       	ldi	r18, 0x27	; 39
    1450:	92 0a       	sbc	r9, r18
    1452:	a1 08       	sbc	r10, r1
    1454:	b1 08       	sbc	r11, r1
    1456:	2f e2       	ldi	r18, 0x2F	; 47
    1458:	82 16       	cp	r8, r18
    145a:	2b e1       	ldi	r18, 0x1B	; 27
    145c:	92 06       	cpc	r9, r18
    145e:	2f e0       	ldi	r18, 0x0F	; 15
    1460:	a2 06       	cpc	r10, r18
    1462:	b1 04       	cpc	r11, r1
    1464:	68 f4       	brcc	.+26     	; 0x1480 <data_check+0x78>
    1466:	50 d3       	rcall	.+1696   	; 0x1b08 <__floatsisf>
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 ea       	ldi	r20, 0xA0	; 160
    146e:	50 e4       	ldi	r21, 0x40	; 64
    1470:	b0 d2       	rcall	.+1376   	; 0x19d2 <__divsf3>
    1472:	9b 01       	movw	r18, r22
    1474:	ac 01       	movw	r20, r24
    1476:	c7 01       	movw	r24, r14
    1478:	b6 01       	movw	r22, r12
    147a:	43 d2       	rcall	.+1158   	; 0x1902 <__addsf3>
    147c:	6b 01       	movw	r12, r22
    147e:	7c 01       	movw	r14, r24
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	05 97       	sbiw	r24, 0x05	; 5
    148c:	c1 f6       	brne	.-80     	; 0x143e <data_check+0x36>
    148e:	19 82       	std	Y+1, r1	; 0x01
    1490:	1a 82       	std	Y+2, r1	; 0x02
    1492:	81 2c       	mov	r8, r1
    1494:	91 2c       	mov	r9, r1
    1496:	54 01       	movw	r10, r8
    1498:	69 81       	ldd	r22, Y+1	; 0x01
    149a:	7a 81       	ldd	r23, Y+2	; 0x02
    149c:	c8 01       	movw	r24, r16
    149e:	6b dd       	rcall	.-1322   	; 0xf76 <rb32_get_nth>
    14a0:	33 d3       	rcall	.+1638   	; 0x1b08 <__floatsisf>
    14a2:	a7 01       	movw	r20, r14
    14a4:	96 01       	movw	r18, r12
    14a6:	2c d2       	rcall	.+1112   	; 0x1900 <__subsf3>
    14a8:	9b 01       	movw	r18, r22
    14aa:	ac 01       	movw	r20, r24
    14ac:	e1 d3       	rcall	.+1986   	; 0x1c70 <__mulsf3>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	c5 01       	movw	r24, r10
    14b4:	b4 01       	movw	r22, r8
    14b6:	25 d2       	rcall	.+1098   	; 0x1902 <__addsf3>
    14b8:	4b 01       	movw	r8, r22
    14ba:	5c 01       	movw	r10, r24
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	05 97       	sbiw	r24, 0x05	; 5
    14c8:	39 f7       	brne	.-50     	; 0x1498 <data_check+0x90>
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e8       	ldi	r20, 0x80	; 128
    14d0:	5e e3       	ldi	r21, 0x3E	; 62
    14d2:	c5 01       	movw	r24, r10
    14d4:	b4 01       	movw	r22, r8
    14d6:	cc d3       	rcall	.+1944   	; 0x1c70 <__mulsf3>
    14d8:	69 83       	std	Y+1, r22	; 0x01
    14da:	7a 83       	std	Y+2, r23	; 0x02
    14dc:	8b 83       	std	Y+3, r24	; 0x03
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	1d 82       	std	Y+5, r1	; 0x05
    14e2:	1e 82       	std	Y+6, r1	; 0x06
    14e4:	31 2c       	mov	r3, r1
    14e6:	41 2c       	mov	r4, r1
    14e8:	51 2c       	mov	r5, r1
    14ea:	32 01       	movw	r6, r4
    14ec:	6d 81       	ldd	r22, Y+5	; 0x05
    14ee:	7e 81       	ldd	r23, Y+6	; 0x06
    14f0:	c8 01       	movw	r24, r16
    14f2:	41 dd       	rcall	.-1406   	; 0xf76 <rb32_get_nth>
    14f4:	09 d3       	rcall	.+1554   	; 0x1b08 <__floatsisf>
    14f6:	4b 01       	movw	r8, r22
    14f8:	5c 01       	movw	r10, r24
    14fa:	a7 01       	movw	r20, r14
    14fc:	96 01       	movw	r18, r12
    14fe:	00 d2       	rcall	.+1024   	; 0x1900 <__subsf3>
    1500:	d0 d2       	rcall	.+1440   	; 0x1aa2 <__fixsfsi>
    1502:	9b 01       	movw	r18, r22
    1504:	77 23       	and	r23, r23
    1506:	24 f4       	brge	.+8      	; 0x1510 <data_check+0x108>
    1508:	22 27       	eor	r18, r18
    150a:	33 27       	eor	r19, r19
    150c:	26 1b       	sub	r18, r22
    150e:	37 0b       	sbc	r19, r23
    1510:	b9 01       	movw	r22, r18
    1512:	33 0f       	add	r19, r19
    1514:	88 0b       	sbc	r24, r24
    1516:	99 0b       	sbc	r25, r25
    1518:	f7 d2       	rcall	.+1518   	; 0x1b08 <__floatsisf>
    151a:	9b 01       	movw	r18, r22
    151c:	ac 01       	movw	r20, r24
    151e:	69 81       	ldd	r22, Y+1	; 0x01
    1520:	7a 81       	ldd	r23, Y+2	; 0x02
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	a0 d3       	rcall	.+1856   	; 0x1c68 <__gesf2>
    1528:	88 23       	and	r24, r24
    152a:	44 f0       	brlt	.+16     	; 0x153c <data_check+0x134>
    152c:	a5 01       	movw	r20, r10
    152e:	94 01       	movw	r18, r8
    1530:	c3 01       	movw	r24, r6
    1532:	b2 01       	movw	r22, r4
    1534:	e6 d1       	rcall	.+972    	; 0x1902 <__addsf3>
    1536:	2b 01       	movw	r4, r22
    1538:	3c 01       	movw	r6, r24
    153a:	33 94       	inc	r3
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	8d 83       	std	Y+5, r24	; 0x05
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	05 97       	sbiw	r24, 0x05	; 5
    1548:	89 f6       	brne	.-94     	; 0x14ec <data_check+0xe4>
    154a:	33 20       	and	r3, r3
    154c:	59 f0       	breq	.+22     	; 0x1564 <data_check+0x15c>
    154e:	63 2d       	mov	r22, r3
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	d6 d2       	rcall	.+1452   	; 0x1b04 <__floatunsisf>
    1558:	9b 01       	movw	r18, r22
    155a:	ac 01       	movw	r20, r24
    155c:	c3 01       	movw	r24, r6
    155e:	b2 01       	movw	r22, r4
    1560:	38 d2       	rcall	.+1136   	; 0x19d2 <__divsf3>
    1562:	04 c0       	rjmp	.+8      	; 0x156c <data_check+0x164>
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	80 e8       	ldi	r24, 0x80	; 128
    156a:	9f eb       	ldi	r25, 0xBF	; 191
    156c:	26 96       	adiw	r28, 0x06	; 6
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	df 90       	pop	r13
    1580:	cf 90       	pop	r12
    1582:	bf 90       	pop	r11
    1584:	af 90       	pop	r10
    1586:	9f 90       	pop	r9
    1588:	8f 90       	pop	r8
    158a:	7f 90       	pop	r7
    158c:	6f 90       	pop	r6
    158e:	5f 90       	pop	r5
    1590:	4f 90       	pop	r4
    1592:	3f 90       	pop	r3
    1594:	08 95       	ret

00001596 <data_collect>:
    1596:	af 92       	push	r10
    1598:	bf 92       	push	r11
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <data_collect+0x16>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <data_collect+0x18>
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	5c 01       	movw	r10, r24
    15b4:	8b 01       	movw	r16, r22
    15b6:	96 dd       	rcall	.-1236   	; 0x10e4 <get_pressure>
    15b8:	74 d2       	rcall	.+1256   	; 0x1aa2 <__fixsfsi>
    15ba:	69 83       	std	Y+1, r22	; 0x01
    15bc:	7a 83       	std	Y+2, r23	; 0x02
    15be:	8b 83       	std	Y+3, r24	; 0x03
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	be 01       	movw	r22, r28
    15c8:	6f 5f       	subi	r22, 0xFF	; 255
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	c8 01       	movw	r24, r16
    15ce:	78 dc       	rcall	.-1808   	; 0xec0 <rb32_write>
    15d0:	c8 01       	movw	r24, r16
    15d2:	1a df       	rcall	.-460    	; 0x1408 <data_check>
    15d4:	6b 01       	movw	r12, r22
    15d6:	7c 01       	movw	r14, r24
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f eb       	ldi	r21, 0xBF	; 191
    15e0:	f4 d1       	rcall	.+1000   	; 0x19ca <__cmpsf2>
    15e2:	88 23       	and	r24, r24
    15e4:	69 f1       	breq	.+90     	; 0x1640 <data_collect+0xaa>
    15e6:	c0 92 78 20 	sts	0x2078, r12	; 0x802078 <press>
    15ea:	d0 92 79 20 	sts	0x2079, r13	; 0x802079 <press+0x1>
    15ee:	e0 92 7a 20 	sts	0x207A, r14	; 0x80207a <press+0x2>
    15f2:	f0 92 7b 20 	sts	0x207B, r15	; 0x80207b <press+0x3>
    15f6:	c7 01       	movw	r24, r14
    15f8:	b6 01       	movw	r22, r12
    15fa:	02 de       	rcall	.-1020   	; 0x1200 <get_altitude>
    15fc:	60 93 70 20 	sts	0x2070, r22	; 0x802070 <alt>
    1600:	70 93 71 20 	sts	0x2071, r23	; 0x802071 <alt+0x1>
    1604:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <alt+0x2>
    1608:	90 93 73 20 	sts	0x2073, r25	; 0x802073 <alt+0x3>
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	48 ec       	ldi	r20, 0xC8	; 200
    1612:	52 e4       	ldi	r21, 0x42	; 66
    1614:	2d d3       	rcall	.+1626   	; 0x1c70 <__mulsf3>
    1616:	45 d2       	rcall	.+1162   	; 0x1aa2 <__fixsfsi>
    1618:	6d 83       	std	Y+5, r22	; 0x05
    161a:	7e 83       	std	Y+6, r23	; 0x06
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	be 01       	movw	r22, r28
    1622:	6b 5f       	subi	r22, 0xFB	; 251
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	c5 01       	movw	r24, r10
    1628:	d5 db       	rcall	.-2134   	; 0xdd4 <rb16_write>
    162a:	6a e0       	ldi	r22, 0x0A	; 10
    162c:	c5 01       	movw	r24, r10
    162e:	40 de       	rcall	.-896    	; 0x12b0 <get_velocity>
    1630:	60 93 6c 20 	sts	0x206C, r22	; 0x80206c <__data_end>
    1634:	70 93 6d 20 	sts	0x206D, r23	; 0x80206d <__data_end+0x1>
    1638:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <__data_end+0x2>
    163c:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <__data_end+0x3>
    1640:	83 e3       	ldi	r24, 0x33	; 51
    1642:	93 e1       	ldi	r25, 0x13	; 19
    1644:	a0 e9       	ldi	r26, 0x90	; 144
    1646:	b3 e4       	ldi	r27, 0x43	; 67
    1648:	80 93 74 20 	sts	0x2074, r24	; 0x802074 <temp>
    164c:	90 93 75 20 	sts	0x2075, r25	; 0x802075 <temp+0x1>
    1650:	a0 93 76 20 	sts	0x2076, r26	; 0x802076 <temp+0x2>
    1654:	b0 93 77 20 	sts	0x2077, r27	; 0x802077 <temp+0x3>
    1658:	26 96       	adiw	r28, 0x06	; 6
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	08 95       	ret

00001674 <servo_timer_init>:
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	84 e0       	ldi	r24, 0x04	; 4
    1688:	e0 dc       	rcall	.-1600   	; 0x104a <sysclk_enable_module>
    168a:	64 e0       	ldi	r22, 0x04	; 4
    168c:	84 e0       	ldi	r24, 0x04	; 4
    168e:	dd dc       	rcall	.-1606   	; 0x104a <sysclk_enable_module>
    1690:	c0 e0       	ldi	r28, 0x00	; 0
    1692:	d9 e0       	ldi	r29, 0x09	; 9
    1694:	85 e0       	ldi	r24, 0x05	; 5
    1696:	88 83       	st	Y, r24
    1698:	83 e1       	ldi	r24, 0x13	; 19
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	80 e1       	ldi	r24, 0x10	; 16
    169e:	97 e2       	ldi	r25, 0x27	; 39
    16a0:	8e a3       	std	Y+38, r24	; 0x26
    16a2:	9f a3       	std	Y+39, r25	; 0x27
    16a4:	0e a1       	ldd	r16, Y+38	; 0x26
    16a6:	1f a1       	ldd	r17, Y+39	; 0x27
    16a8:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <servo_on_time_us>
    16ac:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <servo_on_time_us+0x1>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	27 d2       	rcall	.+1102   	; 0x1b04 <__floatunsisf>
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	4a e7       	ldi	r20, 0x7A	; 122
    16bc:	54 e4       	ldi	r21, 0x44	; 68
    16be:	89 d1       	rcall	.+786    	; 0x19d2 <__divsf3>
    16c0:	6b 01       	movw	r12, r22
    16c2:	7c 01       	movw	r14, r24
    16c4:	b8 01       	movw	r22, r16
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	1c d2       	rcall	.+1080   	; 0x1b04 <__floatunsisf>
    16cc:	9b 01       	movw	r18, r22
    16ce:	ac 01       	movw	r20, r24
    16d0:	c7 01       	movw	r24, r14
    16d2:	b6 01       	movw	r22, r12
    16d4:	cd d2       	rcall	.+1434   	; 0x1c70 <__mulsf3>
    16d6:	ea d1       	rcall	.+980    	; 0x1aac <__fixunssfsi>
    16d8:	68 a7       	std	Y+40, r22	; 0x28
    16da:	79 a7       	std	Y+41, r23	; 0x29
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
    16ec:	08 95       	ret

000016ee <clock_init>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	85 e0       	ldi	r24, 0x05	; 5
    16f2:	ab dc       	rcall	.-1706   	; 0x104a <sysclk_enable_module>

void clock_init(void){
	sysclk_enable_peripheral_clock(&TCE0); // starts peripheral clock
	sei();
    16f4:	78 94       	sei

	TCE0.CTRLA = 0x07; // divisor set to 1024
    16f6:	e0 e0       	ldi	r30, 0x00	; 0
    16f8:	fa e0       	ldi	r31, 0x0A	; 10
    16fa:	87 e0       	ldi	r24, 0x07	; 7
    16fc:	80 83       	st	Z, r24
	TCE0.PER = 31249; // 1 Hz
    16fe:	81 e1       	ldi	r24, 0x11	; 17
    1700:	9a e7       	ldi	r25, 0x7A	; 122
    1702:	86 a3       	std	Z+38, r24	; 0x26
    1704:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	86 83       	std	Z+6, r24	; 0x06
    170a:	08 95       	ret

0000170c <system_init>:


// Sensor functions
void system_init(void){
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    170c:	69 dc       	rcall	.-1838   	; 0xfe0 <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    170e:	6b ea       	ldi	r22, 0xAB	; 171
    1710:	79 e2       	ldi	r23, 0x29	; 41
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	b5 dc       	rcall	.-1686   	; 0x1082 <__portable_avr_delay_cycles>
	
	// Initialization of pins
	PORTC.DIR = 0xBB; // makes Port C have pins, 7, 5, 4, 3, 1, 0 be output (0b10111011)
    1718:	e0 e4       	ldi	r30, 0x40	; 64
    171a:	f6 e0       	ldi	r31, 0x06	; 6
    171c:	8b eb       	ldi	r24, 0xBB	; 187
    171e:	80 83       	st	Z, r24
	PORTC.OUT = 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    1720:	80 e1       	ldi	r24, 0x10	; 16
    1722:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL = PMIC_LOLVLEN_bm; // enables lo level interrupts
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Driver Initialization
	data_terminal_init();
    172a:	04 db       	rcall	.-2552   	; 0xd34 <data_terminal_init>
	delay_ms(2);
    172c:	6b ea       	ldi	r22, 0xAB	; 171
    172e:	79 e2       	ldi	r23, 0x29	; 41
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a6 dc       	rcall	.-1716   	; 0x1082 <__portable_avr_delay_cycles>
	
//	adc_init();
	delay_ms(2);
    1736:	6b ea       	ldi	r22, 0xAB	; 171
    1738:	79 e2       	ldi	r23, 0x29	; 41
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
	
	spi_init();
    173e:	a1 dc       	rcall	.-1726   	; 0x1082 <__portable_avr_delay_cycles>
	delay_ms(2);
    1740:	d5 da       	rcall	.-2646   	; 0xcec <spi_init>
    1742:	6b ea       	ldi	r22, 0xAB	; 171
    1744:	79 e2       	ldi	r23, 0x29	; 41
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
	
	pressure_init();
    174a:	9b dc       	rcall	.-1738   	; 0x1082 <__portable_avr_delay_cycles>
	delay_ms(2);
    174c:	a5 dc       	rcall	.-1718   	; 0x1098 <pressure_init>
    174e:	6b ea       	ldi	r22, 0xAB	; 171
    1750:	79 e2       	ldi	r23, 0x29	; 41
    1752:	80 e0       	ldi	r24, 0x00	; 0
	
	clock_init();
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	95 dc       	rcall	.-1750   	; 0x1082 <__portable_avr_delay_cycles>
	servo_timer_init();
    1758:	ca df       	rcall	.-108    	; 0x16ee <clock_init>
    175a:	8c df       	rcall	.-232    	; 0x1674 <servo_timer_init>
	
	delay_ms(10);
    175c:	66 e5       	ldi	r22, 0x56	; 86
    175e:	70 ed       	ldi	r23, 0xD0	; 208
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	8e dc       	rcall	.-1764   	; 0x1082 <__portable_avr_delay_cycles>
    1766:	be dc       	rcall	.-1668   	; 0x10e4 <get_pressure>
	
	// Initialization of variables
	ground_p = get_pressure();
    1768:	60 93 20 20 	sts	0x2020, r22	; 0x802020 <ground_p>
    176c:	70 93 21 20 	sts	0x2021, r23	; 0x802021 <ground_p+0x1>
    1770:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <ground_p+0x2>
    1774:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <ground_p+0x3>
    1778:	83 e3       	ldi	r24, 0x33	; 51
	ground_t = get_temperature();
    177a:	93 e1       	ldi	r25, 0x13	; 19
    177c:	a0 e9       	ldi	r26, 0x90	; 144
    177e:	b3 e4       	ldi	r27, 0x43	; 67
    1780:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <ground_t>
    1784:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <ground_t+0x1>
    1788:	a0 93 1e 20 	sts	0x201E, r26	; 0x80201e <ground_t+0x2>
    178c:	b0 93 1f 20 	sts	0x201F, r27	; 0x80201f <ground_t+0x3>
	ground_a = get_altitude(get_pressure());
    1790:	a9 dc       	rcall	.-1710   	; 0x10e4 <get_pressure>
    1792:	36 dd       	rcall	.-1428   	; 0x1200 <get_altitude>
    1794:	60 93 8c 20 	sts	0x208C, r22	; 0x80208c <ground_a>
    1798:	70 93 8d 20 	sts	0x208D, r23	; 0x80208d <ground_a+0x1>
    179c:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <ground_a+0x2>
    17a0:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <ground_a+0x3>
    17a4:	08 95       	ret

000017a6 <main>:
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
char* str;					// Output String


////////////////////////////// Functions ///////////////////////////////
int main (void)
{
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	ce 55       	subi	r28, 0x5E	; 94
    17b0:	d1 09       	sbc	r29, r1
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	de bf       	out	0x3e, r29	; 62
	system_init();
    17b6:	aa df       	rcall	.-172    	; 0x170c <system_init>
	
	printf("time, pressure, temperature, altitude, velocity\n");
    17b8:	88 e2       	ldi	r24, 0x28	; 40
    17ba:	90 e2       	ldi	r25, 0x20	; 32
    17bc:	c8 d4       	rcall	.+2448   	; 0x214e <puts>
	
	uint8_t mem_array[] = {0,0,0,0,0,0,0,0,0,0};
    17be:	be 01       	movw	r22, r28
    17c0:	6f 5f       	subi	r22, 0xFF	; 255
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	8a e0       	ldi	r24, 0x0A	; 10
    17c6:	fb 01       	movw	r30, r22
    17c8:	11 92       	st	Z+, r1
    17ca:	8a 95       	dec	r24
    17cc:	e9 f7       	brne	.-6      	; 0x17c8 <main+0x22>
	RingBufferu8_t gcs_comms;
	rbu8_init(&gcs_comms, mem_array, (uint16_t) 10);
    17ce:	4a e0       	ldi	r20, 0x0A	; 10
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	ce 01       	movw	r24, r28
    17d4:	0b 96       	adiw	r24, 0x0b	; 11
    17d6:	f4 da       	rcall	.-2584   	; 0xdc0 <rbu8_init>
	
	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    17d8:	be 01       	movw	r22, r28
    17da:	6d 5e       	subi	r22, 0xED	; 237
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	84 e1       	ldi	r24, 0x14	; 20
    17e0:	fb 01       	movw	r30, r22
    17e2:	11 92       	st	Z+, r1
    17e4:	8a 95       	dec	r24
    17e6:	e9 f7       	brne	.-6      	; 0x17e2 <main+0x3c>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    17e8:	4a e0       	ldi	r20, 0x0A	; 10
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	ce 01       	movw	r24, r28
    17ee:	87 96       	adiw	r24, 0x27	; 39
    17f0:	30 db       	rcall	.-2464   	; 0xe52 <rb16_init>
	
	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    17f2:	be 01       	movw	r22, r28
    17f4:	61 5d       	subi	r22, 0xD1	; 209
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	88 e2       	ldi	r24, 0x28	; 40
    17fa:	fb 01       	movw	r30, r22
    17fc:	11 92       	st	Z+, r1
    17fe:	8a 95       	dec	r24
    1800:	e9 f7       	brne	.-6      	; 0x17fc <main+0x56>
	RingBuffer32_t pressures;	// in centimeters
	rb32_init(&pressures, press_array, (uint16_t) 10);
    1802:	4a e0       	ldi	r20, 0x0A	; 10
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	ce 01       	movw	r24, r28
    1808:	89 5a       	subi	r24, 0xA9	; 169
    180a:	9f 4f       	sbci	r25, 0xFF	; 255
    180c:	aa db       	rcall	.-2220   	; 0xf62 <rb32_init>
		data_collect(&altitudes,&pressures);		
		
		packets++;
		// Prints information
		//printf("5343,%i,%i,%i,%li,%i,%i,%li,%li,%li,%i,%i,%i,%i,%i,%i,%i",time,packets,(int16_t)alt*10,(int32_t) press,(int16_t) temp*10,volt,gps_t,gps_lat,gps_long,gps_alt,gps_sats,pitch,roll,rpm,state,angle)
		printf("%i,%i,%li,%u,%i,%i\n", timer, packets, (int32_t) (press), (uint16_t) (temp * 100), (int16_t) (alt), (int16_t) (velocity)); // Data Logging Test
    180e:	0f 2e       	mov	r0, r31
    1810:	f8 e5       	ldi	r31, 0x58	; 88
    1812:	ef 2e       	mov	r14, r31
    1814:	f0 e2       	ldi	r31, 0x20	; 32
    1816:	ff 2e       	mov	r15, r31
    1818:	f0 2d       	mov	r31, r0
	RingBuffer32_t pressures;	// in centimeters
	rb32_init(&pressures, press_array, (uint16_t) 10);
	
	while(1){
		//Gives each flight state their unique tasks
		switch(state){
    181a:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <state>
    181e:	84 30       	cpi	r24, 0x04	; 4
    1820:	10 f0       	brcs	.+4      	; 0x1826 <main+0x80>
			case 2:
				break;
			case 3:
				break;
			default:
				state = 0;
    1822:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <state>
				break;
		}
		
		// Check Sensors
		data_collect(&altitudes,&pressures);		
    1826:	be 01       	movw	r22, r28
    1828:	69 5a       	subi	r22, 0xA9	; 169
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	ce 01       	movw	r24, r28
    182e:	87 96       	adiw	r24, 0x27	; 39
    1830:	b2 de       	rcall	.-668    	; 0x1596 <data_collect>
		
		packets++;
    1832:	00 91 7c 20 	lds	r16, 0x207C	; 0x80207c <packets>
    1836:	10 91 7d 20 	lds	r17, 0x207D	; 0x80207d <packets+0x1>
    183a:	0f 5f       	subi	r16, 0xFF	; 255
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	00 93 7c 20 	sts	0x207C, r16	; 0x80207c <packets>
    1842:	10 93 7d 20 	sts	0x207D, r17	; 0x80207d <packets+0x1>
		// Prints information
		//printf("5343,%i,%i,%i,%li,%i,%i,%li,%li,%li,%i,%i,%i,%i,%i,%i,%i",time,packets,(int16_t)alt*10,(int32_t) press,(int16_t) temp*10,volt,gps_t,gps_lat,gps_long,gps_alt,gps_sats,pitch,roll,rpm,state,angle)
		printf("%i,%i,%li,%u,%i,%i\n", timer, packets, (int32_t) (press), (uint16_t) (temp * 100), (int16_t) (alt), (int16_t) (velocity)); // Data Logging Test
    1846:	60 91 6c 20 	lds	r22, 0x206C	; 0x80206c <__data_end>
    184a:	70 91 6d 20 	lds	r23, 0x206D	; 0x80206d <__data_end+0x1>
    184e:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <__data_end+0x2>
    1852:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <__data_end+0x3>
    1856:	25 d1       	rcall	.+586    	; 0x1aa2 <__fixsfsi>
    1858:	7f 93       	push	r23
    185a:	6f 93       	push	r22
    185c:	60 91 70 20 	lds	r22, 0x2070	; 0x802070 <alt>
    1860:	70 91 71 20 	lds	r23, 0x2071	; 0x802071 <alt+0x1>
    1864:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <alt+0x2>
    1868:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <alt+0x3>
    186c:	1a d1       	rcall	.+564    	; 0x1aa2 <__fixsfsi>
    186e:	7f 93       	push	r23
    1870:	6f 93       	push	r22
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	48 ec       	ldi	r20, 0xC8	; 200
    1878:	52 e4       	ldi	r21, 0x42	; 66
    187a:	60 91 74 20 	lds	r22, 0x2074	; 0x802074 <temp>
    187e:	70 91 75 20 	lds	r23, 0x2075	; 0x802075 <temp+0x1>
    1882:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <temp+0x2>
    1886:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <temp+0x3>
    188a:	f2 d1       	rcall	.+996    	; 0x1c70 <__mulsf3>
    188c:	0f d1       	rcall	.+542    	; 0x1aac <__fixunssfsi>
    188e:	7f 93       	push	r23
    1890:	6f 93       	push	r22
    1892:	60 91 78 20 	lds	r22, 0x2078	; 0x802078 <press>
    1896:	70 91 79 20 	lds	r23, 0x2079	; 0x802079 <press+0x1>
    189a:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <press+0x2>
    189e:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <press+0x3>
    18a2:	ff d0       	rcall	.+510    	; 0x1aa2 <__fixsfsi>
    18a4:	9f 93       	push	r25
    18a6:	8f 93       	push	r24
    18a8:	7f 93       	push	r23
    18aa:	6f 93       	push	r22
    18ac:	1f 93       	push	r17
    18ae:	0f 93       	push	r16
    18b0:	80 91 7f 20 	lds	r24, 0x207F	; 0x80207f <timer+0x1>
    18b4:	8f 93       	push	r24
    18b6:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <timer>
    18ba:	8f 93       	push	r24
    18bc:	ff 92       	push	r15
    18be:	ef 92       	push	r14
    18c0:	33 d4       	rcall	.+2150   	; 0x2128 <printf>
		//printf("P (Pa): %5li, T (K/100): %5u, A (m): %5i, V (m/s): %5i\n", (int32_t) (press), (uint16_t) (temp * 100), (int16_t) (alt*100), (int16_t) (velocity*100));
		//printf("Time: %i, Packet: %i\n", time, packets);
		//record(&str);
		//delay_ms(240);
	}
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	a9 cf       	rjmp	.-174    	; 0x181a <main+0x74>

000018c8 <__vector_47>:
	TCE0.CTRLA = 0x07; // divisor set to 1024
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

ISR(TCE0_OVF_vect){
    18c8:	1f 92       	push	r1
    18ca:	0f 92       	push	r0
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	0f 92       	push	r0
    18d0:	11 24       	eor	r1, r1
    18d2:	08 b6       	in	r0, 0x38	; 56
    18d4:	0f 92       	push	r0
    18d6:	18 be       	out	0x38, r1	; 56
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
	timer++;
    18dc:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <timer>
    18e0:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <timer+0x1>
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	80 93 7e 20 	sts	0x207E, r24	; 0x80207e <timer>
    18ea:	90 93 7f 20 	sts	0x207F, r25	; 0x80207f <timer+0x1>
    18ee:	9f 91       	pop	r25
    18f0:	8f 91       	pop	r24
    18f2:	0f 90       	pop	r0
    18f4:	08 be       	out	0x38, r0	; 56
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	0f 90       	pop	r0
    18fc:	1f 90       	pop	r1
    18fe:	18 95       	reti

00001900 <__subsf3>:
    1900:	50 58       	subi	r21, 0x80	; 128

00001902 <__addsf3>:
    1902:	bb 27       	eor	r27, r27
    1904:	aa 27       	eor	r26, r26
    1906:	0e d0       	rcall	.+28     	; 0x1924 <__addsf3x>
    1908:	75 c1       	rjmp	.+746    	; 0x1bf4 <__fp_round>
    190a:	66 d1       	rcall	.+716    	; 0x1bd8 <__fp_pscA>
    190c:	30 f0       	brcs	.+12     	; 0x191a <__addsf3+0x18>
    190e:	6b d1       	rcall	.+726    	; 0x1be6 <__fp_pscB>
    1910:	20 f0       	brcs	.+8      	; 0x191a <__addsf3+0x18>
    1912:	31 f4       	brne	.+12     	; 0x1920 <__addsf3+0x1e>
    1914:	9f 3f       	cpi	r25, 0xFF	; 255
    1916:	11 f4       	brne	.+4      	; 0x191c <__addsf3+0x1a>
    1918:	1e f4       	brtc	.+6      	; 0x1920 <__addsf3+0x1e>
    191a:	5b c1       	rjmp	.+694    	; 0x1bd2 <__fp_nan>
    191c:	0e f4       	brtc	.+2      	; 0x1920 <__addsf3+0x1e>
    191e:	e0 95       	com	r30
    1920:	e7 fb       	bst	r30, 7
    1922:	51 c1       	rjmp	.+674    	; 0x1bc6 <__fp_inf>

00001924 <__addsf3x>:
    1924:	e9 2f       	mov	r30, r25
    1926:	77 d1       	rcall	.+750    	; 0x1c16 <__fp_split3>
    1928:	80 f3       	brcs	.-32     	; 0x190a <__addsf3+0x8>
    192a:	ba 17       	cp	r27, r26
    192c:	62 07       	cpc	r22, r18
    192e:	73 07       	cpc	r23, r19
    1930:	84 07       	cpc	r24, r20
    1932:	95 07       	cpc	r25, r21
    1934:	18 f0       	brcs	.+6      	; 0x193c <__addsf3x+0x18>
    1936:	71 f4       	brne	.+28     	; 0x1954 <__addsf3x+0x30>
    1938:	9e f5       	brtc	.+102    	; 0x19a0 <__addsf3x+0x7c>
    193a:	8f c1       	rjmp	.+798    	; 0x1c5a <__fp_zero>
    193c:	0e f4       	brtc	.+2      	; 0x1940 <__addsf3x+0x1c>
    193e:	e0 95       	com	r30
    1940:	0b 2e       	mov	r0, r27
    1942:	ba 2f       	mov	r27, r26
    1944:	a0 2d       	mov	r26, r0
    1946:	0b 01       	movw	r0, r22
    1948:	b9 01       	movw	r22, r18
    194a:	90 01       	movw	r18, r0
    194c:	0c 01       	movw	r0, r24
    194e:	ca 01       	movw	r24, r20
    1950:	a0 01       	movw	r20, r0
    1952:	11 24       	eor	r1, r1
    1954:	ff 27       	eor	r31, r31
    1956:	59 1b       	sub	r21, r25
    1958:	99 f0       	breq	.+38     	; 0x1980 <__addsf3x+0x5c>
    195a:	59 3f       	cpi	r21, 0xF9	; 249
    195c:	50 f4       	brcc	.+20     	; 0x1972 <__addsf3x+0x4e>
    195e:	50 3e       	cpi	r21, 0xE0	; 224
    1960:	68 f1       	brcs	.+90     	; 0x19bc <__addsf3x+0x98>
    1962:	1a 16       	cp	r1, r26
    1964:	f0 40       	sbci	r31, 0x00	; 0
    1966:	a2 2f       	mov	r26, r18
    1968:	23 2f       	mov	r18, r19
    196a:	34 2f       	mov	r19, r20
    196c:	44 27       	eor	r20, r20
    196e:	58 5f       	subi	r21, 0xF8	; 248
    1970:	f3 cf       	rjmp	.-26     	; 0x1958 <__addsf3x+0x34>
    1972:	46 95       	lsr	r20
    1974:	37 95       	ror	r19
    1976:	27 95       	ror	r18
    1978:	a7 95       	ror	r26
    197a:	f0 40       	sbci	r31, 0x00	; 0
    197c:	53 95       	inc	r21
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__addsf3x+0x4e>
    1980:	7e f4       	brtc	.+30     	; 0x19a0 <__addsf3x+0x7c>
    1982:	1f 16       	cp	r1, r31
    1984:	ba 0b       	sbc	r27, r26
    1986:	62 0b       	sbc	r22, r18
    1988:	73 0b       	sbc	r23, r19
    198a:	84 0b       	sbc	r24, r20
    198c:	ba f0       	brmi	.+46     	; 0x19bc <__addsf3x+0x98>
    198e:	91 50       	subi	r25, 0x01	; 1
    1990:	a1 f0       	breq	.+40     	; 0x19ba <__addsf3x+0x96>
    1992:	ff 0f       	add	r31, r31
    1994:	bb 1f       	adc	r27, r27
    1996:	66 1f       	adc	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	c2 f7       	brpl	.-16     	; 0x198e <__addsf3x+0x6a>
    199e:	0e c0       	rjmp	.+28     	; 0x19bc <__addsf3x+0x98>
    19a0:	ba 0f       	add	r27, r26
    19a2:	62 1f       	adc	r22, r18
    19a4:	73 1f       	adc	r23, r19
    19a6:	84 1f       	adc	r24, r20
    19a8:	48 f4       	brcc	.+18     	; 0x19bc <__addsf3x+0x98>
    19aa:	87 95       	ror	r24
    19ac:	77 95       	ror	r23
    19ae:	67 95       	ror	r22
    19b0:	b7 95       	ror	r27
    19b2:	f7 95       	ror	r31
    19b4:	9e 3f       	cpi	r25, 0xFE	; 254
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <__addsf3x+0x96>
    19b8:	b3 cf       	rjmp	.-154    	; 0x1920 <__addsf3+0x1e>
    19ba:	93 95       	inc	r25
    19bc:	88 0f       	add	r24, r24
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <__addsf3x+0x9e>
    19c0:	99 27       	eor	r25, r25
    19c2:	ee 0f       	add	r30, r30
    19c4:	97 95       	ror	r25
    19c6:	87 95       	ror	r24
    19c8:	08 95       	ret

000019ca <__cmpsf2>:
    19ca:	d9 d0       	rcall	.+434    	; 0x1b7e <__fp_cmp>
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <__cmpsf2+0x6>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	08 95       	ret

000019d2 <__divsf3>:
    19d2:	0c d0       	rcall	.+24     	; 0x19ec <__divsf3x>
    19d4:	0f c1       	rjmp	.+542    	; 0x1bf4 <__fp_round>
    19d6:	07 d1       	rcall	.+526    	; 0x1be6 <__fp_pscB>
    19d8:	40 f0       	brcs	.+16     	; 0x19ea <__divsf3+0x18>
    19da:	fe d0       	rcall	.+508    	; 0x1bd8 <__fp_pscA>
    19dc:	30 f0       	brcs	.+12     	; 0x19ea <__divsf3+0x18>
    19de:	21 f4       	brne	.+8      	; 0x19e8 <__divsf3+0x16>
    19e0:	5f 3f       	cpi	r21, 0xFF	; 255
    19e2:	19 f0       	breq	.+6      	; 0x19ea <__divsf3+0x18>
    19e4:	f0 c0       	rjmp	.+480    	; 0x1bc6 <__fp_inf>
    19e6:	51 11       	cpse	r21, r1
    19e8:	39 c1       	rjmp	.+626    	; 0x1c5c <__fp_szero>
    19ea:	f3 c0       	rjmp	.+486    	; 0x1bd2 <__fp_nan>

000019ec <__divsf3x>:
    19ec:	14 d1       	rcall	.+552    	; 0x1c16 <__fp_split3>
    19ee:	98 f3       	brcs	.-26     	; 0x19d6 <__divsf3+0x4>

000019f0 <__divsf3_pse>:
    19f0:	99 23       	and	r25, r25
    19f2:	c9 f3       	breq	.-14     	; 0x19e6 <__divsf3+0x14>
    19f4:	55 23       	and	r21, r21
    19f6:	b1 f3       	breq	.-20     	; 0x19e4 <__divsf3+0x12>
    19f8:	95 1b       	sub	r25, r21
    19fa:	55 0b       	sbc	r21, r21
    19fc:	bb 27       	eor	r27, r27
    19fe:	aa 27       	eor	r26, r26
    1a00:	62 17       	cp	r22, r18
    1a02:	73 07       	cpc	r23, r19
    1a04:	84 07       	cpc	r24, r20
    1a06:	38 f0       	brcs	.+14     	; 0x1a16 <__divsf3_pse+0x26>
    1a08:	9f 5f       	subi	r25, 0xFF	; 255
    1a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0c:	22 0f       	add	r18, r18
    1a0e:	33 1f       	adc	r19, r19
    1a10:	44 1f       	adc	r20, r20
    1a12:	aa 1f       	adc	r26, r26
    1a14:	a9 f3       	breq	.-22     	; 0x1a00 <__divsf3_pse+0x10>
    1a16:	33 d0       	rcall	.+102    	; 0x1a7e <__divsf3_pse+0x8e>
    1a18:	0e 2e       	mov	r0, r30
    1a1a:	3a f0       	brmi	.+14     	; 0x1a2a <__divsf3_pse+0x3a>
    1a1c:	e0 e8       	ldi	r30, 0x80	; 128
    1a1e:	30 d0       	rcall	.+96     	; 0x1a80 <__divsf3_pse+0x90>
    1a20:	91 50       	subi	r25, 0x01	; 1
    1a22:	50 40       	sbci	r21, 0x00	; 0
    1a24:	e6 95       	lsr	r30
    1a26:	00 1c       	adc	r0, r0
    1a28:	ca f7       	brpl	.-14     	; 0x1a1c <__divsf3_pse+0x2c>
    1a2a:	29 d0       	rcall	.+82     	; 0x1a7e <__divsf3_pse+0x8e>
    1a2c:	fe 2f       	mov	r31, r30
    1a2e:	27 d0       	rcall	.+78     	; 0x1a7e <__divsf3_pse+0x8e>
    1a30:	66 0f       	add	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	bb 1f       	adc	r27, r27
    1a38:	26 17       	cp	r18, r22
    1a3a:	37 07       	cpc	r19, r23
    1a3c:	48 07       	cpc	r20, r24
    1a3e:	ab 07       	cpc	r26, r27
    1a40:	b0 e8       	ldi	r27, 0x80	; 128
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <__divsf3_pse+0x56>
    1a44:	bb 0b       	sbc	r27, r27
    1a46:	80 2d       	mov	r24, r0
    1a48:	bf 01       	movw	r22, r30
    1a4a:	ff 27       	eor	r31, r31
    1a4c:	93 58       	subi	r25, 0x83	; 131
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a50:	2a f0       	brmi	.+10     	; 0x1a5c <__divsf3_pse+0x6c>
    1a52:	9e 3f       	cpi	r25, 0xFE	; 254
    1a54:	51 05       	cpc	r21, r1
    1a56:	68 f0       	brcs	.+26     	; 0x1a72 <__divsf3_pse+0x82>
    1a58:	b6 c0       	rjmp	.+364    	; 0x1bc6 <__fp_inf>
    1a5a:	00 c1       	rjmp	.+512    	; 0x1c5c <__fp_szero>
    1a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5e:	ec f3       	brlt	.-6      	; 0x1a5a <__divsf3_pse+0x6a>
    1a60:	98 3e       	cpi	r25, 0xE8	; 232
    1a62:	dc f3       	brlt	.-10     	; 0x1a5a <__divsf3_pse+0x6a>
    1a64:	86 95       	lsr	r24
    1a66:	77 95       	ror	r23
    1a68:	67 95       	ror	r22
    1a6a:	b7 95       	ror	r27
    1a6c:	f7 95       	ror	r31
    1a6e:	9f 5f       	subi	r25, 0xFF	; 255
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <__divsf3_pse+0x74>
    1a72:	88 0f       	add	r24, r24
    1a74:	91 1d       	adc	r25, r1
    1a76:	96 95       	lsr	r25
    1a78:	87 95       	ror	r24
    1a7a:	97 f9       	bld	r25, 7
    1a7c:	08 95       	ret
    1a7e:	e1 e0       	ldi	r30, 0x01	; 1
    1a80:	66 0f       	add	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	88 1f       	adc	r24, r24
    1a86:	bb 1f       	adc	r27, r27
    1a88:	62 17       	cp	r22, r18
    1a8a:	73 07       	cpc	r23, r19
    1a8c:	84 07       	cpc	r24, r20
    1a8e:	ba 07       	cpc	r27, r26
    1a90:	20 f0       	brcs	.+8      	; 0x1a9a <__divsf3_pse+0xaa>
    1a92:	62 1b       	sub	r22, r18
    1a94:	73 0b       	sbc	r23, r19
    1a96:	84 0b       	sbc	r24, r20
    1a98:	ba 0b       	sbc	r27, r26
    1a9a:	ee 1f       	adc	r30, r30
    1a9c:	88 f7       	brcc	.-30     	; 0x1a80 <__divsf3_pse+0x90>
    1a9e:	e0 95       	com	r30
    1aa0:	08 95       	ret

00001aa2 <__fixsfsi>:
    1aa2:	04 d0       	rcall	.+8      	; 0x1aac <__fixunssfsi>
    1aa4:	68 94       	set
    1aa6:	b1 11       	cpse	r27, r1
    1aa8:	d9 c0       	rjmp	.+434    	; 0x1c5c <__fp_szero>
    1aaa:	08 95       	ret

00001aac <__fixunssfsi>:
    1aac:	bc d0       	rcall	.+376    	; 0x1c26 <__fp_splitA>
    1aae:	88 f0       	brcs	.+34     	; 0x1ad2 <__fixunssfsi+0x26>
    1ab0:	9f 57       	subi	r25, 0x7F	; 127
    1ab2:	90 f0       	brcs	.+36     	; 0x1ad8 <__fixunssfsi+0x2c>
    1ab4:	b9 2f       	mov	r27, r25
    1ab6:	99 27       	eor	r25, r25
    1ab8:	b7 51       	subi	r27, 0x17	; 23
    1aba:	a0 f0       	brcs	.+40     	; 0x1ae4 <__fixunssfsi+0x38>
    1abc:	d1 f0       	breq	.+52     	; 0x1af2 <__fixunssfsi+0x46>
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	1a f0       	brmi	.+6      	; 0x1ace <__fixunssfsi+0x22>
    1ac8:	ba 95       	dec	r27
    1aca:	c9 f7       	brne	.-14     	; 0x1abe <__fixunssfsi+0x12>
    1acc:	12 c0       	rjmp	.+36     	; 0x1af2 <__fixunssfsi+0x46>
    1ace:	b1 30       	cpi	r27, 0x01	; 1
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <__fixunssfsi+0x46>
    1ad2:	c3 d0       	rcall	.+390    	; 0x1c5a <__fp_zero>
    1ad4:	b1 e0       	ldi	r27, 0x01	; 1
    1ad6:	08 95       	ret
    1ad8:	c0 c0       	rjmp	.+384    	; 0x1c5a <__fp_zero>
    1ada:	67 2f       	mov	r22, r23
    1adc:	78 2f       	mov	r23, r24
    1ade:	88 27       	eor	r24, r24
    1ae0:	b8 5f       	subi	r27, 0xF8	; 248
    1ae2:	39 f0       	breq	.+14     	; 0x1af2 <__fixunssfsi+0x46>
    1ae4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ae6:	cc f3       	brlt	.-14     	; 0x1ada <__fixunssfsi+0x2e>
    1ae8:	86 95       	lsr	r24
    1aea:	77 95       	ror	r23
    1aec:	67 95       	ror	r22
    1aee:	b3 95       	inc	r27
    1af0:	d9 f7       	brne	.-10     	; 0x1ae8 <__fixunssfsi+0x3c>
    1af2:	3e f4       	brtc	.+14     	; 0x1b02 <__fixunssfsi+0x56>
    1af4:	90 95       	com	r25
    1af6:	80 95       	com	r24
    1af8:	70 95       	com	r23
    1afa:	61 95       	neg	r22
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	8f 4f       	sbci	r24, 0xFF	; 255
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	08 95       	ret

00001b04 <__floatunsisf>:
    1b04:	e8 94       	clt
    1b06:	09 c0       	rjmp	.+18     	; 0x1b1a <__floatsisf+0x12>

00001b08 <__floatsisf>:
    1b08:	97 fb       	bst	r25, 7
    1b0a:	3e f4       	brtc	.+14     	; 0x1b1a <__floatsisf+0x12>
    1b0c:	90 95       	com	r25
    1b0e:	80 95       	com	r24
    1b10:	70 95       	com	r23
    1b12:	61 95       	neg	r22
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	8f 4f       	sbci	r24, 0xFF	; 255
    1b18:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1a:	99 23       	and	r25, r25
    1b1c:	a9 f0       	breq	.+42     	; 0x1b48 <__floatsisf+0x40>
    1b1e:	f9 2f       	mov	r31, r25
    1b20:	96 e9       	ldi	r25, 0x96	; 150
    1b22:	bb 27       	eor	r27, r27
    1b24:	93 95       	inc	r25
    1b26:	f6 95       	lsr	r31
    1b28:	87 95       	ror	r24
    1b2a:	77 95       	ror	r23
    1b2c:	67 95       	ror	r22
    1b2e:	b7 95       	ror	r27
    1b30:	f1 11       	cpse	r31, r1
    1b32:	f8 cf       	rjmp	.-16     	; 0x1b24 <__floatsisf+0x1c>
    1b34:	fa f4       	brpl	.+62     	; 0x1b74 <__floatsisf+0x6c>
    1b36:	bb 0f       	add	r27, r27
    1b38:	11 f4       	brne	.+4      	; 0x1b3e <__floatsisf+0x36>
    1b3a:	60 ff       	sbrs	r22, 0
    1b3c:	1b c0       	rjmp	.+54     	; 0x1b74 <__floatsisf+0x6c>
    1b3e:	6f 5f       	subi	r22, 0xFF	; 255
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	8f 4f       	sbci	r24, 0xFF	; 255
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	16 c0       	rjmp	.+44     	; 0x1b74 <__floatsisf+0x6c>
    1b48:	88 23       	and	r24, r24
    1b4a:	11 f0       	breq	.+4      	; 0x1b50 <__floatsisf+0x48>
    1b4c:	96 e9       	ldi	r25, 0x96	; 150
    1b4e:	11 c0       	rjmp	.+34     	; 0x1b72 <__floatsisf+0x6a>
    1b50:	77 23       	and	r23, r23
    1b52:	21 f0       	breq	.+8      	; 0x1b5c <__floatsisf+0x54>
    1b54:	9e e8       	ldi	r25, 0x8E	; 142
    1b56:	87 2f       	mov	r24, r23
    1b58:	76 2f       	mov	r23, r22
    1b5a:	05 c0       	rjmp	.+10     	; 0x1b66 <__floatsisf+0x5e>
    1b5c:	66 23       	and	r22, r22
    1b5e:	71 f0       	breq	.+28     	; 0x1b7c <__floatsisf+0x74>
    1b60:	96 e8       	ldi	r25, 0x86	; 134
    1b62:	86 2f       	mov	r24, r22
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	2a f0       	brmi	.+10     	; 0x1b74 <__floatsisf+0x6c>
    1b6a:	9a 95       	dec	r25
    1b6c:	66 0f       	add	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	da f7       	brpl	.-10     	; 0x1b6a <__floatsisf+0x62>
    1b74:	88 0f       	add	r24, r24
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
    1b7a:	97 f9       	bld	r25, 7
    1b7c:	08 95       	ret

00001b7e <__fp_cmp>:
    1b7e:	99 0f       	add	r25, r25
    1b80:	00 08       	sbc	r0, r0
    1b82:	55 0f       	add	r21, r21
    1b84:	aa 0b       	sbc	r26, r26
    1b86:	e0 e8       	ldi	r30, 0x80	; 128
    1b88:	fe ef       	ldi	r31, 0xFE	; 254
    1b8a:	16 16       	cp	r1, r22
    1b8c:	17 06       	cpc	r1, r23
    1b8e:	e8 07       	cpc	r30, r24
    1b90:	f9 07       	cpc	r31, r25
    1b92:	c0 f0       	brcs	.+48     	; 0x1bc4 <__fp_cmp+0x46>
    1b94:	12 16       	cp	r1, r18
    1b96:	13 06       	cpc	r1, r19
    1b98:	e4 07       	cpc	r30, r20
    1b9a:	f5 07       	cpc	r31, r21
    1b9c:	98 f0       	brcs	.+38     	; 0x1bc4 <__fp_cmp+0x46>
    1b9e:	62 1b       	sub	r22, r18
    1ba0:	73 0b       	sbc	r23, r19
    1ba2:	84 0b       	sbc	r24, r20
    1ba4:	95 0b       	sbc	r25, r21
    1ba6:	39 f4       	brne	.+14     	; 0x1bb6 <__fp_cmp+0x38>
    1ba8:	0a 26       	eor	r0, r26
    1baa:	61 f0       	breq	.+24     	; 0x1bc4 <__fp_cmp+0x46>
    1bac:	23 2b       	or	r18, r19
    1bae:	24 2b       	or	r18, r20
    1bb0:	25 2b       	or	r18, r21
    1bb2:	21 f4       	brne	.+8      	; 0x1bbc <__fp_cmp+0x3e>
    1bb4:	08 95       	ret
    1bb6:	0a 26       	eor	r0, r26
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <__fp_cmp+0x3e>
    1bba:	a1 40       	sbci	r26, 0x01	; 1
    1bbc:	a6 95       	lsr	r26
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	81 1d       	adc	r24, r1
    1bc2:	81 1d       	adc	r24, r1
    1bc4:	08 95       	ret

00001bc6 <__fp_inf>:
    1bc6:	97 f9       	bld	r25, 7
    1bc8:	9f 67       	ori	r25, 0x7F	; 127
    1bca:	80 e8       	ldi	r24, 0x80	; 128
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	08 95       	ret

00001bd2 <__fp_nan>:
    1bd2:	9f ef       	ldi	r25, 0xFF	; 255
    1bd4:	80 ec       	ldi	r24, 0xC0	; 192
    1bd6:	08 95       	ret

00001bd8 <__fp_pscA>:
    1bd8:	00 24       	eor	r0, r0
    1bda:	0a 94       	dec	r0
    1bdc:	16 16       	cp	r1, r22
    1bde:	17 06       	cpc	r1, r23
    1be0:	18 06       	cpc	r1, r24
    1be2:	09 06       	cpc	r0, r25
    1be4:	08 95       	ret

00001be6 <__fp_pscB>:
    1be6:	00 24       	eor	r0, r0
    1be8:	0a 94       	dec	r0
    1bea:	12 16       	cp	r1, r18
    1bec:	13 06       	cpc	r1, r19
    1bee:	14 06       	cpc	r1, r20
    1bf0:	05 06       	cpc	r0, r21
    1bf2:	08 95       	ret

00001bf4 <__fp_round>:
    1bf4:	09 2e       	mov	r0, r25
    1bf6:	03 94       	inc	r0
    1bf8:	00 0c       	add	r0, r0
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <__fp_round+0xc>
    1bfc:	88 23       	and	r24, r24
    1bfe:	52 f0       	brmi	.+20     	; 0x1c14 <__fp_round+0x20>
    1c00:	bb 0f       	add	r27, r27
    1c02:	40 f4       	brcc	.+16     	; 0x1c14 <__fp_round+0x20>
    1c04:	bf 2b       	or	r27, r31
    1c06:	11 f4       	brne	.+4      	; 0x1c0c <__fp_round+0x18>
    1c08:	60 ff       	sbrs	r22, 0
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14 <__fp_round+0x20>
    1c0c:	6f 5f       	subi	r22, 0xFF	; 255
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	8f 4f       	sbci	r24, 0xFF	; 255
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	08 95       	ret

00001c16 <__fp_split3>:
    1c16:	57 fd       	sbrc	r21, 7
    1c18:	90 58       	subi	r25, 0x80	; 128
    1c1a:	44 0f       	add	r20, r20
    1c1c:	55 1f       	adc	r21, r21
    1c1e:	59 f0       	breq	.+22     	; 0x1c36 <__fp_splitA+0x10>
    1c20:	5f 3f       	cpi	r21, 0xFF	; 255
    1c22:	71 f0       	breq	.+28     	; 0x1c40 <__fp_splitA+0x1a>
    1c24:	47 95       	ror	r20

00001c26 <__fp_splitA>:
    1c26:	88 0f       	add	r24, r24
    1c28:	97 fb       	bst	r25, 7
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	61 f0       	breq	.+24     	; 0x1c46 <__fp_splitA+0x20>
    1c2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c30:	79 f0       	breq	.+30     	; 0x1c50 <__fp_splitA+0x2a>
    1c32:	87 95       	ror	r24
    1c34:	08 95       	ret
    1c36:	12 16       	cp	r1, r18
    1c38:	13 06       	cpc	r1, r19
    1c3a:	14 06       	cpc	r1, r20
    1c3c:	55 1f       	adc	r21, r21
    1c3e:	f2 cf       	rjmp	.-28     	; 0x1c24 <__fp_split3+0xe>
    1c40:	46 95       	lsr	r20
    1c42:	f1 df       	rcall	.-30     	; 0x1c26 <__fp_splitA>
    1c44:	08 c0       	rjmp	.+16     	; 0x1c56 <__fp_splitA+0x30>
    1c46:	16 16       	cp	r1, r22
    1c48:	17 06       	cpc	r1, r23
    1c4a:	18 06       	cpc	r1, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	f1 cf       	rjmp	.-30     	; 0x1c32 <__fp_splitA+0xc>
    1c50:	86 95       	lsr	r24
    1c52:	71 05       	cpc	r23, r1
    1c54:	61 05       	cpc	r22, r1
    1c56:	08 94       	sec
    1c58:	08 95       	ret

00001c5a <__fp_zero>:
    1c5a:	e8 94       	clt

00001c5c <__fp_szero>:
    1c5c:	bb 27       	eor	r27, r27
    1c5e:	66 27       	eor	r22, r22
    1c60:	77 27       	eor	r23, r23
    1c62:	cb 01       	movw	r24, r22
    1c64:	97 f9       	bld	r25, 7
    1c66:	08 95       	ret

00001c68 <__gesf2>:
    1c68:	8a df       	rcall	.-236    	; 0x1b7e <__fp_cmp>
    1c6a:	08 f4       	brcc	.+2      	; 0x1c6e <__gesf2+0x6>
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	08 95       	ret

00001c70 <__mulsf3>:
    1c70:	0b d0       	rcall	.+22     	; 0x1c88 <__mulsf3x>
    1c72:	c0 cf       	rjmp	.-128    	; 0x1bf4 <__fp_round>
    1c74:	b1 df       	rcall	.-158    	; 0x1bd8 <__fp_pscA>
    1c76:	28 f0       	brcs	.+10     	; 0x1c82 <__mulsf3+0x12>
    1c78:	b6 df       	rcall	.-148    	; 0x1be6 <__fp_pscB>
    1c7a:	18 f0       	brcs	.+6      	; 0x1c82 <__mulsf3+0x12>
    1c7c:	95 23       	and	r25, r21
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <__mulsf3+0x12>
    1c80:	a2 cf       	rjmp	.-188    	; 0x1bc6 <__fp_inf>
    1c82:	a7 cf       	rjmp	.-178    	; 0x1bd2 <__fp_nan>
    1c84:	11 24       	eor	r1, r1
    1c86:	ea cf       	rjmp	.-44     	; 0x1c5c <__fp_szero>

00001c88 <__mulsf3x>:
    1c88:	c6 df       	rcall	.-116    	; 0x1c16 <__fp_split3>
    1c8a:	a0 f3       	brcs	.-24     	; 0x1c74 <__mulsf3+0x4>

00001c8c <__mulsf3_pse>:
    1c8c:	95 9f       	mul	r25, r21
    1c8e:	d1 f3       	breq	.-12     	; 0x1c84 <__mulsf3+0x14>
    1c90:	95 0f       	add	r25, r21
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	55 1f       	adc	r21, r21
    1c96:	62 9f       	mul	r22, r18
    1c98:	f0 01       	movw	r30, r0
    1c9a:	72 9f       	mul	r23, r18
    1c9c:	bb 27       	eor	r27, r27
    1c9e:	f0 0d       	add	r31, r0
    1ca0:	b1 1d       	adc	r27, r1
    1ca2:	63 9f       	mul	r22, r19
    1ca4:	aa 27       	eor	r26, r26
    1ca6:	f0 0d       	add	r31, r0
    1ca8:	b1 1d       	adc	r27, r1
    1caa:	aa 1f       	adc	r26, r26
    1cac:	64 9f       	mul	r22, r20
    1cae:	66 27       	eor	r22, r22
    1cb0:	b0 0d       	add	r27, r0
    1cb2:	a1 1d       	adc	r26, r1
    1cb4:	66 1f       	adc	r22, r22
    1cb6:	82 9f       	mul	r24, r18
    1cb8:	22 27       	eor	r18, r18
    1cba:	b0 0d       	add	r27, r0
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	62 1f       	adc	r22, r18
    1cc0:	73 9f       	mul	r23, r19
    1cc2:	b0 0d       	add	r27, r0
    1cc4:	a1 1d       	adc	r26, r1
    1cc6:	62 1f       	adc	r22, r18
    1cc8:	83 9f       	mul	r24, r19
    1cca:	a0 0d       	add	r26, r0
    1ccc:	61 1d       	adc	r22, r1
    1cce:	22 1f       	adc	r18, r18
    1cd0:	74 9f       	mul	r23, r20
    1cd2:	33 27       	eor	r19, r19
    1cd4:	a0 0d       	add	r26, r0
    1cd6:	61 1d       	adc	r22, r1
    1cd8:	23 1f       	adc	r18, r19
    1cda:	84 9f       	mul	r24, r20
    1cdc:	60 0d       	add	r22, r0
    1cde:	21 1d       	adc	r18, r1
    1ce0:	82 2f       	mov	r24, r18
    1ce2:	76 2f       	mov	r23, r22
    1ce4:	6a 2f       	mov	r22, r26
    1ce6:	11 24       	eor	r1, r1
    1ce8:	9f 57       	subi	r25, 0x7F	; 127
    1cea:	50 40       	sbci	r21, 0x00	; 0
    1cec:	8a f0       	brmi	.+34     	; 0x1d10 <__mulsf3_pse+0x84>
    1cee:	e1 f0       	breq	.+56     	; 0x1d28 <__mulsf3_pse+0x9c>
    1cf0:	88 23       	and	r24, r24
    1cf2:	4a f0       	brmi	.+18     	; 0x1d06 <__mulsf3_pse+0x7a>
    1cf4:	ee 0f       	add	r30, r30
    1cf6:	ff 1f       	adc	r31, r31
    1cf8:	bb 1f       	adc	r27, r27
    1cfa:	66 1f       	adc	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	88 1f       	adc	r24, r24
    1d00:	91 50       	subi	r25, 0x01	; 1
    1d02:	50 40       	sbci	r21, 0x00	; 0
    1d04:	a9 f7       	brne	.-22     	; 0x1cf0 <__mulsf3_pse+0x64>
    1d06:	9e 3f       	cpi	r25, 0xFE	; 254
    1d08:	51 05       	cpc	r21, r1
    1d0a:	70 f0       	brcs	.+28     	; 0x1d28 <__mulsf3_pse+0x9c>
    1d0c:	5c cf       	rjmp	.-328    	; 0x1bc6 <__fp_inf>
    1d0e:	a6 cf       	rjmp	.-180    	; 0x1c5c <__fp_szero>
    1d10:	5f 3f       	cpi	r21, 0xFF	; 255
    1d12:	ec f3       	brlt	.-6      	; 0x1d0e <__mulsf3_pse+0x82>
    1d14:	98 3e       	cpi	r25, 0xE8	; 232
    1d16:	dc f3       	brlt	.-10     	; 0x1d0e <__mulsf3_pse+0x82>
    1d18:	86 95       	lsr	r24
    1d1a:	77 95       	ror	r23
    1d1c:	67 95       	ror	r22
    1d1e:	b7 95       	ror	r27
    1d20:	f7 95       	ror	r31
    1d22:	e7 95       	ror	r30
    1d24:	9f 5f       	subi	r25, 0xFF	; 255
    1d26:	c1 f7       	brne	.-16     	; 0x1d18 <__mulsf3_pse+0x8c>
    1d28:	fe 2b       	or	r31, r30
    1d2a:	88 0f       	add	r24, r24
    1d2c:	91 1d       	adc	r25, r1
    1d2e:	96 95       	lsr	r25
    1d30:	87 95       	ror	r24
    1d32:	97 f9       	bld	r25, 7
    1d34:	08 95       	ret

00001d36 <pow>:
    1d36:	fa 01       	movw	r30, r20
    1d38:	ee 0f       	add	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	30 96       	adiw	r30, 0x00	; 0
    1d3e:	21 05       	cpc	r18, r1
    1d40:	31 05       	cpc	r19, r1
    1d42:	99 f1       	breq	.+102    	; 0x1daa <pow+0x74>
    1d44:	61 15       	cp	r22, r1
    1d46:	71 05       	cpc	r23, r1
    1d48:	61 f4       	brne	.+24     	; 0x1d62 <pow+0x2c>
    1d4a:	80 38       	cpi	r24, 0x80	; 128
    1d4c:	bf e3       	ldi	r27, 0x3F	; 63
    1d4e:	9b 07       	cpc	r25, r27
    1d50:	49 f1       	breq	.+82     	; 0x1da4 <pow+0x6e>
    1d52:	68 94       	set
    1d54:	90 38       	cpi	r25, 0x80	; 128
    1d56:	81 05       	cpc	r24, r1
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <pow+0x3c>
    1d5a:	80 38       	cpi	r24, 0x80	; 128
    1d5c:	bf ef       	ldi	r27, 0xFF	; 255
    1d5e:	9b 07       	cpc	r25, r27
    1d60:	41 f0       	breq	.+16     	; 0x1d72 <pow+0x3c>
    1d62:	99 23       	and	r25, r25
    1d64:	42 f5       	brpl	.+80     	; 0x1db6 <pow+0x80>
    1d66:	ff 3f       	cpi	r31, 0xFF	; 255
    1d68:	e1 05       	cpc	r30, r1
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	21 05       	cpc	r18, r1
    1d6e:	11 f1       	breq	.+68     	; 0x1db4 <pow+0x7e>
    1d70:	e8 94       	clt
    1d72:	08 94       	sec
    1d74:	e7 95       	ror	r30
    1d76:	d9 01       	movw	r26, r18
    1d78:	aa 23       	and	r26, r26
    1d7a:	29 f4       	brne	.+10     	; 0x1d86 <pow+0x50>
    1d7c:	ab 2f       	mov	r26, r27
    1d7e:	be 2f       	mov	r27, r30
    1d80:	f8 5f       	subi	r31, 0xF8	; 248
    1d82:	d0 f3       	brcs	.-12     	; 0x1d78 <pow+0x42>
    1d84:	10 c0       	rjmp	.+32     	; 0x1da6 <pow+0x70>
    1d86:	ff 5f       	subi	r31, 0xFF	; 255
    1d88:	70 f4       	brcc	.+28     	; 0x1da6 <pow+0x70>
    1d8a:	a6 95       	lsr	r26
    1d8c:	e0 f7       	brcc	.-8      	; 0x1d86 <pow+0x50>
    1d8e:	f7 39       	cpi	r31, 0x97	; 151
    1d90:	50 f0       	brcs	.+20     	; 0x1da6 <pow+0x70>
    1d92:	19 f0       	breq	.+6      	; 0x1d9a <pow+0x64>
    1d94:	ff 3a       	cpi	r31, 0xAF	; 175
    1d96:	38 f4       	brcc	.+14     	; 0x1da6 <pow+0x70>
    1d98:	9f 77       	andi	r25, 0x7F	; 127
    1d9a:	9f 93       	push	r25
    1d9c:	0c d0       	rcall	.+24     	; 0x1db6 <pow+0x80>
    1d9e:	0f 90       	pop	r0
    1da0:	07 fc       	sbrc	r0, 7
    1da2:	90 58       	subi	r25, 0x80	; 128
    1da4:	08 95       	ret
    1da6:	3e f0       	brts	.+14     	; 0x1db6 <pow+0x80>
    1da8:	14 cf       	rjmp	.-472    	; 0x1bd2 <__fp_nan>
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	80 e8       	ldi	r24, 0x80	; 128
    1db0:	9f e3       	ldi	r25, 0x3F	; 63
    1db2:	08 95       	ret
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	9f 77       	andi	r25, 0x7F	; 127
    1db8:	5f 93       	push	r21
    1dba:	4f 93       	push	r20
    1dbc:	3f 93       	push	r19
    1dbe:	2f 93       	push	r18
    1dc0:	9e d0       	rcall	.+316    	; 0x1efe <log>
    1dc2:	2f 91       	pop	r18
    1dc4:	3f 91       	pop	r19
    1dc6:	4f 91       	pop	r20
    1dc8:	5f 91       	pop	r21
    1dca:	52 df       	rcall	.-348    	; 0x1c70 <__mulsf3>
    1dcc:	05 c0       	rjmp	.+10     	; 0x1dd8 <exp>
    1dce:	19 f4       	brne	.+6      	; 0x1dd6 <pow+0xa0>
    1dd0:	0e f0       	brts	.+2      	; 0x1dd4 <pow+0x9e>
    1dd2:	f9 ce       	rjmp	.-526    	; 0x1bc6 <__fp_inf>
    1dd4:	42 cf       	rjmp	.-380    	; 0x1c5a <__fp_zero>
    1dd6:	fd ce       	rjmp	.-518    	; 0x1bd2 <__fp_nan>

00001dd8 <exp>:
    1dd8:	26 df       	rcall	.-436    	; 0x1c26 <__fp_splitA>
    1dda:	c8 f3       	brcs	.-14     	; 0x1dce <pow+0x98>
    1ddc:	96 38       	cpi	r25, 0x86	; 134
    1dde:	c0 f7       	brcc	.-16     	; 0x1dd0 <pow+0x9a>
    1de0:	07 f8       	bld	r0, 7
    1de2:	0f 92       	push	r0
    1de4:	e8 94       	clt
    1de6:	2b e3       	ldi	r18, 0x3B	; 59
    1de8:	3a ea       	ldi	r19, 0xAA	; 170
    1dea:	48 eb       	ldi	r20, 0xB8	; 184
    1dec:	5f e7       	ldi	r21, 0x7F	; 127
    1dee:	4e df       	rcall	.-356    	; 0x1c8c <__mulsf3_pse>
    1df0:	0f 92       	push	r0
    1df2:	0f 92       	push	r0
    1df4:	0f 92       	push	r0
    1df6:	4d b7       	in	r20, 0x3d	; 61
    1df8:	5e b7       	in	r21, 0x3e	; 62
    1dfa:	0f 92       	push	r0
    1dfc:	c0 d0       	rcall	.+384    	; 0x1f7e <modf>
    1dfe:	ec ef       	ldi	r30, 0xFC	; 252
    1e00:	f1 e0       	ldi	r31, 0x01	; 1
    1e02:	16 d0       	rcall	.+44     	; 0x1e30 <__fp_powser>
    1e04:	4f 91       	pop	r20
    1e06:	5f 91       	pop	r21
    1e08:	ef 91       	pop	r30
    1e0a:	ff 91       	pop	r31
    1e0c:	e5 95       	asr	r30
    1e0e:	ee 1f       	adc	r30, r30
    1e10:	ff 1f       	adc	r31, r31
    1e12:	49 f0       	breq	.+18     	; 0x1e26 <exp+0x4e>
    1e14:	fe 57       	subi	r31, 0x7E	; 126
    1e16:	e0 68       	ori	r30, 0x80	; 128
    1e18:	44 27       	eor	r20, r20
    1e1a:	ee 0f       	add	r30, r30
    1e1c:	44 1f       	adc	r20, r20
    1e1e:	fa 95       	dec	r31
    1e20:	e1 f7       	brne	.-8      	; 0x1e1a <exp+0x42>
    1e22:	41 95       	neg	r20
    1e24:	55 0b       	sbc	r21, r21
    1e26:	32 d0       	rcall	.+100    	; 0x1e8c <ldexp>
    1e28:	0f 90       	pop	r0
    1e2a:	07 fe       	sbrs	r0, 7
    1e2c:	26 c0       	rjmp	.+76     	; 0x1e7a <inverse>
    1e2e:	08 95       	ret

00001e30 <__fp_powser>:
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	1f 93       	push	r17
    1e36:	0f 93       	push	r16
    1e38:	ff 92       	push	r15
    1e3a:	ef 92       	push	r14
    1e3c:	df 92       	push	r13
    1e3e:	7b 01       	movw	r14, r22
    1e40:	8c 01       	movw	r16, r24
    1e42:	68 94       	set
    1e44:	05 c0       	rjmp	.+10     	; 0x1e50 <__fp_powser+0x20>
    1e46:	da 2e       	mov	r13, r26
    1e48:	ef 01       	movw	r28, r30
    1e4a:	1e df       	rcall	.-452    	; 0x1c88 <__mulsf3x>
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e8 94       	clt
    1e50:	a5 91       	lpm	r26, Z+
    1e52:	25 91       	lpm	r18, Z+
    1e54:	35 91       	lpm	r19, Z+
    1e56:	45 91       	lpm	r20, Z+
    1e58:	55 91       	lpm	r21, Z+
    1e5a:	ae f3       	brts	.-22     	; 0x1e46 <__fp_powser+0x16>
    1e5c:	ef 01       	movw	r28, r30
    1e5e:	62 dd       	rcall	.-1340   	; 0x1924 <__addsf3x>
    1e60:	fe 01       	movw	r30, r28
    1e62:	97 01       	movw	r18, r14
    1e64:	a8 01       	movw	r20, r16
    1e66:	da 94       	dec	r13
    1e68:	79 f7       	brne	.-34     	; 0x1e48 <__fp_powser+0x18>
    1e6a:	df 90       	pop	r13
    1e6c:	ef 90       	pop	r14
    1e6e:	ff 90       	pop	r15
    1e70:	0f 91       	pop	r16
    1e72:	1f 91       	pop	r17
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <inverse>:
    1e7a:	9b 01       	movw	r18, r22
    1e7c:	ac 01       	movw	r20, r24
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	80 e8       	ldi	r24, 0x80	; 128
    1e84:	9f e3       	ldi	r25, 0x3F	; 63
    1e86:	a5 cd       	rjmp	.-1206   	; 0x19d2 <__divsf3>
    1e88:	9e ce       	rjmp	.-708    	; 0x1bc6 <__fp_inf>
    1e8a:	ac c0       	rjmp	.+344    	; 0x1fe4 <__fp_mpack>

00001e8c <ldexp>:
    1e8c:	cc de       	rcall	.-616    	; 0x1c26 <__fp_splitA>
    1e8e:	e8 f3       	brcs	.-6      	; 0x1e8a <inverse+0x10>
    1e90:	99 23       	and	r25, r25
    1e92:	d9 f3       	breq	.-10     	; 0x1e8a <inverse+0x10>
    1e94:	94 0f       	add	r25, r20
    1e96:	51 1d       	adc	r21, r1
    1e98:	bb f3       	brvs	.-18     	; 0x1e88 <inverse+0xe>
    1e9a:	91 50       	subi	r25, 0x01	; 1
    1e9c:	50 40       	sbci	r21, 0x00	; 0
    1e9e:	94 f0       	brlt	.+36     	; 0x1ec4 <ldexp+0x38>
    1ea0:	59 f0       	breq	.+22     	; 0x1eb8 <ldexp+0x2c>
    1ea2:	88 23       	and	r24, r24
    1ea4:	32 f0       	brmi	.+12     	; 0x1eb2 <ldexp+0x26>
    1ea6:	66 0f       	add	r22, r22
    1ea8:	77 1f       	adc	r23, r23
    1eaa:	88 1f       	adc	r24, r24
    1eac:	91 50       	subi	r25, 0x01	; 1
    1eae:	50 40       	sbci	r21, 0x00	; 0
    1eb0:	c1 f7       	brne	.-16     	; 0x1ea2 <ldexp+0x16>
    1eb2:	9e 3f       	cpi	r25, 0xFE	; 254
    1eb4:	51 05       	cpc	r21, r1
    1eb6:	44 f7       	brge	.-48     	; 0x1e88 <inverse+0xe>
    1eb8:	88 0f       	add	r24, r24
    1eba:	91 1d       	adc	r25, r1
    1ebc:	96 95       	lsr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	97 f9       	bld	r25, 7
    1ec2:	08 95       	ret
    1ec4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec6:	ac f0       	brlt	.+42     	; 0x1ef2 <ldexp+0x66>
    1ec8:	98 3e       	cpi	r25, 0xE8	; 232
    1eca:	9c f0       	brlt	.+38     	; 0x1ef2 <ldexp+0x66>
    1ecc:	bb 27       	eor	r27, r27
    1ece:	86 95       	lsr	r24
    1ed0:	77 95       	ror	r23
    1ed2:	67 95       	ror	r22
    1ed4:	b7 95       	ror	r27
    1ed6:	08 f4       	brcc	.+2      	; 0x1eda <ldexp+0x4e>
    1ed8:	b1 60       	ori	r27, 0x01	; 1
    1eda:	93 95       	inc	r25
    1edc:	c1 f7       	brne	.-16     	; 0x1ece <ldexp+0x42>
    1ede:	bb 0f       	add	r27, r27
    1ee0:	58 f7       	brcc	.-42     	; 0x1eb8 <ldexp+0x2c>
    1ee2:	11 f4       	brne	.+4      	; 0x1ee8 <ldexp+0x5c>
    1ee4:	60 ff       	sbrs	r22, 0
    1ee6:	e8 cf       	rjmp	.-48     	; 0x1eb8 <ldexp+0x2c>
    1ee8:	6f 5f       	subi	r22, 0xFF	; 255
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	8f 4f       	sbci	r24, 0xFF	; 255
    1eee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef0:	e3 cf       	rjmp	.-58     	; 0x1eb8 <ldexp+0x2c>
    1ef2:	b4 ce       	rjmp	.-664    	; 0x1c5c <__fp_szero>
    1ef4:	0e f0       	brts	.+2      	; 0x1ef8 <ldexp+0x6c>
    1ef6:	76 c0       	rjmp	.+236    	; 0x1fe4 <__fp_mpack>
    1ef8:	6c ce       	rjmp	.-808    	; 0x1bd2 <__fp_nan>
    1efa:	68 94       	set
    1efc:	64 ce       	rjmp	.-824    	; 0x1bc6 <__fp_inf>

00001efe <log>:
    1efe:	93 de       	rcall	.-730    	; 0x1c26 <__fp_splitA>
    1f00:	c8 f3       	brcs	.-14     	; 0x1ef4 <ldexp+0x68>
    1f02:	99 23       	and	r25, r25
    1f04:	d1 f3       	breq	.-12     	; 0x1efa <ldexp+0x6e>
    1f06:	c6 f3       	brts	.-16     	; 0x1ef8 <ldexp+0x6c>
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	1f 93       	push	r17
    1f0e:	0f 93       	push	r16
    1f10:	ff 92       	push	r15
    1f12:	c9 2f       	mov	r28, r25
    1f14:	dd 27       	eor	r29, r29
    1f16:	88 23       	and	r24, r24
    1f18:	2a f0       	brmi	.+10     	; 0x1f24 <log+0x26>
    1f1a:	21 97       	sbiw	r28, 0x01	; 1
    1f1c:	66 0f       	add	r22, r22
    1f1e:	77 1f       	adc	r23, r23
    1f20:	88 1f       	adc	r24, r24
    1f22:	da f7       	brpl	.-10     	; 0x1f1a <log+0x1c>
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f eb       	ldi	r21, 0xBF	; 191
    1f2c:	9f e3       	ldi	r25, 0x3F	; 63
    1f2e:	88 39       	cpi	r24, 0x98	; 152
    1f30:	20 f0       	brcs	.+8      	; 0x1f3a <log+0x3c>
    1f32:	80 3e       	cpi	r24, 0xE0	; 224
    1f34:	30 f0       	brcs	.+12     	; 0x1f42 <log+0x44>
    1f36:	21 96       	adiw	r28, 0x01	; 1
    1f38:	8f 77       	andi	r24, 0x7F	; 127
    1f3a:	e3 dc       	rcall	.-1594   	; 0x1902 <__addsf3>
    1f3c:	e4 e2       	ldi	r30, 0x24	; 36
    1f3e:	f2 e0       	ldi	r31, 0x02	; 2
    1f40:	03 c0       	rjmp	.+6      	; 0x1f48 <log+0x4a>
    1f42:	df dc       	rcall	.-1602   	; 0x1902 <__addsf3>
    1f44:	e1 e5       	ldi	r30, 0x51	; 81
    1f46:	f2 e0       	ldi	r31, 0x02	; 2
    1f48:	73 df       	rcall	.-282    	; 0x1e30 <__fp_powser>
    1f4a:	8b 01       	movw	r16, r22
    1f4c:	be 01       	movw	r22, r28
    1f4e:	ec 01       	movw	r28, r24
    1f50:	fb 2e       	mov	r15, r27
    1f52:	6f 57       	subi	r22, 0x7F	; 127
    1f54:	71 09       	sbc	r23, r1
    1f56:	75 95       	asr	r23
    1f58:	77 1f       	adc	r23, r23
    1f5a:	88 0b       	sbc	r24, r24
    1f5c:	99 0b       	sbc	r25, r25
    1f5e:	d4 dd       	rcall	.-1112   	; 0x1b08 <__floatsisf>
    1f60:	28 e1       	ldi	r18, 0x18	; 24
    1f62:	32 e7       	ldi	r19, 0x72	; 114
    1f64:	41 e3       	ldi	r20, 0x31	; 49
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	8f de       	rcall	.-738    	; 0x1c88 <__mulsf3x>
    1f6a:	af 2d       	mov	r26, r15
    1f6c:	98 01       	movw	r18, r16
    1f6e:	ae 01       	movw	r20, r28
    1f70:	ff 90       	pop	r15
    1f72:	0f 91       	pop	r16
    1f74:	1f 91       	pop	r17
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	d4 dc       	rcall	.-1624   	; 0x1924 <__addsf3x>
    1f7c:	3b ce       	rjmp	.-906    	; 0x1bf4 <__fp_round>

00001f7e <modf>:
    1f7e:	fa 01       	movw	r30, r20
    1f80:	dc 01       	movw	r26, r24
    1f82:	aa 0f       	add	r26, r26
    1f84:	bb 1f       	adc	r27, r27
    1f86:	9b 01       	movw	r18, r22
    1f88:	ac 01       	movw	r20, r24
    1f8a:	bf 57       	subi	r27, 0x7F	; 127
    1f8c:	28 f4       	brcc	.+10     	; 0x1f98 <modf+0x1a>
    1f8e:	22 27       	eor	r18, r18
    1f90:	33 27       	eor	r19, r19
    1f92:	44 27       	eor	r20, r20
    1f94:	50 78       	andi	r21, 0x80	; 128
    1f96:	1f c0       	rjmp	.+62     	; 0x1fd6 <modf+0x58>
    1f98:	b7 51       	subi	r27, 0x17	; 23
    1f9a:	88 f4       	brcc	.+34     	; 0x1fbe <modf+0x40>
    1f9c:	ab 2f       	mov	r26, r27
    1f9e:	00 24       	eor	r0, r0
    1fa0:	46 95       	lsr	r20
    1fa2:	37 95       	ror	r19
    1fa4:	27 95       	ror	r18
    1fa6:	01 1c       	adc	r0, r1
    1fa8:	a3 95       	inc	r26
    1faa:	d2 f3       	brmi	.-12     	; 0x1fa0 <modf+0x22>
    1fac:	00 20       	and	r0, r0
    1fae:	69 f0       	breq	.+26     	; 0x1fca <modf+0x4c>
    1fb0:	22 0f       	add	r18, r18
    1fb2:	33 1f       	adc	r19, r19
    1fb4:	44 1f       	adc	r20, r20
    1fb6:	b3 95       	inc	r27
    1fb8:	da f3       	brmi	.-10     	; 0x1fb0 <modf+0x32>
    1fba:	0d d0       	rcall	.+26     	; 0x1fd6 <modf+0x58>
    1fbc:	a1 cc       	rjmp	.-1726   	; 0x1900 <__subsf3>
    1fbe:	61 30       	cpi	r22, 0x01	; 1
    1fc0:	71 05       	cpc	r23, r1
    1fc2:	a0 e8       	ldi	r26, 0x80	; 128
    1fc4:	8a 07       	cpc	r24, r26
    1fc6:	b9 46       	sbci	r27, 0x69	; 105
    1fc8:	30 f4       	brcc	.+12     	; 0x1fd6 <modf+0x58>
    1fca:	9b 01       	movw	r18, r22
    1fcc:	ac 01       	movw	r20, r24
    1fce:	66 27       	eor	r22, r22
    1fd0:	77 27       	eor	r23, r23
    1fd2:	88 27       	eor	r24, r24
    1fd4:	90 78       	andi	r25, 0x80	; 128
    1fd6:	30 96       	adiw	r30, 0x00	; 0
    1fd8:	21 f0       	breq	.+8      	; 0x1fe2 <modf+0x64>
    1fda:	20 83       	st	Z, r18
    1fdc:	31 83       	std	Z+1, r19	; 0x01
    1fde:	42 83       	std	Z+2, r20	; 0x02
    1fe0:	53 83       	std	Z+3, r21	; 0x03
    1fe2:	08 95       	ret

00001fe4 <__fp_mpack>:
    1fe4:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe6:	31 f0       	breq	.+12     	; 0x1ff4 <__fp_mpack_finite+0xc>

00001fe8 <__fp_mpack_finite>:
    1fe8:	91 50       	subi	r25, 0x01	; 1
    1fea:	20 f4       	brcc	.+8      	; 0x1ff4 <__fp_mpack_finite+0xc>
    1fec:	87 95       	ror	r24
    1fee:	77 95       	ror	r23
    1ff0:	67 95       	ror	r22
    1ff2:	b7 95       	ror	r27
    1ff4:	88 0f       	add	r24, r24
    1ff6:	91 1d       	adc	r25, r1
    1ff8:	96 95       	lsr	r25
    1ffa:	87 95       	ror	r24
    1ffc:	97 f9       	bld	r25, 7
    1ffe:	08 95       	ret

00002000 <__mulsi3>:
    2000:	db 01       	movw	r26, r22
    2002:	8f 93       	push	r24
    2004:	9f 93       	push	r25
    2006:	2d d0       	rcall	.+90     	; 0x2062 <__muluhisi3>
    2008:	bf 91       	pop	r27
    200a:	af 91       	pop	r26
    200c:	a2 9f       	mul	r26, r18
    200e:	80 0d       	add	r24, r0
    2010:	91 1d       	adc	r25, r1
    2012:	a3 9f       	mul	r26, r19
    2014:	90 0d       	add	r25, r0
    2016:	b2 9f       	mul	r27, r18
    2018:	90 0d       	add	r25, r0
    201a:	11 24       	eor	r1, r1
    201c:	08 95       	ret

0000201e <__udivmodsi4>:
    201e:	a1 e2       	ldi	r26, 0x21	; 33
    2020:	1a 2e       	mov	r1, r26
    2022:	aa 1b       	sub	r26, r26
    2024:	bb 1b       	sub	r27, r27
    2026:	fd 01       	movw	r30, r26
    2028:	0d c0       	rjmp	.+26     	; 0x2044 <__udivmodsi4_ep>

0000202a <__udivmodsi4_loop>:
    202a:	aa 1f       	adc	r26, r26
    202c:	bb 1f       	adc	r27, r27
    202e:	ee 1f       	adc	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	a2 17       	cp	r26, r18
    2034:	b3 07       	cpc	r27, r19
    2036:	e4 07       	cpc	r30, r20
    2038:	f5 07       	cpc	r31, r21
    203a:	20 f0       	brcs	.+8      	; 0x2044 <__udivmodsi4_ep>
    203c:	a2 1b       	sub	r26, r18
    203e:	b3 0b       	sbc	r27, r19
    2040:	e4 0b       	sbc	r30, r20
    2042:	f5 0b       	sbc	r31, r21

00002044 <__udivmodsi4_ep>:
    2044:	66 1f       	adc	r22, r22
    2046:	77 1f       	adc	r23, r23
    2048:	88 1f       	adc	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	1a 94       	dec	r1
    204e:	69 f7       	brne	.-38     	; 0x202a <__udivmodsi4_loop>
    2050:	60 95       	com	r22
    2052:	70 95       	com	r23
    2054:	80 95       	com	r24
    2056:	90 95       	com	r25
    2058:	9b 01       	movw	r18, r22
    205a:	ac 01       	movw	r20, r24
    205c:	bd 01       	movw	r22, r26
    205e:	cf 01       	movw	r24, r30
    2060:	08 95       	ret

00002062 <__muluhisi3>:
    2062:	09 d0       	rcall	.+18     	; 0x2076 <__umulhisi3>
    2064:	a5 9f       	mul	r26, r21
    2066:	90 0d       	add	r25, r0
    2068:	b4 9f       	mul	r27, r20
    206a:	90 0d       	add	r25, r0
    206c:	a4 9f       	mul	r26, r20
    206e:	80 0d       	add	r24, r0
    2070:	91 1d       	adc	r25, r1
    2072:	11 24       	eor	r1, r1
    2074:	08 95       	ret

00002076 <__umulhisi3>:
    2076:	a2 9f       	mul	r26, r18
    2078:	b0 01       	movw	r22, r0
    207a:	b3 9f       	mul	r27, r19
    207c:	c0 01       	movw	r24, r0
    207e:	a3 9f       	mul	r26, r19
    2080:	70 0d       	add	r23, r0
    2082:	81 1d       	adc	r24, r1
    2084:	11 24       	eor	r1, r1
    2086:	91 1d       	adc	r25, r1
    2088:	b2 9f       	mul	r27, r18
    208a:	70 0d       	add	r23, r0
    208c:	81 1d       	adc	r24, r1
    208e:	11 24       	eor	r1, r1
    2090:	91 1d       	adc	r25, r1
    2092:	08 95       	ret

00002094 <fdevopen>:
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	31 f4       	brne	.+12     	; 0x20ac <fdevopen+0x18>
    20a0:	61 15       	cp	r22, r1
    20a2:	71 05       	cpc	r23, r1
    20a4:	19 f4       	brne	.+6      	; 0x20ac <fdevopen+0x18>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	39 c0       	rjmp	.+114    	; 0x211e <fdevopen+0x8a>
    20ac:	8b 01       	movw	r16, r22
    20ae:	ec 01       	movw	r28, r24
    20b0:	6e e0       	ldi	r22, 0x0E	; 14
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	71 d2       	rcall	.+1250   	; 0x259c <calloc>
    20ba:	fc 01       	movw	r30, r24
    20bc:	89 2b       	or	r24, r25
    20be:	99 f3       	breq	.-26     	; 0x20a6 <fdevopen+0x12>
    20c0:	80 e8       	ldi	r24, 0x80	; 128
    20c2:	83 83       	std	Z+3, r24	; 0x03
    20c4:	01 15       	cp	r16, r1
    20c6:	11 05       	cpc	r17, r1
    20c8:	71 f0       	breq	.+28     	; 0x20e6 <fdevopen+0x52>
    20ca:	02 87       	std	Z+10, r16	; 0x0a
    20cc:	13 87       	std	Z+11, r17	; 0x0b
    20ce:	81 e8       	ldi	r24, 0x81	; 129
    20d0:	83 83       	std	Z+3, r24	; 0x03
    20d2:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <__iob>
    20d6:	90 91 9c 20 	lds	r25, 0x209C	; 0x80209c <__iob+0x1>
    20da:	89 2b       	or	r24, r25
    20dc:	21 f4       	brne	.+8      	; 0x20e6 <fdevopen+0x52>
    20de:	e0 93 9b 20 	sts	0x209B, r30	; 0x80209b <__iob>
    20e2:	f0 93 9c 20 	sts	0x209C, r31	; 0x80209c <__iob+0x1>
    20e6:	20 97       	sbiw	r28, 0x00	; 0
    20e8:	c9 f0       	breq	.+50     	; 0x211c <fdevopen+0x88>
    20ea:	c0 87       	std	Z+8, r28	; 0x08
    20ec:	d1 87       	std	Z+9, r29	; 0x09
    20ee:	83 81       	ldd	r24, Z+3	; 0x03
    20f0:	82 60       	ori	r24, 0x02	; 2
    20f2:	83 83       	std	Z+3, r24	; 0x03
    20f4:	80 91 9d 20 	lds	r24, 0x209D	; 0x80209d <__iob+0x2>
    20f8:	90 91 9e 20 	lds	r25, 0x209E	; 0x80209e <__iob+0x3>
    20fc:	89 2b       	or	r24, r25
    20fe:	71 f4       	brne	.+28     	; 0x211c <fdevopen+0x88>
    2100:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <__iob+0x2>
    2104:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <__iob+0x3>
    2108:	80 91 9f 20 	lds	r24, 0x209F	; 0x80209f <__iob+0x4>
    210c:	90 91 a0 20 	lds	r25, 0x20A0	; 0x8020a0 <__iob+0x5>
    2110:	89 2b       	or	r24, r25
    2112:	21 f4       	brne	.+8      	; 0x211c <fdevopen+0x88>
    2114:	e0 93 9f 20 	sts	0x209F, r30	; 0x80209f <__iob+0x4>
    2118:	f0 93 a0 20 	sts	0x20A0, r31	; 0x8020a0 <__iob+0x5>
    211c:	cf 01       	movw	r24, r30
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	08 95       	ret

00002128 <printf>:
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	ae 01       	movw	r20, r28
    2132:	4a 5f       	subi	r20, 0xFA	; 250
    2134:	5f 4f       	sbci	r21, 0xFF	; 255
    2136:	fa 01       	movw	r30, r20
    2138:	61 91       	ld	r22, Z+
    213a:	71 91       	ld	r23, Z+
    213c:	af 01       	movw	r20, r30
    213e:	80 91 9d 20 	lds	r24, 0x209D	; 0x80209d <__iob+0x2>
    2142:	90 91 9e 20 	lds	r25, 0x209E	; 0x80209e <__iob+0x3>
    2146:	33 d0       	rcall	.+102    	; 0x21ae <vfprintf>
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	08 95       	ret

0000214e <puts>:
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <__iob+0x2>
    215a:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <__iob+0x3>
    215e:	23 81       	ldd	r18, Z+3	; 0x03
    2160:	21 ff       	sbrs	r18, 1
    2162:	1b c0       	rjmp	.+54     	; 0x219a <puts+0x4c>
    2164:	8c 01       	movw	r16, r24
    2166:	d0 e0       	ldi	r29, 0x00	; 0
    2168:	c0 e0       	ldi	r28, 0x00	; 0
    216a:	f8 01       	movw	r30, r16
    216c:	81 91       	ld	r24, Z+
    216e:	8f 01       	movw	r16, r30
    2170:	60 91 9d 20 	lds	r22, 0x209D	; 0x80209d <__iob+0x2>
    2174:	70 91 9e 20 	lds	r23, 0x209E	; 0x80209e <__iob+0x3>
    2178:	db 01       	movw	r26, r22
    217a:	18 96       	adiw	r26, 0x08	; 8
    217c:	ed 91       	ld	r30, X+
    217e:	fc 91       	ld	r31, X
    2180:	19 97       	sbiw	r26, 0x09	; 9
    2182:	88 23       	and	r24, r24
    2184:	31 f0       	breq	.+12     	; 0x2192 <puts+0x44>
    2186:	19 95       	eicall
    2188:	89 2b       	or	r24, r25
    218a:	79 f3       	breq	.-34     	; 0x216a <puts+0x1c>
    218c:	df ef       	ldi	r29, 0xFF	; 255
    218e:	cf ef       	ldi	r28, 0xFF	; 255
    2190:	ec cf       	rjmp	.-40     	; 0x216a <puts+0x1c>
    2192:	8a e0       	ldi	r24, 0x0A	; 10
    2194:	19 95       	eicall
    2196:	89 2b       	or	r24, r25
    2198:	19 f0       	breq	.+6      	; 0x21a0 <puts+0x52>
    219a:	8f ef       	ldi	r24, 0xFF	; 255
    219c:	9f ef       	ldi	r25, 0xFF	; 255
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <puts+0x56>
    21a0:	8d 2f       	mov	r24, r29
    21a2:	9c 2f       	mov	r25, r28
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	08 95       	ret

000021ae <vfprintf>:
    21ae:	2f 92       	push	r2
    21b0:	3f 92       	push	r3
    21b2:	4f 92       	push	r4
    21b4:	5f 92       	push	r5
    21b6:	6f 92       	push	r6
    21b8:	7f 92       	push	r7
    21ba:	8f 92       	push	r8
    21bc:	9f 92       	push	r9
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	2b 97       	sbiw	r28, 0x0b	; 11
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	6c 01       	movw	r12, r24
    21de:	7b 01       	movw	r14, r22
    21e0:	8a 01       	movw	r16, r20
    21e2:	fc 01       	movw	r30, r24
    21e4:	16 82       	std	Z+6, r1	; 0x06
    21e6:	17 82       	std	Z+7, r1	; 0x07
    21e8:	83 81       	ldd	r24, Z+3	; 0x03
    21ea:	81 ff       	sbrs	r24, 1
    21ec:	bf c1       	rjmp	.+894    	; 0x256c <vfprintf+0x3be>
    21ee:	ce 01       	movw	r24, r28
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	3c 01       	movw	r6, r24
    21f4:	f6 01       	movw	r30, r12
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	f7 01       	movw	r30, r14
    21fa:	93 fd       	sbrc	r25, 3
    21fc:	85 91       	lpm	r24, Z+
    21fe:	93 ff       	sbrs	r25, 3
    2200:	81 91       	ld	r24, Z+
    2202:	7f 01       	movw	r14, r30
    2204:	88 23       	and	r24, r24
    2206:	09 f4       	brne	.+2      	; 0x220a <vfprintf+0x5c>
    2208:	ad c1       	rjmp	.+858    	; 0x2564 <vfprintf+0x3b6>
    220a:	85 32       	cpi	r24, 0x25	; 37
    220c:	39 f4       	brne	.+14     	; 0x221c <vfprintf+0x6e>
    220e:	93 fd       	sbrc	r25, 3
    2210:	85 91       	lpm	r24, Z+
    2212:	93 ff       	sbrs	r25, 3
    2214:	81 91       	ld	r24, Z+
    2216:	7f 01       	movw	r14, r30
    2218:	85 32       	cpi	r24, 0x25	; 37
    221a:	21 f4       	brne	.+8      	; 0x2224 <vfprintf+0x76>
    221c:	b6 01       	movw	r22, r12
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	15 d3       	rcall	.+1578   	; 0x284c <fputc>
    2222:	e8 cf       	rjmp	.-48     	; 0x21f4 <vfprintf+0x46>
    2224:	91 2c       	mov	r9, r1
    2226:	21 2c       	mov	r2, r1
    2228:	31 2c       	mov	r3, r1
    222a:	ff e1       	ldi	r31, 0x1F	; 31
    222c:	f3 15       	cp	r31, r3
    222e:	d8 f0       	brcs	.+54     	; 0x2266 <vfprintf+0xb8>
    2230:	8b 32       	cpi	r24, 0x2B	; 43
    2232:	79 f0       	breq	.+30     	; 0x2252 <vfprintf+0xa4>
    2234:	38 f4       	brcc	.+14     	; 0x2244 <vfprintf+0x96>
    2236:	80 32       	cpi	r24, 0x20	; 32
    2238:	79 f0       	breq	.+30     	; 0x2258 <vfprintf+0xaa>
    223a:	83 32       	cpi	r24, 0x23	; 35
    223c:	a1 f4       	brne	.+40     	; 0x2266 <vfprintf+0xb8>
    223e:	23 2d       	mov	r18, r3
    2240:	20 61       	ori	r18, 0x10	; 16
    2242:	1d c0       	rjmp	.+58     	; 0x227e <vfprintf+0xd0>
    2244:	8d 32       	cpi	r24, 0x2D	; 45
    2246:	61 f0       	breq	.+24     	; 0x2260 <vfprintf+0xb2>
    2248:	80 33       	cpi	r24, 0x30	; 48
    224a:	69 f4       	brne	.+26     	; 0x2266 <vfprintf+0xb8>
    224c:	23 2d       	mov	r18, r3
    224e:	21 60       	ori	r18, 0x01	; 1
    2250:	16 c0       	rjmp	.+44     	; 0x227e <vfprintf+0xd0>
    2252:	83 2d       	mov	r24, r3
    2254:	82 60       	ori	r24, 0x02	; 2
    2256:	38 2e       	mov	r3, r24
    2258:	e3 2d       	mov	r30, r3
    225a:	e4 60       	ori	r30, 0x04	; 4
    225c:	3e 2e       	mov	r3, r30
    225e:	2a c0       	rjmp	.+84     	; 0x22b4 <vfprintf+0x106>
    2260:	f3 2d       	mov	r31, r3
    2262:	f8 60       	ori	r31, 0x08	; 8
    2264:	1d c0       	rjmp	.+58     	; 0x22a0 <vfprintf+0xf2>
    2266:	37 fc       	sbrc	r3, 7
    2268:	2d c0       	rjmp	.+90     	; 0x22c4 <vfprintf+0x116>
    226a:	20 ed       	ldi	r18, 0xD0	; 208
    226c:	28 0f       	add	r18, r24
    226e:	2a 30       	cpi	r18, 0x0A	; 10
    2270:	40 f0       	brcs	.+16     	; 0x2282 <vfprintf+0xd4>
    2272:	8e 32       	cpi	r24, 0x2E	; 46
    2274:	b9 f4       	brne	.+46     	; 0x22a4 <vfprintf+0xf6>
    2276:	36 fc       	sbrc	r3, 6
    2278:	75 c1       	rjmp	.+746    	; 0x2564 <vfprintf+0x3b6>
    227a:	23 2d       	mov	r18, r3
    227c:	20 64       	ori	r18, 0x40	; 64
    227e:	32 2e       	mov	r3, r18
    2280:	19 c0       	rjmp	.+50     	; 0x22b4 <vfprintf+0x106>
    2282:	36 fe       	sbrs	r3, 6
    2284:	06 c0       	rjmp	.+12     	; 0x2292 <vfprintf+0xe4>
    2286:	8a e0       	ldi	r24, 0x0A	; 10
    2288:	98 9e       	mul	r9, r24
    228a:	20 0d       	add	r18, r0
    228c:	11 24       	eor	r1, r1
    228e:	92 2e       	mov	r9, r18
    2290:	11 c0       	rjmp	.+34     	; 0x22b4 <vfprintf+0x106>
    2292:	ea e0       	ldi	r30, 0x0A	; 10
    2294:	2e 9e       	mul	r2, r30
    2296:	20 0d       	add	r18, r0
    2298:	11 24       	eor	r1, r1
    229a:	22 2e       	mov	r2, r18
    229c:	f3 2d       	mov	r31, r3
    229e:	f0 62       	ori	r31, 0x20	; 32
    22a0:	3f 2e       	mov	r3, r31
    22a2:	08 c0       	rjmp	.+16     	; 0x22b4 <vfprintf+0x106>
    22a4:	8c 36       	cpi	r24, 0x6C	; 108
    22a6:	21 f4       	brne	.+8      	; 0x22b0 <vfprintf+0x102>
    22a8:	83 2d       	mov	r24, r3
    22aa:	80 68       	ori	r24, 0x80	; 128
    22ac:	38 2e       	mov	r3, r24
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <vfprintf+0x106>
    22b0:	88 36       	cpi	r24, 0x68	; 104
    22b2:	41 f4       	brne	.+16     	; 0x22c4 <vfprintf+0x116>
    22b4:	f7 01       	movw	r30, r14
    22b6:	93 fd       	sbrc	r25, 3
    22b8:	85 91       	lpm	r24, Z+
    22ba:	93 ff       	sbrs	r25, 3
    22bc:	81 91       	ld	r24, Z+
    22be:	7f 01       	movw	r14, r30
    22c0:	81 11       	cpse	r24, r1
    22c2:	b3 cf       	rjmp	.-154    	; 0x222a <vfprintf+0x7c>
    22c4:	98 2f       	mov	r25, r24
    22c6:	9f 7d       	andi	r25, 0xDF	; 223
    22c8:	95 54       	subi	r25, 0x45	; 69
    22ca:	93 30       	cpi	r25, 0x03	; 3
    22cc:	28 f4       	brcc	.+10     	; 0x22d8 <vfprintf+0x12a>
    22ce:	0c 5f       	subi	r16, 0xFC	; 252
    22d0:	1f 4f       	sbci	r17, 0xFF	; 255
    22d2:	9f e3       	ldi	r25, 0x3F	; 63
    22d4:	99 83       	std	Y+1, r25	; 0x01
    22d6:	0d c0       	rjmp	.+26     	; 0x22f2 <vfprintf+0x144>
    22d8:	83 36       	cpi	r24, 0x63	; 99
    22da:	31 f0       	breq	.+12     	; 0x22e8 <vfprintf+0x13a>
    22dc:	83 37       	cpi	r24, 0x73	; 115
    22de:	71 f0       	breq	.+28     	; 0x22fc <vfprintf+0x14e>
    22e0:	83 35       	cpi	r24, 0x53	; 83
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <vfprintf+0x138>
    22e4:	55 c0       	rjmp	.+170    	; 0x2390 <vfprintf+0x1e2>
    22e6:	20 c0       	rjmp	.+64     	; 0x2328 <vfprintf+0x17a>
    22e8:	f8 01       	movw	r30, r16
    22ea:	80 81       	ld	r24, Z
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	0e 5f       	subi	r16, 0xFE	; 254
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	88 24       	eor	r8, r8
    22f4:	83 94       	inc	r8
    22f6:	91 2c       	mov	r9, r1
    22f8:	53 01       	movw	r10, r6
    22fa:	12 c0       	rjmp	.+36     	; 0x2320 <vfprintf+0x172>
    22fc:	28 01       	movw	r4, r16
    22fe:	f2 e0       	ldi	r31, 0x02	; 2
    2300:	4f 0e       	add	r4, r31
    2302:	51 1c       	adc	r5, r1
    2304:	f8 01       	movw	r30, r16
    2306:	a0 80       	ld	r10, Z
    2308:	b1 80       	ldd	r11, Z+1	; 0x01
    230a:	36 fe       	sbrs	r3, 6
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <vfprintf+0x166>
    230e:	69 2d       	mov	r22, r9
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <vfprintf+0x16a>
    2314:	6f ef       	ldi	r22, 0xFF	; 255
    2316:	7f ef       	ldi	r23, 0xFF	; 255
    2318:	c5 01       	movw	r24, r10
    231a:	8d d2       	rcall	.+1306   	; 0x2836 <strnlen>
    231c:	4c 01       	movw	r8, r24
    231e:	82 01       	movw	r16, r4
    2320:	f3 2d       	mov	r31, r3
    2322:	ff 77       	andi	r31, 0x7F	; 127
    2324:	3f 2e       	mov	r3, r31
    2326:	15 c0       	rjmp	.+42     	; 0x2352 <vfprintf+0x1a4>
    2328:	28 01       	movw	r4, r16
    232a:	22 e0       	ldi	r18, 0x02	; 2
    232c:	42 0e       	add	r4, r18
    232e:	51 1c       	adc	r5, r1
    2330:	f8 01       	movw	r30, r16
    2332:	a0 80       	ld	r10, Z
    2334:	b1 80       	ldd	r11, Z+1	; 0x01
    2336:	36 fe       	sbrs	r3, 6
    2338:	03 c0       	rjmp	.+6      	; 0x2340 <vfprintf+0x192>
    233a:	69 2d       	mov	r22, r9
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <vfprintf+0x196>
    2340:	6f ef       	ldi	r22, 0xFF	; 255
    2342:	7f ef       	ldi	r23, 0xFF	; 255
    2344:	c5 01       	movw	r24, r10
    2346:	65 d2       	rcall	.+1226   	; 0x2812 <strnlen_P>
    2348:	4c 01       	movw	r8, r24
    234a:	f3 2d       	mov	r31, r3
    234c:	f0 68       	ori	r31, 0x80	; 128
    234e:	3f 2e       	mov	r3, r31
    2350:	82 01       	movw	r16, r4
    2352:	33 fc       	sbrc	r3, 3
    2354:	19 c0       	rjmp	.+50     	; 0x2388 <vfprintf+0x1da>
    2356:	82 2d       	mov	r24, r2
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	88 16       	cp	r8, r24
    235c:	99 06       	cpc	r9, r25
    235e:	a0 f4       	brcc	.+40     	; 0x2388 <vfprintf+0x1da>
    2360:	b6 01       	movw	r22, r12
    2362:	80 e2       	ldi	r24, 0x20	; 32
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	72 d2       	rcall	.+1252   	; 0x284c <fputc>
    2368:	2a 94       	dec	r2
    236a:	f5 cf       	rjmp	.-22     	; 0x2356 <vfprintf+0x1a8>
    236c:	f5 01       	movw	r30, r10
    236e:	37 fc       	sbrc	r3, 7
    2370:	85 91       	lpm	r24, Z+
    2372:	37 fe       	sbrs	r3, 7
    2374:	81 91       	ld	r24, Z+
    2376:	5f 01       	movw	r10, r30
    2378:	b6 01       	movw	r22, r12
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	67 d2       	rcall	.+1230   	; 0x284c <fputc>
    237e:	21 10       	cpse	r2, r1
    2380:	2a 94       	dec	r2
    2382:	21 e0       	ldi	r18, 0x01	; 1
    2384:	82 1a       	sub	r8, r18
    2386:	91 08       	sbc	r9, r1
    2388:	81 14       	cp	r8, r1
    238a:	91 04       	cpc	r9, r1
    238c:	79 f7       	brne	.-34     	; 0x236c <vfprintf+0x1be>
    238e:	e1 c0       	rjmp	.+450    	; 0x2552 <vfprintf+0x3a4>
    2390:	84 36       	cpi	r24, 0x64	; 100
    2392:	11 f0       	breq	.+4      	; 0x2398 <vfprintf+0x1ea>
    2394:	89 36       	cpi	r24, 0x69	; 105
    2396:	39 f5       	brne	.+78     	; 0x23e6 <vfprintf+0x238>
    2398:	f8 01       	movw	r30, r16
    239a:	37 fe       	sbrs	r3, 7
    239c:	07 c0       	rjmp	.+14     	; 0x23ac <vfprintf+0x1fe>
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	0c 5f       	subi	r16, 0xFC	; 252
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	08 c0       	rjmp	.+16     	; 0x23bc <vfprintf+0x20e>
    23ac:	60 81       	ld	r22, Z
    23ae:	71 81       	ldd	r23, Z+1	; 0x01
    23b0:	07 2e       	mov	r0, r23
    23b2:	00 0c       	add	r0, r0
    23b4:	88 0b       	sbc	r24, r24
    23b6:	99 0b       	sbc	r25, r25
    23b8:	0e 5f       	subi	r16, 0xFE	; 254
    23ba:	1f 4f       	sbci	r17, 0xFF	; 255
    23bc:	f3 2d       	mov	r31, r3
    23be:	ff 76       	andi	r31, 0x6F	; 111
    23c0:	3f 2e       	mov	r3, r31
    23c2:	97 ff       	sbrs	r25, 7
    23c4:	09 c0       	rjmp	.+18     	; 0x23d8 <vfprintf+0x22a>
    23c6:	90 95       	com	r25
    23c8:	80 95       	com	r24
    23ca:	70 95       	com	r23
    23cc:	61 95       	neg	r22
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255
    23d0:	8f 4f       	sbci	r24, 0xFF	; 255
    23d2:	9f 4f       	sbci	r25, 0xFF	; 255
    23d4:	f0 68       	ori	r31, 0x80	; 128
    23d6:	3f 2e       	mov	r3, r31
    23d8:	2a e0       	ldi	r18, 0x0A	; 10
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	a3 01       	movw	r20, r6
    23de:	72 d2       	rcall	.+1252   	; 0x28c4 <__ultoa_invert>
    23e0:	88 2e       	mov	r8, r24
    23e2:	86 18       	sub	r8, r6
    23e4:	44 c0       	rjmp	.+136    	; 0x246e <vfprintf+0x2c0>
    23e6:	85 37       	cpi	r24, 0x75	; 117
    23e8:	31 f4       	brne	.+12     	; 0x23f6 <vfprintf+0x248>
    23ea:	23 2d       	mov	r18, r3
    23ec:	2f 7e       	andi	r18, 0xEF	; 239
    23ee:	b2 2e       	mov	r11, r18
    23f0:	2a e0       	ldi	r18, 0x0A	; 10
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	25 c0       	rjmp	.+74     	; 0x2440 <vfprintf+0x292>
    23f6:	93 2d       	mov	r25, r3
    23f8:	99 7f       	andi	r25, 0xF9	; 249
    23fa:	b9 2e       	mov	r11, r25
    23fc:	8f 36       	cpi	r24, 0x6F	; 111
    23fe:	c1 f0       	breq	.+48     	; 0x2430 <vfprintf+0x282>
    2400:	18 f4       	brcc	.+6      	; 0x2408 <vfprintf+0x25a>
    2402:	88 35       	cpi	r24, 0x58	; 88
    2404:	79 f0       	breq	.+30     	; 0x2424 <vfprintf+0x276>
    2406:	ae c0       	rjmp	.+348    	; 0x2564 <vfprintf+0x3b6>
    2408:	80 37       	cpi	r24, 0x70	; 112
    240a:	19 f0       	breq	.+6      	; 0x2412 <vfprintf+0x264>
    240c:	88 37       	cpi	r24, 0x78	; 120
    240e:	21 f0       	breq	.+8      	; 0x2418 <vfprintf+0x26a>
    2410:	a9 c0       	rjmp	.+338    	; 0x2564 <vfprintf+0x3b6>
    2412:	e9 2f       	mov	r30, r25
    2414:	e0 61       	ori	r30, 0x10	; 16
    2416:	be 2e       	mov	r11, r30
    2418:	b4 fe       	sbrs	r11, 4
    241a:	0d c0       	rjmp	.+26     	; 0x2436 <vfprintf+0x288>
    241c:	fb 2d       	mov	r31, r11
    241e:	f4 60       	ori	r31, 0x04	; 4
    2420:	bf 2e       	mov	r11, r31
    2422:	09 c0       	rjmp	.+18     	; 0x2436 <vfprintf+0x288>
    2424:	34 fe       	sbrs	r3, 4
    2426:	0a c0       	rjmp	.+20     	; 0x243c <vfprintf+0x28e>
    2428:	29 2f       	mov	r18, r25
    242a:	26 60       	ori	r18, 0x06	; 6
    242c:	b2 2e       	mov	r11, r18
    242e:	06 c0       	rjmp	.+12     	; 0x243c <vfprintf+0x28e>
    2430:	28 e0       	ldi	r18, 0x08	; 8
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	05 c0       	rjmp	.+10     	; 0x2440 <vfprintf+0x292>
    2436:	20 e1       	ldi	r18, 0x10	; 16
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <vfprintf+0x292>
    243c:	20 e1       	ldi	r18, 0x10	; 16
    243e:	32 e0       	ldi	r19, 0x02	; 2
    2440:	f8 01       	movw	r30, r16
    2442:	b7 fe       	sbrs	r11, 7
    2444:	07 c0       	rjmp	.+14     	; 0x2454 <vfprintf+0x2a6>
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	0c 5f       	subi	r16, 0xFC	; 252
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	06 c0       	rjmp	.+12     	; 0x2460 <vfprintf+0x2b2>
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 5f       	subi	r16, 0xFE	; 254
    245e:	1f 4f       	sbci	r17, 0xFF	; 255
    2460:	a3 01       	movw	r20, r6
    2462:	30 d2       	rcall	.+1120   	; 0x28c4 <__ultoa_invert>
    2464:	88 2e       	mov	r8, r24
    2466:	86 18       	sub	r8, r6
    2468:	fb 2d       	mov	r31, r11
    246a:	ff 77       	andi	r31, 0x7F	; 127
    246c:	3f 2e       	mov	r3, r31
    246e:	36 fe       	sbrs	r3, 6
    2470:	0d c0       	rjmp	.+26     	; 0x248c <vfprintf+0x2de>
    2472:	23 2d       	mov	r18, r3
    2474:	2e 7f       	andi	r18, 0xFE	; 254
    2476:	a2 2e       	mov	r10, r18
    2478:	89 14       	cp	r8, r9
    247a:	58 f4       	brcc	.+22     	; 0x2492 <vfprintf+0x2e4>
    247c:	34 fe       	sbrs	r3, 4
    247e:	0b c0       	rjmp	.+22     	; 0x2496 <vfprintf+0x2e8>
    2480:	32 fc       	sbrc	r3, 2
    2482:	09 c0       	rjmp	.+18     	; 0x2496 <vfprintf+0x2e8>
    2484:	83 2d       	mov	r24, r3
    2486:	8e 7e       	andi	r24, 0xEE	; 238
    2488:	a8 2e       	mov	r10, r24
    248a:	05 c0       	rjmp	.+10     	; 0x2496 <vfprintf+0x2e8>
    248c:	b8 2c       	mov	r11, r8
    248e:	a3 2c       	mov	r10, r3
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <vfprintf+0x2ea>
    2492:	b8 2c       	mov	r11, r8
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <vfprintf+0x2ea>
    2496:	b9 2c       	mov	r11, r9
    2498:	a4 fe       	sbrs	r10, 4
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <vfprintf+0x30c>
    249c:	fe 01       	movw	r30, r28
    249e:	e8 0d       	add	r30, r8
    24a0:	f1 1d       	adc	r31, r1
    24a2:	80 81       	ld	r24, Z
    24a4:	80 33       	cpi	r24, 0x30	; 48
    24a6:	21 f4       	brne	.+8      	; 0x24b0 <vfprintf+0x302>
    24a8:	9a 2d       	mov	r25, r10
    24aa:	99 7e       	andi	r25, 0xE9	; 233
    24ac:	a9 2e       	mov	r10, r25
    24ae:	09 c0       	rjmp	.+18     	; 0x24c2 <vfprintf+0x314>
    24b0:	a2 fe       	sbrs	r10, 2
    24b2:	06 c0       	rjmp	.+12     	; 0x24c0 <vfprintf+0x312>
    24b4:	b3 94       	inc	r11
    24b6:	b3 94       	inc	r11
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <vfprintf+0x314>
    24ba:	8a 2d       	mov	r24, r10
    24bc:	86 78       	andi	r24, 0x86	; 134
    24be:	09 f0       	breq	.+2      	; 0x24c2 <vfprintf+0x314>
    24c0:	b3 94       	inc	r11
    24c2:	a3 fc       	sbrc	r10, 3
    24c4:	10 c0       	rjmp	.+32     	; 0x24e6 <vfprintf+0x338>
    24c6:	a0 fe       	sbrs	r10, 0
    24c8:	06 c0       	rjmp	.+12     	; 0x24d6 <vfprintf+0x328>
    24ca:	b2 14       	cp	r11, r2
    24cc:	80 f4       	brcc	.+32     	; 0x24ee <vfprintf+0x340>
    24ce:	28 0c       	add	r2, r8
    24d0:	92 2c       	mov	r9, r2
    24d2:	9b 18       	sub	r9, r11
    24d4:	0d c0       	rjmp	.+26     	; 0x24f0 <vfprintf+0x342>
    24d6:	b2 14       	cp	r11, r2
    24d8:	58 f4       	brcc	.+22     	; 0x24f0 <vfprintf+0x342>
    24da:	b6 01       	movw	r22, r12
    24dc:	80 e2       	ldi	r24, 0x20	; 32
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	b5 d1       	rcall	.+874    	; 0x284c <fputc>
    24e2:	b3 94       	inc	r11
    24e4:	f8 cf       	rjmp	.-16     	; 0x24d6 <vfprintf+0x328>
    24e6:	b2 14       	cp	r11, r2
    24e8:	18 f4       	brcc	.+6      	; 0x24f0 <vfprintf+0x342>
    24ea:	2b 18       	sub	r2, r11
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <vfprintf+0x344>
    24ee:	98 2c       	mov	r9, r8
    24f0:	21 2c       	mov	r2, r1
    24f2:	a4 fe       	sbrs	r10, 4
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <vfprintf+0x366>
    24f6:	b6 01       	movw	r22, r12
    24f8:	80 e3       	ldi	r24, 0x30	; 48
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a7 d1       	rcall	.+846    	; 0x284c <fputc>
    24fe:	a2 fe       	sbrs	r10, 2
    2500:	16 c0       	rjmp	.+44     	; 0x252e <vfprintf+0x380>
    2502:	a1 fc       	sbrc	r10, 1
    2504:	03 c0       	rjmp	.+6      	; 0x250c <vfprintf+0x35e>
    2506:	88 e7       	ldi	r24, 0x78	; 120
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <vfprintf+0x362>
    250c:	88 e5       	ldi	r24, 0x58	; 88
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	b6 01       	movw	r22, r12
    2512:	0c c0       	rjmp	.+24     	; 0x252c <vfprintf+0x37e>
    2514:	8a 2d       	mov	r24, r10
    2516:	86 78       	andi	r24, 0x86	; 134
    2518:	51 f0       	breq	.+20     	; 0x252e <vfprintf+0x380>
    251a:	a1 fe       	sbrs	r10, 1
    251c:	02 c0       	rjmp	.+4      	; 0x2522 <vfprintf+0x374>
    251e:	8b e2       	ldi	r24, 0x2B	; 43
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <vfprintf+0x376>
    2522:	80 e2       	ldi	r24, 0x20	; 32
    2524:	a7 fc       	sbrc	r10, 7
    2526:	8d e2       	ldi	r24, 0x2D	; 45
    2528:	b6 01       	movw	r22, r12
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	8f d1       	rcall	.+798    	; 0x284c <fputc>
    252e:	89 14       	cp	r8, r9
    2530:	30 f4       	brcc	.+12     	; 0x253e <vfprintf+0x390>
    2532:	b6 01       	movw	r22, r12
    2534:	80 e3       	ldi	r24, 0x30	; 48
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	89 d1       	rcall	.+786    	; 0x284c <fputc>
    253a:	9a 94       	dec	r9
    253c:	f8 cf       	rjmp	.-16     	; 0x252e <vfprintf+0x380>
    253e:	8a 94       	dec	r8
    2540:	f3 01       	movw	r30, r6
    2542:	e8 0d       	add	r30, r8
    2544:	f1 1d       	adc	r31, r1
    2546:	80 81       	ld	r24, Z
    2548:	b6 01       	movw	r22, r12
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	7f d1       	rcall	.+766    	; 0x284c <fputc>
    254e:	81 10       	cpse	r8, r1
    2550:	f6 cf       	rjmp	.-20     	; 0x253e <vfprintf+0x390>
    2552:	22 20       	and	r2, r2
    2554:	09 f4       	brne	.+2      	; 0x2558 <vfprintf+0x3aa>
    2556:	4e ce       	rjmp	.-868    	; 0x21f4 <vfprintf+0x46>
    2558:	b6 01       	movw	r22, r12
    255a:	80 e2       	ldi	r24, 0x20	; 32
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	76 d1       	rcall	.+748    	; 0x284c <fputc>
    2560:	2a 94       	dec	r2
    2562:	f7 cf       	rjmp	.-18     	; 0x2552 <vfprintf+0x3a4>
    2564:	f6 01       	movw	r30, r12
    2566:	86 81       	ldd	r24, Z+6	; 0x06
    2568:	97 81       	ldd	r25, Z+7	; 0x07
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <vfprintf+0x3c2>
    256c:	8f ef       	ldi	r24, 0xFF	; 255
    256e:	9f ef       	ldi	r25, 0xFF	; 255
    2570:	2b 96       	adiw	r28, 0x0b	; 11
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	9f 90       	pop	r9
    258c:	8f 90       	pop	r8
    258e:	7f 90       	pop	r7
    2590:	6f 90       	pop	r6
    2592:	5f 90       	pop	r5
    2594:	4f 90       	pop	r4
    2596:	3f 90       	pop	r3
    2598:	2f 90       	pop	r2
    259a:	08 95       	ret

0000259c <calloc>:
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	86 9f       	mul	r24, r22
    25a6:	80 01       	movw	r16, r0
    25a8:	87 9f       	mul	r24, r23
    25aa:	10 0d       	add	r17, r0
    25ac:	96 9f       	mul	r25, r22
    25ae:	10 0d       	add	r17, r0
    25b0:	11 24       	eor	r1, r1
    25b2:	c8 01       	movw	r24, r16
    25b4:	0d d0       	rcall	.+26     	; 0x25d0 <malloc>
    25b6:	ec 01       	movw	r28, r24
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	21 f0       	breq	.+8      	; 0x25c4 <calloc+0x28>
    25bc:	a8 01       	movw	r20, r16
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	32 d1       	rcall	.+612    	; 0x2828 <memset>
    25c4:	ce 01       	movw	r24, r28
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	08 95       	ret

000025d0 <malloc>:
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	82 30       	cpi	r24, 0x02	; 2
    25da:	91 05       	cpc	r25, r1
    25dc:	10 f4       	brcc	.+4      	; 0x25e2 <malloc+0x12>
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <__flp>
    25e6:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <__flp+0x1>
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	a0 e0       	ldi	r26, 0x00	; 0
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	30 97       	sbiw	r30, 0x00	; 0
    25f4:	19 f1       	breq	.+70     	; 0x263c <malloc+0x6c>
    25f6:	40 81       	ld	r20, Z
    25f8:	51 81       	ldd	r21, Z+1	; 0x01
    25fa:	02 81       	ldd	r16, Z+2	; 0x02
    25fc:	13 81       	ldd	r17, Z+3	; 0x03
    25fe:	48 17       	cp	r20, r24
    2600:	59 07       	cpc	r21, r25
    2602:	c8 f0       	brcs	.+50     	; 0x2636 <malloc+0x66>
    2604:	84 17       	cp	r24, r20
    2606:	95 07       	cpc	r25, r21
    2608:	69 f4       	brne	.+26     	; 0x2624 <malloc+0x54>
    260a:	10 97       	sbiw	r26, 0x00	; 0
    260c:	31 f0       	breq	.+12     	; 0x261a <malloc+0x4a>
    260e:	12 96       	adiw	r26, 0x02	; 2
    2610:	0c 93       	st	X, r16
    2612:	12 97       	sbiw	r26, 0x02	; 2
    2614:	13 96       	adiw	r26, 0x03	; 3
    2616:	1c 93       	st	X, r17
    2618:	27 c0       	rjmp	.+78     	; 0x2668 <malloc+0x98>
    261a:	00 93 a3 20 	sts	0x20A3, r16	; 0x8020a3 <__flp>
    261e:	10 93 a4 20 	sts	0x20A4, r17	; 0x8020a4 <__flp+0x1>
    2622:	22 c0       	rjmp	.+68     	; 0x2668 <malloc+0x98>
    2624:	21 15       	cp	r18, r1
    2626:	31 05       	cpc	r19, r1
    2628:	19 f0       	breq	.+6      	; 0x2630 <malloc+0x60>
    262a:	42 17       	cp	r20, r18
    262c:	53 07       	cpc	r21, r19
    262e:	18 f4       	brcc	.+6      	; 0x2636 <malloc+0x66>
    2630:	9a 01       	movw	r18, r20
    2632:	bd 01       	movw	r22, r26
    2634:	ef 01       	movw	r28, r30
    2636:	df 01       	movw	r26, r30
    2638:	f8 01       	movw	r30, r16
    263a:	db cf       	rjmp	.-74     	; 0x25f2 <malloc+0x22>
    263c:	21 15       	cp	r18, r1
    263e:	31 05       	cpc	r19, r1
    2640:	f9 f0       	breq	.+62     	; 0x2680 <malloc+0xb0>
    2642:	28 1b       	sub	r18, r24
    2644:	39 0b       	sbc	r19, r25
    2646:	24 30       	cpi	r18, 0x04	; 4
    2648:	31 05       	cpc	r19, r1
    264a:	80 f4       	brcc	.+32     	; 0x266c <malloc+0x9c>
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	9b 81       	ldd	r25, Y+3	; 0x03
    2650:	61 15       	cp	r22, r1
    2652:	71 05       	cpc	r23, r1
    2654:	21 f0       	breq	.+8      	; 0x265e <malloc+0x8e>
    2656:	fb 01       	movw	r30, r22
    2658:	82 83       	std	Z+2, r24	; 0x02
    265a:	93 83       	std	Z+3, r25	; 0x03
    265c:	04 c0       	rjmp	.+8      	; 0x2666 <malloc+0x96>
    265e:	80 93 a3 20 	sts	0x20A3, r24	; 0x8020a3 <__flp>
    2662:	90 93 a4 20 	sts	0x20A4, r25	; 0x8020a4 <__flp+0x1>
    2666:	fe 01       	movw	r30, r28
    2668:	32 96       	adiw	r30, 0x02	; 2
    266a:	44 c0       	rjmp	.+136    	; 0x26f4 <malloc+0x124>
    266c:	fe 01       	movw	r30, r28
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	81 93       	st	Z+, r24
    2674:	91 93       	st	Z+, r25
    2676:	22 50       	subi	r18, 0x02	; 2
    2678:	31 09       	sbc	r19, r1
    267a:	28 83       	st	Y, r18
    267c:	39 83       	std	Y+1, r19	; 0x01
    267e:	3a c0       	rjmp	.+116    	; 0x26f4 <malloc+0x124>
    2680:	20 91 a1 20 	lds	r18, 0x20A1	; 0x8020a1 <__brkval>
    2684:	30 91 a2 20 	lds	r19, 0x20A2	; 0x8020a2 <__brkval+0x1>
    2688:	23 2b       	or	r18, r19
    268a:	41 f4       	brne	.+16     	; 0x269c <malloc+0xcc>
    268c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2690:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2694:	20 93 a1 20 	sts	0x20A1, r18	; 0x8020a1 <__brkval>
    2698:	30 93 a2 20 	sts	0x20A2, r19	; 0x8020a2 <__brkval+0x1>
    269c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    26a0:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    26a4:	21 15       	cp	r18, r1
    26a6:	31 05       	cpc	r19, r1
    26a8:	41 f4       	brne	.+16     	; 0x26ba <malloc+0xea>
    26aa:	2d b7       	in	r18, 0x3d	; 61
    26ac:	3e b7       	in	r19, 0x3e	; 62
    26ae:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    26b2:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    26b6:	24 1b       	sub	r18, r20
    26b8:	35 0b       	sbc	r19, r21
    26ba:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <__brkval>
    26be:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <__brkval+0x1>
    26c2:	e2 17       	cp	r30, r18
    26c4:	f3 07       	cpc	r31, r19
    26c6:	a0 f4       	brcc	.+40     	; 0x26f0 <malloc+0x120>
    26c8:	2e 1b       	sub	r18, r30
    26ca:	3f 0b       	sbc	r19, r31
    26cc:	28 17       	cp	r18, r24
    26ce:	39 07       	cpc	r19, r25
    26d0:	78 f0       	brcs	.+30     	; 0x26f0 <malloc+0x120>
    26d2:	ac 01       	movw	r20, r24
    26d4:	4e 5f       	subi	r20, 0xFE	; 254
    26d6:	5f 4f       	sbci	r21, 0xFF	; 255
    26d8:	24 17       	cp	r18, r20
    26da:	35 07       	cpc	r19, r21
    26dc:	48 f0       	brcs	.+18     	; 0x26f0 <malloc+0x120>
    26de:	4e 0f       	add	r20, r30
    26e0:	5f 1f       	adc	r21, r31
    26e2:	40 93 a1 20 	sts	0x20A1, r20	; 0x8020a1 <__brkval>
    26e6:	50 93 a2 20 	sts	0x20A2, r21	; 0x8020a2 <__brkval+0x1>
    26ea:	81 93       	st	Z+, r24
    26ec:	91 93       	st	Z+, r25
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <malloc+0x124>
    26f0:	e0 e0       	ldi	r30, 0x00	; 0
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	cf 01       	movw	r24, r30
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	08 95       	ret

00002700 <free>:
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	09 f4       	brne	.+2      	; 0x270a <free+0xa>
    2708:	81 c0       	rjmp	.+258    	; 0x280c <free+0x10c>
    270a:	fc 01       	movw	r30, r24
    270c:	32 97       	sbiw	r30, 0x02	; 2
    270e:	12 82       	std	Z+2, r1	; 0x02
    2710:	13 82       	std	Z+3, r1	; 0x03
    2712:	a0 91 a3 20 	lds	r26, 0x20A3	; 0x8020a3 <__flp>
    2716:	b0 91 a4 20 	lds	r27, 0x20A4	; 0x8020a4 <__flp+0x1>
    271a:	10 97       	sbiw	r26, 0x00	; 0
    271c:	81 f4       	brne	.+32     	; 0x273e <free+0x3e>
    271e:	20 81       	ld	r18, Z
    2720:	31 81       	ldd	r19, Z+1	; 0x01
    2722:	82 0f       	add	r24, r18
    2724:	93 1f       	adc	r25, r19
    2726:	20 91 a1 20 	lds	r18, 0x20A1	; 0x8020a1 <__brkval>
    272a:	30 91 a2 20 	lds	r19, 0x20A2	; 0x8020a2 <__brkval+0x1>
    272e:	28 17       	cp	r18, r24
    2730:	39 07       	cpc	r19, r25
    2732:	51 f5       	brne	.+84     	; 0x2788 <free+0x88>
    2734:	e0 93 a1 20 	sts	0x20A1, r30	; 0x8020a1 <__brkval>
    2738:	f0 93 a2 20 	sts	0x20A2, r31	; 0x8020a2 <__brkval+0x1>
    273c:	67 c0       	rjmp	.+206    	; 0x280c <free+0x10c>
    273e:	ed 01       	movw	r28, r26
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	ce 17       	cp	r28, r30
    2746:	df 07       	cpc	r29, r31
    2748:	40 f4       	brcc	.+16     	; 0x275a <free+0x5a>
    274a:	4a 81       	ldd	r20, Y+2	; 0x02
    274c:	5b 81       	ldd	r21, Y+3	; 0x03
    274e:	9e 01       	movw	r18, r28
    2750:	41 15       	cp	r20, r1
    2752:	51 05       	cpc	r21, r1
    2754:	f1 f0       	breq	.+60     	; 0x2792 <free+0x92>
    2756:	ea 01       	movw	r28, r20
    2758:	f5 cf       	rjmp	.-22     	; 0x2744 <free+0x44>
    275a:	c2 83       	std	Z+2, r28	; 0x02
    275c:	d3 83       	std	Z+3, r29	; 0x03
    275e:	40 81       	ld	r20, Z
    2760:	51 81       	ldd	r21, Z+1	; 0x01
    2762:	84 0f       	add	r24, r20
    2764:	95 1f       	adc	r25, r21
    2766:	c8 17       	cp	r28, r24
    2768:	d9 07       	cpc	r29, r25
    276a:	59 f4       	brne	.+22     	; 0x2782 <free+0x82>
    276c:	88 81       	ld	r24, Y
    276e:	99 81       	ldd	r25, Y+1	; 0x01
    2770:	84 0f       	add	r24, r20
    2772:	95 1f       	adc	r25, r21
    2774:	02 96       	adiw	r24, 0x02	; 2
    2776:	80 83       	st	Z, r24
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	82 83       	std	Z+2, r24	; 0x02
    2780:	93 83       	std	Z+3, r25	; 0x03
    2782:	21 15       	cp	r18, r1
    2784:	31 05       	cpc	r19, r1
    2786:	29 f4       	brne	.+10     	; 0x2792 <free+0x92>
    2788:	e0 93 a3 20 	sts	0x20A3, r30	; 0x8020a3 <__flp>
    278c:	f0 93 a4 20 	sts	0x20A4, r31	; 0x8020a4 <__flp+0x1>
    2790:	3d c0       	rjmp	.+122    	; 0x280c <free+0x10c>
    2792:	e9 01       	movw	r28, r18
    2794:	ea 83       	std	Y+2, r30	; 0x02
    2796:	fb 83       	std	Y+3, r31	; 0x03
    2798:	49 91       	ld	r20, Y+
    279a:	59 91       	ld	r21, Y+
    279c:	c4 0f       	add	r28, r20
    279e:	d5 1f       	adc	r29, r21
    27a0:	ec 17       	cp	r30, r28
    27a2:	fd 07       	cpc	r31, r29
    27a4:	61 f4       	brne	.+24     	; 0x27be <free+0xbe>
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	84 0f       	add	r24, r20
    27ac:	95 1f       	adc	r25, r21
    27ae:	02 96       	adiw	r24, 0x02	; 2
    27b0:	e9 01       	movw	r28, r18
    27b2:	88 83       	st	Y, r24
    27b4:	99 83       	std	Y+1, r25	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	8a 83       	std	Y+2, r24	; 0x02
    27bc:	9b 83       	std	Y+3, r25	; 0x03
    27be:	e0 e0       	ldi	r30, 0x00	; 0
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	12 96       	adiw	r26, 0x02	; 2
    27c4:	8d 91       	ld	r24, X+
    27c6:	9c 91       	ld	r25, X
    27c8:	13 97       	sbiw	r26, 0x03	; 3
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	19 f0       	breq	.+6      	; 0x27d4 <free+0xd4>
    27ce:	fd 01       	movw	r30, r26
    27d0:	dc 01       	movw	r26, r24
    27d2:	f7 cf       	rjmp	.-18     	; 0x27c2 <free+0xc2>
    27d4:	8d 91       	ld	r24, X+
    27d6:	9c 91       	ld	r25, X
    27d8:	11 97       	sbiw	r26, 0x01	; 1
    27da:	9d 01       	movw	r18, r26
    27dc:	2e 5f       	subi	r18, 0xFE	; 254
    27de:	3f 4f       	sbci	r19, 0xFF	; 255
    27e0:	82 0f       	add	r24, r18
    27e2:	93 1f       	adc	r25, r19
    27e4:	20 91 a1 20 	lds	r18, 0x20A1	; 0x8020a1 <__brkval>
    27e8:	30 91 a2 20 	lds	r19, 0x20A2	; 0x8020a2 <__brkval+0x1>
    27ec:	28 17       	cp	r18, r24
    27ee:	39 07       	cpc	r19, r25
    27f0:	69 f4       	brne	.+26     	; 0x280c <free+0x10c>
    27f2:	30 97       	sbiw	r30, 0x00	; 0
    27f4:	29 f4       	brne	.+10     	; 0x2800 <free+0x100>
    27f6:	10 92 a3 20 	sts	0x20A3, r1	; 0x8020a3 <__flp>
    27fa:	10 92 a4 20 	sts	0x20A4, r1	; 0x8020a4 <__flp+0x1>
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <free+0x104>
    2800:	12 82       	std	Z+2, r1	; 0x02
    2802:	13 82       	std	Z+3, r1	; 0x03
    2804:	a0 93 a1 20 	sts	0x20A1, r26	; 0x8020a1 <__brkval>
    2808:	b0 93 a2 20 	sts	0x20A2, r27	; 0x8020a2 <__brkval+0x1>
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <strnlen_P>:
    2812:	fc 01       	movw	r30, r24
    2814:	05 90       	lpm	r0, Z+
    2816:	61 50       	subi	r22, 0x01	; 1
    2818:	70 40       	sbci	r23, 0x00	; 0
    281a:	01 10       	cpse	r0, r1
    281c:	d8 f7       	brcc	.-10     	; 0x2814 <strnlen_P+0x2>
    281e:	80 95       	com	r24
    2820:	90 95       	com	r25
    2822:	8e 0f       	add	r24, r30
    2824:	9f 1f       	adc	r25, r31
    2826:	08 95       	ret

00002828 <memset>:
    2828:	dc 01       	movw	r26, r24
    282a:	01 c0       	rjmp	.+2      	; 0x282e <memset+0x6>
    282c:	6d 93       	st	X+, r22
    282e:	41 50       	subi	r20, 0x01	; 1
    2830:	50 40       	sbci	r21, 0x00	; 0
    2832:	e0 f7       	brcc	.-8      	; 0x282c <memset+0x4>
    2834:	08 95       	ret

00002836 <strnlen>:
    2836:	fc 01       	movw	r30, r24
    2838:	61 50       	subi	r22, 0x01	; 1
    283a:	70 40       	sbci	r23, 0x00	; 0
    283c:	01 90       	ld	r0, Z+
    283e:	01 10       	cpse	r0, r1
    2840:	d8 f7       	brcc	.-10     	; 0x2838 <strnlen+0x2>
    2842:	80 95       	com	r24
    2844:	90 95       	com	r25
    2846:	8e 0f       	add	r24, r30
    2848:	9f 1f       	adc	r25, r31
    284a:	08 95       	ret

0000284c <fputc>:
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	fb 01       	movw	r30, r22
    2856:	23 81       	ldd	r18, Z+3	; 0x03
    2858:	21 fd       	sbrc	r18, 1
    285a:	03 c0       	rjmp	.+6      	; 0x2862 <fputc+0x16>
    285c:	8f ef       	ldi	r24, 0xFF	; 255
    285e:	9f ef       	ldi	r25, 0xFF	; 255
    2860:	2c c0       	rjmp	.+88     	; 0x28ba <fputc+0x6e>
    2862:	22 ff       	sbrs	r18, 2
    2864:	16 c0       	rjmp	.+44     	; 0x2892 <fputc+0x46>
    2866:	46 81       	ldd	r20, Z+6	; 0x06
    2868:	57 81       	ldd	r21, Z+7	; 0x07
    286a:	24 81       	ldd	r18, Z+4	; 0x04
    286c:	35 81       	ldd	r19, Z+5	; 0x05
    286e:	42 17       	cp	r20, r18
    2870:	53 07       	cpc	r21, r19
    2872:	44 f4       	brge	.+16     	; 0x2884 <fputc+0x38>
    2874:	a0 81       	ld	r26, Z
    2876:	b1 81       	ldd	r27, Z+1	; 0x01
    2878:	9d 01       	movw	r18, r26
    287a:	2f 5f       	subi	r18, 0xFF	; 255
    287c:	3f 4f       	sbci	r19, 0xFF	; 255
    287e:	20 83       	st	Z, r18
    2880:	31 83       	std	Z+1, r19	; 0x01
    2882:	8c 93       	st	X, r24
    2884:	26 81       	ldd	r18, Z+6	; 0x06
    2886:	37 81       	ldd	r19, Z+7	; 0x07
    2888:	2f 5f       	subi	r18, 0xFF	; 255
    288a:	3f 4f       	sbci	r19, 0xFF	; 255
    288c:	26 83       	std	Z+6, r18	; 0x06
    288e:	37 83       	std	Z+7, r19	; 0x07
    2890:	14 c0       	rjmp	.+40     	; 0x28ba <fputc+0x6e>
    2892:	8b 01       	movw	r16, r22
    2894:	ec 01       	movw	r28, r24
    2896:	fb 01       	movw	r30, r22
    2898:	00 84       	ldd	r0, Z+8	; 0x08
    289a:	f1 85       	ldd	r31, Z+9	; 0x09
    289c:	e0 2d       	mov	r30, r0
    289e:	19 95       	eicall
    28a0:	89 2b       	or	r24, r25
    28a2:	e1 f6       	brne	.-72     	; 0x285c <fputc+0x10>
    28a4:	d8 01       	movw	r26, r16
    28a6:	16 96       	adiw	r26, 0x06	; 6
    28a8:	8d 91       	ld	r24, X+
    28aa:	9c 91       	ld	r25, X
    28ac:	17 97       	sbiw	r26, 0x07	; 7
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	16 96       	adiw	r26, 0x06	; 6
    28b2:	8d 93       	st	X+, r24
    28b4:	9c 93       	st	X, r25
    28b6:	17 97       	sbiw	r26, 0x07	; 7
    28b8:	ce 01       	movw	r24, r28
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	08 95       	ret

000028c4 <__ultoa_invert>:
    28c4:	fa 01       	movw	r30, r20
    28c6:	aa 27       	eor	r26, r26
    28c8:	28 30       	cpi	r18, 0x08	; 8
    28ca:	51 f1       	breq	.+84     	; 0x2920 <__ultoa_invert+0x5c>
    28cc:	20 31       	cpi	r18, 0x10	; 16
    28ce:	81 f1       	breq	.+96     	; 0x2930 <__ultoa_invert+0x6c>
    28d0:	e8 94       	clt
    28d2:	6f 93       	push	r22
    28d4:	6e 7f       	andi	r22, 0xFE	; 254
    28d6:	6e 5f       	subi	r22, 0xFE	; 254
    28d8:	7f 4f       	sbci	r23, 0xFF	; 255
    28da:	8f 4f       	sbci	r24, 0xFF	; 255
    28dc:	9f 4f       	sbci	r25, 0xFF	; 255
    28de:	af 4f       	sbci	r26, 0xFF	; 255
    28e0:	b1 e0       	ldi	r27, 0x01	; 1
    28e2:	3e d0       	rcall	.+124    	; 0x2960 <__ultoa_invert+0x9c>
    28e4:	b4 e0       	ldi	r27, 0x04	; 4
    28e6:	3c d0       	rcall	.+120    	; 0x2960 <__ultoa_invert+0x9c>
    28e8:	67 0f       	add	r22, r23
    28ea:	78 1f       	adc	r23, r24
    28ec:	89 1f       	adc	r24, r25
    28ee:	9a 1f       	adc	r25, r26
    28f0:	a1 1d       	adc	r26, r1
    28f2:	68 0f       	add	r22, r24
    28f4:	79 1f       	adc	r23, r25
    28f6:	8a 1f       	adc	r24, r26
    28f8:	91 1d       	adc	r25, r1
    28fa:	a1 1d       	adc	r26, r1
    28fc:	6a 0f       	add	r22, r26
    28fe:	71 1d       	adc	r23, r1
    2900:	81 1d       	adc	r24, r1
    2902:	91 1d       	adc	r25, r1
    2904:	a1 1d       	adc	r26, r1
    2906:	20 d0       	rcall	.+64     	; 0x2948 <__ultoa_invert+0x84>
    2908:	09 f4       	brne	.+2      	; 0x290c <__ultoa_invert+0x48>
    290a:	68 94       	set
    290c:	3f 91       	pop	r19
    290e:	2a e0       	ldi	r18, 0x0A	; 10
    2910:	26 9f       	mul	r18, r22
    2912:	11 24       	eor	r1, r1
    2914:	30 19       	sub	r19, r0
    2916:	30 5d       	subi	r19, 0xD0	; 208
    2918:	31 93       	st	Z+, r19
    291a:	de f6       	brtc	.-74     	; 0x28d2 <__ultoa_invert+0xe>
    291c:	cf 01       	movw	r24, r30
    291e:	08 95       	ret
    2920:	46 2f       	mov	r20, r22
    2922:	47 70       	andi	r20, 0x07	; 7
    2924:	40 5d       	subi	r20, 0xD0	; 208
    2926:	41 93       	st	Z+, r20
    2928:	b3 e0       	ldi	r27, 0x03	; 3
    292a:	0f d0       	rcall	.+30     	; 0x294a <__ultoa_invert+0x86>
    292c:	c9 f7       	brne	.-14     	; 0x2920 <__ultoa_invert+0x5c>
    292e:	f6 cf       	rjmp	.-20     	; 0x291c <__ultoa_invert+0x58>
    2930:	46 2f       	mov	r20, r22
    2932:	4f 70       	andi	r20, 0x0F	; 15
    2934:	40 5d       	subi	r20, 0xD0	; 208
    2936:	4a 33       	cpi	r20, 0x3A	; 58
    2938:	18 f0       	brcs	.+6      	; 0x2940 <__ultoa_invert+0x7c>
    293a:	49 5d       	subi	r20, 0xD9	; 217
    293c:	31 fd       	sbrc	r19, 1
    293e:	40 52       	subi	r20, 0x20	; 32
    2940:	41 93       	st	Z+, r20
    2942:	02 d0       	rcall	.+4      	; 0x2948 <__ultoa_invert+0x84>
    2944:	a9 f7       	brne	.-22     	; 0x2930 <__ultoa_invert+0x6c>
    2946:	ea cf       	rjmp	.-44     	; 0x291c <__ultoa_invert+0x58>
    2948:	b4 e0       	ldi	r27, 0x04	; 4
    294a:	a6 95       	lsr	r26
    294c:	97 95       	ror	r25
    294e:	87 95       	ror	r24
    2950:	77 95       	ror	r23
    2952:	67 95       	ror	r22
    2954:	ba 95       	dec	r27
    2956:	c9 f7       	brne	.-14     	; 0x294a <__ultoa_invert+0x86>
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	61 05       	cpc	r22, r1
    295c:	71 05       	cpc	r23, r1
    295e:	08 95       	ret
    2960:	9b 01       	movw	r18, r22
    2962:	ac 01       	movw	r20, r24
    2964:	0a 2e       	mov	r0, r26
    2966:	06 94       	lsr	r0
    2968:	57 95       	ror	r21
    296a:	47 95       	ror	r20
    296c:	37 95       	ror	r19
    296e:	27 95       	ror	r18
    2970:	ba 95       	dec	r27
    2972:	c9 f7       	brne	.-14     	; 0x2966 <__ultoa_invert+0xa2>
    2974:	62 0f       	add	r22, r18
    2976:	73 1f       	adc	r23, r19
    2978:	84 1f       	adc	r24, r20
    297a:	95 1f       	adc	r25, r21
    297c:	a0 1d       	adc	r26, r0
    297e:	08 95       	ret

00002980 <_exit>:
    2980:	f8 94       	cli

00002982 <__stop_program>:
    2982:	ff cf       	rjmp	.-2      	; 0x2982 <__stop_program>
