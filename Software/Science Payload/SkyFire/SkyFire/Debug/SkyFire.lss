
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00802000  00004364  000043f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000de  008020ae  008020ae  000044a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000044a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00004548  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012622  00000000  00000000  000049f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047c5  00000000  00000000  0001701a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008664  00000000  00000000  0001b7df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001260  00000000  00000000  00023e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d418  00000000  00000000  000250a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004e0c  00000000  00000000  000524bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  000572c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003242  00000000  00000000  00057728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__vector_47>
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__vector_58>
      ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
     102:	00 00       	nop
     104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
     106:	00 00       	nop
     108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
     112:	00 00       	nop
     114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
     116:	00 00       	nop
     118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
     136:	00 00       	nop
     138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
     142:	00 00       	nop
     144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
     146:	00 00       	nop
     148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
     152:	00 00       	nop
     154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
     156:	00 00       	nop
     158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
     162:	00 00       	nop
     164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
     166:	00 00       	nop
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__vector_91>
     170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
     172:	00 00       	nop
     174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
     176:	00 00       	nop
     178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
     182:	00 00       	nop
     184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
     186:	00 00       	nop
     188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
     192:	00 00       	nop
     194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
     196:	00 00       	nop
     198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6e c0       	rjmp	.+220    	; 0x2d6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <ms5607_convert_d2+0x14>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	63 64       	ori	r22, 0x43	; 67
     280:	69 6e       	ori	r22, 0xE9	; 233
     282:	6f 70       	andi	r22, 0x0F	; 15
     284:	73 75       	andi	r23, 0x53	; 83
     286:	78 58       	subi	r23, 0x88	; 136
     288:	5b 00       	.word	0x005b	; ????

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df e3       	ldi	r29, 0x3F	; 63
     294:	de bf       	out	0x3e, r29	; 62
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0c bf       	out	0x3c, r16	; 60
     29a:	18 be       	out	0x38, r1	; 56
     29c:	19 be       	out	0x39, r1	; 57
     29e:	1a be       	out	0x3a, r1	; 58
     2a0:	1b be       	out	0x3b, r1	; 59

000002a2 <__do_copy_data>:
     2a2:	10 e2       	ldi	r17, 0x20	; 32
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e2       	ldi	r27, 0x20	; 32
     2a8:	e4 e6       	ldi	r30, 0x64	; 100
     2aa:	f3 e4       	ldi	r31, 0x43	; 67
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	ae 3a       	cpi	r26, 0xAE	; 174
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>
     2bc:	1b be       	out	0x3b, r1	; 59

000002be <__do_clear_bss>:
     2be:	21 e2       	ldi	r18, 0x21	; 33
     2c0:	ae ea       	ldi	r26, 0xAE	; 174
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	ac 38       	cpi	r26, 0x8C	; 140
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <main>
     2d2:	0c 94 b0 21 	jmp	0x4360	; 0x4360 <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2e2:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <stdio_base>
     2e6:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <stdio_base+0x1>
     2ea:	e0 91 02 21 	lds	r30, 0x2102	; 0x802102 <ptr_get>
     2ee:	f0 91 03 21 	lds	r31, 0x2103	; 0x802103 <ptr_get+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	19 95       	eicall
	return c;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     30a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     30c:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <stdio_base>
     310:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <stdio_base+0x1>
     314:	e0 91 04 21 	lds	r30, 0x2104	; 0x802104 <ptr_put>
     318:	f0 91 05 21 	lds	r31, 0x2105	; 0x802105 <ptr_put+0x1>
     31c:	19 95       	eicall
     31e:	99 23       	and	r25, r25
     320:	1c f0       	brlt	.+6      	; 0x328 <_write+0x1e>
		return -1;
	}
	return 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adca_callback>
     36e:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adca_callback>
     3e8:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adca_callback>
     462:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adca_callback>
     4dc:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     516:	fc 01       	movw	r30, r24
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	95 ff       	sbrs	r25, 5
     51c:	fd cf       	rjmp	.-6      	; 0x518 <usart_putchar+0x2>
     51e:	60 83       	st	Z, r22
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <usart_getchar>:
     526:	fc 01       	movw	r30, r24
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	99 23       	and	r25, r25
     52c:	ec f7       	brge	.-6      	; 0x528 <usart_getchar+0x2>
     52e:	80 81       	ld	r24, Z
     530:	08 95       	ret

00000532 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     532:	4f 92       	push	r4
     534:	5f 92       	push	r5
     536:	6f 92       	push	r6
     538:	7f 92       	push	r7
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	7c 01       	movw	r14, r24
     54e:	4a 01       	movw	r8, r20
     550:	5b 01       	movw	r10, r22
     552:	28 01       	movw	r4, r16
     554:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     556:	fc 01       	movw	r30, r24
     558:	84 81       	ldd	r24, Z+4	; 0x04
     55a:	82 ff       	sbrs	r24, 2
     55c:	16 c0       	rjmp	.+44     	; 0x58a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     55e:	d9 01       	movw	r26, r18
     560:	c8 01       	movw	r24, r16
     562:	68 94       	set
     564:	12 f8       	bld	r1, 2
     566:	b6 95       	lsr	r27
     568:	a7 95       	ror	r26
     56a:	97 95       	ror	r25
     56c:	87 95       	ror	r24
     56e:	16 94       	lsr	r1
     570:	d1 f7       	brne	.-12     	; 0x566 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     572:	b9 01       	movw	r22, r18
     574:	a8 01       	movw	r20, r16
     576:	03 2e       	mov	r0, r19
     578:	36 e1       	ldi	r19, 0x16	; 22
     57a:	76 95       	lsr	r23
     57c:	67 95       	ror	r22
     57e:	57 95       	ror	r21
     580:	47 95       	ror	r20
     582:	3a 95       	dec	r19
     584:	d1 f7       	brne	.-12     	; 0x57a <usart_set_baudrate+0x48>
     586:	30 2d       	mov	r19, r0
     588:	15 c0       	rjmp	.+42     	; 0x5b4 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     58a:	d9 01       	movw	r26, r18
     58c:	c8 01       	movw	r24, r16
     58e:	68 94       	set
     590:	13 f8       	bld	r1, 3
     592:	b6 95       	lsr	r27
     594:	a7 95       	ror	r26
     596:	97 95       	ror	r25
     598:	87 95       	ror	r24
     59a:	16 94       	lsr	r1
     59c:	d1 f7       	brne	.-12     	; 0x592 <usart_set_baudrate+0x60>
		min_rate /= 2;
     59e:	b9 01       	movw	r22, r18
     5a0:	a8 01       	movw	r20, r16
     5a2:	03 2e       	mov	r0, r19
     5a4:	37 e1       	ldi	r19, 0x17	; 23
     5a6:	76 95       	lsr	r23
     5a8:	67 95       	ror	r22
     5aa:	57 95       	ror	r21
     5ac:	47 95       	ror	r20
     5ae:	3a 95       	dec	r19
     5b0:	d1 f7       	brne	.-12     	; 0x5a6 <usart_set_baudrate+0x74>
     5b2:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     5b4:	88 15       	cp	r24, r8
     5b6:	99 05       	cpc	r25, r9
     5b8:	aa 05       	cpc	r26, r10
     5ba:	bb 05       	cpc	r27, r11
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <usart_set_baudrate+0x8e>
     5be:	a6 c0       	rjmp	.+332    	; 0x70c <usart_set_baudrate+0x1da>
     5c0:	84 16       	cp	r8, r20
     5c2:	95 06       	cpc	r9, r21
     5c4:	a6 06       	cpc	r10, r22
     5c6:	b7 06       	cpc	r11, r23
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <usart_set_baudrate+0x9a>
     5ca:	a2 c0       	rjmp	.+324    	; 0x710 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5cc:	f7 01       	movw	r30, r14
     5ce:	84 81       	ldd	r24, Z+4	; 0x04
     5d0:	82 fd       	sbrc	r24, 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <usart_set_baudrate+0xaa>
		baud *= 2;
     5d4:	88 0c       	add	r8, r8
     5d6:	99 1c       	adc	r9, r9
     5d8:	aa 1c       	adc	r10, r10
     5da:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     5dc:	c3 01       	movw	r24, r6
     5de:	b2 01       	movw	r22, r4
     5e0:	a5 01       	movw	r20, r10
     5e2:	94 01       	movw	r18, r8
     5e4:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     5e8:	2f 3f       	cpi	r18, 0xFF	; 255
     5ea:	31 05       	cpc	r19, r1
     5ec:	41 05       	cpc	r20, r1
     5ee:	51 05       	cpc	r21, r1
     5f0:	08 f4       	brcc	.+2      	; 0x5f4 <usart_set_baudrate+0xc2>
     5f2:	90 c0       	rjmp	.+288    	; 0x714 <usart_set_baudrate+0x1e2>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e0       	ldi	r26, 0x00	; 0
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	c9 ef       	ldi	r28, 0xF9	; 249
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <usart_set_baudrate+0xd8>
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	4a 07       	cpc	r20, r26
     606:	5b 07       	cpc	r21, r27
     608:	58 f0       	brcs	.+22     	; 0x620 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	aa 1f       	adc	r26, r26
     610:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     612:	cd 3f       	cpi	r28, 0xFD	; 253
     614:	0c f4       	brge	.+2      	; 0x618 <usart_set_baudrate+0xe6>
			limit |= 1;
     616:	81 60       	ori	r24, 0x01	; 1
     618:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     61a:	c7 30       	cpi	r28, 0x07	; 7
     61c:	89 f7       	brne	.-30     	; 0x600 <usart_set_baudrate+0xce>
     61e:	4f c0       	rjmp	.+158    	; 0x6be <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     620:	cc 23       	and	r28, r28
     622:	0c f0       	brlt	.+2      	; 0x626 <usart_set_baudrate+0xf4>
     624:	4c c0       	rjmp	.+152    	; 0x6be <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     626:	d5 01       	movw	r26, r10
     628:	c4 01       	movw	r24, r8
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	aa 1f       	adc	r26, r26
     630:	bb 1f       	adc	r27, r27
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	aa 1f       	adc	r26, r26
     638:	bb 1f       	adc	r27, r27
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	aa 1f       	adc	r26, r26
     640:	bb 1f       	adc	r27, r27
     642:	48 1a       	sub	r4, r24
     644:	59 0a       	sbc	r5, r25
     646:	6a 0a       	sbc	r6, r26
     648:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     64a:	ce 3f       	cpi	r28, 0xFE	; 254
     64c:	f4 f4       	brge	.+60     	; 0x68a <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     64e:	8d ef       	ldi	r24, 0xFD	; 253
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	8c 1b       	sub	r24, r28
     654:	91 09       	sbc	r25, r1
     656:	c7 fd       	sbrc	r28, 7
     658:	93 95       	inc	r25
     65a:	04 c0       	rjmp	.+8      	; 0x664 <usart_set_baudrate+0x132>
     65c:	44 0c       	add	r4, r4
     65e:	55 1c       	adc	r5, r5
     660:	66 1c       	adc	r6, r6
     662:	77 1c       	adc	r7, r7
     664:	8a 95       	dec	r24
     666:	d2 f7       	brpl	.-12     	; 0x65c <usart_set_baudrate+0x12a>
     668:	d5 01       	movw	r26, r10
     66a:	c4 01       	movw	r24, r8
     66c:	b6 95       	lsr	r27
     66e:	a7 95       	ror	r26
     670:	97 95       	ror	r25
     672:	87 95       	ror	r24
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	64 0d       	add	r22, r4
     67a:	75 1d       	adc	r23, r5
     67c:	86 1d       	adc	r24, r6
     67e:	97 1d       	adc	r25, r7
     680:	a5 01       	movw	r20, r10
     682:	94 01       	movw	r18, r8
     684:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__udivmodsi4>
     688:	37 c0       	rjmp	.+110    	; 0x6f8 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	8c 0f       	add	r24, r28
     68e:	a5 01       	movw	r20, r10
     690:	94 01       	movw	r18, r8
     692:	04 c0       	rjmp	.+8      	; 0x69c <usart_set_baudrate+0x16a>
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	44 1f       	adc	r20, r20
     69a:	55 1f       	adc	r21, r21
     69c:	8a 95       	dec	r24
     69e:	d2 f7       	brpl	.-12     	; 0x694 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     6a0:	da 01       	movw	r26, r20
     6a2:	c9 01       	movw	r24, r18
     6a4:	b6 95       	lsr	r27
     6a6:	a7 95       	ror	r26
     6a8:	97 95       	ror	r25
     6aa:	87 95       	ror	r24
     6ac:	bc 01       	movw	r22, r24
     6ae:	cd 01       	movw	r24, r26
     6b0:	64 0d       	add	r22, r4
     6b2:	75 1d       	adc	r23, r5
     6b4:	86 1d       	adc	r24, r6
     6b6:	97 1d       	adc	r25, r7
     6b8:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__udivmodsi4>
     6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	8c 0f       	add	r24, r28
     6c2:	a5 01       	movw	r20, r10
     6c4:	94 01       	movw	r18, r8
     6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <usart_set_baudrate+0x19e>
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	44 1f       	adc	r20, r20
     6ce:	55 1f       	adc	r21, r21
     6d0:	8a 95       	dec	r24
     6d2:	d2 f7       	brpl	.-12     	; 0x6c8 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     6d4:	da 01       	movw	r26, r20
     6d6:	c9 01       	movw	r24, r18
     6d8:	b6 95       	lsr	r27
     6da:	a7 95       	ror	r26
     6dc:	97 95       	ror	r25
     6de:	87 95       	ror	r24
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	64 0d       	add	r22, r4
     6e6:	75 1d       	adc	r23, r5
     6e8:	86 1d       	adc	r24, r6
     6ea:	97 1d       	adc	r25, r7
     6ec:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__udivmodsi4>
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	31 09       	sbc	r19, r1
     6f4:	41 09       	sbc	r20, r1
     6f6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     6f8:	83 2f       	mov	r24, r19
     6fa:	8f 70       	andi	r24, 0x0F	; 15
     6fc:	c2 95       	swap	r28
     6fe:	c0 7f       	andi	r28, 0xF0	; 240
     700:	c8 2b       	or	r28, r24
     702:	f7 01       	movw	r30, r14
     704:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     706:	26 83       	std	Z+6, r18	; 0x06

	return true;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	18 c0       	rjmp	.+48     	; 0x73c <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	16 c0       	rjmp	.+44     	; 0x73c <usart_set_baudrate+0x20a>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	14 c0       	rjmp	.+40     	; 0x73c <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     714:	d5 01       	movw	r26, r10
     716:	c4 01       	movw	r24, r8
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	aa 1f       	adc	r26, r26
     71e:	bb 1f       	adc	r27, r27
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	aa 1f       	adc	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	aa 1f       	adc	r26, r26
     72e:	bb 1f       	adc	r27, r27
     730:	48 1a       	sub	r4, r24
     732:	59 0a       	sbc	r5, r25
     734:	6a 0a       	sbc	r6, r26
     736:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     738:	c9 ef       	ldi	r28, 0xF9	; 249
     73a:	89 cf       	rjmp	.-238    	; 0x64e <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	7f 90       	pop	r7
     750:	6f 90       	pop	r6
     752:	5f 90       	pop	r5
     754:	4f 90       	pop	r4
     756:	08 95       	ret

00000758 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	09 f4       	brne	.+2      	; 0x76a <usart_init_rs232+0x12>
     768:	be c0       	rjmp	.+380    	; 0x8e6 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     76a:	80 3c       	cpi	r24, 0xC0	; 192
     76c:	91 05       	cpc	r25, r1
     76e:	21 f4       	brne	.+8      	; 0x778 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     770:	60 e1       	ldi	r22, 0x10	; 16
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	4a d3       	rcall	.+1684   	; 0xe0a <sysclk_enable_module>
     776:	b7 c0       	rjmp	.+366    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     778:	c1 15       	cp	r28, r1
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	d8 07       	cpc	r29, r24
     77e:	21 f4       	brne	.+8      	; 0x788 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     780:	64 e0       	ldi	r22, 0x04	; 4
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	42 d3       	rcall	.+1668   	; 0xe0a <sysclk_enable_module>
     786:	af c0       	rjmp	.+350    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     788:	c0 38       	cpi	r28, 0x80	; 128
     78a:	e1 e0       	ldi	r30, 0x01	; 1
     78c:	de 07       	cpc	r29, r30
     78e:	21 f4       	brne	.+8      	; 0x798 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     790:	62 e0       	ldi	r22, 0x02	; 2
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	3a d3       	rcall	.+1652   	; 0xe0a <sysclk_enable_module>
     796:	a7 c0       	rjmp	.+334    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     798:	c1 15       	cp	r28, r1
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     79e:	21 f4       	brne	.+8      	; 0x7a8 <usart_init_rs232+0x50>
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	32 d3       	rcall	.+1636   	; 0xe0a <sysclk_enable_module>
     7a6:	9f c0       	rjmp	.+318    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     7a8:	c0 38       	cpi	r28, 0x80	; 128
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <usart_init_rs232+0x60>
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	2a d3       	rcall	.+1620   	; 0xe0a <sysclk_enable_module>
     7b6:	97 c0       	rjmp	.+302    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     7b8:	c1 15       	cp	r28, r1
     7ba:	e2 e0       	ldi	r30, 0x02	; 2
     7bc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     7be:	21 f4       	brne	.+8      	; 0x7c8 <usart_init_rs232+0x70>
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	22 d3       	rcall	.+1604   	; 0xe0a <sysclk_enable_module>
     7c6:	8f c0       	rjmp	.+286    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     7c8:	c0 32       	cpi	r28, 0x20	; 32
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     7ce:	21 f4       	brne	.+8      	; 0x7d8 <usart_init_rs232+0x80>
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	1a d3       	rcall	.+1588   	; 0xe0a <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     7d6:	87 c0       	rjmp	.+270    	; 0x8e6 <usart_init_rs232+0x18e>
     7d8:	c1 15       	cp	r28, r1
     7da:	88 e0       	ldi	r24, 0x08	; 8
     7dc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     7de:	21 f4       	brne	.+8      	; 0x7e8 <usart_init_rs232+0x90>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	12 d3       	rcall	.+1572   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     7e6:	7f c0       	rjmp	.+254    	; 0x8e6 <usart_init_rs232+0x18e>
     7e8:	c1 15       	cp	r28, r1
     7ea:	e9 e0       	ldi	r30, 0x09	; 9
     7ec:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <usart_init_rs232+0xa0>
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	0a d3       	rcall	.+1556   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     7f6:	77 c0       	rjmp	.+238    	; 0x8e6 <usart_init_rs232+0x18e>
     7f8:	c1 15       	cp	r28, r1
     7fa:	fa e0       	ldi	r31, 0x0A	; 10
     7fc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     7fe:	21 f4       	brne	.+8      	; 0x808 <usart_init_rs232+0xb0>
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	02 d3       	rcall	.+1540   	; 0xe0a <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     806:	6f c0       	rjmp	.+222    	; 0x8e6 <usart_init_rs232+0x18e>
     808:	c0 34       	cpi	r28, 0x40	; 64
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     80e:	21 f4       	brne	.+8      	; 0x818 <usart_init_rs232+0xc0>
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	fa d2       	rcall	.+1524   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     816:	67 c0       	rjmp	.+206    	; 0x8e6 <usart_init_rs232+0x18e>
     818:	c0 34       	cpi	r28, 0x40	; 64
     81a:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     81c:	de 07       	cpc	r29, r30
     81e:	21 f4       	brne	.+8      	; 0x828 <usart_init_rs232+0xd0>
     820:	62 e0       	ldi	r22, 0x02	; 2
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	f2 d2       	rcall	.+1508   	; 0xe0a <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     826:	5f c0       	rjmp	.+190    	; 0x8e6 <usart_init_rs232+0x18e>
     828:	c0 39       	cpi	r28, 0x90	; 144
     82a:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     82c:	df 07       	cpc	r29, r31
     82e:	21 f4       	brne	.+8      	; 0x838 <usart_init_rs232+0xe0>
     830:	64 e0       	ldi	r22, 0x04	; 4
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	ea d2       	rcall	.+1492   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     836:	57 c0       	rjmp	.+174    	; 0x8e6 <usart_init_rs232+0x18e>
     838:	c0 39       	cpi	r28, 0x90	; 144
     83a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     83c:	d8 07       	cpc	r29, r24
     83e:	21 f4       	brne	.+8      	; 0x848 <usart_init_rs232+0xf0>
     840:	64 e0       	ldi	r22, 0x04	; 4
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	e2 d2       	rcall	.+1476   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     846:	4f c0       	rjmp	.+158    	; 0x8e6 <usart_init_rs232+0x18e>
     848:	c0 39       	cpi	r28, 0x90	; 144
     84a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     84c:	de 07       	cpc	r29, r30
     84e:	21 f4       	brne	.+8      	; 0x858 <usart_init_rs232+0x100>
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     854:	da d2       	rcall	.+1460   	; 0xe0a <sysclk_enable_module>
     856:	47 c0       	rjmp	.+142    	; 0x8e6 <usart_init_rs232+0x18e>
     858:	c0 3c       	cpi	r28, 0xC0	; 192
     85a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     85c:	df 07       	cpc	r29, r31
     85e:	21 f4       	brne	.+8      	; 0x868 <usart_init_rs232+0x110>
     860:	68 e0       	ldi	r22, 0x08	; 8
     862:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     864:	d2 d2       	rcall	.+1444   	; 0xe0a <sysclk_enable_module>
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <usart_init_rs232+0x18e>
     868:	c0 3c       	cpi	r28, 0xC0	; 192
     86a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     86c:	d8 07       	cpc	r29, r24
     86e:	21 f4       	brne	.+8      	; 0x878 <usart_init_rs232+0x120>
     870:	68 e0       	ldi	r22, 0x08	; 8
     872:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     874:	ca d2       	rcall	.+1428   	; 0xe0a <sysclk_enable_module>
     876:	37 c0       	rjmp	.+110    	; 0x8e6 <usart_init_rs232+0x18e>
     878:	c0 3a       	cpi	r28, 0xA0	; 160
     87a:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     87c:	de 07       	cpc	r29, r30
     87e:	21 f4       	brne	.+8      	; 0x888 <usart_init_rs232+0x130>
     880:	60 e1       	ldi	r22, 0x10	; 16
     882:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     884:	c2 d2       	rcall	.+1412   	; 0xe0a <sysclk_enable_module>
     886:	2f c0       	rjmp	.+94     	; 0x8e6 <usart_init_rs232+0x18e>
     888:	c0 3a       	cpi	r28, 0xA0	; 160
     88a:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     88c:	df 07       	cpc	r29, r31
     88e:	21 f4       	brne	.+8      	; 0x898 <usart_init_rs232+0x140>
     890:	60 e1       	ldi	r22, 0x10	; 16
     892:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     894:	ba d2       	rcall	.+1396   	; 0xe0a <sysclk_enable_module>
     896:	27 c0       	rjmp	.+78     	; 0x8e6 <usart_init_rs232+0x18e>
     898:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	d8 07       	cpc	r29, r24
     89e:	21 f4       	brne	.+8      	; 0x8a8 <usart_init_rs232+0x150>
     8a0:	60 e1       	ldi	r22, 0x10	; 16
     8a2:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     8a4:	b2 d2       	rcall	.+1380   	; 0xe0a <sysclk_enable_module>
     8a6:	1f c0       	rjmp	.+62     	; 0x8e6 <usart_init_rs232+0x18e>
     8a8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     8aa:	e8 e0       	ldi	r30, 0x08	; 8
     8ac:	de 07       	cpc	r29, r30
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <usart_init_rs232+0x160>
     8b0:	60 e2       	ldi	r22, 0x20	; 32
     8b2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     8b4:	aa d2       	rcall	.+1364   	; 0xe0a <sysclk_enable_module>
     8b6:	17 c0       	rjmp	.+46     	; 0x8e6 <usart_init_rs232+0x18e>
     8b8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     8ba:	f9 e0       	ldi	r31, 0x09	; 9
     8bc:	df 07       	cpc	r29, r31
     8be:	21 f4       	brne	.+8      	; 0x8c8 <usart_init_rs232+0x170>
     8c0:	60 e2       	ldi	r22, 0x20	; 32
     8c2:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     8c4:	a2 d2       	rcall	.+1348   	; 0xe0a <sysclk_enable_module>
     8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <usart_init_rs232+0x18e>
     8c8:	c0 38       	cpi	r28, 0x80	; 128
     8ca:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     8cc:	d8 07       	cpc	r29, r24
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <usart_init_rs232+0x180>
     8d0:	60 e4       	ldi	r22, 0x40	; 64
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	9a d2       	rcall	.+1332   	; 0xe0a <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <usart_init_rs232+0x18e>
     8d8:	c0 3a       	cpi	r28, 0xA0	; 160
     8da:	e4 e0       	ldi	r30, 0x04	; 4
     8dc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     8de:	19 f4       	brne	.+6      	; 0x8e6 <usart_init_rs232+0x18e>
     8e0:	60 e4       	ldi	r22, 0x40	; 64
     8e2:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     8e4:	92 d2       	rcall	.+1316   	; 0xe0a <sysclk_enable_module>
     8e6:	8d 81       	ldd	r24, Y+5	; 0x05
     8e8:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     8ea:	8d 83       	std	Y+5, r24	; 0x05
     8ec:	f8 01       	movw	r30, r16
     8ee:	95 81       	ldd	r25, Z+5	; 0x05
     8f0:	84 81       	ldd	r24, Z+4	; 0x04
     8f2:	89 2b       	or	r24, r25
     8f4:	96 81       	ldd	r25, Z+6	; 0x06
     8f6:	91 11       	cpse	r25, r1
     8f8:	98 e0       	ldi	r25, 0x08	; 8
     8fa:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     8fc:	8d 83       	std	Y+5, r24	; 0x05
     8fe:	f8 01       	movw	r30, r16
     900:	40 81       	ld	r20, Z
     902:	51 81       	ldd	r21, Z+1	; 0x01
     904:	62 81       	ldd	r22, Z+2	; 0x02
     906:	73 81       	ldd	r23, Z+3	; 0x03
     908:	00 e0       	ldi	r16, 0x00	; 0
     90a:	18 e4       	ldi	r17, 0x48	; 72
     90c:	28 ee       	ldi	r18, 0xE8	; 232
     90e:	31 e0       	ldi	r19, 0x01	; 1
     910:	ce 01       	movw	r24, r28
     912:	0f de       	rcall	.-994    	; 0x532 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	98 60       	ori	r25, 0x08	; 8
     918:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	90 61       	ori	r25, 0x10	; 16
     91e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     92a:	08 95       	ret

0000092c <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= 0x08; // Sets A3 to output
     92c:	e0 e0       	ldi	r30, 0x00	; 0
     92e:	f6 e0       	ldi	r31, 0x06	; 6
     930:	80 81       	ld	r24, Z
     932:	88 60       	ori	r24, 0x08	; 8
     934:	80 83       	st	Z, r24
     936:	08 95       	ret

00000938 <cam_switch>:
}

void cam_switch(void){
	PORTA.OUT ^= 0x08; // Changes A3 from high to low or vice-versa
     938:	e0 e0       	ldi	r30, 0x00	; 0
     93a:	f6 e0       	ldi	r31, 0x06	; 6
     93c:	94 81       	ldd	r25, Z+4	; 0x04
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	89 27       	eor	r24, r25
     942:	84 83       	std	Z+4, r24	; 0x04
     944:	08 95       	ret

00000946 <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	27 97       	sbiw	r28, 0x07	; 7
     950:	cd bf       	out	0x3d, r28	; 61
     952:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     954:	60 e2       	ldi	r22, 0x20	; 32
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	58 d2       	rcall	.+1200   	; 0xe0a <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     95a:	e0 e6       	ldi	r30, 0x60	; 96
     95c:	f6 e0       	ldi	r31, 0x06	; 6
     95e:	80 81       	ld	r24, Z
     960:	80 68       	ori	r24, 0x80	; 128
     962:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	f0 e2       	ldi	r31, 0x20	; 32
     968:	84 81       	ldd	r24, Z+4	; 0x04
     96a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     96c:	85 81       	ldd	r24, Z+5	; 0x05
     96e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     970:	86 81       	ldd	r24, Z+6	; 0x06
     972:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	a2 81       	ldd	r26, Z+2	; 0x02
     97a:	b3 81       	ldd	r27, Z+3	; 0x03
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	ab 83       	std	Y+3, r26	; 0x03
     982:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     984:	60 e2       	ldi	r22, 0x20	; 32
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	40 d2       	rcall	.+1152   	; 0xe0a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     98a:	be 01       	movw	r22, r28
     98c:	6f 5f       	subi	r22, 0xFF	; 255
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	80 eb       	ldi	r24, 0xB0	; 176
     992:	99 e0       	ldi	r25, 0x09	; 9
     994:	e1 de       	rcall	.-574    	; 0x758 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     996:	27 96       	adiw	r28, 0x07	; 7
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     9a4:	61 50       	subi	r22, 0x01	; 1
     9a6:	71 09       	sbc	r23, r1
     9a8:	81 09       	sbc	r24, r1
     9aa:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     9ac:	61 15       	cp	r22, r1
     9ae:	71 05       	cpc	r23, r1
     9b0:	81 05       	cpc	r24, r1
     9b2:	91 05       	cpc	r25, r1
     9b4:	b9 f7       	brne	.-18     	; 0x9a4 <__portable_avr_delay_cycles+0x2>
     9b6:	08 95       	ret

000009b8 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     9b8:	e0 e4       	ldi	r30, 0x40	; 64
     9ba:	f6 e0       	ldi	r31, 0x06	; 6
     9bc:	94 81       	ldd	r25, Z+4	; 0x04
     9be:	80 e1       	ldi	r24, 0x10	; 16
     9c0:	89 27       	eor	r24, r25
     9c2:	84 83       	std	Z+4, r24	; 0x04
     9c4:	08 95       	ret

000009c6 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     9c6:	e0 e4       	ldi	r30, 0x40	; 64
     9c8:	f6 e0       	ldi	r31, 0x06	; 6
     9ca:	84 81       	ldd	r24, Z+4	; 0x04
     9cc:	80 61       	ori	r24, 0x10	; 16
     9ce:	84 83       	std	Z+4, r24	; 0x04
	delay_ms(5);
     9d0:	6b e2       	ldi	r22, 0x2B	; 43
     9d2:	78 e6       	ldi	r23, 0x68	; 104
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	e4 df       	rcall	.-56     	; 0x9a2 <__portable_avr_delay_cycles>
	
	// Resets the ms5607
	flip_ms5607();
     9da:	ee df       	rcall	.-36     	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     9dc:	8e e1       	ldi	r24, 0x1E	; 30
     9de:	82 d0       	rcall	.+260    	; 0xae4 <spi_write>
     9e0:	60 e8       	ldi	r22, 0x80	; 128
	delay_ms(3);
     9e2:	7e e3       	ldi	r23, 0x3E	; 62
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	dc df       	rcall	.-72     	; 0x9a2 <__portable_avr_delay_cycles>
	flip_ms5607();
     9ea:	e6 df       	rcall	.-52     	; 0x9b8 <flip_ms5607>
	delay_ms(2);
     9ec:	6b ea       	ldi	r22, 0xAB	; 171
     9ee:	79 e2       	ldi	r23, 0x29	; 41
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	d6 cf       	rjmp	.-84     	; 0x9a2 <__portable_avr_delay_cycles>
     9f6:	08 95       	ret

000009f8 <ms5607_read>:
     9f8:	cf 93       	push	r28
}

uint16_t ms5607_read(uint16_t comm)
{
     9fa:	df 93       	push	r29
     9fc:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     9fe:	dc df       	rcall	.-72     	; 0x9b8 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     a00:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     a02:	70 d0       	rcall	.+224    	; 0xae4 <spi_write>
     a04:	5f d0       	rcall	.+190    	; 0xac4 <spi_read>
     a06:	c8 2f       	mov	r28, r24
     a08:	d0 e0       	ldi	r29, 0x00	; 0
     a0a:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     a0c:	cc 27       	eor	r28, r28
     a0e:	5a d0       	rcall	.+180    	; 0xac4 <spi_read>
     a10:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     a12:	d2 df       	rcall	.-92     	; 0x9b8 <flip_ms5607>
     a14:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <ms5607_convert_d1>:
     a1c:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     a24:	c9 df       	rcall	.-110    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     a26:	88 e4       	ldi	r24, 0x48	; 72
     a28:	5d d0       	rcall	.+186    	; 0xae4 <spi_write>
	delay_ms(10);
     a2a:	66 e5       	ldi	r22, 0x56	; 86
     a2c:	70 ed       	ldi	r23, 0xD0	; 208
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a32:	b7 df       	rcall	.-146    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a34:	c1 df       	rcall	.-126    	; 0x9b8 <flip_ms5607>
     a36:	c0 df       	rcall	.-128    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	54 d0       	rcall	.+168    	; 0xae4 <spi_write>
     a3c:	43 d0       	rcall	.+134    	; 0xac4 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a3e:	c8 2e       	mov	r12, r24
     a40:	d1 2c       	mov	r13, r1
     a42:	e1 2c       	mov	r14, r1
     a44:	f1 2c       	mov	r15, r1
     a46:	76 01       	movw	r14, r12
     a48:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a4a:	cc 24       	eor	r12, r12
     a4c:	3b d0       	rcall	.+118    	; 0xac4 <spi_read>
     a4e:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a50:	39 d0       	rcall	.+114    	; 0xac4 <spi_read>
     a52:	c8 2a       	or	r12, r24
     a54:	b1 df       	rcall	.-158    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a56:	c7 01       	movw	r24, r14
     a58:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	08 95       	ret

00000a64 <ms5607_convert_d2>:
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     a6c:	a5 df       	rcall	.-182    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     a6e:	88 e5       	ldi	r24, 0x58	; 88
     a70:	39 d0       	rcall	.+114    	; 0xae4 <spi_write>
	delay_ms(10);
     a72:	66 e5       	ldi	r22, 0x56	; 86
     a74:	70 ed       	ldi	r23, 0xD0	; 208
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a7a:	93 df       	rcall	.-218    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a7c:	9d df       	rcall	.-198    	; 0x9b8 <flip_ms5607>
     a7e:	9c df       	rcall	.-200    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	30 d0       	rcall	.+96     	; 0xae4 <spi_write>
     a84:	1f d0       	rcall	.+62     	; 0xac4 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a86:	c8 2e       	mov	r12, r24
     a88:	d1 2c       	mov	r13, r1
     a8a:	e1 2c       	mov	r14, r1
     a8c:	f1 2c       	mov	r15, r1
     a8e:	76 01       	movw	r14, r12
     a90:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a92:	cc 24       	eor	r12, r12
     a94:	17 d0       	rcall	.+46     	; 0xac4 <spi_read>
     a96:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a98:	15 d0       	rcall	.+42     	; 0xac4 <spi_read>
     a9a:	c8 2a       	or	r12, r24
     a9c:	8d df       	rcall	.-230    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a9e:	c7 01       	movw	r24, r14
     aa0:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <spi_init>:
     aac:	68 e0       	ldi	r22, 0x08	; 8
     aae:	83 e0       	ldi	r24, 0x03	; 3
	PORTC.DIR |= 0b10110000; 
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     ab0:	ac d1       	rcall	.+856    	; 0xe0a <sysclk_enable_module>
     ab2:	81 e5       	ldi	r24, 0x51	; 81
     ab4:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     ab8:	e0 e4       	ldi	r30, 0x40	; 64
     aba:	f6 e0       	ldi	r31, 0x06	; 6
     abc:	80 81       	ld	r24, Z
     abe:	80 6b       	ori	r24, 0xB0	; 176
     ac0:	80 83       	st	Z, r24
     ac2:	08 95       	ret

00000ac4 <spi_read>:

uint8_t spi_read(void)
{
	uint8_t iter_max = 100;
	uint8_t count = 0;
	SPIC.DATA = 0xFF; // make the DATA register something we know
     ac4:	e0 ec       	ldi	r30, 0xC0	; 192
     ac6:	f8 e0       	ldi	r31, 0x08	; 8
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS>>7) && count < iter_max){ // wait for the SPI interrupt flag to let us know the transfer is complete
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	88 23       	and	r24, r24
     ad0:	34 f0       	brlt	.+12     	; 0xade <spi_read+0x1a>
     ad2:	84 e6       	ldi	r24, 0x64	; 100
     ad4:	92 81       	ldd	r25, Z+2	; 0x02
     ad6:	99 23       	and	r25, r25
     ad8:	14 f0       	brlt	.+4      	; 0xade <spi_read+0x1a>
     ada:	81 50       	subi	r24, 0x01	; 1
     adc:	d9 f7       	brne	.-10     	; 0xad4 <spi_read+0x10>
		count++;	
	}
	
	return SPIC.DATA; // return the data from this function
     ade:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     ae2:	08 95       	ret

00000ae4 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     ae4:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     ae8:	e0 ec       	ldi	r30, 0xC0	; 192
     aea:	f8 e0       	ldi	r31, 0x08	; 8
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	88 23       	and	r24, r24
     af0:	ec f7       	brge	.-6      	; 0xaec <spi_write+0x8>
     af2:	08 95       	ret

00000af4 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     afa:	15 dd       	rcall	.-1494   	; 0x526 <usart_getchar>
     afc:	88 83       	st	Y, r24
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     b04:	08 cd       	rjmp	.-1520   	; 0x516 <usart_putchar>
}
     b06:	08 95       	ret

00000b08 <data_terminal_init>:

#include <asf.h>
#include "data_logger.h"

void data_terminal_init()
{
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	27 97       	sbiw	r28, 0x07	; 7
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b16:	60 e1       	ldi	r22, 0x10	; 16
     b18:	85 e0       	ldi	r24, 0x05	; 5
     b1a:	77 d1       	rcall	.+750    	; 0xe0a <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     b1c:	e0 e8       	ldi	r30, 0x80	; 128
     b1e:	f6 e0       	ldi	r31, 0x06	; 6
     b20:	80 81       	ld	r24, Z
     b22:	88 60       	ori	r24, 0x08	; 8
     b24:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     b26:	80 ea       	ldi	r24, 0xA0	; 160
     b28:	9a e0       	ldi	r25, 0x0A	; 10
     b2a:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <stdio_base>
     b2e:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     b32:	82 e8       	ldi	r24, 0x82	; 130
     b34:	95 e0       	ldi	r25, 0x05	; 5
     b36:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <ptr_put>
     b3a:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     b3e:	8a e7       	ldi	r24, 0x7A	; 122
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <ptr_get>
     b46:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     b4a:	ed e0       	ldi	r30, 0x0D	; 13
     b4c:	f0 e2       	ldi	r31, 0x20	; 32
     b4e:	84 81       	ldd	r24, Z+4	; 0x04
     b50:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     b52:	85 81       	ldd	r24, Z+5	; 0x05
     b54:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     b56:	86 81       	ldd	r24, Z+6	; 0x06
     b58:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	a2 81       	ldd	r26, Z+2	; 0x02
     b60:	b3 81       	ldd	r27, Z+3	; 0x03
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	ab 83       	std	Y+3, r26	; 0x03
     b68:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     b6a:	60 e1       	ldi	r22, 0x10	; 16
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	4d d1       	rcall	.+666    	; 0xe0a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     b70:	be 01       	movw	r22, r28
     b72:	6f 5f       	subi	r22, 0xFF	; 255
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	80 ea       	ldi	r24, 0xA0	; 160
     b78:	9a e0       	ldi	r25, 0x0A	; 10
     b7a:	ee dd       	rcall	.-1060   	; 0x758 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     b7c:	6c e6       	ldi	r22, 0x6C	; 108
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	85 e8       	ldi	r24, 0x85	; 133
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 f7 19 	call	0x33ee	; 0x33ee <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
     b88:	27 96       	adiw	r28, 0x07	; 7
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	fc 01       	movw	r30, r24
     b9a:	41 15       	cp	r20, r1
     b9c:	51 05       	cpc	r21, r1
     b9e:	b1 f1       	breq	.+108    	; 0xc0c <rb16_write+0x78>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	db 01       	movw	r26, r22
     bac:	a8 0f       	add	r26, r24
     bae:	b9 1f       	adc	r27, r25
     bb0:	8d 91       	ld	r24, X+
     bb2:	9c 91       	ld	r25, X
     bb4:	a2 81       	ldd	r26, Z+2	; 0x02
     bb6:	b3 81       	ldd	r27, Z+3	; 0x03
     bb8:	aa 0f       	add	r26, r26
     bba:	bb 1f       	adc	r27, r27
     bbc:	c6 81       	ldd	r28, Z+6	; 0x06
     bbe:	d7 81       	ldd	r29, Z+7	; 0x07
     bc0:	ac 0f       	add	r26, r28
     bc2:	bd 1f       	adc	r27, r29
     bc4:	8d 93       	st	X+, r24
     bc6:	9c 93       	st	X, r25
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	82 83       	std	Z+2, r24	; 0x02
     bd0:	93 83       	std	Z+3, r25	; 0x03
     bd2:	a0 81       	ld	r26, Z
     bd4:	b1 81       	ldd	r27, Z+1	; 0x01
     bd6:	8a 17       	cp	r24, r26
     bd8:	9b 07       	cpc	r25, r27
     bda:	11 f4       	brne	.+4      	; 0xbe0 <rb16_write+0x4c>
     bdc:	12 82       	std	Z+2, r1	; 0x02
     bde:	13 82       	std	Z+3, r1	; 0x03
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	c4 81       	ldd	r28, Z+4	; 0x04
     be6:	d5 81       	ldd	r29, Z+5	; 0x05
     be8:	8c 17       	cp	r24, r28
     bea:	9d 07       	cpc	r25, r29
     bec:	49 f4       	brne	.+18     	; 0xc00 <rb16_write+0x6c>
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	a8 17       	cp	r26, r24
     bf2:	b9 07       	cpc	r27, r25
     bf4:	19 f0       	breq	.+6      	; 0xbfc <rb16_write+0x68>
     bf6:	84 83       	std	Z+4, r24	; 0x04
     bf8:	95 83       	std	Z+5, r25	; 0x05
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <rb16_write+0x6c>
     bfc:	14 82       	std	Z+4, r1	; 0x04
     bfe:	15 82       	std	Z+5, r1	; 0x05
     c00:	2f 5f       	subi	r18, 0xFF	; 255
     c02:	82 2f       	mov	r24, r18
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	84 17       	cp	r24, r20
     c08:	95 07       	cpc	r25, r21
     c0a:	68 f2       	brcs	.-102    	; 0xba6 <rb16_write+0x12>
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <rb16_init>:
     c12:	fc 01       	movw	r30, r24
     c14:	12 82       	std	Z+2, r1	; 0x02
     c16:	13 82       	std	Z+3, r1	; 0x03
     c18:	14 82       	std	Z+4, r1	; 0x04
     c1a:	15 82       	std	Z+5, r1	; 0x05
     c1c:	66 83       	std	Z+6, r22	; 0x06
     c1e:	77 83       	std	Z+7, r23	; 0x07
     c20:	40 83       	st	Z, r20
     c22:	51 83       	std	Z+1, r21	; 0x01
     c24:	08 95       	ret

00000c26 <rb16_get_nth>:
     c26:	dc 01       	movw	r26, r24
     c28:	12 96       	adiw	r26, 0x02	; 2
     c2a:	ed 91       	ld	r30, X+
     c2c:	fc 91       	ld	r31, X
     c2e:	13 97       	sbiw	r26, 0x03	; 3
     c30:	cb 01       	movw	r24, r22
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	e8 17       	cp	r30, r24
     c36:	f9 07       	cpc	r31, r25
     c38:	78 f0       	brcs	.+30     	; 0xc58 <rb16_get_nth+0x32>
     c3a:	e1 50       	subi	r30, 0x01	; 1
     c3c:	f0 48       	sbci	r31, 0x80	; 128
     c3e:	e6 1b       	sub	r30, r22
     c40:	f7 0b       	sbc	r31, r23
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	16 96       	adiw	r26, 0x06	; 6
     c48:	8d 91       	ld	r24, X+
     c4a:	9c 91       	ld	r25, X
     c4c:	17 97       	sbiw	r26, 0x07	; 7
     c4e:	e8 0f       	add	r30, r24
     c50:	f9 1f       	adc	r31, r25
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	08 95       	ret
     c58:	2d 91       	ld	r18, X+
     c5a:	3c 91       	ld	r19, X
     c5c:	11 97       	sbiw	r26, 0x01	; 1
     c5e:	e2 0f       	add	r30, r18
     c60:	f3 1f       	adc	r31, r19
     c62:	e1 50       	subi	r30, 0x01	; 1
     c64:	f0 48       	sbci	r31, 0x80	; 128
     c66:	e6 1b       	sub	r30, r22
     c68:	f7 0b       	sbc	r31, r23
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	16 96       	adiw	r26, 0x06	; 6
     c70:	8d 91       	ld	r24, X+
     c72:	9c 91       	ld	r25, X
     c74:	17 97       	sbiw	r26, 0x07	; 7
     c76:	e8 0f       	add	r30, r24
     c78:	f9 1f       	adc	r31, r25
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	08 95       	ret

00000c80 <rb32_write>:
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	fc 01       	movw	r30, r24
     c8e:	41 15       	cp	r20, r1
     c90:	51 05       	cpc	r21, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <rb32_write+0x16>
     c94:	3f c0       	rjmp	.+126    	; 0xd14 <rb32_write+0x94>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	db 01       	movw	r26, r22
     ca6:	a8 0f       	add	r26, r24
     ca8:	b9 1f       	adc	r27, r25
     caa:	cd 90       	ld	r12, X+
     cac:	dd 90       	ld	r13, X+
     cae:	ed 90       	ld	r14, X+
     cb0:	fc 90       	ld	r15, X
     cb2:	a2 81       	ldd	r26, Z+2	; 0x02
     cb4:	b3 81       	ldd	r27, Z+3	; 0x03
     cb6:	aa 0f       	add	r26, r26
     cb8:	bb 1f       	adc	r27, r27
     cba:	aa 0f       	add	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	a8 0f       	add	r26, r24
     cc4:	b9 1f       	adc	r27, r25
     cc6:	cd 92       	st	X+, r12
     cc8:	dd 92       	st	X+, r13
     cca:	ed 92       	st	X+, r14
     ccc:	fc 92       	st	X, r15
     cce:	13 97       	sbiw	r26, 0x03	; 3
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	93 81       	ldd	r25, Z+3	; 0x03
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	82 83       	std	Z+2, r24	; 0x02
     cd8:	93 83       	std	Z+3, r25	; 0x03
     cda:	a0 81       	ld	r26, Z
     cdc:	b1 81       	ldd	r27, Z+1	; 0x01
     cde:	8a 17       	cp	r24, r26
     ce0:	9b 07       	cpc	r25, r27
     ce2:	11 f4       	brne	.+4      	; 0xce8 <rb32_write+0x68>
     ce4:	12 82       	std	Z+2, r1	; 0x02
     ce6:	13 82       	std	Z+3, r1	; 0x03
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	c4 81       	ldd	r28, Z+4	; 0x04
     cee:	d5 81       	ldd	r29, Z+5	; 0x05
     cf0:	8c 17       	cp	r24, r28
     cf2:	9d 07       	cpc	r25, r29
     cf4:	49 f4       	brne	.+18     	; 0xd08 <rb32_write+0x88>
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	a8 17       	cp	r26, r24
     cfa:	b9 07       	cpc	r27, r25
     cfc:	19 f0       	breq	.+6      	; 0xd04 <rb32_write+0x84>
     cfe:	84 83       	std	Z+4, r24	; 0x04
     d00:	95 83       	std	Z+5, r25	; 0x05
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <rb32_write+0x88>
     d04:	14 82       	std	Z+4, r1	; 0x04
     d06:	15 82       	std	Z+5, r1	; 0x05
     d08:	2f 5f       	subi	r18, 0xFF	; 255
     d0a:	82 2f       	mov	r24, r18
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	84 17       	cp	r24, r20
     d10:	95 07       	cpc	r25, r21
     d12:	20 f2       	brcs	.-120    	; 0xc9c <rb32_write+0x1c>
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	cf 90       	pop	r12
     d20:	08 95       	ret

00000d22 <rb32_init>:
     d22:	fc 01       	movw	r30, r24
     d24:	12 82       	std	Z+2, r1	; 0x02
     d26:	13 82       	std	Z+3, r1	; 0x03
     d28:	14 82       	std	Z+4, r1	; 0x04
     d2a:	15 82       	std	Z+5, r1	; 0x05
     d2c:	66 83       	std	Z+6, r22	; 0x06
     d2e:	77 83       	std	Z+7, r23	; 0x07
     d30:	40 83       	st	Z, r20
     d32:	51 83       	std	Z+1, r21	; 0x01
     d34:	08 95       	ret

00000d36 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     d36:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     d38:	12 96       	adiw	r26, 0x02	; 2
     d3a:	ed 91       	ld	r30, X+
     d3c:	fc 91       	ld	r31, X
     d3e:	13 97       	sbiw	r26, 0x03	; 3
     d40:	cb 01       	movw	r24, r22
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	e8 17       	cp	r30, r24
     d46:	f9 07       	cpc	r31, r25
     d48:	98 f0       	brcs	.+38     	; 0xd70 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     d4a:	e1 50       	subi	r30, 0x01	; 1
     d4c:	f0 4c       	sbci	r31, 0xC0	; 192
     d4e:	e6 1b       	sub	r30, r22
     d50:	f7 0b       	sbc	r31, r23
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	16 96       	adiw	r26, 0x06	; 6
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	17 97       	sbiw	r26, 0x07	; 7
     d62:	e8 0f       	add	r30, r24
     d64:	f9 1f       	adc	r31, r25
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	e1 50       	subi	r30, 0x01	; 1
     d7c:	f0 4c       	sbci	r31, 0xC0	; 192
     d7e:	e6 1b       	sub	r30, r22
     d80:	f7 0b       	sbc	r31, r23
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	16 96       	adiw	r26, 0x06	; 6
     d8c:	8d 91       	ld	r24, X+
     d8e:	9c 91       	ld	r25, X
     d90:	17 97       	sbiw	r26, 0x07	; 7
     d92:	e8 0f       	add	r30, r24
     d94:	f9 1f       	adc	r31, r25
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
}
     d9e:	08 95       	ret

00000da0 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	1f 92       	push	r1
     da6:	1f 92       	push	r1
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     db2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     db6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     dba:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     dbe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     dc2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     dc6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     dca:	8f b7       	in	r24, 0x3f	; 63
     dcc:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     dce:	f8 94       	cli
	return flags;
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     dd2:	e0 e5       	ldi	r30, 0x50	; 80
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	82 60       	ori	r24, 0x02	; 2
     dda:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ddc:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     dde:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     de0:	81 ff       	sbrs	r24, 1
     de2:	fd cf       	rjmp	.-6      	; 0xdde <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     de4:	61 e0       	ldi	r22, 0x01	; 1
     de6:	80 e4       	ldi	r24, 0x40	; 64
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	25 d0       	rcall	.+74     	; 0xe36 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     dec:	8f b7       	in	r24, 0x3f	; 63
     dee:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     df0:	f8 94       	cli
	return flags;
     df2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     df4:	e0 e5       	ldi	r30, 0x50	; 80
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dfe:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	1f 92       	push	r1
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e14:	9f b7       	in	r25, 0x3f	; 63
     e16:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e18:	f8 94       	cli
	return flags;
     e1a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e1c:	e8 2f       	mov	r30, r24
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	e0 59       	subi	r30, 0x90	; 144
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	60 95       	com	r22
     e26:	80 81       	ld	r24, Z
     e28:	68 23       	and	r22, r24
     e2a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e2c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e36:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e38:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e3a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e3c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e3e:	60 83       	st	Z, r22
	ret                             // Return to caller
     e40:	08 95       	ret

00000e42 <__portable_avr_delay_cycles>:
	
	NVM.CMD = ERASE_EEPROM;
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}
     e42:	04 c0       	rjmp	.+8      	; 0xe4c <__portable_avr_delay_cycles+0xa>
     e44:	61 50       	subi	r22, 0x01	; 1
     e46:	71 09       	sbc	r23, r1
     e48:	81 09       	sbc	r24, r1
     e4a:	91 09       	sbc	r25, r1
     e4c:	61 15       	cp	r22, r1
     e4e:	71 05       	cpc	r23, r1
     e50:	81 05       	cpc	r24, r1
     e52:	91 05       	cpc	r25, r1
     e54:	b9 f7       	brne	.-18     	; 0xe44 <__portable_avr_delay_cycles+0x2>
     e56:	08 95       	ret

00000e58 <pressure_init>:
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	b4 dd       	rcall	.-1176   	; 0x9c6 <ms5607_init>
     e5e:	82 ea       	ldi	r24, 0xA2	; 162
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	ca dd       	rcall	.-1132   	; 0x9f8 <ms5607_read>
     e64:	cf ee       	ldi	r28, 0xEF	; 239
     e66:	d0 e2       	ldi	r29, 0x20	; 32
     e68:	88 83       	st	Y, r24
     e6a:	99 83       	std	Y+1, r25	; 0x01
     e6c:	84 ea       	ldi	r24, 0xA4	; 164
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	c3 dd       	rcall	.-1146   	; 0x9f8 <ms5607_read>
     e72:	8a 83       	std	Y+2, r24	; 0x02
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	86 ea       	ldi	r24, 0xA6	; 166
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	be dd       	rcall	.-1156   	; 0x9f8 <ms5607_read>
     e7c:	8c 83       	std	Y+4, r24	; 0x04
     e7e:	9d 83       	std	Y+5, r25	; 0x05
     e80:	88 ea       	ldi	r24, 0xA8	; 168
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	b9 dd       	rcall	.-1166   	; 0x9f8 <ms5607_read>
     e86:	8e 83       	std	Y+6, r24	; 0x06
     e88:	9f 83       	std	Y+7, r25	; 0x07
     e8a:	8a ea       	ldi	r24, 0xAA	; 170
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	b4 dd       	rcall	.-1176   	; 0x9f8 <ms5607_read>
     e90:	88 87       	std	Y+8, r24	; 0x08
     e92:	99 87       	std	Y+9, r25	; 0x09
     e94:	8c ea       	ldi	r24, 0xAC	; 172
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	af dd       	rcall	.-1186   	; 0x9f8 <ms5607_read>
     e9a:	8a 87       	std	Y+10, r24	; 0x0a
     e9c:	9b 87       	std	Y+11, r25	; 0x0b
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <gps_init>:
     ea4:	50 dd       	rcall	.-1376   	; 0x946 <gps_uart_init>
     ea6:	6b ea       	ldi	r22, 0xAB	; 171
     ea8:	79 e2       	ldi	r23, 0x29	; 41
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	c9 df       	rcall	.-110    	; 0xe42 <__portable_avr_delay_cycles>
     eb0:	80 e3       	ldi	r24, 0x30	; 48
     eb2:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
     eb6:	08 95       	ret

00000eb8 <release>:
     eb8:	80 eb       	ldi	r24, 0xB0	; 176
     eba:	94 e0       	ldi	r25, 0x04	; 4
     ebc:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
     ec0:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <released>
     eca:	08 95       	ret

00000ecc <get_pressure>:
     ecc:	4f 92       	push	r4
     ece:	5f 92       	push	r5
     ed0:	6f 92       	push	r6
     ed2:	7f 92       	push	r7
     ed4:	8f 92       	push	r8
     ed6:	9f 92       	push	r9
     ed8:	af 92       	push	r10
     eda:	bf 92       	push	r11
     edc:	cf 92       	push	r12
     ede:	df 92       	push	r13
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	99 dd       	rcall	.-1230   	; 0xa1c <ms5607_convert_d1>
     eea:	6b 01       	movw	r12, r22
     eec:	7c 01       	movw	r14, r24
     eee:	ba dd       	rcall	.-1164   	; 0xa64 <ms5607_convert_d2>
     ef0:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__floatunsisf>
     ef4:	4b 01       	movw	r8, r22
     ef6:	5c 01       	movw	r10, r24
     ef8:	cf ee       	ldi	r28, 0xEF	; 239
     efa:	d0 e2       	ldi	r29, 0x20	; 32
     efc:	68 85       	ldd	r22, Y+8	; 0x08
     efe:	79 85       	ldd	r23, Y+9	; 0x09
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__floatunsisf>
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	53 e4       	ldi	r21, 0x43	; 67
     f10:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     f14:	9b 01       	movw	r18, r22
     f16:	ac 01       	movw	r20, r24
     f18:	c5 01       	movw	r24, r10
     f1a:	b4 01       	movw	r22, r8
     f1c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__subsf3>
     f20:	4b 01       	movw	r8, r22
     f22:	5c 01       	movw	r10, r24
     f24:	6c 81       	ldd	r22, Y+4	; 0x04
     f26:	7d 81       	ldd	r23, Y+5	; 0x05
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__floatunsisf>
     f30:	a5 01       	movw	r20, r10
     f32:	94 01       	movw	r18, r8
     f34:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	5c e3       	ldi	r21, 0x3C	; 60
     f40:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     f44:	2b 01       	movw	r4, r22
     f46:	3c 01       	movw	r6, r24
     f48:	68 81       	ld	r22, Y
     f4a:	79 81       	ldd	r23, Y+1	; 0x01
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__floatunsisf>
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	57 e4       	ldi	r21, 0x47	; 71
     f5c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	c3 01       	movw	r24, r6
     f66:	b2 01       	movw	r22, r4
     f68:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3>
     f6c:	2b 01       	movw	r4, r22
     f6e:	3c 01       	movw	r6, r24
     f70:	c7 01       	movw	r24, r14
     f72:	b6 01       	movw	r22, r12
     f74:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__floatunsisf>
     f78:	9b 01       	movw	r18, r22
     f7a:	ac 01       	movw	r20, r24
     f7c:	c3 01       	movw	r24, r6
     f7e:	b2 01       	movw	r22, r4
     f80:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	55 e3       	ldi	r21, 0x35	; 53
     f8c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     f90:	6b 01       	movw	r12, r22
     f92:	7c 01       	movw	r14, r24
     f94:	6e 81       	ldd	r22, Y+6	; 0x06
     f96:	7f 81       	ldd	r23, Y+7	; 0x07
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__floatunsisf>
     fa0:	a5 01       	movw	r20, r10
     fa2:	94 01       	movw	r18, r8
     fa4:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e8       	ldi	r20, 0x80	; 128
     fae:	5c e3       	ldi	r21, 0x3C	; 60
     fb0:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     fb4:	4b 01       	movw	r8, r22
     fb6:	5c 01       	movw	r10, r24
     fb8:	6a 81       	ldd	r22, Y+2	; 0x02
     fba:	7b 81       	ldd	r23, Y+3	; 0x03
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__floatunsisf>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	58 e4       	ldi	r21, 0x48	; 72
     fcc:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     fd0:	9b 01       	movw	r18, r22
     fd2:	ac 01       	movw	r20, r24
     fd4:	c5 01       	movw	r24, r10
     fd6:	b4 01       	movw	r22, r8
     fd8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3>
     fdc:	9b 01       	movw	r18, r22
     fde:	ac 01       	movw	r20, r24
     fe0:	c7 01       	movw	r24, r14
     fe2:	b6 01       	movw	r22, r12
     fe4:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__subsf3>
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	58 e3       	ldi	r21, 0x38	; 56
     ff0:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	9f 90       	pop	r9
    1006:	8f 90       	pop	r8
    1008:	7f 90       	pop	r7
    100a:	6f 90       	pop	r6
    100c:	5f 90       	pop	r5
    100e:	4f 90       	pop	r4
    1010:	08 95       	ret

00001012 <get_altitude>:
    1012:	4f 92       	push	r4
    1014:	5f 92       	push	r5
    1016:	6f 92       	push	r6
    1018:	7f 92       	push	r7
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	2b 01       	movw	r4, r22
    102c:	3c 01       	movw	r6, r24
    102e:	c0 90 21 20 	lds	r12, 0x2021	; 0x802021 <L>
    1032:	d0 90 22 20 	lds	r13, 0x2022	; 0x802022 <L+0x1>
    1036:	e0 90 23 20 	lds	r14, 0x2023	; 0x802023 <L+0x2>
    103a:	f0 90 24 20 	lds	r15, 0x2024	; 0x802024 <L+0x3>
    103e:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <R>
    1042:	30 91 26 20 	lds	r19, 0x2026	; 0x802026 <R+0x1>
    1046:	40 91 27 20 	lds	r20, 0x2027	; 0x802027 <R+0x2>
    104a:	50 91 28 20 	lds	r21, 0x2028	; 0x802028 <R+0x3>
    104e:	c7 01       	movw	r24, r14
    1050:	b6 01       	movw	r22, r12
    1052:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    1056:	20 91 1d 20 	lds	r18, 0x201D	; 0x80201d <g_0>
    105a:	30 91 1e 20 	lds	r19, 0x201E	; 0x80201e <g_0+0x1>
    105e:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <g_0+0x2>
    1062:	50 91 20 20 	lds	r21, 0x2020	; 0x802020 <g_0+0x3>
    1066:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    106a:	4b 01       	movw	r8, r22
    106c:	5c 01       	movw	r10, r24
    106e:	a3 01       	movw	r20, r6
    1070:	92 01       	movw	r18, r4
    1072:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    1076:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    107a:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    107e:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    1082:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    1086:	a5 01       	movw	r20, r10
    1088:	94 01       	movw	r18, r8
    108a:	0e 94 0d 18 	call	0x301a	; 0x301a <pow>
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e8       	ldi	r20, 0x80	; 128
    1094:	5f e3       	ldi	r21, 0x3F	; 63
    1096:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__subsf3>
    109a:	20 91 29 20 	lds	r18, 0x2029	; 0x802029 <ground_t>
    109e:	30 91 2a 20 	lds	r19, 0x202A	; 0x80202a <ground_t+0x1>
    10a2:	40 91 2b 20 	lds	r20, 0x202B	; 0x80202b <ground_t+0x2>
    10a6:	50 91 2c 20 	lds	r21, 0x202C	; 0x80202c <ground_t+0x3>
    10aa:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    10ae:	a7 01       	movw	r20, r14
    10b0:	96 01       	movw	r18, r12
    10b2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    10b6:	20 91 fb 20 	lds	r18, 0x20FB	; 0x8020fb <ground_a>
    10ba:	30 91 fc 20 	lds	r19, 0x20FC	; 0x8020fc <ground_a+0x1>
    10be:	40 91 fd 20 	lds	r20, 0x20FD	; 0x8020fd <ground_a+0x2>
    10c2:	50 91 fe 20 	lds	r21, 0x20FE	; 0x8020fe <ground_a+0x3>
    10c6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__subsf3>
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	9f 90       	pop	r9
    10d8:	8f 90       	pop	r8
    10da:	7f 90       	pop	r7
    10dc:	6f 90       	pop	r6
    10de:	5f 90       	pop	r5
    10e0:	4f 90       	pop	r4
    10e2:	08 95       	ret

000010e4 <diff>:
    10e4:	2f 92       	push	r2
    10e6:	3f 92       	push	r3
    10e8:	4f 92       	push	r4
    10ea:	5f 92       	push	r5
    10ec:	6f 92       	push	r6
    10ee:	7f 92       	push	r7
    10f0:	8f 92       	push	r8
    10f2:	9f 92       	push	r9
    10f4:	af 92       	push	r10
    10f6:	bf 92       	push	r11
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	00 d0       	rcall	.+0      	; 0x110a <diff+0x26>
    110a:	00 d0       	rcall	.+0      	; 0x110c <diff+0x28>
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	6c 01       	movw	r12, r24
    1112:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    1116:	88 23       	and	r24, r24
    1118:	09 f4       	brne	.+2      	; 0x111c <diff+0x38>
    111a:	6c c0       	rjmp	.+216    	; 0x11f4 <diff+0x110>
    111c:	00 e0       	ldi	r16, 0x00	; 0
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	41 2c       	mov	r4, r1
    1122:	51 2c       	mov	r5, r1
    1124:	32 01       	movw	r6, r4
    1126:	86 2e       	mov	r8, r22
    1128:	91 2c       	mov	r9, r1
    112a:	a1 2c       	mov	r10, r1
    112c:	b1 2c       	mov	r11, r1
    112e:	89 82       	std	Y+1, r8	; 0x01
    1130:	9a 82       	std	Y+2, r9	; 0x02
    1132:	ab 82       	std	Y+3, r10	; 0x03
    1134:	bc 82       	std	Y+4, r11	; 0x04
    1136:	b8 01       	movw	r22, r16
    1138:	c6 01       	movw	r24, r12
    113a:	75 dd       	rcall	.-1302   	; 0xc26 <rb16_get_nth>
    113c:	5c 01       	movw	r10, r24
    113e:	18 01       	movw	r2, r16
    1140:	2f ef       	ldi	r18, 0xFF	; 255
    1142:	22 1a       	sub	r2, r18
    1144:	32 0a       	sbc	r3, r18
    1146:	b1 01       	movw	r22, r2
    1148:	c6 01       	movw	r24, r12
    114a:	6d dd       	rcall	.-1318   	; 0xc26 <rb16_get_nth>
    114c:	7c 01       	movw	r14, r24
    114e:	b8 01       	movw	r22, r16
    1150:	6e 5f       	subi	r22, 0xFE	; 254
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	c6 01       	movw	r24, r12
    1156:	67 dd       	rcall	.-1330   	; 0xc26 <rb16_get_nth>
    1158:	a5 01       	movw	r20, r10
    115a:	bb 0c       	add	r11, r11
    115c:	66 0b       	sbc	r22, r22
    115e:	77 0b       	sbc	r23, r23
    1160:	8a 01       	movw	r16, r20
    1162:	9b 01       	movw	r18, r22
    1164:	00 0f       	add	r16, r16
    1166:	11 1f       	adc	r17, r17
    1168:	22 1f       	adc	r18, r18
    116a:	33 1f       	adc	r19, r19
    116c:	40 0f       	add	r20, r16
    116e:	51 1f       	adc	r21, r17
    1170:	62 1f       	adc	r22, r18
    1172:	73 1f       	adc	r23, r19
    1174:	87 01       	movw	r16, r14
    1176:	ff 0c       	add	r15, r15
    1178:	22 0b       	sbc	r18, r18
    117a:	33 0b       	sbc	r19, r19
    117c:	78 01       	movw	r14, r16
    117e:	89 01       	movw	r16, r18
    1180:	ee 0c       	add	r14, r14
    1182:	ff 1c       	adc	r15, r15
    1184:	00 1f       	adc	r16, r16
    1186:	11 1f       	adc	r17, r17
    1188:	ee 0c       	add	r14, r14
    118a:	ff 1c       	adc	r15, r15
    118c:	00 1f       	adc	r16, r16
    118e:	11 1f       	adc	r17, r17
    1190:	4a 01       	movw	r8, r20
    1192:	5b 01       	movw	r10, r22
    1194:	8e 18       	sub	r8, r14
    1196:	9f 08       	sbc	r9, r15
    1198:	a0 0a       	sbc	r10, r16
    119a:	b1 0a       	sbc	r11, r17
    119c:	ac 01       	movw	r20, r24
    119e:	99 0f       	add	r25, r25
    11a0:	66 0b       	sbc	r22, r22
    11a2:	77 0b       	sbc	r23, r23
    11a4:	d5 01       	movw	r26, r10
    11a6:	c4 01       	movw	r24, r8
    11a8:	84 0f       	add	r24, r20
    11aa:	95 1f       	adc	r25, r21
    11ac:	a6 1f       	adc	r26, r22
    11ae:	b7 1f       	adc	r27, r23
    11b0:	9c 01       	movw	r18, r24
    11b2:	ad 01       	movw	r20, r26
    11b4:	69 81       	ldd	r22, Y+1	; 0x01
    11b6:	7a 81       	ldd	r23, Y+2	; 0x02
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	0e 94 46 19 	call	0x328c	; 0x328c <__mulsi3>
    11c0:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__floatsisf>
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	c3 01       	movw	r24, r6
    11d6:	b2 01       	movw	r22, r4
    11d8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3>
    11dc:	2b 01       	movw	r4, r22
    11de:	3c 01       	movw	r6, r24
    11e0:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    11e4:	81 01       	movw	r16, r2
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	22 16       	cp	r2, r18
    11ec:	33 06       	cpc	r3, r19
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <diff+0x10e>
    11f0:	a2 cf       	rjmp	.-188    	; 0x1136 <diff+0x52>
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <diff+0x116>
    11f4:	41 2c       	mov	r4, r1
    11f6:	51 2c       	mov	r5, r1
    11f8:	32 01       	movw	r6, r4
    11fa:	68 2f       	mov	r22, r24
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__floatsisf>
    1206:	9b 01       	movw	r18, r22
    1208:	ac 01       	movw	r20, r24
    120a:	c3 01       	movw	r24, r6
    120c:	b2 01       	movw	r22, r4
    120e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	48 ec       	ldi	r20, 0xC8	; 200
    1218:	52 e4       	ldi	r21, 0x42	; 66
    121a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    121e:	26 96       	adiw	r28, 0x06	; 6
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	bf 90       	pop	r11
    1236:	af 90       	pop	r10
    1238:	9f 90       	pop	r9
    123a:	8f 90       	pop	r8
    123c:	7f 90       	pop	r7
    123e:	6f 90       	pop	r6
    1240:	5f 90       	pop	r5
    1242:	4f 90       	pop	r4
    1244:	3f 90       	pop	r3
    1246:	2f 90       	pop	r2
    1248:	08 95       	ret

0000124a <data_check>:
    124a:	3f 92       	push	r3
    124c:	4f 92       	push	r4
    124e:	5f 92       	push	r5
    1250:	6f 92       	push	r6
    1252:	7f 92       	push	r7
    1254:	8f 92       	push	r8
    1256:	9f 92       	push	r9
    1258:	af 92       	push	r10
    125a:	bf 92       	push	r11
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	00 d0       	rcall	.+0      	; 0x126e <data_check+0x24>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <data_check+0x26>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8c 01       	movw	r16, r24
    1276:	19 82       	std	Y+1, r1	; 0x01
    1278:	1a 82       	std	Y+2, r1	; 0x02
    127a:	c1 2c       	mov	r12, r1
    127c:	d1 2c       	mov	r13, r1
    127e:	76 01       	movw	r14, r12
    1280:	69 81       	ldd	r22, Y+1	; 0x01
    1282:	7a 81       	ldd	r23, Y+2	; 0x02
    1284:	c8 01       	movw	r24, r16
    1286:	57 dd       	rcall	.-1362   	; 0xd36 <rb32_get_nth>
    1288:	4b 01       	movw	r8, r22
    128a:	5c 01       	movw	r10, r24
    128c:	21 ea       	ldi	r18, 0xA1	; 161
    128e:	82 1a       	sub	r8, r18
    1290:	26 e8       	ldi	r18, 0x86	; 134
    1292:	92 0a       	sbc	r9, r18
    1294:	21 e0       	ldi	r18, 0x01	; 1
    1296:	a2 0a       	sbc	r10, r18
    1298:	b1 08       	sbc	r11, r1
    129a:	2f ed       	ldi	r18, 0xDF	; 223
    129c:	82 16       	cp	r8, r18
    129e:	2f e0       	ldi	r18, 0x0F	; 15
    12a0:	92 06       	cpc	r9, r18
    12a2:	27 e9       	ldi	r18, 0x97	; 151
    12a4:	a2 06       	cpc	r10, r18
    12a6:	b1 04       	cpc	r11, r1
    12a8:	80 f4       	brcc	.+32     	; 0x12ca <data_check+0x80>
    12aa:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__floatsisf>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 ea       	ldi	r20, 0xA0	; 160
    12b4:	50 e4       	ldi	r21, 0x40	; 64
    12b6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    12ba:	9b 01       	movw	r18, r22
    12bc:	ac 01       	movw	r20, r24
    12be:	c7 01       	movw	r24, r14
    12c0:	b6 01       	movw	r22, r12
    12c2:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3>
    12c6:	6b 01       	movw	r12, r22
    12c8:	7c 01       	movw	r14, r24
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	05 97       	sbiw	r24, 0x05	; 5
    12d6:	a1 f6       	brne	.-88     	; 0x1280 <data_check+0x36>
    12d8:	19 82       	std	Y+1, r1	; 0x01
    12da:	1a 82       	std	Y+2, r1	; 0x02
    12dc:	81 2c       	mov	r8, r1
    12de:	91 2c       	mov	r9, r1
    12e0:	54 01       	movw	r10, r8
    12e2:	69 81       	ldd	r22, Y+1	; 0x01
    12e4:	7a 81       	ldd	r23, Y+2	; 0x02
    12e6:	c8 01       	movw	r24, r16
    12e8:	26 dd       	rcall	.-1460   	; 0xd36 <rb32_get_nth>
    12ea:	2b 01       	movw	r4, r22
    12ec:	3c 01       	movw	r6, r24
    12ee:	21 ea       	ldi	r18, 0xA1	; 161
    12f0:	42 1a       	sub	r4, r18
    12f2:	26 e8       	ldi	r18, 0x86	; 134
    12f4:	52 0a       	sbc	r5, r18
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	62 0a       	sbc	r6, r18
    12fa:	71 08       	sbc	r7, r1
    12fc:	2f ed       	ldi	r18, 0xDF	; 223
    12fe:	42 16       	cp	r4, r18
    1300:	2f e0       	ldi	r18, 0x0F	; 15
    1302:	52 06       	cpc	r5, r18
    1304:	27 e9       	ldi	r18, 0x97	; 151
    1306:	62 06       	cpc	r6, r18
    1308:	71 04       	cpc	r7, r1
    130a:	90 f4       	brcc	.+36     	; 0x1330 <data_check+0xe6>
    130c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__floatsisf>
    1310:	a7 01       	movw	r20, r14
    1312:	96 01       	movw	r18, r12
    1314:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__subsf3>
    1318:	9b 01       	movw	r18, r22
    131a:	ac 01       	movw	r20, r24
    131c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    1320:	9b 01       	movw	r18, r22
    1322:	ac 01       	movw	r20, r24
    1324:	c5 01       	movw	r24, r10
    1326:	b4 01       	movw	r22, r8
    1328:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3>
    132c:	4b 01       	movw	r8, r22
    132e:	5c 01       	movw	r10, r24
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	9a 83       	std	Y+2, r25	; 0x02
    133a:	05 97       	sbiw	r24, 0x05	; 5
    133c:	91 f6       	brne	.-92     	; 0x12e2 <data_check+0x98>
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e8       	ldi	r20, 0x80	; 128
    1344:	5e e3       	ldi	r21, 0x3E	; 62
    1346:	c5 01       	movw	r24, r10
    1348:	b4 01       	movw	r22, r8
    134a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    134e:	69 83       	std	Y+1, r22	; 0x01
    1350:	7a 83       	std	Y+2, r23	; 0x02
    1352:	8b 83       	std	Y+3, r24	; 0x03
    1354:	9c 83       	std	Y+4, r25	; 0x04
    1356:	1d 82       	std	Y+5, r1	; 0x05
    1358:	1e 82       	std	Y+6, r1	; 0x06
    135a:	31 2c       	mov	r3, r1
    135c:	41 2c       	mov	r4, r1
    135e:	51 2c       	mov	r5, r1
    1360:	32 01       	movw	r6, r4
    1362:	6d 81       	ldd	r22, Y+5	; 0x05
    1364:	7e 81       	ldd	r23, Y+6	; 0x06
    1366:	c8 01       	movw	r24, r16
    1368:	e6 dc       	rcall	.-1588   	; 0xd36 <rb32_get_nth>
    136a:	4b 01       	movw	r8, r22
    136c:	5c 01       	movw	r10, r24
    136e:	21 ea       	ldi	r18, 0xA1	; 161
    1370:	82 1a       	sub	r8, r18
    1372:	26 e8       	ldi	r18, 0x86	; 134
    1374:	92 0a       	sbc	r9, r18
    1376:	21 e0       	ldi	r18, 0x01	; 1
    1378:	a2 0a       	sbc	r10, r18
    137a:	b1 08       	sbc	r11, r1
    137c:	2f ed       	ldi	r18, 0xDF	; 223
    137e:	82 16       	cp	r8, r18
    1380:	2f e0       	ldi	r18, 0x0F	; 15
    1382:	92 06       	cpc	r9, r18
    1384:	27 e9       	ldi	r18, 0x97	; 151
    1386:	a2 06       	cpc	r10, r18
    1388:	b1 04       	cpc	r11, r1
    138a:	50 f5       	brcc	.+84     	; 0x13e0 <data_check+0x196>
    138c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__floatsisf>
    1390:	4b 01       	movw	r8, r22
    1392:	5c 01       	movw	r10, r24
    1394:	a7 01       	movw	r20, r14
    1396:	96 01       	movw	r18, r12
    1398:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__subsf3>
    139c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    13a0:	9b 01       	movw	r18, r22
    13a2:	77 23       	and	r23, r23
    13a4:	24 f4       	brge	.+8      	; 0x13ae <data_check+0x164>
    13a6:	22 27       	eor	r18, r18
    13a8:	33 27       	eor	r19, r19
    13aa:	26 1b       	sub	r18, r22
    13ac:	37 0b       	sbc	r19, r23
    13ae:	b9 01       	movw	r22, r18
    13b0:	33 0f       	add	r19, r19
    13b2:	88 0b       	sbc	r24, r24
    13b4:	99 0b       	sbc	r25, r25
    13b6:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__floatsisf>
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	69 81       	ldd	r22, Y+1	; 0x01
    13c0:	7a 81       	ldd	r23, Y+2	; 0x02
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__gesf2>
    13ca:	88 23       	and	r24, r24
    13cc:	4c f0       	brlt	.+18     	; 0x13e0 <data_check+0x196>
    13ce:	a5 01       	movw	r20, r10
    13d0:	94 01       	movw	r18, r8
    13d2:	c3 01       	movw	r24, r6
    13d4:	b2 01       	movw	r22, r4
    13d6:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3>
    13da:	2b 01       	movw	r4, r22
    13dc:	3c 01       	movw	r6, r24
    13de:	33 94       	inc	r3
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	9e 83       	std	Y+6, r25	; 0x06
    13ea:	05 97       	sbiw	r24, 0x05	; 5
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <data_check+0x1a6>
    13ee:	b9 cf       	rjmp	.-142    	; 0x1362 <data_check+0x118>
    13f0:	33 20       	and	r3, r3
    13f2:	69 f0       	breq	.+26     	; 0x140e <data_check+0x1c4>
    13f4:	63 2d       	mov	r22, r3
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__floatunsisf>
    1400:	9b 01       	movw	r18, r22
    1402:	ac 01       	movw	r20, r24
    1404:	c3 01       	movw	r24, r6
    1406:	b2 01       	movw	r22, r4
    1408:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <data_check+0x1cc>
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	80 e8       	ldi	r24, 0x80	; 128
    1414:	9f eb       	ldi	r25, 0xBF	; 191
    1416:	26 96       	adiw	r28, 0x06	; 6
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14
    1428:	df 90       	pop	r13
    142a:	cf 90       	pop	r12
    142c:	bf 90       	pop	r11
    142e:	af 90       	pop	r10
    1430:	9f 90       	pop	r9
    1432:	8f 90       	pop	r8
    1434:	7f 90       	pop	r7
    1436:	6f 90       	pop	r6
    1438:	5f 90       	pop	r5
    143a:	4f 90       	pop	r4
    143c:	3f 90       	pop	r3
    143e:	08 95       	ret

00001440 <data_collect>:
    1440:	af 92       	push	r10
    1442:	bf 92       	push	r11
    1444:	cf 92       	push	r12
    1446:	df 92       	push	r13
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	00 d0       	rcall	.+0      	; 0x1456 <data_collect+0x16>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <data_collect+0x18>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	5c 01       	movw	r10, r24
    145e:	8b 01       	movw	r16, r22
    1460:	35 dd       	rcall	.-1430   	; 0xecc <get_pressure>
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e2       	ldi	r20, 0x20	; 32
    1468:	51 e4       	ldi	r21, 0x41	; 65
    146a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    146e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1472:	69 83       	std	Y+1, r22	; 0x01
    1474:	7a 83       	std	Y+2, r23	; 0x02
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	9c 83       	std	Y+4, r25	; 0x04
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	be 01       	movw	r22, r28
    1480:	6f 5f       	subi	r22, 0xFF	; 255
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
    1484:	c8 01       	movw	r24, r16
    1486:	fc db       	rcall	.-2056   	; 0xc80 <rb32_write>
    1488:	c8 01       	movw	r24, r16
    148a:	df de       	rcall	.-578    	; 0x124a <data_check>
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e2       	ldi	r20, 0x20	; 32
    1492:	51 e4       	ldi	r21, 0x41	; 65
    1494:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    1498:	6b 01       	movw	r12, r22
    149a:	7c 01       	movw	r14, r24
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e8       	ldi	r20, 0x80	; 128
    14a2:	5f eb       	ldi	r21, 0xBF	; 191
    14a4:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__cmpsf2>
    14a8:	88 23       	and	r24, r24
    14aa:	81 f1       	breq	.+96     	; 0x150c <data_collect+0xcc>
    14ac:	c0 92 e0 20 	sts	0x20E0, r12	; 0x8020e0 <press>
    14b0:	d0 92 e1 20 	sts	0x20E1, r13	; 0x8020e1 <press+0x1>
    14b4:	e0 92 e2 20 	sts	0x20E2, r14	; 0x8020e2 <press+0x2>
    14b8:	f0 92 e3 20 	sts	0x20E3, r15	; 0x8020e3 <press+0x3>
    14bc:	c7 01       	movw	r24, r14
    14be:	b6 01       	movw	r22, r12
    14c0:	a8 dd       	rcall	.-1200   	; 0x1012 <get_altitude>
    14c2:	60 93 d8 20 	sts	0x20D8, r22	; 0x8020d8 <alt>
    14c6:	70 93 d9 20 	sts	0x20D9, r23	; 0x8020d9 <alt+0x1>
    14ca:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <alt+0x2>
    14ce:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <alt+0x3>
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	48 ec       	ldi	r20, 0xC8	; 200
    14d8:	52 e4       	ldi	r21, 0x42	; 66
    14da:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    14de:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    14e2:	6d 83       	std	Y+5, r22	; 0x05
    14e4:	7e 83       	std	Y+6, r23	; 0x06
    14e6:	41 e0       	ldi	r20, 0x01	; 1
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	be 01       	movw	r22, r28
    14ec:	6b 5f       	subi	r22, 0xFB	; 251
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	c5 01       	movw	r24, r10
    14f2:	50 db       	rcall	.-2400   	; 0xb94 <rb16_write>
    14f4:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    14f8:	c5 01       	movw	r24, r10
    14fa:	f4 dd       	rcall	.-1048   	; 0x10e4 <diff>
    14fc:	60 93 d0 20 	sts	0x20D0, r22	; 0x8020d0 <velocity>
    1500:	70 93 d1 20 	sts	0x20D1, r23	; 0x8020d1 <velocity+0x1>
    1504:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <velocity+0x2>
    1508:	90 93 d3 20 	sts	0x20D3, r25	; 0x8020d3 <velocity+0x3>
    150c:	83 e3       	ldi	r24, 0x33	; 51
    150e:	93 e1       	ldi	r25, 0x13	; 19
    1510:	a0 e9       	ldi	r26, 0x90	; 144
    1512:	b3 e4       	ldi	r27, 0x43	; 67
    1514:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <temp>
    1518:	90 93 dd 20 	sts	0x20DD, r25	; 0x8020dd <temp+0x1>
    151c:	a0 93 de 20 	sts	0x20DE, r26	; 0x8020de <temp+0x2>
    1520:	b0 93 df 20 	sts	0x20DF, r27	; 0x8020df <temp+0x3>
    1524:	26 96       	adiw	r28, 0x06	; 6
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	08 95       	ret

00001540 <state_check>:
    1540:	cf 92       	push	r12
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	c0 90 d0 20 	lds	r12, 0x20D0	; 0x8020d0 <velocity>
    154c:	d0 90 d1 20 	lds	r13, 0x20D1	; 0x8020d1 <velocity+0x1>
    1550:	e0 90 d2 20 	lds	r14, 0x20D2	; 0x8020d2 <velocity+0x2>
    1554:	f0 90 d3 20 	lds	r15, 0x20D3	; 0x8020d3 <velocity+0x3>
    1558:	c7 01       	movw	r24, r14
    155a:	b6 01       	movw	r22, r12
    155c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1560:	9b 01       	movw	r18, r22
    1562:	77 23       	and	r23, r23
    1564:	24 f4       	brge	.+8      	; 0x156e <state_check+0x2e>
    1566:	22 27       	eor	r18, r18
    1568:	33 27       	eor	r19, r19
    156a:	26 1b       	sub	r18, r22
    156c:	37 0b       	sbc	r19, r23
    156e:	26 30       	cpi	r18, 0x06	; 6
    1570:	31 05       	cpc	r19, r1
    1572:	8c f0       	brlt	.+34     	; 0x1596 <state_check+0x56>
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	c7 01       	movw	r24, r14
    157c:	b6 01       	movw	r22, r12
    157e:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__cmpsf2>
    1582:	88 23       	and	r24, r24
    1584:	24 f0       	brlt	.+8      	; 0x158e <state_check+0x4e>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    158c:	24 c0       	rjmp	.+72     	; 0x15d6 <state_check+0x96>
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    1594:	20 c0       	rjmp	.+64     	; 0x15d6 <state_check+0x96>
    1596:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <state>
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	48 e4       	ldi	r20, 0x48	; 72
    15a0:	52 e4       	ldi	r21, 0x42	; 66
    15a2:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    15a6:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    15aa:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    15ae:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    15b2:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__gesf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	24 f0       	brlt	.+8      	; 0x15c2 <state_check+0x82>
    15ba:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <reset_received>
    15be:	88 23       	and	r24, r24
    15c0:	19 f0       	breq	.+6      	; 0x15c8 <state_check+0x88>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    15c8:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <released>
    15cc:	88 23       	and	r24, r24
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <state_check+0x96>
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	08 95       	ret

000015e0 <release_servo_init>:
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	84 e0       	ldi	r24, 0x04	; 4
    15e4:	12 dc       	rcall	.-2012   	; 0xe0a <sysclk_enable_module>
    15e6:	64 e0       	ldi	r22, 0x04	; 4
    15e8:	84 e0       	ldi	r24, 0x04	; 4
    15ea:	0f dc       	rcall	.-2018   	; 0xe0a <sysclk_enable_module>
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
    15f2:	e0 e0       	ldi	r30, 0x00	; 0
    15f4:	f9 e0       	ldi	r31, 0x09	; 9
    15f6:	85 e0       	ldi	r24, 0x05	; 5
    15f8:	80 83       	st	Z, r24
    15fa:	83 e1       	ldi	r24, 0x13	; 19
    15fc:	81 83       	std	Z+1, r24	; 0x01
    15fe:	80 e1       	ldi	r24, 0x10	; 16
    1600:	97 e2       	ldi	r25, 0x27	; 39
    1602:	86 a3       	std	Z+38, r24	; 0x26
    1604:	97 a3       	std	Z+39, r25	; 0x27
    1606:	8e ee       	ldi	r24, 0xEE	; 238
    1608:	92 e0       	ldi	r25, 0x02	; 2
    160a:	80 a7       	std	Z+40, r24	; 0x28
    160c:	91 a7       	std	Z+41, r25	; 0x29
    160e:	08 95       	ret

00001610 <servo_pid>:
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	7c 01       	movw	r14, r24
    162a:	c0 e0       	ldi	r28, 0x00	; 0
    162c:	d0 e0       	ldi	r29, 0x00	; 0
    162e:	00 e0       	ldi	r16, 0x00	; 0
    1630:	10 e0       	ldi	r17, 0x00	; 0
    1632:	be 01       	movw	r22, r28
    1634:	c7 01       	movw	r24, r14
    1636:	f7 da       	rcall	.-2578   	; 0xc26 <rb16_get_nth>
    1638:	08 0f       	add	r16, r24
    163a:	19 1f       	adc	r17, r25
    163c:	21 96       	adiw	r28, 0x01	; 1
    163e:	ca 30       	cpi	r28, 0x0A	; 10
    1640:	d1 05       	cpc	r29, r1
    1642:	b9 f7       	brne	.-18     	; 0x1632 <servo_pid+0x22>
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	c7 01       	movw	r24, r14
    164a:	ed da       	rcall	.-2598   	; 0xc26 <rb16_get_nth>
    164c:	ec 01       	movw	r28, r24
    164e:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    1652:	c7 01       	movw	r24, r14
    1654:	47 dd       	rcall	.-1394   	; 0x10e4 <diff>
    1656:	6b 01       	movw	r12, r22
    1658:	7c 01       	movw	r14, r24
    165a:	be 01       	movw	r22, r28
    165c:	dd 0f       	add	r29, r29
    165e:	88 0b       	sbc	r24, r24
    1660:	99 0b       	sbc	r25, r25
    1662:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__floatsisf>
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	a9 01       	movw	r20, r18
    166c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	48 ec       	ldi	r20, 0xC8	; 200
    1676:	52 e4       	ldi	r21, 0x42	; 66
    1678:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    167c:	4b 01       	movw	r8, r22
    167e:	5c 01       	movw	r10, r24
    1680:	b8 01       	movw	r22, r16
    1682:	11 0f       	add	r17, r17
    1684:	88 0b       	sbc	r24, r24
    1686:	99 0b       	sbc	r25, r25
    1688:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__floatsisf>
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	a9 01       	movw	r20, r18
    1692:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	48 ec       	ldi	r20, 0xC8	; 200
    169c:	52 e4       	ldi	r21, 0x42	; 66
    169e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	c5 01       	movw	r24, r10
    16a8:	b4 01       	movw	r22, r8
    16aa:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3>
    16ae:	4b 01       	movw	r8, r22
    16b0:	5c 01       	movw	r10, r24
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	a9 01       	movw	r20, r18
    16b8:	c7 01       	movw	r24, r14
    16ba:	b6 01       	movw	r22, r12
    16bc:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    16c0:	9b 01       	movw	r18, r22
    16c2:	ac 01       	movw	r20, r24
    16c4:	c5 01       	movw	r24, r10
    16c6:	b4 01       	movw	r22, r8
    16c8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3>
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e8       	ldi	r19, 0x80	; 128
    16d0:	4b eb       	ldi	r20, 0xBB	; 187
    16d2:	54 e4       	ldi	r21, 0x44	; 68
    16d4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__addsf3>
    16d8:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__fixunssfsi>
    16dc:	60 93 1b 20 	sts	0x201B, r22	; 0x80201b <servo_pulse>
    16e0:	70 93 1c 20 	sts	0x201C, r23	; 0x80201c <servo_pulse+0x1>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__floatunsisf>
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a e7       	ldi	r20, 0x7A	; 122
    16f2:	54 e4       	ldi	r21, 0x44	; 68
    16f4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__divsf3>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a ef       	ldi	r20, 0xFA	; 250
    16fe:	53 e4       	ldi	r21, 0x43	; 67
    1700:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    1704:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__fixunssfsi>
    1708:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    170c:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	ff 90       	pop	r15
    171a:	ef 90       	pop	r14
    171c:	df 90       	pop	r13
    171e:	cf 90       	pop	r12
    1720:	bf 90       	pop	r11
    1722:	af 90       	pop	r10
    1724:	9f 90       	pop	r9
    1726:	8f 90       	pop	r8
    1728:	08 95       	ret

0000172a <clock_init>:
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	85 e0       	ldi	r24, 0x05	; 5
    172e:	6d db       	rcall	.-2342   	; 0xe0a <sysclk_enable_module>
    1730:	e0 e0       	ldi	r30, 0x00	; 0
    1732:	fa e0       	ldi	r31, 0x0A	; 10
    1734:	87 e0       	ldi	r24, 0x07	; 7
    1736:	80 83       	st	Z, r24
    1738:	81 e1       	ldi	r24, 0x11	; 17
    173a:	9a e7       	ldi	r25, 0x7A	; 122
    173c:	86 a3       	std	Z+38, r24	; 0x26
    173e:	97 a3       	std	Z+39, r25	; 0x27
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	86 83       	std	Z+6, r24	; 0x06
    1744:	08 95       	ret

00001746 <cali_alt>:
    1746:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <press>
    174a:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <press+0x1>
    174e:	a0 91 e2 20 	lds	r26, 0x20E2	; 0x8020e2 <press+0x2>
    1752:	b0 91 e3 20 	lds	r27, 0x20E3	; 0x8020e3 <press+0x3>
    1756:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p>
    175a:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x1>
    175e:	a0 93 2f 20 	sts	0x202F, r26	; 0x80202f <ground_p+0x2>
    1762:	b0 93 30 20 	sts	0x2030, r27	; 0x802030 <ground_p+0x3>
    1766:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <alt>
    176a:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <alt+0x1>
    176e:	a0 91 da 20 	lds	r26, 0x20DA	; 0x8020da <alt+0x2>
    1772:	b0 91 db 20 	lds	r27, 0x20DB	; 0x8020db <alt+0x3>
    1776:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <ground_a>
    177a:	90 93 fc 20 	sts	0x20FC, r25	; 0x8020fc <ground_a+0x1>
    177e:	a0 93 fd 20 	sts	0x20FD, r26	; 0x8020fd <ground_a+0x2>
    1782:	b0 93 fe 20 	sts	0x20FE, r27	; 0x8020fe <ground_a+0x3>
    1786:	83 e3       	ldi	r24, 0x33	; 51
    1788:	93 e1       	ldi	r25, 0x13	; 19
    178a:	a0 e9       	ldi	r26, 0x90	; 144
    178c:	b3 e4       	ldi	r27, 0x43	; 67
    178e:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <ground_t>
    1792:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <ground_t+0x1>
    1796:	a0 93 2b 20 	sts	0x202B, r26	; 0x80202b <ground_t+0x2>
    179a:	b0 93 2c 20 	sts	0x202C, r27	; 0x80202c <ground_t+0x3>
    179e:	08 95       	ret

000017a0 <send_gps>:
    17a0:	8f 92       	push	r8
    17a2:	9f 92       	push	r9
    17a4:	af 92       	push	r10
    17a6:	bf 92       	push	r11
    17a8:	cf 92       	push	r12
    17aa:	df 92       	push	r13
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	c6 54       	subi	r28, 0x46	; 70
    17be:	d1 09       	sbc	r29, r1
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	60 91 c4 20 	lds	r22, 0x20C4	; 0x8020c4 <gps_long>
    17c8:	70 91 c5 20 	lds	r23, 0x20C5	; 0x8020c5 <gps_long+0x1>
    17cc:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <gps_long+0x2>
    17d0:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <gps_long+0x3>
    17d4:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    17d8:	16 2f       	mov	r17, r22
    17da:	07 2f       	mov	r16, r23
    17dc:	c0 90 c8 20 	lds	r12, 0x20C8	; 0x8020c8 <gps_lat>
    17e0:	d0 90 c9 20 	lds	r13, 0x20C9	; 0x8020c9 <gps_lat+0x1>
    17e4:	e0 90 ca 20 	lds	r14, 0x20CA	; 0x8020ca <gps_lat+0x2>
    17e8:	f0 90 cb 20 	lds	r15, 0x20CB	; 0x8020cb <gps_lat+0x3>
    17ec:	a6 2f       	mov	r26, r22
    17ee:	b7 2f       	mov	r27, r23
    17f0:	bb 23       	and	r27, r27
    17f2:	1c f4       	brge	.+6      	; 0x17fa <send_gps+0x5a>
    17f4:	b1 95       	neg	r27
    17f6:	a1 95       	neg	r26
    17f8:	b1 09       	sbc	r27, r1
    17fa:	20 e4       	ldi	r18, 0x40	; 64
    17fc:	32 e4       	ldi	r19, 0x42	; 66
    17fe:	4f e0       	ldi	r20, 0x0F	; 15
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	0e 94 c4 19 	call	0x3388	; 0x3388 <__mulshisi3>
    1806:	0f 2e       	mov	r0, r31
    1808:	f0 e4       	ldi	r31, 0x40	; 64
    180a:	8f 2e       	mov	r8, r31
    180c:	f2 e4       	ldi	r31, 0x42	; 66
    180e:	9f 2e       	mov	r9, r31
    1810:	ff e0       	ldi	r31, 0x0F	; 15
    1812:	af 2e       	mov	r10, r31
    1814:	b1 2c       	mov	r11, r1
    1816:	f0 2d       	mov	r31, r0
    1818:	0e 94 9e 19 	call	0x333c	; 0x333c <__divmodsi4>
    181c:	9f 93       	push	r25
    181e:	8f 93       	push	r24
    1820:	7f 93       	push	r23
    1822:	6f 93       	push	r22
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	34 e2       	ldi	r19, 0x24	; 36
    182c:	44 e7       	ldi	r20, 0x74	; 116
    182e:	59 e4       	ldi	r21, 0x49	; 73
    1830:	c7 01       	movw	r24, r14
    1832:	b6 01       	movw	r22, r12
    1834:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    1838:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    183c:	a5 01       	movw	r20, r10
    183e:	94 01       	movw	r18, r8
    1840:	0e 94 9e 19 	call	0x333c	; 0x333c <__divmodsi4>
    1844:	9f 93       	push	r25
    1846:	8f 93       	push	r24
    1848:	7f 93       	push	r23
    184a:	6f 93       	push	r22
    184c:	c7 01       	movw	r24, r14
    184e:	b6 01       	movw	r22, r12
    1850:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1854:	7f 93       	push	r23
    1856:	6f 93       	push	r22
    1858:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <gps_msg+0x1>
    185c:	8f 93       	push	r24
    185e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <gps_msg>
    1862:	8f 93       	push	r24
    1864:	8e 01       	movw	r16, r28
    1866:	0f 5f       	subi	r16, 0xFF	; 255
    1868:	1f 4f       	sbci	r17, 0xFF	; 255
    186a:	1f 93       	push	r17
    186c:	0f 93       	push	r16
    186e:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <sprintf>
    1872:	1f 93       	push	r17
    1874:	0f 93       	push	r16
    1876:	0e 94 41 1a 	call	0x3482	; 0x3482 <printf>
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	ca 5b       	subi	r28, 0xBA	; 186
    1880:	df 4f       	sbci	r29, 0xFF	; 255
    1882:	cd bf       	out	0x3d, r28	; 61
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	df 90       	pop	r13
    1894:	cf 90       	pop	r12
    1896:	bf 90       	pop	r11
    1898:	af 90       	pop	r10
    189a:	9f 90       	pop	r9
    189c:	8f 90       	pop	r8
    189e:	08 95       	ret

000018a0 <packet>:
    18a0:	4f 92       	push	r4
    18a2:	5f 92       	push	r5
    18a4:	6f 92       	push	r6
    18a6:	7f 92       	push	r7
    18a8:	8f 92       	push	r8
    18aa:	9f 92       	push	r9
    18ac:	af 92       	push	r10
    18ae:	bf 92       	push	r11
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	c0 91 e4 20 	lds	r28, 0x20E4	; 0x8020e4 <packets>
    18c4:	d0 91 e5 20 	lds	r29, 0x20E5	; 0x8020e5 <packets+0x1>
    18c8:	21 96       	adiw	r28, 0x01	; 1
    18ca:	c0 93 e4 20 	sts	0x20E4, r28	; 0x8020e4 <packets>
    18ce:	d0 93 e5 20 	sts	0x20E5, r29	; 0x8020e5 <packets+0x1>
    18d2:	60 91 c0 20 	lds	r22, 0x20C0	; 0x8020c0 <gps_alt>
    18d6:	70 91 c1 20 	lds	r23, 0x20C1	; 0x8020c1 <gps_alt+0x1>
    18da:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <gps_alt+0x2>
    18de:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <gps_alt+0x3>
    18e2:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    18e6:	16 2f       	mov	r17, r22
    18e8:	07 2f       	mov	r16, r23
    18ea:	40 90 c4 20 	lds	r4, 0x20C4	; 0x8020c4 <gps_long>
    18ee:	50 90 c5 20 	lds	r5, 0x20C5	; 0x8020c5 <gps_long+0x1>
    18f2:	60 90 c6 20 	lds	r6, 0x20C6	; 0x8020c6 <gps_long+0x2>
    18f6:	70 90 c7 20 	lds	r7, 0x20C7	; 0x8020c7 <gps_long+0x3>
    18fa:	80 90 c8 20 	lds	r8, 0x20C8	; 0x8020c8 <gps_lat>
    18fe:	90 90 c9 20 	lds	r9, 0x20C9	; 0x8020c9 <gps_lat+0x1>
    1902:	a0 90 ca 20 	lds	r10, 0x20CA	; 0x8020ca <gps_lat+0x2>
    1906:	b0 90 cb 20 	lds	r11, 0x20CB	; 0x8020cb <gps_lat+0x3>
    190a:	60 91 cc 20 	lds	r22, 0x20CC	; 0x8020cc <gps_t>
    190e:	70 91 cd 20 	lds	r23, 0x20CD	; 0x8020cd <gps_t+0x1>
    1912:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <gps_t+0x2>
    1916:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <gps_t+0x3>
    191a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    191e:	6b 01       	movw	r12, r22
    1920:	7c 01       	movw	r14, r24
    1922:	60 91 ae 20 	lds	r22, 0x20AE	; 0x8020ae <__data_end>
    1926:	70 91 af 20 	lds	r23, 0x20AF	; 0x8020af <__data_end+0x1>
    192a:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <__data_end+0x2>
    192e:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <__data_end+0x3>
    1932:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1936:	7f 93       	push	r23
    1938:	6f 93       	push	r22
    193a:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <state>
    193e:	1f 92       	push	r1
    1940:	8f 93       	push	r24
    1942:	60 91 b2 20 	lds	r22, 0x20B2	; 0x8020b2 <rpm>
    1946:	70 91 b3 20 	lds	r23, 0x20B3	; 0x8020b3 <rpm+0x1>
    194a:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <rpm+0x2>
    194e:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <rpm+0x3>
    1952:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1956:	7f 93       	push	r23
    1958:	6f 93       	push	r22
    195a:	60 91 b6 20 	lds	r22, 0x20B6	; 0x8020b6 <roll>
    195e:	70 91 b7 20 	lds	r23, 0x20B7	; 0x8020b7 <roll+0x1>
    1962:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <roll+0x2>
    1966:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <roll+0x3>
    196a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    196e:	7f 93       	push	r23
    1970:	6f 93       	push	r22
    1972:	60 91 ba 20 	lds	r22, 0x20BA	; 0x8020ba <pitch>
    1976:	70 91 bb 20 	lds	r23, 0x20BB	; 0x8020bb <pitch+0x1>
    197a:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <pitch+0x2>
    197e:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <pitch+0x3>
    1982:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1986:	7f 93       	push	r23
    1988:	6f 93       	push	r22
    198a:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <gps_sats+0x1>
    198e:	8f 93       	push	r24
    1990:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <gps_sats>
    1994:	8f 93       	push	r24
    1996:	81 2f       	mov	r24, r17
    1998:	90 2f       	mov	r25, r16
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	9c 01       	movw	r18, r24
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	82 0f       	add	r24, r18
    19aa:	93 1f       	adc	r25, r19
    19ac:	6a e0       	ldi	r22, 0x0A	; 10
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__divmodhi4>
    19b4:	9f 93       	push	r25
    19b6:	8f 93       	push	r24
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	34 e2       	ldi	r19, 0x24	; 36
    19c0:	44 e7       	ldi	r20, 0x74	; 116
    19c2:	59 e4       	ldi	r21, 0x49	; 73
    19c4:	c3 01       	movw	r24, r6
    19c6:	b2 01       	movw	r22, r4
    19c8:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    19cc:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    19d0:	20 e4       	ldi	r18, 0x40	; 64
    19d2:	32 e4       	ldi	r19, 0x42	; 66
    19d4:	4f e0       	ldi	r20, 0x0F	; 15
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	0e 94 9e 19 	call	0x333c	; 0x333c <__divmodsi4>
    19dc:	9b 01       	movw	r18, r22
    19de:	77 23       	and	r23, r23
    19e0:	24 f4       	brge	.+8      	; 0x19ea <packet+0x14a>
    19e2:	22 27       	eor	r18, r18
    19e4:	33 27       	eor	r19, r19
    19e6:	26 1b       	sub	r18, r22
    19e8:	37 0b       	sbc	r19, r23
    19ea:	c9 01       	movw	r24, r18
    19ec:	33 0f       	add	r19, r19
    19ee:	aa 0b       	sbc	r26, r26
    19f0:	bb 0b       	sbc	r27, r27
    19f2:	bf 93       	push	r27
    19f4:	af 93       	push	r26
    19f6:	9f 93       	push	r25
    19f8:	8f 93       	push	r24
    19fa:	c3 01       	movw	r24, r6
    19fc:	b2 01       	movw	r22, r4
    19fe:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1a02:	7f 93       	push	r23
    1a04:	6f 93       	push	r22
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	34 e2       	ldi	r19, 0x24	; 36
    1a0a:	44 e7       	ldi	r20, 0x74	; 116
    1a0c:	59 e4       	ldi	r21, 0x49	; 73
    1a0e:	c5 01       	movw	r24, r10
    1a10:	b4 01       	movw	r22, r8
    1a12:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__mulsf3>
    1a16:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1a1a:	20 e4       	ldi	r18, 0x40	; 64
    1a1c:	32 e4       	ldi	r19, 0x42	; 66
    1a1e:	4f e0       	ldi	r20, 0x0F	; 15
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	0e 94 9e 19 	call	0x333c	; 0x333c <__divmodsi4>
    1a26:	9f 93       	push	r25
    1a28:	8f 93       	push	r24
    1a2a:	7f 93       	push	r23
    1a2c:	6f 93       	push	r22
    1a2e:	c5 01       	movw	r24, r10
    1a30:	b4 01       	movw	r22, r8
    1a32:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1a36:	7f 93       	push	r23
    1a38:	6f 93       	push	r22
    1a3a:	0f 2e       	mov	r0, r31
    1a3c:	f4 e6       	ldi	r31, 0x64	; 100
    1a3e:	8f 2e       	mov	r8, r31
    1a40:	91 2c       	mov	r9, r1
    1a42:	a1 2c       	mov	r10, r1
    1a44:	b1 2c       	mov	r11, r1
    1a46:	f0 2d       	mov	r31, r0
    1a48:	c7 01       	movw	r24, r14
    1a4a:	b6 01       	movw	r22, r12
    1a4c:	a5 01       	movw	r20, r10
    1a4e:	94 01       	movw	r18, r8
    1a50:	0e 94 9e 19 	call	0x333c	; 0x333c <__divmodsi4>
    1a54:	7f 93       	push	r23
    1a56:	6f 93       	push	r22
    1a58:	c7 01       	movw	r24, r14
    1a5a:	b6 01       	movw	r22, r12
    1a5c:	20 e1       	ldi	r18, 0x10	; 16
    1a5e:	37 e2       	ldi	r19, 0x27	; 39
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	0e 94 9e 19 	call	0x333c	; 0x333c <__divmodsi4>
    1a68:	12 2f       	mov	r17, r18
    1a6a:	03 2f       	mov	r16, r19
    1a6c:	a5 01       	movw	r20, r10
    1a6e:	94 01       	movw	r18, r8
    1a70:	0e 94 9e 19 	call	0x333c	; 0x333c <__divmodsi4>
    1a74:	3f 93       	push	r19
    1a76:	2f 93       	push	r18
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	60 91 d4 20 	lds	r22, 0x20D4	; 0x8020d4 <volt>
    1a80:	70 91 d5 20 	lds	r23, 0x20D5	; 0x8020d5 <volt+0x1>
    1a84:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <volt+0x2>
    1a88:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <volt+0x3>
    1a8c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1a90:	7f 93       	push	r23
    1a92:	6f 93       	push	r22
    1a94:	23 e3       	ldi	r18, 0x33	; 51
    1a96:	33 e9       	ldi	r19, 0x93	; 147
    1a98:	48 e8       	ldi	r20, 0x88	; 136
    1a9a:	53 e4       	ldi	r21, 0x43	; 67
    1a9c:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <temp>
    1aa0:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <temp+0x1>
    1aa4:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <temp+0x2>
    1aa8:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <temp+0x3>
    1aac:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__subsf3>
    1ab0:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1ab4:	7f 93       	push	r23
    1ab6:	6f 93       	push	r22
    1ab8:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <press>
    1abc:	70 91 e1 20 	lds	r23, 0x20E1	; 0x8020e1 <press+0x1>
    1ac0:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <press+0x2>
    1ac4:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <press+0x3>
    1ac8:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1acc:	9f 93       	push	r25
    1ace:	8f 93       	push	r24
    1ad0:	7f 93       	push	r23
    1ad2:	6f 93       	push	r22
    1ad4:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    1ad8:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    1adc:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    1ae0:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    1ae4:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    1ae8:	7f 93       	push	r23
    1aea:	6f 93       	push	r22
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <timer+0x1>
    1af4:	8f 93       	push	r24
    1af6:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <timer>
    1afa:	8f 93       	push	r24
    1afc:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    1b00:	8f 93       	push	r24
    1b02:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    1b06:	8f 93       	push	r24
    1b08:	ce e1       	ldi	r28, 0x1E	; 30
    1b0a:	d1 e2       	ldi	r29, 0x21	; 33
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <sprintf>
    1b14:	8d b7       	in	r24, 0x3d	; 61
    1b16:	9e b7       	in	r25, 0x3e	; 62
    1b18:	c4 96       	adiw	r24, 0x34	; 52
    1b1a:	8d bf       	out	0x3d, r24	; 61
    1b1c:	9e bf       	out	0x3e, r25	; 62
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	0e 94 41 1a 	call	0x3482	; 0x3482 <printf>
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	df 90       	pop	r13
    1b38:	cf 90       	pop	r12
    1b3a:	bf 90       	pop	r11
    1b3c:	af 90       	pop	r10
    1b3e:	9f 90       	pop	r9
    1b40:	8f 90       	pop	r8
    1b42:	7f 90       	pop	r7
    1b44:	6f 90       	pop	r6
    1b46:	5f 90       	pop	r5
    1b48:	4f 90       	pop	r4
    1b4a:	08 95       	ret

00001b4c <eeprom_write_const>:
    1b4c:	5f 92       	push	r5
    1b4e:	6f 92       	push	r6
    1b50:	7f 92       	push	r7
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	af 92       	push	r10
    1b58:	bf 92       	push	r11
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	a0 97       	sbiw	r28, 0x20	; 32
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    1b78:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    1b7c:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    1b80:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    1b84:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__fixunssfdi>
    1b88:	12 2f       	mov	r17, r18
    1b8a:	63 2e       	mov	r6, r19
    1b8c:	74 2e       	mov	r7, r20
    1b8e:	85 2e       	mov	r8, r21
    1b90:	96 2e       	mov	r9, r22
    1b92:	a7 2e       	mov	r10, r23
    1b94:	b8 2e       	mov	r11, r24
    1b96:	c9 2e       	mov	r12, r25
    1b98:	60 91 29 20 	lds	r22, 0x2029	; 0x802029 <ground_t>
    1b9c:	70 91 2a 20 	lds	r23, 0x202A	; 0x80202a <ground_t+0x1>
    1ba0:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <ground_t+0x2>
    1ba4:	90 91 2c 20 	lds	r25, 0x202C	; 0x80202c <ground_t+0x3>
    1ba8:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__fixunssfdi>
    1bac:	e2 2f       	mov	r30, r18
    1bae:	53 2e       	mov	r5, r19
    1bb0:	d4 2e       	mov	r13, r20
    1bb2:	e5 2e       	mov	r14, r21
    1bb4:	f6 2e       	mov	r15, r22
    1bb6:	b7 2f       	mov	r27, r23
    1bb8:	a8 2f       	mov	r26, r24
    1bba:	f9 2f       	mov	r31, r25
    1bbc:	19 83       	std	Y+1, r17	; 0x01
    1bbe:	21 2f       	mov	r18, r17
    1bc0:	36 2d       	mov	r19, r6
    1bc2:	47 2d       	mov	r20, r7
    1bc4:	58 2d       	mov	r21, r8
    1bc6:	69 2d       	mov	r22, r9
    1bc8:	7a 2d       	mov	r23, r10
    1bca:	8b 2d       	mov	r24, r11
    1bcc:	9c 2d       	mov	r25, r12
    1bce:	08 e0       	ldi	r16, 0x08	; 8
    1bd0:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1bd4:	2a 83       	std	Y+2, r18	; 0x02
    1bd6:	21 2f       	mov	r18, r17
    1bd8:	36 2d       	mov	r19, r6
    1bda:	47 2d       	mov	r20, r7
    1bdc:	58 2d       	mov	r21, r8
    1bde:	69 2d       	mov	r22, r9
    1be0:	7a 2d       	mov	r23, r10
    1be2:	8b 2d       	mov	r24, r11
    1be4:	9c 2d       	mov	r25, r12
    1be6:	00 e1       	ldi	r16, 0x10	; 16
    1be8:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1bec:	2b 83       	std	Y+3, r18	; 0x03
    1bee:	21 2f       	mov	r18, r17
    1bf0:	36 2d       	mov	r19, r6
    1bf2:	47 2d       	mov	r20, r7
    1bf4:	58 2d       	mov	r21, r8
    1bf6:	69 2d       	mov	r22, r9
    1bf8:	7a 2d       	mov	r23, r10
    1bfa:	8b 2d       	mov	r24, r11
    1bfc:	9c 2d       	mov	r25, r12
    1bfe:	08 e1       	ldi	r16, 0x18	; 24
    1c00:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1c04:	2c 83       	std	Y+4, r18	; 0x04
    1c06:	21 2f       	mov	r18, r17
    1c08:	36 2d       	mov	r19, r6
    1c0a:	47 2d       	mov	r20, r7
    1c0c:	58 2d       	mov	r21, r8
    1c0e:	69 2d       	mov	r22, r9
    1c10:	7a 2d       	mov	r23, r10
    1c12:	8b 2d       	mov	r24, r11
    1c14:	9c 2d       	mov	r25, r12
    1c16:	00 e2       	ldi	r16, 0x20	; 32
    1c18:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1c1c:	2d 83       	std	Y+5, r18	; 0x05
    1c1e:	21 2f       	mov	r18, r17
    1c20:	36 2d       	mov	r19, r6
    1c22:	47 2d       	mov	r20, r7
    1c24:	58 2d       	mov	r21, r8
    1c26:	69 2d       	mov	r22, r9
    1c28:	7a 2d       	mov	r23, r10
    1c2a:	8b 2d       	mov	r24, r11
    1c2c:	9c 2d       	mov	r25, r12
    1c2e:	08 e2       	ldi	r16, 0x28	; 40
    1c30:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1c34:	2e 83       	std	Y+6, r18	; 0x06
    1c36:	21 2f       	mov	r18, r17
    1c38:	36 2d       	mov	r19, r6
    1c3a:	47 2d       	mov	r20, r7
    1c3c:	58 2d       	mov	r21, r8
    1c3e:	69 2d       	mov	r22, r9
    1c40:	7a 2d       	mov	r23, r10
    1c42:	8b 2d       	mov	r24, r11
    1c44:	9c 2d       	mov	r25, r12
    1c46:	00 e3       	ldi	r16, 0x30	; 48
    1c48:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1c4c:	2f 83       	std	Y+7, r18	; 0x07
    1c4e:	21 2f       	mov	r18, r17
    1c50:	36 2d       	mov	r19, r6
    1c52:	47 2d       	mov	r20, r7
    1c54:	58 2d       	mov	r21, r8
    1c56:	69 2d       	mov	r22, r9
    1c58:	7a 2d       	mov	r23, r10
    1c5a:	8b 2d       	mov	r24, r11
    1c5c:	9c 2d       	mov	r25, r12
    1c5e:	08 e3       	ldi	r16, 0x38	; 56
    1c60:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1c64:	28 87       	std	Y+8, r18	; 0x08
    1c66:	e9 87       	std	Y+9, r30	; 0x09
    1c68:	2e 2f       	mov	r18, r30
    1c6a:	35 2d       	mov	r19, r5
    1c6c:	4d 2d       	mov	r20, r13
    1c6e:	5e 2d       	mov	r21, r14
    1c70:	6f 2d       	mov	r22, r15
    1c72:	7b 2f       	mov	r23, r27
    1c74:	8a 2f       	mov	r24, r26
    1c76:	9f 2f       	mov	r25, r31
    1c78:	08 e0       	ldi	r16, 0x08	; 8
    1c7a:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1c7e:	2a 87       	std	Y+10, r18	; 0x0a
    1c80:	2e 2f       	mov	r18, r30
    1c82:	35 2d       	mov	r19, r5
    1c84:	4d 2d       	mov	r20, r13
    1c86:	5e 2d       	mov	r21, r14
    1c88:	6f 2d       	mov	r22, r15
    1c8a:	7b 2f       	mov	r23, r27
    1c8c:	8a 2f       	mov	r24, r26
    1c8e:	9f 2f       	mov	r25, r31
    1c90:	00 e1       	ldi	r16, 0x10	; 16
    1c92:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1c96:	2b 87       	std	Y+11, r18	; 0x0b
    1c98:	2e 2f       	mov	r18, r30
    1c9a:	35 2d       	mov	r19, r5
    1c9c:	4d 2d       	mov	r20, r13
    1c9e:	5e 2d       	mov	r21, r14
    1ca0:	6f 2d       	mov	r22, r15
    1ca2:	7b 2f       	mov	r23, r27
    1ca4:	8a 2f       	mov	r24, r26
    1ca6:	9f 2f       	mov	r25, r31
    1ca8:	08 e1       	ldi	r16, 0x18	; 24
    1caa:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1cae:	2c 87       	std	Y+12, r18	; 0x0c
    1cb0:	2e 2f       	mov	r18, r30
    1cb2:	35 2d       	mov	r19, r5
    1cb4:	4d 2d       	mov	r20, r13
    1cb6:	5e 2d       	mov	r21, r14
    1cb8:	6f 2d       	mov	r22, r15
    1cba:	7b 2f       	mov	r23, r27
    1cbc:	8a 2f       	mov	r24, r26
    1cbe:	9f 2f       	mov	r25, r31
    1cc0:	00 e2       	ldi	r16, 0x20	; 32
    1cc2:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1cc6:	2d 87       	std	Y+13, r18	; 0x0d
    1cc8:	2e 2f       	mov	r18, r30
    1cca:	35 2d       	mov	r19, r5
    1ccc:	4d 2d       	mov	r20, r13
    1cce:	5e 2d       	mov	r21, r14
    1cd0:	6f 2d       	mov	r22, r15
    1cd2:	7b 2f       	mov	r23, r27
    1cd4:	8a 2f       	mov	r24, r26
    1cd6:	9f 2f       	mov	r25, r31
    1cd8:	08 e2       	ldi	r16, 0x28	; 40
    1cda:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1cde:	2e 87       	std	Y+14, r18	; 0x0e
    1ce0:	2e 2f       	mov	r18, r30
    1ce2:	35 2d       	mov	r19, r5
    1ce4:	4d 2d       	mov	r20, r13
    1ce6:	5e 2d       	mov	r21, r14
    1ce8:	6f 2d       	mov	r22, r15
    1cea:	7b 2f       	mov	r23, r27
    1cec:	8a 2f       	mov	r24, r26
    1cee:	9f 2f       	mov	r25, r31
    1cf0:	00 e3       	ldi	r16, 0x30	; 48
    1cf2:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1cf6:	2f 87       	std	Y+15, r18	; 0x0f
    1cf8:	2e 2f       	mov	r18, r30
    1cfa:	35 2d       	mov	r19, r5
    1cfc:	4d 2d       	mov	r20, r13
    1cfe:	5e 2d       	mov	r21, r14
    1d00:	6f 2d       	mov	r22, r15
    1d02:	7b 2f       	mov	r23, r27
    1d04:	8a 2f       	mov	r24, r26
    1d06:	9f 2f       	mov	r25, r31
    1d08:	08 e3       	ldi	r16, 0x38	; 56
    1d0a:	0e 94 cc 19 	call	0x3398	; 0x3398 <__lshrdi3>
    1d0e:	28 8b       	std	Y+16, r18	; 0x10
    1d10:	80 e1       	ldi	r24, 0x10	; 16
    1d12:	e1 e3       	ldi	r30, 0x31	; 49
    1d14:	f0 e2       	ldi	r31, 0x20	; 32
    1d16:	de 01       	movw	r26, r28
    1d18:	51 96       	adiw	r26, 0x11	; 17
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	0d 92       	st	X+, r0
    1d1e:	8a 95       	dec	r24
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <eeprom_write_const+0x1ce>
    1d22:	83 e3       	ldi	r24, 0x33	; 51
    1d24:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	71 96       	adiw	r30, 0x11	; 17
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	ae 01       	movw	r20, r28
    1d32:	4f 5d       	subi	r20, 0xDF	; 223
    1d34:	5f 4f       	sbci	r21, 0xFF	; 255
    1d36:	60 ec       	ldi	r22, 0xC0	; 192
    1d38:	71 e0       	ldi	r23, 0x01	; 1
    1d3a:	21 91       	ld	r18, Z+
    1d3c:	db 01       	movw	r26, r22
    1d3e:	2c 93       	st	X, r18
    1d40:	dc 01       	movw	r26, r24
    1d42:	2d 91       	ld	r18, X+
    1d44:	cd 01       	movw	r24, r26
    1d46:	db 01       	movw	r26, r22
    1d48:	14 96       	adiw	r26, 0x04	; 4
    1d4a:	2c 93       	st	X, r18
    1d4c:	e4 17       	cp	r30, r20
    1d4e:	f5 07       	cpc	r31, r21
    1d50:	a1 f7       	brne	.-24     	; 0x1d3a <eeprom_write_const+0x1ee>
    1d52:	e0 ec       	ldi	r30, 0xC0	; 192
    1d54:	f1 e0       	ldi	r31, 0x01	; 1
    1d56:	85 e3       	ldi	r24, 0x35	; 53
    1d58:	82 87       	std	Z+10, r24	; 0x0a
    1d5a:	10 82       	st	Z, r1
    1d5c:	80 e1       	ldi	r24, 0x10	; 16
    1d5e:	81 83       	std	Z+1, r24	; 0x01
    1d60:	88 ed       	ldi	r24, 0xD8	; 216
    1d62:	84 bf       	out	0x34, r24	; 52
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	83 87       	std	Z+11, r24	; 0x0b
    1d68:	87 85       	ldd	r24, Z+15	; 0x0f
    1d6a:	88 23       	and	r24, r24
    1d6c:	ec f3       	brlt	.-6      	; 0x1d68 <eeprom_write_const+0x21c>
    1d6e:	a0 96       	adiw	r28, 0x20	; 32
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	9f 90       	pop	r9
    1d8a:	8f 90       	pop	r8
    1d8c:	7f 90       	pop	r7
    1d8e:	6f 90       	pop	r6
    1d90:	5f 90       	pop	r5
    1d92:	08 95       	ret

00001d94 <eeprom_write>:
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	2c 97       	sbiw	r28, 0x0c	; 12
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    1da6:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    1daa:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    1dae:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    1db2:	ad d7       	rcall	.+3930   	; 0x2d0e <__fixsfsi>
    1db4:	79 83       	std	Y+1, r23	; 0x01
    1db6:	6a 83       	std	Y+2, r22	; 0x02
    1db8:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <packets>
    1dbc:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <packets+0x1>
    1dc0:	9b 83       	std	Y+3, r25	; 0x03
    1dc2:	8c 83       	std	Y+4, r24	; 0x04
    1dc4:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <timer>
    1dc8:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <timer+0x1>
    1dcc:	9d 83       	std	Y+5, r25	; 0x05
    1dce:	8e 83       	std	Y+6, r24	; 0x06
    1dd0:	86 e0       	ldi	r24, 0x06	; 6
    1dd2:	e1 e4       	ldi	r30, 0x41	; 65
    1dd4:	f0 e2       	ldi	r31, 0x20	; 32
    1dd6:	de 01       	movw	r26, r28
    1dd8:	17 96       	adiw	r26, 0x07	; 7
    1dda:	01 90       	ld	r0, Z+
    1ddc:	0d 92       	st	X+, r0
    1dde:	8a 95       	dec	r24
    1de0:	e1 f7       	brne	.-8      	; 0x1dda <eeprom_write+0x46>
    1de2:	83 e3       	ldi	r24, 0x33	; 51
    1de4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    1de8:	fe 01       	movw	r30, r28
    1dea:	37 96       	adiw	r30, 0x07	; 7
    1dec:	ce 01       	movw	r24, r28
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	ae 01       	movw	r20, r28
    1df2:	43 5f       	subi	r20, 0xF3	; 243
    1df4:	5f 4f       	sbci	r21, 0xFF	; 255
    1df6:	60 ec       	ldi	r22, 0xC0	; 192
    1df8:	71 e0       	ldi	r23, 0x01	; 1
    1dfa:	21 91       	ld	r18, Z+
    1dfc:	db 01       	movw	r26, r22
    1dfe:	2c 93       	st	X, r18
    1e00:	dc 01       	movw	r26, r24
    1e02:	2d 91       	ld	r18, X+
    1e04:	cd 01       	movw	r24, r26
    1e06:	db 01       	movw	r26, r22
    1e08:	14 96       	adiw	r26, 0x04	; 4
    1e0a:	2c 93       	st	X, r18
    1e0c:	e4 17       	cp	r30, r20
    1e0e:	f5 07       	cpc	r31, r21
    1e10:	a1 f7       	brne	.-24     	; 0x1dfa <eeprom_write+0x66>
    1e12:	e0 ec       	ldi	r30, 0xC0	; 192
    1e14:	f1 e0       	ldi	r31, 0x01	; 1
    1e16:	85 e3       	ldi	r24, 0x35	; 53
    1e18:	82 87       	std	Z+10, r24	; 0x0a
    1e1a:	10 82       	st	Z, r1
    1e1c:	80 e1       	ldi	r24, 0x10	; 16
    1e1e:	81 83       	std	Z+1, r24	; 0x01
    1e20:	88 ed       	ldi	r24, 0xD8	; 216
    1e22:	84 bf       	out	0x34, r24	; 52
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	83 87       	std	Z+11, r24	; 0x0b
    1e28:	87 85       	ldd	r24, Z+15	; 0x0f
    1e2a:	88 23       	and	r24, r24
    1e2c:	ec f3       	brlt	.-6      	; 0x1e28 <eeprom_write+0x94>
    1e2e:	2c 96       	adiw	r28, 0x0c	; 12
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	08 95       	ret

00001e3a <eeprom_read>:
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	c0 ec       	ldi	r28, 0xC0	; 192
    1e40:	d1 e0       	ldi	r29, 0x01	; 1
    1e42:	26 e0       	ldi	r18, 0x06	; 6
    1e44:	2a 87       	std	Y+10, r18	; 0x0a
    1e46:	88 83       	st	Y, r24
    1e48:	99 83       	std	Y+1, r25	; 0x01
    1e4a:	88 ed       	ldi	r24, 0xD8	; 216
    1e4c:	84 bf       	out	0x34, r24	; 52
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	8b 87       	std	Y+11, r24	; 0x0b
    1e52:	66 ed       	ldi	r22, 0xD6	; 214
    1e54:	74 e1       	ldi	r23, 0x14	; 20
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 21 07 	call	0xe42	; 0xe42 <__portable_avr_delay_cycles>
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <system_init>:
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	0e 94 d0 06 	call	0xda0	; 0xda0 <sysclk_init>
    1e6e:	6b ea       	ldi	r22, 0xAB	; 171
    1e70:	79 e2       	ldi	r23, 0x29	; 41
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	0e 94 21 07 	call	0xe42	; 0xe42 <__portable_avr_delay_cycles>
    1e7a:	78 94       	sei
    1e7c:	8c eb       	ldi	r24, 0xBC	; 188
    1e7e:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    1e82:	87 e0       	ldi	r24, 0x07	; 7
    1e84:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e88:	87 e0       	ldi	r24, 0x07	; 7
    1e8a:	90 e1       	ldi	r25, 0x10	; 16
    1e8c:	d6 df       	rcall	.-84     	; 0x1e3a <eeprom_read>
    1e8e:	0e 94 84 05 	call	0xb08	; 0xb08 <data_terminal_init>
    1e92:	08 d8       	rcall	.-4080   	; 0xea4 <gps_init>
    1e94:	6b ea       	ldi	r22, 0xAB	; 171
    1e96:	70 eb       	ldi	r23, 0xB0	; 176
    1e98:	88 e2       	ldi	r24, 0x28	; 40
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0e 94 21 07 	call	0xe42	; 0xe42 <__portable_avr_delay_cycles>
    1ea0:	6b ea       	ldi	r22, 0xAB	; 171
    1ea2:	79 e2       	ldi	r23, 0x29	; 41
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 21 07 	call	0xe42	; 0xe42 <__portable_avr_delay_cycles>
    1eac:	0e 94 56 05 	call	0xaac	; 0xaac <spi_init>
    1eb0:	6b ea       	ldi	r22, 0xAB	; 171
    1eb2:	79 e2       	ldi	r23, 0x29	; 41
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0e 94 21 07 	call	0xe42	; 0xe42 <__portable_avr_delay_cycles>
    1ebc:	0e 94 2c 07 	call	0xe58	; 0xe58 <pressure_init>
    1ec0:	6b ea       	ldi	r22, 0xAB	; 171
    1ec2:	79 e2       	ldi	r23, 0x29	; 41
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 21 07 	call	0xe42	; 0xe42 <__portable_avr_delay_cycles>
    1ecc:	80 e2       	ldi	r24, 0x20	; 32
    1ece:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
    1ed2:	2b dc       	rcall	.-1962   	; 0x172a <clock_init>
    1ed4:	85 db       	rcall	.-2294   	; 0x15e0 <release_servo_init>
    1ed6:	0e 94 96 04 	call	0x92c	; 0x92c <cam_init>
    1eda:	66 e5       	ldi	r22, 0x56	; 86
    1edc:	70 ed       	ldi	r23, 0xD0	; 208
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 21 07 	call	0xe42	; 0xe42 <__portable_avr_delay_cycles>
    1ee6:	2c db       	rcall	.-2472   	; 0x1540 <state_check>
    1ee8:	0e 94 66 07 	call	0xecc	; 0xecc <get_pressure>
    1eec:	60 93 2d 20 	sts	0x202D, r22	; 0x80202d <ground_p>
    1ef0:	70 93 2e 20 	sts	0x202E, r23	; 0x80202e <ground_p+0x1>
    1ef4:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <ground_p+0x2>
    1ef8:	90 93 30 20 	sts	0x2030, r25	; 0x802030 <ground_p+0x3>
    1efc:	03 e3       	ldi	r16, 0x33	; 51
    1efe:	13 e1       	ldi	r17, 0x13	; 19
    1f00:	20 e9       	ldi	r18, 0x90	; 144
    1f02:	33 e4       	ldi	r19, 0x43	; 67
    1f04:	00 93 29 20 	sts	0x2029, r16	; 0x802029 <ground_t>
    1f08:	10 93 2a 20 	sts	0x202A, r17	; 0x80202a <ground_t+0x1>
    1f0c:	20 93 2b 20 	sts	0x202B, r18	; 0x80202b <ground_t+0x2>
    1f10:	30 93 2c 20 	sts	0x202C, r19	; 0x80202c <ground_t+0x3>
    1f14:	7e d8       	rcall	.-3844   	; 0x1012 <get_altitude>
    1f16:	60 93 fb 20 	sts	0x20FB, r22	; 0x8020fb <ground_a>
    1f1a:	70 93 fc 20 	sts	0x20FC, r23	; 0x8020fc <ground_a+0x1>
    1f1e:	80 93 fd 20 	sts	0x20FD, r24	; 0x8020fd <ground_a+0x2>
    1f22:	90 93 fe 20 	sts	0x20FE, r25	; 0x8020fe <ground_a+0x3>
    1f26:	12 de       	rcall	.-988    	; 0x1b4c <eeprom_write_const>
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	08 95       	ret

00001f2e <main>:
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	c8 56       	subi	r28, 0x68	; 104
    1f38:	d1 09       	sbc	r29, r1
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	93 df       	rcall	.-218    	; 0x1e66 <system_init>
    1f40:	66 e5       	ldi	r22, 0x56	; 86
    1f42:	73 e2       	ldi	r23, 0x23	; 35
    1f44:	88 e0       	ldi	r24, 0x08	; 8
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 21 07 	call	0xe42	; 0xe42 <__portable_avr_delay_cycles>
    1f4c:	14 e1       	ldi	r17, 0x14	; 20
    1f4e:	be 01       	movw	r22, r28
    1f50:	6f 5f       	subi	r22, 0xFF	; 255
    1f52:	7f 4f       	sbci	r23, 0xFF	; 255
    1f54:	fb 01       	movw	r30, r22
    1f56:	81 2f       	mov	r24, r17
    1f58:	11 92       	st	Z+, r1
    1f5a:	8a 95       	dec	r24
    1f5c:	e9 f7       	brne	.-6      	; 0x1f58 <main+0x2a>
    1f5e:	4a e0       	ldi	r20, 0x0A	; 10
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	ce 01       	movw	r24, r28
    1f64:	45 96       	adiw	r24, 0x15	; 21
    1f66:	0e 94 09 06 	call	0xc12	; 0xc12 <rb16_init>
    1f6a:	be 01       	movw	r22, r28
    1f6c:	63 5e       	subi	r22, 0xE3	; 227
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	88 e2       	ldi	r24, 0x28	; 40
    1f72:	fb 01       	movw	r30, r22
    1f74:	11 92       	st	Z+, r1
    1f76:	8a 95       	dec	r24
    1f78:	e9 f7       	brne	.-6      	; 0x1f74 <main+0x46>
    1f7a:	4a e0       	ldi	r20, 0x0A	; 10
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	ce 01       	movw	r24, r28
    1f80:	8b 5b       	subi	r24, 0xBB	; 187
    1f82:	9f 4f       	sbci	r25, 0xFF	; 255
    1f84:	0e 94 91 06 	call	0xd22	; 0xd22 <rb32_init>
    1f88:	be 01       	movw	r22, r28
    1f8a:	63 5b       	subi	r22, 0xB3	; 179
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	fb 01       	movw	r30, r22
    1f90:	11 92       	st	Z+, r1
    1f92:	1a 95       	dec	r17
    1f94:	e9 f7       	brne	.-6      	; 0x1f90 <main+0x62>
    1f96:	4a e0       	ldi	r20, 0x0A	; 10
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	8f 59       	subi	r24, 0x9F	; 159
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	0e 94 09 06 	call	0xc12	; 0xc12 <rb16_init>
    1fa4:	00 e0       	ldi	r16, 0x00	; 0
    1fa6:	10 e0       	ldi	r17, 0x00	; 0
    1fa8:	be 01       	movw	r22, r28
    1faa:	6b 5b       	subi	r22, 0xBB	; 187
    1fac:	7f 4f       	sbci	r23, 0xFF	; 255
    1fae:	ce 01       	movw	r24, r28
    1fb0:	45 96       	adiw	r24, 0x15	; 21
    1fb2:	46 da       	rcall	.-2932   	; 0x1440 <data_collect>
    1fb4:	c5 da       	rcall	.-2678   	; 0x1540 <state_check>
    1fb6:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <state>
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	41 f0       	breq	.+16     	; 0x1fce <main+0xa0>
    1fbe:	08 f4       	brcc	.+2      	; 0x1fc2 <main+0x94>
    1fc0:	47 c0       	rjmp	.+142    	; 0x2050 <main+0x122>
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	c9 f0       	breq	.+50     	; 0x1ff8 <main+0xca>
    1fc6:	83 30       	cpi	r24, 0x03	; 3
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <main+0x9e>
    1fca:	3c c0       	rjmp	.+120    	; 0x2044 <main+0x116>
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <main+0x11e>
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	46 e1       	ldi	r20, 0x16	; 22
    1fd4:	54 e4       	ldi	r21, 0x44	; 68
    1fd6:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    1fda:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    1fde:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    1fe2:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    1fe6:	ab d7       	rcall	.+3926   	; 0x2f3e <__gesf2>
    1fe8:	18 16       	cp	r1, r24
    1fea:	94 f5       	brge	.+100    	; 0x2050 <main+0x122>
    1fec:	11 11       	cpse	r17, r1
    1fee:	30 c0       	rjmp	.+96     	; 0x2050 <main+0x122>
    1ff0:	0e 94 9c 04 	call	0x938	; 0x938 <cam_switch>
    1ff4:	11 e0       	ldi	r17, 0x01	; 1
    1ff6:	2c c0       	rjmp	.+88     	; 0x2050 <main+0x122>
    1ff8:	11 11       	cpse	r17, r1
    1ffa:	03 c0       	rjmp	.+6      	; 0x2002 <main+0xd4>
    1ffc:	0e 94 9c 04 	call	0x938	; 0x938 <cam_switch>
    2000:	11 e0       	ldi	r17, 0x01	; 1
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	41 ee       	ldi	r20, 0xE1	; 225
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    200e:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    2012:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    2016:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    201a:	6e d5       	rcall	.+2780   	; 0x2af8 <__subsf3>
    201c:	78 d6       	rcall	.+3312   	; 0x2d0e <__fixsfsi>
    201e:	67 5f       	subi	r22, 0xF7	; 247
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	63 31       	cpi	r22, 0x13	; 19
    2024:	71 05       	cpc	r23, r1
    2026:	28 f4       	brcc	.+10     	; 0x2032 <main+0x104>
    2028:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <release>
    202c:	0e 94 95 04 	call	0x92a	; 0x92a <hall_sensor_init>
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <main+0x122>
    2032:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <released>
    2036:	88 23       	and	r24, r24
    2038:	59 f0       	breq	.+22     	; 0x2050 <main+0x122>
    203a:	ce 01       	movw	r24, r28
    203c:	8f 59       	subi	r24, 0x9F	; 159
    203e:	9f 4f       	sbci	r25, 0xFF	; 255
    2040:	e7 da       	rcall	.-2610   	; 0x1610 <servo_pid>
    2042:	06 c0       	rjmp	.+12     	; 0x2050 <main+0x122>
    2044:	01 11       	cpse	r16, r1
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <main+0x122>
    2048:	01 e0       	ldi	r16, 0x01	; 1
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <main+0x122>
    204c:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <state>
    2050:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <data_packets>
    2054:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <data_packets+0x1>
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <data_packets>
    205e:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <data_packets+0x1>
    2062:	60 91 e8 20 	lds	r22, 0x20E8	; 0x8020e8 <timer>
    2066:	70 91 e9 20 	lds	r23, 0x20E9	; 0x8020e9 <timer+0x1>
    206a:	61 15       	cp	r22, r1
    206c:	71 05       	cpc	r23, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <main+0x144>
    2070:	9b cf       	rjmp	.-202    	; 0x1fa8 <main+0x7a>
    2072:	0e 94 55 19 	call	0x32aa	; 0x32aa <__udivmodhi4>
    2076:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <rate>
    207a:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <rate+0x1>
    207e:	94 cf       	rjmp	.-216    	; 0x1fa8 <main+0x7a>

00002080 <reset>:
    2080:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <press>
    2084:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <press+0x1>
    2088:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <press+0x2>
    208c:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <press+0x3>
    2090:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <temp>
    2094:	10 92 dd 20 	sts	0x20DD, r1	; 0x8020dd <temp+0x1>
    2098:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <temp+0x2>
    209c:	10 92 df 20 	sts	0x20DF, r1	; 0x8020df <temp+0x3>
    20a0:	10 92 d8 20 	sts	0x20D8, r1	; 0x8020d8 <alt>
    20a4:	10 92 d9 20 	sts	0x20D9, r1	; 0x8020d9 <alt+0x1>
    20a8:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <alt+0x2>
    20ac:	10 92 db 20 	sts	0x20DB, r1	; 0x8020db <alt+0x3>
    20b0:	10 92 d4 20 	sts	0x20D4, r1	; 0x8020d4 <volt>
    20b4:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <volt+0x1>
    20b8:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <volt+0x2>
    20bc:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <volt+0x3>
    20c0:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <velocity>
    20c4:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <velocity+0x1>
    20c8:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <velocity+0x2>
    20cc:	10 92 d3 20 	sts	0x20D3, r1	; 0x8020d3 <velocity+0x3>
    20d0:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <gps_t>
    20d4:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <gps_t+0x1>
    20d8:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <gps_t+0x2>
    20dc:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <gps_t+0x3>
    20e0:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <gps_lat>
    20e4:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <gps_lat+0x1>
    20e8:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <gps_lat+0x2>
    20ec:	10 92 cb 20 	sts	0x20CB, r1	; 0x8020cb <gps_lat+0x3>
    20f0:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <gps_long>
    20f4:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <gps_long+0x1>
    20f8:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <gps_long+0x2>
    20fc:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <gps_long+0x3>
    2100:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <gps_alt>
    2104:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <gps_alt+0x1>
    2108:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <gps_alt+0x2>
    210c:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <gps_alt+0x3>
    2110:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <gps_sats>
    2114:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <gps_sats+0x1>
    2118:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <pitch>
    211c:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <pitch+0x1>
    2120:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <pitch+0x2>
    2124:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <pitch+0x3>
    2128:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <roll>
    212c:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <roll+0x1>
    2130:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <roll+0x2>
    2134:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <roll+0x3>
    2138:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <rpm>
    213c:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <rpm+0x1>
    2140:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <rpm+0x2>
    2144:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <rpm+0x3>
    2148:	10 92 ae 20 	sts	0x20AE, r1	; 0x8020ae <__data_end>
    214c:	10 92 af 20 	sts	0x20AF, r1	; 0x8020af <__data_end+0x1>
    2150:	10 92 b0 20 	sts	0x20B0, r1	; 0x8020b0 <__data_end+0x2>
    2154:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <__data_end+0x3>
    2158:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <state>
    215c:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <released>
    2160:	82 de       	rcall	.-764    	; 0x1e66 <system_init>
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <reset_received>
    2168:	08 95       	ret

0000216a <xbee_command>:
    216a:	84 36       	cpi	r24, 0x64	; 100
    216c:	91 f0       	breq	.+36     	; 0x2192 <xbee_command+0x28>
    216e:	28 f4       	brcc	.+10     	; 0x217a <xbee_command+0x10>
    2170:	81 36       	cpi	r24, 0x61	; 97
    2172:	69 f0       	breq	.+26     	; 0x218e <xbee_command+0x24>
    2174:	83 36       	cpi	r24, 0x63	; 99
    2176:	49 f0       	breq	.+18     	; 0x218a <xbee_command+0x20>
    2178:	08 95       	ret
    217a:	85 36       	cpi	r24, 0x65	; 101
    217c:	21 f0       	breq	.+8      	; 0x2186 <xbee_command+0x1c>
    217e:	86 36       	cpi	r24, 0x66	; 102
    2180:	49 f4       	brne	.+18     	; 0x2194 <xbee_command+0x2a>
    2182:	7e cf       	rjmp	.-260    	; 0x2080 <reset>
    2184:	08 95       	ret
    2186:	df ca       	rjmp	.-2626   	; 0x1746 <cali_alt>
    2188:	08 95       	ret
    218a:	dd ca       	rjmp	.-2630   	; 0x1746 <cali_alt>
    218c:	08 95       	ret
    218e:	08 cb       	rjmp	.-2544   	; 0x17a0 <send_gps>
    2190:	08 95       	ret
    2192:	86 cb       	rjmp	.-2292   	; 0x18a0 <packet>
    2194:	08 95       	ret

00002196 <__vector_47>:

ISR(TCE0_OVF_vect){
    2196:	1f 92       	push	r1
    2198:	0f 92       	push	r0
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	0f 92       	push	r0
    219e:	11 24       	eor	r1, r1
    21a0:	08 b6       	in	r0, 0x38	; 56
    21a2:	0f 92       	push	r0
    21a4:	18 be       	out	0x38, r1	; 56
    21a6:	09 b6       	in	r0, 0x39	; 57
    21a8:	0f 92       	push	r0
    21aa:	19 be       	out	0x39, r1	; 57
    21ac:	0a b6       	in	r0, 0x3a	; 58
    21ae:	0f 92       	push	r0
    21b0:	1a be       	out	0x3a, r1	; 58
    21b2:	0b b6       	in	r0, 0x3b	; 59
    21b4:	0f 92       	push	r0
    21b6:	1b be       	out	0x3b, r1	; 59
    21b8:	2f 92       	push	r2
    21ba:	3f 92       	push	r3
    21bc:	4f 92       	push	r4
    21be:	5f 92       	push	r5
    21c0:	6f 92       	push	r6
    21c2:	7f 92       	push	r7
    21c4:	8f 92       	push	r8
    21c6:	9f 92       	push	r9
    21c8:	af 92       	push	r10
    21ca:	bf 92       	push	r11
    21cc:	cf 92       	push	r12
    21ce:	df 92       	push	r13
    21d0:	ef 92       	push	r14
    21d2:	ff 92       	push	r15
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	2f 93       	push	r18
    21da:	3f 93       	push	r19
    21dc:	4f 93       	push	r20
    21de:	5f 93       	push	r21
    21e0:	6f 93       	push	r22
    21e2:	7f 93       	push	r23
    21e4:	8f 93       	push	r24
    21e6:	9f 93       	push	r25
    21e8:	af 93       	push	r26
    21ea:	bf 93       	push	r27
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	ef 93       	push	r30
    21f2:	ff 93       	push	r31
	timer++;
    21f4:	00 91 e8 20 	lds	r16, 0x20E8	; 0x8020e8 <timer>
    21f8:	10 91 e9 20 	lds	r17, 0x20E9	; 0x8020e9 <timer+0x1>
    21fc:	0f 5f       	subi	r16, 0xFF	; 255
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	00 93 e8 20 	sts	0x20E8, r16	; 0x8020e8 <timer>
    2204:	10 93 e9 20 	sts	0x20E9, r17	; 0x8020e9 <timer+0x1>
	packets++;
    2208:	c0 91 e4 20 	lds	r28, 0x20E4	; 0x8020e4 <packets>
    220c:	d0 91 e5 20 	lds	r29, 0x20E5	; 0x8020e5 <packets+0x1>
    2210:	21 96       	adiw	r28, 0x01	; 1
    2212:	c0 93 e4 20 	sts	0x20E4, r28	; 0x8020e4 <packets>
    2216:	d0 93 e5 20 	sts	0x20E5, r29	; 0x8020e5 <packets+0x1>
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    221a:	60 91 c0 20 	lds	r22, 0x20C0	; 0x8020c0 <gps_alt>
    221e:	70 91 c1 20 	lds	r23, 0x20C1	; 0x8020c1 <gps_alt+0x1>
    2222:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <gps_alt+0x2>
    2226:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <gps_alt+0x3>
    222a:	71 d5       	rcall	.+2786   	; 0x2d0e <__fixsfsi>
    222c:	36 2e       	mov	r3, r22
    222e:	27 2e       	mov	r2, r23
	timer++;
	packets++;
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2230:	40 90 c4 20 	lds	r4, 0x20C4	; 0x8020c4 <gps_long>
    2234:	50 90 c5 20 	lds	r5, 0x20C5	; 0x8020c5 <gps_long+0x1>
    2238:	60 90 c6 20 	lds	r6, 0x20C6	; 0x8020c6 <gps_long+0x2>
    223c:	70 90 c7 20 	lds	r7, 0x20C7	; 0x8020c7 <gps_long+0x3>
    2240:	80 90 c8 20 	lds	r8, 0x20C8	; 0x8020c8 <gps_lat>
    2244:	90 90 c9 20 	lds	r9, 0x20C9	; 0x8020c9 <gps_lat+0x1>
    2248:	a0 90 ca 20 	lds	r10, 0x20CA	; 0x8020ca <gps_lat+0x2>
    224c:	b0 90 cb 20 	lds	r11, 0x20CB	; 0x8020cb <gps_lat+0x3>
ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    2250:	60 91 cc 20 	lds	r22, 0x20CC	; 0x8020cc <gps_t>
    2254:	70 91 cd 20 	lds	r23, 0x20CD	; 0x8020cd <gps_t+0x1>
    2258:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <gps_t+0x2>
    225c:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <gps_t+0x3>
    2260:	56 d5       	rcall	.+2732   	; 0x2d0e <__fixsfsi>
    2262:	6b 01       	movw	r12, r22
    2264:	7c 01       	movw	r14, r24
}

ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer,packets,
    2266:	60 91 ae 20 	lds	r22, 0x20AE	; 0x8020ae <__data_end>
    226a:	70 91 af 20 	lds	r23, 0x20AF	; 0x8020af <__data_end+0x1>
    226e:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <__data_end+0x2>
    2272:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <__data_end+0x3>
    2276:	4b d5       	rcall	.+2710   	; 0x2d0e <__fixsfsi>
    2278:	7f 93       	push	r23
    227a:	6f 93       	push	r22
    227c:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <state>
    2280:	1f 92       	push	r1
    2282:	8f 93       	push	r24
    2284:	60 91 b2 20 	lds	r22, 0x20B2	; 0x8020b2 <rpm>
    2288:	70 91 b3 20 	lds	r23, 0x20B3	; 0x8020b3 <rpm+0x1>
    228c:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <rpm+0x2>
    2290:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <rpm+0x3>
    2294:	3c d5       	rcall	.+2680   	; 0x2d0e <__fixsfsi>
    2296:	7f 93       	push	r23
    2298:	6f 93       	push	r22
    229a:	60 91 b6 20 	lds	r22, 0x20B6	; 0x8020b6 <roll>
    229e:	70 91 b7 20 	lds	r23, 0x20B7	; 0x8020b7 <roll+0x1>
    22a2:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <roll+0x2>
    22a6:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <roll+0x3>
    22aa:	31 d5       	rcall	.+2658   	; 0x2d0e <__fixsfsi>
    22ac:	7f 93       	push	r23
    22ae:	6f 93       	push	r22
    22b0:	60 91 ba 20 	lds	r22, 0x20BA	; 0x8020ba <pitch>
    22b4:	70 91 bb 20 	lds	r23, 0x20BB	; 0x8020bb <pitch+0x1>
    22b8:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <pitch+0x2>
    22bc:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <pitch+0x3>
    22c0:	26 d5       	rcall	.+2636   	; 0x2d0e <__fixsfsi>
    22c2:	7f 93       	push	r23
    22c4:	6f 93       	push	r22
    22c6:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <gps_sats+0x1>
    22ca:	8f 93       	push	r24
    22cc:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <gps_sats>
    22d0:	8f 93       	push	r24
    22d2:	83 2d       	mov	r24, r3
    22d4:	92 2d       	mov	r25, r2
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	9c 01       	movw	r18, r24
    22dc:	22 0f       	add	r18, r18
    22de:	33 1f       	adc	r19, r19
    22e0:	22 0f       	add	r18, r18
    22e2:	33 1f       	adc	r19, r19
    22e4:	82 0f       	add	r24, r18
    22e6:	93 1f       	adc	r25, r19
    22e8:	6a e0       	ldi	r22, 0x0A	; 10
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	f2 d7       	rcall	.+4068   	; 0x32d2 <__divmodhi4>
    22ee:	9f 93       	push	r25
    22f0:	8f 93       	push	r24
    22f2:	2f 92       	push	r2
    22f4:	3f 92       	push	r3
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	34 e2       	ldi	r19, 0x24	; 36
    22fa:	44 e7       	ldi	r20, 0x74	; 116
    22fc:	59 e4       	ldi	r21, 0x49	; 73
    22fe:	c3 01       	movw	r24, r6
    2300:	b2 01       	movw	r22, r4
    2302:	28 d6       	rcall	.+3152   	; 0x2f54 <__mulsf3>
    2304:	04 d5       	rcall	.+2568   	; 0x2d0e <__fixsfsi>
    2306:	20 e4       	ldi	r18, 0x40	; 64
    2308:	32 e4       	ldi	r19, 0x42	; 66
    230a:	4f e0       	ldi	r20, 0x0F	; 15
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	0e 94 9e 19 	call	0x333c	; 0x333c <__divmodsi4>
    2312:	9b 01       	movw	r18, r22
    2314:	77 23       	and	r23, r23
    2316:	24 f4       	brge	.+8      	; 0x2320 <__vector_47+0x18a>
    2318:	22 27       	eor	r18, r18
    231a:	33 27       	eor	r19, r19
    231c:	26 1b       	sub	r18, r22
    231e:	37 0b       	sbc	r19, r23
    2320:	c9 01       	movw	r24, r18
    2322:	33 0f       	add	r19, r19
    2324:	aa 0b       	sbc	r26, r26
    2326:	bb 0b       	sbc	r27, r27
    2328:	bf 93       	push	r27
    232a:	af 93       	push	r26
    232c:	9f 93       	push	r25
    232e:	8f 93       	push	r24
    2330:	c3 01       	movw	r24, r6
    2332:	b2 01       	movw	r22, r4
    2334:	ec d4       	rcall	.+2520   	; 0x2d0e <__fixsfsi>
    2336:	7f 93       	push	r23
    2338:	6f 93       	push	r22
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	34 e2       	ldi	r19, 0x24	; 36
    233e:	44 e7       	ldi	r20, 0x74	; 116
    2340:	59 e4       	ldi	r21, 0x49	; 73
    2342:	c5 01       	movw	r24, r10
    2344:	b4 01       	movw	r22, r8
    2346:	06 d6       	rcall	.+3084   	; 0x2f54 <__mulsf3>
    2348:	e2 d4       	rcall	.+2500   	; 0x2d0e <__fixsfsi>
    234a:	20 e4       	ldi	r18, 0x40	; 64
    234c:	32 e4       	ldi	r19, 0x42	; 66
    234e:	4f e0       	ldi	r20, 0x0F	; 15
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	f4 d7       	rcall	.+4072   	; 0x333c <__divmodsi4>
    2354:	9f 93       	push	r25
    2356:	8f 93       	push	r24
    2358:	7f 93       	push	r23
    235a:	6f 93       	push	r22
    235c:	c5 01       	movw	r24, r10
    235e:	b4 01       	movw	r22, r8
    2360:	d6 d4       	rcall	.+2476   	; 0x2d0e <__fixsfsi>
    2362:	7f 93       	push	r23
    2364:	6f 93       	push	r22
    2366:	0f 2e       	mov	r0, r31
    2368:	f4 e6       	ldi	r31, 0x64	; 100
    236a:	8f 2e       	mov	r8, r31
    236c:	91 2c       	mov	r9, r1
    236e:	a1 2c       	mov	r10, r1
    2370:	b1 2c       	mov	r11, r1
    2372:	f0 2d       	mov	r31, r0
    2374:	c7 01       	movw	r24, r14
    2376:	b6 01       	movw	r22, r12
    2378:	a5 01       	movw	r20, r10
    237a:	94 01       	movw	r18, r8
    237c:	df d7       	rcall	.+4030   	; 0x333c <__divmodsi4>
    237e:	7f 93       	push	r23
    2380:	6f 93       	push	r22
    2382:	c7 01       	movw	r24, r14
    2384:	b6 01       	movw	r22, r12
    2386:	20 e1       	ldi	r18, 0x10	; 16
    2388:	37 e2       	ldi	r19, 0x27	; 39
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	d6 d7       	rcall	.+4012   	; 0x333c <__divmodsi4>
    2390:	f2 2e       	mov	r15, r18
    2392:	e3 2e       	mov	r14, r19
    2394:	a5 01       	movw	r20, r10
    2396:	94 01       	movw	r18, r8
    2398:	d1 d7       	rcall	.+4002   	; 0x333c <__divmodsi4>
    239a:	3f 93       	push	r19
    239c:	2f 93       	push	r18
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	60 91 d4 20 	lds	r22, 0x20D4	; 0x8020d4 <volt>
    23a6:	70 91 d5 20 	lds	r23, 0x20D5	; 0x8020d5 <volt+0x1>
    23aa:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <volt+0x2>
    23ae:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <volt+0x3>
    23b2:	ad d4       	rcall	.+2394   	; 0x2d0e <__fixsfsi>
    23b4:	7f 93       	push	r23
    23b6:	6f 93       	push	r22
    23b8:	23 e3       	ldi	r18, 0x33	; 51
    23ba:	33 e9       	ldi	r19, 0x93	; 147
    23bc:	48 e8       	ldi	r20, 0x88	; 136
    23be:	53 e4       	ldi	r21, 0x43	; 67
    23c0:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <temp>
    23c4:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <temp+0x1>
    23c8:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <temp+0x2>
    23cc:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <temp+0x3>
    23d0:	93 d3       	rcall	.+1830   	; 0x2af8 <__subsf3>
    23d2:	9d d4       	rcall	.+2362   	; 0x2d0e <__fixsfsi>
    23d4:	7f 93       	push	r23
    23d6:	6f 93       	push	r22
    23d8:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <press>
    23dc:	70 91 e1 20 	lds	r23, 0x20E1	; 0x8020e1 <press+0x1>
    23e0:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <press+0x2>
    23e4:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <press+0x3>
    23e8:	92 d4       	rcall	.+2340   	; 0x2d0e <__fixsfsi>
    23ea:	9f 93       	push	r25
    23ec:	8f 93       	push	r24
    23ee:	7f 93       	push	r23
    23f0:	6f 93       	push	r22
    23f2:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    23f6:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    23fa:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    23fe:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    2402:	85 d4       	rcall	.+2314   	; 0x2d0e <__fixsfsi>
    2404:	7f 93       	push	r23
    2406:	6f 93       	push	r22
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	1f 93       	push	r17
    240e:	0f 93       	push	r16
    2410:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    2414:	8f 93       	push	r24
    2416:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    241a:	8f 93       	push	r24
    241c:	ce e1       	ldi	r28, 0x1E	; 30
    241e:	d1 e2       	ldi	r29, 0x21	; 33
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    2428:	8d b7       	in	r24, 0x3d	; 61
    242a:	9e b7       	in	r25, 0x3e	; 62
    242c:	c4 96       	adiw	r24, 0x34	; 52
    242e:	8d bf       	out	0x3d, r24	; 61
    2430:	9e bf       	out	0x3e, r25	; 62
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	0e 94 41 1a 	call	0x3482	; 0x3482 <printf>
	
	// Updates EEPROM
	eeprom_write();
    243a:	ac dc       	rcall	.-1704   	; 0x1d94 <eeprom_write>
    243c:	0f 90       	pop	r0
	uint8_t byte0 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE0);
	uint8_t byte1 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE1);
	uint16_t a = (uint16_t) ((byte1<<8) | byte0);
	printf("%u\n", a);
	*/
}
    243e:	0f 90       	pop	r0
    2440:	ff 91       	pop	r31
    2442:	ef 91       	pop	r30
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	bf 91       	pop	r27
    244a:	af 91       	pop	r26
    244c:	9f 91       	pop	r25
    244e:	8f 91       	pop	r24
    2450:	7f 91       	pop	r23
    2452:	6f 91       	pop	r22
    2454:	5f 91       	pop	r21
    2456:	4f 91       	pop	r20
    2458:	3f 91       	pop	r19
    245a:	2f 91       	pop	r18
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	ff 90       	pop	r15
    2462:	ef 90       	pop	r14
    2464:	df 90       	pop	r13
    2466:	cf 90       	pop	r12
    2468:	bf 90       	pop	r11
    246a:	af 90       	pop	r10
    246c:	9f 90       	pop	r9
    246e:	8f 90       	pop	r8
    2470:	7f 90       	pop	r7
    2472:	6f 90       	pop	r6
    2474:	5f 90       	pop	r5
    2476:	4f 90       	pop	r4
    2478:	3f 90       	pop	r3
    247a:	2f 90       	pop	r2
    247c:	0f 90       	pop	r0
    247e:	0b be       	out	0x3b, r0	; 59
    2480:	0f 90       	pop	r0
    2482:	0a be       	out	0x3a, r0	; 58
    2484:	0f 90       	pop	r0
    2486:	09 be       	out	0x39, r0	; 57
    2488:	0f 90       	pop	r0
    248a:	08 be       	out	0x38, r0	; 56
    248c:	0f 90       	pop	r0
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	0f 90       	pop	r0
    2492:	1f 90       	pop	r1
    2494:	18 95       	reti

00002496 <__vector_58>:
    2496:	1f 92       	push	r1

ISR(USARTE0_RXC_vect){
    2498:	0f 92       	push	r0
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	0f 92       	push	r0
    249e:	11 24       	eor	r1, r1
    24a0:	08 b6       	in	r0, 0x38	; 56
    24a2:	0f 92       	push	r0
    24a4:	18 be       	out	0x38, r1	; 56
    24a6:	09 b6       	in	r0, 0x39	; 57
    24a8:	0f 92       	push	r0
    24aa:	19 be       	out	0x39, r1	; 57
    24ac:	0b b6       	in	r0, 0x3b	; 59
    24ae:	0f 92       	push	r0
    24b0:	1b be       	out	0x3b, r1	; 59
    24b2:	2f 93       	push	r18
    24b4:	3f 93       	push	r19
    24b6:	4f 93       	push	r20
    24b8:	5f 93       	push	r21
    24ba:	6f 93       	push	r22
    24bc:	7f 93       	push	r23
    24be:	8f 93       	push	r24
    24c0:	9f 93       	push	r25
    24c2:	af 93       	push	r26
    24c4:	bf 93       	push	r27
    24c6:	ef 93       	push	r30
    24c8:	ff 93       	push	r31
	uint8_t c = usart_getchar(UART_TERMINAL_SERIAL);
    24ca:	80 ea       	ldi	r24, 0xA0	; 160
    24cc:	9a e0       	ldi	r25, 0x0A	; 10
    24ce:	0e 94 93 02 	call	0x526	; 0x526 <usart_getchar>
	//printf("%c\n", c);
	xbee_command(c);
    24d2:	4b de       	rcall	.-874    	; 0x216a <xbee_command>
}
    24d4:	ff 91       	pop	r31
    24d6:	ef 91       	pop	r30
    24d8:	bf 91       	pop	r27
    24da:	af 91       	pop	r26
    24dc:	9f 91       	pop	r25
    24de:	8f 91       	pop	r24
    24e0:	7f 91       	pop	r23
    24e2:	6f 91       	pop	r22
    24e4:	5f 91       	pop	r21
    24e6:	4f 91       	pop	r20
    24e8:	3f 91       	pop	r19
    24ea:	2f 91       	pop	r18
    24ec:	0f 90       	pop	r0
    24ee:	0b be       	out	0x3b, r0	; 59
    24f0:	0f 90       	pop	r0
    24f2:	09 be       	out	0x39, r0	; 57
    24f4:	0f 90       	pop	r0
    24f6:	08 be       	out	0x38, r0	; 56
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	0f 90       	pop	r0
    24fe:	1f 90       	pop	r1
    2500:	18 95       	reti

00002502 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    2502:	1f 92       	push	r1
    2504:	0f 92       	push	r0
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	0f 92       	push	r0
    250a:	11 24       	eor	r1, r1
    250c:	08 b6       	in	r0, 0x38	; 56
    250e:	0f 92       	push	r0
    2510:	18 be       	out	0x38, r1	; 56
    2512:	09 b6       	in	r0, 0x39	; 57
    2514:	0f 92       	push	r0
    2516:	19 be       	out	0x39, r1	; 57
    2518:	0a b6       	in	r0, 0x3a	; 58
    251a:	0f 92       	push	r0
    251c:	1a be       	out	0x3a, r1	; 58
    251e:	0b b6       	in	r0, 0x3b	; 59
    2520:	0f 92       	push	r0
    2522:	1b be       	out	0x3b, r1	; 59
    2524:	8f 92       	push	r8
    2526:	9f 92       	push	r9
    2528:	af 92       	push	r10
    252a:	bf 92       	push	r11
    252c:	cf 92       	push	r12
    252e:	df 92       	push	r13
    2530:	ef 92       	push	r14
    2532:	ff 92       	push	r15
    2534:	1f 93       	push	r17
    2536:	2f 93       	push	r18
    2538:	3f 93       	push	r19
    253a:	4f 93       	push	r20
    253c:	5f 93       	push	r21
    253e:	6f 93       	push	r22
    2540:	7f 93       	push	r23
    2542:	8f 93       	push	r24
    2544:	9f 93       	push	r25
    2546:	af 93       	push	r26
    2548:	bf 93       	push	r27
    254a:	ef 93       	push	r30
    254c:	ff 93       	push	r31
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	00 d0       	rcall	.+0      	; 0x2554 <__vector_91+0x52>
    2554:	00 d0       	rcall	.+0      	; 0x2556 <__vector_91+0x54>
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    255a:	80 eb       	ldi	r24, 0xB0	; 176
    255c:	99 e0       	ldi	r25, 0x09	; 9
    255e:	0e 94 93 02 	call	0x526	; 0x526 <usart_getchar>
    2562:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    2564:	84 32       	cpi	r24, 0x24	; 36
    2566:	49 f4       	brne	.+18     	; 0x257a <__vector_91+0x78>
		writing = 1;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <writing>
		pos = 0;
		word_pos = 0;
    256e:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <word_pos>
		commas = 0;
    2572:	10 92 eb 20 	sts	0x20EB, r1	; 0x8020eb <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	68 c2       	rjmp	.+1232   	; 0x2a4a <__vector_91+0x548>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    257a:	8a 32       	cpi	r24, 0x2A	; 42
    257c:	29 f4       	brne	.+10     	; 0x2588 <__vector_91+0x86>
		commas = 0;
    257e:	10 92 eb 20 	sts	0x20EB, r1	; 0x8020eb <commas>
		writing = 0;
    2582:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <writing>
    2586:	91 c2       	rjmp	.+1314   	; 0x2aaa <__vector_91+0x5a8>
	}
	else if(c == (uint8_t) ','){
    2588:	8c 32       	cpi	r24, 0x2C	; 44
    258a:	09 f0       	breq	.+2      	; 0x258e <__vector_91+0x8c>
    258c:	49 c2       	rjmp	.+1170   	; 0x2a20 <__vector_91+0x51e>
		gps[0] = 32;
    258e:	ea e0       	ldi	r30, 0x0A	; 10
    2590:	f1 e2       	ldi	r31, 0x21	; 33
    2592:	80 e2       	ldi	r24, 0x20	; 32
    2594:	80 83       	st	Z, r24
		if(gps[1] == 32){
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	80 32       	cpi	r24, 0x20	; 32
    259a:	09 f0       	breq	.+2      	; 0x259e <__vector_91+0x9c>
    259c:	6d c2       	rjmp	.+1242   	; 0x2a78 <__vector_91+0x576>
			gps[0] = '0';
    259e:	80 e3       	ldi	r24, 0x30	; 48
    25a0:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <gps>
    25a4:	69 c2       	rjmp	.+1234   	; 0x2a78 <__vector_91+0x576>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    25a6:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <gps>
    25aa:	8e 32       	cpi	r24, 0x2E	; 46
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <__vector_91+0xae>
    25ae:	9e c1       	rjmp	.+828    	; 0x28ec <__vector_91+0x3ea>
    25b0:	a4 c1       	rjmp	.+840    	; 0x28fa <__vector_91+0x3f8>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    25b2:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <gps>
    25b6:	8e 32       	cpi	r24, 0x2E	; 46
    25b8:	09 f0       	breq	.+2      	; 0x25bc <__vector_91+0xba>
    25ba:	ec c0       	rjmp	.+472    	; 0x2794 <__vector_91+0x292>
    25bc:	f2 c0       	rjmp	.+484    	; 0x27a2 <__vector_91+0x2a0>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    25be:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <gps>
    25c2:	8e 32       	cpi	r24, 0x2E	; 46
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <__vector_91+0xc6>
    25c6:	51 c0       	rjmp	.+162    	; 0x266a <__vector_91+0x168>
    25c8:	57 c0       	rjmp	.+174    	; 0x2678 <__vector_91+0x176>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    25ca:	91 91       	ld	r25, Z+
    25cc:	9e 32       	cpi	r25, 0x2E	; 46
    25ce:	29 f4       	brne	.+10     	; 0x25da <__vector_91+0xd8>
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <__vector_91+0xd2>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    25d4:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						break;
    25d8:	03 c0       	rjmp	.+6      	; 0x25e0 <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	8f 30       	cpi	r24, 0x0F	; 15
    25de:	a9 f7       	brne	.-22     	; 0x25ca <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    25e0:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
    25e4:	e2 2f       	mov	r30, r18
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	e6 5f       	subi	r30, 0xF6	; 246
    25ea:	fe 4d       	sbci	r31, 0xDE	; 222
    25ec:	80 e2       	ldi	r24, 0x20	; 32
    25ee:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    25f0:	2f 5f       	subi	r18, 0xFF	; 255
    25f2:	2f 30       	cpi	r18, 0x0F	; 15
    25f4:	c8 f4       	brcc	.+50     	; 0x2628 <__vector_91+0x126>
					if(gps[i] == 32){
    25f6:	82 2f       	mov	r24, r18
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	fc 01       	movw	r30, r24
    25fc:	e6 5f       	subi	r30, 0xF6	; 246
    25fe:	fe 4d       	sbci	r31, 0xDE	; 222
    2600:	30 81       	ld	r19, Z
    2602:	30 32       	cpi	r19, 0x20	; 32
    2604:	89 f0       	breq	.+34     	; 0x2628 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2606:	40 e2       	ldi	r20, 0x20	; 32
    2608:	08 c0       	rjmp	.+16     	; 0x261a <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    260a:	82 2f       	mov	r24, r18
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	fc 01       	movw	r30, r24
    2610:	e6 5f       	subi	r30, 0xF6	; 246
    2612:	fe 4d       	sbci	r31, 0xDE	; 222
    2614:	30 81       	ld	r19, Z
    2616:	30 32       	cpi	r19, 0x20	; 32
    2618:	39 f0       	breq	.+14     	; 0x2628 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    261a:	fc 01       	movw	r30, r24
    261c:	e6 5f       	subi	r30, 0xF6	; 246
    261e:	fe 4d       	sbci	r31, 0xDE	; 222
    2620:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2622:	2f 5f       	subi	r18, 0xFF	; 255
    2624:	2f 30       	cpi	r18, 0x0F	; 15
    2626:	89 f7       	brne	.-30     	; 0x260a <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    2628:	ce 01       	movw	r24, r28
    262a:	01 96       	adiw	r24, 0x01	; 1
    262c:	9f 93       	push	r25
    262e:	8f 93       	push	r24
    2630:	86 ea       	ldi	r24, 0xA6	; 166
    2632:	90 e2       	ldi	r25, 0x20	; 32
    2634:	9f 93       	push	r25
    2636:	8f 93       	push	r24
    2638:	8a e0       	ldi	r24, 0x0A	; 10
    263a:	91 e2       	ldi	r25, 0x21	; 33
    263c:	9f 93       	push	r25
    263e:	8f 93       	push	r24
    2640:	5b d7       	rcall	.+3766   	; 0x34f8 <sscanf>
				gps_t = (double) val;
    2642:	69 81       	ldd	r22, Y+1	; 0x01
    2644:	7a 81       	ldd	r23, Y+2	; 0x02
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	94 d3       	rcall	.+1832   	; 0x2d74 <__floatsisf>
    264c:	60 93 cc 20 	sts	0x20CC, r22	; 0x8020cc <gps_t>
    2650:	70 93 cd 20 	sts	0x20CD, r23	; 0x8020cd <gps_t+0x1>
    2654:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <gps_t+0x2>
    2658:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <gps_t+0x3>
				break;
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	bd c1       	rjmp	.+890    	; 0x29e4 <__vector_91+0x4e2>
    266a:	eb e0       	ldi	r30, 0x0B	; 11
    266c:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    266e:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2670:	91 91       	ld	r25, Z+
    2672:	9e 32       	cpi	r25, 0x2E	; 46
    2674:	29 f4       	brne	.+10     	; 0x2680 <__vector_91+0x17e>
    2676:	01 c0       	rjmp	.+2      	; 0x267a <__vector_91+0x178>
    2678:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    267a:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						break;
    267e:	03 c0       	rjmp	.+6      	; 0x2686 <__vector_91+0x184>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2680:	8f 5f       	subi	r24, 0xFF	; 255
    2682:	8f 30       	cpi	r24, 0x0F	; 15
    2684:	a9 f7       	brne	.-22     	; 0x2670 <__vector_91+0x16e>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2686:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
    268a:	42 2f       	mov	r20, r18
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	fa 01       	movw	r30, r20
    2690:	e6 5f       	subi	r30, 0xF6	; 246
    2692:	fe 4d       	sbci	r31, 0xDE	; 222
    2694:	80 e2       	ldi	r24, 0x20	; 32
    2696:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2698:	2f 5f       	subi	r18, 0xFF	; 255
    269a:	2f 30       	cpi	r18, 0x0F	; 15
    269c:	f8 f4       	brcc	.+62     	; 0x26dc <__vector_91+0x1da>
					if(gps[i] == 32){
    269e:	82 2f       	mov	r24, r18
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	fc 01       	movw	r30, r24
    26a4:	e6 5f       	subi	r30, 0xF6	; 246
    26a6:	fe 4d       	sbci	r31, 0xDE	; 222
    26a8:	30 81       	ld	r19, Z
    26aa:	30 32       	cpi	r19, 0x20	; 32
    26ac:	b9 f0       	breq	.+46     	; 0x26dc <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    26ae:	60 e2       	ldi	r22, 0x20	; 32
    26b0:	08 c0       	rjmp	.+16     	; 0x26c2 <__vector_91+0x1c0>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    26b2:	82 2f       	mov	r24, r18
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	fc 01       	movw	r30, r24
    26b8:	e6 5f       	subi	r30, 0xF6	; 246
    26ba:	fe 4d       	sbci	r31, 0xDE	; 222
    26bc:	30 81       	ld	r19, Z
    26be:	30 32       	cpi	r19, 0x20	; 32
    26c0:	69 f0       	breq	.+26     	; 0x26dc <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
    26c2:	fc 01       	movw	r30, r24
    26c4:	e4 1b       	sub	r30, r20
    26c6:	f5 0b       	sbc	r31, r21
    26c8:	e8 5e       	subi	r30, 0xE8	; 232
    26ca:	fe 4d       	sbci	r31, 0xDE	; 222
    26cc:	30 83       	st	Z, r19
					gps[i] = 32;
    26ce:	fc 01       	movw	r30, r24
    26d0:	e6 5f       	subi	r30, 0xF6	; 246
    26d2:	fe 4d       	sbci	r31, 0xDE	; 222
    26d4:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    26d6:	2f 5f       	subi	r18, 0xFF	; 255
    26d8:	2f 30       	cpi	r18, 0x0F	; 15
    26da:	59 f7       	brne	.-42     	; 0x26b2 <__vector_91+0x1b0>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    26dc:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <dec>
    26e0:	80 32       	cpi	r24, 0x20	; 32
    26e2:	19 f4       	brne	.+6      	; 0x26ea <__vector_91+0x1e8>
					dec[0] = '0';
    26e4:	80 e3       	ldi	r24, 0x30	; 48
    26e6:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <dec>
				}
				sscanf(gps,"%ld",&val);
    26ea:	ce 01       	movw	r24, r28
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	9f 93       	push	r25
    26f0:	8f 93       	push	r24
    26f2:	86 ea       	ldi	r24, 0xA6	; 166
    26f4:	90 e2       	ldi	r25, 0x20	; 32
    26f6:	9f 93       	push	r25
    26f8:	8f 93       	push	r24
    26fa:	8a e0       	ldi	r24, 0x0A	; 10
    26fc:	91 e2       	ldi	r25, 0x21	; 33
    26fe:	9f 93       	push	r25
    2700:	8f 93       	push	r24
    2702:	fa d6       	rcall	.+3572   	; 0x34f8 <sscanf>
				sscanf(dec,"%d",&val2);
    2704:	ce 01       	movw	r24, r28
    2706:	05 96       	adiw	r24, 0x05	; 5
    2708:	9f 93       	push	r25
    270a:	8f 93       	push	r24
    270c:	8a ea       	ldi	r24, 0xAA	; 170
    270e:	90 e2       	ldi	r25, 0x20	; 32
    2710:	9f 93       	push	r25
    2712:	8f 93       	push	r24
    2714:	89 e1       	ldi	r24, 0x19	; 25
    2716:	91 e2       	ldi	r25, 0x21	; 33
    2718:	9f 93       	push	r25
    271a:	8f 93       	push	r24
    271c:	ed d6       	rcall	.+3546   	; 0x34f8 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    271e:	89 80       	ldd	r8, Y+1	; 0x01
    2720:	9a 80       	ldd	r9, Y+2	; 0x02
    2722:	ab 80       	ldd	r10, Y+3	; 0x03
    2724:	bc 80       	ldd	r11, Y+4	; 0x04
    2726:	6d 81       	ldd	r22, Y+5	; 0x05
    2728:	7e 81       	ldd	r23, Y+6	; 0x06
    272a:	07 2e       	mov	r0, r23
    272c:	00 0c       	add	r0, r0
    272e:	88 0b       	sbc	r24, r24
    2730:	99 0b       	sbc	r25, r25
    2732:	20 d3       	rcall	.+1600   	; 0x2d74 <__floatsisf>
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e4       	ldi	r19, 0x40	; 64
    2738:	4c e1       	ldi	r20, 0x1C	; 28
    273a:	56 e4       	ldi	r21, 0x46	; 70
    273c:	46 d2       	rcall	.+1164   	; 0x2bca <__divsf3>
    273e:	6b 01       	movw	r12, r22
    2740:	7c 01       	movw	r14, r24
    2742:	c5 01       	movw	r24, r10
    2744:	b4 01       	movw	r22, r8
    2746:	24 e6       	ldi	r18, 0x64	; 100
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	f6 d5       	rcall	.+3052   	; 0x333c <__divmodsi4>
    2750:	49 01       	movw	r8, r18
    2752:	5a 01       	movw	r10, r20
    2754:	0f d3       	rcall	.+1566   	; 0x2d74 <__floatsisf>
    2756:	9b 01       	movw	r18, r22
    2758:	ac 01       	movw	r20, r24
    275a:	c7 01       	movw	r24, r14
    275c:	b6 01       	movw	r22, r12
    275e:	cd d1       	rcall	.+922    	; 0x2afa <__addsf3>
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e7       	ldi	r20, 0x70	; 112
    2766:	52 e4       	ldi	r21, 0x42	; 66
    2768:	30 d2       	rcall	.+1120   	; 0x2bca <__divsf3>
    276a:	6b 01       	movw	r12, r22
    276c:	7c 01       	movw	r14, r24
    276e:	c5 01       	movw	r24, r10
    2770:	b4 01       	movw	r22, r8
    2772:	00 d3       	rcall	.+1536   	; 0x2d74 <__floatsisf>
    2774:	9b 01       	movw	r18, r22
    2776:	ac 01       	movw	r20, r24
    2778:	c7 01       	movw	r24, r14
    277a:	b6 01       	movw	r22, r12
    277c:	be d1       	rcall	.+892    	; 0x2afa <__addsf3>
    277e:	60 93 c8 20 	sts	0x20C8, r22	; 0x8020c8 <gps_lat>
    2782:	70 93 c9 20 	sts	0x20C9, r23	; 0x8020c9 <gps_lat+0x1>
    2786:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <gps_lat+0x2>
    278a:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <gps_lat+0x3>
				break;
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	28 c1       	rjmp	.+592    	; 0x29e4 <__vector_91+0x4e2>
    2794:	eb e0       	ldi	r30, 0x0B	; 11
    2796:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2798:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    279a:	91 91       	ld	r25, Z+
    279c:	9e 32       	cpi	r25, 0x2E	; 46
    279e:	29 f4       	brne	.+10     	; 0x27aa <__vector_91+0x2a8>
    27a0:	01 c0       	rjmp	.+2      	; 0x27a4 <__vector_91+0x2a2>
    27a2:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    27a4:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						break;
    27a8:	03 c0       	rjmp	.+6      	; 0x27b0 <__vector_91+0x2ae>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    27aa:	8f 5f       	subi	r24, 0xFF	; 255
    27ac:	8f 30       	cpi	r24, 0x0F	; 15
    27ae:	a9 f7       	brne	.-22     	; 0x279a <__vector_91+0x298>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    27b0:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
    27b4:	42 2f       	mov	r20, r18
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	fa 01       	movw	r30, r20
    27ba:	e6 5f       	subi	r30, 0xF6	; 246
    27bc:	fe 4d       	sbci	r31, 0xDE	; 222
    27be:	80 e2       	ldi	r24, 0x20	; 32
    27c0:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    27c2:	2f 5f       	subi	r18, 0xFF	; 255
    27c4:	2f 30       	cpi	r18, 0x0F	; 15
    27c6:	f8 f4       	brcc	.+62     	; 0x2806 <__vector_91+0x304>
					if(gps[i] == 32){
    27c8:	82 2f       	mov	r24, r18
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	fc 01       	movw	r30, r24
    27ce:	e6 5f       	subi	r30, 0xF6	; 246
    27d0:	fe 4d       	sbci	r31, 0xDE	; 222
    27d2:	30 81       	ld	r19, Z
    27d4:	30 32       	cpi	r19, 0x20	; 32
    27d6:	b9 f0       	breq	.+46     	; 0x2806 <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    27d8:	60 e2       	ldi	r22, 0x20	; 32
    27da:	08 c0       	rjmp	.+16     	; 0x27ec <__vector_91+0x2ea>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    27dc:	82 2f       	mov	r24, r18
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	fc 01       	movw	r30, r24
    27e2:	e6 5f       	subi	r30, 0xF6	; 246
    27e4:	fe 4d       	sbci	r31, 0xDE	; 222
    27e6:	30 81       	ld	r19, Z
    27e8:	30 32       	cpi	r19, 0x20	; 32
    27ea:	69 f0       	breq	.+26     	; 0x2806 <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
    27ec:	fc 01       	movw	r30, r24
    27ee:	e4 1b       	sub	r30, r20
    27f0:	f5 0b       	sbc	r31, r21
    27f2:	e8 5e       	subi	r30, 0xE8	; 232
    27f4:	fe 4d       	sbci	r31, 0xDE	; 222
    27f6:	30 83       	st	Z, r19
					gps[i] = 32;
    27f8:	fc 01       	movw	r30, r24
    27fa:	e6 5f       	subi	r30, 0xF6	; 246
    27fc:	fe 4d       	sbci	r31, 0xDE	; 222
    27fe:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2800:	2f 5f       	subi	r18, 0xFF	; 255
    2802:	2f 30       	cpi	r18, 0x0F	; 15
    2804:	59 f7       	brne	.-42     	; 0x27dc <__vector_91+0x2da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2806:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <dec>
    280a:	80 32       	cpi	r24, 0x20	; 32
    280c:	19 f4       	brne	.+6      	; 0x2814 <__vector_91+0x312>
					dec[0] = '0';
    280e:	80 e3       	ldi	r24, 0x30	; 48
    2810:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <dec>
				}
				sscanf(gps,"%ld",&val);
    2814:	ce 01       	movw	r24, r28
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	9f 93       	push	r25
    281a:	8f 93       	push	r24
    281c:	86 ea       	ldi	r24, 0xA6	; 166
    281e:	90 e2       	ldi	r25, 0x20	; 32
    2820:	9f 93       	push	r25
    2822:	8f 93       	push	r24
    2824:	8a e0       	ldi	r24, 0x0A	; 10
    2826:	91 e2       	ldi	r25, 0x21	; 33
    2828:	9f 93       	push	r25
    282a:	8f 93       	push	r24
    282c:	65 d6       	rcall	.+3274   	; 0x34f8 <sscanf>
				sscanf(dec,"%d",&val2);
    282e:	ce 01       	movw	r24, r28
    2830:	05 96       	adiw	r24, 0x05	; 5
    2832:	9f 93       	push	r25
    2834:	8f 93       	push	r24
    2836:	8a ea       	ldi	r24, 0xAA	; 170
    2838:	90 e2       	ldi	r25, 0x20	; 32
    283a:	9f 93       	push	r25
    283c:	8f 93       	push	r24
    283e:	89 e1       	ldi	r24, 0x19	; 25
    2840:	91 e2       	ldi	r25, 0x21	; 33
    2842:	9f 93       	push	r25
    2844:	8f 93       	push	r24
    2846:	58 d6       	rcall	.+3248   	; 0x34f8 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    2848:	89 80       	ldd	r8, Y+1	; 0x01
    284a:	9a 80       	ldd	r9, Y+2	; 0x02
    284c:	ab 80       	ldd	r10, Y+3	; 0x03
    284e:	bc 80       	ldd	r11, Y+4	; 0x04
    2850:	6d 81       	ldd	r22, Y+5	; 0x05
    2852:	7e 81       	ldd	r23, Y+6	; 0x06
    2854:	07 2e       	mov	r0, r23
    2856:	00 0c       	add	r0, r0
    2858:	88 0b       	sbc	r24, r24
    285a:	99 0b       	sbc	r25, r25
    285c:	8b d2       	rcall	.+1302   	; 0x2d74 <__floatsisf>
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e4       	ldi	r19, 0x40	; 64
    2862:	4c e1       	ldi	r20, 0x1C	; 28
    2864:	56 e4       	ldi	r21, 0x46	; 70
    2866:	b1 d1       	rcall	.+866    	; 0x2bca <__divsf3>
    2868:	6b 01       	movw	r12, r22
    286a:	7c 01       	movw	r14, r24
    286c:	c5 01       	movw	r24, r10
    286e:	b4 01       	movw	r22, r8
    2870:	24 e6       	ldi	r18, 0x64	; 100
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e0       	ldi	r20, 0x00	; 0
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	61 d5       	rcall	.+2754   	; 0x333c <__divmodsi4>
    287a:	49 01       	movw	r8, r18
    287c:	5a 01       	movw	r10, r20
    287e:	7a d2       	rcall	.+1268   	; 0x2d74 <__floatsisf>
    2880:	9b 01       	movw	r18, r22
    2882:	ac 01       	movw	r20, r24
    2884:	c7 01       	movw	r24, r14
    2886:	b6 01       	movw	r22, r12
    2888:	38 d1       	rcall	.+624    	; 0x2afa <__addsf3>
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e7       	ldi	r20, 0x70	; 112
    2890:	52 e4       	ldi	r21, 0x42	; 66
    2892:	9b d1       	rcall	.+822    	; 0x2bca <__divsf3>
    2894:	6b 01       	movw	r12, r22
    2896:	7c 01       	movw	r14, r24
    2898:	c5 01       	movw	r24, r10
    289a:	b4 01       	movw	r22, r8
    289c:	6b d2       	rcall	.+1238   	; 0x2d74 <__floatsisf>
    289e:	9b 01       	movw	r18, r22
    28a0:	ac 01       	movw	r20, r24
    28a2:	c7 01       	movw	r24, r14
    28a4:	b6 01       	movw	r22, r12
    28a6:	29 d1       	rcall	.+594    	; 0x2afa <__addsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	b0 58       	subi	r27, 0x80	; 128
    28ae:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <gps_long>
    28b2:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <gps_long+0x1>
    28b6:	a0 93 c6 20 	sts	0x20C6, r26	; 0x8020c6 <gps_long+0x2>
    28ba:	b0 93 c7 20 	sts	0x20C7, r27	; 0x8020c7 <gps_long+0x3>
    28be:	cd bf       	out	0x3d, r28	; 61
				break;
    28c0:	de bf       	out	0x3e, r29	; 62
    28c2:	90 c0       	rjmp	.+288    	; 0x29e4 <__vector_91+0x4e2>
    28c4:	8e eb       	ldi	r24, 0xBE	; 190
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    28c6:	90 e2       	ldi	r25, 0x20	; 32
    28c8:	9f 93       	push	r25
    28ca:	8f 93       	push	r24
    28cc:	8a ea       	ldi	r24, 0xAA	; 170
    28ce:	90 e2       	ldi	r25, 0x20	; 32
    28d0:	9f 93       	push	r25
    28d2:	8f 93       	push	r24
    28d4:	8a e0       	ldi	r24, 0x0A	; 10
    28d6:	91 e2       	ldi	r25, 0x21	; 33
    28d8:	9f 93       	push	r25
    28da:	8f 93       	push	r24
    28dc:	0d d6       	rcall	.+3098   	; 0x34f8 <sscanf>
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
				break;
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	7c c0       	rjmp	.+248    	; 0x29e4 <__vector_91+0x4e2>
    28ec:	eb e0       	ldi	r30, 0x0B	; 11
    28ee:	f1 e2       	ldi	r31, 0x21	; 33
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    28f4:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    28f6:	29 f4       	brne	.+10     	; 0x2902 <__vector_91+0x400>
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <__vector_91+0x3fa>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						idx = i;
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <__vector_91+0x406>
    2902:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    2904:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2906:	a9 f7       	brne	.-22     	; 0x28f2 <__vector_91+0x3f0>
    2908:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    290c:	42 2f       	mov	r20, r18
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	fa 01       	movw	r30, r20
    2912:	e6 5f       	subi	r30, 0xF6	; 246
    2914:	fe 4d       	sbci	r31, 0xDE	; 222
    2916:	80 e2       	ldi	r24, 0x20	; 32
    2918:	80 83       	st	Z, r24
    291a:	2f 5f       	subi	r18, 0xFF	; 255
    291c:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    291e:	f8 f4       	brcc	.+62     	; 0x295e <__vector_91+0x45c>
    2920:	82 2f       	mov	r24, r18
    2922:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    2924:	fc 01       	movw	r30, r24
    2926:	e6 5f       	subi	r30, 0xF6	; 246
    2928:	fe 4d       	sbci	r31, 0xDE	; 222
    292a:	30 81       	ld	r19, Z
    292c:	30 32       	cpi	r19, 0x20	; 32
    292e:	b9 f0       	breq	.+46     	; 0x295e <__vector_91+0x45c>
    2930:	60 e2       	ldi	r22, 0x20	; 32
    2932:	08 c0       	rjmp	.+16     	; 0x2944 <__vector_91+0x442>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2934:	82 2f       	mov	r24, r18
    2936:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2938:	fc 01       	movw	r30, r24
    293a:	e6 5f       	subi	r30, 0xF6	; 246
    293c:	fe 4d       	sbci	r31, 0xDE	; 222
    293e:	30 81       	ld	r19, Z
    2940:	30 32       	cpi	r19, 0x20	; 32
    2942:	69 f0       	breq	.+26     	; 0x295e <__vector_91+0x45c>
    2944:	fc 01       	movw	r30, r24
    2946:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    2948:	f5 0b       	sbc	r31, r21
    294a:	e8 5e       	subi	r30, 0xE8	; 232
    294c:	fe 4d       	sbci	r31, 0xDE	; 222
    294e:	30 83       	st	Z, r19
    2950:	fc 01       	movw	r30, r24
    2952:	e6 5f       	subi	r30, 0xF6	; 246
					gps[i] = 32;
    2954:	fe 4d       	sbci	r31, 0xDE	; 222
    2956:	60 83       	st	Z, r22
    2958:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    295a:	2f 30       	cpi	r18, 0x0F	; 15
    295c:	59 f7       	brne	.-42     	; 0x2934 <__vector_91+0x432>
    295e:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2962:	80 32       	cpi	r24, 0x20	; 32
    2964:	19 f4       	brne	.+6      	; 0x296c <__vector_91+0x46a>
    2966:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    2968:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <dec>
    296c:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	9f 93       	push	r25
    2972:	8f 93       	push	r24
    2974:	86 ea       	ldi	r24, 0xA6	; 166
    2976:	90 e2       	ldi	r25, 0x20	; 32
    2978:	9f 93       	push	r25
    297a:	8f 93       	push	r24
    297c:	8a e0       	ldi	r24, 0x0A	; 10
    297e:	91 e2       	ldi	r25, 0x21	; 33
    2980:	9f 93       	push	r25
    2982:	8f 93       	push	r24
    2984:	b9 d5       	rcall	.+2930   	; 0x34f8 <sscanf>
				sscanf(dec,"%d",&val2);
    2986:	ce 01       	movw	r24, r28
    2988:	05 96       	adiw	r24, 0x05	; 5
    298a:	9f 93       	push	r25
    298c:	8f 93       	push	r24
    298e:	8a ea       	ldi	r24, 0xAA	; 170
    2990:	90 e2       	ldi	r25, 0x20	; 32
    2992:	9f 93       	push	r25
    2994:	8f 93       	push	r24
    2996:	89 e1       	ldi	r24, 0x19	; 25
    2998:	91 e2       	ldi	r25, 0x21	; 33
    299a:	9f 93       	push	r25
    299c:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    299e:	ac d5       	rcall	.+2904   	; 0x34f8 <sscanf>
    29a0:	69 81       	ldd	r22, Y+1	; 0x01
    29a2:	7a 81       	ldd	r23, Y+2	; 0x02
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	e5 d1       	rcall	.+970    	; 0x2d74 <__floatsisf>
    29aa:	6b 01       	movw	r12, r22
    29ac:	7c 01       	movw	r14, r24
    29ae:	6d 81       	ldd	r22, Y+5	; 0x05
    29b0:	7e 81       	ldd	r23, Y+6	; 0x06
    29b2:	07 2e       	mov	r0, r23
    29b4:	00 0c       	add	r0, r0
    29b6:	88 0b       	sbc	r24, r24
    29b8:	99 0b       	sbc	r25, r25
    29ba:	dc d1       	rcall	.+952    	; 0x2d74 <__floatsisf>
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e2       	ldi	r20, 0x20	; 32
    29c2:	51 e4       	ldi	r21, 0x41	; 65
    29c4:	02 d1       	rcall	.+516    	; 0x2bca <__divsf3>
    29c6:	9b 01       	movw	r18, r22
    29c8:	ac 01       	movw	r20, r24
    29ca:	c7 01       	movw	r24, r14
    29cc:	b6 01       	movw	r22, r12
    29ce:	95 d0       	rcall	.+298    	; 0x2afa <__addsf3>
    29d0:	60 93 c0 20 	sts	0x20C0, r22	; 0x8020c0 <gps_alt>
    29d4:	70 93 c1 20 	sts	0x20C1, r23	; 0x8020c1 <gps_alt+0x1>
    29d8:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <gps_alt+0x2>
    29dc:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <gps_alt+0x3>
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <writing>
				break;
    29e8:	88 23       	and	r24, r24
		}
	
		if(writing){
    29ea:	d1 f0       	breq	.+52     	; 0x2a20 <__vector_91+0x51e>
    29ec:	10 92 ea 20 	sts	0x20EA, r1	; 0x8020ea <idx>
    29f0:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <commas>
			idx = 0;
    29f4:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    29f6:	80 93 eb 20 	sts	0x20EB, r24	; 0x8020eb <commas>
    29fa:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <word_pos>
    29fe:	ea e0       	ldi	r30, 0x0A	; 10
			word_pos = 0;
    2a00:	f1 e2       	ldi	r31, 0x21	; 33
    2a02:	29 e1       	ldi	r18, 0x19	; 25
    2a04:	31 e2       	ldi	r19, 0x21	; 33
    2a06:	80 e2       	ldi	r24, 0x20	; 32
    2a08:	81 93       	st	Z+, r24
    2a0a:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2a0c:	3f 07       	cpc	r19, r31
    2a0e:	e1 f7       	brne	.-8      	; 0x2a08 <__vector_91+0x506>
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2a10:	e9 e1       	ldi	r30, 0x19	; 25
    2a12:	f1 e2       	ldi	r31, 0x21	; 33
    2a14:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2a16:	80 83       	st	Z, r24
    2a18:	81 83       	std	Z+1, r24	; 0x01
    2a1a:	82 83       	std	Z+2, r24	; 0x02
    2a1c:	83 83       	std	Z+3, r24	; 0x03
    2a1e:	84 83       	std	Z+4, r24	; 0x04
    2a20:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <writing>
    2a24:	88 23       	and	r24, r24
			}
		}
	}
		
	if(writing){
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <__vector_91+0x528>
    2a28:	40 c0       	rjmp	.+128    	; 0x2aaa <__vector_91+0x5a8>
    2a2a:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <pos>
    2a2e:	93 30       	cpi	r25, 0x03	; 3
		switch(pos){
    2a30:	19 f0       	breq	.+6      	; 0x2a38 <__vector_91+0x536>
    2a32:	94 30       	cpi	r25, 0x04	; 4
    2a34:	31 f0       	breq	.+12     	; 0x2a42 <__vector_91+0x540>
    2a36:	09 c0       	rjmp	.+18     	; 0x2a4a <__vector_91+0x548>
    2a38:	17 34       	cpi	r17, 0x47	; 71
    2a3a:	39 f0       	breq	.+14     	; 0x2a4a <__vector_91+0x548>
    2a3c:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <writing>
			case 3:
				if(c != 'G'){
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <__vector_91+0x548>
					writing = 0;
    2a42:	17 34       	cpi	r17, 0x47	; 71
    2a44:	11 f0       	breq	.+4      	; 0x2a4a <__vector_91+0x548>
    2a46:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <writing>
				}
				break;
				
			case 4:
				if(c != 'G'){
    2a4a:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <word_pos>
					writing = 0;
    2a4e:	e8 2f       	mov	r30, r24
				}
				break;
		}
		gps[word_pos] = c;
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	e6 5f       	subi	r30, 0xF6	; 246
    2a54:	fe 4d       	sbci	r31, 0xDE	; 222
    2a56:	10 83       	st	Z, r17
    2a58:	8f 5f       	subi	r24, 0xFF	; 255
    2a5a:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <word_pos>
		word_pos++;
    2a5e:	9f 5f       	subi	r25, 0xFF	; 255
    2a60:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <pos>
		pos++;
    2a64:	22 c0       	rjmp	.+68     	; 0x2aaa <__vector_91+0x5a8>
    2a66:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <gps>
	}
}
    2a6a:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <__vector_91+0x56e>
    2a6e:	b1 cd       	rjmp	.-1182   	; 0x25d2 <__vector_91+0xd0>
    2a70:	eb e0       	ldi	r30, 0x0B	; 11
    2a72:	f1 e2       	ldi	r31, 0x21	; 33
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	a9 cd       	rjmp	.-1198   	; 0x25ca <__vector_91+0xc8>
    2a78:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2a7a:	1a 82       	std	Y+2, r1	; 0x02
    2a7c:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    2a7e:	1c 82       	std	Y+4, r1	; 0x04
    2a80:	1d 82       	std	Y+5, r1	; 0x05
    2a82:	1e 82       	std	Y+6, r1	; 0x06
    2a84:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <commas>
		int16_t val2 = 0;
    2a88:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <__vector_91+0x58c>
    2a8c:	92 cd       	rjmp	.-1244   	; 0x25b2 <__vector_91+0xb0>
    2a8e:	30 f4       	brcc	.+12     	; 0x2a9c <__vector_91+0x59a>
    2a90:	81 30       	cpi	r24, 0x01	; 1
    2a92:	49 f3       	breq	.-46     	; 0x2a66 <__vector_91+0x564>
    2a94:	82 30       	cpi	r24, 0x02	; 2
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <__vector_91+0x598>
    2a98:	92 cd       	rjmp	.-1244   	; 0x25be <__vector_91+0xbc>
    2a9a:	a4 cf       	rjmp	.-184    	; 0x29e4 <__vector_91+0x4e2>
    2a9c:	87 30       	cpi	r24, 0x07	; 7
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <__vector_91+0x5a0>
    2aa0:	11 cf       	rjmp	.-478    	; 0x28c4 <__vector_91+0x3c2>
    2aa2:	89 30       	cpi	r24, 0x09	; 9
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <__vector_91+0x5a6>
    2aa6:	7f cd       	rjmp	.-1282   	; 0x25a6 <__vector_91+0xa4>
    2aa8:	9d cf       	rjmp	.-198    	; 0x29e4 <__vector_91+0x4e2>
    2aaa:	26 96       	adiw	r28, 0x06	; 6
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	ff 91       	pop	r31
    2ab6:	ef 91       	pop	r30
    2ab8:	bf 91       	pop	r27
    2aba:	af 91       	pop	r26
    2abc:	9f 91       	pop	r25
    2abe:	8f 91       	pop	r24
    2ac0:	7f 91       	pop	r23
    2ac2:	6f 91       	pop	r22
    2ac4:	5f 91       	pop	r21
    2ac6:	4f 91       	pop	r20
    2ac8:	3f 91       	pop	r19
    2aca:	2f 91       	pop	r18
    2acc:	1f 91       	pop	r17
    2ace:	ff 90       	pop	r15
    2ad0:	ef 90       	pop	r14
    2ad2:	df 90       	pop	r13
    2ad4:	cf 90       	pop	r12
    2ad6:	bf 90       	pop	r11
    2ad8:	af 90       	pop	r10
    2ada:	9f 90       	pop	r9
    2adc:	8f 90       	pop	r8
    2ade:	0f 90       	pop	r0
    2ae0:	0b be       	out	0x3b, r0	; 59
    2ae2:	0f 90       	pop	r0
    2ae4:	0a be       	out	0x3a, r0	; 58
    2ae6:	0f 90       	pop	r0
    2ae8:	09 be       	out	0x39, r0	; 57
    2aea:	0f 90       	pop	r0
    2aec:	08 be       	out	0x38, r0	; 56
    2aee:	0f 90       	pop	r0
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	0f 90       	pop	r0
    2af4:	1f 90       	pop	r1
    2af6:	18 95       	reti

00002af8 <__subsf3>:
    2af8:	50 58       	subi	r21, 0x80	; 128

00002afa <__addsf3>:
    2afa:	bb 27       	eor	r27, r27
    2afc:	aa 27       	eor	r26, r26
    2afe:	0e d0       	rcall	.+28     	; 0x2b1c <__addsf3x>
    2b00:	e4 c1       	rjmp	.+968    	; 0x2eca <__fp_round>
    2b02:	d5 d1       	rcall	.+938    	; 0x2eae <__fp_pscA>
    2b04:	30 f0       	brcs	.+12     	; 0x2b12 <__addsf3+0x18>
    2b06:	da d1       	rcall	.+948    	; 0x2ebc <__fp_pscB>
    2b08:	20 f0       	brcs	.+8      	; 0x2b12 <__addsf3+0x18>
    2b0a:	31 f4       	brne	.+12     	; 0x2b18 <__addsf3+0x1e>
    2b0c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b0e:	11 f4       	brne	.+4      	; 0x2b14 <__addsf3+0x1a>
    2b10:	1e f4       	brtc	.+6      	; 0x2b18 <__addsf3+0x1e>
    2b12:	95 c1       	rjmp	.+810    	; 0x2e3e <__fp_nan>
    2b14:	0e f4       	brtc	.+2      	; 0x2b18 <__addsf3+0x1e>
    2b16:	e0 95       	com	r30
    2b18:	e7 fb       	bst	r30, 7
    2b1a:	8b c1       	rjmp	.+790    	; 0x2e32 <__fp_inf>

00002b1c <__addsf3x>:
    2b1c:	e9 2f       	mov	r30, r25
    2b1e:	e6 d1       	rcall	.+972    	; 0x2eec <__fp_split3>
    2b20:	80 f3       	brcs	.-32     	; 0x2b02 <__addsf3+0x8>
    2b22:	ba 17       	cp	r27, r26
    2b24:	62 07       	cpc	r22, r18
    2b26:	73 07       	cpc	r23, r19
    2b28:	84 07       	cpc	r24, r20
    2b2a:	95 07       	cpc	r25, r21
    2b2c:	18 f0       	brcs	.+6      	; 0x2b34 <__addsf3x+0x18>
    2b2e:	71 f4       	brne	.+28     	; 0x2b4c <__addsf3x+0x30>
    2b30:	9e f5       	brtc	.+102    	; 0x2b98 <__addsf3x+0x7c>
    2b32:	fe c1       	rjmp	.+1020   	; 0x2f30 <__fp_zero>
    2b34:	0e f4       	brtc	.+2      	; 0x2b38 <__addsf3x+0x1c>
    2b36:	e0 95       	com	r30
    2b38:	0b 2e       	mov	r0, r27
    2b3a:	ba 2f       	mov	r27, r26
    2b3c:	a0 2d       	mov	r26, r0
    2b3e:	0b 01       	movw	r0, r22
    2b40:	b9 01       	movw	r22, r18
    2b42:	90 01       	movw	r18, r0
    2b44:	0c 01       	movw	r0, r24
    2b46:	ca 01       	movw	r24, r20
    2b48:	a0 01       	movw	r20, r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	ff 27       	eor	r31, r31
    2b4e:	59 1b       	sub	r21, r25
    2b50:	99 f0       	breq	.+38     	; 0x2b78 <__addsf3x+0x5c>
    2b52:	59 3f       	cpi	r21, 0xF9	; 249
    2b54:	50 f4       	brcc	.+20     	; 0x2b6a <__addsf3x+0x4e>
    2b56:	50 3e       	cpi	r21, 0xE0	; 224
    2b58:	68 f1       	brcs	.+90     	; 0x2bb4 <__addsf3x+0x98>
    2b5a:	1a 16       	cp	r1, r26
    2b5c:	f0 40       	sbci	r31, 0x00	; 0
    2b5e:	a2 2f       	mov	r26, r18
    2b60:	23 2f       	mov	r18, r19
    2b62:	34 2f       	mov	r19, r20
    2b64:	44 27       	eor	r20, r20
    2b66:	58 5f       	subi	r21, 0xF8	; 248
    2b68:	f3 cf       	rjmp	.-26     	; 0x2b50 <__addsf3x+0x34>
    2b6a:	46 95       	lsr	r20
    2b6c:	37 95       	ror	r19
    2b6e:	27 95       	ror	r18
    2b70:	a7 95       	ror	r26
    2b72:	f0 40       	sbci	r31, 0x00	; 0
    2b74:	53 95       	inc	r21
    2b76:	c9 f7       	brne	.-14     	; 0x2b6a <__addsf3x+0x4e>
    2b78:	7e f4       	brtc	.+30     	; 0x2b98 <__addsf3x+0x7c>
    2b7a:	1f 16       	cp	r1, r31
    2b7c:	ba 0b       	sbc	r27, r26
    2b7e:	62 0b       	sbc	r22, r18
    2b80:	73 0b       	sbc	r23, r19
    2b82:	84 0b       	sbc	r24, r20
    2b84:	ba f0       	brmi	.+46     	; 0x2bb4 <__addsf3x+0x98>
    2b86:	91 50       	subi	r25, 0x01	; 1
    2b88:	a1 f0       	breq	.+40     	; 0x2bb2 <__addsf3x+0x96>
    2b8a:	ff 0f       	add	r31, r31
    2b8c:	bb 1f       	adc	r27, r27
    2b8e:	66 1f       	adc	r22, r22
    2b90:	77 1f       	adc	r23, r23
    2b92:	88 1f       	adc	r24, r24
    2b94:	c2 f7       	brpl	.-16     	; 0x2b86 <__addsf3x+0x6a>
    2b96:	0e c0       	rjmp	.+28     	; 0x2bb4 <__addsf3x+0x98>
    2b98:	ba 0f       	add	r27, r26
    2b9a:	62 1f       	adc	r22, r18
    2b9c:	73 1f       	adc	r23, r19
    2b9e:	84 1f       	adc	r24, r20
    2ba0:	48 f4       	brcc	.+18     	; 0x2bb4 <__addsf3x+0x98>
    2ba2:	87 95       	ror	r24
    2ba4:	77 95       	ror	r23
    2ba6:	67 95       	ror	r22
    2ba8:	b7 95       	ror	r27
    2baa:	f7 95       	ror	r31
    2bac:	9e 3f       	cpi	r25, 0xFE	; 254
    2bae:	08 f0       	brcs	.+2      	; 0x2bb2 <__addsf3x+0x96>
    2bb0:	b3 cf       	rjmp	.-154    	; 0x2b18 <__addsf3+0x1e>
    2bb2:	93 95       	inc	r25
    2bb4:	88 0f       	add	r24, r24
    2bb6:	08 f0       	brcs	.+2      	; 0x2bba <__addsf3x+0x9e>
    2bb8:	99 27       	eor	r25, r25
    2bba:	ee 0f       	add	r30, r30
    2bbc:	97 95       	ror	r25
    2bbe:	87 95       	ror	r24
    2bc0:	08 95       	ret

00002bc2 <__cmpsf2>:
    2bc2:	13 d1       	rcall	.+550    	; 0x2dea <__fp_cmp>
    2bc4:	08 f4       	brcc	.+2      	; 0x2bc8 <__cmpsf2+0x6>
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	08 95       	ret

00002bca <__divsf3>:
    2bca:	0c d0       	rcall	.+24     	; 0x2be4 <__divsf3x>
    2bcc:	7e c1       	rjmp	.+764    	; 0x2eca <__fp_round>
    2bce:	76 d1       	rcall	.+748    	; 0x2ebc <__fp_pscB>
    2bd0:	40 f0       	brcs	.+16     	; 0x2be2 <__divsf3+0x18>
    2bd2:	6d d1       	rcall	.+730    	; 0x2eae <__fp_pscA>
    2bd4:	30 f0       	brcs	.+12     	; 0x2be2 <__divsf3+0x18>
    2bd6:	21 f4       	brne	.+8      	; 0x2be0 <__divsf3+0x16>
    2bd8:	5f 3f       	cpi	r21, 0xFF	; 255
    2bda:	19 f0       	breq	.+6      	; 0x2be2 <__divsf3+0x18>
    2bdc:	2a c1       	rjmp	.+596    	; 0x2e32 <__fp_inf>
    2bde:	51 11       	cpse	r21, r1
    2be0:	a8 c1       	rjmp	.+848    	; 0x2f32 <__fp_szero>
    2be2:	2d c1       	rjmp	.+602    	; 0x2e3e <__fp_nan>

00002be4 <__divsf3x>:
    2be4:	83 d1       	rcall	.+774    	; 0x2eec <__fp_split3>
    2be6:	98 f3       	brcs	.-26     	; 0x2bce <__divsf3+0x4>

00002be8 <__divsf3_pse>:
    2be8:	99 23       	and	r25, r25
    2bea:	c9 f3       	breq	.-14     	; 0x2bde <__divsf3+0x14>
    2bec:	55 23       	and	r21, r21
    2bee:	b1 f3       	breq	.-20     	; 0x2bdc <__divsf3+0x12>
    2bf0:	95 1b       	sub	r25, r21
    2bf2:	55 0b       	sbc	r21, r21
    2bf4:	bb 27       	eor	r27, r27
    2bf6:	aa 27       	eor	r26, r26
    2bf8:	62 17       	cp	r22, r18
    2bfa:	73 07       	cpc	r23, r19
    2bfc:	84 07       	cpc	r24, r20
    2bfe:	38 f0       	brcs	.+14     	; 0x2c0e <__divsf3_pse+0x26>
    2c00:	9f 5f       	subi	r25, 0xFF	; 255
    2c02:	5f 4f       	sbci	r21, 0xFF	; 255
    2c04:	22 0f       	add	r18, r18
    2c06:	33 1f       	adc	r19, r19
    2c08:	44 1f       	adc	r20, r20
    2c0a:	aa 1f       	adc	r26, r26
    2c0c:	a9 f3       	breq	.-22     	; 0x2bf8 <__divsf3_pse+0x10>
    2c0e:	33 d0       	rcall	.+102    	; 0x2c76 <__divsf3_pse+0x8e>
    2c10:	0e 2e       	mov	r0, r30
    2c12:	3a f0       	brmi	.+14     	; 0x2c22 <__divsf3_pse+0x3a>
    2c14:	e0 e8       	ldi	r30, 0x80	; 128
    2c16:	30 d0       	rcall	.+96     	; 0x2c78 <__divsf3_pse+0x90>
    2c18:	91 50       	subi	r25, 0x01	; 1
    2c1a:	50 40       	sbci	r21, 0x00	; 0
    2c1c:	e6 95       	lsr	r30
    2c1e:	00 1c       	adc	r0, r0
    2c20:	ca f7       	brpl	.-14     	; 0x2c14 <__divsf3_pse+0x2c>
    2c22:	29 d0       	rcall	.+82     	; 0x2c76 <__divsf3_pse+0x8e>
    2c24:	fe 2f       	mov	r31, r30
    2c26:	27 d0       	rcall	.+78     	; 0x2c76 <__divsf3_pse+0x8e>
    2c28:	66 0f       	add	r22, r22
    2c2a:	77 1f       	adc	r23, r23
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	bb 1f       	adc	r27, r27
    2c30:	26 17       	cp	r18, r22
    2c32:	37 07       	cpc	r19, r23
    2c34:	48 07       	cpc	r20, r24
    2c36:	ab 07       	cpc	r26, r27
    2c38:	b0 e8       	ldi	r27, 0x80	; 128
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <__divsf3_pse+0x56>
    2c3c:	bb 0b       	sbc	r27, r27
    2c3e:	80 2d       	mov	r24, r0
    2c40:	bf 01       	movw	r22, r30
    2c42:	ff 27       	eor	r31, r31
    2c44:	93 58       	subi	r25, 0x83	; 131
    2c46:	5f 4f       	sbci	r21, 0xFF	; 255
    2c48:	2a f0       	brmi	.+10     	; 0x2c54 <__divsf3_pse+0x6c>
    2c4a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c4c:	51 05       	cpc	r21, r1
    2c4e:	68 f0       	brcs	.+26     	; 0x2c6a <__divsf3_pse+0x82>
    2c50:	f0 c0       	rjmp	.+480    	; 0x2e32 <__fp_inf>
    2c52:	6f c1       	rjmp	.+734    	; 0x2f32 <__fp_szero>
    2c54:	5f 3f       	cpi	r21, 0xFF	; 255
    2c56:	ec f3       	brlt	.-6      	; 0x2c52 <__divsf3_pse+0x6a>
    2c58:	98 3e       	cpi	r25, 0xE8	; 232
    2c5a:	dc f3       	brlt	.-10     	; 0x2c52 <__divsf3_pse+0x6a>
    2c5c:	86 95       	lsr	r24
    2c5e:	77 95       	ror	r23
    2c60:	67 95       	ror	r22
    2c62:	b7 95       	ror	r27
    2c64:	f7 95       	ror	r31
    2c66:	9f 5f       	subi	r25, 0xFF	; 255
    2c68:	c9 f7       	brne	.-14     	; 0x2c5c <__divsf3_pse+0x74>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	91 1d       	adc	r25, r1
    2c6e:	96 95       	lsr	r25
    2c70:	87 95       	ror	r24
    2c72:	97 f9       	bld	r25, 7
    2c74:	08 95       	ret
    2c76:	e1 e0       	ldi	r30, 0x01	; 1
    2c78:	66 0f       	add	r22, r22
    2c7a:	77 1f       	adc	r23, r23
    2c7c:	88 1f       	adc	r24, r24
    2c7e:	bb 1f       	adc	r27, r27
    2c80:	62 17       	cp	r22, r18
    2c82:	73 07       	cpc	r23, r19
    2c84:	84 07       	cpc	r24, r20
    2c86:	ba 07       	cpc	r27, r26
    2c88:	20 f0       	brcs	.+8      	; 0x2c92 <__divsf3_pse+0xaa>
    2c8a:	62 1b       	sub	r22, r18
    2c8c:	73 0b       	sbc	r23, r19
    2c8e:	84 0b       	sbc	r24, r20
    2c90:	ba 0b       	sbc	r27, r26
    2c92:	ee 1f       	adc	r30, r30
    2c94:	88 f7       	brcc	.-30     	; 0x2c78 <__divsf3_pse+0x90>
    2c96:	e0 95       	com	r30
    2c98:	08 95       	ret

00002c9a <__fixsfdi>:
    2c9a:	be e3       	ldi	r27, 0x3E	; 62
    2c9c:	04 d0       	rcall	.+8      	; 0x2ca6 <__fixunssfdi+0x2>
    2c9e:	08 f4       	brcc	.+2      	; 0x2ca2 <__fixsfdi+0x8>
    2ca0:	90 e8       	ldi	r25, 0x80	; 128
    2ca2:	08 95       	ret

00002ca4 <__fixunssfdi>:
    2ca4:	bf e3       	ldi	r27, 0x3F	; 63
    2ca6:	22 27       	eor	r18, r18
    2ca8:	33 27       	eor	r19, r19
    2caa:	a9 01       	movw	r20, r18
    2cac:	27 d1       	rcall	.+590    	; 0x2efc <__fp_splitA>
    2cae:	58 f1       	brcs	.+86     	; 0x2d06 <__fixunssfdi+0x62>
    2cb0:	9f 57       	subi	r25, 0x7F	; 127
    2cb2:	40 f1       	brcs	.+80     	; 0x2d04 <__fixunssfdi+0x60>
    2cb4:	b9 17       	cp	r27, r25
    2cb6:	38 f1       	brcs	.+78     	; 0x2d06 <__fixunssfdi+0x62>
    2cb8:	bf e3       	ldi	r27, 0x3F	; 63
    2cba:	b9 1b       	sub	r27, r25
    2cbc:	99 27       	eor	r25, r25
    2cbe:	b8 50       	subi	r27, 0x08	; 8
    2cc0:	3a f4       	brpl	.+14     	; 0x2cd0 <__fixunssfdi+0x2c>
    2cc2:	66 0f       	add	r22, r22
    2cc4:	77 1f       	adc	r23, r23
    2cc6:	88 1f       	adc	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	b3 95       	inc	r27
    2ccc:	d2 f3       	brmi	.-12     	; 0x2cc2 <__fixunssfdi+0x1e>
    2cce:	16 c0       	rjmp	.+44     	; 0x2cfc <__fixunssfdi+0x58>
    2cd0:	b8 50       	subi	r27, 0x08	; 8
    2cd2:	4a f0       	brmi	.+18     	; 0x2ce6 <__fixunssfdi+0x42>
    2cd4:	23 2f       	mov	r18, r19
    2cd6:	34 2f       	mov	r19, r20
    2cd8:	45 2f       	mov	r20, r21
    2cda:	56 2f       	mov	r21, r22
    2cdc:	67 2f       	mov	r22, r23
    2cde:	78 2f       	mov	r23, r24
    2ce0:	88 27       	eor	r24, r24
    2ce2:	b8 50       	subi	r27, 0x08	; 8
    2ce4:	ba f7       	brpl	.-18     	; 0x2cd4 <__fixunssfdi+0x30>
    2ce6:	b8 5f       	subi	r27, 0xF8	; 248
    2ce8:	49 f0       	breq	.+18     	; 0x2cfc <__fixunssfdi+0x58>
    2cea:	86 95       	lsr	r24
    2cec:	77 95       	ror	r23
    2cee:	67 95       	ror	r22
    2cf0:	57 95       	ror	r21
    2cf2:	47 95       	ror	r20
    2cf4:	37 95       	ror	r19
    2cf6:	27 95       	ror	r18
    2cf8:	ba 95       	dec	r27
    2cfa:	b9 f7       	brne	.-18     	; 0x2cea <__fixunssfdi+0x46>
    2cfc:	0e f4       	brtc	.+2      	; 0x2d00 <__fixunssfdi+0x5c>
    2cfe:	a2 d0       	rcall	.+324    	; 0x2e44 <__fp_negdi>
    2d00:	88 94       	clc
    2d02:	08 95       	ret
    2d04:	88 94       	clc
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	08 95       	ret

00002d0e <__fixsfsi>:
    2d0e:	04 d0       	rcall	.+8      	; 0x2d18 <__fixunssfsi>
    2d10:	68 94       	set
    2d12:	b1 11       	cpse	r27, r1
    2d14:	0e c1       	rjmp	.+540    	; 0x2f32 <__fp_szero>
    2d16:	08 95       	ret

00002d18 <__fixunssfsi>:
    2d18:	f1 d0       	rcall	.+482    	; 0x2efc <__fp_splitA>
    2d1a:	88 f0       	brcs	.+34     	; 0x2d3e <__fixunssfsi+0x26>
    2d1c:	9f 57       	subi	r25, 0x7F	; 127
    2d1e:	90 f0       	brcs	.+36     	; 0x2d44 <__fixunssfsi+0x2c>
    2d20:	b9 2f       	mov	r27, r25
    2d22:	99 27       	eor	r25, r25
    2d24:	b7 51       	subi	r27, 0x17	; 23
    2d26:	a0 f0       	brcs	.+40     	; 0x2d50 <__fixunssfsi+0x38>
    2d28:	d1 f0       	breq	.+52     	; 0x2d5e <__fixunssfsi+0x46>
    2d2a:	66 0f       	add	r22, r22
    2d2c:	77 1f       	adc	r23, r23
    2d2e:	88 1f       	adc	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	1a f0       	brmi	.+6      	; 0x2d3a <__fixunssfsi+0x22>
    2d34:	ba 95       	dec	r27
    2d36:	c9 f7       	brne	.-14     	; 0x2d2a <__fixunssfsi+0x12>
    2d38:	12 c0       	rjmp	.+36     	; 0x2d5e <__fixunssfsi+0x46>
    2d3a:	b1 30       	cpi	r27, 0x01	; 1
    2d3c:	81 f0       	breq	.+32     	; 0x2d5e <__fixunssfsi+0x46>
    2d3e:	f8 d0       	rcall	.+496    	; 0x2f30 <__fp_zero>
    2d40:	b1 e0       	ldi	r27, 0x01	; 1
    2d42:	08 95       	ret
    2d44:	f5 c0       	rjmp	.+490    	; 0x2f30 <__fp_zero>
    2d46:	67 2f       	mov	r22, r23
    2d48:	78 2f       	mov	r23, r24
    2d4a:	88 27       	eor	r24, r24
    2d4c:	b8 5f       	subi	r27, 0xF8	; 248
    2d4e:	39 f0       	breq	.+14     	; 0x2d5e <__fixunssfsi+0x46>
    2d50:	b9 3f       	cpi	r27, 0xF9	; 249
    2d52:	cc f3       	brlt	.-14     	; 0x2d46 <__fixunssfsi+0x2e>
    2d54:	86 95       	lsr	r24
    2d56:	77 95       	ror	r23
    2d58:	67 95       	ror	r22
    2d5a:	b3 95       	inc	r27
    2d5c:	d9 f7       	brne	.-10     	; 0x2d54 <__fixunssfsi+0x3c>
    2d5e:	3e f4       	brtc	.+14     	; 0x2d6e <__fixunssfsi+0x56>
    2d60:	90 95       	com	r25
    2d62:	80 95       	com	r24
    2d64:	70 95       	com	r23
    2d66:	61 95       	neg	r22
    2d68:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6e:	08 95       	ret

00002d70 <__floatunsisf>:
    2d70:	e8 94       	clt
    2d72:	09 c0       	rjmp	.+18     	; 0x2d86 <__floatsisf+0x12>

00002d74 <__floatsisf>:
    2d74:	97 fb       	bst	r25, 7
    2d76:	3e f4       	brtc	.+14     	; 0x2d86 <__floatsisf+0x12>
    2d78:	90 95       	com	r25
    2d7a:	80 95       	com	r24
    2d7c:	70 95       	com	r23
    2d7e:	61 95       	neg	r22
    2d80:	7f 4f       	sbci	r23, 0xFF	; 255
    2d82:	8f 4f       	sbci	r24, 0xFF	; 255
    2d84:	9f 4f       	sbci	r25, 0xFF	; 255
    2d86:	99 23       	and	r25, r25
    2d88:	a9 f0       	breq	.+42     	; 0x2db4 <__floatsisf+0x40>
    2d8a:	f9 2f       	mov	r31, r25
    2d8c:	96 e9       	ldi	r25, 0x96	; 150
    2d8e:	bb 27       	eor	r27, r27
    2d90:	93 95       	inc	r25
    2d92:	f6 95       	lsr	r31
    2d94:	87 95       	ror	r24
    2d96:	77 95       	ror	r23
    2d98:	67 95       	ror	r22
    2d9a:	b7 95       	ror	r27
    2d9c:	f1 11       	cpse	r31, r1
    2d9e:	f8 cf       	rjmp	.-16     	; 0x2d90 <__floatsisf+0x1c>
    2da0:	fa f4       	brpl	.+62     	; 0x2de0 <__floatsisf+0x6c>
    2da2:	bb 0f       	add	r27, r27
    2da4:	11 f4       	brne	.+4      	; 0x2daa <__floatsisf+0x36>
    2da6:	60 ff       	sbrs	r22, 0
    2da8:	1b c0       	rjmp	.+54     	; 0x2de0 <__floatsisf+0x6c>
    2daa:	6f 5f       	subi	r22, 0xFF	; 255
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	8f 4f       	sbci	r24, 0xFF	; 255
    2db0:	9f 4f       	sbci	r25, 0xFF	; 255
    2db2:	16 c0       	rjmp	.+44     	; 0x2de0 <__floatsisf+0x6c>
    2db4:	88 23       	and	r24, r24
    2db6:	11 f0       	breq	.+4      	; 0x2dbc <__floatsisf+0x48>
    2db8:	96 e9       	ldi	r25, 0x96	; 150
    2dba:	11 c0       	rjmp	.+34     	; 0x2dde <__floatsisf+0x6a>
    2dbc:	77 23       	and	r23, r23
    2dbe:	21 f0       	breq	.+8      	; 0x2dc8 <__floatsisf+0x54>
    2dc0:	9e e8       	ldi	r25, 0x8E	; 142
    2dc2:	87 2f       	mov	r24, r23
    2dc4:	76 2f       	mov	r23, r22
    2dc6:	05 c0       	rjmp	.+10     	; 0x2dd2 <__floatsisf+0x5e>
    2dc8:	66 23       	and	r22, r22
    2dca:	71 f0       	breq	.+28     	; 0x2de8 <__floatsisf+0x74>
    2dcc:	96 e8       	ldi	r25, 0x86	; 134
    2dce:	86 2f       	mov	r24, r22
    2dd0:	70 e0       	ldi	r23, 0x00	; 0
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	2a f0       	brmi	.+10     	; 0x2de0 <__floatsisf+0x6c>
    2dd6:	9a 95       	dec	r25
    2dd8:	66 0f       	add	r22, r22
    2dda:	77 1f       	adc	r23, r23
    2ddc:	88 1f       	adc	r24, r24
    2dde:	da f7       	brpl	.-10     	; 0x2dd6 <__floatsisf+0x62>
    2de0:	88 0f       	add	r24, r24
    2de2:	96 95       	lsr	r25
    2de4:	87 95       	ror	r24
    2de6:	97 f9       	bld	r25, 7
    2de8:	08 95       	ret

00002dea <__fp_cmp>:
    2dea:	99 0f       	add	r25, r25
    2dec:	00 08       	sbc	r0, r0
    2dee:	55 0f       	add	r21, r21
    2df0:	aa 0b       	sbc	r26, r26
    2df2:	e0 e8       	ldi	r30, 0x80	; 128
    2df4:	fe ef       	ldi	r31, 0xFE	; 254
    2df6:	16 16       	cp	r1, r22
    2df8:	17 06       	cpc	r1, r23
    2dfa:	e8 07       	cpc	r30, r24
    2dfc:	f9 07       	cpc	r31, r25
    2dfe:	c0 f0       	brcs	.+48     	; 0x2e30 <__fp_cmp+0x46>
    2e00:	12 16       	cp	r1, r18
    2e02:	13 06       	cpc	r1, r19
    2e04:	e4 07       	cpc	r30, r20
    2e06:	f5 07       	cpc	r31, r21
    2e08:	98 f0       	brcs	.+38     	; 0x2e30 <__fp_cmp+0x46>
    2e0a:	62 1b       	sub	r22, r18
    2e0c:	73 0b       	sbc	r23, r19
    2e0e:	84 0b       	sbc	r24, r20
    2e10:	95 0b       	sbc	r25, r21
    2e12:	39 f4       	brne	.+14     	; 0x2e22 <__fp_cmp+0x38>
    2e14:	0a 26       	eor	r0, r26
    2e16:	61 f0       	breq	.+24     	; 0x2e30 <__fp_cmp+0x46>
    2e18:	23 2b       	or	r18, r19
    2e1a:	24 2b       	or	r18, r20
    2e1c:	25 2b       	or	r18, r21
    2e1e:	21 f4       	brne	.+8      	; 0x2e28 <__fp_cmp+0x3e>
    2e20:	08 95       	ret
    2e22:	0a 26       	eor	r0, r26
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <__fp_cmp+0x3e>
    2e26:	a1 40       	sbci	r26, 0x01	; 1
    2e28:	a6 95       	lsr	r26
    2e2a:	8f ef       	ldi	r24, 0xFF	; 255
    2e2c:	81 1d       	adc	r24, r1
    2e2e:	81 1d       	adc	r24, r1
    2e30:	08 95       	ret

00002e32 <__fp_inf>:
    2e32:	97 f9       	bld	r25, 7
    2e34:	9f 67       	ori	r25, 0x7F	; 127
    2e36:	80 e8       	ldi	r24, 0x80	; 128
    2e38:	70 e0       	ldi	r23, 0x00	; 0
    2e3a:	60 e0       	ldi	r22, 0x00	; 0
    2e3c:	08 95       	ret

00002e3e <__fp_nan>:
    2e3e:	9f ef       	ldi	r25, 0xFF	; 255
    2e40:	80 ec       	ldi	r24, 0xC0	; 192
    2e42:	08 95       	ret

00002e44 <__fp_negdi>:
    2e44:	90 95       	com	r25
    2e46:	80 95       	com	r24
    2e48:	70 95       	com	r23
    2e4a:	60 95       	com	r22
    2e4c:	50 95       	com	r21
    2e4e:	40 95       	com	r20
    2e50:	30 95       	com	r19
    2e52:	21 95       	neg	r18
    2e54:	3f 4f       	sbci	r19, 0xFF	; 255
    2e56:	4f 4f       	sbci	r20, 0xFF	; 255
    2e58:	5f 4f       	sbci	r21, 0xFF	; 255
    2e5a:	6f 4f       	sbci	r22, 0xFF	; 255
    2e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e60:	9f 4f       	sbci	r25, 0xFF	; 255
    2e62:	08 95       	ret

00002e64 <__fp_powser>:
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	1f 93       	push	r17
    2e6a:	0f 93       	push	r16
    2e6c:	ff 92       	push	r15
    2e6e:	ef 92       	push	r14
    2e70:	df 92       	push	r13
    2e72:	7b 01       	movw	r14, r22
    2e74:	8c 01       	movw	r16, r24
    2e76:	68 94       	set
    2e78:	05 c0       	rjmp	.+10     	; 0x2e84 <__fp_powser+0x20>
    2e7a:	da 2e       	mov	r13, r26
    2e7c:	ef 01       	movw	r28, r30
    2e7e:	76 d0       	rcall	.+236    	; 0x2f6c <__mulsf3x>
    2e80:	fe 01       	movw	r30, r28
    2e82:	e8 94       	clt
    2e84:	a5 91       	lpm	r26, Z+
    2e86:	25 91       	lpm	r18, Z+
    2e88:	35 91       	lpm	r19, Z+
    2e8a:	45 91       	lpm	r20, Z+
    2e8c:	55 91       	lpm	r21, Z+
    2e8e:	ae f3       	brts	.-22     	; 0x2e7a <__fp_powser+0x16>
    2e90:	ef 01       	movw	r28, r30
    2e92:	44 de       	rcall	.-888    	; 0x2b1c <__addsf3x>
    2e94:	fe 01       	movw	r30, r28
    2e96:	97 01       	movw	r18, r14
    2e98:	a8 01       	movw	r20, r16
    2e9a:	da 94       	dec	r13
    2e9c:	79 f7       	brne	.-34     	; 0x2e7c <__fp_powser+0x18>
    2e9e:	df 90       	pop	r13
    2ea0:	ef 90       	pop	r14
    2ea2:	ff 90       	pop	r15
    2ea4:	0f 91       	pop	r16
    2ea6:	1f 91       	pop	r17
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <__fp_pscA>:
    2eae:	00 24       	eor	r0, r0
    2eb0:	0a 94       	dec	r0
    2eb2:	16 16       	cp	r1, r22
    2eb4:	17 06       	cpc	r1, r23
    2eb6:	18 06       	cpc	r1, r24
    2eb8:	09 06       	cpc	r0, r25
    2eba:	08 95       	ret

00002ebc <__fp_pscB>:
    2ebc:	00 24       	eor	r0, r0
    2ebe:	0a 94       	dec	r0
    2ec0:	12 16       	cp	r1, r18
    2ec2:	13 06       	cpc	r1, r19
    2ec4:	14 06       	cpc	r1, r20
    2ec6:	05 06       	cpc	r0, r21
    2ec8:	08 95       	ret

00002eca <__fp_round>:
    2eca:	09 2e       	mov	r0, r25
    2ecc:	03 94       	inc	r0
    2ece:	00 0c       	add	r0, r0
    2ed0:	11 f4       	brne	.+4      	; 0x2ed6 <__fp_round+0xc>
    2ed2:	88 23       	and	r24, r24
    2ed4:	52 f0       	brmi	.+20     	; 0x2eea <__fp_round+0x20>
    2ed6:	bb 0f       	add	r27, r27
    2ed8:	40 f4       	brcc	.+16     	; 0x2eea <__fp_round+0x20>
    2eda:	bf 2b       	or	r27, r31
    2edc:	11 f4       	brne	.+4      	; 0x2ee2 <__fp_round+0x18>
    2ede:	60 ff       	sbrs	r22, 0
    2ee0:	04 c0       	rjmp	.+8      	; 0x2eea <__fp_round+0x20>
    2ee2:	6f 5f       	subi	r22, 0xFF	; 255
    2ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eea:	08 95       	ret

00002eec <__fp_split3>:
    2eec:	57 fd       	sbrc	r21, 7
    2eee:	90 58       	subi	r25, 0x80	; 128
    2ef0:	44 0f       	add	r20, r20
    2ef2:	55 1f       	adc	r21, r21
    2ef4:	59 f0       	breq	.+22     	; 0x2f0c <__fp_splitA+0x10>
    2ef6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ef8:	71 f0       	breq	.+28     	; 0x2f16 <__fp_splitA+0x1a>
    2efa:	47 95       	ror	r20

00002efc <__fp_splitA>:
    2efc:	88 0f       	add	r24, r24
    2efe:	97 fb       	bst	r25, 7
    2f00:	99 1f       	adc	r25, r25
    2f02:	61 f0       	breq	.+24     	; 0x2f1c <__fp_splitA+0x20>
    2f04:	9f 3f       	cpi	r25, 0xFF	; 255
    2f06:	79 f0       	breq	.+30     	; 0x2f26 <__fp_splitA+0x2a>
    2f08:	87 95       	ror	r24
    2f0a:	08 95       	ret
    2f0c:	12 16       	cp	r1, r18
    2f0e:	13 06       	cpc	r1, r19
    2f10:	14 06       	cpc	r1, r20
    2f12:	55 1f       	adc	r21, r21
    2f14:	f2 cf       	rjmp	.-28     	; 0x2efa <__fp_split3+0xe>
    2f16:	46 95       	lsr	r20
    2f18:	f1 df       	rcall	.-30     	; 0x2efc <__fp_splitA>
    2f1a:	08 c0       	rjmp	.+16     	; 0x2f2c <__fp_splitA+0x30>
    2f1c:	16 16       	cp	r1, r22
    2f1e:	17 06       	cpc	r1, r23
    2f20:	18 06       	cpc	r1, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	f1 cf       	rjmp	.-30     	; 0x2f08 <__fp_splitA+0xc>
    2f26:	86 95       	lsr	r24
    2f28:	71 05       	cpc	r23, r1
    2f2a:	61 05       	cpc	r22, r1
    2f2c:	08 94       	sec
    2f2e:	08 95       	ret

00002f30 <__fp_zero>:
    2f30:	e8 94       	clt

00002f32 <__fp_szero>:
    2f32:	bb 27       	eor	r27, r27
    2f34:	66 27       	eor	r22, r22
    2f36:	77 27       	eor	r23, r23
    2f38:	cb 01       	movw	r24, r22
    2f3a:	97 f9       	bld	r25, 7
    2f3c:	08 95       	ret

00002f3e <__gesf2>:
    2f3e:	55 df       	rcall	.-342    	; 0x2dea <__fp_cmp>
    2f40:	08 f4       	brcc	.+2      	; 0x2f44 <__gesf2+0x6>
    2f42:	8f ef       	ldi	r24, 0xFF	; 255
    2f44:	08 95       	ret

00002f46 <inverse>:
    2f46:	9b 01       	movw	r18, r22
    2f48:	ac 01       	movw	r20, r24
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	80 e8       	ldi	r24, 0x80	; 128
    2f50:	9f e3       	ldi	r25, 0x3F	; 63
    2f52:	3b ce       	rjmp	.-906    	; 0x2bca <__divsf3>

00002f54 <__mulsf3>:
    2f54:	0b d0       	rcall	.+22     	; 0x2f6c <__mulsf3x>
    2f56:	b9 cf       	rjmp	.-142    	; 0x2eca <__fp_round>
    2f58:	aa df       	rcall	.-172    	; 0x2eae <__fp_pscA>
    2f5a:	28 f0       	brcs	.+10     	; 0x2f66 <__mulsf3+0x12>
    2f5c:	af df       	rcall	.-162    	; 0x2ebc <__fp_pscB>
    2f5e:	18 f0       	brcs	.+6      	; 0x2f66 <__mulsf3+0x12>
    2f60:	95 23       	and	r25, r21
    2f62:	09 f0       	breq	.+2      	; 0x2f66 <__mulsf3+0x12>
    2f64:	66 cf       	rjmp	.-308    	; 0x2e32 <__fp_inf>
    2f66:	6b cf       	rjmp	.-298    	; 0x2e3e <__fp_nan>
    2f68:	11 24       	eor	r1, r1
    2f6a:	e3 cf       	rjmp	.-58     	; 0x2f32 <__fp_szero>

00002f6c <__mulsf3x>:
    2f6c:	bf df       	rcall	.-130    	; 0x2eec <__fp_split3>
    2f6e:	a0 f3       	brcs	.-24     	; 0x2f58 <__mulsf3+0x4>

00002f70 <__mulsf3_pse>:
    2f70:	95 9f       	mul	r25, r21
    2f72:	d1 f3       	breq	.-12     	; 0x2f68 <__mulsf3+0x14>
    2f74:	95 0f       	add	r25, r21
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	55 1f       	adc	r21, r21
    2f7a:	62 9f       	mul	r22, r18
    2f7c:	f0 01       	movw	r30, r0
    2f7e:	72 9f       	mul	r23, r18
    2f80:	bb 27       	eor	r27, r27
    2f82:	f0 0d       	add	r31, r0
    2f84:	b1 1d       	adc	r27, r1
    2f86:	63 9f       	mul	r22, r19
    2f88:	aa 27       	eor	r26, r26
    2f8a:	f0 0d       	add	r31, r0
    2f8c:	b1 1d       	adc	r27, r1
    2f8e:	aa 1f       	adc	r26, r26
    2f90:	64 9f       	mul	r22, r20
    2f92:	66 27       	eor	r22, r22
    2f94:	b0 0d       	add	r27, r0
    2f96:	a1 1d       	adc	r26, r1
    2f98:	66 1f       	adc	r22, r22
    2f9a:	82 9f       	mul	r24, r18
    2f9c:	22 27       	eor	r18, r18
    2f9e:	b0 0d       	add	r27, r0
    2fa0:	a1 1d       	adc	r26, r1
    2fa2:	62 1f       	adc	r22, r18
    2fa4:	73 9f       	mul	r23, r19
    2fa6:	b0 0d       	add	r27, r0
    2fa8:	a1 1d       	adc	r26, r1
    2faa:	62 1f       	adc	r22, r18
    2fac:	83 9f       	mul	r24, r19
    2fae:	a0 0d       	add	r26, r0
    2fb0:	61 1d       	adc	r22, r1
    2fb2:	22 1f       	adc	r18, r18
    2fb4:	74 9f       	mul	r23, r20
    2fb6:	33 27       	eor	r19, r19
    2fb8:	a0 0d       	add	r26, r0
    2fba:	61 1d       	adc	r22, r1
    2fbc:	23 1f       	adc	r18, r19
    2fbe:	84 9f       	mul	r24, r20
    2fc0:	60 0d       	add	r22, r0
    2fc2:	21 1d       	adc	r18, r1
    2fc4:	82 2f       	mov	r24, r18
    2fc6:	76 2f       	mov	r23, r22
    2fc8:	6a 2f       	mov	r22, r26
    2fca:	11 24       	eor	r1, r1
    2fcc:	9f 57       	subi	r25, 0x7F	; 127
    2fce:	50 40       	sbci	r21, 0x00	; 0
    2fd0:	8a f0       	brmi	.+34     	; 0x2ff4 <__mulsf3_pse+0x84>
    2fd2:	e1 f0       	breq	.+56     	; 0x300c <__mulsf3_pse+0x9c>
    2fd4:	88 23       	and	r24, r24
    2fd6:	4a f0       	brmi	.+18     	; 0x2fea <__mulsf3_pse+0x7a>
    2fd8:	ee 0f       	add	r30, r30
    2fda:	ff 1f       	adc	r31, r31
    2fdc:	bb 1f       	adc	r27, r27
    2fde:	66 1f       	adc	r22, r22
    2fe0:	77 1f       	adc	r23, r23
    2fe2:	88 1f       	adc	r24, r24
    2fe4:	91 50       	subi	r25, 0x01	; 1
    2fe6:	50 40       	sbci	r21, 0x00	; 0
    2fe8:	a9 f7       	brne	.-22     	; 0x2fd4 <__mulsf3_pse+0x64>
    2fea:	9e 3f       	cpi	r25, 0xFE	; 254
    2fec:	51 05       	cpc	r21, r1
    2fee:	70 f0       	brcs	.+28     	; 0x300c <__mulsf3_pse+0x9c>
    2ff0:	20 cf       	rjmp	.-448    	; 0x2e32 <__fp_inf>
    2ff2:	9f cf       	rjmp	.-194    	; 0x2f32 <__fp_szero>
    2ff4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ff6:	ec f3       	brlt	.-6      	; 0x2ff2 <__mulsf3_pse+0x82>
    2ff8:	98 3e       	cpi	r25, 0xE8	; 232
    2ffa:	dc f3       	brlt	.-10     	; 0x2ff2 <__mulsf3_pse+0x82>
    2ffc:	86 95       	lsr	r24
    2ffe:	77 95       	ror	r23
    3000:	67 95       	ror	r22
    3002:	b7 95       	ror	r27
    3004:	f7 95       	ror	r31
    3006:	e7 95       	ror	r30
    3008:	9f 5f       	subi	r25, 0xFF	; 255
    300a:	c1 f7       	brne	.-16     	; 0x2ffc <__mulsf3_pse+0x8c>
    300c:	fe 2b       	or	r31, r30
    300e:	88 0f       	add	r24, r24
    3010:	91 1d       	adc	r25, r1
    3012:	96 95       	lsr	r25
    3014:	87 95       	ror	r24
    3016:	97 f9       	bld	r25, 7
    3018:	08 95       	ret

0000301a <pow>:
    301a:	fa 01       	movw	r30, r20
    301c:	ee 0f       	add	r30, r30
    301e:	ff 1f       	adc	r31, r31
    3020:	30 96       	adiw	r30, 0x00	; 0
    3022:	21 05       	cpc	r18, r1
    3024:	31 05       	cpc	r19, r1
    3026:	99 f1       	breq	.+102    	; 0x308e <pow+0x74>
    3028:	61 15       	cp	r22, r1
    302a:	71 05       	cpc	r23, r1
    302c:	61 f4       	brne	.+24     	; 0x3046 <pow+0x2c>
    302e:	80 38       	cpi	r24, 0x80	; 128
    3030:	bf e3       	ldi	r27, 0x3F	; 63
    3032:	9b 07       	cpc	r25, r27
    3034:	49 f1       	breq	.+82     	; 0x3088 <pow+0x6e>
    3036:	68 94       	set
    3038:	90 38       	cpi	r25, 0x80	; 128
    303a:	81 05       	cpc	r24, r1
    303c:	61 f0       	breq	.+24     	; 0x3056 <pow+0x3c>
    303e:	80 38       	cpi	r24, 0x80	; 128
    3040:	bf ef       	ldi	r27, 0xFF	; 255
    3042:	9b 07       	cpc	r25, r27
    3044:	41 f0       	breq	.+16     	; 0x3056 <pow+0x3c>
    3046:	99 23       	and	r25, r25
    3048:	42 f5       	brpl	.+80     	; 0x309a <pow+0x80>
    304a:	ff 3f       	cpi	r31, 0xFF	; 255
    304c:	e1 05       	cpc	r30, r1
    304e:	31 05       	cpc	r19, r1
    3050:	21 05       	cpc	r18, r1
    3052:	11 f1       	breq	.+68     	; 0x3098 <pow+0x7e>
    3054:	e8 94       	clt
    3056:	08 94       	sec
    3058:	e7 95       	ror	r30
    305a:	d9 01       	movw	r26, r18
    305c:	aa 23       	and	r26, r26
    305e:	29 f4       	brne	.+10     	; 0x306a <pow+0x50>
    3060:	ab 2f       	mov	r26, r27
    3062:	be 2f       	mov	r27, r30
    3064:	f8 5f       	subi	r31, 0xF8	; 248
    3066:	d0 f3       	brcs	.-12     	; 0x305c <pow+0x42>
    3068:	10 c0       	rjmp	.+32     	; 0x308a <pow+0x70>
    306a:	ff 5f       	subi	r31, 0xFF	; 255
    306c:	70 f4       	brcc	.+28     	; 0x308a <pow+0x70>
    306e:	a6 95       	lsr	r26
    3070:	e0 f7       	brcc	.-8      	; 0x306a <pow+0x50>
    3072:	f7 39       	cpi	r31, 0x97	; 151
    3074:	50 f0       	brcs	.+20     	; 0x308a <pow+0x70>
    3076:	19 f0       	breq	.+6      	; 0x307e <pow+0x64>
    3078:	ff 3a       	cpi	r31, 0xAF	; 175
    307a:	38 f4       	brcc	.+14     	; 0x308a <pow+0x70>
    307c:	9f 77       	andi	r25, 0x7F	; 127
    307e:	9f 93       	push	r25
    3080:	0c d0       	rcall	.+24     	; 0x309a <pow+0x80>
    3082:	0f 90       	pop	r0
    3084:	07 fc       	sbrc	r0, 7
    3086:	90 58       	subi	r25, 0x80	; 128
    3088:	08 95       	ret
    308a:	3e f0       	brts	.+14     	; 0x309a <pow+0x80>
    308c:	d8 ce       	rjmp	.-592    	; 0x2e3e <__fp_nan>
    308e:	60 e0       	ldi	r22, 0x00	; 0
    3090:	70 e0       	ldi	r23, 0x00	; 0
    3092:	80 e8       	ldi	r24, 0x80	; 128
    3094:	9f e3       	ldi	r25, 0x3F	; 63
    3096:	08 95       	ret
    3098:	4f e7       	ldi	r20, 0x7F	; 127
    309a:	9f 77       	andi	r25, 0x7F	; 127
    309c:	5f 93       	push	r21
    309e:	4f 93       	push	r20
    30a0:	3f 93       	push	r19
    30a2:	2f 93       	push	r18
    30a4:	80 d0       	rcall	.+256    	; 0x31a6 <log>
    30a6:	2f 91       	pop	r18
    30a8:	3f 91       	pop	r19
    30aa:	4f 91       	pop	r20
    30ac:	5f 91       	pop	r21
    30ae:	52 df       	rcall	.-348    	; 0x2f54 <__mulsf3>
    30b0:	05 c0       	rjmp	.+10     	; 0x30bc <exp>
    30b2:	19 f4       	brne	.+6      	; 0x30ba <pow+0xa0>
    30b4:	0e f0       	brts	.+2      	; 0x30b8 <pow+0x9e>
    30b6:	bd ce       	rjmp	.-646    	; 0x2e32 <__fp_inf>
    30b8:	3b cf       	rjmp	.-394    	; 0x2f30 <__fp_zero>
    30ba:	c1 ce       	rjmp	.-638    	; 0x2e3e <__fp_nan>

000030bc <exp>:
    30bc:	1f df       	rcall	.-450    	; 0x2efc <__fp_splitA>
    30be:	c8 f3       	brcs	.-14     	; 0x30b2 <pow+0x98>
    30c0:	96 38       	cpi	r25, 0x86	; 134
    30c2:	c0 f7       	brcc	.-16     	; 0x30b4 <pow+0x9a>
    30c4:	07 f8       	bld	r0, 7
    30c6:	0f 92       	push	r0
    30c8:	e8 94       	clt
    30ca:	2b e3       	ldi	r18, 0x3B	; 59
    30cc:	3a ea       	ldi	r19, 0xAA	; 170
    30ce:	48 eb       	ldi	r20, 0xB8	; 184
    30d0:	5f e7       	ldi	r21, 0x7F	; 127
    30d2:	4e df       	rcall	.-356    	; 0x2f70 <__mulsf3_pse>
    30d4:	0f 92       	push	r0
    30d6:	0f 92       	push	r0
    30d8:	0f 92       	push	r0
    30da:	4d b7       	in	r20, 0x3d	; 61
    30dc:	5e b7       	in	r21, 0x3e	; 62
    30de:	0f 92       	push	r0
    30e0:	a2 d0       	rcall	.+324    	; 0x3226 <modf>
    30e2:	ec ef       	ldi	r30, 0xFC	; 252
    30e4:	f1 e0       	ldi	r31, 0x01	; 1
    30e6:	be de       	rcall	.-644    	; 0x2e64 <__fp_powser>
    30e8:	4f 91       	pop	r20
    30ea:	5f 91       	pop	r21
    30ec:	ef 91       	pop	r30
    30ee:	ff 91       	pop	r31
    30f0:	e5 95       	asr	r30
    30f2:	ee 1f       	adc	r30, r30
    30f4:	ff 1f       	adc	r31, r31
    30f6:	49 f0       	breq	.+18     	; 0x310a <exp+0x4e>
    30f8:	fe 57       	subi	r31, 0x7E	; 126
    30fa:	e0 68       	ori	r30, 0x80	; 128
    30fc:	44 27       	eor	r20, r20
    30fe:	ee 0f       	add	r30, r30
    3100:	44 1f       	adc	r20, r20
    3102:	fa 95       	dec	r31
    3104:	e1 f7       	brne	.-8      	; 0x30fe <exp+0x42>
    3106:	41 95       	neg	r20
    3108:	55 0b       	sbc	r21, r21
    310a:	14 d0       	rcall	.+40     	; 0x3134 <ldexp>
    310c:	0f 90       	pop	r0
    310e:	07 fe       	sbrs	r0, 7
    3110:	1a cf       	rjmp	.-460    	; 0x2f46 <inverse>
    3112:	08 95       	ret

00003114 <__fp_mpack>:
    3114:	9f 3f       	cpi	r25, 0xFF	; 255
    3116:	31 f0       	breq	.+12     	; 0x3124 <__fp_mpack_finite+0xc>

00003118 <__fp_mpack_finite>:
    3118:	91 50       	subi	r25, 0x01	; 1
    311a:	20 f4       	brcc	.+8      	; 0x3124 <__fp_mpack_finite+0xc>
    311c:	87 95       	ror	r24
    311e:	77 95       	ror	r23
    3120:	67 95       	ror	r22
    3122:	b7 95       	ror	r27
    3124:	88 0f       	add	r24, r24
    3126:	91 1d       	adc	r25, r1
    3128:	96 95       	lsr	r25
    312a:	87 95       	ror	r24
    312c:	97 f9       	bld	r25, 7
    312e:	08 95       	ret
    3130:	80 ce       	rjmp	.-768    	; 0x2e32 <__fp_inf>
    3132:	f0 cf       	rjmp	.-32     	; 0x3114 <__fp_mpack>

00003134 <ldexp>:
    3134:	e3 de       	rcall	.-570    	; 0x2efc <__fp_splitA>
    3136:	e8 f3       	brcs	.-6      	; 0x3132 <__fp_mpack_finite+0x1a>
    3138:	99 23       	and	r25, r25
    313a:	d9 f3       	breq	.-10     	; 0x3132 <__fp_mpack_finite+0x1a>
    313c:	94 0f       	add	r25, r20
    313e:	51 1d       	adc	r21, r1
    3140:	bb f3       	brvs	.-18     	; 0x3130 <__fp_mpack_finite+0x18>
    3142:	91 50       	subi	r25, 0x01	; 1
    3144:	50 40       	sbci	r21, 0x00	; 0
    3146:	94 f0       	brlt	.+36     	; 0x316c <ldexp+0x38>
    3148:	59 f0       	breq	.+22     	; 0x3160 <ldexp+0x2c>
    314a:	88 23       	and	r24, r24
    314c:	32 f0       	brmi	.+12     	; 0x315a <ldexp+0x26>
    314e:	66 0f       	add	r22, r22
    3150:	77 1f       	adc	r23, r23
    3152:	88 1f       	adc	r24, r24
    3154:	91 50       	subi	r25, 0x01	; 1
    3156:	50 40       	sbci	r21, 0x00	; 0
    3158:	c1 f7       	brne	.-16     	; 0x314a <ldexp+0x16>
    315a:	9e 3f       	cpi	r25, 0xFE	; 254
    315c:	51 05       	cpc	r21, r1
    315e:	44 f7       	brge	.-48     	; 0x3130 <__fp_mpack_finite+0x18>
    3160:	88 0f       	add	r24, r24
    3162:	91 1d       	adc	r25, r1
    3164:	96 95       	lsr	r25
    3166:	87 95       	ror	r24
    3168:	97 f9       	bld	r25, 7
    316a:	08 95       	ret
    316c:	5f 3f       	cpi	r21, 0xFF	; 255
    316e:	ac f0       	brlt	.+42     	; 0x319a <ldexp+0x66>
    3170:	98 3e       	cpi	r25, 0xE8	; 232
    3172:	9c f0       	brlt	.+38     	; 0x319a <ldexp+0x66>
    3174:	bb 27       	eor	r27, r27
    3176:	86 95       	lsr	r24
    3178:	77 95       	ror	r23
    317a:	67 95       	ror	r22
    317c:	b7 95       	ror	r27
    317e:	08 f4       	brcc	.+2      	; 0x3182 <ldexp+0x4e>
    3180:	b1 60       	ori	r27, 0x01	; 1
    3182:	93 95       	inc	r25
    3184:	c1 f7       	brne	.-16     	; 0x3176 <ldexp+0x42>
    3186:	bb 0f       	add	r27, r27
    3188:	58 f7       	brcc	.-42     	; 0x3160 <ldexp+0x2c>
    318a:	11 f4       	brne	.+4      	; 0x3190 <ldexp+0x5c>
    318c:	60 ff       	sbrs	r22, 0
    318e:	e8 cf       	rjmp	.-48     	; 0x3160 <ldexp+0x2c>
    3190:	6f 5f       	subi	r22, 0xFF	; 255
    3192:	7f 4f       	sbci	r23, 0xFF	; 255
    3194:	8f 4f       	sbci	r24, 0xFF	; 255
    3196:	9f 4f       	sbci	r25, 0xFF	; 255
    3198:	e3 cf       	rjmp	.-58     	; 0x3160 <ldexp+0x2c>
    319a:	cb ce       	rjmp	.-618    	; 0x2f32 <__fp_szero>
    319c:	0e f0       	brts	.+2      	; 0x31a0 <ldexp+0x6c>
    319e:	ba cf       	rjmp	.-140    	; 0x3114 <__fp_mpack>
    31a0:	4e ce       	rjmp	.-868    	; 0x2e3e <__fp_nan>
    31a2:	68 94       	set
    31a4:	46 ce       	rjmp	.-884    	; 0x2e32 <__fp_inf>

000031a6 <log>:
    31a6:	aa de       	rcall	.-684    	; 0x2efc <__fp_splitA>
    31a8:	c8 f3       	brcs	.-14     	; 0x319c <ldexp+0x68>
    31aa:	99 23       	and	r25, r25
    31ac:	d1 f3       	breq	.-12     	; 0x31a2 <ldexp+0x6e>
    31ae:	c6 f3       	brts	.-16     	; 0x31a0 <ldexp+0x6c>
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	1f 93       	push	r17
    31b6:	0f 93       	push	r16
    31b8:	ff 92       	push	r15
    31ba:	c9 2f       	mov	r28, r25
    31bc:	dd 27       	eor	r29, r29
    31be:	88 23       	and	r24, r24
    31c0:	2a f0       	brmi	.+10     	; 0x31cc <log+0x26>
    31c2:	21 97       	sbiw	r28, 0x01	; 1
    31c4:	66 0f       	add	r22, r22
    31c6:	77 1f       	adc	r23, r23
    31c8:	88 1f       	adc	r24, r24
    31ca:	da f7       	brpl	.-10     	; 0x31c2 <log+0x1c>
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e8       	ldi	r20, 0x80	; 128
    31d2:	5f eb       	ldi	r21, 0xBF	; 191
    31d4:	9f e3       	ldi	r25, 0x3F	; 63
    31d6:	88 39       	cpi	r24, 0x98	; 152
    31d8:	20 f0       	brcs	.+8      	; 0x31e2 <log+0x3c>
    31da:	80 3e       	cpi	r24, 0xE0	; 224
    31dc:	30 f0       	brcs	.+12     	; 0x31ea <log+0x44>
    31de:	21 96       	adiw	r28, 0x01	; 1
    31e0:	8f 77       	andi	r24, 0x7F	; 127
    31e2:	8b dc       	rcall	.-1770   	; 0x2afa <__addsf3>
    31e4:	e4 e2       	ldi	r30, 0x24	; 36
    31e6:	f2 e0       	ldi	r31, 0x02	; 2
    31e8:	03 c0       	rjmp	.+6      	; 0x31f0 <log+0x4a>
    31ea:	87 dc       	rcall	.-1778   	; 0x2afa <__addsf3>
    31ec:	e1 e5       	ldi	r30, 0x51	; 81
    31ee:	f2 e0       	ldi	r31, 0x02	; 2
    31f0:	39 de       	rcall	.-910    	; 0x2e64 <__fp_powser>
    31f2:	8b 01       	movw	r16, r22
    31f4:	be 01       	movw	r22, r28
    31f6:	ec 01       	movw	r28, r24
    31f8:	fb 2e       	mov	r15, r27
    31fa:	6f 57       	subi	r22, 0x7F	; 127
    31fc:	71 09       	sbc	r23, r1
    31fe:	75 95       	asr	r23
    3200:	77 1f       	adc	r23, r23
    3202:	88 0b       	sbc	r24, r24
    3204:	99 0b       	sbc	r25, r25
    3206:	b6 dd       	rcall	.-1172   	; 0x2d74 <__floatsisf>
    3208:	28 e1       	ldi	r18, 0x18	; 24
    320a:	32 e7       	ldi	r19, 0x72	; 114
    320c:	41 e3       	ldi	r20, 0x31	; 49
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	ad de       	rcall	.-678    	; 0x2f6c <__mulsf3x>
    3212:	af 2d       	mov	r26, r15
    3214:	98 01       	movw	r18, r16
    3216:	ae 01       	movw	r20, r28
    3218:	ff 90       	pop	r15
    321a:	0f 91       	pop	r16
    321c:	1f 91       	pop	r17
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	7c dc       	rcall	.-1800   	; 0x2b1c <__addsf3x>
    3224:	52 ce       	rjmp	.-860    	; 0x2eca <__fp_round>

00003226 <modf>:
    3226:	fa 01       	movw	r30, r20
    3228:	dc 01       	movw	r26, r24
    322a:	aa 0f       	add	r26, r26
    322c:	bb 1f       	adc	r27, r27
    322e:	9b 01       	movw	r18, r22
    3230:	ac 01       	movw	r20, r24
    3232:	bf 57       	subi	r27, 0x7F	; 127
    3234:	28 f4       	brcc	.+10     	; 0x3240 <modf+0x1a>
    3236:	22 27       	eor	r18, r18
    3238:	33 27       	eor	r19, r19
    323a:	44 27       	eor	r20, r20
    323c:	50 78       	andi	r21, 0x80	; 128
    323e:	1f c0       	rjmp	.+62     	; 0x327e <modf+0x58>
    3240:	b7 51       	subi	r27, 0x17	; 23
    3242:	88 f4       	brcc	.+34     	; 0x3266 <modf+0x40>
    3244:	ab 2f       	mov	r26, r27
    3246:	00 24       	eor	r0, r0
    3248:	46 95       	lsr	r20
    324a:	37 95       	ror	r19
    324c:	27 95       	ror	r18
    324e:	01 1c       	adc	r0, r1
    3250:	a3 95       	inc	r26
    3252:	d2 f3       	brmi	.-12     	; 0x3248 <modf+0x22>
    3254:	00 20       	and	r0, r0
    3256:	69 f0       	breq	.+26     	; 0x3272 <modf+0x4c>
    3258:	22 0f       	add	r18, r18
    325a:	33 1f       	adc	r19, r19
    325c:	44 1f       	adc	r20, r20
    325e:	b3 95       	inc	r27
    3260:	da f3       	brmi	.-10     	; 0x3258 <modf+0x32>
    3262:	0d d0       	rcall	.+26     	; 0x327e <modf+0x58>
    3264:	49 cc       	rjmp	.-1902   	; 0x2af8 <__subsf3>
    3266:	61 30       	cpi	r22, 0x01	; 1
    3268:	71 05       	cpc	r23, r1
    326a:	a0 e8       	ldi	r26, 0x80	; 128
    326c:	8a 07       	cpc	r24, r26
    326e:	b9 46       	sbci	r27, 0x69	; 105
    3270:	30 f4       	brcc	.+12     	; 0x327e <modf+0x58>
    3272:	9b 01       	movw	r18, r22
    3274:	ac 01       	movw	r20, r24
    3276:	66 27       	eor	r22, r22
    3278:	77 27       	eor	r23, r23
    327a:	88 27       	eor	r24, r24
    327c:	90 78       	andi	r25, 0x80	; 128
    327e:	30 96       	adiw	r30, 0x00	; 0
    3280:	21 f0       	breq	.+8      	; 0x328a <modf+0x64>
    3282:	20 83       	st	Z, r18
    3284:	31 83       	std	Z+1, r19	; 0x01
    3286:	42 83       	std	Z+2, r20	; 0x02
    3288:	53 83       	std	Z+3, r21	; 0x03
    328a:	08 95       	ret

0000328c <__mulsi3>:
    328c:	db 01       	movw	r26, r22
    328e:	8f 93       	push	r24
    3290:	9f 93       	push	r25
    3292:	70 d0       	rcall	.+224    	; 0x3374 <__muluhisi3>
    3294:	bf 91       	pop	r27
    3296:	af 91       	pop	r26
    3298:	a2 9f       	mul	r26, r18
    329a:	80 0d       	add	r24, r0
    329c:	91 1d       	adc	r25, r1
    329e:	a3 9f       	mul	r26, r19
    32a0:	90 0d       	add	r25, r0
    32a2:	b2 9f       	mul	r27, r18
    32a4:	90 0d       	add	r25, r0
    32a6:	11 24       	eor	r1, r1
    32a8:	08 95       	ret

000032aa <__udivmodhi4>:
    32aa:	aa 1b       	sub	r26, r26
    32ac:	bb 1b       	sub	r27, r27
    32ae:	51 e1       	ldi	r21, 0x11	; 17
    32b0:	07 c0       	rjmp	.+14     	; 0x32c0 <__udivmodhi4_ep>

000032b2 <__udivmodhi4_loop>:
    32b2:	aa 1f       	adc	r26, r26
    32b4:	bb 1f       	adc	r27, r27
    32b6:	a6 17       	cp	r26, r22
    32b8:	b7 07       	cpc	r27, r23
    32ba:	10 f0       	brcs	.+4      	; 0x32c0 <__udivmodhi4_ep>
    32bc:	a6 1b       	sub	r26, r22
    32be:	b7 0b       	sbc	r27, r23

000032c0 <__udivmodhi4_ep>:
    32c0:	88 1f       	adc	r24, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	5a 95       	dec	r21
    32c6:	a9 f7       	brne	.-22     	; 0x32b2 <__udivmodhi4_loop>
    32c8:	80 95       	com	r24
    32ca:	90 95       	com	r25
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	08 95       	ret

000032d2 <__divmodhi4>:
    32d2:	97 fb       	bst	r25, 7
    32d4:	07 2e       	mov	r0, r23
    32d6:	16 f4       	brtc	.+4      	; 0x32dc <__divmodhi4+0xa>
    32d8:	00 94       	com	r0
    32da:	06 d0       	rcall	.+12     	; 0x32e8 <__divmodhi4_neg1>
    32dc:	77 fd       	sbrc	r23, 7
    32de:	08 d0       	rcall	.+16     	; 0x32f0 <__divmodhi4_neg2>
    32e0:	e4 df       	rcall	.-56     	; 0x32aa <__udivmodhi4>
    32e2:	07 fc       	sbrc	r0, 7
    32e4:	05 d0       	rcall	.+10     	; 0x32f0 <__divmodhi4_neg2>
    32e6:	3e f4       	brtc	.+14     	; 0x32f6 <__divmodhi4_exit>

000032e8 <__divmodhi4_neg1>:
    32e8:	90 95       	com	r25
    32ea:	81 95       	neg	r24
    32ec:	9f 4f       	sbci	r25, 0xFF	; 255
    32ee:	08 95       	ret

000032f0 <__divmodhi4_neg2>:
    32f0:	70 95       	com	r23
    32f2:	61 95       	neg	r22
    32f4:	7f 4f       	sbci	r23, 0xFF	; 255

000032f6 <__divmodhi4_exit>:
    32f6:	08 95       	ret

000032f8 <__udivmodsi4>:
    32f8:	a1 e2       	ldi	r26, 0x21	; 33
    32fa:	1a 2e       	mov	r1, r26
    32fc:	aa 1b       	sub	r26, r26
    32fe:	bb 1b       	sub	r27, r27
    3300:	fd 01       	movw	r30, r26
    3302:	0d c0       	rjmp	.+26     	; 0x331e <__udivmodsi4_ep>

00003304 <__udivmodsi4_loop>:
    3304:	aa 1f       	adc	r26, r26
    3306:	bb 1f       	adc	r27, r27
    3308:	ee 1f       	adc	r30, r30
    330a:	ff 1f       	adc	r31, r31
    330c:	a2 17       	cp	r26, r18
    330e:	b3 07       	cpc	r27, r19
    3310:	e4 07       	cpc	r30, r20
    3312:	f5 07       	cpc	r31, r21
    3314:	20 f0       	brcs	.+8      	; 0x331e <__udivmodsi4_ep>
    3316:	a2 1b       	sub	r26, r18
    3318:	b3 0b       	sbc	r27, r19
    331a:	e4 0b       	sbc	r30, r20
    331c:	f5 0b       	sbc	r31, r21

0000331e <__udivmodsi4_ep>:
    331e:	66 1f       	adc	r22, r22
    3320:	77 1f       	adc	r23, r23
    3322:	88 1f       	adc	r24, r24
    3324:	99 1f       	adc	r25, r25
    3326:	1a 94       	dec	r1
    3328:	69 f7       	brne	.-38     	; 0x3304 <__udivmodsi4_loop>
    332a:	60 95       	com	r22
    332c:	70 95       	com	r23
    332e:	80 95       	com	r24
    3330:	90 95       	com	r25
    3332:	9b 01       	movw	r18, r22
    3334:	ac 01       	movw	r20, r24
    3336:	bd 01       	movw	r22, r26
    3338:	cf 01       	movw	r24, r30
    333a:	08 95       	ret

0000333c <__divmodsi4>:
    333c:	05 2e       	mov	r0, r21
    333e:	97 fb       	bst	r25, 7
    3340:	16 f4       	brtc	.+4      	; 0x3346 <__divmodsi4+0xa>
    3342:	00 94       	com	r0
    3344:	0f d0       	rcall	.+30     	; 0x3364 <__negsi2>
    3346:	57 fd       	sbrc	r21, 7
    3348:	05 d0       	rcall	.+10     	; 0x3354 <__divmodsi4_neg2>
    334a:	d6 df       	rcall	.-84     	; 0x32f8 <__udivmodsi4>
    334c:	07 fc       	sbrc	r0, 7
    334e:	02 d0       	rcall	.+4      	; 0x3354 <__divmodsi4_neg2>
    3350:	46 f4       	brtc	.+16     	; 0x3362 <__divmodsi4_exit>
    3352:	08 c0       	rjmp	.+16     	; 0x3364 <__negsi2>

00003354 <__divmodsi4_neg2>:
    3354:	50 95       	com	r21
    3356:	40 95       	com	r20
    3358:	30 95       	com	r19
    335a:	21 95       	neg	r18
    335c:	3f 4f       	sbci	r19, 0xFF	; 255
    335e:	4f 4f       	sbci	r20, 0xFF	; 255
    3360:	5f 4f       	sbci	r21, 0xFF	; 255

00003362 <__divmodsi4_exit>:
    3362:	08 95       	ret

00003364 <__negsi2>:
    3364:	90 95       	com	r25
    3366:	80 95       	com	r24
    3368:	70 95       	com	r23
    336a:	61 95       	neg	r22
    336c:	7f 4f       	sbci	r23, 0xFF	; 255
    336e:	8f 4f       	sbci	r24, 0xFF	; 255
    3370:	9f 4f       	sbci	r25, 0xFF	; 255
    3372:	08 95       	ret

00003374 <__muluhisi3>:
    3374:	2d d0       	rcall	.+90     	; 0x33d0 <__umulhisi3>
    3376:	a5 9f       	mul	r26, r21
    3378:	90 0d       	add	r25, r0
    337a:	b4 9f       	mul	r27, r20
    337c:	90 0d       	add	r25, r0
    337e:	a4 9f       	mul	r26, r20
    3380:	80 0d       	add	r24, r0
    3382:	91 1d       	adc	r25, r1
    3384:	11 24       	eor	r1, r1
    3386:	08 95       	ret

00003388 <__mulshisi3>:
    3388:	b7 ff       	sbrs	r27, 7
    338a:	f4 cf       	rjmp	.-24     	; 0x3374 <__muluhisi3>

0000338c <__mulohisi3>:
    338c:	f3 df       	rcall	.-26     	; 0x3374 <__muluhisi3>
    338e:	82 1b       	sub	r24, r18
    3390:	93 0b       	sbc	r25, r19
    3392:	08 95       	ret

00003394 <__ashrdi3>:
    3394:	97 fb       	bst	r25, 7
    3396:	10 f8       	bld	r1, 0

00003398 <__lshrdi3>:
    3398:	16 94       	lsr	r1
    339a:	00 08       	sbc	r0, r0
    339c:	0f 93       	push	r16
    339e:	08 30       	cpi	r16, 0x08	; 8
    33a0:	98 f0       	brcs	.+38     	; 0x33c8 <__lshrdi3+0x30>
    33a2:	08 50       	subi	r16, 0x08	; 8
    33a4:	23 2f       	mov	r18, r19
    33a6:	34 2f       	mov	r19, r20
    33a8:	45 2f       	mov	r20, r21
    33aa:	56 2f       	mov	r21, r22
    33ac:	67 2f       	mov	r22, r23
    33ae:	78 2f       	mov	r23, r24
    33b0:	89 2f       	mov	r24, r25
    33b2:	90 2d       	mov	r25, r0
    33b4:	f4 cf       	rjmp	.-24     	; 0x339e <__lshrdi3+0x6>
    33b6:	05 94       	asr	r0
    33b8:	97 95       	ror	r25
    33ba:	87 95       	ror	r24
    33bc:	77 95       	ror	r23
    33be:	67 95       	ror	r22
    33c0:	57 95       	ror	r21
    33c2:	47 95       	ror	r20
    33c4:	37 95       	ror	r19
    33c6:	27 95       	ror	r18
    33c8:	0a 95       	dec	r16
    33ca:	aa f7       	brpl	.-22     	; 0x33b6 <__lshrdi3+0x1e>
    33cc:	0f 91       	pop	r16
    33ce:	08 95       	ret

000033d0 <__umulhisi3>:
    33d0:	a2 9f       	mul	r26, r18
    33d2:	b0 01       	movw	r22, r0
    33d4:	b3 9f       	mul	r27, r19
    33d6:	c0 01       	movw	r24, r0
    33d8:	a3 9f       	mul	r26, r19
    33da:	70 0d       	add	r23, r0
    33dc:	81 1d       	adc	r24, r1
    33de:	11 24       	eor	r1, r1
    33e0:	91 1d       	adc	r25, r1
    33e2:	b2 9f       	mul	r27, r18
    33e4:	70 0d       	add	r23, r0
    33e6:	81 1d       	adc	r24, r1
    33e8:	11 24       	eor	r1, r1
    33ea:	91 1d       	adc	r25, r1
    33ec:	08 95       	ret

000033ee <fdevopen>:
    33ee:	0f 93       	push	r16
    33f0:	1f 93       	push	r17
    33f2:	cf 93       	push	r28
    33f4:	df 93       	push	r29
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	31 f4       	brne	.+12     	; 0x3406 <fdevopen+0x18>
    33fa:	61 15       	cp	r22, r1
    33fc:	71 05       	cpc	r23, r1
    33fe:	19 f4       	brne	.+6      	; 0x3406 <fdevopen+0x18>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	39 c0       	rjmp	.+114    	; 0x3478 <fdevopen+0x8a>
    3406:	8b 01       	movw	r16, r22
    3408:	ec 01       	movw	r28, r24
    340a:	6e e0       	ldi	r22, 0x0E	; 14
    340c:	70 e0       	ldi	r23, 0x00	; 0
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	47 d5       	rcall	.+2702   	; 0x3ea2 <calloc>
    3414:	fc 01       	movw	r30, r24
    3416:	89 2b       	or	r24, r25
    3418:	99 f3       	breq	.-26     	; 0x3400 <fdevopen+0x12>
    341a:	80 e8       	ldi	r24, 0x80	; 128
    341c:	83 83       	std	Z+3, r24	; 0x03
    341e:	01 15       	cp	r16, r1
    3420:	11 05       	cpc	r17, r1
    3422:	71 f0       	breq	.+28     	; 0x3440 <fdevopen+0x52>
    3424:	02 87       	std	Z+10, r16	; 0x0a
    3426:	13 87       	std	Z+11, r17	; 0x0b
    3428:	81 e8       	ldi	r24, 0x81	; 129
    342a:	83 83       	std	Z+3, r24	; 0x03
    342c:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <__iob>
    3430:	90 91 83 21 	lds	r25, 0x2183	; 0x802183 <__iob+0x1>
    3434:	89 2b       	or	r24, r25
    3436:	21 f4       	brne	.+8      	; 0x3440 <fdevopen+0x52>
    3438:	e0 93 82 21 	sts	0x2182, r30	; 0x802182 <__iob>
    343c:	f0 93 83 21 	sts	0x2183, r31	; 0x802183 <__iob+0x1>
    3440:	20 97       	sbiw	r28, 0x00	; 0
    3442:	c9 f0       	breq	.+50     	; 0x3476 <fdevopen+0x88>
    3444:	c0 87       	std	Z+8, r28	; 0x08
    3446:	d1 87       	std	Z+9, r29	; 0x09
    3448:	83 81       	ldd	r24, Z+3	; 0x03
    344a:	82 60       	ori	r24, 0x02	; 2
    344c:	83 83       	std	Z+3, r24	; 0x03
    344e:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <__iob+0x2>
    3452:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <__iob+0x3>
    3456:	89 2b       	or	r24, r25
    3458:	71 f4       	brne	.+28     	; 0x3476 <fdevopen+0x88>
    345a:	e0 93 84 21 	sts	0x2184, r30	; 0x802184 <__iob+0x2>
    345e:	f0 93 85 21 	sts	0x2185, r31	; 0x802185 <__iob+0x3>
    3462:	80 91 86 21 	lds	r24, 0x2186	; 0x802186 <__iob+0x4>
    3466:	90 91 87 21 	lds	r25, 0x2187	; 0x802187 <__iob+0x5>
    346a:	89 2b       	or	r24, r25
    346c:	21 f4       	brne	.+8      	; 0x3476 <fdevopen+0x88>
    346e:	e0 93 86 21 	sts	0x2186, r30	; 0x802186 <__iob+0x4>
    3472:	f0 93 87 21 	sts	0x2187, r31	; 0x802187 <__iob+0x5>
    3476:	cf 01       	movw	r24, r30
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	1f 91       	pop	r17
    347e:	0f 91       	pop	r16
    3480:	08 95       	ret

00003482 <printf>:
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    348a:	ae 01       	movw	r20, r28
    348c:	4a 5f       	subi	r20, 0xFA	; 250
    348e:	5f 4f       	sbci	r21, 0xFF	; 255
    3490:	fa 01       	movw	r30, r20
    3492:	61 91       	ld	r22, Z+
    3494:	71 91       	ld	r23, Z+
    3496:	af 01       	movw	r20, r30
    3498:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <__iob+0x2>
    349c:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <__iob+0x3>
    34a0:	46 d0       	rcall	.+140    	; 0x352e <vfprintf>
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	08 95       	ret

000034a8 <sprintf>:
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
    34b4:	2e 97       	sbiw	r28, 0x0e	; 14
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0e 89       	ldd	r16, Y+22	; 0x16
    34bc:	1f 89       	ldd	r17, Y+23	; 0x17
    34be:	86 e0       	ldi	r24, 0x06	; 6
    34c0:	8c 83       	std	Y+4, r24	; 0x04
    34c2:	09 83       	std	Y+1, r16	; 0x01
    34c4:	1a 83       	std	Y+2, r17	; 0x02
    34c6:	8f ef       	ldi	r24, 0xFF	; 255
    34c8:	9f e7       	ldi	r25, 0x7F	; 127
    34ca:	8d 83       	std	Y+5, r24	; 0x05
    34cc:	9e 83       	std	Y+6, r25	; 0x06
    34ce:	ae 01       	movw	r20, r28
    34d0:	46 5e       	subi	r20, 0xE6	; 230
    34d2:	5f 4f       	sbci	r21, 0xFF	; 255
    34d4:	68 8d       	ldd	r22, Y+24	; 0x18
    34d6:	79 8d       	ldd	r23, Y+25	; 0x19
    34d8:	ce 01       	movw	r24, r28
    34da:	01 96       	adiw	r24, 0x01	; 1
    34dc:	28 d0       	rcall	.+80     	; 0x352e <vfprintf>
    34de:	ef 81       	ldd	r30, Y+7	; 0x07
    34e0:	f8 85       	ldd	r31, Y+8	; 0x08
    34e2:	e0 0f       	add	r30, r16
    34e4:	f1 1f       	adc	r31, r17
    34e6:	10 82       	st	Z, r1
    34e8:	2e 96       	adiw	r28, 0x0e	; 14
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	df 91       	pop	r29
    34f0:	cf 91       	pop	r28
    34f2:	1f 91       	pop	r17
    34f4:	0f 91       	pop	r16
    34f6:	08 95       	ret

000034f8 <sscanf>:
    34f8:	cf 93       	push	r28
    34fa:	df 93       	push	r29
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	2e 97       	sbiw	r28, 0x0e	; 14
    3502:	cd bf       	out	0x3d, r28	; 61
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	85 e0       	ldi	r24, 0x05	; 5
    3508:	8c 83       	std	Y+4, r24	; 0x04
    350a:	8c 89       	ldd	r24, Y+20	; 0x14
    350c:	9d 89       	ldd	r25, Y+21	; 0x15
    350e:	89 83       	std	Y+1, r24	; 0x01
    3510:	9a 83       	std	Y+2, r25	; 0x02
    3512:	ae 01       	movw	r20, r28
    3514:	48 5e       	subi	r20, 0xE8	; 232
    3516:	5f 4f       	sbci	r21, 0xFF	; 255
    3518:	6e 89       	ldd	r22, Y+22	; 0x16
    351a:	7f 89       	ldd	r23, Y+23	; 0x17
    351c:	ce 01       	movw	r24, r28
    351e:	01 96       	adiw	r24, 0x01	; 1
    3520:	a9 d3       	rcall	.+1874   	; 0x3c74 <vfscanf>
    3522:	2e 96       	adiw	r28, 0x0e	; 14
    3524:	cd bf       	out	0x3d, r28	; 61
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	08 95       	ret

0000352e <vfprintf>:
    352e:	2f 92       	push	r2
    3530:	3f 92       	push	r3
    3532:	4f 92       	push	r4
    3534:	5f 92       	push	r5
    3536:	6f 92       	push	r6
    3538:	7f 92       	push	r7
    353a:	8f 92       	push	r8
    353c:	9f 92       	push	r9
    353e:	af 92       	push	r10
    3540:	bf 92       	push	r11
    3542:	cf 92       	push	r12
    3544:	df 92       	push	r13
    3546:	ef 92       	push	r14
    3548:	ff 92       	push	r15
    354a:	0f 93       	push	r16
    354c:	1f 93       	push	r17
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	2b 97       	sbiw	r28, 0x0b	; 11
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	6c 01       	movw	r12, r24
    355e:	7b 01       	movw	r14, r22
    3560:	8a 01       	movw	r16, r20
    3562:	fc 01       	movw	r30, r24
    3564:	16 82       	std	Z+6, r1	; 0x06
    3566:	17 82       	std	Z+7, r1	; 0x07
    3568:	83 81       	ldd	r24, Z+3	; 0x03
    356a:	81 ff       	sbrs	r24, 1
    356c:	bf c1       	rjmp	.+894    	; 0x38ec <vfprintf+0x3be>
    356e:	ce 01       	movw	r24, r28
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	3c 01       	movw	r6, r24
    3574:	f6 01       	movw	r30, r12
    3576:	93 81       	ldd	r25, Z+3	; 0x03
    3578:	f7 01       	movw	r30, r14
    357a:	93 fd       	sbrc	r25, 3
    357c:	85 91       	lpm	r24, Z+
    357e:	93 ff       	sbrs	r25, 3
    3580:	81 91       	ld	r24, Z+
    3582:	7f 01       	movw	r14, r30
    3584:	88 23       	and	r24, r24
    3586:	09 f4       	brne	.+2      	; 0x358a <vfprintf+0x5c>
    3588:	ad c1       	rjmp	.+858    	; 0x38e4 <vfprintf+0x3b6>
    358a:	85 32       	cpi	r24, 0x25	; 37
    358c:	39 f4       	brne	.+14     	; 0x359c <vfprintf+0x6e>
    358e:	93 fd       	sbrc	r25, 3
    3590:	85 91       	lpm	r24, Z+
    3592:	93 ff       	sbrs	r25, 3
    3594:	81 91       	ld	r24, Z+
    3596:	7f 01       	movw	r14, r30
    3598:	85 32       	cpi	r24, 0x25	; 37
    359a:	21 f4       	brne	.+8      	; 0x35a4 <vfprintf+0x76>
    359c:	b6 01       	movw	r22, r12
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	29 d6       	rcall	.+3154   	; 0x41f4 <fputc>
    35a2:	e8 cf       	rjmp	.-48     	; 0x3574 <vfprintf+0x46>
    35a4:	91 2c       	mov	r9, r1
    35a6:	21 2c       	mov	r2, r1
    35a8:	31 2c       	mov	r3, r1
    35aa:	ff e1       	ldi	r31, 0x1F	; 31
    35ac:	f3 15       	cp	r31, r3
    35ae:	d8 f0       	brcs	.+54     	; 0x35e6 <vfprintf+0xb8>
    35b0:	8b 32       	cpi	r24, 0x2B	; 43
    35b2:	79 f0       	breq	.+30     	; 0x35d2 <vfprintf+0xa4>
    35b4:	38 f4       	brcc	.+14     	; 0x35c4 <vfprintf+0x96>
    35b6:	80 32       	cpi	r24, 0x20	; 32
    35b8:	79 f0       	breq	.+30     	; 0x35d8 <vfprintf+0xaa>
    35ba:	83 32       	cpi	r24, 0x23	; 35
    35bc:	a1 f4       	brne	.+40     	; 0x35e6 <vfprintf+0xb8>
    35be:	23 2d       	mov	r18, r3
    35c0:	20 61       	ori	r18, 0x10	; 16
    35c2:	1d c0       	rjmp	.+58     	; 0x35fe <vfprintf+0xd0>
    35c4:	8d 32       	cpi	r24, 0x2D	; 45
    35c6:	61 f0       	breq	.+24     	; 0x35e0 <vfprintf+0xb2>
    35c8:	80 33       	cpi	r24, 0x30	; 48
    35ca:	69 f4       	brne	.+26     	; 0x35e6 <vfprintf+0xb8>
    35cc:	23 2d       	mov	r18, r3
    35ce:	21 60       	ori	r18, 0x01	; 1
    35d0:	16 c0       	rjmp	.+44     	; 0x35fe <vfprintf+0xd0>
    35d2:	83 2d       	mov	r24, r3
    35d4:	82 60       	ori	r24, 0x02	; 2
    35d6:	38 2e       	mov	r3, r24
    35d8:	e3 2d       	mov	r30, r3
    35da:	e4 60       	ori	r30, 0x04	; 4
    35dc:	3e 2e       	mov	r3, r30
    35de:	2a c0       	rjmp	.+84     	; 0x3634 <vfprintf+0x106>
    35e0:	f3 2d       	mov	r31, r3
    35e2:	f8 60       	ori	r31, 0x08	; 8
    35e4:	1d c0       	rjmp	.+58     	; 0x3620 <vfprintf+0xf2>
    35e6:	37 fc       	sbrc	r3, 7
    35e8:	2d c0       	rjmp	.+90     	; 0x3644 <vfprintf+0x116>
    35ea:	20 ed       	ldi	r18, 0xD0	; 208
    35ec:	28 0f       	add	r18, r24
    35ee:	2a 30       	cpi	r18, 0x0A	; 10
    35f0:	40 f0       	brcs	.+16     	; 0x3602 <vfprintf+0xd4>
    35f2:	8e 32       	cpi	r24, 0x2E	; 46
    35f4:	b9 f4       	brne	.+46     	; 0x3624 <vfprintf+0xf6>
    35f6:	36 fc       	sbrc	r3, 6
    35f8:	75 c1       	rjmp	.+746    	; 0x38e4 <vfprintf+0x3b6>
    35fa:	23 2d       	mov	r18, r3
    35fc:	20 64       	ori	r18, 0x40	; 64
    35fe:	32 2e       	mov	r3, r18
    3600:	19 c0       	rjmp	.+50     	; 0x3634 <vfprintf+0x106>
    3602:	36 fe       	sbrs	r3, 6
    3604:	06 c0       	rjmp	.+12     	; 0x3612 <vfprintf+0xe4>
    3606:	8a e0       	ldi	r24, 0x0A	; 10
    3608:	98 9e       	mul	r9, r24
    360a:	20 0d       	add	r18, r0
    360c:	11 24       	eor	r1, r1
    360e:	92 2e       	mov	r9, r18
    3610:	11 c0       	rjmp	.+34     	; 0x3634 <vfprintf+0x106>
    3612:	ea e0       	ldi	r30, 0x0A	; 10
    3614:	2e 9e       	mul	r2, r30
    3616:	20 0d       	add	r18, r0
    3618:	11 24       	eor	r1, r1
    361a:	22 2e       	mov	r2, r18
    361c:	f3 2d       	mov	r31, r3
    361e:	f0 62       	ori	r31, 0x20	; 32
    3620:	3f 2e       	mov	r3, r31
    3622:	08 c0       	rjmp	.+16     	; 0x3634 <vfprintf+0x106>
    3624:	8c 36       	cpi	r24, 0x6C	; 108
    3626:	21 f4       	brne	.+8      	; 0x3630 <vfprintf+0x102>
    3628:	83 2d       	mov	r24, r3
    362a:	80 68       	ori	r24, 0x80	; 128
    362c:	38 2e       	mov	r3, r24
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <vfprintf+0x106>
    3630:	88 36       	cpi	r24, 0x68	; 104
    3632:	41 f4       	brne	.+16     	; 0x3644 <vfprintf+0x116>
    3634:	f7 01       	movw	r30, r14
    3636:	93 fd       	sbrc	r25, 3
    3638:	85 91       	lpm	r24, Z+
    363a:	93 ff       	sbrs	r25, 3
    363c:	81 91       	ld	r24, Z+
    363e:	7f 01       	movw	r14, r30
    3640:	81 11       	cpse	r24, r1
    3642:	b3 cf       	rjmp	.-154    	; 0x35aa <vfprintf+0x7c>
    3644:	98 2f       	mov	r25, r24
    3646:	9f 7d       	andi	r25, 0xDF	; 223
    3648:	95 54       	subi	r25, 0x45	; 69
    364a:	93 30       	cpi	r25, 0x03	; 3
    364c:	28 f4       	brcc	.+10     	; 0x3658 <vfprintf+0x12a>
    364e:	0c 5f       	subi	r16, 0xFC	; 252
    3650:	1f 4f       	sbci	r17, 0xFF	; 255
    3652:	9f e3       	ldi	r25, 0x3F	; 63
    3654:	99 83       	std	Y+1, r25	; 0x01
    3656:	0d c0       	rjmp	.+26     	; 0x3672 <vfprintf+0x144>
    3658:	83 36       	cpi	r24, 0x63	; 99
    365a:	31 f0       	breq	.+12     	; 0x3668 <vfprintf+0x13a>
    365c:	83 37       	cpi	r24, 0x73	; 115
    365e:	71 f0       	breq	.+28     	; 0x367c <vfprintf+0x14e>
    3660:	83 35       	cpi	r24, 0x53	; 83
    3662:	09 f0       	breq	.+2      	; 0x3666 <vfprintf+0x138>
    3664:	55 c0       	rjmp	.+170    	; 0x3710 <vfprintf+0x1e2>
    3666:	20 c0       	rjmp	.+64     	; 0x36a8 <vfprintf+0x17a>
    3668:	f8 01       	movw	r30, r16
    366a:	80 81       	ld	r24, Z
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	0e 5f       	subi	r16, 0xFE	; 254
    3670:	1f 4f       	sbci	r17, 0xFF	; 255
    3672:	88 24       	eor	r8, r8
    3674:	83 94       	inc	r8
    3676:	91 2c       	mov	r9, r1
    3678:	53 01       	movw	r10, r6
    367a:	12 c0       	rjmp	.+36     	; 0x36a0 <vfprintf+0x172>
    367c:	28 01       	movw	r4, r16
    367e:	f2 e0       	ldi	r31, 0x02	; 2
    3680:	4f 0e       	add	r4, r31
    3682:	51 1c       	adc	r5, r1
    3684:	f8 01       	movw	r30, r16
    3686:	a0 80       	ld	r10, Z
    3688:	b1 80       	ldd	r11, Z+1	; 0x01
    368a:	36 fe       	sbrs	r3, 6
    368c:	03 c0       	rjmp	.+6      	; 0x3694 <vfprintf+0x166>
    368e:	69 2d       	mov	r22, r9
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	02 c0       	rjmp	.+4      	; 0x3698 <vfprintf+0x16a>
    3694:	6f ef       	ldi	r22, 0xFF	; 255
    3696:	7f ef       	ldi	r23, 0xFF	; 255
    3698:	c5 01       	movw	r24, r10
    369a:	63 d5       	rcall	.+2758   	; 0x4162 <strnlen>
    369c:	4c 01       	movw	r8, r24
    369e:	82 01       	movw	r16, r4
    36a0:	f3 2d       	mov	r31, r3
    36a2:	ff 77       	andi	r31, 0x7F	; 127
    36a4:	3f 2e       	mov	r3, r31
    36a6:	15 c0       	rjmp	.+42     	; 0x36d2 <vfprintf+0x1a4>
    36a8:	28 01       	movw	r4, r16
    36aa:	22 e0       	ldi	r18, 0x02	; 2
    36ac:	42 0e       	add	r4, r18
    36ae:	51 1c       	adc	r5, r1
    36b0:	f8 01       	movw	r30, r16
    36b2:	a0 80       	ld	r10, Z
    36b4:	b1 80       	ldd	r11, Z+1	; 0x01
    36b6:	36 fe       	sbrs	r3, 6
    36b8:	03 c0       	rjmp	.+6      	; 0x36c0 <vfprintf+0x192>
    36ba:	69 2d       	mov	r22, r9
    36bc:	70 e0       	ldi	r23, 0x00	; 0
    36be:	02 c0       	rjmp	.+4      	; 0x36c4 <vfprintf+0x196>
    36c0:	6f ef       	ldi	r22, 0xFF	; 255
    36c2:	7f ef       	ldi	r23, 0xFF	; 255
    36c4:	c5 01       	movw	r24, r10
    36c6:	3b d5       	rcall	.+2678   	; 0x413e <strnlen_P>
    36c8:	4c 01       	movw	r8, r24
    36ca:	f3 2d       	mov	r31, r3
    36cc:	f0 68       	ori	r31, 0x80	; 128
    36ce:	3f 2e       	mov	r3, r31
    36d0:	82 01       	movw	r16, r4
    36d2:	33 fc       	sbrc	r3, 3
    36d4:	19 c0       	rjmp	.+50     	; 0x3708 <vfprintf+0x1da>
    36d6:	82 2d       	mov	r24, r2
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	88 16       	cp	r8, r24
    36dc:	99 06       	cpc	r9, r25
    36de:	a0 f4       	brcc	.+40     	; 0x3708 <vfprintf+0x1da>
    36e0:	b6 01       	movw	r22, r12
    36e2:	80 e2       	ldi	r24, 0x20	; 32
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	86 d5       	rcall	.+2828   	; 0x41f4 <fputc>
    36e8:	2a 94       	dec	r2
    36ea:	f5 cf       	rjmp	.-22     	; 0x36d6 <vfprintf+0x1a8>
    36ec:	f5 01       	movw	r30, r10
    36ee:	37 fc       	sbrc	r3, 7
    36f0:	85 91       	lpm	r24, Z+
    36f2:	37 fe       	sbrs	r3, 7
    36f4:	81 91       	ld	r24, Z+
    36f6:	5f 01       	movw	r10, r30
    36f8:	b6 01       	movw	r22, r12
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	7b d5       	rcall	.+2806   	; 0x41f4 <fputc>
    36fe:	21 10       	cpse	r2, r1
    3700:	2a 94       	dec	r2
    3702:	21 e0       	ldi	r18, 0x01	; 1
    3704:	82 1a       	sub	r8, r18
    3706:	91 08       	sbc	r9, r1
    3708:	81 14       	cp	r8, r1
    370a:	91 04       	cpc	r9, r1
    370c:	79 f7       	brne	.-34     	; 0x36ec <vfprintf+0x1be>
    370e:	e1 c0       	rjmp	.+450    	; 0x38d2 <vfprintf+0x3a4>
    3710:	84 36       	cpi	r24, 0x64	; 100
    3712:	11 f0       	breq	.+4      	; 0x3718 <vfprintf+0x1ea>
    3714:	89 36       	cpi	r24, 0x69	; 105
    3716:	39 f5       	brne	.+78     	; 0x3766 <vfprintf+0x238>
    3718:	f8 01       	movw	r30, r16
    371a:	37 fe       	sbrs	r3, 7
    371c:	07 c0       	rjmp	.+14     	; 0x372c <vfprintf+0x1fe>
    371e:	60 81       	ld	r22, Z
    3720:	71 81       	ldd	r23, Z+1	; 0x01
    3722:	82 81       	ldd	r24, Z+2	; 0x02
    3724:	93 81       	ldd	r25, Z+3	; 0x03
    3726:	0c 5f       	subi	r16, 0xFC	; 252
    3728:	1f 4f       	sbci	r17, 0xFF	; 255
    372a:	08 c0       	rjmp	.+16     	; 0x373c <vfprintf+0x20e>
    372c:	60 81       	ld	r22, Z
    372e:	71 81       	ldd	r23, Z+1	; 0x01
    3730:	07 2e       	mov	r0, r23
    3732:	00 0c       	add	r0, r0
    3734:	88 0b       	sbc	r24, r24
    3736:	99 0b       	sbc	r25, r25
    3738:	0e 5f       	subi	r16, 0xFE	; 254
    373a:	1f 4f       	sbci	r17, 0xFF	; 255
    373c:	f3 2d       	mov	r31, r3
    373e:	ff 76       	andi	r31, 0x6F	; 111
    3740:	3f 2e       	mov	r3, r31
    3742:	97 ff       	sbrs	r25, 7
    3744:	09 c0       	rjmp	.+18     	; 0x3758 <vfprintf+0x22a>
    3746:	90 95       	com	r25
    3748:	80 95       	com	r24
    374a:	70 95       	com	r23
    374c:	61 95       	neg	r22
    374e:	7f 4f       	sbci	r23, 0xFF	; 255
    3750:	8f 4f       	sbci	r24, 0xFF	; 255
    3752:	9f 4f       	sbci	r25, 0xFF	; 255
    3754:	f0 68       	ori	r31, 0x80	; 128
    3756:	3f 2e       	mov	r3, r31
    3758:	2a e0       	ldi	r18, 0x0A	; 10
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	a3 01       	movw	r20, r6
    375e:	9f d5       	rcall	.+2878   	; 0x429e <__ultoa_invert>
    3760:	88 2e       	mov	r8, r24
    3762:	86 18       	sub	r8, r6
    3764:	44 c0       	rjmp	.+136    	; 0x37ee <vfprintf+0x2c0>
    3766:	85 37       	cpi	r24, 0x75	; 117
    3768:	31 f4       	brne	.+12     	; 0x3776 <vfprintf+0x248>
    376a:	23 2d       	mov	r18, r3
    376c:	2f 7e       	andi	r18, 0xEF	; 239
    376e:	b2 2e       	mov	r11, r18
    3770:	2a e0       	ldi	r18, 0x0A	; 10
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	25 c0       	rjmp	.+74     	; 0x37c0 <vfprintf+0x292>
    3776:	93 2d       	mov	r25, r3
    3778:	99 7f       	andi	r25, 0xF9	; 249
    377a:	b9 2e       	mov	r11, r25
    377c:	8f 36       	cpi	r24, 0x6F	; 111
    377e:	c1 f0       	breq	.+48     	; 0x37b0 <vfprintf+0x282>
    3780:	18 f4       	brcc	.+6      	; 0x3788 <vfprintf+0x25a>
    3782:	88 35       	cpi	r24, 0x58	; 88
    3784:	79 f0       	breq	.+30     	; 0x37a4 <vfprintf+0x276>
    3786:	ae c0       	rjmp	.+348    	; 0x38e4 <vfprintf+0x3b6>
    3788:	80 37       	cpi	r24, 0x70	; 112
    378a:	19 f0       	breq	.+6      	; 0x3792 <vfprintf+0x264>
    378c:	88 37       	cpi	r24, 0x78	; 120
    378e:	21 f0       	breq	.+8      	; 0x3798 <vfprintf+0x26a>
    3790:	a9 c0       	rjmp	.+338    	; 0x38e4 <vfprintf+0x3b6>
    3792:	e9 2f       	mov	r30, r25
    3794:	e0 61       	ori	r30, 0x10	; 16
    3796:	be 2e       	mov	r11, r30
    3798:	b4 fe       	sbrs	r11, 4
    379a:	0d c0       	rjmp	.+26     	; 0x37b6 <vfprintf+0x288>
    379c:	fb 2d       	mov	r31, r11
    379e:	f4 60       	ori	r31, 0x04	; 4
    37a0:	bf 2e       	mov	r11, r31
    37a2:	09 c0       	rjmp	.+18     	; 0x37b6 <vfprintf+0x288>
    37a4:	34 fe       	sbrs	r3, 4
    37a6:	0a c0       	rjmp	.+20     	; 0x37bc <vfprintf+0x28e>
    37a8:	29 2f       	mov	r18, r25
    37aa:	26 60       	ori	r18, 0x06	; 6
    37ac:	b2 2e       	mov	r11, r18
    37ae:	06 c0       	rjmp	.+12     	; 0x37bc <vfprintf+0x28e>
    37b0:	28 e0       	ldi	r18, 0x08	; 8
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	05 c0       	rjmp	.+10     	; 0x37c0 <vfprintf+0x292>
    37b6:	20 e1       	ldi	r18, 0x10	; 16
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	02 c0       	rjmp	.+4      	; 0x37c0 <vfprintf+0x292>
    37bc:	20 e1       	ldi	r18, 0x10	; 16
    37be:	32 e0       	ldi	r19, 0x02	; 2
    37c0:	f8 01       	movw	r30, r16
    37c2:	b7 fe       	sbrs	r11, 7
    37c4:	07 c0       	rjmp	.+14     	; 0x37d4 <vfprintf+0x2a6>
    37c6:	60 81       	ld	r22, Z
    37c8:	71 81       	ldd	r23, Z+1	; 0x01
    37ca:	82 81       	ldd	r24, Z+2	; 0x02
    37cc:	93 81       	ldd	r25, Z+3	; 0x03
    37ce:	0c 5f       	subi	r16, 0xFC	; 252
    37d0:	1f 4f       	sbci	r17, 0xFF	; 255
    37d2:	06 c0       	rjmp	.+12     	; 0x37e0 <vfprintf+0x2b2>
    37d4:	60 81       	ld	r22, Z
    37d6:	71 81       	ldd	r23, Z+1	; 0x01
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	0e 5f       	subi	r16, 0xFE	; 254
    37de:	1f 4f       	sbci	r17, 0xFF	; 255
    37e0:	a3 01       	movw	r20, r6
    37e2:	5d d5       	rcall	.+2746   	; 0x429e <__ultoa_invert>
    37e4:	88 2e       	mov	r8, r24
    37e6:	86 18       	sub	r8, r6
    37e8:	fb 2d       	mov	r31, r11
    37ea:	ff 77       	andi	r31, 0x7F	; 127
    37ec:	3f 2e       	mov	r3, r31
    37ee:	36 fe       	sbrs	r3, 6
    37f0:	0d c0       	rjmp	.+26     	; 0x380c <vfprintf+0x2de>
    37f2:	23 2d       	mov	r18, r3
    37f4:	2e 7f       	andi	r18, 0xFE	; 254
    37f6:	a2 2e       	mov	r10, r18
    37f8:	89 14       	cp	r8, r9
    37fa:	58 f4       	brcc	.+22     	; 0x3812 <vfprintf+0x2e4>
    37fc:	34 fe       	sbrs	r3, 4
    37fe:	0b c0       	rjmp	.+22     	; 0x3816 <vfprintf+0x2e8>
    3800:	32 fc       	sbrc	r3, 2
    3802:	09 c0       	rjmp	.+18     	; 0x3816 <vfprintf+0x2e8>
    3804:	83 2d       	mov	r24, r3
    3806:	8e 7e       	andi	r24, 0xEE	; 238
    3808:	a8 2e       	mov	r10, r24
    380a:	05 c0       	rjmp	.+10     	; 0x3816 <vfprintf+0x2e8>
    380c:	b8 2c       	mov	r11, r8
    380e:	a3 2c       	mov	r10, r3
    3810:	03 c0       	rjmp	.+6      	; 0x3818 <vfprintf+0x2ea>
    3812:	b8 2c       	mov	r11, r8
    3814:	01 c0       	rjmp	.+2      	; 0x3818 <vfprintf+0x2ea>
    3816:	b9 2c       	mov	r11, r9
    3818:	a4 fe       	sbrs	r10, 4
    381a:	0f c0       	rjmp	.+30     	; 0x383a <vfprintf+0x30c>
    381c:	fe 01       	movw	r30, r28
    381e:	e8 0d       	add	r30, r8
    3820:	f1 1d       	adc	r31, r1
    3822:	80 81       	ld	r24, Z
    3824:	80 33       	cpi	r24, 0x30	; 48
    3826:	21 f4       	brne	.+8      	; 0x3830 <vfprintf+0x302>
    3828:	9a 2d       	mov	r25, r10
    382a:	99 7e       	andi	r25, 0xE9	; 233
    382c:	a9 2e       	mov	r10, r25
    382e:	09 c0       	rjmp	.+18     	; 0x3842 <vfprintf+0x314>
    3830:	a2 fe       	sbrs	r10, 2
    3832:	06 c0       	rjmp	.+12     	; 0x3840 <vfprintf+0x312>
    3834:	b3 94       	inc	r11
    3836:	b3 94       	inc	r11
    3838:	04 c0       	rjmp	.+8      	; 0x3842 <vfprintf+0x314>
    383a:	8a 2d       	mov	r24, r10
    383c:	86 78       	andi	r24, 0x86	; 134
    383e:	09 f0       	breq	.+2      	; 0x3842 <vfprintf+0x314>
    3840:	b3 94       	inc	r11
    3842:	a3 fc       	sbrc	r10, 3
    3844:	10 c0       	rjmp	.+32     	; 0x3866 <vfprintf+0x338>
    3846:	a0 fe       	sbrs	r10, 0
    3848:	06 c0       	rjmp	.+12     	; 0x3856 <vfprintf+0x328>
    384a:	b2 14       	cp	r11, r2
    384c:	80 f4       	brcc	.+32     	; 0x386e <vfprintf+0x340>
    384e:	28 0c       	add	r2, r8
    3850:	92 2c       	mov	r9, r2
    3852:	9b 18       	sub	r9, r11
    3854:	0d c0       	rjmp	.+26     	; 0x3870 <vfprintf+0x342>
    3856:	b2 14       	cp	r11, r2
    3858:	58 f4       	brcc	.+22     	; 0x3870 <vfprintf+0x342>
    385a:	b6 01       	movw	r22, r12
    385c:	80 e2       	ldi	r24, 0x20	; 32
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	c9 d4       	rcall	.+2450   	; 0x41f4 <fputc>
    3862:	b3 94       	inc	r11
    3864:	f8 cf       	rjmp	.-16     	; 0x3856 <vfprintf+0x328>
    3866:	b2 14       	cp	r11, r2
    3868:	18 f4       	brcc	.+6      	; 0x3870 <vfprintf+0x342>
    386a:	2b 18       	sub	r2, r11
    386c:	02 c0       	rjmp	.+4      	; 0x3872 <vfprintf+0x344>
    386e:	98 2c       	mov	r9, r8
    3870:	21 2c       	mov	r2, r1
    3872:	a4 fe       	sbrs	r10, 4
    3874:	0f c0       	rjmp	.+30     	; 0x3894 <vfprintf+0x366>
    3876:	b6 01       	movw	r22, r12
    3878:	80 e3       	ldi	r24, 0x30	; 48
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	bb d4       	rcall	.+2422   	; 0x41f4 <fputc>
    387e:	a2 fe       	sbrs	r10, 2
    3880:	16 c0       	rjmp	.+44     	; 0x38ae <vfprintf+0x380>
    3882:	a1 fc       	sbrc	r10, 1
    3884:	03 c0       	rjmp	.+6      	; 0x388c <vfprintf+0x35e>
    3886:	88 e7       	ldi	r24, 0x78	; 120
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <vfprintf+0x362>
    388c:	88 e5       	ldi	r24, 0x58	; 88
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	b6 01       	movw	r22, r12
    3892:	0c c0       	rjmp	.+24     	; 0x38ac <vfprintf+0x37e>
    3894:	8a 2d       	mov	r24, r10
    3896:	86 78       	andi	r24, 0x86	; 134
    3898:	51 f0       	breq	.+20     	; 0x38ae <vfprintf+0x380>
    389a:	a1 fe       	sbrs	r10, 1
    389c:	02 c0       	rjmp	.+4      	; 0x38a2 <vfprintf+0x374>
    389e:	8b e2       	ldi	r24, 0x2B	; 43
    38a0:	01 c0       	rjmp	.+2      	; 0x38a4 <vfprintf+0x376>
    38a2:	80 e2       	ldi	r24, 0x20	; 32
    38a4:	a7 fc       	sbrc	r10, 7
    38a6:	8d e2       	ldi	r24, 0x2D	; 45
    38a8:	b6 01       	movw	r22, r12
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	a3 d4       	rcall	.+2374   	; 0x41f4 <fputc>
    38ae:	89 14       	cp	r8, r9
    38b0:	30 f4       	brcc	.+12     	; 0x38be <vfprintf+0x390>
    38b2:	b6 01       	movw	r22, r12
    38b4:	80 e3       	ldi	r24, 0x30	; 48
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	9d d4       	rcall	.+2362   	; 0x41f4 <fputc>
    38ba:	9a 94       	dec	r9
    38bc:	f8 cf       	rjmp	.-16     	; 0x38ae <vfprintf+0x380>
    38be:	8a 94       	dec	r8
    38c0:	f3 01       	movw	r30, r6
    38c2:	e8 0d       	add	r30, r8
    38c4:	f1 1d       	adc	r31, r1
    38c6:	80 81       	ld	r24, Z
    38c8:	b6 01       	movw	r22, r12
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	93 d4       	rcall	.+2342   	; 0x41f4 <fputc>
    38ce:	81 10       	cpse	r8, r1
    38d0:	f6 cf       	rjmp	.-20     	; 0x38be <vfprintf+0x390>
    38d2:	22 20       	and	r2, r2
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <vfprintf+0x3aa>
    38d6:	4e ce       	rjmp	.-868    	; 0x3574 <vfprintf+0x46>
    38d8:	b6 01       	movw	r22, r12
    38da:	80 e2       	ldi	r24, 0x20	; 32
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	8a d4       	rcall	.+2324   	; 0x41f4 <fputc>
    38e0:	2a 94       	dec	r2
    38e2:	f7 cf       	rjmp	.-18     	; 0x38d2 <vfprintf+0x3a4>
    38e4:	f6 01       	movw	r30, r12
    38e6:	86 81       	ldd	r24, Z+6	; 0x06
    38e8:	97 81       	ldd	r25, Z+7	; 0x07
    38ea:	02 c0       	rjmp	.+4      	; 0x38f0 <vfprintf+0x3c2>
    38ec:	8f ef       	ldi	r24, 0xFF	; 255
    38ee:	9f ef       	ldi	r25, 0xFF	; 255
    38f0:	2b 96       	adiw	r28, 0x0b	; 11
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    38fe:	ff 90       	pop	r15
    3900:	ef 90       	pop	r14
    3902:	df 90       	pop	r13
    3904:	cf 90       	pop	r12
    3906:	bf 90       	pop	r11
    3908:	af 90       	pop	r10
    390a:	9f 90       	pop	r9
    390c:	8f 90       	pop	r8
    390e:	7f 90       	pop	r7
    3910:	6f 90       	pop	r6
    3912:	5f 90       	pop	r5
    3914:	4f 90       	pop	r4
    3916:	3f 90       	pop	r3
    3918:	2f 90       	pop	r2
    391a:	08 95       	ret

0000391c <putval>:
    391c:	20 fd       	sbrc	r18, 0
    391e:	09 c0       	rjmp	.+18     	; 0x3932 <putval+0x16>
    3920:	fc 01       	movw	r30, r24
    3922:	23 fd       	sbrc	r18, 3
    3924:	05 c0       	rjmp	.+10     	; 0x3930 <putval+0x14>
    3926:	22 ff       	sbrs	r18, 2
    3928:	02 c0       	rjmp	.+4      	; 0x392e <putval+0x12>
    392a:	73 83       	std	Z+3, r23	; 0x03
    392c:	62 83       	std	Z+2, r22	; 0x02
    392e:	51 83       	std	Z+1, r21	; 0x01
    3930:	40 83       	st	Z, r20
    3932:	08 95       	ret

00003934 <mulacc>:
    3934:	44 fd       	sbrc	r20, 4
    3936:	17 c0       	rjmp	.+46     	; 0x3966 <mulacc+0x32>
    3938:	46 fd       	sbrc	r20, 6
    393a:	17 c0       	rjmp	.+46     	; 0x396a <mulacc+0x36>
    393c:	ab 01       	movw	r20, r22
    393e:	bc 01       	movw	r22, r24
    3940:	da 01       	movw	r26, r20
    3942:	fb 01       	movw	r30, r22
    3944:	aa 0f       	add	r26, r26
    3946:	bb 1f       	adc	r27, r27
    3948:	ee 1f       	adc	r30, r30
    394a:	ff 1f       	adc	r31, r31
    394c:	10 94       	com	r1
    394e:	d1 f7       	brne	.-12     	; 0x3944 <mulacc+0x10>
    3950:	4a 0f       	add	r20, r26
    3952:	5b 1f       	adc	r21, r27
    3954:	6e 1f       	adc	r22, r30
    3956:	7f 1f       	adc	r23, r31
    3958:	cb 01       	movw	r24, r22
    395a:	ba 01       	movw	r22, r20
    395c:	66 0f       	add	r22, r22
    395e:	77 1f       	adc	r23, r23
    3960:	88 1f       	adc	r24, r24
    3962:	99 1f       	adc	r25, r25
    3964:	09 c0       	rjmp	.+18     	; 0x3978 <mulacc+0x44>
    3966:	33 e0       	ldi	r19, 0x03	; 3
    3968:	01 c0       	rjmp	.+2      	; 0x396c <mulacc+0x38>
    396a:	34 e0       	ldi	r19, 0x04	; 4
    396c:	66 0f       	add	r22, r22
    396e:	77 1f       	adc	r23, r23
    3970:	88 1f       	adc	r24, r24
    3972:	99 1f       	adc	r25, r25
    3974:	31 50       	subi	r19, 0x01	; 1
    3976:	d1 f7       	brne	.-12     	; 0x396c <mulacc+0x38>
    3978:	62 0f       	add	r22, r18
    397a:	71 1d       	adc	r23, r1
    397c:	81 1d       	adc	r24, r1
    397e:	91 1d       	adc	r25, r1
    3980:	08 95       	ret

00003982 <skip_spaces>:
    3982:	0f 93       	push	r16
    3984:	1f 93       	push	r17
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	8c 01       	movw	r16, r24
    398c:	c8 01       	movw	r24, r16
    398e:	f4 d3       	rcall	.+2024   	; 0x4178 <fgetc>
    3990:	ec 01       	movw	r28, r24
    3992:	97 fd       	sbrc	r25, 7
    3994:	06 c0       	rjmp	.+12     	; 0x39a2 <skip_spaces+0x20>
    3996:	c0 d3       	rcall	.+1920   	; 0x4118 <isspace>
    3998:	89 2b       	or	r24, r25
    399a:	c1 f7       	brne	.-16     	; 0x398c <skip_spaces+0xa>
    399c:	b8 01       	movw	r22, r16
    399e:	ce 01       	movw	r24, r28
    39a0:	65 d4       	rcall	.+2250   	; 0x426c <ungetc>
    39a2:	ce 01       	movw	r24, r28
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	1f 91       	pop	r17
    39aa:	0f 91       	pop	r16
    39ac:	08 95       	ret

000039ae <conv_int>:
    39ae:	8f 92       	push	r8
    39b0:	9f 92       	push	r9
    39b2:	af 92       	push	r10
    39b4:	bf 92       	push	r11
    39b6:	ef 92       	push	r14
    39b8:	ff 92       	push	r15
    39ba:	0f 93       	push	r16
    39bc:	1f 93       	push	r17
    39be:	cf 93       	push	r28
    39c0:	df 93       	push	r29
    39c2:	8c 01       	movw	r16, r24
    39c4:	d6 2f       	mov	r29, r22
    39c6:	7a 01       	movw	r14, r20
    39c8:	b2 2e       	mov	r11, r18
    39ca:	d6 d3       	rcall	.+1964   	; 0x4178 <fgetc>
    39cc:	9c 01       	movw	r18, r24
    39ce:	33 27       	eor	r19, r19
    39d0:	2b 32       	cpi	r18, 0x2B	; 43
    39d2:	31 05       	cpc	r19, r1
    39d4:	31 f0       	breq	.+12     	; 0x39e2 <conv_int+0x34>
    39d6:	2d 32       	cpi	r18, 0x2D	; 45
    39d8:	31 05       	cpc	r19, r1
    39da:	59 f4       	brne	.+22     	; 0x39f2 <conv_int+0x44>
    39dc:	8b 2d       	mov	r24, r11
    39de:	80 68       	ori	r24, 0x80	; 128
    39e0:	b8 2e       	mov	r11, r24
    39e2:	d1 50       	subi	r29, 0x01	; 1
    39e4:	11 f4       	brne	.+4      	; 0x39ea <conv_int+0x3c>
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	61 c0       	rjmp	.+194    	; 0x3aac <conv_int+0xfe>
    39ea:	c8 01       	movw	r24, r16
    39ec:	c5 d3       	rcall	.+1930   	; 0x4178 <fgetc>
    39ee:	97 fd       	sbrc	r25, 7
    39f0:	fa cf       	rjmp	.-12     	; 0x39e6 <conv_int+0x38>
    39f2:	cb 2d       	mov	r28, r11
    39f4:	cd 7f       	andi	r28, 0xFD	; 253
    39f6:	2b 2d       	mov	r18, r11
    39f8:	20 73       	andi	r18, 0x30	; 48
    39fa:	f9 f4       	brne	.+62     	; 0x3a3a <conv_int+0x8c>
    39fc:	80 33       	cpi	r24, 0x30	; 48
    39fe:	e9 f4       	brne	.+58     	; 0x3a3a <conv_int+0x8c>
    3a00:	aa 24       	eor	r10, r10
    3a02:	aa 94       	dec	r10
    3a04:	ad 0e       	add	r10, r29
    3a06:	09 f4       	brne	.+2      	; 0x3a0a <conv_int+0x5c>
    3a08:	3e c0       	rjmp	.+124    	; 0x3a86 <conv_int+0xd8>
    3a0a:	c8 01       	movw	r24, r16
    3a0c:	b5 d3       	rcall	.+1898   	; 0x4178 <fgetc>
    3a0e:	97 fd       	sbrc	r25, 7
    3a10:	3a c0       	rjmp	.+116    	; 0x3a86 <conv_int+0xd8>
    3a12:	9c 01       	movw	r18, r24
    3a14:	2f 7d       	andi	r18, 0xDF	; 223
    3a16:	33 27       	eor	r19, r19
    3a18:	28 35       	cpi	r18, 0x58	; 88
    3a1a:	31 05       	cpc	r19, r1
    3a1c:	41 f4       	brne	.+16     	; 0x3a2e <conv_int+0x80>
    3a1e:	c2 64       	ori	r28, 0x42	; 66
    3a20:	d2 50       	subi	r29, 0x02	; 2
    3a22:	89 f1       	breq	.+98     	; 0x3a86 <conv_int+0xd8>
    3a24:	c8 01       	movw	r24, r16
    3a26:	a8 d3       	rcall	.+1872   	; 0x4178 <fgetc>
    3a28:	97 ff       	sbrs	r25, 7
    3a2a:	07 c0       	rjmp	.+14     	; 0x3a3a <conv_int+0x8c>
    3a2c:	2c c0       	rjmp	.+88     	; 0x3a86 <conv_int+0xd8>
    3a2e:	b6 fe       	sbrs	r11, 6
    3a30:	02 c0       	rjmp	.+4      	; 0x3a36 <conv_int+0x88>
    3a32:	c2 60       	ori	r28, 0x02	; 2
    3a34:	01 c0       	rjmp	.+2      	; 0x3a38 <conv_int+0x8a>
    3a36:	c2 61       	ori	r28, 0x12	; 18
    3a38:	da 2d       	mov	r29, r10
    3a3a:	81 2c       	mov	r8, r1
    3a3c:	91 2c       	mov	r9, r1
    3a3e:	54 01       	movw	r10, r8
    3a40:	20 ed       	ldi	r18, 0xD0	; 208
    3a42:	28 0f       	add	r18, r24
    3a44:	28 30       	cpi	r18, 0x08	; 8
    3a46:	78 f0       	brcs	.+30     	; 0x3a66 <conv_int+0xb8>
    3a48:	c4 ff       	sbrs	r28, 4
    3a4a:	03 c0       	rjmp	.+6      	; 0x3a52 <conv_int+0xa4>
    3a4c:	b8 01       	movw	r22, r16
    3a4e:	0e d4       	rcall	.+2076   	; 0x426c <ungetc>
    3a50:	17 c0       	rjmp	.+46     	; 0x3a80 <conv_int+0xd2>
    3a52:	2a 30       	cpi	r18, 0x0A	; 10
    3a54:	40 f0       	brcs	.+16     	; 0x3a66 <conv_int+0xb8>
    3a56:	c6 ff       	sbrs	r28, 6
    3a58:	f9 cf       	rjmp	.-14     	; 0x3a4c <conv_int+0x9e>
    3a5a:	2f 7d       	andi	r18, 0xDF	; 223
    3a5c:	3f ee       	ldi	r19, 0xEF	; 239
    3a5e:	32 0f       	add	r19, r18
    3a60:	36 30       	cpi	r19, 0x06	; 6
    3a62:	a0 f7       	brcc	.-24     	; 0x3a4c <conv_int+0x9e>
    3a64:	27 50       	subi	r18, 0x07	; 7
    3a66:	4c 2f       	mov	r20, r28
    3a68:	c5 01       	movw	r24, r10
    3a6a:	b4 01       	movw	r22, r8
    3a6c:	63 df       	rcall	.-314    	; 0x3934 <mulacc>
    3a6e:	4b 01       	movw	r8, r22
    3a70:	5c 01       	movw	r10, r24
    3a72:	c2 60       	ori	r28, 0x02	; 2
    3a74:	d1 50       	subi	r29, 0x01	; 1
    3a76:	51 f0       	breq	.+20     	; 0x3a8c <conv_int+0xde>
    3a78:	c8 01       	movw	r24, r16
    3a7a:	7e d3       	rcall	.+1788   	; 0x4178 <fgetc>
    3a7c:	97 ff       	sbrs	r25, 7
    3a7e:	e0 cf       	rjmp	.-64     	; 0x3a40 <conv_int+0x92>
    3a80:	c1 fd       	sbrc	r28, 1
    3a82:	04 c0       	rjmp	.+8      	; 0x3a8c <conv_int+0xde>
    3a84:	b0 cf       	rjmp	.-160    	; 0x39e6 <conv_int+0x38>
    3a86:	81 2c       	mov	r8, r1
    3a88:	91 2c       	mov	r9, r1
    3a8a:	54 01       	movw	r10, r8
    3a8c:	c7 ff       	sbrs	r28, 7
    3a8e:	08 c0       	rjmp	.+16     	; 0x3aa0 <conv_int+0xf2>
    3a90:	b0 94       	com	r11
    3a92:	a0 94       	com	r10
    3a94:	90 94       	com	r9
    3a96:	80 94       	com	r8
    3a98:	81 1c       	adc	r8, r1
    3a9a:	91 1c       	adc	r9, r1
    3a9c:	a1 1c       	adc	r10, r1
    3a9e:	b1 1c       	adc	r11, r1
    3aa0:	2c 2f       	mov	r18, r28
    3aa2:	b5 01       	movw	r22, r10
    3aa4:	a4 01       	movw	r20, r8
    3aa6:	c7 01       	movw	r24, r14
    3aa8:	39 df       	rcall	.-398    	; 0x391c <putval>
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	bf 90       	pop	r11
    3aba:	af 90       	pop	r10
    3abc:	9f 90       	pop	r9
    3abe:	8f 90       	pop	r8
    3ac0:	08 95       	ret

00003ac2 <conv_brk>:
    3ac2:	5f 92       	push	r5
    3ac4:	6f 92       	push	r6
    3ac6:	7f 92       	push	r7
    3ac8:	8f 92       	push	r8
    3aca:	9f 92       	push	r9
    3acc:	af 92       	push	r10
    3ace:	bf 92       	push	r11
    3ad0:	cf 92       	push	r12
    3ad2:	df 92       	push	r13
    3ad4:	ef 92       	push	r14
    3ad6:	ff 92       	push	r15
    3ad8:	0f 93       	push	r16
    3ada:	1f 93       	push	r17
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	a0 97       	sbiw	r28, 0x20	; 32
    3ae6:	cd bf       	out	0x3d, r28	; 61
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	5c 01       	movw	r10, r24
    3aec:	96 2e       	mov	r9, r22
    3aee:	7a 01       	movw	r14, r20
    3af0:	f9 01       	movw	r30, r18
    3af2:	8e 01       	movw	r16, r28
    3af4:	0f 5f       	subi	r16, 0xFF	; 255
    3af6:	1f 4f       	sbci	r17, 0xFF	; 255
    3af8:	68 01       	movw	r12, r16
    3afa:	80 e2       	ldi	r24, 0x20	; 32
    3afc:	d8 01       	movw	r26, r16
    3afe:	1d 92       	st	X+, r1
    3b00:	8a 95       	dec	r24
    3b02:	e9 f7       	brne	.-6      	; 0x3afe <conv_brk+0x3c>
    3b04:	d5 01       	movw	r26, r10
    3b06:	13 96       	adiw	r26, 0x03	; 3
    3b08:	8c 90       	ld	r8, X
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	61 2c       	mov	r6, r1
    3b10:	71 2c       	mov	r7, r1
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	61 e0       	ldi	r22, 0x01	; 1
    3b16:	70 e0       	ldi	r23, 0x00	; 0
    3b18:	83 fc       	sbrc	r8, 3
    3b1a:	25 91       	lpm	r18, Z+
    3b1c:	83 fe       	sbrs	r8, 3
    3b1e:	21 91       	ld	r18, Z+
    3b20:	8f 01       	movw	r16, r30
    3b22:	52 2e       	mov	r5, r18
    3b24:	21 11       	cpse	r18, r1
    3b26:	03 c0       	rjmp	.+6      	; 0x3b2e <conv_brk+0x6c>
    3b28:	80 e0       	ldi	r24, 0x00	; 0
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	90 c0       	rjmp	.+288    	; 0x3c4e <conv_brk+0x18c>
    3b2e:	2e 35       	cpi	r18, 0x5E	; 94
    3b30:	11 f4       	brne	.+4      	; 0x3b36 <conv_brk+0x74>
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	51 f1       	breq	.+84     	; 0x3b8a <conv_brk+0xc8>
    3b36:	43 2f       	mov	r20, r19
    3b38:	50 e0       	ldi	r21, 0x00	; 0
    3b3a:	48 17       	cp	r20, r24
    3b3c:	59 07       	cpc	r21, r25
    3b3e:	3c f4       	brge	.+14     	; 0x3b4e <conv_brk+0x8c>
    3b40:	2d 35       	cpi	r18, 0x5D	; 93
    3b42:	59 f1       	breq	.+86     	; 0x3b9a <conv_brk+0xd8>
    3b44:	2d 32       	cpi	r18, 0x2D	; 45
    3b46:	19 f4       	brne	.+6      	; 0x3b4e <conv_brk+0x8c>
    3b48:	77 20       	and	r7, r7
    3b4a:	09 f1       	breq	.+66     	; 0x3b8e <conv_brk+0xcc>
    3b4c:	03 c0       	rjmp	.+6      	; 0x3b54 <conv_brk+0x92>
    3b4e:	77 20       	and	r7, r7
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <conv_brk+0x92>
    3b52:	68 c0       	rjmp	.+208    	; 0x3c24 <conv_brk+0x162>
    3b54:	45 2d       	mov	r20, r5
    3b56:	46 95       	lsr	r20
    3b58:	46 95       	lsr	r20
    3b5a:	46 95       	lsr	r20
    3b5c:	d6 01       	movw	r26, r12
    3b5e:	a4 0f       	add	r26, r20
    3b60:	b1 1d       	adc	r27, r1
    3b62:	45 2d       	mov	r20, r5
    3b64:	47 70       	andi	r20, 0x07	; 7
    3b66:	8b 01       	movw	r16, r22
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <conv_brk+0xac>
    3b6a:	00 0f       	add	r16, r16
    3b6c:	11 1f       	adc	r17, r17
    3b6e:	4a 95       	dec	r20
    3b70:	e2 f7       	brpl	.-8      	; 0x3b6a <conv_brk+0xa8>
    3b72:	a8 01       	movw	r20, r16
    3b74:	5c 91       	ld	r21, X
    3b76:	45 2b       	or	r20, r21
    3b78:	4c 93       	st	X, r20
    3b7a:	65 14       	cp	r6, r5
    3b7c:	59 f0       	breq	.+22     	; 0x3b94 <conv_brk+0xd2>
    3b7e:	56 14       	cp	r5, r6
    3b80:	10 f4       	brcc	.+4      	; 0x3b86 <conv_brk+0xc4>
    3b82:	53 94       	inc	r5
    3b84:	e7 cf       	rjmp	.-50     	; 0x3b54 <conv_brk+0x92>
    3b86:	5a 94       	dec	r5
    3b88:	e5 cf       	rjmp	.-54     	; 0x3b54 <conv_brk+0x92>
    3b8a:	31 e0       	ldi	r19, 0x01	; 1
    3b8c:	04 c0       	rjmp	.+8      	; 0x3b96 <conv_brk+0xd4>
    3b8e:	77 24       	eor	r7, r7
    3b90:	73 94       	inc	r7
    3b92:	01 c0       	rjmp	.+2      	; 0x3b96 <conv_brk+0xd4>
    3b94:	71 2c       	mov	r7, r1
    3b96:	01 96       	adiw	r24, 0x01	; 1
    3b98:	bf cf       	rjmp	.-130    	; 0x3b18 <conv_brk+0x56>
    3b9a:	77 20       	and	r7, r7
    3b9c:	19 f0       	breq	.+6      	; 0x3ba4 <conv_brk+0xe2>
    3b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    3ba0:	80 62       	ori	r24, 0x20	; 32
    3ba2:	8e 83       	std	Y+6, r24	; 0x06
    3ba4:	31 11       	cpse	r19, r1
    3ba6:	03 c0       	rjmp	.+6      	; 0x3bae <conv_brk+0xec>
    3ba8:	88 24       	eor	r8, r8
    3baa:	83 94       	inc	r8
    3bac:	17 c0       	rjmp	.+46     	; 0x3bdc <conv_brk+0x11a>
    3bae:	f6 01       	movw	r30, r12
    3bb0:	9e 01       	movw	r18, r28
    3bb2:	2f 5d       	subi	r18, 0xDF	; 223
    3bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb6:	80 81       	ld	r24, Z
    3bb8:	80 95       	com	r24
    3bba:	81 93       	st	Z+, r24
    3bbc:	2e 17       	cp	r18, r30
    3bbe:	3f 07       	cpc	r19, r31
    3bc0:	d1 f7       	brne	.-12     	; 0x3bb6 <conv_brk+0xf4>
    3bc2:	f2 cf       	rjmp	.-28     	; 0x3ba8 <conv_brk+0xe6>
    3bc4:	e1 14       	cp	r14, r1
    3bc6:	f1 04       	cpc	r15, r1
    3bc8:	29 f0       	breq	.+10     	; 0x3bd4 <conv_brk+0x112>
    3bca:	d7 01       	movw	r26, r14
    3bcc:	8c 93       	st	X, r24
    3bce:	f7 01       	movw	r30, r14
    3bd0:	31 96       	adiw	r30, 0x01	; 1
    3bd2:	7f 01       	movw	r14, r30
    3bd4:	9a 94       	dec	r9
    3bd6:	81 2c       	mov	r8, r1
    3bd8:	99 20       	and	r9, r9
    3bda:	e9 f0       	breq	.+58     	; 0x3c16 <conv_brk+0x154>
    3bdc:	c5 01       	movw	r24, r10
    3bde:	cc d2       	rcall	.+1432   	; 0x4178 <fgetc>
    3be0:	97 fd       	sbrc	r25, 7
    3be2:	17 c0       	rjmp	.+46     	; 0x3c12 <conv_brk+0x150>
    3be4:	fc 01       	movw	r30, r24
    3be6:	ff 27       	eor	r31, r31
    3be8:	23 e0       	ldi	r18, 0x03	; 3
    3bea:	f5 95       	asr	r31
    3bec:	e7 95       	ror	r30
    3bee:	2a 95       	dec	r18
    3bf0:	e1 f7       	brne	.-8      	; 0x3bea <conv_brk+0x128>
    3bf2:	ec 0d       	add	r30, r12
    3bf4:	fd 1d       	adc	r31, r13
    3bf6:	20 81       	ld	r18, Z
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	ac 01       	movw	r20, r24
    3bfc:	47 70       	andi	r20, 0x07	; 7
    3bfe:	55 27       	eor	r21, r21
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <conv_brk+0x144>
    3c02:	35 95       	asr	r19
    3c04:	27 95       	ror	r18
    3c06:	4a 95       	dec	r20
    3c08:	e2 f7       	brpl	.-8      	; 0x3c02 <conv_brk+0x140>
    3c0a:	20 fd       	sbrc	r18, 0
    3c0c:	db cf       	rjmp	.-74     	; 0x3bc4 <conv_brk+0x102>
    3c0e:	b5 01       	movw	r22, r10
    3c10:	2d d3       	rcall	.+1626   	; 0x426c <ungetc>
    3c12:	81 10       	cpse	r8, r1
    3c14:	89 cf       	rjmp	.-238    	; 0x3b28 <conv_brk+0x66>
    3c16:	e1 14       	cp	r14, r1
    3c18:	f1 04       	cpc	r15, r1
    3c1a:	11 f0       	breq	.+4      	; 0x3c20 <conv_brk+0x15e>
    3c1c:	d7 01       	movw	r26, r14
    3c1e:	1c 92       	st	X, r1
    3c20:	c8 01       	movw	r24, r16
    3c22:	15 c0       	rjmp	.+42     	; 0x3c4e <conv_brk+0x18c>
    3c24:	42 2f       	mov	r20, r18
    3c26:	46 95       	lsr	r20
    3c28:	46 95       	lsr	r20
    3c2a:	46 95       	lsr	r20
    3c2c:	d6 01       	movw	r26, r12
    3c2e:	a4 0f       	add	r26, r20
    3c30:	b1 1d       	adc	r27, r1
    3c32:	42 2f       	mov	r20, r18
    3c34:	47 70       	andi	r20, 0x07	; 7
    3c36:	8b 01       	movw	r16, r22
    3c38:	02 c0       	rjmp	.+4      	; 0x3c3e <conv_brk+0x17c>
    3c3a:	00 0f       	add	r16, r16
    3c3c:	11 1f       	adc	r17, r17
    3c3e:	4a 95       	dec	r20
    3c40:	e2 f7       	brpl	.-8      	; 0x3c3a <conv_brk+0x178>
    3c42:	a8 01       	movw	r20, r16
    3c44:	5c 91       	ld	r21, X
    3c46:	45 2b       	or	r20, r21
    3c48:	4c 93       	st	X, r20
    3c4a:	62 2e       	mov	r6, r18
    3c4c:	a4 cf       	rjmp	.-184    	; 0x3b96 <conv_brk+0xd4>
    3c4e:	a0 96       	adiw	r28, 0x20	; 32
    3c50:	cd bf       	out	0x3d, r28	; 61
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	1f 91       	pop	r17
    3c5a:	0f 91       	pop	r16
    3c5c:	ff 90       	pop	r15
    3c5e:	ef 90       	pop	r14
    3c60:	df 90       	pop	r13
    3c62:	cf 90       	pop	r12
    3c64:	bf 90       	pop	r11
    3c66:	af 90       	pop	r10
    3c68:	9f 90       	pop	r9
    3c6a:	8f 90       	pop	r8
    3c6c:	7f 90       	pop	r7
    3c6e:	6f 90       	pop	r6
    3c70:	5f 90       	pop	r5
    3c72:	08 95       	ret

00003c74 <vfscanf>:
    3c74:	5f 92       	push	r5
    3c76:	6f 92       	push	r6
    3c78:	7f 92       	push	r7
    3c7a:	8f 92       	push	r8
    3c7c:	9f 92       	push	r9
    3c7e:	af 92       	push	r10
    3c80:	bf 92       	push	r11
    3c82:	cf 92       	push	r12
    3c84:	df 92       	push	r13
    3c86:	ef 92       	push	r14
    3c88:	ff 92       	push	r15
    3c8a:	0f 93       	push	r16
    3c8c:	1f 93       	push	r17
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
    3c92:	6c 01       	movw	r12, r24
    3c94:	eb 01       	movw	r28, r22
    3c96:	5a 01       	movw	r10, r20
    3c98:	fc 01       	movw	r30, r24
    3c9a:	16 82       	std	Z+6, r1	; 0x06
    3c9c:	17 82       	std	Z+7, r1	; 0x07
    3c9e:	51 2c       	mov	r5, r1
    3ca0:	f6 01       	movw	r30, r12
    3ca2:	e3 80       	ldd	r14, Z+3	; 0x03
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	e3 fc       	sbrc	r14, 3
    3ca8:	85 91       	lpm	r24, Z+
    3caa:	e3 fe       	sbrs	r14, 3
    3cac:	81 91       	ld	r24, Z+
    3cae:	18 2f       	mov	r17, r24
    3cb0:	ef 01       	movw	r28, r30
    3cb2:	88 23       	and	r24, r24
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <vfscanf+0x44>
    3cb6:	e0 c0       	rjmp	.+448    	; 0x3e78 <vfscanf+0x204>
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	2e d2       	rcall	.+1116   	; 0x4118 <isspace>
    3cbc:	89 2b       	or	r24, r25
    3cbe:	19 f0       	breq	.+6      	; 0x3cc6 <vfscanf+0x52>
    3cc0:	c6 01       	movw	r24, r12
    3cc2:	5f de       	rcall	.-834    	; 0x3982 <skip_spaces>
    3cc4:	ed cf       	rjmp	.-38     	; 0x3ca0 <vfscanf+0x2c>
    3cc6:	15 32       	cpi	r17, 0x25	; 37
    3cc8:	41 f4       	brne	.+16     	; 0x3cda <vfscanf+0x66>
    3cca:	fe 01       	movw	r30, r28
    3ccc:	e3 fc       	sbrc	r14, 3
    3cce:	15 91       	lpm	r17, Z+
    3cd0:	e3 fe       	sbrs	r14, 3
    3cd2:	11 91       	ld	r17, Z+
    3cd4:	ef 01       	movw	r28, r30
    3cd6:	15 32       	cpi	r17, 0x25	; 37
    3cd8:	71 f4       	brne	.+28     	; 0x3cf6 <vfscanf+0x82>
    3cda:	c6 01       	movw	r24, r12
    3cdc:	4d d2       	rcall	.+1178   	; 0x4178 <fgetc>
    3cde:	97 fd       	sbrc	r25, 7
    3ce0:	c9 c0       	rjmp	.+402    	; 0x3e74 <vfscanf+0x200>
    3ce2:	41 2f       	mov	r20, r17
    3ce4:	50 e0       	ldi	r21, 0x00	; 0
    3ce6:	9c 01       	movw	r18, r24
    3ce8:	33 27       	eor	r19, r19
    3cea:	24 17       	cp	r18, r20
    3cec:	35 07       	cpc	r19, r21
    3cee:	c1 f2       	breq	.-80     	; 0x3ca0 <vfscanf+0x2c>
    3cf0:	b6 01       	movw	r22, r12
    3cf2:	bc d2       	rcall	.+1400   	; 0x426c <ungetc>
    3cf4:	c1 c0       	rjmp	.+386    	; 0x3e78 <vfscanf+0x204>
    3cf6:	1a 32       	cpi	r17, 0x2A	; 42
    3cf8:	39 f4       	brne	.+14     	; 0x3d08 <vfscanf+0x94>
    3cfa:	e3 fc       	sbrc	r14, 3
    3cfc:	15 91       	lpm	r17, Z+
    3cfe:	e3 fe       	sbrs	r14, 3
    3d00:	11 91       	ld	r17, Z+
    3d02:	ef 01       	movw	r28, r30
    3d04:	01 e0       	ldi	r16, 0x01	; 1
    3d06:	01 c0       	rjmp	.+2      	; 0x3d0a <vfscanf+0x96>
    3d08:	00 e0       	ldi	r16, 0x00	; 0
    3d0a:	f1 2c       	mov	r15, r1
    3d0c:	20 ed       	ldi	r18, 0xD0	; 208
    3d0e:	21 0f       	add	r18, r17
    3d10:	2a 30       	cpi	r18, 0x0A	; 10
    3d12:	78 f4       	brcc	.+30     	; 0x3d32 <vfscanf+0xbe>
    3d14:	02 60       	ori	r16, 0x02	; 2
    3d16:	6f 2d       	mov	r22, r15
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	40 e2       	ldi	r20, 0x20	; 32
    3d20:	09 de       	rcall	.-1006   	; 0x3934 <mulacc>
    3d22:	f6 2e       	mov	r15, r22
    3d24:	fe 01       	movw	r30, r28
    3d26:	e3 fc       	sbrc	r14, 3
    3d28:	15 91       	lpm	r17, Z+
    3d2a:	e3 fe       	sbrs	r14, 3
    3d2c:	11 91       	ld	r17, Z+
    3d2e:	ef 01       	movw	r28, r30
    3d30:	ed cf       	rjmp	.-38     	; 0x3d0c <vfscanf+0x98>
    3d32:	01 ff       	sbrs	r16, 1
    3d34:	03 c0       	rjmp	.+6      	; 0x3d3c <vfscanf+0xc8>
    3d36:	f1 10       	cpse	r15, r1
    3d38:	03 c0       	rjmp	.+6      	; 0x3d40 <vfscanf+0xcc>
    3d3a:	9e c0       	rjmp	.+316    	; 0x3e78 <vfscanf+0x204>
    3d3c:	ff 24       	eor	r15, r15
    3d3e:	fa 94       	dec	r15
    3d40:	18 36       	cpi	r17, 0x68	; 104
    3d42:	19 f0       	breq	.+6      	; 0x3d4a <vfscanf+0xd6>
    3d44:	1c 36       	cpi	r17, 0x6C	; 108
    3d46:	51 f0       	breq	.+20     	; 0x3d5c <vfscanf+0xe8>
    3d48:	10 c0       	rjmp	.+32     	; 0x3d6a <vfscanf+0xf6>
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e3 fc       	sbrc	r14, 3
    3d4e:	15 91       	lpm	r17, Z+
    3d50:	e3 fe       	sbrs	r14, 3
    3d52:	11 91       	ld	r17, Z+
    3d54:	ef 01       	movw	r28, r30
    3d56:	18 36       	cpi	r17, 0x68	; 104
    3d58:	41 f4       	brne	.+16     	; 0x3d6a <vfscanf+0xf6>
    3d5a:	08 60       	ori	r16, 0x08	; 8
    3d5c:	04 60       	ori	r16, 0x04	; 4
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e3 fc       	sbrc	r14, 3
    3d62:	15 91       	lpm	r17, Z+
    3d64:	e3 fe       	sbrs	r14, 3
    3d66:	11 91       	ld	r17, Z+
    3d68:	ef 01       	movw	r28, r30
    3d6a:	11 23       	and	r17, r17
    3d6c:	09 f4       	brne	.+2      	; 0x3d70 <vfscanf+0xfc>
    3d6e:	84 c0       	rjmp	.+264    	; 0x3e78 <vfscanf+0x204>
    3d70:	61 2f       	mov	r22, r17
    3d72:	70 e0       	ldi	r23, 0x00	; 0
    3d74:	8e e7       	ldi	r24, 0x7E	; 126
    3d76:	92 e0       	ldi	r25, 0x02	; 2
    3d78:	d7 d1       	rcall	.+942    	; 0x4128 <strchr_P>
    3d7a:	89 2b       	or	r24, r25
    3d7c:	09 f4       	brne	.+2      	; 0x3d80 <vfscanf+0x10c>
    3d7e:	7c c0       	rjmp	.+248    	; 0x3e78 <vfscanf+0x204>
    3d80:	00 fd       	sbrc	r16, 0
    3d82:	07 c0       	rjmp	.+14     	; 0x3d92 <vfscanf+0x11e>
    3d84:	f5 01       	movw	r30, r10
    3d86:	80 80       	ld	r8, Z
    3d88:	91 80       	ldd	r9, Z+1	; 0x01
    3d8a:	c5 01       	movw	r24, r10
    3d8c:	02 96       	adiw	r24, 0x02	; 2
    3d8e:	5c 01       	movw	r10, r24
    3d90:	02 c0       	rjmp	.+4      	; 0x3d96 <vfscanf+0x122>
    3d92:	81 2c       	mov	r8, r1
    3d94:	91 2c       	mov	r9, r1
    3d96:	1e 36       	cpi	r17, 0x6E	; 110
    3d98:	49 f4       	brne	.+18     	; 0x3dac <vfscanf+0x138>
    3d9a:	f6 01       	movw	r30, r12
    3d9c:	46 81       	ldd	r20, Z+6	; 0x06
    3d9e:	57 81       	ldd	r21, Z+7	; 0x07
    3da0:	60 e0       	ldi	r22, 0x00	; 0
    3da2:	70 e0       	ldi	r23, 0x00	; 0
    3da4:	20 2f       	mov	r18, r16
    3da6:	c4 01       	movw	r24, r8
    3da8:	b9 dd       	rcall	.-1166   	; 0x391c <putval>
    3daa:	7a cf       	rjmp	.-268    	; 0x3ca0 <vfscanf+0x2c>
    3dac:	13 36       	cpi	r17, 0x63	; 99
    3dae:	a1 f4       	brne	.+40     	; 0x3dd8 <vfscanf+0x164>
    3db0:	01 fd       	sbrc	r16, 1
    3db2:	02 c0       	rjmp	.+4      	; 0x3db8 <vfscanf+0x144>
    3db4:	ff 24       	eor	r15, r15
    3db6:	f3 94       	inc	r15
    3db8:	c6 01       	movw	r24, r12
    3dba:	de d1       	rcall	.+956    	; 0x4178 <fgetc>
    3dbc:	97 fd       	sbrc	r25, 7
    3dbe:	5a c0       	rjmp	.+180    	; 0x3e74 <vfscanf+0x200>
    3dc0:	81 14       	cp	r8, r1
    3dc2:	91 04       	cpc	r9, r1
    3dc4:	29 f0       	breq	.+10     	; 0x3dd0 <vfscanf+0x15c>
    3dc6:	f4 01       	movw	r30, r8
    3dc8:	80 83       	st	Z, r24
    3dca:	c4 01       	movw	r24, r8
    3dcc:	01 96       	adiw	r24, 0x01	; 1
    3dce:	4c 01       	movw	r8, r24
    3dd0:	fa 94       	dec	r15
    3dd2:	f1 10       	cpse	r15, r1
    3dd4:	f1 cf       	rjmp	.-30     	; 0x3db8 <vfscanf+0x144>
    3dd6:	4a c0       	rjmp	.+148    	; 0x3e6c <vfscanf+0x1f8>
    3dd8:	1b 35       	cpi	r17, 0x5B	; 91
    3dda:	51 f4       	brne	.+20     	; 0x3df0 <vfscanf+0x17c>
    3ddc:	9e 01       	movw	r18, r28
    3dde:	a4 01       	movw	r20, r8
    3de0:	6f 2d       	mov	r22, r15
    3de2:	c6 01       	movw	r24, r12
    3de4:	6e de       	rcall	.-804    	; 0x3ac2 <conv_brk>
    3de6:	ec 01       	movw	r28, r24
    3de8:	89 2b       	or	r24, r25
    3dea:	09 f0       	breq	.+2      	; 0x3dee <vfscanf+0x17a>
    3dec:	3f c0       	rjmp	.+126    	; 0x3e6c <vfscanf+0x1f8>
    3dee:	39 c0       	rjmp	.+114    	; 0x3e62 <vfscanf+0x1ee>
    3df0:	c6 01       	movw	r24, r12
    3df2:	c7 dd       	rcall	.-1138   	; 0x3982 <skip_spaces>
    3df4:	97 fd       	sbrc	r25, 7
    3df6:	3e c0       	rjmp	.+124    	; 0x3e74 <vfscanf+0x200>
    3df8:	1f 36       	cpi	r17, 0x6F	; 111
    3dfa:	49 f1       	breq	.+82     	; 0x3e4e <vfscanf+0x1da>
    3dfc:	28 f4       	brcc	.+10     	; 0x3e08 <vfscanf+0x194>
    3dfe:	14 36       	cpi	r17, 0x64	; 100
    3e00:	21 f1       	breq	.+72     	; 0x3e4a <vfscanf+0x1d6>
    3e02:	19 36       	cpi	r17, 0x69	; 105
    3e04:	39 f1       	breq	.+78     	; 0x3e54 <vfscanf+0x1e0>
    3e06:	25 c0       	rjmp	.+74     	; 0x3e52 <vfscanf+0x1de>
    3e08:	13 37       	cpi	r17, 0x73	; 115
    3e0a:	71 f0       	breq	.+28     	; 0x3e28 <vfscanf+0x1b4>
    3e0c:	15 37       	cpi	r17, 0x75	; 117
    3e0e:	e9 f0       	breq	.+58     	; 0x3e4a <vfscanf+0x1d6>
    3e10:	20 c0       	rjmp	.+64     	; 0x3e52 <vfscanf+0x1de>
    3e12:	81 14       	cp	r8, r1
    3e14:	91 04       	cpc	r9, r1
    3e16:	29 f0       	breq	.+10     	; 0x3e22 <vfscanf+0x1ae>
    3e18:	f4 01       	movw	r30, r8
    3e1a:	60 82       	st	Z, r6
    3e1c:	c4 01       	movw	r24, r8
    3e1e:	01 96       	adiw	r24, 0x01	; 1
    3e20:	4c 01       	movw	r8, r24
    3e22:	fa 94       	dec	r15
    3e24:	ff 20       	and	r15, r15
    3e26:	59 f0       	breq	.+22     	; 0x3e3e <vfscanf+0x1ca>
    3e28:	c6 01       	movw	r24, r12
    3e2a:	a6 d1       	rcall	.+844    	; 0x4178 <fgetc>
    3e2c:	3c 01       	movw	r6, r24
    3e2e:	97 fd       	sbrc	r25, 7
    3e30:	06 c0       	rjmp	.+12     	; 0x3e3e <vfscanf+0x1ca>
    3e32:	72 d1       	rcall	.+740    	; 0x4118 <isspace>
    3e34:	89 2b       	or	r24, r25
    3e36:	69 f3       	breq	.-38     	; 0x3e12 <vfscanf+0x19e>
    3e38:	b6 01       	movw	r22, r12
    3e3a:	c3 01       	movw	r24, r6
    3e3c:	17 d2       	rcall	.+1070   	; 0x426c <ungetc>
    3e3e:	81 14       	cp	r8, r1
    3e40:	91 04       	cpc	r9, r1
    3e42:	a1 f0       	breq	.+40     	; 0x3e6c <vfscanf+0x1f8>
    3e44:	f4 01       	movw	r30, r8
    3e46:	10 82       	st	Z, r1
    3e48:	11 c0       	rjmp	.+34     	; 0x3e6c <vfscanf+0x1f8>
    3e4a:	00 62       	ori	r16, 0x20	; 32
    3e4c:	03 c0       	rjmp	.+6      	; 0x3e54 <vfscanf+0x1e0>
    3e4e:	00 61       	ori	r16, 0x10	; 16
    3e50:	01 c0       	rjmp	.+2      	; 0x3e54 <vfscanf+0x1e0>
    3e52:	00 64       	ori	r16, 0x40	; 64
    3e54:	20 2f       	mov	r18, r16
    3e56:	a4 01       	movw	r20, r8
    3e58:	6f 2d       	mov	r22, r15
    3e5a:	c6 01       	movw	r24, r12
    3e5c:	a8 dd       	rcall	.-1200   	; 0x39ae <conv_int>
    3e5e:	81 11       	cpse	r24, r1
    3e60:	05 c0       	rjmp	.+10     	; 0x3e6c <vfscanf+0x1f8>
    3e62:	f6 01       	movw	r30, r12
    3e64:	83 81       	ldd	r24, Z+3	; 0x03
    3e66:	80 73       	andi	r24, 0x30	; 48
    3e68:	29 f4       	brne	.+10     	; 0x3e74 <vfscanf+0x200>
    3e6a:	06 c0       	rjmp	.+12     	; 0x3e78 <vfscanf+0x204>
    3e6c:	00 fd       	sbrc	r16, 0
    3e6e:	18 cf       	rjmp	.-464    	; 0x3ca0 <vfscanf+0x2c>
    3e70:	53 94       	inc	r5
    3e72:	16 cf       	rjmp	.-468    	; 0x3ca0 <vfscanf+0x2c>
    3e74:	55 20       	and	r5, r5
    3e76:	19 f0       	breq	.+6      	; 0x3e7e <vfscanf+0x20a>
    3e78:	85 2d       	mov	r24, r5
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	02 c0       	rjmp	.+4      	; 0x3e82 <vfscanf+0x20e>
    3e7e:	8f ef       	ldi	r24, 0xFF	; 255
    3e80:	9f ef       	ldi	r25, 0xFF	; 255
    3e82:	df 91       	pop	r29
    3e84:	cf 91       	pop	r28
    3e86:	1f 91       	pop	r17
    3e88:	0f 91       	pop	r16
    3e8a:	ff 90       	pop	r15
    3e8c:	ef 90       	pop	r14
    3e8e:	df 90       	pop	r13
    3e90:	cf 90       	pop	r12
    3e92:	bf 90       	pop	r11
    3e94:	af 90       	pop	r10
    3e96:	9f 90       	pop	r9
    3e98:	8f 90       	pop	r8
    3e9a:	7f 90       	pop	r7
    3e9c:	6f 90       	pop	r6
    3e9e:	5f 90       	pop	r5
    3ea0:	08 95       	ret

00003ea2 <calloc>:
    3ea2:	0f 93       	push	r16
    3ea4:	1f 93       	push	r17
    3ea6:	cf 93       	push	r28
    3ea8:	df 93       	push	r29
    3eaa:	86 9f       	mul	r24, r22
    3eac:	80 01       	movw	r16, r0
    3eae:	87 9f       	mul	r24, r23
    3eb0:	10 0d       	add	r17, r0
    3eb2:	96 9f       	mul	r25, r22
    3eb4:	10 0d       	add	r17, r0
    3eb6:	11 24       	eor	r1, r1
    3eb8:	c8 01       	movw	r24, r16
    3eba:	0d d0       	rcall	.+26     	; 0x3ed6 <malloc>
    3ebc:	ec 01       	movw	r28, r24
    3ebe:	00 97       	sbiw	r24, 0x00	; 0
    3ec0:	21 f0       	breq	.+8      	; 0x3eca <calloc+0x28>
    3ec2:	a8 01       	movw	r20, r16
    3ec4:	60 e0       	ldi	r22, 0x00	; 0
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	45 d1       	rcall	.+650    	; 0x4154 <memset>
    3eca:	ce 01       	movw	r24, r28
    3ecc:	df 91       	pop	r29
    3ece:	cf 91       	pop	r28
    3ed0:	1f 91       	pop	r17
    3ed2:	0f 91       	pop	r16
    3ed4:	08 95       	ret

00003ed6 <malloc>:
    3ed6:	0f 93       	push	r16
    3ed8:	1f 93       	push	r17
    3eda:	cf 93       	push	r28
    3edc:	df 93       	push	r29
    3ede:	82 30       	cpi	r24, 0x02	; 2
    3ee0:	91 05       	cpc	r25, r1
    3ee2:	10 f4       	brcc	.+4      	; 0x3ee8 <malloc+0x12>
    3ee4:	82 e0       	ldi	r24, 0x02	; 2
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	e0 91 8a 21 	lds	r30, 0x218A	; 0x80218a <__flp>
    3eec:	f0 91 8b 21 	lds	r31, 0x218B	; 0x80218b <__flp+0x1>
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	a0 e0       	ldi	r26, 0x00	; 0
    3ef6:	b0 e0       	ldi	r27, 0x00	; 0
    3ef8:	30 97       	sbiw	r30, 0x00	; 0
    3efa:	19 f1       	breq	.+70     	; 0x3f42 <malloc+0x6c>
    3efc:	40 81       	ld	r20, Z
    3efe:	51 81       	ldd	r21, Z+1	; 0x01
    3f00:	02 81       	ldd	r16, Z+2	; 0x02
    3f02:	13 81       	ldd	r17, Z+3	; 0x03
    3f04:	48 17       	cp	r20, r24
    3f06:	59 07       	cpc	r21, r25
    3f08:	c8 f0       	brcs	.+50     	; 0x3f3c <malloc+0x66>
    3f0a:	84 17       	cp	r24, r20
    3f0c:	95 07       	cpc	r25, r21
    3f0e:	69 f4       	brne	.+26     	; 0x3f2a <malloc+0x54>
    3f10:	10 97       	sbiw	r26, 0x00	; 0
    3f12:	31 f0       	breq	.+12     	; 0x3f20 <malloc+0x4a>
    3f14:	12 96       	adiw	r26, 0x02	; 2
    3f16:	0c 93       	st	X, r16
    3f18:	12 97       	sbiw	r26, 0x02	; 2
    3f1a:	13 96       	adiw	r26, 0x03	; 3
    3f1c:	1c 93       	st	X, r17
    3f1e:	27 c0       	rjmp	.+78     	; 0x3f6e <malloc+0x98>
    3f20:	00 93 8a 21 	sts	0x218A, r16	; 0x80218a <__flp>
    3f24:	10 93 8b 21 	sts	0x218B, r17	; 0x80218b <__flp+0x1>
    3f28:	22 c0       	rjmp	.+68     	; 0x3f6e <malloc+0x98>
    3f2a:	21 15       	cp	r18, r1
    3f2c:	31 05       	cpc	r19, r1
    3f2e:	19 f0       	breq	.+6      	; 0x3f36 <malloc+0x60>
    3f30:	42 17       	cp	r20, r18
    3f32:	53 07       	cpc	r21, r19
    3f34:	18 f4       	brcc	.+6      	; 0x3f3c <malloc+0x66>
    3f36:	9a 01       	movw	r18, r20
    3f38:	bd 01       	movw	r22, r26
    3f3a:	ef 01       	movw	r28, r30
    3f3c:	df 01       	movw	r26, r30
    3f3e:	f8 01       	movw	r30, r16
    3f40:	db cf       	rjmp	.-74     	; 0x3ef8 <malloc+0x22>
    3f42:	21 15       	cp	r18, r1
    3f44:	31 05       	cpc	r19, r1
    3f46:	f9 f0       	breq	.+62     	; 0x3f86 <malloc+0xb0>
    3f48:	28 1b       	sub	r18, r24
    3f4a:	39 0b       	sbc	r19, r25
    3f4c:	24 30       	cpi	r18, 0x04	; 4
    3f4e:	31 05       	cpc	r19, r1
    3f50:	80 f4       	brcc	.+32     	; 0x3f72 <malloc+0x9c>
    3f52:	8a 81       	ldd	r24, Y+2	; 0x02
    3f54:	9b 81       	ldd	r25, Y+3	; 0x03
    3f56:	61 15       	cp	r22, r1
    3f58:	71 05       	cpc	r23, r1
    3f5a:	21 f0       	breq	.+8      	; 0x3f64 <malloc+0x8e>
    3f5c:	fb 01       	movw	r30, r22
    3f5e:	82 83       	std	Z+2, r24	; 0x02
    3f60:	93 83       	std	Z+3, r25	; 0x03
    3f62:	04 c0       	rjmp	.+8      	; 0x3f6c <malloc+0x96>
    3f64:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <__flp>
    3f68:	90 93 8b 21 	sts	0x218B, r25	; 0x80218b <__flp+0x1>
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	32 96       	adiw	r30, 0x02	; 2
    3f70:	44 c0       	rjmp	.+136    	; 0x3ffa <malloc+0x124>
    3f72:	fe 01       	movw	r30, r28
    3f74:	e2 0f       	add	r30, r18
    3f76:	f3 1f       	adc	r31, r19
    3f78:	81 93       	st	Z+, r24
    3f7a:	91 93       	st	Z+, r25
    3f7c:	22 50       	subi	r18, 0x02	; 2
    3f7e:	31 09       	sbc	r19, r1
    3f80:	28 83       	st	Y, r18
    3f82:	39 83       	std	Y+1, r19	; 0x01
    3f84:	3a c0       	rjmp	.+116    	; 0x3ffa <malloc+0x124>
    3f86:	20 91 88 21 	lds	r18, 0x2188	; 0x802188 <__brkval>
    3f8a:	30 91 89 21 	lds	r19, 0x2189	; 0x802189 <__brkval+0x1>
    3f8e:	23 2b       	or	r18, r19
    3f90:	41 f4       	brne	.+16     	; 0x3fa2 <malloc+0xcc>
    3f92:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3f96:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3f9a:	20 93 88 21 	sts	0x2188, r18	; 0x802188 <__brkval>
    3f9e:	30 93 89 21 	sts	0x2189, r19	; 0x802189 <__brkval+0x1>
    3fa2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3fa6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3faa:	21 15       	cp	r18, r1
    3fac:	31 05       	cpc	r19, r1
    3fae:	41 f4       	brne	.+16     	; 0x3fc0 <malloc+0xea>
    3fb0:	2d b7       	in	r18, 0x3d	; 61
    3fb2:	3e b7       	in	r19, 0x3e	; 62
    3fb4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3fb8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3fbc:	24 1b       	sub	r18, r20
    3fbe:	35 0b       	sbc	r19, r21
    3fc0:	e0 91 88 21 	lds	r30, 0x2188	; 0x802188 <__brkval>
    3fc4:	f0 91 89 21 	lds	r31, 0x2189	; 0x802189 <__brkval+0x1>
    3fc8:	e2 17       	cp	r30, r18
    3fca:	f3 07       	cpc	r31, r19
    3fcc:	a0 f4       	brcc	.+40     	; 0x3ff6 <malloc+0x120>
    3fce:	2e 1b       	sub	r18, r30
    3fd0:	3f 0b       	sbc	r19, r31
    3fd2:	28 17       	cp	r18, r24
    3fd4:	39 07       	cpc	r19, r25
    3fd6:	78 f0       	brcs	.+30     	; 0x3ff6 <malloc+0x120>
    3fd8:	ac 01       	movw	r20, r24
    3fda:	4e 5f       	subi	r20, 0xFE	; 254
    3fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    3fde:	24 17       	cp	r18, r20
    3fe0:	35 07       	cpc	r19, r21
    3fe2:	48 f0       	brcs	.+18     	; 0x3ff6 <malloc+0x120>
    3fe4:	4e 0f       	add	r20, r30
    3fe6:	5f 1f       	adc	r21, r31
    3fe8:	40 93 88 21 	sts	0x2188, r20	; 0x802188 <__brkval>
    3fec:	50 93 89 21 	sts	0x2189, r21	; 0x802189 <__brkval+0x1>
    3ff0:	81 93       	st	Z+, r24
    3ff2:	91 93       	st	Z+, r25
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <malloc+0x124>
    3ff6:	e0 e0       	ldi	r30, 0x00	; 0
    3ff8:	f0 e0       	ldi	r31, 0x00	; 0
    3ffa:	cf 01       	movw	r24, r30
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	1f 91       	pop	r17
    4002:	0f 91       	pop	r16
    4004:	08 95       	ret

00004006 <free>:
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	00 97       	sbiw	r24, 0x00	; 0
    400c:	09 f4       	brne	.+2      	; 0x4010 <free+0xa>
    400e:	81 c0       	rjmp	.+258    	; 0x4112 <free+0x10c>
    4010:	fc 01       	movw	r30, r24
    4012:	32 97       	sbiw	r30, 0x02	; 2
    4014:	12 82       	std	Z+2, r1	; 0x02
    4016:	13 82       	std	Z+3, r1	; 0x03
    4018:	a0 91 8a 21 	lds	r26, 0x218A	; 0x80218a <__flp>
    401c:	b0 91 8b 21 	lds	r27, 0x218B	; 0x80218b <__flp+0x1>
    4020:	10 97       	sbiw	r26, 0x00	; 0
    4022:	81 f4       	brne	.+32     	; 0x4044 <free+0x3e>
    4024:	20 81       	ld	r18, Z
    4026:	31 81       	ldd	r19, Z+1	; 0x01
    4028:	82 0f       	add	r24, r18
    402a:	93 1f       	adc	r25, r19
    402c:	20 91 88 21 	lds	r18, 0x2188	; 0x802188 <__brkval>
    4030:	30 91 89 21 	lds	r19, 0x2189	; 0x802189 <__brkval+0x1>
    4034:	28 17       	cp	r18, r24
    4036:	39 07       	cpc	r19, r25
    4038:	51 f5       	brne	.+84     	; 0x408e <free+0x88>
    403a:	e0 93 88 21 	sts	0x2188, r30	; 0x802188 <__brkval>
    403e:	f0 93 89 21 	sts	0x2189, r31	; 0x802189 <__brkval+0x1>
    4042:	67 c0       	rjmp	.+206    	; 0x4112 <free+0x10c>
    4044:	ed 01       	movw	r28, r26
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	ce 17       	cp	r28, r30
    404c:	df 07       	cpc	r29, r31
    404e:	40 f4       	brcc	.+16     	; 0x4060 <free+0x5a>
    4050:	4a 81       	ldd	r20, Y+2	; 0x02
    4052:	5b 81       	ldd	r21, Y+3	; 0x03
    4054:	9e 01       	movw	r18, r28
    4056:	41 15       	cp	r20, r1
    4058:	51 05       	cpc	r21, r1
    405a:	f1 f0       	breq	.+60     	; 0x4098 <free+0x92>
    405c:	ea 01       	movw	r28, r20
    405e:	f5 cf       	rjmp	.-22     	; 0x404a <free+0x44>
    4060:	c2 83       	std	Z+2, r28	; 0x02
    4062:	d3 83       	std	Z+3, r29	; 0x03
    4064:	40 81       	ld	r20, Z
    4066:	51 81       	ldd	r21, Z+1	; 0x01
    4068:	84 0f       	add	r24, r20
    406a:	95 1f       	adc	r25, r21
    406c:	c8 17       	cp	r28, r24
    406e:	d9 07       	cpc	r29, r25
    4070:	59 f4       	brne	.+22     	; 0x4088 <free+0x82>
    4072:	88 81       	ld	r24, Y
    4074:	99 81       	ldd	r25, Y+1	; 0x01
    4076:	84 0f       	add	r24, r20
    4078:	95 1f       	adc	r25, r21
    407a:	02 96       	adiw	r24, 0x02	; 2
    407c:	80 83       	st	Z, r24
    407e:	91 83       	std	Z+1, r25	; 0x01
    4080:	8a 81       	ldd	r24, Y+2	; 0x02
    4082:	9b 81       	ldd	r25, Y+3	; 0x03
    4084:	82 83       	std	Z+2, r24	; 0x02
    4086:	93 83       	std	Z+3, r25	; 0x03
    4088:	21 15       	cp	r18, r1
    408a:	31 05       	cpc	r19, r1
    408c:	29 f4       	brne	.+10     	; 0x4098 <free+0x92>
    408e:	e0 93 8a 21 	sts	0x218A, r30	; 0x80218a <__flp>
    4092:	f0 93 8b 21 	sts	0x218B, r31	; 0x80218b <__flp+0x1>
    4096:	3d c0       	rjmp	.+122    	; 0x4112 <free+0x10c>
    4098:	e9 01       	movw	r28, r18
    409a:	ea 83       	std	Y+2, r30	; 0x02
    409c:	fb 83       	std	Y+3, r31	; 0x03
    409e:	49 91       	ld	r20, Y+
    40a0:	59 91       	ld	r21, Y+
    40a2:	c4 0f       	add	r28, r20
    40a4:	d5 1f       	adc	r29, r21
    40a6:	ec 17       	cp	r30, r28
    40a8:	fd 07       	cpc	r31, r29
    40aa:	61 f4       	brne	.+24     	; 0x40c4 <free+0xbe>
    40ac:	80 81       	ld	r24, Z
    40ae:	91 81       	ldd	r25, Z+1	; 0x01
    40b0:	84 0f       	add	r24, r20
    40b2:	95 1f       	adc	r25, r21
    40b4:	02 96       	adiw	r24, 0x02	; 2
    40b6:	e9 01       	movw	r28, r18
    40b8:	88 83       	st	Y, r24
    40ba:	99 83       	std	Y+1, r25	; 0x01
    40bc:	82 81       	ldd	r24, Z+2	; 0x02
    40be:	93 81       	ldd	r25, Z+3	; 0x03
    40c0:	8a 83       	std	Y+2, r24	; 0x02
    40c2:	9b 83       	std	Y+3, r25	; 0x03
    40c4:	e0 e0       	ldi	r30, 0x00	; 0
    40c6:	f0 e0       	ldi	r31, 0x00	; 0
    40c8:	12 96       	adiw	r26, 0x02	; 2
    40ca:	8d 91       	ld	r24, X+
    40cc:	9c 91       	ld	r25, X
    40ce:	13 97       	sbiw	r26, 0x03	; 3
    40d0:	00 97       	sbiw	r24, 0x00	; 0
    40d2:	19 f0       	breq	.+6      	; 0x40da <free+0xd4>
    40d4:	fd 01       	movw	r30, r26
    40d6:	dc 01       	movw	r26, r24
    40d8:	f7 cf       	rjmp	.-18     	; 0x40c8 <free+0xc2>
    40da:	8d 91       	ld	r24, X+
    40dc:	9c 91       	ld	r25, X
    40de:	11 97       	sbiw	r26, 0x01	; 1
    40e0:	9d 01       	movw	r18, r26
    40e2:	2e 5f       	subi	r18, 0xFE	; 254
    40e4:	3f 4f       	sbci	r19, 0xFF	; 255
    40e6:	82 0f       	add	r24, r18
    40e8:	93 1f       	adc	r25, r19
    40ea:	20 91 88 21 	lds	r18, 0x2188	; 0x802188 <__brkval>
    40ee:	30 91 89 21 	lds	r19, 0x2189	; 0x802189 <__brkval+0x1>
    40f2:	28 17       	cp	r18, r24
    40f4:	39 07       	cpc	r19, r25
    40f6:	69 f4       	brne	.+26     	; 0x4112 <free+0x10c>
    40f8:	30 97       	sbiw	r30, 0x00	; 0
    40fa:	29 f4       	brne	.+10     	; 0x4106 <free+0x100>
    40fc:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <__flp>
    4100:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <__flp+0x1>
    4104:	02 c0       	rjmp	.+4      	; 0x410a <free+0x104>
    4106:	12 82       	std	Z+2, r1	; 0x02
    4108:	13 82       	std	Z+3, r1	; 0x03
    410a:	a0 93 88 21 	sts	0x2188, r26	; 0x802188 <__brkval>
    410e:	b0 93 89 21 	sts	0x2189, r27	; 0x802189 <__brkval+0x1>
    4112:	df 91       	pop	r29
    4114:	cf 91       	pop	r28
    4116:	08 95       	ret

00004118 <isspace>:
    4118:	91 11       	cpse	r25, r1
    411a:	1f c1       	rjmp	.+574    	; 0x435a <__ctype_isfalse>
    411c:	80 32       	cpi	r24, 0x20	; 32
    411e:	19 f0       	breq	.+6      	; 0x4126 <isspace+0xe>
    4120:	89 50       	subi	r24, 0x09	; 9
    4122:	85 50       	subi	r24, 0x05	; 5
    4124:	d0 f7       	brcc	.-12     	; 0x411a <isspace+0x2>
    4126:	08 95       	ret

00004128 <strchr_P>:
    4128:	fc 01       	movw	r30, r24
    412a:	05 90       	lpm	r0, Z+
    412c:	06 16       	cp	r0, r22
    412e:	21 f0       	breq	.+8      	; 0x4138 <strchr_P+0x10>
    4130:	00 20       	and	r0, r0
    4132:	d9 f7       	brne	.-10     	; 0x412a <strchr_P+0x2>
    4134:	c0 01       	movw	r24, r0
    4136:	08 95       	ret
    4138:	31 97       	sbiw	r30, 0x01	; 1
    413a:	cf 01       	movw	r24, r30
    413c:	08 95       	ret

0000413e <strnlen_P>:
    413e:	fc 01       	movw	r30, r24
    4140:	05 90       	lpm	r0, Z+
    4142:	61 50       	subi	r22, 0x01	; 1
    4144:	70 40       	sbci	r23, 0x00	; 0
    4146:	01 10       	cpse	r0, r1
    4148:	d8 f7       	brcc	.-10     	; 0x4140 <strnlen_P+0x2>
    414a:	80 95       	com	r24
    414c:	90 95       	com	r25
    414e:	8e 0f       	add	r24, r30
    4150:	9f 1f       	adc	r25, r31
    4152:	08 95       	ret

00004154 <memset>:
    4154:	dc 01       	movw	r26, r24
    4156:	01 c0       	rjmp	.+2      	; 0x415a <memset+0x6>
    4158:	6d 93       	st	X+, r22
    415a:	41 50       	subi	r20, 0x01	; 1
    415c:	50 40       	sbci	r21, 0x00	; 0
    415e:	e0 f7       	brcc	.-8      	; 0x4158 <memset+0x4>
    4160:	08 95       	ret

00004162 <strnlen>:
    4162:	fc 01       	movw	r30, r24
    4164:	61 50       	subi	r22, 0x01	; 1
    4166:	70 40       	sbci	r23, 0x00	; 0
    4168:	01 90       	ld	r0, Z+
    416a:	01 10       	cpse	r0, r1
    416c:	d8 f7       	brcc	.-10     	; 0x4164 <strnlen+0x2>
    416e:	80 95       	com	r24
    4170:	90 95       	com	r25
    4172:	8e 0f       	add	r24, r30
    4174:	9f 1f       	adc	r25, r31
    4176:	08 95       	ret

00004178 <fgetc>:
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	ec 01       	movw	r28, r24
    417e:	2b 81       	ldd	r18, Y+3	; 0x03
    4180:	20 ff       	sbrs	r18, 0
    4182:	33 c0       	rjmp	.+102    	; 0x41ea <fgetc+0x72>
    4184:	26 ff       	sbrs	r18, 6
    4186:	0a c0       	rjmp	.+20     	; 0x419c <fgetc+0x24>
    4188:	2f 7b       	andi	r18, 0xBF	; 191
    418a:	2b 83       	std	Y+3, r18	; 0x03
    418c:	8e 81       	ldd	r24, Y+6	; 0x06
    418e:	9f 81       	ldd	r25, Y+7	; 0x07
    4190:	01 96       	adiw	r24, 0x01	; 1
    4192:	8e 83       	std	Y+6, r24	; 0x06
    4194:	9f 83       	std	Y+7, r25	; 0x07
    4196:	8a 81       	ldd	r24, Y+2	; 0x02
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	29 c0       	rjmp	.+82     	; 0x41ee <fgetc+0x76>
    419c:	22 ff       	sbrs	r18, 2
    419e:	0f c0       	rjmp	.+30     	; 0x41be <fgetc+0x46>
    41a0:	e8 81       	ld	r30, Y
    41a2:	f9 81       	ldd	r31, Y+1	; 0x01
    41a4:	80 81       	ld	r24, Z
    41a6:	08 2e       	mov	r0, r24
    41a8:	00 0c       	add	r0, r0
    41aa:	99 0b       	sbc	r25, r25
    41ac:	00 97       	sbiw	r24, 0x00	; 0
    41ae:	19 f4       	brne	.+6      	; 0x41b6 <fgetc+0x3e>
    41b0:	20 62       	ori	r18, 0x20	; 32
    41b2:	2b 83       	std	Y+3, r18	; 0x03
    41b4:	1a c0       	rjmp	.+52     	; 0x41ea <fgetc+0x72>
    41b6:	31 96       	adiw	r30, 0x01	; 1
    41b8:	e8 83       	st	Y, r30
    41ba:	f9 83       	std	Y+1, r31	; 0x01
    41bc:	0e c0       	rjmp	.+28     	; 0x41da <fgetc+0x62>
    41be:	ea 85       	ldd	r30, Y+10	; 0x0a
    41c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    41c2:	19 95       	eicall
    41c4:	97 ff       	sbrs	r25, 7
    41c6:	09 c0       	rjmp	.+18     	; 0x41da <fgetc+0x62>
    41c8:	2b 81       	ldd	r18, Y+3	; 0x03
    41ca:	01 96       	adiw	r24, 0x01	; 1
    41cc:	11 f0       	breq	.+4      	; 0x41d2 <fgetc+0x5a>
    41ce:	80 e2       	ldi	r24, 0x20	; 32
    41d0:	01 c0       	rjmp	.+2      	; 0x41d4 <fgetc+0x5c>
    41d2:	80 e1       	ldi	r24, 0x10	; 16
    41d4:	82 2b       	or	r24, r18
    41d6:	8b 83       	std	Y+3, r24	; 0x03
    41d8:	08 c0       	rjmp	.+16     	; 0x41ea <fgetc+0x72>
    41da:	2e 81       	ldd	r18, Y+6	; 0x06
    41dc:	3f 81       	ldd	r19, Y+7	; 0x07
    41de:	2f 5f       	subi	r18, 0xFF	; 255
    41e0:	3f 4f       	sbci	r19, 0xFF	; 255
    41e2:	2e 83       	std	Y+6, r18	; 0x06
    41e4:	3f 83       	std	Y+7, r19	; 0x07
    41e6:	99 27       	eor	r25, r25
    41e8:	02 c0       	rjmp	.+4      	; 0x41ee <fgetc+0x76>
    41ea:	8f ef       	ldi	r24, 0xFF	; 255
    41ec:	9f ef       	ldi	r25, 0xFF	; 255
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	08 95       	ret

000041f4 <fputc>:
    41f4:	0f 93       	push	r16
    41f6:	1f 93       	push	r17
    41f8:	cf 93       	push	r28
    41fa:	df 93       	push	r29
    41fc:	fb 01       	movw	r30, r22
    41fe:	23 81       	ldd	r18, Z+3	; 0x03
    4200:	21 fd       	sbrc	r18, 1
    4202:	03 c0       	rjmp	.+6      	; 0x420a <fputc+0x16>
    4204:	8f ef       	ldi	r24, 0xFF	; 255
    4206:	9f ef       	ldi	r25, 0xFF	; 255
    4208:	2c c0       	rjmp	.+88     	; 0x4262 <fputc+0x6e>
    420a:	22 ff       	sbrs	r18, 2
    420c:	16 c0       	rjmp	.+44     	; 0x423a <fputc+0x46>
    420e:	46 81       	ldd	r20, Z+6	; 0x06
    4210:	57 81       	ldd	r21, Z+7	; 0x07
    4212:	24 81       	ldd	r18, Z+4	; 0x04
    4214:	35 81       	ldd	r19, Z+5	; 0x05
    4216:	42 17       	cp	r20, r18
    4218:	53 07       	cpc	r21, r19
    421a:	44 f4       	brge	.+16     	; 0x422c <fputc+0x38>
    421c:	a0 81       	ld	r26, Z
    421e:	b1 81       	ldd	r27, Z+1	; 0x01
    4220:	9d 01       	movw	r18, r26
    4222:	2f 5f       	subi	r18, 0xFF	; 255
    4224:	3f 4f       	sbci	r19, 0xFF	; 255
    4226:	20 83       	st	Z, r18
    4228:	31 83       	std	Z+1, r19	; 0x01
    422a:	8c 93       	st	X, r24
    422c:	26 81       	ldd	r18, Z+6	; 0x06
    422e:	37 81       	ldd	r19, Z+7	; 0x07
    4230:	2f 5f       	subi	r18, 0xFF	; 255
    4232:	3f 4f       	sbci	r19, 0xFF	; 255
    4234:	26 83       	std	Z+6, r18	; 0x06
    4236:	37 83       	std	Z+7, r19	; 0x07
    4238:	14 c0       	rjmp	.+40     	; 0x4262 <fputc+0x6e>
    423a:	8b 01       	movw	r16, r22
    423c:	ec 01       	movw	r28, r24
    423e:	fb 01       	movw	r30, r22
    4240:	00 84       	ldd	r0, Z+8	; 0x08
    4242:	f1 85       	ldd	r31, Z+9	; 0x09
    4244:	e0 2d       	mov	r30, r0
    4246:	19 95       	eicall
    4248:	89 2b       	or	r24, r25
    424a:	e1 f6       	brne	.-72     	; 0x4204 <fputc+0x10>
    424c:	d8 01       	movw	r26, r16
    424e:	16 96       	adiw	r26, 0x06	; 6
    4250:	8d 91       	ld	r24, X+
    4252:	9c 91       	ld	r25, X
    4254:	17 97       	sbiw	r26, 0x07	; 7
    4256:	01 96       	adiw	r24, 0x01	; 1
    4258:	16 96       	adiw	r26, 0x06	; 6
    425a:	8d 93       	st	X+, r24
    425c:	9c 93       	st	X, r25
    425e:	17 97       	sbiw	r26, 0x07	; 7
    4260:	ce 01       	movw	r24, r28
    4262:	df 91       	pop	r29
    4264:	cf 91       	pop	r28
    4266:	1f 91       	pop	r17
    4268:	0f 91       	pop	r16
    426a:	08 95       	ret

0000426c <ungetc>:
    426c:	fb 01       	movw	r30, r22
    426e:	23 81       	ldd	r18, Z+3	; 0x03
    4270:	20 ff       	sbrs	r18, 0
    4272:	12 c0       	rjmp	.+36     	; 0x4298 <ungetc+0x2c>
    4274:	26 fd       	sbrc	r18, 6
    4276:	10 c0       	rjmp	.+32     	; 0x4298 <ungetc+0x2c>
    4278:	8f 3f       	cpi	r24, 0xFF	; 255
    427a:	3f ef       	ldi	r19, 0xFF	; 255
    427c:	93 07       	cpc	r25, r19
    427e:	61 f0       	breq	.+24     	; 0x4298 <ungetc+0x2c>
    4280:	82 83       	std	Z+2, r24	; 0x02
    4282:	2f 7d       	andi	r18, 0xDF	; 223
    4284:	20 64       	ori	r18, 0x40	; 64
    4286:	23 83       	std	Z+3, r18	; 0x03
    4288:	26 81       	ldd	r18, Z+6	; 0x06
    428a:	37 81       	ldd	r19, Z+7	; 0x07
    428c:	21 50       	subi	r18, 0x01	; 1
    428e:	31 09       	sbc	r19, r1
    4290:	26 83       	std	Z+6, r18	; 0x06
    4292:	37 83       	std	Z+7, r19	; 0x07
    4294:	99 27       	eor	r25, r25
    4296:	08 95       	ret
    4298:	8f ef       	ldi	r24, 0xFF	; 255
    429a:	9f ef       	ldi	r25, 0xFF	; 255
    429c:	08 95       	ret

0000429e <__ultoa_invert>:
    429e:	fa 01       	movw	r30, r20
    42a0:	aa 27       	eor	r26, r26
    42a2:	28 30       	cpi	r18, 0x08	; 8
    42a4:	51 f1       	breq	.+84     	; 0x42fa <__ultoa_invert+0x5c>
    42a6:	20 31       	cpi	r18, 0x10	; 16
    42a8:	81 f1       	breq	.+96     	; 0x430a <__ultoa_invert+0x6c>
    42aa:	e8 94       	clt
    42ac:	6f 93       	push	r22
    42ae:	6e 7f       	andi	r22, 0xFE	; 254
    42b0:	6e 5f       	subi	r22, 0xFE	; 254
    42b2:	7f 4f       	sbci	r23, 0xFF	; 255
    42b4:	8f 4f       	sbci	r24, 0xFF	; 255
    42b6:	9f 4f       	sbci	r25, 0xFF	; 255
    42b8:	af 4f       	sbci	r26, 0xFF	; 255
    42ba:	b1 e0       	ldi	r27, 0x01	; 1
    42bc:	3e d0       	rcall	.+124    	; 0x433a <__ultoa_invert+0x9c>
    42be:	b4 e0       	ldi	r27, 0x04	; 4
    42c0:	3c d0       	rcall	.+120    	; 0x433a <__ultoa_invert+0x9c>
    42c2:	67 0f       	add	r22, r23
    42c4:	78 1f       	adc	r23, r24
    42c6:	89 1f       	adc	r24, r25
    42c8:	9a 1f       	adc	r25, r26
    42ca:	a1 1d       	adc	r26, r1
    42cc:	68 0f       	add	r22, r24
    42ce:	79 1f       	adc	r23, r25
    42d0:	8a 1f       	adc	r24, r26
    42d2:	91 1d       	adc	r25, r1
    42d4:	a1 1d       	adc	r26, r1
    42d6:	6a 0f       	add	r22, r26
    42d8:	71 1d       	adc	r23, r1
    42da:	81 1d       	adc	r24, r1
    42dc:	91 1d       	adc	r25, r1
    42de:	a1 1d       	adc	r26, r1
    42e0:	20 d0       	rcall	.+64     	; 0x4322 <__ultoa_invert+0x84>
    42e2:	09 f4       	brne	.+2      	; 0x42e6 <__ultoa_invert+0x48>
    42e4:	68 94       	set
    42e6:	3f 91       	pop	r19
    42e8:	2a e0       	ldi	r18, 0x0A	; 10
    42ea:	26 9f       	mul	r18, r22
    42ec:	11 24       	eor	r1, r1
    42ee:	30 19       	sub	r19, r0
    42f0:	30 5d       	subi	r19, 0xD0	; 208
    42f2:	31 93       	st	Z+, r19
    42f4:	de f6       	brtc	.-74     	; 0x42ac <__ultoa_invert+0xe>
    42f6:	cf 01       	movw	r24, r30
    42f8:	08 95       	ret
    42fa:	46 2f       	mov	r20, r22
    42fc:	47 70       	andi	r20, 0x07	; 7
    42fe:	40 5d       	subi	r20, 0xD0	; 208
    4300:	41 93       	st	Z+, r20
    4302:	b3 e0       	ldi	r27, 0x03	; 3
    4304:	0f d0       	rcall	.+30     	; 0x4324 <__ultoa_invert+0x86>
    4306:	c9 f7       	brne	.-14     	; 0x42fa <__ultoa_invert+0x5c>
    4308:	f6 cf       	rjmp	.-20     	; 0x42f6 <__ultoa_invert+0x58>
    430a:	46 2f       	mov	r20, r22
    430c:	4f 70       	andi	r20, 0x0F	; 15
    430e:	40 5d       	subi	r20, 0xD0	; 208
    4310:	4a 33       	cpi	r20, 0x3A	; 58
    4312:	18 f0       	brcs	.+6      	; 0x431a <__ultoa_invert+0x7c>
    4314:	49 5d       	subi	r20, 0xD9	; 217
    4316:	31 fd       	sbrc	r19, 1
    4318:	40 52       	subi	r20, 0x20	; 32
    431a:	41 93       	st	Z+, r20
    431c:	02 d0       	rcall	.+4      	; 0x4322 <__ultoa_invert+0x84>
    431e:	a9 f7       	brne	.-22     	; 0x430a <__ultoa_invert+0x6c>
    4320:	ea cf       	rjmp	.-44     	; 0x42f6 <__ultoa_invert+0x58>
    4322:	b4 e0       	ldi	r27, 0x04	; 4
    4324:	a6 95       	lsr	r26
    4326:	97 95       	ror	r25
    4328:	87 95       	ror	r24
    432a:	77 95       	ror	r23
    432c:	67 95       	ror	r22
    432e:	ba 95       	dec	r27
    4330:	c9 f7       	brne	.-14     	; 0x4324 <__ultoa_invert+0x86>
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	61 05       	cpc	r22, r1
    4336:	71 05       	cpc	r23, r1
    4338:	08 95       	ret
    433a:	9b 01       	movw	r18, r22
    433c:	ac 01       	movw	r20, r24
    433e:	0a 2e       	mov	r0, r26
    4340:	06 94       	lsr	r0
    4342:	57 95       	ror	r21
    4344:	47 95       	ror	r20
    4346:	37 95       	ror	r19
    4348:	27 95       	ror	r18
    434a:	ba 95       	dec	r27
    434c:	c9 f7       	brne	.-14     	; 0x4340 <__ultoa_invert+0xa2>
    434e:	62 0f       	add	r22, r18
    4350:	73 1f       	adc	r23, r19
    4352:	84 1f       	adc	r24, r20
    4354:	95 1f       	adc	r25, r21
    4356:	a0 1d       	adc	r26, r0
    4358:	08 95       	ret

0000435a <__ctype_isfalse>:
    435a:	99 27       	eor	r25, r25
    435c:	88 27       	eor	r24, r24

0000435e <__ctype_istrue>:
    435e:	08 95       	ret

00004360 <_exit>:
    4360:	f8 94       	cli

00004362 <__stop_program>:
    4362:	ff cf       	rjmp	.-2      	; 0x4362 <__stop_program>
