
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00802000  00003b4c  00003be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  008020b0  008020b0  00003c90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00003d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014529  00000000  00000000  00004208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b58  00000000  00000000  00018731  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008e2b  00000000  00000000  0001d289  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000106c  00000000  00000000  000260b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d25f  00000000  00000000  00027120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045d6  00000000  00000000  0005437f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000478  00000000  00000000  00058955  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003459  00000000  00000000  00058dcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_47>
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f6 c0       	rjmp	.+492    	; 0x2d6 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
     102:	00 00       	nop
     104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
     106:	00 00       	nop
     108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
     112:	00 00       	nop
     114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
     116:	00 00       	nop
     118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
     136:	00 00       	nop
     138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
     142:	00 00       	nop
     144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
     146:	00 00       	nop
     148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
     152:	00 00       	nop
     154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
     156:	00 00       	nop
     158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
     162:	00 00       	nop
     164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
     166:	00 00       	nop
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__vector_91>
     170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
     172:	00 00       	nop
     174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
     176:	00 00       	nop
     178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
     182:	00 00       	nop
     184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
     186:	00 00       	nop
     188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
     192:	00 00       	nop
     194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
     196:	00 00       	nop
     198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6e c0       	rjmp	.+220    	; 0x2d6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <ms5607_convert_d2+0x28>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	63 64       	ori	r22, 0x43	; 67
     280:	69 6e       	ori	r22, 0xE9	; 233
     282:	6f 70       	andi	r22, 0x0F	; 15
     284:	73 75       	andi	r23, 0x53	; 83
     286:	78 58       	subi	r23, 0x88	; 136
     288:	5b 00       	.word	0x005b	; ????

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df e3       	ldi	r29, 0x3F	; 63
     294:	de bf       	out	0x3e, r29	; 62
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0c bf       	out	0x3c, r16	; 60
     29a:	18 be       	out	0x38, r1	; 56
     29c:	19 be       	out	0x39, r1	; 57
     29e:	1a be       	out	0x3a, r1	; 58
     2a0:	1b be       	out	0x3b, r1	; 59

000002a2 <__do_copy_data>:
     2a2:	10 e2       	ldi	r17, 0x20	; 32
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e2       	ldi	r27, 0x20	; 32
     2a8:	ec e4       	ldi	r30, 0x4C	; 76
     2aa:	fb e3       	ldi	r31, 0x3B	; 59
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	a0 3b       	cpi	r26, 0xB0	; 176
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>
     2bc:	1b be       	out	0x3b, r1	; 59

000002be <__do_clear_bss>:
     2be:	21 e2       	ldi	r18, 0x21	; 33
     2c0:	a0 eb       	ldi	r26, 0xB0	; 176
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	ac 38       	cpi	r26, 0x8C	; 140
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 22 0c 	call	0x1844	; 0x1844 <main>
     2d2:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2e2:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <stdio_base>
     2e6:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <stdio_base+0x1>
     2ea:	e0 91 02 21 	lds	r30, 0x2102	; 0x802102 <ptr_get>
     2ee:	f0 91 03 21 	lds	r31, 0x2103	; 0x802103 <ptr_get+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	19 95       	eicall
	return c;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     30a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     30c:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <stdio_base>
     310:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <stdio_base+0x1>
     314:	e0 91 04 21 	lds	r30, 0x2104	; 0x802104 <ptr_put>
     318:	f0 91 05 21 	lds	r31, 0x2105	; 0x802105 <ptr_put+0x1>
     31c:	19 95       	eicall
     31e:	99 23       	and	r25, r25
     320:	1c f0       	brlt	.+6      	; 0x328 <_write+0x1e>
		return -1;
	}
	return 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adca_callback>
     36e:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adca_callback>
     3e8:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adca_callback>
     462:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adca_callback>
     4dc:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     516:	fc 01       	movw	r30, r24
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	95 ff       	sbrs	r25, 5
     51c:	fd cf       	rjmp	.-6      	; 0x518 <usart_putchar+0x2>
     51e:	60 83       	st	Z, r22
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <usart_getchar>:
     526:	fc 01       	movw	r30, r24
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	99 23       	and	r25, r25
     52c:	ec f7       	brge	.-6      	; 0x528 <usart_getchar+0x2>
     52e:	80 81       	ld	r24, Z
     530:	08 95       	ret

00000532 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     532:	4f 92       	push	r4
     534:	5f 92       	push	r5
     536:	6f 92       	push	r6
     538:	7f 92       	push	r7
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	7c 01       	movw	r14, r24
     54e:	4a 01       	movw	r8, r20
     550:	5b 01       	movw	r10, r22
     552:	28 01       	movw	r4, r16
     554:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     556:	fc 01       	movw	r30, r24
     558:	84 81       	ldd	r24, Z+4	; 0x04
     55a:	82 ff       	sbrs	r24, 2
     55c:	16 c0       	rjmp	.+44     	; 0x58a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     55e:	d9 01       	movw	r26, r18
     560:	c8 01       	movw	r24, r16
     562:	68 94       	set
     564:	12 f8       	bld	r1, 2
     566:	b6 95       	lsr	r27
     568:	a7 95       	ror	r26
     56a:	97 95       	ror	r25
     56c:	87 95       	ror	r24
     56e:	16 94       	lsr	r1
     570:	d1 f7       	brne	.-12     	; 0x566 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     572:	b9 01       	movw	r22, r18
     574:	a8 01       	movw	r20, r16
     576:	03 2e       	mov	r0, r19
     578:	36 e1       	ldi	r19, 0x16	; 22
     57a:	76 95       	lsr	r23
     57c:	67 95       	ror	r22
     57e:	57 95       	ror	r21
     580:	47 95       	ror	r20
     582:	3a 95       	dec	r19
     584:	d1 f7       	brne	.-12     	; 0x57a <usart_set_baudrate+0x48>
     586:	30 2d       	mov	r19, r0
     588:	15 c0       	rjmp	.+42     	; 0x5b4 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     58a:	d9 01       	movw	r26, r18
     58c:	c8 01       	movw	r24, r16
     58e:	68 94       	set
     590:	13 f8       	bld	r1, 3
     592:	b6 95       	lsr	r27
     594:	a7 95       	ror	r26
     596:	97 95       	ror	r25
     598:	87 95       	ror	r24
     59a:	16 94       	lsr	r1
     59c:	d1 f7       	brne	.-12     	; 0x592 <usart_set_baudrate+0x60>
		min_rate /= 2;
     59e:	b9 01       	movw	r22, r18
     5a0:	a8 01       	movw	r20, r16
     5a2:	03 2e       	mov	r0, r19
     5a4:	37 e1       	ldi	r19, 0x17	; 23
     5a6:	76 95       	lsr	r23
     5a8:	67 95       	ror	r22
     5aa:	57 95       	ror	r21
     5ac:	47 95       	ror	r20
     5ae:	3a 95       	dec	r19
     5b0:	d1 f7       	brne	.-12     	; 0x5a6 <usart_set_baudrate+0x74>
     5b2:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     5b4:	88 15       	cp	r24, r8
     5b6:	99 05       	cpc	r25, r9
     5b8:	aa 05       	cpc	r26, r10
     5ba:	bb 05       	cpc	r27, r11
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <usart_set_baudrate+0x8e>
     5be:	a6 c0       	rjmp	.+332    	; 0x70c <usart_set_baudrate+0x1da>
     5c0:	84 16       	cp	r8, r20
     5c2:	95 06       	cpc	r9, r21
     5c4:	a6 06       	cpc	r10, r22
     5c6:	b7 06       	cpc	r11, r23
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <usart_set_baudrate+0x9a>
     5ca:	a2 c0       	rjmp	.+324    	; 0x710 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5cc:	f7 01       	movw	r30, r14
     5ce:	84 81       	ldd	r24, Z+4	; 0x04
     5d0:	82 fd       	sbrc	r24, 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <usart_set_baudrate+0xaa>
		baud *= 2;
     5d4:	88 0c       	add	r8, r8
     5d6:	99 1c       	adc	r9, r9
     5d8:	aa 1c       	adc	r10, r10
     5da:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     5dc:	c3 01       	movw	r24, r6
     5de:	b2 01       	movw	r22, r4
     5e0:	a5 01       	movw	r20, r10
     5e2:	94 01       	movw	r18, r8
     5e4:	0e 94 76 15 	call	0x2aec	; 0x2aec <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     5e8:	2f 3f       	cpi	r18, 0xFF	; 255
     5ea:	31 05       	cpc	r19, r1
     5ec:	41 05       	cpc	r20, r1
     5ee:	51 05       	cpc	r21, r1
     5f0:	08 f4       	brcc	.+2      	; 0x5f4 <usart_set_baudrate+0xc2>
     5f2:	90 c0       	rjmp	.+288    	; 0x714 <usart_set_baudrate+0x1e2>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e0       	ldi	r26, 0x00	; 0
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	c9 ef       	ldi	r28, 0xF9	; 249
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <usart_set_baudrate+0xd8>
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	4a 07       	cpc	r20, r26
     606:	5b 07       	cpc	r21, r27
     608:	58 f0       	brcs	.+22     	; 0x620 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	aa 1f       	adc	r26, r26
     610:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     612:	cd 3f       	cpi	r28, 0xFD	; 253
     614:	0c f4       	brge	.+2      	; 0x618 <usart_set_baudrate+0xe6>
			limit |= 1;
     616:	81 60       	ori	r24, 0x01	; 1
     618:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     61a:	c7 30       	cpi	r28, 0x07	; 7
     61c:	89 f7       	brne	.-30     	; 0x600 <usart_set_baudrate+0xce>
     61e:	4f c0       	rjmp	.+158    	; 0x6be <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     620:	cc 23       	and	r28, r28
     622:	0c f0       	brlt	.+2      	; 0x626 <usart_set_baudrate+0xf4>
     624:	4c c0       	rjmp	.+152    	; 0x6be <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     626:	d5 01       	movw	r26, r10
     628:	c4 01       	movw	r24, r8
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	aa 1f       	adc	r26, r26
     630:	bb 1f       	adc	r27, r27
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	aa 1f       	adc	r26, r26
     638:	bb 1f       	adc	r27, r27
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	aa 1f       	adc	r26, r26
     640:	bb 1f       	adc	r27, r27
     642:	48 1a       	sub	r4, r24
     644:	59 0a       	sbc	r5, r25
     646:	6a 0a       	sbc	r6, r26
     648:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     64a:	ce 3f       	cpi	r28, 0xFE	; 254
     64c:	f4 f4       	brge	.+60     	; 0x68a <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     64e:	8d ef       	ldi	r24, 0xFD	; 253
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	8c 1b       	sub	r24, r28
     654:	91 09       	sbc	r25, r1
     656:	c7 fd       	sbrc	r28, 7
     658:	93 95       	inc	r25
     65a:	04 c0       	rjmp	.+8      	; 0x664 <usart_set_baudrate+0x132>
     65c:	44 0c       	add	r4, r4
     65e:	55 1c       	adc	r5, r5
     660:	66 1c       	adc	r6, r6
     662:	77 1c       	adc	r7, r7
     664:	8a 95       	dec	r24
     666:	d2 f7       	brpl	.-12     	; 0x65c <usart_set_baudrate+0x12a>
     668:	d5 01       	movw	r26, r10
     66a:	c4 01       	movw	r24, r8
     66c:	b6 95       	lsr	r27
     66e:	a7 95       	ror	r26
     670:	97 95       	ror	r25
     672:	87 95       	ror	r24
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	64 0d       	add	r22, r4
     67a:	75 1d       	adc	r23, r5
     67c:	86 1d       	adc	r24, r6
     67e:	97 1d       	adc	r25, r7
     680:	a5 01       	movw	r20, r10
     682:	94 01       	movw	r18, r8
     684:	0e 94 76 15 	call	0x2aec	; 0x2aec <__udivmodsi4>
     688:	37 c0       	rjmp	.+110    	; 0x6f8 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	8c 0f       	add	r24, r28
     68e:	a5 01       	movw	r20, r10
     690:	94 01       	movw	r18, r8
     692:	04 c0       	rjmp	.+8      	; 0x69c <usart_set_baudrate+0x16a>
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	44 1f       	adc	r20, r20
     69a:	55 1f       	adc	r21, r21
     69c:	8a 95       	dec	r24
     69e:	d2 f7       	brpl	.-12     	; 0x694 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     6a0:	da 01       	movw	r26, r20
     6a2:	c9 01       	movw	r24, r18
     6a4:	b6 95       	lsr	r27
     6a6:	a7 95       	ror	r26
     6a8:	97 95       	ror	r25
     6aa:	87 95       	ror	r24
     6ac:	bc 01       	movw	r22, r24
     6ae:	cd 01       	movw	r24, r26
     6b0:	64 0d       	add	r22, r4
     6b2:	75 1d       	adc	r23, r5
     6b4:	86 1d       	adc	r24, r6
     6b6:	97 1d       	adc	r25, r7
     6b8:	0e 94 76 15 	call	0x2aec	; 0x2aec <__udivmodsi4>
     6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	8c 0f       	add	r24, r28
     6c2:	a5 01       	movw	r20, r10
     6c4:	94 01       	movw	r18, r8
     6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <usart_set_baudrate+0x19e>
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	44 1f       	adc	r20, r20
     6ce:	55 1f       	adc	r21, r21
     6d0:	8a 95       	dec	r24
     6d2:	d2 f7       	brpl	.-12     	; 0x6c8 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     6d4:	da 01       	movw	r26, r20
     6d6:	c9 01       	movw	r24, r18
     6d8:	b6 95       	lsr	r27
     6da:	a7 95       	ror	r26
     6dc:	97 95       	ror	r25
     6de:	87 95       	ror	r24
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	64 0d       	add	r22, r4
     6e6:	75 1d       	adc	r23, r5
     6e8:	86 1d       	adc	r24, r6
     6ea:	97 1d       	adc	r25, r7
     6ec:	0e 94 76 15 	call	0x2aec	; 0x2aec <__udivmodsi4>
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	31 09       	sbc	r19, r1
     6f4:	41 09       	sbc	r20, r1
     6f6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     6f8:	83 2f       	mov	r24, r19
     6fa:	8f 70       	andi	r24, 0x0F	; 15
     6fc:	c2 95       	swap	r28
     6fe:	c0 7f       	andi	r28, 0xF0	; 240
     700:	c8 2b       	or	r28, r24
     702:	f7 01       	movw	r30, r14
     704:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     706:	26 83       	std	Z+6, r18	; 0x06

	return true;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	18 c0       	rjmp	.+48     	; 0x73c <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	16 c0       	rjmp	.+44     	; 0x73c <usart_set_baudrate+0x20a>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	14 c0       	rjmp	.+40     	; 0x73c <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     714:	d5 01       	movw	r26, r10
     716:	c4 01       	movw	r24, r8
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	aa 1f       	adc	r26, r26
     71e:	bb 1f       	adc	r27, r27
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	aa 1f       	adc	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	aa 1f       	adc	r26, r26
     72e:	bb 1f       	adc	r27, r27
     730:	48 1a       	sub	r4, r24
     732:	59 0a       	sbc	r5, r25
     734:	6a 0a       	sbc	r6, r26
     736:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     738:	c9 ef       	ldi	r28, 0xF9	; 249
     73a:	89 cf       	rjmp	.-238    	; 0x64e <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	7f 90       	pop	r7
     750:	6f 90       	pop	r6
     752:	5f 90       	pop	r5
     754:	4f 90       	pop	r4
     756:	08 95       	ret

00000758 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	09 f4       	brne	.+2      	; 0x76a <usart_init_rs232+0x12>
     768:	be c0       	rjmp	.+380    	; 0x8e6 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     76a:	80 3c       	cpi	r24, 0xC0	; 192
     76c:	91 05       	cpc	r25, r1
     76e:	21 f4       	brne	.+8      	; 0x778 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     770:	60 e1       	ldi	r22, 0x10	; 16
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	79 d3       	rcall	.+1778   	; 0xe68 <sysclk_enable_module>
     776:	b7 c0       	rjmp	.+366    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     778:	c1 15       	cp	r28, r1
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	d8 07       	cpc	r29, r24
     77e:	21 f4       	brne	.+8      	; 0x788 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     780:	64 e0       	ldi	r22, 0x04	; 4
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	71 d3       	rcall	.+1762   	; 0xe68 <sysclk_enable_module>
     786:	af c0       	rjmp	.+350    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     788:	c0 38       	cpi	r28, 0x80	; 128
     78a:	e1 e0       	ldi	r30, 0x01	; 1
     78c:	de 07       	cpc	r29, r30
     78e:	21 f4       	brne	.+8      	; 0x798 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     790:	62 e0       	ldi	r22, 0x02	; 2
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	69 d3       	rcall	.+1746   	; 0xe68 <sysclk_enable_module>
     796:	a7 c0       	rjmp	.+334    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     798:	c1 15       	cp	r28, r1
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     79e:	21 f4       	brne	.+8      	; 0x7a8 <usart_init_rs232+0x50>
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	61 d3       	rcall	.+1730   	; 0xe68 <sysclk_enable_module>
     7a6:	9f c0       	rjmp	.+318    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     7a8:	c0 38       	cpi	r28, 0x80	; 128
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <usart_init_rs232+0x60>
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	59 d3       	rcall	.+1714   	; 0xe68 <sysclk_enable_module>
     7b6:	97 c0       	rjmp	.+302    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     7b8:	c1 15       	cp	r28, r1
     7ba:	e2 e0       	ldi	r30, 0x02	; 2
     7bc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     7be:	21 f4       	brne	.+8      	; 0x7c8 <usart_init_rs232+0x70>
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	51 d3       	rcall	.+1698   	; 0xe68 <sysclk_enable_module>
     7c6:	8f c0       	rjmp	.+286    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     7c8:	c0 32       	cpi	r28, 0x20	; 32
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     7ce:	21 f4       	brne	.+8      	; 0x7d8 <usart_init_rs232+0x80>
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	49 d3       	rcall	.+1682   	; 0xe68 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     7d6:	87 c0       	rjmp	.+270    	; 0x8e6 <usart_init_rs232+0x18e>
     7d8:	c1 15       	cp	r28, r1
     7da:	88 e0       	ldi	r24, 0x08	; 8
     7dc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     7de:	21 f4       	brne	.+8      	; 0x7e8 <usart_init_rs232+0x90>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	41 d3       	rcall	.+1666   	; 0xe68 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     7e6:	7f c0       	rjmp	.+254    	; 0x8e6 <usart_init_rs232+0x18e>
     7e8:	c1 15       	cp	r28, r1
     7ea:	e9 e0       	ldi	r30, 0x09	; 9
     7ec:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <usart_init_rs232+0xa0>
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	39 d3       	rcall	.+1650   	; 0xe68 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     7f6:	77 c0       	rjmp	.+238    	; 0x8e6 <usart_init_rs232+0x18e>
     7f8:	c1 15       	cp	r28, r1
     7fa:	fa e0       	ldi	r31, 0x0A	; 10
     7fc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     7fe:	21 f4       	brne	.+8      	; 0x808 <usart_init_rs232+0xb0>
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	31 d3       	rcall	.+1634   	; 0xe68 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     806:	6f c0       	rjmp	.+222    	; 0x8e6 <usart_init_rs232+0x18e>
     808:	c0 34       	cpi	r28, 0x40	; 64
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     80e:	21 f4       	brne	.+8      	; 0x818 <usart_init_rs232+0xc0>
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	29 d3       	rcall	.+1618   	; 0xe68 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     816:	67 c0       	rjmp	.+206    	; 0x8e6 <usart_init_rs232+0x18e>
     818:	c0 34       	cpi	r28, 0x40	; 64
     81a:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     81c:	de 07       	cpc	r29, r30
     81e:	21 f4       	brne	.+8      	; 0x828 <usart_init_rs232+0xd0>
     820:	62 e0       	ldi	r22, 0x02	; 2
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	21 d3       	rcall	.+1602   	; 0xe68 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     826:	5f c0       	rjmp	.+190    	; 0x8e6 <usart_init_rs232+0x18e>
     828:	c0 39       	cpi	r28, 0x90	; 144
     82a:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     82c:	df 07       	cpc	r29, r31
     82e:	21 f4       	brne	.+8      	; 0x838 <usart_init_rs232+0xe0>
     830:	64 e0       	ldi	r22, 0x04	; 4
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	19 d3       	rcall	.+1586   	; 0xe68 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     836:	57 c0       	rjmp	.+174    	; 0x8e6 <usart_init_rs232+0x18e>
     838:	c0 39       	cpi	r28, 0x90	; 144
     83a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     83c:	d8 07       	cpc	r29, r24
     83e:	21 f4       	brne	.+8      	; 0x848 <usart_init_rs232+0xf0>
     840:	64 e0       	ldi	r22, 0x04	; 4
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	11 d3       	rcall	.+1570   	; 0xe68 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     846:	4f c0       	rjmp	.+158    	; 0x8e6 <usart_init_rs232+0x18e>
     848:	c0 39       	cpi	r28, 0x90	; 144
     84a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     84c:	de 07       	cpc	r29, r30
     84e:	21 f4       	brne	.+8      	; 0x858 <usart_init_rs232+0x100>
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     854:	09 d3       	rcall	.+1554   	; 0xe68 <sysclk_enable_module>
     856:	47 c0       	rjmp	.+142    	; 0x8e6 <usart_init_rs232+0x18e>
     858:	c0 3c       	cpi	r28, 0xC0	; 192
     85a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     85c:	df 07       	cpc	r29, r31
     85e:	21 f4       	brne	.+8      	; 0x868 <usart_init_rs232+0x110>
     860:	68 e0       	ldi	r22, 0x08	; 8
     862:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     864:	01 d3       	rcall	.+1538   	; 0xe68 <sysclk_enable_module>
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <usart_init_rs232+0x18e>
     868:	c0 3c       	cpi	r28, 0xC0	; 192
     86a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     86c:	d8 07       	cpc	r29, r24
     86e:	21 f4       	brne	.+8      	; 0x878 <usart_init_rs232+0x120>
     870:	68 e0       	ldi	r22, 0x08	; 8
     872:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     874:	f9 d2       	rcall	.+1522   	; 0xe68 <sysclk_enable_module>
     876:	37 c0       	rjmp	.+110    	; 0x8e6 <usart_init_rs232+0x18e>
     878:	c0 3a       	cpi	r28, 0xA0	; 160
     87a:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     87c:	de 07       	cpc	r29, r30
     87e:	21 f4       	brne	.+8      	; 0x888 <usart_init_rs232+0x130>
     880:	60 e1       	ldi	r22, 0x10	; 16
     882:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     884:	f1 d2       	rcall	.+1506   	; 0xe68 <sysclk_enable_module>
     886:	2f c0       	rjmp	.+94     	; 0x8e6 <usart_init_rs232+0x18e>
     888:	c0 3a       	cpi	r28, 0xA0	; 160
     88a:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     88c:	df 07       	cpc	r29, r31
     88e:	21 f4       	brne	.+8      	; 0x898 <usart_init_rs232+0x140>
     890:	60 e1       	ldi	r22, 0x10	; 16
     892:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     894:	e9 d2       	rcall	.+1490   	; 0xe68 <sysclk_enable_module>
     896:	27 c0       	rjmp	.+78     	; 0x8e6 <usart_init_rs232+0x18e>
     898:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	d8 07       	cpc	r29, r24
     89e:	21 f4       	brne	.+8      	; 0x8a8 <usart_init_rs232+0x150>
     8a0:	60 e1       	ldi	r22, 0x10	; 16
     8a2:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     8a4:	e1 d2       	rcall	.+1474   	; 0xe68 <sysclk_enable_module>
     8a6:	1f c0       	rjmp	.+62     	; 0x8e6 <usart_init_rs232+0x18e>
     8a8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     8aa:	e8 e0       	ldi	r30, 0x08	; 8
     8ac:	de 07       	cpc	r29, r30
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <usart_init_rs232+0x160>
     8b0:	60 e2       	ldi	r22, 0x20	; 32
     8b2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     8b4:	d9 d2       	rcall	.+1458   	; 0xe68 <sysclk_enable_module>
     8b6:	17 c0       	rjmp	.+46     	; 0x8e6 <usart_init_rs232+0x18e>
     8b8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     8ba:	f9 e0       	ldi	r31, 0x09	; 9
     8bc:	df 07       	cpc	r29, r31
     8be:	21 f4       	brne	.+8      	; 0x8c8 <usart_init_rs232+0x170>
     8c0:	60 e2       	ldi	r22, 0x20	; 32
     8c2:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     8c4:	d1 d2       	rcall	.+1442   	; 0xe68 <sysclk_enable_module>
     8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <usart_init_rs232+0x18e>
     8c8:	c0 38       	cpi	r28, 0x80	; 128
     8ca:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     8cc:	d8 07       	cpc	r29, r24
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <usart_init_rs232+0x180>
     8d0:	60 e4       	ldi	r22, 0x40	; 64
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	c9 d2       	rcall	.+1426   	; 0xe68 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <usart_init_rs232+0x18e>
     8d8:	c0 3a       	cpi	r28, 0xA0	; 160
     8da:	e4 e0       	ldi	r30, 0x04	; 4
     8dc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     8de:	19 f4       	brne	.+6      	; 0x8e6 <usart_init_rs232+0x18e>
     8e0:	60 e4       	ldi	r22, 0x40	; 64
     8e2:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     8e4:	c1 d2       	rcall	.+1410   	; 0xe68 <sysclk_enable_module>
     8e6:	8d 81       	ldd	r24, Y+5	; 0x05
     8e8:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     8ea:	8d 83       	std	Y+5, r24	; 0x05
     8ec:	f8 01       	movw	r30, r16
     8ee:	95 81       	ldd	r25, Z+5	; 0x05
     8f0:	84 81       	ldd	r24, Z+4	; 0x04
     8f2:	89 2b       	or	r24, r25
     8f4:	96 81       	ldd	r25, Z+6	; 0x06
     8f6:	91 11       	cpse	r25, r1
     8f8:	98 e0       	ldi	r25, 0x08	; 8
     8fa:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     8fc:	8d 83       	std	Y+5, r24	; 0x05
     8fe:	f8 01       	movw	r30, r16
     900:	40 81       	ld	r20, Z
     902:	51 81       	ldd	r21, Z+1	; 0x01
     904:	62 81       	ldd	r22, Z+2	; 0x02
     906:	73 81       	ldd	r23, Z+3	; 0x03
     908:	00 e0       	ldi	r16, 0x00	; 0
     90a:	18 e4       	ldi	r17, 0x48	; 72
     90c:	28 ee       	ldi	r18, 0xE8	; 232
     90e:	31 e0       	ldi	r19, 0x01	; 1
     910:	ce 01       	movw	r24, r28
     912:	0f de       	rcall	.-994    	; 0x532 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	98 60       	ori	r25, 0x08	; 8
     918:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	90 61       	ori	r25, 0x10	; 16
     91e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     92a:	08 95       	ret

0000092c <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= 0x08; // Sets A3 to output
     92c:	e0 e0       	ldi	r30, 0x00	; 0
     92e:	f6 e0       	ldi	r31, 0x06	; 6
     930:	80 81       	ld	r24, Z
     932:	88 60       	ori	r24, 0x08	; 8
     934:	80 83       	st	Z, r24
     936:	08 95       	ret

00000938 <cam_switch>:
}

void cam_switch(void){
	PORTA.OUT ^= 0x08; // Changes A3 from high to low or vice-versa
     938:	e0 e0       	ldi	r30, 0x00	; 0
     93a:	f6 e0       	ldi	r31, 0x06	; 6
     93c:	94 81       	ldd	r25, Z+4	; 0x04
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	89 27       	eor	r24, r25
     942:	84 83       	std	Z+4, r24	; 0x04
     944:	08 95       	ret

00000946 <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	27 97       	sbiw	r28, 0x07	; 7
     950:	cd bf       	out	0x3d, r28	; 61
     952:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     954:	60 e2       	ldi	r22, 0x20	; 32
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	87 d2       	rcall	.+1294   	; 0xe68 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     95a:	e0 e6       	ldi	r30, 0x60	; 96
     95c:	f6 e0       	ldi	r31, 0x06	; 6
     95e:	80 81       	ld	r24, Z
     960:	80 68       	ori	r24, 0x80	; 128
     962:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	f0 e2       	ldi	r31, 0x20	; 32
     968:	84 81       	ldd	r24, Z+4	; 0x04
     96a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     96c:	85 81       	ldd	r24, Z+5	; 0x05
     96e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     970:	86 81       	ldd	r24, Z+6	; 0x06
     972:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	a2 81       	ldd	r26, Z+2	; 0x02
     97a:	b3 81       	ldd	r27, Z+3	; 0x03
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	ab 83       	std	Y+3, r26	; 0x03
     982:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     984:	60 e2       	ldi	r22, 0x20	; 32
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	6f d2       	rcall	.+1246   	; 0xe68 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     98a:	be 01       	movw	r22, r28
     98c:	6f 5f       	subi	r22, 0xFF	; 255
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	80 eb       	ldi	r24, 0xB0	; 176
     992:	99 e0       	ldi	r25, 0x09	; 9
     994:	e1 de       	rcall	.-574    	; 0x758 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     996:	27 96       	adiw	r28, 0x07	; 7
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     9a4:	61 50       	subi	r22, 0x01	; 1
     9a6:	71 09       	sbc	r23, r1
     9a8:	81 09       	sbc	r24, r1
     9aa:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     9ac:	61 15       	cp	r22, r1
     9ae:	71 05       	cpc	r23, r1
     9b0:	81 05       	cpc	r24, r1
     9b2:	91 05       	cpc	r25, r1
     9b4:	b9 f7       	brne	.-18     	; 0x9a4 <__portable_avr_delay_cycles+0x2>
     9b6:	08 95       	ret

000009b8 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     9b8:	e0 e4       	ldi	r30, 0x40	; 64
     9ba:	f6 e0       	ldi	r31, 0x06	; 6
     9bc:	94 81       	ldd	r25, Z+4	; 0x04
     9be:	80 e1       	ldi	r24, 0x10	; 16
     9c0:	89 27       	eor	r24, r25
     9c2:	84 83       	std	Z+4, r24	; 0x04
     9c4:	08 95       	ret

000009c6 <ms5607_init>:
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	// Resets the ms5607
	flip_ms5607();
     9c6:	f8 df       	rcall	.-16     	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     9c8:	8e e1       	ldi	r24, 0x1E	; 30
     9ca:	7d d0       	rcall	.+250    	; 0xac6 <spi_write>
	delay_ms(3);
     9cc:	60 e8       	ldi	r22, 0x80	; 128
     9ce:	7e e3       	ldi	r23, 0x3E	; 62
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     9d4:	e6 df       	rcall	.-52     	; 0x9a2 <__portable_avr_delay_cycles>
     9d6:	f0 df       	rcall	.-32     	; 0x9b8 <flip_ms5607>
	delay_ms(2);
     9d8:	6b ea       	ldi	r22, 0xAB	; 171
     9da:	79 e2       	ldi	r23, 0x29	; 41
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	e0 cf       	rjmp	.-64     	; 0x9a2 <__portable_avr_delay_cycles>
     9e2:	08 95       	ret

000009e4 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     9ea:	e6 df       	rcall	.-52     	; 0x9b8 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     9ec:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     9ee:	6b d0       	rcall	.+214    	; 0xac6 <spi_write>
     9f0:	5a d0       	rcall	.+180    	; 0xaa6 <spi_read>
     9f2:	c8 2f       	mov	r28, r24
     9f4:	d0 e0       	ldi	r29, 0x00	; 0
     9f6:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     9f8:	cc 27       	eor	r28, r28
     9fa:	55 d0       	rcall	.+170    	; 0xaa6 <spi_read>
     9fc:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     9fe:	dc df       	rcall	.-72     	; 0x9b8 <flip_ms5607>
     a00:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <ms5607_convert_d1>:
     a08:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     a0a:	df 92       	push	r13
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     a10:	d3 df       	rcall	.-90     	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     a12:	88 e4       	ldi	r24, 0x48	; 72
     a14:	58 d0       	rcall	.+176    	; 0xac6 <spi_write>
	delay_ms(10);
     a16:	66 e5       	ldi	r22, 0x56	; 86
     a18:	70 ed       	ldi	r23, 0xD0	; 208
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a1e:	c1 df       	rcall	.-126    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a20:	cb df       	rcall	.-106    	; 0x9b8 <flip_ms5607>
     a22:	ca df       	rcall	.-108    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	4f d0       	rcall	.+158    	; 0xac6 <spi_write>
     a28:	3e d0       	rcall	.+124    	; 0xaa6 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a2a:	c8 2e       	mov	r12, r24
     a2c:	d1 2c       	mov	r13, r1
     a2e:	e1 2c       	mov	r14, r1
     a30:	f1 2c       	mov	r15, r1
     a32:	76 01       	movw	r14, r12
     a34:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a36:	cc 24       	eor	r12, r12
     a38:	36 d0       	rcall	.+108    	; 0xaa6 <spi_read>
     a3a:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a3c:	34 d0       	rcall	.+104    	; 0xaa6 <spi_read>
     a3e:	c8 2a       	or	r12, r24
     a40:	bb df       	rcall	.-138    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a42:	c7 01       	movw	r24, r14
     a44:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <ms5607_convert_d2>:
     a50:	cf 92       	push	r12
     a52:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     a58:	af df       	rcall	.-162    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     a5a:	88 e5       	ldi	r24, 0x58	; 88
     a5c:	34 d0       	rcall	.+104    	; 0xac6 <spi_write>
	delay_ms(10);
     a5e:	66 e5       	ldi	r22, 0x56	; 86
     a60:	70 ed       	ldi	r23, 0xD0	; 208
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a66:	9d df       	rcall	.-198    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a68:	a7 df       	rcall	.-178    	; 0x9b8 <flip_ms5607>
     a6a:	a6 df       	rcall	.-180    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	2b d0       	rcall	.+86     	; 0xac6 <spi_write>
     a70:	1a d0       	rcall	.+52     	; 0xaa6 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	e1 2c       	mov	r14, r1
     a78:	f1 2c       	mov	r15, r1
     a7a:	76 01       	movw	r14, r12
     a7c:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a7e:	cc 24       	eor	r12, r12
     a80:	12 d0       	rcall	.+36     	; 0xaa6 <spi_read>
     a82:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a84:	10 d0       	rcall	.+32     	; 0xaa6 <spi_read>
     a86:	c8 2a       	or	r12, r24
     a88:	97 df       	rcall	.-210    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	08 95       	ret

00000a98 <spi_init>:
     a98:	68 e0       	ldi	r22, 0x08	; 8
     a9a:	83 e0       	ldi	r24, 0x03	; 3
	SPIC.CTRL = 0x51; //enables SPI and puts a  prescaler of 16
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     a9c:	e5 d1       	rcall	.+970    	; 0xe68 <sysclk_enable_module>
     a9e:	81 e5       	ldi	r24, 0x51	; 81
     aa0:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     aa4:	08 95       	ret

00000aa6 <spi_read>:

uint8_t spi_read(void)
{
	uint8_t iter_max = 100;
	uint8_t count = 0;
	SPIC.DATA = 0xFF; // make the DATA register something we know
     aa6:	e0 ec       	ldi	r30, 0xC0	; 192
     aa8:	f8 e0       	ldi	r31, 0x08	; 8
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS>>7) && count < iter_max){ // wait for the SPI interrupt flag to let us know the transfer is complete
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	88 23       	and	r24, r24
     ab2:	34 f0       	brlt	.+12     	; 0xac0 <spi_read+0x1a>
     ab4:	84 e6       	ldi	r24, 0x64	; 100
     ab6:	92 81       	ldd	r25, Z+2	; 0x02
     ab8:	99 23       	and	r25, r25
     aba:	14 f0       	brlt	.+4      	; 0xac0 <spi_read+0x1a>
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	d9 f7       	brne	.-10     	; 0xab6 <spi_read+0x10>
		count++;	
	}
	
	return SPIC.DATA; // return the data from this function
     ac0:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     ac4:	08 95       	ret

00000ac6 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     ac6:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     aca:	e0 ec       	ldi	r30, 0xC0	; 192
     acc:	f8 e0       	ldi	r31, 0x08	; 8
     ace:	82 81       	ldd	r24, Z+2	; 0x02
     ad0:	88 23       	and	r24, r24
     ad2:	ec f7       	brge	.-6      	; 0xace <spi_write+0x8>
     ad4:	08 95       	ret

00000ad6 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     adc:	24 dd       	rcall	.-1464   	; 0x526 <usart_getchar>
     ade:	88 83       	st	Y, r24
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     ae6:	17 cd       	rjmp	.-1490   	; 0x516 <usart_putchar>
}
     ae8:	08 95       	ret

00000aea <data_terminal_init>:

#include <asf.h>
#include "data_logger.h"

void data_terminal_init()
{
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	27 97       	sbiw	r28, 0x07	; 7
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     af8:	60 e1       	ldi	r22, 0x10	; 16
     afa:	85 e0       	ldi	r24, 0x05	; 5
     afc:	b5 d1       	rcall	.+874    	; 0xe68 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     afe:	e0 e8       	ldi	r30, 0x80	; 128
     b00:	f6 e0       	ldi	r31, 0x06	; 6
     b02:	80 81       	ld	r24, Z
     b04:	88 60       	ori	r24, 0x08	; 8
     b06:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     b08:	80 ea       	ldi	r24, 0xA0	; 160
     b0a:	9a e0       	ldi	r25, 0x0A	; 10
     b0c:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <stdio_base>
     b10:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     b14:	83 e7       	ldi	r24, 0x73	; 115
     b16:	95 e0       	ldi	r25, 0x05	; 5
     b18:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <ptr_put>
     b1c:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     b20:	8b e6       	ldi	r24, 0x6B	; 107
     b22:	95 e0       	ldi	r25, 0x05	; 5
     b24:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <ptr_get>
     b28:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     b2c:	ed e0       	ldi	r30, 0x0D	; 13
     b2e:	f0 e2       	ldi	r31, 0x20	; 32
     b30:	84 81       	ldd	r24, Z+4	; 0x04
     b32:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     b34:	85 81       	ldd	r24, Z+5	; 0x05
     b36:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     b38:	86 81       	ldd	r24, Z+6	; 0x06
     b3a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     b3c:	80 81       	ld	r24, Z
     b3e:	91 81       	ldd	r25, Z+1	; 0x01
     b40:	a2 81       	ldd	r26, Z+2	; 0x02
     b42:	b3 81       	ldd	r27, Z+3	; 0x03
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	ab 83       	std	Y+3, r26	; 0x03
     b4a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     b4c:	60 e1       	ldi	r22, 0x10	; 16
     b4e:	85 e0       	ldi	r24, 0x05	; 5
     b50:	8b d1       	rcall	.+790    	; 0xe68 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     b52:	be 01       	movw	r22, r28
     b54:	6f 5f       	subi	r22, 0xFF	; 255
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	80 ea       	ldi	r24, 0xA0	; 160
     b5a:	9a e0       	ldi	r25, 0x0A	; 10
     b5c:	fd dd       	rcall	.-1030   	; 0x758 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     b5e:	6c e6       	ldi	r22, 0x6C	; 108
     b60:	71 e0       	ldi	r23, 0x01	; 1
     b62:	85 e8       	ldi	r24, 0x85	; 133
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
     b6a:	27 96       	adiw	r28, 0x07	; 7
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <__portable_avr_delay_cycles>:
}

uint8_t XBEE_uart_read(void){
	uint8_t c = usart_getchar(XBEE_TERMINAL_SERIAL);
	return c;
}
     b76:	04 c0       	rjmp	.+8      	; 0xb80 <__portable_avr_delay_cycles+0xa>
     b78:	61 50       	subi	r22, 0x01	; 1
     b7a:	71 09       	sbc	r23, r1
     b7c:	81 09       	sbc	r24, r1
     b7e:	91 09       	sbc	r25, r1
     b80:	61 15       	cp	r22, r1
     b82:	71 05       	cpc	r23, r1
     b84:	81 05       	cpc	r24, r1
     b86:	91 05       	cpc	r25, r1
     b88:	b9 f7       	brne	.-18     	; 0xb78 <__portable_avr_delay_cycles+0x2>
     b8a:	08 95       	ret

00000b8c <XBEE_spi_init>:
     b8c:	e0 e4       	ldi	r30, 0x40	; 64
     b8e:	f6 e0       	ldi	r31, 0x06	; 6
     b90:	80 81       	ld	r24, Z
     b92:	84 60       	ori	r24, 0x04	; 4
     b94:	80 83       	st	Z, r24
     b96:	84 81       	ldd	r24, Z+4	; 0x04
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	84 83       	std	Z+4, r24	; 0x04
     b9c:	08 95       	ret

00000b9e <flip_XBEE>:
	flip_XBEE();
	return data;
}

void flip_XBEE(void){
	XBEE_SS_PORT.OUT ^= XBEE_SS_PIN;
     b9e:	e0 e4       	ldi	r30, 0x40	; 64
     ba0:	f6 e0       	ldi	r31, 0x06	; 6
     ba2:	94 81       	ldd	r25, Z+4	; 0x04
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	89 27       	eor	r24, r25
     ba8:	84 83       	std	Z+4, r24	; 0x04
     baa:	08 95       	ret

00000bac <XBEE_spi_write>:
uint8_t XBEE_uart_read(void){
	uint8_t c = usart_getchar(XBEE_TERMINAL_SERIAL);
	return c;
}

void XBEE_spi_write(char* data){
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	ec 01       	movw	r28, r24
	flip_XBEE();
     bb4:	f4 df       	rcall	.-24     	; 0xb9e <flip_XBEE>
	for(uint8_t i = 0; i < strlen(data); i++){
     bb6:	10 e0       	ldi	r17, 0x00	; 0
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <XBEE_spi_write+0x1a>
		spi_write((uint8_t) data[i]);
     bba:	fe 01       	movw	r30, r28
     bbc:	e8 0f       	add	r30, r24
     bbe:	f9 1f       	adc	r31, r25
     bc0:	80 81       	ld	r24, Z
     bc2:	81 df       	rcall	.-254    	; 0xac6 <spi_write>
	return c;
}

void XBEE_spi_write(char* data){
	flip_XBEE();
	for(uint8_t i = 0; i < strlen(data); i++){
     bc4:	1f 5f       	subi	r17, 0xFF	; 255
     bc6:	81 2f       	mov	r24, r17
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	fe 01       	movw	r30, r28
     bcc:	01 90       	ld	r0, Z+
     bce:	00 20       	and	r0, r0
     bd0:	e9 f7       	brne	.-6      	; 0xbcc <XBEE_spi_write+0x20>
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	ec 1b       	sub	r30, r28
     bd6:	fd 0b       	sbc	r31, r29
     bd8:	8e 17       	cp	r24, r30
     bda:	9f 07       	cpc	r25, r31
     bdc:	70 f3       	brcs	.-36     	; 0xbba <XBEE_spi_write+0xe>
		spi_write((uint8_t) data[i]);
	}
	delay_ms(5);
     bde:	6b e2       	ldi	r22, 0x2B	; 43
     be0:	78 e6       	ldi	r23, 0x68	; 104
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
	flip_XBEE();
     be6:	c7 df       	rcall	.-114    	; 0xb76 <__portable_avr_delay_cycles>
     be8:	da df       	rcall	.-76     	; 0xb9e <flip_XBEE>
	//usart_putchar(XBEE_TERMINAL_SERIAL, 10);
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	08 95       	ret

00000bf2 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	fc 01       	movw	r30, r24
     bf8:	41 15       	cp	r20, r1
     bfa:	51 05       	cpc	r21, r1
     bfc:	b1 f1       	breq	.+108    	; 0xc6a <rb16_write+0x78>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	db 01       	movw	r26, r22
     c0a:	a8 0f       	add	r26, r24
     c0c:	b9 1f       	adc	r27, r25
     c0e:	8d 91       	ld	r24, X+
     c10:	9c 91       	ld	r25, X
     c12:	a2 81       	ldd	r26, Z+2	; 0x02
     c14:	b3 81       	ldd	r27, Z+3	; 0x03
     c16:	aa 0f       	add	r26, r26
     c18:	bb 1f       	adc	r27, r27
     c1a:	c6 81       	ldd	r28, Z+6	; 0x06
     c1c:	d7 81       	ldd	r29, Z+7	; 0x07
     c1e:	ac 0f       	add	r26, r28
     c20:	bd 1f       	adc	r27, r29
     c22:	8d 93       	st	X+, r24
     c24:	9c 93       	st	X, r25
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	82 83       	std	Z+2, r24	; 0x02
     c2e:	93 83       	std	Z+3, r25	; 0x03
     c30:	a0 81       	ld	r26, Z
     c32:	b1 81       	ldd	r27, Z+1	; 0x01
     c34:	8a 17       	cp	r24, r26
     c36:	9b 07       	cpc	r25, r27
     c38:	11 f4       	brne	.+4      	; 0xc3e <rb16_write+0x4c>
     c3a:	12 82       	std	Z+2, r1	; 0x02
     c3c:	13 82       	std	Z+3, r1	; 0x03
     c3e:	82 81       	ldd	r24, Z+2	; 0x02
     c40:	93 81       	ldd	r25, Z+3	; 0x03
     c42:	c4 81       	ldd	r28, Z+4	; 0x04
     c44:	d5 81       	ldd	r29, Z+5	; 0x05
     c46:	8c 17       	cp	r24, r28
     c48:	9d 07       	cpc	r25, r29
     c4a:	49 f4       	brne	.+18     	; 0xc5e <rb16_write+0x6c>
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	a8 17       	cp	r26, r24
     c50:	b9 07       	cpc	r27, r25
     c52:	19 f0       	breq	.+6      	; 0xc5a <rb16_write+0x68>
     c54:	84 83       	std	Z+4, r24	; 0x04
     c56:	95 83       	std	Z+5, r25	; 0x05
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <rb16_write+0x6c>
     c5a:	14 82       	std	Z+4, r1	; 0x04
     c5c:	15 82       	std	Z+5, r1	; 0x05
     c5e:	2f 5f       	subi	r18, 0xFF	; 255
     c60:	82 2f       	mov	r24, r18
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	84 17       	cp	r24, r20
     c66:	95 07       	cpc	r25, r21
     c68:	68 f2       	brcs	.-102    	; 0xc04 <rb16_write+0x12>
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <rb16_init>:
     c70:	fc 01       	movw	r30, r24
     c72:	12 82       	std	Z+2, r1	; 0x02
     c74:	13 82       	std	Z+3, r1	; 0x03
     c76:	14 82       	std	Z+4, r1	; 0x04
     c78:	15 82       	std	Z+5, r1	; 0x05
     c7a:	66 83       	std	Z+6, r22	; 0x06
     c7c:	77 83       	std	Z+7, r23	; 0x07
     c7e:	40 83       	st	Z, r20
     c80:	51 83       	std	Z+1, r21	; 0x01
     c82:	08 95       	ret

00000c84 <rb16_get_nth>:
     c84:	dc 01       	movw	r26, r24
     c86:	12 96       	adiw	r26, 0x02	; 2
     c88:	ed 91       	ld	r30, X+
     c8a:	fc 91       	ld	r31, X
     c8c:	13 97       	sbiw	r26, 0x03	; 3
     c8e:	cb 01       	movw	r24, r22
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	e8 17       	cp	r30, r24
     c94:	f9 07       	cpc	r31, r25
     c96:	78 f0       	brcs	.+30     	; 0xcb6 <rb16_get_nth+0x32>
     c98:	e1 50       	subi	r30, 0x01	; 1
     c9a:	f0 48       	sbci	r31, 0x80	; 128
     c9c:	e6 1b       	sub	r30, r22
     c9e:	f7 0b       	sbc	r31, r23
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	16 96       	adiw	r26, 0x06	; 6
     ca6:	8d 91       	ld	r24, X+
     ca8:	9c 91       	ld	r25, X
     caa:	17 97       	sbiw	r26, 0x07	; 7
     cac:	e8 0f       	add	r30, r24
     cae:	f9 1f       	adc	r31, r25
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	08 95       	ret
     cb6:	2d 91       	ld	r18, X+
     cb8:	3c 91       	ld	r19, X
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	e2 0f       	add	r30, r18
     cbe:	f3 1f       	adc	r31, r19
     cc0:	e1 50       	subi	r30, 0x01	; 1
     cc2:	f0 48       	sbci	r31, 0x80	; 128
     cc4:	e6 1b       	sub	r30, r22
     cc6:	f7 0b       	sbc	r31, r23
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	16 96       	adiw	r26, 0x06	; 6
     cce:	8d 91       	ld	r24, X+
     cd0:	9c 91       	ld	r25, X
     cd2:	17 97       	sbiw	r26, 0x07	; 7
     cd4:	e8 0f       	add	r30, r24
     cd6:	f9 1f       	adc	r31, r25
     cd8:	80 81       	ld	r24, Z
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	08 95       	ret

00000cde <rb32_write>:
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	fc 01       	movw	r30, r24
     cec:	41 15       	cp	r20, r1
     cee:	51 05       	cpc	r21, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <rb32_write+0x16>
     cf2:	3f c0       	rjmp	.+126    	; 0xd72 <rb32_write+0x94>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	db 01       	movw	r26, r22
     d04:	a8 0f       	add	r26, r24
     d06:	b9 1f       	adc	r27, r25
     d08:	cd 90       	ld	r12, X+
     d0a:	dd 90       	ld	r13, X+
     d0c:	ed 90       	ld	r14, X+
     d0e:	fc 90       	ld	r15, X
     d10:	a2 81       	ldd	r26, Z+2	; 0x02
     d12:	b3 81       	ldd	r27, Z+3	; 0x03
     d14:	aa 0f       	add	r26, r26
     d16:	bb 1f       	adc	r27, r27
     d18:	aa 0f       	add	r26, r26
     d1a:	bb 1f       	adc	r27, r27
     d1c:	86 81       	ldd	r24, Z+6	; 0x06
     d1e:	97 81       	ldd	r25, Z+7	; 0x07
     d20:	a8 0f       	add	r26, r24
     d22:	b9 1f       	adc	r27, r25
     d24:	cd 92       	st	X+, r12
     d26:	dd 92       	st	X+, r13
     d28:	ed 92       	st	X+, r14
     d2a:	fc 92       	st	X, r15
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	82 83       	std	Z+2, r24	; 0x02
     d36:	93 83       	std	Z+3, r25	; 0x03
     d38:	a0 81       	ld	r26, Z
     d3a:	b1 81       	ldd	r27, Z+1	; 0x01
     d3c:	8a 17       	cp	r24, r26
     d3e:	9b 07       	cpc	r25, r27
     d40:	11 f4       	brne	.+4      	; 0xd46 <rb32_write+0x68>
     d42:	12 82       	std	Z+2, r1	; 0x02
     d44:	13 82       	std	Z+3, r1	; 0x03
     d46:	82 81       	ldd	r24, Z+2	; 0x02
     d48:	93 81       	ldd	r25, Z+3	; 0x03
     d4a:	c4 81       	ldd	r28, Z+4	; 0x04
     d4c:	d5 81       	ldd	r29, Z+5	; 0x05
     d4e:	8c 17       	cp	r24, r28
     d50:	9d 07       	cpc	r25, r29
     d52:	49 f4       	brne	.+18     	; 0xd66 <rb32_write+0x88>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	a8 17       	cp	r26, r24
     d58:	b9 07       	cpc	r27, r25
     d5a:	19 f0       	breq	.+6      	; 0xd62 <rb32_write+0x84>
     d5c:	84 83       	std	Z+4, r24	; 0x04
     d5e:	95 83       	std	Z+5, r25	; 0x05
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <rb32_write+0x88>
     d62:	14 82       	std	Z+4, r1	; 0x04
     d64:	15 82       	std	Z+5, r1	; 0x05
     d66:	2f 5f       	subi	r18, 0xFF	; 255
     d68:	82 2f       	mov	r24, r18
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	84 17       	cp	r24, r20
     d6e:	95 07       	cpc	r25, r21
     d70:	20 f2       	brcs	.-120    	; 0xcfa <rb32_write+0x1c>
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	df 90       	pop	r13
     d7c:	cf 90       	pop	r12
     d7e:	08 95       	ret

00000d80 <rb32_init>:
     d80:	fc 01       	movw	r30, r24
     d82:	12 82       	std	Z+2, r1	; 0x02
     d84:	13 82       	std	Z+3, r1	; 0x03
     d86:	14 82       	std	Z+4, r1	; 0x04
     d88:	15 82       	std	Z+5, r1	; 0x05
     d8a:	66 83       	std	Z+6, r22	; 0x06
     d8c:	77 83       	std	Z+7, r23	; 0x07
     d8e:	40 83       	st	Z, r20
     d90:	51 83       	std	Z+1, r21	; 0x01
     d92:	08 95       	ret

00000d94 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     d94:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	ed 91       	ld	r30, X+
     d9a:	fc 91       	ld	r31, X
     d9c:	13 97       	sbiw	r26, 0x03	; 3
     d9e:	cb 01       	movw	r24, r22
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	e8 17       	cp	r30, r24
     da4:	f9 07       	cpc	r31, r25
     da6:	98 f0       	brcs	.+38     	; 0xdce <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     da8:	e1 50       	subi	r30, 0x01	; 1
     daa:	f0 4c       	sbci	r31, 0xC0	; 192
     dac:	e6 1b       	sub	r30, r22
     dae:	f7 0b       	sbc	r31, r23
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	16 96       	adiw	r26, 0x06	; 6
     dba:	8d 91       	ld	r24, X+
     dbc:	9c 91       	ld	r25, X
     dbe:	17 97       	sbiw	r26, 0x07	; 7
     dc0:	e8 0f       	add	r30, r24
     dc2:	f9 1f       	adc	r31, r25
     dc4:	60 81       	ld	r22, Z
     dc6:	71 81       	ldd	r23, Z+1	; 0x01
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	93 81       	ldd	r25, Z+3	; 0x03
     dcc:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     dce:	2d 91       	ld	r18, X+
     dd0:	3c 91       	ld	r19, X
     dd2:	11 97       	sbiw	r26, 0x01	; 1
     dd4:	e2 0f       	add	r30, r18
     dd6:	f3 1f       	adc	r31, r19
     dd8:	e1 50       	subi	r30, 0x01	; 1
     dda:	f0 4c       	sbci	r31, 0xC0	; 192
     ddc:	e6 1b       	sub	r30, r22
     dde:	f7 0b       	sbc	r31, r23
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	16 96       	adiw	r26, 0x06	; 6
     dea:	8d 91       	ld	r24, X+
     dec:	9c 91       	ld	r25, X
     dee:	17 97       	sbiw	r26, 0x07	; 7
     df0:	e8 0f       	add	r30, r24
     df2:	f9 1f       	adc	r31, r25
     df4:	60 81       	ld	r22, Z
     df6:	71 81       	ldd	r23, Z+1	; 0x01
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
}
     dfc:	08 95       	ret

00000dfe <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	1f 92       	push	r1
     e04:	1f 92       	push	r1
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     e10:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     e14:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     e18:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     e1c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     e20:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     e24:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e28:	8f b7       	in	r24, 0x3f	; 63
     e2a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     e2c:	f8 94       	cli
	return flags;
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e30:	e0 e5       	ldi	r30, 0x50	; 80
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	82 60       	ori	r24, 0x02	; 2
     e38:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e3a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e3c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e3e:	81 ff       	sbrs	r24, 1
     e40:	fd cf       	rjmp	.-6      	; 0xe3c <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	80 e4       	ldi	r24, 0x40	; 64
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	25 d0       	rcall	.+74     	; 0xe94 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e4a:	8f b7       	in	r24, 0x3f	; 63
     e4c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e4e:	f8 94       	cli
	return flags;
     e50:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     e52:	e0 e5       	ldi	r30, 0x50	; 80
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8e 7f       	andi	r24, 0xFE	; 254
     e5a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e5c:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	1f 92       	push	r1
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e72:	9f b7       	in	r25, 0x3f	; 63
     e74:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e76:	f8 94       	cli
	return flags;
     e78:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e7a:	e8 2f       	mov	r30, r24
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	e0 59       	subi	r30, 0x90	; 144
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	60 95       	com	r22
     e84:	80 81       	ld	r24, Z
     e86:	68 23       	and	r22, r24
     e88:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e8a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     e8c:	0f 90       	pop	r0
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e94:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e96:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e98:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e9a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e9c:	60 83       	st	Z, r22
	ret                             // Return to caller
     e9e:	08 95       	ret

00000ea0 <__portable_avr_delay_cycles>:
		case SEND_GPS_LOCATION:
			send_gps();
			//printf("SEND_GPS_LOCATION\n");
			break;
		case PACKET:
			packet();
     ea0:	04 c0       	rjmp	.+8      	; 0xeaa <__portable_avr_delay_cycles+0xa>
     ea2:	61 50       	subi	r22, 0x01	; 1
     ea4:	71 09       	sbc	r23, r1
     ea6:	81 09       	sbc	r24, r1
     ea8:	91 09       	sbc	r25, r1
     eaa:	61 15       	cp	r22, r1
     eac:	71 05       	cpc	r23, r1
     eae:	81 05       	cpc	r24, r1
     eb0:	91 05       	cpc	r25, r1
     eb2:	b9 f7       	brne	.-18     	; 0xea2 <__portable_avr_delay_cycles+0x2>
     eb4:	08 95       	ret

00000eb6 <pressure_init>:
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	85 dd       	rcall	.-1270   	; 0x9c6 <ms5607_init>
     ebc:	82 ea       	ldi	r24, 0xA2	; 162
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	91 dd       	rcall	.-1246   	; 0x9e4 <ms5607_read>
     ec2:	cf ee       	ldi	r28, 0xEF	; 239
     ec4:	d0 e2       	ldi	r29, 0x20	; 32
     ec6:	88 83       	st	Y, r24
     ec8:	99 83       	std	Y+1, r25	; 0x01
     eca:	84 ea       	ldi	r24, 0xA4	; 164
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	8a dd       	rcall	.-1260   	; 0x9e4 <ms5607_read>
     ed0:	8a 83       	std	Y+2, r24	; 0x02
     ed2:	9b 83       	std	Y+3, r25	; 0x03
     ed4:	86 ea       	ldi	r24, 0xA6	; 166
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	85 dd       	rcall	.-1270   	; 0x9e4 <ms5607_read>
     eda:	8c 83       	std	Y+4, r24	; 0x04
     edc:	9d 83       	std	Y+5, r25	; 0x05
     ede:	88 ea       	ldi	r24, 0xA8	; 168
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	80 dd       	rcall	.-1280   	; 0x9e4 <ms5607_read>
     ee4:	8e 83       	std	Y+6, r24	; 0x06
     ee6:	9f 83       	std	Y+7, r25	; 0x07
     ee8:	8a ea       	ldi	r24, 0xAA	; 170
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	7b dd       	rcall	.-1290   	; 0x9e4 <ms5607_read>
     eee:	88 87       	std	Y+8, r24	; 0x08
     ef0:	99 87       	std	Y+9, r25	; 0x09
     ef2:	8c ea       	ldi	r24, 0xAC	; 172
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	76 dd       	rcall	.-1300   	; 0x9e4 <ms5607_read>
     ef8:	8a 87       	std	Y+10, r24	; 0x0a
     efa:	9b 87       	std	Y+11, r25	; 0x0b
     efc:	9f 93       	push	r25
     efe:	8f 93       	push	r24
     f00:	89 85       	ldd	r24, Y+9	; 0x09
     f02:	8f 93       	push	r24
     f04:	88 85       	ldd	r24, Y+8	; 0x08
     f06:	8f 93       	push	r24
     f08:	8f 81       	ldd	r24, Y+7	; 0x07
     f0a:	8f 93       	push	r24
     f0c:	8e 81       	ldd	r24, Y+6	; 0x06
     f0e:	8f 93       	push	r24
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	8f 93       	push	r24
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	8f 93       	push	r24
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	8f 93       	push	r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	8f 93       	push	r24
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	8f 93       	push	r24
     f24:	88 81       	ld	r24, Y
     f26:	8f 93       	push	r24
     f28:	81 e9       	ldi	r24, 0x91	; 145
     f2a:	90 e2       	ldi	r25, 0x20	; 32
     f2c:	9f 93       	push	r25
     f2e:	8f 93       	push	r24
     f30:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <printf>
     f34:	8d b7       	in	r24, 0x3d	; 61
     f36:	9e b7       	in	r25, 0x3e	; 62
     f38:	0e 96       	adiw	r24, 0x0e	; 14
     f3a:	8d bf       	out	0x3d, r24	; 61
     f3c:	9e bf       	out	0x3e, r25	; 62
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <gps_init>:
     f44:	00 dd       	rcall	.-1536   	; 0x946 <gps_uart_init>
     f46:	6b ea       	ldi	r22, 0xAB	; 171
     f48:	79 e2       	ldi	r23, 0x29	; 41
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a8 df       	rcall	.-176    	; 0xea0 <__portable_avr_delay_cycles>
     f50:	80 e3       	ldi	r24, 0x30	; 48
     f52:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
     f56:	08 95       	ret

00000f58 <get_pressure>:
     f58:	4f 92       	push	r4
     f5a:	5f 92       	push	r5
     f5c:	6f 92       	push	r6
     f5e:	7f 92       	push	r7
     f60:	8f 92       	push	r8
     f62:	9f 92       	push	r9
     f64:	af 92       	push	r10
     f66:	bf 92       	push	r11
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	48 dd       	rcall	.-1392   	; 0xa08 <ms5607_convert_d1>
     f78:	6b 01       	movw	r12, r22
     f7a:	7c 01       	movw	r14, r24
     f7c:	69 dd       	rcall	.-1326   	; 0xa50 <ms5607_convert_d2>
     f7e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
     f82:	4b 01       	movw	r8, r22
     f84:	5c 01       	movw	r10, r24
     f86:	cf ee       	ldi	r28, 0xEF	; 239
     f88:	d0 e2       	ldi	r29, 0x20	; 32
     f8a:	68 85       	ldd	r22, Y+8	; 0x08
     f8c:	79 85       	ldd	r23, Y+9	; 0x09
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	53 e4       	ldi	r21, 0x43	; 67
     f9e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     fa2:	9b 01       	movw	r18, r22
     fa4:	ac 01       	movw	r20, r24
     fa6:	c5 01       	movw	r24, r10
     fa8:	b4 01       	movw	r22, r8
     faa:	0e 94 38 11 	call	0x2270	; 0x2270 <__subsf3>
     fae:	4b 01       	movw	r8, r22
     fb0:	5c 01       	movw	r10, r24
     fb2:	6c 81       	ldd	r22, Y+4	; 0x04
     fb4:	7d 81       	ldd	r23, Y+5	; 0x05
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
     fbe:	a5 01       	movw	r20, r10
     fc0:	94 01       	movw	r18, r8
     fc2:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	5c e3       	ldi	r21, 0x3C	; 60
     fce:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     fd2:	2b 01       	movw	r4, r22
     fd4:	3c 01       	movw	r6, r24
     fd6:	68 81       	ld	r22, Y
     fd8:	79 81       	ldd	r23, Y+1	; 0x01
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e8       	ldi	r20, 0x80	; 128
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	c3 01       	movw	r24, r6
     ff4:	b2 01       	movw	r22, r4
     ff6:	0e 94 39 11 	call	0x2272	; 0x2272 <__addsf3>
     ffa:	2b 01       	movw	r4, r22
     ffc:	3c 01       	movw	r6, r24
     ffe:	c7 01       	movw	r24, r14
    1000:	b6 01       	movw	r22, r12
    1002:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
    1006:	9b 01       	movw	r18, r22
    1008:	ac 01       	movw	r20, r24
    100a:	c3 01       	movw	r24, r6
    100c:	b2 01       	movw	r22, r4
    100e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	55 e3       	ldi	r21, 0x35	; 53
    101a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    101e:	6b 01       	movw	r12, r22
    1020:	7c 01       	movw	r14, r24
    1022:	6e 81       	ldd	r22, Y+6	; 0x06
    1024:	7f 81       	ldd	r23, Y+7	; 0x07
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
    102e:	a5 01       	movw	r20, r10
    1030:	94 01       	movw	r18, r8
    1032:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e8       	ldi	r20, 0x80	; 128
    103c:	5c e3       	ldi	r21, 0x3C	; 60
    103e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    1042:	4b 01       	movw	r8, r22
    1044:	5c 01       	movw	r10, r24
    1046:	6a 81       	ldd	r22, Y+2	; 0x02
    1048:	7b 81       	ldd	r23, Y+3	; 0x03
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	58 e4       	ldi	r21, 0x48	; 72
    105a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    105e:	9b 01       	movw	r18, r22
    1060:	ac 01       	movw	r20, r24
    1062:	c5 01       	movw	r24, r10
    1064:	b4 01       	movw	r22, r8
    1066:	0e 94 39 11 	call	0x2272	; 0x2272 <__addsf3>
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	c7 01       	movw	r24, r14
    1070:	b6 01       	movw	r22, r12
    1072:	0e 94 38 11 	call	0x2270	; 0x2270 <__subsf3>
    1076:	0e 94 0e 12 	call	0x241c	; 0x241c <__fixunssfdi>
    107a:	0f e0       	ldi	r16, 0x0F	; 15
    107c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__lshrdi3>
    1080:	0e 94 b1 12 	call	0x2562	; 0x2562 <__floatundisf>
    1084:	6b 01       	movw	r12, r22
    1086:	7c 01       	movw	r14, r24
    1088:	0e 94 43 12 	call	0x2486	; 0x2486 <__fixsfsi>
    108c:	9f 93       	push	r25
    108e:	8f 93       	push	r24
    1090:	7f 93       	push	r23
    1092:	6f 93       	push	r22
    1094:	84 ea       	ldi	r24, 0xA4	; 164
    1096:	90 e2       	ldi	r25, 0x20	; 32
    1098:	9f 93       	push	r25
    109a:	8f 93       	push	r24
    109c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <printf>
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	c7 01       	movw	r24, r14
    10ae:	b6 01       	movw	r22, r12
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	bf 90       	pop	r11
    10c0:	af 90       	pop	r10
    10c2:	9f 90       	pop	r9
    10c4:	8f 90       	pop	r8
    10c6:	7f 90       	pop	r7
    10c8:	6f 90       	pop	r6
    10ca:	5f 90       	pop	r5
    10cc:	4f 90       	pop	r4
    10ce:	08 95       	ret

000010d0 <get_altitude>:
    10d0:	4f 92       	push	r4
    10d2:	5f 92       	push	r5
    10d4:	6f 92       	push	r6
    10d6:	7f 92       	push	r7
    10d8:	8f 92       	push	r8
    10da:	9f 92       	push	r9
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	2b 01       	movw	r4, r22
    10ea:	3c 01       	movw	r6, r24
    10ec:	c0 90 1f 20 	lds	r12, 0x201F	; 0x80201f <L>
    10f0:	d0 90 20 20 	lds	r13, 0x2020	; 0x802020 <L+0x1>
    10f4:	e0 90 21 20 	lds	r14, 0x2021	; 0x802021 <L+0x2>
    10f8:	f0 90 22 20 	lds	r15, 0x2022	; 0x802022 <L+0x3>
    10fc:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <R>
    1100:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <R+0x1>
    1104:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <R+0x2>
    1108:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <R+0x3>
    110c:	c7 01       	movw	r24, r14
    110e:	b6 01       	movw	r22, r12
    1110:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    1114:	20 91 1b 20 	lds	r18, 0x201B	; 0x80201b <g_0>
    1118:	30 91 1c 20 	lds	r19, 0x201C	; 0x80201c <g_0+0x1>
    111c:	40 91 1d 20 	lds	r20, 0x201D	; 0x80201d <g_0+0x2>
    1120:	50 91 1e 20 	lds	r21, 0x201E	; 0x80201e <g_0+0x3>
    1124:	0e 94 a1 11 	call	0x2342	; 0x2342 <__divsf3>
    1128:	4b 01       	movw	r8, r22
    112a:	5c 01       	movw	r10, r24
    112c:	a3 01       	movw	r20, r6
    112e:	92 01       	movw	r18, r4
    1130:	60 91 2b 20 	lds	r22, 0x202B	; 0x80202b <ground_p>
    1134:	70 91 2c 20 	lds	r23, 0x202C	; 0x80202c <ground_p+0x1>
    1138:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <ground_p+0x2>
    113c:	90 91 2e 20 	lds	r25, 0x202E	; 0x80202e <ground_p+0x3>
    1140:	0e 94 a1 11 	call	0x2342	; 0x2342 <__divsf3>
    1144:	a5 01       	movw	r20, r10
    1146:	94 01       	movw	r18, r8
    1148:	0e 94 db 13 	call	0x27b6	; 0x27b6 <pow>
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 38 11 	call	0x2270	; 0x2270 <__subsf3>
    1158:	20 91 27 20 	lds	r18, 0x2027	; 0x802027 <ground_t>
    115c:	30 91 28 20 	lds	r19, 0x2028	; 0x802028 <ground_t+0x1>
    1160:	40 91 29 20 	lds	r20, 0x2029	; 0x802029 <ground_t+0x2>
    1164:	50 91 2a 20 	lds	r21, 0x202A	; 0x80202a <ground_t+0x3>
    1168:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    116c:	a7 01       	movw	r20, r14
    116e:	96 01       	movw	r18, r12
    1170:	0e 94 a1 11 	call	0x2342	; 0x2342 <__divsf3>
    1174:	20 91 fb 20 	lds	r18, 0x20FB	; 0x8020fb <ground_a>
    1178:	30 91 fc 20 	lds	r19, 0x20FC	; 0x8020fc <ground_a+0x1>
    117c:	40 91 fd 20 	lds	r20, 0x20FD	; 0x8020fd <ground_a+0x2>
    1180:	50 91 fe 20 	lds	r21, 0x20FE	; 0x8020fe <ground_a+0x3>
    1184:	0e 94 38 11 	call	0x2270	; 0x2270 <__subsf3>
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	bf 90       	pop	r11
    1192:	af 90       	pop	r10
    1194:	9f 90       	pop	r9
    1196:	8f 90       	pop	r8
    1198:	7f 90       	pop	r7
    119a:	6f 90       	pop	r6
    119c:	5f 90       	pop	r5
    119e:	4f 90       	pop	r4
    11a0:	08 95       	ret

000011a2 <diff>:
    11a2:	2f 92       	push	r2
    11a4:	3f 92       	push	r3
    11a6:	4f 92       	push	r4
    11a8:	5f 92       	push	r5
    11aa:	6f 92       	push	r6
    11ac:	7f 92       	push	r7
    11ae:	8f 92       	push	r8
    11b0:	9f 92       	push	r9
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <diff+0x26>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <diff+0x28>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	6c 01       	movw	r12, r24
    11d0:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    11d4:	88 23       	and	r24, r24
    11d6:	09 f4       	brne	.+2      	; 0x11da <diff+0x38>
    11d8:	6b c0       	rjmp	.+214    	; 0x12b0 <diff+0x10e>
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	41 2c       	mov	r4, r1
    11e0:	51 2c       	mov	r5, r1
    11e2:	32 01       	movw	r6, r4
    11e4:	86 2e       	mov	r8, r22
    11e6:	91 2c       	mov	r9, r1
    11e8:	a1 2c       	mov	r10, r1
    11ea:	b1 2c       	mov	r11, r1
    11ec:	89 82       	std	Y+1, r8	; 0x01
    11ee:	9a 82       	std	Y+2, r9	; 0x02
    11f0:	ab 82       	std	Y+3, r10	; 0x03
    11f2:	bc 82       	std	Y+4, r11	; 0x04
    11f4:	b8 01       	movw	r22, r16
    11f6:	c6 01       	movw	r24, r12
    11f8:	45 dd       	rcall	.-1398   	; 0xc84 <rb16_get_nth>
    11fa:	5c 01       	movw	r10, r24
    11fc:	18 01       	movw	r2, r16
    11fe:	2f ef       	ldi	r18, 0xFF	; 255
    1200:	22 1a       	sub	r2, r18
    1202:	32 0a       	sbc	r3, r18
    1204:	b1 01       	movw	r22, r2
    1206:	c6 01       	movw	r24, r12
    1208:	3d dd       	rcall	.-1414   	; 0xc84 <rb16_get_nth>
    120a:	7c 01       	movw	r14, r24
    120c:	b8 01       	movw	r22, r16
    120e:	6e 5f       	subi	r22, 0xFE	; 254
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	c6 01       	movw	r24, r12
    1214:	37 dd       	rcall	.-1426   	; 0xc84 <rb16_get_nth>
    1216:	a5 01       	movw	r20, r10
    1218:	bb 0c       	add	r11, r11
    121a:	66 0b       	sbc	r22, r22
    121c:	77 0b       	sbc	r23, r23
    121e:	8a 01       	movw	r16, r20
    1220:	9b 01       	movw	r18, r22
    1222:	00 0f       	add	r16, r16
    1224:	11 1f       	adc	r17, r17
    1226:	22 1f       	adc	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	40 0f       	add	r20, r16
    122c:	51 1f       	adc	r21, r17
    122e:	62 1f       	adc	r22, r18
    1230:	73 1f       	adc	r23, r19
    1232:	87 01       	movw	r16, r14
    1234:	ff 0c       	add	r15, r15
    1236:	22 0b       	sbc	r18, r18
    1238:	33 0b       	sbc	r19, r19
    123a:	78 01       	movw	r14, r16
    123c:	89 01       	movw	r16, r18
    123e:	ee 0c       	add	r14, r14
    1240:	ff 1c       	adc	r15, r15
    1242:	00 1f       	adc	r16, r16
    1244:	11 1f       	adc	r17, r17
    1246:	ee 0c       	add	r14, r14
    1248:	ff 1c       	adc	r15, r15
    124a:	00 1f       	adc	r16, r16
    124c:	11 1f       	adc	r17, r17
    124e:	4a 01       	movw	r8, r20
    1250:	5b 01       	movw	r10, r22
    1252:	8e 18       	sub	r8, r14
    1254:	9f 08       	sbc	r9, r15
    1256:	a0 0a       	sbc	r10, r16
    1258:	b1 0a       	sbc	r11, r17
    125a:	ac 01       	movw	r20, r24
    125c:	99 0f       	add	r25, r25
    125e:	66 0b       	sbc	r22, r22
    1260:	77 0b       	sbc	r23, r23
    1262:	d5 01       	movw	r26, r10
    1264:	c4 01       	movw	r24, r8
    1266:	84 0f       	add	r24, r20
    1268:	95 1f       	adc	r25, r21
    126a:	a6 1f       	adc	r26, r22
    126c:	b7 1f       	adc	r27, r23
    126e:	9c 01       	movw	r18, r24
    1270:	ad 01       	movw	r20, r26
    1272:	69 81       	ldd	r22, Y+1	; 0x01
    1274:	7a 81       	ldd	r23, Y+2	; 0x02
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsi3>
    127e:	0e 94 76 12 	call	0x24ec	; 0x24ec <__floatsisf>
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	5f e3       	ldi	r21, 0x3F	; 63
    128a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    128e:	9b 01       	movw	r18, r22
    1290:	ac 01       	movw	r20, r24
    1292:	c3 01       	movw	r24, r6
    1294:	b2 01       	movw	r22, r4
    1296:	ed d7       	rcall	.+4058   	; 0x2272 <__addsf3>
    1298:	2b 01       	movw	r4, r22
    129a:	3c 01       	movw	r6, r24
    129c:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    12a0:	81 01       	movw	r16, r2
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	22 16       	cp	r2, r18
    12a8:	33 06       	cpc	r3, r19
    12aa:	08 f4       	brcc	.+2      	; 0x12ae <diff+0x10c>
    12ac:	a3 cf       	rjmp	.-186    	; 0x11f4 <diff+0x52>
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <diff+0x114>
    12b0:	41 2c       	mov	r4, r1
    12b2:	51 2c       	mov	r5, r1
    12b4:	32 01       	movw	r6, r4
    12b6:	68 2f       	mov	r22, r24
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 76 12 	call	0x24ec	; 0x24ec <__floatsisf>
    12c2:	9b 01       	movw	r18, r22
    12c4:	ac 01       	movw	r20, r24
    12c6:	c3 01       	movw	r24, r6
    12c8:	b2 01       	movw	r22, r4
    12ca:	0e 94 a1 11 	call	0x2342	; 0x2342 <__divsf3>
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	48 ec       	ldi	r20, 0xC8	; 200
    12d4:	52 e4       	ldi	r21, 0x42	; 66
    12d6:	0e 94 a1 11 	call	0x2342	; 0x2342 <__divsf3>
    12da:	26 96       	adiw	r28, 0x06	; 6
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	bf 90       	pop	r11
    12f2:	af 90       	pop	r10
    12f4:	9f 90       	pop	r9
    12f6:	8f 90       	pop	r8
    12f8:	7f 90       	pop	r7
    12fa:	6f 90       	pop	r6
    12fc:	5f 90       	pop	r5
    12fe:	4f 90       	pop	r4
    1300:	3f 90       	pop	r3
    1302:	2f 90       	pop	r2
    1304:	08 95       	ret

00001306 <data_check>:
    1306:	3f 92       	push	r3
    1308:	4f 92       	push	r4
    130a:	5f 92       	push	r5
    130c:	6f 92       	push	r6
    130e:	7f 92       	push	r7
    1310:	8f 92       	push	r8
    1312:	9f 92       	push	r9
    1314:	af 92       	push	r10
    1316:	bf 92       	push	r11
    1318:	cf 92       	push	r12
    131a:	df 92       	push	r13
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	00 d0       	rcall	.+0      	; 0x132a <data_check+0x24>
    132a:	00 d0       	rcall	.+0      	; 0x132c <data_check+0x26>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	8c 01       	movw	r16, r24
    1332:	19 82       	std	Y+1, r1	; 0x01
    1334:	1a 82       	std	Y+2, r1	; 0x02
    1336:	c1 2c       	mov	r12, r1
    1338:	d1 2c       	mov	r13, r1
    133a:	76 01       	movw	r14, r12
    133c:	69 81       	ldd	r22, Y+1	; 0x01
    133e:	7a 81       	ldd	r23, Y+2	; 0x02
    1340:	c8 01       	movw	r24, r16
    1342:	28 dd       	rcall	.-1456   	; 0xd94 <rb32_get_nth>
    1344:	4b 01       	movw	r8, r22
    1346:	5c 01       	movw	r10, r24
    1348:	21 ea       	ldi	r18, 0xA1	; 161
    134a:	82 1a       	sub	r8, r18
    134c:	26 e8       	ldi	r18, 0x86	; 134
    134e:	92 0a       	sbc	r9, r18
    1350:	21 e0       	ldi	r18, 0x01	; 1
    1352:	a2 0a       	sbc	r10, r18
    1354:	b1 08       	sbc	r11, r1
    1356:	2f ed       	ldi	r18, 0xDF	; 223
    1358:	82 16       	cp	r8, r18
    135a:	2f e0       	ldi	r18, 0x0F	; 15
    135c:	92 06       	cpc	r9, r18
    135e:	27 e9       	ldi	r18, 0x97	; 151
    1360:	a2 06       	cpc	r10, r18
    1362:	b1 04       	cpc	r11, r1
    1364:	70 f4       	brcc	.+28     	; 0x1382 <data_check+0x7c>
    1366:	0e 94 76 12 	call	0x24ec	; 0x24ec <__floatsisf>
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 ea       	ldi	r20, 0xA0	; 160
    1370:	50 e4       	ldi	r21, 0x40	; 64
    1372:	e7 d7       	rcall	.+4046   	; 0x2342 <__divsf3>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	c7 01       	movw	r24, r14
    137a:	b6 01       	movw	r22, r12
    137c:	7a d7       	rcall	.+3828   	; 0x2272 <__addsf3>
    137e:	6b 01       	movw	r12, r22
    1380:	7c 01       	movw	r14, r24
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	9a 83       	std	Y+2, r25	; 0x02
    138c:	05 97       	sbiw	r24, 0x05	; 5
    138e:	b1 f6       	brne	.-84     	; 0x133c <data_check+0x36>
    1390:	19 82       	std	Y+1, r1	; 0x01
    1392:	1a 82       	std	Y+2, r1	; 0x02
    1394:	81 2c       	mov	r8, r1
    1396:	91 2c       	mov	r9, r1
    1398:	54 01       	movw	r10, r8
    139a:	69 81       	ldd	r22, Y+1	; 0x01
    139c:	7a 81       	ldd	r23, Y+2	; 0x02
    139e:	c8 01       	movw	r24, r16
    13a0:	f9 dc       	rcall	.-1550   	; 0xd94 <rb32_get_nth>
    13a2:	2b 01       	movw	r4, r22
    13a4:	3c 01       	movw	r6, r24
    13a6:	21 ea       	ldi	r18, 0xA1	; 161
    13a8:	42 1a       	sub	r4, r18
    13aa:	26 e8       	ldi	r18, 0x86	; 134
    13ac:	52 0a       	sbc	r5, r18
    13ae:	21 e0       	ldi	r18, 0x01	; 1
    13b0:	62 0a       	sbc	r6, r18
    13b2:	71 08       	sbc	r7, r1
    13b4:	2f ed       	ldi	r18, 0xDF	; 223
    13b6:	42 16       	cp	r4, r18
    13b8:	2f e0       	ldi	r18, 0x0F	; 15
    13ba:	52 06       	cpc	r5, r18
    13bc:	27 e9       	ldi	r18, 0x97	; 151
    13be:	62 06       	cpc	r6, r18
    13c0:	71 04       	cpc	r7, r1
    13c2:	80 f4       	brcc	.+32     	; 0x13e4 <data_check+0xde>
    13c4:	0e 94 76 12 	call	0x24ec	; 0x24ec <__floatsisf>
    13c8:	a7 01       	movw	r20, r14
    13ca:	96 01       	movw	r18, r12
    13cc:	51 d7       	rcall	.+3746   	; 0x2270 <__subsf3>
    13ce:	9b 01       	movw	r18, r22
    13d0:	ac 01       	movw	r20, r24
    13d2:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	c5 01       	movw	r24, r10
    13dc:	b4 01       	movw	r22, r8
    13de:	49 d7       	rcall	.+3730   	; 0x2272 <__addsf3>
    13e0:	4b 01       	movw	r8, r22
    13e2:	5c 01       	movw	r10, r24
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	05 97       	sbiw	r24, 0x05	; 5
    13f0:	a1 f6       	brne	.-88     	; 0x139a <data_check+0x94>
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5e e3       	ldi	r21, 0x3E	; 62
    13fa:	c5 01       	movw	r24, r10
    13fc:	b4 01       	movw	r22, r8
    13fe:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    1402:	69 83       	std	Y+1, r22	; 0x01
    1404:	7a 83       	std	Y+2, r23	; 0x02
    1406:	8b 83       	std	Y+3, r24	; 0x03
    1408:	9c 83       	std	Y+4, r25	; 0x04
    140a:	1d 82       	std	Y+5, r1	; 0x05
    140c:	1e 82       	std	Y+6, r1	; 0x06
    140e:	31 2c       	mov	r3, r1
    1410:	41 2c       	mov	r4, r1
    1412:	51 2c       	mov	r5, r1
    1414:	32 01       	movw	r6, r4
    1416:	6d 81       	ldd	r22, Y+5	; 0x05
    1418:	7e 81       	ldd	r23, Y+6	; 0x06
    141a:	c8 01       	movw	r24, r16
    141c:	bb dc       	rcall	.-1674   	; 0xd94 <rb32_get_nth>
    141e:	4b 01       	movw	r8, r22
    1420:	5c 01       	movw	r10, r24
    1422:	21 ea       	ldi	r18, 0xA1	; 161
    1424:	82 1a       	sub	r8, r18
    1426:	26 e8       	ldi	r18, 0x86	; 134
    1428:	92 0a       	sbc	r9, r18
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	a2 0a       	sbc	r10, r18
    142e:	b1 08       	sbc	r11, r1
    1430:	2f ed       	ldi	r18, 0xDF	; 223
    1432:	82 16       	cp	r8, r18
    1434:	2f e0       	ldi	r18, 0x0F	; 15
    1436:	92 06       	cpc	r9, r18
    1438:	27 e9       	ldi	r18, 0x97	; 151
    143a:	a2 06       	cpc	r10, r18
    143c:	b1 04       	cpc	r11, r1
    143e:	40 f5       	brcc	.+80     	; 0x1490 <data_check+0x18a>
    1440:	0e 94 76 12 	call	0x24ec	; 0x24ec <__floatsisf>
    1444:	4b 01       	movw	r8, r22
    1446:	5c 01       	movw	r10, r24
    1448:	a7 01       	movw	r20, r14
    144a:	96 01       	movw	r18, r12
    144c:	11 d7       	rcall	.+3618   	; 0x2270 <__subsf3>
    144e:	0e 94 43 12 	call	0x2486	; 0x2486 <__fixsfsi>
    1452:	9b 01       	movw	r18, r22
    1454:	77 23       	and	r23, r23
    1456:	24 f4       	brge	.+8      	; 0x1460 <data_check+0x15a>
    1458:	22 27       	eor	r18, r18
    145a:	33 27       	eor	r19, r19
    145c:	26 1b       	sub	r18, r22
    145e:	37 0b       	sbc	r19, r23
    1460:	b9 01       	movw	r22, r18
    1462:	33 0f       	add	r19, r19
    1464:	88 0b       	sbc	r24, r24
    1466:	99 0b       	sbc	r25, r25
    1468:	0e 94 76 12 	call	0x24ec	; 0x24ec <__floatsisf>
    146c:	9b 01       	movw	r18, r22
    146e:	ac 01       	movw	r20, r24
    1470:	69 81       	ldd	r22, Y+1	; 0x01
    1472:	7a 81       	ldd	r23, Y+2	; 0x02
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__gesf2>
    147c:	88 23       	and	r24, r24
    147e:	44 f0       	brlt	.+16     	; 0x1490 <data_check+0x18a>
    1480:	a5 01       	movw	r20, r10
    1482:	94 01       	movw	r18, r8
    1484:	c3 01       	movw	r24, r6
    1486:	b2 01       	movw	r22, r4
    1488:	f4 d6       	rcall	.+3560   	; 0x2272 <__addsf3>
    148a:	2b 01       	movw	r4, r22
    148c:	3c 01       	movw	r6, r24
    148e:	33 94       	inc	r3
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	9e 83       	std	Y+6, r25	; 0x06
    149a:	05 97       	sbiw	r24, 0x05	; 5
    149c:	09 f0       	breq	.+2      	; 0x14a0 <data_check+0x19a>
    149e:	bb cf       	rjmp	.-138    	; 0x1416 <data_check+0x110>
    14a0:	33 20       	and	r3, r3
    14a2:	61 f0       	breq	.+24     	; 0x14bc <data_check+0x1b6>
    14a4:	63 2d       	mov	r22, r3
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
    14b0:	9b 01       	movw	r18, r22
    14b2:	ac 01       	movw	r20, r24
    14b4:	c3 01       	movw	r24, r6
    14b6:	b2 01       	movw	r22, r4
    14b8:	44 d7       	rcall	.+3720   	; 0x2342 <__divsf3>
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <data_check+0x1be>
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	80 e8       	ldi	r24, 0x80	; 128
    14c2:	9f eb       	ldi	r25, 0xBF	; 191
    14c4:	26 96       	adiw	r28, 0x06	; 6
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	9f 90       	pop	r9
    14e0:	8f 90       	pop	r8
    14e2:	7f 90       	pop	r7
    14e4:	6f 90       	pop	r6
    14e6:	5f 90       	pop	r5
    14e8:	4f 90       	pop	r4
    14ea:	3f 90       	pop	r3
    14ec:	08 95       	ret

000014ee <data_collect>:
    14ee:	af 92       	push	r10
    14f0:	bf 92       	push	r11
    14f2:	cf 92       	push	r12
    14f4:	df 92       	push	r13
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	00 d0       	rcall	.+0      	; 0x1504 <data_collect+0x16>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <data_collect+0x18>
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	5c 01       	movw	r10, r24
    150c:	8b 01       	movw	r16, r22
    150e:	24 dd       	rcall	.-1464   	; 0xf58 <get_pressure>
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e2       	ldi	r20, 0x20	; 32
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    151c:	b4 d7       	rcall	.+3944   	; 0x2486 <__fixsfsi>
    151e:	69 83       	std	Y+1, r22	; 0x01
    1520:	7a 83       	std	Y+2, r23	; 0x02
    1522:	8b 83       	std	Y+3, r24	; 0x03
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	be 01       	movw	r22, r28
    152c:	6f 5f       	subi	r22, 0xFF	; 255
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	c8 01       	movw	r24, r16
    1532:	d5 db       	rcall	.-2134   	; 0xcde <rb32_write>
    1534:	c8 01       	movw	r24, r16
    1536:	e7 de       	rcall	.-562    	; 0x1306 <data_check>
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e2       	ldi	r20, 0x20	; 32
    153e:	51 e4       	ldi	r21, 0x41	; 65
    1540:	00 d7       	rcall	.+3584   	; 0x2342 <__divsf3>
    1542:	6b 01       	movw	r12, r22
    1544:	7c 01       	movw	r14, r24
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e8       	ldi	r20, 0x80	; 128
    154c:	5f eb       	ldi	r21, 0xBF	; 191
    154e:	f5 d6       	rcall	.+3562   	; 0x233a <__cmpsf2>
    1550:	88 23       	and	r24, r24
    1552:	79 f1       	breq	.+94     	; 0x15b2 <data_collect+0xc4>
    1554:	c0 92 e2 20 	sts	0x20E2, r12	; 0x8020e2 <press>
    1558:	d0 92 e3 20 	sts	0x20E3, r13	; 0x8020e3 <press+0x1>
    155c:	e0 92 e4 20 	sts	0x20E4, r14	; 0x8020e4 <press+0x2>
    1560:	f0 92 e5 20 	sts	0x20E5, r15	; 0x8020e5 <press+0x3>
    1564:	c7 01       	movw	r24, r14
    1566:	b6 01       	movw	r22, r12
    1568:	b3 dd       	rcall	.-1178   	; 0x10d0 <get_altitude>
    156a:	60 93 da 20 	sts	0x20DA, r22	; 0x8020da <alt>
    156e:	70 93 db 20 	sts	0x20DB, r23	; 0x8020db <alt+0x1>
    1572:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <alt+0x2>
    1576:	90 93 dd 20 	sts	0x20DD, r25	; 0x8020dd <alt+0x3>
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	48 ec       	ldi	r20, 0xC8	; 200
    1580:	52 e4       	ldi	r21, 0x42	; 66
    1582:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    1586:	7f d7       	rcall	.+3838   	; 0x2486 <__fixsfsi>
    1588:	6d 83       	std	Y+5, r22	; 0x05
    158a:	7e 83       	std	Y+6, r23	; 0x06
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	be 01       	movw	r22, r28
    1592:	6b 5f       	subi	r22, 0xFB	; 251
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	c5 01       	movw	r24, r10
    1598:	2c db       	rcall	.-2472   	; 0xbf2 <rb16_write>
    159a:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    159e:	c5 01       	movw	r24, r10
    15a0:	00 de       	rcall	.-1024   	; 0x11a2 <diff>
    15a2:	60 93 d2 20 	sts	0x20D2, r22	; 0x8020d2 <velocity>
    15a6:	70 93 d3 20 	sts	0x20D3, r23	; 0x8020d3 <velocity+0x1>
    15aa:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <velocity+0x2>
    15ae:	90 93 d5 20 	sts	0x20D5, r25	; 0x8020d5 <velocity+0x3>
    15b2:	83 e3       	ldi	r24, 0x33	; 51
    15b4:	93 e1       	ldi	r25, 0x13	; 19
    15b6:	a0 e9       	ldi	r26, 0x90	; 144
    15b8:	b3 e4       	ldi	r27, 0x43	; 67
    15ba:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <temp>
    15be:	90 93 df 20 	sts	0x20DF, r25	; 0x8020df <temp+0x1>
    15c2:	a0 93 e0 20 	sts	0x20E0, r26	; 0x8020e0 <temp+0x2>
    15c6:	b0 93 e1 20 	sts	0x20E1, r27	; 0x8020e1 <temp+0x3>
    15ca:	26 96       	adiw	r28, 0x06	; 6
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	df 90       	pop	r13
    15de:	cf 90       	pop	r12
    15e0:	bf 90       	pop	r11
    15e2:	af 90       	pop	r10
    15e4:	08 95       	ret

000015e6 <state_check>:
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	c0 90 d2 20 	lds	r12, 0x20D2	; 0x8020d2 <velocity>
    15f2:	d0 90 d3 20 	lds	r13, 0x20D3	; 0x8020d3 <velocity+0x1>
    15f6:	e0 90 d4 20 	lds	r14, 0x20D4	; 0x8020d4 <velocity+0x2>
    15fa:	f0 90 d5 20 	lds	r15, 0x20D5	; 0x8020d5 <velocity+0x3>
    15fe:	c7 01       	movw	r24, r14
    1600:	b6 01       	movw	r22, r12
    1602:	41 d7       	rcall	.+3714   	; 0x2486 <__fixsfsi>
    1604:	9b 01       	movw	r18, r22
    1606:	77 23       	and	r23, r23
    1608:	24 f4       	brge	.+8      	; 0x1612 <state_check+0x2c>
    160a:	22 27       	eor	r18, r18
    160c:	33 27       	eor	r19, r19
    160e:	26 1b       	sub	r18, r22
    1610:	37 0b       	sbc	r19, r23
    1612:	26 30       	cpi	r18, 0x06	; 6
    1614:	31 05       	cpc	r19, r1
    1616:	84 f0       	brlt	.+32     	; 0x1638 <state_check+0x52>
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	c7 01       	movw	r24, r14
    1620:	b6 01       	movw	r22, r12
    1622:	8b d6       	rcall	.+3350   	; 0x233a <__cmpsf2>
    1624:	88 23       	and	r24, r24
    1626:	24 f0       	brlt	.+8      	; 0x1630 <state_check+0x4a>
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    162e:	24 c0       	rjmp	.+72     	; 0x1678 <state_check+0x92>
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    1636:	20 c0       	rjmp	.+64     	; 0x1678 <state_check+0x92>
    1638:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <state>
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	48 e4       	ldi	r20, 0x48	; 72
    1642:	52 e4       	ldi	r21, 0x42	; 66
    1644:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <alt>
    1648:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <alt+0x1>
    164c:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <alt+0x2>
    1650:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <alt+0x3>
    1654:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__gesf2>
    1658:	18 16       	cp	r1, r24
    165a:	24 f0       	brlt	.+8      	; 0x1664 <state_check+0x7e>
    165c:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <reset_received>
    1660:	88 23       	and	r24, r24
    1662:	19 f0       	breq	.+6      	; 0x166a <state_check+0x84>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    166a:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <released>
    166e:	88 23       	and	r24, r24
    1670:	19 f0       	breq	.+6      	; 0x1678 <state_check+0x92>
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    1678:	ff 90       	pop	r15
    167a:	ef 90       	pop	r14
    167c:	df 90       	pop	r13
    167e:	cf 90       	pop	r12
    1680:	08 95       	ret

00001682 <servo_pid>:
    1682:	8f 92       	push	r8
    1684:	9f 92       	push	r9
    1686:	af 92       	push	r10
    1688:	bf 92       	push	r11
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	7c 01       	movw	r14, r24
    169c:	c0 e0       	ldi	r28, 0x00	; 0
    169e:	d0 e0       	ldi	r29, 0x00	; 0
    16a0:	00 e0       	ldi	r16, 0x00	; 0
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	be 01       	movw	r22, r28
    16a6:	c7 01       	movw	r24, r14
    16a8:	ed da       	rcall	.-2598   	; 0xc84 <rb16_get_nth>
    16aa:	08 0f       	add	r16, r24
    16ac:	19 1f       	adc	r17, r25
    16ae:	21 96       	adiw	r28, 0x01	; 1
    16b0:	ca 30       	cpi	r28, 0x0A	; 10
    16b2:	d1 05       	cpc	r29, r1
    16b4:	b9 f7       	brne	.-18     	; 0x16a4 <servo_pid+0x22>
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	c7 01       	movw	r24, r14
    16bc:	e3 da       	rcall	.-2618   	; 0xc84 <rb16_get_nth>
    16be:	ec 01       	movw	r28, r24
    16c0:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <rate>
    16c4:	c7 01       	movw	r24, r14
    16c6:	6d dd       	rcall	.-1318   	; 0x11a2 <diff>
    16c8:	6b 01       	movw	r12, r22
    16ca:	7c 01       	movw	r14, r24
    16cc:	be 01       	movw	r22, r28
    16ce:	dd 0f       	add	r29, r29
    16d0:	88 0b       	sbc	r24, r24
    16d2:	99 0b       	sbc	r25, r25
    16d4:	0b d7       	rcall	.+3606   	; 0x24ec <__floatsisf>
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	a9 01       	movw	r20, r18
    16dc:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	48 ec       	ldi	r20, 0xC8	; 200
    16e6:	52 e4       	ldi	r21, 0x42	; 66
    16e8:	2c d6       	rcall	.+3160   	; 0x2342 <__divsf3>
    16ea:	4b 01       	movw	r8, r22
    16ec:	5c 01       	movw	r10, r24
    16ee:	b8 01       	movw	r22, r16
    16f0:	11 0f       	add	r17, r17
    16f2:	88 0b       	sbc	r24, r24
    16f4:	99 0b       	sbc	r25, r25
    16f6:	fa d6       	rcall	.+3572   	; 0x24ec <__floatsisf>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	a9 01       	movw	r20, r18
    16fe:	f8 d7       	rcall	.+4080   	; 0x26f0 <__mulsf3>
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	48 ec       	ldi	r20, 0xC8	; 200
    1706:	52 e4       	ldi	r21, 0x42	; 66
    1708:	1c d6       	rcall	.+3128   	; 0x2342 <__divsf3>
    170a:	9b 01       	movw	r18, r22
    170c:	ac 01       	movw	r20, r24
    170e:	c5 01       	movw	r24, r10
    1710:	b4 01       	movw	r22, r8
    1712:	af d5       	rcall	.+2910   	; 0x2272 <__addsf3>
    1714:	4b 01       	movw	r8, r22
    1716:	5c 01       	movw	r10, r24
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	a9 01       	movw	r20, r18
    171e:	c7 01       	movw	r24, r14
    1720:	b6 01       	movw	r22, r12
    1722:	e6 d7       	rcall	.+4044   	; 0x26f0 <__mulsf3>
    1724:	9b 01       	movw	r18, r22
    1726:	ac 01       	movw	r20, r24
    1728:	c5 01       	movw	r24, r10
    172a:	b4 01       	movw	r22, r8
    172c:	a2 d5       	rcall	.+2884   	; 0x2272 <__addsf3>
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e8       	ldi	r19, 0x80	; 128
    1732:	4b eb       	ldi	r20, 0xBB	; 187
    1734:	54 e4       	ldi	r21, 0x44	; 68
    1736:	9d d5       	rcall	.+2874   	; 0x2272 <__addsf3>
    1738:	ab d6       	rcall	.+3414   	; 0x2490 <__fixunssfsi>
    173a:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <servo_pulse>
    173e:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <servo_pulse+0x1>
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	d0 d6       	rcall	.+3488   	; 0x24e8 <__floatunsisf>
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	4a e7       	ldi	r20, 0x7A	; 122
    174e:	54 e4       	ldi	r21, 0x44	; 68
    1750:	f8 d5       	rcall	.+3056   	; 0x2342 <__divsf3>
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4a ef       	ldi	r20, 0xFA	; 250
    1758:	53 e4       	ldi	r21, 0x43	; 67
    175a:	ca d7       	rcall	.+3988   	; 0x26f0 <__mulsf3>
    175c:	99 d6       	rcall	.+3378   	; 0x2490 <__fixunssfsi>
    175e:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1762:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	df 90       	pop	r13
    1774:	cf 90       	pop	r12
    1776:	bf 90       	pop	r11
    1778:	af 90       	pop	r10
    177a:	9f 90       	pop	r9
    177c:	8f 90       	pop	r8
    177e:	08 95       	ret

00001780 <clock_init>:
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	85 e0       	ldi	r24, 0x05	; 5
    1784:	71 db       	rcall	.-2334   	; 0xe68 <sysclk_enable_module>
    1786:	e0 e0       	ldi	r30, 0x00	; 0
    1788:	fa e0       	ldi	r31, 0x0A	; 10
    178a:	87 e0       	ldi	r24, 0x07	; 7
    178c:	80 83       	st	Z, r24
    178e:	81 e1       	ldi	r24, 0x11	; 17
    1790:	9a e7       	ldi	r25, 0x7A	; 122
    1792:	86 a3       	std	Z+38, r24	; 0x26
    1794:	97 a3       	std	Z+39, r25	; 0x27
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	86 83       	std	Z+6, r24	; 0x06
    179a:	08 95       	ret

0000179c <system_init>:
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	2e db       	rcall	.-2468   	; 0xdfe <sysclk_init>
    17a2:	6b ea       	ldi	r22, 0xAB	; 171
    17a4:	79 e2       	ldi	r23, 0x29	; 41
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	7a db       	rcall	.-2316   	; 0xea0 <__portable_avr_delay_cycles>
    17ac:	78 94       	sei
    17ae:	e0 e4       	ldi	r30, 0x40	; 64
    17b0:	f6 e0       	ldi	r31, 0x06	; 6
    17b2:	8c eb       	ldi	r24, 0xBC	; 188
    17b4:	80 83       	st	Z, r24
    17b6:	80 e1       	ldi	r24, 0x10	; 16
    17b8:	84 83       	std	Z+4, r24	; 0x04
    17ba:	87 e0       	ldi	r24, 0x07	; 7
    17bc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    17c0:	94 d9       	rcall	.-3288   	; 0xaea <data_terminal_init>
    17c2:	6b ea       	ldi	r22, 0xAB	; 171
    17c4:	70 eb       	ldi	r23, 0xB0	; 176
    17c6:	88 e2       	ldi	r24, 0x28	; 40
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	6a db       	rcall	.-2348   	; 0xea0 <__portable_avr_delay_cycles>
    17cc:	6b ea       	ldi	r22, 0xAB	; 171
    17ce:	79 e2       	ldi	r23, 0x29	; 41
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	65 db       	rcall	.-2358   	; 0xea0 <__portable_avr_delay_cycles>
    17d6:	60 d9       	rcall	.-3392   	; 0xa98 <spi_init>
    17d8:	6b ea       	ldi	r22, 0xAB	; 171
    17da:	79 e2       	ldi	r23, 0x29	; 41
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	5f db       	rcall	.-2370   	; 0xea0 <__portable_avr_delay_cycles>
    17e2:	69 db       	rcall	.-2350   	; 0xeb6 <pressure_init>
    17e4:	6b ea       	ldi	r22, 0xAB	; 171
    17e6:	79 e2       	ldi	r23, 0x29	; 41
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	59 db       	rcall	.-2382   	; 0xea0 <__portable_avr_delay_cycles>
    17ee:	ce d9       	rcall	.-3172   	; 0xb8c <XBEE_spi_init>
    17f0:	a9 db       	rcall	.-2222   	; 0xf44 <gps_init>
    17f2:	c6 df       	rcall	.-116    	; 0x1780 <clock_init>
    17f4:	9b d8       	rcall	.-3786   	; 0x92c <cam_init>
    17f6:	66 e5       	ldi	r22, 0x56	; 86
    17f8:	70 ed       	ldi	r23, 0xD0	; 208
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	50 db       	rcall	.-2400   	; 0xea0 <__portable_avr_delay_cycles>
    1800:	f2 de       	rcall	.-540    	; 0x15e6 <state_check>
    1802:	aa db       	rcall	.-2220   	; 0xf58 <get_pressure>
    1804:	60 93 2b 20 	sts	0x202B, r22	; 0x80202b <ground_p>
    1808:	70 93 2c 20 	sts	0x202C, r23	; 0x80202c <ground_p+0x1>
    180c:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p+0x2>
    1810:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x3>
    1814:	03 e3       	ldi	r16, 0x33	; 51
    1816:	13 e1       	ldi	r17, 0x13	; 19
    1818:	20 e9       	ldi	r18, 0x90	; 144
    181a:	33 e4       	ldi	r19, 0x43	; 67
    181c:	00 93 27 20 	sts	0x2027, r16	; 0x802027 <ground_t>
    1820:	10 93 28 20 	sts	0x2028, r17	; 0x802028 <ground_t+0x1>
    1824:	20 93 29 20 	sts	0x2029, r18	; 0x802029 <ground_t+0x2>
    1828:	30 93 2a 20 	sts	0x202A, r19	; 0x80202a <ground_t+0x3>
    182c:	51 dc       	rcall	.-1886   	; 0x10d0 <get_altitude>
    182e:	60 93 fb 20 	sts	0x20FB, r22	; 0x8020fb <ground_a>
    1832:	70 93 fc 20 	sts	0x20FC, r23	; 0x8020fc <ground_a+0x1>
    1836:	80 93 fd 20 	sts	0x20FD, r24	; 0x8020fd <ground_a+0x2>
    183a:	90 93 fe 20 	sts	0x20FE, r25	; 0x8020fe <ground_a+0x3>
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	08 95       	ret

00001844 <main>:
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	ce 56       	subi	r28, 0x6E	; 110
    184e:	d1 09       	sbc	r29, r1
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	a3 df       	rcall	.-186    	; 0x179c <system_init>
    1856:	66 e5       	ldi	r22, 0x56	; 86
    1858:	73 e2       	ldi	r23, 0x23	; 35
    185a:	88 e0       	ldi	r24, 0x08	; 8
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	20 db       	rcall	.-2496   	; 0xea0 <__portable_avr_delay_cycles>
    1860:	14 e1       	ldi	r17, 0x14	; 20
    1862:	be 01       	movw	r22, r28
    1864:	6f 5f       	subi	r22, 0xFF	; 255
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	fb 01       	movw	r30, r22
    186a:	81 2f       	mov	r24, r17
    186c:	11 92       	st	Z+, r1
    186e:	8a 95       	dec	r24
    1870:	e9 f7       	brne	.-6      	; 0x186c <main+0x28>
    1872:	4a e0       	ldi	r20, 0x0A	; 10
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	ce 01       	movw	r24, r28
    1878:	45 96       	adiw	r24, 0x15	; 21
    187a:	fa d9       	rcall	.-3084   	; 0xc70 <rb16_init>
    187c:	be 01       	movw	r22, r28
    187e:	63 5e       	subi	r22, 0xE3	; 227
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	88 e2       	ldi	r24, 0x28	; 40
    1884:	fb 01       	movw	r30, r22
    1886:	11 92       	st	Z+, r1
    1888:	8a 95       	dec	r24
    188a:	e9 f7       	brne	.-6      	; 0x1886 <main+0x42>
    188c:	4a e0       	ldi	r20, 0x0A	; 10
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	ce 01       	movw	r24, r28
    1892:	8b 5b       	subi	r24, 0xBB	; 187
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	74 da       	rcall	.-2840   	; 0xd80 <rb32_init>
    1898:	be 01       	movw	r22, r28
    189a:	63 5b       	subi	r22, 0xB3	; 179
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	fb 01       	movw	r30, r22
    18a0:	11 92       	st	Z+, r1
    18a2:	1a 95       	dec	r17
    18a4:	e9 f7       	brne	.-6      	; 0x18a0 <main+0x5c>
    18a6:	4a e0       	ldi	r20, 0x0A	; 10
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	ce 01       	movw	r24, r28
    18ac:	8f 59       	subi	r24, 0x9F	; 159
    18ae:	9f 4f       	sbci	r25, 0xFF	; 255
    18b0:	df d9       	rcall	.-3138   	; 0xc70 <rb16_init>
    18b2:	af 96       	adiw	r28, 0x2f	; 47
    18b4:	1f ae       	std	Y+63, r1	; 0x3f
    18b6:	af 97       	sbiw	r28, 0x2f	; 47
    18b8:	ae 96       	adiw	r28, 0x2e	; 46
    18ba:	1f ae       	std	Y+63, r1	; 0x3f
    18bc:	ae 97       	sbiw	r28, 0x2e	; 46
    18be:	0f 2e       	mov	r0, r31
    18c0:	fe e1       	ldi	r31, 0x1E	; 30
    18c2:	cf 2e       	mov	r12, r31
    18c4:	f1 e2       	ldi	r31, 0x21	; 33
    18c6:	df 2e       	mov	r13, r31
    18c8:	f0 2d       	mov	r31, r0
    18ca:	be 01       	movw	r22, r28
    18cc:	6b 5b       	subi	r22, 0xBB	; 187
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	ce 01       	movw	r24, r28
    18d2:	45 96       	adiw	r24, 0x15	; 21
    18d4:	0c de       	rcall	.-1000   	; 0x14ee <data_collect>
    18d6:	87 de       	rcall	.-754    	; 0x15e6 <state_check>
    18d8:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <state>
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	41 f0       	breq	.+16     	; 0x18f0 <main+0xac>
    18e0:	08 f4       	brcc	.+2      	; 0x18e4 <main+0xa0>
    18e2:	58 c0       	rjmp	.+176    	; 0x1994 <main+0x150>
    18e4:	82 30       	cpi	r24, 0x02	; 2
    18e6:	f9 f0       	breq	.+62     	; 0x1926 <main+0xe2>
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	09 f4       	brne	.+2      	; 0x18ee <main+0xaa>
    18ec:	47 c0       	rjmp	.+142    	; 0x197c <main+0x138>
    18ee:	50 c0       	rjmp	.+160    	; 0x1990 <main+0x14c>
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	46 e1       	ldi	r20, 0x16	; 22
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <alt>
    18fc:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <alt+0x1>
    1900:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <alt+0x2>
    1904:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <alt+0x3>
    1908:	ef d6       	rcall	.+3550   	; 0x26e8 <__gesf2>
    190a:	18 16       	cp	r1, r24
    190c:	0c f0       	brlt	.+2      	; 0x1910 <main+0xcc>
    190e:	42 c0       	rjmp	.+132    	; 0x1994 <main+0x150>
    1910:	ae 96       	adiw	r28, 0x2e	; 46
    1912:	ff ad       	ldd	r31, Y+63	; 0x3f
    1914:	ae 97       	sbiw	r28, 0x2e	; 46
    1916:	f1 11       	cpse	r31, r1
    1918:	3d c0       	rjmp	.+122    	; 0x1994 <main+0x150>
    191a:	0e d8       	rcall	.-4068   	; 0x938 <cam_switch>
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	ae 96       	adiw	r28, 0x2e	; 46
    1920:	8f af       	std	Y+63, r24	; 0x3f
    1922:	ae 97       	sbiw	r28, 0x2e	; 46
    1924:	37 c0       	rjmp	.+110    	; 0x1994 <main+0x150>
    1926:	ae 96       	adiw	r28, 0x2e	; 46
    1928:	9f ad       	ldd	r25, Y+63	; 0x3f
    192a:	ae 97       	sbiw	r28, 0x2e	; 46
    192c:	91 11       	cpse	r25, r1
    192e:	05 c0       	rjmp	.+10     	; 0x193a <main+0xf6>
    1930:	03 d8       	rcall	.-4090   	; 0x938 <cam_switch>
    1932:	e1 e0       	ldi	r30, 0x01	; 1
    1934:	ae 96       	adiw	r28, 0x2e	; 46
    1936:	ef af       	std	Y+63, r30	; 0x3f
    1938:	ae 97       	sbiw	r28, 0x2e	; 46
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	41 ee       	ldi	r20, 0xE1	; 225
    1940:	53 e4       	ldi	r21, 0x43	; 67
    1942:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <alt>
    1946:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <alt+0x1>
    194a:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <alt+0x2>
    194e:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <alt+0x3>
    1952:	8e d4       	rcall	.+2332   	; 0x2270 <__subsf3>
    1954:	98 d5       	rcall	.+2864   	; 0x2486 <__fixsfsi>
    1956:	67 5f       	subi	r22, 0xF7	; 247
    1958:	7f 4f       	sbci	r23, 0xFF	; 255
    195a:	63 31       	cpi	r22, 0x13	; 19
    195c:	71 05       	cpc	r23, r1
    195e:	28 f4       	brcc	.+10     	; 0x196a <main+0x126>
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <released>
    1966:	0e 94 95 04 	call	0x92a	; 0x92a <hall_sensor_init>
    196a:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <released>
    196e:	88 23       	and	r24, r24
    1970:	89 f0       	breq	.+34     	; 0x1994 <main+0x150>
    1972:	ce 01       	movw	r24, r28
    1974:	8f 59       	subi	r24, 0x9F	; 159
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	84 de       	rcall	.-760    	; 0x1682 <servo_pid>
    197a:	0c c0       	rjmp	.+24     	; 0x1994 <main+0x150>
    197c:	af 96       	adiw	r28, 0x2f	; 47
    197e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1980:	af 97       	sbiw	r28, 0x2f	; 47
    1982:	f1 11       	cpse	r31, r1
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <main+0x150>
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	af 96       	adiw	r28, 0x2f	; 47
    198a:	8f af       	std	Y+63, r24	; 0x3f
    198c:	af 97       	sbiw	r28, 0x2f	; 47
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <main+0x150>
    1990:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <state>
    1994:	e0 90 e6 20 	lds	r14, 0x20E6	; 0x8020e6 <packets>
    1998:	f0 90 e7 20 	lds	r15, 0x20E7	; 0x8020e7 <packets+0x1>
    199c:	9f ef       	ldi	r25, 0xFF	; 255
    199e:	e9 1a       	sub	r14, r25
    19a0:	f9 0a       	sbc	r15, r25
    19a2:	e0 92 e6 20 	sts	0x20E6, r14	; 0x8020e6 <packets>
    19a6:	f0 92 e7 20 	sts	0x20E7, r15	; 0x8020e7 <packets+0x1>
    19aa:	20 90 e8 20 	lds	r2, 0x20E8	; 0x8020e8 <timer>
    19ae:	30 90 e9 20 	lds	r3, 0x20E9	; 0x8020e9 <timer+0x1>
    19b2:	21 14       	cp	r2, r1
    19b4:	31 04       	cpc	r3, r1
    19b6:	41 f0       	breq	.+16     	; 0x19c8 <main+0x184>
    19b8:	c7 01       	movw	r24, r14
    19ba:	b1 01       	movw	r22, r2
    19bc:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodhi4>
    19c0:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <rate>
    19c4:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <rate+0x1>
    19c8:	60 91 c2 20 	lds	r22, 0x20C2	; 0x8020c2 <gps_alt>
    19cc:	70 91 c3 20 	lds	r23, 0x20C3	; 0x8020c3 <gps_alt+0x1>
    19d0:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <gps_alt+0x2>
    19d4:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <gps_alt+0x3>
    19d8:	56 d5       	rcall	.+2732   	; 0x2486 <__fixsfsi>
    19da:	16 2f       	mov	r17, r22
    19dc:	07 2f       	mov	r16, r23
    19de:	80 90 c6 20 	lds	r8, 0x20C6	; 0x8020c6 <gps_long>
    19e2:	90 90 c7 20 	lds	r9, 0x20C7	; 0x8020c7 <gps_long+0x1>
    19e6:	a0 90 c8 20 	lds	r10, 0x20C8	; 0x8020c8 <gps_long+0x2>
    19ea:	b0 90 c9 20 	lds	r11, 0x20C9	; 0x8020c9 <gps_long+0x3>
    19ee:	40 90 ca 20 	lds	r4, 0x20CA	; 0x8020ca <gps_lat>
    19f2:	50 90 cb 20 	lds	r5, 0x20CB	; 0x8020cb <gps_lat+0x1>
    19f6:	60 90 cc 20 	lds	r6, 0x20CC	; 0x8020cc <gps_lat+0x2>
    19fa:	70 90 cd 20 	lds	r7, 0x20CD	; 0x8020cd <gps_lat+0x3>
    19fe:	60 91 ce 20 	lds	r22, 0x20CE	; 0x8020ce <gps_t>
    1a02:	70 91 cf 20 	lds	r23, 0x20CF	; 0x8020cf <gps_t+0x1>
    1a06:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <gps_t+0x2>
    1a0a:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <gps_t+0x3>
    1a0e:	3b d5       	rcall	.+2678   	; 0x2486 <__fixsfsi>
    1a10:	ad 96       	adiw	r28, 0x2d	; 45
    1a12:	6c af       	std	Y+60, r22	; 0x3c
    1a14:	7d af       	std	Y+61, r23	; 0x3d
    1a16:	8e af       	std	Y+62, r24	; 0x3e
    1a18:	9f af       	std	Y+63, r25	; 0x3f
    1a1a:	ad 97       	sbiw	r28, 0x2d	; 45
    1a1c:	1f 92       	push	r1
    1a1e:	1f 92       	push	r1
    1a20:	60 91 b0 20 	lds	r22, 0x20B0	; 0x8020b0 <__data_end>
    1a24:	70 91 b1 20 	lds	r23, 0x20B1	; 0x8020b1 <__data_end+0x1>
    1a28:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end+0x2>
    1a2c:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <__data_end+0x3>
    1a30:	2a d5       	rcall	.+2644   	; 0x2486 <__fixsfsi>
    1a32:	7f 93       	push	r23
    1a34:	6f 93       	push	r22
    1a36:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <state>
    1a3a:	1f 92       	push	r1
    1a3c:	8f 93       	push	r24
    1a3e:	60 91 b4 20 	lds	r22, 0x20B4	; 0x8020b4 <rpm>
    1a42:	70 91 b5 20 	lds	r23, 0x20B5	; 0x8020b5 <rpm+0x1>
    1a46:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <rpm+0x2>
    1a4a:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <rpm+0x3>
    1a4e:	1b d5       	rcall	.+2614   	; 0x2486 <__fixsfsi>
    1a50:	7f 93       	push	r23
    1a52:	6f 93       	push	r22
    1a54:	60 91 b8 20 	lds	r22, 0x20B8	; 0x8020b8 <roll>
    1a58:	70 91 b9 20 	lds	r23, 0x20B9	; 0x8020b9 <roll+0x1>
    1a5c:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <roll+0x2>
    1a60:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <roll+0x3>
    1a64:	10 d5       	rcall	.+2592   	; 0x2486 <__fixsfsi>
    1a66:	7f 93       	push	r23
    1a68:	6f 93       	push	r22
    1a6a:	60 91 bc 20 	lds	r22, 0x20BC	; 0x8020bc <pitch>
    1a6e:	70 91 bd 20 	lds	r23, 0x20BD	; 0x8020bd <pitch+0x1>
    1a72:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <pitch+0x2>
    1a76:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <pitch+0x3>
    1a7a:	05 d5       	rcall	.+2570   	; 0x2486 <__fixsfsi>
    1a7c:	7f 93       	push	r23
    1a7e:	6f 93       	push	r22
    1a80:	80 91 c1 20 	lds	r24, 0x20C1	; 0x8020c1 <gps_sats+0x1>
    1a84:	8f 93       	push	r24
    1a86:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <gps_sats>
    1a8a:	8f 93       	push	r24
    1a8c:	81 2f       	mov	r24, r17
    1a8e:	90 2f       	mov	r25, r16
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	9c 01       	movw	r18, r24
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	22 0f       	add	r18, r18
    1a9c:	33 1f       	adc	r19, r19
    1a9e:	82 0f       	add	r24, r18
    1aa0:	93 1f       	adc	r25, r19
    1aa2:	6a e0       	ldi	r22, 0x0A	; 10
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodhi4>
    1aaa:	9f 93       	push	r25
    1aac:	8f 93       	push	r24
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	34 e2       	ldi	r19, 0x24	; 36
    1ab6:	44 e7       	ldi	r20, 0x74	; 116
    1ab8:	59 e4       	ldi	r21, 0x49	; 73
    1aba:	c5 01       	movw	r24, r10
    1abc:	b4 01       	movw	r22, r8
    1abe:	18 d6       	rcall	.+3120   	; 0x26f0 <__mulsf3>
    1ac0:	e2 d4       	rcall	.+2500   	; 0x2486 <__fixsfsi>
    1ac2:	20 e4       	ldi	r18, 0x40	; 64
    1ac4:	32 e4       	ldi	r19, 0x42	; 66
    1ac6:	4f e0       	ldi	r20, 0x0F	; 15
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__divmodsi4>
    1ace:	9b 01       	movw	r18, r22
    1ad0:	77 23       	and	r23, r23
    1ad2:	24 f4       	brge	.+8      	; 0x1adc <main+0x298>
    1ad4:	22 27       	eor	r18, r18
    1ad6:	33 27       	eor	r19, r19
    1ad8:	26 1b       	sub	r18, r22
    1ada:	37 0b       	sbc	r19, r23
    1adc:	c9 01       	movw	r24, r18
    1ade:	33 0f       	add	r19, r19
    1ae0:	aa 0b       	sbc	r26, r26
    1ae2:	bb 0b       	sbc	r27, r27
    1ae4:	bf 93       	push	r27
    1ae6:	af 93       	push	r26
    1ae8:	9f 93       	push	r25
    1aea:	8f 93       	push	r24
    1aec:	c5 01       	movw	r24, r10
    1aee:	b4 01       	movw	r22, r8
    1af0:	ca d4       	rcall	.+2452   	; 0x2486 <__fixsfsi>
    1af2:	7f 93       	push	r23
    1af4:	6f 93       	push	r22
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	34 e2       	ldi	r19, 0x24	; 36
    1afa:	44 e7       	ldi	r20, 0x74	; 116
    1afc:	59 e4       	ldi	r21, 0x49	; 73
    1afe:	c3 01       	movw	r24, r6
    1b00:	b2 01       	movw	r22, r4
    1b02:	f6 d5       	rcall	.+3052   	; 0x26f0 <__mulsf3>
    1b04:	c0 d4       	rcall	.+2432   	; 0x2486 <__fixsfsi>
    1b06:	20 e4       	ldi	r18, 0x40	; 64
    1b08:	32 e4       	ldi	r19, 0x42	; 66
    1b0a:	4f e0       	ldi	r20, 0x0F	; 15
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__divmodsi4>
    1b12:	9f 93       	push	r25
    1b14:	8f 93       	push	r24
    1b16:	7f 93       	push	r23
    1b18:	6f 93       	push	r22
    1b1a:	c3 01       	movw	r24, r6
    1b1c:	b2 01       	movw	r22, r4
    1b1e:	b3 d4       	rcall	.+2406   	; 0x2486 <__fixsfsi>
    1b20:	7f 93       	push	r23
    1b22:	6f 93       	push	r22
    1b24:	ad 96       	adiw	r28, 0x2d	; 45
    1b26:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b28:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b2e:	ad 97       	sbiw	r28, 0x2d	; 45
    1b30:	24 e6       	ldi	r18, 0x64	; 100
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	fb d7       	rcall	.+4086   	; 0x2b30 <__divmodsi4>
    1b3a:	7f 93       	push	r23
    1b3c:	6f 93       	push	r22
    1b3e:	ad 96       	adiw	r28, 0x2d	; 45
    1b40:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b42:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b44:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b46:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b48:	ad 97       	sbiw	r28, 0x2d	; 45
    1b4a:	20 e1       	ldi	r18, 0x10	; 16
    1b4c:	37 e2       	ldi	r19, 0x27	; 39
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	ee d7       	rcall	.+4060   	; 0x2b30 <__divmodsi4>
    1b54:	12 2f       	mov	r17, r18
    1b56:	03 2f       	mov	r16, r19
    1b58:	24 e6       	ldi	r18, 0x64	; 100
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	e7 d7       	rcall	.+4046   	; 0x2b30 <__divmodsi4>
    1b62:	3f 93       	push	r19
    1b64:	2f 93       	push	r18
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	60 91 d6 20 	lds	r22, 0x20D6	; 0x8020d6 <volt>
    1b6e:	70 91 d7 20 	lds	r23, 0x20D7	; 0x8020d7 <volt+0x1>
    1b72:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <volt+0x2>
    1b76:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <volt+0x3>
    1b7a:	85 d4       	rcall	.+2314   	; 0x2486 <__fixsfsi>
    1b7c:	7f 93       	push	r23
    1b7e:	6f 93       	push	r22
    1b80:	23 e3       	ldi	r18, 0x33	; 51
    1b82:	33 e9       	ldi	r19, 0x93	; 147
    1b84:	48 e8       	ldi	r20, 0x88	; 136
    1b86:	53 e4       	ldi	r21, 0x43	; 67
    1b88:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <temp>
    1b8c:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <temp+0x1>
    1b90:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <temp+0x2>
    1b94:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <temp+0x3>
    1b98:	6b d3       	rcall	.+1750   	; 0x2270 <__subsf3>
    1b9a:	75 d4       	rcall	.+2282   	; 0x2486 <__fixsfsi>
    1b9c:	7f 93       	push	r23
    1b9e:	6f 93       	push	r22
    1ba0:	60 91 e2 20 	lds	r22, 0x20E2	; 0x8020e2 <press>
    1ba4:	70 91 e3 20 	lds	r23, 0x20E3	; 0x8020e3 <press+0x1>
    1ba8:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <press+0x2>
    1bac:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <press+0x3>
    1bb0:	6a d4       	rcall	.+2260   	; 0x2486 <__fixsfsi>
    1bb2:	9f 93       	push	r25
    1bb4:	8f 93       	push	r24
    1bb6:	7f 93       	push	r23
    1bb8:	6f 93       	push	r22
    1bba:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <alt>
    1bbe:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <alt+0x1>
    1bc2:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <alt+0x2>
    1bc6:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <alt+0x3>
    1bca:	5d d4       	rcall	.+2234   	; 0x2486 <__fixsfsi>
    1bcc:	7f 93       	push	r23
    1bce:	6f 93       	push	r22
    1bd0:	ff 92       	push	r15
    1bd2:	ef 92       	push	r14
    1bd4:	3f 92       	push	r3
    1bd6:	2f 92       	push	r2
    1bd8:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <format+0x1>
    1bdc:	8f 93       	push	r24
    1bde:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <format>
    1be2:	8f 93       	push	r24
    1be4:	df 92       	push	r13
    1be6:	cf 92       	push	r12
    1be8:	0e 94 48 16 	call	0x2c90	; 0x2c90 <sprintf>
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	df 92       	push	r13
    1bf2:	cf 92       	push	r12
    1bf4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <printf>
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	66 ce       	rjmp	.-820    	; 0x18ca <main+0x86>

00001bfe <__vector_47>:
			//printf("PACKET\n");
			break;
	}
}

ISR(TCE0_OVF_vect){
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	08 b6       	in	r0, 0x38	; 56
    1c0a:	0f 92       	push	r0
    1c0c:	18 be       	out	0x38, r1	; 56
    1c0e:	09 b6       	in	r0, 0x39	; 57
    1c10:	0f 92       	push	r0
    1c12:	19 be       	out	0x39, r1	; 57
    1c14:	0b b6       	in	r0, 0x3b	; 59
    1c16:	0f 92       	push	r0
    1c18:	1b be       	out	0x3b, r1	; 59
    1c1a:	2f 93       	push	r18
    1c1c:	3f 93       	push	r19
    1c1e:	4f 93       	push	r20
    1c20:	5f 93       	push	r21
    1c22:	6f 93       	push	r22
    1c24:	7f 93       	push	r23
    1c26:	8f 93       	push	r24
    1c28:	9f 93       	push	r25
    1c2a:	af 93       	push	r26
    1c2c:	bf 93       	push	r27
    1c2e:	ef 93       	push	r30
    1c30:	ff 93       	push	r31
	timer++;
    1c32:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <timer>
    1c36:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <timer+0x1>
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <timer>
    1c40:	90 93 e9 20 	sts	0x20E9, r25	; 0x8020e9 <timer+0x1>
	//printf(str);
	XBEE_spi_write(str);
    1c44:	8e e1       	ldi	r24, 0x1E	; 30
    1c46:	91 e2       	ldi	r25, 0x21	; 33
    1c48:	0e 94 d6 05 	call	0xbac	; 0xbac <XBEE_spi_write>
}
    1c4c:	ff 91       	pop	r31
    1c4e:	ef 91       	pop	r30
    1c50:	bf 91       	pop	r27
    1c52:	af 91       	pop	r26
    1c54:	9f 91       	pop	r25
    1c56:	8f 91       	pop	r24
    1c58:	7f 91       	pop	r23
    1c5a:	6f 91       	pop	r22
    1c5c:	5f 91       	pop	r21
    1c5e:	4f 91       	pop	r20
    1c60:	3f 91       	pop	r19
    1c62:	2f 91       	pop	r18
    1c64:	0f 90       	pop	r0
    1c66:	0b be       	out	0x3b, r0	; 59
    1c68:	0f 90       	pop	r0
    1c6a:	09 be       	out	0x39, r0	; 57
    1c6c:	0f 90       	pop	r0
    1c6e:	08 be       	out	0x38, r0	; 56
    1c70:	0f 90       	pop	r0
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	0f 90       	pop	r0
    1c76:	1f 90       	pop	r1
    1c78:	18 95       	reti

00001c7a <__vector_91>:
	xbee_command(c);
}
*/

// GPS recording
ISR(USARTD1_RXC_vect){
    1c7a:	1f 92       	push	r1
    1c7c:	0f 92       	push	r0
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	0f 92       	push	r0
    1c82:	11 24       	eor	r1, r1
    1c84:	08 b6       	in	r0, 0x38	; 56
    1c86:	0f 92       	push	r0
    1c88:	18 be       	out	0x38, r1	; 56
    1c8a:	09 b6       	in	r0, 0x39	; 57
    1c8c:	0f 92       	push	r0
    1c8e:	19 be       	out	0x39, r1	; 57
    1c90:	0a b6       	in	r0, 0x3a	; 58
    1c92:	0f 92       	push	r0
    1c94:	1a be       	out	0x3a, r1	; 58
    1c96:	0b b6       	in	r0, 0x3b	; 59
    1c98:	0f 92       	push	r0
    1c9a:	1b be       	out	0x3b, r1	; 59
    1c9c:	8f 92       	push	r8
    1c9e:	9f 92       	push	r9
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	1f 93       	push	r17
    1cae:	2f 93       	push	r18
    1cb0:	3f 93       	push	r19
    1cb2:	4f 93       	push	r20
    1cb4:	5f 93       	push	r21
    1cb6:	6f 93       	push	r22
    1cb8:	7f 93       	push	r23
    1cba:	8f 93       	push	r24
    1cbc:	9f 93       	push	r25
    1cbe:	af 93       	push	r26
    1cc0:	bf 93       	push	r27
    1cc2:	ef 93       	push	r30
    1cc4:	ff 93       	push	r31
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <__vector_91+0x52>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <__vector_91+0x54>
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    1cd2:	80 eb       	ldi	r24, 0xB0	; 176
    1cd4:	99 e0       	ldi	r25, 0x09	; 9
    1cd6:	0e 94 93 02 	call	0x526	; 0x526 <usart_getchar>
    1cda:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    1cdc:	84 32       	cpi	r24, 0x24	; 36
    1cde:	49 f4       	brne	.+18     	; 0x1cf2 <__vector_91+0x78>
		writing = 1;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <writing>
		pos = 0;
		word_pos = 0;
    1ce6:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <word_pos>
		commas = 0;
    1cea:	10 92 eb 20 	sts	0x20EB, r1	; 0x8020eb <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	68 c2       	rjmp	.+1232   	; 0x21c2 <__vector_91+0x548>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    1cf2:	8a 32       	cpi	r24, 0x2A	; 42
    1cf4:	29 f4       	brne	.+10     	; 0x1d00 <__vector_91+0x86>
		commas = 0;
    1cf6:	10 92 eb 20 	sts	0x20EB, r1	; 0x8020eb <commas>
		writing = 0;
    1cfa:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <writing>
    1cfe:	91 c2       	rjmp	.+1314   	; 0x2222 <__vector_91+0x5a8>
	}
	else if(c == (uint8_t) ','){
    1d00:	8c 32       	cpi	r24, 0x2C	; 44
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <__vector_91+0x8c>
    1d04:	49 c2       	rjmp	.+1170   	; 0x2198 <__vector_91+0x51e>
		gps[0] = 32;
    1d06:	ea e0       	ldi	r30, 0x0A	; 10
    1d08:	f1 e2       	ldi	r31, 0x21	; 33
    1d0a:	80 e2       	ldi	r24, 0x20	; 32
    1d0c:	80 83       	st	Z, r24
		if(gps[1] == 32){
    1d0e:	81 81       	ldd	r24, Z+1	; 0x01
    1d10:	80 32       	cpi	r24, 0x20	; 32
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <__vector_91+0x9c>
    1d14:	6d c2       	rjmp	.+1242   	; 0x21f0 <__vector_91+0x576>
			gps[0] = '0';
    1d16:	80 e3       	ldi	r24, 0x30	; 48
    1d18:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <gps>
    1d1c:	69 c2       	rjmp	.+1234   	; 0x21f0 <__vector_91+0x576>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d1e:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <gps>
    1d22:	8e 32       	cpi	r24, 0x2E	; 46
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <__vector_91+0xae>
    1d26:	9e c1       	rjmp	.+828    	; 0x2064 <__vector_91+0x3ea>
    1d28:	a4 c1       	rjmp	.+840    	; 0x2072 <__vector_91+0x3f8>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d2a:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <gps>
    1d2e:	8e 32       	cpi	r24, 0x2E	; 46
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <__vector_91+0xba>
    1d32:	ec c0       	rjmp	.+472    	; 0x1f0c <__vector_91+0x292>
    1d34:	f2 c0       	rjmp	.+484    	; 0x1f1a <__vector_91+0x2a0>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d36:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <gps>
    1d3a:	8e 32       	cpi	r24, 0x2E	; 46
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <__vector_91+0xc6>
    1d3e:	51 c0       	rjmp	.+162    	; 0x1de2 <__vector_91+0x168>
    1d40:	57 c0       	rjmp	.+174    	; 0x1df0 <__vector_91+0x176>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1d42:	91 91       	ld	r25, Z+
    1d44:	9e 32       	cpi	r25, 0x2E	; 46
    1d46:	29 f4       	brne	.+10     	; 0x1d52 <__vector_91+0xd8>
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <__vector_91+0xd2>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1d4c:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						break;
    1d50:	03 c0       	rjmp	.+6      	; 0x1d58 <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    1d52:	8f 5f       	subi	r24, 0xFF	; 255
    1d54:	8f 30       	cpi	r24, 0x0F	; 15
    1d56:	a9 f7       	brne	.-22     	; 0x1d42 <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1d58:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
    1d5c:	e2 2f       	mov	r30, r18
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	e6 5f       	subi	r30, 0xF6	; 246
    1d62:	fe 4d       	sbci	r31, 0xDE	; 222
    1d64:	80 e2       	ldi	r24, 0x20	; 32
    1d66:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1d68:	2f 5f       	subi	r18, 0xFF	; 255
    1d6a:	2f 30       	cpi	r18, 0x0F	; 15
    1d6c:	c8 f4       	brcc	.+50     	; 0x1da0 <__vector_91+0x126>
					if(gps[i] == 32){
    1d6e:	82 2f       	mov	r24, r18
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	fc 01       	movw	r30, r24
    1d74:	e6 5f       	subi	r30, 0xF6	; 246
    1d76:	fe 4d       	sbci	r31, 0xDE	; 222
    1d78:	30 81       	ld	r19, Z
    1d7a:	30 32       	cpi	r19, 0x20	; 32
    1d7c:	89 f0       	breq	.+34     	; 0x1da0 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    1d7e:	40 e2       	ldi	r20, 0x20	; 32
    1d80:	08 c0       	rjmp	.+16     	; 0x1d92 <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    1d82:	82 2f       	mov	r24, r18
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	fc 01       	movw	r30, r24
    1d88:	e6 5f       	subi	r30, 0xF6	; 246
    1d8a:	fe 4d       	sbci	r31, 0xDE	; 222
    1d8c:	30 81       	ld	r19, Z
    1d8e:	30 32       	cpi	r19, 0x20	; 32
    1d90:	39 f0       	breq	.+14     	; 0x1da0 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    1d92:	fc 01       	movw	r30, r24
    1d94:	e6 5f       	subi	r30, 0xF6	; 246
    1d96:	fe 4d       	sbci	r31, 0xDE	; 222
    1d98:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    1d9a:	2f 5f       	subi	r18, 0xFF	; 255
    1d9c:	2f 30       	cpi	r18, 0x0F	; 15
    1d9e:	89 f7       	brne	.-30     	; 0x1d82 <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    1da0:	ce 01       	movw	r24, r28
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	9f 93       	push	r25
    1da6:	8f 93       	push	r24
    1da8:	89 ea       	ldi	r24, 0xA9	; 169
    1daa:	90 e2       	ldi	r25, 0x20	; 32
    1dac:	9f 93       	push	r25
    1dae:	8f 93       	push	r24
    1db0:	8a e0       	ldi	r24, 0x0A	; 10
    1db2:	91 e2       	ldi	r25, 0x21	; 33
    1db4:	9f 93       	push	r25
    1db6:	8f 93       	push	r24
    1db8:	93 d7       	rcall	.+3878   	; 0x2ce0 <sscanf>
				gps_t = (double) val;
    1dba:	69 81       	ldd	r22, Y+1	; 0x01
    1dbc:	7a 81       	ldd	r23, Y+2	; 0x02
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	94 d3       	rcall	.+1832   	; 0x24ec <__floatsisf>
    1dc4:	60 93 ce 20 	sts	0x20CE, r22	; 0x8020ce <gps_t>
    1dc8:	70 93 cf 20 	sts	0x20CF, r23	; 0x8020cf <gps_t+0x1>
    1dcc:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <gps_t+0x2>
    1dd0:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <gps_t+0x3>
				break;
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	bd c1       	rjmp	.+890    	; 0x215c <__vector_91+0x4e2>
    1de2:	eb e0       	ldi	r30, 0x0B	; 11
    1de4:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    1de6:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    1de8:	91 91       	ld	r25, Z+
    1dea:	9e 32       	cpi	r25, 0x2E	; 46
    1dec:	29 f4       	brne	.+10     	; 0x1df8 <__vector_91+0x17e>
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <__vector_91+0x178>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1df2:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						break;
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <__vector_91+0x184>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	8f 30       	cpi	r24, 0x0F	; 15
    1dfc:	a9 f7       	brne	.-22     	; 0x1de8 <__vector_91+0x16e>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1dfe:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
    1e02:	42 2f       	mov	r20, r18
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	fa 01       	movw	r30, r20
    1e08:	e6 5f       	subi	r30, 0xF6	; 246
    1e0a:	fe 4d       	sbci	r31, 0xDE	; 222
    1e0c:	80 e2       	ldi	r24, 0x20	; 32
    1e0e:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1e10:	2f 5f       	subi	r18, 0xFF	; 255
    1e12:	2f 30       	cpi	r18, 0x0F	; 15
    1e14:	f8 f4       	brcc	.+62     	; 0x1e54 <__vector_91+0x1da>
					if(gps[i] == 32){
    1e16:	82 2f       	mov	r24, r18
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	e6 5f       	subi	r30, 0xF6	; 246
    1e1e:	fe 4d       	sbci	r31, 0xDE	; 222
    1e20:	30 81       	ld	r19, Z
    1e22:	30 32       	cpi	r19, 0x20	; 32
    1e24:	b9 f0       	breq	.+46     	; 0x1e54 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    1e26:	60 e2       	ldi	r22, 0x20	; 32
    1e28:	08 c0       	rjmp	.+16     	; 0x1e3a <__vector_91+0x1c0>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    1e2a:	82 2f       	mov	r24, r18
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e6 5f       	subi	r30, 0xF6	; 246
    1e32:	fe 4d       	sbci	r31, 0xDE	; 222
    1e34:	30 81       	ld	r19, Z
    1e36:	30 32       	cpi	r19, 0x20	; 32
    1e38:	69 f0       	breq	.+26     	; 0x1e54 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	e4 1b       	sub	r30, r20
    1e3e:	f5 0b       	sbc	r31, r21
    1e40:	e8 5e       	subi	r30, 0xE8	; 232
    1e42:	fe 4d       	sbci	r31, 0xDE	; 222
    1e44:	30 83       	st	Z, r19
					gps[i] = 32;
    1e46:	fc 01       	movw	r30, r24
    1e48:	e6 5f       	subi	r30, 0xF6	; 246
    1e4a:	fe 4d       	sbci	r31, 0xDE	; 222
    1e4c:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    1e4e:	2f 5f       	subi	r18, 0xFF	; 255
    1e50:	2f 30       	cpi	r18, 0x0F	; 15
    1e52:	59 f7       	brne	.-42     	; 0x1e2a <__vector_91+0x1b0>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    1e54:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <dec>
    1e58:	80 32       	cpi	r24, 0x20	; 32
    1e5a:	19 f4       	brne	.+6      	; 0x1e62 <__vector_91+0x1e8>
					dec[0] = '0';
    1e5c:	80 e3       	ldi	r24, 0x30	; 48
    1e5e:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <dec>
				}
				sscanf(gps,"%ld",&val);
    1e62:	ce 01       	movw	r24, r28
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	9f 93       	push	r25
    1e68:	8f 93       	push	r24
    1e6a:	89 ea       	ldi	r24, 0xA9	; 169
    1e6c:	90 e2       	ldi	r25, 0x20	; 32
    1e6e:	9f 93       	push	r25
    1e70:	8f 93       	push	r24
    1e72:	8a e0       	ldi	r24, 0x0A	; 10
    1e74:	91 e2       	ldi	r25, 0x21	; 33
    1e76:	9f 93       	push	r25
    1e78:	8f 93       	push	r24
    1e7a:	32 d7       	rcall	.+3684   	; 0x2ce0 <sscanf>
				sscanf(dec,"%d",&val2);
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	05 96       	adiw	r24, 0x05	; 5
    1e80:	9f 93       	push	r25
    1e82:	8f 93       	push	r24
    1e84:	8d ea       	ldi	r24, 0xAD	; 173
    1e86:	90 e2       	ldi	r25, 0x20	; 32
    1e88:	9f 93       	push	r25
    1e8a:	8f 93       	push	r24
    1e8c:	89 e1       	ldi	r24, 0x19	; 25
    1e8e:	91 e2       	ldi	r25, 0x21	; 33
    1e90:	9f 93       	push	r25
    1e92:	8f 93       	push	r24
    1e94:	25 d7       	rcall	.+3658   	; 0x2ce0 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    1e96:	89 80       	ldd	r8, Y+1	; 0x01
    1e98:	9a 80       	ldd	r9, Y+2	; 0x02
    1e9a:	ab 80       	ldd	r10, Y+3	; 0x03
    1e9c:	bc 80       	ldd	r11, Y+4	; 0x04
    1e9e:	6d 81       	ldd	r22, Y+5	; 0x05
    1ea0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ea2:	07 2e       	mov	r0, r23
    1ea4:	00 0c       	add	r0, r0
    1ea6:	88 0b       	sbc	r24, r24
    1ea8:	99 0b       	sbc	r25, r25
    1eaa:	20 d3       	rcall	.+1600   	; 0x24ec <__floatsisf>
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e4       	ldi	r19, 0x40	; 64
    1eb0:	4c e1       	ldi	r20, 0x1C	; 28
    1eb2:	56 e4       	ldi	r21, 0x46	; 70
    1eb4:	46 d2       	rcall	.+1164   	; 0x2342 <__divsf3>
    1eb6:	6b 01       	movw	r12, r22
    1eb8:	7c 01       	movw	r14, r24
    1eba:	c5 01       	movw	r24, r10
    1ebc:	b4 01       	movw	r22, r8
    1ebe:	24 e6       	ldi	r18, 0x64	; 100
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	34 d6       	rcall	.+3176   	; 0x2b30 <__divmodsi4>
    1ec8:	49 01       	movw	r8, r18
    1eca:	5a 01       	movw	r10, r20
    1ecc:	0f d3       	rcall	.+1566   	; 0x24ec <__floatsisf>
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	c7 01       	movw	r24, r14
    1ed4:	b6 01       	movw	r22, r12
    1ed6:	cd d1       	rcall	.+922    	; 0x2272 <__addsf3>
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e7       	ldi	r20, 0x70	; 112
    1ede:	52 e4       	ldi	r21, 0x42	; 66
    1ee0:	30 d2       	rcall	.+1120   	; 0x2342 <__divsf3>
    1ee2:	6b 01       	movw	r12, r22
    1ee4:	7c 01       	movw	r14, r24
    1ee6:	c5 01       	movw	r24, r10
    1ee8:	b4 01       	movw	r22, r8
    1eea:	00 d3       	rcall	.+1536   	; 0x24ec <__floatsisf>
    1eec:	9b 01       	movw	r18, r22
    1eee:	ac 01       	movw	r20, r24
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	b6 01       	movw	r22, r12
    1ef4:	be d1       	rcall	.+892    	; 0x2272 <__addsf3>
    1ef6:	60 93 ca 20 	sts	0x20CA, r22	; 0x8020ca <gps_lat>
    1efa:	70 93 cb 20 	sts	0x20CB, r23	; 0x8020cb <gps_lat+0x1>
    1efe:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <gps_lat+0x2>
    1f02:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <gps_lat+0x3>
				break;
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	28 c1       	rjmp	.+592    	; 0x215c <__vector_91+0x4e2>
    1f0c:	eb e0       	ldi	r30, 0x0B	; 11
    1f0e:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    1f10:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    1f12:	91 91       	ld	r25, Z+
    1f14:	9e 32       	cpi	r25, 0x2E	; 46
    1f16:	29 f4       	brne	.+10     	; 0x1f22 <__vector_91+0x2a8>
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <__vector_91+0x2a2>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1f1c:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						break;
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <__vector_91+0x2ae>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    1f22:	8f 5f       	subi	r24, 0xFF	; 255
    1f24:	8f 30       	cpi	r24, 0x0F	; 15
    1f26:	a9 f7       	brne	.-22     	; 0x1f12 <__vector_91+0x298>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1f28:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
    1f2c:	42 2f       	mov	r20, r18
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	fa 01       	movw	r30, r20
    1f32:	e6 5f       	subi	r30, 0xF6	; 246
    1f34:	fe 4d       	sbci	r31, 0xDE	; 222
    1f36:	80 e2       	ldi	r24, 0x20	; 32
    1f38:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1f3a:	2f 5f       	subi	r18, 0xFF	; 255
    1f3c:	2f 30       	cpi	r18, 0x0F	; 15
    1f3e:	f8 f4       	brcc	.+62     	; 0x1f7e <__vector_91+0x304>
					if(gps[i] == 32){
    1f40:	82 2f       	mov	r24, r18
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	fc 01       	movw	r30, r24
    1f46:	e6 5f       	subi	r30, 0xF6	; 246
    1f48:	fe 4d       	sbci	r31, 0xDE	; 222
    1f4a:	30 81       	ld	r19, Z
    1f4c:	30 32       	cpi	r19, 0x20	; 32
    1f4e:	b9 f0       	breq	.+46     	; 0x1f7e <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    1f50:	60 e2       	ldi	r22, 0x20	; 32
    1f52:	08 c0       	rjmp	.+16     	; 0x1f64 <__vector_91+0x2ea>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    1f54:	82 2f       	mov	r24, r18
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	fc 01       	movw	r30, r24
    1f5a:	e6 5f       	subi	r30, 0xF6	; 246
    1f5c:	fe 4d       	sbci	r31, 0xDE	; 222
    1f5e:	30 81       	ld	r19, Z
    1f60:	30 32       	cpi	r19, 0x20	; 32
    1f62:	69 f0       	breq	.+26     	; 0x1f7e <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
    1f64:	fc 01       	movw	r30, r24
    1f66:	e4 1b       	sub	r30, r20
    1f68:	f5 0b       	sbc	r31, r21
    1f6a:	e8 5e       	subi	r30, 0xE8	; 232
    1f6c:	fe 4d       	sbci	r31, 0xDE	; 222
    1f6e:	30 83       	st	Z, r19
					gps[i] = 32;
    1f70:	fc 01       	movw	r30, r24
    1f72:	e6 5f       	subi	r30, 0xF6	; 246
    1f74:	fe 4d       	sbci	r31, 0xDE	; 222
    1f76:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    1f78:	2f 5f       	subi	r18, 0xFF	; 255
    1f7a:	2f 30       	cpi	r18, 0x0F	; 15
    1f7c:	59 f7       	brne	.-42     	; 0x1f54 <__vector_91+0x2da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    1f7e:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <dec>
    1f82:	80 32       	cpi	r24, 0x20	; 32
    1f84:	19 f4       	brne	.+6      	; 0x1f8c <__vector_91+0x312>
					dec[0] = '0';
    1f86:	80 e3       	ldi	r24, 0x30	; 48
    1f88:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <dec>
				}
				sscanf(gps,"%ld",&val);
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	9f 93       	push	r25
    1f92:	8f 93       	push	r24
    1f94:	89 ea       	ldi	r24, 0xA9	; 169
    1f96:	90 e2       	ldi	r25, 0x20	; 32
    1f98:	9f 93       	push	r25
    1f9a:	8f 93       	push	r24
    1f9c:	8a e0       	ldi	r24, 0x0A	; 10
    1f9e:	91 e2       	ldi	r25, 0x21	; 33
    1fa0:	9f 93       	push	r25
    1fa2:	8f 93       	push	r24
    1fa4:	9d d6       	rcall	.+3386   	; 0x2ce0 <sscanf>
				sscanf(dec,"%d",&val2);
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	05 96       	adiw	r24, 0x05	; 5
    1faa:	9f 93       	push	r25
    1fac:	8f 93       	push	r24
    1fae:	8d ea       	ldi	r24, 0xAD	; 173
    1fb0:	90 e2       	ldi	r25, 0x20	; 32
    1fb2:	9f 93       	push	r25
    1fb4:	8f 93       	push	r24
    1fb6:	89 e1       	ldi	r24, 0x19	; 25
    1fb8:	91 e2       	ldi	r25, 0x21	; 33
    1fba:	9f 93       	push	r25
    1fbc:	8f 93       	push	r24
    1fbe:	90 d6       	rcall	.+3360   	; 0x2ce0 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    1fc0:	89 80       	ldd	r8, Y+1	; 0x01
    1fc2:	9a 80       	ldd	r9, Y+2	; 0x02
    1fc4:	ab 80       	ldd	r10, Y+3	; 0x03
    1fc6:	bc 80       	ldd	r11, Y+4	; 0x04
    1fc8:	6d 81       	ldd	r22, Y+5	; 0x05
    1fca:	7e 81       	ldd	r23, Y+6	; 0x06
    1fcc:	07 2e       	mov	r0, r23
    1fce:	00 0c       	add	r0, r0
    1fd0:	88 0b       	sbc	r24, r24
    1fd2:	99 0b       	sbc	r25, r25
    1fd4:	8b d2       	rcall	.+1302   	; 0x24ec <__floatsisf>
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e4       	ldi	r19, 0x40	; 64
    1fda:	4c e1       	ldi	r20, 0x1C	; 28
    1fdc:	56 e4       	ldi	r21, 0x46	; 70
    1fde:	b1 d1       	rcall	.+866    	; 0x2342 <__divsf3>
    1fe0:	6b 01       	movw	r12, r22
    1fe2:	7c 01       	movw	r14, r24
    1fe4:	c5 01       	movw	r24, r10
    1fe6:	b4 01       	movw	r22, r8
    1fe8:	24 e6       	ldi	r18, 0x64	; 100
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	9f d5       	rcall	.+2878   	; 0x2b30 <__divmodsi4>
    1ff2:	49 01       	movw	r8, r18
    1ff4:	5a 01       	movw	r10, r20
    1ff6:	7a d2       	rcall	.+1268   	; 0x24ec <__floatsisf>
    1ff8:	9b 01       	movw	r18, r22
    1ffa:	ac 01       	movw	r20, r24
    1ffc:	c7 01       	movw	r24, r14
    1ffe:	b6 01       	movw	r22, r12
    2000:	38 d1       	rcall	.+624    	; 0x2272 <__addsf3>
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e7       	ldi	r20, 0x70	; 112
    2008:	52 e4       	ldi	r21, 0x42	; 66
    200a:	9b d1       	rcall	.+822    	; 0x2342 <__divsf3>
    200c:	6b 01       	movw	r12, r22
    200e:	7c 01       	movw	r14, r24
    2010:	c5 01       	movw	r24, r10
    2012:	b4 01       	movw	r22, r8
    2014:	6b d2       	rcall	.+1238   	; 0x24ec <__floatsisf>
    2016:	9b 01       	movw	r18, r22
    2018:	ac 01       	movw	r20, r24
    201a:	c7 01       	movw	r24, r14
    201c:	b6 01       	movw	r22, r12
    201e:	29 d1       	rcall	.+594    	; 0x2272 <__addsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	b0 58       	subi	r27, 0x80	; 128
    2026:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <gps_long>
    202a:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <gps_long+0x1>
    202e:	a0 93 c8 20 	sts	0x20C8, r26	; 0x8020c8 <gps_long+0x2>
    2032:	b0 93 c9 20 	sts	0x20C9, r27	; 0x8020c9 <gps_long+0x3>
    2036:	cd bf       	out	0x3d, r28	; 61
				break;
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	90 c0       	rjmp	.+288    	; 0x215c <__vector_91+0x4e2>
    203c:	80 ec       	ldi	r24, 0xC0	; 192
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    203e:	90 e2       	ldi	r25, 0x20	; 32
    2040:	9f 93       	push	r25
    2042:	8f 93       	push	r24
    2044:	8d ea       	ldi	r24, 0xAD	; 173
    2046:	90 e2       	ldi	r25, 0x20	; 32
    2048:	9f 93       	push	r25
    204a:	8f 93       	push	r24
    204c:	8a e0       	ldi	r24, 0x0A	; 10
    204e:	91 e2       	ldi	r25, 0x21	; 33
    2050:	9f 93       	push	r25
    2052:	8f 93       	push	r24
    2054:	45 d6       	rcall	.+3210   	; 0x2ce0 <sscanf>
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
				break;
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	7c c0       	rjmp	.+248    	; 0x215c <__vector_91+0x4e2>
    2064:	eb e0       	ldi	r30, 0x0B	; 11
    2066:	f1 e2       	ldi	r31, 0x21	; 33
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    206c:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    206e:	29 f4       	brne	.+10     	; 0x207a <__vector_91+0x400>
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <__vector_91+0x3fa>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						idx = i;
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <__vector_91+0x406>
    207a:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    207c:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    207e:	a9 f7       	brne	.-22     	; 0x206a <__vector_91+0x3f0>
    2080:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2084:	42 2f       	mov	r20, r18
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	fa 01       	movw	r30, r20
    208a:	e6 5f       	subi	r30, 0xF6	; 246
    208c:	fe 4d       	sbci	r31, 0xDE	; 222
    208e:	80 e2       	ldi	r24, 0x20	; 32
    2090:	80 83       	st	Z, r24
    2092:	2f 5f       	subi	r18, 0xFF	; 255
    2094:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    2096:	f8 f4       	brcc	.+62     	; 0x20d6 <__vector_91+0x45c>
    2098:	82 2f       	mov	r24, r18
    209a:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    209c:	fc 01       	movw	r30, r24
    209e:	e6 5f       	subi	r30, 0xF6	; 246
    20a0:	fe 4d       	sbci	r31, 0xDE	; 222
    20a2:	30 81       	ld	r19, Z
    20a4:	30 32       	cpi	r19, 0x20	; 32
    20a6:	b9 f0       	breq	.+46     	; 0x20d6 <__vector_91+0x45c>
    20a8:	60 e2       	ldi	r22, 0x20	; 32
    20aa:	08 c0       	rjmp	.+16     	; 0x20bc <__vector_91+0x442>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    20ac:	82 2f       	mov	r24, r18
    20ae:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    20b0:	fc 01       	movw	r30, r24
    20b2:	e6 5f       	subi	r30, 0xF6	; 246
    20b4:	fe 4d       	sbci	r31, 0xDE	; 222
    20b6:	30 81       	ld	r19, Z
    20b8:	30 32       	cpi	r19, 0x20	; 32
    20ba:	69 f0       	breq	.+26     	; 0x20d6 <__vector_91+0x45c>
    20bc:	fc 01       	movw	r30, r24
    20be:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    20c0:	f5 0b       	sbc	r31, r21
    20c2:	e8 5e       	subi	r30, 0xE8	; 232
    20c4:	fe 4d       	sbci	r31, 0xDE	; 222
    20c6:	30 83       	st	Z, r19
    20c8:	fc 01       	movw	r30, r24
    20ca:	e6 5f       	subi	r30, 0xF6	; 246
					gps[i] = 32;
    20cc:	fe 4d       	sbci	r31, 0xDE	; 222
    20ce:	60 83       	st	Z, r22
    20d0:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    20d2:	2f 30       	cpi	r18, 0x0F	; 15
    20d4:	59 f7       	brne	.-42     	; 0x20ac <__vector_91+0x432>
    20d6:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    20da:	80 32       	cpi	r24, 0x20	; 32
    20dc:	19 f4       	brne	.+6      	; 0x20e4 <__vector_91+0x46a>
    20de:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    20e0:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <dec>
    20e4:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    20e6:	01 96       	adiw	r24, 0x01	; 1
    20e8:	9f 93       	push	r25
    20ea:	8f 93       	push	r24
    20ec:	89 ea       	ldi	r24, 0xA9	; 169
    20ee:	90 e2       	ldi	r25, 0x20	; 32
    20f0:	9f 93       	push	r25
    20f2:	8f 93       	push	r24
    20f4:	8a e0       	ldi	r24, 0x0A	; 10
    20f6:	91 e2       	ldi	r25, 0x21	; 33
    20f8:	9f 93       	push	r25
    20fa:	8f 93       	push	r24
    20fc:	f1 d5       	rcall	.+3042   	; 0x2ce0 <sscanf>
				sscanf(dec,"%d",&val2);
    20fe:	ce 01       	movw	r24, r28
    2100:	05 96       	adiw	r24, 0x05	; 5
    2102:	9f 93       	push	r25
    2104:	8f 93       	push	r24
    2106:	8d ea       	ldi	r24, 0xAD	; 173
    2108:	90 e2       	ldi	r25, 0x20	; 32
    210a:	9f 93       	push	r25
    210c:	8f 93       	push	r24
    210e:	89 e1       	ldi	r24, 0x19	; 25
    2110:	91 e2       	ldi	r25, 0x21	; 33
    2112:	9f 93       	push	r25
    2114:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    2116:	e4 d5       	rcall	.+3016   	; 0x2ce0 <sscanf>
    2118:	69 81       	ldd	r22, Y+1	; 0x01
    211a:	7a 81       	ldd	r23, Y+2	; 0x02
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	e5 d1       	rcall	.+970    	; 0x24ec <__floatsisf>
    2122:	6b 01       	movw	r12, r22
    2124:	7c 01       	movw	r14, r24
    2126:	6d 81       	ldd	r22, Y+5	; 0x05
    2128:	7e 81       	ldd	r23, Y+6	; 0x06
    212a:	07 2e       	mov	r0, r23
    212c:	00 0c       	add	r0, r0
    212e:	88 0b       	sbc	r24, r24
    2130:	99 0b       	sbc	r25, r25
    2132:	dc d1       	rcall	.+952    	; 0x24ec <__floatsisf>
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e2       	ldi	r20, 0x20	; 32
    213a:	51 e4       	ldi	r21, 0x41	; 65
    213c:	02 d1       	rcall	.+516    	; 0x2342 <__divsf3>
    213e:	9b 01       	movw	r18, r22
    2140:	ac 01       	movw	r20, r24
    2142:	c7 01       	movw	r24, r14
    2144:	b6 01       	movw	r22, r12
    2146:	95 d0       	rcall	.+298    	; 0x2272 <__addsf3>
    2148:	60 93 c2 20 	sts	0x20C2, r22	; 0x8020c2 <gps_alt>
    214c:	70 93 c3 20 	sts	0x20C3, r23	; 0x8020c3 <gps_alt+0x1>
    2150:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <gps_alt+0x2>
    2154:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <gps_alt+0x3>
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <writing>
				break;
    2160:	88 23       	and	r24, r24
		}
	
		if(writing){
    2162:	d1 f0       	breq	.+52     	; 0x2198 <__vector_91+0x51e>
    2164:	10 92 ea 20 	sts	0x20EA, r1	; 0x8020ea <idx>
    2168:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <commas>
			idx = 0;
    216c:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    216e:	80 93 eb 20 	sts	0x20EB, r24	; 0x8020eb <commas>
    2172:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <word_pos>
    2176:	ea e0       	ldi	r30, 0x0A	; 10
			word_pos = 0;
    2178:	f1 e2       	ldi	r31, 0x21	; 33
    217a:	29 e1       	ldi	r18, 0x19	; 25
    217c:	31 e2       	ldi	r19, 0x21	; 33
    217e:	80 e2       	ldi	r24, 0x20	; 32
    2180:	81 93       	st	Z+, r24
    2182:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2184:	3f 07       	cpc	r19, r31
    2186:	e1 f7       	brne	.-8      	; 0x2180 <__vector_91+0x506>
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2188:	e9 e1       	ldi	r30, 0x19	; 25
    218a:	f1 e2       	ldi	r31, 0x21	; 33
    218c:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    218e:	80 83       	st	Z, r24
    2190:	81 83       	std	Z+1, r24	; 0x01
    2192:	82 83       	std	Z+2, r24	; 0x02
    2194:	83 83       	std	Z+3, r24	; 0x03
    2196:	84 83       	std	Z+4, r24	; 0x04
    2198:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <writing>
    219c:	88 23       	and	r24, r24
			}
		}
	}
		
	if(writing){
    219e:	09 f4       	brne	.+2      	; 0x21a2 <__vector_91+0x528>
    21a0:	40 c0       	rjmp	.+128    	; 0x2222 <__vector_91+0x5a8>
    21a2:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <pos>
    21a6:	93 30       	cpi	r25, 0x03	; 3
		switch(pos){
    21a8:	19 f0       	breq	.+6      	; 0x21b0 <__vector_91+0x536>
    21aa:	94 30       	cpi	r25, 0x04	; 4
    21ac:	31 f0       	breq	.+12     	; 0x21ba <__vector_91+0x540>
    21ae:	09 c0       	rjmp	.+18     	; 0x21c2 <__vector_91+0x548>
    21b0:	17 34       	cpi	r17, 0x47	; 71
    21b2:	39 f0       	breq	.+14     	; 0x21c2 <__vector_91+0x548>
    21b4:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <writing>
			case 3:
				if(c != 'G'){
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <__vector_91+0x548>
					writing = 0;
    21ba:	17 34       	cpi	r17, 0x47	; 71
    21bc:	11 f0       	breq	.+4      	; 0x21c2 <__vector_91+0x548>
    21be:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <writing>
				}
				break;
				
			case 4:
				if(c != 'G'){
    21c2:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <word_pos>
					writing = 0;
    21c6:	e8 2f       	mov	r30, r24
				}
				break;
		}
		gps[word_pos] = c;
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	e6 5f       	subi	r30, 0xF6	; 246
    21cc:	fe 4d       	sbci	r31, 0xDE	; 222
    21ce:	10 83       	st	Z, r17
    21d0:	8f 5f       	subi	r24, 0xFF	; 255
    21d2:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <word_pos>
		word_pos++;
    21d6:	9f 5f       	subi	r25, 0xFF	; 255
    21d8:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <pos>
		pos++;
    21dc:	22 c0       	rjmp	.+68     	; 0x2222 <__vector_91+0x5a8>
    21de:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <gps>
	}
}
    21e2:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <__vector_91+0x56e>
    21e6:	b1 cd       	rjmp	.-1182   	; 0x1d4a <__vector_91+0xd0>
    21e8:	eb e0       	ldi	r30, 0x0B	; 11
    21ea:	f1 e2       	ldi	r31, 0x21	; 33
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	a9 cd       	rjmp	.-1198   	; 0x1d42 <__vector_91+0xc8>
    21f0:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    21f2:	1a 82       	std	Y+2, r1	; 0x02
    21f4:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    21f6:	1c 82       	std	Y+4, r1	; 0x04
    21f8:	1d 82       	std	Y+5, r1	; 0x05
    21fa:	1e 82       	std	Y+6, r1	; 0x06
    21fc:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <commas>
		int16_t val2 = 0;
    2200:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    2202:	09 f4       	brne	.+2      	; 0x2206 <__vector_91+0x58c>
    2204:	92 cd       	rjmp	.-1244   	; 0x1d2a <__vector_91+0xb0>
    2206:	30 f4       	brcc	.+12     	; 0x2214 <__vector_91+0x59a>
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	49 f3       	breq	.-46     	; 0x21de <__vector_91+0x564>
    220c:	82 30       	cpi	r24, 0x02	; 2
    220e:	09 f4       	brne	.+2      	; 0x2212 <__vector_91+0x598>
    2210:	92 cd       	rjmp	.-1244   	; 0x1d36 <__vector_91+0xbc>
    2212:	a4 cf       	rjmp	.-184    	; 0x215c <__vector_91+0x4e2>
    2214:	87 30       	cpi	r24, 0x07	; 7
    2216:	09 f4       	brne	.+2      	; 0x221a <__vector_91+0x5a0>
    2218:	11 cf       	rjmp	.-478    	; 0x203c <__vector_91+0x3c2>
    221a:	89 30       	cpi	r24, 0x09	; 9
    221c:	09 f4       	brne	.+2      	; 0x2220 <__vector_91+0x5a6>
    221e:	7f cd       	rjmp	.-1282   	; 0x1d1e <__vector_91+0xa4>
    2220:	9d cf       	rjmp	.-198    	; 0x215c <__vector_91+0x4e2>
    2222:	26 96       	adiw	r28, 0x06	; 6
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	ff 91       	pop	r31
    222e:	ef 91       	pop	r30
    2230:	bf 91       	pop	r27
    2232:	af 91       	pop	r26
    2234:	9f 91       	pop	r25
    2236:	8f 91       	pop	r24
    2238:	7f 91       	pop	r23
    223a:	6f 91       	pop	r22
    223c:	5f 91       	pop	r21
    223e:	4f 91       	pop	r20
    2240:	3f 91       	pop	r19
    2242:	2f 91       	pop	r18
    2244:	1f 91       	pop	r17
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	df 90       	pop	r13
    224c:	cf 90       	pop	r12
    224e:	bf 90       	pop	r11
    2250:	af 90       	pop	r10
    2252:	9f 90       	pop	r9
    2254:	8f 90       	pop	r8
    2256:	0f 90       	pop	r0
    2258:	0b be       	out	0x3b, r0	; 59
    225a:	0f 90       	pop	r0
    225c:	0a be       	out	0x3a, r0	; 58
    225e:	0f 90       	pop	r0
    2260:	09 be       	out	0x39, r0	; 57
    2262:	0f 90       	pop	r0
    2264:	08 be       	out	0x38, r0	; 56
    2266:	0f 90       	pop	r0
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	0f 90       	pop	r0
    226c:	1f 90       	pop	r1
    226e:	18 95       	reti

00002270 <__subsf3>:
    2270:	50 58       	subi	r21, 0x80	; 128

00002272 <__addsf3>:
    2272:	bb 27       	eor	r27, r27
    2274:	aa 27       	eor	r26, r26
    2276:	0e d0       	rcall	.+28     	; 0x2294 <__addsf3x>
    2278:	fd c1       	rjmp	.+1018   	; 0x2674 <__fp_round>
    227a:	ee d1       	rcall	.+988    	; 0x2658 <__fp_pscA>
    227c:	30 f0       	brcs	.+12     	; 0x228a <__addsf3+0x18>
    227e:	f3 d1       	rcall	.+998    	; 0x2666 <__fp_pscB>
    2280:	20 f0       	brcs	.+8      	; 0x228a <__addsf3+0x18>
    2282:	31 f4       	brne	.+12     	; 0x2290 <__addsf3+0x1e>
    2284:	9f 3f       	cpi	r25, 0xFF	; 255
    2286:	11 f4       	brne	.+4      	; 0x228c <__addsf3+0x1a>
    2288:	1e f4       	brtc	.+6      	; 0x2290 <__addsf3+0x1e>
    228a:	d3 c1       	rjmp	.+934    	; 0x2632 <__fp_nan>
    228c:	0e f4       	brtc	.+2      	; 0x2290 <__addsf3+0x1e>
    228e:	e0 95       	com	r30
    2290:	e7 fb       	bst	r30, 7
    2292:	c9 c1       	rjmp	.+914    	; 0x2626 <__fp_inf>

00002294 <__addsf3x>:
    2294:	e9 2f       	mov	r30, r25
    2296:	ff d1       	rcall	.+1022   	; 0x2696 <__fp_split3>
    2298:	80 f3       	brcs	.-32     	; 0x227a <__addsf3+0x8>
    229a:	ba 17       	cp	r27, r26
    229c:	62 07       	cpc	r22, r18
    229e:	73 07       	cpc	r23, r19
    22a0:	84 07       	cpc	r24, r20
    22a2:	95 07       	cpc	r25, r21
    22a4:	18 f0       	brcs	.+6      	; 0x22ac <__addsf3x+0x18>
    22a6:	71 f4       	brne	.+28     	; 0x22c4 <__addsf3x+0x30>
    22a8:	9e f5       	brtc	.+102    	; 0x2310 <__addsf3x+0x7c>
    22aa:	17 c2       	rjmp	.+1070   	; 0x26da <__fp_zero>
    22ac:	0e f4       	brtc	.+2      	; 0x22b0 <__addsf3x+0x1c>
    22ae:	e0 95       	com	r30
    22b0:	0b 2e       	mov	r0, r27
    22b2:	ba 2f       	mov	r27, r26
    22b4:	a0 2d       	mov	r26, r0
    22b6:	0b 01       	movw	r0, r22
    22b8:	b9 01       	movw	r22, r18
    22ba:	90 01       	movw	r18, r0
    22bc:	0c 01       	movw	r0, r24
    22be:	ca 01       	movw	r24, r20
    22c0:	a0 01       	movw	r20, r0
    22c2:	11 24       	eor	r1, r1
    22c4:	ff 27       	eor	r31, r31
    22c6:	59 1b       	sub	r21, r25
    22c8:	99 f0       	breq	.+38     	; 0x22f0 <__addsf3x+0x5c>
    22ca:	59 3f       	cpi	r21, 0xF9	; 249
    22cc:	50 f4       	brcc	.+20     	; 0x22e2 <__addsf3x+0x4e>
    22ce:	50 3e       	cpi	r21, 0xE0	; 224
    22d0:	68 f1       	brcs	.+90     	; 0x232c <__addsf3x+0x98>
    22d2:	1a 16       	cp	r1, r26
    22d4:	f0 40       	sbci	r31, 0x00	; 0
    22d6:	a2 2f       	mov	r26, r18
    22d8:	23 2f       	mov	r18, r19
    22da:	34 2f       	mov	r19, r20
    22dc:	44 27       	eor	r20, r20
    22de:	58 5f       	subi	r21, 0xF8	; 248
    22e0:	f3 cf       	rjmp	.-26     	; 0x22c8 <__addsf3x+0x34>
    22e2:	46 95       	lsr	r20
    22e4:	37 95       	ror	r19
    22e6:	27 95       	ror	r18
    22e8:	a7 95       	ror	r26
    22ea:	f0 40       	sbci	r31, 0x00	; 0
    22ec:	53 95       	inc	r21
    22ee:	c9 f7       	brne	.-14     	; 0x22e2 <__addsf3x+0x4e>
    22f0:	7e f4       	brtc	.+30     	; 0x2310 <__addsf3x+0x7c>
    22f2:	1f 16       	cp	r1, r31
    22f4:	ba 0b       	sbc	r27, r26
    22f6:	62 0b       	sbc	r22, r18
    22f8:	73 0b       	sbc	r23, r19
    22fa:	84 0b       	sbc	r24, r20
    22fc:	ba f0       	brmi	.+46     	; 0x232c <__addsf3x+0x98>
    22fe:	91 50       	subi	r25, 0x01	; 1
    2300:	a1 f0       	breq	.+40     	; 0x232a <__addsf3x+0x96>
    2302:	ff 0f       	add	r31, r31
    2304:	bb 1f       	adc	r27, r27
    2306:	66 1f       	adc	r22, r22
    2308:	77 1f       	adc	r23, r23
    230a:	88 1f       	adc	r24, r24
    230c:	c2 f7       	brpl	.-16     	; 0x22fe <__addsf3x+0x6a>
    230e:	0e c0       	rjmp	.+28     	; 0x232c <__addsf3x+0x98>
    2310:	ba 0f       	add	r27, r26
    2312:	62 1f       	adc	r22, r18
    2314:	73 1f       	adc	r23, r19
    2316:	84 1f       	adc	r24, r20
    2318:	48 f4       	brcc	.+18     	; 0x232c <__addsf3x+0x98>
    231a:	87 95       	ror	r24
    231c:	77 95       	ror	r23
    231e:	67 95       	ror	r22
    2320:	b7 95       	ror	r27
    2322:	f7 95       	ror	r31
    2324:	9e 3f       	cpi	r25, 0xFE	; 254
    2326:	08 f0       	brcs	.+2      	; 0x232a <__addsf3x+0x96>
    2328:	b3 cf       	rjmp	.-154    	; 0x2290 <__addsf3+0x1e>
    232a:	93 95       	inc	r25
    232c:	88 0f       	add	r24, r24
    232e:	08 f0       	brcs	.+2      	; 0x2332 <__addsf3x+0x9e>
    2330:	99 27       	eor	r25, r25
    2332:	ee 0f       	add	r30, r30
    2334:	97 95       	ror	r25
    2336:	87 95       	ror	r24
    2338:	08 95       	ret

0000233a <__cmpsf2>:
    233a:	51 d1       	rcall	.+674    	; 0x25de <__fp_cmp>
    233c:	08 f4       	brcc	.+2      	; 0x2340 <__cmpsf2+0x6>
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	08 95       	ret

00002342 <__divsf3>:
    2342:	0c d0       	rcall	.+24     	; 0x235c <__divsf3x>
    2344:	97 c1       	rjmp	.+814    	; 0x2674 <__fp_round>
    2346:	8f d1       	rcall	.+798    	; 0x2666 <__fp_pscB>
    2348:	40 f0       	brcs	.+16     	; 0x235a <__divsf3+0x18>
    234a:	86 d1       	rcall	.+780    	; 0x2658 <__fp_pscA>
    234c:	30 f0       	brcs	.+12     	; 0x235a <__divsf3+0x18>
    234e:	21 f4       	brne	.+8      	; 0x2358 <__divsf3+0x16>
    2350:	5f 3f       	cpi	r21, 0xFF	; 255
    2352:	19 f0       	breq	.+6      	; 0x235a <__divsf3+0x18>
    2354:	68 c1       	rjmp	.+720    	; 0x2626 <__fp_inf>
    2356:	51 11       	cpse	r21, r1
    2358:	c1 c1       	rjmp	.+898    	; 0x26dc <__fp_szero>
    235a:	6b c1       	rjmp	.+726    	; 0x2632 <__fp_nan>

0000235c <__divsf3x>:
    235c:	9c d1       	rcall	.+824    	; 0x2696 <__fp_split3>
    235e:	98 f3       	brcs	.-26     	; 0x2346 <__divsf3+0x4>

00002360 <__divsf3_pse>:
    2360:	99 23       	and	r25, r25
    2362:	c9 f3       	breq	.-14     	; 0x2356 <__divsf3+0x14>
    2364:	55 23       	and	r21, r21
    2366:	b1 f3       	breq	.-20     	; 0x2354 <__divsf3+0x12>
    2368:	95 1b       	sub	r25, r21
    236a:	55 0b       	sbc	r21, r21
    236c:	bb 27       	eor	r27, r27
    236e:	aa 27       	eor	r26, r26
    2370:	62 17       	cp	r22, r18
    2372:	73 07       	cpc	r23, r19
    2374:	84 07       	cpc	r24, r20
    2376:	38 f0       	brcs	.+14     	; 0x2386 <__divsf3_pse+0x26>
    2378:	9f 5f       	subi	r25, 0xFF	; 255
    237a:	5f 4f       	sbci	r21, 0xFF	; 255
    237c:	22 0f       	add	r18, r18
    237e:	33 1f       	adc	r19, r19
    2380:	44 1f       	adc	r20, r20
    2382:	aa 1f       	adc	r26, r26
    2384:	a9 f3       	breq	.-22     	; 0x2370 <__divsf3_pse+0x10>
    2386:	33 d0       	rcall	.+102    	; 0x23ee <__divsf3_pse+0x8e>
    2388:	0e 2e       	mov	r0, r30
    238a:	3a f0       	brmi	.+14     	; 0x239a <__divsf3_pse+0x3a>
    238c:	e0 e8       	ldi	r30, 0x80	; 128
    238e:	30 d0       	rcall	.+96     	; 0x23f0 <__divsf3_pse+0x90>
    2390:	91 50       	subi	r25, 0x01	; 1
    2392:	50 40       	sbci	r21, 0x00	; 0
    2394:	e6 95       	lsr	r30
    2396:	00 1c       	adc	r0, r0
    2398:	ca f7       	brpl	.-14     	; 0x238c <__divsf3_pse+0x2c>
    239a:	29 d0       	rcall	.+82     	; 0x23ee <__divsf3_pse+0x8e>
    239c:	fe 2f       	mov	r31, r30
    239e:	27 d0       	rcall	.+78     	; 0x23ee <__divsf3_pse+0x8e>
    23a0:	66 0f       	add	r22, r22
    23a2:	77 1f       	adc	r23, r23
    23a4:	88 1f       	adc	r24, r24
    23a6:	bb 1f       	adc	r27, r27
    23a8:	26 17       	cp	r18, r22
    23aa:	37 07       	cpc	r19, r23
    23ac:	48 07       	cpc	r20, r24
    23ae:	ab 07       	cpc	r26, r27
    23b0:	b0 e8       	ldi	r27, 0x80	; 128
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <__divsf3_pse+0x56>
    23b4:	bb 0b       	sbc	r27, r27
    23b6:	80 2d       	mov	r24, r0
    23b8:	bf 01       	movw	r22, r30
    23ba:	ff 27       	eor	r31, r31
    23bc:	93 58       	subi	r25, 0x83	; 131
    23be:	5f 4f       	sbci	r21, 0xFF	; 255
    23c0:	2a f0       	brmi	.+10     	; 0x23cc <__divsf3_pse+0x6c>
    23c2:	9e 3f       	cpi	r25, 0xFE	; 254
    23c4:	51 05       	cpc	r21, r1
    23c6:	68 f0       	brcs	.+26     	; 0x23e2 <__divsf3_pse+0x82>
    23c8:	2e c1       	rjmp	.+604    	; 0x2626 <__fp_inf>
    23ca:	88 c1       	rjmp	.+784    	; 0x26dc <__fp_szero>
    23cc:	5f 3f       	cpi	r21, 0xFF	; 255
    23ce:	ec f3       	brlt	.-6      	; 0x23ca <__divsf3_pse+0x6a>
    23d0:	98 3e       	cpi	r25, 0xE8	; 232
    23d2:	dc f3       	brlt	.-10     	; 0x23ca <__divsf3_pse+0x6a>
    23d4:	86 95       	lsr	r24
    23d6:	77 95       	ror	r23
    23d8:	67 95       	ror	r22
    23da:	b7 95       	ror	r27
    23dc:	f7 95       	ror	r31
    23de:	9f 5f       	subi	r25, 0xFF	; 255
    23e0:	c9 f7       	brne	.-14     	; 0x23d4 <__divsf3_pse+0x74>
    23e2:	88 0f       	add	r24, r24
    23e4:	91 1d       	adc	r25, r1
    23e6:	96 95       	lsr	r25
    23e8:	87 95       	ror	r24
    23ea:	97 f9       	bld	r25, 7
    23ec:	08 95       	ret
    23ee:	e1 e0       	ldi	r30, 0x01	; 1
    23f0:	66 0f       	add	r22, r22
    23f2:	77 1f       	adc	r23, r23
    23f4:	88 1f       	adc	r24, r24
    23f6:	bb 1f       	adc	r27, r27
    23f8:	62 17       	cp	r22, r18
    23fa:	73 07       	cpc	r23, r19
    23fc:	84 07       	cpc	r24, r20
    23fe:	ba 07       	cpc	r27, r26
    2400:	20 f0       	brcs	.+8      	; 0x240a <__divsf3_pse+0xaa>
    2402:	62 1b       	sub	r22, r18
    2404:	73 0b       	sbc	r23, r19
    2406:	84 0b       	sbc	r24, r20
    2408:	ba 0b       	sbc	r27, r26
    240a:	ee 1f       	adc	r30, r30
    240c:	88 f7       	brcc	.-30     	; 0x23f0 <__divsf3_pse+0x90>
    240e:	e0 95       	com	r30
    2410:	08 95       	ret

00002412 <__fixsfdi>:
    2412:	be e3       	ldi	r27, 0x3E	; 62
    2414:	04 d0       	rcall	.+8      	; 0x241e <__fixunssfdi+0x2>
    2416:	08 f4       	brcc	.+2      	; 0x241a <__fixsfdi+0x8>
    2418:	90 e8       	ldi	r25, 0x80	; 128
    241a:	08 95       	ret

0000241c <__fixunssfdi>:
    241c:	bf e3       	ldi	r27, 0x3F	; 63
    241e:	22 27       	eor	r18, r18
    2420:	33 27       	eor	r19, r19
    2422:	a9 01       	movw	r20, r18
    2424:	40 d1       	rcall	.+640    	; 0x26a6 <__fp_splitA>
    2426:	58 f1       	brcs	.+86     	; 0x247e <__fixunssfdi+0x62>
    2428:	9f 57       	subi	r25, 0x7F	; 127
    242a:	40 f1       	brcs	.+80     	; 0x247c <__fixunssfdi+0x60>
    242c:	b9 17       	cp	r27, r25
    242e:	38 f1       	brcs	.+78     	; 0x247e <__fixunssfdi+0x62>
    2430:	bf e3       	ldi	r27, 0x3F	; 63
    2432:	b9 1b       	sub	r27, r25
    2434:	99 27       	eor	r25, r25
    2436:	b8 50       	subi	r27, 0x08	; 8
    2438:	3a f4       	brpl	.+14     	; 0x2448 <__fixunssfdi+0x2c>
    243a:	66 0f       	add	r22, r22
    243c:	77 1f       	adc	r23, r23
    243e:	88 1f       	adc	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	b3 95       	inc	r27
    2444:	d2 f3       	brmi	.-12     	; 0x243a <__fixunssfdi+0x1e>
    2446:	16 c0       	rjmp	.+44     	; 0x2474 <__fixunssfdi+0x58>
    2448:	b8 50       	subi	r27, 0x08	; 8
    244a:	4a f0       	brmi	.+18     	; 0x245e <__fixunssfdi+0x42>
    244c:	23 2f       	mov	r18, r19
    244e:	34 2f       	mov	r19, r20
    2450:	45 2f       	mov	r20, r21
    2452:	56 2f       	mov	r21, r22
    2454:	67 2f       	mov	r22, r23
    2456:	78 2f       	mov	r23, r24
    2458:	88 27       	eor	r24, r24
    245a:	b8 50       	subi	r27, 0x08	; 8
    245c:	ba f7       	brpl	.-18     	; 0x244c <__fixunssfdi+0x30>
    245e:	b8 5f       	subi	r27, 0xF8	; 248
    2460:	49 f0       	breq	.+18     	; 0x2474 <__fixunssfdi+0x58>
    2462:	86 95       	lsr	r24
    2464:	77 95       	ror	r23
    2466:	67 95       	ror	r22
    2468:	57 95       	ror	r21
    246a:	47 95       	ror	r20
    246c:	37 95       	ror	r19
    246e:	27 95       	ror	r18
    2470:	ba 95       	dec	r27
    2472:	b9 f7       	brne	.-18     	; 0x2462 <__fixunssfdi+0x46>
    2474:	0e f4       	brtc	.+2      	; 0x2478 <__fixunssfdi+0x5c>
    2476:	e0 d0       	rcall	.+448    	; 0x2638 <__fp_negdi>
    2478:	88 94       	clc
    247a:	08 95       	ret
    247c:	88 94       	clc
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	cb 01       	movw	r24, r22
    2484:	08 95       	ret

00002486 <__fixsfsi>:
    2486:	04 d0       	rcall	.+8      	; 0x2490 <__fixunssfsi>
    2488:	68 94       	set
    248a:	b1 11       	cpse	r27, r1
    248c:	27 c1       	rjmp	.+590    	; 0x26dc <__fp_szero>
    248e:	08 95       	ret

00002490 <__fixunssfsi>:
    2490:	0a d1       	rcall	.+532    	; 0x26a6 <__fp_splitA>
    2492:	88 f0       	brcs	.+34     	; 0x24b6 <__fixunssfsi+0x26>
    2494:	9f 57       	subi	r25, 0x7F	; 127
    2496:	90 f0       	brcs	.+36     	; 0x24bc <__fixunssfsi+0x2c>
    2498:	b9 2f       	mov	r27, r25
    249a:	99 27       	eor	r25, r25
    249c:	b7 51       	subi	r27, 0x17	; 23
    249e:	a0 f0       	brcs	.+40     	; 0x24c8 <__fixunssfsi+0x38>
    24a0:	d1 f0       	breq	.+52     	; 0x24d6 <__fixunssfsi+0x46>
    24a2:	66 0f       	add	r22, r22
    24a4:	77 1f       	adc	r23, r23
    24a6:	88 1f       	adc	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	1a f0       	brmi	.+6      	; 0x24b2 <__fixunssfsi+0x22>
    24ac:	ba 95       	dec	r27
    24ae:	c9 f7       	brne	.-14     	; 0x24a2 <__fixunssfsi+0x12>
    24b0:	12 c0       	rjmp	.+36     	; 0x24d6 <__fixunssfsi+0x46>
    24b2:	b1 30       	cpi	r27, 0x01	; 1
    24b4:	81 f0       	breq	.+32     	; 0x24d6 <__fixunssfsi+0x46>
    24b6:	11 d1       	rcall	.+546    	; 0x26da <__fp_zero>
    24b8:	b1 e0       	ldi	r27, 0x01	; 1
    24ba:	08 95       	ret
    24bc:	0e c1       	rjmp	.+540    	; 0x26da <__fp_zero>
    24be:	67 2f       	mov	r22, r23
    24c0:	78 2f       	mov	r23, r24
    24c2:	88 27       	eor	r24, r24
    24c4:	b8 5f       	subi	r27, 0xF8	; 248
    24c6:	39 f0       	breq	.+14     	; 0x24d6 <__fixunssfsi+0x46>
    24c8:	b9 3f       	cpi	r27, 0xF9	; 249
    24ca:	cc f3       	brlt	.-14     	; 0x24be <__fixunssfsi+0x2e>
    24cc:	86 95       	lsr	r24
    24ce:	77 95       	ror	r23
    24d0:	67 95       	ror	r22
    24d2:	b3 95       	inc	r27
    24d4:	d9 f7       	brne	.-10     	; 0x24cc <__fixunssfsi+0x3c>
    24d6:	3e f4       	brtc	.+14     	; 0x24e6 <__fixunssfsi+0x56>
    24d8:	90 95       	com	r25
    24da:	80 95       	com	r24
    24dc:	70 95       	com	r23
    24de:	61 95       	neg	r22
    24e0:	7f 4f       	sbci	r23, 0xFF	; 255
    24e2:	8f 4f       	sbci	r24, 0xFF	; 255
    24e4:	9f 4f       	sbci	r25, 0xFF	; 255
    24e6:	08 95       	ret

000024e8 <__floatunsisf>:
    24e8:	e8 94       	clt
    24ea:	09 c0       	rjmp	.+18     	; 0x24fe <__floatsisf+0x12>

000024ec <__floatsisf>:
    24ec:	97 fb       	bst	r25, 7
    24ee:	3e f4       	brtc	.+14     	; 0x24fe <__floatsisf+0x12>
    24f0:	90 95       	com	r25
    24f2:	80 95       	com	r24
    24f4:	70 95       	com	r23
    24f6:	61 95       	neg	r22
    24f8:	7f 4f       	sbci	r23, 0xFF	; 255
    24fa:	8f 4f       	sbci	r24, 0xFF	; 255
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	99 23       	and	r25, r25
    2500:	a9 f0       	breq	.+42     	; 0x252c <__floatsisf+0x40>
    2502:	f9 2f       	mov	r31, r25
    2504:	96 e9       	ldi	r25, 0x96	; 150
    2506:	bb 27       	eor	r27, r27
    2508:	93 95       	inc	r25
    250a:	f6 95       	lsr	r31
    250c:	87 95       	ror	r24
    250e:	77 95       	ror	r23
    2510:	67 95       	ror	r22
    2512:	b7 95       	ror	r27
    2514:	f1 11       	cpse	r31, r1
    2516:	f8 cf       	rjmp	.-16     	; 0x2508 <__floatsisf+0x1c>
    2518:	fa f4       	brpl	.+62     	; 0x2558 <__floatsisf+0x6c>
    251a:	bb 0f       	add	r27, r27
    251c:	11 f4       	brne	.+4      	; 0x2522 <__floatsisf+0x36>
    251e:	60 ff       	sbrs	r22, 0
    2520:	1b c0       	rjmp	.+54     	; 0x2558 <__floatsisf+0x6c>
    2522:	6f 5f       	subi	r22, 0xFF	; 255
    2524:	7f 4f       	sbci	r23, 0xFF	; 255
    2526:	8f 4f       	sbci	r24, 0xFF	; 255
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	16 c0       	rjmp	.+44     	; 0x2558 <__floatsisf+0x6c>
    252c:	88 23       	and	r24, r24
    252e:	11 f0       	breq	.+4      	; 0x2534 <__floatsisf+0x48>
    2530:	96 e9       	ldi	r25, 0x96	; 150
    2532:	11 c0       	rjmp	.+34     	; 0x2556 <__floatsisf+0x6a>
    2534:	77 23       	and	r23, r23
    2536:	21 f0       	breq	.+8      	; 0x2540 <__floatsisf+0x54>
    2538:	9e e8       	ldi	r25, 0x8E	; 142
    253a:	87 2f       	mov	r24, r23
    253c:	76 2f       	mov	r23, r22
    253e:	05 c0       	rjmp	.+10     	; 0x254a <__floatsisf+0x5e>
    2540:	66 23       	and	r22, r22
    2542:	71 f0       	breq	.+28     	; 0x2560 <__floatsisf+0x74>
    2544:	96 e8       	ldi	r25, 0x86	; 134
    2546:	86 2f       	mov	r24, r22
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	2a f0       	brmi	.+10     	; 0x2558 <__floatsisf+0x6c>
    254e:	9a 95       	dec	r25
    2550:	66 0f       	add	r22, r22
    2552:	77 1f       	adc	r23, r23
    2554:	88 1f       	adc	r24, r24
    2556:	da f7       	brpl	.-10     	; 0x254e <__floatsisf+0x62>
    2558:	88 0f       	add	r24, r24
    255a:	96 95       	lsr	r25
    255c:	87 95       	ror	r24
    255e:	97 f9       	bld	r25, 7
    2560:	08 95       	ret

00002562 <__floatundisf>:
    2562:	e8 94       	clt

00002564 <__fp_di2sf>:
    2564:	f9 2f       	mov	r31, r25
    2566:	96 eb       	ldi	r25, 0xB6	; 182
    2568:	ff 23       	and	r31, r31
    256a:	81 f0       	breq	.+32     	; 0x258c <__fp_di2sf+0x28>
    256c:	12 16       	cp	r1, r18
    256e:	13 06       	cpc	r1, r19
    2570:	14 06       	cpc	r1, r20
    2572:	44 0b       	sbc	r20, r20
    2574:	93 95       	inc	r25
    2576:	f6 95       	lsr	r31
    2578:	87 95       	ror	r24
    257a:	77 95       	ror	r23
    257c:	67 95       	ror	r22
    257e:	57 95       	ror	r21
    2580:	40 40       	sbci	r20, 0x00	; 0
    2582:	ff 23       	and	r31, r31
    2584:	b9 f7       	brne	.-18     	; 0x2574 <__fp_di2sf+0x10>
    2586:	1b c0       	rjmp	.+54     	; 0x25be <__fp_di2sf+0x5a>
    2588:	99 27       	eor	r25, r25
    258a:	08 95       	ret
    258c:	88 23       	and	r24, r24
    258e:	51 f4       	brne	.+20     	; 0x25a4 <__fp_di2sf+0x40>
    2590:	98 50       	subi	r25, 0x08	; 8
    2592:	d2 f7       	brpl	.-12     	; 0x2588 <__fp_di2sf+0x24>
    2594:	87 2b       	or	r24, r23
    2596:	76 2f       	mov	r23, r22
    2598:	65 2f       	mov	r22, r21
    259a:	54 2f       	mov	r21, r20
    259c:	43 2f       	mov	r20, r19
    259e:	32 2f       	mov	r19, r18
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	b1 f3       	breq	.-20     	; 0x2590 <__fp_di2sf+0x2c>
    25a4:	12 16       	cp	r1, r18
    25a6:	13 06       	cpc	r1, r19
    25a8:	14 06       	cpc	r1, r20
    25aa:	44 0b       	sbc	r20, r20
    25ac:	88 23       	and	r24, r24
    25ae:	3a f0       	brmi	.+14     	; 0x25be <__fp_di2sf+0x5a>
    25b0:	9a 95       	dec	r25
    25b2:	44 0f       	add	r20, r20
    25b4:	55 1f       	adc	r21, r21
    25b6:	66 1f       	adc	r22, r22
    25b8:	77 1f       	adc	r23, r23
    25ba:	88 1f       	adc	r24, r24
    25bc:	ca f7       	brpl	.-14     	; 0x25b0 <__fp_di2sf+0x4c>
    25be:	55 23       	and	r21, r21
    25c0:	4a f4       	brpl	.+18     	; 0x25d4 <__fp_di2sf+0x70>
    25c2:	44 0f       	add	r20, r20
    25c4:	55 1f       	adc	r21, r21
    25c6:	11 f4       	brne	.+4      	; 0x25cc <__fp_di2sf+0x68>
    25c8:	60 ff       	sbrs	r22, 0
    25ca:	04 c0       	rjmp	.+8      	; 0x25d4 <__fp_di2sf+0x70>
    25cc:	6f 5f       	subi	r22, 0xFF	; 255
    25ce:	7f 4f       	sbci	r23, 0xFF	; 255
    25d0:	8f 4f       	sbci	r24, 0xFF	; 255
    25d2:	9f 4f       	sbci	r25, 0xFF	; 255
    25d4:	88 0f       	add	r24, r24
    25d6:	96 95       	lsr	r25
    25d8:	87 95       	ror	r24
    25da:	97 f9       	bld	r25, 7
    25dc:	08 95       	ret

000025de <__fp_cmp>:
    25de:	99 0f       	add	r25, r25
    25e0:	00 08       	sbc	r0, r0
    25e2:	55 0f       	add	r21, r21
    25e4:	aa 0b       	sbc	r26, r26
    25e6:	e0 e8       	ldi	r30, 0x80	; 128
    25e8:	fe ef       	ldi	r31, 0xFE	; 254
    25ea:	16 16       	cp	r1, r22
    25ec:	17 06       	cpc	r1, r23
    25ee:	e8 07       	cpc	r30, r24
    25f0:	f9 07       	cpc	r31, r25
    25f2:	c0 f0       	brcs	.+48     	; 0x2624 <__fp_cmp+0x46>
    25f4:	12 16       	cp	r1, r18
    25f6:	13 06       	cpc	r1, r19
    25f8:	e4 07       	cpc	r30, r20
    25fa:	f5 07       	cpc	r31, r21
    25fc:	98 f0       	brcs	.+38     	; 0x2624 <__fp_cmp+0x46>
    25fe:	62 1b       	sub	r22, r18
    2600:	73 0b       	sbc	r23, r19
    2602:	84 0b       	sbc	r24, r20
    2604:	95 0b       	sbc	r25, r21
    2606:	39 f4       	brne	.+14     	; 0x2616 <__fp_cmp+0x38>
    2608:	0a 26       	eor	r0, r26
    260a:	61 f0       	breq	.+24     	; 0x2624 <__fp_cmp+0x46>
    260c:	23 2b       	or	r18, r19
    260e:	24 2b       	or	r18, r20
    2610:	25 2b       	or	r18, r21
    2612:	21 f4       	brne	.+8      	; 0x261c <__fp_cmp+0x3e>
    2614:	08 95       	ret
    2616:	0a 26       	eor	r0, r26
    2618:	09 f4       	brne	.+2      	; 0x261c <__fp_cmp+0x3e>
    261a:	a1 40       	sbci	r26, 0x01	; 1
    261c:	a6 95       	lsr	r26
    261e:	8f ef       	ldi	r24, 0xFF	; 255
    2620:	81 1d       	adc	r24, r1
    2622:	81 1d       	adc	r24, r1
    2624:	08 95       	ret

00002626 <__fp_inf>:
    2626:	97 f9       	bld	r25, 7
    2628:	9f 67       	ori	r25, 0x7F	; 127
    262a:	80 e8       	ldi	r24, 0x80	; 128
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	08 95       	ret

00002632 <__fp_nan>:
    2632:	9f ef       	ldi	r25, 0xFF	; 255
    2634:	80 ec       	ldi	r24, 0xC0	; 192
    2636:	08 95       	ret

00002638 <__fp_negdi>:
    2638:	90 95       	com	r25
    263a:	80 95       	com	r24
    263c:	70 95       	com	r23
    263e:	60 95       	com	r22
    2640:	50 95       	com	r21
    2642:	40 95       	com	r20
    2644:	30 95       	com	r19
    2646:	21 95       	neg	r18
    2648:	3f 4f       	sbci	r19, 0xFF	; 255
    264a:	4f 4f       	sbci	r20, 0xFF	; 255
    264c:	5f 4f       	sbci	r21, 0xFF	; 255
    264e:	6f 4f       	sbci	r22, 0xFF	; 255
    2650:	7f 4f       	sbci	r23, 0xFF	; 255
    2652:	8f 4f       	sbci	r24, 0xFF	; 255
    2654:	9f 4f       	sbci	r25, 0xFF	; 255
    2656:	08 95       	ret

00002658 <__fp_pscA>:
    2658:	00 24       	eor	r0, r0
    265a:	0a 94       	dec	r0
    265c:	16 16       	cp	r1, r22
    265e:	17 06       	cpc	r1, r23
    2660:	18 06       	cpc	r1, r24
    2662:	09 06       	cpc	r0, r25
    2664:	08 95       	ret

00002666 <__fp_pscB>:
    2666:	00 24       	eor	r0, r0
    2668:	0a 94       	dec	r0
    266a:	12 16       	cp	r1, r18
    266c:	13 06       	cpc	r1, r19
    266e:	14 06       	cpc	r1, r20
    2670:	05 06       	cpc	r0, r21
    2672:	08 95       	ret

00002674 <__fp_round>:
    2674:	09 2e       	mov	r0, r25
    2676:	03 94       	inc	r0
    2678:	00 0c       	add	r0, r0
    267a:	11 f4       	brne	.+4      	; 0x2680 <__fp_round+0xc>
    267c:	88 23       	and	r24, r24
    267e:	52 f0       	brmi	.+20     	; 0x2694 <__fp_round+0x20>
    2680:	bb 0f       	add	r27, r27
    2682:	40 f4       	brcc	.+16     	; 0x2694 <__fp_round+0x20>
    2684:	bf 2b       	or	r27, r31
    2686:	11 f4       	brne	.+4      	; 0x268c <__fp_round+0x18>
    2688:	60 ff       	sbrs	r22, 0
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <__fp_round+0x20>
    268c:	6f 5f       	subi	r22, 0xFF	; 255
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	8f 4f       	sbci	r24, 0xFF	; 255
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	08 95       	ret

00002696 <__fp_split3>:
    2696:	57 fd       	sbrc	r21, 7
    2698:	90 58       	subi	r25, 0x80	; 128
    269a:	44 0f       	add	r20, r20
    269c:	55 1f       	adc	r21, r21
    269e:	59 f0       	breq	.+22     	; 0x26b6 <__fp_splitA+0x10>
    26a0:	5f 3f       	cpi	r21, 0xFF	; 255
    26a2:	71 f0       	breq	.+28     	; 0x26c0 <__fp_splitA+0x1a>
    26a4:	47 95       	ror	r20

000026a6 <__fp_splitA>:
    26a6:	88 0f       	add	r24, r24
    26a8:	97 fb       	bst	r25, 7
    26aa:	99 1f       	adc	r25, r25
    26ac:	61 f0       	breq	.+24     	; 0x26c6 <__fp_splitA+0x20>
    26ae:	9f 3f       	cpi	r25, 0xFF	; 255
    26b0:	79 f0       	breq	.+30     	; 0x26d0 <__fp_splitA+0x2a>
    26b2:	87 95       	ror	r24
    26b4:	08 95       	ret
    26b6:	12 16       	cp	r1, r18
    26b8:	13 06       	cpc	r1, r19
    26ba:	14 06       	cpc	r1, r20
    26bc:	55 1f       	adc	r21, r21
    26be:	f2 cf       	rjmp	.-28     	; 0x26a4 <__fp_split3+0xe>
    26c0:	46 95       	lsr	r20
    26c2:	f1 df       	rcall	.-30     	; 0x26a6 <__fp_splitA>
    26c4:	08 c0       	rjmp	.+16     	; 0x26d6 <__fp_splitA+0x30>
    26c6:	16 16       	cp	r1, r22
    26c8:	17 06       	cpc	r1, r23
    26ca:	18 06       	cpc	r1, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	f1 cf       	rjmp	.-30     	; 0x26b2 <__fp_splitA+0xc>
    26d0:	86 95       	lsr	r24
    26d2:	71 05       	cpc	r23, r1
    26d4:	61 05       	cpc	r22, r1
    26d6:	08 94       	sec
    26d8:	08 95       	ret

000026da <__fp_zero>:
    26da:	e8 94       	clt

000026dc <__fp_szero>:
    26dc:	bb 27       	eor	r27, r27
    26de:	66 27       	eor	r22, r22
    26e0:	77 27       	eor	r23, r23
    26e2:	cb 01       	movw	r24, r22
    26e4:	97 f9       	bld	r25, 7
    26e6:	08 95       	ret

000026e8 <__gesf2>:
    26e8:	7a df       	rcall	.-268    	; 0x25de <__fp_cmp>
    26ea:	08 f4       	brcc	.+2      	; 0x26ee <__gesf2+0x6>
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	08 95       	ret

000026f0 <__mulsf3>:
    26f0:	0b d0       	rcall	.+22     	; 0x2708 <__mulsf3x>
    26f2:	c0 cf       	rjmp	.-128    	; 0x2674 <__fp_round>
    26f4:	b1 df       	rcall	.-158    	; 0x2658 <__fp_pscA>
    26f6:	28 f0       	brcs	.+10     	; 0x2702 <__mulsf3+0x12>
    26f8:	b6 df       	rcall	.-148    	; 0x2666 <__fp_pscB>
    26fa:	18 f0       	brcs	.+6      	; 0x2702 <__mulsf3+0x12>
    26fc:	95 23       	and	r25, r21
    26fe:	09 f0       	breq	.+2      	; 0x2702 <__mulsf3+0x12>
    2700:	92 cf       	rjmp	.-220    	; 0x2626 <__fp_inf>
    2702:	97 cf       	rjmp	.-210    	; 0x2632 <__fp_nan>
    2704:	11 24       	eor	r1, r1
    2706:	ea cf       	rjmp	.-44     	; 0x26dc <__fp_szero>

00002708 <__mulsf3x>:
    2708:	c6 df       	rcall	.-116    	; 0x2696 <__fp_split3>
    270a:	a0 f3       	brcs	.-24     	; 0x26f4 <__mulsf3+0x4>

0000270c <__mulsf3_pse>:
    270c:	95 9f       	mul	r25, r21
    270e:	d1 f3       	breq	.-12     	; 0x2704 <__mulsf3+0x14>
    2710:	95 0f       	add	r25, r21
    2712:	50 e0       	ldi	r21, 0x00	; 0
    2714:	55 1f       	adc	r21, r21
    2716:	62 9f       	mul	r22, r18
    2718:	f0 01       	movw	r30, r0
    271a:	72 9f       	mul	r23, r18
    271c:	bb 27       	eor	r27, r27
    271e:	f0 0d       	add	r31, r0
    2720:	b1 1d       	adc	r27, r1
    2722:	63 9f       	mul	r22, r19
    2724:	aa 27       	eor	r26, r26
    2726:	f0 0d       	add	r31, r0
    2728:	b1 1d       	adc	r27, r1
    272a:	aa 1f       	adc	r26, r26
    272c:	64 9f       	mul	r22, r20
    272e:	66 27       	eor	r22, r22
    2730:	b0 0d       	add	r27, r0
    2732:	a1 1d       	adc	r26, r1
    2734:	66 1f       	adc	r22, r22
    2736:	82 9f       	mul	r24, r18
    2738:	22 27       	eor	r18, r18
    273a:	b0 0d       	add	r27, r0
    273c:	a1 1d       	adc	r26, r1
    273e:	62 1f       	adc	r22, r18
    2740:	73 9f       	mul	r23, r19
    2742:	b0 0d       	add	r27, r0
    2744:	a1 1d       	adc	r26, r1
    2746:	62 1f       	adc	r22, r18
    2748:	83 9f       	mul	r24, r19
    274a:	a0 0d       	add	r26, r0
    274c:	61 1d       	adc	r22, r1
    274e:	22 1f       	adc	r18, r18
    2750:	74 9f       	mul	r23, r20
    2752:	33 27       	eor	r19, r19
    2754:	a0 0d       	add	r26, r0
    2756:	61 1d       	adc	r22, r1
    2758:	23 1f       	adc	r18, r19
    275a:	84 9f       	mul	r24, r20
    275c:	60 0d       	add	r22, r0
    275e:	21 1d       	adc	r18, r1
    2760:	82 2f       	mov	r24, r18
    2762:	76 2f       	mov	r23, r22
    2764:	6a 2f       	mov	r22, r26
    2766:	11 24       	eor	r1, r1
    2768:	9f 57       	subi	r25, 0x7F	; 127
    276a:	50 40       	sbci	r21, 0x00	; 0
    276c:	8a f0       	brmi	.+34     	; 0x2790 <__mulsf3_pse+0x84>
    276e:	e1 f0       	breq	.+56     	; 0x27a8 <__mulsf3_pse+0x9c>
    2770:	88 23       	and	r24, r24
    2772:	4a f0       	brmi	.+18     	; 0x2786 <__mulsf3_pse+0x7a>
    2774:	ee 0f       	add	r30, r30
    2776:	ff 1f       	adc	r31, r31
    2778:	bb 1f       	adc	r27, r27
    277a:	66 1f       	adc	r22, r22
    277c:	77 1f       	adc	r23, r23
    277e:	88 1f       	adc	r24, r24
    2780:	91 50       	subi	r25, 0x01	; 1
    2782:	50 40       	sbci	r21, 0x00	; 0
    2784:	a9 f7       	brne	.-22     	; 0x2770 <__mulsf3_pse+0x64>
    2786:	9e 3f       	cpi	r25, 0xFE	; 254
    2788:	51 05       	cpc	r21, r1
    278a:	70 f0       	brcs	.+28     	; 0x27a8 <__mulsf3_pse+0x9c>
    278c:	4c cf       	rjmp	.-360    	; 0x2626 <__fp_inf>
    278e:	a6 cf       	rjmp	.-180    	; 0x26dc <__fp_szero>
    2790:	5f 3f       	cpi	r21, 0xFF	; 255
    2792:	ec f3       	brlt	.-6      	; 0x278e <__mulsf3_pse+0x82>
    2794:	98 3e       	cpi	r25, 0xE8	; 232
    2796:	dc f3       	brlt	.-10     	; 0x278e <__mulsf3_pse+0x82>
    2798:	86 95       	lsr	r24
    279a:	77 95       	ror	r23
    279c:	67 95       	ror	r22
    279e:	b7 95       	ror	r27
    27a0:	f7 95       	ror	r31
    27a2:	e7 95       	ror	r30
    27a4:	9f 5f       	subi	r25, 0xFF	; 255
    27a6:	c1 f7       	brne	.-16     	; 0x2798 <__mulsf3_pse+0x8c>
    27a8:	fe 2b       	or	r31, r30
    27aa:	88 0f       	add	r24, r24
    27ac:	91 1d       	adc	r25, r1
    27ae:	96 95       	lsr	r25
    27b0:	87 95       	ror	r24
    27b2:	97 f9       	bld	r25, 7
    27b4:	08 95       	ret

000027b6 <pow>:
    27b6:	fa 01       	movw	r30, r20
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	30 96       	adiw	r30, 0x00	; 0
    27be:	21 05       	cpc	r18, r1
    27c0:	31 05       	cpc	r19, r1
    27c2:	99 f1       	breq	.+102    	; 0x282a <pow+0x74>
    27c4:	61 15       	cp	r22, r1
    27c6:	71 05       	cpc	r23, r1
    27c8:	61 f4       	brne	.+24     	; 0x27e2 <pow+0x2c>
    27ca:	80 38       	cpi	r24, 0x80	; 128
    27cc:	bf e3       	ldi	r27, 0x3F	; 63
    27ce:	9b 07       	cpc	r25, r27
    27d0:	49 f1       	breq	.+82     	; 0x2824 <pow+0x6e>
    27d2:	68 94       	set
    27d4:	90 38       	cpi	r25, 0x80	; 128
    27d6:	81 05       	cpc	r24, r1
    27d8:	61 f0       	breq	.+24     	; 0x27f2 <pow+0x3c>
    27da:	80 38       	cpi	r24, 0x80	; 128
    27dc:	bf ef       	ldi	r27, 0xFF	; 255
    27de:	9b 07       	cpc	r25, r27
    27e0:	41 f0       	breq	.+16     	; 0x27f2 <pow+0x3c>
    27e2:	99 23       	and	r25, r25
    27e4:	42 f5       	brpl	.+80     	; 0x2836 <pow+0x80>
    27e6:	ff 3f       	cpi	r31, 0xFF	; 255
    27e8:	e1 05       	cpc	r30, r1
    27ea:	31 05       	cpc	r19, r1
    27ec:	21 05       	cpc	r18, r1
    27ee:	11 f1       	breq	.+68     	; 0x2834 <pow+0x7e>
    27f0:	e8 94       	clt
    27f2:	08 94       	sec
    27f4:	e7 95       	ror	r30
    27f6:	d9 01       	movw	r26, r18
    27f8:	aa 23       	and	r26, r26
    27fa:	29 f4       	brne	.+10     	; 0x2806 <pow+0x50>
    27fc:	ab 2f       	mov	r26, r27
    27fe:	be 2f       	mov	r27, r30
    2800:	f8 5f       	subi	r31, 0xF8	; 248
    2802:	d0 f3       	brcs	.-12     	; 0x27f8 <pow+0x42>
    2804:	10 c0       	rjmp	.+32     	; 0x2826 <pow+0x70>
    2806:	ff 5f       	subi	r31, 0xFF	; 255
    2808:	70 f4       	brcc	.+28     	; 0x2826 <pow+0x70>
    280a:	a6 95       	lsr	r26
    280c:	e0 f7       	brcc	.-8      	; 0x2806 <pow+0x50>
    280e:	f7 39       	cpi	r31, 0x97	; 151
    2810:	50 f0       	brcs	.+20     	; 0x2826 <pow+0x70>
    2812:	19 f0       	breq	.+6      	; 0x281a <pow+0x64>
    2814:	ff 3a       	cpi	r31, 0xAF	; 175
    2816:	38 f4       	brcc	.+14     	; 0x2826 <pow+0x70>
    2818:	9f 77       	andi	r25, 0x7F	; 127
    281a:	9f 93       	push	r25
    281c:	0c d0       	rcall	.+24     	; 0x2836 <pow+0x80>
    281e:	0f 90       	pop	r0
    2820:	07 fc       	sbrc	r0, 7
    2822:	90 58       	subi	r25, 0x80	; 128
    2824:	08 95       	ret
    2826:	3e f0       	brts	.+14     	; 0x2836 <pow+0x80>
    2828:	04 cf       	rjmp	.-504    	; 0x2632 <__fp_nan>
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	80 e8       	ldi	r24, 0x80	; 128
    2830:	9f e3       	ldi	r25, 0x3F	; 63
    2832:	08 95       	ret
    2834:	4f e7       	ldi	r20, 0x7F	; 127
    2836:	9f 77       	andi	r25, 0x7F	; 127
    2838:	5f 93       	push	r21
    283a:	4f 93       	push	r20
    283c:	3f 93       	push	r19
    283e:	2f 93       	push	r18
    2840:	9e d0       	rcall	.+316    	; 0x297e <log>
    2842:	2f 91       	pop	r18
    2844:	3f 91       	pop	r19
    2846:	4f 91       	pop	r20
    2848:	5f 91       	pop	r21
    284a:	52 df       	rcall	.-348    	; 0x26f0 <__mulsf3>
    284c:	05 c0       	rjmp	.+10     	; 0x2858 <exp>
    284e:	19 f4       	brne	.+6      	; 0x2856 <pow+0xa0>
    2850:	0e f0       	brts	.+2      	; 0x2854 <pow+0x9e>
    2852:	e9 ce       	rjmp	.-558    	; 0x2626 <__fp_inf>
    2854:	42 cf       	rjmp	.-380    	; 0x26da <__fp_zero>
    2856:	ed ce       	rjmp	.-550    	; 0x2632 <__fp_nan>

00002858 <exp>:
    2858:	26 df       	rcall	.-436    	; 0x26a6 <__fp_splitA>
    285a:	c8 f3       	brcs	.-14     	; 0x284e <pow+0x98>
    285c:	96 38       	cpi	r25, 0x86	; 134
    285e:	c0 f7       	brcc	.-16     	; 0x2850 <pow+0x9a>
    2860:	07 f8       	bld	r0, 7
    2862:	0f 92       	push	r0
    2864:	e8 94       	clt
    2866:	2b e3       	ldi	r18, 0x3B	; 59
    2868:	3a ea       	ldi	r19, 0xAA	; 170
    286a:	48 eb       	ldi	r20, 0xB8	; 184
    286c:	5f e7       	ldi	r21, 0x7F	; 127
    286e:	4e df       	rcall	.-356    	; 0x270c <__mulsf3_pse>
    2870:	0f 92       	push	r0
    2872:	0f 92       	push	r0
    2874:	0f 92       	push	r0
    2876:	4d b7       	in	r20, 0x3d	; 61
    2878:	5e b7       	in	r21, 0x3e	; 62
    287a:	0f 92       	push	r0
    287c:	c0 d0       	rcall	.+384    	; 0x29fe <modf>
    287e:	ec ef       	ldi	r30, 0xFC	; 252
    2880:	f1 e0       	ldi	r31, 0x01	; 1
    2882:	16 d0       	rcall	.+44     	; 0x28b0 <__fp_powser>
    2884:	4f 91       	pop	r20
    2886:	5f 91       	pop	r21
    2888:	ef 91       	pop	r30
    288a:	ff 91       	pop	r31
    288c:	e5 95       	asr	r30
    288e:	ee 1f       	adc	r30, r30
    2890:	ff 1f       	adc	r31, r31
    2892:	49 f0       	breq	.+18     	; 0x28a6 <exp+0x4e>
    2894:	fe 57       	subi	r31, 0x7E	; 126
    2896:	e0 68       	ori	r30, 0x80	; 128
    2898:	44 27       	eor	r20, r20
    289a:	ee 0f       	add	r30, r30
    289c:	44 1f       	adc	r20, r20
    289e:	fa 95       	dec	r31
    28a0:	e1 f7       	brne	.-8      	; 0x289a <exp+0x42>
    28a2:	41 95       	neg	r20
    28a4:	55 0b       	sbc	r21, r21
    28a6:	32 d0       	rcall	.+100    	; 0x290c <ldexp>
    28a8:	0f 90       	pop	r0
    28aa:	07 fe       	sbrs	r0, 7
    28ac:	26 c0       	rjmp	.+76     	; 0x28fa <inverse>
    28ae:	08 95       	ret

000028b0 <__fp_powser>:
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	1f 93       	push	r17
    28b6:	0f 93       	push	r16
    28b8:	ff 92       	push	r15
    28ba:	ef 92       	push	r14
    28bc:	df 92       	push	r13
    28be:	7b 01       	movw	r14, r22
    28c0:	8c 01       	movw	r16, r24
    28c2:	68 94       	set
    28c4:	05 c0       	rjmp	.+10     	; 0x28d0 <__fp_powser+0x20>
    28c6:	da 2e       	mov	r13, r26
    28c8:	ef 01       	movw	r28, r30
    28ca:	1e df       	rcall	.-452    	; 0x2708 <__mulsf3x>
    28cc:	fe 01       	movw	r30, r28
    28ce:	e8 94       	clt
    28d0:	a5 91       	lpm	r26, Z+
    28d2:	25 91       	lpm	r18, Z+
    28d4:	35 91       	lpm	r19, Z+
    28d6:	45 91       	lpm	r20, Z+
    28d8:	55 91       	lpm	r21, Z+
    28da:	ae f3       	brts	.-22     	; 0x28c6 <__fp_powser+0x16>
    28dc:	ef 01       	movw	r28, r30
    28de:	da dc       	rcall	.-1612   	; 0x2294 <__addsf3x>
    28e0:	fe 01       	movw	r30, r28
    28e2:	97 01       	movw	r18, r14
    28e4:	a8 01       	movw	r20, r16
    28e6:	da 94       	dec	r13
    28e8:	79 f7       	brne	.-34     	; 0x28c8 <__fp_powser+0x18>
    28ea:	df 90       	pop	r13
    28ec:	ef 90       	pop	r14
    28ee:	ff 90       	pop	r15
    28f0:	0f 91       	pop	r16
    28f2:	1f 91       	pop	r17
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <inverse>:
    28fa:	9b 01       	movw	r18, r22
    28fc:	ac 01       	movw	r20, r24
    28fe:	60 e0       	ldi	r22, 0x00	; 0
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	80 e8       	ldi	r24, 0x80	; 128
    2904:	9f e3       	ldi	r25, 0x3F	; 63
    2906:	1d cd       	rjmp	.-1478   	; 0x2342 <__divsf3>
    2908:	8e ce       	rjmp	.-740    	; 0x2626 <__fp_inf>
    290a:	ac c0       	rjmp	.+344    	; 0x2a64 <__fp_mpack>

0000290c <ldexp>:
    290c:	cc de       	rcall	.-616    	; 0x26a6 <__fp_splitA>
    290e:	e8 f3       	brcs	.-6      	; 0x290a <inverse+0x10>
    2910:	99 23       	and	r25, r25
    2912:	d9 f3       	breq	.-10     	; 0x290a <inverse+0x10>
    2914:	94 0f       	add	r25, r20
    2916:	51 1d       	adc	r21, r1
    2918:	bb f3       	brvs	.-18     	; 0x2908 <inverse+0xe>
    291a:	91 50       	subi	r25, 0x01	; 1
    291c:	50 40       	sbci	r21, 0x00	; 0
    291e:	94 f0       	brlt	.+36     	; 0x2944 <ldexp+0x38>
    2920:	59 f0       	breq	.+22     	; 0x2938 <ldexp+0x2c>
    2922:	88 23       	and	r24, r24
    2924:	32 f0       	brmi	.+12     	; 0x2932 <ldexp+0x26>
    2926:	66 0f       	add	r22, r22
    2928:	77 1f       	adc	r23, r23
    292a:	88 1f       	adc	r24, r24
    292c:	91 50       	subi	r25, 0x01	; 1
    292e:	50 40       	sbci	r21, 0x00	; 0
    2930:	c1 f7       	brne	.-16     	; 0x2922 <ldexp+0x16>
    2932:	9e 3f       	cpi	r25, 0xFE	; 254
    2934:	51 05       	cpc	r21, r1
    2936:	44 f7       	brge	.-48     	; 0x2908 <inverse+0xe>
    2938:	88 0f       	add	r24, r24
    293a:	91 1d       	adc	r25, r1
    293c:	96 95       	lsr	r25
    293e:	87 95       	ror	r24
    2940:	97 f9       	bld	r25, 7
    2942:	08 95       	ret
    2944:	5f 3f       	cpi	r21, 0xFF	; 255
    2946:	ac f0       	brlt	.+42     	; 0x2972 <ldexp+0x66>
    2948:	98 3e       	cpi	r25, 0xE8	; 232
    294a:	9c f0       	brlt	.+38     	; 0x2972 <ldexp+0x66>
    294c:	bb 27       	eor	r27, r27
    294e:	86 95       	lsr	r24
    2950:	77 95       	ror	r23
    2952:	67 95       	ror	r22
    2954:	b7 95       	ror	r27
    2956:	08 f4       	brcc	.+2      	; 0x295a <ldexp+0x4e>
    2958:	b1 60       	ori	r27, 0x01	; 1
    295a:	93 95       	inc	r25
    295c:	c1 f7       	brne	.-16     	; 0x294e <ldexp+0x42>
    295e:	bb 0f       	add	r27, r27
    2960:	58 f7       	brcc	.-42     	; 0x2938 <ldexp+0x2c>
    2962:	11 f4       	brne	.+4      	; 0x2968 <ldexp+0x5c>
    2964:	60 ff       	sbrs	r22, 0
    2966:	e8 cf       	rjmp	.-48     	; 0x2938 <ldexp+0x2c>
    2968:	6f 5f       	subi	r22, 0xFF	; 255
    296a:	7f 4f       	sbci	r23, 0xFF	; 255
    296c:	8f 4f       	sbci	r24, 0xFF	; 255
    296e:	9f 4f       	sbci	r25, 0xFF	; 255
    2970:	e3 cf       	rjmp	.-58     	; 0x2938 <ldexp+0x2c>
    2972:	b4 ce       	rjmp	.-664    	; 0x26dc <__fp_szero>
    2974:	0e f0       	brts	.+2      	; 0x2978 <ldexp+0x6c>
    2976:	76 c0       	rjmp	.+236    	; 0x2a64 <__fp_mpack>
    2978:	5c ce       	rjmp	.-840    	; 0x2632 <__fp_nan>
    297a:	68 94       	set
    297c:	54 ce       	rjmp	.-856    	; 0x2626 <__fp_inf>

0000297e <log>:
    297e:	93 de       	rcall	.-730    	; 0x26a6 <__fp_splitA>
    2980:	c8 f3       	brcs	.-14     	; 0x2974 <ldexp+0x68>
    2982:	99 23       	and	r25, r25
    2984:	d1 f3       	breq	.-12     	; 0x297a <ldexp+0x6e>
    2986:	c6 f3       	brts	.-16     	; 0x2978 <ldexp+0x6c>
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	1f 93       	push	r17
    298e:	0f 93       	push	r16
    2990:	ff 92       	push	r15
    2992:	c9 2f       	mov	r28, r25
    2994:	dd 27       	eor	r29, r29
    2996:	88 23       	and	r24, r24
    2998:	2a f0       	brmi	.+10     	; 0x29a4 <log+0x26>
    299a:	21 97       	sbiw	r28, 0x01	; 1
    299c:	66 0f       	add	r22, r22
    299e:	77 1f       	adc	r23, r23
    29a0:	88 1f       	adc	r24, r24
    29a2:	da f7       	brpl	.-10     	; 0x299a <log+0x1c>
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f eb       	ldi	r21, 0xBF	; 191
    29ac:	9f e3       	ldi	r25, 0x3F	; 63
    29ae:	88 39       	cpi	r24, 0x98	; 152
    29b0:	20 f0       	brcs	.+8      	; 0x29ba <log+0x3c>
    29b2:	80 3e       	cpi	r24, 0xE0	; 224
    29b4:	30 f0       	brcs	.+12     	; 0x29c2 <log+0x44>
    29b6:	21 96       	adiw	r28, 0x01	; 1
    29b8:	8f 77       	andi	r24, 0x7F	; 127
    29ba:	5b dc       	rcall	.-1866   	; 0x2272 <__addsf3>
    29bc:	e4 e2       	ldi	r30, 0x24	; 36
    29be:	f2 e0       	ldi	r31, 0x02	; 2
    29c0:	03 c0       	rjmp	.+6      	; 0x29c8 <log+0x4a>
    29c2:	57 dc       	rcall	.-1874   	; 0x2272 <__addsf3>
    29c4:	e1 e5       	ldi	r30, 0x51	; 81
    29c6:	f2 e0       	ldi	r31, 0x02	; 2
    29c8:	73 df       	rcall	.-282    	; 0x28b0 <__fp_powser>
    29ca:	8b 01       	movw	r16, r22
    29cc:	be 01       	movw	r22, r28
    29ce:	ec 01       	movw	r28, r24
    29d0:	fb 2e       	mov	r15, r27
    29d2:	6f 57       	subi	r22, 0x7F	; 127
    29d4:	71 09       	sbc	r23, r1
    29d6:	75 95       	asr	r23
    29d8:	77 1f       	adc	r23, r23
    29da:	88 0b       	sbc	r24, r24
    29dc:	99 0b       	sbc	r25, r25
    29de:	86 dd       	rcall	.-1268   	; 0x24ec <__floatsisf>
    29e0:	28 e1       	ldi	r18, 0x18	; 24
    29e2:	32 e7       	ldi	r19, 0x72	; 114
    29e4:	41 e3       	ldi	r20, 0x31	; 49
    29e6:	5f e3       	ldi	r21, 0x3F	; 63
    29e8:	8f de       	rcall	.-738    	; 0x2708 <__mulsf3x>
    29ea:	af 2d       	mov	r26, r15
    29ec:	98 01       	movw	r18, r16
    29ee:	ae 01       	movw	r20, r28
    29f0:	ff 90       	pop	r15
    29f2:	0f 91       	pop	r16
    29f4:	1f 91       	pop	r17
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	4c dc       	rcall	.-1896   	; 0x2294 <__addsf3x>
    29fc:	3b ce       	rjmp	.-906    	; 0x2674 <__fp_round>

000029fe <modf>:
    29fe:	fa 01       	movw	r30, r20
    2a00:	dc 01       	movw	r26, r24
    2a02:	aa 0f       	add	r26, r26
    2a04:	bb 1f       	adc	r27, r27
    2a06:	9b 01       	movw	r18, r22
    2a08:	ac 01       	movw	r20, r24
    2a0a:	bf 57       	subi	r27, 0x7F	; 127
    2a0c:	28 f4       	brcc	.+10     	; 0x2a18 <modf+0x1a>
    2a0e:	22 27       	eor	r18, r18
    2a10:	33 27       	eor	r19, r19
    2a12:	44 27       	eor	r20, r20
    2a14:	50 78       	andi	r21, 0x80	; 128
    2a16:	1f c0       	rjmp	.+62     	; 0x2a56 <modf+0x58>
    2a18:	b7 51       	subi	r27, 0x17	; 23
    2a1a:	88 f4       	brcc	.+34     	; 0x2a3e <modf+0x40>
    2a1c:	ab 2f       	mov	r26, r27
    2a1e:	00 24       	eor	r0, r0
    2a20:	46 95       	lsr	r20
    2a22:	37 95       	ror	r19
    2a24:	27 95       	ror	r18
    2a26:	01 1c       	adc	r0, r1
    2a28:	a3 95       	inc	r26
    2a2a:	d2 f3       	brmi	.-12     	; 0x2a20 <modf+0x22>
    2a2c:	00 20       	and	r0, r0
    2a2e:	69 f0       	breq	.+26     	; 0x2a4a <modf+0x4c>
    2a30:	22 0f       	add	r18, r18
    2a32:	33 1f       	adc	r19, r19
    2a34:	44 1f       	adc	r20, r20
    2a36:	b3 95       	inc	r27
    2a38:	da f3       	brmi	.-10     	; 0x2a30 <modf+0x32>
    2a3a:	0d d0       	rcall	.+26     	; 0x2a56 <modf+0x58>
    2a3c:	19 cc       	rjmp	.-1998   	; 0x2270 <__subsf3>
    2a3e:	61 30       	cpi	r22, 0x01	; 1
    2a40:	71 05       	cpc	r23, r1
    2a42:	a0 e8       	ldi	r26, 0x80	; 128
    2a44:	8a 07       	cpc	r24, r26
    2a46:	b9 46       	sbci	r27, 0x69	; 105
    2a48:	30 f4       	brcc	.+12     	; 0x2a56 <modf+0x58>
    2a4a:	9b 01       	movw	r18, r22
    2a4c:	ac 01       	movw	r20, r24
    2a4e:	66 27       	eor	r22, r22
    2a50:	77 27       	eor	r23, r23
    2a52:	88 27       	eor	r24, r24
    2a54:	90 78       	andi	r25, 0x80	; 128
    2a56:	30 96       	adiw	r30, 0x00	; 0
    2a58:	21 f0       	breq	.+8      	; 0x2a62 <modf+0x64>
    2a5a:	20 83       	st	Z, r18
    2a5c:	31 83       	std	Z+1, r19	; 0x01
    2a5e:	42 83       	std	Z+2, r20	; 0x02
    2a60:	53 83       	std	Z+3, r21	; 0x03
    2a62:	08 95       	ret

00002a64 <__fp_mpack>:
    2a64:	9f 3f       	cpi	r25, 0xFF	; 255
    2a66:	31 f0       	breq	.+12     	; 0x2a74 <__fp_mpack_finite+0xc>

00002a68 <__fp_mpack_finite>:
    2a68:	91 50       	subi	r25, 0x01	; 1
    2a6a:	20 f4       	brcc	.+8      	; 0x2a74 <__fp_mpack_finite+0xc>
    2a6c:	87 95       	ror	r24
    2a6e:	77 95       	ror	r23
    2a70:	67 95       	ror	r22
    2a72:	b7 95       	ror	r27
    2a74:	88 0f       	add	r24, r24
    2a76:	91 1d       	adc	r25, r1
    2a78:	96 95       	lsr	r25
    2a7a:	87 95       	ror	r24
    2a7c:	97 f9       	bld	r25, 7
    2a7e:	08 95       	ret

00002a80 <__mulsi3>:
    2a80:	db 01       	movw	r26, r22
    2a82:	8f 93       	push	r24
    2a84:	9f 93       	push	r25
    2a86:	70 d0       	rcall	.+224    	; 0x2b68 <__muluhisi3>
    2a88:	bf 91       	pop	r27
    2a8a:	af 91       	pop	r26
    2a8c:	a2 9f       	mul	r26, r18
    2a8e:	80 0d       	add	r24, r0
    2a90:	91 1d       	adc	r25, r1
    2a92:	a3 9f       	mul	r26, r19
    2a94:	90 0d       	add	r25, r0
    2a96:	b2 9f       	mul	r27, r18
    2a98:	90 0d       	add	r25, r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	08 95       	ret

00002a9e <__udivmodhi4>:
    2a9e:	aa 1b       	sub	r26, r26
    2aa0:	bb 1b       	sub	r27, r27
    2aa2:	51 e1       	ldi	r21, 0x11	; 17
    2aa4:	07 c0       	rjmp	.+14     	; 0x2ab4 <__udivmodhi4_ep>

00002aa6 <__udivmodhi4_loop>:
    2aa6:	aa 1f       	adc	r26, r26
    2aa8:	bb 1f       	adc	r27, r27
    2aaa:	a6 17       	cp	r26, r22
    2aac:	b7 07       	cpc	r27, r23
    2aae:	10 f0       	brcs	.+4      	; 0x2ab4 <__udivmodhi4_ep>
    2ab0:	a6 1b       	sub	r26, r22
    2ab2:	b7 0b       	sbc	r27, r23

00002ab4 <__udivmodhi4_ep>:
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	5a 95       	dec	r21
    2aba:	a9 f7       	brne	.-22     	; 0x2aa6 <__udivmodhi4_loop>
    2abc:	80 95       	com	r24
    2abe:	90 95       	com	r25
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	08 95       	ret

00002ac6 <__divmodhi4>:
    2ac6:	97 fb       	bst	r25, 7
    2ac8:	07 2e       	mov	r0, r23
    2aca:	16 f4       	brtc	.+4      	; 0x2ad0 <__divmodhi4+0xa>
    2acc:	00 94       	com	r0
    2ace:	06 d0       	rcall	.+12     	; 0x2adc <__divmodhi4_neg1>
    2ad0:	77 fd       	sbrc	r23, 7
    2ad2:	08 d0       	rcall	.+16     	; 0x2ae4 <__divmodhi4_neg2>
    2ad4:	e4 df       	rcall	.-56     	; 0x2a9e <__udivmodhi4>
    2ad6:	07 fc       	sbrc	r0, 7
    2ad8:	05 d0       	rcall	.+10     	; 0x2ae4 <__divmodhi4_neg2>
    2ada:	3e f4       	brtc	.+14     	; 0x2aea <__divmodhi4_exit>

00002adc <__divmodhi4_neg1>:
    2adc:	90 95       	com	r25
    2ade:	81 95       	neg	r24
    2ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae2:	08 95       	ret

00002ae4 <__divmodhi4_neg2>:
    2ae4:	70 95       	com	r23
    2ae6:	61 95       	neg	r22
    2ae8:	7f 4f       	sbci	r23, 0xFF	; 255

00002aea <__divmodhi4_exit>:
    2aea:	08 95       	ret

00002aec <__udivmodsi4>:
    2aec:	a1 e2       	ldi	r26, 0x21	; 33
    2aee:	1a 2e       	mov	r1, r26
    2af0:	aa 1b       	sub	r26, r26
    2af2:	bb 1b       	sub	r27, r27
    2af4:	fd 01       	movw	r30, r26
    2af6:	0d c0       	rjmp	.+26     	; 0x2b12 <__udivmodsi4_ep>

00002af8 <__udivmodsi4_loop>:
    2af8:	aa 1f       	adc	r26, r26
    2afa:	bb 1f       	adc	r27, r27
    2afc:	ee 1f       	adc	r30, r30
    2afe:	ff 1f       	adc	r31, r31
    2b00:	a2 17       	cp	r26, r18
    2b02:	b3 07       	cpc	r27, r19
    2b04:	e4 07       	cpc	r30, r20
    2b06:	f5 07       	cpc	r31, r21
    2b08:	20 f0       	brcs	.+8      	; 0x2b12 <__udivmodsi4_ep>
    2b0a:	a2 1b       	sub	r26, r18
    2b0c:	b3 0b       	sbc	r27, r19
    2b0e:	e4 0b       	sbc	r30, r20
    2b10:	f5 0b       	sbc	r31, r21

00002b12 <__udivmodsi4_ep>:
    2b12:	66 1f       	adc	r22, r22
    2b14:	77 1f       	adc	r23, r23
    2b16:	88 1f       	adc	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	1a 94       	dec	r1
    2b1c:	69 f7       	brne	.-38     	; 0x2af8 <__udivmodsi4_loop>
    2b1e:	60 95       	com	r22
    2b20:	70 95       	com	r23
    2b22:	80 95       	com	r24
    2b24:	90 95       	com	r25
    2b26:	9b 01       	movw	r18, r22
    2b28:	ac 01       	movw	r20, r24
    2b2a:	bd 01       	movw	r22, r26
    2b2c:	cf 01       	movw	r24, r30
    2b2e:	08 95       	ret

00002b30 <__divmodsi4>:
    2b30:	05 2e       	mov	r0, r21
    2b32:	97 fb       	bst	r25, 7
    2b34:	16 f4       	brtc	.+4      	; 0x2b3a <__divmodsi4+0xa>
    2b36:	00 94       	com	r0
    2b38:	0f d0       	rcall	.+30     	; 0x2b58 <__negsi2>
    2b3a:	57 fd       	sbrc	r21, 7
    2b3c:	05 d0       	rcall	.+10     	; 0x2b48 <__divmodsi4_neg2>
    2b3e:	d6 df       	rcall	.-84     	; 0x2aec <__udivmodsi4>
    2b40:	07 fc       	sbrc	r0, 7
    2b42:	02 d0       	rcall	.+4      	; 0x2b48 <__divmodsi4_neg2>
    2b44:	46 f4       	brtc	.+16     	; 0x2b56 <__divmodsi4_exit>
    2b46:	08 c0       	rjmp	.+16     	; 0x2b58 <__negsi2>

00002b48 <__divmodsi4_neg2>:
    2b48:	50 95       	com	r21
    2b4a:	40 95       	com	r20
    2b4c:	30 95       	com	r19
    2b4e:	21 95       	neg	r18
    2b50:	3f 4f       	sbci	r19, 0xFF	; 255
    2b52:	4f 4f       	sbci	r20, 0xFF	; 255
    2b54:	5f 4f       	sbci	r21, 0xFF	; 255

00002b56 <__divmodsi4_exit>:
    2b56:	08 95       	ret

00002b58 <__negsi2>:
    2b58:	90 95       	com	r25
    2b5a:	80 95       	com	r24
    2b5c:	70 95       	com	r23
    2b5e:	61 95       	neg	r22
    2b60:	7f 4f       	sbci	r23, 0xFF	; 255
    2b62:	8f 4f       	sbci	r24, 0xFF	; 255
    2b64:	9f 4f       	sbci	r25, 0xFF	; 255
    2b66:	08 95       	ret

00002b68 <__muluhisi3>:
    2b68:	27 d0       	rcall	.+78     	; 0x2bb8 <__umulhisi3>
    2b6a:	a5 9f       	mul	r26, r21
    2b6c:	90 0d       	add	r25, r0
    2b6e:	b4 9f       	mul	r27, r20
    2b70:	90 0d       	add	r25, r0
    2b72:	a4 9f       	mul	r26, r20
    2b74:	80 0d       	add	r24, r0
    2b76:	91 1d       	adc	r25, r1
    2b78:	11 24       	eor	r1, r1
    2b7a:	08 95       	ret

00002b7c <__ashrdi3>:
    2b7c:	97 fb       	bst	r25, 7
    2b7e:	10 f8       	bld	r1, 0

00002b80 <__lshrdi3>:
    2b80:	16 94       	lsr	r1
    2b82:	00 08       	sbc	r0, r0
    2b84:	0f 93       	push	r16
    2b86:	08 30       	cpi	r16, 0x08	; 8
    2b88:	98 f0       	brcs	.+38     	; 0x2bb0 <__lshrdi3+0x30>
    2b8a:	08 50       	subi	r16, 0x08	; 8
    2b8c:	23 2f       	mov	r18, r19
    2b8e:	34 2f       	mov	r19, r20
    2b90:	45 2f       	mov	r20, r21
    2b92:	56 2f       	mov	r21, r22
    2b94:	67 2f       	mov	r22, r23
    2b96:	78 2f       	mov	r23, r24
    2b98:	89 2f       	mov	r24, r25
    2b9a:	90 2d       	mov	r25, r0
    2b9c:	f4 cf       	rjmp	.-24     	; 0x2b86 <__lshrdi3+0x6>
    2b9e:	05 94       	asr	r0
    2ba0:	97 95       	ror	r25
    2ba2:	87 95       	ror	r24
    2ba4:	77 95       	ror	r23
    2ba6:	67 95       	ror	r22
    2ba8:	57 95       	ror	r21
    2baa:	47 95       	ror	r20
    2bac:	37 95       	ror	r19
    2bae:	27 95       	ror	r18
    2bb0:	0a 95       	dec	r16
    2bb2:	aa f7       	brpl	.-22     	; 0x2b9e <__lshrdi3+0x1e>
    2bb4:	0f 91       	pop	r16
    2bb6:	08 95       	ret

00002bb8 <__umulhisi3>:
    2bb8:	a2 9f       	mul	r26, r18
    2bba:	b0 01       	movw	r22, r0
    2bbc:	b3 9f       	mul	r27, r19
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	a3 9f       	mul	r26, r19
    2bc2:	70 0d       	add	r23, r0
    2bc4:	81 1d       	adc	r24, r1
    2bc6:	11 24       	eor	r1, r1
    2bc8:	91 1d       	adc	r25, r1
    2bca:	b2 9f       	mul	r27, r18
    2bcc:	70 0d       	add	r23, r0
    2bce:	81 1d       	adc	r24, r1
    2bd0:	11 24       	eor	r1, r1
    2bd2:	91 1d       	adc	r25, r1
    2bd4:	08 95       	ret

00002bd6 <fdevopen>:
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	31 f4       	brne	.+12     	; 0x2bee <fdevopen+0x18>
    2be2:	61 15       	cp	r22, r1
    2be4:	71 05       	cpc	r23, r1
    2be6:	19 f4       	brne	.+6      	; 0x2bee <fdevopen+0x18>
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	39 c0       	rjmp	.+114    	; 0x2c60 <fdevopen+0x8a>
    2bee:	8b 01       	movw	r16, r22
    2bf0:	ec 01       	movw	r28, r24
    2bf2:	6e e0       	ldi	r22, 0x0E	; 14
    2bf4:	70 e0       	ldi	r23, 0x00	; 0
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	47 d5       	rcall	.+2702   	; 0x368a <calloc>
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	89 2b       	or	r24, r25
    2c00:	99 f3       	breq	.-26     	; 0x2be8 <fdevopen+0x12>
    2c02:	80 e8       	ldi	r24, 0x80	; 128
    2c04:	83 83       	std	Z+3, r24	; 0x03
    2c06:	01 15       	cp	r16, r1
    2c08:	11 05       	cpc	r17, r1
    2c0a:	71 f0       	breq	.+28     	; 0x2c28 <fdevopen+0x52>
    2c0c:	02 87       	std	Z+10, r16	; 0x0a
    2c0e:	13 87       	std	Z+11, r17	; 0x0b
    2c10:	81 e8       	ldi	r24, 0x81	; 129
    2c12:	83 83       	std	Z+3, r24	; 0x03
    2c14:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <__iob>
    2c18:	90 91 83 21 	lds	r25, 0x2183	; 0x802183 <__iob+0x1>
    2c1c:	89 2b       	or	r24, r25
    2c1e:	21 f4       	brne	.+8      	; 0x2c28 <fdevopen+0x52>
    2c20:	e0 93 82 21 	sts	0x2182, r30	; 0x802182 <__iob>
    2c24:	f0 93 83 21 	sts	0x2183, r31	; 0x802183 <__iob+0x1>
    2c28:	20 97       	sbiw	r28, 0x00	; 0
    2c2a:	c9 f0       	breq	.+50     	; 0x2c5e <fdevopen+0x88>
    2c2c:	c0 87       	std	Z+8, r28	; 0x08
    2c2e:	d1 87       	std	Z+9, r29	; 0x09
    2c30:	83 81       	ldd	r24, Z+3	; 0x03
    2c32:	82 60       	ori	r24, 0x02	; 2
    2c34:	83 83       	std	Z+3, r24	; 0x03
    2c36:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <__iob+0x2>
    2c3a:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <__iob+0x3>
    2c3e:	89 2b       	or	r24, r25
    2c40:	71 f4       	brne	.+28     	; 0x2c5e <fdevopen+0x88>
    2c42:	e0 93 84 21 	sts	0x2184, r30	; 0x802184 <__iob+0x2>
    2c46:	f0 93 85 21 	sts	0x2185, r31	; 0x802185 <__iob+0x3>
    2c4a:	80 91 86 21 	lds	r24, 0x2186	; 0x802186 <__iob+0x4>
    2c4e:	90 91 87 21 	lds	r25, 0x2187	; 0x802187 <__iob+0x5>
    2c52:	89 2b       	or	r24, r25
    2c54:	21 f4       	brne	.+8      	; 0x2c5e <fdevopen+0x88>
    2c56:	e0 93 86 21 	sts	0x2186, r30	; 0x802186 <__iob+0x4>
    2c5a:	f0 93 87 21 	sts	0x2187, r31	; 0x802187 <__iob+0x5>
    2c5e:	cf 01       	movw	r24, r30
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	1f 91       	pop	r17
    2c66:	0f 91       	pop	r16
    2c68:	08 95       	ret

00002c6a <printf>:
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	ae 01       	movw	r20, r28
    2c74:	4a 5f       	subi	r20, 0xFA	; 250
    2c76:	5f 4f       	sbci	r21, 0xFF	; 255
    2c78:	fa 01       	movw	r30, r20
    2c7a:	61 91       	ld	r22, Z+
    2c7c:	71 91       	ld	r23, Z+
    2c7e:	af 01       	movw	r20, r30
    2c80:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <__iob+0x2>
    2c84:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <__iob+0x3>
    2c88:	46 d0       	rcall	.+140    	; 0x2d16 <vfprintf>
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	08 95       	ret

00002c90 <sprintf>:
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	2e 97       	sbiw	r28, 0x0e	; 14
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0e 89       	ldd	r16, Y+22	; 0x16
    2ca4:	1f 89       	ldd	r17, Y+23	; 0x17
    2ca6:	86 e0       	ldi	r24, 0x06	; 6
    2ca8:	8c 83       	std	Y+4, r24	; 0x04
    2caa:	09 83       	std	Y+1, r16	; 0x01
    2cac:	1a 83       	std	Y+2, r17	; 0x02
    2cae:	8f ef       	ldi	r24, 0xFF	; 255
    2cb0:	9f e7       	ldi	r25, 0x7F	; 127
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	9e 83       	std	Y+6, r25	; 0x06
    2cb6:	ae 01       	movw	r20, r28
    2cb8:	46 5e       	subi	r20, 0xE6	; 230
    2cba:	5f 4f       	sbci	r21, 0xFF	; 255
    2cbc:	68 8d       	ldd	r22, Y+24	; 0x18
    2cbe:	79 8d       	ldd	r23, Y+25	; 0x19
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	01 96       	adiw	r24, 0x01	; 1
    2cc4:	28 d0       	rcall	.+80     	; 0x2d16 <vfprintf>
    2cc6:	ef 81       	ldd	r30, Y+7	; 0x07
    2cc8:	f8 85       	ldd	r31, Y+8	; 0x08
    2cca:	e0 0f       	add	r30, r16
    2ccc:	f1 1f       	adc	r31, r17
    2cce:	10 82       	st	Z, r1
    2cd0:	2e 96       	adiw	r28, 0x0e	; 14
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	08 95       	ret

00002ce0 <sscanf>:
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	2e 97       	sbiw	r28, 0x0e	; 14
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	85 e0       	ldi	r24, 0x05	; 5
    2cf0:	8c 83       	std	Y+4, r24	; 0x04
    2cf2:	8c 89       	ldd	r24, Y+20	; 0x14
    2cf4:	9d 89       	ldd	r25, Y+21	; 0x15
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	ae 01       	movw	r20, r28
    2cfc:	48 5e       	subi	r20, 0xE8	; 232
    2cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    2d00:	6e 89       	ldd	r22, Y+22	; 0x16
    2d02:	7f 89       	ldd	r23, Y+23	; 0x17
    2d04:	ce 01       	movw	r24, r28
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	a9 d3       	rcall	.+1874   	; 0x345c <vfscanf>
    2d0a:	2e 96       	adiw	r28, 0x0e	; 14
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	08 95       	ret

00002d16 <vfprintf>:
    2d16:	2f 92       	push	r2
    2d18:	3f 92       	push	r3
    2d1a:	4f 92       	push	r4
    2d1c:	5f 92       	push	r5
    2d1e:	6f 92       	push	r6
    2d20:	7f 92       	push	r7
    2d22:	8f 92       	push	r8
    2d24:	9f 92       	push	r9
    2d26:	af 92       	push	r10
    2d28:	bf 92       	push	r11
    2d2a:	cf 92       	push	r12
    2d2c:	df 92       	push	r13
    2d2e:	ef 92       	push	r14
    2d30:	ff 92       	push	r15
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	2b 97       	sbiw	r28, 0x0b	; 11
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	6c 01       	movw	r12, r24
    2d46:	7b 01       	movw	r14, r22
    2d48:	8a 01       	movw	r16, r20
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	16 82       	std	Z+6, r1	; 0x06
    2d4e:	17 82       	std	Z+7, r1	; 0x07
    2d50:	83 81       	ldd	r24, Z+3	; 0x03
    2d52:	81 ff       	sbrs	r24, 1
    2d54:	bf c1       	rjmp	.+894    	; 0x30d4 <vfprintf+0x3be>
    2d56:	ce 01       	movw	r24, r28
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	3c 01       	movw	r6, r24
    2d5c:	f6 01       	movw	r30, r12
    2d5e:	93 81       	ldd	r25, Z+3	; 0x03
    2d60:	f7 01       	movw	r30, r14
    2d62:	93 fd       	sbrc	r25, 3
    2d64:	85 91       	lpm	r24, Z+
    2d66:	93 ff       	sbrs	r25, 3
    2d68:	81 91       	ld	r24, Z+
    2d6a:	7f 01       	movw	r14, r30
    2d6c:	88 23       	and	r24, r24
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <vfprintf+0x5c>
    2d70:	ad c1       	rjmp	.+858    	; 0x30cc <vfprintf+0x3b6>
    2d72:	85 32       	cpi	r24, 0x25	; 37
    2d74:	39 f4       	brne	.+14     	; 0x2d84 <vfprintf+0x6e>
    2d76:	93 fd       	sbrc	r25, 3
    2d78:	85 91       	lpm	r24, Z+
    2d7a:	93 ff       	sbrs	r25, 3
    2d7c:	81 91       	ld	r24, Z+
    2d7e:	7f 01       	movw	r14, r30
    2d80:	85 32       	cpi	r24, 0x25	; 37
    2d82:	21 f4       	brne	.+8      	; 0x2d8c <vfprintf+0x76>
    2d84:	b6 01       	movw	r22, r12
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	29 d6       	rcall	.+3154   	; 0x39dc <fputc>
    2d8a:	e8 cf       	rjmp	.-48     	; 0x2d5c <vfprintf+0x46>
    2d8c:	91 2c       	mov	r9, r1
    2d8e:	21 2c       	mov	r2, r1
    2d90:	31 2c       	mov	r3, r1
    2d92:	ff e1       	ldi	r31, 0x1F	; 31
    2d94:	f3 15       	cp	r31, r3
    2d96:	d8 f0       	brcs	.+54     	; 0x2dce <vfprintf+0xb8>
    2d98:	8b 32       	cpi	r24, 0x2B	; 43
    2d9a:	79 f0       	breq	.+30     	; 0x2dba <vfprintf+0xa4>
    2d9c:	38 f4       	brcc	.+14     	; 0x2dac <vfprintf+0x96>
    2d9e:	80 32       	cpi	r24, 0x20	; 32
    2da0:	79 f0       	breq	.+30     	; 0x2dc0 <vfprintf+0xaa>
    2da2:	83 32       	cpi	r24, 0x23	; 35
    2da4:	a1 f4       	brne	.+40     	; 0x2dce <vfprintf+0xb8>
    2da6:	23 2d       	mov	r18, r3
    2da8:	20 61       	ori	r18, 0x10	; 16
    2daa:	1d c0       	rjmp	.+58     	; 0x2de6 <vfprintf+0xd0>
    2dac:	8d 32       	cpi	r24, 0x2D	; 45
    2dae:	61 f0       	breq	.+24     	; 0x2dc8 <vfprintf+0xb2>
    2db0:	80 33       	cpi	r24, 0x30	; 48
    2db2:	69 f4       	brne	.+26     	; 0x2dce <vfprintf+0xb8>
    2db4:	23 2d       	mov	r18, r3
    2db6:	21 60       	ori	r18, 0x01	; 1
    2db8:	16 c0       	rjmp	.+44     	; 0x2de6 <vfprintf+0xd0>
    2dba:	83 2d       	mov	r24, r3
    2dbc:	82 60       	ori	r24, 0x02	; 2
    2dbe:	38 2e       	mov	r3, r24
    2dc0:	e3 2d       	mov	r30, r3
    2dc2:	e4 60       	ori	r30, 0x04	; 4
    2dc4:	3e 2e       	mov	r3, r30
    2dc6:	2a c0       	rjmp	.+84     	; 0x2e1c <vfprintf+0x106>
    2dc8:	f3 2d       	mov	r31, r3
    2dca:	f8 60       	ori	r31, 0x08	; 8
    2dcc:	1d c0       	rjmp	.+58     	; 0x2e08 <vfprintf+0xf2>
    2dce:	37 fc       	sbrc	r3, 7
    2dd0:	2d c0       	rjmp	.+90     	; 0x2e2c <vfprintf+0x116>
    2dd2:	20 ed       	ldi	r18, 0xD0	; 208
    2dd4:	28 0f       	add	r18, r24
    2dd6:	2a 30       	cpi	r18, 0x0A	; 10
    2dd8:	40 f0       	brcs	.+16     	; 0x2dea <vfprintf+0xd4>
    2dda:	8e 32       	cpi	r24, 0x2E	; 46
    2ddc:	b9 f4       	brne	.+46     	; 0x2e0c <vfprintf+0xf6>
    2dde:	36 fc       	sbrc	r3, 6
    2de0:	75 c1       	rjmp	.+746    	; 0x30cc <vfprintf+0x3b6>
    2de2:	23 2d       	mov	r18, r3
    2de4:	20 64       	ori	r18, 0x40	; 64
    2de6:	32 2e       	mov	r3, r18
    2de8:	19 c0       	rjmp	.+50     	; 0x2e1c <vfprintf+0x106>
    2dea:	36 fe       	sbrs	r3, 6
    2dec:	06 c0       	rjmp	.+12     	; 0x2dfa <vfprintf+0xe4>
    2dee:	8a e0       	ldi	r24, 0x0A	; 10
    2df0:	98 9e       	mul	r9, r24
    2df2:	20 0d       	add	r18, r0
    2df4:	11 24       	eor	r1, r1
    2df6:	92 2e       	mov	r9, r18
    2df8:	11 c0       	rjmp	.+34     	; 0x2e1c <vfprintf+0x106>
    2dfa:	ea e0       	ldi	r30, 0x0A	; 10
    2dfc:	2e 9e       	mul	r2, r30
    2dfe:	20 0d       	add	r18, r0
    2e00:	11 24       	eor	r1, r1
    2e02:	22 2e       	mov	r2, r18
    2e04:	f3 2d       	mov	r31, r3
    2e06:	f0 62       	ori	r31, 0x20	; 32
    2e08:	3f 2e       	mov	r3, r31
    2e0a:	08 c0       	rjmp	.+16     	; 0x2e1c <vfprintf+0x106>
    2e0c:	8c 36       	cpi	r24, 0x6C	; 108
    2e0e:	21 f4       	brne	.+8      	; 0x2e18 <vfprintf+0x102>
    2e10:	83 2d       	mov	r24, r3
    2e12:	80 68       	ori	r24, 0x80	; 128
    2e14:	38 2e       	mov	r3, r24
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <vfprintf+0x106>
    2e18:	88 36       	cpi	r24, 0x68	; 104
    2e1a:	41 f4       	brne	.+16     	; 0x2e2c <vfprintf+0x116>
    2e1c:	f7 01       	movw	r30, r14
    2e1e:	93 fd       	sbrc	r25, 3
    2e20:	85 91       	lpm	r24, Z+
    2e22:	93 ff       	sbrs	r25, 3
    2e24:	81 91       	ld	r24, Z+
    2e26:	7f 01       	movw	r14, r30
    2e28:	81 11       	cpse	r24, r1
    2e2a:	b3 cf       	rjmp	.-154    	; 0x2d92 <vfprintf+0x7c>
    2e2c:	98 2f       	mov	r25, r24
    2e2e:	9f 7d       	andi	r25, 0xDF	; 223
    2e30:	95 54       	subi	r25, 0x45	; 69
    2e32:	93 30       	cpi	r25, 0x03	; 3
    2e34:	28 f4       	brcc	.+10     	; 0x2e40 <vfprintf+0x12a>
    2e36:	0c 5f       	subi	r16, 0xFC	; 252
    2e38:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3a:	9f e3       	ldi	r25, 0x3F	; 63
    2e3c:	99 83       	std	Y+1, r25	; 0x01
    2e3e:	0d c0       	rjmp	.+26     	; 0x2e5a <vfprintf+0x144>
    2e40:	83 36       	cpi	r24, 0x63	; 99
    2e42:	31 f0       	breq	.+12     	; 0x2e50 <vfprintf+0x13a>
    2e44:	83 37       	cpi	r24, 0x73	; 115
    2e46:	71 f0       	breq	.+28     	; 0x2e64 <vfprintf+0x14e>
    2e48:	83 35       	cpi	r24, 0x53	; 83
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <vfprintf+0x138>
    2e4c:	55 c0       	rjmp	.+170    	; 0x2ef8 <vfprintf+0x1e2>
    2e4e:	20 c0       	rjmp	.+64     	; 0x2e90 <vfprintf+0x17a>
    2e50:	f8 01       	movw	r30, r16
    2e52:	80 81       	ld	r24, Z
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	0e 5f       	subi	r16, 0xFE	; 254
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	88 24       	eor	r8, r8
    2e5c:	83 94       	inc	r8
    2e5e:	91 2c       	mov	r9, r1
    2e60:	53 01       	movw	r10, r6
    2e62:	12 c0       	rjmp	.+36     	; 0x2e88 <vfprintf+0x172>
    2e64:	28 01       	movw	r4, r16
    2e66:	f2 e0       	ldi	r31, 0x02	; 2
    2e68:	4f 0e       	add	r4, r31
    2e6a:	51 1c       	adc	r5, r1
    2e6c:	f8 01       	movw	r30, r16
    2e6e:	a0 80       	ld	r10, Z
    2e70:	b1 80       	ldd	r11, Z+1	; 0x01
    2e72:	36 fe       	sbrs	r3, 6
    2e74:	03 c0       	rjmp	.+6      	; 0x2e7c <vfprintf+0x166>
    2e76:	69 2d       	mov	r22, r9
    2e78:	70 e0       	ldi	r23, 0x00	; 0
    2e7a:	02 c0       	rjmp	.+4      	; 0x2e80 <vfprintf+0x16a>
    2e7c:	6f ef       	ldi	r22, 0xFF	; 255
    2e7e:	7f ef       	ldi	r23, 0xFF	; 255
    2e80:	c5 01       	movw	r24, r10
    2e82:	63 d5       	rcall	.+2758   	; 0x394a <strnlen>
    2e84:	4c 01       	movw	r8, r24
    2e86:	82 01       	movw	r16, r4
    2e88:	f3 2d       	mov	r31, r3
    2e8a:	ff 77       	andi	r31, 0x7F	; 127
    2e8c:	3f 2e       	mov	r3, r31
    2e8e:	15 c0       	rjmp	.+42     	; 0x2eba <vfprintf+0x1a4>
    2e90:	28 01       	movw	r4, r16
    2e92:	22 e0       	ldi	r18, 0x02	; 2
    2e94:	42 0e       	add	r4, r18
    2e96:	51 1c       	adc	r5, r1
    2e98:	f8 01       	movw	r30, r16
    2e9a:	a0 80       	ld	r10, Z
    2e9c:	b1 80       	ldd	r11, Z+1	; 0x01
    2e9e:	36 fe       	sbrs	r3, 6
    2ea0:	03 c0       	rjmp	.+6      	; 0x2ea8 <vfprintf+0x192>
    2ea2:	69 2d       	mov	r22, r9
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <vfprintf+0x196>
    2ea8:	6f ef       	ldi	r22, 0xFF	; 255
    2eaa:	7f ef       	ldi	r23, 0xFF	; 255
    2eac:	c5 01       	movw	r24, r10
    2eae:	3b d5       	rcall	.+2678   	; 0x3926 <strnlen_P>
    2eb0:	4c 01       	movw	r8, r24
    2eb2:	f3 2d       	mov	r31, r3
    2eb4:	f0 68       	ori	r31, 0x80	; 128
    2eb6:	3f 2e       	mov	r3, r31
    2eb8:	82 01       	movw	r16, r4
    2eba:	33 fc       	sbrc	r3, 3
    2ebc:	19 c0       	rjmp	.+50     	; 0x2ef0 <vfprintf+0x1da>
    2ebe:	82 2d       	mov	r24, r2
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	88 16       	cp	r8, r24
    2ec4:	99 06       	cpc	r9, r25
    2ec6:	a0 f4       	brcc	.+40     	; 0x2ef0 <vfprintf+0x1da>
    2ec8:	b6 01       	movw	r22, r12
    2eca:	80 e2       	ldi	r24, 0x20	; 32
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	86 d5       	rcall	.+2828   	; 0x39dc <fputc>
    2ed0:	2a 94       	dec	r2
    2ed2:	f5 cf       	rjmp	.-22     	; 0x2ebe <vfprintf+0x1a8>
    2ed4:	f5 01       	movw	r30, r10
    2ed6:	37 fc       	sbrc	r3, 7
    2ed8:	85 91       	lpm	r24, Z+
    2eda:	37 fe       	sbrs	r3, 7
    2edc:	81 91       	ld	r24, Z+
    2ede:	5f 01       	movw	r10, r30
    2ee0:	b6 01       	movw	r22, r12
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	7b d5       	rcall	.+2806   	; 0x39dc <fputc>
    2ee6:	21 10       	cpse	r2, r1
    2ee8:	2a 94       	dec	r2
    2eea:	21 e0       	ldi	r18, 0x01	; 1
    2eec:	82 1a       	sub	r8, r18
    2eee:	91 08       	sbc	r9, r1
    2ef0:	81 14       	cp	r8, r1
    2ef2:	91 04       	cpc	r9, r1
    2ef4:	79 f7       	brne	.-34     	; 0x2ed4 <vfprintf+0x1be>
    2ef6:	e1 c0       	rjmp	.+450    	; 0x30ba <vfprintf+0x3a4>
    2ef8:	84 36       	cpi	r24, 0x64	; 100
    2efa:	11 f0       	breq	.+4      	; 0x2f00 <vfprintf+0x1ea>
    2efc:	89 36       	cpi	r24, 0x69	; 105
    2efe:	39 f5       	brne	.+78     	; 0x2f4e <vfprintf+0x238>
    2f00:	f8 01       	movw	r30, r16
    2f02:	37 fe       	sbrs	r3, 7
    2f04:	07 c0       	rjmp	.+14     	; 0x2f14 <vfprintf+0x1fe>
    2f06:	60 81       	ld	r22, Z
    2f08:	71 81       	ldd	r23, Z+1	; 0x01
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	0c 5f       	subi	r16, 0xFC	; 252
    2f10:	1f 4f       	sbci	r17, 0xFF	; 255
    2f12:	08 c0       	rjmp	.+16     	; 0x2f24 <vfprintf+0x20e>
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	07 2e       	mov	r0, r23
    2f1a:	00 0c       	add	r0, r0
    2f1c:	88 0b       	sbc	r24, r24
    2f1e:	99 0b       	sbc	r25, r25
    2f20:	0e 5f       	subi	r16, 0xFE	; 254
    2f22:	1f 4f       	sbci	r17, 0xFF	; 255
    2f24:	f3 2d       	mov	r31, r3
    2f26:	ff 76       	andi	r31, 0x6F	; 111
    2f28:	3f 2e       	mov	r3, r31
    2f2a:	97 ff       	sbrs	r25, 7
    2f2c:	09 c0       	rjmp	.+18     	; 0x2f40 <vfprintf+0x22a>
    2f2e:	90 95       	com	r25
    2f30:	80 95       	com	r24
    2f32:	70 95       	com	r23
    2f34:	61 95       	neg	r22
    2f36:	7f 4f       	sbci	r23, 0xFF	; 255
    2f38:	8f 4f       	sbci	r24, 0xFF	; 255
    2f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3c:	f0 68       	ori	r31, 0x80	; 128
    2f3e:	3f 2e       	mov	r3, r31
    2f40:	2a e0       	ldi	r18, 0x0A	; 10
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	a3 01       	movw	r20, r6
    2f46:	9f d5       	rcall	.+2878   	; 0x3a86 <__ultoa_invert>
    2f48:	88 2e       	mov	r8, r24
    2f4a:	86 18       	sub	r8, r6
    2f4c:	44 c0       	rjmp	.+136    	; 0x2fd6 <vfprintf+0x2c0>
    2f4e:	85 37       	cpi	r24, 0x75	; 117
    2f50:	31 f4       	brne	.+12     	; 0x2f5e <vfprintf+0x248>
    2f52:	23 2d       	mov	r18, r3
    2f54:	2f 7e       	andi	r18, 0xEF	; 239
    2f56:	b2 2e       	mov	r11, r18
    2f58:	2a e0       	ldi	r18, 0x0A	; 10
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	25 c0       	rjmp	.+74     	; 0x2fa8 <vfprintf+0x292>
    2f5e:	93 2d       	mov	r25, r3
    2f60:	99 7f       	andi	r25, 0xF9	; 249
    2f62:	b9 2e       	mov	r11, r25
    2f64:	8f 36       	cpi	r24, 0x6F	; 111
    2f66:	c1 f0       	breq	.+48     	; 0x2f98 <vfprintf+0x282>
    2f68:	18 f4       	brcc	.+6      	; 0x2f70 <vfprintf+0x25a>
    2f6a:	88 35       	cpi	r24, 0x58	; 88
    2f6c:	79 f0       	breq	.+30     	; 0x2f8c <vfprintf+0x276>
    2f6e:	ae c0       	rjmp	.+348    	; 0x30cc <vfprintf+0x3b6>
    2f70:	80 37       	cpi	r24, 0x70	; 112
    2f72:	19 f0       	breq	.+6      	; 0x2f7a <vfprintf+0x264>
    2f74:	88 37       	cpi	r24, 0x78	; 120
    2f76:	21 f0       	breq	.+8      	; 0x2f80 <vfprintf+0x26a>
    2f78:	a9 c0       	rjmp	.+338    	; 0x30cc <vfprintf+0x3b6>
    2f7a:	e9 2f       	mov	r30, r25
    2f7c:	e0 61       	ori	r30, 0x10	; 16
    2f7e:	be 2e       	mov	r11, r30
    2f80:	b4 fe       	sbrs	r11, 4
    2f82:	0d c0       	rjmp	.+26     	; 0x2f9e <vfprintf+0x288>
    2f84:	fb 2d       	mov	r31, r11
    2f86:	f4 60       	ori	r31, 0x04	; 4
    2f88:	bf 2e       	mov	r11, r31
    2f8a:	09 c0       	rjmp	.+18     	; 0x2f9e <vfprintf+0x288>
    2f8c:	34 fe       	sbrs	r3, 4
    2f8e:	0a c0       	rjmp	.+20     	; 0x2fa4 <vfprintf+0x28e>
    2f90:	29 2f       	mov	r18, r25
    2f92:	26 60       	ori	r18, 0x06	; 6
    2f94:	b2 2e       	mov	r11, r18
    2f96:	06 c0       	rjmp	.+12     	; 0x2fa4 <vfprintf+0x28e>
    2f98:	28 e0       	ldi	r18, 0x08	; 8
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	05 c0       	rjmp	.+10     	; 0x2fa8 <vfprintf+0x292>
    2f9e:	20 e1       	ldi	r18, 0x10	; 16
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <vfprintf+0x292>
    2fa4:	20 e1       	ldi	r18, 0x10	; 16
    2fa6:	32 e0       	ldi	r19, 0x02	; 2
    2fa8:	f8 01       	movw	r30, r16
    2faa:	b7 fe       	sbrs	r11, 7
    2fac:	07 c0       	rjmp	.+14     	; 0x2fbc <vfprintf+0x2a6>
    2fae:	60 81       	ld	r22, Z
    2fb0:	71 81       	ldd	r23, Z+1	; 0x01
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	0c 5f       	subi	r16, 0xFC	; 252
    2fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fba:	06 c0       	rjmp	.+12     	; 0x2fc8 <vfprintf+0x2b2>
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0e 5f       	subi	r16, 0xFE	; 254
    2fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc8:	a3 01       	movw	r20, r6
    2fca:	5d d5       	rcall	.+2746   	; 0x3a86 <__ultoa_invert>
    2fcc:	88 2e       	mov	r8, r24
    2fce:	86 18       	sub	r8, r6
    2fd0:	fb 2d       	mov	r31, r11
    2fd2:	ff 77       	andi	r31, 0x7F	; 127
    2fd4:	3f 2e       	mov	r3, r31
    2fd6:	36 fe       	sbrs	r3, 6
    2fd8:	0d c0       	rjmp	.+26     	; 0x2ff4 <vfprintf+0x2de>
    2fda:	23 2d       	mov	r18, r3
    2fdc:	2e 7f       	andi	r18, 0xFE	; 254
    2fde:	a2 2e       	mov	r10, r18
    2fe0:	89 14       	cp	r8, r9
    2fe2:	58 f4       	brcc	.+22     	; 0x2ffa <vfprintf+0x2e4>
    2fe4:	34 fe       	sbrs	r3, 4
    2fe6:	0b c0       	rjmp	.+22     	; 0x2ffe <vfprintf+0x2e8>
    2fe8:	32 fc       	sbrc	r3, 2
    2fea:	09 c0       	rjmp	.+18     	; 0x2ffe <vfprintf+0x2e8>
    2fec:	83 2d       	mov	r24, r3
    2fee:	8e 7e       	andi	r24, 0xEE	; 238
    2ff0:	a8 2e       	mov	r10, r24
    2ff2:	05 c0       	rjmp	.+10     	; 0x2ffe <vfprintf+0x2e8>
    2ff4:	b8 2c       	mov	r11, r8
    2ff6:	a3 2c       	mov	r10, r3
    2ff8:	03 c0       	rjmp	.+6      	; 0x3000 <vfprintf+0x2ea>
    2ffa:	b8 2c       	mov	r11, r8
    2ffc:	01 c0       	rjmp	.+2      	; 0x3000 <vfprintf+0x2ea>
    2ffe:	b9 2c       	mov	r11, r9
    3000:	a4 fe       	sbrs	r10, 4
    3002:	0f c0       	rjmp	.+30     	; 0x3022 <vfprintf+0x30c>
    3004:	fe 01       	movw	r30, r28
    3006:	e8 0d       	add	r30, r8
    3008:	f1 1d       	adc	r31, r1
    300a:	80 81       	ld	r24, Z
    300c:	80 33       	cpi	r24, 0x30	; 48
    300e:	21 f4       	brne	.+8      	; 0x3018 <vfprintf+0x302>
    3010:	9a 2d       	mov	r25, r10
    3012:	99 7e       	andi	r25, 0xE9	; 233
    3014:	a9 2e       	mov	r10, r25
    3016:	09 c0       	rjmp	.+18     	; 0x302a <vfprintf+0x314>
    3018:	a2 fe       	sbrs	r10, 2
    301a:	06 c0       	rjmp	.+12     	; 0x3028 <vfprintf+0x312>
    301c:	b3 94       	inc	r11
    301e:	b3 94       	inc	r11
    3020:	04 c0       	rjmp	.+8      	; 0x302a <vfprintf+0x314>
    3022:	8a 2d       	mov	r24, r10
    3024:	86 78       	andi	r24, 0x86	; 134
    3026:	09 f0       	breq	.+2      	; 0x302a <vfprintf+0x314>
    3028:	b3 94       	inc	r11
    302a:	a3 fc       	sbrc	r10, 3
    302c:	10 c0       	rjmp	.+32     	; 0x304e <vfprintf+0x338>
    302e:	a0 fe       	sbrs	r10, 0
    3030:	06 c0       	rjmp	.+12     	; 0x303e <vfprintf+0x328>
    3032:	b2 14       	cp	r11, r2
    3034:	80 f4       	brcc	.+32     	; 0x3056 <vfprintf+0x340>
    3036:	28 0c       	add	r2, r8
    3038:	92 2c       	mov	r9, r2
    303a:	9b 18       	sub	r9, r11
    303c:	0d c0       	rjmp	.+26     	; 0x3058 <vfprintf+0x342>
    303e:	b2 14       	cp	r11, r2
    3040:	58 f4       	brcc	.+22     	; 0x3058 <vfprintf+0x342>
    3042:	b6 01       	movw	r22, r12
    3044:	80 e2       	ldi	r24, 0x20	; 32
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	c9 d4       	rcall	.+2450   	; 0x39dc <fputc>
    304a:	b3 94       	inc	r11
    304c:	f8 cf       	rjmp	.-16     	; 0x303e <vfprintf+0x328>
    304e:	b2 14       	cp	r11, r2
    3050:	18 f4       	brcc	.+6      	; 0x3058 <vfprintf+0x342>
    3052:	2b 18       	sub	r2, r11
    3054:	02 c0       	rjmp	.+4      	; 0x305a <vfprintf+0x344>
    3056:	98 2c       	mov	r9, r8
    3058:	21 2c       	mov	r2, r1
    305a:	a4 fe       	sbrs	r10, 4
    305c:	0f c0       	rjmp	.+30     	; 0x307c <vfprintf+0x366>
    305e:	b6 01       	movw	r22, r12
    3060:	80 e3       	ldi	r24, 0x30	; 48
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	bb d4       	rcall	.+2422   	; 0x39dc <fputc>
    3066:	a2 fe       	sbrs	r10, 2
    3068:	16 c0       	rjmp	.+44     	; 0x3096 <vfprintf+0x380>
    306a:	a1 fc       	sbrc	r10, 1
    306c:	03 c0       	rjmp	.+6      	; 0x3074 <vfprintf+0x35e>
    306e:	88 e7       	ldi	r24, 0x78	; 120
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <vfprintf+0x362>
    3074:	88 e5       	ldi	r24, 0x58	; 88
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	b6 01       	movw	r22, r12
    307a:	0c c0       	rjmp	.+24     	; 0x3094 <vfprintf+0x37e>
    307c:	8a 2d       	mov	r24, r10
    307e:	86 78       	andi	r24, 0x86	; 134
    3080:	51 f0       	breq	.+20     	; 0x3096 <vfprintf+0x380>
    3082:	a1 fe       	sbrs	r10, 1
    3084:	02 c0       	rjmp	.+4      	; 0x308a <vfprintf+0x374>
    3086:	8b e2       	ldi	r24, 0x2B	; 43
    3088:	01 c0       	rjmp	.+2      	; 0x308c <vfprintf+0x376>
    308a:	80 e2       	ldi	r24, 0x20	; 32
    308c:	a7 fc       	sbrc	r10, 7
    308e:	8d e2       	ldi	r24, 0x2D	; 45
    3090:	b6 01       	movw	r22, r12
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	a3 d4       	rcall	.+2374   	; 0x39dc <fputc>
    3096:	89 14       	cp	r8, r9
    3098:	30 f4       	brcc	.+12     	; 0x30a6 <vfprintf+0x390>
    309a:	b6 01       	movw	r22, r12
    309c:	80 e3       	ldi	r24, 0x30	; 48
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	9d d4       	rcall	.+2362   	; 0x39dc <fputc>
    30a2:	9a 94       	dec	r9
    30a4:	f8 cf       	rjmp	.-16     	; 0x3096 <vfprintf+0x380>
    30a6:	8a 94       	dec	r8
    30a8:	f3 01       	movw	r30, r6
    30aa:	e8 0d       	add	r30, r8
    30ac:	f1 1d       	adc	r31, r1
    30ae:	80 81       	ld	r24, Z
    30b0:	b6 01       	movw	r22, r12
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	93 d4       	rcall	.+2342   	; 0x39dc <fputc>
    30b6:	81 10       	cpse	r8, r1
    30b8:	f6 cf       	rjmp	.-20     	; 0x30a6 <vfprintf+0x390>
    30ba:	22 20       	and	r2, r2
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <vfprintf+0x3aa>
    30be:	4e ce       	rjmp	.-868    	; 0x2d5c <vfprintf+0x46>
    30c0:	b6 01       	movw	r22, r12
    30c2:	80 e2       	ldi	r24, 0x20	; 32
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	8a d4       	rcall	.+2324   	; 0x39dc <fputc>
    30c8:	2a 94       	dec	r2
    30ca:	f7 cf       	rjmp	.-18     	; 0x30ba <vfprintf+0x3a4>
    30cc:	f6 01       	movw	r30, r12
    30ce:	86 81       	ldd	r24, Z+6	; 0x06
    30d0:	97 81       	ldd	r25, Z+7	; 0x07
    30d2:	02 c0       	rjmp	.+4      	; 0x30d8 <vfprintf+0x3c2>
    30d4:	8f ef       	ldi	r24, 0xFF	; 255
    30d6:	9f ef       	ldi	r25, 0xFF	; 255
    30d8:	2b 96       	adiw	r28, 0x0b	; 11
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	de bf       	out	0x3e, r29	; 62
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	ff 90       	pop	r15
    30e8:	ef 90       	pop	r14
    30ea:	df 90       	pop	r13
    30ec:	cf 90       	pop	r12
    30ee:	bf 90       	pop	r11
    30f0:	af 90       	pop	r10
    30f2:	9f 90       	pop	r9
    30f4:	8f 90       	pop	r8
    30f6:	7f 90       	pop	r7
    30f8:	6f 90       	pop	r6
    30fa:	5f 90       	pop	r5
    30fc:	4f 90       	pop	r4
    30fe:	3f 90       	pop	r3
    3100:	2f 90       	pop	r2
    3102:	08 95       	ret

00003104 <putval>:
    3104:	20 fd       	sbrc	r18, 0
    3106:	09 c0       	rjmp	.+18     	; 0x311a <putval+0x16>
    3108:	fc 01       	movw	r30, r24
    310a:	23 fd       	sbrc	r18, 3
    310c:	05 c0       	rjmp	.+10     	; 0x3118 <putval+0x14>
    310e:	22 ff       	sbrs	r18, 2
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <putval+0x12>
    3112:	73 83       	std	Z+3, r23	; 0x03
    3114:	62 83       	std	Z+2, r22	; 0x02
    3116:	51 83       	std	Z+1, r21	; 0x01
    3118:	40 83       	st	Z, r20
    311a:	08 95       	ret

0000311c <mulacc>:
    311c:	44 fd       	sbrc	r20, 4
    311e:	17 c0       	rjmp	.+46     	; 0x314e <mulacc+0x32>
    3120:	46 fd       	sbrc	r20, 6
    3122:	17 c0       	rjmp	.+46     	; 0x3152 <mulacc+0x36>
    3124:	ab 01       	movw	r20, r22
    3126:	bc 01       	movw	r22, r24
    3128:	da 01       	movw	r26, r20
    312a:	fb 01       	movw	r30, r22
    312c:	aa 0f       	add	r26, r26
    312e:	bb 1f       	adc	r27, r27
    3130:	ee 1f       	adc	r30, r30
    3132:	ff 1f       	adc	r31, r31
    3134:	10 94       	com	r1
    3136:	d1 f7       	brne	.-12     	; 0x312c <mulacc+0x10>
    3138:	4a 0f       	add	r20, r26
    313a:	5b 1f       	adc	r21, r27
    313c:	6e 1f       	adc	r22, r30
    313e:	7f 1f       	adc	r23, r31
    3140:	cb 01       	movw	r24, r22
    3142:	ba 01       	movw	r22, r20
    3144:	66 0f       	add	r22, r22
    3146:	77 1f       	adc	r23, r23
    3148:	88 1f       	adc	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	09 c0       	rjmp	.+18     	; 0x3160 <mulacc+0x44>
    314e:	33 e0       	ldi	r19, 0x03	; 3
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <mulacc+0x38>
    3152:	34 e0       	ldi	r19, 0x04	; 4
    3154:	66 0f       	add	r22, r22
    3156:	77 1f       	adc	r23, r23
    3158:	88 1f       	adc	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	31 50       	subi	r19, 0x01	; 1
    315e:	d1 f7       	brne	.-12     	; 0x3154 <mulacc+0x38>
    3160:	62 0f       	add	r22, r18
    3162:	71 1d       	adc	r23, r1
    3164:	81 1d       	adc	r24, r1
    3166:	91 1d       	adc	r25, r1
    3168:	08 95       	ret

0000316a <skip_spaces>:
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	8c 01       	movw	r16, r24
    3174:	c8 01       	movw	r24, r16
    3176:	f4 d3       	rcall	.+2024   	; 0x3960 <fgetc>
    3178:	ec 01       	movw	r28, r24
    317a:	97 fd       	sbrc	r25, 7
    317c:	06 c0       	rjmp	.+12     	; 0x318a <skip_spaces+0x20>
    317e:	c0 d3       	rcall	.+1920   	; 0x3900 <isspace>
    3180:	89 2b       	or	r24, r25
    3182:	c1 f7       	brne	.-16     	; 0x3174 <skip_spaces+0xa>
    3184:	b8 01       	movw	r22, r16
    3186:	ce 01       	movw	r24, r28
    3188:	65 d4       	rcall	.+2250   	; 0x3a54 <ungetc>
    318a:	ce 01       	movw	r24, r28
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <conv_int>:
    3196:	8f 92       	push	r8
    3198:	9f 92       	push	r9
    319a:	af 92       	push	r10
    319c:	bf 92       	push	r11
    319e:	ef 92       	push	r14
    31a0:	ff 92       	push	r15
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	8c 01       	movw	r16, r24
    31ac:	d6 2f       	mov	r29, r22
    31ae:	7a 01       	movw	r14, r20
    31b0:	b2 2e       	mov	r11, r18
    31b2:	d6 d3       	rcall	.+1964   	; 0x3960 <fgetc>
    31b4:	9c 01       	movw	r18, r24
    31b6:	33 27       	eor	r19, r19
    31b8:	2b 32       	cpi	r18, 0x2B	; 43
    31ba:	31 05       	cpc	r19, r1
    31bc:	31 f0       	breq	.+12     	; 0x31ca <conv_int+0x34>
    31be:	2d 32       	cpi	r18, 0x2D	; 45
    31c0:	31 05       	cpc	r19, r1
    31c2:	59 f4       	brne	.+22     	; 0x31da <conv_int+0x44>
    31c4:	8b 2d       	mov	r24, r11
    31c6:	80 68       	ori	r24, 0x80	; 128
    31c8:	b8 2e       	mov	r11, r24
    31ca:	d1 50       	subi	r29, 0x01	; 1
    31cc:	11 f4       	brne	.+4      	; 0x31d2 <conv_int+0x3c>
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	61 c0       	rjmp	.+194    	; 0x3294 <conv_int+0xfe>
    31d2:	c8 01       	movw	r24, r16
    31d4:	c5 d3       	rcall	.+1930   	; 0x3960 <fgetc>
    31d6:	97 fd       	sbrc	r25, 7
    31d8:	fa cf       	rjmp	.-12     	; 0x31ce <conv_int+0x38>
    31da:	cb 2d       	mov	r28, r11
    31dc:	cd 7f       	andi	r28, 0xFD	; 253
    31de:	2b 2d       	mov	r18, r11
    31e0:	20 73       	andi	r18, 0x30	; 48
    31e2:	f9 f4       	brne	.+62     	; 0x3222 <conv_int+0x8c>
    31e4:	80 33       	cpi	r24, 0x30	; 48
    31e6:	e9 f4       	brne	.+58     	; 0x3222 <conv_int+0x8c>
    31e8:	aa 24       	eor	r10, r10
    31ea:	aa 94       	dec	r10
    31ec:	ad 0e       	add	r10, r29
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <conv_int+0x5c>
    31f0:	3e c0       	rjmp	.+124    	; 0x326e <conv_int+0xd8>
    31f2:	c8 01       	movw	r24, r16
    31f4:	b5 d3       	rcall	.+1898   	; 0x3960 <fgetc>
    31f6:	97 fd       	sbrc	r25, 7
    31f8:	3a c0       	rjmp	.+116    	; 0x326e <conv_int+0xd8>
    31fa:	9c 01       	movw	r18, r24
    31fc:	2f 7d       	andi	r18, 0xDF	; 223
    31fe:	33 27       	eor	r19, r19
    3200:	28 35       	cpi	r18, 0x58	; 88
    3202:	31 05       	cpc	r19, r1
    3204:	41 f4       	brne	.+16     	; 0x3216 <conv_int+0x80>
    3206:	c2 64       	ori	r28, 0x42	; 66
    3208:	d2 50       	subi	r29, 0x02	; 2
    320a:	89 f1       	breq	.+98     	; 0x326e <conv_int+0xd8>
    320c:	c8 01       	movw	r24, r16
    320e:	a8 d3       	rcall	.+1872   	; 0x3960 <fgetc>
    3210:	97 ff       	sbrs	r25, 7
    3212:	07 c0       	rjmp	.+14     	; 0x3222 <conv_int+0x8c>
    3214:	2c c0       	rjmp	.+88     	; 0x326e <conv_int+0xd8>
    3216:	b6 fe       	sbrs	r11, 6
    3218:	02 c0       	rjmp	.+4      	; 0x321e <conv_int+0x88>
    321a:	c2 60       	ori	r28, 0x02	; 2
    321c:	01 c0       	rjmp	.+2      	; 0x3220 <conv_int+0x8a>
    321e:	c2 61       	ori	r28, 0x12	; 18
    3220:	da 2d       	mov	r29, r10
    3222:	81 2c       	mov	r8, r1
    3224:	91 2c       	mov	r9, r1
    3226:	54 01       	movw	r10, r8
    3228:	20 ed       	ldi	r18, 0xD0	; 208
    322a:	28 0f       	add	r18, r24
    322c:	28 30       	cpi	r18, 0x08	; 8
    322e:	78 f0       	brcs	.+30     	; 0x324e <conv_int+0xb8>
    3230:	c4 ff       	sbrs	r28, 4
    3232:	03 c0       	rjmp	.+6      	; 0x323a <conv_int+0xa4>
    3234:	b8 01       	movw	r22, r16
    3236:	0e d4       	rcall	.+2076   	; 0x3a54 <ungetc>
    3238:	17 c0       	rjmp	.+46     	; 0x3268 <conv_int+0xd2>
    323a:	2a 30       	cpi	r18, 0x0A	; 10
    323c:	40 f0       	brcs	.+16     	; 0x324e <conv_int+0xb8>
    323e:	c6 ff       	sbrs	r28, 6
    3240:	f9 cf       	rjmp	.-14     	; 0x3234 <conv_int+0x9e>
    3242:	2f 7d       	andi	r18, 0xDF	; 223
    3244:	3f ee       	ldi	r19, 0xEF	; 239
    3246:	32 0f       	add	r19, r18
    3248:	36 30       	cpi	r19, 0x06	; 6
    324a:	a0 f7       	brcc	.-24     	; 0x3234 <conv_int+0x9e>
    324c:	27 50       	subi	r18, 0x07	; 7
    324e:	4c 2f       	mov	r20, r28
    3250:	c5 01       	movw	r24, r10
    3252:	b4 01       	movw	r22, r8
    3254:	63 df       	rcall	.-314    	; 0x311c <mulacc>
    3256:	4b 01       	movw	r8, r22
    3258:	5c 01       	movw	r10, r24
    325a:	c2 60       	ori	r28, 0x02	; 2
    325c:	d1 50       	subi	r29, 0x01	; 1
    325e:	51 f0       	breq	.+20     	; 0x3274 <conv_int+0xde>
    3260:	c8 01       	movw	r24, r16
    3262:	7e d3       	rcall	.+1788   	; 0x3960 <fgetc>
    3264:	97 ff       	sbrs	r25, 7
    3266:	e0 cf       	rjmp	.-64     	; 0x3228 <conv_int+0x92>
    3268:	c1 fd       	sbrc	r28, 1
    326a:	04 c0       	rjmp	.+8      	; 0x3274 <conv_int+0xde>
    326c:	b0 cf       	rjmp	.-160    	; 0x31ce <conv_int+0x38>
    326e:	81 2c       	mov	r8, r1
    3270:	91 2c       	mov	r9, r1
    3272:	54 01       	movw	r10, r8
    3274:	c7 ff       	sbrs	r28, 7
    3276:	08 c0       	rjmp	.+16     	; 0x3288 <conv_int+0xf2>
    3278:	b0 94       	com	r11
    327a:	a0 94       	com	r10
    327c:	90 94       	com	r9
    327e:	80 94       	com	r8
    3280:	81 1c       	adc	r8, r1
    3282:	91 1c       	adc	r9, r1
    3284:	a1 1c       	adc	r10, r1
    3286:	b1 1c       	adc	r11, r1
    3288:	2c 2f       	mov	r18, r28
    328a:	b5 01       	movw	r22, r10
    328c:	a4 01       	movw	r20, r8
    328e:	c7 01       	movw	r24, r14
    3290:	39 df       	rcall	.-398    	; 0x3104 <putval>
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	1f 91       	pop	r17
    329a:	0f 91       	pop	r16
    329c:	ff 90       	pop	r15
    329e:	ef 90       	pop	r14
    32a0:	bf 90       	pop	r11
    32a2:	af 90       	pop	r10
    32a4:	9f 90       	pop	r9
    32a6:	8f 90       	pop	r8
    32a8:	08 95       	ret

000032aa <conv_brk>:
    32aa:	5f 92       	push	r5
    32ac:	6f 92       	push	r6
    32ae:	7f 92       	push	r7
    32b0:	8f 92       	push	r8
    32b2:	9f 92       	push	r9
    32b4:	af 92       	push	r10
    32b6:	bf 92       	push	r11
    32b8:	cf 92       	push	r12
    32ba:	df 92       	push	r13
    32bc:	ef 92       	push	r14
    32be:	ff 92       	push	r15
    32c0:	0f 93       	push	r16
    32c2:	1f 93       	push	r17
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    32cc:	a0 97       	sbiw	r28, 0x20	; 32
    32ce:	cd bf       	out	0x3d, r28	; 61
    32d0:	de bf       	out	0x3e, r29	; 62
    32d2:	5c 01       	movw	r10, r24
    32d4:	96 2e       	mov	r9, r22
    32d6:	7a 01       	movw	r14, r20
    32d8:	f9 01       	movw	r30, r18
    32da:	8e 01       	movw	r16, r28
    32dc:	0f 5f       	subi	r16, 0xFF	; 255
    32de:	1f 4f       	sbci	r17, 0xFF	; 255
    32e0:	68 01       	movw	r12, r16
    32e2:	80 e2       	ldi	r24, 0x20	; 32
    32e4:	d8 01       	movw	r26, r16
    32e6:	1d 92       	st	X+, r1
    32e8:	8a 95       	dec	r24
    32ea:	e9 f7       	brne	.-6      	; 0x32e6 <conv_brk+0x3c>
    32ec:	d5 01       	movw	r26, r10
    32ee:	13 96       	adiw	r26, 0x03	; 3
    32f0:	8c 90       	ld	r8, X
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	61 2c       	mov	r6, r1
    32f8:	71 2c       	mov	r7, r1
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	61 e0       	ldi	r22, 0x01	; 1
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	83 fc       	sbrc	r8, 3
    3302:	25 91       	lpm	r18, Z+
    3304:	83 fe       	sbrs	r8, 3
    3306:	21 91       	ld	r18, Z+
    3308:	8f 01       	movw	r16, r30
    330a:	52 2e       	mov	r5, r18
    330c:	21 11       	cpse	r18, r1
    330e:	03 c0       	rjmp	.+6      	; 0x3316 <conv_brk+0x6c>
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	90 c0       	rjmp	.+288    	; 0x3436 <conv_brk+0x18c>
    3316:	2e 35       	cpi	r18, 0x5E	; 94
    3318:	11 f4       	brne	.+4      	; 0x331e <conv_brk+0x74>
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	51 f1       	breq	.+84     	; 0x3372 <conv_brk+0xc8>
    331e:	43 2f       	mov	r20, r19
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	48 17       	cp	r20, r24
    3324:	59 07       	cpc	r21, r25
    3326:	3c f4       	brge	.+14     	; 0x3336 <conv_brk+0x8c>
    3328:	2d 35       	cpi	r18, 0x5D	; 93
    332a:	59 f1       	breq	.+86     	; 0x3382 <conv_brk+0xd8>
    332c:	2d 32       	cpi	r18, 0x2D	; 45
    332e:	19 f4       	brne	.+6      	; 0x3336 <conv_brk+0x8c>
    3330:	77 20       	and	r7, r7
    3332:	09 f1       	breq	.+66     	; 0x3376 <conv_brk+0xcc>
    3334:	03 c0       	rjmp	.+6      	; 0x333c <conv_brk+0x92>
    3336:	77 20       	and	r7, r7
    3338:	09 f4       	brne	.+2      	; 0x333c <conv_brk+0x92>
    333a:	68 c0       	rjmp	.+208    	; 0x340c <conv_brk+0x162>
    333c:	45 2d       	mov	r20, r5
    333e:	46 95       	lsr	r20
    3340:	46 95       	lsr	r20
    3342:	46 95       	lsr	r20
    3344:	d6 01       	movw	r26, r12
    3346:	a4 0f       	add	r26, r20
    3348:	b1 1d       	adc	r27, r1
    334a:	45 2d       	mov	r20, r5
    334c:	47 70       	andi	r20, 0x07	; 7
    334e:	8b 01       	movw	r16, r22
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <conv_brk+0xac>
    3352:	00 0f       	add	r16, r16
    3354:	11 1f       	adc	r17, r17
    3356:	4a 95       	dec	r20
    3358:	e2 f7       	brpl	.-8      	; 0x3352 <conv_brk+0xa8>
    335a:	a8 01       	movw	r20, r16
    335c:	5c 91       	ld	r21, X
    335e:	45 2b       	or	r20, r21
    3360:	4c 93       	st	X, r20
    3362:	65 14       	cp	r6, r5
    3364:	59 f0       	breq	.+22     	; 0x337c <conv_brk+0xd2>
    3366:	56 14       	cp	r5, r6
    3368:	10 f4       	brcc	.+4      	; 0x336e <conv_brk+0xc4>
    336a:	53 94       	inc	r5
    336c:	e7 cf       	rjmp	.-50     	; 0x333c <conv_brk+0x92>
    336e:	5a 94       	dec	r5
    3370:	e5 cf       	rjmp	.-54     	; 0x333c <conv_brk+0x92>
    3372:	31 e0       	ldi	r19, 0x01	; 1
    3374:	04 c0       	rjmp	.+8      	; 0x337e <conv_brk+0xd4>
    3376:	77 24       	eor	r7, r7
    3378:	73 94       	inc	r7
    337a:	01 c0       	rjmp	.+2      	; 0x337e <conv_brk+0xd4>
    337c:	71 2c       	mov	r7, r1
    337e:	01 96       	adiw	r24, 0x01	; 1
    3380:	bf cf       	rjmp	.-130    	; 0x3300 <conv_brk+0x56>
    3382:	77 20       	and	r7, r7
    3384:	19 f0       	breq	.+6      	; 0x338c <conv_brk+0xe2>
    3386:	8e 81       	ldd	r24, Y+6	; 0x06
    3388:	80 62       	ori	r24, 0x20	; 32
    338a:	8e 83       	std	Y+6, r24	; 0x06
    338c:	31 11       	cpse	r19, r1
    338e:	03 c0       	rjmp	.+6      	; 0x3396 <conv_brk+0xec>
    3390:	88 24       	eor	r8, r8
    3392:	83 94       	inc	r8
    3394:	17 c0       	rjmp	.+46     	; 0x33c4 <conv_brk+0x11a>
    3396:	f6 01       	movw	r30, r12
    3398:	9e 01       	movw	r18, r28
    339a:	2f 5d       	subi	r18, 0xDF	; 223
    339c:	3f 4f       	sbci	r19, 0xFF	; 255
    339e:	80 81       	ld	r24, Z
    33a0:	80 95       	com	r24
    33a2:	81 93       	st	Z+, r24
    33a4:	2e 17       	cp	r18, r30
    33a6:	3f 07       	cpc	r19, r31
    33a8:	d1 f7       	brne	.-12     	; 0x339e <conv_brk+0xf4>
    33aa:	f2 cf       	rjmp	.-28     	; 0x3390 <conv_brk+0xe6>
    33ac:	e1 14       	cp	r14, r1
    33ae:	f1 04       	cpc	r15, r1
    33b0:	29 f0       	breq	.+10     	; 0x33bc <conv_brk+0x112>
    33b2:	d7 01       	movw	r26, r14
    33b4:	8c 93       	st	X, r24
    33b6:	f7 01       	movw	r30, r14
    33b8:	31 96       	adiw	r30, 0x01	; 1
    33ba:	7f 01       	movw	r14, r30
    33bc:	9a 94       	dec	r9
    33be:	81 2c       	mov	r8, r1
    33c0:	99 20       	and	r9, r9
    33c2:	e9 f0       	breq	.+58     	; 0x33fe <conv_brk+0x154>
    33c4:	c5 01       	movw	r24, r10
    33c6:	cc d2       	rcall	.+1432   	; 0x3960 <fgetc>
    33c8:	97 fd       	sbrc	r25, 7
    33ca:	17 c0       	rjmp	.+46     	; 0x33fa <conv_brk+0x150>
    33cc:	fc 01       	movw	r30, r24
    33ce:	ff 27       	eor	r31, r31
    33d0:	23 e0       	ldi	r18, 0x03	; 3
    33d2:	f5 95       	asr	r31
    33d4:	e7 95       	ror	r30
    33d6:	2a 95       	dec	r18
    33d8:	e1 f7       	brne	.-8      	; 0x33d2 <conv_brk+0x128>
    33da:	ec 0d       	add	r30, r12
    33dc:	fd 1d       	adc	r31, r13
    33de:	20 81       	ld	r18, Z
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	ac 01       	movw	r20, r24
    33e4:	47 70       	andi	r20, 0x07	; 7
    33e6:	55 27       	eor	r21, r21
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <conv_brk+0x144>
    33ea:	35 95       	asr	r19
    33ec:	27 95       	ror	r18
    33ee:	4a 95       	dec	r20
    33f0:	e2 f7       	brpl	.-8      	; 0x33ea <conv_brk+0x140>
    33f2:	20 fd       	sbrc	r18, 0
    33f4:	db cf       	rjmp	.-74     	; 0x33ac <conv_brk+0x102>
    33f6:	b5 01       	movw	r22, r10
    33f8:	2d d3       	rcall	.+1626   	; 0x3a54 <ungetc>
    33fa:	81 10       	cpse	r8, r1
    33fc:	89 cf       	rjmp	.-238    	; 0x3310 <conv_brk+0x66>
    33fe:	e1 14       	cp	r14, r1
    3400:	f1 04       	cpc	r15, r1
    3402:	11 f0       	breq	.+4      	; 0x3408 <conv_brk+0x15e>
    3404:	d7 01       	movw	r26, r14
    3406:	1c 92       	st	X, r1
    3408:	c8 01       	movw	r24, r16
    340a:	15 c0       	rjmp	.+42     	; 0x3436 <conv_brk+0x18c>
    340c:	42 2f       	mov	r20, r18
    340e:	46 95       	lsr	r20
    3410:	46 95       	lsr	r20
    3412:	46 95       	lsr	r20
    3414:	d6 01       	movw	r26, r12
    3416:	a4 0f       	add	r26, r20
    3418:	b1 1d       	adc	r27, r1
    341a:	42 2f       	mov	r20, r18
    341c:	47 70       	andi	r20, 0x07	; 7
    341e:	8b 01       	movw	r16, r22
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <conv_brk+0x17c>
    3422:	00 0f       	add	r16, r16
    3424:	11 1f       	adc	r17, r17
    3426:	4a 95       	dec	r20
    3428:	e2 f7       	brpl	.-8      	; 0x3422 <conv_brk+0x178>
    342a:	a8 01       	movw	r20, r16
    342c:	5c 91       	ld	r21, X
    342e:	45 2b       	or	r20, r21
    3430:	4c 93       	st	X, r20
    3432:	62 2e       	mov	r6, r18
    3434:	a4 cf       	rjmp	.-184    	; 0x337e <conv_brk+0xd4>
    3436:	a0 96       	adiw	r28, 0x20	; 32
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	1f 91       	pop	r17
    3442:	0f 91       	pop	r16
    3444:	ff 90       	pop	r15
    3446:	ef 90       	pop	r14
    3448:	df 90       	pop	r13
    344a:	cf 90       	pop	r12
    344c:	bf 90       	pop	r11
    344e:	af 90       	pop	r10
    3450:	9f 90       	pop	r9
    3452:	8f 90       	pop	r8
    3454:	7f 90       	pop	r7
    3456:	6f 90       	pop	r6
    3458:	5f 90       	pop	r5
    345a:	08 95       	ret

0000345c <vfscanf>:
    345c:	5f 92       	push	r5
    345e:	6f 92       	push	r6
    3460:	7f 92       	push	r7
    3462:	8f 92       	push	r8
    3464:	9f 92       	push	r9
    3466:	af 92       	push	r10
    3468:	bf 92       	push	r11
    346a:	cf 92       	push	r12
    346c:	df 92       	push	r13
    346e:	ef 92       	push	r14
    3470:	ff 92       	push	r15
    3472:	0f 93       	push	r16
    3474:	1f 93       	push	r17
    3476:	cf 93       	push	r28
    3478:	df 93       	push	r29
    347a:	6c 01       	movw	r12, r24
    347c:	eb 01       	movw	r28, r22
    347e:	5a 01       	movw	r10, r20
    3480:	fc 01       	movw	r30, r24
    3482:	16 82       	std	Z+6, r1	; 0x06
    3484:	17 82       	std	Z+7, r1	; 0x07
    3486:	51 2c       	mov	r5, r1
    3488:	f6 01       	movw	r30, r12
    348a:	e3 80       	ldd	r14, Z+3	; 0x03
    348c:	fe 01       	movw	r30, r28
    348e:	e3 fc       	sbrc	r14, 3
    3490:	85 91       	lpm	r24, Z+
    3492:	e3 fe       	sbrs	r14, 3
    3494:	81 91       	ld	r24, Z+
    3496:	18 2f       	mov	r17, r24
    3498:	ef 01       	movw	r28, r30
    349a:	88 23       	and	r24, r24
    349c:	09 f4       	brne	.+2      	; 0x34a0 <vfscanf+0x44>
    349e:	e0 c0       	rjmp	.+448    	; 0x3660 <vfscanf+0x204>
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	2e d2       	rcall	.+1116   	; 0x3900 <isspace>
    34a4:	89 2b       	or	r24, r25
    34a6:	19 f0       	breq	.+6      	; 0x34ae <vfscanf+0x52>
    34a8:	c6 01       	movw	r24, r12
    34aa:	5f de       	rcall	.-834    	; 0x316a <skip_spaces>
    34ac:	ed cf       	rjmp	.-38     	; 0x3488 <vfscanf+0x2c>
    34ae:	15 32       	cpi	r17, 0x25	; 37
    34b0:	41 f4       	brne	.+16     	; 0x34c2 <vfscanf+0x66>
    34b2:	fe 01       	movw	r30, r28
    34b4:	e3 fc       	sbrc	r14, 3
    34b6:	15 91       	lpm	r17, Z+
    34b8:	e3 fe       	sbrs	r14, 3
    34ba:	11 91       	ld	r17, Z+
    34bc:	ef 01       	movw	r28, r30
    34be:	15 32       	cpi	r17, 0x25	; 37
    34c0:	71 f4       	brne	.+28     	; 0x34de <vfscanf+0x82>
    34c2:	c6 01       	movw	r24, r12
    34c4:	4d d2       	rcall	.+1178   	; 0x3960 <fgetc>
    34c6:	97 fd       	sbrc	r25, 7
    34c8:	c9 c0       	rjmp	.+402    	; 0x365c <vfscanf+0x200>
    34ca:	41 2f       	mov	r20, r17
    34cc:	50 e0       	ldi	r21, 0x00	; 0
    34ce:	9c 01       	movw	r18, r24
    34d0:	33 27       	eor	r19, r19
    34d2:	24 17       	cp	r18, r20
    34d4:	35 07       	cpc	r19, r21
    34d6:	c1 f2       	breq	.-80     	; 0x3488 <vfscanf+0x2c>
    34d8:	b6 01       	movw	r22, r12
    34da:	bc d2       	rcall	.+1400   	; 0x3a54 <ungetc>
    34dc:	c1 c0       	rjmp	.+386    	; 0x3660 <vfscanf+0x204>
    34de:	1a 32       	cpi	r17, 0x2A	; 42
    34e0:	39 f4       	brne	.+14     	; 0x34f0 <vfscanf+0x94>
    34e2:	e3 fc       	sbrc	r14, 3
    34e4:	15 91       	lpm	r17, Z+
    34e6:	e3 fe       	sbrs	r14, 3
    34e8:	11 91       	ld	r17, Z+
    34ea:	ef 01       	movw	r28, r30
    34ec:	01 e0       	ldi	r16, 0x01	; 1
    34ee:	01 c0       	rjmp	.+2      	; 0x34f2 <vfscanf+0x96>
    34f0:	00 e0       	ldi	r16, 0x00	; 0
    34f2:	f1 2c       	mov	r15, r1
    34f4:	20 ed       	ldi	r18, 0xD0	; 208
    34f6:	21 0f       	add	r18, r17
    34f8:	2a 30       	cpi	r18, 0x0A	; 10
    34fa:	78 f4       	brcc	.+30     	; 0x351a <vfscanf+0xbe>
    34fc:	02 60       	ori	r16, 0x02	; 2
    34fe:	6f 2d       	mov	r22, r15
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	40 e2       	ldi	r20, 0x20	; 32
    3508:	09 de       	rcall	.-1006   	; 0x311c <mulacc>
    350a:	f6 2e       	mov	r15, r22
    350c:	fe 01       	movw	r30, r28
    350e:	e3 fc       	sbrc	r14, 3
    3510:	15 91       	lpm	r17, Z+
    3512:	e3 fe       	sbrs	r14, 3
    3514:	11 91       	ld	r17, Z+
    3516:	ef 01       	movw	r28, r30
    3518:	ed cf       	rjmp	.-38     	; 0x34f4 <vfscanf+0x98>
    351a:	01 ff       	sbrs	r16, 1
    351c:	03 c0       	rjmp	.+6      	; 0x3524 <vfscanf+0xc8>
    351e:	f1 10       	cpse	r15, r1
    3520:	03 c0       	rjmp	.+6      	; 0x3528 <vfscanf+0xcc>
    3522:	9e c0       	rjmp	.+316    	; 0x3660 <vfscanf+0x204>
    3524:	ff 24       	eor	r15, r15
    3526:	fa 94       	dec	r15
    3528:	18 36       	cpi	r17, 0x68	; 104
    352a:	19 f0       	breq	.+6      	; 0x3532 <vfscanf+0xd6>
    352c:	1c 36       	cpi	r17, 0x6C	; 108
    352e:	51 f0       	breq	.+20     	; 0x3544 <vfscanf+0xe8>
    3530:	10 c0       	rjmp	.+32     	; 0x3552 <vfscanf+0xf6>
    3532:	fe 01       	movw	r30, r28
    3534:	e3 fc       	sbrc	r14, 3
    3536:	15 91       	lpm	r17, Z+
    3538:	e3 fe       	sbrs	r14, 3
    353a:	11 91       	ld	r17, Z+
    353c:	ef 01       	movw	r28, r30
    353e:	18 36       	cpi	r17, 0x68	; 104
    3540:	41 f4       	brne	.+16     	; 0x3552 <vfscanf+0xf6>
    3542:	08 60       	ori	r16, 0x08	; 8
    3544:	04 60       	ori	r16, 0x04	; 4
    3546:	fe 01       	movw	r30, r28
    3548:	e3 fc       	sbrc	r14, 3
    354a:	15 91       	lpm	r17, Z+
    354c:	e3 fe       	sbrs	r14, 3
    354e:	11 91       	ld	r17, Z+
    3550:	ef 01       	movw	r28, r30
    3552:	11 23       	and	r17, r17
    3554:	09 f4       	brne	.+2      	; 0x3558 <vfscanf+0xfc>
    3556:	84 c0       	rjmp	.+264    	; 0x3660 <vfscanf+0x204>
    3558:	61 2f       	mov	r22, r17
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	8e e7       	ldi	r24, 0x7E	; 126
    355e:	92 e0       	ldi	r25, 0x02	; 2
    3560:	d7 d1       	rcall	.+942    	; 0x3910 <strchr_P>
    3562:	89 2b       	or	r24, r25
    3564:	09 f4       	brne	.+2      	; 0x3568 <vfscanf+0x10c>
    3566:	7c c0       	rjmp	.+248    	; 0x3660 <vfscanf+0x204>
    3568:	00 fd       	sbrc	r16, 0
    356a:	07 c0       	rjmp	.+14     	; 0x357a <vfscanf+0x11e>
    356c:	f5 01       	movw	r30, r10
    356e:	80 80       	ld	r8, Z
    3570:	91 80       	ldd	r9, Z+1	; 0x01
    3572:	c5 01       	movw	r24, r10
    3574:	02 96       	adiw	r24, 0x02	; 2
    3576:	5c 01       	movw	r10, r24
    3578:	02 c0       	rjmp	.+4      	; 0x357e <vfscanf+0x122>
    357a:	81 2c       	mov	r8, r1
    357c:	91 2c       	mov	r9, r1
    357e:	1e 36       	cpi	r17, 0x6E	; 110
    3580:	49 f4       	brne	.+18     	; 0x3594 <vfscanf+0x138>
    3582:	f6 01       	movw	r30, r12
    3584:	46 81       	ldd	r20, Z+6	; 0x06
    3586:	57 81       	ldd	r21, Z+7	; 0x07
    3588:	60 e0       	ldi	r22, 0x00	; 0
    358a:	70 e0       	ldi	r23, 0x00	; 0
    358c:	20 2f       	mov	r18, r16
    358e:	c4 01       	movw	r24, r8
    3590:	b9 dd       	rcall	.-1166   	; 0x3104 <putval>
    3592:	7a cf       	rjmp	.-268    	; 0x3488 <vfscanf+0x2c>
    3594:	13 36       	cpi	r17, 0x63	; 99
    3596:	a1 f4       	brne	.+40     	; 0x35c0 <vfscanf+0x164>
    3598:	01 fd       	sbrc	r16, 1
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <vfscanf+0x144>
    359c:	ff 24       	eor	r15, r15
    359e:	f3 94       	inc	r15
    35a0:	c6 01       	movw	r24, r12
    35a2:	de d1       	rcall	.+956    	; 0x3960 <fgetc>
    35a4:	97 fd       	sbrc	r25, 7
    35a6:	5a c0       	rjmp	.+180    	; 0x365c <vfscanf+0x200>
    35a8:	81 14       	cp	r8, r1
    35aa:	91 04       	cpc	r9, r1
    35ac:	29 f0       	breq	.+10     	; 0x35b8 <vfscanf+0x15c>
    35ae:	f4 01       	movw	r30, r8
    35b0:	80 83       	st	Z, r24
    35b2:	c4 01       	movw	r24, r8
    35b4:	01 96       	adiw	r24, 0x01	; 1
    35b6:	4c 01       	movw	r8, r24
    35b8:	fa 94       	dec	r15
    35ba:	f1 10       	cpse	r15, r1
    35bc:	f1 cf       	rjmp	.-30     	; 0x35a0 <vfscanf+0x144>
    35be:	4a c0       	rjmp	.+148    	; 0x3654 <vfscanf+0x1f8>
    35c0:	1b 35       	cpi	r17, 0x5B	; 91
    35c2:	51 f4       	brne	.+20     	; 0x35d8 <vfscanf+0x17c>
    35c4:	9e 01       	movw	r18, r28
    35c6:	a4 01       	movw	r20, r8
    35c8:	6f 2d       	mov	r22, r15
    35ca:	c6 01       	movw	r24, r12
    35cc:	6e de       	rcall	.-804    	; 0x32aa <conv_brk>
    35ce:	ec 01       	movw	r28, r24
    35d0:	89 2b       	or	r24, r25
    35d2:	09 f0       	breq	.+2      	; 0x35d6 <vfscanf+0x17a>
    35d4:	3f c0       	rjmp	.+126    	; 0x3654 <vfscanf+0x1f8>
    35d6:	39 c0       	rjmp	.+114    	; 0x364a <vfscanf+0x1ee>
    35d8:	c6 01       	movw	r24, r12
    35da:	c7 dd       	rcall	.-1138   	; 0x316a <skip_spaces>
    35dc:	97 fd       	sbrc	r25, 7
    35de:	3e c0       	rjmp	.+124    	; 0x365c <vfscanf+0x200>
    35e0:	1f 36       	cpi	r17, 0x6F	; 111
    35e2:	49 f1       	breq	.+82     	; 0x3636 <vfscanf+0x1da>
    35e4:	28 f4       	brcc	.+10     	; 0x35f0 <vfscanf+0x194>
    35e6:	14 36       	cpi	r17, 0x64	; 100
    35e8:	21 f1       	breq	.+72     	; 0x3632 <vfscanf+0x1d6>
    35ea:	19 36       	cpi	r17, 0x69	; 105
    35ec:	39 f1       	breq	.+78     	; 0x363c <vfscanf+0x1e0>
    35ee:	25 c0       	rjmp	.+74     	; 0x363a <vfscanf+0x1de>
    35f0:	13 37       	cpi	r17, 0x73	; 115
    35f2:	71 f0       	breq	.+28     	; 0x3610 <vfscanf+0x1b4>
    35f4:	15 37       	cpi	r17, 0x75	; 117
    35f6:	e9 f0       	breq	.+58     	; 0x3632 <vfscanf+0x1d6>
    35f8:	20 c0       	rjmp	.+64     	; 0x363a <vfscanf+0x1de>
    35fa:	81 14       	cp	r8, r1
    35fc:	91 04       	cpc	r9, r1
    35fe:	29 f0       	breq	.+10     	; 0x360a <vfscanf+0x1ae>
    3600:	f4 01       	movw	r30, r8
    3602:	60 82       	st	Z, r6
    3604:	c4 01       	movw	r24, r8
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	4c 01       	movw	r8, r24
    360a:	fa 94       	dec	r15
    360c:	ff 20       	and	r15, r15
    360e:	59 f0       	breq	.+22     	; 0x3626 <vfscanf+0x1ca>
    3610:	c6 01       	movw	r24, r12
    3612:	a6 d1       	rcall	.+844    	; 0x3960 <fgetc>
    3614:	3c 01       	movw	r6, r24
    3616:	97 fd       	sbrc	r25, 7
    3618:	06 c0       	rjmp	.+12     	; 0x3626 <vfscanf+0x1ca>
    361a:	72 d1       	rcall	.+740    	; 0x3900 <isspace>
    361c:	89 2b       	or	r24, r25
    361e:	69 f3       	breq	.-38     	; 0x35fa <vfscanf+0x19e>
    3620:	b6 01       	movw	r22, r12
    3622:	c3 01       	movw	r24, r6
    3624:	17 d2       	rcall	.+1070   	; 0x3a54 <ungetc>
    3626:	81 14       	cp	r8, r1
    3628:	91 04       	cpc	r9, r1
    362a:	a1 f0       	breq	.+40     	; 0x3654 <vfscanf+0x1f8>
    362c:	f4 01       	movw	r30, r8
    362e:	10 82       	st	Z, r1
    3630:	11 c0       	rjmp	.+34     	; 0x3654 <vfscanf+0x1f8>
    3632:	00 62       	ori	r16, 0x20	; 32
    3634:	03 c0       	rjmp	.+6      	; 0x363c <vfscanf+0x1e0>
    3636:	00 61       	ori	r16, 0x10	; 16
    3638:	01 c0       	rjmp	.+2      	; 0x363c <vfscanf+0x1e0>
    363a:	00 64       	ori	r16, 0x40	; 64
    363c:	20 2f       	mov	r18, r16
    363e:	a4 01       	movw	r20, r8
    3640:	6f 2d       	mov	r22, r15
    3642:	c6 01       	movw	r24, r12
    3644:	a8 dd       	rcall	.-1200   	; 0x3196 <conv_int>
    3646:	81 11       	cpse	r24, r1
    3648:	05 c0       	rjmp	.+10     	; 0x3654 <vfscanf+0x1f8>
    364a:	f6 01       	movw	r30, r12
    364c:	83 81       	ldd	r24, Z+3	; 0x03
    364e:	80 73       	andi	r24, 0x30	; 48
    3650:	29 f4       	brne	.+10     	; 0x365c <vfscanf+0x200>
    3652:	06 c0       	rjmp	.+12     	; 0x3660 <vfscanf+0x204>
    3654:	00 fd       	sbrc	r16, 0
    3656:	18 cf       	rjmp	.-464    	; 0x3488 <vfscanf+0x2c>
    3658:	53 94       	inc	r5
    365a:	16 cf       	rjmp	.-468    	; 0x3488 <vfscanf+0x2c>
    365c:	55 20       	and	r5, r5
    365e:	19 f0       	breq	.+6      	; 0x3666 <vfscanf+0x20a>
    3660:	85 2d       	mov	r24, r5
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	02 c0       	rjmp	.+4      	; 0x366a <vfscanf+0x20e>
    3666:	8f ef       	ldi	r24, 0xFF	; 255
    3668:	9f ef       	ldi	r25, 0xFF	; 255
    366a:	df 91       	pop	r29
    366c:	cf 91       	pop	r28
    366e:	1f 91       	pop	r17
    3670:	0f 91       	pop	r16
    3672:	ff 90       	pop	r15
    3674:	ef 90       	pop	r14
    3676:	df 90       	pop	r13
    3678:	cf 90       	pop	r12
    367a:	bf 90       	pop	r11
    367c:	af 90       	pop	r10
    367e:	9f 90       	pop	r9
    3680:	8f 90       	pop	r8
    3682:	7f 90       	pop	r7
    3684:	6f 90       	pop	r6
    3686:	5f 90       	pop	r5
    3688:	08 95       	ret

0000368a <calloc>:
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	86 9f       	mul	r24, r22
    3694:	80 01       	movw	r16, r0
    3696:	87 9f       	mul	r24, r23
    3698:	10 0d       	add	r17, r0
    369a:	96 9f       	mul	r25, r22
    369c:	10 0d       	add	r17, r0
    369e:	11 24       	eor	r1, r1
    36a0:	c8 01       	movw	r24, r16
    36a2:	0d d0       	rcall	.+26     	; 0x36be <malloc>
    36a4:	ec 01       	movw	r28, r24
    36a6:	00 97       	sbiw	r24, 0x00	; 0
    36a8:	21 f0       	breq	.+8      	; 0x36b2 <calloc+0x28>
    36aa:	a8 01       	movw	r20, r16
    36ac:	60 e0       	ldi	r22, 0x00	; 0
    36ae:	70 e0       	ldi	r23, 0x00	; 0
    36b0:	45 d1       	rcall	.+650    	; 0x393c <memset>
    36b2:	ce 01       	movw	r24, r28
    36b4:	df 91       	pop	r29
    36b6:	cf 91       	pop	r28
    36b8:	1f 91       	pop	r17
    36ba:	0f 91       	pop	r16
    36bc:	08 95       	ret

000036be <malloc>:
    36be:	0f 93       	push	r16
    36c0:	1f 93       	push	r17
    36c2:	cf 93       	push	r28
    36c4:	df 93       	push	r29
    36c6:	82 30       	cpi	r24, 0x02	; 2
    36c8:	91 05       	cpc	r25, r1
    36ca:	10 f4       	brcc	.+4      	; 0x36d0 <malloc+0x12>
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	e0 91 8a 21 	lds	r30, 0x218A	; 0x80218a <__flp>
    36d4:	f0 91 8b 21 	lds	r31, 0x218B	; 0x80218b <__flp+0x1>
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	a0 e0       	ldi	r26, 0x00	; 0
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	30 97       	sbiw	r30, 0x00	; 0
    36e2:	19 f1       	breq	.+70     	; 0x372a <malloc+0x6c>
    36e4:	40 81       	ld	r20, Z
    36e6:	51 81       	ldd	r21, Z+1	; 0x01
    36e8:	02 81       	ldd	r16, Z+2	; 0x02
    36ea:	13 81       	ldd	r17, Z+3	; 0x03
    36ec:	48 17       	cp	r20, r24
    36ee:	59 07       	cpc	r21, r25
    36f0:	c8 f0       	brcs	.+50     	; 0x3724 <malloc+0x66>
    36f2:	84 17       	cp	r24, r20
    36f4:	95 07       	cpc	r25, r21
    36f6:	69 f4       	brne	.+26     	; 0x3712 <malloc+0x54>
    36f8:	10 97       	sbiw	r26, 0x00	; 0
    36fa:	31 f0       	breq	.+12     	; 0x3708 <malloc+0x4a>
    36fc:	12 96       	adiw	r26, 0x02	; 2
    36fe:	0c 93       	st	X, r16
    3700:	12 97       	sbiw	r26, 0x02	; 2
    3702:	13 96       	adiw	r26, 0x03	; 3
    3704:	1c 93       	st	X, r17
    3706:	27 c0       	rjmp	.+78     	; 0x3756 <malloc+0x98>
    3708:	00 93 8a 21 	sts	0x218A, r16	; 0x80218a <__flp>
    370c:	10 93 8b 21 	sts	0x218B, r17	; 0x80218b <__flp+0x1>
    3710:	22 c0       	rjmp	.+68     	; 0x3756 <malloc+0x98>
    3712:	21 15       	cp	r18, r1
    3714:	31 05       	cpc	r19, r1
    3716:	19 f0       	breq	.+6      	; 0x371e <malloc+0x60>
    3718:	42 17       	cp	r20, r18
    371a:	53 07       	cpc	r21, r19
    371c:	18 f4       	brcc	.+6      	; 0x3724 <malloc+0x66>
    371e:	9a 01       	movw	r18, r20
    3720:	bd 01       	movw	r22, r26
    3722:	ef 01       	movw	r28, r30
    3724:	df 01       	movw	r26, r30
    3726:	f8 01       	movw	r30, r16
    3728:	db cf       	rjmp	.-74     	; 0x36e0 <malloc+0x22>
    372a:	21 15       	cp	r18, r1
    372c:	31 05       	cpc	r19, r1
    372e:	f9 f0       	breq	.+62     	; 0x376e <malloc+0xb0>
    3730:	28 1b       	sub	r18, r24
    3732:	39 0b       	sbc	r19, r25
    3734:	24 30       	cpi	r18, 0x04	; 4
    3736:	31 05       	cpc	r19, r1
    3738:	80 f4       	brcc	.+32     	; 0x375a <malloc+0x9c>
    373a:	8a 81       	ldd	r24, Y+2	; 0x02
    373c:	9b 81       	ldd	r25, Y+3	; 0x03
    373e:	61 15       	cp	r22, r1
    3740:	71 05       	cpc	r23, r1
    3742:	21 f0       	breq	.+8      	; 0x374c <malloc+0x8e>
    3744:	fb 01       	movw	r30, r22
    3746:	82 83       	std	Z+2, r24	; 0x02
    3748:	93 83       	std	Z+3, r25	; 0x03
    374a:	04 c0       	rjmp	.+8      	; 0x3754 <malloc+0x96>
    374c:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <__flp>
    3750:	90 93 8b 21 	sts	0x218B, r25	; 0x80218b <__flp+0x1>
    3754:	fe 01       	movw	r30, r28
    3756:	32 96       	adiw	r30, 0x02	; 2
    3758:	44 c0       	rjmp	.+136    	; 0x37e2 <malloc+0x124>
    375a:	fe 01       	movw	r30, r28
    375c:	e2 0f       	add	r30, r18
    375e:	f3 1f       	adc	r31, r19
    3760:	81 93       	st	Z+, r24
    3762:	91 93       	st	Z+, r25
    3764:	22 50       	subi	r18, 0x02	; 2
    3766:	31 09       	sbc	r19, r1
    3768:	28 83       	st	Y, r18
    376a:	39 83       	std	Y+1, r19	; 0x01
    376c:	3a c0       	rjmp	.+116    	; 0x37e2 <malloc+0x124>
    376e:	20 91 88 21 	lds	r18, 0x2188	; 0x802188 <__brkval>
    3772:	30 91 89 21 	lds	r19, 0x2189	; 0x802189 <__brkval+0x1>
    3776:	23 2b       	or	r18, r19
    3778:	41 f4       	brne	.+16     	; 0x378a <malloc+0xcc>
    377a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    377e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3782:	20 93 88 21 	sts	0x2188, r18	; 0x802188 <__brkval>
    3786:	30 93 89 21 	sts	0x2189, r19	; 0x802189 <__brkval+0x1>
    378a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    378e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3792:	21 15       	cp	r18, r1
    3794:	31 05       	cpc	r19, r1
    3796:	41 f4       	brne	.+16     	; 0x37a8 <malloc+0xea>
    3798:	2d b7       	in	r18, 0x3d	; 61
    379a:	3e b7       	in	r19, 0x3e	; 62
    379c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    37a0:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    37a4:	24 1b       	sub	r18, r20
    37a6:	35 0b       	sbc	r19, r21
    37a8:	e0 91 88 21 	lds	r30, 0x2188	; 0x802188 <__brkval>
    37ac:	f0 91 89 21 	lds	r31, 0x2189	; 0x802189 <__brkval+0x1>
    37b0:	e2 17       	cp	r30, r18
    37b2:	f3 07       	cpc	r31, r19
    37b4:	a0 f4       	brcc	.+40     	; 0x37de <malloc+0x120>
    37b6:	2e 1b       	sub	r18, r30
    37b8:	3f 0b       	sbc	r19, r31
    37ba:	28 17       	cp	r18, r24
    37bc:	39 07       	cpc	r19, r25
    37be:	78 f0       	brcs	.+30     	; 0x37de <malloc+0x120>
    37c0:	ac 01       	movw	r20, r24
    37c2:	4e 5f       	subi	r20, 0xFE	; 254
    37c4:	5f 4f       	sbci	r21, 0xFF	; 255
    37c6:	24 17       	cp	r18, r20
    37c8:	35 07       	cpc	r19, r21
    37ca:	48 f0       	brcs	.+18     	; 0x37de <malloc+0x120>
    37cc:	4e 0f       	add	r20, r30
    37ce:	5f 1f       	adc	r21, r31
    37d0:	40 93 88 21 	sts	0x2188, r20	; 0x802188 <__brkval>
    37d4:	50 93 89 21 	sts	0x2189, r21	; 0x802189 <__brkval+0x1>
    37d8:	81 93       	st	Z+, r24
    37da:	91 93       	st	Z+, r25
    37dc:	02 c0       	rjmp	.+4      	; 0x37e2 <malloc+0x124>
    37de:	e0 e0       	ldi	r30, 0x00	; 0
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	cf 01       	movw	r24, r30
    37e4:	df 91       	pop	r29
    37e6:	cf 91       	pop	r28
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	08 95       	ret

000037ee <free>:
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <free+0xa>
    37f6:	81 c0       	rjmp	.+258    	; 0x38fa <free+0x10c>
    37f8:	fc 01       	movw	r30, r24
    37fa:	32 97       	sbiw	r30, 0x02	; 2
    37fc:	12 82       	std	Z+2, r1	; 0x02
    37fe:	13 82       	std	Z+3, r1	; 0x03
    3800:	a0 91 8a 21 	lds	r26, 0x218A	; 0x80218a <__flp>
    3804:	b0 91 8b 21 	lds	r27, 0x218B	; 0x80218b <__flp+0x1>
    3808:	10 97       	sbiw	r26, 0x00	; 0
    380a:	81 f4       	brne	.+32     	; 0x382c <free+0x3e>
    380c:	20 81       	ld	r18, Z
    380e:	31 81       	ldd	r19, Z+1	; 0x01
    3810:	82 0f       	add	r24, r18
    3812:	93 1f       	adc	r25, r19
    3814:	20 91 88 21 	lds	r18, 0x2188	; 0x802188 <__brkval>
    3818:	30 91 89 21 	lds	r19, 0x2189	; 0x802189 <__brkval+0x1>
    381c:	28 17       	cp	r18, r24
    381e:	39 07       	cpc	r19, r25
    3820:	51 f5       	brne	.+84     	; 0x3876 <free+0x88>
    3822:	e0 93 88 21 	sts	0x2188, r30	; 0x802188 <__brkval>
    3826:	f0 93 89 21 	sts	0x2189, r31	; 0x802189 <__brkval+0x1>
    382a:	67 c0       	rjmp	.+206    	; 0x38fa <free+0x10c>
    382c:	ed 01       	movw	r28, r26
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	ce 17       	cp	r28, r30
    3834:	df 07       	cpc	r29, r31
    3836:	40 f4       	brcc	.+16     	; 0x3848 <free+0x5a>
    3838:	4a 81       	ldd	r20, Y+2	; 0x02
    383a:	5b 81       	ldd	r21, Y+3	; 0x03
    383c:	9e 01       	movw	r18, r28
    383e:	41 15       	cp	r20, r1
    3840:	51 05       	cpc	r21, r1
    3842:	f1 f0       	breq	.+60     	; 0x3880 <free+0x92>
    3844:	ea 01       	movw	r28, r20
    3846:	f5 cf       	rjmp	.-22     	; 0x3832 <free+0x44>
    3848:	c2 83       	std	Z+2, r28	; 0x02
    384a:	d3 83       	std	Z+3, r29	; 0x03
    384c:	40 81       	ld	r20, Z
    384e:	51 81       	ldd	r21, Z+1	; 0x01
    3850:	84 0f       	add	r24, r20
    3852:	95 1f       	adc	r25, r21
    3854:	c8 17       	cp	r28, r24
    3856:	d9 07       	cpc	r29, r25
    3858:	59 f4       	brne	.+22     	; 0x3870 <free+0x82>
    385a:	88 81       	ld	r24, Y
    385c:	99 81       	ldd	r25, Y+1	; 0x01
    385e:	84 0f       	add	r24, r20
    3860:	95 1f       	adc	r25, r21
    3862:	02 96       	adiw	r24, 0x02	; 2
    3864:	80 83       	st	Z, r24
    3866:	91 83       	std	Z+1, r25	; 0x01
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	9b 81       	ldd	r25, Y+3	; 0x03
    386c:	82 83       	std	Z+2, r24	; 0x02
    386e:	93 83       	std	Z+3, r25	; 0x03
    3870:	21 15       	cp	r18, r1
    3872:	31 05       	cpc	r19, r1
    3874:	29 f4       	brne	.+10     	; 0x3880 <free+0x92>
    3876:	e0 93 8a 21 	sts	0x218A, r30	; 0x80218a <__flp>
    387a:	f0 93 8b 21 	sts	0x218B, r31	; 0x80218b <__flp+0x1>
    387e:	3d c0       	rjmp	.+122    	; 0x38fa <free+0x10c>
    3880:	e9 01       	movw	r28, r18
    3882:	ea 83       	std	Y+2, r30	; 0x02
    3884:	fb 83       	std	Y+3, r31	; 0x03
    3886:	49 91       	ld	r20, Y+
    3888:	59 91       	ld	r21, Y+
    388a:	c4 0f       	add	r28, r20
    388c:	d5 1f       	adc	r29, r21
    388e:	ec 17       	cp	r30, r28
    3890:	fd 07       	cpc	r31, r29
    3892:	61 f4       	brne	.+24     	; 0x38ac <free+0xbe>
    3894:	80 81       	ld	r24, Z
    3896:	91 81       	ldd	r25, Z+1	; 0x01
    3898:	84 0f       	add	r24, r20
    389a:	95 1f       	adc	r25, r21
    389c:	02 96       	adiw	r24, 0x02	; 2
    389e:	e9 01       	movw	r28, r18
    38a0:	88 83       	st	Y, r24
    38a2:	99 83       	std	Y+1, r25	; 0x01
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	8a 83       	std	Y+2, r24	; 0x02
    38aa:	9b 83       	std	Y+3, r25	; 0x03
    38ac:	e0 e0       	ldi	r30, 0x00	; 0
    38ae:	f0 e0       	ldi	r31, 0x00	; 0
    38b0:	12 96       	adiw	r26, 0x02	; 2
    38b2:	8d 91       	ld	r24, X+
    38b4:	9c 91       	ld	r25, X
    38b6:	13 97       	sbiw	r26, 0x03	; 3
    38b8:	00 97       	sbiw	r24, 0x00	; 0
    38ba:	19 f0       	breq	.+6      	; 0x38c2 <free+0xd4>
    38bc:	fd 01       	movw	r30, r26
    38be:	dc 01       	movw	r26, r24
    38c0:	f7 cf       	rjmp	.-18     	; 0x38b0 <free+0xc2>
    38c2:	8d 91       	ld	r24, X+
    38c4:	9c 91       	ld	r25, X
    38c6:	11 97       	sbiw	r26, 0x01	; 1
    38c8:	9d 01       	movw	r18, r26
    38ca:	2e 5f       	subi	r18, 0xFE	; 254
    38cc:	3f 4f       	sbci	r19, 0xFF	; 255
    38ce:	82 0f       	add	r24, r18
    38d0:	93 1f       	adc	r25, r19
    38d2:	20 91 88 21 	lds	r18, 0x2188	; 0x802188 <__brkval>
    38d6:	30 91 89 21 	lds	r19, 0x2189	; 0x802189 <__brkval+0x1>
    38da:	28 17       	cp	r18, r24
    38dc:	39 07       	cpc	r19, r25
    38de:	69 f4       	brne	.+26     	; 0x38fa <free+0x10c>
    38e0:	30 97       	sbiw	r30, 0x00	; 0
    38e2:	29 f4       	brne	.+10     	; 0x38ee <free+0x100>
    38e4:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <__flp>
    38e8:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <__flp+0x1>
    38ec:	02 c0       	rjmp	.+4      	; 0x38f2 <free+0x104>
    38ee:	12 82       	std	Z+2, r1	; 0x02
    38f0:	13 82       	std	Z+3, r1	; 0x03
    38f2:	a0 93 88 21 	sts	0x2188, r26	; 0x802188 <__brkval>
    38f6:	b0 93 89 21 	sts	0x2189, r27	; 0x802189 <__brkval+0x1>
    38fa:	df 91       	pop	r29
    38fc:	cf 91       	pop	r28
    38fe:	08 95       	ret

00003900 <isspace>:
    3900:	91 11       	cpse	r25, r1
    3902:	1f c1       	rjmp	.+574    	; 0x3b42 <__ctype_isfalse>
    3904:	80 32       	cpi	r24, 0x20	; 32
    3906:	19 f0       	breq	.+6      	; 0x390e <isspace+0xe>
    3908:	89 50       	subi	r24, 0x09	; 9
    390a:	85 50       	subi	r24, 0x05	; 5
    390c:	d0 f7       	brcc	.-12     	; 0x3902 <isspace+0x2>
    390e:	08 95       	ret

00003910 <strchr_P>:
    3910:	fc 01       	movw	r30, r24
    3912:	05 90       	lpm	r0, Z+
    3914:	06 16       	cp	r0, r22
    3916:	21 f0       	breq	.+8      	; 0x3920 <strchr_P+0x10>
    3918:	00 20       	and	r0, r0
    391a:	d9 f7       	brne	.-10     	; 0x3912 <strchr_P+0x2>
    391c:	c0 01       	movw	r24, r0
    391e:	08 95       	ret
    3920:	31 97       	sbiw	r30, 0x01	; 1
    3922:	cf 01       	movw	r24, r30
    3924:	08 95       	ret

00003926 <strnlen_P>:
    3926:	fc 01       	movw	r30, r24
    3928:	05 90       	lpm	r0, Z+
    392a:	61 50       	subi	r22, 0x01	; 1
    392c:	70 40       	sbci	r23, 0x00	; 0
    392e:	01 10       	cpse	r0, r1
    3930:	d8 f7       	brcc	.-10     	; 0x3928 <strnlen_P+0x2>
    3932:	80 95       	com	r24
    3934:	90 95       	com	r25
    3936:	8e 0f       	add	r24, r30
    3938:	9f 1f       	adc	r25, r31
    393a:	08 95       	ret

0000393c <memset>:
    393c:	dc 01       	movw	r26, r24
    393e:	01 c0       	rjmp	.+2      	; 0x3942 <memset+0x6>
    3940:	6d 93       	st	X+, r22
    3942:	41 50       	subi	r20, 0x01	; 1
    3944:	50 40       	sbci	r21, 0x00	; 0
    3946:	e0 f7       	brcc	.-8      	; 0x3940 <memset+0x4>
    3948:	08 95       	ret

0000394a <strnlen>:
    394a:	fc 01       	movw	r30, r24
    394c:	61 50       	subi	r22, 0x01	; 1
    394e:	70 40       	sbci	r23, 0x00	; 0
    3950:	01 90       	ld	r0, Z+
    3952:	01 10       	cpse	r0, r1
    3954:	d8 f7       	brcc	.-10     	; 0x394c <strnlen+0x2>
    3956:	80 95       	com	r24
    3958:	90 95       	com	r25
    395a:	8e 0f       	add	r24, r30
    395c:	9f 1f       	adc	r25, r31
    395e:	08 95       	ret

00003960 <fgetc>:
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	ec 01       	movw	r28, r24
    3966:	2b 81       	ldd	r18, Y+3	; 0x03
    3968:	20 ff       	sbrs	r18, 0
    396a:	33 c0       	rjmp	.+102    	; 0x39d2 <fgetc+0x72>
    396c:	26 ff       	sbrs	r18, 6
    396e:	0a c0       	rjmp	.+20     	; 0x3984 <fgetc+0x24>
    3970:	2f 7b       	andi	r18, 0xBF	; 191
    3972:	2b 83       	std	Y+3, r18	; 0x03
    3974:	8e 81       	ldd	r24, Y+6	; 0x06
    3976:	9f 81       	ldd	r25, Y+7	; 0x07
    3978:	01 96       	adiw	r24, 0x01	; 1
    397a:	8e 83       	std	Y+6, r24	; 0x06
    397c:	9f 83       	std	Y+7, r25	; 0x07
    397e:	8a 81       	ldd	r24, Y+2	; 0x02
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	29 c0       	rjmp	.+82     	; 0x39d6 <fgetc+0x76>
    3984:	22 ff       	sbrs	r18, 2
    3986:	0f c0       	rjmp	.+30     	; 0x39a6 <fgetc+0x46>
    3988:	e8 81       	ld	r30, Y
    398a:	f9 81       	ldd	r31, Y+1	; 0x01
    398c:	80 81       	ld	r24, Z
    398e:	08 2e       	mov	r0, r24
    3990:	00 0c       	add	r0, r0
    3992:	99 0b       	sbc	r25, r25
    3994:	00 97       	sbiw	r24, 0x00	; 0
    3996:	19 f4       	brne	.+6      	; 0x399e <fgetc+0x3e>
    3998:	20 62       	ori	r18, 0x20	; 32
    399a:	2b 83       	std	Y+3, r18	; 0x03
    399c:	1a c0       	rjmp	.+52     	; 0x39d2 <fgetc+0x72>
    399e:	31 96       	adiw	r30, 0x01	; 1
    39a0:	e8 83       	st	Y, r30
    39a2:	f9 83       	std	Y+1, r31	; 0x01
    39a4:	0e c0       	rjmp	.+28     	; 0x39c2 <fgetc+0x62>
    39a6:	ea 85       	ldd	r30, Y+10	; 0x0a
    39a8:	fb 85       	ldd	r31, Y+11	; 0x0b
    39aa:	19 95       	eicall
    39ac:	97 ff       	sbrs	r25, 7
    39ae:	09 c0       	rjmp	.+18     	; 0x39c2 <fgetc+0x62>
    39b0:	2b 81       	ldd	r18, Y+3	; 0x03
    39b2:	01 96       	adiw	r24, 0x01	; 1
    39b4:	11 f0       	breq	.+4      	; 0x39ba <fgetc+0x5a>
    39b6:	80 e2       	ldi	r24, 0x20	; 32
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <fgetc+0x5c>
    39ba:	80 e1       	ldi	r24, 0x10	; 16
    39bc:	82 2b       	or	r24, r18
    39be:	8b 83       	std	Y+3, r24	; 0x03
    39c0:	08 c0       	rjmp	.+16     	; 0x39d2 <fgetc+0x72>
    39c2:	2e 81       	ldd	r18, Y+6	; 0x06
    39c4:	3f 81       	ldd	r19, Y+7	; 0x07
    39c6:	2f 5f       	subi	r18, 0xFF	; 255
    39c8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ca:	2e 83       	std	Y+6, r18	; 0x06
    39cc:	3f 83       	std	Y+7, r19	; 0x07
    39ce:	99 27       	eor	r25, r25
    39d0:	02 c0       	rjmp	.+4      	; 0x39d6 <fgetc+0x76>
    39d2:	8f ef       	ldi	r24, 0xFF	; 255
    39d4:	9f ef       	ldi	r25, 0xFF	; 255
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	08 95       	ret

000039dc <fputc>:
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
    39e4:	fb 01       	movw	r30, r22
    39e6:	23 81       	ldd	r18, Z+3	; 0x03
    39e8:	21 fd       	sbrc	r18, 1
    39ea:	03 c0       	rjmp	.+6      	; 0x39f2 <fputc+0x16>
    39ec:	8f ef       	ldi	r24, 0xFF	; 255
    39ee:	9f ef       	ldi	r25, 0xFF	; 255
    39f0:	2c c0       	rjmp	.+88     	; 0x3a4a <fputc+0x6e>
    39f2:	22 ff       	sbrs	r18, 2
    39f4:	16 c0       	rjmp	.+44     	; 0x3a22 <fputc+0x46>
    39f6:	46 81       	ldd	r20, Z+6	; 0x06
    39f8:	57 81       	ldd	r21, Z+7	; 0x07
    39fa:	24 81       	ldd	r18, Z+4	; 0x04
    39fc:	35 81       	ldd	r19, Z+5	; 0x05
    39fe:	42 17       	cp	r20, r18
    3a00:	53 07       	cpc	r21, r19
    3a02:	44 f4       	brge	.+16     	; 0x3a14 <fputc+0x38>
    3a04:	a0 81       	ld	r26, Z
    3a06:	b1 81       	ldd	r27, Z+1	; 0x01
    3a08:	9d 01       	movw	r18, r26
    3a0a:	2f 5f       	subi	r18, 0xFF	; 255
    3a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0e:	20 83       	st	Z, r18
    3a10:	31 83       	std	Z+1, r19	; 0x01
    3a12:	8c 93       	st	X, r24
    3a14:	26 81       	ldd	r18, Z+6	; 0x06
    3a16:	37 81       	ldd	r19, Z+7	; 0x07
    3a18:	2f 5f       	subi	r18, 0xFF	; 255
    3a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1c:	26 83       	std	Z+6, r18	; 0x06
    3a1e:	37 83       	std	Z+7, r19	; 0x07
    3a20:	14 c0       	rjmp	.+40     	; 0x3a4a <fputc+0x6e>
    3a22:	8b 01       	movw	r16, r22
    3a24:	ec 01       	movw	r28, r24
    3a26:	fb 01       	movw	r30, r22
    3a28:	00 84       	ldd	r0, Z+8	; 0x08
    3a2a:	f1 85       	ldd	r31, Z+9	; 0x09
    3a2c:	e0 2d       	mov	r30, r0
    3a2e:	19 95       	eicall
    3a30:	89 2b       	or	r24, r25
    3a32:	e1 f6       	brne	.-72     	; 0x39ec <fputc+0x10>
    3a34:	d8 01       	movw	r26, r16
    3a36:	16 96       	adiw	r26, 0x06	; 6
    3a38:	8d 91       	ld	r24, X+
    3a3a:	9c 91       	ld	r25, X
    3a3c:	17 97       	sbiw	r26, 0x07	; 7
    3a3e:	01 96       	adiw	r24, 0x01	; 1
    3a40:	16 96       	adiw	r26, 0x06	; 6
    3a42:	8d 93       	st	X+, r24
    3a44:	9c 93       	st	X, r25
    3a46:	17 97       	sbiw	r26, 0x07	; 7
    3a48:	ce 01       	movw	r24, r28
    3a4a:	df 91       	pop	r29
    3a4c:	cf 91       	pop	r28
    3a4e:	1f 91       	pop	r17
    3a50:	0f 91       	pop	r16
    3a52:	08 95       	ret

00003a54 <ungetc>:
    3a54:	fb 01       	movw	r30, r22
    3a56:	23 81       	ldd	r18, Z+3	; 0x03
    3a58:	20 ff       	sbrs	r18, 0
    3a5a:	12 c0       	rjmp	.+36     	; 0x3a80 <ungetc+0x2c>
    3a5c:	26 fd       	sbrc	r18, 6
    3a5e:	10 c0       	rjmp	.+32     	; 0x3a80 <ungetc+0x2c>
    3a60:	8f 3f       	cpi	r24, 0xFF	; 255
    3a62:	3f ef       	ldi	r19, 0xFF	; 255
    3a64:	93 07       	cpc	r25, r19
    3a66:	61 f0       	breq	.+24     	; 0x3a80 <ungetc+0x2c>
    3a68:	82 83       	std	Z+2, r24	; 0x02
    3a6a:	2f 7d       	andi	r18, 0xDF	; 223
    3a6c:	20 64       	ori	r18, 0x40	; 64
    3a6e:	23 83       	std	Z+3, r18	; 0x03
    3a70:	26 81       	ldd	r18, Z+6	; 0x06
    3a72:	37 81       	ldd	r19, Z+7	; 0x07
    3a74:	21 50       	subi	r18, 0x01	; 1
    3a76:	31 09       	sbc	r19, r1
    3a78:	26 83       	std	Z+6, r18	; 0x06
    3a7a:	37 83       	std	Z+7, r19	; 0x07
    3a7c:	99 27       	eor	r25, r25
    3a7e:	08 95       	ret
    3a80:	8f ef       	ldi	r24, 0xFF	; 255
    3a82:	9f ef       	ldi	r25, 0xFF	; 255
    3a84:	08 95       	ret

00003a86 <__ultoa_invert>:
    3a86:	fa 01       	movw	r30, r20
    3a88:	aa 27       	eor	r26, r26
    3a8a:	28 30       	cpi	r18, 0x08	; 8
    3a8c:	51 f1       	breq	.+84     	; 0x3ae2 <__ultoa_invert+0x5c>
    3a8e:	20 31       	cpi	r18, 0x10	; 16
    3a90:	81 f1       	breq	.+96     	; 0x3af2 <__ultoa_invert+0x6c>
    3a92:	e8 94       	clt
    3a94:	6f 93       	push	r22
    3a96:	6e 7f       	andi	r22, 0xFE	; 254
    3a98:	6e 5f       	subi	r22, 0xFE	; 254
    3a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa0:	af 4f       	sbci	r26, 0xFF	; 255
    3aa2:	b1 e0       	ldi	r27, 0x01	; 1
    3aa4:	3e d0       	rcall	.+124    	; 0x3b22 <__ultoa_invert+0x9c>
    3aa6:	b4 e0       	ldi	r27, 0x04	; 4
    3aa8:	3c d0       	rcall	.+120    	; 0x3b22 <__ultoa_invert+0x9c>
    3aaa:	67 0f       	add	r22, r23
    3aac:	78 1f       	adc	r23, r24
    3aae:	89 1f       	adc	r24, r25
    3ab0:	9a 1f       	adc	r25, r26
    3ab2:	a1 1d       	adc	r26, r1
    3ab4:	68 0f       	add	r22, r24
    3ab6:	79 1f       	adc	r23, r25
    3ab8:	8a 1f       	adc	r24, r26
    3aba:	91 1d       	adc	r25, r1
    3abc:	a1 1d       	adc	r26, r1
    3abe:	6a 0f       	add	r22, r26
    3ac0:	71 1d       	adc	r23, r1
    3ac2:	81 1d       	adc	r24, r1
    3ac4:	91 1d       	adc	r25, r1
    3ac6:	a1 1d       	adc	r26, r1
    3ac8:	20 d0       	rcall	.+64     	; 0x3b0a <__ultoa_invert+0x84>
    3aca:	09 f4       	brne	.+2      	; 0x3ace <__ultoa_invert+0x48>
    3acc:	68 94       	set
    3ace:	3f 91       	pop	r19
    3ad0:	2a e0       	ldi	r18, 0x0A	; 10
    3ad2:	26 9f       	mul	r18, r22
    3ad4:	11 24       	eor	r1, r1
    3ad6:	30 19       	sub	r19, r0
    3ad8:	30 5d       	subi	r19, 0xD0	; 208
    3ada:	31 93       	st	Z+, r19
    3adc:	de f6       	brtc	.-74     	; 0x3a94 <__ultoa_invert+0xe>
    3ade:	cf 01       	movw	r24, r30
    3ae0:	08 95       	ret
    3ae2:	46 2f       	mov	r20, r22
    3ae4:	47 70       	andi	r20, 0x07	; 7
    3ae6:	40 5d       	subi	r20, 0xD0	; 208
    3ae8:	41 93       	st	Z+, r20
    3aea:	b3 e0       	ldi	r27, 0x03	; 3
    3aec:	0f d0       	rcall	.+30     	; 0x3b0c <__ultoa_invert+0x86>
    3aee:	c9 f7       	brne	.-14     	; 0x3ae2 <__ultoa_invert+0x5c>
    3af0:	f6 cf       	rjmp	.-20     	; 0x3ade <__ultoa_invert+0x58>
    3af2:	46 2f       	mov	r20, r22
    3af4:	4f 70       	andi	r20, 0x0F	; 15
    3af6:	40 5d       	subi	r20, 0xD0	; 208
    3af8:	4a 33       	cpi	r20, 0x3A	; 58
    3afa:	18 f0       	brcs	.+6      	; 0x3b02 <__ultoa_invert+0x7c>
    3afc:	49 5d       	subi	r20, 0xD9	; 217
    3afe:	31 fd       	sbrc	r19, 1
    3b00:	40 52       	subi	r20, 0x20	; 32
    3b02:	41 93       	st	Z+, r20
    3b04:	02 d0       	rcall	.+4      	; 0x3b0a <__ultoa_invert+0x84>
    3b06:	a9 f7       	brne	.-22     	; 0x3af2 <__ultoa_invert+0x6c>
    3b08:	ea cf       	rjmp	.-44     	; 0x3ade <__ultoa_invert+0x58>
    3b0a:	b4 e0       	ldi	r27, 0x04	; 4
    3b0c:	a6 95       	lsr	r26
    3b0e:	97 95       	ror	r25
    3b10:	87 95       	ror	r24
    3b12:	77 95       	ror	r23
    3b14:	67 95       	ror	r22
    3b16:	ba 95       	dec	r27
    3b18:	c9 f7       	brne	.-14     	; 0x3b0c <__ultoa_invert+0x86>
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	61 05       	cpc	r22, r1
    3b1e:	71 05       	cpc	r23, r1
    3b20:	08 95       	ret
    3b22:	9b 01       	movw	r18, r22
    3b24:	ac 01       	movw	r20, r24
    3b26:	0a 2e       	mov	r0, r26
    3b28:	06 94       	lsr	r0
    3b2a:	57 95       	ror	r21
    3b2c:	47 95       	ror	r20
    3b2e:	37 95       	ror	r19
    3b30:	27 95       	ror	r18
    3b32:	ba 95       	dec	r27
    3b34:	c9 f7       	brne	.-14     	; 0x3b28 <__ultoa_invert+0xa2>
    3b36:	62 0f       	add	r22, r18
    3b38:	73 1f       	adc	r23, r19
    3b3a:	84 1f       	adc	r24, r20
    3b3c:	95 1f       	adc	r25, r21
    3b3e:	a0 1d       	adc	r26, r0
    3b40:	08 95       	ret

00003b42 <__ctype_isfalse>:
    3b42:	99 27       	eor	r25, r25
    3b44:	88 27       	eor	r24, r24

00003b46 <__ctype_istrue>:
    3b46:	08 95       	ret

00003b48 <_exit>:
    3b48:	f8 94       	cli

00003b4a <__stop_program>:
    3b4a:	ff cf       	rjmp	.-2      	; 0x3b4a <__stop_program>
