
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000463c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00802000  0000463c  000046d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e0  008020ae  008020ae  0000477e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000477e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000047dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00004820  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014c20  00000000  00000000  00004cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005cd2  00000000  00000000  00019918  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000088f1  00000000  00000000  0001f5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013d4  00000000  00000000  00027edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033667  00000000  00000000  000292b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005220  00000000  00000000  0005c917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  00061b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000031af  00000000  00000000  00061fbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3c c2       	rjmp	.+1144   	; 0x516 <__vector_39>
      9e:	00 00       	nop
      a0:	77 c2       	rjmp	.+1262   	; 0x590 <__vector_40>
      a2:	00 00       	nop
      a4:	b2 c2       	rjmp	.+1380   	; 0x60a <__vector_41>
      a6:	00 00       	nop
      a8:	ed c2       	rjmp	.+1498   	; 0x684 <__vector_42>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 37 12 	jmp	0x246e	; 0x246e <__vector_47>
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__vector_58>
      ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
     102:	00 00       	nop
     104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
     106:	00 00       	nop
     108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
     112:	00 00       	nop
     114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
     116:	00 00       	nop
     118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
     136:	00 00       	nop
     138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
     142:	00 00       	nop
     144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
     146:	00 00       	nop
     148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
     152:	00 00       	nop
     154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
     156:	00 00       	nop
     158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
     162:	00 00       	nop
     164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
     166:	00 00       	nop
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__vector_91>
     170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
     172:	00 00       	nop
     174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
     176:	00 00       	nop
     178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
     182:	00 00       	nop
     184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
     186:	00 00       	nop
     188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
     192:	00 00       	nop
     194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
     196:	00 00       	nop
     198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6e c0       	rjmp	.+220    	; 0x2d6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <usart_init_rs232+0x138>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	63 64       	ori	r22, 0x43	; 67
     280:	69 6e       	ori	r22, 0xE9	; 233
     282:	6f 70       	andi	r22, 0x0F	; 15
     284:	73 75       	andi	r23, 0x53	; 83
     286:	78 58       	subi	r23, 0x88	; 136
     288:	5b 00       	.word	0x005b	; ????

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df e3       	ldi	r29, 0x3F	; 63
     294:	de bf       	out	0x3e, r29	; 62
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0c bf       	out	0x3c, r16	; 60
     29a:	18 be       	out	0x38, r1	; 56
     29c:	19 be       	out	0x39, r1	; 57
     29e:	1a be       	out	0x3a, r1	; 58
     2a0:	1b be       	out	0x3b, r1	; 59

000002a2 <__do_copy_data>:
     2a2:	10 e2       	ldi	r17, 0x20	; 32
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e2       	ldi	r27, 0x20	; 32
     2a8:	ec e3       	ldi	r30, 0x3C	; 60
     2aa:	f6 e4       	ldi	r31, 0x46	; 70
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	ae 3a       	cpi	r26, 0xAE	; 174
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>
     2bc:	1b be       	out	0x3b, r1	; 59

000002be <__do_clear_bss>:
     2be:	21 e2       	ldi	r18, 0x21	; 33
     2c0:	ae ea       	ldi	r26, 0xAE	; 174
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	ae 38       	cpi	r26, 0x8E	; 142
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 03 11 	call	0x2206	; 0x2206 <main>
     2d2:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2e2:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <stdio_base>
     2e6:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <stdio_base+0x1>
     2ea:	e0 91 02 21 	lds	r30, 0x2102	; 0x802102 <ptr_get>
     2ee:	f0 91 03 21 	lds	r31, 0x2103	; 0x802103 <ptr_get+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	19 95       	eicall
	return c;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     30a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     30c:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <stdio_base>
     310:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <stdio_base+0x1>
     314:	e0 91 04 21 	lds	r30, 0x2104	; 0x802104 <ptr_put>
     318:	f0 91 05 21 	lds	r31, 0x2105	; 0x802105 <ptr_put+0x1>
     31c:	19 95       	eicall
     31e:	99 23       	and	r25, r25
     320:	1c f0       	brlt	.+6      	; 0x328 <_write+0x1e>
		return -1;
	}
	return 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <adca_callback>
     36e:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <adca_callback>
     3e8:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <adca_callback>
     462:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <adca_callback>
     4dc:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	08 b6       	in	r0, 0x38	; 56
     522:	0f 92       	push	r0
     524:	18 be       	out	0x38, r1	; 56
     526:	09 b6       	in	r0, 0x39	; 57
     528:	0f 92       	push	r0
     52a:	19 be       	out	0x39, r1	; 57
     52c:	0b b6       	in	r0, 0x3b	; 59
     52e:	0f 92       	push	r0
     530:	1b be       	out	0x3b, r1	; 59
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	6f 93       	push	r22
     53c:	7f 93       	push	r23
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
     546:	ef 93       	push	r30
     548:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     54a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     54e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     552:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adcb_callback>
     556:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adcb_callback+0x1>
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	80 e4       	ldi	r24, 0x40	; 64
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	19 95       	eicall
}
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	7f 91       	pop	r23
     570:	6f 91       	pop	r22
     572:	5f 91       	pop	r21
     574:	4f 91       	pop	r20
     576:	3f 91       	pop	r19
     578:	2f 91       	pop	r18
     57a:	0f 90       	pop	r0
     57c:	0b be       	out	0x3b, r0	; 59
     57e:	0f 90       	pop	r0
     580:	09 be       	out	0x39, r0	; 57
     582:	0f 90       	pop	r0
     584:	08 be       	out	0x38, r0	; 56
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     590:	1f 92       	push	r1
     592:	0f 92       	push	r0
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	0f 92       	push	r0
     598:	11 24       	eor	r1, r1
     59a:	08 b6       	in	r0, 0x38	; 56
     59c:	0f 92       	push	r0
     59e:	18 be       	out	0x38, r1	; 56
     5a0:	09 b6       	in	r0, 0x39	; 57
     5a2:	0f 92       	push	r0
     5a4:	19 be       	out	0x39, r1	; 57
     5a6:	0b b6       	in	r0, 0x3b	; 59
     5a8:	0f 92       	push	r0
     5aa:	1b be       	out	0x3b, r1	; 59
     5ac:	2f 93       	push	r18
     5ae:	3f 93       	push	r19
     5b0:	4f 93       	push	r20
     5b2:	5f 93       	push	r21
     5b4:	6f 93       	push	r22
     5b6:	7f 93       	push	r23
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	af 93       	push	r26
     5be:	bf 93       	push	r27
     5c0:	ef 93       	push	r30
     5c2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5c4:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5c8:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5cc:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adcb_callback>
     5d0:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adcb_callback+0x1>
     5d4:	62 e0       	ldi	r22, 0x02	; 2
     5d6:	80 e4       	ldi	r24, 0x40	; 64
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	19 95       	eicall
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0b be       	out	0x3b, r0	; 59
     5f8:	0f 90       	pop	r0
     5fa:	09 be       	out	0x39, r0	; 57
     5fc:	0f 90       	pop	r0
     5fe:	08 be       	out	0x38, r0	; 56
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	08 b6       	in	r0, 0x38	; 56
     616:	0f 92       	push	r0
     618:	18 be       	out	0x38, r1	; 56
     61a:	09 b6       	in	r0, 0x39	; 57
     61c:	0f 92       	push	r0
     61e:	19 be       	out	0x39, r1	; 57
     620:	0b b6       	in	r0, 0x3b	; 59
     622:	0f 92       	push	r0
     624:	1b be       	out	0x3b, r1	; 59
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     63e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     642:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     646:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adcb_callback>
     64a:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adcb_callback+0x1>
     64e:	64 e0       	ldi	r22, 0x04	; 4
     650:	80 e4       	ldi	r24, 0x40	; 64
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	19 95       	eicall
}
     656:	ff 91       	pop	r31
     658:	ef 91       	pop	r30
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	7f 91       	pop	r23
     664:	6f 91       	pop	r22
     666:	5f 91       	pop	r21
     668:	4f 91       	pop	r20
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	0f 90       	pop	r0
     670:	0b be       	out	0x3b, r0	; 59
     672:	0f 90       	pop	r0
     674:	09 be       	out	0x39, r0	; 57
     676:	0f 90       	pop	r0
     678:	08 be       	out	0x38, r0	; 56
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     684:	1f 92       	push	r1
     686:	0f 92       	push	r0
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	0f 92       	push	r0
     68c:	11 24       	eor	r1, r1
     68e:	08 b6       	in	r0, 0x38	; 56
     690:	0f 92       	push	r0
     692:	18 be       	out	0x38, r1	; 56
     694:	09 b6       	in	r0, 0x39	; 57
     696:	0f 92       	push	r0
     698:	19 be       	out	0x39, r1	; 57
     69a:	0b b6       	in	r0, 0x3b	; 59
     69c:	0f 92       	push	r0
     69e:	1b be       	out	0x3b, r1	; 59
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6b8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6bc:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6c0:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <adcb_callback>
     6c4:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <adcb_callback+0x1>
     6c8:	68 e0       	ldi	r22, 0x08	; 8
     6ca:	80 e4       	ldi	r24, 0x40	; 64
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	19 95       	eicall
}
     6d0:	ff 91       	pop	r31
     6d2:	ef 91       	pop	r30
     6d4:	bf 91       	pop	r27
     6d6:	af 91       	pop	r26
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	7f 91       	pop	r23
     6de:	6f 91       	pop	r22
     6e0:	5f 91       	pop	r21
     6e2:	4f 91       	pop	r20
     6e4:	3f 91       	pop	r19
     6e6:	2f 91       	pop	r18
     6e8:	0f 90       	pop	r0
     6ea:	0b be       	out	0x3b, r0	; 59
     6ec:	0f 90       	pop	r0
     6ee:	09 be       	out	0x39, r0	; 57
     6f0:	0f 90       	pop	r0
     6f2:	08 be       	out	0x38, r0	; 56
     6f4:	0f 90       	pop	r0
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	0f 90       	pop	r0
     6fa:	1f 90       	pop	r1
     6fc:	18 95       	reti

000006fe <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6fe:	fc 01       	movw	r30, r24
     700:	91 81       	ldd	r25, Z+1	; 0x01
     702:	95 ff       	sbrs	r25, 5
     704:	fd cf       	rjmp	.-6      	; 0x700 <usart_putchar+0x2>
     706:	60 83       	st	Z, r22
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	08 95       	ret

0000070e <usart_getchar>:
     70e:	fc 01       	movw	r30, r24
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	99 23       	and	r25, r25
     714:	ec f7       	brge	.-6      	; 0x710 <usart_getchar+0x2>
     716:	80 81       	ld	r24, Z
     718:	08 95       	ret

0000071a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     71a:	4f 92       	push	r4
     71c:	5f 92       	push	r5
     71e:	6f 92       	push	r6
     720:	7f 92       	push	r7
     722:	8f 92       	push	r8
     724:	9f 92       	push	r9
     726:	af 92       	push	r10
     728:	bf 92       	push	r11
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	7c 01       	movw	r14, r24
     736:	4a 01       	movw	r8, r20
     738:	5b 01       	movw	r10, r22
     73a:	28 01       	movw	r4, r16
     73c:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     73e:	fc 01       	movw	r30, r24
     740:	84 81       	ldd	r24, Z+4	; 0x04
     742:	82 ff       	sbrs	r24, 2
     744:	16 c0       	rjmp	.+44     	; 0x772 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     746:	d9 01       	movw	r26, r18
     748:	c8 01       	movw	r24, r16
     74a:	68 94       	set
     74c:	12 f8       	bld	r1, 2
     74e:	b6 95       	lsr	r27
     750:	a7 95       	ror	r26
     752:	97 95       	ror	r25
     754:	87 95       	ror	r24
     756:	16 94       	lsr	r1
     758:	d1 f7       	brne	.-12     	; 0x74e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     75a:	b9 01       	movw	r22, r18
     75c:	a8 01       	movw	r20, r16
     75e:	03 2e       	mov	r0, r19
     760:	36 e1       	ldi	r19, 0x16	; 22
     762:	76 95       	lsr	r23
     764:	67 95       	ror	r22
     766:	57 95       	ror	r21
     768:	47 95       	ror	r20
     76a:	3a 95       	dec	r19
     76c:	d1 f7       	brne	.-12     	; 0x762 <usart_set_baudrate+0x48>
     76e:	30 2d       	mov	r19, r0
     770:	15 c0       	rjmp	.+42     	; 0x79c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     772:	d9 01       	movw	r26, r18
     774:	c8 01       	movw	r24, r16
     776:	68 94       	set
     778:	13 f8       	bld	r1, 3
     77a:	b6 95       	lsr	r27
     77c:	a7 95       	ror	r26
     77e:	97 95       	ror	r25
     780:	87 95       	ror	r24
     782:	16 94       	lsr	r1
     784:	d1 f7       	brne	.-12     	; 0x77a <usart_set_baudrate+0x60>
		min_rate /= 2;
     786:	b9 01       	movw	r22, r18
     788:	a8 01       	movw	r20, r16
     78a:	03 2e       	mov	r0, r19
     78c:	37 e1       	ldi	r19, 0x17	; 23
     78e:	76 95       	lsr	r23
     790:	67 95       	ror	r22
     792:	57 95       	ror	r21
     794:	47 95       	ror	r20
     796:	3a 95       	dec	r19
     798:	d1 f7       	brne	.-12     	; 0x78e <usart_set_baudrate+0x74>
     79a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     79c:	88 15       	cp	r24, r8
     79e:	99 05       	cpc	r25, r9
     7a0:	aa 05       	cpc	r26, r10
     7a2:	bb 05       	cpc	r27, r11
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <usart_set_baudrate+0x8e>
     7a6:	a6 c0       	rjmp	.+332    	; 0x8f4 <usart_set_baudrate+0x1da>
     7a8:	84 16       	cp	r8, r20
     7aa:	95 06       	cpc	r9, r21
     7ac:	a6 06       	cpc	r10, r22
     7ae:	b7 06       	cpc	r11, r23
     7b0:	08 f4       	brcc	.+2      	; 0x7b4 <usart_set_baudrate+0x9a>
     7b2:	a2 c0       	rjmp	.+324    	; 0x8f8 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7b4:	f7 01       	movw	r30, r14
     7b6:	84 81       	ldd	r24, Z+4	; 0x04
     7b8:	82 fd       	sbrc	r24, 2
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <usart_set_baudrate+0xaa>
		baud *= 2;
     7bc:	88 0c       	add	r8, r8
     7be:	99 1c       	adc	r9, r9
     7c0:	aa 1c       	adc	r10, r10
     7c2:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7c4:	c3 01       	movw	r24, r6
     7c6:	b2 01       	movw	r22, r4
     7c8:	a5 01       	movw	r20, r10
     7ca:	94 01       	movw	r18, r8
     7cc:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7d0:	2f 3f       	cpi	r18, 0xFF	; 255
     7d2:	31 05       	cpc	r19, r1
     7d4:	41 05       	cpc	r20, r1
     7d6:	51 05       	cpc	r21, r1
     7d8:	08 f4       	brcc	.+2      	; 0x7dc <usart_set_baudrate+0xc2>
     7da:	90 c0       	rjmp	.+288    	; 0x8fc <usart_set_baudrate+0x1e2>
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	a0 e0       	ldi	r26, 0x00	; 0
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	c9 ef       	ldi	r28, 0xF9	; 249
     7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <usart_set_baudrate+0xd8>
     7e8:	28 17       	cp	r18, r24
     7ea:	39 07       	cpc	r19, r25
     7ec:	4a 07       	cpc	r20, r26
     7ee:	5b 07       	cpc	r21, r27
     7f0:	58 f0       	brcs	.+22     	; 0x808 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	aa 1f       	adc	r26, r26
     7f8:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     7fa:	cd 3f       	cpi	r28, 0xFD	; 253
     7fc:	0c f4       	brge	.+2      	; 0x800 <usart_set_baudrate+0xe6>
			limit |= 1;
     7fe:	81 60       	ori	r24, 0x01	; 1
     800:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     802:	c7 30       	cpi	r28, 0x07	; 7
     804:	89 f7       	brne	.-30     	; 0x7e8 <usart_set_baudrate+0xce>
     806:	4f c0       	rjmp	.+158    	; 0x8a6 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     808:	cc 23       	and	r28, r28
     80a:	0c f0       	brlt	.+2      	; 0x80e <usart_set_baudrate+0xf4>
     80c:	4c c0       	rjmp	.+152    	; 0x8a6 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     80e:	d5 01       	movw	r26, r10
     810:	c4 01       	movw	r24, r8
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	aa 1f       	adc	r26, r26
     818:	bb 1f       	adc	r27, r27
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	aa 1f       	adc	r26, r26
     820:	bb 1f       	adc	r27, r27
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	aa 1f       	adc	r26, r26
     828:	bb 1f       	adc	r27, r27
     82a:	48 1a       	sub	r4, r24
     82c:	59 0a       	sbc	r5, r25
     82e:	6a 0a       	sbc	r6, r26
     830:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     832:	ce 3f       	cpi	r28, 0xFE	; 254
     834:	f4 f4       	brge	.+60     	; 0x872 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     836:	8d ef       	ldi	r24, 0xFD	; 253
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	8c 1b       	sub	r24, r28
     83c:	91 09       	sbc	r25, r1
     83e:	c7 fd       	sbrc	r28, 7
     840:	93 95       	inc	r25
     842:	04 c0       	rjmp	.+8      	; 0x84c <usart_set_baudrate+0x132>
     844:	44 0c       	add	r4, r4
     846:	55 1c       	adc	r5, r5
     848:	66 1c       	adc	r6, r6
     84a:	77 1c       	adc	r7, r7
     84c:	8a 95       	dec	r24
     84e:	d2 f7       	brpl	.-12     	; 0x844 <usart_set_baudrate+0x12a>
     850:	d5 01       	movw	r26, r10
     852:	c4 01       	movw	r24, r8
     854:	b6 95       	lsr	r27
     856:	a7 95       	ror	r26
     858:	97 95       	ror	r25
     85a:	87 95       	ror	r24
     85c:	bc 01       	movw	r22, r24
     85e:	cd 01       	movw	r24, r26
     860:	64 0d       	add	r22, r4
     862:	75 1d       	adc	r23, r5
     864:	86 1d       	adc	r24, r6
     866:	97 1d       	adc	r25, r7
     868:	a5 01       	movw	r20, r10
     86a:	94 01       	movw	r18, r8
     86c:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <__udivmodsi4>
     870:	37 c0       	rjmp	.+110    	; 0x8e0 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	8c 0f       	add	r24, r28
     876:	a5 01       	movw	r20, r10
     878:	94 01       	movw	r18, r8
     87a:	04 c0       	rjmp	.+8      	; 0x884 <usart_set_baudrate+0x16a>
     87c:	22 0f       	add	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	44 1f       	adc	r20, r20
     882:	55 1f       	adc	r21, r21
     884:	8a 95       	dec	r24
     886:	d2 f7       	brpl	.-12     	; 0x87c <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     888:	da 01       	movw	r26, r20
     88a:	c9 01       	movw	r24, r18
     88c:	b6 95       	lsr	r27
     88e:	a7 95       	ror	r26
     890:	97 95       	ror	r25
     892:	87 95       	ror	r24
     894:	bc 01       	movw	r22, r24
     896:	cd 01       	movw	r24, r26
     898:	64 0d       	add	r22, r4
     89a:	75 1d       	adc	r23, r5
     89c:	86 1d       	adc	r24, r6
     89e:	97 1d       	adc	r25, r7
     8a0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <__udivmodsi4>
     8a4:	1d c0       	rjmp	.+58     	; 0x8e0 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	8c 0f       	add	r24, r28
     8aa:	a5 01       	movw	r20, r10
     8ac:	94 01       	movw	r18, r8
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <usart_set_baudrate+0x19e>
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	44 1f       	adc	r20, r20
     8b6:	55 1f       	adc	r21, r21
     8b8:	8a 95       	dec	r24
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8bc:	da 01       	movw	r26, r20
     8be:	c9 01       	movw	r24, r18
     8c0:	b6 95       	lsr	r27
     8c2:	a7 95       	ror	r26
     8c4:	97 95       	ror	r25
     8c6:	87 95       	ror	r24
     8c8:	bc 01       	movw	r22, r24
     8ca:	cd 01       	movw	r24, r26
     8cc:	64 0d       	add	r22, r4
     8ce:	75 1d       	adc	r23, r5
     8d0:	86 1d       	adc	r24, r6
     8d2:	97 1d       	adc	r25, r7
     8d4:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <__udivmodsi4>
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	31 09       	sbc	r19, r1
     8dc:	41 09       	sbc	r20, r1
     8de:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8e0:	83 2f       	mov	r24, r19
     8e2:	8f 70       	andi	r24, 0x0F	; 15
     8e4:	c2 95       	swap	r28
     8e6:	c0 7f       	andi	r28, 0xF0	; 240
     8e8:	c8 2b       	or	r28, r24
     8ea:	f7 01       	movw	r30, r14
     8ec:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8ee:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	18 c0       	rjmp	.+48     	; 0x924 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	16 c0       	rjmp	.+44     	; 0x924 <usart_set_baudrate+0x20a>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	14 c0       	rjmp	.+40     	; 0x924 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8fc:	d5 01       	movw	r26, r10
     8fe:	c4 01       	movw	r24, r8
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	aa 1f       	adc	r26, r26
     906:	bb 1f       	adc	r27, r27
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	aa 1f       	adc	r26, r26
     90e:	bb 1f       	adc	r27, r27
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	aa 1f       	adc	r26, r26
     916:	bb 1f       	adc	r27, r27
     918:	48 1a       	sub	r4, r24
     91a:	59 0a       	sbc	r5, r25
     91c:	6a 0a       	sbc	r6, r26
     91e:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     920:	c9 ef       	ldi	r28, 0xF9	; 249
     922:	89 cf       	rjmp	.-238    	; 0x836 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	bf 90       	pop	r11
     930:	af 90       	pop	r10
     932:	9f 90       	pop	r9
     934:	8f 90       	pop	r8
     936:	7f 90       	pop	r7
     938:	6f 90       	pop	r6
     93a:	5f 90       	pop	r5
     93c:	4f 90       	pop	r4
     93e:	08 95       	ret

00000940 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	09 f4       	brne	.+2      	; 0x952 <usart_init_rs232+0x12>
     950:	36 c1       	rjmp	.+620    	; 0xbbe <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     952:	80 3c       	cpi	r24, 0xC0	; 192
     954:	91 05       	cpc	r25, r1
     956:	21 f4       	brne	.+8      	; 0x960 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     958:	60 e1       	ldi	r22, 0x10	; 16
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	c2 d3       	rcall	.+1924   	; 0x10e2 <sysclk_enable_module>
     95e:	2f c1       	rjmp	.+606    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     960:	c0 34       	cpi	r28, 0x40	; 64
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	d8 07       	cpc	r29, r24
     966:	21 f4       	brne	.+8      	; 0x970 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     968:	68 e0       	ldi	r22, 0x08	; 8
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	ba d3       	rcall	.+1908   	; 0x10e2 <sysclk_enable_module>
     96e:	27 c1       	rjmp	.+590    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     970:	c1 15       	cp	r28, r1
     972:	e4 e0       	ldi	r30, 0x04	; 4
     974:	de 07       	cpc	r29, r30
     976:	21 f4       	brne	.+8      	; 0x980 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     978:	64 e0       	ldi	r22, 0x04	; 4
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	b2 d3       	rcall	.+1892   	; 0x10e2 <sysclk_enable_module>
     97e:	1f c1       	rjmp	.+574    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     980:	c0 38       	cpi	r28, 0x80	; 128
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     986:	21 f4       	brne	.+8      	; 0x990 <usart_init_rs232+0x50>
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	aa d3       	rcall	.+1876   	; 0x10e2 <sysclk_enable_module>
     98e:	17 c1       	rjmp	.+558    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     990:	c1 15       	cp	r28, r1
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     996:	21 f4       	brne	.+8      	; 0x9a0 <usart_init_rs232+0x60>
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	a2 d3       	rcall	.+1860   	; 0x10e2 <sysclk_enable_module>
     99e:	0f c1       	rjmp	.+542    	; 0xbbe <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     9a0:	c0 38       	cpi	r28, 0x80	; 128
     9a2:	e3 e0       	ldi	r30, 0x03	; 3
     9a4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <usart_init_rs232+0x70>
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	9a d3       	rcall	.+1844   	; 0x10e2 <sysclk_enable_module>
     9ae:	07 c1       	rjmp	.+526    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     9b0:	c0 39       	cpi	r28, 0x90	; 144
     9b2:	f3 e0       	ldi	r31, 0x03	; 3
     9b4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     9b6:	21 f4       	brne	.+8      	; 0x9c0 <usart_init_rs232+0x80>
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	92 d3       	rcall	.+1828   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9be:	ff c0       	rjmp	.+510    	; 0xbbe <usart_init_rs232+0x27e>
     9c0:	c1 15       	cp	r28, r1
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <usart_init_rs232+0x90>
     9c8:	62 e0       	ldi	r22, 0x02	; 2
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	8a d3       	rcall	.+1812   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     9ce:	f7 c0       	rjmp	.+494    	; 0xbbe <usart_init_rs232+0x27e>
     9d0:	c0 34       	cpi	r28, 0x40	; 64
     9d2:	e2 e0       	ldi	r30, 0x02	; 2
     9d4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9d6:	21 f4       	brne	.+8      	; 0x9e0 <usart_init_rs232+0xa0>
     9d8:	62 e0       	ldi	r22, 0x02	; 2
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	82 d3       	rcall	.+1796   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9de:	ef c0       	rjmp	.+478    	; 0xbbe <usart_init_rs232+0x27e>
     9e0:	c1 15       	cp	r28, r1
     9e2:	f3 e0       	ldi	r31, 0x03	; 3
     9e4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9e6:	21 f4       	brne	.+8      	; 0x9f0 <usart_init_rs232+0xb0>
     9e8:	64 e0       	ldi	r22, 0x04	; 4
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	7a d3       	rcall	.+1780   	; 0x10e2 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9ee:	e7 c0       	rjmp	.+462    	; 0xbbe <usart_init_rs232+0x27e>
     9f0:	c0 32       	cpi	r28, 0x20	; 32
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9f6:	21 f4       	brne	.+8      	; 0xa00 <usart_init_rs232+0xc0>
     9f8:	64 e0       	ldi	r22, 0x04	; 4
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	72 d3       	rcall	.+1764   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9fe:	df c0       	rjmp	.+446    	; 0xbbe <usart_init_rs232+0x27e>
     a00:	c1 15       	cp	r28, r1
     a02:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     a04:	de 07       	cpc	r29, r30
     a06:	21 f4       	brne	.+8      	; 0xa10 <usart_init_rs232+0xd0>
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	6a d3       	rcall	.+1748   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a0e:	d7 c0       	rjmp	.+430    	; 0xbbe <usart_init_rs232+0x27e>
     a10:	c1 15       	cp	r28, r1
     a12:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a14:	df 07       	cpc	r29, r31
     a16:	21 f4       	brne	.+8      	; 0xa20 <usart_init_rs232+0xe0>
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	84 e0       	ldi	r24, 0x04	; 4
     a1c:	62 d3       	rcall	.+1732   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     a1e:	cf c0       	rjmp	.+414    	; 0xbbe <usart_init_rs232+0x27e>
     a20:	c1 15       	cp	r28, r1
     a22:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a24:	d8 07       	cpc	r29, r24
     a26:	21 f4       	brne	.+8      	; 0xa30 <usart_init_rs232+0xf0>
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	85 e0       	ldi	r24, 0x05	; 5
     a2c:	5a d3       	rcall	.+1716   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     a2e:	c7 c0       	rjmp	.+398    	; 0xbbe <usart_init_rs232+0x27e>
     a30:	c1 15       	cp	r28, r1
     a32:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     a34:	de 07       	cpc	r29, r30
     a36:	21 f4       	brne	.+8      	; 0xa40 <usart_init_rs232+0x100>
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a3c:	52 d3       	rcall	.+1700   	; 0x10e2 <sysclk_enable_module>
     a3e:	bf c0       	rjmp	.+382    	; 0xbbe <usart_init_rs232+0x27e>
     a40:	c0 34       	cpi	r28, 0x40	; 64
     a42:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a44:	df 07       	cpc	r29, r31
     a46:	21 f4       	brne	.+8      	; 0xa50 <usart_init_rs232+0x110>
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a4c:	4a d3       	rcall	.+1684   	; 0x10e2 <sysclk_enable_module>
     a4e:	b7 c0       	rjmp	.+366    	; 0xbbe <usart_init_rs232+0x27e>
     a50:	c0 34       	cpi	r28, 0x40	; 64
     a52:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a54:	d8 07       	cpc	r29, r24
     a56:	21 f4       	brne	.+8      	; 0xa60 <usart_init_rs232+0x120>
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a5c:	42 d3       	rcall	.+1668   	; 0x10e2 <sysclk_enable_module>
     a5e:	af c0       	rjmp	.+350    	; 0xbbe <usart_init_rs232+0x27e>
     a60:	c0 34       	cpi	r28, 0x40	; 64
     a62:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a64:	de 07       	cpc	r29, r30
     a66:	21 f4       	brne	.+8      	; 0xa70 <usart_init_rs232+0x130>
     a68:	62 e0       	ldi	r22, 0x02	; 2
     a6a:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a6c:	3a d3       	rcall	.+1652   	; 0x10e2 <sysclk_enable_module>
     a6e:	a7 c0       	rjmp	.+334    	; 0xbbe <usart_init_rs232+0x27e>
     a70:	c0 34       	cpi	r28, 0x40	; 64
     a72:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a74:	df 07       	cpc	r29, r31
     a76:	21 f4       	brne	.+8      	; 0xa80 <usart_init_rs232+0x140>
     a78:	62 e0       	ldi	r22, 0x02	; 2
     a7a:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a7c:	32 d3       	rcall	.+1636   	; 0x10e2 <sysclk_enable_module>
     a7e:	9f c0       	rjmp	.+318    	; 0xbbe <usart_init_rs232+0x27e>
     a80:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a82:	88 e0       	ldi	r24, 0x08	; 8
     a84:	d8 07       	cpc	r29, r24
     a86:	21 f4       	brne	.+8      	; 0xa90 <usart_init_rs232+0x150>
     a88:	64 e0       	ldi	r22, 0x04	; 4
     a8a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a8c:	2a d3       	rcall	.+1620   	; 0x10e2 <sysclk_enable_module>
     a8e:	97 c0       	rjmp	.+302    	; 0xbbe <usart_init_rs232+0x27e>
     a90:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a92:	e9 e0       	ldi	r30, 0x09	; 9
     a94:	de 07       	cpc	r29, r30
     a96:	21 f4       	brne	.+8      	; 0xaa0 <usart_init_rs232+0x160>
     a98:	64 e0       	ldi	r22, 0x04	; 4
     a9a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a9c:	22 d3       	rcall	.+1604   	; 0x10e2 <sysclk_enable_module>
     a9e:	8f c0       	rjmp	.+286    	; 0xbbe <usart_init_rs232+0x27e>
     aa0:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     aa2:	fa e0       	ldi	r31, 0x0A	; 10
     aa4:	df 07       	cpc	r29, r31
     aa6:	21 f4       	brne	.+8      	; 0xab0 <usart_init_rs232+0x170>
     aa8:	64 e0       	ldi	r22, 0x04	; 4
     aaa:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     aac:	1a d3       	rcall	.+1588   	; 0x10e2 <sysclk_enable_module>
     aae:	87 c0       	rjmp	.+270    	; 0xbbe <usart_init_rs232+0x27e>
     ab0:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     ab2:	8b e0       	ldi	r24, 0x0B	; 11
     ab4:	d8 07       	cpc	r29, r24
     ab6:	21 f4       	brne	.+8      	; 0xac0 <usart_init_rs232+0x180>
     ab8:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     aba:	86 e0       	ldi	r24, 0x06	; 6
     abc:	12 d3       	rcall	.+1572   	; 0x10e2 <sysclk_enable_module>
     abe:	7f c0       	rjmp	.+254    	; 0xbbe <usart_init_rs232+0x27e>
     ac0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     ac2:	e8 e0       	ldi	r30, 0x08	; 8
     ac4:	de 07       	cpc	r29, r30
     ac6:	21 f4       	brne	.+8      	; 0xad0 <usart_init_rs232+0x190>
     ac8:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	0a d3       	rcall	.+1556   	; 0x10e2 <sysclk_enable_module>
     ace:	77 c0       	rjmp	.+238    	; 0xbbe <usart_init_rs232+0x27e>
     ad0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ad2:	f9 e0       	ldi	r31, 0x09	; 9
     ad4:	df 07       	cpc	r29, r31
     ad6:	21 f4       	brne	.+8      	; 0xae0 <usart_init_rs232+0x1a0>
     ad8:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	02 d3       	rcall	.+1540   	; 0x10e2 <sysclk_enable_module>
     ade:	6f c0       	rjmp	.+222    	; 0xbbe <usart_init_rs232+0x27e>
     ae0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ae2:	8a e0       	ldi	r24, 0x0A	; 10
     ae4:	d8 07       	cpc	r29, r24
     ae6:	21 f4       	brne	.+8      	; 0xaf0 <usart_init_rs232+0x1b0>
     ae8:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     aea:	85 e0       	ldi	r24, 0x05	; 5
     aec:	fa d2       	rcall	.+1524   	; 0x10e2 <sysclk_enable_module>
     aee:	67 c0       	rjmp	.+206    	; 0xbbe <usart_init_rs232+0x27e>
     af0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     af2:	eb e0       	ldi	r30, 0x0B	; 11
     af4:	de 07       	cpc	r29, r30
     af6:	21 f4       	brne	.+8      	; 0xb00 <usart_init_rs232+0x1c0>
     af8:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	f2 d2       	rcall	.+1508   	; 0x10e2 <sysclk_enable_module>
     afe:	5f c0       	rjmp	.+190    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     b00:	c0 3a       	cpi	r28, 0xA0	; 160
     b02:	f8 e0       	ldi	r31, 0x08	; 8
     b04:	df 07       	cpc	r29, r31
     b06:	21 f4       	brne	.+8      	; 0xb10 <usart_init_rs232+0x1d0>
     b08:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	ea d2       	rcall	.+1492   	; 0x10e2 <sysclk_enable_module>
     b0e:	57 c0       	rjmp	.+174    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     b10:	c0 3a       	cpi	r28, 0xA0	; 160
     b12:	89 e0       	ldi	r24, 0x09	; 9
     b14:	d8 07       	cpc	r29, r24
     b16:	21 f4       	brne	.+8      	; 0xb20 <usart_init_rs232+0x1e0>
     b18:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	e2 d2       	rcall	.+1476   	; 0x10e2 <sysclk_enable_module>
     b1e:	4f c0       	rjmp	.+158    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b20:	c0 3a       	cpi	r28, 0xA0	; 160
     b22:	ea e0       	ldi	r30, 0x0A	; 10
     b24:	de 07       	cpc	r29, r30
     b26:	21 f4       	brne	.+8      	; 0xb30 <usart_init_rs232+0x1f0>
     b28:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     b2a:	85 e0       	ldi	r24, 0x05	; 5
     b2c:	da d2       	rcall	.+1460   	; 0x10e2 <sysclk_enable_module>
     b2e:	47 c0       	rjmp	.+142    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     b30:	c0 3a       	cpi	r28, 0xA0	; 160
     b32:	fb e0       	ldi	r31, 0x0B	; 11
     b34:	df 07       	cpc	r29, r31
     b36:	21 f4       	brne	.+8      	; 0xb40 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b38:	60 e1       	ldi	r22, 0x10	; 16
     b3a:	86 e0       	ldi	r24, 0x06	; 6
     b3c:	d2 d2       	rcall	.+1444   	; 0x10e2 <sysclk_enable_module>
     b3e:	3f c0       	rjmp	.+126    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b40:	c0 3b       	cpi	r28, 0xB0	; 176
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	d8 07       	cpc	r29, r24
     b46:	21 f4       	brne	.+8      	; 0xb50 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b48:	60 e2       	ldi	r22, 0x20	; 32
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	ca d2       	rcall	.+1428   	; 0x10e2 <sysclk_enable_module>
     b4e:	37 c0       	rjmp	.+110    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b50:	c0 3b       	cpi	r28, 0xB0	; 176
     b52:	e9 e0       	ldi	r30, 0x09	; 9
     b54:	de 07       	cpc	r29, r30
     b56:	21 f4       	brne	.+8      	; 0xb60 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b58:	60 e2       	ldi	r22, 0x20	; 32
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	c2 d2       	rcall	.+1412   	; 0x10e2 <sysclk_enable_module>
     b5e:	2f c0       	rjmp	.+94     	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b60:	c0 3b       	cpi	r28, 0xB0	; 176
     b62:	fa e0       	ldi	r31, 0x0A	; 10
     b64:	df 07       	cpc	r29, r31
     b66:	21 f4       	brne	.+8      	; 0xb70 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b68:	60 e2       	ldi	r22, 0x20	; 32
     b6a:	85 e0       	ldi	r24, 0x05	; 5
     b6c:	ba d2       	rcall	.+1396   	; 0x10e2 <sysclk_enable_module>
     b6e:	27 c0       	rjmp	.+78     	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b70:	c0 3b       	cpi	r28, 0xB0	; 176
     b72:	8b e0       	ldi	r24, 0x0B	; 11
     b74:	d8 07       	cpc	r29, r24
     b76:	21 f4       	brne	.+8      	; 0xb80 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b78:	60 e2       	ldi	r22, 0x20	; 32
     b7a:	86 e0       	ldi	r24, 0x06	; 6
     b7c:	b2 d2       	rcall	.+1380   	; 0x10e2 <sysclk_enable_module>
     b7e:	1f c0       	rjmp	.+62     	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b80:	c0 38       	cpi	r28, 0x80	; 128
     b82:	e4 e0       	ldi	r30, 0x04	; 4
     b84:	de 07       	cpc	r29, r30
     b86:	21 f4       	brne	.+8      	; 0xb90 <usart_init_rs232+0x250>
     b88:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	aa d2       	rcall	.+1364   	; 0x10e2 <sysclk_enable_module>
     b8e:	17 c0       	rjmp	.+46     	; 0xbbe <usart_init_rs232+0x27e>
     b90:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b92:	f4 e0       	ldi	r31, 0x04	; 4
     b94:	df 07       	cpc	r29, r31
     b96:	21 f4       	brne	.+8      	; 0xba0 <usart_init_rs232+0x260>
     b98:	60 e4       	ldi	r22, 0x40	; 64
     b9a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b9c:	a2 d2       	rcall	.+1348   	; 0x10e2 <sysclk_enable_module>
     b9e:	0f c0       	rjmp	.+30     	; 0xbbe <usart_init_rs232+0x27e>
     ba0:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	d8 07       	cpc	r29, r24
     ba6:	21 f4       	brne	.+8      	; 0xbb0 <usart_init_rs232+0x270>
     ba8:	60 e4       	ldi	r22, 0x40	; 64
     baa:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     bac:	9a d2       	rcall	.+1332   	; 0x10e2 <sysclk_enable_module>
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <usart_init_rs232+0x27e>
     bb0:	c0 3b       	cpi	r28, 0xB0	; 176
     bb2:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     bb4:	de 07       	cpc	r29, r30
     bb6:	19 f4       	brne	.+6      	; 0xbbe <usart_init_rs232+0x27e>
     bb8:	60 e4       	ldi	r22, 0x40	; 64
     bba:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     bbc:	92 d2       	rcall	.+1316   	; 0x10e2 <sysclk_enable_module>
     bbe:	8d 81       	ldd	r24, Y+5	; 0x05
     bc0:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     bc2:	8d 83       	std	Y+5, r24	; 0x05
     bc4:	f8 01       	movw	r30, r16
     bc6:	95 81       	ldd	r25, Z+5	; 0x05
     bc8:	84 81       	ldd	r24, Z+4	; 0x04
     bca:	89 2b       	or	r24, r25
     bcc:	96 81       	ldd	r25, Z+6	; 0x06
     bce:	91 11       	cpse	r25, r1
     bd0:	98 e0       	ldi	r25, 0x08	; 8
     bd2:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     bd4:	8d 83       	std	Y+5, r24	; 0x05
     bd6:	f8 01       	movw	r30, r16
     bd8:	40 81       	ld	r20, Z
     bda:	51 81       	ldd	r21, Z+1	; 0x01
     bdc:	62 81       	ldd	r22, Z+2	; 0x02
     bde:	73 81       	ldd	r23, Z+3	; 0x03
     be0:	00 e0       	ldi	r16, 0x00	; 0
     be2:	18 e4       	ldi	r17, 0x48	; 72
     be4:	28 ee       	ldi	r18, 0xE8	; 232
     be6:	31 e0       	ldi	r19, 0x01	; 1
     be8:	ce 01       	movw	r24, r28
     bea:	97 dd       	rcall	.-1234   	; 0x71a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	98 60       	ori	r25, 0x08	; 8
     bf0:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	90 61       	ori	r25, 0x10	; 16
     bf6:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	08 95       	ret

00000c02 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     c02:	08 95       	ret

00000c04 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= 0x08; // Sets A3 to output
     c04:	e0 e0       	ldi	r30, 0x00	; 0
     c06:	f6 e0       	ldi	r31, 0x06	; 6
     c08:	80 81       	ld	r24, Z
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	80 83       	st	Z, r24
     c0e:	08 95       	ret

00000c10 <cam_switch>:
}

void cam_switch(void){
	PORTA.OUT ^= 0x08; // Changes A3 from high to low or vice-versa
     c10:	e0 e0       	ldi	r30, 0x00	; 0
     c12:	f6 e0       	ldi	r31, 0x06	; 6
     c14:	94 81       	ldd	r25, Z+4	; 0x04
     c16:	88 e0       	ldi	r24, 0x08	; 8
     c18:	89 27       	eor	r24, r25
     c1a:	84 83       	std	Z+4, r24	; 0x04
     c1c:	08 95       	ret

00000c1e <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	27 97       	sbiw	r28, 0x07	; 7
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     c2c:	60 e2       	ldi	r22, 0x20	; 32
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	58 d2       	rcall	.+1200   	; 0x10e2 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     c32:	e0 e6       	ldi	r30, 0x60	; 96
     c34:	f6 e0       	ldi	r31, 0x06	; 6
     c36:	80 81       	ld	r24, Z
     c38:	80 68       	ori	r24, 0x80	; 128
     c3a:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c3c:	e6 e0       	ldi	r30, 0x06	; 6
     c3e:	f0 e2       	ldi	r31, 0x20	; 32
     c40:	84 81       	ldd	r24, Z+4	; 0x04
     c42:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c44:	85 81       	ldd	r24, Z+5	; 0x05
     c46:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c48:	86 81       	ldd	r24, Z+6	; 0x06
     c4a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c4c:	80 81       	ld	r24, Z
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	a2 81       	ldd	r26, Z+2	; 0x02
     c52:	b3 81       	ldd	r27, Z+3	; 0x03
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	ab 83       	std	Y+3, r26	; 0x03
     c5a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     c5c:	60 e2       	ldi	r22, 0x20	; 32
     c5e:	84 e0       	ldi	r24, 0x04	; 4
     c60:	40 d2       	rcall	.+1152   	; 0x10e2 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	80 eb       	ldi	r24, 0xB0	; 176
     c6a:	99 e0       	ldi	r25, 0x09	; 9
     c6c:	69 de       	rcall	.-814    	; 0x940 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     c6e:	27 96       	adiw	r28, 0x07	; 7
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     c7c:	61 50       	subi	r22, 0x01	; 1
     c7e:	71 09       	sbc	r23, r1
     c80:	81 09       	sbc	r24, r1
     c82:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     c84:	61 15       	cp	r22, r1
     c86:	71 05       	cpc	r23, r1
     c88:	81 05       	cpc	r24, r1
     c8a:	91 05       	cpc	r25, r1
     c8c:	b9 f7       	brne	.-18     	; 0xc7c <__portable_avr_delay_cycles+0x2>
     c8e:	08 95       	ret

00000c90 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     c90:	e0 e4       	ldi	r30, 0x40	; 64
     c92:	f6 e0       	ldi	r31, 0x06	; 6
     c94:	94 81       	ldd	r25, Z+4	; 0x04
     c96:	80 e1       	ldi	r24, 0x10	; 16
     c98:	89 27       	eor	r24, r25
     c9a:	84 83       	std	Z+4, r24	; 0x04
     c9c:	08 95       	ret

00000c9e <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     c9e:	e0 e4       	ldi	r30, 0x40	; 64
     ca0:	f6 e0       	ldi	r31, 0x06	; 6
     ca2:	84 81       	ldd	r24, Z+4	; 0x04
     ca4:	80 61       	ori	r24, 0x10	; 16
     ca6:	84 83       	std	Z+4, r24	; 0x04
	delay_ms(5);
     ca8:	6b e2       	ldi	r22, 0x2B	; 43
     caa:	78 e6       	ldi	r23, 0x68	; 104
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	e4 df       	rcall	.-56     	; 0xc7a <__portable_avr_delay_cycles>
	
	// Resets the ms5607
	flip_ms5607();
     cb2:	ee df       	rcall	.-36     	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     cb4:	8e e1       	ldi	r24, 0x1E	; 30
     cb6:	82 d0       	rcall	.+260    	; 0xdbc <spi_write>
     cb8:	60 e8       	ldi	r22, 0x80	; 128
	delay_ms(3);
     cba:	7e e3       	ldi	r23, 0x3E	; 62
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	dc df       	rcall	.-72     	; 0xc7a <__portable_avr_delay_cycles>
	flip_ms5607();
     cc2:	e6 df       	rcall	.-52     	; 0xc90 <flip_ms5607>
	delay_ms(2);
     cc4:	6b ea       	ldi	r22, 0xAB	; 171
     cc6:	79 e2       	ldi	r23, 0x29	; 41
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	d6 cf       	rjmp	.-84     	; 0xc7a <__portable_avr_delay_cycles>
     cce:	08 95       	ret

00000cd0 <ms5607_read>:
     cd0:	cf 93       	push	r28
}

uint16_t ms5607_read(uint16_t comm)
{
     cd2:	df 93       	push	r29
     cd4:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     cd6:	dc df       	rcall	.-72     	; 0xc90 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     cd8:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     cda:	70 d0       	rcall	.+224    	; 0xdbc <spi_write>
     cdc:	5f d0       	rcall	.+190    	; 0xd9c <spi_read>
     cde:	c8 2f       	mov	r28, r24
     ce0:	d0 e0       	ldi	r29, 0x00	; 0
     ce2:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     ce4:	cc 27       	eor	r28, r28
     ce6:	5a d0       	rcall	.+180    	; 0xd9c <spi_read>
     ce8:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     cea:	d2 df       	rcall	.-92     	; 0xc90 <flip_ms5607>
     cec:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <ms5607_convert_d1>:
     cf4:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     cfc:	c9 df       	rcall	.-110    	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     cfe:	88 e4       	ldi	r24, 0x48	; 72
     d00:	5d d0       	rcall	.+186    	; 0xdbc <spi_write>
	delay_ms(10);
     d02:	66 e5       	ldi	r22, 0x56	; 86
     d04:	70 ed       	ldi	r23, 0xD0	; 208
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     d0a:	b7 df       	rcall	.-146    	; 0xc7a <__portable_avr_delay_cycles>
	
	flip_ms5607();
     d0c:	c1 df       	rcall	.-126    	; 0xc90 <flip_ms5607>
     d0e:	c0 df       	rcall	.-128    	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	54 d0       	rcall	.+168    	; 0xdbc <spi_write>
     d14:	43 d0       	rcall	.+134    	; 0xd9c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     d16:	c8 2e       	mov	r12, r24
     d18:	d1 2c       	mov	r13, r1
     d1a:	e1 2c       	mov	r14, r1
     d1c:	f1 2c       	mov	r15, r1
     d1e:	76 01       	movw	r14, r12
     d20:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     d22:	cc 24       	eor	r12, r12
     d24:	3b d0       	rcall	.+118    	; 0xd9c <spi_read>
     d26:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     d28:	39 d0       	rcall	.+114    	; 0xd9c <spi_read>
     d2a:	c8 2a       	or	r12, r24
     d2c:	b1 df       	rcall	.-158    	; 0xc90 <flip_ms5607>
	flip_ms5607();
     d2e:	c7 01       	movw	r24, r14
     d30:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	08 95       	ret

00000d3c <ms5607_convert_d2>:
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     d44:	a5 df       	rcall	.-182    	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     d46:	88 e5       	ldi	r24, 0x58	; 88
     d48:	39 d0       	rcall	.+114    	; 0xdbc <spi_write>
	delay_ms(10);
     d4a:	66 e5       	ldi	r22, 0x56	; 86
     d4c:	70 ed       	ldi	r23, 0xD0	; 208
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     d52:	93 df       	rcall	.-218    	; 0xc7a <__portable_avr_delay_cycles>
	
	flip_ms5607();
     d54:	9d df       	rcall	.-198    	; 0xc90 <flip_ms5607>
     d56:	9c df       	rcall	.-200    	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	30 d0       	rcall	.+96     	; 0xdbc <spi_write>
     d5c:	1f d0       	rcall	.+62     	; 0xd9c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     d5e:	c8 2e       	mov	r12, r24
     d60:	d1 2c       	mov	r13, r1
     d62:	e1 2c       	mov	r14, r1
     d64:	f1 2c       	mov	r15, r1
     d66:	76 01       	movw	r14, r12
     d68:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     d6a:	cc 24       	eor	r12, r12
     d6c:	17 d0       	rcall	.+46     	; 0xd9c <spi_read>
     d6e:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     d70:	15 d0       	rcall	.+42     	; 0xd9c <spi_read>
     d72:	c8 2a       	or	r12, r24
     d74:	8d df       	rcall	.-230    	; 0xc90 <flip_ms5607>
	flip_ms5607();
     d76:	c7 01       	movw	r24, r14
     d78:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	08 95       	ret

00000d84 <spi_init>:
     d84:	68 e0       	ldi	r22, 0x08	; 8
     d86:	83 e0       	ldi	r24, 0x03	; 3
	PORTC.DIR |= 0b10110000; 
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     d88:	ac d1       	rcall	.+856    	; 0x10e2 <sysclk_enable_module>
     d8a:	8c e5       	ldi	r24, 0x5C	; 92
     d8c:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     d90:	e0 e4       	ldi	r30, 0x40	; 64
     d92:	f6 e0       	ldi	r31, 0x06	; 6
     d94:	80 81       	ld	r24, Z
     d96:	80 6b       	ori	r24, 0xB0	; 176
     d98:	80 83       	st	Z, r24
     d9a:	08 95       	ret

00000d9c <spi_read>:

uint8_t spi_read(void)
{
	uint8_t iter_max = 100;
	uint8_t count = 0;
	SPIC.DATA = 0xFF; // make the DATA register something we know
     d9c:	e0 ec       	ldi	r30, 0xC0	; 192
     d9e:	f8 e0       	ldi	r31, 0x08	; 8
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS>>7) && count < iter_max){ // wait for the SPI interrupt flag to let us know the transfer is complete
     da4:	82 81       	ldd	r24, Z+2	; 0x02
     da6:	88 23       	and	r24, r24
     da8:	34 f0       	brlt	.+12     	; 0xdb6 <spi_read+0x1a>
     daa:	84 e6       	ldi	r24, 0x64	; 100
     dac:	92 81       	ldd	r25, Z+2	; 0x02
     dae:	99 23       	and	r25, r25
     db0:	14 f0       	brlt	.+4      	; 0xdb6 <spi_read+0x1a>
     db2:	81 50       	subi	r24, 0x01	; 1
     db4:	d9 f7       	brne	.-10     	; 0xdac <spi_read+0x10>
		count++;	
	}
	
	return SPIC.DATA; // return the data from this function
     db6:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     dba:	08 95       	ret

00000dbc <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     dbc:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     dc0:	e0 ec       	ldi	r30, 0xC0	; 192
     dc2:	f8 e0       	ldi	r31, 0x08	; 8
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	88 23       	and	r24, r24
     dc8:	ec f7       	brge	.-6      	; 0xdc4 <spi_write+0x8>
     dca:	08 95       	ret

00000dcc <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     dd2:	9d dc       	rcall	.-1734   	; 0x70e <usart_getchar>
     dd4:	88 83       	st	Y, r24
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     ddc:	90 cc       	rjmp	.-1760   	; 0x6fe <usart_putchar>
}
     dde:	08 95       	ret

00000de0 <data_terminal_init>:

#include <asf.h>
#include "data_logger.h"

void data_terminal_init()
{
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	27 97       	sbiw	r28, 0x07	; 7
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     dee:	60 e1       	ldi	r22, 0x10	; 16
     df0:	85 e0       	ldi	r24, 0x05	; 5
     df2:	77 d1       	rcall	.+750    	; 0x10e2 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     df4:	e0 e8       	ldi	r30, 0x80	; 128
     df6:	f6 e0       	ldi	r31, 0x06	; 6
     df8:	80 81       	ld	r24, Z
     dfa:	88 60       	ori	r24, 0x08	; 8
     dfc:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     dfe:	80 ea       	ldi	r24, 0xA0	; 160
     e00:	9a e0       	ldi	r25, 0x0A	; 10
     e02:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <stdio_base>
     e06:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e0a:	8e ee       	ldi	r24, 0xEE	; 238
     e0c:	96 e0       	ldi	r25, 0x06	; 6
     e0e:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <ptr_put>
     e12:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     e16:	86 ee       	ldi	r24, 0xE6	; 230
     e18:	96 e0       	ldi	r25, 0x06	; 6
     e1a:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <ptr_get>
     e1e:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     e22:	ed e0       	ldi	r30, 0x0D	; 13
     e24:	f0 e2       	ldi	r31, 0x20	; 32
     e26:	84 81       	ldd	r24, Z+4	; 0x04
     e28:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     e2a:	85 81       	ldd	r24, Z+5	; 0x05
     e2c:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     e2e:	86 81       	ldd	r24, Z+6	; 0x06
     e30:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	a2 81       	ldd	r26, Z+2	; 0x02
     e38:	b3 81       	ldd	r27, Z+3	; 0x03
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	ab 83       	std	Y+3, r26	; 0x03
     e40:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     e42:	60 e1       	ldi	r22, 0x10	; 16
     e44:	85 e0       	ldi	r24, 0x05	; 5
     e46:	4d d1       	rcall	.+666    	; 0x10e2 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     e48:	be 01       	movw	r22, r28
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	80 ea       	ldi	r24, 0xA0	; 160
     e50:	9a e0       	ldi	r25, 0x0A	; 10
     e52:	76 dd       	rcall	.-1300   	; 0x940 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     e54:	6c e6       	ldi	r22, 0x6C	; 108
     e56:	71 e0       	ldi	r23, 0x01	; 1
     e58:	85 e8       	ldi	r24, 0x85	; 133
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
     e60:	27 96       	adiw	r28, 0x07	; 7
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	fc 01       	movw	r30, r24
     e72:	41 15       	cp	r20, r1
     e74:	51 05       	cpc	r21, r1
     e76:	b1 f1       	breq	.+108    	; 0xee4 <rb16_write+0x78>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	db 01       	movw	r26, r22
     e84:	a8 0f       	add	r26, r24
     e86:	b9 1f       	adc	r27, r25
     e88:	8d 91       	ld	r24, X+
     e8a:	9c 91       	ld	r25, X
     e8c:	a2 81       	ldd	r26, Z+2	; 0x02
     e8e:	b3 81       	ldd	r27, Z+3	; 0x03
     e90:	aa 0f       	add	r26, r26
     e92:	bb 1f       	adc	r27, r27
     e94:	c6 81       	ldd	r28, Z+6	; 0x06
     e96:	d7 81       	ldd	r29, Z+7	; 0x07
     e98:	ac 0f       	add	r26, r28
     e9a:	bd 1f       	adc	r27, r29
     e9c:	8d 93       	st	X+, r24
     e9e:	9c 93       	st	X, r25
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	82 83       	std	Z+2, r24	; 0x02
     ea8:	93 83       	std	Z+3, r25	; 0x03
     eaa:	a0 81       	ld	r26, Z
     eac:	b1 81       	ldd	r27, Z+1	; 0x01
     eae:	8a 17       	cp	r24, r26
     eb0:	9b 07       	cpc	r25, r27
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <rb16_write+0x4c>
     eb4:	12 82       	std	Z+2, r1	; 0x02
     eb6:	13 82       	std	Z+3, r1	; 0x03
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	c4 81       	ldd	r28, Z+4	; 0x04
     ebe:	d5 81       	ldd	r29, Z+5	; 0x05
     ec0:	8c 17       	cp	r24, r28
     ec2:	9d 07       	cpc	r25, r29
     ec4:	49 f4       	brne	.+18     	; 0xed8 <rb16_write+0x6c>
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	a8 17       	cp	r26, r24
     eca:	b9 07       	cpc	r27, r25
     ecc:	19 f0       	breq	.+6      	; 0xed4 <rb16_write+0x68>
     ece:	84 83       	std	Z+4, r24	; 0x04
     ed0:	95 83       	std	Z+5, r25	; 0x05
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <rb16_write+0x6c>
     ed4:	14 82       	std	Z+4, r1	; 0x04
     ed6:	15 82       	std	Z+5, r1	; 0x05
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	82 2f       	mov	r24, r18
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	84 17       	cp	r24, r20
     ee0:	95 07       	cpc	r25, r21
     ee2:	68 f2       	brcs	.-102    	; 0xe7e <rb16_write+0x12>
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <rb16_init>:
     eea:	fc 01       	movw	r30, r24
     eec:	12 82       	std	Z+2, r1	; 0x02
     eee:	13 82       	std	Z+3, r1	; 0x03
     ef0:	14 82       	std	Z+4, r1	; 0x04
     ef2:	15 82       	std	Z+5, r1	; 0x05
     ef4:	66 83       	std	Z+6, r22	; 0x06
     ef6:	77 83       	std	Z+7, r23	; 0x07
     ef8:	40 83       	st	Z, r20
     efa:	51 83       	std	Z+1, r21	; 0x01
     efc:	08 95       	ret

00000efe <rb16_get_nth>:
     efe:	dc 01       	movw	r26, r24
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	ed 91       	ld	r30, X+
     f04:	fc 91       	ld	r31, X
     f06:	13 97       	sbiw	r26, 0x03	; 3
     f08:	cb 01       	movw	r24, r22
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	e8 17       	cp	r30, r24
     f0e:	f9 07       	cpc	r31, r25
     f10:	78 f0       	brcs	.+30     	; 0xf30 <rb16_get_nth+0x32>
     f12:	e1 50       	subi	r30, 0x01	; 1
     f14:	f0 48       	sbci	r31, 0x80	; 128
     f16:	e6 1b       	sub	r30, r22
     f18:	f7 0b       	sbc	r31, r23
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	16 96       	adiw	r26, 0x06	; 6
     f20:	8d 91       	ld	r24, X+
     f22:	9c 91       	ld	r25, X
     f24:	17 97       	sbiw	r26, 0x07	; 7
     f26:	e8 0f       	add	r30, r24
     f28:	f9 1f       	adc	r31, r25
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	08 95       	ret
     f30:	2d 91       	ld	r18, X+
     f32:	3c 91       	ld	r19, X
     f34:	11 97       	sbiw	r26, 0x01	; 1
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	e1 50       	subi	r30, 0x01	; 1
     f3c:	f0 48       	sbci	r31, 0x80	; 128
     f3e:	e6 1b       	sub	r30, r22
     f40:	f7 0b       	sbc	r31, r23
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	16 96       	adiw	r26, 0x06	; 6
     f48:	8d 91       	ld	r24, X+
     f4a:	9c 91       	ld	r25, X
     f4c:	17 97       	sbiw	r26, 0x07	; 7
     f4e:	e8 0f       	add	r30, r24
     f50:	f9 1f       	adc	r31, r25
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	08 95       	ret

00000f58 <rb32_write>:
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	fc 01       	movw	r30, r24
     f66:	41 15       	cp	r20, r1
     f68:	51 05       	cpc	r21, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <rb32_write+0x16>
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <rb32_write+0x94>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	db 01       	movw	r26, r22
     f7e:	a8 0f       	add	r26, r24
     f80:	b9 1f       	adc	r27, r25
     f82:	cd 90       	ld	r12, X+
     f84:	dd 90       	ld	r13, X+
     f86:	ed 90       	ld	r14, X+
     f88:	fc 90       	ld	r15, X
     f8a:	a2 81       	ldd	r26, Z+2	; 0x02
     f8c:	b3 81       	ldd	r27, Z+3	; 0x03
     f8e:	aa 0f       	add	r26, r26
     f90:	bb 1f       	adc	r27, r27
     f92:	aa 0f       	add	r26, r26
     f94:	bb 1f       	adc	r27, r27
     f96:	86 81       	ldd	r24, Z+6	; 0x06
     f98:	97 81       	ldd	r25, Z+7	; 0x07
     f9a:	a8 0f       	add	r26, r24
     f9c:	b9 1f       	adc	r27, r25
     f9e:	cd 92       	st	X+, r12
     fa0:	dd 92       	st	X+, r13
     fa2:	ed 92       	st	X+, r14
     fa4:	fc 92       	st	X, r15
     fa6:	13 97       	sbiw	r26, 0x03	; 3
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	82 83       	std	Z+2, r24	; 0x02
     fb0:	93 83       	std	Z+3, r25	; 0x03
     fb2:	a0 81       	ld	r26, Z
     fb4:	b1 81       	ldd	r27, Z+1	; 0x01
     fb6:	8a 17       	cp	r24, r26
     fb8:	9b 07       	cpc	r25, r27
     fba:	11 f4       	brne	.+4      	; 0xfc0 <rb32_write+0x68>
     fbc:	12 82       	std	Z+2, r1	; 0x02
     fbe:	13 82       	std	Z+3, r1	; 0x03
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	93 81       	ldd	r25, Z+3	; 0x03
     fc4:	c4 81       	ldd	r28, Z+4	; 0x04
     fc6:	d5 81       	ldd	r29, Z+5	; 0x05
     fc8:	8c 17       	cp	r24, r28
     fca:	9d 07       	cpc	r25, r29
     fcc:	49 f4       	brne	.+18     	; 0xfe0 <rb32_write+0x88>
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	a8 17       	cp	r26, r24
     fd2:	b9 07       	cpc	r27, r25
     fd4:	19 f0       	breq	.+6      	; 0xfdc <rb32_write+0x84>
     fd6:	84 83       	std	Z+4, r24	; 0x04
     fd8:	95 83       	std	Z+5, r25	; 0x05
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <rb32_write+0x88>
     fdc:	14 82       	std	Z+4, r1	; 0x04
     fde:	15 82       	std	Z+5, r1	; 0x05
     fe0:	2f 5f       	subi	r18, 0xFF	; 255
     fe2:	82 2f       	mov	r24, r18
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	84 17       	cp	r24, r20
     fe8:	95 07       	cpc	r25, r21
     fea:	20 f2       	brcs	.-120    	; 0xf74 <rb32_write+0x1c>
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	08 95       	ret

00000ffa <rb32_init>:
     ffa:	fc 01       	movw	r30, r24
     ffc:	12 82       	std	Z+2, r1	; 0x02
     ffe:	13 82       	std	Z+3, r1	; 0x03
    1000:	14 82       	std	Z+4, r1	; 0x04
    1002:	15 82       	std	Z+5, r1	; 0x05
    1004:	66 83       	std	Z+6, r22	; 0x06
    1006:	77 83       	std	Z+7, r23	; 0x07
    1008:	40 83       	st	Z, r20
    100a:	51 83       	std	Z+1, r21	; 0x01
    100c:	08 95       	ret

0000100e <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    100e:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    1010:	12 96       	adiw	r26, 0x02	; 2
    1012:	ed 91       	ld	r30, X+
    1014:	fc 91       	ld	r31, X
    1016:	13 97       	sbiw	r26, 0x03	; 3
    1018:	cb 01       	movw	r24, r22
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	e8 17       	cp	r30, r24
    101e:	f9 07       	cpc	r31, r25
    1020:	98 f0       	brcs	.+38     	; 0x1048 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    1022:	e1 50       	subi	r30, 0x01	; 1
    1024:	f0 4c       	sbci	r31, 0xC0	; 192
    1026:	e6 1b       	sub	r30, r22
    1028:	f7 0b       	sbc	r31, r23
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	16 96       	adiw	r26, 0x06	; 6
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	17 97       	sbiw	r26, 0x07	; 7
    103a:	e8 0f       	add	r30, r24
    103c:	f9 1f       	adc	r31, r25
    103e:	60 81       	ld	r22, Z
    1040:	71 81       	ldd	r23, Z+1	; 0x01
    1042:	82 81       	ldd	r24, Z+2	; 0x02
    1044:	93 81       	ldd	r25, Z+3	; 0x03
    1046:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    1048:	2d 91       	ld	r18, X+
    104a:	3c 91       	ld	r19, X
    104c:	11 97       	sbiw	r26, 0x01	; 1
    104e:	e2 0f       	add	r30, r18
    1050:	f3 1f       	adc	r31, r19
    1052:	e1 50       	subi	r30, 0x01	; 1
    1054:	f0 4c       	sbci	r31, 0xC0	; 192
    1056:	e6 1b       	sub	r30, r22
    1058:	f7 0b       	sbc	r31, r23
    105a:	ee 0f       	add	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	16 96       	adiw	r26, 0x06	; 6
    1064:	8d 91       	ld	r24, X+
    1066:	9c 91       	ld	r25, X
    1068:	17 97       	sbiw	r26, 0x07	; 7
    106a:	e8 0f       	add	r30, r24
    106c:	f9 1f       	adc	r31, r25
    106e:	60 81       	ld	r22, Z
    1070:	71 81       	ldd	r23, Z+1	; 0x01
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	93 81       	ldd	r25, Z+3	; 0x03
}
    1076:	08 95       	ret

00001078 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	1f 92       	push	r1
    107e:	1f 92       	push	r1
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    108a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    108e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1092:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1096:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    109a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    109e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10a2:	8f b7       	in	r24, 0x3f	; 63
    10a4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    10a6:	f8 94       	cli
	return flags;
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    10aa:	e0 e5       	ldi	r30, 0x50	; 80
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	82 60       	ori	r24, 0x02	; 2
    10b2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    10b8:	81 ff       	sbrs	r24, 1
    10ba:	fd cf       	rjmp	.-6      	; 0x10b6 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	80 e4       	ldi	r24, 0x40	; 64
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	25 d0       	rcall	.+74     	; 0x110e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10c4:	8f b7       	in	r24, 0x3f	; 63
    10c6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    10c8:	f8 94       	cli
	return flags;
    10ca:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    10cc:	e0 e5       	ldi	r30, 0x50	; 80
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8e 7f       	andi	r24, 0xFE	; 254
    10d4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10d6:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10ec:	9f b7       	in	r25, 0x3f	; 63
    10ee:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    10f0:	f8 94       	cli
	return flags;
    10f2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    10f4:	e8 2f       	mov	r30, r24
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	e0 59       	subi	r30, 0x90	; 144
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 95       	com	r22
    10fe:	80 81       	ld	r24, Z
    1100:	68 23       	and	r22, r24
    1102:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1104:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1106:	0f 90       	pop	r0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    110e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1110:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1112:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1114:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1116:	60 83       	st	Z, r22
	ret                             // Return to caller
    1118:	08 95       	ret

0000111a <__portable_avr_delay_cycles>:
	
	NVM.CMD = ERASE_EEPROM;
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <__portable_avr_delay_cycles+0xa>
    111c:	61 50       	subi	r22, 0x01	; 1
    111e:	71 09       	sbc	r23, r1
    1120:	81 09       	sbc	r24, r1
    1122:	91 09       	sbc	r25, r1
    1124:	61 15       	cp	r22, r1
    1126:	71 05       	cpc	r23, r1
    1128:	81 05       	cpc	r24, r1
    112a:	91 05       	cpc	r25, r1
    112c:	b9 f7       	brne	.-18     	; 0x111c <__portable_avr_delay_cycles+0x2>
    112e:	08 95       	ret

00001130 <pressure_init>:
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	b4 dd       	rcall	.-1176   	; 0xc9e <ms5607_init>
    1136:	82 ea       	ldi	r24, 0xA2	; 162
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	ca dd       	rcall	.-1132   	; 0xcd0 <ms5607_read>
    113c:	cf ee       	ldi	r28, 0xEF	; 239
    113e:	d0 e2       	ldi	r29, 0x20	; 32
    1140:	88 83       	st	Y, r24
    1142:	99 83       	std	Y+1, r25	; 0x01
    1144:	84 ea       	ldi	r24, 0xA4	; 164
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	c3 dd       	rcall	.-1146   	; 0xcd0 <ms5607_read>
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	9b 83       	std	Y+3, r25	; 0x03
    114e:	86 ea       	ldi	r24, 0xA6	; 166
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	be dd       	rcall	.-1156   	; 0xcd0 <ms5607_read>
    1154:	8c 83       	std	Y+4, r24	; 0x04
    1156:	9d 83       	std	Y+5, r25	; 0x05
    1158:	88 ea       	ldi	r24, 0xA8	; 168
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	b9 dd       	rcall	.-1166   	; 0xcd0 <ms5607_read>
    115e:	8e 83       	std	Y+6, r24	; 0x06
    1160:	9f 83       	std	Y+7, r25	; 0x07
    1162:	8a ea       	ldi	r24, 0xAA	; 170
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	b4 dd       	rcall	.-1176   	; 0xcd0 <ms5607_read>
    1168:	88 87       	std	Y+8, r24	; 0x08
    116a:	99 87       	std	Y+9, r25	; 0x09
    116c:	8c ea       	ldi	r24, 0xAC	; 172
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	af dd       	rcall	.-1186   	; 0xcd0 <ms5607_read>
    1172:	8a 87       	std	Y+10, r24	; 0x0a
    1174:	9b 87       	std	Y+11, r25	; 0x0b
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	08 95       	ret

0000117c <gps_init>:
    117c:	50 dd       	rcall	.-1376   	; 0xc1e <gps_uart_init>
    117e:	6b ea       	ldi	r22, 0xAB	; 171
    1180:	79 e2       	ldi	r23, 0x29	; 41
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	c9 df       	rcall	.-110    	; 0x111a <__portable_avr_delay_cycles>
    1188:	80 e3       	ldi	r24, 0x30	; 48
    118a:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    118e:	08 95       	ret

00001190 <release>:
    1190:	80 eb       	ldi	r24, 0xB0	; 176
    1192:	94 e0       	ldi	r25, 0x04	; 4
    1194:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1198:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <released>
    11a2:	08 95       	ret

000011a4 <get_pressure>:
    11a4:	4f 92       	push	r4
    11a6:	5f 92       	push	r5
    11a8:	6f 92       	push	r6
    11aa:	7f 92       	push	r7
    11ac:	8f 92       	push	r8
    11ae:	9f 92       	push	r9
    11b0:	af 92       	push	r10
    11b2:	bf 92       	push	r11
    11b4:	cf 92       	push	r12
    11b6:	df 92       	push	r13
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	99 dd       	rcall	.-1230   	; 0xcf4 <ms5607_convert_d1>
    11c2:	6b 01       	movw	r12, r22
    11c4:	7c 01       	movw	r14, r24
    11c6:	ba dd       	rcall	.-1164   	; 0xd3c <ms5607_convert_d2>
    11c8:	0e 94 24 18 	call	0x3048	; 0x3048 <__floatunsisf>
    11cc:	4b 01       	movw	r8, r22
    11ce:	5c 01       	movw	r10, r24
    11d0:	cf ee       	ldi	r28, 0xEF	; 239
    11d2:	d0 e2       	ldi	r29, 0x20	; 32
    11d4:	68 85       	ldd	r22, Y+8	; 0x08
    11d6:	79 85       	ldd	r23, Y+9	; 0x09
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 24 18 	call	0x3048	; 0x3048 <__floatunsisf>
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	53 e4       	ldi	r21, 0x43	; 67
    11e8:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    11ec:	9b 01       	movw	r18, r22
    11ee:	ac 01       	movw	r20, r24
    11f0:	c5 01       	movw	r24, r10
    11f2:	b4 01       	movw	r22, r8
    11f4:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__subsf3>
    11f8:	4b 01       	movw	r8, r22
    11fa:	5c 01       	movw	r10, r24
    11fc:	6c 81       	ldd	r22, Y+4	; 0x04
    11fe:	7d 81       	ldd	r23, Y+5	; 0x05
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 24 18 	call	0x3048	; 0x3048 <__floatunsisf>
    1208:	a5 01       	movw	r20, r10
    120a:	94 01       	movw	r18, r8
    120c:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	5c e3       	ldi	r21, 0x3C	; 60
    1218:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    121c:	2b 01       	movw	r4, r22
    121e:	3c 01       	movw	r6, r24
    1220:	68 81       	ld	r22, Y
    1222:	79 81       	ldd	r23, Y+1	; 0x01
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 24 18 	call	0x3048	; 0x3048 <__floatunsisf>
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e8       	ldi	r20, 0x80	; 128
    1232:	57 e4       	ldi	r21, 0x47	; 71
    1234:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1238:	9b 01       	movw	r18, r22
    123a:	ac 01       	movw	r20, r24
    123c:	c3 01       	movw	r24, r6
    123e:	b2 01       	movw	r22, r4
    1240:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__addsf3>
    1244:	2b 01       	movw	r4, r22
    1246:	3c 01       	movw	r6, r24
    1248:	c7 01       	movw	r24, r14
    124a:	b6 01       	movw	r22, r12
    124c:	0e 94 24 18 	call	0x3048	; 0x3048 <__floatunsisf>
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	c3 01       	movw	r24, r6
    1256:	b2 01       	movw	r22, r4
    1258:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	55 e3       	ldi	r21, 0x35	; 53
    1264:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1268:	6b 01       	movw	r12, r22
    126a:	7c 01       	movw	r14, r24
    126c:	6e 81       	ldd	r22, Y+6	; 0x06
    126e:	7f 81       	ldd	r23, Y+7	; 0x07
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 24 18 	call	0x3048	; 0x3048 <__floatunsisf>
    1278:	a5 01       	movw	r20, r10
    127a:	94 01       	movw	r18, r8
    127c:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e8       	ldi	r20, 0x80	; 128
    1286:	5c e3       	ldi	r21, 0x3C	; 60
    1288:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    128c:	4b 01       	movw	r8, r22
    128e:	5c 01       	movw	r10, r24
    1290:	6a 81       	ldd	r22, Y+2	; 0x02
    1292:	7b 81       	ldd	r23, Y+3	; 0x03
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 24 18 	call	0x3048	; 0x3048 <__floatunsisf>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	58 e4       	ldi	r21, 0x48	; 72
    12a4:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    12a8:	9b 01       	movw	r18, r22
    12aa:	ac 01       	movw	r20, r24
    12ac:	c5 01       	movw	r24, r10
    12ae:	b4 01       	movw	r22, r8
    12b0:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__addsf3>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	c7 01       	movw	r24, r14
    12ba:	b6 01       	movw	r22, r12
    12bc:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__subsf3>
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	58 e3       	ldi	r21, 0x38	; 56
    12c8:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	7f 90       	pop	r7
    12e2:	6f 90       	pop	r6
    12e4:	5f 90       	pop	r5
    12e6:	4f 90       	pop	r4
    12e8:	08 95       	ret

000012ea <get_altitude>:
    12ea:	4f 92       	push	r4
    12ec:	5f 92       	push	r5
    12ee:	6f 92       	push	r6
    12f0:	7f 92       	push	r7
    12f2:	8f 92       	push	r8
    12f4:	9f 92       	push	r9
    12f6:	af 92       	push	r10
    12f8:	bf 92       	push	r11
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	2b 01       	movw	r4, r22
    1304:	3c 01       	movw	r6, r24
    1306:	c0 90 21 20 	lds	r12, 0x2021	; 0x802021 <L>
    130a:	d0 90 22 20 	lds	r13, 0x2022	; 0x802022 <L+0x1>
    130e:	e0 90 23 20 	lds	r14, 0x2023	; 0x802023 <L+0x2>
    1312:	f0 90 24 20 	lds	r15, 0x2024	; 0x802024 <L+0x3>
    1316:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <R>
    131a:	30 91 26 20 	lds	r19, 0x2026	; 0x802026 <R+0x1>
    131e:	40 91 27 20 	lds	r20, 0x2027	; 0x802027 <R+0x2>
    1322:	50 91 28 20 	lds	r21, 0x2028	; 0x802028 <R+0x3>
    1326:	c7 01       	movw	r24, r14
    1328:	b6 01       	movw	r22, r12
    132a:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    132e:	20 91 1d 20 	lds	r18, 0x201D	; 0x80201d <g_0>
    1332:	30 91 1e 20 	lds	r19, 0x201E	; 0x80201e <g_0+0x1>
    1336:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <g_0+0x2>
    133a:	50 91 20 20 	lds	r21, 0x2020	; 0x802020 <g_0+0x3>
    133e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    1342:	4b 01       	movw	r8, r22
    1344:	5c 01       	movw	r10, r24
    1346:	a3 01       	movw	r20, r6
    1348:	92 01       	movw	r18, r4
    134a:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    134e:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    1352:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    1356:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    135a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    135e:	a5 01       	movw	r20, r10
    1360:	94 01       	movw	r18, r8
    1362:	0e 94 79 19 	call	0x32f2	; 0x32f2 <pow>
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__subsf3>
    1372:	20 91 29 20 	lds	r18, 0x2029	; 0x802029 <ground_t>
    1376:	30 91 2a 20 	lds	r19, 0x202A	; 0x80202a <ground_t+0x1>
    137a:	40 91 2b 20 	lds	r20, 0x202B	; 0x80202b <ground_t+0x2>
    137e:	50 91 2c 20 	lds	r21, 0x202C	; 0x80202c <ground_t+0x3>
    1382:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1386:	a7 01       	movw	r20, r14
    1388:	96 01       	movw	r18, r12
    138a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    138e:	20 91 fb 20 	lds	r18, 0x20FB	; 0x8020fb <ground_a>
    1392:	30 91 fc 20 	lds	r19, 0x20FC	; 0x8020fc <ground_a+0x1>
    1396:	40 91 fd 20 	lds	r20, 0x20FD	; 0x8020fd <ground_a+0x2>
    139a:	50 91 fe 20 	lds	r21, 0x20FE	; 0x8020fe <ground_a+0x3>
    139e:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__subsf3>
    13a2:	ff 90       	pop	r15
    13a4:	ef 90       	pop	r14
    13a6:	df 90       	pop	r13
    13a8:	cf 90       	pop	r12
    13aa:	bf 90       	pop	r11
    13ac:	af 90       	pop	r10
    13ae:	9f 90       	pop	r9
    13b0:	8f 90       	pop	r8
    13b2:	7f 90       	pop	r7
    13b4:	6f 90       	pop	r6
    13b6:	5f 90       	pop	r5
    13b8:	4f 90       	pop	r4
    13ba:	08 95       	ret

000013bc <diff>:
    13bc:	2f 92       	push	r2
    13be:	3f 92       	push	r3
    13c0:	4f 92       	push	r4
    13c2:	5f 92       	push	r5
    13c4:	6f 92       	push	r6
    13c6:	7f 92       	push	r7
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <diff+0x26>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <diff+0x28>
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	6c 01       	movw	r12, r24
    13ea:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    13ee:	88 23       	and	r24, r24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <diff+0x38>
    13f2:	6c c0       	rjmp	.+216    	; 0x14cc <diff+0x110>
    13f4:	00 e0       	ldi	r16, 0x00	; 0
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	41 2c       	mov	r4, r1
    13fa:	51 2c       	mov	r5, r1
    13fc:	32 01       	movw	r6, r4
    13fe:	86 2e       	mov	r8, r22
    1400:	91 2c       	mov	r9, r1
    1402:	a1 2c       	mov	r10, r1
    1404:	b1 2c       	mov	r11, r1
    1406:	89 82       	std	Y+1, r8	; 0x01
    1408:	9a 82       	std	Y+2, r9	; 0x02
    140a:	ab 82       	std	Y+3, r10	; 0x03
    140c:	bc 82       	std	Y+4, r11	; 0x04
    140e:	b8 01       	movw	r22, r16
    1410:	c6 01       	movw	r24, r12
    1412:	75 dd       	rcall	.-1302   	; 0xefe <rb16_get_nth>
    1414:	5c 01       	movw	r10, r24
    1416:	18 01       	movw	r2, r16
    1418:	2f ef       	ldi	r18, 0xFF	; 255
    141a:	22 1a       	sub	r2, r18
    141c:	32 0a       	sbc	r3, r18
    141e:	b1 01       	movw	r22, r2
    1420:	c6 01       	movw	r24, r12
    1422:	6d dd       	rcall	.-1318   	; 0xefe <rb16_get_nth>
    1424:	7c 01       	movw	r14, r24
    1426:	b8 01       	movw	r22, r16
    1428:	6e 5f       	subi	r22, 0xFE	; 254
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	c6 01       	movw	r24, r12
    142e:	67 dd       	rcall	.-1330   	; 0xefe <rb16_get_nth>
    1430:	a5 01       	movw	r20, r10
    1432:	bb 0c       	add	r11, r11
    1434:	66 0b       	sbc	r22, r22
    1436:	77 0b       	sbc	r23, r23
    1438:	8a 01       	movw	r16, r20
    143a:	9b 01       	movw	r18, r22
    143c:	00 0f       	add	r16, r16
    143e:	11 1f       	adc	r17, r17
    1440:	22 1f       	adc	r18, r18
    1442:	33 1f       	adc	r19, r19
    1444:	40 0f       	add	r20, r16
    1446:	51 1f       	adc	r21, r17
    1448:	62 1f       	adc	r22, r18
    144a:	73 1f       	adc	r23, r19
    144c:	87 01       	movw	r16, r14
    144e:	ff 0c       	add	r15, r15
    1450:	22 0b       	sbc	r18, r18
    1452:	33 0b       	sbc	r19, r19
    1454:	78 01       	movw	r14, r16
    1456:	89 01       	movw	r16, r18
    1458:	ee 0c       	add	r14, r14
    145a:	ff 1c       	adc	r15, r15
    145c:	00 1f       	adc	r16, r16
    145e:	11 1f       	adc	r17, r17
    1460:	ee 0c       	add	r14, r14
    1462:	ff 1c       	adc	r15, r15
    1464:	00 1f       	adc	r16, r16
    1466:	11 1f       	adc	r17, r17
    1468:	4a 01       	movw	r8, r20
    146a:	5b 01       	movw	r10, r22
    146c:	8e 18       	sub	r8, r14
    146e:	9f 08       	sbc	r9, r15
    1470:	a0 0a       	sbc	r10, r16
    1472:	b1 0a       	sbc	r11, r17
    1474:	ac 01       	movw	r20, r24
    1476:	99 0f       	add	r25, r25
    1478:	66 0b       	sbc	r22, r22
    147a:	77 0b       	sbc	r23, r23
    147c:	d5 01       	movw	r26, r10
    147e:	c4 01       	movw	r24, r8
    1480:	84 0f       	add	r24, r20
    1482:	95 1f       	adc	r25, r21
    1484:	a6 1f       	adc	r26, r22
    1486:	b7 1f       	adc	r27, r23
    1488:	9c 01       	movw	r18, r24
    148a:	ad 01       	movw	r20, r26
    148c:	69 81       	ldd	r22, Y+1	; 0x01
    148e:	7a 81       	ldd	r23, Y+2	; 0x02
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__mulsi3>
    1498:	0e 94 26 18 	call	0x304c	; 0x304c <__floatsisf>
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	5f e3       	ldi	r21, 0x3F	; 63
    14a4:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    14a8:	9b 01       	movw	r18, r22
    14aa:	ac 01       	movw	r20, r24
    14ac:	c3 01       	movw	r24, r6
    14ae:	b2 01       	movw	r22, r4
    14b0:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__addsf3>
    14b4:	2b 01       	movw	r4, r22
    14b6:	3c 01       	movw	r6, r24
    14b8:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    14bc:	81 01       	movw	r16, r2
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	22 16       	cp	r2, r18
    14c4:	33 06       	cpc	r3, r19
    14c6:	08 f4       	brcc	.+2      	; 0x14ca <diff+0x10e>
    14c8:	a2 cf       	rjmp	.-188    	; 0x140e <diff+0x52>
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <diff+0x116>
    14cc:	41 2c       	mov	r4, r1
    14ce:	51 2c       	mov	r5, r1
    14d0:	32 01       	movw	r6, r4
    14d2:	68 2f       	mov	r22, r24
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 26 18 	call	0x304c	; 0x304c <__floatsisf>
    14de:	9b 01       	movw	r18, r22
    14e0:	ac 01       	movw	r20, r24
    14e2:	c3 01       	movw	r24, r6
    14e4:	b2 01       	movw	r22, r4
    14e6:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	48 ec       	ldi	r20, 0xC8	; 200
    14f0:	52 e4       	ldi	r21, 0x42	; 66
    14f2:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    14f6:	26 96       	adiw	r28, 0x06	; 6
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	bf 90       	pop	r11
    150e:	af 90       	pop	r10
    1510:	9f 90       	pop	r9
    1512:	8f 90       	pop	r8
    1514:	7f 90       	pop	r7
    1516:	6f 90       	pop	r6
    1518:	5f 90       	pop	r5
    151a:	4f 90       	pop	r4
    151c:	3f 90       	pop	r3
    151e:	2f 90       	pop	r2
    1520:	08 95       	ret

00001522 <data_check>:
    1522:	3f 92       	push	r3
    1524:	4f 92       	push	r4
    1526:	5f 92       	push	r5
    1528:	6f 92       	push	r6
    152a:	7f 92       	push	r7
    152c:	8f 92       	push	r8
    152e:	9f 92       	push	r9
    1530:	af 92       	push	r10
    1532:	bf 92       	push	r11
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	00 d0       	rcall	.+0      	; 0x1546 <data_check+0x24>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <data_check+0x26>
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	8c 01       	movw	r16, r24
    154e:	19 82       	std	Y+1, r1	; 0x01
    1550:	1a 82       	std	Y+2, r1	; 0x02
    1552:	c1 2c       	mov	r12, r1
    1554:	d1 2c       	mov	r13, r1
    1556:	76 01       	movw	r14, r12
    1558:	69 81       	ldd	r22, Y+1	; 0x01
    155a:	7a 81       	ldd	r23, Y+2	; 0x02
    155c:	c8 01       	movw	r24, r16
    155e:	57 dd       	rcall	.-1362   	; 0x100e <rb32_get_nth>
    1560:	4b 01       	movw	r8, r22
    1562:	5c 01       	movw	r10, r24
    1564:	21 ea       	ldi	r18, 0xA1	; 161
    1566:	82 1a       	sub	r8, r18
    1568:	26 e8       	ldi	r18, 0x86	; 134
    156a:	92 0a       	sbc	r9, r18
    156c:	21 e0       	ldi	r18, 0x01	; 1
    156e:	a2 0a       	sbc	r10, r18
    1570:	b1 08       	sbc	r11, r1
    1572:	2f ed       	ldi	r18, 0xDF	; 223
    1574:	82 16       	cp	r8, r18
    1576:	2f e0       	ldi	r18, 0x0F	; 15
    1578:	92 06       	cpc	r9, r18
    157a:	27 e9       	ldi	r18, 0x97	; 151
    157c:	a2 06       	cpc	r10, r18
    157e:	b1 04       	cpc	r11, r1
    1580:	80 f4       	brcc	.+32     	; 0x15a2 <data_check+0x80>
    1582:	0e 94 26 18 	call	0x304c	; 0x304c <__floatsisf>
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 ea       	ldi	r20, 0xA0	; 160
    158c:	50 e4       	ldi	r21, 0x40	; 64
    158e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    1592:	9b 01       	movw	r18, r22
    1594:	ac 01       	movw	r20, r24
    1596:	c7 01       	movw	r24, r14
    1598:	b6 01       	movw	r22, r12
    159a:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__addsf3>
    159e:	6b 01       	movw	r12, r22
    15a0:	7c 01       	movw	r14, r24
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	05 97       	sbiw	r24, 0x05	; 5
    15ae:	a1 f6       	brne	.-88     	; 0x1558 <data_check+0x36>
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	1a 82       	std	Y+2, r1	; 0x02
    15b4:	81 2c       	mov	r8, r1
    15b6:	91 2c       	mov	r9, r1
    15b8:	54 01       	movw	r10, r8
    15ba:	69 81       	ldd	r22, Y+1	; 0x01
    15bc:	7a 81       	ldd	r23, Y+2	; 0x02
    15be:	c8 01       	movw	r24, r16
    15c0:	26 dd       	rcall	.-1460   	; 0x100e <rb32_get_nth>
    15c2:	2b 01       	movw	r4, r22
    15c4:	3c 01       	movw	r6, r24
    15c6:	21 ea       	ldi	r18, 0xA1	; 161
    15c8:	42 1a       	sub	r4, r18
    15ca:	26 e8       	ldi	r18, 0x86	; 134
    15cc:	52 0a       	sbc	r5, r18
    15ce:	21 e0       	ldi	r18, 0x01	; 1
    15d0:	62 0a       	sbc	r6, r18
    15d2:	71 08       	sbc	r7, r1
    15d4:	2f ed       	ldi	r18, 0xDF	; 223
    15d6:	42 16       	cp	r4, r18
    15d8:	2f e0       	ldi	r18, 0x0F	; 15
    15da:	52 06       	cpc	r5, r18
    15dc:	27 e9       	ldi	r18, 0x97	; 151
    15de:	62 06       	cpc	r6, r18
    15e0:	71 04       	cpc	r7, r1
    15e2:	90 f4       	brcc	.+36     	; 0x1608 <data_check+0xe6>
    15e4:	0e 94 26 18 	call	0x304c	; 0x304c <__floatsisf>
    15e8:	a7 01       	movw	r20, r14
    15ea:	96 01       	movw	r18, r12
    15ec:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__subsf3>
    15f0:	9b 01       	movw	r18, r22
    15f2:	ac 01       	movw	r20, r24
    15f4:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    15f8:	9b 01       	movw	r18, r22
    15fa:	ac 01       	movw	r20, r24
    15fc:	c5 01       	movw	r24, r10
    15fe:	b4 01       	movw	r22, r8
    1600:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__addsf3>
    1604:	4b 01       	movw	r8, r22
    1606:	5c 01       	movw	r10, r24
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	9a 83       	std	Y+2, r25	; 0x02
    1612:	05 97       	sbiw	r24, 0x05	; 5
    1614:	91 f6       	brne	.-92     	; 0x15ba <data_check+0x98>
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	5e e3       	ldi	r21, 0x3E	; 62
    161e:	c5 01       	movw	r24, r10
    1620:	b4 01       	movw	r22, r8
    1622:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1626:	69 83       	std	Y+1, r22	; 0x01
    1628:	7a 83       	std	Y+2, r23	; 0x02
    162a:	8b 83       	std	Y+3, r24	; 0x03
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	1d 82       	std	Y+5, r1	; 0x05
    1630:	1e 82       	std	Y+6, r1	; 0x06
    1632:	31 2c       	mov	r3, r1
    1634:	41 2c       	mov	r4, r1
    1636:	51 2c       	mov	r5, r1
    1638:	32 01       	movw	r6, r4
    163a:	6d 81       	ldd	r22, Y+5	; 0x05
    163c:	7e 81       	ldd	r23, Y+6	; 0x06
    163e:	c8 01       	movw	r24, r16
    1640:	e6 dc       	rcall	.-1588   	; 0x100e <rb32_get_nth>
    1642:	4b 01       	movw	r8, r22
    1644:	5c 01       	movw	r10, r24
    1646:	21 ea       	ldi	r18, 0xA1	; 161
    1648:	82 1a       	sub	r8, r18
    164a:	26 e8       	ldi	r18, 0x86	; 134
    164c:	92 0a       	sbc	r9, r18
    164e:	21 e0       	ldi	r18, 0x01	; 1
    1650:	a2 0a       	sbc	r10, r18
    1652:	b1 08       	sbc	r11, r1
    1654:	2f ed       	ldi	r18, 0xDF	; 223
    1656:	82 16       	cp	r8, r18
    1658:	2f e0       	ldi	r18, 0x0F	; 15
    165a:	92 06       	cpc	r9, r18
    165c:	27 e9       	ldi	r18, 0x97	; 151
    165e:	a2 06       	cpc	r10, r18
    1660:	b1 04       	cpc	r11, r1
    1662:	50 f5       	brcc	.+84     	; 0x16b8 <data_check+0x196>
    1664:	0e 94 26 18 	call	0x304c	; 0x304c <__floatsisf>
    1668:	4b 01       	movw	r8, r22
    166a:	5c 01       	movw	r10, r24
    166c:	a7 01       	movw	r20, r14
    166e:	96 01       	movw	r18, r12
    1670:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__subsf3>
    1674:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1678:	9b 01       	movw	r18, r22
    167a:	77 23       	and	r23, r23
    167c:	24 f4       	brge	.+8      	; 0x1686 <data_check+0x164>
    167e:	22 27       	eor	r18, r18
    1680:	33 27       	eor	r19, r19
    1682:	26 1b       	sub	r18, r22
    1684:	37 0b       	sbc	r19, r23
    1686:	b9 01       	movw	r22, r18
    1688:	33 0f       	add	r19, r19
    168a:	88 0b       	sbc	r24, r24
    168c:	99 0b       	sbc	r25, r25
    168e:	0e 94 26 18 	call	0x304c	; 0x304c <__floatsisf>
    1692:	9b 01       	movw	r18, r22
    1694:	ac 01       	movw	r20, r24
    1696:	69 81       	ldd	r22, Y+1	; 0x01
    1698:	7a 81       	ldd	r23, Y+2	; 0x02
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	0e 94 0b 19 	call	0x3216	; 0x3216 <__gesf2>
    16a2:	88 23       	and	r24, r24
    16a4:	4c f0       	brlt	.+18     	; 0x16b8 <data_check+0x196>
    16a6:	a5 01       	movw	r20, r10
    16a8:	94 01       	movw	r18, r8
    16aa:	c3 01       	movw	r24, r6
    16ac:	b2 01       	movw	r22, r4
    16ae:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__addsf3>
    16b2:	2b 01       	movw	r4, r22
    16b4:	3c 01       	movw	r6, r24
    16b6:	33 94       	inc	r3
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	8d 83       	std	Y+5, r24	; 0x05
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	05 97       	sbiw	r24, 0x05	; 5
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <data_check+0x1a6>
    16c6:	b9 cf       	rjmp	.-142    	; 0x163a <data_check+0x118>
    16c8:	33 20       	and	r3, r3
    16ca:	69 f0       	breq	.+26     	; 0x16e6 <data_check+0x1c4>
    16cc:	63 2d       	mov	r22, r3
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 24 18 	call	0x3048	; 0x3048 <__floatunsisf>
    16d8:	9b 01       	movw	r18, r22
    16da:	ac 01       	movw	r20, r24
    16dc:	c3 01       	movw	r24, r6
    16de:	b2 01       	movw	r22, r4
    16e0:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <data_check+0x1cc>
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	80 e8       	ldi	r24, 0x80	; 128
    16ec:	9f eb       	ldi	r25, 0xBF	; 191
    16ee:	26 96       	adiw	r28, 0x06	; 6
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	bf 90       	pop	r11
    1706:	af 90       	pop	r10
    1708:	9f 90       	pop	r9
    170a:	8f 90       	pop	r8
    170c:	7f 90       	pop	r7
    170e:	6f 90       	pop	r6
    1710:	5f 90       	pop	r5
    1712:	4f 90       	pop	r4
    1714:	3f 90       	pop	r3
    1716:	08 95       	ret

00001718 <data_collect>:
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	00 d0       	rcall	.+0      	; 0x172e <data_collect+0x16>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <data_collect+0x18>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	5c 01       	movw	r10, r24
    1736:	8b 01       	movw	r16, r22
    1738:	35 dd       	rcall	.-1430   	; 0x11a4 <get_pressure>
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1746:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    174a:	69 83       	std	Y+1, r22	; 0x01
    174c:	7a 83       	std	Y+2, r23	; 0x02
    174e:	8b 83       	std	Y+3, r24	; 0x03
    1750:	9c 83       	std	Y+4, r25	; 0x04
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	be 01       	movw	r22, r28
    1758:	6f 5f       	subi	r22, 0xFF	; 255
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	c8 01       	movw	r24, r16
    175e:	fc db       	rcall	.-2056   	; 0xf58 <rb32_write>
    1760:	c8 01       	movw	r24, r16
    1762:	df de       	rcall	.-578    	; 0x1522 <data_check>
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e2       	ldi	r20, 0x20	; 32
    176a:	51 e4       	ldi	r21, 0x41	; 65
    176c:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    1770:	6b 01       	movw	r12, r22
    1772:	7c 01       	movw	r14, r24
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f eb       	ldi	r21, 0xBF	; 191
    177c:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__cmpsf2>
    1780:	88 23       	and	r24, r24
    1782:	81 f1       	breq	.+96     	; 0x17e4 <data_collect+0xcc>
    1784:	c0 92 e0 20 	sts	0x20E0, r12	; 0x8020e0 <press>
    1788:	d0 92 e1 20 	sts	0x20E1, r13	; 0x8020e1 <press+0x1>
    178c:	e0 92 e2 20 	sts	0x20E2, r14	; 0x8020e2 <press+0x2>
    1790:	f0 92 e3 20 	sts	0x20E3, r15	; 0x8020e3 <press+0x3>
    1794:	c7 01       	movw	r24, r14
    1796:	b6 01       	movw	r22, r12
    1798:	a8 dd       	rcall	.-1200   	; 0x12ea <get_altitude>
    179a:	60 93 d8 20 	sts	0x20D8, r22	; 0x8020d8 <alt>
    179e:	70 93 d9 20 	sts	0x20D9, r23	; 0x8020d9 <alt+0x1>
    17a2:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <alt+0x2>
    17a6:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <alt+0x3>
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	48 ec       	ldi	r20, 0xC8	; 200
    17b0:	52 e4       	ldi	r21, 0x42	; 66
    17b2:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    17b6:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    17ba:	6d 83       	std	Y+5, r22	; 0x05
    17bc:	7e 83       	std	Y+6, r23	; 0x06
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	be 01       	movw	r22, r28
    17c4:	6b 5f       	subi	r22, 0xFB	; 251
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	c5 01       	movw	r24, r10
    17ca:	50 db       	rcall	.-2400   	; 0xe6c <rb16_write>
    17cc:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    17d0:	c5 01       	movw	r24, r10
    17d2:	f4 dd       	rcall	.-1048   	; 0x13bc <diff>
    17d4:	60 93 d0 20 	sts	0x20D0, r22	; 0x8020d0 <velocity>
    17d8:	70 93 d1 20 	sts	0x20D1, r23	; 0x8020d1 <velocity+0x1>
    17dc:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <velocity+0x2>
    17e0:	90 93 d3 20 	sts	0x20D3, r25	; 0x8020d3 <velocity+0x3>
    17e4:	83 e3       	ldi	r24, 0x33	; 51
    17e6:	93 e1       	ldi	r25, 0x13	; 19
    17e8:	a0 e9       	ldi	r26, 0x90	; 144
    17ea:	b3 e4       	ldi	r27, 0x43	; 67
    17ec:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <temp>
    17f0:	90 93 dd 20 	sts	0x20DD, r25	; 0x8020dd <temp+0x1>
    17f4:	a0 93 de 20 	sts	0x20DE, r26	; 0x8020de <temp+0x2>
    17f8:	b0 93 df 20 	sts	0x20DF, r27	; 0x8020df <temp+0x3>
    17fc:	26 96       	adiw	r28, 0x06	; 6
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	df 90       	pop	r13
    1810:	cf 90       	pop	r12
    1812:	bf 90       	pop	r11
    1814:	af 90       	pop	r10
    1816:	08 95       	ret

00001818 <state_check>:
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	c0 90 d0 20 	lds	r12, 0x20D0	; 0x8020d0 <velocity>
    1824:	d0 90 d1 20 	lds	r13, 0x20D1	; 0x8020d1 <velocity+0x1>
    1828:	e0 90 d2 20 	lds	r14, 0x20D2	; 0x8020d2 <velocity+0x2>
    182c:	f0 90 d3 20 	lds	r15, 0x20D3	; 0x8020d3 <velocity+0x3>
    1830:	c7 01       	movw	r24, r14
    1832:	b6 01       	movw	r22, r12
    1834:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1838:	9b 01       	movw	r18, r22
    183a:	77 23       	and	r23, r23
    183c:	24 f4       	brge	.+8      	; 0x1846 <state_check+0x2e>
    183e:	22 27       	eor	r18, r18
    1840:	33 27       	eor	r19, r19
    1842:	26 1b       	sub	r18, r22
    1844:	37 0b       	sbc	r19, r23
    1846:	26 30       	cpi	r18, 0x06	; 6
    1848:	31 05       	cpc	r19, r1
    184a:	8c f0       	brlt	.+34     	; 0x186e <state_check+0x56>
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	a9 01       	movw	r20, r18
    1852:	c7 01       	movw	r24, r14
    1854:	b6 01       	movw	r22, r12
    1856:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__cmpsf2>
    185a:	88 23       	and	r24, r24
    185c:	24 f0       	brlt	.+8      	; 0x1866 <state_check+0x4e>
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    1864:	24 c0       	rjmp	.+72     	; 0x18ae <state_check+0x96>
    1866:	82 e0       	ldi	r24, 0x02	; 2
    1868:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    186c:	20 c0       	rjmp	.+64     	; 0x18ae <state_check+0x96>
    186e:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <state>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	48 e4       	ldi	r20, 0x48	; 72
    1878:	52 e4       	ldi	r21, 0x42	; 66
    187a:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    187e:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    1882:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    1886:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    188a:	0e 94 0b 19 	call	0x3216	; 0x3216 <__gesf2>
    188e:	18 16       	cp	r1, r24
    1890:	24 f0       	brlt	.+8      	; 0x189a <state_check+0x82>
    1892:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <reset_received>
    1896:	88 23       	and	r24, r24
    1898:	19 f0       	breq	.+6      	; 0x18a0 <state_check+0x88>
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    18a0:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <released>
    18a4:	88 23       	and	r24, r24
    18a6:	19 f0       	breq	.+6      	; 0x18ae <state_check+0x96>
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <state>
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	08 95       	ret

000018b8 <release_servo_init>:
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	84 e0       	ldi	r24, 0x04	; 4
    18bc:	12 dc       	rcall	.-2012   	; 0x10e2 <sysclk_enable_module>
    18be:	64 e0       	ldi	r22, 0x04	; 4
    18c0:	84 e0       	ldi	r24, 0x04	; 4
    18c2:	0f dc       	rcall	.-2018   	; 0x10e2 <sysclk_enable_module>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
    18ca:	e0 e0       	ldi	r30, 0x00	; 0
    18cc:	f9 e0       	ldi	r31, 0x09	; 9
    18ce:	85 e0       	ldi	r24, 0x05	; 5
    18d0:	80 83       	st	Z, r24
    18d2:	83 e1       	ldi	r24, 0x13	; 19
    18d4:	81 83       	std	Z+1, r24	; 0x01
    18d6:	80 e1       	ldi	r24, 0x10	; 16
    18d8:	97 e2       	ldi	r25, 0x27	; 39
    18da:	86 a3       	std	Z+38, r24	; 0x26
    18dc:	97 a3       	std	Z+39, r25	; 0x27
    18de:	8e ee       	ldi	r24, 0xEE	; 238
    18e0:	92 e0       	ldi	r25, 0x02	; 2
    18e2:	80 a7       	std	Z+40, r24	; 0x28
    18e4:	91 a7       	std	Z+41, r25	; 0x29
    18e6:	08 95       	ret

000018e8 <servo_pid>:
    18e8:	8f 92       	push	r8
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	7c 01       	movw	r14, r24
    1902:	c0 e0       	ldi	r28, 0x00	; 0
    1904:	d0 e0       	ldi	r29, 0x00	; 0
    1906:	00 e0       	ldi	r16, 0x00	; 0
    1908:	10 e0       	ldi	r17, 0x00	; 0
    190a:	be 01       	movw	r22, r28
    190c:	c7 01       	movw	r24, r14
    190e:	f7 da       	rcall	.-2578   	; 0xefe <rb16_get_nth>
    1910:	08 0f       	add	r16, r24
    1912:	19 1f       	adc	r17, r25
    1914:	21 96       	adiw	r28, 0x01	; 1
    1916:	ca 30       	cpi	r28, 0x0A	; 10
    1918:	d1 05       	cpc	r29, r1
    191a:	b9 f7       	brne	.-18     	; 0x190a <servo_pid+0x22>
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	c7 01       	movw	r24, r14
    1922:	ed da       	rcall	.-2598   	; 0xefe <rb16_get_nth>
    1924:	ec 01       	movw	r28, r24
    1926:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    192a:	c7 01       	movw	r24, r14
    192c:	47 dd       	rcall	.-1394   	; 0x13bc <diff>
    192e:	6b 01       	movw	r12, r22
    1930:	7c 01       	movw	r14, r24
    1932:	be 01       	movw	r22, r28
    1934:	dd 0f       	add	r29, r29
    1936:	88 0b       	sbc	r24, r24
    1938:	99 0b       	sbc	r25, r25
    193a:	0e 94 26 18 	call	0x304c	; 0x304c <__floatsisf>
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	a9 01       	movw	r20, r18
    1944:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	48 ec       	ldi	r20, 0xC8	; 200
    194e:	52 e4       	ldi	r21, 0x42	; 66
    1950:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    1954:	4b 01       	movw	r8, r22
    1956:	5c 01       	movw	r10, r24
    1958:	b8 01       	movw	r22, r16
    195a:	11 0f       	add	r17, r17
    195c:	88 0b       	sbc	r24, r24
    195e:	99 0b       	sbc	r25, r25
    1960:	0e 94 26 18 	call	0x304c	; 0x304c <__floatsisf>
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	a9 01       	movw	r20, r18
    196a:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	48 ec       	ldi	r20, 0xC8	; 200
    1974:	52 e4       	ldi	r21, 0x42	; 66
    1976:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    197a:	9b 01       	movw	r18, r22
    197c:	ac 01       	movw	r20, r24
    197e:	c5 01       	movw	r24, r10
    1980:	b4 01       	movw	r22, r8
    1982:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__addsf3>
    1986:	4b 01       	movw	r8, r22
    1988:	5c 01       	movw	r10, r24
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	a9 01       	movw	r20, r18
    1990:	c7 01       	movw	r24, r14
    1992:	b6 01       	movw	r22, r12
    1994:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1998:	9b 01       	movw	r18, r22
    199a:	ac 01       	movw	r20, r24
    199c:	c5 01       	movw	r24, r10
    199e:	b4 01       	movw	r22, r8
    19a0:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__addsf3>
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e8       	ldi	r19, 0x80	; 128
    19a8:	4b eb       	ldi	r20, 0xBB	; 187
    19aa:	54 e4       	ldi	r21, 0x44	; 68
    19ac:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__addsf3>
    19b0:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__fixunssfsi>
    19b4:	60 93 1b 20 	sts	0x201B, r22	; 0x80201b <servo_pulse>
    19b8:	70 93 1c 20 	sts	0x201C, r23	; 0x80201c <servo_pulse+0x1>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 24 18 	call	0x3048	; 0x3048 <__floatunsisf>
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	4a e7       	ldi	r20, 0x7A	; 122
    19ca:	54 e4       	ldi	r21, 0x44	; 68
    19cc:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__divsf3>
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4a ef       	ldi	r20, 0xFA	; 250
    19d6:	53 e4       	ldi	r21, 0x43	; 67
    19d8:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    19dc:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__fixunssfsi>
    19e0:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    19e4:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	bf 90       	pop	r11
    19fa:	af 90       	pop	r10
    19fc:	9f 90       	pop	r9
    19fe:	8f 90       	pop	r8
    1a00:	08 95       	ret

00001a02 <clock_init>:
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	85 e0       	ldi	r24, 0x05	; 5
    1a06:	6d db       	rcall	.-2342   	; 0x10e2 <sysclk_enable_module>
    1a08:	e0 e0       	ldi	r30, 0x00	; 0
    1a0a:	fa e0       	ldi	r31, 0x0A	; 10
    1a0c:	87 e0       	ldi	r24, 0x07	; 7
    1a0e:	80 83       	st	Z, r24
    1a10:	81 e1       	ldi	r24, 0x11	; 17
    1a12:	9a e7       	ldi	r25, 0x7A	; 122
    1a14:	86 a3       	std	Z+38, r24	; 0x26
    1a16:	97 a3       	std	Z+39, r25	; 0x27
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	86 83       	std	Z+6, r24	; 0x06
    1a1c:	08 95       	ret

00001a1e <cali_alt>:
    1a1e:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <press>
    1a22:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <press+0x1>
    1a26:	a0 91 e2 20 	lds	r26, 0x20E2	; 0x8020e2 <press+0x2>
    1a2a:	b0 91 e3 20 	lds	r27, 0x20E3	; 0x8020e3 <press+0x3>
    1a2e:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p>
    1a32:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x1>
    1a36:	a0 93 2f 20 	sts	0x202F, r26	; 0x80202f <ground_p+0x2>
    1a3a:	b0 93 30 20 	sts	0x2030, r27	; 0x802030 <ground_p+0x3>
    1a3e:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <alt>
    1a42:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <alt+0x1>
    1a46:	a0 91 da 20 	lds	r26, 0x20DA	; 0x8020da <alt+0x2>
    1a4a:	b0 91 db 20 	lds	r27, 0x20DB	; 0x8020db <alt+0x3>
    1a4e:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <ground_a>
    1a52:	90 93 fc 20 	sts	0x20FC, r25	; 0x8020fc <ground_a+0x1>
    1a56:	a0 93 fd 20 	sts	0x20FD, r26	; 0x8020fd <ground_a+0x2>
    1a5a:	b0 93 fe 20 	sts	0x20FE, r27	; 0x8020fe <ground_a+0x3>
    1a5e:	83 e3       	ldi	r24, 0x33	; 51
    1a60:	93 e1       	ldi	r25, 0x13	; 19
    1a62:	a0 e9       	ldi	r26, 0x90	; 144
    1a64:	b3 e4       	ldi	r27, 0x43	; 67
    1a66:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <ground_t>
    1a6a:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <ground_t+0x1>
    1a6e:	a0 93 2b 20 	sts	0x202B, r26	; 0x80202b <ground_t+0x2>
    1a72:	b0 93 2c 20 	sts	0x202C, r27	; 0x80202c <ground_t+0x3>
    1a76:	08 95       	ret

00001a78 <send_gps>:
    1a78:	8f 92       	push	r8
    1a7a:	9f 92       	push	r9
    1a7c:	af 92       	push	r10
    1a7e:	bf 92       	push	r11
    1a80:	cf 92       	push	r12
    1a82:	df 92       	push	r13
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	c6 54       	subi	r28, 0x46	; 70
    1a96:	d1 09       	sbc	r29, r1
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	60 91 c4 20 	lds	r22, 0x20C4	; 0x8020c4 <gps_long>
    1aa0:	70 91 c5 20 	lds	r23, 0x20C5	; 0x8020c5 <gps_long+0x1>
    1aa4:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <gps_long+0x2>
    1aa8:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <gps_long+0x3>
    1aac:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1ab0:	16 2f       	mov	r17, r22
    1ab2:	07 2f       	mov	r16, r23
    1ab4:	c0 90 c8 20 	lds	r12, 0x20C8	; 0x8020c8 <gps_lat>
    1ab8:	d0 90 c9 20 	lds	r13, 0x20C9	; 0x8020c9 <gps_lat+0x1>
    1abc:	e0 90 ca 20 	lds	r14, 0x20CA	; 0x8020ca <gps_lat+0x2>
    1ac0:	f0 90 cb 20 	lds	r15, 0x20CB	; 0x8020cb <gps_lat+0x3>
    1ac4:	a6 2f       	mov	r26, r22
    1ac6:	b7 2f       	mov	r27, r23
    1ac8:	bb 23       	and	r27, r27
    1aca:	1c f4       	brge	.+6      	; 0x1ad2 <send_gps+0x5a>
    1acc:	b1 95       	neg	r27
    1ace:	a1 95       	neg	r26
    1ad0:	b1 09       	sbc	r27, r1
    1ad2:	20 e4       	ldi	r18, 0x40	; 64
    1ad4:	32 e4       	ldi	r19, 0x42	; 66
    1ad6:	4f e0       	ldi	r20, 0x0F	; 15
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	0e 94 30 1b 	call	0x3660	; 0x3660 <__mulshisi3>
    1ade:	0f 2e       	mov	r0, r31
    1ae0:	f0 e4       	ldi	r31, 0x40	; 64
    1ae2:	8f 2e       	mov	r8, r31
    1ae4:	f2 e4       	ldi	r31, 0x42	; 66
    1ae6:	9f 2e       	mov	r9, r31
    1ae8:	ff e0       	ldi	r31, 0x0F	; 15
    1aea:	af 2e       	mov	r10, r31
    1aec:	b1 2c       	mov	r11, r1
    1aee:	f0 2d       	mov	r31, r0
    1af0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__divmodsi4>
    1af4:	9f 93       	push	r25
    1af6:	8f 93       	push	r24
    1af8:	7f 93       	push	r23
    1afa:	6f 93       	push	r22
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	34 e2       	ldi	r19, 0x24	; 36
    1b04:	44 e7       	ldi	r20, 0x74	; 116
    1b06:	59 e4       	ldi	r21, 0x49	; 73
    1b08:	c7 01       	movw	r24, r14
    1b0a:	b6 01       	movw	r22, r12
    1b0c:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1b10:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1b14:	a5 01       	movw	r20, r10
    1b16:	94 01       	movw	r18, r8
    1b18:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__divmodsi4>
    1b1c:	9f 93       	push	r25
    1b1e:	8f 93       	push	r24
    1b20:	7f 93       	push	r23
    1b22:	6f 93       	push	r22
    1b24:	c7 01       	movw	r24, r14
    1b26:	b6 01       	movw	r22, r12
    1b28:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1b2c:	7f 93       	push	r23
    1b2e:	6f 93       	push	r22
    1b30:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <gps_msg+0x1>
    1b34:	8f 93       	push	r24
    1b36:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <gps_msg>
    1b3a:	8f 93       	push	r24
    1b3c:	8e 01       	movw	r16, r28
    1b3e:	0f 5f       	subi	r16, 0xFF	; 255
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	1f 93       	push	r17
    1b44:	0f 93       	push	r16
    1b46:	0e 94 c0 1b 	call	0x3780	; 0x3780 <sprintf>
    1b4a:	1f 93       	push	r17
    1b4c:	0f 93       	push	r16
    1b4e:	0e 94 ad 1b 	call	0x375a	; 0x375a <printf>
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	ca 5b       	subi	r28, 0xBA	; 186
    1b58:	df 4f       	sbci	r29, 0xFF	; 255
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	df 90       	pop	r13
    1b6c:	cf 90       	pop	r12
    1b6e:	bf 90       	pop	r11
    1b70:	af 90       	pop	r10
    1b72:	9f 90       	pop	r9
    1b74:	8f 90       	pop	r8
    1b76:	08 95       	ret

00001b78 <packet>:
    1b78:	4f 92       	push	r4
    1b7a:	5f 92       	push	r5
    1b7c:	6f 92       	push	r6
    1b7e:	7f 92       	push	r7
    1b80:	8f 92       	push	r8
    1b82:	9f 92       	push	r9
    1b84:	af 92       	push	r10
    1b86:	bf 92       	push	r11
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	c0 91 e4 20 	lds	r28, 0x20E4	; 0x8020e4 <packets>
    1b9c:	d0 91 e5 20 	lds	r29, 0x20E5	; 0x8020e5 <packets+0x1>
    1ba0:	21 96       	adiw	r28, 0x01	; 1
    1ba2:	c0 93 e4 20 	sts	0x20E4, r28	; 0x8020e4 <packets>
    1ba6:	d0 93 e5 20 	sts	0x20E5, r29	; 0x8020e5 <packets+0x1>
    1baa:	60 91 c0 20 	lds	r22, 0x20C0	; 0x8020c0 <gps_alt>
    1bae:	70 91 c1 20 	lds	r23, 0x20C1	; 0x8020c1 <gps_alt+0x1>
    1bb2:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <gps_alt+0x2>
    1bb6:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <gps_alt+0x3>
    1bba:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1bbe:	16 2f       	mov	r17, r22
    1bc0:	07 2f       	mov	r16, r23
    1bc2:	40 90 c4 20 	lds	r4, 0x20C4	; 0x8020c4 <gps_long>
    1bc6:	50 90 c5 20 	lds	r5, 0x20C5	; 0x8020c5 <gps_long+0x1>
    1bca:	60 90 c6 20 	lds	r6, 0x20C6	; 0x8020c6 <gps_long+0x2>
    1bce:	70 90 c7 20 	lds	r7, 0x20C7	; 0x8020c7 <gps_long+0x3>
    1bd2:	80 90 c8 20 	lds	r8, 0x20C8	; 0x8020c8 <gps_lat>
    1bd6:	90 90 c9 20 	lds	r9, 0x20C9	; 0x8020c9 <gps_lat+0x1>
    1bda:	a0 90 ca 20 	lds	r10, 0x20CA	; 0x8020ca <gps_lat+0x2>
    1bde:	b0 90 cb 20 	lds	r11, 0x20CB	; 0x8020cb <gps_lat+0x3>
    1be2:	60 91 cc 20 	lds	r22, 0x20CC	; 0x8020cc <gps_t>
    1be6:	70 91 cd 20 	lds	r23, 0x20CD	; 0x8020cd <gps_t+0x1>
    1bea:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <gps_t+0x2>
    1bee:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <gps_t+0x3>
    1bf2:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1bf6:	6b 01       	movw	r12, r22
    1bf8:	7c 01       	movw	r14, r24
    1bfa:	60 91 ae 20 	lds	r22, 0x20AE	; 0x8020ae <__data_end>
    1bfe:	70 91 af 20 	lds	r23, 0x20AF	; 0x8020af <__data_end+0x1>
    1c02:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <__data_end+0x2>
    1c06:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <__data_end+0x3>
    1c0a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1c0e:	7f 93       	push	r23
    1c10:	6f 93       	push	r22
    1c12:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <state>
    1c16:	1f 92       	push	r1
    1c18:	8f 93       	push	r24
    1c1a:	60 91 b2 20 	lds	r22, 0x20B2	; 0x8020b2 <rpm>
    1c1e:	70 91 b3 20 	lds	r23, 0x20B3	; 0x8020b3 <rpm+0x1>
    1c22:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <rpm+0x2>
    1c26:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <rpm+0x3>
    1c2a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1c2e:	7f 93       	push	r23
    1c30:	6f 93       	push	r22
    1c32:	60 91 b6 20 	lds	r22, 0x20B6	; 0x8020b6 <roll>
    1c36:	70 91 b7 20 	lds	r23, 0x20B7	; 0x8020b7 <roll+0x1>
    1c3a:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <roll+0x2>
    1c3e:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <roll+0x3>
    1c42:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1c46:	7f 93       	push	r23
    1c48:	6f 93       	push	r22
    1c4a:	60 91 ba 20 	lds	r22, 0x20BA	; 0x8020ba <pitch>
    1c4e:	70 91 bb 20 	lds	r23, 0x20BB	; 0x8020bb <pitch+0x1>
    1c52:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <pitch+0x2>
    1c56:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <pitch+0x3>
    1c5a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1c5e:	7f 93       	push	r23
    1c60:	6f 93       	push	r22
    1c62:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <gps_sats+0x1>
    1c66:	8f 93       	push	r24
    1c68:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <gps_sats>
    1c6c:	8f 93       	push	r24
    1c6e:	81 2f       	mov	r24, r17
    1c70:	90 2f       	mov	r25, r16
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	9c 01       	movw	r18, r24
    1c78:	22 0f       	add	r18, r18
    1c7a:	33 1f       	adc	r19, r19
    1c7c:	22 0f       	add	r18, r18
    1c7e:	33 1f       	adc	r19, r19
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	6a e0       	ldi	r22, 0x0A	; 10
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__divmodhi4>
    1c8c:	9f 93       	push	r25
    1c8e:	8f 93       	push	r24
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	34 e2       	ldi	r19, 0x24	; 36
    1c98:	44 e7       	ldi	r20, 0x74	; 116
    1c9a:	59 e4       	ldi	r21, 0x49	; 73
    1c9c:	c3 01       	movw	r24, r6
    1c9e:	b2 01       	movw	r22, r4
    1ca0:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1ca4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1ca8:	20 e4       	ldi	r18, 0x40	; 64
    1caa:	32 e4       	ldi	r19, 0x42	; 66
    1cac:	4f e0       	ldi	r20, 0x0F	; 15
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__divmodsi4>
    1cb4:	9b 01       	movw	r18, r22
    1cb6:	77 23       	and	r23, r23
    1cb8:	24 f4       	brge	.+8      	; 0x1cc2 <packet+0x14a>
    1cba:	22 27       	eor	r18, r18
    1cbc:	33 27       	eor	r19, r19
    1cbe:	26 1b       	sub	r18, r22
    1cc0:	37 0b       	sbc	r19, r23
    1cc2:	c9 01       	movw	r24, r18
    1cc4:	33 0f       	add	r19, r19
    1cc6:	aa 0b       	sbc	r26, r26
    1cc8:	bb 0b       	sbc	r27, r27
    1cca:	bf 93       	push	r27
    1ccc:	af 93       	push	r26
    1cce:	9f 93       	push	r25
    1cd0:	8f 93       	push	r24
    1cd2:	c3 01       	movw	r24, r6
    1cd4:	b2 01       	movw	r22, r4
    1cd6:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1cda:	7f 93       	push	r23
    1cdc:	6f 93       	push	r22
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	34 e2       	ldi	r19, 0x24	; 36
    1ce2:	44 e7       	ldi	r20, 0x74	; 116
    1ce4:	59 e4       	ldi	r21, 0x49	; 73
    1ce6:	c5 01       	movw	r24, r10
    1ce8:	b4 01       	movw	r22, r8
    1cea:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsf3>
    1cee:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1cf2:	20 e4       	ldi	r18, 0x40	; 64
    1cf4:	32 e4       	ldi	r19, 0x42	; 66
    1cf6:	4f e0       	ldi	r20, 0x0F	; 15
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__divmodsi4>
    1cfe:	9f 93       	push	r25
    1d00:	8f 93       	push	r24
    1d02:	7f 93       	push	r23
    1d04:	6f 93       	push	r22
    1d06:	c5 01       	movw	r24, r10
    1d08:	b4 01       	movw	r22, r8
    1d0a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1d0e:	7f 93       	push	r23
    1d10:	6f 93       	push	r22
    1d12:	0f 2e       	mov	r0, r31
    1d14:	f4 e6       	ldi	r31, 0x64	; 100
    1d16:	8f 2e       	mov	r8, r31
    1d18:	91 2c       	mov	r9, r1
    1d1a:	a1 2c       	mov	r10, r1
    1d1c:	b1 2c       	mov	r11, r1
    1d1e:	f0 2d       	mov	r31, r0
    1d20:	c7 01       	movw	r24, r14
    1d22:	b6 01       	movw	r22, r12
    1d24:	a5 01       	movw	r20, r10
    1d26:	94 01       	movw	r18, r8
    1d28:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__divmodsi4>
    1d2c:	7f 93       	push	r23
    1d2e:	6f 93       	push	r22
    1d30:	c7 01       	movw	r24, r14
    1d32:	b6 01       	movw	r22, r12
    1d34:	20 e1       	ldi	r18, 0x10	; 16
    1d36:	37 e2       	ldi	r19, 0x27	; 39
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__divmodsi4>
    1d40:	12 2f       	mov	r17, r18
    1d42:	03 2f       	mov	r16, r19
    1d44:	a5 01       	movw	r20, r10
    1d46:	94 01       	movw	r18, r8
    1d48:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__divmodsi4>
    1d4c:	3f 93       	push	r19
    1d4e:	2f 93       	push	r18
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	60 91 d4 20 	lds	r22, 0x20D4	; 0x8020d4 <volt>
    1d58:	70 91 d5 20 	lds	r23, 0x20D5	; 0x8020d5 <volt+0x1>
    1d5c:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <volt+0x2>
    1d60:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <volt+0x3>
    1d64:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1d68:	7f 93       	push	r23
    1d6a:	6f 93       	push	r22
    1d6c:	23 e3       	ldi	r18, 0x33	; 51
    1d6e:	33 e9       	ldi	r19, 0x93	; 147
    1d70:	48 e8       	ldi	r20, 0x88	; 136
    1d72:	53 e4       	ldi	r21, 0x43	; 67
    1d74:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <temp>
    1d78:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <temp+0x1>
    1d7c:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <temp+0x2>
    1d80:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <temp+0x3>
    1d84:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__subsf3>
    1d88:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1d8c:	7f 93       	push	r23
    1d8e:	6f 93       	push	r22
    1d90:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <press>
    1d94:	70 91 e1 20 	lds	r23, 0x20E1	; 0x8020e1 <press+0x1>
    1d98:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <press+0x2>
    1d9c:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <press+0x3>
    1da0:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1da4:	9f 93       	push	r25
    1da6:	8f 93       	push	r24
    1da8:	7f 93       	push	r23
    1daa:	6f 93       	push	r22
    1dac:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    1db0:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    1db4:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    1db8:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    1dbc:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fixsfsi>
    1dc0:	7f 93       	push	r23
    1dc2:	6f 93       	push	r22
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <timer+0x1>
    1dcc:	8f 93       	push	r24
    1dce:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <timer>
    1dd2:	8f 93       	push	r24
    1dd4:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    1dd8:	8f 93       	push	r24
    1dda:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    1dde:	8f 93       	push	r24
    1de0:	c0 e2       	ldi	r28, 0x20	; 32
    1de2:	d1 e2       	ldi	r29, 0x21	; 33
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	0e 94 c0 1b 	call	0x3780	; 0x3780 <sprintf>
    1dec:	8d b7       	in	r24, 0x3d	; 61
    1dee:	9e b7       	in	r25, 0x3e	; 62
    1df0:	c4 96       	adiw	r24, 0x34	; 52
    1df2:	8d bf       	out	0x3d, r24	; 61
    1df4:	9e bf       	out	0x3e, r25	; 62
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	0e 94 ad 1b 	call	0x375a	; 0x375a <printf>
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	ff 90       	pop	r15
    1e0c:	ef 90       	pop	r14
    1e0e:	df 90       	pop	r13
    1e10:	cf 90       	pop	r12
    1e12:	bf 90       	pop	r11
    1e14:	af 90       	pop	r10
    1e16:	9f 90       	pop	r9
    1e18:	8f 90       	pop	r8
    1e1a:	7f 90       	pop	r7
    1e1c:	6f 90       	pop	r6
    1e1e:	5f 90       	pop	r5
    1e20:	4f 90       	pop	r4
    1e22:	08 95       	ret

00001e24 <eeprom_write_const>:
    1e24:	5f 92       	push	r5
    1e26:	6f 92       	push	r6
    1e28:	7f 92       	push	r7
    1e2a:	8f 92       	push	r8
    1e2c:	9f 92       	push	r9
    1e2e:	af 92       	push	r10
    1e30:	bf 92       	push	r11
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	a0 97       	sbiw	r28, 0x20	; 32
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    1e50:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    1e54:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    1e58:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    1e5c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__fixunssfdi>
    1e60:	12 2f       	mov	r17, r18
    1e62:	63 2e       	mov	r6, r19
    1e64:	74 2e       	mov	r7, r20
    1e66:	85 2e       	mov	r8, r21
    1e68:	96 2e       	mov	r9, r22
    1e6a:	a7 2e       	mov	r10, r23
    1e6c:	b8 2e       	mov	r11, r24
    1e6e:	c9 2e       	mov	r12, r25
    1e70:	60 91 29 20 	lds	r22, 0x2029	; 0x802029 <ground_t>
    1e74:	70 91 2a 20 	lds	r23, 0x202A	; 0x80202a <ground_t+0x1>
    1e78:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <ground_t+0x2>
    1e7c:	90 91 2c 20 	lds	r25, 0x202C	; 0x80202c <ground_t+0x3>
    1e80:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__fixunssfdi>
    1e84:	e2 2f       	mov	r30, r18
    1e86:	53 2e       	mov	r5, r19
    1e88:	d4 2e       	mov	r13, r20
    1e8a:	e5 2e       	mov	r14, r21
    1e8c:	f6 2e       	mov	r15, r22
    1e8e:	b7 2f       	mov	r27, r23
    1e90:	a8 2f       	mov	r26, r24
    1e92:	f9 2f       	mov	r31, r25
    1e94:	19 83       	std	Y+1, r17	; 0x01
    1e96:	21 2f       	mov	r18, r17
    1e98:	36 2d       	mov	r19, r6
    1e9a:	47 2d       	mov	r20, r7
    1e9c:	58 2d       	mov	r21, r8
    1e9e:	69 2d       	mov	r22, r9
    1ea0:	7a 2d       	mov	r23, r10
    1ea2:	8b 2d       	mov	r24, r11
    1ea4:	9c 2d       	mov	r25, r12
    1ea6:	08 e0       	ldi	r16, 0x08	; 8
    1ea8:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1eac:	2a 83       	std	Y+2, r18	; 0x02
    1eae:	21 2f       	mov	r18, r17
    1eb0:	36 2d       	mov	r19, r6
    1eb2:	47 2d       	mov	r20, r7
    1eb4:	58 2d       	mov	r21, r8
    1eb6:	69 2d       	mov	r22, r9
    1eb8:	7a 2d       	mov	r23, r10
    1eba:	8b 2d       	mov	r24, r11
    1ebc:	9c 2d       	mov	r25, r12
    1ebe:	00 e1       	ldi	r16, 0x10	; 16
    1ec0:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1ec4:	2b 83       	std	Y+3, r18	; 0x03
    1ec6:	21 2f       	mov	r18, r17
    1ec8:	36 2d       	mov	r19, r6
    1eca:	47 2d       	mov	r20, r7
    1ecc:	58 2d       	mov	r21, r8
    1ece:	69 2d       	mov	r22, r9
    1ed0:	7a 2d       	mov	r23, r10
    1ed2:	8b 2d       	mov	r24, r11
    1ed4:	9c 2d       	mov	r25, r12
    1ed6:	08 e1       	ldi	r16, 0x18	; 24
    1ed8:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1edc:	2c 83       	std	Y+4, r18	; 0x04
    1ede:	21 2f       	mov	r18, r17
    1ee0:	36 2d       	mov	r19, r6
    1ee2:	47 2d       	mov	r20, r7
    1ee4:	58 2d       	mov	r21, r8
    1ee6:	69 2d       	mov	r22, r9
    1ee8:	7a 2d       	mov	r23, r10
    1eea:	8b 2d       	mov	r24, r11
    1eec:	9c 2d       	mov	r25, r12
    1eee:	00 e2       	ldi	r16, 0x20	; 32
    1ef0:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1ef4:	2d 83       	std	Y+5, r18	; 0x05
    1ef6:	21 2f       	mov	r18, r17
    1ef8:	36 2d       	mov	r19, r6
    1efa:	47 2d       	mov	r20, r7
    1efc:	58 2d       	mov	r21, r8
    1efe:	69 2d       	mov	r22, r9
    1f00:	7a 2d       	mov	r23, r10
    1f02:	8b 2d       	mov	r24, r11
    1f04:	9c 2d       	mov	r25, r12
    1f06:	08 e2       	ldi	r16, 0x28	; 40
    1f08:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1f0c:	2e 83       	std	Y+6, r18	; 0x06
    1f0e:	21 2f       	mov	r18, r17
    1f10:	36 2d       	mov	r19, r6
    1f12:	47 2d       	mov	r20, r7
    1f14:	58 2d       	mov	r21, r8
    1f16:	69 2d       	mov	r22, r9
    1f18:	7a 2d       	mov	r23, r10
    1f1a:	8b 2d       	mov	r24, r11
    1f1c:	9c 2d       	mov	r25, r12
    1f1e:	00 e3       	ldi	r16, 0x30	; 48
    1f20:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1f24:	2f 83       	std	Y+7, r18	; 0x07
    1f26:	21 2f       	mov	r18, r17
    1f28:	36 2d       	mov	r19, r6
    1f2a:	47 2d       	mov	r20, r7
    1f2c:	58 2d       	mov	r21, r8
    1f2e:	69 2d       	mov	r22, r9
    1f30:	7a 2d       	mov	r23, r10
    1f32:	8b 2d       	mov	r24, r11
    1f34:	9c 2d       	mov	r25, r12
    1f36:	08 e3       	ldi	r16, 0x38	; 56
    1f38:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1f3c:	28 87       	std	Y+8, r18	; 0x08
    1f3e:	e9 87       	std	Y+9, r30	; 0x09
    1f40:	2e 2f       	mov	r18, r30
    1f42:	35 2d       	mov	r19, r5
    1f44:	4d 2d       	mov	r20, r13
    1f46:	5e 2d       	mov	r21, r14
    1f48:	6f 2d       	mov	r22, r15
    1f4a:	7b 2f       	mov	r23, r27
    1f4c:	8a 2f       	mov	r24, r26
    1f4e:	9f 2f       	mov	r25, r31
    1f50:	08 e0       	ldi	r16, 0x08	; 8
    1f52:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1f56:	2a 87       	std	Y+10, r18	; 0x0a
    1f58:	2e 2f       	mov	r18, r30
    1f5a:	35 2d       	mov	r19, r5
    1f5c:	4d 2d       	mov	r20, r13
    1f5e:	5e 2d       	mov	r21, r14
    1f60:	6f 2d       	mov	r22, r15
    1f62:	7b 2f       	mov	r23, r27
    1f64:	8a 2f       	mov	r24, r26
    1f66:	9f 2f       	mov	r25, r31
    1f68:	00 e1       	ldi	r16, 0x10	; 16
    1f6a:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1f6e:	2b 87       	std	Y+11, r18	; 0x0b
    1f70:	2e 2f       	mov	r18, r30
    1f72:	35 2d       	mov	r19, r5
    1f74:	4d 2d       	mov	r20, r13
    1f76:	5e 2d       	mov	r21, r14
    1f78:	6f 2d       	mov	r22, r15
    1f7a:	7b 2f       	mov	r23, r27
    1f7c:	8a 2f       	mov	r24, r26
    1f7e:	9f 2f       	mov	r25, r31
    1f80:	08 e1       	ldi	r16, 0x18	; 24
    1f82:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1f86:	2c 87       	std	Y+12, r18	; 0x0c
    1f88:	2e 2f       	mov	r18, r30
    1f8a:	35 2d       	mov	r19, r5
    1f8c:	4d 2d       	mov	r20, r13
    1f8e:	5e 2d       	mov	r21, r14
    1f90:	6f 2d       	mov	r22, r15
    1f92:	7b 2f       	mov	r23, r27
    1f94:	8a 2f       	mov	r24, r26
    1f96:	9f 2f       	mov	r25, r31
    1f98:	00 e2       	ldi	r16, 0x20	; 32
    1f9a:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1f9e:	2d 87       	std	Y+13, r18	; 0x0d
    1fa0:	2e 2f       	mov	r18, r30
    1fa2:	35 2d       	mov	r19, r5
    1fa4:	4d 2d       	mov	r20, r13
    1fa6:	5e 2d       	mov	r21, r14
    1fa8:	6f 2d       	mov	r22, r15
    1faa:	7b 2f       	mov	r23, r27
    1fac:	8a 2f       	mov	r24, r26
    1fae:	9f 2f       	mov	r25, r31
    1fb0:	08 e2       	ldi	r16, 0x28	; 40
    1fb2:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1fb6:	2e 87       	std	Y+14, r18	; 0x0e
    1fb8:	2e 2f       	mov	r18, r30
    1fba:	35 2d       	mov	r19, r5
    1fbc:	4d 2d       	mov	r20, r13
    1fbe:	5e 2d       	mov	r21, r14
    1fc0:	6f 2d       	mov	r22, r15
    1fc2:	7b 2f       	mov	r23, r27
    1fc4:	8a 2f       	mov	r24, r26
    1fc6:	9f 2f       	mov	r25, r31
    1fc8:	00 e3       	ldi	r16, 0x30	; 48
    1fca:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1fce:	2f 87       	std	Y+15, r18	; 0x0f
    1fd0:	2e 2f       	mov	r18, r30
    1fd2:	35 2d       	mov	r19, r5
    1fd4:	4d 2d       	mov	r20, r13
    1fd6:	5e 2d       	mov	r21, r14
    1fd8:	6f 2d       	mov	r22, r15
    1fda:	7b 2f       	mov	r23, r27
    1fdc:	8a 2f       	mov	r24, r26
    1fde:	9f 2f       	mov	r25, r31
    1fe0:	08 e3       	ldi	r16, 0x38	; 56
    1fe2:	0e 94 38 1b 	call	0x3670	; 0x3670 <__lshrdi3>
    1fe6:	28 8b       	std	Y+16, r18	; 0x10
    1fe8:	80 e1       	ldi	r24, 0x10	; 16
    1fea:	e1 e3       	ldi	r30, 0x31	; 49
    1fec:	f0 e2       	ldi	r31, 0x20	; 32
    1fee:	de 01       	movw	r26, r28
    1ff0:	51 96       	adiw	r26, 0x11	; 17
    1ff2:	01 90       	ld	r0, Z+
    1ff4:	0d 92       	st	X+, r0
    1ff6:	8a 95       	dec	r24
    1ff8:	e1 f7       	brne	.-8      	; 0x1ff2 <eeprom_write_const+0x1ce>
    1ffa:	83 e3       	ldi	r24, 0x33	; 51
    1ffc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    2000:	fe 01       	movw	r30, r28
    2002:	71 96       	adiw	r30, 0x11	; 17
    2004:	ce 01       	movw	r24, r28
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	ae 01       	movw	r20, r28
    200a:	4f 5d       	subi	r20, 0xDF	; 223
    200c:	5f 4f       	sbci	r21, 0xFF	; 255
    200e:	60 ec       	ldi	r22, 0xC0	; 192
    2010:	71 e0       	ldi	r23, 0x01	; 1
    2012:	21 91       	ld	r18, Z+
    2014:	db 01       	movw	r26, r22
    2016:	2c 93       	st	X, r18
    2018:	dc 01       	movw	r26, r24
    201a:	2d 91       	ld	r18, X+
    201c:	cd 01       	movw	r24, r26
    201e:	db 01       	movw	r26, r22
    2020:	14 96       	adiw	r26, 0x04	; 4
    2022:	2c 93       	st	X, r18
    2024:	e4 17       	cp	r30, r20
    2026:	f5 07       	cpc	r31, r21
    2028:	a1 f7       	brne	.-24     	; 0x2012 <eeprom_write_const+0x1ee>
    202a:	e0 ec       	ldi	r30, 0xC0	; 192
    202c:	f1 e0       	ldi	r31, 0x01	; 1
    202e:	85 e3       	ldi	r24, 0x35	; 53
    2030:	82 87       	std	Z+10, r24	; 0x0a
    2032:	10 82       	st	Z, r1
    2034:	80 e1       	ldi	r24, 0x10	; 16
    2036:	81 83       	std	Z+1, r24	; 0x01
    2038:	88 ed       	ldi	r24, 0xD8	; 216
    203a:	84 bf       	out	0x34, r24	; 52
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	83 87       	std	Z+11, r24	; 0x0b
    2040:	87 85       	ldd	r24, Z+15	; 0x0f
    2042:	88 23       	and	r24, r24
    2044:	ec f3       	brlt	.-6      	; 0x2040 <eeprom_write_const+0x21c>
    2046:	a0 96       	adiw	r28, 0x20	; 32
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	7f 90       	pop	r7
    2066:	6f 90       	pop	r6
    2068:	5f 90       	pop	r5
    206a:	08 95       	ret

0000206c <eeprom_write>:
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	2c 97       	sbiw	r28, 0x0c	; 12
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    207e:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    2082:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    2086:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    208a:	ad d7       	rcall	.+3930   	; 0x2fe6 <__fixsfsi>
    208c:	79 83       	std	Y+1, r23	; 0x01
    208e:	6a 83       	std	Y+2, r22	; 0x02
    2090:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <packets>
    2094:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <packets+0x1>
    2098:	9b 83       	std	Y+3, r25	; 0x03
    209a:	8c 83       	std	Y+4, r24	; 0x04
    209c:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <timer>
    20a0:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <timer+0x1>
    20a4:	9d 83       	std	Y+5, r25	; 0x05
    20a6:	8e 83       	std	Y+6, r24	; 0x06
    20a8:	86 e0       	ldi	r24, 0x06	; 6
    20aa:	e1 e4       	ldi	r30, 0x41	; 65
    20ac:	f0 e2       	ldi	r31, 0x20	; 32
    20ae:	de 01       	movw	r26, r28
    20b0:	17 96       	adiw	r26, 0x07	; 7
    20b2:	01 90       	ld	r0, Z+
    20b4:	0d 92       	st	X+, r0
    20b6:	8a 95       	dec	r24
    20b8:	e1 f7       	brne	.-8      	; 0x20b2 <eeprom_write+0x46>
    20ba:	83 e3       	ldi	r24, 0x33	; 51
    20bc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    20c0:	fe 01       	movw	r30, r28
    20c2:	37 96       	adiw	r30, 0x07	; 7
    20c4:	ce 01       	movw	r24, r28
    20c6:	01 96       	adiw	r24, 0x01	; 1
    20c8:	ae 01       	movw	r20, r28
    20ca:	43 5f       	subi	r20, 0xF3	; 243
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	60 ec       	ldi	r22, 0xC0	; 192
    20d0:	71 e0       	ldi	r23, 0x01	; 1
    20d2:	21 91       	ld	r18, Z+
    20d4:	db 01       	movw	r26, r22
    20d6:	2c 93       	st	X, r18
    20d8:	dc 01       	movw	r26, r24
    20da:	2d 91       	ld	r18, X+
    20dc:	cd 01       	movw	r24, r26
    20de:	db 01       	movw	r26, r22
    20e0:	14 96       	adiw	r26, 0x04	; 4
    20e2:	2c 93       	st	X, r18
    20e4:	e4 17       	cp	r30, r20
    20e6:	f5 07       	cpc	r31, r21
    20e8:	a1 f7       	brne	.-24     	; 0x20d2 <eeprom_write+0x66>
    20ea:	e0 ec       	ldi	r30, 0xC0	; 192
    20ec:	f1 e0       	ldi	r31, 0x01	; 1
    20ee:	85 e3       	ldi	r24, 0x35	; 53
    20f0:	82 87       	std	Z+10, r24	; 0x0a
    20f2:	10 82       	st	Z, r1
    20f4:	80 e1       	ldi	r24, 0x10	; 16
    20f6:	81 83       	std	Z+1, r24	; 0x01
    20f8:	88 ed       	ldi	r24, 0xD8	; 216
    20fa:	84 bf       	out	0x34, r24	; 52
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	83 87       	std	Z+11, r24	; 0x0b
    2100:	87 85       	ldd	r24, Z+15	; 0x0f
    2102:	88 23       	and	r24, r24
    2104:	ec f3       	brlt	.-6      	; 0x2100 <eeprom_write+0x94>
    2106:	2c 96       	adiw	r28, 0x0c	; 12
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	08 95       	ret

00002112 <eeprom_read>:
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	c0 ec       	ldi	r28, 0xC0	; 192
    2118:	d1 e0       	ldi	r29, 0x01	; 1
    211a:	26 e0       	ldi	r18, 0x06	; 6
    211c:	2a 87       	std	Y+10, r18	; 0x0a
    211e:	88 83       	st	Y, r24
    2120:	99 83       	std	Y+1, r25	; 0x01
    2122:	88 ed       	ldi	r24, 0xD8	; 216
    2124:	84 bf       	out	0x34, r24	; 52
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	8b 87       	std	Y+11, r24	; 0x0b
    212a:	66 ed       	ldi	r22, 0xD6	; 214
    212c:	74 e1       	ldi	r23, 0x14	; 20
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 8d 08 	call	0x111a	; 0x111a <__portable_avr_delay_cycles>
    2136:	8c 81       	ldd	r24, Y+4	; 0x04
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

0000213e <system_init>:
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	0e 94 3c 08 	call	0x1078	; 0x1078 <sysclk_init>
    2146:	6b ea       	ldi	r22, 0xAB	; 171
    2148:	79 e2       	ldi	r23, 0x29	; 41
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	0e 94 8d 08 	call	0x111a	; 0x111a <__portable_avr_delay_cycles>
    2152:	78 94       	sei
    2154:	8c eb       	ldi	r24, 0xBC	; 188
    2156:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    215a:	87 e0       	ldi	r24, 0x07	; 7
    215c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2160:	87 e0       	ldi	r24, 0x07	; 7
    2162:	90 e1       	ldi	r25, 0x10	; 16
    2164:	d6 df       	rcall	.-84     	; 0x2112 <eeprom_read>
    2166:	0e 94 f0 06 	call	0xde0	; 0xde0 <data_terminal_init>
    216a:	08 d8       	rcall	.-4080   	; 0x117c <gps_init>
    216c:	6b ea       	ldi	r22, 0xAB	; 171
    216e:	70 eb       	ldi	r23, 0xB0	; 176
    2170:	88 e2       	ldi	r24, 0x28	; 40
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 8d 08 	call	0x111a	; 0x111a <__portable_avr_delay_cycles>
    2178:	6b ea       	ldi	r22, 0xAB	; 171
    217a:	79 e2       	ldi	r23, 0x29	; 41
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 8d 08 	call	0x111a	; 0x111a <__portable_avr_delay_cycles>
    2184:	0e 94 c2 06 	call	0xd84	; 0xd84 <spi_init>
    2188:	6b ea       	ldi	r22, 0xAB	; 171
    218a:	79 e2       	ldi	r23, 0x29	; 41
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	0e 94 8d 08 	call	0x111a	; 0x111a <__portable_avr_delay_cycles>
    2194:	0e 94 98 08 	call	0x1130	; 0x1130 <pressure_init>
    2198:	6b ea       	ldi	r22, 0xAB	; 171
    219a:	79 e2       	ldi	r23, 0x29	; 41
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 8d 08 	call	0x111a	; 0x111a <__portable_avr_delay_cycles>
    21a4:	80 e2       	ldi	r24, 0x20	; 32
    21a6:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
    21aa:	2b dc       	rcall	.-1962   	; 0x1a02 <clock_init>
    21ac:	85 db       	rcall	.-2294   	; 0x18b8 <release_servo_init>
    21ae:	0e 94 02 06 	call	0xc04	; 0xc04 <cam_init>
    21b2:	66 e5       	ldi	r22, 0x56	; 86
    21b4:	70 ed       	ldi	r23, 0xD0	; 208
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 8d 08 	call	0x111a	; 0x111a <__portable_avr_delay_cycles>
    21be:	2c db       	rcall	.-2472   	; 0x1818 <state_check>
    21c0:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <get_pressure>
    21c4:	60 93 2d 20 	sts	0x202D, r22	; 0x80202d <ground_p>
    21c8:	70 93 2e 20 	sts	0x202E, r23	; 0x80202e <ground_p+0x1>
    21cc:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <ground_p+0x2>
    21d0:	90 93 30 20 	sts	0x2030, r25	; 0x802030 <ground_p+0x3>
    21d4:	03 e3       	ldi	r16, 0x33	; 51
    21d6:	13 e1       	ldi	r17, 0x13	; 19
    21d8:	20 e9       	ldi	r18, 0x90	; 144
    21da:	33 e4       	ldi	r19, 0x43	; 67
    21dc:	00 93 29 20 	sts	0x2029, r16	; 0x802029 <ground_t>
    21e0:	10 93 2a 20 	sts	0x202A, r17	; 0x80202a <ground_t+0x1>
    21e4:	20 93 2b 20 	sts	0x202B, r18	; 0x80202b <ground_t+0x2>
    21e8:	30 93 2c 20 	sts	0x202C, r19	; 0x80202c <ground_t+0x3>
    21ec:	7e d8       	rcall	.-3844   	; 0x12ea <get_altitude>
    21ee:	60 93 fb 20 	sts	0x20FB, r22	; 0x8020fb <ground_a>
    21f2:	70 93 fc 20 	sts	0x20FC, r23	; 0x8020fc <ground_a+0x1>
    21f6:	80 93 fd 20 	sts	0x20FD, r24	; 0x8020fd <ground_a+0x2>
    21fa:	90 93 fe 20 	sts	0x20FE, r25	; 0x8020fe <ground_a+0x3>
    21fe:	12 de       	rcall	.-988    	; 0x1e24 <eeprom_write_const>
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	08 95       	ret

00002206 <main>:
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	c8 56       	subi	r28, 0x68	; 104
    2210:	d1 09       	sbc	r29, r1
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	93 df       	rcall	.-218    	; 0x213e <system_init>
    2218:	66 e5       	ldi	r22, 0x56	; 86
    221a:	73 e2       	ldi	r23, 0x23	; 35
    221c:	88 e0       	ldi	r24, 0x08	; 8
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 8d 08 	call	0x111a	; 0x111a <__portable_avr_delay_cycles>
    2224:	14 e1       	ldi	r17, 0x14	; 20
    2226:	be 01       	movw	r22, r28
    2228:	6f 5f       	subi	r22, 0xFF	; 255
    222a:	7f 4f       	sbci	r23, 0xFF	; 255
    222c:	fb 01       	movw	r30, r22
    222e:	81 2f       	mov	r24, r17
    2230:	11 92       	st	Z+, r1
    2232:	8a 95       	dec	r24
    2234:	e9 f7       	brne	.-6      	; 0x2230 <main+0x2a>
    2236:	4a e0       	ldi	r20, 0x0A	; 10
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	ce 01       	movw	r24, r28
    223c:	45 96       	adiw	r24, 0x15	; 21
    223e:	0e 94 75 07 	call	0xeea	; 0xeea <rb16_init>
    2242:	be 01       	movw	r22, r28
    2244:	63 5e       	subi	r22, 0xE3	; 227
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	88 e2       	ldi	r24, 0x28	; 40
    224a:	fb 01       	movw	r30, r22
    224c:	11 92       	st	Z+, r1
    224e:	8a 95       	dec	r24
    2250:	e9 f7       	brne	.-6      	; 0x224c <main+0x46>
    2252:	4a e0       	ldi	r20, 0x0A	; 10
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	ce 01       	movw	r24, r28
    2258:	8b 5b       	subi	r24, 0xBB	; 187
    225a:	9f 4f       	sbci	r25, 0xFF	; 255
    225c:	0e 94 fd 07 	call	0xffa	; 0xffa <rb32_init>
    2260:	be 01       	movw	r22, r28
    2262:	63 5b       	subi	r22, 0xB3	; 179
    2264:	7f 4f       	sbci	r23, 0xFF	; 255
    2266:	fb 01       	movw	r30, r22
    2268:	11 92       	st	Z+, r1
    226a:	1a 95       	dec	r17
    226c:	e9 f7       	brne	.-6      	; 0x2268 <main+0x62>
    226e:	4a e0       	ldi	r20, 0x0A	; 10
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	ce 01       	movw	r24, r28
    2274:	8f 59       	subi	r24, 0x9F	; 159
    2276:	9f 4f       	sbci	r25, 0xFF	; 255
    2278:	0e 94 75 07 	call	0xeea	; 0xeea <rb16_init>
    227c:	00 e0       	ldi	r16, 0x00	; 0
    227e:	10 e0       	ldi	r17, 0x00	; 0
    2280:	be 01       	movw	r22, r28
    2282:	6b 5b       	subi	r22, 0xBB	; 187
    2284:	7f 4f       	sbci	r23, 0xFF	; 255
    2286:	ce 01       	movw	r24, r28
    2288:	45 96       	adiw	r24, 0x15	; 21
    228a:	46 da       	rcall	.-2932   	; 0x1718 <data_collect>
    228c:	c5 da       	rcall	.-2678   	; 0x1818 <state_check>
    228e:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <state>
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	41 f0       	breq	.+16     	; 0x22a6 <main+0xa0>
    2296:	08 f4       	brcc	.+2      	; 0x229a <main+0x94>
    2298:	47 c0       	rjmp	.+142    	; 0x2328 <main+0x122>
    229a:	82 30       	cpi	r24, 0x02	; 2
    229c:	c9 f0       	breq	.+50     	; 0x22d0 <main+0xca>
    229e:	83 30       	cpi	r24, 0x03	; 3
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <main+0x9e>
    22a2:	3c c0       	rjmp	.+120    	; 0x231c <main+0x116>
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <main+0x11e>
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	46 e1       	ldi	r20, 0x16	; 22
    22ac:	54 e4       	ldi	r21, 0x44	; 68
    22ae:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    22b2:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    22b6:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    22ba:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    22be:	ab d7       	rcall	.+3926   	; 0x3216 <__gesf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	94 f5       	brge	.+100    	; 0x2328 <main+0x122>
    22c4:	11 11       	cpse	r17, r1
    22c6:	30 c0       	rjmp	.+96     	; 0x2328 <main+0x122>
    22c8:	0e 94 08 06 	call	0xc10	; 0xc10 <cam_switch>
    22cc:	11 e0       	ldi	r17, 0x01	; 1
    22ce:	2c c0       	rjmp	.+88     	; 0x2328 <main+0x122>
    22d0:	11 11       	cpse	r17, r1
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <main+0xd4>
    22d4:	0e 94 08 06 	call	0xc10	; 0xc10 <cam_switch>
    22d8:	11 e0       	ldi	r17, 0x01	; 1
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	41 ee       	ldi	r20, 0xE1	; 225
    22e0:	53 e4       	ldi	r21, 0x43	; 67
    22e2:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    22e6:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    22ea:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    22ee:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    22f2:	6e d5       	rcall	.+2780   	; 0x2dd0 <__subsf3>
    22f4:	78 d6       	rcall	.+3312   	; 0x2fe6 <__fixsfsi>
    22f6:	67 5f       	subi	r22, 0xF7	; 247
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	63 31       	cpi	r22, 0x13	; 19
    22fc:	71 05       	cpc	r23, r1
    22fe:	28 f4       	brcc	.+10     	; 0x230a <main+0x104>
    2300:	0e 94 c8 08 	call	0x1190	; 0x1190 <release>
    2304:	0e 94 01 06 	call	0xc02	; 0xc02 <hall_sensor_init>
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <main+0x122>
    230a:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <released>
    230e:	88 23       	and	r24, r24
    2310:	59 f0       	breq	.+22     	; 0x2328 <main+0x122>
    2312:	ce 01       	movw	r24, r28
    2314:	8f 59       	subi	r24, 0x9F	; 159
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	e7 da       	rcall	.-2610   	; 0x18e8 <servo_pid>
    231a:	06 c0       	rjmp	.+12     	; 0x2328 <main+0x122>
    231c:	01 11       	cpse	r16, r1
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <main+0x122>
    2320:	01 e0       	ldi	r16, 0x01	; 1
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <main+0x122>
    2324:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <state>
    2328:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <data_packets>
    232c:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <data_packets+0x1>
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <data_packets>
    2336:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <data_packets+0x1>
    233a:	60 91 e8 20 	lds	r22, 0x20E8	; 0x8020e8 <timer>
    233e:	70 91 e9 20 	lds	r23, 0x20E9	; 0x8020e9 <timer+0x1>
    2342:	61 15       	cp	r22, r1
    2344:	71 05       	cpc	r23, r1
    2346:	09 f4       	brne	.+2      	; 0x234a <main+0x144>
    2348:	9b cf       	rjmp	.-202    	; 0x2280 <main+0x7a>
    234a:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__udivmodhi4>
    234e:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <rate>
    2352:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <rate+0x1>
    2356:	94 cf       	rjmp	.-216    	; 0x2280 <main+0x7a>

00002358 <reset>:
    2358:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <press>
    235c:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <press+0x1>
    2360:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <press+0x2>
    2364:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <press+0x3>
    2368:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <temp>
    236c:	10 92 dd 20 	sts	0x20DD, r1	; 0x8020dd <temp+0x1>
    2370:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <temp+0x2>
    2374:	10 92 df 20 	sts	0x20DF, r1	; 0x8020df <temp+0x3>
    2378:	10 92 d8 20 	sts	0x20D8, r1	; 0x8020d8 <alt>
    237c:	10 92 d9 20 	sts	0x20D9, r1	; 0x8020d9 <alt+0x1>
    2380:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <alt+0x2>
    2384:	10 92 db 20 	sts	0x20DB, r1	; 0x8020db <alt+0x3>
    2388:	10 92 d4 20 	sts	0x20D4, r1	; 0x8020d4 <volt>
    238c:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <volt+0x1>
    2390:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <volt+0x2>
    2394:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <volt+0x3>
    2398:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <velocity>
    239c:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <velocity+0x1>
    23a0:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <velocity+0x2>
    23a4:	10 92 d3 20 	sts	0x20D3, r1	; 0x8020d3 <velocity+0x3>
    23a8:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <gps_t>
    23ac:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <gps_t+0x1>
    23b0:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <gps_t+0x2>
    23b4:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <gps_t+0x3>
    23b8:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <gps_lat>
    23bc:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <gps_lat+0x1>
    23c0:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <gps_lat+0x2>
    23c4:	10 92 cb 20 	sts	0x20CB, r1	; 0x8020cb <gps_lat+0x3>
    23c8:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <gps_long>
    23cc:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <gps_long+0x1>
    23d0:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <gps_long+0x2>
    23d4:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <gps_long+0x3>
    23d8:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <gps_alt>
    23dc:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <gps_alt+0x1>
    23e0:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <gps_alt+0x2>
    23e4:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <gps_alt+0x3>
    23e8:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <gps_sats>
    23ec:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <gps_sats+0x1>
    23f0:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <pitch>
    23f4:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <pitch+0x1>
    23f8:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <pitch+0x2>
    23fc:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <pitch+0x3>
    2400:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <roll>
    2404:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <roll+0x1>
    2408:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <roll+0x2>
    240c:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <roll+0x3>
    2410:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <rpm>
    2414:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <rpm+0x1>
    2418:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <rpm+0x2>
    241c:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <rpm+0x3>
    2420:	10 92 ae 20 	sts	0x20AE, r1	; 0x8020ae <__data_end>
    2424:	10 92 af 20 	sts	0x20AF, r1	; 0x8020af <__data_end+0x1>
    2428:	10 92 b0 20 	sts	0x20B0, r1	; 0x8020b0 <__data_end+0x2>
    242c:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <__data_end+0x3>
    2430:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <state>
    2434:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <released>
    2438:	82 de       	rcall	.-764    	; 0x213e <system_init>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <reset_received>
    2440:	08 95       	ret

00002442 <xbee_command>:
    2442:	84 36       	cpi	r24, 0x64	; 100
    2444:	91 f0       	breq	.+36     	; 0x246a <xbee_command+0x28>
    2446:	28 f4       	brcc	.+10     	; 0x2452 <xbee_command+0x10>
    2448:	81 36       	cpi	r24, 0x61	; 97
    244a:	69 f0       	breq	.+26     	; 0x2466 <xbee_command+0x24>
    244c:	83 36       	cpi	r24, 0x63	; 99
    244e:	49 f0       	breq	.+18     	; 0x2462 <xbee_command+0x20>
    2450:	08 95       	ret
    2452:	85 36       	cpi	r24, 0x65	; 101
    2454:	21 f0       	breq	.+8      	; 0x245e <xbee_command+0x1c>
    2456:	86 36       	cpi	r24, 0x66	; 102
    2458:	49 f4       	brne	.+18     	; 0x246c <xbee_command+0x2a>
    245a:	7e cf       	rjmp	.-260    	; 0x2358 <reset>
    245c:	08 95       	ret
    245e:	df ca       	rjmp	.-2626   	; 0x1a1e <cali_alt>
    2460:	08 95       	ret
    2462:	dd ca       	rjmp	.-2630   	; 0x1a1e <cali_alt>
    2464:	08 95       	ret
    2466:	08 cb       	rjmp	.-2544   	; 0x1a78 <send_gps>
    2468:	08 95       	ret
    246a:	86 cb       	rjmp	.-2292   	; 0x1b78 <packet>
    246c:	08 95       	ret

0000246e <__vector_47>:

ISR(TCE0_OVF_vect){
    246e:	1f 92       	push	r1
    2470:	0f 92       	push	r0
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	0f 92       	push	r0
    2476:	11 24       	eor	r1, r1
    2478:	08 b6       	in	r0, 0x38	; 56
    247a:	0f 92       	push	r0
    247c:	18 be       	out	0x38, r1	; 56
    247e:	09 b6       	in	r0, 0x39	; 57
    2480:	0f 92       	push	r0
    2482:	19 be       	out	0x39, r1	; 57
    2484:	0a b6       	in	r0, 0x3a	; 58
    2486:	0f 92       	push	r0
    2488:	1a be       	out	0x3a, r1	; 58
    248a:	0b b6       	in	r0, 0x3b	; 59
    248c:	0f 92       	push	r0
    248e:	1b be       	out	0x3b, r1	; 59
    2490:	2f 92       	push	r2
    2492:	3f 92       	push	r3
    2494:	4f 92       	push	r4
    2496:	5f 92       	push	r5
    2498:	6f 92       	push	r6
    249a:	7f 92       	push	r7
    249c:	8f 92       	push	r8
    249e:	9f 92       	push	r9
    24a0:	af 92       	push	r10
    24a2:	bf 92       	push	r11
    24a4:	cf 92       	push	r12
    24a6:	df 92       	push	r13
    24a8:	ef 92       	push	r14
    24aa:	ff 92       	push	r15
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	2f 93       	push	r18
    24b2:	3f 93       	push	r19
    24b4:	4f 93       	push	r20
    24b6:	5f 93       	push	r21
    24b8:	6f 93       	push	r22
    24ba:	7f 93       	push	r23
    24bc:	8f 93       	push	r24
    24be:	9f 93       	push	r25
    24c0:	af 93       	push	r26
    24c2:	bf 93       	push	r27
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	ef 93       	push	r30
    24ca:	ff 93       	push	r31
	timer++;
    24cc:	00 91 e8 20 	lds	r16, 0x20E8	; 0x8020e8 <timer>
    24d0:	10 91 e9 20 	lds	r17, 0x20E9	; 0x8020e9 <timer+0x1>
    24d4:	0f 5f       	subi	r16, 0xFF	; 255
    24d6:	1f 4f       	sbci	r17, 0xFF	; 255
    24d8:	00 93 e8 20 	sts	0x20E8, r16	; 0x8020e8 <timer>
    24dc:	10 93 e9 20 	sts	0x20E9, r17	; 0x8020e9 <timer+0x1>
	packets++;
    24e0:	c0 91 e4 20 	lds	r28, 0x20E4	; 0x8020e4 <packets>
    24e4:	d0 91 e5 20 	lds	r29, 0x20E5	; 0x8020e5 <packets+0x1>
    24e8:	21 96       	adiw	r28, 0x01	; 1
    24ea:	c0 93 e4 20 	sts	0x20E4, r28	; 0x8020e4 <packets>
    24ee:	d0 93 e5 20 	sts	0x20E5, r29	; 0x8020e5 <packets+0x1>
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    24f2:	60 91 c0 20 	lds	r22, 0x20C0	; 0x8020c0 <gps_alt>
    24f6:	70 91 c1 20 	lds	r23, 0x20C1	; 0x8020c1 <gps_alt+0x1>
    24fa:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <gps_alt+0x2>
    24fe:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <gps_alt+0x3>
    2502:	71 d5       	rcall	.+2786   	; 0x2fe6 <__fixsfsi>
    2504:	36 2e       	mov	r3, r22
    2506:	27 2e       	mov	r2, r23
	timer++;
	packets++;
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    2508:	40 90 c4 20 	lds	r4, 0x20C4	; 0x8020c4 <gps_long>
    250c:	50 90 c5 20 	lds	r5, 0x20C5	; 0x8020c5 <gps_long+0x1>
    2510:	60 90 c6 20 	lds	r6, 0x20C6	; 0x8020c6 <gps_long+0x2>
    2514:	70 90 c7 20 	lds	r7, 0x20C7	; 0x8020c7 <gps_long+0x3>
    2518:	80 90 c8 20 	lds	r8, 0x20C8	; 0x8020c8 <gps_lat>
    251c:	90 90 c9 20 	lds	r9, 0x20C9	; 0x8020c9 <gps_lat+0x1>
    2520:	a0 90 ca 20 	lds	r10, 0x20CA	; 0x8020ca <gps_lat+0x2>
    2524:	b0 90 cb 20 	lds	r11, 0x20CB	; 0x8020cb <gps_lat+0x3>
ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    2528:	60 91 cc 20 	lds	r22, 0x20CC	; 0x8020cc <gps_t>
    252c:	70 91 cd 20 	lds	r23, 0x20CD	; 0x8020cd <gps_t+0x1>
    2530:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <gps_t+0x2>
    2534:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <gps_t+0x3>
    2538:	56 d5       	rcall	.+2732   	; 0x2fe6 <__fixsfsi>
    253a:	6b 01       	movw	r12, r22
    253c:	7c 01       	movw	r14, r24
}

ISR(TCE0_OVF_vect){
	timer++;
	packets++;
	sprintf(str,format,timer,packets,
    253e:	60 91 ae 20 	lds	r22, 0x20AE	; 0x8020ae <__data_end>
    2542:	70 91 af 20 	lds	r23, 0x20AF	; 0x8020af <__data_end+0x1>
    2546:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <__data_end+0x2>
    254a:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <__data_end+0x3>
    254e:	4b d5       	rcall	.+2710   	; 0x2fe6 <__fixsfsi>
    2550:	7f 93       	push	r23
    2552:	6f 93       	push	r22
    2554:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <state>
    2558:	1f 92       	push	r1
    255a:	8f 93       	push	r24
    255c:	60 91 b2 20 	lds	r22, 0x20B2	; 0x8020b2 <rpm>
    2560:	70 91 b3 20 	lds	r23, 0x20B3	; 0x8020b3 <rpm+0x1>
    2564:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <rpm+0x2>
    2568:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <rpm+0x3>
    256c:	3c d5       	rcall	.+2680   	; 0x2fe6 <__fixsfsi>
    256e:	7f 93       	push	r23
    2570:	6f 93       	push	r22
    2572:	60 91 b6 20 	lds	r22, 0x20B6	; 0x8020b6 <roll>
    2576:	70 91 b7 20 	lds	r23, 0x20B7	; 0x8020b7 <roll+0x1>
    257a:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <roll+0x2>
    257e:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <roll+0x3>
    2582:	31 d5       	rcall	.+2658   	; 0x2fe6 <__fixsfsi>
    2584:	7f 93       	push	r23
    2586:	6f 93       	push	r22
    2588:	60 91 ba 20 	lds	r22, 0x20BA	; 0x8020ba <pitch>
    258c:	70 91 bb 20 	lds	r23, 0x20BB	; 0x8020bb <pitch+0x1>
    2590:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <pitch+0x2>
    2594:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <pitch+0x3>
    2598:	26 d5       	rcall	.+2636   	; 0x2fe6 <__fixsfsi>
    259a:	7f 93       	push	r23
    259c:	6f 93       	push	r22
    259e:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <gps_sats+0x1>
    25a2:	8f 93       	push	r24
    25a4:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <gps_sats>
    25a8:	8f 93       	push	r24
    25aa:	83 2d       	mov	r24, r3
    25ac:	92 2d       	mov	r25, r2
    25ae:	88 0f       	add	r24, r24
    25b0:	99 1f       	adc	r25, r25
    25b2:	9c 01       	movw	r18, r24
    25b4:	22 0f       	add	r18, r18
    25b6:	33 1f       	adc	r19, r19
    25b8:	22 0f       	add	r18, r18
    25ba:	33 1f       	adc	r19, r19
    25bc:	82 0f       	add	r24, r18
    25be:	93 1f       	adc	r25, r19
    25c0:	6a e0       	ldi	r22, 0x0A	; 10
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	f2 d7       	rcall	.+4068   	; 0x35aa <__divmodhi4>
    25c6:	9f 93       	push	r25
    25c8:	8f 93       	push	r24
    25ca:	2f 92       	push	r2
    25cc:	3f 92       	push	r3
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	34 e2       	ldi	r19, 0x24	; 36
    25d2:	44 e7       	ldi	r20, 0x74	; 116
    25d4:	59 e4       	ldi	r21, 0x49	; 73
    25d6:	c3 01       	movw	r24, r6
    25d8:	b2 01       	movw	r22, r4
    25da:	28 d6       	rcall	.+3152   	; 0x322c <__mulsf3>
    25dc:	04 d5       	rcall	.+2568   	; 0x2fe6 <__fixsfsi>
    25de:	20 e4       	ldi	r18, 0x40	; 64
    25e0:	32 e4       	ldi	r19, 0x42	; 66
    25e2:	4f e0       	ldi	r20, 0x0F	; 15
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__divmodsi4>
    25ea:	9b 01       	movw	r18, r22
    25ec:	77 23       	and	r23, r23
    25ee:	24 f4       	brge	.+8      	; 0x25f8 <__vector_47+0x18a>
    25f0:	22 27       	eor	r18, r18
    25f2:	33 27       	eor	r19, r19
    25f4:	26 1b       	sub	r18, r22
    25f6:	37 0b       	sbc	r19, r23
    25f8:	c9 01       	movw	r24, r18
    25fa:	33 0f       	add	r19, r19
    25fc:	aa 0b       	sbc	r26, r26
    25fe:	bb 0b       	sbc	r27, r27
    2600:	bf 93       	push	r27
    2602:	af 93       	push	r26
    2604:	9f 93       	push	r25
    2606:	8f 93       	push	r24
    2608:	c3 01       	movw	r24, r6
    260a:	b2 01       	movw	r22, r4
    260c:	ec d4       	rcall	.+2520   	; 0x2fe6 <__fixsfsi>
    260e:	7f 93       	push	r23
    2610:	6f 93       	push	r22
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	34 e2       	ldi	r19, 0x24	; 36
    2616:	44 e7       	ldi	r20, 0x74	; 116
    2618:	59 e4       	ldi	r21, 0x49	; 73
    261a:	c5 01       	movw	r24, r10
    261c:	b4 01       	movw	r22, r8
    261e:	06 d6       	rcall	.+3084   	; 0x322c <__mulsf3>
    2620:	e2 d4       	rcall	.+2500   	; 0x2fe6 <__fixsfsi>
    2622:	20 e4       	ldi	r18, 0x40	; 64
    2624:	32 e4       	ldi	r19, 0x42	; 66
    2626:	4f e0       	ldi	r20, 0x0F	; 15
    2628:	50 e0       	ldi	r21, 0x00	; 0
    262a:	f4 d7       	rcall	.+4072   	; 0x3614 <__divmodsi4>
    262c:	9f 93       	push	r25
    262e:	8f 93       	push	r24
    2630:	7f 93       	push	r23
    2632:	6f 93       	push	r22
    2634:	c5 01       	movw	r24, r10
    2636:	b4 01       	movw	r22, r8
    2638:	d6 d4       	rcall	.+2476   	; 0x2fe6 <__fixsfsi>
    263a:	7f 93       	push	r23
    263c:	6f 93       	push	r22
    263e:	0f 2e       	mov	r0, r31
    2640:	f4 e6       	ldi	r31, 0x64	; 100
    2642:	8f 2e       	mov	r8, r31
    2644:	91 2c       	mov	r9, r1
    2646:	a1 2c       	mov	r10, r1
    2648:	b1 2c       	mov	r11, r1
    264a:	f0 2d       	mov	r31, r0
    264c:	c7 01       	movw	r24, r14
    264e:	b6 01       	movw	r22, r12
    2650:	a5 01       	movw	r20, r10
    2652:	94 01       	movw	r18, r8
    2654:	df d7       	rcall	.+4030   	; 0x3614 <__divmodsi4>
    2656:	7f 93       	push	r23
    2658:	6f 93       	push	r22
    265a:	c7 01       	movw	r24, r14
    265c:	b6 01       	movw	r22, r12
    265e:	20 e1       	ldi	r18, 0x10	; 16
    2660:	37 e2       	ldi	r19, 0x27	; 39
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	d6 d7       	rcall	.+4012   	; 0x3614 <__divmodsi4>
    2668:	f2 2e       	mov	r15, r18
    266a:	e3 2e       	mov	r14, r19
    266c:	a5 01       	movw	r20, r10
    266e:	94 01       	movw	r18, r8
    2670:	d1 d7       	rcall	.+4002   	; 0x3614 <__divmodsi4>
    2672:	3f 93       	push	r19
    2674:	2f 93       	push	r18
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	60 91 d4 20 	lds	r22, 0x20D4	; 0x8020d4 <volt>
    267e:	70 91 d5 20 	lds	r23, 0x20D5	; 0x8020d5 <volt+0x1>
    2682:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <volt+0x2>
    2686:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <volt+0x3>
    268a:	ad d4       	rcall	.+2394   	; 0x2fe6 <__fixsfsi>
    268c:	7f 93       	push	r23
    268e:	6f 93       	push	r22
    2690:	23 e3       	ldi	r18, 0x33	; 51
    2692:	33 e9       	ldi	r19, 0x93	; 147
    2694:	48 e8       	ldi	r20, 0x88	; 136
    2696:	53 e4       	ldi	r21, 0x43	; 67
    2698:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <temp>
    269c:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <temp+0x1>
    26a0:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <temp+0x2>
    26a4:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <temp+0x3>
    26a8:	93 d3       	rcall	.+1830   	; 0x2dd0 <__subsf3>
    26aa:	9d d4       	rcall	.+2362   	; 0x2fe6 <__fixsfsi>
    26ac:	7f 93       	push	r23
    26ae:	6f 93       	push	r22
    26b0:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <press>
    26b4:	70 91 e1 20 	lds	r23, 0x20E1	; 0x8020e1 <press+0x1>
    26b8:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <press+0x2>
    26bc:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <press+0x3>
    26c0:	92 d4       	rcall	.+2340   	; 0x2fe6 <__fixsfsi>
    26c2:	9f 93       	push	r25
    26c4:	8f 93       	push	r24
    26c6:	7f 93       	push	r23
    26c8:	6f 93       	push	r22
    26ca:	60 91 d8 20 	lds	r22, 0x20D8	; 0x8020d8 <alt>
    26ce:	70 91 d9 20 	lds	r23, 0x20D9	; 0x8020d9 <alt+0x1>
    26d2:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <alt+0x2>
    26d6:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <alt+0x3>
    26da:	85 d4       	rcall	.+2314   	; 0x2fe6 <__fixsfsi>
    26dc:	7f 93       	push	r23
    26de:	6f 93       	push	r22
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	1f 93       	push	r17
    26e6:	0f 93       	push	r16
    26e8:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    26ec:	8f 93       	push	r24
    26ee:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    26f2:	8f 93       	push	r24
    26f4:	c0 e2       	ldi	r28, 0x20	; 32
    26f6:	d1 e2       	ldi	r29, 0x21	; 33
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	0e 94 c0 1b 	call	0x3780	; 0x3780 <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
    2700:	8d b7       	in	r24, 0x3d	; 61
    2702:	9e b7       	in	r25, 0x3e	; 62
    2704:	c4 96       	adiw	r24, 0x34	; 52
    2706:	8d bf       	out	0x3d, r24	; 61
    2708:	9e bf       	out	0x3e, r25	; 62
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	0e 94 ad 1b 	call	0x375a	; 0x375a <printf>
	
	// Updates EEPROM
	eeprom_write();
    2712:	ac dc       	rcall	.-1704   	; 0x206c <eeprom_write>
    2714:	0f 90       	pop	r0
	uint8_t byte0 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE0);
	uint8_t byte1 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE1);
	uint16_t a = (uint16_t) ((byte1<<8) | byte0);
	printf("%u\n", a);
	*/
}
    2716:	0f 90       	pop	r0
    2718:	ff 91       	pop	r31
    271a:	ef 91       	pop	r30
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	bf 91       	pop	r27
    2722:	af 91       	pop	r26
    2724:	9f 91       	pop	r25
    2726:	8f 91       	pop	r24
    2728:	7f 91       	pop	r23
    272a:	6f 91       	pop	r22
    272c:	5f 91       	pop	r21
    272e:	4f 91       	pop	r20
    2730:	3f 91       	pop	r19
    2732:	2f 91       	pop	r18
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	ff 90       	pop	r15
    273a:	ef 90       	pop	r14
    273c:	df 90       	pop	r13
    273e:	cf 90       	pop	r12
    2740:	bf 90       	pop	r11
    2742:	af 90       	pop	r10
    2744:	9f 90       	pop	r9
    2746:	8f 90       	pop	r8
    2748:	7f 90       	pop	r7
    274a:	6f 90       	pop	r6
    274c:	5f 90       	pop	r5
    274e:	4f 90       	pop	r4
    2750:	3f 90       	pop	r3
    2752:	2f 90       	pop	r2
    2754:	0f 90       	pop	r0
    2756:	0b be       	out	0x3b, r0	; 59
    2758:	0f 90       	pop	r0
    275a:	0a be       	out	0x3a, r0	; 58
    275c:	0f 90       	pop	r0
    275e:	09 be       	out	0x39, r0	; 57
    2760:	0f 90       	pop	r0
    2762:	08 be       	out	0x38, r0	; 56
    2764:	0f 90       	pop	r0
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	0f 90       	pop	r0
    276a:	1f 90       	pop	r1
    276c:	18 95       	reti

0000276e <__vector_58>:
    276e:	1f 92       	push	r1

ISR(USARTE0_RXC_vect){
    2770:	0f 92       	push	r0
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	0f 92       	push	r0
    2776:	11 24       	eor	r1, r1
    2778:	08 b6       	in	r0, 0x38	; 56
    277a:	0f 92       	push	r0
    277c:	18 be       	out	0x38, r1	; 56
    277e:	09 b6       	in	r0, 0x39	; 57
    2780:	0f 92       	push	r0
    2782:	19 be       	out	0x39, r1	; 57
    2784:	0b b6       	in	r0, 0x3b	; 59
    2786:	0f 92       	push	r0
    2788:	1b be       	out	0x3b, r1	; 59
    278a:	2f 93       	push	r18
    278c:	3f 93       	push	r19
    278e:	4f 93       	push	r20
    2790:	5f 93       	push	r21
    2792:	6f 93       	push	r22
    2794:	7f 93       	push	r23
    2796:	8f 93       	push	r24
    2798:	9f 93       	push	r25
    279a:	af 93       	push	r26
    279c:	bf 93       	push	r27
    279e:	ef 93       	push	r30
    27a0:	ff 93       	push	r31
	uint8_t c = usart_getchar(UART_TERMINAL_SERIAL);
    27a2:	80 ea       	ldi	r24, 0xA0	; 160
    27a4:	9a e0       	ldi	r25, 0x0A	; 10
    27a6:	0e 94 87 03 	call	0x70e	; 0x70e <usart_getchar>
	//printf("%c\n", c);
	xbee_command(c);
    27aa:	4b de       	rcall	.-874    	; 0x2442 <xbee_command>
}
    27ac:	ff 91       	pop	r31
    27ae:	ef 91       	pop	r30
    27b0:	bf 91       	pop	r27
    27b2:	af 91       	pop	r26
    27b4:	9f 91       	pop	r25
    27b6:	8f 91       	pop	r24
    27b8:	7f 91       	pop	r23
    27ba:	6f 91       	pop	r22
    27bc:	5f 91       	pop	r21
    27be:	4f 91       	pop	r20
    27c0:	3f 91       	pop	r19
    27c2:	2f 91       	pop	r18
    27c4:	0f 90       	pop	r0
    27c6:	0b be       	out	0x3b, r0	; 59
    27c8:	0f 90       	pop	r0
    27ca:	09 be       	out	0x39, r0	; 57
    27cc:	0f 90       	pop	r0
    27ce:	08 be       	out	0x38, r0	; 56
    27d0:	0f 90       	pop	r0
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	0f 90       	pop	r0
    27d6:	1f 90       	pop	r1
    27d8:	18 95       	reti

000027da <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    27da:	1f 92       	push	r1
    27dc:	0f 92       	push	r0
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	0f 92       	push	r0
    27e2:	11 24       	eor	r1, r1
    27e4:	08 b6       	in	r0, 0x38	; 56
    27e6:	0f 92       	push	r0
    27e8:	18 be       	out	0x38, r1	; 56
    27ea:	09 b6       	in	r0, 0x39	; 57
    27ec:	0f 92       	push	r0
    27ee:	19 be       	out	0x39, r1	; 57
    27f0:	0a b6       	in	r0, 0x3a	; 58
    27f2:	0f 92       	push	r0
    27f4:	1a be       	out	0x3a, r1	; 58
    27f6:	0b b6       	in	r0, 0x3b	; 59
    27f8:	0f 92       	push	r0
    27fa:	1b be       	out	0x3b, r1	; 59
    27fc:	8f 92       	push	r8
    27fe:	9f 92       	push	r9
    2800:	af 92       	push	r10
    2802:	bf 92       	push	r11
    2804:	cf 92       	push	r12
    2806:	df 92       	push	r13
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	1f 93       	push	r17
    280e:	2f 93       	push	r18
    2810:	3f 93       	push	r19
    2812:	4f 93       	push	r20
    2814:	5f 93       	push	r21
    2816:	6f 93       	push	r22
    2818:	7f 93       	push	r23
    281a:	8f 93       	push	r24
    281c:	9f 93       	push	r25
    281e:	af 93       	push	r26
    2820:	bf 93       	push	r27
    2822:	ef 93       	push	r30
    2824:	ff 93       	push	r31
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	00 d0       	rcall	.+0      	; 0x282c <__vector_91+0x52>
    282c:	00 d0       	rcall	.+0      	; 0x282e <__vector_91+0x54>
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    2832:	80 eb       	ldi	r24, 0xB0	; 176
    2834:	99 e0       	ldi	r25, 0x09	; 9
    2836:	0e 94 87 03 	call	0x70e	; 0x70e <usart_getchar>
    283a:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    283c:	84 32       	cpi	r24, 0x24	; 36
    283e:	49 f4       	brne	.+18     	; 0x2852 <__vector_91+0x78>
		writing = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <writing>
		pos = 0;
		word_pos = 0;
    2846:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <word_pos>
		commas = 0;
    284a:	10 92 eb 20 	sts	0x20EB, r1	; 0x8020eb <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	68 c2       	rjmp	.+1232   	; 0x2d22 <__vector_91+0x548>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    2852:	8a 32       	cpi	r24, 0x2A	; 42
    2854:	29 f4       	brne	.+10     	; 0x2860 <__vector_91+0x86>
		commas = 0;
    2856:	10 92 eb 20 	sts	0x20EB, r1	; 0x8020eb <commas>
		writing = 0;
    285a:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <writing>
    285e:	91 c2       	rjmp	.+1314   	; 0x2d82 <__vector_91+0x5a8>
	}
	else if(c == (uint8_t) ','){
    2860:	8c 32       	cpi	r24, 0x2C	; 44
    2862:	09 f0       	breq	.+2      	; 0x2866 <__vector_91+0x8c>
    2864:	49 c2       	rjmp	.+1170   	; 0x2cf8 <__vector_91+0x51e>
		gps[0] = 32;
    2866:	ec e0       	ldi	r30, 0x0C	; 12
    2868:	f1 e2       	ldi	r31, 0x21	; 33
    286a:	80 e2       	ldi	r24, 0x20	; 32
    286c:	80 83       	st	Z, r24
		if(gps[1] == 32){
    286e:	81 81       	ldd	r24, Z+1	; 0x01
    2870:	80 32       	cpi	r24, 0x20	; 32
    2872:	09 f0       	breq	.+2      	; 0x2876 <__vector_91+0x9c>
    2874:	6d c2       	rjmp	.+1242   	; 0x2d50 <__vector_91+0x576>
			gps[0] = '0';
    2876:	80 e3       	ldi	r24, 0x30	; 48
    2878:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <gps>
    287c:	69 c2       	rjmp	.+1234   	; 0x2d50 <__vector_91+0x576>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    287e:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <gps>
    2882:	8e 32       	cpi	r24, 0x2E	; 46
    2884:	09 f0       	breq	.+2      	; 0x2888 <__vector_91+0xae>
    2886:	9e c1       	rjmp	.+828    	; 0x2bc4 <__vector_91+0x3ea>
    2888:	a4 c1       	rjmp	.+840    	; 0x2bd2 <__vector_91+0x3f8>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    288a:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <gps>
    288e:	8e 32       	cpi	r24, 0x2E	; 46
    2890:	09 f0       	breq	.+2      	; 0x2894 <__vector_91+0xba>
    2892:	ec c0       	rjmp	.+472    	; 0x2a6c <__vector_91+0x292>
    2894:	f2 c0       	rjmp	.+484    	; 0x2a7a <__vector_91+0x2a0>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2896:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <gps>
    289a:	8e 32       	cpi	r24, 0x2E	; 46
    289c:	09 f0       	breq	.+2      	; 0x28a0 <__vector_91+0xc6>
    289e:	51 c0       	rjmp	.+162    	; 0x2942 <__vector_91+0x168>
    28a0:	57 c0       	rjmp	.+174    	; 0x2950 <__vector_91+0x176>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    28a2:	91 91       	ld	r25, Z+
    28a4:	9e 32       	cpi	r25, 0x2E	; 46
    28a6:	29 f4       	brne	.+10     	; 0x28b2 <__vector_91+0xd8>
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <__vector_91+0xd2>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    28ac:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						break;
    28b0:	03 c0       	rjmp	.+6      	; 0x28b8 <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    28b2:	8f 5f       	subi	r24, 0xFF	; 255
    28b4:	8f 30       	cpi	r24, 0x0F	; 15
    28b6:	a9 f7       	brne	.-22     	; 0x28a2 <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    28b8:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
    28bc:	e2 2f       	mov	r30, r18
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	e4 5f       	subi	r30, 0xF4	; 244
    28c2:	fe 4d       	sbci	r31, 0xDE	; 222
    28c4:	80 e2       	ldi	r24, 0x20	; 32
    28c6:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    28c8:	2f 5f       	subi	r18, 0xFF	; 255
    28ca:	2f 30       	cpi	r18, 0x0F	; 15
    28cc:	c8 f4       	brcc	.+50     	; 0x2900 <__vector_91+0x126>
					if(gps[i] == 32){
    28ce:	82 2f       	mov	r24, r18
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	fc 01       	movw	r30, r24
    28d4:	e4 5f       	subi	r30, 0xF4	; 244
    28d6:	fe 4d       	sbci	r31, 0xDE	; 222
    28d8:	30 81       	ld	r19, Z
    28da:	30 32       	cpi	r19, 0x20	; 32
    28dc:	89 f0       	breq	.+34     	; 0x2900 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    28de:	40 e2       	ldi	r20, 0x20	; 32
    28e0:	08 c0       	rjmp	.+16     	; 0x28f2 <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    28e2:	82 2f       	mov	r24, r18
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	fc 01       	movw	r30, r24
    28e8:	e4 5f       	subi	r30, 0xF4	; 244
    28ea:	fe 4d       	sbci	r31, 0xDE	; 222
    28ec:	30 81       	ld	r19, Z
    28ee:	30 32       	cpi	r19, 0x20	; 32
    28f0:	39 f0       	breq	.+14     	; 0x2900 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    28f2:	fc 01       	movw	r30, r24
    28f4:	e4 5f       	subi	r30, 0xF4	; 244
    28f6:	fe 4d       	sbci	r31, 0xDE	; 222
    28f8:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    28fa:	2f 5f       	subi	r18, 0xFF	; 255
    28fc:	2f 30       	cpi	r18, 0x0F	; 15
    28fe:	89 f7       	brne	.-30     	; 0x28e2 <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    2900:	ce 01       	movw	r24, r28
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	9f 93       	push	r25
    2906:	8f 93       	push	r24
    2908:	86 ea       	ldi	r24, 0xA6	; 166
    290a:	90 e2       	ldi	r25, 0x20	; 32
    290c:	9f 93       	push	r25
    290e:	8f 93       	push	r24
    2910:	8c e0       	ldi	r24, 0x0C	; 12
    2912:	91 e2       	ldi	r25, 0x21	; 33
    2914:	9f 93       	push	r25
    2916:	8f 93       	push	r24
    2918:	5b d7       	rcall	.+3766   	; 0x37d0 <sscanf>
				gps_t = (double) val;
    291a:	69 81       	ldd	r22, Y+1	; 0x01
    291c:	7a 81       	ldd	r23, Y+2	; 0x02
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	9c 81       	ldd	r25, Y+4	; 0x04
    2922:	94 d3       	rcall	.+1832   	; 0x304c <__floatsisf>
    2924:	60 93 cc 20 	sts	0x20CC, r22	; 0x8020cc <gps_t>
    2928:	70 93 cd 20 	sts	0x20CD, r23	; 0x8020cd <gps_t+0x1>
    292c:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <gps_t+0x2>
    2930:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <gps_t+0x3>
				break;
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	bd c1       	rjmp	.+890    	; 0x2cbc <__vector_91+0x4e2>
    2942:	ed e0       	ldi	r30, 0x0D	; 13
    2944:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2946:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2948:	91 91       	ld	r25, Z+
    294a:	9e 32       	cpi	r25, 0x2E	; 46
    294c:	29 f4       	brne	.+10     	; 0x2958 <__vector_91+0x17e>
    294e:	01 c0       	rjmp	.+2      	; 0x2952 <__vector_91+0x178>
    2950:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2952:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						break;
    2956:	03 c0       	rjmp	.+6      	; 0x295e <__vector_91+0x184>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2958:	8f 5f       	subi	r24, 0xFF	; 255
    295a:	8f 30       	cpi	r24, 0x0F	; 15
    295c:	a9 f7       	brne	.-22     	; 0x2948 <__vector_91+0x16e>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    295e:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
    2962:	42 2f       	mov	r20, r18
    2964:	50 e0       	ldi	r21, 0x00	; 0
    2966:	fa 01       	movw	r30, r20
    2968:	e4 5f       	subi	r30, 0xF4	; 244
    296a:	fe 4d       	sbci	r31, 0xDE	; 222
    296c:	80 e2       	ldi	r24, 0x20	; 32
    296e:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2970:	2f 5f       	subi	r18, 0xFF	; 255
    2972:	2f 30       	cpi	r18, 0x0F	; 15
    2974:	f8 f4       	brcc	.+62     	; 0x29b4 <__vector_91+0x1da>
					if(gps[i] == 32){
    2976:	82 2f       	mov	r24, r18
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	fc 01       	movw	r30, r24
    297c:	e4 5f       	subi	r30, 0xF4	; 244
    297e:	fe 4d       	sbci	r31, 0xDE	; 222
    2980:	30 81       	ld	r19, Z
    2982:	30 32       	cpi	r19, 0x20	; 32
    2984:	b9 f0       	breq	.+46     	; 0x29b4 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2986:	60 e2       	ldi	r22, 0x20	; 32
    2988:	08 c0       	rjmp	.+16     	; 0x299a <__vector_91+0x1c0>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    298a:	82 2f       	mov	r24, r18
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	fc 01       	movw	r30, r24
    2990:	e4 5f       	subi	r30, 0xF4	; 244
    2992:	fe 4d       	sbci	r31, 0xDE	; 222
    2994:	30 81       	ld	r19, Z
    2996:	30 32       	cpi	r19, 0x20	; 32
    2998:	69 f0       	breq	.+26     	; 0x29b4 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
    299a:	fc 01       	movw	r30, r24
    299c:	e4 1b       	sub	r30, r20
    299e:	f5 0b       	sbc	r31, r21
    29a0:	e6 5e       	subi	r30, 0xE6	; 230
    29a2:	fe 4d       	sbci	r31, 0xDE	; 222
    29a4:	30 83       	st	Z, r19
					gps[i] = 32;
    29a6:	fc 01       	movw	r30, r24
    29a8:	e4 5f       	subi	r30, 0xF4	; 244
    29aa:	fe 4d       	sbci	r31, 0xDE	; 222
    29ac:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    29ae:	2f 5f       	subi	r18, 0xFF	; 255
    29b0:	2f 30       	cpi	r18, 0x0F	; 15
    29b2:	59 f7       	brne	.-42     	; 0x298a <__vector_91+0x1b0>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    29b4:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <dec>
    29b8:	80 32       	cpi	r24, 0x20	; 32
    29ba:	19 f4       	brne	.+6      	; 0x29c2 <__vector_91+0x1e8>
					dec[0] = '0';
    29bc:	80 e3       	ldi	r24, 0x30	; 48
    29be:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <dec>
				}
				sscanf(gps,"%ld",&val);
    29c2:	ce 01       	movw	r24, r28
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	9f 93       	push	r25
    29c8:	8f 93       	push	r24
    29ca:	86 ea       	ldi	r24, 0xA6	; 166
    29cc:	90 e2       	ldi	r25, 0x20	; 32
    29ce:	9f 93       	push	r25
    29d0:	8f 93       	push	r24
    29d2:	8c e0       	ldi	r24, 0x0C	; 12
    29d4:	91 e2       	ldi	r25, 0x21	; 33
    29d6:	9f 93       	push	r25
    29d8:	8f 93       	push	r24
    29da:	fa d6       	rcall	.+3572   	; 0x37d0 <sscanf>
				sscanf(dec,"%d",&val2);
    29dc:	ce 01       	movw	r24, r28
    29de:	05 96       	adiw	r24, 0x05	; 5
    29e0:	9f 93       	push	r25
    29e2:	8f 93       	push	r24
    29e4:	8a ea       	ldi	r24, 0xAA	; 170
    29e6:	90 e2       	ldi	r25, 0x20	; 32
    29e8:	9f 93       	push	r25
    29ea:	8f 93       	push	r24
    29ec:	8b e1       	ldi	r24, 0x1B	; 27
    29ee:	91 e2       	ldi	r25, 0x21	; 33
    29f0:	9f 93       	push	r25
    29f2:	8f 93       	push	r24
    29f4:	ed d6       	rcall	.+3546   	; 0x37d0 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    29f6:	89 80       	ldd	r8, Y+1	; 0x01
    29f8:	9a 80       	ldd	r9, Y+2	; 0x02
    29fa:	ab 80       	ldd	r10, Y+3	; 0x03
    29fc:	bc 80       	ldd	r11, Y+4	; 0x04
    29fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2a00:	7e 81       	ldd	r23, Y+6	; 0x06
    2a02:	07 2e       	mov	r0, r23
    2a04:	00 0c       	add	r0, r0
    2a06:	88 0b       	sbc	r24, r24
    2a08:	99 0b       	sbc	r25, r25
    2a0a:	20 d3       	rcall	.+1600   	; 0x304c <__floatsisf>
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e4       	ldi	r19, 0x40	; 64
    2a10:	4c e1       	ldi	r20, 0x1C	; 28
    2a12:	56 e4       	ldi	r21, 0x46	; 70
    2a14:	46 d2       	rcall	.+1164   	; 0x2ea2 <__divsf3>
    2a16:	6b 01       	movw	r12, r22
    2a18:	7c 01       	movw	r14, r24
    2a1a:	c5 01       	movw	r24, r10
    2a1c:	b4 01       	movw	r22, r8
    2a1e:	24 e6       	ldi	r18, 0x64	; 100
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	f6 d5       	rcall	.+3052   	; 0x3614 <__divmodsi4>
    2a28:	49 01       	movw	r8, r18
    2a2a:	5a 01       	movw	r10, r20
    2a2c:	0f d3       	rcall	.+1566   	; 0x304c <__floatsisf>
    2a2e:	9b 01       	movw	r18, r22
    2a30:	ac 01       	movw	r20, r24
    2a32:	c7 01       	movw	r24, r14
    2a34:	b6 01       	movw	r22, r12
    2a36:	cd d1       	rcall	.+922    	; 0x2dd2 <__addsf3>
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e7       	ldi	r20, 0x70	; 112
    2a3e:	52 e4       	ldi	r21, 0x42	; 66
    2a40:	30 d2       	rcall	.+1120   	; 0x2ea2 <__divsf3>
    2a42:	6b 01       	movw	r12, r22
    2a44:	7c 01       	movw	r14, r24
    2a46:	c5 01       	movw	r24, r10
    2a48:	b4 01       	movw	r22, r8
    2a4a:	00 d3       	rcall	.+1536   	; 0x304c <__floatsisf>
    2a4c:	9b 01       	movw	r18, r22
    2a4e:	ac 01       	movw	r20, r24
    2a50:	c7 01       	movw	r24, r14
    2a52:	b6 01       	movw	r22, r12
    2a54:	be d1       	rcall	.+892    	; 0x2dd2 <__addsf3>
    2a56:	60 93 c8 20 	sts	0x20C8, r22	; 0x8020c8 <gps_lat>
    2a5a:	70 93 c9 20 	sts	0x20C9, r23	; 0x8020c9 <gps_lat+0x1>
    2a5e:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <gps_lat+0x2>
    2a62:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <gps_lat+0x3>
				break;
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	28 c1       	rjmp	.+592    	; 0x2cbc <__vector_91+0x4e2>
    2a6c:	ed e0       	ldi	r30, 0x0D	; 13
    2a6e:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2a70:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2a72:	91 91       	ld	r25, Z+
    2a74:	9e 32       	cpi	r25, 0x2E	; 46
    2a76:	29 f4       	brne	.+10     	; 0x2a82 <__vector_91+0x2a8>
    2a78:	01 c0       	rjmp	.+2      	; 0x2a7c <__vector_91+0x2a2>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2a7c:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						break;
    2a80:	03 c0       	rjmp	.+6      	; 0x2a88 <__vector_91+0x2ae>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2a82:	8f 5f       	subi	r24, 0xFF	; 255
    2a84:	8f 30       	cpi	r24, 0x0F	; 15
    2a86:	a9 f7       	brne	.-22     	; 0x2a72 <__vector_91+0x298>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2a88:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
    2a8c:	42 2f       	mov	r20, r18
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	fa 01       	movw	r30, r20
    2a92:	e4 5f       	subi	r30, 0xF4	; 244
    2a94:	fe 4d       	sbci	r31, 0xDE	; 222
    2a96:	80 e2       	ldi	r24, 0x20	; 32
    2a98:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2a9a:	2f 5f       	subi	r18, 0xFF	; 255
    2a9c:	2f 30       	cpi	r18, 0x0F	; 15
    2a9e:	f8 f4       	brcc	.+62     	; 0x2ade <__vector_91+0x304>
					if(gps[i] == 32){
    2aa0:	82 2f       	mov	r24, r18
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	e4 5f       	subi	r30, 0xF4	; 244
    2aa8:	fe 4d       	sbci	r31, 0xDE	; 222
    2aaa:	30 81       	ld	r19, Z
    2aac:	30 32       	cpi	r19, 0x20	; 32
    2aae:	b9 f0       	breq	.+46     	; 0x2ade <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2ab0:	60 e2       	ldi	r22, 0x20	; 32
    2ab2:	08 c0       	rjmp	.+16     	; 0x2ac4 <__vector_91+0x2ea>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2ab4:	82 2f       	mov	r24, r18
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	fc 01       	movw	r30, r24
    2aba:	e4 5f       	subi	r30, 0xF4	; 244
    2abc:	fe 4d       	sbci	r31, 0xDE	; 222
    2abe:	30 81       	ld	r19, Z
    2ac0:	30 32       	cpi	r19, 0x20	; 32
    2ac2:	69 f0       	breq	.+26     	; 0x2ade <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	e4 1b       	sub	r30, r20
    2ac8:	f5 0b       	sbc	r31, r21
    2aca:	e6 5e       	subi	r30, 0xE6	; 230
    2acc:	fe 4d       	sbci	r31, 0xDE	; 222
    2ace:	30 83       	st	Z, r19
					gps[i] = 32;
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	e4 5f       	subi	r30, 0xF4	; 244
    2ad4:	fe 4d       	sbci	r31, 0xDE	; 222
    2ad6:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2ad8:	2f 5f       	subi	r18, 0xFF	; 255
    2ada:	2f 30       	cpi	r18, 0x0F	; 15
    2adc:	59 f7       	brne	.-42     	; 0x2ab4 <__vector_91+0x2da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2ade:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <dec>
    2ae2:	80 32       	cpi	r24, 0x20	; 32
    2ae4:	19 f4       	brne	.+6      	; 0x2aec <__vector_91+0x312>
					dec[0] = '0';
    2ae6:	80 e3       	ldi	r24, 0x30	; 48
    2ae8:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <dec>
				}
				sscanf(gps,"%ld",&val);
    2aec:	ce 01       	movw	r24, r28
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	9f 93       	push	r25
    2af2:	8f 93       	push	r24
    2af4:	86 ea       	ldi	r24, 0xA6	; 166
    2af6:	90 e2       	ldi	r25, 0x20	; 32
    2af8:	9f 93       	push	r25
    2afa:	8f 93       	push	r24
    2afc:	8c e0       	ldi	r24, 0x0C	; 12
    2afe:	91 e2       	ldi	r25, 0x21	; 33
    2b00:	9f 93       	push	r25
    2b02:	8f 93       	push	r24
    2b04:	65 d6       	rcall	.+3274   	; 0x37d0 <sscanf>
				sscanf(dec,"%d",&val2);
    2b06:	ce 01       	movw	r24, r28
    2b08:	05 96       	adiw	r24, 0x05	; 5
    2b0a:	9f 93       	push	r25
    2b0c:	8f 93       	push	r24
    2b0e:	8a ea       	ldi	r24, 0xAA	; 170
    2b10:	90 e2       	ldi	r25, 0x20	; 32
    2b12:	9f 93       	push	r25
    2b14:	8f 93       	push	r24
    2b16:	8b e1       	ldi	r24, 0x1B	; 27
    2b18:	91 e2       	ldi	r25, 0x21	; 33
    2b1a:	9f 93       	push	r25
    2b1c:	8f 93       	push	r24
    2b1e:	58 d6       	rcall	.+3248   	; 0x37d0 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    2b20:	89 80       	ldd	r8, Y+1	; 0x01
    2b22:	9a 80       	ldd	r9, Y+2	; 0x02
    2b24:	ab 80       	ldd	r10, Y+3	; 0x03
    2b26:	bc 80       	ldd	r11, Y+4	; 0x04
    2b28:	6d 81       	ldd	r22, Y+5	; 0x05
    2b2a:	7e 81       	ldd	r23, Y+6	; 0x06
    2b2c:	07 2e       	mov	r0, r23
    2b2e:	00 0c       	add	r0, r0
    2b30:	88 0b       	sbc	r24, r24
    2b32:	99 0b       	sbc	r25, r25
    2b34:	8b d2       	rcall	.+1302   	; 0x304c <__floatsisf>
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e4       	ldi	r19, 0x40	; 64
    2b3a:	4c e1       	ldi	r20, 0x1C	; 28
    2b3c:	56 e4       	ldi	r21, 0x46	; 70
    2b3e:	b1 d1       	rcall	.+866    	; 0x2ea2 <__divsf3>
    2b40:	6b 01       	movw	r12, r22
    2b42:	7c 01       	movw	r14, r24
    2b44:	c5 01       	movw	r24, r10
    2b46:	b4 01       	movw	r22, r8
    2b48:	24 e6       	ldi	r18, 0x64	; 100
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	61 d5       	rcall	.+2754   	; 0x3614 <__divmodsi4>
    2b52:	49 01       	movw	r8, r18
    2b54:	5a 01       	movw	r10, r20
    2b56:	7a d2       	rcall	.+1268   	; 0x304c <__floatsisf>
    2b58:	9b 01       	movw	r18, r22
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	c7 01       	movw	r24, r14
    2b5e:	b6 01       	movw	r22, r12
    2b60:	38 d1       	rcall	.+624    	; 0x2dd2 <__addsf3>
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e7       	ldi	r20, 0x70	; 112
    2b68:	52 e4       	ldi	r21, 0x42	; 66
    2b6a:	9b d1       	rcall	.+822    	; 0x2ea2 <__divsf3>
    2b6c:	6b 01       	movw	r12, r22
    2b6e:	7c 01       	movw	r14, r24
    2b70:	c5 01       	movw	r24, r10
    2b72:	b4 01       	movw	r22, r8
    2b74:	6b d2       	rcall	.+1238   	; 0x304c <__floatsisf>
    2b76:	9b 01       	movw	r18, r22
    2b78:	ac 01       	movw	r20, r24
    2b7a:	c7 01       	movw	r24, r14
    2b7c:	b6 01       	movw	r22, r12
    2b7e:	29 d1       	rcall	.+594    	; 0x2dd2 <__addsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	b0 58       	subi	r27, 0x80	; 128
    2b86:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <gps_long>
    2b8a:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <gps_long+0x1>
    2b8e:	a0 93 c6 20 	sts	0x20C6, r26	; 0x8020c6 <gps_long+0x2>
    2b92:	b0 93 c7 20 	sts	0x20C7, r27	; 0x8020c7 <gps_long+0x3>
    2b96:	cd bf       	out	0x3d, r28	; 61
				break;
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	90 c0       	rjmp	.+288    	; 0x2cbc <__vector_91+0x4e2>
    2b9c:	8e eb       	ldi	r24, 0xBE	; 190
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    2b9e:	90 e2       	ldi	r25, 0x20	; 32
    2ba0:	9f 93       	push	r25
    2ba2:	8f 93       	push	r24
    2ba4:	8a ea       	ldi	r24, 0xAA	; 170
    2ba6:	90 e2       	ldi	r25, 0x20	; 32
    2ba8:	9f 93       	push	r25
    2baa:	8f 93       	push	r24
    2bac:	8c e0       	ldi	r24, 0x0C	; 12
    2bae:	91 e2       	ldi	r25, 0x21	; 33
    2bb0:	9f 93       	push	r25
    2bb2:	8f 93       	push	r24
    2bb4:	0d d6       	rcall	.+3098   	; 0x37d0 <sscanf>
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
				break;
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	7c c0       	rjmp	.+248    	; 0x2cbc <__vector_91+0x4e2>
    2bc4:	ed e0       	ldi	r30, 0x0D	; 13
    2bc6:	f1 e2       	ldi	r31, 0x21	; 33
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2bcc:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    2bce:	29 f4       	brne	.+10     	; 0x2bda <__vector_91+0x400>
    2bd0:	01 c0       	rjmp	.+2      	; 0x2bd4 <__vector_91+0x3fa>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <idx>
						idx = i;
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <__vector_91+0x406>
    2bda:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    2bdc:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2bde:	a9 f7       	brne	.-22     	; 0x2bca <__vector_91+0x3f0>
    2be0:	20 91 ea 20 	lds	r18, 0x20EA	; 0x8020ea <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2be4:	42 2f       	mov	r20, r18
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	fa 01       	movw	r30, r20
    2bea:	e4 5f       	subi	r30, 0xF4	; 244
    2bec:	fe 4d       	sbci	r31, 0xDE	; 222
    2bee:	80 e2       	ldi	r24, 0x20	; 32
    2bf0:	80 83       	st	Z, r24
    2bf2:	2f 5f       	subi	r18, 0xFF	; 255
    2bf4:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    2bf6:	f8 f4       	brcc	.+62     	; 0x2c36 <__vector_91+0x45c>
    2bf8:	82 2f       	mov	r24, r18
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	e4 5f       	subi	r30, 0xF4	; 244
    2c00:	fe 4d       	sbci	r31, 0xDE	; 222
    2c02:	30 81       	ld	r19, Z
    2c04:	30 32       	cpi	r19, 0x20	; 32
    2c06:	b9 f0       	breq	.+46     	; 0x2c36 <__vector_91+0x45c>
    2c08:	60 e2       	ldi	r22, 0x20	; 32
    2c0a:	08 c0       	rjmp	.+16     	; 0x2c1c <__vector_91+0x442>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2c0c:	82 2f       	mov	r24, r18
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2c10:	fc 01       	movw	r30, r24
    2c12:	e4 5f       	subi	r30, 0xF4	; 244
    2c14:	fe 4d       	sbci	r31, 0xDE	; 222
    2c16:	30 81       	ld	r19, Z
    2c18:	30 32       	cpi	r19, 0x20	; 32
    2c1a:	69 f0       	breq	.+26     	; 0x2c36 <__vector_91+0x45c>
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    2c20:	f5 0b       	sbc	r31, r21
    2c22:	e6 5e       	subi	r30, 0xE6	; 230
    2c24:	fe 4d       	sbci	r31, 0xDE	; 222
    2c26:	30 83       	st	Z, r19
    2c28:	fc 01       	movw	r30, r24
    2c2a:	e4 5f       	subi	r30, 0xF4	; 244
					gps[i] = 32;
    2c2c:	fe 4d       	sbci	r31, 0xDE	; 222
    2c2e:	60 83       	st	Z, r22
    2c30:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2c32:	2f 30       	cpi	r18, 0x0F	; 15
    2c34:	59 f7       	brne	.-42     	; 0x2c0c <__vector_91+0x432>
    2c36:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2c3a:	80 32       	cpi	r24, 0x20	; 32
    2c3c:	19 f4       	brne	.+6      	; 0x2c44 <__vector_91+0x46a>
    2c3e:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    2c40:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <dec>
    2c44:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	9f 93       	push	r25
    2c4a:	8f 93       	push	r24
    2c4c:	86 ea       	ldi	r24, 0xA6	; 166
    2c4e:	90 e2       	ldi	r25, 0x20	; 32
    2c50:	9f 93       	push	r25
    2c52:	8f 93       	push	r24
    2c54:	8c e0       	ldi	r24, 0x0C	; 12
    2c56:	91 e2       	ldi	r25, 0x21	; 33
    2c58:	9f 93       	push	r25
    2c5a:	8f 93       	push	r24
    2c5c:	b9 d5       	rcall	.+2930   	; 0x37d0 <sscanf>
				sscanf(dec,"%d",&val2);
    2c5e:	ce 01       	movw	r24, r28
    2c60:	05 96       	adiw	r24, 0x05	; 5
    2c62:	9f 93       	push	r25
    2c64:	8f 93       	push	r24
    2c66:	8a ea       	ldi	r24, 0xAA	; 170
    2c68:	90 e2       	ldi	r25, 0x20	; 32
    2c6a:	9f 93       	push	r25
    2c6c:	8f 93       	push	r24
    2c6e:	8b e1       	ldi	r24, 0x1B	; 27
    2c70:	91 e2       	ldi	r25, 0x21	; 33
    2c72:	9f 93       	push	r25
    2c74:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    2c76:	ac d5       	rcall	.+2904   	; 0x37d0 <sscanf>
    2c78:	69 81       	ldd	r22, Y+1	; 0x01
    2c7a:	7a 81       	ldd	r23, Y+2	; 0x02
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	e5 d1       	rcall	.+970    	; 0x304c <__floatsisf>
    2c82:	6b 01       	movw	r12, r22
    2c84:	7c 01       	movw	r14, r24
    2c86:	6d 81       	ldd	r22, Y+5	; 0x05
    2c88:	7e 81       	ldd	r23, Y+6	; 0x06
    2c8a:	07 2e       	mov	r0, r23
    2c8c:	00 0c       	add	r0, r0
    2c8e:	88 0b       	sbc	r24, r24
    2c90:	99 0b       	sbc	r25, r25
    2c92:	dc d1       	rcall	.+952    	; 0x304c <__floatsisf>
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e2       	ldi	r20, 0x20	; 32
    2c9a:	51 e4       	ldi	r21, 0x41	; 65
    2c9c:	02 d1       	rcall	.+516    	; 0x2ea2 <__divsf3>
    2c9e:	9b 01       	movw	r18, r22
    2ca0:	ac 01       	movw	r20, r24
    2ca2:	c7 01       	movw	r24, r14
    2ca4:	b6 01       	movw	r22, r12
    2ca6:	95 d0       	rcall	.+298    	; 0x2dd2 <__addsf3>
    2ca8:	60 93 c0 20 	sts	0x20C0, r22	; 0x8020c0 <gps_alt>
    2cac:	70 93 c1 20 	sts	0x20C1, r23	; 0x8020c1 <gps_alt+0x1>
    2cb0:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <gps_alt+0x2>
    2cb4:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <gps_alt+0x3>
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <writing>
				break;
    2cc0:	88 23       	and	r24, r24
		}
	
		if(writing){
    2cc2:	d1 f0       	breq	.+52     	; 0x2cf8 <__vector_91+0x51e>
    2cc4:	10 92 ea 20 	sts	0x20EA, r1	; 0x8020ea <idx>
    2cc8:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <commas>
			idx = 0;
    2ccc:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    2cce:	80 93 eb 20 	sts	0x20EB, r24	; 0x8020eb <commas>
    2cd2:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <word_pos>
    2cd6:	ec e0       	ldi	r30, 0x0C	; 12
			word_pos = 0;
    2cd8:	f1 e2       	ldi	r31, 0x21	; 33
    2cda:	2b e1       	ldi	r18, 0x1B	; 27
    2cdc:	31 e2       	ldi	r19, 0x21	; 33
    2cde:	80 e2       	ldi	r24, 0x20	; 32
    2ce0:	81 93       	st	Z+, r24
    2ce2:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2ce4:	3f 07       	cpc	r19, r31
    2ce6:	e1 f7       	brne	.-8      	; 0x2ce0 <__vector_91+0x506>
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2ce8:	eb e1       	ldi	r30, 0x1B	; 27
    2cea:	f1 e2       	ldi	r31, 0x21	; 33
    2cec:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2cee:	80 83       	st	Z, r24
    2cf0:	81 83       	std	Z+1, r24	; 0x01
    2cf2:	82 83       	std	Z+2, r24	; 0x02
    2cf4:	83 83       	std	Z+3, r24	; 0x03
    2cf6:	84 83       	std	Z+4, r24	; 0x04
    2cf8:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <writing>
    2cfc:	88 23       	and	r24, r24
			}
		}
	}
		
	if(writing){
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <__vector_91+0x528>
    2d00:	40 c0       	rjmp	.+128    	; 0x2d82 <__vector_91+0x5a8>
    2d02:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <pos>
    2d06:	93 30       	cpi	r25, 0x03	; 3
		switch(pos){
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <__vector_91+0x536>
    2d0a:	94 30       	cpi	r25, 0x04	; 4
    2d0c:	31 f0       	breq	.+12     	; 0x2d1a <__vector_91+0x540>
    2d0e:	09 c0       	rjmp	.+18     	; 0x2d22 <__vector_91+0x548>
    2d10:	17 34       	cpi	r17, 0x47	; 71
    2d12:	39 f0       	breq	.+14     	; 0x2d22 <__vector_91+0x548>
    2d14:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <writing>
			case 3:
				if(c != 'G'){
    2d18:	04 c0       	rjmp	.+8      	; 0x2d22 <__vector_91+0x548>
					writing = 0;
    2d1a:	17 34       	cpi	r17, 0x47	; 71
    2d1c:	11 f0       	breq	.+4      	; 0x2d22 <__vector_91+0x548>
    2d1e:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <writing>
				}
				break;
				
			case 4:
				if(c != 'G'){
    2d22:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <word_pos>
					writing = 0;
    2d26:	e8 2f       	mov	r30, r24
				}
				break;
		}
		gps[word_pos] = c;
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	e4 5f       	subi	r30, 0xF4	; 244
    2d2c:	fe 4d       	sbci	r31, 0xDE	; 222
    2d2e:	10 83       	st	Z, r17
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <word_pos>
		word_pos++;
    2d36:	9f 5f       	subi	r25, 0xFF	; 255
    2d38:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <pos>
		pos++;
    2d3c:	22 c0       	rjmp	.+68     	; 0x2d82 <__vector_91+0x5a8>
    2d3e:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <gps>
	}
}
    2d42:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <__vector_91+0x56e>
    2d46:	b1 cd       	rjmp	.-1182   	; 0x28aa <__vector_91+0xd0>
    2d48:	ed e0       	ldi	r30, 0x0D	; 13
    2d4a:	f1 e2       	ldi	r31, 0x21	; 33
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	a9 cd       	rjmp	.-1198   	; 0x28a2 <__vector_91+0xc8>
    2d50:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2d52:	1a 82       	std	Y+2, r1	; 0x02
    2d54:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    2d56:	1c 82       	std	Y+4, r1	; 0x04
    2d58:	1d 82       	std	Y+5, r1	; 0x05
    2d5a:	1e 82       	std	Y+6, r1	; 0x06
    2d5c:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <commas>
		int16_t val2 = 0;
    2d60:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <__vector_91+0x58c>
    2d64:	92 cd       	rjmp	.-1244   	; 0x288a <__vector_91+0xb0>
    2d66:	30 f4       	brcc	.+12     	; 0x2d74 <__vector_91+0x59a>
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	49 f3       	breq	.-46     	; 0x2d3e <__vector_91+0x564>
    2d6c:	82 30       	cpi	r24, 0x02	; 2
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <__vector_91+0x598>
    2d70:	92 cd       	rjmp	.-1244   	; 0x2896 <__vector_91+0xbc>
    2d72:	a4 cf       	rjmp	.-184    	; 0x2cbc <__vector_91+0x4e2>
    2d74:	87 30       	cpi	r24, 0x07	; 7
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <__vector_91+0x5a0>
    2d78:	11 cf       	rjmp	.-478    	; 0x2b9c <__vector_91+0x3c2>
    2d7a:	89 30       	cpi	r24, 0x09	; 9
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <__vector_91+0x5a6>
    2d7e:	7f cd       	rjmp	.-1282   	; 0x287e <__vector_91+0xa4>
    2d80:	9d cf       	rjmp	.-198    	; 0x2cbc <__vector_91+0x4e2>
    2d82:	26 96       	adiw	r28, 0x06	; 6
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	ff 91       	pop	r31
    2d8e:	ef 91       	pop	r30
    2d90:	bf 91       	pop	r27
    2d92:	af 91       	pop	r26
    2d94:	9f 91       	pop	r25
    2d96:	8f 91       	pop	r24
    2d98:	7f 91       	pop	r23
    2d9a:	6f 91       	pop	r22
    2d9c:	5f 91       	pop	r21
    2d9e:	4f 91       	pop	r20
    2da0:	3f 91       	pop	r19
    2da2:	2f 91       	pop	r18
    2da4:	1f 91       	pop	r17
    2da6:	ff 90       	pop	r15
    2da8:	ef 90       	pop	r14
    2daa:	df 90       	pop	r13
    2dac:	cf 90       	pop	r12
    2dae:	bf 90       	pop	r11
    2db0:	af 90       	pop	r10
    2db2:	9f 90       	pop	r9
    2db4:	8f 90       	pop	r8
    2db6:	0f 90       	pop	r0
    2db8:	0b be       	out	0x3b, r0	; 59
    2dba:	0f 90       	pop	r0
    2dbc:	0a be       	out	0x3a, r0	; 58
    2dbe:	0f 90       	pop	r0
    2dc0:	09 be       	out	0x39, r0	; 57
    2dc2:	0f 90       	pop	r0
    2dc4:	08 be       	out	0x38, r0	; 56
    2dc6:	0f 90       	pop	r0
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	0f 90       	pop	r0
    2dcc:	1f 90       	pop	r1
    2dce:	18 95       	reti

00002dd0 <__subsf3>:
    2dd0:	50 58       	subi	r21, 0x80	; 128

00002dd2 <__addsf3>:
    2dd2:	bb 27       	eor	r27, r27
    2dd4:	aa 27       	eor	r26, r26
    2dd6:	0e d0       	rcall	.+28     	; 0x2df4 <__addsf3x>
    2dd8:	e4 c1       	rjmp	.+968    	; 0x31a2 <__fp_round>
    2dda:	d5 d1       	rcall	.+938    	; 0x3186 <__fp_pscA>
    2ddc:	30 f0       	brcs	.+12     	; 0x2dea <__addsf3+0x18>
    2dde:	da d1       	rcall	.+948    	; 0x3194 <__fp_pscB>
    2de0:	20 f0       	brcs	.+8      	; 0x2dea <__addsf3+0x18>
    2de2:	31 f4       	brne	.+12     	; 0x2df0 <__addsf3+0x1e>
    2de4:	9f 3f       	cpi	r25, 0xFF	; 255
    2de6:	11 f4       	brne	.+4      	; 0x2dec <__addsf3+0x1a>
    2de8:	1e f4       	brtc	.+6      	; 0x2df0 <__addsf3+0x1e>
    2dea:	95 c1       	rjmp	.+810    	; 0x3116 <__fp_nan>
    2dec:	0e f4       	brtc	.+2      	; 0x2df0 <__addsf3+0x1e>
    2dee:	e0 95       	com	r30
    2df0:	e7 fb       	bst	r30, 7
    2df2:	8b c1       	rjmp	.+790    	; 0x310a <__fp_inf>

00002df4 <__addsf3x>:
    2df4:	e9 2f       	mov	r30, r25
    2df6:	e6 d1       	rcall	.+972    	; 0x31c4 <__fp_split3>
    2df8:	80 f3       	brcs	.-32     	; 0x2dda <__addsf3+0x8>
    2dfa:	ba 17       	cp	r27, r26
    2dfc:	62 07       	cpc	r22, r18
    2dfe:	73 07       	cpc	r23, r19
    2e00:	84 07       	cpc	r24, r20
    2e02:	95 07       	cpc	r25, r21
    2e04:	18 f0       	brcs	.+6      	; 0x2e0c <__addsf3x+0x18>
    2e06:	71 f4       	brne	.+28     	; 0x2e24 <__addsf3x+0x30>
    2e08:	9e f5       	brtc	.+102    	; 0x2e70 <__addsf3x+0x7c>
    2e0a:	fe c1       	rjmp	.+1020   	; 0x3208 <__fp_zero>
    2e0c:	0e f4       	brtc	.+2      	; 0x2e10 <__addsf3x+0x1c>
    2e0e:	e0 95       	com	r30
    2e10:	0b 2e       	mov	r0, r27
    2e12:	ba 2f       	mov	r27, r26
    2e14:	a0 2d       	mov	r26, r0
    2e16:	0b 01       	movw	r0, r22
    2e18:	b9 01       	movw	r22, r18
    2e1a:	90 01       	movw	r18, r0
    2e1c:	0c 01       	movw	r0, r24
    2e1e:	ca 01       	movw	r24, r20
    2e20:	a0 01       	movw	r20, r0
    2e22:	11 24       	eor	r1, r1
    2e24:	ff 27       	eor	r31, r31
    2e26:	59 1b       	sub	r21, r25
    2e28:	99 f0       	breq	.+38     	; 0x2e50 <__addsf3x+0x5c>
    2e2a:	59 3f       	cpi	r21, 0xF9	; 249
    2e2c:	50 f4       	brcc	.+20     	; 0x2e42 <__addsf3x+0x4e>
    2e2e:	50 3e       	cpi	r21, 0xE0	; 224
    2e30:	68 f1       	brcs	.+90     	; 0x2e8c <__addsf3x+0x98>
    2e32:	1a 16       	cp	r1, r26
    2e34:	f0 40       	sbci	r31, 0x00	; 0
    2e36:	a2 2f       	mov	r26, r18
    2e38:	23 2f       	mov	r18, r19
    2e3a:	34 2f       	mov	r19, r20
    2e3c:	44 27       	eor	r20, r20
    2e3e:	58 5f       	subi	r21, 0xF8	; 248
    2e40:	f3 cf       	rjmp	.-26     	; 0x2e28 <__addsf3x+0x34>
    2e42:	46 95       	lsr	r20
    2e44:	37 95       	ror	r19
    2e46:	27 95       	ror	r18
    2e48:	a7 95       	ror	r26
    2e4a:	f0 40       	sbci	r31, 0x00	; 0
    2e4c:	53 95       	inc	r21
    2e4e:	c9 f7       	brne	.-14     	; 0x2e42 <__addsf3x+0x4e>
    2e50:	7e f4       	brtc	.+30     	; 0x2e70 <__addsf3x+0x7c>
    2e52:	1f 16       	cp	r1, r31
    2e54:	ba 0b       	sbc	r27, r26
    2e56:	62 0b       	sbc	r22, r18
    2e58:	73 0b       	sbc	r23, r19
    2e5a:	84 0b       	sbc	r24, r20
    2e5c:	ba f0       	brmi	.+46     	; 0x2e8c <__addsf3x+0x98>
    2e5e:	91 50       	subi	r25, 0x01	; 1
    2e60:	a1 f0       	breq	.+40     	; 0x2e8a <__addsf3x+0x96>
    2e62:	ff 0f       	add	r31, r31
    2e64:	bb 1f       	adc	r27, r27
    2e66:	66 1f       	adc	r22, r22
    2e68:	77 1f       	adc	r23, r23
    2e6a:	88 1f       	adc	r24, r24
    2e6c:	c2 f7       	brpl	.-16     	; 0x2e5e <__addsf3x+0x6a>
    2e6e:	0e c0       	rjmp	.+28     	; 0x2e8c <__addsf3x+0x98>
    2e70:	ba 0f       	add	r27, r26
    2e72:	62 1f       	adc	r22, r18
    2e74:	73 1f       	adc	r23, r19
    2e76:	84 1f       	adc	r24, r20
    2e78:	48 f4       	brcc	.+18     	; 0x2e8c <__addsf3x+0x98>
    2e7a:	87 95       	ror	r24
    2e7c:	77 95       	ror	r23
    2e7e:	67 95       	ror	r22
    2e80:	b7 95       	ror	r27
    2e82:	f7 95       	ror	r31
    2e84:	9e 3f       	cpi	r25, 0xFE	; 254
    2e86:	08 f0       	brcs	.+2      	; 0x2e8a <__addsf3x+0x96>
    2e88:	b3 cf       	rjmp	.-154    	; 0x2df0 <__addsf3+0x1e>
    2e8a:	93 95       	inc	r25
    2e8c:	88 0f       	add	r24, r24
    2e8e:	08 f0       	brcs	.+2      	; 0x2e92 <__addsf3x+0x9e>
    2e90:	99 27       	eor	r25, r25
    2e92:	ee 0f       	add	r30, r30
    2e94:	97 95       	ror	r25
    2e96:	87 95       	ror	r24
    2e98:	08 95       	ret

00002e9a <__cmpsf2>:
    2e9a:	13 d1       	rcall	.+550    	; 0x30c2 <__fp_cmp>
    2e9c:	08 f4       	brcc	.+2      	; 0x2ea0 <__cmpsf2+0x6>
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	08 95       	ret

00002ea2 <__divsf3>:
    2ea2:	0c d0       	rcall	.+24     	; 0x2ebc <__divsf3x>
    2ea4:	7e c1       	rjmp	.+764    	; 0x31a2 <__fp_round>
    2ea6:	76 d1       	rcall	.+748    	; 0x3194 <__fp_pscB>
    2ea8:	40 f0       	brcs	.+16     	; 0x2eba <__divsf3+0x18>
    2eaa:	6d d1       	rcall	.+730    	; 0x3186 <__fp_pscA>
    2eac:	30 f0       	brcs	.+12     	; 0x2eba <__divsf3+0x18>
    2eae:	21 f4       	brne	.+8      	; 0x2eb8 <__divsf3+0x16>
    2eb0:	5f 3f       	cpi	r21, 0xFF	; 255
    2eb2:	19 f0       	breq	.+6      	; 0x2eba <__divsf3+0x18>
    2eb4:	2a c1       	rjmp	.+596    	; 0x310a <__fp_inf>
    2eb6:	51 11       	cpse	r21, r1
    2eb8:	a8 c1       	rjmp	.+848    	; 0x320a <__fp_szero>
    2eba:	2d c1       	rjmp	.+602    	; 0x3116 <__fp_nan>

00002ebc <__divsf3x>:
    2ebc:	83 d1       	rcall	.+774    	; 0x31c4 <__fp_split3>
    2ebe:	98 f3       	brcs	.-26     	; 0x2ea6 <__divsf3+0x4>

00002ec0 <__divsf3_pse>:
    2ec0:	99 23       	and	r25, r25
    2ec2:	c9 f3       	breq	.-14     	; 0x2eb6 <__divsf3+0x14>
    2ec4:	55 23       	and	r21, r21
    2ec6:	b1 f3       	breq	.-20     	; 0x2eb4 <__divsf3+0x12>
    2ec8:	95 1b       	sub	r25, r21
    2eca:	55 0b       	sbc	r21, r21
    2ecc:	bb 27       	eor	r27, r27
    2ece:	aa 27       	eor	r26, r26
    2ed0:	62 17       	cp	r22, r18
    2ed2:	73 07       	cpc	r23, r19
    2ed4:	84 07       	cpc	r24, r20
    2ed6:	38 f0       	brcs	.+14     	; 0x2ee6 <__divsf3_pse+0x26>
    2ed8:	9f 5f       	subi	r25, 0xFF	; 255
    2eda:	5f 4f       	sbci	r21, 0xFF	; 255
    2edc:	22 0f       	add	r18, r18
    2ede:	33 1f       	adc	r19, r19
    2ee0:	44 1f       	adc	r20, r20
    2ee2:	aa 1f       	adc	r26, r26
    2ee4:	a9 f3       	breq	.-22     	; 0x2ed0 <__divsf3_pse+0x10>
    2ee6:	33 d0       	rcall	.+102    	; 0x2f4e <__divsf3_pse+0x8e>
    2ee8:	0e 2e       	mov	r0, r30
    2eea:	3a f0       	brmi	.+14     	; 0x2efa <__divsf3_pse+0x3a>
    2eec:	e0 e8       	ldi	r30, 0x80	; 128
    2eee:	30 d0       	rcall	.+96     	; 0x2f50 <__divsf3_pse+0x90>
    2ef0:	91 50       	subi	r25, 0x01	; 1
    2ef2:	50 40       	sbci	r21, 0x00	; 0
    2ef4:	e6 95       	lsr	r30
    2ef6:	00 1c       	adc	r0, r0
    2ef8:	ca f7       	brpl	.-14     	; 0x2eec <__divsf3_pse+0x2c>
    2efa:	29 d0       	rcall	.+82     	; 0x2f4e <__divsf3_pse+0x8e>
    2efc:	fe 2f       	mov	r31, r30
    2efe:	27 d0       	rcall	.+78     	; 0x2f4e <__divsf3_pse+0x8e>
    2f00:	66 0f       	add	r22, r22
    2f02:	77 1f       	adc	r23, r23
    2f04:	88 1f       	adc	r24, r24
    2f06:	bb 1f       	adc	r27, r27
    2f08:	26 17       	cp	r18, r22
    2f0a:	37 07       	cpc	r19, r23
    2f0c:	48 07       	cpc	r20, r24
    2f0e:	ab 07       	cpc	r26, r27
    2f10:	b0 e8       	ldi	r27, 0x80	; 128
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <__divsf3_pse+0x56>
    2f14:	bb 0b       	sbc	r27, r27
    2f16:	80 2d       	mov	r24, r0
    2f18:	bf 01       	movw	r22, r30
    2f1a:	ff 27       	eor	r31, r31
    2f1c:	93 58       	subi	r25, 0x83	; 131
    2f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f20:	2a f0       	brmi	.+10     	; 0x2f2c <__divsf3_pse+0x6c>
    2f22:	9e 3f       	cpi	r25, 0xFE	; 254
    2f24:	51 05       	cpc	r21, r1
    2f26:	68 f0       	brcs	.+26     	; 0x2f42 <__divsf3_pse+0x82>
    2f28:	f0 c0       	rjmp	.+480    	; 0x310a <__fp_inf>
    2f2a:	6f c1       	rjmp	.+734    	; 0x320a <__fp_szero>
    2f2c:	5f 3f       	cpi	r21, 0xFF	; 255
    2f2e:	ec f3       	brlt	.-6      	; 0x2f2a <__divsf3_pse+0x6a>
    2f30:	98 3e       	cpi	r25, 0xE8	; 232
    2f32:	dc f3       	brlt	.-10     	; 0x2f2a <__divsf3_pse+0x6a>
    2f34:	86 95       	lsr	r24
    2f36:	77 95       	ror	r23
    2f38:	67 95       	ror	r22
    2f3a:	b7 95       	ror	r27
    2f3c:	f7 95       	ror	r31
    2f3e:	9f 5f       	subi	r25, 0xFF	; 255
    2f40:	c9 f7       	brne	.-14     	; 0x2f34 <__divsf3_pse+0x74>
    2f42:	88 0f       	add	r24, r24
    2f44:	91 1d       	adc	r25, r1
    2f46:	96 95       	lsr	r25
    2f48:	87 95       	ror	r24
    2f4a:	97 f9       	bld	r25, 7
    2f4c:	08 95       	ret
    2f4e:	e1 e0       	ldi	r30, 0x01	; 1
    2f50:	66 0f       	add	r22, r22
    2f52:	77 1f       	adc	r23, r23
    2f54:	88 1f       	adc	r24, r24
    2f56:	bb 1f       	adc	r27, r27
    2f58:	62 17       	cp	r22, r18
    2f5a:	73 07       	cpc	r23, r19
    2f5c:	84 07       	cpc	r24, r20
    2f5e:	ba 07       	cpc	r27, r26
    2f60:	20 f0       	brcs	.+8      	; 0x2f6a <__divsf3_pse+0xaa>
    2f62:	62 1b       	sub	r22, r18
    2f64:	73 0b       	sbc	r23, r19
    2f66:	84 0b       	sbc	r24, r20
    2f68:	ba 0b       	sbc	r27, r26
    2f6a:	ee 1f       	adc	r30, r30
    2f6c:	88 f7       	brcc	.-30     	; 0x2f50 <__divsf3_pse+0x90>
    2f6e:	e0 95       	com	r30
    2f70:	08 95       	ret

00002f72 <__fixsfdi>:
    2f72:	be e3       	ldi	r27, 0x3E	; 62
    2f74:	04 d0       	rcall	.+8      	; 0x2f7e <__fixunssfdi+0x2>
    2f76:	08 f4       	brcc	.+2      	; 0x2f7a <__fixsfdi+0x8>
    2f78:	90 e8       	ldi	r25, 0x80	; 128
    2f7a:	08 95       	ret

00002f7c <__fixunssfdi>:
    2f7c:	bf e3       	ldi	r27, 0x3F	; 63
    2f7e:	22 27       	eor	r18, r18
    2f80:	33 27       	eor	r19, r19
    2f82:	a9 01       	movw	r20, r18
    2f84:	27 d1       	rcall	.+590    	; 0x31d4 <__fp_splitA>
    2f86:	58 f1       	brcs	.+86     	; 0x2fde <__fixunssfdi+0x62>
    2f88:	9f 57       	subi	r25, 0x7F	; 127
    2f8a:	40 f1       	brcs	.+80     	; 0x2fdc <__fixunssfdi+0x60>
    2f8c:	b9 17       	cp	r27, r25
    2f8e:	38 f1       	brcs	.+78     	; 0x2fde <__fixunssfdi+0x62>
    2f90:	bf e3       	ldi	r27, 0x3F	; 63
    2f92:	b9 1b       	sub	r27, r25
    2f94:	99 27       	eor	r25, r25
    2f96:	b8 50       	subi	r27, 0x08	; 8
    2f98:	3a f4       	brpl	.+14     	; 0x2fa8 <__fixunssfdi+0x2c>
    2f9a:	66 0f       	add	r22, r22
    2f9c:	77 1f       	adc	r23, r23
    2f9e:	88 1f       	adc	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	b3 95       	inc	r27
    2fa4:	d2 f3       	brmi	.-12     	; 0x2f9a <__fixunssfdi+0x1e>
    2fa6:	16 c0       	rjmp	.+44     	; 0x2fd4 <__fixunssfdi+0x58>
    2fa8:	b8 50       	subi	r27, 0x08	; 8
    2faa:	4a f0       	brmi	.+18     	; 0x2fbe <__fixunssfdi+0x42>
    2fac:	23 2f       	mov	r18, r19
    2fae:	34 2f       	mov	r19, r20
    2fb0:	45 2f       	mov	r20, r21
    2fb2:	56 2f       	mov	r21, r22
    2fb4:	67 2f       	mov	r22, r23
    2fb6:	78 2f       	mov	r23, r24
    2fb8:	88 27       	eor	r24, r24
    2fba:	b8 50       	subi	r27, 0x08	; 8
    2fbc:	ba f7       	brpl	.-18     	; 0x2fac <__fixunssfdi+0x30>
    2fbe:	b8 5f       	subi	r27, 0xF8	; 248
    2fc0:	49 f0       	breq	.+18     	; 0x2fd4 <__fixunssfdi+0x58>
    2fc2:	86 95       	lsr	r24
    2fc4:	77 95       	ror	r23
    2fc6:	67 95       	ror	r22
    2fc8:	57 95       	ror	r21
    2fca:	47 95       	ror	r20
    2fcc:	37 95       	ror	r19
    2fce:	27 95       	ror	r18
    2fd0:	ba 95       	dec	r27
    2fd2:	b9 f7       	brne	.-18     	; 0x2fc2 <__fixunssfdi+0x46>
    2fd4:	0e f4       	brtc	.+2      	; 0x2fd8 <__fixunssfdi+0x5c>
    2fd6:	a2 d0       	rcall	.+324    	; 0x311c <__fp_negdi>
    2fd8:	88 94       	clc
    2fda:	08 95       	ret
    2fdc:	88 94       	clc
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	08 95       	ret

00002fe6 <__fixsfsi>:
    2fe6:	04 d0       	rcall	.+8      	; 0x2ff0 <__fixunssfsi>
    2fe8:	68 94       	set
    2fea:	b1 11       	cpse	r27, r1
    2fec:	0e c1       	rjmp	.+540    	; 0x320a <__fp_szero>
    2fee:	08 95       	ret

00002ff0 <__fixunssfsi>:
    2ff0:	f1 d0       	rcall	.+482    	; 0x31d4 <__fp_splitA>
    2ff2:	88 f0       	brcs	.+34     	; 0x3016 <__fixunssfsi+0x26>
    2ff4:	9f 57       	subi	r25, 0x7F	; 127
    2ff6:	90 f0       	brcs	.+36     	; 0x301c <__fixunssfsi+0x2c>
    2ff8:	b9 2f       	mov	r27, r25
    2ffa:	99 27       	eor	r25, r25
    2ffc:	b7 51       	subi	r27, 0x17	; 23
    2ffe:	a0 f0       	brcs	.+40     	; 0x3028 <__fixunssfsi+0x38>
    3000:	d1 f0       	breq	.+52     	; 0x3036 <__fixunssfsi+0x46>
    3002:	66 0f       	add	r22, r22
    3004:	77 1f       	adc	r23, r23
    3006:	88 1f       	adc	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	1a f0       	brmi	.+6      	; 0x3012 <__fixunssfsi+0x22>
    300c:	ba 95       	dec	r27
    300e:	c9 f7       	brne	.-14     	; 0x3002 <__fixunssfsi+0x12>
    3010:	12 c0       	rjmp	.+36     	; 0x3036 <__fixunssfsi+0x46>
    3012:	b1 30       	cpi	r27, 0x01	; 1
    3014:	81 f0       	breq	.+32     	; 0x3036 <__fixunssfsi+0x46>
    3016:	f8 d0       	rcall	.+496    	; 0x3208 <__fp_zero>
    3018:	b1 e0       	ldi	r27, 0x01	; 1
    301a:	08 95       	ret
    301c:	f5 c0       	rjmp	.+490    	; 0x3208 <__fp_zero>
    301e:	67 2f       	mov	r22, r23
    3020:	78 2f       	mov	r23, r24
    3022:	88 27       	eor	r24, r24
    3024:	b8 5f       	subi	r27, 0xF8	; 248
    3026:	39 f0       	breq	.+14     	; 0x3036 <__fixunssfsi+0x46>
    3028:	b9 3f       	cpi	r27, 0xF9	; 249
    302a:	cc f3       	brlt	.-14     	; 0x301e <__fixunssfsi+0x2e>
    302c:	86 95       	lsr	r24
    302e:	77 95       	ror	r23
    3030:	67 95       	ror	r22
    3032:	b3 95       	inc	r27
    3034:	d9 f7       	brne	.-10     	; 0x302c <__fixunssfsi+0x3c>
    3036:	3e f4       	brtc	.+14     	; 0x3046 <__fixunssfsi+0x56>
    3038:	90 95       	com	r25
    303a:	80 95       	com	r24
    303c:	70 95       	com	r23
    303e:	61 95       	neg	r22
    3040:	7f 4f       	sbci	r23, 0xFF	; 255
    3042:	8f 4f       	sbci	r24, 0xFF	; 255
    3044:	9f 4f       	sbci	r25, 0xFF	; 255
    3046:	08 95       	ret

00003048 <__floatunsisf>:
    3048:	e8 94       	clt
    304a:	09 c0       	rjmp	.+18     	; 0x305e <__floatsisf+0x12>

0000304c <__floatsisf>:
    304c:	97 fb       	bst	r25, 7
    304e:	3e f4       	brtc	.+14     	; 0x305e <__floatsisf+0x12>
    3050:	90 95       	com	r25
    3052:	80 95       	com	r24
    3054:	70 95       	com	r23
    3056:	61 95       	neg	r22
    3058:	7f 4f       	sbci	r23, 0xFF	; 255
    305a:	8f 4f       	sbci	r24, 0xFF	; 255
    305c:	9f 4f       	sbci	r25, 0xFF	; 255
    305e:	99 23       	and	r25, r25
    3060:	a9 f0       	breq	.+42     	; 0x308c <__floatsisf+0x40>
    3062:	f9 2f       	mov	r31, r25
    3064:	96 e9       	ldi	r25, 0x96	; 150
    3066:	bb 27       	eor	r27, r27
    3068:	93 95       	inc	r25
    306a:	f6 95       	lsr	r31
    306c:	87 95       	ror	r24
    306e:	77 95       	ror	r23
    3070:	67 95       	ror	r22
    3072:	b7 95       	ror	r27
    3074:	f1 11       	cpse	r31, r1
    3076:	f8 cf       	rjmp	.-16     	; 0x3068 <__floatsisf+0x1c>
    3078:	fa f4       	brpl	.+62     	; 0x30b8 <__floatsisf+0x6c>
    307a:	bb 0f       	add	r27, r27
    307c:	11 f4       	brne	.+4      	; 0x3082 <__floatsisf+0x36>
    307e:	60 ff       	sbrs	r22, 0
    3080:	1b c0       	rjmp	.+54     	; 0x30b8 <__floatsisf+0x6c>
    3082:	6f 5f       	subi	r22, 0xFF	; 255
    3084:	7f 4f       	sbci	r23, 0xFF	; 255
    3086:	8f 4f       	sbci	r24, 0xFF	; 255
    3088:	9f 4f       	sbci	r25, 0xFF	; 255
    308a:	16 c0       	rjmp	.+44     	; 0x30b8 <__floatsisf+0x6c>
    308c:	88 23       	and	r24, r24
    308e:	11 f0       	breq	.+4      	; 0x3094 <__floatsisf+0x48>
    3090:	96 e9       	ldi	r25, 0x96	; 150
    3092:	11 c0       	rjmp	.+34     	; 0x30b6 <__floatsisf+0x6a>
    3094:	77 23       	and	r23, r23
    3096:	21 f0       	breq	.+8      	; 0x30a0 <__floatsisf+0x54>
    3098:	9e e8       	ldi	r25, 0x8E	; 142
    309a:	87 2f       	mov	r24, r23
    309c:	76 2f       	mov	r23, r22
    309e:	05 c0       	rjmp	.+10     	; 0x30aa <__floatsisf+0x5e>
    30a0:	66 23       	and	r22, r22
    30a2:	71 f0       	breq	.+28     	; 0x30c0 <__floatsisf+0x74>
    30a4:	96 e8       	ldi	r25, 0x86	; 134
    30a6:	86 2f       	mov	r24, r22
    30a8:	70 e0       	ldi	r23, 0x00	; 0
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	2a f0       	brmi	.+10     	; 0x30b8 <__floatsisf+0x6c>
    30ae:	9a 95       	dec	r25
    30b0:	66 0f       	add	r22, r22
    30b2:	77 1f       	adc	r23, r23
    30b4:	88 1f       	adc	r24, r24
    30b6:	da f7       	brpl	.-10     	; 0x30ae <__floatsisf+0x62>
    30b8:	88 0f       	add	r24, r24
    30ba:	96 95       	lsr	r25
    30bc:	87 95       	ror	r24
    30be:	97 f9       	bld	r25, 7
    30c0:	08 95       	ret

000030c2 <__fp_cmp>:
    30c2:	99 0f       	add	r25, r25
    30c4:	00 08       	sbc	r0, r0
    30c6:	55 0f       	add	r21, r21
    30c8:	aa 0b       	sbc	r26, r26
    30ca:	e0 e8       	ldi	r30, 0x80	; 128
    30cc:	fe ef       	ldi	r31, 0xFE	; 254
    30ce:	16 16       	cp	r1, r22
    30d0:	17 06       	cpc	r1, r23
    30d2:	e8 07       	cpc	r30, r24
    30d4:	f9 07       	cpc	r31, r25
    30d6:	c0 f0       	brcs	.+48     	; 0x3108 <__fp_cmp+0x46>
    30d8:	12 16       	cp	r1, r18
    30da:	13 06       	cpc	r1, r19
    30dc:	e4 07       	cpc	r30, r20
    30de:	f5 07       	cpc	r31, r21
    30e0:	98 f0       	brcs	.+38     	; 0x3108 <__fp_cmp+0x46>
    30e2:	62 1b       	sub	r22, r18
    30e4:	73 0b       	sbc	r23, r19
    30e6:	84 0b       	sbc	r24, r20
    30e8:	95 0b       	sbc	r25, r21
    30ea:	39 f4       	brne	.+14     	; 0x30fa <__fp_cmp+0x38>
    30ec:	0a 26       	eor	r0, r26
    30ee:	61 f0       	breq	.+24     	; 0x3108 <__fp_cmp+0x46>
    30f0:	23 2b       	or	r18, r19
    30f2:	24 2b       	or	r18, r20
    30f4:	25 2b       	or	r18, r21
    30f6:	21 f4       	brne	.+8      	; 0x3100 <__fp_cmp+0x3e>
    30f8:	08 95       	ret
    30fa:	0a 26       	eor	r0, r26
    30fc:	09 f4       	brne	.+2      	; 0x3100 <__fp_cmp+0x3e>
    30fe:	a1 40       	sbci	r26, 0x01	; 1
    3100:	a6 95       	lsr	r26
    3102:	8f ef       	ldi	r24, 0xFF	; 255
    3104:	81 1d       	adc	r24, r1
    3106:	81 1d       	adc	r24, r1
    3108:	08 95       	ret

0000310a <__fp_inf>:
    310a:	97 f9       	bld	r25, 7
    310c:	9f 67       	ori	r25, 0x7F	; 127
    310e:	80 e8       	ldi	r24, 0x80	; 128
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	08 95       	ret

00003116 <__fp_nan>:
    3116:	9f ef       	ldi	r25, 0xFF	; 255
    3118:	80 ec       	ldi	r24, 0xC0	; 192
    311a:	08 95       	ret

0000311c <__fp_negdi>:
    311c:	90 95       	com	r25
    311e:	80 95       	com	r24
    3120:	70 95       	com	r23
    3122:	60 95       	com	r22
    3124:	50 95       	com	r21
    3126:	40 95       	com	r20
    3128:	30 95       	com	r19
    312a:	21 95       	neg	r18
    312c:	3f 4f       	sbci	r19, 0xFF	; 255
    312e:	4f 4f       	sbci	r20, 0xFF	; 255
    3130:	5f 4f       	sbci	r21, 0xFF	; 255
    3132:	6f 4f       	sbci	r22, 0xFF	; 255
    3134:	7f 4f       	sbci	r23, 0xFF	; 255
    3136:	8f 4f       	sbci	r24, 0xFF	; 255
    3138:	9f 4f       	sbci	r25, 0xFF	; 255
    313a:	08 95       	ret

0000313c <__fp_powser>:
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	1f 93       	push	r17
    3142:	0f 93       	push	r16
    3144:	ff 92       	push	r15
    3146:	ef 92       	push	r14
    3148:	df 92       	push	r13
    314a:	7b 01       	movw	r14, r22
    314c:	8c 01       	movw	r16, r24
    314e:	68 94       	set
    3150:	05 c0       	rjmp	.+10     	; 0x315c <__fp_powser+0x20>
    3152:	da 2e       	mov	r13, r26
    3154:	ef 01       	movw	r28, r30
    3156:	76 d0       	rcall	.+236    	; 0x3244 <__mulsf3x>
    3158:	fe 01       	movw	r30, r28
    315a:	e8 94       	clt
    315c:	a5 91       	lpm	r26, Z+
    315e:	25 91       	lpm	r18, Z+
    3160:	35 91       	lpm	r19, Z+
    3162:	45 91       	lpm	r20, Z+
    3164:	55 91       	lpm	r21, Z+
    3166:	ae f3       	brts	.-22     	; 0x3152 <__fp_powser+0x16>
    3168:	ef 01       	movw	r28, r30
    316a:	44 de       	rcall	.-888    	; 0x2df4 <__addsf3x>
    316c:	fe 01       	movw	r30, r28
    316e:	97 01       	movw	r18, r14
    3170:	a8 01       	movw	r20, r16
    3172:	da 94       	dec	r13
    3174:	79 f7       	brne	.-34     	; 0x3154 <__fp_powser+0x18>
    3176:	df 90       	pop	r13
    3178:	ef 90       	pop	r14
    317a:	ff 90       	pop	r15
    317c:	0f 91       	pop	r16
    317e:	1f 91       	pop	r17
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <__fp_pscA>:
    3186:	00 24       	eor	r0, r0
    3188:	0a 94       	dec	r0
    318a:	16 16       	cp	r1, r22
    318c:	17 06       	cpc	r1, r23
    318e:	18 06       	cpc	r1, r24
    3190:	09 06       	cpc	r0, r25
    3192:	08 95       	ret

00003194 <__fp_pscB>:
    3194:	00 24       	eor	r0, r0
    3196:	0a 94       	dec	r0
    3198:	12 16       	cp	r1, r18
    319a:	13 06       	cpc	r1, r19
    319c:	14 06       	cpc	r1, r20
    319e:	05 06       	cpc	r0, r21
    31a0:	08 95       	ret

000031a2 <__fp_round>:
    31a2:	09 2e       	mov	r0, r25
    31a4:	03 94       	inc	r0
    31a6:	00 0c       	add	r0, r0
    31a8:	11 f4       	brne	.+4      	; 0x31ae <__fp_round+0xc>
    31aa:	88 23       	and	r24, r24
    31ac:	52 f0       	brmi	.+20     	; 0x31c2 <__fp_round+0x20>
    31ae:	bb 0f       	add	r27, r27
    31b0:	40 f4       	brcc	.+16     	; 0x31c2 <__fp_round+0x20>
    31b2:	bf 2b       	or	r27, r31
    31b4:	11 f4       	brne	.+4      	; 0x31ba <__fp_round+0x18>
    31b6:	60 ff       	sbrs	r22, 0
    31b8:	04 c0       	rjmp	.+8      	; 0x31c2 <__fp_round+0x20>
    31ba:	6f 5f       	subi	r22, 0xFF	; 255
    31bc:	7f 4f       	sbci	r23, 0xFF	; 255
    31be:	8f 4f       	sbci	r24, 0xFF	; 255
    31c0:	9f 4f       	sbci	r25, 0xFF	; 255
    31c2:	08 95       	ret

000031c4 <__fp_split3>:
    31c4:	57 fd       	sbrc	r21, 7
    31c6:	90 58       	subi	r25, 0x80	; 128
    31c8:	44 0f       	add	r20, r20
    31ca:	55 1f       	adc	r21, r21
    31cc:	59 f0       	breq	.+22     	; 0x31e4 <__fp_splitA+0x10>
    31ce:	5f 3f       	cpi	r21, 0xFF	; 255
    31d0:	71 f0       	breq	.+28     	; 0x31ee <__fp_splitA+0x1a>
    31d2:	47 95       	ror	r20

000031d4 <__fp_splitA>:
    31d4:	88 0f       	add	r24, r24
    31d6:	97 fb       	bst	r25, 7
    31d8:	99 1f       	adc	r25, r25
    31da:	61 f0       	breq	.+24     	; 0x31f4 <__fp_splitA+0x20>
    31dc:	9f 3f       	cpi	r25, 0xFF	; 255
    31de:	79 f0       	breq	.+30     	; 0x31fe <__fp_splitA+0x2a>
    31e0:	87 95       	ror	r24
    31e2:	08 95       	ret
    31e4:	12 16       	cp	r1, r18
    31e6:	13 06       	cpc	r1, r19
    31e8:	14 06       	cpc	r1, r20
    31ea:	55 1f       	adc	r21, r21
    31ec:	f2 cf       	rjmp	.-28     	; 0x31d2 <__fp_split3+0xe>
    31ee:	46 95       	lsr	r20
    31f0:	f1 df       	rcall	.-30     	; 0x31d4 <__fp_splitA>
    31f2:	08 c0       	rjmp	.+16     	; 0x3204 <__fp_splitA+0x30>
    31f4:	16 16       	cp	r1, r22
    31f6:	17 06       	cpc	r1, r23
    31f8:	18 06       	cpc	r1, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	f1 cf       	rjmp	.-30     	; 0x31e0 <__fp_splitA+0xc>
    31fe:	86 95       	lsr	r24
    3200:	71 05       	cpc	r23, r1
    3202:	61 05       	cpc	r22, r1
    3204:	08 94       	sec
    3206:	08 95       	ret

00003208 <__fp_zero>:
    3208:	e8 94       	clt

0000320a <__fp_szero>:
    320a:	bb 27       	eor	r27, r27
    320c:	66 27       	eor	r22, r22
    320e:	77 27       	eor	r23, r23
    3210:	cb 01       	movw	r24, r22
    3212:	97 f9       	bld	r25, 7
    3214:	08 95       	ret

00003216 <__gesf2>:
    3216:	55 df       	rcall	.-342    	; 0x30c2 <__fp_cmp>
    3218:	08 f4       	brcc	.+2      	; 0x321c <__gesf2+0x6>
    321a:	8f ef       	ldi	r24, 0xFF	; 255
    321c:	08 95       	ret

0000321e <inverse>:
    321e:	9b 01       	movw	r18, r22
    3220:	ac 01       	movw	r20, r24
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	80 e8       	ldi	r24, 0x80	; 128
    3228:	9f e3       	ldi	r25, 0x3F	; 63
    322a:	3b ce       	rjmp	.-906    	; 0x2ea2 <__divsf3>

0000322c <__mulsf3>:
    322c:	0b d0       	rcall	.+22     	; 0x3244 <__mulsf3x>
    322e:	b9 cf       	rjmp	.-142    	; 0x31a2 <__fp_round>
    3230:	aa df       	rcall	.-172    	; 0x3186 <__fp_pscA>
    3232:	28 f0       	brcs	.+10     	; 0x323e <__mulsf3+0x12>
    3234:	af df       	rcall	.-162    	; 0x3194 <__fp_pscB>
    3236:	18 f0       	brcs	.+6      	; 0x323e <__mulsf3+0x12>
    3238:	95 23       	and	r25, r21
    323a:	09 f0       	breq	.+2      	; 0x323e <__mulsf3+0x12>
    323c:	66 cf       	rjmp	.-308    	; 0x310a <__fp_inf>
    323e:	6b cf       	rjmp	.-298    	; 0x3116 <__fp_nan>
    3240:	11 24       	eor	r1, r1
    3242:	e3 cf       	rjmp	.-58     	; 0x320a <__fp_szero>

00003244 <__mulsf3x>:
    3244:	bf df       	rcall	.-130    	; 0x31c4 <__fp_split3>
    3246:	a0 f3       	brcs	.-24     	; 0x3230 <__mulsf3+0x4>

00003248 <__mulsf3_pse>:
    3248:	95 9f       	mul	r25, r21
    324a:	d1 f3       	breq	.-12     	; 0x3240 <__mulsf3+0x14>
    324c:	95 0f       	add	r25, r21
    324e:	50 e0       	ldi	r21, 0x00	; 0
    3250:	55 1f       	adc	r21, r21
    3252:	62 9f       	mul	r22, r18
    3254:	f0 01       	movw	r30, r0
    3256:	72 9f       	mul	r23, r18
    3258:	bb 27       	eor	r27, r27
    325a:	f0 0d       	add	r31, r0
    325c:	b1 1d       	adc	r27, r1
    325e:	63 9f       	mul	r22, r19
    3260:	aa 27       	eor	r26, r26
    3262:	f0 0d       	add	r31, r0
    3264:	b1 1d       	adc	r27, r1
    3266:	aa 1f       	adc	r26, r26
    3268:	64 9f       	mul	r22, r20
    326a:	66 27       	eor	r22, r22
    326c:	b0 0d       	add	r27, r0
    326e:	a1 1d       	adc	r26, r1
    3270:	66 1f       	adc	r22, r22
    3272:	82 9f       	mul	r24, r18
    3274:	22 27       	eor	r18, r18
    3276:	b0 0d       	add	r27, r0
    3278:	a1 1d       	adc	r26, r1
    327a:	62 1f       	adc	r22, r18
    327c:	73 9f       	mul	r23, r19
    327e:	b0 0d       	add	r27, r0
    3280:	a1 1d       	adc	r26, r1
    3282:	62 1f       	adc	r22, r18
    3284:	83 9f       	mul	r24, r19
    3286:	a0 0d       	add	r26, r0
    3288:	61 1d       	adc	r22, r1
    328a:	22 1f       	adc	r18, r18
    328c:	74 9f       	mul	r23, r20
    328e:	33 27       	eor	r19, r19
    3290:	a0 0d       	add	r26, r0
    3292:	61 1d       	adc	r22, r1
    3294:	23 1f       	adc	r18, r19
    3296:	84 9f       	mul	r24, r20
    3298:	60 0d       	add	r22, r0
    329a:	21 1d       	adc	r18, r1
    329c:	82 2f       	mov	r24, r18
    329e:	76 2f       	mov	r23, r22
    32a0:	6a 2f       	mov	r22, r26
    32a2:	11 24       	eor	r1, r1
    32a4:	9f 57       	subi	r25, 0x7F	; 127
    32a6:	50 40       	sbci	r21, 0x00	; 0
    32a8:	8a f0       	brmi	.+34     	; 0x32cc <__mulsf3_pse+0x84>
    32aa:	e1 f0       	breq	.+56     	; 0x32e4 <__mulsf3_pse+0x9c>
    32ac:	88 23       	and	r24, r24
    32ae:	4a f0       	brmi	.+18     	; 0x32c2 <__mulsf3_pse+0x7a>
    32b0:	ee 0f       	add	r30, r30
    32b2:	ff 1f       	adc	r31, r31
    32b4:	bb 1f       	adc	r27, r27
    32b6:	66 1f       	adc	r22, r22
    32b8:	77 1f       	adc	r23, r23
    32ba:	88 1f       	adc	r24, r24
    32bc:	91 50       	subi	r25, 0x01	; 1
    32be:	50 40       	sbci	r21, 0x00	; 0
    32c0:	a9 f7       	brne	.-22     	; 0x32ac <__mulsf3_pse+0x64>
    32c2:	9e 3f       	cpi	r25, 0xFE	; 254
    32c4:	51 05       	cpc	r21, r1
    32c6:	70 f0       	brcs	.+28     	; 0x32e4 <__mulsf3_pse+0x9c>
    32c8:	20 cf       	rjmp	.-448    	; 0x310a <__fp_inf>
    32ca:	9f cf       	rjmp	.-194    	; 0x320a <__fp_szero>
    32cc:	5f 3f       	cpi	r21, 0xFF	; 255
    32ce:	ec f3       	brlt	.-6      	; 0x32ca <__mulsf3_pse+0x82>
    32d0:	98 3e       	cpi	r25, 0xE8	; 232
    32d2:	dc f3       	brlt	.-10     	; 0x32ca <__mulsf3_pse+0x82>
    32d4:	86 95       	lsr	r24
    32d6:	77 95       	ror	r23
    32d8:	67 95       	ror	r22
    32da:	b7 95       	ror	r27
    32dc:	f7 95       	ror	r31
    32de:	e7 95       	ror	r30
    32e0:	9f 5f       	subi	r25, 0xFF	; 255
    32e2:	c1 f7       	brne	.-16     	; 0x32d4 <__mulsf3_pse+0x8c>
    32e4:	fe 2b       	or	r31, r30
    32e6:	88 0f       	add	r24, r24
    32e8:	91 1d       	adc	r25, r1
    32ea:	96 95       	lsr	r25
    32ec:	87 95       	ror	r24
    32ee:	97 f9       	bld	r25, 7
    32f0:	08 95       	ret

000032f2 <pow>:
    32f2:	fa 01       	movw	r30, r20
    32f4:	ee 0f       	add	r30, r30
    32f6:	ff 1f       	adc	r31, r31
    32f8:	30 96       	adiw	r30, 0x00	; 0
    32fa:	21 05       	cpc	r18, r1
    32fc:	31 05       	cpc	r19, r1
    32fe:	99 f1       	breq	.+102    	; 0x3366 <pow+0x74>
    3300:	61 15       	cp	r22, r1
    3302:	71 05       	cpc	r23, r1
    3304:	61 f4       	brne	.+24     	; 0x331e <pow+0x2c>
    3306:	80 38       	cpi	r24, 0x80	; 128
    3308:	bf e3       	ldi	r27, 0x3F	; 63
    330a:	9b 07       	cpc	r25, r27
    330c:	49 f1       	breq	.+82     	; 0x3360 <pow+0x6e>
    330e:	68 94       	set
    3310:	90 38       	cpi	r25, 0x80	; 128
    3312:	81 05       	cpc	r24, r1
    3314:	61 f0       	breq	.+24     	; 0x332e <pow+0x3c>
    3316:	80 38       	cpi	r24, 0x80	; 128
    3318:	bf ef       	ldi	r27, 0xFF	; 255
    331a:	9b 07       	cpc	r25, r27
    331c:	41 f0       	breq	.+16     	; 0x332e <pow+0x3c>
    331e:	99 23       	and	r25, r25
    3320:	42 f5       	brpl	.+80     	; 0x3372 <pow+0x80>
    3322:	ff 3f       	cpi	r31, 0xFF	; 255
    3324:	e1 05       	cpc	r30, r1
    3326:	31 05       	cpc	r19, r1
    3328:	21 05       	cpc	r18, r1
    332a:	11 f1       	breq	.+68     	; 0x3370 <pow+0x7e>
    332c:	e8 94       	clt
    332e:	08 94       	sec
    3330:	e7 95       	ror	r30
    3332:	d9 01       	movw	r26, r18
    3334:	aa 23       	and	r26, r26
    3336:	29 f4       	brne	.+10     	; 0x3342 <pow+0x50>
    3338:	ab 2f       	mov	r26, r27
    333a:	be 2f       	mov	r27, r30
    333c:	f8 5f       	subi	r31, 0xF8	; 248
    333e:	d0 f3       	brcs	.-12     	; 0x3334 <pow+0x42>
    3340:	10 c0       	rjmp	.+32     	; 0x3362 <pow+0x70>
    3342:	ff 5f       	subi	r31, 0xFF	; 255
    3344:	70 f4       	brcc	.+28     	; 0x3362 <pow+0x70>
    3346:	a6 95       	lsr	r26
    3348:	e0 f7       	brcc	.-8      	; 0x3342 <pow+0x50>
    334a:	f7 39       	cpi	r31, 0x97	; 151
    334c:	50 f0       	brcs	.+20     	; 0x3362 <pow+0x70>
    334e:	19 f0       	breq	.+6      	; 0x3356 <pow+0x64>
    3350:	ff 3a       	cpi	r31, 0xAF	; 175
    3352:	38 f4       	brcc	.+14     	; 0x3362 <pow+0x70>
    3354:	9f 77       	andi	r25, 0x7F	; 127
    3356:	9f 93       	push	r25
    3358:	0c d0       	rcall	.+24     	; 0x3372 <pow+0x80>
    335a:	0f 90       	pop	r0
    335c:	07 fc       	sbrc	r0, 7
    335e:	90 58       	subi	r25, 0x80	; 128
    3360:	08 95       	ret
    3362:	3e f0       	brts	.+14     	; 0x3372 <pow+0x80>
    3364:	d8 ce       	rjmp	.-592    	; 0x3116 <__fp_nan>
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	70 e0       	ldi	r23, 0x00	; 0
    336a:	80 e8       	ldi	r24, 0x80	; 128
    336c:	9f e3       	ldi	r25, 0x3F	; 63
    336e:	08 95       	ret
    3370:	4f e7       	ldi	r20, 0x7F	; 127
    3372:	9f 77       	andi	r25, 0x7F	; 127
    3374:	5f 93       	push	r21
    3376:	4f 93       	push	r20
    3378:	3f 93       	push	r19
    337a:	2f 93       	push	r18
    337c:	80 d0       	rcall	.+256    	; 0x347e <log>
    337e:	2f 91       	pop	r18
    3380:	3f 91       	pop	r19
    3382:	4f 91       	pop	r20
    3384:	5f 91       	pop	r21
    3386:	52 df       	rcall	.-348    	; 0x322c <__mulsf3>
    3388:	05 c0       	rjmp	.+10     	; 0x3394 <exp>
    338a:	19 f4       	brne	.+6      	; 0x3392 <pow+0xa0>
    338c:	0e f0       	brts	.+2      	; 0x3390 <pow+0x9e>
    338e:	bd ce       	rjmp	.-646    	; 0x310a <__fp_inf>
    3390:	3b cf       	rjmp	.-394    	; 0x3208 <__fp_zero>
    3392:	c1 ce       	rjmp	.-638    	; 0x3116 <__fp_nan>

00003394 <exp>:
    3394:	1f df       	rcall	.-450    	; 0x31d4 <__fp_splitA>
    3396:	c8 f3       	brcs	.-14     	; 0x338a <pow+0x98>
    3398:	96 38       	cpi	r25, 0x86	; 134
    339a:	c0 f7       	brcc	.-16     	; 0x338c <pow+0x9a>
    339c:	07 f8       	bld	r0, 7
    339e:	0f 92       	push	r0
    33a0:	e8 94       	clt
    33a2:	2b e3       	ldi	r18, 0x3B	; 59
    33a4:	3a ea       	ldi	r19, 0xAA	; 170
    33a6:	48 eb       	ldi	r20, 0xB8	; 184
    33a8:	5f e7       	ldi	r21, 0x7F	; 127
    33aa:	4e df       	rcall	.-356    	; 0x3248 <__mulsf3_pse>
    33ac:	0f 92       	push	r0
    33ae:	0f 92       	push	r0
    33b0:	0f 92       	push	r0
    33b2:	4d b7       	in	r20, 0x3d	; 61
    33b4:	5e b7       	in	r21, 0x3e	; 62
    33b6:	0f 92       	push	r0
    33b8:	a2 d0       	rcall	.+324    	; 0x34fe <modf>
    33ba:	ec ef       	ldi	r30, 0xFC	; 252
    33bc:	f1 e0       	ldi	r31, 0x01	; 1
    33be:	be de       	rcall	.-644    	; 0x313c <__fp_powser>
    33c0:	4f 91       	pop	r20
    33c2:	5f 91       	pop	r21
    33c4:	ef 91       	pop	r30
    33c6:	ff 91       	pop	r31
    33c8:	e5 95       	asr	r30
    33ca:	ee 1f       	adc	r30, r30
    33cc:	ff 1f       	adc	r31, r31
    33ce:	49 f0       	breq	.+18     	; 0x33e2 <exp+0x4e>
    33d0:	fe 57       	subi	r31, 0x7E	; 126
    33d2:	e0 68       	ori	r30, 0x80	; 128
    33d4:	44 27       	eor	r20, r20
    33d6:	ee 0f       	add	r30, r30
    33d8:	44 1f       	adc	r20, r20
    33da:	fa 95       	dec	r31
    33dc:	e1 f7       	brne	.-8      	; 0x33d6 <exp+0x42>
    33de:	41 95       	neg	r20
    33e0:	55 0b       	sbc	r21, r21
    33e2:	14 d0       	rcall	.+40     	; 0x340c <ldexp>
    33e4:	0f 90       	pop	r0
    33e6:	07 fe       	sbrs	r0, 7
    33e8:	1a cf       	rjmp	.-460    	; 0x321e <inverse>
    33ea:	08 95       	ret

000033ec <__fp_mpack>:
    33ec:	9f 3f       	cpi	r25, 0xFF	; 255
    33ee:	31 f0       	breq	.+12     	; 0x33fc <__fp_mpack_finite+0xc>

000033f0 <__fp_mpack_finite>:
    33f0:	91 50       	subi	r25, 0x01	; 1
    33f2:	20 f4       	brcc	.+8      	; 0x33fc <__fp_mpack_finite+0xc>
    33f4:	87 95       	ror	r24
    33f6:	77 95       	ror	r23
    33f8:	67 95       	ror	r22
    33fa:	b7 95       	ror	r27
    33fc:	88 0f       	add	r24, r24
    33fe:	91 1d       	adc	r25, r1
    3400:	96 95       	lsr	r25
    3402:	87 95       	ror	r24
    3404:	97 f9       	bld	r25, 7
    3406:	08 95       	ret
    3408:	80 ce       	rjmp	.-768    	; 0x310a <__fp_inf>
    340a:	f0 cf       	rjmp	.-32     	; 0x33ec <__fp_mpack>

0000340c <ldexp>:
    340c:	e3 de       	rcall	.-570    	; 0x31d4 <__fp_splitA>
    340e:	e8 f3       	brcs	.-6      	; 0x340a <__fp_mpack_finite+0x1a>
    3410:	99 23       	and	r25, r25
    3412:	d9 f3       	breq	.-10     	; 0x340a <__fp_mpack_finite+0x1a>
    3414:	94 0f       	add	r25, r20
    3416:	51 1d       	adc	r21, r1
    3418:	bb f3       	brvs	.-18     	; 0x3408 <__fp_mpack_finite+0x18>
    341a:	91 50       	subi	r25, 0x01	; 1
    341c:	50 40       	sbci	r21, 0x00	; 0
    341e:	94 f0       	brlt	.+36     	; 0x3444 <ldexp+0x38>
    3420:	59 f0       	breq	.+22     	; 0x3438 <ldexp+0x2c>
    3422:	88 23       	and	r24, r24
    3424:	32 f0       	brmi	.+12     	; 0x3432 <ldexp+0x26>
    3426:	66 0f       	add	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	88 1f       	adc	r24, r24
    342c:	91 50       	subi	r25, 0x01	; 1
    342e:	50 40       	sbci	r21, 0x00	; 0
    3430:	c1 f7       	brne	.-16     	; 0x3422 <ldexp+0x16>
    3432:	9e 3f       	cpi	r25, 0xFE	; 254
    3434:	51 05       	cpc	r21, r1
    3436:	44 f7       	brge	.-48     	; 0x3408 <__fp_mpack_finite+0x18>
    3438:	88 0f       	add	r24, r24
    343a:	91 1d       	adc	r25, r1
    343c:	96 95       	lsr	r25
    343e:	87 95       	ror	r24
    3440:	97 f9       	bld	r25, 7
    3442:	08 95       	ret
    3444:	5f 3f       	cpi	r21, 0xFF	; 255
    3446:	ac f0       	brlt	.+42     	; 0x3472 <ldexp+0x66>
    3448:	98 3e       	cpi	r25, 0xE8	; 232
    344a:	9c f0       	brlt	.+38     	; 0x3472 <ldexp+0x66>
    344c:	bb 27       	eor	r27, r27
    344e:	86 95       	lsr	r24
    3450:	77 95       	ror	r23
    3452:	67 95       	ror	r22
    3454:	b7 95       	ror	r27
    3456:	08 f4       	brcc	.+2      	; 0x345a <ldexp+0x4e>
    3458:	b1 60       	ori	r27, 0x01	; 1
    345a:	93 95       	inc	r25
    345c:	c1 f7       	brne	.-16     	; 0x344e <ldexp+0x42>
    345e:	bb 0f       	add	r27, r27
    3460:	58 f7       	brcc	.-42     	; 0x3438 <ldexp+0x2c>
    3462:	11 f4       	brne	.+4      	; 0x3468 <ldexp+0x5c>
    3464:	60 ff       	sbrs	r22, 0
    3466:	e8 cf       	rjmp	.-48     	; 0x3438 <ldexp+0x2c>
    3468:	6f 5f       	subi	r22, 0xFF	; 255
    346a:	7f 4f       	sbci	r23, 0xFF	; 255
    346c:	8f 4f       	sbci	r24, 0xFF	; 255
    346e:	9f 4f       	sbci	r25, 0xFF	; 255
    3470:	e3 cf       	rjmp	.-58     	; 0x3438 <ldexp+0x2c>
    3472:	cb ce       	rjmp	.-618    	; 0x320a <__fp_szero>
    3474:	0e f0       	brts	.+2      	; 0x3478 <ldexp+0x6c>
    3476:	ba cf       	rjmp	.-140    	; 0x33ec <__fp_mpack>
    3478:	4e ce       	rjmp	.-868    	; 0x3116 <__fp_nan>
    347a:	68 94       	set
    347c:	46 ce       	rjmp	.-884    	; 0x310a <__fp_inf>

0000347e <log>:
    347e:	aa de       	rcall	.-684    	; 0x31d4 <__fp_splitA>
    3480:	c8 f3       	brcs	.-14     	; 0x3474 <ldexp+0x68>
    3482:	99 23       	and	r25, r25
    3484:	d1 f3       	breq	.-12     	; 0x347a <ldexp+0x6e>
    3486:	c6 f3       	brts	.-16     	; 0x3478 <ldexp+0x6c>
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	1f 93       	push	r17
    348e:	0f 93       	push	r16
    3490:	ff 92       	push	r15
    3492:	c9 2f       	mov	r28, r25
    3494:	dd 27       	eor	r29, r29
    3496:	88 23       	and	r24, r24
    3498:	2a f0       	brmi	.+10     	; 0x34a4 <log+0x26>
    349a:	21 97       	sbiw	r28, 0x01	; 1
    349c:	66 0f       	add	r22, r22
    349e:	77 1f       	adc	r23, r23
    34a0:	88 1f       	adc	r24, r24
    34a2:	da f7       	brpl	.-10     	; 0x349a <log+0x1c>
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e8       	ldi	r20, 0x80	; 128
    34aa:	5f eb       	ldi	r21, 0xBF	; 191
    34ac:	9f e3       	ldi	r25, 0x3F	; 63
    34ae:	88 39       	cpi	r24, 0x98	; 152
    34b0:	20 f0       	brcs	.+8      	; 0x34ba <log+0x3c>
    34b2:	80 3e       	cpi	r24, 0xE0	; 224
    34b4:	30 f0       	brcs	.+12     	; 0x34c2 <log+0x44>
    34b6:	21 96       	adiw	r28, 0x01	; 1
    34b8:	8f 77       	andi	r24, 0x7F	; 127
    34ba:	8b dc       	rcall	.-1770   	; 0x2dd2 <__addsf3>
    34bc:	e4 e2       	ldi	r30, 0x24	; 36
    34be:	f2 e0       	ldi	r31, 0x02	; 2
    34c0:	03 c0       	rjmp	.+6      	; 0x34c8 <log+0x4a>
    34c2:	87 dc       	rcall	.-1778   	; 0x2dd2 <__addsf3>
    34c4:	e1 e5       	ldi	r30, 0x51	; 81
    34c6:	f2 e0       	ldi	r31, 0x02	; 2
    34c8:	39 de       	rcall	.-910    	; 0x313c <__fp_powser>
    34ca:	8b 01       	movw	r16, r22
    34cc:	be 01       	movw	r22, r28
    34ce:	ec 01       	movw	r28, r24
    34d0:	fb 2e       	mov	r15, r27
    34d2:	6f 57       	subi	r22, 0x7F	; 127
    34d4:	71 09       	sbc	r23, r1
    34d6:	75 95       	asr	r23
    34d8:	77 1f       	adc	r23, r23
    34da:	88 0b       	sbc	r24, r24
    34dc:	99 0b       	sbc	r25, r25
    34de:	b6 dd       	rcall	.-1172   	; 0x304c <__floatsisf>
    34e0:	28 e1       	ldi	r18, 0x18	; 24
    34e2:	32 e7       	ldi	r19, 0x72	; 114
    34e4:	41 e3       	ldi	r20, 0x31	; 49
    34e6:	5f e3       	ldi	r21, 0x3F	; 63
    34e8:	ad de       	rcall	.-678    	; 0x3244 <__mulsf3x>
    34ea:	af 2d       	mov	r26, r15
    34ec:	98 01       	movw	r18, r16
    34ee:	ae 01       	movw	r20, r28
    34f0:	ff 90       	pop	r15
    34f2:	0f 91       	pop	r16
    34f4:	1f 91       	pop	r17
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	7c dc       	rcall	.-1800   	; 0x2df4 <__addsf3x>
    34fc:	52 ce       	rjmp	.-860    	; 0x31a2 <__fp_round>

000034fe <modf>:
    34fe:	fa 01       	movw	r30, r20
    3500:	dc 01       	movw	r26, r24
    3502:	aa 0f       	add	r26, r26
    3504:	bb 1f       	adc	r27, r27
    3506:	9b 01       	movw	r18, r22
    3508:	ac 01       	movw	r20, r24
    350a:	bf 57       	subi	r27, 0x7F	; 127
    350c:	28 f4       	brcc	.+10     	; 0x3518 <modf+0x1a>
    350e:	22 27       	eor	r18, r18
    3510:	33 27       	eor	r19, r19
    3512:	44 27       	eor	r20, r20
    3514:	50 78       	andi	r21, 0x80	; 128
    3516:	1f c0       	rjmp	.+62     	; 0x3556 <modf+0x58>
    3518:	b7 51       	subi	r27, 0x17	; 23
    351a:	88 f4       	brcc	.+34     	; 0x353e <modf+0x40>
    351c:	ab 2f       	mov	r26, r27
    351e:	00 24       	eor	r0, r0
    3520:	46 95       	lsr	r20
    3522:	37 95       	ror	r19
    3524:	27 95       	ror	r18
    3526:	01 1c       	adc	r0, r1
    3528:	a3 95       	inc	r26
    352a:	d2 f3       	brmi	.-12     	; 0x3520 <modf+0x22>
    352c:	00 20       	and	r0, r0
    352e:	69 f0       	breq	.+26     	; 0x354a <modf+0x4c>
    3530:	22 0f       	add	r18, r18
    3532:	33 1f       	adc	r19, r19
    3534:	44 1f       	adc	r20, r20
    3536:	b3 95       	inc	r27
    3538:	da f3       	brmi	.-10     	; 0x3530 <modf+0x32>
    353a:	0d d0       	rcall	.+26     	; 0x3556 <modf+0x58>
    353c:	49 cc       	rjmp	.-1902   	; 0x2dd0 <__subsf3>
    353e:	61 30       	cpi	r22, 0x01	; 1
    3540:	71 05       	cpc	r23, r1
    3542:	a0 e8       	ldi	r26, 0x80	; 128
    3544:	8a 07       	cpc	r24, r26
    3546:	b9 46       	sbci	r27, 0x69	; 105
    3548:	30 f4       	brcc	.+12     	; 0x3556 <modf+0x58>
    354a:	9b 01       	movw	r18, r22
    354c:	ac 01       	movw	r20, r24
    354e:	66 27       	eor	r22, r22
    3550:	77 27       	eor	r23, r23
    3552:	88 27       	eor	r24, r24
    3554:	90 78       	andi	r25, 0x80	; 128
    3556:	30 96       	adiw	r30, 0x00	; 0
    3558:	21 f0       	breq	.+8      	; 0x3562 <modf+0x64>
    355a:	20 83       	st	Z, r18
    355c:	31 83       	std	Z+1, r19	; 0x01
    355e:	42 83       	std	Z+2, r20	; 0x02
    3560:	53 83       	std	Z+3, r21	; 0x03
    3562:	08 95       	ret

00003564 <__mulsi3>:
    3564:	db 01       	movw	r26, r22
    3566:	8f 93       	push	r24
    3568:	9f 93       	push	r25
    356a:	70 d0       	rcall	.+224    	; 0x364c <__muluhisi3>
    356c:	bf 91       	pop	r27
    356e:	af 91       	pop	r26
    3570:	a2 9f       	mul	r26, r18
    3572:	80 0d       	add	r24, r0
    3574:	91 1d       	adc	r25, r1
    3576:	a3 9f       	mul	r26, r19
    3578:	90 0d       	add	r25, r0
    357a:	b2 9f       	mul	r27, r18
    357c:	90 0d       	add	r25, r0
    357e:	11 24       	eor	r1, r1
    3580:	08 95       	ret

00003582 <__udivmodhi4>:
    3582:	aa 1b       	sub	r26, r26
    3584:	bb 1b       	sub	r27, r27
    3586:	51 e1       	ldi	r21, 0x11	; 17
    3588:	07 c0       	rjmp	.+14     	; 0x3598 <__udivmodhi4_ep>

0000358a <__udivmodhi4_loop>:
    358a:	aa 1f       	adc	r26, r26
    358c:	bb 1f       	adc	r27, r27
    358e:	a6 17       	cp	r26, r22
    3590:	b7 07       	cpc	r27, r23
    3592:	10 f0       	brcs	.+4      	; 0x3598 <__udivmodhi4_ep>
    3594:	a6 1b       	sub	r26, r22
    3596:	b7 0b       	sbc	r27, r23

00003598 <__udivmodhi4_ep>:
    3598:	88 1f       	adc	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	5a 95       	dec	r21
    359e:	a9 f7       	brne	.-22     	; 0x358a <__udivmodhi4_loop>
    35a0:	80 95       	com	r24
    35a2:	90 95       	com	r25
    35a4:	bc 01       	movw	r22, r24
    35a6:	cd 01       	movw	r24, r26
    35a8:	08 95       	ret

000035aa <__divmodhi4>:
    35aa:	97 fb       	bst	r25, 7
    35ac:	07 2e       	mov	r0, r23
    35ae:	16 f4       	brtc	.+4      	; 0x35b4 <__divmodhi4+0xa>
    35b0:	00 94       	com	r0
    35b2:	06 d0       	rcall	.+12     	; 0x35c0 <__divmodhi4_neg1>
    35b4:	77 fd       	sbrc	r23, 7
    35b6:	08 d0       	rcall	.+16     	; 0x35c8 <__divmodhi4_neg2>
    35b8:	e4 df       	rcall	.-56     	; 0x3582 <__udivmodhi4>
    35ba:	07 fc       	sbrc	r0, 7
    35bc:	05 d0       	rcall	.+10     	; 0x35c8 <__divmodhi4_neg2>
    35be:	3e f4       	brtc	.+14     	; 0x35ce <__divmodhi4_exit>

000035c0 <__divmodhi4_neg1>:
    35c0:	90 95       	com	r25
    35c2:	81 95       	neg	r24
    35c4:	9f 4f       	sbci	r25, 0xFF	; 255
    35c6:	08 95       	ret

000035c8 <__divmodhi4_neg2>:
    35c8:	70 95       	com	r23
    35ca:	61 95       	neg	r22
    35cc:	7f 4f       	sbci	r23, 0xFF	; 255

000035ce <__divmodhi4_exit>:
    35ce:	08 95       	ret

000035d0 <__udivmodsi4>:
    35d0:	a1 e2       	ldi	r26, 0x21	; 33
    35d2:	1a 2e       	mov	r1, r26
    35d4:	aa 1b       	sub	r26, r26
    35d6:	bb 1b       	sub	r27, r27
    35d8:	fd 01       	movw	r30, r26
    35da:	0d c0       	rjmp	.+26     	; 0x35f6 <__udivmodsi4_ep>

000035dc <__udivmodsi4_loop>:
    35dc:	aa 1f       	adc	r26, r26
    35de:	bb 1f       	adc	r27, r27
    35e0:	ee 1f       	adc	r30, r30
    35e2:	ff 1f       	adc	r31, r31
    35e4:	a2 17       	cp	r26, r18
    35e6:	b3 07       	cpc	r27, r19
    35e8:	e4 07       	cpc	r30, r20
    35ea:	f5 07       	cpc	r31, r21
    35ec:	20 f0       	brcs	.+8      	; 0x35f6 <__udivmodsi4_ep>
    35ee:	a2 1b       	sub	r26, r18
    35f0:	b3 0b       	sbc	r27, r19
    35f2:	e4 0b       	sbc	r30, r20
    35f4:	f5 0b       	sbc	r31, r21

000035f6 <__udivmodsi4_ep>:
    35f6:	66 1f       	adc	r22, r22
    35f8:	77 1f       	adc	r23, r23
    35fa:	88 1f       	adc	r24, r24
    35fc:	99 1f       	adc	r25, r25
    35fe:	1a 94       	dec	r1
    3600:	69 f7       	brne	.-38     	; 0x35dc <__udivmodsi4_loop>
    3602:	60 95       	com	r22
    3604:	70 95       	com	r23
    3606:	80 95       	com	r24
    3608:	90 95       	com	r25
    360a:	9b 01       	movw	r18, r22
    360c:	ac 01       	movw	r20, r24
    360e:	bd 01       	movw	r22, r26
    3610:	cf 01       	movw	r24, r30
    3612:	08 95       	ret

00003614 <__divmodsi4>:
    3614:	05 2e       	mov	r0, r21
    3616:	97 fb       	bst	r25, 7
    3618:	16 f4       	brtc	.+4      	; 0x361e <__divmodsi4+0xa>
    361a:	00 94       	com	r0
    361c:	0f d0       	rcall	.+30     	; 0x363c <__negsi2>
    361e:	57 fd       	sbrc	r21, 7
    3620:	05 d0       	rcall	.+10     	; 0x362c <__divmodsi4_neg2>
    3622:	d6 df       	rcall	.-84     	; 0x35d0 <__udivmodsi4>
    3624:	07 fc       	sbrc	r0, 7
    3626:	02 d0       	rcall	.+4      	; 0x362c <__divmodsi4_neg2>
    3628:	46 f4       	brtc	.+16     	; 0x363a <__divmodsi4_exit>
    362a:	08 c0       	rjmp	.+16     	; 0x363c <__negsi2>

0000362c <__divmodsi4_neg2>:
    362c:	50 95       	com	r21
    362e:	40 95       	com	r20
    3630:	30 95       	com	r19
    3632:	21 95       	neg	r18
    3634:	3f 4f       	sbci	r19, 0xFF	; 255
    3636:	4f 4f       	sbci	r20, 0xFF	; 255
    3638:	5f 4f       	sbci	r21, 0xFF	; 255

0000363a <__divmodsi4_exit>:
    363a:	08 95       	ret

0000363c <__negsi2>:
    363c:	90 95       	com	r25
    363e:	80 95       	com	r24
    3640:	70 95       	com	r23
    3642:	61 95       	neg	r22
    3644:	7f 4f       	sbci	r23, 0xFF	; 255
    3646:	8f 4f       	sbci	r24, 0xFF	; 255
    3648:	9f 4f       	sbci	r25, 0xFF	; 255
    364a:	08 95       	ret

0000364c <__muluhisi3>:
    364c:	2d d0       	rcall	.+90     	; 0x36a8 <__umulhisi3>
    364e:	a5 9f       	mul	r26, r21
    3650:	90 0d       	add	r25, r0
    3652:	b4 9f       	mul	r27, r20
    3654:	90 0d       	add	r25, r0
    3656:	a4 9f       	mul	r26, r20
    3658:	80 0d       	add	r24, r0
    365a:	91 1d       	adc	r25, r1
    365c:	11 24       	eor	r1, r1
    365e:	08 95       	ret

00003660 <__mulshisi3>:
    3660:	b7 ff       	sbrs	r27, 7
    3662:	f4 cf       	rjmp	.-24     	; 0x364c <__muluhisi3>

00003664 <__mulohisi3>:
    3664:	f3 df       	rcall	.-26     	; 0x364c <__muluhisi3>
    3666:	82 1b       	sub	r24, r18
    3668:	93 0b       	sbc	r25, r19
    366a:	08 95       	ret

0000366c <__ashrdi3>:
    366c:	97 fb       	bst	r25, 7
    366e:	10 f8       	bld	r1, 0

00003670 <__lshrdi3>:
    3670:	16 94       	lsr	r1
    3672:	00 08       	sbc	r0, r0
    3674:	0f 93       	push	r16
    3676:	08 30       	cpi	r16, 0x08	; 8
    3678:	98 f0       	brcs	.+38     	; 0x36a0 <__lshrdi3+0x30>
    367a:	08 50       	subi	r16, 0x08	; 8
    367c:	23 2f       	mov	r18, r19
    367e:	34 2f       	mov	r19, r20
    3680:	45 2f       	mov	r20, r21
    3682:	56 2f       	mov	r21, r22
    3684:	67 2f       	mov	r22, r23
    3686:	78 2f       	mov	r23, r24
    3688:	89 2f       	mov	r24, r25
    368a:	90 2d       	mov	r25, r0
    368c:	f4 cf       	rjmp	.-24     	; 0x3676 <__lshrdi3+0x6>
    368e:	05 94       	asr	r0
    3690:	97 95       	ror	r25
    3692:	87 95       	ror	r24
    3694:	77 95       	ror	r23
    3696:	67 95       	ror	r22
    3698:	57 95       	ror	r21
    369a:	47 95       	ror	r20
    369c:	37 95       	ror	r19
    369e:	27 95       	ror	r18
    36a0:	0a 95       	dec	r16
    36a2:	aa f7       	brpl	.-22     	; 0x368e <__lshrdi3+0x1e>
    36a4:	0f 91       	pop	r16
    36a6:	08 95       	ret

000036a8 <__umulhisi3>:
    36a8:	a2 9f       	mul	r26, r18
    36aa:	b0 01       	movw	r22, r0
    36ac:	b3 9f       	mul	r27, r19
    36ae:	c0 01       	movw	r24, r0
    36b0:	a3 9f       	mul	r26, r19
    36b2:	70 0d       	add	r23, r0
    36b4:	81 1d       	adc	r24, r1
    36b6:	11 24       	eor	r1, r1
    36b8:	91 1d       	adc	r25, r1
    36ba:	b2 9f       	mul	r27, r18
    36bc:	70 0d       	add	r23, r0
    36be:	81 1d       	adc	r24, r1
    36c0:	11 24       	eor	r1, r1
    36c2:	91 1d       	adc	r25, r1
    36c4:	08 95       	ret

000036c6 <fdevopen>:
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	31 f4       	brne	.+12     	; 0x36de <fdevopen+0x18>
    36d2:	61 15       	cp	r22, r1
    36d4:	71 05       	cpc	r23, r1
    36d6:	19 f4       	brne	.+6      	; 0x36de <fdevopen+0x18>
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	39 c0       	rjmp	.+114    	; 0x3750 <fdevopen+0x8a>
    36de:	8b 01       	movw	r16, r22
    36e0:	ec 01       	movw	r28, r24
    36e2:	6e e0       	ldi	r22, 0x0E	; 14
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	47 d5       	rcall	.+2702   	; 0x417a <calloc>
    36ec:	fc 01       	movw	r30, r24
    36ee:	89 2b       	or	r24, r25
    36f0:	99 f3       	breq	.-26     	; 0x36d8 <fdevopen+0x12>
    36f2:	80 e8       	ldi	r24, 0x80	; 128
    36f4:	83 83       	std	Z+3, r24	; 0x03
    36f6:	01 15       	cp	r16, r1
    36f8:	11 05       	cpc	r17, r1
    36fa:	71 f0       	breq	.+28     	; 0x3718 <fdevopen+0x52>
    36fc:	02 87       	std	Z+10, r16	; 0x0a
    36fe:	13 87       	std	Z+11, r17	; 0x0b
    3700:	81 e8       	ldi	r24, 0x81	; 129
    3702:	83 83       	std	Z+3, r24	; 0x03
    3704:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <__iob>
    3708:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <__iob+0x1>
    370c:	89 2b       	or	r24, r25
    370e:	21 f4       	brne	.+8      	; 0x3718 <fdevopen+0x52>
    3710:	e0 93 84 21 	sts	0x2184, r30	; 0x802184 <__iob>
    3714:	f0 93 85 21 	sts	0x2185, r31	; 0x802185 <__iob+0x1>
    3718:	20 97       	sbiw	r28, 0x00	; 0
    371a:	c9 f0       	breq	.+50     	; 0x374e <fdevopen+0x88>
    371c:	c0 87       	std	Z+8, r28	; 0x08
    371e:	d1 87       	std	Z+9, r29	; 0x09
    3720:	83 81       	ldd	r24, Z+3	; 0x03
    3722:	82 60       	ori	r24, 0x02	; 2
    3724:	83 83       	std	Z+3, r24	; 0x03
    3726:	80 91 86 21 	lds	r24, 0x2186	; 0x802186 <__iob+0x2>
    372a:	90 91 87 21 	lds	r25, 0x2187	; 0x802187 <__iob+0x3>
    372e:	89 2b       	or	r24, r25
    3730:	71 f4       	brne	.+28     	; 0x374e <fdevopen+0x88>
    3732:	e0 93 86 21 	sts	0x2186, r30	; 0x802186 <__iob+0x2>
    3736:	f0 93 87 21 	sts	0x2187, r31	; 0x802187 <__iob+0x3>
    373a:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <__iob+0x4>
    373e:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <__iob+0x5>
    3742:	89 2b       	or	r24, r25
    3744:	21 f4       	brne	.+8      	; 0x374e <fdevopen+0x88>
    3746:	e0 93 88 21 	sts	0x2188, r30	; 0x802188 <__iob+0x4>
    374a:	f0 93 89 21 	sts	0x2189, r31	; 0x802189 <__iob+0x5>
    374e:	cf 01       	movw	r24, r30
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	08 95       	ret

0000375a <printf>:
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	ae 01       	movw	r20, r28
    3764:	4a 5f       	subi	r20, 0xFA	; 250
    3766:	5f 4f       	sbci	r21, 0xFF	; 255
    3768:	fa 01       	movw	r30, r20
    376a:	61 91       	ld	r22, Z+
    376c:	71 91       	ld	r23, Z+
    376e:	af 01       	movw	r20, r30
    3770:	80 91 86 21 	lds	r24, 0x2186	; 0x802186 <__iob+0x2>
    3774:	90 91 87 21 	lds	r25, 0x2187	; 0x802187 <__iob+0x3>
    3778:	46 d0       	rcall	.+140    	; 0x3806 <vfprintf>
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	08 95       	ret

00003780 <sprintf>:
    3780:	0f 93       	push	r16
    3782:	1f 93       	push	r17
    3784:	cf 93       	push	r28
    3786:	df 93       	push	r29
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	2e 97       	sbiw	r28, 0x0e	; 14
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0e 89       	ldd	r16, Y+22	; 0x16
    3794:	1f 89       	ldd	r17, Y+23	; 0x17
    3796:	86 e0       	ldi	r24, 0x06	; 6
    3798:	8c 83       	std	Y+4, r24	; 0x04
    379a:	09 83       	std	Y+1, r16	; 0x01
    379c:	1a 83       	std	Y+2, r17	; 0x02
    379e:	8f ef       	ldi	r24, 0xFF	; 255
    37a0:	9f e7       	ldi	r25, 0x7F	; 127
    37a2:	8d 83       	std	Y+5, r24	; 0x05
    37a4:	9e 83       	std	Y+6, r25	; 0x06
    37a6:	ae 01       	movw	r20, r28
    37a8:	46 5e       	subi	r20, 0xE6	; 230
    37aa:	5f 4f       	sbci	r21, 0xFF	; 255
    37ac:	68 8d       	ldd	r22, Y+24	; 0x18
    37ae:	79 8d       	ldd	r23, Y+25	; 0x19
    37b0:	ce 01       	movw	r24, r28
    37b2:	01 96       	adiw	r24, 0x01	; 1
    37b4:	28 d0       	rcall	.+80     	; 0x3806 <vfprintf>
    37b6:	ef 81       	ldd	r30, Y+7	; 0x07
    37b8:	f8 85       	ldd	r31, Y+8	; 0x08
    37ba:	e0 0f       	add	r30, r16
    37bc:	f1 1f       	adc	r31, r17
    37be:	10 82       	st	Z, r1
    37c0:	2e 96       	adiw	r28, 0x0e	; 14
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	de bf       	out	0x3e, r29	; 62
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	1f 91       	pop	r17
    37cc:	0f 91       	pop	r16
    37ce:	08 95       	ret

000037d0 <sscanf>:
    37d0:	cf 93       	push	r28
    37d2:	df 93       	push	r29
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	2e 97       	sbiw	r28, 0x0e	; 14
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	de bf       	out	0x3e, r29	; 62
    37de:	85 e0       	ldi	r24, 0x05	; 5
    37e0:	8c 83       	std	Y+4, r24	; 0x04
    37e2:	8c 89       	ldd	r24, Y+20	; 0x14
    37e4:	9d 89       	ldd	r25, Y+21	; 0x15
    37e6:	89 83       	std	Y+1, r24	; 0x01
    37e8:	9a 83       	std	Y+2, r25	; 0x02
    37ea:	ae 01       	movw	r20, r28
    37ec:	48 5e       	subi	r20, 0xE8	; 232
    37ee:	5f 4f       	sbci	r21, 0xFF	; 255
    37f0:	6e 89       	ldd	r22, Y+22	; 0x16
    37f2:	7f 89       	ldd	r23, Y+23	; 0x17
    37f4:	ce 01       	movw	r24, r28
    37f6:	01 96       	adiw	r24, 0x01	; 1
    37f8:	a9 d3       	rcall	.+1874   	; 0x3f4c <vfscanf>
    37fa:	2e 96       	adiw	r28, 0x0e	; 14
    37fc:	cd bf       	out	0x3d, r28	; 61
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	df 91       	pop	r29
    3802:	cf 91       	pop	r28
    3804:	08 95       	ret

00003806 <vfprintf>:
    3806:	2f 92       	push	r2
    3808:	3f 92       	push	r3
    380a:	4f 92       	push	r4
    380c:	5f 92       	push	r5
    380e:	6f 92       	push	r6
    3810:	7f 92       	push	r7
    3812:	8f 92       	push	r8
    3814:	9f 92       	push	r9
    3816:	af 92       	push	r10
    3818:	bf 92       	push	r11
    381a:	cf 92       	push	r12
    381c:	df 92       	push	r13
    381e:	ef 92       	push	r14
    3820:	ff 92       	push	r15
    3822:	0f 93       	push	r16
    3824:	1f 93       	push	r17
    3826:	cf 93       	push	r28
    3828:	df 93       	push	r29
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	2b 97       	sbiw	r28, 0x0b	; 11
    3830:	cd bf       	out	0x3d, r28	; 61
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	6c 01       	movw	r12, r24
    3836:	7b 01       	movw	r14, r22
    3838:	8a 01       	movw	r16, r20
    383a:	fc 01       	movw	r30, r24
    383c:	16 82       	std	Z+6, r1	; 0x06
    383e:	17 82       	std	Z+7, r1	; 0x07
    3840:	83 81       	ldd	r24, Z+3	; 0x03
    3842:	81 ff       	sbrs	r24, 1
    3844:	bf c1       	rjmp	.+894    	; 0x3bc4 <vfprintf+0x3be>
    3846:	ce 01       	movw	r24, r28
    3848:	01 96       	adiw	r24, 0x01	; 1
    384a:	3c 01       	movw	r6, r24
    384c:	f6 01       	movw	r30, r12
    384e:	93 81       	ldd	r25, Z+3	; 0x03
    3850:	f7 01       	movw	r30, r14
    3852:	93 fd       	sbrc	r25, 3
    3854:	85 91       	lpm	r24, Z+
    3856:	93 ff       	sbrs	r25, 3
    3858:	81 91       	ld	r24, Z+
    385a:	7f 01       	movw	r14, r30
    385c:	88 23       	and	r24, r24
    385e:	09 f4       	brne	.+2      	; 0x3862 <vfprintf+0x5c>
    3860:	ad c1       	rjmp	.+858    	; 0x3bbc <vfprintf+0x3b6>
    3862:	85 32       	cpi	r24, 0x25	; 37
    3864:	39 f4       	brne	.+14     	; 0x3874 <vfprintf+0x6e>
    3866:	93 fd       	sbrc	r25, 3
    3868:	85 91       	lpm	r24, Z+
    386a:	93 ff       	sbrs	r25, 3
    386c:	81 91       	ld	r24, Z+
    386e:	7f 01       	movw	r14, r30
    3870:	85 32       	cpi	r24, 0x25	; 37
    3872:	21 f4       	brne	.+8      	; 0x387c <vfprintf+0x76>
    3874:	b6 01       	movw	r22, r12
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	29 d6       	rcall	.+3154   	; 0x44cc <fputc>
    387a:	e8 cf       	rjmp	.-48     	; 0x384c <vfprintf+0x46>
    387c:	91 2c       	mov	r9, r1
    387e:	21 2c       	mov	r2, r1
    3880:	31 2c       	mov	r3, r1
    3882:	ff e1       	ldi	r31, 0x1F	; 31
    3884:	f3 15       	cp	r31, r3
    3886:	d8 f0       	brcs	.+54     	; 0x38be <vfprintf+0xb8>
    3888:	8b 32       	cpi	r24, 0x2B	; 43
    388a:	79 f0       	breq	.+30     	; 0x38aa <vfprintf+0xa4>
    388c:	38 f4       	brcc	.+14     	; 0x389c <vfprintf+0x96>
    388e:	80 32       	cpi	r24, 0x20	; 32
    3890:	79 f0       	breq	.+30     	; 0x38b0 <vfprintf+0xaa>
    3892:	83 32       	cpi	r24, 0x23	; 35
    3894:	a1 f4       	brne	.+40     	; 0x38be <vfprintf+0xb8>
    3896:	23 2d       	mov	r18, r3
    3898:	20 61       	ori	r18, 0x10	; 16
    389a:	1d c0       	rjmp	.+58     	; 0x38d6 <vfprintf+0xd0>
    389c:	8d 32       	cpi	r24, 0x2D	; 45
    389e:	61 f0       	breq	.+24     	; 0x38b8 <vfprintf+0xb2>
    38a0:	80 33       	cpi	r24, 0x30	; 48
    38a2:	69 f4       	brne	.+26     	; 0x38be <vfprintf+0xb8>
    38a4:	23 2d       	mov	r18, r3
    38a6:	21 60       	ori	r18, 0x01	; 1
    38a8:	16 c0       	rjmp	.+44     	; 0x38d6 <vfprintf+0xd0>
    38aa:	83 2d       	mov	r24, r3
    38ac:	82 60       	ori	r24, 0x02	; 2
    38ae:	38 2e       	mov	r3, r24
    38b0:	e3 2d       	mov	r30, r3
    38b2:	e4 60       	ori	r30, 0x04	; 4
    38b4:	3e 2e       	mov	r3, r30
    38b6:	2a c0       	rjmp	.+84     	; 0x390c <vfprintf+0x106>
    38b8:	f3 2d       	mov	r31, r3
    38ba:	f8 60       	ori	r31, 0x08	; 8
    38bc:	1d c0       	rjmp	.+58     	; 0x38f8 <vfprintf+0xf2>
    38be:	37 fc       	sbrc	r3, 7
    38c0:	2d c0       	rjmp	.+90     	; 0x391c <vfprintf+0x116>
    38c2:	20 ed       	ldi	r18, 0xD0	; 208
    38c4:	28 0f       	add	r18, r24
    38c6:	2a 30       	cpi	r18, 0x0A	; 10
    38c8:	40 f0       	brcs	.+16     	; 0x38da <vfprintf+0xd4>
    38ca:	8e 32       	cpi	r24, 0x2E	; 46
    38cc:	b9 f4       	brne	.+46     	; 0x38fc <vfprintf+0xf6>
    38ce:	36 fc       	sbrc	r3, 6
    38d0:	75 c1       	rjmp	.+746    	; 0x3bbc <vfprintf+0x3b6>
    38d2:	23 2d       	mov	r18, r3
    38d4:	20 64       	ori	r18, 0x40	; 64
    38d6:	32 2e       	mov	r3, r18
    38d8:	19 c0       	rjmp	.+50     	; 0x390c <vfprintf+0x106>
    38da:	36 fe       	sbrs	r3, 6
    38dc:	06 c0       	rjmp	.+12     	; 0x38ea <vfprintf+0xe4>
    38de:	8a e0       	ldi	r24, 0x0A	; 10
    38e0:	98 9e       	mul	r9, r24
    38e2:	20 0d       	add	r18, r0
    38e4:	11 24       	eor	r1, r1
    38e6:	92 2e       	mov	r9, r18
    38e8:	11 c0       	rjmp	.+34     	; 0x390c <vfprintf+0x106>
    38ea:	ea e0       	ldi	r30, 0x0A	; 10
    38ec:	2e 9e       	mul	r2, r30
    38ee:	20 0d       	add	r18, r0
    38f0:	11 24       	eor	r1, r1
    38f2:	22 2e       	mov	r2, r18
    38f4:	f3 2d       	mov	r31, r3
    38f6:	f0 62       	ori	r31, 0x20	; 32
    38f8:	3f 2e       	mov	r3, r31
    38fa:	08 c0       	rjmp	.+16     	; 0x390c <vfprintf+0x106>
    38fc:	8c 36       	cpi	r24, 0x6C	; 108
    38fe:	21 f4       	brne	.+8      	; 0x3908 <vfprintf+0x102>
    3900:	83 2d       	mov	r24, r3
    3902:	80 68       	ori	r24, 0x80	; 128
    3904:	38 2e       	mov	r3, r24
    3906:	02 c0       	rjmp	.+4      	; 0x390c <vfprintf+0x106>
    3908:	88 36       	cpi	r24, 0x68	; 104
    390a:	41 f4       	brne	.+16     	; 0x391c <vfprintf+0x116>
    390c:	f7 01       	movw	r30, r14
    390e:	93 fd       	sbrc	r25, 3
    3910:	85 91       	lpm	r24, Z+
    3912:	93 ff       	sbrs	r25, 3
    3914:	81 91       	ld	r24, Z+
    3916:	7f 01       	movw	r14, r30
    3918:	81 11       	cpse	r24, r1
    391a:	b3 cf       	rjmp	.-154    	; 0x3882 <vfprintf+0x7c>
    391c:	98 2f       	mov	r25, r24
    391e:	9f 7d       	andi	r25, 0xDF	; 223
    3920:	95 54       	subi	r25, 0x45	; 69
    3922:	93 30       	cpi	r25, 0x03	; 3
    3924:	28 f4       	brcc	.+10     	; 0x3930 <vfprintf+0x12a>
    3926:	0c 5f       	subi	r16, 0xFC	; 252
    3928:	1f 4f       	sbci	r17, 0xFF	; 255
    392a:	9f e3       	ldi	r25, 0x3F	; 63
    392c:	99 83       	std	Y+1, r25	; 0x01
    392e:	0d c0       	rjmp	.+26     	; 0x394a <vfprintf+0x144>
    3930:	83 36       	cpi	r24, 0x63	; 99
    3932:	31 f0       	breq	.+12     	; 0x3940 <vfprintf+0x13a>
    3934:	83 37       	cpi	r24, 0x73	; 115
    3936:	71 f0       	breq	.+28     	; 0x3954 <vfprintf+0x14e>
    3938:	83 35       	cpi	r24, 0x53	; 83
    393a:	09 f0       	breq	.+2      	; 0x393e <vfprintf+0x138>
    393c:	55 c0       	rjmp	.+170    	; 0x39e8 <vfprintf+0x1e2>
    393e:	20 c0       	rjmp	.+64     	; 0x3980 <vfprintf+0x17a>
    3940:	f8 01       	movw	r30, r16
    3942:	80 81       	ld	r24, Z
    3944:	89 83       	std	Y+1, r24	; 0x01
    3946:	0e 5f       	subi	r16, 0xFE	; 254
    3948:	1f 4f       	sbci	r17, 0xFF	; 255
    394a:	88 24       	eor	r8, r8
    394c:	83 94       	inc	r8
    394e:	91 2c       	mov	r9, r1
    3950:	53 01       	movw	r10, r6
    3952:	12 c0       	rjmp	.+36     	; 0x3978 <vfprintf+0x172>
    3954:	28 01       	movw	r4, r16
    3956:	f2 e0       	ldi	r31, 0x02	; 2
    3958:	4f 0e       	add	r4, r31
    395a:	51 1c       	adc	r5, r1
    395c:	f8 01       	movw	r30, r16
    395e:	a0 80       	ld	r10, Z
    3960:	b1 80       	ldd	r11, Z+1	; 0x01
    3962:	36 fe       	sbrs	r3, 6
    3964:	03 c0       	rjmp	.+6      	; 0x396c <vfprintf+0x166>
    3966:	69 2d       	mov	r22, r9
    3968:	70 e0       	ldi	r23, 0x00	; 0
    396a:	02 c0       	rjmp	.+4      	; 0x3970 <vfprintf+0x16a>
    396c:	6f ef       	ldi	r22, 0xFF	; 255
    396e:	7f ef       	ldi	r23, 0xFF	; 255
    3970:	c5 01       	movw	r24, r10
    3972:	63 d5       	rcall	.+2758   	; 0x443a <strnlen>
    3974:	4c 01       	movw	r8, r24
    3976:	82 01       	movw	r16, r4
    3978:	f3 2d       	mov	r31, r3
    397a:	ff 77       	andi	r31, 0x7F	; 127
    397c:	3f 2e       	mov	r3, r31
    397e:	15 c0       	rjmp	.+42     	; 0x39aa <vfprintf+0x1a4>
    3980:	28 01       	movw	r4, r16
    3982:	22 e0       	ldi	r18, 0x02	; 2
    3984:	42 0e       	add	r4, r18
    3986:	51 1c       	adc	r5, r1
    3988:	f8 01       	movw	r30, r16
    398a:	a0 80       	ld	r10, Z
    398c:	b1 80       	ldd	r11, Z+1	; 0x01
    398e:	36 fe       	sbrs	r3, 6
    3990:	03 c0       	rjmp	.+6      	; 0x3998 <vfprintf+0x192>
    3992:	69 2d       	mov	r22, r9
    3994:	70 e0       	ldi	r23, 0x00	; 0
    3996:	02 c0       	rjmp	.+4      	; 0x399c <vfprintf+0x196>
    3998:	6f ef       	ldi	r22, 0xFF	; 255
    399a:	7f ef       	ldi	r23, 0xFF	; 255
    399c:	c5 01       	movw	r24, r10
    399e:	3b d5       	rcall	.+2678   	; 0x4416 <strnlen_P>
    39a0:	4c 01       	movw	r8, r24
    39a2:	f3 2d       	mov	r31, r3
    39a4:	f0 68       	ori	r31, 0x80	; 128
    39a6:	3f 2e       	mov	r3, r31
    39a8:	82 01       	movw	r16, r4
    39aa:	33 fc       	sbrc	r3, 3
    39ac:	19 c0       	rjmp	.+50     	; 0x39e0 <vfprintf+0x1da>
    39ae:	82 2d       	mov	r24, r2
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	88 16       	cp	r8, r24
    39b4:	99 06       	cpc	r9, r25
    39b6:	a0 f4       	brcc	.+40     	; 0x39e0 <vfprintf+0x1da>
    39b8:	b6 01       	movw	r22, r12
    39ba:	80 e2       	ldi	r24, 0x20	; 32
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	86 d5       	rcall	.+2828   	; 0x44cc <fputc>
    39c0:	2a 94       	dec	r2
    39c2:	f5 cf       	rjmp	.-22     	; 0x39ae <vfprintf+0x1a8>
    39c4:	f5 01       	movw	r30, r10
    39c6:	37 fc       	sbrc	r3, 7
    39c8:	85 91       	lpm	r24, Z+
    39ca:	37 fe       	sbrs	r3, 7
    39cc:	81 91       	ld	r24, Z+
    39ce:	5f 01       	movw	r10, r30
    39d0:	b6 01       	movw	r22, r12
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	7b d5       	rcall	.+2806   	; 0x44cc <fputc>
    39d6:	21 10       	cpse	r2, r1
    39d8:	2a 94       	dec	r2
    39da:	21 e0       	ldi	r18, 0x01	; 1
    39dc:	82 1a       	sub	r8, r18
    39de:	91 08       	sbc	r9, r1
    39e0:	81 14       	cp	r8, r1
    39e2:	91 04       	cpc	r9, r1
    39e4:	79 f7       	brne	.-34     	; 0x39c4 <vfprintf+0x1be>
    39e6:	e1 c0       	rjmp	.+450    	; 0x3baa <vfprintf+0x3a4>
    39e8:	84 36       	cpi	r24, 0x64	; 100
    39ea:	11 f0       	breq	.+4      	; 0x39f0 <vfprintf+0x1ea>
    39ec:	89 36       	cpi	r24, 0x69	; 105
    39ee:	39 f5       	brne	.+78     	; 0x3a3e <vfprintf+0x238>
    39f0:	f8 01       	movw	r30, r16
    39f2:	37 fe       	sbrs	r3, 7
    39f4:	07 c0       	rjmp	.+14     	; 0x3a04 <vfprintf+0x1fe>
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	0c 5f       	subi	r16, 0xFC	; 252
    3a00:	1f 4f       	sbci	r17, 0xFF	; 255
    3a02:	08 c0       	rjmp	.+16     	; 0x3a14 <vfprintf+0x20e>
    3a04:	60 81       	ld	r22, Z
    3a06:	71 81       	ldd	r23, Z+1	; 0x01
    3a08:	07 2e       	mov	r0, r23
    3a0a:	00 0c       	add	r0, r0
    3a0c:	88 0b       	sbc	r24, r24
    3a0e:	99 0b       	sbc	r25, r25
    3a10:	0e 5f       	subi	r16, 0xFE	; 254
    3a12:	1f 4f       	sbci	r17, 0xFF	; 255
    3a14:	f3 2d       	mov	r31, r3
    3a16:	ff 76       	andi	r31, 0x6F	; 111
    3a18:	3f 2e       	mov	r3, r31
    3a1a:	97 ff       	sbrs	r25, 7
    3a1c:	09 c0       	rjmp	.+18     	; 0x3a30 <vfprintf+0x22a>
    3a1e:	90 95       	com	r25
    3a20:	80 95       	com	r24
    3a22:	70 95       	com	r23
    3a24:	61 95       	neg	r22
    3a26:	7f 4f       	sbci	r23, 0xFF	; 255
    3a28:	8f 4f       	sbci	r24, 0xFF	; 255
    3a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2c:	f0 68       	ori	r31, 0x80	; 128
    3a2e:	3f 2e       	mov	r3, r31
    3a30:	2a e0       	ldi	r18, 0x0A	; 10
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	a3 01       	movw	r20, r6
    3a36:	9f d5       	rcall	.+2878   	; 0x4576 <__ultoa_invert>
    3a38:	88 2e       	mov	r8, r24
    3a3a:	86 18       	sub	r8, r6
    3a3c:	44 c0       	rjmp	.+136    	; 0x3ac6 <vfprintf+0x2c0>
    3a3e:	85 37       	cpi	r24, 0x75	; 117
    3a40:	31 f4       	brne	.+12     	; 0x3a4e <vfprintf+0x248>
    3a42:	23 2d       	mov	r18, r3
    3a44:	2f 7e       	andi	r18, 0xEF	; 239
    3a46:	b2 2e       	mov	r11, r18
    3a48:	2a e0       	ldi	r18, 0x0A	; 10
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	25 c0       	rjmp	.+74     	; 0x3a98 <vfprintf+0x292>
    3a4e:	93 2d       	mov	r25, r3
    3a50:	99 7f       	andi	r25, 0xF9	; 249
    3a52:	b9 2e       	mov	r11, r25
    3a54:	8f 36       	cpi	r24, 0x6F	; 111
    3a56:	c1 f0       	breq	.+48     	; 0x3a88 <vfprintf+0x282>
    3a58:	18 f4       	brcc	.+6      	; 0x3a60 <vfprintf+0x25a>
    3a5a:	88 35       	cpi	r24, 0x58	; 88
    3a5c:	79 f0       	breq	.+30     	; 0x3a7c <vfprintf+0x276>
    3a5e:	ae c0       	rjmp	.+348    	; 0x3bbc <vfprintf+0x3b6>
    3a60:	80 37       	cpi	r24, 0x70	; 112
    3a62:	19 f0       	breq	.+6      	; 0x3a6a <vfprintf+0x264>
    3a64:	88 37       	cpi	r24, 0x78	; 120
    3a66:	21 f0       	breq	.+8      	; 0x3a70 <vfprintf+0x26a>
    3a68:	a9 c0       	rjmp	.+338    	; 0x3bbc <vfprintf+0x3b6>
    3a6a:	e9 2f       	mov	r30, r25
    3a6c:	e0 61       	ori	r30, 0x10	; 16
    3a6e:	be 2e       	mov	r11, r30
    3a70:	b4 fe       	sbrs	r11, 4
    3a72:	0d c0       	rjmp	.+26     	; 0x3a8e <vfprintf+0x288>
    3a74:	fb 2d       	mov	r31, r11
    3a76:	f4 60       	ori	r31, 0x04	; 4
    3a78:	bf 2e       	mov	r11, r31
    3a7a:	09 c0       	rjmp	.+18     	; 0x3a8e <vfprintf+0x288>
    3a7c:	34 fe       	sbrs	r3, 4
    3a7e:	0a c0       	rjmp	.+20     	; 0x3a94 <vfprintf+0x28e>
    3a80:	29 2f       	mov	r18, r25
    3a82:	26 60       	ori	r18, 0x06	; 6
    3a84:	b2 2e       	mov	r11, r18
    3a86:	06 c0       	rjmp	.+12     	; 0x3a94 <vfprintf+0x28e>
    3a88:	28 e0       	ldi	r18, 0x08	; 8
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	05 c0       	rjmp	.+10     	; 0x3a98 <vfprintf+0x292>
    3a8e:	20 e1       	ldi	r18, 0x10	; 16
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	02 c0       	rjmp	.+4      	; 0x3a98 <vfprintf+0x292>
    3a94:	20 e1       	ldi	r18, 0x10	; 16
    3a96:	32 e0       	ldi	r19, 0x02	; 2
    3a98:	f8 01       	movw	r30, r16
    3a9a:	b7 fe       	sbrs	r11, 7
    3a9c:	07 c0       	rjmp	.+14     	; 0x3aac <vfprintf+0x2a6>
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	0c 5f       	subi	r16, 0xFC	; 252
    3aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aaa:	06 c0       	rjmp	.+12     	; 0x3ab8 <vfprintf+0x2b2>
    3aac:	60 81       	ld	r22, Z
    3aae:	71 81       	ldd	r23, Z+1	; 0x01
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	0e 5f       	subi	r16, 0xFE	; 254
    3ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab8:	a3 01       	movw	r20, r6
    3aba:	5d d5       	rcall	.+2746   	; 0x4576 <__ultoa_invert>
    3abc:	88 2e       	mov	r8, r24
    3abe:	86 18       	sub	r8, r6
    3ac0:	fb 2d       	mov	r31, r11
    3ac2:	ff 77       	andi	r31, 0x7F	; 127
    3ac4:	3f 2e       	mov	r3, r31
    3ac6:	36 fe       	sbrs	r3, 6
    3ac8:	0d c0       	rjmp	.+26     	; 0x3ae4 <vfprintf+0x2de>
    3aca:	23 2d       	mov	r18, r3
    3acc:	2e 7f       	andi	r18, 0xFE	; 254
    3ace:	a2 2e       	mov	r10, r18
    3ad0:	89 14       	cp	r8, r9
    3ad2:	58 f4       	brcc	.+22     	; 0x3aea <vfprintf+0x2e4>
    3ad4:	34 fe       	sbrs	r3, 4
    3ad6:	0b c0       	rjmp	.+22     	; 0x3aee <vfprintf+0x2e8>
    3ad8:	32 fc       	sbrc	r3, 2
    3ada:	09 c0       	rjmp	.+18     	; 0x3aee <vfprintf+0x2e8>
    3adc:	83 2d       	mov	r24, r3
    3ade:	8e 7e       	andi	r24, 0xEE	; 238
    3ae0:	a8 2e       	mov	r10, r24
    3ae2:	05 c0       	rjmp	.+10     	; 0x3aee <vfprintf+0x2e8>
    3ae4:	b8 2c       	mov	r11, r8
    3ae6:	a3 2c       	mov	r10, r3
    3ae8:	03 c0       	rjmp	.+6      	; 0x3af0 <vfprintf+0x2ea>
    3aea:	b8 2c       	mov	r11, r8
    3aec:	01 c0       	rjmp	.+2      	; 0x3af0 <vfprintf+0x2ea>
    3aee:	b9 2c       	mov	r11, r9
    3af0:	a4 fe       	sbrs	r10, 4
    3af2:	0f c0       	rjmp	.+30     	; 0x3b12 <vfprintf+0x30c>
    3af4:	fe 01       	movw	r30, r28
    3af6:	e8 0d       	add	r30, r8
    3af8:	f1 1d       	adc	r31, r1
    3afa:	80 81       	ld	r24, Z
    3afc:	80 33       	cpi	r24, 0x30	; 48
    3afe:	21 f4       	brne	.+8      	; 0x3b08 <vfprintf+0x302>
    3b00:	9a 2d       	mov	r25, r10
    3b02:	99 7e       	andi	r25, 0xE9	; 233
    3b04:	a9 2e       	mov	r10, r25
    3b06:	09 c0       	rjmp	.+18     	; 0x3b1a <vfprintf+0x314>
    3b08:	a2 fe       	sbrs	r10, 2
    3b0a:	06 c0       	rjmp	.+12     	; 0x3b18 <vfprintf+0x312>
    3b0c:	b3 94       	inc	r11
    3b0e:	b3 94       	inc	r11
    3b10:	04 c0       	rjmp	.+8      	; 0x3b1a <vfprintf+0x314>
    3b12:	8a 2d       	mov	r24, r10
    3b14:	86 78       	andi	r24, 0x86	; 134
    3b16:	09 f0       	breq	.+2      	; 0x3b1a <vfprintf+0x314>
    3b18:	b3 94       	inc	r11
    3b1a:	a3 fc       	sbrc	r10, 3
    3b1c:	10 c0       	rjmp	.+32     	; 0x3b3e <vfprintf+0x338>
    3b1e:	a0 fe       	sbrs	r10, 0
    3b20:	06 c0       	rjmp	.+12     	; 0x3b2e <vfprintf+0x328>
    3b22:	b2 14       	cp	r11, r2
    3b24:	80 f4       	brcc	.+32     	; 0x3b46 <vfprintf+0x340>
    3b26:	28 0c       	add	r2, r8
    3b28:	92 2c       	mov	r9, r2
    3b2a:	9b 18       	sub	r9, r11
    3b2c:	0d c0       	rjmp	.+26     	; 0x3b48 <vfprintf+0x342>
    3b2e:	b2 14       	cp	r11, r2
    3b30:	58 f4       	brcc	.+22     	; 0x3b48 <vfprintf+0x342>
    3b32:	b6 01       	movw	r22, r12
    3b34:	80 e2       	ldi	r24, 0x20	; 32
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	c9 d4       	rcall	.+2450   	; 0x44cc <fputc>
    3b3a:	b3 94       	inc	r11
    3b3c:	f8 cf       	rjmp	.-16     	; 0x3b2e <vfprintf+0x328>
    3b3e:	b2 14       	cp	r11, r2
    3b40:	18 f4       	brcc	.+6      	; 0x3b48 <vfprintf+0x342>
    3b42:	2b 18       	sub	r2, r11
    3b44:	02 c0       	rjmp	.+4      	; 0x3b4a <vfprintf+0x344>
    3b46:	98 2c       	mov	r9, r8
    3b48:	21 2c       	mov	r2, r1
    3b4a:	a4 fe       	sbrs	r10, 4
    3b4c:	0f c0       	rjmp	.+30     	; 0x3b6c <vfprintf+0x366>
    3b4e:	b6 01       	movw	r22, r12
    3b50:	80 e3       	ldi	r24, 0x30	; 48
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	bb d4       	rcall	.+2422   	; 0x44cc <fputc>
    3b56:	a2 fe       	sbrs	r10, 2
    3b58:	16 c0       	rjmp	.+44     	; 0x3b86 <vfprintf+0x380>
    3b5a:	a1 fc       	sbrc	r10, 1
    3b5c:	03 c0       	rjmp	.+6      	; 0x3b64 <vfprintf+0x35e>
    3b5e:	88 e7       	ldi	r24, 0x78	; 120
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <vfprintf+0x362>
    3b64:	88 e5       	ldi	r24, 0x58	; 88
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	b6 01       	movw	r22, r12
    3b6a:	0c c0       	rjmp	.+24     	; 0x3b84 <vfprintf+0x37e>
    3b6c:	8a 2d       	mov	r24, r10
    3b6e:	86 78       	andi	r24, 0x86	; 134
    3b70:	51 f0       	breq	.+20     	; 0x3b86 <vfprintf+0x380>
    3b72:	a1 fe       	sbrs	r10, 1
    3b74:	02 c0       	rjmp	.+4      	; 0x3b7a <vfprintf+0x374>
    3b76:	8b e2       	ldi	r24, 0x2B	; 43
    3b78:	01 c0       	rjmp	.+2      	; 0x3b7c <vfprintf+0x376>
    3b7a:	80 e2       	ldi	r24, 0x20	; 32
    3b7c:	a7 fc       	sbrc	r10, 7
    3b7e:	8d e2       	ldi	r24, 0x2D	; 45
    3b80:	b6 01       	movw	r22, r12
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	a3 d4       	rcall	.+2374   	; 0x44cc <fputc>
    3b86:	89 14       	cp	r8, r9
    3b88:	30 f4       	brcc	.+12     	; 0x3b96 <vfprintf+0x390>
    3b8a:	b6 01       	movw	r22, r12
    3b8c:	80 e3       	ldi	r24, 0x30	; 48
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	9d d4       	rcall	.+2362   	; 0x44cc <fputc>
    3b92:	9a 94       	dec	r9
    3b94:	f8 cf       	rjmp	.-16     	; 0x3b86 <vfprintf+0x380>
    3b96:	8a 94       	dec	r8
    3b98:	f3 01       	movw	r30, r6
    3b9a:	e8 0d       	add	r30, r8
    3b9c:	f1 1d       	adc	r31, r1
    3b9e:	80 81       	ld	r24, Z
    3ba0:	b6 01       	movw	r22, r12
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	93 d4       	rcall	.+2342   	; 0x44cc <fputc>
    3ba6:	81 10       	cpse	r8, r1
    3ba8:	f6 cf       	rjmp	.-20     	; 0x3b96 <vfprintf+0x390>
    3baa:	22 20       	and	r2, r2
    3bac:	09 f4       	brne	.+2      	; 0x3bb0 <vfprintf+0x3aa>
    3bae:	4e ce       	rjmp	.-868    	; 0x384c <vfprintf+0x46>
    3bb0:	b6 01       	movw	r22, r12
    3bb2:	80 e2       	ldi	r24, 0x20	; 32
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	8a d4       	rcall	.+2324   	; 0x44cc <fputc>
    3bb8:	2a 94       	dec	r2
    3bba:	f7 cf       	rjmp	.-18     	; 0x3baa <vfprintf+0x3a4>
    3bbc:	f6 01       	movw	r30, r12
    3bbe:	86 81       	ldd	r24, Z+6	; 0x06
    3bc0:	97 81       	ldd	r25, Z+7	; 0x07
    3bc2:	02 c0       	rjmp	.+4      	; 0x3bc8 <vfprintf+0x3c2>
    3bc4:	8f ef       	ldi	r24, 0xFF	; 255
    3bc6:	9f ef       	ldi	r25, 0xFF	; 255
    3bc8:	2b 96       	adiw	r28, 0x0b	; 11
    3bca:	cd bf       	out	0x3d, r28	; 61
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	df 91       	pop	r29
    3bd0:	cf 91       	pop	r28
    3bd2:	1f 91       	pop	r17
    3bd4:	0f 91       	pop	r16
    3bd6:	ff 90       	pop	r15
    3bd8:	ef 90       	pop	r14
    3bda:	df 90       	pop	r13
    3bdc:	cf 90       	pop	r12
    3bde:	bf 90       	pop	r11
    3be0:	af 90       	pop	r10
    3be2:	9f 90       	pop	r9
    3be4:	8f 90       	pop	r8
    3be6:	7f 90       	pop	r7
    3be8:	6f 90       	pop	r6
    3bea:	5f 90       	pop	r5
    3bec:	4f 90       	pop	r4
    3bee:	3f 90       	pop	r3
    3bf0:	2f 90       	pop	r2
    3bf2:	08 95       	ret

00003bf4 <putval>:
    3bf4:	20 fd       	sbrc	r18, 0
    3bf6:	09 c0       	rjmp	.+18     	; 0x3c0a <putval+0x16>
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	23 fd       	sbrc	r18, 3
    3bfc:	05 c0       	rjmp	.+10     	; 0x3c08 <putval+0x14>
    3bfe:	22 ff       	sbrs	r18, 2
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <putval+0x12>
    3c02:	73 83       	std	Z+3, r23	; 0x03
    3c04:	62 83       	std	Z+2, r22	; 0x02
    3c06:	51 83       	std	Z+1, r21	; 0x01
    3c08:	40 83       	st	Z, r20
    3c0a:	08 95       	ret

00003c0c <mulacc>:
    3c0c:	44 fd       	sbrc	r20, 4
    3c0e:	17 c0       	rjmp	.+46     	; 0x3c3e <mulacc+0x32>
    3c10:	46 fd       	sbrc	r20, 6
    3c12:	17 c0       	rjmp	.+46     	; 0x3c42 <mulacc+0x36>
    3c14:	ab 01       	movw	r20, r22
    3c16:	bc 01       	movw	r22, r24
    3c18:	da 01       	movw	r26, r20
    3c1a:	fb 01       	movw	r30, r22
    3c1c:	aa 0f       	add	r26, r26
    3c1e:	bb 1f       	adc	r27, r27
    3c20:	ee 1f       	adc	r30, r30
    3c22:	ff 1f       	adc	r31, r31
    3c24:	10 94       	com	r1
    3c26:	d1 f7       	brne	.-12     	; 0x3c1c <mulacc+0x10>
    3c28:	4a 0f       	add	r20, r26
    3c2a:	5b 1f       	adc	r21, r27
    3c2c:	6e 1f       	adc	r22, r30
    3c2e:	7f 1f       	adc	r23, r31
    3c30:	cb 01       	movw	r24, r22
    3c32:	ba 01       	movw	r22, r20
    3c34:	66 0f       	add	r22, r22
    3c36:	77 1f       	adc	r23, r23
    3c38:	88 1f       	adc	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	09 c0       	rjmp	.+18     	; 0x3c50 <mulacc+0x44>
    3c3e:	33 e0       	ldi	r19, 0x03	; 3
    3c40:	01 c0       	rjmp	.+2      	; 0x3c44 <mulacc+0x38>
    3c42:	34 e0       	ldi	r19, 0x04	; 4
    3c44:	66 0f       	add	r22, r22
    3c46:	77 1f       	adc	r23, r23
    3c48:	88 1f       	adc	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	31 50       	subi	r19, 0x01	; 1
    3c4e:	d1 f7       	brne	.-12     	; 0x3c44 <mulacc+0x38>
    3c50:	62 0f       	add	r22, r18
    3c52:	71 1d       	adc	r23, r1
    3c54:	81 1d       	adc	r24, r1
    3c56:	91 1d       	adc	r25, r1
    3c58:	08 95       	ret

00003c5a <skip_spaces>:
    3c5a:	0f 93       	push	r16
    3c5c:	1f 93       	push	r17
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	8c 01       	movw	r16, r24
    3c64:	c8 01       	movw	r24, r16
    3c66:	f4 d3       	rcall	.+2024   	; 0x4450 <fgetc>
    3c68:	ec 01       	movw	r28, r24
    3c6a:	97 fd       	sbrc	r25, 7
    3c6c:	06 c0       	rjmp	.+12     	; 0x3c7a <skip_spaces+0x20>
    3c6e:	c0 d3       	rcall	.+1920   	; 0x43f0 <isspace>
    3c70:	89 2b       	or	r24, r25
    3c72:	c1 f7       	brne	.-16     	; 0x3c64 <skip_spaces+0xa>
    3c74:	b8 01       	movw	r22, r16
    3c76:	ce 01       	movw	r24, r28
    3c78:	65 d4       	rcall	.+2250   	; 0x4544 <ungetc>
    3c7a:	ce 01       	movw	r24, r28
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	1f 91       	pop	r17
    3c82:	0f 91       	pop	r16
    3c84:	08 95       	ret

00003c86 <conv_int>:
    3c86:	8f 92       	push	r8
    3c88:	9f 92       	push	r9
    3c8a:	af 92       	push	r10
    3c8c:	bf 92       	push	r11
    3c8e:	ef 92       	push	r14
    3c90:	ff 92       	push	r15
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	8c 01       	movw	r16, r24
    3c9c:	d6 2f       	mov	r29, r22
    3c9e:	7a 01       	movw	r14, r20
    3ca0:	b2 2e       	mov	r11, r18
    3ca2:	d6 d3       	rcall	.+1964   	; 0x4450 <fgetc>
    3ca4:	9c 01       	movw	r18, r24
    3ca6:	33 27       	eor	r19, r19
    3ca8:	2b 32       	cpi	r18, 0x2B	; 43
    3caa:	31 05       	cpc	r19, r1
    3cac:	31 f0       	breq	.+12     	; 0x3cba <conv_int+0x34>
    3cae:	2d 32       	cpi	r18, 0x2D	; 45
    3cb0:	31 05       	cpc	r19, r1
    3cb2:	59 f4       	brne	.+22     	; 0x3cca <conv_int+0x44>
    3cb4:	8b 2d       	mov	r24, r11
    3cb6:	80 68       	ori	r24, 0x80	; 128
    3cb8:	b8 2e       	mov	r11, r24
    3cba:	d1 50       	subi	r29, 0x01	; 1
    3cbc:	11 f4       	brne	.+4      	; 0x3cc2 <conv_int+0x3c>
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
    3cc0:	61 c0       	rjmp	.+194    	; 0x3d84 <conv_int+0xfe>
    3cc2:	c8 01       	movw	r24, r16
    3cc4:	c5 d3       	rcall	.+1930   	; 0x4450 <fgetc>
    3cc6:	97 fd       	sbrc	r25, 7
    3cc8:	fa cf       	rjmp	.-12     	; 0x3cbe <conv_int+0x38>
    3cca:	cb 2d       	mov	r28, r11
    3ccc:	cd 7f       	andi	r28, 0xFD	; 253
    3cce:	2b 2d       	mov	r18, r11
    3cd0:	20 73       	andi	r18, 0x30	; 48
    3cd2:	f9 f4       	brne	.+62     	; 0x3d12 <conv_int+0x8c>
    3cd4:	80 33       	cpi	r24, 0x30	; 48
    3cd6:	e9 f4       	brne	.+58     	; 0x3d12 <conv_int+0x8c>
    3cd8:	aa 24       	eor	r10, r10
    3cda:	aa 94       	dec	r10
    3cdc:	ad 0e       	add	r10, r29
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <conv_int+0x5c>
    3ce0:	3e c0       	rjmp	.+124    	; 0x3d5e <conv_int+0xd8>
    3ce2:	c8 01       	movw	r24, r16
    3ce4:	b5 d3       	rcall	.+1898   	; 0x4450 <fgetc>
    3ce6:	97 fd       	sbrc	r25, 7
    3ce8:	3a c0       	rjmp	.+116    	; 0x3d5e <conv_int+0xd8>
    3cea:	9c 01       	movw	r18, r24
    3cec:	2f 7d       	andi	r18, 0xDF	; 223
    3cee:	33 27       	eor	r19, r19
    3cf0:	28 35       	cpi	r18, 0x58	; 88
    3cf2:	31 05       	cpc	r19, r1
    3cf4:	41 f4       	brne	.+16     	; 0x3d06 <conv_int+0x80>
    3cf6:	c2 64       	ori	r28, 0x42	; 66
    3cf8:	d2 50       	subi	r29, 0x02	; 2
    3cfa:	89 f1       	breq	.+98     	; 0x3d5e <conv_int+0xd8>
    3cfc:	c8 01       	movw	r24, r16
    3cfe:	a8 d3       	rcall	.+1872   	; 0x4450 <fgetc>
    3d00:	97 ff       	sbrs	r25, 7
    3d02:	07 c0       	rjmp	.+14     	; 0x3d12 <conv_int+0x8c>
    3d04:	2c c0       	rjmp	.+88     	; 0x3d5e <conv_int+0xd8>
    3d06:	b6 fe       	sbrs	r11, 6
    3d08:	02 c0       	rjmp	.+4      	; 0x3d0e <conv_int+0x88>
    3d0a:	c2 60       	ori	r28, 0x02	; 2
    3d0c:	01 c0       	rjmp	.+2      	; 0x3d10 <conv_int+0x8a>
    3d0e:	c2 61       	ori	r28, 0x12	; 18
    3d10:	da 2d       	mov	r29, r10
    3d12:	81 2c       	mov	r8, r1
    3d14:	91 2c       	mov	r9, r1
    3d16:	54 01       	movw	r10, r8
    3d18:	20 ed       	ldi	r18, 0xD0	; 208
    3d1a:	28 0f       	add	r18, r24
    3d1c:	28 30       	cpi	r18, 0x08	; 8
    3d1e:	78 f0       	brcs	.+30     	; 0x3d3e <conv_int+0xb8>
    3d20:	c4 ff       	sbrs	r28, 4
    3d22:	03 c0       	rjmp	.+6      	; 0x3d2a <conv_int+0xa4>
    3d24:	b8 01       	movw	r22, r16
    3d26:	0e d4       	rcall	.+2076   	; 0x4544 <ungetc>
    3d28:	17 c0       	rjmp	.+46     	; 0x3d58 <conv_int+0xd2>
    3d2a:	2a 30       	cpi	r18, 0x0A	; 10
    3d2c:	40 f0       	brcs	.+16     	; 0x3d3e <conv_int+0xb8>
    3d2e:	c6 ff       	sbrs	r28, 6
    3d30:	f9 cf       	rjmp	.-14     	; 0x3d24 <conv_int+0x9e>
    3d32:	2f 7d       	andi	r18, 0xDF	; 223
    3d34:	3f ee       	ldi	r19, 0xEF	; 239
    3d36:	32 0f       	add	r19, r18
    3d38:	36 30       	cpi	r19, 0x06	; 6
    3d3a:	a0 f7       	brcc	.-24     	; 0x3d24 <conv_int+0x9e>
    3d3c:	27 50       	subi	r18, 0x07	; 7
    3d3e:	4c 2f       	mov	r20, r28
    3d40:	c5 01       	movw	r24, r10
    3d42:	b4 01       	movw	r22, r8
    3d44:	63 df       	rcall	.-314    	; 0x3c0c <mulacc>
    3d46:	4b 01       	movw	r8, r22
    3d48:	5c 01       	movw	r10, r24
    3d4a:	c2 60       	ori	r28, 0x02	; 2
    3d4c:	d1 50       	subi	r29, 0x01	; 1
    3d4e:	51 f0       	breq	.+20     	; 0x3d64 <conv_int+0xde>
    3d50:	c8 01       	movw	r24, r16
    3d52:	7e d3       	rcall	.+1788   	; 0x4450 <fgetc>
    3d54:	97 ff       	sbrs	r25, 7
    3d56:	e0 cf       	rjmp	.-64     	; 0x3d18 <conv_int+0x92>
    3d58:	c1 fd       	sbrc	r28, 1
    3d5a:	04 c0       	rjmp	.+8      	; 0x3d64 <conv_int+0xde>
    3d5c:	b0 cf       	rjmp	.-160    	; 0x3cbe <conv_int+0x38>
    3d5e:	81 2c       	mov	r8, r1
    3d60:	91 2c       	mov	r9, r1
    3d62:	54 01       	movw	r10, r8
    3d64:	c7 ff       	sbrs	r28, 7
    3d66:	08 c0       	rjmp	.+16     	; 0x3d78 <conv_int+0xf2>
    3d68:	b0 94       	com	r11
    3d6a:	a0 94       	com	r10
    3d6c:	90 94       	com	r9
    3d6e:	80 94       	com	r8
    3d70:	81 1c       	adc	r8, r1
    3d72:	91 1c       	adc	r9, r1
    3d74:	a1 1c       	adc	r10, r1
    3d76:	b1 1c       	adc	r11, r1
    3d78:	2c 2f       	mov	r18, r28
    3d7a:	b5 01       	movw	r22, r10
    3d7c:	a4 01       	movw	r20, r8
    3d7e:	c7 01       	movw	r24, r14
    3d80:	39 df       	rcall	.-398    	; 0x3bf4 <putval>
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	1f 91       	pop	r17
    3d8a:	0f 91       	pop	r16
    3d8c:	ff 90       	pop	r15
    3d8e:	ef 90       	pop	r14
    3d90:	bf 90       	pop	r11
    3d92:	af 90       	pop	r10
    3d94:	9f 90       	pop	r9
    3d96:	8f 90       	pop	r8
    3d98:	08 95       	ret

00003d9a <conv_brk>:
    3d9a:	5f 92       	push	r5
    3d9c:	6f 92       	push	r6
    3d9e:	7f 92       	push	r7
    3da0:	8f 92       	push	r8
    3da2:	9f 92       	push	r9
    3da4:	af 92       	push	r10
    3da6:	bf 92       	push	r11
    3da8:	cf 92       	push	r12
    3daa:	df 92       	push	r13
    3dac:	ef 92       	push	r14
    3dae:	ff 92       	push	r15
    3db0:	0f 93       	push	r16
    3db2:	1f 93       	push	r17
    3db4:	cf 93       	push	r28
    3db6:	df 93       	push	r29
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62
    3dbc:	a0 97       	sbiw	r28, 0x20	; 32
    3dbe:	cd bf       	out	0x3d, r28	; 61
    3dc0:	de bf       	out	0x3e, r29	; 62
    3dc2:	5c 01       	movw	r10, r24
    3dc4:	96 2e       	mov	r9, r22
    3dc6:	7a 01       	movw	r14, r20
    3dc8:	f9 01       	movw	r30, r18
    3dca:	8e 01       	movw	r16, r28
    3dcc:	0f 5f       	subi	r16, 0xFF	; 255
    3dce:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd0:	68 01       	movw	r12, r16
    3dd2:	80 e2       	ldi	r24, 0x20	; 32
    3dd4:	d8 01       	movw	r26, r16
    3dd6:	1d 92       	st	X+, r1
    3dd8:	8a 95       	dec	r24
    3dda:	e9 f7       	brne	.-6      	; 0x3dd6 <conv_brk+0x3c>
    3ddc:	d5 01       	movw	r26, r10
    3dde:	13 96       	adiw	r26, 0x03	; 3
    3de0:	8c 90       	ld	r8, X
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	61 2c       	mov	r6, r1
    3de8:	71 2c       	mov	r7, r1
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	61 e0       	ldi	r22, 0x01	; 1
    3dee:	70 e0       	ldi	r23, 0x00	; 0
    3df0:	83 fc       	sbrc	r8, 3
    3df2:	25 91       	lpm	r18, Z+
    3df4:	83 fe       	sbrs	r8, 3
    3df6:	21 91       	ld	r18, Z+
    3df8:	8f 01       	movw	r16, r30
    3dfa:	52 2e       	mov	r5, r18
    3dfc:	21 11       	cpse	r18, r1
    3dfe:	03 c0       	rjmp	.+6      	; 0x3e06 <conv_brk+0x6c>
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	90 c0       	rjmp	.+288    	; 0x3f26 <conv_brk+0x18c>
    3e06:	2e 35       	cpi	r18, 0x5E	; 94
    3e08:	11 f4       	brne	.+4      	; 0x3e0e <conv_brk+0x74>
    3e0a:	00 97       	sbiw	r24, 0x00	; 0
    3e0c:	51 f1       	breq	.+84     	; 0x3e62 <conv_brk+0xc8>
    3e0e:	43 2f       	mov	r20, r19
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	48 17       	cp	r20, r24
    3e14:	59 07       	cpc	r21, r25
    3e16:	3c f4       	brge	.+14     	; 0x3e26 <conv_brk+0x8c>
    3e18:	2d 35       	cpi	r18, 0x5D	; 93
    3e1a:	59 f1       	breq	.+86     	; 0x3e72 <conv_brk+0xd8>
    3e1c:	2d 32       	cpi	r18, 0x2D	; 45
    3e1e:	19 f4       	brne	.+6      	; 0x3e26 <conv_brk+0x8c>
    3e20:	77 20       	and	r7, r7
    3e22:	09 f1       	breq	.+66     	; 0x3e66 <conv_brk+0xcc>
    3e24:	03 c0       	rjmp	.+6      	; 0x3e2c <conv_brk+0x92>
    3e26:	77 20       	and	r7, r7
    3e28:	09 f4       	brne	.+2      	; 0x3e2c <conv_brk+0x92>
    3e2a:	68 c0       	rjmp	.+208    	; 0x3efc <conv_brk+0x162>
    3e2c:	45 2d       	mov	r20, r5
    3e2e:	46 95       	lsr	r20
    3e30:	46 95       	lsr	r20
    3e32:	46 95       	lsr	r20
    3e34:	d6 01       	movw	r26, r12
    3e36:	a4 0f       	add	r26, r20
    3e38:	b1 1d       	adc	r27, r1
    3e3a:	45 2d       	mov	r20, r5
    3e3c:	47 70       	andi	r20, 0x07	; 7
    3e3e:	8b 01       	movw	r16, r22
    3e40:	02 c0       	rjmp	.+4      	; 0x3e46 <conv_brk+0xac>
    3e42:	00 0f       	add	r16, r16
    3e44:	11 1f       	adc	r17, r17
    3e46:	4a 95       	dec	r20
    3e48:	e2 f7       	brpl	.-8      	; 0x3e42 <conv_brk+0xa8>
    3e4a:	a8 01       	movw	r20, r16
    3e4c:	5c 91       	ld	r21, X
    3e4e:	45 2b       	or	r20, r21
    3e50:	4c 93       	st	X, r20
    3e52:	65 14       	cp	r6, r5
    3e54:	59 f0       	breq	.+22     	; 0x3e6c <conv_brk+0xd2>
    3e56:	56 14       	cp	r5, r6
    3e58:	10 f4       	brcc	.+4      	; 0x3e5e <conv_brk+0xc4>
    3e5a:	53 94       	inc	r5
    3e5c:	e7 cf       	rjmp	.-50     	; 0x3e2c <conv_brk+0x92>
    3e5e:	5a 94       	dec	r5
    3e60:	e5 cf       	rjmp	.-54     	; 0x3e2c <conv_brk+0x92>
    3e62:	31 e0       	ldi	r19, 0x01	; 1
    3e64:	04 c0       	rjmp	.+8      	; 0x3e6e <conv_brk+0xd4>
    3e66:	77 24       	eor	r7, r7
    3e68:	73 94       	inc	r7
    3e6a:	01 c0       	rjmp	.+2      	; 0x3e6e <conv_brk+0xd4>
    3e6c:	71 2c       	mov	r7, r1
    3e6e:	01 96       	adiw	r24, 0x01	; 1
    3e70:	bf cf       	rjmp	.-130    	; 0x3df0 <conv_brk+0x56>
    3e72:	77 20       	and	r7, r7
    3e74:	19 f0       	breq	.+6      	; 0x3e7c <conv_brk+0xe2>
    3e76:	8e 81       	ldd	r24, Y+6	; 0x06
    3e78:	80 62       	ori	r24, 0x20	; 32
    3e7a:	8e 83       	std	Y+6, r24	; 0x06
    3e7c:	31 11       	cpse	r19, r1
    3e7e:	03 c0       	rjmp	.+6      	; 0x3e86 <conv_brk+0xec>
    3e80:	88 24       	eor	r8, r8
    3e82:	83 94       	inc	r8
    3e84:	17 c0       	rjmp	.+46     	; 0x3eb4 <conv_brk+0x11a>
    3e86:	f6 01       	movw	r30, r12
    3e88:	9e 01       	movw	r18, r28
    3e8a:	2f 5d       	subi	r18, 0xDF	; 223
    3e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8e:	80 81       	ld	r24, Z
    3e90:	80 95       	com	r24
    3e92:	81 93       	st	Z+, r24
    3e94:	2e 17       	cp	r18, r30
    3e96:	3f 07       	cpc	r19, r31
    3e98:	d1 f7       	brne	.-12     	; 0x3e8e <conv_brk+0xf4>
    3e9a:	f2 cf       	rjmp	.-28     	; 0x3e80 <conv_brk+0xe6>
    3e9c:	e1 14       	cp	r14, r1
    3e9e:	f1 04       	cpc	r15, r1
    3ea0:	29 f0       	breq	.+10     	; 0x3eac <conv_brk+0x112>
    3ea2:	d7 01       	movw	r26, r14
    3ea4:	8c 93       	st	X, r24
    3ea6:	f7 01       	movw	r30, r14
    3ea8:	31 96       	adiw	r30, 0x01	; 1
    3eaa:	7f 01       	movw	r14, r30
    3eac:	9a 94       	dec	r9
    3eae:	81 2c       	mov	r8, r1
    3eb0:	99 20       	and	r9, r9
    3eb2:	e9 f0       	breq	.+58     	; 0x3eee <conv_brk+0x154>
    3eb4:	c5 01       	movw	r24, r10
    3eb6:	cc d2       	rcall	.+1432   	; 0x4450 <fgetc>
    3eb8:	97 fd       	sbrc	r25, 7
    3eba:	17 c0       	rjmp	.+46     	; 0x3eea <conv_brk+0x150>
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	ff 27       	eor	r31, r31
    3ec0:	23 e0       	ldi	r18, 0x03	; 3
    3ec2:	f5 95       	asr	r31
    3ec4:	e7 95       	ror	r30
    3ec6:	2a 95       	dec	r18
    3ec8:	e1 f7       	brne	.-8      	; 0x3ec2 <conv_brk+0x128>
    3eca:	ec 0d       	add	r30, r12
    3ecc:	fd 1d       	adc	r31, r13
    3ece:	20 81       	ld	r18, Z
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	ac 01       	movw	r20, r24
    3ed4:	47 70       	andi	r20, 0x07	; 7
    3ed6:	55 27       	eor	r21, r21
    3ed8:	02 c0       	rjmp	.+4      	; 0x3ede <conv_brk+0x144>
    3eda:	35 95       	asr	r19
    3edc:	27 95       	ror	r18
    3ede:	4a 95       	dec	r20
    3ee0:	e2 f7       	brpl	.-8      	; 0x3eda <conv_brk+0x140>
    3ee2:	20 fd       	sbrc	r18, 0
    3ee4:	db cf       	rjmp	.-74     	; 0x3e9c <conv_brk+0x102>
    3ee6:	b5 01       	movw	r22, r10
    3ee8:	2d d3       	rcall	.+1626   	; 0x4544 <ungetc>
    3eea:	81 10       	cpse	r8, r1
    3eec:	89 cf       	rjmp	.-238    	; 0x3e00 <conv_brk+0x66>
    3eee:	e1 14       	cp	r14, r1
    3ef0:	f1 04       	cpc	r15, r1
    3ef2:	11 f0       	breq	.+4      	; 0x3ef8 <conv_brk+0x15e>
    3ef4:	d7 01       	movw	r26, r14
    3ef6:	1c 92       	st	X, r1
    3ef8:	c8 01       	movw	r24, r16
    3efa:	15 c0       	rjmp	.+42     	; 0x3f26 <conv_brk+0x18c>
    3efc:	42 2f       	mov	r20, r18
    3efe:	46 95       	lsr	r20
    3f00:	46 95       	lsr	r20
    3f02:	46 95       	lsr	r20
    3f04:	d6 01       	movw	r26, r12
    3f06:	a4 0f       	add	r26, r20
    3f08:	b1 1d       	adc	r27, r1
    3f0a:	42 2f       	mov	r20, r18
    3f0c:	47 70       	andi	r20, 0x07	; 7
    3f0e:	8b 01       	movw	r16, r22
    3f10:	02 c0       	rjmp	.+4      	; 0x3f16 <conv_brk+0x17c>
    3f12:	00 0f       	add	r16, r16
    3f14:	11 1f       	adc	r17, r17
    3f16:	4a 95       	dec	r20
    3f18:	e2 f7       	brpl	.-8      	; 0x3f12 <conv_brk+0x178>
    3f1a:	a8 01       	movw	r20, r16
    3f1c:	5c 91       	ld	r21, X
    3f1e:	45 2b       	or	r20, r21
    3f20:	4c 93       	st	X, r20
    3f22:	62 2e       	mov	r6, r18
    3f24:	a4 cf       	rjmp	.-184    	; 0x3e6e <conv_brk+0xd4>
    3f26:	a0 96       	adiw	r28, 0x20	; 32
    3f28:	cd bf       	out	0x3d, r28	; 61
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	1f 91       	pop	r17
    3f32:	0f 91       	pop	r16
    3f34:	ff 90       	pop	r15
    3f36:	ef 90       	pop	r14
    3f38:	df 90       	pop	r13
    3f3a:	cf 90       	pop	r12
    3f3c:	bf 90       	pop	r11
    3f3e:	af 90       	pop	r10
    3f40:	9f 90       	pop	r9
    3f42:	8f 90       	pop	r8
    3f44:	7f 90       	pop	r7
    3f46:	6f 90       	pop	r6
    3f48:	5f 90       	pop	r5
    3f4a:	08 95       	ret

00003f4c <vfscanf>:
    3f4c:	5f 92       	push	r5
    3f4e:	6f 92       	push	r6
    3f50:	7f 92       	push	r7
    3f52:	8f 92       	push	r8
    3f54:	9f 92       	push	r9
    3f56:	af 92       	push	r10
    3f58:	bf 92       	push	r11
    3f5a:	cf 92       	push	r12
    3f5c:	df 92       	push	r13
    3f5e:	ef 92       	push	r14
    3f60:	ff 92       	push	r15
    3f62:	0f 93       	push	r16
    3f64:	1f 93       	push	r17
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
    3f6a:	6c 01       	movw	r12, r24
    3f6c:	eb 01       	movw	r28, r22
    3f6e:	5a 01       	movw	r10, r20
    3f70:	fc 01       	movw	r30, r24
    3f72:	16 82       	std	Z+6, r1	; 0x06
    3f74:	17 82       	std	Z+7, r1	; 0x07
    3f76:	51 2c       	mov	r5, r1
    3f78:	f6 01       	movw	r30, r12
    3f7a:	e3 80       	ldd	r14, Z+3	; 0x03
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	e3 fc       	sbrc	r14, 3
    3f80:	85 91       	lpm	r24, Z+
    3f82:	e3 fe       	sbrs	r14, 3
    3f84:	81 91       	ld	r24, Z+
    3f86:	18 2f       	mov	r17, r24
    3f88:	ef 01       	movw	r28, r30
    3f8a:	88 23       	and	r24, r24
    3f8c:	09 f4       	brne	.+2      	; 0x3f90 <vfscanf+0x44>
    3f8e:	e0 c0       	rjmp	.+448    	; 0x4150 <__stack+0x151>
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	2e d2       	rcall	.+1116   	; 0x43f0 <isspace>
    3f94:	89 2b       	or	r24, r25
    3f96:	19 f0       	breq	.+6      	; 0x3f9e <vfscanf+0x52>
    3f98:	c6 01       	movw	r24, r12
    3f9a:	5f de       	rcall	.-834    	; 0x3c5a <skip_spaces>
    3f9c:	ed cf       	rjmp	.-38     	; 0x3f78 <vfscanf+0x2c>
    3f9e:	15 32       	cpi	r17, 0x25	; 37
    3fa0:	41 f4       	brne	.+16     	; 0x3fb2 <vfscanf+0x66>
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e3 fc       	sbrc	r14, 3
    3fa6:	15 91       	lpm	r17, Z+
    3fa8:	e3 fe       	sbrs	r14, 3
    3faa:	11 91       	ld	r17, Z+
    3fac:	ef 01       	movw	r28, r30
    3fae:	15 32       	cpi	r17, 0x25	; 37
    3fb0:	71 f4       	brne	.+28     	; 0x3fce <vfscanf+0x82>
    3fb2:	c6 01       	movw	r24, r12
    3fb4:	4d d2       	rcall	.+1178   	; 0x4450 <fgetc>
    3fb6:	97 fd       	sbrc	r25, 7
    3fb8:	c9 c0       	rjmp	.+402    	; 0x414c <__stack+0x14d>
    3fba:	41 2f       	mov	r20, r17
    3fbc:	50 e0       	ldi	r21, 0x00	; 0
    3fbe:	9c 01       	movw	r18, r24
    3fc0:	33 27       	eor	r19, r19
    3fc2:	24 17       	cp	r18, r20
    3fc4:	35 07       	cpc	r19, r21
    3fc6:	c1 f2       	breq	.-80     	; 0x3f78 <vfscanf+0x2c>
    3fc8:	b6 01       	movw	r22, r12
    3fca:	bc d2       	rcall	.+1400   	; 0x4544 <ungetc>
    3fcc:	c1 c0       	rjmp	.+386    	; 0x4150 <__stack+0x151>
    3fce:	1a 32       	cpi	r17, 0x2A	; 42
    3fd0:	39 f4       	brne	.+14     	; 0x3fe0 <vfscanf+0x94>
    3fd2:	e3 fc       	sbrc	r14, 3
    3fd4:	15 91       	lpm	r17, Z+
    3fd6:	e3 fe       	sbrs	r14, 3
    3fd8:	11 91       	ld	r17, Z+
    3fda:	ef 01       	movw	r28, r30
    3fdc:	01 e0       	ldi	r16, 0x01	; 1
    3fde:	01 c0       	rjmp	.+2      	; 0x3fe2 <vfscanf+0x96>
    3fe0:	00 e0       	ldi	r16, 0x00	; 0
    3fe2:	f1 2c       	mov	r15, r1
    3fe4:	20 ed       	ldi	r18, 0xD0	; 208
    3fe6:	21 0f       	add	r18, r17
    3fe8:	2a 30       	cpi	r18, 0x0A	; 10
    3fea:	78 f4       	brcc	.+30     	; 0x400a <__stack+0xb>
    3fec:	02 60       	ori	r16, 0x02	; 2
    3fee:	6f 2d       	mov	r22, r15
    3ff0:	70 e0       	ldi	r23, 0x00	; 0
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	40 e2       	ldi	r20, 0x20	; 32
    3ff8:	09 de       	rcall	.-1006   	; 0x3c0c <mulacc>
    3ffa:	f6 2e       	mov	r15, r22
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e3 fc       	sbrc	r14, 3
    4000:	15 91       	lpm	r17, Z+
    4002:	e3 fe       	sbrs	r14, 3
    4004:	11 91       	ld	r17, Z+
    4006:	ef 01       	movw	r28, r30
    4008:	ed cf       	rjmp	.-38     	; 0x3fe4 <vfscanf+0x98>
    400a:	01 ff       	sbrs	r16, 1
    400c:	03 c0       	rjmp	.+6      	; 0x4014 <__stack+0x15>
    400e:	f1 10       	cpse	r15, r1
    4010:	03 c0       	rjmp	.+6      	; 0x4018 <__stack+0x19>
    4012:	9e c0       	rjmp	.+316    	; 0x4150 <__stack+0x151>
    4014:	ff 24       	eor	r15, r15
    4016:	fa 94       	dec	r15
    4018:	18 36       	cpi	r17, 0x68	; 104
    401a:	19 f0       	breq	.+6      	; 0x4022 <__stack+0x23>
    401c:	1c 36       	cpi	r17, 0x6C	; 108
    401e:	51 f0       	breq	.+20     	; 0x4034 <__stack+0x35>
    4020:	10 c0       	rjmp	.+32     	; 0x4042 <__stack+0x43>
    4022:	fe 01       	movw	r30, r28
    4024:	e3 fc       	sbrc	r14, 3
    4026:	15 91       	lpm	r17, Z+
    4028:	e3 fe       	sbrs	r14, 3
    402a:	11 91       	ld	r17, Z+
    402c:	ef 01       	movw	r28, r30
    402e:	18 36       	cpi	r17, 0x68	; 104
    4030:	41 f4       	brne	.+16     	; 0x4042 <__stack+0x43>
    4032:	08 60       	ori	r16, 0x08	; 8
    4034:	04 60       	ori	r16, 0x04	; 4
    4036:	fe 01       	movw	r30, r28
    4038:	e3 fc       	sbrc	r14, 3
    403a:	15 91       	lpm	r17, Z+
    403c:	e3 fe       	sbrs	r14, 3
    403e:	11 91       	ld	r17, Z+
    4040:	ef 01       	movw	r28, r30
    4042:	11 23       	and	r17, r17
    4044:	09 f4       	brne	.+2      	; 0x4048 <__stack+0x49>
    4046:	84 c0       	rjmp	.+264    	; 0x4150 <__stack+0x151>
    4048:	61 2f       	mov	r22, r17
    404a:	70 e0       	ldi	r23, 0x00	; 0
    404c:	8e e7       	ldi	r24, 0x7E	; 126
    404e:	92 e0       	ldi	r25, 0x02	; 2
    4050:	d7 d1       	rcall	.+942    	; 0x4400 <strchr_P>
    4052:	89 2b       	or	r24, r25
    4054:	09 f4       	brne	.+2      	; 0x4058 <__stack+0x59>
    4056:	7c c0       	rjmp	.+248    	; 0x4150 <__stack+0x151>
    4058:	00 fd       	sbrc	r16, 0
    405a:	07 c0       	rjmp	.+14     	; 0x406a <__stack+0x6b>
    405c:	f5 01       	movw	r30, r10
    405e:	80 80       	ld	r8, Z
    4060:	91 80       	ldd	r9, Z+1	; 0x01
    4062:	c5 01       	movw	r24, r10
    4064:	02 96       	adiw	r24, 0x02	; 2
    4066:	5c 01       	movw	r10, r24
    4068:	02 c0       	rjmp	.+4      	; 0x406e <__stack+0x6f>
    406a:	81 2c       	mov	r8, r1
    406c:	91 2c       	mov	r9, r1
    406e:	1e 36       	cpi	r17, 0x6E	; 110
    4070:	49 f4       	brne	.+18     	; 0x4084 <__stack+0x85>
    4072:	f6 01       	movw	r30, r12
    4074:	46 81       	ldd	r20, Z+6	; 0x06
    4076:	57 81       	ldd	r21, Z+7	; 0x07
    4078:	60 e0       	ldi	r22, 0x00	; 0
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	20 2f       	mov	r18, r16
    407e:	c4 01       	movw	r24, r8
    4080:	b9 dd       	rcall	.-1166   	; 0x3bf4 <putval>
    4082:	7a cf       	rjmp	.-268    	; 0x3f78 <vfscanf+0x2c>
    4084:	13 36       	cpi	r17, 0x63	; 99
    4086:	a1 f4       	brne	.+40     	; 0x40b0 <__stack+0xb1>
    4088:	01 fd       	sbrc	r16, 1
    408a:	02 c0       	rjmp	.+4      	; 0x4090 <__stack+0x91>
    408c:	ff 24       	eor	r15, r15
    408e:	f3 94       	inc	r15
    4090:	c6 01       	movw	r24, r12
    4092:	de d1       	rcall	.+956    	; 0x4450 <fgetc>
    4094:	97 fd       	sbrc	r25, 7
    4096:	5a c0       	rjmp	.+180    	; 0x414c <__stack+0x14d>
    4098:	81 14       	cp	r8, r1
    409a:	91 04       	cpc	r9, r1
    409c:	29 f0       	breq	.+10     	; 0x40a8 <__stack+0xa9>
    409e:	f4 01       	movw	r30, r8
    40a0:	80 83       	st	Z, r24
    40a2:	c4 01       	movw	r24, r8
    40a4:	01 96       	adiw	r24, 0x01	; 1
    40a6:	4c 01       	movw	r8, r24
    40a8:	fa 94       	dec	r15
    40aa:	f1 10       	cpse	r15, r1
    40ac:	f1 cf       	rjmp	.-30     	; 0x4090 <__stack+0x91>
    40ae:	4a c0       	rjmp	.+148    	; 0x4144 <__stack+0x145>
    40b0:	1b 35       	cpi	r17, 0x5B	; 91
    40b2:	51 f4       	brne	.+20     	; 0x40c8 <__stack+0xc9>
    40b4:	9e 01       	movw	r18, r28
    40b6:	a4 01       	movw	r20, r8
    40b8:	6f 2d       	mov	r22, r15
    40ba:	c6 01       	movw	r24, r12
    40bc:	6e de       	rcall	.-804    	; 0x3d9a <conv_brk>
    40be:	ec 01       	movw	r28, r24
    40c0:	89 2b       	or	r24, r25
    40c2:	09 f0       	breq	.+2      	; 0x40c6 <__stack+0xc7>
    40c4:	3f c0       	rjmp	.+126    	; 0x4144 <__stack+0x145>
    40c6:	39 c0       	rjmp	.+114    	; 0x413a <__stack+0x13b>
    40c8:	c6 01       	movw	r24, r12
    40ca:	c7 dd       	rcall	.-1138   	; 0x3c5a <skip_spaces>
    40cc:	97 fd       	sbrc	r25, 7
    40ce:	3e c0       	rjmp	.+124    	; 0x414c <__stack+0x14d>
    40d0:	1f 36       	cpi	r17, 0x6F	; 111
    40d2:	49 f1       	breq	.+82     	; 0x4126 <__stack+0x127>
    40d4:	28 f4       	brcc	.+10     	; 0x40e0 <__stack+0xe1>
    40d6:	14 36       	cpi	r17, 0x64	; 100
    40d8:	21 f1       	breq	.+72     	; 0x4122 <__stack+0x123>
    40da:	19 36       	cpi	r17, 0x69	; 105
    40dc:	39 f1       	breq	.+78     	; 0x412c <__stack+0x12d>
    40de:	25 c0       	rjmp	.+74     	; 0x412a <__stack+0x12b>
    40e0:	13 37       	cpi	r17, 0x73	; 115
    40e2:	71 f0       	breq	.+28     	; 0x4100 <__stack+0x101>
    40e4:	15 37       	cpi	r17, 0x75	; 117
    40e6:	e9 f0       	breq	.+58     	; 0x4122 <__stack+0x123>
    40e8:	20 c0       	rjmp	.+64     	; 0x412a <__stack+0x12b>
    40ea:	81 14       	cp	r8, r1
    40ec:	91 04       	cpc	r9, r1
    40ee:	29 f0       	breq	.+10     	; 0x40fa <__stack+0xfb>
    40f0:	f4 01       	movw	r30, r8
    40f2:	60 82       	st	Z, r6
    40f4:	c4 01       	movw	r24, r8
    40f6:	01 96       	adiw	r24, 0x01	; 1
    40f8:	4c 01       	movw	r8, r24
    40fa:	fa 94       	dec	r15
    40fc:	ff 20       	and	r15, r15
    40fe:	59 f0       	breq	.+22     	; 0x4116 <__stack+0x117>
    4100:	c6 01       	movw	r24, r12
    4102:	a6 d1       	rcall	.+844    	; 0x4450 <fgetc>
    4104:	3c 01       	movw	r6, r24
    4106:	97 fd       	sbrc	r25, 7
    4108:	06 c0       	rjmp	.+12     	; 0x4116 <__stack+0x117>
    410a:	72 d1       	rcall	.+740    	; 0x43f0 <isspace>
    410c:	89 2b       	or	r24, r25
    410e:	69 f3       	breq	.-38     	; 0x40ea <__stack+0xeb>
    4110:	b6 01       	movw	r22, r12
    4112:	c3 01       	movw	r24, r6
    4114:	17 d2       	rcall	.+1070   	; 0x4544 <ungetc>
    4116:	81 14       	cp	r8, r1
    4118:	91 04       	cpc	r9, r1
    411a:	a1 f0       	breq	.+40     	; 0x4144 <__stack+0x145>
    411c:	f4 01       	movw	r30, r8
    411e:	10 82       	st	Z, r1
    4120:	11 c0       	rjmp	.+34     	; 0x4144 <__stack+0x145>
    4122:	00 62       	ori	r16, 0x20	; 32
    4124:	03 c0       	rjmp	.+6      	; 0x412c <__stack+0x12d>
    4126:	00 61       	ori	r16, 0x10	; 16
    4128:	01 c0       	rjmp	.+2      	; 0x412c <__stack+0x12d>
    412a:	00 64       	ori	r16, 0x40	; 64
    412c:	20 2f       	mov	r18, r16
    412e:	a4 01       	movw	r20, r8
    4130:	6f 2d       	mov	r22, r15
    4132:	c6 01       	movw	r24, r12
    4134:	a8 dd       	rcall	.-1200   	; 0x3c86 <conv_int>
    4136:	81 11       	cpse	r24, r1
    4138:	05 c0       	rjmp	.+10     	; 0x4144 <__stack+0x145>
    413a:	f6 01       	movw	r30, r12
    413c:	83 81       	ldd	r24, Z+3	; 0x03
    413e:	80 73       	andi	r24, 0x30	; 48
    4140:	29 f4       	brne	.+10     	; 0x414c <__stack+0x14d>
    4142:	06 c0       	rjmp	.+12     	; 0x4150 <__stack+0x151>
    4144:	00 fd       	sbrc	r16, 0
    4146:	18 cf       	rjmp	.-464    	; 0x3f78 <vfscanf+0x2c>
    4148:	53 94       	inc	r5
    414a:	16 cf       	rjmp	.-468    	; 0x3f78 <vfscanf+0x2c>
    414c:	55 20       	and	r5, r5
    414e:	19 f0       	breq	.+6      	; 0x4156 <__stack+0x157>
    4150:	85 2d       	mov	r24, r5
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	02 c0       	rjmp	.+4      	; 0x415a <__stack+0x15b>
    4156:	8f ef       	ldi	r24, 0xFF	; 255
    4158:	9f ef       	ldi	r25, 0xFF	; 255
    415a:	df 91       	pop	r29
    415c:	cf 91       	pop	r28
    415e:	1f 91       	pop	r17
    4160:	0f 91       	pop	r16
    4162:	ff 90       	pop	r15
    4164:	ef 90       	pop	r14
    4166:	df 90       	pop	r13
    4168:	cf 90       	pop	r12
    416a:	bf 90       	pop	r11
    416c:	af 90       	pop	r10
    416e:	9f 90       	pop	r9
    4170:	8f 90       	pop	r8
    4172:	7f 90       	pop	r7
    4174:	6f 90       	pop	r6
    4176:	5f 90       	pop	r5
    4178:	08 95       	ret

0000417a <calloc>:
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	86 9f       	mul	r24, r22
    4184:	80 01       	movw	r16, r0
    4186:	87 9f       	mul	r24, r23
    4188:	10 0d       	add	r17, r0
    418a:	96 9f       	mul	r25, r22
    418c:	10 0d       	add	r17, r0
    418e:	11 24       	eor	r1, r1
    4190:	c8 01       	movw	r24, r16
    4192:	0d d0       	rcall	.+26     	; 0x41ae <malloc>
    4194:	ec 01       	movw	r28, r24
    4196:	00 97       	sbiw	r24, 0x00	; 0
    4198:	21 f0       	breq	.+8      	; 0x41a2 <calloc+0x28>
    419a:	a8 01       	movw	r20, r16
    419c:	60 e0       	ldi	r22, 0x00	; 0
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	45 d1       	rcall	.+650    	; 0x442c <memset>
    41a2:	ce 01       	movw	r24, r28
    41a4:	df 91       	pop	r29
    41a6:	cf 91       	pop	r28
    41a8:	1f 91       	pop	r17
    41aa:	0f 91       	pop	r16
    41ac:	08 95       	ret

000041ae <malloc>:
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	82 30       	cpi	r24, 0x02	; 2
    41b8:	91 05       	cpc	r25, r1
    41ba:	10 f4       	brcc	.+4      	; 0x41c0 <malloc+0x12>
    41bc:	82 e0       	ldi	r24, 0x02	; 2
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	e0 91 8c 21 	lds	r30, 0x218C	; 0x80218c <__flp>
    41c4:	f0 91 8d 21 	lds	r31, 0x218D	; 0x80218d <__flp+0x1>
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	a0 e0       	ldi	r26, 0x00	; 0
    41ce:	b0 e0       	ldi	r27, 0x00	; 0
    41d0:	30 97       	sbiw	r30, 0x00	; 0
    41d2:	19 f1       	breq	.+70     	; 0x421a <malloc+0x6c>
    41d4:	40 81       	ld	r20, Z
    41d6:	51 81       	ldd	r21, Z+1	; 0x01
    41d8:	02 81       	ldd	r16, Z+2	; 0x02
    41da:	13 81       	ldd	r17, Z+3	; 0x03
    41dc:	48 17       	cp	r20, r24
    41de:	59 07       	cpc	r21, r25
    41e0:	c8 f0       	brcs	.+50     	; 0x4214 <malloc+0x66>
    41e2:	84 17       	cp	r24, r20
    41e4:	95 07       	cpc	r25, r21
    41e6:	69 f4       	brne	.+26     	; 0x4202 <malloc+0x54>
    41e8:	10 97       	sbiw	r26, 0x00	; 0
    41ea:	31 f0       	breq	.+12     	; 0x41f8 <malloc+0x4a>
    41ec:	12 96       	adiw	r26, 0x02	; 2
    41ee:	0c 93       	st	X, r16
    41f0:	12 97       	sbiw	r26, 0x02	; 2
    41f2:	13 96       	adiw	r26, 0x03	; 3
    41f4:	1c 93       	st	X, r17
    41f6:	27 c0       	rjmp	.+78     	; 0x4246 <malloc+0x98>
    41f8:	00 93 8c 21 	sts	0x218C, r16	; 0x80218c <__flp>
    41fc:	10 93 8d 21 	sts	0x218D, r17	; 0x80218d <__flp+0x1>
    4200:	22 c0       	rjmp	.+68     	; 0x4246 <malloc+0x98>
    4202:	21 15       	cp	r18, r1
    4204:	31 05       	cpc	r19, r1
    4206:	19 f0       	breq	.+6      	; 0x420e <malloc+0x60>
    4208:	42 17       	cp	r20, r18
    420a:	53 07       	cpc	r21, r19
    420c:	18 f4       	brcc	.+6      	; 0x4214 <malloc+0x66>
    420e:	9a 01       	movw	r18, r20
    4210:	bd 01       	movw	r22, r26
    4212:	ef 01       	movw	r28, r30
    4214:	df 01       	movw	r26, r30
    4216:	f8 01       	movw	r30, r16
    4218:	db cf       	rjmp	.-74     	; 0x41d0 <malloc+0x22>
    421a:	21 15       	cp	r18, r1
    421c:	31 05       	cpc	r19, r1
    421e:	f9 f0       	breq	.+62     	; 0x425e <malloc+0xb0>
    4220:	28 1b       	sub	r18, r24
    4222:	39 0b       	sbc	r19, r25
    4224:	24 30       	cpi	r18, 0x04	; 4
    4226:	31 05       	cpc	r19, r1
    4228:	80 f4       	brcc	.+32     	; 0x424a <malloc+0x9c>
    422a:	8a 81       	ldd	r24, Y+2	; 0x02
    422c:	9b 81       	ldd	r25, Y+3	; 0x03
    422e:	61 15       	cp	r22, r1
    4230:	71 05       	cpc	r23, r1
    4232:	21 f0       	breq	.+8      	; 0x423c <malloc+0x8e>
    4234:	fb 01       	movw	r30, r22
    4236:	82 83       	std	Z+2, r24	; 0x02
    4238:	93 83       	std	Z+3, r25	; 0x03
    423a:	04 c0       	rjmp	.+8      	; 0x4244 <malloc+0x96>
    423c:	80 93 8c 21 	sts	0x218C, r24	; 0x80218c <__flp>
    4240:	90 93 8d 21 	sts	0x218D, r25	; 0x80218d <__flp+0x1>
    4244:	fe 01       	movw	r30, r28
    4246:	32 96       	adiw	r30, 0x02	; 2
    4248:	44 c0       	rjmp	.+136    	; 0x42d2 <malloc+0x124>
    424a:	fe 01       	movw	r30, r28
    424c:	e2 0f       	add	r30, r18
    424e:	f3 1f       	adc	r31, r19
    4250:	81 93       	st	Z+, r24
    4252:	91 93       	st	Z+, r25
    4254:	22 50       	subi	r18, 0x02	; 2
    4256:	31 09       	sbc	r19, r1
    4258:	28 83       	st	Y, r18
    425a:	39 83       	std	Y+1, r19	; 0x01
    425c:	3a c0       	rjmp	.+116    	; 0x42d2 <malloc+0x124>
    425e:	20 91 8a 21 	lds	r18, 0x218A	; 0x80218a <__brkval>
    4262:	30 91 8b 21 	lds	r19, 0x218B	; 0x80218b <__brkval+0x1>
    4266:	23 2b       	or	r18, r19
    4268:	41 f4       	brne	.+16     	; 0x427a <malloc+0xcc>
    426a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    426e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4272:	20 93 8a 21 	sts	0x218A, r18	; 0x80218a <__brkval>
    4276:	30 93 8b 21 	sts	0x218B, r19	; 0x80218b <__brkval+0x1>
    427a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    427e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4282:	21 15       	cp	r18, r1
    4284:	31 05       	cpc	r19, r1
    4286:	41 f4       	brne	.+16     	; 0x4298 <malloc+0xea>
    4288:	2d b7       	in	r18, 0x3d	; 61
    428a:	3e b7       	in	r19, 0x3e	; 62
    428c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4290:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4294:	24 1b       	sub	r18, r20
    4296:	35 0b       	sbc	r19, r21
    4298:	e0 91 8a 21 	lds	r30, 0x218A	; 0x80218a <__brkval>
    429c:	f0 91 8b 21 	lds	r31, 0x218B	; 0x80218b <__brkval+0x1>
    42a0:	e2 17       	cp	r30, r18
    42a2:	f3 07       	cpc	r31, r19
    42a4:	a0 f4       	brcc	.+40     	; 0x42ce <malloc+0x120>
    42a6:	2e 1b       	sub	r18, r30
    42a8:	3f 0b       	sbc	r19, r31
    42aa:	28 17       	cp	r18, r24
    42ac:	39 07       	cpc	r19, r25
    42ae:	78 f0       	brcs	.+30     	; 0x42ce <malloc+0x120>
    42b0:	ac 01       	movw	r20, r24
    42b2:	4e 5f       	subi	r20, 0xFE	; 254
    42b4:	5f 4f       	sbci	r21, 0xFF	; 255
    42b6:	24 17       	cp	r18, r20
    42b8:	35 07       	cpc	r19, r21
    42ba:	48 f0       	brcs	.+18     	; 0x42ce <malloc+0x120>
    42bc:	4e 0f       	add	r20, r30
    42be:	5f 1f       	adc	r21, r31
    42c0:	40 93 8a 21 	sts	0x218A, r20	; 0x80218a <__brkval>
    42c4:	50 93 8b 21 	sts	0x218B, r21	; 0x80218b <__brkval+0x1>
    42c8:	81 93       	st	Z+, r24
    42ca:	91 93       	st	Z+, r25
    42cc:	02 c0       	rjmp	.+4      	; 0x42d2 <malloc+0x124>
    42ce:	e0 e0       	ldi	r30, 0x00	; 0
    42d0:	f0 e0       	ldi	r31, 0x00	; 0
    42d2:	cf 01       	movw	r24, r30
    42d4:	df 91       	pop	r29
    42d6:	cf 91       	pop	r28
    42d8:	1f 91       	pop	r17
    42da:	0f 91       	pop	r16
    42dc:	08 95       	ret

000042de <free>:
    42de:	cf 93       	push	r28
    42e0:	df 93       	push	r29
    42e2:	00 97       	sbiw	r24, 0x00	; 0
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <free+0xa>
    42e6:	81 c0       	rjmp	.+258    	; 0x43ea <free+0x10c>
    42e8:	fc 01       	movw	r30, r24
    42ea:	32 97       	sbiw	r30, 0x02	; 2
    42ec:	12 82       	std	Z+2, r1	; 0x02
    42ee:	13 82       	std	Z+3, r1	; 0x03
    42f0:	a0 91 8c 21 	lds	r26, 0x218C	; 0x80218c <__flp>
    42f4:	b0 91 8d 21 	lds	r27, 0x218D	; 0x80218d <__flp+0x1>
    42f8:	10 97       	sbiw	r26, 0x00	; 0
    42fa:	81 f4       	brne	.+32     	; 0x431c <free+0x3e>
    42fc:	20 81       	ld	r18, Z
    42fe:	31 81       	ldd	r19, Z+1	; 0x01
    4300:	82 0f       	add	r24, r18
    4302:	93 1f       	adc	r25, r19
    4304:	20 91 8a 21 	lds	r18, 0x218A	; 0x80218a <__brkval>
    4308:	30 91 8b 21 	lds	r19, 0x218B	; 0x80218b <__brkval+0x1>
    430c:	28 17       	cp	r18, r24
    430e:	39 07       	cpc	r19, r25
    4310:	51 f5       	brne	.+84     	; 0x4366 <free+0x88>
    4312:	e0 93 8a 21 	sts	0x218A, r30	; 0x80218a <__brkval>
    4316:	f0 93 8b 21 	sts	0x218B, r31	; 0x80218b <__brkval+0x1>
    431a:	67 c0       	rjmp	.+206    	; 0x43ea <free+0x10c>
    431c:	ed 01       	movw	r28, r26
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	ce 17       	cp	r28, r30
    4324:	df 07       	cpc	r29, r31
    4326:	40 f4       	brcc	.+16     	; 0x4338 <free+0x5a>
    4328:	4a 81       	ldd	r20, Y+2	; 0x02
    432a:	5b 81       	ldd	r21, Y+3	; 0x03
    432c:	9e 01       	movw	r18, r28
    432e:	41 15       	cp	r20, r1
    4330:	51 05       	cpc	r21, r1
    4332:	f1 f0       	breq	.+60     	; 0x4370 <free+0x92>
    4334:	ea 01       	movw	r28, r20
    4336:	f5 cf       	rjmp	.-22     	; 0x4322 <free+0x44>
    4338:	c2 83       	std	Z+2, r28	; 0x02
    433a:	d3 83       	std	Z+3, r29	; 0x03
    433c:	40 81       	ld	r20, Z
    433e:	51 81       	ldd	r21, Z+1	; 0x01
    4340:	84 0f       	add	r24, r20
    4342:	95 1f       	adc	r25, r21
    4344:	c8 17       	cp	r28, r24
    4346:	d9 07       	cpc	r29, r25
    4348:	59 f4       	brne	.+22     	; 0x4360 <free+0x82>
    434a:	88 81       	ld	r24, Y
    434c:	99 81       	ldd	r25, Y+1	; 0x01
    434e:	84 0f       	add	r24, r20
    4350:	95 1f       	adc	r25, r21
    4352:	02 96       	adiw	r24, 0x02	; 2
    4354:	80 83       	st	Z, r24
    4356:	91 83       	std	Z+1, r25	; 0x01
    4358:	8a 81       	ldd	r24, Y+2	; 0x02
    435a:	9b 81       	ldd	r25, Y+3	; 0x03
    435c:	82 83       	std	Z+2, r24	; 0x02
    435e:	93 83       	std	Z+3, r25	; 0x03
    4360:	21 15       	cp	r18, r1
    4362:	31 05       	cpc	r19, r1
    4364:	29 f4       	brne	.+10     	; 0x4370 <free+0x92>
    4366:	e0 93 8c 21 	sts	0x218C, r30	; 0x80218c <__flp>
    436a:	f0 93 8d 21 	sts	0x218D, r31	; 0x80218d <__flp+0x1>
    436e:	3d c0       	rjmp	.+122    	; 0x43ea <free+0x10c>
    4370:	e9 01       	movw	r28, r18
    4372:	ea 83       	std	Y+2, r30	; 0x02
    4374:	fb 83       	std	Y+3, r31	; 0x03
    4376:	49 91       	ld	r20, Y+
    4378:	59 91       	ld	r21, Y+
    437a:	c4 0f       	add	r28, r20
    437c:	d5 1f       	adc	r29, r21
    437e:	ec 17       	cp	r30, r28
    4380:	fd 07       	cpc	r31, r29
    4382:	61 f4       	brne	.+24     	; 0x439c <free+0xbe>
    4384:	80 81       	ld	r24, Z
    4386:	91 81       	ldd	r25, Z+1	; 0x01
    4388:	84 0f       	add	r24, r20
    438a:	95 1f       	adc	r25, r21
    438c:	02 96       	adiw	r24, 0x02	; 2
    438e:	e9 01       	movw	r28, r18
    4390:	88 83       	st	Y, r24
    4392:	99 83       	std	Y+1, r25	; 0x01
    4394:	82 81       	ldd	r24, Z+2	; 0x02
    4396:	93 81       	ldd	r25, Z+3	; 0x03
    4398:	8a 83       	std	Y+2, r24	; 0x02
    439a:	9b 83       	std	Y+3, r25	; 0x03
    439c:	e0 e0       	ldi	r30, 0x00	; 0
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	12 96       	adiw	r26, 0x02	; 2
    43a2:	8d 91       	ld	r24, X+
    43a4:	9c 91       	ld	r25, X
    43a6:	13 97       	sbiw	r26, 0x03	; 3
    43a8:	00 97       	sbiw	r24, 0x00	; 0
    43aa:	19 f0       	breq	.+6      	; 0x43b2 <free+0xd4>
    43ac:	fd 01       	movw	r30, r26
    43ae:	dc 01       	movw	r26, r24
    43b0:	f7 cf       	rjmp	.-18     	; 0x43a0 <free+0xc2>
    43b2:	8d 91       	ld	r24, X+
    43b4:	9c 91       	ld	r25, X
    43b6:	11 97       	sbiw	r26, 0x01	; 1
    43b8:	9d 01       	movw	r18, r26
    43ba:	2e 5f       	subi	r18, 0xFE	; 254
    43bc:	3f 4f       	sbci	r19, 0xFF	; 255
    43be:	82 0f       	add	r24, r18
    43c0:	93 1f       	adc	r25, r19
    43c2:	20 91 8a 21 	lds	r18, 0x218A	; 0x80218a <__brkval>
    43c6:	30 91 8b 21 	lds	r19, 0x218B	; 0x80218b <__brkval+0x1>
    43ca:	28 17       	cp	r18, r24
    43cc:	39 07       	cpc	r19, r25
    43ce:	69 f4       	brne	.+26     	; 0x43ea <free+0x10c>
    43d0:	30 97       	sbiw	r30, 0x00	; 0
    43d2:	29 f4       	brne	.+10     	; 0x43de <free+0x100>
    43d4:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <__flp>
    43d8:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <__flp+0x1>
    43dc:	02 c0       	rjmp	.+4      	; 0x43e2 <free+0x104>
    43de:	12 82       	std	Z+2, r1	; 0x02
    43e0:	13 82       	std	Z+3, r1	; 0x03
    43e2:	a0 93 8a 21 	sts	0x218A, r26	; 0x80218a <__brkval>
    43e6:	b0 93 8b 21 	sts	0x218B, r27	; 0x80218b <__brkval+0x1>
    43ea:	df 91       	pop	r29
    43ec:	cf 91       	pop	r28
    43ee:	08 95       	ret

000043f0 <isspace>:
    43f0:	91 11       	cpse	r25, r1
    43f2:	1f c1       	rjmp	.+574    	; 0x4632 <__ctype_isfalse>
    43f4:	80 32       	cpi	r24, 0x20	; 32
    43f6:	19 f0       	breq	.+6      	; 0x43fe <isspace+0xe>
    43f8:	89 50       	subi	r24, 0x09	; 9
    43fa:	85 50       	subi	r24, 0x05	; 5
    43fc:	d0 f7       	brcc	.-12     	; 0x43f2 <isspace+0x2>
    43fe:	08 95       	ret

00004400 <strchr_P>:
    4400:	fc 01       	movw	r30, r24
    4402:	05 90       	lpm	r0, Z+
    4404:	06 16       	cp	r0, r22
    4406:	21 f0       	breq	.+8      	; 0x4410 <strchr_P+0x10>
    4408:	00 20       	and	r0, r0
    440a:	d9 f7       	brne	.-10     	; 0x4402 <strchr_P+0x2>
    440c:	c0 01       	movw	r24, r0
    440e:	08 95       	ret
    4410:	31 97       	sbiw	r30, 0x01	; 1
    4412:	cf 01       	movw	r24, r30
    4414:	08 95       	ret

00004416 <strnlen_P>:
    4416:	fc 01       	movw	r30, r24
    4418:	05 90       	lpm	r0, Z+
    441a:	61 50       	subi	r22, 0x01	; 1
    441c:	70 40       	sbci	r23, 0x00	; 0
    441e:	01 10       	cpse	r0, r1
    4420:	d8 f7       	brcc	.-10     	; 0x4418 <strnlen_P+0x2>
    4422:	80 95       	com	r24
    4424:	90 95       	com	r25
    4426:	8e 0f       	add	r24, r30
    4428:	9f 1f       	adc	r25, r31
    442a:	08 95       	ret

0000442c <memset>:
    442c:	dc 01       	movw	r26, r24
    442e:	01 c0       	rjmp	.+2      	; 0x4432 <memset+0x6>
    4430:	6d 93       	st	X+, r22
    4432:	41 50       	subi	r20, 0x01	; 1
    4434:	50 40       	sbci	r21, 0x00	; 0
    4436:	e0 f7       	brcc	.-8      	; 0x4430 <memset+0x4>
    4438:	08 95       	ret

0000443a <strnlen>:
    443a:	fc 01       	movw	r30, r24
    443c:	61 50       	subi	r22, 0x01	; 1
    443e:	70 40       	sbci	r23, 0x00	; 0
    4440:	01 90       	ld	r0, Z+
    4442:	01 10       	cpse	r0, r1
    4444:	d8 f7       	brcc	.-10     	; 0x443c <strnlen+0x2>
    4446:	80 95       	com	r24
    4448:	90 95       	com	r25
    444a:	8e 0f       	add	r24, r30
    444c:	9f 1f       	adc	r25, r31
    444e:	08 95       	ret

00004450 <fgetc>:
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	ec 01       	movw	r28, r24
    4456:	2b 81       	ldd	r18, Y+3	; 0x03
    4458:	20 ff       	sbrs	r18, 0
    445a:	33 c0       	rjmp	.+102    	; 0x44c2 <fgetc+0x72>
    445c:	26 ff       	sbrs	r18, 6
    445e:	0a c0       	rjmp	.+20     	; 0x4474 <fgetc+0x24>
    4460:	2f 7b       	andi	r18, 0xBF	; 191
    4462:	2b 83       	std	Y+3, r18	; 0x03
    4464:	8e 81       	ldd	r24, Y+6	; 0x06
    4466:	9f 81       	ldd	r25, Y+7	; 0x07
    4468:	01 96       	adiw	r24, 0x01	; 1
    446a:	8e 83       	std	Y+6, r24	; 0x06
    446c:	9f 83       	std	Y+7, r25	; 0x07
    446e:	8a 81       	ldd	r24, Y+2	; 0x02
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	29 c0       	rjmp	.+82     	; 0x44c6 <fgetc+0x76>
    4474:	22 ff       	sbrs	r18, 2
    4476:	0f c0       	rjmp	.+30     	; 0x4496 <fgetc+0x46>
    4478:	e8 81       	ld	r30, Y
    447a:	f9 81       	ldd	r31, Y+1	; 0x01
    447c:	80 81       	ld	r24, Z
    447e:	08 2e       	mov	r0, r24
    4480:	00 0c       	add	r0, r0
    4482:	99 0b       	sbc	r25, r25
    4484:	00 97       	sbiw	r24, 0x00	; 0
    4486:	19 f4       	brne	.+6      	; 0x448e <fgetc+0x3e>
    4488:	20 62       	ori	r18, 0x20	; 32
    448a:	2b 83       	std	Y+3, r18	; 0x03
    448c:	1a c0       	rjmp	.+52     	; 0x44c2 <fgetc+0x72>
    448e:	31 96       	adiw	r30, 0x01	; 1
    4490:	e8 83       	st	Y, r30
    4492:	f9 83       	std	Y+1, r31	; 0x01
    4494:	0e c0       	rjmp	.+28     	; 0x44b2 <fgetc+0x62>
    4496:	ea 85       	ldd	r30, Y+10	; 0x0a
    4498:	fb 85       	ldd	r31, Y+11	; 0x0b
    449a:	19 95       	eicall
    449c:	97 ff       	sbrs	r25, 7
    449e:	09 c0       	rjmp	.+18     	; 0x44b2 <fgetc+0x62>
    44a0:	2b 81       	ldd	r18, Y+3	; 0x03
    44a2:	01 96       	adiw	r24, 0x01	; 1
    44a4:	11 f0       	breq	.+4      	; 0x44aa <fgetc+0x5a>
    44a6:	80 e2       	ldi	r24, 0x20	; 32
    44a8:	01 c0       	rjmp	.+2      	; 0x44ac <fgetc+0x5c>
    44aa:	80 e1       	ldi	r24, 0x10	; 16
    44ac:	82 2b       	or	r24, r18
    44ae:	8b 83       	std	Y+3, r24	; 0x03
    44b0:	08 c0       	rjmp	.+16     	; 0x44c2 <fgetc+0x72>
    44b2:	2e 81       	ldd	r18, Y+6	; 0x06
    44b4:	3f 81       	ldd	r19, Y+7	; 0x07
    44b6:	2f 5f       	subi	r18, 0xFF	; 255
    44b8:	3f 4f       	sbci	r19, 0xFF	; 255
    44ba:	2e 83       	std	Y+6, r18	; 0x06
    44bc:	3f 83       	std	Y+7, r19	; 0x07
    44be:	99 27       	eor	r25, r25
    44c0:	02 c0       	rjmp	.+4      	; 0x44c6 <fgetc+0x76>
    44c2:	8f ef       	ldi	r24, 0xFF	; 255
    44c4:	9f ef       	ldi	r25, 0xFF	; 255
    44c6:	df 91       	pop	r29
    44c8:	cf 91       	pop	r28
    44ca:	08 95       	ret

000044cc <fputc>:
    44cc:	0f 93       	push	r16
    44ce:	1f 93       	push	r17
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	fb 01       	movw	r30, r22
    44d6:	23 81       	ldd	r18, Z+3	; 0x03
    44d8:	21 fd       	sbrc	r18, 1
    44da:	03 c0       	rjmp	.+6      	; 0x44e2 <fputc+0x16>
    44dc:	8f ef       	ldi	r24, 0xFF	; 255
    44de:	9f ef       	ldi	r25, 0xFF	; 255
    44e0:	2c c0       	rjmp	.+88     	; 0x453a <fputc+0x6e>
    44e2:	22 ff       	sbrs	r18, 2
    44e4:	16 c0       	rjmp	.+44     	; 0x4512 <fputc+0x46>
    44e6:	46 81       	ldd	r20, Z+6	; 0x06
    44e8:	57 81       	ldd	r21, Z+7	; 0x07
    44ea:	24 81       	ldd	r18, Z+4	; 0x04
    44ec:	35 81       	ldd	r19, Z+5	; 0x05
    44ee:	42 17       	cp	r20, r18
    44f0:	53 07       	cpc	r21, r19
    44f2:	44 f4       	brge	.+16     	; 0x4504 <fputc+0x38>
    44f4:	a0 81       	ld	r26, Z
    44f6:	b1 81       	ldd	r27, Z+1	; 0x01
    44f8:	9d 01       	movw	r18, r26
    44fa:	2f 5f       	subi	r18, 0xFF	; 255
    44fc:	3f 4f       	sbci	r19, 0xFF	; 255
    44fe:	20 83       	st	Z, r18
    4500:	31 83       	std	Z+1, r19	; 0x01
    4502:	8c 93       	st	X, r24
    4504:	26 81       	ldd	r18, Z+6	; 0x06
    4506:	37 81       	ldd	r19, Z+7	; 0x07
    4508:	2f 5f       	subi	r18, 0xFF	; 255
    450a:	3f 4f       	sbci	r19, 0xFF	; 255
    450c:	26 83       	std	Z+6, r18	; 0x06
    450e:	37 83       	std	Z+7, r19	; 0x07
    4510:	14 c0       	rjmp	.+40     	; 0x453a <fputc+0x6e>
    4512:	8b 01       	movw	r16, r22
    4514:	ec 01       	movw	r28, r24
    4516:	fb 01       	movw	r30, r22
    4518:	00 84       	ldd	r0, Z+8	; 0x08
    451a:	f1 85       	ldd	r31, Z+9	; 0x09
    451c:	e0 2d       	mov	r30, r0
    451e:	19 95       	eicall
    4520:	89 2b       	or	r24, r25
    4522:	e1 f6       	brne	.-72     	; 0x44dc <fputc+0x10>
    4524:	d8 01       	movw	r26, r16
    4526:	16 96       	adiw	r26, 0x06	; 6
    4528:	8d 91       	ld	r24, X+
    452a:	9c 91       	ld	r25, X
    452c:	17 97       	sbiw	r26, 0x07	; 7
    452e:	01 96       	adiw	r24, 0x01	; 1
    4530:	16 96       	adiw	r26, 0x06	; 6
    4532:	8d 93       	st	X+, r24
    4534:	9c 93       	st	X, r25
    4536:	17 97       	sbiw	r26, 0x07	; 7
    4538:	ce 01       	movw	r24, r28
    453a:	df 91       	pop	r29
    453c:	cf 91       	pop	r28
    453e:	1f 91       	pop	r17
    4540:	0f 91       	pop	r16
    4542:	08 95       	ret

00004544 <ungetc>:
    4544:	fb 01       	movw	r30, r22
    4546:	23 81       	ldd	r18, Z+3	; 0x03
    4548:	20 ff       	sbrs	r18, 0
    454a:	12 c0       	rjmp	.+36     	; 0x4570 <ungetc+0x2c>
    454c:	26 fd       	sbrc	r18, 6
    454e:	10 c0       	rjmp	.+32     	; 0x4570 <ungetc+0x2c>
    4550:	8f 3f       	cpi	r24, 0xFF	; 255
    4552:	3f ef       	ldi	r19, 0xFF	; 255
    4554:	93 07       	cpc	r25, r19
    4556:	61 f0       	breq	.+24     	; 0x4570 <ungetc+0x2c>
    4558:	82 83       	std	Z+2, r24	; 0x02
    455a:	2f 7d       	andi	r18, 0xDF	; 223
    455c:	20 64       	ori	r18, 0x40	; 64
    455e:	23 83       	std	Z+3, r18	; 0x03
    4560:	26 81       	ldd	r18, Z+6	; 0x06
    4562:	37 81       	ldd	r19, Z+7	; 0x07
    4564:	21 50       	subi	r18, 0x01	; 1
    4566:	31 09       	sbc	r19, r1
    4568:	26 83       	std	Z+6, r18	; 0x06
    456a:	37 83       	std	Z+7, r19	; 0x07
    456c:	99 27       	eor	r25, r25
    456e:	08 95       	ret
    4570:	8f ef       	ldi	r24, 0xFF	; 255
    4572:	9f ef       	ldi	r25, 0xFF	; 255
    4574:	08 95       	ret

00004576 <__ultoa_invert>:
    4576:	fa 01       	movw	r30, r20
    4578:	aa 27       	eor	r26, r26
    457a:	28 30       	cpi	r18, 0x08	; 8
    457c:	51 f1       	breq	.+84     	; 0x45d2 <__ultoa_invert+0x5c>
    457e:	20 31       	cpi	r18, 0x10	; 16
    4580:	81 f1       	breq	.+96     	; 0x45e2 <__ultoa_invert+0x6c>
    4582:	e8 94       	clt
    4584:	6f 93       	push	r22
    4586:	6e 7f       	andi	r22, 0xFE	; 254
    4588:	6e 5f       	subi	r22, 0xFE	; 254
    458a:	7f 4f       	sbci	r23, 0xFF	; 255
    458c:	8f 4f       	sbci	r24, 0xFF	; 255
    458e:	9f 4f       	sbci	r25, 0xFF	; 255
    4590:	af 4f       	sbci	r26, 0xFF	; 255
    4592:	b1 e0       	ldi	r27, 0x01	; 1
    4594:	3e d0       	rcall	.+124    	; 0x4612 <__ultoa_invert+0x9c>
    4596:	b4 e0       	ldi	r27, 0x04	; 4
    4598:	3c d0       	rcall	.+120    	; 0x4612 <__ultoa_invert+0x9c>
    459a:	67 0f       	add	r22, r23
    459c:	78 1f       	adc	r23, r24
    459e:	89 1f       	adc	r24, r25
    45a0:	9a 1f       	adc	r25, r26
    45a2:	a1 1d       	adc	r26, r1
    45a4:	68 0f       	add	r22, r24
    45a6:	79 1f       	adc	r23, r25
    45a8:	8a 1f       	adc	r24, r26
    45aa:	91 1d       	adc	r25, r1
    45ac:	a1 1d       	adc	r26, r1
    45ae:	6a 0f       	add	r22, r26
    45b0:	71 1d       	adc	r23, r1
    45b2:	81 1d       	adc	r24, r1
    45b4:	91 1d       	adc	r25, r1
    45b6:	a1 1d       	adc	r26, r1
    45b8:	20 d0       	rcall	.+64     	; 0x45fa <__ultoa_invert+0x84>
    45ba:	09 f4       	brne	.+2      	; 0x45be <__ultoa_invert+0x48>
    45bc:	68 94       	set
    45be:	3f 91       	pop	r19
    45c0:	2a e0       	ldi	r18, 0x0A	; 10
    45c2:	26 9f       	mul	r18, r22
    45c4:	11 24       	eor	r1, r1
    45c6:	30 19       	sub	r19, r0
    45c8:	30 5d       	subi	r19, 0xD0	; 208
    45ca:	31 93       	st	Z+, r19
    45cc:	de f6       	brtc	.-74     	; 0x4584 <__ultoa_invert+0xe>
    45ce:	cf 01       	movw	r24, r30
    45d0:	08 95       	ret
    45d2:	46 2f       	mov	r20, r22
    45d4:	47 70       	andi	r20, 0x07	; 7
    45d6:	40 5d       	subi	r20, 0xD0	; 208
    45d8:	41 93       	st	Z+, r20
    45da:	b3 e0       	ldi	r27, 0x03	; 3
    45dc:	0f d0       	rcall	.+30     	; 0x45fc <__ultoa_invert+0x86>
    45de:	c9 f7       	brne	.-14     	; 0x45d2 <__ultoa_invert+0x5c>
    45e0:	f6 cf       	rjmp	.-20     	; 0x45ce <__ultoa_invert+0x58>
    45e2:	46 2f       	mov	r20, r22
    45e4:	4f 70       	andi	r20, 0x0F	; 15
    45e6:	40 5d       	subi	r20, 0xD0	; 208
    45e8:	4a 33       	cpi	r20, 0x3A	; 58
    45ea:	18 f0       	brcs	.+6      	; 0x45f2 <__ultoa_invert+0x7c>
    45ec:	49 5d       	subi	r20, 0xD9	; 217
    45ee:	31 fd       	sbrc	r19, 1
    45f0:	40 52       	subi	r20, 0x20	; 32
    45f2:	41 93       	st	Z+, r20
    45f4:	02 d0       	rcall	.+4      	; 0x45fa <__ultoa_invert+0x84>
    45f6:	a9 f7       	brne	.-22     	; 0x45e2 <__ultoa_invert+0x6c>
    45f8:	ea cf       	rjmp	.-44     	; 0x45ce <__ultoa_invert+0x58>
    45fa:	b4 e0       	ldi	r27, 0x04	; 4
    45fc:	a6 95       	lsr	r26
    45fe:	97 95       	ror	r25
    4600:	87 95       	ror	r24
    4602:	77 95       	ror	r23
    4604:	67 95       	ror	r22
    4606:	ba 95       	dec	r27
    4608:	c9 f7       	brne	.-14     	; 0x45fc <__ultoa_invert+0x86>
    460a:	00 97       	sbiw	r24, 0x00	; 0
    460c:	61 05       	cpc	r22, r1
    460e:	71 05       	cpc	r23, r1
    4610:	08 95       	ret
    4612:	9b 01       	movw	r18, r22
    4614:	ac 01       	movw	r20, r24
    4616:	0a 2e       	mov	r0, r26
    4618:	06 94       	lsr	r0
    461a:	57 95       	ror	r21
    461c:	47 95       	ror	r20
    461e:	37 95       	ror	r19
    4620:	27 95       	ror	r18
    4622:	ba 95       	dec	r27
    4624:	c9 f7       	brne	.-14     	; 0x4618 <__ultoa_invert+0xa2>
    4626:	62 0f       	add	r22, r18
    4628:	73 1f       	adc	r23, r19
    462a:	84 1f       	adc	r24, r20
    462c:	95 1f       	adc	r25, r21
    462e:	a0 1d       	adc	r26, r0
    4630:	08 95       	ret

00004632 <__ctype_isfalse>:
    4632:	99 27       	eor	r25, r25
    4634:	88 27       	eor	r24, r24

00004636 <__ctype_istrue>:
    4636:	08 95       	ret

00004638 <_exit>:
    4638:	f8 94       	cli

0000463a <__stop_program>:
    463a:	ff cf       	rjmp	.-2      	; 0x463a <__stop_program>
