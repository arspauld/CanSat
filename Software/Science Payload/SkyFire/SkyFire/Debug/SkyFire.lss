
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00802000  00004416  000044aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000de  0080209e  0080209e  00004548  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004548  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000045a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  000045e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014a9b  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005cb4  00000000  00000000  00019543  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008840  00000000  00000000  0001f1f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001348  00000000  00000000  00027a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000335c5  00000000  00000000  00028d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005019  00000000  00000000  0005c345  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  0006135e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000320d  00000000  00000000  000617ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3c c2       	rjmp	.+1144   	; 0x516 <__vector_39>
      9e:	00 00       	nop
      a0:	77 c2       	rjmp	.+1262   	; 0x590 <__vector_40>
      a2:	00 00       	nop
      a4:	b2 c2       	rjmp	.+1380   	; 0x60a <__vector_41>
      a6:	00 00       	nop
      a8:	ed c2       	rjmp	.+1498   	; 0x684 <__vector_42>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__vector_47>
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__vector_58>
      ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
     102:	00 00       	nop
     104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
     106:	00 00       	nop
     108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
     112:	00 00       	nop
     114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
     116:	00 00       	nop
     118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
     136:	00 00       	nop
     138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
     142:	00 00       	nop
     144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
     146:	00 00       	nop
     148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
     152:	00 00       	nop
     154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
     156:	00 00       	nop
     158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
     162:	00 00       	nop
     164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
     166:	00 00       	nop
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__vector_91>
     170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
     172:	00 00       	nop
     174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
     176:	00 00       	nop
     178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
     182:	00 00       	nop
     184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
     186:	00 00       	nop
     188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
     192:	00 00       	nop
     194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
     196:	00 00       	nop
     198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6e c0       	rjmp	.+220    	; 0x2d6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <usart_init_rs232+0x138>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	63 64       	ori	r22, 0x43	; 67
     280:	69 6e       	ori	r22, 0xE9	; 233
     282:	6f 70       	andi	r22, 0x0F	; 15
     284:	73 75       	andi	r23, 0x53	; 83
     286:	78 58       	subi	r23, 0x88	; 136
     288:	5b 00       	.word	0x005b	; ????

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df e3       	ldi	r29, 0x3F	; 63
     294:	de bf       	out	0x3e, r29	; 62
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0c bf       	out	0x3c, r16	; 60
     29a:	18 be       	out	0x38, r1	; 56
     29c:	19 be       	out	0x39, r1	; 57
     29e:	1a be       	out	0x3a, r1	; 58
     2a0:	1b be       	out	0x3b, r1	; 59

000002a2 <__do_copy_data>:
     2a2:	10 e2       	ldi	r17, 0x20	; 32
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e2       	ldi	r27, 0x20	; 32
     2a8:	e6 e1       	ldi	r30, 0x16	; 22
     2aa:	f4 e4       	ldi	r31, 0x44	; 68
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	ae 39       	cpi	r26, 0x9E	; 158
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>
     2bc:	1b be       	out	0x3b, r1	; 59

000002be <__do_clear_bss>:
     2be:	21 e2       	ldi	r18, 0x21	; 33
     2c0:	ae e9       	ldi	r26, 0x9E	; 158
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	ac 37       	cpi	r26, 0x7C	; 124
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <main>
     2d2:	0c 94 09 22 	jmp	0x4412	; 0x4412 <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2e2:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <stdio_base>
     2e6:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <stdio_base+0x1>
     2ea:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <ptr_get>
     2ee:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <ptr_get+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	19 95       	eicall
	return c;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     30a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     30c:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <stdio_base>
     310:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <stdio_base+0x1>
     314:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <ptr_put>
     318:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <ptr_put+0x1>
     31c:	19 95       	eicall
     31e:	99 23       	and	r25, r25
     320:	1c f0       	brlt	.+6      	; 0x328 <_write+0x1e>
		return -1;
	}
	return 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <adca_callback>
     36e:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <adca_callback>
     3e8:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <adca_callback>
     462:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <adca_callback>
     4dc:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	08 b6       	in	r0, 0x38	; 56
     522:	0f 92       	push	r0
     524:	18 be       	out	0x38, r1	; 56
     526:	09 b6       	in	r0, 0x39	; 57
     528:	0f 92       	push	r0
     52a:	19 be       	out	0x39, r1	; 57
     52c:	0b b6       	in	r0, 0x3b	; 59
     52e:	0f 92       	push	r0
     530:	1b be       	out	0x3b, r1	; 59
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	6f 93       	push	r22
     53c:	7f 93       	push	r23
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
     546:	ef 93       	push	r30
     548:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     54a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     54e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     552:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <adcb_callback>
     556:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <adcb_callback+0x1>
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	80 e4       	ldi	r24, 0x40	; 64
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	19 95       	eicall
}
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	7f 91       	pop	r23
     570:	6f 91       	pop	r22
     572:	5f 91       	pop	r21
     574:	4f 91       	pop	r20
     576:	3f 91       	pop	r19
     578:	2f 91       	pop	r18
     57a:	0f 90       	pop	r0
     57c:	0b be       	out	0x3b, r0	; 59
     57e:	0f 90       	pop	r0
     580:	09 be       	out	0x39, r0	; 57
     582:	0f 90       	pop	r0
     584:	08 be       	out	0x38, r0	; 56
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     590:	1f 92       	push	r1
     592:	0f 92       	push	r0
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	0f 92       	push	r0
     598:	11 24       	eor	r1, r1
     59a:	08 b6       	in	r0, 0x38	; 56
     59c:	0f 92       	push	r0
     59e:	18 be       	out	0x38, r1	; 56
     5a0:	09 b6       	in	r0, 0x39	; 57
     5a2:	0f 92       	push	r0
     5a4:	19 be       	out	0x39, r1	; 57
     5a6:	0b b6       	in	r0, 0x3b	; 59
     5a8:	0f 92       	push	r0
     5aa:	1b be       	out	0x3b, r1	; 59
     5ac:	2f 93       	push	r18
     5ae:	3f 93       	push	r19
     5b0:	4f 93       	push	r20
     5b2:	5f 93       	push	r21
     5b4:	6f 93       	push	r22
     5b6:	7f 93       	push	r23
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	af 93       	push	r26
     5be:	bf 93       	push	r27
     5c0:	ef 93       	push	r30
     5c2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5c4:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5c8:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5cc:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <adcb_callback>
     5d0:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <adcb_callback+0x1>
     5d4:	62 e0       	ldi	r22, 0x02	; 2
     5d6:	80 e4       	ldi	r24, 0x40	; 64
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	19 95       	eicall
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0b be       	out	0x3b, r0	; 59
     5f8:	0f 90       	pop	r0
     5fa:	09 be       	out	0x39, r0	; 57
     5fc:	0f 90       	pop	r0
     5fe:	08 be       	out	0x38, r0	; 56
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	08 b6       	in	r0, 0x38	; 56
     616:	0f 92       	push	r0
     618:	18 be       	out	0x38, r1	; 56
     61a:	09 b6       	in	r0, 0x39	; 57
     61c:	0f 92       	push	r0
     61e:	19 be       	out	0x39, r1	; 57
     620:	0b b6       	in	r0, 0x3b	; 59
     622:	0f 92       	push	r0
     624:	1b be       	out	0x3b, r1	; 59
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     63e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     642:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     646:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <adcb_callback>
     64a:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <adcb_callback+0x1>
     64e:	64 e0       	ldi	r22, 0x04	; 4
     650:	80 e4       	ldi	r24, 0x40	; 64
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	19 95       	eicall
}
     656:	ff 91       	pop	r31
     658:	ef 91       	pop	r30
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	7f 91       	pop	r23
     664:	6f 91       	pop	r22
     666:	5f 91       	pop	r21
     668:	4f 91       	pop	r20
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	0f 90       	pop	r0
     670:	0b be       	out	0x3b, r0	; 59
     672:	0f 90       	pop	r0
     674:	09 be       	out	0x39, r0	; 57
     676:	0f 90       	pop	r0
     678:	08 be       	out	0x38, r0	; 56
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     684:	1f 92       	push	r1
     686:	0f 92       	push	r0
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	0f 92       	push	r0
     68c:	11 24       	eor	r1, r1
     68e:	08 b6       	in	r0, 0x38	; 56
     690:	0f 92       	push	r0
     692:	18 be       	out	0x38, r1	; 56
     694:	09 b6       	in	r0, 0x39	; 57
     696:	0f 92       	push	r0
     698:	19 be       	out	0x39, r1	; 57
     69a:	0b b6       	in	r0, 0x3b	; 59
     69c:	0f 92       	push	r0
     69e:	1b be       	out	0x3b, r1	; 59
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6b8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6bc:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6c0:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <adcb_callback>
     6c4:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <adcb_callback+0x1>
     6c8:	68 e0       	ldi	r22, 0x08	; 8
     6ca:	80 e4       	ldi	r24, 0x40	; 64
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	19 95       	eicall
}
     6d0:	ff 91       	pop	r31
     6d2:	ef 91       	pop	r30
     6d4:	bf 91       	pop	r27
     6d6:	af 91       	pop	r26
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	7f 91       	pop	r23
     6de:	6f 91       	pop	r22
     6e0:	5f 91       	pop	r21
     6e2:	4f 91       	pop	r20
     6e4:	3f 91       	pop	r19
     6e6:	2f 91       	pop	r18
     6e8:	0f 90       	pop	r0
     6ea:	0b be       	out	0x3b, r0	; 59
     6ec:	0f 90       	pop	r0
     6ee:	09 be       	out	0x39, r0	; 57
     6f0:	0f 90       	pop	r0
     6f2:	08 be       	out	0x38, r0	; 56
     6f4:	0f 90       	pop	r0
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	0f 90       	pop	r0
     6fa:	1f 90       	pop	r1
     6fc:	18 95       	reti

000006fe <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6fe:	fc 01       	movw	r30, r24
     700:	91 81       	ldd	r25, Z+1	; 0x01
     702:	95 ff       	sbrs	r25, 5
     704:	fd cf       	rjmp	.-6      	; 0x700 <usart_putchar+0x2>
     706:	60 83       	st	Z, r22
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	08 95       	ret

0000070e <usart_getchar>:
     70e:	fc 01       	movw	r30, r24
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	99 23       	and	r25, r25
     714:	ec f7       	brge	.-6      	; 0x710 <usart_getchar+0x2>
     716:	80 81       	ld	r24, Z
     718:	08 95       	ret

0000071a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     71a:	4f 92       	push	r4
     71c:	5f 92       	push	r5
     71e:	6f 92       	push	r6
     720:	7f 92       	push	r7
     722:	8f 92       	push	r8
     724:	9f 92       	push	r9
     726:	af 92       	push	r10
     728:	bf 92       	push	r11
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	7c 01       	movw	r14, r24
     736:	4a 01       	movw	r8, r20
     738:	5b 01       	movw	r10, r22
     73a:	28 01       	movw	r4, r16
     73c:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     73e:	fc 01       	movw	r30, r24
     740:	84 81       	ldd	r24, Z+4	; 0x04
     742:	82 ff       	sbrs	r24, 2
     744:	16 c0       	rjmp	.+44     	; 0x772 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     746:	d9 01       	movw	r26, r18
     748:	c8 01       	movw	r24, r16
     74a:	68 94       	set
     74c:	12 f8       	bld	r1, 2
     74e:	b6 95       	lsr	r27
     750:	a7 95       	ror	r26
     752:	97 95       	ror	r25
     754:	87 95       	ror	r24
     756:	16 94       	lsr	r1
     758:	d1 f7       	brne	.-12     	; 0x74e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     75a:	b9 01       	movw	r22, r18
     75c:	a8 01       	movw	r20, r16
     75e:	03 2e       	mov	r0, r19
     760:	36 e1       	ldi	r19, 0x16	; 22
     762:	76 95       	lsr	r23
     764:	67 95       	ror	r22
     766:	57 95       	ror	r21
     768:	47 95       	ror	r20
     76a:	3a 95       	dec	r19
     76c:	d1 f7       	brne	.-12     	; 0x762 <usart_set_baudrate+0x48>
     76e:	30 2d       	mov	r19, r0
     770:	15 c0       	rjmp	.+42     	; 0x79c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     772:	d9 01       	movw	r26, r18
     774:	c8 01       	movw	r24, r16
     776:	68 94       	set
     778:	13 f8       	bld	r1, 3
     77a:	b6 95       	lsr	r27
     77c:	a7 95       	ror	r26
     77e:	97 95       	ror	r25
     780:	87 95       	ror	r24
     782:	16 94       	lsr	r1
     784:	d1 f7       	brne	.-12     	; 0x77a <usart_set_baudrate+0x60>
		min_rate /= 2;
     786:	b9 01       	movw	r22, r18
     788:	a8 01       	movw	r20, r16
     78a:	03 2e       	mov	r0, r19
     78c:	37 e1       	ldi	r19, 0x17	; 23
     78e:	76 95       	lsr	r23
     790:	67 95       	ror	r22
     792:	57 95       	ror	r21
     794:	47 95       	ror	r20
     796:	3a 95       	dec	r19
     798:	d1 f7       	brne	.-12     	; 0x78e <usart_set_baudrate+0x74>
     79a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     79c:	88 15       	cp	r24, r8
     79e:	99 05       	cpc	r25, r9
     7a0:	aa 05       	cpc	r26, r10
     7a2:	bb 05       	cpc	r27, r11
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <usart_set_baudrate+0x8e>
     7a6:	a6 c0       	rjmp	.+332    	; 0x8f4 <usart_set_baudrate+0x1da>
     7a8:	84 16       	cp	r8, r20
     7aa:	95 06       	cpc	r9, r21
     7ac:	a6 06       	cpc	r10, r22
     7ae:	b7 06       	cpc	r11, r23
     7b0:	08 f4       	brcc	.+2      	; 0x7b4 <usart_set_baudrate+0x9a>
     7b2:	a2 c0       	rjmp	.+324    	; 0x8f8 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7b4:	f7 01       	movw	r30, r14
     7b6:	84 81       	ldd	r24, Z+4	; 0x04
     7b8:	82 fd       	sbrc	r24, 2
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <usart_set_baudrate+0xaa>
		baud *= 2;
     7bc:	88 0c       	add	r8, r8
     7be:	99 1c       	adc	r9, r9
     7c0:	aa 1c       	adc	r10, r10
     7c2:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7c4:	c3 01       	movw	r24, r6
     7c6:	b2 01       	movw	r22, r4
     7c8:	a5 01       	movw	r20, r10
     7ca:	94 01       	movw	r18, r8
     7cc:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7d0:	2f 3f       	cpi	r18, 0xFF	; 255
     7d2:	31 05       	cpc	r19, r1
     7d4:	41 05       	cpc	r20, r1
     7d6:	51 05       	cpc	r21, r1
     7d8:	08 f4       	brcc	.+2      	; 0x7dc <usart_set_baudrate+0xc2>
     7da:	90 c0       	rjmp	.+288    	; 0x8fc <usart_set_baudrate+0x1e2>
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	a0 e0       	ldi	r26, 0x00	; 0
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	c9 ef       	ldi	r28, 0xF9	; 249
     7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <usart_set_baudrate+0xd8>
     7e8:	28 17       	cp	r18, r24
     7ea:	39 07       	cpc	r19, r25
     7ec:	4a 07       	cpc	r20, r26
     7ee:	5b 07       	cpc	r21, r27
     7f0:	58 f0       	brcs	.+22     	; 0x808 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	aa 1f       	adc	r26, r26
     7f8:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     7fa:	cd 3f       	cpi	r28, 0xFD	; 253
     7fc:	0c f4       	brge	.+2      	; 0x800 <usart_set_baudrate+0xe6>
			limit |= 1;
     7fe:	81 60       	ori	r24, 0x01	; 1
     800:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     802:	c7 30       	cpi	r28, 0x07	; 7
     804:	89 f7       	brne	.-30     	; 0x7e8 <usart_set_baudrate+0xce>
     806:	4f c0       	rjmp	.+158    	; 0x8a6 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     808:	cc 23       	and	r28, r28
     80a:	0c f0       	brlt	.+2      	; 0x80e <usart_set_baudrate+0xf4>
     80c:	4c c0       	rjmp	.+152    	; 0x8a6 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     80e:	d5 01       	movw	r26, r10
     810:	c4 01       	movw	r24, r8
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	aa 1f       	adc	r26, r26
     818:	bb 1f       	adc	r27, r27
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	aa 1f       	adc	r26, r26
     820:	bb 1f       	adc	r27, r27
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	aa 1f       	adc	r26, r26
     828:	bb 1f       	adc	r27, r27
     82a:	48 1a       	sub	r4, r24
     82c:	59 0a       	sbc	r5, r25
     82e:	6a 0a       	sbc	r6, r26
     830:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     832:	ce 3f       	cpi	r28, 0xFE	; 254
     834:	f4 f4       	brge	.+60     	; 0x872 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     836:	8d ef       	ldi	r24, 0xFD	; 253
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	8c 1b       	sub	r24, r28
     83c:	91 09       	sbc	r25, r1
     83e:	c7 fd       	sbrc	r28, 7
     840:	93 95       	inc	r25
     842:	04 c0       	rjmp	.+8      	; 0x84c <usart_set_baudrate+0x132>
     844:	44 0c       	add	r4, r4
     846:	55 1c       	adc	r5, r5
     848:	66 1c       	adc	r6, r6
     84a:	77 1c       	adc	r7, r7
     84c:	8a 95       	dec	r24
     84e:	d2 f7       	brpl	.-12     	; 0x844 <usart_set_baudrate+0x12a>
     850:	d5 01       	movw	r26, r10
     852:	c4 01       	movw	r24, r8
     854:	b6 95       	lsr	r27
     856:	a7 95       	ror	r26
     858:	97 95       	ror	r25
     85a:	87 95       	ror	r24
     85c:	bc 01       	movw	r22, r24
     85e:	cd 01       	movw	r24, r26
     860:	64 0d       	add	r22, r4
     862:	75 1d       	adc	r23, r5
     864:	86 1d       	adc	r24, r6
     866:	97 1d       	adc	r25, r7
     868:	a5 01       	movw	r20, r10
     86a:	94 01       	movw	r18, r8
     86c:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
     870:	37 c0       	rjmp	.+110    	; 0x8e0 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	8c 0f       	add	r24, r28
     876:	a5 01       	movw	r20, r10
     878:	94 01       	movw	r18, r8
     87a:	04 c0       	rjmp	.+8      	; 0x884 <usart_set_baudrate+0x16a>
     87c:	22 0f       	add	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	44 1f       	adc	r20, r20
     882:	55 1f       	adc	r21, r21
     884:	8a 95       	dec	r24
     886:	d2 f7       	brpl	.-12     	; 0x87c <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     888:	da 01       	movw	r26, r20
     88a:	c9 01       	movw	r24, r18
     88c:	b6 95       	lsr	r27
     88e:	a7 95       	ror	r26
     890:	97 95       	ror	r25
     892:	87 95       	ror	r24
     894:	bc 01       	movw	r22, r24
     896:	cd 01       	movw	r24, r26
     898:	64 0d       	add	r22, r4
     89a:	75 1d       	adc	r23, r5
     89c:	86 1d       	adc	r24, r6
     89e:	97 1d       	adc	r25, r7
     8a0:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
     8a4:	1d c0       	rjmp	.+58     	; 0x8e0 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	8c 0f       	add	r24, r28
     8aa:	a5 01       	movw	r20, r10
     8ac:	94 01       	movw	r18, r8
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <usart_set_baudrate+0x19e>
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	44 1f       	adc	r20, r20
     8b6:	55 1f       	adc	r21, r21
     8b8:	8a 95       	dec	r24
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8bc:	da 01       	movw	r26, r20
     8be:	c9 01       	movw	r24, r18
     8c0:	b6 95       	lsr	r27
     8c2:	a7 95       	ror	r26
     8c4:	97 95       	ror	r25
     8c6:	87 95       	ror	r24
     8c8:	bc 01       	movw	r22, r24
     8ca:	cd 01       	movw	r24, r26
     8cc:	64 0d       	add	r22, r4
     8ce:	75 1d       	adc	r23, r5
     8d0:	86 1d       	adc	r24, r6
     8d2:	97 1d       	adc	r25, r7
     8d4:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	31 09       	sbc	r19, r1
     8dc:	41 09       	sbc	r20, r1
     8de:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8e0:	83 2f       	mov	r24, r19
     8e2:	8f 70       	andi	r24, 0x0F	; 15
     8e4:	c2 95       	swap	r28
     8e6:	c0 7f       	andi	r28, 0xF0	; 240
     8e8:	c8 2b       	or	r28, r24
     8ea:	f7 01       	movw	r30, r14
     8ec:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8ee:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	18 c0       	rjmp	.+48     	; 0x924 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	16 c0       	rjmp	.+44     	; 0x924 <usart_set_baudrate+0x20a>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	14 c0       	rjmp	.+40     	; 0x924 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8fc:	d5 01       	movw	r26, r10
     8fe:	c4 01       	movw	r24, r8
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	aa 1f       	adc	r26, r26
     906:	bb 1f       	adc	r27, r27
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	aa 1f       	adc	r26, r26
     90e:	bb 1f       	adc	r27, r27
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	aa 1f       	adc	r26, r26
     916:	bb 1f       	adc	r27, r27
     918:	48 1a       	sub	r4, r24
     91a:	59 0a       	sbc	r5, r25
     91c:	6a 0a       	sbc	r6, r26
     91e:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     920:	c9 ef       	ldi	r28, 0xF9	; 249
     922:	89 cf       	rjmp	.-238    	; 0x836 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	bf 90       	pop	r11
     930:	af 90       	pop	r10
     932:	9f 90       	pop	r9
     934:	8f 90       	pop	r8
     936:	7f 90       	pop	r7
     938:	6f 90       	pop	r6
     93a:	5f 90       	pop	r5
     93c:	4f 90       	pop	r4
     93e:	08 95       	ret

00000940 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	09 f4       	brne	.+2      	; 0x952 <usart_init_rs232+0x12>
     950:	36 c1       	rjmp	.+620    	; 0xbbe <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     952:	80 3c       	cpi	r24, 0xC0	; 192
     954:	91 05       	cpc	r25, r1
     956:	21 f4       	brne	.+8      	; 0x960 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     958:	60 e1       	ldi	r22, 0x10	; 16
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	c2 d3       	rcall	.+1924   	; 0x10e2 <sysclk_enable_module>
     95e:	2f c1       	rjmp	.+606    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     960:	c0 34       	cpi	r28, 0x40	; 64
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	d8 07       	cpc	r29, r24
     966:	21 f4       	brne	.+8      	; 0x970 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     968:	68 e0       	ldi	r22, 0x08	; 8
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	ba d3       	rcall	.+1908   	; 0x10e2 <sysclk_enable_module>
     96e:	27 c1       	rjmp	.+590    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     970:	c1 15       	cp	r28, r1
     972:	e4 e0       	ldi	r30, 0x04	; 4
     974:	de 07       	cpc	r29, r30
     976:	21 f4       	brne	.+8      	; 0x980 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     978:	64 e0       	ldi	r22, 0x04	; 4
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	b2 d3       	rcall	.+1892   	; 0x10e2 <sysclk_enable_module>
     97e:	1f c1       	rjmp	.+574    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     980:	c0 38       	cpi	r28, 0x80	; 128
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     986:	21 f4       	brne	.+8      	; 0x990 <usart_init_rs232+0x50>
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	aa d3       	rcall	.+1876   	; 0x10e2 <sysclk_enable_module>
     98e:	17 c1       	rjmp	.+558    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     990:	c1 15       	cp	r28, r1
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     996:	21 f4       	brne	.+8      	; 0x9a0 <usart_init_rs232+0x60>
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	a2 d3       	rcall	.+1860   	; 0x10e2 <sysclk_enable_module>
     99e:	0f c1       	rjmp	.+542    	; 0xbbe <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     9a0:	c0 38       	cpi	r28, 0x80	; 128
     9a2:	e3 e0       	ldi	r30, 0x03	; 3
     9a4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <usart_init_rs232+0x70>
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	9a d3       	rcall	.+1844   	; 0x10e2 <sysclk_enable_module>
     9ae:	07 c1       	rjmp	.+526    	; 0xbbe <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     9b0:	c0 39       	cpi	r28, 0x90	; 144
     9b2:	f3 e0       	ldi	r31, 0x03	; 3
     9b4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     9b6:	21 f4       	brne	.+8      	; 0x9c0 <usart_init_rs232+0x80>
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	92 d3       	rcall	.+1828   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9be:	ff c0       	rjmp	.+510    	; 0xbbe <usart_init_rs232+0x27e>
     9c0:	c1 15       	cp	r28, r1
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <usart_init_rs232+0x90>
     9c8:	62 e0       	ldi	r22, 0x02	; 2
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	8a d3       	rcall	.+1812   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     9ce:	f7 c0       	rjmp	.+494    	; 0xbbe <usart_init_rs232+0x27e>
     9d0:	c0 34       	cpi	r28, 0x40	; 64
     9d2:	e2 e0       	ldi	r30, 0x02	; 2
     9d4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9d6:	21 f4       	brne	.+8      	; 0x9e0 <usart_init_rs232+0xa0>
     9d8:	62 e0       	ldi	r22, 0x02	; 2
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	82 d3       	rcall	.+1796   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9de:	ef c0       	rjmp	.+478    	; 0xbbe <usart_init_rs232+0x27e>
     9e0:	c1 15       	cp	r28, r1
     9e2:	f3 e0       	ldi	r31, 0x03	; 3
     9e4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9e6:	21 f4       	brne	.+8      	; 0x9f0 <usart_init_rs232+0xb0>
     9e8:	64 e0       	ldi	r22, 0x04	; 4
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	7a d3       	rcall	.+1780   	; 0x10e2 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9ee:	e7 c0       	rjmp	.+462    	; 0xbbe <usart_init_rs232+0x27e>
     9f0:	c0 32       	cpi	r28, 0x20	; 32
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9f6:	21 f4       	brne	.+8      	; 0xa00 <usart_init_rs232+0xc0>
     9f8:	64 e0       	ldi	r22, 0x04	; 4
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	72 d3       	rcall	.+1764   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9fe:	df c0       	rjmp	.+446    	; 0xbbe <usart_init_rs232+0x27e>
     a00:	c1 15       	cp	r28, r1
     a02:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     a04:	de 07       	cpc	r29, r30
     a06:	21 f4       	brne	.+8      	; 0xa10 <usart_init_rs232+0xd0>
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	6a d3       	rcall	.+1748   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a0e:	d7 c0       	rjmp	.+430    	; 0xbbe <usart_init_rs232+0x27e>
     a10:	c1 15       	cp	r28, r1
     a12:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a14:	df 07       	cpc	r29, r31
     a16:	21 f4       	brne	.+8      	; 0xa20 <usart_init_rs232+0xe0>
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	84 e0       	ldi	r24, 0x04	; 4
     a1c:	62 d3       	rcall	.+1732   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     a1e:	cf c0       	rjmp	.+414    	; 0xbbe <usart_init_rs232+0x27e>
     a20:	c1 15       	cp	r28, r1
     a22:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a24:	d8 07       	cpc	r29, r24
     a26:	21 f4       	brne	.+8      	; 0xa30 <usart_init_rs232+0xf0>
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	85 e0       	ldi	r24, 0x05	; 5
     a2c:	5a d3       	rcall	.+1716   	; 0x10e2 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     a2e:	c7 c0       	rjmp	.+398    	; 0xbbe <usart_init_rs232+0x27e>
     a30:	c1 15       	cp	r28, r1
     a32:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     a34:	de 07       	cpc	r29, r30
     a36:	21 f4       	brne	.+8      	; 0xa40 <usart_init_rs232+0x100>
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a3c:	52 d3       	rcall	.+1700   	; 0x10e2 <sysclk_enable_module>
     a3e:	bf c0       	rjmp	.+382    	; 0xbbe <usart_init_rs232+0x27e>
     a40:	c0 34       	cpi	r28, 0x40	; 64
     a42:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a44:	df 07       	cpc	r29, r31
     a46:	21 f4       	brne	.+8      	; 0xa50 <usart_init_rs232+0x110>
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a4c:	4a d3       	rcall	.+1684   	; 0x10e2 <sysclk_enable_module>
     a4e:	b7 c0       	rjmp	.+366    	; 0xbbe <usart_init_rs232+0x27e>
     a50:	c0 34       	cpi	r28, 0x40	; 64
     a52:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a54:	d8 07       	cpc	r29, r24
     a56:	21 f4       	brne	.+8      	; 0xa60 <usart_init_rs232+0x120>
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a5c:	42 d3       	rcall	.+1668   	; 0x10e2 <sysclk_enable_module>
     a5e:	af c0       	rjmp	.+350    	; 0xbbe <usart_init_rs232+0x27e>
     a60:	c0 34       	cpi	r28, 0x40	; 64
     a62:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a64:	de 07       	cpc	r29, r30
     a66:	21 f4       	brne	.+8      	; 0xa70 <usart_init_rs232+0x130>
     a68:	62 e0       	ldi	r22, 0x02	; 2
     a6a:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a6c:	3a d3       	rcall	.+1652   	; 0x10e2 <sysclk_enable_module>
     a6e:	a7 c0       	rjmp	.+334    	; 0xbbe <usart_init_rs232+0x27e>
     a70:	c0 34       	cpi	r28, 0x40	; 64
     a72:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a74:	df 07       	cpc	r29, r31
     a76:	21 f4       	brne	.+8      	; 0xa80 <usart_init_rs232+0x140>
     a78:	62 e0       	ldi	r22, 0x02	; 2
     a7a:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a7c:	32 d3       	rcall	.+1636   	; 0x10e2 <sysclk_enable_module>
     a7e:	9f c0       	rjmp	.+318    	; 0xbbe <usart_init_rs232+0x27e>
     a80:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a82:	88 e0       	ldi	r24, 0x08	; 8
     a84:	d8 07       	cpc	r29, r24
     a86:	21 f4       	brne	.+8      	; 0xa90 <usart_init_rs232+0x150>
     a88:	64 e0       	ldi	r22, 0x04	; 4
     a8a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a8c:	2a d3       	rcall	.+1620   	; 0x10e2 <sysclk_enable_module>
     a8e:	97 c0       	rjmp	.+302    	; 0xbbe <usart_init_rs232+0x27e>
     a90:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a92:	e9 e0       	ldi	r30, 0x09	; 9
     a94:	de 07       	cpc	r29, r30
     a96:	21 f4       	brne	.+8      	; 0xaa0 <usart_init_rs232+0x160>
     a98:	64 e0       	ldi	r22, 0x04	; 4
     a9a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a9c:	22 d3       	rcall	.+1604   	; 0x10e2 <sysclk_enable_module>
     a9e:	8f c0       	rjmp	.+286    	; 0xbbe <usart_init_rs232+0x27e>
     aa0:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     aa2:	fa e0       	ldi	r31, 0x0A	; 10
     aa4:	df 07       	cpc	r29, r31
     aa6:	21 f4       	brne	.+8      	; 0xab0 <usart_init_rs232+0x170>
     aa8:	64 e0       	ldi	r22, 0x04	; 4
     aaa:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     aac:	1a d3       	rcall	.+1588   	; 0x10e2 <sysclk_enable_module>
     aae:	87 c0       	rjmp	.+270    	; 0xbbe <usart_init_rs232+0x27e>
     ab0:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     ab2:	8b e0       	ldi	r24, 0x0B	; 11
     ab4:	d8 07       	cpc	r29, r24
     ab6:	21 f4       	brne	.+8      	; 0xac0 <usart_init_rs232+0x180>
     ab8:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     aba:	86 e0       	ldi	r24, 0x06	; 6
     abc:	12 d3       	rcall	.+1572   	; 0x10e2 <sysclk_enable_module>
     abe:	7f c0       	rjmp	.+254    	; 0xbbe <usart_init_rs232+0x27e>
     ac0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     ac2:	e8 e0       	ldi	r30, 0x08	; 8
     ac4:	de 07       	cpc	r29, r30
     ac6:	21 f4       	brne	.+8      	; 0xad0 <usart_init_rs232+0x190>
     ac8:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	0a d3       	rcall	.+1556   	; 0x10e2 <sysclk_enable_module>
     ace:	77 c0       	rjmp	.+238    	; 0xbbe <usart_init_rs232+0x27e>
     ad0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ad2:	f9 e0       	ldi	r31, 0x09	; 9
     ad4:	df 07       	cpc	r29, r31
     ad6:	21 f4       	brne	.+8      	; 0xae0 <usart_init_rs232+0x1a0>
     ad8:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	02 d3       	rcall	.+1540   	; 0x10e2 <sysclk_enable_module>
     ade:	6f c0       	rjmp	.+222    	; 0xbbe <usart_init_rs232+0x27e>
     ae0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ae2:	8a e0       	ldi	r24, 0x0A	; 10
     ae4:	d8 07       	cpc	r29, r24
     ae6:	21 f4       	brne	.+8      	; 0xaf0 <usart_init_rs232+0x1b0>
     ae8:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     aea:	85 e0       	ldi	r24, 0x05	; 5
     aec:	fa d2       	rcall	.+1524   	; 0x10e2 <sysclk_enable_module>
     aee:	67 c0       	rjmp	.+206    	; 0xbbe <usart_init_rs232+0x27e>
     af0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     af2:	eb e0       	ldi	r30, 0x0B	; 11
     af4:	de 07       	cpc	r29, r30
     af6:	21 f4       	brne	.+8      	; 0xb00 <usart_init_rs232+0x1c0>
     af8:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	f2 d2       	rcall	.+1508   	; 0x10e2 <sysclk_enable_module>
     afe:	5f c0       	rjmp	.+190    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     b00:	c0 3a       	cpi	r28, 0xA0	; 160
     b02:	f8 e0       	ldi	r31, 0x08	; 8
     b04:	df 07       	cpc	r29, r31
     b06:	21 f4       	brne	.+8      	; 0xb10 <usart_init_rs232+0x1d0>
     b08:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	ea d2       	rcall	.+1492   	; 0x10e2 <sysclk_enable_module>
     b0e:	57 c0       	rjmp	.+174    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     b10:	c0 3a       	cpi	r28, 0xA0	; 160
     b12:	89 e0       	ldi	r24, 0x09	; 9
     b14:	d8 07       	cpc	r29, r24
     b16:	21 f4       	brne	.+8      	; 0xb20 <usart_init_rs232+0x1e0>
     b18:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	e2 d2       	rcall	.+1476   	; 0x10e2 <sysclk_enable_module>
     b1e:	4f c0       	rjmp	.+158    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b20:	c0 3a       	cpi	r28, 0xA0	; 160
     b22:	ea e0       	ldi	r30, 0x0A	; 10
     b24:	de 07       	cpc	r29, r30
     b26:	21 f4       	brne	.+8      	; 0xb30 <usart_init_rs232+0x1f0>
     b28:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     b2a:	85 e0       	ldi	r24, 0x05	; 5
     b2c:	da d2       	rcall	.+1460   	; 0x10e2 <sysclk_enable_module>
     b2e:	47 c0       	rjmp	.+142    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     b30:	c0 3a       	cpi	r28, 0xA0	; 160
     b32:	fb e0       	ldi	r31, 0x0B	; 11
     b34:	df 07       	cpc	r29, r31
     b36:	21 f4       	brne	.+8      	; 0xb40 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b38:	60 e1       	ldi	r22, 0x10	; 16
     b3a:	86 e0       	ldi	r24, 0x06	; 6
     b3c:	d2 d2       	rcall	.+1444   	; 0x10e2 <sysclk_enable_module>
     b3e:	3f c0       	rjmp	.+126    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b40:	c0 3b       	cpi	r28, 0xB0	; 176
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	d8 07       	cpc	r29, r24
     b46:	21 f4       	brne	.+8      	; 0xb50 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b48:	60 e2       	ldi	r22, 0x20	; 32
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	ca d2       	rcall	.+1428   	; 0x10e2 <sysclk_enable_module>
     b4e:	37 c0       	rjmp	.+110    	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b50:	c0 3b       	cpi	r28, 0xB0	; 176
     b52:	e9 e0       	ldi	r30, 0x09	; 9
     b54:	de 07       	cpc	r29, r30
     b56:	21 f4       	brne	.+8      	; 0xb60 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b58:	60 e2       	ldi	r22, 0x20	; 32
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	c2 d2       	rcall	.+1412   	; 0x10e2 <sysclk_enable_module>
     b5e:	2f c0       	rjmp	.+94     	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b60:	c0 3b       	cpi	r28, 0xB0	; 176
     b62:	fa e0       	ldi	r31, 0x0A	; 10
     b64:	df 07       	cpc	r29, r31
     b66:	21 f4       	brne	.+8      	; 0xb70 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b68:	60 e2       	ldi	r22, 0x20	; 32
     b6a:	85 e0       	ldi	r24, 0x05	; 5
     b6c:	ba d2       	rcall	.+1396   	; 0x10e2 <sysclk_enable_module>
     b6e:	27 c0       	rjmp	.+78     	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b70:	c0 3b       	cpi	r28, 0xB0	; 176
     b72:	8b e0       	ldi	r24, 0x0B	; 11
     b74:	d8 07       	cpc	r29, r24
     b76:	21 f4       	brne	.+8      	; 0xb80 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b78:	60 e2       	ldi	r22, 0x20	; 32
     b7a:	86 e0       	ldi	r24, 0x06	; 6
     b7c:	b2 d2       	rcall	.+1380   	; 0x10e2 <sysclk_enable_module>
     b7e:	1f c0       	rjmp	.+62     	; 0xbbe <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b80:	c0 38       	cpi	r28, 0x80	; 128
     b82:	e4 e0       	ldi	r30, 0x04	; 4
     b84:	de 07       	cpc	r29, r30
     b86:	21 f4       	brne	.+8      	; 0xb90 <usart_init_rs232+0x250>
     b88:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	aa d2       	rcall	.+1364   	; 0x10e2 <sysclk_enable_module>
     b8e:	17 c0       	rjmp	.+46     	; 0xbbe <usart_init_rs232+0x27e>
     b90:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b92:	f4 e0       	ldi	r31, 0x04	; 4
     b94:	df 07       	cpc	r29, r31
     b96:	21 f4       	brne	.+8      	; 0xba0 <usart_init_rs232+0x260>
     b98:	60 e4       	ldi	r22, 0x40	; 64
     b9a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b9c:	a2 d2       	rcall	.+1348   	; 0x10e2 <sysclk_enable_module>
     b9e:	0f c0       	rjmp	.+30     	; 0xbbe <usart_init_rs232+0x27e>
     ba0:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	d8 07       	cpc	r29, r24
     ba6:	21 f4       	brne	.+8      	; 0xbb0 <usart_init_rs232+0x270>
     ba8:	60 e4       	ldi	r22, 0x40	; 64
     baa:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     bac:	9a d2       	rcall	.+1332   	; 0x10e2 <sysclk_enable_module>
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <usart_init_rs232+0x27e>
     bb0:	c0 3b       	cpi	r28, 0xB0	; 176
     bb2:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     bb4:	de 07       	cpc	r29, r30
     bb6:	19 f4       	brne	.+6      	; 0xbbe <usart_init_rs232+0x27e>
     bb8:	60 e4       	ldi	r22, 0x40	; 64
     bba:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     bbc:	92 d2       	rcall	.+1316   	; 0x10e2 <sysclk_enable_module>
     bbe:	8d 81       	ldd	r24, Y+5	; 0x05
     bc0:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     bc2:	8d 83       	std	Y+5, r24	; 0x05
     bc4:	f8 01       	movw	r30, r16
     bc6:	95 81       	ldd	r25, Z+5	; 0x05
     bc8:	84 81       	ldd	r24, Z+4	; 0x04
     bca:	89 2b       	or	r24, r25
     bcc:	96 81       	ldd	r25, Z+6	; 0x06
     bce:	91 11       	cpse	r25, r1
     bd0:	98 e0       	ldi	r25, 0x08	; 8
     bd2:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     bd4:	8d 83       	std	Y+5, r24	; 0x05
     bd6:	f8 01       	movw	r30, r16
     bd8:	40 81       	ld	r20, Z
     bda:	51 81       	ldd	r21, Z+1	; 0x01
     bdc:	62 81       	ldd	r22, Z+2	; 0x02
     bde:	73 81       	ldd	r23, Z+3	; 0x03
     be0:	00 e0       	ldi	r16, 0x00	; 0
     be2:	18 e4       	ldi	r17, 0x48	; 72
     be4:	28 ee       	ldi	r18, 0xE8	; 232
     be6:	31 e0       	ldi	r19, 0x01	; 1
     be8:	ce 01       	movw	r24, r28
     bea:	97 dd       	rcall	.-1234   	; 0x71a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	98 60       	ori	r25, 0x08	; 8
     bf0:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	90 61       	ori	r25, 0x10	; 16
     bf6:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	08 95       	ret

00000c02 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     c02:	08 95       	ret

00000c04 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= 0x08; // Sets A3 to output
     c04:	e0 e0       	ldi	r30, 0x00	; 0
     c06:	f6 e0       	ldi	r31, 0x06	; 6
     c08:	80 81       	ld	r24, Z
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	80 83       	st	Z, r24
     c0e:	08 95       	ret

00000c10 <cam_switch>:
}

void cam_switch(void){
	PORTA.OUT ^= 0x08; // Changes A3 from high to low or vice-versa
     c10:	e0 e0       	ldi	r30, 0x00	; 0
     c12:	f6 e0       	ldi	r31, 0x06	; 6
     c14:	94 81       	ldd	r25, Z+4	; 0x04
     c16:	88 e0       	ldi	r24, 0x08	; 8
     c18:	89 27       	eor	r24, r25
     c1a:	84 83       	std	Z+4, r24	; 0x04
     c1c:	08 95       	ret

00000c1e <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	27 97       	sbiw	r28, 0x07	; 7
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     c2c:	60 e2       	ldi	r22, 0x20	; 32
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	58 d2       	rcall	.+1200   	; 0x10e2 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     c32:	e0 e6       	ldi	r30, 0x60	; 96
     c34:	f6 e0       	ldi	r31, 0x06	; 6
     c36:	80 81       	ld	r24, Z
     c38:	80 68       	ori	r24, 0x80	; 128
     c3a:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c3c:	e6 e0       	ldi	r30, 0x06	; 6
     c3e:	f0 e2       	ldi	r31, 0x20	; 32
     c40:	84 81       	ldd	r24, Z+4	; 0x04
     c42:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c44:	85 81       	ldd	r24, Z+5	; 0x05
     c46:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c48:	86 81       	ldd	r24, Z+6	; 0x06
     c4a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c4c:	80 81       	ld	r24, Z
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	a2 81       	ldd	r26, Z+2	; 0x02
     c52:	b3 81       	ldd	r27, Z+3	; 0x03
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	ab 83       	std	Y+3, r26	; 0x03
     c5a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     c5c:	60 e2       	ldi	r22, 0x20	; 32
     c5e:	84 e0       	ldi	r24, 0x04	; 4
     c60:	40 d2       	rcall	.+1152   	; 0x10e2 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	80 eb       	ldi	r24, 0xB0	; 176
     c6a:	99 e0       	ldi	r25, 0x09	; 9
     c6c:	69 de       	rcall	.-814    	; 0x940 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     c6e:	27 96       	adiw	r28, 0x07	; 7
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     c7c:	61 50       	subi	r22, 0x01	; 1
     c7e:	71 09       	sbc	r23, r1
     c80:	81 09       	sbc	r24, r1
     c82:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     c84:	61 15       	cp	r22, r1
     c86:	71 05       	cpc	r23, r1
     c88:	81 05       	cpc	r24, r1
     c8a:	91 05       	cpc	r25, r1
     c8c:	b9 f7       	brne	.-18     	; 0xc7c <__portable_avr_delay_cycles+0x2>
     c8e:	08 95       	ret

00000c90 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     c90:	e0 e4       	ldi	r30, 0x40	; 64
     c92:	f6 e0       	ldi	r31, 0x06	; 6
     c94:	94 81       	ldd	r25, Z+4	; 0x04
     c96:	80 e1       	ldi	r24, 0x10	; 16
     c98:	89 27       	eor	r24, r25
     c9a:	84 83       	std	Z+4, r24	; 0x04
     c9c:	08 95       	ret

00000c9e <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     c9e:	e0 e4       	ldi	r30, 0x40	; 64
     ca0:	f6 e0       	ldi	r31, 0x06	; 6
     ca2:	84 81       	ldd	r24, Z+4	; 0x04
     ca4:	80 61       	ori	r24, 0x10	; 16
     ca6:	84 83       	std	Z+4, r24	; 0x04
	delay_ms(5);
     ca8:	6b e2       	ldi	r22, 0x2B	; 43
     caa:	78 e6       	ldi	r23, 0x68	; 104
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	e4 df       	rcall	.-56     	; 0xc7a <__portable_avr_delay_cycles>
	
	// Resets the ms5607
	flip_ms5607();
     cb2:	ee df       	rcall	.-36     	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     cb4:	8e e1       	ldi	r24, 0x1E	; 30
     cb6:	82 d0       	rcall	.+260    	; 0xdbc <spi_write>
     cb8:	60 e8       	ldi	r22, 0x80	; 128
	delay_ms(3);
     cba:	7e e3       	ldi	r23, 0x3E	; 62
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	dc df       	rcall	.-72     	; 0xc7a <__portable_avr_delay_cycles>
	flip_ms5607();
     cc2:	e6 df       	rcall	.-52     	; 0xc90 <flip_ms5607>
	delay_ms(2);
     cc4:	6b ea       	ldi	r22, 0xAB	; 171
     cc6:	79 e2       	ldi	r23, 0x29	; 41
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	d6 cf       	rjmp	.-84     	; 0xc7a <__portable_avr_delay_cycles>
     cce:	08 95       	ret

00000cd0 <ms5607_read>:
     cd0:	cf 93       	push	r28
}

uint16_t ms5607_read(uint16_t comm)
{
     cd2:	df 93       	push	r29
     cd4:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     cd6:	dc df       	rcall	.-72     	; 0xc90 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     cd8:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     cda:	70 d0       	rcall	.+224    	; 0xdbc <spi_write>
     cdc:	5f d0       	rcall	.+190    	; 0xd9c <spi_read>
     cde:	c8 2f       	mov	r28, r24
     ce0:	d0 e0       	ldi	r29, 0x00	; 0
     ce2:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     ce4:	cc 27       	eor	r28, r28
     ce6:	5a d0       	rcall	.+180    	; 0xd9c <spi_read>
     ce8:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     cea:	d2 df       	rcall	.-92     	; 0xc90 <flip_ms5607>
     cec:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <ms5607_convert_d1>:
     cf4:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     cfc:	c9 df       	rcall	.-110    	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     cfe:	88 e4       	ldi	r24, 0x48	; 72
     d00:	5d d0       	rcall	.+186    	; 0xdbc <spi_write>
	delay_ms(10);
     d02:	66 e5       	ldi	r22, 0x56	; 86
     d04:	70 ed       	ldi	r23, 0xD0	; 208
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     d0a:	b7 df       	rcall	.-146    	; 0xc7a <__portable_avr_delay_cycles>
	
	flip_ms5607();
     d0c:	c1 df       	rcall	.-126    	; 0xc90 <flip_ms5607>
     d0e:	c0 df       	rcall	.-128    	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	54 d0       	rcall	.+168    	; 0xdbc <spi_write>
     d14:	43 d0       	rcall	.+134    	; 0xd9c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     d16:	c8 2e       	mov	r12, r24
     d18:	d1 2c       	mov	r13, r1
     d1a:	e1 2c       	mov	r14, r1
     d1c:	f1 2c       	mov	r15, r1
     d1e:	76 01       	movw	r14, r12
     d20:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     d22:	cc 24       	eor	r12, r12
     d24:	3b d0       	rcall	.+118    	; 0xd9c <spi_read>
     d26:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     d28:	39 d0       	rcall	.+114    	; 0xd9c <spi_read>
     d2a:	c8 2a       	or	r12, r24
     d2c:	b1 df       	rcall	.-158    	; 0xc90 <flip_ms5607>
	flip_ms5607();
     d2e:	c7 01       	movw	r24, r14
     d30:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	08 95       	ret

00000d3c <ms5607_convert_d2>:
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     d44:	a5 df       	rcall	.-182    	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     d46:	88 e5       	ldi	r24, 0x58	; 88
     d48:	39 d0       	rcall	.+114    	; 0xdbc <spi_write>
	delay_ms(10);
     d4a:	66 e5       	ldi	r22, 0x56	; 86
     d4c:	70 ed       	ldi	r23, 0xD0	; 208
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     d52:	93 df       	rcall	.-218    	; 0xc7a <__portable_avr_delay_cycles>
	
	flip_ms5607();
     d54:	9d df       	rcall	.-198    	; 0xc90 <flip_ms5607>
     d56:	9c df       	rcall	.-200    	; 0xc90 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	30 d0       	rcall	.+96     	; 0xdbc <spi_write>
     d5c:	1f d0       	rcall	.+62     	; 0xd9c <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     d5e:	c8 2e       	mov	r12, r24
     d60:	d1 2c       	mov	r13, r1
     d62:	e1 2c       	mov	r14, r1
     d64:	f1 2c       	mov	r15, r1
     d66:	76 01       	movw	r14, r12
     d68:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     d6a:	cc 24       	eor	r12, r12
     d6c:	17 d0       	rcall	.+46     	; 0xd9c <spi_read>
     d6e:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     d70:	15 d0       	rcall	.+42     	; 0xd9c <spi_read>
     d72:	c8 2a       	or	r12, r24
     d74:	8d df       	rcall	.-230    	; 0xc90 <flip_ms5607>
	flip_ms5607();
     d76:	c7 01       	movw	r24, r14
     d78:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	08 95       	ret

00000d84 <spi_init>:
     d84:	68 e0       	ldi	r22, 0x08	; 8
     d86:	83 e0       	ldi	r24, 0x03	; 3
	PORTC.DIR |= 0b10110000; 
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     d88:	ac d1       	rcall	.+856    	; 0x10e2 <sysclk_enable_module>
     d8a:	81 e5       	ldi	r24, 0x51	; 81
     d8c:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     d90:	e0 e4       	ldi	r30, 0x40	; 64
     d92:	f6 e0       	ldi	r31, 0x06	; 6
     d94:	80 81       	ld	r24, Z
     d96:	80 6b       	ori	r24, 0xB0	; 176
     d98:	80 83       	st	Z, r24
     d9a:	08 95       	ret

00000d9c <spi_read>:

uint8_t spi_read(void)
{
	uint8_t iter_max = 100;
	uint8_t count = 0;
	SPIC.DATA = 0xFF; // make the DATA register something we know
     d9c:	e0 ec       	ldi	r30, 0xC0	; 192
     d9e:	f8 e0       	ldi	r31, 0x08	; 8
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS>>7) && count < iter_max){ // wait for the SPI interrupt flag to let us know the transfer is complete
     da4:	82 81       	ldd	r24, Z+2	; 0x02
     da6:	88 23       	and	r24, r24
     da8:	34 f0       	brlt	.+12     	; 0xdb6 <spi_read+0x1a>
     daa:	84 e6       	ldi	r24, 0x64	; 100
     dac:	92 81       	ldd	r25, Z+2	; 0x02
     dae:	99 23       	and	r25, r25
     db0:	14 f0       	brlt	.+4      	; 0xdb6 <spi_read+0x1a>
     db2:	81 50       	subi	r24, 0x01	; 1
     db4:	d9 f7       	brne	.-10     	; 0xdac <spi_read+0x10>
		count++;	
	}
	
	return SPIC.DATA; // return the data from this function
     db6:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     dba:	08 95       	ret

00000dbc <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     dbc:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     dc0:	e0 ec       	ldi	r30, 0xC0	; 192
     dc2:	f8 e0       	ldi	r31, 0x08	; 8
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	88 23       	and	r24, r24
     dc8:	ec f7       	brge	.-6      	; 0xdc4 <spi_write+0x8>
     dca:	08 95       	ret

00000dcc <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     dd2:	9d dc       	rcall	.-1734   	; 0x70e <usart_getchar>
     dd4:	88 83       	st	Y, r24
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     ddc:	90 cc       	rjmp	.-1760   	; 0x6fe <usart_putchar>
}
     dde:	08 95       	ret

00000de0 <data_terminal_init>:

#include <asf.h>
#include "data_logger.h"

void data_terminal_init()
{
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	27 97       	sbiw	r28, 0x07	; 7
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     dee:	60 e1       	ldi	r22, 0x10	; 16
     df0:	85 e0       	ldi	r24, 0x05	; 5
     df2:	77 d1       	rcall	.+750    	; 0x10e2 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     df4:	e0 e8       	ldi	r30, 0x80	; 128
     df6:	f6 e0       	ldi	r31, 0x06	; 6
     df8:	80 81       	ld	r24, Z
     dfa:	88 60       	ori	r24, 0x08	; 8
     dfc:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     dfe:	80 ea       	ldi	r24, 0xA0	; 160
     e00:	9a e0       	ldi	r25, 0x0A	; 10
     e02:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <stdio_base>
     e06:	90 93 f5 20 	sts	0x20F5, r25	; 0x8020f5 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e0a:	8e ee       	ldi	r24, 0xEE	; 238
     e0c:	96 e0       	ldi	r25, 0x06	; 6
     e0e:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <ptr_put>
     e12:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     e16:	86 ee       	ldi	r24, 0xE6	; 230
     e18:	96 e0       	ldi	r25, 0x06	; 6
     e1a:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <ptr_get>
     e1e:	90 93 f1 20 	sts	0x20F1, r25	; 0x8020f1 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     e22:	ed e0       	ldi	r30, 0x0D	; 13
     e24:	f0 e2       	ldi	r31, 0x20	; 32
     e26:	84 81       	ldd	r24, Z+4	; 0x04
     e28:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     e2a:	85 81       	ldd	r24, Z+5	; 0x05
     e2c:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     e2e:	86 81       	ldd	r24, Z+6	; 0x06
     e30:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	a2 81       	ldd	r26, Z+2	; 0x02
     e38:	b3 81       	ldd	r27, Z+3	; 0x03
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	ab 83       	std	Y+3, r26	; 0x03
     e40:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     e42:	60 e1       	ldi	r22, 0x10	; 16
     e44:	85 e0       	ldi	r24, 0x05	; 5
     e46:	4d d1       	rcall	.+666    	; 0x10e2 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     e48:	be 01       	movw	r22, r28
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	80 ea       	ldi	r24, 0xA0	; 160
     e50:	9a e0       	ldi	r25, 0x0A	; 10
     e52:	76 dd       	rcall	.-1300   	; 0x940 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     e54:	6c e6       	ldi	r22, 0x6C	; 108
     e56:	71 e0       	ldi	r23, 0x01	; 1
     e58:	85 e8       	ldi	r24, 0x85	; 133
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
     e60:	27 96       	adiw	r28, 0x07	; 7
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	fc 01       	movw	r30, r24
     e72:	41 15       	cp	r20, r1
     e74:	51 05       	cpc	r21, r1
     e76:	b1 f1       	breq	.+108    	; 0xee4 <rb16_write+0x78>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	db 01       	movw	r26, r22
     e84:	a8 0f       	add	r26, r24
     e86:	b9 1f       	adc	r27, r25
     e88:	8d 91       	ld	r24, X+
     e8a:	9c 91       	ld	r25, X
     e8c:	a2 81       	ldd	r26, Z+2	; 0x02
     e8e:	b3 81       	ldd	r27, Z+3	; 0x03
     e90:	aa 0f       	add	r26, r26
     e92:	bb 1f       	adc	r27, r27
     e94:	c6 81       	ldd	r28, Z+6	; 0x06
     e96:	d7 81       	ldd	r29, Z+7	; 0x07
     e98:	ac 0f       	add	r26, r28
     e9a:	bd 1f       	adc	r27, r29
     e9c:	8d 93       	st	X+, r24
     e9e:	9c 93       	st	X, r25
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	82 83       	std	Z+2, r24	; 0x02
     ea8:	93 83       	std	Z+3, r25	; 0x03
     eaa:	a0 81       	ld	r26, Z
     eac:	b1 81       	ldd	r27, Z+1	; 0x01
     eae:	8a 17       	cp	r24, r26
     eb0:	9b 07       	cpc	r25, r27
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <rb16_write+0x4c>
     eb4:	12 82       	std	Z+2, r1	; 0x02
     eb6:	13 82       	std	Z+3, r1	; 0x03
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	c4 81       	ldd	r28, Z+4	; 0x04
     ebe:	d5 81       	ldd	r29, Z+5	; 0x05
     ec0:	8c 17       	cp	r24, r28
     ec2:	9d 07       	cpc	r25, r29
     ec4:	49 f4       	brne	.+18     	; 0xed8 <rb16_write+0x6c>
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	a8 17       	cp	r26, r24
     eca:	b9 07       	cpc	r27, r25
     ecc:	19 f0       	breq	.+6      	; 0xed4 <rb16_write+0x68>
     ece:	84 83       	std	Z+4, r24	; 0x04
     ed0:	95 83       	std	Z+5, r25	; 0x05
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <rb16_write+0x6c>
     ed4:	14 82       	std	Z+4, r1	; 0x04
     ed6:	15 82       	std	Z+5, r1	; 0x05
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	82 2f       	mov	r24, r18
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	84 17       	cp	r24, r20
     ee0:	95 07       	cpc	r25, r21
     ee2:	68 f2       	brcs	.-102    	; 0xe7e <rb16_write+0x12>
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <rb16_init>:
     eea:	fc 01       	movw	r30, r24
     eec:	12 82       	std	Z+2, r1	; 0x02
     eee:	13 82       	std	Z+3, r1	; 0x03
     ef0:	14 82       	std	Z+4, r1	; 0x04
     ef2:	15 82       	std	Z+5, r1	; 0x05
     ef4:	66 83       	std	Z+6, r22	; 0x06
     ef6:	77 83       	std	Z+7, r23	; 0x07
     ef8:	40 83       	st	Z, r20
     efa:	51 83       	std	Z+1, r21	; 0x01
     efc:	08 95       	ret

00000efe <rb16_get_nth>:
     efe:	dc 01       	movw	r26, r24
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	ed 91       	ld	r30, X+
     f04:	fc 91       	ld	r31, X
     f06:	13 97       	sbiw	r26, 0x03	; 3
     f08:	cb 01       	movw	r24, r22
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	e8 17       	cp	r30, r24
     f0e:	f9 07       	cpc	r31, r25
     f10:	78 f0       	brcs	.+30     	; 0xf30 <rb16_get_nth+0x32>
     f12:	e1 50       	subi	r30, 0x01	; 1
     f14:	f0 48       	sbci	r31, 0x80	; 128
     f16:	e6 1b       	sub	r30, r22
     f18:	f7 0b       	sbc	r31, r23
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	16 96       	adiw	r26, 0x06	; 6
     f20:	8d 91       	ld	r24, X+
     f22:	9c 91       	ld	r25, X
     f24:	17 97       	sbiw	r26, 0x07	; 7
     f26:	e8 0f       	add	r30, r24
     f28:	f9 1f       	adc	r31, r25
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	08 95       	ret
     f30:	2d 91       	ld	r18, X+
     f32:	3c 91       	ld	r19, X
     f34:	11 97       	sbiw	r26, 0x01	; 1
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	e1 50       	subi	r30, 0x01	; 1
     f3c:	f0 48       	sbci	r31, 0x80	; 128
     f3e:	e6 1b       	sub	r30, r22
     f40:	f7 0b       	sbc	r31, r23
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	16 96       	adiw	r26, 0x06	; 6
     f48:	8d 91       	ld	r24, X+
     f4a:	9c 91       	ld	r25, X
     f4c:	17 97       	sbiw	r26, 0x07	; 7
     f4e:	e8 0f       	add	r30, r24
     f50:	f9 1f       	adc	r31, r25
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	08 95       	ret

00000f58 <rb32_write>:
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	fc 01       	movw	r30, r24
     f66:	41 15       	cp	r20, r1
     f68:	51 05       	cpc	r21, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <rb32_write+0x16>
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <rb32_write+0x94>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	db 01       	movw	r26, r22
     f7e:	a8 0f       	add	r26, r24
     f80:	b9 1f       	adc	r27, r25
     f82:	cd 90       	ld	r12, X+
     f84:	dd 90       	ld	r13, X+
     f86:	ed 90       	ld	r14, X+
     f88:	fc 90       	ld	r15, X
     f8a:	a2 81       	ldd	r26, Z+2	; 0x02
     f8c:	b3 81       	ldd	r27, Z+3	; 0x03
     f8e:	aa 0f       	add	r26, r26
     f90:	bb 1f       	adc	r27, r27
     f92:	aa 0f       	add	r26, r26
     f94:	bb 1f       	adc	r27, r27
     f96:	86 81       	ldd	r24, Z+6	; 0x06
     f98:	97 81       	ldd	r25, Z+7	; 0x07
     f9a:	a8 0f       	add	r26, r24
     f9c:	b9 1f       	adc	r27, r25
     f9e:	cd 92       	st	X+, r12
     fa0:	dd 92       	st	X+, r13
     fa2:	ed 92       	st	X+, r14
     fa4:	fc 92       	st	X, r15
     fa6:	13 97       	sbiw	r26, 0x03	; 3
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	82 83       	std	Z+2, r24	; 0x02
     fb0:	93 83       	std	Z+3, r25	; 0x03
     fb2:	a0 81       	ld	r26, Z
     fb4:	b1 81       	ldd	r27, Z+1	; 0x01
     fb6:	8a 17       	cp	r24, r26
     fb8:	9b 07       	cpc	r25, r27
     fba:	11 f4       	brne	.+4      	; 0xfc0 <rb32_write+0x68>
     fbc:	12 82       	std	Z+2, r1	; 0x02
     fbe:	13 82       	std	Z+3, r1	; 0x03
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	93 81       	ldd	r25, Z+3	; 0x03
     fc4:	c4 81       	ldd	r28, Z+4	; 0x04
     fc6:	d5 81       	ldd	r29, Z+5	; 0x05
     fc8:	8c 17       	cp	r24, r28
     fca:	9d 07       	cpc	r25, r29
     fcc:	49 f4       	brne	.+18     	; 0xfe0 <rb32_write+0x88>
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	a8 17       	cp	r26, r24
     fd2:	b9 07       	cpc	r27, r25
     fd4:	19 f0       	breq	.+6      	; 0xfdc <rb32_write+0x84>
     fd6:	84 83       	std	Z+4, r24	; 0x04
     fd8:	95 83       	std	Z+5, r25	; 0x05
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <rb32_write+0x88>
     fdc:	14 82       	std	Z+4, r1	; 0x04
     fde:	15 82       	std	Z+5, r1	; 0x05
     fe0:	2f 5f       	subi	r18, 0xFF	; 255
     fe2:	82 2f       	mov	r24, r18
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	84 17       	cp	r24, r20
     fe8:	95 07       	cpc	r25, r21
     fea:	20 f2       	brcs	.-120    	; 0xf74 <rb32_write+0x1c>
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	08 95       	ret

00000ffa <rb32_init>:
     ffa:	fc 01       	movw	r30, r24
     ffc:	12 82       	std	Z+2, r1	; 0x02
     ffe:	13 82       	std	Z+3, r1	; 0x03
    1000:	14 82       	std	Z+4, r1	; 0x04
    1002:	15 82       	std	Z+5, r1	; 0x05
    1004:	66 83       	std	Z+6, r22	; 0x06
    1006:	77 83       	std	Z+7, r23	; 0x07
    1008:	40 83       	st	Z, r20
    100a:	51 83       	std	Z+1, r21	; 0x01
    100c:	08 95       	ret

0000100e <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
    100e:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
    1010:	12 96       	adiw	r26, 0x02	; 2
    1012:	ed 91       	ld	r30, X+
    1014:	fc 91       	ld	r31, X
    1016:	13 97       	sbiw	r26, 0x03	; 3
    1018:	cb 01       	movw	r24, r22
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	e8 17       	cp	r30, r24
    101e:	f9 07       	cpc	r31, r25
    1020:	98 f0       	brcs	.+38     	; 0x1048 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
    1022:	e1 50       	subi	r30, 0x01	; 1
    1024:	f0 4c       	sbci	r31, 0xC0	; 192
    1026:	e6 1b       	sub	r30, r22
    1028:	f7 0b       	sbc	r31, r23
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	16 96       	adiw	r26, 0x06	; 6
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	17 97       	sbiw	r26, 0x07	; 7
    103a:	e8 0f       	add	r30, r24
    103c:	f9 1f       	adc	r31, r25
    103e:	60 81       	ld	r22, Z
    1040:	71 81       	ldd	r23, Z+1	; 0x01
    1042:	82 81       	ldd	r24, Z+2	; 0x02
    1044:	93 81       	ldd	r25, Z+3	; 0x03
    1046:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
    1048:	2d 91       	ld	r18, X+
    104a:	3c 91       	ld	r19, X
    104c:	11 97       	sbiw	r26, 0x01	; 1
    104e:	e2 0f       	add	r30, r18
    1050:	f3 1f       	adc	r31, r19
    1052:	e1 50       	subi	r30, 0x01	; 1
    1054:	f0 4c       	sbci	r31, 0xC0	; 192
    1056:	e6 1b       	sub	r30, r22
    1058:	f7 0b       	sbc	r31, r23
    105a:	ee 0f       	add	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	16 96       	adiw	r26, 0x06	; 6
    1064:	8d 91       	ld	r24, X+
    1066:	9c 91       	ld	r25, X
    1068:	17 97       	sbiw	r26, 0x07	; 7
    106a:	e8 0f       	add	r30, r24
    106c:	f9 1f       	adc	r31, r25
    106e:	60 81       	ld	r22, Z
    1070:	71 81       	ldd	r23, Z+1	; 0x01
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	93 81       	ldd	r25, Z+3	; 0x03
}
    1076:	08 95       	ret

00001078 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	1f 92       	push	r1
    107e:	1f 92       	push	r1
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    108a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    108e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1092:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1096:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    109a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    109e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10a2:	8f b7       	in	r24, 0x3f	; 63
    10a4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    10a6:	f8 94       	cli
	return flags;
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    10aa:	e0 e5       	ldi	r30, 0x50	; 80
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	82 60       	ori	r24, 0x02	; 2
    10b2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    10b8:	81 ff       	sbrs	r24, 1
    10ba:	fd cf       	rjmp	.-6      	; 0x10b6 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	80 e4       	ldi	r24, 0x40	; 64
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	25 d0       	rcall	.+74     	; 0x110e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10c4:	8f b7       	in	r24, 0x3f	; 63
    10c6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    10c8:	f8 94       	cli
	return flags;
    10ca:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    10cc:	e0 e5       	ldi	r30, 0x50	; 80
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8e 7f       	andi	r24, 0xFE	; 254
    10d4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10d6:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10ec:	9f b7       	in	r25, 0x3f	; 63
    10ee:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    10f0:	f8 94       	cli
	return flags;
    10f2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    10f4:	e8 2f       	mov	r30, r24
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	e0 59       	subi	r30, 0x90	; 144
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 95       	com	r22
    10fe:	80 81       	ld	r24, Z
    1100:	68 23       	and	r22, r24
    1102:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1104:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1106:	0f 90       	pop	r0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    110e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1110:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1112:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1114:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1116:	60 83       	st	Z, r22
	ret                             // Return to caller
    1118:	08 95       	ret

0000111a <__portable_avr_delay_cycles>:
	
	NVM.CMD = ERASE_EEPROM;
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <__portable_avr_delay_cycles+0xa>
    111c:	61 50       	subi	r22, 0x01	; 1
    111e:	71 09       	sbc	r23, r1
    1120:	81 09       	sbc	r24, r1
    1122:	91 09       	sbc	r25, r1
    1124:	61 15       	cp	r22, r1
    1126:	71 05       	cpc	r23, r1
    1128:	81 05       	cpc	r24, r1
    112a:	91 05       	cpc	r25, r1
    112c:	b9 f7       	brne	.-18     	; 0x111c <__portable_avr_delay_cycles+0x2>
    112e:	08 95       	ret

00001130 <pressure_init>:
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	b4 dd       	rcall	.-1176   	; 0xc9e <ms5607_init>
    1136:	82 ea       	ldi	r24, 0xA2	; 162
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	ca dd       	rcall	.-1132   	; 0xcd0 <ms5607_read>
    113c:	cd ed       	ldi	r28, 0xDD	; 221
    113e:	d0 e2       	ldi	r29, 0x20	; 32
    1140:	88 83       	st	Y, r24
    1142:	99 83       	std	Y+1, r25	; 0x01
    1144:	84 ea       	ldi	r24, 0xA4	; 164
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	c3 dd       	rcall	.-1146   	; 0xcd0 <ms5607_read>
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	9b 83       	std	Y+3, r25	; 0x03
    114e:	86 ea       	ldi	r24, 0xA6	; 166
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	be dd       	rcall	.-1156   	; 0xcd0 <ms5607_read>
    1154:	8c 83       	std	Y+4, r24	; 0x04
    1156:	9d 83       	std	Y+5, r25	; 0x05
    1158:	88 ea       	ldi	r24, 0xA8	; 168
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	b9 dd       	rcall	.-1166   	; 0xcd0 <ms5607_read>
    115e:	8e 83       	std	Y+6, r24	; 0x06
    1160:	9f 83       	std	Y+7, r25	; 0x07
    1162:	8a ea       	ldi	r24, 0xAA	; 170
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	b4 dd       	rcall	.-1176   	; 0xcd0 <ms5607_read>
    1168:	88 87       	std	Y+8, r24	; 0x08
    116a:	99 87       	std	Y+9, r25	; 0x09
    116c:	8c ea       	ldi	r24, 0xAC	; 172
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	af dd       	rcall	.-1186   	; 0xcd0 <ms5607_read>
    1172:	8a 87       	std	Y+10, r24	; 0x0a
    1174:	9b 87       	std	Y+11, r25	; 0x0b
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	08 95       	ret

0000117c <gps_init>:
    117c:	50 dd       	rcall	.-1376   	; 0xc1e <gps_uart_init>
    117e:	6b ea       	ldi	r22, 0xAB	; 171
    1180:	79 e2       	ldi	r23, 0x29	; 41
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	c9 df       	rcall	.-110    	; 0x111a <__portable_avr_delay_cycles>
    1188:	80 e3       	ldi	r24, 0x30	; 48
    118a:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    118e:	08 95       	ret

00001190 <get_pressure>:
    1190:	4f 92       	push	r4
    1192:	5f 92       	push	r5
    1194:	6f 92       	push	r6
    1196:	7f 92       	push	r7
    1198:	8f 92       	push	r8
    119a:	9f 92       	push	r9
    119c:	af 92       	push	r10
    119e:	bf 92       	push	r11
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	a3 dd       	rcall	.-1210   	; 0xcf4 <ms5607_convert_d1>
    11ae:	6b 01       	movw	r12, r22
    11b0:	7c 01       	movw	r14, r24
    11b2:	c4 dd       	rcall	.-1144   	; 0xd3c <ms5607_convert_d2>
    11b4:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatunsisf>
    11b8:	4b 01       	movw	r8, r22
    11ba:	5c 01       	movw	r10, r24
    11bc:	cd ed       	ldi	r28, 0xDD	; 221
    11be:	d0 e2       	ldi	r29, 0x20	; 32
    11c0:	68 85       	ldd	r22, Y+8	; 0x08
    11c2:	79 85       	ldd	r23, Y+9	; 0x09
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatunsisf>
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e8       	ldi	r20, 0x80	; 128
    11d2:	53 e4       	ldi	r21, 0x43	; 67
    11d4:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	c5 01       	movw	r24, r10
    11de:	b4 01       	movw	r22, r8
    11e0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    11e4:	4b 01       	movw	r8, r22
    11e6:	5c 01       	movw	r10, r24
    11e8:	6c 81       	ldd	r22, Y+4	; 0x04
    11ea:	7d 81       	ldd	r23, Y+5	; 0x05
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatunsisf>
    11f4:	a5 01       	movw	r20, r10
    11f6:	94 01       	movw	r18, r8
    11f8:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	5c e3       	ldi	r21, 0x3C	; 60
    1204:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1208:	2b 01       	movw	r4, r22
    120a:	3c 01       	movw	r6, r24
    120c:	68 81       	ld	r22, Y
    120e:	79 81       	ldd	r23, Y+1	; 0x01
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatunsisf>
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	57 e4       	ldi	r21, 0x47	; 71
    1220:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1224:	9b 01       	movw	r18, r22
    1226:	ac 01       	movw	r20, r24
    1228:	c3 01       	movw	r24, r6
    122a:	b2 01       	movw	r22, r4
    122c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    1230:	2b 01       	movw	r4, r22
    1232:	3c 01       	movw	r6, r24
    1234:	c7 01       	movw	r24, r14
    1236:	b6 01       	movw	r22, r12
    1238:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatunsisf>
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	c3 01       	movw	r24, r6
    1242:	b2 01       	movw	r22, r4
    1244:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	55 e3       	ldi	r21, 0x35	; 53
    1250:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1254:	6b 01       	movw	r12, r22
    1256:	7c 01       	movw	r14, r24
    1258:	6e 81       	ldd	r22, Y+6	; 0x06
    125a:	7f 81       	ldd	r23, Y+7	; 0x07
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatunsisf>
    1264:	a5 01       	movw	r20, r10
    1266:	94 01       	movw	r18, r8
    1268:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5c e3       	ldi	r21, 0x3C	; 60
    1274:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1278:	4b 01       	movw	r8, r22
    127a:	5c 01       	movw	r10, r24
    127c:	6a 81       	ldd	r22, Y+2	; 0x02
    127e:	7b 81       	ldd	r23, Y+3	; 0x03
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatunsisf>
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	58 e4       	ldi	r21, 0x48	; 72
    1290:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	c5 01       	movw	r24, r10
    129a:	b4 01       	movw	r22, r8
    129c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    12a0:	9b 01       	movw	r18, r22
    12a2:	ac 01       	movw	r20, r24
    12a4:	c7 01       	movw	r24, r14
    12a6:	b6 01       	movw	r22, r12
    12a8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	58 e3       	ldi	r21, 0x38	; 56
    12b4:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	bf 90       	pop	r11
    12c6:	af 90       	pop	r10
    12c8:	9f 90       	pop	r9
    12ca:	8f 90       	pop	r8
    12cc:	7f 90       	pop	r7
    12ce:	6f 90       	pop	r6
    12d0:	5f 90       	pop	r5
    12d2:	4f 90       	pop	r4
    12d4:	08 95       	ret

000012d6 <get_altitude>:
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	2b 01       	movw	r4, r22
    12f0:	3c 01       	movw	r6, r24
    12f2:	c0 90 21 20 	lds	r12, 0x2021	; 0x802021 <L>
    12f6:	d0 90 22 20 	lds	r13, 0x2022	; 0x802022 <L+0x1>
    12fa:	e0 90 23 20 	lds	r14, 0x2023	; 0x802023 <L+0x2>
    12fe:	f0 90 24 20 	lds	r15, 0x2024	; 0x802024 <L+0x3>
    1302:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <R>
    1306:	30 91 26 20 	lds	r19, 0x2026	; 0x802026 <R+0x1>
    130a:	40 91 27 20 	lds	r20, 0x2027	; 0x802027 <R+0x2>
    130e:	50 91 28 20 	lds	r21, 0x2028	; 0x802028 <R+0x3>
    1312:	c7 01       	movw	r24, r14
    1314:	b6 01       	movw	r22, r12
    1316:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    131a:	20 91 1d 20 	lds	r18, 0x201D	; 0x80201d <g_0>
    131e:	30 91 1e 20 	lds	r19, 0x201E	; 0x80201e <g_0+0x1>
    1322:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <g_0+0x2>
    1326:	50 91 20 20 	lds	r21, 0x2020	; 0x802020 <g_0+0x3>
    132a:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    132e:	4b 01       	movw	r8, r22
    1330:	5c 01       	movw	r10, r24
    1332:	a3 01       	movw	r20, r6
    1334:	92 01       	movw	r18, r4
    1336:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    133a:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    133e:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    1342:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    1346:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    134a:	a5 01       	movw	r20, r10
    134c:	94 01       	movw	r18, r8
    134e:	0e 94 84 18 	call	0x3108	; 0x3108 <pow>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    135e:	20 91 29 20 	lds	r18, 0x2029	; 0x802029 <ground_t>
    1362:	30 91 2a 20 	lds	r19, 0x202A	; 0x80202a <ground_t+0x1>
    1366:	40 91 2b 20 	lds	r20, 0x202B	; 0x80202b <ground_t+0x2>
    136a:	50 91 2c 20 	lds	r21, 0x202C	; 0x80202c <ground_t+0x3>
    136e:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1372:	a7 01       	movw	r20, r14
    1374:	96 01       	movw	r18, r12
    1376:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    137a:	20 91 e9 20 	lds	r18, 0x20E9	; 0x8020e9 <ground_a>
    137e:	30 91 ea 20 	lds	r19, 0x20EA	; 0x8020ea <ground_a+0x1>
    1382:	40 91 eb 20 	lds	r20, 0x20EB	; 0x8020eb <ground_a+0x2>
    1386:	50 91 ec 20 	lds	r21, 0x20EC	; 0x8020ec <ground_a+0x3>
    138a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	9f 90       	pop	r9
    139c:	8f 90       	pop	r8
    139e:	7f 90       	pop	r7
    13a0:	6f 90       	pop	r6
    13a2:	5f 90       	pop	r5
    13a4:	4f 90       	pop	r4
    13a6:	08 95       	ret

000013a8 <diff>:
    13a8:	2f 92       	push	r2
    13aa:	3f 92       	push	r3
    13ac:	4f 92       	push	r4
    13ae:	5f 92       	push	r5
    13b0:	6f 92       	push	r6
    13b2:	7f 92       	push	r7
    13b4:	8f 92       	push	r8
    13b6:	9f 92       	push	r9
    13b8:	af 92       	push	r10
    13ba:	bf 92       	push	r11
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <diff+0x26>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <diff+0x28>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	6c 01       	movw	r12, r24
    13d6:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    13da:	88 23       	and	r24, r24
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <diff+0x38>
    13de:	6c c0       	rjmp	.+216    	; 0x14b8 <diff+0x110>
    13e0:	00 e0       	ldi	r16, 0x00	; 0
    13e2:	10 e0       	ldi	r17, 0x00	; 0
    13e4:	41 2c       	mov	r4, r1
    13e6:	51 2c       	mov	r5, r1
    13e8:	32 01       	movw	r6, r4
    13ea:	86 2e       	mov	r8, r22
    13ec:	91 2c       	mov	r9, r1
    13ee:	a1 2c       	mov	r10, r1
    13f0:	b1 2c       	mov	r11, r1
    13f2:	89 82       	std	Y+1, r8	; 0x01
    13f4:	9a 82       	std	Y+2, r9	; 0x02
    13f6:	ab 82       	std	Y+3, r10	; 0x03
    13f8:	bc 82       	std	Y+4, r11	; 0x04
    13fa:	b8 01       	movw	r22, r16
    13fc:	c6 01       	movw	r24, r12
    13fe:	7f dd       	rcall	.-1282   	; 0xefe <rb16_get_nth>
    1400:	5c 01       	movw	r10, r24
    1402:	18 01       	movw	r2, r16
    1404:	2f ef       	ldi	r18, 0xFF	; 255
    1406:	22 1a       	sub	r2, r18
    1408:	32 0a       	sbc	r3, r18
    140a:	b1 01       	movw	r22, r2
    140c:	c6 01       	movw	r24, r12
    140e:	77 dd       	rcall	.-1298   	; 0xefe <rb16_get_nth>
    1410:	7c 01       	movw	r14, r24
    1412:	b8 01       	movw	r22, r16
    1414:	6e 5f       	subi	r22, 0xFE	; 254
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	c6 01       	movw	r24, r12
    141a:	71 dd       	rcall	.-1310   	; 0xefe <rb16_get_nth>
    141c:	a5 01       	movw	r20, r10
    141e:	bb 0c       	add	r11, r11
    1420:	66 0b       	sbc	r22, r22
    1422:	77 0b       	sbc	r23, r23
    1424:	8a 01       	movw	r16, r20
    1426:	9b 01       	movw	r18, r22
    1428:	00 0f       	add	r16, r16
    142a:	11 1f       	adc	r17, r17
    142c:	22 1f       	adc	r18, r18
    142e:	33 1f       	adc	r19, r19
    1430:	40 0f       	add	r20, r16
    1432:	51 1f       	adc	r21, r17
    1434:	62 1f       	adc	r22, r18
    1436:	73 1f       	adc	r23, r19
    1438:	87 01       	movw	r16, r14
    143a:	ff 0c       	add	r15, r15
    143c:	22 0b       	sbc	r18, r18
    143e:	33 0b       	sbc	r19, r19
    1440:	78 01       	movw	r14, r16
    1442:	89 01       	movw	r16, r18
    1444:	ee 0c       	add	r14, r14
    1446:	ff 1c       	adc	r15, r15
    1448:	00 1f       	adc	r16, r16
    144a:	11 1f       	adc	r17, r17
    144c:	ee 0c       	add	r14, r14
    144e:	ff 1c       	adc	r15, r15
    1450:	00 1f       	adc	r16, r16
    1452:	11 1f       	adc	r17, r17
    1454:	4a 01       	movw	r8, r20
    1456:	5b 01       	movw	r10, r22
    1458:	8e 18       	sub	r8, r14
    145a:	9f 08       	sbc	r9, r15
    145c:	a0 0a       	sbc	r10, r16
    145e:	b1 0a       	sbc	r11, r17
    1460:	ac 01       	movw	r20, r24
    1462:	99 0f       	add	r25, r25
    1464:	66 0b       	sbc	r22, r22
    1466:	77 0b       	sbc	r23, r23
    1468:	d5 01       	movw	r26, r10
    146a:	c4 01       	movw	r24, r8
    146c:	84 0f       	add	r24, r20
    146e:	95 1f       	adc	r25, r21
    1470:	a6 1f       	adc	r26, r22
    1472:	b7 1f       	adc	r27, r23
    1474:	9c 01       	movw	r18, r24
    1476:	ad 01       	movw	r20, r26
    1478:	69 81       	ldd	r22, Y+1	; 0x01
    147a:	7a 81       	ldd	r23, Y+2	; 0x02
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	0e 94 bd 19 	call	0x337a	; 0x337a <__mulsi3>
    1484:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__floatsisf>
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	c3 01       	movw	r24, r6
    149a:	b2 01       	movw	r22, r4
    149c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    14a0:	2b 01       	movw	r4, r22
    14a2:	3c 01       	movw	r6, r24
    14a4:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    14a8:	81 01       	movw	r16, r2
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	22 16       	cp	r2, r18
    14b0:	33 06       	cpc	r3, r19
    14b2:	08 f4       	brcc	.+2      	; 0x14b6 <diff+0x10e>
    14b4:	a2 cf       	rjmp	.-188    	; 0x13fa <diff+0x52>
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <diff+0x116>
    14b8:	41 2c       	mov	r4, r1
    14ba:	51 2c       	mov	r5, r1
    14bc:	32 01       	movw	r6, r4
    14be:	68 2f       	mov	r22, r24
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__floatsisf>
    14ca:	9b 01       	movw	r18, r22
    14cc:	ac 01       	movw	r20, r24
    14ce:	c3 01       	movw	r24, r6
    14d0:	b2 01       	movw	r22, r4
    14d2:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	48 ec       	ldi	r20, 0xC8	; 200
    14dc:	52 e4       	ldi	r21, 0x42	; 66
    14de:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    14e2:	26 96       	adiw	r28, 0x06	; 6
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	df 90       	pop	r13
    14f6:	cf 90       	pop	r12
    14f8:	bf 90       	pop	r11
    14fa:	af 90       	pop	r10
    14fc:	9f 90       	pop	r9
    14fe:	8f 90       	pop	r8
    1500:	7f 90       	pop	r7
    1502:	6f 90       	pop	r6
    1504:	5f 90       	pop	r5
    1506:	4f 90       	pop	r4
    1508:	3f 90       	pop	r3
    150a:	2f 90       	pop	r2
    150c:	08 95       	ret

0000150e <data_check>:
    150e:	3f 92       	push	r3
    1510:	4f 92       	push	r4
    1512:	5f 92       	push	r5
    1514:	6f 92       	push	r6
    1516:	7f 92       	push	r7
    1518:	8f 92       	push	r8
    151a:	9f 92       	push	r9
    151c:	af 92       	push	r10
    151e:	bf 92       	push	r11
    1520:	cf 92       	push	r12
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	00 d0       	rcall	.+0      	; 0x1532 <data_check+0x24>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <data_check+0x26>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	8c 01       	movw	r16, r24
    153a:	19 82       	std	Y+1, r1	; 0x01
    153c:	1a 82       	std	Y+2, r1	; 0x02
    153e:	c1 2c       	mov	r12, r1
    1540:	d1 2c       	mov	r13, r1
    1542:	76 01       	movw	r14, r12
    1544:	69 81       	ldd	r22, Y+1	; 0x01
    1546:	7a 81       	ldd	r23, Y+2	; 0x02
    1548:	c8 01       	movw	r24, r16
    154a:	61 dd       	rcall	.-1342   	; 0x100e <rb32_get_nth>
    154c:	4b 01       	movw	r8, r22
    154e:	5c 01       	movw	r10, r24
    1550:	21 ea       	ldi	r18, 0xA1	; 161
    1552:	82 1a       	sub	r8, r18
    1554:	26 e8       	ldi	r18, 0x86	; 134
    1556:	92 0a       	sbc	r9, r18
    1558:	21 e0       	ldi	r18, 0x01	; 1
    155a:	a2 0a       	sbc	r10, r18
    155c:	b1 08       	sbc	r11, r1
    155e:	2f ed       	ldi	r18, 0xDF	; 223
    1560:	82 16       	cp	r8, r18
    1562:	2f e0       	ldi	r18, 0x0F	; 15
    1564:	92 06       	cpc	r9, r18
    1566:	27 e9       	ldi	r18, 0x97	; 151
    1568:	a2 06       	cpc	r10, r18
    156a:	b1 04       	cpc	r11, r1
    156c:	80 f4       	brcc	.+32     	; 0x158e <data_check+0x80>
    156e:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__floatsisf>
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 ea       	ldi	r20, 0xA0	; 160
    1578:	50 e4       	ldi	r21, 0x40	; 64
    157a:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    157e:	9b 01       	movw	r18, r22
    1580:	ac 01       	movw	r20, r24
    1582:	c7 01       	movw	r24, r14
    1584:	b6 01       	movw	r22, r12
    1586:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    158a:	6b 01       	movw	r12, r22
    158c:	7c 01       	movw	r14, r24
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	05 97       	sbiw	r24, 0x05	; 5
    159a:	a1 f6       	brne	.-88     	; 0x1544 <data_check+0x36>
    159c:	19 82       	std	Y+1, r1	; 0x01
    159e:	1a 82       	std	Y+2, r1	; 0x02
    15a0:	81 2c       	mov	r8, r1
    15a2:	91 2c       	mov	r9, r1
    15a4:	54 01       	movw	r10, r8
    15a6:	69 81       	ldd	r22, Y+1	; 0x01
    15a8:	7a 81       	ldd	r23, Y+2	; 0x02
    15aa:	c8 01       	movw	r24, r16
    15ac:	30 dd       	rcall	.-1440   	; 0x100e <rb32_get_nth>
    15ae:	2b 01       	movw	r4, r22
    15b0:	3c 01       	movw	r6, r24
    15b2:	21 ea       	ldi	r18, 0xA1	; 161
    15b4:	42 1a       	sub	r4, r18
    15b6:	26 e8       	ldi	r18, 0x86	; 134
    15b8:	52 0a       	sbc	r5, r18
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	62 0a       	sbc	r6, r18
    15be:	71 08       	sbc	r7, r1
    15c0:	2f ed       	ldi	r18, 0xDF	; 223
    15c2:	42 16       	cp	r4, r18
    15c4:	2f e0       	ldi	r18, 0x0F	; 15
    15c6:	52 06       	cpc	r5, r18
    15c8:	27 e9       	ldi	r18, 0x97	; 151
    15ca:	62 06       	cpc	r6, r18
    15cc:	71 04       	cpc	r7, r1
    15ce:	90 f4       	brcc	.+36     	; 0x15f4 <data_check+0xe6>
    15d0:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__floatsisf>
    15d4:	a7 01       	movw	r20, r14
    15d6:	96 01       	movw	r18, r12
    15d8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    15e4:	9b 01       	movw	r18, r22
    15e6:	ac 01       	movw	r20, r24
    15e8:	c5 01       	movw	r24, r10
    15ea:	b4 01       	movw	r22, r8
    15ec:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    15f0:	4b 01       	movw	r8, r22
    15f2:	5c 01       	movw	r10, r24
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	05 97       	sbiw	r24, 0x05	; 5
    1600:	91 f6       	brne	.-92     	; 0x15a6 <data_check+0x98>
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e8       	ldi	r20, 0x80	; 128
    1608:	5e e3       	ldi	r21, 0x3E	; 62
    160a:	c5 01       	movw	r24, r10
    160c:	b4 01       	movw	r22, r8
    160e:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1612:	69 83       	std	Y+1, r22	; 0x01
    1614:	7a 83       	std	Y+2, r23	; 0x02
    1616:	8b 83       	std	Y+3, r24	; 0x03
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	1d 82       	std	Y+5, r1	; 0x05
    161c:	1e 82       	std	Y+6, r1	; 0x06
    161e:	31 2c       	mov	r3, r1
    1620:	41 2c       	mov	r4, r1
    1622:	51 2c       	mov	r5, r1
    1624:	32 01       	movw	r6, r4
    1626:	6d 81       	ldd	r22, Y+5	; 0x05
    1628:	7e 81       	ldd	r23, Y+6	; 0x06
    162a:	c8 01       	movw	r24, r16
    162c:	f0 dc       	rcall	.-1568   	; 0x100e <rb32_get_nth>
    162e:	4b 01       	movw	r8, r22
    1630:	5c 01       	movw	r10, r24
    1632:	21 ea       	ldi	r18, 0xA1	; 161
    1634:	82 1a       	sub	r8, r18
    1636:	26 e8       	ldi	r18, 0x86	; 134
    1638:	92 0a       	sbc	r9, r18
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	a2 0a       	sbc	r10, r18
    163e:	b1 08       	sbc	r11, r1
    1640:	2f ed       	ldi	r18, 0xDF	; 223
    1642:	82 16       	cp	r8, r18
    1644:	2f e0       	ldi	r18, 0x0F	; 15
    1646:	92 06       	cpc	r9, r18
    1648:	27 e9       	ldi	r18, 0x97	; 151
    164a:	a2 06       	cpc	r10, r18
    164c:	b1 04       	cpc	r11, r1
    164e:	50 f5       	brcc	.+84     	; 0x16a4 <data_check+0x196>
    1650:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__floatsisf>
    1654:	4b 01       	movw	r8, r22
    1656:	5c 01       	movw	r10, r24
    1658:	a7 01       	movw	r20, r14
    165a:	96 01       	movw	r18, r12
    165c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    1660:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1664:	9b 01       	movw	r18, r22
    1666:	77 23       	and	r23, r23
    1668:	24 f4       	brge	.+8      	; 0x1672 <data_check+0x164>
    166a:	22 27       	eor	r18, r18
    166c:	33 27       	eor	r19, r19
    166e:	26 1b       	sub	r18, r22
    1670:	37 0b       	sbc	r19, r23
    1672:	b9 01       	movw	r22, r18
    1674:	33 0f       	add	r19, r19
    1676:	88 0b       	sbc	r24, r24
    1678:	99 0b       	sbc	r25, r25
    167a:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__floatsisf>
    167e:	9b 01       	movw	r18, r22
    1680:	ac 01       	movw	r20, r24
    1682:	69 81       	ldd	r22, Y+1	; 0x01
    1684:	7a 81       	ldd	r23, Y+2	; 0x02
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	0e 94 16 18 	call	0x302c	; 0x302c <__gesf2>
    168e:	88 23       	and	r24, r24
    1690:	4c f0       	brlt	.+18     	; 0x16a4 <data_check+0x196>
    1692:	a5 01       	movw	r20, r10
    1694:	94 01       	movw	r18, r8
    1696:	c3 01       	movw	r24, r6
    1698:	b2 01       	movw	r22, r4
    169a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    169e:	2b 01       	movw	r4, r22
    16a0:	3c 01       	movw	r6, r24
    16a2:	33 94       	inc	r3
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	05 97       	sbiw	r24, 0x05	; 5
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <data_check+0x1a6>
    16b2:	b9 cf       	rjmp	.-142    	; 0x1626 <data_check+0x118>
    16b4:	33 20       	and	r3, r3
    16b6:	69 f0       	breq	.+26     	; 0x16d2 <data_check+0x1c4>
    16b8:	63 2d       	mov	r22, r3
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatunsisf>
    16c4:	9b 01       	movw	r18, r22
    16c6:	ac 01       	movw	r20, r24
    16c8:	c3 01       	movw	r24, r6
    16ca:	b2 01       	movw	r22, r4
    16cc:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <data_check+0x1cc>
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 e8       	ldi	r24, 0x80	; 128
    16d8:	9f eb       	ldi	r25, 0xBF	; 191
    16da:	26 96       	adiw	r28, 0x06	; 6
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	ef 90       	pop	r14
    16ec:	df 90       	pop	r13
    16ee:	cf 90       	pop	r12
    16f0:	bf 90       	pop	r11
    16f2:	af 90       	pop	r10
    16f4:	9f 90       	pop	r9
    16f6:	8f 90       	pop	r8
    16f8:	7f 90       	pop	r7
    16fa:	6f 90       	pop	r6
    16fc:	5f 90       	pop	r5
    16fe:	4f 90       	pop	r4
    1700:	3f 90       	pop	r3
    1702:	08 95       	ret

00001704 <data_collect>:
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	00 d0       	rcall	.+0      	; 0x171a <data_collect+0x16>
    171a:	00 d0       	rcall	.+0      	; 0x171c <data_collect+0x18>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	5c 01       	movw	r10, r24
    1722:	8b 01       	movw	r16, r22
    1724:	35 dd       	rcall	.-1430   	; 0x1190 <get_pressure>
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e2       	ldi	r20, 0x20	; 32
    172c:	51 e4       	ldi	r21, 0x41	; 65
    172e:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1732:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1736:	69 83       	std	Y+1, r22	; 0x01
    1738:	7a 83       	std	Y+2, r23	; 0x02
    173a:	8b 83       	std	Y+3, r24	; 0x03
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	be 01       	movw	r22, r28
    1744:	6f 5f       	subi	r22, 0xFF	; 255
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	c8 01       	movw	r24, r16
    174a:	06 dc       	rcall	.-2036   	; 0xf58 <rb32_write>
    174c:	c8 01       	movw	r24, r16
    174e:	df de       	rcall	.-578    	; 0x150e <data_check>
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e2       	ldi	r20, 0x20	; 32
    1756:	51 e4       	ldi	r21, 0x41	; 65
    1758:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    175c:	6b 01       	movw	r12, r22
    175e:	7c 01       	movw	r14, r24
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f eb       	ldi	r21, 0xBF	; 191
    1768:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__cmpsf2>
    176c:	88 23       	and	r24, r24
    176e:	81 f1       	breq	.+96     	; 0x17d0 <data_collect+0xcc>
    1770:	c0 92 d0 20 	sts	0x20D0, r12	; 0x8020d0 <press>
    1774:	d0 92 d1 20 	sts	0x20D1, r13	; 0x8020d1 <press+0x1>
    1778:	e0 92 d2 20 	sts	0x20D2, r14	; 0x8020d2 <press+0x2>
    177c:	f0 92 d3 20 	sts	0x20D3, r15	; 0x8020d3 <press+0x3>
    1780:	c7 01       	movw	r24, r14
    1782:	b6 01       	movw	r22, r12
    1784:	a8 dd       	rcall	.-1200   	; 0x12d6 <get_altitude>
    1786:	60 93 c8 20 	sts	0x20C8, r22	; 0x8020c8 <alt>
    178a:	70 93 c9 20 	sts	0x20C9, r23	; 0x8020c9 <alt+0x1>
    178e:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <alt+0x2>
    1792:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <alt+0x3>
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	48 ec       	ldi	r20, 0xC8	; 200
    179c:	52 e4       	ldi	r21, 0x42	; 66
    179e:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    17a2:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    17a6:	6d 83       	std	Y+5, r22	; 0x05
    17a8:	7e 83       	std	Y+6, r23	; 0x06
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	be 01       	movw	r22, r28
    17b0:	6b 5f       	subi	r22, 0xFB	; 251
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	c5 01       	movw	r24, r10
    17b6:	5a db       	rcall	.-2380   	; 0xe6c <rb16_write>
    17b8:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    17bc:	c5 01       	movw	r24, r10
    17be:	f4 dd       	rcall	.-1048   	; 0x13a8 <diff>
    17c0:	60 93 c0 20 	sts	0x20C0, r22	; 0x8020c0 <velocity>
    17c4:	70 93 c1 20 	sts	0x20C1, r23	; 0x8020c1 <velocity+0x1>
    17c8:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <velocity+0x2>
    17cc:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <velocity+0x3>
    17d0:	83 e3       	ldi	r24, 0x33	; 51
    17d2:	93 e1       	ldi	r25, 0x13	; 19
    17d4:	a0 e9       	ldi	r26, 0x90	; 144
    17d6:	b3 e4       	ldi	r27, 0x43	; 67
    17d8:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <temp>
    17dc:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <temp+0x1>
    17e0:	a0 93 ce 20 	sts	0x20CE, r26	; 0x8020ce <temp+0x2>
    17e4:	b0 93 cf 20 	sts	0x20CF, r27	; 0x8020cf <temp+0x3>
    17e8:	26 96       	adiw	r28, 0x06	; 6
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	ff 90       	pop	r15
    17f8:	ef 90       	pop	r14
    17fa:	df 90       	pop	r13
    17fc:	cf 90       	pop	r12
    17fe:	bf 90       	pop	r11
    1800:	af 90       	pop	r10
    1802:	08 95       	ret

00001804 <state_check>:
    1804:	cf 92       	push	r12
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	c0 90 c0 20 	lds	r12, 0x20C0	; 0x8020c0 <velocity>
    1810:	d0 90 c1 20 	lds	r13, 0x20C1	; 0x8020c1 <velocity+0x1>
    1814:	e0 90 c2 20 	lds	r14, 0x20C2	; 0x8020c2 <velocity+0x2>
    1818:	f0 90 c3 20 	lds	r15, 0x20C3	; 0x8020c3 <velocity+0x3>
    181c:	c7 01       	movw	r24, r14
    181e:	b6 01       	movw	r22, r12
    1820:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1824:	9b 01       	movw	r18, r22
    1826:	77 23       	and	r23, r23
    1828:	24 f4       	brge	.+8      	; 0x1832 <state_check+0x2e>
    182a:	22 27       	eor	r18, r18
    182c:	33 27       	eor	r19, r19
    182e:	26 1b       	sub	r18, r22
    1830:	37 0b       	sbc	r19, r23
    1832:	26 30       	cpi	r18, 0x06	; 6
    1834:	31 05       	cpc	r19, r1
    1836:	8c f0       	brlt	.+34     	; 0x185a <state_check+0x56>
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	a9 01       	movw	r20, r18
    183e:	c7 01       	movw	r24, r14
    1840:	b6 01       	movw	r22, r12
    1842:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__cmpsf2>
    1846:	88 23       	and	r24, r24
    1848:	24 f0       	brlt	.+8      	; 0x1852 <state_check+0x4e>
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	80 93 ef 20 	sts	0x20EF, r24	; 0x8020ef <state>
    1850:	24 c0       	rjmp	.+72     	; 0x189a <state_check+0x96>
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	80 93 ef 20 	sts	0x20EF, r24	; 0x8020ef <state>
    1858:	20 c0       	rjmp	.+64     	; 0x189a <state_check+0x96>
    185a:	10 92 ef 20 	sts	0x20EF, r1	; 0x8020ef <state>
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	48 e4       	ldi	r20, 0x48	; 72
    1864:	52 e4       	ldi	r21, 0x42	; 66
    1866:	60 91 c8 20 	lds	r22, 0x20C8	; 0x8020c8 <alt>
    186a:	70 91 c9 20 	lds	r23, 0x20C9	; 0x8020c9 <alt+0x1>
    186e:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <alt+0x2>
    1872:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <alt+0x3>
    1876:	0e 94 16 18 	call	0x302c	; 0x302c <__gesf2>
    187a:	18 16       	cp	r1, r24
    187c:	24 f0       	brlt	.+8      	; 0x1886 <state_check+0x82>
    187e:	80 91 ed 20 	lds	r24, 0x20ED	; 0x8020ed <reset_received>
    1882:	88 23       	and	r24, r24
    1884:	19 f0       	breq	.+6      	; 0x188c <state_check+0x88>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 ef 20 	sts	0x20EF, r24	; 0x8020ef <state>
    188c:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <released>
    1890:	88 23       	and	r24, r24
    1892:	19 f0       	breq	.+6      	; 0x189a <state_check+0x96>
    1894:	83 e0       	ldi	r24, 0x03	; 3
    1896:	80 93 ef 20 	sts	0x20EF, r24	; 0x8020ef <state>
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	08 95       	ret

000018a4 <servo_pid>:
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	7c 01       	movw	r14, r24
    18be:	c0 e0       	ldi	r28, 0x00	; 0
    18c0:	d0 e0       	ldi	r29, 0x00	; 0
    18c2:	00 e0       	ldi	r16, 0x00	; 0
    18c4:	10 e0       	ldi	r17, 0x00	; 0
    18c6:	be 01       	movw	r22, r28
    18c8:	c7 01       	movw	r24, r14
    18ca:	19 db       	rcall	.-2510   	; 0xefe <rb16_get_nth>
    18cc:	08 0f       	add	r16, r24
    18ce:	19 1f       	adc	r17, r25
    18d0:	21 96       	adiw	r28, 0x01	; 1
    18d2:	ca 30       	cpi	r28, 0x0A	; 10
    18d4:	d1 05       	cpc	r29, r1
    18d6:	b9 f7       	brne	.-18     	; 0x18c6 <servo_pid+0x22>
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	c7 01       	movw	r24, r14
    18de:	0f db       	rcall	.-2530   	; 0xefe <rb16_get_nth>
    18e0:	ec 01       	movw	r28, r24
    18e2:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    18e6:	c7 01       	movw	r24, r14
    18e8:	5f dd       	rcall	.-1346   	; 0x13a8 <diff>
    18ea:	6b 01       	movw	r12, r22
    18ec:	7c 01       	movw	r14, r24
    18ee:	be 01       	movw	r22, r28
    18f0:	dd 0f       	add	r29, r29
    18f2:	88 0b       	sbc	r24, r24
    18f4:	99 0b       	sbc	r25, r25
    18f6:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__floatsisf>
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	48 ec       	ldi	r20, 0xC8	; 200
    190a:	52 e4       	ldi	r21, 0x42	; 66
    190c:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    1910:	4b 01       	movw	r8, r22
    1912:	5c 01       	movw	r10, r24
    1914:	b8 01       	movw	r22, r16
    1916:	11 0f       	add	r17, r17
    1918:	88 0b       	sbc	r24, r24
    191a:	99 0b       	sbc	r25, r25
    191c:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__floatsisf>
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	a9 01       	movw	r20, r18
    1926:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	48 ec       	ldi	r20, 0xC8	; 200
    1930:	52 e4       	ldi	r21, 0x42	; 66
    1932:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    1936:	9b 01       	movw	r18, r22
    1938:	ac 01       	movw	r20, r24
    193a:	c5 01       	movw	r24, r10
    193c:	b4 01       	movw	r22, r8
    193e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    1942:	4b 01       	movw	r8, r22
    1944:	5c 01       	movw	r10, r24
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	c7 01       	movw	r24, r14
    194e:	b6 01       	movw	r22, r12
    1950:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	c5 01       	movw	r24, r10
    195a:	b4 01       	movw	r22, r8
    195c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e8       	ldi	r19, 0x80	; 128
    1964:	4b eb       	ldi	r20, 0xBB	; 187
    1966:	54 e4       	ldi	r21, 0x44	; 68
    1968:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    196c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__fixunssfsi>
    1970:	60 93 1b 20 	sts	0x201B, r22	; 0x80201b <servo_pulse>
    1974:	70 93 1c 20 	sts	0x201C, r23	; 0x80201c <servo_pulse+0x1>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__floatunsisf>
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	4a e7       	ldi	r20, 0x7A	; 122
    1986:	54 e4       	ldi	r21, 0x44	; 68
    1988:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__divsf3>
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	53 e4       	ldi	r21, 0x43	; 67
    1994:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1998:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__fixunssfsi>
    199c:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    19a0:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	df 90       	pop	r13
    19b2:	cf 90       	pop	r12
    19b4:	bf 90       	pop	r11
    19b6:	af 90       	pop	r10
    19b8:	9f 90       	pop	r9
    19ba:	8f 90       	pop	r8
    19bc:	08 95       	ret

000019be <clock_init>:
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	85 e0       	ldi	r24, 0x05	; 5
    19c2:	8f db       	rcall	.-2274   	; 0x10e2 <sysclk_enable_module>
    19c4:	e0 e0       	ldi	r30, 0x00	; 0
    19c6:	fa e0       	ldi	r31, 0x0A	; 10
    19c8:	87 e0       	ldi	r24, 0x07	; 7
    19ca:	80 83       	st	Z, r24
    19cc:	81 e1       	ldi	r24, 0x11	; 17
    19ce:	9a e7       	ldi	r25, 0x7A	; 122
    19d0:	86 a3       	std	Z+38, r24	; 0x26
    19d2:	97 a3       	std	Z+39, r25	; 0x27
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	86 83       	std	Z+6, r24	; 0x06
    19d8:	08 95       	ret

000019da <system_init>:
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	4c db       	rcall	.-2408   	; 0x1078 <sysclk_init>
    19e0:	6b ea       	ldi	r22, 0xAB	; 171
    19e2:	79 e2       	ldi	r23, 0x29	; 41
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	98 db       	rcall	.-2256   	; 0x111a <__portable_avr_delay_cycles>
    19ea:	78 94       	sei
    19ec:	8c eb       	ldi	r24, 0xBC	; 188
    19ee:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    19f2:	87 e0       	ldi	r24, 0x07	; 7
    19f4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19f8:	f3 d9       	rcall	.-3098   	; 0xde0 <data_terminal_init>
    19fa:	6b ea       	ldi	r22, 0xAB	; 171
    19fc:	70 eb       	ldi	r23, 0xB0	; 176
    19fe:	88 e2       	ldi	r24, 0x28	; 40
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	8b db       	rcall	.-2282   	; 0x111a <__portable_avr_delay_cycles>
    1a04:	6b ea       	ldi	r22, 0xAB	; 171
    1a06:	79 e2       	ldi	r23, 0x29	; 41
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	86 db       	rcall	.-2292   	; 0x111a <__portable_avr_delay_cycles>
    1a0e:	ba d9       	rcall	.-3212   	; 0xd84 <spi_init>
    1a10:	6b ea       	ldi	r22, 0xAB	; 171
    1a12:	79 e2       	ldi	r23, 0x29	; 41
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	80 db       	rcall	.-2304   	; 0x111a <__portable_avr_delay_cycles>
    1a1a:	8a db       	rcall	.-2284   	; 0x1130 <pressure_init>
    1a1c:	6b ea       	ldi	r22, 0xAB	; 171
    1a1e:	79 e2       	ldi	r23, 0x29	; 41
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	7a db       	rcall	.-2316   	; 0x111a <__portable_avr_delay_cycles>
    1a26:	80 e2       	ldi	r24, 0x20	; 32
    1a28:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
    1a2c:	a7 db       	rcall	.-2226   	; 0x117c <gps_init>
    1a2e:	c7 df       	rcall	.-114    	; 0x19be <clock_init>
    1a30:	e9 d8       	rcall	.-3630   	; 0xc04 <cam_init>
    1a32:	66 e5       	ldi	r22, 0x56	; 86
    1a34:	70 ed       	ldi	r23, 0xD0	; 208
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	6f db       	rcall	.-2338   	; 0x111a <__portable_avr_delay_cycles>
    1a3c:	e3 de       	rcall	.-570    	; 0x1804 <state_check>
    1a3e:	a8 db       	rcall	.-2224   	; 0x1190 <get_pressure>
    1a40:	60 93 2d 20 	sts	0x202D, r22	; 0x80202d <ground_p>
    1a44:	70 93 2e 20 	sts	0x202E, r23	; 0x80202e <ground_p+0x1>
    1a48:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <ground_p+0x2>
    1a4c:	90 93 30 20 	sts	0x2030, r25	; 0x802030 <ground_p+0x3>
    1a50:	03 e3       	ldi	r16, 0x33	; 51
    1a52:	13 e1       	ldi	r17, 0x13	; 19
    1a54:	20 e9       	ldi	r18, 0x90	; 144
    1a56:	33 e4       	ldi	r19, 0x43	; 67
    1a58:	00 93 29 20 	sts	0x2029, r16	; 0x802029 <ground_t>
    1a5c:	10 93 2a 20 	sts	0x202A, r17	; 0x80202a <ground_t+0x1>
    1a60:	20 93 2b 20 	sts	0x202B, r18	; 0x80202b <ground_t+0x2>
    1a64:	30 93 2c 20 	sts	0x202C, r19	; 0x80202c <ground_t+0x3>
    1a68:	36 dc       	rcall	.-1940   	; 0x12d6 <get_altitude>
    1a6a:	60 93 e9 20 	sts	0x20E9, r22	; 0x8020e9 <ground_a>
    1a6e:	70 93 ea 20 	sts	0x20EA, r23	; 0x8020ea <ground_a+0x1>
    1a72:	80 93 eb 20 	sts	0x20EB, r24	; 0x8020eb <ground_a+0x2>
    1a76:	90 93 ec 20 	sts	0x20EC, r25	; 0x8020ec <ground_a+0x3>
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

00001a80 <main>:
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	ce 56       	subi	r28, 0x6E	; 110
    1a8a:	d1 09       	sbc	r29, r1
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	a4 df       	rcall	.-184    	; 0x19da <system_init>
    1a92:	66 e5       	ldi	r22, 0x56	; 86
    1a94:	73 e2       	ldi	r23, 0x23	; 35
    1a96:	88 e0       	ldi	r24, 0x08	; 8
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	3f db       	rcall	.-2434   	; 0x111a <__portable_avr_delay_cycles>
    1a9c:	14 e1       	ldi	r17, 0x14	; 20
    1a9e:	be 01       	movw	r22, r28
    1aa0:	6f 5f       	subi	r22, 0xFF	; 255
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	fb 01       	movw	r30, r22
    1aa6:	81 2f       	mov	r24, r17
    1aa8:	11 92       	st	Z+, r1
    1aaa:	8a 95       	dec	r24
    1aac:	e9 f7       	brne	.-6      	; 0x1aa8 <main+0x28>
    1aae:	4a e0       	ldi	r20, 0x0A	; 10
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	45 96       	adiw	r24, 0x15	; 21
    1ab6:	19 da       	rcall	.-3022   	; 0xeea <rb16_init>
    1ab8:	be 01       	movw	r22, r28
    1aba:	63 5e       	subi	r22, 0xE3	; 227
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	88 e2       	ldi	r24, 0x28	; 40
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	11 92       	st	Z+, r1
    1ac4:	8a 95       	dec	r24
    1ac6:	e9 f7       	brne	.-6      	; 0x1ac2 <main+0x42>
    1ac8:	4a e0       	ldi	r20, 0x0A	; 10
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	ce 01       	movw	r24, r28
    1ace:	8b 5b       	subi	r24, 0xBB	; 187
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	93 da       	rcall	.-2778   	; 0xffa <rb32_init>
    1ad4:	be 01       	movw	r22, r28
    1ad6:	63 5b       	subi	r22, 0xB3	; 179
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	fb 01       	movw	r30, r22
    1adc:	11 92       	st	Z+, r1
    1ade:	1a 95       	dec	r17
    1ae0:	e9 f7       	brne	.-6      	; 0x1adc <main+0x5c>
    1ae2:	4a e0       	ldi	r20, 0x0A	; 10
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	8f 59       	subi	r24, 0x9F	; 159
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	fe d9       	rcall	.-3076   	; 0xeea <rb16_init>
    1aee:	af 96       	adiw	r28, 0x2f	; 47
    1af0:	1f ae       	std	Y+63, r1	; 0x3f
    1af2:	af 97       	sbiw	r28, 0x2f	; 47
    1af4:	ae 96       	adiw	r28, 0x2e	; 46
    1af6:	1f ae       	std	Y+63, r1	; 0x3f
    1af8:	ae 97       	sbiw	r28, 0x2e	; 46
    1afa:	0f 2e       	mov	r0, r31
    1afc:	fe e0       	ldi	r31, 0x0E	; 14
    1afe:	cf 2e       	mov	r12, r31
    1b00:	f1 e2       	ldi	r31, 0x21	; 33
    1b02:	df 2e       	mov	r13, r31
    1b04:	f0 2d       	mov	r31, r0
    1b06:	be 01       	movw	r22, r28
    1b08:	6b 5b       	subi	r22, 0xBB	; 187
    1b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	45 96       	adiw	r24, 0x15	; 21
    1b10:	f9 dd       	rcall	.-1038   	; 0x1704 <data_collect>
    1b12:	78 de       	rcall	.-784    	; 0x1804 <state_check>
    1b14:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <state>
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	41 f0       	breq	.+16     	; 0x1b2c <main+0xac>
    1b1c:	08 f4       	brcc	.+2      	; 0x1b20 <main+0xa0>
    1b1e:	5a c0       	rjmp	.+180    	; 0x1bd4 <main+0x154>
    1b20:	82 30       	cpi	r24, 0x02	; 2
    1b22:	01 f1       	breq	.+64     	; 0x1b64 <main+0xe4>
    1b24:	83 30       	cpi	r24, 0x03	; 3
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <main+0xaa>
    1b28:	49 c0       	rjmp	.+146    	; 0x1bbc <main+0x13c>
    1b2a:	52 c0       	rjmp	.+164    	; 0x1bd0 <main+0x150>
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	46 e1       	ldi	r20, 0x16	; 22
    1b32:	54 e4       	ldi	r21, 0x44	; 68
    1b34:	60 91 c8 20 	lds	r22, 0x20C8	; 0x8020c8 <alt>
    1b38:	70 91 c9 20 	lds	r23, 0x20C9	; 0x8020c9 <alt+0x1>
    1b3c:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <alt+0x2>
    1b40:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <alt+0x3>
    1b44:	0e 94 16 18 	call	0x302c	; 0x302c <__gesf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	0c f0       	brlt	.+2      	; 0x1b4e <main+0xce>
    1b4c:	43 c0       	rjmp	.+134    	; 0x1bd4 <main+0x154>
    1b4e:	ae 96       	adiw	r28, 0x2e	; 46
    1b50:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b52:	ae 97       	sbiw	r28, 0x2e	; 46
    1b54:	f1 11       	cpse	r31, r1
    1b56:	3e c0       	rjmp	.+124    	; 0x1bd4 <main+0x154>
    1b58:	5b d8       	rcall	.-3914   	; 0xc10 <cam_switch>
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	ae 96       	adiw	r28, 0x2e	; 46
    1b5e:	8f af       	std	Y+63, r24	; 0x3f
    1b60:	ae 97       	sbiw	r28, 0x2e	; 46
    1b62:	38 c0       	rjmp	.+112    	; 0x1bd4 <main+0x154>
    1b64:	ae 96       	adiw	r28, 0x2e	; 46
    1b66:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b68:	ae 97       	sbiw	r28, 0x2e	; 46
    1b6a:	91 11       	cpse	r25, r1
    1b6c:	05 c0       	rjmp	.+10     	; 0x1b78 <main+0xf8>
    1b6e:	50 d8       	rcall	.-3936   	; 0xc10 <cam_switch>
    1b70:	e1 e0       	ldi	r30, 0x01	; 1
    1b72:	ae 96       	adiw	r28, 0x2e	; 46
    1b74:	ef af       	std	Y+63, r30	; 0x3f
    1b76:	ae 97       	sbiw	r28, 0x2e	; 46
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	41 ee       	ldi	r20, 0xE1	; 225
    1b7e:	53 e4       	ldi	r21, 0x43	; 67
    1b80:	60 91 c8 20 	lds	r22, 0x20C8	; 0x8020c8 <alt>
    1b84:	70 91 c9 20 	lds	r23, 0x20C9	; 0x8020c9 <alt+0x1>
    1b88:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <alt+0x2>
    1b8c:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <alt+0x3>
    1b90:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    1b94:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1b98:	67 5f       	subi	r22, 0xF7	; 247
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	63 31       	cpi	r22, 0x13	; 19
    1b9e:	71 05       	cpc	r23, r1
    1ba0:	20 f4       	brcc	.+8      	; 0x1baa <main+0x12a>
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <released>
    1ba8:	2c d8       	rcall	.-4008   	; 0xc02 <hall_sensor_init>
    1baa:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <released>
    1bae:	88 23       	and	r24, r24
    1bb0:	89 f0       	breq	.+34     	; 0x1bd4 <main+0x154>
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	8f 59       	subi	r24, 0x9F	; 159
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	75 de       	rcall	.-790    	; 0x18a4 <servo_pid>
    1bba:	0c c0       	rjmp	.+24     	; 0x1bd4 <main+0x154>
    1bbc:	af 96       	adiw	r28, 0x2f	; 47
    1bbe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bc0:	af 97       	sbiw	r28, 0x2f	; 47
    1bc2:	f1 11       	cpse	r31, r1
    1bc4:	07 c0       	rjmp	.+14     	; 0x1bd4 <main+0x154>
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	af 96       	adiw	r28, 0x2f	; 47
    1bca:	8f af       	std	Y+63, r24	; 0x3f
    1bcc:	af 97       	sbiw	r28, 0x2f	; 47
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <main+0x154>
    1bd0:	10 92 ef 20 	sts	0x20EF, r1	; 0x8020ef <state>
    1bd4:	e0 90 d4 20 	lds	r14, 0x20D4	; 0x8020d4 <packets>
    1bd8:	f0 90 d5 20 	lds	r15, 0x20D5	; 0x8020d5 <packets+0x1>
    1bdc:	9f ef       	ldi	r25, 0xFF	; 255
    1bde:	e9 1a       	sub	r14, r25
    1be0:	f9 0a       	sbc	r15, r25
    1be2:	e0 92 d4 20 	sts	0x20D4, r14	; 0x8020d4 <packets>
    1be6:	f0 92 d5 20 	sts	0x20D5, r15	; 0x8020d5 <packets+0x1>
    1bea:	20 90 d6 20 	lds	r2, 0x20D6	; 0x8020d6 <timer>
    1bee:	30 90 d7 20 	lds	r3, 0x20D7	; 0x8020d7 <timer+0x1>
    1bf2:	21 14       	cp	r2, r1
    1bf4:	31 04       	cpc	r3, r1
    1bf6:	41 f0       	breq	.+16     	; 0x1c08 <main+0x188>
    1bf8:	c7 01       	movw	r24, r14
    1bfa:	b1 01       	movw	r22, r2
    1bfc:	0e 94 cc 19 	call	0x3398	; 0x3398 <__udivmodhi4>
    1c00:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <rate>
    1c04:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <rate+0x1>
    1c08:	60 91 b0 20 	lds	r22, 0x20B0	; 0x8020b0 <gps_alt>
    1c0c:	70 91 b1 20 	lds	r23, 0x20B1	; 0x8020b1 <gps_alt+0x1>
    1c10:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <gps_alt+0x2>
    1c14:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <gps_alt+0x3>
    1c18:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1c1c:	16 2f       	mov	r17, r22
    1c1e:	07 2f       	mov	r16, r23
    1c20:	80 90 b4 20 	lds	r8, 0x20B4	; 0x8020b4 <gps_long>
    1c24:	90 90 b5 20 	lds	r9, 0x20B5	; 0x8020b5 <gps_long+0x1>
    1c28:	a0 90 b6 20 	lds	r10, 0x20B6	; 0x8020b6 <gps_long+0x2>
    1c2c:	b0 90 b7 20 	lds	r11, 0x20B7	; 0x8020b7 <gps_long+0x3>
    1c30:	40 90 b8 20 	lds	r4, 0x20B8	; 0x8020b8 <gps_lat>
    1c34:	50 90 b9 20 	lds	r5, 0x20B9	; 0x8020b9 <gps_lat+0x1>
    1c38:	60 90 ba 20 	lds	r6, 0x20BA	; 0x8020ba <gps_lat+0x2>
    1c3c:	70 90 bb 20 	lds	r7, 0x20BB	; 0x8020bb <gps_lat+0x3>
    1c40:	60 91 bc 20 	lds	r22, 0x20BC	; 0x8020bc <gps_t>
    1c44:	70 91 bd 20 	lds	r23, 0x20BD	; 0x8020bd <gps_t+0x1>
    1c48:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <gps_t+0x2>
    1c4c:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <gps_t+0x3>
    1c50:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1c54:	ad 96       	adiw	r28, 0x2d	; 45
    1c56:	6c af       	std	Y+60, r22	; 0x3c
    1c58:	7d af       	std	Y+61, r23	; 0x3d
    1c5a:	8e af       	std	Y+62, r24	; 0x3e
    1c5c:	9f af       	std	Y+63, r25	; 0x3f
    1c5e:	ad 97       	sbiw	r28, 0x2d	; 45
    1c60:	60 91 9e 20 	lds	r22, 0x209E	; 0x80209e <__data_end>
    1c64:	70 91 9f 20 	lds	r23, 0x209F	; 0x80209f <__data_end+0x1>
    1c68:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <__data_end+0x2>
    1c6c:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <__data_end+0x3>
    1c70:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1c74:	7f 93       	push	r23
    1c76:	6f 93       	push	r22
    1c78:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <state>
    1c7c:	1f 92       	push	r1
    1c7e:	8f 93       	push	r24
    1c80:	60 91 a2 20 	lds	r22, 0x20A2	; 0x8020a2 <rpm>
    1c84:	70 91 a3 20 	lds	r23, 0x20A3	; 0x8020a3 <rpm+0x1>
    1c88:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <rpm+0x2>
    1c8c:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <rpm+0x3>
    1c90:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1c94:	7f 93       	push	r23
    1c96:	6f 93       	push	r22
    1c98:	60 91 a6 20 	lds	r22, 0x20A6	; 0x8020a6 <roll>
    1c9c:	70 91 a7 20 	lds	r23, 0x20A7	; 0x8020a7 <roll+0x1>
    1ca0:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <roll+0x2>
    1ca4:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <roll+0x3>
    1ca8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1cac:	7f 93       	push	r23
    1cae:	6f 93       	push	r22
    1cb0:	60 91 aa 20 	lds	r22, 0x20AA	; 0x8020aa <pitch>
    1cb4:	70 91 ab 20 	lds	r23, 0x20AB	; 0x8020ab <pitch+0x1>
    1cb8:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <pitch+0x2>
    1cbc:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <pitch+0x3>
    1cc0:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1cc4:	7f 93       	push	r23
    1cc6:	6f 93       	push	r22
    1cc8:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <gps_sats+0x1>
    1ccc:	8f 93       	push	r24
    1cce:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <gps_sats>
    1cd2:	8f 93       	push	r24
    1cd4:	81 2f       	mov	r24, r17
    1cd6:	90 2f       	mov	r25, r16
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	9c 01       	movw	r18, r24
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	82 0f       	add	r24, r18
    1ce8:	93 1f       	adc	r25, r19
    1cea:	6a e0       	ldi	r22, 0x0A	; 10
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__divmodhi4>
    1cf2:	9f 93       	push	r25
    1cf4:	8f 93       	push	r24
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	34 e2       	ldi	r19, 0x24	; 36
    1cfe:	44 e7       	ldi	r20, 0x74	; 116
    1d00:	59 e4       	ldi	r21, 0x49	; 73
    1d02:	c5 01       	movw	r24, r10
    1d04:	b4 01       	movw	r22, r8
    1d06:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1d0a:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1d0e:	20 e4       	ldi	r18, 0x40	; 64
    1d10:	32 e4       	ldi	r19, 0x42	; 66
    1d12:	4f e0       	ldi	r20, 0x0F	; 15
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    1d1a:	9b 01       	movw	r18, r22
    1d1c:	77 23       	and	r23, r23
    1d1e:	24 f4       	brge	.+8      	; 0x1d28 <main+0x2a8>
    1d20:	22 27       	eor	r18, r18
    1d22:	33 27       	eor	r19, r19
    1d24:	26 1b       	sub	r18, r22
    1d26:	37 0b       	sbc	r19, r23
    1d28:	c9 01       	movw	r24, r18
    1d2a:	33 0f       	add	r19, r19
    1d2c:	aa 0b       	sbc	r26, r26
    1d2e:	bb 0b       	sbc	r27, r27
    1d30:	bf 93       	push	r27
    1d32:	af 93       	push	r26
    1d34:	9f 93       	push	r25
    1d36:	8f 93       	push	r24
    1d38:	c5 01       	movw	r24, r10
    1d3a:	b4 01       	movw	r22, r8
    1d3c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1d40:	7f 93       	push	r23
    1d42:	6f 93       	push	r22
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	34 e2       	ldi	r19, 0x24	; 36
    1d48:	44 e7       	ldi	r20, 0x74	; 116
    1d4a:	59 e4       	ldi	r21, 0x49	; 73
    1d4c:	c3 01       	movw	r24, r6
    1d4e:	b2 01       	movw	r22, r4
    1d50:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    1d54:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1d58:	20 e4       	ldi	r18, 0x40	; 64
    1d5a:	32 e4       	ldi	r19, 0x42	; 66
    1d5c:	4f e0       	ldi	r20, 0x0F	; 15
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    1d64:	9f 93       	push	r25
    1d66:	8f 93       	push	r24
    1d68:	7f 93       	push	r23
    1d6a:	6f 93       	push	r22
    1d6c:	c3 01       	movw	r24, r6
    1d6e:	b2 01       	movw	r22, r4
    1d70:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1d74:	7f 93       	push	r23
    1d76:	6f 93       	push	r22
    1d78:	ad 96       	adiw	r28, 0x2d	; 45
    1d7a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d7c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d7e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d80:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d82:	ad 97       	sbiw	r28, 0x2d	; 45
    1d84:	24 e6       	ldi	r18, 0x64	; 100
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    1d90:	7f 93       	push	r23
    1d92:	6f 93       	push	r22
    1d94:	ad 96       	adiw	r28, 0x2d	; 45
    1d96:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d98:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d9e:	ad 97       	sbiw	r28, 0x2d	; 45
    1da0:	20 e1       	ldi	r18, 0x10	; 16
    1da2:	37 e2       	ldi	r19, 0x27	; 39
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    1dac:	12 2f       	mov	r17, r18
    1dae:	03 2f       	mov	r16, r19
    1db0:	24 e6       	ldi	r18, 0x64	; 100
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	50 e0       	ldi	r21, 0x00	; 0
    1db8:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    1dbc:	3f 93       	push	r19
    1dbe:	2f 93       	push	r18
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	60 91 c4 20 	lds	r22, 0x20C4	; 0x8020c4 <volt>
    1dc8:	70 91 c5 20 	lds	r23, 0x20C5	; 0x8020c5 <volt+0x1>
    1dcc:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <volt+0x2>
    1dd0:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <volt+0x3>
    1dd4:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1dd8:	7f 93       	push	r23
    1dda:	6f 93       	push	r22
    1ddc:	23 e3       	ldi	r18, 0x33	; 51
    1dde:	33 e9       	ldi	r19, 0x93	; 147
    1de0:	48 e8       	ldi	r20, 0x88	; 136
    1de2:	53 e4       	ldi	r21, 0x43	; 67
    1de4:	60 91 cc 20 	lds	r22, 0x20CC	; 0x8020cc <temp>
    1de8:	70 91 cd 20 	lds	r23, 0x20CD	; 0x8020cd <temp+0x1>
    1dec:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <temp+0x2>
    1df0:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <temp+0x3>
    1df4:	42 d7       	rcall	.+3716   	; 0x2c7a <__subsf3>
    1df6:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1dfa:	7f 93       	push	r23
    1dfc:	6f 93       	push	r22
    1dfe:	60 91 d0 20 	lds	r22, 0x20D0	; 0x8020d0 <press>
    1e02:	70 91 d1 20 	lds	r23, 0x20D1	; 0x8020d1 <press+0x1>
    1e06:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <press+0x2>
    1e0a:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <press+0x3>
    1e0e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__fixsfsi>
    1e12:	9f 93       	push	r25
    1e14:	8f 93       	push	r24
    1e16:	7f 93       	push	r23
    1e18:	6f 93       	push	r22
    1e1a:	60 91 c8 20 	lds	r22, 0x20C8	; 0x8020c8 <alt>
    1e1e:	70 91 c9 20 	lds	r23, 0x20C9	; 0x8020c9 <alt+0x1>
    1e22:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <alt+0x2>
    1e26:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <alt+0x3>
    1e2a:	f8 d7       	rcall	.+4080   	; 0x2e1c <__fixsfsi>
    1e2c:	7f 93       	push	r23
    1e2e:	6f 93       	push	r22
    1e30:	ff 92       	push	r15
    1e32:	ef 92       	push	r14
    1e34:	3f 92       	push	r3
    1e36:	2f 92       	push	r2
    1e38:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    1e3c:	8f 93       	push	r24
    1e3e:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    1e42:	8f 93       	push	r24
    1e44:	df 92       	push	r13
    1e46:	cf 92       	push	r12
    1e48:	0e 94 ad 1a 	call	0x355a	; 0x355a <sprintf>
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	5a ce       	rjmp	.-844    	; 0x1b06 <main+0x86>

00001e52 <reset>:
    1e52:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <press>
    1e56:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <press+0x1>
    1e5a:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <press+0x2>
    1e5e:	10 92 d3 20 	sts	0x20D3, r1	; 0x8020d3 <press+0x3>
    1e62:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <temp>
    1e66:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <temp+0x1>
    1e6a:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <temp+0x2>
    1e6e:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <temp+0x3>
    1e72:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <alt>
    1e76:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <alt+0x1>
    1e7a:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <alt+0x2>
    1e7e:	10 92 cb 20 	sts	0x20CB, r1	; 0x8020cb <alt+0x3>
    1e82:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <volt>
    1e86:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <volt+0x1>
    1e8a:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <volt+0x2>
    1e8e:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <volt+0x3>
    1e92:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <velocity>
    1e96:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <velocity+0x1>
    1e9a:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <velocity+0x2>
    1e9e:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <velocity+0x3>
    1ea2:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <gps_t>
    1ea6:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <gps_t+0x1>
    1eaa:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <gps_t+0x2>
    1eae:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <gps_t+0x3>
    1eb2:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <gps_lat>
    1eb6:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <gps_lat+0x1>
    1eba:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <gps_lat+0x2>
    1ebe:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <gps_lat+0x3>
    1ec2:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <gps_long>
    1ec6:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <gps_long+0x1>
    1eca:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <gps_long+0x2>
    1ece:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <gps_long+0x3>
    1ed2:	10 92 b0 20 	sts	0x20B0, r1	; 0x8020b0 <gps_alt>
    1ed6:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <gps_alt+0x1>
    1eda:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <gps_alt+0x2>
    1ede:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <gps_alt+0x3>
    1ee2:	10 92 ae 20 	sts	0x20AE, r1	; 0x8020ae <gps_sats>
    1ee6:	10 92 af 20 	sts	0x20AF, r1	; 0x8020af <gps_sats+0x1>
    1eea:	10 92 aa 20 	sts	0x20AA, r1	; 0x8020aa <pitch>
    1eee:	10 92 ab 20 	sts	0x20AB, r1	; 0x8020ab <pitch+0x1>
    1ef2:	10 92 ac 20 	sts	0x20AC, r1	; 0x8020ac <pitch+0x2>
    1ef6:	10 92 ad 20 	sts	0x20AD, r1	; 0x8020ad <pitch+0x3>
    1efa:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <roll>
    1efe:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <roll+0x1>
    1f02:	10 92 a8 20 	sts	0x20A8, r1	; 0x8020a8 <roll+0x2>
    1f06:	10 92 a9 20 	sts	0x20A9, r1	; 0x8020a9 <roll+0x3>
    1f0a:	10 92 a2 20 	sts	0x20A2, r1	; 0x8020a2 <rpm>
    1f0e:	10 92 a3 20 	sts	0x20A3, r1	; 0x8020a3 <rpm+0x1>
    1f12:	10 92 a4 20 	sts	0x20A4, r1	; 0x8020a4 <rpm+0x2>
    1f16:	10 92 a5 20 	sts	0x20A5, r1	; 0x8020a5 <rpm+0x3>
    1f1a:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <__data_end>
    1f1e:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <__data_end+0x1>
    1f22:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <__data_end+0x2>
    1f26:	10 92 a1 20 	sts	0x20A1, r1	; 0x8020a1 <__data_end+0x3>
    1f2a:	10 92 ef 20 	sts	0x20EF, r1	; 0x8020ef <state>
    1f2e:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <released>
    1f32:	53 dd       	rcall	.-1370   	; 0x19da <system_init>
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 ed 20 	sts	0x20ED, r24	; 0x8020ed <reset_received>
    1f3a:	08 95       	ret

00001f3c <cali_alt>:
    1f3c:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <press>
    1f40:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <press+0x1>
    1f44:	a0 91 d2 20 	lds	r26, 0x20D2	; 0x8020d2 <press+0x2>
    1f48:	b0 91 d3 20 	lds	r27, 0x20D3	; 0x8020d3 <press+0x3>
    1f4c:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p>
    1f50:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x1>
    1f54:	a0 93 2f 20 	sts	0x202F, r26	; 0x80202f <ground_p+0x2>
    1f58:	b0 93 30 20 	sts	0x2030, r27	; 0x802030 <ground_p+0x3>
    1f5c:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <alt>
    1f60:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <alt+0x1>
    1f64:	a0 91 ca 20 	lds	r26, 0x20CA	; 0x8020ca <alt+0x2>
    1f68:	b0 91 cb 20 	lds	r27, 0x20CB	; 0x8020cb <alt+0x3>
    1f6c:	80 93 e9 20 	sts	0x20E9, r24	; 0x8020e9 <ground_a>
    1f70:	90 93 ea 20 	sts	0x20EA, r25	; 0x8020ea <ground_a+0x1>
    1f74:	a0 93 eb 20 	sts	0x20EB, r26	; 0x8020eb <ground_a+0x2>
    1f78:	b0 93 ec 20 	sts	0x20EC, r27	; 0x8020ec <ground_a+0x3>
    1f7c:	83 e3       	ldi	r24, 0x33	; 51
    1f7e:	93 e1       	ldi	r25, 0x13	; 19
    1f80:	a0 e9       	ldi	r26, 0x90	; 144
    1f82:	b3 e4       	ldi	r27, 0x43	; 67
    1f84:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <ground_t>
    1f88:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <ground_t+0x1>
    1f8c:	a0 93 2b 20 	sts	0x202B, r26	; 0x80202b <ground_t+0x2>
    1f90:	b0 93 2c 20 	sts	0x202C, r27	; 0x80202c <ground_t+0x3>
    1f94:	08 95       	ret

00001f96 <send_gps>:
    1f96:	8f 92       	push	r8
    1f98:	9f 92       	push	r9
    1f9a:	af 92       	push	r10
    1f9c:	bf 92       	push	r11
    1f9e:	cf 92       	push	r12
    1fa0:	df 92       	push	r13
    1fa2:	ef 92       	push	r14
    1fa4:	ff 92       	push	r15
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	c6 54       	subi	r28, 0x46	; 70
    1fb4:	d1 09       	sbc	r29, r1
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	60 91 b4 20 	lds	r22, 0x20B4	; 0x8020b4 <gps_long>
    1fbe:	70 91 b5 20 	lds	r23, 0x20B5	; 0x8020b5 <gps_long+0x1>
    1fc2:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <gps_long+0x2>
    1fc6:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <gps_long+0x3>
    1fca:	28 d7       	rcall	.+3664   	; 0x2e1c <__fixsfsi>
    1fcc:	16 2f       	mov	r17, r22
    1fce:	07 2f       	mov	r16, r23
    1fd0:	c0 90 b8 20 	lds	r12, 0x20B8	; 0x8020b8 <gps_lat>
    1fd4:	d0 90 b9 20 	lds	r13, 0x20B9	; 0x8020b9 <gps_lat+0x1>
    1fd8:	e0 90 ba 20 	lds	r14, 0x20BA	; 0x8020ba <gps_lat+0x2>
    1fdc:	f0 90 bb 20 	lds	r15, 0x20BB	; 0x8020bb <gps_lat+0x3>
    1fe0:	a6 2f       	mov	r26, r22
    1fe2:	b7 2f       	mov	r27, r23
    1fe4:	bb 23       	and	r27, r27
    1fe6:	1c f4       	brge	.+6      	; 0x1fee <send_gps+0x58>
    1fe8:	b1 95       	neg	r27
    1fea:	a1 95       	neg	r26
    1fec:	b1 09       	sbc	r27, r1
    1fee:	20 e4       	ldi	r18, 0x40	; 64
    1ff0:	32 e4       	ldi	r19, 0x42	; 66
    1ff2:	4f e0       	ldi	r20, 0x0F	; 15
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__mulshisi3>
    1ffa:	0f 2e       	mov	r0, r31
    1ffc:	f0 e4       	ldi	r31, 0x40	; 64
    1ffe:	8f 2e       	mov	r8, r31
    2000:	f2 e4       	ldi	r31, 0x42	; 66
    2002:	9f 2e       	mov	r9, r31
    2004:	ff e0       	ldi	r31, 0x0F	; 15
    2006:	af 2e       	mov	r10, r31
    2008:	b1 2c       	mov	r11, r1
    200a:	f0 2d       	mov	r31, r0
    200c:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    2010:	9f 93       	push	r25
    2012:	8f 93       	push	r24
    2014:	7f 93       	push	r23
    2016:	6f 93       	push	r22
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	34 e2       	ldi	r19, 0x24	; 36
    2020:	44 e7       	ldi	r20, 0x74	; 116
    2022:	59 e4       	ldi	r21, 0x49	; 73
    2024:	c7 01       	movw	r24, r14
    2026:	b6 01       	movw	r22, r12
    2028:	0e 94 21 18 	call	0x3042	; 0x3042 <__mulsf3>
    202c:	f7 d6       	rcall	.+3566   	; 0x2e1c <__fixsfsi>
    202e:	a5 01       	movw	r20, r10
    2030:	94 01       	movw	r18, r8
    2032:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    2036:	9f 93       	push	r25
    2038:	8f 93       	push	r24
    203a:	7f 93       	push	r23
    203c:	6f 93       	push	r22
    203e:	c7 01       	movw	r24, r14
    2040:	b6 01       	movw	r22, r12
    2042:	ec d6       	rcall	.+3544   	; 0x2e1c <__fixsfsi>
    2044:	7f 93       	push	r23
    2046:	6f 93       	push	r22
    2048:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <gps_msg+0x1>
    204c:	8f 93       	push	r24
    204e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <gps_msg>
    2052:	8f 93       	push	r24
    2054:	8e 01       	movw	r16, r28
    2056:	0f 5f       	subi	r16, 0xFF	; 255
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	1f 93       	push	r17
    205c:	0f 93       	push	r16
    205e:	0e 94 ad 1a 	call	0x355a	; 0x355a <sprintf>
    2062:	1f 93       	push	r17
    2064:	0f 93       	push	r16
    2066:	0e 94 9a 1a 	call	0x3534	; 0x3534 <printf>
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	ca 5b       	subi	r28, 0xBA	; 186
    2070:	df 4f       	sbci	r29, 0xFF	; 255
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	ff 90       	pop	r15
    2080:	ef 90       	pop	r14
    2082:	df 90       	pop	r13
    2084:	cf 90       	pop	r12
    2086:	bf 90       	pop	r11
    2088:	af 90       	pop	r10
    208a:	9f 90       	pop	r9
    208c:	8f 90       	pop	r8
    208e:	08 95       	ret

00002090 <packet>:
    2090:	4f 92       	push	r4
    2092:	5f 92       	push	r5
    2094:	6f 92       	push	r6
    2096:	7f 92       	push	r7
    2098:	8f 92       	push	r8
    209a:	9f 92       	push	r9
    209c:	af 92       	push	r10
    209e:	bf 92       	push	r11
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	60 91 b0 20 	lds	r22, 0x20B0	; 0x8020b0 <gps_alt>
    20b0:	70 91 b1 20 	lds	r23, 0x20B1	; 0x8020b1 <gps_alt+0x1>
    20b4:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <gps_alt+0x2>
    20b8:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <gps_alt+0x3>
    20bc:	af d6       	rcall	.+3422   	; 0x2e1c <__fixsfsi>
    20be:	c6 2f       	mov	r28, r22
    20c0:	d7 2f       	mov	r29, r23
    20c2:	40 90 b4 20 	lds	r4, 0x20B4	; 0x8020b4 <gps_long>
    20c6:	50 90 b5 20 	lds	r5, 0x20B5	; 0x8020b5 <gps_long+0x1>
    20ca:	60 90 b6 20 	lds	r6, 0x20B6	; 0x8020b6 <gps_long+0x2>
    20ce:	70 90 b7 20 	lds	r7, 0x20B7	; 0x8020b7 <gps_long+0x3>
    20d2:	80 90 b8 20 	lds	r8, 0x20B8	; 0x8020b8 <gps_lat>
    20d6:	90 90 b9 20 	lds	r9, 0x20B9	; 0x8020b9 <gps_lat+0x1>
    20da:	a0 90 ba 20 	lds	r10, 0x20BA	; 0x8020ba <gps_lat+0x2>
    20de:	b0 90 bb 20 	lds	r11, 0x20BB	; 0x8020bb <gps_lat+0x3>
    20e2:	60 91 bc 20 	lds	r22, 0x20BC	; 0x8020bc <gps_t>
    20e6:	70 91 bd 20 	lds	r23, 0x20BD	; 0x8020bd <gps_t+0x1>
    20ea:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <gps_t+0x2>
    20ee:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <gps_t+0x3>
    20f2:	94 d6       	rcall	.+3368   	; 0x2e1c <__fixsfsi>
    20f4:	6b 01       	movw	r12, r22
    20f6:	7c 01       	movw	r14, r24
    20f8:	60 91 9e 20 	lds	r22, 0x209E	; 0x80209e <__data_end>
    20fc:	70 91 9f 20 	lds	r23, 0x209F	; 0x80209f <__data_end+0x1>
    2100:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <__data_end+0x2>
    2104:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <__data_end+0x3>
    2108:	89 d6       	rcall	.+3346   	; 0x2e1c <__fixsfsi>
    210a:	7f 93       	push	r23
    210c:	6f 93       	push	r22
    210e:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <state>
    2112:	1f 92       	push	r1
    2114:	8f 93       	push	r24
    2116:	60 91 a2 20 	lds	r22, 0x20A2	; 0x8020a2 <rpm>
    211a:	70 91 a3 20 	lds	r23, 0x20A3	; 0x8020a3 <rpm+0x1>
    211e:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <rpm+0x2>
    2122:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <rpm+0x3>
    2126:	7a d6       	rcall	.+3316   	; 0x2e1c <__fixsfsi>
    2128:	7f 93       	push	r23
    212a:	6f 93       	push	r22
    212c:	60 91 a6 20 	lds	r22, 0x20A6	; 0x8020a6 <roll>
    2130:	70 91 a7 20 	lds	r23, 0x20A7	; 0x8020a7 <roll+0x1>
    2134:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <roll+0x2>
    2138:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <roll+0x3>
    213c:	6f d6       	rcall	.+3294   	; 0x2e1c <__fixsfsi>
    213e:	7f 93       	push	r23
    2140:	6f 93       	push	r22
    2142:	60 91 aa 20 	lds	r22, 0x20AA	; 0x8020aa <pitch>
    2146:	70 91 ab 20 	lds	r23, 0x20AB	; 0x8020ab <pitch+0x1>
    214a:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <pitch+0x2>
    214e:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <pitch+0x3>
    2152:	64 d6       	rcall	.+3272   	; 0x2e1c <__fixsfsi>
    2154:	7f 93       	push	r23
    2156:	6f 93       	push	r22
    2158:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <gps_sats+0x1>
    215c:	8f 93       	push	r24
    215e:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <gps_sats>
    2162:	8f 93       	push	r24
    2164:	8c 2f       	mov	r24, r28
    2166:	9d 2f       	mov	r25, r29
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	9c 01       	movw	r18, r24
    216e:	22 0f       	add	r18, r18
    2170:	33 1f       	adc	r19, r19
    2172:	22 0f       	add	r18, r18
    2174:	33 1f       	adc	r19, r19
    2176:	82 0f       	add	r24, r18
    2178:	93 1f       	adc	r25, r19
    217a:	6a e0       	ldi	r22, 0x0A	; 10
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__divmodhi4>
    2182:	9f 93       	push	r25
    2184:	8f 93       	push	r24
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	34 e2       	ldi	r19, 0x24	; 36
    218e:	44 e7       	ldi	r20, 0x74	; 116
    2190:	59 e4       	ldi	r21, 0x49	; 73
    2192:	c3 01       	movw	r24, r6
    2194:	b2 01       	movw	r22, r4
    2196:	55 d7       	rcall	.+3754   	; 0x3042 <__mulsf3>
    2198:	41 d6       	rcall	.+3202   	; 0x2e1c <__fixsfsi>
    219a:	20 e4       	ldi	r18, 0x40	; 64
    219c:	32 e4       	ldi	r19, 0x42	; 66
    219e:	4f e0       	ldi	r20, 0x0F	; 15
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    21a6:	9b 01       	movw	r18, r22
    21a8:	77 23       	and	r23, r23
    21aa:	24 f4       	brge	.+8      	; 0x21b4 <packet+0x124>
    21ac:	22 27       	eor	r18, r18
    21ae:	33 27       	eor	r19, r19
    21b0:	26 1b       	sub	r18, r22
    21b2:	37 0b       	sbc	r19, r23
    21b4:	c9 01       	movw	r24, r18
    21b6:	33 0f       	add	r19, r19
    21b8:	aa 0b       	sbc	r26, r26
    21ba:	bb 0b       	sbc	r27, r27
    21bc:	bf 93       	push	r27
    21be:	af 93       	push	r26
    21c0:	9f 93       	push	r25
    21c2:	8f 93       	push	r24
    21c4:	c3 01       	movw	r24, r6
    21c6:	b2 01       	movw	r22, r4
    21c8:	29 d6       	rcall	.+3154   	; 0x2e1c <__fixsfsi>
    21ca:	7f 93       	push	r23
    21cc:	6f 93       	push	r22
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	34 e2       	ldi	r19, 0x24	; 36
    21d2:	44 e7       	ldi	r20, 0x74	; 116
    21d4:	59 e4       	ldi	r21, 0x49	; 73
    21d6:	c5 01       	movw	r24, r10
    21d8:	b4 01       	movw	r22, r8
    21da:	33 d7       	rcall	.+3686   	; 0x3042 <__mulsf3>
    21dc:	1f d6       	rcall	.+3134   	; 0x2e1c <__fixsfsi>
    21de:	20 e4       	ldi	r18, 0x40	; 64
    21e0:	32 e4       	ldi	r19, 0x42	; 66
    21e2:	4f e0       	ldi	r20, 0x0F	; 15
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    21ea:	9f 93       	push	r25
    21ec:	8f 93       	push	r24
    21ee:	7f 93       	push	r23
    21f0:	6f 93       	push	r22
    21f2:	c5 01       	movw	r24, r10
    21f4:	b4 01       	movw	r22, r8
    21f6:	12 d6       	rcall	.+3108   	; 0x2e1c <__fixsfsi>
    21f8:	7f 93       	push	r23
    21fa:	6f 93       	push	r22
    21fc:	0f 2e       	mov	r0, r31
    21fe:	f4 e6       	ldi	r31, 0x64	; 100
    2200:	8f 2e       	mov	r8, r31
    2202:	91 2c       	mov	r9, r1
    2204:	a1 2c       	mov	r10, r1
    2206:	b1 2c       	mov	r11, r1
    2208:	f0 2d       	mov	r31, r0
    220a:	c7 01       	movw	r24, r14
    220c:	b6 01       	movw	r22, r12
    220e:	a5 01       	movw	r20, r10
    2210:	94 01       	movw	r18, r8
    2212:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    2216:	7f 93       	push	r23
    2218:	6f 93       	push	r22
    221a:	c7 01       	movw	r24, r14
    221c:	b6 01       	movw	r22, r12
    221e:	20 e1       	ldi	r18, 0x10	; 16
    2220:	37 e2       	ldi	r19, 0x27	; 39
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    222a:	c2 2f       	mov	r28, r18
    222c:	d3 2f       	mov	r29, r19
    222e:	a5 01       	movw	r20, r10
    2230:	94 01       	movw	r18, r8
    2232:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    2236:	3f 93       	push	r19
    2238:	2f 93       	push	r18
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	60 91 c4 20 	lds	r22, 0x20C4	; 0x8020c4 <volt>
    2242:	70 91 c5 20 	lds	r23, 0x20C5	; 0x8020c5 <volt+0x1>
    2246:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <volt+0x2>
    224a:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <volt+0x3>
    224e:	e6 d5       	rcall	.+3020   	; 0x2e1c <__fixsfsi>
    2250:	7f 93       	push	r23
    2252:	6f 93       	push	r22
    2254:	23 e3       	ldi	r18, 0x33	; 51
    2256:	33 e9       	ldi	r19, 0x93	; 147
    2258:	48 e8       	ldi	r20, 0x88	; 136
    225a:	53 e4       	ldi	r21, 0x43	; 67
    225c:	60 91 cc 20 	lds	r22, 0x20CC	; 0x8020cc <temp>
    2260:	70 91 cd 20 	lds	r23, 0x20CD	; 0x8020cd <temp+0x1>
    2264:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <temp+0x2>
    2268:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <temp+0x3>
    226c:	06 d5       	rcall	.+2572   	; 0x2c7a <__subsf3>
    226e:	d6 d5       	rcall	.+2988   	; 0x2e1c <__fixsfsi>
    2270:	7f 93       	push	r23
    2272:	6f 93       	push	r22
    2274:	60 91 d0 20 	lds	r22, 0x20D0	; 0x8020d0 <press>
    2278:	70 91 d1 20 	lds	r23, 0x20D1	; 0x8020d1 <press+0x1>
    227c:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <press+0x2>
    2280:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <press+0x3>
    2284:	cb d5       	rcall	.+2966   	; 0x2e1c <__fixsfsi>
    2286:	9f 93       	push	r25
    2288:	8f 93       	push	r24
    228a:	7f 93       	push	r23
    228c:	6f 93       	push	r22
    228e:	60 91 c8 20 	lds	r22, 0x20C8	; 0x8020c8 <alt>
    2292:	70 91 c9 20 	lds	r23, 0x20C9	; 0x8020c9 <alt+0x1>
    2296:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <alt+0x2>
    229a:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <alt+0x3>
    229e:	be d5       	rcall	.+2940   	; 0x2e1c <__fixsfsi>
    22a0:	7f 93       	push	r23
    22a2:	6f 93       	push	r22
    22a4:	80 91 d5 20 	lds	r24, 0x20D5	; 0x8020d5 <packets+0x1>
    22a8:	8f 93       	push	r24
    22aa:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <packets>
    22ae:	8f 93       	push	r24
    22b0:	80 91 d7 20 	lds	r24, 0x20D7	; 0x8020d7 <timer+0x1>
    22b4:	8f 93       	push	r24
    22b6:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <timer>
    22ba:	8f 93       	push	r24
    22bc:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    22c0:	8f 93       	push	r24
    22c2:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    22c6:	8f 93       	push	r24
    22c8:	ce e0       	ldi	r28, 0x0E	; 14
    22ca:	d1 e2       	ldi	r29, 0x21	; 33
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	0e 94 ad 1a 	call	0x355a	; 0x355a <sprintf>
    22d4:	8d b7       	in	r24, 0x3d	; 61
    22d6:	9e b7       	in	r25, 0x3e	; 62
    22d8:	c4 96       	adiw	r24, 0x34	; 52
    22da:	8d bf       	out	0x3d, r24	; 61
    22dc:	9e bf       	out	0x3e, r25	; 62
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	0e 94 9a 1a 	call	0x3534	; 0x3534 <printf>
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	cf 90       	pop	r12
    22f6:	bf 90       	pop	r11
    22f8:	af 90       	pop	r10
    22fa:	9f 90       	pop	r9
    22fc:	8f 90       	pop	r8
    22fe:	7f 90       	pop	r7
    2300:	6f 90       	pop	r6
    2302:	5f 90       	pop	r5
    2304:	4f 90       	pop	r4
    2306:	08 95       	ret

00002308 <xbee_command>:
    2308:	84 36       	cpi	r24, 0x64	; 100
    230a:	91 f0       	breq	.+36     	; 0x2330 <xbee_command+0x28>
    230c:	28 f4       	brcc	.+10     	; 0x2318 <xbee_command+0x10>
    230e:	81 36       	cpi	r24, 0x61	; 97
    2310:	69 f0       	breq	.+26     	; 0x232c <xbee_command+0x24>
    2312:	83 36       	cpi	r24, 0x63	; 99
    2314:	49 f0       	breq	.+18     	; 0x2328 <xbee_command+0x20>
    2316:	08 95       	ret
    2318:	85 36       	cpi	r24, 0x65	; 101
    231a:	21 f0       	breq	.+8      	; 0x2324 <xbee_command+0x1c>
    231c:	86 36       	cpi	r24, 0x66	; 102
    231e:	49 f4       	brne	.+18     	; 0x2332 <xbee_command+0x2a>
    2320:	98 cd       	rjmp	.-1232   	; 0x1e52 <reset>
    2322:	08 95       	ret
    2324:	0b ce       	rjmp	.-1002   	; 0x1f3c <cali_alt>
    2326:	08 95       	ret
    2328:	09 ce       	rjmp	.-1006   	; 0x1f3c <cali_alt>
    232a:	08 95       	ret
    232c:	34 ce       	rjmp	.-920    	; 0x1f96 <send_gps>
    232e:	08 95       	ret
    2330:	af ce       	rjmp	.-674    	; 0x2090 <packet>
    2332:	08 95       	ret

00002334 <__vector_47>:

ISR(TCE0_OVF_vect){
    2334:	1f 92       	push	r1
    2336:	0f 92       	push	r0
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	0f 92       	push	r0
    233c:	11 24       	eor	r1, r1
    233e:	08 b6       	in	r0, 0x38	; 56
    2340:	0f 92       	push	r0
    2342:	18 be       	out	0x38, r1	; 56
    2344:	09 b6       	in	r0, 0x39	; 57
    2346:	0f 92       	push	r0
    2348:	19 be       	out	0x39, r1	; 57
    234a:	0a b6       	in	r0, 0x3a	; 58
    234c:	0f 92       	push	r0
    234e:	1a be       	out	0x3a, r1	; 58
    2350:	0b b6       	in	r0, 0x3b	; 59
    2352:	0f 92       	push	r0
    2354:	1b be       	out	0x3b, r1	; 59
    2356:	4f 92       	push	r4
    2358:	5f 92       	push	r5
    235a:	6f 92       	push	r6
    235c:	7f 92       	push	r7
    235e:	8f 92       	push	r8
    2360:	9f 92       	push	r9
    2362:	af 92       	push	r10
    2364:	bf 92       	push	r11
    2366:	cf 92       	push	r12
    2368:	df 92       	push	r13
    236a:	ef 92       	push	r14
    236c:	ff 92       	push	r15
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	2f 93       	push	r18
    2374:	3f 93       	push	r19
    2376:	4f 93       	push	r20
    2378:	5f 93       	push	r21
    237a:	6f 93       	push	r22
    237c:	7f 93       	push	r23
    237e:	8f 93       	push	r24
    2380:	9f 93       	push	r25
    2382:	af 93       	push	r26
    2384:	bf 93       	push	r27
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	ef 93       	push	r30
    238c:	ff 93       	push	r31
	timer++;
    238e:	c0 91 d6 20 	lds	r28, 0x20D6	; 0x8020d6 <timer>
    2392:	d0 91 d7 20 	lds	r29, 0x20D7	; 0x8020d7 <timer+0x1>
    2396:	21 96       	adiw	r28, 0x01	; 1
    2398:	c0 93 d6 20 	sts	0x20D6, r28	; 0x8020d6 <timer>
    239c:	d0 93 d7 20 	sts	0x20D7, r29	; 0x8020d7 <timer+0x1>
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
    23a0:	60 91 b0 20 	lds	r22, 0x20B0	; 0x8020b0 <gps_alt>
    23a4:	70 91 b1 20 	lds	r23, 0x20B1	; 0x8020b1 <gps_alt+0x1>
    23a8:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <gps_alt+0x2>
    23ac:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <gps_alt+0x3>
    23b0:	35 d5       	rcall	.+2666   	; 0x2e1c <__fixsfsi>
    23b2:	16 2f       	mov	r17, r22
    23b4:	07 2f       	mov	r16, r23
ISR(TCE0_OVF_vect){
	timer++;
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
    23b6:	40 90 b4 20 	lds	r4, 0x20B4	; 0x8020b4 <gps_long>
    23ba:	50 90 b5 20 	lds	r5, 0x20B5	; 0x8020b5 <gps_long+0x1>
    23be:	60 90 b6 20 	lds	r6, 0x20B6	; 0x8020b6 <gps_long+0x2>
    23c2:	70 90 b7 20 	lds	r7, 0x20B7	; 0x8020b7 <gps_long+0x3>
    23c6:	80 90 b8 20 	lds	r8, 0x20B8	; 0x8020b8 <gps_lat>
    23ca:	90 90 b9 20 	lds	r9, 0x20B9	; 0x8020b9 <gps_lat+0x1>
    23ce:	a0 90 ba 20 	lds	r10, 0x20BA	; 0x8020ba <gps_lat+0x2>
    23d2:	b0 90 bb 20 	lds	r11, 0x20BB	; 0x8020bb <gps_lat+0x3>

ISR(TCE0_OVF_vect){
	timer++;
	sprintf(str,format,timer,packets,
	(int16_t) (alt),						(int32_t) press,							(int16_t) (temp-273.15),				(int16_t)volt,
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
    23d6:	60 91 bc 20 	lds	r22, 0x20BC	; 0x8020bc <gps_t>
    23da:	70 91 bd 20 	lds	r23, 0x20BD	; 0x8020bd <gps_t+0x1>
    23de:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <gps_t+0x2>
    23e2:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <gps_t+0x3>
    23e6:	1a d5       	rcall	.+2612   	; 0x2e1c <__fixsfsi>
    23e8:	6b 01       	movw	r12, r22
    23ea:	7c 01       	movw	r14, r24
	while(NVM.STATUS>>7);
}

ISR(TCE0_OVF_vect){
	timer++;
	sprintf(str,format,timer,packets,
    23ec:	60 91 9e 20 	lds	r22, 0x209E	; 0x80209e <__data_end>
    23f0:	70 91 9f 20 	lds	r23, 0x209F	; 0x80209f <__data_end+0x1>
    23f4:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <__data_end+0x2>
    23f8:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <__data_end+0x3>
    23fc:	0f d5       	rcall	.+2590   	; 0x2e1c <__fixsfsi>
    23fe:	7f 93       	push	r23
    2400:	6f 93       	push	r22
    2402:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <state>
    2406:	1f 92       	push	r1
    2408:	8f 93       	push	r24
    240a:	60 91 a2 20 	lds	r22, 0x20A2	; 0x8020a2 <rpm>
    240e:	70 91 a3 20 	lds	r23, 0x20A3	; 0x8020a3 <rpm+0x1>
    2412:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <rpm+0x2>
    2416:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <rpm+0x3>
    241a:	00 d5       	rcall	.+2560   	; 0x2e1c <__fixsfsi>
    241c:	7f 93       	push	r23
    241e:	6f 93       	push	r22
    2420:	60 91 a6 20 	lds	r22, 0x20A6	; 0x8020a6 <roll>
    2424:	70 91 a7 20 	lds	r23, 0x20A7	; 0x8020a7 <roll+0x1>
    2428:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <roll+0x2>
    242c:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <roll+0x3>
    2430:	f5 d4       	rcall	.+2538   	; 0x2e1c <__fixsfsi>
    2432:	7f 93       	push	r23
    2434:	6f 93       	push	r22
    2436:	60 91 aa 20 	lds	r22, 0x20AA	; 0x8020aa <pitch>
    243a:	70 91 ab 20 	lds	r23, 0x20AB	; 0x8020ab <pitch+0x1>
    243e:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <pitch+0x2>
    2442:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <pitch+0x3>
    2446:	ea d4       	rcall	.+2516   	; 0x2e1c <__fixsfsi>
    2448:	7f 93       	push	r23
    244a:	6f 93       	push	r22
    244c:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <gps_sats+0x1>
    2450:	8f 93       	push	r24
    2452:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <gps_sats>
    2456:	8f 93       	push	r24
    2458:	81 2f       	mov	r24, r17
    245a:	90 2f       	mov	r25, r16
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	9c 01       	movw	r18, r24
    2462:	22 0f       	add	r18, r18
    2464:	33 1f       	adc	r19, r19
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	82 0f       	add	r24, r18
    246c:	93 1f       	adc	r25, r19
    246e:	6a e0       	ldi	r22, 0x0A	; 10
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	a6 d7       	rcall	.+3916   	; 0x33c0 <__divmodhi4>
    2474:	9f 93       	push	r25
    2476:	8f 93       	push	r24
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	34 e2       	ldi	r19, 0x24	; 36
    2480:	44 e7       	ldi	r20, 0x74	; 116
    2482:	59 e4       	ldi	r21, 0x49	; 73
    2484:	c3 01       	movw	r24, r6
    2486:	b2 01       	movw	r22, r4
    2488:	dc d5       	rcall	.+3000   	; 0x3042 <__mulsf3>
    248a:	c8 d4       	rcall	.+2448   	; 0x2e1c <__fixsfsi>
    248c:	20 e4       	ldi	r18, 0x40	; 64
    248e:	32 e4       	ldi	r19, 0x42	; 66
    2490:	4f e0       	ldi	r20, 0x0F	; 15
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	ca d7       	rcall	.+3988   	; 0x342a <__divmodsi4>
    2496:	9b 01       	movw	r18, r22
    2498:	77 23       	and	r23, r23
    249a:	24 f4       	brge	.+8      	; 0x24a4 <__vector_47+0x170>
    249c:	22 27       	eor	r18, r18
    249e:	33 27       	eor	r19, r19
    24a0:	26 1b       	sub	r18, r22
    24a2:	37 0b       	sbc	r19, r23
    24a4:	c9 01       	movw	r24, r18
    24a6:	33 0f       	add	r19, r19
    24a8:	aa 0b       	sbc	r26, r26
    24aa:	bb 0b       	sbc	r27, r27
    24ac:	bf 93       	push	r27
    24ae:	af 93       	push	r26
    24b0:	9f 93       	push	r25
    24b2:	8f 93       	push	r24
    24b4:	c3 01       	movw	r24, r6
    24b6:	b2 01       	movw	r22, r4
    24b8:	b1 d4       	rcall	.+2402   	; 0x2e1c <__fixsfsi>
    24ba:	7f 93       	push	r23
    24bc:	6f 93       	push	r22
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	34 e2       	ldi	r19, 0x24	; 36
    24c2:	44 e7       	ldi	r20, 0x74	; 116
    24c4:	59 e4       	ldi	r21, 0x49	; 73
    24c6:	c5 01       	movw	r24, r10
    24c8:	b4 01       	movw	r22, r8
    24ca:	bb d5       	rcall	.+2934   	; 0x3042 <__mulsf3>
    24cc:	a7 d4       	rcall	.+2382   	; 0x2e1c <__fixsfsi>
    24ce:	20 e4       	ldi	r18, 0x40	; 64
    24d0:	32 e4       	ldi	r19, 0x42	; 66
    24d2:	4f e0       	ldi	r20, 0x0F	; 15
    24d4:	50 e0       	ldi	r21, 0x00	; 0
    24d6:	a9 d7       	rcall	.+3922   	; 0x342a <__divmodsi4>
    24d8:	9f 93       	push	r25
    24da:	8f 93       	push	r24
    24dc:	7f 93       	push	r23
    24de:	6f 93       	push	r22
    24e0:	c5 01       	movw	r24, r10
    24e2:	b4 01       	movw	r22, r8
    24e4:	9b d4       	rcall	.+2358   	; 0x2e1c <__fixsfsi>
    24e6:	7f 93       	push	r23
    24e8:	6f 93       	push	r22
    24ea:	0f 2e       	mov	r0, r31
    24ec:	f4 e6       	ldi	r31, 0x64	; 100
    24ee:	8f 2e       	mov	r8, r31
    24f0:	91 2c       	mov	r9, r1
    24f2:	a1 2c       	mov	r10, r1
    24f4:	b1 2c       	mov	r11, r1
    24f6:	f0 2d       	mov	r31, r0
    24f8:	c7 01       	movw	r24, r14
    24fa:	b6 01       	movw	r22, r12
    24fc:	a5 01       	movw	r20, r10
    24fe:	94 01       	movw	r18, r8
    2500:	94 d7       	rcall	.+3880   	; 0x342a <__divmodsi4>
    2502:	7f 93       	push	r23
    2504:	6f 93       	push	r22
    2506:	c7 01       	movw	r24, r14
    2508:	b6 01       	movw	r22, r12
    250a:	20 e1       	ldi	r18, 0x10	; 16
    250c:	37 e2       	ldi	r19, 0x27	; 39
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	8b d7       	rcall	.+3862   	; 0x342a <__divmodsi4>
    2514:	12 2f       	mov	r17, r18
    2516:	03 2f       	mov	r16, r19
    2518:	a5 01       	movw	r20, r10
    251a:	94 01       	movw	r18, r8
    251c:	86 d7       	rcall	.+3852   	; 0x342a <__divmodsi4>
    251e:	3f 93       	push	r19
    2520:	2f 93       	push	r18
    2522:	0f 93       	push	r16
    2524:	1f 93       	push	r17
    2526:	60 91 c4 20 	lds	r22, 0x20C4	; 0x8020c4 <volt>
    252a:	70 91 c5 20 	lds	r23, 0x20C5	; 0x8020c5 <volt+0x1>
    252e:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <volt+0x2>
    2532:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <volt+0x3>
    2536:	72 d4       	rcall	.+2276   	; 0x2e1c <__fixsfsi>
    2538:	7f 93       	push	r23
    253a:	6f 93       	push	r22
    253c:	23 e3       	ldi	r18, 0x33	; 51
    253e:	33 e9       	ldi	r19, 0x93	; 147
    2540:	48 e8       	ldi	r20, 0x88	; 136
    2542:	53 e4       	ldi	r21, 0x43	; 67
    2544:	60 91 cc 20 	lds	r22, 0x20CC	; 0x8020cc <temp>
    2548:	70 91 cd 20 	lds	r23, 0x20CD	; 0x8020cd <temp+0x1>
    254c:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <temp+0x2>
    2550:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <temp+0x3>
    2554:	92 d3       	rcall	.+1828   	; 0x2c7a <__subsf3>
    2556:	62 d4       	rcall	.+2244   	; 0x2e1c <__fixsfsi>
    2558:	7f 93       	push	r23
    255a:	6f 93       	push	r22
    255c:	60 91 d0 20 	lds	r22, 0x20D0	; 0x8020d0 <press>
    2560:	70 91 d1 20 	lds	r23, 0x20D1	; 0x8020d1 <press+0x1>
    2564:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <press+0x2>
    2568:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <press+0x3>
    256c:	57 d4       	rcall	.+2222   	; 0x2e1c <__fixsfsi>
    256e:	9f 93       	push	r25
    2570:	8f 93       	push	r24
    2572:	7f 93       	push	r23
    2574:	6f 93       	push	r22
    2576:	60 91 c8 20 	lds	r22, 0x20C8	; 0x8020c8 <alt>
    257a:	70 91 c9 20 	lds	r23, 0x20C9	; 0x8020c9 <alt+0x1>
    257e:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <alt+0x2>
    2582:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <alt+0x3>
    2586:	4a d4       	rcall	.+2196   	; 0x2e1c <__fixsfsi>
    2588:	7f 93       	push	r23
    258a:	6f 93       	push	r22
    258c:	80 91 d5 20 	lds	r24, 0x20D5	; 0x8020d5 <packets+0x1>
    2590:	8f 93       	push	r24
    2592:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <packets>
    2596:	8f 93       	push	r24
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    25a0:	8f 93       	push	r24
    25a2:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    25a6:	8f 93       	push	r24
    25a8:	ce e0       	ldi	r28, 0x0E	; 14
    25aa:	d1 e2       	ldi	r29, 0x21	; 33
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	d4 d7       	rcall	.+4008   	; 0x355a <sprintf>
	(int16_t) (((int32_t)gps_t)/10000),		(int16_t) ((((int32_t)gps_t)%10000)/100),	(int16_t) (((int32_t)gps_t)%100),
	(int16_t) gps_lat,						((int32_t) (gps_lat*1000000))%1000000,		(int16_t) gps_long,						(int32_t)(abs(((int32_t)(gps_long*1000000))%1000000)),
	(int16_t) gps_alt,						((int16_t) (gps_alt)*10)%10,				gps_sats,
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t)angle); // Data Logging Test
	printf(str);
    25b2:	8d b7       	in	r24, 0x3d	; 61
    25b4:	9e b7       	in	r25, 0x3e	; 62
    25b6:	c4 96       	adiw	r24, 0x34	; 52
    25b8:	8d bf       	out	0x3d, r24	; 61
    25ba:	9e bf       	out	0x3e, r25	; 62
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	b9 d7       	rcall	.+3954   	; 0x3534 <printf>
    25c2:	0f 90       	pop	r0
	//XBEE_spi_write(str);
}
    25c4:	0f 90       	pop	r0
    25c6:	ff 91       	pop	r31
    25c8:	ef 91       	pop	r30
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	bf 91       	pop	r27
    25d0:	af 91       	pop	r26
    25d2:	9f 91       	pop	r25
    25d4:	8f 91       	pop	r24
    25d6:	7f 91       	pop	r23
    25d8:	6f 91       	pop	r22
    25da:	5f 91       	pop	r21
    25dc:	4f 91       	pop	r20
    25de:	3f 91       	pop	r19
    25e0:	2f 91       	pop	r18
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	bf 90       	pop	r11
    25f0:	af 90       	pop	r10
    25f2:	9f 90       	pop	r9
    25f4:	8f 90       	pop	r8
    25f6:	7f 90       	pop	r7
    25f8:	6f 90       	pop	r6
    25fa:	5f 90       	pop	r5
    25fc:	4f 90       	pop	r4
    25fe:	0f 90       	pop	r0
    2600:	0b be       	out	0x3b, r0	; 59
    2602:	0f 90       	pop	r0
    2604:	0a be       	out	0x3a, r0	; 58
    2606:	0f 90       	pop	r0
    2608:	09 be       	out	0x39, r0	; 57
    260a:	0f 90       	pop	r0
    260c:	08 be       	out	0x38, r0	; 56
    260e:	0f 90       	pop	r0
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	0f 90       	pop	r0
    2614:	1f 90       	pop	r1
    2616:	18 95       	reti

00002618 <__vector_58>:
    2618:	1f 92       	push	r1

ISR(USARTE0_RXC_vect){
    261a:	0f 92       	push	r0
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	0f 92       	push	r0
    2620:	11 24       	eor	r1, r1
    2622:	08 b6       	in	r0, 0x38	; 56
    2624:	0f 92       	push	r0
    2626:	18 be       	out	0x38, r1	; 56
    2628:	09 b6       	in	r0, 0x39	; 57
    262a:	0f 92       	push	r0
    262c:	19 be       	out	0x39, r1	; 57
    262e:	0b b6       	in	r0, 0x3b	; 59
    2630:	0f 92       	push	r0
    2632:	1b be       	out	0x3b, r1	; 59
    2634:	2f 93       	push	r18
    2636:	3f 93       	push	r19
    2638:	4f 93       	push	r20
    263a:	5f 93       	push	r21
    263c:	6f 93       	push	r22
    263e:	7f 93       	push	r23
    2640:	8f 93       	push	r24
    2642:	9f 93       	push	r25
    2644:	af 93       	push	r26
    2646:	bf 93       	push	r27
    2648:	ef 93       	push	r30
    264a:	ff 93       	push	r31
	uint8_t c = usart_getchar(UART_TERMINAL_SERIAL);
    264c:	80 ea       	ldi	r24, 0xA0	; 160
    264e:	9a e0       	ldi	r25, 0x0A	; 10
    2650:	0e 94 87 03 	call	0x70e	; 0x70e <usart_getchar>
	//printf("%c\n", c);
	xbee_command(c);
    2654:	59 de       	rcall	.-846    	; 0x2308 <xbee_command>
}
    2656:	ff 91       	pop	r31
    2658:	ef 91       	pop	r30
    265a:	bf 91       	pop	r27
    265c:	af 91       	pop	r26
    265e:	9f 91       	pop	r25
    2660:	8f 91       	pop	r24
    2662:	7f 91       	pop	r23
    2664:	6f 91       	pop	r22
    2666:	5f 91       	pop	r21
    2668:	4f 91       	pop	r20
    266a:	3f 91       	pop	r19
    266c:	2f 91       	pop	r18
    266e:	0f 90       	pop	r0
    2670:	0b be       	out	0x3b, r0	; 59
    2672:	0f 90       	pop	r0
    2674:	09 be       	out	0x39, r0	; 57
    2676:	0f 90       	pop	r0
    2678:	08 be       	out	0x38, r0	; 56
    267a:	0f 90       	pop	r0
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	0f 90       	pop	r0
    2680:	1f 90       	pop	r1
    2682:	18 95       	reti

00002684 <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    2684:	1f 92       	push	r1
    2686:	0f 92       	push	r0
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	0f 92       	push	r0
    268c:	11 24       	eor	r1, r1
    268e:	08 b6       	in	r0, 0x38	; 56
    2690:	0f 92       	push	r0
    2692:	18 be       	out	0x38, r1	; 56
    2694:	09 b6       	in	r0, 0x39	; 57
    2696:	0f 92       	push	r0
    2698:	19 be       	out	0x39, r1	; 57
    269a:	0a b6       	in	r0, 0x3a	; 58
    269c:	0f 92       	push	r0
    269e:	1a be       	out	0x3a, r1	; 58
    26a0:	0b b6       	in	r0, 0x3b	; 59
    26a2:	0f 92       	push	r0
    26a4:	1b be       	out	0x3b, r1	; 59
    26a6:	8f 92       	push	r8
    26a8:	9f 92       	push	r9
    26aa:	af 92       	push	r10
    26ac:	bf 92       	push	r11
    26ae:	cf 92       	push	r12
    26b0:	df 92       	push	r13
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	1f 93       	push	r17
    26b8:	2f 93       	push	r18
    26ba:	3f 93       	push	r19
    26bc:	4f 93       	push	r20
    26be:	5f 93       	push	r21
    26c0:	6f 93       	push	r22
    26c2:	7f 93       	push	r23
    26c4:	8f 93       	push	r24
    26c6:	9f 93       	push	r25
    26c8:	af 93       	push	r26
    26ca:	bf 93       	push	r27
    26cc:	ef 93       	push	r30
    26ce:	ff 93       	push	r31
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <__vector_91+0x52>
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <__vector_91+0x54>
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    26dc:	80 eb       	ldi	r24, 0xB0	; 176
    26de:	99 e0       	ldi	r25, 0x09	; 9
    26e0:	0e 94 87 03 	call	0x70e	; 0x70e <usart_getchar>
    26e4:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    26e6:	84 32       	cpi	r24, 0x24	; 36
    26e8:	49 f4       	brne	.+18     	; 0x26fc <__vector_91+0x78>
		writing = 1;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <writing>
		pos = 0;
		word_pos = 0;
    26f0:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <word_pos>
		commas = 0;
    26f4:	10 92 d9 20 	sts	0x20D9, r1	; 0x8020d9 <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	68 c2       	rjmp	.+1232   	; 0x2bcc <__vector_91+0x548>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    26fc:	8a 32       	cpi	r24, 0x2A	; 42
    26fe:	29 f4       	brne	.+10     	; 0x270a <__vector_91+0x86>
		commas = 0;
    2700:	10 92 d9 20 	sts	0x20D9, r1	; 0x8020d9 <commas>
		writing = 0;
    2704:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <writing>
    2708:	91 c2       	rjmp	.+1314   	; 0x2c2c <__vector_91+0x5a8>
	}
	else if(c == (uint8_t) ','){
    270a:	8c 32       	cpi	r24, 0x2C	; 44
    270c:	09 f0       	breq	.+2      	; 0x2710 <__vector_91+0x8c>
    270e:	49 c2       	rjmp	.+1170   	; 0x2ba2 <__vector_91+0x51e>
		gps[0] = 32;
    2710:	ea ef       	ldi	r30, 0xFA	; 250
    2712:	f0 e2       	ldi	r31, 0x20	; 32
    2714:	80 e2       	ldi	r24, 0x20	; 32
    2716:	80 83       	st	Z, r24
		if(gps[1] == 32){
    2718:	81 81       	ldd	r24, Z+1	; 0x01
    271a:	80 32       	cpi	r24, 0x20	; 32
    271c:	09 f0       	breq	.+2      	; 0x2720 <__vector_91+0x9c>
    271e:	6d c2       	rjmp	.+1242   	; 0x2bfa <__vector_91+0x576>
			gps[0] = '0';
    2720:	80 e3       	ldi	r24, 0x30	; 48
    2722:	80 93 fa 20 	sts	0x20FA, r24	; 0x8020fa <gps>
    2726:	69 c2       	rjmp	.+1234   	; 0x2bfa <__vector_91+0x576>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2728:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <gps>
    272c:	8e 32       	cpi	r24, 0x2E	; 46
    272e:	09 f0       	breq	.+2      	; 0x2732 <__vector_91+0xae>
    2730:	9e c1       	rjmp	.+828    	; 0x2a6e <__vector_91+0x3ea>
    2732:	a4 c1       	rjmp	.+840    	; 0x2a7c <__vector_91+0x3f8>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2734:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <gps>
    2738:	8e 32       	cpi	r24, 0x2E	; 46
    273a:	09 f0       	breq	.+2      	; 0x273e <__vector_91+0xba>
    273c:	ec c0       	rjmp	.+472    	; 0x2916 <__vector_91+0x292>
    273e:	f2 c0       	rjmp	.+484    	; 0x2924 <__vector_91+0x2a0>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2740:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <gps>
    2744:	8e 32       	cpi	r24, 0x2E	; 46
    2746:	09 f0       	breq	.+2      	; 0x274a <__vector_91+0xc6>
    2748:	51 c0       	rjmp	.+162    	; 0x27ec <__vector_91+0x168>
    274a:	57 c0       	rjmp	.+174    	; 0x27fa <__vector_91+0x176>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    274c:	91 91       	ld	r25, Z+
    274e:	9e 32       	cpi	r25, 0x2E	; 46
    2750:	29 f4       	brne	.+10     	; 0x275c <__vector_91+0xd8>
    2752:	01 c0       	rjmp	.+2      	; 0x2756 <__vector_91+0xd2>
    2754:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2756:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <idx>
						break;
    275a:	03 c0       	rjmp	.+6      	; 0x2762 <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	8f 30       	cpi	r24, 0x0F	; 15
    2760:	a9 f7       	brne	.-22     	; 0x274c <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2762:	20 91 d8 20 	lds	r18, 0x20D8	; 0x8020d8 <idx>
    2766:	e2 2f       	mov	r30, r18
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	e6 50       	subi	r30, 0x06	; 6
    276c:	ff 4d       	sbci	r31, 0xDF	; 223
    276e:	80 e2       	ldi	r24, 0x20	; 32
    2770:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2772:	2f 5f       	subi	r18, 0xFF	; 255
    2774:	2f 30       	cpi	r18, 0x0F	; 15
    2776:	c8 f4       	brcc	.+50     	; 0x27aa <__vector_91+0x126>
					if(gps[i] == 32){
    2778:	82 2f       	mov	r24, r18
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	fc 01       	movw	r30, r24
    277e:	e6 50       	subi	r30, 0x06	; 6
    2780:	ff 4d       	sbci	r31, 0xDF	; 223
    2782:	30 81       	ld	r19, Z
    2784:	30 32       	cpi	r19, 0x20	; 32
    2786:	89 f0       	breq	.+34     	; 0x27aa <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	08 c0       	rjmp	.+16     	; 0x279c <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    278c:	82 2f       	mov	r24, r18
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	fc 01       	movw	r30, r24
    2792:	e6 50       	subi	r30, 0x06	; 6
    2794:	ff 4d       	sbci	r31, 0xDF	; 223
    2796:	30 81       	ld	r19, Z
    2798:	30 32       	cpi	r19, 0x20	; 32
    279a:	39 f0       	breq	.+14     	; 0x27aa <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    279c:	fc 01       	movw	r30, r24
    279e:	e6 50       	subi	r30, 0x06	; 6
    27a0:	ff 4d       	sbci	r31, 0xDF	; 223
    27a2:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    27a4:	2f 5f       	subi	r18, 0xFF	; 255
    27a6:	2f 30       	cpi	r18, 0x0F	; 15
    27a8:	89 f7       	brne	.-30     	; 0x278c <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    27aa:	ce 01       	movw	r24, r28
    27ac:	01 96       	adiw	r24, 0x01	; 1
    27ae:	9f 93       	push	r25
    27b0:	8f 93       	push	r24
    27b2:	86 e9       	ldi	r24, 0x96	; 150
    27b4:	90 e2       	ldi	r25, 0x20	; 32
    27b6:	9f 93       	push	r25
    27b8:	8f 93       	push	r24
    27ba:	8a ef       	ldi	r24, 0xFA	; 250
    27bc:	90 e2       	ldi	r25, 0x20	; 32
    27be:	9f 93       	push	r25
    27c0:	8f 93       	push	r24
    27c2:	f3 d6       	rcall	.+3558   	; 0x35aa <sscanf>
				gps_t = (double) val;
    27c4:	69 81       	ldd	r22, Y+1	; 0x01
    27c6:	7a 81       	ldd	r23, Y+2	; 0x02
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	5a d3       	rcall	.+1716   	; 0x2e82 <__floatsisf>
    27ce:	60 93 bc 20 	sts	0x20BC, r22	; 0x8020bc <gps_t>
    27d2:	70 93 bd 20 	sts	0x20BD, r23	; 0x8020bd <gps_t+0x1>
    27d6:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <gps_t+0x2>
    27da:	90 93 bf 20 	sts	0x20BF, r25	; 0x8020bf <gps_t+0x3>
				break;
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	bd c1       	rjmp	.+890    	; 0x2b66 <__vector_91+0x4e2>
    27ec:	eb ef       	ldi	r30, 0xFB	; 251
    27ee:	f0 e2       	ldi	r31, 0x20	; 32
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    27f0:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    27f2:	91 91       	ld	r25, Z+
    27f4:	9e 32       	cpi	r25, 0x2E	; 46
    27f6:	29 f4       	brne	.+10     	; 0x2802 <__vector_91+0x17e>
    27f8:	01 c0       	rjmp	.+2      	; 0x27fc <__vector_91+0x178>
    27fa:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    27fc:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <idx>
						break;
    2800:	03 c0       	rjmp	.+6      	; 0x2808 <__vector_91+0x184>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2802:	8f 5f       	subi	r24, 0xFF	; 255
    2804:	8f 30       	cpi	r24, 0x0F	; 15
    2806:	a9 f7       	brne	.-22     	; 0x27f2 <__vector_91+0x16e>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2808:	20 91 d8 20 	lds	r18, 0x20D8	; 0x8020d8 <idx>
    280c:	42 2f       	mov	r20, r18
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	fa 01       	movw	r30, r20
    2812:	e6 50       	subi	r30, 0x06	; 6
    2814:	ff 4d       	sbci	r31, 0xDF	; 223
    2816:	80 e2       	ldi	r24, 0x20	; 32
    2818:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    281a:	2f 5f       	subi	r18, 0xFF	; 255
    281c:	2f 30       	cpi	r18, 0x0F	; 15
    281e:	f8 f4       	brcc	.+62     	; 0x285e <__vector_91+0x1da>
					if(gps[i] == 32){
    2820:	82 2f       	mov	r24, r18
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	fc 01       	movw	r30, r24
    2826:	e6 50       	subi	r30, 0x06	; 6
    2828:	ff 4d       	sbci	r31, 0xDF	; 223
    282a:	30 81       	ld	r19, Z
    282c:	30 32       	cpi	r19, 0x20	; 32
    282e:	b9 f0       	breq	.+46     	; 0x285e <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2830:	60 e2       	ldi	r22, 0x20	; 32
    2832:	08 c0       	rjmp	.+16     	; 0x2844 <__vector_91+0x1c0>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2834:	82 2f       	mov	r24, r18
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	fc 01       	movw	r30, r24
    283a:	e6 50       	subi	r30, 0x06	; 6
    283c:	ff 4d       	sbci	r31, 0xDF	; 223
    283e:	30 81       	ld	r19, Z
    2840:	30 32       	cpi	r19, 0x20	; 32
    2842:	69 f0       	breq	.+26     	; 0x285e <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
    2844:	fc 01       	movw	r30, r24
    2846:	e4 1b       	sub	r30, r20
    2848:	f5 0b       	sbc	r31, r21
    284a:	e8 5f       	subi	r30, 0xF8	; 248
    284c:	fe 4d       	sbci	r31, 0xDE	; 222
    284e:	30 83       	st	Z, r19
					gps[i] = 32;
    2850:	fc 01       	movw	r30, r24
    2852:	e6 50       	subi	r30, 0x06	; 6
    2854:	ff 4d       	sbci	r31, 0xDF	; 223
    2856:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2858:	2f 5f       	subi	r18, 0xFF	; 255
    285a:	2f 30       	cpi	r18, 0x0F	; 15
    285c:	59 f7       	brne	.-42     	; 0x2834 <__vector_91+0x1b0>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    285e:	80 91 09 21 	lds	r24, 0x2109	; 0x802109 <dec>
    2862:	80 32       	cpi	r24, 0x20	; 32
    2864:	19 f4       	brne	.+6      	; 0x286c <__vector_91+0x1e8>
					dec[0] = '0';
    2866:	80 e3       	ldi	r24, 0x30	; 48
    2868:	80 93 09 21 	sts	0x2109, r24	; 0x802109 <dec>
				}
				sscanf(gps,"%ld",&val);
    286c:	ce 01       	movw	r24, r28
    286e:	01 96       	adiw	r24, 0x01	; 1
    2870:	9f 93       	push	r25
    2872:	8f 93       	push	r24
    2874:	86 e9       	ldi	r24, 0x96	; 150
    2876:	90 e2       	ldi	r25, 0x20	; 32
    2878:	9f 93       	push	r25
    287a:	8f 93       	push	r24
    287c:	8a ef       	ldi	r24, 0xFA	; 250
    287e:	90 e2       	ldi	r25, 0x20	; 32
    2880:	9f 93       	push	r25
    2882:	8f 93       	push	r24
    2884:	92 d6       	rcall	.+3364   	; 0x35aa <sscanf>
				sscanf(dec,"%d",&val2);
    2886:	ce 01       	movw	r24, r28
    2888:	05 96       	adiw	r24, 0x05	; 5
    288a:	9f 93       	push	r25
    288c:	8f 93       	push	r24
    288e:	8a e9       	ldi	r24, 0x9A	; 154
    2890:	90 e2       	ldi	r25, 0x20	; 32
    2892:	9f 93       	push	r25
    2894:	8f 93       	push	r24
    2896:	89 e0       	ldi	r24, 0x09	; 9
    2898:	91 e2       	ldi	r25, 0x21	; 33
    289a:	9f 93       	push	r25
    289c:	8f 93       	push	r24
    289e:	85 d6       	rcall	.+3338   	; 0x35aa <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    28a0:	89 80       	ldd	r8, Y+1	; 0x01
    28a2:	9a 80       	ldd	r9, Y+2	; 0x02
    28a4:	ab 80       	ldd	r10, Y+3	; 0x03
    28a6:	bc 80       	ldd	r11, Y+4	; 0x04
    28a8:	6d 81       	ldd	r22, Y+5	; 0x05
    28aa:	7e 81       	ldd	r23, Y+6	; 0x06
    28ac:	07 2e       	mov	r0, r23
    28ae:	00 0c       	add	r0, r0
    28b0:	88 0b       	sbc	r24, r24
    28b2:	99 0b       	sbc	r25, r25
    28b4:	e6 d2       	rcall	.+1484   	; 0x2e82 <__floatsisf>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e4       	ldi	r19, 0x40	; 64
    28ba:	4c e1       	ldi	r20, 0x1C	; 28
    28bc:	56 e4       	ldi	r21, 0x46	; 70
    28be:	46 d2       	rcall	.+1164   	; 0x2d4c <__divsf3>
    28c0:	6b 01       	movw	r12, r22
    28c2:	7c 01       	movw	r14, r24
    28c4:	c5 01       	movw	r24, r10
    28c6:	b4 01       	movw	r22, r8
    28c8:	24 e6       	ldi	r18, 0x64	; 100
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	ac d5       	rcall	.+2904   	; 0x342a <__divmodsi4>
    28d2:	49 01       	movw	r8, r18
    28d4:	5a 01       	movw	r10, r20
    28d6:	d5 d2       	rcall	.+1450   	; 0x2e82 <__floatsisf>
    28d8:	9b 01       	movw	r18, r22
    28da:	ac 01       	movw	r20, r24
    28dc:	c7 01       	movw	r24, r14
    28de:	b6 01       	movw	r22, r12
    28e0:	cd d1       	rcall	.+922    	; 0x2c7c <__addsf3>
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e7       	ldi	r20, 0x70	; 112
    28e8:	52 e4       	ldi	r21, 0x42	; 66
    28ea:	30 d2       	rcall	.+1120   	; 0x2d4c <__divsf3>
    28ec:	6b 01       	movw	r12, r22
    28ee:	7c 01       	movw	r14, r24
    28f0:	c5 01       	movw	r24, r10
    28f2:	b4 01       	movw	r22, r8
    28f4:	c6 d2       	rcall	.+1420   	; 0x2e82 <__floatsisf>
    28f6:	9b 01       	movw	r18, r22
    28f8:	ac 01       	movw	r20, r24
    28fa:	c7 01       	movw	r24, r14
    28fc:	b6 01       	movw	r22, r12
    28fe:	be d1       	rcall	.+892    	; 0x2c7c <__addsf3>
    2900:	60 93 b8 20 	sts	0x20B8, r22	; 0x8020b8 <gps_lat>
    2904:	70 93 b9 20 	sts	0x20B9, r23	; 0x8020b9 <gps_lat+0x1>
    2908:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <gps_lat+0x2>
    290c:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <gps_lat+0x3>
				break;
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	28 c1       	rjmp	.+592    	; 0x2b66 <__vector_91+0x4e2>
    2916:	eb ef       	ldi	r30, 0xFB	; 251
    2918:	f0 e2       	ldi	r31, 0x20	; 32
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    291a:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    291c:	91 91       	ld	r25, Z+
    291e:	9e 32       	cpi	r25, 0x2E	; 46
    2920:	29 f4       	brne	.+10     	; 0x292c <__vector_91+0x2a8>
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <__vector_91+0x2a2>
    2924:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2926:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <idx>
						break;
    292a:	03 c0       	rjmp	.+6      	; 0x2932 <__vector_91+0x2ae>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    292c:	8f 5f       	subi	r24, 0xFF	; 255
    292e:	8f 30       	cpi	r24, 0x0F	; 15
    2930:	a9 f7       	brne	.-22     	; 0x291c <__vector_91+0x298>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2932:	20 91 d8 20 	lds	r18, 0x20D8	; 0x8020d8 <idx>
    2936:	42 2f       	mov	r20, r18
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	fa 01       	movw	r30, r20
    293c:	e6 50       	subi	r30, 0x06	; 6
    293e:	ff 4d       	sbci	r31, 0xDF	; 223
    2940:	80 e2       	ldi	r24, 0x20	; 32
    2942:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2944:	2f 5f       	subi	r18, 0xFF	; 255
    2946:	2f 30       	cpi	r18, 0x0F	; 15
    2948:	f8 f4       	brcc	.+62     	; 0x2988 <__vector_91+0x304>
					if(gps[i] == 32){
    294a:	82 2f       	mov	r24, r18
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	fc 01       	movw	r30, r24
    2950:	e6 50       	subi	r30, 0x06	; 6
    2952:	ff 4d       	sbci	r31, 0xDF	; 223
    2954:	30 81       	ld	r19, Z
    2956:	30 32       	cpi	r19, 0x20	; 32
    2958:	b9 f0       	breq	.+46     	; 0x2988 <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    295a:	60 e2       	ldi	r22, 0x20	; 32
    295c:	08 c0       	rjmp	.+16     	; 0x296e <__vector_91+0x2ea>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    295e:	82 2f       	mov	r24, r18
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	fc 01       	movw	r30, r24
    2964:	e6 50       	subi	r30, 0x06	; 6
    2966:	ff 4d       	sbci	r31, 0xDF	; 223
    2968:	30 81       	ld	r19, Z
    296a:	30 32       	cpi	r19, 0x20	; 32
    296c:	69 f0       	breq	.+26     	; 0x2988 <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
    296e:	fc 01       	movw	r30, r24
    2970:	e4 1b       	sub	r30, r20
    2972:	f5 0b       	sbc	r31, r21
    2974:	e8 5f       	subi	r30, 0xF8	; 248
    2976:	fe 4d       	sbci	r31, 0xDE	; 222
    2978:	30 83       	st	Z, r19
					gps[i] = 32;
    297a:	fc 01       	movw	r30, r24
    297c:	e6 50       	subi	r30, 0x06	; 6
    297e:	ff 4d       	sbci	r31, 0xDF	; 223
    2980:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2982:	2f 5f       	subi	r18, 0xFF	; 255
    2984:	2f 30       	cpi	r18, 0x0F	; 15
    2986:	59 f7       	brne	.-42     	; 0x295e <__vector_91+0x2da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2988:	80 91 09 21 	lds	r24, 0x2109	; 0x802109 <dec>
    298c:	80 32       	cpi	r24, 0x20	; 32
    298e:	19 f4       	brne	.+6      	; 0x2996 <__vector_91+0x312>
					dec[0] = '0';
    2990:	80 e3       	ldi	r24, 0x30	; 48
    2992:	80 93 09 21 	sts	0x2109, r24	; 0x802109 <dec>
				}
				sscanf(gps,"%ld",&val);
    2996:	ce 01       	movw	r24, r28
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	9f 93       	push	r25
    299c:	8f 93       	push	r24
    299e:	86 e9       	ldi	r24, 0x96	; 150
    29a0:	90 e2       	ldi	r25, 0x20	; 32
    29a2:	9f 93       	push	r25
    29a4:	8f 93       	push	r24
    29a6:	8a ef       	ldi	r24, 0xFA	; 250
    29a8:	90 e2       	ldi	r25, 0x20	; 32
    29aa:	9f 93       	push	r25
    29ac:	8f 93       	push	r24
    29ae:	fd d5       	rcall	.+3066   	; 0x35aa <sscanf>
				sscanf(dec,"%d",&val2);
    29b0:	ce 01       	movw	r24, r28
    29b2:	05 96       	adiw	r24, 0x05	; 5
    29b4:	9f 93       	push	r25
    29b6:	8f 93       	push	r24
    29b8:	8a e9       	ldi	r24, 0x9A	; 154
    29ba:	90 e2       	ldi	r25, 0x20	; 32
    29bc:	9f 93       	push	r25
    29be:	8f 93       	push	r24
    29c0:	89 e0       	ldi	r24, 0x09	; 9
    29c2:	91 e2       	ldi	r25, 0x21	; 33
    29c4:	9f 93       	push	r25
    29c6:	8f 93       	push	r24
    29c8:	f0 d5       	rcall	.+3040   	; 0x35aa <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    29ca:	89 80       	ldd	r8, Y+1	; 0x01
    29cc:	9a 80       	ldd	r9, Y+2	; 0x02
    29ce:	ab 80       	ldd	r10, Y+3	; 0x03
    29d0:	bc 80       	ldd	r11, Y+4	; 0x04
    29d2:	6d 81       	ldd	r22, Y+5	; 0x05
    29d4:	7e 81       	ldd	r23, Y+6	; 0x06
    29d6:	07 2e       	mov	r0, r23
    29d8:	00 0c       	add	r0, r0
    29da:	88 0b       	sbc	r24, r24
    29dc:	99 0b       	sbc	r25, r25
    29de:	51 d2       	rcall	.+1186   	; 0x2e82 <__floatsisf>
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e4       	ldi	r19, 0x40	; 64
    29e4:	4c e1       	ldi	r20, 0x1C	; 28
    29e6:	56 e4       	ldi	r21, 0x46	; 70
    29e8:	b1 d1       	rcall	.+866    	; 0x2d4c <__divsf3>
    29ea:	6b 01       	movw	r12, r22
    29ec:	7c 01       	movw	r14, r24
    29ee:	c5 01       	movw	r24, r10
    29f0:	b4 01       	movw	r22, r8
    29f2:	24 e6       	ldi	r18, 0x64	; 100
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	17 d5       	rcall	.+2606   	; 0x342a <__divmodsi4>
    29fc:	49 01       	movw	r8, r18
    29fe:	5a 01       	movw	r10, r20
    2a00:	40 d2       	rcall	.+1152   	; 0x2e82 <__floatsisf>
    2a02:	9b 01       	movw	r18, r22
    2a04:	ac 01       	movw	r20, r24
    2a06:	c7 01       	movw	r24, r14
    2a08:	b6 01       	movw	r22, r12
    2a0a:	38 d1       	rcall	.+624    	; 0x2c7c <__addsf3>
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e7       	ldi	r20, 0x70	; 112
    2a12:	52 e4       	ldi	r21, 0x42	; 66
    2a14:	9b d1       	rcall	.+822    	; 0x2d4c <__divsf3>
    2a16:	6b 01       	movw	r12, r22
    2a18:	7c 01       	movw	r14, r24
    2a1a:	c5 01       	movw	r24, r10
    2a1c:	b4 01       	movw	r22, r8
    2a1e:	31 d2       	rcall	.+1122   	; 0x2e82 <__floatsisf>
    2a20:	9b 01       	movw	r18, r22
    2a22:	ac 01       	movw	r20, r24
    2a24:	c7 01       	movw	r24, r14
    2a26:	b6 01       	movw	r22, r12
    2a28:	29 d1       	rcall	.+594    	; 0x2c7c <__addsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	b0 58       	subi	r27, 0x80	; 128
    2a30:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <gps_long>
    2a34:	90 93 b5 20 	sts	0x20B5, r25	; 0x8020b5 <gps_long+0x1>
    2a38:	a0 93 b6 20 	sts	0x20B6, r26	; 0x8020b6 <gps_long+0x2>
    2a3c:	b0 93 b7 20 	sts	0x20B7, r27	; 0x8020b7 <gps_long+0x3>
    2a40:	cd bf       	out	0x3d, r28	; 61
				break;
    2a42:	de bf       	out	0x3e, r29	; 62
    2a44:	90 c0       	rjmp	.+288    	; 0x2b66 <__vector_91+0x4e2>
    2a46:	8e ea       	ldi	r24, 0xAE	; 174
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    2a48:	90 e2       	ldi	r25, 0x20	; 32
    2a4a:	9f 93       	push	r25
    2a4c:	8f 93       	push	r24
    2a4e:	8a e9       	ldi	r24, 0x9A	; 154
    2a50:	90 e2       	ldi	r25, 0x20	; 32
    2a52:	9f 93       	push	r25
    2a54:	8f 93       	push	r24
    2a56:	8a ef       	ldi	r24, 0xFA	; 250
    2a58:	90 e2       	ldi	r25, 0x20	; 32
    2a5a:	9f 93       	push	r25
    2a5c:	8f 93       	push	r24
    2a5e:	a5 d5       	rcall	.+2890   	; 0x35aa <sscanf>
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
				break;
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	7c c0       	rjmp	.+248    	; 0x2b66 <__vector_91+0x4e2>
    2a6e:	eb ef       	ldi	r30, 0xFB	; 251
    2a70:	f0 e2       	ldi	r31, 0x20	; 32
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2a76:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    2a78:	29 f4       	brne	.+10     	; 0x2a84 <__vector_91+0x400>
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <__vector_91+0x3fa>
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <idx>
						idx = i;
    2a82:	03 c0       	rjmp	.+6      	; 0x2a8a <__vector_91+0x406>
    2a84:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    2a86:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2a88:	a9 f7       	brne	.-22     	; 0x2a74 <__vector_91+0x3f0>
    2a8a:	20 91 d8 20 	lds	r18, 0x20D8	; 0x8020d8 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2a8e:	42 2f       	mov	r20, r18
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	fa 01       	movw	r30, r20
    2a94:	e6 50       	subi	r30, 0x06	; 6
    2a96:	ff 4d       	sbci	r31, 0xDF	; 223
    2a98:	80 e2       	ldi	r24, 0x20	; 32
    2a9a:	80 83       	st	Z, r24
    2a9c:	2f 5f       	subi	r18, 0xFF	; 255
    2a9e:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    2aa0:	f8 f4       	brcc	.+62     	; 0x2ae0 <__vector_91+0x45c>
    2aa2:	82 2f       	mov	r24, r18
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e6 50       	subi	r30, 0x06	; 6
    2aaa:	ff 4d       	sbci	r31, 0xDF	; 223
    2aac:	30 81       	ld	r19, Z
    2aae:	30 32       	cpi	r19, 0x20	; 32
    2ab0:	b9 f0       	breq	.+46     	; 0x2ae0 <__vector_91+0x45c>
    2ab2:	60 e2       	ldi	r22, 0x20	; 32
    2ab4:	08 c0       	rjmp	.+16     	; 0x2ac6 <__vector_91+0x442>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2ab6:	82 2f       	mov	r24, r18
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2aba:	fc 01       	movw	r30, r24
    2abc:	e6 50       	subi	r30, 0x06	; 6
    2abe:	ff 4d       	sbci	r31, 0xDF	; 223
    2ac0:	30 81       	ld	r19, Z
    2ac2:	30 32       	cpi	r19, 0x20	; 32
    2ac4:	69 f0       	breq	.+26     	; 0x2ae0 <__vector_91+0x45c>
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    2aca:	f5 0b       	sbc	r31, r21
    2acc:	e8 5f       	subi	r30, 0xF8	; 248
    2ace:	fe 4d       	sbci	r31, 0xDE	; 222
    2ad0:	30 83       	st	Z, r19
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	e6 50       	subi	r30, 0x06	; 6
					gps[i] = 32;
    2ad6:	ff 4d       	sbci	r31, 0xDF	; 223
    2ad8:	60 83       	st	Z, r22
    2ada:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2adc:	2f 30       	cpi	r18, 0x0F	; 15
    2ade:	59 f7       	brne	.-42     	; 0x2ab6 <__vector_91+0x432>
    2ae0:	80 91 09 21 	lds	r24, 0x2109	; 0x802109 <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2ae4:	80 32       	cpi	r24, 0x20	; 32
    2ae6:	19 f4       	brne	.+6      	; 0x2aee <__vector_91+0x46a>
    2ae8:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    2aea:	80 93 09 21 	sts	0x2109, r24	; 0x802109 <dec>
    2aee:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    2af0:	01 96       	adiw	r24, 0x01	; 1
    2af2:	9f 93       	push	r25
    2af4:	8f 93       	push	r24
    2af6:	86 e9       	ldi	r24, 0x96	; 150
    2af8:	90 e2       	ldi	r25, 0x20	; 32
    2afa:	9f 93       	push	r25
    2afc:	8f 93       	push	r24
    2afe:	8a ef       	ldi	r24, 0xFA	; 250
    2b00:	90 e2       	ldi	r25, 0x20	; 32
    2b02:	9f 93       	push	r25
    2b04:	8f 93       	push	r24
    2b06:	51 d5       	rcall	.+2722   	; 0x35aa <sscanf>
				sscanf(dec,"%d",&val2);
    2b08:	ce 01       	movw	r24, r28
    2b0a:	05 96       	adiw	r24, 0x05	; 5
    2b0c:	9f 93       	push	r25
    2b0e:	8f 93       	push	r24
    2b10:	8a e9       	ldi	r24, 0x9A	; 154
    2b12:	90 e2       	ldi	r25, 0x20	; 32
    2b14:	9f 93       	push	r25
    2b16:	8f 93       	push	r24
    2b18:	89 e0       	ldi	r24, 0x09	; 9
    2b1a:	91 e2       	ldi	r25, 0x21	; 33
    2b1c:	9f 93       	push	r25
    2b1e:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    2b20:	44 d5       	rcall	.+2696   	; 0x35aa <sscanf>
    2b22:	69 81       	ldd	r22, Y+1	; 0x01
    2b24:	7a 81       	ldd	r23, Y+2	; 0x02
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	ab d1       	rcall	.+854    	; 0x2e82 <__floatsisf>
    2b2c:	6b 01       	movw	r12, r22
    2b2e:	7c 01       	movw	r14, r24
    2b30:	6d 81       	ldd	r22, Y+5	; 0x05
    2b32:	7e 81       	ldd	r23, Y+6	; 0x06
    2b34:	07 2e       	mov	r0, r23
    2b36:	00 0c       	add	r0, r0
    2b38:	88 0b       	sbc	r24, r24
    2b3a:	99 0b       	sbc	r25, r25
    2b3c:	a2 d1       	rcall	.+836    	; 0x2e82 <__floatsisf>
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e2       	ldi	r20, 0x20	; 32
    2b44:	51 e4       	ldi	r21, 0x41	; 65
    2b46:	02 d1       	rcall	.+516    	; 0x2d4c <__divsf3>
    2b48:	9b 01       	movw	r18, r22
    2b4a:	ac 01       	movw	r20, r24
    2b4c:	c7 01       	movw	r24, r14
    2b4e:	b6 01       	movw	r22, r12
    2b50:	95 d0       	rcall	.+298    	; 0x2c7c <__addsf3>
    2b52:	60 93 b0 20 	sts	0x20B0, r22	; 0x8020b0 <gps_alt>
    2b56:	70 93 b1 20 	sts	0x20B1, r23	; 0x8020b1 <gps_alt+0x1>
    2b5a:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <gps_alt+0x2>
    2b5e:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <gps_alt+0x3>
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <writing>
				break;
    2b6a:	88 23       	and	r24, r24
		}
	
		if(writing){
    2b6c:	d1 f0       	breq	.+52     	; 0x2ba2 <__vector_91+0x51e>
    2b6e:	10 92 d8 20 	sts	0x20D8, r1	; 0x8020d8 <idx>
    2b72:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <commas>
			idx = 0;
    2b76:	8f 5f       	subi	r24, 0xFF	; 255
			commas++;
    2b78:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <commas>
    2b7c:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <word_pos>
    2b80:	ea ef       	ldi	r30, 0xFA	; 250
			word_pos = 0;
    2b82:	f0 e2       	ldi	r31, 0x20	; 32
    2b84:	29 e0       	ldi	r18, 0x09	; 9
    2b86:	31 e2       	ldi	r19, 0x21	; 33
    2b88:	80 e2       	ldi	r24, 0x20	; 32
    2b8a:	81 93       	st	Z+, r24
    2b8c:	2e 17       	cp	r18, r30
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2b8e:	3f 07       	cpc	r19, r31
    2b90:	e1 f7       	brne	.-8      	; 0x2b8a <__vector_91+0x506>
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2b92:	e9 e0       	ldi	r30, 0x09	; 9
    2b94:	f1 e2       	ldi	r31, 0x21	; 33
    2b96:	80 e2       	ldi	r24, 0x20	; 32
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2b98:	80 83       	st	Z, r24
    2b9a:	81 83       	std	Z+1, r24	; 0x01
    2b9c:	82 83       	std	Z+2, r24	; 0x02
    2b9e:	83 83       	std	Z+3, r24	; 0x03
    2ba0:	84 83       	std	Z+4, r24	; 0x04
    2ba2:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <writing>
    2ba6:	88 23       	and	r24, r24
			}
		}
	}
		
	if(writing){
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <__vector_91+0x528>
    2baa:	40 c0       	rjmp	.+128    	; 0x2c2c <__vector_91+0x5a8>
    2bac:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <pos>
    2bb0:	93 30       	cpi	r25, 0x03	; 3
		switch(pos){
    2bb2:	19 f0       	breq	.+6      	; 0x2bba <__vector_91+0x536>
    2bb4:	94 30       	cpi	r25, 0x04	; 4
    2bb6:	31 f0       	breq	.+12     	; 0x2bc4 <__vector_91+0x540>
    2bb8:	09 c0       	rjmp	.+18     	; 0x2bcc <__vector_91+0x548>
    2bba:	17 34       	cpi	r17, 0x47	; 71
    2bbc:	39 f0       	breq	.+14     	; 0x2bcc <__vector_91+0x548>
    2bbe:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <writing>
			case 3:
				if(c != 'G'){
    2bc2:	04 c0       	rjmp	.+8      	; 0x2bcc <__vector_91+0x548>
					writing = 0;
    2bc4:	17 34       	cpi	r17, 0x47	; 71
    2bc6:	11 f0       	breq	.+4      	; 0x2bcc <__vector_91+0x548>
    2bc8:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <writing>
				}
				break;
				
			case 4:
				if(c != 'G'){
    2bcc:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <word_pos>
					writing = 0;
    2bd0:	e8 2f       	mov	r30, r24
				}
				break;
		}
		gps[word_pos] = c;
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	e6 50       	subi	r30, 0x06	; 6
    2bd6:	ff 4d       	sbci	r31, 0xDF	; 223
    2bd8:	10 83       	st	Z, r17
    2bda:	8f 5f       	subi	r24, 0xFF	; 255
    2bdc:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <word_pos>
		word_pos++;
    2be0:	9f 5f       	subi	r25, 0xFF	; 255
    2be2:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <pos>
		pos++;
    2be6:	22 c0       	rjmp	.+68     	; 0x2c2c <__vector_91+0x5a8>
    2be8:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <gps>
	}
}
    2bec:	8e 32       	cpi	r24, 0x2E	; 46
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <__vector_91+0x56e>
    2bf0:	b1 cd       	rjmp	.-1182   	; 0x2754 <__vector_91+0xd0>
    2bf2:	eb ef       	ldi	r30, 0xFB	; 251
    2bf4:	f0 e2       	ldi	r31, 0x20	; 32
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	a9 cd       	rjmp	.-1198   	; 0x274c <__vector_91+0xc8>
    2bfa:	19 82       	std	Y+1, r1	; 0x01
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2bfc:	1a 82       	std	Y+2, r1	; 0x02
    2bfe:	1b 82       	std	Y+3, r1	; 0x03
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    2c00:	1c 82       	std	Y+4, r1	; 0x04
    2c02:	1d 82       	std	Y+5, r1	; 0x05
    2c04:	1e 82       	std	Y+6, r1	; 0x06
    2c06:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <commas>
		int16_t val2 = 0;
    2c0a:	84 30       	cpi	r24, 0x04	; 4
		switch(commas){
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <__vector_91+0x58c>
    2c0e:	92 cd       	rjmp	.-1244   	; 0x2734 <__vector_91+0xb0>
    2c10:	30 f4       	brcc	.+12     	; 0x2c1e <__vector_91+0x59a>
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	49 f3       	breq	.-46     	; 0x2be8 <__vector_91+0x564>
    2c16:	82 30       	cpi	r24, 0x02	; 2
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <__vector_91+0x598>
    2c1a:	92 cd       	rjmp	.-1244   	; 0x2740 <__vector_91+0xbc>
    2c1c:	a4 cf       	rjmp	.-184    	; 0x2b66 <__vector_91+0x4e2>
    2c1e:	87 30       	cpi	r24, 0x07	; 7
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <__vector_91+0x5a0>
    2c22:	11 cf       	rjmp	.-478    	; 0x2a46 <__vector_91+0x3c2>
    2c24:	89 30       	cpi	r24, 0x09	; 9
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <__vector_91+0x5a6>
    2c28:	7f cd       	rjmp	.-1282   	; 0x2728 <__vector_91+0xa4>
    2c2a:	9d cf       	rjmp	.-198    	; 0x2b66 <__vector_91+0x4e2>
    2c2c:	26 96       	adiw	r28, 0x06	; 6
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	de bf       	out	0x3e, r29	; 62
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	ff 91       	pop	r31
    2c38:	ef 91       	pop	r30
    2c3a:	bf 91       	pop	r27
    2c3c:	af 91       	pop	r26
    2c3e:	9f 91       	pop	r25
    2c40:	8f 91       	pop	r24
    2c42:	7f 91       	pop	r23
    2c44:	6f 91       	pop	r22
    2c46:	5f 91       	pop	r21
    2c48:	4f 91       	pop	r20
    2c4a:	3f 91       	pop	r19
    2c4c:	2f 91       	pop	r18
    2c4e:	1f 91       	pop	r17
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	df 90       	pop	r13
    2c56:	cf 90       	pop	r12
    2c58:	bf 90       	pop	r11
    2c5a:	af 90       	pop	r10
    2c5c:	9f 90       	pop	r9
    2c5e:	8f 90       	pop	r8
    2c60:	0f 90       	pop	r0
    2c62:	0b be       	out	0x3b, r0	; 59
    2c64:	0f 90       	pop	r0
    2c66:	0a be       	out	0x3a, r0	; 58
    2c68:	0f 90       	pop	r0
    2c6a:	09 be       	out	0x39, r0	; 57
    2c6c:	0f 90       	pop	r0
    2c6e:	08 be       	out	0x38, r0	; 56
    2c70:	0f 90       	pop	r0
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	0f 90       	pop	r0
    2c76:	1f 90       	pop	r1
    2c78:	18 95       	reti

00002c7a <__subsf3>:
    2c7a:	50 58       	subi	r21, 0x80	; 128

00002c7c <__addsf3>:
    2c7c:	bb 27       	eor	r27, r27
    2c7e:	aa 27       	eor	r26, r26
    2c80:	0e d0       	rcall	.+28     	; 0x2c9e <__addsf3x>
    2c82:	9a c1       	rjmp	.+820    	; 0x2fb8 <__fp_round>
    2c84:	8b d1       	rcall	.+790    	; 0x2f9c <__fp_pscA>
    2c86:	30 f0       	brcs	.+12     	; 0x2c94 <__addsf3+0x18>
    2c88:	90 d1       	rcall	.+800    	; 0x2faa <__fp_pscB>
    2c8a:	20 f0       	brcs	.+8      	; 0x2c94 <__addsf3+0x18>
    2c8c:	31 f4       	brne	.+12     	; 0x2c9a <__addsf3+0x1e>
    2c8e:	9f 3f       	cpi	r25, 0xFF	; 255
    2c90:	11 f4       	brne	.+4      	; 0x2c96 <__addsf3+0x1a>
    2c92:	1e f4       	brtc	.+6      	; 0x2c9a <__addsf3+0x1e>
    2c94:	5b c1       	rjmp	.+694    	; 0x2f4c <__fp_nan>
    2c96:	0e f4       	brtc	.+2      	; 0x2c9a <__addsf3+0x1e>
    2c98:	e0 95       	com	r30
    2c9a:	e7 fb       	bst	r30, 7
    2c9c:	51 c1       	rjmp	.+674    	; 0x2f40 <__fp_inf>

00002c9e <__addsf3x>:
    2c9e:	e9 2f       	mov	r30, r25
    2ca0:	9c d1       	rcall	.+824    	; 0x2fda <__fp_split3>
    2ca2:	80 f3       	brcs	.-32     	; 0x2c84 <__addsf3+0x8>
    2ca4:	ba 17       	cp	r27, r26
    2ca6:	62 07       	cpc	r22, r18
    2ca8:	73 07       	cpc	r23, r19
    2caa:	84 07       	cpc	r24, r20
    2cac:	95 07       	cpc	r25, r21
    2cae:	18 f0       	brcs	.+6      	; 0x2cb6 <__addsf3x+0x18>
    2cb0:	71 f4       	brne	.+28     	; 0x2cce <__addsf3x+0x30>
    2cb2:	9e f5       	brtc	.+102    	; 0x2d1a <__addsf3x+0x7c>
    2cb4:	b4 c1       	rjmp	.+872    	; 0x301e <__fp_zero>
    2cb6:	0e f4       	brtc	.+2      	; 0x2cba <__addsf3x+0x1c>
    2cb8:	e0 95       	com	r30
    2cba:	0b 2e       	mov	r0, r27
    2cbc:	ba 2f       	mov	r27, r26
    2cbe:	a0 2d       	mov	r26, r0
    2cc0:	0b 01       	movw	r0, r22
    2cc2:	b9 01       	movw	r22, r18
    2cc4:	90 01       	movw	r18, r0
    2cc6:	0c 01       	movw	r0, r24
    2cc8:	ca 01       	movw	r24, r20
    2cca:	a0 01       	movw	r20, r0
    2ccc:	11 24       	eor	r1, r1
    2cce:	ff 27       	eor	r31, r31
    2cd0:	59 1b       	sub	r21, r25
    2cd2:	99 f0       	breq	.+38     	; 0x2cfa <__addsf3x+0x5c>
    2cd4:	59 3f       	cpi	r21, 0xF9	; 249
    2cd6:	50 f4       	brcc	.+20     	; 0x2cec <__addsf3x+0x4e>
    2cd8:	50 3e       	cpi	r21, 0xE0	; 224
    2cda:	68 f1       	brcs	.+90     	; 0x2d36 <__addsf3x+0x98>
    2cdc:	1a 16       	cp	r1, r26
    2cde:	f0 40       	sbci	r31, 0x00	; 0
    2ce0:	a2 2f       	mov	r26, r18
    2ce2:	23 2f       	mov	r18, r19
    2ce4:	34 2f       	mov	r19, r20
    2ce6:	44 27       	eor	r20, r20
    2ce8:	58 5f       	subi	r21, 0xF8	; 248
    2cea:	f3 cf       	rjmp	.-26     	; 0x2cd2 <__addsf3x+0x34>
    2cec:	46 95       	lsr	r20
    2cee:	37 95       	ror	r19
    2cf0:	27 95       	ror	r18
    2cf2:	a7 95       	ror	r26
    2cf4:	f0 40       	sbci	r31, 0x00	; 0
    2cf6:	53 95       	inc	r21
    2cf8:	c9 f7       	brne	.-14     	; 0x2cec <__addsf3x+0x4e>
    2cfa:	7e f4       	brtc	.+30     	; 0x2d1a <__addsf3x+0x7c>
    2cfc:	1f 16       	cp	r1, r31
    2cfe:	ba 0b       	sbc	r27, r26
    2d00:	62 0b       	sbc	r22, r18
    2d02:	73 0b       	sbc	r23, r19
    2d04:	84 0b       	sbc	r24, r20
    2d06:	ba f0       	brmi	.+46     	; 0x2d36 <__addsf3x+0x98>
    2d08:	91 50       	subi	r25, 0x01	; 1
    2d0a:	a1 f0       	breq	.+40     	; 0x2d34 <__addsf3x+0x96>
    2d0c:	ff 0f       	add	r31, r31
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	66 1f       	adc	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	88 1f       	adc	r24, r24
    2d16:	c2 f7       	brpl	.-16     	; 0x2d08 <__addsf3x+0x6a>
    2d18:	0e c0       	rjmp	.+28     	; 0x2d36 <__addsf3x+0x98>
    2d1a:	ba 0f       	add	r27, r26
    2d1c:	62 1f       	adc	r22, r18
    2d1e:	73 1f       	adc	r23, r19
    2d20:	84 1f       	adc	r24, r20
    2d22:	48 f4       	brcc	.+18     	; 0x2d36 <__addsf3x+0x98>
    2d24:	87 95       	ror	r24
    2d26:	77 95       	ror	r23
    2d28:	67 95       	ror	r22
    2d2a:	b7 95       	ror	r27
    2d2c:	f7 95       	ror	r31
    2d2e:	9e 3f       	cpi	r25, 0xFE	; 254
    2d30:	08 f0       	brcs	.+2      	; 0x2d34 <__addsf3x+0x96>
    2d32:	b3 cf       	rjmp	.-154    	; 0x2c9a <__addsf3+0x1e>
    2d34:	93 95       	inc	r25
    2d36:	88 0f       	add	r24, r24
    2d38:	08 f0       	brcs	.+2      	; 0x2d3c <__addsf3x+0x9e>
    2d3a:	99 27       	eor	r25, r25
    2d3c:	ee 0f       	add	r30, r30
    2d3e:	97 95       	ror	r25
    2d40:	87 95       	ror	r24
    2d42:	08 95       	ret

00002d44 <__cmpsf2>:
    2d44:	d9 d0       	rcall	.+434    	; 0x2ef8 <__fp_cmp>
    2d46:	08 f4       	brcc	.+2      	; 0x2d4a <__cmpsf2+0x6>
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	08 95       	ret

00002d4c <__divsf3>:
    2d4c:	0c d0       	rcall	.+24     	; 0x2d66 <__divsf3x>
    2d4e:	34 c1       	rjmp	.+616    	; 0x2fb8 <__fp_round>
    2d50:	2c d1       	rcall	.+600    	; 0x2faa <__fp_pscB>
    2d52:	40 f0       	brcs	.+16     	; 0x2d64 <__divsf3+0x18>
    2d54:	23 d1       	rcall	.+582    	; 0x2f9c <__fp_pscA>
    2d56:	30 f0       	brcs	.+12     	; 0x2d64 <__divsf3+0x18>
    2d58:	21 f4       	brne	.+8      	; 0x2d62 <__divsf3+0x16>
    2d5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2d5c:	19 f0       	breq	.+6      	; 0x2d64 <__divsf3+0x18>
    2d5e:	f0 c0       	rjmp	.+480    	; 0x2f40 <__fp_inf>
    2d60:	51 11       	cpse	r21, r1
    2d62:	5e c1       	rjmp	.+700    	; 0x3020 <__fp_szero>
    2d64:	f3 c0       	rjmp	.+486    	; 0x2f4c <__fp_nan>

00002d66 <__divsf3x>:
    2d66:	39 d1       	rcall	.+626    	; 0x2fda <__fp_split3>
    2d68:	98 f3       	brcs	.-26     	; 0x2d50 <__divsf3+0x4>

00002d6a <__divsf3_pse>:
    2d6a:	99 23       	and	r25, r25
    2d6c:	c9 f3       	breq	.-14     	; 0x2d60 <__divsf3+0x14>
    2d6e:	55 23       	and	r21, r21
    2d70:	b1 f3       	breq	.-20     	; 0x2d5e <__divsf3+0x12>
    2d72:	95 1b       	sub	r25, r21
    2d74:	55 0b       	sbc	r21, r21
    2d76:	bb 27       	eor	r27, r27
    2d78:	aa 27       	eor	r26, r26
    2d7a:	62 17       	cp	r22, r18
    2d7c:	73 07       	cpc	r23, r19
    2d7e:	84 07       	cpc	r24, r20
    2d80:	38 f0       	brcs	.+14     	; 0x2d90 <__divsf3_pse+0x26>
    2d82:	9f 5f       	subi	r25, 0xFF	; 255
    2d84:	5f 4f       	sbci	r21, 0xFF	; 255
    2d86:	22 0f       	add	r18, r18
    2d88:	33 1f       	adc	r19, r19
    2d8a:	44 1f       	adc	r20, r20
    2d8c:	aa 1f       	adc	r26, r26
    2d8e:	a9 f3       	breq	.-22     	; 0x2d7a <__divsf3_pse+0x10>
    2d90:	33 d0       	rcall	.+102    	; 0x2df8 <__divsf3_pse+0x8e>
    2d92:	0e 2e       	mov	r0, r30
    2d94:	3a f0       	brmi	.+14     	; 0x2da4 <__divsf3_pse+0x3a>
    2d96:	e0 e8       	ldi	r30, 0x80	; 128
    2d98:	30 d0       	rcall	.+96     	; 0x2dfa <__divsf3_pse+0x90>
    2d9a:	91 50       	subi	r25, 0x01	; 1
    2d9c:	50 40       	sbci	r21, 0x00	; 0
    2d9e:	e6 95       	lsr	r30
    2da0:	00 1c       	adc	r0, r0
    2da2:	ca f7       	brpl	.-14     	; 0x2d96 <__divsf3_pse+0x2c>
    2da4:	29 d0       	rcall	.+82     	; 0x2df8 <__divsf3_pse+0x8e>
    2da6:	fe 2f       	mov	r31, r30
    2da8:	27 d0       	rcall	.+78     	; 0x2df8 <__divsf3_pse+0x8e>
    2daa:	66 0f       	add	r22, r22
    2dac:	77 1f       	adc	r23, r23
    2dae:	88 1f       	adc	r24, r24
    2db0:	bb 1f       	adc	r27, r27
    2db2:	26 17       	cp	r18, r22
    2db4:	37 07       	cpc	r19, r23
    2db6:	48 07       	cpc	r20, r24
    2db8:	ab 07       	cpc	r26, r27
    2dba:	b0 e8       	ldi	r27, 0x80	; 128
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <__divsf3_pse+0x56>
    2dbe:	bb 0b       	sbc	r27, r27
    2dc0:	80 2d       	mov	r24, r0
    2dc2:	bf 01       	movw	r22, r30
    2dc4:	ff 27       	eor	r31, r31
    2dc6:	93 58       	subi	r25, 0x83	; 131
    2dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    2dca:	2a f0       	brmi	.+10     	; 0x2dd6 <__divsf3_pse+0x6c>
    2dcc:	9e 3f       	cpi	r25, 0xFE	; 254
    2dce:	51 05       	cpc	r21, r1
    2dd0:	68 f0       	brcs	.+26     	; 0x2dec <__divsf3_pse+0x82>
    2dd2:	b6 c0       	rjmp	.+364    	; 0x2f40 <__fp_inf>
    2dd4:	25 c1       	rjmp	.+586    	; 0x3020 <__fp_szero>
    2dd6:	5f 3f       	cpi	r21, 0xFF	; 255
    2dd8:	ec f3       	brlt	.-6      	; 0x2dd4 <__divsf3_pse+0x6a>
    2dda:	98 3e       	cpi	r25, 0xE8	; 232
    2ddc:	dc f3       	brlt	.-10     	; 0x2dd4 <__divsf3_pse+0x6a>
    2dde:	86 95       	lsr	r24
    2de0:	77 95       	ror	r23
    2de2:	67 95       	ror	r22
    2de4:	b7 95       	ror	r27
    2de6:	f7 95       	ror	r31
    2de8:	9f 5f       	subi	r25, 0xFF	; 255
    2dea:	c9 f7       	brne	.-14     	; 0x2dde <__divsf3_pse+0x74>
    2dec:	88 0f       	add	r24, r24
    2dee:	91 1d       	adc	r25, r1
    2df0:	96 95       	lsr	r25
    2df2:	87 95       	ror	r24
    2df4:	97 f9       	bld	r25, 7
    2df6:	08 95       	ret
    2df8:	e1 e0       	ldi	r30, 0x01	; 1
    2dfa:	66 0f       	add	r22, r22
    2dfc:	77 1f       	adc	r23, r23
    2dfe:	88 1f       	adc	r24, r24
    2e00:	bb 1f       	adc	r27, r27
    2e02:	62 17       	cp	r22, r18
    2e04:	73 07       	cpc	r23, r19
    2e06:	84 07       	cpc	r24, r20
    2e08:	ba 07       	cpc	r27, r26
    2e0a:	20 f0       	brcs	.+8      	; 0x2e14 <__divsf3_pse+0xaa>
    2e0c:	62 1b       	sub	r22, r18
    2e0e:	73 0b       	sbc	r23, r19
    2e10:	84 0b       	sbc	r24, r20
    2e12:	ba 0b       	sbc	r27, r26
    2e14:	ee 1f       	adc	r30, r30
    2e16:	88 f7       	brcc	.-30     	; 0x2dfa <__divsf3_pse+0x90>
    2e18:	e0 95       	com	r30
    2e1a:	08 95       	ret

00002e1c <__fixsfsi>:
    2e1c:	04 d0       	rcall	.+8      	; 0x2e26 <__fixunssfsi>
    2e1e:	68 94       	set
    2e20:	b1 11       	cpse	r27, r1
    2e22:	fe c0       	rjmp	.+508    	; 0x3020 <__fp_szero>
    2e24:	08 95       	ret

00002e26 <__fixunssfsi>:
    2e26:	e1 d0       	rcall	.+450    	; 0x2fea <__fp_splitA>
    2e28:	88 f0       	brcs	.+34     	; 0x2e4c <__fixunssfsi+0x26>
    2e2a:	9f 57       	subi	r25, 0x7F	; 127
    2e2c:	90 f0       	brcs	.+36     	; 0x2e52 <__fixunssfsi+0x2c>
    2e2e:	b9 2f       	mov	r27, r25
    2e30:	99 27       	eor	r25, r25
    2e32:	b7 51       	subi	r27, 0x17	; 23
    2e34:	a0 f0       	brcs	.+40     	; 0x2e5e <__fixunssfsi+0x38>
    2e36:	d1 f0       	breq	.+52     	; 0x2e6c <__fixunssfsi+0x46>
    2e38:	66 0f       	add	r22, r22
    2e3a:	77 1f       	adc	r23, r23
    2e3c:	88 1f       	adc	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	1a f0       	brmi	.+6      	; 0x2e48 <__fixunssfsi+0x22>
    2e42:	ba 95       	dec	r27
    2e44:	c9 f7       	brne	.-14     	; 0x2e38 <__fixunssfsi+0x12>
    2e46:	12 c0       	rjmp	.+36     	; 0x2e6c <__fixunssfsi+0x46>
    2e48:	b1 30       	cpi	r27, 0x01	; 1
    2e4a:	81 f0       	breq	.+32     	; 0x2e6c <__fixunssfsi+0x46>
    2e4c:	e8 d0       	rcall	.+464    	; 0x301e <__fp_zero>
    2e4e:	b1 e0       	ldi	r27, 0x01	; 1
    2e50:	08 95       	ret
    2e52:	e5 c0       	rjmp	.+458    	; 0x301e <__fp_zero>
    2e54:	67 2f       	mov	r22, r23
    2e56:	78 2f       	mov	r23, r24
    2e58:	88 27       	eor	r24, r24
    2e5a:	b8 5f       	subi	r27, 0xF8	; 248
    2e5c:	39 f0       	breq	.+14     	; 0x2e6c <__fixunssfsi+0x46>
    2e5e:	b9 3f       	cpi	r27, 0xF9	; 249
    2e60:	cc f3       	brlt	.-14     	; 0x2e54 <__fixunssfsi+0x2e>
    2e62:	86 95       	lsr	r24
    2e64:	77 95       	ror	r23
    2e66:	67 95       	ror	r22
    2e68:	b3 95       	inc	r27
    2e6a:	d9 f7       	brne	.-10     	; 0x2e62 <__fixunssfsi+0x3c>
    2e6c:	3e f4       	brtc	.+14     	; 0x2e7c <__fixunssfsi+0x56>
    2e6e:	90 95       	com	r25
    2e70:	80 95       	com	r24
    2e72:	70 95       	com	r23
    2e74:	61 95       	neg	r22
    2e76:	7f 4f       	sbci	r23, 0xFF	; 255
    2e78:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7c:	08 95       	ret

00002e7e <__floatunsisf>:
    2e7e:	e8 94       	clt
    2e80:	09 c0       	rjmp	.+18     	; 0x2e94 <__floatsisf+0x12>

00002e82 <__floatsisf>:
    2e82:	97 fb       	bst	r25, 7
    2e84:	3e f4       	brtc	.+14     	; 0x2e94 <__floatsisf+0x12>
    2e86:	90 95       	com	r25
    2e88:	80 95       	com	r24
    2e8a:	70 95       	com	r23
    2e8c:	61 95       	neg	r22
    2e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e90:	8f 4f       	sbci	r24, 0xFF	; 255
    2e92:	9f 4f       	sbci	r25, 0xFF	; 255
    2e94:	99 23       	and	r25, r25
    2e96:	a9 f0       	breq	.+42     	; 0x2ec2 <__floatsisf+0x40>
    2e98:	f9 2f       	mov	r31, r25
    2e9a:	96 e9       	ldi	r25, 0x96	; 150
    2e9c:	bb 27       	eor	r27, r27
    2e9e:	93 95       	inc	r25
    2ea0:	f6 95       	lsr	r31
    2ea2:	87 95       	ror	r24
    2ea4:	77 95       	ror	r23
    2ea6:	67 95       	ror	r22
    2ea8:	b7 95       	ror	r27
    2eaa:	f1 11       	cpse	r31, r1
    2eac:	f8 cf       	rjmp	.-16     	; 0x2e9e <__floatsisf+0x1c>
    2eae:	fa f4       	brpl	.+62     	; 0x2eee <__floatsisf+0x6c>
    2eb0:	bb 0f       	add	r27, r27
    2eb2:	11 f4       	brne	.+4      	; 0x2eb8 <__floatsisf+0x36>
    2eb4:	60 ff       	sbrs	r22, 0
    2eb6:	1b c0       	rjmp	.+54     	; 0x2eee <__floatsisf+0x6c>
    2eb8:	6f 5f       	subi	r22, 0xFF	; 255
    2eba:	7f 4f       	sbci	r23, 0xFF	; 255
    2ebc:	8f 4f       	sbci	r24, 0xFF	; 255
    2ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec0:	16 c0       	rjmp	.+44     	; 0x2eee <__floatsisf+0x6c>
    2ec2:	88 23       	and	r24, r24
    2ec4:	11 f0       	breq	.+4      	; 0x2eca <__floatsisf+0x48>
    2ec6:	96 e9       	ldi	r25, 0x96	; 150
    2ec8:	11 c0       	rjmp	.+34     	; 0x2eec <__floatsisf+0x6a>
    2eca:	77 23       	and	r23, r23
    2ecc:	21 f0       	breq	.+8      	; 0x2ed6 <__floatsisf+0x54>
    2ece:	9e e8       	ldi	r25, 0x8E	; 142
    2ed0:	87 2f       	mov	r24, r23
    2ed2:	76 2f       	mov	r23, r22
    2ed4:	05 c0       	rjmp	.+10     	; 0x2ee0 <__floatsisf+0x5e>
    2ed6:	66 23       	and	r22, r22
    2ed8:	71 f0       	breq	.+28     	; 0x2ef6 <__floatsisf+0x74>
    2eda:	96 e8       	ldi	r25, 0x86	; 134
    2edc:	86 2f       	mov	r24, r22
    2ede:	70 e0       	ldi	r23, 0x00	; 0
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	2a f0       	brmi	.+10     	; 0x2eee <__floatsisf+0x6c>
    2ee4:	9a 95       	dec	r25
    2ee6:	66 0f       	add	r22, r22
    2ee8:	77 1f       	adc	r23, r23
    2eea:	88 1f       	adc	r24, r24
    2eec:	da f7       	brpl	.-10     	; 0x2ee4 <__floatsisf+0x62>
    2eee:	88 0f       	add	r24, r24
    2ef0:	96 95       	lsr	r25
    2ef2:	87 95       	ror	r24
    2ef4:	97 f9       	bld	r25, 7
    2ef6:	08 95       	ret

00002ef8 <__fp_cmp>:
    2ef8:	99 0f       	add	r25, r25
    2efa:	00 08       	sbc	r0, r0
    2efc:	55 0f       	add	r21, r21
    2efe:	aa 0b       	sbc	r26, r26
    2f00:	e0 e8       	ldi	r30, 0x80	; 128
    2f02:	fe ef       	ldi	r31, 0xFE	; 254
    2f04:	16 16       	cp	r1, r22
    2f06:	17 06       	cpc	r1, r23
    2f08:	e8 07       	cpc	r30, r24
    2f0a:	f9 07       	cpc	r31, r25
    2f0c:	c0 f0       	brcs	.+48     	; 0x2f3e <__fp_cmp+0x46>
    2f0e:	12 16       	cp	r1, r18
    2f10:	13 06       	cpc	r1, r19
    2f12:	e4 07       	cpc	r30, r20
    2f14:	f5 07       	cpc	r31, r21
    2f16:	98 f0       	brcs	.+38     	; 0x2f3e <__fp_cmp+0x46>
    2f18:	62 1b       	sub	r22, r18
    2f1a:	73 0b       	sbc	r23, r19
    2f1c:	84 0b       	sbc	r24, r20
    2f1e:	95 0b       	sbc	r25, r21
    2f20:	39 f4       	brne	.+14     	; 0x2f30 <__fp_cmp+0x38>
    2f22:	0a 26       	eor	r0, r26
    2f24:	61 f0       	breq	.+24     	; 0x2f3e <__fp_cmp+0x46>
    2f26:	23 2b       	or	r18, r19
    2f28:	24 2b       	or	r18, r20
    2f2a:	25 2b       	or	r18, r21
    2f2c:	21 f4       	brne	.+8      	; 0x2f36 <__fp_cmp+0x3e>
    2f2e:	08 95       	ret
    2f30:	0a 26       	eor	r0, r26
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <__fp_cmp+0x3e>
    2f34:	a1 40       	sbci	r26, 0x01	; 1
    2f36:	a6 95       	lsr	r26
    2f38:	8f ef       	ldi	r24, 0xFF	; 255
    2f3a:	81 1d       	adc	r24, r1
    2f3c:	81 1d       	adc	r24, r1
    2f3e:	08 95       	ret

00002f40 <__fp_inf>:
    2f40:	97 f9       	bld	r25, 7
    2f42:	9f 67       	ori	r25, 0x7F	; 127
    2f44:	80 e8       	ldi	r24, 0x80	; 128
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	60 e0       	ldi	r22, 0x00	; 0
    2f4a:	08 95       	ret

00002f4c <__fp_nan>:
    2f4c:	9f ef       	ldi	r25, 0xFF	; 255
    2f4e:	80 ec       	ldi	r24, 0xC0	; 192
    2f50:	08 95       	ret

00002f52 <__fp_powser>:
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	1f 93       	push	r17
    2f58:	0f 93       	push	r16
    2f5a:	ff 92       	push	r15
    2f5c:	ef 92       	push	r14
    2f5e:	df 92       	push	r13
    2f60:	7b 01       	movw	r14, r22
    2f62:	8c 01       	movw	r16, r24
    2f64:	68 94       	set
    2f66:	05 c0       	rjmp	.+10     	; 0x2f72 <__fp_powser+0x20>
    2f68:	da 2e       	mov	r13, r26
    2f6a:	ef 01       	movw	r28, r30
    2f6c:	76 d0       	rcall	.+236    	; 0x305a <__mulsf3x>
    2f6e:	fe 01       	movw	r30, r28
    2f70:	e8 94       	clt
    2f72:	a5 91       	lpm	r26, Z+
    2f74:	25 91       	lpm	r18, Z+
    2f76:	35 91       	lpm	r19, Z+
    2f78:	45 91       	lpm	r20, Z+
    2f7a:	55 91       	lpm	r21, Z+
    2f7c:	ae f3       	brts	.-22     	; 0x2f68 <__fp_powser+0x16>
    2f7e:	ef 01       	movw	r28, r30
    2f80:	8e de       	rcall	.-740    	; 0x2c9e <__addsf3x>
    2f82:	fe 01       	movw	r30, r28
    2f84:	97 01       	movw	r18, r14
    2f86:	a8 01       	movw	r20, r16
    2f88:	da 94       	dec	r13
    2f8a:	79 f7       	brne	.-34     	; 0x2f6a <__fp_powser+0x18>
    2f8c:	df 90       	pop	r13
    2f8e:	ef 90       	pop	r14
    2f90:	ff 90       	pop	r15
    2f92:	0f 91       	pop	r16
    2f94:	1f 91       	pop	r17
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <__fp_pscA>:
    2f9c:	00 24       	eor	r0, r0
    2f9e:	0a 94       	dec	r0
    2fa0:	16 16       	cp	r1, r22
    2fa2:	17 06       	cpc	r1, r23
    2fa4:	18 06       	cpc	r1, r24
    2fa6:	09 06       	cpc	r0, r25
    2fa8:	08 95       	ret

00002faa <__fp_pscB>:
    2faa:	00 24       	eor	r0, r0
    2fac:	0a 94       	dec	r0
    2fae:	12 16       	cp	r1, r18
    2fb0:	13 06       	cpc	r1, r19
    2fb2:	14 06       	cpc	r1, r20
    2fb4:	05 06       	cpc	r0, r21
    2fb6:	08 95       	ret

00002fb8 <__fp_round>:
    2fb8:	09 2e       	mov	r0, r25
    2fba:	03 94       	inc	r0
    2fbc:	00 0c       	add	r0, r0
    2fbe:	11 f4       	brne	.+4      	; 0x2fc4 <__fp_round+0xc>
    2fc0:	88 23       	and	r24, r24
    2fc2:	52 f0       	brmi	.+20     	; 0x2fd8 <__fp_round+0x20>
    2fc4:	bb 0f       	add	r27, r27
    2fc6:	40 f4       	brcc	.+16     	; 0x2fd8 <__fp_round+0x20>
    2fc8:	bf 2b       	or	r27, r31
    2fca:	11 f4       	brne	.+4      	; 0x2fd0 <__fp_round+0x18>
    2fcc:	60 ff       	sbrs	r22, 0
    2fce:	04 c0       	rjmp	.+8      	; 0x2fd8 <__fp_round+0x20>
    2fd0:	6f 5f       	subi	r22, 0xFF	; 255
    2fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd8:	08 95       	ret

00002fda <__fp_split3>:
    2fda:	57 fd       	sbrc	r21, 7
    2fdc:	90 58       	subi	r25, 0x80	; 128
    2fde:	44 0f       	add	r20, r20
    2fe0:	55 1f       	adc	r21, r21
    2fe2:	59 f0       	breq	.+22     	; 0x2ffa <__fp_splitA+0x10>
    2fe4:	5f 3f       	cpi	r21, 0xFF	; 255
    2fe6:	71 f0       	breq	.+28     	; 0x3004 <__fp_splitA+0x1a>
    2fe8:	47 95       	ror	r20

00002fea <__fp_splitA>:
    2fea:	88 0f       	add	r24, r24
    2fec:	97 fb       	bst	r25, 7
    2fee:	99 1f       	adc	r25, r25
    2ff0:	61 f0       	breq	.+24     	; 0x300a <__fp_splitA+0x20>
    2ff2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ff4:	79 f0       	breq	.+30     	; 0x3014 <__fp_splitA+0x2a>
    2ff6:	87 95       	ror	r24
    2ff8:	08 95       	ret
    2ffa:	12 16       	cp	r1, r18
    2ffc:	13 06       	cpc	r1, r19
    2ffe:	14 06       	cpc	r1, r20
    3000:	55 1f       	adc	r21, r21
    3002:	f2 cf       	rjmp	.-28     	; 0x2fe8 <__fp_split3+0xe>
    3004:	46 95       	lsr	r20
    3006:	f1 df       	rcall	.-30     	; 0x2fea <__fp_splitA>
    3008:	08 c0       	rjmp	.+16     	; 0x301a <__fp_splitA+0x30>
    300a:	16 16       	cp	r1, r22
    300c:	17 06       	cpc	r1, r23
    300e:	18 06       	cpc	r1, r24
    3010:	99 1f       	adc	r25, r25
    3012:	f1 cf       	rjmp	.-30     	; 0x2ff6 <__fp_splitA+0xc>
    3014:	86 95       	lsr	r24
    3016:	71 05       	cpc	r23, r1
    3018:	61 05       	cpc	r22, r1
    301a:	08 94       	sec
    301c:	08 95       	ret

0000301e <__fp_zero>:
    301e:	e8 94       	clt

00003020 <__fp_szero>:
    3020:	bb 27       	eor	r27, r27
    3022:	66 27       	eor	r22, r22
    3024:	77 27       	eor	r23, r23
    3026:	cb 01       	movw	r24, r22
    3028:	97 f9       	bld	r25, 7
    302a:	08 95       	ret

0000302c <__gesf2>:
    302c:	65 df       	rcall	.-310    	; 0x2ef8 <__fp_cmp>
    302e:	08 f4       	brcc	.+2      	; 0x3032 <__gesf2+0x6>
    3030:	8f ef       	ldi	r24, 0xFF	; 255
    3032:	08 95       	ret

00003034 <inverse>:
    3034:	9b 01       	movw	r18, r22
    3036:	ac 01       	movw	r20, r24
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	70 e0       	ldi	r23, 0x00	; 0
    303c:	80 e8       	ldi	r24, 0x80	; 128
    303e:	9f e3       	ldi	r25, 0x3F	; 63
    3040:	85 ce       	rjmp	.-758    	; 0x2d4c <__divsf3>

00003042 <__mulsf3>:
    3042:	0b d0       	rcall	.+22     	; 0x305a <__mulsf3x>
    3044:	b9 cf       	rjmp	.-142    	; 0x2fb8 <__fp_round>
    3046:	aa df       	rcall	.-172    	; 0x2f9c <__fp_pscA>
    3048:	28 f0       	brcs	.+10     	; 0x3054 <__mulsf3+0x12>
    304a:	af df       	rcall	.-162    	; 0x2faa <__fp_pscB>
    304c:	18 f0       	brcs	.+6      	; 0x3054 <__mulsf3+0x12>
    304e:	95 23       	and	r25, r21
    3050:	09 f0       	breq	.+2      	; 0x3054 <__mulsf3+0x12>
    3052:	76 cf       	rjmp	.-276    	; 0x2f40 <__fp_inf>
    3054:	7b cf       	rjmp	.-266    	; 0x2f4c <__fp_nan>
    3056:	11 24       	eor	r1, r1
    3058:	e3 cf       	rjmp	.-58     	; 0x3020 <__fp_szero>

0000305a <__mulsf3x>:
    305a:	bf df       	rcall	.-130    	; 0x2fda <__fp_split3>
    305c:	a0 f3       	brcs	.-24     	; 0x3046 <__mulsf3+0x4>

0000305e <__mulsf3_pse>:
    305e:	95 9f       	mul	r25, r21
    3060:	d1 f3       	breq	.-12     	; 0x3056 <__mulsf3+0x14>
    3062:	95 0f       	add	r25, r21
    3064:	50 e0       	ldi	r21, 0x00	; 0
    3066:	55 1f       	adc	r21, r21
    3068:	62 9f       	mul	r22, r18
    306a:	f0 01       	movw	r30, r0
    306c:	72 9f       	mul	r23, r18
    306e:	bb 27       	eor	r27, r27
    3070:	f0 0d       	add	r31, r0
    3072:	b1 1d       	adc	r27, r1
    3074:	63 9f       	mul	r22, r19
    3076:	aa 27       	eor	r26, r26
    3078:	f0 0d       	add	r31, r0
    307a:	b1 1d       	adc	r27, r1
    307c:	aa 1f       	adc	r26, r26
    307e:	64 9f       	mul	r22, r20
    3080:	66 27       	eor	r22, r22
    3082:	b0 0d       	add	r27, r0
    3084:	a1 1d       	adc	r26, r1
    3086:	66 1f       	adc	r22, r22
    3088:	82 9f       	mul	r24, r18
    308a:	22 27       	eor	r18, r18
    308c:	b0 0d       	add	r27, r0
    308e:	a1 1d       	adc	r26, r1
    3090:	62 1f       	adc	r22, r18
    3092:	73 9f       	mul	r23, r19
    3094:	b0 0d       	add	r27, r0
    3096:	a1 1d       	adc	r26, r1
    3098:	62 1f       	adc	r22, r18
    309a:	83 9f       	mul	r24, r19
    309c:	a0 0d       	add	r26, r0
    309e:	61 1d       	adc	r22, r1
    30a0:	22 1f       	adc	r18, r18
    30a2:	74 9f       	mul	r23, r20
    30a4:	33 27       	eor	r19, r19
    30a6:	a0 0d       	add	r26, r0
    30a8:	61 1d       	adc	r22, r1
    30aa:	23 1f       	adc	r18, r19
    30ac:	84 9f       	mul	r24, r20
    30ae:	60 0d       	add	r22, r0
    30b0:	21 1d       	adc	r18, r1
    30b2:	82 2f       	mov	r24, r18
    30b4:	76 2f       	mov	r23, r22
    30b6:	6a 2f       	mov	r22, r26
    30b8:	11 24       	eor	r1, r1
    30ba:	9f 57       	subi	r25, 0x7F	; 127
    30bc:	50 40       	sbci	r21, 0x00	; 0
    30be:	8a f0       	brmi	.+34     	; 0x30e2 <__mulsf3_pse+0x84>
    30c0:	e1 f0       	breq	.+56     	; 0x30fa <__mulsf3_pse+0x9c>
    30c2:	88 23       	and	r24, r24
    30c4:	4a f0       	brmi	.+18     	; 0x30d8 <__mulsf3_pse+0x7a>
    30c6:	ee 0f       	add	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	bb 1f       	adc	r27, r27
    30cc:	66 1f       	adc	r22, r22
    30ce:	77 1f       	adc	r23, r23
    30d0:	88 1f       	adc	r24, r24
    30d2:	91 50       	subi	r25, 0x01	; 1
    30d4:	50 40       	sbci	r21, 0x00	; 0
    30d6:	a9 f7       	brne	.-22     	; 0x30c2 <__mulsf3_pse+0x64>
    30d8:	9e 3f       	cpi	r25, 0xFE	; 254
    30da:	51 05       	cpc	r21, r1
    30dc:	70 f0       	brcs	.+28     	; 0x30fa <__mulsf3_pse+0x9c>
    30de:	30 cf       	rjmp	.-416    	; 0x2f40 <__fp_inf>
    30e0:	9f cf       	rjmp	.-194    	; 0x3020 <__fp_szero>
    30e2:	5f 3f       	cpi	r21, 0xFF	; 255
    30e4:	ec f3       	brlt	.-6      	; 0x30e0 <__mulsf3_pse+0x82>
    30e6:	98 3e       	cpi	r25, 0xE8	; 232
    30e8:	dc f3       	brlt	.-10     	; 0x30e0 <__mulsf3_pse+0x82>
    30ea:	86 95       	lsr	r24
    30ec:	77 95       	ror	r23
    30ee:	67 95       	ror	r22
    30f0:	b7 95       	ror	r27
    30f2:	f7 95       	ror	r31
    30f4:	e7 95       	ror	r30
    30f6:	9f 5f       	subi	r25, 0xFF	; 255
    30f8:	c1 f7       	brne	.-16     	; 0x30ea <__mulsf3_pse+0x8c>
    30fa:	fe 2b       	or	r31, r30
    30fc:	88 0f       	add	r24, r24
    30fe:	91 1d       	adc	r25, r1
    3100:	96 95       	lsr	r25
    3102:	87 95       	ror	r24
    3104:	97 f9       	bld	r25, 7
    3106:	08 95       	ret

00003108 <pow>:
    3108:	fa 01       	movw	r30, r20
    310a:	ee 0f       	add	r30, r30
    310c:	ff 1f       	adc	r31, r31
    310e:	30 96       	adiw	r30, 0x00	; 0
    3110:	21 05       	cpc	r18, r1
    3112:	31 05       	cpc	r19, r1
    3114:	99 f1       	breq	.+102    	; 0x317c <pow+0x74>
    3116:	61 15       	cp	r22, r1
    3118:	71 05       	cpc	r23, r1
    311a:	61 f4       	brne	.+24     	; 0x3134 <pow+0x2c>
    311c:	80 38       	cpi	r24, 0x80	; 128
    311e:	bf e3       	ldi	r27, 0x3F	; 63
    3120:	9b 07       	cpc	r25, r27
    3122:	49 f1       	breq	.+82     	; 0x3176 <pow+0x6e>
    3124:	68 94       	set
    3126:	90 38       	cpi	r25, 0x80	; 128
    3128:	81 05       	cpc	r24, r1
    312a:	61 f0       	breq	.+24     	; 0x3144 <pow+0x3c>
    312c:	80 38       	cpi	r24, 0x80	; 128
    312e:	bf ef       	ldi	r27, 0xFF	; 255
    3130:	9b 07       	cpc	r25, r27
    3132:	41 f0       	breq	.+16     	; 0x3144 <pow+0x3c>
    3134:	99 23       	and	r25, r25
    3136:	42 f5       	brpl	.+80     	; 0x3188 <pow+0x80>
    3138:	ff 3f       	cpi	r31, 0xFF	; 255
    313a:	e1 05       	cpc	r30, r1
    313c:	31 05       	cpc	r19, r1
    313e:	21 05       	cpc	r18, r1
    3140:	11 f1       	breq	.+68     	; 0x3186 <pow+0x7e>
    3142:	e8 94       	clt
    3144:	08 94       	sec
    3146:	e7 95       	ror	r30
    3148:	d9 01       	movw	r26, r18
    314a:	aa 23       	and	r26, r26
    314c:	29 f4       	brne	.+10     	; 0x3158 <pow+0x50>
    314e:	ab 2f       	mov	r26, r27
    3150:	be 2f       	mov	r27, r30
    3152:	f8 5f       	subi	r31, 0xF8	; 248
    3154:	d0 f3       	brcs	.-12     	; 0x314a <pow+0x42>
    3156:	10 c0       	rjmp	.+32     	; 0x3178 <pow+0x70>
    3158:	ff 5f       	subi	r31, 0xFF	; 255
    315a:	70 f4       	brcc	.+28     	; 0x3178 <pow+0x70>
    315c:	a6 95       	lsr	r26
    315e:	e0 f7       	brcc	.-8      	; 0x3158 <pow+0x50>
    3160:	f7 39       	cpi	r31, 0x97	; 151
    3162:	50 f0       	brcs	.+20     	; 0x3178 <pow+0x70>
    3164:	19 f0       	breq	.+6      	; 0x316c <pow+0x64>
    3166:	ff 3a       	cpi	r31, 0xAF	; 175
    3168:	38 f4       	brcc	.+14     	; 0x3178 <pow+0x70>
    316a:	9f 77       	andi	r25, 0x7F	; 127
    316c:	9f 93       	push	r25
    316e:	0c d0       	rcall	.+24     	; 0x3188 <pow+0x80>
    3170:	0f 90       	pop	r0
    3172:	07 fc       	sbrc	r0, 7
    3174:	90 58       	subi	r25, 0x80	; 128
    3176:	08 95       	ret
    3178:	3e f0       	brts	.+14     	; 0x3188 <pow+0x80>
    317a:	e8 ce       	rjmp	.-560    	; 0x2f4c <__fp_nan>
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	80 e8       	ldi	r24, 0x80	; 128
    3182:	9f e3       	ldi	r25, 0x3F	; 63
    3184:	08 95       	ret
    3186:	4f e7       	ldi	r20, 0x7F	; 127
    3188:	9f 77       	andi	r25, 0x7F	; 127
    318a:	5f 93       	push	r21
    318c:	4f 93       	push	r20
    318e:	3f 93       	push	r19
    3190:	2f 93       	push	r18
    3192:	80 d0       	rcall	.+256    	; 0x3294 <log>
    3194:	2f 91       	pop	r18
    3196:	3f 91       	pop	r19
    3198:	4f 91       	pop	r20
    319a:	5f 91       	pop	r21
    319c:	52 df       	rcall	.-348    	; 0x3042 <__mulsf3>
    319e:	05 c0       	rjmp	.+10     	; 0x31aa <exp>
    31a0:	19 f4       	brne	.+6      	; 0x31a8 <pow+0xa0>
    31a2:	0e f0       	brts	.+2      	; 0x31a6 <pow+0x9e>
    31a4:	cd ce       	rjmp	.-614    	; 0x2f40 <__fp_inf>
    31a6:	3b cf       	rjmp	.-394    	; 0x301e <__fp_zero>
    31a8:	d1 ce       	rjmp	.-606    	; 0x2f4c <__fp_nan>

000031aa <exp>:
    31aa:	1f df       	rcall	.-450    	; 0x2fea <__fp_splitA>
    31ac:	c8 f3       	brcs	.-14     	; 0x31a0 <pow+0x98>
    31ae:	96 38       	cpi	r25, 0x86	; 134
    31b0:	c0 f7       	brcc	.-16     	; 0x31a2 <pow+0x9a>
    31b2:	07 f8       	bld	r0, 7
    31b4:	0f 92       	push	r0
    31b6:	e8 94       	clt
    31b8:	2b e3       	ldi	r18, 0x3B	; 59
    31ba:	3a ea       	ldi	r19, 0xAA	; 170
    31bc:	48 eb       	ldi	r20, 0xB8	; 184
    31be:	5f e7       	ldi	r21, 0x7F	; 127
    31c0:	4e df       	rcall	.-356    	; 0x305e <__mulsf3_pse>
    31c2:	0f 92       	push	r0
    31c4:	0f 92       	push	r0
    31c6:	0f 92       	push	r0
    31c8:	4d b7       	in	r20, 0x3d	; 61
    31ca:	5e b7       	in	r21, 0x3e	; 62
    31cc:	0f 92       	push	r0
    31ce:	a2 d0       	rcall	.+324    	; 0x3314 <modf>
    31d0:	ec ef       	ldi	r30, 0xFC	; 252
    31d2:	f1 e0       	ldi	r31, 0x01	; 1
    31d4:	be de       	rcall	.-644    	; 0x2f52 <__fp_powser>
    31d6:	4f 91       	pop	r20
    31d8:	5f 91       	pop	r21
    31da:	ef 91       	pop	r30
    31dc:	ff 91       	pop	r31
    31de:	e5 95       	asr	r30
    31e0:	ee 1f       	adc	r30, r30
    31e2:	ff 1f       	adc	r31, r31
    31e4:	49 f0       	breq	.+18     	; 0x31f8 <exp+0x4e>
    31e6:	fe 57       	subi	r31, 0x7E	; 126
    31e8:	e0 68       	ori	r30, 0x80	; 128
    31ea:	44 27       	eor	r20, r20
    31ec:	ee 0f       	add	r30, r30
    31ee:	44 1f       	adc	r20, r20
    31f0:	fa 95       	dec	r31
    31f2:	e1 f7       	brne	.-8      	; 0x31ec <exp+0x42>
    31f4:	41 95       	neg	r20
    31f6:	55 0b       	sbc	r21, r21
    31f8:	14 d0       	rcall	.+40     	; 0x3222 <ldexp>
    31fa:	0f 90       	pop	r0
    31fc:	07 fe       	sbrs	r0, 7
    31fe:	1a cf       	rjmp	.-460    	; 0x3034 <inverse>
    3200:	08 95       	ret

00003202 <__fp_mpack>:
    3202:	9f 3f       	cpi	r25, 0xFF	; 255
    3204:	31 f0       	breq	.+12     	; 0x3212 <__fp_mpack_finite+0xc>

00003206 <__fp_mpack_finite>:
    3206:	91 50       	subi	r25, 0x01	; 1
    3208:	20 f4       	brcc	.+8      	; 0x3212 <__fp_mpack_finite+0xc>
    320a:	87 95       	ror	r24
    320c:	77 95       	ror	r23
    320e:	67 95       	ror	r22
    3210:	b7 95       	ror	r27
    3212:	88 0f       	add	r24, r24
    3214:	91 1d       	adc	r25, r1
    3216:	96 95       	lsr	r25
    3218:	87 95       	ror	r24
    321a:	97 f9       	bld	r25, 7
    321c:	08 95       	ret
    321e:	90 ce       	rjmp	.-736    	; 0x2f40 <__fp_inf>
    3220:	f0 cf       	rjmp	.-32     	; 0x3202 <__fp_mpack>

00003222 <ldexp>:
    3222:	e3 de       	rcall	.-570    	; 0x2fea <__fp_splitA>
    3224:	e8 f3       	brcs	.-6      	; 0x3220 <__fp_mpack_finite+0x1a>
    3226:	99 23       	and	r25, r25
    3228:	d9 f3       	breq	.-10     	; 0x3220 <__fp_mpack_finite+0x1a>
    322a:	94 0f       	add	r25, r20
    322c:	51 1d       	adc	r21, r1
    322e:	bb f3       	brvs	.-18     	; 0x321e <__fp_mpack_finite+0x18>
    3230:	91 50       	subi	r25, 0x01	; 1
    3232:	50 40       	sbci	r21, 0x00	; 0
    3234:	94 f0       	brlt	.+36     	; 0x325a <ldexp+0x38>
    3236:	59 f0       	breq	.+22     	; 0x324e <ldexp+0x2c>
    3238:	88 23       	and	r24, r24
    323a:	32 f0       	brmi	.+12     	; 0x3248 <ldexp+0x26>
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	88 1f       	adc	r24, r24
    3242:	91 50       	subi	r25, 0x01	; 1
    3244:	50 40       	sbci	r21, 0x00	; 0
    3246:	c1 f7       	brne	.-16     	; 0x3238 <ldexp+0x16>
    3248:	9e 3f       	cpi	r25, 0xFE	; 254
    324a:	51 05       	cpc	r21, r1
    324c:	44 f7       	brge	.-48     	; 0x321e <__fp_mpack_finite+0x18>
    324e:	88 0f       	add	r24, r24
    3250:	91 1d       	adc	r25, r1
    3252:	96 95       	lsr	r25
    3254:	87 95       	ror	r24
    3256:	97 f9       	bld	r25, 7
    3258:	08 95       	ret
    325a:	5f 3f       	cpi	r21, 0xFF	; 255
    325c:	ac f0       	brlt	.+42     	; 0x3288 <ldexp+0x66>
    325e:	98 3e       	cpi	r25, 0xE8	; 232
    3260:	9c f0       	brlt	.+38     	; 0x3288 <ldexp+0x66>
    3262:	bb 27       	eor	r27, r27
    3264:	86 95       	lsr	r24
    3266:	77 95       	ror	r23
    3268:	67 95       	ror	r22
    326a:	b7 95       	ror	r27
    326c:	08 f4       	brcc	.+2      	; 0x3270 <ldexp+0x4e>
    326e:	b1 60       	ori	r27, 0x01	; 1
    3270:	93 95       	inc	r25
    3272:	c1 f7       	brne	.-16     	; 0x3264 <ldexp+0x42>
    3274:	bb 0f       	add	r27, r27
    3276:	58 f7       	brcc	.-42     	; 0x324e <ldexp+0x2c>
    3278:	11 f4       	brne	.+4      	; 0x327e <ldexp+0x5c>
    327a:	60 ff       	sbrs	r22, 0
    327c:	e8 cf       	rjmp	.-48     	; 0x324e <ldexp+0x2c>
    327e:	6f 5f       	subi	r22, 0xFF	; 255
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	8f 4f       	sbci	r24, 0xFF	; 255
    3284:	9f 4f       	sbci	r25, 0xFF	; 255
    3286:	e3 cf       	rjmp	.-58     	; 0x324e <ldexp+0x2c>
    3288:	cb ce       	rjmp	.-618    	; 0x3020 <__fp_szero>
    328a:	0e f0       	brts	.+2      	; 0x328e <ldexp+0x6c>
    328c:	ba cf       	rjmp	.-140    	; 0x3202 <__fp_mpack>
    328e:	5e ce       	rjmp	.-836    	; 0x2f4c <__fp_nan>
    3290:	68 94       	set
    3292:	56 ce       	rjmp	.-852    	; 0x2f40 <__fp_inf>

00003294 <log>:
    3294:	aa de       	rcall	.-684    	; 0x2fea <__fp_splitA>
    3296:	c8 f3       	brcs	.-14     	; 0x328a <ldexp+0x68>
    3298:	99 23       	and	r25, r25
    329a:	d1 f3       	breq	.-12     	; 0x3290 <ldexp+0x6e>
    329c:	c6 f3       	brts	.-16     	; 0x328e <ldexp+0x6c>
    329e:	df 93       	push	r29
    32a0:	cf 93       	push	r28
    32a2:	1f 93       	push	r17
    32a4:	0f 93       	push	r16
    32a6:	ff 92       	push	r15
    32a8:	c9 2f       	mov	r28, r25
    32aa:	dd 27       	eor	r29, r29
    32ac:	88 23       	and	r24, r24
    32ae:	2a f0       	brmi	.+10     	; 0x32ba <log+0x26>
    32b0:	21 97       	sbiw	r28, 0x01	; 1
    32b2:	66 0f       	add	r22, r22
    32b4:	77 1f       	adc	r23, r23
    32b6:	88 1f       	adc	r24, r24
    32b8:	da f7       	brpl	.-10     	; 0x32b0 <log+0x1c>
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e8       	ldi	r20, 0x80	; 128
    32c0:	5f eb       	ldi	r21, 0xBF	; 191
    32c2:	9f e3       	ldi	r25, 0x3F	; 63
    32c4:	88 39       	cpi	r24, 0x98	; 152
    32c6:	20 f0       	brcs	.+8      	; 0x32d0 <log+0x3c>
    32c8:	80 3e       	cpi	r24, 0xE0	; 224
    32ca:	30 f0       	brcs	.+12     	; 0x32d8 <log+0x44>
    32cc:	21 96       	adiw	r28, 0x01	; 1
    32ce:	8f 77       	andi	r24, 0x7F	; 127
    32d0:	d5 dc       	rcall	.-1622   	; 0x2c7c <__addsf3>
    32d2:	e4 e2       	ldi	r30, 0x24	; 36
    32d4:	f2 e0       	ldi	r31, 0x02	; 2
    32d6:	03 c0       	rjmp	.+6      	; 0x32de <log+0x4a>
    32d8:	d1 dc       	rcall	.-1630   	; 0x2c7c <__addsf3>
    32da:	e1 e5       	ldi	r30, 0x51	; 81
    32dc:	f2 e0       	ldi	r31, 0x02	; 2
    32de:	39 de       	rcall	.-910    	; 0x2f52 <__fp_powser>
    32e0:	8b 01       	movw	r16, r22
    32e2:	be 01       	movw	r22, r28
    32e4:	ec 01       	movw	r28, r24
    32e6:	fb 2e       	mov	r15, r27
    32e8:	6f 57       	subi	r22, 0x7F	; 127
    32ea:	71 09       	sbc	r23, r1
    32ec:	75 95       	asr	r23
    32ee:	77 1f       	adc	r23, r23
    32f0:	88 0b       	sbc	r24, r24
    32f2:	99 0b       	sbc	r25, r25
    32f4:	c6 dd       	rcall	.-1140   	; 0x2e82 <__floatsisf>
    32f6:	28 e1       	ldi	r18, 0x18	; 24
    32f8:	32 e7       	ldi	r19, 0x72	; 114
    32fa:	41 e3       	ldi	r20, 0x31	; 49
    32fc:	5f e3       	ldi	r21, 0x3F	; 63
    32fe:	ad de       	rcall	.-678    	; 0x305a <__mulsf3x>
    3300:	af 2d       	mov	r26, r15
    3302:	98 01       	movw	r18, r16
    3304:	ae 01       	movw	r20, r28
    3306:	ff 90       	pop	r15
    3308:	0f 91       	pop	r16
    330a:	1f 91       	pop	r17
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	c6 dc       	rcall	.-1652   	; 0x2c9e <__addsf3x>
    3312:	52 ce       	rjmp	.-860    	; 0x2fb8 <__fp_round>

00003314 <modf>:
    3314:	fa 01       	movw	r30, r20
    3316:	dc 01       	movw	r26, r24
    3318:	aa 0f       	add	r26, r26
    331a:	bb 1f       	adc	r27, r27
    331c:	9b 01       	movw	r18, r22
    331e:	ac 01       	movw	r20, r24
    3320:	bf 57       	subi	r27, 0x7F	; 127
    3322:	28 f4       	brcc	.+10     	; 0x332e <modf+0x1a>
    3324:	22 27       	eor	r18, r18
    3326:	33 27       	eor	r19, r19
    3328:	44 27       	eor	r20, r20
    332a:	50 78       	andi	r21, 0x80	; 128
    332c:	1f c0       	rjmp	.+62     	; 0x336c <modf+0x58>
    332e:	b7 51       	subi	r27, 0x17	; 23
    3330:	88 f4       	brcc	.+34     	; 0x3354 <modf+0x40>
    3332:	ab 2f       	mov	r26, r27
    3334:	00 24       	eor	r0, r0
    3336:	46 95       	lsr	r20
    3338:	37 95       	ror	r19
    333a:	27 95       	ror	r18
    333c:	01 1c       	adc	r0, r1
    333e:	a3 95       	inc	r26
    3340:	d2 f3       	brmi	.-12     	; 0x3336 <modf+0x22>
    3342:	00 20       	and	r0, r0
    3344:	69 f0       	breq	.+26     	; 0x3360 <modf+0x4c>
    3346:	22 0f       	add	r18, r18
    3348:	33 1f       	adc	r19, r19
    334a:	44 1f       	adc	r20, r20
    334c:	b3 95       	inc	r27
    334e:	da f3       	brmi	.-10     	; 0x3346 <modf+0x32>
    3350:	0d d0       	rcall	.+26     	; 0x336c <modf+0x58>
    3352:	93 cc       	rjmp	.-1754   	; 0x2c7a <__subsf3>
    3354:	61 30       	cpi	r22, 0x01	; 1
    3356:	71 05       	cpc	r23, r1
    3358:	a0 e8       	ldi	r26, 0x80	; 128
    335a:	8a 07       	cpc	r24, r26
    335c:	b9 46       	sbci	r27, 0x69	; 105
    335e:	30 f4       	brcc	.+12     	; 0x336c <modf+0x58>
    3360:	9b 01       	movw	r18, r22
    3362:	ac 01       	movw	r20, r24
    3364:	66 27       	eor	r22, r22
    3366:	77 27       	eor	r23, r23
    3368:	88 27       	eor	r24, r24
    336a:	90 78       	andi	r25, 0x80	; 128
    336c:	30 96       	adiw	r30, 0x00	; 0
    336e:	21 f0       	breq	.+8      	; 0x3378 <modf+0x64>
    3370:	20 83       	st	Z, r18
    3372:	31 83       	std	Z+1, r19	; 0x01
    3374:	42 83       	std	Z+2, r20	; 0x02
    3376:	53 83       	std	Z+3, r21	; 0x03
    3378:	08 95       	ret

0000337a <__mulsi3>:
    337a:	db 01       	movw	r26, r22
    337c:	8f 93       	push	r24
    337e:	9f 93       	push	r25
    3380:	70 d0       	rcall	.+224    	; 0x3462 <__muluhisi3>
    3382:	bf 91       	pop	r27
    3384:	af 91       	pop	r26
    3386:	a2 9f       	mul	r26, r18
    3388:	80 0d       	add	r24, r0
    338a:	91 1d       	adc	r25, r1
    338c:	a3 9f       	mul	r26, r19
    338e:	90 0d       	add	r25, r0
    3390:	b2 9f       	mul	r27, r18
    3392:	90 0d       	add	r25, r0
    3394:	11 24       	eor	r1, r1
    3396:	08 95       	ret

00003398 <__udivmodhi4>:
    3398:	aa 1b       	sub	r26, r26
    339a:	bb 1b       	sub	r27, r27
    339c:	51 e1       	ldi	r21, 0x11	; 17
    339e:	07 c0       	rjmp	.+14     	; 0x33ae <__udivmodhi4_ep>

000033a0 <__udivmodhi4_loop>:
    33a0:	aa 1f       	adc	r26, r26
    33a2:	bb 1f       	adc	r27, r27
    33a4:	a6 17       	cp	r26, r22
    33a6:	b7 07       	cpc	r27, r23
    33a8:	10 f0       	brcs	.+4      	; 0x33ae <__udivmodhi4_ep>
    33aa:	a6 1b       	sub	r26, r22
    33ac:	b7 0b       	sbc	r27, r23

000033ae <__udivmodhi4_ep>:
    33ae:	88 1f       	adc	r24, r24
    33b0:	99 1f       	adc	r25, r25
    33b2:	5a 95       	dec	r21
    33b4:	a9 f7       	brne	.-22     	; 0x33a0 <__udivmodhi4_loop>
    33b6:	80 95       	com	r24
    33b8:	90 95       	com	r25
    33ba:	bc 01       	movw	r22, r24
    33bc:	cd 01       	movw	r24, r26
    33be:	08 95       	ret

000033c0 <__divmodhi4>:
    33c0:	97 fb       	bst	r25, 7
    33c2:	07 2e       	mov	r0, r23
    33c4:	16 f4       	brtc	.+4      	; 0x33ca <__divmodhi4+0xa>
    33c6:	00 94       	com	r0
    33c8:	06 d0       	rcall	.+12     	; 0x33d6 <__divmodhi4_neg1>
    33ca:	77 fd       	sbrc	r23, 7
    33cc:	08 d0       	rcall	.+16     	; 0x33de <__divmodhi4_neg2>
    33ce:	e4 df       	rcall	.-56     	; 0x3398 <__udivmodhi4>
    33d0:	07 fc       	sbrc	r0, 7
    33d2:	05 d0       	rcall	.+10     	; 0x33de <__divmodhi4_neg2>
    33d4:	3e f4       	brtc	.+14     	; 0x33e4 <__divmodhi4_exit>

000033d6 <__divmodhi4_neg1>:
    33d6:	90 95       	com	r25
    33d8:	81 95       	neg	r24
    33da:	9f 4f       	sbci	r25, 0xFF	; 255
    33dc:	08 95       	ret

000033de <__divmodhi4_neg2>:
    33de:	70 95       	com	r23
    33e0:	61 95       	neg	r22
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255

000033e4 <__divmodhi4_exit>:
    33e4:	08 95       	ret

000033e6 <__udivmodsi4>:
    33e6:	a1 e2       	ldi	r26, 0x21	; 33
    33e8:	1a 2e       	mov	r1, r26
    33ea:	aa 1b       	sub	r26, r26
    33ec:	bb 1b       	sub	r27, r27
    33ee:	fd 01       	movw	r30, r26
    33f0:	0d c0       	rjmp	.+26     	; 0x340c <__udivmodsi4_ep>

000033f2 <__udivmodsi4_loop>:
    33f2:	aa 1f       	adc	r26, r26
    33f4:	bb 1f       	adc	r27, r27
    33f6:	ee 1f       	adc	r30, r30
    33f8:	ff 1f       	adc	r31, r31
    33fa:	a2 17       	cp	r26, r18
    33fc:	b3 07       	cpc	r27, r19
    33fe:	e4 07       	cpc	r30, r20
    3400:	f5 07       	cpc	r31, r21
    3402:	20 f0       	brcs	.+8      	; 0x340c <__udivmodsi4_ep>
    3404:	a2 1b       	sub	r26, r18
    3406:	b3 0b       	sbc	r27, r19
    3408:	e4 0b       	sbc	r30, r20
    340a:	f5 0b       	sbc	r31, r21

0000340c <__udivmodsi4_ep>:
    340c:	66 1f       	adc	r22, r22
    340e:	77 1f       	adc	r23, r23
    3410:	88 1f       	adc	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	1a 94       	dec	r1
    3416:	69 f7       	brne	.-38     	; 0x33f2 <__udivmodsi4_loop>
    3418:	60 95       	com	r22
    341a:	70 95       	com	r23
    341c:	80 95       	com	r24
    341e:	90 95       	com	r25
    3420:	9b 01       	movw	r18, r22
    3422:	ac 01       	movw	r20, r24
    3424:	bd 01       	movw	r22, r26
    3426:	cf 01       	movw	r24, r30
    3428:	08 95       	ret

0000342a <__divmodsi4>:
    342a:	05 2e       	mov	r0, r21
    342c:	97 fb       	bst	r25, 7
    342e:	16 f4       	brtc	.+4      	; 0x3434 <__divmodsi4+0xa>
    3430:	00 94       	com	r0
    3432:	0f d0       	rcall	.+30     	; 0x3452 <__negsi2>
    3434:	57 fd       	sbrc	r21, 7
    3436:	05 d0       	rcall	.+10     	; 0x3442 <__divmodsi4_neg2>
    3438:	d6 df       	rcall	.-84     	; 0x33e6 <__udivmodsi4>
    343a:	07 fc       	sbrc	r0, 7
    343c:	02 d0       	rcall	.+4      	; 0x3442 <__divmodsi4_neg2>
    343e:	46 f4       	brtc	.+16     	; 0x3450 <__divmodsi4_exit>
    3440:	08 c0       	rjmp	.+16     	; 0x3452 <__negsi2>

00003442 <__divmodsi4_neg2>:
    3442:	50 95       	com	r21
    3444:	40 95       	com	r20
    3446:	30 95       	com	r19
    3448:	21 95       	neg	r18
    344a:	3f 4f       	sbci	r19, 0xFF	; 255
    344c:	4f 4f       	sbci	r20, 0xFF	; 255
    344e:	5f 4f       	sbci	r21, 0xFF	; 255

00003450 <__divmodsi4_exit>:
    3450:	08 95       	ret

00003452 <__negsi2>:
    3452:	90 95       	com	r25
    3454:	80 95       	com	r24
    3456:	70 95       	com	r23
    3458:	61 95       	neg	r22
    345a:	7f 4f       	sbci	r23, 0xFF	; 255
    345c:	8f 4f       	sbci	r24, 0xFF	; 255
    345e:	9f 4f       	sbci	r25, 0xFF	; 255
    3460:	08 95       	ret

00003462 <__muluhisi3>:
    3462:	0f d0       	rcall	.+30     	; 0x3482 <__umulhisi3>
    3464:	a5 9f       	mul	r26, r21
    3466:	90 0d       	add	r25, r0
    3468:	b4 9f       	mul	r27, r20
    346a:	90 0d       	add	r25, r0
    346c:	a4 9f       	mul	r26, r20
    346e:	80 0d       	add	r24, r0
    3470:	91 1d       	adc	r25, r1
    3472:	11 24       	eor	r1, r1
    3474:	08 95       	ret

00003476 <__mulshisi3>:
    3476:	b7 ff       	sbrs	r27, 7
    3478:	f4 cf       	rjmp	.-24     	; 0x3462 <__muluhisi3>

0000347a <__mulohisi3>:
    347a:	f3 df       	rcall	.-26     	; 0x3462 <__muluhisi3>
    347c:	82 1b       	sub	r24, r18
    347e:	93 0b       	sbc	r25, r19
    3480:	08 95       	ret

00003482 <__umulhisi3>:
    3482:	a2 9f       	mul	r26, r18
    3484:	b0 01       	movw	r22, r0
    3486:	b3 9f       	mul	r27, r19
    3488:	c0 01       	movw	r24, r0
    348a:	a3 9f       	mul	r26, r19
    348c:	70 0d       	add	r23, r0
    348e:	81 1d       	adc	r24, r1
    3490:	11 24       	eor	r1, r1
    3492:	91 1d       	adc	r25, r1
    3494:	b2 9f       	mul	r27, r18
    3496:	70 0d       	add	r23, r0
    3498:	81 1d       	adc	r24, r1
    349a:	11 24       	eor	r1, r1
    349c:	91 1d       	adc	r25, r1
    349e:	08 95       	ret

000034a0 <fdevopen>:
    34a0:	0f 93       	push	r16
    34a2:	1f 93       	push	r17
    34a4:	cf 93       	push	r28
    34a6:	df 93       	push	r29
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	31 f4       	brne	.+12     	; 0x34b8 <fdevopen+0x18>
    34ac:	61 15       	cp	r22, r1
    34ae:	71 05       	cpc	r23, r1
    34b0:	19 f4       	brne	.+6      	; 0x34b8 <fdevopen+0x18>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	39 c0       	rjmp	.+114    	; 0x352a <fdevopen+0x8a>
    34b8:	8b 01       	movw	r16, r22
    34ba:	ec 01       	movw	r28, r24
    34bc:	6e e0       	ldi	r22, 0x0E	; 14
    34be:	70 e0       	ldi	r23, 0x00	; 0
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	47 d5       	rcall	.+2702   	; 0x3f54 <calloc>
    34c6:	fc 01       	movw	r30, r24
    34c8:	89 2b       	or	r24, r25
    34ca:	99 f3       	breq	.-26     	; 0x34b2 <fdevopen+0x12>
    34cc:	80 e8       	ldi	r24, 0x80	; 128
    34ce:	83 83       	std	Z+3, r24	; 0x03
    34d0:	01 15       	cp	r16, r1
    34d2:	11 05       	cpc	r17, r1
    34d4:	71 f0       	breq	.+28     	; 0x34f2 <fdevopen+0x52>
    34d6:	02 87       	std	Z+10, r16	; 0x0a
    34d8:	13 87       	std	Z+11, r17	; 0x0b
    34da:	81 e8       	ldi	r24, 0x81	; 129
    34dc:	83 83       	std	Z+3, r24	; 0x03
    34de:	80 91 72 21 	lds	r24, 0x2172	; 0x802172 <__iob>
    34e2:	90 91 73 21 	lds	r25, 0x2173	; 0x802173 <__iob+0x1>
    34e6:	89 2b       	or	r24, r25
    34e8:	21 f4       	brne	.+8      	; 0x34f2 <fdevopen+0x52>
    34ea:	e0 93 72 21 	sts	0x2172, r30	; 0x802172 <__iob>
    34ee:	f0 93 73 21 	sts	0x2173, r31	; 0x802173 <__iob+0x1>
    34f2:	20 97       	sbiw	r28, 0x00	; 0
    34f4:	c9 f0       	breq	.+50     	; 0x3528 <fdevopen+0x88>
    34f6:	c0 87       	std	Z+8, r28	; 0x08
    34f8:	d1 87       	std	Z+9, r29	; 0x09
    34fa:	83 81       	ldd	r24, Z+3	; 0x03
    34fc:	82 60       	ori	r24, 0x02	; 2
    34fe:	83 83       	std	Z+3, r24	; 0x03
    3500:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <__iob+0x2>
    3504:	90 91 75 21 	lds	r25, 0x2175	; 0x802175 <__iob+0x3>
    3508:	89 2b       	or	r24, r25
    350a:	71 f4       	brne	.+28     	; 0x3528 <fdevopen+0x88>
    350c:	e0 93 74 21 	sts	0x2174, r30	; 0x802174 <__iob+0x2>
    3510:	f0 93 75 21 	sts	0x2175, r31	; 0x802175 <__iob+0x3>
    3514:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <__iob+0x4>
    3518:	90 91 77 21 	lds	r25, 0x2177	; 0x802177 <__iob+0x5>
    351c:	89 2b       	or	r24, r25
    351e:	21 f4       	brne	.+8      	; 0x3528 <fdevopen+0x88>
    3520:	e0 93 76 21 	sts	0x2176, r30	; 0x802176 <__iob+0x4>
    3524:	f0 93 77 21 	sts	0x2177, r31	; 0x802177 <__iob+0x5>
    3528:	cf 01       	movw	r24, r30
    352a:	df 91       	pop	r29
    352c:	cf 91       	pop	r28
    352e:	1f 91       	pop	r17
    3530:	0f 91       	pop	r16
    3532:	08 95       	ret

00003534 <printf>:
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
    353c:	ae 01       	movw	r20, r28
    353e:	4a 5f       	subi	r20, 0xFA	; 250
    3540:	5f 4f       	sbci	r21, 0xFF	; 255
    3542:	fa 01       	movw	r30, r20
    3544:	61 91       	ld	r22, Z+
    3546:	71 91       	ld	r23, Z+
    3548:	af 01       	movw	r20, r30
    354a:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <__iob+0x2>
    354e:	90 91 75 21 	lds	r25, 0x2175	; 0x802175 <__iob+0x3>
    3552:	46 d0       	rcall	.+140    	; 0x35e0 <vfprintf>
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	08 95       	ret

0000355a <sprintf>:
    355a:	0f 93       	push	r16
    355c:	1f 93       	push	r17
    355e:	cf 93       	push	r28
    3560:	df 93       	push	r29
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	2e 97       	sbiw	r28, 0x0e	; 14
    3568:	cd bf       	out	0x3d, r28	; 61
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0e 89       	ldd	r16, Y+22	; 0x16
    356e:	1f 89       	ldd	r17, Y+23	; 0x17
    3570:	86 e0       	ldi	r24, 0x06	; 6
    3572:	8c 83       	std	Y+4, r24	; 0x04
    3574:	09 83       	std	Y+1, r16	; 0x01
    3576:	1a 83       	std	Y+2, r17	; 0x02
    3578:	8f ef       	ldi	r24, 0xFF	; 255
    357a:	9f e7       	ldi	r25, 0x7F	; 127
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	ae 01       	movw	r20, r28
    3582:	46 5e       	subi	r20, 0xE6	; 230
    3584:	5f 4f       	sbci	r21, 0xFF	; 255
    3586:	68 8d       	ldd	r22, Y+24	; 0x18
    3588:	79 8d       	ldd	r23, Y+25	; 0x19
    358a:	ce 01       	movw	r24, r28
    358c:	01 96       	adiw	r24, 0x01	; 1
    358e:	28 d0       	rcall	.+80     	; 0x35e0 <vfprintf>
    3590:	ef 81       	ldd	r30, Y+7	; 0x07
    3592:	f8 85       	ldd	r31, Y+8	; 0x08
    3594:	e0 0f       	add	r30, r16
    3596:	f1 1f       	adc	r31, r17
    3598:	10 82       	st	Z, r1
    359a:	2e 96       	adiw	r28, 0x0e	; 14
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    35a8:	08 95       	ret

000035aa <sscanf>:
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	2e 97       	sbiw	r28, 0x0e	; 14
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	85 e0       	ldi	r24, 0x05	; 5
    35ba:	8c 83       	std	Y+4, r24	; 0x04
    35bc:	8c 89       	ldd	r24, Y+20	; 0x14
    35be:	9d 89       	ldd	r25, Y+21	; 0x15
    35c0:	89 83       	std	Y+1, r24	; 0x01
    35c2:	9a 83       	std	Y+2, r25	; 0x02
    35c4:	ae 01       	movw	r20, r28
    35c6:	48 5e       	subi	r20, 0xE8	; 232
    35c8:	5f 4f       	sbci	r21, 0xFF	; 255
    35ca:	6e 89       	ldd	r22, Y+22	; 0x16
    35cc:	7f 89       	ldd	r23, Y+23	; 0x17
    35ce:	ce 01       	movw	r24, r28
    35d0:	01 96       	adiw	r24, 0x01	; 1
    35d2:	a9 d3       	rcall	.+1874   	; 0x3d26 <vfscanf>
    35d4:	2e 96       	adiw	r28, 0x0e	; 14
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	df 91       	pop	r29
    35dc:	cf 91       	pop	r28
    35de:	08 95       	ret

000035e0 <vfprintf>:
    35e0:	2f 92       	push	r2
    35e2:	3f 92       	push	r3
    35e4:	4f 92       	push	r4
    35e6:	5f 92       	push	r5
    35e8:	6f 92       	push	r6
    35ea:	7f 92       	push	r7
    35ec:	8f 92       	push	r8
    35ee:	9f 92       	push	r9
    35f0:	af 92       	push	r10
    35f2:	bf 92       	push	r11
    35f4:	cf 92       	push	r12
    35f6:	df 92       	push	r13
    35f8:	ef 92       	push	r14
    35fa:	ff 92       	push	r15
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	2b 97       	sbiw	r28, 0x0b	; 11
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	6c 01       	movw	r12, r24
    3610:	7b 01       	movw	r14, r22
    3612:	8a 01       	movw	r16, r20
    3614:	fc 01       	movw	r30, r24
    3616:	16 82       	std	Z+6, r1	; 0x06
    3618:	17 82       	std	Z+7, r1	; 0x07
    361a:	83 81       	ldd	r24, Z+3	; 0x03
    361c:	81 ff       	sbrs	r24, 1
    361e:	bf c1       	rjmp	.+894    	; 0x399e <vfprintf+0x3be>
    3620:	ce 01       	movw	r24, r28
    3622:	01 96       	adiw	r24, 0x01	; 1
    3624:	3c 01       	movw	r6, r24
    3626:	f6 01       	movw	r30, r12
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	f7 01       	movw	r30, r14
    362c:	93 fd       	sbrc	r25, 3
    362e:	85 91       	lpm	r24, Z+
    3630:	93 ff       	sbrs	r25, 3
    3632:	81 91       	ld	r24, Z+
    3634:	7f 01       	movw	r14, r30
    3636:	88 23       	and	r24, r24
    3638:	09 f4       	brne	.+2      	; 0x363c <vfprintf+0x5c>
    363a:	ad c1       	rjmp	.+858    	; 0x3996 <vfprintf+0x3b6>
    363c:	85 32       	cpi	r24, 0x25	; 37
    363e:	39 f4       	brne	.+14     	; 0x364e <vfprintf+0x6e>
    3640:	93 fd       	sbrc	r25, 3
    3642:	85 91       	lpm	r24, Z+
    3644:	93 ff       	sbrs	r25, 3
    3646:	81 91       	ld	r24, Z+
    3648:	7f 01       	movw	r14, r30
    364a:	85 32       	cpi	r24, 0x25	; 37
    364c:	21 f4       	brne	.+8      	; 0x3656 <vfprintf+0x76>
    364e:	b6 01       	movw	r22, r12
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	29 d6       	rcall	.+3154   	; 0x42a6 <fputc>
    3654:	e8 cf       	rjmp	.-48     	; 0x3626 <vfprintf+0x46>
    3656:	91 2c       	mov	r9, r1
    3658:	21 2c       	mov	r2, r1
    365a:	31 2c       	mov	r3, r1
    365c:	ff e1       	ldi	r31, 0x1F	; 31
    365e:	f3 15       	cp	r31, r3
    3660:	d8 f0       	brcs	.+54     	; 0x3698 <vfprintf+0xb8>
    3662:	8b 32       	cpi	r24, 0x2B	; 43
    3664:	79 f0       	breq	.+30     	; 0x3684 <vfprintf+0xa4>
    3666:	38 f4       	brcc	.+14     	; 0x3676 <vfprintf+0x96>
    3668:	80 32       	cpi	r24, 0x20	; 32
    366a:	79 f0       	breq	.+30     	; 0x368a <vfprintf+0xaa>
    366c:	83 32       	cpi	r24, 0x23	; 35
    366e:	a1 f4       	brne	.+40     	; 0x3698 <vfprintf+0xb8>
    3670:	23 2d       	mov	r18, r3
    3672:	20 61       	ori	r18, 0x10	; 16
    3674:	1d c0       	rjmp	.+58     	; 0x36b0 <vfprintf+0xd0>
    3676:	8d 32       	cpi	r24, 0x2D	; 45
    3678:	61 f0       	breq	.+24     	; 0x3692 <vfprintf+0xb2>
    367a:	80 33       	cpi	r24, 0x30	; 48
    367c:	69 f4       	brne	.+26     	; 0x3698 <vfprintf+0xb8>
    367e:	23 2d       	mov	r18, r3
    3680:	21 60       	ori	r18, 0x01	; 1
    3682:	16 c0       	rjmp	.+44     	; 0x36b0 <vfprintf+0xd0>
    3684:	83 2d       	mov	r24, r3
    3686:	82 60       	ori	r24, 0x02	; 2
    3688:	38 2e       	mov	r3, r24
    368a:	e3 2d       	mov	r30, r3
    368c:	e4 60       	ori	r30, 0x04	; 4
    368e:	3e 2e       	mov	r3, r30
    3690:	2a c0       	rjmp	.+84     	; 0x36e6 <vfprintf+0x106>
    3692:	f3 2d       	mov	r31, r3
    3694:	f8 60       	ori	r31, 0x08	; 8
    3696:	1d c0       	rjmp	.+58     	; 0x36d2 <vfprintf+0xf2>
    3698:	37 fc       	sbrc	r3, 7
    369a:	2d c0       	rjmp	.+90     	; 0x36f6 <vfprintf+0x116>
    369c:	20 ed       	ldi	r18, 0xD0	; 208
    369e:	28 0f       	add	r18, r24
    36a0:	2a 30       	cpi	r18, 0x0A	; 10
    36a2:	40 f0       	brcs	.+16     	; 0x36b4 <vfprintf+0xd4>
    36a4:	8e 32       	cpi	r24, 0x2E	; 46
    36a6:	b9 f4       	brne	.+46     	; 0x36d6 <vfprintf+0xf6>
    36a8:	36 fc       	sbrc	r3, 6
    36aa:	75 c1       	rjmp	.+746    	; 0x3996 <vfprintf+0x3b6>
    36ac:	23 2d       	mov	r18, r3
    36ae:	20 64       	ori	r18, 0x40	; 64
    36b0:	32 2e       	mov	r3, r18
    36b2:	19 c0       	rjmp	.+50     	; 0x36e6 <vfprintf+0x106>
    36b4:	36 fe       	sbrs	r3, 6
    36b6:	06 c0       	rjmp	.+12     	; 0x36c4 <vfprintf+0xe4>
    36b8:	8a e0       	ldi	r24, 0x0A	; 10
    36ba:	98 9e       	mul	r9, r24
    36bc:	20 0d       	add	r18, r0
    36be:	11 24       	eor	r1, r1
    36c0:	92 2e       	mov	r9, r18
    36c2:	11 c0       	rjmp	.+34     	; 0x36e6 <vfprintf+0x106>
    36c4:	ea e0       	ldi	r30, 0x0A	; 10
    36c6:	2e 9e       	mul	r2, r30
    36c8:	20 0d       	add	r18, r0
    36ca:	11 24       	eor	r1, r1
    36cc:	22 2e       	mov	r2, r18
    36ce:	f3 2d       	mov	r31, r3
    36d0:	f0 62       	ori	r31, 0x20	; 32
    36d2:	3f 2e       	mov	r3, r31
    36d4:	08 c0       	rjmp	.+16     	; 0x36e6 <vfprintf+0x106>
    36d6:	8c 36       	cpi	r24, 0x6C	; 108
    36d8:	21 f4       	brne	.+8      	; 0x36e2 <vfprintf+0x102>
    36da:	83 2d       	mov	r24, r3
    36dc:	80 68       	ori	r24, 0x80	; 128
    36de:	38 2e       	mov	r3, r24
    36e0:	02 c0       	rjmp	.+4      	; 0x36e6 <vfprintf+0x106>
    36e2:	88 36       	cpi	r24, 0x68	; 104
    36e4:	41 f4       	brne	.+16     	; 0x36f6 <vfprintf+0x116>
    36e6:	f7 01       	movw	r30, r14
    36e8:	93 fd       	sbrc	r25, 3
    36ea:	85 91       	lpm	r24, Z+
    36ec:	93 ff       	sbrs	r25, 3
    36ee:	81 91       	ld	r24, Z+
    36f0:	7f 01       	movw	r14, r30
    36f2:	81 11       	cpse	r24, r1
    36f4:	b3 cf       	rjmp	.-154    	; 0x365c <vfprintf+0x7c>
    36f6:	98 2f       	mov	r25, r24
    36f8:	9f 7d       	andi	r25, 0xDF	; 223
    36fa:	95 54       	subi	r25, 0x45	; 69
    36fc:	93 30       	cpi	r25, 0x03	; 3
    36fe:	28 f4       	brcc	.+10     	; 0x370a <vfprintf+0x12a>
    3700:	0c 5f       	subi	r16, 0xFC	; 252
    3702:	1f 4f       	sbci	r17, 0xFF	; 255
    3704:	9f e3       	ldi	r25, 0x3F	; 63
    3706:	99 83       	std	Y+1, r25	; 0x01
    3708:	0d c0       	rjmp	.+26     	; 0x3724 <vfprintf+0x144>
    370a:	83 36       	cpi	r24, 0x63	; 99
    370c:	31 f0       	breq	.+12     	; 0x371a <vfprintf+0x13a>
    370e:	83 37       	cpi	r24, 0x73	; 115
    3710:	71 f0       	breq	.+28     	; 0x372e <vfprintf+0x14e>
    3712:	83 35       	cpi	r24, 0x53	; 83
    3714:	09 f0       	breq	.+2      	; 0x3718 <vfprintf+0x138>
    3716:	55 c0       	rjmp	.+170    	; 0x37c2 <vfprintf+0x1e2>
    3718:	20 c0       	rjmp	.+64     	; 0x375a <vfprintf+0x17a>
    371a:	f8 01       	movw	r30, r16
    371c:	80 81       	ld	r24, Z
    371e:	89 83       	std	Y+1, r24	; 0x01
    3720:	0e 5f       	subi	r16, 0xFE	; 254
    3722:	1f 4f       	sbci	r17, 0xFF	; 255
    3724:	88 24       	eor	r8, r8
    3726:	83 94       	inc	r8
    3728:	91 2c       	mov	r9, r1
    372a:	53 01       	movw	r10, r6
    372c:	12 c0       	rjmp	.+36     	; 0x3752 <vfprintf+0x172>
    372e:	28 01       	movw	r4, r16
    3730:	f2 e0       	ldi	r31, 0x02	; 2
    3732:	4f 0e       	add	r4, r31
    3734:	51 1c       	adc	r5, r1
    3736:	f8 01       	movw	r30, r16
    3738:	a0 80       	ld	r10, Z
    373a:	b1 80       	ldd	r11, Z+1	; 0x01
    373c:	36 fe       	sbrs	r3, 6
    373e:	03 c0       	rjmp	.+6      	; 0x3746 <vfprintf+0x166>
    3740:	69 2d       	mov	r22, r9
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	02 c0       	rjmp	.+4      	; 0x374a <vfprintf+0x16a>
    3746:	6f ef       	ldi	r22, 0xFF	; 255
    3748:	7f ef       	ldi	r23, 0xFF	; 255
    374a:	c5 01       	movw	r24, r10
    374c:	63 d5       	rcall	.+2758   	; 0x4214 <strnlen>
    374e:	4c 01       	movw	r8, r24
    3750:	82 01       	movw	r16, r4
    3752:	f3 2d       	mov	r31, r3
    3754:	ff 77       	andi	r31, 0x7F	; 127
    3756:	3f 2e       	mov	r3, r31
    3758:	15 c0       	rjmp	.+42     	; 0x3784 <vfprintf+0x1a4>
    375a:	28 01       	movw	r4, r16
    375c:	22 e0       	ldi	r18, 0x02	; 2
    375e:	42 0e       	add	r4, r18
    3760:	51 1c       	adc	r5, r1
    3762:	f8 01       	movw	r30, r16
    3764:	a0 80       	ld	r10, Z
    3766:	b1 80       	ldd	r11, Z+1	; 0x01
    3768:	36 fe       	sbrs	r3, 6
    376a:	03 c0       	rjmp	.+6      	; 0x3772 <vfprintf+0x192>
    376c:	69 2d       	mov	r22, r9
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	02 c0       	rjmp	.+4      	; 0x3776 <vfprintf+0x196>
    3772:	6f ef       	ldi	r22, 0xFF	; 255
    3774:	7f ef       	ldi	r23, 0xFF	; 255
    3776:	c5 01       	movw	r24, r10
    3778:	3b d5       	rcall	.+2678   	; 0x41f0 <strnlen_P>
    377a:	4c 01       	movw	r8, r24
    377c:	f3 2d       	mov	r31, r3
    377e:	f0 68       	ori	r31, 0x80	; 128
    3780:	3f 2e       	mov	r3, r31
    3782:	82 01       	movw	r16, r4
    3784:	33 fc       	sbrc	r3, 3
    3786:	19 c0       	rjmp	.+50     	; 0x37ba <vfprintf+0x1da>
    3788:	82 2d       	mov	r24, r2
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	88 16       	cp	r8, r24
    378e:	99 06       	cpc	r9, r25
    3790:	a0 f4       	brcc	.+40     	; 0x37ba <vfprintf+0x1da>
    3792:	b6 01       	movw	r22, r12
    3794:	80 e2       	ldi	r24, 0x20	; 32
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	86 d5       	rcall	.+2828   	; 0x42a6 <fputc>
    379a:	2a 94       	dec	r2
    379c:	f5 cf       	rjmp	.-22     	; 0x3788 <vfprintf+0x1a8>
    379e:	f5 01       	movw	r30, r10
    37a0:	37 fc       	sbrc	r3, 7
    37a2:	85 91       	lpm	r24, Z+
    37a4:	37 fe       	sbrs	r3, 7
    37a6:	81 91       	ld	r24, Z+
    37a8:	5f 01       	movw	r10, r30
    37aa:	b6 01       	movw	r22, r12
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	7b d5       	rcall	.+2806   	; 0x42a6 <fputc>
    37b0:	21 10       	cpse	r2, r1
    37b2:	2a 94       	dec	r2
    37b4:	21 e0       	ldi	r18, 0x01	; 1
    37b6:	82 1a       	sub	r8, r18
    37b8:	91 08       	sbc	r9, r1
    37ba:	81 14       	cp	r8, r1
    37bc:	91 04       	cpc	r9, r1
    37be:	79 f7       	brne	.-34     	; 0x379e <vfprintf+0x1be>
    37c0:	e1 c0       	rjmp	.+450    	; 0x3984 <vfprintf+0x3a4>
    37c2:	84 36       	cpi	r24, 0x64	; 100
    37c4:	11 f0       	breq	.+4      	; 0x37ca <vfprintf+0x1ea>
    37c6:	89 36       	cpi	r24, 0x69	; 105
    37c8:	39 f5       	brne	.+78     	; 0x3818 <vfprintf+0x238>
    37ca:	f8 01       	movw	r30, r16
    37cc:	37 fe       	sbrs	r3, 7
    37ce:	07 c0       	rjmp	.+14     	; 0x37de <vfprintf+0x1fe>
    37d0:	60 81       	ld	r22, Z
    37d2:	71 81       	ldd	r23, Z+1	; 0x01
    37d4:	82 81       	ldd	r24, Z+2	; 0x02
    37d6:	93 81       	ldd	r25, Z+3	; 0x03
    37d8:	0c 5f       	subi	r16, 0xFC	; 252
    37da:	1f 4f       	sbci	r17, 0xFF	; 255
    37dc:	08 c0       	rjmp	.+16     	; 0x37ee <vfprintf+0x20e>
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	07 2e       	mov	r0, r23
    37e4:	00 0c       	add	r0, r0
    37e6:	88 0b       	sbc	r24, r24
    37e8:	99 0b       	sbc	r25, r25
    37ea:	0e 5f       	subi	r16, 0xFE	; 254
    37ec:	1f 4f       	sbci	r17, 0xFF	; 255
    37ee:	f3 2d       	mov	r31, r3
    37f0:	ff 76       	andi	r31, 0x6F	; 111
    37f2:	3f 2e       	mov	r3, r31
    37f4:	97 ff       	sbrs	r25, 7
    37f6:	09 c0       	rjmp	.+18     	; 0x380a <vfprintf+0x22a>
    37f8:	90 95       	com	r25
    37fa:	80 95       	com	r24
    37fc:	70 95       	com	r23
    37fe:	61 95       	neg	r22
    3800:	7f 4f       	sbci	r23, 0xFF	; 255
    3802:	8f 4f       	sbci	r24, 0xFF	; 255
    3804:	9f 4f       	sbci	r25, 0xFF	; 255
    3806:	f0 68       	ori	r31, 0x80	; 128
    3808:	3f 2e       	mov	r3, r31
    380a:	2a e0       	ldi	r18, 0x0A	; 10
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	a3 01       	movw	r20, r6
    3810:	9f d5       	rcall	.+2878   	; 0x4350 <__ultoa_invert>
    3812:	88 2e       	mov	r8, r24
    3814:	86 18       	sub	r8, r6
    3816:	44 c0       	rjmp	.+136    	; 0x38a0 <vfprintf+0x2c0>
    3818:	85 37       	cpi	r24, 0x75	; 117
    381a:	31 f4       	brne	.+12     	; 0x3828 <vfprintf+0x248>
    381c:	23 2d       	mov	r18, r3
    381e:	2f 7e       	andi	r18, 0xEF	; 239
    3820:	b2 2e       	mov	r11, r18
    3822:	2a e0       	ldi	r18, 0x0A	; 10
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	25 c0       	rjmp	.+74     	; 0x3872 <vfprintf+0x292>
    3828:	93 2d       	mov	r25, r3
    382a:	99 7f       	andi	r25, 0xF9	; 249
    382c:	b9 2e       	mov	r11, r25
    382e:	8f 36       	cpi	r24, 0x6F	; 111
    3830:	c1 f0       	breq	.+48     	; 0x3862 <vfprintf+0x282>
    3832:	18 f4       	brcc	.+6      	; 0x383a <vfprintf+0x25a>
    3834:	88 35       	cpi	r24, 0x58	; 88
    3836:	79 f0       	breq	.+30     	; 0x3856 <vfprintf+0x276>
    3838:	ae c0       	rjmp	.+348    	; 0x3996 <vfprintf+0x3b6>
    383a:	80 37       	cpi	r24, 0x70	; 112
    383c:	19 f0       	breq	.+6      	; 0x3844 <vfprintf+0x264>
    383e:	88 37       	cpi	r24, 0x78	; 120
    3840:	21 f0       	breq	.+8      	; 0x384a <vfprintf+0x26a>
    3842:	a9 c0       	rjmp	.+338    	; 0x3996 <vfprintf+0x3b6>
    3844:	e9 2f       	mov	r30, r25
    3846:	e0 61       	ori	r30, 0x10	; 16
    3848:	be 2e       	mov	r11, r30
    384a:	b4 fe       	sbrs	r11, 4
    384c:	0d c0       	rjmp	.+26     	; 0x3868 <vfprintf+0x288>
    384e:	fb 2d       	mov	r31, r11
    3850:	f4 60       	ori	r31, 0x04	; 4
    3852:	bf 2e       	mov	r11, r31
    3854:	09 c0       	rjmp	.+18     	; 0x3868 <vfprintf+0x288>
    3856:	34 fe       	sbrs	r3, 4
    3858:	0a c0       	rjmp	.+20     	; 0x386e <vfprintf+0x28e>
    385a:	29 2f       	mov	r18, r25
    385c:	26 60       	ori	r18, 0x06	; 6
    385e:	b2 2e       	mov	r11, r18
    3860:	06 c0       	rjmp	.+12     	; 0x386e <vfprintf+0x28e>
    3862:	28 e0       	ldi	r18, 0x08	; 8
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	05 c0       	rjmp	.+10     	; 0x3872 <vfprintf+0x292>
    3868:	20 e1       	ldi	r18, 0x10	; 16
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	02 c0       	rjmp	.+4      	; 0x3872 <vfprintf+0x292>
    386e:	20 e1       	ldi	r18, 0x10	; 16
    3870:	32 e0       	ldi	r19, 0x02	; 2
    3872:	f8 01       	movw	r30, r16
    3874:	b7 fe       	sbrs	r11, 7
    3876:	07 c0       	rjmp	.+14     	; 0x3886 <vfprintf+0x2a6>
    3878:	60 81       	ld	r22, Z
    387a:	71 81       	ldd	r23, Z+1	; 0x01
    387c:	82 81       	ldd	r24, Z+2	; 0x02
    387e:	93 81       	ldd	r25, Z+3	; 0x03
    3880:	0c 5f       	subi	r16, 0xFC	; 252
    3882:	1f 4f       	sbci	r17, 0xFF	; 255
    3884:	06 c0       	rjmp	.+12     	; 0x3892 <vfprintf+0x2b2>
    3886:	60 81       	ld	r22, Z
    3888:	71 81       	ldd	r23, Z+1	; 0x01
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	0e 5f       	subi	r16, 0xFE	; 254
    3890:	1f 4f       	sbci	r17, 0xFF	; 255
    3892:	a3 01       	movw	r20, r6
    3894:	5d d5       	rcall	.+2746   	; 0x4350 <__ultoa_invert>
    3896:	88 2e       	mov	r8, r24
    3898:	86 18       	sub	r8, r6
    389a:	fb 2d       	mov	r31, r11
    389c:	ff 77       	andi	r31, 0x7F	; 127
    389e:	3f 2e       	mov	r3, r31
    38a0:	36 fe       	sbrs	r3, 6
    38a2:	0d c0       	rjmp	.+26     	; 0x38be <vfprintf+0x2de>
    38a4:	23 2d       	mov	r18, r3
    38a6:	2e 7f       	andi	r18, 0xFE	; 254
    38a8:	a2 2e       	mov	r10, r18
    38aa:	89 14       	cp	r8, r9
    38ac:	58 f4       	brcc	.+22     	; 0x38c4 <vfprintf+0x2e4>
    38ae:	34 fe       	sbrs	r3, 4
    38b0:	0b c0       	rjmp	.+22     	; 0x38c8 <vfprintf+0x2e8>
    38b2:	32 fc       	sbrc	r3, 2
    38b4:	09 c0       	rjmp	.+18     	; 0x38c8 <vfprintf+0x2e8>
    38b6:	83 2d       	mov	r24, r3
    38b8:	8e 7e       	andi	r24, 0xEE	; 238
    38ba:	a8 2e       	mov	r10, r24
    38bc:	05 c0       	rjmp	.+10     	; 0x38c8 <vfprintf+0x2e8>
    38be:	b8 2c       	mov	r11, r8
    38c0:	a3 2c       	mov	r10, r3
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <vfprintf+0x2ea>
    38c4:	b8 2c       	mov	r11, r8
    38c6:	01 c0       	rjmp	.+2      	; 0x38ca <vfprintf+0x2ea>
    38c8:	b9 2c       	mov	r11, r9
    38ca:	a4 fe       	sbrs	r10, 4
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <vfprintf+0x30c>
    38ce:	fe 01       	movw	r30, r28
    38d0:	e8 0d       	add	r30, r8
    38d2:	f1 1d       	adc	r31, r1
    38d4:	80 81       	ld	r24, Z
    38d6:	80 33       	cpi	r24, 0x30	; 48
    38d8:	21 f4       	brne	.+8      	; 0x38e2 <vfprintf+0x302>
    38da:	9a 2d       	mov	r25, r10
    38dc:	99 7e       	andi	r25, 0xE9	; 233
    38de:	a9 2e       	mov	r10, r25
    38e0:	09 c0       	rjmp	.+18     	; 0x38f4 <vfprintf+0x314>
    38e2:	a2 fe       	sbrs	r10, 2
    38e4:	06 c0       	rjmp	.+12     	; 0x38f2 <vfprintf+0x312>
    38e6:	b3 94       	inc	r11
    38e8:	b3 94       	inc	r11
    38ea:	04 c0       	rjmp	.+8      	; 0x38f4 <vfprintf+0x314>
    38ec:	8a 2d       	mov	r24, r10
    38ee:	86 78       	andi	r24, 0x86	; 134
    38f0:	09 f0       	breq	.+2      	; 0x38f4 <vfprintf+0x314>
    38f2:	b3 94       	inc	r11
    38f4:	a3 fc       	sbrc	r10, 3
    38f6:	10 c0       	rjmp	.+32     	; 0x3918 <vfprintf+0x338>
    38f8:	a0 fe       	sbrs	r10, 0
    38fa:	06 c0       	rjmp	.+12     	; 0x3908 <vfprintf+0x328>
    38fc:	b2 14       	cp	r11, r2
    38fe:	80 f4       	brcc	.+32     	; 0x3920 <vfprintf+0x340>
    3900:	28 0c       	add	r2, r8
    3902:	92 2c       	mov	r9, r2
    3904:	9b 18       	sub	r9, r11
    3906:	0d c0       	rjmp	.+26     	; 0x3922 <vfprintf+0x342>
    3908:	b2 14       	cp	r11, r2
    390a:	58 f4       	brcc	.+22     	; 0x3922 <vfprintf+0x342>
    390c:	b6 01       	movw	r22, r12
    390e:	80 e2       	ldi	r24, 0x20	; 32
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	c9 d4       	rcall	.+2450   	; 0x42a6 <fputc>
    3914:	b3 94       	inc	r11
    3916:	f8 cf       	rjmp	.-16     	; 0x3908 <vfprintf+0x328>
    3918:	b2 14       	cp	r11, r2
    391a:	18 f4       	brcc	.+6      	; 0x3922 <vfprintf+0x342>
    391c:	2b 18       	sub	r2, r11
    391e:	02 c0       	rjmp	.+4      	; 0x3924 <vfprintf+0x344>
    3920:	98 2c       	mov	r9, r8
    3922:	21 2c       	mov	r2, r1
    3924:	a4 fe       	sbrs	r10, 4
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <vfprintf+0x366>
    3928:	b6 01       	movw	r22, r12
    392a:	80 e3       	ldi	r24, 0x30	; 48
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	bb d4       	rcall	.+2422   	; 0x42a6 <fputc>
    3930:	a2 fe       	sbrs	r10, 2
    3932:	16 c0       	rjmp	.+44     	; 0x3960 <vfprintf+0x380>
    3934:	a1 fc       	sbrc	r10, 1
    3936:	03 c0       	rjmp	.+6      	; 0x393e <vfprintf+0x35e>
    3938:	88 e7       	ldi	r24, 0x78	; 120
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	02 c0       	rjmp	.+4      	; 0x3942 <vfprintf+0x362>
    393e:	88 e5       	ldi	r24, 0x58	; 88
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	b6 01       	movw	r22, r12
    3944:	0c c0       	rjmp	.+24     	; 0x395e <vfprintf+0x37e>
    3946:	8a 2d       	mov	r24, r10
    3948:	86 78       	andi	r24, 0x86	; 134
    394a:	51 f0       	breq	.+20     	; 0x3960 <vfprintf+0x380>
    394c:	a1 fe       	sbrs	r10, 1
    394e:	02 c0       	rjmp	.+4      	; 0x3954 <vfprintf+0x374>
    3950:	8b e2       	ldi	r24, 0x2B	; 43
    3952:	01 c0       	rjmp	.+2      	; 0x3956 <vfprintf+0x376>
    3954:	80 e2       	ldi	r24, 0x20	; 32
    3956:	a7 fc       	sbrc	r10, 7
    3958:	8d e2       	ldi	r24, 0x2D	; 45
    395a:	b6 01       	movw	r22, r12
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	a3 d4       	rcall	.+2374   	; 0x42a6 <fputc>
    3960:	89 14       	cp	r8, r9
    3962:	30 f4       	brcc	.+12     	; 0x3970 <vfprintf+0x390>
    3964:	b6 01       	movw	r22, r12
    3966:	80 e3       	ldi	r24, 0x30	; 48
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	9d d4       	rcall	.+2362   	; 0x42a6 <fputc>
    396c:	9a 94       	dec	r9
    396e:	f8 cf       	rjmp	.-16     	; 0x3960 <vfprintf+0x380>
    3970:	8a 94       	dec	r8
    3972:	f3 01       	movw	r30, r6
    3974:	e8 0d       	add	r30, r8
    3976:	f1 1d       	adc	r31, r1
    3978:	80 81       	ld	r24, Z
    397a:	b6 01       	movw	r22, r12
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	93 d4       	rcall	.+2342   	; 0x42a6 <fputc>
    3980:	81 10       	cpse	r8, r1
    3982:	f6 cf       	rjmp	.-20     	; 0x3970 <vfprintf+0x390>
    3984:	22 20       	and	r2, r2
    3986:	09 f4       	brne	.+2      	; 0x398a <vfprintf+0x3aa>
    3988:	4e ce       	rjmp	.-868    	; 0x3626 <vfprintf+0x46>
    398a:	b6 01       	movw	r22, r12
    398c:	80 e2       	ldi	r24, 0x20	; 32
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	8a d4       	rcall	.+2324   	; 0x42a6 <fputc>
    3992:	2a 94       	dec	r2
    3994:	f7 cf       	rjmp	.-18     	; 0x3984 <vfprintf+0x3a4>
    3996:	f6 01       	movw	r30, r12
    3998:	86 81       	ldd	r24, Z+6	; 0x06
    399a:	97 81       	ldd	r25, Z+7	; 0x07
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <vfprintf+0x3c2>
    399e:	8f ef       	ldi	r24, 0xFF	; 255
    39a0:	9f ef       	ldi	r25, 0xFF	; 255
    39a2:	2b 96       	adiw	r28, 0x0b	; 11
    39a4:	cd bf       	out	0x3d, r28	; 61
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ff 90       	pop	r15
    39b2:	ef 90       	pop	r14
    39b4:	df 90       	pop	r13
    39b6:	cf 90       	pop	r12
    39b8:	bf 90       	pop	r11
    39ba:	af 90       	pop	r10
    39bc:	9f 90       	pop	r9
    39be:	8f 90       	pop	r8
    39c0:	7f 90       	pop	r7
    39c2:	6f 90       	pop	r6
    39c4:	5f 90       	pop	r5
    39c6:	4f 90       	pop	r4
    39c8:	3f 90       	pop	r3
    39ca:	2f 90       	pop	r2
    39cc:	08 95       	ret

000039ce <putval>:
    39ce:	20 fd       	sbrc	r18, 0
    39d0:	09 c0       	rjmp	.+18     	; 0x39e4 <putval+0x16>
    39d2:	fc 01       	movw	r30, r24
    39d4:	23 fd       	sbrc	r18, 3
    39d6:	05 c0       	rjmp	.+10     	; 0x39e2 <putval+0x14>
    39d8:	22 ff       	sbrs	r18, 2
    39da:	02 c0       	rjmp	.+4      	; 0x39e0 <putval+0x12>
    39dc:	73 83       	std	Z+3, r23	; 0x03
    39de:	62 83       	std	Z+2, r22	; 0x02
    39e0:	51 83       	std	Z+1, r21	; 0x01
    39e2:	40 83       	st	Z, r20
    39e4:	08 95       	ret

000039e6 <mulacc>:
    39e6:	44 fd       	sbrc	r20, 4
    39e8:	17 c0       	rjmp	.+46     	; 0x3a18 <mulacc+0x32>
    39ea:	46 fd       	sbrc	r20, 6
    39ec:	17 c0       	rjmp	.+46     	; 0x3a1c <mulacc+0x36>
    39ee:	ab 01       	movw	r20, r22
    39f0:	bc 01       	movw	r22, r24
    39f2:	da 01       	movw	r26, r20
    39f4:	fb 01       	movw	r30, r22
    39f6:	aa 0f       	add	r26, r26
    39f8:	bb 1f       	adc	r27, r27
    39fa:	ee 1f       	adc	r30, r30
    39fc:	ff 1f       	adc	r31, r31
    39fe:	10 94       	com	r1
    3a00:	d1 f7       	brne	.-12     	; 0x39f6 <mulacc+0x10>
    3a02:	4a 0f       	add	r20, r26
    3a04:	5b 1f       	adc	r21, r27
    3a06:	6e 1f       	adc	r22, r30
    3a08:	7f 1f       	adc	r23, r31
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	ba 01       	movw	r22, r20
    3a0e:	66 0f       	add	r22, r22
    3a10:	77 1f       	adc	r23, r23
    3a12:	88 1f       	adc	r24, r24
    3a14:	99 1f       	adc	r25, r25
    3a16:	09 c0       	rjmp	.+18     	; 0x3a2a <mulacc+0x44>
    3a18:	33 e0       	ldi	r19, 0x03	; 3
    3a1a:	01 c0       	rjmp	.+2      	; 0x3a1e <mulacc+0x38>
    3a1c:	34 e0       	ldi	r19, 0x04	; 4
    3a1e:	66 0f       	add	r22, r22
    3a20:	77 1f       	adc	r23, r23
    3a22:	88 1f       	adc	r24, r24
    3a24:	99 1f       	adc	r25, r25
    3a26:	31 50       	subi	r19, 0x01	; 1
    3a28:	d1 f7       	brne	.-12     	; 0x3a1e <mulacc+0x38>
    3a2a:	62 0f       	add	r22, r18
    3a2c:	71 1d       	adc	r23, r1
    3a2e:	81 1d       	adc	r24, r1
    3a30:	91 1d       	adc	r25, r1
    3a32:	08 95       	ret

00003a34 <skip_spaces>:
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	8c 01       	movw	r16, r24
    3a3e:	c8 01       	movw	r24, r16
    3a40:	f4 d3       	rcall	.+2024   	; 0x422a <fgetc>
    3a42:	ec 01       	movw	r28, r24
    3a44:	97 fd       	sbrc	r25, 7
    3a46:	06 c0       	rjmp	.+12     	; 0x3a54 <skip_spaces+0x20>
    3a48:	c0 d3       	rcall	.+1920   	; 0x41ca <isspace>
    3a4a:	89 2b       	or	r24, r25
    3a4c:	c1 f7       	brne	.-16     	; 0x3a3e <skip_spaces+0xa>
    3a4e:	b8 01       	movw	r22, r16
    3a50:	ce 01       	movw	r24, r28
    3a52:	65 d4       	rcall	.+2250   	; 0x431e <ungetc>
    3a54:	ce 01       	movw	r24, r28
    3a56:	df 91       	pop	r29
    3a58:	cf 91       	pop	r28
    3a5a:	1f 91       	pop	r17
    3a5c:	0f 91       	pop	r16
    3a5e:	08 95       	ret

00003a60 <conv_int>:
    3a60:	8f 92       	push	r8
    3a62:	9f 92       	push	r9
    3a64:	af 92       	push	r10
    3a66:	bf 92       	push	r11
    3a68:	ef 92       	push	r14
    3a6a:	ff 92       	push	r15
    3a6c:	0f 93       	push	r16
    3a6e:	1f 93       	push	r17
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	8c 01       	movw	r16, r24
    3a76:	d6 2f       	mov	r29, r22
    3a78:	7a 01       	movw	r14, r20
    3a7a:	b2 2e       	mov	r11, r18
    3a7c:	d6 d3       	rcall	.+1964   	; 0x422a <fgetc>
    3a7e:	9c 01       	movw	r18, r24
    3a80:	33 27       	eor	r19, r19
    3a82:	2b 32       	cpi	r18, 0x2B	; 43
    3a84:	31 05       	cpc	r19, r1
    3a86:	31 f0       	breq	.+12     	; 0x3a94 <conv_int+0x34>
    3a88:	2d 32       	cpi	r18, 0x2D	; 45
    3a8a:	31 05       	cpc	r19, r1
    3a8c:	59 f4       	brne	.+22     	; 0x3aa4 <conv_int+0x44>
    3a8e:	8b 2d       	mov	r24, r11
    3a90:	80 68       	ori	r24, 0x80	; 128
    3a92:	b8 2e       	mov	r11, r24
    3a94:	d1 50       	subi	r29, 0x01	; 1
    3a96:	11 f4       	brne	.+4      	; 0x3a9c <conv_int+0x3c>
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	61 c0       	rjmp	.+194    	; 0x3b5e <conv_int+0xfe>
    3a9c:	c8 01       	movw	r24, r16
    3a9e:	c5 d3       	rcall	.+1930   	; 0x422a <fgetc>
    3aa0:	97 fd       	sbrc	r25, 7
    3aa2:	fa cf       	rjmp	.-12     	; 0x3a98 <conv_int+0x38>
    3aa4:	cb 2d       	mov	r28, r11
    3aa6:	cd 7f       	andi	r28, 0xFD	; 253
    3aa8:	2b 2d       	mov	r18, r11
    3aaa:	20 73       	andi	r18, 0x30	; 48
    3aac:	f9 f4       	brne	.+62     	; 0x3aec <conv_int+0x8c>
    3aae:	80 33       	cpi	r24, 0x30	; 48
    3ab0:	e9 f4       	brne	.+58     	; 0x3aec <conv_int+0x8c>
    3ab2:	aa 24       	eor	r10, r10
    3ab4:	aa 94       	dec	r10
    3ab6:	ad 0e       	add	r10, r29
    3ab8:	09 f4       	brne	.+2      	; 0x3abc <conv_int+0x5c>
    3aba:	3e c0       	rjmp	.+124    	; 0x3b38 <conv_int+0xd8>
    3abc:	c8 01       	movw	r24, r16
    3abe:	b5 d3       	rcall	.+1898   	; 0x422a <fgetc>
    3ac0:	97 fd       	sbrc	r25, 7
    3ac2:	3a c0       	rjmp	.+116    	; 0x3b38 <conv_int+0xd8>
    3ac4:	9c 01       	movw	r18, r24
    3ac6:	2f 7d       	andi	r18, 0xDF	; 223
    3ac8:	33 27       	eor	r19, r19
    3aca:	28 35       	cpi	r18, 0x58	; 88
    3acc:	31 05       	cpc	r19, r1
    3ace:	41 f4       	brne	.+16     	; 0x3ae0 <conv_int+0x80>
    3ad0:	c2 64       	ori	r28, 0x42	; 66
    3ad2:	d2 50       	subi	r29, 0x02	; 2
    3ad4:	89 f1       	breq	.+98     	; 0x3b38 <conv_int+0xd8>
    3ad6:	c8 01       	movw	r24, r16
    3ad8:	a8 d3       	rcall	.+1872   	; 0x422a <fgetc>
    3ada:	97 ff       	sbrs	r25, 7
    3adc:	07 c0       	rjmp	.+14     	; 0x3aec <conv_int+0x8c>
    3ade:	2c c0       	rjmp	.+88     	; 0x3b38 <conv_int+0xd8>
    3ae0:	b6 fe       	sbrs	r11, 6
    3ae2:	02 c0       	rjmp	.+4      	; 0x3ae8 <conv_int+0x88>
    3ae4:	c2 60       	ori	r28, 0x02	; 2
    3ae6:	01 c0       	rjmp	.+2      	; 0x3aea <conv_int+0x8a>
    3ae8:	c2 61       	ori	r28, 0x12	; 18
    3aea:	da 2d       	mov	r29, r10
    3aec:	81 2c       	mov	r8, r1
    3aee:	91 2c       	mov	r9, r1
    3af0:	54 01       	movw	r10, r8
    3af2:	20 ed       	ldi	r18, 0xD0	; 208
    3af4:	28 0f       	add	r18, r24
    3af6:	28 30       	cpi	r18, 0x08	; 8
    3af8:	78 f0       	brcs	.+30     	; 0x3b18 <conv_int+0xb8>
    3afa:	c4 ff       	sbrs	r28, 4
    3afc:	03 c0       	rjmp	.+6      	; 0x3b04 <conv_int+0xa4>
    3afe:	b8 01       	movw	r22, r16
    3b00:	0e d4       	rcall	.+2076   	; 0x431e <ungetc>
    3b02:	17 c0       	rjmp	.+46     	; 0x3b32 <conv_int+0xd2>
    3b04:	2a 30       	cpi	r18, 0x0A	; 10
    3b06:	40 f0       	brcs	.+16     	; 0x3b18 <conv_int+0xb8>
    3b08:	c6 ff       	sbrs	r28, 6
    3b0a:	f9 cf       	rjmp	.-14     	; 0x3afe <conv_int+0x9e>
    3b0c:	2f 7d       	andi	r18, 0xDF	; 223
    3b0e:	3f ee       	ldi	r19, 0xEF	; 239
    3b10:	32 0f       	add	r19, r18
    3b12:	36 30       	cpi	r19, 0x06	; 6
    3b14:	a0 f7       	brcc	.-24     	; 0x3afe <conv_int+0x9e>
    3b16:	27 50       	subi	r18, 0x07	; 7
    3b18:	4c 2f       	mov	r20, r28
    3b1a:	c5 01       	movw	r24, r10
    3b1c:	b4 01       	movw	r22, r8
    3b1e:	63 df       	rcall	.-314    	; 0x39e6 <mulacc>
    3b20:	4b 01       	movw	r8, r22
    3b22:	5c 01       	movw	r10, r24
    3b24:	c2 60       	ori	r28, 0x02	; 2
    3b26:	d1 50       	subi	r29, 0x01	; 1
    3b28:	51 f0       	breq	.+20     	; 0x3b3e <conv_int+0xde>
    3b2a:	c8 01       	movw	r24, r16
    3b2c:	7e d3       	rcall	.+1788   	; 0x422a <fgetc>
    3b2e:	97 ff       	sbrs	r25, 7
    3b30:	e0 cf       	rjmp	.-64     	; 0x3af2 <conv_int+0x92>
    3b32:	c1 fd       	sbrc	r28, 1
    3b34:	04 c0       	rjmp	.+8      	; 0x3b3e <conv_int+0xde>
    3b36:	b0 cf       	rjmp	.-160    	; 0x3a98 <conv_int+0x38>
    3b38:	81 2c       	mov	r8, r1
    3b3a:	91 2c       	mov	r9, r1
    3b3c:	54 01       	movw	r10, r8
    3b3e:	c7 ff       	sbrs	r28, 7
    3b40:	08 c0       	rjmp	.+16     	; 0x3b52 <conv_int+0xf2>
    3b42:	b0 94       	com	r11
    3b44:	a0 94       	com	r10
    3b46:	90 94       	com	r9
    3b48:	80 94       	com	r8
    3b4a:	81 1c       	adc	r8, r1
    3b4c:	91 1c       	adc	r9, r1
    3b4e:	a1 1c       	adc	r10, r1
    3b50:	b1 1c       	adc	r11, r1
    3b52:	2c 2f       	mov	r18, r28
    3b54:	b5 01       	movw	r22, r10
    3b56:	a4 01       	movw	r20, r8
    3b58:	c7 01       	movw	r24, r14
    3b5a:	39 df       	rcall	.-398    	; 0x39ce <putval>
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	ff 90       	pop	r15
    3b68:	ef 90       	pop	r14
    3b6a:	bf 90       	pop	r11
    3b6c:	af 90       	pop	r10
    3b6e:	9f 90       	pop	r9
    3b70:	8f 90       	pop	r8
    3b72:	08 95       	ret

00003b74 <conv_brk>:
    3b74:	5f 92       	push	r5
    3b76:	6f 92       	push	r6
    3b78:	7f 92       	push	r7
    3b7a:	8f 92       	push	r8
    3b7c:	9f 92       	push	r9
    3b7e:	af 92       	push	r10
    3b80:	bf 92       	push	r11
    3b82:	cf 92       	push	r12
    3b84:	df 92       	push	r13
    3b86:	ef 92       	push	r14
    3b88:	ff 92       	push	r15
    3b8a:	0f 93       	push	r16
    3b8c:	1f 93       	push	r17
    3b8e:	cf 93       	push	r28
    3b90:	df 93       	push	r29
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	a0 97       	sbiw	r28, 0x20	; 32
    3b98:	cd bf       	out	0x3d, r28	; 61
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	5c 01       	movw	r10, r24
    3b9e:	96 2e       	mov	r9, r22
    3ba0:	7a 01       	movw	r14, r20
    3ba2:	f9 01       	movw	r30, r18
    3ba4:	8e 01       	movw	r16, r28
    3ba6:	0f 5f       	subi	r16, 0xFF	; 255
    3ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    3baa:	68 01       	movw	r12, r16
    3bac:	80 e2       	ldi	r24, 0x20	; 32
    3bae:	d8 01       	movw	r26, r16
    3bb0:	1d 92       	st	X+, r1
    3bb2:	8a 95       	dec	r24
    3bb4:	e9 f7       	brne	.-6      	; 0x3bb0 <conv_brk+0x3c>
    3bb6:	d5 01       	movw	r26, r10
    3bb8:	13 96       	adiw	r26, 0x03	; 3
    3bba:	8c 90       	ld	r8, X
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	61 2c       	mov	r6, r1
    3bc2:	71 2c       	mov	r7, r1
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	61 e0       	ldi	r22, 0x01	; 1
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	83 fc       	sbrc	r8, 3
    3bcc:	25 91       	lpm	r18, Z+
    3bce:	83 fe       	sbrs	r8, 3
    3bd0:	21 91       	ld	r18, Z+
    3bd2:	8f 01       	movw	r16, r30
    3bd4:	52 2e       	mov	r5, r18
    3bd6:	21 11       	cpse	r18, r1
    3bd8:	03 c0       	rjmp	.+6      	; 0x3be0 <conv_brk+0x6c>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	90 c0       	rjmp	.+288    	; 0x3d00 <conv_brk+0x18c>
    3be0:	2e 35       	cpi	r18, 0x5E	; 94
    3be2:	11 f4       	brne	.+4      	; 0x3be8 <conv_brk+0x74>
    3be4:	00 97       	sbiw	r24, 0x00	; 0
    3be6:	51 f1       	breq	.+84     	; 0x3c3c <conv_brk+0xc8>
    3be8:	43 2f       	mov	r20, r19
    3bea:	50 e0       	ldi	r21, 0x00	; 0
    3bec:	48 17       	cp	r20, r24
    3bee:	59 07       	cpc	r21, r25
    3bf0:	3c f4       	brge	.+14     	; 0x3c00 <conv_brk+0x8c>
    3bf2:	2d 35       	cpi	r18, 0x5D	; 93
    3bf4:	59 f1       	breq	.+86     	; 0x3c4c <conv_brk+0xd8>
    3bf6:	2d 32       	cpi	r18, 0x2D	; 45
    3bf8:	19 f4       	brne	.+6      	; 0x3c00 <conv_brk+0x8c>
    3bfa:	77 20       	and	r7, r7
    3bfc:	09 f1       	breq	.+66     	; 0x3c40 <conv_brk+0xcc>
    3bfe:	03 c0       	rjmp	.+6      	; 0x3c06 <conv_brk+0x92>
    3c00:	77 20       	and	r7, r7
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <conv_brk+0x92>
    3c04:	68 c0       	rjmp	.+208    	; 0x3cd6 <conv_brk+0x162>
    3c06:	45 2d       	mov	r20, r5
    3c08:	46 95       	lsr	r20
    3c0a:	46 95       	lsr	r20
    3c0c:	46 95       	lsr	r20
    3c0e:	d6 01       	movw	r26, r12
    3c10:	a4 0f       	add	r26, r20
    3c12:	b1 1d       	adc	r27, r1
    3c14:	45 2d       	mov	r20, r5
    3c16:	47 70       	andi	r20, 0x07	; 7
    3c18:	8b 01       	movw	r16, r22
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <conv_brk+0xac>
    3c1c:	00 0f       	add	r16, r16
    3c1e:	11 1f       	adc	r17, r17
    3c20:	4a 95       	dec	r20
    3c22:	e2 f7       	brpl	.-8      	; 0x3c1c <conv_brk+0xa8>
    3c24:	a8 01       	movw	r20, r16
    3c26:	5c 91       	ld	r21, X
    3c28:	45 2b       	or	r20, r21
    3c2a:	4c 93       	st	X, r20
    3c2c:	65 14       	cp	r6, r5
    3c2e:	59 f0       	breq	.+22     	; 0x3c46 <conv_brk+0xd2>
    3c30:	56 14       	cp	r5, r6
    3c32:	10 f4       	brcc	.+4      	; 0x3c38 <conv_brk+0xc4>
    3c34:	53 94       	inc	r5
    3c36:	e7 cf       	rjmp	.-50     	; 0x3c06 <conv_brk+0x92>
    3c38:	5a 94       	dec	r5
    3c3a:	e5 cf       	rjmp	.-54     	; 0x3c06 <conv_brk+0x92>
    3c3c:	31 e0       	ldi	r19, 0x01	; 1
    3c3e:	04 c0       	rjmp	.+8      	; 0x3c48 <conv_brk+0xd4>
    3c40:	77 24       	eor	r7, r7
    3c42:	73 94       	inc	r7
    3c44:	01 c0       	rjmp	.+2      	; 0x3c48 <conv_brk+0xd4>
    3c46:	71 2c       	mov	r7, r1
    3c48:	01 96       	adiw	r24, 0x01	; 1
    3c4a:	bf cf       	rjmp	.-130    	; 0x3bca <conv_brk+0x56>
    3c4c:	77 20       	and	r7, r7
    3c4e:	19 f0       	breq	.+6      	; 0x3c56 <conv_brk+0xe2>
    3c50:	8e 81       	ldd	r24, Y+6	; 0x06
    3c52:	80 62       	ori	r24, 0x20	; 32
    3c54:	8e 83       	std	Y+6, r24	; 0x06
    3c56:	31 11       	cpse	r19, r1
    3c58:	03 c0       	rjmp	.+6      	; 0x3c60 <conv_brk+0xec>
    3c5a:	88 24       	eor	r8, r8
    3c5c:	83 94       	inc	r8
    3c5e:	17 c0       	rjmp	.+46     	; 0x3c8e <conv_brk+0x11a>
    3c60:	f6 01       	movw	r30, r12
    3c62:	9e 01       	movw	r18, r28
    3c64:	2f 5d       	subi	r18, 0xDF	; 223
    3c66:	3f 4f       	sbci	r19, 0xFF	; 255
    3c68:	80 81       	ld	r24, Z
    3c6a:	80 95       	com	r24
    3c6c:	81 93       	st	Z+, r24
    3c6e:	2e 17       	cp	r18, r30
    3c70:	3f 07       	cpc	r19, r31
    3c72:	d1 f7       	brne	.-12     	; 0x3c68 <conv_brk+0xf4>
    3c74:	f2 cf       	rjmp	.-28     	; 0x3c5a <conv_brk+0xe6>
    3c76:	e1 14       	cp	r14, r1
    3c78:	f1 04       	cpc	r15, r1
    3c7a:	29 f0       	breq	.+10     	; 0x3c86 <conv_brk+0x112>
    3c7c:	d7 01       	movw	r26, r14
    3c7e:	8c 93       	st	X, r24
    3c80:	f7 01       	movw	r30, r14
    3c82:	31 96       	adiw	r30, 0x01	; 1
    3c84:	7f 01       	movw	r14, r30
    3c86:	9a 94       	dec	r9
    3c88:	81 2c       	mov	r8, r1
    3c8a:	99 20       	and	r9, r9
    3c8c:	e9 f0       	breq	.+58     	; 0x3cc8 <conv_brk+0x154>
    3c8e:	c5 01       	movw	r24, r10
    3c90:	cc d2       	rcall	.+1432   	; 0x422a <fgetc>
    3c92:	97 fd       	sbrc	r25, 7
    3c94:	17 c0       	rjmp	.+46     	; 0x3cc4 <conv_brk+0x150>
    3c96:	fc 01       	movw	r30, r24
    3c98:	ff 27       	eor	r31, r31
    3c9a:	23 e0       	ldi	r18, 0x03	; 3
    3c9c:	f5 95       	asr	r31
    3c9e:	e7 95       	ror	r30
    3ca0:	2a 95       	dec	r18
    3ca2:	e1 f7       	brne	.-8      	; 0x3c9c <conv_brk+0x128>
    3ca4:	ec 0d       	add	r30, r12
    3ca6:	fd 1d       	adc	r31, r13
    3ca8:	20 81       	ld	r18, Z
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	ac 01       	movw	r20, r24
    3cae:	47 70       	andi	r20, 0x07	; 7
    3cb0:	55 27       	eor	r21, r21
    3cb2:	02 c0       	rjmp	.+4      	; 0x3cb8 <conv_brk+0x144>
    3cb4:	35 95       	asr	r19
    3cb6:	27 95       	ror	r18
    3cb8:	4a 95       	dec	r20
    3cba:	e2 f7       	brpl	.-8      	; 0x3cb4 <conv_brk+0x140>
    3cbc:	20 fd       	sbrc	r18, 0
    3cbe:	db cf       	rjmp	.-74     	; 0x3c76 <conv_brk+0x102>
    3cc0:	b5 01       	movw	r22, r10
    3cc2:	2d d3       	rcall	.+1626   	; 0x431e <ungetc>
    3cc4:	81 10       	cpse	r8, r1
    3cc6:	89 cf       	rjmp	.-238    	; 0x3bda <conv_brk+0x66>
    3cc8:	e1 14       	cp	r14, r1
    3cca:	f1 04       	cpc	r15, r1
    3ccc:	11 f0       	breq	.+4      	; 0x3cd2 <conv_brk+0x15e>
    3cce:	d7 01       	movw	r26, r14
    3cd0:	1c 92       	st	X, r1
    3cd2:	c8 01       	movw	r24, r16
    3cd4:	15 c0       	rjmp	.+42     	; 0x3d00 <conv_brk+0x18c>
    3cd6:	42 2f       	mov	r20, r18
    3cd8:	46 95       	lsr	r20
    3cda:	46 95       	lsr	r20
    3cdc:	46 95       	lsr	r20
    3cde:	d6 01       	movw	r26, r12
    3ce0:	a4 0f       	add	r26, r20
    3ce2:	b1 1d       	adc	r27, r1
    3ce4:	42 2f       	mov	r20, r18
    3ce6:	47 70       	andi	r20, 0x07	; 7
    3ce8:	8b 01       	movw	r16, r22
    3cea:	02 c0       	rjmp	.+4      	; 0x3cf0 <conv_brk+0x17c>
    3cec:	00 0f       	add	r16, r16
    3cee:	11 1f       	adc	r17, r17
    3cf0:	4a 95       	dec	r20
    3cf2:	e2 f7       	brpl	.-8      	; 0x3cec <conv_brk+0x178>
    3cf4:	a8 01       	movw	r20, r16
    3cf6:	5c 91       	ld	r21, X
    3cf8:	45 2b       	or	r20, r21
    3cfa:	4c 93       	st	X, r20
    3cfc:	62 2e       	mov	r6, r18
    3cfe:	a4 cf       	rjmp	.-184    	; 0x3c48 <conv_brk+0xd4>
    3d00:	a0 96       	adiw	r28, 0x20	; 32
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	df 91       	pop	r29
    3d08:	cf 91       	pop	r28
    3d0a:	1f 91       	pop	r17
    3d0c:	0f 91       	pop	r16
    3d0e:	ff 90       	pop	r15
    3d10:	ef 90       	pop	r14
    3d12:	df 90       	pop	r13
    3d14:	cf 90       	pop	r12
    3d16:	bf 90       	pop	r11
    3d18:	af 90       	pop	r10
    3d1a:	9f 90       	pop	r9
    3d1c:	8f 90       	pop	r8
    3d1e:	7f 90       	pop	r7
    3d20:	6f 90       	pop	r6
    3d22:	5f 90       	pop	r5
    3d24:	08 95       	ret

00003d26 <vfscanf>:
    3d26:	5f 92       	push	r5
    3d28:	6f 92       	push	r6
    3d2a:	7f 92       	push	r7
    3d2c:	8f 92       	push	r8
    3d2e:	9f 92       	push	r9
    3d30:	af 92       	push	r10
    3d32:	bf 92       	push	r11
    3d34:	cf 92       	push	r12
    3d36:	df 92       	push	r13
    3d38:	ef 92       	push	r14
    3d3a:	ff 92       	push	r15
    3d3c:	0f 93       	push	r16
    3d3e:	1f 93       	push	r17
    3d40:	cf 93       	push	r28
    3d42:	df 93       	push	r29
    3d44:	6c 01       	movw	r12, r24
    3d46:	eb 01       	movw	r28, r22
    3d48:	5a 01       	movw	r10, r20
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	16 82       	std	Z+6, r1	; 0x06
    3d4e:	17 82       	std	Z+7, r1	; 0x07
    3d50:	51 2c       	mov	r5, r1
    3d52:	f6 01       	movw	r30, r12
    3d54:	e3 80       	ldd	r14, Z+3	; 0x03
    3d56:	fe 01       	movw	r30, r28
    3d58:	e3 fc       	sbrc	r14, 3
    3d5a:	85 91       	lpm	r24, Z+
    3d5c:	e3 fe       	sbrs	r14, 3
    3d5e:	81 91       	ld	r24, Z+
    3d60:	18 2f       	mov	r17, r24
    3d62:	ef 01       	movw	r28, r30
    3d64:	88 23       	and	r24, r24
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <vfscanf+0x44>
    3d68:	e0 c0       	rjmp	.+448    	; 0x3f2a <vfscanf+0x204>
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	2e d2       	rcall	.+1116   	; 0x41ca <isspace>
    3d6e:	89 2b       	or	r24, r25
    3d70:	19 f0       	breq	.+6      	; 0x3d78 <vfscanf+0x52>
    3d72:	c6 01       	movw	r24, r12
    3d74:	5f de       	rcall	.-834    	; 0x3a34 <skip_spaces>
    3d76:	ed cf       	rjmp	.-38     	; 0x3d52 <vfscanf+0x2c>
    3d78:	15 32       	cpi	r17, 0x25	; 37
    3d7a:	41 f4       	brne	.+16     	; 0x3d8c <vfscanf+0x66>
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e3 fc       	sbrc	r14, 3
    3d80:	15 91       	lpm	r17, Z+
    3d82:	e3 fe       	sbrs	r14, 3
    3d84:	11 91       	ld	r17, Z+
    3d86:	ef 01       	movw	r28, r30
    3d88:	15 32       	cpi	r17, 0x25	; 37
    3d8a:	71 f4       	brne	.+28     	; 0x3da8 <vfscanf+0x82>
    3d8c:	c6 01       	movw	r24, r12
    3d8e:	4d d2       	rcall	.+1178   	; 0x422a <fgetc>
    3d90:	97 fd       	sbrc	r25, 7
    3d92:	c9 c0       	rjmp	.+402    	; 0x3f26 <vfscanf+0x200>
    3d94:	41 2f       	mov	r20, r17
    3d96:	50 e0       	ldi	r21, 0x00	; 0
    3d98:	9c 01       	movw	r18, r24
    3d9a:	33 27       	eor	r19, r19
    3d9c:	24 17       	cp	r18, r20
    3d9e:	35 07       	cpc	r19, r21
    3da0:	c1 f2       	breq	.-80     	; 0x3d52 <vfscanf+0x2c>
    3da2:	b6 01       	movw	r22, r12
    3da4:	bc d2       	rcall	.+1400   	; 0x431e <ungetc>
    3da6:	c1 c0       	rjmp	.+386    	; 0x3f2a <vfscanf+0x204>
    3da8:	1a 32       	cpi	r17, 0x2A	; 42
    3daa:	39 f4       	brne	.+14     	; 0x3dba <vfscanf+0x94>
    3dac:	e3 fc       	sbrc	r14, 3
    3dae:	15 91       	lpm	r17, Z+
    3db0:	e3 fe       	sbrs	r14, 3
    3db2:	11 91       	ld	r17, Z+
    3db4:	ef 01       	movw	r28, r30
    3db6:	01 e0       	ldi	r16, 0x01	; 1
    3db8:	01 c0       	rjmp	.+2      	; 0x3dbc <vfscanf+0x96>
    3dba:	00 e0       	ldi	r16, 0x00	; 0
    3dbc:	f1 2c       	mov	r15, r1
    3dbe:	20 ed       	ldi	r18, 0xD0	; 208
    3dc0:	21 0f       	add	r18, r17
    3dc2:	2a 30       	cpi	r18, 0x0A	; 10
    3dc4:	78 f4       	brcc	.+30     	; 0x3de4 <vfscanf+0xbe>
    3dc6:	02 60       	ori	r16, 0x02	; 2
    3dc8:	6f 2d       	mov	r22, r15
    3dca:	70 e0       	ldi	r23, 0x00	; 0
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	40 e2       	ldi	r20, 0x20	; 32
    3dd2:	09 de       	rcall	.-1006   	; 0x39e6 <mulacc>
    3dd4:	f6 2e       	mov	r15, r22
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	e3 fc       	sbrc	r14, 3
    3dda:	15 91       	lpm	r17, Z+
    3ddc:	e3 fe       	sbrs	r14, 3
    3dde:	11 91       	ld	r17, Z+
    3de0:	ef 01       	movw	r28, r30
    3de2:	ed cf       	rjmp	.-38     	; 0x3dbe <vfscanf+0x98>
    3de4:	01 ff       	sbrs	r16, 1
    3de6:	03 c0       	rjmp	.+6      	; 0x3dee <vfscanf+0xc8>
    3de8:	f1 10       	cpse	r15, r1
    3dea:	03 c0       	rjmp	.+6      	; 0x3df2 <vfscanf+0xcc>
    3dec:	9e c0       	rjmp	.+316    	; 0x3f2a <vfscanf+0x204>
    3dee:	ff 24       	eor	r15, r15
    3df0:	fa 94       	dec	r15
    3df2:	18 36       	cpi	r17, 0x68	; 104
    3df4:	19 f0       	breq	.+6      	; 0x3dfc <vfscanf+0xd6>
    3df6:	1c 36       	cpi	r17, 0x6C	; 108
    3df8:	51 f0       	breq	.+20     	; 0x3e0e <vfscanf+0xe8>
    3dfa:	10 c0       	rjmp	.+32     	; 0x3e1c <vfscanf+0xf6>
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	e3 fc       	sbrc	r14, 3
    3e00:	15 91       	lpm	r17, Z+
    3e02:	e3 fe       	sbrs	r14, 3
    3e04:	11 91       	ld	r17, Z+
    3e06:	ef 01       	movw	r28, r30
    3e08:	18 36       	cpi	r17, 0x68	; 104
    3e0a:	41 f4       	brne	.+16     	; 0x3e1c <vfscanf+0xf6>
    3e0c:	08 60       	ori	r16, 0x08	; 8
    3e0e:	04 60       	ori	r16, 0x04	; 4
    3e10:	fe 01       	movw	r30, r28
    3e12:	e3 fc       	sbrc	r14, 3
    3e14:	15 91       	lpm	r17, Z+
    3e16:	e3 fe       	sbrs	r14, 3
    3e18:	11 91       	ld	r17, Z+
    3e1a:	ef 01       	movw	r28, r30
    3e1c:	11 23       	and	r17, r17
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <vfscanf+0xfc>
    3e20:	84 c0       	rjmp	.+264    	; 0x3f2a <vfscanf+0x204>
    3e22:	61 2f       	mov	r22, r17
    3e24:	70 e0       	ldi	r23, 0x00	; 0
    3e26:	8e e7       	ldi	r24, 0x7E	; 126
    3e28:	92 e0       	ldi	r25, 0x02	; 2
    3e2a:	d7 d1       	rcall	.+942    	; 0x41da <strchr_P>
    3e2c:	89 2b       	or	r24, r25
    3e2e:	09 f4       	brne	.+2      	; 0x3e32 <vfscanf+0x10c>
    3e30:	7c c0       	rjmp	.+248    	; 0x3f2a <vfscanf+0x204>
    3e32:	00 fd       	sbrc	r16, 0
    3e34:	07 c0       	rjmp	.+14     	; 0x3e44 <vfscanf+0x11e>
    3e36:	f5 01       	movw	r30, r10
    3e38:	80 80       	ld	r8, Z
    3e3a:	91 80       	ldd	r9, Z+1	; 0x01
    3e3c:	c5 01       	movw	r24, r10
    3e3e:	02 96       	adiw	r24, 0x02	; 2
    3e40:	5c 01       	movw	r10, r24
    3e42:	02 c0       	rjmp	.+4      	; 0x3e48 <vfscanf+0x122>
    3e44:	81 2c       	mov	r8, r1
    3e46:	91 2c       	mov	r9, r1
    3e48:	1e 36       	cpi	r17, 0x6E	; 110
    3e4a:	49 f4       	brne	.+18     	; 0x3e5e <vfscanf+0x138>
    3e4c:	f6 01       	movw	r30, r12
    3e4e:	46 81       	ldd	r20, Z+6	; 0x06
    3e50:	57 81       	ldd	r21, Z+7	; 0x07
    3e52:	60 e0       	ldi	r22, 0x00	; 0
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	20 2f       	mov	r18, r16
    3e58:	c4 01       	movw	r24, r8
    3e5a:	b9 dd       	rcall	.-1166   	; 0x39ce <putval>
    3e5c:	7a cf       	rjmp	.-268    	; 0x3d52 <vfscanf+0x2c>
    3e5e:	13 36       	cpi	r17, 0x63	; 99
    3e60:	a1 f4       	brne	.+40     	; 0x3e8a <vfscanf+0x164>
    3e62:	01 fd       	sbrc	r16, 1
    3e64:	02 c0       	rjmp	.+4      	; 0x3e6a <vfscanf+0x144>
    3e66:	ff 24       	eor	r15, r15
    3e68:	f3 94       	inc	r15
    3e6a:	c6 01       	movw	r24, r12
    3e6c:	de d1       	rcall	.+956    	; 0x422a <fgetc>
    3e6e:	97 fd       	sbrc	r25, 7
    3e70:	5a c0       	rjmp	.+180    	; 0x3f26 <vfscanf+0x200>
    3e72:	81 14       	cp	r8, r1
    3e74:	91 04       	cpc	r9, r1
    3e76:	29 f0       	breq	.+10     	; 0x3e82 <vfscanf+0x15c>
    3e78:	f4 01       	movw	r30, r8
    3e7a:	80 83       	st	Z, r24
    3e7c:	c4 01       	movw	r24, r8
    3e7e:	01 96       	adiw	r24, 0x01	; 1
    3e80:	4c 01       	movw	r8, r24
    3e82:	fa 94       	dec	r15
    3e84:	f1 10       	cpse	r15, r1
    3e86:	f1 cf       	rjmp	.-30     	; 0x3e6a <vfscanf+0x144>
    3e88:	4a c0       	rjmp	.+148    	; 0x3f1e <vfscanf+0x1f8>
    3e8a:	1b 35       	cpi	r17, 0x5B	; 91
    3e8c:	51 f4       	brne	.+20     	; 0x3ea2 <vfscanf+0x17c>
    3e8e:	9e 01       	movw	r18, r28
    3e90:	a4 01       	movw	r20, r8
    3e92:	6f 2d       	mov	r22, r15
    3e94:	c6 01       	movw	r24, r12
    3e96:	6e de       	rcall	.-804    	; 0x3b74 <conv_brk>
    3e98:	ec 01       	movw	r28, r24
    3e9a:	89 2b       	or	r24, r25
    3e9c:	09 f0       	breq	.+2      	; 0x3ea0 <vfscanf+0x17a>
    3e9e:	3f c0       	rjmp	.+126    	; 0x3f1e <vfscanf+0x1f8>
    3ea0:	39 c0       	rjmp	.+114    	; 0x3f14 <vfscanf+0x1ee>
    3ea2:	c6 01       	movw	r24, r12
    3ea4:	c7 dd       	rcall	.-1138   	; 0x3a34 <skip_spaces>
    3ea6:	97 fd       	sbrc	r25, 7
    3ea8:	3e c0       	rjmp	.+124    	; 0x3f26 <vfscanf+0x200>
    3eaa:	1f 36       	cpi	r17, 0x6F	; 111
    3eac:	49 f1       	breq	.+82     	; 0x3f00 <vfscanf+0x1da>
    3eae:	28 f4       	brcc	.+10     	; 0x3eba <vfscanf+0x194>
    3eb0:	14 36       	cpi	r17, 0x64	; 100
    3eb2:	21 f1       	breq	.+72     	; 0x3efc <vfscanf+0x1d6>
    3eb4:	19 36       	cpi	r17, 0x69	; 105
    3eb6:	39 f1       	breq	.+78     	; 0x3f06 <vfscanf+0x1e0>
    3eb8:	25 c0       	rjmp	.+74     	; 0x3f04 <vfscanf+0x1de>
    3eba:	13 37       	cpi	r17, 0x73	; 115
    3ebc:	71 f0       	breq	.+28     	; 0x3eda <vfscanf+0x1b4>
    3ebe:	15 37       	cpi	r17, 0x75	; 117
    3ec0:	e9 f0       	breq	.+58     	; 0x3efc <vfscanf+0x1d6>
    3ec2:	20 c0       	rjmp	.+64     	; 0x3f04 <vfscanf+0x1de>
    3ec4:	81 14       	cp	r8, r1
    3ec6:	91 04       	cpc	r9, r1
    3ec8:	29 f0       	breq	.+10     	; 0x3ed4 <vfscanf+0x1ae>
    3eca:	f4 01       	movw	r30, r8
    3ecc:	60 82       	st	Z, r6
    3ece:	c4 01       	movw	r24, r8
    3ed0:	01 96       	adiw	r24, 0x01	; 1
    3ed2:	4c 01       	movw	r8, r24
    3ed4:	fa 94       	dec	r15
    3ed6:	ff 20       	and	r15, r15
    3ed8:	59 f0       	breq	.+22     	; 0x3ef0 <vfscanf+0x1ca>
    3eda:	c6 01       	movw	r24, r12
    3edc:	a6 d1       	rcall	.+844    	; 0x422a <fgetc>
    3ede:	3c 01       	movw	r6, r24
    3ee0:	97 fd       	sbrc	r25, 7
    3ee2:	06 c0       	rjmp	.+12     	; 0x3ef0 <vfscanf+0x1ca>
    3ee4:	72 d1       	rcall	.+740    	; 0x41ca <isspace>
    3ee6:	89 2b       	or	r24, r25
    3ee8:	69 f3       	breq	.-38     	; 0x3ec4 <vfscanf+0x19e>
    3eea:	b6 01       	movw	r22, r12
    3eec:	c3 01       	movw	r24, r6
    3eee:	17 d2       	rcall	.+1070   	; 0x431e <ungetc>
    3ef0:	81 14       	cp	r8, r1
    3ef2:	91 04       	cpc	r9, r1
    3ef4:	a1 f0       	breq	.+40     	; 0x3f1e <vfscanf+0x1f8>
    3ef6:	f4 01       	movw	r30, r8
    3ef8:	10 82       	st	Z, r1
    3efa:	11 c0       	rjmp	.+34     	; 0x3f1e <vfscanf+0x1f8>
    3efc:	00 62       	ori	r16, 0x20	; 32
    3efe:	03 c0       	rjmp	.+6      	; 0x3f06 <vfscanf+0x1e0>
    3f00:	00 61       	ori	r16, 0x10	; 16
    3f02:	01 c0       	rjmp	.+2      	; 0x3f06 <vfscanf+0x1e0>
    3f04:	00 64       	ori	r16, 0x40	; 64
    3f06:	20 2f       	mov	r18, r16
    3f08:	a4 01       	movw	r20, r8
    3f0a:	6f 2d       	mov	r22, r15
    3f0c:	c6 01       	movw	r24, r12
    3f0e:	a8 dd       	rcall	.-1200   	; 0x3a60 <conv_int>
    3f10:	81 11       	cpse	r24, r1
    3f12:	05 c0       	rjmp	.+10     	; 0x3f1e <vfscanf+0x1f8>
    3f14:	f6 01       	movw	r30, r12
    3f16:	83 81       	ldd	r24, Z+3	; 0x03
    3f18:	80 73       	andi	r24, 0x30	; 48
    3f1a:	29 f4       	brne	.+10     	; 0x3f26 <vfscanf+0x200>
    3f1c:	06 c0       	rjmp	.+12     	; 0x3f2a <vfscanf+0x204>
    3f1e:	00 fd       	sbrc	r16, 0
    3f20:	18 cf       	rjmp	.-464    	; 0x3d52 <vfscanf+0x2c>
    3f22:	53 94       	inc	r5
    3f24:	16 cf       	rjmp	.-468    	; 0x3d52 <vfscanf+0x2c>
    3f26:	55 20       	and	r5, r5
    3f28:	19 f0       	breq	.+6      	; 0x3f30 <vfscanf+0x20a>
    3f2a:	85 2d       	mov	r24, r5
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <vfscanf+0x20e>
    3f30:	8f ef       	ldi	r24, 0xFF	; 255
    3f32:	9f ef       	ldi	r25, 0xFF	; 255
    3f34:	df 91       	pop	r29
    3f36:	cf 91       	pop	r28
    3f38:	1f 91       	pop	r17
    3f3a:	0f 91       	pop	r16
    3f3c:	ff 90       	pop	r15
    3f3e:	ef 90       	pop	r14
    3f40:	df 90       	pop	r13
    3f42:	cf 90       	pop	r12
    3f44:	bf 90       	pop	r11
    3f46:	af 90       	pop	r10
    3f48:	9f 90       	pop	r9
    3f4a:	8f 90       	pop	r8
    3f4c:	7f 90       	pop	r7
    3f4e:	6f 90       	pop	r6
    3f50:	5f 90       	pop	r5
    3f52:	08 95       	ret

00003f54 <calloc>:
    3f54:	0f 93       	push	r16
    3f56:	1f 93       	push	r17
    3f58:	cf 93       	push	r28
    3f5a:	df 93       	push	r29
    3f5c:	86 9f       	mul	r24, r22
    3f5e:	80 01       	movw	r16, r0
    3f60:	87 9f       	mul	r24, r23
    3f62:	10 0d       	add	r17, r0
    3f64:	96 9f       	mul	r25, r22
    3f66:	10 0d       	add	r17, r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	c8 01       	movw	r24, r16
    3f6c:	0d d0       	rcall	.+26     	; 0x3f88 <malloc>
    3f6e:	ec 01       	movw	r28, r24
    3f70:	00 97       	sbiw	r24, 0x00	; 0
    3f72:	21 f0       	breq	.+8      	; 0x3f7c <calloc+0x28>
    3f74:	a8 01       	movw	r20, r16
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	70 e0       	ldi	r23, 0x00	; 0
    3f7a:	45 d1       	rcall	.+650    	; 0x4206 <memset>
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	df 91       	pop	r29
    3f80:	cf 91       	pop	r28
    3f82:	1f 91       	pop	r17
    3f84:	0f 91       	pop	r16
    3f86:	08 95       	ret

00003f88 <malloc>:
    3f88:	0f 93       	push	r16
    3f8a:	1f 93       	push	r17
    3f8c:	cf 93       	push	r28
    3f8e:	df 93       	push	r29
    3f90:	82 30       	cpi	r24, 0x02	; 2
    3f92:	91 05       	cpc	r25, r1
    3f94:	10 f4       	brcc	.+4      	; 0x3f9a <malloc+0x12>
    3f96:	82 e0       	ldi	r24, 0x02	; 2
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	e0 91 7a 21 	lds	r30, 0x217A	; 0x80217a <__flp>
    3f9e:	f0 91 7b 21 	lds	r31, 0x217B	; 0x80217b <__flp+0x1>
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	a0 e0       	ldi	r26, 0x00	; 0
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	30 97       	sbiw	r30, 0x00	; 0
    3fac:	19 f1       	breq	.+70     	; 0x3ff4 <malloc+0x6c>
    3fae:	40 81       	ld	r20, Z
    3fb0:	51 81       	ldd	r21, Z+1	; 0x01
    3fb2:	02 81       	ldd	r16, Z+2	; 0x02
    3fb4:	13 81       	ldd	r17, Z+3	; 0x03
    3fb6:	48 17       	cp	r20, r24
    3fb8:	59 07       	cpc	r21, r25
    3fba:	c8 f0       	brcs	.+50     	; 0x3fee <malloc+0x66>
    3fbc:	84 17       	cp	r24, r20
    3fbe:	95 07       	cpc	r25, r21
    3fc0:	69 f4       	brne	.+26     	; 0x3fdc <malloc+0x54>
    3fc2:	10 97       	sbiw	r26, 0x00	; 0
    3fc4:	31 f0       	breq	.+12     	; 0x3fd2 <malloc+0x4a>
    3fc6:	12 96       	adiw	r26, 0x02	; 2
    3fc8:	0c 93       	st	X, r16
    3fca:	12 97       	sbiw	r26, 0x02	; 2
    3fcc:	13 96       	adiw	r26, 0x03	; 3
    3fce:	1c 93       	st	X, r17
    3fd0:	27 c0       	rjmp	.+78     	; 0x4020 <__stack+0x21>
    3fd2:	00 93 7a 21 	sts	0x217A, r16	; 0x80217a <__flp>
    3fd6:	10 93 7b 21 	sts	0x217B, r17	; 0x80217b <__flp+0x1>
    3fda:	22 c0       	rjmp	.+68     	; 0x4020 <__stack+0x21>
    3fdc:	21 15       	cp	r18, r1
    3fde:	31 05       	cpc	r19, r1
    3fe0:	19 f0       	breq	.+6      	; 0x3fe8 <malloc+0x60>
    3fe2:	42 17       	cp	r20, r18
    3fe4:	53 07       	cpc	r21, r19
    3fe6:	18 f4       	brcc	.+6      	; 0x3fee <malloc+0x66>
    3fe8:	9a 01       	movw	r18, r20
    3fea:	bd 01       	movw	r22, r26
    3fec:	ef 01       	movw	r28, r30
    3fee:	df 01       	movw	r26, r30
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	db cf       	rjmp	.-74     	; 0x3faa <malloc+0x22>
    3ff4:	21 15       	cp	r18, r1
    3ff6:	31 05       	cpc	r19, r1
    3ff8:	f9 f0       	breq	.+62     	; 0x4038 <__stack+0x39>
    3ffa:	28 1b       	sub	r18, r24
    3ffc:	39 0b       	sbc	r19, r25
    3ffe:	24 30       	cpi	r18, 0x04	; 4
    4000:	31 05       	cpc	r19, r1
    4002:	80 f4       	brcc	.+32     	; 0x4024 <__stack+0x25>
    4004:	8a 81       	ldd	r24, Y+2	; 0x02
    4006:	9b 81       	ldd	r25, Y+3	; 0x03
    4008:	61 15       	cp	r22, r1
    400a:	71 05       	cpc	r23, r1
    400c:	21 f0       	breq	.+8      	; 0x4016 <__stack+0x17>
    400e:	fb 01       	movw	r30, r22
    4010:	82 83       	std	Z+2, r24	; 0x02
    4012:	93 83       	std	Z+3, r25	; 0x03
    4014:	04 c0       	rjmp	.+8      	; 0x401e <__stack+0x1f>
    4016:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <__flp>
    401a:	90 93 7b 21 	sts	0x217B, r25	; 0x80217b <__flp+0x1>
    401e:	fe 01       	movw	r30, r28
    4020:	32 96       	adiw	r30, 0x02	; 2
    4022:	44 c0       	rjmp	.+136    	; 0x40ac <__stack+0xad>
    4024:	fe 01       	movw	r30, r28
    4026:	e2 0f       	add	r30, r18
    4028:	f3 1f       	adc	r31, r19
    402a:	81 93       	st	Z+, r24
    402c:	91 93       	st	Z+, r25
    402e:	22 50       	subi	r18, 0x02	; 2
    4030:	31 09       	sbc	r19, r1
    4032:	28 83       	st	Y, r18
    4034:	39 83       	std	Y+1, r19	; 0x01
    4036:	3a c0       	rjmp	.+116    	; 0x40ac <__stack+0xad>
    4038:	20 91 78 21 	lds	r18, 0x2178	; 0x802178 <__brkval>
    403c:	30 91 79 21 	lds	r19, 0x2179	; 0x802179 <__brkval+0x1>
    4040:	23 2b       	or	r18, r19
    4042:	41 f4       	brne	.+16     	; 0x4054 <__stack+0x55>
    4044:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4048:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    404c:	20 93 78 21 	sts	0x2178, r18	; 0x802178 <__brkval>
    4050:	30 93 79 21 	sts	0x2179, r19	; 0x802179 <__brkval+0x1>
    4054:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4058:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    405c:	21 15       	cp	r18, r1
    405e:	31 05       	cpc	r19, r1
    4060:	41 f4       	brne	.+16     	; 0x4072 <__stack+0x73>
    4062:	2d b7       	in	r18, 0x3d	; 61
    4064:	3e b7       	in	r19, 0x3e	; 62
    4066:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    406a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    406e:	24 1b       	sub	r18, r20
    4070:	35 0b       	sbc	r19, r21
    4072:	e0 91 78 21 	lds	r30, 0x2178	; 0x802178 <__brkval>
    4076:	f0 91 79 21 	lds	r31, 0x2179	; 0x802179 <__brkval+0x1>
    407a:	e2 17       	cp	r30, r18
    407c:	f3 07       	cpc	r31, r19
    407e:	a0 f4       	brcc	.+40     	; 0x40a8 <__stack+0xa9>
    4080:	2e 1b       	sub	r18, r30
    4082:	3f 0b       	sbc	r19, r31
    4084:	28 17       	cp	r18, r24
    4086:	39 07       	cpc	r19, r25
    4088:	78 f0       	brcs	.+30     	; 0x40a8 <__stack+0xa9>
    408a:	ac 01       	movw	r20, r24
    408c:	4e 5f       	subi	r20, 0xFE	; 254
    408e:	5f 4f       	sbci	r21, 0xFF	; 255
    4090:	24 17       	cp	r18, r20
    4092:	35 07       	cpc	r19, r21
    4094:	48 f0       	brcs	.+18     	; 0x40a8 <__stack+0xa9>
    4096:	4e 0f       	add	r20, r30
    4098:	5f 1f       	adc	r21, r31
    409a:	40 93 78 21 	sts	0x2178, r20	; 0x802178 <__brkval>
    409e:	50 93 79 21 	sts	0x2179, r21	; 0x802179 <__brkval+0x1>
    40a2:	81 93       	st	Z+, r24
    40a4:	91 93       	st	Z+, r25
    40a6:	02 c0       	rjmp	.+4      	; 0x40ac <__stack+0xad>
    40a8:	e0 e0       	ldi	r30, 0x00	; 0
    40aa:	f0 e0       	ldi	r31, 0x00	; 0
    40ac:	cf 01       	movw	r24, r30
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	1f 91       	pop	r17
    40b4:	0f 91       	pop	r16
    40b6:	08 95       	ret

000040b8 <free>:
    40b8:	cf 93       	push	r28
    40ba:	df 93       	push	r29
    40bc:	00 97       	sbiw	r24, 0x00	; 0
    40be:	09 f4       	brne	.+2      	; 0x40c2 <free+0xa>
    40c0:	81 c0       	rjmp	.+258    	; 0x41c4 <free+0x10c>
    40c2:	fc 01       	movw	r30, r24
    40c4:	32 97       	sbiw	r30, 0x02	; 2
    40c6:	12 82       	std	Z+2, r1	; 0x02
    40c8:	13 82       	std	Z+3, r1	; 0x03
    40ca:	a0 91 7a 21 	lds	r26, 0x217A	; 0x80217a <__flp>
    40ce:	b0 91 7b 21 	lds	r27, 0x217B	; 0x80217b <__flp+0x1>
    40d2:	10 97       	sbiw	r26, 0x00	; 0
    40d4:	81 f4       	brne	.+32     	; 0x40f6 <free+0x3e>
    40d6:	20 81       	ld	r18, Z
    40d8:	31 81       	ldd	r19, Z+1	; 0x01
    40da:	82 0f       	add	r24, r18
    40dc:	93 1f       	adc	r25, r19
    40de:	20 91 78 21 	lds	r18, 0x2178	; 0x802178 <__brkval>
    40e2:	30 91 79 21 	lds	r19, 0x2179	; 0x802179 <__brkval+0x1>
    40e6:	28 17       	cp	r18, r24
    40e8:	39 07       	cpc	r19, r25
    40ea:	51 f5       	brne	.+84     	; 0x4140 <free+0x88>
    40ec:	e0 93 78 21 	sts	0x2178, r30	; 0x802178 <__brkval>
    40f0:	f0 93 79 21 	sts	0x2179, r31	; 0x802179 <__brkval+0x1>
    40f4:	67 c0       	rjmp	.+206    	; 0x41c4 <free+0x10c>
    40f6:	ed 01       	movw	r28, r26
    40f8:	20 e0       	ldi	r18, 0x00	; 0
    40fa:	30 e0       	ldi	r19, 0x00	; 0
    40fc:	ce 17       	cp	r28, r30
    40fe:	df 07       	cpc	r29, r31
    4100:	40 f4       	brcc	.+16     	; 0x4112 <free+0x5a>
    4102:	4a 81       	ldd	r20, Y+2	; 0x02
    4104:	5b 81       	ldd	r21, Y+3	; 0x03
    4106:	9e 01       	movw	r18, r28
    4108:	41 15       	cp	r20, r1
    410a:	51 05       	cpc	r21, r1
    410c:	f1 f0       	breq	.+60     	; 0x414a <free+0x92>
    410e:	ea 01       	movw	r28, r20
    4110:	f5 cf       	rjmp	.-22     	; 0x40fc <free+0x44>
    4112:	c2 83       	std	Z+2, r28	; 0x02
    4114:	d3 83       	std	Z+3, r29	; 0x03
    4116:	40 81       	ld	r20, Z
    4118:	51 81       	ldd	r21, Z+1	; 0x01
    411a:	84 0f       	add	r24, r20
    411c:	95 1f       	adc	r25, r21
    411e:	c8 17       	cp	r28, r24
    4120:	d9 07       	cpc	r29, r25
    4122:	59 f4       	brne	.+22     	; 0x413a <free+0x82>
    4124:	88 81       	ld	r24, Y
    4126:	99 81       	ldd	r25, Y+1	; 0x01
    4128:	84 0f       	add	r24, r20
    412a:	95 1f       	adc	r25, r21
    412c:	02 96       	adiw	r24, 0x02	; 2
    412e:	80 83       	st	Z, r24
    4130:	91 83       	std	Z+1, r25	; 0x01
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	9b 81       	ldd	r25, Y+3	; 0x03
    4136:	82 83       	std	Z+2, r24	; 0x02
    4138:	93 83       	std	Z+3, r25	; 0x03
    413a:	21 15       	cp	r18, r1
    413c:	31 05       	cpc	r19, r1
    413e:	29 f4       	brne	.+10     	; 0x414a <free+0x92>
    4140:	e0 93 7a 21 	sts	0x217A, r30	; 0x80217a <__flp>
    4144:	f0 93 7b 21 	sts	0x217B, r31	; 0x80217b <__flp+0x1>
    4148:	3d c0       	rjmp	.+122    	; 0x41c4 <free+0x10c>
    414a:	e9 01       	movw	r28, r18
    414c:	ea 83       	std	Y+2, r30	; 0x02
    414e:	fb 83       	std	Y+3, r31	; 0x03
    4150:	49 91       	ld	r20, Y+
    4152:	59 91       	ld	r21, Y+
    4154:	c4 0f       	add	r28, r20
    4156:	d5 1f       	adc	r29, r21
    4158:	ec 17       	cp	r30, r28
    415a:	fd 07       	cpc	r31, r29
    415c:	61 f4       	brne	.+24     	; 0x4176 <free+0xbe>
    415e:	80 81       	ld	r24, Z
    4160:	91 81       	ldd	r25, Z+1	; 0x01
    4162:	84 0f       	add	r24, r20
    4164:	95 1f       	adc	r25, r21
    4166:	02 96       	adiw	r24, 0x02	; 2
    4168:	e9 01       	movw	r28, r18
    416a:	88 83       	st	Y, r24
    416c:	99 83       	std	Y+1, r25	; 0x01
    416e:	82 81       	ldd	r24, Z+2	; 0x02
    4170:	93 81       	ldd	r25, Z+3	; 0x03
    4172:	8a 83       	std	Y+2, r24	; 0x02
    4174:	9b 83       	std	Y+3, r25	; 0x03
    4176:	e0 e0       	ldi	r30, 0x00	; 0
    4178:	f0 e0       	ldi	r31, 0x00	; 0
    417a:	12 96       	adiw	r26, 0x02	; 2
    417c:	8d 91       	ld	r24, X+
    417e:	9c 91       	ld	r25, X
    4180:	13 97       	sbiw	r26, 0x03	; 3
    4182:	00 97       	sbiw	r24, 0x00	; 0
    4184:	19 f0       	breq	.+6      	; 0x418c <free+0xd4>
    4186:	fd 01       	movw	r30, r26
    4188:	dc 01       	movw	r26, r24
    418a:	f7 cf       	rjmp	.-18     	; 0x417a <free+0xc2>
    418c:	8d 91       	ld	r24, X+
    418e:	9c 91       	ld	r25, X
    4190:	11 97       	sbiw	r26, 0x01	; 1
    4192:	9d 01       	movw	r18, r26
    4194:	2e 5f       	subi	r18, 0xFE	; 254
    4196:	3f 4f       	sbci	r19, 0xFF	; 255
    4198:	82 0f       	add	r24, r18
    419a:	93 1f       	adc	r25, r19
    419c:	20 91 78 21 	lds	r18, 0x2178	; 0x802178 <__brkval>
    41a0:	30 91 79 21 	lds	r19, 0x2179	; 0x802179 <__brkval+0x1>
    41a4:	28 17       	cp	r18, r24
    41a6:	39 07       	cpc	r19, r25
    41a8:	69 f4       	brne	.+26     	; 0x41c4 <free+0x10c>
    41aa:	30 97       	sbiw	r30, 0x00	; 0
    41ac:	29 f4       	brne	.+10     	; 0x41b8 <free+0x100>
    41ae:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <__flp>
    41b2:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <__flp+0x1>
    41b6:	02 c0       	rjmp	.+4      	; 0x41bc <free+0x104>
    41b8:	12 82       	std	Z+2, r1	; 0x02
    41ba:	13 82       	std	Z+3, r1	; 0x03
    41bc:	a0 93 78 21 	sts	0x2178, r26	; 0x802178 <__brkval>
    41c0:	b0 93 79 21 	sts	0x2179, r27	; 0x802179 <__brkval+0x1>
    41c4:	df 91       	pop	r29
    41c6:	cf 91       	pop	r28
    41c8:	08 95       	ret

000041ca <isspace>:
    41ca:	91 11       	cpse	r25, r1
    41cc:	1f c1       	rjmp	.+574    	; 0x440c <__ctype_isfalse>
    41ce:	80 32       	cpi	r24, 0x20	; 32
    41d0:	19 f0       	breq	.+6      	; 0x41d8 <isspace+0xe>
    41d2:	89 50       	subi	r24, 0x09	; 9
    41d4:	85 50       	subi	r24, 0x05	; 5
    41d6:	d0 f7       	brcc	.-12     	; 0x41cc <isspace+0x2>
    41d8:	08 95       	ret

000041da <strchr_P>:
    41da:	fc 01       	movw	r30, r24
    41dc:	05 90       	lpm	r0, Z+
    41de:	06 16       	cp	r0, r22
    41e0:	21 f0       	breq	.+8      	; 0x41ea <strchr_P+0x10>
    41e2:	00 20       	and	r0, r0
    41e4:	d9 f7       	brne	.-10     	; 0x41dc <strchr_P+0x2>
    41e6:	c0 01       	movw	r24, r0
    41e8:	08 95       	ret
    41ea:	31 97       	sbiw	r30, 0x01	; 1
    41ec:	cf 01       	movw	r24, r30
    41ee:	08 95       	ret

000041f0 <strnlen_P>:
    41f0:	fc 01       	movw	r30, r24
    41f2:	05 90       	lpm	r0, Z+
    41f4:	61 50       	subi	r22, 0x01	; 1
    41f6:	70 40       	sbci	r23, 0x00	; 0
    41f8:	01 10       	cpse	r0, r1
    41fa:	d8 f7       	brcc	.-10     	; 0x41f2 <strnlen_P+0x2>
    41fc:	80 95       	com	r24
    41fe:	90 95       	com	r25
    4200:	8e 0f       	add	r24, r30
    4202:	9f 1f       	adc	r25, r31
    4204:	08 95       	ret

00004206 <memset>:
    4206:	dc 01       	movw	r26, r24
    4208:	01 c0       	rjmp	.+2      	; 0x420c <memset+0x6>
    420a:	6d 93       	st	X+, r22
    420c:	41 50       	subi	r20, 0x01	; 1
    420e:	50 40       	sbci	r21, 0x00	; 0
    4210:	e0 f7       	brcc	.-8      	; 0x420a <memset+0x4>
    4212:	08 95       	ret

00004214 <strnlen>:
    4214:	fc 01       	movw	r30, r24
    4216:	61 50       	subi	r22, 0x01	; 1
    4218:	70 40       	sbci	r23, 0x00	; 0
    421a:	01 90       	ld	r0, Z+
    421c:	01 10       	cpse	r0, r1
    421e:	d8 f7       	brcc	.-10     	; 0x4216 <strnlen+0x2>
    4220:	80 95       	com	r24
    4222:	90 95       	com	r25
    4224:	8e 0f       	add	r24, r30
    4226:	9f 1f       	adc	r25, r31
    4228:	08 95       	ret

0000422a <fgetc>:
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	ec 01       	movw	r28, r24
    4230:	2b 81       	ldd	r18, Y+3	; 0x03
    4232:	20 ff       	sbrs	r18, 0
    4234:	33 c0       	rjmp	.+102    	; 0x429c <fgetc+0x72>
    4236:	26 ff       	sbrs	r18, 6
    4238:	0a c0       	rjmp	.+20     	; 0x424e <fgetc+0x24>
    423a:	2f 7b       	andi	r18, 0xBF	; 191
    423c:	2b 83       	std	Y+3, r18	; 0x03
    423e:	8e 81       	ldd	r24, Y+6	; 0x06
    4240:	9f 81       	ldd	r25, Y+7	; 0x07
    4242:	01 96       	adiw	r24, 0x01	; 1
    4244:	8e 83       	std	Y+6, r24	; 0x06
    4246:	9f 83       	std	Y+7, r25	; 0x07
    4248:	8a 81       	ldd	r24, Y+2	; 0x02
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	29 c0       	rjmp	.+82     	; 0x42a0 <fgetc+0x76>
    424e:	22 ff       	sbrs	r18, 2
    4250:	0f c0       	rjmp	.+30     	; 0x4270 <fgetc+0x46>
    4252:	e8 81       	ld	r30, Y
    4254:	f9 81       	ldd	r31, Y+1	; 0x01
    4256:	80 81       	ld	r24, Z
    4258:	08 2e       	mov	r0, r24
    425a:	00 0c       	add	r0, r0
    425c:	99 0b       	sbc	r25, r25
    425e:	00 97       	sbiw	r24, 0x00	; 0
    4260:	19 f4       	brne	.+6      	; 0x4268 <fgetc+0x3e>
    4262:	20 62       	ori	r18, 0x20	; 32
    4264:	2b 83       	std	Y+3, r18	; 0x03
    4266:	1a c0       	rjmp	.+52     	; 0x429c <fgetc+0x72>
    4268:	31 96       	adiw	r30, 0x01	; 1
    426a:	e8 83       	st	Y, r30
    426c:	f9 83       	std	Y+1, r31	; 0x01
    426e:	0e c0       	rjmp	.+28     	; 0x428c <fgetc+0x62>
    4270:	ea 85       	ldd	r30, Y+10	; 0x0a
    4272:	fb 85       	ldd	r31, Y+11	; 0x0b
    4274:	19 95       	eicall
    4276:	97 ff       	sbrs	r25, 7
    4278:	09 c0       	rjmp	.+18     	; 0x428c <fgetc+0x62>
    427a:	2b 81       	ldd	r18, Y+3	; 0x03
    427c:	01 96       	adiw	r24, 0x01	; 1
    427e:	11 f0       	breq	.+4      	; 0x4284 <fgetc+0x5a>
    4280:	80 e2       	ldi	r24, 0x20	; 32
    4282:	01 c0       	rjmp	.+2      	; 0x4286 <fgetc+0x5c>
    4284:	80 e1       	ldi	r24, 0x10	; 16
    4286:	82 2b       	or	r24, r18
    4288:	8b 83       	std	Y+3, r24	; 0x03
    428a:	08 c0       	rjmp	.+16     	; 0x429c <fgetc+0x72>
    428c:	2e 81       	ldd	r18, Y+6	; 0x06
    428e:	3f 81       	ldd	r19, Y+7	; 0x07
    4290:	2f 5f       	subi	r18, 0xFF	; 255
    4292:	3f 4f       	sbci	r19, 0xFF	; 255
    4294:	2e 83       	std	Y+6, r18	; 0x06
    4296:	3f 83       	std	Y+7, r19	; 0x07
    4298:	99 27       	eor	r25, r25
    429a:	02 c0       	rjmp	.+4      	; 0x42a0 <fgetc+0x76>
    429c:	8f ef       	ldi	r24, 0xFF	; 255
    429e:	9f ef       	ldi	r25, 0xFF	; 255
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	08 95       	ret

000042a6 <fputc>:
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	fb 01       	movw	r30, r22
    42b0:	23 81       	ldd	r18, Z+3	; 0x03
    42b2:	21 fd       	sbrc	r18, 1
    42b4:	03 c0       	rjmp	.+6      	; 0x42bc <fputc+0x16>
    42b6:	8f ef       	ldi	r24, 0xFF	; 255
    42b8:	9f ef       	ldi	r25, 0xFF	; 255
    42ba:	2c c0       	rjmp	.+88     	; 0x4314 <fputc+0x6e>
    42bc:	22 ff       	sbrs	r18, 2
    42be:	16 c0       	rjmp	.+44     	; 0x42ec <fputc+0x46>
    42c0:	46 81       	ldd	r20, Z+6	; 0x06
    42c2:	57 81       	ldd	r21, Z+7	; 0x07
    42c4:	24 81       	ldd	r18, Z+4	; 0x04
    42c6:	35 81       	ldd	r19, Z+5	; 0x05
    42c8:	42 17       	cp	r20, r18
    42ca:	53 07       	cpc	r21, r19
    42cc:	44 f4       	brge	.+16     	; 0x42de <fputc+0x38>
    42ce:	a0 81       	ld	r26, Z
    42d0:	b1 81       	ldd	r27, Z+1	; 0x01
    42d2:	9d 01       	movw	r18, r26
    42d4:	2f 5f       	subi	r18, 0xFF	; 255
    42d6:	3f 4f       	sbci	r19, 0xFF	; 255
    42d8:	20 83       	st	Z, r18
    42da:	31 83       	std	Z+1, r19	; 0x01
    42dc:	8c 93       	st	X, r24
    42de:	26 81       	ldd	r18, Z+6	; 0x06
    42e0:	37 81       	ldd	r19, Z+7	; 0x07
    42e2:	2f 5f       	subi	r18, 0xFF	; 255
    42e4:	3f 4f       	sbci	r19, 0xFF	; 255
    42e6:	26 83       	std	Z+6, r18	; 0x06
    42e8:	37 83       	std	Z+7, r19	; 0x07
    42ea:	14 c0       	rjmp	.+40     	; 0x4314 <fputc+0x6e>
    42ec:	8b 01       	movw	r16, r22
    42ee:	ec 01       	movw	r28, r24
    42f0:	fb 01       	movw	r30, r22
    42f2:	00 84       	ldd	r0, Z+8	; 0x08
    42f4:	f1 85       	ldd	r31, Z+9	; 0x09
    42f6:	e0 2d       	mov	r30, r0
    42f8:	19 95       	eicall
    42fa:	89 2b       	or	r24, r25
    42fc:	e1 f6       	brne	.-72     	; 0x42b6 <fputc+0x10>
    42fe:	d8 01       	movw	r26, r16
    4300:	16 96       	adiw	r26, 0x06	; 6
    4302:	8d 91       	ld	r24, X+
    4304:	9c 91       	ld	r25, X
    4306:	17 97       	sbiw	r26, 0x07	; 7
    4308:	01 96       	adiw	r24, 0x01	; 1
    430a:	16 96       	adiw	r26, 0x06	; 6
    430c:	8d 93       	st	X+, r24
    430e:	9c 93       	st	X, r25
    4310:	17 97       	sbiw	r26, 0x07	; 7
    4312:	ce 01       	movw	r24, r28
    4314:	df 91       	pop	r29
    4316:	cf 91       	pop	r28
    4318:	1f 91       	pop	r17
    431a:	0f 91       	pop	r16
    431c:	08 95       	ret

0000431e <ungetc>:
    431e:	fb 01       	movw	r30, r22
    4320:	23 81       	ldd	r18, Z+3	; 0x03
    4322:	20 ff       	sbrs	r18, 0
    4324:	12 c0       	rjmp	.+36     	; 0x434a <ungetc+0x2c>
    4326:	26 fd       	sbrc	r18, 6
    4328:	10 c0       	rjmp	.+32     	; 0x434a <ungetc+0x2c>
    432a:	8f 3f       	cpi	r24, 0xFF	; 255
    432c:	3f ef       	ldi	r19, 0xFF	; 255
    432e:	93 07       	cpc	r25, r19
    4330:	61 f0       	breq	.+24     	; 0x434a <ungetc+0x2c>
    4332:	82 83       	std	Z+2, r24	; 0x02
    4334:	2f 7d       	andi	r18, 0xDF	; 223
    4336:	20 64       	ori	r18, 0x40	; 64
    4338:	23 83       	std	Z+3, r18	; 0x03
    433a:	26 81       	ldd	r18, Z+6	; 0x06
    433c:	37 81       	ldd	r19, Z+7	; 0x07
    433e:	21 50       	subi	r18, 0x01	; 1
    4340:	31 09       	sbc	r19, r1
    4342:	26 83       	std	Z+6, r18	; 0x06
    4344:	37 83       	std	Z+7, r19	; 0x07
    4346:	99 27       	eor	r25, r25
    4348:	08 95       	ret
    434a:	8f ef       	ldi	r24, 0xFF	; 255
    434c:	9f ef       	ldi	r25, 0xFF	; 255
    434e:	08 95       	ret

00004350 <__ultoa_invert>:
    4350:	fa 01       	movw	r30, r20
    4352:	aa 27       	eor	r26, r26
    4354:	28 30       	cpi	r18, 0x08	; 8
    4356:	51 f1       	breq	.+84     	; 0x43ac <__ultoa_invert+0x5c>
    4358:	20 31       	cpi	r18, 0x10	; 16
    435a:	81 f1       	breq	.+96     	; 0x43bc <__ultoa_invert+0x6c>
    435c:	e8 94       	clt
    435e:	6f 93       	push	r22
    4360:	6e 7f       	andi	r22, 0xFE	; 254
    4362:	6e 5f       	subi	r22, 0xFE	; 254
    4364:	7f 4f       	sbci	r23, 0xFF	; 255
    4366:	8f 4f       	sbci	r24, 0xFF	; 255
    4368:	9f 4f       	sbci	r25, 0xFF	; 255
    436a:	af 4f       	sbci	r26, 0xFF	; 255
    436c:	b1 e0       	ldi	r27, 0x01	; 1
    436e:	3e d0       	rcall	.+124    	; 0x43ec <__ultoa_invert+0x9c>
    4370:	b4 e0       	ldi	r27, 0x04	; 4
    4372:	3c d0       	rcall	.+120    	; 0x43ec <__ultoa_invert+0x9c>
    4374:	67 0f       	add	r22, r23
    4376:	78 1f       	adc	r23, r24
    4378:	89 1f       	adc	r24, r25
    437a:	9a 1f       	adc	r25, r26
    437c:	a1 1d       	adc	r26, r1
    437e:	68 0f       	add	r22, r24
    4380:	79 1f       	adc	r23, r25
    4382:	8a 1f       	adc	r24, r26
    4384:	91 1d       	adc	r25, r1
    4386:	a1 1d       	adc	r26, r1
    4388:	6a 0f       	add	r22, r26
    438a:	71 1d       	adc	r23, r1
    438c:	81 1d       	adc	r24, r1
    438e:	91 1d       	adc	r25, r1
    4390:	a1 1d       	adc	r26, r1
    4392:	20 d0       	rcall	.+64     	; 0x43d4 <__ultoa_invert+0x84>
    4394:	09 f4       	brne	.+2      	; 0x4398 <__ultoa_invert+0x48>
    4396:	68 94       	set
    4398:	3f 91       	pop	r19
    439a:	2a e0       	ldi	r18, 0x0A	; 10
    439c:	26 9f       	mul	r18, r22
    439e:	11 24       	eor	r1, r1
    43a0:	30 19       	sub	r19, r0
    43a2:	30 5d       	subi	r19, 0xD0	; 208
    43a4:	31 93       	st	Z+, r19
    43a6:	de f6       	brtc	.-74     	; 0x435e <__ultoa_invert+0xe>
    43a8:	cf 01       	movw	r24, r30
    43aa:	08 95       	ret
    43ac:	46 2f       	mov	r20, r22
    43ae:	47 70       	andi	r20, 0x07	; 7
    43b0:	40 5d       	subi	r20, 0xD0	; 208
    43b2:	41 93       	st	Z+, r20
    43b4:	b3 e0       	ldi	r27, 0x03	; 3
    43b6:	0f d0       	rcall	.+30     	; 0x43d6 <__ultoa_invert+0x86>
    43b8:	c9 f7       	brne	.-14     	; 0x43ac <__ultoa_invert+0x5c>
    43ba:	f6 cf       	rjmp	.-20     	; 0x43a8 <__ultoa_invert+0x58>
    43bc:	46 2f       	mov	r20, r22
    43be:	4f 70       	andi	r20, 0x0F	; 15
    43c0:	40 5d       	subi	r20, 0xD0	; 208
    43c2:	4a 33       	cpi	r20, 0x3A	; 58
    43c4:	18 f0       	brcs	.+6      	; 0x43cc <__ultoa_invert+0x7c>
    43c6:	49 5d       	subi	r20, 0xD9	; 217
    43c8:	31 fd       	sbrc	r19, 1
    43ca:	40 52       	subi	r20, 0x20	; 32
    43cc:	41 93       	st	Z+, r20
    43ce:	02 d0       	rcall	.+4      	; 0x43d4 <__ultoa_invert+0x84>
    43d0:	a9 f7       	brne	.-22     	; 0x43bc <__ultoa_invert+0x6c>
    43d2:	ea cf       	rjmp	.-44     	; 0x43a8 <__ultoa_invert+0x58>
    43d4:	b4 e0       	ldi	r27, 0x04	; 4
    43d6:	a6 95       	lsr	r26
    43d8:	97 95       	ror	r25
    43da:	87 95       	ror	r24
    43dc:	77 95       	ror	r23
    43de:	67 95       	ror	r22
    43e0:	ba 95       	dec	r27
    43e2:	c9 f7       	brne	.-14     	; 0x43d6 <__ultoa_invert+0x86>
    43e4:	00 97       	sbiw	r24, 0x00	; 0
    43e6:	61 05       	cpc	r22, r1
    43e8:	71 05       	cpc	r23, r1
    43ea:	08 95       	ret
    43ec:	9b 01       	movw	r18, r22
    43ee:	ac 01       	movw	r20, r24
    43f0:	0a 2e       	mov	r0, r26
    43f2:	06 94       	lsr	r0
    43f4:	57 95       	ror	r21
    43f6:	47 95       	ror	r20
    43f8:	37 95       	ror	r19
    43fa:	27 95       	ror	r18
    43fc:	ba 95       	dec	r27
    43fe:	c9 f7       	brne	.-14     	; 0x43f2 <__ultoa_invert+0xa2>
    4400:	62 0f       	add	r22, r18
    4402:	73 1f       	adc	r23, r19
    4404:	84 1f       	adc	r24, r20
    4406:	95 1f       	adc	r25, r21
    4408:	a0 1d       	adc	r26, r0
    440a:	08 95       	ret

0000440c <__ctype_isfalse>:
    440c:	99 27       	eor	r25, r25
    440e:	88 27       	eor	r24, r24

00004410 <__ctype_istrue>:
    4410:	08 95       	ret

00004412 <_exit>:
    4412:	f8 94       	cli

00004414 <__stop_program>:
    4414:	ff cf       	rjmp	.-2      	; 0x4414 <__stop_program>
