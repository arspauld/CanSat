
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000170  00802000  000022d0  00002364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00802170  00802170  000024d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00002548  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011753  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005656  00000000  00000000  0001403b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e4c  00000000  00000000  00019691  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e0c  00000000  00000000  0001f4e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000331c8  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c7b  00000000  00000000  000534b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0005712f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002442  00000000  00000000  00057447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c1       	rjmp	.+636    	; 0x27e <__ctors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c1       	rjmp	.+672    	; 0x2ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c1       	rjmp	.+620    	; 0x2ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_25>
      68:	30 c1       	rjmp	.+608    	; 0x2ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bad_interrupt>
      9a:	00 00       	nop
      9c:	36 c2       	rjmp	.+1132   	; 0x50a <__vector_39>
      9e:	00 00       	nop
      a0:	71 c2       	rjmp	.+1250   	; 0x584 <__vector_40>
      a2:	00 00       	nop
      a4:	ac c2       	rjmp	.+1368   	; 0x5fe <__vector_41>
      a6:	00 00       	nop
      a8:	e7 c2       	rjmp	.+1486   	; 0x678 <__vector_42>
      aa:	00 00       	nop
      ac:	0e c1       	rjmp	.+540    	; 0x2ca <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0c c1       	rjmp	.+536    	; 0x2ca <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0a c1       	rjmp	.+532    	; 0x2ca <__bad_interrupt>
      b6:	00 00       	nop
      b8:	08 c1       	rjmp	.+528    	; 0x2ca <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__vector_47>
      c0:	04 c1       	rjmp	.+520    	; 0x2ca <__bad_interrupt>
      c2:	00 00       	nop
      c4:	02 c1       	rjmp	.+516    	; 0x2ca <__bad_interrupt>
      c6:	00 00       	nop
      c8:	00 c1       	rjmp	.+512    	; 0x2ca <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fe c0       	rjmp	.+508    	; 0x2ca <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fc c0       	rjmp	.+504    	; 0x2ca <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fa c0       	rjmp	.+500    	; 0x2ca <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f8 c0       	rjmp	.+496    	; 0x2ca <__bad_interrupt>
      da:	00 00       	nop
      dc:	f6 c0       	rjmp	.+492    	; 0x2ca <__bad_interrupt>
      de:	00 00       	nop
      e0:	f4 c0       	rjmp	.+488    	; 0x2ca <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f2 c0       	rjmp	.+484    	; 0x2ca <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f0 c0       	rjmp	.+480    	; 0x2ca <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ee c0       	rjmp	.+476    	; 0x2ca <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ec c0       	rjmp	.+472    	; 0x2ca <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ea c0       	rjmp	.+468    	; 0x2ca <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e8 c0       	rjmp	.+464    	; 0x2ca <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e6 c0       	rjmp	.+460    	; 0x2ca <__bad_interrupt>
      fe:	00 00       	nop
     100:	e4 c0       	rjmp	.+456    	; 0x2ca <__bad_interrupt>
     102:	00 00       	nop
     104:	e2 c0       	rjmp	.+452    	; 0x2ca <__bad_interrupt>
     106:	00 00       	nop
     108:	e0 c0       	rjmp	.+448    	; 0x2ca <__bad_interrupt>
     10a:	00 00       	nop
     10c:	de c0       	rjmp	.+444    	; 0x2ca <__bad_interrupt>
     10e:	00 00       	nop
     110:	dc c0       	rjmp	.+440    	; 0x2ca <__bad_interrupt>
     112:	00 00       	nop
     114:	da c0       	rjmp	.+436    	; 0x2ca <__bad_interrupt>
     116:	00 00       	nop
     118:	d8 c0       	rjmp	.+432    	; 0x2ca <__bad_interrupt>
     11a:	00 00       	nop
     11c:	02 c1       	rjmp	.+516    	; 0x322 <__vector_71>
     11e:	00 00       	nop
     120:	3d c1       	rjmp	.+634    	; 0x39c <__vector_72>
     122:	00 00       	nop
     124:	78 c1       	rjmp	.+752    	; 0x416 <__vector_73>
     126:	00 00       	nop
     128:	b3 c1       	rjmp	.+870    	; 0x490 <__vector_74>
     12a:	00 00       	nop
     12c:	ce c0       	rjmp	.+412    	; 0x2ca <__bad_interrupt>
     12e:	00 00       	nop
     130:	cc c0       	rjmp	.+408    	; 0x2ca <__bad_interrupt>
     132:	00 00       	nop
     134:	ca c0       	rjmp	.+404    	; 0x2ca <__bad_interrupt>
     136:	00 00       	nop
     138:	c8 c0       	rjmp	.+400    	; 0x2ca <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c6 c0       	rjmp	.+396    	; 0x2ca <__bad_interrupt>
     13e:	00 00       	nop
     140:	c4 c0       	rjmp	.+392    	; 0x2ca <__bad_interrupt>
     142:	00 00       	nop
     144:	c2 c0       	rjmp	.+388    	; 0x2ca <__bad_interrupt>
     146:	00 00       	nop
     148:	c0 c0       	rjmp	.+384    	; 0x2ca <__bad_interrupt>
     14a:	00 00       	nop
     14c:	be c0       	rjmp	.+380    	; 0x2ca <__bad_interrupt>
     14e:	00 00       	nop
     150:	bc c0       	rjmp	.+376    	; 0x2ca <__bad_interrupt>
     152:	00 00       	nop
     154:	ba c0       	rjmp	.+372    	; 0x2ca <__bad_interrupt>
     156:	00 00       	nop
     158:	b8 c0       	rjmp	.+368    	; 0x2ca <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b6 c0       	rjmp	.+364    	; 0x2ca <__bad_interrupt>
     15e:	00 00       	nop
     160:	b4 c0       	rjmp	.+360    	; 0x2ca <__bad_interrupt>
     162:	00 00       	nop
     164:	b2 c0       	rjmp	.+356    	; 0x2ca <__bad_interrupt>
     166:	00 00       	nop
     168:	b0 c0       	rjmp	.+352    	; 0x2ca <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ae c0       	rjmp	.+348    	; 0x2ca <__bad_interrupt>
     16e:	00 00       	nop
     170:	ac c0       	rjmp	.+344    	; 0x2ca <__bad_interrupt>
     172:	00 00       	nop
     174:	aa c0       	rjmp	.+340    	; 0x2ca <__bad_interrupt>
     176:	00 00       	nop
     178:	a8 c0       	rjmp	.+336    	; 0x2ca <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a6 c0       	rjmp	.+332    	; 0x2ca <__bad_interrupt>
     17e:	00 00       	nop
     180:	a4 c0       	rjmp	.+328    	; 0x2ca <__bad_interrupt>
     182:	00 00       	nop
     184:	a2 c0       	rjmp	.+324    	; 0x2ca <__bad_interrupt>
     186:	00 00       	nop
     188:	a0 c0       	rjmp	.+320    	; 0x2ca <__bad_interrupt>
     18a:	00 00       	nop
     18c:	9e c0       	rjmp	.+316    	; 0x2ca <__bad_interrupt>
     18e:	00 00       	nop
     190:	9c c0       	rjmp	.+312    	; 0x2ca <__bad_interrupt>
     192:	00 00       	nop
     194:	9a c0       	rjmp	.+308    	; 0x2ca <__bad_interrupt>
     196:	00 00       	nop
     198:	98 c0       	rjmp	.+304    	; 0x2ca <__bad_interrupt>
     19a:	00 00       	nop
     19c:	96 c0       	rjmp	.+300    	; 0x2ca <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	94 c0       	rjmp	.+296    	; 0x2ca <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	92 c0       	rjmp	.+292    	; 0x2ca <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	90 c0       	rjmp	.+288    	; 0x2ca <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	8e c0       	rjmp	.+284    	; 0x2ca <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8c c0       	rjmp	.+280    	; 0x2ca <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8a c0       	rjmp	.+276    	; 0x2ca <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	88 c0       	rjmp	.+272    	; 0x2ca <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	86 c0       	rjmp	.+268    	; 0x2ca <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	84 c0       	rjmp	.+264    	; 0x2ca <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	82 c0       	rjmp	.+260    	; 0x2ca <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	80 c0       	rjmp	.+256    	; 0x2ca <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	7e c0       	rjmp	.+252    	; 0x2ca <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7c c0       	rjmp	.+248    	; 0x2ca <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7a c0       	rjmp	.+244    	; 0x2ca <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	78 c0       	rjmp	.+240    	; 0x2ca <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	76 c0       	rjmp	.+236    	; 0x2ca <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	74 c0       	rjmp	.+232    	; 0x2ca <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	72 c0       	rjmp	.+228    	; 0x2ca <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	70 c0       	rjmp	.+224    	; 0x2ca <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	6e c0       	rjmp	.+220    	; 0x2ca <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6c c0       	rjmp	.+216    	; 0x2ca <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6a c0       	rjmp	.+212    	; 0x2ca <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	68 c0       	rjmp	.+208    	; 0x2ca <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <usart_init_rs232+0x144>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df e3       	ldi	r29, 0x3F	; 63
     288:	de bf       	out	0x3e, r29	; 62
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	0c bf       	out	0x3c, r16	; 60
     28e:	18 be       	out	0x38, r1	; 56
     290:	19 be       	out	0x39, r1	; 57
     292:	1a be       	out	0x3a, r1	; 58
     294:	1b be       	out	0x3b, r1	; 59

00000296 <__do_copy_data>:
     296:	11 e2       	ldi	r17, 0x21	; 33
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e2       	ldi	r27, 0x20	; 32
     29c:	e0 ed       	ldi	r30, 0xD0	; 208
     29e:	f2 e2       	ldi	r31, 0x22	; 34
     2a0:	00 e0       	ldi	r16, 0x00	; 0
     2a2:	0b bf       	out	0x3b, r16	; 59
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x14>
     2a6:	07 90       	elpm	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	a0 37       	cpi	r26, 0x70	; 112
     2ac:	b1 07       	cpc	r27, r17
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0x10>
     2b0:	1b be       	out	0x3b, r1	; 59

000002b2 <__do_clear_bss>:
     2b2:	21 e2       	ldi	r18, 0x21	; 33
     2b4:	a0 e7       	ldi	r26, 0x70	; 112
     2b6:	b1 e2       	ldi	r27, 0x21	; 33
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a9 39       	cpi	r26, 0x99	; 153
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	0e 94 b2 0a 	call	0x1564	; 0x1564 <main>
     2c6:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <_exit>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	1f 92       	push	r1
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2d6:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <stdio_base>
     2da:	90 91 8a 21 	lds	r25, 0x218A	; 0x80218a <stdio_base+0x1>
     2de:	e0 91 85 21 	lds	r30, 0x2185	; 0x802185 <ptr_get>
     2e2:	f0 91 86 21 	lds	r31, 0x2186	; 0x802186 <ptr_get+0x1>
     2e6:	be 01       	movw	r22, r28
     2e8:	6f 5f       	subi	r22, 0xFF	; 255
     2ea:	7f 4f       	sbci	r23, 0xFF	; 255
     2ec:	19 95       	eicall
	return c;
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     2f0:	08 2e       	mov	r0, r24
     2f2:	00 0c       	add	r0, r0
     2f4:	99 0b       	sbc	r25, r25
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2fe:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     300:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <stdio_base>
     304:	90 91 8a 21 	lds	r25, 0x218A	; 0x80218a <stdio_base+0x1>
     308:	e0 91 87 21 	lds	r30, 0x2187	; 0x802187 <ptr_put>
     30c:	f0 91 88 21 	lds	r31, 0x2188	; 0x802188 <ptr_put+0x1>
     310:	19 95       	eicall
     312:	99 23       	and	r25, r25
     314:	1c f0       	brlt	.+6      	; 0x31c <_write+0x1e>
		return -1;
	}
	return 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     320:	08 95       	ret

00000322 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	08 b6       	in	r0, 0x38	; 56
     32e:	0f 92       	push	r0
     330:	18 be       	out	0x38, r1	; 56
     332:	09 b6       	in	r0, 0x39	; 57
     334:	0f 92       	push	r0
     336:	19 be       	out	0x39, r1	; 57
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	1b be       	out	0x3b, r1	; 59
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     356:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     35a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     35e:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <adca_callback>
     362:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <adca_callback+0x1>
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	19 95       	eicall
}
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	7f 91       	pop	r23
     37c:	6f 91       	pop	r22
     37e:	5f 91       	pop	r21
     380:	4f 91       	pop	r20
     382:	3f 91       	pop	r19
     384:	2f 91       	pop	r18
     386:	0f 90       	pop	r0
     388:	0b be       	out	0x3b, r0	; 59
     38a:	0f 90       	pop	r0
     38c:	09 be       	out	0x39, r0	; 57
     38e:	0f 90       	pop	r0
     390:	08 be       	out	0x38, r0	; 56
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	08 b6       	in	r0, 0x38	; 56
     3a8:	0f 92       	push	r0
     3aa:	18 be       	out	0x38, r1	; 56
     3ac:	09 b6       	in	r0, 0x39	; 57
     3ae:	0f 92       	push	r0
     3b0:	19 be       	out	0x39, r1	; 57
     3b2:	0b b6       	in	r0, 0x3b	; 59
     3b4:	0f 92       	push	r0
     3b6:	1b be       	out	0x3b, r1	; 59
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3d0:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3d4:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d8:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <adca_callback>
     3dc:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <adca_callback+0x1>
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	19 95       	eicall
}
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	bf 91       	pop	r27
     3ee:	af 91       	pop	r26
     3f0:	9f 91       	pop	r25
     3f2:	8f 91       	pop	r24
     3f4:	7f 91       	pop	r23
     3f6:	6f 91       	pop	r22
     3f8:	5f 91       	pop	r21
     3fa:	4f 91       	pop	r20
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0b be       	out	0x3b, r0	; 59
     404:	0f 90       	pop	r0
     406:	09 be       	out	0x39, r0	; 57
     408:	0f 90       	pop	r0
     40a:	08 be       	out	0x38, r0	; 56
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	08 b6       	in	r0, 0x38	; 56
     422:	0f 92       	push	r0
     424:	18 be       	out	0x38, r1	; 56
     426:	09 b6       	in	r0, 0x39	; 57
     428:	0f 92       	push	r0
     42a:	19 be       	out	0x39, r1	; 57
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	1b be       	out	0x3b, r1	; 59
     432:	2f 93       	push	r18
     434:	3f 93       	push	r19
     436:	4f 93       	push	r20
     438:	5f 93       	push	r21
     43a:	6f 93       	push	r22
     43c:	7f 93       	push	r23
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	af 93       	push	r26
     444:	bf 93       	push	r27
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     44a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     44e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     452:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <adca_callback>
     456:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <adca_callback+0x1>
     45a:	64 e0       	ldi	r22, 0x04	; 4
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	19 95       	eicall
}
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0b be       	out	0x3b, r0	; 59
     47e:	0f 90       	pop	r0
     480:	09 be       	out	0x39, r0	; 57
     482:	0f 90       	pop	r0
     484:	08 be       	out	0x38, r0	; 56
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	08 b6       	in	r0, 0x38	; 56
     49c:	0f 92       	push	r0
     49e:	18 be       	out	0x38, r1	; 56
     4a0:	09 b6       	in	r0, 0x39	; 57
     4a2:	0f 92       	push	r0
     4a4:	19 be       	out	0x39, r1	; 57
     4a6:	0b b6       	in	r0, 0x3b	; 59
     4a8:	0f 92       	push	r0
     4aa:	1b be       	out	0x3b, r1	; 59
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4c4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4cc:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <adca_callback>
     4d0:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <adca_callback+0x1>
     4d4:	68 e0       	ldi	r22, 0x08	; 8
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	19 95       	eicall
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0b be       	out	0x3b, r0	; 59
     4f8:	0f 90       	pop	r0
     4fa:	09 be       	out	0x39, r0	; 57
     4fc:	0f 90       	pop	r0
     4fe:	08 be       	out	0x38, r0	; 56
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	08 b6       	in	r0, 0x38	; 56
     516:	0f 92       	push	r0
     518:	18 be       	out	0x38, r1	; 56
     51a:	09 b6       	in	r0, 0x39	; 57
     51c:	0f 92       	push	r0
     51e:	19 be       	out	0x39, r1	; 57
     520:	0b b6       	in	r0, 0x3b	; 59
     522:	0f 92       	push	r0
     524:	1b be       	out	0x3b, r1	; 59
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     53e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     542:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     546:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <adcb_callback>
     54a:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <adcb_callback+0x1>
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	19 95       	eicall
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0b be       	out	0x3b, r0	; 59
     572:	0f 90       	pop	r0
     574:	09 be       	out	0x39, r0	; 57
     576:	0f 90       	pop	r0
     578:	08 be       	out	0x38, r0	; 56
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	08 b6       	in	r0, 0x38	; 56
     590:	0f 92       	push	r0
     592:	18 be       	out	0x38, r1	; 56
     594:	09 b6       	in	r0, 0x39	; 57
     596:	0f 92       	push	r0
     598:	19 be       	out	0x39, r1	; 57
     59a:	0b b6       	in	r0, 0x3b	; 59
     59c:	0f 92       	push	r0
     59e:	1b be       	out	0x3b, r1	; 59
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5bc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5c0:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <adcb_callback>
     5c4:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <adcb_callback+0x1>
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	19 95       	eicall
}
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	09 be       	out	0x39, r0	; 57
     5f0:	0f 90       	pop	r0
     5f2:	08 be       	out	0x38, r0	; 56
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	08 b6       	in	r0, 0x38	; 56
     60a:	0f 92       	push	r0
     60c:	18 be       	out	0x38, r1	; 56
     60e:	09 b6       	in	r0, 0x39	; 57
     610:	0f 92       	push	r0
     612:	19 be       	out	0x39, r1	; 57
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	1b be       	out	0x3b, r1	; 59
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     632:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     636:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     63a:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <adcb_callback>
     63e:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <adcb_callback+0x1>
     642:	64 e0       	ldi	r22, 0x04	; 4
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	19 95       	eicall
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0b be       	out	0x3b, r0	; 59
     666:	0f 90       	pop	r0
     668:	09 be       	out	0x39, r0	; 57
     66a:	0f 90       	pop	r0
     66c:	08 be       	out	0x38, r0	; 56
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	08 b6       	in	r0, 0x38	; 56
     684:	0f 92       	push	r0
     686:	18 be       	out	0x38, r1	; 56
     688:	09 b6       	in	r0, 0x39	; 57
     68a:	0f 92       	push	r0
     68c:	19 be       	out	0x39, r1	; 57
     68e:	0b b6       	in	r0, 0x3b	; 59
     690:	0f 92       	push	r0
     692:	1b be       	out	0x3b, r1	; 59
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	ef 93       	push	r30
     6aa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6ac:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6b0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6b4:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <adcb_callback>
     6b8:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <adcb_callback+0x1>
     6bc:	68 e0       	ldi	r22, 0x08	; 8
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	19 95       	eicall
}
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0b be       	out	0x3b, r0	; 59
     6e0:	0f 90       	pop	r0
     6e2:	09 be       	out	0x39, r0	; 57
     6e4:	0f 90       	pop	r0
     6e6:	08 be       	out	0x38, r0	; 56
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6f2:	fc 01       	movw	r30, r24
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	95 ff       	sbrs	r25, 5
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <usart_putchar+0x2>
     6fa:	60 83       	st	Z, r22
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret

00000702 <usart_getchar>:
     702:	fc 01       	movw	r30, r24
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	99 23       	and	r25, r25
     708:	ec f7       	brge	.-6      	; 0x704 <usart_getchar+0x2>
     70a:	80 81       	ld	r24, Z
     70c:	08 95       	ret

0000070e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     70e:	4f 92       	push	r4
     710:	5f 92       	push	r5
     712:	6f 92       	push	r6
     714:	7f 92       	push	r7
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	7c 01       	movw	r14, r24
     72a:	4a 01       	movw	r8, r20
     72c:	5b 01       	movw	r10, r22
     72e:	28 01       	movw	r4, r16
     730:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     732:	fc 01       	movw	r30, r24
     734:	84 81       	ldd	r24, Z+4	; 0x04
     736:	82 ff       	sbrs	r24, 2
     738:	16 c0       	rjmp	.+44     	; 0x766 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     73a:	d9 01       	movw	r26, r18
     73c:	c8 01       	movw	r24, r16
     73e:	68 94       	set
     740:	12 f8       	bld	r1, 2
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	16 94       	lsr	r1
     74c:	d1 f7       	brne	.-12     	; 0x742 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     74e:	b9 01       	movw	r22, r18
     750:	a8 01       	movw	r20, r16
     752:	03 2e       	mov	r0, r19
     754:	36 e1       	ldi	r19, 0x16	; 22
     756:	76 95       	lsr	r23
     758:	67 95       	ror	r22
     75a:	57 95       	ror	r21
     75c:	47 95       	ror	r20
     75e:	3a 95       	dec	r19
     760:	d1 f7       	brne	.-12     	; 0x756 <usart_set_baudrate+0x48>
     762:	30 2d       	mov	r19, r0
     764:	15 c0       	rjmp	.+42     	; 0x790 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     766:	d9 01       	movw	r26, r18
     768:	c8 01       	movw	r24, r16
     76a:	68 94       	set
     76c:	13 f8       	bld	r1, 3
     76e:	b6 95       	lsr	r27
     770:	a7 95       	ror	r26
     772:	97 95       	ror	r25
     774:	87 95       	ror	r24
     776:	16 94       	lsr	r1
     778:	d1 f7       	brne	.-12     	; 0x76e <usart_set_baudrate+0x60>
		min_rate /= 2;
     77a:	b9 01       	movw	r22, r18
     77c:	a8 01       	movw	r20, r16
     77e:	03 2e       	mov	r0, r19
     780:	37 e1       	ldi	r19, 0x17	; 23
     782:	76 95       	lsr	r23
     784:	67 95       	ror	r22
     786:	57 95       	ror	r21
     788:	47 95       	ror	r20
     78a:	3a 95       	dec	r19
     78c:	d1 f7       	brne	.-12     	; 0x782 <usart_set_baudrate+0x74>
     78e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     790:	88 15       	cp	r24, r8
     792:	99 05       	cpc	r25, r9
     794:	aa 05       	cpc	r26, r10
     796:	bb 05       	cpc	r27, r11
     798:	08 f4       	brcc	.+2      	; 0x79c <usart_set_baudrate+0x8e>
     79a:	a6 c0       	rjmp	.+332    	; 0x8e8 <usart_set_baudrate+0x1da>
     79c:	84 16       	cp	r8, r20
     79e:	95 06       	cpc	r9, r21
     7a0:	a6 06       	cpc	r10, r22
     7a2:	b7 06       	cpc	r11, r23
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <usart_set_baudrate+0x9a>
     7a6:	a2 c0       	rjmp	.+324    	; 0x8ec <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7a8:	f7 01       	movw	r30, r14
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	82 fd       	sbrc	r24, 2
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <usart_set_baudrate+0xaa>
		baud *= 2;
     7b0:	88 0c       	add	r8, r8
     7b2:	99 1c       	adc	r9, r9
     7b4:	aa 1c       	adc	r10, r10
     7b6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7b8:	c3 01       	movw	r24, r6
     7ba:	b2 01       	movw	r22, r4
     7bc:	a5 01       	movw	r20, r10
     7be:	94 01       	movw	r18, r8
     7c0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7c4:	2f 3f       	cpi	r18, 0xFF	; 255
     7c6:	31 05       	cpc	r19, r1
     7c8:	41 05       	cpc	r20, r1
     7ca:	51 05       	cpc	r21, r1
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <usart_set_baudrate+0xc2>
     7ce:	90 c0       	rjmp	.+288    	; 0x8f0 <usart_set_baudrate+0x1e2>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	c9 ef       	ldi	r28, 0xF9	; 249
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <usart_set_baudrate+0xd8>
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	4a 07       	cpc	r20, r26
     7e2:	5b 07       	cpc	r21, r27
     7e4:	58 f0       	brcs	.+22     	; 0x7fc <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	aa 1f       	adc	r26, r26
     7ec:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     7ee:	cd 3f       	cpi	r28, 0xFD	; 253
     7f0:	0c f4       	brge	.+2      	; 0x7f4 <usart_set_baudrate+0xe6>
			limit |= 1;
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7f6:	c7 30       	cpi	r28, 0x07	; 7
     7f8:	89 f7       	brne	.-30     	; 0x7dc <usart_set_baudrate+0xce>
     7fa:	4f c0       	rjmp	.+158    	; 0x89a <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     7fc:	cc 23       	and	r28, r28
     7fe:	0c f0       	brlt	.+2      	; 0x802 <usart_set_baudrate+0xf4>
     800:	4c c0       	rjmp	.+152    	; 0x89a <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     802:	d5 01       	movw	r26, r10
     804:	c4 01       	movw	r24, r8
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	aa 1f       	adc	r26, r26
     80c:	bb 1f       	adc	r27, r27
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	aa 1f       	adc	r26, r26
     81c:	bb 1f       	adc	r27, r27
     81e:	48 1a       	sub	r4, r24
     820:	59 0a       	sbc	r5, r25
     822:	6a 0a       	sbc	r6, r26
     824:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     826:	ce 3f       	cpi	r28, 0xFE	; 254
     828:	f4 f4       	brge	.+60     	; 0x866 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     82a:	8d ef       	ldi	r24, 0xFD	; 253
     82c:	9f ef       	ldi	r25, 0xFF	; 255
     82e:	8c 1b       	sub	r24, r28
     830:	91 09       	sbc	r25, r1
     832:	c7 fd       	sbrc	r28, 7
     834:	93 95       	inc	r25
     836:	04 c0       	rjmp	.+8      	; 0x840 <usart_set_baudrate+0x132>
     838:	44 0c       	add	r4, r4
     83a:	55 1c       	adc	r5, r5
     83c:	66 1c       	adc	r6, r6
     83e:	77 1c       	adc	r7, r7
     840:	8a 95       	dec	r24
     842:	d2 f7       	brpl	.-12     	; 0x838 <usart_set_baudrate+0x12a>
     844:	d5 01       	movw	r26, r10
     846:	c4 01       	movw	r24, r8
     848:	b6 95       	lsr	r27
     84a:	a7 95       	ror	r26
     84c:	97 95       	ror	r25
     84e:	87 95       	ror	r24
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	64 0d       	add	r22, r4
     856:	75 1d       	adc	r23, r5
     858:	86 1d       	adc	r24, r6
     85a:	97 1d       	adc	r25, r7
     85c:	a5 01       	movw	r20, r10
     85e:	94 01       	movw	r18, r8
     860:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__udivmodsi4>
     864:	37 c0       	rjmp	.+110    	; 0x8d4 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	8c 0f       	add	r24, r28
     86a:	a5 01       	movw	r20, r10
     86c:	94 01       	movw	r18, r8
     86e:	04 c0       	rjmp	.+8      	; 0x878 <usart_set_baudrate+0x16a>
     870:	22 0f       	add	r18, r18
     872:	33 1f       	adc	r19, r19
     874:	44 1f       	adc	r20, r20
     876:	55 1f       	adc	r21, r21
     878:	8a 95       	dec	r24
     87a:	d2 f7       	brpl	.-12     	; 0x870 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     87c:	da 01       	movw	r26, r20
     87e:	c9 01       	movw	r24, r18
     880:	b6 95       	lsr	r27
     882:	a7 95       	ror	r26
     884:	97 95       	ror	r25
     886:	87 95       	ror	r24
     888:	bc 01       	movw	r22, r24
     88a:	cd 01       	movw	r24, r26
     88c:	64 0d       	add	r22, r4
     88e:	75 1d       	adc	r23, r5
     890:	86 1d       	adc	r24, r6
     892:	97 1d       	adc	r25, r7
     894:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__udivmodsi4>
     898:	1d c0       	rjmp	.+58     	; 0x8d4 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	8c 0f       	add	r24, r28
     89e:	a5 01       	movw	r20, r10
     8a0:	94 01       	movw	r18, r8
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <usart_set_baudrate+0x19e>
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	44 1f       	adc	r20, r20
     8aa:	55 1f       	adc	r21, r21
     8ac:	8a 95       	dec	r24
     8ae:	d2 f7       	brpl	.-12     	; 0x8a4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8b0:	da 01       	movw	r26, r20
     8b2:	c9 01       	movw	r24, r18
     8b4:	b6 95       	lsr	r27
     8b6:	a7 95       	ror	r26
     8b8:	97 95       	ror	r25
     8ba:	87 95       	ror	r24
     8bc:	bc 01       	movw	r22, r24
     8be:	cd 01       	movw	r24, r26
     8c0:	64 0d       	add	r22, r4
     8c2:	75 1d       	adc	r23, r5
     8c4:	86 1d       	adc	r24, r6
     8c6:	97 1d       	adc	r25, r7
     8c8:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__udivmodsi4>
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	31 09       	sbc	r19, r1
     8d0:	41 09       	sbc	r20, r1
     8d2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8d4:	83 2f       	mov	r24, r19
     8d6:	8f 70       	andi	r24, 0x0F	; 15
     8d8:	c2 95       	swap	r28
     8da:	c0 7f       	andi	r28, 0xF0	; 240
     8dc:	c8 2b       	or	r28, r24
     8de:	f7 01       	movw	r30, r14
     8e0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8e2:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	18 c0       	rjmp	.+48     	; 0x918 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	16 c0       	rjmp	.+44     	; 0x918 <usart_set_baudrate+0x20a>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	14 c0       	rjmp	.+40     	; 0x918 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8f0:	d5 01       	movw	r26, r10
     8f2:	c4 01       	movw	r24, r8
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	aa 1f       	adc	r26, r26
     8fa:	bb 1f       	adc	r27, r27
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	aa 1f       	adc	r26, r26
     902:	bb 1f       	adc	r27, r27
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	aa 1f       	adc	r26, r26
     90a:	bb 1f       	adc	r27, r27
     90c:	48 1a       	sub	r4, r24
     90e:	59 0a       	sbc	r5, r25
     910:	6a 0a       	sbc	r6, r26
     912:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     914:	c9 ef       	ldi	r28, 0xF9	; 249
     916:	89 cf       	rjmp	.-238    	; 0x82a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	9f 90       	pop	r9
     928:	8f 90       	pop	r8
     92a:	7f 90       	pop	r7
     92c:	6f 90       	pop	r6
     92e:	5f 90       	pop	r5
     930:	4f 90       	pop	r4
     932:	08 95       	ret

00000934 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	09 f4       	brne	.+2      	; 0x946 <usart_init_rs232+0x12>
     944:	36 c1       	rjmp	.+620    	; 0xbb2 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     946:	80 3c       	cpi	r24, 0xC0	; 192
     948:	91 05       	cpc	r25, r1
     94a:	21 f4       	brne	.+8      	; 0x954 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     94c:	60 e1       	ldi	r22, 0x10	; 16
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	37 d3       	rcall	.+1646   	; 0xfc0 <sysclk_enable_module>
     952:	2f c1       	rjmp	.+606    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     954:	c0 34       	cpi	r28, 0x40	; 64
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	d8 07       	cpc	r29, r24
     95a:	21 f4       	brne	.+8      	; 0x964 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     95c:	68 e0       	ldi	r22, 0x08	; 8
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	2f d3       	rcall	.+1630   	; 0xfc0 <sysclk_enable_module>
     962:	27 c1       	rjmp	.+590    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     964:	c1 15       	cp	r28, r1
     966:	e4 e0       	ldi	r30, 0x04	; 4
     968:	de 07       	cpc	r29, r30
     96a:	21 f4       	brne	.+8      	; 0x974 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     96c:	64 e0       	ldi	r22, 0x04	; 4
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	27 d3       	rcall	.+1614   	; 0xfc0 <sysclk_enable_module>
     972:	1f c1       	rjmp	.+574    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     974:	c0 38       	cpi	r28, 0x80	; 128
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     97a:	21 f4       	brne	.+8      	; 0x984 <usart_init_rs232+0x50>
     97c:	62 e0       	ldi	r22, 0x02	; 2
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	1f d3       	rcall	.+1598   	; 0xfc0 <sysclk_enable_module>
     982:	17 c1       	rjmp	.+558    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     984:	c1 15       	cp	r28, r1
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     98a:	21 f4       	brne	.+8      	; 0x994 <usart_init_rs232+0x60>
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	17 d3       	rcall	.+1582   	; 0xfc0 <sysclk_enable_module>
     992:	0f c1       	rjmp	.+542    	; 0xbb2 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     994:	c0 38       	cpi	r28, 0x80	; 128
     996:	e3 e0       	ldi	r30, 0x03	; 3
     998:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     99a:	21 f4       	brne	.+8      	; 0x9a4 <usart_init_rs232+0x70>
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	0f d3       	rcall	.+1566   	; 0xfc0 <sysclk_enable_module>
     9a2:	07 c1       	rjmp	.+526    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     9a4:	c0 39       	cpi	r28, 0x90	; 144
     9a6:	f3 e0       	ldi	r31, 0x03	; 3
     9a8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <usart_init_rs232+0x80>
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	07 d3       	rcall	.+1550   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9b2:	ff c0       	rjmp	.+510    	; 0xbb2 <usart_init_rs232+0x27e>
     9b4:	c1 15       	cp	r28, r1
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9ba:	21 f4       	brne	.+8      	; 0x9c4 <usart_init_rs232+0x90>
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	ff d2       	rcall	.+1534   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     9c2:	f7 c0       	rjmp	.+494    	; 0xbb2 <usart_init_rs232+0x27e>
     9c4:	c0 34       	cpi	r28, 0x40	; 64
     9c6:	e2 e0       	ldi	r30, 0x02	; 2
     9c8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <usart_init_rs232+0xa0>
     9cc:	62 e0       	ldi	r22, 0x02	; 2
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	f7 d2       	rcall	.+1518   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9d2:	ef c0       	rjmp	.+478    	; 0xbb2 <usart_init_rs232+0x27e>
     9d4:	c1 15       	cp	r28, r1
     9d6:	f3 e0       	ldi	r31, 0x03	; 3
     9d8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9da:	21 f4       	brne	.+8      	; 0x9e4 <usart_init_rs232+0xb0>
     9dc:	64 e0       	ldi	r22, 0x04	; 4
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	ef d2       	rcall	.+1502   	; 0xfc0 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9e2:	e7 c0       	rjmp	.+462    	; 0xbb2 <usart_init_rs232+0x27e>
     9e4:	c0 32       	cpi	r28, 0x20	; 32
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <usart_init_rs232+0xc0>
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	e7 d2       	rcall	.+1486   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9f2:	df c0       	rjmp	.+446    	; 0xbb2 <usart_init_rs232+0x27e>
     9f4:	c1 15       	cp	r28, r1
     9f6:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9f8:	de 07       	cpc	r29, r30
     9fa:	21 f4       	brne	.+8      	; 0xa04 <usart_init_rs232+0xd0>
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	df d2       	rcall	.+1470   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a02:	d7 c0       	rjmp	.+430    	; 0xbb2 <usart_init_rs232+0x27e>
     a04:	c1 15       	cp	r28, r1
     a06:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a08:	df 07       	cpc	r29, r31
     a0a:	21 f4       	brne	.+8      	; 0xa14 <usart_init_rs232+0xe0>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	d7 d2       	rcall	.+1454   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     a12:	cf c0       	rjmp	.+414    	; 0xbb2 <usart_init_rs232+0x27e>
     a14:	c1 15       	cp	r28, r1
     a16:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a18:	d8 07       	cpc	r29, r24
     a1a:	21 f4       	brne	.+8      	; 0xa24 <usart_init_rs232+0xf0>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	cf d2       	rcall	.+1438   	; 0xfc0 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     a22:	c7 c0       	rjmp	.+398    	; 0xbb2 <usart_init_rs232+0x27e>
     a24:	c1 15       	cp	r28, r1
     a26:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     a28:	de 07       	cpc	r29, r30
     a2a:	21 f4       	brne	.+8      	; 0xa34 <usart_init_rs232+0x100>
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a30:	c7 d2       	rcall	.+1422   	; 0xfc0 <sysclk_enable_module>
     a32:	bf c0       	rjmp	.+382    	; 0xbb2 <usart_init_rs232+0x27e>
     a34:	c0 34       	cpi	r28, 0x40	; 64
     a36:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a38:	df 07       	cpc	r29, r31
     a3a:	21 f4       	brne	.+8      	; 0xa44 <usart_init_rs232+0x110>
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a40:	bf d2       	rcall	.+1406   	; 0xfc0 <sysclk_enable_module>
     a42:	b7 c0       	rjmp	.+366    	; 0xbb2 <usart_init_rs232+0x27e>
     a44:	c0 34       	cpi	r28, 0x40	; 64
     a46:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a48:	d8 07       	cpc	r29, r24
     a4a:	21 f4       	brne	.+8      	; 0xa54 <usart_init_rs232+0x120>
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a50:	b7 d2       	rcall	.+1390   	; 0xfc0 <sysclk_enable_module>
     a52:	af c0       	rjmp	.+350    	; 0xbb2 <usart_init_rs232+0x27e>
     a54:	c0 34       	cpi	r28, 0x40	; 64
     a56:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a58:	de 07       	cpc	r29, r30
     a5a:	21 f4       	brne	.+8      	; 0xa64 <usart_init_rs232+0x130>
     a5c:	62 e0       	ldi	r22, 0x02	; 2
     a5e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a60:	af d2       	rcall	.+1374   	; 0xfc0 <sysclk_enable_module>
     a62:	a7 c0       	rjmp	.+334    	; 0xbb2 <usart_init_rs232+0x27e>
     a64:	c0 34       	cpi	r28, 0x40	; 64
     a66:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a68:	df 07       	cpc	r29, r31
     a6a:	21 f4       	brne	.+8      	; 0xa74 <usart_init_rs232+0x140>
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a70:	a7 d2       	rcall	.+1358   	; 0xfc0 <sysclk_enable_module>
     a72:	9f c0       	rjmp	.+318    	; 0xbb2 <usart_init_rs232+0x27e>
     a74:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	d8 07       	cpc	r29, r24
     a7a:	21 f4       	brne	.+8      	; 0xa84 <usart_init_rs232+0x150>
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a80:	9f d2       	rcall	.+1342   	; 0xfc0 <sysclk_enable_module>
     a82:	97 c0       	rjmp	.+302    	; 0xbb2 <usart_init_rs232+0x27e>
     a84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a86:	e9 e0       	ldi	r30, 0x09	; 9
     a88:	de 07       	cpc	r29, r30
     a8a:	21 f4       	brne	.+8      	; 0xa94 <usart_init_rs232+0x160>
     a8c:	64 e0       	ldi	r22, 0x04	; 4
     a8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a90:	97 d2       	rcall	.+1326   	; 0xfc0 <sysclk_enable_module>
     a92:	8f c0       	rjmp	.+286    	; 0xbb2 <usart_init_rs232+0x27e>
     a94:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a96:	fa e0       	ldi	r31, 0x0A	; 10
     a98:	df 07       	cpc	r29, r31
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <usart_init_rs232+0x170>
     a9c:	64 e0       	ldi	r22, 0x04	; 4
     a9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     aa0:	8f d2       	rcall	.+1310   	; 0xfc0 <sysclk_enable_module>
     aa2:	87 c0       	rjmp	.+270    	; 0xbb2 <usart_init_rs232+0x27e>
     aa4:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     aa6:	8b e0       	ldi	r24, 0x0B	; 11
     aa8:	d8 07       	cpc	r29, r24
     aaa:	21 f4       	brne	.+8      	; 0xab4 <usart_init_rs232+0x180>
     aac:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     aae:	86 e0       	ldi	r24, 0x06	; 6
     ab0:	87 d2       	rcall	.+1294   	; 0xfc0 <sysclk_enable_module>
     ab2:	7f c0       	rjmp	.+254    	; 0xbb2 <usart_init_rs232+0x27e>
     ab4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     ab6:	e8 e0       	ldi	r30, 0x08	; 8
     ab8:	de 07       	cpc	r29, r30
     aba:	21 f4       	brne	.+8      	; 0xac4 <usart_init_rs232+0x190>
     abc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	7f d2       	rcall	.+1278   	; 0xfc0 <sysclk_enable_module>
     ac2:	77 c0       	rjmp	.+238    	; 0xbb2 <usart_init_rs232+0x27e>
     ac4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ac6:	f9 e0       	ldi	r31, 0x09	; 9
     ac8:	df 07       	cpc	r29, r31
     aca:	21 f4       	brne	.+8      	; 0xad4 <usart_init_rs232+0x1a0>
     acc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     ace:	84 e0       	ldi	r24, 0x04	; 4
     ad0:	77 d2       	rcall	.+1262   	; 0xfc0 <sysclk_enable_module>
     ad2:	6f c0       	rjmp	.+222    	; 0xbb2 <usart_init_rs232+0x27e>
     ad4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	d8 07       	cpc	r29, r24
     ada:	21 f4       	brne	.+8      	; 0xae4 <usart_init_rs232+0x1b0>
     adc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     ade:	85 e0       	ldi	r24, 0x05	; 5
     ae0:	6f d2       	rcall	.+1246   	; 0xfc0 <sysclk_enable_module>
     ae2:	67 c0       	rjmp	.+206    	; 0xbb2 <usart_init_rs232+0x27e>
     ae4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     ae6:	eb e0       	ldi	r30, 0x0B	; 11
     ae8:	de 07       	cpc	r29, r30
     aea:	21 f4       	brne	.+8      	; 0xaf4 <usart_init_rs232+0x1c0>
     aec:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	67 d2       	rcall	.+1230   	; 0xfc0 <sysclk_enable_module>
     af2:	5f c0       	rjmp	.+190    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     af4:	c0 3a       	cpi	r28, 0xA0	; 160
     af6:	f8 e0       	ldi	r31, 0x08	; 8
     af8:	df 07       	cpc	r29, r31
     afa:	21 f4       	brne	.+8      	; 0xb04 <usart_init_rs232+0x1d0>
     afc:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	5f d2       	rcall	.+1214   	; 0xfc0 <sysclk_enable_module>
     b02:	57 c0       	rjmp	.+174    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     b04:	c0 3a       	cpi	r28, 0xA0	; 160
     b06:	89 e0       	ldi	r24, 0x09	; 9
     b08:	d8 07       	cpc	r29, r24
     b0a:	21 f4       	brne	.+8      	; 0xb14 <usart_init_rs232+0x1e0>
     b0c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	57 d2       	rcall	.+1198   	; 0xfc0 <sysclk_enable_module>
     b12:	4f c0       	rjmp	.+158    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b14:	c0 3a       	cpi	r28, 0xA0	; 160
     b16:	ea e0       	ldi	r30, 0x0A	; 10
     b18:	de 07       	cpc	r29, r30
     b1a:	21 f4       	brne	.+8      	; 0xb24 <usart_init_rs232+0x1f0>
     b1c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     b1e:	85 e0       	ldi	r24, 0x05	; 5
     b20:	4f d2       	rcall	.+1182   	; 0xfc0 <sysclk_enable_module>
     b22:	47 c0       	rjmp	.+142    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     b24:	c0 3a       	cpi	r28, 0xA0	; 160
     b26:	fb e0       	ldi	r31, 0x0B	; 11
     b28:	df 07       	cpc	r29, r31
     b2a:	21 f4       	brne	.+8      	; 0xb34 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b2c:	60 e1       	ldi	r22, 0x10	; 16
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	47 d2       	rcall	.+1166   	; 0xfc0 <sysclk_enable_module>
     b32:	3f c0       	rjmp	.+126    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b34:	c0 3b       	cpi	r28, 0xB0	; 176
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	d8 07       	cpc	r29, r24
     b3a:	21 f4       	brne	.+8      	; 0xb44 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b3c:	60 e2       	ldi	r22, 0x20	; 32
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	3f d2       	rcall	.+1150   	; 0xfc0 <sysclk_enable_module>
     b42:	37 c0       	rjmp	.+110    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b44:	c0 3b       	cpi	r28, 0xB0	; 176
     b46:	e9 e0       	ldi	r30, 0x09	; 9
     b48:	de 07       	cpc	r29, r30
     b4a:	21 f4       	brne	.+8      	; 0xb54 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b4c:	60 e2       	ldi	r22, 0x20	; 32
     b4e:	84 e0       	ldi	r24, 0x04	; 4
     b50:	37 d2       	rcall	.+1134   	; 0xfc0 <sysclk_enable_module>
     b52:	2f c0       	rjmp	.+94     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b54:	c0 3b       	cpi	r28, 0xB0	; 176
     b56:	fa e0       	ldi	r31, 0x0A	; 10
     b58:	df 07       	cpc	r29, r31
     b5a:	21 f4       	brne	.+8      	; 0xb64 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b5c:	60 e2       	ldi	r22, 0x20	; 32
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	2f d2       	rcall	.+1118   	; 0xfc0 <sysclk_enable_module>
     b62:	27 c0       	rjmp	.+78     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b64:	c0 3b       	cpi	r28, 0xB0	; 176
     b66:	8b e0       	ldi	r24, 0x0B	; 11
     b68:	d8 07       	cpc	r29, r24
     b6a:	21 f4       	brne	.+8      	; 0xb74 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b6c:	60 e2       	ldi	r22, 0x20	; 32
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	27 d2       	rcall	.+1102   	; 0xfc0 <sysclk_enable_module>
     b72:	1f c0       	rjmp	.+62     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b74:	c0 38       	cpi	r28, 0x80	; 128
     b76:	e4 e0       	ldi	r30, 0x04	; 4
     b78:	de 07       	cpc	r29, r30
     b7a:	21 f4       	brne	.+8      	; 0xb84 <usart_init_rs232+0x250>
     b7c:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	1f d2       	rcall	.+1086   	; 0xfc0 <sysclk_enable_module>
     b82:	17 c0       	rjmp	.+46     	; 0xbb2 <usart_init_rs232+0x27e>
     b84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b86:	f4 e0       	ldi	r31, 0x04	; 4
     b88:	df 07       	cpc	r29, r31
     b8a:	21 f4       	brne	.+8      	; 0xb94 <usart_init_rs232+0x260>
     b8c:	60 e4       	ldi	r22, 0x40	; 64
     b8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b90:	17 d2       	rcall	.+1070   	; 0xfc0 <sysclk_enable_module>
     b92:	0f c0       	rjmp	.+30     	; 0xbb2 <usart_init_rs232+0x27e>
     b94:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	d8 07       	cpc	r29, r24
     b9a:	21 f4       	brne	.+8      	; 0xba4 <usart_init_rs232+0x270>
     b9c:	60 e4       	ldi	r22, 0x40	; 64
     b9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     ba0:	0f d2       	rcall	.+1054   	; 0xfc0 <sysclk_enable_module>
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <usart_init_rs232+0x27e>
     ba4:	c0 3b       	cpi	r28, 0xB0	; 176
     ba6:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     ba8:	de 07       	cpc	r29, r30
     baa:	19 f4       	brne	.+6      	; 0xbb2 <usart_init_rs232+0x27e>
     bac:	60 e4       	ldi	r22, 0x40	; 64
     bae:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     bb0:	07 d2       	rcall	.+1038   	; 0xfc0 <sysclk_enable_module>
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     bb6:	8d 83       	std	Y+5, r24	; 0x05
     bb8:	f8 01       	movw	r30, r16
     bba:	95 81       	ldd	r25, Z+5	; 0x05
     bbc:	84 81       	ldd	r24, Z+4	; 0x04
     bbe:	89 2b       	or	r24, r25
     bc0:	96 81       	ldd	r25, Z+6	; 0x06
     bc2:	91 11       	cpse	r25, r1
     bc4:	98 e0       	ldi	r25, 0x08	; 8
     bc6:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     bc8:	8d 83       	std	Y+5, r24	; 0x05
     bca:	f8 01       	movw	r30, r16
     bcc:	40 81       	ld	r20, Z
     bce:	51 81       	ldd	r21, Z+1	; 0x01
     bd0:	62 81       	ldd	r22, Z+2	; 0x02
     bd2:	73 81       	ldd	r23, Z+3	; 0x03
     bd4:	00 e0       	ldi	r16, 0x00	; 0
     bd6:	18 e4       	ldi	r17, 0x48	; 72
     bd8:	28 ee       	ldi	r18, 0xE8	; 232
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	ce 01       	movw	r24, r28
     bde:	97 dd       	rcall	.-1234   	; 0x70e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	98 60       	ori	r25, 0x08	; 8
     be4:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	90 61       	ori	r25, 0x10	; 16
     bea:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     bfc:	82 dd       	rcall	.-1276   	; 0x702 <usart_getchar>
     bfe:	88 83       	st	Y, r24
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     c06:	75 cd       	rjmp	.-1302   	; 0x6f2 <usart_putchar>
}
     c08:	08 95       	ret

00000c0a <data_terminal_init>:

#include <asf.h>
#include "uart.h"

void data_terminal_init()
{
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	27 97       	sbiw	r28, 0x07	; 7
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     c18:	60 e1       	ldi	r22, 0x10	; 16
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	d1 d1       	rcall	.+930    	; 0xfc0 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     c1e:	e0 e8       	ldi	r30, 0x80	; 128
     c20:	f6 e0       	ldi	r31, 0x06	; 6
     c22:	80 81       	ld	r24, Z
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     c28:	80 ea       	ldi	r24, 0xA0	; 160
     c2a:	9a e0       	ldi	r25, 0x0A	; 10
     c2c:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <stdio_base>
     c30:	90 93 8a 21 	sts	0x218A, r25	; 0x80218a <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	96 e0       	ldi	r25, 0x06	; 6
     c38:	80 93 87 21 	sts	0x2187, r24	; 0x802187 <ptr_put>
     c3c:	90 93 88 21 	sts	0x2188, r25	; 0x802188 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     c40:	8b ef       	ldi	r24, 0xFB	; 251
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	80 93 85 21 	sts	0x2185, r24	; 0x802185 <ptr_get>
     c48:	90 93 86 21 	sts	0x2186, r25	; 0x802186 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c4c:	e6 e0       	ldi	r30, 0x06	; 6
     c4e:	f0 e2       	ldi	r31, 0x20	; 32
     c50:	84 81       	ldd	r24, Z+4	; 0x04
     c52:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c54:	85 81       	ldd	r24, Z+5	; 0x05
     c56:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c58:	86 81       	ldd	r24, Z+6	; 0x06
     c5a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	a2 81       	ldd	r26, Z+2	; 0x02
     c62:	b3 81       	ldd	r27, Z+3	; 0x03
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	ab 83       	std	Y+3, r26	; 0x03
     c6a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     c6c:	60 e1       	ldi	r22, 0x10	; 16
     c6e:	85 e0       	ldi	r24, 0x05	; 5
     c70:	a7 d1       	rcall	.+846    	; 0xfc0 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c72:	be 01       	movw	r22, r28
     c74:	6f 5f       	subi	r22, 0xFF	; 255
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	80 ea       	ldi	r24, 0xA0	; 160
     c7a:	9a e0       	ldi	r25, 0x0A	; 10
     c7c:	5b de       	rcall	.-842    	; 0x934 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     c7e:	66 e6       	ldi	r22, 0x66	; 102
     c80:	71 e0       	ldi	r23, 0x01	; 1
     c82:	8f e7       	ldi	r24, 0x7F	; 127
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
     c8a:	27 96       	adiw	r28, 0x07	; 7
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <XBEE_uart_init>:

#include <asf.h>
#include <string.h>
#include "xbee.h"

void XBEE_uart_init(void){
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	27 97       	sbiw	r28, 0x07	; 7
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     ca4:	60 e1       	ldi	r22, 0x10	; 16
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8b d1       	rcall	.+790    	; 0xfc0 <sysclk_enable_module>
		.charlength =	XBEE_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	XBEE_TERMINAL_SERIAL_PARITY,
		.stopbits	=	XBEE_TERMINAL_SERIAL_STOP_BIT
	};
	
	XBEE_TERMINAL_PORT.DIR |= XBEE_TERMINAL_TX_PIN; // Puts pin to output
     caa:	e0 e4       	ldi	r30, 0x40	; 64
     cac:	f6 e0       	ldi	r31, 0x06	; 6
     cae:	80 81       	ld	r24, Z
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     cb4:	ed e0       	ldi	r30, 0x0D	; 13
     cb6:	f0 e2       	ldi	r31, 0x20	; 32
     cb8:	84 81       	ldd	r24, Z+4	; 0x04
     cba:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     cbc:	85 81       	ldd	r24, Z+5	; 0x05
     cbe:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     cc0:	86 81       	ldd	r24, Z+6	; 0x06
     cc2:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	a2 81       	ldd	r26, Z+2	; 0x02
     cca:	b3 81       	ldd	r27, Z+3	; 0x03
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	ab 83       	std	Y+3, r26	; 0x03
     cd2:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
     cd4:	60 e1       	ldi	r22, 0x10	; 16
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	73 d1       	rcall	.+742    	; 0xfc0 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     cda:	be 01       	movw	r22, r28
     cdc:	6f 5f       	subi	r22, 0xFF	; 255
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	80 ea       	ldi	r24, 0xA0	; 160
     ce2:	98 e0       	ldi	r25, 0x08	; 8
     ce4:	27 de       	rcall	.-946    	; 0x934 <usart_init_rs232>
	
	usart_serial_init(XBEE_TERMINAL_SERIAL,&XBEE_config);
}
     ce6:	27 96       	adiw	r28, 0x07	; 7
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <XBEE_write>:

void XBEE_write(char* data){
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(data); i++){
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <XBEE_write+0x1c>
		usart_putchar(XBEE_TERMINAL_SERIAL, (uint8_t) data[i]);
     cfe:	fe 01       	movw	r30, r28
     d00:	e8 0f       	add	r30, r24
     d02:	f9 1f       	adc	r31, r25
     d04:	60 81       	ld	r22, Z
     d06:	80 ea       	ldi	r24, 0xA0	; 160
     d08:	98 e0       	ldi	r25, 0x08	; 8
     d0a:	f3 dc       	rcall	.-1562   	; 0x6f2 <usart_putchar>
	
	usart_serial_init(XBEE_TERMINAL_SERIAL,&XBEE_config);
}

void XBEE_write(char* data){
	for(uint8_t i = 0; i < strlen(data); i++){
     d0c:	1f 5f       	subi	r17, 0xFF	; 255
     d0e:	81 2f       	mov	r24, r17
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	fe 01       	movw	r30, r28
     d14:	01 90       	ld	r0, Z+
     d16:	00 20       	and	r0, r0
     d18:	e9 f7       	brne	.-6      	; 0xd14 <XBEE_write+0x22>
     d1a:	31 97       	sbiw	r30, 0x01	; 1
     d1c:	ec 1b       	sub	r30, r28
     d1e:	fd 0b       	sbc	r31, r29
     d20:	8e 17       	cp	r24, r30
     d22:	9f 07       	cpc	r25, r31
     d24:	60 f3       	brcs	.-40     	; 0xcfe <XBEE_write+0xc>
		usart_putchar(XBEE_TERMINAL_SERIAL, (uint8_t) data[i]);
	}
	usart_putchar(XBEE_TERMINAL_SERIAL, 10);
     d26:	6a e0       	ldi	r22, 0x0A	; 10
     d28:	80 ea       	ldi	r24, 0xA0	; 160
     d2a:	98 e0       	ldi	r25, 0x08	; 8
     d2c:	e2 dc       	rcall	.-1596   	; 0x6f2 <usart_putchar>
}
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <rbu8_init>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     d36:	fc 01       	movw	r30, r24
     d38:	12 82       	std	Z+2, r1	; 0x02
     d3a:	13 82       	std	Z+3, r1	; 0x03
     d3c:	14 82       	std	Z+4, r1	; 0x04
     d3e:	15 82       	std	Z+5, r1	; 0x05
     d40:	66 83       	std	Z+6, r22	; 0x06
     d42:	77 83       	std	Z+7, r23	; 0x07
     d44:	40 83       	st	Z, r20
     d46:	51 83       	std	Z+1, r21	; 0x01
     d48:	08 95       	ret

00000d4a <rb16_write>:
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	fc 01       	movw	r30, r24
     d50:	41 15       	cp	r20, r1
     d52:	51 05       	cpc	r21, r1
     d54:	b1 f1       	breq	.+108    	; 0xdc2 <rb16_write+0x78>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	db 01       	movw	r26, r22
     d62:	a8 0f       	add	r26, r24
     d64:	b9 1f       	adc	r27, r25
     d66:	8d 91       	ld	r24, X+
     d68:	9c 91       	ld	r25, X
     d6a:	a2 81       	ldd	r26, Z+2	; 0x02
     d6c:	b3 81       	ldd	r27, Z+3	; 0x03
     d6e:	aa 0f       	add	r26, r26
     d70:	bb 1f       	adc	r27, r27
     d72:	c6 81       	ldd	r28, Z+6	; 0x06
     d74:	d7 81       	ldd	r29, Z+7	; 0x07
     d76:	ac 0f       	add	r26, r28
     d78:	bd 1f       	adc	r27, r29
     d7a:	8d 93       	st	X+, r24
     d7c:	9c 93       	st	X, r25
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	82 83       	std	Z+2, r24	; 0x02
     d86:	93 83       	std	Z+3, r25	; 0x03
     d88:	a0 81       	ld	r26, Z
     d8a:	b1 81       	ldd	r27, Z+1	; 0x01
     d8c:	8a 17       	cp	r24, r26
     d8e:	9b 07       	cpc	r25, r27
     d90:	11 f4       	brne	.+4      	; 0xd96 <rb16_write+0x4c>
     d92:	12 82       	std	Z+2, r1	; 0x02
     d94:	13 82       	std	Z+3, r1	; 0x03
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	c4 81       	ldd	r28, Z+4	; 0x04
     d9c:	d5 81       	ldd	r29, Z+5	; 0x05
     d9e:	8c 17       	cp	r24, r28
     da0:	9d 07       	cpc	r25, r29
     da2:	49 f4       	brne	.+18     	; 0xdb6 <rb16_write+0x6c>
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	a8 17       	cp	r26, r24
     da8:	b9 07       	cpc	r27, r25
     daa:	19 f0       	breq	.+6      	; 0xdb2 <rb16_write+0x68>
     dac:	84 83       	std	Z+4, r24	; 0x04
     dae:	95 83       	std	Z+5, r25	; 0x05
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <rb16_write+0x6c>
     db2:	14 82       	std	Z+4, r1	; 0x04
     db4:	15 82       	std	Z+5, r1	; 0x05
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	82 2f       	mov	r24, r18
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	84 17       	cp	r24, r20
     dbe:	95 07       	cpc	r25, r21
     dc0:	68 f2       	brcs	.-102    	; 0xd5c <rb16_write+0x12>
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <rb16_init>:
     dc8:	fc 01       	movw	r30, r24
     dca:	12 82       	std	Z+2, r1	; 0x02
     dcc:	13 82       	std	Z+3, r1	; 0x03
     dce:	14 82       	std	Z+4, r1	; 0x04
     dd0:	15 82       	std	Z+5, r1	; 0x05
     dd2:	66 83       	std	Z+6, r22	; 0x06
     dd4:	77 83       	std	Z+7, r23	; 0x07
     dd6:	40 83       	st	Z, r20
     dd8:	51 83       	std	Z+1, r21	; 0x01
     dda:	08 95       	ret

00000ddc <rb16_get_nth>:
     ddc:	dc 01       	movw	r26, r24
     dde:	12 96       	adiw	r26, 0x02	; 2
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	13 97       	sbiw	r26, 0x03	; 3
     de6:	cb 01       	movw	r24, r22
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	e8 17       	cp	r30, r24
     dec:	f9 07       	cpc	r31, r25
     dee:	78 f0       	brcs	.+30     	; 0xe0e <rb16_get_nth+0x32>
     df0:	e1 50       	subi	r30, 0x01	; 1
     df2:	f0 48       	sbci	r31, 0x80	; 128
     df4:	e6 1b       	sub	r30, r22
     df6:	f7 0b       	sbc	r31, r23
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	16 96       	adiw	r26, 0x06	; 6
     dfe:	8d 91       	ld	r24, X+
     e00:	9c 91       	ld	r25, X
     e02:	17 97       	sbiw	r26, 0x07	; 7
     e04:	e8 0f       	add	r30, r24
     e06:	f9 1f       	adc	r31, r25
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	08 95       	ret
     e0e:	2d 91       	ld	r18, X+
     e10:	3c 91       	ld	r19, X
     e12:	11 97       	sbiw	r26, 0x01	; 1
     e14:	e2 0f       	add	r30, r18
     e16:	f3 1f       	adc	r31, r19
     e18:	e1 50       	subi	r30, 0x01	; 1
     e1a:	f0 48       	sbci	r31, 0x80	; 128
     e1c:	e6 1b       	sub	r30, r22
     e1e:	f7 0b       	sbc	r31, r23
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	16 96       	adiw	r26, 0x06	; 6
     e26:	8d 91       	ld	r24, X+
     e28:	9c 91       	ld	r25, X
     e2a:	17 97       	sbiw	r26, 0x07	; 7
     e2c:	e8 0f       	add	r30, r24
     e2e:	f9 1f       	adc	r31, r25
     e30:	80 81       	ld	r24, Z
     e32:	91 81       	ldd	r25, Z+1	; 0x01
     e34:	08 95       	ret

00000e36 <rb32_write>:
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	fc 01       	movw	r30, r24
     e44:	41 15       	cp	r20, r1
     e46:	51 05       	cpc	r21, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <rb32_write+0x16>
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <rb32_write+0x94>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	db 01       	movw	r26, r22
     e5c:	a8 0f       	add	r26, r24
     e5e:	b9 1f       	adc	r27, r25
     e60:	cd 90       	ld	r12, X+
     e62:	dd 90       	ld	r13, X+
     e64:	ed 90       	ld	r14, X+
     e66:	fc 90       	ld	r15, X
     e68:	a2 81       	ldd	r26, Z+2	; 0x02
     e6a:	b3 81       	ldd	r27, Z+3	; 0x03
     e6c:	aa 0f       	add	r26, r26
     e6e:	bb 1f       	adc	r27, r27
     e70:	aa 0f       	add	r26, r26
     e72:	bb 1f       	adc	r27, r27
     e74:	86 81       	ldd	r24, Z+6	; 0x06
     e76:	97 81       	ldd	r25, Z+7	; 0x07
     e78:	a8 0f       	add	r26, r24
     e7a:	b9 1f       	adc	r27, r25
     e7c:	cd 92       	st	X+, r12
     e7e:	dd 92       	st	X+, r13
     e80:	ed 92       	st	X+, r14
     e82:	fc 92       	st	X, r15
     e84:	13 97       	sbiw	r26, 0x03	; 3
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	82 83       	std	Z+2, r24	; 0x02
     e8e:	93 83       	std	Z+3, r25	; 0x03
     e90:	a0 81       	ld	r26, Z
     e92:	b1 81       	ldd	r27, Z+1	; 0x01
     e94:	8a 17       	cp	r24, r26
     e96:	9b 07       	cpc	r25, r27
     e98:	11 f4       	brne	.+4      	; 0xe9e <rb32_write+0x68>
     e9a:	12 82       	std	Z+2, r1	; 0x02
     e9c:	13 82       	std	Z+3, r1	; 0x03
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	c4 81       	ldd	r28, Z+4	; 0x04
     ea4:	d5 81       	ldd	r29, Z+5	; 0x05
     ea6:	8c 17       	cp	r24, r28
     ea8:	9d 07       	cpc	r25, r29
     eaa:	49 f4       	brne	.+18     	; 0xebe <rb32_write+0x88>
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	a8 17       	cp	r26, r24
     eb0:	b9 07       	cpc	r27, r25
     eb2:	19 f0       	breq	.+6      	; 0xeba <rb32_write+0x84>
     eb4:	84 83       	std	Z+4, r24	; 0x04
     eb6:	95 83       	std	Z+5, r25	; 0x05
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <rb32_write+0x88>
     eba:	14 82       	std	Z+4, r1	; 0x04
     ebc:	15 82       	std	Z+5, r1	; 0x05
     ebe:	2f 5f       	subi	r18, 0xFF	; 255
     ec0:	82 2f       	mov	r24, r18
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	84 17       	cp	r24, r20
     ec6:	95 07       	cpc	r25, r21
     ec8:	20 f2       	brcs	.-120    	; 0xe52 <rb32_write+0x1c>
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	08 95       	ret

00000ed8 <rb32_init>:
     ed8:	fc 01       	movw	r30, r24
     eda:	12 82       	std	Z+2, r1	; 0x02
     edc:	13 82       	std	Z+3, r1	; 0x03
     ede:	14 82       	std	Z+4, r1	; 0x04
     ee0:	15 82       	std	Z+5, r1	; 0x05
     ee2:	66 83       	std	Z+6, r22	; 0x06
     ee4:	77 83       	std	Z+7, r23	; 0x07
     ee6:	40 83       	st	Z, r20
     ee8:	51 83       	std	Z+1, r21	; 0x01
     eea:	08 95       	ret

00000eec <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     eec:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     eee:	12 96       	adiw	r26, 0x02	; 2
     ef0:	ed 91       	ld	r30, X+
     ef2:	fc 91       	ld	r31, X
     ef4:	13 97       	sbiw	r26, 0x03	; 3
     ef6:	cb 01       	movw	r24, r22
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	e8 17       	cp	r30, r24
     efc:	f9 07       	cpc	r31, r25
     efe:	98 f0       	brcs	.+38     	; 0xf26 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     f00:	e1 50       	subi	r30, 0x01	; 1
     f02:	f0 4c       	sbci	r31, 0xC0	; 192
     f04:	e6 1b       	sub	r30, r22
     f06:	f7 0b       	sbc	r31, r23
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	16 96       	adiw	r26, 0x06	; 6
     f12:	8d 91       	ld	r24, X+
     f14:	9c 91       	ld	r25, X
     f16:	17 97       	sbiw	r26, 0x07	; 7
     f18:	e8 0f       	add	r30, r24
     f1a:	f9 1f       	adc	r31, r25
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     f26:	2d 91       	ld	r18, X+
     f28:	3c 91       	ld	r19, X
     f2a:	11 97       	sbiw	r26, 0x01	; 1
     f2c:	e2 0f       	add	r30, r18
     f2e:	f3 1f       	adc	r31, r19
     f30:	e1 50       	subi	r30, 0x01	; 1
     f32:	f0 4c       	sbci	r31, 0xC0	; 192
     f34:	e6 1b       	sub	r30, r22
     f36:	f7 0b       	sbc	r31, r23
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	ee 0f       	add	r30, r30
     f3e:	ff 1f       	adc	r31, r31
     f40:	16 96       	adiw	r26, 0x06	; 6
     f42:	8d 91       	ld	r24, X+
     f44:	9c 91       	ld	r25, X
     f46:	17 97       	sbiw	r26, 0x07	; 7
     f48:	e8 0f       	add	r30, r24
     f4a:	f9 1f       	adc	r31, r25
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
}
     f54:	08 95       	ret

00000f56 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	1f 92       	push	r1
     f5c:	1f 92       	push	r1
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     f68:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     f6c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     f70:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     f74:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     f78:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     f7c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f80:	8f b7       	in	r24, 0x3f	; 63
     f82:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f84:	f8 94       	cli
	return flags;
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f88:	e0 e5       	ldi	r30, 0x50	; 80
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	82 60       	ori	r24, 0x02	; 2
     f90:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f92:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f94:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f96:	81 ff       	sbrs	r24, 1
     f98:	fd cf       	rjmp	.-6      	; 0xf94 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	80 e4       	ldi	r24, 0x40	; 64
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	25 d0       	rcall	.+74     	; 0xfec <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fa2:	8f b7       	in	r24, 0x3f	; 63
     fa4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fa6:	f8 94       	cli
	return flags;
     fa8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     faa:	e0 e5       	ldi	r30, 0x50	; 80
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8e 7f       	andi	r24, 0xFE	; 254
     fb2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fb4:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	1f 92       	push	r1
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fca:	9f b7       	in	r25, 0x3f	; 63
     fcc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     fce:	f8 94       	cli
	return flags;
     fd0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     fd2:	e8 2f       	mov	r30, r24
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	e0 59       	subi	r30, 0x90	; 144
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	60 95       	com	r22
     fdc:	80 81       	ld	r24, Z
     fde:	68 23       	and	r22, r24
     fe0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fe2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     fec:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     fee:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     ff0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     ff2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     ff4:	60 83       	st	Z, r22
	ret                             // Return to caller
     ff6:	08 95       	ret

00000ff8 <__portable_avr_delay_cycles>:
	TCD0.CCA = (uint16_t) ((TCD0.PER) * (servo_on_time_us / 1000.0)); // makes the waveform be created for a duty cycle
}

void servo_timer_alt(void){
	TCD0.CCA = (uint16_t) ((TCD0.PER) * (servo_on_time_us / 1000.0)); // makes the waveform be created for a duty cycle
}
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <__portable_avr_delay_cycles+0xa>
     ffa:	61 50       	subi	r22, 0x01	; 1
     ffc:	71 09       	sbc	r23, r1
     ffe:	81 09       	sbc	r24, r1
    1000:	91 09       	sbc	r25, r1
    1002:	61 15       	cp	r22, r1
    1004:	71 05       	cpc	r23, r1
    1006:	81 05       	cpc	r24, r1
    1008:	91 05       	cpc	r25, r1
    100a:	b9 f7       	brne	.-18     	; 0xffa <__portable_avr_delay_cycles+0x2>
    100c:	08 95       	ret

0000100e <xbee_init>:
    100e:	43 de       	rcall	.-890    	; 0xc96 <XBEE_uart_init>
    1010:	6b ea       	ldi	r22, 0xAB	; 171
    1012:	79 e2       	ldi	r23, 0x29	; 41
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	ef df       	rcall	.-34     	; 0xff8 <__portable_avr_delay_cycles>
    101a:	80 e1       	ldi	r24, 0x10	; 16
    101c:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    1020:	08 95       	ret

00001022 <get_altitude>:
    1022:	4f 92       	push	r4
    1024:	5f 92       	push	r5
    1026:	6f 92       	push	r6
    1028:	7f 92       	push	r7
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	2b 01       	movw	r4, r22
    103c:	3c 01       	movw	r6, r24
    103e:	c0 90 1b 20 	lds	r12, 0x201B	; 0x80201b <L>
    1042:	d0 90 1c 20 	lds	r13, 0x201C	; 0x80201c <L+0x1>
    1046:	e0 90 1d 20 	lds	r14, 0x201D	; 0x80201d <L+0x2>
    104a:	f0 90 1e 20 	lds	r15, 0x201E	; 0x80201e <L+0x3>
    104e:	20 91 1f 20 	lds	r18, 0x201F	; 0x80201f <R>
    1052:	30 91 20 20 	lds	r19, 0x2020	; 0x802020 <R+0x1>
    1056:	40 91 21 20 	lds	r20, 0x2021	; 0x802021 <R+0x2>
    105a:	50 91 22 20 	lds	r21, 0x2022	; 0x802022 <R+0x3>
    105e:	c7 01       	movw	r24, r14
    1060:	b6 01       	movw	r22, r12
    1062:	11 d5       	rcall	.+2594   	; 0x1a86 <__mulsf3>
    1064:	20 91 17 20 	lds	r18, 0x2017	; 0x802017 <g_0>
    1068:	30 91 18 20 	lds	r19, 0x2018	; 0x802018 <g_0+0x1>
    106c:	40 91 19 20 	lds	r20, 0x2019	; 0x802019 <g_0+0x2>
    1070:	50 91 1a 20 	lds	r21, 0x201A	; 0x80201a <g_0+0x3>
    1074:	b9 d3       	rcall	.+1906   	; 0x17e8 <__divsf3>
    1076:	4b 01       	movw	r8, r22
    1078:	5c 01       	movw	r10, r24
    107a:	a3 01       	movw	r20, r6
    107c:	92 01       	movw	r18, r4
    107e:	60 91 27 20 	lds	r22, 0x2027	; 0x802027 <ground_p>
    1082:	70 91 28 20 	lds	r23, 0x2028	; 0x802028 <ground_p+0x1>
    1086:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <ground_p+0x2>
    108a:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <ground_p+0x3>
    108e:	ac d3       	rcall	.+1880   	; 0x17e8 <__divsf3>
    1090:	a5 01       	movw	r20, r10
    1092:	94 01       	movw	r18, r8
    1094:	5b d5       	rcall	.+2742   	; 0x1b4c <pow>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	3b d3       	rcall	.+1654   	; 0x1716 <__subsf3>
    10a0:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <ground_t>
    10a4:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <ground_t+0x1>
    10a8:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <ground_t+0x2>
    10ac:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <ground_t+0x3>
    10b0:	ea d4       	rcall	.+2516   	; 0x1a86 <__mulsf3>
    10b2:	a7 01       	movw	r20, r14
    10b4:	96 01       	movw	r18, r12
    10b6:	98 d3       	rcall	.+1840   	; 0x17e8 <__divsf3>
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	bf 90       	pop	r11
    10c2:	af 90       	pop	r10
    10c4:	9f 90       	pop	r9
    10c6:	8f 90       	pop	r8
    10c8:	7f 90       	pop	r7
    10ca:	6f 90       	pop	r6
    10cc:	5f 90       	pop	r5
    10ce:	4f 90       	pop	r4
    10d0:	08 95       	ret

000010d2 <get_velocity>:
    10d2:	2f 92       	push	r2
    10d4:	3f 92       	push	r3
    10d6:	4f 92       	push	r4
    10d8:	5f 92       	push	r5
    10da:	6f 92       	push	r6
    10dc:	7f 92       	push	r7
    10de:	8f 92       	push	r8
    10e0:	9f 92       	push	r9
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <get_velocity+0x26>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <get_velocity+0x28>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	6c 01       	movw	r12, r24
    1100:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    1104:	88 23       	and	r24, r24
    1106:	09 f4       	brne	.+2      	; 0x110a <get_velocity+0x38>
    1108:	68 c0       	rjmp	.+208    	; 0x11da <get_velocity+0x108>
    110a:	00 e0       	ldi	r16, 0x00	; 0
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	41 2c       	mov	r4, r1
    1110:	51 2c       	mov	r5, r1
    1112:	32 01       	movw	r6, r4
    1114:	86 2e       	mov	r8, r22
    1116:	91 2c       	mov	r9, r1
    1118:	a1 2c       	mov	r10, r1
    111a:	b1 2c       	mov	r11, r1
    111c:	89 82       	std	Y+1, r8	; 0x01
    111e:	9a 82       	std	Y+2, r9	; 0x02
    1120:	ab 82       	std	Y+3, r10	; 0x03
    1122:	bc 82       	std	Y+4, r11	; 0x04
    1124:	b8 01       	movw	r22, r16
    1126:	c6 01       	movw	r24, r12
    1128:	59 de       	rcall	.-846    	; 0xddc <rb16_get_nth>
    112a:	5c 01       	movw	r10, r24
    112c:	18 01       	movw	r2, r16
    112e:	2f ef       	ldi	r18, 0xFF	; 255
    1130:	22 1a       	sub	r2, r18
    1132:	32 0a       	sbc	r3, r18
    1134:	b1 01       	movw	r22, r2
    1136:	c6 01       	movw	r24, r12
    1138:	51 de       	rcall	.-862    	; 0xddc <rb16_get_nth>
    113a:	7c 01       	movw	r14, r24
    113c:	b8 01       	movw	r22, r16
    113e:	6e 5f       	subi	r22, 0xFE	; 254
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	c6 01       	movw	r24, r12
    1144:	4b de       	rcall	.-874    	; 0xddc <rb16_get_nth>
    1146:	a5 01       	movw	r20, r10
    1148:	bb 0c       	add	r11, r11
    114a:	66 0b       	sbc	r22, r22
    114c:	77 0b       	sbc	r23, r23
    114e:	8a 01       	movw	r16, r20
    1150:	9b 01       	movw	r18, r22
    1152:	00 0f       	add	r16, r16
    1154:	11 1f       	adc	r17, r17
    1156:	22 1f       	adc	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	40 0f       	add	r20, r16
    115c:	51 1f       	adc	r21, r17
    115e:	62 1f       	adc	r22, r18
    1160:	73 1f       	adc	r23, r19
    1162:	87 01       	movw	r16, r14
    1164:	ff 0c       	add	r15, r15
    1166:	22 0b       	sbc	r18, r18
    1168:	33 0b       	sbc	r19, r19
    116a:	78 01       	movw	r14, r16
    116c:	89 01       	movw	r16, r18
    116e:	ee 0c       	add	r14, r14
    1170:	ff 1c       	adc	r15, r15
    1172:	00 1f       	adc	r16, r16
    1174:	11 1f       	adc	r17, r17
    1176:	ee 0c       	add	r14, r14
    1178:	ff 1c       	adc	r15, r15
    117a:	00 1f       	adc	r16, r16
    117c:	11 1f       	adc	r17, r17
    117e:	4a 01       	movw	r8, r20
    1180:	5b 01       	movw	r10, r22
    1182:	8e 18       	sub	r8, r14
    1184:	9f 08       	sbc	r9, r15
    1186:	a0 0a       	sbc	r10, r16
    1188:	b1 0a       	sbc	r11, r17
    118a:	ac 01       	movw	r20, r24
    118c:	99 0f       	add	r25, r25
    118e:	66 0b       	sbc	r22, r22
    1190:	77 0b       	sbc	r23, r23
    1192:	d5 01       	movw	r26, r10
    1194:	c4 01       	movw	r24, r8
    1196:	84 0f       	add	r24, r20
    1198:	95 1f       	adc	r25, r21
    119a:	a6 1f       	adc	r26, r22
    119c:	b7 1f       	adc	r27, r23
    119e:	9c 01       	movw	r18, r24
    11a0:	ad 01       	movw	r20, r26
    11a2:	69 81       	ldd	r22, Y+1	; 0x01
    11a4:	7a 81       	ldd	r23, Y+2	; 0x02
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	35 d6       	rcall	.+3178   	; 0x1e16 <__mulsi3>
    11ac:	b8 d3       	rcall	.+1904   	; 0x191e <__floatsisf>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	67 d4       	rcall	.+2254   	; 0x1a86 <__mulsf3>
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	c3 01       	movw	r24, r6
    11be:	b2 01       	movw	r22, r4
    11c0:	ab d2       	rcall	.+1366   	; 0x1718 <__addsf3>
    11c2:	2b 01       	movw	r4, r22
    11c4:	3c 01       	movw	r6, r24
    11c6:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <data_samples>
    11ca:	81 01       	movw	r16, r2
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	22 16       	cp	r2, r18
    11d2:	33 06       	cpc	r3, r19
    11d4:	08 f4       	brcc	.+2      	; 0x11d8 <get_velocity+0x106>
    11d6:	a6 cf       	rjmp	.-180    	; 0x1124 <get_velocity+0x52>
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <get_velocity+0x10e>
    11da:	41 2c       	mov	r4, r1
    11dc:	51 2c       	mov	r5, r1
    11de:	32 01       	movw	r6, r4
    11e0:	68 2f       	mov	r22, r24
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	9a d3       	rcall	.+1844   	; 0x191e <__floatsisf>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	c3 01       	movw	r24, r6
    11f0:	b2 01       	movw	r22, r4
    11f2:	fa d2       	rcall	.+1524   	; 0x17e8 <__divsf3>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	48 ec       	ldi	r20, 0xC8	; 200
    11fa:	52 e4       	ldi	r21, 0x42	; 66
    11fc:	f5 d2       	rcall	.+1514   	; 0x17e8 <__divsf3>
    11fe:	26 96       	adiw	r28, 0x06	; 6
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	7f 90       	pop	r7
    121e:	6f 90       	pop	r6
    1220:	5f 90       	pop	r5
    1222:	4f 90       	pop	r4
    1224:	3f 90       	pop	r3
    1226:	2f 90       	pop	r2
    1228:	08 95       	ret

0000122a <data_check>:
    122a:	3f 92       	push	r3
    122c:	4f 92       	push	r4
    122e:	5f 92       	push	r5
    1230:	6f 92       	push	r6
    1232:	7f 92       	push	r7
    1234:	8f 92       	push	r8
    1236:	9f 92       	push	r9
    1238:	af 92       	push	r10
    123a:	bf 92       	push	r11
    123c:	cf 92       	push	r12
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	00 d0       	rcall	.+0      	; 0x124e <data_check+0x24>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <data_check+0x26>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	8c 01       	movw	r16, r24
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	1a 82       	std	Y+2, r1	; 0x02
    125a:	c1 2c       	mov	r12, r1
    125c:	d1 2c       	mov	r13, r1
    125e:	76 01       	movw	r14, r12
    1260:	69 81       	ldd	r22, Y+1	; 0x01
    1262:	7a 81       	ldd	r23, Y+2	; 0x02
    1264:	c8 01       	movw	r24, r16
    1266:	42 de       	rcall	.-892    	; 0xeec <rb32_get_nth>
    1268:	4b 01       	movw	r8, r22
    126a:	5c 01       	movw	r10, r24
    126c:	21 ea       	ldi	r18, 0xA1	; 161
    126e:	82 1a       	sub	r8, r18
    1270:	26 e8       	ldi	r18, 0x86	; 134
    1272:	92 0a       	sbc	r9, r18
    1274:	21 e0       	ldi	r18, 0x01	; 1
    1276:	a2 0a       	sbc	r10, r18
    1278:	b1 08       	sbc	r11, r1
    127a:	2f ed       	ldi	r18, 0xDF	; 223
    127c:	82 16       	cp	r8, r18
    127e:	2f e0       	ldi	r18, 0x0F	; 15
    1280:	92 06       	cpc	r9, r18
    1282:	27 e9       	ldi	r18, 0x97	; 151
    1284:	a2 06       	cpc	r10, r18
    1286:	b1 04       	cpc	r11, r1
    1288:	68 f4       	brcc	.+26     	; 0x12a4 <data_check+0x7a>
    128a:	49 d3       	rcall	.+1682   	; 0x191e <__floatsisf>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 ea       	ldi	r20, 0xA0	; 160
    1292:	50 e4       	ldi	r21, 0x40	; 64
    1294:	a9 d2       	rcall	.+1362   	; 0x17e8 <__divsf3>
    1296:	9b 01       	movw	r18, r22
    1298:	ac 01       	movw	r20, r24
    129a:	c7 01       	movw	r24, r14
    129c:	b6 01       	movw	r22, r12
    129e:	3c d2       	rcall	.+1144   	; 0x1718 <__addsf3>
    12a0:	6b 01       	movw	r12, r22
    12a2:	7c 01       	movw	r14, r24
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	9a 83       	std	Y+2, r25	; 0x02
    12ae:	05 97       	sbiw	r24, 0x05	; 5
    12b0:	b9 f6       	brne	.-82     	; 0x1260 <data_check+0x36>
    12b2:	19 82       	std	Y+1, r1	; 0x01
    12b4:	1a 82       	std	Y+2, r1	; 0x02
    12b6:	81 2c       	mov	r8, r1
    12b8:	91 2c       	mov	r9, r1
    12ba:	54 01       	movw	r10, r8
    12bc:	69 81       	ldd	r22, Y+1	; 0x01
    12be:	7a 81       	ldd	r23, Y+2	; 0x02
    12c0:	c8 01       	movw	r24, r16
    12c2:	14 de       	rcall	.-984    	; 0xeec <rb32_get_nth>
    12c4:	2b 01       	movw	r4, r22
    12c6:	3c 01       	movw	r6, r24
    12c8:	21 ea       	ldi	r18, 0xA1	; 161
    12ca:	42 1a       	sub	r4, r18
    12cc:	26 e8       	ldi	r18, 0x86	; 134
    12ce:	52 0a       	sbc	r5, r18
    12d0:	21 e0       	ldi	r18, 0x01	; 1
    12d2:	62 0a       	sbc	r6, r18
    12d4:	71 08       	sbc	r7, r1
    12d6:	2f ed       	ldi	r18, 0xDF	; 223
    12d8:	42 16       	cp	r4, r18
    12da:	2f e0       	ldi	r18, 0x0F	; 15
    12dc:	52 06       	cpc	r5, r18
    12de:	27 e9       	ldi	r18, 0x97	; 151
    12e0:	62 06       	cpc	r6, r18
    12e2:	71 04       	cpc	r7, r1
    12e4:	70 f4       	brcc	.+28     	; 0x1302 <data_check+0xd8>
    12e6:	1b d3       	rcall	.+1590   	; 0x191e <__floatsisf>
    12e8:	a7 01       	movw	r20, r14
    12ea:	96 01       	movw	r18, r12
    12ec:	14 d2       	rcall	.+1064   	; 0x1716 <__subsf3>
    12ee:	9b 01       	movw	r18, r22
    12f0:	ac 01       	movw	r20, r24
    12f2:	c9 d3       	rcall	.+1938   	; 0x1a86 <__mulsf3>
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	c5 01       	movw	r24, r10
    12fa:	b4 01       	movw	r22, r8
    12fc:	0d d2       	rcall	.+1050   	; 0x1718 <__addsf3>
    12fe:	4b 01       	movw	r8, r22
    1300:	5c 01       	movw	r10, r24
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	05 97       	sbiw	r24, 0x05	; 5
    130e:	b1 f6       	brne	.-84     	; 0x12bc <data_check+0x92>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5e e3       	ldi	r21, 0x3E	; 62
    1318:	c5 01       	movw	r24, r10
    131a:	b4 01       	movw	r22, r8
    131c:	b4 d3       	rcall	.+1896   	; 0x1a86 <__mulsf3>
    131e:	69 83       	std	Y+1, r22	; 0x01
    1320:	7a 83       	std	Y+2, r23	; 0x02
    1322:	8b 83       	std	Y+3, r24	; 0x03
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	1d 82       	std	Y+5, r1	; 0x05
    1328:	1e 82       	std	Y+6, r1	; 0x06
    132a:	31 2c       	mov	r3, r1
    132c:	41 2c       	mov	r4, r1
    132e:	51 2c       	mov	r5, r1
    1330:	32 01       	movw	r6, r4
    1332:	6d 81       	ldd	r22, Y+5	; 0x05
    1334:	7e 81       	ldd	r23, Y+6	; 0x06
    1336:	c8 01       	movw	r24, r16
    1338:	d9 dd       	rcall	.-1102   	; 0xeec <rb32_get_nth>
    133a:	4b 01       	movw	r8, r22
    133c:	5c 01       	movw	r10, r24
    133e:	21 ea       	ldi	r18, 0xA1	; 161
    1340:	82 1a       	sub	r8, r18
    1342:	26 e8       	ldi	r18, 0x86	; 134
    1344:	92 0a       	sbc	r9, r18
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	a2 0a       	sbc	r10, r18
    134a:	b1 08       	sbc	r11, r1
    134c:	2f ed       	ldi	r18, 0xDF	; 223
    134e:	82 16       	cp	r8, r18
    1350:	2f e0       	ldi	r18, 0x0F	; 15
    1352:	92 06       	cpc	r9, r18
    1354:	27 e9       	ldi	r18, 0x97	; 151
    1356:	a2 06       	cpc	r10, r18
    1358:	b1 04       	cpc	r11, r1
    135a:	20 f5       	brcc	.+72     	; 0x13a4 <data_check+0x17a>
    135c:	e0 d2       	rcall	.+1472   	; 0x191e <__floatsisf>
    135e:	4b 01       	movw	r8, r22
    1360:	5c 01       	movw	r10, r24
    1362:	a7 01       	movw	r20, r14
    1364:	96 01       	movw	r18, r12
    1366:	d7 d1       	rcall	.+942    	; 0x1716 <__subsf3>
    1368:	a7 d2       	rcall	.+1358   	; 0x18b8 <__fixsfsi>
    136a:	9b 01       	movw	r18, r22
    136c:	77 23       	and	r23, r23
    136e:	24 f4       	brge	.+8      	; 0x1378 <data_check+0x14e>
    1370:	22 27       	eor	r18, r18
    1372:	33 27       	eor	r19, r19
    1374:	26 1b       	sub	r18, r22
    1376:	37 0b       	sbc	r19, r23
    1378:	b9 01       	movw	r22, r18
    137a:	33 0f       	add	r19, r19
    137c:	88 0b       	sbc	r24, r24
    137e:	99 0b       	sbc	r25, r25
    1380:	ce d2       	rcall	.+1436   	; 0x191e <__floatsisf>
    1382:	9b 01       	movw	r18, r22
    1384:	ac 01       	movw	r20, r24
    1386:	69 81       	ldd	r22, Y+1	; 0x01
    1388:	7a 81       	ldd	r23, Y+2	; 0x02
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	77 d3       	rcall	.+1774   	; 0x1a7e <__gesf2>
    1390:	88 23       	and	r24, r24
    1392:	44 f0       	brlt	.+16     	; 0x13a4 <data_check+0x17a>
    1394:	a5 01       	movw	r20, r10
    1396:	94 01       	movw	r18, r8
    1398:	c3 01       	movw	r24, r6
    139a:	b2 01       	movw	r22, r4
    139c:	bd d1       	rcall	.+890    	; 0x1718 <__addsf3>
    139e:	2b 01       	movw	r4, r22
    13a0:	3c 01       	movw	r6, r24
    13a2:	33 94       	inc	r3
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	9e 83       	std	Y+6, r25	; 0x06
    13ae:	05 97       	sbiw	r24, 0x05	; 5
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <data_check+0x18a>
    13b2:	bf cf       	rjmp	.-130    	; 0x1332 <data_check+0x108>
    13b4:	33 20       	and	r3, r3
    13b6:	59 f0       	breq	.+22     	; 0x13ce <data_check+0x1a4>
    13b8:	63 2d       	mov	r22, r3
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	ac d2       	rcall	.+1368   	; 0x191a <__floatunsisf>
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	c3 01       	movw	r24, r6
    13c8:	b2 01       	movw	r22, r4
    13ca:	0e d2       	rcall	.+1052   	; 0x17e8 <__divsf3>
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <data_check+0x1ac>
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	80 e8       	ldi	r24, 0x80	; 128
    13d4:	9f eb       	ldi	r25, 0xBF	; 191
    13d6:	26 96       	adiw	r28, 0x06	; 6
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	9f 90       	pop	r9
    13f2:	8f 90       	pop	r8
    13f4:	7f 90       	pop	r7
    13f6:	6f 90       	pop	r6
    13f8:	5f 90       	pop	r5
    13fa:	4f 90       	pop	r4
    13fc:	3f 90       	pop	r3
    13fe:	08 95       	ret

00001400 <data_collect>:
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	00 d0       	rcall	.+0      	; 0x1416 <data_collect+0x16>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <data_collect+0x18>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	5c 01       	movw	r10, r24
    141e:	8b 01       	movw	r16, r22
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	96 e7       	ldi	r25, 0x76	; 118
    1424:	af e0       	ldi	r26, 0x0F	; 15
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	ab 83       	std	Y+3, r26	; 0x03
    142e:	bc 83       	std	Y+4, r27	; 0x04
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	be 01       	movw	r22, r28
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	c8 01       	movw	r24, r16
    143c:	fc dc       	rcall	.-1544   	; 0xe36 <rb32_write>
    143e:	c8 01       	movw	r24, r16
    1440:	f4 de       	rcall	.-536    	; 0x122a <data_check>
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e2       	ldi	r20, 0x20	; 32
    1448:	51 e4       	ldi	r21, 0x41	; 65
    144a:	ce d1       	rcall	.+924    	; 0x17e8 <__divsf3>
    144c:	6b 01       	movw	r12, r22
    144e:	7c 01       	movw	r14, r24
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f eb       	ldi	r21, 0xBF	; 191
    1458:	c3 d1       	rcall	.+902    	; 0x17e0 <__cmpsf2>
    145a:	88 23       	and	r24, r24
    145c:	71 f1       	breq	.+92     	; 0x14ba <data_collect+0xba>
    145e:	c0 92 7c 21 	sts	0x217C, r12	; 0x80217c <press>
    1462:	d0 92 7d 21 	sts	0x217D, r13	; 0x80217d <press+0x1>
    1466:	e0 92 7e 21 	sts	0x217E, r14	; 0x80217e <press+0x2>
    146a:	f0 92 7f 21 	sts	0x217F, r15	; 0x80217f <press+0x3>
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	d7 dd       	rcall	.-1106   	; 0x1022 <get_altitude>
    1474:	60 93 74 21 	sts	0x2174, r22	; 0x802174 <alt>
    1478:	70 93 75 21 	sts	0x2175, r23	; 0x802175 <alt+0x1>
    147c:	80 93 76 21 	sts	0x2176, r24	; 0x802176 <alt+0x2>
    1480:	90 93 77 21 	sts	0x2177, r25	; 0x802177 <alt+0x3>
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	48 ec       	ldi	r20, 0xC8	; 200
    148a:	52 e4       	ldi	r21, 0x42	; 66
    148c:	fc d2       	rcall	.+1528   	; 0x1a86 <__mulsf3>
    148e:	14 d2       	rcall	.+1064   	; 0x18b8 <__fixsfsi>
    1490:	6d 83       	std	Y+5, r22	; 0x05
    1492:	7e 83       	std	Y+6, r23	; 0x06
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	be 01       	movw	r22, r28
    149a:	6b 5f       	subi	r22, 0xFB	; 251
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	c5 01       	movw	r24, r10
    14a0:	54 dc       	rcall	.-1880   	; 0xd4a <rb16_write>
    14a2:	60 91 15 20 	lds	r22, 0x2015	; 0x802015 <rate>
    14a6:	c5 01       	movw	r24, r10
    14a8:	14 de       	rcall	.-984    	; 0x10d2 <get_velocity>
    14aa:	60 93 70 21 	sts	0x2170, r22	; 0x802170 <__data_end>
    14ae:	70 93 71 21 	sts	0x2171, r23	; 0x802171 <__data_end+0x1>
    14b2:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <__data_end+0x2>
    14b6:	90 93 73 21 	sts	0x2173, r25	; 0x802173 <__data_end+0x3>
    14ba:	83 e3       	ldi	r24, 0x33	; 51
    14bc:	93 e1       	ldi	r25, 0x13	; 19
    14be:	a0 e9       	ldi	r26, 0x90	; 144
    14c0:	b3 e4       	ldi	r27, 0x43	; 67
    14c2:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <temp>
    14c6:	90 93 79 21 	sts	0x2179, r25	; 0x802179 <temp+0x1>
    14ca:	a0 93 7a 21 	sts	0x217A, r26	; 0x80217a <temp+0x2>
    14ce:	b0 93 7b 21 	sts	0x217B, r27	; 0x80217b <temp+0x3>
    14d2:	26 96       	adiw	r28, 0x06	; 6
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	bf 90       	pop	r11
    14ea:	af 90       	pop	r10
    14ec:	08 95       	ret

000014ee <clock_init>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	85 e0       	ldi	r24, 0x05	; 5
    14f2:	66 dd       	rcall	.-1332   	; 0xfc0 <sysclk_enable_module>

void clock_init(void){
	sysclk_enable_peripheral_clock(&TCE0); // starts peripheral clock

	TCE0.CTRLA = 0x07; // divisor set to 1024
    14f4:	e0 e0       	ldi	r30, 0x00	; 0
    14f6:	fa e0       	ldi	r31, 0x0A	; 10
    14f8:	87 e0       	ldi	r24, 0x07	; 7
    14fa:	80 83       	st	Z, r24
	TCE0.PER = 31249; // 1 Hz
    14fc:	81 e1       	ldi	r24, 0x11	; 17
    14fe:	9a e7       	ldi	r25, 0x7A	; 122
    1500:	86 a3       	std	Z+38, r24	; 0x26
    1502:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	86 83       	std	Z+6, r24	; 0x06
    1508:	08 95       	ret

0000150a <system_init>:


// Sensor functions
void system_init(void){
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    150a:	25 dd       	rcall	.-1462   	; 0xf56 <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    150c:	6b ea       	ldi	r22, 0xAB	; 171
    150e:	79 e2       	ldi	r23, 0x29	; 41
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	71 dd       	rcall	.-1310   	; 0xff8 <__portable_avr_delay_cycles>
	sei();
    1516:	78 94       	sei
	
	// Initialization of pins
	PORTC.DIR = 0xBB; // makes Port C have pins, 7, 5, 4, 3, 1, 0 be output (0b10111011)
    1518:	e0 e4       	ldi	r30, 0x40	; 64
    151a:	f6 e0       	ldi	r31, 0x06	; 6
    151c:	8b eb       	ldi	r24, 0xBB	; 187
    151e:	80 83       	st	Z, r24
	PORTC.OUT = 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    1520:	80 e1       	ldi	r24, 0x10	; 16
    1522:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL = PMIC_LOLVLEN_bm; // enables lo level interrupts
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Driver Initialization
	data_terminal_init();
    152a:	6f db       	rcall	.-2338   	; 0xc0a <data_terminal_init>
	delay_ms(2);
    152c:	6b ea       	ldi	r22, 0xAB	; 171
    152e:	79 e2       	ldi	r23, 0x29	; 41
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	61 dd       	rcall	.-1342   	; 0xff8 <__portable_avr_delay_cycles>
	
//	adc_init();
	delay_ms(2);
    1536:	6b ea       	ldi	r22, 0xAB	; 171
    1538:	79 e2       	ldi	r23, 0x29	; 41
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	5c dd       	rcall	.-1352   	; 0xff8 <__portable_avr_delay_cycles>
	
//	spi_init();
	delay_ms(2);
    1540:	6b ea       	ldi	r22, 0xAB	; 171
    1542:	79 e2       	ldi	r23, 0x29	; 41
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	57 dd       	rcall	.-1362   	; 0xff8 <__portable_avr_delay_cycles>
	
//	pressure_init();
	delay_ms(2);
    154a:	6b ea       	ldi	r22, 0xAB	; 171
    154c:	79 e2       	ldi	r23, 0x29	; 41
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	52 dd       	rcall	.-1372   	; 0xff8 <__portable_avr_delay_cycles>
	
	xbee_init();
    1554:	5c dd       	rcall	.-1352   	; 0x100e <xbee_init>
    1556:	cb df       	rcall	.-106    	; 0x14ee <clock_init>
	//gps_init();
	
	clock_init();
    1558:	66 e5       	ldi	r22, 0x56	; 86
    155a:	70 ed       	ldi	r23, 0xD0	; 208
//	servo_timer_init();
	
	delay_ms(10);
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	4b cd       	rjmp	.-1386   	; 0xff8 <__portable_avr_delay_cycles>
    1562:	08 95       	ret

00001564 <main>:
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	cd b7       	in	r28, 0x3d	; 61
uint8_t gps[70];			// GPS sentences


////////////////////////////// Functions ///////////////////////////////
int main (void)
{
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	ce 55       	subi	r28, 0x5E	; 94
    156e:	d1 09       	sbc	r29, r1
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	de bf       	out	0x3e, r29	; 62
	system_init();
    1574:	ca df       	rcall	.-108    	; 0x150a <system_init>
	
	printf("time, packets, rate, pressure, temp, altitude, velocity, state\n");
    1576:	8b ed       	ldi	r24, 0xDB	; 219
    1578:	90 e2       	ldi	r25, 0x20	; 32
    157a:	fa d4       	rcall	.+2548   	; 0x1f70 <puts>
	
	uint8_t mem_array[] = {0,0,0,0,0,0,0,0,0,0};
    157c:	be 01       	movw	r22, r28
    157e:	6f 5f       	subi	r22, 0xFF	; 255
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8a e0       	ldi	r24, 0x0A	; 10
    1584:	fb 01       	movw	r30, r22
    1586:	11 92       	st	Z+, r1
    1588:	8a 95       	dec	r24
    158a:	e9 f7       	brne	.-6      	; 0x1586 <main+0x22>
	RingBufferu8_t gcs_comms;
	rbu8_init(&gcs_comms, mem_array, (uint16_t) 10);
    158c:	4a e0       	ldi	r20, 0x0A	; 10
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	ce 01       	movw	r24, r28
    1592:	0b 96       	adiw	r24, 0x0b	; 11
    1594:	d0 db       	rcall	.-2144   	; 0xd36 <rbu8_init>
	
	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    1596:	be 01       	movw	r22, r28
    1598:	6d 5e       	subi	r22, 0xED	; 237
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	84 e1       	ldi	r24, 0x14	; 20
    159e:	fb 01       	movw	r30, r22
    15a0:	11 92       	st	Z+, r1
    15a2:	8a 95       	dec	r24
    15a4:	e9 f7       	brne	.-6      	; 0x15a0 <main+0x3c>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    15a6:	4a e0       	ldi	r20, 0x0A	; 10
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	ce 01       	movw	r24, r28
    15ac:	87 96       	adiw	r24, 0x27	; 39
    15ae:	0c dc       	rcall	.-2024   	; 0xdc8 <rb16_init>
	
	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    15b0:	be 01       	movw	r22, r28
    15b2:	61 5d       	subi	r22, 0xD1	; 209
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	88 e2       	ldi	r24, 0x28	; 40
    15b8:	fb 01       	movw	r30, r22
    15ba:	11 92       	st	Z+, r1
    15bc:	8a 95       	dec	r24
    15be:	e9 f7       	brne	.-6      	; 0x15ba <main+0x56>
	RingBuffer32_t pressures;	// in Pascals / 10
	rb32_init(&pressures, press_array, (uint16_t) 10);
    15c0:	4a e0       	ldi	r20, 0x0A	; 10
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	ce 01       	movw	r24, r28
    15c6:	89 5a       	subi	r24, 0xA9	; 169
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	86 dc       	rcall	.-1780   	; 0xed8 <rb32_init>
	
	while(1){
		// Check Sensors
		data_collect(&altitudes,&pressures);
    15cc:	be 01       	movw	r22, r28
    15ce:	69 5a       	subi	r22, 0xA9	; 169
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	ce 01       	movw	r24, r28
    15d4:	87 96       	adiw	r24, 0x27	; 39
    15d6:	14 df       	rcall	.-472    	; 0x1400 <data_collect>
		
		// Checks State
		//state_check();
		
		//Gives each flight state their unique tasks
		switch(state){
    15d8:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <state>
    15dc:	84 30       	cpi	r24, 0x04	; 4
    15de:	10 f0       	brcs	.+4      	; 0x15e4 <main+0x80>
			case 2:
				break;
			case 3:
				break;
			default:
				state = 0;
    15e0:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <state>
				break;
		}	
		
		packets++;
    15e4:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <packets>
    15e8:	90 91 81 21 	lds	r25, 0x2181	; 0x802181 <packets+0x1>
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <packets>
    15f2:	90 93 81 21 	sts	0x2181, r25	; 0x802181 <packets+0x1>
		if(timer != 0){
    15f6:	60 91 82 21 	lds	r22, 0x2182	; 0x802182 <timer>
    15fa:	70 91 83 21 	lds	r23, 0x2183	; 0x802183 <timer+0x1>
    15fe:	61 15       	cp	r22, r1
    1600:	71 05       	cpc	r23, r1
			rate = packets / timer;
    1602:	29 f0       	breq	.+10     	; 0x160e <main+0xaa>
    1604:	17 d4       	rcall	.+2094   	; 0x1e34 <__udivmodhi4>
    1606:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <rate>
    160a:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <rate+0x1>
		//XBEE_write(str);
		
		
		char* mess = "5343,26,20,100,97065,15\0";
		//printf("Sending...\n%s\n", mess);
		XBEE_write(mess);
    160e:	8b eb       	ldi	r24, 0xBB	; 187
    1610:	90 e2       	ldi	r25, 0x20	; 32
		
		
		delay_ms(500);
    1612:	6f db       	rcall	.-2338   	; 0xcf2 <XBEE_write>
    1614:	6b ea       	ldi	r22, 0xAB	; 171
    1616:	70 eb       	ldi	r23, 0xB0	; 176
    1618:	88 e2       	ldi	r24, 0x28	; 40
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	ed dc       	rcall	.-1574   	; 0xff8 <__portable_avr_delay_cycles>
	}
    161e:	d6 cf       	rjmp	.-84     	; 0x15cc <main+0x68>

00001620 <__vector_47>:
	TCE0.CTRLA = 0x07; // divisor set to 1024
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

ISR(TCE0_OVF_vect){
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	08 b6       	in	r0, 0x38	; 56
    162c:	0f 92       	push	r0
    162e:	18 be       	out	0x38, r1	; 56
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
	timer++;
    1634:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <timer>
    1638:	90 91 83 21 	lds	r25, 0x2183	; 0x802183 <timer+0x1>
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <timer>
    1642:	90 93 83 21 	sts	0x2183, r25	; 0x802183 <timer+0x1>
}
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	0f 90       	pop	r0
    164c:	08 be       	out	0x38, r0	; 56
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	0f 90       	pop	r0
    1654:	1f 90       	pop	r1
    1656:	18 95       	reti

00001658 <__vector_25>:

ISR(USARTC0_RXC_vect){
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	0f 92       	push	r0
    1660:	11 24       	eor	r1, r1
    1662:	08 b6       	in	r0, 0x38	; 56
    1664:	0f 92       	push	r0
    1666:	18 be       	out	0x38, r1	; 56
    1668:	09 b6       	in	r0, 0x39	; 57
    166a:	0f 92       	push	r0
    166c:	19 be       	out	0x39, r1	; 57
    166e:	0b b6       	in	r0, 0x3b	; 59
    1670:	0f 92       	push	r0
    1672:	1b be       	out	0x3b, r1	; 59
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	cf 93       	push	r28
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    168e:	80 ea       	ldi	r24, 0xA0	; 160
    1690:	98 e0       	ldi	r25, 0x08	; 8
    1692:	37 d8       	rcall	.-3986   	; 0x702 <usart_getchar>
    1694:	c8 2f       	mov	r28, r24
	printf("%c", c);
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	66 d4       	rcall	.+2252   	; 0x1f66 <putchar>
	
	switch(c){
    169a:	cc 3c       	cpi	r28, 0xCC	; 204
    169c:	c9 f0       	breq	.+50     	; 0x16d0 <__vector_25+0x78>
    169e:	28 f4       	brcc	.+10     	; 0x16aa <__vector_25+0x52>
    16a0:	ca 3a       	cpi	r28, 0xAA	; 170
    16a2:	f1 f0       	breq	.+60     	; 0x16e0 <__vector_25+0x88>
    16a4:	cb 3b       	cpi	r28, 0xBB	; 187
    16a6:	c1 f0       	breq	.+48     	; 0x16d8 <__vector_25+0x80>
    16a8:	1e c0       	rjmp	.+60     	; 0x16e6 <__vector_25+0x8e>
    16aa:	ce 3e       	cpi	r28, 0xEE	; 238
    16ac:	49 f0       	breq	.+18     	; 0x16c0 <__vector_25+0x68>
    16ae:	cf 3f       	cpi	r28, 0xFF	; 255
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <__vector_25+0x60>
    16b2:	cd 3d       	cpi	r28, 0xDD	; 221
    16b4:	c1 f4       	brne	.+48     	; 0x16e6 <__vector_25+0x8e>
    16b6:	08 c0       	rjmp	.+16     	; 0x16c8 <__vector_25+0x70>
		case RESET:
			printf("RESET\n");
    16b8:	8a e1       	ldi	r24, 0x1A	; 26
    16ba:	91 e2       	ldi	r25, 0x21	; 33
    16bc:	59 d4       	rcall	.+2226   	; 0x1f70 <puts>
			break;
    16be:	13 c0       	rjmp	.+38     	; 0x16e6 <__vector_25+0x8e>
		case CALIBRATE:
			printf("CALIBRATE\n");
    16c0:	80 e2       	ldi	r24, 0x20	; 32
    16c2:	91 e2       	ldi	r25, 0x21	; 33
    16c4:	55 d4       	rcall	.+2218   	; 0x1f70 <puts>
			break;
		case CALIBRATE_CAMERA:
			printf("CALIBRATE_CAMERA\n");
    16c6:	0f c0       	rjmp	.+30     	; 0x16e6 <__vector_25+0x8e>
    16c8:	8a e2       	ldi	r24, 0x2A	; 42
    16ca:	91 e2       	ldi	r25, 0x21	; 33
			break;
    16cc:	51 d4       	rcall	.+2210   	; 0x1f70 <puts>
		case CALIBRATE_ALTITUDE:
			printf("CALIBRATE_ALTITUDE\n");
    16ce:	0b c0       	rjmp	.+22     	; 0x16e6 <__vector_25+0x8e>
    16d0:	8b e3       	ldi	r24, 0x3B	; 59
    16d2:	91 e2       	ldi	r25, 0x21	; 33
			break;
    16d4:	4d d4       	rcall	.+2202   	; 0x1f70 <puts>
		case CALIBRATE_ANGLE:
			printf("CALIBRATE_ANGLE\n");
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <__vector_25+0x8e>
    16d8:	8e e4       	ldi	r24, 0x4E	; 78
    16da:	91 e2       	ldi	r25, 0x21	; 33
			break;
    16dc:	49 d4       	rcall	.+2194   	; 0x1f70 <puts>
		case SEND_GPS_LOCATION:
			printf("SEND_GPS_LOCATION\n");
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <__vector_25+0x8e>
    16e0:	8e e5       	ldi	r24, 0x5E	; 94
    16e2:	91 e2       	ldi	r25, 0x21	; 33
    16e4:	45 d4       	rcall	.+2186   	; 0x1f70 <puts>
			break;
	}
}
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	cf 91       	pop	r28
    16ec:	bf 91       	pop	r27
    16ee:	af 91       	pop	r26
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	7f 91       	pop	r23
    16f6:	6f 91       	pop	r22
    16f8:	5f 91       	pop	r21
    16fa:	4f 91       	pop	r20
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0b be       	out	0x3b, r0	; 59
    1704:	0f 90       	pop	r0
    1706:	09 be       	out	0x39, r0	; 57
    1708:	0f 90       	pop	r0
    170a:	08 be       	out	0x38, r0	; 56
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	0f 90       	pop	r0
    1712:	1f 90       	pop	r1
    1714:	18 95       	reti

00001716 <__subsf3>:
    1716:	50 58       	subi	r21, 0x80	; 128

00001718 <__addsf3>:
    1718:	bb 27       	eor	r27, r27
    171a:	aa 27       	eor	r26, r26
    171c:	0e d0       	rcall	.+28     	; 0x173a <__addsf3x>
    171e:	75 c1       	rjmp	.+746    	; 0x1a0a <__fp_round>
    1720:	66 d1       	rcall	.+716    	; 0x19ee <__fp_pscA>
    1722:	30 f0       	brcs	.+12     	; 0x1730 <__addsf3+0x18>
    1724:	6b d1       	rcall	.+726    	; 0x19fc <__fp_pscB>
    1726:	20 f0       	brcs	.+8      	; 0x1730 <__addsf3+0x18>
    1728:	31 f4       	brne	.+12     	; 0x1736 <__addsf3+0x1e>
    172a:	9f 3f       	cpi	r25, 0xFF	; 255
    172c:	11 f4       	brne	.+4      	; 0x1732 <__addsf3+0x1a>
    172e:	1e f4       	brtc	.+6      	; 0x1736 <__addsf3+0x1e>
    1730:	5b c1       	rjmp	.+694    	; 0x19e8 <__fp_nan>
    1732:	0e f4       	brtc	.+2      	; 0x1736 <__addsf3+0x1e>
    1734:	e0 95       	com	r30
    1736:	e7 fb       	bst	r30, 7
    1738:	51 c1       	rjmp	.+674    	; 0x19dc <__fp_inf>

0000173a <__addsf3x>:
    173a:	e9 2f       	mov	r30, r25
    173c:	77 d1       	rcall	.+750    	; 0x1a2c <__fp_split3>
    173e:	80 f3       	brcs	.-32     	; 0x1720 <__addsf3+0x8>
    1740:	ba 17       	cp	r27, r26
    1742:	62 07       	cpc	r22, r18
    1744:	73 07       	cpc	r23, r19
    1746:	84 07       	cpc	r24, r20
    1748:	95 07       	cpc	r25, r21
    174a:	18 f0       	brcs	.+6      	; 0x1752 <__addsf3x+0x18>
    174c:	71 f4       	brne	.+28     	; 0x176a <__addsf3x+0x30>
    174e:	9e f5       	brtc	.+102    	; 0x17b6 <__addsf3x+0x7c>
    1750:	8f c1       	rjmp	.+798    	; 0x1a70 <__fp_zero>
    1752:	0e f4       	brtc	.+2      	; 0x1756 <__addsf3x+0x1c>
    1754:	e0 95       	com	r30
    1756:	0b 2e       	mov	r0, r27
    1758:	ba 2f       	mov	r27, r26
    175a:	a0 2d       	mov	r26, r0
    175c:	0b 01       	movw	r0, r22
    175e:	b9 01       	movw	r22, r18
    1760:	90 01       	movw	r18, r0
    1762:	0c 01       	movw	r0, r24
    1764:	ca 01       	movw	r24, r20
    1766:	a0 01       	movw	r20, r0
    1768:	11 24       	eor	r1, r1
    176a:	ff 27       	eor	r31, r31
    176c:	59 1b       	sub	r21, r25
    176e:	99 f0       	breq	.+38     	; 0x1796 <__addsf3x+0x5c>
    1770:	59 3f       	cpi	r21, 0xF9	; 249
    1772:	50 f4       	brcc	.+20     	; 0x1788 <__addsf3x+0x4e>
    1774:	50 3e       	cpi	r21, 0xE0	; 224
    1776:	68 f1       	brcs	.+90     	; 0x17d2 <__addsf3x+0x98>
    1778:	1a 16       	cp	r1, r26
    177a:	f0 40       	sbci	r31, 0x00	; 0
    177c:	a2 2f       	mov	r26, r18
    177e:	23 2f       	mov	r18, r19
    1780:	34 2f       	mov	r19, r20
    1782:	44 27       	eor	r20, r20
    1784:	58 5f       	subi	r21, 0xF8	; 248
    1786:	f3 cf       	rjmp	.-26     	; 0x176e <__addsf3x+0x34>
    1788:	46 95       	lsr	r20
    178a:	37 95       	ror	r19
    178c:	27 95       	ror	r18
    178e:	a7 95       	ror	r26
    1790:	f0 40       	sbci	r31, 0x00	; 0
    1792:	53 95       	inc	r21
    1794:	c9 f7       	brne	.-14     	; 0x1788 <__addsf3x+0x4e>
    1796:	7e f4       	brtc	.+30     	; 0x17b6 <__addsf3x+0x7c>
    1798:	1f 16       	cp	r1, r31
    179a:	ba 0b       	sbc	r27, r26
    179c:	62 0b       	sbc	r22, r18
    179e:	73 0b       	sbc	r23, r19
    17a0:	84 0b       	sbc	r24, r20
    17a2:	ba f0       	brmi	.+46     	; 0x17d2 <__addsf3x+0x98>
    17a4:	91 50       	subi	r25, 0x01	; 1
    17a6:	a1 f0       	breq	.+40     	; 0x17d0 <__addsf3x+0x96>
    17a8:	ff 0f       	add	r31, r31
    17aa:	bb 1f       	adc	r27, r27
    17ac:	66 1f       	adc	r22, r22
    17ae:	77 1f       	adc	r23, r23
    17b0:	88 1f       	adc	r24, r24
    17b2:	c2 f7       	brpl	.-16     	; 0x17a4 <__addsf3x+0x6a>
    17b4:	0e c0       	rjmp	.+28     	; 0x17d2 <__addsf3x+0x98>
    17b6:	ba 0f       	add	r27, r26
    17b8:	62 1f       	adc	r22, r18
    17ba:	73 1f       	adc	r23, r19
    17bc:	84 1f       	adc	r24, r20
    17be:	48 f4       	brcc	.+18     	; 0x17d2 <__addsf3x+0x98>
    17c0:	87 95       	ror	r24
    17c2:	77 95       	ror	r23
    17c4:	67 95       	ror	r22
    17c6:	b7 95       	ror	r27
    17c8:	f7 95       	ror	r31
    17ca:	9e 3f       	cpi	r25, 0xFE	; 254
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <__addsf3x+0x96>
    17ce:	b3 cf       	rjmp	.-154    	; 0x1736 <__addsf3+0x1e>
    17d0:	93 95       	inc	r25
    17d2:	88 0f       	add	r24, r24
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <__addsf3x+0x9e>
    17d6:	99 27       	eor	r25, r25
    17d8:	ee 0f       	add	r30, r30
    17da:	97 95       	ror	r25
    17dc:	87 95       	ror	r24
    17de:	08 95       	ret

000017e0 <__cmpsf2>:
    17e0:	d9 d0       	rcall	.+434    	; 0x1994 <__fp_cmp>
    17e2:	08 f4       	brcc	.+2      	; 0x17e6 <__cmpsf2+0x6>
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	08 95       	ret

000017e8 <__divsf3>:
    17e8:	0c d0       	rcall	.+24     	; 0x1802 <__divsf3x>
    17ea:	0f c1       	rjmp	.+542    	; 0x1a0a <__fp_round>
    17ec:	07 d1       	rcall	.+526    	; 0x19fc <__fp_pscB>
    17ee:	40 f0       	brcs	.+16     	; 0x1800 <__divsf3+0x18>
    17f0:	fe d0       	rcall	.+508    	; 0x19ee <__fp_pscA>
    17f2:	30 f0       	brcs	.+12     	; 0x1800 <__divsf3+0x18>
    17f4:	21 f4       	brne	.+8      	; 0x17fe <__divsf3+0x16>
    17f6:	5f 3f       	cpi	r21, 0xFF	; 255
    17f8:	19 f0       	breq	.+6      	; 0x1800 <__divsf3+0x18>
    17fa:	f0 c0       	rjmp	.+480    	; 0x19dc <__fp_inf>
    17fc:	51 11       	cpse	r21, r1
    17fe:	39 c1       	rjmp	.+626    	; 0x1a72 <__fp_szero>
    1800:	f3 c0       	rjmp	.+486    	; 0x19e8 <__fp_nan>

00001802 <__divsf3x>:
    1802:	14 d1       	rcall	.+552    	; 0x1a2c <__fp_split3>
    1804:	98 f3       	brcs	.-26     	; 0x17ec <__divsf3+0x4>

00001806 <__divsf3_pse>:
    1806:	99 23       	and	r25, r25
    1808:	c9 f3       	breq	.-14     	; 0x17fc <__divsf3+0x14>
    180a:	55 23       	and	r21, r21
    180c:	b1 f3       	breq	.-20     	; 0x17fa <__divsf3+0x12>
    180e:	95 1b       	sub	r25, r21
    1810:	55 0b       	sbc	r21, r21
    1812:	bb 27       	eor	r27, r27
    1814:	aa 27       	eor	r26, r26
    1816:	62 17       	cp	r22, r18
    1818:	73 07       	cpc	r23, r19
    181a:	84 07       	cpc	r24, r20
    181c:	38 f0       	brcs	.+14     	; 0x182c <__divsf3_pse+0x26>
    181e:	9f 5f       	subi	r25, 0xFF	; 255
    1820:	5f 4f       	sbci	r21, 0xFF	; 255
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	44 1f       	adc	r20, r20
    1828:	aa 1f       	adc	r26, r26
    182a:	a9 f3       	breq	.-22     	; 0x1816 <__divsf3_pse+0x10>
    182c:	33 d0       	rcall	.+102    	; 0x1894 <__divsf3_pse+0x8e>
    182e:	0e 2e       	mov	r0, r30
    1830:	3a f0       	brmi	.+14     	; 0x1840 <__divsf3_pse+0x3a>
    1832:	e0 e8       	ldi	r30, 0x80	; 128
    1834:	30 d0       	rcall	.+96     	; 0x1896 <__divsf3_pse+0x90>
    1836:	91 50       	subi	r25, 0x01	; 1
    1838:	50 40       	sbci	r21, 0x00	; 0
    183a:	e6 95       	lsr	r30
    183c:	00 1c       	adc	r0, r0
    183e:	ca f7       	brpl	.-14     	; 0x1832 <__divsf3_pse+0x2c>
    1840:	29 d0       	rcall	.+82     	; 0x1894 <__divsf3_pse+0x8e>
    1842:	fe 2f       	mov	r31, r30
    1844:	27 d0       	rcall	.+78     	; 0x1894 <__divsf3_pse+0x8e>
    1846:	66 0f       	add	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	88 1f       	adc	r24, r24
    184c:	bb 1f       	adc	r27, r27
    184e:	26 17       	cp	r18, r22
    1850:	37 07       	cpc	r19, r23
    1852:	48 07       	cpc	r20, r24
    1854:	ab 07       	cpc	r26, r27
    1856:	b0 e8       	ldi	r27, 0x80	; 128
    1858:	09 f0       	breq	.+2      	; 0x185c <__divsf3_pse+0x56>
    185a:	bb 0b       	sbc	r27, r27
    185c:	80 2d       	mov	r24, r0
    185e:	bf 01       	movw	r22, r30
    1860:	ff 27       	eor	r31, r31
    1862:	93 58       	subi	r25, 0x83	; 131
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	2a f0       	brmi	.+10     	; 0x1872 <__divsf3_pse+0x6c>
    1868:	9e 3f       	cpi	r25, 0xFE	; 254
    186a:	51 05       	cpc	r21, r1
    186c:	68 f0       	brcs	.+26     	; 0x1888 <__divsf3_pse+0x82>
    186e:	b6 c0       	rjmp	.+364    	; 0x19dc <__fp_inf>
    1870:	00 c1       	rjmp	.+512    	; 0x1a72 <__fp_szero>
    1872:	5f 3f       	cpi	r21, 0xFF	; 255
    1874:	ec f3       	brlt	.-6      	; 0x1870 <__divsf3_pse+0x6a>
    1876:	98 3e       	cpi	r25, 0xE8	; 232
    1878:	dc f3       	brlt	.-10     	; 0x1870 <__divsf3_pse+0x6a>
    187a:	86 95       	lsr	r24
    187c:	77 95       	ror	r23
    187e:	67 95       	ror	r22
    1880:	b7 95       	ror	r27
    1882:	f7 95       	ror	r31
    1884:	9f 5f       	subi	r25, 0xFF	; 255
    1886:	c9 f7       	brne	.-14     	; 0x187a <__divsf3_pse+0x74>
    1888:	88 0f       	add	r24, r24
    188a:	91 1d       	adc	r25, r1
    188c:	96 95       	lsr	r25
    188e:	87 95       	ror	r24
    1890:	97 f9       	bld	r25, 7
    1892:	08 95       	ret
    1894:	e1 e0       	ldi	r30, 0x01	; 1
    1896:	66 0f       	add	r22, r22
    1898:	77 1f       	adc	r23, r23
    189a:	88 1f       	adc	r24, r24
    189c:	bb 1f       	adc	r27, r27
    189e:	62 17       	cp	r22, r18
    18a0:	73 07       	cpc	r23, r19
    18a2:	84 07       	cpc	r24, r20
    18a4:	ba 07       	cpc	r27, r26
    18a6:	20 f0       	brcs	.+8      	; 0x18b0 <__divsf3_pse+0xaa>
    18a8:	62 1b       	sub	r22, r18
    18aa:	73 0b       	sbc	r23, r19
    18ac:	84 0b       	sbc	r24, r20
    18ae:	ba 0b       	sbc	r27, r26
    18b0:	ee 1f       	adc	r30, r30
    18b2:	88 f7       	brcc	.-30     	; 0x1896 <__divsf3_pse+0x90>
    18b4:	e0 95       	com	r30
    18b6:	08 95       	ret

000018b8 <__fixsfsi>:
    18b8:	04 d0       	rcall	.+8      	; 0x18c2 <__fixunssfsi>
    18ba:	68 94       	set
    18bc:	b1 11       	cpse	r27, r1
    18be:	d9 c0       	rjmp	.+434    	; 0x1a72 <__fp_szero>
    18c0:	08 95       	ret

000018c2 <__fixunssfsi>:
    18c2:	bc d0       	rcall	.+376    	; 0x1a3c <__fp_splitA>
    18c4:	88 f0       	brcs	.+34     	; 0x18e8 <__fixunssfsi+0x26>
    18c6:	9f 57       	subi	r25, 0x7F	; 127
    18c8:	90 f0       	brcs	.+36     	; 0x18ee <__fixunssfsi+0x2c>
    18ca:	b9 2f       	mov	r27, r25
    18cc:	99 27       	eor	r25, r25
    18ce:	b7 51       	subi	r27, 0x17	; 23
    18d0:	a0 f0       	brcs	.+40     	; 0x18fa <__fixunssfsi+0x38>
    18d2:	d1 f0       	breq	.+52     	; 0x1908 <__fixunssfsi+0x46>
    18d4:	66 0f       	add	r22, r22
    18d6:	77 1f       	adc	r23, r23
    18d8:	88 1f       	adc	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	1a f0       	brmi	.+6      	; 0x18e4 <__fixunssfsi+0x22>
    18de:	ba 95       	dec	r27
    18e0:	c9 f7       	brne	.-14     	; 0x18d4 <__fixunssfsi+0x12>
    18e2:	12 c0       	rjmp	.+36     	; 0x1908 <__fixunssfsi+0x46>
    18e4:	b1 30       	cpi	r27, 0x01	; 1
    18e6:	81 f0       	breq	.+32     	; 0x1908 <__fixunssfsi+0x46>
    18e8:	c3 d0       	rcall	.+390    	; 0x1a70 <__fp_zero>
    18ea:	b1 e0       	ldi	r27, 0x01	; 1
    18ec:	08 95       	ret
    18ee:	c0 c0       	rjmp	.+384    	; 0x1a70 <__fp_zero>
    18f0:	67 2f       	mov	r22, r23
    18f2:	78 2f       	mov	r23, r24
    18f4:	88 27       	eor	r24, r24
    18f6:	b8 5f       	subi	r27, 0xF8	; 248
    18f8:	39 f0       	breq	.+14     	; 0x1908 <__fixunssfsi+0x46>
    18fa:	b9 3f       	cpi	r27, 0xF9	; 249
    18fc:	cc f3       	brlt	.-14     	; 0x18f0 <__fixunssfsi+0x2e>
    18fe:	86 95       	lsr	r24
    1900:	77 95       	ror	r23
    1902:	67 95       	ror	r22
    1904:	b3 95       	inc	r27
    1906:	d9 f7       	brne	.-10     	; 0x18fe <__fixunssfsi+0x3c>
    1908:	3e f4       	brtc	.+14     	; 0x1918 <__fixunssfsi+0x56>
    190a:	90 95       	com	r25
    190c:	80 95       	com	r24
    190e:	70 95       	com	r23
    1910:	61 95       	neg	r22
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	8f 4f       	sbci	r24, 0xFF	; 255
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	08 95       	ret

0000191a <__floatunsisf>:
    191a:	e8 94       	clt
    191c:	09 c0       	rjmp	.+18     	; 0x1930 <__floatsisf+0x12>

0000191e <__floatsisf>:
    191e:	97 fb       	bst	r25, 7
    1920:	3e f4       	brtc	.+14     	; 0x1930 <__floatsisf+0x12>
    1922:	90 95       	com	r25
    1924:	80 95       	com	r24
    1926:	70 95       	com	r23
    1928:	61 95       	neg	r22
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	8f 4f       	sbci	r24, 0xFF	; 255
    192e:	9f 4f       	sbci	r25, 0xFF	; 255
    1930:	99 23       	and	r25, r25
    1932:	a9 f0       	breq	.+42     	; 0x195e <__floatsisf+0x40>
    1934:	f9 2f       	mov	r31, r25
    1936:	96 e9       	ldi	r25, 0x96	; 150
    1938:	bb 27       	eor	r27, r27
    193a:	93 95       	inc	r25
    193c:	f6 95       	lsr	r31
    193e:	87 95       	ror	r24
    1940:	77 95       	ror	r23
    1942:	67 95       	ror	r22
    1944:	b7 95       	ror	r27
    1946:	f1 11       	cpse	r31, r1
    1948:	f8 cf       	rjmp	.-16     	; 0x193a <__floatsisf+0x1c>
    194a:	fa f4       	brpl	.+62     	; 0x198a <__floatsisf+0x6c>
    194c:	bb 0f       	add	r27, r27
    194e:	11 f4       	brne	.+4      	; 0x1954 <__floatsisf+0x36>
    1950:	60 ff       	sbrs	r22, 0
    1952:	1b c0       	rjmp	.+54     	; 0x198a <__floatsisf+0x6c>
    1954:	6f 5f       	subi	r22, 0xFF	; 255
    1956:	7f 4f       	sbci	r23, 0xFF	; 255
    1958:	8f 4f       	sbci	r24, 0xFF	; 255
    195a:	9f 4f       	sbci	r25, 0xFF	; 255
    195c:	16 c0       	rjmp	.+44     	; 0x198a <__floatsisf+0x6c>
    195e:	88 23       	and	r24, r24
    1960:	11 f0       	breq	.+4      	; 0x1966 <__floatsisf+0x48>
    1962:	96 e9       	ldi	r25, 0x96	; 150
    1964:	11 c0       	rjmp	.+34     	; 0x1988 <__floatsisf+0x6a>
    1966:	77 23       	and	r23, r23
    1968:	21 f0       	breq	.+8      	; 0x1972 <__floatsisf+0x54>
    196a:	9e e8       	ldi	r25, 0x8E	; 142
    196c:	87 2f       	mov	r24, r23
    196e:	76 2f       	mov	r23, r22
    1970:	05 c0       	rjmp	.+10     	; 0x197c <__floatsisf+0x5e>
    1972:	66 23       	and	r22, r22
    1974:	71 f0       	breq	.+28     	; 0x1992 <__floatsisf+0x74>
    1976:	96 e8       	ldi	r25, 0x86	; 134
    1978:	86 2f       	mov	r24, r22
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	2a f0       	brmi	.+10     	; 0x198a <__floatsisf+0x6c>
    1980:	9a 95       	dec	r25
    1982:	66 0f       	add	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	88 1f       	adc	r24, r24
    1988:	da f7       	brpl	.-10     	; 0x1980 <__floatsisf+0x62>
    198a:	88 0f       	add	r24, r24
    198c:	96 95       	lsr	r25
    198e:	87 95       	ror	r24
    1990:	97 f9       	bld	r25, 7
    1992:	08 95       	ret

00001994 <__fp_cmp>:
    1994:	99 0f       	add	r25, r25
    1996:	00 08       	sbc	r0, r0
    1998:	55 0f       	add	r21, r21
    199a:	aa 0b       	sbc	r26, r26
    199c:	e0 e8       	ldi	r30, 0x80	; 128
    199e:	fe ef       	ldi	r31, 0xFE	; 254
    19a0:	16 16       	cp	r1, r22
    19a2:	17 06       	cpc	r1, r23
    19a4:	e8 07       	cpc	r30, r24
    19a6:	f9 07       	cpc	r31, r25
    19a8:	c0 f0       	brcs	.+48     	; 0x19da <__fp_cmp+0x46>
    19aa:	12 16       	cp	r1, r18
    19ac:	13 06       	cpc	r1, r19
    19ae:	e4 07       	cpc	r30, r20
    19b0:	f5 07       	cpc	r31, r21
    19b2:	98 f0       	brcs	.+38     	; 0x19da <__fp_cmp+0x46>
    19b4:	62 1b       	sub	r22, r18
    19b6:	73 0b       	sbc	r23, r19
    19b8:	84 0b       	sbc	r24, r20
    19ba:	95 0b       	sbc	r25, r21
    19bc:	39 f4       	brne	.+14     	; 0x19cc <__fp_cmp+0x38>
    19be:	0a 26       	eor	r0, r26
    19c0:	61 f0       	breq	.+24     	; 0x19da <__fp_cmp+0x46>
    19c2:	23 2b       	or	r18, r19
    19c4:	24 2b       	or	r18, r20
    19c6:	25 2b       	or	r18, r21
    19c8:	21 f4       	brne	.+8      	; 0x19d2 <__fp_cmp+0x3e>
    19ca:	08 95       	ret
    19cc:	0a 26       	eor	r0, r26
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <__fp_cmp+0x3e>
    19d0:	a1 40       	sbci	r26, 0x01	; 1
    19d2:	a6 95       	lsr	r26
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	81 1d       	adc	r24, r1
    19d8:	81 1d       	adc	r24, r1
    19da:	08 95       	ret

000019dc <__fp_inf>:
    19dc:	97 f9       	bld	r25, 7
    19de:	9f 67       	ori	r25, 0x7F	; 127
    19e0:	80 e8       	ldi	r24, 0x80	; 128
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	08 95       	ret

000019e8 <__fp_nan>:
    19e8:	9f ef       	ldi	r25, 0xFF	; 255
    19ea:	80 ec       	ldi	r24, 0xC0	; 192
    19ec:	08 95       	ret

000019ee <__fp_pscA>:
    19ee:	00 24       	eor	r0, r0
    19f0:	0a 94       	dec	r0
    19f2:	16 16       	cp	r1, r22
    19f4:	17 06       	cpc	r1, r23
    19f6:	18 06       	cpc	r1, r24
    19f8:	09 06       	cpc	r0, r25
    19fa:	08 95       	ret

000019fc <__fp_pscB>:
    19fc:	00 24       	eor	r0, r0
    19fe:	0a 94       	dec	r0
    1a00:	12 16       	cp	r1, r18
    1a02:	13 06       	cpc	r1, r19
    1a04:	14 06       	cpc	r1, r20
    1a06:	05 06       	cpc	r0, r21
    1a08:	08 95       	ret

00001a0a <__fp_round>:
    1a0a:	09 2e       	mov	r0, r25
    1a0c:	03 94       	inc	r0
    1a0e:	00 0c       	add	r0, r0
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <__fp_round+0xc>
    1a12:	88 23       	and	r24, r24
    1a14:	52 f0       	brmi	.+20     	; 0x1a2a <__fp_round+0x20>
    1a16:	bb 0f       	add	r27, r27
    1a18:	40 f4       	brcc	.+16     	; 0x1a2a <__fp_round+0x20>
    1a1a:	bf 2b       	or	r27, r31
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <__fp_round+0x18>
    1a1e:	60 ff       	sbrs	r22, 0
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <__fp_round+0x20>
    1a22:	6f 5f       	subi	r22, 0xFF	; 255
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	8f 4f       	sbci	r24, 0xFF	; 255
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	08 95       	ret

00001a2c <__fp_split3>:
    1a2c:	57 fd       	sbrc	r21, 7
    1a2e:	90 58       	subi	r25, 0x80	; 128
    1a30:	44 0f       	add	r20, r20
    1a32:	55 1f       	adc	r21, r21
    1a34:	59 f0       	breq	.+22     	; 0x1a4c <__fp_splitA+0x10>
    1a36:	5f 3f       	cpi	r21, 0xFF	; 255
    1a38:	71 f0       	breq	.+28     	; 0x1a56 <__fp_splitA+0x1a>
    1a3a:	47 95       	ror	r20

00001a3c <__fp_splitA>:
    1a3c:	88 0f       	add	r24, r24
    1a3e:	97 fb       	bst	r25, 7
    1a40:	99 1f       	adc	r25, r25
    1a42:	61 f0       	breq	.+24     	; 0x1a5c <__fp_splitA+0x20>
    1a44:	9f 3f       	cpi	r25, 0xFF	; 255
    1a46:	79 f0       	breq	.+30     	; 0x1a66 <__fp_splitA+0x2a>
    1a48:	87 95       	ror	r24
    1a4a:	08 95       	ret
    1a4c:	12 16       	cp	r1, r18
    1a4e:	13 06       	cpc	r1, r19
    1a50:	14 06       	cpc	r1, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	f2 cf       	rjmp	.-28     	; 0x1a3a <__fp_split3+0xe>
    1a56:	46 95       	lsr	r20
    1a58:	f1 df       	rcall	.-30     	; 0x1a3c <__fp_splitA>
    1a5a:	08 c0       	rjmp	.+16     	; 0x1a6c <__fp_splitA+0x30>
    1a5c:	16 16       	cp	r1, r22
    1a5e:	17 06       	cpc	r1, r23
    1a60:	18 06       	cpc	r1, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	f1 cf       	rjmp	.-30     	; 0x1a48 <__fp_splitA+0xc>
    1a66:	86 95       	lsr	r24
    1a68:	71 05       	cpc	r23, r1
    1a6a:	61 05       	cpc	r22, r1
    1a6c:	08 94       	sec
    1a6e:	08 95       	ret

00001a70 <__fp_zero>:
    1a70:	e8 94       	clt

00001a72 <__fp_szero>:
    1a72:	bb 27       	eor	r27, r27
    1a74:	66 27       	eor	r22, r22
    1a76:	77 27       	eor	r23, r23
    1a78:	cb 01       	movw	r24, r22
    1a7a:	97 f9       	bld	r25, 7
    1a7c:	08 95       	ret

00001a7e <__gesf2>:
    1a7e:	8a df       	rcall	.-236    	; 0x1994 <__fp_cmp>
    1a80:	08 f4       	brcc	.+2      	; 0x1a84 <__gesf2+0x6>
    1a82:	8f ef       	ldi	r24, 0xFF	; 255
    1a84:	08 95       	ret

00001a86 <__mulsf3>:
    1a86:	0b d0       	rcall	.+22     	; 0x1a9e <__mulsf3x>
    1a88:	c0 cf       	rjmp	.-128    	; 0x1a0a <__fp_round>
    1a8a:	b1 df       	rcall	.-158    	; 0x19ee <__fp_pscA>
    1a8c:	28 f0       	brcs	.+10     	; 0x1a98 <__mulsf3+0x12>
    1a8e:	b6 df       	rcall	.-148    	; 0x19fc <__fp_pscB>
    1a90:	18 f0       	brcs	.+6      	; 0x1a98 <__mulsf3+0x12>
    1a92:	95 23       	and	r25, r21
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <__mulsf3+0x12>
    1a96:	a2 cf       	rjmp	.-188    	; 0x19dc <__fp_inf>
    1a98:	a7 cf       	rjmp	.-178    	; 0x19e8 <__fp_nan>
    1a9a:	11 24       	eor	r1, r1
    1a9c:	ea cf       	rjmp	.-44     	; 0x1a72 <__fp_szero>

00001a9e <__mulsf3x>:
    1a9e:	c6 df       	rcall	.-116    	; 0x1a2c <__fp_split3>
    1aa0:	a0 f3       	brcs	.-24     	; 0x1a8a <__mulsf3+0x4>

00001aa2 <__mulsf3_pse>:
    1aa2:	95 9f       	mul	r25, r21
    1aa4:	d1 f3       	breq	.-12     	; 0x1a9a <__mulsf3+0x14>
    1aa6:	95 0f       	add	r25, r21
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	55 1f       	adc	r21, r21
    1aac:	62 9f       	mul	r22, r18
    1aae:	f0 01       	movw	r30, r0
    1ab0:	72 9f       	mul	r23, r18
    1ab2:	bb 27       	eor	r27, r27
    1ab4:	f0 0d       	add	r31, r0
    1ab6:	b1 1d       	adc	r27, r1
    1ab8:	63 9f       	mul	r22, r19
    1aba:	aa 27       	eor	r26, r26
    1abc:	f0 0d       	add	r31, r0
    1abe:	b1 1d       	adc	r27, r1
    1ac0:	aa 1f       	adc	r26, r26
    1ac2:	64 9f       	mul	r22, r20
    1ac4:	66 27       	eor	r22, r22
    1ac6:	b0 0d       	add	r27, r0
    1ac8:	a1 1d       	adc	r26, r1
    1aca:	66 1f       	adc	r22, r22
    1acc:	82 9f       	mul	r24, r18
    1ace:	22 27       	eor	r18, r18
    1ad0:	b0 0d       	add	r27, r0
    1ad2:	a1 1d       	adc	r26, r1
    1ad4:	62 1f       	adc	r22, r18
    1ad6:	73 9f       	mul	r23, r19
    1ad8:	b0 0d       	add	r27, r0
    1ada:	a1 1d       	adc	r26, r1
    1adc:	62 1f       	adc	r22, r18
    1ade:	83 9f       	mul	r24, r19
    1ae0:	a0 0d       	add	r26, r0
    1ae2:	61 1d       	adc	r22, r1
    1ae4:	22 1f       	adc	r18, r18
    1ae6:	74 9f       	mul	r23, r20
    1ae8:	33 27       	eor	r19, r19
    1aea:	a0 0d       	add	r26, r0
    1aec:	61 1d       	adc	r22, r1
    1aee:	23 1f       	adc	r18, r19
    1af0:	84 9f       	mul	r24, r20
    1af2:	60 0d       	add	r22, r0
    1af4:	21 1d       	adc	r18, r1
    1af6:	82 2f       	mov	r24, r18
    1af8:	76 2f       	mov	r23, r22
    1afa:	6a 2f       	mov	r22, r26
    1afc:	11 24       	eor	r1, r1
    1afe:	9f 57       	subi	r25, 0x7F	; 127
    1b00:	50 40       	sbci	r21, 0x00	; 0
    1b02:	8a f0       	brmi	.+34     	; 0x1b26 <__mulsf3_pse+0x84>
    1b04:	e1 f0       	breq	.+56     	; 0x1b3e <__mulsf3_pse+0x9c>
    1b06:	88 23       	and	r24, r24
    1b08:	4a f0       	brmi	.+18     	; 0x1b1c <__mulsf3_pse+0x7a>
    1b0a:	ee 0f       	add	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	bb 1f       	adc	r27, r27
    1b10:	66 1f       	adc	r22, r22
    1b12:	77 1f       	adc	r23, r23
    1b14:	88 1f       	adc	r24, r24
    1b16:	91 50       	subi	r25, 0x01	; 1
    1b18:	50 40       	sbci	r21, 0x00	; 0
    1b1a:	a9 f7       	brne	.-22     	; 0x1b06 <__mulsf3_pse+0x64>
    1b1c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b1e:	51 05       	cpc	r21, r1
    1b20:	70 f0       	brcs	.+28     	; 0x1b3e <__mulsf3_pse+0x9c>
    1b22:	5c cf       	rjmp	.-328    	; 0x19dc <__fp_inf>
    1b24:	a6 cf       	rjmp	.-180    	; 0x1a72 <__fp_szero>
    1b26:	5f 3f       	cpi	r21, 0xFF	; 255
    1b28:	ec f3       	brlt	.-6      	; 0x1b24 <__mulsf3_pse+0x82>
    1b2a:	98 3e       	cpi	r25, 0xE8	; 232
    1b2c:	dc f3       	brlt	.-10     	; 0x1b24 <__mulsf3_pse+0x82>
    1b2e:	86 95       	lsr	r24
    1b30:	77 95       	ror	r23
    1b32:	67 95       	ror	r22
    1b34:	b7 95       	ror	r27
    1b36:	f7 95       	ror	r31
    1b38:	e7 95       	ror	r30
    1b3a:	9f 5f       	subi	r25, 0xFF	; 255
    1b3c:	c1 f7       	brne	.-16     	; 0x1b2e <__mulsf3_pse+0x8c>
    1b3e:	fe 2b       	or	r31, r30
    1b40:	88 0f       	add	r24, r24
    1b42:	91 1d       	adc	r25, r1
    1b44:	96 95       	lsr	r25
    1b46:	87 95       	ror	r24
    1b48:	97 f9       	bld	r25, 7
    1b4a:	08 95       	ret

00001b4c <pow>:
    1b4c:	fa 01       	movw	r30, r20
    1b4e:	ee 0f       	add	r30, r30
    1b50:	ff 1f       	adc	r31, r31
    1b52:	30 96       	adiw	r30, 0x00	; 0
    1b54:	21 05       	cpc	r18, r1
    1b56:	31 05       	cpc	r19, r1
    1b58:	99 f1       	breq	.+102    	; 0x1bc0 <pow+0x74>
    1b5a:	61 15       	cp	r22, r1
    1b5c:	71 05       	cpc	r23, r1
    1b5e:	61 f4       	brne	.+24     	; 0x1b78 <pow+0x2c>
    1b60:	80 38       	cpi	r24, 0x80	; 128
    1b62:	bf e3       	ldi	r27, 0x3F	; 63
    1b64:	9b 07       	cpc	r25, r27
    1b66:	49 f1       	breq	.+82     	; 0x1bba <pow+0x6e>
    1b68:	68 94       	set
    1b6a:	90 38       	cpi	r25, 0x80	; 128
    1b6c:	81 05       	cpc	r24, r1
    1b6e:	61 f0       	breq	.+24     	; 0x1b88 <pow+0x3c>
    1b70:	80 38       	cpi	r24, 0x80	; 128
    1b72:	bf ef       	ldi	r27, 0xFF	; 255
    1b74:	9b 07       	cpc	r25, r27
    1b76:	41 f0       	breq	.+16     	; 0x1b88 <pow+0x3c>
    1b78:	99 23       	and	r25, r25
    1b7a:	42 f5       	brpl	.+80     	; 0x1bcc <pow+0x80>
    1b7c:	ff 3f       	cpi	r31, 0xFF	; 255
    1b7e:	e1 05       	cpc	r30, r1
    1b80:	31 05       	cpc	r19, r1
    1b82:	21 05       	cpc	r18, r1
    1b84:	11 f1       	breq	.+68     	; 0x1bca <pow+0x7e>
    1b86:	e8 94       	clt
    1b88:	08 94       	sec
    1b8a:	e7 95       	ror	r30
    1b8c:	d9 01       	movw	r26, r18
    1b8e:	aa 23       	and	r26, r26
    1b90:	29 f4       	brne	.+10     	; 0x1b9c <pow+0x50>
    1b92:	ab 2f       	mov	r26, r27
    1b94:	be 2f       	mov	r27, r30
    1b96:	f8 5f       	subi	r31, 0xF8	; 248
    1b98:	d0 f3       	brcs	.-12     	; 0x1b8e <pow+0x42>
    1b9a:	10 c0       	rjmp	.+32     	; 0x1bbc <pow+0x70>
    1b9c:	ff 5f       	subi	r31, 0xFF	; 255
    1b9e:	70 f4       	brcc	.+28     	; 0x1bbc <pow+0x70>
    1ba0:	a6 95       	lsr	r26
    1ba2:	e0 f7       	brcc	.-8      	; 0x1b9c <pow+0x50>
    1ba4:	f7 39       	cpi	r31, 0x97	; 151
    1ba6:	50 f0       	brcs	.+20     	; 0x1bbc <pow+0x70>
    1ba8:	19 f0       	breq	.+6      	; 0x1bb0 <pow+0x64>
    1baa:	ff 3a       	cpi	r31, 0xAF	; 175
    1bac:	38 f4       	brcc	.+14     	; 0x1bbc <pow+0x70>
    1bae:	9f 77       	andi	r25, 0x7F	; 127
    1bb0:	9f 93       	push	r25
    1bb2:	0c d0       	rcall	.+24     	; 0x1bcc <pow+0x80>
    1bb4:	0f 90       	pop	r0
    1bb6:	07 fc       	sbrc	r0, 7
    1bb8:	90 58       	subi	r25, 0x80	; 128
    1bba:	08 95       	ret
    1bbc:	3e f0       	brts	.+14     	; 0x1bcc <pow+0x80>
    1bbe:	14 cf       	rjmp	.-472    	; 0x19e8 <__fp_nan>
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	80 e8       	ldi	r24, 0x80	; 128
    1bc6:	9f e3       	ldi	r25, 0x3F	; 63
    1bc8:	08 95       	ret
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	9f 77       	andi	r25, 0x7F	; 127
    1bce:	5f 93       	push	r21
    1bd0:	4f 93       	push	r20
    1bd2:	3f 93       	push	r19
    1bd4:	2f 93       	push	r18
    1bd6:	9e d0       	rcall	.+316    	; 0x1d14 <log>
    1bd8:	2f 91       	pop	r18
    1bda:	3f 91       	pop	r19
    1bdc:	4f 91       	pop	r20
    1bde:	5f 91       	pop	r21
    1be0:	52 df       	rcall	.-348    	; 0x1a86 <__mulsf3>
    1be2:	05 c0       	rjmp	.+10     	; 0x1bee <exp>
    1be4:	19 f4       	brne	.+6      	; 0x1bec <pow+0xa0>
    1be6:	0e f0       	brts	.+2      	; 0x1bea <pow+0x9e>
    1be8:	f9 ce       	rjmp	.-526    	; 0x19dc <__fp_inf>
    1bea:	42 cf       	rjmp	.-380    	; 0x1a70 <__fp_zero>
    1bec:	fd ce       	rjmp	.-518    	; 0x19e8 <__fp_nan>

00001bee <exp>:
    1bee:	26 df       	rcall	.-436    	; 0x1a3c <__fp_splitA>
    1bf0:	c8 f3       	brcs	.-14     	; 0x1be4 <pow+0x98>
    1bf2:	96 38       	cpi	r25, 0x86	; 134
    1bf4:	c0 f7       	brcc	.-16     	; 0x1be6 <pow+0x9a>
    1bf6:	07 f8       	bld	r0, 7
    1bf8:	0f 92       	push	r0
    1bfa:	e8 94       	clt
    1bfc:	2b e3       	ldi	r18, 0x3B	; 59
    1bfe:	3a ea       	ldi	r19, 0xAA	; 170
    1c00:	48 eb       	ldi	r20, 0xB8	; 184
    1c02:	5f e7       	ldi	r21, 0x7F	; 127
    1c04:	4e df       	rcall	.-356    	; 0x1aa2 <__mulsf3_pse>
    1c06:	0f 92       	push	r0
    1c08:	0f 92       	push	r0
    1c0a:	0f 92       	push	r0
    1c0c:	4d b7       	in	r20, 0x3d	; 61
    1c0e:	5e b7       	in	r21, 0x3e	; 62
    1c10:	0f 92       	push	r0
    1c12:	c0 d0       	rcall	.+384    	; 0x1d94 <modf>
    1c14:	ec ef       	ldi	r30, 0xFC	; 252
    1c16:	f1 e0       	ldi	r31, 0x01	; 1
    1c18:	16 d0       	rcall	.+44     	; 0x1c46 <__fp_powser>
    1c1a:	4f 91       	pop	r20
    1c1c:	5f 91       	pop	r21
    1c1e:	ef 91       	pop	r30
    1c20:	ff 91       	pop	r31
    1c22:	e5 95       	asr	r30
    1c24:	ee 1f       	adc	r30, r30
    1c26:	ff 1f       	adc	r31, r31
    1c28:	49 f0       	breq	.+18     	; 0x1c3c <exp+0x4e>
    1c2a:	fe 57       	subi	r31, 0x7E	; 126
    1c2c:	e0 68       	ori	r30, 0x80	; 128
    1c2e:	44 27       	eor	r20, r20
    1c30:	ee 0f       	add	r30, r30
    1c32:	44 1f       	adc	r20, r20
    1c34:	fa 95       	dec	r31
    1c36:	e1 f7       	brne	.-8      	; 0x1c30 <exp+0x42>
    1c38:	41 95       	neg	r20
    1c3a:	55 0b       	sbc	r21, r21
    1c3c:	32 d0       	rcall	.+100    	; 0x1ca2 <ldexp>
    1c3e:	0f 90       	pop	r0
    1c40:	07 fe       	sbrs	r0, 7
    1c42:	26 c0       	rjmp	.+76     	; 0x1c90 <inverse>
    1c44:	08 95       	ret

00001c46 <__fp_powser>:
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	1f 93       	push	r17
    1c4c:	0f 93       	push	r16
    1c4e:	ff 92       	push	r15
    1c50:	ef 92       	push	r14
    1c52:	df 92       	push	r13
    1c54:	7b 01       	movw	r14, r22
    1c56:	8c 01       	movw	r16, r24
    1c58:	68 94       	set
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <__fp_powser+0x20>
    1c5c:	da 2e       	mov	r13, r26
    1c5e:	ef 01       	movw	r28, r30
    1c60:	1e df       	rcall	.-452    	; 0x1a9e <__mulsf3x>
    1c62:	fe 01       	movw	r30, r28
    1c64:	e8 94       	clt
    1c66:	a5 91       	lpm	r26, Z+
    1c68:	25 91       	lpm	r18, Z+
    1c6a:	35 91       	lpm	r19, Z+
    1c6c:	45 91       	lpm	r20, Z+
    1c6e:	55 91       	lpm	r21, Z+
    1c70:	ae f3       	brts	.-22     	; 0x1c5c <__fp_powser+0x16>
    1c72:	ef 01       	movw	r28, r30
    1c74:	62 dd       	rcall	.-1340   	; 0x173a <__addsf3x>
    1c76:	fe 01       	movw	r30, r28
    1c78:	97 01       	movw	r18, r14
    1c7a:	a8 01       	movw	r20, r16
    1c7c:	da 94       	dec	r13
    1c7e:	79 f7       	brne	.-34     	; 0x1c5e <__fp_powser+0x18>
    1c80:	df 90       	pop	r13
    1c82:	ef 90       	pop	r14
    1c84:	ff 90       	pop	r15
    1c86:	0f 91       	pop	r16
    1c88:	1f 91       	pop	r17
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <inverse>:
    1c90:	9b 01       	movw	r18, r22
    1c92:	ac 01       	movw	r20, r24
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	80 e8       	ldi	r24, 0x80	; 128
    1c9a:	9f e3       	ldi	r25, 0x3F	; 63
    1c9c:	a5 cd       	rjmp	.-1206   	; 0x17e8 <__divsf3>
    1c9e:	9e ce       	rjmp	.-708    	; 0x19dc <__fp_inf>
    1ca0:	ac c0       	rjmp	.+344    	; 0x1dfa <__fp_mpack>

00001ca2 <ldexp>:
    1ca2:	cc de       	rcall	.-616    	; 0x1a3c <__fp_splitA>
    1ca4:	e8 f3       	brcs	.-6      	; 0x1ca0 <inverse+0x10>
    1ca6:	99 23       	and	r25, r25
    1ca8:	d9 f3       	breq	.-10     	; 0x1ca0 <inverse+0x10>
    1caa:	94 0f       	add	r25, r20
    1cac:	51 1d       	adc	r21, r1
    1cae:	bb f3       	brvs	.-18     	; 0x1c9e <inverse+0xe>
    1cb0:	91 50       	subi	r25, 0x01	; 1
    1cb2:	50 40       	sbci	r21, 0x00	; 0
    1cb4:	94 f0       	brlt	.+36     	; 0x1cda <ldexp+0x38>
    1cb6:	59 f0       	breq	.+22     	; 0x1cce <ldexp+0x2c>
    1cb8:	88 23       	and	r24, r24
    1cba:	32 f0       	brmi	.+12     	; 0x1cc8 <ldexp+0x26>
    1cbc:	66 0f       	add	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	91 50       	subi	r25, 0x01	; 1
    1cc4:	50 40       	sbci	r21, 0x00	; 0
    1cc6:	c1 f7       	brne	.-16     	; 0x1cb8 <ldexp+0x16>
    1cc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cca:	51 05       	cpc	r21, r1
    1ccc:	44 f7       	brge	.-48     	; 0x1c9e <inverse+0xe>
    1cce:	88 0f       	add	r24, r24
    1cd0:	91 1d       	adc	r25, r1
    1cd2:	96 95       	lsr	r25
    1cd4:	87 95       	ror	r24
    1cd6:	97 f9       	bld	r25, 7
    1cd8:	08 95       	ret
    1cda:	5f 3f       	cpi	r21, 0xFF	; 255
    1cdc:	ac f0       	brlt	.+42     	; 0x1d08 <ldexp+0x66>
    1cde:	98 3e       	cpi	r25, 0xE8	; 232
    1ce0:	9c f0       	brlt	.+38     	; 0x1d08 <ldexp+0x66>
    1ce2:	bb 27       	eor	r27, r27
    1ce4:	86 95       	lsr	r24
    1ce6:	77 95       	ror	r23
    1ce8:	67 95       	ror	r22
    1cea:	b7 95       	ror	r27
    1cec:	08 f4       	brcc	.+2      	; 0x1cf0 <ldexp+0x4e>
    1cee:	b1 60       	ori	r27, 0x01	; 1
    1cf0:	93 95       	inc	r25
    1cf2:	c1 f7       	brne	.-16     	; 0x1ce4 <ldexp+0x42>
    1cf4:	bb 0f       	add	r27, r27
    1cf6:	58 f7       	brcc	.-42     	; 0x1cce <ldexp+0x2c>
    1cf8:	11 f4       	brne	.+4      	; 0x1cfe <ldexp+0x5c>
    1cfa:	60 ff       	sbrs	r22, 0
    1cfc:	e8 cf       	rjmp	.-48     	; 0x1cce <ldexp+0x2c>
    1cfe:	6f 5f       	subi	r22, 0xFF	; 255
    1d00:	7f 4f       	sbci	r23, 0xFF	; 255
    1d02:	8f 4f       	sbci	r24, 0xFF	; 255
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	e3 cf       	rjmp	.-58     	; 0x1cce <ldexp+0x2c>
    1d08:	b4 ce       	rjmp	.-664    	; 0x1a72 <__fp_szero>
    1d0a:	0e f0       	brts	.+2      	; 0x1d0e <ldexp+0x6c>
    1d0c:	76 c0       	rjmp	.+236    	; 0x1dfa <__fp_mpack>
    1d0e:	6c ce       	rjmp	.-808    	; 0x19e8 <__fp_nan>
    1d10:	68 94       	set
    1d12:	64 ce       	rjmp	.-824    	; 0x19dc <__fp_inf>

00001d14 <log>:
    1d14:	93 de       	rcall	.-730    	; 0x1a3c <__fp_splitA>
    1d16:	c8 f3       	brcs	.-14     	; 0x1d0a <ldexp+0x68>
    1d18:	99 23       	and	r25, r25
    1d1a:	d1 f3       	breq	.-12     	; 0x1d10 <ldexp+0x6e>
    1d1c:	c6 f3       	brts	.-16     	; 0x1d0e <ldexp+0x6c>
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	1f 93       	push	r17
    1d24:	0f 93       	push	r16
    1d26:	ff 92       	push	r15
    1d28:	c9 2f       	mov	r28, r25
    1d2a:	dd 27       	eor	r29, r29
    1d2c:	88 23       	and	r24, r24
    1d2e:	2a f0       	brmi	.+10     	; 0x1d3a <log+0x26>
    1d30:	21 97       	sbiw	r28, 0x01	; 1
    1d32:	66 0f       	add	r22, r22
    1d34:	77 1f       	adc	r23, r23
    1d36:	88 1f       	adc	r24, r24
    1d38:	da f7       	brpl	.-10     	; 0x1d30 <log+0x1c>
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	5f eb       	ldi	r21, 0xBF	; 191
    1d42:	9f e3       	ldi	r25, 0x3F	; 63
    1d44:	88 39       	cpi	r24, 0x98	; 152
    1d46:	20 f0       	brcs	.+8      	; 0x1d50 <log+0x3c>
    1d48:	80 3e       	cpi	r24, 0xE0	; 224
    1d4a:	30 f0       	brcs	.+12     	; 0x1d58 <log+0x44>
    1d4c:	21 96       	adiw	r28, 0x01	; 1
    1d4e:	8f 77       	andi	r24, 0x7F	; 127
    1d50:	e3 dc       	rcall	.-1594   	; 0x1718 <__addsf3>
    1d52:	e4 e2       	ldi	r30, 0x24	; 36
    1d54:	f2 e0       	ldi	r31, 0x02	; 2
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <log+0x4a>
    1d58:	df dc       	rcall	.-1602   	; 0x1718 <__addsf3>
    1d5a:	e1 e5       	ldi	r30, 0x51	; 81
    1d5c:	f2 e0       	ldi	r31, 0x02	; 2
    1d5e:	73 df       	rcall	.-282    	; 0x1c46 <__fp_powser>
    1d60:	8b 01       	movw	r16, r22
    1d62:	be 01       	movw	r22, r28
    1d64:	ec 01       	movw	r28, r24
    1d66:	fb 2e       	mov	r15, r27
    1d68:	6f 57       	subi	r22, 0x7F	; 127
    1d6a:	71 09       	sbc	r23, r1
    1d6c:	75 95       	asr	r23
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 0b       	sbc	r24, r24
    1d72:	99 0b       	sbc	r25, r25
    1d74:	d4 dd       	rcall	.-1112   	; 0x191e <__floatsisf>
    1d76:	28 e1       	ldi	r18, 0x18	; 24
    1d78:	32 e7       	ldi	r19, 0x72	; 114
    1d7a:	41 e3       	ldi	r20, 0x31	; 49
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	8f de       	rcall	.-738    	; 0x1a9e <__mulsf3x>
    1d80:	af 2d       	mov	r26, r15
    1d82:	98 01       	movw	r18, r16
    1d84:	ae 01       	movw	r20, r28
    1d86:	ff 90       	pop	r15
    1d88:	0f 91       	pop	r16
    1d8a:	1f 91       	pop	r17
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	d4 dc       	rcall	.-1624   	; 0x173a <__addsf3x>
    1d92:	3b ce       	rjmp	.-906    	; 0x1a0a <__fp_round>

00001d94 <modf>:
    1d94:	fa 01       	movw	r30, r20
    1d96:	dc 01       	movw	r26, r24
    1d98:	aa 0f       	add	r26, r26
    1d9a:	bb 1f       	adc	r27, r27
    1d9c:	9b 01       	movw	r18, r22
    1d9e:	ac 01       	movw	r20, r24
    1da0:	bf 57       	subi	r27, 0x7F	; 127
    1da2:	28 f4       	brcc	.+10     	; 0x1dae <modf+0x1a>
    1da4:	22 27       	eor	r18, r18
    1da6:	33 27       	eor	r19, r19
    1da8:	44 27       	eor	r20, r20
    1daa:	50 78       	andi	r21, 0x80	; 128
    1dac:	1f c0       	rjmp	.+62     	; 0x1dec <modf+0x58>
    1dae:	b7 51       	subi	r27, 0x17	; 23
    1db0:	88 f4       	brcc	.+34     	; 0x1dd4 <modf+0x40>
    1db2:	ab 2f       	mov	r26, r27
    1db4:	00 24       	eor	r0, r0
    1db6:	46 95       	lsr	r20
    1db8:	37 95       	ror	r19
    1dba:	27 95       	ror	r18
    1dbc:	01 1c       	adc	r0, r1
    1dbe:	a3 95       	inc	r26
    1dc0:	d2 f3       	brmi	.-12     	; 0x1db6 <modf+0x22>
    1dc2:	00 20       	and	r0, r0
    1dc4:	69 f0       	breq	.+26     	; 0x1de0 <modf+0x4c>
    1dc6:	22 0f       	add	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	44 1f       	adc	r20, r20
    1dcc:	b3 95       	inc	r27
    1dce:	da f3       	brmi	.-10     	; 0x1dc6 <modf+0x32>
    1dd0:	0d d0       	rcall	.+26     	; 0x1dec <modf+0x58>
    1dd2:	a1 cc       	rjmp	.-1726   	; 0x1716 <__subsf3>
    1dd4:	61 30       	cpi	r22, 0x01	; 1
    1dd6:	71 05       	cpc	r23, r1
    1dd8:	a0 e8       	ldi	r26, 0x80	; 128
    1dda:	8a 07       	cpc	r24, r26
    1ddc:	b9 46       	sbci	r27, 0x69	; 105
    1dde:	30 f4       	brcc	.+12     	; 0x1dec <modf+0x58>
    1de0:	9b 01       	movw	r18, r22
    1de2:	ac 01       	movw	r20, r24
    1de4:	66 27       	eor	r22, r22
    1de6:	77 27       	eor	r23, r23
    1de8:	88 27       	eor	r24, r24
    1dea:	90 78       	andi	r25, 0x80	; 128
    1dec:	30 96       	adiw	r30, 0x00	; 0
    1dee:	21 f0       	breq	.+8      	; 0x1df8 <modf+0x64>
    1df0:	20 83       	st	Z, r18
    1df2:	31 83       	std	Z+1, r19	; 0x01
    1df4:	42 83       	std	Z+2, r20	; 0x02
    1df6:	53 83       	std	Z+3, r21	; 0x03
    1df8:	08 95       	ret

00001dfa <__fp_mpack>:
    1dfa:	9f 3f       	cpi	r25, 0xFF	; 255
    1dfc:	31 f0       	breq	.+12     	; 0x1e0a <__fp_mpack_finite+0xc>

00001dfe <__fp_mpack_finite>:
    1dfe:	91 50       	subi	r25, 0x01	; 1
    1e00:	20 f4       	brcc	.+8      	; 0x1e0a <__fp_mpack_finite+0xc>
    1e02:	87 95       	ror	r24
    1e04:	77 95       	ror	r23
    1e06:	67 95       	ror	r22
    1e08:	b7 95       	ror	r27
    1e0a:	88 0f       	add	r24, r24
    1e0c:	91 1d       	adc	r25, r1
    1e0e:	96 95       	lsr	r25
    1e10:	87 95       	ror	r24
    1e12:	97 f9       	bld	r25, 7
    1e14:	08 95       	ret

00001e16 <__mulsi3>:
    1e16:	db 01       	movw	r26, r22
    1e18:	8f 93       	push	r24
    1e1a:	9f 93       	push	r25
    1e1c:	41 d0       	rcall	.+130    	; 0x1ea0 <__muluhisi3>
    1e1e:	bf 91       	pop	r27
    1e20:	af 91       	pop	r26
    1e22:	a2 9f       	mul	r26, r18
    1e24:	80 0d       	add	r24, r0
    1e26:	91 1d       	adc	r25, r1
    1e28:	a3 9f       	mul	r26, r19
    1e2a:	90 0d       	add	r25, r0
    1e2c:	b2 9f       	mul	r27, r18
    1e2e:	90 0d       	add	r25, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	08 95       	ret

00001e34 <__udivmodhi4>:
    1e34:	aa 1b       	sub	r26, r26
    1e36:	bb 1b       	sub	r27, r27
    1e38:	51 e1       	ldi	r21, 0x11	; 17
    1e3a:	07 c0       	rjmp	.+14     	; 0x1e4a <__udivmodhi4_ep>

00001e3c <__udivmodhi4_loop>:
    1e3c:	aa 1f       	adc	r26, r26
    1e3e:	bb 1f       	adc	r27, r27
    1e40:	a6 17       	cp	r26, r22
    1e42:	b7 07       	cpc	r27, r23
    1e44:	10 f0       	brcs	.+4      	; 0x1e4a <__udivmodhi4_ep>
    1e46:	a6 1b       	sub	r26, r22
    1e48:	b7 0b       	sbc	r27, r23

00001e4a <__udivmodhi4_ep>:
    1e4a:	88 1f       	adc	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	5a 95       	dec	r21
    1e50:	a9 f7       	brne	.-22     	; 0x1e3c <__udivmodhi4_loop>
    1e52:	80 95       	com	r24
    1e54:	90 95       	com	r25
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	08 95       	ret

00001e5c <__udivmodsi4>:
    1e5c:	a1 e2       	ldi	r26, 0x21	; 33
    1e5e:	1a 2e       	mov	r1, r26
    1e60:	aa 1b       	sub	r26, r26
    1e62:	bb 1b       	sub	r27, r27
    1e64:	fd 01       	movw	r30, r26
    1e66:	0d c0       	rjmp	.+26     	; 0x1e82 <__udivmodsi4_ep>

00001e68 <__udivmodsi4_loop>:
    1e68:	aa 1f       	adc	r26, r26
    1e6a:	bb 1f       	adc	r27, r27
    1e6c:	ee 1f       	adc	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	a2 17       	cp	r26, r18
    1e72:	b3 07       	cpc	r27, r19
    1e74:	e4 07       	cpc	r30, r20
    1e76:	f5 07       	cpc	r31, r21
    1e78:	20 f0       	brcs	.+8      	; 0x1e82 <__udivmodsi4_ep>
    1e7a:	a2 1b       	sub	r26, r18
    1e7c:	b3 0b       	sbc	r27, r19
    1e7e:	e4 0b       	sbc	r30, r20
    1e80:	f5 0b       	sbc	r31, r21

00001e82 <__udivmodsi4_ep>:
    1e82:	66 1f       	adc	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	88 1f       	adc	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	1a 94       	dec	r1
    1e8c:	69 f7       	brne	.-38     	; 0x1e68 <__udivmodsi4_loop>
    1e8e:	60 95       	com	r22
    1e90:	70 95       	com	r23
    1e92:	80 95       	com	r24
    1e94:	90 95       	com	r25
    1e96:	9b 01       	movw	r18, r22
    1e98:	ac 01       	movw	r20, r24
    1e9a:	bd 01       	movw	r22, r26
    1e9c:	cf 01       	movw	r24, r30
    1e9e:	08 95       	ret

00001ea0 <__muluhisi3>:
    1ea0:	09 d0       	rcall	.+18     	; 0x1eb4 <__umulhisi3>
    1ea2:	a5 9f       	mul	r26, r21
    1ea4:	90 0d       	add	r25, r0
    1ea6:	b4 9f       	mul	r27, r20
    1ea8:	90 0d       	add	r25, r0
    1eaa:	a4 9f       	mul	r26, r20
    1eac:	80 0d       	add	r24, r0
    1eae:	91 1d       	adc	r25, r1
    1eb0:	11 24       	eor	r1, r1
    1eb2:	08 95       	ret

00001eb4 <__umulhisi3>:
    1eb4:	a2 9f       	mul	r26, r18
    1eb6:	b0 01       	movw	r22, r0
    1eb8:	b3 9f       	mul	r27, r19
    1eba:	c0 01       	movw	r24, r0
    1ebc:	a3 9f       	mul	r26, r19
    1ebe:	70 0d       	add	r23, r0
    1ec0:	81 1d       	adc	r24, r1
    1ec2:	11 24       	eor	r1, r1
    1ec4:	91 1d       	adc	r25, r1
    1ec6:	b2 9f       	mul	r27, r18
    1ec8:	70 0d       	add	r23, r0
    1eca:	81 1d       	adc	r24, r1
    1ecc:	11 24       	eor	r1, r1
    1ece:	91 1d       	adc	r25, r1
    1ed0:	08 95       	ret

00001ed2 <fdevopen>:
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	31 f4       	brne	.+12     	; 0x1eea <fdevopen+0x18>
    1ede:	61 15       	cp	r22, r1
    1ee0:	71 05       	cpc	r23, r1
    1ee2:	19 f4       	brne	.+6      	; 0x1eea <fdevopen+0x18>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	39 c0       	rjmp	.+114    	; 0x1f5c <fdevopen+0x8a>
    1eea:	8b 01       	movw	r16, r22
    1eec:	ec 01       	movw	r28, r24
    1eee:	6e e0       	ldi	r22, 0x0E	; 14
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	6c d0       	rcall	.+216    	; 0x1fd0 <calloc>
    1ef8:	fc 01       	movw	r30, r24
    1efa:	89 2b       	or	r24, r25
    1efc:	99 f3       	breq	.-26     	; 0x1ee4 <fdevopen+0x12>
    1efe:	80 e8       	ldi	r24, 0x80	; 128
    1f00:	83 83       	std	Z+3, r24	; 0x03
    1f02:	01 15       	cp	r16, r1
    1f04:	11 05       	cpc	r17, r1
    1f06:	71 f0       	breq	.+28     	; 0x1f24 <fdevopen+0x52>
    1f08:	02 87       	std	Z+10, r16	; 0x0a
    1f0a:	13 87       	std	Z+11, r17	; 0x0b
    1f0c:	81 e8       	ldi	r24, 0x81	; 129
    1f0e:	83 83       	std	Z+3, r24	; 0x03
    1f10:	80 91 8f 21 	lds	r24, 0x218F	; 0x80218f <__iob>
    1f14:	90 91 90 21 	lds	r25, 0x2190	; 0x802190 <__iob+0x1>
    1f18:	89 2b       	or	r24, r25
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <fdevopen+0x52>
    1f1c:	e0 93 8f 21 	sts	0x218F, r30	; 0x80218f <__iob>
    1f20:	f0 93 90 21 	sts	0x2190, r31	; 0x802190 <__iob+0x1>
    1f24:	20 97       	sbiw	r28, 0x00	; 0
    1f26:	c9 f0       	breq	.+50     	; 0x1f5a <fdevopen+0x88>
    1f28:	c0 87       	std	Z+8, r28	; 0x08
    1f2a:	d1 87       	std	Z+9, r29	; 0x09
    1f2c:	83 81       	ldd	r24, Z+3	; 0x03
    1f2e:	82 60       	ori	r24, 0x02	; 2
    1f30:	83 83       	std	Z+3, r24	; 0x03
    1f32:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <__iob+0x2>
    1f36:	90 91 92 21 	lds	r25, 0x2192	; 0x802192 <__iob+0x3>
    1f3a:	89 2b       	or	r24, r25
    1f3c:	71 f4       	brne	.+28     	; 0x1f5a <fdevopen+0x88>
    1f3e:	e0 93 91 21 	sts	0x2191, r30	; 0x802191 <__iob+0x2>
    1f42:	f0 93 92 21 	sts	0x2192, r31	; 0x802192 <__iob+0x3>
    1f46:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <__iob+0x4>
    1f4a:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <__iob+0x5>
    1f4e:	89 2b       	or	r24, r25
    1f50:	21 f4       	brne	.+8      	; 0x1f5a <fdevopen+0x88>
    1f52:	e0 93 93 21 	sts	0x2193, r30	; 0x802193 <__iob+0x4>
    1f56:	f0 93 94 21 	sts	0x2194, r31	; 0x802194 <__iob+0x5>
    1f5a:	cf 01       	movw	r24, r30
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	08 95       	ret

00001f66 <putchar>:
    1f66:	60 91 91 21 	lds	r22, 0x2191	; 0x802191 <__iob+0x2>
    1f6a:	70 91 92 21 	lds	r23, 0x2192	; 0x802192 <__iob+0x3>
    1f6e:	72 c1       	rjmp	.+740    	; 0x2254 <fputc>

00001f70 <puts>:
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	e0 91 91 21 	lds	r30, 0x2191	; 0x802191 <__iob+0x2>
    1f7c:	f0 91 92 21 	lds	r31, 0x2192	; 0x802192 <__iob+0x3>
    1f80:	23 81       	ldd	r18, Z+3	; 0x03
    1f82:	21 ff       	sbrs	r18, 1
    1f84:	1b c0       	rjmp	.+54     	; 0x1fbc <puts+0x4c>
    1f86:	8c 01       	movw	r16, r24
    1f88:	d0 e0       	ldi	r29, 0x00	; 0
    1f8a:	c0 e0       	ldi	r28, 0x00	; 0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	81 91       	ld	r24, Z+
    1f90:	8f 01       	movw	r16, r30
    1f92:	60 91 91 21 	lds	r22, 0x2191	; 0x802191 <__iob+0x2>
    1f96:	70 91 92 21 	lds	r23, 0x2192	; 0x802192 <__iob+0x3>
    1f9a:	db 01       	movw	r26, r22
    1f9c:	18 96       	adiw	r26, 0x08	; 8
    1f9e:	ed 91       	ld	r30, X+
    1fa0:	fc 91       	ld	r31, X
    1fa2:	19 97       	sbiw	r26, 0x09	; 9
    1fa4:	88 23       	and	r24, r24
    1fa6:	31 f0       	breq	.+12     	; 0x1fb4 <puts+0x44>
    1fa8:	19 95       	eicall
    1faa:	89 2b       	or	r24, r25
    1fac:	79 f3       	breq	.-34     	; 0x1f8c <puts+0x1c>
    1fae:	df ef       	ldi	r29, 0xFF	; 255
    1fb0:	cf ef       	ldi	r28, 0xFF	; 255
    1fb2:	ec cf       	rjmp	.-40     	; 0x1f8c <puts+0x1c>
    1fb4:	8a e0       	ldi	r24, 0x0A	; 10
    1fb6:	19 95       	eicall
    1fb8:	89 2b       	or	r24, r25
    1fba:	19 f0       	breq	.+6      	; 0x1fc2 <puts+0x52>
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	9f ef       	ldi	r25, 0xFF	; 255
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <puts+0x56>
    1fc2:	8d 2f       	mov	r24, r29
    1fc4:	9c 2f       	mov	r25, r28
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	08 95       	ret

00001fd0 <calloc>:
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	86 9f       	mul	r24, r22
    1fda:	80 01       	movw	r16, r0
    1fdc:	87 9f       	mul	r24, r23
    1fde:	10 0d       	add	r17, r0
    1fe0:	96 9f       	mul	r25, r22
    1fe2:	10 0d       	add	r17, r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	c8 01       	movw	r24, r16
    1fe8:	0d d0       	rcall	.+26     	; 0x2004 <malloc>
    1fea:	ec 01       	movw	r28, r24
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	21 f0       	breq	.+8      	; 0x1ff8 <calloc+0x28>
    1ff0:	a8 01       	movw	r20, r16
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	27 d1       	rcall	.+590    	; 0x2246 <memset>
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <malloc>:
    2004:	0f 93       	push	r16
    2006:	1f 93       	push	r17
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	82 30       	cpi	r24, 0x02	; 2
    200e:	91 05       	cpc	r25, r1
    2010:	10 f4       	brcc	.+4      	; 0x2016 <malloc+0x12>
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	e0 91 97 21 	lds	r30, 0x2197	; 0x802197 <__flp>
    201a:	f0 91 98 21 	lds	r31, 0x2198	; 0x802198 <__flp+0x1>
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	30 97       	sbiw	r30, 0x00	; 0
    2028:	19 f1       	breq	.+70     	; 0x2070 <malloc+0x6c>
    202a:	40 81       	ld	r20, Z
    202c:	51 81       	ldd	r21, Z+1	; 0x01
    202e:	02 81       	ldd	r16, Z+2	; 0x02
    2030:	13 81       	ldd	r17, Z+3	; 0x03
    2032:	48 17       	cp	r20, r24
    2034:	59 07       	cpc	r21, r25
    2036:	c8 f0       	brcs	.+50     	; 0x206a <malloc+0x66>
    2038:	84 17       	cp	r24, r20
    203a:	95 07       	cpc	r25, r21
    203c:	69 f4       	brne	.+26     	; 0x2058 <malloc+0x54>
    203e:	10 97       	sbiw	r26, 0x00	; 0
    2040:	31 f0       	breq	.+12     	; 0x204e <malloc+0x4a>
    2042:	12 96       	adiw	r26, 0x02	; 2
    2044:	0c 93       	st	X, r16
    2046:	12 97       	sbiw	r26, 0x02	; 2
    2048:	13 96       	adiw	r26, 0x03	; 3
    204a:	1c 93       	st	X, r17
    204c:	27 c0       	rjmp	.+78     	; 0x209c <malloc+0x98>
    204e:	00 93 97 21 	sts	0x2197, r16	; 0x802197 <__flp>
    2052:	10 93 98 21 	sts	0x2198, r17	; 0x802198 <__flp+0x1>
    2056:	22 c0       	rjmp	.+68     	; 0x209c <malloc+0x98>
    2058:	21 15       	cp	r18, r1
    205a:	31 05       	cpc	r19, r1
    205c:	19 f0       	breq	.+6      	; 0x2064 <malloc+0x60>
    205e:	42 17       	cp	r20, r18
    2060:	53 07       	cpc	r21, r19
    2062:	18 f4       	brcc	.+6      	; 0x206a <malloc+0x66>
    2064:	9a 01       	movw	r18, r20
    2066:	bd 01       	movw	r22, r26
    2068:	ef 01       	movw	r28, r30
    206a:	df 01       	movw	r26, r30
    206c:	f8 01       	movw	r30, r16
    206e:	db cf       	rjmp	.-74     	; 0x2026 <malloc+0x22>
    2070:	21 15       	cp	r18, r1
    2072:	31 05       	cpc	r19, r1
    2074:	f9 f0       	breq	.+62     	; 0x20b4 <malloc+0xb0>
    2076:	28 1b       	sub	r18, r24
    2078:	39 0b       	sbc	r19, r25
    207a:	24 30       	cpi	r18, 0x04	; 4
    207c:	31 05       	cpc	r19, r1
    207e:	80 f4       	brcc	.+32     	; 0x20a0 <malloc+0x9c>
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	61 15       	cp	r22, r1
    2086:	71 05       	cpc	r23, r1
    2088:	21 f0       	breq	.+8      	; 0x2092 <malloc+0x8e>
    208a:	fb 01       	movw	r30, r22
    208c:	82 83       	std	Z+2, r24	; 0x02
    208e:	93 83       	std	Z+3, r25	; 0x03
    2090:	04 c0       	rjmp	.+8      	; 0x209a <malloc+0x96>
    2092:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <__flp>
    2096:	90 93 98 21 	sts	0x2198, r25	; 0x802198 <__flp+0x1>
    209a:	fe 01       	movw	r30, r28
    209c:	32 96       	adiw	r30, 0x02	; 2
    209e:	44 c0       	rjmp	.+136    	; 0x2128 <malloc+0x124>
    20a0:	fe 01       	movw	r30, r28
    20a2:	e2 0f       	add	r30, r18
    20a4:	f3 1f       	adc	r31, r19
    20a6:	81 93       	st	Z+, r24
    20a8:	91 93       	st	Z+, r25
    20aa:	22 50       	subi	r18, 0x02	; 2
    20ac:	31 09       	sbc	r19, r1
    20ae:	28 83       	st	Y, r18
    20b0:	39 83       	std	Y+1, r19	; 0x01
    20b2:	3a c0       	rjmp	.+116    	; 0x2128 <malloc+0x124>
    20b4:	20 91 95 21 	lds	r18, 0x2195	; 0x802195 <__brkval>
    20b8:	30 91 96 21 	lds	r19, 0x2196	; 0x802196 <__brkval+0x1>
    20bc:	23 2b       	or	r18, r19
    20be:	41 f4       	brne	.+16     	; 0x20d0 <malloc+0xcc>
    20c0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    20c4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    20c8:	20 93 95 21 	sts	0x2195, r18	; 0x802195 <__brkval>
    20cc:	30 93 96 21 	sts	0x2196, r19	; 0x802196 <__brkval+0x1>
    20d0:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    20d4:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    20d8:	21 15       	cp	r18, r1
    20da:	31 05       	cpc	r19, r1
    20dc:	41 f4       	brne	.+16     	; 0x20ee <malloc+0xea>
    20de:	2d b7       	in	r18, 0x3d	; 61
    20e0:	3e b7       	in	r19, 0x3e	; 62
    20e2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    20e6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    20ea:	24 1b       	sub	r18, r20
    20ec:	35 0b       	sbc	r19, r21
    20ee:	e0 91 95 21 	lds	r30, 0x2195	; 0x802195 <__brkval>
    20f2:	f0 91 96 21 	lds	r31, 0x2196	; 0x802196 <__brkval+0x1>
    20f6:	e2 17       	cp	r30, r18
    20f8:	f3 07       	cpc	r31, r19
    20fa:	a0 f4       	brcc	.+40     	; 0x2124 <malloc+0x120>
    20fc:	2e 1b       	sub	r18, r30
    20fe:	3f 0b       	sbc	r19, r31
    2100:	28 17       	cp	r18, r24
    2102:	39 07       	cpc	r19, r25
    2104:	78 f0       	brcs	.+30     	; 0x2124 <malloc+0x120>
    2106:	ac 01       	movw	r20, r24
    2108:	4e 5f       	subi	r20, 0xFE	; 254
    210a:	5f 4f       	sbci	r21, 0xFF	; 255
    210c:	24 17       	cp	r18, r20
    210e:	35 07       	cpc	r19, r21
    2110:	48 f0       	brcs	.+18     	; 0x2124 <malloc+0x120>
    2112:	4e 0f       	add	r20, r30
    2114:	5f 1f       	adc	r21, r31
    2116:	40 93 95 21 	sts	0x2195, r20	; 0x802195 <__brkval>
    211a:	50 93 96 21 	sts	0x2196, r21	; 0x802196 <__brkval+0x1>
    211e:	81 93       	st	Z+, r24
    2120:	91 93       	st	Z+, r25
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <malloc+0x124>
    2124:	e0 e0       	ldi	r30, 0x00	; 0
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	cf 01       	movw	r24, r30
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	08 95       	ret

00002134 <free>:
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	09 f4       	brne	.+2      	; 0x213e <free+0xa>
    213c:	81 c0       	rjmp	.+258    	; 0x2240 <free+0x10c>
    213e:	fc 01       	movw	r30, r24
    2140:	32 97       	sbiw	r30, 0x02	; 2
    2142:	12 82       	std	Z+2, r1	; 0x02
    2144:	13 82       	std	Z+3, r1	; 0x03
    2146:	a0 91 97 21 	lds	r26, 0x2197	; 0x802197 <__flp>
    214a:	b0 91 98 21 	lds	r27, 0x2198	; 0x802198 <__flp+0x1>
    214e:	10 97       	sbiw	r26, 0x00	; 0
    2150:	81 f4       	brne	.+32     	; 0x2172 <free+0x3e>
    2152:	20 81       	ld	r18, Z
    2154:	31 81       	ldd	r19, Z+1	; 0x01
    2156:	82 0f       	add	r24, r18
    2158:	93 1f       	adc	r25, r19
    215a:	20 91 95 21 	lds	r18, 0x2195	; 0x802195 <__brkval>
    215e:	30 91 96 21 	lds	r19, 0x2196	; 0x802196 <__brkval+0x1>
    2162:	28 17       	cp	r18, r24
    2164:	39 07       	cpc	r19, r25
    2166:	51 f5       	brne	.+84     	; 0x21bc <free+0x88>
    2168:	e0 93 95 21 	sts	0x2195, r30	; 0x802195 <__brkval>
    216c:	f0 93 96 21 	sts	0x2196, r31	; 0x802196 <__brkval+0x1>
    2170:	67 c0       	rjmp	.+206    	; 0x2240 <free+0x10c>
    2172:	ed 01       	movw	r28, r26
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	ce 17       	cp	r28, r30
    217a:	df 07       	cpc	r29, r31
    217c:	40 f4       	brcc	.+16     	; 0x218e <free+0x5a>
    217e:	4a 81       	ldd	r20, Y+2	; 0x02
    2180:	5b 81       	ldd	r21, Y+3	; 0x03
    2182:	9e 01       	movw	r18, r28
    2184:	41 15       	cp	r20, r1
    2186:	51 05       	cpc	r21, r1
    2188:	f1 f0       	breq	.+60     	; 0x21c6 <free+0x92>
    218a:	ea 01       	movw	r28, r20
    218c:	f5 cf       	rjmp	.-22     	; 0x2178 <free+0x44>
    218e:	c2 83       	std	Z+2, r28	; 0x02
    2190:	d3 83       	std	Z+3, r29	; 0x03
    2192:	40 81       	ld	r20, Z
    2194:	51 81       	ldd	r21, Z+1	; 0x01
    2196:	84 0f       	add	r24, r20
    2198:	95 1f       	adc	r25, r21
    219a:	c8 17       	cp	r28, r24
    219c:	d9 07       	cpc	r29, r25
    219e:	59 f4       	brne	.+22     	; 0x21b6 <free+0x82>
    21a0:	88 81       	ld	r24, Y
    21a2:	99 81       	ldd	r25, Y+1	; 0x01
    21a4:	84 0f       	add	r24, r20
    21a6:	95 1f       	adc	r25, r21
    21a8:	02 96       	adiw	r24, 0x02	; 2
    21aa:	80 83       	st	Z, r24
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	9b 81       	ldd	r25, Y+3	; 0x03
    21b2:	82 83       	std	Z+2, r24	; 0x02
    21b4:	93 83       	std	Z+3, r25	; 0x03
    21b6:	21 15       	cp	r18, r1
    21b8:	31 05       	cpc	r19, r1
    21ba:	29 f4       	brne	.+10     	; 0x21c6 <free+0x92>
    21bc:	e0 93 97 21 	sts	0x2197, r30	; 0x802197 <__flp>
    21c0:	f0 93 98 21 	sts	0x2198, r31	; 0x802198 <__flp+0x1>
    21c4:	3d c0       	rjmp	.+122    	; 0x2240 <free+0x10c>
    21c6:	e9 01       	movw	r28, r18
    21c8:	ea 83       	std	Y+2, r30	; 0x02
    21ca:	fb 83       	std	Y+3, r31	; 0x03
    21cc:	49 91       	ld	r20, Y+
    21ce:	59 91       	ld	r21, Y+
    21d0:	c4 0f       	add	r28, r20
    21d2:	d5 1f       	adc	r29, r21
    21d4:	ec 17       	cp	r30, r28
    21d6:	fd 07       	cpc	r31, r29
    21d8:	61 f4       	brne	.+24     	; 0x21f2 <free+0xbe>
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	84 0f       	add	r24, r20
    21e0:	95 1f       	adc	r25, r21
    21e2:	02 96       	adiw	r24, 0x02	; 2
    21e4:	e9 01       	movw	r28, r18
    21e6:	88 83       	st	Y, r24
    21e8:	99 83       	std	Y+1, r25	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	8a 83       	std	Y+2, r24	; 0x02
    21f0:	9b 83       	std	Y+3, r25	; 0x03
    21f2:	e0 e0       	ldi	r30, 0x00	; 0
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	12 96       	adiw	r26, 0x02	; 2
    21f8:	8d 91       	ld	r24, X+
    21fa:	9c 91       	ld	r25, X
    21fc:	13 97       	sbiw	r26, 0x03	; 3
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	19 f0       	breq	.+6      	; 0x2208 <free+0xd4>
    2202:	fd 01       	movw	r30, r26
    2204:	dc 01       	movw	r26, r24
    2206:	f7 cf       	rjmp	.-18     	; 0x21f6 <free+0xc2>
    2208:	8d 91       	ld	r24, X+
    220a:	9c 91       	ld	r25, X
    220c:	11 97       	sbiw	r26, 0x01	; 1
    220e:	9d 01       	movw	r18, r26
    2210:	2e 5f       	subi	r18, 0xFE	; 254
    2212:	3f 4f       	sbci	r19, 0xFF	; 255
    2214:	82 0f       	add	r24, r18
    2216:	93 1f       	adc	r25, r19
    2218:	20 91 95 21 	lds	r18, 0x2195	; 0x802195 <__brkval>
    221c:	30 91 96 21 	lds	r19, 0x2196	; 0x802196 <__brkval+0x1>
    2220:	28 17       	cp	r18, r24
    2222:	39 07       	cpc	r19, r25
    2224:	69 f4       	brne	.+26     	; 0x2240 <free+0x10c>
    2226:	30 97       	sbiw	r30, 0x00	; 0
    2228:	29 f4       	brne	.+10     	; 0x2234 <free+0x100>
    222a:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <__flp>
    222e:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <__flp+0x1>
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <free+0x104>
    2234:	12 82       	std	Z+2, r1	; 0x02
    2236:	13 82       	std	Z+3, r1	; 0x03
    2238:	a0 93 95 21 	sts	0x2195, r26	; 0x802195 <__brkval>
    223c:	b0 93 96 21 	sts	0x2196, r27	; 0x802196 <__brkval+0x1>
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	08 95       	ret

00002246 <memset>:
    2246:	dc 01       	movw	r26, r24
    2248:	01 c0       	rjmp	.+2      	; 0x224c <memset+0x6>
    224a:	6d 93       	st	X+, r22
    224c:	41 50       	subi	r20, 0x01	; 1
    224e:	50 40       	sbci	r21, 0x00	; 0
    2250:	e0 f7       	brcc	.-8      	; 0x224a <memset+0x4>
    2252:	08 95       	ret

00002254 <fputc>:
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	fb 01       	movw	r30, r22
    225e:	23 81       	ldd	r18, Z+3	; 0x03
    2260:	21 fd       	sbrc	r18, 1
    2262:	03 c0       	rjmp	.+6      	; 0x226a <fputc+0x16>
    2264:	8f ef       	ldi	r24, 0xFF	; 255
    2266:	9f ef       	ldi	r25, 0xFF	; 255
    2268:	2c c0       	rjmp	.+88     	; 0x22c2 <fputc+0x6e>
    226a:	22 ff       	sbrs	r18, 2
    226c:	16 c0       	rjmp	.+44     	; 0x229a <fputc+0x46>
    226e:	46 81       	ldd	r20, Z+6	; 0x06
    2270:	57 81       	ldd	r21, Z+7	; 0x07
    2272:	24 81       	ldd	r18, Z+4	; 0x04
    2274:	35 81       	ldd	r19, Z+5	; 0x05
    2276:	42 17       	cp	r20, r18
    2278:	53 07       	cpc	r21, r19
    227a:	44 f4       	brge	.+16     	; 0x228c <fputc+0x38>
    227c:	a0 81       	ld	r26, Z
    227e:	b1 81       	ldd	r27, Z+1	; 0x01
    2280:	9d 01       	movw	r18, r26
    2282:	2f 5f       	subi	r18, 0xFF	; 255
    2284:	3f 4f       	sbci	r19, 0xFF	; 255
    2286:	20 83       	st	Z, r18
    2288:	31 83       	std	Z+1, r19	; 0x01
    228a:	8c 93       	st	X, r24
    228c:	26 81       	ldd	r18, Z+6	; 0x06
    228e:	37 81       	ldd	r19, Z+7	; 0x07
    2290:	2f 5f       	subi	r18, 0xFF	; 255
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	26 83       	std	Z+6, r18	; 0x06
    2296:	37 83       	std	Z+7, r19	; 0x07
    2298:	14 c0       	rjmp	.+40     	; 0x22c2 <fputc+0x6e>
    229a:	8b 01       	movw	r16, r22
    229c:	ec 01       	movw	r28, r24
    229e:	fb 01       	movw	r30, r22
    22a0:	00 84       	ldd	r0, Z+8	; 0x08
    22a2:	f1 85       	ldd	r31, Z+9	; 0x09
    22a4:	e0 2d       	mov	r30, r0
    22a6:	19 95       	eicall
    22a8:	89 2b       	or	r24, r25
    22aa:	e1 f6       	brne	.-72     	; 0x2264 <fputc+0x10>
    22ac:	d8 01       	movw	r26, r16
    22ae:	16 96       	adiw	r26, 0x06	; 6
    22b0:	8d 91       	ld	r24, X+
    22b2:	9c 91       	ld	r25, X
    22b4:	17 97       	sbiw	r26, 0x07	; 7
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	16 96       	adiw	r26, 0x06	; 6
    22ba:	8d 93       	st	X+, r24
    22bc:	9c 93       	st	X, r25
    22be:	17 97       	sbiw	r26, 0x07	; 7
    22c0:	ce 01       	movw	r24, r28
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	08 95       	ret

000022cc <_exit>:
    22cc:	f8 94       	cli

000022ce <__stop_program>:
    22ce:	ff cf       	rjmp	.-2      	; 0x22ce <__stop_program>
